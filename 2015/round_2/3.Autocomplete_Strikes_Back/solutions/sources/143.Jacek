#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void GEN(int a, int b, int c, int r, int k, int x[]) {
	x[0] = a;
	FOR(i,1,k) x[i] = (LL(x[i - 1]) * b + c) % r;
}

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}




const int INF = 1000000000;

bool byLen(const string& s1, const string& s2) {
	return SIZE(s1) > SIZE(s2);
}

VI comb(const VI& v1, const VI& v2) {
	int n = SIZE(v1);
	VI res(n, INF);
	REP(i,n) {
		int x = INF;
		REP(j,i+1) if (v1[j] < INF && v2[i-j] < INF) x = min(x, v1[j] + v2[i-j] + (i-j));
		res[i] = x;
	}
	return res;
}

void oneCase() {
	INT(n);
	INT(k);
	scanf("\n");
	VS s;
	REP(i,n) {
		char buf[30000];
		gets(buf);
		s.PB(buf);
	}
	set<string> pre;
	pre.insert("");
	FORE(it,s) {
		int k = SIZE(*it);
		string p;
		REP(i,k) {
			p.PB((*it)[i]);
			pre.insert(p);
		}
	}
	VS spre;
	FORE(it,pre) spre.PB(*it);
	sort(ALL(spre), byLen);
	map<string, VI*> res;
	FORE(it,spre) {
		bool empty_too = 0;
		set<char> next;
		FORE(jt,s) {
			if ((*jt).substr(0, SIZE(*it)) == *it) {
				if (SIZE(*it) == SIZE(*jt)) empty_too = 1;
				else next.insert((*jt)[SIZE(*it)]);
			}
		}
		res[*it] = new VI(k+1, INF);
		VI& r = *res[*it];
		r[0] = 0;
		if (empty_too) r[1] = 0;
		FORE(jt,next) {
			string npre = *it;
			npre.PB(*jt);
			r = comb(r, *res[npre]);
		}
		r[0] = 0;
		if (r[1] < INF) r[1] = 0;
	}
	printf("%d\n", max((*res[""])[k], 1));
	FORE(it,res) delete it->SD;
}

#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>
#include <map>

using namespace std;

struct trie {
    int cnt;
    trie * sons[26];
    trie () {
        cnt = 0;
        for(int i = 0; i < 26; ++i)
            sons[i] = nullptr;
    }
};

trie * r;
void add(string s) {
    trie * v = r;
    v -> cnt++;
    for(int i = 0; i < s.size(); ++i) {
        if (v->sons[s[i]-'a'] == nullptr)
            v->sons[s[i]-'a'] = new trie();
        v = v->sons[s[i]-'a'];
        v->cnt++;
    }
}

int main() {
    ios::sync_with_stdio(0);
    freopen("input.txt","r",stdin);freopen("output.txt", "w", stdout);
    int t;
    cin >> t;
    for(int T = 1; T <= t; ++T) {
        int n, k;
        cin >> n >> k;
        r = new trie();
        string s;
        for(int i = 0; i < n; ++i) {
            cin >> s;
            add(s);
        }
        
        cout << "Case #" << T << ": ";
        
        int ans = 0;
        queue<pair<trie*,pair<int,int> > > q;
        q.push(make_pair(r, make_pair(0, 0)));
        

        while (k > 0) {
            trie * r = q.front().first;
            int d = q.front().second.first;
            int mn = q.front().second.second;
            
            if (mn > 0) {
                ans -= mn;
                k++;
            }
            
            q.pop();
            
            if (r->cnt == 1 && d > 0) {
                k--;
                ans += d;
                continue;
            }
            
            int cntt = 0;
            vector<pair<int, int> > vv;
            for(int i = 0; i < 26; ++i)
            if (r->sons[i] != nullptr) {
                cntt += r->sons[i]->cnt;
                int tmp = 0;
                for(int j = 0; j < 26; ++j)
                if (r->sons[i]->sons[j] != nullptr)
                    tmp++;
                vv.push_back(make_pair(tmp, i));
            }
            
            if (cntt != r->cnt) {
                ans += d;
                --k;
            }
            
            /*cout << d << " " << k << " " << ans << "\n";
            for(int i = 0; i < 26; ++i)
                if (r->sons[i] != nullptr)
                    cout << (char)(i+'a') << " ";
            cout << "\n";
            */
            
            sort(vv.begin(), vv.end());
            reverse(vv.begin(), vv.end());
            int D = d+1;
            for(int i = 0; i < vv.size(); ++i)
            if (r->sons[vv[i].second] != nullptr) {
                cntt += r->sons[vv[i].second]->cnt;
                if (k > 0) {
                    ans += d+1;
                    --k;
                }
                
                q.push(make_pair(r->sons[vv[i].second], make_pair(d+1, D)));
            }
        }
        cout << ans << "\n";
    }
    
    return 0;
}
#include<cstdio>
#include<algorithm>
#define L 22000
#define next nextt
#define end endd

using namespace std;

int T,I=0;

void solve();

int main() {
    scanf("%d",&T);
    while (T--){
        printf("Case #%d: ",++I);
        solve();
    }
}

int len;
int next[L][26];
int v[L];
bool end[L];
const int inf = 1000000;

void add(char *s) {
    int start=0;
    while (*s) {
        int value=*s-'a';
        if (next[start][value]==0) {
            next[start][value] = len;
            v[len]=v[start]+1;
            ++len;
        }
        start = next[start][value];
        ++s;
    }
    end[start]=true;
}

int opt[L][200];
int left[L],right[L];

int dp(int a,int b) {
    if (b==0) return 0;
    if (a<0) return inf;
    int &ret = opt[a][b];
    if (ret>=0) return ret;
    if (a==0) {
        ret=dp(left[a],b);
    } else {
        ret = v[a]+dp(right[a],b-1);
        if (left[a]!=-1) {
            ret = min(ret, dp(left[a], b));
            if (end[a])
                ret=min(ret, dp(left[a],b-1)+v[a]);
        }
    }
    return ret;
}

void dfs(int a,int rig) {
    right[a]=rig;
    for (int i=25;i>=0;--i)
    if (next[a][i]>0) {
        dfs(next[a][i],rig);
        rig=next[a][i];
    }
    if (rig!=right[a])
        left[a]=rig;
    else left[a]=-1;
}

char s[L];

void solve() {
    int n,k;
    scanf("%d%d",&n,&k);
    memset(next,0,sizeof next);
    memset(v,0,sizeof v);
    memset(end,0,sizeof end);
    v[0]=0;
    len=1;
    for (int i=0;i<n;++i) {
        scanf(" %s",s);
        add(s);
    }
    dfs(0,-1);
    memset(opt,-1,sizeof opt);
    printf("%d\n",dp(0,k));
}

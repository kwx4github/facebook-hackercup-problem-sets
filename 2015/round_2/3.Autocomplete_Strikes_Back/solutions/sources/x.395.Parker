#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <string>
#include <queue>
using namespace std;

class Node {
public:
	bool excounts;
	int counts;
	int next[26];
};

Node node[1000000];
int counts;

void init() {
	counts = 0;
}

int get_node() {
	memset(node[counts].next, -1, sizeof(node[counts].next));
	node[counts].counts = 0;
	node[counts].excounts = false;
	return counts++;
}

void insert(const string& str, int index, int nodeindex) {
	node[nodeindex].counts++;
	if (index == str.size()) {
		node[nodeindex].excounts = true;
		return;
	}
	if (node[nodeindex].next[str[index] - 'a'] == -1) {
		node[nodeindex].next[str[index] - 'a'] = get_node();
	}
	insert(str, index + 1, node[nodeindex].next[str[index] - 'a']);
}

class Stat {
public:
	int nodeindex, step = 0;
	bool operator<(const Stat& another) const {
		if (step < another.step) {
			return false;
		}
		else if (step > another.step) {
			return true;
		}
		return node[nodeindex].counts < node[another.nodeindex].counts;
	}
};

int main() {
	int T;
	cin >> T;
	for (int cas = 1; cas <= T; cas++) {
		int N, K;
		cin >> N >> K;
		cerr << N << " " << K << endl;
		init();
		get_node();
		while (N--) {
			string input;
			cin >> input;
			insert(input, 0, 0);
		}
		priority_queue<Stat> q;
		Stat temp;
		temp.nodeindex = 0;
		temp.step = 0;
		q.push(temp);
		int rest = K;
		int ans = 0;
		while (q.size() < rest) {
			temp = q.top();
			q.pop();
			if (node[temp.nodeindex].counts == 1) {
				ans += temp.step;
				rest--;
				continue;
			}
			if (node[temp.nodeindex].excounts == true) {
				ans += temp.step;
				rest--;
			}
			Stat temp2;
			temp2.step = temp.step + 1;
			for (int i = 0; i < 26; i++) {
				if (node[temp.nodeindex].next[i] != -1) {
					temp2.nodeindex = node[temp.nodeindex].next[i];
					q.push(temp2);
				}
			}
		}
		while (rest--) {
			temp = q.top();
			q.pop();
			ans += temp.step;
		}
		if (K > 1) {
			cout << "Case #" << cas << ": " << ans << endl;
		}
		else {
			cout << "Case #" << cas << ": 1" << endl;
		}
	}
}
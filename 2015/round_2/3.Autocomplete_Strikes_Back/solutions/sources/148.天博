#include<iostream>
#include<string.h>
#include<stdio.h>
#include<cmath>
using namespace std;

struct node{
       int next[26];
       bool flag;
       };


int t;
int n,k;
node p[100001];
int tailp;
int root=1;

int dp[20001][101];

void dfs(int now)
{
    int i,j,r;
    int dp2[101];
    
    for(i=1;i<=k;i++)
    {
       dp2[i]=-1;
    }
    dp2[0]=0;
    
    for(i=0;i<=25;i++)
    {
        if(p[now].next[i]!=0)
        {
            dfs(p[now].next[i]);
            
            for(j=k;j>=0;j--)
            {
                for(r=0;r<=j;r++)
                {
                    if(dp2[j-r]!=-1 && dp[p[now].next[i]][r]!=-1)
                    {
                        if(dp2[j]==-1)
                        {
                            dp2[j]=dp2[j-r]+dp[p[now].next[i]][r]+r;
                        }
                        else
                        {
                            dp2[j]=min(dp2[j],dp2[j-r]+dp[p[now].next[i]][r]+r);
                        }
                    }
                }
            }
        }
    }
    
    
    for(i=0;i<=k;i++)
    {
        dp[now][i]=dp2[i];
    }
    if(dp[now][1]!=-1)
    {
        dp[now][1]=0;
    }
    
    if(p[now].flag==1)
    {
        for(i=1;i<=k;i++)
        {
            if(dp2[i-1]!=-1)
            {
                if(dp[now][i]==-1)
                {
                    dp[now][i]=dp2[i-1];
                }
                else
                {
                    dp[now][i]=min(dp[now][i],dp2[i-1]);
                }
            }
        }
    }
    
    
    //cout<<now<<endl;
    
    //for(i=0;i<=k;i++)
    //{
    //    cout<<dp[now][i]<<' ';
    //}
    //cout<<endl;
    
    
    return ;
}



int main()
{
     int i,j,times;
     int temp;
     char d[20001];
     freopen("autocomplete_strikes_back.txt","r",stdin);
     freopen("ans.out","w",stdout);
     
     cin>>t;
     
     for(times=1;times<=t;times++)
     {
         cin>>n>>k;
         
         tailp=2;
         memset(p,0,sizeof(p));
         for(i=1;i<=n;i++)
         {
             cin>>d;
             
             temp=root;
             for(j=0;j<strlen(d);j++)
             {
                 if(p[temp].next[d[j]-'a']==0)
                 {
                     p[temp].next[d[j]-'a']=tailp;
                     temp=tailp;
                     tailp++;
                 }
                 else
                 {
                     temp=p[temp].next[d[j]-'a'];
                 }
             }
             p[temp].flag=1;
             
         }
         
         memset(dp,-1,sizeof(dp));
         dfs(root);
         
         cout<<"Case #"<<times<<": "<<dp[root][k]<<endl;
     }
     
     return 0;
}

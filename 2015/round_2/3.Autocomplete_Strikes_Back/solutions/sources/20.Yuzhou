#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <bitset>
#include <numeric>
#include <ctime>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef pair<int, int> PII;
typedef long long ll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pct __builtin_popcount

#define INF 1000000007
#define N 20010
#define M 210

int A[N][26], L, B[N];
string C[N];
bool c[N];
int f[N][M];
int n,m;

int main (){
	int _;
	cin >> _;
	for (int __ = 1; __ <= _; __ ++) {
		memset(A, 0, sizeof A);
		memset(B, 0, sizeof B);
		memset(c, 0, sizeof c);
		L = 1;
		cin >> n >> m;
		for (int i = 0; i < n; i ++) {
			string s;
			cin >> s;
			int p = 1;
			for (int j = 0; j < (int) s.length(); j ++) {
				int c = s[j]-'a';
				if (A[p][c] == 0) {
					L ++;
					B[L] = B[p]+1;
					C[L] = C[p]+s[j];
					A[p][c] = L;
				}
				p = A[p][c];
			}
			c[p] = 1;
		}
		//memset(f, 0, sizeof f);
		for (int i = L; i >= 1; i --) {
			f[i][0] = 0;
			for (int j = 1; j <= m; j ++) f[i][j] = INF;
			for (int j = 0; j < 26; j ++) if (A[i][j] != 0)
				for (int k = m; k >= 0; k --) 
					for (int l = 1; l+k <= m; l ++) {
						// f[i][k]
						// f[A[i][j]][l]
						if (f[i][k] >= INF || f[A[i][j]][l] >= INF) continue;
						if (k == 1 && l == 1) {
							f[i][k+l] = min(f[i][k+l], (B[i]+1)*2);
						} else
						if ((k == 1 || l == 1) && k+l >= 2) {
							f[i][k+l] = min(f[i][k+l], f[i][k]+f[A[i][j]][l]+B[i]);
						} else {
							f[i][k+l] = min(f[i][k+l], f[i][k]+f[A[i][j]][l]);
						}
					}
			if (c[i]) {
				for (int j = m-1; j >= 2; j --) {
					f[i][j+1] = min(f[i][j+1], f[i][j]+B[i]);
				}
				if (f[i][1] < INF) f[i][2] = min(f[i][2], B[i]*2+1);
				f[i][1] = min(f[i][1], 1);
				f[i][0] = min(f[i][0], 0);
			}
			//cout << C[i] << endl;
			//for (int j = 0; j <= m; j ++) printf ("%d %d %d\n", i, j, f[i][j]);
		}
		printf ("Case #%d: %d\n", __, f[1][m]);
	}
	return 0;
}
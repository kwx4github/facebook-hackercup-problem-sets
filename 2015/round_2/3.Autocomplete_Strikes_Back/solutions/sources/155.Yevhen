#pragma comment(linker, "/STACK:367772160")

#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <math.h>
#include <memory.h>


using namespace std;

vector<string> v;
#define MAX_INT 1000000000
#define MAX 4001
int commons[MAX][MAX];
int mids[MAX][MAX];
int nums[MAX][MAX];
int mem[20000][MAX];
int Number;

int f(int start, int finish, int cnt, int offs)
{
	if (cnt == 0)
		return 0;
	if (start >= finish)
		return MAX_INT;
	if (finish - start < cnt)
		return MAX_INT;
	if (start + 1 == finish)
	{
		if (cnt == 1)
		{
			return min((int)v[start].size(), offs + 1);
		}
		else
			return MAX_INT;
	}
	if (cnt == 1)
		return offs+1;

	if (nums[start][finish] == -1)
	{
		nums[start][finish] = Number;
		Number++;
	}
	int n = nums[start][finish];
	if (mem[n][cnt] != -1)
		return mem[n][cnt];
	
	if (commons[start][finish] == -1)
	{
		int cm = offs;
		for (int i = offs; i < min(v[start].size(), v[finish - 1].size()); i++)
		{
			if (v[start][i] != v[finish - 1][i])
				break;
			cm++;
		}
		commons[start][finish] = cm;
	}
	int c = commons[start][finish];
	if (mids[start][finish] == -1)
	{
		int ms = start + 1;
		if (v[start].size() > c)
		{
			while (ms < finish && v[ms][c] == v[ms-1][c])
				ms++;
		}
		mids[start][finish] = ms;
	}
	int m = mids[start][finish];
	
	int res = MAX_INT;
	int x = min(cnt, m - start);
	int y = min(cnt, finish - m);
	for (int i = cnt - y; i <= x; i++)
	{				
		int a = f(start, m, i, c);
		int b = f(m, finish, cnt - i, c);
		int z = a + b;
		res = min(res, z);
	}

	mem[n][cnt] = res;
	return res;
}

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	int T;
	cin >> T;
	for (int t = 0; t < T; t++)
	{
		int N, K;
		cin >> N >> K;
		v.clear();
		for (int i = 0; i < N; i++)
		{
			string a;
			cin >> a;
			v.push_back(a);
		}
		sort(v.begin(), v.end());

		for (int i = 0; i < MAX; i++)
			for (int j = 0; j < MAX; j++)
			{
				mids[i][j] = -1;
				commons[i][j] = -1;
				nums[i][j] = -1;
			}
		for (int i = 0; i < 20000; i++)
			for (int j = 0; j < MAX; j++)
			{
				mem[i][j] = -1;
			}
		Number = 0;
		int res = f(0, N, K, 0);
		printf("Case #%d: %d\n", t+1, res);
	}
	return 0;
}
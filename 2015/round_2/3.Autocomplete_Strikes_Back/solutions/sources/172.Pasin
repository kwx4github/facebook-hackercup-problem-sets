#include <iostream>
#include <string>

#define MAX_N 4005
#define MAX_K 105
#define INF 1000000005

using namespace std;

int tests, n, k, x[MAX_N], answer;
int prevv, now;
int comm[MAX_N][MAX_N];
int l[MAX_N];
int mapcom[MAX_N][MAX_N], encom[MAX_N], dis[MAX_N][MAX_N];
int dp[2][MAX_N][MAX_N];
string s[MAX_N];

int main() {
    cin >> tests;
    for (int test = 0 ; test < tests ; test ++) {
    	cin >> n >> k;
    	for (int i = 1 ; i <= n ; i ++) {
    		cin >> s[i];
    	}
        sort(s + 1, s + n + 1);
        //printf("XXXX\n");
        for (int i = 1 ; i <= n ; i ++) {
            l[i] = s[i].length();
        }
        for (int i = 1 ; i < n ; i ++) {
            comm[i][i + 1] = 0;
            while (s[i][comm[i][i + 1]] == s[i + 1][comm[i][i + 1]]) {
                comm[i][i + 1] ++;
            }
        }
        for (int i = 1 ; i <= n ; i ++) {
            for (int j = i + 2 ; j <= n ; j ++) {
                comm[i][j] = min(comm[i][j - 1], comm[j - 1][j]);
            }
        }
        for (int i = 1 ; i <= n ; i ++) {
            encom[i] = 1;
            dis[i][0] = 0;
            mapcom[i][0] = 0;
            for (int j = 0 ; j < i ; j ++) {
                if (comm[j][i] != dis[i][encom[i] - 1]) {
                    dis[i][encom[i]] = comm[j][i];
                    mapcom[i][dis[i][encom[i]]] = encom[i];
                    encom[i] ++;
                }
            }
        }
    	prevv = 0;
    	now = 1;
        for (int r = 1 ; r <= k ; r ++) {
            if (r == 1) {
                for (int i = 1 ; i <= n ; i ++) {
                    dp[now][0][i] = 0;
                    for (int j = 1 ; j < encom[i] ; j ++) {
                        dp[now][j][i] = INF;
                    }
                }
            } else {
                for (int i = 1 ; i <= n ; i ++) {
                    for (int j = 0 ; j < encom[i] ; j ++) {
                        dp[now][j][i] = INF;
                    }
                    for (int j = 1 ; j < i ; j ++) {
                        for (int p = 0 ; p < encom[j] ; p ++) {
                            dp[now][mapcom[i][comm[j][i]]][i] = min(dp[now][mapcom[i][comm[j][i]]][i], dp[prevv][p][j] + min(l[j], 1 + max(dis[j][p], comm[j][i])));
                        }
                    }
                }
            }
            /*for (int i = 1 ; i <= n ; i ++) {
                for (int j = 0 ; j < encom[i] ; j ++) {
                    printf("YY %d %d %d : %d\n", r, i, dis[i][j], dp[now][j][i]);
                }
            }*/
    		prevv = 1 - prevv;
    		now = 1 - now;
        }
        answer = INF;
        for (int i = 1 ; i <= n ; i ++) {
            for (int j = 0 ; j < encom[i] ; j ++) {
                answer = min(answer, dp[prevv][j][i] + min(dis[i][j] + 1, l[i]));
                //printf("ZZ %d %d %d %d\n", i, dis[i][j], dp[prevv][j][i], answer);
            }
        }
		printf("Case #%d: %d\n", test + 1, answer);
    }
    return 0;
}

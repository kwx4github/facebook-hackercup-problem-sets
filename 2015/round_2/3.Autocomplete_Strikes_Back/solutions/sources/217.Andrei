#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>

using namespace std;

const int oo = 0x3f3f3f3f;

class Trie {
  public:
    Trie():
      root(new Node()) {}

    void Insert(const string &word) {
        Node *node = root;
        for (int i = 0; i < int(word.length()); ++i) {
            ++node->count;
            if (node->sons.count(word[i]) == 0)
                node->sons[word[i]] = new Node();
            node = node->sons[word[i]];
        }
        ++node->count;
        ++node->end;
    }

    int SolveDP(const int requiredCount) const {
        vector<int> dp = DFS(root, requiredCount, 0);
        return dp[requiredCount];
    }

  private:
    class Node {
      public:
        int count, end;
        map<char, Node*> sons;

        Node():
          count(0),
          end(0),
          sons(map<char, Node*>()) {}
    };

    Node *root;

    vector<int> DFS(Node *node, const int maxCount, const int depth) const {
        vector<int> dp = vector<int>(maxCount + 1, oo);
        dp[0] = 0;
        for (const auto &son: node->sons) {
            vector<int> sonDP = DFS(son.second, maxCount, depth + 1), newDP = dp;
            newDP[0] = 0;
            for (int take = 1; take <= min(maxCount, node->count); ++take)
                for (int sonTake = 0; sonTake <= take; ++sonTake)
                    newDP[take] = min(newDP[take], dp[take - sonTake] + sonDP[sonTake]);
            dp = newDP;
        }
        if (node->end > 0)
            for (int take = min(maxCount, node->count); take > 0; --take)
                dp[take] = min(dp[take], dp[take - 1] + depth);
        dp[1] = min(dp[1], max(1, depth));
        return dp;
    }
};

int main() {
    ifstream cin("input.txt");
    ofstream cout("output.txt");
    int tests;
    cin >> tests;
    for (int t = 1; t <= tests; ++t) {
        int n, k;
        cin >> n >> k;
        Trie trie = Trie();
        for (; n > 0; --n) {
            string word;
            cin >> word;
            trie.Insert(word);
        }
        cout << "Case #" << t << ": " << trie.SolveDP(k) << "\n";
    }
    cin.close();
    cout.close();
    return 0;
}

import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.PrintStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Reader in = new Reader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Task {
    int k;
    static final int INF = 200000000;
    private class Vert {
        Vert[] a = new Vert[26];
        boolean fin = false;
        int[] dp = new int[k + 1];
        void dfs() {
            Arrays.fill(dp, INF);
            dp[0] = 0;
            for (int i = 0; i < 26; i++) if (a[i] != null) {
                a[i].dfs();
                int[] tmp = new int[k + 1];
                Arrays.fill(tmp, INF);
                tmp[0] = 0;
                for (int j = 0; j <= k; j++) if (a[i].dp[j] != INF) {
                    for (int q = j; q <= k; q++) if (dp[q - j] != INF) {
                        tmp[q] = Math.min(tmp[q], dp[q - j] + a[i].dp[j] + j);
                    }
                }
                dp = tmp;
            }
            if (fin) {
                for (int i = k; i >= 2; i--) {
                    dp[i] = Math.min(dp[i], dp[i - 1]);
                }
            }
            dp[1] = 0;
        }
    }
    void addword(Vert v, String s) {
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (v.a[c] == null) {
                v.a[c] = new Vert();
            }
            v = v.a[c];
        }
        v.fin = true;
    }
    public void solve(int testNumber, Reader in, PrintWriter out) {
        System.err.println(testNumber + " begin");
        int n = in.nextInt();
        k = in.nextInt();
        Vert root = new Vert();
        for (int i = 0; i < n; i++) {
            addword(root, in.next());
        }
        root.dfs();
        out.printf("Case #%d: %d\n", testNumber, k == 1 ? 1 : root.dp[k]);
        System.err.println(testNumber + " end");
/*        Random rnd = new Random();
        out.println("20");
        for (int qqq = 0; qqq < 20; qqq++) {
            out.println("4000 100");
            for (int i = 0; i < 4000; i++) {
                long q = Math.abs(rnd.nextLong());
                String a = "";
                for (int z = 0; z < 5; z++) {
                    a += (char) (q % 26 + 'a');
                    q /= 26;
                }
                out.println(a);
            }
        }
        out.close();
        System.exit(0);*/
    }
}

class Reader {
    private BufferedReader in;
    private StringTokenizer st;
    public Reader(InputStream is) {
        in = new BufferedReader(new InputStreamReader(is));
    }
    public String next() {
        try {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(in.readLine());
            }
            return st.nextToken();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    public int nextInt() {
        return Integer.parseInt(next());
    }

}


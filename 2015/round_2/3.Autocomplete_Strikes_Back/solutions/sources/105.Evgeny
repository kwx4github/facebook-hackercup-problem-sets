#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define For(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define in(x) int (x); input((x));
#define x first
#define y second
#define less(a,b) ((a) < (b) - EPS)
#define more(a,b) ((a) > (b) + EPS)
#define eq(a,b) (fabs((a) - (b)) < EPS)
#define remax(a, b) ((a) = (b) > (a) ? (b) : (a))
#define remin(a, b) ((a) = (b) < (a) ? (b) : (a))

using namespace std;

template <typename T>
T gcd(T a, T b) {
    while (b > 0) {
        a %= b;
        swap(a, b);
    }
    return a;
}

typedef long double ld; typedef unsigned int uint; template <class _T> inline _T sqr(const _T& x) {return x * x;} template <class _T> inline string tostr(const _T& a) {ostringstream os(""); os << a; return os.str();} const ld PI = 3.1415926535897932384626433832795L; const double EPS = 1e-9; char TEMPORARY_CHAR;

typedef long long ll; typedef unsigned long long ull; typedef set < int > SI; typedef vector < int > VI; typedef vector < vector < int > > VVI; typedef map < string, int > MSI; typedef pair < int, int > PII; const int INF = 1e9; inline void input(int &a) {a = 0; while (((TEMPORARY_CHAR = getchar()) > '9' || TEMPORARY_CHAR < '0') && (TEMPORARY_CHAR != '-')){} char neg = 0; if (TEMPORARY_CHAR == '-') {neg = 1; TEMPORARY_CHAR = getchar();} while (TEMPORARY_CHAR <= '9' && TEMPORARY_CHAR >= '0') {a = 10 * a + TEMPORARY_CHAR - '0'; TEMPORARY_CHAR = getchar();} if (neg) a = -a;} inline void out(long long a) {if (!a) putchar('0'); if (a < 0) {putchar('-'); a = -a;} char s[20]; int i; for(i = 0; a; ++i) {s[i] = '0' + a % 10; a /= 10;} ford(j, i) putchar(s[j]);} inline int nxt() {in(ret); return ret;}

//#define double ld

#define next blsdfjksdfj

struct Solution {
    static ifstream is;
    static ofstream os;
    static int testNumber;

    static void init(string fileName) {
        is.open(fileName + ".txt");
        os.open(fileName + ".out");
        is >> testNumber;
    }


    void read();
    void print();
    void solve();
    void gen();

    int testCase;

    int n, kk;
    vector <string> s;


    int ans;

    struct node {
        int next[26];
        node() {
            cnt = 0;
            clr(next);
            h = 0;
            leaf = 0;
        }
        int h;
        int cnt;
        int leaf;
    };

    Solution(int testCase) : testCase(testCase) {
        st.resize(1);
    }

    vector <vector <int> > dp;
    vector <node> st;

    void add(const string & ss) {
        int v = 0;
        st[v].cnt++;
        for (char c : ss) {
            if (!st[v].next[c - 'a']) {
                st[v].next[c - 'a'] = st.size();
                st.push_back(node());
                st.back().h = st[v].h + 1;
            }
            v = st[v].next[c - 'a'];
            st[v].cnt++;
        }
        st[v].leaf = 1;
    }

    void dfs(int v) {
        int z = min(st[v].cnt, kk);
        dp[v].assign(z + 1, 1e9);
        dp[v][0] = 0;
        if (st[v].leaf) dp[v][1] = st[v].h;
        for (int i = 0; i < 26; ++i) {
            int to = st[v].next[i];
            if (to) {
                dfs(to);
                for (int j = z - 1; j >= 0; --j) {
                    for (int k = 1; k < dp[to].size() && j + k <= z; ++k) {
                        dp[v][j + k] = min(dp[v][j + k], dp[v][j] + dp[to][k]);
                    }
                }
            }
        }

        if (v) dp[v][1] = min(dp[v][1], st[v].h);
    }


};

ifstream Solution::is;

ofstream Solution::os;

int Solution::testNumber;

int main(int argc, char ** argv) {

    Solution::init("autocomplete_strikes_back");

    for (int i = 0; i < Solution::testNumber; ++i) {
        Solution s(i + 1);
        s.read();
        s.solve();
        s.print();
    }

    return 0;
}




void Solution::print() {
    os << setprecision(5) << fixed;
    os << "Case #" << testCase << ": ";
    os << ans << endl;
    //cerr << ans << endl;

    //debug
    //cerr << "Case #" << testCase << ": " << endl;
    //cerr << sum << endl;
}

void Solution::read() {
    is >> n >> kk;
    s.resize(n);

    for (int i = 0; i < n; ++i) {
        is >> s[i];
    }
}

void Solution::solve() {
    //cerr << "OK" << endl;
    for (string x : s) {
        add(x);
    }
    dp.resize(st.size());

    dfs(0);

    ans = dp[0][kk];
}
















#include <bits/stdc++.h>

using namespace std;

int N, K;
char S[4001][20001];
char T[4001][20001];
int order[4001];
int len[4001];
vector<int> dp[101][4001];
int lcp[4001][4001];

bool cmp(int a, int b)
{
    return lexicographical_compare(T[a], T[a]+len[a], T[b], T[b]+len[b]);
}

int get_lcp(int a, int b)
{
    int ret=0;
    for(int i=0; i<min(len[a], len[b]); i++, ret++)
        if(S[a][i]!=S[b][i])
            return ret;
    return ret;
}

void solve()
{
    scanf("%d%d", &N, &K);
    for(int i=1; i<=N; i++)
    {
        scanf("%s", T[i]);
        len[i]=strlen(T[i]);
        order[i]=i;
    }
    sort(order+1, order+1+N, cmp);
    for(int i=1; i<=N; i++)
    {
        strcpy(S[i], T[order[i]]);
        len[i]=strlen(S[i]);
    }
    for(int i=1; i<=N; i++)
        for(int j=1; j<=N; j++)
            lcp[i][j]=get_lcp(i, j);
    for(int i=0; i<=K; i++)
        for(int j=1; j<=N; j++)
            dp[i][j].resize(len[j]+1, 0);
    for(int i=2; i<=K; i++)
        for(int j=1; j<=N; j++)
        {
            for(int k=0; k<=len[j]; k++)
                dp[i][j][k]=0x3f3f3f3f;
            for(int k=1; k<j; k++)
            {
                int& cur=dp[i][j][lcp[j][k]];
                for(int l=0; l<lcp[j][k]; l++)
                    cur=min(cur, dp[i-1][k][l]+min(len[k], lcp[j][k]+1));
                for(int l=lcp[j][k]; l<=len[k]; l++)
                    cur=min(cur, dp[i-1][k][l]+min(len[k], l+1));
            }
        }
    int ans=0x3f3f3f3f;
    for(int i=1; i<=N; i++)
        for(int j=0; j<=len[i]; j++)
            ans=min(ans, dp[K][i][j]+min(len[i], j+1));
    printf("%d\n", ans);
}

int main()
{
    freopen("autocomplete_strikes_back.txt", "r", stdin);
    freopen("autocomplete_strikes_back.out", "w", stdout);
    int T;
    scanf("%d", &T);
    for(int i=1; i<=T; i++)
    {
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define fr(a,b,c) for(int (a) = (b); (a) < (c); ++(a))
#define rep(a,b) fr(a,0,b)
#define st first
#define nd second
#define db(x) cerr << #x << " == " << x << endl
#define _ << ", " <<

const int oo = 0x3f3f3f3f;

typedef long long ll;
typedef pair<int,int> pii;

struct Node {
    int adj[26], cnt[26];
    int d;
    bool end;
    void init(int pos) {
        d = pos;
        end = 0;
        fill(adj, adj + 26, -1);
        fill(cnt, cnt + 26, 0);
    }
    int& operator[](int i) {
        return adj[i];
    }
} trie[20010];

int nodes;

void add(string word) {
    int ptr = 0;
    int len = 1;
    for (char c : word) {
        if (trie[ptr][c - 'a'] != -1) {
            trie[ptr].cnt[c - 'a']++;
            ptr = trie[ptr][c - 'a'];
        } else {
            int nxt = nodes++;
            trie[nxt].init(len);
            trie[ptr].cnt[c - 'a'] = 1;
            trie[ptr][c - 'a'] = nxt;
            ptr = nxt;
        }
        ++len;
    }
    trie[ptr].end = true;
}

int pd[20010][28][110][3];
int mark[20010][28][110][3], passo = 0;

int go(int u, int l, int c, bool b) {
    if (c == 0) return 0;
    if (l == 26) return c ? oo : 0;
    if (trie[u].end && (b == 0)) {
        return trie[u].d + go(u, l, c - 1, 1);
    }
    if (mark[u][l][c][b] == passo) return pd[u][l][c][b];
    mark[u][l][c][b] = passo;
    int ret = oo;
    for (int i = 0; i <= min(c, trie[u].cnt[l]); ++i) if (i == 0 || trie[u][l] != -1) {
        if (i == 1) {
            ret = min(ret, trie[u].d + 1 + go(u, l + 1, c - 1, 1));
        } else {
            ret = min(ret, go(trie[u][l], 0, i, 0) + go(u, l + 1, c - i, 1));
        }
    }
    return pd[u][l][c][b] = ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    int T;
    cin >> T;
    for (int caso = 1; caso <= T; ++caso) {
        nodes = 1;
        trie[0].init(0);
        int N, K;
        cin >> N >> K;
        rep(i,N) {
            string word;
            cin >> word;
            add(word);
        }
        ++passo;
        printf("Case #%d: %d\n", caso, go(0,0,K,1));
    }
    return 0;
}

#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <deque>
#include <complex>
#include <stack>
#include <queue>
#include <cstdio>
#include <cctype>
#include <cstring>
#include <ctime>
#include <iterator>
#include <bitset>
#include <numeric>
#include <list>
#include <iomanip>

#if __cplusplus >= 201103L
#include <array>
#include <tuple>
#include <initializer_list>
#include <unordered_set>
#include <unordered_map>
#include <forward_list>

#define cauto const auto&
#define ALL(v) begin(v),end(v)
#else
#define ALL(v) (v).begin(),(v).end()
#endif

using namespace std;


namespace{
typedef long long LL;
typedef pair<int,int> pii;
typedef pair<LL,LL> pll;

typedef vector<int> vint;
typedef vector<vector<int> > vvint;
typedef vector<long long> vll, vLL;
typedef vector<vector<long long> > vvll, vvLL;

#define VV(T) vector<vector< T > >

template <class T>
void initvv(vector<vector<T> > &v, int a, int b, const T &t = T()){
	v.assign(a, vector<T>(b, t));
}

template <class F, class T>
void convert(const F &f, T &t){
	stringstream ss;
	ss << f;
	ss >> t;
}


#define REP(i,n) for(int i=0;i<int(n);++i)
#define RALL(v) (v).rbegin(),(v).rend()


#define MOD 1000000007LL
#define EPS 1e-8

struct pnode{
	bool wd;
	int d;
	vint to;
	int idx;
	
	explicit pnode(int dpt) : wd(false), d(dpt), to(26, -1), idx(-1010101010) {}
};

vector<pnode> pn, pn2;
const int INF = 10101010;
int k;

void prepare(){
	ios::sync_with_stdio(false);
	pn.reserve(20050);
	pn2.reserve(8100);
}

vint dfs(int u){
	vint ret(k + 1, INF);
	ret[0] = 0;

	for(int z : pn[u].to){
		vint v = dfs(z);
		for(int i = k; i > 0; --i)
		for(int j = 0; j <= i; ++j){
			int a = ret[i - j], b = v[j];
			if(j && i - j == 1 && a != INF){
				a = pn[u].d + 1;
			}
			if(i != j && j == 1 && b != INF){
				b = pn[u].d + 1;
			}
			ret[i] = min(ret[i], a + b);
		}
	}

	if(pn[u].wd){
		for(int i = k; i > 2; --i){
			ret[i] = min(ret[i], ret[i - 1] + pn[u].d);
		}
		if(ret[1] != INF){
			ret[2] = pn[u].d * 2 + 1;
		}
		ret[1] = 1;
	}

	return ret;
}

void mainmain(){
	int n;
	cin >> n >> k;
	string s = "_";

	pn.assign(1, pnode(0));
	pn2.clear();
	for(int i = 0; i < n; ++i){
		cin >> s;
		int u = 0;
		for(char c : s){
			int &r = pn[u].to[c - 'a'];
			if(r == -1){
				r = pn.size();
				pn.emplace_back(pn[u].d + 1);
			}
			u = r;
		}
		pn[u].wd = true;
	}

	int cnt = 0;
	for(int i = pn.size() - 1; i >= 0; --i){
		auto &u = pn[i];
		u.to.erase(remove(ALL(u.to), -1), u.to.end());
		if(!i || u.wd || u.to.size() > 1){
			u.idx = cnt++ << 1 | 1;
		}
		else if(u.to.size() == 1){
			u.idx = pn[u.to[0]].idx & ~1;
		}

		for(int &x : u.to){
			x = pn[x].idx >> 1;
		}
	}
	for(int i = pn.size() - 1; i >= 0; --i){
		if(pn[i].idx & 1){
			pn2.push_back(move(pn[i]));
		}
	}
	pn.swap(pn2);
	pn2.clear();

	vint ret = dfs(pn.size() - 1);
	cout << ret[k];
}

}
int main() try{
	prepare();

	string s = "_";
	getline(cin, s);
	int T = strtol(s.c_str(), 0, 10);
	int d = s.size();
	for(int tc = 1; tc <= T; ++tc){
		cerr << setw(d + 4) << tc << " / " << setw(d) << T << '\n';
		cout << "Case #" << tc << ": " << flush;
		mainmain();
		cout << endl;
	}
}
catch(...){
	cerr << "ERROR\n";
}

// Round 1A 2012
// Problem X.

#ifdef _MSC_VER
	#define _CRT_SECURE_NO_WARNINGS
#endif

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <deque>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cassert>

using namespace std;

typedef unsigned long long llong;
typedef long double ldouble;
typedef pair<int, int> pint;
typedef pair<double, double> pdouble;
typedef vector<int> vint;
typedef vint::iterator vit;
typedef vector<double> vdouble;
typedef vdouble::iterator vdit;
typedef vector<ldouble> vldouble;
typedef vector<string> vstring;
typedef vector<llong> vllong;
typedef vector<vint> graph;

#define FOR(v,p,k) for(int v=p;v<=k;++v)
#define FORD(v,p,k) for(int v=p;v>=k;--v)
#define REP(i,n) for(int i=0;i<(n);++i)
#ifdef _MSC_VER
	#define VAR(v,i) auto v=(i)
#else
	#define VAR(v,i) __typeof(i) v=(i)
#endif
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define SIZE(x) (int)x.size()
#define ALL(c) c.begin(),c.end()

#define ADD_EDGE(g,u,v) g[u].push_back(v),g[v].push_back(u)

#define ST first
#define ND second
#define INF 1000000000
#define INFL 1000000000000000000LL
#define EPS 1e-5

typedef pair<string, int> element;

struct node
{
	int children;
	node* child[26];
	
	node() : children(0)
	{
		REP(i, 26)
			child[i] = 0;
	}
	
	~node()
	{
		REP(i, 26)
			if(child[i])
				delete child[i];
	}
};

void insert(node *A, string &data, int position)
{
	A->children++;

	if(position == SIZE(data))
		return;
	
	int p = data[position] - 'a';
	if(!A->child[p])
		A->child[p] = new node();
	insert(A->child[p], data, position + 1);
}

int find(node *A, const string &data, int position)
{
	if(position == SIZE(data) || A->children == 1)
		return max(position, 1);
	
	int p = data[position] - 'a';
	if(!A->child[p])
		assert(0);
	return find(A->child[p], data, position + 1);
}

int similar(const string &A, const string &B)
{
	REP(i, min(SIZE(A), SIZE(B)))
		if(A[i] != B[i])
			return i;

	return min(SIZE(A), SIZE(B));
}

struct compare
{
	bool operator()(const element &a, const element &b)
	{
		return a.second < b.second;
	}
}; 

int solve()
{	
	int N, K;
	cin >> N >> K;
	
	vstring data(N);
	set<string> words;
	REP(i, N)
		cin >> data[i], words.insert(data[i]);

	priority_queue<element, vector<element>, compare> A;
	REP(i, N)
		FOR(j, i + 1, N - 1)
			A.push(make_pair(SIZE(data[i]) >= SIZE(data[j]) ? data[i] : data[j], similar(data[i], data[j])));
	
	while(SIZE(words) > K)
	{
		const element &e = A.top();
		words.erase(e.first);
		A.pop();
	}
	copy(ALL(words), data.begin());

	node *root = new node;
	REP(i, K)
		insert(root, data[i], 0);

	int out = 0;
	REP(i, K)
		out += find(root, data[i], 0);
	delete root;
	
	return out;
}

int main()
{
	int T;
	
	cin >> T;
	REP(t, T)
	{
		printf("Case #%d: %d\n", t + 1, solve());
	}
	
	return 0;
}

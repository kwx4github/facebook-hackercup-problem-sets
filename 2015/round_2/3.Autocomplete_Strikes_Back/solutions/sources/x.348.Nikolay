using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using System.Numerics;

namespace C
{
    class Case
    {
        public int N, K;
        public string[] words;
    }

    class Program
    {
        const int MAX = 400000;
        static int[,] trie;
        static int tend;
        static bool[,] only;

        static int Estimate(string s)
        {
            int p = 0;
            int n = 0;

            foreach (var ch in s)
            {
                int c = ch - 'a';
                n++;

                p = trie[p, c];

                if (p == 0)
                    break;
            }

            return n;
        }

        static int Extract(string s)
        {
            int p = 0;
            int n = 0;

            foreach (var ch in s)
            {
                int c = ch - 'a';
                n++;

                if (only[p, c])
                    break;

                p = trie[p, c];
            }

            return n;
        }

        static void Insert(string s)
        {
            int p = 0;
            foreach (var ch in s)
            {
                int c = ch - 'a';
                if (trie[p, c] == 0)
                {
                    trie[p, c] = tend;
                    only[p, c] = true;
                    p = tend++;
                }
                else
                {
                    only[p, c] = false;
                    p = trie[p, c];
                }
            }
        }

        static int Solve(int K, string[] a)
        {
            trie = trie = new int[MAX, 26];
            only = new bool[MAX, 26];
            tend = 1;

            int N = a.Length;
            bool[] used = new bool[N];

            for (int i = 0; i < K; i++)
            {
                int best = int.MaxValue;
                int idx = -1;

                for(int j = 0; j < N; j++)
                {
                    if (used[j])
                        continue;

                    int est = Estimate(a[j]);
                    if(est < best)
                    {
                        best = est;
                        idx = j;
                    }
                }

                used[idx] = true;
                Insert(a[idx]);
            }

            int total = 0;
            for (int i = 0; i < N; i++)
                if (used[i])
                    total += Extract(a[i]);

            return total;
        }

        static void Main(string[] args)
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
            //Console.SetIn(new StreamReader("autocomplete_strikes_back_example_input.txt"));

            int T = int.Parse(Console.ReadLine());
            for (int t = 0; t < T; t++)
            {
                string[] line = Console.ReadLine().Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                int N = int.Parse(line[0]);
                int K = int.Parse(line[1]);

                string[] a = new string[N];
                for (int i = 0; i < N; i++)
                    a[i] = Console.ReadLine();

                Console.WriteLine("Case #{0}: {1}", t + 1, Solve(K, a));
            }
        }
    }
}

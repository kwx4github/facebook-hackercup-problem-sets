/*
	Author : ChnLich
*/
#include<cstdio>
#include<cmath>
#include<iomanip>
#include<cstring>
#include<cstdlib>
#include<ctime>
#include<iostream>
#include<sstream>
#include<fstream>
#include<algorithm>
#include<vector>
#include<list>
#include<stack>
#include<queue>
#include<deque>
#include<set>
#include<map>
#include<string>
#include<bitset>
#include<functional>
#include<utility>

using namespace std;

typedef long long llint;
typedef pair<int,int> ipair;
typedef unsigned int uint;
#define pb push_back
#define fi first
#define se second
#define mp make_pair

const int inf=1000000007,dx[]={0,1,0,-1},dy[]={1,0,-1,0};
const double eps=1e-8;

void read(int &k)
{
	k=0; char x=getchar();
	while(x<'0'||x>'9') x=getchar();
	while(x>='0'&&x<='9') { k=k*10-48+x; x=getchar(); }
}

int T,n,m;
int c[20010][30];
int cnt[20010],dd[20010],ll,rr;
int f[20010][110],g[30][110];
int dep[20010],ind,l,now;
char s[20010];

void bfs(int S)
{
	for(dd[ll=rr=1]=S;ll<=rr;ll++)
		for(int i=1;i<=26;i++) if (c[dd[ll]][i])
		{
			dd[++rr]=c[dd[ll]][i];
			dep[dd[rr]]=dep[dd[ll]]+1;
		}
	for(int k=0;k<=m;k++) g[0][k]=inf;
	for(int i=rr;i;i--)
	{
		int now=dd[i];
		g[0][0]=0;
		
		int las=0;
		for(int k=1;k<=26;k++) if (c[now][k])
		{
			for(int j=0;j<=m;j++)
			{
				g[k][j]=inf;
				for(int t=0;t<=j;t++)
				{
					g[k][j]=min(g[k][j],g[las][t]+f[c[now][k]][j-t]);
				}
			}
			las=k;
		}
		for(int j=0;j<=m;j++)
		{
			f[now][j]=g[las][j];
			if (j==1)
				f[now][j]--;
			if (j&&cnt[now])
				f[now][j]=min(f[now][j],g[las][j-1]+dep[now]);
		}
	}
}

int main()
{
	freopen("C.in","r",stdin);
	freopen("C.out","w",stdout);
	
	scanf("%d",&T);
	for(int tt=1;tt<=T;tt++)
	{
		fprintf(stderr,"%d\n",tt);
		scanf("%d%d",&n,&m);
		memset(c[0],0,sizeof c[0]);
		ind=0;
		for(int i=0;i<n;i++)
		{
			scanf("%s",s);
			l=strlen(s);
			now=0;
			for(int j=0;j<l;j++)
			{
				if (!c[now][s[j]-96])
				{
					++ind;
					memset(c[ind],0,sizeof c[ind]);
					cnt[ind]=0;
					c[now][s[j]-96]=ind;
				}
				now=c[now][s[j]-96];
			}
			cnt[now]++;
		}
		bfs(0);
		printf("Case #%d: ",tt);
		if (m==1)
			printf("1\n");
		else
			printf("%d\n",f[0][m]);
	}
	
	return 0;
}

#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <bitset>
#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;
const string task = "";

template <class T> T sqr (T x) {return x * x;}

int n, k;
int m;
char buf[30500];
bool isend[30500];
int nxt[30500][26];
int t[30500][101];
int s[30500];

void add(string& s) {
	int v = 0;
	forn(i, s.length()) {
		int c = s[i] - 'a';
		if (nxt[v][c] == -1) {
			nxt[v][c] = m;
			m++;
		}
		v = nxt[v][c];
	}
	isend[v] = 1;
}

int d[27][101];
vector<int> w;

void go(int v, int dp) {
	s[v] = 0;
	if (isend[v])
		s[v]++;
	forn(i, 26)
		if (nxt[v][i] != -1) {
			go(nxt[v][i], dp + 1);
			s[v] += s[nxt[v][i]];
		}
	w.clear();
	forn(i, 26)
		if (nxt[v][i] != -1)
			w.push_back(nxt[v][i]);

	forn(i, w.size() + 1)
		forn(j, k + 1)
			d[i][j] = inf;
	forn(i, k + 1)
		t[v][i] = inf;
	d[0][0] = 0;
	t[v][0] = 0;
	if (isend[v]) {
		d[0][1] = dp;
	}

	forn(i, w.size()) {
		forn(j, k + 1) {
			forn(l, j + 1)
				d[i + 1][j] = min(d[i+1][j], d[i][j-l] + t[w[i]][l]);
		}
	}
	forn(i, k + 1)
		t[v][i] = d[w.size()][i];
	if (s[v] >= 1) {
		t[v][1] = min(t[v][1], dp);
	}
}

void solve() {
	scanf("%d%d", &n, &k);
	m = 1;
	seta(isend, 0);
	seta(nxt, 255);
	forn(i, n) {
		scanf(" %s", buf);
		string s = buf;
		add(s);
	}
	seta(t, 255);
	go(0, 0);
	printf("%d\n", t[0][k]);
}

int main () {
//	freopen ((task + ".in").data(), "r", stdin);
//	freopen ((task + ".out").data(), "w", stdout);
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
	}
	return 0;
}

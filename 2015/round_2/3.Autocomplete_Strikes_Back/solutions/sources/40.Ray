#include <bits/stdc++.h>

#define INF 100010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/

struct pfN {
    bool isEnd;
    pfN* pnt[27];
    int dp[105];
    pfN () {
        isEnd = false;
        FO (i,0,27) pnt[i] = 0;
        dp[0] = 0;
        FO (i,1,101) dp[i] = INF;
    }
};

int T, N, K;
char cStr[20005];
int cL;

pfN rt;

long long temDP[105];

void dp (pfN* c) {
    bool isLeaf = true;
    FO (i,0,26) {
        if (c->pnt[i] != 0) {
            isLeaf = false;
            dp (c->pnt[i]);
        }
    }
    c->dp[1] = 1;
    if (isLeaf) {
        return;
    }
    
    temDP[0] = 0;
    FO (i,1,105) temDP[i] = 1000000000;
    
    FO (i,0,26) {
        if (c->pnt[i] != 0) {
            for (int p = K; p >= 0; p--) {
                FO (t,0,K+1) {
                    if (p+t > K) break;
                    temDP[p+t] = min (temDP[p+t], temDP[p]+(c->pnt[i])->dp[t]);
                }
            }
        }
    }
    if (c->isEnd) {
        for (int p = K; p >= 0; p--) {
            temDP[p+1] = min (temDP[p], temDP[p+1]);
        }
    }
    if (c != &rt) FO (i,2,105) temDP[i] += i;
    c->dp[0] = 0;
    c->dp[1] = 1;
    FO (i,2,105) c->dp[i] = temDP[i];
    /*FO (i,0,K+1) {
        printf ("dp[%d]: %d\n", i, c->dp[i]);
    }*/
    return;
}

void del (pfN* c) {
    FO (i,0,26) {
        if (c->pnt[i]) {
            //printf ("%c\n", i+'a');
            del(c->pnt[i]);
        }
    }
    if (c != &rt) delete (c);
    return;
}


int main() {
    freopen ("c.in", "r", stdin);
    freopen ("c.out", "w", stdout);
    scanf ("%d", &T);
    FO (_z,0,T) {
        printf ("Case #%d: ", _z+1);
        scanf ("%d %d ", &N, &K);
        FO (i,0,N) {
            scanf (" %s ", cStr);
            cL = strlen (cStr);
            pfN* cPtr = &rt;
            FO (p,0,cL) {
                cStr[p] -= 'a';
                if (cPtr->pnt[cStr[p]] == 0) {
                    cPtr->pnt[cStr[p]] = new pfN;
                }
                cPtr = cPtr->pnt[cStr[p]];
            }
            cPtr->isEnd = true;
        }
        dp (&rt);
        printf ("%d\n", rt.dp[K]);
        del (&rt);
        FO (i,0,27) {
            rt.pnt[i] = 0;
        }
        rt.isEnd = false;
        FO (i,0,105) rt.dp[i] = INF;
        rt.dp[0] = 0; rt.dp[1] = 1;
    }
    return 0;
}













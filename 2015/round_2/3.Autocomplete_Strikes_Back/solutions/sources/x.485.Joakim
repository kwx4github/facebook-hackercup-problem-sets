#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define FOR(it,st,en) for(int it=(st);it<(int)(en);++it)
#define REP(it,en) FOR(it,0,en)
#define ITE(it,c) for(auto it=(c).begin();it!=(c).end();++it)
#define ALLOF(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define X first
#define Y second
typedef long long int LL; 
typedef long double LD;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
const int INF=(int)1e9; 
const double EPS=(LD)1e-7;

//Trie
struct node{
	node():next(){}
	~node(){
		ITE(it,next){
			delete it->second;
		}
	}
	map<char,node*> next;
	int cnt=0;
};

node* root;

LL add(string a){
	LL res=a.size();
	bool first=true;
	node* cur=root;
	REP(i,a.size()){
		cur->cnt++;
		if(!cur->next.count(a[i])){
			if(first){
				res=i+1;
				first=false;
			}
			node* temp = new node();
			cur->next[a[i]]=temp;
		}
		cur=cur->next[a[i]];
	}
	cur->cnt++;
	return res;
}
LL Nadd(string a){ //does not add nodes
	LL res=a.size();
	node* cur=root;
	REP(i,a.size()){
		if(!cur->next.count(a[i])){
			return i+1;
		}
		cur=cur->next[a[i]];
	}
	return res;
}
LL NNadd(string a){ //does not add nodes
	LL res=a.size();
	node* cur=root;
	REP(i,a.size()){
		if(cur->cnt==1){
			// cout<<a<<" "<<a[i]<<i+1<<endl;
			return i;
		}
		cur=cur->next[a[i]];
	}
	return res;
}

LL solve(){
	root = new node();
	LL N,K,res=0;
	cin>>N>>K;
	// cout<<N<<endl;
	// if(N==1)return 1;
	set<string> S,S2;
	REP(i,N){
		string s;
		cin>>s;
		S.insert(s);
		// cout<<s<<" "<<a<<endl;
	}
	REP(i,K){
		pair<LL,string> b(INF,"");
		for(string s:S){
			LL a=Nadd(s);
			b=min(b,MP(a,s));
		}
		S.erase(b.Y);
		add(b.Y);
		S2.insert(b.Y);
		// cout<<b.Y<<endl;
	}
	for(string s: S2){
		// cout<<s<<endl;
		res+=NNadd(s);
	}
	delete root;
	return res;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin>>T;
    REP(i,T){
    	cout<<"Case #"<<i+1<<": "<<solve()<<endl;
    }
	return 0;
}
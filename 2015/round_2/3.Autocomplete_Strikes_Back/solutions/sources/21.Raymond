#include <bits/stdc++.h>
using namespace std;
char str[20005];
int K;
const int INF = 1000000000;
struct Node {
	bool isend;
	int words;
	int F[105];
	Node *nex[26];
	void reset() {
		words = 0;
		isend = false;
		memset(nex, 0, sizeof(nex));
	}
} root, nodes[21005];
void go(Node *x) {
	for (int i = 0; i < 26; ++i) {
		if (x->nex[i] == NULL) continue;
		go(x->nex[i]);
	}
	x->F[0] = 0;
	for (int i = 1; i <= K; ++i) x->F[i] = INF;
	if (x->isend) x->F[1] = 0;
	for (int i = 0; i < 26; ++i) {
		if (x->nex[i] == NULL) continue;
		for (int j = K; j >= 0; --j)
			for (int k = 0; k <= j; ++k) {
				int val = x->F[j - k] + k + x->nex[i]->F[k];
				x->F[j] = min(x->F[j], val);
			}
	}
	if (x->words) x->F[1] = 0;
}
int main() {
	int TC;
	scanf("%d", &TC);
	for (int cn = 1; cn <= TC; ++cn) {
		int N, n = 0;
		scanf("%d%d", &N, &K);
		root.reset();
		for (int i = 0; i < N; ++i) {
			scanf("%s", str);
			int len = strlen(str);
			Node *p = &root;
			++p->words;
			for (int j = 0; j < len; ++j) {
				int let = str[j] - 'a';
				if (p->nex[let] == NULL) {
					p->nex[let] = &nodes[n++];
					p->nex[let]->reset();
				}
				p = p->nex[let];
				++p->words;
			}
			p->isend = true;
		}
		go(&root);
		printf("Case #%d: %d\n", cn, K == 1 ? 1 : root.F[K]);
	}
}


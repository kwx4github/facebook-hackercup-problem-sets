
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>
#include <cassert>
#include <unordered_set>
#include <unordered_map>
#include <fstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)


map<pii,int > dp[128];
string words[4100];
int sameLetters[4100][4100];
int rek(int k, int f, int t){
	if(t - f < k)return oo;
	if(k == 0)return 0;
	if(k == 1)return 1;
	assert(k > 0);
	if(dp[k].find(mp(f,t)) != dp[k].end())return dp[k][mp(f,t)];
	int last = t - 1;
	int slet = sameLetters[f][t];
	if(slet == sz(words[f])){
		return dp[k][mp(f,t)] = slet + max(slet + 1, rek(k - 1, f + 1, t));
	}
	int split = -1;
	{
		int lo = f, hi = t;
		while(lo < hi){
			int mid = lo + (hi - lo) / 2;
			if(words[f][slet] == words[mid][slet]){
				lo = mid + 1;
			} else {
				hi = mid;
			}
		}
		split = lo;
		assert(f < split);
		assert(split < t);
		assert(lo == hi);
	}
	int res = min(rek(k, f, split), rek(k, split, t));
	FOR(ki,1,k)res = min(res, max(rek(ki, f, split), slet + 1) + max(rek(k-ki, split, t), slet + 1));
	return dp[k][mp(f,t)] = res;
}

int N, K;
void calc(){
	FOR(i,0,128)dp[i].clear();
	cin >> N >> K;
	FOR(i,0,N)cin >> words[i];
	sort(words, words + N);
	FOR(i,0,N){
		sameLetters[i][i+1] = sz(words[i]);
		if(i){
			int s = 0;
			while(sz(words[i]) > s && sz(words[i-1]) > s && words[i][s] == words[i-1][s])++s;
			sameLetters[i-1][i+1] = s;
		}
		FOR(j,0,i-1){
			sameLetters[j][i+1] = min(sameLetters[j][i], sameLetters[i-1][i+1]);
		}
	}
	cout << rek(K, 0, N) << endl;
}

int main() {
	int T;
	cin >> T;
	FOR(t,0,T){
		cout << "Case #" << t + 1 << ": ";
		calc();
	}
	return 0;
}

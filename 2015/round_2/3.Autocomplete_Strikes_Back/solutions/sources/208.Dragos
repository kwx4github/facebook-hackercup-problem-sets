#include<algorithm>
#include<string>
#include<iostream>
#include<vector>
#include<set>
#define pb push_back
using namespace std;
vector<int> best[4040][110];
string s[101010];
int T;
int N,K,ret;

int asem(int x,int y){
    int ret = 0;
    for(int i=0;i<s[x].size()&&i<s[y].size();++i){
        if(s[x][i] != s[y][i])
        break;
        ++ret;
    }

    return ret;
}
set<int> vlung[4040];

int main(){
freopen("h3.in","r",stdin);
freopen("h3.out","w",stdout);
cin>>T;
    for(int tt=1;tt<=T;++tt){
        cin>>N>>K;

        ret=0;
        for(int i=1;i<=N;++i){
            cin>>s[i];
            ret+=s[i].size();

        }
        sort(s+1,s+N+1);
        for(int i=0;i<N+1;++i){
            vlung[i].clear();
            for(int j=0;j<=K+1;++j){
                best[i][j].clear();
                best[i][j].resize(s[i].size()+10);
            }
        }

        set<int>::iterator it;
        for(int i=1;i<=N;++i){
            best[i][1][1] = 1;
            vlung[i].insert(1);
            //cout<<i<<endl;
            for(int j=1;j<i;++j){
                int as = asem(i,j);
                for(int k=1;k<K&&k<=i;++k){
                    for(it=vlung[j].begin();it!=vlung[j].end();++it){
                        int l=*it;
                        //bagam sir[i], cand ultimu e sir[j]
                        //care are deja k bagate, si costu lui sir[j] e l
                        if(best[j][k][l] == 0)
                            continue;
                        int newCostI = min((int)s[i].size(),as+1);
                        int newCostJ = min((int)s[j].size(),as+1);
                        if(best[i][k+1][newCostI] == 0)
                        best[i][k+1][newCostI] = best[j][k][l] + newCostI + max(newCostJ-l,0);
                        else
                        best[i][k+1][newCostI] = min(best[i][k+1][newCostI], best[j][k][l] + newCostI + max(newCostJ-l,0));
                        vlung[i].insert(newCostI);
                        if(k+1 == K){
                            ret = min(ret,best[i][k+1][newCostI]);
                        }
                    }
                }
            }
        }
        printf("Case #%d: %d\n",tt,ret);
    }
}

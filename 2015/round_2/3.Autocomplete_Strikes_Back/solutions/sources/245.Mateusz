// #include <bits/stdc++.h>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#define DEBUG(x) cerr << #x << " " << (x) << endl;
using namespace std;
const int N = 4005, K = 105, P = 29, P2 = 37, M = 1e9 + 7, M2 = 1e9 + 9;
int n, z;
int dp[2][N][N];
int pref[2][N][N], suf[2][N][N];
int lcp[N][N];
int L[N];
vector<pair<int, int> > H[N];
string s[N];
int diff[N][N];

void compare(int i, int j)
{
	int l = min(H[i].size(), H[j].size()) - 1;
	int ret = l;
	int poc = 0;
	int kon = l - 1;
	while(poc <= kon)
	{
		int sr = (poc + kon) / 2;
		if(H[i][sr] == H[j][sr])
		{
			poc = sr + 1;	
		}
		else
		{
			ret = sr;
			kon = sr - 1;
		}
	}
// 	cerr << i << " " << j << " " << ret << endl;
	if(ret == l)
	{
		if(l == H[i].size() - 1)
		{
			lcp[i][j] = l;
			lcp[j][i] = l + 1;
		}
		else
		{
			lcp[i][j] = l + 1;
			lcp[j][i] = l;
		}
	}
	else
	{
		lcp[i][j] = lcp[j][i] = ret + 1;
	}
}

bool cmp(vector<pair<int, int> > H1, vector<pair<int, int> > H2)
{
	int l = min(H1.size(), H2.size()) - 1;
	int poc = 0;
	int kon = l - 1;
	int ret = l;
	while(poc <= kon)
	{
		int sr = (poc + kon) / 2;
		if(H1[sr] != H2[sr])
		{
			ret = sr;
			kon = sr - 1;
		}
		else
		{
			poc = sr + 1;
		}
	}
	if(ret == l)
	{
		return H1.size() < H2.size();
	}
	else
	{
		return s[H1.back().first][ret] < s[H2.back().first][ret];
	}
}

void test()
{
	cin >> n >> z;
	for(int i = 1; i <= n; i++)
	{
		H[i].clear();
	}
	int INF = 1e9;
	for(int i = 1; i <= n; i++)
	{
		cin >> s[i];
		L[i] = s[i].length();
		int hash = 0, hash2 = 0;
		for(int j = 0; j < s[i].size(); j++)
		{
			hash = ((long long)hash * P + s[i][j] - 96) % M;
			hash2 = ((long long) hash2 * P2 + s[i][j] - 96) % M2;
			H[i].push_back({hash, hash2});
		}
		H[i].push_back({i, 0});
	}
	if(z == 1)
	{
		printf("1\n");
		return;
	}
	sort(H + 1, H + 1 + n, cmp);
	for(int i = 1; i <= n; i++)
	{
		for(int j = i + 1; j <= n; j++)
		{
			compare(i, j);
		}
	}
	
// 	for(int i = 1; i <= n; i++)
// 	{
// 		for(int j = 1; j <= n; j++)
// 		{
// 			cerr << i << " " << j << " " << lcp[i][j] << endl;
// 		}
// 	}
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j < i; j++)
		{
			int poc = 1;
			int kon = j;
			int ret = 0;
			while(poc <= kon)
			{
				int sr = (poc + kon) / 2;
				if(lcp[j][sr] <= lcp[j][i])
				{
					ret = sr;
					poc = sr + 1;
				}
				else kon = sr - 1;
			}
			diff[i][j] = ret;
// 			cerr << i << " " << j << " " << ret << endl;
		}

	}
	for(int i = 1; i <= n; i++)
	{
// 		for(int j = 1; j < i; j++)
// 		{
// 			dp[1][i][j] = 1;
// 		}
		suf[0][i][i] = INF;
		suf[0][i][i + 1] = INF;
// 		suf[0][i][i - 1] = lcp[i - 1][i];
		for(int j = i - 1; j >= 1; j--)
		suf[0][i][j] = INF;
		pref[0][i][0] = 0;
		for(int j = 1; j < i; j++)
			pref[0][i][1] = 0;
		pref[0][i][i] = 0;
	}
	for(int i = 2; i <= z; i++)
	{
		for(int j = 1; j <= n; j++)
		{
			if(i > j)
			{
				for(int k = 0; k <= j + 1; k++)
				{
					pref[1][j][k] = suf[1][j][k] = dp[1][j][k] = INF;
				}
				continue;
			}
			for(int k = j - 1; k >= 1; k--)
			{
// 				DEBUG(i);
// 				DEBUG(j);
// 				DEBUG(k);
// 				DEBUG(diff[j][k]);
// 				DEBUG(pref[0][k][diff[j][k]]);
// 				DEBUG(lcp[k][j]);
// 				DEBUG(suf[0][k][diff[j][k] + 1]);
				dp[1][j][k] = min(pref[0][k][diff[j][k]] + lcp[k][j], suf[0][k][diff[j][k] + 1]);
// 				cerr << i <<" " << j <<" "<<k <<" " << dp[1][j][k] << endl;
			}
			suf[1][j][j] =  INF;
			suf[1][j][j + 1] = INF;
// 			suf[1][j][j - 1] = dp[1][j][j - 1] + lcp[j][j - 1];
			for(int k = j - 1; k >= 1; k--)
				suf[1][j][k] = min(suf[1][j][k + 1], dp[1][j][k] + lcp[j][k]);
			pref[1][j][0] = INF;
			for(int k = 1; k < j; k++)
				pref[1][j][k] = min(pref[1][j][k - 1], dp[1][j][k]);
			pref[1][j][j] = min(pref[1][j][j - 1], INF);
		}
		if(i == z) break;
		for(int j = 1; j <= n; j++)
		{
			for(int k = j + 1; k >= 0; k--)
			{
				pref[0][j][k] = pref[1][j][k];
				suf[0][j][k] = suf[1][j][k];
				dp[0][j][k] = dp[1][j][k];
			}
		}
	}
	int wynik = INF;
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j < i; j++)
			wynik = min(wynik, dp[1][i][j] + lcp[i][j]);
	}
	cout << wynik << endl;
}

int main()
{
	ios_base::sync_with_stdio(0);
	int t;
	cin >> t;
	for(int zz = 1; zz <= t; zz++)
	{
		cout << "Case #" << zz << ": ";
// 		printf("Case #%d: ", zz);
		test();
	}
	return 0;
}
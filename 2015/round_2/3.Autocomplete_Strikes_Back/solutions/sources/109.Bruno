#include <bits/stdc++.h>
using namespace std;

const int INF = 0x3f3f3f3f;

struct Trie
{
	Trie() { g = 0; }
	bool g;
	map<char, Trie> m;
};

Trie R;
int n, k;

void insere(Trie& t, const char* s)
{
	if (s[0] == 0) t.g = 1;
	else insere(t.m[s[0]], s+1);
}

vector<int> criar()
{
	vector<int> res(k+1);
	for (int i = 1; i <= k; ++i)
		res[i] = INF;
	return res;
}

void solve(Trie& t, vector<int>& res, int p)
{
	for (typeof(t.m.begin()) it = t.m.begin(); it != t.m.end(); ++it)
	{
		Trie& r = it->second;
		vector<int> aux = criar();
		solve(r, aux, p+1);
		vector<int> tmp = aux;
		// one
		for (int i = 0; i < k; ++i)
			tmp[i+1] = min(tmp[i+1], res[i]+p);
		// other
		for (int i = 2; i <= k; ++i)
			for (int j = 0; i+j <= k; ++j)
				tmp[i+j] = min(tmp[i+j], aux[i]+res[j]);
		res = tmp;
	}
	// now
	if (t.g)
	{
		vector<int> tmp = res;
		for (int i = 0; i < k; ++i)
			tmp[i+1] = min(tmp[i+1], res[i]+p-1);
		res = tmp;
	}
}

int main()
{
	ios::sync_with_stdio(0);
	
	int t;
	cin >> t;
	for (int q = 1; q <= t; ++q)
	{
		R = Trie();
		cout << "Case #" << q << ": ";
		cin >> n >> k;
		string str;
		for (int i = 0; i < n; ++i)
		{
			cin >> str;
			insere(R, str.c_str());
		}
		vector<int> res = criar();
		solve(R, res, 1);
		cout << res[k] << "\n";
	}
}


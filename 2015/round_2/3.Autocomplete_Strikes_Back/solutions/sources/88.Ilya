#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <sstream>
#include <deque>
#include <memory.h>
#include <cassert>
#include <ctime>
#include <cstring>


using namespace std; 

#define ll long long
#pragma comment(linker, "/STACK:64000000")

const int maxk = 110;
const int maxn = 4010;
const int maxs = 20010;
const int inf = 1000000007;
const int mod = 1000000007;
const int dx[4] = {1, -1, 0, 0};
const int dy[4] = {0, 0, 1, -1};

int n, k;
string s[maxn];
int sz, nxt[maxs][26], shortest[maxs], terminal[maxs];

void add(string s) {
	int cur = 0;
	//cerr << s << endl;
	for (int i = 0; i < (int)s.length(); i++) {
		if (nxt[cur][s[i] - 'a'] == -1) {
			nxt[cur][s[i] - 'a'] = sz;
			memset(nxt[sz], -1, sizeof(nxt[sz]));
			//shortest[sz] = inf;
			terminal[sz] = 0;
			sz++;
			//if (sz % 100 == 0) cerr << sz << endl;
		}
		cur = nxt[cur][s[i] - 'a'];
		//shortest[cur] = min(shortest[cur], (int)s.length());
	}
	terminal[cur] = 1;
}

int dp[maxs][maxn], cnt[maxs];

void dfs(int v, int h = 0) {
	cnt[v] = 0;
	for (int j = 0; j <= n; j++) dp[v][j] = inf;
	dp[v][0] = 0;

	if (terminal[v]) {
		cnt[v]++;
		dp[v][1] = h;
	}

	for (int i = 0; i < 26; i++) {
		if (nxt[v][i] != -1) {
			dfs(nxt[v][i], h + 1);
			for (int j = cnt[v]; j >= 0; j--) {
				for (int k = 1; k <= cnt[nxt[v][i]]; k++) {
					dp[v][j + k] = min(dp[v][j + k], dp[v][j] + dp[nxt[v][i]][k]);
				}
				dp[v][j + 1] = min(dp[v][j + 1], dp[v][j] + h + 1);
			}
			cnt[v] += cnt[nxt[v][i]];
		}
	}

}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //ios_base::sync_with_stdio(0);
    
    int T;
    scanf("%d\n", &T);
    for (int test = 1; test <= T; test++) {
        cerr << "Case #" << test << ": ";
        printf("Case #%d: ", test);
       
		sz = 1;
		memset(nxt[0], -1, sizeof(nxt[0]));
		shortest[0] = inf;
		terminal[0] = 0;

		cin >> n >> k;
		for (int i = 0; i < n; i++) {
			cin >> s[i];
			add(s[i]);
		}
		if (k == 1) {
			cout << 1 << endl;
			cerr << 1 << endl;
			continue;
		}
		cerr << "ok" << endl;
		dfs(0);
		cerr << dp[0][k] << endl;
		cout << dp[0][k] << endl;
    }
    
    return 0;
}
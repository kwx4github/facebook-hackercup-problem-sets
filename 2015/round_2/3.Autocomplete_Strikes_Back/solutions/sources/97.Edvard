#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 20 * 1000 + 3, K = 100 + 3, A = 26;

int n, k;
char buf[N];
string a[N];

inline bool read()
{
	if (scanf("%d%d", &n, &k) != 2) return false;
	forn(i, n)
	{
		scanf("%s", buf);
		a[i] = string(buf);
	}
	return true;
}

int sz;
int next[N][A];
int cnt[N];
int sum[N];

void add(const string& s)
{
	int v = 0;
	forn(i, sz(s))
	{
		int c = int(s[i] - 'a');
		if (next[v][c] == -1)
		{
			next[v][c] = sz++;
		}
		v = next[v][c];
	}
	cnt[v]++;
}

int z[N][K];
int z2[N][K][A];

int solve(int, int);

int solve2(int v, int k, int i)
{
	if (i == A) return k == 0 ? 0 : INF;
	int& ans = z2[v][k][i];
	if (ans != -1) return ans;
	if (next[v][i] == -1) return ans = solve2(v, k, i + 1);

	ans = INF;
	forn(c, k + 1)
	{
		ans = min(ans, solve(next[v][i], c) + c + solve2(v, k - c, i + 1));
	}
	return ans;
}

int solve(int v, int k)
{
	int& ans = z[v][k];
	if (ans != -1) return ans;
	if (k == 1 && v != 0) return sum[v] > 0 ? 0 : INF;
	return ans = solve2(v, k - cnt[v], 0);
}

int dfs(int v)
{
	sum[v] = cnt[v];
	forn(i, A) if (next[v][i] != -1) sum[v] += dfs(next[v][i]);
	return sum[v];
}

inline void solve()
{
	memset(next, -1, sizeof(next));
	memset(cnt, 0, sizeof(cnt));
	sz = 1;
	forn(i, n) add(a[i]);
	dfs(0);

	forn(i, sz) forn(j, k + 1) z[i][j] = -1;
	forn(i, sz) forn(j, k + 1) forn(p, A) z2[i][j][p] = -1;
	int ans = solve(0, k);
	assert(ans < INF / 2);
	printf(" %d\n", ans);
}

void gen()
{
	n = 400, k = 100;
	forn(i, n)
	{
		a[i].resize(50);
		forn(j, sz(a[i])) a[i][j] = char('a' + rand() % 26);
	}
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
	int tc;
	cin >> tc;
	ld prev = clock();
	forn(t, tc)
	{
		printf("Case #%d:", t + 1);
		assert(read());
		//gen();
		solve();
		cerr << "test " << t + 1 << endl;
		cerr << (clock() - prev) / ld(CLOCKS_PER_SEC) << endl;
		prev = clock();
	}
	
    return 0;
}

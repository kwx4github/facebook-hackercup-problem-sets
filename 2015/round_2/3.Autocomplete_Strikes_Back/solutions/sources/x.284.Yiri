#include<iostream>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<ctime>
#include<algorithm>
#include<iomanip>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<cassert>
#include<bitset>

using namespace std;
int TT;
const int N = 2e4+100;
struct node{
	int son[27];
	int dp[104];
	int tag;
	int f;
	int end;
}tire[N];
struct ans{
	int son;
	int add;
	ans(int a=0, int b=0){
		son = a;
		add = b;
	}
};
bool operator<(ans x, ans y){
	return x.add > y.add;
}
priority_queue<ans> pq;
int n, k;
char s[N];
int tot;
void build(){
	int now = 0, l = strlen(s);
	tire[now].tag ++;
	for(int i=0; i<l; ++i){
		int num = s[i]-'a';
		if(!tire[now].son[num]){
			tire[now].son[num] = ++tot;
		}
		now = tire[now].son[num];
		tire[now].tag++;
	}
	tire[now].end = 1;
}
void inque(int x){
	if(tire[x].f < tire[x].tag){
		tire[x].f++;
		pq.push(ans(x, tire[x].dp[tire[x].f]-tire[x].dp[tire[x].f-1]));
	}
}
void bfs(int x){
	for(int i=0; i<26; ++i){
		if(tire[x].son[i]) bfs(tire[x].son[i]);
	}
	while(!pq.empty()){
		pq.pop();
	}
	for(int i=0; i<26; ++i){
		if(tire[x].son[i]) inque(tire[x].son[i]);
	}
	int up = min(tire[x].tag, 100);
	if(up == 1){
		tire[x].dp[1] = 1;
		return ;
	}
	int star = 1;
	if(tire[x].end){
		tire[x].dp[1] = 1;
		star = 2;
	}
	for(int i=star; i<=up; ++i){
		ans tmp = pq.top(); pq.pop();
		inque(tmp.son);
		tire[x].dp[i] = tmp.add + 1 + tire[x].dp[i-1];
	}
	tire[x].dp[1] = 1;
}
int main() {
	scanf("%d", &TT);
	for(int rr=1; rr<=TT; ++rr){
		memset(tire, 0, sizeof(tire));
		tot=0;
		scanf("%d%d", &n, &k);
		for(int i=0; i<n; ++i){
			scanf("%s", s);
			build();
		}
		bfs(0);
		int fina = 0;
		for(int i=1; i<=k; ++i)fina+=tire[0].dp[i];
		printf("Case #%d: %d\n", rr, tire[0].dp[k]-k);
	}
	return 0;
}


import java.util.*;
import java.io.*;

public class C {
	FastScanner in;
	PrintWriter out;

	int n, k;

	class Node {
		TreeMap<Character, Node> to;
		boolean word;
		int[] dp;

		public Node() {
			dp = new int[k + 1];
			word = false;
			to = new TreeMap<>();
		}
	}

	void addToTrie(String s, int cur, Node node) {
		if (cur == s.length()) {
			node.word = true;
			return;
		}
		Node toNode = null;
		if (!node.to.containsKey(s.charAt(cur))) {
			toNode = new Node();
			node.to.put(s.charAt(cur), toNode);
		} else {
			toNode = node.to.get(s.charAt(cur));
		}
		addToTrie(s, cur + 1, toNode);
	}

	void calcDp(Node node, int depth) {
		int[][] childs = new int[node.to.size()][];

		int curChild = 0;
		for (Node toNode : node.to.values()) {
			calcDp(toNode, depth + 1);
			childs[curChild++] = toNode.dp;
		}
		int[] dp = node.dp;
		Arrays.fill(dp, Integer.MAX_VALUE);
		dp[0] = 0;
		if (node.word)
			dp[1] = depth;
		for (int[] child : childs) {
			for (int j = k; j >= 0; j--) {
				if (dp[j] != Integer.MAX_VALUE) {
					for (int i = 1; i + j <= k; i++) {
						if (child[i] != Integer.MAX_VALUE) {
							dp[j + i] = Math.min(dp[j + i], dp[j] + child[i]);
						}
					}
				}
			}
		}
		dp[1] = Math.min(dp[1], depth);
	}

	public void solve() throws IOException {
		n = in.nextInt();
		k = in.nextInt();
		Node root = new Node();
		for (int i = 0; i < n; i++) {
			String s = in.next();
			addToTrie(s, 0, root);
		}
		calcDp(root, 0);
		out.println(root.dp[k]);
	}

	public void run() {
		try {
			in = new FastScanner(new File("a.in"));
			out = new PrintWriter(new File("a.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new C().run();
	}
}
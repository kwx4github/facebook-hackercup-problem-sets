#include<vector>
#include<cstdio>
#include<string>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int N = 4005, K = 105;

int n, k;

vector<string> w;

char buf[20005];

const int INF = 40005;

vector<int> merge(vector<int> &a, vector<int> &b) {
    vector<int> ret(k);
    for (int i = 0; i < k; ++i) {
        ret[i] = min(a[i], b[i]);
        for (int j = 0; j < i; ++j) {
            ret[i] = min(ret[i], a[j] + b[i - j - 1]);
        }
    }
    return ret;
}

vector<int> solve(int l, int r, int pre) {
//cout << "hello" << ' ' << l << ' ' << r << ' ' << pre << endl;
    vector<int> ret(k);
    for (int i = 0; i < k; ++i) {
        ret[i] = INF;
    }
    if (l == r) {
        ret[0] = w[l].size() < pre ? 0 : 1;
    } else {
        vector<int> tmp;
        int last = l; 
        char lch = w[l].size() == pre ? ' ' : w[l][pre];
        for (int i = l; i <= r; ++i) {
            char ich = w[i].size() == pre ? ' ' : w[i][pre];
            if (ich == lch) {
                continue;
            }
            tmp = solve(last, i - 1, pre + 1);
            ret = merge(ret, tmp);
            last = i, lch = ich;
        }
        tmp = solve(last, r, pre + 1);
        ret = merge(ret, tmp);
        for (int i = 1; i < k; ++i) {
            ret[i] += i + 1;
        }
        ret[0] = 1;
    }
    return ret;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d", &n, &k);
        w.clear();
        for (int i = 0; i < n; ++i) {
            scanf("%s", buf);
            w.push_back(buf);       
        }
        sort(w.begin(), w.end());
        vector<int> ans = solve(0, n - 1, 0);
        static int id = 0;
        printf("Case #%d: %d\n", ++id, max(1, ans.back() - k));
    }
    return 0;
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 25) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 25040;
const int kmax = 111;

int nxt[nmax][26];
int res[nmax][kmax];
int fin[nmax];
int f[nmax];
int n, k;
int cur;

void add(const string &s) {
	int now = 0;
	fin[0] ++;
	forn(i, s.size()) {
	 	if (nxt[now][s[i]-'a'] == -1) {
	 		nxt[now][s[i]-'a'] = cur;
	 		cur ++;
	 	}
	 	now = nxt[now][s[i]-'a'];
	 	fin[now] ++;
	}
	f[now] = 1;
}

void calc(int v) {
	for (int w = 0; w <= k; w ++)
		res[v][w] = inf;
	res[v][0] = 0;
	if (f[v])
		res[v][1] = 0;
	for (int i = 0; i < 26; i ++) 
		if (nxt[v][i] != -1) {
			int u = nxt[v][i];
	 		for (int l = k; l >= 0; l --) 
	 			if (res[v][l] < inf) {
				 	for (int j = 1; j + l <= k && j <= fin[u]; j ++)
			 			if (res[u][j] < inf)
							res[v][l + j] = min(res[v][l + j], res[v][l] + res[u][j] + j);
			 		res[v][l+1] = min(res[v][l+1], res[v][l] + 1);
		 		}
		}
}

void solve() {
	cur = 1;
	cin >> n >> k;
	forn(i, n) {
		string s;
		cin >> s;
		add(s);
	}


	for (int i = cur - 1; i >= 0; i --)
		calc(i);

	res[0][1] = 1;

	forn(i, cur) {
		memset(nxt[i], 255, sizeof nxt[i]);
		fin[i] = 0;
		f[i] = 0;
	}
	cout << res[0][k] << endl;
}

int main ()
{
	freopen("res", "wt", stdout);

	memset(nxt, 255, sizeof nxt);

	int tst;
	cin >> tst;
	forn(i, tst) {
		cerr << i << endl;
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
using namespace std;
class Node{
	public:
		Node(){
			for(int i=0;i<26;++i)
				p[i]=0;
		}
		Node* p[27];
		vector<int> dp;
		~Node(){
			for(int i=0;i<26;++i){
				if(p[i])
					delete p[i];
			}
		}
};
void dfs(Node* p){
	for(int i=0;i<26;++i){
		if(p->p[i]){
			dfs(p->p[i]);
		}
	}
	p->dp.push_back(0);
	for(int i=0;i<26;++i){
		if(!p->p[i])
			continue;
		Node* c=p->p[i];
		for(int j=0;j<c->dp.size();++j){
			c->dp[j]+=j;
		}
		vector<int> tmp;
		for(int j=0;j<p->dp.size()+c->dp.size()-1&&j<=100;++j){
			int mi=1000000;
			if(j<p->dp.size()&&p->dp[j]<mi){
				mi=p->dp[j];
			}
			if(j<c->dp.size()&&c->dp[j]<mi){
				mi=c->dp[j];
			}
			for(int k=0;k<=j;++k){
				if(k<p->dp.size()&&j-k<c->dp.size()&&p->dp[k]+c->dp[j-k]<mi){
					mi=p->dp[k]+c->dp[j-k];
				}
			}
			tmp.push_back(mi);
		}
		p->dp=tmp;
	}
	if(p->p[26]){
		p->dp.push_back(0);
		for(int i=100;i>=1;--i){
			if(i<p->dp.size()){
				p->dp[i]=p->dp[i-1];
			}
		}
		p->dp[0]=0;
	}
	p->dp[1]=0;
}
int main(){
	int T;
	cin>>T;
	int n;
	int K;

	string s;
	for(int TT=1;TT<=T;++TT){
		cout<<"Case #"<<TT<<": ";
		int ans=0;
		cin>>n;
		cin>>K;
		Node* head=new Node();	
		for(int i=0;i<n;++i){
			cin>>s;
			Node* p=head;
			for(int i=0;i<s.length();++i){
				if(p->p[s[i]-'a']){
					p=p->p[s[i]-'a'];
				}
				else{
					p->p[s[i]-'a']=new Node();
					p=p->p[s[i]-'a'];
				}
			}
			p->p[26]=new Node();
		}
		dfs(head);
		ans=head->dp[K];
		if(ans==0)
			++ans;
		cout<<ans<<"\n";
	}
	return 0;
}

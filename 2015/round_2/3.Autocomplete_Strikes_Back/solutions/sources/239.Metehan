#include <algorithm>
#include <string.h>
#include <stdio.h>
using    namespace std;

struct data
{
  bool msign;
  int h,dp[101];
  data *next[26];
  data(int _h)
  {
    memset(dp,-1,sizeof(dp));
    dp[0]=0;
    h=_h;
    msign=false;
    for(int i=0 ; i<26 ; i++) next[i]=NULL;
  }
}*root;

int T,n,m,len;
char s[20003];
data *Q[20003];

int main()
{
  freopen("asb.txt","r",stdin);
  freopen("cikti.txt","w",stdout);
  scanf("%d",&T);
  for(int t=1 ; t<=T ; t++)
  {
    root=new data(0);
    scanf("%d%d",&n,&m);
    for(int i=0 ; i<n ; i++)
    {
      scanf("%s",s);
      len=strlen(s);
      data *tree=root;
      for(int j=0 ; j<len ; j++)
      {
        if(tree->next[s[j]-'a']==NULL)
          tree->next[s[j]-'a']=new data(tree->h+1);
        tree=tree->next[s[j]-'a'];
      }
      tree->msign=true;
    }
    int at=0;
    Q[++at]=root;
    for(int i=1 ; i<=at ; i++)
    {
      data *tree=Q[i];
      for(int j=0 ; j<26 ; j++)
        if(tree->next[j]!=NULL)
          Q[++at]=tree->next[j];
    }
    for(int s=at ; s>=1 ; s--)
    {
      data *tree=Q[s];
      for(int i=0 ; i<26 ; i++)
        if(tree->next[i]!=NULL)
        {
          for(int k=m ; k>=1 ; k--)
            for(int j=1 ; j<=k ; j++)
              if(tree->next[i]->dp[j]!=-1)
                if(tree->dp[k-j]!=-1)
                  if(tree->dp[k]==-1 || tree->dp[k]>tree->dp[k-j]+tree->next[i]->dp[j])
                    tree->dp[k]=tree->dp[k-j]+tree->next[i]->dp[j];
        }
        if(tree->msign==true)
          for(int i=m-1 ; i>=0 ; i--)
            if(tree->dp[i]!=-1)
              if(tree->dp[i+1]==-1 || tree->dp[i+1]>tree->dp[i]+tree->h)
                tree->dp[i+1]=tree->dp[i]+tree->h;
        if(tree->h)
          tree->dp[1]=tree->h;
    }
    printf("Case #%d: %d\n",t,root->dp[m]);
  }
  return 0;
}

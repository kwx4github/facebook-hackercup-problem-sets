#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

struct X {
	map<char, X*> m;
	int ile = 0;
	int ct(string s) {
		auto* t = this;
		for (int i = 0; i < s.size(); ++i) {
			if (t->m.find(s[i]) == t->m.end()) {
				return i;
			}
			t = t->m[s[i]];
		}
		return s.size();
	}
	int ct2(string s) {
		auto* t = this;
		for (int i = 0; i < s.size(); ++i) {
			if (t->m.find(s[i]) == t->m.end() || (i > 0 && t->ile == 1)) {
				return i;
			}
			t = t->m[s[i]];
		}
		return s.size();
	}
};

int main() {
	int T;
	cin >> T;
	for (int q = 1; q <= T; ++q) {
		int N, K;
		cin >> N >> K;
		vector<string> v(N);
		for (auto& s : v) cin >> s;
		sort(v.begin(), v.end(), [](string& a, string& b) {return a.length() < b.length(); });
		X t;
		int ret = 0;
		vector<string> chosen;
		for (int i = 0; i < K; ++i) {
			X* curr = &t;
			string s = v[0]; int best = 0;
			for (int j = 0; j < v.size(); ++j) {
				if (curr->ct(s) > curr->ct(v[j])) {
					best = j;
					s = v[j];
				}
			}
			chosen.push_back(s);
			v.erase(v.begin() + best);

			int r = -1;
			for (int j = 0; j < s.length(); ++j) {
				char l = s[j];
				curr->ile++;
				if (curr->m.find(l) == curr->m.end()) {
					curr->m[l] = new X;
					if (r == -1) r = j + 1;
				}
				curr = curr->m[l];
			}
			curr->ile++;
			if (r == -1) r = s.length();
			ret += r;
		}

		ret = 0;
		for (auto& s : chosen) {
			ret += t.ct2(s);
		}
		cout << "Case #" << q << ": " << ret << endl;
	}
	return 0;
}
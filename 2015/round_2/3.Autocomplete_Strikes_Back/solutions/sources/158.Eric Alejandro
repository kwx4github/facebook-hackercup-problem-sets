#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
 using namespace std;
  
#define REP(i, n) for(int i=0;i<int(n);i++)
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP(X,Y) make_pair(X,Y)

#define MAXN 22000
#define MAXC 30
int x[MAXN][30];
int nnext = 1; //initially all numbers in x are -1
int children[MAXN];
bool is[MAXN];
int DP[MAXN][101][MAXC];
inline int GET(char c) { return c-'a'; }
void build(string& s){
    int i = 0, v = 0;
    children[0]++;
//    cout << s << " " ;
    while(i < s.size()){
        if(x[v][GET(s[i])] == -1) {
            v = x[v][GET(s[i++])] = nnext ++;
        }
        else {
            v = x[v][GET(s[i++])];
        }

        if (i == s.size()) {
            is[v] = true;
        }
        children[v]++;
 //       cout << " " << v;
    }
  //  cout << endl;
}
int LAST = 'z'-'a';
int MX = 31000;
int doit(int node, int quedan, int dir, int D) {
    int& res = DP[node][quedan][dir];
    if (res >= 0) return res;
   
    res = MX;
    // checks 
    if (quedan == 0) return res = 0;
    if (dir == LAST + 1) {
       if (quedan == 1 && is[node]) return res = D;
       return res = MX;   
    }
    if (quedan > children[node]) return res = MX;
   
    // poda
    if (quedan == 1 && children[node] >= 1 && dir == 0) {
       res = min(res, D); 
       return res;
    }


    // proximo hijo
    if (x[node][dir] == -1) {
        res = min(res, doit(node, quedan, dir+1, D));
        return res;
    }

    // trato de mandar todos los que puedo por dir.
    int child = x[node][dir];
    int amount = children[child];
    for (int i = 0; i <= min(quedan, amount); ++i) {
       res = min(res, doit(child, i, 0, D+1) + doit(node, quedan-i, dir+1, D)); 
    }
    return res;
}

int main() {
    int i,j ,k;
    int casos; cin >> casos;
    for (int h = 0; h < casos; ++h) {
        int N, K; cin >> N >> K;
        nnext = 1;
        memset(x, -1, sizeof(x));
        memset(children, 0, sizeof(children));
        memset(is, false, sizeof(is));
        memset(DP, -1, sizeof(DP));
        for (i = 0; i < N; ++i) {
            string s; cin >> s;
            build(s);
        }
        cout << "Case #" << h+1 << ": " << max(1, doit(0, K, 0, 0)) << endl;
    }
    return 0;
}

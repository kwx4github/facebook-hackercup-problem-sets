#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define MAX 21000
#define INF (1<<29)

int S;
int trie[MAX][30];
int depth[MAX];
bool word[MAX];

int dp[MAX][110];
int dp2[30][110];

void func(int x, int K){
	int i,j,k;
	
	vector <int> child;
	REP(i,26) if(trie[x][i] != -1) child.push_back(trie[x][i]);
	int sz = child.size();
	
	REP(i,sz+1) REP(j,K+1) dp2[i][j] = INF;
	dp2[0][0] = 0;
	REP(i,sz){
		int y = child[i];
		REP(j,K+1) REP(k,K-j+1) dp2[i+1][j+k] = min(dp2[i+1][j+k], dp2[i][j] + dp[y][k]);
	}
	
	dp[x][0] = 0;
	
	if(word[x]){
		for(i=1;i<=K;i++) dp[x][i] = depth[x] + dp2[sz][i-1];
	} else {
		for(i=1;i<=K;i++) dp[x][i] = dp2[sz][i];
		dp[x][1] = min(dp[x][1], depth[x]);
	}
}

void add(string s){
	int i,j;
	
	int N = s.length();
	int x = 0;
	
	REP(i,N){
		int c = s[i] - 'a';
		if(trie[x][c] != -1){
			x = trie[x][c];
		} else {
			trie[x][c] = S;
			x = trie[x][c];
			depth[x] = i + 1;
			S++;
		}
	}
	
	word[x] = true;
}

void main2(void){
	int N,K,i,j;
	
	S = 1;
	REP(i,MAX) REP(j,26) trie[i][j] = -1;
	REP(i,MAX) word[i] = false;
	REP(i,MAX) depth[i] = 0;
	REP(i,MAX) REP(j,110) dp[i][j] = INF;
	
	cin >> N >> K;
	REP(i,N){
		string s;
		cin >> s;
		add(s);
	}
	
	for(i=S-1;i>=0;i--) func(i, K);
	cout << dp[0][K] << endl;
}

///////////////////////////////////////////////////////////////////////////////////////

int main(void){
	int T,t;
	cin >> T;
	REP(t,T){
		printf("Case #%d: ", t+1);
		main2();
	}
	return 0;
}

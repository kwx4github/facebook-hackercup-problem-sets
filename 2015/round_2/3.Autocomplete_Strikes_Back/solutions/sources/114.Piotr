#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

string W[55555];

int S[55555][111];
int P[55555];
int I[55555];
int st = 0;

int n, k;

struct node {
    public:
    bool is;
    node *next[26];
    node () {
        is = false;
        memset(next, 0, sizeof(next));
    }

    void add(string &w, int p) {
        if (((int)w.size()) == p) {
            is = true;
            return;
        }

        if (!next[w[p]-'a'])
            next[w[p] - 'a'] = new node();
        next[w[p] - 'a']->add(w, p+1);
    }

    vector<int> compute() {
        vector<int> res(k + 1, (int)1e9);
        res[0] = 0;
        db("");
        for (int i = 'a'; i <= 'z'; i++) {
            node *ne = next[i-'a'];
            if (ne) {
                db("st" << " "<<(char)(i+'a'));
                auto tmp = ne->compute();
                for (int a = 0; a<=k; a++) {
                    tmp[a] += a;
                }
                db("end");

                auto copy = res;
                for (int a = 0; a<= k; a++)
                    for (int b = 0; b <= k; b++) if (a + b <= k && res[a] && tmp[b]) {
                        copy[a+b] = min(copy[a+b], res[a] + tmp[b]);
                    }
                res = copy;
                for (int b = 0; b <= k; b++)
                    res[b] = min(res[b], tmp[b]);
                db("");
            }
        }
        db(is);
        if (is) {
 //           for (int j = 0; j <= k; j++) cerr << res [j] << ' ';cerr<<endl;

            for (int j = k; j >= 1; j--) {
                res[j] = min(res[j], res[j-1]);
            }
//#    for (int j = 0; j <= k; j++) cerr << res [j] << ' ';cerr<<endl;
        }
        res[1] = 0;
        db(is);
        return res;
    }
};


void solve() {
    node *tree = new node();
    W[0] = '#';
    cin>>n>>k;
    db(n);
    fo (i, 1, n) {
        cin>>W[i];
        tree->add(W[i], 0);
    }
    db("");
    vector<int> q = tree->compute();
    printf("%d", q[k]);
}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    cin>>t;
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <list>
#include <map>
#include <unordered_set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>

using namespace std;


int main()
{
	freopen("autocomplete_strikes_back.txt", "r", stdin);
	freopen("OUTPUT.TXT", "w", stdout);

	int T, caseno = 1;
	cin >> T;


	while (T--)
	{
		int n, k;
		cin >> n >> k;

		map<string, unordered_set<int>> prefix;
		vector<string> Words;

		for (int i = 0; i < n; i++)
		{
			string W;
			cin >> W;
			W = " " + W;
			for (int j = 0; j < W.length(); j++)
			{
				prefix[W.substr(0, j + 1)].insert(Words.size());
			}
			Words.push_back(W);
		}

		while (n > k)
		{
			string lWord = "";
			for (auto i = prefix.begin(); i != prefix.end(); i++)
			{
				if (i->second.size() > 1 && i->first.size() > lWord.size())
					lWord = i->first;
			}

			int no = *prefix[lWord].begin();
			int length = 0;
			for (auto i = prefix[lWord].begin(); i != prefix[lWord].end(); i++)
			{
				if (Words[*i].length() > length)
				{
					no = *i;
					length = Words[*i].length();
				}
			}


			string W = Words[no];
			for (int j = 0; j < W.length(); j++)
			{
				prefix[W.substr(0, j + 1)].erase(no);
			}

			Words[no] = "";

			n--;
		}

		int count = -n;
		for (int i = 0; i < Words.size(); i++)
		{
			string W = Words[i];
			for (int j = 0; j < W.length(); j++)
			{
				count++;
				if (prefix[W.substr(0, j + 1)].size() == 1) break;
			}
		}

		if (count == 0) count = 1;

		cout << "Case #" << caseno++ << ": " << count << "\n";
	}
}
#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back

#define foreach(v,c) for(typeof((c).begin()) v = (c).begin(); v!=(c).end(); ++v)
#define all(c) (c).begin(), (c).end()
#define REP(i,n) for(int i=0; i<n; i++)
#define F(i,L,R) for(int i=L; i<R; i++)

#define printA(a,L,R) F(puf,L,R) cout << a[puf] << (puf==(R-1)?'\n':' ')
#define printV(a) printA(a,0,a.size())
#define dbg(x) //cerr << #x << " = " << x << endl;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int,int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ld> vld;

#define PI 3.1415926535897932384626
#define INF 1001000009
#define EPS 1e-8
#define MAXN 409600
#define MAXK 128
#define MOD 1000000007

int T, zz;
int N,K;
int triesize = 1;
int notatrie[MAXN][32];
// 31 is round num to update
// 30 is total through (or ending at) curr
// 29 is whether something ends here
int costs[MAXN][MAXK];

void addNEWword(const string &s) {
  int sind = 0; int triepos = 0;
  while (1) {

    if (notatrie[triepos][31] < zz) {
      REP(i,32) notatrie[triepos][i]=0;
      notatrie[triepos][31]=zz;
    }

    notatrie[triepos][30]++;
    if (sind < s.size()) {
      if (notatrie[triepos][s[sind]-'a']==0)
        notatrie[triepos][s[sind]-'a'] = triesize++;
    } else {
      notatrie[triepos][29] = 1;
    }
    if (sind+1 > s.size()) return;
    triepos = notatrie[triepos][s[sind]-'a'];
    sind++;
  }
}

void evalcosts(int triepos) {
  REP(i,K+5)
    costs[triepos][i] = INF;
  costs[triepos][0]=0;
  if (notatrie[triepos][29]) costs[triepos][1]=0;
  REP(c,26)
    if(notatrie[triepos][c]) {
      dbg(c);
      dbg(notatrie[triepos][c]);
      evalcosts(notatrie[triepos][c]);
      for (int i = K; i>=0; i--) {
        for (int j = K; j>0; j--) {
          if (i+j <= K) {
            costs[triepos][i+j] = min(costs[triepos][i+j], costs[triepos][i]+costs[notatrie[triepos][c]][j]+j);
          }
        }
      }
    }

  for (int i = 1; i<=K; i++) {
    costs[triepos][i];
  }
  if (triepos)
    costs[triepos][1] = 0;

  /*  if (notatrie[triepos][29])
    for (int i = K; i>0; i--) {
      costs[triepos][i] = min(costs[triepos][i], costs[triepos][i-1]+1);
      }*/

  dbg(triepos);
  REP(i,K+1) {
    dbg(i);
    dbg(costs[triepos][i]);
  }

}



int main() { ios_base::sync_with_stdio(0); cin.tie(0);

  cin >> T;
  for (zz=1; zz<=T; zz++) {
    cin >> N;
    cin >> K;
    string s;
    REP(i,N) {
      cin >> s;
      addNEWword(s);
    }

    evalcosts(0);






    cout << "Case #" << zz << ": ";

    cout << costs[0][K];

    cout << endl;
  }
}

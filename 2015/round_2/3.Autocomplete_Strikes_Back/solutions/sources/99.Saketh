#include <iostream>
#include <vector>
using namespace std;

const int MAXL = 20200;
const int MAXK = 128;
const int INF = 0x7f7f7f7f;

int dp[MAXL][MAXK];
int T, N, K;

struct node{
    bool end;
    int depth;
    int succ[26];   
} trie[MAXL]; int TAIL=1;

string s;
void ins(){
    int loc = 0; 
    for(int idx = 0; idx < s.length(); idx++){
        int let = s[idx] - 'a';
        
        if(trie[loc].succ[let] == 0)
            trie[loc].succ[let] = TAIL++;

        loc = trie[loc].succ[let];
        trie[loc].depth = idx + 1;
    }

    trie[loc].end = true;
}

int main(){
    ios_base::sync_with_stdio(false);

    cin >> T;
    for(int t=1; t<=T; t++){
        memset(trie, 0, sizeof(trie));
        TAIL = 1;
        memset(dp, 0x7f, sizeof(dp));
            
        cin >> N >> K;
        for(int i=0; i<N; i++){
            cin >> s;
            ins();
        }

        for(int loc = TAIL-1; loc >= 0; loc--){
            vector<int> childs;
            for(int i=0; i<26; i++)
                if(trie[loc].succ[i] != 0)
                    childs.push_back(trie[loc].succ[i]);

            dp[loc][0] = 0;

            if(trie[loc].end){
                dp[loc][1] = trie[loc].depth;
            }

            for(int ch : childs){
                for(int pk = K; pk >= 0; pk--){
                    for(int ck = 0; ck <= pk; ck++){
                        if(dp[loc][pk-ck] == INF) continue;
                        if(dp[ch][ck] == INF) continue;
                        dp[loc][pk] = min(dp[loc][pk], dp[loc][pk-ck] + dp[ch][ck]);
                    }
                }
            }

            if(loc > 0)
                dp[loc][1] = min(dp[loc][1], trie[loc].depth);

        }
        cout << "Case #" << t << ": " << dp[0][K] << endl;
    }
}

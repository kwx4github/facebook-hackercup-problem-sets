#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long LL;
typedef double DB;
typedef unsigned UINT;
typedef unsigned long long ULL;

#define min(a, b)  a < b ? a : b
#define max(a, b)  a > b ? a : b

#define rep(i,n) for(int i=0;i<n;++i)
#define rep1(i,n) for(int i=1;i<=n;++i)
#define repab(i,a,b) for(int i=a;i<=b;++i)
#define dwn(i,n) for (int i=n-1;i>-1;--i)
#define dwn1(i,n) for (int i=n;i>0;--i)
#define dwnab(i,a,b) for(int i=a;i>=b;--i)
#define each(it, A) for (__typeof(A.begin()) it=A.begin(); it != A.end(); ++it)

#define pii pair<int, int>
#define all(v) (v).begin(), (v).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define sortv(v) sort(all(v))

#define mset(m) memset(m,0,sizeof(m))

#define sz(c) (int)c.size()
#define ff first
#define ss second

#define SI ({int x;scanf("%d", &x);x;});
#define SL ({LL x;scanf("%lld", &x);x;});

#define PI(n) printf("%d", n);
#define PLL(n) printf("%I64d", n);

#define PILN(n) printf("%d\n", n);
#define PLLN(n) printf("%I64d\n", n);

#define PLN printf("\n");

#define MAX 20002

struct node
{ 
	char v;
	node *p[26];
	void clear()
	{
		rep(i, 26)
			p[i] = NULL;
	}
	void create()
	{
		int n = 26;
		rep(i, n)
			p[i] = NULL;
	}
}tree;


int t, n, s, k;
char *w; 
char *ww[4004];
char *wt[4004];

char tmp[MAX];

char words[4004][MAX];

inline bool cmp(const char *a, const char *b)
{
	int la = strlen(a), lb = strlen(b), val = 1;
	
	rep(i, la)
		if (!b[i] || b[i] < a[i])  
		{
			val = 0;
			break;
		}
		else if (a[i] < b[i])
		{
			val = 1; break;
		}
		
	return val;
}


inline bool cmppii(const pii &a, const pii &b)
{
	return a.ff == b.ff ? a.ss < b.ss : a.ff < b.ff;
}

int minWord()
{
	int l = strlen(w), index = 0, sol = -1;
	
	node *t = &tree;
	
	while(true)
	{
		if (index == l)
			break;
		char i = w[index++] - 97;
		
		if (t->p[i]!=NULL)
		{
			t = t->p[i];
		}
		else
		{
			i = w[index - 1] - 97;
			t->p[i] = new node;
			t->p[i]->create();
			t->p[i]->v = i;
			t = t->p[i];
			if (sol < 0)
				sol = index;
		}
	}
	
	if (sol < 0)
		sol = index;
		
	return sol;
}

pii v[4004];

int main() {
	ios_base::sync_with_stdio(0);
	freopen("autocomplete_strikes_back_out.txt","w",stdout);
	freopen("autocomplete_strikes_back.txt","r",stdin);
	
    cin>>t;

	rep1(q, t)
	{
		tree.create();
		mset(v);
		
		s = 0;
	   	cin>>n>>k;
	   	
	    rep(i, n)
	    {
		    cin>>words[i];
		    ww[i] = words[i];
		}
		
		sort(ww, ww + n, &cmp);
		
	    rep(i, n)
	    {
		    w = ww[i];
		    v[i].ff = minWord();
			v[i].ss = i;    
		}

		tree.clear();
		tree.create();
		
		rep(i,n)
		{
		//	printf("%s %d\n", ww[i], v[i]);
		}
		
		sort(v, v+n, &cmppii);
		
		rep(i,k)
			wt[i] = ww[v[i].ss];
		
		sort(wt, wt+k, &cmp);
		
		if (k == 7)
		{
			int pop = 3;
		}
		
		for (int i = 1; i < k; i++)
		{
			char *a = wt[i-1];
			char *b = wt[i];
			
			int j = 0;
			for(; a[j];j++)
				if (a[j] != b[j])
					break;

			rep(k,j)
				tmp[k] = a[k];
			if (j)
			{
				tmp[j] = 0;
				w = tmp;
				minWord();
			}
		}
		
		rep(i, k)
	    {
		    w = wt[i];
		    int a = minWord();
		    //printf("%s %d", w, a);
		    s += a;
		}
		
		tree.clear();
	    printf("Case #%d: %d\n", q, s);
	}

	
    return 0;
}



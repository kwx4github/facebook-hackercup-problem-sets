										/* in the name of Allah */
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

#define uint unsigned int
#define int64 long long
#define P pair<int, int>
#define Pss pair<string, string>
#define PLL pair<int64, int64>
#define Inf 1000000
#define Mod 1000000007LL
#define Max 30010

#pragma comment(linker, "/STACK:50000000")

struct node{
	int cnt, ch[26];
	node(){
		cnt = 0;
		memset(ch, -1, sizeof ch);
	}
};

int n, k, pnt;
bool has[Max];
node tr[Max];
int dp[Max][27][110];

void add(string txt){
	int ref = 0;
	for(int i = 0; i < txt.length(); i++){
		int idx = txt[i] - 'a';
		if(tr[ref].ch[idx] == -1){
			tr[pnt].cnt = 0;
			memset(tr[pnt].ch, -1, sizeof tr[pnt].ch);
			tr[ref].ch[idx] = pnt++;
		}
		ref = tr[ref].ch[idx];
	}
	tr[ref].cnt++;
}

bool dfs(int idx){
	has[idx] = (tr[idx].cnt > 0);
	for(int i = 0; i < 26; i++)
		if(tr[idx].ch[i] != -1 && dfs(tr[idx].ch[i]))
			has[idx] = true;
	return has[idx];
}

int mem(int idx, int c, int rem){
	if(rem <= 0)
		return 0;
	if(c >= 26)
		return Inf;

	int &ref = dp[idx][c][rem];
	if(ref != -1)
		return ref;

	int child = tr[idx].ch[c];
	if(child == -1)
		return ref = mem(idx, c + 1, rem);

	ref = mem(idx, c + 1, rem);
	if(has[child])
		ref = min(ref, mem(idx, c + 1, rem - 1) + 1);

	for(int i = 1; i <= rem; i++){
		int t1 = mem(child, 0, i - tr[child].cnt);
		int t2 = mem(idx, c + 1, rem - i);
		ref = min(ref, t1 + t2 + i);
	}
	return ref;
}

int main(){
	freopen("AutocompleteSB.in", "r", stdin);
	freopen("AutocompleteSB.out", "w", stdout);
	int T, test = 0;
	for(cin >> T; T--; ){
		memset(has, false, sizeof has);
		memset(tr[0].ch, -1, sizeof tr[0].ch);
		pnt = 1;
		cin >> n >> k;
		string str;
		for(int i = 0; i < n; i++){
			cin >> str;
			add(str);
		}
		dfs(0);
		memset(dp, -1, sizeof dp);
		cout << "Case #" << ++test << ": " << mem(0, 0, k) << endl;
	}
	return 0;
}

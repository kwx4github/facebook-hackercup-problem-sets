import java.io.*;
import java.util.*;

public class A {
	FastScanner in;
	PrintWriter out;

	final int N = 1000_000;
	int[][] next = new int[26][N];
	boolean[] end = new boolean[N];
	int[] sz = new int[N];
	int cnt;

	void free(int v) {
		for (int i = 0; i < 26; i++) {
			next[i][v] = -1;
		}
		end[v] = false;
		sz[v] = 0;
	}

	final int K = 101;

	int[] go(int v, int h) {
		int max = Math.min(K, sz[v] + 1);
		int[] res = new int[max];
		Arrays.fill(res, Integer.MAX_VALUE);
		res[0] = 0;
		if (end[v]) {
			res[1] = h;
		}
		for (int go = 0; go < 26; go++)
			if (next[go][v] != -1) {
				int[] child = go(next[go][v], h + 1);
				int[] newRes = new int[max];
				Arrays.fill(newRes, Integer.MAX_VALUE);
				for (int now = 0; now < res.length; now++) {
					if (res[now] == Integer.MAX_VALUE)
						continue;
					for (int there = 0; there < child.length; there++) {
						if (child[there] == Integer.MAX_VALUE
								|| there + now >= res.length)
							continue;
						newRes[now + there] = Math.min(newRes[now + there],
								res[now] + child[there]);
					}
				}
				res = newRes;
			}
		if (h != 0) {
			res[1] = h;
		}
		return res;
	}

	void solve() {
		int tc = in.nextInt();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			int n = in.nextInt();
			int k = in.nextInt();
			cnt = 1;
			free(0);
			for (int i = 0; i < n; i++) {
				String s = in.next();
				int cur = 0;
				for (char c : s.toCharArray()) {
					int go = c - 'a';
					if (next[go][cur] == -1) {
						next[go][cur] = cnt;
						free(cnt);
						cnt++;
					}
					cur = next[go][cur];
					sz[cur]++;
				}
				end[cur] = true;
			}
			sz[0] = n;
			int result = go(0, 0)[k];
			out.println(result);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("A.in"));
			out = new PrintWriter(new File("A.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {

		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new A().run();
	}
}
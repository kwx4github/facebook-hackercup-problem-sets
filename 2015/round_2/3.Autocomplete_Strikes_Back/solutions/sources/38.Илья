#include <iostream>
#include <cstring>
using namespace std;


const int maxn = 20500;
int go[maxn][30];
bool term[maxn];
int sz;
char str[maxn];

int dp[maxn][105];
int inner_dp[31][105];

void update_dp(int &upd_val, int new_val)
{
	if (upd_val == -1 || new_val < upd_val)
		upd_val = new_val;
}

void calc_dp(int pos)
{
	memset(inner_dp, -1, sizeof inner_dp);
	inner_dp[0][0] = 0;
	if (term[pos] )
	{
		inner_dp[0][1] = 0;
	}
	for (int c = 0; c < 30; c++)
	{
		for (int j = 0; j < 105; j++)
		{
			int cur_dp = inner_dp[c][j];
			if (cur_dp == -1)
			{
				continue;
			}
			update_dp(inner_dp[c + 1][j], cur_dp);
			if (go[pos][c] == 0)
				continue;
			update_dp(inner_dp[c + 1][j + 1], cur_dp + 1);
			for (int cur = 2; cur < 105; cur++)
			{
				update_dp(inner_dp[c + 1][j + cur], cur_dp + cur + dp[go[pos][c] ][cur] );
			}
		}
	}
	for (int i = 0; i < 105; i++)
	{
		dp[pos][i] = inner_dp[30][i];
	}
}

void clear_dict()
{
	sz = 1;
	memset(term, false, sizeof term);
	memset(go, 0, sizeof go);
	memset(dp, -1, sizeof dp);
}

void add_word()
{
	scanf("%s", str);
	int len = strlen(str);
	int pos = 0;
	for (int i = 0; i < len; i++)
	{
		int cur = str[i] - 'a';
		if (go[pos][cur] == 0)
		{
			go[pos][cur] = sz++;
		}
		pos = go[pos][cur];
	}
	term[pos] = true;
}

int solve()
{
	clear_dict();
	int n, k;
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; i++)
		add_word();
	for (int i = sz - 1; i >= 0; i--)
		calc_dp(i);
	return dp[0][k];
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for (int i = 0; i < t; i++)
	{
		printf("Case #%d: %d\n", i + 1, solve() );
	}

	return 0;
}

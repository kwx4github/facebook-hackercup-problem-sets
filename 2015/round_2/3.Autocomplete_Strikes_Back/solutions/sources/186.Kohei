#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
 
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
const int MN = 4040;

int n, k;
string s[MN];

struct Trie {
    using TP = Trie*;
    TP c[26];
    int n;
    int b[110];
    Trie(): n(0) {
        for (int i = 0; i < 26; i++) {
            c[i] = nullptr;
        }
    }
    void add(const char s[]) {
        if (s[0] == '\0') {
            n++;
            return;
        }
        int u = s[0]-'a';
        if (c[u] == nullptr) {
            c[u] = new Trie();
        }
        c[u]->add(s+1);
    }
    void calc() {
        fill_n(b, 110, 1000000);
        b[0] = 0;
        assert(n <= 1);
        if (n) {
            b[1] = 0;
        }
        for (int i = 0; i < 26; i++) {
            if (c[i] == nullptr) continue;
            c[i]->calc();
            for (int x = 109; x >= 1; x--) {
                for (int y = 1; y <= x; y++) {
                    b[x] = min(b[x], b[x-y]+y+c[i]->b[y]);
                }
            }
        }
        b[1] = 0;
    }
};

int solve() {
    Trie tr;
    for (int i = 0; i < n; i++) {
        //cout << s[i] << endl;
        tr.add(s[i].c_str());
    }
    tr.calc();
    return tr.b[k];
}


int main() {
    int T;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        cin >> n >> k;
        for (int i = 0; i < n; i++) {
            cin >> s[i];
        }
        printf("Case #%d: %d\n", t, solve());
    }
    return 0;
}
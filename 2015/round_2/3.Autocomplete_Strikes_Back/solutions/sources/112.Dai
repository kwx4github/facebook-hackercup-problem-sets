package fhc2015.round2;

import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * Created by dhamada on 15/01/18.
 */
public class Auto2 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int T = in.nextInt();
        for (int testCase = 1 ; testCase <= T ; testCase++) {
            out.println(String.format("Case #%d: %d", testCase, solve(in)));
        }
        out.flush();
    }

    private static int solve(Scanner in) {
        int n = in.nextInt();
        int k = in.nextInt();
        memo = new HashMap<>();

        Trie root = new Trie();
        for (int i = 0 ; i < n ; i++) {
            char[] c = in.next().toCharArray();
            root.add(c);
        }
        K = k;

        if (k == 1) {
            return 1;
        }
        return dfs(root)[k];
    }

    static void debug(Object... o) {
        System.err.println(Arrays.deepToString(o));
    }

    static Map<Trie,int[]> memo;
    static int K;

    static int[] dfs(Trie now) {
        int cn = now.cn;
        int[][] dp = new int[cn+1][K+1];
        for (int i = 0 ; i <= cn ; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }

        if (now.nu == 1) {
            dp[cn][0] = dp[cn][1] = 0;
            return dp[cn];
        }

        dp[0][0] = 0;
        if (now.end) {
            dp[0][1] = 0;
        }
        for (int i = 0 ; i < cn ; i++) {
            int[] r = dfs(now.next[now.hd[i]]);
            for (int fr = 0 ; fr <= K ; fr++) {
                if (dp[i][fr] == Integer.MAX_VALUE) {
                    continue;
                }
                for (int k = 0 ; fr+k <= K ; k++) {
                    if (r[k] == Integer.MAX_VALUE) {
                        continue;
                    }
                    dp[i+1][fr+k] = Math.min(dp[i+1][fr+k], dp[i][fr]+r[k]+k);
                }
            }
        }
        dp[cn][0] = dp[cn][1] = 0;
        return dp[cn];
    }


    static class Trie {
        static int unique = -1;

        Trie[] next;
        int[] hd;
        int cn;
        int nu;
        boolean end;
        Trie() {
            next = new Trie[26];
            hd = new int[26];
            cn = 0;
            nu = 0;

            int[] x = new int[101];
            Arrays.fill(x, -1);
            memo.put(this, x);
        }

        private void add(char[] str) {
            unique = -1;
            add(0, str);
        }


        private void add(int idx, char[] str) {
            nu++;
            if (idx >= str.length) {
                end = true;
                return;
            }
            int c = str[idx] - 'a';
            if (next[c] == null) {
                next[c] = new Trie();
                hd[cn++] = c;
                if (unique == -1) {
                    unique = idx+1;
                }
            }
            next[c].add(idx+1, str);
        }
    }
}


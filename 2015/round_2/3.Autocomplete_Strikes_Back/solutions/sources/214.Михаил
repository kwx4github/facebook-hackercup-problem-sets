#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cstdio>
#include <memory>
#include <cstdlib>
#include <cmath>
#include <ctime>

using namespace std;

const int INF = 1000000000;
int k;

struct Trie {
    Trie() : leaves(0), ans(k + 1, INF), is_word(false) {}
    
    map<char, Trie> next;
    int leaves;
    bool is_word;
    vector <int> ans;
    vector <char> edges;
//    vector < vector <int> > dp;
} root;

void dfs(Trie * const cur, int depth) {
    for(char c = 'a'; c <= 'z'; ++c) {
        if(cur->next.count(c)) {
            dfs(&(cur->next[c]), depth + 1);
        }
    }
//    cur->dp = vector < vector <int> >(cur->leaves + 1, vector<int>(k+1, INF));
//    cur->dp[0][0] = 0;
    cur->ans[0] = 0;
    
    if(cur->is_word)
        cur->ans[1] = depth;

//    } else {
    
    for(char c = 'a'; c <= 'z'; ++c)
        if(cur->next.count(c) > 0)
            cur->edges.push_back(c);
    
    for(int child = 0; child < cur->edges.size(); ++child) {
        for(int j = k; j >= 0; --j) {
            if(cur->ans[j] != INF) {
                for(int i = 1; i + j <= k; ++i) {
                    int child_ans = cur->next[cur->edges[child]].ans[i];
                    if(child_ans != INF) {
                        cur->ans[i + j] = min(cur->ans[i + j], cur->ans[j] + child_ans);
                    }
                }
            }
        }
    }
    
        
//        for(int i = 0; i < cur->edges.size(); ++i) {
//            char c = cur->edges[i];
//            for(int j = 0; j <= k; ++j) {
//                for(int r = 0; r <= min(j, cur->next[c].leaves); ++r) {
//                    cur->dp[i + 1][j] = min(cur->dp[i + 1][j], cur->dp[i][j-r] + cur->next[c].ans[r]);
//                }
//            }
//        }
//        
//        for(int i = 0; i <= k; ++i) {
//            cur->ans[i] = cur->dp[cur->edges.size()][i];
//        }
//        
        cur->ans[1] = min(cur->ans[1], depth);
//    }
}

int main(int argc, const char * argv[]) {
    srand((unsigned) time(0));
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    
    int T;
    cin >> T;
    for(int t = 1; t <= T; ++t) {
        int n;
        cin >> n >> k;
        string s;
        root = Trie();
        for(int i = 0; i < n; ++i) {
            cin >> s;
            Trie * cur = &root;
            for(int j = 0; j < s.size(); ++j) {
                cur->leaves++;
                cur = &(cur->next[s[j]]);
            }
            cur->is_word = true;
            cur->leaves++;
        }
        dfs(&root, 0);
        cout << "Case #" << t << ": " << root.ans[k] << endl;
    }
    
    return 0;
}
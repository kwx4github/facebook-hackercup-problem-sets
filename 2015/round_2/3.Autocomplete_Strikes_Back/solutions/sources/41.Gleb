#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int smbs = 26;
const int size = 100 * 1000 + 100;
const int ssize = 200 + 5;
const int inf = 1000 * 1000 * 1000;

int ans[size][ssize];
int way[size][smbs];
bool term[size];
int n, k;
int h[ssize];

void nullvertex(int v) {
	for (int i = 0; i < smbs; i++)
		way[v][i] = 0;
	term[v] = false;
}

void dfs(int v) {
	for (int i = 0; i <= k; i++)
		ans[v][i] = inf;
	ans[v][0] = 0;
	if (term[v])
		ans[v][1] = 0;
	for (int i = 0; i < smbs; i++) {
		int tg = way[v][i];
		if (tg != 0) {
			dfs(tg);
			for (int j = 0; j <= k; j++) {
				h[j] = inf;
				for (int p = 0; p <= j; p++)
					h[j] = min(h[j], ans[v][p] + ans[tg][j - p]);
			}
			for (int j = 0; j <= k; j++)
				ans[v][j] = h[j];
		}
	}

	if (term[v])
		ans[v][1] = 1;
	if (v > 0)
		for (int i = 2; i <= k; i++)
			ans[v][i] += i;
	//cerr << "res " << v;
	//for (int i = 0; i <= k; i++)
	//	cerr << ' ' << i << ":" << ans[v][i];
	//cerr << endl;
}

char buf[size];
int tc, bsize;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
    	bsize = 1;
    	nullvertex(0);

    	scanf("%d%d", &n, &k);

    	for (int i = 0; i < n; i++) {
    		int cur = 0;
    		scanf("%s", buf);
    		int len = strlen(buf);
    		for (int j = 0; j < len; j++) {
    			int c = buf[j] - 'a';
    			if (way[cur][c] == 0) {
    				way[cur][c] = bsize++;
    				nullvertex(bsize - 1);
    			}

    			cur = way[cur][c];
    		}
    		term[cur] = true;
    	}

    	dfs(0);
    	cerr << tnum << endl;
    	cout << "Case #" << tnum + 1 << ": " << ans[0][k] << endl;
    }

    return 0;
}
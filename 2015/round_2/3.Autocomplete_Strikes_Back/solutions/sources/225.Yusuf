//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9;

const int MAXN = 20010;

struct node{
	
	
	int root,id;
	
	int ch[30];
	
	int cnt;
	
	int end;
	
	node(int _root=0,int _id=0,int _end=0){
		root=_root;
		id=_id;
		end=_end;
		cnt=0;
		SET(ch,-1);
	}
	
}G[MAXN];

int cnt=0;

int newElm(int k,int c,int end){
	
	//~ cout << "new" << endl;
	G[++cnt]=node(k,c,end);
	return cnt;
	
}

void add(int k,char str[],int b,int len){
	
	G[k].cnt++;
	
	if(b==len)
		return;
	
	//~ printf("%d %d %d -> %d %c\n",k,b,len,G[k].cnt,str[b]);
	
	if( G[k].ch[ str[b]-'a' ]!=-1 )
		add( G[k].ch[ str[b]-'a' ],str,b+1,len );
	else
	{
		G[k].ch[ str[b]-'a' ]=newElm(k,str[b]-'a',b==len-1);
		add( G[k].ch[ str[b]-'a' ],str,b+1,len );
	}
	
}

char str[MAXN];

int dn[MAXN][101];

int next(int k,int t){
	
	forn(i,t,25)
		if( G[k].ch[i]!=-1 )
			return G[k].ch[i];
	return -1;
}

int f(int k,int t,int len){
	
	//~ printf("%d %d %d\n",k,t,len);
	
	int &rev=dn[k][t];
	
	if(rev!=-1)	return rev;
	
	if( t==0 )	return rev=0;
	
	if( t==1 )	return rev=len;
	
	rev=1e9;
	
	int tmp=0;
	if( G[k].end )
	{
		tmp=len;
		t--;
		int x=next(k,0);
		int y=next( G[k].root,G[k].id+1 );

		if(x!=-1 && y!=-1)
			forn(i,0,t)
				rev=min(rev , f(x,i,len+1) + f(y,t-i,len) + tmp );
		else if(x!=-1)
			rev=f( x,t,len+1 )+tmp;
		else if(y!=-1)
			rev=f( y,t,len )+tmp;
		else
			rev=1e9;
		//~ printf("%d %d %d -> %d\n",k,t,len,rev);
		return rev;
		
	}else{
		int x=next(k,0);
		int y=next( G[k].root,G[k].id+1 );

		if(x!=-1 && y!=-1)
		{
			forn(i,2,t)
				rev=min(rev , f(x,i,len+1) + f(y,t-i,len) + tmp );
			
			rev=min( rev , f(y,t-1,len)+len );
				
		}
		else if(x!=-1)
			rev=f( x,t,len+1 )+tmp;
		else if(y!=-1)
			rev=f( y,t,len )+tmp;
		else
			rev=1e9;
		//~ printf("%d %d %d -> %d\n",k,t,len,rev);
		return rev;
		
	}
	
}

int main(){
	
	int Test,N,K;
	
	scanf(" %d",&Test);
	
	forn(Case,1,Test){
		
		scanf(" %d %d",&N,&K);
		
		G[0]=node(-1,-1,-1);
		
		cnt=0;
		
		forn(i,1,N)
		{
			scanf(" %s",str);
			add(0,str,0,strlen(str));
		}
		
		SET(dn,-1);
		
		int res = f( next(0,0), K ,1 ) ;
		
		printf("Case #%d: %d\n",Case,res);
		
	}
	
	return 0;
	
}

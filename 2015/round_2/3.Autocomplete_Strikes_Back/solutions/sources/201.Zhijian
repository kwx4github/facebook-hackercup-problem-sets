#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <cassert>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>

#define foreach(it,e) for (__typeof(e.begin()) it = e.begin(); it != e.end(); it++)

using namespace std;

const long long INF = 1LL << 50;

struct Node {
	Node *child[26];
	long long val[111];
	int dep;
	bool mark;

	Node() {
		memset(child, 0, sizeof(child));
		memset(val, 0, sizeof(val));
		dep = mark = 0;
	}
};

inline void insert(Node *x, char *str) {
	int len = (int)strlen(str);
	for (int i = 0; i < len; ++i) {
		int c = str[i] - 'a';
		if (!x->child[c]) {
			x->child[c] = new Node();
			x->child[c]->dep = x->dep + 1;
		}
		x = x->child[c];
	}
	x->mark = true;
}

int n, k;

Node *root;

inline void dfs(Node *x) {
	for (int i = 0; i < 26; ++i) {
		if (x->child[i]) {
			dfs(x->child[i]);
		}
	}
	
	for (int i = 0; i <= k; ++i) {
		x->val[i] = INF;
	}
	x->val[0] = 0;
	
	if (x->mark) {
		x->val[1] = min(x->val[1], (long long)x->dep);
	}
	
	for (int i = 0; i < 26; ++i) {
		if (!x->child[i]) {
			continue;
		}
		Node *y = x->child[i];
		
		for (int j = k; j >= 0; --j) {
			for (int l = 0; l <= k; ++l) {
				if (j - l >= 0) {
					x->val[j] = min(x->val[j], x->val[j - l] + y->val[l]);
				}
			}
		}
	}
	
	x->val[1] = min(x->val[1], (long long)x->dep);
}

inline void solve() {
	scanf("%d%d", &n, &k);
	
	root = new Node();
	
	for (int i = 0; i < n; ++i) {
		static char buffer[22222];
		scanf("%s", buffer);
		
		insert(root, buffer);
	}
	
	dfs(root);
	printf("%lld\n", root->val[k]);
	
	vector<Node*> queue;
	queue.push_back(root);
	for (int head = 0; head < (int)queue.size(); ++head) {
		Node *x = queue[head];
		for (int i = 0; i < 26; ++i) {
			if (x->child[i]) {
				queue.push_back(x->child[i]);
			}
		}
		delete x;
	}
}

int main () {
	int tests;
	scanf("%d", &tests);
	for (int i = 1; i <= tests; ++i) {
		printf("Case #%d: ", i);
		solve();
	}
	return 0;
}

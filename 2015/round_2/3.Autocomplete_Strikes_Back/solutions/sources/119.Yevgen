#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <iomanip>
#include <fstream>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii;
typedef vector<int> vint;
typedef vector<LL> vLL;

const int nmax = 40009;
const int alf = 26;

int dp[nmax][105];

int nx[nmax][alf];
bool last[nmax];
int n, k;
int cnt;

void dfs(int v) {
	if (last[v]) dp[v][1] = 0;

	for (int ch = 0; ch < alf; ++ch) {
		if (nx[v][ch] != -1) {
			int to = nx[v][ch];
			dfs(to);
			for (int i = k; i >= 1; --i) {
				for (int ti = 1; ti <= i && dp[to][ti] < INF; ++ti) {
					dp[v][i] = min(dp[v][i], dp[v][i - ti] + dp[to][ti] + ti);
				}
			}
		}
	}

	dp[v][1] = 0;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif

	int T;
	cin >> T;
	REP(test, T) {
		cin >> n >> k;
		MEM(nx, -1);
		MEM(last, false);
		cnt = 1;

		REP(ii, n) {
			int v = 0;
			string s;
			cin >> s;
			FE(i, s) {
				int ch = s[i] - 'a';
				if (nx[v][ch] != -1) {
					v = nx[v][ch];
				}
				else {
					v = nx[v][ch] = cnt;
					++cnt;
				}
			}
			last[v] = true;
		}
		REP(i, cnt) {
			dp[i][0] = 0;
			FOR(j, 1, k) {
				dp[i][j] = INF;
			}
		}

		dfs(0);
		cout << "Case #" << test + 1 << ": ";
		cout << dp[0][k] << endl;
	}

	return 0;
}

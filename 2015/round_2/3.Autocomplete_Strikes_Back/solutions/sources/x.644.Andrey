#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <queue>

using namespace std;

int n, k;
vector<string> a;

bool adjuted(string & s, const string & s1, const string & s2)
{
//	cout << "--> " << s << " " << s1 << " " << s2 << endl;
	int w = s.length(), w1 = s1.length(), w2 = s2.length();
	bool dif1 = false, dif2 = false;
	for (int i = 0; i < w; ++i)
	{
		if (w1 <= i || s[i] != s1[i]) dif1 = true;
		if (w2 <= i || s[i] != s2[i]) dif2 = true;
		if (dif1 && dif2)
		{
			if (i == w - 1)return false;
			s.erase(i + 1, w + 1);
			return true;
		}
	}
	return false;
}

void reduce()
{
	int idx = 0, best = a[0].length();
	for (size_t i = 1; i < a.size(); ++i)
	{
		int len = a[i].length();
		if (len > best)
			best = len, idx = i;
	}
	
//	cout << "removing: " << a[idx] << endl;
	for (int i = idx; i < (int)a.size() - 1; ++i) a[i] = a[i + 1]; a.pop_back();

	if (a.size() != 1)
	{
		for (int i = idx; i < a.size(); ++i)
		{
			if (i == (int)a.size() - 1)
			{
				if (!adjuted(a[i], "", a[i - 1]))break;
			}
			else if (i == 0)
			{
				if (!adjuted(a[i], "", a[i + 1]))break;
			}
			else if(!adjuted(a[i], a[i - 1], a[i + 1]))break;
		}
		for (int i = idx - 1; i >= 0; --i)
		{
			if (i == (int)a.size() - 1)
			{
				if (!adjuted(a[i], "", a[i - 1]))break;
			}
			else if (i == 0)
			{
				if (!adjuted(a[i], "", a[i + 1]))break;
			}
			else if (!adjuted(a[i], a[i - 1], a[i + 1]))break;
		}
	}
}

void solve()
{
	cin >> n >> k; a.resize(n); for (int i = 0; i < n; ++i) cin >> a[i];
	sort(a.begin(), a.end());

	adjuted(a[0], "", a[1]);
	for (int i = 1; i < n - 1; ++i)
		adjuted(a[i], a[i - 1], a[i + 1]);
	adjuted(a[n - 1], "", a[n - 2]);

//	cout << endl; for (int i = 0; i < a.size(); ++i) cout << a[i] << endl;

	while (a.size() != k)
	{
		reduce();
//		cout << endl; for (int i = 0; i < a.size(); ++i) cout << a[i] << endl;
	}

	int cnt = 0;
	for (size_t i = 0; i < a.size(); ++i)
		cnt += a[i].length();
	cout << cnt << endl;
}

int main()
{
	ios::sync_with_stdio(false);
#ifdef GRANDVIC_DEBUG
	freopen("e:/input.txt", "rt", stdin);
	freopen("e:/output.txt", "wt", stdout);
#endif
	int T; cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}

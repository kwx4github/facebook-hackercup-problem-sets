#include <cstdio>
#include <cassert>
#include <cstring>
#include <algorithm>
using std::min;

const int MAXL = 22222;

struct TrieNode {
  bool ok;
  int child[26];
  int f[101];
  void Init() {
    ok = false;
    memset(child, -1, sizeof(child));
    memset(f, 63, sizeof(f));
    f[0] = 0;
  }
} trie[MAXL];
int tot = 0;
int k;
char buffer[MAXL];

void Init() {
  tot = 0;
  int n;
  assert(scanf("%d%d", &n, &k) == 2);
  trie[tot++].Init();
  while (n--) {
    assert(scanf(" %s", buffer) == 1);
    int p = 0;
    for (char *s = buffer; *s; ++s) {
      int t = *s - 'a';
      if (trie[p].child[t] == -1) {
        trie[tot].Init();
        trie[p].child[t] = tot++;
      }
      p = trie[p].child[t];
    }
    trie[p].ok = true;
  }
}

void DP(int p, int dep) {
  for (int t = 0; t < 26; ++t) {
    if (trie[p].child[t] != -1) {
      int son = trie[p].child[t];
      DP(son, dep + 1);
      for (int i = k; i >= 1; --i) {
        for (int j = 1; j <= i; ++j) {
          trie[p].f[i] = min(trie[p].f[i], trie[son].f[j] + trie[p].f[i - j]);
        }
      }
    }
  }
  if (trie[p].ok) {
    for (int i = k; i >= 1; --i) {
      trie[p].f[i] = min(trie[p].f[i], trie[p].f[i - 1] + dep);
    }
  }
  trie[p].f[1] = min(trie[p].f[1], dep);
}

void Work() {
  DP(0, 0);
  printf("%d\n", trie[0].f[k]);
}

int main() {
  int cases;
  assert(scanf("%d", &cases) == 1);
  for (int i = 1; i <= cases; ++i) {
    printf("Case #%d: ", i);
    Init();
    Work();
  }
  return 0;
}

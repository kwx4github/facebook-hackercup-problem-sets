// by shik {{{
#include <bits/stdc++.h>
#include <unistd.h>
#define SZ(x) ((int)(x).size())
#define ALL(c) begin(c),end(c)
#define REP(i,n) for ( int i=0; i<(int)(n); i++ )
#define REP1(i,a,b) for ( int i=(int)(a); i<=(int)(b); i++ )
#define FOR(it,c) for ( auto it=(c).begin(); it!=(c).end(); it++ )
#define MP make_pair
#define PB push_back
using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

void RI() {}

template<typename... T>
void RI( int& head, T&... tail ) {
    scanf("%d",&head);
    RI(tail...);
}

template<typename T>
void _dump( const char* s, T&& head ) { cerr<<s<<"="<<head<<endl; }

template<typename T, typename... Args>
void _dump( const char* s, T&& head, Args&&... tail ) {
    cout << __PRETTY_FUNCTION__ << endl;
    int c=0;
    while ( *s!=',' || c!=0 ) {
        if ( *s=='(' || *s=='[' || *s=='{' ) c++;
        if ( *s==')' || *s==']' || *s=='}' ) c--;
        cerr<<*s++;
    }
    cerr<<"="<<head<<", ";
    _dump(s+1,tail...);
}

#define dump(...) _dump(#__VA_ARGS__, __VA_ARGS__);

template<typename Iter>
ostream& _out( ostream &s, Iter b, Iter e ) {
    s<<"[";
    for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
    s<<"]";
    return s;
}

template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.first<<","<<p.second<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
template<typename T>
ostream& operator <<( ostream &s, const set<T> &c ) { return _out(s,ALL(c)); }
template<typename A, typename B>
ostream& operator <<( ostream &s, const map<A,B> &c ) { return _out(s,ALL(c)); }

/// }}}

inline void chkmin( int &a, int b ) {
    if ( b<a ) a=b;
}

const int N=4567;
const int K=110;
const int L=20020;
const int INF=1e5;

struct Trie {
    map<char,Trie*> ch;
    bool tag;
    int cnt,dp[K];
    Trie() {
        tag=0;
        cnt=0;
    }
    ~Trie() {
        FOR(it,ch) delete it->second;
    }
    void ins( char *ptr ) {
        char c=*ptr;
        cnt++;
        if ( c=='\0' ) {
            tag=1;
            return;
        }
        if ( !ch.count(c) ) ch[c]=new Trie;
        ch[c]->ins(ptr+1);
    }
    void solve( int k ) {
        dp[0]=0;
        REP1(i,1,k) dp[i]=INF;
        FOR(it,ch) {
            auto *t=it->second;
            t->solve(k);
            int ndp[K];
            memcpy(ndp,dp,(k+1)*sizeof(int));
            REP1(i,0,k) REP1(j,0,k-i) chkmin(ndp[i+j],dp[i]+(t->dp[j]+j));
            memcpy(dp,ndp,(k+1)*sizeof(int));
        }
        if ( tag ) for ( int i=k; i>1; i-- ) chkmin(dp[i],dp[i-1]);
        dp[1]=0;
        //printf("== %p\n",this);
        //REP1(i,0,k) printf("%d: %d\n",i,dp[i]);
    }
};

int n,k;
string s[N];
void input() {
    RI(n,k);
    REP1(i,1,n) cin>>s[i];
}

void solve() {
    if ( k==1 ) {
        puts("1");
        return;
    }
    static char buf[L];
    Trie *trie=new Trie;
    REP1(i,1,n) {
        strcpy(buf,s[i].c_str());
        trie->ins(buf);
    }
    trie->solve(k);
    printf("%d\n",trie->dp[k]);
    delete trie;
}

int main( int argc, char *argv[] ) {
    int n_case;
    RI(n_case);
    REP1(i,1,n_case) {
        input();
        if ( argc==2 && atoi(argv[1])!=i ) continue;
        printf("Case #%d: ",i);
        solve();
        fflush(stdout);
    }
    return 0;
}


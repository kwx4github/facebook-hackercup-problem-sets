#include <cmath>
#include <cstdio>
#include <vector>
#include <climits>
#include <iostream>
#include <algorithm>
using namespace std;
const int INF = 0x3F3F3F3F;
const int MAXN = 10001, MAXM = 30, KIND = 26;
int m;
struct node {
  char *s;
  int prefix;
  bool isword;
  node *next[KIND];
  void init() {
    s = NULL;
    prefix = 0;
    isword = false;
    memset(next, 0, sizeof(next));
  }
} a[MAXN * MAXM], *root; //æ ¹

int n, k;

void insert(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    p->s = s + i;
    if (p->next[x] == NULL) {
      a[m].init();
      p->next[x] = &a[m++];
    }
    p = p->next[x];
    p->prefix++;
  }
  p->isword = true;
}

bool del(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return false;
    p = p->next[x];
  }
  if (p->isword)
    p->isword = false;
  else
    return false;
  return true;
}

bool search(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return false;
    p = p->next[x];
  }
  return p->isword;
}
int count(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return 0;
    p = p->next[x];
  }
  return p->prefix;
}

char s[22222222];

int dp[2222222][111];

void dfs(node *root) {
  int id = root - a;
  for (int i = 0; i < KIND; ++i) {
    if (root->next[i] == NULL) continue;
    dfs(root->next[i]);
  }
  memset(dp[id], 63, sizeof(dp[id]));
  dp[id][0] = 0;
  dp[id][1] = root->isword ? 1 : INF;
  for (int i = 0; i < KIND; ++i) {
    if (root->next[i] == NULL) continue;
    int son = root->next[i] - a;
    for (int j = k; j >= 0; --j) {
      for (int l = 0; l <= j; ++l) {
        dp[id][j] = min(dp[id][j], dp[id][j - l] + dp[son][l]);
      }
    }
  }
  if (id != 0) {
    for (int i = 1; i <= k; ++i) {
      if (root->isword) {
        dp[id][i] += i - 1;
      } else {
        dp[id][i] += i;
      }
    }
  }
  if (dp[id][1] != INF) {
    dp[id][1] = 1;
  }
}

int main() {
  int cases;
  scanf("%d", &cases);
  getchar();
  for (int T = 0; T < cases; ++T) {
    m = 0;
    a[m].init();
    root = &a[m++];
    scanf("%d %d", &n, &k);
    getchar();
    for (int i = 0; i < n; ++i) {
      gets(s);
      insert(root, s);
    }
    dfs(root);
    int root_id = root - a;
    printf("Case #%d: ", T + 1);
    printf("%d\n", dp[root_id][k]);
  }
  return 0;
}
/*
3 2
ap
ar
c
*/

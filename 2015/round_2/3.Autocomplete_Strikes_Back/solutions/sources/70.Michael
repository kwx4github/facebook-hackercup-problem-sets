#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))

#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;


const int MOD = 1000000007;

struct Node {
    map<char, Node*> children;
    vector<int> dp;
    bool has_word;

    Node()
    : has_word(false)
    , dp(101, -1)
    {}
};


int calc(vector<string> words, int k) {
    int n = words.size();
    vector<Node*> nodes;
    nodes.push_back(new Node());
    Node* root = nodes[0];

    // cerr << "Adding" << endl;
    for (int i = 0; i < n; ++i) {
        string& word = words[i];
        int len = word.length();
        int start = 0;
        Node* cur_node = root;
        while (start < len) {
            char c = word[start];
            map<char, Node*>::iterator it = cur_node->children.find(c);
            if (it != cur_node->children.end()) {
                cur_node = it->second;
            } else {
                Node* new_node = new Node();
                nodes.push_back(new_node);
                cur_node->children.insert(make_pair(c, new_node));
                cur_node = new_node;
            }
            ++start;
        }
        cur_node->has_word = true;
    }

    // cerr << "DP" << endl;
    vector<int> dp0;
    vector<int> temp_dp(101);
    for (int i = (int) nodes.size() - 1; i >= 0; --i) {
        Node& node = *nodes[i];
        dp0.assign(101, -1);
        dp0[0] = 0;

        // cerr << "Updating through children" << endl;
        for (map<char, Node*>::iterator it = node.children.begin(); it != node.children.end(); ++it) {
            Node& child = *it->second;
            vector<int>& dp1 = child.dp;
            for (int j = 0; j <= 100; ++j) {
                temp_dp[j] = -1;
                for (int l = 0; l <= j; ++l) {
                    temp_dp[j] = mmin(temp_dp[j], mplus(dp0[l], dp1[j - l]));
                }
            }
            dp0.swap(temp_dp);
        }

        // cerr << "Getting node DP" << endl;
        node.dp[0] = 0;
        if (node.has_word || !node.children.empty())
            node.dp[1] = 0;
        else
            node.dp[1] = -1;

        for (int j = 2; j <= 100; ++j) {
            node.dp[j] = mplus(j, dp0[j]);
            if (node.has_word) {
                node.dp[j] = mmin(node.dp[j], mplus(j - 1, dp0[j - 1]));
            }
        }
        assert(node.dp[node.children.size()] >= 0);
    }

    int res = root->dp[k];

    for (int i = 0; i < nodes.size(); ++i)
        delete nodes[i];

    return res;
}

int main() {
    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        debug(tt);
        int n, k;
        cin >> n >> k;
        vector<string> words(n);
        for (int i = 0; i < n; ++i)
            cin >> words[i];
        int res = calc(words, k);
        cout << "Case #" << tt << ": " << res << endl;
    }
}

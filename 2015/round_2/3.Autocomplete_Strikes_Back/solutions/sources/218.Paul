#include <bits/stdc++.h>

using namespace std;

struct node {
    vector<char> ch;
    map<char, node*> c;
    int cnt, id, term;
    node() { c.clear(); cnt = 0; term = 0; }
    int insert(int i, const string& s) {
        cnt++;
        if (i == s.size()) {
            term = 1;
            return s.size();
        }
        int res = -1;
        if (!c.count(s[i])) {
            res = i+1;
            c[s[i]] = new node;
            c[s[i]]->insert(i+1, s);
            ch.push_back(s[i]);
        } else {
            res = c[s[i]]->insert(i+1, s);
        }
        return res;
    }
    ~node() {
        for (auto ch : c) {
            delete ch.second;
        }
    }
};

int id;
void dfs(node* rt) {
    rt->id = id++;
    for (auto ch : rt->c) {
        dfs(ch.second);
    }
}

const int INF = 1000000;
map<int, map<int, int> > memo[20005];
int dp(node* rt, int c, int k) {
    if (k == 0) return 0;
    if (c == -1) {
        if (rt->term) {
            return memo[rt->id][c][k] = dp(rt, 0, k-1);
        } else if (k == 1 && rt->cnt >= 1)
            return 0;
        else {
            return dp(rt, 0, k);
        }
    } else if (c == rt->ch.size()) {
        return (k == 0 ? 0 : INF);
    } else if (memo[rt->id][c].count(k)) {
        return memo[rt->id][c][k];
    }
    
    char ch = rt->ch[c];
    assert(rt->c.count(ch));
    int& ans = memo[rt->id][c][k];
    node* child = rt->c[ch];
    assert(child->id != rt->id);
    ans = INF;
    for (int j = 0; j <= min(k, child->cnt); j++) {
        ans = min(ans, dp(rt, c+1, k-j) + j + dp(child, -1, j));
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t; cin >> t;
    for (int ca = 1; ca <= t; ca++) {        
        node* root = new node;
        int n, k; cin >> n >> k;
        int res = 0;
        for (int i = 0; i < n; i++) {
            string s; cin >> s;
            res += root->insert(0, s);
        }
        id = 0;
        dfs(root);
        
        for (int i = 0; i < 20005; i++) {
            memo[i].clear();
        }
        cout << "Case #" << ca << ": " << dp(root, 0, k) << '\n';
        delete root;
    }
	return 0;
}
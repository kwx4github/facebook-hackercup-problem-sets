#include <iostream>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <bitset>
#include <queue>
#include <deque>
#include <list>
#include <algorithm>
#include <iomanip>

using namespace std;

typedef pair<int, int> pt;
typedef long long li;
typedef long double ld;

template<typename X> inline X abs(const X& a) { return a < 0 ? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

#define forn(i,n) for(int i = 0; i < int(n); i++)
#define pb push_back
#define sz(a) int(a.size())
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++) 
#define ft first
#define sc second
#define x first
#define y second

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = ld(1e-9);
const ld PI = acos(-1.0);

const int N = 4000 + 13;
const int M = 40 * 1000;
const int K = 100 + 13;

struct node
{
	map<char, int> next;
	int leaf;
	int len;
	node() 
	{
		len = 0;
		leaf = 0;
		next.clear();
	}
};

node a[M];
int sza;
int n, k;
char buf[M];
string s[N];

inline bool read()
{
	scanf("%d%d", &n, &k);
	for(int i = 0; i < n; i++)
	{
		scanf("%s", buf);
		s[i] = string(buf);
	}
	return true;
}

int z[M][K];
int cnt[M];
int tmp[K];

void calc(int v) 
{
	map<char, int>& g = a[v].next;
	memset(z[v], 127, sizeof z[v]);
	cnt[v] = 0;
	z[v][0] = 0;
	if (g.empty())
	{
		z[v][1] = a[v].len;
		cnt[v]++;
		return;
	}
	for(auto it = g.begin(); it != g.end(); it++) 
	{
		int to = it->sc;
		calc(to);
		memset(tmp, 127, sizeof tmp);
		for(int i = 0; i < cnt[v] + 1; i++)
			for(int j = 0; j < cnt[to] + 1; j++)
			{
				if (i + j > k)
					break;
				if (i == 0 && j == 1)
					tmp[i + j] = min(tmp[i + j], z[v][i] + z[to][j] - 1);
				else if (i == 1) 
					tmp[i + j] = min(tmp[i + j], z[v][i] + z[to][j] + 1);
				else
					tmp[i + j] = min(tmp[i + j], z[v][i] + z[to][j]);				
			}
		cnt[v] += cnt[to];
		memcpy(z[v], tmp, sizeof tmp);
	}

	if (a[v].leaf) 
	{
		for(int i = min(k + 1, cnt[v] + 1); i >= 0; i--)
		{
			if (i != 1) 
				z[v][i + 1] = min(z[v][i + 1], z[v][i] + a[v].len);
			else
				z[v][i + 1] = min(z[v][i + 1], z[v][i] + 1 + a[v].len);
		}
		cnt[v]++;
	}
}

int add(char c, int v)
{
	if (!a[v].next.count(c)) 
	{
		a[v].next[c] = sza;
		a[sza] = node();
		a[sza].len = a[v].len + 1;
		sza++;		
	}
	int nv = a[v].next[c];
	return nv;
}

inline void solve()
{   
	sza = 0;
	a[sza++] = node();
	for(int i = 0; i < n; i++)
	{
		int cur = 0;
		for(int j = 0; j < sz(s[i]); j++)
			cur = add(s[i][j], cur);
		a[cur].leaf = true;	
	}
	calc(0);
	cout << z[0][k] << endl;
}

int main()
{
    freopen("autocomplete_strikes_back.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cerr << setprecision(10) << fixed;
    cout << setprecision(15) << fixed;    
    srand(time(NULL));
    int tests;
    cin >> tests;
    for(int test = 0; test < tests; test++)
    {
    	//cerr << test << endl;
		read();
    	printf("Case #%d: ", test + 1);
	    solve();
	}         
    return 0;
}
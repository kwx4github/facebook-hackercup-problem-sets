#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

const int kMaxNode = 200007;
const int kMaxAplha = 26;

const int kMaxChoose = 207;
const int kMaxWords = 5007;

const int kInfinity = 0x3F3F3F3F;

struct Node {
    bool is_leaf;
    int ch[kMaxAplha];

    void Reset() {
        is_leaf = false;
        fill(ch, ch + kMaxAplha, -1);
    }
} nodes[kMaxNode];

char buffer[kMaxNode];
int dp[kMaxNode][kMaxChoose];
int n, k;

void go(int x) {
    for (int chosen = 0; chosen <= k; ++chosen) {
        dp[x][chosen] = kInfinity;
    }
    dp[x][0] = 0;
    for (int i = 0; i < kMaxAplha; ++i) {
        if (nodes[x].ch[i] != -1) {
            int to = nodes[x].ch[i];
            go(to);
            for (int current = k; current >= 0; --current) {
                for (int pick = 1; pick + current <= k; ++pick) {
                    int delta = pick;
                    if (pick == 1) {
                        ++delta;
                    }
                    dp[x][current + pick] = min(dp[x][current + pick],
                        dp[x][current] + dp[to][pick] + delta);
                }
            }
        }
    }

    if (nodes[x].is_leaf) {
        for (int current = k - 1; current >= 0; --current) {
            int delta = 1;
            dp[x][current + 1] = min(dp[x][current + 1],
                dp[x][current] + delta);
        }
        dp[x][1] = 0;
    }

    dp[x][0] = 0;
    if (dp[x][1] < kInfinity) {
        dp[x][1] = 0;
    }
}

void Solve(int case_id) {
    cin >> n >> k;
    nodes[0].Reset();
    int last = 1;
    for (int i = 0; i < n; ++i) {
        scanf("%s", buffer);
        int l = strlen(buffer);
        int current = 0;
        for (int j = 0; j < l; ++j) {
            int c = buffer[j] - 'a';
            if (nodes[current].ch[c] == -1) {
                nodes[last].Reset();
                nodes[current].ch[c] = last++;
            }
            current = nodes[current].ch[c];
        }
        nodes[current].is_leaf = true;
    }

    go(0);

    // for (int i = 0; i < last; ++i) {
    //     for (int j = 0; j <= 2; ++j) {
    //         cout << dp[i][j] << " ";
    //     }
    //     cout << endl;
    // }
    cout << "Case #" << case_id << ": ";
    if (k == 1) {
        cout << 1 << endl;
    } else {
        cout << dp[0][k] - k << endl;
    }
}

int main() {
    int case_num;
    cin >> case_num;
    for (int i = 1; i <= case_num; ++i) {
        Solve(i);
    }
    return 0;
}
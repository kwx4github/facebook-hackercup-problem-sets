// @author peter50216
// #includes {{{
#include <bits/stdc++.h>
using namespace std;
// }}}
// #defines {{{
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define REP(i,n) for(int i=0;i<(n);i++)
#define REP1(i,a,b) for(int i=(a);i<=(b);i++)
#define REPL(i,x) for(int i=0;x[i];i++)
#define PER(i,n) for(int i=(n)-1;i>=0;i--)
#define PER1(i,a,b) for(int i=(a);i>=(b);i--)
#define RI(x) scanf("%d",&x)
#define DRI(x) int x;RI(x)
#define RII(x,y) scanf("%d%d",&x,&y)
#define DRII(x,y) int x,y;RII(x,y)
#define RIII(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define DRIII(x,y,z) int x,y,z;RIII(x,y,z)
#define RS(x) scanf("%s",x)
#define PI(x) printf("%d\n",x)
#define PIS(x) printf("%d ",x)
#define CASET int ___T,cas=1;scanf("%d ",&___T);while(___T--)
#define CASEN0(n) int cas=1;while(scanf("%d",&n)!=EOF&&n)
#define CASEN(n) int cas=1;while(scanf("%d",&n)!=EOF)
#define MP make_pair
#define PB push_back
#define MS0(x) memset(x,0,sizeof(x))
#define MS1(x) memset(x,-1,sizeof(x))
#define SEP(x) ((x)?'\n':' ')
#define F first
#define S second
#ifdef ONLINE_JUDGE
#define FILEIO(x) freopen(#x ".in","r",stdin);freopen(#x ".out","w",stdout);
#define FILEIOS freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#else
#define FILEIO(x) ;
#define FILEIOS ;
#endif
typedef pair<int,int> PII;
typedef long long LL;
typedef unsigned long long ULL;
// }}}

int n,k;
int to[20100][27];
int tot[20100];
int cur[20100];
char tmp[20100];
inline int ton(char c){
  return c-'a';
}
int dp[102][20100][27];
vector<int> nxt[20100];
const int INF=1000000000;
inline int dpf(int k,int np,int ni){
  int& d=dp[k][np][ni];
//  printf("dpf %d %d %d\n",k,np,ni);
  if(d!=-1)return d;
  if(k>tot[np])d=INF;
  else if(ni==SZ(nxt[np])){
    if(k==cur[np])d=0;
    else d=INF;
  }else if(k<=1&&ni==0){
    d=0;
  }else{
    int id=nxt[np][ni];
    d=INF;
    REP1(i,0,k-cur[np]){
//      printf("in i=%d dpf %d %d %d = %d\n",i,k,np,ni,d);
      d=min(d,i+dpf(i,id,0)+dpf(k-i,np,ni+1));
    }
  }
//  printf("dpf %d %d %d = %d\n",k,np,ni,d);
  return d;
}
int main(){
  CASET{
    RII(n,k);
    MS1(to);
    MS0(tot);MS0(cur);
    int nc=1;
    REP(i,n){
      RS(tmp);
      int np=0;
      int l=strlen(tmp);
      REP(i,l){
        int c=ton(tmp[i]);
        if(to[np][c]==-1)to[np][c]=nc++;
        tot[np]++;
        np=to[np][c];
      }
      tot[np]++;
      cur[np]++;
    }
    MS1(dp);
    REP(i,nc){
      nxt[i].clear();
      REP(j,26)if(to[i][j]!=-1)nxt[i].push_back(to[i][j]);
    }
    fprintf(stderr,"Case #%d: %d\n",cas,dpf(k,0,0));
    printf("Case #%d: %d\n",cas++,dpf(k,0,0));
  }
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread


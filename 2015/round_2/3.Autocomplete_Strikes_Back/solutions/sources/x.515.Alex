#include<cstdio>
#include<fstream>
#include<iostream>
#include<iomanip>
#include<algorithm>
#include<vector>
#include<bitset>
#include<deque>
#include<queue>
#include<set>
#include<map>
#include<cmath>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<unordered_map>

#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std;

const int nmax = 4005;
const int kmax = 105;
const int inf = 1 << 29;

int t, i, j, k, n, aux, K;
int cost[nmax][nmax];
int sz[nmax];
int dp[kmax][nmax];
int mini[kmax][nmax];
string s[nmax];

int calc(int a, int b)
{
    int i;

    for(i = 0; i < sz[a] && i < sz[b]; i++)
        if(s[a][i] != s[b][i])
            break;

    if(i < sz[b]) return i + 1;
    else return i;
}

int main()
{
    ifstream fin("autocomplete_strikes_back.txt");
    ofstream fout("test.out");

    fin >> t;

    for(int I = 1; I <= t; I++)
    {
        fin >> n >> K;

        for(i = 1; i <= n; i++)
            fin >> s[i];

        sort(s + 1, s + n + 1);

        for(i = 1; i <= n; i++)
            sz[i] = s[i].size();

        for(i = 1; i <= n; i++)
            for(j = 1; j <= n; j++)
                cost[i][j] = calc(i, j);

        for(i = 1; i <= n; i++)
        {
            dp[1][i] = 1;
            mini[1][i] = 1;
        }

        for(i = 2; i <= K; i++)
            for(j = 1; j <= n; j++)
                dp[i][j] = inf;

        for(i = 2; i <= K; i++)
            for(j = i; j <= n; j++)
                for(k = i - 1; k < j; k++)
                {
                    aux = dp[i - 1][k] + cost[k][j];
                    if(cost[j][k] > mini[i - 1][k])
                        aux += cost[j][k] - mini[i - 1][k];

                    if(aux < dp[i][j])
                    {
                        dp[i][j] = aux;
                        mini[i][j] = cost[k][j];
                    }
                }

        fout << "Case #" << I << ": " << dp[K][n] << '\n';
    }

    return 0;
}

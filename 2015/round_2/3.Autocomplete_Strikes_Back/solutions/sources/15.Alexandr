#include <cstdio>
#include <ctime>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <set>
#include <algorithm>
#include <iostream>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

struct Node
{
	int wrd;
	Node* to[26];
	Node()
	{
		wrd=0;
		REP(i,26) to[i]=NULL;
	}
	Node* at(char c) const
	{
		return to[c-'a'];
	}
	Node*& at(char c)
	{
		return to[c-'a'];
	}
};

void wipe(Node *nd)
{
	if(nd==NULL) return;
	for(int i=0;i<26;i++)
		wipe(nd->to[i]);
	delete nd;
}

const int MAXK=101;
const int INF=100000000;

vector<int> wrd, wcnt, dp[MAXK];
vector<vector<int> > to;
vector<vector<int> > dp2[MAXK];
int sz;

char buf[20001];

int treeForm(Node* cur)
{
	int cid=sz++;
	wrd.push_back(cur->wrd);
	to.push_back(vector<int>());
	for(int j=0;j<26;j++)
		if(cur->to[j]!=NULL)
			to[cid].push_back(treeForm(cur->to[j]));
	return cid;
}

int solve(int wleft,int cur);
int solve2(int wleft,int cur, int id);

int solve(int wleft,int cur)
{
	if(wleft<=1) return 0;
	if(wleft>wcnt[cur]) return INF;
	if(dp[wleft][cur]==-1)
	{
		dp[wleft][cur]=solve2(wleft-wrd[cur],cur,0);
	}
	return dp[wleft][cur];
}

int solve2(int wleft,int cur, int id)
{
	if(wleft<=0) return 0;
	if(id==to[cur].size()) return INF;
	if(dp2[wleft][cur][id]==-1)
	{
		dp2[wleft][cur][id]=INF;
		int t=to[cur][id];
		for(int i=0;i<=wcnt[t] && i<=wleft;i++)
			dp2[wleft][cur][id]=min(dp2[wleft][cur][id],i+solve(i,t)+solve2(wleft-i,cur, id+1));
	}
	return dp2[wleft][cur][id];
}

int fillWcnt(int cur)
{
	wcnt[cur]=wrd[cur];
	for(int i=0;i<to[cur].size();i++)
		wcnt[cur]+=fillWcnt(to[cur][i]);
	return wcnt[cur];
}

int solve()
{
	int n,k;
	scanf("%d%d",&n,&k);
	Node *root=new Node();
	for(int i=0;i<n;i++)
	{
		scanf("%s",buf);
		Node* cur=root;
		for(int j=0;buf[j];j++)
		{
			if(cur->at(buf[j])==NULL)
				cur->at(buf[j])=new Node();
			cur=cur->at(buf[j]);
		}
		cur->wrd++;
	}

	wrd.clear();
	wcnt.clear();
	to.clear();
	REP(i,k+1)
	{
		dp[i].clear();
		dp2[i].clear();
	}
	sz=0;
	int top=treeForm(root);
	wipe(root);
	wcnt.resize(sz);
	fillWcnt(top);
	REP(i,k+1)
	{
		dp[i].resize(sz,-1);
		dp2[i].resize(sz);
		REP(j,sz)
			dp2[i][j].resize(to[j].size(),-1);
	}
	cerr<<sz<<endl;
	if(k==1)
	{
		return 1;
	}
	return solve(k, top);
}

int main()
{
	int t;
	scanf("%d",&t);
	for(int test=1;test<=t;test++)
		printf("Case #%d: %d\n",test,solve());
	return 0;
}

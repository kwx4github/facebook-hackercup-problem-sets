#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <tuple>
#include <algorithm>
#include <cstdint>
#include <cstdio>
using namespace std;

const int INF = 0x7fffffff;

class trie {
public:
	trie(int size):dp(size + 1, -1) {
		brother = NULL;
		end = false;
	}
	~trie() {
		for (auto& c : child) {
			delete c.second;
		}
	}

	void add(const char *p) {
		if (!*p) {
			end = true;
			return;
		}
		if (child.count(*p) == 0) {
			child[*p] = new trie(dp.size());
		}
		child[*p]->add(p + 1);
	}

	void pre_process() {
		trie *prev = NULL;
		for (auto& c : child) {
			if (prev != NULL)
				prev->brother = c.second;
			prev = c.second;
		}
		for (auto& c : child) {
			c.second->pre_process();
		}
	}

	int solve(int n) {
		// cout << n << endl;
		if (n <= 1) return 0;
		if (end) n--;

		int &ret = dp[n];
		if (ret >= 0) return ret;

		if (brother == NULL) {
			if (child.empty())
				return INF;
			int tt = child.begin()->second->solve(n);
			if (tt == INF) return INF;
			return ret = n + tt;
		}

		if (child.empty()) {
			return ret = brother->solve(n);
		}

		ret = INF;
		for (int i = 0; i <= n; i++) {
			int t1 = child.begin()->second->solve(i);
			int t2 = brother->solve(n - i);

			if (t1 == INF || t2 == INF)
				continue;

			ret = min(ret, (i == 1 ? 0 : i) + t1 + t2);
		}
		return ret;
	}

	map<char, trie*> child;
	trie *brother;
	vector<int> dp;
	bool end;
};

int main() {
	int t; cin >> t;
	for (int cn = 1; cn <= t; cn++) {
		int n, k; cin >> n >> k;

		vector<string> ss(n);
		for (auto& s : ss) {
			cin >> s;
		}

		trie *t = new trie(k);
		for (auto& s : ss) {
			t->add(s.c_str());
		}

		t->pre_process();
		cout << "Case #" << cn << ": " << t->solve(k) << endl;
	}
	return 0;
}

#include <bits/stdc++.h>/*{{{*/
using namespace std; typedef long long ll; typedef long double ld; void run(); int main(){ios::sync_with_stdio(0); int tsts; cin>>tsts; for (int tst=1; tst<=tsts; ++tst) {cout<<"Case #"<<tst<<": "; run();}}/*}}}*/
typedef unsigned long long ull;

/*
  gigantic
  tin.
     y.
     ny.
    lt.
      s.
*/

struct Tree{
  bool terminal;
  Tree *child[26];

  Tree() {for (int i=26; i--;) child[i]=nullptr; terminal=false;}
  ~Tree(){for (int i=26; i--;) delete child[i];}

  void insert(string &s){
    Tree *cur=this;
    for (auto i: s){
      i-='a';
      if (not cur->child[i]) cur->child[i]=new Tree();
      cur=cur->child[i];
    }
    cur->terminal=true;
  }

  vector<ull> solve(ull depth=0){
    vector<ull> res(111,-1);
    res[0]=0;

    // single path from root to self
    if (terminal){
      res[1]=min(res[1],depth);
    }

    // try each child
    for (int i=26; i--;){
      if (not child[i]) continue;
      auto const a=res;
      auto const b=child[i]->solve(depth+1);

      // update for merge
      for (int j=1; j<=101 and ~a[j]; j++){
        for (int k=1; j+k<=101 and ~b[k]; k++){
          ull cost=a[j]+b[k];

          // close off single-path terminals
          if (j==1 and j+k>1 and a[j]>depth) cost+=(depth+1ll)-a[j];
          if (k==1 and j+k>1 and b[k]>depth) cost+=(depth+1ll)-b[k];

          res[j+k]=min(res[j+k], cost);
        }
      }

      // update assuming no action
      for (int j=0; j<=101 and ~b[j]; ++j){
        res[j]=min(res[j],b[j]);
      }
    }

    // return result
    return res;
  }
};

void run(){
  Tree t;
  int n,k; cin>>n>>k;
  for (int i=0; i<n; i++) {string s; cin>>s; t.insert(s);}
  vector<ull> res=t.solve();
  res[1]=1;

  cout<<res[k]<<endl;
}

#include <cstdio>
#include <cstring>

using namespace std;

const int maxch = 20000;
const int maxsub = 100;

struct Node {
	int depth;
	bool isWord;
	//int words;
	int child[26];
	int ans[maxsub + 1];
};

int cases, casei, n, m, subset;
char word[maxch + 10];
Node tree[maxch + 10];

void addNode() {
	int len = strlen(word);
	int now = 0;
	for (int i = 0; i < len; ++i) {
		int tmp = word[i] - 'a';
		if (tree[now].child[tmp] == -1) {
			tree[m].depth = tree[now].depth + 1;
			tree[m].isWord = false;
			memset(tree[m].child, 255, sizeof(tree[m].child));
			tree[now].child[tmp] = m;
			++m;
		}
		now = tree[now].child[tmp];
	}
	tree[now].isWord = true;
}

void process() {
	for (int i = m - 1; i >= 0; --i) {
		memset(tree[i].ans, 255, sizeof(tree[i].ans));
		tree[i].ans[0] = 0;

		for (int j = 0; j < 26; ++j) if (tree[i].child[j] >= 0) {
			int now = tree[i].child[j];
			for (int ki = maxsub - 1; ki >= 0; --ki) if (tree[i].ans[ki] != -1) {
				for (int know = 1; know + ki <= maxsub; ++know) if (tree[now].ans[know] != -1) {
					int tmpk = ki + know;
					int tmpAns = tree[i].ans[ki] + tree[now].ans[know];
					if (tree[i].ans[tmpk] == -1 || tree[i].ans[tmpk] > tmpAns) {
						tree[i].ans[tmpk] = tmpAns;
					}
				}
			}
			//printf("%c-%d:(%d)", j + 'a', i, tree[i].isWord);
			//for (int j = 0; j < 5; ++j) printf("\t%d", tree[i].ans[j]);
			//printf("\n");
		}
		
		
		
		
		if (tree[i].isWord) {
			for (int ki = maxsub - 1; ki >= 0; --ki) if (tree[i].ans[ki] != -1) {
				int tmpk = ki + 1;
				int tmpAns = tree[i].ans[ki] + tree[i].depth;
				if (tree[i].ans[tmpk] == -1 || tree[i].ans[tmpk] > tmpAns) {
					tree[i].ans[tmpk] = tmpAns;
				}
			}
		}
		
		if (i > 0) tree[i].ans[1] = tree[i].depth; //prefix
		
		//printf("%d:(%d)", i, tree[i].isWord);
		//for (int j = 0; j < 5; ++j) printf("\t%d", tree[i].ans[j]);
		//printf("\n");
	}
}

int main() {
	scanf("%d", &cases);
	for (casei = 1; casei <= cases; ++casei) {
		scanf("%d%d", &n, &subset);
		
		m = 1;
		tree[0].depth = 0;
		tree[0].isWord = false;
		memset(tree[0].child, 255, sizeof(tree[0].child));
		
		for (int i = 0; i < n; ++i) {
			scanf(" %s", word);
			addNode();
		}

		process();
		
		printf("Case #%d: %d\n", casei, tree[0].ans[subset]);
	}
	
	
	return 0;
}
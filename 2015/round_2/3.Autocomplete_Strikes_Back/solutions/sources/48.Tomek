
// Tomasz Kulczynski
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for (int i=0;i<(n);++i)
#define FOR(i,a,b) for (VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(e,v) for(VAR(e,(v).begin());e!=(v).end();++e)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)(a).size())
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

const int M = 20113;
const int K = 103;
const int A = 'z'-'a'+1;
const int inf = 1<<29;

int t[M][A], c[M], dp[M][K];

void do_dp(int x, int k, int depth = 0) {
    int* r = dp[x];
    REP(i, k+1) r[i] = inf;
    r[0] = 0;
    if (c[x]) r[1] = depth;
    REP(a, A) if(t[x][a]) {
        do_dp(t[x][a], k, depth + 1);
        int* e = dp[t[x][a]];
        FORD(i, k, 1) FOR(j, 1, i) {
            if (e[j] >= inf) break;
            r[i] = min(r[i], r[i-j] + e[j]);
        }
    }
    if (r[1] < inf) r[1] = min(r[1], max(depth, 1));
}

char s[M];

int main() {
    int dd;
    scanf("%d", &dd);
    FOR(ii, 1, dd) {
        int n,k;
        scanf("%d %d",&n,&k);
        int w = 1;
        REP(a, A) t[0][a] = 0;
        c[0] = 0;
        REP(ij, n) {
            scanf("%s", s);
            int x = 0;
            for(int i = 0; s[i]; i++) {
                if(!t[x][s[i]-'a']) {
                    REP(a, A) t[w][a] = 0;
                    c[w] = 0;
                    t[x][s[i]-'a'] = w++;
                }
                x = t[x][s[i]-'a'];
            }
            c[x] = 1;
        }
        do_dp(0, k);
        printf("Case #%d: %d\n", ii, dp[0][k]);
    }
    return 0;
}

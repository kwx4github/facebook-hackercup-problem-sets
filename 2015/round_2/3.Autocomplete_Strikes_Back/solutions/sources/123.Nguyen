#include <bits/stdc++.h>
using namespace std;
const int oo = 27081993;

int n, k;
vector < pair <int,int> > nextId[4040];
vector <int> f[4040][111];
string words[4040];

int lcp(string &s, string &t)
{
  int res = 0;
  for (int i = 0; i < int(s.size()) && i < int(t.size()); i++)
    if (s[i] == t[i]) res++;
    else return res;
  return res;
}

int main()
{
  freopen("c.in", "r", stdin);
  freopen("c.out", "w", stdout);

  int test;  
  cin >> test;
  for (int idTest = 1; idTest <= test; idTest++)
  {
    cerr << idTest << endl;
    cin >> n >> k;
    for (int i = 0; i < n; i++) cin >> words[i];
    sort(words, words + n);
    
    for (int i = 0; i < n; i++)
    {
      nextId[i].clear();
      for (int j = i + 1; j < n; j++)
      {
        int k = lcp(words[i], words[j]);
        if (nextId[i].empty() || nextId[i].back().second != k)
          nextId[i].push_back(make_pair(j, k));
        if (!k) break;
      }
    }
    
    for (int i = 0; i < n; i++)
    {
      for (int j = 1; j <= k; j++) f[i][j] = vector <int>(words[i].size(), oo);
      for (int j = 0; j < int(words[i].size()); j++)
        f[i][1][j] = j + 1;
    }
    
    for (int i = 0; i < n; i++)
      for (int j = 1; j < k; j++)
        for (int c = 0; c < int(words[i].size()); c++)
          if (f[i][j][c] != oo)
            for (int p = 0; p < int(nextId[i].size()); p++)
            {
              int ii = nextId[i][p].first, lcp = nextId[i][p].second;
              int cost = f[i][j][c] + lcp + 1;
              if (c < lcp) cost += min(lcp, int(words[i].size()) - 1) - c;
              f[ii][j + 1][lcp] = min(f[ii][j + 1][lcp], cost);
            }
          
    int ans = oo;
    for (int i = 0; i < n; i++) 
      for (int c = 0; c < int(words[i].size()); c++)
        ans = min(ans, f[i][k][c]);
    cout << "Case #" << idTest << ": " << ans << endl;
  }
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
using namespace std;


struct node{
	int p[26], v;
	void init(){memset(this, 0, sizeof(node));}
}   T[20005];

int n, m, nd;
char s[20005];
int dp[20005][105];

void add(char s[]){
	int x = 0, c;
	for (int i=0; s[i]; i++){
		c = s[i] - 'a';
		if (!T[x].p[c]) T[x].p[c] = nd, T[nd++].init();
		x = T[x].p[c];
	}
	T[x].v = 1;
}

void dfs(int x){
	int y, f = 0;
	FOE(i,1,m) dp[x][i] = (1 << 29);
	dp[x][0] = 0;
	if (T[x].v) dp[x][1] = 0;
	FOR(i,0,26) if (y = T[x].p[i]){
		dfs(y);
		if (dp[y][1] == 0) f = 1;
		for (int k=m; k>=1; k--){
			for (int j=1; j<=k; j++) dp[x][k] = min(dp[x][k], dp[x][k-j] + dp[y][j] + j);
		}
	}
	if (f && x) dp[x][1] = 0;
	else if (f) dp[x][1] = 1;
}

int solve(){
	int ret = 0;
	nd = 1;
	T[0].init();
	scanf("%d%d", &n, &m);
	FOR(i,0,n){
		scanf("%s", s);
		add(s);
	}
	dfs(0);
	return dp[0][m];
}

int main(){
	int tc;
	scanf("%d", &tc);
	FOR(i,1,tc+1) printf("Case #%d: %d\n", i, solve()), fprintf(stderr, "done");
	return 0;
}


#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
int main()
{
	
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	
	int t;
	cin>>t;
	for (int z = 1; z <= t; z++)
	{
		int N;
		cin>>N;
		vector<int> a(N);
		for (int i = 0; i < N; i++)
		{
			cin>>a[i];
		}
		bool yes = false;
		int b = 0, e = N-1;
		deque<int> q1;
		q1.push_back(a[e]);
		e--;
		while (b <= e)
		{
			if (a[b] == q1.front() - 1)
			{
				q1.push_front(a[b]);
				b++;
			}
			else if (a[b] == q1.back() + 1)
			{
				q1.push_back(a[b]);
				b++;
			}
			else if (a[e] == q1.front() - 1)
			{
				q1.push_front(a[e]);
				e--;
			}
			else if (a[e] == q1.back() + 1)
			{
				q1.push_back(a[e]);
				e--;
			}
			else
			{
				break;
			}
		}
		if (b > e)
		{
			yes = true;
		}
		b = 0;
		e = N-1;
		deque<int> q2;
		q2.push_back(a[b]);
		b++;
		while (b <= e)
		{
			if (a[b] == q2.front() - 1)
			{
				q2.push_front(a[b]);
				b++;
			}
			else if (a[b] == q2.back() + 1)
			{
				q2.push_back(a[b]);
				b++;
			}
			else if (a[e] == q2.front() - 1)
			{
				q2.push_front(a[e]);
				e--;
			}
			else if (a[e] == q2.back() + 1)
			{
				q2.push_back(a[e]);
				e--;
			}
			else
			{
				break;
			}
		}
		if (b > e) yes = true;
		if (yes)
		{
			cout<<"Case #"<<z<<": yes"<<endl;
		}
		else
		{
			cout<<"Case #"<<z<<": no"<<endl;
		}
	}
}


int main()
{
	double f;
	
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	
	int t;
	cin>>t;
	for (int z = 1; z <= t; z++)
	{
		double P;
		cin>>P;
		f = 1-P;
		double res = 0.0;
		double cumF = 1;
		double past = 0.0;
		for (int i = 1; true; i++)
		{
			cumF *=f;
			double pw = pow(1-cumF, 20);
			double cur = pw-past;
			past += cur;
			res += i*cur;
			if (i > 1000000 && i*cur < 0.0000001) break;
		}
		cout<<fixed<<setprecision(5)<<"Case #"<<z<<": "<<res<<endl;
	}
}
*/

class Node
{
public:
	Node *child[26];
	int c;
	int fin;
	Node()
	{
		for (int i = 0; i < 26; i++) child[i] = NULL;
		c = 0;
		fin = 0;
	}
	void rem()
	{
		for (int i = 0; i < 26; i++) if (child[i] != NULL) {
		child[i]->rem();
		delete child[i];
		child[i] = NULL;
		}
	}
};

class Trie
{
public:
	Node *root;
	Trie()
	{
		root = new Node;
	}
	~Trie()
	{
		root->rem();
		delete root;
	}
	void insert(string &s)
	{
		Node *cur = root;
		for (int i = 0; i < s.size(); i++)
		{
			int in = s[i]-'a';
			cur->c++;
			if (cur->child[in] == NULL)
			{
				cur->child[in] = new Node;
				cur = cur->child[in];
			}
			else
			{
				cur = cur->child[in];
			}
		}
		cur->c++;
		cur->fin++;
	}
};
vector<int> val;
vector<int> val2;
vector<vector<int> > tr;
void bfs(Trie & trie)
{
	queue<Node *> q;
	q.push(trie.root);
	tr.push_back(vector<int> ());
	while (!q.empty())
	{
		Node * cur = q.front();
		q.pop();
		val.push_back(cur->c);
		val2.push_back(cur->fin);
		for (int i = 0; i < 26; i++)
		{
			if (cur->child[i] != NULL)
			{
				tr.push_back(vector<int>());
				tr[val.size() - 1].push_back(tr.size() - 1);
				q.push(cur->child[i]);
			}
		}
	}
}

vector<vector<vector<int> > > dp;

int sol(int i, int j, int k)
{
	if (j == 0 && k == 1) return 1;
	if (k == 0) return 0;
	if (j == tr[i].size() && k != 0) return 10000000;
	if (j == tr[i].size()) return 0;
	if (dp[i][j][k] != -1) return dp[i][j][k];
	if (j == 0)
	{
		int r;
		if (i == 0)	r= 0;
		else r = k;
		int mn = 1000000000;
		int oldk = k;
		k -= val2[i];
		for (int z = 0; z <= min(k, val[tr[i][j]]); z++)
		{
			mn = min(mn, r + sol(tr[i][j], 0, z) + sol(i, j+1, k-z));
		}
		return dp[i][j][oldk] = mn;
	}
	else
	{
	
		int mn = 1000000000;
		for (int z = 0; z <= min(k, val[tr[i][j]]); z++)
		{
			mn = min(mn, sol(tr[i][j], 0, z) + sol(i, j+1, k-z));
		}
		return dp[i][j][k] = mn;
	}
}

int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int t;
	cin>>t;
	for (int z = 1; z <= t; z++)
	{
		int n,k;
		cin>>n>>k;
		val.clear();
		val2.clear();
		tr.clear();
		dp.clear();
		Trie trie;
		string s;
		for (int i = 0; i < n; i++)
		{
			cin>>s;
			trie.insert(s);
		}
		bfs(trie);
		dp = vector<vector<vector<int> > > (tr.size());
	
		for (int i = 0; i< tr.size(); i++)
		{
			dp[i] = vector<vector<int> > (tr[i].size()+1, vector<int> (min(k, val[i] + 1)+2, -1));
		}
		
		int r = sol(0,0,k);
		cout<<"Case #"<<z<<": "<<r<<endl;
	}
}
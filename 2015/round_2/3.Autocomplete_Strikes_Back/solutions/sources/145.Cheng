#include <bits/stdc++.h>
//typedef unordered_map<int,int> umap
typedef long long int lnt;
typedef long double dou;
using namespace std;
//typedef struct{int x,y;}edge;
#define N 51400
#define K 111
int n,k;
int nx[N][26],spt;
int ed[N];
int newnode(){
	for(int i=0;i<26;i++)
		nx[spt][i]=0;
	ed[spt]=0;
	return spt++;
}
void add(int p,char*s){
	for(int i=0;s[i];i++){
		int a=s[i]-'a';
		if(nx[p][a]==0)
			nx[p][a]=newnode();
		p=nx[p][a];
	}
	ed[p]=1;
}

int t[K];
int dp[N][K];
void update(int aa,int bb,int ise){
	int*a=dp[aa];
	int*b=dp[bb];
	int ka=ed[aa];
	int kb=ed[bb];
	for(int i=0;i<=ka;i++)t[i]=a[i];
	for(int i=0;i<=ka;i++)a[i]=(1<<18);
	a[0]=0;
	for(int i=1;i<=ka;i++){
		for(int j=0;j<=i&&j<=kb;j++){
			a[i]=min(a[i],t[i-j]+b[j]);
		}
	}
}

char s[N];
int sol(){
	spt=1;
	int root=newnode();
	scanf("%d %d",&n,&k);
	for(int i=0;i<n;i++){
		scanf("%s",s);
		add(root,s);
	}
	for(int w=spt-1;w>=1;w--){
		int ise=ed[w];
		for(int i=0;i<26;i++){
			int t=nx[w][i];
			if(t)ed[w]+=ed[t];
		}
		ed[w]=min(ed[w],k);
		for(int i=0;i<=ed[w];i++){
			dp[w][i]=1<<30;
		}
		dp[w][0]=0;
		for(int i=0;i<26;i++){
			int t=nx[w][i];
			if(t)update(w,t,ise);
		}
		//////////
		dp[w][1]=1;
		if(ise){
			for(int i=ed[w];i>=2;i--){
				dp[w][i]=min(dp[w][i],dp[w][i-1]);
			}
		}
		for(int i=2;i<=ed[w];i++){
			dp[w][i]+=i;
		}
		////////
		/*
		for(int i=0;i<=k;i++){
			printf("%d ",dp[w][i]);
		}puts("");
		*/
	}
	/*
	int ans=1<<30;
	for(int i=0;i<=k;i++){
		ans=min(ans,dp[root][i]);
	}
	*/
	return dp[root][k]-k;
}
/*
100
4 4
tin
tiny
ginn
tilt
*/
int main(){
	freopen("autocomplete_strikes_back.txt","r",stdin);
	freopen("PCout.txt","w",stdout);
	int t;
	scanf("%d",&t);
	for(int i=1;i<=t;i++){
		printf("Case #%d: %d\n",i,sol());
	}
	return 0;
}

#include <bits/stdc++.h>

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
#define fored(i, a, b) for(int i = (int)(b); i >= (int)(a); --i)

#define all(v) (v).begin(), (v).end()
#define pb push_back

using namespace std;

typedef vector<int> vi;

const int N = 100500;

int z = 1;
vector<int> g[N];
vector<char> to[N];
bool is_end[N];
int next_dyn[N];
int len[N];

void add(const string& s) {
    int v = 0, i = 0;
    while(i<s.length()) {
        int j = 0;
        while( j < g[v].size() && to[v][j] != s[i] )
            ++j;
        if( j == g[v].size() ) {
            g[v].pb( z );
            to[v].pb( s[i] );
            len[z] = len[v] + 1;
            ++z;
        }
        v = g[v][j];
        ++i;
    }
    is_end[v] = true;
}

const int inf = 1e9 + 100500;

bool uin(int&a, int b) { if( b < a ) { a = b; return true; } return false; }

vi dfs_ans(int v, int k) {
    vi res(k+1, inf);
    res[0] = 0;
    fore(i, 1, k) res[i] = inf;
    for(int u: g[v]) {
        vi t = dfs_ans(u, k);
        fored(i, 0, k)
            fored(j, 0, k - i)
                uin(res[i + j], res[i] + t[j]);
    }
    if( is_end[v] )
        fored(i, 0, k-1)
            uin( res[i+1], res[i] + len[v] );
    else uin( res[1], len[v] );
    //cerr << "v=" << v << '\n';
    //fore(i, 0, k) cerr << res[i] << ' '; cerr << '\n';
    return res;
}

void solve() {
    int T;
    cin >> T;
    int test = T;
    //fore(test, 1, T) {
        cout << "Case #" << test << ": ";
        int n, k;
        cin >> n >> k;
        vector<string> s(n);
        forn(i, n) cin >> s[i];
        sort(all(s));
        for(auto& e: s) add(e);
        //dfs(0);
        cout << dfs_ans(0, k)[k] << '\n';
    //}
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    const string task = "autocomplete_strikes_back";
    //freopen((task + ".txt").c_str(), "r", stdin);
    //freopen((task + ".out").c_str(), "w", stdout);
    solve();
    return 0;
}

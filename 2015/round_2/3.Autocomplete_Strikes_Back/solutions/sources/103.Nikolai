#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <set>
#include <map>

using namespace std;

#define all(c) (c).begin(), (c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define y1 y1_gedjcdgfce
#define y0 y0_sadasdasdsa
#define ws ws_sadsadsada
#define left left_asdsadsadsadsa
#define right right_asdasdsadasda
#define hash hash_asdasdasdsad

#define eprintf(...) fprintf(stderr,__VA_ARGS__), fflush(stderr) 


#define TASK "task"

const int INF = (int)1e9;
const int MAXL = 20012;
const int MAXK = 100;

long long dp[MAXL][MAXK];
int go[MAXL][MAXK];
int tt[MAXL];
char buff[MAXL];

void solve(int test) {
	int n, k;
	scanf("%d%d", &n, &k);
	memset(go, -1, sizeof go);
	memset(tt, 0, sizeof tt);
	int ff = 1;
	for (int i = 0; i < n; i++) {
		scanf("%s", buff);
		int p = 0;
		for (int j = 0; buff[j]; j++) {
			int c = buff[j] - 'a';
			if (go[p][c] == -1) {
				go[p][c] = ff++;
			}
			p = go[p][c];
		}
		tt[p] = 1;
	}
	for (int i = ff - 1; i >= 0; i--) {
		for (int j = 0; j <= k; j++) dp[i][j] = INF;
		dp[i][0] = 0;
		if (tt[i]) {
			for (int j = k - 1; j >= 0; j--) dp[i][j + 1] = dp[i][j];
		}
		for (int c = 0; c < 26; c++) {
			if (go[i][c] == -1) continue;
			int p = go[i][c];
			for (int j = k - 1; j >= 0; j--) {
				for (int l = 0; j + l <= k; l++) {
					dp[i][j + l] = min(dp[i][j + l], dp[p][l] + l + dp[i][j]);
				}
			}
		}
		dp[i][1] = min(dp[i][1], 0LL);
	}
	printf("Case #%d: %lld\n", test, max(dp[0][k], 1LL)); 
}

int main(){
  int T;
	scanf("%d", &T);
	for (int test = 1; test <= T; test++) solve(test);
}

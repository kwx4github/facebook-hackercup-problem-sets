import Queue as Q


##q = Q.PriorityQueue()
##q.put((10,'ten'))
##q.put((1,'one'))
##q.put((5,'five'))
##while not q.empty():
##    print q.get()[1],

def add(root_node, strrr):
    current_dict = root_node
    for l in strrr:
        if l not in current_dict:
            current_dict[l] = [dict(),0]
        (current_dict[l])[1] = (current_dict[l])[1] + 1
        current_dict = (current_dict[l])[0]

def find_length(root_node, strrr):
    current_dict = root_node
    ans = 1
    for l in strrr[:-1]:
        if l not in current_dict: break
        ans = ans + 1
        current_dict = (current_dict[l])[0]
    return ans

def find_pref_len(root_node, strrr):
    current_dict = root_node
    ans = 1
    for l in strrr[:-1]:
        if (current_dict[l])[1] == 1: break
        ans = ans + 1
        current_dict = (current_dict[l])[0]
    return ans

def calc(file):
    n, k = map(int, file.readline().split())
    root_node = dict()
    total_in_node = []
    q = Q.PriorityQueue()
    for _ in range(n):
        strrr = list(str(file.readline().split()[0]))
        f_len = find_length(root_node, strrr)
        if(f_len == 1):
            add(root_node, strrr)
            total_in_node.append(strrr)
        else:
            q.put((f_len, strrr))
    if len(total_in_node) >= k:
        return k
    while len(total_in_node) < k:
        s_len, strrr = q.get()
        f_len = find_length(root_node, strrr)
        if(f_len == s_len):
            add(root_node, strrr)
            total_in_node.append(strrr)
        else:
            q.put((f_len, strrr))
    ans = 0
    for strrr in total_in_node:
        ans = ans + find_pref_len(root_node, strrr)
    return ans


def main():
    file = open("input.txt")
    file_o = open("output.txt", 'w')
    T = int(file.readline())
    for t in range(T):
        ans = calc(file)
        file_o.write( "Case #" + str(t+1) + ": " + str(ans) + "\n")
    file_o.close()

main()
#ifdef MG
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X &a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X &a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = acosl(ld(-1));

const int N = 20 * 1000 + 113;
char buf[N];

const int A = 26;

int n, k;
string a[N];

inline bool read()
{
	if (scanf("%d%d", &n, &k) != 2) return false;
	
	forn(i, n)
	{
		assert(scanf("%s", buf) == 1);
		a[i] = buf;
	}
	
	return true;
}

int szt;
int next[N][A];

int len[N];
int term[N];

inline int add(const string &s)
{
	int v = 0;
	len[v] = 0;
	forn(i, sz(s))
	{
		int c = int(s[i] - 'a');
		if (next[v][c] == -1)
			next[v][c] = szt++;
			
		v = next[v][c];
		len[v] = i + 1;
	}
	
	term[v] = true;
	return v;
}

int cnt[N];

inline int prepare(int v)
{
	forn(i, A)
		if (next[v][i] != -1)
			cnt[v] += prepare(next[v][i]);
			
	return cnt[v];
}

const int K = 100 + 13;

int z[N][K];
int z2[N][A][K];

inline int solve(int, int);

inline int solve2(int v, int idx, int k)
{
	if (idx == A) return k == 0 ? 0 : INF;

	int &ans = z2[v][idx][k];
	if (ans != -1) return ans;
	
	if (next[v][idx] == -1) return ans = solve2(v, idx + 1, k);
	
	ans = INF;
	
	forn(i, k + 1)
		ans = min(ans, solve(next[v][idx], i) + solve2(v, idx + 1, k - i));
	
	return ans;
}

inline int solve(int v, int k)
{
	int &ans = z[v][k];
	if (ans != -1) return ans;	

	if (k == 0) return ans = 0;	
	if (k == 1 && v != 0) return ans = len[v];
	if (k > cnt[v]) return ans = INF;

	ans = solve2(v, 0, k);
	if (k > 0 && term[v]) ans = min(ans, len[v] + solve2(v, 0, k - 1));
		
	return ans;
}

inline void solve(int test)
{
	printf("Case #%d: ", test + 1);

	szt = 1;
	memset(len, 0, sizeof len);
	memset(term, false, sizeof term);
	memset(cnt, 0, sizeof cnt);	
	memset(next, -1, sizeof next);
	
	forn(i, n) cnt[add(a[i])]++;
	
	prepare(0);
	
	memset(z, -1, sizeof z);
	memset(z2, -1, sizeof z2);
	
	cout << solve(0, k) << endl;
}

int main()
{
#ifdef MG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	
	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
	}
	
#ifdef MG
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

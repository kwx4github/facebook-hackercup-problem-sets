#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <cassert>

#define forn(i, n) for (int i = 0; i < (int)n; ++i)

using namespace std;

const int MAXN = 20010;
const int INF = 2000000000;
char buf[MAXN];
int to[MAXN][26];
int dp[MAXN][2 * 105];
int ndp[MAXN];
bool fl[MAXN];
int k;
int size;

int create() {
  fl[size] = false;
  memset(to[size], -1, 26 * sizeof(int));
  return size++;
}

void clear() {
  size = 0;
  create();
}

int go(int u, int dig) {
  if (to[u][dig] == -1) {
    to[u][dig] = create();
  }
  return to[u][dig];
}

void dfs(int u) {
  for (int i = 0; i <= k; ++i) {
    dp[u][i] = INF;
  }
  dp[u][0] = 0;
  forn(i, 26) {
    if (to[u][i] == -1) {
      continue;
    }
    int v = to[u][i];
    dfs(v);
    for (int i = 0; i <= k; ++i) {
      ndp[i] = dp[u][i];
    }
    for (int k1 = 1; k1 <= k; ++k1) {
      for (int j = k - k1; j >= 0; j--) if (dp[u][j] < INF && dp[v][k1] < INF) {
        int next = dp[u][j] + k1;
        if (k1 > 1) {
          next += dp[v][k1];
        }
        ndp[j + k1] = min(ndp[j + k1], next);
      }
    }
    for (int i = 0; i <= k; ++i) {
      dp[u][i] = ndp[i];
    }
  }
  if (fl[u]) {
    for (int j = k - 1; j >= 0; j--) if (dp[u][j] < INF) {
      dp[u][j + 1] = min(dp[u][j + 1], dp[u][j]);
    }
  }
}

void solve() {
  int n;
  scanf("%d %d", &n, &k);
  clear();
  forn(i, n) {
    scanf("%s", buf);
    int l = strlen(buf);
    int u = 0;
    forn(j, l) {
      u = go(u, buf[j] - 'a');      
    }
    fl[u] = true;    
  }
  dfs(0);
  cout << dp[0][k] << endl;  
}

int main() {
//  assert(freopen("input.txt", "r", stdin));
//  assert(freopen("output.txt", "w", stdout));  
  int tt;
  scanf("%d", &tt);
  for (int t = 1; t <= tt; ++t) {
    printf("Case #%d: ", t);
    solve();
  }
  return 0;
}
//Fruit of Light
//FoL CC
//Apple Strawberry

#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<set>
#include<iostream>
#include<queue>

using namespace std;

#define For(i, n) for(int i = 0; i<(n); ++i)
#define ForEach(it, i) for(typeof i.begin() it = i.begin(); it!=i.end(); ++it)
#define eps 1e-9
#define sig 26
#define INF 10234567

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

int n,k;

class Node {
public:
    Node* son[sig];
    int koniec, words;
    vi D;
    Node() {
        koniec = words = 0;
        D = vi(k+1, INF);
        For(i, sig) son[i] = NULL;
    }
    ~Node() {
        For(i, sig) if (son[i]==NULL) delete son[i];
    }
};

char buf[10047];

void insert(Node* v, int x) {
    if (buf[x] == 0) {
        v->koniec += 1;
        return;
    }
    if (v->son[buf[x]-'a'] == NULL) v->son[buf[x]-'a'] = new Node();
    insert(v->son[buf[x]-'a'], x+1);
    return;
}

void dfs(Node* v, int depth) {
    v->words = v->koniec;
    v->D[0] = 0;
    if (v->koniec) v->D[1] = depth;
    For(s, sig) if (v->son[s]!=NULL) {
        Node* w = v->son[s];
        dfs(w, depth+1);
        v->words += w->words;
        for(int j = k; j>=0; --j)
            For(i, min(w->words, j)+1) {
                v->D[j] = min(v->D[j], v->D[j-i] + w->D[i]);
            }
    }
    if (depth>0) v->D[1] = depth;
    v->words = min(k, v->words);
}


int extra(){
    scanf("%d %d",&n, &k);
    Node* root = new Node();
    For(i, n) {
        scanf("%s", buf);
        insert(root, 0);
    }
    dfs(root,0);
    printf("%d\n", root->D[k]);
    delete root;
}

int main(){
    int T;
    scanf("%d",&T);
    For(i,T){
        printf("Case #%d: ",i+1);
        extra();
    }
}

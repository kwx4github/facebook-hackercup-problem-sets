#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 200500;
typedef long long LL;
const LL MOD = 1000000000 + 7;


struct node{
	bool end;
	int id;
	int deep;
	map<char, node*> nx;
	node(int id):id(id),end(false){}
};

int D[20100][101][26][2];

int rec(node* cur, int k, char ch, bool used_end)
{
	if (k == 0) return 0;
	if (k == 1 && ch == 'a' && !used_end && cur->id != 0)
	{
		return cur->deep;
	}

	if (cur->end && !used_end)
	{
		if (D[cur->id][k - 1][ch - 'a'][true] == -1)
		{
			D[cur->id][k - 1][ch - 'a'][true] = rec(cur, k - 1, ch, true);
		}
		return cur->deep + D[cur->id][k - 1][ch - 'a'][true];
	}

	int result = 1000000000;
	for(int i = ch; i <= 'z'; ++i)
	{
		if (!cur->nx.count(i)) continue;
		for(int j = 1; j <= k; ++j)
		{
			auto nxx = cur->nx[i];
			if (D[nxx->id][j][0][false] == -1)
			{
				D[nxx->id][j][0][false] = rec(nxx, j, 'a', false);
			}

			if (i != 'z'){
				
				if (D[cur->id][k - j][i + 1 - 'a'][used_end] == -1)
				{
					D[cur->id][k - j][i + 1 - 'a'][used_end] = rec(cur, k - j, i + 1, used_end);
				}

				result = min(D[nxx->id][j][0][false] + D[cur->id][k - j][i + 1 - 'a'][used_end], result);
			}
			else
			{
				if (j == k) result = min(D[nxx->id][j][0][false], result);
			}
		}
	}


	return D[cur->id][k][ch - 'a'][used_end] = result;
}

int main()
{
//#ifdef _DEBUG || _RELEASE
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
//#else
	//freopen("html.in", "r", stdin); freopen("html.out", "w", stdout);
//#endif
	int T;
	scanf("%d", &T);
	
	forn(caze, 0, T)
	{
		mems(D, -1);
		int idx = 0;
		int n;
		int k;
		cin>>n>>k;
		auto root = new node(idx++);
		root->deep = 0;
		forn(i, 0, n)
		{
			string tmp;
			cin>>tmp;
			auto cur = root;
			forn(j, 0, tmp.size())
			{
				if (!cur->nx.count(tmp[j]))
				{
					cur->nx[tmp[j]] = new node(idx++);
					cur->nx[tmp[j]]->deep = j + 1;
				}

				cur = cur->nx[tmp[j]];
			}

			cur->end = true;
		}

		int ans = rec(root, k, 'a', false);
		cout<<"Case #"<<caze + 1<<": "<<ans<<endl;
	}
	return 0;
}
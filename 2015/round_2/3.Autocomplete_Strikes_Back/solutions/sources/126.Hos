// iostream is too mainstream
#include <cstdio>
// bitch please
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <iomanip>
#include <time.h>
#define dibs reserve
#define OVER9000 1034567890
#define ALL_THE(CAKE,LIE) for(auto LIE =CAKE.begin(); LIE != CAKE.end(); LIE++)
#define tisic 47
#define soclose 1e-9
#define chocolate win
// so much chocolate
#define patkan 9
#define ff first
#define ss second
#define abs(x) ((x < 0)?-(x):x)
#define uint unsigned int
#define dbl long double
using namespace std;
// mylittledoge

struct trie {
	vector<int> son[26];
	vector<int> poc,ends,dep;
	vector< vector<int> > ans;
	trie(int N, int K) {
		for(int i =0; i < 26; i++) {
			son[i].dibs(N);
			son[i].resize(1,-1);}
		ans.resize(N,vector<int>(K+1,OVER9000));
		poc.dibs(N);
		poc.push_back(0);
		ends.dibs(N);
		ends.push_back(0);
		dep.dibs(N);
		dep.push_back(0);}

	void put(string &s) {
		int L =s.length(), akt =0;
		for(int i =0; i < L; i++) {
			poc[akt]++;
			if(son[s[i]-'a'][akt] == -1) {
				son[s[i]-'a'][akt] =son[0].size();
				for(int j =0; j < 26; j++) son[j].push_back(-1);
				dep.push_back(dep[akt]+1);
				ends.push_back(0);
				poc.push_back(0);}
			akt =son[s[i]-'a'][akt];}
		poc[akt]++;
		ends[akt]++;}

	void solve(int R) {
		int K =ans[0].size()-1;
		ans[R][0] =0;
		for(int i =0; i < 26; i++) if(son[i][R] != -1) {
			int s =son[i][R];
			solve(s);
			for(int j =K; j >= 0; j--) 
				for(int l =j; l >= 0; l--) ans[R][j] =min(ans[R][j],ans[s][l]+ans[R][j-l]);
			}
		if(ends[R] > 0) for(int j =K-1; j >= 0; j--) ans[R][j+1] =min(ans[R][j+1],ans[R][j]+dep[R]);
		if(R > 0) ans[R][1] =min(ans[R][1],dep[R]);}
	};

int main() {
	cin.sync_with_stdio(0);
	cin.tie(0);
	int T;
	cin >> T;

	for(int t =0; t < T; t++) {
		cout << "Case #" << t+1 << ": ";
		int N,K;
		cin >> N >> K;
		trie X(30000,K);
		for(int i =0; i < N; i++) {
			string s;
			cin >> s;
			X.put(s);}
		X.solve(0);
		cout << X.ans[0][K] << "\n";}
	return 0;}

// look at my code
// my code is amazing

#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 20 * 1000 + 13;
const int A = 26;
const int K = 100 + 3;

int n, k;
char buf[N];
int t[N][A];
int szt;
bool term[N];
int d[N][K];
int cnt[N], next[N];

void dfs (int v)
{
	cnt[v] = (term[v] ? 1 : 0);
	
	int last = -1;
	ford(i, A)
		if (t[v][i] != -1)
		{
			next[t[v][i]] = last;
			last = t[v][i];
			dfs(t[v][i]);
			cnt[v] += cnt[t[v][i]];
		}
}

void add ()
{
	int len = strlen(buf);
	int v = 0;
	forn(i, len)
	{
		int c = buf[i] - 'a';
		if (t[v][c] == -1)
		{
			t[v][c] = szt;
			memset(t[szt], -1, sizeof(t[szt]));
			term[szt] = false;
			szt++;
		}
		v = t[v][c];
	}
	term[v] = true;
}

inline bool read()
{
	if (scanf("%d%d", &n, &k) != 2) return false;
	szt = 1;
	memset(t[0], -1, sizeof(t[0]));
	term[0] = false;
	forn(i, n)
	{
		assert(scanf("%s", buf) == 1);
		//int len = 10; forn(j, len) buf[j] = char(rand() % 26 + 'a'); buf[len] = 0;
		add();
	}
	return true;
}

int d2[N][K];

int calc (int, int);

int calc2 (int v, int k)
{
	//cerr << v << ' ' << k << endl;
	if (k <= 0) return 0;
	if (v < 0) return k == 0 ? 0 : INF;
	
	int& ans = d2[v][k];
	if (ans != -1) return ans;
	
	ans = INF;
	
	forn(cur, min(k, cnt[v]) + 1)
	{
		int nv = calc(v, cur) + cur + calc2(next[v], k - cur);
		ans = min(ans, nv);
	}
	
	return ans;
}

int calc (int v, int k)
{
	if (k <= 1) return 0;
	
	int& ans = d[v][k];
	if (ans != -1) return ans;
	
	ans = INF;
	
	vector<int> tos;
	forn(i, A) if (t[v][i] != -1) tos.pb(t[v][i]);
	
	int need = k - (term[v] ? 1 : 0);
	
	//cerr << "tos = " << sz(tos) << ", v = " << v << ' ' << k << endl;
	
	if (sz(tos) == 1)
		return ans = calc(tos[0], need) + need;
	
	return ans = calc2(tos[0], need);
}

inline void solve(int test)
{
	printf("Case #%d: ", test);
	forn(i, szt) forn(j, k + 1) d[i][j] = d2[i][j] = -1;
	dfs(0);
	//forn(i, szt) cerr << i << ' ' << cnt[i] << endl;
	printf("%d\n", max(1, calc(0, k)));
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
#ifdef SU2_PROJ
		cerr << "=== test = " << test + 1 << ", time = " << clock() << " ===" << endl;
#endif
		assert(read());
		solve(test + 1);
	}
	
#ifdef SU2_PROJ
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

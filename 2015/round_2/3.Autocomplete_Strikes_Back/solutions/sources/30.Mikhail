import java.io.*;
import java.util.*;

public class AutocompleteStrikesBack_v2 {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	private static final int INF = Integer.MAX_VALUE / 3;

	static class Node {
		static final int ALPH = 26;

		static int decode(char c) {
			int ret = (int) (c - 'a');
			if (ret < 0 || ret >= ALPH) {
				throw new AssertionError("Wrong character");
			}
			return ret;
		}

		Node[] to;
		int[] dp;
		int cnt;
		boolean word;

		public Node() {
			to = new Node[ALPH];
		}

		void add(int i, String s) {
			cnt++;
			if (i == s.length()) {
				word = true;
				return;
			}
			int c = decode(s.charAt(i));
			if (to[c] == null) {
				to[c] = new Node();
			}
			to[c].add(i + 1, s);
		}
	}

	void dfs(Node v, int k, boolean isRoot) {
		v.dp = new int[k + 1];
		Arrays.fill(v.dp, INF);
		v.dp[0] = 0;
		for (int z = 0; z < Node.ALPH; z++) {
			Node to = v.to[z];
			if (to == null) {
				continue;
			}
			dfs(to, k, false);
			for (int i = k; i >= 0; i--) {
				if (v.dp[i] >= INF) {
					continue;
				}
				for (int j = k - i; j >= 0; j--) {
					if (to.dp[j] >= INF) {
						continue;
					}
					v.dp[i + j] = Math.min(v.dp[i + j], v.dp[i] + to.dp[j]);
				}
			}
		}
		if (isRoot) {
			return;
		}
		if (v.word) {
			for (int i = k; i >= 2; i--) {
				v.dp[i] = Math.min(v.dp[i], v.dp[i - 1]);
			}
			v.dp[1] = Math.min(v.dp[1], v.dp[0] + 1);
		}
		for (int i = 2; i <= k; i++) {
			v.dp[i] += i;
		}
//		System.err.println(Arrays.toString(v.dp));
	}

	void solve() throws IOException {
		int n = nextInt();
		int k = nextInt();
		String[] a = new String[n];
		Node root = new Node();
		for (int i = 0; i < n; i++) {
			a[i] = nextToken();
			root.add(0, a[i]);
		}
		dfs(root, k, true);
		out.println(root.dp[k]);
	}

	AutocompleteStrikesBack_v2() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "autocomplete_strikes_back";
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new AutocompleteStrikesBack_v2();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
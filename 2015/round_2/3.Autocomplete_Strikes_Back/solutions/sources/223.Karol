#include <bits/stdc++.h>
using namespace std;

struct Node {
	Node(): ile(0) {}
	map<char, Node*> sons;
	int ile;
};

const long long INF = 1000000000;

struct Solver {
	Node* root;
	Solver(): root(new Node()) { }

	void add(Node& n, unsigned l, string const& s) {
		if(s.size() == l) {
			n.ile ++;
			return;
		}
		if(n.sons[s[l]] == nullptr) n.sons[s[l]] = new Node;
		add(*n.sons[s[l]], l+1, s);
	}

	vector<long long> dp(Node& n, int k) {
		vector<long long> res(k+1, INF);
		for(int i=0; i<=n.ile;i++) res[i] = 0;

		for(auto p : n.sons) {
			auto resm = dp(*p.second, k);
//			cout << p.first;
//			for(int i=0; i<=k; i++) cout << " " << resm[i];
//			cout << endl;
			vector<long long> res2(k+1, INF);
			for(int i=0; i<=k;i++) {
				for(int j=0;j+i<=k; j++) {
					res2[j+i] = min(res2[j+i], i + resm[i] + res[j]);
				}
			}
			res=res2;
		}

		res[1] = max(0LL, res[1]-1);

		return res;
	}

	void solve() {
		int n, k;
		cin >> n >> k;

		for(int i=1; i<=n; i++) {
			string s;
			cin >> s;
			add(*root, 0, s);
		}

		auto res = dp(*root, k);

		cout << res[k] << endl;
	}
};

int main() {
	ios_base::sync_with_stdio(false);

	int t;
	cin >> t;

	for(int i=1; i<=t; i++) {
		cout << "Case #" << i << ": ";
		Solver().solve();
	}
}

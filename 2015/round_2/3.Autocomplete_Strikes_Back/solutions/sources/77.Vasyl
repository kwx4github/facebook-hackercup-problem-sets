#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define INF (1 << 20)
#define MAX (30 << 10)

char buf[1 << 20];
string S[4 << 10];
int R[MAX][128];
int gK, gCnt;

int f(int level, int a, int b)
{
	int ret = gCnt;
	++gCnt;

	int i, j, k;
	FOR(i, 0, gK)
		R[ret][i] = INF;

	R[ret][0] = 0;
	
	if (a >= b)
		return ret;

	if (a + 1 == b)
	{
		R[ret][1] = level;
		return ret;
	}

	if (level == SIZE(S[a]))
	{
		R[ret][1] = level;
		++a;
	}

	int prev = a;
	FOR(i, a + 1, b + 1)
		if (i == b || S[prev][level] != S[i][level])
		{
			int pos = f(level + 1, prev, i);

			RFOR(j, gK, 0)
			{
				int limit = min(i - prev, j) + 1;
				FOR(k, 1, limit)
					R[ret][j] = min(R[ret][j], R[ret][j - k] + R[pos][k]);
			}
						
			prev = i;
		}

	R[ret][1] = min(R[ret][1], level);

	return ret;
}

int SolveTest(int test)
{
	int n, k;
	scanf("%d%d", &n, &k);
	gCnt = 0;
	gK = k + 1;

	int i;
	FOR(i, 0, n)
	{
		scanf("%s", buf);

//		int len = 20000 / n;
//		int j;
//		FOR(j, 0, len)
//			buf[j] = 'a' + rand() % 20;

//		buf[len] = 0;

		S[i] = buf;
	}

	sort(S, S + n);

	f(0, 0, n);
	printf("Case #%d: %d\n", test + 1, R[0][k]);
	return 0;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

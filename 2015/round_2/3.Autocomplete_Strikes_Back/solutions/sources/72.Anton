#pragma comment(linker, "/STACK:60777216")  

#include <cassert>
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<complex>
#include<vector>
#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdlib>
#include<memory.h>
#include<ctime>
#include<bitset>
#include<fstream>
#include<queue>
#include<stack>

using namespace std;

typedef long double ld;

typedef long long ll;
typedef pair<int,int>	pii;
typedef pair<ld,ld>	pdd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef pair<ll,ll> pl;

#define FOR(i,a,b)		for(int i=(a);i<(b);i++)
#define REP(i,n)		FOR(i,0,n)
#define SORT(v)			sort((v).begin(),(v).end())
#define UN(v)			SORT(v),(v).erase(unique((v).begin(),(v).end()),(v).end())
#define CL(a,b)			memset(a,b,sizeof a)
#define pb				push_back

int n,k;
string s[4444];
map<string,int> w;
set<string> e;

map<string,int> d[111];

int solve(string pref, int number){
	if(number==0) return 0;
	if(!w.count(pref)) return 1000000;
	if(w[pref]<number) return 1000000;
	if(number==1) return max((int)pref.size(),1);
	if(d[number].count(pref)) return d[number][pref];	
	vi v(number+1,1000000);
	v[0]=0;
	vi t(number+1);
	if(e.count(pref)){
		v[1]=pref.size();
	}
	REP(i,26){
		pref.pb('a'+i);
		REP(j,number+1)t[j]=solve(pref,j);
		for(int k=number;k>=0;k--){
			FOR(j,1,number-k+1){
				v[k+j]=min(v[k+j], v[k]+t[j]);
			}
		}
		pref.pop_back();
	}
	return d[number][pref]=v.back();
}

int main(){	
#ifdef LocalHost
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif

	int tc;
	cin>>tc;
	REP(TC,tc){
		cin>>n>>k;
		w.clear();
		REP(i,111)d[i].clear();
		e.clear();
		REP(i,n){
			cin>>s[i];
			e.insert(s[i]);
			REP(j,s[i].size()+1){
				w[s[i].substr(0,j)]++;
			}
		}
		int res=solve("",k);
		printf("Case #%d: %d\n",TC+1,res);
	}

#ifdef LocalHost
//	printf("TIME: %.3lf\n",ld(clock())/CLOCKS_PER_SEC);
#endif
	return 0;
}
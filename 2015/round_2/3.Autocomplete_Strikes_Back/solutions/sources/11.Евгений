import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class C {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static class Node {
		boolean hasNext = false;
		char nextChar;
		Node nextNode;
		Map<Character, Node> nextMap;
		
//		int count = 0;
		boolean endHere = false;
		
		Node get(char c) {
			if (!hasNext) {
				hasNext = true;
				nextChar = c;
				nextNode = new Node();
				nextMap = null;
				return nextNode;
			}
			if (nextMap == null) {
				if (nextChar == c) {
					return nextNode;
				}
				nextMap = new HashMap<>();
				nextMap.put(nextChar, nextNode);
			}
			if (!nextMap.containsKey(c)) {
				nextMap.put(c, new Node());
			}
			return nextMap.get(c);
		}
		
		long[] solve(int k) {
			if (!hasNext) {
				return new long[endHere ? 2 : 1];
			}
			if (nextMap == null) {
				long nextRes[] = nextNode.solve(k);
				if (endHere) {
					long res[] = new long[min(nextRes.length, k) + 1];
					for (int i = 2; i < res.length; i++) {
						res[i] = nextRes[i - 1] + (i - 1);
					}
					return res;
				} else {
					for (int i = 2; i < nextRes.length; i++) {
						nextRes[i] += i;
					}
					return nextRes;
				}
			}
			long res[] = new long[endHere ? 2 : 1];
			for (Node nextNode: nextMap.values()) {
				long nextRes[] = nextNode.solve(k);
				long newRes[] = new long[min(res.length + nextRes.length - 1, k + 1)];
				for (int i = 1; i < newRes.length; i++) {
					newRes[i] = Long.MAX_VALUE;
					for (int j = max(i - nextRes.length + 1, 0); j <= min(res.length - 1, i); j++) {
						newRes[i] = min(newRes[i], res[j] + nextRes[i - j] + i - j);
					}
					if (newRes[i] == Long.MAX_VALUE) {
						throw new AssertionError();
					}
				}
//				System.err.println(Arrays.toString(res) + " + " + Arrays.toString(nextRes) + " = " + Arrays.toString(newRes));
				res = newRes;
			}
			res[1] = 0;
			return res;
		}
	}
	
	static void solve() throws Exception {
		int n = nextInt();
		int k = nextInt();
		Node root = new Node();
		for (int i = 0; i < n; i++) {
			String w = in.readLine();
			Node cur = root;
			for (int j = 0; j < w.length(); j++) {
				cur = cur.get(w.charAt(j));
			}
			cur.endHere = true;
		}
		long ans = k == 1 ? 1 : root.solve(k)[k];
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
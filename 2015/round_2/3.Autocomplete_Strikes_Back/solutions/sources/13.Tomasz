#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

struct node {
    map<char, node*> out;
    int cnt;

    node(): out(), cnt(0) {}
};
const int INF = 1e9;

VI go(node* cur, int k) {
    VI res(k+1, INF);
    REP(i, cur->cnt+1) res[i] = 0;
    for (auto p : cur->out) {
        node* ch = p.Y;
        VI C = go(ch, k);
        VI prv = res;
        res = VI(k+1,INF);
        FOR(a, 0, k) FOR(b, 0, k-a) {
            mini(res[a+b], C[a]+prv[b]);
        }
    }
    FOR(i, 2, k) res[i] += i-cur->cnt;
    //debug(s);
    //debugv(res);
    return res;
}


void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n,k;
    node* root = new node();
    cin >> n >> k;
    REP(i,n) {
        string s;
        cin >> s;
        node* cur = root;
        for (char c : s) {
            if (cur->out.find(c) == cur->out.end()) cur->out[c] = new node();
            cur = cur->out[c];
        }
        cur->cnt++;
        assert(cur->cnt == 1);
    }
    if (k == 1) cout << 1 << endl;
    else {
        VI res = go(root,k);
        cout << res[k] << endl;
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


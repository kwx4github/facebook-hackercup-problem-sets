#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdio>
#include<vector>
#include<cassert>
#include<cstring>
#include<cstdlib>
#include<utility>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<functional>
#define REP(x,y,z) for(int x=y;x<=z;x++)
#define FORD(x,y,z) for(int x=y;x>=z;x--)
#define MSET(x,y) memset(x,y,sizeof(x))
#define FOR(x,y) for(__typeof(y.begin()) x=y.begin();x!=y.end();x++)
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ size()
#define M 20005
#define INF 1000000000
using namespace std;
typedef long long LL;
int t,n,m;
int id,nxt[M][26],cnt[M],dp[M][105];
char buf[M];
void add(int cur,char *c)
{
	if(*c == 0)
	{
		cnt[cur]++;
		return;
	}

	int cc = *c - 'a';
	
	if(nxt[cur][cc] == 0) nxt[cur][cc] = ++id;
	add(nxt[cur][cc], c+1);
}
void dfs(int cur,int dep)
{
	REP(i,0,25) if(nxt[cur][i]) dfs(nxt[cur][i], dep+1);
	
	MSET(dp[cur], -1);
	dp[cur][0] = 0;
	if(cnt[cur]) dp[cur][1] = dep;

	int x;
	REP(i,0,25) if(nxt[cur][i])
	{
		x = nxt[cur][i];

		FORD(j,m,1)
		{
			REP(k,1,j) if(dp[x][k] != -1)
			{
				if( dp[cur][j-k]!=-1 )
				{
					if( dp[cur][j] == -1 ) dp[cur][j] = INF;
					dp[cur][j] = min(dp[cur][j], dp[cur][j-k] + dp[x][k]);
				}
			}
		}
	}

	dp[cur][1] = min(dp[cur][1], dep);
}
int main()
{
	scanf("%d",&t);
	REP(tt,1,t)
	{
		MSET(cnt, 0);
		MSET(nxt, 0);
		scanf("%d %d",&n,&m);

		id = 1;
		REP(i,1,n)
		{
			scanf("%s",buf);
			add(1, buf);
		}

		dfs(1, 0);
		printf("Case #%d: %d\n",tt , dp[1][m]);
	}
	return 0;
}


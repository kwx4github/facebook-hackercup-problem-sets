#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int MAX = 20000 + 10;
const int INF = 10000007;
char arr[MAX];
int n, k;
struct Node{
	int cnt, dp[110], danz, dep;
	bool have;
	Node *ptr[26];
	Node(int _d){
		cnt = danz = 0;
		dep = _d;
		memset(ptr, 0, sizeof(ptr));
		dp[0] = 0;
		for(int i = 1 ; i <= 100 ; i++)
			dp[i] = INF;
		have = false;
	}
	~Node(){
		for(int i = 0 ; i < 26 ; i++)
			if(ptr[i]) delete ptr[i];
	}
	void insert (char *T, int n, int len){
		cnt++;
		if(n == len){
			have = true;
			return;
		}
		if(ptr[T[n]-'a'] == NULL) ptr[T[n]-'a'] = new Node(dep+1);
		ptr[T[n]-'a'] -> insert(T, n+1, len);
	}
	void dodp(){
		if(have) dp[1] = dep;
		for(int i = 0 ; i < 26 ; i++){
			if(ptr[i]){
				ptr[i] -> dodp();
				int tmp[110] = {0};
				for(int j = min(cnt,k) ; j > 0 ; j--)
					tmp[j] = INF;
				for(int j = min(cnt,k) ; j >= 0 ; j--){
					for(int p = j ; p >= 0 ; p--){
						tmp[j] = min(tmp[j], dp[j-p] + ptr[i] -> dp[p]);
					}
				}
				for(int j = min(cnt, k) ; j > 0 ; j--)
					dp[j] = min(dp[j], tmp[j]);
			}
		}
		dp[1] = dep;
	}
}*root;
int main(){
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);
	int TN;
	scanf("%d", &TN);
	for(int casen = 1 ; casen <= TN ; casen++){
		root = new Node(0);
		scanf("%d %d", &n, &k);
		for(int i = 0 ; i < n ; i++){
			scanf("%s", arr);
			int len = strlen(arr);
			root -> insert(arr, 0, len);
		}
		root -> dodp();
		printf("Case #%d: ", casen);
		if(k==1) puts("1");
		else printf("%d\n", root->dp[k]);
		delete root;
	}
	return 0;
}

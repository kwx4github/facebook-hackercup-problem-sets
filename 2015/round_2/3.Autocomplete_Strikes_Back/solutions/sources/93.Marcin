#include <vector>
#include <iostream>
#include <sstream>
#include <math.h>
#include <sys/time.h>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cstring>
#include <fstream>
#include <set>
#include <map>

#define FOR(i,a,b)  for(__typeof(b) i=(a);i<(b);++i)
#define REP(i,a)    FOR(i,0,a)
#define FOREACH(x,c)   for(__typeof(c.begin()) x=c.begin();x != c.end(); x++)
#define ALL(c)      c.begin(),c.end()
#define CLEAR(c)    memset(c,0,sizeof(c))
#define SIZE(c) (int) ((c).size())

#define PB          push_back
#define MP          make_pair
#define X           first
#define Y           second

#define ULL         unsigned long long
#define LL          long long
#define LD          long double
#define II         pair<int, int>
#define DD         pair<double, double>

#define VC	    vector
#define VI          VC<int>
#define VVI         VC<VI>
#define VD          VC<double>
#define VS          VC<string>
#define VII         VC<II>
#define VDD         VC<DD>

#define DB(a)       cerr << #a << ": " << a << endl;

using namespace std;

template<class T> void print(VC < T > v) {cerr << "[";if (SIZE(v) != 0) cerr << v[0]; FOR(i, 1, SIZE(v)) cerr << "," << v[i]; cerr << "]\n";}
template<class T> string i2s(T &x) { ostringstream o; o << x; return o.str(); }
VS split(string &s, char c = ' ') {VS all; int p = 0, np; while (np = s.find(c, p), np >= 0) {if (np != p) all.PB(s.substr(p, np - p)); p = np + 1;} if (p < SIZE(s)) all.PB(s.substr(p)); return all;}

struct Node{
    map<char,int> next;
    int d;
    int cnt = 0;
    int end = 0;
};

vector<Node> v;

#define INFTY 200000

int solve(){
    v.clear();
    v.PB(Node());
    v[0].d = 0;
    int n, m;
    cin >> n >> m;
    string s;
    REP(foo,n){
        cin >> s;
        int idx=0;
        REP(i,SIZE(s)){
            if (v[idx].next.count(s[i]) == 0){
                v.PB(Node());
                v.back().d = v[idx].d + 1;
                v[idx].next[s[i]] = SIZE(v)-1;
            }
            idx = v[idx].next[s[i]];
            v[idx].cnt++;
            if (i == SIZE(s)-1)
                v[idx].end = 1;
        } 
    }
    
    VVI best(SIZE(v),VI(m+1,INFTY));
    REP(idx,SIZE(v)) best[idx][0] = 0;
    for(int idx=SIZE(v)-1; idx >= 0; idx--){
        if (v[idx].cnt == 1){
            best[idx][1] = v[idx].d; 
            continue;
        }
        if (v[idx].end == 1)
            best[idx][1] = v[idx].d;
        for(auto &s : v[idx].next){
            int son = s.Y;
            for(int i=m; i >= 1; i--)
                for(int j=0; j <= i && best[son][j] < INFTY; j++)
                    best[idx][i] = min(best[idx][i],best[idx][i-j]+best[son][j]);
        }
        best[idx][1] = v[idx].d;
    }
    return best[0][m];
}

int main(int argc, char *argv[]){
    int T;
    cin >> T;
    REP(t,T)
        cout << "Case #" << t+1 << ": " << solve() << endl;
    return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#define MAXN 20005
#define MAXK 105
#define MYINF 1000000000

using namespace std;

struct node
{
	int n[26];
	char word;
};

void clearNode (struct node *a)
{
	for (int i = 0; i < 26; i++) a->n[i] = -1;
	a->word = 0;
}

static struct node a[MAXN];
static int dp[MAXN][MAXK];
int K;
static int temp[MAXK];

void DFS (int point)
{
	int i;
	for (i = 0; i < 26; i++)
	{
		if (a[point].n[i] != -1) DFS(a[point].n[i]);
	}
	dp[point][0] = 0;
	for (i = 1; i <= K; i++) dp[point][i] = MYINF;
	for (i = 0; i < 26; i++)
	{
		if (a[point].n[i] != -1)
		{
			int j, k;
			for (j = 0; j <= K; j++) temp[j] = MYINF;
			for (j = 0; j <= K; j++)
			{
				if (dp[point][j] < MYINF)
				{
					for (k = j; k <= K; k++)
					{
						if (dp[a[point].n[i]][k-j] < MYINF)
						{
							int newval = dp[point][j] + dp[a[point].n[i]][k-j];
							if (newval < temp[k]) temp[k] = newval;
						}
					}
				}
			}
			for (j = 0; j <= K; j++) dp[point][j] = temp[j];
		}
	}
	for (i = 0; i <= K; i++)
	{
		if (dp[point][i] < MYINF) dp[point][i] += i;
	}
	if (a[point].word)
	{
		for (i = K; i > 0; i--)
		{
			if (dp[point][i-1] < dp[point][i]) dp[point][i] = dp[point][i-1];
		}
	}
	dp[point][0] = 0;
	if (dp[point][1] < MYINF) dp[point][1] = 0;
}

int main ()
{
	int T, iT;
	scanf("%d", &T);
	static char s[MAXN];
	for (iT = 0; iT < T; iT++)
	{
		int N;
		scanf("%d %d",&N,&K);
		int ac = 1;
		clearNode(&(a[0]));
		for (int i = 0; i < N; i++)
		{
			scanf("\n%s",s);
			int len = strlen(s);
			int point = 0;
			for (int j = 0; j < len; j++)
			{
				int next = (int)(s[j] - 'a');
				if (a[point].n[next] == -1)
				{
					a[point].n[next] = ac;
					clearNode(&(a[ac]));
					point = ac;
					ac++;
				}
				else
				{
					point = a[point].n[next];
				}
			}
			a[point].word = 1;
		}
		printf("Case #%d: ", iT+1);
		if (K > 1)
		{
			DFS(0);
			printf("%d\n",dp[0][K]);
		}
		else printf("1\n");
	}
	return 0;
}
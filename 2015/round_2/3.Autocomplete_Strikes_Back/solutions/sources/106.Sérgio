#include <bits/stdc++.h>





using namespace std;



#define fr(i,a,b) for(int i=a;i<b;++i)
typedef long long ll;
typedef double ld;
const int oo = 0x3f3f3f3f;
#define NN 30000

int tr[NN][26];
int qtd[NN];
int fim[NN];
int ant[NN];
int lst[NN];
int prof[NN];
int dp[NN][101];
int mk[NN][101];
int cn;
int nt, t, n, k;
char st[NN];

void add(char st[], int pos, int tpos){
	if(st[pos] == '\0'){
		fim[tpos]++;
		return;
	}
	if(tr[tpos][st[pos]-'a'] == -1){
		tr[tpos][st[pos]-'a'] = nt++;
	}
	add(st, pos+1, tr[tpos][st[pos]-'a']);
}

void findant(int no, int p){
	int an = -1;
	qtd[no] = fim[no];
	prof[no] = p;
	lst[no] = -1;
	ant[no] = -1;
	fr(i,0,26){
		if(tr[no][i] != -1) {
			lst[no] = tr[no][i];
			findant(tr[no][i], p+1);
			qtd[no] += qtd[tr[no][i]];
			ant[tr[no][i]] = an;
			an = tr[no][i];
		}
	}
	//printf("%d %d %d %d %d\n",no,ant[no],lst[no], qtd[no], prof[no]);
}


int go(int no, int qt){
	if (qt == 0) return 0;
	if (no == -1){
		return oo;
	}
	//printf("%d %d\n", no, qt);
	if (mk[no][qt] == cn) return dp[no][qt];
	mk[no][qt] = cn;
	dp[no][qt] = oo;
	if (fim[no]) {
		fr(i, 0, qt) {
			int r = qt-i-1;
			dp[no][qt] = min(dp[no][qt], go(ant[no], i) + go(lst[no], r) + prof[no]);
		}
	}
	fr(i, 0, qt+1) {
		int r = qt-i;
		dp[no][qt] = min(dp[no][qt], go(ant[no], i) + go(lst[no], r));
	}
	if (no) {
		dp[no][qt] = min(dp[no][qt], go(ant[no], qt-1) + prof[no]);
	}
	return dp[no][qt];
}



int main(){
	scanf("%d",&t);
	fr(cas,1,t+1){
		cerr << cas << endl;
		cn = cas;
		memset(tr, -1, sizeof tr);
		memset(qtd, 0, sizeof qtd);
		memset(fim, 0, sizeof fim);
		memset(ant, 0, sizeof ant);
		memset(lst, 0, sizeof lst);
		memset(prof, 0, sizeof prof);
		nt = 1;
		scanf("%d %d",&n,&k);
		fr(i,0,n){
			scanf("%s", st);
			add(st, 0, 0);
		}
		findant(0, 0);
		//printf(">>%d %d %d %d\n", go(7, 1), go(3, 3), ant[3], ant[4]);
		printf("Case #%d: %d\n", cas, go(0, k));
	}
	return 0;
}






























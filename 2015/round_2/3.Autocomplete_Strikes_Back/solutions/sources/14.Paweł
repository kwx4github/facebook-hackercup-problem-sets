#include <string>
#include <vector>
#include <set>
#include <iostream>
#include <algorithm>
#include <utility>
#include <map>
#include <cstdio>
#include <sstream>
#include <cmath>

using namespace std;

#define REP(a, b) for (int a = 0; a<(b); ++a)
#define FOR(a, b, c) for (int a = (b); a<=(c); ++a)
#define FORD(a, b, c) for (int a = (b); a>=(c); --a)
#define FOREACH(a, v) for (INIT(a, (v).begin()); a!=(v).end(); ++a)
 
template<class T>
inline int size(const T&t){return t.size();}
 
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long LL;

#define INF 1000000000
#define PB push_back
#define MP make_pair

////////////////////////////////

#define ILE 21000

int drzewo[ILE][26], zaj;
bool tu_koniec[ILE];
int wyn[ILE][201], ile_sl[ILE];

inline void czysc(int nr) {
    tu_koniec[nr] = 0;
    REP(a, 26)
        drzewo[nr][a] = -1; 
}

void wstaw(char *sl) {
    int nr = 0;
    while (*sl) {
        if (drzewo[nr][*sl-'a']<0)
            break;
        nr = drzewo[nr][*sl-'a'];
        ++sl;
    }
    while (*sl) {
        nr = drzewo[nr][*sl-'a'] = zaj++;
        czysc(nr);
        ++sl;
    }
    tu_koniec[nr] = 1;
}

int K;

void obl(int nr) {
    ile_sl[nr] = tu_koniec[nr];
    wyn[nr][0] = 0;
    if (tu_koniec[nr])
        wyn[nr][1] = 0;
    REP(a, 26)
        if (drzewo[nr][a]>=0) {
            int new_wyn[201];
            int cnr = drzewo[nr][a];
            int ile2 = min(K, ile_sl[nr]+ile_sl[cnr]);
            REP(b, ile2+1) {
                new_wyn[b] = INF;
                REP(c, b+1)
                    if (c<=ile_sl[nr] && b-c<=ile_sl[cnr])
                        new_wyn[b] = min(new_wyn[b], wyn[nr][c]+b-c+wyn[cnr][b-c]);
            }
            REP(b, ile2+1)
                wyn[nr][b] = new_wyn[b];
            ile_sl[nr] = ile2;
        }
    if (ile_sl[nr]>=1)
        wyn[nr][1] = 0;
}


void licz() {
    int N;
    scanf("%d%d", &N, &K);
    zaj = 1;
    czysc(0);
    char buf[ILE];
    REP(a, N) {
        scanf("%s", buf);
        wstaw(buf);
    }
    FORD(nr, zaj-1, 0)
        obl(nr);
    printf("%d\n", max(1, wyn[0][K]));
}

int main() {
    int TT;
    scanf("%d", &TT);
    REP(tt, TT) {
        printf("Case #%d: ", (tt+1));
        licz();
    }
}

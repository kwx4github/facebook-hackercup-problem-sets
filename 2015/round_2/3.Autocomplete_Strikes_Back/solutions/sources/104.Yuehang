#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

struct Trie {
    int ne[26], sum, red;
};

Trie tr[20010];
char s[20010];

int Cnt;
int newNode() {
    memset(tr[Cnt].ne, -1, sizeof(tr[Cnt].ne));
    tr[Cnt].sum = 0;
    tr[Cnt].red = 0;
    Cnt ++;
    return Cnt - 1;
}

int dp[20010][110];

void insert(int p, char *s) {
    for (int i = 0; s[i]; i ++) {
        tr[p].sum ++;
        if (tr[p].ne[s[i] - 'a'] == -1) {
            tr[p].ne[s[i] - 'a'] = newNode();
        }
        p = tr[p].ne[s[i] - 'a'];
    }
    tr[p].sum ++;
    tr[p].red = 1;
}

void ck(int &x, int y) {
    if (x == -1 || x > y) {
        x = y;
    }
}

void f(int p) {
    dp[p][0] = 0;
    if (tr[p].red) {
        dp[p][1] = 0;
    }
    for (int i = 0; i < 26; i ++) {
        if (tr[p].ne[i] == -1) {
            continue;
        }
        int id = tr[p].ne[i];
        int sum = tr[id].sum;
        f(id);
        for (int k = min(100, tr[p].sum); k >= 0; k --) {
            for (int j = 1; j <= k && j <= sum && j <= 100; j ++) {
                if (dp[p][k - j] != -1) {
                    ck(dp[p][k], dp[p][k - j] + dp[id][j] + j);
                }
            }
        }
    }
    if (p != 0) {
        dp[p][1] = 0;
    }
    //for (int i = 0; i < 10; i ++) {
    //    printf("%d %d %d\n", p, i, dp[p][i]);
    //}
}


int main() {
    freopen("autocomplete_strikes_back.txt", "r", stdin);
    freopen("autocomplete_strikes_back.out", "w", stdout);
    int T;
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas ++) {
        int n, K;
        scanf("%d%d", &n, &K);
        Cnt = 0;
        int root = newNode();
        for (int i = 0; i < n; i ++) {
            scanf("%s", s);
            insert(root, s);
        }
        memset(dp, -1, sizeof(dp));
        f(root);
        int ans = dp[root][K];
        printf("Case #%d: %d\n", cas, ans);
        fprintf(stderr, "%d\n", ans);
    }
    return 0;
}
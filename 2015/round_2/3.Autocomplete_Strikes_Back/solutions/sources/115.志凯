#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <string.h>
 
using namespace std;
using namespace rel_ops;
 
typedef long long int64;
typedef unsigned long long uint64;
const double pi=acos(-1.0);
const double eps=1e-11;
const int inf=0x7FFFFFFF;
template<class T> inline bool checkmin(T &a,T b){return b<a?a=b,1:0;}
template<class T> inline bool checkmax(T &a,T b){return b>a?a=b,1:0;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define mem(a,b) memset(a, b, sizeof(a))
#define clr(a) memset(a, 0, sizeof(a))
#define rep(i,n) for(int i=0; i<n; i++)
#define repit(i,v) for(typeof(v.begin()) i=v.begin(); i!=v.end(); i++)
#define iter(v) typeof(v.begin())
#define ff first
#define ss second
#ifdef LOCAL
#define dbg(args...) printf(args); //##__VA_ARGS__
#define dout cout
#define out(x) (cout<<#x<<": "<<x<<endl)
template<class T>void show(T a, int n){for(int i=0; i<n; ++i) cout<<a[i]<<' '; cout<<endl;}
template<class T>void show(T a, int r, int l){for(int i=0; i<r; ++i)show(a[i],l);cout<<endl;}
#else
#define dbg(...)
#define dout if(true);else cout
#define out(...)
#define show(...)
#endif

const int N = 2e6+10;
struct Node {
	Node *p[26];
	int ans[105];
	bool is;
	Node *get() {
		clr(p);
		is = false;
		return this;
	}
} root, pool[N], *r;

int ptr, ans;
Node * get() {
	return pool[ptr++].get();
}

void insert(char* s) {
	int len = strlen(s);
	Node * cur = r;
	bool uni = false;
	for (int i = 0; i < len; i++) {
		int k = s[i] - 'a';
		if (!uni) {
			ans ++;
		}
		if (cur->p[k]) cur = cur->p[k];
		else {
			cur->p[k] = get();
			cur = cur->p[k];
			uni = true;
		}
	}
	cur->is = true;
}

char ch[N];
int n, K;
int ta[505], tmp[505];
void dfs(Node *cur) {
	for (int i = 0; i < 26; i++) {
		if (cur->p[i]) {
			dfs(cur->p[i]);
		}
	}
	for (int i = 0; i <= K; i++) {
		ta[i] = 1e8;
	}
	ta[0] = 0;
	for (int i = 0; i < 26; i++) {
		if (cur->p[i]) {
			int* tb = cur->p[i]->ans;
			for (int i = 0; i <= K; i++)
				tmp[i] = 1e9;
			for (int i = 0; i <= K; i++)
				for (int j = 0; j + i <= K; j++) {
					checkmin(tmp[i+j], ta[i] + tb[j]);
				}
			for (int i = 0; i <= K; i++)
				ta[i] = tmp[i];
		}
	}
	int *ans = cur->ans;
	ans[0] = 0;
	ans[1] = 1;
	if (cur->is) {
		for (int i = 2; i <= K; i++) 
			ans[i] = ta[i-1];
	}
	else {
		for (int i = 2; i <= K; i++) 
			ans[i] = ta[i];
	}
	if (cur != r)
		for (int i = 2; i <= K; i++) 
			ans[i] += i;
}

int main() {
	int T;
	cin >> T;
	rep(cas, T) {
		ptr = 0;
		r = root.get();
		cin >> n >> K;
		ans = 0;
		rep (i, n) {
			cin >> ch;
			insert(ch);
		}
		dfs(r);
		// rep(i, K+1) out(r->ans[i]);
		printf("Case #%d: %d\n", cas+1, r->ans[K]);
	}
	return 0;
}

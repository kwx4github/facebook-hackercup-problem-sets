#include <iostream>
#include <vector>
#define F first
#define S second

using namespace std;

int dp[30011][111][2];

int minn(int a, int b){
    if (a==-1) return b;
    if (b==-1) return a;
    return min(a, b);
}

vector<pair<int, char> > g[30001];
int git;

int e[30001];

void add(int x, int d, string&s){
    if (d==s.size()){
        e[x]=1;
        return;
    }
    for (auto nx:g[x]){
        if (nx.S==s[d]){
            add(nx.F, d+1, s);
            return;
        }
    }
    g[x].push_back({git++, s[d]});
    add(git-1, d+1, s);
}

void dfs(int x, int d){
    dp[x][0][0]=0;
    for (auto nx:g[x]){
        dfs(nx.F, d+1);
        for (int i=0;i<100;i++){
            if (dp[x][i][0]>-1){
                for (int ii=1;i+ii<=100;ii++){
                    if (dp[nx.F][ii][0]>=0){
                        dp[x][i+ii][1]=minn(dp[x][i+ii][1], dp[nx.F][ii][0]+dp[x][i][0]);
                    }
                }
            }
        }
        for (int i=0;i<=100;i++){
            dp[x][i][0]=dp[x][i][1];
        }
    }
    if (e[x]){
        for (int i=100;i>0;i--){
            if (dp[x][i-1][0]>=0){
                dp[x][i][0]=minn(dp[x][i][0], dp[x][i-1][0]+d);
            }
        }
    }
    if (x!=0){
        dp[x][1][0]=minn(dp[x][1][0], d);
    }
}

int main(){
    int tcs;
    cin>>tcs;
    for (int tc=1;tc<=tcs;tc++){
        int n,k;
        cin>>n>>k;
        for (int i=0;i<30011;i++){
            for (int ii=0;ii<111;ii++){
                dp[i][ii][0]=-1;
                dp[i][ii][1]=-1;
            }
        }
        git=1;
        for (int i=0;i<30000;i++){
            g[i].clear();
            e[i]=0;
        }
        for (int i=0;i<n;i++){
            string s;
            cin>>s;
            add(0, 0, s);
        }
        dfs(0, 0);
        cout<<"Case #"<<tc<<": "<<dp[0][k][0]<<endl;
    }
}

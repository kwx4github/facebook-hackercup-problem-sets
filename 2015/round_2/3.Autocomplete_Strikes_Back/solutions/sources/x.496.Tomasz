#include <bits/stdc++.h>

#define ALL(v) v.begin(), v.end()
#define REP(i, a, b) for(int i = a; i < b; i++)
#define REPD(i, a, b) for(int i = a; i > b; i--)
#define REPLL(i, a, b) for(ll i = a; i < b; i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FORLL(i, a, b) for(ll i = a; i <= b; i++)
#define INF 1000000001

using namespace std;

typedef long long ll;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<ld, ld> pld;
typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;
typedef map<int, int>::iterator mit;
typedef vector<int> vi;
typedef vector<pii > vpii;

#define pb push_back
#define mp make_pair
#define st first
#define nd second

#define EPS 1e-9
#define PI acos(-1.0)
#define MAXN 4007
#define MAXA 30

int z, n, k;

vector<string> s;
string t;

struct group {
    vi v;
    int cost;

    group(int c) : cost(c) {
    }

    bool operator<(const group &g) const {
        if(v.size() != g.v.size()) return v.size() > g.v.size();
        return cost > g.cost;
    }
};

priority_queue< group > pq[2];
int ret;
int used;
vi res;

void brejk(int pqid, group g, int j) {
    vector<group> ngv;
    int nc = g.cost;
    FORD(i, g.v.size()-1, 0) {
        if(!i || (s[g.v[i]].size() == j+1) || s[g.v[i-1]].size() <= j || s[g.v[i-1]][j] != s[g.v[i]][j]) {
            group ng(nc);
            while(g.v.size() > i) {
                ng.v.pb(g.v.back());
                g.v.pop_back();
                reverse(ALL(ng.v));
            }
            if(ng.v.size() == 1) {
                nc = j+1;
                used++;
                res.pb(ng.v[0]);
                //cout << s[ng.v[0]] << endl;
                if(used == k) return;
            }
            else ngv.pb(ng);
        }
    }
    REP(i, 0, ngv.size()) pq[pqid].push(ngv[i]);
}

int f(string &a, string &b) {
    REP(i, 0, min(a.size(), b.size())) {
        if(a[i] != b[i]) return i+1;
    }
    return (a.size() < b.size() ? a.size() : b.size()+1);
}


int main()
{
    ios_base::sync_with_stdio(0);
	cin >> z;
	FOR(tc, 1, z) {
        cin >> n >> k;
        ret = used = 0;
        while(pq[0].size()) pq[0].pop();
        while(pq[1].size()) pq[1].pop();
        res.clear();
        s.clear();
        REP(i, 0, n) {
            cin >> t; s.pb(t);
        }
        sort(ALL(s));
        group g(1);
        REP(i, 0, n) g.v.pb(i);
        pq[0].push(g);

        int pqid = 0;
        int j = 0;

        while(used < k) {
            while(pq[pqid].size()) {
                brejk(1-pqid, pq[pqid].top(), j);
                pq[pqid].pop();
            }
            pqid = 1-pqid;
            j++;
        }


        REP(i, 0, res.size()) {
            int v = res[i];
            int mx = 0;
            REP(j, 0, res.size()) {
                int w = res[j];
                if(v != w) mx = max(f(s[v], s[w]), mx);
            }
            ret += mx;
        }

        cout << "Case #" << tc << ": " << ret << endl;
	}

    return 0;
}

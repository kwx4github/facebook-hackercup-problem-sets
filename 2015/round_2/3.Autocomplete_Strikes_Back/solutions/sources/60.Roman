#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int maxv = 40000;
const int maxk = 200;
const ll inf = (ll)1e9;
int kv;
int go[maxv][26];
int fin[maxv];
int h[maxv];
ll dp[maxv][maxk];
char s[maxv];
ll dp2[27][maxk];
int n, k;
void init() {
  memset(go, 0, sizeof(go));
  memset(fin, 0, sizeof(fin));
  memset(dp, 0, sizeof(dp));
  kv = 1;
  h[1] = 0;
}
void add(char* s) {
  int cur = 1;
  while (s[0]) {
    int c = s[0] - 'a';
    if (go[cur][c] == 0) {
      go[cur][c] = ++kv;
      h[kv] = h[cur] + 1;
    }
    cur = go[cur][c];
    s++;
  }
  fin[cur] = 1;
}
void dfs(int v) {
  for (int i = 1; i <= k; i++) {
    dp[v][i] = inf;
  }
  dp[v][0] = 0;
  for (int i = 0; i < 26; i++) if (go[v][i]) {
    int e = go[v][i];
    dfs(e);
  }
  int cc = 0;
  for (int i = 0; i <= 26; i++) {
    for (int j = 1; j <= k; j++) {
      dp2[i][j] = inf;
    }
    dp2[i][0] = 0;
  }
  for (int i = 0; i < 26; i++) if (go[v][i]) {
    int e = go[v][i];      
    cc++;
    for (int j = 0; j <= k; j++) {
      for (int t = 0; t + j <= k; t++) {
        dp2[cc][t + j] = min(dp2[cc][t + j], dp[e][t] + dp2[cc - 1][j]);
      }
    }
  }
  for (int t = 0; t <= k; t++) {
    dp[v][t] = min(dp[v][t], dp2[cc][t]);                    
  }
  if (v != 1) {
    dp[v][1] = h[v];
    if (fin[v]) {
      for (int i = 0; i < k; i++) {
        dp[v][i + 1] = min(dp[v][i + 1], dp2[cc][i] + h[v]);
      }
    }
  }
}
void solve() {
  init();
  scanf("%d %d", &n, &k);
  for (int i = 0; i < n; i++) {
    scanf("%s", s);
    add(s);
  }      
  dfs(1);
  cout<<dp[1][k]<<endl;
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

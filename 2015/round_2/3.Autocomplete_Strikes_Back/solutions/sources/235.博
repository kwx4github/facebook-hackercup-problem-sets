#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define PB push_back
#define MP make_pair

typedef double DB;
typedef long long LL;
typedef pair <int, int> PI;

const DB eps = 1e-8;
const int N = 2e5 + 7;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;


struct Trie{
    int next[26], sum, flag;
} t[20005];

int dp[20005][26][105], g[20005][105], n, m, cnt;

void Calc(int x, int len){
    g[x][0] = 0;
    int last = -1, up = min(m, t[x].sum);
    for (int i = 0; i < 26; i++) if (t[x].next[i]){
        int y = t[x].next[i];
        Calc(y, len + 1);
        for (int j = 0; j <= up; j++){
            if (last == -1){
                dp[x][i][j] = min(dp[x][i][j], g[y][j]);
                g[x][j] = min(g[x][j], dp[x][i][j]);
                continue;
            }
            for (int k = 0; k <= j; k++){
                dp[x][i][j] = min(dp[x][i][j], dp[x][last][j - k] + g[y][k]);
                dp[x][i][j] = min(dp[x][i][j], dp[x][last][j]);
            }
            g[x][j] = min(g[x][j], dp[x][i][j]);
        }
        last = i;
    }
    if (x != 1){
        if (t[x].flag) for (int i = up; i >= 1; i--) g[x][i] = min(g[x][i], g[x][i - 1] + max(1, len));
        else g[x][1] = min(g[x][1], max(1, len));
    }
}

void Dfs(int x){
    for (int i = 0; i < 26; i++)
    if (t[x].next[i]){
        Dfs(t[x].next[i]);
        t[x].sum += t[t[x].next[i]].sum;
    }
}

void Insert(char *s){
    int x = 1;
    for (int i = 0, l = strlen(s); i < l; i++){
        int j = s[i] - 'a';
        if (!t[x].next[j]) t[x].next[j] = ++cnt;
        x = t[x].next[j];
    }
    t[x].sum = t[x].flag = 1;
}

char s[20005];

int main(){
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    int CAS;
    scanf("%d", &CAS);
    for (int cas = 1; cas <= CAS; cas++){
        scanf("%d%d", &n, &m);
        cnt = 1;
        for (int i = 0; i < n; i++){
            scanf("%s", s);
            Insert(s);
        }

        for (int i = 1; i <= cnt; i++)
        for (int j = 0; j < 26; j++)
        for (int k = 0; k <= m; k++)
            dp[i][j][k] = g[i][k] = INF;
        Dfs(1);
        Calc(1, 0);

        printf("Case #%d: %d\n", cas, g[1][m]);

        for (int i = 1; i <= cnt; i++){
            t[i].sum = t[i].flag = 0;
            for (int j = 0; j < 26; j++)
                t[i].next[j] = 0;
        }
    }
}




// pre-written code follows
// #includes {{{
#include <algorithm>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
using namespace std;
// }}}
// constants, typedefs, macros {{{
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<string> VS;
typedef queue<int> QI;
typedef queue<PII> QPII;
typedef complex<double> tComp;
__attribute__ ((unused)) const double PI = 2.0 * acos(0.0);
__attribute__ ((unused)) const int oo = 1000000000;
__attribute__ ((unused)) const LL OO = 1000000000000000000LL;
__attribute__ ((unused)) const double EPS = 1e-9;
#define FORIT(i,c) for (typeof((c).end()) i=(c).begin(); i!=(c).end(); ++i)
#define CERR(x) cerr << (#x) << " = " << (x) << endl
#define COUT(x) cout << (#x) << " = " << (x) << endl
// }}}

struct Trie {
  Trie* next[26];
  int cost[103];
  Trie() {
    for (int j = 0; j < 26; j++) {
      next[j] = NULL;
    }
    cost[0] = 0;
    for (int j = 1; j <= 102; j++) {
      cost[j] = oo;
    }
  }
};
void insert(const string &s, Trie *node) {
  for (int i = 0; i < (int)s.size(); i++) {
    int k = s[i] - 'a';
    assert(k >= 0 && k < 26);
    if (!node->next[k]) {
      node->next[k] = new Trie;
    }
    node = node->next[k];
  }
  node->cost[1] = 0;
}

void danceTheFunkyDp(Trie *node, int K) {
  for (int j = 0; j < 26; j++) {
    Trie *child = node->next[j];
    if (child) {
      danceTheFunkyDp(child, K);
      for (int k = K; k >= 1; k--) {
        for (int t = 1; t <= k; t++) {
          if (node->cost[k - t] < oo && child->cost[t] < oo) {
            int extraCost = t;
            int newCost = node->cost[k - t] + child->cost[t] + extraCost;
            if (t == 1) {
              newCost = node->cost[k - t] + 1;
            }
            if (newCost < node->cost[k]) {
              node->cost[k] = newCost;
            }
          }
        }
      }
    }
  }
}

// code written during the competition follows
int main(int argc, char **argv) {
  int kase;
  cin >> kase;
  for (int tkase=0; tkase < kase; tkase++) {
    int n, k;
    cin >> n >> k;
    assert(k <= 100);
    Trie root;
    for (int i = 0; i < n; i++) {
      string s;
      cin >> s;
      insert(s, &root);
    }
    danceTheFunkyDp(&root, k);
    cout << "Case #" << tkase + 1 << ": " << root.cost[k] << endl;
  }
  return 0;
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

#include <stdio.h>
#include <string.h>

char s[40100] ,s1[40100] ,s2[40100];
char ss[40100];
char ss2[40100];
int ha[5010];
int ps[5010] ,ps2[5010];
int a[40100][26];
int nun[40100][26];
int ans[5010];
int tempa[5010];
void mergesorts(int n1 ,int n2);
void mergesort(int *a ,int n1 ,int n2);
int main(void)
{
	int t ,i;
	int n ,k ,j ,j2 ,j3 ,jjjjjj ,j6;
	int lens ,lens1 ,lens2;
	int c;
	int p;
	int np;
	int anss;
	int ppp ,ppp2 ,mp;
	int temp ,max ,maxj;

	scanf("%d" ,&t);
	for (i=1 ; i<=t ; i++)
	{
		scanf("%d %d" ,&n ,&k);		
		ppp=1;
		ps2[0]=1;
		for (j=1 ; j<=n ; j++)	
		{
			ha[j]=j;
			scanf("%s" ,s+1);
			lens=strlen(s+1);
			for (j2=1 , j3=ppp ; j2<=lens ; j2++ , j3++)
			{
				ss2[j3]=s[j2];
			}
			ppp=j3;
			ps2[j]=ppp;	
		}
		mergesorts(1,n);
		ps[0]=1;
		ppp2=1;
		for (j=1 ; j<=n ; j++)	
		{
			ppp=ps2[ha[j]];
			for (j2=1 , j3=ps2[ha[j]-1] ; j3<ppp ; j2++ , j3++)
			{
				s[j2]=ss2[j3];
			}
			lens=j2-1;			
			
			for (j2=1 , j3=ppp2 ; j2<=lens ; j2++ , j3++)
			{
				ss[j3]=s[j2];
			}
			ppp2=j3;
			ps[j]=ppp2;	
		}
		mp=ps[n];
		
		j6=n-k;		
		for (jjjjjj=1 ; jjjjjj<=j6 ; jjjjjj++)
		{
			max=0;
			for (j=2 ; j<=n ; j++)
			{
				ppp=ps[j-1];
				for (j2=1 , j3=ps[j-2] ; j3<ppp ; j2++ , j3++)
				{
					s1[j2]=ss[j3];
				}	
				lens1=j2-1;		
				ppp=ps[j];
				for (j2=1 , j3=ps[j-1] ; j3<ppp ; j2++ , j3++)
				{
					s2[j2]=ss[j3];
				}			
				lens2=j2-1;				
				temp=0;
				for (j2=1 ; (j2<=lens1&&j2<=lens2) ; j2++)
				{
					if (s1[j2]!=s2[j2])
					{
						temp+=2;
						break;	
					}
					else
					{
						temp+=2;							
					}
				}
				if (j2<=lens1&&j2<=lens2)
				{
					temp=temp;	
				}
				else if (j2>lens1)
				{
					if (j2<=lens2)
					{
						temp++;	
					}
				}
				else if (j2>lens2)
				{
					if (j2<=lens1)
					{
						temp++;	
					}					
				}
				if (temp>max)
				{
					max=temp;
					maxj=j;	
				}
			}
			
			ppp=ps[maxj]-ps[maxj-1];
			for (j=ps[maxj] , j2=ps[maxj-1] ; j<=mp ; j++ , j2++)
			{
				ss[j2]=ss[j];
			}
			for (j=maxj ; j<n ; j++)
			{
				ps[j]=ps[j+1]-ppp;
			}
			n--;
		}
		
		np=1;
		for (j3=0 ; j3<=25 ; j3++)
		{
			a[1][j3]=0;
			nun[1][j3]=0;
		}		
		for (j=1 ; j<=n ; j++)	
		{	
			ppp=ps[j];
			for (j2=1 , j3=ps[j-1] ; j3<ppp ; j2++ , j3++)
			{
				s[j2]=ss[j3];
			}
			lens=j2-1;			
			p=1;
			for (j2=1 ; j2<=lens ; j2++)
			{
				c=s[j2]-'a';
				if (a[p][c])
				{
					nun[p][c]++;					
					p=a[p][c];
				}
				else
				{
					break;	
				}
			}
			if (j2<=lens)
			{
				for (j2=j2 ; j2<=lens ; j2++)
				{
					c=s[j2]-'a';
					nun[p][c]++;
					a[p][c]=++np;
					for (j3=0 ; j3<=25 ; j3++)
					{
						a[np][j3]=0;
						nun[np][j3]=0;
					}
					p=np;
				}
			}
		}
		for (j=1 ; j<=n ; j++)	
		{
			ppp=ps[j];
			for (j2=1 , j3=ps[j-1] ; j3<ppp ; j2++ , j3++)
			{
				s[j2]=ss[j3];
			}
			lens=j2-1;
			p=1;
			ans[j]=0;
			for (j2=1 ; j2<=lens ; j2++)
			{
				c=s[j2]-'a';
				if (nun[p][c]>1)
				{
					ans[j]++;					
					p=a[p][c];
				}
				else
				{
					ans[j]++;					
					break;	
				}
			}
		}		
				
/*		for (j=1 ; j<=n ; j++)
		{
			printf("%d\n" ,ans[j]);
		}	*/
		mergesort(ans,1,n);
		anss=0;
		for (j=1 ; j<=k ; j++)
		{
			anss+=ans[j];
		}
		printf("Case #%d: %d\n" ,i ,anss);
	}

	return 0;
}

void mergesorts(int n1 ,int n2)
{
	int a1 ,a2 ,n12;
	int i ,j ,j2, j3;
	int ppp;
	
	if (n1<n2)
	{	
		n12=(n1+n2)/2;
		mergesorts(n1,n12);
		mergesorts(n12+1,n2);
		for (i=n1 ; i<=n2 ; i++)
		{
			tempa[i]=ha[i];	
		}
		a1=n1;
		a2=n12+1;
		for (i=n1 ; (a1<=n12 && a2<=n2) ;i++)
		{
			ppp=ps2[tempa[a1]];
			for (j2=0 , j3=ps2[tempa[a1]-1] ; j3<ppp ; j2++ , j3++)
			{
				s1[j2]=ss2[j3];
			}
			s1[j2]=0;			
			ppp=ps2[tempa[a2]];
			for (j2=0 , j3=ps2[tempa[a2]-1] ; j3<ppp ; j2++ , j3++)
			{
				s2[j2]=ss2[j3];
			}
			s2[j2]=0;			
			if (strcmp(s1,s2)<=0)
			{
				ha[i]=tempa[a1];
				a1++;
			}
			else
			{
				ha[i]=tempa[a2];
				a2++;				
			}
		}
		if (a1>n12)
		{
			for (j=a2 ; j<=n2 ; j++ , i++)
			{
				ha[i]=tempa[j];
			}
		}
		else
		{
			for (j=a1 ; j<=n12 ; j++ , i++)
			{
				ha[i]=tempa[j];
			}			
		}
	}
}

void mergesort(int *a ,int n1 ,int n2)
{
	int a1 ,a2 ,n12;
	int i ,j;
	
	if (n1<n2)
	{	
		n12=(n1+n2)/2;
		mergesort(a,n1,n12);
		mergesort(a,n12+1,n2);
		for (i=n1 ; i<=n2 ; i++)
		{
			tempa[i]=a[i];	
		}
		a1=n1;
		a2=n12+1;
		for (i=n1 ; (a1<=n12 && a2<=n2) ;i++)
		{
			if (tempa[a1]<=tempa[a2])
			{
				a[i]=tempa[a1];
				a1++;
			}
			else
			{
				a[i]=tempa[a2];
				a2++;				
			}
		}
		if (a1>n12)
		{
			for (j=a2 ; j<=n2 ; j++ , i++)
			{
				a[i]=tempa[j];
			}
		}
		else
		{
			for (j=a1 ; j<=n12 ; j++ , i++)
			{
				a[i]=tempa[j];
			}			
		}
	}
}

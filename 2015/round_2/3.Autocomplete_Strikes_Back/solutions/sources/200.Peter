#include <cstdio>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <algorithm>

#define FOR(i,n) for (int i = 0; i < (n); i++)
#define FORD(i,n) for (int i = (n)-1; i >= 0; i--)
#define FORTO(i,a,n) for (int i = (a); i <= (n); i++)

#define MAXN 23456
#define MAXK 123
int T[MAXN][26];
int S[MAXN];
int F[MAXN]; // word finishes here

int DP[MAXN][MAXK];

char C[MAXN];

#define INF 1000000

void DFS(int v) {
	FOR(i,MAXK) DP[v][i] = INF;
	DP[v][0] = 0;
	if (F[v]) {
		DP[v][1] = 0;
	}
	FOR(p,26) {
		int n = T[v][p];
		if (!n) continue;
		//printf("%d : %d -> %d\n", v, p, n);
		DFS(n);
		FORD(i,MAXK) FORTO(j,0,i) {
			DP[v][i] = std::min(DP[v][i], DP[v][i-j] + j + DP[n][j]);
		}
	}
	DP[v][1] = 0;
}

int main() {
	int cases;
	scanf("%d", &cases);
	FOR(t,cases) {
		memset(T,0,sizeof(T));
		memset(S,0,sizeof(S));
		memset(F,0,sizeof(F));
		memset(DP,0,sizeof(DP));

		int N, K, M = 1;
		scanf("%d %d", &N, &K);
		FOR(i,N) {
			scanf("%s", C);
			int L = strlen(C);
			int v = 0;
			FOR(j,L) {
				S[v]++;
				int &n = T[v][C[j]-'a'];
				if (n == 0) {
					n = M++;
				}
				v = n;
			}
			S[v]++;
			F[v]++;
		}
		DFS(0);
		printf("Case #%d: %d\n", t+1, std::max(DP[0][K],1));
	}
	return 0;
}

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<ll> vll;
typedef vector<string> vs;
typedef pair<int,int> pii;
#define range(i,a,b) for(auto i=(a);i<b;i++)
#define rep(i,n) range(i,0,n)
#define all(c) begin(c),end(c)
#define CLR(i,x) memset(i,x,sizeof(i))
#define clr0(i) CLR(i,0)
#define clr1(i) CLR(i,-1)
#define bit(x,i) ((x>>i)&1)
#define M(x) ((x)%MOD)
#define acc(f,x,y) x=f(x,y)
#define fst first
#define snd second
#define tup make_tuple

#define N 4005
#define K 222222
#define INF 1234567890

int pre[N][N];
string ss[N];

int run(int n, int k, int start, int mid)
{
	vi picked = {start};
	range(i, start + 1, n)
	{
		if(pre[picked.back()][i] <= mid)
		{
			picked.push_back(i);
		}
		if(picked.size() == k) break;
	}
	if(picked.size() < k) return INF;
	int lo = picked.front(), hi = picked[k - 1];
	int ans = 0;

	ans += min((int) ss[lo].size(), pre[lo][picked[1]] + 1);
	ans += min((int) ss[hi].size(), pre[picked[k - 2]][hi] + 1);
	range(i, 1, k - 1)
	{
		ans += min(
			(int) ss[picked[i]].size(),
			max(
				pre[picked[i - 1]][picked[i]],
				pre[picked[i]][picked[i + 1]]
			) + 1
		);
	}

	return ans;
}

int runrun(int n, int k, int mid)
{
	int ans = INF;
	rep(i, n)
	{
		ans = min(ans, run(n, k, i, mid));
	}
	return ans;
}

int work()
{
	int n, k;
	cin >> n >> k;
	if(k == 1)
	{
		return 1;
	}

	rep(i, n)
	{
		cin >> ss[i];
	}

	sort(ss, ss + n);
	rep(i, n)
	{
		rep(j, i)
		{
			int len = 0;
			while(
				len < ss[i].size() &&
				len < ss[j].size() &&
				ss[i][len] == ss[j][len]
			)
				len++;
			pre[i][j] = pre[j][i] = len;
		}
	}

	int left = 0, right = K;
	while(left < right)
	{
		// TODO? left + right + 1 ?
		int mid = (left + right) / 2;
		int runval = runrun(n, k, mid);
		if(runval == INF)
			left = mid + 1;
		else
			right = mid;
	}

	return runrun(n, k, left);
}

int main()
{
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	rep(i, n)
	{
		cout << "Case #" << (i + 1) << ": " << work() << endl;
	}

	return 0;
}

#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const int MAXN = 42222;
const int MAXK = 111;             
const int ALPH = 30;
            
struct node {
	int nxt[ALPH];
	bool flag;
	
	node() {
		memset(nxt, -1, sizeof(nxt));
		flag = 0;
	}
};

int t, n, k, sz, root, v;               
node a[MAXN];
int dp[MAXN][MAXK];
string s;

void dfs(int v, int len) {
	dp[v][0] = 0;
	for (int i = 1; i <= k; i++)
		dp[v][i] = INF;
	if (a[v].flag)
		dp[v][1] = len; 
		
	forn(i, ALPH) {
		int w = a[v].nxt[i];
		if (w != -1) {
			dfs(w, len + 1);
			
			for (int j = k; j >= 0; j--) {
				for (int add = 1; add <= k; add++) {
				 	if (dp[w][add] != INF && dp[v][j] != INF && j + add <= k)
				 		dp[v][j + add] = min(dp[v][j + add], dp[v][j] + dp[w][add]);
				}
			}
		}	
	}
	
	//cout << len << '\n';
	dp[v][1] = min(dp[v][1], len);		
}

int main() {

	scanf("%d", &t);

	sz = 0;            
	forn(tt, t) {
		printf("Case #%d: ", tt + 1);

		scanf("%d%d", &n, &k);
		
		forn(i, sz + 1) {
			a[i] = node();	
		}
		
		sz = 1;
		root = 0;
		
		forn(i, n) {
			cin >> s;
			v = root;
			forn(j, s.size()) {
				if (a[v].nxt[s[j] - 'a'] == -1)
					a[v].nxt[s[j] - 'a'] = sz++;
				v = a[v].nxt[s[j] - 'a'];
			}
			a[v].flag = 1;
		}
		
		dfs(root, 0);
			                    		
		cout << dp[root][k] << '\n';
	}

	return 0;
}
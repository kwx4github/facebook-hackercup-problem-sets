#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define all(C) begin(C), end(C)

#define debug(x) cerr << #x" = " << x << '\n';

template <typename T>
inline T sqr(T x) {
  return x * x;
}

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;

const double EPS = 1e-9;
const int MAXN = 2e4 + 10;

struct Node {
  map<char, Node*> to;
  bool term;

  Node() {
    term = false;
  }

  void* operator new(size_t);
};

Node pool[2 * MAXN];
int ptr_ = 0;

void* Node::operator new(size_t sz) {
  ++sz;
  pool[ptr_] = Node();
  return pool + ptr_++;
}
 
int id(Node* v) {
  return v ? v - pool : -1;
}

int dp[2 * MAXN][105];
int mid_len[2 * MAXN];

void add(Node* v, const string& s) {
  for (char c : s) {
    if  (!v->to.count(c)) {
      v->to[c] = new Node();
    }
    v = v->to[c];
  } 
  v->term = true;
}

void calc(Node* v, int k) {
  const int INF = 1e9;
  forn(i, k + 1) {
    dp[id(v)][i] = INF;
  } 
  dp[id(v)][0] = 0;

  for (auto it : v->to) {
//    char c = it.fst;
    Node* to = it.snd;

    calc(to, k);

    for (int have = k; have >= 0; --have) {
      for (int take = 1; take + have <= k && dp[id(to)][take] < INF; ++take) {
        dp[id(v)][have + take] = min(dp[id(v)][have + take], dp[id(v)][have] + dp[id(to)][take] + take);
      }
    }
  }

  for (int have = k; have >= 0; --have) {
    for (int take = 1; take <= v->term; ++take) {
      dp[id(v)][have + take] = min(dp[id(v)][have + take], dp[id(v)][have]);
    }
  }

  dp[id(v)][1] = 0;
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);

  int T;
  scanf("%d", &T);

  forn(tt, T) {
    int n, k;
    scanf("%d%d\n", &n, &k);

    ptr_ = 0;
    auto* root = new Node();

    forn(i, n) {
      string s;
      getline(cin, s);
      add(root, s);
    }

    calc(root, k);

    printf("Case #%d: %d\n", tt + 1, max(1, dp[id(root)][k]));
  }

  return 0;
}

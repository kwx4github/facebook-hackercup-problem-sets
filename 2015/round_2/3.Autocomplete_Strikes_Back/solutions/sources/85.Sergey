package com.facebook.hackercup2015.round2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringTokenizer;

public class AutoCompleteStrikesBack {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    AutoCompleteStrikesBack() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int n = nextInt();
        final int k = nextInt();
        class Node {
            Node[] children = new Node[26];

            int depth = 0;

            boolean word;

            int[][] dp = new int[27][k + 1];
            {
                for (int[] row : dp) {
                    Arrays.fill(row, -1);
                }
            }

            Node getChild(char c) {
                int ci = c - 'a';
                if(children[ci] == null) {
                    children[ci] = new Node();
                    children[ci].depth = depth + 1;
                }
                return children[ci];
            }

            int getOptimal(int w) {
                if(w == 0) return 0;
                if(w == 1) return depth;
                if(dp[0][w] == -1) {
                    Arrays.fill(dp[26], 1 << 20);
                    dp[26][0] = 0;
                    for(int i = 25; i >= 0; i--) {
                        for(int j = 0; j <= k; j++) {
                            if(children[i] == null) {
                                dp[i][j] = dp[i + 1][j];
                            } else {
                                dp[i][j] = 1 << 20;
                                for(int r = 0; r <= j; r++) {
                                    dp[i][j] = Math.min(dp[i][j], dp[i + 1][r] + children[i].getOptimal(j - r));
                                }
                            }
                        }
                    }
                }
                return word ? depth + dp[0][w - 1] : dp[0][w];
            }
        }
        Node root = new Node();
        for(int i = 0; i < n; i++) {
            Node node = root;
            for (char c : next().toCharArray()) {
                node = node.getChild(c);
            }
            node.word = true;
        }
        writer.println(root.getOptimal(k));
    }

    public static void main(String[] args) throws IOException {
        new AutoCompleteStrikesBack().solve();
    }
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class C {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    public class Trie {
        Trie[] childs = new Trie[26];
        int cnt = 0;
        int type = 0;
    }

    public void insertString(Trie root, char[] s) {
        Trie v = root;
        boolean firstNotExist = true;
        for (char c: s) {
            boolean notExist = false;
            if (v.childs[c-'a'] == null) {
                v.childs[c-'a'] = new Trie();
                notExist = true;
            }
            v = v.childs[c-'a'];

            if (v.cnt == 1) {
                for (Trie cc: v.childs) {
                    if (cc != null) {
                        cc.type = cc.cnt;
                    }
                }
            }

            v.cnt++;

            if (notExist) {
                if (firstNotExist) {
                    v.type++;
                    firstNotExist = false;
                }
            } else {
                v.type = v.cnt;


            }
        }
    }

    public int compute(Trie root, char[] s) {
        Trie v = root;
        int ans = 0;
        for (int i = 0; i < s.length; i++) {
            char c = s[i];
            v = v.childs[c-'a'];
            if (v == null) {
                ans++;
                break;
            } else {
                ans += (v.cnt - v.type) + 1;

                Trie next = i < s.length-1? v.childs[s[i+1]-'a']: null;

                if (v.cnt == 1) {
                    for (Trie cc: v.childs) {
                        if (cc != null && cc != next) {
                            ans += cc.cnt;
                        }
                    }
                }
            }
        }
        return ans;
    }


    public void solveCase() throws IOException {
        int N = nextInt();
        int K = nextInt();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = reader.readLine();
        }

        Trie root = new Trie();
        int ans = 0;
        boolean[] pick = new boolean[N];
        for (int k = 0; k < K; k++) {
            int minIndex = -1;
            int minAdd = Integer.MAX_VALUE / 2;
            for (int i = 0; i < N; i++) {
                if (pick[i]) continue;
                int a = compute(root, S[i].toCharArray());
                if (a < minAdd) {
                    minIndex = i;
                    minAdd = a;
                }
            }
            ans += minAdd;
//            System.out.println(S[minIndex] + ": " + minAdd);
            insertString(root, S[minIndex].toCharArray());
            pick[minIndex] = true;
        }
        System.out.print(ans);

    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            System.out.print("Case #" + t + ": ");
            solveCase();
            System.out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new C().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>

using namespace std;

int GN;
int GSZ[30];
int VA[27][103];
int mem[27][103];
int dp(int id,int r,int d,int we){
	int w = 1000000000;
	if(r == 0)return 0;
	if(id == GN)return r == 0 ? 0 : w;
	if(mem[id][r] != -1)return mem[id][r];
	int s = 0;
	if(id == 0 && ((r==1 && d > 0) || we)){
		r--;
		s = d;
	}
	for(int i = 0; i <= min(r, GSZ[id]); ++i){
		w = min(w , dp(id+1,r-i,d,we) + (i==1 ? d+1 : VA[id][i]));
	}
	return mem[id][r] = w + s;
}

int ANS[20010][103];
struct Node{
	vector<int> childs;
	int w, lw,we;
	char c;
	Node(char c='-', int lw=0){
		childs = vector<int>(26,-1);
		w = 0; 
		this->lw = lw;
		this->c = c;
		we = 0;
	}
};
struct Trie{
	vector<Node> V;
	Trie(){ V = vector<Node>(1,Node()); }
	void insert(string s){
		int v = 0;
		V[v].w++;
		for(int i = 0; i < s.size(); ++i){
			int p = s[i] - 'a';
			if(V[v].childs[p] == -1){
				V[v].childs[p] = V.size();
				V.push_back(Node(s[i], i+1));
			}
			v = V[v].childs[p];
			V[v].w++;
		}
		V[v].we = 1;
	}
	
};

int main(){
	freopen("autocomplete_strikes_back.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int TC;
	cin >> TC;
	for(int tc = 1 ; tc<=TC; ++tc){
		int N , K;
		cin >> N >> K;
		Trie T;
		for (int i = 0; i < N; ++i) {
			string s;
			cin >> s;
			T.insert(s);
		}
		for(int v = T.V.size() - 1; v >= 0; --v){
			GN = 0;
			Node &n = T.V[v]; 
			for(int i = 0; i < T.V[v].childs.size(); ++i){
				int c = n.childs[i];
				if(c == -1)continue;
				GSZ[GN] = T.V[c].w;
				for(int j = 0; j <= GSZ[GN]; ++j){
					VA[GN][j] = ANS[c][j];
				}
				GN++;
			}
			memset(mem,-1,sizeof(mem));
			for(int j = 0; j <= K; ++j){
				ANS[v][j] = dp(0,j,n.lw,n.we);
			}
//			cout << n.c << ": ";
//			for(int i = 0; i <= K; ++i){
//				cout << ANS[v][i] << " ";
//			}
//			cout << endl;
		}
		
		cout << "Case #" << tc << ": " << ANS[0][K] << endl;
	}
	
}




/*

5
6 4
tin
tiny
tinny
gigantic
tilt
tilts
3 2
apple
apricot
cherry
5 3
a
aa
aaa
aaaa
aaaaa
5 3
the
quick
brown
fox
jumped
8 7
cork
work
card
ward
font
front
word
sword



 */



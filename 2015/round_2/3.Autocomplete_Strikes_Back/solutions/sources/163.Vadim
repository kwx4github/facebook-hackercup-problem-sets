#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxl = 20200;
const int maxn = 4020;
const int maxk = 105;

int dp[maxl][maxk];
int localdp[2][maxk];

struct Node {
    bool have, subhave;
    int g[26];

    void init() {
        have = subhave = false;
        memset(g, 0xc0, sizeof(g));
    }
} nodes[maxl];
int last;
void init() {
    for (int i = 0; i < maxl; ++i) nodes[i].init();
    last = 1;
    memset(dp, 0x3f, sizeof(dp));
}

void add(const string& s) {
    int node = 0;
    for (char c : s) {
        int id = c - 'a';
        if (nodes[node].g[id] < 0) {
            nodes[node].g[id] = last++;
        }
        node = nodes[node].g[id];
    }
    nodes[node].have = nodes[node].subhave = true;
}

void dfs(int v, int deep = 0) {
    for (int i = 0; i < 26; ++i) if (nodes[v].g[i] > 0) {
        dfs(nodes[v].g[i], deep + 1);
        nodes[v].subhave = nodes[v].have || nodes[nodes[v].g[i]].subhave;
    }
    memset(localdp, 0x3f, sizeof(localdp));
    localdp[0][0] = 0;
    if (nodes[v].have) localdp[0][1] = deep;
    int prev = 0, next = 1;
    for (int q = 0; q < 26; ++q) {
        int u = nodes[v].g[q];
        if (u < 0) continue;
        for (int i = 0; i < maxk; ++i)
            for (int j = 0; j <= i; ++j)
                localdp[next][i] = min(localdp[next][i], localdp[prev][j] + dp[u][i - j]);
        swap(prev, next);
        for (int i = 0; i < maxk; ++i) localdp[next][i] = inf;
    }
    if (nodes[v].subhave && v)
        localdp[prev][1] = deep;
    for (int i = 0; i < maxk; ++i) dp[v][i] = localdp[prev][i];
    //E(v); Eo("==================="); for (int i = 0; i < maxk; ++i) { E(i); Eo(dp[v][i]); }
    //E(v); E(deep); E(nodes[v].subhave); Eo(dp[v][1]);
}

int main() {
    ios_base::sync_with_stdio(false);

    int tests; cin >> tests;
    for (int test = 1; test <= tests; ++test) {
        int n, k; cin >> n >> k;
        init();
        for (int i = 0; i < n; ++i) {
            string s; cin >> s;
            add(s);
        }
        dfs(0);
        printf("Case #%d: %d\n", test, dp[0][k]);
    }

    return 0;
}

#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

int g[30000][26], nn, k, depth[30000], cnt[30000], z2[21000][110][30], z[21000][110];
bool fin[30000];
char s[30000];

void read() {
  memset(g, -1, sizeof(g));
  memset(fin, 0, sizeof(fin));
  memset(cnt, 0, sizeof(cnt));
  int n;
  scanf("%d%d", &n, &k);
  gets(s);
  nn = 1;
  forn(i, n) {
    gets(s);
    int v = 0;
    int sz = (int)strlen(s);
    for (int j = 0; s[j]; j++) {
      cnt[v]++;
      if (g[v][s[j] - 'a'] == -1) {
        depth[nn] = j + 1;
        g[v][s[j] - 'a'] = nn++;
      }
      v = g[v][s[j] - 'a'];
    }
    cnt[v]++;
    fin[v] = true;
  }
}

void gen() {

}

int rec(int v, int k);

int rec2(int v, int k, int pos) {
  if (pos == 26)
    return k == 0 ? 0 : INF;
  if (z2[v][k][pos] != -1)
    return z2[v][k][pos];

  int res = INF;
  if (g[v][pos] == -1) {
    res = rec2(v, k, pos + 1);
  } else {
    for (int i = 0; i <= k; i++) {
      int down = rec(g[v][pos], i);
      if (down == INF)
        continue;
      res = min(res, down + rec2(v, k - i, pos + 1));
    }
  }
  return z2[v][k][pos] = res;
}

int rec(int v, int k) {
  if (k > cnt[v])
    return INF;
  if (k == 0)
    return 0;
  if (k == 1 && v)
    return depth[v];
  if (z[v][k] != -1)
    return z[v][k];

  int res;
  if (!fin[v])
    res = rec2(v, k, 0);
  else
    res = depth[v] + rec2(v, k - 1, 0);
  return z[v][k] = res;
}

void solve() {
  memset(z, -1, sizeof(z));
  memset(z2, -1, sizeof(z2));
  int res = rec(0, k);
  cout << res << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
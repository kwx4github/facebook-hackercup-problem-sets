#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
struct node {
    node * ch[26]; 
    bool hasc, end;
    void dp(int*); 
} root[8234123], *all = root + 1;
int n, kk;
template<class T> inline void mint(T& a, T b) { if (a > b) a = b; }
void node::dp(int *wri) {
    memset(wri, 63, sizeof(int) * (kk + 1));
    wri[0] = 0; if (end) wri[1] = 1; 
    int *f0 = new int[kk + 1];
    for (int i = 0; i < 26; ++i) if (ch[i]) {
        ch[i]->dp(f0);
        for (int j = kk; j; --j) for (int m = j; m; --m) 
            mint(wri[j], wri[j - m] + f0[m] + m);
    } if (hasc && this != root) wri[1] = 1;
} 
void insert(char* p) {
    node *g = root;
    for (; *p; ++p) {
        node *& w = g->ch[*p - 'a'];
        if (!w) w = all++;
        g->hasc = true; g = w;
    }
    g->end = true;
}
char in[1234123];
int work() {
    scanf("%d%d", &n, &kk); memset(root, 0, sizeof(root)); all = root + 1;
    for (int i = 0; i < n; ++i)  { 
        scanf("%s", in); 
        insert(in); 
    }
    int* f0 = new int[kk + 1]; root->dp(f0);
    int ans = f0[kk] - kk; delete f0; return ans;
}
int main() {
    int T; scanf("%d", &T);
    for (int i = 1; i <= T; ++i) 
        printf("Case #%d: %d\n", i, work());
}



#include <iostream>
#include <cstring>
#include <cstdio>
#include <string>
#include <map>
using namespace std;

#define MAXNODES 1048576
#define MAXN 128
#define INF 1000000000

int NODES, dp[MAXNODES][MAXN];

struct node {
	int down, right, weight;
	map<char, int> c;
} n[MAXNODES];

void init() {
	NODES = 1;
	for (int i=0; i<MAXNODES; i++) n[i].c.clear();
}

void insert(string s) {
	int cur = 0, i;
	for (i=0; i<(int)s.size(); i++) {
		if (n[cur].c.find(s[i]) == n[cur].c.end()) n[cur].c[s[i]] = NODES++;
		cur = n[cur].c[s[i]];
	}
	n[cur].c['\0'] = NODES++;
}

void dfs(int cur) {
	if ((int)n[cur].c.size() == 0) {
		n[cur].weight = 1;
		n[cur].down = -1;
	} else {
		int next, prev = -1;
		n[cur].weight = 0;
		n[cur].down = n[cur].c.begin()->second;
		for (map<char, int>::iterator it=n[cur].c.begin(); it!=n[cur].c.end(); it++) {
			next = it->second;
			dfs(next);
			n[cur].weight += n[next].weight;
			if (prev != -1) n[prev].right = next;
			prev = next;
		}
		n[next].right = -1;
	}
}

int _dp(int cur, int cant) {
	if (dp[cur][cant] == -1) {

		if (n[cur].right == -1) {
			if (n[cur].weight < cant) dp[cur][cant] = INF;
			else dp[cur][cant] = _dp(n[cur].down, cant) + ( cant > 1 ? cant : 0 );
		} else if (n[cur].down == -1) dp[cur][cant] = (cant > 1 ? _dp(n[cur].right, cant-1)-1 : 0 );
		else {
			dp[cur][cant] = INF;
			for (int i=0; i<=min(cant, n[cur].weight); i++) dp[cur][cant] = min(dp[cur][cant], _dp(n[cur].down, i) + _dp(n[cur].right, cant-i) + ( i > 1 ? i : 0 ) );// + ( n[cur].weight - i > 1 ? n[cur].weight - i : 0 ) 
		}
	}
	return dp[cur][cant];
}

int main() {
	int T, t, N, i, j, K;
	string tmps;
	
	cin >> T;
	for (t=1; t<=T; t++) {
		cin >> N >> K;
		
		init();	
		for (i=0; i<N; i++) {
			cin >> tmps;
			insert(tmps);
		}
		
		dfs(0); n[0].right = -1;

		memset(dp, -1, sizeof(dp));
		for (i=0; i<NODES; i++) if (n[i].down == -1 && n[i].right == -1) {
			dp[i][0] = dp[i][1] = 0;
			for (j=2; j<MAXN; j++) dp[i][j] = INF;
		}
		cout << "Case #" << t << ": " << ( K > 1 ? _dp(0, K) : 1 ) << endl;
	}
	
	return 0;
}

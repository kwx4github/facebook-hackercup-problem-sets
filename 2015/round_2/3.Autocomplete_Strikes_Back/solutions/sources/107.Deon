#include <iostream>
#include <ctime>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <utility>
#include <cctype>
#include <list>
#include <bitset>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#define MAXK 105
#define MAXC 20005
#define INF 100000000

int K;
int tmp[MAXK];
struct trie_t {
	bool has_exact;
	map<char,trie_t> next;
	int dp[MAXK];
	
	void clear() {
		for(map<char,trie_t>::iterator it = next.begin(); it != next.end(); ++it) {
			it->second.clear();
		}
		next.clear();
		
		has_exact = false;
		FORALL(k,0,K) dp[k] = INF;
	}
	
	trie_t() : has_exact(false), next() {
		FORALL(k,0,K) dp[k] = INF;
	}
	
	void insert(char* s) {
		if (!(*s)) {has_exact = true; return;}
		next[s[0]].insert(s+1);
	}
	
	void solve() {
		dp[0] = 0;
		dp[1] = (has_exact?0:INF);
		FORALL(k,2,K) dp[k] = INF;
		
		for(map<char,trie_t>::iterator it = next.begin(); it != next.end(); ++it) {
			it->second.solve();
			FORALL(k,0,K) {
				tmp[k] = INF;
				int* ep = it->second.dp;
				
				FORALL(k1,0,k){
					int k2 = k-k1;
					int here = dp[k1] + (k2==1?1:k2 + ep[k2]);
					tmp[k] = min(tmp[k],here);
				}
			}
			
			FORALL(k,0,K) dp[k] = min(dp[k],tmp[k]);
		}
	}
} T;

char buf[MAXC];
int main() {
	int TEST,N;
	scanf("%d",&TEST);
	FOR(test,TEST) {
		scanf("%d%d",&N,&K);
		T.clear();
		FOR(i,N) {
			scanf("%s",&buf[0]);
			T.insert(buf);
		}
		T.solve();
		int ans = T.dp[K];
		printf("Case #%d: %d\n",(test+1),ans);
	}
}













#include <bits/stdc++.h>

using namespace std;

const int infty = 1e9;

int n, k;

int tmp[105];

string s;

struct trie
{
	trie * lit['z' - 'a' + 1];
	int dp[105];

	int ile;
	int roz;

	void wypisz()
	{
		printf("%s: ile = %d, roz = %d\n", s.c_str(), ile, roz);
		for(int i = 0; i <= k; i++)
			printf("  dp[%d] = %d\n", i, dp[i]);
	}

	void przejdz()
	{
		vector<int> graf;
		for(int i = 'a'; i <= 'z'; i++)
			if(lit[i - 'a'] != nullptr)
				graf.push_back(i - 'a');
		for(int i = 0; i <= k; i++)
			dp[i] = infty;
		dp[0] = 0;
		if(roz == 0)
		{
			//wypisz();
			return;
		}
		if(roz == 1)
		{
			dp[1] = 0;
			//wypisz();
			return;
		}
		for(int i : graf)
		{
			s += (char) (i + 'a');
			lit[i]->przejdz();
			s = s.substr(0, s.length() - 1);
		}
		//printf("S = %s\n", s.c_str());
		//printf("dp[1] = %d\n", dp[1]);
		for(int i : graf)
		{
			//printf(" >i = %c\n", (char) i + 'a');
			for(int j = 0; j <= k; j++)
			{
				tmp[j] = infty;
				for(int h = 0; h <= j; h++)
				{
					//printf("      min z %d + %d + %d\n", dp[j - h], lit[i]->dp[h], h);
					tmp[j] = min(tmp[j], dp[j - h] + lit[i]->dp[h] + h);
				}
				//printf("    tmp[%d] = %d\n", j, tmp[j]);
			}
			for(int j = 0; j <= k; j++)
				dp[j] = tmp[j];
		}
		for(int i = k; i >= 0; i--)
			for(int j = 1; j <= ile && j <= i; j++)
				dp[i] = min(dp[i], dp[i - j]);
		if(roz >= 1)
			dp[1] = 0;
		//wypisz();
	}

	trie() : ile(0), roz(0)
	{
		for(int i = 'a'; i <= 'z'; i++)
			lit[i - 'a'] = nullptr;
	}

	trie * getL(char l)
	{
		if(lit[l - 'a'] == nullptr)
			lit[l - 'a'] = new trie();
		return lit[l - 'a'];
	}

	void dodaj(char *s)
	{
		roz++;
		if(*s == 0)
			ile++;
		else
			getL(*s)->dodaj(s + 1);
	}
};

char nap[20005];

void przyp()
{
	scanf("%d%d", &n, &k);
	trie root;
	for(int i = 0; i < n; i++)
	{
		scanf("%s", nap);
		root.dodaj(nap);
	}
	root.przejdz();
	printf("%d\n", root.dp[k]);
}

int main()
{
	int t;
	scanf("%d", &t);
	for(int i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		przyp();
	}
	return 0;
}

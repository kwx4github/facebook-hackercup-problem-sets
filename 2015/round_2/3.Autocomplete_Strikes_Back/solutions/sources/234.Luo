#include <cstdio>
#include <cstring>

using namespace std;

const int MAXN = 20005, MAXK = 101, C = 26;

struct Node{
	int nxt[C];
	int len, sz;
	bool end;
} tr[MAXN];

int dp[MAXN][MAXK];
char st[MAXN];
int r, ts, n, K;

void init()
{
	memset(tr, 0, sizeof(tr));
	r = ts = 1;
	scanf("%d%d", &n, &K);
	for (int i = 0; i < n; i ++){
		scanf("%s", st);
		int p = r, l = strlen(st);
		for (int j = 0; j < l; j ++){
			int ch = st[j] - 'a';
			if (!tr[p].nxt[ch]){
				tr[p].nxt[ch] = ++ ts;
				tr[ts].len = tr[p].len + 1;
			}
			tr[p].sz ++;
			p = tr[p].nxt[ch];
		}
		tr[p].sz ++;
		tr[p].end = true;
	}
}

void dfs(int t)
{
	for (int i = 0; i < C; i ++)
		if (tr[t].nxt[i] > 0)
			dfs(tr[t].nxt[i]);
	int m = K;
	if (tr[t].sz < m){
		m = tr[t].sz;
	}
	for (int i = 1; i <= K; i ++)
		dp[t][i] = MAXN * K;
	dp[t][0] = 0;
	//1 ~ m
	int len = tr[t].len;
	if (tr[t].end)
		dp[t][1] = len;
	for (int i = 0; i < C; i ++)
		if (tr[t].nxt[i] > 0){
			int l = K, v = tr[t].nxt[i];
			if (l > tr[v].sz) l = tr[v].sz;
			for (int k = m; k >= 1; k --)
				for (int j = 1; j <= l && j <= m; j ++)
				{//j in k
					int &r = dp[t][k];
					int d = dp[v][j];
					if (j == 1) d = len + 1;
					d += dp[t][k-j];
					if (r > d) r = d;
				}
		}
}

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t ++){
		init();
		dfs(1);
		printf("Case #%d: %d\n", t, dp[1][K]);
	}
	return 0;
}

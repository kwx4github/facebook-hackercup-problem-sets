#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>

using namespace std;
typedef long long LL;

int INF = 20000 * 1000;
typedef struct trie {
  int value[26];
  int capat;
  struct trie *next[26];
  vector<int> dp; 
  trie() {
    for (int i = 0; i < 26; ++i) {
      value[i] = 0;
      next[i] = NULL;
    }
    capat = 0;
  }
} trie;

string s;
void addWord(trie *nod, int pos) {
  if (pos == s.size()) {
    nod->capat = 1;
    return;
  }
  int id = s[pos] - 'a';
  if (nod->next[id] == NULL) {
    nod->next[id] = new trie;
  }
  nod->value[id]++;
  addWord(nod->next[id], pos + 1);
}

void deleteTrie(trie *nod) {
  if (nod == NULL) return;
  for (int i = 0; i < 26; ++i) deleteTrie(nod->next[i]);
  delete nod;
}

void go(trie *nod, int litera) {
  for (int i = 0; i < 26; ++i) if (nod->next[i]) go(nod->next[i], i); 
  int n = nod->capat;
  for (int i = 0; i < 26; ++i) n += nod->value[i];
  nod->dp.resize(n + 1);
  for (int i = 0; i <= n; ++i) nod->dp[i] = INF;
  nod->dp[0] = 0; if (nod->capat) nod->dp[1] = 0;
  for (int i = 0; i < 26; ++i) if (nod->next[i]) {
    trie *fiu = nod->next[i];
    for (int am = n; am >= 0; --am)
      for (int aleg = 0; aleg < fiu->dp.size(); ++aleg) if (am + aleg <= n) {
        int now = fiu->dp[aleg] + nod->dp[am];
        if (now < nod->dp[am + aleg]) nod->dp[am + aleg] = now;
      }
  }
  if (litera != -1) {
    for (int i = 0; i <= n; ++i) nod->dp[i] += i;
    if (n >= 1) nod->dp[1] = 1;
  }
  /*
  cout << char('a' + litera) << ' ' << nod->capat << '\n';
  for (int i = 0; i <= n; ++i) cout << nod->dp[i] << ' '; cout << '\n';
  */
}

int N, K;

int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    trie *root = new trie;
    cin >> N >> K;
    for (int i = 1; i <= N; ++i) {
      cin >> s;
      addWord(root, 0);
    }
    go(root, -1);
    cout << "Case #" << t << ": " << root->dp[K] << '\n';
    deleteTrie(root);
  }
  return 0;
}

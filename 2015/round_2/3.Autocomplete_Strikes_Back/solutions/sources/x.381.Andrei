import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class C {

	private Scanner sc;
	private BufferedWriter out;
	
	private class Node {
		int[] count = new int[26];
		Node[] nodes = new Node[26];
	}
	
	private class CountWord {
		String word;
		int count;
	}
	
	private void add(Node node, String s, int toAdd) {
		if (s.length() == 0) {
			return;
		}
		int index = s.charAt(0) - 'a';
		if (node.count[index] == 0) {
			node.nodes[index] = new Node();
		}
		node.count[index] += toAdd;
		add(node.nodes[index], s.substring(1), toAdd);
	}
	
	public static void main(String[] args) throws IOException {
		new C().solve();
	}
	
	private int comp(Node node, String s) {
		if (s.length() == 0) {
			return 0;
		}
		int index = s.charAt(0) - 'a';
		if (node.count[index] == 0) {
			System.out.println("Error!!!!");
		}
		if (node.count[index] == 1) {
			return 1;
		} else {
			return 1 + comp(node.nodes[index], s.substring(1));
		}
	}
	
	private String solveCase() {
		int n = sc.nextInt(), k = sc.nextInt();
		Node root = new Node();
		Set<String> words = new HashSet<String>();
		for (int i = 0; i < n; i++) {
			String word = sc.next();
            add(root, word, 1);
            words.add(word);
		}
		for (int i = 0; i < n - k; i++) {
			String wordd = null;
			int longest = 0;
			for (String word : words) {
				int cur = comp(root, word);
				if (cur > longest) {
					longest = cur;
					wordd = word;
				}
			}
			add(root, wordd, -1);
			words.remove(wordd);
		}
		int sum = 0;
		for (String word : words) {
			sum += comp(root, word);
		}
		return String.valueOf(sum);
	}
	
	private void solve() throws IOException {
		//sc = new Scanner(System.in);
		sc = new Scanner(new File("C.in"));
		out = new BufferedWriter(new FileWriter("C.out"));
		int nrt = sc.nextInt();
		for (int i = 0; i < nrt; i++) {
			System.out.println("test " + i);
			out.write("Case #" + (i + 1) + ": " + solveCase());
			out.newLine();
		}
		out.close();
	}
}

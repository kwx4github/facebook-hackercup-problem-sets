#include<bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;
typedef long long int LL;

#define sd(x) scanf("%d", &x)
#define MP make_pair
#define PB push_back
#define vi vector<int>
#define F first
#define S second
#define INF 1000000000
#define MOD 1000000007
#define D double
#define LD long double

#define N 112345
#define C 26
#define K 105

int nxt[N][C];
int dp[N][K], a[K];
int k;
string s;
char in[N];
bool ee[N];
int nc;

void Insert(){
	int l = s.length();	
	int r = 0;
	for(int j, i = 0; i < l; i++){
		j = s[i] - 'a';
		if(nxt[r][j] == -1){
			nc++;
			nxt[r][j] = nc;
		}
		r = nxt[r][j];
		//cout<<r<<" "<<i<<" "<<j<<endl;
	}
	ee[r] = true;
}

inline void solve(){
	int n, i, j, k, jc, l, c;
	bool flag;
	sd(n); sd(k);
	nc = 0;
	memset(nxt, -1, sizeof nxt);
	memset(ee, false, sizeof ee);
	for(i = 0; i < n; i++){
		scanf("%s", in);
		s = in;
		Insert();
	}
	if(k == 1){
		printf("1\n");
		return;
	}
	for(i = nc; i >= 0; i--){
		for(j = 1; j <= k; j++){
			dp[i][j] = INF;
		}
		dp[i][0] = 0;
		flag = true;
		for(l = 0; l < C; l++){
			if(nxt[i][l] == -1){
				continue;
			}
			c = nxt[i][l];
			if(flag == true){
				for(j = 0; j <= k; j++){
					dp[i][j] = dp[c][j];
				}
				flag = false;
				continue;
			}
			for(j = 0; j <= k; j++){
				a[j] = INF;
				for(jc = 0; jc <= j; jc++){
					a[j] = min(a[j], dp[c][jc] + dp[i][j - jc]);
				}
			}
			for(j = 0; j <= k; j++){
				dp[i][j] = a[j];
			}
		}
		if(ee[i] == true){
			for(j = k; j > 0; j--){
				dp[i][j] = dp[i][j - 1];
			}
		}
		dp[i][1] = 0;
		for(j = 1; j <= k; j++){
			dp[i][j] += j;
			//cout<<i<<" "<<j<<" "<<dp[i][j]<<endl;
		}
	}
	cout<<dp[0][k] - k<<endl;
}

int main(){
	freopen("autocomplete_strikes_back.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t = 20;
	sd(t);
	//double st = clock();
	for(int i = 1; i <= t; i++){
		printf("Case #%d: ", i);
		solve();
	}	
	return 0;
}


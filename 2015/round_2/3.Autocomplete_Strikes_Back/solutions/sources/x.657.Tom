#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
using namespace std;
const int MOD = int(1e9) + 7;

void addIt(int&x, int c) {
	x += c;
	if (x >= MOD)
		x -= MOD;
}

int dp[2002][2002];
int dp2[2002][2002];

int main() {
	int T;
	cin >> T;

	dp[0][0] = 1;
	for (int me = 0; me <= 2000; ++me) {
		for (int op = 0; op < me; ++op) {
			//me>op
			if (op > 0)
				addIt(dp[me][op], dp[me][op - 1]);
			if (me - 1 > op)
				addIt(dp[me][op], dp[me - 1][op]);
			if (me == 1 && op == 0)
				addIt(dp[me][op], dp[me - 1][op]);
		}
	}

	dp2[0][0] = 1;
	for (int me = 0; me <= 2000; ++me) {
		for (int op = me; op <= 2000; ++op) {
			//me <= op
			if (me > 0)
				addIt(dp2[me][op], dp2[me - 1][op]);
			if (me < op)
				addIt(dp2[me][op], dp2[me][op - 1]);
		}
	}

	for (int nc = 1; nc <= T; ++nc) {
		int me, op;
		scanf("%d-%d", &me, &op); //me>op
		int ret = 0;
		if (op == 0) {
			ret = 1;
		} else {
			for (int before = 0; before <= op - 1; ++before) {
				addIt(ret, dp2[before][op - 1]);
			}
		}
		printf("Case #%d: %d %d\n", nc, dp[me][op], ret);
	}
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define INF 1000000000

struct Trie {
	Trie *f[26];
	int subSize;
	bool flag;
	vector<int> dp;
	
	Trie() {
		memset(f, 0, sizeof(f));
		subSize = 0;
		flag = false;
	}
	~Trie() {
		for (int i = 0; i < 26; i++) {
			if (f[i] != NULL) {
				delete f[i];
			}
		}
		dp.clear();
	}
};

int T, N, K;
string S;
Trie *root;

void go(Trie *t) {
	for (int i = 0; i < 26; i++) {
		if (t->f[i] != NULL) {
			go(t->f[i]);
		}
	}
	t->dp.assign(K + 1, INF);
	t->dp[0] = 0;
	if (t->flag) {
		t->dp[1] = 0;
	}
	Trie *x;
	for (int i = 0; i < 26; i++) {
		if (t->f[i] != NULL) {
			x = t->f[i];
			for (int k = K; k >= 0; k--) {
				for (int j = 1; j <= x->subSize && j + k <= K; j++) {
					int nk = j + k;
					int cost = j;
					t->dp[nk] = min(t->dp[nk], t->dp[k] + x->dp[j] + cost);
				}
				if (k + 1 <= K) {
					int nk = k + 1;
					if (x->subSize > 0) {
						t->dp[nk] = min(t->dp[nk], t->dp[k] + 1);
					}
				}
			}
			x->dp.clear();
		}
	}
	
//	cout << t->len << endl;
//	for (int i = 0; i <= K; i++) {
//		cout << t->dp[i] << " ";
//	}
//	cout << endl;
}

void add(string &s) {
	Trie *t = root;
	t->subSize++;
	for (size_t i = 0; i < s.size(); i++) {
		int p = s[i] - 'a';
		if (t->f[p] == NULL) {
			t->f[p] = new Trie();
		}
		t = t->f[p];
		t->subSize++;
	}
	t->flag = true;
}

int main() {
	freopen("date.in", "r", stdin);
	freopen("date.out","w", stdout);
	cin.sync_with_stdio(false);
	
	cin >> T;
	for (int t = 1; t <= T; t++) {
		cerr << t << endl;
		root = new Trie();
		cin >> N >> K;
		for (int i = 0; i < N; i++) {
			cin >> S;
			add(S);
		}
		go(root);
		int ans = root->dp[K];
		cout << "Case #" << t << ": " << ans << endl;
		delete root;
	}
	
//	srand(time(0));
//	int len = 0;
//	int num = 0;
//	for (int i = 1; ; i++) {
//		if (len + i > 20000) {
//			break;
//		}
//		for (int j = 0; j < len; j++) {
////			cout << (char) ('a' + rand() % 26);
//			cout << (char) ('a');
//		}
//		cout << '\n';
//		len += i;
//		num++;
//	}
//	cout << num << '\n';
//	cerr << len << '\n';
	
//	for (int i = 0; i < 20000; i++) {
//		cout << 'a';
//	}
	
	return 0;
}

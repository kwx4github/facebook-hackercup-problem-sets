#pragma comment(linker, "/stack:32000000")
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

struct node {
	int to[30];
	bool hasword;
	node() {
		memset(to,-1,sizeof(to));
		hasword = 0;
	}
};


vector<node> t;
vector<int> order;
vector<int> subsize;
vector<int> dep;

void addword(const string& s) {
	int cur = 0;
	for (int i = 0; i < sz(s); ++i) {
		int ch = s[i]-'a';
		if (t[cur].to[ch] == -1) {
			t[cur].to[ch] = sz(t);
			t.pb(node());
		}
		cur = t[cur].to[ch];
	}
	t[cur].hasword = true;
}

void dfs(int x, int d) {
	order.pb(x);
	subsize[x] = 1;
	dep[x] = d;
	forn(i, 30) if (t[x].to[i] != -1) {
		dfs(t[x].to[i], d+1);
		subsize[x] += subsize[t[x].to[i]];
	}
}

const int cinf = 1000000010;

void solve() {
	t.clear();
	t.pb(node());
	order.clear();
	int n, k; scanf("%d%d", &n, &k);
	forn(i, n) {
		string cur; cin >> cur;
		addword(cur);
	}
	subsize = vector<int>(sz(t));
	dep = subsize;
	dfs(0, 0);
	vector<vector<int> > dp(sz(order)+1, vector<int>(k+1, cinf));
	dp[sz(order)][0] = 0;
	for (int ii = sz(order) - 1; ii >= 0; --ii) {
		int cur = order[ii];
		int cursize = subsize[order[ii]];
		int toi = ii+cursize;
		forn(j, k+1) {
			dp[ii][j] = dp[ii+1][j];
			if (!t[cur].hasword) {
				if (j) dp[ii][j] = min(dp[ii][j], dp[toi][j-1]+dep[cur]);
			} else {
				if (j) dp[ii][j] = min(dp[ii][j], dp[ii+1][j-1]+dep[cur]);
			}
		}
	}
	int ans = dp[0][k];
	printf("%d\n", ans);
}

int main()
{
//#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
//#endif
	int T; scanf("%d", &T); for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << "\n";
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdlib>
#include <queue>
#include <set>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <bitset>
#include <sstream>
#include <cassert>

using namespace std;

struct trie {
	int next[26];
	bool is;
	int size;
};

trie t[20001];
int n, k, N, dp[20001][101], f[26];
char buf[20001];
string s[4000];

void dfs(int v) {
	for (int i = 0; i < 26; ++i) {
		if (t[v].next[i] != -1)
			dfs(t[v].next[i]);
	}
	priority_queue<pair<int, int> > q;
	for (int i = 0; i < 26; ++i) {
		if (t[v].next[i] != -1) {
			f[i] = 1;
			q.push(make_pair(0, i));
		}
	}
	int n = t[v].size;
	if (t[v].is)
		--n;
	if (v == 1) {
		int l = 7;
	}
	for (int i = 1; i <= n; ++i) {
		pair<int, int> w = q.top();
		q.pop();
		int j = w.second, u = t[v].next[j], cost = -w.first;
		dp[v][i] = dp[v][i - 1] + cost;
		if (f[j] < t[u].size) {
			q.push(make_pair(dp[u][f[j]] - dp[u][f[j] + 1], j));
			++f[j];
		}
	}
	for (int i = 2; i <= n; ++i)
		dp[v][i] += i;
	if (t[v].is) {
		++dp[v][1];
		for (int i = n + 1; i > 1; --i)
			dp[v][i] = dp[v][i - 1];
		dp[v][1] = 0;
	}
}

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	int T;
	scanf("%d", &T);
	for (int te = 1; te <= T; ++te) {
		scanf("%d %d", &n, &k);
		for (int i = 0; i < n; ++i) {
			scanf("%s", buf);
			s[i] = buf;
		}
		memset(t[0].next, -1, 26 * sizeof(int));
		t[0].size = 0;
		t[0].is = false;
		N = 1;
		for (int i = 0; i < n; ++i) {
			int cur = 0;
			for (int j = 0; j < s[i].size(); ++j) {
				int d = s[i][j] - 'a';
				++t[cur].size;
				if (t[cur].next[d] == -1) {
					memset(t[N].next, -1, 26 * sizeof(int));
					t[N].size = 0;
					t[N].is = false;
					t[cur].next[d] = N;
					++N;
				}
				cur = t[cur].next[d];
			}
			t[cur].is = true;
			++t[cur].size;
		}
		dfs(0);
		++dp[0][1];
		printf("Case #%d: %d\n", te, dp[0][k]);
	}
    return 0;
}
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
#include<map>
#include<set>
using namespace std;
#define INF (1<<29)
#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define FOR(i,x,y) for(int i=(x);i<(y);++i)
#define FOE(i,x,y) for(int i=(x);i<=(y);++i)
#define CLR(i) memset(i,0,sizeof(i))
#define ll long long

struct trie_n{
	trie_n *nt[28];
	int flag;

	trie_n(){
		flag = 0;
		CLR(nt);
	}
} *rt = new trie_n();

void add(char *s,int len){
	trie_n *p = rt;
	FOR(i,0,len){
		if (!p->nt[s[i]-'a']) p->nt[s[i]-'a'] = new trie_n();
		p = p->nt[s[i]-'a'];
		p->flag++;
	}
}

int find(char *s,int len,int b){
	trie_n *p = rt;
	FOR(i,0,len){
		if (!p->nt[s[i]-'a']){
			p->nt[s[i]-'a'] = new trie_n();
			return i+1;
		}
		else{
			p = p->nt[s[i]-'a'];

			if (p->flag <= b) return i+1;
		}
	}
	return -1;
}

void release(trie_n *p = rt){
	for(int i=0;i<28;++i) if(p->nt[i]) release(p->nt[i]);
	delete p;
}

int T,N,K;
char s[4005][20005];
int len[4005];
bool used[4005];

int main(){
	scanf("%d",&T);
	FOE(t,1,T){
		CLR(used);
		release();

		rt = new trie_n();
		rt->flag = 100;

		scanf("%d%d",&N,&K); gets(s[0]);
		FOR(i,0,N){
			gets(s[i]);
			len[i] = strlen(s[i]);
		}

		FOR(i,0,K){
			int tar = 0, dd = -1;
			FOR(j,0,N){
				if (used[j]) continue;
				int tmp = find(s[j],len[j],0);
				if ((dd == -1) || (tmp < dd)) tar = j,dd = tmp;
			}
			used[tar] = 1;
			add(s[tar],len[tar]);
		}

		//puts("-----");
		int ans = 0;
		FOR(i,0,N){
			if (used[i]){
				//puts(s[i]);
				int x = find(s[i],len[i],1);
				if (x == -1) x = len[i];
				//printf("%d %d\n",x,len[i]);
				ans += x;
			}
		}

		printf("Case #%d: %d\n",t,ans);
	}
	return 0;
}

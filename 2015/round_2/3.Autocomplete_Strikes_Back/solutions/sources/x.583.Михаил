package com.company;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
    static BufferedReader in;
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;
    static Node root;

    public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(new FileInputStream("in.txt")));
        out = new PrintWriter("out.txt");
        int t = nextInt();

        for (int i = 0; i < t; i++) {
            out.print("Case #" + (i + 1) + ": ");

            int n = nextInt();
            int k = nextInt();
            root = new Node();
            for (int j = 0; j < n; j++) {
                String s = nextToken();
                add(root, s, 0);
            }
            push(root, 0);
            for (int j = 0; j < n - k; j++) {
                Node node = find(root);
                delete(node);
                push(root, 0);
            }

            out.println(calc(root) - root.value);

            out.flush();
        }

        in.close();
        out.flush();
        out.close();
    }

   static class Node {
       int value = 0;
       long push = 0;
       Node p = null;
       char c;
       Node[] next = new Node[26];
   }

    static void add(Node r, String s, int i) {
        r.value++;
        if(i >= s.length()) {
            return;
        }
        int to = s.charAt(i) - 'a';
        if(r.next[to] == null) {
            r.next[to] = new Node();
            r.next[to].c = s.charAt(i);
            r.next[to].p = r;
        }
        add(r.next[to], s, i + 1);
    }

    static void push(Node r, long sum) {
        if(r.value == 2) {
            sum+=2;
        } else if(r.value > 2) {
            sum++;
        }
        r.push = sum;
        for (int j = 0; j < 26; j++) {
            if (r.next[j] != null) {
                push(r.next[j], r.push);
            }
        }
    }

    static Node find(Node r) {
        Node res = null;

        for (int j = 0; j < 26; j++) {
            if (r.next[j] != null) {
                Node v = find(r.next[j]);
                if(res == null) {
                    res = v;
                } else if(v != null) {
                    if(res.push < v.push) {
                        res = v;
                    }
                }
            }
        }
        if (res == null) {
            res = r;
        }
        return res;
    }

    static void delete(Node r) {
        if(r == null) return;
        r.value--;
        Node p = r.p;
        if(r.value == 0 && p != null) {
            for (int i = 0; i < 26; i++) {
                if(p.next[i] == r) {
                    p.next[i] = null;
                    break;
                }
            }
        }
        delete(p);
    }

    static long calc(Node r) {
        long curres = r.value;
        if(r.value > 1) {
            for (int i = 0; i < 26; i++) {
                if (r.next[i] != null) {
                    curres += calc(r.next[i]);
                }
            }
        } else if(r.value == 1) {
            return 1;
        }
        return curres;
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return st.nextToken();
    }
}

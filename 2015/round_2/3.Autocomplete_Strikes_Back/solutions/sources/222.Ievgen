#include <iostream>
#include <string>
#include <cstdio>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>
#include <bitset>
#include <ctime>
#include <cmath>
#include <cstring>
#pragma comment(linker, "/STACK:256000000")

using namespace std;

const int maxN = 110;

struct node {
	node* a[26];
	vector <int> d;
	int cnt;

	node() {
		for (int i = 0; i < 26; ++i) {
			a[i] = NULL;
		}
		d.resize(maxN, 1000000000);
		cnt = 0;
	}
};

node* head;

void add(const string& s) {
	node* cur = head;
	for (int i = 0; i < s.length(); ++i) {
		if (!cur->a[s[i] - 'a']) {
			node* nnode = new node();
			cur->a[s[i] - 'a'] = nnode;
		}
		cur = cur->a[s[i] - 'a'];
	}
	++cur->cnt;
}

void rec(node* root, int dep) {
	if (root == NULL) {
		return;
	}
	for (int i = 0; i < 26; ++i) {
		rec(root->a[i], dep + 1);
	}

	vector <vector <int> > dp(2, vector <int>(maxN, 1000000000));

	int u = 0, v = 1;
	dp[u][0] = 0;

	for (int i = 0; i < 26; ++i, swap(u, v)) {
		dp[v] = vector <int>(maxN, 1000000000);
		for (int j = 0; j < maxN; ++j) {
			if (dp[u][j] == 1000000000) {
				continue;
			}
			dp[v][j] = min(dp[v][j], dp[u][j]);
			for (int k = 0; k + j < maxN; ++k) {
				if (root->a[i]) {
					dp[v][k + j] = min(dp[v][k + j], dp[u][j] + root->a[i]->d[k]);
				} else {
					break;
				}
			}
		}
	}

	if (root->cnt) {
		for (int i = 100; i >= 0; --i) {
			dp[u][i + 1] = min(dp[u][i + 1], dp[u][i] + dep);
		}
		dp[u][1] = min(dp[u][1], dep);
	}
	if (dep > 0) {
		dp[u][1] = min(dp[u][1], dep);
	}
	root->d = dp[u];
}

void solve(int tcase) {
	cout << "Case #" << tcase << ": ";
	int n, k;
	cin >> n >> k;
	head = new node();
	for (int i = 0; i < n; ++i) {
		string s;
		cin >> s;
		add(s);
	}

	rec(head, 0);
	cout << head->d[k] << endl;
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("autocomplete-strikes-back-isoboliev.txt", "w", stdout);

  ios_base::sync_with_stdio(false);

  int t;
  cin >> t;
  for (int i = 0; i < t; ++i) {
	  solve(i + 1);

	  cerr << i << endl;
	  cerr << (double)clock() / CLOCKS_PER_SEC << endl;
  }

  return 0;
}

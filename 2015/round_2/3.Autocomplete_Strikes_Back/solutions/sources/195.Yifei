#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <cctype>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <deque>
#include <bitset>
#include <iostream>
#include <sstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef pair <int, pii> piii;
typedef long double ld;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sz(X) ((int)((X).size()))

const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3fll;
const double pi = acos(-1.0);
const double eps = 1e-8;

template <class T>
inline T abs(const T x)
{
	return x < 0 ? -x : x;
}

template <class T>
inline void get_min(T &a, T b)
{
	if (a > b)
		a = b;
}

template <class T>
inline void get_max(T &a, T b)
{
	if (a < b)
		a = b;
}

template <class T>
inline void fix(T &a, T mo)
{
	while (a >= mo)
		a -= mo;
	while (a < 0)
		a += mo;
}

template <class T>
inline void inc(T &a, T b, T mo)
{
	a += b;
	fix(a, mo);
}

template <class T>
inline void dec(T &a, T b, T mo)
{
	a -= b;
	fix(a, mo);
}

template <class T>
inline T mul_mod(T a, T b, T mo)
{
	T ans = 0;
	for (; b; b >>= 1)
	{
		if (b & 1)
			inc(ans, a, mo);
		inc(a, a, mo);
	}
	return ans;
}

template <class T>
inline T pow_mod(T a, T b, T mo)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans = (ll)ans * a % mo;
		a = (ll)a * a % mo;
	}
	return ans;
}

template <class T>
inline T big_pow_mod(T a, T b, T mo)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans = mul_mod(ans, a, mo);
		a = mul_mod(a, a, mo);
	}
	return ans;
}

template <class T>
inline T pow(T a, int b)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans *= a;
		a *= a;
	}
	return ans;
}

template <class T>
inline T sqr(T x)
{
	return x * x;
}

template <class T>
inline int sgn(T x)
{
	if (x > eps)
		return 1;
	if (x < -eps)
		return -1;
	return 0;
}

template <class T>
inline void read_int(T &x)
{
	x = 0;
	char ch;
	bool flag = 0;
	while (ch = getchar(), !isdigit(ch) && ch != '-');
	if (ch == '-')
		flag = 1;
	else
		x = ch - '0';
	while (ch = getchar(), isdigit(ch))
		x = (x << 3) + x + x + ch - '0';
	if (flag)
		x = -x;
}

template <class T>
inline void read_float(T &x)
{
	x = 0;
	ld now_pos = 0.1;
	char ch;
	while (ch = getchar(), !isdigit(ch) && ch != '-');
	bool flag = 0, decimal = 0;
	if (ch == '-')
		flag = 1;
	else if (ch == '.')
		decimal = 1;
	while (ch = getchar(), isdigit(ch) || ch == '.')
	{
		if (ch == '.')
			decimal = 1;
		else if (decimal)
		{
			x += now_pos * (ch - '0');
			now_pos *= 0.1;
		}
		else
			x = x * 10 + ch - '0';
	}
	if (flag)
		x = -x;
}

#define maxn 20010
#define maxk 110

struct Node
{
	int size, dep;
	bool end;
	int f[maxk];
	Node *s[26];
}t[maxn], *root;

int k;
int ne;
Node* q[maxn];
char s[maxn];

inline Node* new_Node(int dep)
{
	Node* now = &t[ne ++];
	now->size = 0;
	now->end = 0;
	now->dep = dep;
	memset(now->f, 0x3f, sizeof(now->f));
	now->f[0] = 0;
	memset(now->s, 0, sizeof(now->s));
	return now;
}

inline void insert(char* s)
{
	int n = strlen(s);
	Node* now = root;
	for (int i = 0; i < n; i ++)
	{
		now->size ++;
		int x = s[i] - 'a';
		if (now->s[x] == NULL)
			now->s[x] = new_Node(i + 1);
		now = now->s[x];
	}
	now->end = 1;
	now->size ++;
}

inline void bfs()
{
	int op = 0, cls = 1;
	q[1] = root;
	while (op != cls)
	{
		Node* now = q[++ op];
		for (int i = 0; i < 26; i ++)
			if (now->s[i] != NULL)
				q[++ cls] = now->s[i];
	}
	for (int now_Node = cls; now_Node; now_Node --)
	{
		Node* now = q[now_Node];
		int now_sum = 0;
		if (now->end)
		{
			now_sum ++;
			now->f[1] = now->dep;
		}
		for (int x = 0; x < 26; x ++)
			if (now->s[x] != NULL)
			{
				Node* son = now->s[x];
				for (int i = min(now_sum, k); i >= 0; i --)
					for (int j = 1; j <= son->size && i + j <= k; j ++)
						get_min(now->f[i + j], now->f[i] + son->f[j]);
				now_sum += son->size;
			}
		now->f[1] = now->dep;
	}
}

int main()
{
	int T;
	read_int(T);
	for (int Case = 1; Case <= T; Case ++)
	{
		printf("Case #%d: ", Case);
		ne = 0;
		root = new_Node(0);
		int n;
		read_int(n);
		read_int(k);
		for (int i = 1; i <= n; i ++)
		{
			scanf("%s", s);
			insert(s);
		}
		bfs();
		printf("%d\n", root->f[k]);
	}
	return 0;
}


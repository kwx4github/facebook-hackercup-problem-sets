#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v, w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;
int INF = INT_MAX / 10;

vector<bool> hoge;

void f(string& s, int i, vector<map<char, int> >& a, int u) {
	if (i == s.length()) return;
	char c = s[i];
	if (!a[u].count(c)) {
		a[u][c] = a.size();
		map<char, int> m;
		a.push_back(m);
	}
	f(s, i + 1, a, a[u][c]);
}

int dfs2(int u, vector< vector<int> >& G, vector<bool>& b, vector<bool>& c) {
	if (G[u].size() >= 2) return hoge[u] ? 1 : 2;
	if (G[u].size() == 1) return 2 + dfs2(G[u][0], G, b, c);
	return INF;
}

int dfs(int u, vector< vector<int> >& G, vector<bool>& b, vector<bool>& c) {
	if (!b[u]) return 0;
	if (c[u]) return dfs2(u, G, b, c);
	int mini = INF;
	for (int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		mini = min(mini, dfs(v, G, b, c));
	}
	return mini + 1;
}

int y;

bool _dfs2(int u, int x, vector< vector<int> >& G, vector<bool>& b, vector<bool>& c) {
	if (G[u].size() >= 2) {
		if (x + (hoge[u] ? 1 : 2) == y) {
			y = -1;
			b[u] = true;
			b[G[u][0]] = true;
			b[G[u][1]] = true;
			c[G[u][0]] = true;
			c[G[u][1]] = true;
			return true;
		}
		else return false;
	}
	if (G[u].size() == 1) {
		if (_dfs2(G[u][0], x + 2, G, b, c)) {
			b[u] = true;
			return true;
		}
		else return false;
	}
	return false;
}

bool _dfs(int u, int x, vector< vector<int> >& G, vector<bool>& b, vector<bool>& c) {
	if (!b[u]) {
		if (x == y) {
			y = -1;
			b[u] = true;
			c[u] = true;
			return true;
		}
		else return false;
	}
	if (c[u]) {
		if (_dfs2(u, x, G, b, c)) {
			c[u] = false;
			return true;
		}
		else return false;
	}
	for (int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		if (_dfs(v, x + 1, G, b, c)) return true;
	}
	return false;
}

int main() {
	int T; cin >> T;
	for (int t = 1; t <= T; t++) {
		vector<map<char, int> > a;
		map<char, int> root;
		a.push_back(root);
		int N, K; cin >> N >> K;
		while (N--) {
			string s; cin >> s;
			s += '#';
			f(s, 0, a, 0);
		}
		int n = a.size();
		vector< vector<int> > G(n);
		hoge.assign(n, false);
		for (int u = 0; u < n; u++)
			for (map<char, int>::iterator it = a[u].begin(); it != a[u].end(); it++) {
				int v = it->second;
				if (it->first == '#')
					hoge[u] = true;
				G[u].push_back(v);
			}
		vector<bool> b(n), c(n);
		b[0] = true;
		ll sum = 0;
		while (K--) {
			y = dfs(0, G, b, c);
			sum += y;
			_dfs(0, 0, G, b, c);
		}
		printf("Case #%d: %d\n", t, sum);
	}
}
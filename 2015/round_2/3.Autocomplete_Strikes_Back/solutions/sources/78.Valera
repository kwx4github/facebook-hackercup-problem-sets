#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <numeric>

using namespace std;

#define sqr(a) ((a)*(a))
#define two(a) (1 << (a))
#define has(mask, a) ((mask) & two(a) ? 1 : 0)

#define next ghnfdkasg
#define end gndfkag

const int INF = (int)1e7;

string s[4005];

int n, wh[30005][30], next[30005], end[30005], first[30005], dp[30005][105], op[30005];
int k, nodes, edges;

void load() {
	cin >> n >> k;
	for (int i = 0;i < n;i++) {
		cin >> s[i];
	}
}

void add(string &s) {
	int n = s.size();
	int cur = 0;
	for (int i = 0;i < n;i++) {
		int c = s[i];
		if (wh[cur][c] == -1) {
			wh[cur][c] = edges;
			next[edges] = first[cur];
			end[edges] = nodes++;
			first[cur] = edges++;
		}
		cur = end[wh[cur][c]];
	}
	op[cur]++;
}

int go(int num, int k, int v) {
	if (num == first[v]) {
		k -= op[v];
	}

	if (k <= 0) return 0;
	if (num == -1) return INF;
	if (k == 1 && (num == first[v] && !op[v])) return 0;

	int &res = dp[num][k];
	if (res != -1) return res;
	res = INF;

	for (int i = 0;i <= k;i++) {
		int cur = go(first[end[num]], i, end[num]) + i + go(next[num], k - i, v);
		res = min(res, cur);
	}
	return res;
}

void solve(int test) {
	memset(first, -1, sizeof(first));
	memset(dp, -1, sizeof(dp));
	memset(wh, -1, sizeof(wh));
	memset(op, 0, sizeof(op));
	nodes = 1;
	edges = 0;

	for (int i = 0;i < n;i++) {
		add(s[i]);
	}

	printf ("Case #%d: %d\n", test, go(first[0], k, 0));
}

int main() {
 	freopen ("a.in", "r", stdin);

 	int t;
 	scanf ("%d\n", &t);

 	clock_t start = clock();
 	for (int i = 1;i <= t;i++) {
 		clock_t cur_start = clock();

 		fprintf(stderr, "Test %d:\n", i);
 		load();
 		solve(i);
 		fprintf(stderr, "Done in %.3f\n", (clock() - cur_start) / (double)CLOCKS_PER_SEC);
 	}

 	fprintf(stderr, "Total time: %.3f\n", (clock() - start) / (double)CLOCKS_PER_SEC);

 	return 0;
}
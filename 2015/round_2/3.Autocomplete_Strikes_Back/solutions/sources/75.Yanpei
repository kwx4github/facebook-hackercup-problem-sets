#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int T = 20000 + 10;
const int K = 100 + 10;
const int INF = K * T;

int n, k;
int tot, root;
int ok[T];
int children[T][26];
int f[T][K];

int newNode()
{
	memset(children[tot], -1, sizeof children[tot]);
	ok[tot] = false;
	return tot ++;
}

char s[T];

void add(char *c)
{
	int cur = root;
	for( ; *c; c ++) {
		if (children[cur][*c - 'a'] < 0) {
			children[cur][*c - 'a'] = newNode();
		}
		cur = children[cur][*c - 'a'];
	}
	ok[cur] = true;
}

void dfs(int u)
{
	for(int i = 0; i <= k; ++ i) {
		f[u][i] = INF;
	}
	f[u][0] = 0;
	if (ok[u]) {
		f[u][1] = 0;
	}

	for(int c = 0; c < 26; ++ c) {
		int v = children[u][c];
		if (v < 0) continue;
		dfs(v);
		for(int i = k; i >= 0; -- i) {
			f[u][i] = min(f[u][i], f[u][i - 1] + 1);
			for(int j = 2; j <= i; ++ j) {
				f[u][i] = min(f[u][i], f[u][i - j] + f[v][j] + j);
			}
		}
	}
}

void solve()
{
	cin >> n >> k;
	tot = 0;
	root = newNode();
	for(int i = 0; i < n; ++ i) {
		scanf("%s", s);
		add(s);
	}

	dfs(root);
	cout << f[root][k] << endl;
}

int main()
{
	int t;
	cin >> t;
	for(int i = 0; i < t; ++ i) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	return 0;
}

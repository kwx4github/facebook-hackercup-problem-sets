#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <deque>
#include <complex>
#include <string>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <valarray>
#include <unordered_map>
#include <iterator>
#include <functional>
#include <cassert>
using namespace std;
typedef long long int ll;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define REPS(i,x) for(int i=1;i<=(int)(x);i++)
#define RREP(i,x) for(int i=((int)(x)-1);i>=0;i--)
#define RREPS(i,x) for(int i=((int)(x));i>0;i--)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
#define ALL(container) (container).begin(), (container).end()
#define RALL(container) (container).rbegin(), (container).rend()
#define SZ(container) ((int)container.size())
#define mp(a,b) make_pair(a, b)
#define pb push_back
#define eb emplace_back
#define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() );

template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
}
template<class T> ostream& operator<<(ostream &os, const set<T> &t) {
os<<"{"; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"}"; return os;
}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
template<class S, class T> pair<S,T> operator+(const pair<S,T> &s, const pair<S,T> &t){ return pair<S,T>(s.first+t.first, s.second+t.second);}
template<class S, class T> pair<S,T> operator-(const pair<S,T> &s, const pair<S,T> &t){ return pair<S,T>(s.first-t.first, s.second-t.second);}

const int INF = 1<<29;
const double EPS = 1e-8;
const int MOD = 1000000007;

int T, n, m;

struct Node{
	Node *p[30];
	int dp[101];
	int end;
	Node(){
		memset(p, 0, sizeof(p));
		REP(i, 101) dp[i] = INF;
		dp[0] = 0;
		end = 0;
	}
};

void add(string &s, Node *p, int i=0){
	if(i == s.size()){
		p->end = 1;
		return ;
	}
	int t = s[i] - 'a';
	if(!p->p[t]) p->p[t] = new Node();
	add(s, p->p[t], i+1);
}

void clear(Node *p){
	REP(i, 30)if(p->p[i])clear(p->p[i]);
	delete p;
}

void dfs(Node *p, int lev=0){
	int *dp = p->dp;
	REP(i, 30)if(p->p[i]){
//		cout << string(lev, ' ') << (char)('a'+i) << endl;
		dfs(p->p[i], lev+1);
		int *ch = p->p[i]->dp;
		RREP(j, m)if(dp[j] < INF)REPS(i, m-j+1)if(ch[i] < INF)
			dp[i+j] = min(dp[i+j], dp[j]+ch[i]+(lev?i:0));
	}
//	REP(i, m+1) if(dp[i] < INF) cout << string(lev, ' ') << "dp[" << i << "] = " << dp[i] << endl;
	if(p->end) RREP(j, m) dp[j+1] = min(dp[j+1], dp[j]+1);
	if(lev) dp[1] = 1;
//	REP(i, m+1) if(dp[i] < INF) cout << string(lev, ' ') << "dp[" << i << "] = " << dp[i] << endl;
}


int main(int argc, char *argv[]){
	ios::sync_with_stdio(false);
	cin >> T;
	REPS(t, T){
		Node* root = new Node();
		cin >> n >> m;
		int ans = 0;
		vector<string> s(n);
		REP(i, n){
			cin >> s[i];
			add(s[i], root);
		}
		dfs(root);
//		cerr << "Case #" << t << ": " << root->dp[m] << endl;
		cout << "Case #" << t << ": " << root->dp[m] << endl;
	}
	return 0;
}

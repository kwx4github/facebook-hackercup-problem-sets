#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<algorithm>
#include<cmath>
#include<set>
#include<queue>
#include<sstream>
#include<utility>
#include<map>
#include<ctime>
#include<cstdio>
#include<cassert>
#include<functional>




using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<char, char> pcc;
typedef pair<double, double> pdd;

#define show(x) cerr << x
#define debug(x) show(#x << ": " << (x) << endl)

const long double PI = 3.14159265358979323846;
const long double gammama = 0.57721566490153286060;
const long double eps = 1e-5;
const int INF = 1000 * 1000 * 1000 + 1;
const ll LINF = (ll)1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const ll mod = 1000 * 1000 * 1000 + 7;

int k;


struct vertex {
      vector<int> to;
      int sz;
      bool term;
      vector<int> dp;
      vertex() {
            to.assign(26, -1);
            term = sz = 0;
            dp.assign(k + 1, INF);
      }
      
};

struct trie {
      vector<vertex> tree;
      trie() {
            tree.resize(1);
      }
      void add(const string& s, int pos, int b) {
            ++tree[pos].sz;
            if (b == s.size()) {
                  tree[pos].term = 1;
                  return;
            }
            if (tree[pos].to[s[b] - 'a'] != -1) {
                  add(s, tree[pos].to[s[b] - 'a'], b + 1);
                  return;
            }
            tree.push_back(vertex());
            tree[pos].to[s[b] - 'a'] = tree.size() - 1;
            add(s, tree[pos].to[s[b] - 'a'], b + 1);
      }
      void add(const string& s) {
            add(s, 0, 0);
      }
};


void solve(int pos, trie& tr) {
      tr.tree[pos].dp[0] = 0;
      if (tr.tree[pos].term)
            tr.tree[pos].dp[1] = 0;
      for (int i = 0; i < 26; ++i) {
            if (tr.tree[pos].to[i] == -1)
                  continue;
            int to = tr.tree[pos].to[i];
            solve(to, tr);
            for (int c = k; c >= 0; --c) {
                  for (int j = 1; j <= k; ++j) {
                        if (j + c > k)
                              continue;
                        tr.tree[pos].dp[j + c] = min(tr.tree[pos].dp[j + c], tr.tree[pos].dp[c] + tr.tree[to].dp[j] + j);
                  }
            }
      }
      tr.tree[pos].dp[1] = 0;
      /*cerr << pos << "\n";
      for (int i = 0; i <= k; ++i)
            cerr << tr.tree[pos].dp[i] << "\t";
      cerr << endl;*/

 }

void solve() {      
      int n;
      cin >> n >> k;
      trie tr;
      for (int i = 0; i < n; ++i) {
            string s;
            cin >> s;
            tr.add(s);
      }
      if (k == 1) {
            cout << 1 << endl;
            return;
      }
      solve(0, tr);
      cout << tr.tree[0].dp[k] << endl;

}

void gen() {
      cout << 20 << endl;
      for (int i = 0; i < 20; ++i) {
            srand(i);
            cout << 4000 << " " << 100 << endl;
            for (int j = 0; j < 4000; ++j) {
                  
                  int l = (rand() % 9) + 1;
                  string s = "";
                  for (int ii = 0; ii < l; ++ii)
                        s += ('a' + (rand() % 26));
                  cout << s << endl;
            }
      }

}

#define LOCAL

int main() {
      //ios_base::sync_with_stdio(0);
#ifdef LOCAL
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
#endif
      //gen();
      int numberOfTests;
      cin >> numberOfTests;
      for (int testId = 0; testId < numberOfTests; ++testId) {
            cout << "Case #" << testId + 1 << ": ";
            solve();
            std::cerr << testId << endl;
      }

#ifdef LOCAL
      cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif	
      return 0;
}
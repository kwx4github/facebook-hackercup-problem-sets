#include <cassert>
#include <cstdio>
#include <cstring>

#include <algorithm>

using std::min;

const int maxk = 105;
const int limit = 20010;

struct Node {
  bool finish;
  Node *next[26];
  int res[maxk];
};

int nodes = 0;
Node memory[limit];
Node * node () {
  memory[nodes].finish = false;
  memset (memory[nodes].next, 0, sizeof (memory[nodes].next));
  return &memory[nodes++];
}

void solve ( Node * x ) {
  for (int i = 0; i < 26; i++)
    if (x->next[i])
      solve (x->next[i]);
  int res[2][maxk];
  for (int i = 0; i < maxk; i++)
    res[0][i] = (int)1e9;
  res[0][0] = 0;
  int t = 0; 
  for (int i = 0; i < 26; i++) {
    if (!x->next[i])
      continue;
    for (int j = 0; j < maxk; j++)
      res[t ^ 1][j] = (int)1e9;
    res[t ^ 1][0] = 0;
    for (int j = 0; j < maxk; j++)
      for (int k = 0; j + k < maxk; k++)
        res[t ^ 1][j + k] = min (res[t ^ 1][j + k], res[t][j] + x->next[i]->res[k] + k);
    t ^= 1;
  }
  if (x->finish) {
    for (int i = maxk - 1; i > 0; i--)
      res[t][i] = res[t][i - 1];
  } else {
    res[t][1] = 0;
  }
  for (int i = 0; i < maxk; i++)
    x->res[i] = res[t][i];
  /*
  for (int i = 0; i < 10; i++) {
    fprintf (stderr, "[x=%p] res[i=%d] = %d\n", x, i, x->res[i]);
  }
  //*/
}

int main () {
  int tn;
  assert (scanf ("%d", &tn) == 1);
  for (int t = 1; t <= tn; t++) {
    nodes = 0;
    Node *root = node ();
    int n, k;
    assert (scanf ("%d%d ", &n, &k) == 2);
    for (int i = 0; i < n; i++) {
      char s[limit];
      assert (fgets (s, limit - 1, stdin));
      int l = strlen (s);
      while (l > 0 && s[l - 1] == '\n')
        l--;
      Node *x = root;
      for (int j = 0; j < l; j++) {
        if (x->next[s[j] - 'a'] == 0)
          x->next[s[j] - 'a'] = node ();
        x = x->next[s[j] - 'a'];
      }
      x->finish = true;
    }
    solve (root);
    printf ("Case #%d: %d\n", t, k == 1 ? 1 : root->res[k]);
  }
  return 0;
}


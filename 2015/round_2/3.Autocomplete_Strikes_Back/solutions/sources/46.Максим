#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXV = 21000;
const int MAXC = 110;


int n, k;
string s[MAXV];


void read() {
	cin >> n >> k;
	char buf[MAXV];
	forn(i, n) {
		scanf(" %s", buf);
		s[i] = buf;
	}
}


int ts, t[MAXV][26];
bool leaf[MAXV];
vector<int> g[MAXV];

int d[MAXV][MAXC], d2[MAXV][MAXC];

int get_d2(int v, int idx, int need);

int get_d(int v, int need) {
	if (need <= 1)
		return (v == 0) ? 1 : 0;

	if (leaf[v])
		--need;

	int& my = d[v][need];
	if (my != -1)
		return my;
	return my = get_d2(v, 0, need);
}

int get_d2(int v, int idx, int need) {
	if (idx >= (int)g[v].size())
		return need ? INF : 0;
	int to = g[v][idx];

	int& my = d2[to][need];
	if (my != -1)
		return my;
	my = INF;

	for (int here = 0; here <= need; ++here) {
		int nd = here + get_d(to, here) + get_d2(v, idx + 1, need - here);
		my = min(my, nd);
	}

	return my;
}

void solve() {
	memset(t, -1, sizeof t);
	memset(leaf, 0, sizeof leaf);
	ts = 1;
	forn(i, n) {
		int v = 0;
		forn(j, s[i].length()) {
			char c = s[i][j] - 'a';
			if (t[v][c] == -1)
				t[v][c] = ts++;
			v = t[v][c];
		}
		leaf[v] = true;
	}

	forn(i, ts) {
		g[i].clear();
		forn(c, 26)
			if (t[i][c] != -1)
				g[i].push_back(t[i][c]);
	}

	memset(d, -1, sizeof d);
	memset(d2, -1, sizeof d2);
	cout << get_d(0, k) << endl;
}


int main(int argc, char *argv[]) {
	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	if (test_to_execute == -1) {
		freopen("input.txt", "rt", stdin);
		freopen("output.txt", "wt", stdout);
	}

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::exception("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

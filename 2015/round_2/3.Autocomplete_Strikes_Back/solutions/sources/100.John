#include <vector>
#include <string>
#include <cstdio>
#include <deque>
#include <cassert>
#include <cstring>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vvi vector<vector<int> >
#define vd V(double)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define flr(n) fo(l,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()

char buf[1000001];

struct T {
  T() : ch(26),term(false) {}
  ~T() {
    int i;
    fir(26) delete ch[i];
  }
  V(T*) ch;
  bool term;
};


int ins(T**t, int w) {
  if(!*t) *t=new T();
  if(!buf[w]) { (*t)->term = true; return 0; }
  return 1+ins(&(*t)->ch[buf[w]-'a'], w+1);
}

int K;
// c used, ones, full
int opt[30][30][110];
#define BIG 99999999

void upd(int i, int j, int k, int v) {
  int& r=opt[i][j][k];
  r=min(r,v);
}

vi rec(const T * const t, const int len) {
  int i,j,l;

  vvi c;
  fir(26) if(t->ch[i]) {
    buf[len]=i+'a';
    c.pb(rec(t->ch[i],len+1));
  }
  const int nc=c.sz;
  fir(nc+1) fjr(nc+1) flr(K+1) opt[i][j][l]=BIG;
  opt[0][0][0]=0;

  fir(nc) {
    fjr(i+1) flr(K+1) upd(i+1,j,l,opt[i][j][l]);
    fjr(i+1) flr(K+1) upd(i+1,j+1,l,opt[i][j][l]);
    for(int u=2;u<K+1;u++) if(c[i][u]<BIG) {
      fjr(i+1) flr(K+1-u) if(opt[i][j][l]<BIG) {
        upd(i+1,j,l+u,opt[i][j][l]+c[i][u]);
      }
    }
  }

  vi ret(K+1,BIG);
  for(j=0;j<nc+2;j++) flr(K+1) {
    if(j+l>K) continue;
    if(j+l<=1) continue;
    if(j==nc+1 && !t->term) continue;
    int j2=j;
    if(j>0 && t->term) j2--;

    if (opt[nc][j2][l]>=BIG) continue;
    int cost=(len+1)*j+opt[nc][j2][l];
    if(j>0 && t->term) cost--;
    int& r = ret[j+l];
    r=min(r,cost);
  }
  buf[len]=0;
  //fir(K+1) printf("%2d ",ret[i]>99?99:ret[i]); printf("%s",buf); puts(t->term?" *":"");
  return ret;
}

int main(void) {
  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    int i,n;
    assert(scanf("%d%d",&n,&K)==2);
    T *root=new T();
    fi {
      assert(scanf("%s",buf)==1);
      ins(&root, 0);
    }

    vi opt;
    int ans;
    if (K>1) {
      vi opt=rec(root,0);
      ans=opt[K];
    } else {
      ans=1;
    }

    delete root;
    printf("Case #%d: %d\n",cas,ans);
  }
  return 0;
}

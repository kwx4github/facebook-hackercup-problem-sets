#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <queue>
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
#include <cstring> 

int children[21000];
char ss[21000];
int n, cnt, sta;
int next[21000][26];
int lk[21000];
int ft[21000];
int dp[21000][101];
bool ed[21000];

void create(int node, int idx) {
	next[node][idx] = cnt;
	children[cnt] = 0;
	lk[cnt] = -1;
	ft[cnt] = -1;

	if (ft[node] != -1) lk[cnt] = ft[node];
	ft[node] = cnt;
	
	cnt++;
}

void add(char* str) {
	int node = 0;

	for (int i = 0; str[i] != '\0'; i++) {
		if (next[node][str[i]-'a'] == -1) {
			create(node, str[i]-'a');
		}
		
		node = next[node][str[i]-'a'];
		children[node]++;
	}

	ed[node] = true;
}

int calc(int v, int tot_st, int d) {
	if (tot_st == 0) return 0;

	int& ret = dp[v][tot_st];
	if (ret == -1) {
		ret = 100000000;

		for (int st = 0; st <= std::min(tot_st, children[v]); st++) {
			int picked = 0;

			if (lk[v] == -1 && st < tot_st) continue;
			
			int th = 0;

			if (ed[v] && st) {
				th += d;
				picked = 1;
			}
			else if (st == 1) {
				th += d;
				picked = 1;
			}
			
			if (ft[v] != -1) {
				th += calc(ft[v], st - picked, d+1);
			}
			if (lk[v] != -1) th += calc(lk[v], tot_st - st, d); 
			
			ret = std::min(ret, th);
		}
	}

	return ret;
}

int t, teste;
int k;

int main() {
	for (scanf("%d", &t); t; t--) {
		printf("Case #%d: ", ++teste);
		scanf("%d %d", &n, &k);

		cnt = 1;
			
		memset(dp,-1,sizeof(dp));
		memset(next,-1,sizeof(next));
		memset(ed, 0, sizeof(ed));
			
		ft[0] = -1;
			
		for (int i = 0; i < n; i++) {
			scanf("%s", ss);
			add(ss);
		}

		printf("%d\n", calc(ft[0],k,1));
	}
}
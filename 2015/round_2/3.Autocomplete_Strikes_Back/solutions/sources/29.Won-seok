#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

struct node {
  int cnt;
  int depth;
  int present;
  int nxt[26];
  int opt[101];
  node() {
    cnt = present = depth = 0;
    for (int i=0; i<26; i++) nxt[i] = -1;
  }
};

vector<node> V;
int tot = 1;

int solve() {
  int N, K;
  cin >> N >> K;

  tot = 1;
  V.clear();
  V.push_back(node());

  for (int i=0; i<N; i++) {
    string str;
    cin >> str;
    int len = str.size();

    int now = 0;
    V[now].cnt ++;
    for (int j=0; j<len; j++) {
      if (V[now].nxt[str[j]-'a'] == -1) {
        V[now].nxt[str[j]-'a'] = tot;
        V.push_back(node());
        tot ++;
      }
      now = V[now].nxt[str[j]-'a'];
      V[now].depth = j+1;
      V[now].cnt ++;
    }
    V[now].present = 1;
  }

  for (int i=tot-1; i>=0; i--) {
    for (int j=0; j<=100; j++) V[i].opt[j] = 99999999;
    V[i].opt[0] = 0;
    if (V[i].present) V[i].opt[1] = V[i].depth;
    for (int j=0; j<26; j++) {
      if (V[i].nxt[j] == -1) continue;
      int nxt = V[i].nxt[j];
      int tmp[101] = {0};
      for (int j=0; j<=100; j++) tmp[j] = 99999999;
      for (int j=0; j<=100; j++)
        for (int k=0; j+k<=100; k++)
          tmp[j+k] = min(tmp[j+k], V[i].opt[j]+V[nxt].opt[k]);
      for (int j=0; j<=100; j++) V[i].opt[j] = tmp[j];
    }
    V[i].opt[1] = V[i].depth;
  }

//  fprintf(stderr, "%d\n", V[0].opt[K]);
  if (K == 1) return 1;
  return V[0].opt[K];
}

int main()
{
  int T;
  cin >> T;
  for (int tt=1; tt<=T; tt++) {
    printf("Case #%d: %d\n", tt, solve());
  }
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>
#include <climits>
#include <bitset>
#include <cassert>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define UNIQUE(v) (v).erase(unique(ALL(v)), (v).end())
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> P;

int prefix(const string &s, const string &t){
	int k = 0;
	while (s[k] == t[k]) ++k;
	return k;
}

const int N = 4010;
int cost[N];

int check_cost(const pair<string, int> &near, string &cand, bool upd = false){
	int p = prefix(near.first, cand);
	int na = max(cost[near.second], min((int)near.first.size() - 1, p + 1));
	if (upd) cost[near.second] = na;
	return na;
}

int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout.setf(ios::fixed);
	cout.precision(5);

	int TT;
	cin >> TT;
	for (int T = 1; T <= TT; ++T){
		int n, k;
		cin >> n >> k;
		vector<string> v(n);
		vector<int> used(n);
		rep(i, n) cin >> v[i];
		rep(i, n) v[i] += "$";

		MEMSET(cost, 0);
		cost[n] = cost[n + 1] = 1;

		set<pair<string, int>> st;
		st.insert(MP("A", n));
		st.insert(MP("{", n+1));
		while (k--){
			P opt = MP(1e9, -1);
			rep(i, n){
				if (used[i]) continue;
				auto nxt = st.lower_bound(MP(v[i], -1));
				auto prv = prev(nxt);

				int pp = prefix(prv->first, v[i]);
				int pn = prefix(nxt->first, v[i]);

				int x = min(max(pp, pn) + 1, (int)v[i].size() - 1);
				if (pp != pn){
					auto it = pp < pn ? nxt : prv;
					x += check_cost(*it, v[i]);
				}

				opt = min(opt, MP(x, i));
			}
			int i = opt.second;
			used[i] = 1;

			auto nxt = st.lower_bound(MP(v[i], -1));
			auto prv = prev(nxt);

			int pp = prefix(prv->first, v[i]);
			int pn = prefix(nxt->first, v[i]);

			int x = min(max(pp, pn) + 1, (int)v[i].size() - 1);
			cost[i] = x;
			if (pp != pn){
				auto it = pp < pn ? nxt : prv;
				x += check_cost(*it, v[i], true);
			}

			st.insert(MP(v[i], i));
		}

		int ans = 0;
		for (auto &e : st){
			ans += cost[e.second];
		}
		cout << "Case #" << T << ": " << ans - 2 << endl;
	}

}


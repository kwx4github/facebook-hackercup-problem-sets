#include <iostream>
#include <iomanip>
#include <functional>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <list>
#include <stack>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <utility>
#include <iterator>
#include <bitset>
#include <sstream>
#include <numeric>
#include <complex>
#include <sstream>
#include <unordered_set>
#include <unordered_map>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 1050000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-10
#define MOD 1000000007
#define PRIME 312427
#define MOD2 500000004

using namespace std;

// do not use FOR for long-long
// check stack in case of crash
// check INF before submit

const int UP=102;

int tree[25000][30];
bool leaf[25000];
int dyn[25000][UP];
int mincost[UP];
int tmp[UP];
int k;
int cnt;

void init() {
}

void prepareTest() {
	MS(tree,-1);
	C(leaf);
	C(dyn);
	cnt=1;
}

void add(const string &s) {
	int v(0);
	rept(i,sz(s)) {
		int edge(s[i]-'a');
		if (tree[v][edge]==-1) {
//			cerr<<"add "<<v<<" "<<s[i]<<endl;
			tree[v][edge]=cnt++;
		}
		v=tree[v][edge];
	}
//	cerr<<"leaf "<<v<<endl;
	leaf[v]=true;
}

void dfs(int v) {
	rept(i,30) {
		int to(tree[v][i]);
		if (to==-1)
			continue;
		dfs(to);
	}
	rept(i,UP) mincost[i]=INF;
	mincost[0]=0;
	if (leaf[v]) mincost[1]=0;
	rept(i,26) {
		int to(tree[v][i]);
		if (to==-1)
			continue;
		memcpy(tmp,mincost,sizeof(mincost));
		rept(j,UP) {
			if (dyn[to][j]==INF)
				continue;
			rept(q,UP) {
				if (tmp[q]==INF)
					continue;
				if (q+j<UP) {
					mincost[q+j]=min(mincost[q+j],tmp[q]+j+dyn[to][j]);
				}
			}
		}
	}
	mincost[1]=0;
	rept(i,UP) dyn[v][i]=mincost[i];
}

void solveTest() {
	int n;
	scanf("%d%d\n",&n,&k);
	string s;
	rept(i,n) {
		getline(cin,s);
		add(s);
	}
	dfs(0);
//	printf("%d\n",cnt);
//	rept(i,cnt) {
//		printf("%d\n",i);
//		rept(j,10) {
//			printf("  %d -> %d\n",j,dyn[i][j]);
//		}
//	}
	printf("%d\n",dyn[0][k]);
}

void solve() {
	int tst;
	init();
	scanf("%d\n",&tst);
	FOR(i,1,tst) {
		printf("Case #%d: ",i);
		prepareTest();
		solveTest();
	}
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
//	freopen(".in","r",stdin); freopen(".out","w",stdout);

	clock_t tm = clock();
	solve();
	cerr<<setprecision(3)<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
	return 0;
}

#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
#include <gmpxx.h>			// -lgmpxx -lgmp
using namespace std ;
using namespace __gnu_cxx ;
typedef mpz_class BIGNUM ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1e9+100 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

template<class T1,class T2> ostream& operator<<(ostream &s, const pair<T1,T2> &x) { s<< "(" << x.FI << "," << x.SE << ")"; return s;}
template<class T>           ostream& operator<<(ostream &s, const vector<T>   &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T>           ostream& operator<<(ostream &s, const set<T>      &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T1,class T2> ostream& operator<<(ostream &s, const map<T1, T2> &t) { FOREACH(it, t) s << *it << " " ; return s ; }

///////////////////////////////////////////

const int L = 'z'-'a'+1 ;

struct Tree {
	static int k ;
	static Tree *root ;

	Tree* t[L+1] ;
	int d[110] ;
	bool empty ;
	
	Tree(bool e=false): empty(e) {
		CLEAR(t) ;
		CLEAR(d) ;
	}
	~Tree() {
		int i ;
		REP(i,L) delete t[i] ;
	}
	void add(const char *s) {
		if(*s==NULL)
			t[L] = new Tree(true) ;
		else if(t[*s-'a']!=NULL)
			t[*s-'a']->add(s+1) ;
		else {
			t[*s-'a'] = new Tree() ;
			t[*s-'a']->add(s+1) ;
		}
	}
	void compute() {
		int i, j, l ;
		assert(k<110) ;
		for(j=0 ; j<=k ; j++) d[j] = INF ;
		if(empty) {
			d[1]=0 ;
			d[0]=0 ;
		}
		else {
			d[0]=0 ;
			for(i=0 ; i<=L ; i++) {
				if(t[i]) {
					t[i]->compute() ;
					int tmp[110] ;
					for(l=0 ; l<=k ; l++) tmp[l] = INF ;
					for(j=0 ; j<=k ; j++) {
						if(t[i]->d[j] >= INF) continue ;
						for(l=0 ; l+j<=k ; l++)
							tmp[l+j] = min(tmp[l+j], t[i]->d[j] + d[l]) ;
					}
					for(l=0 ; l<=k ; l++) d[l] = tmp[l] ;
				}
			}
			/*for(l=0 ; l<=k ; l++) cout << d[l] << " " ;
			cout << " -> " ;*/
			for(l=0 ; l<=k ; l++)
				d[l] = min(INF, d[l]+l) ;
			
			if(this != root && sons()==1) {
				/*for(i=0 ; i<=L ; i++)
					if(t[i] && t[i]->d[1]==1)
						d[1]=1 ;*/
				d[1] = 1 ;
			}
			
			/*for(l=0 ; l<=k ; l++) cout << d[l] << " " ;
			cout << "  ; sons=" << sons()  ;
			cout << endl ;*/
		}
	}
	int sons() {
		int ret=0 ;
		for(int i=0 ; i<=L ; i++) {
			ret += !!t[i] ;
		}
		return ret ;
	}
	void show(string s) {
		cout << s << " -> " ;
		int i ;
		for(i=0 ; i<=k ; i++)
			if(d[i] < INF) cout << d[i] << " " ;
		cout << endl ;
		REP(i, L)
			if(t[i]) t[i]->show(s + (char)('a'+i)) ;
		if(t[L])
			t[L]->show(s + '#') ;
	}
} ;
int Tree::k=0 ;
Tree* Tree::root = NULL ;

void _main() {
	Tree::root = new Tree() ;
	int n, k ;
	string s ;
	cin >> n >> k ;
	while(n--) {
		cin >> s ;
		Tree::root->add(s.c_str()) ;
	}
	Tree::k = k ;
	Tree::root->compute() ;
	cout << Tree::root->d[k]-k << endl ;
	//root->show("") ;
	delete Tree::root ;
}

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0) ;
	int Tests ;
	cin >> Tests ;
	for(int test=1 ; test<=Tests ; test++) {
		cerr << "Case #" << test << endl ;
		cout << "Case #" << test << ": " ;
		_main() ;
	}
}


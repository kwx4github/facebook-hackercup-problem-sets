#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <deque>
#include <cmath>
#include <ctime>
#include <stack>
#include <sstream>
#include <set>
#include <map>
#include <cassert>
#include <memory.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()

typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair <li, li> pi;

void solve();

void precalc();

#define FILENAME "souvenir"

int main() {
	string s = FILENAME;
#ifdef RIAD
	freopen("input", "r", stdin);
#ifndef DEBUG
	freopen("output", "w", stdout);
#endif
	//cout<<FILENAME<<endl;
	//assert (s != "change me please");
	clock_t start = clock();
#else
	//freopen(FILENAME ".in", "r", stdin);
	//freopen(FILENAME ".out", "w", stdout);
#endif
	cout.sync_with_stdio(0);
	cout.precision(5);
	cout << fixed;
	int t = 1;
	cin >> t;

	//precalc();
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef DEBUG
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n\n";
#endif
	return 0;
}


struct state {
	int from, to;
	int pos;
	
	bool operator < (const state& o) const {
		return tie(from, to, pos) < tie(o.from, o.to, o.pos);
	}
};
int n, k;
map<state, vector<int>> res;
vector<string> s;

const int INF = 1000000000;

const vi& solve(const state& st) {
	if(res.count(st))
		return res[st];
	
	vector<int> ans(k + 1, INF);
	ans[0] = 0;
	
	if(st.from == st.to) {
		return res[st] = ans;
	}
	
	
	int from = st.from;
	if(s[st.from].size() == st.pos) {
		ans[1] = 0;
		++from;
	}
	
	if(from == st.to) {
		return res[st] = ans;
	}
	
	while(from != st.to) {
		int to = from;
		while(to != st.to && s[from][st.pos] == s[to][st.pos]) {
			++to;
		}
		
		state newst = {from, to, st.pos + 1};
		assert(from <= to);
		vector<int> newans = solve(newst);
		
		vector<int> new_ = ans;
		
		/*cout << "oldans in";
		cout << st.from << ' ' << st.to << ' ' << st.pos << "=" << endl;
		for(int i = 0; i <=k; ++i ) {
			cout << ans[i] << ' ';
		}
		
		cout << endl;
		cout << "newans in";
		cout << st.from << ' ' << st.to << ' ' << st.pos << "=" << endl;
		for(int i = 0; i <=k; ++i ) {
			cout << newans[i] << ' ';
		}
		cout <<endl;*/
		for(int i = 0; i <= k; ++i) {
			for(int j = 0; i + j <= k; ++j) {
				new_[i + j] = min(new_[i + j], ans[i] + newans[j] + j);
			}
		}
		
		ans = new_;

		from = to;
	}
	
	ans[1] = 0;
	
	
	/*cout << st.from << ' ' << st.to << ' ' << st.pos << "=" << endl;
	for(int i = 0; i <= k; ++i) {
		cout << ans[i] << ' ';
	}
	cout << endl;*/
	return res[st] = ans;
}

void solve() {
	cin >> n >> k;
	s.assign(n, "");
	
	for(int i = 0; i < n; ++i) {
		cin >> s[i];
	}
	res.clear();
	
	sort(all(s));
	
	
	if(k == 1) {
		cout << 1 << endl;
	}
	else
		cout << solve({0, n, 0})[k] << endl;
}
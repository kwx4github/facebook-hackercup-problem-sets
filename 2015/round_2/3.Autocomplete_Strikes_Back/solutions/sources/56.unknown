// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}


const int MAX = 30020;
const int MK = 201;
int next_node[MAX][26];
int prefix[MAX];
bool match[MAX];
int nid;
int new_node() {
    REP(j, 26) next_node[nid][j] = -1;
    match[nid] = false;
    prefix[nid] = 0;
    return nid++;
}

void insert(int root, string s) {
    int p = root;
    prefix[root]++;

    for(char c : s) {
        int k = c - 'a';
        if(next_node[p][k] == -1) {
            next_node[p][k] = new_node();
        }
        p = next_node[p][k];
        prefix[p]++;
    }
    match[p] = true;
}

const int INF = 1000000000;

int memo[MAX][MK];
int dfs(const int p, const int x) {
    assert(x > 0);
    if(prefix[p] < x) return INF;
    if(memo[p][x] != -1) return memo[p][x];
    int& res = memo[p][x];
    if(x == 1) return res = 0;
    vector<int> dp(x + 1, INF);
    dp[0] = 0;
    for(int k = 0; k < 26; k++) if(next_node[p][k] != -1) {
        const int np = next_node[p][k];
        for(int i = x; i >= 0; i--) if(dp[i] < INF) {
            for(int j = 1; i + j <= x; j++) {
                dp[i+j] = min(dp[i+j], dp[i] + j + dfs(np, j));
            }
        }
    }
    if(match[p]) {
        res = dp[x-1];
    } else {
        res = dp[x];
    }
    // printf("p = %d x = %d res = %d\n", p, x, res);
    return res;
}

void solve() {
    nid = 0;
    memset(memo, -1, sizeof(memo));

    int N, K;
    cin >> N >> K;

    vector<string> words(N);
    REP(i, N) cin >> words[i];

    const int root = new_node();
    REP(i, N) insert(root, words[i]);

    int answer = dfs(root, K);
    cout << answer << endl;
}

int main(){
    // iostream_init();

    int TESTCASE;
    cin >> TESTCASE;
    for(int testcase = 0; testcase < TESTCASE; testcase++) {
        cout << "Case #" << testcase + 1 << ": ";
        solve();
    }

    return 0;
}

/* vim:set foldmethod=marker: */


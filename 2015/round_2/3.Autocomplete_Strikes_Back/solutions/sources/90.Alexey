#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <stack>
#include <sstream>
#include <cstring>
#include <numeric>
#include <ctime>

#define re return
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) ((int) (x).size())
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)
#define y0 y32479
#define y1 y95874
#define fill(x, y) memset(x, y, sizeof(x))
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define unq(x) (x.resize(unique(all(x)) - x.begin()))
#define spc(i,n) " \n"[i == n - 1]

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef double D;
typedef long double LD;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;

template<class T> T abs(T x) { return x > 0 ? x : -x;}

int m;
int n;

string a;
string s[4000];
ii val[25000];

int matr[4000][4000];
vi o[4000];

int get(int a, int b) {
	int l = min(sz(s[a]), sz(s[b]));
	rep(i, l) {
		if (s[a][i] != s[b][i])
			re i;
	}
	re l;
}

int table[25000][110];
int big = 900000000;

int getans(int p, int k) {
	if (k == 0)
		re 0;
	int &ans = table[p][k];
	if (ans != -1)
		re ans;
	ans = big;
	int x = val[p].fi;
	int y = val[p].se;
	for (int i = x + 1; i < n; i++) {
		int z = matr[x][i];
		int nz = z;
		if (sz(s[i]) > z)
			nz++;
		int tmp = nz;
		if (y < z) {
			if (sz(s[x]) == z)
				tmp += z - y - 1;
			else
				tmp += z - y;
		}
		tmp += getans(o[i][nz - 1], k - 1);
		if (tmp < ans)
			ans = tmp;
	}
	re ans;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);


	int tc;
	cin >> tc;
	rep(tt, tc) {
		cout << "Case #" << tt + 1 << ": ";

		cin >> n >> m;
		a = "";
		rep(i, n)
			cin >> s[i];
		if (m == 1) {
			cout << 1 << endl;
			continue;
		}
		sort(s, s + n);
		rep(i, n)
			o[i].clear();
		rep(i, n) {
			rep(j, sz(s[i])) {
				val[sz(a)] = mp(i, j);
				o[i].pb(sz(a));
				a += s[i][j];
			}
			//val[sz(a)] = mp(i, sz(s[i]));
			//o[i].pb(sz(a));
			//a += "#";
		}
		rep(i, n) rep(j, i) {
			matr[j][i] = get(i, j);
		}
		fill(table, -1);
		int ans = big;
		rep(i, n) {
			int tmp = getans(o[i][0], m - 1) + 1;
			//cout << i << ' ' << tmp << endl;
			if (tmp < ans)
				ans = tmp;
		}
		cout << ans << endl;
	}



	re 0;
}

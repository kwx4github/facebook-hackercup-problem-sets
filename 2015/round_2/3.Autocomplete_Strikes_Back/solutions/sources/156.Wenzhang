#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 20005;
struct Trie {
    Trie * next[26];
    int dep;
    int end;
}*root , s[N];
int tot , n , k;
char str[N];
int dp[N][105];
Trie *newnode () {
    Trie *p = &s[tot ++];
    memset (p -> next , NULL , sizeof (p -> next));
    p -> end = 0;p -> dep = 0;
    return p;
}
void insert (Trie *p , char *s) {
    for (int i = 0 ; s[i] ; i ++) {
        int ch = s[i] - 'a';
        if (p -> next[ch] == NULL)
            p -> next[ch] = newnode ();
        p = p -> next[ch];
        p -> dep = i + 1;
    }
    p -> end = 1;
}
void dfs (int u , int pre) {
    dp[u][0] = 0;
    for (int i = 0 ; i < 26 ; i ++) {
        if (s[u].next[i]) {
            int v = s[u].next[i] - s;
            dfs (v , u);
            for (int j = k ; j >= 0 ; j --) {
                for (int p = 0 ; p <= j ; p ++) {
                    dp[u][j] = min (dp[u][j] , dp[u][p] + dp[v][j - p]);
                }
            }
        }
    }
    if (s[u].end) {
        for (int j = k - 1 ; j >= 0 ; j --) {
            dp[u][j + 1] = min (dp[u][j + 1] , dp[u][j] + s[u].dep);
        }
    }
    if (s[u].dep) {
        dp[u][1] = min (dp[u][1]  , s[u].dep);
    }
}
int main () {
	// freopen ("autocomplete_strikes_back.txt" , "r" , stdin);
 //    freopen ("output.txt" , "w" , stdout);
    
	int t , cas = 0;
    scanf ("%d" , &t);
    while (t --) {
        memset (dp , 0x11 , sizeof (dp));
        tot = 0;
        root = newnode ();
        scanf ("%d %d" , &n , &k);
        for (int i = 0 ; i < n ; i ++) {
            scanf ("%s" , str);
            insert (root , str);
        }
        dfs (0 , -1);
        printf ("Case #%d: %d\n" , ++ cas , dp[0][k]);
    }

	return 0;
}
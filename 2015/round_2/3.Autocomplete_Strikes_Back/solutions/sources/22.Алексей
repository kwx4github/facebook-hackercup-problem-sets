#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <deque>
#include <complex>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(s) int((s).size())
#define all(s) (s).begin(), (s).end()
#if ( _WIN32 || __WIN32__ || _WIN64 || __WIN64__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#ifdef LOCAL42
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif
#define y0 yy0
#define y1 yy1
#define next _next
#define prev _prev
#define rank _rank
#define link _link
#define hash _hash
#define fs first
#define sc second

typedef long long ll;
typedef long long llong;
typedef long long int64;
typedef unsigned int uint;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned long long ullong;
typedef unsigned long long lint;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int inf = int(1e9);
const double eps = 1e-9;
const double pi = 4 * atan(double(1));
const int N = int(2e4) + 100;
const int K = 111;

int sz, k;
int h[N];
bool term[N];
int next[N][26];
char buf[N];
int d[N][K];
int f[30][K];

inline void init() {
    sz = 0;
    h[0] = 0;
    for (int i = 0; i < 26; ++i) {
        next[0][i] = -1;
    }
}

void dfs(int v) {
    for (int i = 0; i < 26; ++i) {
        if (next[v][i] != -1) {
            dfs(next[v][i]);
        }
    }
    for (int i = 0; i <= 26; ++i) {
        for (int j = 0; j <= k; ++j) {
            f[i][j] = inf;
        }
    }
    f[0][0] = 0;
    for (int j = 1; j <= 26; ++j) {
        if (next[v][j - 1] == -1) {
            for (int z = 0; z <= k; ++z) {
                f[j][z] = f[j - 1][z];
            }
            continue;
        }
        for (int z = 0; z <= k; ++z) {
            f[j][z] = f[j - 1][z];
            for (int h = 1; h <= z; ++h) {
                f[j][z] = min(f[j][z], f[j - 1][z - h] + d[next[v][j - 1]][h]);
            }
        }
    }
    for (int i = 0; i <= k; ++i) {
        d[v][i] = f[26][i];
        if (term[v] && i > 1) {
            d[v][i] = min(d[v][i], f[26][i - 1] + h[v]);
        }
    }
    if (v > 0) {
        d[v][1] = min(d[v][1], h[v]);
    }
}

inline void solve() {
    int n;
    scanf("%d %d", &n, &k);
    init();
    for (int i = 0; i < n; ++i) {
        scanf("%s", buf);
        int cur = 0, len = (int) strlen(buf);
        for (int j = 0; j < len; ++j) {
            int c = buf[j] - 'a';
            if (next[cur][c] == -1) {
                h[++sz] = h[cur] + 1;
                term[sz] = false;
                for (int z = 0; z < 26; ++z) {
                    next[sz][z] = -1;
                }
                next[cur][c] = sz;
            }
            cur = next[cur][c];
        }
        term[cur] = true;
    }
    dfs(0);
    printf("%d\n", d[0][k]);
}

int main() {
#ifdef LOCAL42
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    
#endif
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: ", i + 1);
        solve();
        cerr << "test " << i << endl;
    }
    return 0;
}
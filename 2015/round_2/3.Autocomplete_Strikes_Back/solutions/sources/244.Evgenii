#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define pi acos(-1.0)

char a[20005];
int  v[20005][30], level[20005], n, k;
int dp1[20005][105], dp2[20005][105][30];

int solve2(int node, int need, int letter);

int solve1(int node, int need)
{
	if(need == 0) return 0;
	if(need == 1) return level[node];
	if(dp1[node][need] == -1)
	{
		if(v[node][29] != 1)
			dp1[node][need] = solve2(node, need, 0);
		else
			dp1[node][need] = solve2(node, need - 1, 0) + level[node];
	}
	return dp1[node][need];
}

int solve2(int node, int need, int letter)
{
	if(need == 0) return 0;
	if(letter >= 26) return mod;
	if(v[node][letter] == -1)
		return solve2(node, need, letter + 1);
	if(dp2[node][need][letter] == -1)
	{
		dp2[node][need][letter] = mod;
		for(int i = 0; i <= need; i++)
			dp2[node][need][letter] = min(dp2[node][need][letter], solve1(v[node][letter], i) + solve2(node, need - i, letter + 1));
	}
	return dp2[node][need][letter];
}

int main()
{
	freopen("autocomplete_strikes_back.txt", "r", stdin);
	freopen("autocomplete_strikes_back.out", "w", stdout);
	int T;
	scanf("%d", &T);
	for(int t = 1; t <= T; t++)
	{
		memset(v, -1, sizeof(v));
		scanf("%d %d", &n, &k);
		int last = 1;
		level[0] = 0;
		while(n--)
		{
			scanf("%s", a);
			int cur = 0;
			for(int i = 0; a[i]; i++)
			{
				int letter = a[i] - 'a';
				if(v[cur][letter] == -1)
				{
					for(int j = i; a[j]; j++)
					{
						letter = a[j] - 'a';
						v[cur][letter] = last;
						level[last] = level[cur] + 1;
						cur = last;
						if(a[j+1] == 0)
							v[cur][29] = 1;
						last++;
					}
					break;
				}
				else
				{
					cur = v[cur][letter];
				}
			}
		}
		memset(dp1, -1, sizeof(dp1));
		memset(dp2, -1, sizeof(dp2));
		printf("Case #%d: %d\n", t, solve1(0, k));
	}
	return 0;
}
//Facebook Hacker Cup
//Round 2
//25 Jan 2015

//start of jonathanirvings' template v2.0.0 (BETA)

#define jonathan using
#define ganteng namespace
#define banget std
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <deque>
#include <string>
#include <string.h>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <set>
#include <time.h>
#include <bitset>
#include <list>
jonathan ganteng banget;

typedef long long LL;
typedef pair<int,int> pii;
typedef pair<pii,pii> ppi;
typedef pair<LL,LL> pll;
typedef pair<string,string> pss;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vii;
typedef vector<LL> vl;
typedef vector<vl> vvl;
typedef vector<string> vstr;
typedef vector<char> vc;

double EPS = 1e-9;
int INF = 2000000000;
long long INFF = 1000000000LL;
double PI = acos(-1);
int dirx[8] = {-1,0,0,1,-1,-1,1,1};
int diry[8] = {0,1,-1,0,-1,1,-1,1};

#ifdef TESTING
	#define DEBUG fprintf(stderr,"====TESTING====\n")
	#define VALUE(x) cerr << "The value of " << #x << " is " << x << endl
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define DEBUG 
	#define VALUE(x)
	#define debug(...)
#endif

#define FOR(a,b,c) for (int (a)=(b);(a)<(c);++(a))
#define FORN(a,b,c) for (int (a)=(b);(a)<=(c);++(a))
#define FORD(a,b,c) for (int (a)=(b);(a)>=(c);--(a))
#define FORSQ(a,b,c) for (int (a)=(b);(a)*(a)<=(c);++(a))
#define FORL(a,b,c) for (LL (a)=(b);(a)<=(c);++(a))
#define FORLSQ(a,b,c) for (int (a)=(b);(LL)(a)*(LL)(a)<=(c);++(a))
#define FORC(a,b,c) for (char (a)=(b);(a)<=(c);++(a))
#define REP(i,n) FOR(i,0,n)
#define REPN(i,n) FORN(i,1,n)
#define REPD(i,n) FORD(i,n,1)
#define MAX(a,b) a = max(a,b)
#define MIN(a,b) a = min(a,b)
#define SQR(x) ((x) * (x))
#define RESET(a,b) memset(a,b,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ALL(v) v.begin(),v.end()
#define ALLA(arr,sz) arr,arr+sz
#define SIZE(v) (int)v.size()
#define SORT(v) sort(ALL(v))
#define REVERSE(v) reverse(ALL(v))
#define SORTA(arr,sz) sort(ALLA(arr,sz))
#define REVERSEA(arr,sz) reverse(ALLA(arr,sz))
#define PERMUTE next_permutation
#define TC(t) while(t--)
#define READ(n,data) {scanf("%d",&n); REPN(i,n) scanf("%d",&data[i]);}

inline string IntToString(int a){
    char x[100];
    sprintf(x,"%d",a); string s = x;
    return s;
}

inline int StringToInt(string a){
    char x[100]; int res;
    strcpy(x,a.c_str()); sscanf(x,"%d",&res);
    return res;
}

inline string GetString(void){
	char x[1000005];
	scanf("%s",x); string s = x;
	return s;
}

inline string uppercase(string s){
	int n = SIZE(s); 
	REP(i,n) if (s[i] >= 'a' && s[i] <= 'z') s[i] = s[i] - 'a' + 'A';
	return s;
}

inline string lowercase(string s){
	int n = SIZE(s); 
	REP(i,n) if (s[i] >= 'A' && s[i] <= 'Z') s[i] = s[i] - 'A' + 'a';
	return s;
}

inline void OPEN (string s) {
    freopen ((s + ".in").c_str (), "r", stdin);
    freopen ((s + ".out").c_str (), "w", stdout);
}

//end of jonathanirvings' template v2.0.0 (BETA)

typedef struct
{
    int pos[256];
    bool ada;
    int depth;
    int child;
    int sibling;
} node;

int T;
node trie[20005];
LL dp[20005][105];
int n,m,k;

LL jahja(int now,int rem)
{
    if (rem == 0) return 0;
    if (rem == 1) return trie[now].depth;
    LL &ret = dp[now][rem];
    if (ret >= 0) return ret;
    ret = INFF;
    if (trie[now].child == -1 && trie[now].sibling == -1)
    {

    } else
    if (trie[now].child == -1)
    {
        ret = jahja(trie[now].sibling,rem);
        if (trie[now].ada)
            MIN(ret,jahja(trie[now].sibling,rem-1) + trie[now].depth);
    } else if(trie[now].sibling == -1)
    {
        ret = jahja(trie[now].child,rem);
        if (trie[now].ada)
            MIN(ret,jahja(trie[now].child,rem-1) + trie[now].depth);
    } else
    {
        FORN(i,0,rem)
        {
            MIN(ret,jahja(trie[now].child,i) + jahja(trie[now].sibling,rem - i));
            if (i == 1)
                MIN(ret,trie[now].depth + jahja(trie[now].sibling,rem - i));
        }
        if (trie[now].ada)
        {
            FORN(i,0,rem-1)
            {
                MIN(ret,jahja(trie[now].child,i) + jahja(trie[now].sibling,rem - i-1) + trie[now].depth);
            }   
        }
    }
    //printf("%d %d %d\n",now,rem,ret);
    return ret;
}

void dfs(int now)
{
    int lastchild = -1;
    FORC(i,'a','z') if(trie[now].pos[i] != -1)
    {
        if (trie[now].child == -1) 
        {
            trie[now].child = trie[now].pos[i];
        } else
        {
            trie[lastchild].sibling = trie[now].pos[i];
        }
        lastchild = trie[now].pos[i];
        dfs(trie[now].pos[i]);
    }
}

void dfs2(int now)
{
    //printf("%d %d %d %d\n",now,trie[now].child,trie[now].sibling,trie[now].ada);
    FORC(i,'a','z') if(trie[now].pos[i] != -1)
    {
        dfs2(trie[now].pos[i]);
    }
}

int main()
{
	scanf("%d",&T);
	REPN(cases,T)
	{
		printf("Case #%d: ",cases);
        scanf("%d %d",&m,&k);
        n = 1; 
        FORC(i,'a','z') trie[0].pos[i] = -1;
        trie[0].ada = 0;
        trie[0].depth = 0;
        trie[0].child = -1;
        trie[0].sibling = -1;
        TC(m)
        {
            string s = GetString();
            int now = 0;
            REP(i,SIZE(s))
            {
                if (trie[now].pos[s[i]] == -1)
                {
                    trie[now].pos[s[i]] = n;
                    FORC(i,'a','z') trie[n].pos[i] = -1;
                    trie[n].ada = 0;
                    trie[n].depth = trie[now].depth + 1;
                    trie[n].child = -1;
                    trie[n].sibling = -1;
                    ++n;
                }
                now = trie[now].pos[s[i]];
            }
            trie[now].ada = 1;
        }
        dfs(0);
        RESET(dp,-1);
        LL risan = jahja(0,k);
        printf("%lld\n",risan);
	}
	return 0;
}












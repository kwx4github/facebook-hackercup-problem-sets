import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;

public class R2_THIRD {
	
	static Reader sc = new Reader();
	static PrintWriter out = new PrintWriter(System.out);
	
	public static Comparator<String> comp = new Comparator<String>(){
	    @Override
	    public int compare(String a, String b){
	        return Integer.compare(a.length(), b.length());	        
	    }
	};
	
	public static void main(String[] args) throws IOException {
		int t = sc.nextInt();
		
		for (int cas = 1; cas <= t; cas++) {
			int n = sc.nextInt();
			int k = sc.nextInt();			
			
			String[] words = new String[n];
			for (int i = 0; i < n; i++) {
				words[i] = sc.next();
			}
			
			Trie T = new Trie();
			
			Arrays.sort(words, comp);			
			boolean[] used = new boolean[n];
			
			for (int i = 0; i < k; i++) {
				String minW = "";
				int min = Integer.MAX_VALUE;
				int minInd = 0;
				
				for (int j = 0; j < n; j++) {
					if(!used[j]) {
						int act = T.hasPrefix(words[j]);
						if (act < min) {
							min = act;
							minW = words[j];
							minInd = j;
						}
					}
				}
				
				T.add(minW);
				used[minInd] = true;
			}
			
			int total = 0;
			
			for (int i = 0; i < n; i++) {
				if(used[i])
					total += T.hasPrefix2(words[i]);
			}
			
			out.printf("Case #%d: %d\n", cas, total);
			
		}
		out.close();
	}
	
	static class Trie {
		final Trie[] t = new Trie[26]; // Only letters, change accordingly
		int branches = 0;
		static final char minChar = 'a'; // 'A' or 'a'
		
		void add(final String n){
			add(n, 0);
		}
		
		void add(final String n, final int index) {
			branches++;
			if (index >= n.length())
				return;
			final int c = n.charAt(index) - minChar;
			if (t[c] == null) {
				t[c] = new Trie();
			}
			t[c].add(n, index + 1);
		}

		int hasPrefix(final String n) {
			return hasPrefix(n, 0);
		}

		int hasPrefix(final String n, final int index) {
			if (index >= n.length())
				return index;
			final int c = n.charAt(index) - minChar;
			if (t[c] != null) {
				return t[c].hasPrefix(n, index + 1);
			}
			return index + 1;
		}
		
		int hasPrefix2(final String n) {
			return hasPrefix2(n, 0);
		}

		int hasPrefix2(final String n, final int index) {
			if (index >= n.length())
				return index;
			final int c = n.charAt(index) - minChar;
			if (t[c] != null && t[c].branches > 1) {
				return t[c].hasPrefix2(n, index + 1);
			}
			return index + 1;
		}
		
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();

			for (int i = 0; i < 26; i++) {
				if (t[i] != null)
					sb.append((char) ('a' + i));
			}
			return '[' + sb.toString() + ']';
		}
	}
	
	static class Reader {
		final private int BUFFER_SIZE = 1 << 12;private byte[] buffer;private int bufferPointer, bytesRead;
		public Reader(){buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
		}private void fillBuffer() throws IOException{bytesRead=System.in.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;
		}private byte read() throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];
		}public String next() throws IOException{StringBuilder sb = new StringBuilder();byte c;while((c=read())<=' '){if(c==-1) return null;};do{sb.append((char)c);}while((c=read())>' ');if (sb.length()==0) return null;return sb.toString();
		}public String nextLine() throws IOException{StringBuilder sb = new StringBuilder();byte c;boolean read = false;while((c=read())!=-1){if(c=='\n') {read = true;break;}if(c>=' ')sb.append((char)c);}if (!read) return null;return sb.toString();
		}public int nextInt() throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public long nextLong() throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10L+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public double nextDouble() throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;
		}public int[] na(int n) throws IOException{int[] a = new int[n];for(int i = 0;i < n;i++)a[i] = nextInt();return a;
		}public char[][] ncha(int n) throws IOException{char[][] a = new char[n][];for(int i = 0;i < n;i++)a[i] = next().toCharArray();return a;
		}public int[][] nm(int n, int m) throws IOException{int[][] map = new int[n][m];for(int i = 0;i < n;i++)map[i] = na(m);return map;
		}public void close() throws IOException{if(System.in==null) return;System.in.close();}
	}
	
	static void print(int[] A) {for(int i=0;i<A.length;i++){if(i!=0) out.print(' ');out.print(A[i]);}out.println();}
	static <T> void print(Iterable<T> A) {int i = 0;for(T act : A){if(i!=0)out.print(' ');out.print(act);i++;}out.println();}
	static void printPlus1(Iterable<Number> A) {int i = 0;for(Number act : A){if(i!=0)out.print(' ');out.print(act.longValue() + 1L);i++;}out.println();}
	static void debug(Object... o) { System.err.println(Arrays.deepToString(o)); }
	
	/*
	long s = System.currentTimeMillis();
	debug(System.currentTimeMillis()-s+"ms");
	 */
}

/*
    Author: Zhouxing Shi
    Created on Jan25, 2014
*/
#include <bits/stdc++.h>
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define drep(i, a, b) for (int i = (a); i >= (b); --i)
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define pb(x) push_back(x)
#define mp(x, y) (make_pair(x, y))
#define clr(x) memset(x, 0, sizeof(x))
#define xx first
#define yy second

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int inf = ~0U >> 1;
const ll INF = ~0ULL >> 1;;
const double pi = acos(-1.0);
template <class T> inline T sqr(T a) { return a * a; }
template <class T> inline void read(T &n)
{
    char c;
	for (c = getchar(); !(c >= '0' && c <= '9'); c = getchar()); n = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar()) n = n * 10 + c - '0';
}
int Pow(int base, int n, int mo)
{
	if (n == 0) return 1;
	if (n == 1) return base;
	int tmp = Pow(base, n >> 1, mo);
	tmp = (ll)tmp * tmp % mo;
	if (n & 1) tmp = (ll)tmp * base % mo;
	return tmp;
}

//***************************

int Index, N, K;
int dp[30000][120];
char buf[30000];

struct node
{
	int e[26];
	int dep, mark;
} t[30000];

void ins(char *s)
{
	int l = strlen(s);
	int p = 1;
	REP(i, 0, l)
	{
		if (!t[p].e[s[i] - 'a'])
		{
			t[p].e[s[i] - 'a'] = ++Index;
			t[Index].dep = t[p].dep + 1;
		}
		p = t[p].e[s[i] - 'a'];
	}
	t[p].mark = 1;
}

void dfs(int u)
{
	dp[u][0] = 0;
	REP(i, 0, 26)
		if (t[u].e[i]) 
		{
			dfs(t[u].e[i]);
			drep(j, K, 1)
				drep(k, j, 1)
					if (dp[u][j - k] < 100000000 && dp[t[u].e[i]][k] < 100000000)
						dp[u][j] = min(dp[u][j], dp[u][j - k] + dp[t[u].e[i]][k]);
		}
	
	if (t[u].mark)
	{
		drep(j, K, 1)
			if (dp[u][j - 1] < 100000000) 
				dp[u][j] = min(dp[u][j], dp[u][j - 1] + t[u].dep);
	}
	dp[u][1] = min(dp[u][1], t[u].dep);	
}

void work(int _)
{
	memset(dp, 0x7f, sizeof(dp));
	scanf("%d%d", &N, &K);
	rep(i, 1, Index) clr(t[i].e), t[i].mark = 0;
	Index = 1;
	rep(i, 1, N)
	{
		scanf("%s", buf);
		ins(buf);
	}
	dfs(1);
	printf("Case #%d: %d\n", _, dp[1][K]);
}

int main()
{
	#ifdef LOCAL
		freopen("C.txt", "r", stdin);
		freopen("C.ans", "w", stdout);
	#endif
	
	int cases;
	scanf("%d", &cases);
	rep(_, 1, cases) work(_);
	
	return 0;
}



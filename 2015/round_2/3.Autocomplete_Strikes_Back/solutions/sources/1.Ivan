#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 20200;
const int MAXK = 110;
const int inf = 1e8;

char s[MAXN];
int t[MAXN][26];
int f[MAXN][MAXK];
int w[MAXN], fin[MAXN];
int m;

int g[MAXK], ng[MAXK];

int solve(int root, int n, int K) {
  if (K == 1) return 1;
  for (int i = n-1; i >= root; --i) {
    REP(k, K+1) g[k] = inf;
    g[0] = 0;
    if (fin[i]) g[1] = 0;

    REP(j, 26)
      if (t[i][j]) {
        REP(k, K+1) ng[k] = inf;
        REP(k, K+1)
          if (g[k] < inf)
            REP(jk, K+1-k)
              ng[k + jk] = min(ng[k + jk], g[k] + jk + f[t[i][j]][jk]);
        REP(k, K+1) g[k] = ng[k];
      }

    if (w[i] > 0) g[1] = 0;
    REP(k, K+1) 
      f[i][k] = g[k];
  }
  return f[root][K];
}

int main(void) {
  int TC;
  scanf("%d", &TC);
  for (int tp = 1; tp <= TC; ++tp) {
    int n, k;
    scanf("%d %d", &n, &k);

    REP(i, m) {
      REP(j, 26) t[i][j] = 0;
      w[i] = fin[i] = 0;
    }

    m = 1;
    int root = m++;

    REP(i, n) {
      scanf("%s", s);
      int len = strlen(s);

      int cur = root;
      w[cur]++;
      REP(j, len) {
        int c = s[j] - 'a';
        if (t[cur][c] == 0) t[cur][c] = m++;
        cur = t[cur][c];
        w[cur]++;
      }
      fin[cur]++;
    }
    
    printf("Case #%d: ", tp);
    printf("%d\n", solve(root, m, k));
  }
  return 0;
}

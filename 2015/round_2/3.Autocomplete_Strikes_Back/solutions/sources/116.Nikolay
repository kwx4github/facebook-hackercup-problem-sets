#ifdef NALP_PROJECT
#pragma hdrstop
#else
#define _SECURE_SCL 0
#endif

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:200000000")

#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <utility>
#include <cassert>

#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <bitset>
#include <memory.h>

#include <iostream>
#include <fstream>
#include <sstream>

#ifdef _WIN32
    #define LLD "%I64d"
#else
#define LLD "%lld"
#endif

using namespace std;

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define y1 YYY1
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()

template<typename T> inline T Abs(T x) { return (x >= 0) ? x : -x; }
template<typename T> inline T sqr(T x) { return x * x; }
template<typename T> inline string toStr(T x) { stringstream st; st << x; string s; st >> s; return s; }
template<typename T> inline int bit(T mask, int b) { return (b >= 0 && (mask & (T(1) << b)) != 0) ? 1 : 0; }

inline int nextInt() { int x; if (scanf("%d", &x) != 1) throw; return x; }
inline int64 nextInt64() { int64 x; if (scanf(LLD, &x) != 1) throw; return x; }
inline double nextDouble() { double x; if (scanf("%lf", &x) != 1) throw; return x; }

const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;

const int MAXN = 210000;

map<char, int> tree[MAXN];
vector<int> children[MAXN];
map<pair<pair<int, int>, int>, int> d;
int n, size, cnt[MAXN], h[MAXN], k;
bool fin[MAXN];
string a[MAXN];

void clear() {
    memset(h, 0, sizeof h);
    memset(fin, 0, sizeof fin);
    memset(cnt, 0, sizeof cnt);
    forn(i, MAXN) {
        children[i].clear();
        tree[i].clear();
    }
    d.clear();
    size = 1;
}

void add(const string& s) {
    int v = 0;
    forn(i, s.size()) {
        char c = s[i];
        if (!tree[v].count(c)) {
            tree[v][c] = size;
            h[size] = h[v] + 1;
            children[v].pb(size);
            ++size;
        }
        v = tree[v][c];
        ++cnt[v];
    }
    fin[v] = true;
}

int get(int, int);

int dyn(int V, int v, int k) {
    if (k == 0) return 0;
    if (v == int(children[V].size())) return INF;

    pair<pair<int, int>, int> node(mp(V, v), k);
    if (d.count(node)) return d[node];
    int& ans = d[node];

    ans = dyn(V, v + 1, k);
    for(int cur = 1; cur <= k; ++cur) {
        int curans = get(children[V][v], cur) + dyn(V, v + 1, k - cur);
        ans = min(ans, curans);
    }

    return ans;
}

int get(int v, int k) {
    if (k == 1) {
        int ans = h[v];
        if (fin[v]) --ans;
        return max(1, ans);
    }
    return dyn(v, 0, k);
}

void solve(bool skipThisTest) {
    if (true) {
        cerr << "\tinput mode: read test." << endl;
        n = nextInt();
        k = nextInt();
        forn(i, n) {
            cin >> a[i];
            a[i] += "#";
        }
        if (skipThisTest) return;
    } else {
        cerr << "\tinput mode: generated test." << endl;
        n = 10000;
        forn(i, n) {
            a[i] = "";
            int len = rand() % 10 + 1;
            forn(j, len) {
                a[i] += char('a' + rand() % 3);
            }
        }
    }

    clear();
    forn(i, n) {
        add(a[i]);
    }

    int ans = get(0, k);

    cout << ans << endl;
    cerr << "\tclever answer is '" << ans << "'." << endl;
//    if (sumLen <= 30000) {
//        int stupidAnswer = stupid();
//        cerr << "\tstupid answer is '" << stupidAnswer << "'." << endl;
//        assert(ans == stupidAnswer);
//    }
}

int main(int argc, char * argv[]) {
#ifdef NALP_PROJECT
    freopen("input.txt", "rt", stdin);
//  freopen("output.txt", "wt", stdout);
#else
#endif

    int minTest = 1, maxTest = INF;
    if (argc == 3) {
        minTest = atoi(argv[1]);
        maxTest = atoi(argv[2]);
    }

    cout.precision(10);
    cout.setf(ios::fixed);
    cerr.precision(10);
    cerr.setf(ios::fixed);

    srand((unsigned int)time(0));
    int tests = nextInt();
    clock_t totalStartTime = clock();
    for(int test = 1; test <= tests; test++) {
        clock_t startTime = clock();
        cerr << "Case #" << test << endl;
        bool skipThisTest = (test < minTest || test > maxTest);
        if (!skipThisTest) cout << "Case #" << test << ": ";
        solve(skipThisTest);

        char formattedTime[100];
        clock_t time = clock() - startTime;
        sprintf(formattedTime, "%d.%03d", int(time / CLOCKS_PER_SEC), int(time % CLOCKS_PER_SEC));
        cerr << "time for test is " << formattedTime << " s." << endl << endl;
    }

    char formattedTime[100];
    clock_t totalTime = clock() - totalStartTime;
    sprintf(formattedTime, "%d.%03d", int(totalTime / CLOCKS_PER_SEC), int(totalTime % CLOCKS_PER_SEC));
    cerr << string(20, '=') << endl;
    cerr << "TOTAL TIME IS " << formattedTime << " s." << endl;

    return 0;
}

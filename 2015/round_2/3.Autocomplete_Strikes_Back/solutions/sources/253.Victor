#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

class Solution
{
    static const int MAXN = 4012;
    static const int MAXK = 103;
    int Result;
    int N, K;
    char *Word[ MAXN ];
    char _Word[ MAXN + 20021 ];

    int Min[ MAXN ][ MAXK ];

public:
    static bool Compare( const char *s1, const char *s2 )
    {
        return strcmp( s1, s2 ) < 0;
    }

    void Work()
	{
        sort( Word, Word + N, Compare );

        Func( 0, N );

        Result = Min[ 0 ][ K ];
	}

    void Func( int begin, int end, int depth = 0 )
    {
        int i, k;
        int *result = Min[ depth ];
        int b, e;

        memset( result, -1, sizeof( *Min ) );

        result[ 0 ] = 0;

        e = begin;

        if ( Word[ begin ][ depth ] == '\0' )
        {
            result[ 1 ] = 0;
            ++e;
        }

        for( b = e; b < end; b = e )
        {
            while( e < end && Word[ b ][ depth ] == Word[ e ][ depth ] )
                ++e;
            Func( b, e, depth + 1 );
            for( k = K; k > 0; --k )
            {
                for( i = 0; i < k; ++i )
                {
                    if( result[ i ] == -1 )
                        continue;
                    if( Min[ depth + 1 ][ k - i ] == -1 )
                        continue;
                    if( result[ k ] == -1 || result[ k ] > result[ i ] + Min[ depth + 1 ][ k - i ] + ( k - i ) )
                        result[ k ] = result[ i ] + Min[ depth + 1 ][ k - i ] + ( k - i );
                }
            }
            b = e;
        }

        result[ 1 ] = 0;

        //printf( "[%d,%d): %d", begin, end, result[ 0 ] );
        //for( i = 1; i <= K && result[ i ] != -1; ++i )
        //    printf( ",%d", result[ i ] );
        //printf( "\n" );
    }
	
	void Read()
	{
        int i;
        char *word = _Word;
        scanf( "%d%d", &N, &K );
        for( i = 0; i < N; ++i )
        {
            scanf( "%s", word );
            Word[ i ] = word;
            word += strlen( word ) + 1;
        }
	}

	void Write( int t )
	{
		printf( "Case #%d: %d\n", t, Result );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
    {
		solution[ i ].Read();
//#pragma omp parallel for schedule(dynamic, 1)
	//for( i = 0; i < t; ++i )
		solution[ i ].Work();
	//for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
    }
	return 0;
}

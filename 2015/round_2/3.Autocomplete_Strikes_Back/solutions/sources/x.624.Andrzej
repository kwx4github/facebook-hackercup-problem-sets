class Trie:
  def __init__(self):
    self.tab = {"summa":0,"children":{}}
  def addWord(self,word):
    pointer = self.tab
    pointer["summa"] += 1
    for letter in word:
      if not letter in pointer["children"]:
        pointer["children"][letter] = {"summa":0,"children":{}}
      pointer = pointer["children"][letter]
      pointer["summa"] += 1
  def calcCost(self,word):
    r = 1
    l = len(word)
    pointer = self.tab
    for letter in word:
      if l==r:
        return r
      pointer = pointer["children"][letter]
      if pointer["summa"]<2:
        return r
      else:
        r += 1
    return r
  def removeWord(self,word):
    afectedWords = []
    pointer = self.tab
    pointer["summa"] -= 1
    for letter in word:
      pointer = pointer["children"][letter]
      pointer["summa"] -= 1

T = input()
for t in range(1,T+1):
  N, K = map(int,raw_input().split())
  trie = Trie()
  words = []
  for w in range(N):
    word = raw_input()
    trie.addWord(word)
    words.append(word)
  costs = {}
  for word in words:
    costs[word] = trie.calcCost(word)
  
  for i in range(N-K):
    toRemove = ''
    maxim = 0
    for key, value in costs.iteritems():
      if value>maxim:
        maxim = value
        toRemove = key
    trie.removeWord(toRemove)
    words.remove(toRemove)
    del costs[toRemove]
    # !!!
    for word in words:
      costs[word] = trie.calcCost(word)
  
  summa = 0
  for key, value in costs.iteritems():
    summa += value
  
  print "Case #%d: %d" % (t,summa)

import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("autocompletestrikesback.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocompletestrikesback.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		AutocompleteStrikesBack solver = new AutocompleteStrikesBack();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class AutocompleteStrikesBack {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        k = in.nextInt();
        Node root = new Node(0);
        for (int i = 0; i < n; i++) {
            addToDictionary(root, in.nextToken());
        }
        root.calcDp();
        int answer = root.dp[k];
        out.println("Case #" + testNumber + ": " + answer);
    }

    static int k;
    static final int ALPHABET = 26;
    static final int INF = Integer.MAX_VALUE;

    static class Node {
        Node[] to;
        int depth;
        boolean isWord;
        int[] dp;

        Node(int depth) {
            to = new Node[ALPHABET];
            this.depth = depth;
        }

        void calcDp() {
            dp = new int[k + 1];
            Arrays.fill(dp, INF);
            dp[0] = 0;
            if (isWord) {
                dp[1] = depth;
            }
            for (Node n1 : to) {
                if (n1 == null) {
                    continue;
                }
                n1.calcDp();
                for (int what = k; what >= 0; --what) {
                    if (dp[what] == INF) {
                        continue;
                    }
                    for (int take = 1; take + what <= k && n1.dp[take] != INF; take++) {
                        dp[take + what] = Math.min(dp[take + what], dp[what] + n1.dp[take]);
                    }
                }
            }
            dp[1] = Math.max(1, depth);
        }

    }

    static int addToDictionary(Node root, String word) {
        Node cur = root;
        int havePrefix = 0;
        while (havePrefix < word.length() && cur.to[word.charAt(havePrefix) - 'a'] != null) {
            cur = cur.to[word.charAt(havePrefix) - 'a'];
            havePrefix++;
        }
        for (int i = havePrefix; i < word.length(); i++) {
            cur.to[word.charAt(i) - 'a'] = new Node(cur.depth + 1);
            cur = cur.to[word.charAt(i) - 'a'];
        }
        cur.isWord = true;
        return havePrefix == word.length() ? havePrefix : havePrefix + 1;
    }
}

class InputReader {
    BufferedReader br;
    StringTokenizer st;

    public InputReader(InputStream stream) {
        br = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        return nextToken();
    }

    public String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (line == null) {
                return null;
            }
            st = new StringTokenizer(line);
        }
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextToken());
    }

}


#include <iostream>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <list>
#include <stack>
#include <cmath>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>
using namespace std;

typedef  long long LL;
const int Mod = 1e9 + 7;
inline int FIX(LL a) {return (a % Mod + Mod) % Mod;}
#define MP(x,y) make_pair(x,y)
#define LEN(x) ((int)x.length())
#define take(x,y) (((x)>>(y)) & 1ll)
//#define move(n) (1<<(n))
#define what_is(x) cerr << #x << " is " << x << endl;
#define eb emplace_back
#define pb push_back
#define UNQ(x) (sort(begin(x),end(x)),x.erase(unique(begin(x),end(x)),end(x)))
const int N = 1000000 + 5;
int n,k;

struct TRIE{
    int son[26];
    int cnt,x;
    void Init(){memset(son,-1,sizeof(son));cnt = 0;x = 0;};
}trie[N];
int tnum = 0;

void init(){
    trie[0].Init();
    tnum = 0;
    return;
}
void Ins(string &tmp) {
    int cur = 0;
    for(int i = 0;i < tmp.size();i++) {
        trie[cur].cnt++;
        if(trie[cur].son[tmp[i] - 'a'] == -1) {
            trie[cur].son[tmp[i]-'a'] = ++tnum;
            trie[tnum].Init();
        }
        cur = trie[cur].son[tmp[i] - 'a'];
    }
    trie[cur].cnt++;
    trie[cur].x = 1;
    return;
}

int dp[N][105];
bool isleaf(int R){
    for(int i = 0;i < 26;i++) {
        if(trie[R].son[i] != -1) return false;
    }
    return true;
}
void dfs(int R,int dep) {
    

    memset(dp[R],-1,sizeof(dp[R]));
    
    dp[R][0] = 0;
    if(trie[R].x == 1) {
        dp[R][1] = dep;
    }
    int all = trie[R].cnt;
    for(int i = 0;i < 26;i++) {
        if(trie[R].son[i] != -1) {
            int p = trie[R].son[i];
            dfs(p,dep + 1);
            for(int j = min(all,k);j >= 1;j--) {
                for(int s = 1;s <= trie[p].cnt && s <= j;s++) {
                    if(s == 1) {
                        if(dp[R][j-s] != -1 && (dp[R][j] == -1 || dp[R][j - s] + dep + 1< dp[R][j])){
                            dp[R][j] = dp[R][j-s] + dep + 1;
                        }
                    }else{
                        if(dp[R][j-s] != -1 && dp[p][s] != -1) {
                            if(dp[R][j] == -1 || dp[R][j-s] + dp[p][s] < dp[R][j]) {
                                dp[R][j] = dp[R][j-s] + dp[p][s];
                            }
                        }
                    }
                }
            }
        }
    }
    dp[R][1] = 0;
    return;
}
int main(){
    freopen("autocomplete_strikes_back.txt","r",stdin);
    freopen("autocomplete_strikes_back.out","w",stdout);
    int T = 0,cas = 0;
    scanf("%d",&T);
    while(T--){
        scanf("%d %d",&n,&k);
        init();
        for(int i = 1;i <= n;i++) {
            string tmp;
            cin>>tmp;
            Ins(tmp);
        }
        dfs(0,0);
        printf("Case #%d: %d\n",++cas,dp[0][k]);
        
    }
    return 0;
}
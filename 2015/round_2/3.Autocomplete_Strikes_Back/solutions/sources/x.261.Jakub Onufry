#include <cstdio>
#include <algorithm>
#include <map>
#include <string>
#include <utility>

using namespace std;

#define MAX 10000003
#define INF 3000000

char buf[30000];

struct vertex {
  vertex(int d, char c) { for (int i = 0; i < 26; ++i) sons[i] = NULL; fin = false; depth = d; deb = c; }

  vertex *son(char c) {
    return sons[c - 'a'];
  }

  void push(int pos) {
    if (buf[pos] == 0) {
      fin = true;
      return;
    }
    if (son(buf[pos]) == NULL) {
      sons[buf[pos] - 'a'] = new vertex(depth + 1, buf[pos]);
    }
    son(buf[pos])->push(pos + 1);
  }

  int grab() {
    int best = -1;
    int bval = INF;
    for (int i = 0; i < 26; ++i) {
      if (sons[i] != NULL && (sons[i]->cost[tak[i] + 1] < INF)) {
        if (sons[i]->cost[tak[i] + 1] - sons[i]->cost[tak[i]] < bval) {
          bval = sons[i]->cost[tak[i] + 1] - sons[i]->cost[tak[i]];
          best = i;
        }
      }
    }
    if (best != -1) tak[best] += 1;
    return bval;
  }

  void calc() {
    for (int i = 0; i < 26; ++i) {
      tak[i] = 0;
      if (sons[i] != NULL) sons[i]->calc();
    }
    cost[0] = 0;
    cost[1] = depth;
    cost[2] = grab();
    if (fin) {
      cost[2] += depth;
    } else {
      cost[2] += grab();
    }
    if (cost[2] > INF) cost[2] = INF;
    for (int K = 3; K <= 100; ++K) {
      cost[K] = cost[K-1] + grab();
      if (cost[K] > INF) cost[K] = INF;
    }
//    printf("Depth %d[%c]: %d %d %d %d %d %d\n", depth, deb, cost[0], cost[1], cost[2], cost[3], cost[4], cost[5]);
  }

  void print() {
    for (int i = 0; i < 26; ++i) {
      if (sons[i] != NULL) sons[i]->print();
    }
  }
  
  int depth;
  int cost[120];
  int tak[26];
  vertex *sons[26];
  bool fin;
  char deb;
};

int solve() {
  vertex *Eps = new vertex(0, '?');
  int N, K;
  scanf("%d %d\n", &N, &K);
  for (int i = 0; i < N; ++i) {
    scanf("%s\n", buf);
    Eps->push(0);
  }
  Eps->calc();
  return Eps->cost[K];
}

int main() {
	int T;
	scanf("%d\n", &T);
	for (int tt = 0; tt < T; ++tt) {
		printf("Case #%d: %d\n", tt + 1, solve());
	}
	return 0;
}

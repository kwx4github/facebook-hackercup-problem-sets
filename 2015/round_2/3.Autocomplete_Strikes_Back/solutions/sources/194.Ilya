#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 20 * 1000 + 13;
const int A = 26;
int n, k;
string s;

int szt = 0;
int go[N][A];
int cnt[N];
int len[N];

inline void init()
{
	szt = 0;
	cnt[szt] = 0;
	memset(go[szt], -1, sizeof go[szt]);
	szt++;
}

inline void add (const string& s)
{
	int v = 0;
	forn (i, sz(s))
	{
		int c = int(s[i] - 'a');
		if (go[v][c] == -1)
		{
			cnt[szt] = 0;
			memset(go[szt], -1, sizeof go[szt]);
			szt++;

			len[szt - 1] = len[v] + 1;
			go[v][c] = szt - 1;
		}

		v = go[v][c];
	}

	cnt[v]++;
}

inline bool read()
{
	if (scanf ("%d%d", &n, &k) != 2)
		return false;

	getline(cin, s);

	init();

	forn (i, n)
	{
		getline(cin, s);

		add(s);
	}

	return true;
}

const int K = 100 + 13;
int d[N][A + 1][K];

void calc (int v)
{
	forn (i, A)
	{
		if (go[v][i] == -1)
		{
			forn (j, K)
				d[v][i + 1][j] = d[v][i][j];

			continue;
		}

		int to = go[v][i];

		calc(to);

		forn (j, K)
		{
			d[v][i + 1][j + 1] = min(d[v][i + 1][j + 1], d[v][i][j] + len[v] + 1);

			forn (addj, K)
				if (j + addj < K)
					d[v][i + 1][j + addj] = min(d[v][i + 1][j + addj], d[v][i][j] + d[to][A][addj]);
		}
	}
}

inline void solve()
{
	forn (i, N)
		forn (j, A + 1)
			forn (k, K)
				d[i][j][k] = INF;

	forn (i, N)
	{
		d[i][A][0] = 0;

		forn (j, min(cnt[i], k) + 1)
			d[i][0][j] = len[i] * j;
	}

	calc(0);
	cout << d[0][A][k] << endl;

//	forn (i, szt)
//		forn (j, k + 1)
//			cerr << i << ' ' << j << ' ' << d[i][A][j] << endl;
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(25) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);

	forn (test, testCnt)
	{
		printf ("Case #%d: ", test + 1);

		assert(read());
		solve();
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

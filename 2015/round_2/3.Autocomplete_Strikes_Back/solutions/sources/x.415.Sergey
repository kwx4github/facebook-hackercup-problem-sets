#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <string>
#include <sstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector <int> vi;

#define pb push_back
#define mp make_pair

template <class T> inline T sqr(const T& x) { return x * x; }
template <class T> inline void updMin(T& a, const T& b) { if (b < a) a = b; }
template <class T> inline void updMax(T& a, const T& b) { if (b > a) a = b; }


int t; 
int n, k; 
string s[4010]; 

int ITER = 1; 
int IND = 0; 

char used[4010][4010];
int mas[4010][4010]; 
int d[4010][111], went[4010][111]; 

inline int getd(int i, int j) {
	if (i > j) swap(i, j); 
	if (used[i][j] == ITER) 
		return mas[i][j];
	used[i][j] = ITER; 

	for (int k = 0; k < min(s[i].size(), s[j].size()); k++) { 
		if (s[j][k] != s[i][k]) {
			return mas[i][j] = k + 1; 
		}
	}

	return mas[i][j] = s[i].size() + 1; 
}

int f(int n, int k) {
	ITER++; 
	int v = k % 2; 
	for (int i = 0; i <= n; i++) {
		d[i][0] = 0; 
	}
	for (int i = 1; i < k; i++) {
		for (int nn = n - i + 1; nn <= n; nn++) {
			d[nn][i] = 1000000000; 
		}
		for (int nn = 0; nn <= n - i; nn++) {
			int & res = d[nn][i]; 
			res = 1000000000; 
			for (int j = nn + 1; j < n; j++) {
				int t = d[j][i - 1] + getd(nn, j); 
				if (t < res) 
				 res = t, went[nn][i] = j; 
			}
		}
	}

	/*for (int i = 0; i < n; i++) {
		cout << s[i] << "\n"; 
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < k; j++) {
			cout << d[i][j] << " \n" [j == k - 1]; 
		}
	}*/

	int ans = d[0][k - 1] + 1; 
	IND = 0; 
	for (int i = 1; i < n; i++) {
		if (d[i][k - 1] + 1 < ans) ans = d[i][k - 1] + 1, IND = i; 
	}
	return ans; 
}

vector<string> anss; 

void print_out(int i, int k) {
	if (k == 0) return; 
	anss.push_back(s[i]); 
	print_out(went[i][k - 1], k - 1); 
}

void solve(int tc) {
	cin >> n >> k; 
	for (int i = 0; i < n; i++) {
		cin >> s[i]; 
	}

	sort(s, s + n); 

	ITER++;
	f(n, k); 
	//cout << f(n, k) << "\n"; 
	print_out(IND, k); 

	int ans = 0; 
	for (int i = 0; i < anss.size(); i++) {
		int cur = -100000000; 
		for (int j = 0; j < anss.size(); j++) {
			if (i == j) continue; 
			int cut = -1; 
			for (int t = 0; t < min(anss[i].size(), anss[j].size()); t++) {
				if (anss[i][t] != anss[j][t]){
					cut = t + 1; 
					break; 
				}
			}
			if (cut == -1) cut = min(anss[i].size(), anss[j].size() + 1);
			if (cut > cur) cur = cut; 
		}
		ans += cur; 
		//cout << anss[i] << " " << cur << "\n"; 
	}

	anss.clear(); 
	cout << "Case #" << tc << ": " << ans << endl; 
}

int main()
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	
	cin >> t; 
	for (int i = 0; i < t; i++) {
		solve(i + 1); 
	}

	return 0;
}



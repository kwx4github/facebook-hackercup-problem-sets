#include <cstdio>
#include <algorithm>
#define N 20005
#define M 26
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int tc, n, m, t[N][M], dp[N][105], p, w[N], cnt[N];
char buf[N];

void dfs(int x, int d){
	FI(i, 1, m) dp[x][i] = 1e9;
	dp[x][0] = 0;
	if(w[x]) dp[x][1] = cnt[x] = 1;
	else cnt[x] = 0;
	
	fi(i, 0, M) if(t[x][i]){
		int c = t[x][i];
		dfs(c, d + 1);
		
		cnt[x] += cnt[c];
		FD(k, min(cnt[x], m), 2){
			if(k == 2){
				if(dp[x][1] == 1)
					dp[x][k] = min(dp[x][k], d + d + 1 + !w[x]);
			}else dp[x][k] = min(dp[x][k], dp[x][k - 1] + d + 1);
			
			int up = min(cnt[c], k);
			FI(j, 2, up){
				if(k - j == 1){
					if(dp[x][1] == 1)
						dp[x][k] = min(dp[x][k], d + dp[c][j] + !w[x]);
				}else dp[x][k] = min(dp[x][k], dp[x][k - j] + dp[c][j]);
			}
		}
		dp[x][1] = 1;
	}
	
	//FI(i, 0, m) printf("dp %d %d %d\n", x, i, dp[x][i]);
}

void solve(){
	scanf("%d %d", &n, &m);
	p = 0;
	FI(i, 1, n){
		scanf("%s", buf);
		int cur = 0;
		for(int j = 0; buf[j]; j++){
			if(!t[cur][buf[j] - 'a']) t[cur][buf[j] - 'a'] = ++p;
			cur = t[cur][buf[j] - 'a'];
			//printf("%c %d\n", buf[j], cur);
		}
		w[cur] = 1;
	}
	
	dfs(0, 0);
	
	FI(i, 0, p){
		w[i] = 0;
		fi(j, 0, M) t[i][j] = 0;
	}
	
	printf("%d\n", dp[0][m]);
}

int main(){
	scanf("%d", &tc);
	FI(z, 1, tc){
		printf("Case #%d: ", z);
		solve();
	}
	scanf("\n");
}

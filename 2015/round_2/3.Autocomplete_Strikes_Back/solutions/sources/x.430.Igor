#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstdio>
#include <cstring>
#include <set>
#include <map>
#include <queue>
using namespace std;



const int K = 30;
const int NMAX = 200005;

struct vertex {
    int next[K];
    int leaf;
    int size;
    int cnt;
    int num;
};

struct info {
    int depth;
    int vertex;
};

vertex t[NMAX+1];
vertex t2[NMAX+1];
int sz;
int ans = 0;
set<int> st;
queue<info> q;
int ans_k = 0;
vector<string> v;

void add_string (const string & s, int ind, vertex t[]) {
    int v = 0;
    for (size_t i=0; i<s.length(); ++i) {
        char c = s[i]-'a';
        if (t[v].next[c] == -1) {
            memset (t[sz].next, -1, sizeof t[sz].next);
            t[v].next[c] = sz++;
            t[t[v].next[c]].num = ind;
        }
        t[v].cnt++;
        v = t[v].next[c];
    }
    t[v].leaf++;
    t[v].cnt++;
    t[v].num = ind;
    t[v].size = s.size();
}

void bfs() {
    while (!q.empty()) q.pop();
    info temp;
    temp.depth = 0;
    temp.vertex = 0;
    q.push(temp);
    while (!q.empty()) {
        temp = q.front();
        q.pop();

        if (ans_k <= 0) continue;
        if (t[temp.vertex].cnt == 1 && temp.vertex > 0) {
            ans_k--;
            ans += temp.depth;
            add_string(v[t[temp.vertex].num], 0, t2);
            continue;
        } else if (t[temp.vertex].leaf != 0) {
            int leafs = t[temp.vertex].leaf;
            leafs = min(leafs, ans_k);
            ans_k -= leafs;
            ans += temp.depth * leafs;
            add_string(v[t[temp.vertex].num], 0, t2);
        }

        for (int i = 0; i < K; i++) {
            if (t[temp.vertex].next[i] != -1) {
                info tt;
                tt.depth = temp.depth + 1;
                tt.vertex = t[temp.vertex].next[i];
                q.push(tt);
            }
        }
    }
}

void bfs2() {
    while (!q.empty()) q.pop();
    info temp;
    temp.depth = 0;
    temp.vertex = 0;
    q.push(temp);
    while (!q.empty()) {
        temp = q.front();
        q.pop();

        if (ans_k <= 0) continue;
        if (t2[temp.vertex].cnt == 1 && temp.vertex > 0) {
            ans_k--;
            ans += temp.depth;
            continue;
        } else if (t2[temp.vertex].leaf != 0) {
            int leafs = t2[temp.vertex].leaf;
            leafs = min(leafs, ans_k);
            ans_k -= leafs;
            ans += temp.depth * leafs;
        }

        for (int i = 0; i < K; i++) {
            if (t2[temp.vertex].next[i] != -1) {
                info tt;
                tt.depth = temp.depth + 1;
                tt.vertex = t2[temp.vertex].next[i];
                q.push(tt);
            }
        }
    }
}

int main()
{

    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);


    int tests;
    cin >> tests;
    for (int _t = 1; _t <= tests; _t++)
    {
        ans = 0;
        for (int i = 0; i < NMAX + 1; i++) {
            t[i].leaf = 0;
            t[i].size = 0;
            t[i].cnt = 0;
            t[i].num = 0;
            memset (t[i].next, -1, sizeof t[i].next);

            t2[i].leaf = 0;
            t2[i].size = 0;
            t2[i].cnt = 0;
            t2[i].num = 0;
            memset (t2[i].next, -1, sizeof t2[i].next);
        }
        sz = 1;
        int n, k;
        cin >> n >> k;
        v.clear();
        for (int i = 0; i < n; i++) {
            string s; cin >> s;
            add_string(s, i, t);
            v.push_back(s);
        }
        ans = 0; ans_k = k;
        bfs();
        ans = 0; ans_k = k;
        bfs2();
        cout << "Case #" << _t << ": " << ans << endl;
    }

    return 0;
}


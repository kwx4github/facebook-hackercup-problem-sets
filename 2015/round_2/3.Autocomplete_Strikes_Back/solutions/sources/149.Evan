import java.util.*;
import java.io.*;
public class AutocompleteStrikesBack
{
	public static final long INFINITY = 1000000000;
	
	public static int total;
	public static ArrayList<Integer>[] adj;
	public static boolean[] end;
	public static int[] depth;
	public static long[][] memo;
	
	public static void main(String[] args) throws Exception
	{
//		FastScanner in = new FastScanner(System.in);
//		PrintWriter out = new PrintWriter(System.out);
		
		FastScanner in = new FastScanner(new File("autocomplete_strikes_back.txt"));
		PrintWriter out = new PrintWriter(new FileWriter(new File("autocomplete_strikes_back_output.txt")));
		
//		Random rand = new Random();
		
		int t = in.nextInt();
		for(int x = 0; x < t; x++)
		{
//			System.out.println(x);
			
			int n = in.nextInt();
			int k = in.nextInt();
			
			total = 0;
			Trie trie = new Trie();
			for(int y = 0; y < n; y++)
			{
				trie.add(in.next());
				
//				StringBuilder sb = new StringBuilder();
//				for(int z = 0; z < 20000 / n; z++)
//				{
//					sb.append((char)('a' + rand.nextInt(26)));
//				}
//				
//				trie.add(sb.toString());
			}
			
			if(k == 1)
			{
				out.println("Case #" + (x + 1) + ": " + 1);
				continue;
			}
			
			adj = new ArrayList[total];
			for(int z = 0; z < adj.length; z++)
			{
				adj[z] = new ArrayList<Integer>();
			}
			
			end = new boolean[total];
			depth = new int[total];
			
			trie.createTree();
			
//			System.out.println(Arrays.toString(end));
//			System.out.println(Arrays.toString(depth));
//			for(int i = 0; i < adj.length; i++)
//			{
//				System.out.println(adj[i]);
//			}
			
			memo = new long[total][k + 1];
			for(int a = 0; a < memo.length; a++)
			{
				Arrays.fill(memo[a], -1);
			}
			
//			System.out.println(total);
			
			long result = type(0, 0, k);
			
//			for(int i = 0; i < memo.length; i++)
//			{
//				System.out.println(Arrays.toString(memo[i]));
//			}
			
			out.println("Case #" + (x + 1) + ": " + result);
		}
		
		out.close();
	}
	
	public static long type(int node, int child, int k)
	{
		if(child >= adj[node].size())
		{
			if(k == 0)
			{
				return 0;
			}
			else if(end[node] && k == 1)
			{
				return depth[node];
			}
			else
			{
				return INFINITY;
			}
		}

		int idx = adj[node].get(child);
//		System.out.println(node + " " + idx + " " + k);
		if(memo[idx][k] != -1)
		{
			return memo[idx][k];
		}
		else if(k == 0)
		{
			return memo[idx][k] = 0;
		}
		else if(k == 1 && child == 0)
		{
			return memo[idx][k] = depth[node];
		}
		else
		{
//			System.out.println(node);
			
			long best = type(node, child + 1, k);
			for(int i = 1; i <= k; i++)
			{
				best = Math.min(best, type(idx, 0, i) + type(node, child + 1, k - i));
			}
			
			return memo[idx][k] = best;
		}
	}
	
	static class Trie
	{
		Node root;
		
		public Trie()
		{
			root = new Node();
		}
		
		public void add(String str)
		{
			Node r = root;
			for(int d = 0; d < str.length(); d++)
			{
				int current = str.charAt(d) - 'a';
				
				if(r.children[current] != null)
				{
					r = r.children[current];
				}
				else
				{
					r.children[current] = new Node();
					r = r.children[current];
				}
			}
			
			r.end = true;
		}
		
		public void createTree()
		{
			createTree(root, 0);
		}
		
		public void createTree(Node root, int d)
		{
			depth[root.index] = d;
			
			if(root.end)
			{
				end[root.index] = true;
			}
			
			for(int i = 0; i < root.children.length; i++)
			{
				if(root.children[i] != null)
				{
					adj[root.index].add(root.children[i].index);
					
					createTree(root.children[i], d + 1);
				}
			}
		}
	}
	
	static class Node
	{
		Node[] children;
		int index;
		boolean end;
		
		public Node()
		{
			index = total;
			end = false;
			children = new Node[26];
			
			total++;
		}
	}
	
	static class FastScanner
	{
		BufferedReader br;
		StringTokenizer st;
		
		public FastScanner(InputStream input)
		{
			br = new BufferedReader(new InputStreamReader(input));
			st = new StringTokenizer("");
		}
		
		public FastScanner(File f) throws IOException
		{
			br = new BufferedReader(new FileReader(f));
			st = new StringTokenizer("");
		}
		
		public String next() throws IOException
		{
			if(st.hasMoreTokens())
			{
				return st.nextToken();
			}
			else
			{
				st = new StringTokenizer(br.readLine());
				return next();
			}
		}
		
		public int nextInt() throws IOException
		{
			return Integer.parseInt(next());
		}
	}
}

#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");

int children[25000][26];
int depth[25000];
int counts[25000];
bool isend[25000];
int rets[25000][101];

int sz;

void add(string s)
{
    int curr = 0;
    
    for(int i=0; i<s.size(); i++)
    {
        counts[curr]++;
        int j = s[i]-'a';
        if(children[curr][j]==0)
        {
            children[curr][j]=sz;
            depth[sz]=i+1;
            sz++;
        }
        curr = children[curr][j];
    }
    isend[curr]=true;
}


int main(void)
{
    int ttt;
    fin >> ttt;
    int ct = 0;
    
    cout.precision(9);
    fout.precision(9);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        
        //CUT HERE
        
        memset(children,0,sizeof(children));
        memset(depth,0,sizeof(depth));
        memset(counts,0,sizeof(counts));
        memset(rets,0,sizeof(rets));
        memset(isend,0,sizeof(isend));
        sz = 1;
        
        int n,k,i,j,l;
        
        fin >>n >> l;
        
        for(i=0; i<n; i++)
        {
            string s;
            fin >> s;
            add(s);
        }
        cout << sz << endl;
        
        int ans = 0;
        
        for(k=sz-1; k>=0; k--)
        {
            rets[k][0]=0;
            for(i=1; i<=100; i++)
                rets[k][i]=1000000;
            for(i=0; i<26; i++)
            {
                if(children[k][i]==0)
                    continue;
                int m = children[k][i];
                
                for(j=100; j>=1; j--)
                {
                    for(int x=j; x>=0; x--)
                    {
                        if(rets[m][x]+rets[k][j-x]<rets[k][j])
                            rets[k][j]=rets[m][x]+rets[k][j-x];

                    }
                }
                
//                for(int x=1; x<=100; x++)
//                {
//                    if(rets[m][x]==1000000)
//                        continue;
//                    for(j=100; j>=x; j--)
//                    {
//                        if(rets[m][x]+rets[k][j-x]<rets[k][j])
//                            rets[k][j]=rets[m][x]+rets[k][j-x];
//                    }
//                }
            }
            if(isend[k])
            {
                for(j=100; j>=1; j--)
                {
                    if(rets[k][j]>rets[k][j-1]+depth[k])
                    {
                        rets[k][j]=rets[k][j-1]+depth[k];
                    }
                }
            }
            if(k>0 && rets[k][1]>depth[k])
                rets[k][1]=depth[k];
            
//            cout << k << " " << depth[k] << " " << counts[k] << "\t" << rets[k][0] << " " << rets[k][1] << " " << rets[k][2] << " " << rets[k][3] << " " << rets[k][4] << endl;
            
        }
        
        ans=rets[0][l];
        
        //KEEP HERE
        
        cout << "Case #" << ct << ": ";
        fout << "Case #" << ct << ": ";
        
        
        cout << ans;
        fout << ans;
        
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


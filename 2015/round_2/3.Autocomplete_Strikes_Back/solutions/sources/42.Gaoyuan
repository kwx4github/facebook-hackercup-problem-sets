#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
//#include <ctime>
#include <map>
using namespace std;

struct node
{
	bool haveWord;
	node* son[26];
	node()
	{
		haveWord = false;
		memset(son, 0, sizeof(son));
	}
}*root;

int need;
int inf = 1000000000;

struct dpValue
{
	int *x;
	dpValue()
	{
		x = new int[101];
		x[0] = 0;
		for(int i = 1; i <= 100; i++)
			x[i] = inf;
	}
};

dpValue dp(node* w)
{
	dpValue ret;
	for(int i = 0; i < 26; i++)
		if(w->son[i] != NULL)
		{
			dpValue t = dp(w->son[i]);
			dpValue newValue;
			for(int i = 0; i <= need; i++)
			{
				if(ret.x[i] == inf)
					break;
				for(int j = 0; j <= need; j++)
				{
					if(t.x[j] == inf)
						break;

					newValue.x[i+j] = min(newValue.x[i+j], ret.x[i] + t.x[j]);
				}
			}
			ret = newValue;
		}
	for(int i = 1; i <= need; i++)
		ret.x[i] += i;
	if(w->haveWord)
	{
		for(int i = need; i >= 1; i--)
			ret.x[i] = ret.x[i-1];
	}
	ret.x[1] = min(ret.x[1], 0);
	return ret;
}

void solve()
{
	root = new node();
	int n;
	cin >> n >> need;
	for(int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		node* now = root;
		for(int j = 0; j < s.length(); j++)
		{
			if(now->son[s[j]-'a'] == NULL)
			{
				now->son[s[j]-'a'] = new node();
			}
			now = now->son[s[j]-'a'];

		}
		now -> haveWord = true;
	}
	dpValue ret = dp(root);
	cout << ret.x[need] << endl;
}

int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

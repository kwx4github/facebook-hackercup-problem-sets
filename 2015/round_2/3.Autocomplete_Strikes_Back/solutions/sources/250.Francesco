#include <bits/stdc++.h>
using namespace std;

const int MAXL = 20000 +10;

struct nodo{
	int ch['z'-'a'+1];
	int ans[111];
	int ter;
	void clear(){
		ter = 0;
		for(int i='a'; i<='z'; i++) ch[i-'a'] = 0;
	}
};

int n, k;
int last;
nodo adj[MAXL];

void dfs(int v){
	for(int i='a'; i<='z'; i++) if(adj[v].ch[i-'a']) {dfs(adj[v].ch[i-'a']);}
	
	for(int i=0; i<=k; i++) adj[v].ans[i] = -1;
	adj[v].ans[0] = 0;
	if(adj[v].ter > 0) adj[v].ans[1] = 0;
	
	int na[111]; for(int i=0; i<=k; i++) na[i] = adj[v].ans[i];
	for(int i='a'; i<='z'; i++) if(adj[v].ch[i-'a']){
		int u = adj[v].ch[i-'a'];
		for(int p=1; p<=k; p++) if(adj[u].ans[p] >= 0){
			for(int x=0; x+p<=k; x++) if(adj[v].ans[x] >= 0)
				if(na[x+p] < 0 || na[x+p] > adj[v].ans[x] + adj[u].ans[p] + p) na[x+p] = adj[v].ans[x] + adj[u].ans[p] + p;
		}
		for(int i=0; i<=k; i++) adj[v].ans[i] = na[i];
	}	
	
	adj[v].ans[1] = 0;
	
}

void solve(){
	cin >> n >> k;
	if(k == 1) {cout << 1 << '\n'; return;}
	
	adj[0].clear();
	last = 0;
	
	for(int i=0; i<n; i++){
		string s; cin >> s;
		int v = 0;
		for(char c:s){
			adj[v].ter--;
			if(adj[v].ch[c-'a']){
				v = adj[v].ch[c-'a'];
			}else{
				last++;
				v = adj[v].ch[c-'a'] = last;
				adj[v].clear();
			}
			adj[v].ter++;
		}
	}
	dfs(0);
	cout << adj[0].ans[k] << '\n';
}

int main(){
	ios::sync_with_stdio(0);
	int t; cin >> t;
	for(int i=1; i<=t; i++){
		cout << "Case #" << i << ": ";
		solve();
		//~ cerr << i << " solved" << endl;
	}
	return 0;
}

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 300003
#define MAXK 202
#define INF 1000000000

int n, m, l, k;
char s[MAXN];
int next[MAXN][26];
int d[MAXN][MAXK];
int buf[MAXK];
int mark[MAXN];

inline void go(int v)
{
	for (int j = 0; j <= k; ++j)
		d[v][j] = INF;
	d[v][0] = 0;
	if (mark[v])
		d[v][1] = 0;
	for (int i = 0; i < 26; ++i)
	{
		int v2 = next[v][i];
		if (v2 == -1) continue;
		go(v2);
		for (int j = 0; j <= k; ++j)
			buf[j] = d[v][j];
		for (int w = 1; w <= k; ++w)
		{
			int val = d[v2][w];
			if (val == INF) continue;
			for (int j = w; j <= k; ++j)
			{
				int val = d[v2][w];
				if (w == 1) 
					val = 1;
				else
					val += w;
				d[v][j] = min(d[v][j], buf[j - w] + val);
			}
		}
	}
/*	cout << " v = " << v << ", s = " << s << endl;
	for (int j = 0; j <= k; ++j)
		cout << d[v][j] << ' ';
	cout << endl;*/
}

inline void solve()
{
	scanf("%d%d", &n, &k);

	m = 1;
	memset(next[0], -1, sizeof(next[0]));
	mark[0] = 0;

	int ans = 0;
	for (int i = 0; i < n; ++i)
	{
		scanf("%s", s);
		l = strlen(s);
		int v = 0;
		for (int j = 0; j < l; ++j)
		{
			int ch = s[j] - 'a';
			if (next[v][ch] == -1)
			{
				memset(next[m], -1, sizeof(next[m]));
				mark[m] = 0;
				next[v][ch] = m++;				
			}
			v = next[v][ch];
		}
		mark[v] = 1;
	}
	go(0);
	printf("%d\n", d[0][k]);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define LL long long

#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
	bool visited[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
			pNode->visited[i] = false;
        }
    }

    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}


void insert(trie_t *pTrie, string key)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }

    pCrawl->value = pTrie->count;
}

int search(trie_t *pTrie, string key,LL c)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
		if(!pCrawl->children[index])
			return 0;
		if(!pCrawl->visited[index])
		{
			pCrawl->visited[index] = true;
			LL lol = 0;
			for(int j=level;j<length;j++)
			{
				index = CHAR_TO_INDEX(key[j]);
				pCrawl->visited[index] = true;
				pCrawl = pCrawl->children[index];
				lol++;
			}
			c++;
			for(int i=0;i<26;i++)
                if(pCrawl->children[i])
            {
                c += lol-1;
                break;
            }
			return c;
	    }
	    c++;
		pCrawl = pCrawl->children[index];
	}
}
int main(void)
{
    freopen("autocomplete_strikes_back.txt","r",stdin);
    freopen("output.txt","w",stdout);
	int T,N,K;
	scanf("%d",&T);
    int a = 0;

	for(int i=1;i<=T;i++)
	{
		trie_t trie;
		initialize(&trie);
		printf("Case #%d: ",++a);
		string S;
        vector<string> V;
		scanf("%d %d",&N,&K);
		for(int j=0;j<N;j++)
		{
			cin>>S;
			V.push_back(S);
			insert(&trie,S);
		}
		LL c = 0;
		vector<int> arr;
		for(int j=0;j<N;j++)
        {
            int con = search(&trie,V[j],c);
            arr.push_back(con);
            c = 0;

        }
		sort(arr.begin(),arr.end());
		LL sum = 0;
		for(int i=0;i<K;i++)
            sum += arr[i];
        cout<<sum<<endl;
	}
	return 0;
}




#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

const int K = 102, N = 22000;

struct node {
    node *c[26];
    int f[K], cnt;
    bool end;
} ;

int h[K];
char s[N];

void insert(node *t, char *s) {
    while (*s) {
        int c = *s - 'a';
        ++t->cnt;
        
        if (!t->c[c])
            t->c[c] = new node();
        t = t->c[c];
        ++s;
    }
    t->end = true, ++t->cnt;
}

void dp(node *T, int k, int L = 0) {
    memset(T->f, 0x3f, sizeof(T->f));
    T->f[0] = 0;
    if (T->end) T->f[1] = L;
 
    int *f = T->f;
    for (int i = 0; i < 26; ++i) {
        if (T->c[i]) {
            dp(T->c[i], k, L + 1);
            int *g = T->c[i]->f;

            for (int c = 0; c <= k; ++c)
                h[c] = 1e9;
            for (int x = 0; x <= k; ++x)
                for (int y = 0; x + y <= k; ++y)
                    h[x + y] = min(h[x + y], f[x] + g[y]);
            for (int c = 0; c <= k; ++c)
                f[c] = h[c];
        }
    }
    T->f[1] = L;
}

int main() {
    freopen("C.in", "r", stdin);

    int T;
    scanf("%d", &T);
    for (int tc = 1; tc <= T; ++tc) {
        int n, k;
        
        scanf("%d%d", &n, &k);

        node *root = new node();
        for (int i = 1; i <= n; ++i) {
            scanf("%s", s);
            insert(root, s);
        }
        dp(root, k);
        
        printf("Case #%d: %d\n", tc, root->f[k]);
        fprintf(stderr, "%d\n", tc);
    }
    return 0;
}

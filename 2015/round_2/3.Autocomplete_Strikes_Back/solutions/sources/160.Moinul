#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;


#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>

using namespace std;

struct NODE{
    int words,prefix;
    NODE* edge[26];
    NODE(){
        words=prefix=0;
        for (int i=0;i<26;++i){
            edge[i]=NULL;
        }
    }
    ~NODE(){
        for (int i=0;i<26;++i){
            if ( edge[i]!=NULL ){
                delete edge[i];
            }
        }
    }
}*root;

void add(NODE *v,char* word){

    v->prefix++;

    if ( word[0]=='\0' ){
        v->words++;
    }else{
        if ( v->edge[ word[0]-'a' ]== NULL ){
            v->edge[ word[0]-'a' ]=new NODE();
        }
        add(v->edge[ word[0]-'a' ],word+1);
    }
}

char str[100100];

map<NODE*,int> mp;
int dp[10000][105][26];
int cnt;

int func( NODE *v,int have,int child ){

    if ( child == 0 ){
        if ( v->prefix == 1 ){
            if ( have == 1 )return 0;
            else return (1<<29);
        }
        if ( have == 1 && child == 0 ){
            if ( v->prefix >0 )return 0;
        }

        have-= v->words;
        if ( have <= 0 )return 0;
    }


    //cout<<have<<endl;

    if ( child >=26 ){
        if ( have != 0 )return (1<<29);
        else return 0;
    }

    if ( mp.find( v ) == mp.end() ){
        mp[v]=cnt++;
    }

    int num=mp[v];

    int &ret = dp[num][have][child];
    if ( ret != -1 )return ret;

    ret = func( v,have,child+1 ) ;
    //cout<<ret<<endl;

    for (int j=1;j<=have;++j){
        if ( v->edge[child] != NULL ){
            ret = min( ret , j + func( v->edge[child],j,0 ) + func( v,have-j,child+1 ) );
        }
    }

    //cout<<ind<<endl;

    return ret;
}

int main(){

    freopen("autocomplete_strikes_back.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int kase;
    scanf("%d",&kase);

    for ( int kk=1;kase--;++kk ){

        root=new NODE();
        int n,k;
        scanf("%d %d",&n,&k);

        for (int i=0;i<n;++i){
            scanf("%s",str);
            add(root,str);
        }
        NEG(dp);
        mp.clear();
        cnt = 0;


        printf("Case #%d: %d\n",kk,func( root,k,0 ));

        delete root;
    }


    return 0;
}

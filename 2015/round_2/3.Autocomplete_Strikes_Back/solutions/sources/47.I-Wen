#include <bits/stdc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define PII pair<int,int>
#define VPII vector<pair<int,int> >
#define PLL pair<long long,long long>
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MOD = 1e9+7;
const int SIZE = 1e6+10;
string str[4000];
int K;
int id;
int dp[40000][101];
void fresh(int &x,int v){
    if(x==-1||x>v)x=v;
}
int dfs(int lv,int L,int R){
    int me=id++;
    memset(dp[me],-1,sizeof(dp[me]));
    dp[me][0]=0;
    int st=L;
    
    if(L==R){
        if(SZ(str[st])<=lv)dp[me][1]=0;
        else dp[me][1]=1;
        return me;
    }
    while(st<=R&&SZ(str[st])<=lv)st++;
    if(st>L){
        dp[me][1]=0;
    }
    for(int i=st,j;i<=R;i=j){
        for(j=i+1;j<=R&&str[j][lv]==str[i][lv];j++);
        int you=dfs(lv+1,i,j-1);
        for(int k2=K;k2>=0;k2--){
            if(dp[me][k2]<0)continue;
            for(int k=K-k2;k>0;k--){
                if(dp[you][k]<0)continue;
                if(k>1)fresh(dp[me][k2+k],dp[me][k2]+dp[you][k]+k);
                else fresh(dp[me][k2+1],dp[me][k2]+1);
            }
        }
    }
    //printf("dp[%d](%d,%d,%d):",me,lv,L,R);
    //REP(i,K+1)printf("%d,",dp[me][i]);
    //puts("");
    return me;
}
int main(){
    int N;
    CASET{
        RII(N,K);
        REP(i,N)cin>>str[i];
        sort(str,str+N);
        id=0;
        int me=dfs(0,0,N-1);
        printf("Case #%d: %d\n",case_n++,dp[me][K]);
    }
    return 0;
}

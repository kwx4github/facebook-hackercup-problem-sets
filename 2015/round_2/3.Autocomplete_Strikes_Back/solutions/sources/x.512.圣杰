#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <queue>
#include <map>
#include <string>
#include <stack>
#include <bitset>
#include <vector>

using namespace std;
struct Trie {
    int ch[200020][30];
    int sz;
    int val[200020];
    void clear() {
        memset(ch[0], 0, sizeof ch[0]);
        sz = 1;
        memset(val, 0, sizeof val);
    }
    int idx(char c) { return c - 'a'; }
    void insert(char *s) {
        int u = 0, n = strlen(s);
        for(int i = 0; i < n; i++) {
            int c = idx(s[i]);
            if(!ch[u][c]) {
                memset(ch[sz], 0, sizeof ch[sz]);
                val[sz] = 1;
                ch[u][c] = sz++;
            }
            else val[ch[u][c]]++;
            u = ch[u][c];
        }
    }
    int find(char *s) {
        int u = 0, n = strlen(s);
        for(int i = 0; i < n; i++) {
            int c = idx(s[i]);
            if(val[ch[u][c]] == 1) return i + 1;
            u = ch[u][c];
        }
        return n;
    }
};
Trie trie, trie2;
struct node {
    char s[20000];
    int d;
    bool operator < (const node &A) const {
        return d < A.d;
    }
}a[4000];
int main() {
    #ifdef LOCAL
    freopen("autocomplete_strikes_back.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    int T, cas = 1;
    scanf("%d", &T);
    while(T--) {
        int n, k, ans = 0;
        trie.clear();
        trie2.clear();
        scanf("%d%d", &n, &k);
        for(int i = 0; i < n; i++) {
            scanf("%s", a[i].s);
            trie.insert(a[i].s);
            a[i].d = trie.find(a[i].s);
//            printf("%d ", a[i].d);
        }
//        for(int i = 0; i < n; i++) {
//            a[i].d = trie.find(a[i].s);
//            printf("%d ", a[i].d);
//        }
        sort(a, a + n);
        for(int i = 0; i < k; i++) {
            trie2.insert(a[i].s);
        }
        for(int i = 0; i < k; i++) {
//            printf("%d%s ", trie2.find(a[i].s), a[i].s);
            ans += trie2.find(a[i].s);
        }
        printf("Case #%d: %d\n", cas++, ans);
    }
    return 0;
}

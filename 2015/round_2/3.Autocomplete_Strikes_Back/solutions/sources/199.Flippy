#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>

using namespace std;

typedef long long LL;

const int maxn = 23333;
const int maxm = 233;
const int inf = 987654321;

struct Point{
	Point *ch[26];
	int f[233];
	int sum;
	bool end;
	void DP();
}haj, tr[maxn];

char s[maxn];
int trs, m;

void Add(){
	Point *u = &tr[0];
	for (int i = 0; s[i] != '\0'; ++i){
		++u->sum;
		if (u->ch[s[i] - 'a'] == NULL){
			tr[++trs] = haj;
			u->ch[s[i] - 'a'] = &tr[trs];
		}
		u = u->ch[s[i] - 'a'];
	}
	++u->sum;
	u->end = 1;
	return ;
}

void Point::DP(){
	for (int i = 0; i<26; ++i)
		if (ch[i] != NULL) ch[i]->DP();
	for (int i = 1; i<=m; ++i) f[i] = inf;
	for (int i = 0; i<26; ++i)
		if (ch[i] != NULL){
			for (int j = m; j>0; --j)
				for (int k = 1; k<=j; ++k)
					f[j] = min(f[j], f[j - k] + ch[i]->f[k]);
		}
	for (int i = 2; i<=m; ++i)
		f[i] += i;
	if (end){
		for (int j = m; j>2; --j)
			f[j] = min(f[j], f[j - 1] + 1);
		f[2] = min(f[2], f[1] + 2);
		f[1] = 1;
	}
	return ;
}

int main(){
	int T;
	scanf("%d", &T);
	for (int TI = 1; TI<=T; ++TI){
		int n;
		scanf("%d%d", &n, &m);
		trs = 0;
		tr[0] = haj;
		for (int i = 1; i<=n; ++i){
			scanf("%s", s);
			Add();
		}
		tr[0].DP();
		printf("Case #%d: %d\n", TI, tr[0].f[m] - (m == 1? 0: m));
	}
	return 0;
}

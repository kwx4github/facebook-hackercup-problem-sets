package com.company;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
    static BufferedReader in;
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;
    private static int[] sMas;

    public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(new FileInputStream("in.txt")));
        out = new PrintWriter("out.txt");
        int t = nextInt();

        for (int i = 0; i < t; i++) {
            out.print("Case #" + (i + 1) + ": ");

            int n = nextInt();
            sMas = new int[n];
            for (int j = 0; j < n; j++) {
                sMas[j] = nextInt();
            }
            boolean res = false;

                res |= check(1, n - 1, sMas[0]-1, sMas[0]+1);
                res |= check(0, n - 2,sMas[n-1]-1, sMas[n-1]+1);
            System.out.println("-----------");
            out.println(res ? "yes" : "no");
            out.flush();
        }

        in.close();
        out.flush();
        out.close();
    }

    static boolean check(int l, int r, int lv, int rv) {
        System.out.println("l = " + l + " r = "+r + " lv = " + lv + " rv = "+rv);
        boolean res = true;
        while (l < r) {
            if (sMas[l] == lv) {
                l++;
                lv--;
            } else if (sMas[l] == rv) {
                l++;
                rv++;
            } else if (sMas[r] == lv) {
                r--;
                lv--;
            } else if (sMas[r] == rv) {
                r--;
                rv++;
            } else {
                res = false;
                break;
            }
        }
        return res;
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return st.nextToken();
    }
}

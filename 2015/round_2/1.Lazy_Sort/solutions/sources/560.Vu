#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(begin) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(begin) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string &s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

void err(vector<string>::iterator it) {}

template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}


const int N = 50005;
int n, a[N];

bool solve(int flag) {
	bool ans = true;
	int lb, rb;
	int ind = flag ? 0 : n - 1;
	int top = a[ind], bottom = a[ind];
	if (flag) lb = 1, rb = n - 1;
	else lb = 0, rb = n - 2;
	while (rb >= lb) {
		if (a[rb] - top == -1) top = a[rb], rb--;
		else if (a[rb] - bottom == 1) bottom = a[rb], rb--;
		else if (a[lb] - top == -1) top = a[lb], lb++;
		else if (a[lb] - bottom == 1) bottom = a[lb], lb++;
		else {
			ans = false; break;
		}
	}
	return ans;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest;
    cin >> ntest;
    rep2(t, 1, ntest) {
    	cin >> n;
    	rep1(i, 0, n) cin >> a[i];
    	bool ans = false;
    	if (solve(0)) ans = true;
    	if (solve(1)) ans = true;
        printf("Case #%d: %s\n", t, ans ? "yes" : "no");
    }
    return 0;
}

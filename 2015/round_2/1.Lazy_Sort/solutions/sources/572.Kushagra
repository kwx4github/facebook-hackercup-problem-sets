#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <utility>
#include <iomanip>
#include <bitset>
#include <fstream>

using namespace std;

typedef long long int64;

bool DFS(const vector<int> &A) {
  struct Node {
    int start, end;
    int top, bottom;
  };

  stack<Node> S;
  Node root;
  root.start = 0;
  root.end = A.size() - 1;
  root.top = root.bottom = -1;

  S.push(root);

  while (!S.empty()) {
    Node node = S.top();
    S.pop();

    // Push start
    if ((node.top == -1 && node.bottom == -1) || ((A[node.start] == (node.top - 1)) || (A[node.start] == (node.bottom + 1)))) {
      Node child;
      child.start = node.start + 1;
      child.end = node.end;

      if (child.start <= child.end) {
        if (node.top == -1 && node.bottom == -1) {
          child.top = child.bottom = A[node.start];
        }
        else if (A[node.start] == node.top - 1) {
          child.top = A[node.start];
          child.bottom = node.bottom;
        }
        else {
          child.top = node.top;
          child.bottom = A[node.start];
        }
        S.push(child);
      }
      else {
        return true;
      }
    }
    // Push end
    if ((node.top == -1 && node.bottom == -1) || ((A[node.end] == (node.top - 1)) || (A[node.end] == (node.bottom + 1)))) {
      Node child;
      child.start = node.start;
      child.end = node.end - 1;

      if (child.start <= child.end) {
        if (node.top == -1 && node.bottom == -1) {
          child.top = child.bottom = A[node.end];
        }
        else if (A[node.end] == node.top - 1) {
          child.top = A[node.end];
          child.bottom = node.bottom;
        }
        else {
          child.top = node.top;
          child.bottom = A[node.end];
        }
        S.push(child);
      }
      else {
        return true;
      }
    }
  }

  return false;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int T;
  cin >> T;

  for (int kase = 1; kase <= T; kase++) {
    int N;
    cin >> N;

    vector<int> A(N);
    for (int i = 0; i < N; i++)
      cin >> A[i];

    bool p = DFS(A);
    cout << "Case #" << kase << ": ";
    if (p)
      cout << "yes\n";
    else
      cout << "no\n";
  }

  return 0;
}

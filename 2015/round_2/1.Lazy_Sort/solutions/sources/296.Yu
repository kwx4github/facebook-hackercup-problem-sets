#include <iostream>
#include <string>
#include <deque>

using namespace std;

static const int MAX = 50000;
int ids[MAX];

int main(void) {
  int T, N;

  cin >> T;
  for (int i = 1; i <= T; ++i) {
    cin >> N;
    for (int j = 0; j < N; ++j) {
      cin >> ids[j];
    }
    string res = "no";
    deque<int> original;
    deque<int> finished;

    finished.push_back(ids[0]);
    for (int j = 1; j < N; ++j) {
      original.push_back(ids[j]);
    }
    for (int j = 1; j < N; ++j) {
      if (abs(original.front() - finished.front()) == 1) {
        finished.push_front(original.front());
        original.pop_front();
      } else if (abs(original.front() - finished.back()) == 1) {
        finished.push_back(original.front());
        original.pop_front();
      } else if (abs(original.back() - finished.front()) == 1) {
        finished.push_front(original.back());
        original.pop_back();
      } else if (abs(original.back() - finished.back()) == 1) {
        finished.push_back(original.back());
        original.pop_back();
      } else break;
    }
    if (finished.size() == N) res = "yes";

    original.clear();
    finished.clear();
    finished.push_back(ids[N - 1]);
    for (int j = 1; j < N; ++j) {
      original.push_back(ids[j - 1]);
    }
    for (int j = 1; j < N; ++j) {
      if (abs(original.front() - finished.front()) == 1) {
        finished.push_front(original.front());
        original.pop_front();
      } else if (abs(original.front() - finished.back()) == 1) {
        finished.push_back(original.front());
        original.pop_front();
      } else if (abs(original.back() - finished.front()) == 1) {
        finished.push_front(original.back());
        original.pop_back();
      } else if (abs(original.back() - finished.back()) == 1) {
        finished.push_back(original.back());
        original.pop_back();
      } else break;
    }
    if (finished.size() == N) res = "yes";

    cout << "Case #" << i << ": " << res << endl;
  }

  return 0;
}

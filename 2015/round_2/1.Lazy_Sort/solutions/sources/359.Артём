#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
// #define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<pair<int, ll> > > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...

bool try_it(vector <int> V)
{
    int l = -1, r = -1;
    int n = (int)V.size();
    int tl = 0, tr = n - 1;
    l = r = V[0];
    tl = 1;
    while (tl <= tr)
    {
        int x;
        x = V[tl];
        // cout << "s\n";
        // cout << x << endl;
        if (x + 1 == l || x - 1 == r)
        {
            if (x + 1 == l)
                l = x;
            else
                r = x;
            tl++;
            continue;
        }
        x = V[tr];
        // cout << x << endl;
        if (x + 1 == l || x - 1 == r)
        {
            if (x + 1 == l)
                l = x;
            else
                r = x;
            tr--;
            continue;
        }
        return false;
    }
    return true;
}

void solve(int test)
{
    int n;
    cin >> n;
    vector <int> V(n), P(n);
    for (int i = 0; i < n; i++)
    {
        cin >> V[i];
        P[n - 1 - i] = V[i];
    }
    if (try_it(V) || try_it(P))
        cout << "Case #" << test << ": yes" << endl;
    else
        cout << "Case #" << test << ": no" << endl;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    int T;
    cin >> T;
    for (int q = 0; q < T; q++)
    {
        solve(q + 1);
    }
    #ifdef HOME
        cerr << "\ntime = " << clock() / 1000 << " ms\n";
    #endif
    return 0;
}
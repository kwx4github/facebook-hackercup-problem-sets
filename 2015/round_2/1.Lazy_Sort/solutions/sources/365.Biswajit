#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

int arr[50010];
int sorted[50010];

bool solve(int n)
{
	// for(int i=0; i<n; i++) cout<<arr[i]<<" ";
	// 	cout<<endl;

	int p=0, q=n-1;

	int a=-1,b=n;
	for(int i=0; i<n; i++)
	if(sorted[i] == arr[p])
	{
		a = max(a, i);
		b = min(b, i);
	}

	int v = arr[p];
	while(p<q and arr[q] == v) q--;
	while(arr[p] == v and p<q) p++;
	a++, b--;

	// cout<<a<<" "<<b<<" "<<p<<" "<<q<<endl;

	while(a<n and b >=0)
	{
		if(sorted[a] == arr[p]) p++, a++;
		else if(sorted[a] == arr[q]) q--, a++;
		else if(sorted[b] == arr[p]) p++, b--;
		else if(sorted[b] == arr[q]) q--, b--;
		else return false;
	}

	while(a<n)
	{
		if(sorted[a] == arr[p]) p++, a++;
		else if(sorted[a] == arr[q]) q--, a++;
		else return false;
	}

	while(b>=0)
	{
		if(sorted[b] == arr[p]) p++, b--;
		else if(sorted[b] == arr[q]) q--, b--;
		else return false;
	}

	return true;
}

int main()
{

	int t;
	gi(t);

	for(int tt = 1; tt<=t; tt++)
	{
		int n;
		gi(n);

		for(int i=0; i<n; i++)
		{
			gi(arr[i]);
			sorted[i] = arr[i];
		}

		sort(sorted, sorted+n);
		bool chk = solve(n);
		reverse(arr, arr+n);
		chk |= solve(n);

		if(chk) printf("Case #%d: yes\n", tt);
		else printf("Case #%d: no\n", tt);
	}

    return 0;
}
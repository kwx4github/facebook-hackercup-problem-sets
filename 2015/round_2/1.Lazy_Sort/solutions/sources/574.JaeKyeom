#include <algorithm>
#include <deque>
#include <iostream>
#include <queue>
#include <stack>
#include <string>
#include <vector>

//using namespace std;

using std::cin;
using std::cout;
using std::endl;

using std::max;
using std::min;
using std::deque;
using std::queue;
using std::stack;
using std::string;
using std::vector;

typedef string str;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<vi> vvi;
typedef vector<vs> vvs;

int main() {
  int T = 0;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int N = 0;
    cin >> N;
    deque<int> data(N);
    for (int i = 0; i < N; ++i) {
      cin >> data[i];
    }
    deque<int> data2(data);
    bool possible = false;
    {
      bool no = false;
      deque<int> result;
      result.push_back(data.front());
      data.pop_front();
      for (int i = 1; i < N; ++i) {
        if (data.front() == result.front() - 1) {
          result.push_front(data.front());
          data.pop_front();
        } else if (data.back() == result.front() - 1) {
          result.push_front(data.back());
          data.pop_back();
        } else if (data.front() == result.back() + 1) {
          result.push_back(data.front());
          data.pop_front();
        } else if (data.back() == result.back() + 1) {
          result.push_back(data.back());
          data.pop_back();
        } else {
          no = true;
          break;
        }
      }
      possible = possible || (!no);
    }
    {
      deque<int>& data(data2);
      {
        bool no = false;
        deque<int> result;
        result.push_back(data.back());
        data.pop_back();
        for (int i = 1; i < N; ++i) {
          if (data.front() == result.front() - 1) {
            result.push_front(data.front());
            data.pop_front();
          } else if (data.back() == result.front() - 1) {
            result.push_front(data.back());
            data.pop_back();
          } else if (data.front() == result.back() + 1) {
            result.push_back(data.front());
            data.pop_front();
          } else if (data.back() == result.back() + 1) {
            result.push_back(data.back());
            data.pop_back();
          } else {
            no = true;
            break;
          }
        }
        possible = possible || (!no);
      }
    }
    cout << "Case #" << t << ": " << (possible ? "yes" : "no") << endl;
  }

  return 0;
}

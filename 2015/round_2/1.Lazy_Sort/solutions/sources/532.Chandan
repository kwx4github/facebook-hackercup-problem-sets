package hackercup.y2015.round2.proba;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

    private static class Solver {

        public void solve(InputReader in, PrintWriter out) {
            int n = in.nextInt();

            int a[] = new int[n];

            for (int i=0; i<n; i++) {
                a[i] = in.nextInt();
            }

            if (n == 1) {
                out.println("true");
                return;
            }

            boolean f1 = solve1(n, a);
            boolean f2 = solve2(n, a);

            if (f1 || f2) {
                out.println("yes");
            } else {
                out.println("no");
            }
        }

        private boolean solve1(final int n, final int[] a) {
            int b[] = new int[2*n];

            //start with first
            b[n] = a[0];
            int be = n;
            int bs = n;

            int as = 1;
            int ae = n-1;
            while (as <= ae) {
                //check start of current
                //1.try placing at start
                if (a[as] == b[bs] - 1) {
                    bs--;
                    b[bs] = a[as];
                    as++;
                } else if (a[as] == b[be] + 1) {
                    be++;
                    b[be] = a[as];
                    as++;
                } else if (a[ae] == b[bs] - 1) {
                    bs--;
                    b[bs] = a[ae];
                    ae--;
                } else if (a[ae] == b[be] + 1) {
                    be++;
                    b[be] = a[ae];
                    ae--;
                } else {
                    return false;
                }
            }
            return true;
        }

        private boolean solve2(final int n, final int[] a) {
            int b[] = new int[2*n];

            //start with first
            b[n] = a[n-1];
            int be = n;
            int bs = n;

            int as = 0;
            int ae = n-2;
            while (as <= ae) {
                //check start of current
                //1.try placing at start
                if (a[as] == b[bs] - 1) {
                    bs--;
                    b[bs] = a[as];
                    as++;
                } else if (a[as] == b[be] + 1) {
                    be++;
                    b[be] = a[as];
                    as++;
                } else if (a[ae] == b[bs] - 1) {
                    bs--;
                    b[bs] = a[ae];
                    ae--;
                } else if (a[ae] == b[be] + 1) {
                    be++;
                    b[be] = a[ae];
                    ae--;
                } else {
                    return false;
                }
            }
            return true;
        }
    }


    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/y2015/round2/proba/";

    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

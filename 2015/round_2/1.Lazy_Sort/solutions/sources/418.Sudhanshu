#include <bits/stdc++.h>
using namespace std;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for( ll i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
#define mod 1000000007
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long int ll;
typedef vector< pair<int,int> > VPI;
class fb1{
  private:
   int a[50005],n;
 public:
  fb1()
  {
    cin>>n;
    rep(i,0,n)
      cin >> a[i];
  };
  bool fromBegin()
  {
   int start = 1, end = n-1;
    deque<int> d;
      d.pb(a[0]);
      bool isPossible = true;
      rep(i,1,n)  {
        if(a[start] == d.front() - 1)  {
          d.push_front(a[start]);
          start++;
          continue;
        }
        if(a[end] == d.front() - 1)  {
          d.push_front(a[end]);
          end--;
          continue;
        }
        if(a[start] == d.back() + 1) {
          d.push_back(a[start]);
          start++;
          continue;
        }
        if(a[end] == d.back() + 1) {
          d.push_back(a[end]);
          end--;
          continue;
        }
        isPossible = false;
        break;
      }
      return isPossible;

  };
  bool fromEnd()
  {
    deque<int> d;
      d.pb(a[n-1]);
      int start = 0, end = n-2;
      bool isPossible = true;
      rep(i,1,n) {
        if(a[start] == d.front() - 1)  {
          d.push_front(a[start]);
          start++;
          continue;
        }
        if(a[end] == d.front() - 1)  {
          d.push_front(a[end]);
          end--;
          continue;
        }
        if(a[start] == d.back() + 1) {
          d.push_back(a[start]);
          start++;
          continue;
        }
        if(a[end] == d.back() + 1) {
          d.push_back(a[end]);
          end--;
          continue;
        }
        isPossible = false;
        break;
      }
      return isPossible;
  };
 };
int main()
{
  int t,n,start,end,temp=1;  
  cin>>t;
  while(t--)  {
    fb1 tmp;
    if(tmp.fromBegin()||tmp.fromEnd())
      cout<<"Case #"<<temp<< ": yes\n";
    else
     cout<<"Case #"<<temp<< ": no\n";
    temp++;
  }
  return 0;
}
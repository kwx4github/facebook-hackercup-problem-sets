import java.io.File;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.Scanner;

public class LazySort {
	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(new File("LazySort.in"));
		PrintStream out = new PrintStream("LazySort.out");
		int T = in.nextInt();
		for (int kase = 1; kase <= T; kase++) {
			int N = in.nextInt();
			LinkedList<Integer> A = new LinkedList<Integer>();
			LinkedList<Integer> B = new LinkedList<Integer>();
			for (int i = 0; i < N; i++) {
				int x = in.nextInt();
				A.add(x);
				B.add(x);
			}
			if (left(N, A) || right(N, B)) {
				out.println("Case #" + kase + ": yes");
			} else {
				out.println("Case #" + kase + ": no");
			}
		}
		in.close();
		out.flush();
		out.close();
	}

	static boolean left(int n, LinkedList<Integer> list) {
		LinkedList<Integer> ans = new LinkedList<Integer>();
		ans.add(list.removeFirst());
		while (!list.isEmpty()) {
			if (ans.peekFirst() - 1 == list.peekFirst()) {
				ans.addFirst(list.removeFirst());
				continue;
			}
			if (ans.peekFirst() - 1 == list.peekLast()) {
				ans.addFirst(list.removeLast());
				continue;
			}
			if (ans.peekLast() + 1 == list.peekFirst()) {
				ans.addLast(list.removeFirst());
				continue;
			}
			if (ans.peekLast() + 1 == list.peekLast()) {
				ans.addLast(list.removeLast());
				continue;
			}
			break;
		}
		if (ans.size() != n) {
			return false;
		}
		for (int i = 1; i <= n; i++) {
			if (ans.removeFirst() != i) {
				return false;
			}
		}
		return true;
	}

	static boolean right(int n, LinkedList<Integer> list) {
		LinkedList<Integer> ans = new LinkedList<Integer>();
		ans.add(list.removeLast());
		while (!list.isEmpty()) {
			if (ans.peekFirst() - 1 == list.peekFirst()) {
				ans.addFirst(list.removeFirst());
				continue;
			}
			if (ans.peekFirst() - 1 == list.peekLast()) {
				ans.addFirst(list.removeLast());
				continue;
			}
			if (ans.peekLast() + 1 == list.peekFirst()) {
				ans.addLast(list.removeFirst());
				continue;
			}
			if (ans.peekLast() + 1 == list.peekLast()) {
				ans.addLast(list.removeLast());
				continue;
			}
			break;
		}
		if (ans.size() != n) {
			return false;
		}
		for (int i = 1; i <= n; i++) {
			if (ans.removeFirst() != i) {
				return false;
			}
		}
		return true;
	}
}

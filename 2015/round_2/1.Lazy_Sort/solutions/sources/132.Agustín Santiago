#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <sys/resource.h>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

typedef long long tint;
typedef pair<int,int> pint;

void set_stack()
{
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result != 0)
    {
        cerr << "getrlimit returned result = " << result << endl;
        exit(1);
    }
    const rlim_t kStackSize = 1024 * 1024 * 1024;   // min stack size = 1GiB

    if (rl.rlim_cur < kStackSize)
    {
        rl.rlim_cur = kStackSize;
        result = setrlimit(RLIMIT_STACK, &rl);
        if (result != 0)
        {
            cerr << "setrlimit returned result = " << result << endl;
            exit(1);
        }
    }
}

const char* answer[2] = {"no", "yes"};

bool test(const vector<int> &v, int a,int b, int bottom, int top)
{
    while (a < b)
    {
        if (v[a] == bottom - 1)
        {
            bottom = v[a];
            a++;
        }
        else if (v[a] == top + 1)
        {
            top = v[a];
            a++;
        }
        else if (v[b-1] == bottom -1)
        {
            bottom = v[b-1];
            b--;
        }
        else if (v[b-1] == top + 1)
        {
            top = v[b-1];
            b--;
        }
        else
            return false;
    }
    return true;
}

int main()
{   
    set_stack();
    
    int TT; cin >> TT;
    forn(tt,TT)
    {
        int n; cin >> n;
        vector<int> v(n);
        forn(i,n) cin >> v[i];
        cout << "Case #" << tt+1 << ": " << answer[( test(v,1, n, v[0], v[0]) || test(v,0, n-1, v[n-1], v[n-1]) )] << endl;
    }
    return 0;
}


import java.awt.Label;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;

public class R2_FIRST {
	
	static Reader sc = new Reader();
	static PrintWriter out = new PrintWriter(System.out);
	
	public static void main(String[] args) throws IOException {
		int t = sc.nextInt();
		
		for (int cas = 1; cas <= t; cas++) {
			int n = sc.nextInt();
			ArrayDeque<Integer> list = new ArrayDeque<>();
			
			for (int i = 0; i < n; i++) {
				list.addLast(sc.nextInt());
			}
			
			boolean solved = false;
			
			ArrayDeque<Integer> actlist = new ArrayDeque<>(list);
			
			int min = actlist.removeFirst();
			int max = min;
			
			while(!actlist.isEmpty()) {
				if(actlist.getFirst() == min - 1) {
					min = actlist.removeFirst();
				} else if(actlist.getFirst() == max + 1) {
					max = actlist.removeFirst();
				} else if(actlist.getLast() == max + 1) {
					max = actlist.removeLast();
				} else if(actlist.getLast() == min - 1) {
					min = actlist.removeLast();
				} else {
					break;
				}
			}
			
			if(actlist.isEmpty())
				solved = true;
			
			actlist = new ArrayDeque<>(list);
			
			min = actlist.removeLast();
			max = min;
			
			while(!actlist.isEmpty()) {
				if(actlist.getFirst() == min - 1) {
					min = actlist.removeFirst();
				} else if(actlist.getFirst() == max + 1) {
					max = actlist.removeFirst();
				} else if(actlist.getLast() == max + 1) {
					max = actlist.removeLast();
				} else if(actlist.getLast() == min - 1) {
					min = actlist.removeLast();
				} else {
					break;
				}
			}
			
			if(actlist.isEmpty())
				solved = true;
			
			if(solved)
				out.printf("Case #%d: yes\n", cas);
			else
				out.printf("Case #%d: no\n", cas);
			
		}
		
		out.close();
	}
	
	static class Reader {
		final private int BUFFER_SIZE = 1 << 12;private byte[] buffer;private int bufferPointer, bytesRead;
		public Reader(){buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
		}private void fillBuffer() throws IOException{bytesRead=System.in.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;
		}private byte read() throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];
		}public String next() throws IOException{StringBuilder sb = new StringBuilder();byte c;while((c=read())<=' '){if(c==-1) return null;};do{sb.append((char)c);}while((c=read())>' ');if (sb.length()==0) return null;return sb.toString();
		}public String nextLine() throws IOException{StringBuilder sb = new StringBuilder();byte c;boolean read = false;while((c=read())!=-1){if(c=='\n') {read = true;break;}if(c>=' ')sb.append((char)c);}if (!read) return null;return sb.toString();
		}public int nextInt() throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public long nextLong() throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10L+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public double nextDouble() throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;
		}public int[] na(int n) throws IOException{int[] a = new int[n];for(int i = 0;i < n;i++)a[i] = nextInt();return a;
		}public char[][] ncha(int n) throws IOException{char[][] a = new char[n][];for(int i = 0;i < n;i++)a[i] = next().toCharArray();return a;
		}public int[][] nm(int n, int m) throws IOException{int[][] map = new int[n][m];for(int i = 0;i < n;i++)map[i] = na(m);return map;
		}public void close() throws IOException{if(System.in==null) return;System.in.close();}
	}
	
	static void print(int[] A) {for(int i=0;i<A.length;i++){if(i!=0) out.print(' ');out.print(A[i]);}out.println();}
	static <T> void print(Iterable<T> A) {int i = 0;for(T act : A){if(i!=0)out.print(' ');out.print(act);i++;}out.println();}
	static void printPlus1(Iterable<Number> A) {int i = 0;for(Number act : A){if(i!=0)out.print(' ');out.print(act.longValue() + 1L);i++;}out.println();}
	static void debug(Object... o) { System.err.println(Arrays.deepToString(o)); }
	
	/*
	long s = System.currentTimeMillis();
	debug(System.currentTimeMillis()-s+"ms");
	 */
}

#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxn = 100500;
int arr[maxn];
bool go(int n) {
    int lv = arr[0] - 1;
    int rv = arr[0] + 1;
    int lid = 1, rid = n-1;
    while (true) {
        auto checkf = [&](int& id) -> bool {
            if (id == 0 || id == n) return false;
            bool res = false;
            if (arr[id] == lv) {
                --lv;
                res = true;
            }
            if (arr[id] == rv) {
                ++rv;
                res = true;
            }
            return res;
        };
        if (checkf(lid)) {
            ++lid;
        } else if (checkf(rid)) {
            --rid;
        } else {
            break;
        }
        //E(lid); Eo(rid);
    }
    //E(n); E(lv); Eo(rv);
    return lv == 0 && rv == n + 1;
}

int main() {
    ios_base::sync_with_stdio(false);
    int tests; cin >> tests;
    for (int test = 1; test <= tests; ++test) {
        Eo(test);
        int n; cin >> n;
        for (int i = 0; i < n; ++i) cin >> arr[i];
        bool ok = false;
        if (go(n))
            ok = true; 
        else {
            reverse(arr, arr + n);
            ok = go(n);
        }
        cout << "Case #" << test << ": " << (ok ? "yes" : "no") << endl;
    }

    return 0;
}

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.math.BigInteger;
import java.io.PrintStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Vadim Semenov
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "lazy.*sort.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lazysort.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LazySort {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int length = in.nextInt();
        int[] array = new int[length];
        for (int i = 0; i < length; ++i) {
            array[i] = in.nextInt();
        }
        print(out, testNumber, (check(array) || check(reverse(array))) ? "yes" : "no");
    }

    private int[] reverse(int[] array) {
        int[] result = new int[array.length];
        for (int i = 0; i < array.length; ++i) {
            result[result.length - 1 - i] = array[i];
        }
        return result;
    }

    private boolean check(int[] array) {
        if (array.length < 3) return true;
        int left = array[0] - 1;
        int right = array[0] + 1;
        int head = 1;
        int tail = array.length - 1;
        while (head != tail) {
            if (array[head] == left) {
                head++;
                left--;
            } else if (array[head] == right) {
                head++;
                right++;
            } else if (array[tail] == left) {
                tail--;
                left--;
            } else if (array[tail] == right) {
                tail--;
                right++;
            } else {
                return false;
            }
        }
        return true;
    }

    private void print(PrintWriter out, int testNumber, String answer) {
        System.err.println("Case #" + testNumber + ": " + answer);
               out.println("Case #" + testNumber + ": " + answer);
    }
}

class InputReader {
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream in) {
        reader = new BufferedReader(new InputStreamReader(in));
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(readLine());
        }
        return tokenizer.nextToken();
    }

    public String readLine() {
        String line;
        try {
            line = reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return line;
    }
}


using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

namespace LazySort
{
	class Program
	{
		static void Main(string[] args)
		{
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")) { NewLine = "\n" })
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var n = reader.Next<int>();
					var perm = reader.Next<int>(n);

					var res = Solve(perm);

					writer.WriteLine("Case #{0}: {1}", i, res ? "yes" : "no");
					Console.WriteLine("Case #{0}: {1}", i, res ? "yes" : "no");
				}
			}
		}

		private static bool Solve(int[] perm)
		{
			return Sort(perm, perm.Length - 1, 1, perm[0], perm[0]) ||
			       Sort(perm, perm.Length - 2, 0, perm[perm.Length - 1], perm[perm.Length - 1]);
		}

		private static bool Sort(int[] perm, int hIdx, int lIdx, int hv, int lv)
		{
			while (lIdx <= hIdx)
			{
				if (perm[lIdx] == hv + 1)
				{
					hv++;
					lIdx++;
				}
				else if (perm[lIdx] == lv - 1)
				{
					lv--;
					lIdx++;
				}
				else if (perm[hIdx] == hv + 1)
				{
					hv++;
					hIdx--;
				}
				else if (perm[hIdx] == lv - 1)
				{
					lv--;
					hIdx--;
				}
				else return false;
			}
			return true;
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}

}

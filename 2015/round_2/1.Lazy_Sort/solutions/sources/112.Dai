package fhc2015.round2;

import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;

/**
 * Created by dhamada on 15/01/18.
 */
public class Lazy {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int T = in.nextInt();
        for (int testCase = 1 ; testCase <= T ; testCase++) {
            int n = in.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();
            }
            out.println(String.format("Case #%d: %s", testCase, solve(a) ? "yes" : "no"));
        }
        out.flush();
    }

    private static boolean solve(int[] a) {
        if (a.length == 1) {
            return true;
        }
        Deque<Integer> d1 = new ArrayDeque<>();
        d1.add(a[0]);

        Deque<Integer> d2 = new ArrayDeque<>();
        d2.add(a[a.length-1]);

        return solve(d1, a, 1, a.length-1) || solve(d2, a, 0, a.length-2);
    }

    private static boolean solve(Deque<Integer> d, int[] a, int fi, int ti) {
        while (fi <= ti) {
            int head = a[fi];
            int tail = a[ti];

            int top = d.getFirst();
            int bottom = d.getLast();
            if (head+1 == top) {
                fi++;
                d.addFirst(head);
            } else if (tail+1 == top) {
                ti--;
                d.addFirst(tail);
            } else if (bottom+1 == head) {
                fi++;
                d.addLast(head);
            } else if (bottom+1 == tail) {
                ti--;
                d.addLast(tail);
            } else {
                return false;
            }
        }
        return true;
    }
}


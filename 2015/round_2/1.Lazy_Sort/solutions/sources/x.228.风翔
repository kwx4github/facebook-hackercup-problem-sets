#include <iostream>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <list>
#include <stack>
#include <cmath>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>
using namespace std;

typedef  long long LL;
const int Mod = 1e9 + 7;
inline int FIX(LL a) {return (a % Mod + Mod) % Mod;}
#define MP(x,y) make_pair(x,y)
#define LEN(x) ((int)x.length())
#define take(x,y) (((x)>>(y)) & 1ll)
//#define move(n) (1<<(n))
#define what_is(x) cerr << #x << " is " << x << endl;
#define eb emplace_back
#define pb push_back
#define UNQ(x) (sort(begin(x),end(x)),x.erase(unique(begin(x),end(x)),end(x)))
const int N = 1e5 + 5;


int n,a[N],pos[N];
int main(){
    freopen("lazy_sort.txt","r",stdin);
    freopen("lazy_sort.out","w",stdout);
    int T = 0,cas = 0;
    scanf("%d",&T);
    while(T--){
        scanf("%d",&n);
        for(int i = 1;i <= n;i++) scanf("%d",&a[i]),pos[a[i]] = i;
        int L = 1,R = n;
        int ret_L = -1,ret_R = -1;
        int f = 0;
        for(int i = 1;i <= n;i++) {
            if(ret_L == -1 && ret_R == -1) {
                //push a[L]
                ret_L = ret_R = a[L];
                L++;
            }else{
                if(a[L] == ret_L - 1 || a[L] == ret_R + 1) {
                    if(a[L] == ret_L - 1) {
                        L++;
                        ret_L = ret_L - 1;
                    }else {
                        L++;
                        ret_R = ret_R + 1;
                    }
                }else if(a[R] == ret_L - 1 || a[R] == ret_R + 1) {
                    if(a[R] == ret_L - 1) {
                        R--;
                        ret_L = ret_L - 1;
                    }else{
                        R--;
                        ret_R = ret_R + 1;
                    }
                }else{
                    f = 1;
                    break;
            }
        }
    }
        printf("Case #%d: %s\n",++cas,f == 0 ? "yes" : "no");
    }
    return 0;
}
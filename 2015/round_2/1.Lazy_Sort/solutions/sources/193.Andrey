import java.util.Deque;
import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.util.ArrayDeque;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LazySort {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int n = in.nextInt();
		int[] a = new int[n];
		int[] ra = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = in.nextInt();
			ra[n - 1 - i] = a[i];
		}
		boolean res = check(a) || check(ra);
		out.printf("Case #%d: %s\n", testNumber, res ? "yes" : "no");
	}

	static boolean check(int[] a) {
		Deque<Integer> q = new ArrayDeque<>();
		int top = 0;
		int bottom = a.length - 1;
		q.addLast(a[top++]);
		for (int i = 0; i < a.length - 1; i++) {
			if (a[top] == q.getFirst() - 1) {
				q.addFirst(a[top++]);
			} else if (a[top] == q.getLast() + 1) {
				q.addLast(a[top++]);
			} else if (a[bottom] == q.getFirst() - 1) {
				q.addFirst(a[bottom--]);
			} else if (a[bottom] == q.getLast() + 1) {
				q.addLast(a[bottom--]);
			} else {
				return false;
			}
		}
		return true;
	}
}

class InputReader {
	final InputStream is;
	final byte[] buf = new byte[1024];
	int pos;
	int size;

	public InputReader(InputStream is) {
		this.is = is;
	}

	public int nextInt() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		int sign = 1;
		if (c == '-') {
			sign = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res = res * 10 + c - '0';
			c = read();
		} while (!isWhitespace(c));
		return res * sign;
	}

	public String next() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		StringBuilder sb = new StringBuilder();
		do {
			sb.append((char) c);
			c = read();
		} while (!isWhitespace(c));
		return sb.toString();
	}

	int read() {
		if (size == -1)
			throw new InputMismatchException();
		if (pos >= size) {
			pos = 0;
			try {
				size = is.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (size <= 0)
				return -1;
		}
		return buf[pos++] & 255;
	}

	static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

}


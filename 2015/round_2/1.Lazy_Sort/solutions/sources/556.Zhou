#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <utility>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stack>
#include <tuple>
#include <ctime>
#include <list>
#include <map>
#include <set>

#define REP(i,n) for(int i=0;i<(n);i++)
#define TR(i,x) for(__typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))
#define SIZE(x) (int)(x).size()

#define MP make_pair
#define MT make_tuple
#define PB push_back
#define EB emplace_back

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;

//#define SMALL
#define LARGE

void OpenFile(string problemName) {
    string smallInputFile(problemName), largeInputFile(problemName), outputFile(problemName);
    
    cerr << problemName <<endl;
    smallInputFile += "_example_input.txt";
    largeInputFile += ".txt";
    outputFile += "_output.txt";
    
    
#ifdef SMALL
    cerr << "Small Input..." << endl;
    freopen(smallInputFile.c_str(), "r", stdin);
    freopen(outputFile.c_str(), "w", stdout);
#endif
#ifdef LARGE
    cerr << "Large Input..." << endl;
    freopen(largeInputFile.c_str(), "r", stdin);
    freopen(outputFile.c_str(), "w", stdout);
#endif
}

const int MAXN = 5e4 + 10;

int n, m;
int a[MAXN], b[MAXN], c[MAXN];

bool Gao0() {
    int topN = lower_bound(b, b + m, a[0]) - b, botN = topN;
    int l = 1, r = n - 1;
    while (l <= r) {
//        cerr << l << ", " << r << endl;
        if (a[l] == b[topN] || a[l] == b[botN]) {
            ++l;
            continue;
        }
        if (a[r] == b[topN] || a[r] == b[botN]) {
            --r;
            continue;
        }
        int pl = lower_bound(b, b + m, a[l]) - b;
        if (pl == topN - 1) {
            ++l;
            --topN;
            continue;
        } else if (pl == botN + 1) {
            ++l;
            ++botN;
            continue;
        }
        int pr = lower_bound(b, b + m, a[r]) - b;
        if (pr == topN - 1) {
            --r;
            --topN;
            continue;
        } else if (pr == botN + 1) {
            --r;
            ++botN;
            continue;
        }
        return false;
    }
    return true;
}

bool Gao1() {
    int topN = lower_bound(b, b + m, a[n - 1]) - b, botN = topN;
    int l = 0, r = n - 2;
    while (l <= r) {
//        cerr << l << ", " << r << endl;
        if (a[l] == b[topN] || a[l] == b[botN]) {
            ++l;
            continue;
        }
        if (a[r] == b[topN] || a[r] == b[botN]) {
            --r;
            continue;
        }
        int pl = lower_bound(b, b + m, a[l]) - b;
        if (pl == topN - 1) {
            ++l;
            --topN;
            continue;
        } else if (pl == botN + 1) {
            ++l;
            ++botN;
            continue;
        }
        int pr = lower_bound(b, b + m, a[r]) - b;
        if (pr == topN - 1) {
            --r;
            --topN;
            continue;
        } else if (pr == botN + 1) {
            --r;
            ++botN;
            continue;
        }
        return false;
    }
    return true;
}

void Solve() {
    cin >> n;
    REP(i, n) {
        scanf("%d", a + i);
        b[i] = a[i];
    }
    sort(b, b + n);
    m = unique(b, b + n) - b;
    if (Gao0() || Gao1()) puts("yes");
    else puts("no");
}

int main() {
    int cas;
    OpenFile("lazy_sort");
    cin >> cas;
    for (int T = 1; T <= cas; ++T) {
        printf("Case #%d: ", T);
        Solve();
    }
    return 0;
}


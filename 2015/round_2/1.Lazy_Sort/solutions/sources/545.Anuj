/*
 *
 * @author Mukesh Singh
 *
 */

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
@SuppressWarnings("unchecked")
public class AB
{	
	void solve() throws Exception
	{
		int T = in.nextInt();
		for(int t= 1 ; t <= T  ;t++)
		{
			solveT(t);		
		}
	}
	//solve test cases
	void solveT(int tid) throws Exception 
	{
		int n = in.nextInt();
		int ar[] = new int[n];
		for(int i = 0 ; i < n ; i++)
			ar[i] = in.nextInt();
		LinkedList<Integer> ls1 = new LinkedList<Integer>();
		int left = 1 ;
		int right = n-1 ;
		boolean flag1 = false ;
		boolean flag2 = false ;
		ls1.add(ar[0]);
		for(int i= 1 ; i < n ; i++)
		{
			if(ls1.getFirst()-1==ar[left])
			{
				ls1.addFirst(ar[left]);
				left++ ;
			}
			else if(ls1.getFirst()-1==ar[right])
			{
				ls1.addFirst(ar[right]);
				right-- ;
			}
			else if(ls1.getLast()+1==ar[left])
			{
				ls1.addLast(ar[left]);
				left++ ;
			}
			else if(ls1.getLast()+1==ar[right])
			{
				ls1.addLast(ar[right]);
				right-- ;
			}
			else
			{
				flag1 = true ;
				break ;
			}
		}
		
		LinkedList<Integer> ls2 = new LinkedList<Integer>();
		ls2.add(ar[n-1]);
		left = 0 ;
		right = n-2 ;
		for(int i= 1 ; i < n ; i++)
		{
			if(ls2.getFirst()-1==ar[left])
			{
				ls2.addFirst(ar[left]);
				left++ ;
			}
			else if(ls2.getFirst()-1==ar[right])
			{
				ls2.addFirst(ar[right]);
				right-- ;
			}
			else if(ls2.getLast()+1==ar[left])
			{
				ls2.addLast(ar[left]);
				left++ ;
			}
			else if(ls2.getLast()+1==ar[right])
			{
				ls2.addLast(ar[right]);
				right-- ;
			}
			else
			{
				flag2 = true ;
				break ;
			}
		}
		out.print("Case #"+tid+": ");
		if(flag1 && flag2)
			out.println("no");
		else
			out.println("yes");
	}
	//@ main function
	public static void main(String[] args) throws Exception 
	{
		new AB();
	}
	
	InputReader in;
	PrintStream out ;
	DecimalFormat df ;
	AB() 
	{
		try 
		{
			File defaultInput = new File("file.in");
			if (defaultInput.exists()) 
				in = new InputReader("file.in");
			else 
				in = new InputReader();
			defaultInput = new File("file.out");
			if (defaultInput.exists()) 
				out = new PrintStream(new FileOutputStream("file.out"));
			else
				out = new PrintStream(System.out);
			df = new DecimalFormat("######0.00");
			solve();
			out.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			System.exit(261);
		}
	}
	
	class InputReader {
		BufferedReader reader;
		StringTokenizer tokenizer;
		
		InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		InputReader(String fileName) throws FileNotFoundException {
			reader = new BufferedReader(new FileReader(new File(fileName)));
		}
		
		String readLine() throws IOException {
			return reader.readLine();
		}
		
		String nextToken() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens())
				tokenizer = new StringTokenizer(readLine());
			return tokenizer.nextToken();
		}
		
		boolean hasMoreTokens() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				String s = readLine();
				if (s == null)
					return false;
				tokenizer = new StringTokenizer(s);
			}
			return true;
		}
		
		int nextInt() throws NumberFormatException, IOException {
			return Integer.parseInt(nextToken());
		}
		
		long nextLong() throws NumberFormatException, IOException {
			return Long.parseLong(nextToken());
		}
		
		double nextDouble() throws NumberFormatException, IOException {
			return Double.parseDouble(nextToken());
		}
	}
}

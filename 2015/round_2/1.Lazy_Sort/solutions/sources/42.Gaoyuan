#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
//#include <ctime>
#include <map>
using namespace std;

int n;
int x[50001];
int p1, p2;

bool test1()
{
	p1 = 2, p2 = n;
	int minV = x[1], maxV = x[1];
	while(p1 <= p2)
	{
		if(x[p1] == minV - 1 || x[p1] == maxV + 1)
		{
			if(x[p1] == minV - 1)
				minV --;
			else
				maxV ++;
			p1 ++;
		}
		else if(x[p2] == minV - 1 || x[p2] == maxV + 1)
		{
			if(x[p2] == minV - 1)
				minV --;
			else
				maxV ++;
			p2 ++;
		}
		else
			return false;
	}
	return true;
}

bool test2()
{
	p1 = 1, p2 = n-1;
	int minV = x[n], maxV = x[n];
	while(p1 <= p2)
	{
		if(x[p1] == minV - 1 || x[p1] == maxV + 1)
		{
			if(x[p1] == minV - 1)
				minV --;
			else
				maxV ++;
			p1 ++;
		}
		else if(x[p2] == minV - 1 || x[p2] == maxV + 1)
		{
			if(x[p2] == minV - 1)
				minV --;
			else
				maxV ++;
			p2 ++;
		}
		else
			return false;
	}
	return true;
}

void solve()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
		cin >> x[i];
	if(test1() || test2())
		cout << "yes" << endl;
	else
		cout << "no" << endl;
}

int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

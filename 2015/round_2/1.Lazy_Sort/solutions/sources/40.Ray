#include <bits/stdc++.h>

#define INF 1000000010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/

int T;

int N, a[50005];
int cH, cL;


int main() {
    freopen ("a.in", "r", stdin);
    freopen ("a.out", "w", stdout);
    scanf ("%d", &T);
    FO (_z,0,T) {
        printf ("Case #%d: ", _z+1);
        scanf ("%d", &N);
        FO (i,0,N) {
            scanf ("%d", &a[i]);
        }
        if (N == 1 || N == 2) {
            printf ("yes\n");
            continue;
        }
        int cT = N-1;
        int cB = 0;
        //Try moving bot first:
        cB = 1;
        cH = a[0];
        cL = a[0];
        bool isImp = false;
        while (cB <= cT) {
            if (a[cB] == cH+1 || a[cB] == cL-1) {
                cH = max (cH, a[cB]);
                cL = min (cL, a[cB]);
                cB++;
            } else if (a[cT] == cH+1 || a[cT] == cL-1) {
                cH = max (cH, a[cT]);
                cL = min (cL, a[cT]);
                cT--;
            } else {
                isImp = true;
                break;
            }
        }
        if (!isImp) {
            printf ("yes\n");
            continue;
        }
        cT = N-2;
        cB = 0;
        cH = cL = a[N-1];
        isImp = false;
        while (cB <= cT) {
            if (a[cB] == cH+1 || a[cB] == cL-1) {
                cH = max (cH, a[cB]);
                cL = min (cL, a[cB]);
                cB++;
            } else if (a[cT] == cH+1 || a[cT] == cL-1) {
                cH = max (cH, a[cT]);
                cL = min (cL, a[cT]);
                cT--;
            } else {
                isImp = true;
                break;
            }
        }
        if (!isImp) {
            printf ("yes\n");
        } else {
            printf ("no\n");
        }
    }
    return 0;
}


















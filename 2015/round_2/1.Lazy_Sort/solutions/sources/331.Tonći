using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

public class Program
{
    public static void Main(string[] args)
    {
        var inputFileName = "lazy_sort";

        using (var reader = new StreamReader(inputFileName + ".txt"))
        using (var writer = new StreamWriter(inputFileName + "_OUTPUT.txt"))
        {
            var T = int.Parse(reader.ReadLine());

            Console.WriteLine("Number of cases: {0}", T);

            for (int caseNumber = 1; caseNumber <= T; caseNumber++)
            {
                var N = int.Parse(reader.ReadLine());

                var nums = reader.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();
                
                var solver = new Solver(N, nums);
                var solution = solver.Solve();

                Console.WriteLine("Case #{0}: {1}", caseNumber, solution);
                writer.WriteLine("Case #{0}: {1}", caseNumber, solution);
            }
        }

        Console.WriteLine("Finished!");
        Console.ReadLine();
    }
}

public class Solver
{
    private readonly int N;
    private readonly int[] nums;
    
    public Solver(int N, int[] nums)
    {
        this.N = N;
        this.nums = nums;
    }

    public string Solve()
    {
        if (CanBeSolved(1, N - 1, nums[0], nums[0]))
            return "yes";

        if (CanBeSolved(0, N - 2, nums[N - 1], nums[N - 1]))
            return "yes";

        return "no";
    }

    private bool CanBeSolved(int leftLow, int leftHigh, int rightLow, int rightHigh)
    {
        while(leftLow < leftHigh)
        {
            if (nums[leftLow] == rightLow - 1)
            {
                rightLow--;
                leftLow++;
            }
            else if (nums[leftHigh] == rightHigh + 1)
            {
                rightHigh++;
                leftHigh--;
            }
            else if(nums[leftLow] == rightHigh + 1)
            {
                rightHigh++;
                leftLow++;
            }
            else if (nums[leftHigh] == rightLow - 1)
            {
                rightLow--;
                leftHigh--;
            }
            else
                return false;
        }

        return true;
    }
}

#include <bits/stdc++.h>
using namespace std;
#define ll long long
// Useful constants
#define INF (int)2e9
#define INFL (long long)1e18
#define EPS 1e-9
// Useful hdatadwdatae instructions
#define bitcount __builtin_popcount
#define gcd __gcd
// Useful container manipulation / traversal macros
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb push_back
#define fill(a,v) memset(a, v, sizeof a)// fill originally
#define mp make_pair

// Input macros
#define s(n) scanf("%d",&n)
#define sc(n) scanf("%c",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)

#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define tr(container, it) for(aut(it,container.begin()); it != container.end(); it++)


#define llu long long unsigned
#define ld long


#define DEBUG 1
#define debug(x) {if (DEBUG)cout <<#x <<" = " <<x <<endl; }
#define debugv(x) {if (DEBUG) {cerr <<#x <<" = "; tr((x),it) cerr <<*it <<", "; cerr <<endl; }}
#define mod 1000000007

#define checkbit(n,b) ( (n >> b) & 1)
#define setbit(n,b) (n | ((1 << b)))
#define unsetbit(n,b) (n & (~(1 << b)))
typedef pair<int, int> pii;


int n;

int data[100009];
int start, end, flag, first, last;

int solve()
{

	flag=0;
	start = 0; end = n-1;

	first = data[0]; last = data[0];
	start++;

	while(start<=end)
	{
		if(first-data[start]==1)
		{
			first = data[start];
			start++;
		}
		else if(data[start]-last==1)
		{
			last = data[start];
			start++;
		}
		else if(first-data[end]==1)
		{
			first = data[end];
			end--;
		}
		else if(data[end]-last ==1)
		{
			last = data[end];
			end--;
		}
		else break;
	}

	if(start>end)
		flag = 1;

	start = 0; end = n-1;

	first = data[n-1]; last = data[n-1];
	end--;

	while(start<=end)
	{
		if(first-data[start]==1)
		{
			first = data[start];
			start++;
		}
		else if(data[start]-last==1)
		{
			last = data[start];
			start++;
		}
		else if(first-data[end]==1)
		{
			first = data[end];
			end--;
		}
		else if(data[end]-last ==1)
		{
			last = data[end];
			end--;
		}
		else break;
	}

	if(start>end)
		flag = 1;


	return flag;
}

int main()
{
	int t;
	s(t);



	for(int itr=1;itr<=t;itr++)
	{
		printf("Case #%d: ",itr);

		s(n);

		for(int i=0;i<n;i++)
		{
			s(data[i]);
		}
		if(solve()==1) cout<<"yes\n";
		else cout<<"no\n";

	}
}

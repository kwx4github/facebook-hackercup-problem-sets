#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;

int main(){

    freopen("lazy_sort.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int kase;
    scanf("%d",&kase);

    for (int kk=1;kase--;++kk){

        printf("Case #%d: ",kk);

        int n;
        scanf("%d",&n);

        deque<int> vec(n);
        for (int i=0;i<n;++i){
            scanf("%d",&vec[i]);
        }

        deque<int> save = vec;
        deque<int> sorted = vec;

        sort( sorted.begin(),sorted.end() );

        deque<int> q;

        q.push_back( vec.front() );
        vec.pop_front();
        while ( q.size() != n ){

            int cnt = 0;
            if ( vec.back() == q.back() +1 ){
                q.push_back( vec.back() );
                vec.pop_back();
                cnt++;
            }

            if ( vec.back() == q.front() -1 ){
                q.push_front( vec.back() );
                vec.pop_back();
                cnt++;
            }


            if ( vec.front() == q.front() - 1 ){
                q.push_front( vec.front() );
                vec.pop_front();
                cnt++;
            }
            if ( vec.front() == q.back() + 1 ){
                q.push_back( vec.front() );
                vec.pop_front();
                cnt++;
            }
            if ( cnt == 0 )break;
        }


        if ( q == sorted ){
            printf("yes\n");
            continue;
        }

        q.clear();

        vec=save;

        q.push_back( vec.back() );
        vec.pop_back();

        while ( q.size() != n ){
            int cnt = 0;
            if ( vec.back() == q.back() +1 ){
                q.push_back( vec.back() );
                vec.pop_back();
                cnt++;
            }

            if ( vec.back() == q.front() -1 ){
                q.push_front( vec.back() );
                vec.pop_back();
                cnt++;
            }


            if ( vec.front() == q.front() - 1 ){
                q.push_front( vec.front() );
                vec.pop_front();
                cnt++;
            }
            if ( vec.front() == q.back() + 1 ){
                q.push_back( vec.front() );
                vec.pop_front();
                cnt++;
            }
            if ( cnt == 0 )break;
        }

        if ( q == sorted ){
            printf("yes\n");
            continue;
        }

        printf("no\n");
    }


    return 0;
}

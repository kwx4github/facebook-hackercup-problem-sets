#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
#define REP(i, n) for(int i=0;i<int(n);i++)
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP(X,Y) make_pair(X,Y)


int main() {
    int i,j , k;
    int casos;  cin >> casos;
    for (int h = 0; h < casos ; ++h) {
        int N; cin >> N;
        vector<int> vec;
        for (i = 0; i < N; ++i) {
            cin >> k; vec.PB(k);
        }
        // take the one above.
        int left = 0, right = N-1;
        int MAX, MIN;
        MAX = MIN = vec[right]; right --;
        bool res = false;
        bool bad = false;
        while (left < right) {
            if (vec[right] == MAX + 1) {
               right--; MAX++; 
            } else if (vec[left] == MAX+1) {
               left++; MAX++;
            } else if (vec[right] == MIN-1) {
                right--; MIN--;
            } else if (vec[left] == MIN-1) {
                left++; MIN--;
            } else { bad = true; break; }
        }
        if (!bad) res = true;
        // take the other one...
        left = 0, right = N-1;
        MAX = MIN = vec[left]; left++;
        bad = false;
        while (left < right) {
            if (vec[right] == MAX + 1) {
               right--; MAX++; 
            } else if (vec[left] == MAX+1) {
               left++; MAX++;
            } else if (vec[right] == MIN-1) {
                right--; MIN--;
            } else if (vec[left] == MIN-1) {
                left++; MIN--;
            } else { bad = true; break; }
        }
        if (!bad) res = true;
        cout << "Case #" << h+1 << ": " << (res?"yes":"no") << endl;
    }
    return 0;
}

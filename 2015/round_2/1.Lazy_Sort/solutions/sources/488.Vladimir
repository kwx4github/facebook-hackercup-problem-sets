import java.io.File;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

public class A {

    private static final String FILE_IN = A.class.getSimpleName() + ".in";
    private static final String FILE_OUT = A.class.getSimpleName() + ".out";

    private final void solveTest(final int testId, final Scanner in, final PrintWriter out) throws Exception {

        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = in.nextInt();
        }

        boolean ok = solve(a[0], Arrays.copyOfRange(a, 1, a.length));
        ok |= solve(a[a.length - 1], Arrays.copyOfRange(a, 0, a.length - 1));

        out.printf("Case #%d: %s%n", testId, ok ? "yes" : "no");
    }

    private boolean solve(int start, int[] a) {
        int bottom = start;
        int top = start;

        for (int x = 0, y = a.length - 1; x <= y; ) {
            if (a[x] == bottom - 1) {
                --bottom;
                ++x;
                continue;
            }
            if (a[x] == top + 1) {
                ++top;
                ++x;
                continue;
            }
            if (a[y] == bottom - 1) {
                --bottom;
                --y;
                continue;
            }
            if (a[y] == top + 1) {
                ++top;
                --y;
                continue;
            }
            return false;
        }
        return true;
    }

    private final void preProcess() throws Exception {
    }

    private final void solve(final Scanner in, final PrintWriter out) throws Exception {
        preProcess();
        for (int testId = 1, testCount = in.nextInt(); testId <= testCount; ++testId) {
            solveTest(testId, in, out);
        }
    }

    public static void main(String[] _args) {
        final String[] args = _args;
        Thread th = new Thread(null, new Runnable() {
            @Override
            public void run() {
                runMain(args);
            }
        }, "test", 64 << 20);
        th.setPriority(Thread.MAX_PRIORITY);
        th.start();
        try {
            th.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static final void runMain(String[] args) {
        try {
            final Scanner in = new Scanner(new File(FILE_IN));
            final PrintWriter out = new PrintWriter(new File(FILE_OUT));
            new A().solve(in, out);
            out.close();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

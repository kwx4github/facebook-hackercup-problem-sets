import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Reader in = new Reader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LazySort {
    private boolean f(int[] a, int b, int e, int init) {
        int ib = init, ie = init;
        while (b <= e) {
            if (a[b] == ib - 1) {
                b++; ib--;
                continue;
            }
            if (a[b] == ie + 1) {
                b++; ie++;
                continue;
            }
            if (a[e] == ib - 1) {
                e--; ib--;
                continue;
            }
            if (a[e] == ie + 1) {
                e--; ie++;
                continue;
            }
            break;
        }
        return b > e;
    }
    public void solve(int testNumber, Reader in, PrintWriter out) {
        int n = in.nextInt();
        int[] a = in.nextIntArray(n);
        out.printf("Case #%d: %s\n", testNumber, (f(a, 0, n - 2, a[n - 1]) || f(a, 1, n - 1, a[0]))? "yes" : "no");
    }
}

class Reader {
    private BufferedReader in;
    private StringTokenizer st;
    public Reader(InputStream is) {
        in = new BufferedReader(new InputStreamReader(is));
    }
    public String next() {
        try {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(in.readLine());
            }
            return st.nextToken();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    public int nextInt() {
        return Integer.parseInt(next());
    }

    public int[] nextIntArray(int n, int offset) {
        int[] res = new int[n + offset];
        for (int i = 0; i < n; i++) res[i + offset] = nextInt();
        return res;
    }
    public int[] nextIntArray(int n) {
        return nextIntArray(n, 0);
    }
}


#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MAXN = 50050;

int n, p[ MAXN ];

bool check( int l, int r, int value ) {
    int lvalue = value, rvalue = value;
    while ( l <= r ) {
        if ( p[l] == lvalue - 1 ) {
            ++l;
            --lvalue;
            continue;
        }
        if ( p[l] == rvalue + 1 ) {
            ++l;
            ++rvalue;
            continue;
        }
        if ( p[r] == lvalue - 1 ) {
            --r;
            --lvalue;
            continue;
        }
        if ( p[r] == rvalue + 1 ) {
            --r;
            ++rvalue;
            continue;
        }
        return false;
    }
    return true;
}

void solve( int test_case ) {
    scanf("%d", &n);
    for ( int i = 1; i <= n; i++ ) scanf("%d", &p[i]);
    bool is_possible = check( 1, n - 1, p[n] ) || check( 2, n, p[1] );
    printf("Case #%d: ", test_case);
    if ( is_possible )
        printf("yes\n");
    else
        printf("no\n");
}

int main() {
    time_t start = clock();
    int t; scanf("%d", &t);
    for ( int i = 1; i <= t; i++ ) solve( i );
    fprintf( stderr, "Time: %lf\n", 1.0 * ( clock() - start ) / CLOCKS_PER_SEC );
    return 0;
}

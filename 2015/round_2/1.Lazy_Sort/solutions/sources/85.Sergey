package com.facebook.hackercup2015.round2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class LazySort {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    LazySort() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    boolean possible(int[] pile, int lo, int hi) {
        int begin = 0, end = pile.length - 1;
        if(pile[begin] == lo) begin++;
        if(pile[end] == lo) end--;
        for(int i = 1; i < pile.length; i++) {
            if(pile[begin] == lo - 1) {
                lo--;
                begin++;
                continue;
            }
            if(pile[begin] == hi + 1) {
                hi++;
                begin++;
                continue;
            }
            if(pile[end] == lo - 1) {
                lo--;
                end--;
                continue;
            }
            if(pile[end] == hi + 1) {
                hi++;
                end--;
                continue;
            }
            return false;
        }
        return true;
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        int n = nextInt();
        int[] a = new int[n];
        for(int i = 0; i < n; i++) {
            a[i] = nextInt();
        }
        if(n <= 2) {
            writer.println("yes");
            return;
        }
        if(possible(a, a[0], a[0]) || possible(a, a[a.length - 1], a[a.length - 1])) {
            writer.println("yes");
        } else {
            writer.println("no");
        }
    }

    public static void main(String[] args) throws IOException {
        new LazySort().solve();
    }
}

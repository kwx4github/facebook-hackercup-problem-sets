package main

import (
  "os"
  "bufio"
  "strconv"
  "fmt"
)

var scanner *bufio.Scanner

func getI() int64 {
  scanner.Scan()
  x, _ := strconv.ParseInt(scanner.Text(), 10, 64)
  return x
}
func getF() float64 {
  scanner.Scan()
  x, _ := strconv.ParseFloat(scanner.Text(), 64)
  return x
}
func getS() string {
  scanner.Scan()
  return scanner.Text()
}

var n int
var input []int

func lazySort(start int) bool {
  outL, outR := input[start], input[start]
  inL, inR := 0, n-1
  if start == 0 {
    inL = 1
  } else {
    inR = n-2
  }
  for inL <= inR {
    a, b := input[inL], input[inR]
    if a == outL-1 {
      outL = a
      inL++
    } else if b == outL-1 {
      outL = b
      inR--
    } else if a == outR+1 {
      outR = a
      inL++
    } else if b == outR+1 {
      outR = b
      inR--
    } else {
      return false
    }
  }
  return true
}

func main() {
  scanner = bufio.NewScanner(os.Stdin)
  scanner.Split(bufio.ScanWords)
  writer := bufio.NewWriter(os.Stdout)
  defer writer.Flush()

  numCases := int(getI())
  for caseIndex := 1; caseIndex <= numCases; caseIndex++ {
    n = int(getI())
    input = make([]int, n)
    for i := 0; i < n; i++ {
      input[i] = int(getI())
    }
    result := "no"
    if lazySort(0) || lazySort(n-1) {
      result = "yes"
    }
    writer.WriteString(fmt.Sprintf("Case #%d: %s\n", caseIndex, result))
  }
}

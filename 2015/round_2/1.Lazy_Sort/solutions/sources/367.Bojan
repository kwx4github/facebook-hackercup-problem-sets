import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.StreamTokenizer;
import java.util.Arrays;
import java.util.LinkedList;

public class LazySort {

	public static void main(String[] args) throws Exception {
		LazySort object = new LazySort();
		String className = object.getClass().getSimpleName();

		FileReader fileReader = new FileReader(new File(className.toLowerCase()
				+ ".in"));
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(fileReader));

		FileWriter wr = new FileWriter(className.toLowerCase() + ".out");

		st.nextToken();
		int testCases = (int) st.nval;

		for (int tc = 1; tc <= testCases; tc++) {

			st.nextToken();
			int N = (int) st.nval;

			int array[] = new int[N];

			for (int i = 0; i < N; i++) {
				st.nextToken();
				array[i] = (int) st.nval;
			}

			String result = object.solve(array);
			wr.write("Case #" + tc + ": " + result + "\r\n");
		}

		wr.close();
	}

	String solve(int[] array) {

		boolean res1 = solve(array,
				new LinkedList<Integer>(Arrays.asList(array[0])), 1,
				array.length - 1);
		boolean res2 = solve(
				array,
				new LinkedList<Integer>(Arrays.asList(array[array.length - 1])),
				0, array.length - 2);

		if ((res1 == true) || (res2 == true))
			return "yes";

		return "no";

	}

	private boolean solve(int[] array, LinkedList<Integer> list, int left,
			int right) {

		while (left <= right) {

			int bottom = array[left];
			int top = array[right];

			// can we add it to the start?
			if (bottom + 1 == list.getFirst()) {
				// add this to the start of the list
				list.addFirst(bottom);
				left++;
				continue;
			}

			if (list.getLast() + 1 == bottom) {
				// add this to the start of the list
				list.addLast(bottom);
				left++;
				continue;
			}

			if (top + 1 == list.getFirst()) {
				// add this to the start of the list
				list.addFirst(top);
				right--;
				continue;
			}

			if (list.getLast() + 1 == top) {
				// add this to the start of the list
				list.addLast(top);
				right--;
				continue;
			}

			// no solution
			return false;
		}

		return true;

	}

}

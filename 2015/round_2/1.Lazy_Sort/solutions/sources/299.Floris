#include <bits/stdc++.h>
#include <cstdio>
using namespace std;


bool can_be_moved(vector<int> &ids, bool left){
	int current_top;
	int current_bottom;
	int left_index = 0;
	int right_index = ids.size()-1;
	if(left){
		current_top = ids.front();
		current_bottom = ids.front();
		left_index = 1;
	}else{
		current_bottom  = ids.back();
		current_top = ids.back();
		right_index--;
	}

	while(left_index <= right_index){
		if(ids[left_index] == current_top - 1){
			current_top = ids[left_index];
			left_index++;
		}else if(ids[left_index] == current_bottom +1){
			current_bottom = ids[left_index];
			left_index++;
		}else if(ids[right_index] == current_top -1){
			current_top = ids[right_index];
			right_index--;
		}else if(ids[right_index] == current_bottom +1){
			current_bottom = ids[right_index];
			right_index--;
		}else{
			return false;
		}
	}
	return true;
}

int main(){
	std::ios::sync_with_stdio(false);
	int T;
	scanf("%d", &T);
	for(int current_case = 1; current_case <= T; ++current_case){
		int N;
		scanf("%d", &N);
		vector<int> values;
		for(int i = 0; i < N; ++i){
			int t;
			scanf("%d", &t);
			values.push_back(t);
		}
		printf("Case #%d: ", current_case);
		if(can_be_moved(values, true) || can_be_moved(values, false)){
			printf("yes");
		}else{
			printf("no");
		}
		printf("\n");
	}
    return 0;
}

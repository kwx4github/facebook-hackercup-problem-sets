package abishev.fb2015.round2.p1;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class LazySort implements TaskFactory {
    @Override
    public Task create() {
        return new Task() {
            int n;
            int[] a;
            boolean ans;

            @Override
            public void input(Scanner input) {
                n = input.nextInt();
                a = new int[n];
                for (int i = 0; i < n; i++) {
                    a[i] = input.nextInt();
                }
            }

            @Override
            public void run() {
                if (n == 1) {
                    ans = true;
                    return;
                }
                ans = solve(1, n, a[0], a[0] + 1) || solve(0, n - 1, a[n - 1], a[n - 1] + 1);
            }

            // [l,r)
            public boolean solve(int l, int r, int ll, int rr) {
                while (l < r) {
                    if (a[l] == ll - 1) {
                        l++;
                        ll--;
                        continue;
                    }
                    if (a[l] == rr) {
                        l++;
                        rr++;
                        continue;
                    }

                    if (a[r - 1] == ll - 1) {
                        r--;
                        ll--;
                        continue;
                    }
                    if (a[r - 1] == rr) {
                        r--;
                        rr++;
                        continue;
                    }
                    if (l < r) return false;
                }
                return true;
            }

            @Override
            public void output(PrintWriter output) {
                output.println(ans ? "yes" : "no");
            }
        };
    }

    public static void main(String[] args) throws InterruptedException, IOException {
//        Runner.run(new LazySort());
        Runner.run(new LazySort(), "lazy_sort");
    }
}

interface TaskFactory {
    Task create();
}

interface Task {
    void input(Scanner input);

    void run();

    void output(PrintWriter output);
}

class Runner {
    public static void run(TaskFactory taskFactory, InputStream is, OutputStream os) throws InterruptedException {
        Scanner input = new Scanner(is);
        PrintWriter output = new PrintWriter(os);
        int t = input.nextInt();
        input.nextLine();
        List<Task> tasks = Collections.synchronizedList(new ArrayList<Task>());
        for (int tt = 1; tt <= t; tt++) {
            Task task = taskFactory.create();
            task.input(input);
            tasks.add(task);
        }

        final AtomicInteger doneTasks = new AtomicInteger(0);
        final CountDownLatch latch = new CountDownLatch(t);
        ExecutorService executor = Executors.newFixedThreadPool(8);
        for (final Task task : tasks) {
            executor.execute(new Runnable() {
                @Override
                public void run() {
                    task.run();
                    int doneTasksV = doneTasks.incrementAndGet();
                    if (doneTasksV % 5 == 0) {
                        System.out.println("done tasks: " + doneTasksV);
                    }
                    latch.countDown();
                }
            });
        }
        latch.await();
        executor.shutdown();

        int tt = 0;
        for (Task task : tasks) {
            output.print("Case #" + (++tt) + ": ");
            task.output(output);
            output.flush();
        }
    }

    public static void run(TaskFactory taskFactory) throws InterruptedException {
        run(taskFactory, System.in, System.out);
    }

    public static void run(TaskFactory taskFactory, String taskName) throws IOException, InterruptedException {
        FileInputStream is = new FileInputStream(new File(taskName + ".txt"));
        FileOutputStream os = new FileOutputStream(new File(taskName + ".out"));
        run(taskFactory, is, os);
        is.close();
        os.close();
    }
}
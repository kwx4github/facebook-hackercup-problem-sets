import scala.collection._

object A extends App {
  
  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  def solve(test: Int): Unit = {

    val Array(n) = readInts(1)
    val as = readInts(n)

    var res = "yes"
    var top, bottom = as(0)
    var start = 1
    var end = n - 1
    
    while (start <= end) {
      if (as(start) == top - 1) {
        top = as(start)
        start += 1
      } else if (as(start) == bottom + 1) {
        bottom = as(start)
        start += 1
      } else if (as(end) == top - 1) {
        top = as(end)
        end -= 1
      } else if (as(end) == bottom + 1) {
        bottom = as(end)
        end -= 1
      } else {
        start = n
        res = "no"
      }
    }
    
    top = as(n - 1)
    bottom = as(n - 1)
    start = 0
    end = n - 2

    while (start <= end) {
      if (as(start) == top - 1) {
        top = as(start)
        start += 1
      } else if (as(start) == bottom + 1) {
        bottom = as(start)
        start += 1
      } else if (as(end) == top - 1) {
        top = as(end)
        end -= 1
      } else if (as(end) == bottom + 1) {
        bottom = as(end)
        end -= 1
      } else {
        start = n
        res = "no"
      }
    }
    
    println(s"Case #$test: $res")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/A/A.txt")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/A/A.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

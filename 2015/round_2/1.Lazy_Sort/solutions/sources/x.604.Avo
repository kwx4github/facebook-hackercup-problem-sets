using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Program4
{
    static int[] students;

    static bool solve(int top, int bottom, int finalTop, int finalBottom)
    {
        while (top <= bottom)
        {
            if (students[top] == finalTop - 1)
            {
                finalTop--;
                top++;
            }
            else if (students[top] == finalBottom + 1)
            {
                finalBottom++;
                top++;
            }
            else if (students[bottom] == finalTop - 1)
            {
                finalTop--;
                bottom--;
            }
            else if (students[bottom] == finalBottom - 1)
            {
                finalBottom++;
                bottom++;
            }
            else
                return false;
        }
        return true;
    }

    static string solve()
    {
        var n = Input.GetInt();
        students = Input.GetArray(n, Input.GetInt);
        var result = solve(1, n - 1, students[0], students[0]) || solve(0, n - 2, students[n - 1], students[n - 1]);
        return result ? "yes" : "no";
    }

    static void Main(string[] args)
    {
        long t = Input.GetLong();
        for (long i = 1; i <= t; i++)
            Console.WriteLine("Case #" + i + ": " + solve());
    }
}

static class Input
{
    static Input()
    {
        Console.SetIn(File.OpenText("lazy_sort.txt"));

        var streamWriter = new StreamWriter(File.OpenWrite("output.txt"));
        streamWriter.AutoFlush = true; // we leak this and therefore there's no flush at the end
        Console.SetOut(streamWriter);

        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
    }

    public static int GetInt()
    {
        return Int32.Parse(GetString());
    }

    public static long GetLong()
    {
        return Int64.Parse(GetString());
    }

    public static T[] GetArray<T>(long n, Func<T> getToken)
    {
        T[] result = new T[n];
        for (int i = 0; i < n; i++)
            result[i] = getToken();
        return result;
    }
    public static long[] GetLongArray(int n)
    {
        long[] result = new long[n];
        for (int i = 0; i < n; i++)
            result[i] = GetLong();
        return result;
    }

    public static string GetString()
    {
        while (tokens.Count == 0)
        {
            string line = Console.ReadLine();
            line.Split(null).Where(token => token.Length > 0).ToList().ForEach(token => tokens.Enqueue(token));
        }
        return tokens.Dequeue();
    }

    static Queue<string> tokens = new Queue<string>();
}
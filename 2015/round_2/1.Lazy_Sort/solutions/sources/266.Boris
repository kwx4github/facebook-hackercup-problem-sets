#pragma comment(linker, "/STACK:500777216")

#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<string>
#include<sstream>
#include<deque>
#include<math.h>
#include<cstring>
#include <bitset>
#include<algorithm>
#include<stdio.h>
#include<stdlib.h>

#define all(v) v.begin(),v.end()
#define mpair make_pair

using namespace std;
typedef long double ld;
const ld epsilon = 1e-9;
typedef long long ll;

vector<int> numbers;
int minm, maxm;
int begIdx, endIdx;
int n;
bool solve() {
	if (begIdx > endIdx) {
		return true;
	}
	if(numbers[begIdx] == minm - 1) {
		minm--;
		begIdx++;
		return solve();
	}
	if(numbers[begIdx] == maxm + 1) {
		maxm++;
		begIdx++;
		return solve();
	}
	if(numbers[endIdx] == minm - 1) {
		minm--;
		endIdx--;
		return solve();
	}
	if(numbers[endIdx] == maxm + 1) {
		maxm++;
		endIdx--;
		return solve();
	}
	return false;
}
int main()
{
	freopen("hacker.in", "r", stdin);
	freopen("hacker.out", "w", stdout);

	int numtests;
	cin >> numtests;
	for (int o = 0; o < numtests; o++)
	{
		printf("Case #%d: ", o + 1);
		cin >> n;
		numbers.clear();
		numbers.resize(n);
		for (int i = 0; i < n; i++) {
			scanf("%d", &numbers[i]);
		}
		begIdx = 1;
		endIdx = n - 1;
		minm = maxm = numbers[0];
		if (solve()) {
			cout << "yes" << endl;
			continue;
		}
		begIdx = 0;
		endIdx = n - 2;
		minm = maxm = numbers.back();
		if (solve()) {
			cout << "yes" << endl;
			continue;
		}
		cout << "no" << endl;
	}
	return 0;
}
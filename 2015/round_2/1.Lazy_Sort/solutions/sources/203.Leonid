#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <list>
using namespace std;

typedef vector<int> vint;
typedef pair<int, int> pii;

bool canSolve(list<int> v, bool start) {
	int first, last;
	if (start) {
		first = *v.begin();
		last = *v.begin();
		v.pop_front();
	} else {
		first = *v.rbegin();
		last = *v.rbegin();
		v.pop_back();
	}

	while (v.size() > 0) {
		int checkFirst = *v.begin();
		int checkLast = *v.rbegin();
		if (checkFirst + 1 == first) {
			first = checkFirst;
			v.pop_front();
		} else if (checkLast + 1 == first) {
			first = checkLast;
			v.pop_back();
		} else if (checkFirst - 1 == last) {
			last = checkFirst;
			v.pop_front();
		} else if (checkLast - 1 == last) {
			last = checkLast;
			v.pop_back();
		} else {
			return false;
		}
	}

	return true;
}

void solve(int test) {
	int n; scanf("%d ", &n);
	list<int> original;
	for (int i = 0; i < n; i++) {
		int a; scanf("%d ", &a);
		original.push_back(a);
	}

    bool ok = canSolve(original, true) || canSolve(original, false);

	printf("Case #%d: ", test);
	printf("%s\n", ok ? "yes" : "no");
}

int main() {
	freopen("lazy_sort.txt", "rt", stdin);
	freopen("lazy_sort.out", "wt", stdout);	
	int tests; scanf("%d ", &tests);
	for (int i = 0; i < tests; i++) solve(i + 1);
	return 0;
}	
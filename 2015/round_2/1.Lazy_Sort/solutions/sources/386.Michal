using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

class Program
{
    static bool Solve(LinkedList<int> L, LinkedList<int> S)
    {
        while (L.Count > 0)
        {
            int min = S.First.Value;
            int max = S.Last.Value;
            int x1 = L.First.Value;
            int x2 = L.Last.Value;
            if (x1 == min - 1)
            {
                S.AddFirst(x1);
                L.RemoveFirst();
            }
            else if (x2 == min - 1)
            {
                S.AddFirst(x2);
                L.RemoveLast();
            }
            else if (x1 == max + 1)
            {
                S.AddLast(x1);
                L.RemoveFirst();
            }
            else if (x2 == max + 1)
            {
                S.AddLast(x2);
                L.RemoveLast();
            }
            else
            {
                return false;
            }
        }
        return true;
    }

    static void Main(string[] args)
    {
        int T = ReadInt();
        for (int t = 1; t <= T; ++t)
        {
            int N = ReadInt();
            int[] A = ReadInts();

            LinkedList<int> L1 = new LinkedList<int>(A);
            LinkedList<int> S1 = new LinkedList<int>();
            S1.AddFirst(L1.First.Value);
            L1.RemoveFirst();

            LinkedList<int> L2 = new LinkedList<int>(A);
            LinkedList<int> S2 = new LinkedList<int>();
            S2.AddFirst(L2.Last.Value);
            L2.RemoveLast();

            Console.WriteLine("Case #{0}: {1}", t, (Solve(L1,S1) || Solve(L2,S2)) ? "yes" : "no");
        }
    }


    // INPUT READING
    static string ReadLine()
    {
        return Console.ReadLine();
    }

    static string[] ReadWords()
    {
        return ReadLine().Split();
    }

    static string[] ReadWords(char separator)
    {
        return ReadLine().Split(separator);
    }

    static int ReadInt()
    {
        return int.Parse(ReadLine());
    }

    static long ReadLong()
    {
        return long.Parse(ReadLine());
    }

    static double ReadDouble()
    {
        return double.Parse(ReadLine());
    }

    static int[] ReadInts()
    {
        return Array.ConvertAll(ReadWords(), int.Parse);
    }

    static int[] ReadInts(char separator)
    {
        return Array.ConvertAll(ReadWords(separator), int.Parse);
    }

    static long[] ReadLongs()
    {
        return Array.ConvertAll(ReadWords(), long.Parse);
    }

    static long[] ReadLongs(char separator)
    {
        return Array.ConvertAll(ReadWords(separator), long.Parse);
    }

    static double[] ReadDoubles()
    {
        return Array.ConvertAll(ReadWords(), double.Parse);
    }

    static double[] ReadDoubles(char separator)
    {
        return Array.ConvertAll(ReadWords(separator), double.Parse);
    }

    static void WriteList<T>(List<T> col)
    {
        int count = col.Count;
        for (int i = 0; i < count - 1; i++)
            Console.Write(col[i] + " ");
        Console.WriteLine(col[count - 1]);
    }

    static void WriteArray<T>(T[] col)
    {
        int count = col.Length;
        for (int i = 0; i < count - 1; i++)
            Console.Write(col[i] + " ");
        Console.WriteLine(col[count - 1]);
    }
}

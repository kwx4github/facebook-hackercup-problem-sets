import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.StringTokenizer;

public class A2 {
    public static void main(String[] args) {
        new A2().run();
    }

    BufferedReader br;
    StringTokenizer in;
    PrintWriter out;

    public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens())
            in = new StringTokenizer(br.readLine());
        return in.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    public void solve() throws IOException {
        int n = nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nextInt();
        }

        boolean can = false;
        for (int t = 0; t < 2; t++) {
            ArrayDeque<Integer> pile = new ArrayDeque<Integer>();
            ArrayDeque<Integer> deque = new ArrayDeque<Integer>();
            for (int i = 0; i < a.length; i++) {
                pile.add(a[i]);
            }

            deque.add(t == 0 ? pile.pollFirst() : pile.pollLast());
            while (pile.size() > 0) {
                int l = deque.peekFirst();
                int r = deque.peekLast();
                if (pile.peekFirst() == l - 1) {
                    deque.addFirst(pile.pollFirst());
                    continue;
                }
                if (pile.peekLast() == l - 1) {
                    deque.addFirst(pile.pollLast());
                    continue;
                }
                if (pile.peekFirst() == r + 1) {
                    deque.addLast(pile.pollFirst());
                    continue;
                }
                if (pile.peekLast() == r + 1) {
                    deque.addLast(pile.pollLast());
                    continue;
                }
                break;
            }
            if (deque.size() == n) {
                can = true;
            }
        }

        if (can) {
            out.println("yes");
        } else {
            out.println("no");
        }
    }

    public void run() {
        try {
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");

            int t = nextInt();
            for (int i = 0; i < t; i++) {
                System.err.println("Test case " + (i + 1));
                out.print("Case #" + (i + 1) + ": ");
                solve();
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
}
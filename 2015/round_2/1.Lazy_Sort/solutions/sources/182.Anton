import java.util.*;
import java.io.*;

public class A {
	FastScanner in;
	PrintWriter out;

	int n;
	int[] a;
	
	boolean can(int l, int r, int ls, int rs) {
		int count = 1;
		
		while (count < n) {
			if (a[ls] == l - 1) {
				l--;
				ls++;
				count++;
			} else if (a[ls] == r + 1) {
				r++;
				ls++;
				count++;
			} else if (a[rs] == l - 1) {
				l--;
				rs--;
				count++;
			} else if (a[rs] == r + 1) {
				r++;
				rs--;
				count++;
			} else {
				break;
			}
		}
		return count == n;
	}
	
	public void solve() throws IOException {
		n = in.nextInt();
		a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = in.nextInt() - 1;
		}
		if (can(a[0], a[0], 1, n - 1) || can(a[n - 1], a[n - 1], 0, n - 2)) {
			out.println("yes");
		} else {
			out.println("no");
		}
	}

	public void run() {
		try {
			in = new FastScanner(new File("a.in"));
			out = new PrintWriter(new File("a.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new A().run();
	}
}
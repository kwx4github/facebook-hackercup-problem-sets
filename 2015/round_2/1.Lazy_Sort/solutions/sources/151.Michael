#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "lazysort"

#pragma comment(linker, "/STACK:36777216")

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

bool CanDo(const vector<int>& perm) {
  int low = perm[0];
  int high = perm[0];
  int begin = 1;
  int end = perm.size() - 1;
  while (begin <= end) {
    if (perm[begin] == low - 1) {
      low--;
      ++begin;
      continue;
    }
    if (perm[begin] == high + 1) {
      ++high;
      ++begin;
      continue;
    }
    if (perm[end] == low - 1) {
      --low;
      --end;
      continue;
    }
    if (perm[end] == high + 1) {
      ++high;
      --end;
      continue;
    }
    return false;
  }
  return true;
}

int main() {
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
    int n;
    cin >> n;
    vector<int> perm(n);
    for (int i = 0; i < n; ++i) {
      cin >> perm[i];
    }
    bool result = true;
    if (!CanDo(perm)) {
      reverse(perm.begin(), perm.end());
      if (!CanDo(perm)) {
        result = false;
      }
    }
    cout << "Case #" << test_index + 1 << ": ";
    cerr << "Case #" << test_index + 1 << ": ";
    if (result) {
      cout << "yes" << endl;
      cerr << "yes" << endl;
    } else {
      cout << "no" << endl;
      cerr << "no" << endl;
    }
  }
  return 0;
}

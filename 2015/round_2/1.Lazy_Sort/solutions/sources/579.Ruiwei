/*
 * Author:  xioumu
 * Created Time:  2015/1/25 5:11:15
 * File Name: A.cpp
 * solve: A.cpp
 */
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<iostream>
#include<vector>
#include<queue>

using namespace std;
#define sz(v) ((int)(v).size())
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define repf(i, a, b) for (int (i) = (a); (i) <= (b); ++(i))
#define repd(i, a, b) for (int (i) = (a); (i) >= (b); --(i))
#define clr(x) memset(x,0,sizeof(x))
#define clrs( x , y ) memset(x,y,sizeof(x))
#define out(x) printf(#x" %d\n", x)
#define sqr(x) ((x) * (x))
typedef long long lint;

const int maxint = -1u>>1;
const double eps = 1e-8;
const int maxn = 50000 + 10;

int sgn(const double &x) {  return (x > eps) - (x < -eps); }

int f[3][maxn], g[3][maxn];
int n, a[maxn];

bool ok(int x, int y, int v) {
    int l = y - x + 1;
    l %= 2;
    if (f[l][x] == 0) return false;
    if (f[l][x] - 1 == v || g[l][x] + 1 == v)
        return true;
    else 
        return false;
}

void update(int x, int y, int xx, int yy, int v) {
    int l = (y - x + 1) % 2;
    int ll = (yy - xx + 1) % 2;
    f[l][x] = f[ll][xx];
    g[l][x] = g[ll][xx];
    if (f[l][x] - 1 == v)
        f[l][x] = v;
    else if (g[l][x] + 1 == v)
        g[l][x] = v;
    else 
        printf("error\n");
}

int main() {
    freopen("A.out", "w", stdout);
    int T, ca = 1;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &n);
        rep (i, n) {
            scanf("%d", &a[i]);
        }
        clr(f);
        clr(g);
        int h = (n - 1) % 2;
        f[h][0] = g[h][0] = a[n - 1];
        f[h][1] = g[h][1] = a[0];
        repd (i, n - 2, 0) {
            int ii = i % 2;
            clr(f[ii]);
            clr(g[ii]);
            repf (j, 0, n - i + 1) {
                int k = i + j - 1;
                if (j > 0 && ok(j - 1, k, a[j - 1]))
                    update(j, k, j - 1, k, a[j - 1]);
                if (k < n - 1 && ok(j, k + 1, a[k + 1])) 
                    update(j, k, j, k + 1, a[k + 1]);
            } 
        } 
        int ans = 0;
        rep (i, n) {
            if (f[0][i] != 0) 
                ans = 1;
        }
        printf("Case #%d: ", ca++);
        if (ans) {
            printf("yes\n");
        }
        else printf("no\n");
    }
    return 0;
}

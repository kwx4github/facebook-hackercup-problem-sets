#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;


class Solution
{
    static const int MAXN = 50012;
    int N;
    bool Result;
    int Id[ MAXN ];
public:

    void Work()
    {
        Result = Work1() || Work2();
    }

    bool Work1()
	{
        int min = Id[ 0 ], max = Id[ 0 ];
        int i = 1, j = N - 1;

        while( i < j )
        {
            if( Id[ i ] == min - 1 )
            {
                --min;
                ++i;
            }
            else if( Id[ j ] == max + 1 )
            {
                ++max;
                --j;
            }
            else if( Id[ j ] == min - 1 )
            {
                --min;
                --j;
            }
            else if( Id[ i ] == max + 1 )
            {
                ++max;
                ++i;
            }
            else
                return false;
        }

        return true;
    }
	
    bool Work2()
	{
        int min = Id[ N - 1 ], max = Id[ N - 1 ];
        int i = 0, j = N - 2;

        while( i < j )
        {
            if( Id[ i ] == min - 1 )
            {
                --min;
                ++i;
            }
            else if( Id[ j ] == max + 1 )
            {
                ++max;
                --j;
            }
            else
                return false;
        }

        return true;
    }
	
	void Read()
	{
        int i;
        scanf( "%d", &N );
        for( i = 0; i < N; ++i )
        {
            scanf( "%d", &Id[ i ] );
        }
	}

	void Write( int t )
	{
		printf( "Case #%d: %s\n", t, Result ? "yes" : "no" );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
		solution[ i ].Read();
#pragma omp parallel for schedule(dynamic, 1)
	for( i = 0; i < t; ++i )
		solution[ i ].Work();
	for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
	return 0;
}

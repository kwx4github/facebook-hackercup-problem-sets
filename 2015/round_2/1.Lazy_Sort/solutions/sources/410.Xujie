

#include <vector>
#include <set>
#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;


#define PB(x) push_back(x)
typedef vector<int> VI;
typedef long long LL;

const LL Mod = 1000000007LL;
const int N = 200010;

set<int> st;
bool vis[N];
int a[N];
int n;

char yes[]="yes";
char no[]="no";

void expand(set<int>& st, int val)
{
  st.erase(val);
  if( (val - 1 > 0) && (vis[val-1]==false) ) st.insert(val-1);
  if( (val + 1 <= n) && (vis[val+1] == false) ) st.insert(val+1);
}

bool solve(int n, int a[N])
{
  memset(vis,0,sizeof(vis));

  st.clear();
  st.insert(a[0]);

  int L=0, R=n-1;
  while(L<=R){

    //printf("L=%d (%d)  R=%d (%d)\n", L, a[L], R, a[R]);
    //puts("st:");
    //for(auto x : st) printf("%d ", x);
    //puts("");

    if(st.count(a[L]) ){
      vis[ a[L] ] = true;
      expand(st, a[L]);
      ++L;
    }
    else if(st.count(a[R])){
      vis[ a[R] ] = true;
      expand(st, a[R]);
      --R;
    }
    else return false;
  }

  return true;

}

int main()
{

  int T;
  scanf("%d",&T);
  int cs = 0;
  while(cs++ < T){
    scanf("%d",&n);
    for(int i=0;i<n;++i) scanf("%d",a+i);

    char *ans=no;

    if(solve(n,a)) ans = yes;
    else{
      for(int i=0;i+i<n;++i) swap(a[i], a[n-1-i]);
      if(solve(n,a)) ans = yes;
    }

    printf("Case #%d: %s\n",cs,ans);
  }


  return 0;
}

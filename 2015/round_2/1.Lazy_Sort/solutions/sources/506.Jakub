import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LazySort {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int N = in.nextInt();
        int orig[] = new int[N];
        for (int i = 0; i < N; i++) {
            orig[i] = in.nextInt();
        }

        if (from(orig, false) || from(orig, true)) {
            out.println("Case #" + testNumber + ": yes");
        } else {
            out.println("Case #" + testNumber + ": no");
        }
    }

    private boolean from(int[] orig, boolean top) {
        int up, upi;
        int down, downi;
        int N = orig.length;
        if (top) {
            up = down = orig[0];
            upi = 1;
            downi = N - 1;
        } else {
            up = down = orig[N - 1];
            upi = 0;
            downi = N - 2;
        }

        while (upi < downi) {
            if (Math.abs(orig[upi] - up) == 1) {
                up = orig[upi];
                upi++;
            } else if (Math.abs(orig[upi] - down) == 1) {
                down = orig[upi];
                upi++;
            } else if (Math.abs(orig[downi] - up) == 1) {
                up = orig[downi];
                downi--;
            } else if (Math.abs(orig[downi] - down) == 1) {
                down = orig[downi];
                downi--;
            } else {
                return false;
            }
        }

        return true;
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


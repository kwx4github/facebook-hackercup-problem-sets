#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009
#define mod7 1000000007
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1 , cs;
/*********default*********/
#define N 50010
int n , a[ N ];
void build(){
    
}
void init(){
    n = getint();
    for( int i = 1 ; i <= n ; i ++ )
        a[ i ] = getint();
}
deque<int> d;
bool good( int l , int r ){
    if( l > r ) return true;
    while( l <= r ){
        if( a[ l ] == d.front() - 1 )
            d.push_front( a[ l ++ ] );
        else if( a[ l ] == d.back() + 1 )
            d.push_back( a[ l ++ ] );
        else if( a[ r ] == d.front() - 1 )
            d.push_front( a[ r -- ] );
        else if( a[ r ] == d.back() + 1 )
            d.push_back( a[ r -- ] );
        else return false;
    }
    return true;
}
bool can(){
    d.clear();
    d.PB( a[ 1 ] );
    if( good( 2 , n ) ) return true;
    d.clear();
    d.PB( a[ n ] );
    if( good( 1 , n - 1 ) ) return true;
    return false;
}
void solve(){
    printf( "Case #%d: " , ++ cs );
    puts( can() ? "yes" : "no" );
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
#include<deque>
using namespace std;

const int NMAX = 55555;

int lazy[NMAX];
int n;
int main(){
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	lazy[0] = -1;
	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++){
		cout << "Case #" << tc << ": ";
		cin >> n;
		for (int i = 1; i <= n; i++)cin >> lazy[i];

		deque<int> low, high;
		for (int i = 2; i <= n; i++) low.push_back(i);
		for (int i = 1; i < n; i++) high.push_back(i);

		int l = find(lazy + 1, lazy + n + 1, 1) - lazy;
		int r = l;

		while (1){
			if (low.empty()) break;
			int x = low.front();
			int y = low.back();
			if (lazy[l - 1] == x){
				low.pop_front();
				l--;
			}
			else if (lazy[r + 1] == x){
				low.pop_front();
				r++;
			}
			else if (lazy[l - 1] == y){
				low.pop_back();
				l--;
			}
			else if (lazy[r + 1] == y){
				low.pop_back();
				r++;
			}
			else break;
		}

		l = r = (find(lazy + 1, lazy + n + 1, n) - lazy);

		while (1){
			if (high.empty()) break;
			int x = high.front();
			int y = high.back();
			if (lazy[l - 1] == x){
				high.pop_front();
				l--;
			}
			else if (lazy[r + 1] == x){
				high.pop_front();
				r++;
			}
			else if (lazy[l - 1] == y){
				high.pop_back();
				l--;
			}
			else if (lazy[r + 1] == y){
				high.pop_back();
				r++;
			}
			else break;
		}

		if (high.empty() || low.empty()){
			cout << "yes" << endl;
		}
		else cout << "no" << endl;
	}
}
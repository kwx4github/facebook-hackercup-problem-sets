#include <stdio.h>
#include <string.h>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <queue>
#include <cassert>
using namespace std;

/*
 * Author: Veselin Georgiev
 * Problem: "Lazy Sort" (A)
 * Contest: Facebook Hacker Cup 2015
 */

#define FOR(i,n) for (int i = 0; i < n; i++)
#define abs(x) ((x)<0?(-(x)):(x))
#define REP(i,v) for (unsigned i = 0; i < v.size(); i++)
#define RL(i,v) for (unsigned i = 0; i < v.length(); i++)
typedef long long ll;

int unsorted[50050];
int n;

int find(int value)
{
	int k = 0;
	while (unsorted[k] != value) k++;
	return k;
}

bool attempt(int i, int j)
{
	int x, y;
	if (i < 0 || j >= n) return false;
	x = 0;
	y = n - 1;
	
	while (x <= y) {
		if (i >= 0 && unsorted[i] == x) {
			x++;
			i--;
		} else if (i >= 0 && unsorted[i] == y) {
			y--;
			i--;
		} else if (j < n && unsorted[j] == x) {
			x++;
			j++;
		} else if (j < n && unsorted[j] == y) {
			y--;
			j++;
		} else return false;
	}
	return true;
}

bool sortable(void)
{
	if (n == 1) return true;
	if (attempt(find(0), find(0) + 1)) return true;
	if (attempt(find(0) - 1, find(0))) return true;
	if (attempt(find(n-1) - 1, find(n - 1))) return true;
	if (attempt(find(n-1), find(n - 1) + 1)) return true;
	return false;
}

int main(void)
{
// 	freopen("/home/vesko/hackercup/a.in", "rt", stdin);
	int T;
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		scanf("%d", &n);
		FOR(i, n) {
			scanf("%d\n", &unsorted[i]);
			unsorted[i]--;
		}
		printf("Case #%d: %s\n", tc, sortable() ? "yes" : "no");
	}
	
	return 0;
}

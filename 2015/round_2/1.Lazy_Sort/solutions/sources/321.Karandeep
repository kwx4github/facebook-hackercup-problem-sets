import java.io.*;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.InputMismatchException;
import java.util.Locale;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "lazy.*sort.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lazysort.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LazySort
{
    int n;
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        n = in.ni ();
        int a[] = in.iArr (n);
        Deque<Integer> aa = new ArrayDeque<Integer> ();
        Deque<Integer> bb = new ArrayDeque<Integer> ();
        for (int x : a)
        {
            aa.addFirst (x);
            bb.addLast (x);
        }
        out.print("Case #"+testNumber+": ");
        if (ok (aa) || ok(bb))
        {
            out.println ("yes");
            
        }
        else
        {
            out.println ("no");
        }

        
    }

    private boolean ok(Deque<Integer> aa)
    {
        Deque<Integer> deque = new ArrayDeque<Integer> ();
        while (!aa.isEmpty ())
        {
            int x = aa.getFirst ();
            int y = aa.getLast ();
            if (deque.isEmpty ())
            {
                deque.add (x);
                aa.pollFirst ();
                continue;
            }
            int top = deque.getFirst ();
            int last = deque.getLast ();
            if (x == top - 1)
            {
                deque.addFirst (x);
                aa.pollFirst ();
            }
            else if (x == last + 1)
            {
                deque.addLast (x);
                aa.pollFirst ();
            }
            else if (y == top - 1)
            {
                deque.addFirst (y);
                aa.pollLast ();
            }
            else if (y == last + 1)
            {
                deque.addLast (y);
                aa.pollLast ();
            }
            else
            {
                break;
            }
        }
        return deque.size () == n && deque.getFirst () == 1 && deque.getLast () == n;
    }
}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public String ns()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        StringBuilder res = new StringBuilder ();
        do
        {
            res.appendCodePoint (c);
            c = read ();
        } while (!isSpaceChar (c));
        return res.toString ();
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c==' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public int[] iArr(int n)
    {
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
        {
            a[i] = ni ();
        }
        return a;
    }

    public String next()
    {
        return ns ();
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}


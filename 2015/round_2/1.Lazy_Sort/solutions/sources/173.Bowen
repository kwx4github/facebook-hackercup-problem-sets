#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 100005

int N;
int x[MAXN];
bool solve(deque<int> &dq, int b){
	bool ok = 1;
	int low, high;
	low = high = b;
	while (dq.size()){
		bool hit = 0;
		if (dq.front() == low - 1){
			low--;
			dq.pop_front();
			hit = 1;
		}
		else if (dq.front() == high + 1){
			high++;
			dq.pop_front();
			hit = 1;
		}
		else if (dq.back() == low - 1){
			low--;
			dq.pop_back();
			hit = 1;
		}
		else if (dq.back() == high + 1){
			high++;
			dq.pop_back();
			hit = 1;
		}
		if (!hit) {
			ok = 0;
			break;
		}
	}
	return ok;
}
int main(){
	int cs;
	cin >> cs;
	REP(csn, 1, cs + 1){
		printf("Case #%d: ", csn);
		cin >> N;
		REP(i, 0, N){
			scanf("%d", x + i);
		}
		deque<int> dq;
		REP(i, 1, N) dq.push_back(x[i]);
		bool ok = solve(dq, x[0]);
		if (ok){
			puts("yes");
			continue;
		}
		dq.clear();
		REP(i, 0, N - 1) dq.push_back(x[i]);
		ok = solve(dq, x[N - 1]);
		if (ok){
			puts("yes");
			continue;
		}
		puts("no");
	}
	return 0;
}
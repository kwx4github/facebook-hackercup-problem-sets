#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <iomanip>
using namespace std;

#define REP(i,N) for (int i = 0; i < (N); ++i)

typedef unsigned int ui;
typedef long long ll;

typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;

template<class T> void printImpl(const vector<T> & coll) { copy(coll.begin(), coll.end(), ostream_iterator<T>(cout, " ")); cout << endl; }
template<class T, int N> void printImpl(T (&coll)[N]) { copy(coll, coll + N, ostream_iterator<T>(cout, " ")); cout << endl; }
template<class Key, class Value> void printImpl(const map<Key, Value> & data) { typename map<Key, Value>::const_iterator it; for (it = data.begin(); it != data.end(); ++it) { cout << it->first << ":" << it->second << endl; } }
template <class T> void printImpl(const T & data) { cout << data << endl; }

#define DEBUGPRINT
#ifdef DEBUGPRINT
#define print(x) cout << #x" = "; printImpl(x);
#else
#define print(x) ;
#endif

bool possible(const vi & a)
{
    int N = a.size();

    if (N == 1) return true;

    int cMin, cMax;
    int lPos = 0, rPos = N - 1;

    cMin = a[0]; cMax = a[0]; lPos++;

    for (int t = 1; t < N; ++t)
    {
        if (a[lPos] == cMin - 1)
        {
            cMin--;
            lPos++;
        }
        else if (a[lPos] == cMax + 1)
        {
            cMax++;
            lPos++;
        }
        else if (a[rPos] == cMin - 1)
        {
            cMin--;
            rPos--;
        }
        else if (a[rPos] == cMax + 1)
        {
            cMax++;
            rPos--;
        }
        else
        {
            return false;
        }
    }

    return true;
}

int main()
{
    int caseCount;
    cin >> caseCount;

    for (int csIx = 1; csIx <= caseCount; ++csIx)
    {
        cout << "Case #" << csIx << ": ";
        int N;
        cin >> N;
        vi a0(N);
        REP(i,N)
        {
            cin >> a0[i];
        }

        vi a1 = a0;
        vi a2 = a0;
        reverse(a2.begin(), a2.end());

        if (possible(a1) || possible(a2))
        {
            cout << "yes" << endl;
        }
        else
        {
            cout << "no" << endl;
        }
        int cMin, cMax;
        int lPos = 0, rPos = N - 1;

    }

    
    return 0;
}

#include <list>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <functional>
#include <iomanip>
#include <vector>
#include <stack>
#include <map>
#include <set>
#include <memory>
#include <cmath>
#include <string>
#include <cctype>
#include <iomanip>
#include <sstream>
#include <utility>
#include <ctime>
#include <bitset>
#include <iterator>
#include <numeric>
#include <climits>
#include <iterator>
#include <deque>

using namespace std;

#define FILE_READER freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define FAST_READER ios::sync_with_stdio(false); cin.tie(NULL);

void prn(int ans, int test_case) {
	//printf("Case #%d: %I64d\n", test_case, ans);
	cout << "Case #" << test_case << ": " << (ans == 1 ? "yes" : "no") << "\n";
}

//#pragma comment(linker, "/STACK:1000000000") //5 GB = 5 * 10^9

const int maxn = (int)1e6;
vector<int> v(maxn);

deque<int> sorted, initial;

bool offer0(int num) {
	if (num > sorted.back()) {
		if (sorted.back() + 1 == num) {
			sorted.push_back(num);
			return true;
		}
		else {
			return false;
		}
	}
	else {
		if (num + 1 == sorted.front()) {
			sorted.push_front(num);
			return true;
		}
		else {
			return false;
		}
	}
}

bool offer1() {
	int num = initial.front();
	bool can = offer0(num);
	if (can) {
		initial.pop_front();
		return true;
	}
	return false;
}

bool offer2() {
	int num = initial.back();
	bool can = offer0(num);
	if (can) {
		initial.pop_back();
		return true;
	}
	return false;
}

bool offer(vector<int>& v, int n,int fate) {
	initial.clear();
	sorted.clear();
	for (int i = 0; i < n; ++i) {
		initial.push_back(v[i]);
	}
	if (fate == 1) {
		sorted.push_back(initial.front());
		initial.pop_front();
	}
	else {
		sorted.push_back(initial.back());
		initial.pop_back();
	}
	while (!initial.empty()) {
		bool one = offer1();
		if (!one) {
			bool two = offer2();
			if (!two) {
				return false;
			}
		}
	}
	return true;
}

int solve(vector<int>& v, int n) {
	bool a = offer(v, n, 0);
	bool b = offer(v, n, 1);
	if (a || b)
		return 1;
	else
		return 0;
}

int main() {

	FILE_READER
	FAST_READER

	int t;
	cin >> t;

	int test_case = 0;
	while (t-- > 0) {
		int n;
		cin >> n;
		for (int i = 0; i < n; ++i) {
			cin >> v[i];
		}
		int ans = solve(v, n);
		++test_case;
		prn(ans, test_case);
	}
	
	return 0;
}


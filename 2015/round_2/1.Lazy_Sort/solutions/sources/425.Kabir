#include <stdio.h>
#include <math.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
#define S 50005
int Next[S + 5], n, t, txt, v[S + 5], ok[S + 5];
int okay(int u, int d, int cur){
    if(cur < u && Next[cur] == u)return 0;
    if(cur > d && Next[d] == cur)return 1;
    return -1;
}
bool checkIt(int x, int y){ 
    int u = x, d = y;
    if(u > d)swap(u, d);
    //printf("up = %d down = %d\n", u, d);
    int left = 0, right = n - 1;
    while(left <= right){
        if(v[left] == x || v[left] == y){
            left++;
            continue;
        }
        if(v[right] == x || v[right] == y){
            right--;
            continue;
        };
        int ra = okay(u, d, v[left]);
        int rb = okay(u, d, v[right]);
        //printf("processing left %d val %d right %d val %d ra = %d rb = %d\n", left, v[left], right, v[right], ra, rb);
        if(ra == 0) u = v[left], left++;
        else if(ra == 1) d = v[left], left++;

        else if(rb == 0) u = v[right], right --;
        else if(rb == 1) d = v[right], right --;
        else return false;
    }
    return true;
}
int main(){
    freopen("A.in", "r", stdin);
    freopen("A_output", "w", stdout);
    scanf("%d",&t);
    while(t--){
        scanf("%d",&n);
        for(int i = 0; i < n; ++i){
            scanf("%d",&v[i]);
            ok[i] = v[i];
            Next[i] = -1;
        }
        sort(ok, ok + n);
        bool possible = false;
        for(int i = 0; i < n - 1; ++i)Next[ ok[i] ] = ok[i + 1];
        int x, y;
        if(n > 2){
            for(int ii = 1; ii <= 3; ii++){
                if(ii == 1) x = v[0], y = v[1];
                if(ii == 2) x = v[0], y = v[n-1];
                if(ii == 3) x = v[n - 1], y = v[n - 2];
                bool curOk = true;
        
                int u = x, d = y;
                if(u > d)swap(u, d);
                //printf("up = %d down = %d\n", u, d);
                int left = 0, right = n - 1;
                while(left <= right && curOk == true){
                    if(v[left] == x || v[left] == y){
                        left++;
                        continue;
                    }
                    if(v[right] == x || v[right] == y){
                        right--;
                        continue;
                    };
                    int ra = okay(u, d, v[left]);
                    int rb = okay(u, d, v[right]);
                    //printf("processing left %d val %d right %d val %d ra = %d rb = %d\n", left, v[left], right, v[right], ra, rb);
                    if(ra == 0) u = v[left], left++;
                    else if(ra == 1) d = v[left], left++;

                    else if(rb == 0) u = v[right], right --;
                    else if(rb == 1) d = v[right], right --;
                    else curOk = false;
                }
                if(left > right && curOk == true)possible = true;
            }
        }
        else possible = true;
        if(possible)printf("Case #%d: yes\n",++txt);
        else printf("Case #%d: no\n",++txt);
    }
    return 0;
}

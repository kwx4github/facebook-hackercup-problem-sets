import java.io.*;
import java.util.*;

public class ProbA {
	boolean eof;

	public static void main(String[] args) throws IOException {
		new ProbA().run();
	}

	String next() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return "-1";
			}
		}
		return st.nextToken();
	}

	BufferedReader br;
	StringTokenizer st;
	PrintWriter out;

	int nextInt() {
		return Integer.parseInt(next());
	}

	double nextDouble() {
		return Double.parseDouble(next());
	}

	void run() throws IOException {
		String name = "probA";
		InputStream input = System.in;
		OutputStream output = System.out;
		try {
			File f = new File(name + ".in");
			if (f.exists() && f.canRead()) {
				input = new FileInputStream(name + ".in");
				output = new FileOutputStream(name + ".out");
			}
		} catch (Exception e) {
		}

		br = new BufferedReader(new InputStreamReader(input));
		out = new PrintWriter(output);

		solve();

		br.close();
		out.close();
	}

	void solve() {
		int test = nextInt();
		for (int t_id = 0; t_id < test; ++t_id) {
			out.print("Case #" + (t_id + 1) + ": ");
			int n = nextInt();
			int[] a = new int[n];
			for (int i = 0; i < n; i++) {
				a[i] = nextInt();
			}
			if (makeTry(a, 0, n - 2,
					new ArrayDeque<>(Arrays.asList(a[n - 1])))
					|| makeTry(a, 1, n - 1,
							new ArrayDeque<>(Arrays.asList(a[0])))) {
				out.println("yes");
			} else {
				out.println("no");
			}
		}
	}

	boolean makeTry(int[] a, int l, int r, Deque<Integer> q) {
		while (l <= r) {
			if (a[l] + 1 == q.peekFirst()) {
				q.addFirst(a[l++]);
				continue;
			}
			if (q.peekLast() + 1 == a[l]) {
				q.addLast(a[l++]);
				continue;
			}
			if (a[r] + 1 == q.peekFirst()) {
				q.addFirst(a[r--]);
				continue;
			}
			if (q.peekLast() + 1 == a[r]) {
				q.addLast(a[r--]);
				continue;
			}
			break;
		}
		return l > r;
	}

	class Pair {
		int x;
		int y;
		int p;

		Pair(int x, int y, int p) {
			this.x = x;
			this.y = y;
			this.p = p;
		}
	}
}
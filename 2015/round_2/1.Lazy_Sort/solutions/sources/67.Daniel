#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <iostream>
#include <utility>
#include <deque>
using namespace std;

#define TRACE(x...) x
#define WATCH(x) TRACE(cout << #x << " = " << x << endl)
#define PRINT(x...) TRACE(printf(x))

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()

// If using C++11, change __typeof__ to decltype
#define _for(i, a, b) for (decltype(a) i = (a); i != (b); ++i)
#define foreach(x...) _for(x)
#define forall(i, v) foreach(i, all(v))
// If using C++11, change __typeof__ to decltype
#define FU(i, a, b) for(decltype(a) i = (a); i < (b); ++i)
#define fu(i, n) FU(i, 0, n)

#define mset(c, v) memset(c, v, sizeof(c))
#define mod(a, b) ((((a)%(b))+(b))%(b))
#define pb push_back
#define sz(c) int((c).size())
const int INF = 0x3F3F3F3F; const int NEGINF = 0xC0C0C0C0;
const int NULO = -1; const double EPS = 1e-8;

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;

int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

bool doit(deque<int>& D) {
    int f = D.front(), l = D.front(); D.pop_front();
    while (!D.empty()) {
        int x = D.front();
        if (x == f - 1) {
            f = x;
            D.pop_front();
            continue;
        }
        if (x == l + 1) {
            l = x;
            D.pop_front();
            continue;
        }
        x = D.back();
        if (x == f - 1) {
            f = x;
            D.pop_back();
            continue;
        }
        if (x == l + 1) {
            l = x;
            D.pop_back();
            continue;
        }
        return false;
    }
    return true;
}


int main() {
    int _42;
    scanf("%d", &_42);
    fu(_41, _42) {
        printf("Case #%d:", _41+1);
        int N;
        scanf("%d", &N);
        deque<int> D;
        fu(i, N) {
            int t;
            scanf("%d", &t);
            D.push_back(t);
        }
        auto D2 = D;
        // Try from bottom
        bool ans = doit(D);
        D.clear();
        while (!D2.empty()) {
            D.push_front(D2.front()); D2.pop_front();
        }
        if (!ans) ans = doit(D);
        if (ans) printf(" yes\n");
        else printf(" no\n");
    }
    return 0;
}

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#include <vector>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <functional>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

template<typename T>inline string to_str(const T& v) {
    ostringstream os; os << v; return os.str();
}
template<typename T>inline T to_obj(const string& v) {
    istringstream is(v); T r; is>>r; return r;
}
template<class T>inline int cMin(T& a, T b) {return b<a ? a=b,1 : 0;}
template<class T>inline int cMax(T& a, T b) {return a<b ? a=b,1 : 0;}

#define CLR(A,v) memset(A, v, sizeof(A))
#define MP(a,b)  make_pair(a, b)
#define F0(i, n) for(int i=0; i<(n); ++i)
#define F1(i, n) for(int i=1; i<=(n); ++i)

const int NN = 50000 + 8;

int A[NN], N;

bool calc() {
    int lo=A[0], hi=A[0];
    int Qs=1, Qe=N-1;
    while(Qs <= Qe) {
        int i = -1;
        if (A[Qs] == lo-1 || A[Qs] == hi+1) {
            i = Qs++;
        } else if (A[Qe] == lo-1 || A[Qe]==hi+1){
            i = Qe--;
        }
        else return false;
        lo = min(lo, A[i]);
        hi = max(hi, A[i]);
    }
    return true;
}

int main(int argc, char *argv[]) {
    int T; scanf("%d", &T);
    F1(iT, T) {
        scanf("%d", &N);
        F0(i, N) scanf("%d", A+i);
        bool tag = calc();
        if (!tag) {
            reverse(A, A+N);
            tag = calc();
        }
        printf("Case #%d: %s\n", iT, tag ? "yes" : "no");
    }
    return 0;
}

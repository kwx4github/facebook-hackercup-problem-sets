import java.util.Scanner;
import java.io.OutputStream;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("lazy_sort.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("taska.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskA solver = new TaskA();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskA {
    public void solve(int testNumber, Scanner in, PrintWriter out) {
        int n = in.nextInt();
        int[] numbers = new int[n];

        for (int i = 0; i < n; i++) {
            numbers[i] = in.nextInt();
        }

        boolean answer = isPossible(numbers[0], 1, n - 1, numbers) || isPossible(numbers[n - 1], 0, n - 2, numbers);
        String str = answer ? "yes" : "no";
        out.println("Case #" + testNumber + ": " + str);
    }

    private boolean isPossible(int initial, int l, int r, int[] numbers) {
        int max = initial;
        int min = initial;

        while (l <= r) {
            if (numbers[l] == min - 1) {
                min = min - 1;
                l++;
            } else if (numbers[r] == min - 1) {
                min = min - 1;
                r--;
            } else if (numbers[l] == max + 1) {
                max = max + 1;
                l++;
            } else if (numbers[r] == max + 1) {
                max = max + 1;
                r--;
            } else {
                return false;
            }
        }

        return true;
    }

}


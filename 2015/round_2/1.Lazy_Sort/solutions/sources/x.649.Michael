import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class LazySort {

    public static void main(String[] args) throws IOException {
        InputStream inputStream = new FileInputStream(new File(
                "c:\\dev\\lazy_sort.txt"));
        InputReader in = new InputReader(inputStream);
        Solver solver = new Solver();
        int t = in.nextInt();
        for (int i = 1; i <= t; i++) {
            System.out.println("Case #" + i + ": " + solver.solve(in));
        }
    }

    private static class Solver {
        int n;
        int nextMin;
        int nextMax;

        public Solver() {

        }

        String solve(InputReader in) {
            LinkedList<Integer> firstList = new LinkedList<Integer>();
            LinkedList<Integer> secondList = new LinkedList<Integer>();
            n = in.nextInt();
            for (int i = 0; i < n; i++) {
                int a = in.nextInt();
                firstList.add(a);
                secondList.add(a);
            }
            int a = firstList.pollFirst();
            nextMin = a - 1;
            nextMax = a + 1;
            if (process(firstList)) {
                return "yes";
            }
            a = secondList.pollLast();
            nextMin = a - 1;
            nextMax = a + 1;
            if (process(secondList)) {
                return "yes";
            }
            return "no";
        }

        private boolean process(LinkedList<Integer> list) {
            while (true) {
                if (list.size() == 0) {
                    return true;
                }
                int first = list.peekFirst();
                int last = list.peekLast();
                if (first == nextMin) {
                    nextMin--;
                    list.pollFirst();
                    continue;
                }
                if (first == nextMax) {
                    nextMax++;
                    list.pollFirst();
                    continue;
                }
                if (last == nextMin) {
                    nextMin--;
                    list.pollLast();
                    continue;
                }
                if (first == nextMax) {
                    nextMax++;
                    list.pollLast();
                    continue;
                }
                break;
            }
            return false;
        }
    }

    private static class InputReader {
        private BufferedReader r;
        private StringTokenizer st;

        public InputReader(InputStream stream) {
            r = new BufferedReader(new InputStreamReader(stream), 16384);
            st = null;
        }

        public String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(r.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

    }

}

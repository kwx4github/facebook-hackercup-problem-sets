#include <assert.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <queue>
#include <list>
#include <stack>
using namespace std;
#define PB			push_back
#define ALL(v)			(v).begin() , (v).end()
#define SZ(v)			( (int) v.size() )
#define Set(v,x)		memset(  v , x , sizeof(v))
#define two(n)			( 1 << (n) )
#define contain(S,i)		( (S) & two(i) ) 
#define SQR(v)			( (v) * (v) )
#define ABS(x)			( ( (x) >= 0 ) ? (x) : -(x) )
#define foreach(v,it)		for( typeof((v).begin()) it = (v).begin() ; it != (v).end() ; it++ )
int v[50100], n;

bool Check(int pos) {
  int from, to, a, b;
  a = 0, b = n-1;
  if (pos == 0) {
    a = 1;
    from = to = v[0];
  } else {
    from = to = v[n-1];
    b--;
  }
  while (a <= b) {
    if (v[a] == from-1) {
      a++;
      from--;
    } else if (v[a] == to+1) {
      a++;
      to++;
    } else if (v[b] == from-1) {
      b--;
      from--;
    } else if (v[b] == to+1) {
      b--;
      to++;
    } else
      return false;
  }
  return true;
}
bool solve() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++)
    scanf("%d", &v[i]);
  if (Check(0))
    return true;
  else if (Check(1))
    return true;
  return false;
}

int main() {
  int C , nc;
  scanf("%d", &C);
  for (nc = 1 ; nc <= C ; nc++) {
    printf("Case #%d: ", nc);
    if (solve())
      puts("yes");
    else
      puts("no");
  }	
  return 0;
}

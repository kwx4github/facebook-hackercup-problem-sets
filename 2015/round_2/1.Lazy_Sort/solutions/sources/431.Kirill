#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>

using namespace std;

#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>

const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 300000;


void autocomplete(){
     static int ind = 0;
     ind ++;
     cout << "Case #" << ind << ": ";
}

inline bool SOLVE(vector<int> &a){
       int l = a[0];
       int r = a[0];
       for (int i = 1, j = a.size() - 1; i <= j; ){
           if (a[i] == l - 1 || a[i] == r + 1){
              if (a[i] == l- 1)
                 l --;
              else
                  r ++;
              i ++;
           }
           else
                if (a[j] == l - 1 || a[j] == r + 1){
                   if (a[j] == l - 1)
                      l --;
                   else
                       r ++;
                   j --;
                }
                else
                    return 0;
       }
       return 1;
}
int main() {
    ios::sync_with_stdio(0);
    freopen("lazy_sort.txt","r",stdin);
    freopen("output.txt", "w", stdout);
    
    int t;
    cin >> t;
    
    while (t --> 0){
          int n;
          cin >> n;
          vector<int> a(n);
          for (int i = 0;i < n;i ++)
              cin >> a[i];
          
          bool ans = SOLVE(a);
          reverse(a.begin(),a.end());
          ans = ans | SOLVE(a);
          autocomplete();
          if (ans)
             cout << "yes\n";
          else
              cout << "no\n";
    }
    return 0;
}

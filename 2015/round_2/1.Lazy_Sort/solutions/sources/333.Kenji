#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

int N;
int A[50000];

bool check(bool leftFirst) {
    deque<int> q;

    int l = 0, r = N;

    if (leftFirst)
        q.push_back(A[l++]);
    else
        q.push_back(A[--r]);

    while (l < r) {
        if (A[l] == q.front() - 1) {
            q.push_front(A[l++]);
        } 
        else if (A[r-1] == q.front() - 1) {
            q.push_front(A[--r]);
        }
        else if (q.back() + 1 == A[l]) {
            q.push_back(A[l++]);
        } 
        else if (q.back() + 1 == A[r-1]) {
            q.push_back(A[--r]);
        } 
        else {
            return false;
        }
    }

    return true;
}

void solve() {
    cin >> N;
    REP (i, N) cin >> A[i];

    if (check(true) || check(false)) {
        cout << "yes" << endl;
    } else {
        cout << "no" << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#define NBOUND 10000000

using namespace std;

vector<int> primes;
int numPrimes;

bool isPrime(int n)
{
    int rootN = sqrt(n);
    for(int i=0; i < numPrimes && primes[i] <= rootN; ++i)
    {
        if(!(n % primes[i]))
        {
            return false;
        }
    }
    return true;
}

long long gcd(long long a, long long b)
{
    return a ? gcd(b % a, a) : b;
}

int main()
{
    int t, T, n;
    int tmp;
    bool result;
    vector<int> papers;
    int lastBottom, lastTop;
    cin >> T;
    for(int t=1; t <= T; ++t)
    {
        cin >> n;
        papers.resize(n);
        for(int i=0; i < n; ++i)
        {
            cin >> papers[i];
        }

        result = true;
        lastTop = lastBottom = -1;
        for(int i=0, j = n-1, k = 0;  k < n; ++k)
        {
            if(lastTop == -1 || lastBottom == -1)
            {
                if(lastTop == -1)
                {
                    lastTop = papers[i];
                }
                if(lastBottom == -1)
                {
                    lastBottom = papers[i];
                }
                i++;
                continue;
            }
            if(i < n && papers[i] == lastBottom + 1)
            {
                ++i;
                lastBottom++;
            }
            else if(i < n && papers[i] == lastTop - 1)
            {
                ++i;
                lastTop--;
            }
            else if(j >= 0 && papers[j] == lastBottom + 1)
            {
                --j;
                lastBottom++;
            }
            else if(j >= 0 && papers[j] == lastTop - 1)
            {
                --j;
                lastTop--;
            }
            else
            {
                result = false;
            }
        }

        cout << "Case #" << t << ": ";
        cout << (result ? "yes" : "no");
        cout << endl;
        papers.clear();
    }

    return 0;
}

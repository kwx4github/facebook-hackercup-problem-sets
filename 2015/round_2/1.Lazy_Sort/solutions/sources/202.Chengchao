#include <bits/stdc++.h>
using namespace std;

map<tuple<int, int, int, int>, int> step;
int arr[55555];

bool bfs(int n) {
  if (n == 1) return true;
  queue<tuple<int, int, int, int>> q;
  q.push(make_tuple(1, n - 1, arr[n], arr[n]));
  q.push(make_tuple(2, n, arr[1], arr[1]));
  step.clear();
  step[make_tuple(1, n - 1, arr[n], arr[n])] = 1;
  step[make_tuple(2, n, arr[1], arr[1])] = 1;
  while (!q.empty()) {
    tuple<int, int, int, int> tp = q.front();
    int x, y, a, b;
    tie(x, y, a, b) = tp; q.pop();
    if (arr[x] == a - 1) {
      if (a - 1 == 1 && b == n) return true;
      auto t2 = make_tuple(x + 1, y, a - 1, b);
      if (step.find(t2) == step.end()) {
        step[t2] = step[tp] + 1;
        q.push(t2);
      }
    }
    if (arr[x] == b + 1) {
      if (a == 1 && b + 1 == n) return true;
      auto t2 = make_tuple(x + 1, y, a, b + 1);
      if (step.find(t2) == step.end()) {
        step[t2] = step[tp] + 1;
        q.push(t2);
      }
    }
    if (arr[y] == a - 1) {
      auto t2 = make_tuple(x, y - 1, a - 1, b);
      if (a - 1 == 1 && b == n) return true;
      if (step.find(t2) == step.end()) {
        step[t2] = step[tp] + 1;
        q.push(t2);
      }
    }
    if (arr[y] == b + 1) {
      if (a == 1 && b + 1 == n) return true;
      auto t2 = make_tuple(x, y - 1, a, b + 1);
      if (step.find(t2) == step.end()) {
        step[t2] = step[tp] + 1;
        q.push(t2);
      }
    }
  }
  return false;
}

int main() {
  int test; scanf("%d", &test);
  for (int cas = 1; cas <= test; ++cas) {
    int n; scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
      scanf("%d", arr + i);
      //arr[i] = i;
    }
    //random_shuffle(arr + 1, arr + 1 + n);
    printf("Case #%d: %s\n", cas, bfs(n) ? "yes" : "no");
  }
  return 0;
}

// pre-written code follows
// #includes {{{
#include <algorithm>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
using namespace std;
// }}}
// constants, typedefs, macros {{{
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<string> VS;
typedef queue<int> QI;
typedef queue<PII> QPII;
typedef complex<double> tComp;
__attribute__ ((unused)) const double PI = 2.0 * acos(0.0);
__attribute__ ((unused)) const int oo = 1000000000;
__attribute__ ((unused)) const LL OO = 1000000000000000000LL;
__attribute__ ((unused)) const double EPS = 1e-9;
#define FORIT(i,c) for (typeof((c).end()) i=(c).begin(); i!=(c).end(); ++i)
#define CERR(x) cerr << (#x) << " = " << (x) << endl
#define COUT(x) cout << (#x) << " = " << (x) << endl
// }}}

// code written during the competition follows
bool check(int v, int &low, int &high) {
  if (v == low) {
    low--;
    return true;
  } else if (v == high) {
    high++;
    return true;
  } else {
    return false;
  }
}
bool solve(const VI v) {
  int n = v.size();
  int low = v[0] - 1, high = v[0] + 1;
  int i = 1, j = n - 1;
  while (i <= j) {
    if (check(v[i], low, high)) {
      i++;
    } else if (check(v[j], low, high)) {
      j--;
    } else {
      return false;
    }
  }
  assert(low == 0 && high == n + 1);
  return true;
}
int main(int argc, char **argv) {
	int kase;
  cin >> kase;
	for (int tkase=0; tkase < kase; tkase++) {
    int n;
    cin >> n;
    VI v(n);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }
    VI w = v;
    reverse(w.begin(), w.end());
    bool res = solve(v) || solve(w);
		cout << "Case #" << tkase + 1 << ": " << (res ? "yes" : "no") << endl;
	}
	return 0;
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

package Y2015.Round2.Prob1;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class Main {
	private static final String fileName = "input/Y2015/Round2/A";
	private static final String inputFileName = fileName + ".in";
	private static final String outputFileName = fileName + ".out";

	// Problem A
	static final String YES = "yes", NO = "no";
	public static void main(String[] args) throws Exception {
		final InputReader in = new InputReader(new FileInputStream(inputFileName));
		final OutputWriter out = new OutputWriter(new FileOutputStream(outputFileName));
		int T = in.readInt();
		for(int t=1;t<=T;t++){
			int N = in.readInt();
			int[] ns = new int[N];
			for (int i = 0; i < N; i++) {
				ns[i] = in.readInt();
			}
			out.printLine("Case #"+t+": "+(possible(ns)?YES:NO));
		}
		out.close();
	}
	private static boolean possible(int[] nums, int L, int R, int l1, int r1){
		while(l1<=r1){
			if(nums[l1]==L-1){
				L--;
				l1++;
			}else if(nums[l1]==R+1){
				R++;
				l1++;
			}else if(nums[r1]==L-1){
				L--;
				r1--;
			}else if(nums[r1]==R+1){
				R++;
				r1--;
			}else{
				return false;
			}
		}
		return true;
	}
	
	private static boolean possible(int[] nums){
		if(possible(nums,nums[0],nums[0],1,nums.length-1))
			return true;
		if(possible(nums,nums[nums.length-1],nums[nums.length-1],0,nums.length-2))
			return true;
		return false;
	}
	
	static class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public String readLine() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
	}

	static class OutputWriter {
		private final PrintWriter writer;

		public OutputWriter(OutputStream outputStream) {
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
					outputStream)));
		}

		public OutputWriter(Writer writer) {
			this.writer = new PrintWriter(writer);
		}

		public void print(Object... objects) {
			for (int i = 0; i < objects.length; i++) {
				if (i != 0)
					writer.print(' ');
				writer.print(objects[i]);
			}
		}

		public void printLine(Object... objects) {
			print(objects);
			writer.println();
		}

		public void close() {
			writer.close();
		}
	}
}
{-# LANGUAGE MultiParamTypeClasses,FlexibleContexts,FlexibleInstances,TypeSynonymInstances,BangPatterns,RankNTypes,TupleSections #-}
import Control.Monad
import Control.Monad.ST
import Control.Applicative
import Control.Arrow
import Debug.Trace
import Text.Printf

import Data.List
import Data.Int
import Data.Bits
import Data.Maybe
import Data.Array.Unboxed
import Data.Array.ST
import qualified Data.Map as M
import qualified Data.Set as S
import qualified Data.ByteString.Char8 as B
import Data.Sequence
import Data.Foldable(toList)

readInt = fromJust . fmap fst . B.readInt
readInts = map readInt . B.words <$> B.getLine

main :: IO ()
main = do
    tests <- readLn :: IO Int
    forM_ [1..tests] $ \caseNum -> do
        n <- readLn :: IO Int
        xs <- readInts
        printf "Case #%d: %s\n" caseNum $ if solve xs then "yes" else "no"

solve :: [Int] -> Bool
solve xs = sub xs || sub (Data.List.reverse xs) where
    sub (y:ys) = go (fromList ys) y y
    go :: Seq Int -> Int -> Int -> Bool
    go que l r = --traceShow (toList que,l,r) $
        let m1 = case viewl que of
                a :< que' | a == l - 1 || a == r + 1 -> Just (a,que')
                _ -> Nothing
            m2 = case viewr que of
                que' :> a | a == l - 1 || a == r + 1 -> Just (a,que')
                _ -> Nothing in
        case m1 <|> m2 of
            Just (x,que') -> go que' (min x l) (max x r)
            Nothing -> Data.Sequence.null que




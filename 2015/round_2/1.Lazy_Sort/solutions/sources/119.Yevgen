#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <iomanip>
#include <fstream>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii;
typedef vector<int> vint;
typedef vector<LL> vLL;

const int nmax = 100005;

int p[nmax];
int n;

bool try_this(int l, int r, int vl) {
	int vr = vl;
	while (l <= r) {
		if (l >= 0) {
			if (p[l] == vl - 1) {
				vl--;
				++l;
				continue;
			}
			if (p[l] == vr + 1) {
				vr++;
				l++;
				continue;
			}
		}
		if (r < n) {
			if (p[r] == vl - 1) {
				--vl;
				r--;
				continue;
			}
			if (p[r] == vr + 1) {
				++vr;
				--r;
				continue;
			}
		}

		return false;
	}
	assert(vl == 1 && vr == n);
	return true;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif

	int T;
	cin >> T;
	REP(test, T) {
		cin >> n;
		REP(i, n) cin >> p[i];
		bool ok = false;
		if (try_this(0, n - 2, p[n - 1]) || try_this(1, n - 1, p[0])) {
			ok = true;
		}

		cout << "Case #" << test + 1 << ": ";
		if (ok == false) {
			cout << "no";
		}
		else {
			cout << "yes";
		}
		cout << endl;
	}

	return 0;
}

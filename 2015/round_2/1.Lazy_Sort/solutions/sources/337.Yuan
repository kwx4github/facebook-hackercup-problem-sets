import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;

public class LazySort {

	static int N;
	static int[] a;

	static boolean doit(int i, int j, ArrayDeque<Integer> queue) {
		while (i <= j) {
			if (a[i] == queue.getFirst() - 1) {
				queue.addFirst(a[i++]);
			} else if (a[i] == queue.getLast() + 1) {
				queue.addLast(a[i++]);
			} else if (a[j] == queue.getFirst() - 1) {
				queue.addFirst(a[j--]);
			} else if (a[j] == queue.getLast() + 1) {
				queue.addLast(a[j--]);
			} else
				break;
		}
		return queue.size() == N;
	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner cin = new Scanner(new File("lazy_sort.txt"));
		PrintStream cout = new PrintStream("lazy_sort.out");
		// Scanner cin = new Scanner(new File("A-large-practice.in"));
		// PrintStream cout = new PrintStream("A-large-practice.out");
		// Scanner cin = new Scanner(System.in);
		// PrintStream cout = System.out;

		int _case = 0;
		for (int T = cin.nextInt(); T > 0; T--) {
			_case++;
			N = cin.nextInt();
			a = new int[N];
			for (int i = 0; i < N; i++)
				a[i] = cin.nextInt();
			boolean ok = doit(1, N - 1, new ArrayDeque<Integer>(Arrays.asList(a[0])))
					|| doit(0, N - 2, new ArrayDeque<Integer>(Arrays.asList(a[N - 1])));
			if (ok)
				cout.println(String.format("Case #%d: yes", _case));
			else
				cout.println(String.format("Case #%d: no", _case));
		}
		cin.close();
		cout.close();
	}
}
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"

int a[1000000];
bool solve2(int l, int r, int l2, int r2) {
  if (l > r) return true;
  if (a[l] == l2 - 1) {
    return solve2(l + 1, r, l2 - 1, r2);
  }
  if (a[l] == r2 + 1) {
    return solve2(l + 1, r, l2, r2 + 1);
  }
  if (a[r] == l2 - 1) {
    return solve2(l, r - 1, l2 - 1, r2);
  }
  if (a[r] == r2 + 1) {
    return solve2(l, r - 1, l2, r2 + 1);
  }
  return false;
}
void solve() {
  int n;                           
  scanf("%d", &n);
  if (n <= 2) {
    printf("yes\n");
    return;
  }
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    a[i]--;
  }      
  if (solve2(1, n - 1, a[0], a[0])) {
    printf("yes\n");
    return;
  }
  if (solve2(0, n - 2, a[n - 1], a[n - 1])) {
    printf("yes\n");
    return;
  }
  printf("no\n");
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

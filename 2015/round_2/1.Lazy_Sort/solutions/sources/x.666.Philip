#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define NOMINMAX 1
#include <windows.h>
#define all(v)begin(v),end(v)
#define dump(v)copy(begin(v),end(v),ostream_iterator<decltype(*begin(v))>(cout,"\n"))
#define rg(i,a,b)for(int i=a,i##e=b;i<i##e;++i)
#define fr(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define rf(i,n)for(int i=n-1;i>=0;--i)
#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define ec(i,m)for(int i=0,i##e=m.size();i<i##e;++i)
#define sz(v)int(v.size())
#define sr(v)sort(begin(v),end(v))
#define rs(v)sort(begin(v),end(v),greater<decltype(*begin(v))>())
#define rev(v)reverse(begin(v),end(v))
#define eb emplace_back
#define big numeric_limits<int>::max()
#define bigl numeric_limits<ll>::max()
#define g(t,i)get<i>(t)
#define cb(v,w)copy(begin(v),end(v),back_inserter(w))
#define uni(v)sort(begin(v),end(v));v.erase(unique(begin(v),end(v)),end(v))
#define vt(...)vector<tuple<__VA_ARGS__>>
#define smx(a,b)a=max(a,b)
#define smn(a,b)a=min(a,b)
#define perm(v)next_permutation(begin(v),end(v))
#define perms(v)for(int c=(sort(begin(v),end(v)),1);c||next_permutation(all(v));c=0)
typedef long long ll;
using namespace std;

int main() {
	ifstream cin("lazy_sort.txt");
	ofstream cout("output.txt");
	int T;
	cin >> T;
	typedef tuple<int, ll, ll> z;
	DWORD start = GetTickCount();
	
	fr(cc, T) {
		int N;
		cin >> N;
		vector<int> m(N);
		fr(i, N) cin >> m[i];
		vector<pair<int, int>> mm(N);
		fr(i, N) mm[i] = make_pair(m[i], i);
		sr(mm);
		fr(i, N) m[i] = mm[i].second;
		//fr(i, N) cerr << mm[i].first << ' ' << mm[i].second << endl; cerr << endl;
		bool g = false;
		fr(zz, 2) {
			int mn, mx, a, b;
			mn = mx = find(all(m), zz * (N - 1)) - begin(m);
			if (zz) a = 0, b = N - 2; else a = 1; b = N - 1;
			bool f = true;
			fr(i, N) if (i > 0) {
				//for (int j = mn; j <= mx; ++j) cerr << m[j] << ' '; cerr << endl;
				if (mn - 1 >= 0 && m[mn-1] == a) ++a, --mn;
				else if (mx + 1 < N && m[mx+1] == a) ++a, ++mx;
				else if (mn - 1 >= 0 && m[mn-1] == b) --b, --mn;
				else if (mx + 1 < N && m[mx+1] == b) --b, ++mx;
				else { f = false; break; }
			}
			cerr << endl;
			g = g || f;
		}
		cout << "Case #" << cc + 1 << ": " << (g ? "yes" : "no") << endl;
	}
	cerr << GetTickCount() - start << endl;
	system("pause");
}
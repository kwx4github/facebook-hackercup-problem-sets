import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.io.OutputStream;
import java.util.concurrent.Executors;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.io.FileInputStream;
import java.util.concurrent.Callable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.PrintStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.concurrent.ExecutionException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "lazy.*sort.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lazysort.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LazySort solver = new LazySort();
		solver.solve(1, in, out);
		out.close();
	}
}

class LazySort {
    static class Testcase implements Callable<Testcase> {
        int testNumber;
        int n;
        int[] perm;
        String res;

        Testcase(int testNumber) {
            this.testNumber = testNumber;
        }

        public void readInput(InputReader in) {

            n = in.nextInt();
            perm = new int[n];
            for (int i = 0; i < n; ++i) perm[i] = in.nextInt() - 1;
        }

        public Testcase call() {
            for (int first = 0; first <= n - 1; first += n - 1) {
                int a = 0;
                int b = n - 1;
                if (first == a) ++a;
                if (first == b) --b;
                int min = perm[first];
                int max = perm[first];
                while (a <= b) {
                    if (perm[a] == min - 1) {
                        --min;
                        ++a;
                    } else if (perm[a] == max + 1) {
                        ++max;
                        ++a;
                    } else if (perm[b] == min - 1) {
                        --min;
                        --b;
                    } else if (perm[b] == max + 1) {
                        ++max;
                        --b;
                    } else break;
                }
                if (a > b) {
                    res = "yes";
                    return this;
                }
            }
            res = "no";
            System.err.println("Done test " + testNumber);
            return this;
        }

        public void writeOutput(PrintWriter out) {
            out.println("Case #" + testNumber + ": " + res);
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int nt = in.nextInt();
        List<Future<Testcase>> tests = new ArrayList<Future<Testcase>>();
        ExecutorService pool = Executors.newFixedThreadPool(1);
        for (int it = 0; it < nt; ++it) {
            Testcase t = new Testcase(it + 1);
            t.readInput(in);
            
            tests.add(pool.submit(t));
        }
        for (Future<Testcase> test : tests) {
            try {
                Testcase t = test.get();
                t.writeOutput(out);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        pool.shutdown();
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution {
    
    public static void main(String[] args) throws IOException {
        Reader.init(System.in);
        int T = Reader.nextInt();
    
        for (int t = 0; t < T ; t++) {
        	int N = Reader.nextInt();
        	
        	int[] arr = new int[N];
        	for (int i = 0; i < N; i++)
        	{
        		arr[i] = Reader.nextInt();
        	}
        	
        	// Try starting at top
        	boolean success = true;
        	int topNdx = 1, botNdx = N-1;
        	int topStack = arr[0], botStack = arr[0];
        	while (success && topNdx < botNdx) {
        		if (arr[topNdx] == topStack-1) {
        			topStack = arr[topNdx];
        			topNdx++;
        		} else if (arr[topNdx] == botStack+1) {
        			botStack = arr[topNdx];
        			topNdx++;
        		}
        		else if (arr[botNdx] == topStack-1) {
        			topStack = arr[botNdx];
        			botNdx--;
        		} else if (arr[botNdx] == botStack+1) {
        			botStack = arr[botNdx];
        			botNdx--;
        		}
        		else {
        			success = false;
        		}
        	}
        	
        	if (!success) {
            	// Try starting at top
            	success = true;
            	topNdx = 0;
            	botNdx = N-2;
            	topStack = arr[N-1];
            	botStack = arr[N-1];
            	while (success && topNdx < botNdx) {
            		if (arr[topNdx] == topStack-1) {
            			topStack = arr[topNdx];
            			topNdx++;
            		} else if (arr[topNdx] == botStack+1) {
            			botStack = arr[topNdx];
            			topNdx++;
            		}
            		else if (arr[botNdx] == topStack-1) {
            			topStack = arr[botNdx];
            			botNdx--;
            		} else if (arr[botNdx] == botStack+1) {
            			botStack = arr[botNdx];
            			botNdx--;
            		}
            		else {
            			success = false;
            		}
            	}
        		
        	}
        	
        	if (success)
	            System.out.println("Case " + (t+1) + ": yes");
        	else
	            System.out.println("Case " + (t+1) + ": no");
        }
    }
}


/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
    
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
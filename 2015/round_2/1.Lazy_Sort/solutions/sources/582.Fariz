#include <bits/stdc++.h>

using namespace std;

int id[50505];

int main() {
  freopen("lazy_sort.txt", "r", stdin);
  freopen("lazy_sort.out", "w", stdout);
  int t;
  scanf("%d", &t);
  for (int tc = 1; tc <= t; tc++) {
    printf("Case #%d: ", tc);
    int n;
    scanf("%d", &n);
    memset(id, sizeof(id), 0);
    for (int i = 0; i < n; i++) {
      scanf("%d", &id[i]);
    }
    int top, bottom, afterTop, afterBottom, flag = 0;
    top = id[0], bottom = id[0], afterTop = 1, afterBottom = n - 1;
    while (afterTop != afterBottom) {
      if (id[afterTop] - top == -1) {
        top = id[afterTop];
        afterTop++;
      } else if (id[afterTop] - bottom == 1) {
        bottom = id[afterTop];
        afterTop++;
      } else if (id[afterBottom] - bottom == 1) {
        bottom = id[afterBottom];
        afterBottom--;
      } else if (id[afterBottom] - top == -1) {
        top = id[afterBottom];
        afterBottom--;
      } else {
        flag++;
        break;
      }
    }
    top = id[n - 1], bottom = id[n - 1], afterTop = 0, afterBottom = n - 2;
    while (afterTop != afterBottom) {
      if (id[afterTop] - top == -1) {
        top = id[afterTop];
        afterTop++;
      } else if (id[afterTop] - bottom == 1) {
        bottom = id[afterTop];
        afterTop++;
      } else if (id[afterBottom] - bottom == 1) {
        bottom = id[afterBottom];
        afterBottom--;
      } else if (id[afterBottom] - top == -1) {
        top = id[afterBottom];
        afterBottom--;
      } else {
        flag++;
        break;
      }
    }
    (flag < 2) ? printf("yes\n") : printf("no\n");
  }
  return 0;
}

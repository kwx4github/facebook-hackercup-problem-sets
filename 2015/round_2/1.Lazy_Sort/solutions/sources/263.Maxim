#include <algorithm>
#include <iomanip>
#include <istream>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
// Solution template generated by caide


class Solution {
public:
    void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vector<int> a(n);
		for (int i = 0; i < n; ++i) {
			in >> a[i];
		}
		bool ok = false;
		for (int try_ = 0; try_ <= 1; ++try_) {
			int mn = a[0], mx = a[0];
			int i = 1, j = n - 1;
			while (i <= j) {
				if (a[i] == mn - 1) {
					--mn;
					++i;
				}
				else if (a[i] == mx + 1) {
					++mx;
					++i;
				}
				else if (a[j] == mn - 1) {
					--mn;
					--j;
				}
				else if (a[j] == mx + 1) {
					++mx;
					--j;
				}
				else {
					break;
				}
			}

			if (i > j) {
				ok = true;
				break;
			}

			reverse(a.begin(), a.end());
		}

		out << (ok ? "yes" : "no") << endl;
    }
};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);
	int T;
	in >> T;
	for (int test = 1; test <= T; ++test) {
		out << "Case #" << test << ": ";
		Solution solution;
		solution.solve(in, out);
	}
}
#define CAIDE_STDIN 1
#define CAIDE_STDOUT 1
#include <fstream>
#include <iostream>


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

#ifdef CAIDE_STDIN
    istream& in = cin;
#else
    ifstream in(CAIDE_IN_FILE);
#endif

#ifdef CAIDE_STDOUT
    ostream& out = cout;
#else
    ofstream out(CAIDE_OUT_FILE);
#endif
    solve(in, out);
    return 0;
}

#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>
#include <set>
#include <map>

using namespace std;

int N;

int DP[50010];

bool solve() {
    if (N <= 2) return 1;
    
    int sm,bg,i,j,k,pos1,pos2;
    sm = DP[0];
    bg = DP[0];
    pos1 = 1;
    pos2 = N - 1;
    int pk = 1;
    bool ok = 1;
    while (pk < N) {
        j = sm - 1;
        k = bg + 1;
        bool crt = 0;
        if (DP[pos1] == j) {
            crt = 1;
            pos1++;
            sm--;
        }
        else if (DP[pos1] == k) {
            crt = 1;
            pos1++;
            bg++;
        }
        else if (DP[pos2] == j) {
            crt = 1;
            pos2--;
            sm--;
        }
        else if (DP[pos2] == k) {
            crt = 1;
            pos2--;
            bg++;
        }
        
        if (crt == 0) {
            ok = 0;
            break;
        }
        pk++;
    }
    if (ok == 1) return 1;
    
    sm = DP[N-1];
    bg = DP[N-1];
    pos1 = 0;
    pos2 = N - 2;
    pk = 1;
    ok = 1;
    while (pk < N) {
        j = sm - 1;
        k = bg + 1;
        bool crt = 0;
        if (DP[pos1] == j) {
            crt = 1;
            pos1++;
            sm--;
        }
        else if (DP[pos1] == k) {
            crt = 1;
            pos1++;
            bg++;
        }
        else if (DP[pos2] == j) {
            crt = 1;
            pos2--;
            sm--;
        }
        else if (DP[pos2] == k) {
            crt = 1;
            pos2--;
            bg++;
        }
        
        if (crt == 0) {
            ok = 0;
            break;
        }
        pk++;
    }
    if (ok == 1) return 1;
    
    return 0;
}

int main() {
    ifstream filein;
    ofstream fileout;
    filein.open("lazy_sort.txt",ios::in);
    //filein.open("A",ios::in);
    fileout.open("output",ios::out);
    int T;
    filein >> T;
    for (int z1 = 1;z1 <= T;z1++) {
        fileout << "Case #" << z1 << ": ";
        cout << "Case #" << z1 << ": ";
        filein >> N;
        memset(DP,0,sizeof(DP));
        int i;
        for (i = 0;i < N;i++) filein >> DP[i];
        bool ck = solve();
        if (ck == 1) {
            cout << "yes" << endl;
            fileout << "yes" << endl;
        }
        else {
            cout << "no" << endl;
            fileout << "no" << endl;
        }
    }
    fileout.close();
}
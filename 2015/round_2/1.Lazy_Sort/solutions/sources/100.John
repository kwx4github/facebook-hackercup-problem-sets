#include <cstdlib>
#include <cassert>
#include <vector>
#include <string>
#include <cstring>
#include <cstdio>
#include <stack>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vd V(double)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()

//#define fk fkr(n)
#include <map>
//#include <set>
#include <algorithm>
//#define ll long long
//#define flr(n) fo(l,n)
//#define fl flr(n)
//#define ins(x) insert(x)
//#define df double
//#define srt(f) sort(f.begin(),f.end())




int f[51000];
int n;

bool ok(int minf, int maxf, int ming, int maxg) {
  assert(n-(maxf-minf+1) == maxg-ming+1);
  if (minf > maxf) {
    assert(ming==1);
    assert(maxg==n);
    return true;
  }
  if (f[minf]==ming-1) {
    return ok(minf+1,maxf,ming-1,maxg);
  }
  if (f[minf]==maxg+1) {
    return ok(minf+1,maxf,ming,maxg+1);
  }
  if (f[maxf]==ming-1) {
    return ok(minf,maxf-1,ming-1,maxg);
  }
  if (f[maxf]==maxg+1) {
    return ok(minf,maxf-1,ming,maxg+1);
  }
  return false;
}

int main(void) {
  int i;
  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    assert(scanf("%d",&n)==1);
    fi assert(scanf("%d",&f[i])==1);
    {
      map<int,int> s;
      fi s[f[i]]=1;
      fr(i,1,n+1) assert(s[i]==1);
    }

    bool ans = ok(1,n-1,f[0],f[0]) || ok(0,n-2,f[n-1],f[n-1]);

    printf("Case #%d: %s\n",cas,(ans?"yes":"no"));
  }
  return 0;
}

/*
ID: espr1t
LANG: C++
TASK: Lazy Sort
KEYWORDS: Easy, Ad-hoc
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <algorithm>
#include <vector>

using namespace std;
FILE *in; FILE *out;

const int MAX = 50005;

int n;
int a[MAX];

void solveTest(int testCase) {
    fprintf(out, "Case #%d: ", testCase);

    fscanf(in, "%d", &n);
    for (int i = 0; i < n; i++)
        fscanf(in, "%d", &a[i]);
    
    int left = 1, right = n - 1;
    int top = a[0], bottom = a[0];
    while (left <= right) {
        if (a[left] == top - 1) {
            top = a[left++];
        }
        else if (a[right] == top - 1) {
            top = a[right--];
        }
        else if (a[left] == bottom + 1) {
            bottom = a[left++];
        }
        else if (a[right] == bottom + 1) {
            bottom = a[right--];
        }
        else {
            fprintf(out, "no\n");
            return;
        }
    }
    fprintf(out, "yes\n");
}

int main(void) {
    in = stdin; out = stdout;
    in = fopen("LazySort.in", "rt"); out = fopen("LazySort.out", "wt");
    
    unsigned sTime = clock();
    
    int numTests;
    fscanf(in, "%d", &numTests);
    static const int BUFF = 1048576;
    static char buff[BUFF]; fgets(buff, BUFF, in);
    
    for (int testCase = 1; testCase <= numTests; testCase++) {
        unsigned tTime = clock();
        fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
        solveTest(testCase);
        fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
    }
    fprintf(stderr, "Finished with all testcases!\n");
    fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
    return 0;
}

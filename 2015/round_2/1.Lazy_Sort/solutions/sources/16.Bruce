#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/resource.h>

using namespace std;

/*** START OF TEMPLATE CODE ***/

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;

#define RA(x) begin(x), end(x)
#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)
#define SZ(x) ((int) (x).size())

template<class T>
vector<T> splitstr(const string &s)
{
    istringstream in(s);
    vector<T> out;
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
    return out;
}

template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }

static void redirect(int argc, const char **argv)
{
    struct rlimit stack_limit;
    getrlimit(RLIMIT_STACK, &stack_limit);
    stack_limit.rlim_cur = 1024 * 1024 * 1024;
    setrlimit(RLIMIT_STACK, &stack_limit);

    ios::sync_with_stdio(false);

    if (argc > 1)
    {
        int fd = open(argv[1], O_RDONLY);
        if (fd == -1) { perror(argv[1]); exit(1); }
        if (-1 == dup2(fd, 0)) { perror(argv[1]); exit(1); }
        if (-1 == close(fd)) { perror(argv[1]); exit(1); }
    }

    if (argc > 2)
    {
        int fd = open(argv[2], O_WRONLY | O_CREAT, 0666);
        if (fd == -1) { perror(argv[2]); exit(1); }
        if (-1 == dup2(fd, 1)) { perror(argv[2]); exit(1); }
        if (-1 == close(fd)) { perror(argv[2]); exit(1); }
    }

    cin.exceptions(ios::failbit | ios::badbit);
}

/*** END OF TEMPLATE CODE ***/

static bool solveable(deque<int> P, int init)
{
    int top = init;
    int bottom = init;
    while (!P.empty())
    {
        if (P.front() == top - 1)
        {
            top--;
            P.pop_front();
        }
        else if (P.front() == bottom + 1)
        {
            bottom++;
            P.pop_front();
        }
        else if (P.back() == top - 1)
        {
            top--;
            P.pop_back();
        }
        else if (P.back() == bottom + 1)
        {
            bottom++;
            P.pop_back();
        }
        else
            return false;
    }
    return true;
}

int main(int argc, const char **argv)
{
    redirect(argc, argv);

    int cases;
    cin >> cases;
    for (int cas = 0; cas < cases; cas++)
    {
        int N;
        cin >> N;
        deque<int> P(N);
        for (int i = 0; i < N; i++)
        {
            cin >> P[i];
            P[i]--;
        }
        int last = P.back();
        P.pop_back();
        bool ans1 = solveable(P, last);
        P.push_back(last);
        int first = P[0];
        P.erase(P.begin());
        bool ans2 = solveable(P, first);
        bool ans = ans1 || ans2;
        cout << "Case #" << cas + 1 << ": " << (ans ? "yes" : "no") << "\n";
    }
    return 0;
}

#include<iostream>
#include<string>
#include<vector>
#include<sstream>
#include<cmath>
#include<algorithm>
#include<numeric>
#include<map>
#include<set>
#include<queue>
#include<cstring>
#include<cstdio>
using namespace std ;
int tree[200002];
int MaxVal=200001;
int c[150005];

int read(int idx){
    if(idx==0)return 0;
	int sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

int get(int sum){
	int low=1;int hi=MaxVal;
	
    while(hi!=low){
		int me=(low+hi)/2;
		if(read(me) >= sum) hi=me;
		else low=me+1;
	}
	return low;
}


void update(int idx ,int val){
	while (idx <= MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}

int main(){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    

    int tc;
    cin>>tc;

    for(int caso=1;caso<=tc;caso++){
        memset(tree,0,sizeof(tree));
        int n;
        cin>>n;
        for(int i=0;i<n;i++){
            cin>>c[i];
        }
        
        for(int i=0;i<n;i++){
            c[i+n]=c[i];
        }
        
        for(int i=0;i<n;i++){
            c[i+2*n]=c[i];
        }
        
        for(int i=0;i<3*n;i++)
            update(i+1,1);
        
        int cant=0;
        int id=-1;
        for(int i=0;i<3*n;i++){
            if(c[i]==1 && cant==1){
                id=i+1;
                break;
            }
            if(c[i]==1)cant++;
        }
        
        string ok="yes";
        int num=id;
        update(num,-1);
        for(int i=2;i<=n;i++){
            int valueid1=c[get(num)-1];
            int valueid2=c[get(num-1)-1];
            if(valueid1==i){
                update(get(num),-1);
                continue;
            }

            if(valueid2==i){
                update(get(num-1),-1);
                num--;
                continue;
            }

            ok="no";
            break;
        }


        cout<<"Case #"<<caso<<": "<<ok<<endl;
        int vale=n;
        
        
    }
    
    return 0;
}







import java.util.*;

public class lazy_sort {

	public Object solve() {
		sc.nextInt();
		int [] A = sc.nextInts();

		LinkedList<Integer> L1 = new LinkedList<>();
		LinkedList<Integer> L2 = new LinkedList<>();
		for (int a : A)  {
			L1.add(a);
			L2.add(a);
		}

		TreeSet<Integer> S1 = new TreeSet<>();
		TreeSet<Integer> S2 = new TreeSet<>();

		S1.add(L1.removeFirst());
		S2.add(L2.removeLast());

		boolean x = solve(L1, S1);
		boolean y = solve(L2, S2);
		boolean res = x || y;
		return res ? "yes" : "no";
	}

	boolean solve(LinkedList<Integer> L, TreeSet<Integer> S) {
		while (!L.isEmpty()) {
			int x = L.peekFirst(), y = L.peekLast();
			if (x == S.first() - 1 || x == S.last() + 1)
				S.add(L.removeFirst());
			else if (y == S.first() - 1 || y == S.last() + 1)
				S.add(L.removeLast());
			else
				return false;
		}
		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////
	private static IOUtils.MyScanner sc = new IOUtils.MyScanner();
	private static class IOUtils {
		public static class MyScanner {
			public int nextInt() { return sc.nextInt(); }
			public String nextLine() {
				String line = sc.nextLine().trim();
				if ("".equals(line)) // If at end of line, read next line
					line = sc.nextLine();
				return line;
			}
			public String[] nextStrings() {return nextLine().split(" "); }
			public int[] nextInts() {
				String[] L = nextStrings();
				int[] res = new int[L.length];
				for (int i = 0; i < L.length; ++i)
					res[i] = Integer.parseInt(L[i]);
				return res;
			}
			private final java.util.Scanner sc;
			private MyScanner() {
				sc = new java.util.Scanner(System.in);
				sc.hasNext();
				start();
			}
		}
		private static String build(Object o, Object... a) { return buildDelim(" ", o, a); }
		private static String buildDelim(String delim, Object o, Object... a) {
			StringBuilder b = new StringBuilder();
			append(b, o, delim);
			for (Object p : a)
				append(b, p, delim);
			return b.substring(delim.length());
		}
		//////////////////////////////////////////////////////////////////////////////////
		private static void start() { if (t == 0) t = millis(); }
		private static void append(StringBuilder b, Object o, String delim) {
			if (o.getClass().isArray()) {
				int len = java.lang.reflect.Array.getLength(o);
				for (int i = 0; i < len; ++i)
					append(b, java.lang.reflect.Array.get(o, i), delim);
			} else if (o instanceof Iterable<?>)
				for (Object p : (Iterable<?>) o)
					append(b, p, delim);
			else {
				if (o instanceof Double)
					o = new java.text.DecimalFormat("#.#########").format(o);
				b.append(delim).append(o);
			}
		}
		private static void print(Object o) {
			err(o, '(', time(), ')');
			if (PRINT)
				System.out.println(o);
		}
		private static void err(Object ...o) { System.err.println(build(o)); }
		private static long t;
		private static long millis() { return System.currentTimeMillis(); }
		private static String time() { return "Time: " + (millis() - t) / 1000.0; }
		private static final boolean PRINT = System.getProperties().containsKey("PRINT");
		private static void run(int N) {
			for (int n = 1; n <= N; ++n)
				print("Case #" + n + ": " + build(new lazy_sort().solve()));
			err("------------------");
			err(time());
		}
	}
	public static void main(String[] args) {
		int N = sc.nextInt();
		IOUtils.run(N);
	}
}

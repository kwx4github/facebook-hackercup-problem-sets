#include <iostream>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <bitset>
#include <queue>
#include <deque>
#include <list>
#include <algorithm>
#include <iomanip>

using namespace std;

typedef pair<int, int> pt;
typedef long long li;
typedef long double ld;

template<typename X> inline X abs(const X& a) { return a < 0 ? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

#define forn(i,n) for(int i = 0; i < int(n); i++)
#define pb push_back
#define sz(a) int(a.size())
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++) 
#define ft first
#define sc second
#define x first
#define y second

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = ld(1e-9);
const ld PI = acos(-1.0);

const int N = 50 * 1000 + 13;
int a[N];
int n;

inline bool read()
{
	scanf("%d", &n);
	for(int i = 0; i < n; i++)
		scanf("%d", &a[i]);
	return true;
}

bool check()
{
	int lf = 1;
	int rg = n - 1;
	int up = a[0];
	int down = a[0];
	for(int it = 1; it < n; it++)
	{
		if(a[lf] + 1 == up)
		{
			up = a[lf];
			lf++;
			continue;
		}
		if(a[rg] + 1 == up)
		{
			up = a[rg];
			rg--;
			continue;
		}
		if(a[lf] - 1 == down)
		{
			down = a[lf];
			lf++;
			continue;
		}
		if(a[rg] - 1 == down)
		{
			down = a[rg];
			rg--;
			continue;
		}
		return false;
	}
	return true;
}

inline void solve()
{   
	if(check())
	{
		puts("yes");
		return;
	}
	for(int i = 0; i < n / 2; i++)
		a[i] = a[n - i - 1];
	if(check())
	{
		puts("yes");
		return;
	}
	puts("no");
}

int main()
{
    freopen("lazy_sort.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cerr << setprecision(10) << fixed;
    cout << setprecision(15) << fixed;    
    srand(time(NULL));
    int tests;
    cin >> tests;
    for(int test = 0; test < tests; test++)
    {
    	//cerr << test << endl;
		read();
    	printf("Case #%d: ", test + 1);
	    solve();
	}         
    return 0;
}
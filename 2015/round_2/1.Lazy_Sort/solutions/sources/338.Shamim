#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<queue>
#include<sstream>
#include<queue>
#include<ctype.h>
#include<cstring>


using namespace std;

#define re return
#define co continue
#define pb push_back
#define br break
#define sz size


#define pf printf
#define sf scanf

bool solve( vector<int> scores, bool topFirst) {
    int top,bot;
    int head, tail;
    if ( topFirst)
        top=bot = scores[0], head = 1, tail = scores.size() - 1;
    else
        top = bot = scores.back(), head = 0, tail = scores.size() - 2;
    while ( head<tail) {
        if ( scores[head] == top - 1 ) {
            top = scores[head];
            head++;
        }
        else if ( scores[head] == bot + 1 ) {
            bot = scores[head];
            head++;
        }
        else if ( scores[tail] == top-1) {
            top = scores[tail];
            tail--;
        }
        else if ( scores[tail] == bot + 1) {
            bot = scores[tail];
            tail--;
        }
        else
            return false;
    }
    // they will break at equality, then try to fit the last on top or bottom
    if ( scores[head] == top -1 || scores[head] == bot +  1)
        return true;
    return false;
}

int main()
{

    freopen("lazy_sort.txt", "r", stdin);
    freopen("ans_lazy.txt", "w", stdout);

    int T;
    cin>>T;
    int kase=1;
    while ( T--) {
        int n;
        cin>>n;
        vector<int> scores(n);
        int i;
        for (i=0; i<n; i++)
            cin>>scores[i];
        bool canDo = false;
        canDo = solve( scores, true);
        if ( canDo == false)
            canDo = solve (scores, false);
        printf("Case #%d: %s\n",kase++, (canDo?"yes":"no"));
    }
    return 0;
}

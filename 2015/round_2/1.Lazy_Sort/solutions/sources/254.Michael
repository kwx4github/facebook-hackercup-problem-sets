import java.io.*;
import java.util.*;
public class a {
public static void main(String[] args) throws IOException
{
	//input.init(new FileInputStream(new File("template.in")));
	//PrintWriter out = new PrintWriter(new File("template.out"));
	input.init(System.in);
	PrintWriter out = new PrintWriter(System.out);
	int T = input.nextInt();
	for(int t = 0; t<T; t++)
	{
		int n = input.nextInt();
		int[] data = new int[n];
		for(int i = 0; i<n; i++) data[i] = input.nextInt();
		boolean res = good(data, 0) || good(data, n-1);
		out.println("Case #" + (t+1)+": "+ (res ? "yes" : "no"));
	}
	out.close();
}
static boolean good(int[] data, int start)
{
	int n = data.length;
	ArrayDeque<Integer> pile = new ArrayDeque<Integer>();
	int left = 0, right = n - 1;
	pile.add(data[start]);
	if(start == 0) left++;
	else right--;
	for(int i = 0; i<n-1; i++)
	{
		if(data[left] == pile.peekFirst() - 1)
		{
			pile.addFirst(data[left]);
			left++;
		}
		else if(data[left] == pile.peekLast() + 1)
		{
			pile.addLast(data[left]);
			left++;
		}
		else if(data[right] == pile.peekFirst() - 1)
		{
			pile.addFirst(data[right]);
			right--;
		}
		else if(data[right] == pile.peekLast() + 1)
		{
			pile.addLast(data[right]);
			right--;
		}
		else return false;
	}
	return true;
}
public static class input {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException {
        return Long.parseLong( next() );
    }
}
}

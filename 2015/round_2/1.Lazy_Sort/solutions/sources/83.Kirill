import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Solver solver = new Solver();
		int T = in.nextInt();
		for (int i = 0; i < T; i++) {
			out.format("Case #%d: ", i + 1);
			solver.solve(in, out);
		}
		
		out.close();
	}
}

class Solver {
	boolean can(List<Integer> a) {
		int n = a.size();
		int p1 = 1;
		int p2 = n - 1;
		int top = a.get(0);
		int bottom = a.get(0);
		while (p1 <= p2) {
			if (a.get(p1) == top - 1) {
				top--;
				p1++;
				continue;
			}
			if (a.get(p1) == bottom + 1) {
				bottom++;
				p1++;
				continue;
			}
			if (a.get(p2) == top - 1) {
				top--;
				p2--;
				continue;
			}
			if (a.get(p2) == bottom + 1) {
				bottom++;
				p2--;
				continue;
			}
			return false; 
		}
		return true;
	}
	public void solve(InputReader in, PrintWriter out) {
		int n = in.nextInt();
		List<Integer> a = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			a.add(in.nextInt());
		}
		boolean ans = false;
		ans = ans || can(a);
		Collections.reverse(a);
		ans = ans || can(a);
		if (ans)
			out.println("yes");
		else
			out.println("no");
		
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

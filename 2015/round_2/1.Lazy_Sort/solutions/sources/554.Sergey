#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>
 
using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;
 
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;
 
#define mp make_pair
#define pb push_back
#define X first
#define Y second
 
#define dbg(x) { cerr << #x << " = " << x << endl; }
 
// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;
 
#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
 
template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);
 
#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;
 
#define NAME "improvements"

bool try_left(deque<int> &a, deque<int> &b)
{
    if (a.empty()) return false;
    if (b.empty())
    {
        b.push_back(a.front());
        a.pop_front();
        return true;
    }
    else
    {
        if (a.front() == b.front() - 1)
        {
            b.push_front(a.front());
            a.pop_front();
            return true;
        }
        else if (a.front() == b.back() + 1)
        {
            b.push_back(a.front());
            a.pop_front();
            return true;
        }
    }
    return false;
}

bool try_right(deque<int> &a, deque<int> &b)
{
    if (a.empty()) return false;
    if (b.empty())
    {
        b.push_back(a.back());
        a.pop_back();
        return true;
    }
    else
    {
        if (a.back() == b.front() - 1)
        {
            b.push_front(a.back());
            a.pop_back();
            return true;
        }
        else if (a.back() == b.back() + 1)
        {
            b.push_back(a.back());
            a.pop_back();
            return true;
        }
    }
    return false;
}

bool doit(const vi &inp, bool fside)
{
    deque<int> a(all(inp));
    deque<int> b;
    while (a.size())
    {
        if (fside)
        {
            if (!try_left(a, b))
                if (!try_right(a, b))
                    return false;
        }
        else
        {
            if (!try_right(a, b))
            {
                if (!try_left(a, b))
                    return false;
            }
        }
    }
    return true;
}

bool solve()
{
    int n; cin >> n;
    vi a(n); cin >> a;
    return doit(a, 0) | doit(a, 1);
}
 
int main()
{
    START
    // freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    freopen("lazy_sort.txt", "r", stdin); freopen("output.txt", "w", stdout);
 
    ios_base::sync_with_stdio(false);

    int t; cin >> t;
    forn(i, t)
        cout << "Case #" << i + 1 << ": " << (solve() ? "yes" : "no") << endl;
 
    END
    return 0;
}
/*******************************************
*******************************************/
 
template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
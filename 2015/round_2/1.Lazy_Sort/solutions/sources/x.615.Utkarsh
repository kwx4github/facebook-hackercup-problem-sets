#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define foreachreverse(c, it) for(__typeof(c.rbegin()) it = c.rbegin(); it != c.rend(); ++it)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

string output[2] = {"no", "yes"};

int main(int argc, char const *argv[])
{
	int T;
	gi(T);
	fore(t,1,T) {
		int ans = 1;
		int N;
		gi(N);

		deque<int> a;
		rep(i, N) {
			int id;
			gi(id);
			a.pb(id);
		}

		deque<int> b;
		while(sz(a)) {
			if(sz(b)) {
				int a_front = a.front();
				int a_back = a.back();

				int b_front = b.front();
				int b_back = b.back();

				if(a_front == b_front - 1) {
					b.push_front(a_front);
					a.pop_front();
				}
				else if(a_front == b_back + 1) {
					b.push_back(a_front);
					a.pop_front();
				}
				else if(a_back == b_front - 1) {
					b.push_front(a_back);
					a.pop_back();
				}
				else if(a_back == b_back + 1) {
					b.push_back(a_back);
					a.pop_back();
				}
				else {
					ans = 0;
					break;
				}
			}
			else {
				int curr = a.front();
				a.pop_front();
				b.push_front(curr);
			}
		}

		printf("Case #%d: %s\n", t, output[ans].c_str());
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
int main(){
	//freopen("lazy_sort.txt","r",stdin);
	//freopen("out1.txt","w",stdout);
	int t;
	cin>>t;
	for(int test=1;test<=t;test++){
		int n;
		cin>>n;
		vector<int> pile(n);
		for(int i=0;i<n;i++){
			cin>>pile[i];
		}
		list<int> finalStack;
		//int  currentCount=1;
		int increasingOrDecreasing=0;
		
		//FIRST ELEMENT FROM FRONT OF PILE and its increasing sequence
		finalStack.push_back(pile[0]);
		int i;
		int j;
		for(i=1,j=n-1;i<=j;){
			if(pile[i]==finalStack.front()+1){
					if(finalStack.size()==1)
        			{
          				finalStack.push_front(pile[i]);
            			i++;
            			increasingOrDecreasing=-1;
          			}
         			else
          		 	{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_front(pile[i]);
             			i++;
             
           			}
			}	
			else if(pile[i]==finalStack.front()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_front(pile[i]);
            				i++;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_front(pile[i]);
             			i++; 
           			}
			}	
			else if(pile[i]==finalStack.back()+1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[i]);
            				i++;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_back(pile[i]);
             			i++; 
           			}
			}	
			else if(pile[i]==finalStack.back()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[i]);
            				i++;
            				increasingOrDecreasing=-1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_back(pile[i]);
             			i++; 
           			}
			}
			else if(pile[j]==finalStack.front()+1){
					if(finalStack.size()==1)
        			{
          				finalStack.push_front(pile[j]);
            			j--;
            			increasingOrDecreasing=-1;
          			}
         			else
          		 	{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_front(pile[j]);
             			j--;
             
           			}
			}	
			else if(pile[j]==finalStack.front()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_front(pile[j]);
            				j--;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_front(pile[j]);
             			j--; 
           			}
			}	
			else if(pile[j]==finalStack.back()+1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[j]);
            				j--;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_back(pile[j]);
             			j--; 
           			}
			}	
			else if(pile[j]==finalStack.back()-1){
				if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[j]);
            				j--;
            				increasingOrDecreasing=-1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_back(pile[j]);
             			j--; 
           			}		
			}
			else break;
		
		}
		if(i<=j){
			//cout<<"HERE";
			finalStack.clear();
			finalStack.push_back(pile[n-1]);
			for(i=0,j=n-2;i<=j;){
			if(pile[i]==finalStack.front()+1){
					if(finalStack.size()==1)
        			{
          				finalStack.push_front(pile[i]);
            			i++;
            			increasingOrDecreasing=-1;
          			}
         			else
          		 	{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_front(pile[i]);
             			i++;
             
           			}
			}	
			else if(pile[i]==finalStack.front()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_front(pile[i]);
            				i++;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_front(pile[i]);
             			i++; 
           			}
			}	
			else if(pile[i]==finalStack.back()+1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[i]);
            				i++;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_back(pile[i]);
             			i++; 
           			}
			}	
			else if(pile[i]==finalStack.back()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[i]);
            				i++;
            				increasingOrDecreasing=-1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_back(pile[i]);
             			i++; 
           			}
			}
			else if(pile[j]==finalStack.front()+1){
					if(finalStack.size()==1)
        			{
          				finalStack.push_front(pile[j]);
            			j--;
            			increasingOrDecreasing=-1;
          			}
         			else
          		 	{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_front(pile[j]);
             			j--;
             
           			}
			}	
			else if(pile[j]==finalStack.front()-1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_front(pile[j]);
            				j--;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_front(pile[j]);
             			j--; 
           			}
			}	
			else if(pile[j]==finalStack.back()+1){
					if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[j]);
            				j--;
            				increasingOrDecreasing=1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=1)
             				break;
            			finalStack.push_back(pile[j]);
             			j--; 
           			}
			}	
			else if(pile[j]==finalStack.back()-1){
				if(finalStack.size()==1)
        			{
				         	finalStack.push_back(pile[j]);
            				j--;
            				increasingOrDecreasing=-1;
          			}
         			else
           			{
            			if(increasingOrDecreasing!=-1)
             				break;
            			finalStack.push_back(pile[j]);
             			j--; 
           			}		
			}
			else break;
		
		}
		if(i<=j){
			cout<<"Case #"<<test<<": "<<"no\n"; 
		}
		else{
			cout<<"Case #"<<test<<": "<<"yes\n"; 
		}
		}
		else{
			cout<<"Case #"<<test<<": "<<"yes\n"; 
		}
	}
}

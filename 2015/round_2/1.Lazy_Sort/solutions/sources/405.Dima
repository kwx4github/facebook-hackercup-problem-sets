#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <deque>

using namespace std;

class Solution
{

    bool mod(int init, const vector<int> &mas, int first, int last)
    {
        deque<int> q;
        q.push_back(init);
        while (first <= last)
        {
            int left = q.front() - 1;
            if (mas[first] == left)
            {
                q.push_front(mas[first]);
                ++first;
                continue;
            }
            if (mas[last] == left)
            {
                q.push_front(mas[last]);
                --last;
                continue;
            }
            
            int right = q.back() + 1;
            if (mas[first] == right)
            {
                q.push_back(mas[first]);
                ++first;
                continue;
            }
            if (mas[last] == right)
            {
                q.push_back(mas[last]);
                --last;
                continue;
            }

            return false;
        }
        return true;

        /*
        while (first <= last)
        {
            if (mas[first] <= mas[last])
            {
                if (mas[last] < q.front())
                {
                    q.push_front(mas[last]);
                    --last;
                    continue;
                }

                if (mas[first] > q.back())
                {
                    q.push_back(mas[first]);
                    first++;
                    continue;
                }

                return false;
            }

            if (mas[first] > mas[last])
            {
                if (mas[first] < q.front())
                {
                    q.push_front(mas[first]);
                    ++first;
                    continue;
                }

                if (mas[last] > q.back())
                {
                    q.push_back(mas[last]);
                    --last;
                    continue;
                }

                return false;
            }
        }

        return true;
        */
    }
public:
    bool solve(const vector<int> &mas)
    {
        return mod(mas.front(), mas, 1, mas.size() - 1) || mod(mas.back(), mas, 0, mas.size() - 2);
    }
};

void test();

int main(int argc, char* argv[])
{
    // test(); return 0;

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int T;
    cin >> T;

    for (int test = 1; test <= T; test++)
    {
        double time = clock();

        int n;
        cin >> n;
        vector<int> mas(n);
        for (auto &elem : mas)
            cin >> elem;

        Solution solution;

        string answer = solution.solve(mas) ? "yes" : "no";
        cout << "Case #" << test << ": " << answer << endl;

        time = (clock() - time) / CLOCKS_PER_SEC;
        cerr << "Test #" << test << ": " << time << "sec" << endl;
    }

	return 0;
}

void test()
{
    
}


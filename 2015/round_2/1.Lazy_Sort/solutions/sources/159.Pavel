
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Threading;
using kp.Algo;
using kp.Algo.Geometry;

namespace HackerCup
{
	class Solution
	{
		private const bool UseMultiThreading = false;
		private const bool UseStandardIO = false;
		private const string InputFile = @"C:\Users\kp\Downloads\lazy_sort.txt";
		private const string OutputFile = @"D:\docs\Dropbox\Olymp\Sources\_submit\HackerCup 2015 Round 2\A.cs" + ".output.txt";


		private int n;
		private int[] a;
		private bool res;

		void ReadData()
		{
			n = NextInt();
			a = new int[n];
			for ( int i = 0; i < n; i++ )
			{
				a[i] = NextInt();
			}
		}

		static void PreSolve()
		{

		}

		void Solve()
		{
			Go( 0 );
			if ( !res )
				Go( n - 1 );
		}

		private void Go( int p )
		{
			int canl = a[p] - 1, canr = a[p] + 1;
			int l = 0, r = n - 1;
			if ( p == 0 ) l++;
			else r--;

			bool ok = true;
			while ( l <= r )
			{
				if ( a[l] == canl )
				{
					++l;
					--canl;
				}
				else if ( a[l] == canr )
				{
					++l;
					++canr;
				}
				else if ( a[r] == canl )
				{
					--r;
					--canl;
				}
				else if ( a[r] == canr )
				{
					--r;
					++canr;
				}
				else
				{
					ok = false;
					break;
				}
			}

			if ( ok )
				res = true;
		}

		void WriteAnswer()
		{
			Out.WriteLine( res ? "yes" : "no" );
		}

		#region ...

		void run()
		{
			if ( UseStandardIO )
			{
				var inputFileName = Path.Combine( Path.GetDirectoryName( GetType().Assembly.Location ), "input.txt" );
				_inputStream = File.OpenText( inputFileName );
				_outputStream = Console.Out;
			}
			else
			{
				_inputStream = File.OpenText( InputFile );
				_outputStream = File.CreateText( OutputFile );
			}

			PreSolve();

			int testsCount = int.Parse( _inputStream.ReadLine() );
			var solvers = new Solution[testsCount];
			for ( int i = 0; i < testsCount; ++i )
			{
				solvers[i] = new Solution();
				solvers[i].ReadData();
			}

			int done = 0;
			if ( UseMultiThreading )
			{
				solvers.AsParallel().WithDegreeOfParallelism( Math.Min( Environment.ProcessorCount, 2 ) - 1 ).ForAll(
					solver => { solver.Solve(); Console.Title = ( ++done ).ToString() + " of " + testsCount; } );
			}
			else
			{
				for ( int i = 0; i < testsCount; ++i )
				{
					solvers[i].Solve();
					Console.Title = ( ++done ).ToString() + " of " + testsCount;
				}
			}
			for ( int i = 0; i < testsCount; ++i )
			{
				Out.Write( string.Format( "Case #{0}: ", i + 1 ) );
				solvers[i].WriteAnswer();
			}
			Out.Flush();
			if ( UseStandardIO )
			{
				Console.ReadLine();
			}
			else
			{
				Out.Close();
			}
		}

		static TextWriter Out { get { return _outputStream; } }

		private static TextReader _inputStream;
		private static TextWriter _outputStream;

		public BigInteger NextBigInteger()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return BigInteger.Parse( token );
		}

		public double NextDouble()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return double.Parse( token, CultureInfo.InvariantCulture );
		}

		public long NextLong()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return long.Parse( token );
		}

		public int NextInt()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return int.Parse( token );
		}

		private static readonly Queue<string> Tokens = new Queue<string>();
		public string NextToken()
		{
			if ( Tokens.Count > 0 )
			{
				return Tokens.Dequeue();
			}
			while ( Tokens.Count == 0 )
			{
				var line = _inputStream.ReadLine();
				if ( line == null ) return null;
				foreach ( var token in line.Split( _whiteSpaces, StringSplitOptions.RemoveEmptyEntries ) )
				{
					Tokens.Enqueue( token );
				}
			}
			return Tokens.Count == 0 ? null : Tokens.Dequeue();
		}

		private readonly char[] _whiteSpaces = { ' ', '\r', '\n', '\t' };

		static void Main()
		{
			new Thread( new Solution().run, 64 * 1024 * 1024 ).Start();
		}

		#endregion
	}
}

namespace kp.Algo { }
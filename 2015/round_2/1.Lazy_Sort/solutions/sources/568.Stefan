#ifdef ONLINE_JUDGE
	#include <bits/stdc++.h>
#else
	#include <algorithm>
	#include <bitset>
	#include <cassert>
	#include <cstdio>
	#include <cstring>
	#include <iostream>
	#include <map>
	#include <set>
	#include <stack>
	#include <string>
	#include <utility>
	#include <vector>
	#include <cstdlib>
#endif

using namespace std;

	// lambda : [] (int a, int b) -> bool { body return }
	// string r_str = R"(raw string)"

#define mp make_pair
#define eb emplace_back
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define BASE 73
#define NMAX 10000
#define NMAX2 20001
#define MOD1 1000000007
#define ALL(V) (V).begin(), (V).end()
#define ALLR(V) (V).rbegin(), (V).rend()
#define CRLINE Duxar(__LINE__);
#define SHOWME(x) cerr << __LINE__ << ": " << #x << " = " << (x) << endl;
#define ENTER putchar('\n');

void Duxar(int _this_line) {
#ifndef ONLINE_JUDGE
	printf("\n . . . . . . . . . . . . . Passed line - %d\n", _this_line);
#endif
}

template <class T>
void ReadNo(T &_value) {
	T sign = 1;
	char ch;
	_value = 0;
	while(!isdigit(ch = getchar())) {
		(ch == '-') && (sign = -1);
	}
	do {
		_value = _value * 10 + (ch - '0');
	} while(isdigit(ch = getchar()));
	_value *= sign;
}

template <class T>
void AddNr(T &a, T b) {
	a = a + b;
	while (a >= MOD1) {
		a -= MOD1;
	}
	while (a < 0) {
		a += MOD1;
	}
}

struct step {
	int L, R, T, B;
};


void Solve();

int main(int no_arguments, char **arguments){
	if (no_arguments > 1) {
		freopen(arguments[1], "r", stdin);
		freopen("answer.cpp", "w", stdout);
	}
	else {
		freopen("input.cpp", "r", stdin);
	}
	
	int T;
	ReadNo(T);
	for (int i = 1; i <= T; ++i) {
		printf("Case #%d: ", i);
		Solve();
	}
	
	return 0;
}

void Solve() {
	int N, i;
	step aux, new_aux;
	vector <int> values;
	deque <step> deq;
	map <pair <int, int>, bool> visited;
	
	ReadNo(N);
	values.resize(N + 1);
	for (i = 1; i <= N; ++i) {
		ReadNo(values[i]);
	}
	
	aux.L = 2;
	aux.R = N;
	aux.T = aux.B = values[1];
	deq.pb(aux);
	visited[mp(2, N)] = true;
	
	aux.L = 1;
	aux.R = N - 1;
	aux.T = aux.B = values[N];
	deq.pb(aux);
	visited[mp(1, N - 1)] = true;
	
	while (!deq.empty()) {
		new_aux = deq.front();
		deq.pop_front();
		if (new_aux.L > new_aux.R || new_aux.R < new_aux.L) {
			printf("yes\n");
			return;
		}
		
		aux = new_aux;
		if (values[aux.L] == aux.T - 1) {
			aux.T--;
			aux.L++;
			if (visited.find(mp(aux.L, aux.R)) == visited.end()) {
				deq.pb(aux);
				visited[mp(aux.L, aux.R)] = true;
			}
		}
		
		aux = new_aux;
		if (values[aux.L] == aux.B + 1) {
			aux.B++;
			aux.L++;
			if (visited.find(mp(aux.L, aux.R)) == visited.end()) {
				deq.pb(aux);
				visited[mp(aux.L, aux.R)] = true;
			}
		}
		
		aux = new_aux;
		if (values[aux.R] == aux.B + 1) {
			aux.B++;
			aux.R--;
			if (visited.find(mp(aux.L, aux.R)) == visited.end()) {
				deq.pb(aux);
				visited[mp(aux.L, aux.R)] = true;
			}
		}
		
		aux = new_aux;
		if (values[aux.R] == aux.T - 1) {
			aux.T--;
			aux.R--;
			if (visited.find(mp(aux.L, aux.R)) == visited.end()) {
				deq.pb(aux);
				visited[mp(aux.L, aux.R)] = true;
			}
		}
	}
	
	printf("no\n");
	
}

import java.io.*;
import java.util.*;

public class LazySort {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	
	static boolean can(int[] a, int fst) {
		int n = a.length;
		int i = 0;
		int j = n - 1;
		int min, max;
		if (fst == 0) {
			i++;
			min = max = a[0];
		} else {
			j--;
			min = max = a[n - 1];
		}
		while (i <= j) {
			if (a[i] == min - 1) {
				i++;
				min--;
			} else if (a[i] == max + 1) {
				i++;
				max++;
			} else if (a[j] == min - 1) {
				j--;
				min--;
			} else if (a[j] == max + 1) {
				j--;
				max++;
			} else {
				return false;
			}
		}
		return true;
	}

	void solve() throws IOException {
		int n = nextInt();
		int[] a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextInt() - 1;
		}
		boolean ret = can(a, 0) || can(a, n - 1);
		out.println(ret ? "yes" : "no");
	}

	LazySort() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "lazy_sort";
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new LazySort();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
import java.io.*;
import java.util.*;
import java.math.BigInteger;
import java.util.Map.Entry;
import static java.lang.Math.*;

public class A {

	final static String inputFileName = "lazy_sort.txt";
	final static String outputFileName = "output.txt";

	boolean calcSlow(int[] p) {
		int n = p.length, m = 1;
		int[] move = new int[n];
		int[] arr = new int[n * 4];

		for (int i = 0; i < n; i++) {
			m *= 4;
			move[i] = (p[i] + i + 23) % 4;
		}
		for (int s = 0; s < m; s++) {
			int l = 2 * n, r = l + 1;
			int h = 0, t = n - 1;

			Arrays.fill(arr, n);

			for (int i = 0; i < n; i++) {
				if (move[i] == 3) {
					move[i] = 0;
				} else {
					++move[i];
					break;
				}
			}

			for (int i = 0; i < n; i++) {
				switch (move[i]) {
				case 0: {
					arr[l--] = p[h++];
				}
					break;
				case 1: {
					arr[l--] = p[t--];
				}
					break;
				case 2: {
					arr[r++] = p[h++];
				}
					break;
				default: {
					arr[r++] = p[t--];
				}
					break;
				}
			}

			l++;
			r--;

			boolean sort = true;
			for (int i = l; i < r && sort; i++) {
				sort &= arr[i] < arr[i + 1];
			}

			if (sort) {
				return true;
			}

		}

		return false;
	}

	boolean calc(int[] p, boolean m) {
		int n = p.length, l = 0, r = n - 1, x, y;

		if (m) {
			x = y = p[l++];
		} else {
			x = y = p[r--];
		}

		for (int i = 1; i < n; i++) {
			if (p[l] == x - 1) {
				x = p[l++];
				continue;
			}

			if (p[r] == y + 1) {
				y = p[r--];
				continue;
			}

			if (p[r] == x - 1) {
				x = p[r--];
				continue;
			}

			if (p[l] == y + 1) {
				y = p[l++];
				continue;
			}

			return false;
		}

		return true;
	}

	boolean calc(int[] p) {
		return calc(p, true) || calc(p, false);
	}

	void run() {
		int tests = nextInt();
		for (int test = 1; test <= tests; test++) {
			int n = nextInt();
			out.printf("Case #%d: %s%n", test, calc(nextArray(n)) ? "yes" : "no");
		}

	}

	int[][] nextMatrix(int n, int m) {
		int[][] matrix = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				matrix[i][j] = nextInt();
		return matrix;
	}

	String next() {
		while (!st.hasMoreTokens())
			st = new StringTokenizer(nextLine());
		return st.nextToken();
	}

	boolean hasNext() {
		while (!st.hasMoreTokens()) {
			String line = nextLine();
			if (line == null) {
				return false;
			}
			st = new StringTokenizer(line);
		}
		return true;
	}

	int[] nextArray(int n) {
		int[] array = new int[n];
		for (int i = 0; i < n; i++) {
			array[i] = nextInt();
		}
		return array;
	}

	int nextInt() {
		return Integer.parseInt(next());
	}

	long nextLong() {
		return Long.parseLong(next());
	}

	double nextDouble() {
		return Double.parseDouble(next());
	}

	String nextLine() {
		try {
			return in.readLine();
		} catch (IOException err) {
			return null;
		}
	}

	static PrintWriter out;
	static BufferedReader in;
	static StringTokenizer st = new StringTokenizer("");
	static Random rnd = new Random();

	public static void main(String[] args) throws IOException {
		in = new BufferedReader(new FileReader(inputFileName));
		out = new PrintWriter(new File(outputFileName));
		new A().run();
		out.close();
		in.close();
	}
}
import java.util.*;
import java.io.*;

public class lazysort {
	private static Student head;
	private static Student tail;
	private static String[] students;
	private static int[] ids;

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader("lazy_sort.txt"));
		String cas = in.readLine();
		int n = Integer.parseInt(cas);
		BufferedWriter out = new BufferedWriter(new FileWriter("lazy_sort_answer.txt"));
		// ids = new ArrayList<Integer>();
    	// for (int i = 1; i < 50000; i++ ) ids.add(i);
    	// Collections.shuffle(ids);

    	
		for (int x = 0; x < n; ++x) {
			int num = Integer.parseInt(in.readLine());
			students = in.readLine().split(" ");
			ids = new int[num];
			for (int i = 0; i < students.length; ++i) ids[i] = Integer.parseInt(students[i]); 
			int left = 0, right = ids.length-1;	
			boolean result = pick(ids, left, right, true) || pick(ids, left, right, false);
    		// System.out.println("Case #"+": " + result);
    		
			System.out.print("Case #"+(x+1)+": "+((result) ? "yes" : "no") + "\n");
			
			out.write("Case #"+(x+1)+": "+((result) ? "yes" : "no") + "\n");
			
		}

		in.close();
		out.close();
	}

	
	public static boolean pick(int[] ids, int left, int right, boolean headOrTailFirst) {
		head = null;
		tail = null;
		if (headOrTailFirst) {
			insertToHead(new Student(ids[left++]));
		} else {
			insertToHead(new Student(ids[right--]));
		}
		// System.out.println(left + " "+ right);
		// print();
		while (left <= right) {
			if (ids[left] == (head.id-1)) {
				insertToHead(new Student(ids[left++]));
			} else if (ids[left] == (tail.id+1)) {
				insertToTail(new Student(ids[left++]));
			} else if (ids[right] == (head.id-1)) {
				insertToHead(new Student(ids[right--]));
				
			} else if (ids[right] == (tail.id+1)) {
				insertToTail(new Student(ids[right--]));
			} else {
				// print();
				return false;
			}
		}
		// print();
		return true;
	}
	
	private static void insertToHead(Student cur) {  
    	cur.next = head;  
     	cur.pre = null;  
     	if (head != null) head.pre = cur;  
     	head = cur;  
     	if (tail == null) tail = cur;  
  	}  

  	private static void insertToTail(Student cur) {
  		cur.pre = tail;
  		cur.next = null;
  		if (head == null) head = cur;
  		if (tail != null) tail.next = cur;
  		tail = cur;
  	}

  	private static void print() {  
    	System.out.print("head->");  
    	for (int id : ids) {
    		System.out.print(id);  
    		System.out.print("->");  
    	}
    	System.out.println(" (tail)");  

    	Student cur = head;  
    	System.out.print("head->");  
    	while (cur != null) {  
       		System.out.print(cur.id);  
       		if (cur == tail) System.out.print(" (tail)");  
       		else System.out.print("->");  
       		cur = cur.next;  
     	}  
    	System.out.println("");  
   	} 


}

class Student {
	Student pre = null, next = null; 
	int id;
	Student (int i) {
		this.id = i;
	}
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class A {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    public void solveCase() throws IOException {
        int N = nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = nextInt();
        }
        boolean good1 = go(A, 1, N-1, A[0], A[0]);
        boolean good2 = go(A, 0, N-2, A[N-1], A[N-1]);
        if (good1 || good2) {
            System.out.print("yes");
        } else {
            System.out.print("no");
        }
    }

    public boolean go(int[] A, int l, int r, int t, int b) {
        int cnt = 0;
        while (l <= r) {
            if (A[l] == t - 1) {
                t = A[l++];
            } else if (A[l] == b + 1) {
                b = A[l++];
            } else if (A[r] == t - 1) {
                t = A[r--];
            } else if (A[r] == b + 1) {
                b = A[r--];
            } else {
                return false;
            }
            cnt++;
        }
        if (cnt != A.length - 1) {
            throw new RuntimeException();
        }
        return true;
    }


    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            System.out.print("Case #" + t + ": ");
            solveCase();
            System.out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new A().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

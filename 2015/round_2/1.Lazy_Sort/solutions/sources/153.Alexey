import java.io.*;
import java.util.*;
import java.math.*;

public class LazySort implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 1; test <= tests; test++) {
			out.print("Case #" + test + ": ");
			solveOne();
			out.println();
		}
	}

	private void solveOne() throws IOException {
		int numbersCount = nextInt();
		int[] numbers = new int[numbersCount];
		for (int i = 0; i < numbersCount; i++) {
			numbers[i] = nextInt();
		}
		boolean can = fromStart(numbers) || fromEnd(numbers);
		out.print(can ? "yes" : "no");
	}

	private boolean fromEnd(int[] numbers) {
		int numbersCount = numbers.length;
		int currentLeft = numbers[numbersCount - 1] - 1, currentRight = numbers[numbersCount - 1] + 1;
		int indexLeft = 0, indexRight = numbersCount - 2;
		while (indexLeft <= indexRight) {
			if (numbers[indexLeft] == currentLeft) {
				++indexLeft;
				--currentLeft;
			} else if (numbers[indexLeft] == currentRight) {
				++indexLeft;
				++currentRight;
			} else if (numbers[indexRight] == currentLeft) {
				--indexRight;
				--currentLeft;
			} else if (numbers[indexRight] == currentRight) {
				--indexRight;
				++currentRight;
			} else {
				return false;
			}
		}
		return true;
	}

	private boolean fromStart(int[] numbers) {
		int numbersCount = numbers.length;
		int currentLeft = numbers[0] - 1, currentRight = numbers[0] + 1;
		int indexLeft = 1, indexRight = numbersCount - 1;
		while (indexLeft <= indexRight) {
			if (numbers[indexLeft] == currentLeft) {
				++indexLeft;
				--currentLeft;
			} else if (numbers[indexLeft] == currentRight) {
				++indexLeft;
				++currentRight;
			} else if (numbers[indexRight] == currentLeft) {
				--indexRight;
				--currentLeft;
			} else if (numbers[indexRight] == currentRight) {
				--indexRight;
				++currentRight;
			} else {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {
		new Thread(null, new LazySort(), "yarrr", 1 << 28).start();
	}

	public void run() {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
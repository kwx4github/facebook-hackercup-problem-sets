#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <climits>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <list>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

#define FORIT(i,c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define FV(i,s,v) for (i = int(s); i < v.size(); i++)
#define FOR(i,s,e) for (i = int(s); i < int(e); i++)
#define ALL(c) (c).begin(), (c).end()
#define ALLR(c) (c).rbegin(), (c).rend()

#define INF 1070000000LL
#define MOD 1000000007LL
#define EPS 1e-9

typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
typedef pair<int, int> PI;

int T, N ;
int a[50002] ;
int top, bottom ;
int mx, mn ;

int solve (int top, int bottom, int mn, int mx) ;

int main() {
	int i, j ;

	cin >> T ;

	FOR (i, 0, T){
		cin >> N ;
		FOR (j, 0, N){
			cin >> a[j] ;
		}

		N-- ;
		if (solve(1, N, a[0], a[0]) || solve (0, N-1, a[N], a[N]))
			cout << "Case #" << i+1 << ": yes" << endl ;
		else
			cout << "Case #" << i+1 << ": no" << endl ;
	}
	return 0;
}

int solve (int top, int bottom, int mn, int mx)
{
	while (top <= bottom){
		if (a[top] == mn - 1){
			mn = a[top] ;
			top++ ;
		}
		else if (a[top] == mx+1){
			mx = a[top] ;
			top++ ;
		}
		else if (a[bottom] == mn - 1){
			mn = a[bottom] ;
			bottom-- ;
		}
		else if (a[bottom] == mx + 1){
			mx = a[bottom] ;
			bottom-- ;
		}
		else
			return 0 ;
	}

	return 1 ;
}









#include <cstdio>
#include <cassert>
#include <list>
using namespace std;


const int N = 50500;

int A[N];

bool go(int* A, int n, list<int> L)
{
    int l = 0, r = n - 1;
    while (l <= r)
    {
        if (A[l] == *L.begin() - 1) {
            L.push_front(A[l++]);
        } else if (A[l] == *L.rbegin() + 1) {
            L.push_back(A[l++]);
        } else if (A[r] == *L.begin() - 1) {
            L.push_front(A[r--]);
        } else if (A[r] == *L.rbegin() + 1) {
            L.push_back(A[r--]);
        } else {
            return false;
        }
    }
    assert(l == r + 1);
    assert(*L.begin() == 1 && *L.rbegin() == n + 1);
    return true;
}

void solve(int cs)
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d", &A[i]);
    list<int> L1;
    list<int> L2;
    L1.push_back(A[0]);
    bool res1 = go(A + 1, n - 1, L1);
    L2.push_back(A[n - 1]);
    bool res2 = go(A, n - 1, L2);
    if (res1 || res2)
        printf("Case #%d: yes\n", cs);
    else
        printf("Case #%d: no\n", cs);
}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve(i + 1);
}

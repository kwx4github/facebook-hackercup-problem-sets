#include <iostream>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
#include <deque>
#include <queue>
#include <list>
#include <cassert>

size_t dist(size_t x, size_t y)
{
    return std::max(x, y) - std::min(x, y);
}

bool isSortableFB(const std::vector<size_t>& numbers)
{
    std::deque<size_t> in(numbers.begin(), numbers.end());
    std::deque<size_t> out;
    out.push_front(in.back());
    in.pop_back();
    while (!in.empty()) {
        auto of = out.front();
        auto ob = out.back();
        auto f = in.front();
        auto b = in.back();
        
        bool flag = false;
        
        if (f < of) {
            if (dist(f, of) == 1) {
                assert(f + 1 == of);
                out.push_front(f);
                in.pop_front();
                flag = true;
            }
        } else if (f > ob) {
            if (dist(f, ob) == 1) {
                assert(ob + 1 == f);
                out.push_back(f);
                in.pop_front();
                flag = true;
            }
        }

        if (in.empty()) {
            return true;
        }

        if (b < of) {
            if (dist(b, of) == 1) {
                assert(b + 1 == of);
                out.push_front(b);
                in.pop_back();
                flag = true;
            }        
        } else if (b > ob) {
            if (dist(b, ob) == 1) {
                assert(ob + 1 == b);
                out.push_back(b);
                in.pop_back();
                flag = true;
            }
        }
        
        if (!flag) {
            return false;
        }
    }
    return true;
}

bool isSortableFF(const std::vector<size_t>& numbers)
{
    std::deque<size_t> in(numbers.begin(), numbers.end());
    std::deque<size_t> out;
    out.push_front(in.front());
    in.pop_front();
    while (!in.empty()) {
        auto of = out.front();
        auto ob = out.back();
        auto f = in.front();
        auto b = in.back();
        
        bool flag = false;
        
        if (f < of) {
            if (dist(f, of) == 1) {
                assert(f + 1 == of);
                out.push_front(f);
                in.pop_front();
                flag = true;
            }
        } else if (f > ob) {
            if (dist(f, ob) == 1) {
                assert(ob + 1 == f);
                out.push_back(f);
                in.pop_front();
                flag = true;
            }
        }

        if (in.empty()) {
            return true;
        }

        if (b < of) {
            if (dist(b, of) == 1) {
                assert(b + 1 == of);
                out.push_front(b);
                in.pop_back();
                flag = true;
            }        
        } else if (b > ob) {
            if (dist(b, ob) == 1) {
                assert(ob + 1 == b);
                out.push_back(b);
                in.pop_back();
                flag = true;
            }
        }
        
        if (!flag) {
            return false;
        }
    }
    return true;
}

bool isSortable(const std::vector<size_t>& numbers)
{
    return (isSortableFF(numbers) || isSortableFB(numbers));
}

int main()
{
    size_t T;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        size_t N;
        std::cin >> N;
        std::vector<size_t> numbers;
        for (size_t i = 0; i < N; ++i) {
            size_t x;
            std::cin >> x;
            numbers.push_back(x);
        }
        std::cout << "Case #" << (t + 1) << ": " << (isSortable(numbers) ? "yes": "no") << std::endl;
    }
    return 0;
}



#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

int ary[(int)1e6 + 11];

bool can(int a, int b, int le, int ri) {
    while (true) {
        if (!(a<=b)) return true;

        if (ary[a] == le - 1) {
            le--;
            a++;
        }
        else if (ary[a] == ri + 1) {
            ri++;
            a++;
        }
        else if (ary[b] == le - 1) {
            le--;
            b--;
        }
        else if (ary[b] == ri + 1) {
            ri++;
            b--;
        }
        else return false;
    }
}

void solve() {
    int n;
    scanf("%d", &n);
    rep (i, n) scanf("%d", &ary[i]);

    bool ok = can(0, n - 2, ary[n-1], ary[n-1]);
    ok |= can(1, n - 1, ary[0], ary[0]);

    if (ok)
        printf("yes");
    else
        printf("no");

}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    scanf("%d", &t);
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

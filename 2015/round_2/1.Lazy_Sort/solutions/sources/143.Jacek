#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void GEN(int a, int b, int c, int r, int k, int x[]) {
	x[0] = a;
	FOR(i,1,k) x[i] = (LL(x[i - 1]) * b + c) % r;
}

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}




int a[55555];

void oneCase() {
	INT(n);
	REP(i,n) scanf("%d\n", &a[i]);
	int p = a[0], q = a[0], x = 1, y = n-1;
	while (y >= x) {
		if (a[x] == p - 1) {
			++x;
			--p;
		} else if (a[x] == q + 1) {
			++x;
			++q;
		} else if (a[y] == p - 1) {
			--y;
			--p;
		} else if (a[y] == q + 1) {
			--y;
			++q;
		} else break;
	}
	if (y < x) {
		printf("yes\n");
		return;
	}
	p = a[n-1];
	q = a[n-1];
	x = 0;
	y = n-2;
	while (y >= x) {
		if (a[x] == p - 1) {
			++x;
			--p;
		} else if (a[x] == q + 1) {
			++x;
			++q;
		} else if (a[y] == p - 1) {
			--y;
			--p;
		} else if (a[y] == q + 1) {
			--y;
			++q;
		} else break;
	}
	if (y < x) printf("yes\n");
	else printf("no\n");
}

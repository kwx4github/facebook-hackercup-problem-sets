#include <set>
#include <map>
#include <list>
#include <ctime>
#include <stack>
#include <cmath>
#include <queue>
#include <bitset>
#include <vector>
#include <cstdio>
#include <climits>
#include <cstring>
#include <iomanip>
#include <utility>
#include <sstream>
#include <string.h>
#include <unistd.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define PP pair<int, int>
#define endl "\n"
#define MM 1000
#define sqr(x) ((x) * (x))
#define ABS(x) ((x < 0) ? -(x) : (x))
#define eps (1e-9)
#define equal(a, b) (ABS(a - b) < eps)
typedef unsigned long long ULL;
typedef long long LL;
typedef pair< int, PP > Edge;

template<class T> string tostring(T x) { ostringstream out; out<<x; return out.str();}
LL toint(string s) { istringstream in(s); LL x; in>>x; return x; }

int main() {
	freopen("lazy_sort.txt", "r", stdin);
	freopen("lazy_sort_output.txt", "w", stdout);
	int T, c = 0;
	cin >> T;
	while(T--) {
		c++;
		int n, tmp;
		vector<int> vec, ans;
		cin >> n;
		for(int i = 0; i < n; i++) {
			cin >> tmp;
			vec.pb(tmp);
		}
		if(vec.size() == 1) {
			cout << "Case #" << c << ": " << "yes" << endl;
			continue;
		}
		bool f = false;
		ans.pb(vec.back());
		vec.pop_back();
		while(!vec.empty()) {
			int front = ans.front();
			int back = ans.back();	
			int fr = vec.front();
			int bc = vec.back();
			if(front - fr == 1)	 {
				vec.erase(vec.begin());
				vector<int> tmp;
				tmp.pb(fr);
				for(int i = 0; i < ans.size(); i++)
					tmp.pb(ans[i]);
				ans = tmp;
			} else if(back - fr == -1) {
				vec.erase(vec.begin());
				ans.pb(fr);
			} else if(front - bc == 1) {
				vec.pop_back();
				vector<int> tmp;
				tmp.pb(bc);
				for(int i = 0; i < ans.size(); i++)
					tmp.pb(ans[i]);
				ans = tmp;
			} else if(back - bc == -1) {
				vec.pop_back();
				ans.pb(bc);
			} else {
				cout << "Case #" << c << ": " << "no" << endl;
				f = true;
				break;
			}
		}
		if(!f) {
			cout << "Case #" << c << ": " << "yes" << endl;
		}
	}
	return 0;
}


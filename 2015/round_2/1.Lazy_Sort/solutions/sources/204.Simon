import java.util.*;
import java.io.*;

public class ProblemA
{
	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{
			final int N = in.getInt();
			final int[] v = new int[N];
			for(int i = 0; i<N; i++) v[i] = in.getInt();

			boolean ans = N>3 ? false : true;
			if(!ans)
			{
				LinkedList<Integer> qu = new LinkedList<Integer>();
				int front = 1, back = N-1;
				qu.add(v[0]); ans = true;
				while(front<=back && ans)
				{
					final int a = v[front], b = v[back];
					if(a+1==qu.getFirst()){ qu.addFirst(v[front++]); continue; }
					if(a-1==qu.getLast()){ qu.addLast(v[front++]); continue; }
					if(b+1==qu.getFirst()){ qu.addFirst(v[back--]); continue; }
					if(b-1==qu.getLast()){ qu.addLast(v[back--]); continue; }
					ans = false;
				}

				if(!ans){qu.clear();
				front = 0; back = N-1;
				qu.add(v[back--]); ans = true;
				while(front<=back && ans)
				{
					final int a = v[front], b = v[back];
					if(a+1==qu.getFirst()){ qu.addFirst(v[front++]); continue; }
					if(a-1==qu.getLast()){ qu.addLast(v[front++]); continue; }
					if(b+1==qu.getFirst()){ qu.addFirst(v[back--]); continue; }
					if(b-1==qu.getLast()){ qu.addLast(v[back--]); continue; }
					ans = false;
				}}
			}

			out.println("Case #"+t+": "+(ans ? "yes" : "no")); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <cassert>
#include <iostream>
#include <cstdlib>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

const int MOD=1000000000;

typedef long long ll;

struct Node
{
	//=fix
	int fix;
	//+incA+k incB
	int incA, incB;

	int sum;
	int cnt[2][2];
};

struct RandomGenerator
{
	ll a,b;
	ll x,y,z;
	ll mod;
	ll inc;
	RandomGenerator(istream &in, ll mod, ll inc):mod(mod), inc(inc)
	{
		in>>a>>b>>x>>y>>z;
	}
	ll next()
	{
		ll tmp=(x*a+y*b+z)%mod+inc;
		swap(a,b);
		swap(b,tmp);
		return tmp;
	}
};

vector<Node> tree;
int ds;

int getds(int n)
{
	n--;
	n|=n>>1;
	n|=n>>2;
	n|=n>>4;
	n|=n>>8;
	n|=n>>16;
	return n+1;
}


void fix(int cur, int val, int cl, int cr)
{
	ll len=(cr-cl+1);
	Node &node=tree[cur];
	node.sum=val*len%MOD;
	node.fix=val;
	node.incA=node.incB=0;

	// [cl, cr]-> cl+2, cr+2
	node.cnt[0][val%2]=(cr+2)/2-(cl+1)/2;
	node.cnt[0][1^(val%2)]=0;
	node.cnt[1][val%2]=len-node.cnt[0][val%2];
	node.cnt[1][1^(val%2)]=0;
}

void add(int cur, int vA, int vB, int cl, int cr)
{
	ll len=(cr-cl+1);
	Node& node=tree[cur];
	node.sum+=(vA*len%MOD+(len*(len-1)/2)%MOD*vB)%MOD; node.sum%=MOD;
	node.incA+=vA; node.incA%=MOD;
	node.incB+=vB; node.incB%=MOD;

	if(vA%2==1)
		swap(node.cnt[cl%2][0], node.cnt[cl%2][1]);
	if((vA+vB)%2==1)
		swap(node.cnt[(cl%2)^1][0],node.cnt[(cl%2)^1][1]);
}

void push(int cur, int cl, int cr)
{
	Node& node=tree[cur];
	int mid=(cl+cr)/2;
	if(node.fix!=-1)
	{
		fix(2*cur, node.fix, cl, mid);
		fix(2*cur+1, node.fix, mid+1, cr);
		node.fix=-1;
	}
	if(node.incA || node.incB)
	{
		add(2*cur, node.incA,                         node.incB, cl, mid);
		add(2*cur+1, (node.incA+(mid-cl+1)*ll(node.incB))%MOD, node.incB, mid+1, cr );
		node.incA=0;
		node.incB=0;
	}
}

void update(int cur)
{
	Node& node=tree[cur];
	assert(node.fix==-1 && node.incA==0 && node.incB==0);
	Node& l=tree[2*cur];
	Node& r=tree[2*cur+1];
	node.sum=(l.sum+r.sum)%MOD;
	REP(i,2) REP(j,2)
		node.cnt[i][j]=l.cnt[i][j]+r.cnt[i][j];
}

int addArifm(int cur, int cl, int cr, int l, int r, int a, int b)
{
	if(l<=cl && cr<=r)
	{
		add(cur, a,b,cl,cr);
		return cr-cl+1;
	}
	else if(r<cl || cr<l)
		return 0;
	else
	{
		push(cur, cl, cr);
		int res=0;
		int mid=(cl+cr)/2;
		res+=addArifm(cur*2, cl, mid, l, r, a,b);
		res+=addArifm(cur*2+1, mid+1, cr, l, r, (a+ll(res)*b)%MOD, b);
		update(cur);
		return res;
	}
}

void fix(int cur, int cl, int cr, int l, int r, int val)
{
	if(l<=cl && cr<=r)
	{
		fix(cur,val, cl, cr);
	}
	else if(r<cl || cr<l)
		return;
	else
	{
		push(cur, cl, cr);
		int mid=(cl+cr)/2;
		fix(2*cur, cl, mid, l,r,val);
		fix(2*cur+1, mid+1, cr, l,r,val);
		update(cur);
	}
}

int sum(int cur, int cl, int cr, int l, int r)
{
	if(l<=cl && cr<=r)
		return tree[cur].sum;
	else if(r<cl || cr<l)
		return 0;
	else
	{
		push(cur,cl,cr);
		int mid=(cl+cr)/2;
		return (sum(2*cur, cl, mid, l,r)+sum(2*cur+1, mid+1, cr, l, r))%MOD;
	}
}

int countOdd(int cur, int cl, int cr, int l, int r)
{
	if(l<=cl && cr<=r)
		return tree[cur].cnt[0][1]+tree[cur].cnt[1][1];
	else if(r<cl || cr<l)
		return 0;
	else
	{
		push(cur, cl, cr);
		int mid=(cl+cr)/2;
		return (countOdd(2*cur, cl, mid, l,r)+countOdd(2*cur+1, mid+1, cr, l,r));
	}
}

int solve()
{
	tree.clear();
	int n,m;
	scanf("%d%d",&n,&m);
	RandomGenerator Sgen(cin, MOD,0);
	RandomGenerator Ogen(cin, 4,1);
	RandomGenerator Agen(cin, n,1);
	RandomGenerator Bgen(cin, n,1);
	RandomGenerator Cgen(cin, MOD,0);
	RandomGenerator Dgen(cin, MOD,0);
	ll res=0;
	ds=getds(n);
	tree.resize(2*ds);
	for(int i=0;i<n;i++)
		fix(i+ds,Sgen.next(),i,i);
	for(int i=ds-1;i>0;i--)
	{
		tree[i].fix=-1;
		tree[i].incA=tree[i].incB=0;
		update(i);
	}
	for(int i=0;i<m;i++)
	{
		ll O=Ogen.next();
		ll A=Agen.next()-1;
		ll B=Bgen.next()-1;
		ll C=Cgen.next();
		ll D=Dgen.next();

		int l1=A, r1=A+B;
		int l2=-1, r2=-1;
		if(r1>=n)
		{
			l2=0;
			r2=r1-n;
			r1=n-1;
		}

		if(O==1)
		{
			res+=(B+1)*C%MOD+(B*(B+1)/2)%MOD*D%MOD;
			res%=MOD;
			addArifm(1,0,ds-1,l1,r1,C,D);
			if(l2!=-1)
				addArifm(1,0,ds-1,l2,r2,(C+(r1-l1+1)*D)%MOD,D);
		}
		else if(O==2)
		{
			res+=C*(B+1)%MOD+sum(1,0,ds-1,l1,r1);
			fix(1,0,ds-1,l1,r1,C);
			if(l2!=-1)
			{
				res+=sum(1,0,ds-1,l2,r2);
				fix(1,0,ds-1,l2,r2,C);
			}
			res%=MOD;
		}
		else if(O==3)
		{
			res+=sum(1,0,ds-1,l1,r1);
			if(l2!=-1)
			{
				res+=sum(1,0,ds-1,l2,r2);
			}
			res%=MOD;
		}
		else if(O==4)
		{
			res+=countOdd(1,0,ds-1,l1,r1);
			if(l2!=-1)
			{
				res+=countOdd(1,0,ds-1,l2,r2);
			}
			res%=MOD;
		}
		else
			throw;
	}
	return res;
}

int main()
{
	int t;
	scanf("%d",&t);
	for(int test=1;test<=t;test++)
		printf("Case #%d: %d\n",test, solve());
}

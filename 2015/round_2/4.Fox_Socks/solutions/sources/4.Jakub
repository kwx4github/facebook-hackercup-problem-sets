
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

const int MD = (int)1e9;

inline int ls(int x) { return x << 1; }
inline int rs(int x) { return (x << 1) + 1; }

int mul(int a, int b) {
    return (a * (LL)b) % MD;
}

int ad(int a, int b) {
    return (a + b) % MD;
}

int sum_seq(int l, int r) {
    return ((r * (LL)(r + 1)) / 2 - (l * (LL)(l - 1)) / 2) % MD;
}

struct Data {
    int l;
    int r;

    int sum;
    int n_odd_oddind;
    int n_odd_evenind;

    int add_const;
    int add_times_ind;

    bool reset;
    int new_val;

    void init(int c) {
        l = r = c;
        sum = 0;
        n_odd_oddind = 0;
        n_odd_evenind = 0;
        add_const = 0;
        add_times_ind = 0;
        reset = false;
    }

    void refresh() {
        int n_oddind = (r - l + 1) / 2 + (l == r && l % 2);
        int n_evenind = (r - l + 1) / 2 + (l == r && l % 2 == 0);
        assert(n_oddind + n_evenind == r - l + 1);
        if (reset) {
            sum = mul(r - l + 1, new_val);
            n_odd_oddind = (new_val % 2) ? n_oddind : 0;
            n_odd_evenind = (new_val % 2) ? n_evenind : 0;
        }
        sum = ad(sum, mul(r - l + 1, add_const));
        sum = ad(sum, mul(sum_seq(l, r), add_times_ind));
        if (add_const % 2) {
            n_odd_oddind = n_oddind - n_odd_oddind;
            n_odd_evenind = n_evenind - n_odd_evenind;
        }
        if (add_times_ind % 2) {
            n_odd_oddind = n_oddind - n_odd_oddind;
        }
    }
};

Data join(const Data& l, const Data& r) {
    Data res;
    res.l = l.l;
    res.r = r.r;
    res.sum = ad(l.sum, r.sum);
    res.n_odd_oddind = l.n_odd_oddind + r.n_odd_oddind;
    res.n_odd_evenind = l.n_odd_evenind + r.n_odd_evenind;
    res.add_const = 0;
    res.add_times_ind = 0;
    res.reset = false;
    return res;
}

Data t[5000005];

void fix(int x) {
    t[x].refresh();
    if (t[x].l != t[x].r) {
        REP (i, 2) {
            int son = (x << 1) + i;
            if (t[x].reset) {
                t[son].add_const = 0;
                t[son].add_times_ind = 0;
                t[son].reset = true;
                t[son].new_val = t[x].new_val;
            }
            t[son].add_const = ad(t[son].add_const, t[x].add_const);
            t[son].add_times_ind = ad(t[son].add_times_ind, t[x].add_times_ind);
        }
    }
    t[x].reset = false;
    t[x].add_const = 0;
    t[x].add_times_ind = 0;
}

typedef function<void(Data&)> Op;

void tree_do(int x, int cl, int cr, Op f) {
    fix(x);
    if (t[x].l == cl && t[x].r == cr) {
        f(t[x]);
        fix(x);
        return;
    }
    if (cl <= t[ls(x)].r) {
        tree_do(ls(x), cl, min(cr, t[ls(x)].r), f);
    }
    if (cr >= t[rs(x)].l) {
        tree_do(rs(x), max(cl, t[rs(x)].l), cr, f);
    }
    fix(ls(x));
    fix(rs(x));
    t[x] = join(t[ls(x)], t[rs(x)]);
}

Op summer(int *res) {
    return [res](Data& d) {
        *res = ad(*res, d.sum);
    };
}

Op odd_count(int *res) {
    return [res](Data& d) {
        *res += d.n_odd_oddind + d.n_odd_evenind;
    };
}

Op setter(int v) {
    return [v](Data& d) {
        d.add_const = 0;
        d.add_times_ind = 0;
        d.reset = true;
        d.new_val = v;
    };
}

Op adder(int cst, int times_ind) {
    return [cst, times_ind](Data& d) {
        d.add_const = ad(d.add_const, cst);
        d.add_times_ind = ad(d.add_times_ind, times_ind);
    };
}

int n;

void cycle_do(int A, int B, Op f) {
    int l = A;
    int r = A + B - 1;
    if (r > n) {
        tree_do(1, 1, r - n, f);
        assert(r - n < l);
        r = n;
    }
    tree_do(1, l, r, f);
}

int op1(int A, int B, int C, int D) {
    int res = mul(B, C);
    if (B > 1) {
        res = ad(res, mul(D, sum_seq(1, B - 1)));
    }
    int l = A;
    int r = A + B - 1;
    C = ad(C, MD - mul(l, D));
    cycle_do(A, B, adder(C, D));
    if (r > n) {
        cycle_do(1, r - n, adder(mul(n, D), 0));
    }
    return res;
}

int op2(int A, int B, int C) {
    int res = mul(C, B);
    cycle_do(A, B, summer(&res));
    cycle_do(A, B, setter(C));
    return res;
}

int op3(int A, int B) {
    int res = 0;
    cycle_do(A, B, summer(&res));
    return res;
}

int op4(int A, int B) {
    int res = 0;
    cycle_do(A, B, odd_count(&res));
    return res;
}

int dispatch(int O, int A, int B, int C, int D) {
    if (O == 1) {
        return op1(A, B, C, D);
    } else if (O == 2) {
        return op2(A, B, C);
    } else if (O == 3) {
        return op3(A, B);
    } else if (O == 4) {
        return op4(A, B);
    } else {
        assert(false);
    }
}

void read_vector(vector<int>& v, int len, int md, int a) {
    v.assign(len, 0);
    cin >> v[0];
    cin >> v[1];
    int x, y, z;
    cin >> x >> y >> z;
    FOR (i, 2, len) {
        v[i] = z % md;
        v[i] = (v[i] + (y * (LL)v[i - 1])) % md;
        v[i] = (v[i] + (x * (LL)v[i - 2])) % md;
        v[i] += a;
    }
}

int alg() {
    vector<int> S, O, A, B, C, D;
    int m;
    cin >> n >> m;
    read_vector(S, n, MD, 0);
    read_vector(O, m, 4, 1);
    read_vector(A, m, n, 1);
    read_vector(B, m, n, 1);
    read_vector(C, m, MD, 0);
    read_vector(D, m, MD, 0);
    int z = 1;
    while (z <= n) {
        z *= 2;
    }
    for (int i = z; i < z + z; ++i) {
        t[i].init(i - z + 1);
    }
    for (int i = z - 1; i >= 1; --i) {
        t[i] = join(t[ls(i)], t[rs(i)]);
    }
    REP (i, n) {
        cycle_do(i + 1, 1, setter(S[i]));
    }
    int res = 0;
    REP (i, m) {
        res = ad(res, dispatch(O[i], A[i], B[i], C[i], D[i]));
    }
    return res;
}

int main() {
    int d;
    cin >> d;
    FOR(i,1,d+1) {
        cout << "Case #" << i << ": " << alg() << endl;
    }
}

import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class D {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static final int MOD = 1000000000;
	
	static void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
//		System.err.println("TEST " + n + " " + m);
		int s1 = nextInt();
		int s2 = nextInt();
		int xs = nextInt();
		int ys = nextInt();
		int zs = nextInt();
		int o1 = nextInt();
		int o2 = nextInt();
		int xo = nextInt();
		int yo = nextInt();
		int zo = nextInt();
		int a1 = nextInt();
		int a2 = nextInt();
		int xa = nextInt();
		int ya = nextInt();
		int za = nextInt();
		int b1 = nextInt();
		int b2 = nextInt();
		int xb = nextInt();
		int yb = nextInt();
		int zb = nextInt();
		int c1 = nextInt();
		int c2 = nextInt();
		int xc = nextInt();
		int yc = nextInt();
		int zc = nextInt();
		int d1 = nextInt();
		int d2 = nextInt();
		int xd = nextInt();
		int yd = nextInt();
		int zd = nextInt();
		int depth = 0;
		while (n > 1 << depth) {
			++depth;
		}
		treeClear = new boolean[depth + 1][];
		treeAddConstant = new int[depth + 1][];
		treeAddLinear = new int[depth + 1][];
		treeSum = new int[depth + 1][];
		treeNumOddInOdd = new int[depth + 1][];
		treeNumOddInEven = new int[depth + 1][];
		for (int i = 0; i <= depth; i++) {
			treeClear[i] = new boolean[1 << (depth - i)];
			treeAddConstant[i] = new int[1 << (depth - i)];
			treeAddLinear[i] = new int[1 << (depth - i)];
			treeSum[i] = new int[1 << (depth - i)];
			treeNumOddInOdd[i] = new int[1 << (depth - i)];
			treeNumOddInEven[i] = new int[1 << (depth - i)];
		}
		for (int i = 0; i < n; i++) {
			addLinear(depth, 0, 0, 1 << depth, i, i + 1, s1, 0);
//			System.err.println("ELEM " + s1);
			int s3 = (int) (((long) xs * s1 + (long) ys * s2 + zs) % MOD);
			s1 = s2;
			s2 = s3;
		}
		int ans = 0;
		for (int it = 0; it < m; it++) {
			int from = a1 - 1;
			int to = a1 + b1 - 1;
			switch (o1) {
			case 1:
			{
				int ac = (int) (((c1 - (long) from * d1) % MOD + MOD) % MOD);
				int al = d1;
				if (to <= n) {
					addLinear(depth, 0, 0, 1 << depth, from, to, ac, al);
				} else {
					addLinear(depth, 0, 0, 1 << depth, from, n, ac, al);
					addLinear(depth, 0, 0, 1 << depth, 0, to - n, (int) ((ac + (long) n * al) % MOD), al);
				}
				ans = (int) ((ans + (long) ac * (to - from) + al * (((long) to * (to - 1) / 2 - (long) from * (from - 1) / 2) % MOD)) % MOD);
				break;
			}	
			case 2:
				if (to <= n) {
					ans = (int) (((long) ans + sum(depth, 0, 0, 1 << depth, from, to)) % MOD);
					clear(depth, 0, 0, 1 << depth, from, to);
					addLinear(depth, 0, 0, 1 << depth, from, to, c1, 0);
				} else {
					ans = (int) (((long) ans + sum(depth, 0, 0, 1 << depth, from, n) + sum(depth, 0, 0, 1 << depth, 0, to - n)) % MOD);
					clear(depth, 0, 0, 1 << depth, from, n);
					clear(depth, 0, 0, 1 << depth, 0, to - n);
					addLinear(depth, 0, 0, 1 << depth, from, n, c1, 0);
					addLinear(depth, 0, 0, 1 << depth, 0, to - n, c1, 0);
				}
				ans = (int) ((ans + (long) c1 * (to - from)) % MOD);
				break;
			case 3:
				if (to <= n) {
					ans = (int) (((long) ans + sum(depth, 0, 0, 1 << depth, from, to)) % MOD);
				} else {
					ans = (int) (((long) ans + sum(depth, 0, 0, 1 << depth, from, n) + sum(depth, 0, 0, 1 << depth, 0, to - n)) % MOD);
				}
				break;
			case 4:
				if (to <= n) {
					ans = (int) (((long) ans + numOdd(depth, 0, 0, 1 << depth, from, to)) % MOD);
				} else {
					ans = (int) (((long) ans + numOdd(depth, 0, 0, 1 << depth, from, n) + numOdd(depth, 0, 0, 1 << depth, 0, to - n)) % MOD);
				}
				break;
			default:
				throw new AssertionError();
			}
//			System.err.println("OP " + o1 + " " + a1 + " " + b1 + " " + c1 + " " + d1 + " -> " + ans);
			int o3 = (int) (((long) xo * o1 + (long) yo * o2 + zo) % 4 + 1);
			o1 = o2;
			o2 = o3;
			int a3 = (int) (((long) xa * a1 + (long) ya * a2 + za) % n + 1);
			a1 = a2;
			a2 = a3;
			int b3 = (int) (((long) xb * b1 + (long) yb * b2 + zb) % n + 1);
			b1 = b2;
			b2 = b3;
			int c3 = (int) (((long) xc * c1 + (long) yc * c2 + zc) % MOD);
			c1 = c2;
			c2 = c3;
			int d3 = (int) (((long) xd * d1 + (long) yd * d2 + zd) % MOD);
			d1 = d2;
			d2 = d3;
		}
		printCase();
		out.println(ans);
	}

	static boolean treeClear[][];
	static int treeAddConstant[][];
	static int treeAddLinear[][];
	static int treeSum[][];
	static int treeNumOddInOdd[][];
	static int treeNumOddInEven[][];
	
	static void push(int level, int i, int l, int r) {
		if (level == 0) {
			treeClear[level][i] = false;
			if (treeAddLinear[level][i] != 0) {
				treeAddConstant[level][i] = (int) ((treeAddConstant[level][i] + (long) treeAddLinear[level][i] * l) % MOD);
				treeAddLinear[level][i] = 0;
			}
		} else {
			if (treeClear[level][i]) {
				treeClear[level][i] = false;
				for (int j = 0; j < 2; j++) {
					treeClear[level - 1][2 * i + j] = true;
					treeAddConstant[level - 1][2 * i + j] = 0;
					treeAddLinear[level - 1][2 * i + j] = 0;
					treeSum[level - 1][2 * i + j] = 0;
					treeNumOddInOdd[level - 1][2 * i + j] = 0;
					treeNumOddInEven[level - 1][2 * i + j] = 0;
				}
			}
			int m = (l + r) >>> 1;
			if (treeAddConstant[level][i] != 0 || treeAddLinear[level][i] != 0) {
				int ac = treeAddConstant[level][i];
				int al = treeAddLinear[level][i];
				treeAddConstant[level][i] = 0;
				treeAddLinear[level][i] = 0;
				nodeAddLinear(level - 1, 2 * i, l, m, ac, al);
				nodeAddLinear(level - 1, 2 * i + 1, m, r, ac, al);
			}
		}
	}
	
	static void nodeClear(int level, int i, int l, int r) {
		treeClear[level][i] = true;
		treeAddConstant[level][i] = 0;
		treeAddLinear[level][i] = 0;
		treeSum[level][i] = 0;
		treeNumOddInOdd[level][i] = 0;
		treeNumOddInEven[level][i] = 0;
	}
	
	static void nodeAddLinear(int level, int i, int l, int r, int ac, int al) {
		treeAddConstant[level][i] = (int) (((long) treeAddConstant[level][i] + ac) % MOD);
		treeAddLinear[level][i] = (int) (((long) treeAddLinear[level][i] + al) % MOD);
		treeSum[level][i] = (int) ((treeSum[level][i] + (long) ac * (r - l) + al * (((long) r * (r - 1) / 2 - (long) l * (l - 1) / 2) % MOD)) % MOD);
		if ((ac & 1) != 0) {
			treeNumOddInOdd[level][i] = oddIndices(l, r) - treeNumOddInOdd[level][i];
			treeNumOddInEven[level][i] = evenIndices(l, r) - treeNumOddInEven[level][i];
		}
		if ((al & 1) != 0) {
			treeNumOddInOdd[level][i] = oddIndices(l, r) - treeNumOddInOdd[level][i];
		}
	}
	
	static int oddIndices(int l, int r) {
		return r / 2 - l / 2;
	}
	
	static int evenIndices(int l, int r) {
		return (r + 1) / 2 - (l + 1) / 2;
	}
	
	static void fix(int level, int i, int l, int r) {
		push(level, i, l, r);
		if (level == 0) {
			treeSum[level][i] = treeAddConstant[level][i];
			treeNumOddInOdd[level][i] = 0;
			treeNumOddInEven[level][i] = 0;
			if ((treeAddConstant[level][i] & 1) != 0) {
				((l & 1) != 0 ? treeNumOddInOdd : treeNumOddInEven)[level][i] = 1;
			}
		} else {
			treeSum[level][i] = (int) (((long) treeSum[level - 1][2 * i] + treeSum[level - 1][2 * i + 1]) % MOD);
			treeNumOddInOdd[level][i] = treeNumOddInOdd[level - 1][2 * i] + treeNumOddInOdd[level - 1][2 * i + 1];
			treeNumOddInEven[level][i] = treeNumOddInEven[level - 1][2 * i] + treeNumOddInEven[level - 1][2 * i + 1];
		}
	}
	
	static void clear(int level, int i, int l, int r, int from, int to) {
		if (from >= r || to <= l) {
			return;
		}
		if (from <= l && to >= r) {
			nodeClear(level, i, l, r);
		} else {
			int m = (l + r) >>> 1;
			push(level, i, l, r);
			clear(level - 1, 2 * i, l, m, from, to);
			clear(level - 1, 2 * i + 1, m, r, from, to);
			fix(level, i, l, r);
		}
	}

	static void addLinear(int level, int i, int l, int r, int from, int to, int ac, int al) {
		if (from >= r || to <= l) {
			return;
		}
		if (from <= l && to >= r) {
			nodeAddLinear(level, i, l, r, ac, al);
		} else {
			int m = (l + r) >>> 1;
			push(level, i, l, r);
			addLinear(level - 1, 2 * i, l, m, from, to, ac, al);
			addLinear(level - 1, 2 * i + 1, m, r, from, to, ac, al);
			fix(level, i, l, r);
		}
	}

	static int sum(int level, int i, int l, int r, int from, int to) {
		if (from >= r || to <= l) {
			return 0;
		}
		if (from <= l && to >= r) {
			return treeSum[level][i];
		} else {
			int m = (l + r) >>> 1;
			push(level, i, l, r);
			int res = (int) (((long) sum(level - 1, 2 * i, l, m, from, to) + sum(level - 1, 2 * i + 1, m, r, from, to)) % MOD);
//			fix(level, i, l, r);
			return res;
		}
	}

	static int numOdd(int level, int i, int l, int r, int from, int to) {
		if (from >= r || to <= l) {
			return 0;
		}
		if (from <= l && to >= r) {
			return treeNumOddInOdd[level][i] + treeNumOddInEven[level][i];
		} else {
			int m = (l + r) >>> 1;
			push(level, i, l, r);
			int res = numOdd(level - 1, 2 * i, l, m, from, to) + numOdd(level - 1, 2 * i + 1, m, r, from, to);
//			fix(level, i, l, r);
			return res;
		}
	}

	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
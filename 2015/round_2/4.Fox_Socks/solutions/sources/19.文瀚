#include<stdio.h>
#include<stdlib.h>
#include<cstring>
#include<iostream>
#include<ctype.h>
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cmath>
#include<bitset>
#include<iomanip>
#include<complex>
#include<utility>

#define X first
#define Y second
#define REP_0(i,n) for(int i=0;i<(n);++i)
#define REP_1(i,n) for(int i=1;i<=(n);++i)
#define REP_2(i,a,b) for(int i=(a);i<(b);++i)
#define REP_3(i,a,b) for(int i=(a);i<=(b);++i)
#define REP_4(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DOW_0(i,n) for(int i=(n)-1;-1<i;--i)
#define DOW_1(i,n) for(int i=(n);0<i;--i)
#define DOW_2(i,a,b) for(int i=(b);(a)<i;--i)
#define DOW_3(i,a,b) for(int i=(b);(a)<=i;--i)
#define FOREACH(a,b) for(typeof((b).begin()) a=(b).begin();a!=(b).end();++a)
#define RFOREACH(a,b) for(typeof((b).rbegin()) a=(b).rbegin();a!=(b).rend();++a)
#define PB push_back
#define PF push_front
#define MP make_pair
#define IS insert
#define ES erase
#define IT iterator
#define RI reserve_iterator
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define ALL(x) x.begin(),x.end()

#define PI 3.1415926535897932384626433832795
#define EXP 2.7182818284590452353602874713527

using namespace std;

typedef long long LL;
typedef long double LD;
typedef double DB;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef pair<int,PII> PIII;
typedef pair<LD,int> PLDI;
typedef vector<PII> VII;

template<class T>
T Mul(T x,T y,T P){
	T F1=0;
	while(y)
	{
		if(y&1)
		{
			F1+=x;
			if(F1<0||F1>=P)F1-=P;
		}
		x<<=1;
		if(x<0||x>=P)x-=P;
		y>>=1;
	}
	return F1;
}

template<class T>
T Pow(T x,T y,T P){
	T F1=1;x%=P;
	while(y)
	{
		if(y&1)
		{
			F1=Mul(F1,x,P);
		}
		x=Mul(x,x,P);
		y>>=1;
	}
	return F1;
}

template<class T>
T Gcd(T x,T y){
	if(y==0)return x;
	T z;
	while(z=x%y){
		x=y,y=z;
	}
	return y;
}

template<class T>
void UpdateMin(T &x,T y){
	if(y<x)
	{
		x=y;
	}
}

template<class T>
void UpdateMax(T &x,T y){
	if(x<y)
	{
		x=y;
	}
}

template<class T>
T Sqr(const T x){
	return x*x;
}

template<class T>
T Abs(const T x){
	return x<0?-x:x;
}

#define MaxBuffer 20000000
class ReadBuffer{
	private:
	char buff[MaxBuffer];
	char *buf;
	public:
	void init(int size=MaxBuffer)
	{
		fread(buff,1,size,stdin);
		buf=buff;
	}
	template<class T>
	bool readInteger(T &x)
	{
		x=0;
		while(*buf&&isspace(*buf)) ++buf;
		if(*buf==0) return false;
		static bool flag;
		flag=0;
		if(*buf=='-') flag=true;
		else x=*buf-'0';
		while(isdigit(*++buf)) x=x*10+*buf-'0';
		if(flag) x=-x;
		return true;
	}
	template<class T>
	bool readFloat(T &x)
	{
		long double nowpos=0.1;
		x=0;
		while(*buf&&isspace(*buf)) ++buf;
		if(*buf==0) return false;
		static bool flag,decimal;
		decimal=flag=0;
		if(*buf=='-') flag=true,++buf;
		else if(*buf=='.') decimal=true;
		while(isdigit(*buf)||*buf=='.')
		{
			if(*buf=='.') decimal=true;
			else
			{
				if(decimal)
				{
					x+=nowpos*(*buf-'0');
					nowpos*=0.1;
				}
				else
				{
					x=x*10+*buf-'0';
				}
			}
			++buf;
		}
		return true;
	}
	bool readChar(char c)
	{
		if(*buf==0) return 0;
		return c=*buf++,1;
	}
	bool readString(char *s)
	{
		while(*buf&&isspace(*buf)) ++buf;
		if(!*buf) return false;
		while(!isspace(*buf)) *s++=*buf++;
		*s++=0;
		return true;
	}
	int countSpacetonext(){
		int total=0;
		while(*buf&&*buf==' ') ++total,++buf;
		return total;
	}
	bool splitBycharactor(char *s,char Split='\n'){
		while(*buf&&*buf!=Split) *s++=*buf++;
		*s++=0;
		return *buf!=0;
	}
};

struct EDGE{
	int T;EDGE *Nxt;
};
const int mod=1000000000;

inline LL C2(int x){
	LL ret=(LL)x*(x-1)/2;
	if(ret>=mod) ret%=mod;
	return ret;
}

struct LTNODE{
	bool coverall;
	int cover,pls,pld;
	int sum,odd,len;
	void clear(){
		coverall=false;
		cover=pls=pld=sum=odd=len=0;;
	}
	void setcover(int v){
		coverall=1;
		cover=v;
		pls=pld=0;
		sum=(LL)v*len%mod;
		odd=(v&1)?len:0;
	}
	void setplus(int vs,int vd){
		pls+=vs;
		if(pls>=mod) pls-=mod;
		pld+=vd;
		if(pld>=mod) pld-=mod;
		sum=(sum+(LL)vs*len+vd*C2(len))%mod;
		if(vs&1) odd=len-odd;
	}
	void pushdown(LTNODE &lc,LTNODE &rc){
		if(coverall){
			lc.setcover(cover);
			rc.setcover(cover);
			coverall=false;
		}
		if(pls||pld){
			lc.setplus(pls,pld);
			int npls=(pls+(LL)pld*lc.len)%mod;
			rc.setplus(npls,pld);
			pls=pld=0;
		}
	}
}LT[1048580*2];
int T,N,M;
int s[1000100];
int rs[1000100];
int pos[1000100];
void build(int l,int r,int x){
	LT[x].clear();
	LT[x].len=r-l+1;
	if(l==r){
		LT[x].coverall=1;
		LT[x].len=1;
		LT[x].sum=LT[x].cover=s[l];
		LT[x].odd=s[l]&1;
	}
	else{
		int mid=(l+r)>>1;
		build(l,mid,x*2);
		build(mid+1,r,x*2+1);
		LT[x].sum=LT[x*2].sum+LT[x*2+1].sum;
		if(LT[x].sum>=mod) LT[x].sum-=mod;
		LT[x].len=LT[x*2].len+LT[x*2+1].len;
		LT[x].odd=LT[x*2].odd+LT[x*2+1].odd;
	}
}
void setplus(int l,int r,int x,int ll,int rr,int vs,int vd){
	if(l==ll&&r==rr){
		LT[x].setplus(vs,vd);
		return;
	}
	LT[x].pushdown(LT[x*2],LT[x*2+1]);
	int mid=(l+r)>>1;
	if(mid>=rr) setplus(l,mid,x*2,ll,rr,vs,vd);
	else if(mid<ll) setplus(mid+1,r,x*2+1,ll,rr,vs,vd);
	else{
		setplus(l,mid,x*2,ll,mid,vs,vd);
		setplus(mid+1,r,x*2+1,mid+1,rr,(vs+(LL)(mid+1-ll)*vd)%mod,vd);
	}
	LT[x].sum=LT[x*2].sum+LT[x*2+1].sum;
	if(LT[x].sum>=mod) LT[x].sum-=mod;
	LT[x].odd=LT[x*2].odd+LT[x*2+1].odd;
}
void setcover(int l,int r,int x,int ll,int rr,int v){
	if(l==ll&&r==rr){
		LT[x].setcover(v);
		return;
	}
	LT[x].pushdown(LT[x*2],LT[x*2+1]);
	int mid=(l+r)>>1;
	if(mid>=rr) setcover(l,mid,x*2,ll,rr,v);
	else if(mid<ll) setcover(mid+1,r,x*2+1,ll,rr,v);
	else{
		setcover(l,mid,x*2,ll,mid,v);
		setcover(mid+1,r,x*2+1,mid+1,rr,v);
	}
	LT[x].sum=LT[x*2].sum+LT[x*2+1].sum;
	if(LT[x].sum>=mod) LT[x].sum-=mod;
	LT[x].odd=LT[x*2].odd+LT[x*2+1].odd;
}
int calcsum(int l,int r,int x,int ll,int rr){
	if(l==ll&&r==rr){
		return LT[x].sum;
	}
	LT[x].pushdown(LT[x*2],LT[x*2+1]);
	int mid=(l+r)>>1,ret=0;
	if(mid>=rr) return calcsum(l,mid,x*2,ll,rr);
	else if(mid<ll) return calcsum(mid+1,r,x*2+1,ll,rr);
	else{
		ret=calcsum(l,mid,x*2,ll,mid)+calcsum(mid+1,r,x*2+1,mid+1,rr);
		if(ret>=mod) ret-=mod;
		return ret;
	}
}
int calcodd(int l,int r,int x,int ll,int rr){
	if(l==ll&&r==rr){
		return LT[x].odd;
	}
	LT[x].pushdown(LT[x*2],LT[x*2+1]);
	int mid=(l+r)>>1;
	if(mid>=rr) return calcodd(l,mid,x*2,ll,rr);
	else if(mid<ll) return calcodd(mid+1,r,x*2+1,ll,rr);
	else{
		return calcodd(l,mid,x*2,ll,mid)+calcodd(mid+1,r,x*2+1,mid+1,rr);
	}
}
int O[1001000],A[1001000],B[1001000],C[1001000],D[1001000];
int ans;
inline void solvePlus(int a,int b,int c,int d){
	int c1=c,c2=c+d;
	if(c2>=mod) c2-=mod;
	d*=2;
	if(d>=mod) d-=mod;
	if(a==b){
		setplus(1,N,1,pos[a],pos[a],c1,d);
	}
	else{
		int a1=pos[a],a2=pos[a+1],b1,b2;
		if((a&1)==(b&1)){
			b1=pos[b];
			b2=pos[b-1];
		}
		else{
			b1=pos[b-1];
			b2=pos[b];
		}
		setplus(1,N,1,a1,b1,c1,d);
		setplus(1,N,1,a2,b2,c2,d);
	}
}
inline void solveCover(int a,int b,int c){
	if(a==b){
		setcover(1,N,1,pos[a],pos[a],c);
	}
	else{
		int a1=pos[a],a2=pos[a+1],b1,b2;
		if((a&1)==(b&1)){
			b1=pos[b];
			b2=pos[b-1];
		}
		else{
			b1=pos[b-1];
			b2=pos[b];
		}
		setcover(1,N,1,a1,b1,c);
		setcover(1,N,1,a2,b2,c);
	}
}
inline void solveSum(int a,int b){
	if(a==b){
		ans+=calcsum(1,N,1,pos[a],pos[a]);
		if(ans>=mod) ans-=mod;
	}
	else{
		int a1=pos[a],a2=pos[a+1],b1,b2;
		if((a&1)==(b&1)){
			b1=pos[b];
			b2=pos[b-1];
		}
		else{
			b1=pos[b-1];
			b2=pos[b];
		}
		ans+=calcsum(1,N,1,a1,b1);
		if(ans>=mod) ans-=mod;
		ans+=calcsum(1,N,1,a2,b2);
		if(ans>=mod) ans-=mod;
	}
}
inline void solveOdd(int a,int b){
	if(a==b){
		ans+=calcodd(1,N,1,pos[a],pos[a]);
		if(ans>=mod) ans-=mod;
	}
	else{
		int a1=pos[a],a2=pos[a+1],b1,b2;
		if((a&1)==(b&1)){
			b1=pos[b];
			b2=pos[b-1];
		}
		else{
			b1=pos[b-1];
			b2=pos[b];
		}
		ans+=calcodd(1,N,1,a1,b1)+calcodd(1,N,1,a2,b2);
		if(ans>=mod) ans-=mod;
	}
}
int main(){
	freopen("fox_socks.txt","r",stdin);
	freopen("a.out","w",stdout);
	scanf("%d",&T);
	REP_1(tt,T){
		ans=0;
		scanf("%d%d",&N,&M);
		{
			int sx,sy,sz;
			scanf("%d%d%d%d%d",&rs[1],&rs[2],&sx,&sy,&sz);
			REP_3(i,3,N){
				rs[i]=((LL)rs[i-2]*sx+(LL)rs[i-1]*sy+sz)%mod;
			}
			int f=0;
			for(int i=1;i<=N;i+=2){
				s[++f]=rs[i];
				pos[i]=f;
			}
			for(int i=2;i<=N;i+=2){
				s[++f]=rs[i];
				pos[i]=f;
			}
			build(1,N,1);
		}
		{
			int ox,oy,oz;
			scanf("%d%d%d%d%d",&O[1],&O[2],&ox,&oy,&oz);
			REP_3(i,3,M){
				O[i]=((LL)O[i-2]*ox+(LL)O[i-1]*oy+oz)%4+1;
			}
		}
		{
			int ax,ay,az;
			scanf("%d%d%d%d%d",&A[1],&A[2],&ax,&ay,&az);
			REP_3(i,3,M){
				A[i]=((LL)A[i-2]*ax+(LL)A[i-1]*ay+az)%N+1;
			}
		}
		{
			int bx,by,bz;
			scanf("%d%d%d%d%d",&B[1],&B[2],&bx,&by,&bz);
			REP_3(i,3,M){
				B[i]=((LL)B[i-2]*bx+(LL)B[i-1]*by+bz)%N+1;
			}
		}
		{
			int cx,cy,cz;
			scanf("%d%d%d%d%d",&C[1],&C[2],&cx,&cy,&cz);
			REP_3(i,3,M){
				C[i]=((LL)C[i-2]*cx+(LL)C[i-1]*cy+cz)%mod;
			}
		}
		{
			int dx,dy,dz;
			scanf("%d%d%d%d%d",&D[1],&D[2],&dx,&dy,&dz);
			REP_3(i,3,M){
				D[i]=((LL)D[i-2]*dx+(LL)D[i-1]*dy+dz)%mod;
			}
		}
		{
			REP_1(i,M){
				int no=O[i];
				int na=A[i];
				int nb=B[i];
				int nc=C[i];
				int nd=D[i];
				nb=(na+nb-1);
				if(no==1){
					ans+=((LL)B[i]*nc+C2(B[i])*nd)%mod;
					if(ans>=mod) ans-=mod;
					if(nb<=N){
						solvePlus(na,nb,nc,nd);
					}
					else{
						solvePlus(na,N,nc,nd);
						solvePlus(1,nb-N,(nc+(LL)(N-na+1)*nd)%mod,nd);
					}
				}
				else if(no==2){
					ans+=(LL)B[i]*nc%mod;
					if(ans>=mod) ans-=mod;
					if(nb<=N){
						solveSum(na,nb);
						solveCover(na,nb,nc);
					}
					else{
						solveSum(na,N);
						solveSum(1,nb-N);
						solveCover(na,N,nc);
						solveCover(1,nb-N,nc);
					}
				}
				else if(no==3){
					if(nb<=N){
						solveSum(na,nb);
					}
					else{
						solveSum(na,N);
						solveSum(1,nb-N);
					}
				}
				else if(no==4){
					if(nb<=N){
						solveOdd(na,nb);
					}
					else{
						solveOdd(na,N);
						solveOdd(1,nb-N);
					}
				}
			}
		}
		printf("Case #%d: %d\n",tt,ans);
	}
	scanf("%d",&T);
	return 0;
}

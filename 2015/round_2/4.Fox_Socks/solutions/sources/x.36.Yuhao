#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define fi first
#define se second
typedef vector<int> VI;
typedef long long ll;
typedef pair<int,int> PII;
const ll mod=1000000000;
ll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
// head
const int N=1010000;
struct node {
	int sm,sz,p[2][2];
	int rm,mul,add;
	// p [weizhi][jiou]
	void setr() {
		rm=1; mul=0; add=0; sm=0;
		p[0][1]=p[1][1]=0;
		p[0][0]=(sz+1)/2,p[1][0]=sz/2;
	}
	void setm(ll m) {
		mul=(mul+m)%mod;
		sm=(sm+sz*(sz-1)/2%mod*m)%mod;
		if (m%2==1) swap(p[1][0],p[1][1]);
	}
	void seta(ll a) {
		add=(add+a)%mod;
		sm=(sm+sz*a)%mod;
		if (a%2==1) swap(p[1][0],p[1][1]),swap(p[0][0],p[0][1]);
	}
}nd[4*N];

ll xs,ys,zs;
int s[N],o[N],a[N],b[N],c[N],d[N],n,m,ans,_;

void gen(int *s,int mod,int w,int n) {
	scanf("%d%d%I64d%I64d%I64d",s,s+1,&xs,&ys,&zs);
	rep(i,2,n) s[i]=(xs*s[i-2]+ys*s[i-1]+zs)%mod+w;
}
inline void upd(int p) {
	nd[p].sm=(nd[p+p].sm+nd[p+p+1].sm)%mod;
	int k=nd[p+p].sz%2;
	rep(i,0,2) rep(j,0,2) nd[p].p[i][j]=nd[p+p].p[i][j]+nd[p+p+1].p[i^k][j];
}
void build(int p,int l,int r) {
	nd[p].rm=nd[p].add=nd[p].mul=0;
	if (l==r) {
		nd[p].sm=s[l]; nd[p].sz=1;
		rep(i,0,2) rep(j,0,2) nd[p].p[i][j]=0;
		nd[p].p[0][s[l]%2]++;
	} else {
		int md=(l+r)>>1;
		build(p+p,l,md);
		build(p+p+1,md+1,r);
		nd[p].sz=nd[p+p].sz+nd[p+p+1].sz;
		upd(p);
	}
}
void push(int p) {
	if (nd[p].rm) {
		nd[p+p].setr(); nd[p+p+1].setr();
		nd[p].rm=0;
	}
	if (nd[p].add) {
		nd[p+p].seta(nd[p].add);
		nd[p+p+1].seta(nd[p].add);
		nd[p].add=0;
	}
	if (nd[p].mul) {
		nd[p+p].setm(nd[p].mul);
		nd[p+p+1].setm(nd[p].mul);
		nd[p+p+1].seta(1ll*nd[p].mul*nd[p+p].sz%mod);
		nd[p].mul=0;
	}
}
void modifya(int p,int l,int r,int tl,int tr,int c,int d) {
	if (l==tl&&r==tr) nd[p].setm(d),nd[p].seta(c);
	else {
		push(p);
		int md=(l+r)>>1;
		if (tr<=md) modifya(p+p,l,md,tl,tr,c,d);
		else if (tl>md) modifya(p+p+1,md+1,r,tl,tr,c,d);
		else modifya(p+p,l,md,tl,md,c,d),modifya(p+p+1,md+1,r,md+1,tr,(c+d*(md-tl+1ll))%mod,d);
		upd(p);
	}
}
void modifyr(int p,int l,int r,int tl,int tr,int R) {
	if (l==tl&&r==tr) nd[p].setr(),nd[p].seta(R);
	else {
		push(p);
		int md=(l+r)>>1;
		if (tr<=md) modifyr(p+p,l,md,tl,tr,R);
		else if (tl>md) modifyr(p+p+1,md+1,r,tl,tr,R);
		else modifyr(p+p,l,md,tl,md,R),modifyr(p+p+1,md+1,r,md+1,tr,R);
		upd(p);
	}
}
int queryo(int p,int l,int r,int tl,int tr) {
	if (l==tl&&r==tr) return nd[p].p[0][1]+nd[p].p[1][1];
	else {
		push(p);
		int md=(l+r)>>1;
		if (tr<=md) return queryo(p+p,l,md,tl,tr);
		else if (tl>md) return queryo(p+p+1,md+1,r,tl,tr);
		else return (queryo(p+p,l,md,tl,md)+queryo(p+p+1,md+1,r,md+1,tr));
	}
}
ll querys(int p,int l,int r,int tl,int tr) {
	if (l==tl&&r==tr) return nd[p].sm;
	else {
		push(p);
		int md=(l+r)>>1;
		if (tr<=md) return querys(p+p,l,md,tl,tr);
		else if (tl>md) return querys(p+p+1,md+1,r,tl,tr);
		else return (querys(p+p,l,md,tl,md)+querys(p+p+1,md+1,r,md+1,tr))%mod;
	}
}
void gao(int o,int l,int r,ll c,ll d) {
	if (o==1) {
		ans=(ans+(r-l+1ll)*(r-l)/2%mod*d+(r-l+1)*c)%mod;
		modifya(1,1,n,l,r,c,d);
	} else if (o==2) {
		ans=(ans+querys(1,1,n,l,r))%mod;
		ans=(ans+(r-l+1)*c)%mod;
		modifyr(1,1,n,l,r,c);
	} else if (o==3) {
		ans=(ans+querys(1,1,n,l,r))%mod;
	} else if (o==4) {
		ans=(ans+queryo(1,1,n,l,r))%mod;
	}
}
void gao() {
	build(1,1,n);
	rep(i,0,m) {
		if (a[i]+b[i]-1<=n) gao(o[i],a[i],a[i]+b[i]-1,c[i],d[i]);
		else {
			gao(o[i],a[i],n,c[i],d[i]);
			if (o[i]!=1) gao(o[i],1,a[i]+b[i]-n-1,c[i],d[i]);
			else gao(o[i],1,a[i]+b[i]-n-1,(c[i]+(n+1ll-a[i])*d[i])%mod,d[i]);
		}
	}
}
int main() {
//	freopen("D.in","r",stdin);
	scanf("%d",&_);
	rep(i,0,_) {
		scanf("%d%d",&n,&m);
		gen(s+1,1000000000,0,n);
		gen(o,4,1,m);
		gen(a,n,1,m);
		gen(b,n,1,m);
		gen(c,1000000000,0,n);
		gen(d,1000000000,0,n);
		ans=0;
		gao();
		printf("Case #%d: %d\n",i+1,ans);
		fprintf(stderr,"Case #%d: %d\n",i+1,ans);
	}
}

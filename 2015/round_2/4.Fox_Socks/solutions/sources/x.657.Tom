#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
using namespace std;

const int MAX_N = 200000 + 10;
const int MAX_C = 50;

pair<int, int> best[MAX_N][2];

vector<int> ch[MAX_N];
int que[MAX_N];

int main() {
	int T;
	cin >> T;

	for (int nc = 1; nc <= T; ++nc) {
		int n;
		cin >> n;
		for (int i = 0; i < n; ++i) {
			ch[i].clear();
		}
		for (int i = 0; i < n; ++i) {
			int par;
			scanf("%d", &par), --par;
			if (par != -1)
				ch[par].push_back(i);
		}

		int qh = 0, qt = 0;
		que[qt++] = 0;
		while (qh < qt) {
			int u = que[qh++];
			for (vector<int>::iterator e = ch[u].begin(); e != ch[u].end();
					++e) {
				que[qt++] = *e;
			}
		}

		for (int i = n - 1; i >= 0; --i) {
			int u = que[i];

			vector<pair<int, int> > my;

			for (int c = 1; c < MAX_C; ++c) {
				int ret = c;
				for (vector<int>::iterator e = ch[u].begin(); e != ch[u].end();
						++e) {
					if (best[*e][0].second == c)
						ret += best[*e][1].first;
					else
						ret += best[*e][0].first;
				}

				my.push_back(make_pair(ret, c));
			}

			sort(my.begin(), my.end());
			best[u][0] = my[0], best[u][1] = my[1];
		}

		printf("Case #%d: %d\n", nc, best[0][0].first);
	}
	return 0;
}

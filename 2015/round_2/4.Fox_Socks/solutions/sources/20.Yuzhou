#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <bitset>
#include <numeric>
#include <ctime>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef pair<int, int> PII;
typedef long long ll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pct __builtin_popcount

#define P 1000000000
#define N 1000010

bool wc[N*4]; int gc[N*4], gd[N*4];
int fo[N*4], fe[N*4], f[N*4];
int n, m;
int a[N], O[N], A[N], B[N], C[N], D[N];

void gen(int*b, int n, int w, int s) {
	cin >> b[0] >> b[1];
	int x, y, z;
	cin >> x >> y >> z;
	for (int i = 2; i < n; i ++) {
		b[i] = ((ll)x*b[i-2]+(ll)y*b[i-1]+z)%w+s;
	}
}

void up(int p) {
	fe[p] = fe[p*2+1]+fe[p*2+2];
	fo[p] = fo[p*2+1]+fo[p*2+2];
	f[p] = (f[p*2+1]+f[p*2+2])%P;
}

void blt(int p, int l, int r) {
	if (l == r-1) {
		f[p] = a[l];
		if (a[l]%2 == 1) {
			if (l%2 == 0) fe[p] = 1;
			else fo[p] = 1;
		}
		return;
	}
	int mid = (l+r)/2;
	blt(p*2+1, l, mid);
	blt(p*2+2, mid, r);
	up(p);
}

void upd(int p, int l, int r, bool c, int C, int D) {
	// c: clear?
	// all += C+i*D
	if (c == 1) {
		wc[p] = 1;
		gc[p] = 0;
		gd[p] = 0;
		fo[p] = 0;
		fe[p] = 0;
		f[p] = 0;
	}
	f[p] = (f[p] + (ll)(r-l)*C+(ll)(r-l)*(r-l-1)/2%P*D)%P;
	int so = 0, se = 0;
	if (l%2 == 0) se = (r-l+1)/2;
	else se = (r-l)/2;
	so = r-l-se;
	if (C%2 == 1) {
		fo[p] = so-fo[p];
		fe[p] = se-fe[p];
	}
	if (D%2 == 1) {
		if (l%2 == 0) fo[p] = so-fo[p];
		else fe[p] = se-fe[p];
	}
	(gc[p] += C) %= P;
	(gd[p] += D) %= P;
}

void down(int p, int l, int r) {
	int mid = (l+r)/2;
	if (wc[p] || gc[p] || gd[p]) {
		upd(p*2+1, l, mid, wc[p], gc[p], gd[p]);
		upd(p*2+2, mid, r, wc[p], (gc[p]+(ll)(mid-l)*gd[p])%P, gd[p]);
		wc[p] = gc[p] = gd[p] = 0;
	}
}

void upd1(int p, int l, int r, int L, int R, int C, int D) {
	if (L <= l && r <= R) {
		upd(p, l, r, 0, (C+(ll)(l-L)*D)%P, D);
		return;
	}
	down(p, l, r);
	int mid = (l+r)/2;
	if (L < mid) upd1(p*2+1, l, mid, L, R, C, D);
	if (mid < R) upd1(p*2+2, mid, r, L, R, C, D);
	up(p);
}

int upd2(int p, int l, int r, int L, int R, int C) {
	if (L <= l && r <= R) {
		int S = f[p];
		upd(p, l, r, 1, C, 0);
		return S;
	}
	down(p, l, r);
	int mid = (l+r)/2;
	int S = 0;
	if (L < mid) (S += upd2(p*2+1, l, mid, L, R, C)) %= P;
	if (mid < R) (S += upd2(p*2+2, mid, r, L, R, C)) %= P;
	up(p);
	return S;
}

int sum(int p, int l, int r, int L, int R) {
	if (L <= l && r <= R) return f[p];
	down(p, l, r);
	int mid = (l+r)/2;
	int S = 0;
	if (L < mid) (S += sum(p*2+1, l, mid, L, R)) %= P;
	if (mid < R) (S += sum(p*2+2, mid, r, L, R)) %= P;
	return S;
}

int odd(int p, int l, int r, int L, int R) {
	if (L <= l && r <= R) return fo[p]+fe[p];
	down(p, l, r);
	int mid = (l+r)/2;
	int S = 0;
	if (L < mid) S += odd(p*2+1, l, mid, L, R);
	if (mid < R) S += odd(p*2+2, mid, r, L, R);
	return S;
}

int main (){
	int _;
	cin >> _;
	for (int __ = 1; __ <= _; __ ++) {
		memset(wc, 0, sizeof wc);
		memset(gc, 0, sizeof gc);
		memset(gd, 0, sizeof gd);
		memset(fo, 0, sizeof fo);
		memset(fe, 0, sizeof fe);
		memset(f, 0, sizeof f);
		cin >> n >> m;
		gen(a, n, P, 0);
		gen(O, m, 4, 1);
		gen(A, m, n, 1);
		gen(B, m, n, 1);
		gen(C, m, P, 0);
		gen(D, m, P, 0);
		for (int i = 0; i < m; i ++) {
			O[i] --; A[i] --;
		}
		/*
		for (int i = 0; i < n; i ++) {
			printf ("%d%c", a[i], i == n-1?'\n': ' ');
		}
		*/
		/*
		for (int i = 0; i < m; i ++) {
			printf ("%d %d %d %d %d\n", O[i], A[i], B[i], C[i], D[i]);
		}
		//*/
		blt(0, 0, n);
		int S = 0;
		for (int i = 0; i < m; i ++) {
			if (O[i] == 0) {
				S = (S +(ll)B[i]*C[i]+(ll)B[i]*(B[i]-1)/2%P*D[i])%P;
				B[i] += A[i];
				if (B[i] > n) B[i] -= n;
				if (A[i] < B[i]) {
					upd1(0, 0, n, A[i], B[i], C[i], D[i]);
				} else {
					upd1(0, 0, n, A[i], n, C[i], D[i]);
					upd1(0, 0, n, 0, B[i], (C[i]+(ll)D[i]*(n-A[i]))%P,D[i]); 
				}
			} else
			if (O[i] == 1) {
				S = (S+(ll)B[i]*C[i])%P;
				B[i] += A[i];
				if (B[i] > n) B[i] -= n;
				if (A[i] < B[i]) {
					(S += upd2(0, 0, n, A[i], B[i], C[i])) %= P;
				} else {
					(S += upd2(0, 0, n, A[i], n, C[i])) %= P;
					(S += upd2(0, 0, n, 0, B[i], C[i])) %= P; 
				}
			} else
			if (O[i] == 2) {
				B[i] += A[i];
				if (B[i] > n) B[i] -= n;
				if (A[i] < B[i]) {
					(S += sum(0, 0, n, A[i], B[i])) %= P;
				} else {
					(S += sum(0, 0, n, A[i], n)) %= P;
					(S += sum(0, 0, n, 0, B[i])) %= P;
				}
			} else
			if (O[i] == 3) {
				B[i] += A[i];
				if (B[i] > n) B[i] -= n;
				if (A[i] < B[i]) {
					(S += odd(0, 0, n, A[i], B[i])) %= P;
				} else {
					(S += odd(0, 0, n, A[i], n)) %= P;
					(S += odd(0, 0, n, 0, B[i])) %= P;
				}
			}
		}
		printf ("Case #%d: %d\n", __, S);
	}
	return 0;
}
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <iomanip>
#include <fstream>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii;
typedef vector<int> vint;
typedef vector<LL> vLL;

double dp[21];
const int nmax = 25;

long long C[nmax][nmax];


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif
	C[0][0] = 1;
	REP(i, nmax) {
		REP(j, nmax) {
			if (i > 0)
				C[i][j] += C[i - 1][j];
			if (i > 0 && j > 0)
				C[i][j] += C[i - 1][j - 1];
		}
	}

	int T;
	cin >> T;
	REP(test, T) {
		double p;
		cin >> p;
		double ans = 0;
		MEM(dp, 0);
		dp[20] = 1;
		FOR(step, 1, 10000) {
			dp[0] = 0;
			FOR(i, 1, 20) {
				REP(j, i) {
					double q = C[i][j] * pow(p, i - j) * pow(1 - p, j);
					dp[j] += dp[i] * q;
				}

				dp[i] *= pow(1 - p, i);
			}
			ans += dp[0] * step;
		}

		cout << "Case #" << test + 1 << ": ";
		printf("%0.5lf\n", ans);
	}

	return 0;
}

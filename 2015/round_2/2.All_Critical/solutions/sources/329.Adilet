#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

using namespace std;

const int MAXN = 25;

int tn;
double p;
long long c[MAXN][MAXN];
double dp[MAXN][105000];
double got[MAXN][MAXN];
double pp[MAXN], ipp[MAXN];

int main() {
	//assert(freopen("input.txt","r",stdin));
	//assert(freopen("output.txt","w",stdout));

    for (int i = 0; i < MAXN; i++)
    	c[i][0] = 1;

	for (int i = 1; i < MAXN; i++)
		for (int j = 1; j < MAXN; j++)
			c[i][j] = c[i - 1][j] + c[i - 1][j - 1];

	scanf("%d", &tn);

	for (int test = 1; test <= tn; test++) {
		scanf("%lf", &p);
		pp[0] = 1.0; ipp[0] = 1.0;
		for (int i = 1; i < MAXN; i++) {
			pp[i] = pp[i - 1] * p;
			ipp[i] = ipp[i - 1] * (1.0 - p);
		}

		//memset(dp, 0, sizeof(dp));
		//memset(pos, 0, sizeof(pos));
		//memset(got, 0, sizeof(got));

		for (int i = 0; i <= 20; i++)
			for (int j = 0; j <= 100000; j++)
				dp[i][j] = 0.0; 

        for (int i = 1; i <= 20; i++) {
        	for (int j = 0; j <= i; j++) {
        		got[i][j] = pp[j] * ipp[i - j];
        	}
        }

		dp[0][0] = 1.0;

		for (int i = 0; i < 20; i++) {
			for (int j = 0; j <= 100000; j++) {
				int lft = 20 - i;
				for (int k = 0; k <= lft; k++) {
					double gop = got[lft][k] * c[lft][k];
					dp[i + k][j + 1] += dp[i][j] * gop;
				}
			}
		}	

		double ans = 0.0;
		for (int i = 0; i <= 100000; i++) 
			ans += 1.0 * i * dp[20][i];

		printf("Case #%d: %.5lf\n", test, ans);
	}

	return 0;
}
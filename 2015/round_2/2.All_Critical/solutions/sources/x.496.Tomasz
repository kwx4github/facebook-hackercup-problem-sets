#include <bits/stdc++.h>

#define ALL(v) v.begin(), v.end()
#define REP(i, a, b) for(int i = a; i < b; i++)
#define REPD(i, a, b) for(int i = a; i > b; i--)
#define REPLL(i, a, b) for(ll i = a; i < b; i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FORLL(i, a, b) for(ll i = a; i <= b; i++)
#define INF 1000000001

using namespace std;

typedef long long ll;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<ld, ld> pld;
typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;
typedef map<int, int>::iterator mit;
typedef vector<int> vi;
typedef vector<pii > vpii;

#define pb push_back
#define mp make_pair
#define st first
#define nd second

#define EPS 1e-9
#define PI acos(-1.0)
#define MAXN 1000007
#define MAXT 10007

int z, n;
int mask[1<<21];
ld p[22];
ld pr;
ld sums[22];

ll newton(int n, int k) {
    ll ret = 1;
    FOR(i, k+1, n) ret *= i;
    FOR(i, 2, n-k) ret /= i;
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0);

    std::default_random_engine generator;
    std::uniform_int_distribution<int> distribution(0,400000);

	cin >> z;
	srand(time(NULL));



	FOR(tc, 1, z) {
        cin >> pr;

        int tries = 0;
        vi v;
        ld res = 0;

        	FOR(i, 0, 20) {
            p[i] = powl(pr, i) * powl(1-pr, 20-i) * newton(20, i) ;

        }
        FOR(i, 0, 20) {
            sums[i] = p[i] + (i ? sums[i-1] : 0);
            //cout << p[i] << " ";
        }
        //cout << endl;

        REP(i, 0, 20) v.pb(0);
        while(tries < MAXT) {
            int cmask = 0, t = 0;
            while(cmask != (1<<20)-1) {
                ld r = (ld)distribution(generator)/400000;
                t++;
                //cmask |=
                int j = 0;
                while(j < 20) {
                    if(sums[j]> r) break;
                    j++;
                }
                REP(i, 0, 20) v[i] = 0;
                REP(i, 0, j) v[i] = 1;
                random_shuffle(ALL(v));
                //cout << r << endl;
                REP(i, 0, v.size()) {
                    //cout << v[i] << " ";
                    cmask |= (v[i] << i);
                }
                //cout << endl;
                //cout << cmask << endl;
            }
            res += t;
            tries++;
            //cout << tries << " " << res << endl;
        }
        cout << fixed << setprecision(9) << "Case #" << tc << ": " << res/tries << endl;
	}

    return 0;
}

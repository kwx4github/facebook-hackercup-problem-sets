#include <stdio.h>
#include <math.h>
#include <assert.h>

#include <set>
#include <map>
#include <queue>
#include <tuple>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

using int64 = long long;

double p1, p0, q[21];

int n = 20;
int nbmp = 1<<n;
double e[1<<21], p[1<<21];

vector<int> a[1<<21];

int cntbit(int bmp) {
  assert(bmp < (1<<n));

  int ret = 0;
  for (int i = 0; i < n; ++i) {
    if (bmp & (1<<i)) ++ret;
  }
  return ret;
}

double dp(int bmp) {
  assert(e[bmp] < -2+1e-8 || e[bmp] > -1e-8);

  if (e[bmp] > -1) return e[bmp];

  double& ret = e[bmp];

  int k = cntbit(bmp);
  assert(k <= n);
  int base_bmp = (1<<k)-1;
  
  if (bmp > base_bmp) {
    return ret = dp(base_bmp);
  }

  double lhs = q[n-k] - p[0];
  double rhs = p[0];
  for (int x = 1; x < (1<<k); ++x) {
    rhs += p[x] * (1 + dp(base_bmp ^ x));
  }
  if (lhs == 0.0) {
    assert(rhs == 0.0);
    ret = 0.0;
  } else {
    ret = rhs/lhs;
  }
  return ret;
}

int main() {
  int T;
  scanf("%d", &T);
  for (int N = 1; N <= T; ++N) {
    scanf("%lf", &p1);
    p0 = 1-p1;

    for (int bmp=0; bmp < nbmp; ++bmp) {
      p[bmp] = 1.0;
      for (int i = 0; i < n; ++i) {
        if (bmp & (1<<i)) {
          p[bmp] *= p1;
        } else {
          p[bmp] *= p0;
        }
      }
      assert(p[bmp] >= 0.);
      assert(p[bmp] <= 1.);

      e[bmp] = -2;
    }

    q[0] = 1.0;
    for (int i = 1; i <= n; ++i) q[i] = p0*q[i-1];

    e[0] = 0;
    printf("Case #%d: %.5lf\n", N, dp(nbmp-1));
  }
  return 0;
}

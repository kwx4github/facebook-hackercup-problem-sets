import java.util.Scanner;
import java.io.OutputStream;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.Locale;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Tifuera
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("all_critical.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("taskb.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskB solver = new TaskB();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskB {
    private static final int ALL = 20;

    public void solve(int testNumber, Scanner in, PrintWriter out) {
        String str = in.next();
        if (str.startsWith("1")) {
            out.println("Case #" + testNumber + ": 1.00000");
            return;
        }
        double p = Double.parseDouble(str);
        double answer = 0d;
        double oneMpN1 = 1d;

        double pows[] = new double[ALL + 1];
        pows[0] = 1d;
        for (int n = 1; n < 600; n++) {

            double tmp = calcProbGuessAll(p, n, oneMpN1);
            answer += n * tmp;
            oneMpN1 = oneMpN1 * (1 - p);
        }


        String outValue = String.format(Locale.US, "%.5f", answer);
        out.println("Case #" + testNumber + ": " + outValue);
    }

    private double calcProbGuessAll(double p, double n, double oneMpN1) {
        double answer = 0d;

        double powsN1[] = new double[ALL + 1];
        powsN1[0] = 1d;
        for (int i = 1; i <= ALL; i++) {
            powsN1[i] = oneMpN1* powsN1[i - 1];
        }

        double powsP[] = new double[ALL + 1];
        powsP[0] = 1d;
        for (int i = 1; i <= ALL; i++) {
            powsP[i] = p* powsP[i - 1];
        }

        double oneOneN1Pows[] = new double[ALL + 1];
        oneOneN1Pows[0] = 1d;

        for (int i = 1; i <= ALL; i++) {
            oneOneN1Pows[i] = (1 - oneMpN1)*oneOneN1Pows[i - 1];
        }

        for (int i = 1; i < (1 << ALL); i++) {
            int numGuessThisTime = Integer.bitCount(i);
            double tmp = 1 - oneMpN1;
            double first = powsN1[numGuessThisTime];
            first = first * powsP[numGuessThisTime];

//            double second = 1d;
            double second = oneOneN1Pows[ALL - numGuessThisTime];
//            for (int j = 1; j <= ALL - numGuessThisTime; j++) {
//                second = second * (1 - oneMpN1);
//            }

            answer += first * second;
        }

        return answer;
    }


}


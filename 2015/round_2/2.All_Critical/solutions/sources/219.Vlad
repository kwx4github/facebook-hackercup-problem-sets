import java.io.*;
import java.util.Locale;
import java.util.StringTokenizer;

public class ProblemB {

    public static void main(String[] args) throws Exception {
        Locale.setDefault(Locale.UK);
        new ProblemB();
    }

    private BufferedReader in = null;
    private PrintWriter out = null;
    private StringTokenizer tok = new StringTokenizer("");
    private String fileName = "#IOtxt";

    public ProblemB() throws Exception {
        init();
        solve();
        in.close();
        out.close();
    }

    private void solve() throws Exception {
      double[][] C = new double[21][21];
      C[0][0] = 1;
      for (int i = 0; i < 21; i++) {
        C[i][0] = 1;
      }
      for (int i = 1; i < 21; i++) {
        for (int j = 1; j < 21; j++) {
          C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
        }
      }
      int T = nextInt();
      for (int ii = 1; ii <= T; ii++) {
        System.out.println(ii);
        out.print("Case #" + ii + ": ");
        double p = Double.parseDouble(nextToken());
        double[] pp = new double[21];
        double[] qq = new double[21];
        pp[0] = qq[0] = 1;
        for (int i = 1; i < 21; i++) {
          pp[i] = pp[i - 1] * p;
          qq[i] = qq[i - 1] * (1 - p);
        }
        int M = 1000000;
        double[][] dp = new double[M][21];
        double ans = 0;
        dp[0][0] = 1;
        for (int k = 1; k < M; k++) {
          for (int i = 0; i <= 20; i++) {
            for (int j = 0; j <= Math.min(i, 19); j++) {
              int need = i - j;
              int free = 20 - j;
              dp[k][i] += (pp[need] * qq[free - need]) * C[free][need] * dp[k - 1][j];
//              System.out.println(k + " " + i + " " + dp[k][i]);
            }
          }
          ans += k * dp[k][20];
        }
        out.println(ans);
      }
    }


    private void init() throws FileNotFoundException {
        if (fileName.equals("#Console")) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else if (fileName.equals("#IOtxt")) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new FileReader(fileName + ".in"));
            out = new PrintWriter(fileName + ".out");
        }
    }


    private int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    private long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }


    private String nextToken() throws IOException {
        while (!tok.hasMoreTokens()) {
            String s = in.readLine();
            if (s == null) {
                return null;
            }
            tok = new StringTokenizer(s);
        }
        return tok.nextToken();
    }

}
            
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>

using namespace std;
typedef long long LL;

double p;
double DP[2][21];
double C[21][21];
double P[21], IP[21];
double comb(int n, int k) {
  if (n == k || k == 0) return 1.0;
  if (C[n][k] > 0.0) return C[n][k];
  return C[n][k] = comb(n - 1, k - 1) + comb(n - 1, k);
}
int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    cin >> p;
    P[0] = IP[0] = 1.0;
    for (int i = 1; i <= 20; ++i) P[i] = P[i-1] * p, IP[i] = IP[i-1] * (1.0 - p);
    memset(DP, 0, sizeof(DP));
    DP[0][0] = 1.0;
    double total = 0.0;
    for (int i = 1; i <= 50000; ++i) {
      memset(DP[i % 2], 0, sizeof(DP[i % 2]));
      for (int k = 0; k <= 19; ++k) {
        for (int a = 0; a <= k; ++a)
          for (int b = 0; k + b <= 20; ++b) {
            double now = comb(k, a) * P[a + b] * comb(20 - k, b) * IP[20 - a - b];
            DP[i % 2][k + b] += DP[(i - 1) % 2][k] * now;
          }
      }
      total += i * DP[i % 2][20];
    }
    cout << "Case #" << t << ": ";
    printf("%.05lf\n", total);
  }
  return 0;
}

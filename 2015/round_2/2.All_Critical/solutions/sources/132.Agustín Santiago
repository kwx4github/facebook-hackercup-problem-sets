#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <sys/resource.h>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

typedef long long tint;
typedef pair<int,int> pint;

void set_stack()
{
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result != 0)
    {
        cerr << "getrlimit returned result = " << result << endl;
        exit(1);
    }
    const rlim_t kStackSize = 1024 * 1024 * 1024;   // min stack size = 1GiB

    if (rl.rlim_cur < kStackSize)
    {
        rl.rlim_cur = kStackSize;
        result = setrlimit(RLIMIT_STACK, &rl);
        if (result != 0)
        {
            cerr << "setrlimit returned result = " << result << endl;
            exit(1);
        }
    }
}

const int MAX = 32;

double choose[MAX][MAX];

void comb()
{
    forn(n,MAX)
    {
        choose[n][0] = choose[n][n] = 1.0;
        forsn(k, 1, n)
            choose[n][k] = choose[n-1][k] + choose[n-1][k-1];
    }
}

double pot[MAX], uMenosPot[MAX], E[MAX];

int main()
{   
    set_stack();
    comb();
    int TT; cin >> TT;
    forn(tt,TT)
    {
        double p; cin >> p;
        pot[0] = 1.0;
        forsn(i, 1, MAX)
            pot[i] = pot[i-1] * p;
        uMenosPot[0] = 1.0;
        forsn(i, 1, MAX)
            uMenosPot[i] = uMenosPot[i-1] * (1.0 - p);
        E[0] = 0.0;
        forsn(n,1, MAX)
        {
            double &x = E[n] = 1.0;
            forsn(i, 1, n+1)
            {
                double p_i = choose[n][i] * pot[i] * uMenosPot[n-i];
                x += p_i * E[n-i];
            }
            x /= 1.0 - choose[n][0] * pot[0] * uMenosPot[n-0];
        } 
        printf("Case #%d: %.5lf\n", tt+1 , E[20]);
        //cout << "Case #" << tt+1 << ": " << E[20] << endl;
    }
    return 0;
}


#include<cmath>
#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int N = 20;

double cb[N + 1][N + 1];

double ppow[N + 1], qpow[N + 1];

double p, a[N + 1][N + 2];

void build() {
    ppow[0] = qpow[0] = 1;
    for (int i = 1; i <= N; ++i) {
        ppow[i] = ppow[i - 1] * p;
        qpow[i] = qpow[i - 1] * (1 - p);
    }
    memset(a, 0, sizeof(a));
    for (int i = 0; i < N; ++i) {
        a[i][i] += 1;
        for (int j = i; j <= N; ++j) {
            a[i][j] -= cb[N - i][j - i] * ppow[j - i] * qpow[N - j];
        }
        a[i][N + 1] += 1;
    }
    a[N][N] = 1;
    a[N][N + 1] = 0;
}

void gauss() {
    for (int i = 0; i <= N; ++i) {
        int c = i;
        for (int j = i + 1; j <= N; ++j) {
            if (fabs(a[j][i]) > fabs(a[c][i])) {
                c = j;
            }
        }
        for (int k = 0; k <= N + 1; ++k) {
            swap(a[i][k], a[c][k]);
        }
        for (int j = i + 1; j <= N; ++j) {
            double r = a[j][i] / a[i][i];
            for (int k = 0; k <= N + 1; ++k) {
                a[j][k] -= a[i][k] * r;
            }
        }
    }
    for (int i = N; i >= 0; --i) {
        a[i][N + 1] /= a[i][i];
        a[i][i] = 1;
        for (int j = i - 1; j >= 0; --j) {
            a[j][N + 1] -= a[i][N + 1] * a[j][i];
            a[j][i] = 0;
        }
    }
}

int main() {
    cb[0][0] = 1;
    for (int i = 1; i <= N; ++i) {
        cb[i][0] = cb[i][i] = 1;
        for (int j = 1; j < i; ++j) {
            cb[i][j] = cb[i - 1][j] + cb[i - 1][j - 1];
        }
    }
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%lf", &p);
        build();
        gauss();
        static int id = 0;
        printf("Case #%d: %.5f\n", ++id, a[0][N + 1]);
    }
    return 0;
}

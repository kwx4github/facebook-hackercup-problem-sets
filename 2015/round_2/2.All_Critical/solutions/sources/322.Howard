#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <sstream>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef long double ld;

ll binom[21][21];

ld table[21];
ld p;
const int n = 20;

ld E(int k)
{
  if (k == 0) return 0;
  if (table[k] >= 0) return table[k];

  ld ans = 1;

  // progress of t more sections
  for (int t = 1; t <= k; t++) {
    ld coeff = pow(p,t) * pow(1-p,k-t) * binom[k][t];
    ans += coeff * E(k-t);
  }

  // no progress
  ld coeff = pow(1-p, k);
  ans /= 1-coeff;

  return table[k] = ans;
}


/*
ld E(int k)
{
  if (k == 0) return 0;
  if (table[k] >= 0) return table[k];

  ld ans = 1;

  // progress of t more sections
  for (int t = 1; t <= k; t++) {
    ld coeff = 0.0;

    for (int r = t; r <= t+k && r <= n; r++) {
      coeff += pow(p,r) * binom[k][t] * binom[n-k][r-t] / binom[n][r];
    }
    ans += coeff * E(k-t);
  }

  // no progress
  ld coeff = (1-p);
  for (int r = 1; r <= k && r <= n-k; r++) {
    coeff += pow(p, r) * binom[n-k][r] / binom[n][r];
  }
  ans /= 1-coeff;

  return table[k] = ans;
}
*/
void solve()
{
  cin >> p;

  fill(table, table+21, -1);
  table[0] = 0;
  cout << fixed << setprecision(5) << E(n) << endl;
}


int main()
{
  for (int n = 0; n <= 20; n++) {
    binom[n][0] = binom[n][n] = 1;
    for (int k = 1; k < n; k++) {
      binom[n][k] = binom[n-1][k] + binom[n-1][k-1];
    }
  }
  
  int T;
  cin >> T;
  for (int c = 1; c <= T; c++) {
    cout << "Case #" << c << ": ";
    solve();
  }
  return 0;
}

#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>
#include <set>
#include <map>

using namespace std;

double p;

double DP[21];
double DP_new[21];
double M[21][21];

double nchoosek(int n,int m) {
    if (m == 0) return 1.0;
    if (m == 1) return double(n);
    int i,j,k;
    double x,y,z;
    x = 1.0;
    for (i = 0;i < m;i++) {
        x *= double(n - i);
    }
    for (i = 1;i <= m;i++) {
        x /= double(i);
    }
    return x;
}

void init() {
    int i,j,k,n,m;
    double q = 1.0 - p;
    memset(M,0,sizeof(M));
    for (i = 0;i < 20;i++) {
        // 已经取得 i 个
        n = 20 - i;
        for (j = 0;j <= 20 - i;j++) {
            // 再拿 j 个
            k = (20 - i) - j;
            // k 个没拿到
            M[i][i + j] = nchoosek(n,j);
            for (m = 0;m < j;m++) M[i][i + j] *= p;
            for (m = 0;m < k;m++) M[i][i + j] *= q;
        }
    }
    for (i = 0;i <= 20;i++) {
        DP[i] = nchoosek(20,i);
        for (j = 0;j < i;j++) DP[i] *= p;
        for (j = i;j < 20;j++) DP[i] *= q;
    }
    return;
}

double solve() {
    int i,j,k,n,m;
    init();
    double res = 0.0;
    res += DP[20] * 1.0;
    for (i = 2;i <= 100000;i++) {
        memset(DP_new,0,sizeof(DP_new));
        for (j = 0;j < 20;j++) {
            for (k = 0;k <= 20;k++) {
                DP_new[k] += DP[j] * M[j][k];
            }
        }
        res += DP_new[20] * double(i);
        for (j = 0;j <= 20;j++) DP[j] = DP_new[j];
    }
    return res;
}

int main() {
    freopen("all_critical.txt","r",stdin);
    freopen("output","w",stdout);
    int T;
    cin >> T;
    for (int z1 = 1;z1 <= T;z1++) {
        cout << "Case #" << z1 << ": ";
        cin >> p;
        double res;
        res = solve();
        printf("%.5lf\n",res);
    }
}
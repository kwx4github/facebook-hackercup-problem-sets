package fb_round2;

import java.io.*;
import java.util.StringTokenizer;

public class B {
    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb_round2/B-sample.in"), System.out);
        io = new Kattio(new FileInputStream("fb_round2/all_critical.txt"), new FileOutputStream("fb_round2/all_critical.out"));
//        io = new Kattio(new FileInputStream("fb_round2/B-large-0.in"), new FileOutputStream("fb_round2/B-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new B().solve(io);
        }
        io.close();
    }

    private void solve(Kattio io) {
        double p = io.getDouble();
        double[] avg = new double[21];
        double choose[][] = new double[21][21];
        for (int i = 0; i < 21; i++)
        {
            choose[i][0] = choose[i][i] = 1;
            for (int j = 1; j < i; j++)
            {
                choose[i][j] = choose[i-1][j-1] + choose[i-1][j];
            }
        }
        avg[0] = 0;
        for (int i = 1; i <= 20; i++)
        {
            double sum = 0;
            for (int j = 1; j <= i; j++)
            {
                sum += avg[i-j] * choose[i][j] * Math.pow(p, j) * Math.pow(1-p, i-j);
            }
            avg[i] = (1 + sum) / (1 - Math.pow(1-p, i));
        }
        io.println(String.format("%.5f", avg[20]));
    }

    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

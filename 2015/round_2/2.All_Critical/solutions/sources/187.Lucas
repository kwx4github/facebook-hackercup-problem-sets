#include <bits/stdc++.h>

using namespace std;

#define fr(a,b,c) for(int (a) = (b); (a) < (c); ++(a))
#define rep(a,b) fr(a,0,b)
#define st first
#define nd second
#define db(x) cerr << #x << " == " << x << endl
#define _ << ", " <<

const int oo = 0x3f3f3f3f;

typedef long long ll;
typedef pair<int,int> pii;

const int max_depth = 1010;

double C[22][22];
double pd[22][max_depth];
double p;

void pascal() {
    for (int i = 0; i <= 20; ++i) C[i][0] = 1;
    for (int i = 0; i <= 20; ++i) C[i][i] = 1;
    for (int i = 2; i <= 20; ++i) {
        for (int j = 1; j < i; ++j) {
            C[i][j] = C[i-1][j-1] + C[i-1][j];
        }
    }
}

double good[22], bad[22];

double go(int done, int d) {
    if (d >= max_depth) return 0;
    if (done == 20) return 0;
    if (pd[done][d] > -1.0) return pd[done][d];
    double ret = 0;
    for (int hit = 0; hit <= 20; ++hit) {
        for (int diff = 0; diff <= min(hit, 20 - done); ++diff) {
            if (hit - diff > done) continue;
            double prob = good[hit] * bad[20 - hit];
            assert(hit - diff <= done);
            assert(diff <= 20 - done);
            prob *= C[20 - done][diff] * C[done][hit - diff];
            // db(hit _ diff _ prob _ done);
            ret += prob * go(done + diff, d + 1);
        }
    }
    return pd[done][d] = 1 + ret;
}

int main() {
    //ios_base::sync_with_stdio(false);
    pascal();
    int T;
    scanf("%d", &T);
    for (int caso = 1; caso <= T; ++caso) {
        scanf("%lf", &p);
        good[0] = 1;
        bad[0] = 1;
        for (int i = 1; i <= 20; ++i) {
            good[i] = good[i-1] * p;
        }
        for (int i = 1; i <= 20; ++i) {
            bad[i] = bad[i-1] * (1.0 - p);
        }
        for (int i = 0; i < 22; ++i) {
            for (int j = 0; j < max_depth; ++j) {
                pd[i][j] = -2.0;
            }
        }
        printf("Case #%d: %.5lf\n", caso, go(0,0));
    }
    return 0;
}

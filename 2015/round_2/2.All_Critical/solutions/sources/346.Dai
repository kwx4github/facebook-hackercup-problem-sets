import java.util.Scanner;


public class FHC2015Round2B {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        FHC2015Round2B solver = new FHC2015Round2B();
        solver.init();
        int numCases = sc.nextInt();
        for (int i = 1; i <= numCases; i++) {
            System.out.format("Case #%d: %s%n", i, solver.solve(sc));
        }
    }

    void init() {
    }

    final static int MAX_TRIAL = 5000;

    static class Combination {
        final int n;
        final long[][] comb; // comb[i][j]: iCj

        Combination(int n) {
            this.n = n;
            comb = new long[n + 1][n + 1];
            comb[0][0] = 1;
            for (int i = 0; i <= n; i++) {
                comb[i][0] = 1;
            }
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= i; j++) {
                    comb[i][j] = (comb[i - 1][j - 1] + comb[i - 1][j]);
                }
            }
        }

        public long combination(int n, int k) {
            return comb[n][Math.min(k, n - k)];
        }
    }


    private String solve(Scanner sc) {
        double p = sc.nextDouble();

        int n = 20;
        Combination comb = new Combination(n + 1);
        double[][] dp = new double[MAX_TRIAL][n + 1];
        double[] pPower = new double[MAX_TRIAL];
        double[] oneMinusPPower = new double[MAX_TRIAL];
        dp[0][0] = pPower[0] = oneMinusPPower[0] = 1;
        for (int i = 1; i < MAX_TRIAL; i++) {
            pPower[i] = pPower[i - 1] * p;
            oneMinusPPower[i] = oneMinusPPower[i - 1] * (1 - p);
        }

        final double EPS = 1e-12;
        for (int trial = 0; trial < MAX_TRIAL - 1; trial++) {
            // double cpSum = 0;
            for (int i = 0; i < n; i++) {
                double cp = dp[trial][i];
                if (cp < EPS) continue;
                // cpSum += cp;
                for (int j = i; j <= n; j++) {
                    dp[trial + 1][j] += cp * comb.combination(n - i, n - j)
                            * pPower[j - i] * oneMinusPPower[n - j];
                }
            }
            // if (trial % 1000 == 0) System.out.println("cpSm(" + trial + ")= " + cpSum);
        }
        double ans = 0;
        for (int trial = 0; trial < MAX_TRIAL; trial++) {
            // if (trial % 1000 ==0) System.out.println("pr(" + trial+")= " + dp[trial][n]);
            ans += dp[trial][n] * trial;
        }
        return String.format("%.5f", ans);
    }


}

import java.io.*;
import java.util.*;

public class A {
	FastScanner in;
	PrintWriter out;

	void solve() {
		int tc = in.nextInt();
		final int N = 22;
		double[][] c = new double[N][N];
		for (int i = 0; i < N; i++) {
			c[i][0] = 1.0;
			if (i != 0)
				for (int j = 1; j < N; j++)
					c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
		}
		final int n = 20;
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			double pr = in.nextDouble();
			double[][] p = new double[n + 1][n + 1];
			for (int was = 0; was < n; was++) {
				for (int next = was; next <= n; next++) {
					int ok = next - was;
					int total = n - was;
					double tmp = c[total][ok];
					for (int i = 0; i < ok; i++)
						tmp *= pr;
					for (int i = 0; i < total - ok; i++)
						tmp *= 1 - pr;
					p[was][next] += tmp;
				}
			}
			double[] ans = new double[n + 1];
			for (int it = 0; it < 100000; it++) {
				for (int was = 0; was < n; was++) {
					double res = 1;
					for (int next = was; next <= n; next++) {
						res += p[was][next] * ans[next];
					}
					ans[was] = res;
				}
			}
			out.println(ans[0]);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("A.in"));
			out = new PrintWriter(new File("A.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {

		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new A().run();
	}
}
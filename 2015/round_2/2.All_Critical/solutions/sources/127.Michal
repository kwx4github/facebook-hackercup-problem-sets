#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std; 

#define DEBUG(x) cerr << '>' << #x << ':' << x << endl;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }

const int INF = 1<<29;
typedef long long ll;

inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return n & two(b); }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }

template<class T> void chmax(T & a, const T & b) { a = max(a, b); }
template<class T> void chmin(T & a, const T & b) { a = min(a, b); }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

const int MAX = 27;
int N = 20;
double p;

double dp[MAX], comb[MAX][MAX], pn[MAX], ppn[MAX];
double go(int n)
{
	if (!n) return 0;
	double & res = dp[n];
	if (res != -1.0) return res;
	double x = 1.0;
	FOR(i, 1, n)
		x += comb[n][i] * pn[i] * ppn[n-i] * go(n-i);
	res = x / (1.0 - ppn[n]);
	return res;
}

void Solve(int tc)
{
	scanf("%lf", &p);
	pn[0] = ppn[0] = 1.0;
	FOR(i, 1, MAX-1)
	{
		pn[i] = pn[i-1] * p;
		ppn[i] = ppn[i-1] * (1.0 - p);
	}
	REP(i, MAX) dp[i] = -1.0;
	printf("Case #%d: %.5lf\n", tc, go(N));
}

int main()
{
	comb[0][0] = 1.0;
	FOR(i, 1, MAX-1)
	{
		comb[i][0] = 1.0;
		FOR(j, 1, i)
			comb[i][j] = comb[i-1][j-1] + comb[i-1][j];
	}

	int T;
	scanf("%d\n", &T);
	FOR(tc,1,T) Solve(tc);

	return 0;
}
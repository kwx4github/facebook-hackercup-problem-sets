#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 50;

long double c[nmax][nmax];
long double res[nmax];
long double p;

void solve() {
	cin >> p;
	res[0] = 0;
	c[0][0] = 1;
	for (int i = 1; i < nmax; i ++)
		for (int j = 0; j <= i; j ++) {
			c[i][j] = c[i-1][j] * p;
			if (j > 0)
				c[i][j] += c[i-1][j-1] * (1-p);
		}
	for (int i = 1; i <= 20; i ++) {
		double a = 1 - c[i][i];
		double b = 1;
		for (int j = 1; j <= i; j ++)
			b += c[i][i-j] * res[i-j];
		res[i] = b / a;
	}
	double ans = res[20];
	int now = 6;
	if (ans > 9.99999) now ++;
	if (ans > 99.9999) now ++;
	if (ans > 999.9999) now ++;
	std::cout.precision(now);
	cout << ans << endl;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	
	int tst;
	cin >> tst;
	forn(i, tst) {
		cerr << i << endl;
		printf("Case #%d: ", i + 1);
		solve();
	}


	return 0;
}

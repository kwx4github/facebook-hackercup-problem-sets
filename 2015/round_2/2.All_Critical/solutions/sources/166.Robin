#include <bits/stdc++.h>/*{{{*/
using namespace std; typedef long long ll; typedef long double ld; void run(); void prep(); int main(){int tsts; cin>>tsts; for (int tst=1; tst<=tsts; ++tst) {printf("Case #%d: ", tst); run();}}/*}}}*/

void prep(){
}

ld chob[21][21];
bool did[21];
ld dp[21];

void init(ld p){
  memset(chob,0,sizeof chob);
  memset(did,0,sizeof did);
  memset(dp,0,sizeof dp);

  chob[0][0]=1;
  for (int i=1; i<=20; i++)
    for (int j=0; j<=20; j++){
      if (j>=1) chob[i][j]+=chob[i-1][j-1]*(  p);
      if (j>=0) chob[i][j]+=chob[i-1][j  ]*(1-p);
    }
}

ld sop(ld z){
  return 1.L/(1.L-z);
}

ld solve(int n,ld p){
  if (n==0) return 0;
  if (did[n]) return dp[n];

  ld sum_good=0.L;
  for (int i=1; i<=n; i++){
    sum_good+=chob[n][i]*(1 + solve(n-i,p));
  }

  // res = sum(good) + (res+1) * chob[n][0]
  // res = sum(good) + res * chob[n][0] + chob[n][0]
  // res * (1-chob[n][0]) = sum(good) + chob[n][0]
  // res = (sum(good) + chob[n][0]) / (1-chob[n][0])
  ld res = (sum_good + chob[n][0]) / (1-chob[n][0]);

  did[n]=true;
  return dp[n]=res;
}

void run(){
  ld p; cin>>p;

  init(p);
  printf("%.5Lf\n", (ld) solve(20,p));
}

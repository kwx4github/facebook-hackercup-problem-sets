#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>
#include <queue>
#include <unordered_map>
#include <cassert>
#include <string>
#include <sstream>
#include <string>
#include <fstream>

using namespace std;

#define DB(x) cerr << #x << ": " << x << endl;

const long long INF = 1e9;
const int MAXN = 200 * 1000 + 9;
const int MAXA = 1000;

//#define double long double

vector<vector<double>> memoized_cnk(MAXA, vector<double>(MAXA));
vector<vector<char>> ready_cnk(MAXA, vector<char>(MAXA, false));

double cnk(int n, int k) {
    if (k == 0) {
        return  1;
    }
    if (n == 0) {
        return 0;
    }

    if (!ready_cnk[n][k]) {
        ready_cnk[n][k] = true;
        double& ans = memoized_cnk[n][k];

        ans = (cnk(n - 1, k) + cnk(n - 1, k - 1));
    }
    return memoized_cnk[n][k];
}

struct Solver {
    Solver()
    {
        memoized_pk.assign(MAXA, vector<double>(MAXA * 1000));
        ready_pk.assign(MAXA, vector<char>(MAXA * 1000, false));
    }

    void readInput() {
        cin >> p;
        DB(p);
    }

    double solve() {
        double answer = 0.0;
        double pSum = 0.0;
        for (int plays = 1; plays < 1000000; ++plays) {
            double pPlays = pk(20, plays);
            pSum += pPlays;
            answer += plays * pPlays;
            if (plays > 1000 && plays * pPlays < 1e-9) {
                DB(plays);
                break;
            }
        }
        DB(pSum);
        return answer;
    }

    double pk(int bars, int plays) {
        if (bars == 0 || plays == 0) {
            if (bars == 0 && plays == 0) {
                return 1.0;
            }
            return 0.0;
        }

        if (!ready_pk[bars][plays]) {
            ready_pk[bars][plays] = true;
            double& result = memoized_pk[bars][plays];
            result = 0.0;

            for (int bars_now = 0; bars_now <= bars; ++bars_now) {
                result += pKfromN(bars_now, bars) * pk(bars - bars_now, plays - 1);
            }
        }
        return memoized_pk[bars][plays];
    }

    double pKfromN(int k, int n) {
        return cnk(n, k) * pow(p, k) * pow(1 - p, n - k);
    }

    vector<vector<double>> memoized_pk;
    vector<vector<char>> ready_pk;

    double p;
};

void gen(int N, string filename) {
    ofstream ofs(filename);
    //freopen("big_input.txt", "w", stdout);
    int T = 100;
    ofs << T << endl;
    for (int t = 0; t < T; ++t) {
        ofs << N << endl;
        ofs << 0;
        for (int i = 1; i < N; ++i) {
            ofs << " " << (rand() % i) + 1;
        }
        ofs << endl;
    }
}

int main() {
    //gen(200000, "big_input.txt");
    //freopen("big_input.txt", "r", stdin);
    
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    
    freopen("all_critical.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        DB(t);
        Solver solver;
        solver.readInput();
        double answer = solver.solve();
        cout.precision(5);
        cout << "Case #" << (t + 1) << ": " << fixed << answer << endl;
    }

    return 0;
}

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>

using namespace std;

#define ri(X) scanf("%d", &(X))
#define pi(X) printf("%d", (X))
#define mp(X,Y) make_pair(X,Y)
#define pb(X) push_back(X)
#define lint long long
#define pii pair<int,int>
#define inf 1e9
#define linf 1e18
#define X first
#define Y second
#define all(X) (X).begin(),(X).end()
#define uni(X) X.erase(unique(X.begin(), X.end()), X.end());
int T;
double p;



const int mm = 30;
const int mi = 2009;
bool visit[mi][mm];
double comb[mi][mm]; 
double combdp(int n, int k){ 
  if(k == 0 || n == k) return 1; 
  
  if(k == 1 || n-1 == k) return n; 
  if(visit[n][k]) return comb[n][k];
  visit[n][k] = 1;
  return comb[n][k] = combdp(n-1, k-1) + combdp(n-1, k); 
}


double pp[30];
double pp1[30];

const int ma = 50000;
bool visitdp[20][ma];
double dp[20][ma];
double f(int n1, int i){
  if(i >= ma || n1 >= 20) return 0;
  if(visitdp[n1][i]) return dp[n1][i];
  
  double res = 1;
  int n2 = 20-n1; // left
  for(int k = 0; k <= n2; k++){
    res += f(n1+k,i+1)*combdp(n2,k)*pp[k]*pp1[n2-k];
  }
  
  visitdp[n1][i] = 1;
  return dp[n1][i] = res;
}
double g(int i, int d){
  double res = 0;
  
}

int main(){
  
  ri(T);
  for(int t = 0; t < T; t++){
    cin >> p;
    pp1[0] = pp[0] = 1;
    for(int i = 1; i < 30; i++){
      pp1[i] = pp1[i-1]*(1-p);
      pp[i] = pp[i-1]*p;
    }
    memset(visitdp,0,sizeof(visitdp));
    printf("Case #%d: %.5lf\n", t+1, f(0,0));
  }
  return 0;
}


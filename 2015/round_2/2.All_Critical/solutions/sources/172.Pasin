#include <iostream>

#define MAX_N 10005
#define M 20

using namespace std;

int tests, c[M + 5][M + 5];
double p;
long double dp[MAX_N][M + 5], powp[M + 5], powoneminusp[M + 5], answer;

inline void precomp() {
    for (int i = 0 ; i <= M ; i ++) {
        for (int j = 0 ; j <= i ; j ++) {
            if (i == 0 or i == j) {
                c[i][j] = 1;
            } else {
                c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
            }
        }
    }
}

int main() {
    precomp();
    cin >> tests;
    for (int test = 0 ; test < tests ; test ++) {
    	cin >> p;
        powp[0] = powoneminusp[0] = 1;
    	for (int i = 1 ; i <= M ; i ++) {
            powp[i] = powp[i - 1] * p;
            powoneminusp[i] = powoneminusp[i - 1] * (1 - p);
        }
        answer = 0;
        dp[0][0] = 1;
        for (int i = 1 ; i < MAX_N ; i ++) {
            for (int j = 0 ; j <= M ; j ++) {
                dp[i][j] = 0;
                for (int k = 0 ; k <= j ; k ++) {
                    if (k == 0 and j == M) continue;
                    dp[i][j] += (dp[i - 1][j - k] * c[M - j + k][k] * powp[k] * powoneminusp[M - j]);
                }
                // printf("%d %d: %.10Lf\n", i, j, dp[i][j]);
            }
            answer += (dp[i][M] * i);
        }
		printf("Case #%d: %.5Lf\n", test + 1, answer);
    }
    return 0;
}

#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <iomanip>
using namespace std;

#define REP(i,N) for (int i = 0; i < (N); ++i)

typedef unsigned int ui;
typedef long long ll;

typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;

template<class T> void printImpl(const vector<T> & coll) { copy(coll.begin(), coll.end(), ostream_iterator<T>(cout, " ")); cout << endl; }
template<class T, int N> void printImpl(T (&coll)[N]) { copy(coll, coll + N, ostream_iterator<T>(cout, " ")); cout << endl; }
template<class Key, class Value> void printImpl(const map<Key, Value> & data) { typename map<Key, Value>::const_iterator it; for (it = data.begin(); it != data.end(); ++it) { cout << it->first << ":" << it->second << endl; } }
template <class T> void printImpl(const T & data) { cout << data << endl; }

#define DEBUGPRINT
#ifdef DEBUGPRINT
#define print(x) cout << #x" = "; printImpl(x);
#else
#define print(x) ;
#endif

int main()
{
    //cout << fixed << setprecision(12) << ans << endl;
    //cin.getline(strC, 1000);

    int caseCount;
    cin >> caseCount;

    const int MAXS = 200000;

    for (int csIx = 1; csIx <= caseCount; ++csIx)
    {
        cout << "Case #" << csIx << ": ";
        double p;
        cin >> p;

        double res = 0;
        double pp[21], rp[21], c[21][21];
        pp[0] = 1.;
        rp[0] = 1.;
        for (int i = 1; i <= 20; ++i)
        {
            pp[i] = pp[i-1] * p;
            rp[i] = rp[i-1] * (1-p);
        }

        c[0][0] = 1.;
        for (int n = 1; n <= 20; ++n)
        {
            c[n][0] = 1.;
            c[n][n] = 1.;
            for (int k = 1; k < n; ++k)
            {
                c[n][k] = c[n-1][k] + c[n-1][k-1];
            }
        }

        double dp[MAXS+1][21];
        REP(i,21)
        {
            dp[0][i] = 0;
        }
        dp[0][0] = 1;

        for (int s = 1; s <= MAXS; ++s)
        {
            for (int k = 0; k <= 20; ++k)
            {
                dp[s][k] = 0;
                for (int i = 0; i <= k; ++i)
                {
                    dp[s][k] += dp[s-1][i] * pp[k-i] * rp[20-k] * c[20-i][k-i];
                }

            }
            double delta = (dp[s][20] - dp[s-1][20]) * s;
            res += delta;
        }

        cout << fixed << setprecision(5) << res << endl;
    }

    
    return 0;
}
/*
    Author: Zhouxing Shi
    Created on Jan18, 2014
*/
#include <bits/stdc++.h>
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define drep(i, a, b) for (int i = (a); i >= (b); --i)
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define pb(x) push_back(x)
#define mp(x, y) (make_pair(x, y))
#define clr(x) memset(x, 0, sizeof(x))
#define xx first
#define yy second

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int inf = ~0U >> 1;
const ll INF = ~0ULL >> 1;;
const double pi = acos(-1.0);
template <class T> inline T sqr(T a) { return a * a; }
template <class T> inline void read(T &n)
{
    char c;
	for (c = getchar(); !(c >= '0' && c <= '9'); c = getchar()); n = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar()) n = n * 10 + c - '0';
}
int Pow(int base, int n, int mo)
{
	if (n == 0) return 1;
	if (n == 1) return base;
	int tmp = Pow(base, n >> 1, mo);
	tmp = (ll)tmp * tmp % mo;
	if (n & 1) tmp = (ll)tmp * base % mo;
	return tmp;
}

//***************************

const int N = 20;
double dp[1 << 21][22];
double p, P[25];

void work(int _)
{
	scanf("%lf", &p);
	P[0] = 1;
	rep(j, 1, N) P[j] = P[j - 1] * p;
	clr(dp);
	rep(j, 1, N) dp[(1<<N)-1][j] = 1;
	drep(i, (1 << N) - 2, 0)
	{
		pair<double, double> tmp[25];
		tmp[N] = mp(1, 1); // x * dp[i][0] + y
		drep(j, N - 1, 0) 
		{
			tmp[j] = mp(0, 0);
			if ((1 << j) & i)
			{
				tmp[j].xx += tmp[j + 1].xx;
				tmp[j].yy += tmp[j + 1].yy;
			}
			else
			{
				tmp[j].yy += dp[i | (1 << j)][j + 1] * p;
				tmp[j].yy += tmp[j + 1].yy * (1. - p);
				tmp[j].xx += tmp[j + 1].xx * (1. - p);
			}
		}
		
		dp[i][0] = (tmp[0].yy) / (1. - tmp[0].xx);
		rep(j, 1, N) 
			dp[i][j] = tmp[j].xx * dp[i][0] + tmp[j].yy;
	}
	printf("Case #%d: %.5lf\n", _, dp[0][0]);
}

int main()
{
	#ifdef LOCAL
		freopen("B.txt", "r", stdin);
		freopen("B.ans", "w", stdout);
	#endif
	
	int cases;
	scanf("%d", &cases);
	rep(_, 1, cases) work(_);


	return 0;
}



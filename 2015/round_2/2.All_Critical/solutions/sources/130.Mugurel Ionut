#include <stdio.h>
#include <string.h>

#define NMAX 21

int C[NMAX][NMAX];
double prob[2][NMAX], ppow[NMAX], nppow[NMAX];

void ComputeComb() {
	memset(C, 0, sizeof(C));
	C[0][0] = 1;
	int i, j;
	for (i = 1; i < NMAX; i++) {
		C[i][0] = 1;
		for (j = 1; j <= i; j++)
			C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
	}
}

int main() {
	ComputeComb();
	freopen("all_critical.txt", "r", stdin);
	freopen("all_critical.out", "w", stdout);
	int T, t, N, i, j, steps, curr, prev;
	double p, ans;
	scanf("%d", &T);
	for (t = 1; t <= T; t++) {
		scanf("%lf", &p);
		ppow[0] = nppow[0] = 1.0;
		for (i = 1; i <= 20; i++) {
			ppow[i] = ppow[i - 1] * p;
			nppow[i] = nppow[i - 1] * (1.0 - p);
		}
		ans = 0.0;
		steps = 0;
		prob[curr = 0][0] = 1.0;
		for (i = 1; i <= 20; i++) prob[0][i] = 0.0;
		while (1) {
			steps++;
			prev = curr;
			curr = 1 - curr;
			for (i = 0; i <= 20; i++) prob[curr][i] = 0.0;
			for (i = 0; i < 20; i++)
				for (j = i; j <= 20; j++)
					prob[curr][j] += prob[prev][i] * C[20 - i][j - i] * ppow[j - i] * nppow[20 - j];
			ans += prob[curr][20] * steps;
			if (steps > 1000000 && prob[curr][20] < 1e-10) break;
			prob[curr][20] = 0.0;
		}
		fprintf(stderr, "steps=%d\n", steps);
		printf("Case #%d: %.5lf\n", t, ans);
	}
	return 0;
}
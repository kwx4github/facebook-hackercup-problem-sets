#include <map>
#include <set>
#include <list>

#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>

#include <bitset>
#include <cctype>
#include <cstdio>
#include <limits>
#include <string>
#include <vector>

#include <cassert>
#include <climits>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <numeric>
#include <sstream>
#include <utility>

#include <iostream>
#include <algorithm>
#include <functional>

using namespace std;

const int MAX = 5000;

double p, P[21], Pr[21];
double f[MAX][21];
bool c[MAX][21];
long long C[21][21];

double go (int k, int m) {
    if (m == 0) return 0.;
    if (k == 1) {
        return P[m];
    }
    //if (m == 0) return 1.0;

    if (c[k][m]) return f[k][m];
    c[k][m] = 1;

    double &ref = f[k][m];
    ref = 0.;
    for (int i = 0; i <= m; ++i) {
        double t = C[m][i] * ( P[i] * Pr[m-i] * go(k-1,m-i) );
        //printf ("k=%d m=%d i=%d -> %lld %.6lf %.6lf %.6lf = %.6lf\n", k, m, i, C[m][i], P[i], Pr[m-i], go(k-1,m-i), t);
        //printf ("> adding %.6lf for %d rounds left and bumming %d\n", t, k, i);
        ref += t;
    }
    //printf ("with %d rounds left and %d free == %.6lf\n", k, m, ref);
    return ref;
}

void solve () {
    cin >> p;
    double ans = 0.;
    double tres = 0.;
    memset (f, 0, sizeof f);
    memset (c, 0, sizeof c);

    P[0] = 1.;
    Pr[0] = 1.;
    for (int i = 1; i < 22; ++i) {
        P[i] = P[i-1] * p;
        Pr[i] = Pr[i-1] * (1.0 - p);
    }

    for (int i = 0; i < 21; ++i) C[i][0] = 1;
    C[1][1] = 1;
    for (int i = 2; i < 21; ++i) for (int j = 1; j <= i; ++j)
        C[i][j] = C[i-1][j-1] + C[i-1][j];

    for (int i = 1; i < MAX; ++i) {
        tres = i * go (i, 20);
        //printf ("%4d, %3.6lf, %3.6lf\n", i, go(i,20), tres);
        ans += tres;
    }

    printf ("%.5lf", ans);
}

int main (void) {
    int T;
    scanf ("%d", &T);
    for (int t = 1; t <= T; ++t) {
        printf ("Case #%d: ", t);
        solve ();
        printf ("\n");
    }
    return 0;
}

#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const int MAXN = 25;             
            
int t, n;
ld cnk[MAXN][MAXN];
ld p, ans[MAXN], cur;
ld P[MAXN], P1[MAXN];

int main() {

	scanf("%d", &t);
	
	cnk[0][0] = 1;
	for (int i = 1; i < MAXN; i++) {
		cnk[i][0] = 1;
		for (int j = 1; j < MAXN; j++)
			cnk[i][j] = cnk[i - 1][j - 1] + cnk[i - 1][j];
	}
	
	cout.precision(30);
	
	n = 20; 
	forn(tt, t) {
		printf("Case #%d: ", tt + 1);
		
		cin >> p;
		P[0] = 1;
		for (int i = 1; i <= n; i++)
			P[i] = P[i - 1] * p;
		P1[0] = 1;
		for (int i = 1; i <= n; i++)
			P1[i] = P1[i - 1] * (1.0 - p);
		
		memset(ans, 0, sizeof(ans));
		ans[0] = 0;
		
		ld cf;
		for (int i = 1; i <= n; i++) {
			cf = 1.0;
			cur = 0;
			
			for (int a = 0; a <= i; a++) {
				cur += P[a] * P1[i - a] * cnk[i][a] * (ans[i - a] + 1);
				if (a == 0)
					cf -= P[a] * P1[i - a] * cnk[i][a];
			}
			
			ans[i] = cur / cf;
			//cout << ans[i] << '\n';	
		}
		
		cout << ans[n] << '\n';
	}

	return 0;
}
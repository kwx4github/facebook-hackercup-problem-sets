#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <climits>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <bitset>
#include <utility>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)

typedef long long li;
typedef long double ld;

using namespace std;

const int N = 22;
const int M = 20000;
const ld EPS = 1E-9;

int n;
ld a[N][N];
ld x[N];

void solve()
{
  forn(rank, n)
    {
        int t = -1;
        for (int i = rank; i < n; i++)
            if (fabsl(a[i][rank]) > EPS && (t == -1 || fabsl(a[i][rank]) > fabsl(a[t][rank])))
                t = i;
        for (int j = rank; j <= n; j++)
            swap(a[rank][j], a[t][j]);
        for (int i = rank + 1; i < n; i++)
            if (fabsl(a[i][rank]) > EPS)
            {
                ld k = a[rank][rank] / a[i][rank];
                for (int j = rank; j <= n; j++)
                    a[i][j] = a[i][j] * k - a[rank][j];
            }
    }

    forn(i, n)
        x[i] = 0;
    for (int row = n - 1; row >= 0; row--)
    {
        x[row] = a[row][n];
        for (int i = row + 1; i < n; i++)
            x[row] -= a[row][i] * x[i];
        x[row] /= a[row][row];
    }
    /*
    cout << endl;

    forn(i, n)
        cout << x[i] << " ";
    cout << endl;
    */
}

ld pp[N];
ld f[N][N];

void read()
{
    n = 20;

    ld p;
    cin >> p;

    pp[0] = 1.0;
    forn(i, n + 1)
        pp[i + 1] = pp[i] * p;

    forn(i, n + 2)
        forn(j, n + 2)
            a[i][j] = 0;
    
    f[0][0] = 1.0;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j <= i; j++)
        {
            f[i][j] = (1 - p) * f[i - 1][j];        
            if (j > 0)
                f[i][j] += p * f[i - 1][j - 1];
        }
    }

    /*
    forn(i, n + 1)
    {
        forn(j, n + 1)
            cout << f[i][j] << " ";
        cout << endl;
    }
    cout << endl;
    */

    a[0][0] = 1;
    a[0][n + 1] = 0;

    for (int i = 0; i < n; i++)
    {
        for (int j = n; j > i; j--)
        {
            a[i + 1][j] = f[n - i][j - i];
            a[i + 1][n + 1] += f[n - i][j - i];
        }

        a[i + 1][i] = f[n - i][i - i];
        a[i + 1][n + 1] += f[n - i][i - i];
        a[i + 1][i] -= 1.0;
    }

    n++;
    solve();
}

int main(int argc, char* argv[])
{
	freopen("input.txt", "rt", stdin);

	int testCases;
	cin >> testCases;

    int minTestCase = 0;
    if (argc >= 2)
        minTestCase = atoi(argv[1]);

    int maxTestCase = testCases - 1;
    if (argc >= 3)
        maxTestCase = atoi(argv[2]);

	forn(testCase, testCases)
	{
        read();
        if (testCase >= minTestCase && testCase <= maxTestCase)
        {
            cout << "Case #" << testCase + 1 << ": ";
            printf("%.10f\n", double(x[n - 1]));
        }
	}

	return 0;
}

import java.util.*;
import java.io.*;

public class ProblemB
{
	final static long[][] bin = new long[21][21];
	static
	{
		for(int n = 0; n<=20; n++) bin[n][0] = 1;
		for(int n = 1; n<=20; n++)
		for(int k = 1; k<=n; k++)
		bin[n][k] = bin[n-1][k] + bin[n-1][k-1];
	}

	static double[] mem;
	static double rek(final double[][] s, final int n)
	{
		if(n==20) return 0;
		if(mem[n]>0) return mem[n];

		double sum = 1;
		for(int i = 1; n+i<=20; i++) sum += s[n][n+i]*rek(s,n+i);
		return mem[n] = sum/(1-s[n][n]);
	}

	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);
final int L = 20;
		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{mem = new double[21];
			final double p = in.getDouble();
			final double[][] s = new double[L+1][L+1];
			for(int n = 0; n<=L; n++)
			{
				for(int k = 0; n+k<=L; k++)
				{
					double dp = bin[L-n][k];
					for(int i = 0; i<k; i++) dp *= p;
					for(int i = 0; i<L-n-k; i++) dp *= (1-p);
					s[n][n+k] = dp;
				}//System.err.println(n+": "+Arrays.toString(s[n]));
			}

			/*final double[][] m = new double[L+1][L+1]; //m[i] = s[0]*m[i] + s[1]*m[i+1] ... + 1    -1 = (s[0] - 1)*m[i]
			m[L][L] = 1;
			for(int i = 0; i<L; i++)
			{
				m[i][i] = s[i][i]-1;
				for(int j = i+1; j<=L; j++) m[i][j] = s[i][j];
				System.err.println(i+": "+Arrays.toString(m[i]));
			}

			final double[] v = new double[L+1];
			for(int i = 0; i<L; i++) v[i] = -1;

			//Gaussian elimination.
			for(int i = 0; i<=L; i++)
			{
				final double div = m[i][i]; if(Math.abs(div)<0.000001)System.err.println("div 0");
				for(int j = i; j<=L; j++) m[i][j] /= div;
				v[i] /= div;

				for(int j = 1; j<=L; j++)
				if(j!=i)
				{
					final double sub = m[j][i];
					for(int k = i; k<=L; k++) m[j][k] -= sub*m[i][k];
					v[j] -= sub*v[i];
				}
			}*/

			out.printf(Locale.US, "Case #%d: %.5f\r\n", t, rek(s,0)); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

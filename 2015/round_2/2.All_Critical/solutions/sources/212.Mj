#include <iostream>
#include <fstream>
#define last 20
using namespace std;

double E[( 1 << 20 )];
double dp[( 1 << 20 )][21][2];
double p;
double solveG( int mask );

ifstream fin( "B.in" );
ofstream fout( "B.out" );
#define cin fin
#define cout fout

double solveD( int mask, int idx, int change ){
	if( idx == last )
		return ( change ? ( 1. + solveG( mask ) ) : 0 );
	double& ref = dp[mask][idx][change];
	if( ref >= 0 )
		return ref;
	if( mask & ( 1 << idx ) )
		return ref = solveD( mask, idx + 1, change );
	return ref = p * ( solveD( mask | ( 1 << idx ), idx + 1, 1 ) ) + ( 1 - p ) * ( solveD( mask, idx + 1, change ) );
}

double solveG( int mask ){
	if( E[mask] >= 0 )
		return E[mask];
	if( mask == ( 1 << last ) - 1 )
		return 0;
	double sub = solveD( mask, 0, 0 );
	double pp = 1.0;
	for( int i = 0; i < last; i++ )
		if( !( mask & ( 1 << i ) ) )
			pp *= ( 1. - p );
	//if( mask == 1 )
	//	cout << "HERE " << sub << ' ' << pp << endl;
	E[mask] = ( sub + pp ) / ( 1 - pp );
	return E[mask];
}

int main()
{
	int test;
	cin >> test;
	for( int T = 1; T <= test; T++ ){
		cerr << T << endl;
		cin >> p;
		for( int i = 0; i < ( 1 << last ); i++ ){
			E[i] = -1;
			for( int j = 0; j < last; j++ )
				dp[i][j][0] = dp[i][j][1] = -1;
		}
		//for( int i = 0; i < ( 1 << last ); i++ )
		//	cout << i << ' ' << solveG( i ) << endl;
		cout.setf( ios::showpoint | ios::fixed );
		cout.precision( 7 );
		cout << "Case #" << T << ": " << solveG( 0 ) << endl;
	}

	return 0;
}
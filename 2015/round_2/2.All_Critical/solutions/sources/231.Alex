#include <iostream>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <bitset>
#include <queue>
#include <deque>
#include <list>
#include <algorithm>
#include <iomanip>

using namespace std;

typedef pair<int, int> pt;
typedef long long li;
typedef long double ld;

template<typename X> inline X abs(const X& a) { return a < 0 ? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

#define forn(i,n) for(int i = 0; i < int(n); i++)
#define pb push_back
#define sz(a) int(a.size())
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++) 
#define ft first
#define sc second
#define x first
#define y second

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = ld(1e-9);
const ld PI = acos(-1.0);
const int N = 200000;

ld z[N][21];
ld p;
li c[21][21];
li fac[21];

inline bool read()
{
	cin >> p;	
	return true;
}

inline void solve()
{
	for(int i = 0; i < N; i++)
		for(int j = 0; j <= 20; j++)
			z[i][j] = 0;
	z[0][0] = 1;
	for(int it = 0; it < N - 1; it++)
	{
		for(int pr = 0; pr < 20; pr++)
		{
			for(int now = 0; now <= 20; now++)
			{
				if(now + pr > 20)
					continue;
				int bad = 20 - now - pr;
				ld cur = (ld)c[bad + now][now];
				for(int i = 0; i < now; i++)
					cur *= p;
				for(int i = 0; i < bad; i++)
					cur *= ((ld)1 - p);
				z[it + 1][pr + now] += z[it][pr] * cur;
			}
		}
	}
	ld ans = 0;
	
	
	for(int i = 0; i < N; i++)
		ans += z[i][20] * i;
	cout << ans << endl;
}

li get(int i, int j)
{
	return fac[i] / fac[j] / fac[i - j];
}

int main()
{
    freopen("all_critical.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cerr << setprecision(10) << fixed;
    cout << setprecision(15) << fixed;    
    srand(time(NULL));
	fac[0] = 1;
	for(li i = 1; i <= 20; i++)
		fac[i] = fac[i - 1] * i;
	for(int i = 0; i <= 20; i++)
		for(int j = 0; j <= i; j++)
			c[i][j] = get(i, j);		
    int tests;
    cin >> tests;
    for(int test = 0; test < tests; test++)
    {
    	cerr << test << endl;
		read();
    	printf("Case #%d: ", test + 1);
	    solve();
	}         
	return 0;
}
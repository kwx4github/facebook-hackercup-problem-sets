#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
 
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
const int MN = 50500;
double comb[200][200];
void init() {
    comb[0][0] = 1;
    for (int i = 1; i < 200; i++) {
        comb[i][0] = 1;
        for (int j = 1; j < 200; j++) {
            comb[i][j] = comb[i-1][j]+comb[i-1][j-1];
        }
    }
}

double p;

double dp[200];
bool used[200];

double factp[200];
double fact1p[200];
void pinit() {
    memset(used, 0, sizeof(used));
    factp[0] = 1.0;
    for (int i = 1; i < 200; i++) {
        factp[i] = factp[i-1]*p;
    }
    fact1p[0] = 1.0;
    for (int i = 1; i < 200; i++) {
        fact1p[i] = fact1p[i-1]*(1-p);
    }
}

double calc(int n) {
    if (n == 0) return 0;
    if (used[n]) return dp[n];
    used[n] = true;
    double u = 1.0;
    for (int i = 0; i < n; i++) {
        u *= (1-p);
    }
    double res = 0;
    for (int i = 1; i <= n; i++) {
        res += calc(n-i)*comb[n][i]*factp[i]*fact1p[n-i];
    }
    res /= (1-u);
    res += 1/(1-u);
    return dp[n] = res;
}

double solve() {
    pinit();
    return calc(20);
}

int main() {
    init();
    int T;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        cin >> p;
        printf("Case #%d: %.5f\n", t, solve());
    }
    return 0;
}
import math

NBARS = 20
T = input()

def n_choose_r(n, r):
    return math.factorial(n) / (math.factorial(n - r) * math.factorial(r))

for case_num in range(1, T + 1):
    p = input()

    # hit_chance[a][h] is the probability of hitting exactly h targets out of
    # a available targets given p probability of hitting a target.
    hit_chance = [[0] * (NBARS + 1) for i in xrange(NBARS + 1)]

    for h in xrange(NBARS + 1):
        for a in xrange(NBARS + 1):
            if h > a:
                continue
            hit_chance[a][h] = (
                n_choose_r(a, h) * (p ** h) * ((1 - p) ** (a - h))
            )

    # P[g][b] = the probability that after g games, exactly g critical bars
    # have been saved
    P = [[0 for i in xrange(NBARS + 1)]]
    P[0][0] = 1.0

    g = 1
    ans = 0.0
    while True:
        P.append([0 for i in xrange(NBARS + 1)])

        for b in xrange(NBARS + 1):
            # n is the number of bars hit in this round.
            # b-n is the number of bars saved after the end of the previous
            # round.
            for n in xrange(b + 1):
                P[g][b] += P[g-1][b-n] * hit_chance[NBARS - (b - n)][n]

        ans += g * (P[g][NBARS] - P[g-1][NBARS])

        # The next contribution is at most g * (1 - P[g][NBARS]), so if that's
        # less than our threshold, bail out.
        if (g * (1 - P[g][NBARS]) < 0.000001):
            break

        g += 1

    print "Case #%d: %.5f" % (case_num, ans)

#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <utility>
#include <numeric>
#include <fstream>

using namespace std;

#define		ALL(c)	(c).begin(),(c).end()
#define		SZ(c)	int((c).size())
#define		LEN(s)	int((s).length())
#define		FOR(i,n)	for(int i=0;i<(n);++i)
#define		FORD(i,a,b)	for(int i=(a);i<=(b);++i)
#define		FORR(i,a,b)	for(int i=(b);i>=(a);--i)

typedef istringstream iss;
typedef ostringstream oss;
typedef long double ld;
typedef long long i64;
typedef pair<int,int> pii;

typedef vector<i64> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;

typedef vector<ld> vd;
typedef vector<vd> vvd;

typedef vector<string> vs;

const i64 d18 = 1000000000000000000LL;
const ld eps = 1e-9;
const ld pi = atan2(0.0, -1.0);
template<class T> T sqr(T a) { return a * a; }
i64 abs(i64 a) { return (a >= 0) ? a : -a; }

ofstream LOG("log.txt");

ifstream fin;
ofstream fout;

i64 C[21][21];
ld P[21], Q[21];
ld F[2][21];

void solve_case(int TN)
{
	ld p, q;
	fin >> p;
	q = 1-p;

	P[0] = 1.0;
	Q[0] = 1.0;
	FORD(i, 1, 20)
	{
		P[i] = P[i-1] * p;
		Q[i] = Q[i-1] * q;
	}

	FOR(i, 21) F[0][i] = F[1][i] = 0.0;

	ld ans = 0.0;
	F[0][0] = 1.0;
	for (int ii = 1; ; ii++)
	{
		int i = ii & 1;
		FOR(j, 21) F[i][j] = 0.0;
		FORD(j, 0, 19)
		{
			int s = 20-j;
			FORD(k, 0, s)
			{
				F[i][j+k] += F[1-i][j] * P[k] * Q[s-k] * C[s][k];
			}
		}
		ans += F[i][20] * ii;
		ld tmp = 0.0;
		FOR(j, 21) tmp += F[i][j];
		if (tmp < 1e-12) break;
	}

	fout << fixed << setprecision(7) << "Case #" << TN << ": " << ans << endl;
	cout << fixed << setprecision(7) << "Case #" << TN << ": " << ans << endl;
}

int main()
{
	C[0][0] = 1;
	FORD(i, 1, 20) 
	{
		C[i][0] = 1;
		FORD(j, 1, 20)
			C[i][j] = C[i-1][j] + C[i-1][j-1];
	}

	fin.open("B.in"); 
	fout.open("B.out");

	int T; 
	fin >> T;
	FOR(tt, T)
	{
		solve_case(tt+1);
	}

	return 0;	
}

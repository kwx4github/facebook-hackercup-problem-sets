#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>

using namespace std;


long double probs[30][30];
int c[30][30];
long double p;
long double p2;
long double E[30];


int choose(int remaining, int hit) {
    if (hit == 0 || hit == remaining) {
        return 1;
    }
    if (c[remaining][hit] < 0) {
        c[remaining][hit] = choose(remaining - 1, hit - 1) + choose(remaining - 1, hit);
    }
    return c[remaining][hit];
}


long double get_prob(int remaining, int hit) {
    if (probs[remaining][hit] >= 0.0) {
        return probs[remaining][hit];
    }
    probs[remaining][hit] = choose(remaining, hit);
    for (int i = 0; i < hit; i++) {
        probs[remaining][hit] *= p;
    }
    for (int i = hit; i < remaining; i++) {
        probs[remaining][hit] *= (p2);
    }
    return probs[remaining][hit];
}

long double expected(int N) {
    if (N == 0) {
        return 0;
    }
    if (E[N] >= 0.0) {
        return E[N];
    }
    long double res = 1.0;
    for (int i = 1; i <= N; i++) {
        res += get_prob(N, i) * expected(N - i);
    }
    res /= (1.0 - get_prob(N, 0));
    E[N] = res;
    return E[N];
}

long double compute() {
    cin >> p;
    p2 = 1.0 - p;
    for (int i = 0; i < 30; i++) {
        for (int j = 0; j < 30; j++) {
            probs[i][j] = -1.0;
            c[i][j] = -1;
        }
        E[i] = -1.0;
    }
    return expected(20);
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; i++) {
        long double res = compute();
        // cout << "Case #" << i << ": " << res << endl;
        printf("Case #%d: %.8llf\n", i, res);
    }
    return 0;
}


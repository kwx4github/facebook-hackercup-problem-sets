#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
// #define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<pair<int, ll> > > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...

long double f(int n, long double p, long long num)
{
    if (num == 0)
    {
        return pow(1 - p, 20 * (n - 1));
    }
    long double ans = 0;
    long double t = p;
    for (int i = 0; i < n - 1; i++)
    {
        ans += t;
        t *= (1 - p);
    }
    return pow(ans, num);
}

long long C(ll n, ll k)
{
    ll ans = 1;
    ll a = k, b = n - k;
    if (a < b)
        swap(a, b);
    for (ll i = a + 1; i <= n; i++)
        ans *= i;
    for (ll i = 1; i <= b; i++)
        ans /= i;
    return ans;
}

void solve(int test)
{
    long double p;
    cin >> p;
    long double ans = 0;
    for (ll i = 1; i <= 10000; i++)
    {
        for (int t = 1; t <= 20; t++)
        {
            ans += i * (pow(p, t) * pow(1 - p, t * (i - 1)) * f(i, p, 20 - t)) * C(20, t);
        }
    }
    printf("Case #%d: %.05LF\n", test, ans);
    return;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    int T;
    cin >> T;
    for (int q = 0; q < T; q++)
    {
        solve(q + 1);
    }
    #ifdef HOME
        cerr << "\ntime = " << clock() / 1000 << " ms\n";
    #endif
    return 0;
}
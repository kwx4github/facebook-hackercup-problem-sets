#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<set>
using namespace std;
#define FOR(i,a,n) for(int i = (a); i <= (n); ++i)
#define FORD(i,a,n) for(int i = (a); i >= (n); --i)
#define REP(i,n) FOR(i,0,(n)-1)
#define RI(i,n) FOR(i,1,(n))
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
#ifdef LOK
#define debug printf
#else
#define debug if(0)printf
#endif
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 1e6 + 5;

ld p, potp[100], potop[100];
ld wyn[100][1007];
ll tab[107][107];
int testy;

ld newton(int n, int k) {
	return (ld)tab[n-k][k];
}

void solve() {
	scanf("%Lf",&p);
	potp[0] = 1.;
	potop[0] = 1.;
	FOR(i,1,20) potp[i] = potp[i-1] * p;
	FOR(i,1,20) potop[i] = potop[i-1] * (1.0 - p);
	
	ld result = 0.;
	FOR(i,0,20) FOR(j,0,1000) wyn[i][j] = 0.;
	wyn[0][0] = 1.;
	FOR(i,0,20) FOR(j,0,1000) {
		if (i == 20) {
			result += wyn[i][j]*ld(j);
		}
		else if (j != 1000) {
			FOR(k,i,20) 
				wyn[k][j+1] += newton(20-i,k-i) * wyn[i][j] * (potp[k-i] * potop[20-k]);
		}
	}
	
	//printf("%Lf\n",newton(20,10));
	
	//FOR(i,1,20) printf("%Lf\n",wyn[i][1]);
	
	printf("%.5Lf\n",result);
}	

int main() {
	FOR(i,0,100) tab[i][0] = tab[0][i] = 1;
	FOR(i,1,100) FOR(j,1,100) 
		tab[i][j] = tab[i-1][j] + tab[i][j-1];
	scanf("%d",&testy);
	FOR(g,1,testy) {
		printf("Case #%d: ",g);
		solve();
	}
	return 0;
}

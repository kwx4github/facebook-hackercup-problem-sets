#include <cstdio>
#include <algorithm>
using namespace std;

typedef long double LD;

const int MAX_TIME = 40000;
const int MAX_SECURE = 20;

LD newt[MAX_SECURE+1], powp[MAX_SECURE+1], powpp[MAX_SECURE+1], m[MAX_SECURE+1], M[MAX_SECURE+1][MAX_SECURE+1], P[MAX_SECURE+1][MAX_SECURE+1], NP[MAX_SECURE+1][MAX_SECURE+1];

LD Factorial(int n) {
    LD result = 1.0;
    for (int i = 1; i <= n; i++) result *= (LD)i;
    return result;
}

LD Newton(int n, int k) {
    return Factorial(n) / (Factorial(k) * Factorial(n-k));
}

int main() {
    int q, caseId = 0;
    scanf("%d", &q);

    for (int i = 0; i <= MAX_SECURE; i++)
        newt[i] = Newton(MAX_SECURE, i);

    while (q--) {
        LD p;
        scanf("%Lf", &p);

        powp[0] = 1.0;
        for (int i = 1; i <= MAX_SECURE; i++)
            powp[i] = powp[i-1]*p;

        powpp[0] = 1.0;
        for (int i = 1; i <= MAX_SECURE; i++)
            powpp[i] = powpp[i-1]*(1.0-p);

        for (int i = 0; i <= MAX_SECURE; i++)
            P[i][i] = 1.0;

        for (int i = 0; i <= MAX_SECURE; i++)
            for (int j = 0; j <= MAX_SECURE-i; j++)
                M[i][i+j] += powp[j] * powpp[MAX_SECURE-i-j] * Newton(MAX_SECURE-i, j);

        /*
        for (int i = 0; i <= MAX_SECURE; i++) {
            for (int j = 0; j <= MAX_SECURE; j++)
                printf("%.3Lf ", M[i][j]);
            printf("\n");
        }
        */
        
        LD result = 0.0;
        for (int i = 1; i <= MAX_TIME; i++) {
            for (int a = 0; a <= MAX_SECURE; a++)
                for (int b = 0; b <= MAX_SECURE; b++)
                    for (int c = 0; c <= MAX_SECURE; c++)
                        NP[a][b] += P[a][c] * M[c][b];
            for (int a = 0; a <= MAX_SECURE; a++)
                for (int b = 0; b <= MAX_SECURE; b++) {
                    P[a][b] = NP[a][b];
                    NP[a][b] = 0.0;
                }
            result += 1.0-P[0][MAX_SECURE];
        }

        for (int a = 0; a <= MAX_SECURE; a++)
            for (int b = 0; b <= MAX_SECURE; b++) {
                P[a][b] = 0.0;
                M[a][b] = 0.0;
            }

        caseId++;
        printf("Case #%d: ", caseId);
        printf("%.5Lf\n", result+1.0);
    }
    return 0;
}

#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <bitset>
#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;
const string task = "";

template <class T> T sqr (T x) {return x * x;}

const int N = 20;

double p;
double t[2][N+1];
double c[N + 1][N + 1];
double pw[N + 1];
double npw[N + 1];

void solve() {
	cin >> p;
	forn(i, N+1) {
		pw[i] = pow(p, i);
		npw[i] = pow(1 - p, i);
	}
	double ans = 0;
	seta(t, 0);
	t[0][0] = 1;
	int steps = 0;
	while (steps < 1000 * 100) {
		int cur = steps & 1;
		int nxt = cur ^ 1;
		seta(t[nxt], 0);
		forn(i, N) {
			for (int j = i; j <= N; j++) {
				t[nxt][j] += t[cur][i] * pw[j - i] * npw[N - j] * c[N - i][j - i];
			}
		}
		steps++;
		ans += steps * t[nxt][N];
	}
	printf("%.5lf\n", ans);
}

int main () {
//	freopen ((task + ".in").data(), "r", stdin);
//	freopen ((task + ".out").data(), "w", stdout);
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
	seta(c, 0);
	forn(i, N + 1)
		c[i][0] = 1;
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
			c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
	}
	return 0;
}

'''
Created on 24 Jan 2015

@author: luke
'''

bins = [1]
for i in xrange(1,21):
    bins = [1] + [bins[i-1]+bins[i] for i in xrange(1,len(bins))] + [1]
    
def f(p):
    # Probability that X_i <= k = p(1+...+(1-p)^{k-1}) = (1+...+(1-p)^{k-1}) - ((1-p)+...+(1-p)^k) = 1-(1-p)^k
    # Probability that all of the X_i's <= k is (1-(1-p)^k)^20
    # Probability that it takes all of the X_i's is >= k is 1-(1-(1-p)^{k-1})^20
    
    # Expected value is sum_{i=1}^{\infinity} 1-(1-(1-p)^{i-1})^20
    #                   = sum_{j=1}^{20} (-1)^(j+1)binom(20,j) sum_{i=1}^{\infinity} (1-p)^{(i-1)j}
    #                   = sum_{j=1}^{20} (-1)^(j+1)binom(20,j) (1-p)^j/(1-(1-p)^j)
    return 1+sum([((-1)**(j+1))*bins[j]*((1-p)**j)/(1-((1-p)**j)) for j in xrange(1,21)])

input = open("all_critical.txt")
output = open("all_critical_output.txt", "w")

numCases = int(input.readline())
for caseIndex in xrange(1, 1 + numCases):
    prob = float(input.readline())
    output.write("Case #%d: %.9f\n" % (caseIndex, f(prob)))

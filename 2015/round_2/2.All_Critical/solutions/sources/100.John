#include <cstdlib>
#include <cassert>
#include <vector>
#include <string>
#include <cstring>
#include <cstdio>
#include <stack>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vd V(long double)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()

//#define fk fkr(n)
#include <map>
//#include <set>
#include <algorithm>
//#define ll long long
//#define flr(n) fo(l,n)
//#define fl flr(n)
//#define ins(x) insert(x)
#define df long double
//#define srt(f) sort(f.begin(),f.end())




df ncr[30][30];

int main(void) {
  int i,j,k,n=21;

  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    df p;
    assert(scanf("%Lf",&p)==1);
    fprintf(stderr,"%Lf\n",p);
    assert(p>=0.01-1e-10);
    assert(p<=1.0);

    fir(30) fjr(30) ncr[i][j]=0.0;
    ncr[0][0]=1.0;
    fr(i,1,30) fjr(30) {
      ncr[i][j]+=ncr[i-1][j]*(1-p);
      if(j) ncr[i][j]+=ncr[i-1][j-1]*p;
    }

    vd f(21);
    df ans=0;
    f[20]=1;
    df add=0;
    for(int it=0;it<100000;it++) {
      {
        vd g=vd(21);
        fj fkr(j+1) g[k]+=f[j]*ncr[j][j-k];
        f.swap(g);
      }
      add=0;
      fi add+=f[i];
      ans+=add;
      f[0]=0;
    }
    fprintf(stderr,"add = %.12Lf\n",add);

    printf("Case #%d: %.5Lf\n",cas,ans);
  }
  return 0;
}

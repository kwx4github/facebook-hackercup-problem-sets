#include <cstdio>

using namespace std;

const int maxn = 20;
const long double eps = 1e-15;

int casei, cases;
long double pr, ans;
int combi[maxn + 5][maxn + 5];
long double onepass[maxn + 5];
long double probs[2][maxn + 5];

void prepare() {
	combi[0][0] = 1;
	for (int i = 1; i <= maxn; ++i) {
		combi[i][0] = 1;
		combi[i][i] = 1;
		for (int j = 1; j < i; ++j)
			combi[i][j] = combi[i - 1][j - 1] + combi[i - 1][j];
	}
	/*
	for (int i = 0; i <= maxn; ++i) {
		printf("%d:", i);
		for (int j = 0; j <= maxn; ++j) printf("\t%d", combi[i][j]);
		printf("\n");
	}*/
}

void process() {
	for (int i = 0; i <= maxn; ++i) {
		onepass[i] = 1.0;
		for (int j = 0; j < i; ++j) onepass[i] *= pr;
		for (int j = 0; j < maxn - i; ++j) onepass[i] *= (1 - pr);
	}
	
	
	int now = 0;
	probs[0][0] = 1.0;
	for (int i = 1; i <= maxn; ++i) probs[0][i] = 0.0;
	ans = 0.0;
	int step = 0, last;
	long double delta;
	while (true) {
		++step;
		last = now;
		now ^= 1;
		for (int i = 0; i <= maxn; ++i) probs[now][i] = 0.0;
		
		delta = 0.0;
		for (int i = 0; i <= maxn; ++i) {
			for (int j = 0; j <= i; ++j)
				for (int k = 0; k <= maxn - i; ++k) {
					probs[now][i + k] += probs[last][i] * combi[i][j] * combi[maxn - i][k] * onepass[j + k];
				}
			if (i == maxn - 1)
				delta = probs[now][maxn];
		}
		
		//printf("Step %d:", step);
		//for (int i = 0; i <= maxn; ++i) printf("\t%.5f", probs[now][i]);
		
		delta *= step;
		ans += delta;
		if (1 - probs[now][maxn] < eps) break;
	}
}


int main() {
	prepare();
	
	scanf("%d", &cases);
	for (casei = 1; casei <= cases; ++casei) {
		scanf("%Lf", &pr);
		process();
		printf("Case #%d: %.5Lf\n", casei, ans);
	}
	
	return 0;
}
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"

const int n = 20;
ld dp[n + 1];
ld stp1[n + 1];
ld stp2[n + 1];
ld cnk[n + 1][n + 1];
void solve() {
  ld p;
  scanf("%lf", &p);
  dp[0] = 0;
  stp1[0] = 1;
  stp2[0] = 1;
  for (int i = 1; i <= n; i++) {
    stp1[i] = stp1[i - 1] * p;
    stp2[i] = stp2[i - 1] * (1 - p);
  }
  for (int i = 0; i <= n; i++) {
    cnk[i][0] = 1;
    for (int j = 1; j <= i; j++) {
      cnk[i][j] = cnk[i - 1][j - 1] + cnk[i - 1][j];
    }
  }
  for (int i = 1; i <= n; i++) {
    ld val = 1;
    for (int j = 0; j < i; j++) {
      val += dp[j] * stp1[i - j] * stp2[j] * cnk[i][j];
    }
    dp[i] = val / (1 - stp2[i]);
  }   
  printf("%.5f\n", dp[n]);
}

int main(){
  #ifdef home
  assert(freopen(problem_name".out","wt",stdout));
  assert(freopen(problem_name".in","rt",stdin));
  #endif
  int T;
  scanf("%d", &T);
  for (int ti = 1; ti <= T; ti++) {
    printf("Case #%d: ", ti);
    solve();
  }
  return 0;
}

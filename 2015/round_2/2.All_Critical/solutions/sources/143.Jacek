#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void GEN(int a, int b, int c, int r, int k, int x[]) {
	x[0] = a;
	FOR(i,1,k) x[i] = (LL(x[i - 1]) * b + c) % r;
}

void oneCase();

LD binom[30][30];

void init() {
	REP(i,30) REP(j,i+1)
		binom[i][j] = (!j || j == i) ? 1 : binom[i-1][j-1] + binom[i-1][j];
}

int main() {
	init();
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}




LD res[30], pp[30], qq[30];

void oneCase() {
	double p1;
	scanf("%lf", &p1);
	LD p = p1;
	LD q = 1 - p;
	pp[0] = qq[0] = 1;
	FOR(i,1,30) {
		pp[i] = pp[i-1] * p;
		qq[i] = qq[i-1] * q;
	}
	res[0] = 0;
	FOR(i,1,21) {
		LD r = 0;
		FOR(j,1,i+1)
			r += binom[i][j] * pp[j] * qq[i-j] * (res[i-j] + 1);
		res[i] = (qq[i] + r) / (1 - qq[i]);
	}
	printf("%.5lf\n", double(res[20]));
}

import java.util.*;
import java.io.*;

public class B {
	FastScanner in;
	PrintWriter out;

	public void solve() throws IOException {
		double p = in.nextDouble();
		int n = 20;
		
		int count = (1 << n);
		int[] countAll = new int[n + 1];
		for (int pr = 0; pr < count; pr++) {
			countAll[Integer.bitCount(pr)]++;
		}
		
		int iters = 30000;
		double[][] dp = new double[iters][n + 1];
		double[] ps = new double[n + 1];
		double[] qs = new double[n + 1];
		ps[0] = 1;
		for (int i = 1; i <= n; i++)
			ps[i] = ps[i - 1] * p;
		qs[0] = 1;
		for (int i = 1; i <= n; i++)
			qs[i] = qs[i - 1] * (1 - p);
		double[] maskProb = new double[n + 1];
		for (int i = 0; i <= n; i++) {
			maskProb[i] = ps[i] * qs[n - i];
		}
		int[][] c = new int[n + 1][n + 1];
		for (int i = 0; i <= n; i++)
			c[i][0] = 1;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
			}
		}
		
		dp[0][0] = 1;
		for (int it = 0; it < iters - 1; it++) {
			for (int countOne = 0; countOne <= n; countOne++) {
				dp[it][countOne] /= countAll[countOne];
			}
			for (int cur = 0; cur < n; cur++) {
				int curPr = 0;
				for (int i = 0; i < cur; i++)
					curPr += (1 << i);
				for (int addOne = 0; addOne <= n - cur; addOne++) {
					double curProb = 1;
					for (int i = 0; i < addOne; ++i)
						curProb *= p;
					for (int i = 0; i < n - cur - addOne; i++)
						curProb *= (1 - p);
					dp[it + 1][cur + addOne] += countAll[cur] * dp[it][cur] * curProb * c[n - cur][addOne];
					
				}
			}
		}
		double res = 0;
		for (int it = 0; it < iters; ++it) {
			res += dp[it][n] * it;
		}
		out.println(res);
	}

	public void run() {
		try {
			in = new FastScanner(new File("a.in"));
			out = new PrintWriter(new File("a.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new B().run();
	}
}
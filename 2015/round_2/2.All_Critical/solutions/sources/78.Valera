#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <numeric>

using namespace std;

#define sqr(a) ((a)*(a))
#define two(a) (1 << (a))
#define has(mask, a) ((mask) & two(a) ? 1 : 0)

long double p, a[25][25], pp[25], ip[25];

int c[25][25];

void load() {
	cin >> p;
}

void solve(int test) {
	for (int i = 0;i <= 20;i++) {
		c[i][0] = 1;
		for (int j = 1;j <= i;j++) {
			c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
		}
	}

	ip[0] = 1;
	pp[0] = 1;
	for (int i = 1;i <= 20;i++) {
		ip[i] = ip[i - 1] * (1.0 - p);
		pp[i] = pp[i - 1] * p;
	}

	memset(a, 0, sizeof (a));
	a[0][0] = 1.0;
	for (int i = 1;i <= 20;i++) {
		for (int j = 0;j < i;j++) {
			a[i][j] = pp[i - j] * c[i][i - j] * ip[j];
		}
		a[i][21] = -1.0;
		a[i][i] = ip[i] - 1.0;
	}

	for (int i = 0;i <= 20;i++) {
		assert(fabs(a[i][i]) > 1e-9);

		long double t = a[i][i];
		for (int j = 0;j <= 21;j++) {
			a[i][j] /= t;
		}

		for (int j = i + 1;j <= 20;j++) {
			long double t = a[j][i];
			for (int k = 0;k <= 21;k++) {
				a[j][k] -= t * a[i][k];
			}
		}
	}
	printf ("Case #%d: %.5f\n", test, (double)a[20][21]);
}

int main() {
 	freopen ("a.in", "r", stdin);

 	int t;
 	scanf ("%d\n", &t);

 	clock_t start = clock();
 	for (int i = 1;i <= t;i++) {
 		clock_t cur_start = clock();

 		fprintf(stderr, "Test %d:\n", i);
 		load();
 		solve(i);
 		fprintf(stderr, "Done in %.3f\n", (clock() - cur_start) / (double)CLOCKS_PER_SEC);
 	}

 	fprintf(stderr, "Total time: %.3f\n", (clock() - start) / (double)CLOCKS_PER_SEC);

 	return 0;
}
#include <bits/stdc++.h>
using namespace std;

int c[21][21];

double mat[21][22], answer[21];

bool gauss(int tot) {
	for (int k = 0; k < tot; ++k) {
		int dec = k;
		for (int i = k + 1; i < tot; ++i)
			if (fabs(mat[i][k]) > fabs(mat[dec][k]))
				dec = i;
		if (-1e-6 <= mat[dec][k] && mat[dec][k] <= 1e-6)
			return false;
		if (dec != k) {							// 交换矩阵的行，解不变！！！
			for (int j = k; j <= tot; ++j)
				swap(mat[k][j], mat[dec][j]);
		}
		for (int i = k + 1; i < tot; ++i) {
			double r = mat[i][k] / mat[k][k];
			mat[i][k] = 0.0;
			for (int j = k + 1; j <= tot; ++j)
				mat[i][j] -= mat[k][j] * r;
		}
	}
	for (int k = tot - 1; k >= 0; --k) {
		answer[k] = mat[k][tot];
		for (int i = k + 1; i < tot; ++i)
			answer[k] -= mat[k][i] * answer[i];
		answer[k] /= mat[k][k];
	}
	return true;
}

int main() {
  for (int i = 0; i <= 20; ++i) {
    c[i][0] = 1;
    for (int j = 1; j <= i; ++j)
      c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
  }
  int test; scanf("%d", &test);
  for (int cas = 1; cas <= test; ++cas) {
    double p; scanf("%lf", &p);
    double pp[21], np[21];
    pp[0] = 1; np[0] = 1;
    for (int i = 1; i <= 20; ++i) {
      pp[i] = pp[i - 1] * p;
      np[i] = np[i - 1] * (1 - p);
      //printf("%8f %8f\n", pp[i], np[i]);
    }
    memset(mat, 0, sizeof mat); memset(answer, 0, sizeof answer);
    mat[20][20] = 1; mat[20][21] = 0;
    for (int i = 0; i < 20; ++i) {
      mat[i][i] = 1;
      for (int j = 0; i + j <= 20; ++j) {
        double po = c[20 - i][j] * pp[j] * np[20 - i - j];
        mat[i][21] += po;
        mat[i][i + j] -= po;
      }
      /*if (i == 19) {
        for (int j = 0; j <= 21; ++j) {
          printf("%5f ", mat[i][j]);
        }
        puts("");
      }*/
    }
    gauss(21);
    printf("Case #%d: %.5f\n", cas, answer[0]);
  }
  return 0;
}

#include <iostream>
#include <iomanip>

using namespace std;

#define M 25
#define N 32768

int ones[N];
double powp[M], powrp[M];
double dp[N];

void preprocess() {
	for (int i = 0; i < N; i++)
		ones[i] = __builtin_popcount(i);
}

double calc(int state) {
	double& ret = dp[state];
	if (ret == -1.0) {
		ret = 1.0;
		int k = ones[state];
		double pre = 1.0 - powrp[20-k];
		if (state == N - 1)
			pre = 1.0;
		for (int ps = 0; ps < N; ps++)
			if ((ps & state) == ps && ps < state) {
				int added = ps ^ state;
				int kk = ones[added];
				ret += powp[kk] * powrp[20-k] * calc(ps);
			}
		ret /= pre;
		for (int s = 0; s < N; s++)
			if (ones[s] == k)
				dp[s] = ret;
	}
	return ret;
}

void run(int case_no) {
	double p, rp, ans = 0.0;

	cin >> p;
	rp = 1.0 - p;

	powp[0] = powrp[0] = 1.0;
	for (int i = 1; i < M; i++) {
		powp[i] = powp[i-1] * p;
		powrp[i] = powrp[i-1] * rp;
	}

	for (int i = 0; i < N; i++)
		dp[i] = -1.0;

	dp[0] = 1.0 / (1.0 - powrp[20]);

	cout << setprecision(15) << "Case #" << case_no << ": " << calc(N-1) << endl;
}

int main() {
	int t;

	ios::sync_with_stdio(0);
	preprocess();
	
	cin >> t;
	for (int case_no = 1; case_no <= t; case_no++)
		run(case_no);

	return 0;
}
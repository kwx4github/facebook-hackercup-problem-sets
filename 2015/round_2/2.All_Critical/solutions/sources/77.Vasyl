#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MAX 20
#define LIMIT (10 << 10)

int C[32][32];
double A[32][32];
double P[32];
double Q[32];
double R[32];

int SolveTest(int test)
{
	double p;
	scanf("%lf", &p);

	int i, j, k;
	P[0] = Q[0] = 1;
	FOR(i, 0, MAX)
	{
		P[i + 1] = P[i] * p;
		Q[i + 1] = Q[i] * (1 - p);
	}

	FOR(i, 0, MAX + 1)
		C[i][i] = C[i][0] = 1;
	FOR(i, 0, MAX + 1)
		FOR(j, 1, i)
		C[i][j] = C[i - 1][j - 1] + C[i - 1][j];

	CLEAR(A, 0);
	FOR(i, 0, MAX)
		FOR(j, i, MAX + 1)
		{
			int all = MAX - i;
			int left = MAX - j;
			double prob = C[all][left] * Q[left] * P[all - left];
			A[i][j] += prob;
		}

	CLEAR(R, 0);
	R[0] = 1;
	double res = 0;
	FOR(i, 0, LIMIT)
	{
		RFOR(j, MAX, 0)
		{
			FOR(k, j + 1, MAX + 1)
				R[k] += R[j] * A[j][k];

			R[j] *= A[j][j];
		}

		res += R[MAX] * (i + 1);
		R[MAX] = 0;
//		if (i % 1000 == 0)
//			printf("%d - %.11lf\n", i, res);
	}

	printf("Case #%d: %.5lf\n", test + 1, res);
	return 0;
}

int main()
{
	freopen("b.in", "r", stdin);
	freopen("b.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 20;
const int M = 20000;
ld p;

inline bool read()
{
	if (!(cin >> p))
		return false;

	return true;
}

ld d[M + 1][N + 1];
ld C[N + 13][N + 13];
ld powP[N + 13], powPP[N + 13];

inline void solve()
{
	powP[0] = 1, powPP[0] = 1;
	for (int i = 1; i < N + 13; i++)
	{
		powP[i] = powP[i - 1] * p;
		powPP[i] = powPP[i - 1] * (ld(1) - p);
	}

	forn (i, N + 13)
	{
		C[i][0] = C[i][i] = 1;

		for (int j = 1; j < i; j++)
			C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
	}

	forn (i, M + 1)
		forn (j, N + 1)
			d[i][j] = 0;

	d[0][0] = 1;
	ld ans = 0;

	forn (i, M)
	{
		ans += i * d[i][N];

		forn (j, N)
		{
			ld dv = d[i][j];

			forn (add, N - j + 1)
				forn (last, j + 1)
					d[i + 1][j + add] += dv * C[j][last] * powP[last + add] * C[N - j][add] * powPP[N - add - last];
		}
	}

	cout << ans << endl;
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(5) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);

	forn (test, testCnt)
	{
		printf ("Case #%d: ", test + 1);

		assert(read());
		solve();
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

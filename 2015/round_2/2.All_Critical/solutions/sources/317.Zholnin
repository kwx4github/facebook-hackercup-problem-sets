#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>

using namespace std;

unsigned long long choose(unsigned long long n, unsigned long long k) {
	if (k > n) {
		return 0;
	}
	unsigned long long r = 1;
	for (unsigned long long d = 1; d <= k; ++d) {
		r *= n--;
		r /= d;
	}
	return r;
}

vector<vector<double>> memo;

double dive(double probability, int songsleft, int depth)
{
	if (songsleft == 0) return 0.0;
	if (depth > 3000) return 0.0;
	if (memo[songsleft][depth] != -1.0) return memo[songsleft][depth];

	double result = 0.0;

	for (int i = 0; i <= songsleft; i++)
	{
		long long c = choose(songsleft, i);
		double section = log(c) + log(probability) * i + log(1.0 - probability) * (songsleft - i);
		result += exp(section) * dive(probability, songsleft - i, depth + 1);
	}

	memo[songsleft][depth] = result + 1.0;
	return result + 1.0;
}

int main()
{
	freopen("all_critical.txt", "r", stdin);
	freopen("OUTPUT.TXT", "w", stdout);

	int T, caseno = 1;
	cin >> T;


	while (T--)
	{
		double probability;

		cin >> probability;


		memo = vector<vector<double>>(21, vector<double>(10001, -1.0));
		
		if (probability > 0.99999999) cout << "Case #" << caseno++ << ": 1.00000\n";
		else cout << "Case #" << caseno++ << ": " << fixed << setprecision(5) << dive(probability, 20, 1) << "\n";
	}
}
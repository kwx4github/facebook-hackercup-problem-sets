
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <climits>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <list>

using namespace std;

#define FORIT(i,c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define FV(i,s,v) for (i = int(s); i < v.size(); i++)
#define FOR(i,s,e) for (i = int(s); i < int(e); i++)
#define ALL(c) (c).begin(), (c).end()
#define ALLR(c) (c).rbegin(), (c).rend()

#define INF 1070000000LL
#define MOD 1000000007LL
#define EPS 1e-9

typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
typedef pair<int, int> PI;

int memo[21][21];
int ncr (int n,int r) {
  if (r == 0 || n == r) return 1;
  if (r > n) return 0;
  if (memo[n][r] != -1) {
    return memo[n][r];
  }
  return memo[n][r] = ncr (n - 1,r) + ncr (n - 1,r - 1);
}

int main() {
	int T, N, t, i, j ;
  memset(memo, -1, sizeof memo);
	cin >> T ;
	FOR (t, 1, T + 1){
    double p,dp[21];
    cin >> p;
    dp[20] = 0;
    for (i = 19;i >= 0;i--) {
      double sol = 0;
      FOR (j, 1, 21 - i) {
        sol += ncr (20 - i, j) * pow(p, j) * pow(1.0 - p, 20 - i - j) * dp[i + j];
      }
      dp[i] = (sol + 1) / (1 - pow (1.0 - p, 20 - i));
    }

    printf("Case #%d: %.5lf\n", t, dp[0]);
	}

	return 0;
}

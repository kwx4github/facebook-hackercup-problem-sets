import java.io.*;
import java.util.*;

public class b {
	static long[][] combs;
public static void main(String[] args) throws IOException
{
	//input.init(new FileInputStream(new File("template.in")));
	//PrintWriter out = new PrintWriter(new File("template.out"));
	input.init(System.in);
	PrintWriter out = new PrintWriter(System.out);
	int T = input.nextInt();
	combs = comb(21);
	for(int t = 0; t<T; t++)
	{
		double p = input.nextDouble();
		memo = new double[21];
		Arrays.fill(memo, -1);
		out.printf("Case #%d: %.5f\n", t+1, go(20, p));
	}
	
	out.close();
}
static double[] memo;
//Returns array of combinations (Pascals's triangle) up to nCn - O(n^2)
//comb[i][j] represents the value of i choose j
public static long[][] comb(int n)
{
	long[][] comb = new long[n+1][n+1];
	for(int i = 0; i<= n; i++)
		comb[i][0] = 1;
	for(int i = 1; i<= n; i++)
		for(int j = 1; j<= i; j++)
			comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]);
	return comb;
}
static double go(int need, double p)
{
	if(memo[need] != -1) return memo[need];
	if(need == 0) return 0;
	double res = 0;
	for(int i = 1; i<=need; i++)
	{
		double prob = Math.pow(p,  i) * Math.pow(1-p, need-i) * combs[need][i];
		res += prob * go(need - i, p);
	}
	res++;
	res /= (1 - Math.pow(1-p, need));
	//res++;
	return memo[need] = res;
}
public static class input {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException {
        return Long.parseLong( next() );
    }
}
}

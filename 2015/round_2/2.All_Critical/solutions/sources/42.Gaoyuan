#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
//#include <ctime>
#include <map>
using namespace std;

double C[21][21];
double p;
double dp[21];
double power(double x, int k)
{
	if(k == 0) return 1;
	return x * power(x, k-1);
}

double probGet(int n, int v)
{
	return power(p, v) * power(1-p, n-v) * C[n][v];

}

void solve()
{
	memset(C, 0, sizeof(C));
	for(int i = 0; i <= 20; i++)
	{
		C[i][0] = C[i][i] = 1;
		for(int j = 1; j < i; j++)
			C[i][j] = C[i-1][j-1] + C[i-1][j];
	}
	dp[0] = 0;
	cin >> p;
	for(int i = 1; i <= 20; i++)
	{
		double factor = 1 - probGet(i, 0);
		double s = 1;
		for(int j = 1; j <= i; j++)
			s += probGet(i, j) * dp[i - j];
		dp[i] = s / factor;
	}
	cout << dp[20] << endl;
}

int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(5);
	return MAIN();
}

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)


double p;
double dp[25][25];
double val[25];

void solve() {
    cin >> p;

    REP (i, 25) REP (j, 25) dp[i][j] = 0;
    dp[0][0] = 1.0;
    for (int i = 0; i < 24; i++) {
        for (int j = 0; j <= i; j++) {
            dp[i+1][j+1] += p * dp[i][j];
            dp[i+1][j] += (1-p) * dp[i][j];
        }
    }

    val[1] = 1.0 / p;

    for (int i = 2; i <= 20; i++) {
        double sum = 1.0;
        for (int j = 1; j < i; j++) {
            sum += dp[i][j] * val[i-j];
        }
        val[i] = sum / (1 - pow(1-p, i));
    }

    cout << fixed << setprecision(5) << val[20] << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

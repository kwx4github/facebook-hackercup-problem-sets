#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <limits>
using namespace std;

// Types
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int,int> ipair;
const double pi=acos(-1.0);
const double eps=1e-11;

// Generic
#define SIZE(X) ((int)(X.size()))
#define LENGTH(X) ((int)(X.length()))
#define MP(X,Y) make_pair(X,Y)
#define FORD(i, a, b) for(int i=(a); i<(b); i++)
#define FORS(i, a) for(int i=(0); i<SIZE(a); i++)
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
template<class T> inline T sqr(T x){return x*x;}

// Bit manipulation
template<class T> void setbit(T& v, int position)    { v |= (T)1 << position; }
template<class T> void unsetbit(T& v, int position)  { v &= ~((T)1 << position); }
template<class T> void togglebit(T& v, int position) { v ^= (T)1 << position; }
template<class T> bool isbit(T v, int position) { return (v & ((T)1 << position)) != 0; }
template<class T> inline int countbit(T n){return (n==0)?0:(1+countbit(n&(n-1)));}

// Input / Output
string ReadToEndLine(istream& s) { string sLine; getline(s, sLine); return sLine; }
char gStr[1024];
// sprintf_s(gStr, "%d", );

struct Runner
{
	Runner(istream& in, ostream& out) : mIn(in), mOut(out), mCase(0) {}
	void RunAll();
	void Run();
	istream& mIn; ostream& mOut;
	size_t mCase;
};

// Input:
//		N: Max value in triangle
//		Modulo: Calculate result by modulo or numeric_limits<T>::max() 
// Output:
//		C: Pascal Triangle. C[n][k] -> Binomial coefficient (n / k)
//		Return: N/A
template<class T>
void PT_N2(int N, vector<vector<T> > &C)
{
	C.resize(N + 1, vector<T>(N + 1));
	FORD(n, 0, N + 1)
	{
		C[n][0] = C[n][n] = 1;
		FORD(k, 1, n)
		{
			C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
		}
	}
}

const int SEG = 20;
const int LIM = 21;
vector<double> PowOfP(LIM);
vector<double> PowOf1_P(LIM);
vector<vector<double> > PT;

void Runner::RunAll()
{
	PT_N2(LIM, PT);

    size_t caseCount;
    mIn >> caseCount;
    ReadToEndLine(mIn);
    for(size_t c=0; c<caseCount; ++c)
    {
        mCase = c + 1;
		cout << "Case " << mCase << ": ... ";
        Run();
		cout << "done" << endl;
    }
}

void init(double p)
{
	double pr = (1.0 - p);
	PowOfP[0] = PowOf1_P[0] = 1.0;
	FORD(i, 1, LIM)
	{
		PowOfP[i] = PowOfP[i - 1] * p;
		PowOf1_P[i] = PowOf1_P[i - 1] * pr;
	}
}


void Runner::Run()
{
	double P;
	mIn >> P;
	init(P);

	vector<vector<double> > D(2, vector<double>(LIM, 0.));
	D[0][0] = 1.;

	double res = 0;
	const int STEPS = 100000;
	FORD(step, 1, STEPS)
	{
		int s = step % 2;
		int ps = (step-1) % 2;
		FORD(cur, 0, LIM)
		{
			D[s][cur] = 0.;
			FORD(prev, 0, cur + 1)
			{
				if (cur == prev && cur == SEG)
					continue;

				int failed = SEG - cur;
				int succ = cur - prev;
				int diff = failed + succ;
				double coeff = PowOfP[succ]*PowOf1_P[failed];
				coeff *= PT[diff][succ];

				D[s][cur] += D[ps][prev] * coeff;
			}
		}

		double sum = accumulate(D[s].begin(), D[s].end(), 0.);

		res += D[s][SEG] * (double)step;
	}

	sprintf_s(gStr, "%.5f", res);


	mOut << "Case #" << mCase << ": ";
	mOut << gStr;
	mOut << endl;
}


string pathToCpp = __FILE__;
#ifdef LOCAL
#include "local_IO.cpp"
#endif

void main(int argc, char *argv[])
{
	string pathToFiles = pathToCpp;
	pathToFiles.resize(pathToFiles.size() - 4);
	string pathToInput = pathToFiles + ".in.txt";
	if(argc >= 2)
	{
		pathToFiles = pathToInput = argv[1];
	}

	{
		ifstream sIn(pathToInput);
		ofstream sMy(pathToFiles + ".my.txt");
		Runner runner(sIn, sMy);
		runner.RunAll();
	}

#ifdef LOCAL
	check_Nto1(pathToFiles + ".ok.txt", pathToFiles + ".my.txt");
#endif

	getchar();
}

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <set>
#include <map>

using namespace std;

#define all(c) (c).begin(), (c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define y1 y1_gedjcdgfce
#define y0 y0_sadasdasdsa
#define ws ws_sadsadsada
#define left left_asdsadsadsadsa
#define right right_asdasdsadasda
#define hash hash_asdasdasdsad

#define eprintf(...) fprintf(stderr,__VA_ARGS__), fflush(stderr) 


#define TASK "task"


const int maxn = 100;
long double dp[maxn][maxn];
long double res[maxn];

void solve(int test) {
	double _p;
	memset(dp, 0, sizeof dp);
	memset(res, 0, sizeof res);
	scanf("%lf", &_p);
	long double p = _p;
	dp[0][0] = 1.;
	const int n = 20;
	for (int i = 1; i <= n; i++) {
		dp[i][0] = dp[i - 1][0] * (1 - p);
		for (int j = 1; j <= i; j++) {
			dp[i][j] = dp[i - 1][j] * (1 - p) + dp[i - 1][j - 1] * p;
		}
	}
	res[20] = 0.;
	for (int i = n - 1; i >= 0; i--) {
		long double ans = 1.;
		for (int j = 1; j <= n - i; j++) {
			ans += dp[n - i][j] * res[i + j];
		}
		ans /= (1-dp[n - i][0]);
		res[i] = ans;
	}
	printf("Case #%d: %.5lf\n", test, (double)res[0]);
}

int main(){
	int T;
	scanf("%d", &T);
	for (int test = 1; test <= T; test++) solve(test);
}

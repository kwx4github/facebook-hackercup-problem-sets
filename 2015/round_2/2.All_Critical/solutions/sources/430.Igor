import java.io.*;
import java.util.Locale;
import java.util.Random;
import java.util.StringTokenizer;

import static java.lang.System.currentTimeMillis;


public class Main{

    long tB = currentTimeMillis();

    void run(){
        Locale.setDefault(Locale.US);
        boolean oj;
        oj = false;
//        try {
//            oj = System.getProperty("MYLOCAL") == null;
//        } catch (Exception e) {
//            oj = true;
//        }
        try{
//            if( oj ){
////                sc  = new FastScanner( new InputStreamReader(System.in  ) );
////                out = new PrintWriter(   new OutputStreamWriter(System.out) );
//                String str = "epic";
//                sc  = new FastScanner(new FileReader(str+".in") );
//                out = new PrintWriter(new FileWriter(str+".out") );
//            } else{
            //sc  = new FastScanner(new FileReader( "C://corporate_gifting.txt") );
            sc  = new FastScanner(new FileReader( "input.txt") );
            out = new PrintWriter(new FileWriter("output.txt") );
//            }
        } catch (Exception e) {
            System.exit(-228);
        }

        solve();
        if( !oj ){
            System.err.println( "Time: " + (currentTimeMillis()-tB)/1e3 );
            long heapSize = Runtime.getRuntime().totalMemory();
            long heapMaxSize = Runtime.getRuntime().maxMemory();
            long heapFreeSize = Runtime.getRuntime().freeMemory();
            err.println( "Mem:  " + (heapSize - heapFreeSize)/(1<<20) );
        }
        out.flush();
    }

    class FastScanner{
        BufferedReader br;
        StringTokenizer st = new StringTokenizer("");
        FastScanner( InputStreamReader a ){
            br = new BufferedReader(a);
        }
        FastScanner( FileReader a ){
            br = new BufferedReader(a);
        }
        String next(){
            while( !st.hasMoreTokens() )
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    return null;
                }
            return st.nextToken();
        }
        String readLine(){
            try {
                return br.readLine();
            } catch (Exception e) {
                return null;
            }
        }
        double nextDouble(){ return Double.parseDouble(next()); }
        int nextInt(){ return Integer.parseInt(next()); }
        long nextLong(){ return Long.parseLong(next()); }
    }

    FastScanner sc;
    PrintWriter out;
    PrintStream err = System.err;



    public static void main(String[] args){
        new Main().run();
//        new Thread( null, new Runnable() {
//            @Override
//            public void run() {
//                new Main().run();
//            }
//            }, "LOL", 256L * 1024 * 1024 / 2 ).run();
//        }, "LOL", 2000 * 1024 * 1024 ).run();
    }



    void TLE(){ for(;;); }

    void MLE(){
        int[][] arr = new int[1024 * 1024][];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = new int[1024 * 1024];
    }

    void myAssert(boolean OK){
        if( !OK ) MLE();
    }

    void exit( int val ){
        out.flush();
        out.close();
        System.exit(val);
    }

    double fuct(int n){ myAssert(0<=n); return n<=1? 1 : n * fuct(n-1); }

    double C(int m, int n){ myAssert(m<=n); return fuct(n)/fuct(m)/fuct(n-m); }

    double[][] comb = new double[20*50+1][];
    {
        for(int n = 0; n < comb.length; ++n){
            comb[n] = new double[n+1];
            comb[n][0] = comb[n][n] = 1;
            for(int m = 1; m < n; ++m)
                comb[n][m] = comb[n-1][m-1] + comb[n-1][m];
        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////


    Random rnd = new Random(21212);

    void readData(){
    }

    void randData(){
    }

    String BFSolve(){
        String ans = null;
        return ans;
    }



    String solveTest(){
        int cntGames = (int)1e5;
        double p;
        double[][] dp;
        double[] powp, powInv;

        p = sc.nextDouble();

        powp = new double[21];
        powp[0] = 1;
        for (int i = 1; i <= 20; i++) powp[i] = p * powp[i-1];

        powInv = new double[21];
        powInv[0] = 1;
        for (int i = 1; i <= 20; i++) powInv[i] = (1-p) * powInv[i-1];

        dp = new double[cntGames+1][21];

        for (int game = 0; game <= cntGames; game++) {
            for (int sc = 0; sc <= 20; sc++) {
                if( game == 0 )
                    dp[game][sc] = C(sc,20) * powp[sc] * powInv[20-sc];
                else {
                    for(int sc0 = 0; sc0 <= sc; ++sc0){
                        if( sc0 == 20 ) continue;
                        int curSc = sc - sc0;
                        dp[game][sc] += dp[game-1][sc0] *
                                C(curSc,20-sc0) * powp[curSc] * powInv[20-curSc-sc0];
                    }
                }
            }
            //if(  game <= 50 )  err.printf( "%d %20.15g\n", game, dp[game][20] );
//            double sum = 0;
//            for(int g = 0; g < game; ++g ) sum += dp[g][20];
//            for(double x : dp[game])sum += x;
//            if( game <= 50 ) err.printf( "%d %20.15g\n", game, sum);
        }

        double  ans = 0;
        for (int game = 0; game <= cntGames; game++)
            ans += (game+1) * dp[game][20];

//        ans = 0;
//        for (int game = 1; game <= 50; game++){
//            int cntTick = game * 20;
//            ans += game * comb[cntTick][20] * pow(p,20) * pow(1 - p, cntTick - 20);
//        }

        return String.format("%.5f", ans);
    }

//    void deb(){
//        double sum = 0;
//        int maxXnt = (int)1e3;
//        for (int iter = 0; iter < maxXnt; iter++) {
//            int cntBars = 0;
//            for(int g = 1; ; ++g){
//                for (int i = 0; i < 20; i++) {
//                    if( rnd.nextDouble() <= 0.1 ){
//                        ++cntBars;
//                        //err.println(rnd.nextDouble());
//                    }
//                }
//                if( 20 <= cntBars ){
//                    sum += g;
//                    break;
//                }
//            }
//        }
//        err.println( ":: " + sum / maxXnt );
//    }


    void solve(){
//        deb();
//
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            long time = currentTimeMillis();
            err.printf("Case #%d ", i);

            readData();
            String ans = solveTest();
//            String ansBF = BFSolve();
            out.printf("Case #%d: %s\n", i+1, ans);
            out.flush();

            System.err.println( " in  " + (currentTimeMillis()-time)/1e3 + " ms" );
        }
/**/

/*/
        for (int i = 0; i < 100; i++) {
            randData();
            String ans = solveTest();
            String BFSolve = BFSolve();
            if( !BFSolve.equals(ans) ){
                err.println("ans    : " + ans);
                err.println("BFSolve: " + BFSolve);
                return;
            } else {
                err.println("OK");
            }
        }
/**/

    }

}
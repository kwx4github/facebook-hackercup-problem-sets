#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
 using namespace std;
  
#define REP(i, n) for(int i=0;i<int(n);i++)
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP(X,Y) make_pair(X,Y)
long double p;

double doit() {
    int i,j , k;
    long double comb[22][22];
    memset(comb, 0, sizeof(comb));
    for (i = 0; i < 22; ++i) comb[i][i] = comb[i][0] = 1.;
    for (i = 1; i < 22; ++i) {
        for (j = 1; j < i; ++j) {
            comb[i][j] = comb[i-1][j-1] + comb[i-1][j];
        }
    }
    long double np = 1.0 - p;
    long double D[21];
    long double P[22], NP[22];
    P[0] = NP[0] = 1.;
    for (i = 1; i < 22; ++i) {
        P[i] = p * P[i-1];
        NP[i] = np * NP[i-1];
    }
    D[0] = 0.;
    for (i = 1; i < 22; ++i) {
        long double left = 1. - pow(np, i);
        long double right = 0;
        // First the d_i.
        right += pow(np, i);
        // Now we iterate.
        for (j = 1; j <= i; ++j) {
            long double temp = comb[i][j] * (1.+D[i-j]);
            for (k = 0; k < j; ++k) temp *= p;
            for (k = 0; k < (i-j); ++k) temp *= np;
            right += temp;
            //right += (/* prob */ P[j]*comb[i][j]*NP[i-j] /* ways */  * /* dp */ (1.+D[i-j]));
        }
        D[i] = right / left;
    }
    return (double)D[20];
}

int main() {
    int i,j ,k;
    int casos; scanf("%d", &casos);
    for (int h = 0; h < casos; ++h) {
        scanf("%Lf", &p);
        printf("Case #%d: %.5lf\n", h+1, doit());
    }
    return 0;
}

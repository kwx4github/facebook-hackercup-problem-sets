#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MAXN = 22;

double p, a[ MAXN ], b[ MAXN ];
double c[ MAXN ][ MAXN ];
double f[ MAXN ];

void solve( int test_case ) {
    printf("Case #%d: ", test_case);
    cin >> p;
    a[0] = 1.0; for ( int i = 1; i < MAXN; i++ ) a[i] = a[i - 1] * p;
    b[0] = 1.0; for ( int i = 1; i < MAXN; i++ ) b[i] = b[i - 1] * ( 1.0 - p );
    c[0][0] = 1.0;
    for ( int i = 1; i < MAXN; i++ )
    {
        c[i][0] = 1.0;
        for ( int j = 1; j < MAXN; j++ ) c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
    }
    f[ 20 ] = 0.0; 
    for ( int k = 19; k >= 0; k-- ) {
        double coef = 1.0;
        double sum = 0.0;
        for ( int win = 0; win <= 20; win++ ) {
            double prob = a[ win ] * b[ 20 - win ];
            for ( int already_won = 0; already_won <= min( k, win ); already_won++ ) {
                int new_win = win - already_won;
                int new_k = k + new_win;
                if ( new_k > 20 ) continue;
                double cur_coef = prob * c[k][already_won] * c[20 - k][new_win];
                if ( new_k == k ) {
                    coef -= cur_coef;
                    sum += cur_coef;
                } else {
                    sum += ( 1.0 + f[new_k] ) * cur_coef; 
                }
            }
        }
        f[k] = sum / coef;
        // cerr << fixed << setprecision( 10 ) << k << " " << f[k] << "\n";
    }
    // cout << fixed << setprecision( 7 ) << f[0] << " ";
    cout << fixed << setprecision( 5 ) << f[0] << "\n";
}

int main() {
    time_t start = clock();
    int t; scanf("%d", &t);
    for ( int i = 1; i <= t; i++ ) solve( i );
    fprintf( stderr, "Time: %lf\n", 1.0 * ( clock() - start ) / CLOCKS_PER_SEC );
    return 0;
}

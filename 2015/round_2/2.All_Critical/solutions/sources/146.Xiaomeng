#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <utility>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define X first
#define Y second

using namespace std;

template<typename T> T modPow(T a, T b, T p) {
	T ret = 1;
	for (a %= p; b; b >>= 1) {
		if (b & 1) ret = (ret * a) % p;
		a = (a * a) % p;
	}
	return ret;
}

#define MAX 32
#define ZERO(x) (fabs(x) < eps)

using namespace std;

const double eps = 1e-8;

double mat[MAX][MAX], c[MAX][MAX], pw[MAX], qw[MAX];
bool vis[MAX][MAX];

int gauss(double a[MAX][MAX], int n, int m) {
    int i, j, k, p, cnt = 0;
	double t;

    for (i = 0; i < m; ++i) {
        for (j = p = cnt; j < n; ++j) {
            if (a[p][i] < a[j][i]) p = j;
        }
        if (ZERO(a[j = p][i])) continue;
        if (j != cnt) {
            for (k = 0; k <= m; ++k) swap(a[cnt][k], a[j][k]);
        }
        for (t = a[cnt][j = i]; j <= m; ++j) a[cnt][j] /= t;
        for (j = cnt + 1; j < n; ++j) {
            for (t = a[j][k = i]; k <= m; ++k) {
                a[j][k] -=  t * a[cnt][k];
            }
        }
        ++cnt;
    }

    for (i = cnt; i < n; ++i) {
        if (!ZERO(a[i][m])) return -1;
    }
    if (cnt < m) return 0;

    for (i = 1; i < m; ++i) {
        for (j = 0; j < i; ++j) {
            for (t = a[j][k = i]; k <= m; ++k) {
                a[j][k] -= t * a[i][k];
            }
        }
    }

    return 1;
}

double co(int n, int m, double p) {
	if (!m) return qw[n];
	if (n == m) return pw[m];
	if (vis[n][m]) return c[n][m];
	vis[n][m] = true;
	double q = 1.0 - p;
	return c[n][m] = p * co(n - 1, m - 1, p) + q * co(n - 1, m, p);
}

double solve(int n, double p) {
	pw[0] = 1.0; qw[0] = 1.0;
	for (int i = 1; i <= n; ++i) {
		pw[i] = pw[i - 1] * p;
		qw[i] = qw[i - 1] * (1.0 - p);
	}
	memset(vis, 0, sizeof(vis));
	memset(mat, 0, sizeof(mat));
	for (int i = 0; i < n; ++i) mat[i][n + 1] = 1.0;
	for (int i = 0; i <= n; ++i) mat[i][i] = 1.0;
	for (int i = 0; i < n; ++i) {
		for (int j = i; j <= n; ++j) {
			mat[i][j] -= co(n - i, j - i, p);
		}
	}
	gauss(mat, n + 1, n + 1);
	return mat[0][n + 1];
}

int main() {
	int t;
	scanf("%d", &t);
	for (int ct = 1; ct <= t; ++ct) {
		double p;
		scanf("%lf", &p);
		printf("Case #%d: %.8f\n", ct, solve(20, p));
	}
	return 0;
}


#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <cassert>
#include <ctime>

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

template <class T> inline T sqr(const T& x) { return x * x; }
template <class T> inline void updMin(T& a, const T& b) { if (b < a) a = b; }
template <class T> inline void updMax(T& a, const T& b) { if (b > a) a = b; }

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef vector<int> vi;

double logFact[30];
double logc20[30];

void solution()
{
	double p;

	cin >> p;
	double prev = 0;
	double ans = 0;

	double f_k = 1;

	int K = 1000000;
	for (int k = 1; k < K; ++k)
	{
		double p_k = 0;
		if (k == 1)
		{
			p_k = pow(p, 20);
		}
		else
		{
			for (int t = 1; t <= 20; ++t)
			{
				double tmp = logc20[t] + t * log(p) + t * (k - 1) * log(1 - p) + (20 - t) * log( 1 - f_k );
				double summand = exp( tmp );
				p_k += summand;
			}
		}

		ans += k * p_k;

		f_k = f_k * (1 - p);
	}

	cout << fixed << setprecision(10) << ans << "\n";
	cerr << fixed << setprecision(10) << ans << "\n";
}



int main()
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

	ios::sync_with_stdio(false);

	for (int k = 2; k <= 20; ++k)
	{
		logFact[k] = logFact[k - 1] + log(double(k));
	}

	for (int t = 1; t <= 20; ++t)
	{
		logc20[t] = logFact[20] - logFact[t] - logFact[20 - t];
	}


	int testsNumber;
	cin >> testsNumber;

	for (int test = 0; test < testsNumber; ++test)
	{
		cout << "Case #" << test + 1 << ": ";
		
		cerr << "Test #" << test + 1 << ": ";
		clock_t start = clock();
		solution();
		cerr << "time = " << fixed << setprecision(2) << double(clock() - start) / CLOCKS_PER_SEC << endl;
	}

	return 0;
}
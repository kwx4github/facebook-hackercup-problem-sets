#include <cstdio>
#include <vector>

using namespace std;

double comb(int n, int k) {
  if (k == 0 || k == n) {
    return 1;
  }
  if (k > n) {
    return 0;
  }
  return comb(n - 1, k - 1) + comb(n - 1, k);
}

double power(double x, int n) {
  double res = 1;
  for (int i = 0; i < n; ++i) {
    res *= x;
  }
  return res;
}

vector<vector<long long>> precompute() {
  auto res = vector<vector<long long>>(25, vector<long long>(25));
  res[0][0] = 1;
  for (int n = 1; n < 25; ++n) {
    res[n][0] = 1;
    for (int k = 1; k <= n; ++k) {
      res[n][k] = res[n - 1][k - 1] + res[n - 1][k];
    }
  }
  return res;
}

int main() {
  auto C = precompute();
//  for (auto& v: C) {
//    for (auto& c: v) {
//      printf("%05lld ", c);
//    }
//    printf("\n");
//  }
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    double p;
    scanf("%lf", &p);
    vector<double> res(25);
    res[1] = 1 / p;
    for (int i = 2; i < 25; ++i) {
      double sum = 0;
      double coef = power(p, i);
      sum += coef * C[i][0];
      for (int j = 1; j < i; ++j) {
        coef /= p;
        coef *= (1 - p);
//        printf("j: %d, coef: %lf\n", j, coef);
        sum += (1 + res[j]) * coef * C[i][j];
      }
      coef /= p;
      coef *= (1 - p);
      sum += coef;
//      printf("%d %lf %lf\n", i, sum, coef);
      res[i] = sum / (1 - coef);
    }
    for (int i = 1; i < 25; ++i) {
//      fprintf(stderr, "%d %lf\n", i, res[i]);
    }
    printf("Case #%d: %.5lf\n", t, res[20]);
  }
}

#include <bits/stdc++.h>

using namespace std ; 

long long ncrdp[ 25 ][ 25 ] ; 
double dp[ 25 ] ; 

long long ncr( int n , int r ) {
	return ncrdp[ n ][ r ] ;
}

void genncr() {
	ncrdp[ 0 ][ 0 ] = 1 ; 
	
	for( int i = 1 ; i <= 20 ; i ++ ) {
		ncrdp[ i ][ 0 ] = 1 ; 
	}
	
	for( int n = 1 ; n <= 20 ; n ++ ) {
		for( int r = 1 ; r <= n ; r ++ ) {
			ncrdp[ n ][ r ] = ncrdp[ n - 1 ][ r ] + ncrdp[ n - 1 ][ r - 1 ] ; 
		}
	}
}

double getOita( int rem , int i , double p ) {
	int r = rem - i ; 
	
	double ret = 1.0 ; 
	double onemp = 1 - p ; 
	
	for( int i = 0 ; i < r ; i ++ ) {
		ret *= onemp ; 
	}
	
	return ret ; 
	
}

double recur( int rem , double p ) {
	if( rem == 0 ) {
		return 0.0 ; 
	}
	
	if( rem == 1 ) {
		return ( 1.0 / p ) ; 	
	}
	
	if( dp[ rem ] > -.05 ) {
		return dp[ rem ] ; 
	}
	
	double val = 0 ; 
	
	double curpw = 1.0 ; 
	
	for( int i = 1 ; i <= rem ; i ++ ) {
		double oita = getOita( rem , i , p ) ; 
		curpw *= p ; 
		val += ( curpw * oita * ( 1 + recur( rem - i , p ) ) ) * ncr( rem , i ) ; 	
	}

	double gun = 1 - p ; 
	double org = gun ; 
	
	for( int i = 1 ; i < rem ; i ++ ) {
		gun *= org ; 
	}	
	val += gun ; 
	
	val /= ( 1 - gun ) ; 
	
	dp[ rem ] = val ; 
	return dp[ rem ] ; 
	
}
double solve( double p ) {
	
	for( int i = 0 ; i <= 22 ; i ++ ) {
		dp[ i ] = -1.0 ; 
	}
	
	double res = recur( 20 , p ) ;
	
	return res ;  
}

int main() {
	
	int T ; 

	genncr() ; 	
	cin >> T ; 
	
	double p = 0.0 ; 
	
	for( int i = 0 ; i < T ; i ++ ) {
		cin >> p ; 
		
		double res = solve( p ) ; 
		
		cout << "Case #" << i + 1 << ": " ;
		printf("%.5lf\n",res) ; 
	}
	return 0 ;
}

#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>

using namespace std;

#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>

const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 111111;

double probabilityInputArray[Nmax+10];
double Pas[Nmax+10];

LL C[30][30];

void autocomplete(){
     static int ind = 0;
     ind ++;
     cout << "Case #" << ind << ": ";
}

inline void SOLVE(){
        double p;
        cin >> p;
        //p = rand() % 100000; p /= 100000;
        
        autocomplete();
        
        double pCopy = p;
        probabilityInputArray[1] = p;
        Pas[1] = 1;
        for(int i = 1; i <= 20; ++i)
            Pas[1] *= p;
        
        for(int i = 2; i <= Nmax; ++i) 
        {
            probabilityInputArray[i] = probabilityInputArray[i-1] * (1-p);
            
            Pas[i] = 0;
            
            double coef_second = probabilityInputArray[i];
            
            double coef_first = 1;
            for(int j = 1; j < 20; ++j)
                coef_first *= pCopy;
            
            
            for(int cnt = 1; cnt <= 20; cnt ++) 
            {
                Pas[i] += coef_first * coef_second * C[20][cnt];
                coef_second *= probabilityInputArray[i];
                coef_first /= pCopy;
            }
            pCopy += probabilityInputArray[i];
        }
        
        double res = 0;
        for(int i = 1; i <= Nmax; ++i)
            res += i * Pas[i];
        
        cout.precision(5);
        cout << fixed << res << "\n"; 
}
int main() {
    ios::sync_with_stdio(0);
    freopen("all_critical.txt","r",stdin);
    freopen("output.txt", "w", stdout);
    
    for(int i = 1; i <= 22; ++i) {
        for(int j = 1; j <= i; ++j) {
            if (i == 1)
                C[i][j] = 1;
            else if (j == 1)
                C[i][j] = i;
            else
                C[i][j] = C[i-1][j-1] + C[i-1][j];
        }
    }
    
    int t;
    cin >> t;
    //t = 20;
    
    while (t --> 0){
          //cout << t << endl;
                SOLVE();
    
    }
    return 0;
}

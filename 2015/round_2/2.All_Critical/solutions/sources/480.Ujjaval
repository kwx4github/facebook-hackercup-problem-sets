// directives 
	#include <stdio.h>
	#include <vector>
	#include <map>
	#include <set>
	#include <deque>
	#include <queue>
	#include <algorithm>
	#include <iostream>
	#include <cmath>
	#include <cstring>
	#include <typeinfo>
	#include <sstream>
// 
using namespace std;
// macros 
	#define FOR(i,a,b)      for(int i(a);i<b;++i)
	#define REP(i,n)        FOR(i,0,n)
	#define FORD(i,a,b)      for(int i(a-1);i>=b;--i)
	#define CL(a,x)         memset(a,x,sizeof(a))
	#define FL(a,x)			fill_n(a,sizeof(a)/sizeof(a[0]),x)
	#define asort(a,n)		sort(a,a+n)
	#define vsort(v,n)		sort(v.begin(), v.begin()+n)
	#define sz(x)			x.size()
	#define all(x)			x.begin(), x.end()
	#define SSTR( x )		dynamic_cast< std::ostringstream & >( ( std::ostringstream() << std::dec << x ) ).str()
	#define TI(x)		int x = rint()
	#define TII(x,y)		int x = rint(),y = rint()
	#define TIII(x,y,z)		int x = rint(),y = rint(),z = rint()
// 

typedef long long LL;
typedef vector<int> vi;
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%I64d",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }

double E[21], prob, C[21][21];

double com(int n, int k) {
	double &r = C[n][k];
	if (r == -1) {
		if (k == 0) r = 1;
		else if (k > n-k) r = com(n, n-k);
		else r = com(n-1,k) + com(n-1,k-1);
	}
	return r;
}

double pow2(double p, int k) {
	if (k == 0) return 1;
	double r = pow2(p, k/2);
	r *= r;
	if (k%2) r *= p;
	return r;
}

double calc(int n) {
	double &r = E[n];
	if (r == -1) {
		r = 0;
		if (n) {
			FOR(k,1,n+1) {
				double d = C[n][k] * pow2(prob,k) * pow2(1-prob,n-k), e = pow2(1-prob,n);
				FOR(t,1,10000) {
					r += d*pow2(e,t-1)*(t + calc(n-k));
				}

			}
		}
	}
	return r;
}

int main()
{
	REP(i,21) REP(j,21) C[i][j] = -1;
	REP(i,21) REP(j,21) if (j <= i) com(i,j);
	TI(T);
	REP(t,T) {
		REP(i,21) E[i]=-1;
		cin >> prob;
		printf("Case #%d: %.5f\n", t+1, calc(20));
	}
	return 0;
}

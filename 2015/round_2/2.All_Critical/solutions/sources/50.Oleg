#include <assert.h>
#include <stdio.h>

const int M = 10000;
const int n = 20;

int main () {
  int t, tn;
  assert (scanf ("%d", &tn) == 1);
  for (t = 1; t <= tn; t++) {
    long double p;
    long double d[M][n + 1];
    long double pp[n + 1][n + 1];
    long double cnk[n + 1][n + 1];
    int i, j, k;
    assert (scanf ("%Lf", &p) == 1);
    for (i = 0; i <= n; i++) {
      d[0][i] = i == 0;
    }
    for (i = 0; i <= n; i++)
      for (j = 0; j <= n; j++) {
        cnk[i][j] = 0.0;
      }
    cnk[0][0] = 1.0;
    for (i = 0; i < n; i++)
      for (j = 0; j < n; j++) {
        cnk[i + 1][j] += cnk[i][j];
        cnk[i + 1][j + 1] += cnk[i][j];
      }
    for (i = 0; i <= n; i++)
      for (j = 0; j <= i; j++) {
        double px = cnk[i][j];
        for (k = 0; k < j; k++)
          px *= p;
        for (k = j; k < i; k++)
          px *= (1.0 - p);
        pp[i][j] = px;
      }
    for (i = 0; i < M - 1; i++) {
      /*
      if (i < 100) {
        for (j = 0; j <= n; j++)
          fprintf (stderr, "d[i=%d][j=%d] = %.20Lf\n", i, j, d[i][j]);
      }
      //*/
      for (j = 0; j <= n; j++)
        d[i + 1][j] = 0.0;
      for (j = 0; j < n; j++) {
        for (k = 0; k <= n - j; k++) {
          d[i + 1][j + k] += d[i][j] * pp[n - j][k];
        }
      }
    }
    long double ans = 0;
    for (i = 0; i < M; i++) {
      ans += i * d[i][n];
    }
    printf ("Case #%d: %.5Lf\n", t, ans);
    fprintf (stderr, "Case #%d: %.50Lf\n", t, ans);
  }
  return 0;
}


#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <cctype>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <deque>
#include <bitset>
#include <iostream>
#include <sstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef pair <int, pii> piii;
typedef long double ld;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sz(X) ((int)((X).size()))

const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3fll;
const double pi = acos(-1.0);
const double eps = 1e-8;

template <class T>
inline T abs(const T x)
{
	return x < 0 ? -x : x;
}

template <class T>
inline void get_min(T &a, T b)
{
	if (a > b)
		a = b;
}

template <class T>
inline void get_max(T &a, T b)
{
	if (a < b)
		a = b;
}

template <class T>
inline void fix(T &a, T mo)
{
	while (a >= mo)
		a -= mo;
	while (a < 0)
		a += mo;
}

template <class T>
inline void inc(T &a, T b, T mo)
{
	a += b;
	fix(a, mo);
}

template <class T>
inline void dec(T &a, T b, T mo)
{
	a -= b;
	fix(a, mo);
}

template <class T>
inline T mul_mod(T a, T b, T mo)
{
	T ans = 0;
	for (; b; b >>= 1)
	{
		if (b & 1)
			inc(ans, a, mo);
		inc(a, a, mo);
	}
	return ans;
}

template <class T>
inline T pow_mod(T a, T b, T mo)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans = (ll)ans * a % mo;
		a = (ll)a * a % mo;
	}
	return ans;
}

template <class T>
inline T big_pow_mod(T a, T b, T mo)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans = mul_mod(ans, a, mo);
		a = mul_mod(a, a, mo);
	}
	return ans;
}

template <class T>
inline T pow(T a, int b)
{
	T ans = 1;
	for (; b; b >>= 1)
	{
		if (b & 1)
			ans *= a;
		a *= a;
	}
	return ans;
}

template <class T>
inline T sqr(T x)
{
	return x * x;
}

template <class T>
inline int sgn(T x)
{
	if (x > eps)
		return 1;
	if (x < -eps)
		return -1;
	return 0;
}

template <class T>
inline void read_int(T &x)
{
	x = 0;
	char ch;
	bool flag = 0;
	while (ch = getchar(), !isdigit(ch) && ch != '-');
	if (ch == '-')
		flag = 1;
	else
		x = ch - '0';
	while (ch = getchar(), isdigit(ch))
		x = (x << 3) + x + x + ch - '0';
	if (flag)
		x = -x;
}

template <class T>
inline void read_float(T &x)
{
	x = 0;
	ld now_pos = 0.1;
	char ch;
	while (ch = getchar(), !isdigit(ch) && ch != '-');
	bool flag = 0, decimal = 0;
	if (ch == '-')
		flag = 1;
	else if (ch == '.')
		decimal = 1;
	while (ch = getchar(), isdigit(ch) || ch == '.')
	{
		if (ch == '.')
			decimal = 1;
		else if (decimal)
		{
			x += now_pos * (ch - '0');
			now_pos *= 0.1;
		}
		else
			x = x * 10 + ch - '0';
	}
	if (flag)
		x = -x;
}

#define maxn 50
#define lim 100000

double c[maxn][maxn];
double base[maxn], base2[maxn];
double f[2][maxn];

int main()
{
	c[0][0] = 1;
	for (int i = 1; i < maxn; i ++)
	{
		c[i][0] = 1;
		for (int j = 1; j <= i; j ++)
			c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
	}
	int T;
	read_int(T);
	int n = 20;
	for (int Case = 1; Case <= T; Case ++)
	{
		printf("Case #%d: ", Case);
		double p;
		scanf("%lf", &p);
		base[0] = 1.0;
		base2[0] = 1.0;
		for (int i = 1; i < maxn; i ++)
		{
			base[i] = base[i - 1] * p;
			base2[i] = base2[i - 1] * (1 - p);
		}
		double ans = 0;
		int now = 1, last = 0;
		for (int i = 0; i <= n; i ++)
			f[0][i] = f[1][i] = 0;
		f[last][0] = 1;
		double test = 0;
		for (int step = 1; step <= lim; step ++)
		{
			for (int i = 0; i <= n; i ++)
			{
				int up = i;
				if (i == n)
					up --;
				f[now][i] = 0;
				for (int j = 0; j <= up; j ++)
					f[now][i] += f[last][j] * c[n - j][i - j] * base[i - j] * base2[n - i];
			}
			ans += step * f[now][n];
			test += f[now][n];
			swap(last, now);
		}
		printf("%.5f\n", ans);
	}
	return 0;
}


#include <bits/stdc++.h>

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)

#define all(v) (v).begin(), (v).end()
#define pb push_back

using namespace std;

typedef vector<int> vi;
typedef long long i64; 
typedef long double ld;

ld power(ld a, int n) {
    ld r = 1.0;
    while( n-- ) r *= a;
    return r;
}

int cnk[30][30];

void solve() {
    forn(i, 30) {
        cnk[i][0] = cnk[i][i] = 1;
        fore(j, 1, i-1) cnk[i][j] = cnk[i-1][j] + cnk[i-1][j-1];
    }
    int T;
    cin >> T;
    cout << fixed;
    cout.precision(15);
    fore(test, 1, T) {
        cout << "Case #" << test << ": ";
        ld p;
        cin >> p;
        int n = 20;
        vector<ld> ans(n+1, 0);
        ans[0] = 1;
        ld res = 0.0;
        fore(i, 0, n-1) {
            vector<ld> pnew(n - i + 1);
            fore(ni, i, n) {
                pnew[ni - i] = cnk[n - i][ni - i] * power(p, ni - i) * power(1 - p, n - ni);
            }
            fore(ni, i+1, n) {
                ans[ni] += pnew[ni-i] * ans[i] / ( 1 - pnew[0] ) ;
                res += ans[i] * pnew[ni-i] * 1 / power(1 - pnew[0], 2);
            }
        }
        cout << res << '\n';
    }
}

// 1 * 1 + 2 * q + 3 * q**2 + 4 * q3 = 1/(1-q)**2

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    const string task = "all_critical";
    freopen((task + ".txt").c_str(), "r", stdin);
    freopen((task + ".out").c_str(), "w", stdout);
    solve();
    return 0;
}

import java.io.*;
import java.util.*;

public class ProbB {
    boolean eof;

    public static void main(String[] args) throws IOException {
        new ProbB().run();
    }

    String next() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "-1";
            }
        }
        return st.nextToken();
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    int nextInt() {
        return Integer.parseInt(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    void run() throws IOException {
        String name = "probB";
        InputStream input = System.in;
        OutputStream output = System.out;
        try {
            File f = new File(name + ".in");
            if (f.exists() && f.canRead()) {
                input = new FileInputStream(name + ".in");
                output = new FileOutputStream(name + ".out");
            }
        } catch (Exception e) {
        }

        br = new BufferedReader(new InputStreamReader(input));
        out = new PrintWriter(output);

        solve();

        br.close();
        out.close();
    }

    void solve() {
        int test = nextInt();
        double[][] C = new double[30][30];
        C[0][0] = 1;
        for (int i = 1; i < C.length; i++) {
            C[i][0] = C[i - 1][0];
            for (int j = 1; j <= i; j++) {
                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]);
            }
        }
        for (int t_id = 0; t_id < test; ++t_id) {
            out.print("Case #" + (t_id + 1) + ": ");
            double p = nextDouble();
            double[] pows = new double[33];
            double[] rpows = new double[33];
            pows[0] = 1;
            rpows[0] = 1;
            for (int i = 1; i < pows.length; i++) {
                pows[i] = pows[i - 1] * p;
                rpows[i] = rpows[i - 1] * (1 - p);
            }
            double[] dp = new double[21];
            dp[20] = 0;
            for (int i = 19; i >= 0; i--) {
                double q = 0;
                for (int j = i; j <= 20; j++) {
                    for (int f = 0; f <= i; f++) {
                        double padd = C[i][f] * C[20 - i][j - i]
                                * pows[f + j - i] * rpows[20 - (f + j - i)];
                        if (j == i) {
                            q += padd;
                        } else {
                            dp[i] += padd * dp[j];
                        }
                    }
                }
                dp[i] += 1;
                dp[i] /= 1 - q;
            }
            out.println(String.format(Locale.US, "%.5f", dp[0]));
        }
    }

    class Pair {
        int x;
        int y;
        int p;

        Pair(int x, int y, int p) {
            this.x = x;
            this.y = y;
            this.p = p;
        }
    }
}
#include <cstdio>
#include <cassert>
#include <cstring>

#include <vector>
#include <set>
#include <algorithm>
#include <iostream>

#define sz(c) ((int)(c).size())

using namespace std;

typedef double dbl;

const int n = 20;
dbl cnk[n + 1][n + 1];

void fill_cnk() {
  memset(cnk, 0, sizeof(cnk));
  for (int i = 0; i <= n; i++)
    cnk[i][0] = 1;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= n; j++)
      cnk[i][j] = cnk[i - 1][j - 1] + cnk[i - 1][j];
}

void solve() {
  dbl p;

  scanf("%lf", &p);
  vector<dbl> a(n + 1, 0), b;
  a[0] = 1;

  vector<dbl> pow_p(n + 1, 1), pow_1p(n + 1, 1);
  for (int i = 1; i <= n; i++) {
    pow_p[i] = pow_p[i - 1] * p;
  }
  for (int i = 1; i <= n; i++) {
    pow_1p[i] = pow_1p[i - 1] * (1 - p);
  }

  dbl ans = 0;
  dbl all = 0;
  for (int it = 1; it < 10000; ++it) {
//    for (int i = 0; i <= n; i++)
//      fprintf(stderr, "%.3f ", a[i]);
//    fprintf(stderr, "\n");

    b.assign(n + 1, 0);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j <= n - i; j++) {
        b[i + j] += a[i] * cnk[n - i][j] * pow_p[j] * pow_1p[n - i - j];
      }
    }

    dbl sum = accumulate(b.begin(), b.end(), 0.0);
    for (int i = 0; i <= n; i++) {
      b[i] *= (1 - all) / sum;
    }

    all += b[n];
    ans += it * b[n];

    a.swap(b);
  }
  printf("%.5f\n", ans);
}

int main() {
  fill_cnk();

  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; t++) {
    printf("Case #%d: ", t + 1);
    solve();
  }
  return 0;
}

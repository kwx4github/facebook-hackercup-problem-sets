import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Scanner;

public class Critical {

	public static void main(String[] args) throws Exception {
		Critical object = new Critical();
		String className = object.getClass().getSimpleName();

		FileReader fileReader = new FileReader(new File(className.toLowerCase()
				+ ".in"));
		Scanner scanner = new Scanner(new BufferedReader(fileReader));

		FileWriter wr = new FileWriter(className.toLowerCase() + ".out");

		int testCases = scanner.nextInt();

		for (int tc = 1; tc <= testCases; tc++) {

			double p = scanner.nextDouble();

			double res = object.solve(p);

			DecimalFormat df = new DecimalFormat("0.000000000");
			wr.write("Case #" + tc + ": " + df.format(res) + "\r\n");
		}

		scanner.close();
		wr.close();
	}

	double solve(double p) {

		HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();
		for (int i = 0; i <= 20; i++)
			count.put(i, 0);

		for (int i = 0; i < (1 << 20); i++) {
			int index = Integer.bitCount(i);
			count.put(index, count.get(index) + 1);
		}

		double result = 0;

		double probMiss = 1;

		for (int step = 1; step <= 10000; step++) {

			double resNew = 0;

			for (int ones = 0; ones < 20; ones++) {

				double probState = 1;

				for (int k = 0; k < 20; k++) {
					if (k < ones) {
						double probHit = 1 - probMiss;
						probState *= probHit;
					} else {
						probState *= probMiss;
					}
				}

				// probability to jump to our state?
				int misses = 20 - ones;
				for (int k = 0; k < misses; k++)
					probState *= p;

				int total = count.get(ones);
				resNew += total * probState;
			}

			result += resNew * step;
			probMiss *= (1 - p);
		}

		return result;
	}
}

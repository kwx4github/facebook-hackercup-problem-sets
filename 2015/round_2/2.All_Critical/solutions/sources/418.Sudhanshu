#include <bits/stdc++.h>
using namespace std;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for( ll i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
#define mod 1000000007
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long int ll;
typedef vector< pair<int,int> > VPI;
using namespace std;
double choose[27][27];
class fb2{
  private:
    double p, q,dp[100], power_p[100], power_1_p[100];
  public:
    fb2()
    {
      power_p[0]=power_1_p[0] = 1;
      cin >> p;
      q = (1.0 - p);
      dp[0] = -2.0;
      rep(i,1,23) {
        power_p[i] = power_p[i-1] * p;
        power_1_p[i] = power_1_p[i-1] * q;
        dp[i] = -2.0;
      }
    }
    double f(int left) {
      if(left == 0)  {
        return 0;
      }
      if(dp[left] > -1.0)  {
        return dp[left];
      }
      dp[left] = 0;
      double probability[left+10];
      rep(got,0,left+1) {
        probability[got] = choose[left][got] * power_p[got] * power_1_p[left - got];
      }
      rep(i,1,left+1) {
        dp[left] += probability[i] * (f(left - i) + 1.0);
      }
      dp[left] += probability[0];
      dp[left] /= (1.0 - probability[0]);
      return dp[left];
    }
};
void preprocess()
{
  rep(i,0,25)  {
    rep(j,0,25)  {
      if(i<j)
        choose[i][j] = 0;
      else if(j==0)
        choose[i][j] = 1;
      else
        choose[i][j] = (choose[i-1][j] + choose[i-1][j-1]);
    }
  }
}
int main()
{
  int t,temp=1; 
  cin>>t;
  preprocess();
  while(t--)  {
    fb2 tmp;
    printf("Case #%d: %0.7lf\n",temp,tmp.f(20));
    temp++;
  }
  return 0;
}
import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Solver solver = new Solver();
		int T = in.nextInt();
		for (int i = 0; i < T; i++) {
			out.format("Case #%d: ", i + 1);
			solver.solve(in, out);
		}
		out.close();
	}
}

class Solver {
	public void solve(InputReader in, PrintWriter out) {
		double p = in.nextDouble();
		int MAXS = 10000;
		int n = 20;
		double dp[][] = new double[n + 1][MAXS + 1];
		dp[0][0] = 1;
		double[] pp = new double[n + 1];
		double[] up = new double[n + 1];
		pp[0] = 1;
		up[0] = 1;
		for (int i = 0; i < n; i++) {
			pp[i + 1] = pp[i] * p;
			up[i + 1] = up[i] * (1 - p);
		}
		int[][] C = new int[n + 1][n + 1];
		for (int i = 0; i <= n; i++) {
			C[i][0] = 1;
			C[i][i] = 1;
			for (int j = 1; j < i; j++) {
				C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < MAXS; j++) {
				for (int k = 0; k <= n - i; k++) {
					dp[i + k][j + 1] += dp[i][j] * up[n - i - k] * pp[k] * C[n - i][k];
				}
			}
		}
		double ans = 0;
		for (int i = 0; i < MAXS + 1; i++) {
			ans += dp[n][i] * i;
		}
		out.format("%.9f\n", ans);
		
		
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

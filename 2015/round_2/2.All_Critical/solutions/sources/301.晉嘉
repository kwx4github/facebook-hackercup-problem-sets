#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009
#define mod7 1000000007
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1 , cs;
/*********default*********/
#define N 21
D p , p1[ N ] , p2[ N ] , dp[ N ] , C[ N ][ N ];
void build(){
    for( int i = 1 ; i < N ; i ++ ){
        C[ i ][ 0 ] = 1;
        C[ i ][ 1 ] = i;
    }
    for( int i = 2 ; i < N ; i ++ )
        for( int j = 2 ; j <= i ; j ++ )
            C[ i ][ j ] = C[ i - 1 ][ j ] + C[ i - 1 ][ j - 1 ];
}
void init(){
    scanf( "%lf" , &p );
    p1[ 0 ] = p2[ 0 ] = 1.0;
    for( int i = 1 ; i < N ; i ++ ){
        p1[ i ] = p1[ i - 1 ] * p;
        p2[ i ] = p2[ i - 1 ] * ( 1.0 - p );
    }
}
void solve(){
    dp[ 0 ] = 0;
    dp[ 1 ] = 1.0 / p;
    for( int i = 2 ; i < N ; i ++ ){
        D sum = 0.0;
        for( int j = 1 ; j <= i ; j ++ ){
            sum += C[ i ][ j ] * p2[ i - j ] * p1[ j ] * dp[ i - j ];
//            printf( "%d %d %.5f\n" , i , j , C[ i ][ j ] );
        }
//        printf( "%d : %.5f %.5f\n" , i , sum , p2[ i ] );
        dp[ i ] = ( sum + 1.0 ) / ( 1.0 - p2[ i ] );
    }
    printf( "Case #%d: %.5f\n" , ++ cs , dp[ 20 ] );
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

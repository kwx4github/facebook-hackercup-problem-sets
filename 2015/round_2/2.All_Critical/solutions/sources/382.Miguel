#include <assert.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <queue>
#include <list>
#include <stack>
using namespace std;
#define PB			push_back
#define ALL(v)			(v).begin() , (v).end()
#define SZ(v)			( (int) v.size() )
#define Set(v,x)		memset(  v , x , sizeof(v))
#define two(n)			( 1 << (n) )
#define contain(S,i)		( (S) & two(i) ) 
#define SQR(v)			( (v) * (v) )
#define ABS(x)			( ( (x) >= 0 ) ? (x) : -(x) )
#define foreach(v,it)		for( typeof((v).begin()) it = (v).begin() ; it != (v).end() ; it++ )

const int MAX = two(20)+1;
long double prob[100000], comp[100000];
long double dp[100000][21], cb[22][22];

void solve() {
  long double res = 0, p;
  int i , j, k;
  cin >> p;
  cb[0][0] = 1;
  for (i = 1; i <= 20; i++) {
    cb[i][0] = cb[i][i] = 1;
    for (j = 1; j < i; j++)
      cb[i][j] = cb[i-1][j-1] + cb[i-1][j];
  }
  prob[0] = comp[0] = 1;
  prob[1] = p;
  comp[1] = 1 - p;
  for (i = 2; i < 20000; i++) {
    prob[i] = prob[i-1] * p;
    comp[i] = comp[i-1] * comp[1];
  }
  dp[0][0] = 1;
  for (i = 1; i < 20000; i++) {
    for (j = 0; j <= 20; j++) {
      dp[i][j] = 0;
      for (k = 0; k <= min(19, j); k++) {
        // from k done to j done.
        dp[i][j] += dp[i-1][k] * cb[20-k][j-k] * prob[j-k] * comp[20-j];
      }
    }
    res += i * dp[i][20];
  }
  printf("%.6Lf\n", res);
}

int main() {
  int C , nc;
  scanf("%d\n", &C);
  for ( nc = 1 ; nc <= C ; nc++) {
    printf("Case #%d: ", nc);
    solve();
  }	
  return 0;
}

#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<stdlib.h>
#include<time.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

int ___INT(){ int ret; scanf("%d",&ret); return ret; }
#define INT ___INT()

typedef long long LL;
typedef pair<int,int> pii;

double P;

double ncr(int n, int r) {
	long long up = 1;
	for (int i = 1;i<=n;++i)up*=i;
	for (int i = 1;i<=r;++i)up/=i;
	for (int i=1;i<=n-r;++i)up/=i;
	return up;
}

double G(int e1, int e2) { // 
	int delta = e1-e2;
	// what's the probablity of getting |delta| cells out of e1
	double pSuccess = 1.0, pFailure = 1.0;
	for (int i = 0; i < delta; ++i) pSuccess *= P;
	for (int i = 0; i < e1-delta; ++i) pFailure *= (1.-P);
	return ncr(e1, delta) * pSuccess * pFailure;
}

double dp[55];
bool seen[55];

double F(int empty){
	if (empty == 0) return 0.0;
	if (seen[empty]) return dp[empty];
	seen[empty]=1;
	
	double ss = 0.0;
	for (int i = 0; i < empty; ++i) {
		ss += (1.0 + F(i)) * G(empty, i);
	}	
	double pp = G(empty,empty);	
	
	dp[empty] = (pp + ss) / (1.-pp);

	return dp[empty];
}

int main() {
	int T=INT;
	REP(t,1,T){
		scanf("%lf",&P);		
		memset(seen,0,sizeof(seen));
		printf("Case #%d: %lf\n",t, F(20));
	}	
	return 0;
}

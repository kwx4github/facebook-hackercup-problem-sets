
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <cmath>
using namespace std;

int t;
long double p;
long double ans;
long double values[20];

long double fac(int n) {
    long double result = 1;
    for (int i = 1; i <= n; i++) result *= i;
    return result;
}

long double choose(int n, int k) {
    return fac(n)/fac(k)/fac(n-k);
}

long double compute() {
    values[0] = 0;
    for (int N = 1; N <= 20; N++) {
        long double agg = 1.0;
        for (int k = 1; k <= N; k++) {
            agg += choose(N, k) * pow(p, k) * pow(1-p, N-k) * values[N-k];
        }
        values[N] = agg / (1.0 - pow((1-p), N));
    }
    return values[20];
}

void solve() {
    ans = compute();
    ans = values[20];
    //ans = (p*p + 2*(1-p) + (1-p)*(1-p))/(1-(1-p)*(1-p));
//        ans = choose(20, 0);
//        ans = 20.0/p - 19.0;
}

int main() {
    //ostream& fout = cout;
    ofstream fout ("all_critical.out");
    ifstream fin ("all_critical.txt");

    fin >> t;
    for (int i = 0; i < t; i++) {
        fin >> p;
        solve();
        fout << "Case #" << (i+1) << ": " << fixed << setprecision(5) << ans << "\n";
    }
    return 0;
}

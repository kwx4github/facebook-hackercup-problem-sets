// pre-written code follows
// #includes {{{
#include <algorithm>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
using namespace std;
// }}}
// constants, typedefs, macros {{{
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<string> VS;
typedef queue<int> QI;
typedef queue<PII> QPII;
typedef complex<double> tComp;
__attribute__ ((unused)) const double PI = 2.0 * acos(0.0);
__attribute__ ((unused)) const int oo = 1000000000;
__attribute__ ((unused)) const LL OO = 1000000000000000000LL;
__attribute__ ((unused)) const double EPS = 1e-9;
#define FORIT(i,c) for (typeof((c).end()) i=(c).begin(); i!=(c).end(); ++i)
#define CERR(x) cerr << (#x) << " = " << (x) << endl
#define COUT(x) cout << (#x) << " = " << (x) << endl
// }}}

// code written during the competition follows
const int N = 25;
long double ncr[N][N];
void init_binomial() {
  for (int i=0; i<N; i++) {
    ncr[i][0] = ncr[i][i] = 1.0;
    for (int j=1; j<i; j++) {
      ncr[i][j] = ncr[i-1][j-1] + ncr[i-1][j];
    }
  }
}

int main(int argc, char **argv) {
  init_binomial();
  int kase;
  cin >> kase;
  for (int tkase=0; tkase < kase; tkase++) {
    long double p;
    cin >> p;
    const int n = 20;
    vector<long double> E(n + 1, 0.0);
    for (int i = 1; i <= n; i++) {
      vector<long double> pr(i + 1); // probability j times right
      for (int j = 0; j <= i; j++) {
        pr[j] = ncr[i][j] * pow(p, j) *  pow(1.0 - p, i - j);
      }
      long double sum = 1.0;
      for (int j = 0; j < i; j++) {
        sum += pr[i - j] * E[j];
      }
      E[i] = sum / (1.0 - pr[0]);
    }
    cout << "Case #" << tkase + 1 << ": ";
    printf("%.5Lf\n", E[n]);
  }
  return 0;
}
// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

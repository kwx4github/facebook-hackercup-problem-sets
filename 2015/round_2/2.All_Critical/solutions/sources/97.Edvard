#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

ld p;

inline bool read()
{
	return cin >> p;
}

const int N = 20 + 3;

ld z[N][N];

void print(ld z[N][N], int n)
{
	cerr << setprecision(3) << fixed;
	forn(i, n)
	{
		forn(j, n + 1) cerr << z[i][j] << ' ';
		cerr << endl;
	}
	cerr << endl;
}

void gauss(int n)
{
	forn(i, n)
	{
		//print(z, n);
		int idx = i;
		fore(j, i, n - 1)
			if (abs(z[idx][i]) < abs(z[j][i]))
				idx = j;
		assert(abs(z[idx][i]) > EPS);
		forn(j, n + 1) swap(z[idx][j], z[i][j]);
		ld v = z[i][i];
		forn(j, n + 1) z[i][j] /= v;
		assert(abs(z[i][i] - 1) < EPS);

		forn(j, n)
			if (j != i)
			{
				ld v = z[j][i];
				forn(k, n + 1) z[j][k] -= v * z[i][k];
				assert(abs(z[j][i]) < EPS);
			}
	}
}

ld C[N][N];

inline void solve()
{
	memset(C, 0, sizeof(C));
	C[0][0] = 1;
	forl(i, N - 1) forn(j, N) C[i][j] = (j == 0 ? 0 : C[i - 1][j - 1]) + C[i - 1][j];

	const int n = 20;
	memset(z, 0, sizeof(z));
	z[0][0] = 1, z[0][n + 1] = 0;

	forl(i, n)
	{
		z[i][i] = 1;
		forn(k, i + 1)
		{
			ld v = 1;
			forn(q, k) v *= p;
			forn(q, i - k) v *= 1 - p;
			v *= C[i][k];
			z[i][i - k] -= v;
			z[i][n + 1] += v;
		}
	}
	
	gauss(n + 1);
	printf(" %.5lf\n", double(z[n][n + 1]));
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;
    
	int tc;
	cin >> tc;
	forn(t, tc)
	{
		printf("Case #%d:", t + 1);
		assert(read());
		solve();
	}
	
    return 0;
}

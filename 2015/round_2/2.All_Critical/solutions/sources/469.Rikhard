#include <iostream>
#include <fstream>
#include <string>
#include <memory.h>
#include <sys/resource.h>
#include <iomanip>
using namespace std;

double pows[25], pows1[25];
int cnk[25][25];
double d[25];

int main() {
    /*const rlim_t kStackSize = 1000000000;
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }*/

    ifstream inf("input.txt");
    ofstream outf("output.txt");
    int T; inf >> T;
    for (int tt = 1; tt <= T; ++tt) {
        outf << "Case #" << tt << ": ";
        double p; inf >> p;
        pows[0] = 1; pows1[0] = 1;
        for (int i = 1; i <= 21; ++i) {
            pows[i] = pows[i - 1] * p;
            pows1[i] = pows1[i - 1] * (1 - p);
        }
        cnk[0][0] = 1;
        for (int i = 1; i <= 20; ++i) {
            cnk[i][0] = 1;
            cnk[i][i] = 1;
            for (int j = 1; j < i; ++j) {
                cnk[i][j] = cnk[i - 1][j] + cnk[i - 1][j - 1];
                //cout << cnk[i][j] << " ";
            }
            //cout << "\n";
        }

        d[0] = 0;
        for (int i = 1; i <= 20; ++i) {
            d[i] = 0;
            for (int j = 1; j <= i; ++j) {
                d[i] += (d[i - j] + 1) * cnk[i][j] * pows[j] * pows1[i - j];
            }
            d[i] += pows1[i];
            d[i] /= 1 - pows1[i];
        }
        outf << fixed << setprecision(6) << d[20] << '\n';
    }
}


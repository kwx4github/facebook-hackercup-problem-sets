import java.io.*;
import java.util.*;

public class AllCritical {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	
	static int[] c20 = new int[21];
	static {
		c20[0] = 1;
		for (int i = 1; i <= 20; i++) {
			c20[i] = c20[i - 1] * (20 - i + 1) / i;
		}
	}

	void solve() throws IOException {
		double p = nextDouble();
		double q = 1 - p;
		double ret = 0;
		double qPow = 1;
		for (int cnt = 1; cnt <= 20; cnt++) {
			qPow *= q;
			int sign = cnt % 2 == 1 ? 1 : -1;
			ret += sign * c20[cnt] / (1 - qPow); 
		}
		out.printf(Locale.US, "%.5f\n", ret);
	}

	AllCritical() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "all_critical";
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new AllCritical();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define For(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define in(x) int (x); input((x));
#define x first
#define y second
#define less(a,b) ((a) < (b) - EPS)
#define more(a,b) ((a) > (b) + EPS)
#define eq(a,b) (fabs((a) - (b)) < EPS)
#define remax(a, b) ((a) = (b) > (a) ? (b) : (a))
#define remin(a, b) ((a) = (b) < (a) ? (b) : (a))

using namespace std;

template <typename T>
T gcd(T a, T b) {
    while (b > 0) {
        a %= b;
        swap(a, b);
    }
    return a;
}

typedef long double ld; typedef unsigned int uint; template <class _T> inline _T sqr(const _T& x) {return x * x;} template <class _T> inline string tostr(const _T& a) {ostringstream os(""); os << a; return os.str();} const ld PI = 3.1415926535897932384626433832795L; const double EPS = 1e-9; char TEMPORARY_CHAR;

typedef long long ll; typedef unsigned long long ull; typedef set < int > SI; typedef vector < int > VI; typedef vector < vector < int > > VVI; typedef map < string, int > MSI; typedef pair < int, int > PII; const int INF = 1e9; inline void input(int &a) {a = 0; while (((TEMPORARY_CHAR = getchar()) > '9' || TEMPORARY_CHAR < '0') && (TEMPORARY_CHAR != '-')){} char neg = 0; if (TEMPORARY_CHAR == '-') {neg = 1; TEMPORARY_CHAR = getchar();} while (TEMPORARY_CHAR <= '9' && TEMPORARY_CHAR >= '0') {a = 10 * a + TEMPORARY_CHAR - '0'; TEMPORARY_CHAR = getchar();} if (neg) a = -a;} inline void out(long long a) {if (!a) putchar('0'); if (a < 0) {putchar('-'); a = -a;} char s[20]; int i; for(i = 0; a; ++i) {s[i] = '0' + a % 10; a /= 10;} ford(j, i) putchar(s[j]);} inline int nxt() {in(ret); return ret;}

//#define double ld

struct Solution {
    static ifstream is;
    static ofstream os;
    static int testNumber;

    static void init(string fileName) {
        is.open(fileName + ".txt");
        os.open(fileName + ".out");
        is >> testNumber;
    }

    Solution(int testCase) : testCase(testCase) {

    }
    void read();
    void print();
    void solve();
    void gen();

    int testCase;
    double p;
    double ans;

};

ifstream Solution::is;

ofstream Solution::os;

int Solution::testNumber;

int main(int argc, char ** argv) {

    Solution::init("all_critical");

    for (int i = 0; i < Solution::testNumber; ++i) {
        Solution s(i + 1);
        s.read();
        s.solve();
        s.print();
    }

    return 0;
}




void Solution::print() {
    os << setprecision(5) << fixed;
    os << "Case #" << testCase << ": ";
    os << ans << endl;


    //debug
    //cerr << "Case #" << testCase << ": " << endl;
    //cerr << sum << endl;
}

void Solution::read() {
    is >> p;
}

void Solution::solve() {

    double c[21][21];
    clr(c);
    for (int i = 0; i <= 20; ++i) {
        c[i][0] = 1;
        for (int j = 1; j <= i; ++j) {
            c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
        }
    }

    double dp[41];

    for (int i = 20; i <= 40; ++i) {
        dp[i] = 0;
    }

    double p1[41];
    double q1[41];

    p1[0] = 1, q1[0] = 1;

    for (int i = 1; i <= 20; ++i) {
        p1[i] = p1[i - 1] * p;
        q1[i] = q1[i - 1] * (1 - p);
    }


    for (int i = 19; i >= 0; --i) {
        double pq = 1 / (1 - q1[20 - i]);
        dp[i] = 0;
        for (int add = 1; add <= 20; ++add) {
            dp[i] += pq * c[20 - i][add] * p1[add] * q1[20 - i - add] * dp[i + add];
        }
        dp[i] += pq;
    }

    ans = dp[0];

}
















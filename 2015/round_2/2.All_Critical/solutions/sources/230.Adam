#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <sstream>
#include <iostream>
#include <set>
#include <map>
#include <cassert>

#define REP(AA,BB) for(int AA=0; AA<(BB); ++AA)
#define FOR(AA,BB,CC) for(int AA=(BB); AA<=(CC); ++AA)
#define FC(AA,BB) for(__typeof((AA).begin()) BB=(AA).begin(); BB!=(AA).end(); ++BB)
#define SZ(AA) ((int)((AA).size()))
#define ALL(AA) (AA).begin(), (AA).end()
#define PB push_back
#define MP make_pair

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;
typedef long double LD;

const LD EPS = 1e-9;

inline bool IsZero(LD x){ return x>=-EPS && x<=EPS; }
int GaussDouble(vector< vector<LD> >& a, vector<LD>& b, vector<LD>& x){
  int m = a.size(), n = a[0].size(), k, r;
  vector<int> q;
  for (k = 0; k < min(m, n); k++) {
    int i, j;
    for (j = k; j < n; j++)
      for (i = k; i < m; i++)
        if (!IsZero(a[i][j])) goto found;
    break;
found:
    if (j != k) REP(t, m) swap(a[t][j], a[t][k]);
    q.push_back(j);
    if (i != k) {swap(a[i], a[k]); swap(b[i], b[k]);}
    FOR(j, k + 1, m - 1) if (!IsZero(a[j][k])){
      LD l = (a[j][k] / a[k][k]);
      FOR(i, k + 1, n - 1) a[j][i] = a[j][i] - (l * a[k][i]);
      b[j] = b[j] - (l * b[k]);
    }
  }
  r = k; //r == rzad macierzy a
  x.clear(); x.resize(n, 0);
  FOR(k, r, m - 1) if (!IsZero(b[k])) return -1;
  for (int k = r - 1; k >= 0; --k) {
    LD s = b[k];
    FOR(j, k + 1, r - 1) s = s - (a[k][j] * x[j]);
    x[k] = s / a[k][k];
  }
  for (int k = r - 1; k >= 0; --k) swap(x[k], x[q[k]]);
  return n - r;
}

LD bi[21][21], pp[21], jp[21];

LD comp(LD p) {
  bi[0][0] = 1.0;
  for (int i = 1; i <= 20; ++i) {
    bi[i][0] = bi[i][i] = 1.0;
    for (int j = 1; j < i; ++j) {
      bi[i][j] = bi[i - 1][j] + bi[i - 1][j - 1];
    }
  }
  pp[0] = jp[0] = 1.0;
  for (int i = 1; i <= 20; ++i) {
    pp[i] = pp[i - 1] * p;
    jp[i] = jp[i - 1] * (1.0 - p);
  }
  vector<vector<LD> > a(21);
  vector<LD> b(21);
  for (int i = 0; i <= 20; ++i) {
    a[i] = vector<LD>(21);
    if (i == 0) {
      a[0][0] = 1.0;
      b[0] = 0.0;
    } else {
      a[i][i] = 1.0 - jp[i];
      for (int k = 1; k <= i; ++k) {
        a[i][i - k] = -bi[i][k] * pp[k] * jp[i - k];
      }
      b[i] = 1.0;
    }
  }
  vector<LD> x;
  GaussDouble(a, b, x);
   return x[20];
}

int main(void) {
  int T; cin >> T;
  cout.precision(10);
  for (int t = 1; t <= T; ++t) {
    LD p; cin >> p;
    cout << "Case #" << t << ": " << fixed << comp(p) << endl;
  }
  return 0;
}
    

#include <bits/stdc++.h>
using namespace std;

void print(vector<vector<double>> M) {
	for(auto v : M) {
		for(auto w : v ){
			cerr << w << " ";
		}
		cerr << endl;
	}
		cerr << endl;
}

const int N = 20;

struct Solver {
	vector<vector<double>> M;
	Solver(): M(N+1, vector<double>(N+2, 0.0)) {}

	void solve() {
		cout << fixed << setprecision(5);

		double p;
		cin >> p;

		for(int i = 0; i <= N; i++) {
			for(int j = 0; j < N; j++) {
				if(j < i) continue;
				double ch = 1.0;
				for(int k = i; k < j; k++) ch *= p;
				for(int k = j; k < N; k++) ch *= 1-p;
				int p = j-i;
				int q = N-i;
				for(int k = 1; k<=p; k++) ch *= (q-k+1);
				for(int k = 1; k<=p; k++) ch /= k;

				M[i][j] = -ch;
			}
		}

		for(int i = 0; i <= N; i++) M[i][i] += 1;
		for(int i = 0; i <= N; i++) M[i][N+1] = 1;

		for(int i = 0; i < N; i++) {
			int b = i;
			for(int j = i+1; j<=N; j++) {
				if(abs(M[j][i]) > abs(M[b][i])) b = j;
			}

			swap(M[i], M[b]);
			
			double c = 1./M[i][i];
			for(int k=0; k<=N+1; k++) {
				M[i][k] *= c;
			}

			for(int j = 0; j <= N; j++) {
				if(i != j) {
					double coef = M[j][i];
					for(int k=0; k<=N+1; k++) {
						M[j][k] -= coef * M[i][k];
					}
				}
			}
		}

		cout << M[0][N+1];
		cout << endl;
	}
};

int main() {
	ios_base::sync_with_stdio(false);

	int t;
	cin >> t;

	for(int i=1; i<=t; i++) {
		cout << "Case #" << i << ": ";
		Solver().solve();
	}
}

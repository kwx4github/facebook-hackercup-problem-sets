


#include <vector>
#include <set>
#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;


#define PB(x) push_back(x)
typedef vector<int> VI;
typedef long long LL;

const LL Mod = 1000000007LL;

const int M = 20;

double p;
double sP[1<<M];
double cP[1<<M];

double dp[1<<M];
bool vis[1<<M];

void init()
{
  double q = 1.0 -p;

  for(int i=0;i<(1<<M); ++i){
    double r1 = 1.0;
    double r0 = 1.0;
    for(int j=0;j<M;++j){
      if(i & (1<<j)) r1 *= p;
      else r0 *= q;
    }
    sP[i] = r0 * r1;
    cP[i] = r0;
  }

  memset(vis,0,sizeof(vis));
}

double DP(int s)
{

  if(s == ((1<<M)-1)) return 0.0;
  if(vis[s]) return dp[s];

  int cnt = 0;
  for(int i=0;i<M;++i){
    if(s & (1<<i)) ++cnt;
  }

  int ss = (1<<cnt) - 1;
  if( ss < s){
    double res = DP(ss);
    dp[s] = res;
    vis[s] = true;
    return res;
  }

  double tq = 1.0 - cP[s];
  double res = 1.0; // go back to itself
  

  int t0 = ((1<<M)-1) ^ s;
  int t = t0;
  while(t){  
    double tp = 1.0; // from s -> t | s

    int j = t;
    while(j){
      tp *= p;
      j = j & (j-1);
    }

    int ns = t | s;
    for(int i=0;i<M;++i){
      if( 0 == ((1<<i) & ns) ) tp *= (1.0-p);
    }


    res += tp * DP(ns);
    t = t0 & (t-1);
  }

  res /= tq;

  dp[s] = res;
  vis[s] = true;

  return res;
}


int main()
{

  int T;
  scanf("%d",&T);
  int cs = 0;
  while(cs++ < T){
    scanf("%lf",&p);
    init();

    printf("Case #%d: %.5lf\n",cs, DP(0));
  }


  return 0;
}

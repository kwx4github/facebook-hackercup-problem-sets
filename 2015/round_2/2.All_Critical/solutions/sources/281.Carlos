#include <cstdio>
#include <cstring>
#include <cmath>

using namespace std;

#define MAXN 24
int PT[MAXN][MAXN+1];

void build_pascal_triangle() {
   PT[0][0] = 1;
   for (int n = 1; n < MAXN; ++n) {
      PT[n][0] = 1;
      for (int k = 1; k < n; ++k) {
         PT[n][k] = (PT[n-1][k-1] + PT[n-1][k]);
      // assert(PT[n][k] >= 1);
      }
      PT[n][n] = 1;
   }
}

int Choose(int n, int k) {
   if (n < 0 || k < 0 || k > n)  // invalid n or k
      return 0;
   return PT[n][k];
}

double prob;
bool cached[24];
double memo[24];
double E(int n) {
   if (n == 0) return 0.0;
   if (cached[n]) return memo[n];
   double num = pow(1 - prob, n);
   for (int k = 1; k <= n; ++k) {
      num += Choose(n, k) * pow(prob, k) * pow(1-prob, n-k) * (1 + E(n - k));
   }
   double den = 1 - pow(1-prob, n);
   cached[n] = true;
   return memo[n] = num / den;
}

int main(int argc, char* argv[]) {
   build_pascal_triangle();

   int TC;
   scanf("%d", &TC);
   for (int tc = 1; tc <= TC; ++tc) {
      scanf("%lf", &prob);
      memset(cached, 0, sizeof(cached));
      double res = E(20);
      printf("Case #%d: %.9f\n", tc, res);
   }

   return 0;
}

//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9;

const int MAXN = 1e5+10;

Lint comb[30][30];

dbl E[30];

int main(){
	
	int Test;
	
	forn(i,1,20)
	{
		comb[i][0]=comb[i][i]=1;
		forn(j,1,i-1)
		{
			comb[i][j] = comb[i-1][j] + comb[i-1][j-1];
			//~ printf("%d %d -> %Ld\n",i,j,comb[i][j]);
		}
	}
	
	cin >> Test;
	
	dbl p;
	
	forn(Case,1,Test){
		
		scanf("%lf",&p);
		
		E[1]=1/p;
		
		forn(i,2,20){
			
			E[i]=0;
			
			dbl tmp = 1;
			
			forn(j,1,i){
				
				if(i!=j)
					E[i] += pow( p,i-j ) * pow( 1-p,j ) * comb[i][j] * E[j];
				else
					tmp-=pow( p,i-j ) * pow( 1-p,j ) * comb[i][j];
				
				//~ dbg(E[i]);
				
			}
			
			E[i]++;
			
			E[i]/=tmp;
			
			//~ printf("%lf\n",E[i]);
			
		}
		
		printf("Case #%d: %.5lf\n",Case,E[20]);
		
	}
	
	return 0;
	
}

#include <algorithm>
#include <iomanip>
#include <istream>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
// Solution template generated by caide


class Solution {
public:
    void solve(std::istream& in, std::ostream& out) {
		double p;
		in >> p;
		vector<vector<long long>> C(21);
		C[0].resize(1);
		C[0][0] = 1;
		for (int n = 1; n <= 20; ++n) {
			C[n].resize(n + 1);
			C[n][0] = C[n][n] = 1;
			for (int k = 1; k <= n - 1; ++k) {
				C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
			}
		}
		vector<double> E(21);
		E[0] = 0;
		for (int n = 1; n <= 20; ++n) {
			double r = 1.0;
			double m = 1.0;
			for (int k = 0; k < n; ++k) {
				m *= 1.0 - p;
				double mul = C[n][k];
				for (int i = 0; i < k; ++i)
					mul *= 1.0 - p;
				for (int i = 0; i < n - k; ++i)
					mul *= p;
				r += mul * E[k];
			}
			E[n] = r / (1 - m);
		}
		out << E[20] << endl;
    }
};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);

	int T;
	in >> T;
	for (int test = 1; test <= T; ++test) {
		out << "Case #" << test << ": ";
		Solution solution;
		solution.solve(in, out);
	}
}
#define CAIDE_STDIN 1
#define CAIDE_STDOUT 1
#include <fstream>
#include <iostream>


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

#ifdef CAIDE_STDIN
    istream& in = cin;
#else
    ifstream in(CAIDE_IN_FILE);
#endif

#ifdef CAIDE_STDOUT
    ostream& out = cout;
#else
    ofstream out(CAIDE_OUT_FILE);
#endif
    solve(in, out);
    return 0;
}

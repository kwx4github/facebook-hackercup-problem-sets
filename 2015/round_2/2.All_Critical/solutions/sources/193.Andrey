import java.util.Locale;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		AllCritical solver = new AllCritical();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class AllCritical {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		final int n = 20;
		double p = Double.parseDouble(in.next());
		double[] p1 = new double[n + 1];
		double[] p2 = new double[n + 1];
		p1[0] = 1;
		p2[0] = 1;
		for (int i = 0; i < n; i++) {
			p1[i + 1] = p1[i] * p;
			p2[i + 1] = p2[i] * (1 - p);
		}

		double[][] c = new double[n + 1][n + 1];
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= i; j++)
				c[i][j] = (j == 0) ? 1 : c[i - 1][j - 1] + c[i - 1][j];

		double[] E = new double[n + 1];

		for (int i = 1; i <= n; i++) {
			E[i] = 1;
			for (int k = 1; k < i; k++) {
				E[i] += p1[i - k] * p2[k] * E[k] * c[i][k];
			}
			E[i] /= 1 - p2[i];
		}

		double res = E[n];
		Locale.setDefault(Locale.US);
		out.printf("Case #%d: %.5f\n", testNumber, res);
	}
}

class InputReader {
	final InputStream is;
	final byte[] buf = new byte[1024];
	int pos;
	int size;

	public InputReader(InputStream is) {
		this.is = is;
	}

	public String next() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		StringBuilder sb = new StringBuilder();
		do {
			sb.append((char) c);
			c = read();
		} while (!isWhitespace(c));
		return sb.toString();
	}

	int read() {
		if (size == -1)
			throw new InputMismatchException();
		if (pos >= size) {
			pos = 0;
			try {
				size = is.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (size <= 0)
				return -1;
		}
		return buf[pos++] & 255;
	}

	static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

}


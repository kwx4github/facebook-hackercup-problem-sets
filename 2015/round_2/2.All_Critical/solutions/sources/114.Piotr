#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

ld dp[2][22];
int dw[32][32];

void solve() {
    memset(dp, 0, sizeof(dp));
    dp[0][0] = 1;
    ld p;
    scanf("%Lf", &p);
    ld res = 0;
    db(p);
    for (int i = 0; i < 200000; i++) {
        for (int cur=0;cur<=20;cur++) dp[(i+1)%2][cur] = 0;
        res += i * dp[i%2][20];
        dp[i%2][20] = 0;
        for (int cur=0;cur<=20;cur++) if (dp[i%2][cur]) {
            int d = 20 - cur;
            ld test = 0;
            for (int c=0;c<=d;c++) {
                ld add = pow(p, c) * pow(1 - p, d - c) * (ld)dw[d][c];
                test += add;
                dp[(i+1)%2][cur + c] += dp[i%2][cur] * add;
            }
        }
    }
    printf("%.9Lf", res);
}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    dw[0][0] = 1;
    rep (i, 30) rep (j, 30) {
        if (i) dw[i][j] += dw[i-1][j];
        if (i && j) dw[i][j] += dw[i-1][j-1];
    }

    db(dw[5][2]);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    scanf("%d", &t);
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

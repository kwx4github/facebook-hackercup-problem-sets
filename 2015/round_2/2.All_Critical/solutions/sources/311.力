
// default code for competitive programming
// c2251393 ver 3.141 {{{

// Includes
#include <bits/stdc++.h>

// Defines
#define NAME(x) #x
#define SZ(c) (int)(c).size()
#define ALL(c) (c).begin(), (c).end()
#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define REP(i, s, e) for(int i = (s); i <= (e); i++)
#define REPD(i, s, e) for(int i = (s); i >= (e); i--)
#define DEBUG 1
#define fst first
#define snd second
 
using namespace std;

// Typedefs
typedef double real;
typedef long long ll;
typedef pair<ll, int> pli;
typedef tuple<ll, int> tli;
typedef pair<int, int> pii;
typedef tuple<int, int> tii;
typedef unsigned long long ull;

// Some common const.
const double EPS = -1e8;
const double Pi = acos(-1);
 
// Equal for double
bool inline equ(double a, double b)
{return fabs(a - b) < EPS;}

// }}}
// start ~~QAQ~~

double p, c[22][22], pw[22], pw2[22];
double dp[22];

int main()
{
  c[0][0] = 1.0;
  REP(i, 1, 20)
  {
    c[i][0] = 1.0;
    REP(j, 1, i) c[i][j] = c[i-1][j-1] + c[i-1][j];
  }
  int tc;scanf("%d", &tc);
  REP(_, 1, tc)
  {printf("Case #%d: ", _);
    scanf("%lf", &p);
    pw[0] = 1.0;
    REP(i, 1, 20) pw[i] = p * pw[i-1];
    pw2[0] = 1.0;
    REP(i, 1, 20) pw2[i] = (1-p) * pw2[i-1];
    dp[0] = 0.0;
    REP(i, 1, 20)
    {
      double tmp = 1;
      REP(j, 0, i-1)
        tmp += c[i][i-j] * pw2[j] * pw[i-j] * dp[j];
      dp[i] = tmp / (1-pw2[i]);
    }
    printf("%.5f\n", dp[20]);
  }
}


#include <bits/stdc++.h>
using namespace std;

const int N = 20;

double dp[N+1], p, nck[N+1][N+1];

void pre()
{
	nck[0][0] = 1;
	for (int i = 1; i <= N; ++i)
	{
		nck[i][0] = 1;
		for (int j = 1; j <= i; ++j)
			nck[i][j] = nck[i-1][j]+nck[i-1][j-1];
	}
}

double solve(int a)
{
	double& res = dp[a];
	if (a == 0) return res = 0;
	if (res == res) return res;
	res = 0;
	double use;
	
	for (int i = 0; i <= a; ++i)
	{
		double pro = nck[a][i];
		for (int j = 0; j < i; ++j)
			pro *= p;
		for (int j = 0; j < a-i; ++j)
			pro *= (1-p);
		if (i == 0) use = pro, res += pro;
		else res += pro*(1+solve(a-i));
	}
	
	res /= (1-use);
	
	return res;
}

int main()
{
	ios::sync_with_stdio(0);
	pre();
	
	cout << fixed << setprecision(5);
	
	int t;
	cin >> t;
	for (int q = 1; q <= t; ++q)
	{
		cout << "Case #" << q << ": ";
		memset(dp, -1, sizeof dp);
		cin >> p;
		cout << solve(N) << "\n";
	}
}


#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>

using namespace std;

const int mxn = 22;

int choose[mxn][mxn];

double prob[mxn][mxn];
double exp[mxn];

void choose_init(){
	int i,k;

	choose[0][0] = 1;

	for(i = 1; i < mxn; ++i){
		choose[i][0] = 1;
		for(k = 1; k <= i; ++k){
			choose[i][k] = choose[i-1][k]+choose[i-1][k-1];
		}
	}

}

double p;

inline double mypow(double n, int k){
	double sol = 1;

	while(k--){
		sol *= n;
	}

	return sol;
}

void init(){

	int i,k;

	double pow1,pow2;

	for(i = 1; i < mxn; ++i){
		for(k = 0; k <= i; ++k){
			pow1 = mypow(p,k), pow2 = mypow(1-p,i-k);
			prob[i][k] = pow1*pow2*choose[i][k];
		}
	}
}

double dp(){

	int i,k,n;
	double q;

	n = 20;

	exp[0] = 0;

	for(i = 1; i <= n; ++i){
		if(prob[i][i] >= 1){
			exp[i] = 1;
			continue;
		}
		q = 0;

		for(k = 1; k <= i; ++k){
			q += (exp[i-k]+1)*prob[i][k];
		}

		exp[i] = (prob[i][0]+q)/(1-prob[i][0]);
	}

	return exp[n];
}


int main(){

	int t,T;

	scanf("%d",&T);

	choose_init();

	for(t = 1; t <= T; ++t){
		scanf("%lf",&p);
		init();
		printf("Case #%d: %.5lf\n",t,dp());
	}

	return 0;
}

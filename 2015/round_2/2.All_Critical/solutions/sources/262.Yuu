#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>
#include <climits>
#include <bitset>
#include <cassert>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define UNIQUE(v) (v).erase(unique(ALL(v)), (v).end())
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> P;

const int N = 30;
ld dp[N];
ld comb[N][N];
ld p;

ld rec(int n){
	if (!n) return 0;
	ld &res = dp[n];
	if (res >= -.5) return res;

	res = 0;
	FOR(i, 1, n+1){
		res += comb[n][i]*pow(p, i)*pow(1 - p, n-i)*(rec(n - i) + 1);
	}
	res += pow(1 - p, n);
	return res /= 1 - pow(1 - p, n);
}


int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout.setf(ios::fixed);
	cout.precision(5);

	comb[0][0] = 1;
	rep(i, N - 1) rep(j, N - 1){
		comb[i + 1][j] += comb[i][j];
		comb[i + 1][j + 1] += comb[i][j];
	}

	int TT;
	cin >> TT;
	for (int T = 1; T <= TT; ++T){
		cin >> p;
		rep(i, N) dp[i] = -1;

		cout << "Case #" << T << ": " << rec(20) << endl;
	}

}


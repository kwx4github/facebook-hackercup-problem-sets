#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())

const int MAXX = 20;
int nck[MAXX+5][MAXX+5];
void initNck() {
	nck[0][0] = 1;
	FOR(i, 1, MAXX) {
		nck[i][0] = nck[i][i] = 1;
		FOR(j, 1, i-1) nck[i][j] = nck[i-1][j] + nck[i-1][j-1];
	}
}

int tc;
double memo[MAXX + 5];
double neg_prob[MAXX + 5];
double prob[MAXX + 5];
void solve() {
	double p;
	scanf("%lf", &p);
	neg_prob[0] = 1.0;
	prob[0] = 1.0;
	FOR(i, 1, MAXX) {
		prob[i] = prob[i-1]*p;
		neg_prob[i] = neg_prob[i-1]*(1-p);
	}
	memo[MAXX] = 0;
	for (int i = MAXX - 1; i >= 0; i--) {
		double &curr = memo[i];
		curr = neg_prob[MAXX-i];
		for (int j = MAXX; j > i; j--) {
			curr += nck[MAXX-i][j-i]*prob[j-i]*neg_prob[MAXX-j]*(1+memo[j]);
		}
		curr /= 1.0 - neg_prob[MAXX-i];
	}
	printf("Case #%d: %.5lf\n", tc, memo[0]);
}

int main() {
	initNck();
	int T;
	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class B {
    public static void main(String[] args) {
        new B().run();
    }

    BufferedReader br;
    StringTokenizer in;
    PrintWriter out;

    public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens())
            in = new StringTokenizer(br.readLine());
        return in.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    public void solve() throws IOException {
        double p = nextDouble();

        int n = 20;
//
//        double[] pow1 = new double[n + 1];
//        double[] pow2 = new double[n + 1];
//        pow1[0] = 1;
//        pow2[0] = 1;
//        for (int i = 1; i <= n; i++) {
//            pow1[i] = p * pow1[i - 1];
//            pow2[i] = (1 - p) * pow2[i - 1];
//        }
//
//        double[][] C = new double[n + 1][n + 1];
//        for (int i = 0; i <= n; i++) {
//            C[i][0] = 1;
//            for (int j = 1; j <= i; j++) {
//                C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
//            }
//        }
//
//        double[] e = new double[n + 1];
//        e[0] = 0;
//        for (int i = 1; i <= n; i++) {
//            double k = n == i ? 1 : (1 - pow2[n - i]);
//            for (int z = 0; z < i; z++) {
//                e[i] += C[n - z][i - z] * pow1[i - z] * pow2[n - i] * (e[z] + 1);
//            }
//            e[i] += n == i ? 0 : pow2[n - i];
//            e[i] /= k;
//        }
//        System.err.println(Arrays.toString(e));
//
//        out.println(e[n]);

//        double ans = 0;
//        double z = p;
//        for (int i = 1; i < 100; i++) {
//            ans += i * z;
//            z *= 1 - p;
//        }
//        out.println(ans * 3.45);

        int max = 10000000;
        double[] less = new double[max];
        double z = p;
        for (int i = 1; i < max; i++) {
            less[i] = less[i - 1] + z;
            z *= 1 - p;
        }

        double ans = 0;
        z = p;
        for (int i = 1; i < max; i++) {
            ans += i * (Math.pow(less[i], n) - Math.pow(less[i - 1], n));
            z *= 1 - p;
        }
        out.println(ans);
    }

    public void run() {
        try {
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");

            int t = nextInt();
            for (int i = 0; i < t; i++) {
                System.err.println("Test case " + (i + 1));
                out.print("Case #" + (i + 1) + ": ");
                solve();
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
}
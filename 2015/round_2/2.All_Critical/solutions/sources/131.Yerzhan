#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;
typedef long double ld;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 22
#define MAXM 200002

const ld eps = 1e-12;

int n;
double p;
ll C[MAXN][MAXN];
ld d[MAXM][MAXN];
ld p0[MAXN];
ld p1[MAXN];

inline void solve()
{
	n = 20;
	scanf("%lf", &p);

	p0[0] = 1;
	for (int i = 1; i < MAXN; ++i)
		p0[i] = p0[i - 1] * (1 - p);
	p1[0] = 1;
	for (int i = 1; i < MAXN; ++i)
		p1[i] = p1[i - 1] * p;

	memset(d, 0, sizeof(d));
	d[0][0] = 1.0;
	ld ans = 0;
	for (int i = 0; i < MAXM; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			if (d[i][j] < eps) continue;
			int k0 = n - j;
			for (int k = 0; j + k <= n; ++k)
				d[i + 1][j + k] += d[i][j] * p0[k0 - k] * p1[k] * C[k0][k];
		}
		ans += i * d[i][n];
	}
	printf("%.5lf\n", double(ans));
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	for (int i = 0; i < MAXN; ++i)
	{
		C[i][0] = C[i][i] = 1;
		for (int j = 1; j < i; ++j)
			C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
	}

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

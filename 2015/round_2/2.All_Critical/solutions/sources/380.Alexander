#include <iostream>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
#include <deque>
#include <queue>
#include <list>
#include <cmath>
#include <cassert>
#include <iomanip>

typedef long double LD;
typedef long long unsigned LLU;

std::vector<std::vector<LLU>> CNK;

void cnk()
{
    CNK.resize(23, std::vector<LLU>(23, 0));
    CNK[0][0] = 1;
    for (size_t n = 1; n <= 22; ++n) {
        for (size_t k = 0; k <= n; ++k) {
            if (k == 0) {
                CNK[n][k]  = 1;
            } else {
                CNK[n][k] = CNK[n - 1][k] + CNK[n - 1][k - 1];
            }
        }
    }
}

LD qisum(int i, LD q)
{
    assert(i >= 1);
    LD qi = std::pow(q, i);
    return qi / (1 - qi);
}

LD expect(LD p)
{
    LD q = 1. - p;
    LD sum = 1.;
    for (int i = 1; i <= 20; ++i) {
        LD term = CNK[20][i] * std::pow(-1, i + 1) * qisum(i, q);
        sum += term;
    }
    return sum;
}

int main()
{
    cnk();
    std::cout << std::setprecision(12);
    size_t T;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        LD p;
        std::cin >> p;
        LD ex = expect(p);
        std::cout << "Case #" << (t + 1) << ": " << ex << std::endl;
    }
    return 0;
}



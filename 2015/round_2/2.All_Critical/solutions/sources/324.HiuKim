import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class B {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    long[][] C;
    public void solveCase() throws IOException {
        double P = nextDouble();

        int iter = 10000;
        double[][] dp = new double[iter+1][21];
        dp[0][0] = 1;
        for (int n = 0; n < iter; n++) {
            for (int i = 0; i < 20; i++) {
                for (int j = 0; j <= 20-i; j++) {
                    double p = C[20-i][j] * Math.pow(P, j) * Math.pow(1-P, 20-i-j);
                    dp[n+1][i+j] += dp[n][i] * p;
                }
            }
        }
//        for (int i = 0; i <= 20; i++) {
//            out.println(i + ": " + dp[iter][i]);
//        }

        double ans = 0;
        for (int n = 0; n <= iter; n++) {
            ans += n * dp[n][20];
        }
        System.out.print(ans);
    }

    public long[][] generate_combo(int max_row, int max_col){
        long[][] result = new long[max_row+1][max_col+1];
        for(int i = 0; i <= max_row; i++){
            result[i][0] = 1;
            for(int j = 1; j <= Math.min(i, max_col); j++){
                result[i][j] = result[i-1][j-1] + result[i-1][j];
            }
        }
        return result;
    }

    public void solve() throws IOException {
        C = generate_combo(20, 20);
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            System.out.print("Case #" + t + ": ");
            solveCase();
            System.out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new B().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

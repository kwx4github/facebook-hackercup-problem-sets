#include <cstdio>
#include <numeric>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <map>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <queue>
#include <sstream>
#include <deque>

using namespace std;

#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i = 0; i < (n); i++)
#define re return
#define fi first
#define se second
#define sz(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define y0 y3487465
#define y1 y8687969
#define fill(x,y) memset(x,y,sizeof(x))
                         
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef double D;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef vector<vi> vvi;

template<class T> T abs(T x) { re x > 0 ? x : -x; }

const int N = 10000;

int n;
int m;
double p;
double cnk[21][21];
double res[N + 1][21];
double P[21];
double Q[21];

int main () {
	for (int i = 0; i <= 20; i++)
		for (int j = 0; j <= i; j++)
			if (i == 0 || j % i == 0)
				cnk[i][j] = 1;
			else
				cnk[i][j] = cnk[i - 1][j] + cnk[i - 1][j - 1];	
	int tt;
	cin >> tt;
	for (int it = 1; it <= tt; it++) {
		cin >> p;
		P[0] = Q[0] = 1;
		for (int i = 1; i <= 20; i++) {
			P[i] = P[i - 1] * p;
			Q[i] = Q[i - 1] * (1 - p);
		}
		memset (res, 0, sizeof (res));
		res[0][0] = 1;
		for (int t = 0; t < N; t++)
			for (int i = 0; i < 20; i++)
				for (int a = 0; a <= i; a++)
					for (int b = 0; b <= 20 - i; b++) {
						double prob = cnk[i][a] * cnk[20 - i][b] * P[a + b] * Q[20 - a - b];
						res[t + 1][i + b] += res[t][i] * prob;
					}
		double ans = 0;
		for (int i = 0; i <= N; i++) ans += res[i][20] * i;
		cout << "Case #" << it << ": ";
		printf ("%.5f", ans);
		cout << endl;
		fprintf (stderr, "%d / %d = %.2f | %.2f\n", it, tt, (double)clock () / CLOCKS_PER_SEC, ((double)clock () / it * tt) / CLOCKS_PER_SEC);
	}
	return 0;
}
import java.io.*;
import java.math.BigDecimal;
import java.util.Locale;
import java.util.StringTokenizer;

public class PB implements Runnable {
    static String PROBLEM_NAME = PB.class.getSimpleName().toLowerCase();
    static String INPUT_FILE_NAME = PROBLEM_NAME + ".in";
    static String OUTPUT_FILE_NAME = PROBLEM_NAME + ".out";

    static class InputReader {
        final BufferedReader rd;
        StringTokenizer tok = null;

        public InputReader(String filename) throws IOException {
            rd = new BufferedReader(new FileReader(new File(filename)));
        }

        public void close() {
            try {
                rd.close();
            } catch (IOException e) {
            }
        }

        public String nextToken() throws IOException {
            while (tok == null || !tok.hasMoreTokens()) {
                tok = new StringTokenizer(rd.readLine());
            }
            return tok.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(nextToken());
        }

        public String readLine() throws IOException {
            tok = null;
            return rd.readLine();
        }
    }

    public static void main(String[] args) {
        try {
            new Thread(new PB()).start();
        } catch (Exception e) {
        }
    }

    @Override
    public void run() {
        try {
            solve();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void solve() throws IOException {
        InputReader rd = new InputReader(INPUT_FILE_NAME);
        PrintWriter wr = new PrintWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));

        Locale.setDefault(Locale.US);

        int t = rd.nextInt();
        for (int ti = 0; ti < t; ++ti) {
            double p = Double.parseDouble(rd.nextToken());
            double result = subsolve(p);
            wr.println(String.format("Case #%d: %.5f", ti + 1, result));
        }

        rd.close();
        wr.close();
    }

    final int MAX_PLAYS = 1000000;
    final int MAX_SCORE = 20;

    private double subsolve(double p) {
        double q = 1.0 - p;
        double expectedPlays = 0.0;
        for (int plays = 1; plays <= MAX_PLAYS; ++plays) {
            double probability = Math.pow(1.0 - Math.pow(q, plays), MAX_SCORE) - Math.pow(1.0 - Math.pow(q, plays - 1), MAX_SCORE);
            expectedPlays += plays * probability;
        }
        return expectedPlays;
    }
}

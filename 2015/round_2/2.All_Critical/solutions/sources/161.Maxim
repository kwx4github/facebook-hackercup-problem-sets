#ifdef MG
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X &a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X &a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = acosl(ld(-1));

ld p;

inline bool read()
{
	return cin >> p;
}

int n = 20;
const int N = 20 + 13;

ld c[N][N];

inline void prepare()
{
	c[0][0] = 1;
	forl(i, N - 1)
		forn(j, i + 1)
			c[i][j] = c[i - 1][j] + (j == 0 ? 0 : c[i - 1][j - 1]);	
}

inline ld C(int n, int k)
{
	if (n < 0 || k < 0 || k > n) return 0;
	return c[n][k];
}

ld z[N][N];

inline void gauss()
{
	int row = 0;
	for (int j = 0; j < n; j++)
	{
		int idx = -1;
		for (int i = row; i < n; i++)
		{
			if (abs (z[i][j]) > EPS)
			{
				if (idx == -1)
					idx = i;
				else if (abs (z[i][j]) > abs (z[idx][j]))
					idx = i;
			}
		}

		assert (idx != -1);
		forn(k, n + 1) swap (z[row][k], z[idx][k]);

		ld t = z[row][j];
		for (int k = j; k <= n; k++)
			z[row][k] /= t;

		for (int i = 0; i < n; i++)
		{
			if (i == row)
				continue;

			ld c = z[i][j];
			for (int k = j; k <= n; k++)
				z[i][k] -= c * z[row][k];
		}

		row++;
	}
}

ld pw[N];
ld qw[N];

inline void solve(int test)
{
	n = 20;
	printf("Case #%d: ", test + 1);
	
	pw[0] = 1;
	forl(i, N - 1) pw[i] = pw[i - 1] * p;
	
	qw[0] = 1;
	forl(i, N - 1) qw[i] = qw[i - 1] * (1 - p);
	
	memset(z, 0, sizeof z);
	
	forn(i, n)
	{
		fore(j, i, n)
		{
			ld cur = 0;			
			forn(k, j + 1)
				cur += C(n - i, j - i) * C(i, k - j + i) * pw[k] * qw[n - k];
				
			z[i][j] = cur;
			z[i][n + 1] -= cur;
		}
		
		z[i][i]--;
	}
	
	z[n][n] = 1;
	
	n++;
	
	gauss();
	
	printf("%.5lf\n", double(z[0][n]));
}

int main()
{
#ifdef MG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	
	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;
	
	prepare();
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
	}
	
#ifdef MG
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

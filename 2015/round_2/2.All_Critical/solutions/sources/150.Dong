#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int N = 20;
const double EPS = 1e-10;
const int MAXD = 1024 * 1024;

double prob[MAXD][N + 1];
double powPass[N + 1];
double powFail[N + 1];

int main() {
	double combine[N + 1][N + 1];
	combine[0][0] = 1.0;
	for (int i = 1; i <= N; i++) {
		combine[i][0] = combine[i][i] = 1.0;
		for (int j = 1; j < i; j++) {
			combine[i][j] = combine[i - 1][j - 1] + combine[i - 1][j];
		}
	}
	
	int caseNum;
	scanf("%d", &caseNum);
	for (int caseIndex = 1; caseIndex <= caseNum; caseIndex++) {
		double p;
		scanf("%lf", &p);
		for (int i = 0; i <= N; i++) {
			powPass[i] = pow(p, i);
			powFail[i] = pow(1.0 - p, i);
		}
		memset(prob, 0, sizeof(prob));
		prob[0][0] = 1.0;
		double ans = 0.0;
		for (int depth = 0; depth + 1 < MAXD; depth++) {
			double curSum = 0.0;
			for (int i = 0; i < N; i++) {
				if (prob[depth][i] > 0.0) {
					curSum += prob[depth][i];
					for (int j = i; j <= N; j++) {
						prob[depth + 1][j] += prob[depth][i] * combine[N - i][j - i] * powPass[j - i] * powFail[N - j];
					}
				}
			}
			ans += depth * prob[depth][N];
			if (curSum < EPS) {
				// fprintf(stderr, "Depth = %d; sum = %.11lf\n", depth, curSum);
				break;
			}
		}
		printf("Case #%d: %.6lf\n", caseIndex, ans);
	}

	//int caseNum;
	//scanf("%d", &caseNum);
	//for (int caseIndex = 1; caseIndex <= caseNum; caseIndex++) {
	//	double p;
	//	scanf("%lf", &p);
	//	double p20inv = 1.0 / pow(1.0 - p, N);
	//	double expected[N + 1];
	//	expected[0] = 1.0 / (p20inv - 1.0) / (1.0 - 1.0 / p20inv);
	//	for (int i = 1; i <= N; i++) {
	//		double cur = 0.0;
	//		for (int j = 0; j < i; j++) {
	//			cur += (expected[j] + 1) * pow(p, i - j) * pow(1.0 - p, N - i) * combine[N - j][i - j];
	//		}
	//		expected[i] = (cur + 1.0 / (p20inv - 1.0)) / (1.0 - 1.0 / p20inv);
	//	}
	//	printf("Case #%d: %.6lf\n", caseIndex, expected[N]);
	//}

	return 0;
}
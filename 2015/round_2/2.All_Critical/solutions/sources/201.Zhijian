#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <cassert>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>

#define foreach(it,e) for (__typeof(e.begin ()) it = e.begin(); it != e.end(); it++)

using namespace std;

const int limit = 100000;
const int N = 55;

double p;
double comb[N][N];
double f[2][N], pow1[N], pow2[N];

inline void solve() {
	scanf("%lf", &p);
	
	int n = 20;
	
	pow1[0] = pow2[0] = 1;
	for (int i = 1; i < N; ++i) {
		pow1[i] = pow1[i - 1] * p;
		pow2[i] = pow2[i - 1] * (1 - p);
	}
	
	double ret = 0;

	for (int i = 0; i <= n; ++i)
		f[0][i] = f[1][i] = 0;
	f[0][0] = 1;

	int now = 1;
	for (int step = 1; step <= limit; ++step) {
		for (int i = 0; i <= n; ++i) {
			f[now][i] = 0;
			for (int j = 0; j <= i - (i == n); ++j) {
				f[now][i] += f[now ^ 1][j] * comb[n - j][i - j] * pow1[i - j] * pow2[n - i];
			}
		}
		ret += step * f[now][n];
		now ^= 1;
	}
	
	printf("%.5f\n", ret);
}

int main () {
	comb[0][0] = 1;
	for (int i = 1; i < N; ++i) {
		comb[i][0] = comb[i][i] = 1;
		for (int j = 1; j < i; ++j) {
			comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1];
		}
	}
	
	int tests;
	scanf("%d", &tests);
	for (int i = 1; i <= tests; ++i) {
		printf("Case #%d: ", i);
		solve();
	}
	return 0;
}

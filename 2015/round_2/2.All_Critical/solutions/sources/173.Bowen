#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 100005

double C[25][25];
void binomial(){
	for (int i = 0; i < 25; i++) C[i][0] = 1;
	for (int i = 1; i < 25; i++){
		for (int j = 1; j <= i; j++){
			C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
		}
	}
}
double P, dp[21];
double pi[21], qi[21];
double solve(int n){
	if (dp[n] >= 0) return dp[n];
	if (n == 1){
		cerr << "";
	}
	double ans = 0;
	double E = 0;
	REP(i, 1, n + 1){
		E += C[n][i] * pi[i] * qi[n - i] * (1 + solve(n - i));
	}
	ans = (E + qi[n]) / (1 - qi[n]);
	dp[n] = ans;
	return ans;
}

int main(){
	int cs;
	cin >> cs;
	binomial();
	REP(csn, 1, cs + 1){
		printf("Case #%d: ", csn);
		double P;
		cin >> P;
		pi[0] = qi[0] = 1;
		REP(i, 1, 21){
			pi[i] = pi[i - 1] * P;
			qi[i] = qi[i - 1] * (1 - P);
		}
		REP(i, 0, 21) dp[i] = -1;
		dp[0] = 0;
		solve(20);
		printf("%.10f\n", dp[20]);
	}
	return 0;
}
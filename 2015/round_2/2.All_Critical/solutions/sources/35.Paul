#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");

//CUT HERE

double states[10000][21];
double transprobs[21][21];

//KEEP HERE

double ppow[21];
double qpow[21];


int choose(int a, int b)
{
    if(b==0)
        return 1;
    if(a<b)
        return 0;
    return ((a-b+1)*choose(a,b-1))/b;
}

int main(void)
{
    int ttt;
    fin >> ttt;
    int ct = 0;
    
    cout.precision(9);
    fout.precision(9);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        
        //CUT HERE
        
        double p;
        
        fin >> p;
        
        double q,r;
        
        q=1-p;
        
        int i,j,k;
        
        ppow[0]=qpow[0]=1.;
        
        for(i=1; i<=20; i++)
        {
            ppow[i]=ppow[i-1]*p;
            qpow[i]=qpow[i-1]*q;
        }
        
        for(i=20; i>=0; i--)
        {
            for(j=i; j>=0; j--)
            {
                transprobs[i][j] = ppow[i-j]*qpow[j]*choose(i,j);
            }
        }
        
        double ans = 0.0;
        
        
        memset(states,0,sizeof(states));
        
        states[0][20]=1.0;
        
        for(i=0; i<9000; i++)
        {
            for(k=0; k<=20; k++)
            {
                for(j=0; j<=k; j++)
                {
                    states[i+1][j]+=states[i][k]*transprobs[k][j];
                }
            }
        }
        
       // cout << states[9000][0]-1. << endl;
        
        for(i=1; i<=9000; i++)
        {
            ans+=((double)i)*(states[i][0]-states[i-1][0]);
        }
        
        //KEEP HERE
        
        cout << "Case #" << ct << ": ";
        fout << "Case #" << ct << ": ";
        
        
        cout << ans;
        fout << ans;
        
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


package fhc2015.round2;

import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.Scanner;

/**
 * Created by dhamada on 15/01/18.
 */
public class Critical {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        C = new long[51][51];
        for (int i = 0; i < 51; i++) {
            C[i][0] = C[i][i] = 1;
            for (int j = 1; j < i; j++) {
                C[i][j] = C[i-1][j-1] + C[i-1][j];
            }
        }

        int T = in.nextInt();
        for (int testCase = 1 ; testCase <= T ; testCase++) {
            double p =in.nextDouble();
            out.println(String.format("Case #%d: %.5f", testCase, solve(p)));
        }
        out.flush();
    }

    private static double solve(double p) {
        memo = new double[21];
        Arrays.fill(memo, -1);

        prec = new double[21];
        for (int i = 0 ; i <= 20 ; i++) {
            prec[i] = 1.0d;
            for (int j = 0 ; j < i ; j++) {
                prec[i] *= p;
            }
            for (int j = i ; j < 20 ; j++) {
                prec[i] *=(1-p);
            }
        }
        return dfs(p, 0);
    }

    static double[] prec;
    static double[] memo;

    static long[][] C;

    private static double dfs(double v, int num) {
        if (num == 20) {
            return 0.0d;
        }
        if (memo[num] >= 0) {
            return memo[num];
        }
        double sp = 0.0d;
        double op = 0.0d;

        for (int x = 0 ; x <= 20 ; x++) {
            for (int same = 0 ; same <= x ; same++) {
                if (same > num) {
                    continue;
                }
                int other = x - same;
                if (num+other > 20) {
                    continue;
                }
                long pt = C[num][same] * C[20-num][x-same];
                double prob = pt * prec[x];
                if (other == 0) {
                    sp += prob;
                } else {
                    op += prob * (1 + dfs(v, num+other));
                }
            }
        }
        double ans = (op + sp) / (1.0d - sp);
        memo[num] = ans;
        return ans;
    }


}


#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 20;

vector< vector<int> > C;
vector<double> DP;
double P;

void Preprocess() {
    C = vector< vector<int> >(N + 1, vector<int>(N + 1, 0));
    C[0][0] = 1;
    for (int n = 1; n <= N; ++n) {
        C[n][0] = 1;
        for (int k = 1; k <= n; ++k)
            C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
    }
}

int main() {
    Preprocess();
    ifstream cin("input.txt");
    ofstream cout("output.txt");
    int tests;
    cin >> tests;
    for (int t = 1; t <= tests; ++t) {
        cin >> P;
        vector<double> powerP = vector<double>(N + 1), complementPowerP = vector<double>(N + 1);
        powerP[0] = complementPowerP[0] = 1.0;
        for (int i = 1; i <= N; ++i) {
            powerP[i] = powerP[i - 1] * P;
            complementPowerP[i] = complementPowerP[i - 1] * (1.0 - P);
        }
        DP = vector<double>(N + 1);
        DP[0] = 0.0;
        for (int i = 1; i <= N; ++i) {
            for (int j = 1; j <= i; ++j) {
                DP[i] += (DP[i - j] + 1.0) * powerP[j] * complementPowerP[i - j] * C[i][j];
            }
            DP[i] += complementPowerP[i];
            DP[i] /= (1 - complementPowerP[i]);
        }
        cout << "Case #" << t << ": " << fixed << setprecision(5) << DP[N] << "\n";
    }
    cin.close();
    cout.close();
    return 0;
}

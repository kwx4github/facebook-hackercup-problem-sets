/*
ID: espr1t
LANG: C++
TASK: All Critical
KEYWORDS: Medium, DP
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <algorithm>
#include <vector>

using namespace std;
FILE *in; FILE *out;

const int MAX = 22;
const double EPS = 0.000000001;

double p;

double dyn[MAX][MAX];
double recurse(int idx, int rem) {
    if (idx >= 20) {
        return rem == 0 ? 1.0 : 0.0;
    }
    if (dyn[idx][rem] == dyn[idx][rem])
        return dyn[idx][rem];
    
    double ans = 0.0;
    // Make a hit
    if (rem > 0)
        ans += recurse(idx + 1, rem - 1) * p;

    // Don't make a hit
    if (p + EPS < 1.0)
        ans += recurse(idx + 1, rem - 0) * (1.0 - p);
    
    return dyn[idx][rem] = ans;
}

double dp[MAX];
double go(int rem) {
    if (rem == 0)
        return 0.0;
    if (dp[rem] == dp[rem])
        return dp[rem];
    
    double ans = 0.0;    
    
    // Hit more than 0
    for (int i = 1; i <= rem; i++) {
        double chance = recurse(20 - rem, i);
        ans += chance * (go(rem - i) + 1.0);
    }

    // Hit 0
    double chance = recurse(20 - rem, 0);
    ans = (chance + ans) / (1.0 - chance);
    
    return dp[rem] = ans;
}

void solveTest(int testCase) {
    fscanf(in, "%lf", &p);
    memset(dp, -1, sizeof(dp));
    memset(dyn, -1, sizeof(dyn));
    fprintf(out, "Case #%d: %.9lf\n", testCase, go(20));
}

int main(void) {
    in = stdin; out = stdout;
    in = fopen("AllCritical.in", "rt"); out = fopen("AllCritical.out", "wt");
    
    unsigned sTime = clock();
    
    int numTests;
    fscanf(in, "%d", &numTests);
    static const int BUFF = 1048576;
    static char buff[BUFF]; fgets(buff, BUFF, in);
    
    for (int testCase = 1; testCase <= numTests; testCase++) {
        unsigned tTime = clock();
        fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
        solveTest(testCase);
        fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
    }
    fprintf(stderr, "Finished with all testcases!\n");
    fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
    return 0;
}

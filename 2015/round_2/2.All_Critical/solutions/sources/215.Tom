from math import factorial

cache = {}

def choose(n, k):
    return factorial(n) / (factorial(k) * factorial(n - k))

def expect(n, p):
    if n in cache:
        return cache[n]
    if n == 0:
        return 0
    if n == 1:
        return 1/p
    from_others = 0
    for left in xrange(0, n):
        prob = choose(n, left) * (p ** (n - left)) * (1 - p) ** left
        from_others += prob * (1 + expect(left, p))
    unlucky = (1 - p) ** n
    # r = from_others + unlucky * (1 + r)
    # r * (1 - unlucky) = from_others + unlucky
    result = (from_others + unlucky) / (1 - unlucky)
    cache[n] = result
    return result

def main():
    ts = int(raw_input())
    for t in xrange(ts):
        p = float(raw_input())
        cache.clear()
        print "Case #%d: %.5f" % (t+1, expect(20, p))

if __name__ == "__main__":
    main()

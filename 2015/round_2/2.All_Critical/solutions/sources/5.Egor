#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define forn(i, n) for (int i = 0; i < (n); i++)

typedef long long ll;
typedef long double ld;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

void solve() {
  ld p1;
  cin >> p1;

  const int n = 20;
  vector<vector<ld>> dsong(n + 1);
  dsong[0] = vector<ld>(1);
  dsong[0][0] = 1;
  for (int len = 0; len < n; len++) {
    dsong[len + 1] = vector<ld>(len + 2, 0);
    for (int pr = 0; pr <= len; pr++) {
      dsong[len + 1][pr]     += dsong[len][pr] * (1 - p1);
      dsong[len + 1][pr + 1] += dsong[len][pr] * p1;
    }
  }

  vector<ld> got(n + 1);
  got[0] = 0;
  for (int i = 1; i <= n; i++) {
    ld my = 0, other = 0;
    for (int cur = 0; cur <= i; cur++) {
      ld cp = dsong[i][cur];
      if (cur == 0) {
        my += cp;
        other += cp;
      } else {
        other += cp * got[i - cur];
      }
    }
    got[i] = 1 + other / (1 - my);
//    eprintf("got[%d]=%.2lf\n", i, (double)got[i]);
  }

  cout << fixed;
  cout.precision(5);
  cout << (double)got[n];
  cout << "\n";
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class Problem2 {
    private static final String inFile = "all_critical.txt";
    private static final String outFile = "2-out.txt";

    private static HashMap<Integer, Double> m;
    private static long[][] C = new long[21][21];
    private static double p;

    public static void main(String[] args) {
        try {
            C[0][0] = 1;
            for (int i = 1; i <= 20; ++i) {
                C[i][0] = C[i][i] = 1;
                for (int j = 1; j < i; ++j) {
                    C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
                }
            }

            FileReader reader = new FileReader(inFile);
            PrintWriter writer = new PrintWriter(outFile);
            Scanner scanner = new Scanner(reader);
            int t = scanner.nextInt();
            for (int i = 1; i <= t; ++i) {
                p = scanner.nextDouble();
                m = new HashMap<Integer, Double>();
                writer.println("Case #" + i + ": " + String.format("%.5f", solve(20)));
            }
            writer.close();
        } catch (FileNotFoundException ignored) {
        }
    }

    private static double solve(int n) {
        if (n == 0) return 0;
        if (m.containsKey(n)) return m.get(n);
        double res = 0;
        for (int i = 1; i <= n; ++i) {
            double c = C[n][i]*Math.pow(p, i)*Math.pow(1 - p, n - i);
            res += c*(1 + solve(n - i));
        }
        double rp = Math.pow(1 - p, n);
        res = (res + rp)/(1 - rp);
        m.put(n, res);
        return res;
    }
}

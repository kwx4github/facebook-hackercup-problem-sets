#include<cstdio>
#include<string.h>
#include<iostream>
#include<vector>
#include<iostream>
#include<set>
#include<map>
#include<string>
#include<stdio.h>
#include<sstream>
#include<algorithm>
#include<queue>
#include<cmath>
#include<string.h>
using namespace std ;

const int n = 20 ;
double memo[22] ;
long double p[22],p2[22] ;
long long ncr[22][22] ;

double solve(int k) {
 if (memo[k] == memo[k]) return memo[k] ;
 if (k == n) return 0 ;

 double rep = 0,ret = 0 ;
/*
 for (int i = 0;i <= n;i++)
  for (int j = 0;j <= k && j <= i && k + i - j <= n;j++) {
    // i hits, j repeats
    long double pr = ncr[k][j] * p[j] * p2[k - j] ;
    pr *= ncr[n - k][i - j] * p[i - j] * p2[n - k - (i - j)] ;
    
    if (i - j == 0) {
      rep += pr ;
    } else {
      ret += pr * solve(k + i - j) ;
    }
  }
*/

 for (int i = 0;k + i <= n;i++) {
    long double pr = ncr[n - k][i] * p[i] * p2[n - k - i] ;
    if (i == 0) {
      rep += pr ;
    } else {
      ret += pr * solve(k + i) ;
    }
  }

  ret++ ;
  return memo[k] = ret / (1 - rep) ;
}

int main() {
 for (int i = 0;i < 22;i++) {
   ncr[i][0] = ncr[i][i] = 1 ;
   for (int j = 1;j < i;j++)
    ncr[i][j] = ncr[i - 1][j] + ncr[i - 1][j - 1] ;
 }
  
 int runs ;
 cin >> runs ;
 for (int t = 1;t <= runs;t++) {
   double pr ;
   cin >> pr ;
   p[0] = p2[0] = 1 ;
   for (int i = 1;i <= 20;i++) p[i] = p[i - 1] * pr ;
   for (int i = 1;i <= 20;i++) p2[i] = p2[i - 1] * (1 - pr) ;
   
   memset(memo, 255, sizeof memo) ;
   double ret = solve(0) ;
   printf("Case #%d: %.5lf\n", t, ret) ;
 }

 return 0 ;
}

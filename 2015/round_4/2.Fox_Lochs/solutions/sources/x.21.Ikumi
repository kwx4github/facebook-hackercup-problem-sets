#include<stdio.h>
#include<algorithm>
#include<math.h>
#include<vector>
using namespace std;
const double EPS = 1e-10;
const double INF = 1e+10;
const double PI = acos(-1);
int sig(double r) { return (r < -EPS) ? -1 : (r > +EPS) ? +1 : 0; }
inline double ABS(double a){return max(a,-a);}
struct Pt {
	double x, y;
	Pt() {}
	Pt(double x, double y) : x(x), y(y) {}
	Pt operator+(const Pt &a) const { return Pt(x + a.x, y + a.y); }
	Pt operator-(const Pt &a) const { return Pt(x - a.x, y - a.y); }
	Pt operator*(const Pt &a) const { return Pt(x * a.x - y * a.y, x * a.y + y * a.x); }
	Pt operator-() const { return Pt(-x, -y); }
	Pt operator*(const double &k) const { return Pt(x * k, y * k); }
	Pt operator/(const double &k) const { return Pt(x / k, y / k); }
	bool operator<(const Pt &a)const{
		if(sig(a.x-x)==1)return true;
		if(sig(a.x-x)==-1)return false;
		return sig(a.y-y)==1;
	}
	double ABS() const { return sqrt(x * x + y * y); }
	double abs2() const { return x * x + y * y; }
	double arg() const { return atan2(y, x); }
	double dot(const Pt &a) const { return x * a.x + y * a.y; }
	double det(const Pt &a) const { return x * a.y - y * a.x; }
};
double tri(const Pt &a, const Pt &b, const Pt &c) { return (b - a).det(c - a); }
int iSP(Pt a, Pt b, Pt c) {
	int s = sig((b - a).det(c - a));
	if (s) return s;
	if (sig((b - a).dot(c - a)) < 0) return -2; // c-a-b
	if (sig((a - b).dot(c - b)) < 0) return +2; // a-b-c
	return 0;
}
int iLL(Pt a, Pt b, Pt c, Pt d) {
	if (sig((b - a).det(d - c))) return 1; // intersect
	if (sig((b - a).det(c - a))) return 0; // parallel
	return -1; // correspond
}
bool iSS(Pt a, Pt b, Pt c, Pt d) {
	if(iLL(a,b,c,d)!=1)return 0;
	return (iSP(a, b, c) * iSP(a, b, d) <= 0 && iSP(c, d, a) * iSP(c, d, b) <= 0);
}
Pt pLL(Pt a, Pt b, Pt c, Pt d) {
	b = b - a; d = d - c; return a + b * (c - a).det(d) / b.det(d);
}

int X1[30];
int X2[30];
int Y1[30];
int Y2[30];
vector<int>X;
vector<int>Y;
int main(){
	int T;scanf("%d",&T);
	for(int t=1;t<=T;t++){
		int a;scanf("%d",&a);
		for(int i=0;i<a;i++)scanf("%d%d%d%d",X1+i,Y1+i,X2+i,Y2+i);
		double ret=0;
		X.clear();Y.clear();
		for(int i=0;i<a;i++){
			X.push_back(X1[i]);
			X.push_back(X2[i]);
			Y.push_back(Y1[i]);
			Y.push_back(Y2[i]);
		}
		std::sort(X.begin(),X.end());
		std::sort(Y.begin(),Y.end());
		vector<pair<int,int> > p;
		int n=2*a;
		for(int i=0;i<n;i++){
			if(i&&X[i]==X[i-1])continue;
			for(int j=0;j<n;j++){
				if(j&&Y[j]==Y[j-1])continue;
				bool ok=false;
				for(int k=0;k<a;k++){
					if(X1[k]<=X[i]&&X[i]<=X2[k]&&Y1[k]<=Y[j]&&Y[j]<=Y2[k])ok=true;
				}
				if(ok)p.push_back(make_pair(X[i],Y[j]));
			}
		}
		int sz=p.size();
	//	for(int i=0;i<sz;i++)printf("%d %d\n",p[i].first,p[i].second);
		for(int i=0;i<sz;i++)for(int j=i+1;j<sz;j++){
			vector<Pt> pt;
			Pt L=Pt((double)p[i].first,(double)p[i].second);
			Pt R=Pt((double)p[j].first,(double)p[j].second);
			for(int k=0;k<a;k++){
				if(iLL(L,R,Pt(X1[k],Y1[k]),Pt(X1[k],Y2[k])))pt.push_back(pLL(L,R,Pt(X1[k],Y1[k]),Pt(X1[k],Y2[k])));
				if(iLL(L,R,Pt(X1[k],Y1[k]),Pt(X2[k],Y1[k])))pt.push_back(pLL(L,R,Pt(X1[k],Y1[k]),Pt(X2[k],Y1[k])));
				if(iLL(L,R,Pt(X2[k],Y1[k]),Pt(X2[k],Y2[k])))pt.push_back(pLL(L,R,Pt(X2[k],Y1[k]),Pt(X2[k],Y2[k])));
				if(iLL(L,R,Pt(X1[k],Y2[k]),Pt(X2[k],Y2[k])))pt.push_back(pLL(L,R,Pt(X1[k],Y2[k]),Pt(X2[k],Y2[k])));
			}
			if((R-L).ABS()<ret)continue;
			std::sort(pt.begin(),pt.end());
			//bool dame=false;
			double now=0;
			for(int k=1;k<pt.size();k++){
				if((pt[k]-pt[k-1]).ABS()<EPS)continue;
				Pt M=(pt[k]+pt[k-1])/2;
				bool OK=false;
				for(int l=0;l<a;l++){
					if(sig(M.x-X1[l])!=-1&&sig(M.x-X2[l])!=1&&sig(M.y-Y1[l])!=-1&&sig(M.y-Y2[l])!=1){OK=true;break;}
				}
				if(!OK){now=0;}
				else now+=(pt[k]-pt[k-1]).ABS();
				ret=max(ret,now);
			}
		}
		printf("Case #%d: %.6f\n",t,ret);
	}
}
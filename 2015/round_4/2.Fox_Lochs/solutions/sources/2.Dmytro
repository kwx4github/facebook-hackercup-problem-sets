#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

void readData() {
}

double dist(double x1, double y1, double x2, double y2) {
	double dx = x1 - x2;
	double dy = y1 - y2;
	return sqrt(dx * dx + dy * dy);
}

const double eps = 1e-12;

double get(vector < long long > &x1, vector < long long > &y1, vector < long long > &x2, vector < long long > &y2, pair < long long, long long > u, pair < long long, long long > v) {
	double dx = v.first - u.first;
	double dy = v.second - u.second;

	double cx = u.first;
	double cy = u.second;

	vector < pair < double, double > > segs;
	for (int i = 0; i < x1.size(); ++i) {
		double l = 1e100, r = -1e100;
		{
			if (fabs(dx) > eps) {
				double t = ((double)(x1[i]) - cx) / dx;
				double y = cy + t * dy;
				if (y >= (double)(y1[i]) - eps && y <= (double)(y2[i]) + eps) {
					l = min(l, t);
					r = max(r, t);
				}
			}
		}
		{
			if (fabs(dx) > eps) {
				double t = ((double)(x2[i]) - cx) / dx;
				double y = cy + t * dy;
				if (y >= (double)(y1[i]) - eps && y <= (double)(y2[i]) + eps) {
					l = min(l, t);
					r = max(r, t);
				}
			}
		}

		{
			if (fabs(dy) > eps) {
				double t = ((double)(y1[i]) - cy) / dy;
				double x = cx + t * dx;
				if (x >= (double)(x1[i]) - eps && x <= (double)(x2[i]) + eps) {
					l = min(l, t);
					r = max(r, t);
				}
			}
		}
		{
			if (fabs(dy) > eps) {
				double t = ((double)(y2[i]) - cy) / dy;
				double x = cx + t * dx;
				if (x >= (double)(x1[i]) - eps && x <= (double)(x2[i]) + eps) {
					l = min(l, t);
					r = max(r, t);
				}
			}
		}

		if (l + eps <= r) {
			segs.push_back(make_pair(l, r));
		}
	}
	sort(segs.begin(), segs.end());
	if (segs.size() == 0) {
		return 0.0;
	}
	double res = 0.0;
	double l = segs[0].first, r = segs[0].second;
	for (int i = 1; i < segs.size(); ++i) {
		if (segs[i].first > r + eps) {
			res = max(res, r - l);
			l = segs[i].first;
			r = segs[i].second;
		} else {
			r = max(r, segs[i].second);
		}
	}
	res = max(res, r - l);
	return res * dist(0.0, 0.0, dx, dy);
}

void solve(int test) {
	int n;
	cin >> n;
	vector < long long > x1(n), y1(n), x2(n), y2(n);
	vector < long long > x, y;
	for (int i = 0; i < n; ++i) {
		cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
		x.push_back(x1[i]);
		x.push_back(x2[i]);
		y.push_back(y1[i]);
		y.push_back(y2[i]);
	}
	sort(x.begin(), x.end());
	x.resize(unique(x.begin(), x.end()) - x.begin());
	sort(y.begin(), y.end());
	y.resize(unique(y.begin(), y.end()) - y.begin());

	vector < pair < long long, long long > > p;
	for (int i = 0; i < x.size(); ++i) {
		for (int j = 0; j < y.size(); ++j) {
			p.push_back(make_pair(x[i], y[j]));
		}
	}

	double res = 0.0;
	for (int i = 0; i < p.size(); ++i) {
		for (int j = i + 1; j < p.size(); ++j) {
			res = max(res, get(x1, y1, x2, y2, p[i], p[j]));
		}
	}
	printf("Case #%d: %.6lf\n", test, res);
}

void gen() {
	int n = 20;
	printf("%d\n", n);
	for (int i = 0; i < n; ++i) {
		printf("%d %d %d %d\n", 4 * i, 4 * i + 1, 4 * i + 2, 4 * i + 3);
	}
}

int main(int argc, char* argv[]) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	//gen();

	int left_bound, right_bound;

	/*freopen(argv[3], "w", stdout);

	
	sscanf(argv[1], "%d", &left_bound);
	sscanf(argv[2], "%d", &right_bound);*/

	int t;
	cin >> t;
	left_bound = 1, right_bound = t;
	for (int i = 1; i <= t; ++i) {
		if (i >= left_bound && i <= right_bound) {
			solve(i);
		}
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}

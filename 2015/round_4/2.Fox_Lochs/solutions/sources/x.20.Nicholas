#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
const double eps = 1e-10;
const int inf = 1000000009;
const int MOD = 1000000007;
int i, j, k, m, n, l;
const int N = 2000005;
int X1[N], Y1[N], X2[N], Y2[N];

int main() {
	freopen("b.in", "r", stdin);
	freopen("b.txt", "w", stdout);
	int tn; cin >> tn; F1(tt,tn)
	{
		cin >> n; F0(i, n) cin >> X1[i] >> Y1[i] >> X2[i] >> Y2[i];
		vector<pii> c; F0(i, n) {
			c.push_back(pii(X1[i], Y1[i]));
			c.push_back(pii(X1[i], Y2[i]));
			c.push_back(pii(X2[i], Y1[i]));
			c.push_back(pii(X2[i], Y2[i]));
		}
		int m = SZ(c);
		double ans = 0.0;
		F0(i, m) F0(j, m) if (c[i] < c[j]) {
			vector<pdd> seg;
			double mult = 1.0;
			if (c[i].first != c[j].first && c[i].second != c[j].second) {
				double A = c[j].second - c[i].second;
				double B = c[i].first - c[j].first;
				double C = A * c[i].first + B * c[i].second;
				mult = sqrt(A*A + B*B) / fabs(B);
				F0(k, n) {
					vector<double> xs;
					double y1 = (C - A*X1[k]) / B;
					double y2 = (C - A*X2[k]) / B;
					if (y1 > Y1[k] - eps && y1 < Y2[k] + eps) xs.push_back(X1[k]);
					if (y2 > Y1[k] - eps && y2 < Y2[k] + eps) xs.push_back(X2[k]);
					double x1 = (C - B*Y1[k]) / A;
					double x2 = (C - B*Y2[k]) / A;
					if (x1 > X1[k] - eps && x1 < X2[k] + eps) xs.push_back(x1);
					if (x2 > X1[k] - eps && x2 < X2[k] + eps) xs.push_back(x2);
					if (xs.size() >= 2) {
						sort(xs.begin(), xs.end());
						seg.push_back(pdd(xs[0], xs.back()));
					}
				}
			}
			else if (c[i].first == c[j].first) {
				int X = c[i].first;
				F0(k, n) {
					if (X1[k] <= X && X <= X2[k]) seg.push_back(pdd(Y1[k], Y2[k]));
				}
			}
			else {
				double Y = c[i].second;
				F0(k, n) {
					if (Y1[k] <= Y && Y <= Y2[k]) seg.push_back(pdd(X1[k], X2[k]));
				}
			}
			if (!seg.empty()) {
				sort(seg.begin(), seg.end());
				double xl = seg[0].first, xr = seg[0].second, best = xr - xl;
				F1(k, SZ(seg) - 1) {
					if (seg[k].first > xr + eps) {
						xl = seg[k].first;
						xr = seg[k].second;
					}
					else {
						xr = max(xr, seg[k].second);
					}
					best = max(best, xr - xl);
					if (best * mult > 8.5) {
						best = best;
					}
				}
				ans = max(ans, best * mult);
				
			}
		}

		cout << "Case #" << tt << ": ";
		printf("%.6lf\n", ans);
		cerr << "Test " << tt << "/" << tn << ": Finished" << endl;
	}
	return 0;
}

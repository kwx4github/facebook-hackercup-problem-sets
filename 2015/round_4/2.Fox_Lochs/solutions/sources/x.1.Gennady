#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct Frac {
  long long a;
  long long b;

  Frac(long long a, long long b) {
    if (b < 0) {
      a = -a;
      b = -b;
    }
    this->a = a;
    this->b = b;
  }

  double value() const {
    return 1.0 * a / b;
  }

  bool operator <(const Frac &other) const {
    return (a * other.b < b * other.a);
  }

  bool operator >(const Frac &other) const {
    return (a * other.b > b * other.a);
  }

  bool operator <=(const Frac &other) const {
    return (a * other.b <= b * other.a);
  }

  bool operator >=(const Frac &other) const {
    return (a * other.b >= b * other.a);
  }
};

const int N = 777;

long long x[N][2], y[N][2];

int main(int argc, char* argv[]) {
  int TEST_FROM = 0;
  int TEST_TO = 123456789;
  if (argc == 3) {
    sscanf(argv[1], "%d", &TEST_FROM);
    sscanf(argv[2], "%d", &TEST_TO);
  }
  freopen("in", "r", stdin);
//    comment this
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    fflush(stdout);
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 2; j++) {
        cin >> x[i][j] >> y[i][j];
      }
    }
    double res = 0.0;
    for (int ii = 0; ii < n; ii++) {
      for (int jj = 0; jj < n; jj++) {
        for (int ix = 0; ix < 2; ix++) {
          for (int iy = 0; iy < 2; iy++) {
            for (int jx = 0; jx < 2; jx++) {
              for (int jy = 0; jy < 2; jy++) {
                long long xa = x[ii][ix];
                long long ya = y[ii][iy];
                long long xb = x[jj][jx];
                long long yb = y[jj][jy];
                long long a = yb - ya;
                long long b = xa - xb;
                long long c = -a * xa - b * ya;
                if (a == 0 && b == 0) {
                  continue;
                }
                vector < pair <Frac, int> > ev;
                for (int i = 0; i < n; i++) {
                  if (xa == xb) {
                    if (x[i][0] <= xa && xa <= x[i][1]) {
                      ev.push_back(make_pair(Frac(y[i][0], 1), 0));
                      ev.push_back(make_pair(Frac(y[i][1], 1), 1));
                    }
                    continue;
                  }
                  if (ya == yb) {
                    if (y[i][0] <= ya && ya <= y[i][1]) {
                      ev.push_back(make_pair(Frac(x[i][0], 1), 0));
                      ev.push_back(make_pair(Frac(x[i][1], 1), 1));
                    }
                    continue;
                  }
                  Frac fmin(1, 0);
                  Frac fmax(-1, 0);
                  for (int j = 0; j < 2; j++) {
                    Frac f(-a * x[i][j] - c, b);
                    if (Frac(y[i][0], 1) <= f && f <= Frac(y[i][1], 1)) {
                      fmin = min(fmin, Frac(x[i][j], 1));
                      fmax = max(fmax, Frac(x[i][j], 1));
                    }
                  }
                  for (int j = 0; j < 2; j++) {
                    Frac f(-b * y[i][j] - c, a);
                    if (Frac(x[i][0], 1) <= f && f <= Frac(x[i][1], 1)) {
                      fmin = min(fmin, f);
                      fmax = max(fmax, f);
                    }
                  }
                  if (fmin < fmax) {
                    ev.push_back(make_pair(fmin, 0));
                    ev.push_back(make_pair(fmax, 1));
                  }
                }
                sort(ev.begin(), ev.end());
                int balance = 0;
                double from = -1;
                double max_diff = 0;
                for (int i = 0; i < (int)ev.size(); i++) {
                  if (ev[i].second == 0) {
                    if (balance == 0) {
                      from = ev[i].first.value();
                    }
                    balance++;
                  } else {
                    balance--;
                    if (balance == 0) {
                      double cur_diff = ev[i].first.value() - from;
                      if (cur_diff > max_diff) {
                        max_diff = cur_diff;
                      }
                    }
                  }
                }
                if (xa == xb || ya == yb) {
                  if (max_diff > res) {
                    res = max_diff;
                  }
                } else {
                  double xxa = 0;
                  double xxb = max_diff;
                  double yya = (-a * xxa - c) / b;
                  double yyb = (-a * xxb - c) / b;
                  double dist = sqrt((xxa - xxb) * (xxa - xxb) + (yya - yyb) * (yya - yyb));
                  if (dist > res) {
                    res = dist;
                  }
                }
              }
            }
          }
        }
      }
    }
    printf("%.6f\n", res);
    fflush(stdout);
    fprintf(stderr, "test %d solved, time = %d ms\n", qq, clock());
  }
  return 0;
}

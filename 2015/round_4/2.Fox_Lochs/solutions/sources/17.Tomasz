#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

const LD INF = 1e64;
struct rect {
    PII l,r;
    rect(int x1, int y1, int x2, int y2): l(x1,y1), r(x2,y2) {}
    pair<LD,LD> intersect(PII a, PII dir) {
        LD bg = -INF;
        LD en = INF;
        if (dir.X > 0) {
            maxi(bg,(LD) (l.X - a.X)/dir.X);
            mini(en,(LD) (r.X - a.X)/dir.X);
        } else if (dir.X < 0) {
            mini(en,(LD) (l.X - a.X)/dir.X);
            maxi(bg,(LD) (r.X - a.X)/dir.X);
        } else {
            if (a.X > r.X || a.X < l.X) bg = INF;
        }
        if (dir.Y > 0) {
            maxi(bg,(LD) (l.Y - a.Y)/dir.Y);
            mini(en,(LD) (r.Y - a.Y)/dir.Y);
        } else if (dir.Y < 0) {
            mini(en,(LD) (l.Y - a.Y)/dir.Y);
            maxi(bg,(LD) (r.Y - a.Y)/dir.Y);
        } else {
            if (a.Y > r.Y || a.Y < l.Y) bg = INF;
        }
        return MP(bg,en);
    }
};
LD dist(PII b) {
    return sqrtl((LL)b.X*b.X+(LL)b.Y*b.Y);
}

const LD eps = 1e-12;

void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n;
    cin >> n;
    vector<rect> R;
    vector<PII> P;
    set<int> X, Y;
    REP(i,n) {
        LD x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        R.PB(rect(x1,y1,x2,y2));
        X.insert(x1); X.insert(x2);
        Y.insert(y1); Y.insert(y2);
    }

    for (int x : X) for (int y : Y) {
        P.PB(MP(x,y));
    }
    int N = SZ(P);
    LD res = 0;
    REP(ai, N) REP(bi,ai) {
        PII a = P[ai];
        PII b = P[bi];
        if (a == b) continue;
        PII dir(b.X-a.X, b.Y-a.Y);
        vector<pair<LD, int> > ev;
        REP(i,n) {
            auto pr = R[i].intersect(a,dir);
            if (pr.X < pr.Y) {
                ev.PB(MP(pr.X, 1));
                ev.PB(MP(pr.Y+eps, -1));
            }
        }
        sort(ALL(ev));
        int cnt = 0;
        LD best = -INF;
        LD bg = -INF;
        for (auto e : ev) {
            if (cnt == 0) bg = e.X;
            cnt += e.Y;
            maxi(best, e.X-bg);
        }
        maxi(res, (best-eps)*dist(dir));
    }
    res = round(res*1e6)/1e6;
    cout << res << endl;
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(6);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


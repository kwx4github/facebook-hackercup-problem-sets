import java.io.*;
import java.util.*;

public class B {
	FastScanner in;
	PrintWriter out;

	class Point {
		double x, y;

		public Point(double x, double y) {
			super();
			this.x = x;
			this.y = y;
		}

		@Override
		public String toString() {
			return "Point [x=" + x + ", y=" + y + "]";
		}

	}

	class Line {
		double A, B, C;

		Line(Point a, Point b) {
			A = b.y - a.y;
			B = a.x - b.x;
			C = -(A * a.x + B * a.y);
		}

		@Override
		public String toString() {
			return "Line [A=" + A + ", B=" + B + ", C=" + C + "]";
		}

	}

	final double eps = 1e-13;

	double scalMul(Point a, Point b, Point c) {
		return (b.x - a.x) * (c.x - a.x) + (b.y - a.y) * (c.y - a.y);
	}

	Point intersect(Line l1, Line l2) {
		double zn = l1.A * l2.B - l2.A * l1.B;
		if (Math.abs(zn) <= eps) {
			return null;
		}
		double x = l2.C * l1.B - l1.C * l2.B;
		double y = l1.C * l2.A - l2.C * l1.A;
		return new Point(x / zn, y / zn);
	}

	class Event implements Comparable<Event> {
		double time;
		int type;

		public Event(double time, int type) {
			super();
			this.time = time;
			this.type = type;
		}

		@Override
		public int compareTo(Event o) {
			return Double.compare(time, o.time);
		}

		@Override
		public String toString() {
			return "Event [time=" + time + ", type=" + type + "]";
		}

	}

	double dist(Point a, Point b) {
		double dx = a.x - b.x;
		double dy = a.y - b.y;
		return Math.sqrt(dx * dx + dy * dy);
	}

	double getTime(Point p1, Point p2, Point p) {
		double d1 = dist(p1, p);
		double d2 = dist(p2, p);
		if (scalMul(p1, p2, p) >= 0) {
			return d1;
		}
		return -d1;
	}

	Event[] getEvents(Line l, Point[] rect, Point p1, Point p2, Line[] rectLines) {
		double maxTime = -Double.MAX_VALUE / 2;
		double minTime = Double.MAX_VALUE / 2;
		for (Line rLine : rectLines) {
			Point p = intersect(rLine, l);
			if (p == null) {
				continue;
			}
			if (p.x >= rect[0].x - eps && p.x <= rect[1].x + eps) {
				if (p.y >= rect[0].y - eps && p.y <= rect[1].y + eps) {
					double time = getTime(p1, p2, p);
					maxTime = Math.max(maxTime, time);
					minTime = Math.min(minTime, time);
				}
			}
		}
		if (minTime - eps <= maxTime + eps) {
			return new Event[] { new Event(minTime - eps, +1),
					new Event(maxTime + eps, -1) };
		}
		return new Event[] {};
	}

	void solve() {
		Locale.setDefault(Locale.US);
		int tc = in.nextInt();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			int n = in.nextInt();
			Point[][] a = new Point[n][2];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < 2; j++) {
					a[i][j] = new Point(in.nextInt(), in.nextInt());
				}
			}
			Line[][] rectLines = new Line[n][4];
			for (int i = 0; i < n; i++) {
				Point p0 = a[i][0];
				Point p2 = a[i][1];
				Point p1 = new Point(p0.x, p2.y);
				Point p3 = new Point(p2.x, p0.y);
				rectLines[i][0] = new Line(p0, p1);
				rectLines[i][1] = new Line(p1, p2);
				rectLines[i][2] = new Line(p2, p3);
				rectLines[i][3] = new Line(p3, p0);
			}
			Set<Integer> iX = new HashSet<Integer>();
			Set<Integer> iY = new HashSet<Integer>();
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < 2; j++) {
					iX.add((int) a[i][j].x);
					iY.add((int) a[i][j].y);
				}
			}
			ArrayList<Integer> xx = new ArrayList<Integer>();
			for (int x : iX) {
				xx.add(x);
			}
			ArrayList<Integer> yy = new ArrayList<Integer>();
			for (int y : iY) {
				yy.add(y);
			}
			double ans = 0;
			for (int i1 = 0; i1 < xx.size(); i1++)
				for (int j1 = 0; j1 < yy.size(); j1++)
					for (int i2 = 0; i2 < xx.size(); i2++)
						for (int j2 = 0; j2 < yy.size(); j2++) {
							int x1 = xx.get(i1);
							int y1 = yy.get(j1);
							int x2 = xx.get(i2);
							int y2 = yy.get(j2);
							if (x1 > x2 || (x2 == x1 && y1 > y2)) {
								continue;
							}
							if (x1 == x2 && y1 == y2) {
								continue;
							}
							ArrayList<Event> allEvents = new ArrayList<B.Event>();
							Point p1 = new Point(x1, y1);
							Point p2 = new Point(x2, y2);
							Line l = new Line(p1, p2);
							for (int i = 0; i < n; i++) {
								Event[] tmp = getEvents(l, a[i], p1, p2,
										rectLines[i]);
								for (Event e : tmp) {
									allEvents.add(e);
								}
							}
							Collections.sort(allEvents);
							double last = 0;
							int cur = 0;
							for (Event e : allEvents) {
								if (e.type == 1) {
									cur++;
									if (cur == 1) {
										last = e.time;
									}
								} else {
									cur--;
									if (cur == 0) {
										ans = Math.max(ans, e.time - last);
									}
								}
							}
						}
			out.printf("%.6f\n", ans);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("B.txt"));
			out = new PrintWriter(new File("B.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {
		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new B().run();
	}
}
#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <string.h>
#include <math.h>
#include <fstream>
#include <iostream>
#include <ctime>
using namespace std;
#include <stdio.h>
#include <math.h>
#define eps 1E-12
struct P
{ 
	double x, y;
	P(double x=0, double y=0): x(x), y(y) {}
};
P operator +(P a, P b) { return P(a.x+b.x, a.y+b.y); }
P operator -(P a, P b) { return P(a.x-b.x, a.y-b.y); }
P operator *(P a, double b) { return P(a.x*b, a.y*b); }
double operator &(P a, P b) { return a.x*b.x+a.y*b.y; }
double operator *(P a, P b) { return a.x*b.y-a.y*b.x; }
double operator !(P a) { return sqrt(a&a); }
P operator ~(P a) { return P(-a.y, a.x); }
bool operator <(P a, P b)
{
	if(fabs(a.x-b.x)<eps) return a.y<b.y;
	else return a.x<b.x;
}
P p1;
bool ill(P a, P b, P c, P d)
{
	double d0, d1, d2;
	d0=(b-a)*(d-c);
	d1=(c-a)*(d-c);
	d2=(c-a)*(b-a);
	if(d0>-eps && d0<eps) return 0;
	if(d0<0) { d0=-d0; d1=-d1; d2=-d2; }
	p1=a+(b-a)*(d1/d0);
	return d2>-eps && d2<d0+eps;
}
#define N 22
P v[N][5], p[N*4], g[N*4];
bool in(int n, P a, P b)
{
	int i;
	for(i=0; i<n; i++)
	{
		if(a.x+eps>v[i][0].x && a.x-eps<v[i][2].x && a.y+eps>v[i][0].y && a.y-eps<v[i][2].y)
		if(b.x+eps>v[i][0].x && b.x-eps<v[i][2].x && b.y+eps>v[i][0].y && b.y-eps<v[i][2].y)
			return 1;
	}
	return 0;
}
double take(int n, P a, P b)
{
	int i, j, k;
	k=0;
	for(i=0; i<n; i++)
		for(j=0; j<4; j++)
			if(ill(a, b, v[i][j], v[i][j+1])) g[k++]=p1;
	sort(g, g+k);
	double l=0;
	double r=0;
	for(i=0; i+1<k; r=max(r, l), i++)
		if(in(n, g[i], g[i+1])) l+=!(g[i+1]-g[i]);
		else l=0;
	return r;
}
void solve()
{
	int n, i, j, k;
	scanf("%d", &n);
	k=0;
	for(i=0; i<n; i++)
	{
		double x1, x2, y1, y2;
		scanf("%lf%lf%lf%lf", &x1, &y1, &x2, &y2);
		v[i][0]=P(min(x1, x2), min(y1, y2));
		v[i][1]=P(max(x1, x2), min(y1, y2));
		v[i][2]=P(max(x1, x2), max(y1, y2));
		v[i][3]=P(min(x1, x2), max(y1, y2));
		v[i][4]=v[i][0];
		p[k++]=v[i][0];
		p[k++]=v[i][1];
		p[k++]=v[i][2];
		p[k++]=v[i][3];
	}
	double r=0;
	for(i=0; i<k; i++)
		for(j=i+1; j<k; j++)
		{
			if(fabs(p[i].x-p[j].x)<eps && fabs(p[i].y-p[j].y)<eps) continue;
			r=max(r, take(n, p[i], p[j]));
		}
	printf("%.6lf\n", r);
}
int main()
{
	int ts;
	scanf("%d", &ts);
	for(int t=1; t<=ts; t++)
	{
		long long tm=clock();
		printf("Case #%d: ", t);
		fprintf(stderr, "Case %d: ", t);
		solve();
		fprintf(stderr, "Done in %lld\n", clock()-tm);
	}
    return 0;
}
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

typedef long double LD;

struct Line {
    LL a, b, c;
    Line (LL x1, LL y1, LL x2, LL y2) {
        a = y1 - y2;
        b = x2 - x1;
        c = -x1 * a - y1 * b;
    }
};

struct Rectangle {
    LL l, r, b, t;
};

bool covers = false;
bool parallel = false;


pair<LD, LD> intersect_hori(Line l, LL y) {
    parallel = false;
    covers = false;
    // l.a * x + l.b * y + l.c == 0
    if (l.a == 0) {
        parallel = true;
        if (l.b * y + l.c == 0) {
            covers = true;
        }
        return MP(y, y);
    }
    LD x = (-l.b * y - l.c) / (LD)l.a;
    return MP(x, y);
}

pair<LD, LD> intersect_verti(Line l, LL x) {
    LD y = (-l.a * x - l.c) / (LD)l.b;
    return MP(x, y);
}

LD intersect_verti_d(Line l, LD x) {
    LD y = (-l.a * x - l.c) / (LD)l.b;
    return y;
}

const LD EPS = 1e-9;

bool point_in_box(pair<LD, LD> p, Rectangle x) {
    return p.X >= x.l - EPS && p.X <= x.r + EPS && p.Y >= x.b - EPS && p.Y <= x.t + EPS;
}

LD sq(LD x) {
    return x * x;
}

LD calc(Line l, vector<Rectangle> v) {
    if (abs(l.a) > abs(l.b)) {
        swap(l.a, l.b);
        REP (i, v.size()) {
            swap(v[i].l, v[i].b);
            swap(v[i].r, v[i].t);
        }
    }
    vector<pair<LD, int>> xs;
    for (auto x : v) {
        vector<pair<LD, LD>> points;
        points.PB(intersect_hori(l, x.b));
        if (covers) {
            xs.PB(MP(x.l, x.r));
            continue;
        }
        if (parallel) {
            points.pop_back();
        }
        points.PB(intersect_hori(l, x.t));
        if (covers) {
            xs.PB(MP(x.l, x.r));
            continue;
        }
        if (parallel) {
            points.pop_back();
        }
        points.PB(intersect_verti(l, x.l));
        points.PB(intersect_verti(l, x.r));
        LD l = 1e30;
        LD r = -1e30;
        for (auto p : points) {
            if (point_in_box(p, x)) {
                l = min(l, p.X);
                r = max(r, p.X);
            }
        }
        if (l < r - EPS) {
            xs.PB(MP(l, -1));
            xs.PB(MP(r, 1));
        }
    }
    sort(ALL(xs));
    LD pr = xs[0].ST;
    int c = 0;
    LD res = 0;
    for (auto x : xs) {
        if (c == 0 && x.ND < 0) {
            pr = x.ST;
        }
        if (c < 0) {
            LD yl = intersect_verti_d(l, pr);
            LD yr = intersect_verti_d(l, x.ST);
            res = max(res, sqrtl(sq(x.ST - pr) + sq(yr - yl)));
        }
        c += x.ND;
    }
    return res;
}

vector<pair<LL, LL>> gen(Rectangle r) {
    vector<pair<LL, LL>> v;
    v.PB(MP(r.l, r.b));
    v.PB(MP(r.l, r.t));
    v.PB(MP(r.r, r.b));
    v.PB(MP(r.r, r.t));
    return v;
}

LD alg() {
    int n;
    cin >> n;
    vector<Rectangle> v(n);
    REP (i, n) {
        cin >> v[i].l >> v[i].b >> v[i].r >> v[i].t;
    }
    LD res = 0;
    REP (i, n) {
        REP (j, i + 1) {
            auto p_a = gen(v[i]);
            auto p_b = gen(v[j]);
            for (auto p1 : p_a) {
                for (auto p2 : p_b) {
                    if (p1.X != p2.X || p1.Y != p2.Y) {
                        Line l(p1.X, p1.Y, p2.X, p2.Y);
                        res = max(res, calc(l, v));
                    }
                }
            }
        }
    }
    return res;
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d + 1) {
        cout << "Case #" << i << ": " << fixed << setprecision(6) << alg() << endl;
    }
}

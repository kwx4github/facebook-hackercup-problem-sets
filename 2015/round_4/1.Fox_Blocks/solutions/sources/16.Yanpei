#include <map>
#include <set>
#include <vector>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iostream>
#include <algorithm>

using namespace std;

const int MOD = (int)1e9 + 7;
const int N = 1000000 + 10;

int n, q;
int a[N];
int top;
long long c[N], xx[N];
int st[N];
vector<pair<int, int> > query[N];

void add(int p, long long x)
{
	for(p ++; p < N; p += p & -p) {
		c[p] += x;
	}
}

long long ask(int p)
{
	long long ret = 0;
	for(p ++; p; p -= p & -p) {
		ret += c[p];
	}
	return ret;
}

void solve()
{
	cin >> n >> q;
	for(int i = 0; i < n; ++ i) {
		scanf("%d", a + i);
		query[i].clear();
	}
	memset(c, 0, sizeof c);
	for(int i = 0; i < q; ++ i) {
		int l, r;
		scanf("%d%d", &l, &r);
		query[l - 1].push_back(make_pair(r - 1, i));
	}
	top = 0;
	long long ans = 0;
	for(int i = n - 1; i >= 0; -- i) {
		/*
		cout << "now is " << i << endl;
		for(int j = top; j >= 1; -- j) {
			cout << st[j] << ' ';
		}
		cout << endl;
		*/
		for( ; top > 0; ) {
			if (a[st[top]] <= a[i]) {
				if (top > 1) {
					add(st[top - 1], (long long)(min(a[i], a[st[top - 1]]) - a[st[top]]) * (st[top - 1] - i - 1));
				}
				top --;
			} else {
				break;
			}
		}
		st[++ top] = i;
		for(int e = 0; e < query[i].size(); ++ e) {
			xx[query[i][e].second] = ask(query[i][e].first);
			ans += ask(query[i][e].first);
		}
	}
	for(int i = 0; i < q; ++ i) {
		//cout << xx[i] << endl;
	}
	ans %= MOD;
	printf("%lld\n", ans);
}

int main()
{
	int t;
	cin >> t;
	for(int i = 0; i < t; ++ i) {
		cout << "Case #" << i + 1 << ": ";
		solve();
	}
	return 0;
}

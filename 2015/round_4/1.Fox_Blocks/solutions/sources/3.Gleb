#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);
const int size = 500 * 1000 + 100;
const int ssize = 20;
const long long mdl = 1000 * 1000 * 1000 + 7;

int parleft[ssize][size];
int parright[ssize][size];

long long sumleft[ssize][size];
long long sumright[ssize][size];
long long sumh[size];
long long h[size];
int n, q;
int tc;

int main() {    
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
    	cerr << tnum << endl;
    	scanf("%d%d", &n, &q);
    	for (int i = 0; i < n; i++) {
    		scanf("%lld", &h[i]);
    	}
    	sumh[0] = 0ll;
    	for (int i = 0; i < n; i++)
    		sumh[i + 1] = sumh[i] + h[i];

    	vector <int> st;
    	for (int i = 0; i < n; i++) {
    		while (!st.empty() && h[st.back()] < h[i])
    			st.pop_back();
    		if (st.empty()) {
    			parleft[0][i] = i;
    			sumleft[0][i] = 0ll;
    		} else {
    			parleft[0][i] = st.back();
    			sumleft[0][i] = h[i] * (i - st.back());
    		}
  			st.pb(i);

  			for (int j = 1; j < ssize; j++) {
  				parleft[j][i] = parleft[j - 1][parleft[j - 1][i]];
  				sumleft[j][i] = sumleft[j - 1][i] + sumleft[j - 1][parleft[j - 1][i]];
  			}
    	}

    	st.clear();
    	for (int i = n - 1; i >= 0; i--) {
    		while (!st.empty() && h[st.back()] <= h[i])
    			st.pop_back();
    		if (st.empty()) {
    			parright[0][i] = i;
    			sumright[0][i] = 0ll;
    		} else {
    			parright[0][i] = st.back();
    			sumright[0][i] = h[i] * (st.back() - i);
    		}
    		st.pb(i);

    		for (int j = 1; j < ssize; j++) {
    			parright[j][i] = parright[j - 1][parright[j - 1][i]];
    			sumright[j][i] = sumright[j - 1][i] + sumright[j - 1][parright[j - 1][i]];
    		}
    	}
		
		long long ans = 0;
    	for (int i = 0; i < q; i++) {
    		int lb, rb;
    		scanf("%d%d", &lb, &rb);
    		lb--, rb--;

    		int lp = lb;
    		int rp = rb;
    		long long cur = 0;
    		for (int j = ssize - 1; j >= 0; j--) {
    			if (parright[j][lp] <= rb) {
    				cur += sumright[j][lp];
    				lp = parright[j][lp];
    			}
    			if (parleft[j][rp] >= lb) {
    				cur += sumleft[j][rp];
    				rp = parleft[j][rp];
    			}
    		}


    		cur += h[lp];
  //  		cerr << cur << ' ' << h[lp] << endl;
    		cur -= (sumh[rb + 1] - sumh[lb]);

//    		cerr << tnum << ' ' << i << ' ' << cur << ' ' << lp << ' ' << rp << endl;

    		ans += cur % mdl;
    		ans %= mdl;
    	}

    	printf("Case #%d: %lld\n", tnum + 1, ans);
    }

    return 0;
}
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.io.OutputStream;
import java.util.concurrent.Executors;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.PrintStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.concurrent.ExecutionException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "fox.*blocks.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("foxblocks.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		FoxBlocks solver = new FoxBlocks();
		solver.solve(1, in, out);
		out.close();
	}
}

class FoxBlocks {
    static final long MODULO = (long) (1e9 + 7);

    static class Testcase implements Callable<Testcase> {
        int testNumber;
        int n;
        int q;
        long[] h;
        int[] a;
        int[] b;

        long res;

        Testcase(int testNumber) {
            this.testNumber = testNumber;
        }

        public void readInput(InputReader in) {
            n = in.nextInt();
            q = in.nextInt();
            h = new long[n];
            for (int i = 0; i < n; ++i) {
                h[i] = in.nextLong();
            }
            a = new int[q];
            b = new int[q];
            for (int i = 0; i < q; ++i) {
                a[i] = in.nextInt() - 1;
                b[i] = in.nextInt() - 1;
            }
        }

        static class Description {
            int[] next;
            int[][] jumpTo;
            long[][] jumpSum;
        }

        Description getNext(long[] h) {
            int n = h.length;
            int[] next = new int[n];
            int[] stack = new int[n];
            int sp = 0;
            for (int i = n - 1; i >= 0; --i) {
                while (sp > 0 && h[i] > h[stack[sp - 1]]) --sp;
                if (sp == 0) {
                    next[i] = n;
                } else {
                    next[i] = stack[sp - 1];
                }
                stack[sp++] = i;
            }
            int logn = 1;
            while ((1 << logn) <= n + 1) ++logn;
            int[][] jumpTo = new int[h.length + 1][logn];
            long[][] jumpSum = new long[h.length + 1][logn];
            Arrays.fill(jumpTo[n], n);
            Arrays.fill(jumpSum[n], 0);
            for (int i = n - 1; i >= 0; --i) {
                jumpTo[i][0] = next[i];
                jumpSum[i][0] = (next[i] - i) * h[i];
                for (int j = 1; j < logn; ++j) {
                    jumpTo[i][j] = jumpTo[jumpTo[i][j - 1]][j - 1];
                    jumpSum[i][j] = jumpSum[i][j - 1] + jumpSum[jumpTo[i][j - 1]][j - 1];
                }
            }
            Description desc = new Description();
            desc.next = next;
            desc.jumpTo = jumpTo;
            desc.jumpSum = jumpSum;
            return desc;
        }

        public Testcase call() {
            Description fwd = getNext(h);
            long[] hrev = new long[h.length];
            for (int i = 0; i < h.length; ++i) hrev[i] = h[n - 1 - i];
            Description bwd = getNext(hrev);
            long[] pref = new long[n + 1];
            for (int i = 0; i < n; ++i) {
                pref[i + 1] = pref[i] + h[i];
            }

            res = 0;
            for (int qi = 0; qi < q; ++qi) {
                int qa = a[qi];
                int qb = b[qi];
                res -= (pref[qb + 1] - pref[qa]);
                for (int by = fwd.jumpTo[qa].length - 1; by >= 0; --by) {
                    int dst = fwd.jumpTo[qa][by];
                    if (dst <= qb) {
                        res += fwd.jumpSum[qa][by];
                        qa = dst;
                    }
                }
                for (int by = bwd.jumpTo[n - 1 - qb].length - 1; by >= 0; --by) {
                    int dst = n - 1 - bwd.jumpTo[n - 1 - qb][by];
                    if (dst >= qa) {
                        res += bwd.jumpSum[n - 1 - qb][by];
                        qb = dst;
                    }
                }
                if (qa != qb) throw new RuntimeException();
                res += h[qa];
                res %= MODULO;
            }

            System.err.println("Done test " + testNumber);
            return this;
        }

        public void writeOutput(PrintWriter out) {
            out.println("Case #" + testNumber + ": " + res);
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int nt = in.nextInt();
        List<Future<Testcase>> tests = new ArrayList<Future<Testcase>>();
        ExecutorService pool = Executors.newFixedThreadPool(3);
        for (int it = 0; it < nt; ++it) {
            Testcase t = new Testcase(it + 1);
            t.readInput(in);
            tests.add(pool.submit(t));
        }
        for (Future<Testcase> test : tests) {
            try {
                Testcase t = test.get();
                t.writeOutput(out);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        pool.shutdown();
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

}


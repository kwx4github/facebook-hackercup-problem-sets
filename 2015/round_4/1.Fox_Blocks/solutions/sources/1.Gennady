#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int N = 600010;

long long fenw[N];

void modify(int x, long long v) {
  while (x < N) {
    fenw[x] += v;
    x = (x | (x - 1)) + 1;
  }
}

long long find_sum(int x) {
  long long v = 0;
  while (x > 0) {
    v += fenw[x];
    x &= x - 1;
  }
  return v;
}

const int inf = (int)1.01e9;

int a[N];
int pr[N], ne[N];
vector < pair <int, long long> > push[N];
vector <int> qs[N];
long long ans[N];
int from[N], to[N];

int main(int argc, char* argv[]) {
  int TEST_FROM = 0;
  int TEST_TO = 123456789;
  if (argc == 3) {
    sscanf(argv[1], "%d", &TEST_FROM);
    sscanf(argv[2], "%d", &TEST_TO);
  }
  freopen("in", "r", stdin);
//    comment this
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
//    input here

//    if (qq < TEST_FROM || qq > TEST_TO) {
//      continue;
//    }

//    solution here
    printf("Case #%d: ", qq);
    fflush(stdout);
    int n, q;
    scanf("%d %d", &n, &q);
    vector < pair <int, int> > ev;
    for (int i = 1; i <= n; i++) {
      scanf("%d", a + i);
      ev.push_back(make_pair(a[i], i));
    }
    a[0] = inf;
    a[n + 1] = inf;
    for (int i = 0; i <= n + 1; i++) {
      pr[i] = i - 1;
      ne[i] = i + 1;
    }
    for (int i = 1; i <= n; i++) {
      push[i].clear();
    }
    sort(ev.begin(), ev.end());
    for (int it = 0; it < (int)ev.size(); it++) {
      int i = ev[it].second;
      int x = pr[i];
      int y = ne[i];
      if (1 <= x && y <= n) {
        long long value = (min(a[x], a[y]) - a[i]) * 1LL * (y - x - 1);
        push[y].push_back(make_pair(x, value));
      }
      pr[ne[i]] = pr[i];
      ne[pr[i]] = ne[i];
    }
    for (int i = 1; i <= n; i++) {
      qs[i].clear();
    }
    for (int i = 0; i < q; i++) {
      scanf("%d %d", from + i, to + i);
      qs[to[i]].push_back(i);
    }
    for (int i = 1; i <= n; i++) {
      fenw[i] = 0;
    }
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j < (int)push[i].size(); j++) {
        modify(push[i][j].first, push[i][j].second);
      }
      for (int j = 0; j < (int)qs[i].size(); j++) {
        int id = qs[i][j];
        ans[id] = find_sum(to[id]) - find_sum(from[id] - 1);
      }
    }
    const int md = 1000000007;
    long long res = 0;
    for (int i = 0; i < q; i++) {
      res = (res + ans[i]) % md;
    }
    cout << res << endl;
    fflush(stdout);
    fprintf(stderr, "test %d solved, time = %d ms\n", qq, clock());
  }
  return 0;
}

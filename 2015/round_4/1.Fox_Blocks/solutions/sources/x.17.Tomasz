#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

const int P = 1e9+7;

const int INF = 1e9;
const int MX = 350000;
const int ML = 20;

int nxt[MX][ML];
LL nval[MX][ML];
int prv[MX][ML];
LL pval[MX][ML];

void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n,q;
    cin >> n >> q;
    VI A(n), sum(n+1);
    REP(i,n) cin >> A[i];
    sum[0] = 0;
    REP(i,n) sum[i+1] = sum[i] + A[i];
    stack<PII> S;
    REP(i,n) {
        while(!S.empty() && A[i] >= S.top().Y) {
            nxt[S.top().X][0] = i;
            nval[S.top().X][0] = (LL) S.top().Y * (i-S.top().X); 
            S.pop();
        }
        S.push(MP(i, A[i]));
    }
    while(!S.empty()) { nxt[S.top().X][0] = INF; S.pop(); }
    FORD(i, n-1, 0) {
        while(!S.empty() && A[i] > S.top().Y) {
            prv[S.top().X][0] = i;
            pval[S.top().X][0] = (LL) S.top().Y * (S.top().X-i); 
            S.pop();
        }
        S.push(MP(i, A[i]));
    }
    while(!S.empty()) { prv[S.top().X][0] = -1; S.pop(); }
    REP(ph, ML-1) {
        REP(i, n) {
            int j = nxt[i][ph];
            if (j != INF) {
                nxt[i][ph+1] = nxt[j][ph]; 
                nval[i][ph+1] = nval[i][ph] + nval[j][ph];
            } else nxt[i][ph+1] = INF;
            j = prv[i][ph];
            if (j != -1) {
                prv[i][ph+1] = prv[j][ph];
                pval[i][ph+1] = pval[i][ph] + pval[j][ph];
            } else prv[i][ph+1] = -1;
        }
    }
    LL res = 0;
    REP(_, q) {
        int a,b;
        cin >> a >> b;
        --a;--b;
        LL cur = sum[a] - sum[b+1];
        FORD(ph, ML-1, 0) {
            if (nxt[a][ph] <= b) {
                cur += nval[a][ph];
                a = nxt[a][ph];
            }
            if (prv[b][ph] >= a) {
                cur += pval[b][ph];
                b = prv[b][ph];
            }
        }
        assert(a == b);
        cur += A[a];
        res = (res + cur) % P;
    }
    cout << res << endl;



}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


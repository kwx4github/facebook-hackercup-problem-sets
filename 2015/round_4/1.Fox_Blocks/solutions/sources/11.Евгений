import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.System.exit;
import static java.util.Arrays.sort;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.StringTokenizer;

public class A {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static void add(long f[], int i, long v) {
		do {
			f[i] += v;
			i |= i + 1;
		} while (i < f.length);
	}
	
	static long sum(long f[], int i) {
		long res = f[i];
		while (true) {
			i = (i & (i + 1)) - 1;
			if (i < 0) {
				break;
			}
			res += f[i];
		}
		return res;
	}
	
//	static final Random rng = new Random(42);
	
	static void solve() throws Exception {
		int n = nextInt();
		int q = nextInt();
//		int n = 10, q = 10;
		int h[] = new int[n];
		for (int i = 0; i < n; i++) {
			h[i] = nextInt();
//			h[i] = rng.nextInt(10);
		}
		int a[] = new int[q];
		final int b[] = new int[q];
		Integer qq[] = new Integer[q];
		for (int i = 0; i < q; i++) {
			a[i] = nextInt() - 1;
			b[i] = nextInt();
//			do {
//				a[i] = rng.nextInt(n);
//				b[i] = rng.nextInt(n) + 1;
//			} while (a[i] >= b[i]);
			qq[i] = i;
		}
		sort(qq, new Comparator<Integer>() {
			public int compare(Integer o1, Integer o2) {
				return b[o1] - b[o2];
			}
		});
		long f[] = new long[n];
		int ph[] = new int[n];
		int pos = 0;
		List<Integer> stack = new ArrayList<>();
		long ans = 0;
		for (int i: qq) {
			while (pos < b[i]) {
				while (!stack.isEmpty() && h[stack.get(stack.size() - 1)] < h[pos]) {
					int j = stack.remove(stack.size() - 1);
					add(f, n - j - 1, (long) (h[j] - ph[j]) * (pos - j - 1));
				}
				if (!stack.isEmpty()) {
					int j = stack.get(stack.size() - 1);
					add(f, n - j - 1, (long) (h[pos] - ph[j]) * (pos - j - 1));
					ph[j] = h[pos];
				}
				stack.add(pos);
				ph[pos] = h[pos];
				++pos;
			}
//			ans[i] = sum(f, n - a[i] - 1);
			// DUMB
//			long dumbAns = 0;
//			int max1[] = new int[n];
//			int max2[] = new int[n];
//			max1[a[i]] = h[a[i]];
//			for (int j = a[i] + 1; j < b[i]; j++) {
//				max1[j] = max(max1[j - 1], h[j]);
//			}
//			max2[b[i] - 1] = h[b[i] - 1];
//			for (int j = b[i] - 2; j >= a[i]; j--) {
//				max2[j] = max(max2[j + 1], h[j]);
//			}
//			for (int j = a[i]; j < b[i]; j++) {
//				dumbAns += min(max1[j], max2[j]) - h[j];
//			}
//			if (dumbAns != sum(f, n - a[i] - 1)) {
//				throw new AssertionError();
//			}
			// END DUMB
			ans += sum(f, n - a[i] - 1);
			ans %= 1_000_000_007;
		}
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
				out.flush();
				System.err.print('.');
				System.err.flush();
			}
			in.close();
			out.close();
			System.err.println();
			System.err.flush();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <queue>
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
#include <cstring> 

using namespace std; 

typedef long long ll; 
typedef pair<int, int> pii;

#define INF 1000000000
#define pb push_back 
#define itr iterator 
#define sz size() 
#define mp make_pair

const int mod = 1000000007;

int t, teste, n, q;
int h[410000];
int tree[410000];
pair<int, int> qr[410000];
pair<int, int> st[410000];
int tam;

void upd(int x, int delta) {
	while (x > 0) {
		tree[x] = (tree[x] + delta) % mod;
		x -= (x&-x);
	}
}

int read(int x) {
	int s = 0;
	while (x <= n) {
		s = (s + tree[x]) % mod;
		x += (x&-x);
	}
	return s;
}

void add(int idx) {
	idx--;
	int la = 0;

	while (tam > 0) {
		if (st[tam-1].first > h[idx]) {
			int inc = ((idx - st[tam-1].second - 1) * 1ll * (h[idx] - la)) % mod;
			upd(st[tam-1].second+1, inc);
			break;
		}
		else {
			int inc = ((idx - st[tam-1].second - 1) * 1ll * (st[tam-1].first - la)) % mod;
			upd(st[tam-1].second+1, inc);
			la = st[tam-1].first;
			tam--;
		}
	}
	
	st[tam++] = make_pair(h[idx], idx);
}

int main() {
	for (scanf("%d", &t); t; t--) {

		memset(tree, 0, sizeof(tree));
		tam = 0;

		printf("Case #%d: ", ++teste);
		scanf("%d %d", &n, &q);

		for (int i = 0; i < n; i++) {
			scanf("%d", &h[i]);
		}

		for (int i = 0; i < q; i++) {
			scanf("%d %d", &qr[i].second, &qr[i].first);
		}

		sort(qr, qr+q);

		int ans = 0;
		int la = 0;
		for (int i = 0; i < q; i++) {
			int t_end = qr[i].first;
			int t_begin = qr[i].second;

			while (t_end > la) {
				add(++la);
			}

			ans = (ans + read(t_begin)) % mod;
		}

		printf("%d\n", ans);
	}
}
import java.io.*;
import java.util.*;

public class A {
	FastScanner in;
	PrintWriter out;

	class SegmentTree {
		int[] h;
		int[] p;
		int n;

		SegmentTree(int[] h) {
			this.h = h;
			this.n = h.length;
			p = new int[n * 4];
			build(0, 0, n - 1);
		}

		void build(int v, int l, int r) {
			if (l == r) {
				p[v] = l;
			} else {
				int m = (l + r) >>> 1;
				build(v * 2 + 1, l, m);
				build(v * 2 + 2, m + 1, r);
				p[v] = getMax(p[v * 2 + 1], p[v * 2 + 2]);
			}
		}

		int getMax(int p1, int p2) {
			if (p1 == -1 || p2 == -1) {
				return p1 + p2 + 1;
			}
			if (h[p1] > h[p2]) {
				return p1;
			}
			return p2;
		}

		int getMax(int v, int l, int r, int needL, int needR) {
			if (needL > needR) {
				return -1;
			}
			if (l == needL && r == needR) {
				return p[v];
			}
			int m = (l + r) >>> 1;
			int p1 = getMax(v * 2 + 1, l, m, needL, Math.min(needR, m));
			int p2 = getMax(v * 2 + 2, m + 1, r, Math.max(needL, m + 1), needR);
			return getMax(p1, p2);
		}
	}

	final int mod = (int) 1e9 + 7;

	class Q {
		int from, to, id;

		public Q(int from, int to, int id) {
			super();
			this.from = from;
			this.to = to;
			this.id = id;
		}

		@Override
		public String toString() {
			return "Q [from=" + from + ", to=" + to + ", id=" + id + "]";
		}

	}

	class ST2 {
		long[] add;
		long[] sum;
		int n;

		ST2(int n) {
			this.n = n;
			add = new long[n * 4];
			sum = new long[n * 4];
		}

		void add(int v, int l, int r, int needL, int needR, int val) {
			if (needL > needR) {
				return;
			}
			if (l == needL && r == needR) {
				add[v] += val;
				sum[v] += val * 1L * (needR - needL + 1);
				return;
			}
			int m = (l + r) >>> 1;
			add(v * 2 + 1, l, m, needL, Math.min(needR, m), val);
			add(v * 2 + 2, m + 1, r, Math.max(needL, m + 1), needR, val);
			sum[v] = sum[v * 2 + 1] + sum[v * 2 + 2] + add[v]
					* (needR - needL + 1);
		}

		long get(int v, int l, int r, int needL, int needR) {
			if (needL > needR) {
				return 0;
			}
			if (needL == l && needR == r) {
				return sum[v];
			}
			int m = (l + r) >>> 1;
			return get(v * 2 + 1, l, m, needL, Math.min(m, needR))
					+ get(v * 2 + 2, m + 1, r, Math.max(needL, m + 1), needR)
					+ add[v] * (needR - needL + 1);
		}
	}

	class Block {
		int from, to, h;

		public Block(int from, int to, int h) {
			super();
			this.from = from;
			this.to = to;
			this.h = h;
		}

	}

	void solve() {
		int tc = in.nextInt();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			int n = in.nextInt();
			int qq = in.nextInt();
			int[] h = new int[n];
			for (int i = 0; i < n; i++) {
				h[i] = in.nextInt();
			}
			long[] hSum = new long[n];
			for (int i = 0; i < n; i++) {
				hSum[i] = h[i];
				if (i > 0) {
					hSum[i] += hSum[i - 1];
				}
			}
			int[][] q = new int[qq][2];
			for (int i = 0; i < qq; i++) {
				for (int j = 0; j < 2; j++) {
					q[i][j] = in.nextInt() - 1;
				}
			}
			long[] answer = new long[qq];
			SegmentTree st = new SegmentTree(h);
			Q[] left = new Q[qq];
			Q[] right = new Q[qq];
			for (int i = 0; i < qq; i++) {
				answer[i] -= hSum[q[i][1]];
				if (q[i][0] != 0) {
					answer[i] += hSum[q[i][0] - 1];
				}
				int p1 = st.getMax(0, 0, n - 1, q[i][0], q[i][1]);
				left[i] = new Q(q[i][0], p1, i);
				right[i] = new Q(p1 + 1, q[i][1], i);
			}
			{
				Arrays.sort(left, new Comparator<Q>() {

					@Override
					public int compare(Q arg0, Q arg1) {
						return -Integer.compare(arg0.from, arg1.from);
					}
				});
				ST2 st2 = new ST2(n);
				int cur = n;
				ArrayList<Block> blocks = new ArrayList<A.Block>();
				for (int i = 0; i < left.length; i++) {
					int needFrom = left[i].from;
					while (cur != needFrom) {
						cur--;
						int curH = h[cur];
						while (blocks.size() > 0) {
							Block b = blocks.get(blocks.size() - 1);
							if (b.h < curH) {
								blocks.remove(blocks.size() - 1);
								st2.add(0, 0, n - 1, b.from, b.to, -b.h);
							} else {
								break;
							}
						}
						int to = n - 1;
						if (blocks.size() > 0) {
							to = blocks.get(blocks.size() - 1).from - 1;
						}
						Block newBlock = new Block(cur, to, curH);
						blocks.add(newBlock);
						st2.add(0, 0, n - 1, newBlock.from, newBlock.to,
								newBlock.h);
					}
					long sum = st2.get(0, 0, n - 1, left[i].from, left[i].to);
					answer[left[i].id] += sum;
				}
			}
			{
				Arrays.sort(right, new Comparator<Q>() {

					@Override
					public int compare(Q arg0, Q arg1) {
						return Integer.compare(arg0.to, arg1.to);
					}
				});
				ST2 st2 = new ST2(n);
				int cur = -1;
				ArrayList<Block> blocks = new ArrayList<A.Block>();
				for (int i = 0; i < right.length; i++) {
					int needTo = right[i].to;
					while (cur != needTo) {
						cur++;
						int curH = h[cur];
						while (blocks.size() > 0) {
							Block b = blocks.get(blocks.size() - 1);
							if (b.h < curH) {
								blocks.remove(blocks.size() - 1);
								st2.add(0, 0, n - 1, b.from, b.to, -b.h);
							} else {
								break;
							}
						}
						int from = 0;
						if (blocks.size() > 0) {
							from = blocks.get(blocks.size() - 1).to + 1;
						}
						Block newBlock = new Block(from, cur, curH);
						blocks.add(newBlock);
						st2.add(0, 0, n - 1, newBlock.from, newBlock.to,
								newBlock.h);
					}
					long sum = st2.get(0, 0, n - 1, right[i].from, right[i].to);
					answer[right[i].id] += sum;
				}
			}
			long res = 0;
			for (int i = 0; i < qq; i++) {
				res += answer[i];
				res %= mod;
			}
			if (res < 0) {
				res += mod;
			}
			out.println(res);
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("A.txt"));
			out = new PrintWriter(new File("A.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {
		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new A().run();
	}
}
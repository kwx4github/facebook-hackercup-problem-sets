#include <bits/stdc++.h>
using namespace std;

double prob[50001][4];




struct matrix
{
	static const int N = 3;
	double x[N+1][N+1];
	matrix(){memset(x, 0, sizeof(x));}
	matrix(double init)
	{
		memset(x, 0, sizeof(x));
		for(int i = 1; i <= N; i++)
			x[i][i] = init;
	}
	matrix operator +(matrix that)
	{
		matrix ret;
		for(int i = 1; i <= N; i++)
			for(int j = 1; j <= N; j++)
				ret.x[i][j] = (x[i][j] + that.x[i][j]);
		return ret;
	}
	matrix operator -(matrix that)
	{
		matrix ret;
		for(int i = 1; i <= N; i++)
			for(int j = 1; j <= N; j++)
				ret.x[i][j] = (x[i][j] - that.x[i][j]);
		return ret;
	}
	matrix operator *(matrix that)
	{
		matrix ret;
		for(int i = 1; i <= N; i++)
			for(int j = 1; j <= N; j++)
				for(int k = 1; k <= N; k++)
					ret.x[i][j] = (ret.x[i][j] + x[i][k] * that.x[k][j]);
		return ret;
	}	
}I(1);

matrix power(matrix b, long long e)
{
	matrix ret = I;
	while(e)
	{
		if(e&1) ret = ret * b;
		b = b * b;
		e /= 2;
	}
	return ret;
}

/*  Note
	1. Set N: matrix size
	2. Set mod
*/

/*  Eaxmple
	matrix init, trans;
	init.x[1][1] = 2, init.x[2][1] = 1;
	trans.x[1][1] = 2, trans.x[1][2] = 1, trans.x[2][2] = 2;
	cout << (power(trans, 5) * init).x[1][1] << endl;
*/

double dp[100001];

double solveSmall(vector <double> ps, int want)
{
	for(int i = 0; i <= want; i++)
		dp[i] = 0;
	dp[0] = 1;
	for(int i = 0; i < ps.size(); i++)
	{
		dp[want] = dp[want-1] * ps[i] + dp[want];
		for(int j = min(want-1, i+1); j >= 1; j--)
			dp[j] = dp[j-1] * (ps[i]) + dp[j] * (1.0 - ps[i]);
		dp[0] *= (1.0 - ps[i]);
	}
	return dp[want];
}


complex <double> x[1<<20];
complex <double> y[1<<20];
complex <double> r[1<<20];

namespace Fourier
{
	// n must be 2^k
	complex <double> t[1<<20];
	void FFT(complex <double> *array, int n, double pi = M_PI)
	{
		for(int step = n>>1; step >= 1; step >>= 1)
		{
			complex <double> w(cos(2 * pi * step / n), sin(2 * pi * step / n));
			for(int start = 0; start < step; start ++)
			{
				complex <double> factor(1, 0);
				int z = 0;
				for(int i = start; i < n; i += step << 1)
				{	
					array[i+step] *= factor;
					array[i] += array[i+step];
					array[i+step] = array[i] - array[i+step] - array[i+step];
					factor *= w;
					t[z] = array[i];
					t[z+n/step/2] = array[i+step];
					z ++;
				}
				z = 0;
				for(int i = start; i < n; i += step)
					array[i] = t[z++];
			}
		}
		for(int i = 0; i < n; i++)
			array[i] *= complex <double> (1/sqrt(n), 0);
	}

	void IFFT(complex <double> *array, int n)
	{
		FFT(array, n, -M_PI);
	}

	void cyclic_convolution(complex <double> *A, complex <double> *B, complex <double> *result, int n)
	{
		FFT(A, n);
		FFT(B, n);
		for(int i = 0; i < n; i++)
			result[i] = A[i] * B[i];
		IFFT(result, n);
		for(int i = 0; i < n; i++)
			result[i] *= complex <double> (sqrt(n), 0);
	}
}

int LIMIT = 5000;
const int N = 1<<17;
double answer[N];

void mergeAnswer(int want)
{
	for(int i = 0; i < N; i++)
	{
		x[i] = complex <double> (answer[i], 0);
		y[i] = complex <double> ((i <= want ? dp[i] : 0), 0);
	}
	Fourier :: cyclic_convolution(x, y, r, N);
	for(int i = 0; i < N; i++)
		answer[i] = r[i].real();
}

double solve(vector <double> ps, int want)
{
	//return solveSmall(ps, want);
	for(int i = 0; i < N; i++)
		answer[i] = 0;
	answer[0] = 1;
	vector <double> current;
	for(int i = 0; i < ps.size(); i++)
	{
		current.push_back(ps[i]);
		if(current.size() > LIMIT)
		{
			solveSmall(current, want);
			mergeAnswer(want);
			current.clear();
		}
	}
	solveSmall(current, want);
	mergeAnswer(want);
	double ret = 0;
	for(int i = want; i < N; i++)
		ret += answer[i];
	return ret;
}

void solve()
{
	int n;
	cin >> n;
	//n = 50000;
	for(int i = 1; i <= n; i++)
	{
		/*
		prob[i][1] = 1 / 3.0;
		prob[i][2] = 1 / 3.0;
		prob[i][3] = 1 / 3.0;
		continue;*/

		matrix tr, t;
		int v;
		cin >> v;
		//cout << "v = " << v << endl;
		t.x[v][1] = 1;
		for(int x = 1; x <= 3; x++)
			for(int y = 1; y <= 3; y++)
			{
				cin >> tr.x[y][x];
				tr.x[y][x] /= 100.0;
				//cout << x << " " << y << " : " << tr.x[x][y] << endl;
			}
		t = power(tr, 1LL<<20) * t;
		//cout << t.x[1][1] << " " << t.x[2][1] << " " << t.x[3][1] << endl;
		prob[i][1] = t.x[1][1];
		prob[i][2] = t.x[2][1];
		prob[i][3] = t.x[3][1];

	}
	double ans = 0;
	
	for(int c = 1; c <= 3; c++)
	{
		vector <double> ps;
		for(int i = 1; i <= n; i++)
			ps.push_back(prob[i][c]);
		ans += solve(ps, n/2+1);	
		//cout << ":" << solve(ps, n/2+1) << endl;
	}
	if(ans < 0)
		ans = 0;

	cout << ans << endl;
}

int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	int start = clock();
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	int ret = MAIN();
	#ifdef LOCAL_TEST
		cout << "[Finished in " << clock() - start << " ms]" << endl;
	#endif
	return ret;
}

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef vector <vector <long double> > matrix;

matrix mat_prod(matrix &A, matrix &B){
	int N=3,i,j,k;
	matrix C(3, vector <long double> (3, 0));
	REP(i,N) REP(j,N){
		long double tmp = 0;
		REP(k,N) tmp += A[i][k] * B[k][j];
		C[i][j] = tmp;
	}
	return C;
}

int N;

vector <long double> func(void){
	int i,j,k;
	
	int init;
	scanf("%d", &init);
	init--;
	// init = 0;
	
	matrix A(3, vector <long double> (3, 0));
	REP(i,3) REP(j,3){
		int tmp;
		scanf("%d", &tmp);
		// tmp = ((i == j) ? 34 : 33);
		A[i][j] = tmp / 100.0;
	}
	
	vector <long double> ans;
	
	matrix B = A;
	REP(i,30){
		B = mat_prod(B, B);
		REP(j,3){
			double tmp = 0.0;
			REP(k,3) tmp += B[j][k];
			REP(k,3) B[j][k] /= tmp;
		}
	}
	REP(i,6){
		REP(j,3) ans.push_back(B[init][j]);
		B = mat_prod(B, A);
	}
	
//	REP(i,18) printf("%.12f ", (double)ans[i]);
//	cout << endl;
	
	return ans;
}

#define B 600
#define eps 1.0E-9

long double p[20][50010];
int offset[50010];
long double dp[50010][2*B+10];

long double major_prob(int t){
	int i,j;
	
	REP(i,N+1) REP(j,2*B+10) dp[i][j] = 0.0;
	dp[0][B] = 1.0;
	
	double sum = 0.5;
	offset[0] = -B;
	for(i=1;i<=N;i++){
		sum += p[t][i];
		offset[i] = (int)sum - B;
	}
	
	REP(i,N) REP(j,2*B) if(dp[i][j] > eps){
		int d = offset[i+1] - offset[i];
		dp[i+1][j-d] += dp[i][j] * (1.0 - p[t][i]);
		dp[i+1][j-d+1] += dp[i][j] * p[t][i];
	}
	
	long double ans = 0.0;
	REP(i,2*B) if(2*(i+offset[N]) > N) ans += dp[N][i];
//	cout << "A" << ans << endl;
//	cout << offset[N] << endl;
	return ans;
	
/*	REP(i,100) REP(j,100) dp[i][j] = 0.0;
	dp[0][0] = 1.0;
	
	REP(i,N) REP(j,i+1){
		dp[i+1][j] += dp[i][j] * (1.0 - p[t][i]);
		dp[i+1][j+1] += dp[i][j] * p[t][i];
	}
	
	long double ans = 0.0;
	REP(i,N+1) if(2*i > N) ans += dp[N][i];

	return ans; */
}

void main2(void){
	int i,j,k;
	
	cin >> N;
	REP(i,N){
		vector <long double> v = func();
		REP(j,18) p[j][i] = v[j];
	}
	
	long double ans = 0.0;
	REP(i,18) ans += major_prob(i);
	
	printf("%.6f\n", (double)(ans / 6.0));
}

///////////////////////////////////////////////////////////////////////////////////////

int main(void){
	int T,t;
	cin >> T;
	REP(t,T){
		printf("Case #%d: ", t+1);
		main2();
	}
	return 0;
}

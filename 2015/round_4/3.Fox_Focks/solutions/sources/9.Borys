import java.io.*;
import java.util.*;

public class C {
	FastScanner in;
	PrintWriter out;

	double[][] mul(double[][] a, double[][] b) {
		int n = a.length;
		int m = a[0].length;
		int k = b[0].length;
		double[][] res = new double[n][k];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				for (int l = 0; l < k; l++)
					res[i][l] += a[i][j] * b[j][l];
		return res;
	}

	double getAnswer(double[] pr) {
		int n = pr.length;
		final int MAX = Math.min(n + 1, 1000);
		double[] pr1 = new double[MAX];
		double[] pr2 = new double[MAX];
		pr1[0] = 1;
		double curStart = 0;
		for (int i = 0; i < n; i++) {
			Arrays.fill(pr2, 0);
			double curP = pr[i];
			double ev = 0;
			for (int j = 0; j < MAX; j++) {
				ev += pr1[j] * (j + curP);
			}
			int add = ev < MAX / 2 ? 0 : -1;
			for (int j = 0; j < MAX; j++) {
				{
					double tmp1 = pr1[j] * curP;
					if (j + add + 1 < MAX) {
						pr2[j + add + 1] += tmp1;
					}
				}
				{
					double tmp2 = pr1[j] * (1 - curP);
					if (j + add >= 0 && j + add < MAX) {
						pr2[j + add] += tmp2;
					}
				}
			}
			double[] tt = pr1;
			pr1 = pr2;
			pr2 = tt;
			curStart -= add;
		}
		int from = (n + 2) / 2;
		double res = 0;
		for (int i = 0; i < MAX; i++) {
			if (i + curStart >= from) {
				res += pr1[i];
			}
		}
		return res;
	}

	void upd(double[][] a) {
		for (int i = 0; i < a.length; i++) {
			double sum = 0;
			for (int j = 0; j < a[i].length; j++) {
				sum += a[i][j];
			}
			for (int j = 0; j < a[i].length; j++) {
				a[i][j] /= sum;
			}
		}
	}

	void solve() {
		int tc = in.nextInt();
		Locale.setDefault(Locale.US);
		long START = System.currentTimeMillis();
		for (int t = 0; t < tc; t++) {
			out.print("Case #" + (t + 1) + ": ");
			int n = in.nextInt();
			double[][][] start = new double[n][1][3];
			double[][][] p = new double[n][3][3];
			double[][][] p2 = new double[n][3][3];
			for (int i = 0; i < n; i++) {
				int first = in.nextInt() - 1;
				start[i][0][first] = 1.0;
				for (int j = 0; j < 3; j++)
					for (int k = 0; k < 3; k++) {
						p[i][j][k] = in.nextInt() / 100.0;
					}
				p2[i] = p[i];
			}
			double res = 0;
			for (int time = 0; time < 20; time++) {
				for (int i = 0; i < n; i++) {
					p2[i] = mul(p2[i], p2[i]);
					upd(p2[i]);
				}
			}
			double[][][] cur = new double[n][1][3];
			double[] pr = new double[n];
			for (int xx = 0; xx < 6; xx++) {
				for (int i = 0; i < n; i++) {
					p2[i] = mul(p2[i], p[i]);
					cur[i] = mul(start[i], p2[i]);
				}
				for (int color = 0; color < 3; color++) {
					for (int i = 0; i < n; i++) {
						pr[i] = cur[i][0][color];
					}
					res += 1. / 6 * getAnswer(pr);
				}
			}
			out.printf("%.6f\n", res);
			System.err
					.println("time = " + (System.currentTimeMillis() - START));
			System.err.println((t + 1) + "/" + tc + " done");
		}
	}

	void run() {
		try {
			in = new FastScanner(new File("C.txt"));
			out = new PrintWriter(new File("C.out"));

			solve();

			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	void runIO() {
		in = new FastScanner(System.in);
		out = new PrintWriter(System.out);

		solve();

		out.close();
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		public FastScanner(InputStream f) {
			br = new BufferedReader(new InputStreamReader(f));
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return null;
				st = new StringTokenizer(s);
			}
			return st.nextToken();
		}

		boolean hasMoreTokens() {
			while (st == null || !st.hasMoreTokens()) {
				String s = null;
				try {
					s = br.readLine();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (s == null)
					return false;
				st = new StringTokenizer(s);
			}
			return true;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] args) {
		new C().run();
	}
}
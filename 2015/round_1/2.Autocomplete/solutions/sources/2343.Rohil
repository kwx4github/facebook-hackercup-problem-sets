#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
#include<queue>
#include<climits>
#include<stack>
using namespace std;
typedef long long int ll;
struct vertex
{
    ll word;
    vertex* arr[26];
};
typedef struct vertex vertex;
vertex* new_vertex()
{
    ll i;
    vertex *p=(vertex *) malloc (sizeof(vertex));
    p->word=0;
    for(i=0;i<26;i++)
    {
        p->arr[i]=NULL;
    }
    return p;
}
vertex* g_root,*root;
void add(string str)
{
    //ll coutn=0;
    ll l=str.length(),i;
    for(i=0;i<l;i++)
    {
        if(root->arr[str[i]-'a']==NULL)
        {
            vertex *v=new_vertex();
            root->arr[str[i]-'a']=v;
            root=root->arr[str[i]-'a'];
            root->word++;
        }
        else
        {
            root=root->arr[str[i]-'a'];
            root->word++;
           // coutn++;
        }
    }
    return ;
}
ll coutn(string str)
{
    ll cnt=0;
    ll l=str.length(),i;
    cnt=0;
    for(i=0;i<l;i++)
    {
        root=root->arr[str[i]-'a'];
        cnt++;
        if(root->word==1)
            break;
    }
    return cnt;
}
int main()
{
    freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
    string s;
    ll tc,n,i,ans,t,x;
    cin>>tc;
    for(t=1;t<=tc;t++)
    {
        ans=0;
        cin>>n;
        g_root=new_vertex();
        for(i=0;i<n;i++)
        {
            cin>>s;
            root=g_root;
            add(s);
            root=g_root;
            x=coutn(s);
            //cout<<x<<endl;
            ans+=x;
        }
        cout<<"Case #"<<t<<": "<<ans<<endl;
    }
    return 0;
}
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class B {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static class Point {
		boolean haveNext = false;
		char nextChar;
		Point nextPoint;
		Map<Character, Point> nextMap;
		int count = 0;
		
		Point get(char c) {
			if (!haveNext) {
				haveNext = true;
				nextChar = c;
				nextPoint = new Point();
				nextMap = null;
				return nextPoint;
			}
			if (nextMap == null) {
				if (c == nextChar) {
					return nextPoint;
				}
				nextMap = new HashMap<>();
				nextMap.put(nextChar, nextPoint);
			}
			if (!nextMap.containsKey(c)) {
				nextMap.put(c, new Point());
			}
			return nextMap.get(c);
		}
	}
	
	static void solve() throws Exception {
		Point root = new Point();
		int n = nextInt();
//		int n = 1;
		long ans = 0;
		for (int i = 0; i < n; i++) {
			String w = in.readLine().trim();
//			String w = new String(new char[1000000]);
			Point cur = root;
			for (int j = 0; j < w.length(); j++) {
				if (++cur.count > 1 || j == 0) {
					++ans;
				}
				cur = cur.get(w.charAt(j));
			}
			++cur.count;
		}
		printCase();
		out.println(ans);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
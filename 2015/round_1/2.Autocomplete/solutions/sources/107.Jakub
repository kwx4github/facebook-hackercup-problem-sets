import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        Trie<Object> t = new Trie<>();

        long cnt = 0L;
        int n = in.nextInt();
        for (int i = 0; i < n; i++) {
            String word = in.next();
            t.put(word);
            cnt += t.getShortest(word);
        }
        out.println("Case #" + testNumber + ": " + cnt);
    }

    static class Trie<T> {
        private static int R = 26;
        private Node root = new Node();

        private void put(String key) {
            Node n = root;
            int d = 1;
            while (true) {
                int c = (key.charAt(d - 1) - 'a');
                if (n.next[c] == null) {
                    n.next[c] = new Node();
                    n.next[c].parent = n;
                }

                if (d == key.length()) {
                    if (!n.next[c].val) {
                        n.next[c].val = true;
                        Node p = n.next[c];
                        while (p != null) {
                            p.size++;
                            p = p.parent;
                        }
                    }
                    return;
                }

                n = n.next[c];
                d++;
            }
        }

        private static class Node {
            private Node next[] = new Node[R];
            private Node parent;
            private boolean val;
            private long size = 0;
        }

        private int getShortest(String prefix) {
            Node n = root;
            int d = 1;
            while (true) {
                int c = (prefix.charAt(d - 1) - 'a');

                if (d == prefix.length() || n.next[c].size == 1) {
                    return d;
                }

                n = n.next[c];
                d++;
            }
        }

    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


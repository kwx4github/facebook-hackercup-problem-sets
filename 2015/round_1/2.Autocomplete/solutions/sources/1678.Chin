#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
using namespace std;

const int MAX_T = 1100000;

struct Trie {
  //bool hasWord;
  //int nWords;
  Trie * nx[26];
} tries[MAX_T];
int trieCtr = 0;
Trie * newTrie() {
  Trie * ret = &tries[trieCtr++];
  //ret->hasWord = false;
  //ret->nWords = 0;
  for (int i = 0; i < 26; i++) ret->nx[i] = NULL;
  return ret;
}

Trie * root;
int T, N;
char str[MAX_T];

int ord(char c) {
  return (int) (c - 'a');
}

int trieInsert(Trie * t, char * s, int depth, bool branched) {
  if (*s == '\0') {
    if (!branched) return depth;
    return 0;
  }
  int c = ord(*s);
  int cost = 0;
  if (t->nx[c] == NULL) {
    t->nx[c] = newTrie();
    if (!branched) {
      cost = depth+1;
      branched = true;
    }
  }
  return trieInsert(t->nx[c], s+1, depth+1, branched) + cost;
}

/*
int calc(Trie * t, int depth) {
  int ret = 0;
  int ct = 0;
  for (int i = 0; i < 26; i++) {
    if (t->nx[i] != NULL) {
      ret += calc(t->nx[i], depth+1);
      if (t->nWords > 1 && t->nx[i]->nWords == 1) {
        ret += depth+1;
      }
    }
  }
  if (t->nWords > 1 && t->hasWord) {
    ret += depth;
  }
  return ret;
}
*/
int main () {
  scanf("%d", &T);
  for (int TC = 1; TC <= T; TC++) {
    scanf("%d", &N);
    trieCtr = 0;
    root = newTrie();
    int ret = 0;
    for (int i = 0; i < N; i++) {
      scanf("%s", str);
      ret += trieInsert(root, str, 0, false);
    }
    printf("Case #%d: %d\n", TC, ret);
  }
  return 0;
}

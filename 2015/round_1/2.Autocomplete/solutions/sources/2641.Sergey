#include <map>
#include <set>
#include <cmath>
#include <deque>
#include <limits>
#include <vector>
#include <string>
#include <cassert>
#include <iostream>
#include <cinttypes>
#include <algorithm>
#include <unordered_map>

using namespace std;
typedef uint64_t LL;
typedef vector<vector<LL>> Graph;
typedef vector<LL> Count;

LL M = 2e6;
Graph graph(M, vector<LL>(26));
Count countWords(M, 0);

void put(
  LL M, LL & F,
  Graph & graph,
  Count & countWords,
  string const & word)
{
    LL length = word.size();
    LL current = 0;
    LL index = 0;
    for (; index < length; ++index)
    {
        countWords[current] += 1;
        LL j = word[index] - 'a';
        LL & next = graph[current][j];
        /*
        cerr
            << "sym=" << word[index] << ", "
            << "next=" << next << ", "
            << "countWords[" << current << "]=" << countWords[current] << ", "
            << endl;
        */
        if (next > 0)
            current = next;
        else
            break;
    }

    if (index >= length)
        return;

    for (; index < length; ++index)
    {
        LL j = word[index] - 'a';
        graph[current][j] = ++F;
        countWords[current] += 1;
        current = F;
    }

    if (F >= M)
    {
        cout << "ERROR: F=" << F << endl;
        exit(1);
    }
}

LL find(
    Graph const & graph,
    Count const & countWords,
    string const & word
)
{
    LL length = word.size();
    LL current = 0;
    LL index = 0;
    LL result = 0;
    for (; index < length; ++index)
    {
        /*
        cerr
            << "sym=" << word[index] << ", "
            << "current=" << current << ", "
            << endl;
        */
        if (countWords[current] <= 1)
        {
            break;
        }
        LL j = word[index] - 'a';
        LL next = graph[current][j];
        assert(next > 0);
        current = next;
        result += 1;
    }

    /*
    cerr
        << "result=" << result << ", "
        << endl;
    */
    return result;
}

void readAndSolve(LL caseN)
{
    LL F = 0;

    for (LL i = 0; i < M; ++i)
    {
        graph[i].assign(26, 0);
        countWords[i] = 0;
    }

    LL N;
    cin >> N;
    LL result = 0;
    for (LL i = 0; i < N; ++i)
    {
        string word;
        cin >> word;
        put(M, F, graph, countWords, word);
        result += find(graph, countWords, word);
    }

    cout << "Case #" << caseN << ": " << result << endl;
}

int main(int, char**)
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    LL T;
    cin >> T;
    for (LL t = 1; t <= T; ++t)
    {
        readAndSolve(t);
    }

    return 0;
}


#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>

using namespace std;

#define ALPHABET_SIZE 26
class trie{
	public:
		trie* move[ALPHABET_SIZE];
		trie(){
			int i;
			for(i=0;i<ALPHABET_SIZE;i++)
				move[i]=NULL;
		}
};


inline int scan(void){
	char ch;	
	ch=getchar_unlocked();
	while(ch<33)
		ch=getchar_unlocked();
	int val=0;
	while(ch>=33){
		val=(val<<1) + (val<<3) + (ch - '0');
		ch=getchar_unlocked();
	}
	return val;
}

inline void print(int n){
	if(n==0){
		putchar_unlocked('0');
		putchar_unlocked('\n');
		return;
	}	
	int rev=n;
	int count=0;
	while(rev%10==0){
		count++;
		rev=rev/10;
	}
	rev=0;
	while(n!=0){
		rev=n%10 + (rev<<3) + (rev<<1);
		n=n/10;
	}
	while(rev!=0){
		putchar_unlocked((rev%10) + '0');
		rev=rev/10;
	}

	while(count--)
		putchar_unlocked('0');
	putchar_unlocked('\n');
}


int main()
{
	int t=scan();
	int test=t;
	while(t>0){
		int n=scan();
		int i,j,k,index;
		trie *sol=new trie();
		int count=0;
		for(j=1;j<=n;j++){
			char *c=(char*)malloc(sizeof(char)*1000001);
			scanf("%s",c);
			int flag=1;
			trie *save=sol;
			int len=strlen(c);
			for(k=0;k<len;k++){
				index=c[k]-'a';
				if(save->move[index]==NULL){
					if(flag==1){
						count=count+(k+1);
						flag=0;
					}
					save->move[index]=new trie();
				}
				save=save->move[index];
			}
			if(flag==1)
				count=count+len;
			free(c);
		}
		printf("Case #%d: %d\n",test-t+1,count);
		free(sol);
		t--;
    	 }
return 0;
}

class letter:
	value = None
	position = -1
	next = None #pointer to the next letter
	visited = False

	def __init__(self, value, position, next):
		self.value = value
		self.position = position
		self.next = next

	def __repr__(self):
		if self.next == None:
			return "{"+str(self.value)+", "+str(self.position)+", None}"
		return "{"+str(self.value)+", "+str(self.position)+", "+str(self.next.value)+"}"

#list of lists for starting letter of words
alphabet = [[] for _ in range(26)]
def doMath(word):
#	print(word)
################## Adding it to the Dictionary ###############
	
	#creates letter nodes with each letter in word
	prev = None
	for i in range(len(word) - 1, -1, -1):
		#create letter
		l = letter(word[i], i, prev) #position might be useless
		
		#update pointer
		prev = l
	
	#add word to array
	alpha_index = ord(l.value)-ord('a')
	alphabet[alpha_index].append(l)
	
##################### Doing the Retrieval ###################
	#bfs on this list
	alpha_index = ord(word[0]) - ord('a')
	
	#each word is "unvisited"
	valid_count = len(alphabet[alpha_index])
	valid = [True for _ in range(valid_count)]
	current = [alphabet[alpha_index][i] for i in range(len(alphabet[alpha_index]))]

	current_letter_i = 0
	position = 0

	#while there is more than one possibility
	while(valid_count > 1):

		#if unvisited, check to see if it is right
		for i in range(len(valid)):
			if valid[i]:
				#if no more letters, stop
				if current[i] == None:
					valid[i] = False
					valid_count -= 1
				#if letter matches, keep going
				elif current[i].value == word[current_letter_i]:
					position = current[i].position
					current[i] = current[i].next
					#if word argument has no more letters
					#return this position if its next is None
					if current_letter_i == len(word) - 1:
						if current[i] == None:
							return position + 1
				#else bad, mark as invalid
				else:
					valid[i] = False
					valid_count -= 1

		current_letter_i += 1

	return position+1

import time
def doWholeMath(words):	
	begin = time.time()
	total = 0
	for word in words:
		total += doMath(word)
		if time.time() - begin > 10:
			return total

	return total

f = open('autocomplete.txt', 'r')
T = int(f.readline())
out = open('autocomplete_output.txt', 'w')

for i in range(T):
	N = int(f.readline())
	words = []
	for j in range(N):
		words.append(f.readline().rstrip('\n'))
	output_string = "Case #"+str(i+1)+": "+str(doWholeMath(words))
	print(output_string)
	out.write(output_string+"\n")

	#reset alphabet after a test
	alphabet = [[] for _ in range(26)]
out.close()


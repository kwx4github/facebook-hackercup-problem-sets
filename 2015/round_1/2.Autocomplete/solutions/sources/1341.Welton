#include <bits/stdtr1c++.h>

using namespace std;

typedef long long int64; 
typedef unsigned long long uint64;


typedef struct no{
    struct no *key[27];
    int filhos;
    int final;
}node;
 
node *inicializa(){
    node *T = new(node);
    for( int i = 0; i <= 26; i++ ) T->key[i] = NULL;
    T->filhos = 0;
    T->final = 0;
    return T;
}
 
void insert(node *trie, char *palavra){
    int pos = 0, i = 0;
    node *aux, *p;
    p = trie;
    while(palavra[i] != '\0'){
        pos = palavra[i] - 'a';
        if(p->key[pos]) p = p->key[pos];
        else{
            aux = inicializa();
            p->key[pos] = aux;
            p->filhos++; 
            p = aux;
        }
        i++;
    }
    p->final++;
}

char str[2000000];

int64 find( node *trie, int pos = 0){
	stack < int > pilha;
	node *p;
    p = trie;
	while( str[pos] != '\0' ){
		if( p->final ){
			for( int i = 0; i <= 25; i++ ){
				if( p->key[i] != NULL ){
					pilha.push(1);
					break;
				}
			}
		}
		else if( p->filhos > 1 || pos == 0 ) pilha.push(1);
		else pilha.push(0);
		p = p->key[str[pos]-'a'];
		pos++;
	}
	if( p->final ){
		for( int i = 0; i <= 25; i++ ){
			if( p->key[i] != NULL ){
				pilha.top() = 1;
				break;
			}
		}
	}
	while( !pilha.empty() && pilha.top() == 0 ) pilha.pop();
	return pilha.size();
} 

int main(){
	ios::sync_with_stdio(false);
    int t, n, w = 1;

    cin >> t;
    while(t--){
    	cin >> n;
        node *trie = inicializa();
        int64 ans = 0;
        for( int i = 0; i < n; i++ ){ 
        	cin >> str;
        	insert(trie,str);
        	ans += find(trie,0);
        }
        cout << "Case #" << w++ << ": " << ans << "\n";
    }
 
    return 0;
}
// pre-written code {{{
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <numeric>
#include <iostream>
#include <cassert>
#include <set>
#define FOR(i,n) for(int _n=n,i=0;i<_n;++i)
#define FR(i,a,b) for(int _b=b,i=a;i<_b;++i)
#define CL(x) memset(x,0,sizeof(x))
#define PN printf("\n");
#define MP make_pair
#define PB push_back
#define SZ size()
#define ALL(x) x.begin(),x.end()
#define FORSZ(i,v) FOR(i,v.size())
#define FORIT(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
using namespace std;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
///////////////////////////////////////////////////////////////////////////////////
// }}}

struct Node{
  int child[26];
  int descendants;
  public:
  Node() {
    CL(child);
    descendants=0;
  }
};

char line[1000005];

vector<Node> nodes;
void insert_line_to_trie() {
  int len = strlen(line);
  int cur = 0;
  nodes[cur].descendants++;
  FOR(i,len) {
    int pis = line[i]-'a';
    if(nodes[cur].child[pis]==0) {      
      nodes[cur].child[pis] = nodes.size();
      Node newNode;
      nodes.PB(newNode);      
      cur = nodes.size()-1;
    } else {
      cur = nodes[cur].child[pis];
    }
    nodes[cur].descendants++;
  }
}

int find_line_in_trie() {
  int len = strlen(line);
  int ret = len;  
  int cur = 0;
  FOR(i,len) {
    int pis = line[i]-'a';
    cur = nodes[cur].child[pis];
    if(nodes[cur].descendants == 1) {
      return (i+1);
    }
  }
  return len;
}

void solve(){  
  set<string> dictionary;  
  nodes.clear();
  Node root;
  nodes.PB(root);
  int n;
  scanf("%d\n",&n);
  int ret = 0;
  FOR(i,n){
    scanf("%s\n",line);
    if(!dictionary.count(line)) {
      dictionary.insert(line);
      insert_line_to_trie();
    }    
    int x = find_line_in_trie();
    ret += x;
  }
  printf("%d\n",ret);
}

int main(){
  int pvs; scanf("%d",&pvs);
  FR(ppp,1,pvs+1){
     printf("Case #%d: ",ppp);

     solve();
  }
}


// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

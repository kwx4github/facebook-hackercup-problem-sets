#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>
 
using namespace std;
 
#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>

const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 500001;

inline void autocomplete(){
       static int number = 1;
       cout << "Case #" << number << ": ";
       number ++;
}

map<int,pair<int,int> > trie[Nmax*2];
int root = 0;
int freeMem = 0;

string s;
void add(){
     int root = ::root;
     for (int i = 0; i < s.size(); i ++){
         int ch = s[i];
         if (trie[root].count(ch) == 0){
            trie[root][ch] = make_pair(++freeMem,0);
            trie[freeMem].clear();
         }
         trie[root][ch].second ++;
         root = trie[root][ch].first;
     }
}
int get(){
    int root = ::root;
    for (int i = 0 ;i < s.size(); i ++){
        int cnt = trie[root][s[i]].second;
        root = trie[root][s[i]].first;
        if (cnt == 1)
           return i + 1;
    }
    return s.size();
}
int main() {
   ios_base::sync_with_stdio(0);
   freopen("autocomplete.txt","r",stdin);
   freopen("autocomplete_out.txt","w",stdout);
   
   int test;
   cin >> test;
   while (test --> 0){
         trie[0].clear();
         root = 0;
         freeMem = 0;
         int answer = 0;
         int n;
         cin >> n;
         string rb;
         getline(cin,rb);
         for (int i = 1; i <= n ;i ++){
             getline(cin,s);
             add();
             answer += get();
         }
         autocomplete();
         cout << answer << endl;
   }   
   return 0;
}

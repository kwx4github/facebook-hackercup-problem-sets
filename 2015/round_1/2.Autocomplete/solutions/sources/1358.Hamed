#include<bits/stdc++.h>
using namespace std;
struct TreiNode
{
   TreiNode ** nxt;
   TreiNode ()
   {
      nxt= new ( TreiNode *[26]  );
      for (int i=0;i<26;i++){
         nxt[i] =NULL;
      }
   }
};
TreiNode addStr(TreiNode * root, string str)
{
   TreiNode * cur=root;
   for (int i=0;i<str.size();i++){
      if ( cur->nxt[ str[i]-'a' ]==NULL){
         cur->nxt[str[i]-'a']= new TreiNode ;
      }
      cur= cur->nxt[str[i]-'a'];
   }
}
void listTrei (TreiNode * cur, string str )
{
   bool flag = false;
   string s;
   for (int i=0;i<26;i++){
      if (cur->nxt[i]!=NULL){
         flag=true;
         s=str;
         s+=('a'+i);
         listTrei(cur->nxt[i],s);
      }
   }
   if (flag==false){
      cout<< str<<endl;
   }
   return;
}
stack <TreiNode*> s ;
void freeTrei(TreiNode * cur)
{
   for (int i=0;i<26;i++){
      if (cur->nxt[i]!=NULL){
         s.push(cur->nxt[i]);
      }
   }
   TreiNode * nd;
   while (s.size()){
      nd=s.top();
      s.pop();
      for (int i=0;i<26;i++){
         if (nd->nxt[i]!=NULL){
            s.push(nd->nxt[i]);
         }
      }
      free(nd->nxt);
      free(nd);
   }
}
int main ()
{
   freopen("autocomplete.txt","r",stdin);
   freopen("auto.out","w",stdout);
   TreiNode * root ,*cur;
   int t,n;
   string str;
   scanf("%d",&t);
   int ans ;
   for (int c=1;c<=t;c++){
      root= new TreiNode;
      ans =0;
      scanf ("%d",&n);
      for (int i=0;i<n;i++){
         cur=root;
         cin>>str;
         int v=0;
         for (int j=0;j<str.size();j++){
            v++;
            if (cur->nxt[ str[j]-'a' ]==NULL){
               break;
            }
            cur=cur->nxt[str[j]-'a' ];
         }
         addStr(root,str);
         ans +=v;
      }
      freeTrei(root);
      printf("Case #%d: %d\n",c,ans);
   }
   return 0;
}

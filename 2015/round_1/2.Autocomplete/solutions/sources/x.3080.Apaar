#include<bits/stdc++.h>
#define SI(n) scanf("%d",&n)
#define SII(a,b) scanf("%d%d",&a,&b)
#define SIII(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define SLL(n) scanf("%lld",&n)
#define SC(r) scanf("%c",&r)
#define SS(r) scanf("%s",r)
#define REPA(i,a,n) for(int i=a;i<n;i++)
#define REP(i,n) for(int i=0;i<n;i++)
#define PI(n) printf("%d\n",n)
#define PII(a,b) printf("%d %d\n",a,b)
#define PLL(n) printf("%lld\n",n)
#define PC(n) printf("%c\n",n)
#define PS(n) printf("%s\n",n)
#define ll long long

using namespace std;

struct trie_node
{
	trie_node* child[26];
};

trie_node* newn()
{
	trie_node* newnode=new trie_node;
	REP(i,26)
		newnode->child[i]=NULL;
	return newnode;
}

int insert(trie_node* root,char key[])
{
	int count=0;
	int len=strlen(key);
	int index;
	
	REP(i,len)
	{
		index=key[i]-'a';
		if(!root->child[index])
		{
			root->child[index]=newn();
		}
		else
			count++;
		root=root->child[index];
	}
	return min(count+1,len);
}
char str[1000010];
int main()
{
	int T,n,cs=0;
	SI(T);
	while(T--)
	{
		cs++;
		int count=0;
		SI(n);
		trie_node* root=newn();
		REP(i,n)
		{	
			SS(str);
			count+=insert(root,str);
		}
		printf("Case #%d: %d\n",cs,count);
	}

	return 0;
}

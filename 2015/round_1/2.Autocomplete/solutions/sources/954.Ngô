#if 1
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <time.h>

#define LL long long
#define LD long double

#define REP(i,n) for (int i = 0; i < (n); i++)
#define REP2(i,n) for (int i = 0; i <= int(n); i++)
#define FOR(i,a,b) for (int i = int(a); i <= int(b); i++)
#define FORB(i,a,b) for (int i = int(a); i >= int(b); i--)

#define mp(u,v) make_pair(u, v)
#define pb push_back

using namespace std;

typedef pair<int, int> pii;
typedef pair<string, string> pss;
typedef vector<int> vi;
typedef vector<vi> vvi;

#define MAXN 1000010
#define MAXT 3600
#define oo 1000000001
#define MODULE 1000000007

#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;

struct node{
    int c;
    int next[26];
};
int cnt, n, res;
char s[MAXN];
node p[MAXN];

void init(){
    res = 0;
    REP(i, 26)
        p[0].next[i] = 0;
    cnt = 0;
}

void process(){
    scanf("%d", &n);
    char buf[30];
    gets(buf);
    REP(i, n){
        gets(s);
        int l = strlen(s);
        int k = 0;
        REP(j, l){
            if (p[k].next[s[j] - 'a'] == 0){
                cnt++;
                p[cnt].c = 1;
                memset(p[cnt].next, 0, sizeof(p[cnt].next));
                p[k].next[s[j] - 'a'] = cnt;
                k = cnt;
            }
            else{
                k = p[k].next[s[j] - 'a'];
                p[k].c++;
            }
        }
        k = 0;
        REP(j, l){
            res++;
            k = p[k].next[s[j] - 'a'];
            if (p[k].c == 1) break;
        }
    }
}

void writeout(){

}

void make(){
    freopen("in.txt", "wt", stdout);
    int N = 200000, M = 150000, Q = 300000;
    cout << N << endl;
    for (int i = 0; i < N; i++)
        cout << 1000000 - i << " ";
    exit(0);
}


int main(){
    //make();
    freopen("autocomplete.txt", "rt", stdin);
    //freopen("in.txt", "rt", stdin);
    freopen("out", "wt", stdout);
    //START
    int test;
    scanf("%d", &test);
    REP(t, test){
        init();
        process();
        printf("Case #%d: %d\n", t + 1, res);
    }
    //writeout();
    //END
    return 0;
}

#endif
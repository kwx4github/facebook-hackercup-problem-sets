package facebook_hacker_cup.year_2015.round_1;

import java.io.*;
import java.util.Arrays;

/**
 * Created by duviteck. 18 Jan 2015.
 */
public class Problem_B_Autocomplete {

    private static final String FILE_IN = "in.txt";
    private static final String FILE_OUT = "out.txt";

    private static final TrieNode root = new TrieNode();

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(FILE_IN));
        PrintWriter writer = new PrintWriter(new File(FILE_OUT));

        int tests = Integer.parseInt(reader.readLine());
        for (int i = 1; i <= tests; i++) {
            clearTrie();

            int n = Integer.parseInt(reader.readLine());
            int ans = 0;
            for (int j = 0; j < n; j++) {
                String word = reader.readLine();
                ans += findInTrie(word);
            }
            writer.format("Case #%d: %d\n", i, ans);
        }
        writer.flush();
    }

    private static void clearTrie() {
        Arrays.fill(root.next, null);
    }

    private static int findInTrie(String word) {
        int wordLen = word.length();
        int i = 0;
        TrieNode node = root;

        while (i < wordLen) {
            int nextNodeIndex = word.charAt(i) - 'a';
            if (node.next[nextNodeIndex] != null) {
                node = node.next[nextNodeIndex];
                i++;
            } else {
                addToTrie(node, word, i);
                return i + 1;
            }
        }
        return wordLen;
    }

    private static void addToTrie(TrieNode node, String word, int index) {
        int wordLen = word.length();
        int i = index;
        TrieNode curNode = node;

        while (i < wordLen) {
            int nextNodeIndex = word.charAt(i) - 'a';
            TrieNode newNode = new TrieNode();
            curNode.next[nextNodeIndex] = newNode;
            curNode = newNode;
            i++;
        }
    }


    private static class TrieNode {
        TrieNode[] next = new TrieNode[26];
    }
}

package com.jmc;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class AutoComplete {
    static List<String> getLines(String fileName) throws IOException {
        if (new File(fileName).exists()) {
            String line;
            ArrayList<String> lines = new ArrayList<String>();
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            while((line=reader.readLine()) != null) {
                lines.add(line);
            }
            return lines;
        } else {
            return null;
        }
    }

    static void generate() {
        StringBuilder builder = new StringBuilder();
        int sum = 0;
        for (int i = 0; i < 1000000; i++) {
            builder.append('a');
            System.out.println(builder.toString());
            sum += i + 1;
            if (sum > 1000000) {
                System.out.println(i);
                return;
            }
        }
    }

    public static void main(String[] args) throws Exception {
//        generate();
//        System.exit(0);
        String filename;
        if (args.length < 1) {
            filename = AutoComplete.class.getSimpleName() + ".txt";
        } else {
            filename = args[0];
        }
        System.out.println("Running with filename: " + filename);

        List<String> lines = getLines(filename);
        if (lines == null) {
            System.out.println("Error: can't find file [" + filename + "]");
            System.exit(0);
        }

        String outfile = filename.replace("txt", "out");
        PrintWriter out = new PrintWriter(new FileOutputStream(outfile));

        int tests = Integer.parseInt(lines.get(0));
        int currLine = 1;
        for (int i = 0; i < tests; i++) {
            int num = Integer.parseInt(lines.get(currLine++));
            int sum = 0;
            Node n = new Node();
            for (int j = 0; j < num; j++) {
                String word = lines.get(currLine++);
                sum += getMinUnique(n, word);
            }
            out.println("Case #" + (i+1) + ": " + sum);
        }
        out.flush();
        out.close();
        System.out.println("Output in filename: " + outfile);
    }

    static class Node {
        HashMap<Character, Node> children = new HashMap<Character, Node>();
        int count;
    }

    static int getMinUnique(Node tree, String word) {
        Node n = tree;
        int minUnique = 0;
        for (int i = 0; i < word.length(); i++) {
            Node child = n.children.get(word.charAt(i));
            if (child == null) {
                child = new Node();
                n.children.put(word.charAt(i), child);
                if (minUnique == 0) {
                    minUnique = i+1;
                }
            }
            child.count++;
            n = child;
        }
        if (minUnique == 0) {
            minUnique = word.length();
        }
        return minUnique;
    }
}

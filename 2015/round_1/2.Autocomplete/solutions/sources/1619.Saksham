#include<iostream>
#include<map>
using namespace std;
struct trie{
    map<int,trie*> root;
};
void insert(string& s,trie* child){
    int pos=0;
    while(pos<s.length()){
        if(child->root.count(s[pos]-'a')){
            child = child->root[s[pos]-'a'];
            pos++;
        }
        else {
            child->root[s[pos]-'a'] = new trie();
            child = child->root[s[pos]-'a'];
            pos++;
        }
    }
}
int count(string& s,trie* child){
    int pos=0,cnt=0;
    while(pos<s.length()){
        if(child->root.count(s[pos]-'a')){
            cnt++;//return 1+ count(s,pos+1,child->root[s[pos]-'a']);
            child = child->root[s[pos]-'a'];
            pos++;
        }
        else{
            cnt++;
            break;
        }
    }
    return cnt;
}
int main(){
    int test,n;
    string str;
    cin >> test;
    for(int ts=1;ts<=test;ts++){
        cin >> n;
        int ans=0;
        trie* tree= new trie();
        while(n--){
            cin >> str;
            ans += count(str,tree);
            insert(str,tree);
        }
        cout << "Case #" << ts << ": " << ans << "\n";
    }
    return 0;
}

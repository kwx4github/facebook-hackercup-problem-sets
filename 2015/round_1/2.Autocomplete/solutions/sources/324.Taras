using System;
using System.IO;

namespace FacebookHackercup2015
{
    public class Autocomplete
    {
        private const int alphabetSize = 26;

        public static void Main(string[] args)
        {
            RunCases(args[0]);
            //RunTests();
        }

        private static void RunCases(string fileName)
        {
            StreamReader sr = new StreamReader(fileName);
            int testCases = int.Parse(sr.ReadLine());

            for (int i = 0; i < testCases; i++)
            {
                RunCase(sr, i + 1);
            }
        }

        private static void RunCase(StreamReader sr, int caseNumber)
        {
            int n = int.Parse(sr.ReadLine());
            string[] words = new string[n];
            for (int i = 0; i < n; i++)
            {
                words[i] = sr.ReadLine();
            }
            int pl = CountPrefixes(words);
            Console.WriteLine("Case #{0}: {1}", caseNumber, pl);
        }

        private static void RunTests()
        {
            string[] words = {"aaaaa", "aaaa", "aaa", "aa", "a"};
            string[] words2 = {"a", "aa", "aaa", "aaaa", "aaaaa"};
            string[] words3 = {"having", "fun", "yet"};
            string[] words4 = {"hi", "hello", "lol", "hills", "hill"};
            string[] words5 = {"to", "be", "or", "not", "two", "bee"};
            
            Console.WriteLine(CountPrefixes(words5));
        }

        private static int CountPrefixes(string[] words)
        {
            Node root = new Node();
            int wl = 0;
            foreach (string word in words)
            {
                Node node = root;
                int k = 0;
                bool prefixFound = false;
                for (int j = 0; j < word.Length; j++)
                {
                    if (!prefixFound) k++;
                    int ci = CharToInt(word[j]);
                    if (node.childs[ci] == null)
                    {
                        node.childs[ci] = new Node();
                        prefixFound = true;
                    }

                    node = node.childs[ci];
                }
                wl += k;
            }

            return wl;
        }

        private static int CharToInt(char c)
        {
            return c - 'a';
        }

        private class Node
        {
            public Node[] childs = new Node[alphabetSize];
        }
    }
}

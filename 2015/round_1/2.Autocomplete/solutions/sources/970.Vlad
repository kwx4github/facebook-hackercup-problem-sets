#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>
#include <string>
#include <cstdio>
#include <algorithm>
#include <fstream>

using namespace std;

struct node
{
	node() : count(0)
	{
		memset(children, 0, sizeof(children));
	}
	bool fin() const
	{
		return count == 1;
	}
	void addletter(char letter)
	{
		int index = letter - 'a';
		if (!children[index])
		{
			children[index] = new node;
		}
		++children[index]->count;
	}
	node* child(char letter)
	{
		return children[letter - 'a'];
	}
	int count;
	node* children[26];
	void printchildren()
	{
		for (int i = 0; i < 26; ++i)
		{
			if (children[i])
			{
				cout << (char)('a' + i) << ' ' << children[i]->count << endl;
			}
		}
	}
};

void clearnodes(node** root)
{
	if ((*root)->fin())
	{
		delete *root;
	}
	else
	{
		for (char c = 'a'; c <= 'z'; ++c)
		{
			if ((*root)->children[c - 'a'])
			{
				clearnodes(&(*root)->children[c - 'a']);
				(*root)->children[c - 'a'] = 0;
			}
		}
	}
}

void addword(node** root, string word)
{
	node* current = *root;
	for (int i = 0; i < word.length(); ++i)
	{
		current->addletter(word[i]);
		current = current->child(word[i]);
	}
}

int answer(node* root, string word)
{
	node* current = root->child(word[0]);
	for (int k = 1; k < word.length(); ++k)
	{
		if (current->fin())
		{
			return k;
		}
		current = current->child(word[k]);
	}
	return word.length();
}

void genlargefile()
{
	ofstream ouf("large.txt");
	ouf << 1 << endl;
	int n = 5000;
	ouf << n << endl;
	srand(1);
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < 200; ++j)
		{
			char x = 'a' + rand() % 26;
			ouf << x;
		}
		ouf << endl;
	}
	ouf.close();
}

int main()
{
	ifstream inf("infile.txt");
	ofstream ouf("outfile.txt");
	int T;
	inf >> T;
	for (int tk = 1; tk <= T; ++tk)
	{
		int N;
		node* root = new node;
		string s;
		inf >> N;
		int ans = 0;
		for (int i = 0; i < N; ++i)
		{
			inf >> s;
			addword(&root, s);
			int an = answer(root, s);
			ans += an;
		}
		clearnodes(&root);
		cout << "Case #" << tk << ": " << ans << endl;
		ouf << "Case #" << tk << ": " << ans << endl;
	}
	inf.close();
	ouf.close();
	system("pause");
	return 0;
}
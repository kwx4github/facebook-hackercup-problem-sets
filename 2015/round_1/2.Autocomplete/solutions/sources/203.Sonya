#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<algorithm>
#include<string>
using namespace std;

struct pr
{
	unsigned long long h, h2;
	pr(unsigned long long he = 0, unsigned long long he2 = 0)
	{
		h = he;
		h2 = he2;
	}

	bool operator <(const pr& p) const
	{
		if (h != p.h)
			return h < p.h;
		return h2 < p.h2;
	}
};

unsigned long long hc[1000005];
unsigned long long hc2[1000005];

char s[1000005];

unsigned long long calc()
{
	unsigned long long h = 0;
	for (int i = 0; s[i]; i++)
	{
		h += hc[i] * s[i];
	}
	return h;
}

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	hc[0] = 1;
	for (int i = 1; i < 1000005; i++)
		hc[i] = hc[i - 1] * 131;
	hc2[0] = 1;
	for (int i = 1; i < 1000005; i++)
		hc2[i] = hc2[i - 1] * 137;

	int TT;
	scanf("%d", &TT);
	for (int T = 0; T < TT; T++)
	{
		set<pr> a;

		printf("Case #%d: ", T + 1);

		int res = 0;
		int n;
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			scanf("%s", s);
			int len = strlen(s);
			unsigned long long h = 0;
			unsigned long long h2 = 0;
			bool f = 0;
			for (int j = 0; j < len; j++)
			{
				h += s[j] * hc[j];
				h2 += s[j] * hc2[j];
				if (!f)
				{
					if (a.find(pr(h, h2)) == a.end())
					{
						res += j+1;
						f = 1;
					}
				}
				a.insert(pr(h, h2));
			}
			if (!f)
				res += len;
		}
		printf("%d\n", res);
	}

	return 0;
}
#include<bits/stdc++.h>
using namespace std ;
struct Trie {
    Trie * node[26] ;
    Trie() {
        for( int i = 0 ; i < 26 ; i++ ) {
            node[i] = NULL ;
        }
    }
}*root ;
bool FLAG;


int Insert( string str ) {

    Trie *curr = root ;
    int p = 0 ;
    for( int i = 0 ; str[i] ; i++ ) {
        int id = str[i] - 'a' ;
        if( curr->node[id] == NULL ) {
            curr->node[id] = new Trie() ;
            if( !p ) p = i+1 ;
        }
        curr= curr->node[id] ;
    }
    if( p == 0 ) return str.size() ;
    return p ;
}

void del( Trie *cur ) {
    for( int i =0 ; i < 26 ; i++ ) {
        if( cur ->node[i] ) {
            del( cur->node[i] ) ;
            delete( cur->node[i] ) ;
        }
    }
}

bool comp ( string s , string ss ){

}
int main() {

    freopen("autocomplete.txt","r",stdin) ;
    freopen("autocomplete1.txt","w",stdout) ;
    int cases , caseno = 1 ;
    scanf("%d",&cases ) ;
    while( cases -- ) {
        int N ;
        scanf("%d",&N ) ;
        root = new Trie() ;
        vector<string>V[26] ;
        long long int ans = 0 ;
        for( int i = 0 ; i< N ; i++ ) {
            string s ;
            cin >> s ;
            //V[s[0]-'a'].push_back( s ) ;
            ans += Insert( s ) ;
        }
//        long long cnt = 0 ;
//        int prev = 0 ;
//        for( int i = 0 ; i < N-1 ; i++ ) {
//            int l = max(V[i].size(),V[i+1].size()) ;
//            cout << V[i][0] << " " << V[i+1][0] <<endl ;
//            if( V[i][0] == V[i+1][0] ) {
//                for( int j = prev+1 ; j < l ; j++ ) {
//                    if( V[i][j] != V[i+1][j] ){
//                        cnt += j ;
//                        prev = j ;
//                        break ;
//                    }
//                }
//            }else {
//                cnt += prev+1 ;
//                prev = 0 ;
//            }
//        }
        cout << "Case #" << caseno++ << ": " << ans << "\n" ;
        //del( root ) ;
    }



}

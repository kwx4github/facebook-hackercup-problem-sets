package hackercup.round1.b

import java.io.BufferedReader
import java.util.StringTokenizer
import java.io.FileReader
import java.io.PrintWriter
import java.util.ArrayDeque
import java.util.Queue

class TrieNode {
    val edges = hashMapOf<Char, TrieNode>()
}

fun main(args: Array<String>) {
    solveAll(solver = ::solveCase)
}

fun solveCase(inp: DataReader): String {
    val n = inp.nextInt()
    val root = TrieNode()
    
    return (1..n).map { 
        addWord(root, inp.nextToken()) 
    }.sum().toString()
}

fun addWord(root: TrieNode, word: String): Int {
    var current: TrieNode = root
    var result = 0
    
    while (result < word.length()) {
        val next: TrieNode? = current.edges[word[result]]
        current = next ?: break
        result++
    }
    
    for (i in result..word.lastIndex) {
        val next = TrieNode()
        current.edges.put(word[i], next)
        current = next
    }
    
    return Math.min(result + 1, word.length())
}

class DataReader(private val reader: BufferedReader) {
    var st : StringTokenizer? = null
    class object {
        fun createFromFile(name: String) = DataReader(BufferedReader(FileReader(name)))
    }

    fun next() : String? {
        while (st == null || !st!!.hasMoreTokens()) {
            val s = reader.readLine()
            if (s == null)
                return null
            st = StringTokenizer(s)
        }

        return st?.nextToken()
    }

    fun nextToken() : String {
        return next()!!
    }

    fun nextInt() = nextToken().toInt()
    fun nextLong() = nextToken().toLong()
    fun readIntArray(n: Int) : IntArray {
        val result = IntArray(n)
        result.indices.forEach { i -> result[i] = nextInt() }
        return result
    }

    fun nextIntTriple() = Triple(nextInt(), nextInt(), nextInt())
}

fun solveAll(reader: DataReader, writer: PrintWriter, solver: (DataReader) -> String) {
    val testsCount = reader.nextInt()

    for (test in 1..testsCount) {
        writer.println("Case #${test}: ${solver(reader)}")
    }

    writer.close()
}

fun solveAll(input: String = "input.txt", output: String = "output.txt", solver: (DataReader) -> String) {
    solveAll(
            DataReader.createFromFile(input),
            PrintWriter(output),
            solver
    )
}


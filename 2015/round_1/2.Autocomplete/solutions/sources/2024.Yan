#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <list>


using namespace std;
struct TN {
	unordered_map<char,TN*> child;
};
class Tire {
	TN* root;
public:
	Tire () {root=new TN;}
	int searchPrefix(const string& prefix) {
		TN* p=root;
		for (int i=0;i<prefix.length();++i) {
			char ch=prefix[i];
			if (p->child.count(ch)==0) return i;
			p=p->child[ch];
		}
		return prefix.length();
	}
	void insert(const string& s) {
		TN* p=root;
		for (int i=0;i<s.length();++i) {
			char ch=s[i];
			if (!p->child.count(ch)) {
				p->child[ch]=new TN;
			}
			p=p->child[ch];
		}
	}
};
int main(void) {
	int T;
	cin>>T;
	for (int t=1;t<=T;++t) {
		Tire tr;
		int N;
		cin>>N;
		int ans=0;
		for (int k=0;k<N;++k) {
			string s;
			cin>>s;
			int pos=tr.searchPrefix(s);
			if (pos!=s.length()) {
				ans+=(pos+1);
			} else {
				ans+=pos;
			}
			tr.insert(s);
		}
		cout<<"Case #"<<t<<": "<<ans<<endl;
	}
    return 0;
}

import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class B {

    class Node{
        Node[] next;
        public Node(){
            next=new Node[26];
        }

        public int walk(String s,int pos){
            if(pos==s.length())return 0;
            if(next[s.charAt(pos)-'a']==null){
                //next[s.charAt(pos)-'a']=new Node();
                create(s,pos);
                return 1;
            }
            return next[s.charAt(pos)-'a'].walk(s,pos+1)+1;
        }

        public void create(String s,int pos){
            if(pos==s.length())return;
            if(next[s.charAt(pos)-'a']==null)
                next[s.charAt(pos)-'a']=new Node();
            next[s.charAt(pos)-'a'].create(s,pos+1);
        }
    }

    Node root;

    void solve() throws IOException {
        int t=nextInt();
        for(int testCase=0;testCase<t;testCase++){
            int n=nextInt();
            root=new Node();
            int ans=0;
            for(int i=0;i<n;i++){
                ans+=root.walk(nextToken(),0);
            }
            out.printf("case #%d: %d\n",testCase+1,ans);

        }
    }

    public static void main(String[] args) throws IOException {
        new B().run();
    }

    void run() throws IOException {
        reader = new BufferedReader(new InputStreamReader(System.in));
		reader = new BufferedReader(new FileReader("input.txt"));
        tokenizer = null;
        out = new PrintWriter(new OutputStreamWriter(System.out));
		out = new PrintWriter(new FileWriter("output.txt"));
        solve();
        reader.close();
        out.flush();

    }

    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }
}

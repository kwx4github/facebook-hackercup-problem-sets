#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct node
{
	char value;
	vector<node*> branches;
	node(){}
	node(char c) { value = c; }
	~node()
	{
		//for (vector<node*>::iterator it = branches.begin() ; it != branches.end(); ++it)
			//delete (*it);
		branches.clear();
	}
};

int addtotrie(node* root, string str)
{
	node* a = root;
	int i, count = 0, bcount = 0;
	for(i = 0; i < str.length(); i++)
	{
		bool present = false;
		int j;
		for(j = 0; j < a->branches.size(); j++)
			if(a->branches[j]->value == str[i])
			{
				present = true;
				break;
			}
		if(!present)
		{
			bcount++;
			count += bcount;
			break;
		}
		bcount++;
		if(a->branches.size() > 1)
		{
			count += bcount;
			bcount = 0;
		}
		a = a->branches[j];
		if((i == str.length() - 1 && a->branches.size() > 0) || count == 0)
		{
			count += bcount;
			bcount = 0;
		}
	}
	while(i < str.length())
	{
		node* b = new node(str[i]);
		a->branches.push_back(b);
		a = a->branches[a->branches.size() - 1];
		i++;
	}
	return count;
}

void deletetrie(node* root)
{
	for (vector<node*>::iterator it = root->branches.begin() ; it != root->branches.end(); ++it)
		delete (*it);
	root->branches.clear();
}

int main()
{
	int t, ti = 1;
	cin >> t;
	while(ti <= t)
	{	
		node root('\n');
		int count = 0, n;
		cin >> n;
		while(n--)
		{
			string str;
			cin >> str;
			count += addtotrie(&root, str);
		}
		if(ti != 1)
			cout << endl;
		cout << "Case #" << ti << ": " << count;
		ti++;
	}
}
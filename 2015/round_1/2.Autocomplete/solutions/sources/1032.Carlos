#include <iostream>
#include <sstream>
#include <numeric>
#include <set>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <strings.h>
#include <string.h>

using namespace std;

struct Node {
	Node *childrens['z'-'a'+1];
};

void resetNode(Node *n){
	for (char c = 'a'; c <= 'z'; c++){
		n->childrens[c-'a'] = NULL;
	}
}

int addWord(Node &root, string word, vector<Node*> &memoryToFree){
	Node *currentNode = &root;
	bool sum = true;
	int count = 0;
	for (int i = 0; i < word.size(); i++){
		if (sum){
			count++;
		}
		if (currentNode->childrens[word[i] - 'a'] == NULL){
			sum = false;
			Node *newNode = new Node();
			memoryToFree.push_back(newNode);
			resetNode(newNode);
			currentNode->childrens[word[i] - 'a'] = newNode;
			currentNode = newNode;
		} else {
			currentNode = currentNode->childrens[word[i] - 'a'];
		}
	}
	return count;
}

int main(){
	int tests;
	cin >> tests;
	for (int t = 1; t <= tests; t++){
		int N; 
		cin >> N;
		Node root;
		resetNode(&root);
		int count = 0;
		vector<Node*> memoryToFree;
		for (int i = 0; i < N; i++){
			string word;
			cin >> word;
			count += addWord(root, word, memoryToFree);
		}
		for (int i = 0; i < memoryToFree.size(); i++){
			delete memoryToFree[i];	
		}
		cout << "Case #" << t << ": " << count << endl;
	}
}


#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
typedef unsigned long long LL;
#define FOR(k,a,b) for(int k(a); k < (b); ++k)
#define FORD(k,a,b) for(int k(b-1); k >= (a); --k)
#define REP(k,a) for(int k=0; k < (a); ++k)
#define ABS(a) ((a)>0?(a):-(a))
#define SQR(a) ((a)*(a))
#define SQRT(a) (sqrt(double(a)))
const LL INF = 1e18;

char c[10000007];
int tr[300000000];
int* ct;

void node_init(int *pos)
{
	REP(i,26)
	{
		*pos=-1;
		++pos;
	}
}

int main( int argc, char* argv[] ) 
{
#ifdef HOME
	freopen("autocomplete.txt","r",stdin);
	freopen("autocomplete_out.txt","wb",stdout);
#endif
	int T,N;
	scanf("%d",&T);
	
	FOR(tc,1,T+1)
	{
		scanf("%d",&N);
		LL res=0;
		node_init(tr);
		int S=26;
		bool ins;
		int actnode=0;
		REP(i,N)
		{
			scanf("%s",c);
			int j=0;
			ct = tr;
			ins = 0;
			actnode=0;
			while(c[j]!=0)
			{
				int z=c[j]-'a';
				if(tr[actnode+z]==-1)
				{
					if(!ins)
					{
						res+=j+1;
						ins=1-ins;
					}
					node_init(tr+S);
					tr[actnode+z]=S;
					actnode=S;
					S+=26;
				}
				else
				{
					actnode=tr[actnode+z];
				}
				++j;
			}
			if(!ins)
				res+=j;
		}
		printf("Case #%d: %lld\n",tc,res);
	}
	return 0;
}

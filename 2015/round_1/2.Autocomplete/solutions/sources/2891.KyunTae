// AutoComplete.cpp : Defines the entry point for the console application.
//

#include "stdio.h"
#include <memory>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

class Node
{
public:
	Node() {
		m_char = NULL;
		for(int i = 0; i < 26; i++)
		{
			m_children[i] = NULL;
		}
	}
	~Node() {
		m_char = NULL;
		for(int i = 0; i < 26; i++)
		{
			if(m_children[i] != NULL)
			{
				free(m_children[i]);
			}
		}
	}

	Node* m_children[26];
	char m_char;
private:

};

int INF = 987654321;
int T, N;
char word[1000000];
Node* m_root;

Node* makeNode(char* word, int k, int len)
{
	Node* root = NULL;
	for(int i = len-1; i >= k; i--)
	{
		if(root == NULL)
		{
			root = new Node();
			root->m_char = word[i];
		} else
		{
			int idx = root->m_char - 'a';
			Node* new_root = new Node();
			new_root->m_char = word[i];
			new_root->m_children[idx] = root;
			root = new_root;
		}
	}

	return root;
}

int main(int argc, char* argv)
{
	FILE * pFile;
	FILE * wFile;
	pFile = fopen ("autocomplete.txt","r");
	wFile = fopen ("output.txt","w");

	fscanf (pFile, "%d", &T);
	for(int i = 0; i < T; i++)
	{
		int ans = 0;
		m_root = new Node();

		fscanf(pFile, "%d", &N);
		for(int j = 0; j < N; j++)
		{
			fscanf(pFile, "%s", word);
			int len = strlen(word);

			bool found = false;
			Node* current = m_root;
			for(int k = 0; k < len; k++)
			{
				char word_k = word[k];
				int idx = word_k - 'a';

				Node* next = current->m_children[idx];
				if(next == NULL)
				{
					ans = ans + k + 1;
					current->m_children[idx] = makeNode(word,k,len);
					found = true;
					break;
				} else
				{
					current = next;
				}
			}

			if(found == false)
			{
				ans = ans + len;
			}
		}

		fprintf(wFile,"Case #%d: %d\n",i+1,ans);
	}

	fclose (pFile);
	fclose (wFile);

	return 0;
}
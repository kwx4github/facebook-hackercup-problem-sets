// Authored by dolphinigle

#include <vector>
#include <list>
#include <map>
#include <set>

#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <cstdarg>

#define FORN(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define REP(X,Y,Z) for (int (X) = (Y);(X) < (Z);++(X))

#define SZ(Z) ((int)(Z).size())
#define ALL(W) (W).begin(), (W).end()
#define PB push_back

#define MP make_pair
#define A first
#define B second

#define INF 1023123123
#define EPS 1e-11

#define MX(Z,Y) Z = max((Z),(Y))
#define MN(X,Y) X = min((X),(Y))

using namespace std;

typedef long long ll;
typedef double db;
typedef vector<int> vint;

int trie[1000050][26];
int nchild[1000050];
char tmpstr[1000050];

#ifdef DOLPHINIGLE_ENV
int main_b() {
#else
int main() {
#endif
  int ntc;
  cin >> ntc;
  FORN(itc, ntc) {
    printf("Case #%d: ", itc+1);
    int n;
    cin >> n;
    FORN(i, 26) trie[0][i] = -1;
    nchild[0] = 0;
    int trienodes = 1;
    FORN(i, 1000050) nchild[i] = 0;
    nchild[0] = 10;
    int ans = 0;
    FORN(i, n) {
      scanf("%s", tmpstr);
      int ns = strlen(tmpstr);
      int node = 0;
      int testresult = 0;
      FORN(j, ns) {
        int idx = tmpstr[j] - 'a';
        if (trie[node][idx] == -1) {
          FORN(k, 26) trie[trienodes][k] = -1;
          trie[node][idx] = trienodes;
          ++trienodes;
        }
        nchild[trie[node][idx]] += 1;
        if (nchild[node] > 1) ++ans;
        if (nchild[node] > 1) ++testresult;
        node = trie[node][idx];
      }
    }
    cout << ans << endl;
  }

  return 0;
}


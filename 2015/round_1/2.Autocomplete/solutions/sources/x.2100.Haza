//#define __test__aTest__
#ifndef __test__aTest__

#include <vector>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <assert.h>
#include <stdexcept>
#include <string>


using namespace std;

#define ll long long
#define ull size_t

int N;

static const int R = 26;
long long tot;

vector<string> v;

struct Node {
    set<int> idx;
    vector<Node*> next;
    Node() {
        idx.clear();
        next = vector<Node*>(R);
    }
};

struct Trie {
    Node *root;
    
    Trie() {root = new Node();}
    
    Node* put(Node *root, const string &s, int d, int id, set<int>* already) {
        ++tot;
        set<int>::iterator it;
        if (root == NULL) {
            root = new Node();
            const string& sub = s.substr(0, d);
            bool ok = true;
            for (it = already->begin(); it != already->end(); ++it) {
                if (v[*it].find(sub) != string::npos) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                root->idx.insert(id);
                return root;
            }
        }
        if (d == s.length()) {
            root->idx.insert(id);
            return root;
        }
        for (it = root->idx.begin(); it != root->idx.end(); ++it) {
            already->insert(*it);
        }
        root->next[s[d] - 'a'] = put(root->next[s[d] - 'a'], s, d + 1, id, already);
        return root;
    }
    
    void put(const string& s, int id) {
        set<int> already;
        root = put(root, s, 0, id, &already);
    }
};


void process(int index) {
    printf("Case #%d: ", index);
    //scanf("%d", &N);
    tot = 0;
    Trie trie;
    cin >> N;
    v.clear();
    for (int i = 0; i < N; i++) {
        string s;
        cin >> s;
        v.push_back(s);
        trie.put(s, i);
    }
    cout<< tot - N << endl;
    //printf("%.9f\n", 0.0);
    fflush(stdout);
}

int main() {
    
    freopen("/Users/zishirs/Documents/workspace/test/test/autocomplete.txt", "r", stdin);
    freopen("/Users/zishirs/Documents/workspace/test/test/output.txt", "w", stdout);
    
    int T;
    scanf("%d", &T);
    for (int index = 1; index <= T; ++index) {
        process(index);
    }
    
    
    /*
    int n;
    vector<int> v;
    while (cin >> n) {
        v.push_back(n);
    }
    vector<int> v1(v.begin(), v.begin() + v.size()/2), v2(v.begin() + v.size()/2, v.end());
    */
    
    //srand((unsigned int)time(NULL));

    return 0;
}

#endif
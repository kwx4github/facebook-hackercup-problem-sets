#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl;

const int maxN = 3000000;
const int maxC = 26;

struct node {
    node *cld[maxC]; };
node *root;
node E[maxN]; int nE = 0;

void init()
{
    nE = 0;
    memset(E[nE].cld, 0, sizeof(E[nE].cld));
    root = &E[nE++];
}

long long res = 0LL;

void ins(char str[])
{
    node *curNode = root; int tag = -1, l = strlen(str);
    for(int i = 0, c; i < l; ++ i) {
        c = str[i] - 'a';
        if( curNode->cld[c] == NULL ) {
            memset(E[nE].cld, 0, sizeof(E[nE].cld));
            curNode->cld[c] = &E[nE++];
            if( tag == -1 ) res += i + 1, tag = 1;
            curNode = curNode->cld[c];
        } else {
            curNode = curNode->cld[c];
        }
    }
    if( tag == -1 ) res += l;
}

char str[maxN]; int N;

int main()
{
    //freopen("autocomplete.txt", "r", stdin);
    //freopen("data.in", "r", stdin);
    //freopen("data.out", "w", stdout);
    int idx = 0, nt;
    scanf("%d", &nt);
    for(; nt > 0; nt --) {
        init(); res = 0LL;
        scanf("%d", &N);
        for(; N > 0; N --) {
            scanf("%s", str);
            ins(str);
        }
        printf("Case #%d: %I64d\n", ++idx, res);
    }
    return 0;
}

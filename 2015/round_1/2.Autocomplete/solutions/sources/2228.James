#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

#define PI acos(-1)
#define sqr(x) ((x) * (x))
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define ALL(c) (c).begin(), (c).end()
#define SIZE(c) (int)(c).size()

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int,int> ii;

#define PROD //clocking off

typedef struct Node{
	Node():c('\0'){};
	Node(char v):c(v){};

	char c;
	map<char, Node*> children;
}Node;

void free_tree(Node *cur){
	for(map<char, Node*>::iterator it=cur->children.begin(); it!=cur->children.end(); ++it){
		free_tree(it->S);
	}
	delete(cur);
}

/**
 * jporcelli, C++11, autocomplete, Facebook Hackathon 2015, round 1
 */

int main() {
#ifndef PROD
clock_t stop_s,start_s;
start_s=clock();
#endif

	int t, num_case=1;
	cin >> t;
	while(num_case<=t){
		cout << "Case #" << num_case << ": ";
		num_case++;

		Node *root=new Node();

		int N, r=0;
		cin >> N;
		for(int i=0;i<N;i++){
			string s;
			cin >> s;

			ll lpm;

			Node *cur=root;
			int len=0;
			while(cur->children.count(s[len])>0){
				cur=cur->children[s[len]];
				len++;
			}

			//matching prefix length
			lpm=len;
			
			//insert new prefix (s-LCP)
			while(len<s.length()){
				cur=cur->children[s[len]]=new Node(s[len]);
				len++;
			}

			if(lpm<s.length()) lpm++;
			
			r+=lpm;
		}

		cout << r << endl;

		//free dynamic memory allocated for previous test trie
		//free_tree(root);
	}

#ifndef PROD
stop_s=clock();
cout << "time: " << (stop_s-start_s)/double(CLOCKS_PER_SEC)*1000 << endl;
#endif
	return 0;
}
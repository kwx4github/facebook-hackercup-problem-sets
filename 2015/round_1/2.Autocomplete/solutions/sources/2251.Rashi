#include <stdio.h>
#include <string.h>
#include <stdlib.h> 
#define ALPHABET_SIZE 26
 
struct node {
    int data;
    struct node* link[ALPHABET_SIZE];
};
 
struct node* root = NULL;
 
struct node*  create_node() {
    struct node *q = (struct node*)malloc(sizeof(struct node));
    int x;
    for(x=0;x<ALPHABET_SIZE;x++)
        q->link[x] = NULL;
    q->data = -1;
    return q;
}
 
int counter;
void insert_node(char key[]) {
	  
    int length=0,flag=0;
    while(key[length]!='\0')
       length++; 
    int index;
    int level = 0;
    if(root == NULL)
        root = create_node();
    struct node *q = root;  // For insertion of each String key, we will start from the root
 
    for(;level < length;level++) {
        // At each level, find the index of the corresponding 
        // character (a-z = 0-26)
        index = key[level] - 'a';
 	
        if(flag==0)
		counter++;
	if(q->link[index] == NULL) {
            // Put the value of this character inside q->link[index]
            // and create 1 more node to which this node will point
            q->link[index] = create_node();  
	    flag = 1;// which is : struct node *p = create_node(); q->link[index] = p;
        }
 
        q = q->link[index];
    }
    // Now, the last character(node) of the String key will contain the value of this key
    q->data = level; // Assuming the value of this particular String key is 11      
}
 
void main() {
	int N,T,i,x;
	char S[1000000];
	scanf("%d",&T);
	for(i=1;i<=T;i++)
	{
		root=NULL;
		scanf("%d",&N);
		counter=0;
		while(N--)
		{
			scanf("%s",S);
			insert_node(S);
		}
		printf("Case #%d: %d\n",i,counter);
		for(x=0;x<26;x++)
			free(root->link[x]);
	}
}

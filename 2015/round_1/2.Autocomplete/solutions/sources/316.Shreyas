#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

struct node {
	node* children[26];
	node() {
		//fill(children, children+26, NULL);
		for (int i=0; i<26; i++)
			children[i] = NULL;
	}

	~node(){
		for (int i=0; i<26; i++){
			//if (children[i]) delete children[i];
		}
	}
};

struct trie {
	node* root;
	trie(){
		root = new node();
	}

	node* insert_char(node* e, char c, bool& new_node){
		if (e->children[c-'a']){
			new_node = false;
			return e->children[c-'a'];
		} else {
			new_node = true;
			return e->children[c-'a'] = new node();
		}
	}

	int insert(string& s){
		bool prefix_over = false;
		bool temp;
		int cp = 0;
		node* c = root;
		for (int i=0; i<s.length(); i++){
			c = insert_char(c, s[i], temp);
			if (!prefix_over && !temp){
				cp++;
			} else if (temp){
				prefix_over = true;
			}
		}
		return cp<s.length()?cp+1:cp;
	}

	~trie() {
		//delete root;
	}
};

int main(){
	int tc;
	cin>>tc;
	for (int tcc=1; tcc<=tc; tcc++){
		int n;
		cin>>n;
		string s;
		trie t;
		long long ans=0;
		for (int i=0; i<n; i++){
			cin>>s;
			//cout<<s;
			int x = t.insert(s);
			//cout<<x<<endl;
			ans += x;
		}
		cout<<"Case #"<<tcc<<": "<<ans<<endl;
	}
	return 0;
}
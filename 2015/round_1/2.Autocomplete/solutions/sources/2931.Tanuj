#include <bits/stdc++.h>

using namespace std;

inline int char_index(char c)
{
	return int(c) - int('a');
}
struct t_node
{
	int value;
	t_node *children[26];
};

struct trie
{
	t_node *root;
	int count;
};

t_node* getNode()
{
	t_node *p = (t_node*) malloc(sizeof(t_node));	
	(p)->value = 0;
	for(int i = 0; i < 26; i++)
	{
		(p)->children[i] = NULL;
	}


	return p;
}

void initialize(trie *t)
{

	t->root = getNode();

	t->count = 0;
}

void insert(trie* t,char key[])
{
	int len = strlen(key);
	int level,index;
	t_node* crawl = t->root;
	for(level = 0; level < len; level++)
	{
		index = char_index(key[level]);

		if(crawl->children[index] == NULL)
			crawl->children[index] = getNode();
		crawl = crawl->children[index];
		(crawl->value)++;
	}

}

int search(trie *t,char key[])
{
	int len = strlen(key);
	int level,index;
	t_node* crawl = t->root;

	for(level = 0; level < len; level++)
	{
		index = char_index(key[level]);
		if(crawl->children[index]->value == 1)
			return level+1;
		crawl = crawl->children[index];
	}

	return level;
}

int main()
{
	
	int tests;
	scanf("%d",&tests);

	for(int test = 1;test <= tests; test++)
	{
		trie t;
		initialize(&t);
		int n;
		scanf("%d",&n);
		char key[1000010];
		int ans = 0;
		for(int i = 0; i < n; i++)
		{
			scanf("%s",key);
			insert(&t,key);
			ans += search(&t,key);
			// printf("%d\n",ans);
		}
		printf("Case #%d: %d\n",test,ans);
	}

	return 0;
}
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;


public class Autocomplete {

	static Scanner input;
	static PrintWriter output;
	static int caseNum;
	
    static void solve(String[] words){
    	String answer = "";
    	PhoneDictionary phoneDic = new PhoneDictionary();
    	int totalLetterCount = 0;
    	for (int i = 0; i < words.length; i++) {
    		//System.out.println(words[i]);
    		phoneDic.addWord(words[i]);
    		totalLetterCount += phoneDic.autoComplete(words[i]);
    	}
    	answer = ""+totalLetterCount;
    	printAnswer(answer);
    }
    
    static void printAnswer(String answer) {
    	output.print("Case #" + caseNum + ": ");
    	output.print(answer);
    	output.println();
    }
    
    public static void main(String[] args) throws IOException {  
        
        FileInputStream stream = new FileInputStream("autocomplete.txt");
        Scanner input = new Scanner(stream);  //Create input scanner
        
        output = new PrintWriter("autocomplete_output.txt"); //Create output file
        
        int T = input.nextInt();
        for (caseNum = 1; caseNum <= T; caseNum++) {  
        	int N = input.nextInt();
            String words[] = new String[N];
            for (int i = 0; i < N; i++) {
            	words[i] = input.next();
            }
            //System.out.println("solving " + caseNum);
        	solve(words);
        }
        
        input.close();
        stream.close();                     
        output.close(); 
    } 

}

class LetterNode {
	public Map<Character, LetterNode> children = new HashMap<Character, LetterNode>();
	public boolean endWord;
	public Character letter;
	
	LetterNode(Character letter, boolean endWord) {
		this.letter = letter;
		this.endWord = endWord;
	}
	
	public void addChild(Character letter, boolean endWord) {
		LetterNode child = new LetterNode(letter, endWord);
		children.put(letter, child);
	}
	
	public LetterNode getChild(Character letter) {
		return children.get(letter);
	}
}

class PhoneDictionary {
	public Map<Character, LetterNode> wordLists = new HashMap<Character, LetterNode>();
	
	public void addWord(String word) {
		char[] charWord = word.toCharArray();
		if (!wordLists.containsKey(charWord[0])) {
			wordLists.put(charWord[0], new LetterNode(charWord[0], charWord.length==1));
		}
		LetterNode currentNode = wordLists.get(charWord[0]);
		for (int i = 1; i < charWord.length; i++) {
			if(!currentNode.children.containsKey(charWord[i])){
				currentNode.addChild(charWord[i], charWord.length==i+1);
			}
			currentNode = currentNode.getChild(charWord[i]);
		}
	}
	
	public int autoComplete(String word) {
		int letterCount = 1;
		int nodeCount = 1;
		
		char[] charWord = word.toCharArray();
		LetterNode currentNode = wordLists.get(charWord[0]);
		if (currentNode.children.size() > 1) {
			letterCount = nodeCount + 1;
		}
		else if (currentNode.endWord && charWord.length != 1) {
			//System.out.println(currentNode.letter + " is the end of a word");
			letterCount = nodeCount + 1;
		}
		
		for (int i = 1; i < charWord.length; i++) {
			//System.out.println("Info on currentNode:\nletter: " + currentNode.letter + " childsize: " + currentNode.children.size());			
			currentNode = currentNode.getChild(charWord[i]);
			nodeCount++;
			
			if (currentNode.children.size() > 1) {
				letterCount = nodeCount + 1;
			}
			else if (currentNode.endWord && i != charWord.length-1) {
				//System.out.println(currentNode.letter + " is the end of a word");
				letterCount = nodeCount + 1;
			}
			//System.out.println(charWord[i] + " " + letterCount);
		}
		if (!currentNode.children.isEmpty()){
			//System.out.println("More letters left after this word is done");
			//System.out.println("Info on currentNode:\nletter: " + currentNode.letter + " childsize: " + currentNode.children.size());
			letterCount = nodeCount;
		}
		
		//System.out.println("word: " + word + " count: " + letterCount);
		return letterCount;
	}
}

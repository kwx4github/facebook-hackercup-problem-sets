//
//  main.cpp
//  Autocomplete
//
//  Created by Dmytro Kotsur on 1/17/15.
//  Copyright (c) 2015 Dmytro Kotsur. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <unordered_map>

using namespace std;

struct Node {
    int weight;
    char ch;
    Node* nodes[26];
    
    Node(char c) {
        ch = c; weight = 1;
        for (int i = 0; i < 26; ++i)
            nodes[i] = NULL;
    }
};

void freeNode(Node *root) {
    if (root == NULL)
        return;
    else {
        for (int i = 0; i < 26; ++i) {
            if (root->nodes[i] != NULL)
                freeNode(root->nodes[i]);
        }
        delete root;
    }
}

int addString(const string &s, Node* root) {
    
    Node *curr = root;
    int times = 1;
    
    for (size_t i = 0; i < s.length(); ++i) {
        
        if (curr->nodes[s[i]-'a'] == NULL) {
            curr->nodes[s[i]-'a'] = new Node(s[i]);
        } else {
            curr->nodes[s[i]-'a']->weight++;
            times ++;
        }
        
        curr = curr->nodes[s[i]-'a'];
    }
    
    return min(times, (int)s.length());
}

long long T, N, times;
string word;

ifstream in("autocomplete.txt");
ofstream out("result.txt");

int main(int argc, const char * argv[])
{
    if (!in) {
        return -1;
    }
    
    in >> T;
    for (int t = 1; t <= T; ++t) {
        in >> N;
        Node *root = new Node('?');
        times = 0;
        
        for (int i = 0; i < N; ++i) {
            in >> word;
            //cout << word.length() << endl;
            times += addString(word, root);
        }
        
        out << "Case #" << t << ": " << times << endl;
        
        //freeNode(root);
    }
    
    
    
    
    return 0;
}


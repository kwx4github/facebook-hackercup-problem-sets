#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define all(o) (o).begin(), (o).end()
#define allr(o) (o).rbegin(), (o).rend()
const int INF = 2147483647;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
template <class T> int size(T &x) { return x.size(); }

// assert or gtfo

template <class T>
class trie {
private:
public:
    struct node {
        map<T, node*> children;
        int prefixes, words;
        node() { prefixes = words = 0; } };
    node* root;
    trie() : root(new node()) {  }
    template <class I>
    void insert(I begin, I end) {
        node* cur = root;
        while (true) {
            cur->prefixes++;
            if (begin == end) { cur->words++; break; }
            else {
                T head = *begin;
                typename map<T, node*>::const_iterator it;
                it = cur->children.find(head);
                if (it == cur->children.end()) {
                    pair<T, node*> nw(head, new node());
                    it = cur->children.insert(nw).first;
                } begin++, cur = it->second; } } }
    template<class I>
    int countMatches(I begin, I end) {
        node* cur = root;
        while (true) {
            if (begin == end) return cur->words;
            else {
                T head = *begin;
                typename map<T, node*>::const_iterator it;
                it = cur->children.find(head);
                if (it == cur->children.end()) return 0;
                begin++, cur = it->second; } } }
    template<class I>
    int countPrefixes(I begin, I end) {
        node* cur = root;
        while (true) {
            if (begin == end) return cur->prefixes;
            else {
                T head = *begin;
                typename map<T, node*>::const_iterator it;
                it = cur->children.find(head);
                if (it == cur->children.end()) return 0;
                begin++, cur = it->second; } } } };

// ll cnt(trie<char>::node *cur, ll height) {
//     if (!cur) return 0;
//     if (cur->prefixes == 0) return 0;
//     if (cur->prefixes == 1) return height;
// 
//     ll res = cur->words * height;
//     for (map<char, trie<char>::node*>::const_iterator it = cur->children.begin(); it != cur->children.end(); ++it) {
//         res += cnt(it->second, height + 1);
//     }
// 
//     return res;
// }

ll cnt(trie<char> &T, const string &s) {

    trie<char>::node *cur = T.root;
    for (int i = 0; i < size(s); i++) {
        if (!cur || cur->prefixes == 0) {
            return max(i, 1);
        }

        if (cur->children.find(s[i]) == cur->children.end()) {
            return i + 1;
        }

        cur = cur->children[s[i]];
    }

    return size(s);
}

int main() {
    int ts;
    cin >> ts;

    for (int t = 0; t < ts; t++) {
        int n;
        cin >> n;

        trie<char> T;

        ll res = 0;
        for (int i = 0; i < n; i++) {
            string s;
            cin >> s;
            res += cnt(T, s);
            T.insert(s.begin(), s.end());
        }

        cout << "Case #" << (t + 1) << ": " << res << endl;

    }

    return 0;
}


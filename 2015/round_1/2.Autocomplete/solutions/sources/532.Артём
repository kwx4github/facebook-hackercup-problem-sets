#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
#define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<ll> > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...

struct node
{
    vector <ll> to;
    node()
    {
        to.assign(26, -1);
    }
};

vector < node > bor;


void solve(ll test)
{
	ll n;
	cin >> n;
	vector <string> S(n);
	for (ll i = 0; i < n; i++)
		cin >> S[i];
    bor.clear();
    bor.resize(1);
    ll len = 1;
    ll last = 1;
    ll ans = 0;
    for (ll word = 0; word < n; word++)
    {
        ll curAns = 0;
        ll pt = 0;
        for (ll i = 0; i < (ll)S[word].size(); i++)
        {
            // cout << pt << " " << curAns << endl;
            // for (ll q = 0; q < len; q++)
            // {
            //     for (ll j = 0; j < 26; j++)
            //         cout << bor[q].to[j] << " ";
            //     cout << endl;
            // }
            // cout << endl;
            if (curAns >= 0)
                curAns++;
            ll let = S[word][i] - 'a';
            if (bor[pt].to[let] == -1)
            {
                if (curAns >= 0)
                    curAns *= -1;
                if (last == len)
                {
                    bor.resize(len * 2);
                    len *= 2;
                }
                bor[pt].to[let] = last;
                pt = last;
                last++;
            }
            else
            {
                pt = bor[pt].to[let];
            }
        }
        // cout << endl;
        // cout << curAns << endl;
        ans += abs(curAns);
    }
    cout << "Case #" << test << ": " << ans << endl;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    ll T;
    cin >> T;
    for (ll i = 0; i < T; i++)
    {
    	solve(i + 1);
    }
    #ifdef HOME
        cerr << "\ntime = " << clock() / 1000 << " ms\n";
    #endif
    return 0;
}
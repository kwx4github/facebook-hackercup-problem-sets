#include<stdio.h>
#define maxs 100005
#define maxi 1000006

#define Get getchar()
int getInt() { int a=0,s=1; char c=0; while(c<33) c=Get; if(c=='-') {s=-1; c=Get;} while(c>33) {a=(a<<3)+(a<<1)+c-'0'; c=Get;} return a*s; }

typedef struct zz
{
	int s,e;
	struct zz *next[26];
} Trie;

Trie node[maxi],*root;
int usedNodes;

Trie* getNewNode(int s,int e) {
	if(usedNodes>=maxi) { return NULL; }
	int cur=usedNodes; usedNodes++;
	node[cur].s=s; node[cur].e=e;
	int j; for(j=0;j<26;j++) node[cur].next[j]=NULL;
	return &node[cur];
}

void initTrie() {
	usedNodes=0;
	root=getNewNode(-1,-1);
}

char str[maxi];
int N,x[maxs][2],Len;

void getString(int k) {
	char c=0; while(!(c>='a' && c<='z')) c=Get;
	x[k][0]=Len;
	while(c>='a' && c<='z') { str[Len++]=c; c=Get; }
	x[k][1]=Len-1;
}

void printNode(Trie *n) {
	printf("\"");
	int j; for(j=n->s;j<=n->e;j++) printf("%c",str[j]); printf("\" (");
	for(j=0;j<26;j++) if(n->next[j]!=NULL) printf("%c ",'a'+j);
	printf(")");
}

void printString(int s,int e) {
	int j; for(j=s;j<=e;j++) printf("%c",str[j]);
}

void printTrie(Trie *t, int level) {
	if(t==NULL) return;
	printf("L: %d --- ",level); printNode(t); printf("\n");
	int j; for(j=0;j<26;j++) printTrie(t->next[j],level+1);
}

void splitNode(Trie *n) {
	if(n->e > n->s) {
		//printf("splitting node -- "); printNode(n); printf(" to ");
		Trie *z=getNewNode((n->s)+1,n->e);
		n->next[str[(n->s)+1]-'a']=z;
		n->e=n->s;
		//printNode(n); printf(" and "); printNode(z); printf("\n");
	}
}

Trie* move(Trie *n, int s, int e) {
	if(n->next[str[s]-'a']!=NULL) return n->next[str[s]-'a'];
	n->next[str[s]-'a']=getNewNode(s,e);
	return NULL;
}

int insertIntoTrie(int k) {
	Trie *cur=root; int st=x[k][0],en=x[k][1], matched=0;
	while(cur!=NULL && st<=en)
	{
		//printf("status: "); printNode(cur); printf(" -- "); printString(st,en); printf("\n");
		if(cur->e > cur->s) {	// multiple characters at node
			splitNode(cur);
		} else {		// only one character (or maybe no character if root node)
			if(cur->s!=-1 && str[cur->s]==str[st]) { st++; matched++; }
			if(st>en) break;
			cur = move(cur,st,en);
		}
	}
	return matched;
}

int solve()
{
	initTrie();
	int i,res=0;
	for(i=0;i<N;i++) {
		int match=insertIntoTrie(i);
		res+=match;
		if(match<(x[i][1]-x[i][0]+1)) res++;
	}
	//printTrie(root,1); getch();
	return res;
}

int main()
{
	int cas,T=getInt();
	for(cas=1;cas<=T;cas++) {
		N=getInt(); Len=0;
		int i; for(i=0;i<N;i++) getString(i);
		int res=solve();
		printf("Case #%d: %d\n",cas,res);
	}
	return 0;
}
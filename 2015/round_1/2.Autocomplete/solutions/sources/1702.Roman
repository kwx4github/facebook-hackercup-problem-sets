#ifdef SHTRIX 
#include "/Users/roman/Dev/SharedCpp/DebugOutput.h"
#endif
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <stack>
#include <cstring>
#include <ctime>
#include <cstdio>
#include <memory>
using namespace std;
#define pb push_back
#define INF 1000000000
#define L(s) (int)((s).end()-(s).begin())
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for(int i = (a); i >= (b); i--)
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define VI vector<int>
#define ppb pop_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
//#define x first
//#define y second
#define sqr(a) (a)*(a)
#define D(a,b) sqrt(((a).x-(b).x)*((a).x-(b).x)+((a).y-(b).y)*((a).y-(b).y))
#define pi 3.1415926535897932384626433832795028841971
#define UN(v) sort((v).begin(),(v).end()),v.erase(unique(v.begin(),v.end()),v.end())

const int K = 26;
const int M = 2e6 + 200;
const int N = 1e5 + 100;
int n;
string words[N];
char _buffer[M];

int nxt[M][K], last;
int visit[M];

inline int mv(int cur, char c) {
    c -= 'a';
    if (nxt[cur][c] == -1)  {
        nxt[cur][c] = last++;
    }
    return nxt[cur][c];
}

void init() {
    last = 1;
    memset(nxt, -1, sizeof(nxt));
    memset(visit, 0, sizeof(visit));
}

int add(const string &s) {
    int cur = 0, ans = s.size();
    for (int i = 0; i < s.size(); i++) {
        cur = mv(cur, s[i]);
        visit[cur]++;
        if (visit[cur] == 1) {
            ans = min(ans, i + 1);
        }
    }
    return ans;
}

void solve() {
    init();
    scanf("%d", &n);
    rept(i, n) {
        scanf("%s", _buffer);
        words[i] = string(_buffer);
    }
    long long ans = 0;
    rept(i, n) ans += add(words[i]);
    cout << ans << endl;
}

int main()
{
    #ifdef SHTRIX 
    freopen("input.txt","rt",stdin); 
    //freopen("output.txt","wt",stdout); 
    #endif
    int TC;
    scanf("%d", &TC);
    rept(tc, TC) {
    	printf("Case #%d: ", tc + 1);
        solve();
    }

	return 0;
}

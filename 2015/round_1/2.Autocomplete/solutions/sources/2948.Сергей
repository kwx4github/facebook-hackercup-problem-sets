#pragma warning (disable : 4996)
#pragma comment(linker, "/STACK:36777216")



#include <stdlib.h>
#include <iostream>
#include <vector>
#include <string>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <ios>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <queue>
#include <set>
#include <functional>
#include <cmath>
#include <sstream>
#include <map>
#include <memory.h>
#include <stdio.h>
#include <cassert>
#include <string.h>
#include <deque>

#define forn(i , n) for (int i = 0; i < n; ++i)
#define down(i, n) for (int i = n - 1; i >= 0; --i)


using namespace std;

typedef unsigned long long int u64;
typedef long long int i64;
typedef vector<int> vint;
typedef vector<i64> vi64;
typedef pair<int, int> pint;
typedef pair<i64, i64> pi64;

#define FILE_NAME "file"
#define CONTEST "seq"
#define M_PI 3.14159265358979323846

double sqr(double a)
{
	return a * a;
}

const i64 inf = 100000000000000000LL;

#define MOD 100000000 


struct Node
{
	i64 d, n;
	int c[30];
	Node()
	{
		d = 0;
		n = 0;
		forn(i, 30)
		{
			c[i] = -1;
		}
	}
};

int curr = 1;

vector<Node> arr;

void add(Node & v, string & s, int pos = 0)
{
	v.n++;
	if (pos == s.length())
		return;
	

	if (v.c[s[pos] - 'a'] == -1)
	{
		v.c[s[pos] - 'a'] = curr++;
		arr[v.c[s[pos] - 'a']].d = v.d + 1;
		
	}
	add(arr[v.c[s[pos] - 'a']], s, pos + 1);
}

int get(Node & v, string & s, int pos = 0)
{
	if (pos == s.length() || v.n == 1 && v.d != 0)
	{
		return v.d;
	}
	return get(arr[v.c[s[pos] - 'a']], s, pos + 1);
}

int main()
{
	clock_t start = clock();
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout << fixed << setprecision(15);
#ifdef FILE_INPUT
	freopen(FILE_NAME ".in", "r", stdin);
	freopen(FILE_NAME ".out", "w", stdout);
#endif


	int T;
	cin >> T;
	arr.resize(2000000);
	forn(t, T)
	{
		forn(i, 2000000)
		{
			forn(j, 26)
			{
				arr[i].c[j] = -1;
			}
			arr[i].n = 0;
			arr[i].d = 0;
		}
		curr = 1;
		i64 ans = 0;
		i64 n;
		cin >> n;
	
		
		forn(i, n)
		{
			string s;
			cin >> s;
			add(arr[0], s); 
			ans += get(arr[0], s);
		}
		
		cout << "Case #" << (t + 1) << ": " << ans << "\n";
	}

	return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cstring>

#define LL long long int
#define MX 1000001

#define ALPHABET_SIZE (26)

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
using namespace std ;  
 
typedef struct trie_node trie_node_t;

struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
 
typedef struct trie trie_t;

struct trie
{
    trie_node_t *root;
    int count;
};

int f ;

LL ans ; 

char str[MX] ; 
 
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
void insert(trie_t *pTrie)
{
    int level;
    int length = strlen(str);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(str[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(!f)
            {
            ans+=(level+1) ; 
            f = 1 ; 
        	}
        }
 		
        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
}
 
int main()
{
	int  t , T , N , i ; 
    trie_t trie;
    
    scanf("%d",&T) ;
	
	for(t=1;t<=T;t++)
	{
		scanf("%d",&N) ; 
		
		getchar() ; 
		
		ans = 0 ; 
		
		initialize(&trie);
		
		for(i=0;i<N;i++)
		{
			scanf("%s",str) ; 
			getchar() ; 
			f = 0 ; 
    		insert(&trie);
    		if(!f)
 			{
 					f = 1; 
 					ans += (strlen(str)) ;
 			}
		}
		
    	printf("Case #%d: %lld\n",t,ans) ; 
	} 
 
    return 0;
}

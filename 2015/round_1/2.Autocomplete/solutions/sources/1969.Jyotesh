/*Autocomplete*/

#include<stdio.h>

#define MAX 1000000

struct trie_node
{
	int subtree_count;
	int next[26];
};

char word[MAX + 5];
int nodes_used;
struct trie_node trie[MAX + 5];

void init(void);
void insert_word(void);
int count_letters_to_type(void);

int main()
{
	int count, i, N, t, T;
	freopen("autocomplete.txt", "r", stdin);
	freopen("autocomplete_output.txt", "w", stdout);
	scanf("%d", &T);
	for (t = 1; t <= T; t++)
	{
		init();
		count = 0;
		scanf("%d", &N);
		for (i = 0; i < N; i++)
		{
			scanf("%s", word);
			insert_word();
			count += count_letters_to_type();
		}
		printf("Case #%d: %d\n", t, count);
	}
	return 0;
}

void init(void)
{
	int i, j;
	for (i = 0; i < MAX + 5; i++)
	{
		trie[i].subtree_count = 0;
		for (j = 0; j < 26; j++)
			trie[i].next[j] = -1;
	}
	nodes_used = 1;
}

void insert_word()
{
	int i, index;
	i = index = 0;
	while (word[i] != '\0')
	{
		if (trie[index].next[word[i] - 'a'] == -1)
			trie[index].next[word[i] - 'a'] = nodes_used++;
		trie[index].subtree_count++;
		index = trie[index].next[word[i] - 'a'];
		i++;
	}
	trie[index].subtree_count++;
}

int count_letters_to_type()
{
	int i, index;
	i = index = 0;
	while (word[i] != '\0')
	{
		index = trie[index].next[word[i] - 'a'];
		if (trie[index].subtree_count == 1)
			return i + 1;
		i++;
	}
	return i;
}
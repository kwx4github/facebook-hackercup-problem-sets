using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

namespace Autocomplete
{
	class Program
	{
		static void Main(string[] args)
		{
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")) { NewLine = "\n" })
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var n = reader.Next<int>();
					var words = new string[n];
					for (int j = 0; j < n; j++)
					{
						words[j] = reader.Next<string>();
					}
					var res = Solve(words, new Letter());

					writer.WriteLine("Case #{0}: {1}", i, res);
					Console.WriteLine("Case #{0}: {1}", i, res);
				}
			}
		}

		private static int Solve(IEnumerable<string> words, Letter root)
		{
			var num = 0;
			foreach (var word in words)
			{
				var curr = root;
				var first = true;
				foreach (var ch in word)
				{
					if (curr.Childs.ContainsKey(ch)) num++;
					else
					{
						curr.Childs[ch] = new Letter();
						if (first)
						{
							first = false;
							num++;
						}
					}
					curr = curr.Childs[ch];
				}
			}
			return num;
		}

		class Letter
		{
			public Letter()
			{
				Childs = new Dictionary<char, Letter>();
			}

			public Dictionary<char, Letter> Childs { get; private set; }
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}
}

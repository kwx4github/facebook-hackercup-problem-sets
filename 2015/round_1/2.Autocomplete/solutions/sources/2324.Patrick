#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <ext/algorithm>
#include <ext/hash_map>
#include <ext/hash_set>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define F(i,a,b)for(int i=a;i<b;++i)
#define rep(i,n)F(i,0,n)
#define all(a)a.begin(),a.end()
template<class T>vector<T>&operator<<(vector<T>& v,T t){v.push_back(t);return v;} 

// O(log(|dict|))
// find if there exists a string in dict with prefix s
// (such string is necessarily > than s)
bool ok(set<string>& dict, string s) {
  if (dict.size() == 0) return true;
  auto lb = dict.lower_bound(s);
  if (lb == dict.end()) return true;
  return !(lb->length() >= s.length() && lb->substr(0, s.length()) == s);
}

int solve(vector<string>& words) {
  set<string> previous;
  int cnt = 0;
  rep(i, words.size()) {
    F(j, 1, words[i].length()) {
      if (ok(previous, words[i].substr(0, j))) {
        cnt += j;
        goto out;
      }
    }
    cnt += words[i].length();
out:
    previous.insert(words[i]);
  }
  return cnt;
}

int main() {
  int T;
  cin >> T;
  rep(t, T) {
    int N;
    cin >> N;
    vector<string> words;
    rep(n, N) {
      string s;
      cin >> s;
      words.push_back(s);
    }
    printf("Case #%d: %d\n", t + 1, solve(words));
  }
}

#include <iostream>
#include <string>
#include <cstring>

/* use ulimit -s 81920 to increase stack size :) */

using namespace std;

struct trie_node {
	char c;
	int nr;
	struct trie_node *v['z'-'a'+1];
};

struct trie_node *root;

void add_trie_node(struct trie_node *root, const char *word, int *count)
{
	char crt;
	
	crt = word[0];
	
	if (!crt) {
		root->nr++;
		return;
	}

	if (root->c == 0) {
		*count = 1;
	}
	
	root->nr++;

	if (root->c != 0 && root->nr > 1)
		*count += 1;
			
	if (!root->v[crt - 'a']) {
		root->v[crt - 'a'] = new struct trie_node();
		
		//cout<<root->v[crt-'a']<<endl;
	}
	root->v[crt - 'a']->c = crt;
	add_trie_node(root->v[crt-'a'], word + 1, count);
}

void free_trie(struct trie_node *root)
{
	int i;

	for (i = 0; i < 'z' - 'a'; i++)
		if (root->v[i])
			free_trie(root->v[i]);
	delete root;
}

int main(void)
{
	int N, i, T, t, total = 0, cnt;
	string s;
	
	cin >> T;

	for (t = 1; t <= T; t++) {

		cin >> N;
		total = 0;

		root = new struct trie_node();

		for (i = 0; i < N; i++) {
			cin >> s;
			cnt = 0;
			add_trie_node(root, s.c_str(), &cnt);
			total += cnt;
			//cout << s.c_str()<<" "<<cnt<<endl;
		
		}
		free_trie(root);
	
		cout <<"Case #"<<t<<": "<<total<<endl;
	}

	return 0;
}

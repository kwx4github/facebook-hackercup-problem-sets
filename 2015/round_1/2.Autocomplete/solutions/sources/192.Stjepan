#include <cstdio>
#include <cstring>
#include <cassert>

#include <algorithm>
#include <iostream>
using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

int out;

struct Node {
  int ends;
  Node *next[26];

  Node() { ends = 0; memset(next, 0, sizeof next); }
  ~Node() { REP(i, 26) if (next[i]) delete next[i]; }

  void insert(char *s) {
    ++ends;
    if (*s == 0) return;

    int k = *s - 'a';
    if (next[k] == 0) next[k] = new Node;
    next[k]->insert(s+1);
  }

  void solve(char *s) {
    if (*s == 0) return;
    if (ends == 1) return;
    
    int k = *s - 'a';
    ++out;
    next[k]->solve(s+1);
  }
};

int main() {
  int T;
  scanf("%d", &T);
  for (int tt = 1; tt <= T; ++tt, fflush(stdout)) {
    int N;
    scanf("%d", &N);

    Node *root = new Node;
    int ans = 0;

    REP(i, N) {
      static char s[1000100];
      scanf("%s", s);
      root->insert(s);

      out = 0;
      root->solve(s);
      ans += max(1, out);
    }
    
    printf("Case #%d: %d\n", tt, ans);
    delete root;
  }
  return 0;
}

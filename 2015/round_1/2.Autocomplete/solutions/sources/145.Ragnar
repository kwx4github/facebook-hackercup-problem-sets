#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <bitset>
#include <stack>
#include <string>
#include <sstream>
#include <math.h>

#define REP(i,n) for(int i = 0; i<(n); i++)
#define ITER(i,v) for(auto i : v)
#define INF 1000000000

using namespace std;

template <class T>
using priority_queue_asc =  priority_queue<T,vector<T>, greater<T> >;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef vector<bool> vb;

struct Node{
	int childs[26];
	bool leaf;
	Node(){
		fill_n(childs,26,-1);
		leaf = true;
	}
};

vector<Node> nodes;

int main(){
	int TC;
	scanf("%d",&TC);
	for(int tc=1;tc<=TC;tc++){
		int letters = 0;
		nodes.clear();
		nodes.reserve(1000002);
		nodes.push_back(Node());
		int W;
		scanf("%d",&W);
		REP(w,W){
			string word;
			cin >> word;
			int node = 0;
			bool known = false;
			// add wordt to dictionary
//			cout << "word: "<<word<<"\n";
			ITER(c, word){
				int& next = nodes[node].childs[c-'a'];
				if(next>=0){
//					cout << "type letter "<<c<<"\n";
					letters++;
					node = next;
				} else {
//					cout <<"new node for "<<c;
					if(!known){
						known = true;
						letters ++;
//						cout <<" should be typed\n";
					}
//					else
//						cout << "\n";
					node = next = nodes.size();
					nodes.push_back(Node());
				}
			}


		}
		cout << "Case #"<<tc<<": "<<letters<<"\n";
	}
	return 0;
}



#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node_t;
typedef struct trie trie_t;

struct trie_node
{
    int value;
    trie_node_t *children[26];
};

struct trie
{
    trie_node_t *root;
};
 
trie_node_t *getNode()
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        for(i = 0; i < 26; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}

int insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;
    int ret = length;
    int changed = 0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            
            if(!changed)
            {
                ret = level + 1;
                changed++;
            }
        }
 
        pCrawl = pCrawl->children[index];
    }

    return ret;
}

void freeall(trie_node_t *pCrawl) {
    //printf("hello\n");
    for (int i = 0; i < 26; ++i)
    {
        if(pCrawl->children[i] != NULL) {
            freeall(pCrawl->children[i]);
        }
    }
    free(pCrawl);
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
}

int main()
{
    int n,t,i,j;
    char key[1000001];
    scanf("%d",&t);
    for(j=1; j<=t; j++)
    {
        trie_t trie;
        initialize(&trie);

        scanf("%d",&n);
        int cnt = 0;
        if(n==1) {
            scanf("%s", key);
            cnt=1;
        }
        else {
        for(i=0;i<n;i++)
            {
                scanf("%s",key);
                cnt += insert(&trie, key);
            }
        }

        printf("Case #%d: %d\n", j, cnt);
    }
 
    return 0;
}
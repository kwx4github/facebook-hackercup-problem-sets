import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class ProblemB {

public static void main(String[] args) throws IOException {
		
		ProblemB solver = new ProblemB();
		solver.init();
		solver.solve();
	}

	private void init() {
		
	}
	
	private static class Node {
		Node[] next = new Node[26];
	}
	
	private void solve() throws IOException {
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			int N = in.nextInt();
			Node start = new Node();
			int sum = 0;
			for (int i = 0; i < N; i++) {
				sum += process(start, in.next().toCharArray());
			}
			out.println("Case #" + t + ": " + sum);
		}
		
		out.flush();
		out.close();
	}
	
	private int process(Node node, char[] str) {
		int r = 0;
		boolean adding = true;
		for (int i = 0; i < str.length; i++) {
			if (adding) {
				r++;
			}
			int idx  = str[i] - 'a';
			if (node.next[idx] == null) {
				node.next[idx] = new Node();
				adding = false;
			} 
			node = node.next[idx];
		}
		
		return r;
	}

	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

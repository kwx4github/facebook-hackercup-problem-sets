#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# facebook hackercup - c.durr - 2015

# Autocomplete
# https://www.facebook.com/hackercup/problems.php?pid=313229895540583&round=344496159068801
# linear time complexity
# maintain a patricia trie
# http://stackoverflow.com/questions/2406416/implementing-a-patricia-trie-for-use-as-a-dictionary/2412468#2412468

from sys import *

# import string
# from queue import *

def readint():    return int(stdin.readline())
def readstr():    return stdin.readline().strip()


class patricia():
    def __init__(self):
        self._data = {}

    def addWord(self, word):
        data = self._data
        i = 0
        while True:
            try:
                node = data[word[i:i+1]]
            except KeyError:
                if data:
                    data[word[i:i+1]] = [word[i+1:],{}]
                else:
                    if word[i:i+1] == '':
                        return len(word[:i+1])    # word already in the dictionnary
                    else:
                        if i != 0:
                            data[''] = ['',{}]
                        data[word[i:i+1]] = [word[i+1:],{}]
                return len(word[:i+1])

            i += 1
            if word.startswith(node[0],i):
                if len(word[i:]) == len(node[0]):
                    if node[1]:
                        try:
                            node[1]['']
                        except KeyError:
                            data = node[1]
                            data[''] = ['',{}]
                    return i+1   # should never happen for the contest as words are distinct
                else:
                    i += len(node[0])
                    data = node[1]
            else:
                ii = i
                j = 0
                while ii != len(word) and j != len(node[0]) and \
                      word[ii:ii+1] == node[0][j:j+1]:
                    ii += 1
                    j += 1
                tmpdata = {}
                tmpdata[node[0][j:j+1]] = [node[0][j+1:],node[1]]
                tmpdata[word[ii:ii+1]] = [word[ii+1:],{}]
                data[word[i-1:i]] = [node[0][:j],tmpdata]
                return len(word[:ii+1])


for test in range(readint()):
    score = 0
    p  = patricia()
    N = readint()
    for _ in range(N):
        score += p.addWord(readstr())
    print( "Case #%d: %d" % (test+1, score))
    
    

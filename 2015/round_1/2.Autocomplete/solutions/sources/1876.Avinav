package round1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Scanner;

public class Autocomplete {

	
	public static class NodeChar {
		char ch;
		int count = 0;
		HashMap<Character, NodeChar> pointer;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		File file = new File("autocomplete.txt");
		try {
			Scanner in =  new Scanner(file);
			PrintStream pStream = new PrintStream("autocomplete_output.txt");
			int T = in.nextInt();
			int n = 0, count = 0;
			String word;
			for (int t = 0; t < T; t++) {
				n = in.nextInt();
				NodeChar head = new NodeChar();
				head.ch = '0';
				head.count = 0;
				head.pointer = new HashMap<Character, NodeChar>();
				count = 0;
				for (int i = 0; i < n; i++) {
					word = in.next();
					addWord(head, word);
					count += countTypedChars(head, word);
//					printTree(head);
//					System.out.println("-------------------");
				}
				pStream.println("Case #" + t+1 + ": " + count);
			}
			in.close();
			pStream.close();
		} catch (FileNotFoundException | DuplicateNodeException | WordNotFound | TreeHeadNull e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public static int countTypedChars(NodeChar head, String str) throws WordNotFound {
		int i = 0;
		char ch;
		while (i < str.length()) {
			ch = str.charAt(i);
			head = head.pointer.get(ch);
			if(head == null || head.count == 0) {
				throw new WordNotFound();
			}
			if (head.count == 1) {
				return i+1;
			}
			i++;
		}
		return i;
	}
	public static void addWord(NodeChar head, String str) throws DuplicateNodeException, TreeHeadNull {
		if (head == null) {
			throw new TreeHeadNull();
		}
		boolean newStarted = true;
		int i = 0;
		char ch;
		while(i < str.length()) {
			ch = str.charAt(i);
			if (head.pointer.get(ch) != null) {
				head.count ++;
			}
			else {
				if (newStarted) {
					head.count++;
					newStarted = false;
				}
				createNode(head, ch);
			}
			head = head.pointer.get(ch);
			i++;
		}
		
	}
	
	public static NodeChar createNode(NodeChar parent, Character ch) throws DuplicateNodeException {
		NodeChar newNode = new NodeChar();
		if(parent.pointer.get(ch) == null) {
			parent.pointer.put(ch, newNode);
			newNode.ch = ch;
			newNode.count = 1;
			newNode.pointer = new HashMap<Character, NodeChar>();
		}
		else {
			throw new DuplicateNodeException();
		}
		return newNode;
	}
	
	public static void printTree (NodeChar head) {
		if (head.pointer == null || head.pointer.keySet().size() == 0) {
			System.out.println(head.ch + ", " + head.count);
		}
		else {
			for(char c : head.pointer.keySet()) {
				printTree(head.pointer.get(c));
				System.out.println(head.ch + ", " + head.count);
			}
		}
	}
	public static class DuplicateNodeException extends Exception {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		
	}
	public static class WordNotFound extends Exception {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		
	}
	public static class TreeHeadNull extends Exception {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		
	}

}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)


struct Node {
	Node* ch[26];
};

Node nodebuf[1000008];
int nodes_alloc;

Node* new_node() {
	memset(&nodebuf[nodes_alloc].ch[0], 0, sizeof nodebuf[nodes_alloc].ch);
	return &nodebuf[nodes_alloc++];
}

char buf[1000008];

int solve() {
	nodes_alloc = 0;
	int res = 0;
	Node* root = new_node();
	int words; GI(words);
	while (words--) {
		scanf("%s", buf);
		Node* cur = root;
		int add = 1;
		for (char* p = buf; *p; p++) {
			if (cur->ch[*p - 'a']) {
				++res;
			} else {
				res += add;
				add = 0;
				cur->ch[*p - 'a'] = new_node();
			}
			cur = cur->ch[*p - 'a'];
		}
	}

	return res;
}

int main() {
//freopen("input.txt", "rt", stdin);
freopen("b-in.txt", "rt", stdin); freopen("b-out.txt", "w", stdout);
	
	int ntc; GI(ntc);
	FORE(tc, 1, ntc) {
		int res = solve();
		printf("Case #%d: %d\n", tc, res);
		
		fprintf(stderr, "Case #%d: %d\n", tc, res);
	}

}


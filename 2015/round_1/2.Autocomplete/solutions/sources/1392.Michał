#include<cstdio>
#include<algorithm>
#include<utility>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<iostream>

#define REP(i, n) for(int i = 0; i< n; ++i)
#define SC(a) scanf("%d", &a)
#define SCC(a) scanf("%c", &a)
#define SC2(a, b) scanf("%d%d", &a, &b)
#define SC3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define PR(a) printf("%d\n", a)
#define FORE(c, a, b) for(int c=int(a); c<= int(b); ++c)
#define FORD(c, a, b) for(int c=int(a); c>= int(b); --c)
#define FORIT(it, cont, cont_t) for(cont_t::iterator it = cont.begin(); it != cont.end(); ++it) 
#define ALL(a) a.begin(), a.end()

#define xx first
#define yy second
#define pb push_back
#define mp make_pair
#define itr iterator

#define dbg if(0) 
#define prd dbg printf
#define koniec dbg {SCC(c);SCC(c);} return 0;

using namespace std;

typedef vector<int> vi;
typedef set<int> si;
typedef multiset<int> msi;
typedef map<int, int> mi;
typedef pair<int, int> pi;
typedef pair<pi, string> psi;
typedef pair<int, psi> ipsi;
typedef vector<psi> vpsi;
typedef long long ll;
typedef long double ld;
typedef unsigned int uint;

const int NMAX = 1000005, CMAX = 30; // 10^6
int tn, n, sn, out;
char s[NMAX];

struct Node {
  Node* sons[CMAX];
};

vector<Node*> mem;

Node* initNode() {
  Node* nod = new Node;
  mem.pb(nod);
  REP(i, CMAX)
    nod->sons[i] = 0;
  return nod;
}

int dictAdd(Node* nod) {
  int out = 0;
  REP(i, sn) {
    char x = s[i] - 'a';
    prd("put %d %d\n", x, nod);
    if(nod->sons[x] == 0) {
      nod->sons[x] = initNode();   
    }
    else
      out++;
    nod = nod->sons[x];
  }
  return out;
}


void dictClear() {
  FORIT(it, mem, vector<Node*>)
    delete *it;
}

void compute(int ti) {
  scanf("%d ", &n);
  out = 0;
  mem.clear();
  Node* root = initNode();
  
  REP(i, n) {
    scanf("%s", s);
    sn = strlen(s);
    int da = min(1 + dictAdd(root), sn);
    prd("%s %d -> %d\n", s, sn, da);
    out += da;   
    
  }
  dictClear();
  cout << "Case #" << ti << ": " << out << endl;
}

int main() {
  scanf("%d", &tn);
  FORE(ti, 1, tn)
    compute(ti);
  return 0;
}


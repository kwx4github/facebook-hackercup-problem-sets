// ================================================================================================
//  pFHC1502B.ac.cpp
//  Written by Luis Garcia, 2015
// ================================================================================================

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <iterator>
#include <numeric>
#include <iostream>

using namespace std;

#if defined _OJ_PROJECT
_BEGIN_PROBLEM(FHC1502B, "FHC1502B")
#endif // _OJ_PROJECT

#define infinite_loop for (;;)

struct Trie {
    int counter;
    Trie * children[26];
};

Trie heap[2000000], * heapOffset = heap;

Trie * get() {
    Trie * ptr = heapOffset++;
    memset(ptr, 0, sizeof(Trie));
    return ptr;
}

void add(const char * psz) {
    Trie * ptr = heap;
    ++ptr->counter;
    while (* psz) {
        Trie * & child = ptr->children[* psz++ - 'a'];
        if (!child) child = get();
        ptr = child;
        ++ptr->counter;
    }
}

int find(const char * psz) {
    Trie * ptr = heap;
    int t = 0;
    while (* psz) {
        if (ptr->counter == 1)
            return t;
        ptr = ptr->children[* psz++ - 'a'];
        ++t;
    }
    return t;
}

char sz[1000001];

int main() {
    int T, N;
    scanf("%d", &T);

    for (int _T = 0; _T < T; ++_T) {
        scanf("%d", &N);

        heapOffset = heap;
        Trie * root = get();
        root->counter = 100;

        int ans = 0;
        for (int i = 0; i < N; ++i) {
            scanf("%s", sz);
            add(sz);
            ans += find(sz);
        }

        printf("Case #%d: %d\n", _T + 1, ans);
    }

    return 0;
}

#if defined _OJ_PROJECT
_END_PROBLEM
#endif // _OJ_PROJECT

// ================================================================================================
//  End of file.
// ================================================================================================

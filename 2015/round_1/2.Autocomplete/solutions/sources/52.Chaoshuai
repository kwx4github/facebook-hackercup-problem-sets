#include <cmath>
#include <cstdio>
#include <vector>
#include <climits>
#include <iostream>
#include <algorithm>
using namespace std;

const int MAXN = 100010, MAXM = 30, KIND = 26;
int m;
struct node {
  char *s;
  int prefix;
  bool isword;
  node *next[KIND];
  void init() {
    s = NULL;
    prefix = 0;
    isword = false;
    memset(next, 0, sizeof(next));
  }
} a[MAXN * MAXM], *root; //æ ¹

void insert(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    p->s = s + i;
    if (p->next[x] == NULL) {
      a[m].init();
      p->next[x] = &a[m++];
    }
    p = p->next[x];
    p->prefix++;
  }
  p->isword = true;
}

bool del(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return false;
    p = p->next[x];
  }
  if (p->isword)
    p->isword = false;
  else
    return false;
  return true;
}

bool search(node *root, char *s) {
  node *p = root;
  for (int i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return false;
    p = p->next[x];
  }
  return p->isword;
}

int count(node *root, char *s) {
  node *p = root;
  int i;
  for (i = 0; s[i]; i++) {
    int x = s[i] - 'a';
    if (p->next[x] == NULL)
      return -1;
    p = p->next[x];
    if (p->prefix == 1) {
      return i + 1;
    }
  }
  return i;
}

char buf[MAXN * MAXM];

int main() {
  int cases;
  scanf("%d", &cases);
  getchar();
  for (int T = 0; T < cases; ++T) {
    int n;
    scanf("%d", &n);
    m = 0;
    a[m].init();
    root = &a[m++];
    getchar();
    int ans = 0;
    for (int i = 0; i < n; ++i) {
      gets(buf);
      insert(root, buf);
      int tmp = count(root, buf);
      ans += tmp;
      // printf("%d\n", tmp);
    }
    printf("Case #%d: %d\n", T + 1, ans);
  }
  return 0;
}

#include <iostream>
#include <assert>
using namespace std;

void printSolution( unsigned int testCase, unsigned long long solution )
{
	cout << "Case #" << testCase << ": " << solution << endl;
}

class Node
{
private:
	short letter;
	unsigned int prefixLength;
	Node* children[26];
public:
	Node( short letter, unsigned int prefixLength ) : letter( letter ), depth( depth ), unique( true ) 
	{
		for ( int i = 0; i < 26; ++i )
		{
			children[i] = nullptr;
		}
	}

	~Node()
	{
		for ( int i = 0; i < 26; ++i )
		{
			if ( children[i] != nullptr )
			{
				delete leafs[i];
			}
		}
	}

	unsigned int insert( short* word, unsigned int length )
	{
	  	unsigned int d = prefixLength - 1;
		assert( letter == -1 || word[d] == letter );

	  	unsigned int lengthOfPrefix;

		// Expand the tree
		if ( length < prefixLength )
		{
			if ( children[ word[d] ] == nullptr )
			{
				children[ word[d] ] = new Node( word[d], prefixLength + 1 );
				lengthOfPrefix = prefixLength;

				children[ word[ d ] ]->insert( word, length );
			} else 
			{
				lengthOfPrefix = children[ word[ d ] ]->insert( word, length );
			}
		}

		return lengthOfPrefix;
	}
};

void solve( unsigned int testCase )
{
	unsigned int N;
	cin >> N;

	Node* root = new Node( -1, 1 );
	unsigned long long sum = 0;

	for ( unsigned int i = 0; i < N; ++i )
	{
	  	string w;
		cin >> w;

		int wSize = w.size();
		short letters[ wSize ];

		for ( int j = 0; j < wSize; ++j )
		{
			letters[ j ] = w.at( j ) - 'a';
		}

		sum += root->insert( letters, wSize );
	}
	
	delete root;

	printSolution( testCase, sum );
}

int main( int argc char** argv )
{
  	unsigned int T;
	cin >> T;

	for ( unsigned int i = 1; i <= T; ++i ) solve( i );

	return 0;
}

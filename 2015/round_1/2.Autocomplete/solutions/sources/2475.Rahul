#include <iostream>
#include <fstream>
#include <cstdlib>

using namespace std;

struct trie_node
{
    char val;
    trie_node *next[26];
};

trie_node *root;
ifstream fin;
ofstream fout;

long long num,test;


long long insert(char word[1000000])
{
    long long i=0,strokes=1;

    int insertions=0;

    trie_node *temp=root;

    int index=(int)word[i] - (int)('a');

    while(word[i]!='\0')
    {
        index=(int)word[i] - (int)('a');

        if(temp->next[index]==NULL)
        {
            insertions=1;

            trie_node *temp1=(trie_node *)malloc(sizeof(trie_node));
            temp1->val=word[i];

            for(int j=0;j<26;j++)
                temp1->next[j]=NULL;

            temp->next[index]=temp1;
            temp=temp1;
        }
        else
        {
            if(insertions==0)
                strokes++;

            temp=temp->next[index];
        }

        i++;
    }

    if(insertions==0)
        strokes=i;

    return strokes;
}

void delete_all(trie_node *p)
{
    int i;

    for (i= 0; i<26;i++)
    {
        if (p->next[i])
        {
            delete_all(p->next[i]);
            p->next[i]= NULL;
        }
    }
    free (p);
}

void delete_trie()
{
    if (root)
    {
        delete_all(root);
        free(root);
   }
}

int main()
{
    fin.open("input.txt");
    fout.open("output.txt");

    fin>>test;

    for(int k=1;k<=test;k++)
    {
        fin>>num;

        long long count=0;

        root=(trie_node *)malloc(sizeof(trie_node));

        for(int i=0;i<26;i++)
            root->next[i]=NULL;

        for(int i=0;i<num;i++)
        {
            char a[1000000];
            fin>>a;

            count=count+insert(a);
        }

        fout<<"Case #"<<k<<": "<<count<<endl;

        free (root);

        //delete_trie();
    }

    return 0;
}

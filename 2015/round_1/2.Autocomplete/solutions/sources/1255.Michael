/*
PROG: b
LANG: JAVA
*/
import java.util.*;
import java.io.*;
import com.googlecode.concurrenttrees.radix.*;
import com.googlecode.concurrenttrees.radix.node.concrete.*;
import com.google.common.collect.Iterables;

public class b {

  private void solve() throws IOException {
    int t = nextInt();       
    debug(t);

    for(int i = 1; i <= t; ++i) {
      long a = 0l;
      int n = nextInt(); 
      RadixTree<Integer> trie = new ConcurrentRadixTree<Integer>(new DefaultCharArrayNodeFactory());

      for(int j = 0; j < n; ++j) {
        String s = next(), r = s;
        for(int k = 1; k <= s.length(); ++k) {
          String sb = s.substring(0, k);
          if(Iterables.isEmpty(trie.getKeysStartingWith(sb))) {
            r = sb;
            break;
          }
        }
        a += r.length();
        trie.put(s, j);
      }
      pw.write("Case #" + i + ": " + a + "\n");
      System.out.print("Case #" + i + ": " + a + "\n");
    }
  }

  private int randInt(int min, int max) {
    Random rand = new Random();
    int random = rand.nextInt((max - min) + 1) + min;
    return random;
  }

  private void make() throws IOException{
    int lo = 97, hi = 122;
    PrintWriter big = new PrintWriter("b.in");

    int N = 1000000;
    big.write(N + "\n");
    for(int j = 0; j < N; ++j) {
      String s = "";
      for(int i = 0; i < 10; ++i) {
        s += (char) (randInt(lo, hi));
      }
      big.write(s + "\n");
    }
  }

  static void debug(Object...o) {
    System.err.println(Arrays.deepToString(o));
  }

  BufferedReader br;
  StringTokenizer st;
  PrintWriter pw; 

  String next() throws IOException {
    while (st == null || !st.hasMoreTokens()) {
      st = new StringTokenizer(br.readLine().trim());
    }
    return st.nextToken();
  }

  int nextInt() throws IOException {
    return Integer.parseInt(next());
  }

  double nextDouble() throws IOException {
    return Double.parseDouble(next());
  }

  long nextLong() throws IOException {
    return Long.parseLong(next());
  }

  private void run() throws IOException {
    br = new BufferedReader(new FileReader("b.txt"));
    pw = new PrintWriter("b.out");
    ////br = new BufferedReader(new InputStreamReader(System.in));
    solve();
    pw.close();
  }

  public static void main(String[] args) throws IOException {
    new b().run();
  }
}

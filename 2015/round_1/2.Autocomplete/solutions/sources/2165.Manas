using namespace std;
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
#include<limits>
#include<map>
#define LLU long long unsigned int
#define LLD long long double
#define FOR(i,N) for(int i=0;i<(N);i++)
int n,ans;
struct node
{
    bool leaf;
    int freq;
    node* kid[26];
}*root;
void init()
{
    root=new node();
    root->leaf=false;
    root->freq=0;
    FOR(i,26)
    {
        root->kid[i]=NULL;
    }
    ans=0;
}
void addword(node*root,string s)
{
    if(s=="")
        return;
    FOR(i,s.length())
    {
        int id=s[i]-'a';
        if(!root->kid[id])
        {
            root->kid[id]=new node();
            root->kid[id]->leaf=false;
            root->kid[id]->freq=1;
            FOR(j,26)
            root->kid[id]->kid[j]=NULL;
        }
        else
            root->kid[id]->freq++;
        if(i+1==s.length())
            root->kid[id]->leaf=true;
        root=root->kid[id];
    }
}
int solve(node* root,string s)
{
    int ret=0,c,lvl=1;
    bool flag=false;
    FOR(i,s.length())
    {
        int id=s[i]-'a';c=0;
        if(root->kid[id]->freq>1)
        {
            lvl=i+1;
            flag=true;
        }
        //cout<<i<<" "<<lvl<<" " <<root->kid[id]->freq<<endl;
        root=root->kid[id];
    }
    if(flag)
    return (lvl+1<=s.length())?lvl+1:s.length();
    else
        return 1;
}
int main()
{
    int t,cas=1;
    cin>>t;
    while(t--)
    {
        init();
        cin>>n;
        FOR(i,n)
        {
            string s;
            cin>>s;
            addword(root,s);
            ans+=solve(root,s);
            //del(root);
            //delete root;
            //cout<<solve(root,s)<<endl;
        }
        cout<<"Case #"<<cas++<<": "<<ans<<endl;
    }
    return 0;
}

//
//  main.cpp
//  hacker_cup_3
//
//  Created by hijackyan on 1/17/15.
//  Copyright (c) 2015 haker cup. All rights reserved.
//

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct node
{
    node* next[26];
    node()
    {
        for(int i = 0; i < 26; i++)
            next[i] = NULL;
    }
};
class tree
{
public:
    node* head;
    int length;
    tree()
    {
        length = 0;
        head = new node();
    }
    void add(string word)
    {
        node * p = head;
        int i = 0;
        while(i < word.size())
        {
            length++;
            if(p->next[word[i]-'a'] == NULL)
            {
                p -> next[word[i]-'a'] = new node();
                p = p -> next[word[i++]-'a'];
                break;
            }
            else
            {
                p = p->next[word[i++]-'a'];
            }
        }
        while(i < word.size())
        {
            p->next[word[i]-'a'] = new node();
            p = p -> next[word[i++]-'a'];
        }
    }
};

int main(int argc, const char * argv[]) {
    int n,ca = 1, m;
    cin>>n;
    while(n--)
    {
        cout<<"Case #"<<ca++<<": ";
        cin>>m;
        string word;
        tree t;
        for(int i = 0; i < m; i++)
        {
            cin>>word;
            t.add(word);
        }
        cout<<t.length<<endl;
    }
}


#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

class Solver
{
protected:
	virtual void solveTest(int test)
	{
	}
public:
	Solver()
	{

	}
	virtual ~Solver(){}

	void solve()
	{
		int T;
		scanf("%d",&T);
		for(int i=1;i<=T;i++)
		{
			cerr << i <<endl;
			solveTest(i);
		}
	}
};

class In
{
public:
	int nextInt() const
	{
		int t;
		scanf("%d",&t);
		return t;
	}
	string next() const
	{
		string s;
		cin>>s;
		return s;
	}
}in;

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const int dx[4]={-1,0,1,0};
	const int dy[4]={0,1,0,-1};

class Autocomplete:public Solver
{
	class Node
	{
		Node* to[26];
	public:
		Node()
		{
			REP(i,26)
				to[i]=NULL;
		}
		Node* operator[](char c) const
		{
			return to[c-'a'];
		}
		Node*& operator[](char c)
		{
			return to[c-'a'];
		}
	};
	void solveTest(int test)
	{
		int n=in.nextInt();
		int res=0;
		Node* root=new Node();
		REP(i,n)
		{
			Node* cur=root;
			string s=in.next();
			bool is_unique=false;
			for(int i=0;i<(int)s.length();i++)
			{
				if(!is_unique)
					res++;
				if((*cur)[s[i]]==NULL)
				{
					is_unique=true;
					(*cur)[s[i]]=new Node();
				}
				cur=(*cur)[s[i]];
			}
		}
		printf("Case #%d: %d\n",test, res);
		wipe(root);
	}

	void wipe(Node* cur)
	{
		if(cur)
		{
			for(char i='a';i<='z';i++)
				wipe((*cur)[i]);
			delete cur;
		}
	}

public:
	static void init()
	{

	}
};

int main()
{
	Autocomplete().solve();
}

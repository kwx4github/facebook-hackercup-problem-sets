#include<iostream>
#include<cstring>
using namespace std;
#define MAX 2001
#define MOD 1000000007
#define DEBUG false
#define trace(v) if(DEBUG) { cout<<v<<endl; }
#define trace2(v,w) if(DEBUG) { cout<<v<<"#"<<w<<endl; }
class Node
{
public:
	char ch;
	Node* child[26];
	bool isWord;
	Node()
	{
		ch=' ';
		isWord=false;
		for(int i=0;i<26;i++)
			child[i] = NULL;
	}
};


class Trie
{
	public:
	Node* root;

	Trie()
	{
		trace("Creating trie");
		root = new Node();
		trace("Done creating trie");
	}
	void add(string s)
	{
		trace("add")
		Node* curr = root;
		if(s.length()==0)
		{
			curr->isWord=true;
			return;
		}

		for ( int i = 0; i < s.length(); i++ ) 
		{
			Node* c = curr->child[s[i]-'a'];
			if(c)
			{
				curr = c;
			}
			else
			{
				Node* tmp = new Node();
				tmp->ch = s[i];
				curr->child[s[i]-'a']=tmp;
				curr=tmp;
			}
			if(i==s.length()-1)
				curr->isWord=true;
		}
	}

	int search(string s)
	{
		trace(s);
		Node* curr = root;
		int l = 0;
		while(curr!=NULL && l < s.length())
		{
			if(curr->child[s[l]-'a'])
			{
				if(curr->child[s[l]-'a']!=NULL)
				{
					trace("curr is not null")
				}
				else
				{
					trace("curr is null")
				}
				curr=curr->child[s[l]-'a'];
				l++;
			}
			else
			{
				trace2(l,s[l])
				break;
			}

		}
		if(l==s.length())
			return l;
		else
			return (l+1);
	}
};
int main()
{
	int t,n,sum,i,k;
	string s;
	
	cin>>t;
	for(k=1;k<=t;k++)
	{
		Trie* tr = new Trie();
		sum=0;
		cin>>n;
		for(i=0;i<n;i++)
		{
			cin>>s;
			sum+=tr->search(s);
			tr->add(s);
		}
		cout<<"Case #"<<k<<": "<<sum<<endl;
	}
	if(DEBUG)
	{	Trie* trie = new Trie(); 
		trie->add("hello"); 
		trace(trie->root->ch)
		trace(trie->root->child['h'-'a']->ch)
		trace(trie->root->child['h'-'a']->child['e'-'a']->ch)
		trace(trie->root->child['h'-'a']->child['e'-'a']->child['l'-'a']->ch)
		trace(trie->root->child['h'-'a']->child['e'-'a']->child['l'-'a']->child['l'-'a']->ch)
		trace(trie->root->child['h'-'a']->child['e'-'a']->child['l'-'a']->child['l'-'a']->child['o'-'a']->ch)
		trace(trie->root->child['h'-'a']->child['e'-'a']->child['l'-'a']->child['l'-'a']->isWord)

		cout<<trie->search("hel")<<endl;
	}
}

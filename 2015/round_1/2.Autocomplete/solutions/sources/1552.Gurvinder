/*Author :rednivrug15 */
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair

#define rep(i,n) for(int i=0; i<n ; i++)
using namespace std;
//#define long double double

#define REP(i,n) for (int i = 1; i <= n; i++)
#define ll long long
#define mod 1000000007
const int base = 1000100000;
const int base_digits = 9;
clock_t start_time,end_time;
inline float ellapse(){return (clock()-start_time)*1.0/CLOCKS_PER_SEC;}

long long power(ll a,ll b,ll m)
{
    ll ret=1;
    while(b)
    {
        if(b%2==1)
           ret=(ret*a)%m;
        a=(a*a)%m;
        b/=2;
    }
    return ret;
}

long long gcd(long long a,long long b)
{
    return b==0?a:gcd(b,a%b);
}

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

char str[1000001];

typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

int answerforeachstring;

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;
        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}


void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    bool flag=0;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            flag=1;
            pCrawl->children[index] = getNode();
        }

        else if(flag==0 && level<length-1)
        {
            answerforeachstring+=1;
        }

        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
}


int main()
{
    freopen("autocomplete.txt","r",stdin);
    freopen("op.txt","w",stdout);

    int testcases;
    cin>>testcases;

    for(int tt=1; tt<=testcases; tt++)
    {
        int N;
        scanf("%d",&N);

        trie_t trie;
        initialize(&trie);

        long long total=0;

        for(int i=0; i<N; i++)
        {
            scanf("%s",str);
            answerforeachstring=1;
            insert(&trie,str);
            total=total+answerforeachstring;
        }
        printf("Case #%d: %lld\n",tt,total);
    }

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((long)c - (long)'a')
typedef struct trie_node trie_node_t;
struct trie_node
{
    long value;
    trie_node_t *children[ALPHABET_SIZE];
};
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    long count;
};
trie_node_t *getNode(void)
{
    trie_node_t *pNode=NULL;
 
    pNode=(trie_node_t *)malloc(sizeof(trie_node_t));
    if(pNode)
    {
        long i;
        pNode->value=0;
        for(i=0;i<ALPHABET_SIZE;i++)
        {
            pNode->children[i]=NULL;
        }
    }
    return pNode;
}
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
long insert(trie_t *pTrie, char key[])
{
    long level;
    long length = strlen(key);
    long index;
    long i;
    i=length-1;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl=pTrie->root;
 
    for(level=0;level<length;level++)
    {
        index = CHAR_TO_INDEX(key[level]);
        if(!pCrawl->children[index])
        {
            pCrawl->children[index]=getNode();
           if(i==length-1)
				i=level;
        }
        pCrawl=pCrawl->children[index];
    }
    pCrawl->value=pTrie->count;
    return i+1;
}
char keys[1000002];
int main()
{
	freopen("fin.txt","r",stdin);
	freopen("fout.txt","w",stdout);
    long i,j,k,t,p;
    scanf("%ld",&t);
    for(p=1;p<=t;p++) 
	{
    	k=0;
    	trie_t trie;
    	initialize(&trie);
    	scanf("%ld",&j);
    	for(i=0;i<j;i++)
    	{
    		scanf("%s",keys);
			k+=insert(&trie, keys);
		}
		printf("Case #%ld: %ld\n",p,k);
    }
    return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>
#include <queue>

using namespace std;
string data;

struct node{

  int counter;
  struct node *next[26];
  node(){
    
    counter = 0;
    for(int i=0;i<26;i++) this->next[i] = NULL;
    
  }
  void insert(int index){
  
    if(index < data.size()){
      int tmp = data[index]-'a';
      if(this->next[tmp] == NULL)
	this->next[tmp] = new node();
      this->next[tmp]->counter++;
      this->next[tmp]->insert(index+1);
    }
  }
  
  int query(int index){
    
    if(index < data.size()){
      int tmp = data[index] - 'a';
      
      if(this->next[tmp]->counter == 1)
	return index+1;
      
      return this->next[data[index]-'a']->query(index+1);
    }
    return index;
    
  } 
  
};

int main(){
 
	int t, T;
	ifstream fin;
  	ofstream fout;
  	fin.open("autocomplete.txt", ios_base::in);
 	fout.open("out", ios_base::out);
	
  	fin>>T;
  	for(t=0;t<T;t++){
	  
	  int n;
	  fin>>n;
	  data.clear();
	  int i;
	  node *trie = new node();
	  long long int res = 0;
	  for(i=0;i<n;i++){
	    fin>>data;
	    trie->insert(0);
	    res = res + trie->query(0);
	  }
	
	  fout<<"Case #"<<t+1<<": "<<res<<endl;
	  
  	}
  	fin.close();
  	fout.close();
 
  return 0;
}

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

struct Node {
    char ch;
    bool bEnd;
    vector<Node*> children;     // most 26
    Node():ch(0),bEnd(false) {
        children.resize(26);
    }
};

class Trie {
public:
    // return common prefix length
    int insert(const string &word) {
        int prefixNum = 0;
        Node *root = &m_root;
        for (int i = 0; i < word.size(); ++i) {
            int ci = word[i] - 'a';
            if (root->children[ci]) {
                ++prefixNum;
                root = root->children[ci];
                if (i+1 == word.size()) root->bEnd = true;
            } else {
                Node *newNode = new Node();
                newNode->ch = word[i];
                if (i+1 == word.size()) newNode->bEnd = true;
                root->children[ci] = newNode;
                root = root->children[ci];
            }
        }
        return min(prefixNum + 1, static_cast<int>(word.size()));
    }
private:
    Node m_root;
};

int64_t Calc(vector<string> &words) {
    int64_t ret = 0;
    Trie ti;
    for (auto &w : words) {
        ret += ti.insert(w);
        // cout << w << " ";
    }
    return ret;
}

int main(int argc, char *argv[])
{
    int64_t T, N;
    cin >> T;
    for (int idx = 0; idx < T; ++idx) {
        cin >> N;
        vector<string> words(N);
        for (int wIdx = 0; wIdx < N; ++wIdx) cin >> words[wIdx];
        cout << "Case #" << idx + 1 << ": " << Calc(words) << endl; 
    }

    return 0;
}

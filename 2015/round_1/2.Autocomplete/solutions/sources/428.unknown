// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

const int MAX = 1000100;
int next_node[MAX][26];
int prefix[MAX];
bool match[MAX];
int nid;
int new_node() {
    REP(j, 26) next_node[nid][j] = -1;
    match[nid] = false;
    prefix[nid] = 0;
    return nid++;
}
// int dfs(const int u) {
//     assert(u != -1);
//     assert(u >= 0 && u < nid);
//     prefix[u] = 0;
//     assert(prefix[u] == 0);
//     if(match[u]) prefix[u] ++;
//     REP(i, 26) {
//         if(next_node[u][i] != -1) {
//             prefix[u] += dfs(next_node[u][i]);
//         }
//     }
//     return prefix[u];
// }
int main(){
    iostream_init();
    int T;
    cin >> T;
    for(int casenum = 1; casenum <= T; casenum++) {
        nid = 0;
        cout << "Case #" << casenum << ": ";
        int N;
        cin >> N;
        vector<string> words(N);
        REP(i, N) cin >> words[i];

        const int root = new_node();
        assert(root == 0);
        int ans = 0;

        REP(i, N) {
            int p = root;
            prefix[root]++;

            for(char c : words[i]) {
                int k = c - 'a';
                if(next_node[p][k] == -1) {
                    next_node[p][k] = new_node();
                }
                p = next_node[p][k];
                prefix[p]++;
            }
            match[p] = true;

            p = root;
            REP(j, words[i].size()) {
                char c = words[i][j];
                int k = c - 'a';
                p = next_node[p][k];
                assert(p != -1);
                if(prefix[p] == 1 || j == words[i].size() - 1) {
                    ans += j + 1;
                    break;
                }
            }
        }

        cout << ans << endl;
    }
    return 0;
}

/* vim:set foldmethod=marker: */


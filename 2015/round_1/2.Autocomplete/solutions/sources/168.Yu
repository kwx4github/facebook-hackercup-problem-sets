#include<iostream>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include<string>
#include<random>
#include<fstream>
#include<cmath>
#include<cctype>
#include<functional>
#include<iomanip>

using namespace std;

#define input cin
#define output cout


struct TrieNode
{
	TrieNode * children[26];
        
	TrieNode()
	{	
		for(int i=0;i<26;i++)
		{
			children[i]=NULL;
		}
     }   
};
    
int insert(TrieNode *head, string &s)
{
	int res=0;
	int i=0;
	while(i<s.size())
	{
		if(head->children[s[i]-'a']==NULL) 
		{
			head->children[s[i]-'a']=new TrieNode();
			if(res==0) res=i+1;
        }
		
		head=head->children[s[i]-'a'];
		i++;
    }
    
	if(res==0) return s.size();

    return res;
}

//void freeTrie(TrieNode *head)
//{
//	if(head==NULL) return;
//
//	for(int i=0;i<26;i++)
//	{
//		if(head->children[i])
//		{
//			freeTrie(head->children[i]);
//		}
//	}
//	
//	delete head;
//}

int main()
{
	ifstream input("C:\\Test\\autocomplete.txt");
    ofstream output("C:\\Test\\autocomplete_output.txt",ios::trunc);
	int testN;
	input>>testN;
	for(int caseN=1;caseN<=testN;caseN++)
	{
		string s;
		int N,count=0;
		TrieNode *head=new TrieNode();

		input>>N;
		for(int i=0;i<N;i++)
		{	
			input>>s;
			count+=insert(head,s);
		}
		output<<"Case #"<<caseN<<": "<<count<<endl;

		//freeTrie(head);
		
	}
	

	return 0;
}






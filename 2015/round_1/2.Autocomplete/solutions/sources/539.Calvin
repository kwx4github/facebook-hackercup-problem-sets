#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef stringstream ss;
#define mp make_pair
#define pb push_back
#define eb emplace_back
#define em emplace
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define mset(t,v) memset((t),(v),sizeof(t))
#define print(a) cout << #a << ": " << a << endl;
#define print_arr(a,n) rep(_##i, n) cout << #a << "[" << _##i << "]: " << a[_##i] << endl
#define vt(args...) vector<tuple<args>>
#define pq(args...) priority_queue<tuple<args>,vector<tuple<args>>,greater<tuple<args>>>
#define rep(i,n) for(int i=0,_##i=(n);i<_##i;++i)
#define repr(i,n) for(int i=(n);--i>=0;)
#define rep2(i,l,r) for(int i=(l),_##i=(r);i<_##i;++i)
#define repr2(i,l,r) for(int i=(r),_##i=(l);--i>=_##i;)

typedef long long ll;
const ll X = 91, Y = 2015, Z = 1337, P = 1000000009;
set<ll> hashes[3];
bool is_in(int i, ll hash){
    return hashes[i].find(hash) != hashes[i].end();
}
void add(int i, ll hash){
    hashes[i].insert(hash);
}
void solve_case(int t){
    rep(i,3) hashes[i].clear();
    cout << "Case #" << t << ": ";
    // $$$
    string s;
    int N;
    cin >> N;
    rep(i,3) add(i,0LL);
    
    int ans = 0;
    rep(i, N){
        ll hx = 0, hy = 0, hz = 0;
        cin >> s;
        bool old = true;
        rep(j, s.length()){
            if (!is_in(0, hx) || !is_in(1,hy) || !is_in(2, hz)){
                old = false;
            }
            if (old) ans++;
            add(0,hx);
            add(1,hy);
            add(2,hz);
            ll c = s[j] - 'a' + 1;
            hx = (X * hx + c) %P;
            hy = (Y * hy + c) % P;
            hz = (Z * hz + c) % P;
        }
        add(0,hx);
        add(1,hy);
        add(2,hz);
    }
    cout << ans << "\n";
}

int main(){
    int num_cases;
    cin >> num_cases;
    rep(i,num_cases) solve_case(i+1);
    return 0;
}

#include <stdio.h>
#include <vector>
#include <string.h>
#include <assert.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

const int ALP = 26;


const int N = 2e6;

struct node {
	bool term;
	int go[ALP];
	node(){
		term = false;
		for (int i = 0; i < ALP; ++i)
			go[i] = -1;
	}
};

node mem[N];
int sz = 0;

int getalp(char c) {
	return c - 'a';
}

int add(char* s) {
	int siz = strlen(s);
	int q = 0;
	int res = -1;
	for (int i = 0; i < siz; ++i) {
		// printf("%c ", s[i]);
		if (mem[q].go[getalp(s[i])] == -1) {
			mem[q].go[getalp(s[i])] = sz++;
			if (res == -1)
				res = i + 1;
			// printf("+");
		}
		q = mem[q].go[getalp(s[i])];
		// printf("\n");
	}
	// printf("\n\n\n %d\n", res);

	if (res == -1)
		res = siz;
	
	mem[q].term = true;
	return res;
}

void clear() {
	for (int i = 0; i < N; ++i)
		mem[i] = node();

	sz = 1;
	mem[0].term = true;
	
	return;
}

int t;

int main() {
	scanf("%d", &t);
	for (int q = 0; q < t; ++q) {
		clear();
		int n;
		scanf("%d", &n);
		scanf("\n");
		int ans = 0;
		for (int i = 0; i < n; ++i) {
			char s[N];
			gets(s);
			ans += add(s);
		}
		printf("Case #%d: %d\n", q + 1, ans);

	}

	return 0;
}


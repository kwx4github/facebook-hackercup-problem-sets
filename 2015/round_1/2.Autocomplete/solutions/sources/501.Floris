__author__ = 'fkint'
import sys

lines = sys.stdin.readlines()


def read_next_line():
    read_next_line.current_index += 1
    return lines[read_next_line.current_index - 1].strip()


read_next_line.current_index = 0


class Node:
    def __init__(self):
        self.children = dict()


def add_to_prefix_tree(node, s):
    current_node = node
    current_index = 0
    while current_index < len(s) and s[current_index] in current_node.children:
        current_node = current_node.children[s[current_index]]
        current_index += 1
    while current_index < len(s):
        current_node.children[s[current_index]] = Node()
        current_node = current_node.children[s[current_index]]
        current_index += 1


def find_longest_prefix(node, s):
    current_node = node
    current_index = 0
    while current_index < len(s) and s[current_index] in current_node.children:
        current_node = current_node.children[s[current_index]]
        current_index += 1
    return current_index


T = int(read_next_line())
for current_case in range(1, T + 1):
    N = int(read_next_line())
    root = Node()
    total = 0
    for i in range(N):
        s = read_next_line()
        length = find_longest_prefix(root, s)
        total += min(len(s), length + 1)
        add_to_prefix_tree(root, s)
    print("Case #" + str(current_case) + ": " + str(total))

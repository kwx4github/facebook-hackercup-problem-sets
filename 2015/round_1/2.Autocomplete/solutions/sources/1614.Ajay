#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX_N 1000001

struct TriePayLoad {
	char* meaning;
};

struct TrieNode {
	char edge[26];
	struct TrieNode* children[26];
};

int getIndex(char c) {
	return tolower(c) - 'a';
}

struct TrieNode* getNewTrieNode() {
	struct TrieNode* p = malloc(sizeof(struct TrieNode));
	memset(p->edge, '$', 26);
	int i;
	for (i=0;i<26;i++) {
		p->children[i] = NULL;
	}
	return p;
}

int addToTrie(struct TrieNode** root, char* word) {
	int wlen = strlen(word), i=0, indx= 0, j;
	struct TrieNode* p = *root; 
	struct TrieNode* newTrieNode; 
	while(i < wlen) {
		indx = getIndex(word[i]);
		if (p->edge[indx] == tolower(word[i])) {
			p = p->children[indx];
		} else {
			break;
		}
		i++;
	}
	j = (i < wlen) ? i+1 : i;
	if (i < wlen) {
		while (i < wlen) {
			indx = getIndex(word[i]);
			p->edge[indx] = tolower(word[i]);
			newTrieNode = getNewTrieNode();
			p->children[indx] = newTrieNode;
			p = newTrieNode;
			i++;
		}
	}
	return j;
}



int main() {
	struct TrieNode* root;
	int tc, i, j, n, tmp;
	long long int sum;
	char *str = (char*)malloc(sizeof(char)*MAX_N);
	scanf("%d", &tc);
	 i = 0;
	while (i++ < tc) { 
		root = getNewTrieNode();
		scanf("%d", &n);
		j = 0;
		sum = 0;
		while (j++ < n) {
			scanf("%s", str);
			sum+=addToTrie(&root, str);
		}
		printf("Case #%d: %lld\n", i, sum);
		free(root);
	}
	return 0;
}

// codersan
#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define init(a,b) memset(a,b,sizeof(a));
#define si(n) scanf("%d",&n);
#define sld(n) scanf("%lld",&n);
#define pi(n) printf("%d\n",n);
#define pld(n) printf("%lld\n",n);
#define pnl() printf("\n");
#define tr(container,it) for(typeof(container.begin()) it=container.begin() ; it!=container.end() ; it++)
#define sortv(a) sort(a.begin(),a.end());
#define go()  int t; cin>>t; while(t--)
#define forl(i,a,b) for(int i=a;i<b;i++)
#define rofl(i,a,b) for(int i=a;i>b;i--)
#define LL long long int
using namespace std;
typedef vector<int> vi;
typedef pair<int , int> pii;
typedef vector<pii> vpii;
inline LL gcd(LL a, LL b){ LL temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
inline LL fast(LL a, LL b)
{
    LL prod=1;
    while(b)
    {
        if(b&1)prod=(prod*a);
        a=(a*a),b/=2;
    }
    return prod;
}
//Taken from geeksforgeeks
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
long long int cnt=0;
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;
    bool ins=false;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            if(!ins)
            {ins=true,cnt+=(level+1);}
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }
    if(!ins)
        cnt+=(length);
    // mark last node as leaf
    pCrawl->value = pTrie->count;
}

// Driver
int main()
{

    #ifndef ONLINE_JUDGE
       freopen("C:\\Users\\codersan\\Desktop\\CC\\autocomplete.txt", "r", stdin);
       freopen("C:\\Users\\codersan\\Desktop\\CC\\out.txt", "w", stdout);
    #endif
    trie_t trie;

    int t;
    scanf("%d", &t);
    for (int tt=1;tt<=t;tt++)
    {
        initialize(&trie);
        cnt=0;
        int n;
        cin>>n;
        char s[1000005];
        for(int i = 0; i<n; i++)
        {
            cin>>s;
            insert(&trie,s);

        }
        printf("Case #%d: %lld\n",tt,cnt);

    }

    return 0;
}

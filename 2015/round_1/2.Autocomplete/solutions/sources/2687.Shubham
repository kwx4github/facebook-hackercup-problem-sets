#include<bits/stdc++.h>
bool flag;
typedef struct trie_node trieNode;
struct trie_node
{
    long long value;
    trieNode *children[26];
};
typedef struct trie trieT;
struct trie
{
    trieNode *root;
    long long count;
};
trieNode *createNode(void)
{
    trieNode *NODE = NULL;
    NODE=(trieNode*)malloc(sizeof(trieNode));
    if(NODE)
    {
        long i;
        NODE->value=0;
        for(i= 0;i<26;i++)
             NODE->children[i]=NULL;
    }
    return NODE;
}
void initialize(trieT *TRIE)
{
    TRIE->root =createNode();
    TRIE->count = 0;
}
long long insert(trieT *TRIE,char arr[])
{
    long long level,index,value1=0,length=strlen(arr);
    trieNode *Node;
    TRIE->count++;
    Node=TRIE->root;
    flag=0;
    for(level=0;level<length;level++)
    {
        index =(long)(arr[level])-long('a');
        if(!Node->children[index] )
        {
            Node->children[index]=createNode();
	    if(flag==0)
		value1++;
	    flag=1;
        }
	if(flag==0)value1++;
        Node=Node->children[index];
    }
    Node->value=TRIE->count;
    return value1;
}
int main()
{
    long t,n,counter=0,i,j;
    long long temp;
    scanf("%ld",&t);
    while(t--)
    {
	temp=0;
	scanf("%ld",&n);
	char str[1000005];
    	trieT trie;
        initialize(&trie);
	for(i=0;i<n;i++)
	{
	      	scanf("%s",str);
              	temp=temp+insert(&trie,str);
	}
	counter++;
	printf("Case #%ld: %lld\n",counter,temp);
    }
    return 0;
}

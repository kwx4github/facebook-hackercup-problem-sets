from collections import namedtuple
from sys import stdin

class Trie:
    def __init__(self, children, is_word, prefix_of):
        self.children = children
        self.is_word = is_word
        self.prefix_of = prefix_of

    def __repr__(self):
        return "({}, {}) {}".format(self.is_word, self.prefix_of, str(self.children))

    def add_word(self, word):
        current_node = self
        current_node.prefix_of += 1
        for letter in word:
            current_node = current_node.children.setdefault(letter, Trie(dict(), False, 0))
            current_node.prefix_of += 1

        current_node.is_word = True

    def max_char(self, word):
        current_node = self
        for (i, letter) in enumerate(word):
            current_node = current_node.children[letter]
            if current_node.prefix_of == 1:
                return i+1
        return len(word)


t = int(stdin.readline())
for i in range(t):
    trie = Trie(dict(), False, 0)
    n = int(stdin.readline())
    accum = 0
    for j in range(n):
        word = stdin.readline().rstrip('\n')
        trie.add_word(word)
        accum += trie.max_char(word)
    print("Case #{}: {}".format(i+1, accum))

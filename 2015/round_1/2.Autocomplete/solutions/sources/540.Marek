/* <<< Marek Sommer >>> */


/* ====== HEADERS ====== */

#ifdef ONLINE_JUDGE
	#define MINIMAL
	#define NDEBUG
#endif

#include <bits/stdc++.h>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cassert>

#ifdef MINIMAL
	#define err(a) ;
	#define ASSERT(a) ;
#else
	void err(const char *format, ...)
	{
		va_list valist;
		va_start(valist, format);
		int ret = vfprintf(stderr, format, valist);
		va_end(valist);
	} 
	#define ASSERT(a) a
#endif

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;

char *_buffer = nullptr;
inline void make_buf(int a) { _buffer = new char[a]; }

#define TOSTRING_INNER(x) #x
#define TOSTRING(x) TOSTRING_INNER(x)

#ifndef PRECISION
	#define PRECISION 15
#endif
#define FLOAT_PRECISION "%." TOSTRING(PRECISION) "f"
#define DOUBLE_PRECISION "%." TOSTRING(PRECISION) "f"

inline void assert_buffer() { ASSERT( if(_buffer == nullptr) err("Use make_buf(int buffer_size); at the beginning\n"); ) }

inline void make(int &a) { if(scanf("%d", &a)); }
inline void make(float &a) { if(scanf("%f", &a)); }
inline void make(double &a) { if(scanf("%lf", &a)); }
inline void make(char *a) { if(scanf("%s", a)); }
inline void make(string &a) { assert_buffer(); if(scanf("%s", _buffer)); a = _buffer; }
inline void make(char &a) { if(scanf(" %c", &a)); }
inline void makec(char &a) { if(scanf("%c", &a)); }
#ifdef ONLINE_JUDGE
	inline void make(ll &a) { if(scanf("%I64d", &a)); }
	inline void make(ull &a) { if(scanf("%I64u", &a)); }
	inline void make(long double &a) { double _a; if(scanf("%lf", &_a)); a = _a; }
#else // NOT ONLINE_JUDGE
	inline void make(ll &a) { if(scanf("%lld", &a)); }
	inline void make(ull &a) { if(scanf("%llu", &a)); }
	inline void make(long double &a) { if(scanf("%Lf", &a)); }
#endif
template<typename A>
inline void maketab(A *tab, int size) { for(int i = 0; i < size; i++) make(tab[i]); }
template<typename A>
inline void maketab(vector<A> &v, int size) { typedef typename vector<A>::iterator iter; v.resize(size); for(iter i = v.begin(); i != v.end(); i++) make(*i); }

template<typename A, typename B>
inline void make(A &a, B &b) { make(a); make(b); }
template<typename A, typename B, typename C>
inline void make(A &a, B &b, C &c) { make(a); make(b); make(c); }
template<typename A, typename B, typename C, typename D>
inline void make(A &a, B &b, C &c, D &d) { make(a); make(b); make(c); make(d); }
template<typename A, typename B, typename C, typename D, typename E>
inline void make(A &a, B &b, C &c, D &d, E &e) { make(a); make(b); make(c); make(d); make(e); }

bool line(char *s) { return scanf(" %[^\n]\n", s) != EOF; }
bool line(string &s) { assert_buffer(); bool ret = line(_buffer); s = _buffer; return ret; }
bool wline(char *s) { char c; int i = 0; while(scanf("%c", &c) != EOF) { if(c == '\n') { s[i] = 0; return true; } s[i++] = c; } s[i] = 0; return false; }
bool wline(string &s) { assert_buffer(); bool ret = wline(_buffer); s = _buffer; return ret; }

// ====== OUTPUT ======

#define MAKE_OUT(arg_type, format, args...) \
inline void out(arg_type) { printf(format, args); }\
inline void outn(arg_type) { printf(format "\n", args); }\
inline void outs(arg_type) { printf(format " ", args); }

inline void outn() { printf("\n"); }
inline void outs() { printf(" "); }

MAKE_OUT(unsigned int a, "%u", a);
MAKE_OUT(int a, "%d", a);
MAKE_OUT(float a, FLOAT_PRECISION, a);
MAKE_OUT(double a, DOUBLE_PRECISION, a);
MAKE_OUT(long double a, DOUBLE_PRECISION, (double) a);
MAKE_OUT(const char *a, "%s", a);
MAKE_OUT(const string &a, "%s", a.c_str());
MAKE_OUT(char c, "%c", c);
typedef pair<int, int> pair_int_int;
MAKE_OUT(const pair_int_int &p, "%d %d", p.first, p.second);
#ifdef ONLINE_JUDGE
	MAKE_OUT(ll a, "%I64d", a);
	MAKE_OUT(ull a, "%I64u", a);
#else // NOT ONLINE_JUDGE
	MAKE_OUT(ll a, "%lld", a);
	MAKE_OUT(ull a, "%llu", a);
	MAKE_OUT(size_t a, "%zu", a);
#endif

template<typename T, typename A> inline void out(const vector<T, A> &v)
{
	auto i = v.begin();
	if(i == v.end())
	{
		outn();
		return;
	}
	for(; i + 1 != v.end(); i++)
		outs(*i);
	outn(*i);
}
template<typename T, typename A> inline void outs(const vector<T, A> &v)
{
	auto i = v.begin();
	if(i == v.end())
	{
		outn();
		return;
	}
	for(; i + 1 != v.end(); i++)
		out(*i), out(", ");
	outn(*i);
}
template<typename T, typename A> inline void outn(const vector<T, A> &v)
{
	for(auto i = v.begin(); i != v.end(); i++)
		outn(*i);
}

#define wtf(x) { outs("LINE"); out(__LINE__ - _file_beginning); outs(":"); outs(#x); outs("="); outn(x); }

#ifdef ONLINE_JUDGE
	#define M_PI (3.14159265358979323846l)
#else // NOT ONLINE_JUDGE
#endif

#define ter(a) { out(a); exit(0); }
#define tern(a) { outn(a); exit(0); }
#define ters(a) { outs(a); exit(0); }

/* ====== CODE ====== */

const int _file_beginning = 158;
int nowa;

struct trie
{
	map<char, trie*> m;
	int ile;
	bool nowe;

	trie() : ile(0) {}

	trie * getL(char c)
	{
		auto i = m.find(c);
		if(i == m.end())
		{
			nowe = true;
			nowa = true;
			return m[c] = new trie();
		}
		nowe = false;
		return i->second;
	}

	int dodaj(const char * s)
	{
		if(*s == 0)
			return 0;
		auto t = getL(*s);
		int x = nowe ? 0 : 1;
		int y = t->dodaj(s + 1);
		return x + y;
	}
};

void przyp()
{
	trie t;
	int n;
	make(n);
	ll wyn = 0ll;
	for(int i = 0; i < n; i++)
	{
		string s;
		make(s);
		nowa = 0;
		int x = t.dodaj(s.c_str());
		x += nowa;

		wyn += x;
	}
	outn(wyn);
}

int main()
{
	make_buf(1000 * 1000 + 100);
	int t;
	scanf("%d", &t);
	for(int i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		przyp();
	}
	return 0;
}

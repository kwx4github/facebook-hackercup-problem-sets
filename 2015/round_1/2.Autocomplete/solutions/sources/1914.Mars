// mars.ma
#include <iostream>
#include <vector>
#include <string>
#include <map>

using namespace std;

int main(void)
{
  int testcase;  cin >> testcase;
  for (int tc = 0; tc < testcase; ++tc) {
    int N;  cin >> N;
    int result = 0;
    vector<map<char, int> > dict(1);
    auto empty(dict[0]);
    for (int n = 0; n < N; ++n) {
      string word;  cin >> word;
      int wordSz = word.length();
      int sub = 0;
      for (int idx = 0, cursor = 0; idx < wordSz; ++idx) {
        sub++;
        const auto& node = dict[cursor];
        const auto it = node.find(word[idx]);
        if (node.end() == it) {
          break;
        } else {
          cursor = it->second;
        }
      }

      result += sub;
      for (int idx = 0, cursor = 0; idx < wordSz; ++idx) {
        auto& node = dict[cursor];
        const auto it = node.find(word[idx]);
        if (node.end() == it) {
          cursor = node[word[idx]] = dict.size();
          dict.push_back(empty);
        } else {
          cursor = it->second;
        }
      }
    }

    cout << "Case #" << tc+1 << ": " << result << endl;
  }

  return 0;
}


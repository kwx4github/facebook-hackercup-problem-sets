import java.awt.*;
import java.awt.geom.*;
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;

public class Main {
	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException	{
		br = new BufferedReader(new InputStreamReader(new FileInputStream("input.in")));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		final int MAX_NUM_CASE = readInt();
		for(int qq = 1; qq <= MAX_NUM_CASE; qq++)	{
			pw.print("Case #" + qq + ": ");
			long result = testcase();
			pw.println(result);
		}
		pw.close();
	}
	
	public static long testcase() throws IOException{
		long result = 0;
		
		int N = readInt();
		PrefixTree root = new PrefixTree();
		for(int i=0; i<N; i++){
			String word = nextToken();
			int cur=0;
			PrefixTree node = root;
			while(cur<word.length() && node.next[word.charAt(cur)-'a']!=null){
				node = node.next[word.charAt(cur)-'a'];
				cur++;
			}
			if(cur<word.length()){
				result += cur+1;
			}else{
				result += cur;
			}
			while(cur<word.length()){
				node.next[word.charAt(cur)-'a'] = new PrefixTree();
				node = node.next[word.charAt(cur)-'a'];
				cur++;
			}
		}
		
		return result;
	}
	
	public static class PrefixTree{
		PrefixTree[] next = new PrefixTree[26];
	}

	/* NOTEBOOK CODE */

	private static int readInt() throws IOException	{
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException	{
		while(st == null || !st.hasMoreTokens())	{
			if(!br.ready())	{
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}
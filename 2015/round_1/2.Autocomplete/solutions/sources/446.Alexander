/*
ID: espr1t
LANG: C++
TASK: Autocomplete
KEYWORDS: Medium, Trie
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;
FILE *in; FILE *out;

const int MAX = 1048576;
const int BUFF = 1048576;

struct Node {
    int cnt;
    int next[26];
    Node() {
        cnt = 0;
        memset(next, -1, sizeof(next));
    }
};

int nextNode;
Node nodes[MAX];

class Trie {
    public:
    Trie() {
    	for (int i = 0; i < MAX; i++) {
    	    nodes[i].cnt = 0;
    	    for (int c = 0; c < 26; c++)
    	        nodes[i].next[c] = -1;
    	}
    	nextNode = 1;
    	nodes[0].cnt = MAX;
    }

    void add(const string& word) {
        int node = 0;
        for (int i = 0; i < (int)word.size(); i++) {
            if (nodes[node].next[word[i] - 'a'] == -1) {
                nodes[node].next[word[i] - 'a'] = nextNode++;
            }
            node = nodes[node].next[word[i] - 'a'];
            nodes[node].cnt++;
        }
    }
    
    int find(const string& word) {
        int ret = 0;
        int node = 0;
        for (int i = 0; i < (int)word.size(); i++) {
            if (nodes[node].cnt == 1)
                break;
            ret++;
            node = nodes[node].next[word[i] - 'a'];
        }
        return ret;
    }
};

char buff[BUFF]; 

void solveTest(int testCase) {
    Trie trie;
    int ans = 0;

    int numWords;
    fscanf(in, "%d", &numWords);
    for (int i = 0; i < numWords; i++) {
        fscanf(in, "%s", buff);
        trie.add(buff);
        ans += trie.find(buff);
    }
    fprintf(out, "Case #%d: %d\n", testCase, ans);
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("Autocomplete.in", "rt"); out = fopen("Autocomplete.out", "wt");
	
	unsigned sTime = clock();

	int numTests;
	fscanf(in, "%d", &numTests);
    fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

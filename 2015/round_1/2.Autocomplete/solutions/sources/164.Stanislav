#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 200500;
typedef long long LL;
const LL MOD = 1000000000 + 7;

struct node{
	map<char, node*> nx;
	node(){
	}
};



int main()
{
//#ifdef _DEBUG || _RELEASE
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
//#else
	//freopen("html.in", "r", stdin); freopen("html.out", "w", stdout);
//#endif
	ios_base::sync_with_stdio(0);
	int T;
	scanf("%d", &T);
	
	forn(caze, 0, T)
	{
		node* root = new node();
		LL ans = 0;

		int n;
		cin>>n;
		forn(i, 0, n)
		{
			string tmp;
			cin>>tmp;
			auto cur_node = root;
			LL plus = -1;
			for(int j = 0; j < tmp.size(); ++j)
			{
				if (!cur_node->nx.count(tmp[j]))
				{
					if (plus == -1) plus = j + 1;

					node newnode;
					cur_node->nx[tmp[j]] = new node();	
					cur_node = cur_node->nx[tmp[j]];
				}
				else
				{
					cur_node = cur_node->nx[tmp[j]];
				}
			}

			if (plus == -1) plus = tmp.size();

			ans += plus;
		}

		cout<<"Case #"<<caze + 1<<": "<<ans<<endl;
	}
	return 0;
}
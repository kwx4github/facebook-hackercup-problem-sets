#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 26
typedef struct node *trie;
struct node
{
    int index;
    trie child[MAX];
};
typedef struct node1
{
    trie root;
    int count;
}trie_t;
trie newnode()
{
    trie t=(trie)malloc(sizeof(struct node));
    int i;
    t->index=0;
    for(i=0;i<MAX;i++)
    t->child[i]=NULL;
    return t;
}
trie_t createtrie()
{
    trie_t t;
    t.count=0;
    t.root=newnode();
    return t;
}
int insert(trie_t *t,char a[])
{
    trie root=t->root;
    (t->count)++;
    int i,j,res=0,flag=0;
    for(i=0;a[i]!='\0';i++)
    {
        j=a[i]-'a';
        if(!(root->child[j]))
        {
            if(flag==0)
            flag=1,res++;
            root->child[j]=newnode();
        }
        else res++;
        root=root->child[j];
    }
    /*if(root->index)
    printf("string already exists bhai\n");
    else
    root->index=t->count;*/
    return res;
}
int search(trie t,char a[])
{
    int i,j;
    for(i=0;a[i]!='\0';i++)
    {
        j=a[i]-'a';
        if(!(t->child[j]))
        return 0;
        t=t->child[j];
    }
    return t->index;
}
int isSafe(trie t)
{
    int i;
    for(i=0;i<MAX;i++)
    if(t->child[i])
    return 0;
    return 1;
}
int del(trie t,char a[])
{
    if(!t)
    return 0;
    if(a[0]=='\0')
    {
        if(t->index)
        {
            t->index=0;
            return isSafe(t);
        }
        return 0;
    }
    int j=a[0]-'a';
    if(del(t->child[j],a+1))
    {
        free(t->child[j]);
        t->child[j]=NULL;
        return (!(t->index) && isSafe(t));
    }
}
int main()
{
    int i,n,c=1;
    char a[1000006];
  //  freopen("input22.txt","r",stdin);
   // freopen("output22.txt","w",stdout);
    scanf("%d",&n);
    while(n--) {
        trie_t t=createtrie();
        int x=0,n1;
        scanf("%d",&n1);
        for(i=0;i<n1;i++)
        {
            scanf(" %s",a);
            x+=insert(&t,a);
        }
        printf("Case #%d: %d\n",c++,x);
    }
    return 0;
}


#include <vector>
#include <algorithm>
#include <fstream>
#include <stdlib.h> 
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <sstream>
#include <map>
#include <queue>
#include <set> 
#include <deque> 
#include <bitset> 

using namespace std;

struct node
{ 
    char data; 
    node *child[26];
    node()
    {
        for (int i = 0; i < 26; i++)
            child[i] = NULL;
    }
};
 
class prefixtrie
{ 
    private: 
        node *root;
    public: 
    	int total;
        prefixtrie() 
        { 
        	total=1;
            root = new_node(0);
        }
        node *new_node(int data) 
        {   
            node *Q = new node; 
            Q->data = data; 
            return Q; 
        }
        void add(string s) 
        { 
            node *cur = root; 
            for (int i = 0; i < s.length(); i++)
            {
                if (!cur->child[s[i] - 'a']) 
                    cur->child[s[i] - 'a'] = new_node(s[i]);
                cur = cur->child[s[i] - 'a']; 
            }
        }
 
        void check(node *cur, string s, int i) 
        { 
            if (cur) 
            { 
                if (i < s.length())
                {
                	total=total+1;
                	check(cur->child[s[i] - 'a'], s, i + 1); 
                }
            }
        }
 
        void checkroot(string s) 
        { 
            if (root && s.length() > 0 && s[0] >= 'a') 
            {
            	check(root->child[s[0] - 'a'], s, 1); 
				total=total+1;	
            }
            else{
            	total=total+1;
            }
        }
};


int main()
{
	freopen("autocomplete.txt","r",stdin);
    freopen("autocomplete_output.txt","w",stdout);
	int i, j, n, numCase;
	string s, s2;
	cin>>numCase;
	for(i=0; i<numCase; i++){
		prefixtrie prefixes;
		cin>>n;
		cin>>s;
		prefixes.add(s);
		for(j=0; j<n-1; j++){
			cin>>s2;
			prefixes.checkroot(s2);
			prefixes.add(s2);
		}
		
		cout << "Case #" << (i+1) << ": "<<prefixes.total<<endl;		
	}
	return 0;
}

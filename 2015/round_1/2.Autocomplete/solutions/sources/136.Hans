/* gcc version 4.9.2 20141224
 * g++ -Wall -Wextra -Wconversion -std=c++11 -g
 */
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(__typeof__((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define mp make_pair
#define pb push_back
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) ({ if(1) fprintf(stderr, __VA_ARGS__); })
#define DBGDO(X) ({ if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; })

constexpr int lastbit (int i) { return i & -i; }

#define NAME(X)  get<0>(data[X])
#define INPUT(X) get<1>(data[X])
#define UP(X)    get<2>(data[X])
#define DOWN(X)  get<3>(data[X])

int TC;
const int maxN = 100*1000 + 8;

int N;
tuple<string,int,int,int> data[maxN];

int mbit_up[maxN];
int mbit_down[maxN];

void bit_update(int *bit, int i, int v, bool forward=true) {
	v = (forward) ? v  : N-v;
	for (i++; i <= N+2; i+= lastbit(i)) bit[i] = max(bit[i], v);
}

int bit_query(int *bit, int i, bool forward=true) {
	int result = INT_MIN;
	for (i++; i > 0; i -= lastbit(i)) result = max(result, bit[i]);
	if (result != INT_MIN && !forward)
		result = N-result;
	return result == INT_MIN ? -1 : result;
}

int main() {
	ios::sync_with_stdio(false);

	cin >> TC;
	FOR(tc, 1, TC+1) {
		cin >> N;
		FOR(i,0,N) {
			cin >> NAME(i);
			INPUT(i) = i;
		}
		sort(data, data + N);

		fill_n(mbit_up, N+4, INT_MIN);
		fill_n(mbit_down, N+4, INT_MIN);

		FOR(i,0,N) {
			int v = INPUT(i);
			UP(i) = bit_query(mbit_up, v-1, true);
			bit_update(mbit_up, v, i, true);
		}
		FORD(i,0,N) {
			int v = INPUT(i);
			DOWN(i) = bit_query(mbit_down, v-1, false);
			bit_update(mbit_down, v, i, false);
		}

		int result = 0;
		FOR(i,0,N) {
#if 0
			DBG("%3d: %3d, %3d, %3d, %s\n",
					i, INPUT(i), UP(i), DOWN(i),
					NAME(i).c_str());
#endif
			int cost = 1;
			if (UP(i) != -1) {
				int j = UP(i);
				int k = 0;
				int s = min(sz(NAME(i)), sz(NAME(j)));
				while (k < s && NAME(i)[k] == NAME(j)[k])
					k++;
				cost = max(cost, min(k+1, sz(NAME(i))));
			}
			if (DOWN(i) != -1) {
				int j = DOWN(i);
				int k = 0;
				int s = min(sz(NAME(i)), sz(NAME(j)));
				while (k < s && NAME(i)[k] == NAME(j)[k])
					k++;
				cost = max(cost, min(k+1, sz(NAME(i))));
			}

			result += cost;
		}
		printf("Case #%d: %d\n", tc, result);
	}
}

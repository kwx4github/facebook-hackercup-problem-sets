#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>
using namespace std;

int longestPrefix(const string& word, const string& otherWord) {
	int commonPrefixLength = 0;
	for (int i = 0; i < word.size() && word[i] == otherWord[i]; i++)
		commonPrefixLength++;
	return min(commonPrefixLength + 1, ((int)word.size()));
}

void solve() {
	int n; scanf("%d ", &n);
	vector<string> v(n);
	for (int i = 0; i < n; i++) {
		cin >> v[i];
	}
	set<string> s;
	int typedChars = 0;
	for (int i = 0; i < n; i++) {
		s.insert(v[i]);
		set<string>::iterator ii = s.find(v[i]);
		int maxCommonPrefixLength = 0;
		if (ii != s.begin()) {
			set<string>::iterator jj = ii; --jj;
			maxCommonPrefixLength = longestPrefix(*ii, *jj);
		}
		set<string>::iterator jj = ii; jj++;
		if (jj != s.end())
			maxCommonPrefixLength = max(maxCommonPrefixLength, longestPrefix(*ii, *jj));
		typedChars += maxCommonPrefixLength;
	}
	static int ntest = 0;
	printf("Case #%d: %d\n", ++ntest, typedChars + 1);
}

int main() {
	std::ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("B.large.in", "rt", stdin);
		freopen("B.large.out", "wt", stdout);	
	#endif
	int n; scanf("%d ", &n);
	for (int i = 0; i < n; i++) solve();
	return 0;
}	
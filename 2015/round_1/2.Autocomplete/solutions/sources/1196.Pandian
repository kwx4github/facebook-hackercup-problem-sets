#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>

#include<iostream>
#include<vector>
#include<map>
#include<string>
#include<set>
#include<queue>
#include<stack>
#include<algorithm>
using namespace std;

#define fori(a,b) for(i = a; i <= b; i++)
#define forj(a,b) for(j = a; j <= b; j++)
#define fork(a,b) for(k = a; k <= b; k++)
#define scani(a) scanf("%d",&a);
#define scanlli(a) scanf("%lld", &a);
#define scanc(c) scanf("%c",&c);
#define scans(s) scanf("%s", s);
#define mp(a,b) make_pair(a, b)
#define ll(a) (long long int)(a)
#define vi vector<int>
#define vc vector<char>
#define vs vector<string>
#define println printf("\n");
#define sz(v) v.size()
#define len(s) s.length()
#define max(a,b) ((a > b) ? a : b)
#define min(a,b) ((a < b) ? a : b)

struct words {
    char ch;
    struct words* children[26];
};
typedef struct words* word;

void insert(word w, string str) {
    int i, len = str.length();
    word cur = w;
    fori(0, len-1) {
        if (cur->children[str[i]-'a'] == NULL) {
            word newword = new words();
            newword -> ch = str[i];
            cur->children[str[i]-'a'] = newword;
        }
        cur = cur->children[str[i]-'a'];
    }
}

int getPosition(word w, string str) {
    int i = 0, len = str.length();
    word cur = w;
    while (cur != NULL && i < len) {
        cur = cur->children[str[i]-'a'];
        i++;
    }
    return i;
}

int main() {
    int i, t, tn, n, p, ans;
    string str;
    scani(t)
    for (tn = 1; tn <= t; tn++) {
        scani(n)
        word w = new words();
        w->ch = '.';
        ans = 0;
        fori(1, n) {
            cin >> str;
            p = getPosition(w, str);
            insert(w, str);
            ans += p;
        }
        printf("Case #%d: %d\n", tn, ans);
    }
}
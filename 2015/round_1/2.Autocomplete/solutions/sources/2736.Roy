using System;
using System.IO;
using System.Reflection.Emit;

namespace Facebook_Round1
{
    public class Case2
    {
        public static void Run()
        {
            const string input = @"c:\fb\input\autocomplete.txt";
            const string output = @"c:\fb\output\autocomplete_example_output2.txt";

            if (!File.Exists(input))
                return;

            var outputDir = Path.GetDirectoryName(output);
            if (outputDir != null && Directory.Exists(outputDir))
                Directory.CreateDirectory(outputDir);

            using (var reader = new StreamReader(File.OpenRead(input)))
            using (var writer = new StreamWriter(output))
            {
                var numCases = Int32.Parse(reader.ReadLine());

                for (int caseNum = 1; caseNum <= numCases; caseNum++)
                {
                    var numWords = Int32.Parse(reader.ReadLine());

                    Node root = new Node();
                    var result = 0;

                    for (int i = 0; i < numWords; i++)
                    {
                        var word = reader.ReadLine();
                        var letter = 0;
                        var curNode = root;

                        bool prefix = false;

                        for (; letter < word.Length; letter++)
                        {
                            int index = word[letter] - 'a';
                            if (curNode.Children[index] != null)
                            {
                                curNode = curNode.Children[index];
                            }
                            else
                            {
                                var newNode = new Node();
                                curNode.Children[index] = newNode;
                                curNode = newNode;
                                if (!prefix)
                                {
                                    result += letter + 1;
                                    prefix = true;
                                }
                            }
                        }
                        if (!prefix)
                            result += word.Length;
                    }

                    writer.WriteLine("Case {0}: {1}", caseNum, result);
                    Console.WriteLine("Case {0}: {1}", caseNum, result);
                }
            }
        }

        public class Node
        {
            public Node[] Children = new Node[26];
        }
    }
}
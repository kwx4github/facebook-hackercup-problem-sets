#include <fstream>
#include <string>
#include <algorithm>
#include <map>

using namespace std;

class Trie {
  public:
    Trie():
      root(new Node()) {}

    void Insert(const string &word) {
        Node *node = root;
        for (int i = 0; i < int(word.length()); ++i) {
            ++node->count;
            if (node->sons.count(word[i]) == 0)
                node->sons[word[i]] = new Node();
            node = node->sons[word[i]];
        }
        ++node->count;
    }

    int GetUniquePrefix(const string &word) const {
        Node *node = root;
        for (int i = 0; i < int(word.length()); ++i) {
            if (node->count == 1)
                return max(1, i);
            node = node->sons[word[i]];
        }
        return int(word.length());
    }

  private:
    class Node {
      public:
        int count;
        map<char, Node*> sons;

        Node():
          count(0),
          sons(map<char, Node*>()) {}
    };

    Node *root;
};

int main() {
    ifstream cin("input.txt");
    ofstream cout("output.txt");
    int testCount;
    cin >> testCount;
    for (int t = 1; t <= testCount; ++t) {
        int n, typeCount = 0;
        cin >> n;
        Trie trie = Trie();
        vector<string> words;
        for (; n > 0; --n) {
            string word;
            cin >> word;
            trie.Insert(word);
            typeCount += trie.GetUniquePrefix(word);
        }
        cout << "Case #" << t << ": " << typeCount << "\n";
    }
    cin.close();
    cout.close();
    return 0;
}

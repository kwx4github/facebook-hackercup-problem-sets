#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

char buf[10000010];


#define MAX_CHAR 26
enum NODE_TYPE{ 
	TERMINATED,
	UNTERMINATED
};
struct Node {
  NODE_TYPE type;
  char c;
  struct Node* child[MAX_CHAR]; //26-tree->a, b ,c, .....z
	Node(char ch) {
		c = ch;
		type = UNTERMINATED;
		for(int i = 0; i < MAX_CHAR; i++)
			child[i] = NULL;
	}
};
 
struct Node* ROOT; //tree root
 
//struct Node* createNewNode(char ch){
//  // create a new node
//  Node *new_node = new Node;
//  new_node->c = ch;
//  new_node->type == UNTERMINATED;
//  int i;
//  for(i = 0; i < MAX_CHAR; i++)
//    new_node->child[i] = NULL;
//  return new_node;
//}
 


int insert(const char chars[], int len) {
	Node* ptr = ROOT;
	int i;
	int rt = -1;
	for(i = 0; i < len; i++) {
		if(ptr->child[chars[i]-'a'] == NULL) {
			ptr->child[chars[i]-'a'] = new Node(chars[i]);
			if ( rt == -1) {
				rt = i + 1;
			}
		}
		ptr = ptr->child[chars[i]-'a'];
	}
	ptr->type = TERMINATED;
	if (rt == -1) {
		rt = len;
	}
	return rt;
}

int add_to_dict()
{
	int pos = 0;
	int max_len = strlen(buf);
	//dict = new DictNode;
	//int current_ch = buf[pos] - 'a';
	//dict->cnt++;
	//int len = add_leaf(dict, pos, max_len);
	int len = insert(buf, max_len);
	//printf("len %d\n" , len);
	return len;
}

//void deleteTree(Node*& ptr)
//{
//	for (int i = 0; i < MAX_CHAR; ++i) {
//		if (ptr->child[i] != NULL) {
//			deleteTree(ptr->child[i]);
//		}
//	}
//
//	delete ptr;
//	ptr = NULL;
//}


int main()
{

	int n_case;
	//string input_filename = "autocomplete_example_input.txt";
	//string output_filename = "autocomplete_example_output.txt";
	string input_filename = "autocomplete.txt";
	string output_filename = "autocomplete_output.txt";
	FILE* file_in = fopen(input_filename.c_str(), "r");
	FILE* file_out = fopen(output_filename.c_str(), "w");
	fscanf(file_in, "%d", &n_case);
	
	for (int i_case = 0; i_case < n_case; ++i_case) {
		printf("i_case %d\n" , i_case);
		ROOT = new Node(' ');
		int n_words;
		fscanf(file_in, "%d", &n_words);
		int cnt = 0;
		for (int i = 0; i < n_words; ++i) {
			fscanf(file_in, "%s", buf);
			int len = add_to_dict();
			cnt += len;
			//printf("len %d\n" , len);
		}
		fprintf(file_out, "Case #%d: %d\n" , i_case + 1, cnt);
	
//		deleteTree(ROOT);
	
	}

	fclose(file_out);
	fclose(file_in);
	system("pause");
}
#include <iostream>
#include <vector>
#include <limits>
#include <random>
#include <chrono>

#include <cstdio>

using namespace std;

int trieCount = 0, trie[26][1000005];

void init() {
  trieCount = 0;
  for (int i = 0; i < 26; ++i)
    for (int j = 0; j < 1000005; ++j) trie[i][j] = -1;
}

int add(string& s) {
  int cur = 0;
  int ans = s.length();
  bool ok = false;
  for (int i = 0; i < (int)s.length(); ++i) {
    int ch = (int)(s[i] - 'a');
    if (trie[ch][cur] == -1) {
      if (!ok) {
        ok = true;
        ans = i + 1;
      }
      ++trieCount;
      trie[ch][cur] = trieCount;
    }
    cur = trie[ch][cur];
  }
  return ans;
}

void gen() {
  mt19937 rand(chrono::system_clock::now().time_since_epoch().count());

  freopen("autocomplete.txt", "wb", stdout);
  cout << 100 << '\n';
  for (int i = 0; i < 100; ++i) {
    cerr << i << '\n';
    int n = rand() % 100000 + 1;
    int z = 1000000 / n;
    cout << n << '\n';
    for (int j = 0; j < n; ++j) {
      for (int k = 0; k < z; ++k) cout << (char)('a' + rand() % 26);
      cout << '\n';
    }
  }
  cout << '\n';
}

int main() {
  freopen("autocomplete.txt", "r", stdin);
  freopen("output.txt", "wb", stdout);
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int T;
  cin >> T;
  int n;
  string s;
  for (int i = 1; i <= T; ++i) {
    cerr << i << '\n';
    cin >> n;
    init();
    long long ans = 0;
    for (int j = 0; j < n; ++j) {
      cin >> s;
      int z = add(s);
      ans += z;
    }
    cout << "Case #" << i << ": " << ans << '\n';
  }
}

// C:\Users\Yarik\dev\cpp\contests\fbhackercup\autocomplete.txt
// C:\Users\Yarik\dev\cpp\contests\fbhackercup\autocomplete.cpp
// C:\Users\Yarik\dev\cpp\contests\fbhackercup\output.txt

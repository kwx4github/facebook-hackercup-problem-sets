#define DEB

#include<bits/stdc++.h>
#include<unistd.h>
#define REP(i,m) for(int i=0;i<(m);++i)
#define REPN(i,m,in) for(int i=(in);i<(m);++i)
#define ALL(t) (t).begin(),(t).end()
#define CLR(a) memset((a),0,sizeof(a))
#define pb push_back
#define mp make_pair
#define fr first
#define sc second

using namespace std;


#ifdef DEB
#define dump(x)  cerr << #x << " = " << (x) << endl
#define prl cerr<<"called:"<< __LINE__<<endl
template<class T> void debug(T a,T b){ for(;a!=b;++a) cerr<<*a<<' ';cerr<<endl;}
#else
#define dump(x) ;
#define prl ;
template<class T> void debug(T a,T b){ ;}
#endif

template<class T> void chmin(T& a,const T& b) { if(a>b) a=b; }
template<class T> void chmax(T& a,const T& b) { if(a<b) a=b; }

typedef long long int lint;
typedef pair<int,int> pi;

namespace std{
	template<class S,class T>
	ostream &operator <<(ostream& out,const pair<S,T>& a){
		out<<'('<<a.fr<<','<<a.sc<<')';
		return out;
	}
}

//const int INF=5e8;

struct node{
	node* nxt[30];
	bool end;
	int cnt;
	void init(){
		REP(i,30) nxt[i]=NULL;
		end=false;
		cnt=0;
	}
	node(){
		init();
	}
};
node pool[1100010];
int n;
node* root=&pool[0];
int cnt=1;
char s[1000005];
int main(){
	int t;
	cin>>t;
	REP(setn,t){

		cnt=1;
		cin>>n;

		int res=0;
		REP(i,n){
			scanf("%s",s);
			node* cur=root;

			bool flag=false;
			int j;
			for(j=0;s[j];++j){
				if(cur->nxt[s[j]-'a']==NULL) cur->nxt[s[j]-'a']=&pool[cnt++];
				cur=cur->nxt[s[j]-'a'];
				if(!flag && cur->cnt==0){
					res+=j+1;
					flag=true;
				}
				++cur->cnt;
			}
			if(!flag) res+=j;
			cur->end=true;
		}
		REP(i,cnt) pool[i].init();
		
		printf("Case #%d: %d\n",setn+1,res);
	}
		

	return 0;
}




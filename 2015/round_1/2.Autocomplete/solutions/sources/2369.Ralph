#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <stack>
#include <map>
#include <algorithm>
using namespace std;
typedef long long i64;

#define fu(i,m,n) for(int i=m; i<n; i++)
#define fd(i,m,n) for(int i=n-1; i>=m; i--)
#define fr(i,m,n) for(typeof(m) i=m; i!=n; ++i)
#define fa(i,c) fr(i,(c).begin(),(c).end())

int compare(const string& s, const string& t) {
    for(int i=0; i<s.size() && i<t.size(); i++) {
        if(s[i]!=t[i]) return i;
    }
    return min(s.size(),t.size());
}

int main(void) {
	int TS; cin >> TS;
	for(int ts=1; ts<=TS; ts++) {
		cout << "Case #" << ts << ": ";
        set<string> S;
        int N;
        cin >> N;
        int ret=0;
        fu(word,0,N) {
            string s;
            cin >> s;
            auto i2 = S.lower_bound(s);
            int longest=0;
            if(i2!=S.end()) longest=max(longest, compare(s,*i2));
            if(i2!=S.begin()) {
               --i2;
               longest=max(longest, compare(s,*i2));
            }
            S.insert(s);
            ret += min((int)s.size(), longest+1);
            //cout << s << " -> " << i << " ( " << ret << ")" << endl;
        }
		cout << ret << endl;
	}
}

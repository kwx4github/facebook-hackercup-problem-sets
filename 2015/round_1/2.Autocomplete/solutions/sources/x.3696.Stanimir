using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace nyr
{
    class Program
    {
        static Dictionary<int, int> cache = new Dictionary<int, int>();

        static void Main(string[] args)
        {
            // test
            // Console.SetIn(new StreamReader(@"C:\users\stan\downloads\autocomplete.txt"));

            var count = read_int();
            var cases = new List<test_case>();

            for (int i = 0; i < count; i++)
            {
                var c = new test_case();

                {
                    var n = read_int();

                    for (int j = 0; j < n; j++)
                    {
                        var w = read();
                        var f = w[0];

                        if (!c.words.ContainsKey(f))
                            c.words[f] = new List<word>();

                        c.words[f].Add(new word { value = w });
                        c.unsorted_words.Add(w);
                    }
                }

                cases.Add(c);
            }

            for (int i = 0; i < cases.Count; i++)
            {
                var c = cases[i];
                var result = sum_chars(c);

                Console.WriteLine("Case #{0}: {1}", i + 1, result);
            }
        }

        static string[] read_split()
        {
            var line = Console.ReadLine();
            var columns = line.Split(' ');

            return columns;
        }

        static int read_int()
        {
            return Convert.ToInt32(Console.ReadLine());
        }

        static string read()
        {
            return Console.ReadLine();
        }

        static int sort(word wa, word wb)
        {
            var a = wa.value;
            var b = wb.value;

            var v = 0;
            var max = Math.Max(a.Length, b.Length);

            for (int i = 0; i < max; i++)
            {
                if (i >= a.Length)
                    v = -1;

                else if (i >= b.Length)
                    v = 1;

                if (v != 0)
                    break;

                v = a[i].CompareTo(b[i]);

                if (v != 0)
                    if (i > 0)
                    {
                        if (a.Length != b.Length)
                        {
                            if (i >= a.Length)
                                v = -1;

                            else if (i >= b.Length)
                                v = 1;
                        }
                    }
            }

            if (v < 0)
                v = -1;

            else if (v > 1)
                v = 1;

            return v;
        }

        static int sum_chars(test_case c)
        {
            var number = 0;

            // foreach (var d in c.words)
            //     d.Value.Sort(sort); // (x, y) => x.value.CompareTo(y.value)); // (sort);

            foreach (var d in c.words)
                d.Value[0].prefix = d.Value[0].value[0].ToString();

            foreach (var kvp in c.words)
            {
                var d = kvp.Value;

                for (int j = 1; j < d.Count; j++)
                {
                    var a = d[j - 1].value;
                    var b = d[j].value;

                    var v = 0;
                    var max = Math.Max(a.Length, b.Length);

                    var i = 0;

                restart:
                    for (;  i < max; i++)
                    {
                        if (v != 0)
                            break;

                        if (i >= a.Length)
                        {
                            if (v == 0)
                                i++;

                            break;
                        }

                        else if (i >= b.Length)
                        {
                            v = 1;

                            break;
                        }

                        v = a[i].CompareTo(b[i]);
                    }

                    d[j].prefix = d[j].value.Substring(0, i);

                    var existing = d.FindIndex(x => x.value == d[j].prefix);

                    if (existing >= 0 && existing != j)
                    {
                        i++;
                        goto restart;
                    }
                }
            }

            for (int i = 0; i < c.unsorted_words.Count; i++)
            {
                var w = c.unsorted_words[i];
                var j = c.words[w[0]].Find(x => x.value == w);

                number += j.prefix.Length;

                /*var chars = 1;
                var to_subtract = 0;

                do
                {
                    for (int j = 0; j < c.n; j++)
                    {
                        var x = c.words[j];

                        if (x == w)
                            continue;

                        var match = false;

                        for (int k = 0; k < chars; k++)
                        {
                            if (w.Length <= k)
                                break;

                            else if (x.Length <= k)
                            {
                                match = true;
                                break;
                            }

                            if (w[k] == x[k])
                            {
                                if (k + 1 == chars)
                                {
                                    if (w.Length < x.Length)
                                    {
                                        // ...
                                    }
                                    else
                                    {
                                        match = true;

                                        if (to_subtract == 0)
                                            to_subtract = 1;

                                        goto start_over;
                                    }
                                }
                            }
                        }

                        if (!match)
                            goto exit;
                    }

                start_over:
                    chars++;

                } while (chars <= w.Length);

            exit:
                number += chars - to_subtract; */
            }

            return number;
        }

        class test_case
        {
            public Dictionary<char, List<word>> words = new Dictionary<char, List<word>>();
            public List<string> unsorted_words = new List<string>();
        }

        class word
        {
            public string prefix;
            public string value;
        }
    }
}





#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)
#define SZ(v)					(int) v.size()
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
const int MXWORDS = 100007;
string words[MXWORDS];
char word[1000007];

const int ALPHABET_SIZE = 26;
int lvl = 0;

struct trie_node {
	trie_node *children[ALPHABET_SIZE];
	trie_node() {
		memset(children, 0, sizeof(children));
	}
};

struct trie {
	trie_node *root;
	trie() {
		root = new trie_node();
	}
};

void insert(trie *Tree, string key) {

	trie_node *node;

	node = Tree->root;

	for (int level = 0; level < SZ(key); level++) {
		int index = key[level] - 'a';
		if (!node->children[index]) {
			node->children[index] = new trie_node;
			if (lvl == 0)
				lvl = level + 1;
		}
		node = node->children[index];
	}
}

int main() {
	freopen("autocomplete.txt", "rt", stdin);
	freopen("autocomplete_out.txt", "wt", stdout);
	int t, n, count;
	scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++) {
		count = 0;
		trie trie;
		scanf("%d", &n);
		for (int i = 0; i < n; i++) {
			scanf("%s", word);
			words[i] = word;
		}
		for (int i = 0; i < n; i++) {
			lvl = 0;
			insert(&trie, words[i]);
			if (lvl == 0)
				lvl = SZ(words[i]);
			count += lvl;
		}
		printf("Case #%d: %d\n", tt, count);
	}
	return 0;
}

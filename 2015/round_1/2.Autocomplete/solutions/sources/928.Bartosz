#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>

using namespace std;

struct node {
  int belongingWords;
  node* children[26];
  
  node() : belongingWords(0), children{NULL} {}
};

void insert(node* root, const string& word) {
  node* n = root;
  for (int i = 0; i < word.size(); ++i) {
    int idx = word[i] - 'a';
    if (!n->children[idx])
      n->children[idx] = new node;
    n->belongingWords++;
    n = n->children[idx];
  }
  n->belongingWords++;
}

int type(node* root, const string& word) {
  int pressed = 1;
  node* n = root->children[word[0]-'a'];

  for (; pressed < word.size(); ++pressed) {
    int idx = word[pressed] - 'a';

    if (n->belongingWords == 1) break;
    n = n->children[idx];
  }

  return pressed;
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int N;
    cin >> N;
    node* root(new node);
    long long result = 0;

    for (int i = 0; i < N; ++i) {
      string s;
      cin >> s;
      insert(root, s);
      result += type(root, s);
    }

    cout << "Case #" << t << ": " << result << endl;
    delete root;
  }
}

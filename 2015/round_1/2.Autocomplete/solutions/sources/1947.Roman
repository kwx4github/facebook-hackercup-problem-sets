#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <cassert>
#include <memory.h>
using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define foreach(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
typedef long long ll;
typedef pair<int, int> pii;
typedef long double ld;

char s[1000010];
int trie[1000010][26];
int ans, kt;

int alloc() {
	forn(i, 26) trie[kt][i] = -1;
	return kt++;
}

void add(char* s, int n, int cur, int node, bool flag) {
	// printf("add %s %d %d\n", s, n, cur);
	if (cur == n) {
		if (not flag) ans += cur;
		return;
	}
	assert(s[cur] >= 'a' && s[cur] <= 'z');
	if (trie[node][s[cur] - 'a'] == -1) {
		if (not flag) {
			ans += cur + 1;
		}
		flag = true;
		trie[node][s[cur] - 'a'] = alloc();
	}
	add(s, n, cur + 1, trie[node][s[cur] - 'a'], flag);
}

void solve() {
	kt = 0;
	alloc();
	int n;
	scanf("%d", &n);
	ans = 0;
	forn(i, n) {
		scanf("%s", s);
		add(s, strlen(s), 0, 0, false);
	}
	printf("%d\n", ans);
}

int main() {
	int tc;
	scanf("%d", &tc);
	for (int q = 1; q <= tc; q++) {
		printf("Case #%d: ", q);
		solve();
	}
	return 0;
}

package fhc;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ProblemB {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("c:\\Users\\skhomenko\\Downloads\\autocomplete.txt"));
        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; t++) {
            int N = Integer.parseInt(br.readLine());
            String[] words = new String[N];
            for (int i = 0; i < N; i++) {
                words[i] = br.readLine();
            }
            int res = solve(words);
            System.out.println("Case #" + t + ": " + res);
        }

    }

    private static int solve(String[] words) {
        int res = 0;
        Trie trie = new Trie();
        for (String word : words) {
            trie.addWord(word);
            res += trie.getMinKeys(word);
        }
        return res;
    }

    public static class TrieNode {
        public char letter;
        public int count;
        public Map<Character, TrieNode> children = new HashMap<>();

        public TrieNode findChildByLetter(char ch) {
            TrieNode child = children.get(ch);
            if (child == null) {
                child = new TrieNode();
                child.letter = ch;
                children.put(ch, child);
            }
            return child;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + letter;
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            TrieNode other = (TrieNode) obj;
            if (letter != other.letter)
                return false;
            return true;
        }

        @Override
        public String toString() {
            return "TrieNode [letter=" + letter + ", count=" + count + ", children=" + children + "]";
        }

    }

    public static class Trie {
        private TrieNode root = new TrieNode();

        public void addWord(String word) {
            recAddWord(word, 0, root);
        }

        private void recAddWord(String word, int pos, TrieNode node) {
            if (pos == word.length()) {
                return;
            }
            char ch = word.charAt(pos);
            TrieNode child = node.findChildByLetter(ch);
            child.count++;
            recAddWord(word, pos + 1, child);
        }

        public int getMinKeys(String word) {
            return getMinKeysRec(word, 0, root);
        }

        private int getMinKeysRec(String word, int pos, TrieNode node) {
            if (word.length() == pos) {
                return 0;
            }
            TrieNode child = node.findChildByLetter(word.charAt(pos));
            if (child.count == 1) {
                return 1;
            } else {
                return getMinKeysRec(word, pos + 1, child) + 1;
            }
        }
    }
}

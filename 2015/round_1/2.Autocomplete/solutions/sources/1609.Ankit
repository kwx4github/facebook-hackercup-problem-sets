import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.Writer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Ankit Srivastava
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input2.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output2.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InReader in = new InReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    public void solve(int testNumber, InReader in, OutputWriter out) {
        int n = in.readInt();
        Trie trie = new Trie();
        long ans = 0;
        for (int i = 0; i < n; i++) {
            String s = in.readString();
            int add = trie.search(s);
           // System.err.println(add + " " + s);
            ans += add;
            trie.insert(s);
        }
        out.printf("Case #%d: %d\n", testNumber, ans);
    }

    class Trie {
        Node root;
        Trie() {
            root = new Node('#');
        }

        void insert(String s) {
            Node cur = root;
            for (char c : s.toCharArray()) {
                int id = c - 'a';
                if(cur.children[id] == null) {
                    cur.children[id] = new Node(c);
                    //System.err.println(c);
                }
                cur = cur.children[id];
            }
            cur.leaf = true;
        }

        int search(String s) {
            Node cur = root;
            int cnt = 0;
            for (char c : s.toCharArray()) {
                int id = c - 'a';
                if(cur.children[id] == null) {
                    //System.err.println("f " + c + " " + cur.c);
                    return cnt + 1;
                }
                else cnt++;
                cur = cur.children[id];
            }
            return cnt;
        }

    }

    class Node {
        char c;
        Node[] children;
        boolean leaf;

        Node(char c) {
            this.c = c;
            children = new Node[26];
            leaf = false;
        }
    }
}

class InReader {

    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public InReader(InputStream stream) {
        this.stream = stream;
    }

    public static boolean isWhitespace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public long readLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return isWhitespace(c);
    }

    public String next() {
        return readString();
    }

    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }
}

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }

    public void print(Object... objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(objects[i]);
        }
    }


    public void printf(String format, Object... args) {
        writer.printf(format, args);
    }

    public void printLine(Object... objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

}


#include <bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define sz size

#define MAXC 1010000

#define ALPH 30

using namespace std;
typedef long long L;
typedef double D;
typedef vector<L> vi;
typedef vector<vi> vvi;
typedef pair<L,L> ii;


/////////////////////////////////////////////////////////////////////


struct node{
  char c;
  int here;
  int child[ALPH];
  node(){
    here = 0;
    memset(child, 0, sizeof child);
  }
  node(char c):
    c(c), here(0) {
    memset(child, 0, sizeof child);
  }
    
};

int n_amt, ans;
node nodes[MAXC];

void trie_begin(){
  n_amt = 1;
  ans = 0;
  nodes[0] = node();
}

void trie_add(string s){
  if(!s.sz()) return;
  
  int nd = 0;
  bool get_it = 1;

  for(size_t i = 0; i < s.sz(); i++){
    if(nodes[nd].child[s[i]-'a'] == 0){
      nodes[nd].child[s[i]-'a'] = n_amt;

      nodes[n_amt] = node(s[i]);

      n_amt++;
    }

    nd = nodes[nd].child[s[i] - 'a'];
    nodes[nd].here++;
    if(get_it){
      ans++;
      if(nodes[nd].here == 1) get_it = 0;
    }
  }
}



/////////////////////////////////////////////////////////////////////

				 
      
    

void solve(){
  int N;
  cin >> N;
  trie_begin();
  string s;
  for(int i = 0; i < N; i++){
    cin >> s;
    trie_add(s);
  }
  cout << ans << '\n';
}

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int T;
  cin >> T;
  for(int i = 1; i <= T; i++){
    cout << "Case #" << i << ": ";
    solve();
  }
}

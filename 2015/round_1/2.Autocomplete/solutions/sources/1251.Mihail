import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;


public class Solution2 {
	public static void main(String[] args){
		Solution2 solution = new Solution2();
		TestCase[] input = solution.readFile(args[0]);
		int[] output = solution.process(input);
		solution.writeFile(args[1], output);
	}	
	
	private TestCase[] readFile(String fileName) {
		TestCase[] result = null;
		FileReader fr = null;
		BufferedReader br = null;
		try {
			fr = new FileReader(fileName); 
			br = new BufferedReader(fr);
			String s = br.readLine();
			int testCases = Integer.parseInt(s);
			result = new TestCase[testCases];
			for (int i = 0; i < result.length; i++) {
				TestCase tc = new TestCase();
				int wordsCount = Integer.parseInt(br.readLine());
				for (int j = 0; j < wordsCount; j++) {
					tc.words.add(br.readLine());
				}
				
				result[i] = tc;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
				}
			}
		}
		
		return result;
	}
	
	private void writeFile(String fileName, int[] output) {
		File fout = new File(fileName);
		FileOutputStream fos;
		BufferedWriter bw = null;
		try {
			fos = new FileOutputStream(fout);
			bw = new BufferedWriter(new OutputStreamWriter(fos));
			for (int i = 0; i < output.length; i++) {
				bw.write("Case #" + (i + 1) + ": " + output[i]);
				bw.newLine();
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (Exception e) {
				}
			}
		}
	}
	
	private int[] process(TestCase[] tests) {
		int[] result = new int[tests.length];
		for (int i = 0; i < tests.length; i++) {
			result[i] = processTestCase(tests[i]);
		}
		
		return result;
	}
	
	private int processTestCase(TestCase test) {
		Trie trie = new Trie();
		TrieNode root = trie.getRoot();
		final int a_NUM = (int)'a';

		int result = 0;
		for (String word : test.words) {
			boolean fillTail = false;
			TrieNode node = root;
			for (int i = 0; i < word.length(); i++) {
				int index = (int)word.charAt(i) - a_NUM;
				if (node.children[index] == null) {
					if (!fillTail) {
						result += i + 1;
						fillTail = true;
					}
					
					node.children[index] = new TrieNode();
				}
				
				node = node.children[index];
			}
			
			if (!fillTail) {
				result += word.length();
			}
		}
		
		return result;
	}
	
	private class TestCase {
		public List<String> words;
		
		public TestCase() {
			this.words = new ArrayList<String>();
		}
	}
	
	private class Trie {
		public TrieNode root = new TrieNode();
		
		public TrieNode getRoot() {
			return root;
		}
	}
	
	private class TrieNode {
		public final int ALPHABET_SIZE = 26;
		public TrieNode[] children;
		
		public TrieNode() {
			children = new TrieNode[ALPHABET_SIZE];
		}
	}
}
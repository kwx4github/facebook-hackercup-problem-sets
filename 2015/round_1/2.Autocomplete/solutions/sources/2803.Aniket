/* Aniket Kumar */
#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <unistd.h>
#include <algorithm>
#include <vector>
#include <map>
#include <climits>
#include <set>

using namespace std;

#define V(a) vector<a>
#define pi pair<int,int>
#define ull unsigned long long
#define ill long long
#define F(i,a,n) for(i=(a);i<(n);++i)
#define RP(i,n) F(i,0,n)
#define SUM(v, s, i) RP(i, v.size()){ s += v[i];}
#define MP(a, b) make_pair(a, b)
#define fs first
#define se second
#define S(x) scanf("%d",&x)
#define SL(x) scanf("%lld",&x)
#define SZ(x) (x.size())
#define PB(a) push_back(a)
#define dbug(i,size,x) F(i,0,size){cout<<x[i]<<" ";} cout<<endl
#define tin freopen("aain.txt","r",stdin)
#define tout freopen("aaout.txt","a",stdout)


const int INF = 0x7fffffff;

struct trie {
	struct trie *child[26];
};


struct trie *create_node();
void insert(char st[], struct trie *root);
int search(char st[], struct trie *root);


int main()
{
	//freopen("autocomplete.txt","r",stdin);
	//freopen("autocomplete_output.txt","a",stdout);
	
	struct trie *root;

	int t, i, n, ans, cur;

	char ch[1000001];

	S(t);

	F(i, 1, t + 1) {

		root = create_node();

		S(n);

		ans = 1;
		cur = 0;

		scanf("%s", ch);
		n--;

		insert(ch, root);

		while (n--) {
			scanf("%s", ch);

			cur = search(ch, root);

			ans += cur;

			//cout << " Cur = " << cur << endl;

			insert(ch, root);

		}

		printf("Case #%d: %d\n", i, ans);

	} 


	return 0;
}

struct trie *create_node()
{
	struct trie *pt;

	int i;

	pt = (struct trie *) malloc(sizeof(struct trie));

	F(i, 0, 26) {
		pt->child[i] = NULL;
	}

	return pt;
}


void insert(char st[], struct trie *root)
{
	int ln, i, id;

	struct trie *ptr;

	ln = strlen(st);

	ptr = root;

	F(i, 0, ln) {
		id = st[i] - 'a';

		if (!ptr->child[id]) {
			ptr->child[id] = create_node();
		}

		ptr = ptr->child[id];

	}

}

int search(char st[], struct trie *root)
{
	int ln, i, id;

	struct trie *ptr;

	ln = strlen(st);

	ptr = root;

	F(i, 0, ln) {
		id = st[i] - 'a';

		if (!ptr->child[id]) {
			return i + 1;
		}

		ptr = ptr->child[id]; 
	}

	return ln;

}


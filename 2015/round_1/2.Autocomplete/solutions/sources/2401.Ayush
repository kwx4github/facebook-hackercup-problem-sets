#include <bits/stdc++.h>

using namespace std;

#define ALPHABET_SIZE 26
 		char s[1000005];
struct node {
    int data;
    int cnt_holder;
    struct node* link[ALPHABET_SIZE];
};

struct node* root = NULL;

struct node*  create_node() {
    struct node *q = (struct node*)malloc(sizeof(struct node));
    for(int x=0;x<ALPHABET_SIZE;x++)
        q->link[x] = NULL;
    q->data = -1;
    q->cnt_holder = 0;
    return q;
}

void insert_node(char key[]) {
    int length = strlen(key);
    int index;
    int level = 0;
    if(root == NULL)
        root = create_node();
    struct node *q = root;

    for(;level < length;level++) {
        index = key[level] - 'a';

        if(q->link[index] == NULL) {
            q->link[index] = create_node();
        }
     	//else {
     	q = q->link[index];
     		   (q->cnt_holder)++;
     	//}


    }
    q->data = level;
}

int search(char key[]) {
    struct node *q = root;
    int length = strlen(key);
 	int flag = 0;
    int level = 0;
    for(;level < length;level++) {
        int index = key[level] - 'a';
        if(q->cnt_holder !=  1)
            q = q->link[index];
        else
        {
        	flag = 1;
            goto abc;
        }
    }
    abc:;
    return (level);
}

int main()
{
    freopen("autocomplete.txt", "r" , stdin);
	freopen("out.txt", "w" , stdout);
	int t;
	cin>>t;
	int cnnnt = 1;
	while(t--)
	{
		long long int x, ans;
		cin>>x;
		ans = 0;
		for(int i = 0; i < x; i++)
		{
			cin>>s;
			insert_node(s);
			int k = strlen(s);
			int p = search(s);
			ans+= (p) ;

		}

		cout<<"Case #"<<cnnnt<<": "<<ans<<endl;
		cnnnt++;
		root = NULL;
	}

	return 0;
}

class Trie
    class TrieNode
        attr_accessor :children

        def initialize
            @children = {}
        end
    end

    @root = nil
    def initialize
        @root = TrieNode.new
    end

    def insert word
        letters = word.split ""

        counter = 0
        curr = @root
        on_new_branch = false
        for l in letters
            if curr.children[l].nil?
                curr.children[l] = TrieNode.new
                if (!on_new_branch) 
                    on_new_branch = true
                    counter += 1
                end
            else
                counter += 1
            end
            curr = curr.children[l]
        end
        return counter
    end
end

def solution words
    trie = Trie.new
    total = 0
    for w in words 
        keys = trie.insert(w)
        total += keys
    end
    return total
end

input = File.new "input.in", "r"
output = File.new "output.out", "w"

T = input.readline.chomp.to_i

for i in (1..T)
    n = input.readline.chomp.to_i
    words = []
    n.times { words << input.readline.chomp }

    output.puts "Case ##{i}: #{solution words}"
end
input.close
output.close

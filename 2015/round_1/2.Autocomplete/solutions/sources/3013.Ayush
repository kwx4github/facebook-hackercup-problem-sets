#include<iostream>
#include<string.h>
#include<stdlib.h>
#define ALPHABET_SIZE 26
#define CHAR_TO_INDEX(c) ((int)c - (int)'a') 
using namespace std;
struct trie{
	int value;
	int countChar;
	trie *character[ALPHABET_SIZE];
};
struct trieRoot{
	trie *root;//giving the top root in trie
	int count;// for stroring the numbers of words in trie
};

char temp[1000001];
trie* getnode(){
	trie *p;
	p = new trie;
	p->value = 0;
	p->countChar = 0;
	for(int i = 0;i<ALPHABET_SIZE;i++){
		p->character[i] = NULL;
	}
	return p;
}
int insert(trieRoot *r , char *key){
	trie *p;
	p = r->root;
	r->count++;
	int len = 0;
	bool done = false;
	int maxLen = strlen(key);
	int level = 0;
	for(level = 0;level<strlen(key);level++){
		int index = CHAR_TO_INDEX(key[level]);
		if(p->character[index] == NULL){
			p->character[index] = getnode();
			p->countChar = 1;
		} else {
			p->countChar++;
		}
		if(p->countChar == 1 && done == false){
			len = level + 1;
			done = true;
		}
		//cout << "p->countChar : " << p->countChar << "\n";
		p = p->character[index];
	}
	if(p->value != 0){
		p->value++;
	} else {
		p->value = 1;
	}
	//cout << "p->countChar : " << p->countChar << "\n";
	if(done == false){
		//cout << "\n in";
		return maxLen;
	} else {
		return len;
	}
}
void initialize(trieRoot *r){
	r->root = getnode();
	r->count = 0;
}
int main()
{
	int t;
	cin >> t;
	int tmp = 0;
	while(tmp < t){
		int count = 0;
		trieRoot r;
		initialize(&r);
		int n;
		cin >> n;
		//char temp[n];
		while(n--){
			cin >> temp;
			//cout << fuck << "\n";
			count = count + insert(&r , temp);
		}
		cout << "Case #" << tmp+1 << ": " << count;
		cout << "\n";
		tmp++;
	}
	return 0;
}

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class Words {

    private static class Trie {

        Node root = new Node();

        private static class Node {
            Map<Character, Node> childs = new HashMap<Character, Node>(26);
            int count = 1;
        }

        public void insert(String word) {

            Node currentNode = root;

            for (int i = 0; i < word.length(); i++) {
                char ch = word.charAt(i);

                if (currentNode.childs.containsKey(ch)) {
                    currentNode = currentNode.childs.get(ch);
                    currentNode.count++;
                } else {
                    Node tmp = new Node();
                    currentNode.childs.put(ch, tmp);
                    currentNode = tmp;
                }
            }
        }

        public int shortestPrefixLength(String word) {

            Node currentNode = root.childs.get(word.charAt(0));

            for (int i = 1; i < word.length(); i++) {
                if (currentNode.count == 1) {
                    return i;
                }

                currentNode = currentNode.childs.get(word.charAt(i));
            }

            return word.length();
        }
    }

//    public static void main(String[] args) throws Exception {
//        Trie trie = new Trie();
//
//        trie.insert("hello");
//        trie.insert("lol");
//
//        trie.shortestPrefixLength("hello");
//    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        final int count = Integer.parseInt(br.readLine());

        for (int i = 1; i <= count; i++) {

            Trie trie = new Trie();

            int wordCount = Integer.parseInt(br.readLine());

            int result = 0;

            for (int j = 0; j < wordCount; j++) {
                String word = br.readLine();

                trie.insert(word);

                result += trie.shortestPrefixLength(word);
            }

            System.out.println("Case #" + i + ": " + result);
        }
    }
}

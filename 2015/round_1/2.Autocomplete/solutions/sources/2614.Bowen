
# coding: utf-8

# In[1]:

import os
import sys
import numpy
from collections import defaultdict


# In[2]:

problem_id = '2'


# In[3]:

sys.setrecursionlimit(10**9)
input_path = '%s.in.txt' % problem_id
output_path = '%s.out.txt' % problem_id

def read_line():
    line = ''
    while len(line) == 0:
        line = input_file.readline().strip()
    return line


def write_line(line):
    print line
    return output_file.write(line + os.linesep)


# In[4]:

trie=lambda:defaultdict(trie)


# In[5]:

def solve():
    n = int(read_line())
    root=trie()
    count = 0
    for i in range(n):
        word = read_line()
        node = root
        step = 0
        for step in xrange(len(word)):
            if word[step] in node:
                node = node[word[step]]
            else:
                break
        count += step + 1
        for i in xrange(step, len(word)):
            node = node[word[i]]
        node['#'] = True
    return str(count)


# In[6]:

input_file = open(input_path, "r")
output_file = open(output_path, "w+")
T = int(read_line())
for case_id in xrange(1, T + 1):
    write_line("Case #%d: %s" % (case_id, solve()))
input_file.close()
output_file.close()


# In[ ]:




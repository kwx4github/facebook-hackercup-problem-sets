import java.io.*;

public class Autocomplete {
    public static void main(String args[]) throws IOException{
        Autocomplete autocomplete = new Autocomplete();
        autocomplete.solve("autocomplete.txt");
    }

    private void solve(String path) throws IOException{
        PrintWriter writer = new PrintWriter("autocomplete_output.txt", "UTF-8");
        BufferedReader br = new BufferedReader(new FileReader(path));
        String firstLine = br.readLine();
        int count = Integer.parseInt(firstLine);
        int testCaseNumber = 1;
        
        while(count > 0){
            int length = 0;
            int numOfWords = Integer.parseInt(br.readLine());
            Node[] dict = new Node[26];
            for(int i = 0; i < numOfWords; i++){
                String word = br.readLine();
                length += addToDict(word, dict);
            }
            writer.println("Case #" + testCaseNumber + ": " + length);
            count--;
            testCaseNumber++;
        }
        writer.close();
    }
    
    private int addToDict(String word, Node[] dict){
        int minLen = -1; 
        Node[] curLevelDict = dict;
        char[] charArray = word.toCharArray();
        for(int i = 0; i < charArray.length; i++){
            char ch = charArray[i];
            int index = ch - 'a';
            if(curLevelDict[index] == null){
                curLevelDict[index] = new Node(ch);
            }
            curLevelDict[index].count++;
            if(curLevelDict[index].count == 1 && minLen == -1){
                minLen = i+1;
            }
            curLevelDict = curLevelDict[index].children;
        }
        return minLen==-1 ? word.length() : minLen ;
    }
    
    class Node{
        int count = 0;
        Character ch;
        Node[] children = new Node[26];
        
        public Node(char ch){
            this.ch = ch;
        }
    }
}
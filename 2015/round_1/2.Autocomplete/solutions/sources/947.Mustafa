#include <algorithm>
#include <iostream>
#include <set>
#include <string>

int getNeededClicks(const std::string &newWord,
                    const std::string &oldWord)
{
	for (int i = 0; i < newWord.size() && i < oldWord.size(); ++i)
	{
		if (newWord[i] != oldWord[i])
		{
			// Type up to first differing character
			return i+1;
		}
	}

	if (oldWord.size() < newWord.size())
	{
		return oldWord.size() + 1;
	}
	else
	{
		// Type full word
		return newWord.size();
	}
}

int SolveCase()
{
	std::set<std::string> words;
	// Pointing to words before and after the current word
	std::set<std::string>::iterator itBefore, itAfter;

	int totalClicks = 0;

	int W;
	std::cin >> W;

	// First word
	std::string word;
	std::cin >> word;
//std::cerr << "Adding word: " << word << "\n";
	totalClicks += 1;
	words.insert(word);
//std::cerr << "Total Clicks: " << totalClicks << "\n";

	for (int i = 1; i < W; ++i)
	{
		std::cin >> word;

//std::cerr << "Adding word: " << word << "\n";
		// Clicks needing to differantiate from consecutive words
		int clicksBefore = 0;
		int clicksAfter = 0;

		itAfter = words.lower_bound(word);
		if (itAfter != words.end())
		{
//std::cerr << "Word After: " << *itAfter << "\n";
			clicksAfter = getNeededClicks(word, *itAfter);
//std::cerr << "Clicks After: " << clicksAfter << "\n";
		}

		if (itAfter != words.begin())
		{
			itBefore = itAfter;
			--itBefore;
			clicksBefore = getNeededClicks(word, *itBefore);
//std::cerr << "Word Before: " << *itBefore << "\n";
//std::cerr << "Clicks Before: " << clicksBefore << "\n";
		}

		// Whichever consecutive word needs more typing
		totalClicks += std::max(clicksBefore, clicksAfter);
//std::cerr << "Total Clicks: " << totalClicks << "\n";

		done_word:
		words.insert(word);
	}


	return totalClicks;
}

int main()
{
	int T;
	std::cin >> T;

	for (int tc = 1; tc <= T; ++tc)
	{
		int res = SolveCase();

		std::cout << "Case #" << tc << ": " << res << "\n";
	}

	return 0;
}

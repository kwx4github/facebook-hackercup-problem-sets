#include <iostream>
#include <string>
#include <vector>
using namespace std;

struct TrieNode
{
	char c;
	vector<TrieNode*> children;

	TrieNode(char c) {
		this->c = c;
	}

	TrieNode* getChild(char c){
		for (int i = 0; i < children.size(); i++) {
			if (children[i]->c == c) return children[i];
		}

		return NULL;
	}

	static int add(TrieNode* node, string& input);
};

TrieNode* nodes[10000000];
int nodeCount;

int TrieNode::add(TrieNode* node, string& input)  {
	TrieNode* current = node;
	int ret = -1;
	for (int i = 0; i < input.size(); i++) {
		TrieNode* next = current->getChild(input[i]);

		if (next == NULL) {
			next = new TrieNode(input[i]);
			nodes[nodeCount++] = next;
			current->children.push_back(next);
			if (ret == -1) {
				ret = i + 1;
			}
		}

		current = next;
	}

	return ret != -1 ? ret : input.size();
}

int run() {
	int n;

	cin >> n;

	nodeCount = 0;
	TrieNode* root = new TrieNode(0);
	int result = 0;
	for (int i = 0; i < n; i++) {
		string line;
		cin >> line;
		result += TrieNode::add(root, line);
	}

	for (int i = 0; i < nodeCount; i++) {
		delete nodes[i];
	}

	return result;
}

int main() {
	int T;

	cin >> T;
	for (int i = 0; i < T; i++) {
		cout << "Case #" << i + 1 << ": " << run() << endl;
	}
}

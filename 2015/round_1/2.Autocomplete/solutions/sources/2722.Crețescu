#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_map>
#include <limits>
#include <functional>
#include <string>
#include <sstream>

#include <cstdlib>
#include <cassert>
#include <cstdio>

using namespace std;

 
class Trie {
 
    struct TrieNode {
        map<char, TrieNode*> next;
        TrieNode() {
        }
    };
 
    TrieNode* root;
 
    int updateCount(const string& str, const int& value) {
        int ret = (int)str.size();
        TrieNode *node = root;
        for (size_t i = 0; i < str.size(); i++) {
            if (node->next.find(str[i]) == node->next.end()) {
                node->next[str[i]] = new TrieNode();
                if (ret == (int)str.size()) ret = i + 1;
            }
            node = node->next[str[i]];
        }
 
        return ret;
    }
 

    void go(TrieNode* node) {
        for (auto& w : node->next) {
            go(w.second);
            delete w.second;
        }
    }
 
public:
 
    Trie() {
        root = new TrieNode();
    } 


    ~Trie() {
    }
 
    int insert(const string& str) {
        return updateCount(str, 1);
    }
 
};

int solve() {
    int ret = 0;
    int n;
    cin >> n;
    cin.get();
    Trie trie;
    string w;
    for (int i = 0; i < n;i ++) {
        getline(cin, w);
        ret += trie.insert(w);
    }

    return ret;
}
int main() {
    assert (freopen("autocomplete.txt", "r", stdin) && freopen("test.out", "w",stdout));
    ios::sync_with_stdio(0);
    int t;
	cin >> t;
	auto t0 = std::chrono::system_clock::now();
	for (int i = 1;i <= t; i++) {
        cout << "Case #" << i << ": " << solve() << "\n";
	}
    
	auto t1 = std::chrono::system_clock::now();
	auto d = std::chrono::duration_cast<std::chrono::duration<double>>(t1 - t0);
	cerr << d.count() << "\n";
}

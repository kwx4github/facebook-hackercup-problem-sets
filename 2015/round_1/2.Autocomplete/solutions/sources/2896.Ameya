#include<stdio.h>
#include<stdlib.h>
typedef struct node{
	struct node *arr[26];
}node;
void init(node *n)
{
	int i;
	for(i = 0; i < 26; i++)
		n->arr[i] = NULL;
}
int insert(char string[], node *root)
{
	//printf("Going for %s\n",string);
	int i, j = 0, ans = -1;
	node *p = root;
	while(string[j] != '\0')
	{
		if(p->arr[(int)string[j] - 'a'] == NULL)
		{
			if(ans == -1)
			{
				ans = j + 1;
				//printf("Autocomplete at %d\n",j+1);
			}
			p->arr[(int)string[j] - 'a'] = (node*)malloc(sizeof(node));
			init(p->arr[(int)string[j] - 'a']);
			p = p->arr[(int)string[j] - 'a'];
		}
		else
		{
			p = p->arr[(int)string[j] - 'a'];
		}
		j++;
	}
	if(ans == -1)
		ans = j;
	return ans;
}
void mfree(node *t)
{
	if(t == NULL)
		return;
	else
	{
		int i;
		for(i = 0; i < 26; i++)
			if(t->arr[i] != NULL)
				mfree(t->arr[i]);	    
		free(t);
	}
}
int main()
{
	int t, i, j, n;
	long long int final = 0;
	char ch;
	char temp[1000000];
	node *root;

	scanf("%d", &t);
	for(i = 1; i <= t; i++)
	{
		scanf("%d", &n);
		final = 0;
		root = (node*)malloc(sizeof(node));
		init(root);
		while(n--)
		{
			j = 0;
			scanf("%s", temp);
			final += insert(temp, root);
		}
		printf("Case #%d: %lld\n",i, final);
//		mfree(root);
	}
	return 0;
}

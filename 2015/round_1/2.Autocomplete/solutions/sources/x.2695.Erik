using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Round1_Autocomplete
{
	class Program
	{
		static void Main(string[] args)
		{
			var cases = Read.Int();

			using (var s = new StreamWriter(@"c:\users\krox\Downloads\HackerCup\Autocomplete.out", false))
			{
				for (var t = 0; t < cases; t++)
				{
					var answer = "Case #" + (t + 1) + ": " + Solve() + "\n";
					Console.Write(answer);
					s.Write(answer);
				}
			}

			Console.ReadLine();
		}

		static string Solve()
		{
			var l = new SortedList<string, string>();
			var words = Read.Int();
			int res = 0;
			for(int i=0; i < words; i++)
			{
				var w = Read.String();
				l.Add(w, w);
				var ndx = l.IndexOfKey(w);
				var pfx = Math.Max(
					Cnt(ndx > 0 ? l.Keys[ndx-1] : "", w),
					Cnt((ndx+1) < l.Count ? l.Keys[ndx+1] : "",w)
					);
				res += Math.Min(w.Length, pfx);
			}

			return res + "";
		}

		static int Cnt(string a, string b)
		{
			return a.Zip(b, (x, y) => x == y).TakeWhile(t => t).Count() + 1;
		}
	}

	public static class Read
	{
		private static string[] input = ReadAllText().Split(new[] { ' ', '\r', '\n', '\t' }, StringSplitOptions.RemoveEmptyEntries);

		private static int indexer = 0;

		public static int Int()
		{
			return int.Parse(input[indexer++]);
		}

		public static int[] Ints(int c)
		{
			return Enumerable.Range(0, c).Select(t => Int()).ToArray();
		}

		public static long Long()
		{
			return long.Parse(input[indexer++]);
		}

		public static string String()
		{
			return input[indexer++];
		}

		private static string ReadAllText()
		{
			return File.ReadAllText(@"c:\users\krox\Downloads\HackerCup\Autocomplete.in");
		}
	}
}

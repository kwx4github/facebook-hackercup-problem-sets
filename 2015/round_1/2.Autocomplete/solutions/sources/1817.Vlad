class Trie(object):
    def __init__(self):
        self.children = {}
        self.flag = False # Flag to represent that a word ends at this node
        self.first_word = ""
        
    def add(self, char, word):
        self.children[char] = Trie()
        self.children[char].first_word = word

    def insert(self, word):
        node = self
        for char in word:
            if char not in node.children:
                node.add(char, word)
            node = node.children[char]
        node.flag = True

    def find_pos(self, word):
        node = self
        n = 0
        for char in word:
            node = node.children[char]
            if node.first_word == word:
                return n+1
            else:
                n += 1
                
        return n
            

def process(ls):
    t = Trie()
    for l in ls:
        t.insert(l)

    total = 0
    for l in ls:
        total += t.find_pos(l)

    return total
            

T = int(raw_input())
for t in xrange(T):
    N = int(raw_input())
    lines = []
    for n in xrange(N):
        lines.append(raw_input())
                
    print "Case #%i: %s" % (t+1, process(lines))

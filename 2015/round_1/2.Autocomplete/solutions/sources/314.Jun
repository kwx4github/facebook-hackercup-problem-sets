import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.math.BigInteger;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author shu_mj @ http://shu-mj.com
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("Autocomplete.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		solver.solve(1, in, out);
		out.close();
	}
}

class Autocomplete {
    Scanner in;
    PrintWriter out;

    public void solve(int testNumber, Scanner in, PrintWriter out) {
        this.in = in;
        this.out = out;
        run();
    }

    void run() {
        int n = in.nextInt();
        for (int i = 0; i < n; i++) {
            out.printf("Case #%d: ", i + 1);
            solve();
        }
    }

    private void solve() {
        int n = in.nextInt();
        String[] ss = new String[n];
        for (int i = 0; i < n; i++) {
//            if (in.hasNext()) 
                ss[i] = in.next();
        }
        Dic dic = new Dic();
        int res = 0;
        for (String s : ss) {
            if (s == null) continue;
            dic.insert(s);
            res += dic.getAns(s);
        }
        out.println(res);
    }
    class Dic {
        Node root = new Node();
        void insert(String s) {
            Node crt = root;
            for (char c : s.toCharArray()) {
                if (crt.cs[c - 'a'] == null) {
                    crt.cs[c - 'a'] = new Node();
                }
                crt = crt.cs[c - 'a'];
                crt.cnt++;
            }
        }
        int getAns(String s) {
            Node crt = root;
            int times = 0;
            for (char c : s.toCharArray()) {
                times++;
                crt = crt.cs[c - 'a'];
                if (crt.cnt == 1) return times;
            }
            return times;
        }
    }
    class Node {
        Node[] cs = new Node[26];
        int cnt = 0;
    }
}

class Scanner {
    BufferedReader br;
    StringTokenizer st;

    public Scanner(InputStream in) {
        br = new BufferedReader(new InputStreamReader(in));
        eat("");
    }

    private void eat(String s) {
        st = new StringTokenizer(s);
    }

    public String nextLine() {
        try {
            return br.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    public boolean hasNext() {
        while (!st.hasMoreTokens()) {
            String s = nextLine();
            if (s == null)
                return false;
            eat(s);
        }
        return true;
    }

    public String next() {
        hasNext();
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


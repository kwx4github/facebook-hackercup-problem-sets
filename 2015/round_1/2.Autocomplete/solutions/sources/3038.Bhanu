import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayDeque;
import java.util.InputMismatchException;
import java.util.Queue;
import java.util.Scanner;

public class AutoComplete {
	public static void main(String[] args) throws FileNotFoundException {
		// InputStream inputStream = System.in;
		// OutputStream outputStream = System.out;
		OutputStream outputStream = new FileOutputStream(new File("autocomplete_out.txt"));
		OutputWriter out = new OutputWriter(outputStream);
		Solver solver = new Solver();
		solver.solve(out);
		out.close();
	}
}

class Solver {
	private static final int R = 27;
	private int charsToType = 0;

	private static class Node {
		private Object val;
		private Node[] next = new Node[R];
	}

	public class TrieST<Value> {
		private Node root;

		public TrieST() {
			root = new Node();
		}

		public int putAndReturnCount(String key) {
			charsToType = 1;
			putIterative(key);
			return charsToType;
		}

		private void putIterative(String key) {
			int level = 0, index;
			Node x = root;
			charsToType = -1;

			for (level = 0; level < key.length(); level++) {
				index = key.charAt(level) - 97;
				if (x.next[index] == null) {
					if (charsToType == -1)	
						charsToType = level+1;
					x.next[index] = new Node();
				}
				x = x.next[index];
			}
			if (charsToType == -1)
				charsToType = key.length();
		}

	}

	public void solve(OutputWriter out) throws FileNotFoundException {
		Scanner scanner = new Scanner(new File("autocomplete.txt"));
		int t = scanner.nextInt();
		int n, a, b, k;

		for (int m = 0; m < t; ++m) {
			int charsToType = 0;
			TrieST<Boolean> trie = new TrieST<Boolean>();
			n = scanner.nextInt();
			for (int i = 0; i < n; i++) {
				String input = scanner.next();
				charsToType += trie.putAndReturnCount(input);
			}
			out.printLine("Case #" + (m + 1) + ": " + charsToType);
		}
	}

}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public String readString() {
		char c = (char) read();
		while (isSpaceChar(c))
			c = (char) read();
		StringBuilder inputStr = new StringBuilder();

		do {
			inputStr.append(c);
			c = (char) read();
		} while (!isSpaceChar(c));
		return inputStr.toString();
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public static boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}
}

class IOUtils {
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}
}

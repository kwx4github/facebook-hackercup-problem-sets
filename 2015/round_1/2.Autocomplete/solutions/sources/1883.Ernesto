import java.io.IOException;

public class Autocomplete {
	
  static Reader sc = new Reader();

  public static class Trie {
		private Trie[] next = new Trie[26];
		
		public static void add(Trie t, char[] s) {
			for (int i = 0; i < s.length; i++) {
				int c = s[i] - 'a';
				if (t.next[c] == null)
					t.next[c] = new Trie();
				t = t.next[c];
			}
		}
		
		public static long prefix(Trie t, char[] s) {
			long ans = 0;
			for (int i = 0; i < s.length; i++) {
				int c = s[i] - 'a';
				ans++;
				if (t.next[c] == null)
					break;
				t = t.next[c];
			}
			return ans;
		}
	}

	public static void main(String[] args) throws IOException {
		int T = sc.nextInt();
		for (int t = 1; t <= T; t++) {
			int N = sc.nextInt();
			Trie trie = new Trie();
			long ans = 0;
			for (int i = 0; i < N; i++) {
				char[] c = sc.next().trim().toCharArray();
				ans += Trie.prefix(trie, c);
				Trie.add(trie, c);
			}
			System.out.printf("Case #%d: %d\n", t, ans);
		}
	}

	static class Reader {
		final private int BUFFER_SIZE = 1 << 12;
		private byte[] buffer;
		private int bufferPointer, bytesRead;

		public Reader() {
			buffer = new byte[BUFFER_SIZE];
			bufferPointer = bytesRead = 0;
		}

		private void fillBuffer() throws IOException {
			bytesRead = System.in.read(buffer, bufferPointer = 0, BUFFER_SIZE);
			if (bytesRead == -1)
				buffer[0] = -1;
		}

		private byte read() throws IOException {
			if (bufferPointer == bytesRead)
				fillBuffer();
			return buffer[bufferPointer++];
		}

		public String next() throws IOException {
			StringBuilder sb = new StringBuilder();
			byte c;
			while ((c = read()) <= ' ') {
				if (c == -1)
					return null;
			}
			;
			do {
				sb.append((char) c);
			} while ((c = read()) > ' ');
			if (sb.length() == 0)
				return null;
			return sb.toString();
		}

		public String nextLine() throws IOException {
			StringBuilder sb = new StringBuilder();
			byte c;
			boolean read = false;
			while ((c = read()) != -1) {
				if (c == '\n') {
					read = true;
					break;
				}
				if (c >= ' ')
					sb.append((char) c);
			}
			if (!read)
				return null;
			return sb.toString();
		}

		public int nextInt() throws IOException {
			int ret = 0;
			byte c = read();
			while (c <= ' ')
				c = read();
			boolean neg = (c == '-');
			if (neg)
				c = read();
			do {
				ret = ret * 10 + c - '0';
			} while ((c = read()) >= '0' && c <= '9');
			if (neg)
				return -ret;
			return ret;
		}

		public long nextLong() throws IOException {
			long ret = 0;
			byte c = read();
			while (c <= ' ')
				c = read();
			boolean neg = (c == '-');
			if (neg)
				c = read();
			do {
				ret = ret * 10L + c - '0';
			} while ((c = read()) >= '0' && c <= '9');
			if (neg)
				return -ret;
			return ret;
		}

		public double nextDouble() throws IOException {
			double ret = 0, div = 1;
			byte c = read();
			while (c <= ' ')
				c = read();
			boolean neg = (c == '-');
			if (neg)
				c = read();
			do {
				ret = ret * 10 + c - '0';
			} while ((c = read()) >= '0' && c <= '9');
			if (c == '.')
				while ((c = read()) >= '0' && c <= '9')
					ret += (c - '0') / (div *= 10);
			if (neg)
				return -ret;
			return ret;
		}

		public int[] na(int n) throws IOException {
			int[] a = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public int[][] nm(int n, int m) throws IOException {
			int[][] map = new int[n][m];
			for (int i = 0; i < n; i++)
				map[i] = na(m);
			return map;
		}

		public void close() throws IOException {
			if (System.in == null)
				return;
			System.in.close();
		}
	}
}

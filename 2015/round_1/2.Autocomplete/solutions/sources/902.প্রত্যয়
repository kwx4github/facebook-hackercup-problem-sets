#include <bits/stdc++.h>
using namespace std;

namespace trie {
    struct node {
        int data;
        vector<int> nxt;
        node() : data(0), nxt(vector<int>(26)) {}
    };

    struct trieMachine {
        vector<node> pool;
        trieMachine() : pool(vector<node>(1)) { pool.reserve(2000000); }
        static int index(char c) {
            if (islower(c)) return c-'a';
            else return -1;
        }
        int extend(char c, int cur) {
            int nxtnode = index(c);
            if (!pool[cur].nxt[nxtnode]) {
                pool[cur].nxt[nxtnode] = pool.size();
                pool.push_back(node());
            }
            return pool[cur].nxt[nxtnode];
        }
        int go(char c, int cur) {
            int nxtnode = index(c);
            return pool[cur].nxt[nxtnode];
        }
        node& operator[](int i) {
            return pool[i];
        }
    };
}

int main() {
    freopen("autocomplete.txt", "rt", stdin);
    freopen("autocomplete.out.txt", "wt", stdout);

    int T;
    cin>>T;
    for (int cas=1; cas<=T; ++cas) {
        int n;
        cin>>n;
        int Action = 0;
        trie::trieMachine X;
        for (int i=0; i<n; ++i) {
            string s;
            cin>>s;
            int c = 0, l = 0;
            bool done = false;
            for (char x : s) {
                ++l;
                c = X.extend(x, c);
                if (!done and X[c].data == 0) {
                    done = true;
                    Action += l;
                }
                ++X[c].data;
            }
            if (!done) {
                Action += l;
            }
        }
        cout<<"Case #"<<cas<<": "<<Action<<endl;
    }

    return 0;
}

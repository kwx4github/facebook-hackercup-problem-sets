#include <stdio.h>
#include <string.h>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <queue>
#include <cassert>
using namespace std;

/*
 * Author: Veselin Georgiev
 * Problem: "Autocomplete" (B)
 * Contest: Facebook Hacker Cup 2015
 */

#define FOR(i,n) for (int i = 0; i < n; i++)
#define abs(x) ((x)<0?(-(x)):(x))
#define REP(i,v) for (unsigned i = 0; i < v.size(); i++)
#define RL(i,v) for (unsigned i = 0; i < v.length(); i++)
typedef long long ll;

struct Trie {
	Trie* next[27];
	int words;
	Trie() { memset(next, 0, sizeof(next)); words = 0; }
	~Trie() {
		FOR(i, 27) if (next[i]) delete next[i];
	}
};

void addWord(Trie* t, const string& s)
{
	RL(i, s) {
		int x = s[i] - 'a';
		assert(x >= 0 && x < 26);
		t->words++;
		if (t->next[x] == NULL) {
			t->next[x] = new Trie;
		}
		t = t->next[x];
	}
	t->words++;
}

int minPrefix(Trie* t, const string& s)
{
	t = t->next[s[0] - 'a'];
	int i = 1;
	while (t->words > 1 && i < (int) s.length()) {
		t = t->next[s[i] - 'a'];
		i++;
	}
	return i;
}

int main(void)
{
//	freopen("/home/vesko/hackercup/B-large.in", "rt", stdin);
	
	int T;
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		Trie* t = new Trie;
		int n;
		scanf("%d", &n);
		int cost = 0;
		FOR(i, n) {
			static char s[1000100];
			scanf("%s", s);
			addWord(t, s);
			cost += minPrefix(t, s);
		}
		printf("Case #%d: %d\n", tc, cost);
// 		delete t;
	}
	
	return 0;
}

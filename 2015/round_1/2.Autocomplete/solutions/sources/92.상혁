#include<algorithm>
#include<string>
#include<iostream>
#include<vector>
using namespace std;

const int ALT = 26;

class Trie{
public:
	Trie* children[ALT];
	Trie(){
		for (int i = 0; i < ALT; i++) children[i] = nullptr;
	}

	void insert(const string& str, int index){
		if (str.size() <= index) return;
		int here = str[index] - 'a';
		if (children[here] == nullptr) children[here] = new Trie();
		children[here]->insert(str, index + 1);
	}

	int query(const string& str, int index){
		if (str.size() <= index) return str.size();
		int here = str[index] - 'a';
		if (children[here] == nullptr) return index + 1;
		return children[here]->query(str, index + 1);
	}

	~Trie(){
		for (int i = 0; i < ALT; i++) delete children[i];
	}
};

int main(){
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++){
		cout << "Case #" << tc << ": ";
		int n;
		cin >> n;
		Trie* root = new Trie();
		int ans = 0;
		for (int i = 0; i < n; i++){
			string str;
			cin >> str;
			ans += root->query(str, 0);
			root->insert(str, 0);
		}
		cout << ans << endl;
		delete root;
	}
}
/////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <string>
#include <sstream>
#include <iostream>
#include <deque>
#include <cctype>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <cstring>

using namespace std;

class trie {
private:
	struct node {
		int children[26];
		int words;
		int prefixes;

		node() {
			for (int i = 0; i < 26; ++i)
				children[i] = -1;
			words = 0;
			prefixes = 0;
		}
	};
	vector<node> nodes;
public:
	trie() {
		nodes.reserve(1000000);
		reset();
	}
	void reset() {
		nodes.clear();
		nodes.push_back(node()); // dummy
	}
	void add_word(const string& s) {
		int cur = 0;

		for (int i = 0; i < (int) s.size(); ++i) {
			++nodes[cur].prefixes;
			if (nodes[cur].children[s[i] - 'a'] == -1) {
				nodes[cur].children[s[i] - 'a'] = nodes.size();
				nodes.push_back(node());
			}
			cur = nodes[cur].children[s[i] - 'a'];
		}
		++nodes[cur].words;
		++nodes[cur].prefixes;
	}
	int count(const string& s) {
		int cur = 0;

		for (int i = 0; i < (int) s.size(); ++i) {
			int x = nodes[cur].children[s[i] - 'a'];
			assert(x != -1);
			cur = x;
			if (nodes[cur].prefixes == 1)
				return i + 1;
		}
		return s.size();
	}
};

trie tr;

int main() {
	int cases;
	string s;

	cin >> cases;

	for (int caseno = 1; caseno <= cases; ++caseno) {
		cout << "Case #" << caseno << ": ";
		int N;
		cin >> N;
		tr.reset();
		long long res = 0;
		for (int i = 0; i < N; ++i) {
			cin >> s;
			tr.add_word(s);
			res += tr.count(s);
		}
		cout << res << endl;
	}
	return 0;
}


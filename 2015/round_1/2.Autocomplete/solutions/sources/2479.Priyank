#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <queue>
#include <cmath>
#include <ctime>
#include <climits>
#include <iomanip>
#include <sstream>
using namespace std;

typedef long long LL;
#define tr(container, it)for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = (a); i < (int)(b); i++)

int GCD (int a, int b) { if (!a) return b; return GCD(b%a, a);}

struct trie {
    vector<trie*> child;
    trie() {
        child.resize(26);
    }
    int addString(const string& pat) {
        int ret = pat.size();
        trie * cur = this;
        bool pref = true;
        for (int i = 0; i < pat.size(); i++) {
            int ch = pat[i] - 'a';
            if (cur->child[ch] == nullptr) {
                cur->child[ch] = new trie();
                if (pref) ret = i + 1;
                pref = false;
            }
            cur = cur->child[ch];
        }
        return ret;
    }
};

int main() {
    clock_t startTime = clock();
    ios_base::sync_with_stdio(false);

    int t; cin>>t;
    int tno = 1;
    while (t--) {
        int n; cin>>n;
        trie * root = new trie();
        int ans = 0;
        REP(i, 0, n) {
            string s; cin>>s;
            ans += root->addString(s);
        }
        cout<<"Case #"<<tno++<<": "<<ans<<"\n";
    }

    clock_t endTime = clock();
    cerr<<"\nTime:"<< double(endTime - startTime) / CLOCKS_PER_SEC <<" seconds\n" ;
    return 0;
}

-- {-# LANGUAGE ScopedTypeVariables #-}
-- {-# LANGUAGE Rank2Types #-}
-- {-# LANGUAGE BangPatterns #-}
-- {-# LANGUAGE LambdaCase #-}
import Control.Monad
import Control.Applicative
import Data.List
import Data.Bits
import Data.Char
import Data.Ord
import Data.Maybe
import Data.Tuple
import qualified System.IO
import qualified Data.Map as M
import qualified Data.ByteString.Char8 as B
import Control.DeepSeq
import qualified Data.Sequence as Seq
import Data.Sequence ((<|),(|>),(><),viewl,viewr,ViewL(..),ViewR(..))
import Control.Monad.State

main = gcj $ do
  [n] <- map read . words <$> getLine
  wds <- replicateM n $ B.unpack <$> B.getLine
  return . show $ solve wds

solve :: [S] -> Z
solve strs = sum $ flip evalState emptyTrie $ forM strs $ \ str -> do
  t <- get
  let k = foo str t
  put $ addTrie str t
  return k

foo :: S -> Trie -> Z
foo [] t = 0
-- foo [c] t = 1
foo (c:cs) t = 1 +
  case M.lookup c (unTrie t) of
       Nothing -> 0
       (Just u) -> foo cs u

data Trie = Trie { unTrie :: M.Map Char Trie }

addTrie :: S -> Trie -> Trie
addTrie [] = id
addTrie (c:cs) = Trie . M.alter foo c . unTrie  where
  foo Nothing = foo (Just emptyTrie)
  foo (Just t) = Just $ addTrie cs t

emptyTrie :: Trie
emptyTrie = Trie M.empty

type Z = Int
type Q = Rational
type R = Double
type S = String

fint :: (Integral a, Num b) => a -> b
fint = fromIntegral

yesno :: Bool -> S
yesno True = "yes"
yesno False = "no"

gcj solver = do
  System.IO.hSetBuffering System.IO.stdout System.IO.NoBuffering
  t <- read <$> getLine
  forM_ [1..t] $ \num -> solver >>= \ans ->
    putStrLn $ "Case #"++show num++": "++ans
    -- putStrLn ("Case #"++show num++":") >> mapM_ putStrLn ans

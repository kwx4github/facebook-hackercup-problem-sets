#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>
#include <map>

using namespace std;

#define LOG(x) cerr << #x << " = " << (x) << "\n"

typedef long long llint;
typedef pair<int,int> pii;
const int MAXLEN = 1000100;

struct prefix_trie_node {
  map<char,prefix_trie_node*> next;
};

void clear(prefix_trie_node *p) {
  for (auto t : p->next)
    clear(t.second);
  delete p;
}

void solve() {
  int n;
  scanf("%d", &n);
  prefix_trie_node *root = new prefix_trie_node;

  int ans = 0;
  for (int i = 0; i < n; ++i) {
    static char word[MAXLEN];
    scanf("%s", word);
    prefix_trie_node *current = root;
    bool ok = false;

    for (char *p = word; *p; ++p) {
      if (current->next.count(*p)) {
        ++ans;
      } else {
        ok = true;
        current->next[*p] = new prefix_trie_node;
      }
      current = current->next[*p];
    }
    ans += ok;
  }

//  clear(root);
  printf("%d\n", ans);
}

int main() {
  int t; scanf("%d", &t);
  for (int i = 0; i < t; ++i) {
    printf("Case #%d: ", i+1);
    solve();
  }
  return 0;
}


#include<fstream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
using namespace std;
 
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 
// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[],int &ans)
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;

	bool first=false;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
			if(!first)
			{
				first=true;
				ans=ans+level+1;
			}
            pCrawl->children[index] = getNode();
        }
 
        pCrawl = pCrawl->children[index];
    }
	if(!first)
		ans=ans+level;
 
    // mark last node as leaf
    pCrawl->value = pTrie->count;
}

char str[1000005];

int main()
{
	ifstream fin("inp.txt");
	ofstream fout("out.txt");
	int t,n,i,ans,k;
	fin>>t;
	for(k=1;k<=t;k++)
	{
		trie_t trie;
		initialize(&trie);
		ans=0;
		fin>>n;
		for(i=0;i<n;i++)
		{
			fin>>str;
			insert(&trie,str,ans);
		}
		fout<<"Case #"<<k<<": "<<ans<<"\n";
	}
}
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <set>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <utility>
#include <iterator>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <string>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cctype>
#include <fstream>
#include <climits>
#include <numeric>
#include <bitset>
#include <complex>
#include <functional>
#include <list>
using namespace std;
typedef long long int LL;
typedef unsigned long long int uLL;
inline int _Int() { char INPUT[15]; scanf("%s",INPUT); return atoi(INPUT); }
inline LL _LL() { char INPUT[70]; scanf("%s",INPUT); return atoll(INPUT); }
LL bigMod(LL A,LL P,int M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=(R*A)%M; A=(A*A)%M; } return R; } /** (A^P) % M **/
LL bigMul(LL A,LL B,LL M) { LL R=0; for(A%=M; B; B>>=1) { if(B&1) R=(R+A)%M; A=(A+A)%M; } return R; } /** (A*B) % M **/
LL _bigMod(LL A,LL P,LL M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=bigMul(R,A,M); A=bigMul(A,A,M); } return R; } /** advance bigMod **/
template<class T>T GCD(T x, T y) { while(x) x^=y^=x^=y%=x; return y; } /** GCD(a,b) **/
#define pb  push_back
#define pob pop_back
#define pi  acos(-1)
/*************************************************************************************************************************
**                                            Syed Zafrul Lipu (ShockProof)                                              *
**                                            CSE, University of Asia Pacific                                            *
**************************************************************************************************************************/

const int M=1000099;

char s[1000009];

struct nodeDesign{
    bool ends;
    int next[26];
} N[M];

int non;

int _insert() {
    int len=strlen(s);
    int now=0, ret=len;
    for(int i=0; i<len; i++) {
        int id = s[i]-'a';
        if( N[now].next[id]==0 ){
            if(ret==len) ret=i+1;
            N[now].next[id]=++non;
        }
        now=N[now].next[id];
    }
    N[now].ends=1;
    return ret;
}

int main()
{
    freopen( "autocomplete.txt", "r",  stdin);
    freopen( "autocomplete_output.txt", "w", stdout);

    int test, Case=0;
    scanf("%d",&test);
    while( test-- ) {
        int n;
        scanf("%d",&n);

        LL ans=non=0;
        for(int i=0; i<M; i++) {
            N[i].ends=0;
            for(int j=0; j<26; j++) {
                N[i].next[j]=0;
            }
        }

        for(int i=0; i<n; i++) {
            scanf("%s",s);
            ans+=_insert();
        }
        printf("Case #%d: %d\n",++Case, ans );
    }
    return 0;
}

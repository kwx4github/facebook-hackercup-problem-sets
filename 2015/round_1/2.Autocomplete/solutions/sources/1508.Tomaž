#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <math.h>
#include <queue>
#include <list>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <ctime>
using namespace std;

#define ALL(c) (c).begin(),(c).end()
#define IN(x,c) (find(c.begin(),c.end(),x) != (c).end())
#define REP(i,n) for (int i=0;i<(int)(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define INIT(a,v) memset(a,v,sizeof(a))
#define SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
template<class A, class B> A cvt(B x) { stringstream ss; ss<<x; A y; ss>>y; return y; }

typedef pair<int,int> PII;
typedef long long int64;

#define MOD 1000000007

int tests;
int n,nw;
char w[1000009];

struct node {
	node *next[30] = {};
};

node *tree;

int put() {
	node *nd=tree;
	int st=0,press=1;
	REP (i,nw) {
		int c=w[i]-'a';
		st+=press;
		if (nd->next[c]==0) {
			nd->next[c] = new node;
			press=0;
		}
		nd=nd->next[c];
	}
	return st;
}

void destroy() {
	queue<node*> todo;
	todo.push(tree);
	while (!todo.empty()) {
		node *nd = todo.front();
		todo.pop();
		REP (c,30) if (nd->next[c]!=0) {
			todo.push(nd->next[c]);
		}
		delete nd;
	}
}

int main() {
	freopen("autocomplete.txt","r",stdin);
	freopen("autocomplete.out","wb",stdout);
	scanf("%d",&tests);
	FOR (test,1,tests) {
		cerr << test << endl;
		scanf("%d",&n);
		tree = new node;
		int r=0;
		REP (i,n) {
			scanf("%s",w);
			nw=strlen(w);
			r+=put();
		}
		destroy();
		printf("Case #%d: %d\n",test,r);
	}
	return 0;
}

#include<bits/stdc++.h>
#define FOR(i,a,b) for (int i=(a),_b=(b);i<=_b;i=i+1)
#define REP(i,n) for (int i=0,_n=(n);i<_n;i=i+1)
#define FORE(i,v) for (__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)
using namespace std;
class Dictionary {
private:
    struct Node {
        int cntWord;
        Node *child[26];
        Node() {
            cntWord=0;
            REP(i,26) child[i]=NULL;
        }
    };
    Node *root;
    void clearTree(Node *&p) {
        if (p==NULL) return;
        REP(i,26) if (p->child[i]!=NULL) clearTree(p->child[i]);
        delete p;
        p=NULL;
    }
    int addWord(const string &s) {
        vector<int> cnt;
        Node *p=root;
        p->cntWord++;
        cnt.push_back(p->cntWord);
        FORE(it,s) {
            if (p->child[*it-'a']==NULL) p->child[*it-'a']=new Node();
            p=p->child[*it-'a'];
            p->cntWord++;
            cnt.push_back(p->cntWord);
        }
        reverse(cnt.begin(),cnt.end());
        int res;
        if (cnt[0]>1) res=s.size();
        else if (cnt.back()==1) res=1;
        else {
            int tmp=upper_bound(cnt.begin(),cnt.end(),1)-cnt.begin();
            res=cnt.size()-tmp;
        }
        vector<int>().swap(cnt);
        //cerr<<"Type "<<res<<" to get "<<s<<endl;
        return (res);
    }
public:
    Dictionary() {
        root=new Node();
    }
    void solve(int tc) {
        int n;
        int res=0;
        assert(cin>>n);
        REP(zz,n) {
            string s;
            assert(cin>>s);
            res+=addWord(s);
        }
        clearTree(root);
        printf("Case #%d: %d\n",tc,res);
    }
};
int main(void) {
    int t;
    assert(cin>>t);
    FOR(i,1,t) {
        Dictionary solver;
        solver.solve(i);
    }
    return 0;
}

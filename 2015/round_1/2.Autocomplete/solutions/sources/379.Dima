#pragma comment(linker, "/STACK:1024000000")

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>

#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <algorithm>

using namespace std;

class Solution
{
    class Trie
    {
        static const int LETTERS_COUNT = 'z' - 'a' + 1;
        struct TrieNode
        {            
            // int isContainedCounter;
            unique_ptr<TrieNode> next[LETTERS_COUNT];

            TrieNode() //:                
                //isContainedCounter(0)
            {}
        };

        unique_ptr<TrieNode> head;
        
        int _add(unique_ptr<TrieNode> &head, 
            string::const_iterator begin, 
            string::const_iterator end, 
            bool must_type = true)
        {
            if (begin == end) return 0;

            bool exist_next = true;
            if (head->next[*begin - 'a'] == nullptr)
            {
                head->next[*begin - 'a'].reset(new TrieNode());
                exist_next = false;
            }

            return (must_type?1:0) + _add(head->next[*begin - 'a'], begin + 1, end, must_type && exist_next);
        }

        /*
        static int dfs(const unique_ptr<TrieNode> &head)
        {
            if (head->isContainedCounter == 1) return 1;

            int answer = head->isContainedCounter;
            for (int i = 0; i < LETTERS_COUNT; i++)
                if (head->next[i] != nullptr)
                    answer += dfs(head->next[i]);
            return answer;
        }
        */
    public:

        int add(const string &word)
        {
            return _add(head, word.begin(), word.end());
        }
        Trie()
        {
            head.reset(new TrieNode());
        }
        /*
        Trie(const vector<string> &words)
        {
            head.reset(new TrieNode());

            for (const string& word : words)
               add(head, word.begin(), word.end());
        }        
        int getAnswer() const
        {
            return dfs(head) - head->isContainedCounter;
        }
        */
    };    
    
public:
    Solution()
    {
        
    }
    int solve(const vector<string> &words)
    {
        Trie trie;
        int answer = 0;
        for (const string &word : words)
        {
            answer += trie.add(word);
        }
        return answer;
    }
    
};

void test();

int main(int argc, char* argv[])
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    // test();
    // return 0;

    int T;
    cin >> T;
    for (int t = 1; t <= T; t++)
    {
        double time = clock();
        int n;
        cin >> n;
        vector<string> words(n);
        for (int i = 0; i < n; i++)
            cin >> words[i];

        Solution solution;
        cout << "Case #" << t << ": " << solution.solve(words) << "\n";
        time = (clock() - time) / CLOCKS_PER_SEC;
        cerr << "Case #" << t << ": " << solution.solve(words) << "\t(" << time << "sec)" << endl;

    }

    return 0;
}

vector<string> generateRandomInput(int max_row_count = 5, int max_len = 5)
{
    int n = 1 + rand() % max_row_count;
    vector<string> input(n);
    int can_use = 1000000;
    for (string &word : input)
    {
        word = string(1 + rand() % min(max_len, can_use), 'a');
        can_use = max(1, can_use - (int)word.size());
        for (int i = 0; i < word.size(); i++)
            word[i] = 'a' + rand() % ('z' - 'a' + 1);
    }
    return input;
}

void test()
{
    double worst_time = 0;
    for (int n = 100000; n <= 100000; n++)
        for (int t = 0; t < 1000000; t++)
    //for (int len = 1; len < 1000000; len++)
    //    for (int n = 1; n < 100000; n++)
        {
            cout << n << "\r";
            vector<string> input = generateRandomInput(n, n);            

            double time = clock();
            Solution solution;
            long long ans = solution.solve(input);
            time = (clock() - time) / CLOCKS_PER_SEC;
            if (time > worst_time)
            {
                worst_time = time;
                cout << "My worst time is " << worst_time << "sec" << endl;
            }
        }    
}


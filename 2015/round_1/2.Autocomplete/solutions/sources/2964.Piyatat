package hackercup15.round1;

import java.io.File;
import java.util.HashMap;
import java.util.Scanner;

public class Autocomplete {
	public static void main(String[] args) throws Exception {
		// init variable
		File inputFile;
		Scanner scanner;
		int T;
		int N;
		String[] s;

		// read input file
		inputFile = new File("input.txt");
		scanner = new Scanner(inputFile);

		T = scanner.nextInt();
		
		scanner.nextLine();
		for (int i = 0; i < T; i++) {
			N = scanner.nextInt();
			s = new String[N];
			for (int j = 0; j < N; j++) {
				s[j] = scanner.next();
			}
			
			// process
			System.out.println("Case #" + (i + 1) + ": " + solve(s));
		}

		scanner.close();
	}

	public static String solve(String[] list_s) {
		int count = 0;
		Node rootNode = new Node("");
		Node node, tempNode;
		char[] list_c;
		boolean hasNewLetter = false;
		
		for (int i = 0; i < list_s.length; i++) {
			node = rootNode;
			list_c = list_s[i].toCharArray();
			hasNewLetter = false;
			for (int j = 0; j < list_c.length; j++) {
				if (node.map_child.containsKey(list_c[j] + "")) {
					count++;
					node = node.map_child.get(list_c[j] + "");
				} else {
					tempNode = new Node(list_c[j] + "");
					node.map_child.put(list_c[j] + "", tempNode);
					node = tempNode;
					hasNewLetter = true;
				}
			}
			if (hasNewLetter) {
				count++;
			}
		}
		
		return count + "";
	}
}

class Node {
	public String value;
	public HashMap<String, Node> map_child;
	
	public Node(String v) {
		this.value = v;
		this.map_child = new HashMap<String, Node>();
	}
	
	public String toString() {
		return value;
	}
}

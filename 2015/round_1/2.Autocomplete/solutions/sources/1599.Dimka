#include <algorithm>
#include <iterator>
#include <iostream>
#include <utility>
#include <string>
#include <vector>
#include <map>

using namespace std;

typedef long long ll;

struct trie
{
  struct node
  {
    map<char, int> go_;

    int has(char ch)
    {
      auto it = go_.find(ch);
      if( it != go_.end() )
        return it->second;

      return -1;
    }
  };

  trie()
  {
    nodes_.push_back(node());
  }

  int add(const std::string& word)
  {
    int add_cnt = 0, cur_node = 0, n = word.size();

    for(int i = 0; i < n; i++)
    {
      char cur_ch = word[i];
      int go_to = nodes_[cur_node].has(cur_ch);

      if( go_to == -1 )
      {
        nodes_.push_back(node());
        nodes_[cur_node].go_[cur_ch] = (nodes_.size() - 1);
        cur_node = nodes_.size() - 1;
        add_cnt++;
      }
      else
      {
        cur_node = go_to;
      }
    }

    return add_cnt;
  }

  vector<node> nodes_;
};

int main()
{
  cin.sync_with_stdio(false);
  cout.sync_with_stdio(false);

  int t;

  cin >> t;

  int n = 0;
  for(int test = 1; test <= t; test++)
  {
    cin >> n;
    trie tr;

    string word;
    ll out = 0;

    for(int i = 0; i < n; i++)
    {
      cin >> word;
      int add_cnt = tr.add(word);
      //cout << word << " " << add_cnt << endl;
      out += (word.size() - add_cnt + (add_cnt != 0));
    }
    
    cout << "Case #" << test << ": " << out << endl;
  }

	return 0;
}

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back

#define debug if(printf("GD "))
#define mod 1000000007

ll ans = 0;

#define ALPHABET_SIZE 26
 
struct node {
    int data;
    struct node* link[ALPHABET_SIZE];
};
 
struct node* root = NULL;
 
struct node*  create_node() {
    struct node *q = (struct node*)malloc(sizeof(struct node));
    for(int x=0;x<ALPHABET_SIZE;x++)
        q->link[x] = NULL;
    q->data = -1;
    return q;
}
 
// Look at this function like this: (Comparing it with LinkedList traversal for adding a node at the end of the list)
// Keep traversing, (q = q->link[index] instead of q = q->link) until we get q->link[index] == NULL (instead of q->link == NULL)
// When we get NULL, then instead of adding just 1 node and making the previous node point to it, we create as many new nodes
// as the value of (length - level) at that time.
void insert_node(char key[]) {
    int length = strlen(key);
    int index;
    int level = 0;
    bool marked = false;
    if(root == NULL)
        root = create_node();
    struct node *q = root;  // For insertion of each String key, we will start from the root
 
    for(;level < length;level++) {
        // At each level, find the index of the corresponding 
        // character (a-z = 0-26)
        index = key[level] - 'a';
 
        if(q->link[index] == NULL) {
            // Put the value of this character inside q->link[index]
            // and create 1 more node to which this node will point
            q->link[index] = create_node();  // which is : struct node *p = create_node(); q->link[index] = p;
            if(!marked)
            {
                ans = ans+level+1;
                marked = true;
            }
        }
 
        q = q->link[index];
    }
    // Now, the last character(node) of the String key will contain the value of this key
    q->data = level; // Assuming the value of this particular String key is 11       
    if(!marked)
        ans = ans + level;
}

int main()
{
    int t,n,cases=1;
    char str[1000005];
    scanf("%d",&t);
    while(t--)
    {
        root = NULL;
        scanf("%d",&n);
        ans = 0;
        while(n--)
        {
            scanf("%s",str);
            insert_node(str);            
        }
        cout<<"Case #"<<cases++<<": "<<ans<<endl;
    }
    return 0;
}

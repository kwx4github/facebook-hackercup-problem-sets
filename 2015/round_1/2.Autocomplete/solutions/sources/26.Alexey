let w = 256

type trie =
  | Leaf
  | Node of int * trie array

let trie_make () = Leaf

let rec trie_add t s =
  match t, s with
    | Leaf, [] ->
	Node (1, Array.make w Leaf)
    | Leaf, _ :: _ ->
	trie_add (Node (0, Array.make w Leaf)) s
    | Node (k, ts), [] ->
	Node (k + 1, ts)
    | Node (k, ts), c :: s ->
	let t' = trie_add ts.(c) s in
	  ts.(c) <- t';
	  Node (k + 1, ts)

let rec trie_find_uniq t s =
  match t, s with
    | Leaf, _ ->
	assert false
    | Node (k, ts), [] ->
	0
    | Node (k, ts), c :: s ->
	if k = 1
	then 0
	else 1 + trie_find_uniq ts.(c) s


let _ =
  let sb = Scanf.Scanning.stdib in
  let cases = Scanf.bscanf sb "%d " (fun s -> s) in
    for ca = 1 to cases do
      let n = Scanf.bscanf sb "%d " (fun s -> s) in
      let t = ref (trie_make ()) in
      let res = ref 0 in
	for i = 0 to n - 1 do
	  let s = Scanf.bscanf sb "%s " (fun s -> s) in
	  let m = String.length s in
	  let s = Array.init m (fun i -> Char.code s.[i]) in
	  let s = Array.to_list s in
	    t := trie_add !t s;
	    let k = trie_find_uniq !t s in
	    let k = max k 1 in
	      res := !res + k;
	done;
	Printf.printf "Case #%d: %d\n" ca !res
    done

#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <stack>
#include <cassert>
#include <cstring>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#define VAR(i,v) __typeof(v) i = (v)
#define SIZE(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define REP(i,b) for(int i=0; i<(b); ++i)
#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define NL printf("\n")

using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

const int MOD = 1000000009;
const int INF = 2147483640;
const int MAXN = 1000005;
char w[MAXN];
int t;

int add_word(unordered_set<int>& S) {
	scanf("%s", w+1);
	int m = strlen(w+1);
	VI h(m+1);
	h[1] = w[1];
	FOR(i,2,m) h[i] = h[i-1] * MOD + w[i];

	int best = m;
	int lo = 1, hi = m;
	while(lo <= hi) {
		int mid = lo + (hi-lo) / 2;
		if(S.find(h[mid]) == S.end() && S.find(h[mid-1]) != S.end()) {
			best = mid;
			break;
		}
		if(S.find(h[mid]) == S.end()) {
			hi = mid - 1;
		} else {
			lo = mid + 1;
		}
	}

	FOR(i,1,m) S.insert(h[i]);

	string r;
	FOR(i,1,best) r += w[i];

	return best;
}

int main() {
	scanf("%d", &t);
	REP(i,t) {
		int n;
		scanf("%d", &n);
		unordered_set<int> S;
		S.insert(0);
		LL res = 0;
		REP(i,n) res += add_word(S);
		printf("Case #%d: %lld\n", i+1, res);
	}

	return 0;
}

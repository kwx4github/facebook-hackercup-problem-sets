import java.util.*;
import java.io.*;

public class Autocomplete {
	
	static void addToTrie(String word, TrieNode root) {
		TrieNode currentNode = root;
		for (int i=0; i<word.length(); i++) {
			int symbolIndex = (int) (word.charAt(i) - 'a');
			currentNode.countWords++;
			if (currentNode.children == null) {
				currentNode.children = new TrieNode[26];
			}
			if (currentNode.children[symbolIndex] == null) {
				TrieNode child = new TrieNode();
				child.distanceFromRoot = 1 + currentNode.distanceFromRoot;
				currentNode.children[symbolIndex] = child;
			}
			currentNode = currentNode.children[symbolIndex];
		}
		currentNode.countWords++;
		currentNode.isEndOfWord = true;
	}
	
	static void output(PrintWriter pw, int testNum, long answer) {
		pw.println("Case #" + testNum + ": " + answer);
	}
	
	static long traverseCount(TrieNode root) {
		Queue<TrieNode> queue = new LinkedList<TrieNode>();
		queue.add(root);
		long result = 0;
		while (!queue.isEmpty()) {
			TrieNode node = queue.poll();
			if (node != root && node.countWords == 1) {
				result += node.distanceFromRoot;
			}
			else if (node != root && node.isEndOfWord) {
				result += node.distanceFromRoot - 1;
			}
			if (node.countWords==1) continue;
			for (int i=0; i<26; i++) {
				if (node.children[i] != null) {
					queue.add(node.children[i]);
				}
			}
		}
		return result;
	}
	
	static int countMinimalPrefix(String word, TrieNode root) {
		if (root.countWords == 1) {
			return 1;
		}
		TrieNode current = root;
		for (int i=0; i<word.length(); i++) {
			int ind = (int) (word.charAt(i)-'a');
			if (current.children[ind].countWords == 1) {
				return current.distanceFromRoot+1;
			}
			current = current.children[ind];
		}
		return word.length();
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
		rd = new BufferedReader(new FileReader("/Users/Lasha/Desktop/autocomplete.txt"));
		PrintWriter pw = new PrintWriter(System.out);
		pw = new PrintWriter(new FileWriter("/Users/Lasha/Desktop/output.txt"));
		int tests = Integer.parseInt(rd.readLine());
		for (int test=0; test<tests; test++) {
			TrieNode root = new TrieNode();
			int numWords = Integer.parseInt(rd.readLine());
			long res = 0;
			for (int i=0; i<numWords; i++) {
				String word = rd.readLine();
				addToTrie(word, root);
				res += countMinimalPrefix(word, root);
			}
			output(pw, test+1, res);
		}
		pw.flush();
		pw.close();
		rd.close();
	}
	
}

class TrieNode {

	public boolean isEndOfWord = false;
	public int countWords = 0, distanceFromRoot = 0;
	public TrieNode[] children;

}

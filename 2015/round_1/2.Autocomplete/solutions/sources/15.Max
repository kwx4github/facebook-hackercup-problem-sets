#include <cstdio>
#include <set>
#include <string>
#include <algorithm>
using namespace std;

struct Cmp
{
    Cmp(){}
    bool operator()(string* a, string* b)
    {
        for (int i = 0; i < min(a->size(), b->size()); i++)
            if (a->at(i) != b->at(i))
                return a->at(i) < b->at(i);
        return a->size() < b->size();
    }
};

set<string*, Cmp> S;

const int L = 1000500;
char buf[L];

typedef long long llong;

int lcp(string* a, string* b)
{
    int ans = 0;
    int i;
    for (i = 0; i < min(a->size(), b->size()); i++)
    {
        ans = i + 1;
        if (b->at(i) != a->at(i))
            break;
    }
    if (i == a->size())
        ans++;
    return ans;
}

const int N = 100500;
string str[N];

void solve(int tc) 
{
    S.clear();
    int n;
    scanf("%d ", &n);
    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        gets(buf);
        str[i] = buf;
        set<string*, Cmp>::iterator it = S.lower_bound(&str[i]);
        vector<string*> cl;
        if (it != S.end())
            cl.push_back(*it);
        if (it != S.begin())
            cl.push_back(*(--it));
        int sm = 1;
        for (int j = 0; j < cl.size(); j++)
            sm = max(sm, (lcp(cl[j], &str[i])));
        ans += sm;
        S.insert(&str[i]);
    }
    printf("Case #%d: %d\n", tc, ans);
    fflush(stdout);
}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve(i + 1);

}


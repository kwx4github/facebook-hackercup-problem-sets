#include <stdio.h>
#include <string.h>
#include <memory.h>
#include <stdlib.h>

struct Node {
	Node** children;
};

Node* root;

void addNode(Node* cur,char c) {
	Node* nextNode = (Node*)malloc(sizeof(Node));;
	nextNode->children = (Node**)malloc(sizeof(Node)*('z'-'a'+1));
	
	for(int i = 'a';i <= 'z';i++) {
		nextNode->children[i-'a'] = NULL;
	}
	
	cur->children[c-'a'] = nextNode;	
}

int addWord(Node* cur, char* word, int start,int end,bool notFound) {
	
	if(start >= end) return 0;
	
	char current = word[start];
	
	if(cur->children[current-'a'] != NULL) {
		//printf("wordExist: %s %c %d\n",word,current,end);
	
		return 1 + addWord(cur->children[current-'a'], word,start+1,end,notFound);
	} else {
		//printf("wordNotExist: %s %c %d\n",word,current,end);
	
		addNode(cur,current);
		return 1*notFound + addWord(cur->children[current-'a'], word, start+1, end,false);
	}
	return 0;
	
}

void deleteTree(Node* cur) {
	for(int i = 'a';i<= 'z';i++) {
		if(cur->children[i-'a'] != NULL) {
			deleteTree(cur->children[i-'a']);
		}
	}
	delete cur;
}

void printTree(Node* cur) {
	for(int i = 'a';i<= 'z';i++) {
		if(cur->children[i-'a'] != NULL) {
			printf("%c ",i);
			printTree(cur->children[i-'a']);
		}
	}
	printf("\n");

}

int main() {
	int T;
	
	scanf("%d",&T);
	char words[1000010];
	for(int t = 1; t <= T;t++) {
		int N;
		scanf("%d",&N);
		root = (Node*)malloc(sizeof(Node));
		root->children = (Node**)malloc(sizeof(Node)*('z'-'a'+1));
	
		for(int i = 'a';i <= 'z';i++) {
			//printf("init");
			root->children[i-'a'] = NULL;
		}
		long long result = 0;
		for(int i =0; i < N;i++) {
			scanf("%s",words);
			result += addWord(root,words,0,strlen(words),true);
		}		
		//printTree(root);
		
		deleteTree(root);
		
		printf("Case #%d: %lld\n",t,result);
	}

	return 0;
}

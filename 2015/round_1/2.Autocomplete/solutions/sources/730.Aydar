import java.io.*;
import java.util.StringTokenizer;

public class ProbB {
    boolean eof;

    public static void main(String[] args) throws IOException {
        new ProbB().run();
    }

    String next() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "-1";
            }
        }
        return st.nextToken();
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    int nextInt() {
        return Integer.parseInt(next());
    }

    void run() throws IOException {
        String name = "input.txt";
        InputStream input = System.in;
        OutputStream output = System.out;
        try {
            File f = new File(name);
            if (f.exists() && f.canRead()) {
                input = new FileInputStream(f);
                output = new FileOutputStream(name + ".out");
            }
        } catch (Exception e) {
        }

        br = new BufferedReader(new InputStreamReader(input));
        out = new PrintWriter(output);

        solve();

        br.close();
        out.close();
    }

    void solve() {
        int test = nextInt();

        for (int t_id = 0; t_id < test; ++t_id) {
            out.print("Case #" + (t_id + 1) + ": ");

            int n = nextInt();
            Vertex root = new Vertex();

            int ans = 0;

            for (int i = 0; i < n; ++i){
                String s = next();

                Vertex p = root;
                for (int j = 0; j < s.length(); ++j){
                    ++ans;
                    if (p.exist(s.charAt(j))){
                        p = p.a[s.charAt(j) - 'a'];
                    } else {
                        for (int k = j; k < s.length(); ++k){
                            p.add(s.charAt(k));
                            p = p.a[s.charAt(k) - 'a'];
                        }
                        break;
                    }
                }
            }

            out.println(ans);
        }
    }

    class Vertex{
        Vertex[] a;

        Vertex(){
            a = new Vertex[26];
        }

        void add(char c){
            if (a[c - 'a'] == null){
                a[c - 'a'] = new Vertex();
            }
        }

        boolean exist(char c){
            if (a[c - 'a'] == null){
                return false;
            }
            return true;
        }
    }

    class Pair {
        int x;
        int y;
        int p;

        Pair(int x, int y, int p) {
            this.x = x;
            this.y = y;
            this.p = p;
        }
    }
}

#include<iostream>
#include<fstream>

using namespace std;

char inp[1000000+5];

class MNode
{
	public:
	MNode* child[26];
	MNode()
	{
		for(int i=0;i<26;i++) child[i] = NULL;
	}
};

MNode* rootNode;

void init_root()
{
	rootNode = new MNode;
}

int addWord()
{
	int index = 0;
	int count = 0;
	MNode* node = rootNode;
	int cur_index ;
	bool found_new = false;
	
	while(inp[index])
	{
		cur_index = inp[index]-'a';
		
		if(!found_new)
		{
			count++;
		}

		if(node->child[cur_index]==NULL)
		{
			node->child[cur_index] = new MNode;
			found_new = true;
		}		
		
		node = node->child[cur_index];
		
		index++;
	}
	
	return count;
}

void clear_nodes(MNode* n)
{
	if(n==NULL) return;

	for(int i=0;i<26;i++)
	{
		clear_nodes(n->child[i]);

		delete n->child[i];
	}
}

int main(int argc, char* argv[])
{
	ifstream input;
	ofstream output;
	int T,N,t,n;
	int total;
	
	input.open("autocomplete.txt");
	output.open("autocomplete_output.txt");
	
	input >> T;
	for(t=1;t<=T;t++)
	{
		input >> N;
		total = 0;
		init_root();
		
		for(n=0;n<N;n++)
		{
			input >> inp;
			total += addWord();
		}
		
		output << "Case #" << t << ": " << total << endl;
		//clear_nodes(rootNode);
	}

	output.close();
	input.close();

	return 0;
}

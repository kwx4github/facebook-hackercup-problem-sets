#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <memory>
#include <cstring>
#include <cassert>
#include <numeric>
#include <sstream>
#include <complex>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cctype>
#include <unordered_map>
#include <unordered_set>
using namespace std;

#define REP2(i, m, n) for (int i = (int)(m); i < (int)(n); i++)
#define REP(i, n) REP2(i, 0, n)
#define ALL(S) (S).begin(), (S).end()

template <typename T, typename E>
ostream &operator<<(std::ostream &os, const std::pair<T, E> &p){
  return os << "(" << p.first << ", " << p.second << ")";
}

typedef long long ll;

struct node_t {
  int next[26];
  int get_next(char c){
    return next[c - 'a'];
  }

  void set_next(char c, int next_pos){
    next[c - 'a'] = next_pos;
  }
};

const int max_n = 1000 * 1000 + 7;
node_t nodes[max_n];
  
void solve(){
  int N;
  cin >> N;

  int    res       = 0;
  size_t trie_size = 1;
  
  REP(i, N){
    string str;
    cin >> str;
    
    size_t pos = 0;
    bool auto_complete = false;
    
    REP(j, str.size()){
      if (!auto_complete){
        res++;
      }
      
      int next_pos = nodes[pos].get_next(str[j]);
      
      if (next_pos == -1){
        next_pos = trie_size++;
        nodes[pos].set_next(str[j], next_pos);
        auto_complete = true;
      }
      
      pos = next_pos;
    }
  }
  
  REP(i, trie_size){
    memset(nodes[i].next, -1, sizeof(nodes[i].next));
  }
  cout << res << endl;
}

int main(){
  ios::sync_with_stdio(false);
  REP(i, max_n){
    memset(nodes[i].next, -1, sizeof(nodes[i].next));
  }
  
  int T;
  cin >> T;
  
  REP(t, T){
    cout << "Case #" << t + 1 << ": "; solve();
  }
  return 0;
}

#include <cstdio>
#include <cstdlib>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <ctime>
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;

typedef struct trie_node trie_node_t;
struct trie_node {
	int count;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie {
    trie_node_t *root;
    int total;
};

trie_node_t *getNode(void) {
	trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode ) {
		pNode->count = 0;
        for(int i = 0; i < ALPHABET_SIZE; i++) {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}

void initialize(trie_t *pTrie) {
    pTrie->root = getNode();
    pTrie->total = 0;
}

void insert(trie_t *pTrie, string &key) {
    int length = key.size();
    trie_node_t *pCrawl;
 
    pTrie->total++;
    pCrawl = pTrie->root;
	(pCrawl->count)++;
	
    for(int level = 0; level < length; level++ ) {
        int index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] ) {
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
		(pCrawl->count)++;
    }
}

int search(trie_t *pTrie, string &key) {
    int length = key.size();
    trie_node_t *pCrawl;
 
    pCrawl = pTrie->root;
 
    for(int level = 0; level < length; level++ ) {
        int index = CHAR_TO_INDEX(key[level]);
        pCrawl = pCrawl->children[index];
		if(pCrawl->count == 1)
			return level+1;
    }
	return length;
}
 
int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int t;
	cin >> t;
	int ii;
	for(ii = 0; ii < t; ii++) {
		cout << "Case #" << ii+1 << ": ";
		int n;
		cin >> n;
		trie_t trie;
		initialize(&trie);
		int i, types = 0;
		for(i = 0; i < n; i++) {
			string key;
			cin >> key;
			insert(&trie, key);
			types += search(&trie, key);
		}
		cout << types << endl;
	}
    return 0;
}
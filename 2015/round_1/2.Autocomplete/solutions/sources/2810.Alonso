from multiprocessing import Process, Array
import time

class Problem(object):
	def solve(self, p, info, sols):
		decTree = {}
		total = 0
		for line in info:
			lastAdded = decTree
			found = False
			usedChars = 0
			for i in range(len(line)):
				if line[i] not in lastAdded:
					lastAdded[line[i]] = {}
					if not found:
						found = True
						total += i+1

				lastAdded = lastAdded[line[i]]

			if not found:
				total += len(line)

		sols[p] = total
		with open('/tmp/prob_sol', 'a') as f:
			f.write("sol (%d): %s\n" % (p, sols[p]))

probs = int(raw_input())
sols = Array('i', probs)

workers = []
for i in xrange(probs):
	parts = map(int, raw_input().split())
	info = []
	for line in xrange(parts[0]):
		info.append(raw_input())

	p = Problem()
	pr = Process(target=p.solve, args=(i, info, sols))
	pr.start()
	workers.append(pr)

for w in workers:
	w.join()

count = 1
for s in sols:
	print "Case #%d: %s" % (count, s)
	count += 1

#include<bits/stdc++.h>
using namespace std ;

const int BUFFER = 1e6;
const int MAXN = 1e5;

typedef pair<int, char> Edge;
#define node first
#define ch second

struct Hash {
    int operator () (const Edge& p) const {
        return p.ch + p.node * 257;
    }
};

unordered_map<Edge, int, Hash> trie;
char buffer[BUFFER + 5];
int n;

int getNext(const Edge& edge) {
    return trie.insert(make_pair(edge, trie.size() + 1)).first->second;
}

int wordCost(char* word) {
    int cur = 0, len = strlen(word);
    int ret = len;
    for (int c=0;c<len;c++) {
        const Edge& edge = Edge(cur, word[c]);
        if (!trie.count(edge)) 
            ret = min(ret, c + 1);
        cur = getNext(edge);
    }
    return ret;
}

int main() {
    freopen("complete.in","r",stdin);
    FILE *out = fopen("complete.out","w");
    int c,c2;
    int tests;
    scanf("%d",&tests);
    for (int test=1;test<=tests;test++) {
        trie.clear();
        scanf("%d",&n);
        int ret = 0;
        for (c=0;c<n;c++) {
            scanf("%s", buffer);
            ret += wordCost(buffer);
        }
        fprintf(out, "Case #%d: %d\n",test,ret);
        printf("Case #%d: %d\n",test,ret);
    }
    
    return 0;
}

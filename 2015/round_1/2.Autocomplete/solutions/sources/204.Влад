#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>
 
using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;
 
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;
 
#define mp make_pair
#define pb push_back
#define X first
#define Y second
 
#define dbg(x) { cerr << #x << " = " << x << endl; }
 
// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;
 
#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
 
template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);
 
#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;
 
#define NAME "kabaleo"

vector<vector<int> > t(2000 * 1000 + 1000, vector <int> (26, -1));
vector <pair<int, int> > cl;
int sz = 1;
LL ans = 0;
void add_string(string &s)
{
	int v = 0;
	int n = s.size();
	int add = -1;
	for (int i = 0; i < n; i++)
	{
		int to = s[i] - 'a';
		if (t[v][to] == -1)
		{
			t[v][to] = sz++;
			cl.pb(mp(v, to));
			if (add == -1)
				add = i + 1;
		}
		v = t[v][to];
	}
	if (add == -1)
		add = n;
	ans += add;
}

int main()
{
    //freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    freopen("input.txt", "r", stdin);  freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	//START
	
	int T;
	cin >> T;
	for (int q = 0; q < T; q++)
	{
		sz = 1;
		ans = 0;

		for (int i = 0; i < cl.size(); i++)
			t[cl[i].X][cl[i].Y] = -1;
		cl.clear();

		int n;
		cin >> n;
		
		for (int i = 0; i < n; i++)
		{
			string s;
			cin >> s;
			add_string(s);
		}

		cout << "Case #" << q + 1 << ": " << ans << endl;
	}
	//END
    return 0;
}
/*******************************************
*******************************************/
 
template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
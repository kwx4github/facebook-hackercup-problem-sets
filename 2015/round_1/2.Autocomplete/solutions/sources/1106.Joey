import numpy as np
import math

# Trie contains a series of nodes. Each node has letter, children, and wordcount.

START = '^'
END = '$'

class TrieNode:
    def __init__(self, letter):
        self.children = dict()
        self.letter = letter

    def __str__(self):
        return "[{0}: {1}]".format(letter, self.children)



inf = open("B-in.txt",'r')
outf = open("B-out.txt", 'w')
lines = inf.readlines()

T = int(lines[0])
idx = 1

def insert(trie, word):
    cur = trie
    for letter in word:
        if not cur.children.has_key(letter):
            cur.children[letter] = TrieNode(letter)
        cur = cur.children[letter]


for t in range(1, T+1):
    N = int(lines[idx])
    idx += 1

    ans = 0

    trie = TrieNode(START)

    for n in range(N):
        word = lines[idx].strip()
        idx += 1
        #Check if the word is in the trie.
        cur = trie
        i = 0
        last_branch = 1
        word_not_in_tree = False
        for letter in word:
            i += 1
            if cur.children.has_key(letter):
                if len(cur.children) > 1:
                    last_branch = i
                cur = cur.children[letter]
            else:
                #Word is not in trie. Number of letters required is i. Insert word in trie.
                word_not_in_tree = True
                ans += i
                #print word, i
                insert(trie, word)
                break
        word_in_tree = not word_not_in_tree
        if word_in_tree:
            if len(cur.children) > 0:
                last_branch = i
            #print word, last_branch
            ans += last_branch
        #print trie



    outf.write('Case #{0}: {1}\n'.format(t, ans))
    print 'Case #{0}: {1}'.format(t, ans)


/*
prob: Autocomplete
id: i.amlansaha
lang: C++
date: Jan 18, 2015
algo: 
*/
#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long LLU;
typedef vector<int> VI;
typedef vector<long long> VLL;
typedef map<int, int> MAPII;
typedef map<string,int> MAPSI;
typedef pair<int, int> PII;

#define FOR(i,a,b) for(i=a;i<=b;i++)
#define ROF(i,a,b) for(i=a;i>=b;i--)
#define FR(i,n)	for(i=0;i<n;i++)
#define RF(i,n) for(i=n;i>0;i--)
#define CLR(a) memset ( a, 0, sizeof ( a ) )
#define RESET(a) memset ( a, -1, sizeof ( a ) )
#define PB(a)	push_back ( a )
#define Max 100007

inline int getindex(char c)	{ return c-'a';}

struct node
{
	int next[27];
	int appr;
};
node tree[Max];
int size;

void clear(int n = 0)
{
	CLR(tree[n].next);
	tree[n].appr = 0;
	if(!n)	{
		size = 0;
		tree[0].appr = 0;
	}
}

void insert(char str[])
{
	int i = 0, j, temp = 0;
	LL ret = 0;
	bool flag = true;

	while (str[i] != '\0') {
		j = getindex(str[i]);
//		tree[temp].appr++;

		if (tree[temp].next[j] == 0) {
			size++;
			tree[temp].next[j] = size;
			clear(size);
		}
		temp = tree[temp].next[j];
		i++;
	}
	tree[temp].appr++;
}

LL check ( char str[] )
{
	int i = 0, j, k, l, temp = 0;
	LL ret = 0;
	while ( str[i] != '\0' )	{
//		if ( tree[temp].appr == 0 )	break;
		ret++;
		j = getindex(str[i]);
		temp = tree[temp].next[j];
		if ( temp == 0 )	return i+1;
		i++;
	}
	return ret;
}

char str[1000007];

int main ()
{
	freopen("Autocomplete.in", "r", stdin);
	freopen("Autocomplete.out", "w", stdout);

    LL i, j, k, l, temp, t, n, m, ans, caseno = 0;
    scanf ( "%lld", &t );
    
    while ( t-- )	{
    	clear();
		ans = 0;
    	scanf ( "%lld", &n );
    	FR ( i, n )	{
			scanf ( "%s", &str );
			ans+= check(str);
			insert(str);
    	}
    	printf ( "Case #%lld: %lld\n", ++caseno, ans );
    }
    return 0;
}

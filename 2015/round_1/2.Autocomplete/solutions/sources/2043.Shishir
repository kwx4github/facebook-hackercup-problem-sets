#include <cstdio>
#include <cstdlib>
#include<iostream>
#include <string>
#include<cstring>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
#define ll long long int
using namespace std;
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
int insert(trie_t *pTrie,char ch1[])
{
    ll level;
    ll length =strlen(ch1);
    ll index;
    trie_node_t *pCrawl;
    pTrie->count++;
    pCrawl = pTrie->root;
    ll k=0;
   int  flag=0;
    for( level = 0; level<length;level++ )
    {
        index = CHAR_TO_INDEX(ch1[level]);
        if(!flag)
            k++;
        if( !pCrawl->children[index] )
        {
            flag=1;
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
    }
    // mark last node as leaf
    pCrawl->value = pTrie->count;
    return k;
}
char ch[1000003];
int main()
{
    // Input keys (use only 'a' through 'z' and lower case)
    trie_t trie;
    //char output[][32] = {"Not present in trie", "Present in trie"};
    int t;
    ll n,m,i;
    scanf("%d",&t);
    string str;
    ll a;
    std::ios_base::sync_with_stdio(false);
    ll j=1;
    while(t>0)
    {
        t--;
        initialize(&trie);
        scanf("%lld",&n);
        m=0;
        for(i=0;i<n;i++)
        {
        scanf("%s",&ch);
        a=insert(&trie,ch);
        m+=a;
        }
        printf("Case #%lld: %lld\n",j,m);
        j++;
    }
    return 0;
}

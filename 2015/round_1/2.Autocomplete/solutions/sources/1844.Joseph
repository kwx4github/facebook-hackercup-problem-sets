import java.io.*;
import java.util.*;
import java.util.List;

public class Main {
    private static StringTokenizer st;
    private static BufferedReader br;
    public static long MOD = 1000000007;
    public static int billion = 1000000000;
    public static int tenSeven = 10000000;

    public static void print(Object x) {
        System.out.println(x + "");
    }
    public static void printArr(long[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static void printArr(int[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static String join(Collection<?> x, String space) {
        if (x.size() == 0) return "";
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (Object elt : x) {
            if (first) first = false;
            else sb.append(space);
            sb.append(elt);
        }
        return sb.toString();
    }

    public static String nextToken() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String line = br.readLine();
            st = new StringTokenizer(line.trim());
        }
        return st.nextToken();
    }
    public static int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }
    public static long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }
    public static List<Integer> nextInts(int N) throws IOException {
        List<Integer> ret = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            ret.add(nextInt());
        }
        return ret;
    }

    public static class Trie {
        Trie[] children;//{
        int size;

        public Trie() {
            children = new Trie[30];
        }
    }

    public static void addWord(Trie t, char[] word, int i) {
        while (true) {
            t.size += 1;
            if (i >= word.length) return;
            int ch = word[i] - 'a';
            if (t.children[ch] == null) t.children[ch] = new Trie();
            t = t.children[ch];
            i += 1;
        }
    }

    public static int length(Trie t, char[] word, int i) {
        int total = 0;
        while (true) {
            if (t.size == 1) return total;
            int ch = word[i] - 'a';
            t = t.children[ch];
            i += 1;
            total += 1;
        }
    }

    public static void main(String[] args) throws IOException {
        //br = new BufferedReader(new InputStreamReader(System.in));
        br = new BufferedReader(new InputStreamReader(new FileInputStream("autocomplete.txt")));

        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            Trie root = new Trie();
            int n = nextInt();
            int total = 0;
            for (int i = 0; i < n; i++) {
                char[] word = (nextToken() + "{").toCharArray();
                addWord(root, word, 0);
                int length = Math.max(1, length(root, word, 0));
                length = Math.min(length, word.length - 1);
                total += length;
            }
            System.out.printf("Case #%d: %d%n", t, total);
        }
    }
}

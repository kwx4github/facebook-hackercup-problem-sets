#include <iostream>
#include <list>
#include <stack>
#include <queue>
#include <fstream>
#include <bits/stl_algo.h>

using namespace std;

struct node{
    char c;
    list<node*> n;
    int words;
    node(char ch){
        c=ch;
        words=1;
    }
    list<node*>::iterator find(char x){
        list<node*>::iterator it;
        for(it=n.begin();it!=n.end();++it){
            if((*it)->c>=x) return it;
        }
        return it;
    }
};

struct tree{
    node* head;
    tree(){
        head = new node(' ');
        head->words=0;
    }
    void add(string token){
        node* cur=head;
        cur->words++;
        for(int i=0; i<token.size() ;i++){
            list<node*>::iterator it=cur->find(token[i]);
            if(it==cur->n.end()){
                cur->n.push_back(new node(token[i]));
                it=--cur->n.end();
            }else if( (*it)->c == token[i] ){
                (*it)->words++;
            }else if(it==cur->n.begin()){
                cur->n.push_front(new node(token[i]));
                it=cur->n.begin();
            }else{
                cur->n.insert(it,new node(token[i]));
                it--;
            }
            cur=*it;
        }

    }
    void print(){//dfs print
        stack<node*> q;
        q.push(head);
        while(!q.empty()){
            node* cur=q.top(); q.pop();
            cout<<cur->c<<" words "<<cur->words<<" : ";
            for(list<node*>::iterator it=cur->n.begin();it!=cur->n.end();++it){
                q.push(*it);
            }
        }
        cout<<endl;
    }
};

int findMin(tree& t,string s){
    int count=0;
    node* cur=t.head;
    for(int i=0;i<s.size();i++){
        if(cur->words == 1 ) return count;
        count++;
        cur=*(cur->find(s[i]));
    }
    return count;
}

void exec(ifstream& fin,ofstream& fout,int c){
    int N;
    fin>>N;
    tree t;
    int count=1;
    for(int i=0;i<N;i++){
        string word;
        fin>>word;
        t.add(word);
        count+=findMin(t,word);
        //t.print();
    }
    fout<<"Case #"<<c<<": "<<count<<endl;
}

int main() {
    ifstream fin("/home/ozan/Downloads/autocomplete.txt");
    ofstream fout("/home/ozan/Desktop/output.txt");
    int T;
    fin>>T;
    for(int i=1;i<=T;i++){
        exec(fin,fout,i);
    }

    return 0;
}
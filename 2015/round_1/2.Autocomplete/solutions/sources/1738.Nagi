//
//  main.cpp
//  FHCAutocomplete
//
//  Created by Nagi Nahas on 1/18/15.
//  Copyright (c) 2015 Nagi Nahas. All rights reserved.
//


#include <fstream>
#include <vector>
#include <map>
#include <algorithm>
#include <unordered_map>

using namespace std;
ifstream cin ("/Users/naginahas/Documents/autocomplete.txt");
ofstream cout("/Users/naginahas/Documents/autocomplete.out");

unsigned long long FNV_offset_basis1 = 14695981039346656037LL;
unsigned long long FNV_prime1 = 1099511628211;

unsigned long long FNV_offset_basis2 = 474646311177LL;
unsigned long long FNV_prime2 = 1000*1000*1000+7;

vector <unsigned long long> FNVhash(string &s,unsigned long long FNV_offset_basis,unsigned long long FNV_prime){
   
    unsigned long long hash = FNV_offset_basis;
    vector <unsigned long long> ret;
    for (int i=0;i<s.size();i++){
        unsigned long long octet = s[i];
    
        hash = hash * FNV_prime;
        hash = hash ^ octet;
        ret.push_back(hash);
        
    }
    return ret;
        
}

int main(){
    int T;
    cin >> T;
    //T = 1;
    for(int t=0;t<T;t++){
        int N;
        cin >> N;
        unordered_map <unsigned long long, int> um1;
        unordered_map <unsigned long long, int> um2;
        int total = 0;
        for(int i=0;i<N;i++){
            string s;
            cin >> s;
            vector <unsigned long long > vu1 = FNVhash(s,FNV_offset_basis1,FNV_prime1);
            vector <unsigned long long > vu2 = FNVhash(s,FNV_offset_basis2,FNV_prime2);
            
            bool k = false;
            for(int j=0;j<vu1.size();j++){
                if(um1.count(vu1[j])==0) um1[vu1[j]] = 1;
                else um1[vu1[j]] = um1[vu1[j]] + 1;
                if(um2.count(vu2[j])==0) um2[vu2[j]] = 1;
                else um2[vu2[j]] = um2[vu2[j]] + 1;
                int z = min(um1[vu1[j]], um2[vu2[j]]);
                if(z==1 && k==false) {
                    //cout << j+1 << endl;
                    total+= (j+1);
                    k=true;
                    
                }
                
                
                
            }
            if(k==false) total+=s.size();
        }
        cout << "Case #" << t+1 << ": " << total << endl;
    }
    return 0;
}
"""
This script may use libraries publicly available at: https://github.com/grokit/dcore.

Does this solution solve:
   Small: ?.
   Big:   ?.
"""

import dcore.gcj_boot as boot

import collections

class Problem:
    pass

class Trie:
    def __init__(self):
        self.root = Node()

    def addWord(self, w):
        node = self.root

        for i, l in enumerate(w):
            match = [ll for ll in node.N if ll.letter == l]
            if len(match) == 0:
                newNode = Node()
                newNode.letter = l
                if i == len(w) -1:
                    newNode.terminal = True
                node.N.append(newNode)
                node = newNode
            elif len(match) == 1:
                node = match[0] 
                if i == len(w) -1:
                    node.terminal = True
            else:
                raise Exception((match, w))

    def walkTo(self, s, startNode = None):
        """
        Walks to the last letter of s in Trie. Return the node associated with that last letter.
        If cannot reach the last letter, return None.

        Note: starNode POINT TO the first node in s, so have to inject a fake root.
        """

        if startNode is None:
            n = self.root
        else:
            root = Node()
            root.N.append(startNode)
            n = root

        assert n.terminal == False
        numTerminals = 0
        nMatch = 0
        for i, l in enumerate(s):
            match = [ll for ll in n.N if ll.letter == l]
            assert len(match) == 0 or len(match) == 1

            if len(match) == 1:
                nMatch += 1
                n = match[0]
                if n.terminal == True:
                    numTerminals += 1
                if len(n.N) > 1:
                    numTerminals = int(1e6)
            else:
                break

        if nMatch == len(s):
            return (n, numTerminals)
        return None

    def isUniquePrefix(self, s, w):
        T = self.walkTo(s)
        if T is None:
            return None # == word not even in Trie 
        node,_ = T

        w = w[len(s)-1:]
        T = self.walkTo(w, node)
        if T is None:
            return None 
        node, nTerms = T 
        if nTerms == 1 and len(node.N) == 0:
            return True
        else:
            return False

    def isWordIn(self, w):
        P = self.walkTo(w)
        if P is None:
            return False
        if P[0].terminal == True:
            return True
        return False

    def printWords(self):
        S = collections.deque()
        S.append(self.root)
        while(len(S) > 0):
            n = S.popleft()
            print(n)
            if n.N is not None:
                for child in n.N:
                    print('  --> %s' % child.letter) 
            for node in n.N:
                S.append(node)

class Node:
    def __init__(self):
        self.N = []
        self.letter = None
        self.terminal = False

    def __str__(self):
        return "%s, terminal: %s, #children: %i" % (self.letter, self.terminal, len(self.N))

def readProblem(fh):
    N = int(fh.readline().strip())

    W = []
    for i in range(N):
        w = fh.readline().strip()
        W.append(w)

    return (N,W)

def solve(p):
    N, W = p

    trie = Trie()
    nType = 0
    for w in W:
        trie.addWord(w)

        sub = []
        for i,l in enumerate(w):
            if i == len(w) - 1:
                break
            sub.append(l)
            subW = "".join(sub)
            if trie.isUniquePrefix(subW, w):
                break
        nType += i+1

    return nType 

def test():
    words = []
    words.append("hi")
    words.append("hello")
    words.append("lol")
    words.append("hills")
    words.append("hill")

    nWords = []
    nWords.append('')
    nWords.append('askdahsldkjasdjlasjdlasjdljsa9das0jd90asjd0ajsdj3kljdkljasd asd as djkas djkas djak')
    nWords.append('h')
    nWords.append('his')
    nWords.append('loll')
    nWords.append('hil')
    nWords.append('hills ')
    nWords.append('hillsz')
    
    trie = Trie()
    for w in words:
        trie.addWord(w)

    #trie.printWords()
    #print( trie.walkTo("hills")[1] )

    if 1:
        assert trie.walkTo("zzz") == None
        assert trie.walkTo("h") != None 
        assert trie.walkTo("h")[0].letter == 'h'
        assert trie.walkTo("hills")[0].letter == 's'
        #assert trie.walkTo("hills")[1] == 3
        assert trie.walkTo("lol")[0].letter == 'l'
        assert trie.walkTo("")[0].letter is None
        assert trie.walkTo("")[1] == 0

        n = trie.walkTo("hi")[0]
        assert trie.walkTo("ills", n)[0].letter == 's'
        #assert trie.walkTo("ills", n)[1] == 3

    if 1:
        for w in words:
            assert trie.isWordIn(w) == True
        for w in nWords:
            assert trie.isWordIn(w) == False

    if 1:
        assert trie.isUniquePrefix('h', 'hi') == False 
        assert trie.isUniquePrefix('hi', 'hi') == False 
        assert trie.isUniquePrefix('hi', 'hill') == False 
        assert trie.isUniquePrefix('hi', 'hills') == False
        assert trie.isUniquePrefix('hil', 'hill') == False 
        assert trie.isUniquePrefix('hill', 'hill') == False 
        assert trie.isUniquePrefix('hill', 'hills') == False 

        assert trie.isUniquePrefix('h', 'hello') == False 
        assert trie.isUniquePrefix('he', 'hello') == True 
        assert trie.isUniquePrefix('hel', 'hello') == True 
        assert trie.isUniquePrefix('hell', 'hello') == True 
        assert trie.isUniquePrefix('hello', 'hello') == True 

        assert trie.isUniquePrefix('l', 'lol') == True 
        assert trie.isUniquePrefix('lo', 'lol') == True 
        assert trie.isUniquePrefix('lol', 'lol') == True 

#test()
boot.solve(solve, readProblem, '.*auto')




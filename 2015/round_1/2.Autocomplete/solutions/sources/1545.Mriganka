#include <cstdio>
#include <iostream>
#include <cassert>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <set>
#include <map>
#include <algorithm>
#include <string>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define REPE(i,x,y) for (int i=(x);i<(y);i++)
#define REP(i,x,y) for (int i=(x);i<=(y);i++)
#define DREP(i,x,y) for (int i=(x);i>=(y);i--)
#define mp make_pair
#define pb push_back
#define MAXN 1001000

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef struct node {
	int next[30];
	vector<int> goes;
} node;

node T[MAXN];
int last;
int n;
string s;
int nextnode(int v,char c) {
	int C=(int)c - (int)'a';
	if (T[v].next[C]>1) { return T[v].next[C]; }
	else { last++; T[v].next[C]=last; return last; }
}

void insert(int x) {
	int v=1; T[1].goes.pb(x);
	REPE(j,0,s.size()) {
		v=nextnode(v,s[j]); T[v].goes.pb(x);
	}
}

int lgp() {
	int v=1;
	REPE(j,0,s.size()) {
		assert(T[v].goes.size()>=1);
		if (T[v].goes.size()==1) {
			return j;
		}
		v=nextnode(v,s[j]);
	}
	return s.size();
}


void solve(int TC) {
	last=1;
	REPE(i,1,MAXN) {
		T[i].goes=*new vector<int>();
		REPE(j,0,30) {
			T[i].next[j]=-1;
		}
	}
	s=" "; s[0]='a'+28; insert(0);
	cin>>n; int ans=0;
	REP(q,1,n) {
		cin>>s;
		insert(q);
		ll x=lgp();
		//cout<<x<<endl;
		ans+=x;
	}
	cout<<"Case #"<<TC<<": "<<ans<<endl;
}

int main() {
	ios::sync_with_stdio(false);
	int t; cin>>t;
	REP(i,1,t) solve(i);
	return 0;
}

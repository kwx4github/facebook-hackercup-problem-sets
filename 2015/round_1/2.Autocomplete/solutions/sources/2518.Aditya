//Aditya Dixit
#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <string>
#include <map>
#include <functional>
#include <algorithm>
#include <cstdlib>
#include <iomanip>
#include <stack>
#include <queue>
#include <deque>
#include <limits>
#include <cmath>
#include <numeric>
#include <set>

using namespace std;

#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')
#define LIM 26
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define rep(i,n) for(int i =0; i < n ; i++)
#define reps(i,x,y) for(int i =x; i < y ; i++)
#define repb(i,x,y) for(int i =x; i >= y ; i--)
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl;
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define sqr(x) ((x)*(x))
#define EPS 1e-9

const int INF = 2000000000;
const double pi=acos(-1.0);

typedef long long int i64;
typedef long int i32;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef vector <PII> VPII;

struct node
{
	bool is_end;
	int prefixCount;
	struct node* child[LIM];
}*head;

void init()
{
	head = new node();
	head->prefixCount = 0;
	head->is_end = false;
}

void insert(string word)
{
	node* current = head;
	current->prefixCount++;
	
	for(int i = 0; i < (int)word.length();i++)
	{
		int letter = word[i] - 'a';
		
		if( current->child[letter] == NULL)
			current->child[letter] = new node();
		
		current->child[letter]->prefixCount++;
		current = current->child[letter];
	}
	current->is_end = true;
}

bool search (string word)
{
	node* current = head;
	
	for(int i = 0; i < (int)word.length() ;i++)
	{
		if(current->child[ word[i] - 'a'] == NULL)
			return false;
		current = current->child[word[i]-'a'];	
	}
	return current->is_end;
}

int words_with_prefix(string prefix)
{
	node* current = head;
	
	for(int i = 0; i <  (int)prefix.length() ;i++)
	{
		if( current->child[prefix[i] - 'a'] == NULL)
		return 0;
		else
		current = current->child[prefix[i]-'a'];
	}
	return current->prefixCount;
}

string s[100005];

int main()
{
	freopen("aa.txt","r",stdin);
	freopen("aaout.txt","w",stdout);
	
	//ios_base :: sync_with_stdio(false);
	
	int t,tt = 1;;
	cin >> t;
	
	while(t--){
		init();
		int n;
		cin >> n;
		rep(i,n) cin >> s[i];
		
		insert(s[0]);
		i64 ans = 1;
		
		reps(i,1,n){
			string z="";
			rep(j,(int)s[i].length()){
				z += s[i][j];
				//DBG(z);
				//DBG(words_with_prefix(z));
				if(words_with_prefix(z) == 0){
					ans += (j+1);
					insert(s[i]);
					break;
				}
				if( j == (int)s[i].length()-1) ans += s[i].length();
			}
			//cerr << endl;
				
		}
		
		//DBG(ans);
		cout << "Case #" << tt << ": " << ans << endl;
		tt++;
		
	}
	return 0;
}


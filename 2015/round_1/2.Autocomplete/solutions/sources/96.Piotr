#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

string a[111111111];

ll res = 0;
ll when = -1;

string w;

class node {
    public:
    node *next[26];
    bool exists;
    node() {
        memset(next, 0, sizeof(next));
        exists = 0;
    }

    void go(int pos) {
        if (pos == (int)w.size()) {
            if (when == -1)
                when = pos;
            exists = 1;
            return;
        }
        int ne = w[pos] - 'a';
        if (!next[ne]) {
            if (when == -1)
                when = pos + 1;
            next[ne] = new node();
        }

        next[ne]->go(pos+1);
    }

    ll count() {
        ll sum = exists;
        for (int i = 0; i < 26; i++) if (next[i]) {
            int c = next[i]->count();
            sum += c;
        }
        if (sum >= 2)
            res += sum;
        return sum;
    }
};

node *root = new node();

void solve() {
    res = 0;
    root = new node();
    int n;
    cin >> n;
    for (int i=0;i<n;i++)
        cin>>a[i];
    for (int i = 0; i < n; i++) {
        when = -1;
        w = a[i];
        root->go(0);
        res += when;
    }
    printf("%lld", res);
}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    cin>>t;
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

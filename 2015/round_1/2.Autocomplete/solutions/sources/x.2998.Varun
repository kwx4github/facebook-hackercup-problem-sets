#include<bits/stdc++.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<string.h>
#define tr(c,it) for(typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define itor(c) typeof(c.begin())
#define ll long long
#define vi vector<int>
#define vs vector<string>
#define si set<int>
#define msi multiset<int>
#define sp set<pair<int,int> >
#define vp vector<pair<int,int> >
#define pb push_back
#define mp make_pair
using namespace std;
int main() {
	ios::sync_with_stdio(false);
	int t, it1,q,w,e,r,a,test;
	 freopen("autocomplete.txt","r",stdin);
    freopen("hcc.txt","w",stdout);
	cin >> test;
 
	for (it1 = 0; it1 < test; it1++) {
		long int n, length, k, temp;
		map<string, string> d; 
		map<string, string>::iterator it;
		long long int count = 0;
		string str, t;
		cin >> n;
      while (n > 0) {
			cin >> str;
			length = str.length();
			k = 1;
			t = string(str, 0, 1);
			while (1) {
			    it = d.find(t);
				if (it == d.end()) {
					count += k;
					d[t] = str;
					break;	
				} else {
					t = it->second;
					temp = t.length();
					long int i = k;
					while(i < temp && i < str.length()) {
						if(t[i] != str[i]) {
							count += (i+1);
							d[string(str, 0, i+1)]	= str;
							break;
						}
						i++;
					}
					if (i == temp) {
						t = string(str, 0, i+1);
					
						if(d.find(t) == d.end()) {
							count += (i+1);
							d[t] = str;
							break;
						  } 
					} else  if(i == str.length()) {
						  count += str.length();
						 d[string(str)]	= str;
						 break;
					} else
						break;
				}
				k++;
			}
			n--;
		 }
		 cout << "Case #" << it1+1 << ": " << count << "\n";	
	}
	return 0;
}
 

package main

import (
  "os"
  "bufio"
  "strconv"
  "fmt"
)

type Trie struct {
  Terminal bool
  Children map[byte]Trie
}

func insert(trie *Trie, word string, pos int) int {
  if pos == len(word) {
    trie.Terminal = true
    return 0
  }
  child, exists := trie.Children[word[pos]]
  if exists {
    return insert(&child, word, pos+1)
  }
  child = Trie{ Children: map[byte]Trie{} }
  trie.Children[word[pos]] = child
  return 1 + insert(&child, word, pos+1)
}

func getLine(reader *bufio.Reader) string {
  bytes := []byte{}
  for {
    byte, error := reader.ReadByte()
    if error != nil || byte == '\n' {
      break
    }
    bytes = append(bytes, byte)
  }
  return string(bytes)
}

func main() {
  reader := bufio.NewReader(os.Stdin)
  writer := bufio.NewWriter(os.Stdout)
  defer writer.Flush()

  numCases, _ := strconv.Atoi(getLine(reader))
  for caseIndex := 1; caseIndex <= numCases; caseIndex++ {
    numWords, _ := strconv.Atoi(getLine(reader))
    trie := Trie{ Children: map[byte]Trie{} }
    result := 0
    for i := 0; i < numWords; i++ {
      word := getLine(reader)
      added := insert(&trie, word, 0)
      if added > 0 {
        added -= 1
      }
      result += len(word) - added
    }
    writer.WriteString(fmt.Sprintf("Case #%d: %d\n", caseIndex, result))
  }
}

#include <iostream>
#include <vector>
#include <map>

using namespace std;

class Tree {
public:
  map<char, Tree*> next;
  
  Tree() {
    next = map<char, Tree*>();
  }
};

void problem() {
  int n;
  cin >> n;
  vector<string> v(n);
  for (int i = 0; i < n; ++i) cin >> v[i];
  
  int res = 0;
  Tree* tree = new Tree();
  for (int i = 0; i < n; ++i) {
    Tree* act = tree;
    int j = 0;
    while (j < v[i].size()) {
      map<char, Tree*>::iterator it = act->next.find(v[i][j]);
      if (it == act->next.end()) break;
      act = it->second;
      ++j;
    }
    if (j < v[i].size()) res += j + 1;
    else res += j;
    while (j < v[i].size()) {
      act->next[v[i][j]] = new Tree();
      act = act->next[v[i][j]];
      ++j;
    }
  }
  cout << res;
}

int main() {
  int cases;
  cin >> cases;
  for (int cas = 1; cas <= cases; ++cas) {
    cout << "Case #" << cas << ": ";
    problem();
    cout << endl;
  }
}

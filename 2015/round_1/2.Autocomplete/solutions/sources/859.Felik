#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <utility>
#include <stack>
#include <queue>
#include <map>
#include <set>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int> 
#define pdd pair<double,double>
#define ll long long

#define PI 2*acos(0.0)
#define EPS 1e-9
#define INF 1000000000

using namespace std;

struct node
{
	int mapp[26];
	int overlap;
};

int T, N, usedNode, ans;
node simpul[1000001];
char msk[1000007];

void reset(node *p)
{
	memset(p->mapp, -1, sizeof(p->mapp));
	p->overlap = 0;
}

void print(node *p)
{
	for(int i = 0; i < 26; i++) printf("%d%c", p->mapp[i], i == 25 ? '\n' : ' ');
	printf("%d\n", p->overlap);
}

int main()
{
	scanf("%d", &T);
	for(int t = 1; t <= T; t++)
	{
		usedNode = 1;
		reset(&simpul[0]);
		simpul[0].overlap++; // consider empty string
		scanf("%d", &N);
		
		ans = 0;
		while(N--)
		{
			scanf("%s", msk); int len = strlen(msk);
			
			// registering word into dictionary (trie)
			int current = 0;
			for(int i = 0; i < len; i++)
			{
				simpul[current].overlap++;
				if(simpul[current].mapp[msk[i] - 'a'] != -1) 
					current = simpul[current].mapp[msk[i] - 'a'];
				else
				{
					int now = usedNode++;
					reset(&simpul[now]);
					
					simpul[current].mapp[msk[i] - 'a'] = now;
					current = now;
				}
			}
			
			// mark overlap in last character
			simpul[current].overlap++;
			
			// tracing
			current = 0;
			for(int i = 0; i < len; i++)
				if(simpul[current].overlap != 1)
				{
					ans++;
					current = simpul[current].mapp[msk[i] - 'a'];
				} else break;
		}
		
		printf("Case #%d: %d\n", t, ans);
	}
	return 0;
}


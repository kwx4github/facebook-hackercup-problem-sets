#include <algorithm>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <sstream>
#include <cstring>
#include <cstdio>

using namespace std;

class Node {
public:
    char m_content;
    bool m_endOfWord;
    vector<Node*> m_children;

    Node(char content = ' ') {
        m_content = content;
        m_endOfWord = false;
    }
    ~Node() {}
    Node* findChild(char c) {
        for (int i = 0; i < m_children.size(); ++i)
        {
            if (m_children[i]->m_content == c)
                return m_children[i];
        }
        return NULL;
    }
    void appendChild(Node* child) {
        m_children.push_back(child);
    }
};

class Trie {
public:
    Node* root;

    Trie() {
        root = new Node();
    }
    ~Trie() {}
    // addWord returns length of longest prefix that is NOT found in a trie before adding the word
    int addWord(string s) {
        Node* current = root;
        if (s.empty()) {
            current->m_endOfWord = true;
            return 0;
        }
        int longestPrefix = s.size(); // worst case - have to type all word
        bool first = true;
        for (int i = 0; i < s.size(); ++i) {
            Node* child = current->findChild(s[i]);
            if (child != NULL) {
                current = child;
            } else {
                Node* tmp = new Node(s[i]);
                current->appendChild(tmp);
                current = tmp;
                if (first)
                {
                    longestPrefix = i + 1;
                    first = false;
                }
            }
        }
        current->m_endOfWord = true;
        return longestPrefix;
    }
};

void solve(int ind) {
    // input
    int N;
    cin >> N;

    Trie* trie = new Trie();
    int total = 0;
    string word;
    for (int i = 0; i < N; ++i) {
        cin >> word;
        total += trie->addWord(word);
    }

    // output
    cout << "Case #" << ind << ": " << total << endl;
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        solve(i);
    }
}
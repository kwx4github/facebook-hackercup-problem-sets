#include<cstdio>
#include<cassert>
#include<cstring>
#include<map>
#include<set>
#include<time.h>
#include<algorithm>
#include<stack>
#include<queue>
#include<utility>
#include<cmath>
#include<iostream>
#include<string>
#include<vector>
#include <limits>
   
using namespace std;
  
typedef pair <int, int> ii;
//typedef pair <long long, long long> ll;

const long long INF = 1e9 + 7;
const long long INF9 = 1e9 + 9;

long long gcd( long long b, long long s ){
    return (s!=0) ? gcd( s, b%s ) : b;
}

const int ALPHA = 27;
const int N = 1e7+5;
char s[N];

int toNumber( char key ){
	return key-'a';
}


long long ans = 0;

struct TrieNode{
    TrieNode * children[ALPHA];
    TrieNode *fail;
    vector <int> output;
    int terminal;
    int first;
    TrieNode() : terminal(-1){
        fail = NULL;
        first = -1;
        memset( children, 0, sizeof( children ) );
    };
    ~TrieNode(){
        for(int i=0; i<ALPHA; ++i)
            if( children[i] ) delete children[i];
    };
 
    void insert( const char*key, int id, bool add ){
        if( first == -1 ) first = id;
        if( *key == 0 )
            terminal = id;
        else{
            int nxt = toNumber(*key);
			if( add ){
				++ans;
			}
            if( children[nxt] == NULL ){
                children[nxt] = new TrieNode();
				add = 0;
			}
 
            children[nxt]->insert(key+1, id, add);
        }
    }
     
    TrieNode* find( const char* key ){
        if( *key == 0 ) return this;
        int nxt = toNumber(*key);
        if( children[nxt] == NULL ) return NULL;
        return children[nxt]->find( key+1 );
    }
     
};



int main(){
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);

	int T;
	scanf("%d", &T);

	for(int R=1; R<=T; R++){
		TrieNode *t = new TrieNode();
		ans = 0;
		int n;
		int ID = 1;
		scanf("%d", &n);
		for(int i=0; i<n; i++){
			scanf("%s", s);
			t->insert( s, ID++, 1 );
		}
		printf("Case #%d: %lld\n", R, ans);
		t->~TrieNode();

	}
}
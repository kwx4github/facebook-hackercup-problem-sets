#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string>
#include <cstring>
#include <map>


using namespace std;

struct node {
	map<char, node*> next;
	int depth;
	node() {}
	node(int _d): depth(_d) {}
};

struct trie {
	node * root;
	trie() {
		root = new node(0);
	}
	int insert(string& s) {
		node * current = root;
		int ans = -1;
		for (int i = 0 ; i < s.length() ; i ++) {
			char c = s[i];
			map<char, node*> & mp = current->next;
			map<char, node*>::iterator it = mp.find(c);
			if (it == mp.end()) {
				mp[c] = new node(i + 1);
				if (ans == -1)
					ans = i + 1;
			}
			current = mp[c];
		}
		if (ans == -1)
			ans = s.length();
		return ans;
	}
	~trie() {
		//destructorHelper(root);
	}
	void destructorHelper(node * current) {
		map<char, node*> &mp = current->next;
		for (map<char, node*>::iterator it = mp.begin(); it != mp.end(); it++) {
			destructorHelper(it->second);
		}
		delete current;
		current = NULL;
	}
};


string s;

void solve(int t) {
	int n;
	scanf("%d ", &n);
	trie tr;
	long long ans = 0;
	for (int i = 0 ; i < n ; i ++) {
		getline(cin, s);
		ans += tr.insert(s);
	}	
	printf("Case #%d: %lld\n", t, ans);
}

int main() {
	int T;
	scanf("%d ", &T);
	for (int t = 1 ; t <= T ; t ++) {
			solve(t);
	}
	return 0;
}
from bintrees import FastRBTree

def longest_prefix(s1, s2):
    idx = 0
    while (idx < min(len(s1), len(s2)) and s1[idx] == s2[idx]):
        idx += 1

    #print s1, s2, idx
    return idx

if __name__ == "__main__":
    inf = open("autocomplete.txt")
    #inf = open("b.in")
    output = open("b.out", 'w')

    T = int(inf.readline())
    
    for i in range(1, T+1):
        N = int(inf.readline())
        rbt = FastRBTree()
        rbt.insert(0, '')
        rbt.insert(N+1, '')

        total = 0
        words = []
        original_order = []

        for j in range(1, N+1):
            word = inf.readline().strip()
            words.append(word)
            original_order.append(word)

        words.sort()
        d = {}
        for j in range(1, N+1):
            d[words[j-1]] = j

        for j in range(N):
            cur = original_order[j]
            idx = d[cur]

            rbt.insert(idx, cur)

            prev = rbt.prev_item(idx)
            succ = rbt.succ_item(idx)
            min_input_prev = 0
            min_input_succ = 0

            #print idx
            #print (prev[1], cur)
            #print (succ[1], cur)
            #print '---------'

            if prev[0] != 0:
                min_input_prev = longest_prefix(prev[1], cur)

            if succ[0] != N+1:
                min_input_succ = longest_prefix(succ[1], cur)

            total += min(max(1, min_input_prev+1, min_input_succ+1), len(cur))
            #print "incre ",  min(max(1, min_input_prev+1, min_input_succ+1), len(cur))
        output.write("Case #%d: %d\n" %(i, total))

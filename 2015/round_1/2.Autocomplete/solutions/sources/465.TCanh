#include <bits/stdc++.h>

using namespace std;

#define FI "autocomplete.txt"
#define FO "out.txt"

struct Node {
	Node * child[26];
};

int T, N;
Node *trie;
string word;
int res;

Node *newNode();
//void remove(Node *);

int main() {
	freopen(FI, "r", stdin);
	freopen(FO, "w", stdout);
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		cout << "Case #" << t << ": ";
		cin >> N;
		trie = newNode();
		res = 0;
		for (int i = 0; i < N; ++i) {
			cin >> word;
			Node *cur = trie;
			int prefix = 0;
			for (int k = 0; k < word.size(); ++k) {
				if (cur->child[word[k] - 'a'] == NULL) {
					prefix = (prefix ? prefix : k + 1);
					cur->child[word[k] - 'a'] = newNode();
				}
				cur = cur->child[word[k] - 'a'];
			}
			res += (prefix ? prefix : word.size());
		}
		cout << res << endl;
//		remove(trie);
	}	
	return 0;
}

Node *newNode() {
	Node *node = new Node();
	for (int i = 0; i < 26; ++i) node->child[i] = NULL;
	return node;
}

//void remove(Node *cur) {
//	for (int i = 0; i < 26; ++i) {
//		if (cur->child[i]) {
//			remove(cur->child[i]);
//		}
//	}
//	delete cur;
//	cur = NULL;
//}

require 'pp'

# returns nil if empty line
def input_line
  # if not defined, set to nil and read from stdinput
  @input_filename ||= 'autocomplete.txt'

  if @input_filename
    @lines ||= File.read(@input_filename).each_line.map(&:chomp)
    # read from file line by line
    @lines.shift
  else
    # read from stdin
    $stdin.read
  end
end

def letter?(char)
  char =~ /[a-z]/
end

class Node
  attr_accessor :children

  def initialize
    @children = {}
  end

  def add_word(word)
    @@new_node_level = nil
    add_word_code_length(word)
    @@new_node_level.nil? ? word.size : @@new_node_level
  end

  # def add_word_code_length(word, level=1)
  #   first_char = word[0]

  #   unless @children.has_key?(first_char)
  #     new_node = Node.new
  #     @children[first_char] = new_node
  #     @@new_node_level = level if @@new_node_level.nil?
  #   end

  #   if word.size > 1
  #     @children[first_char].add_word_code_length(subword(word), level+1)
  #   end
  # end

  def add_word_code_length(word, level=1)
    while word.size > 1
      first_char = word[0]

      current_node = self
      unless current_node.children.has_key?(first_char)
        new_node2 = Node.new
        current_node.children[first_char] = new_node2
        current_node = new_node2
        @@new_node_level = level if @@new_node_level.nil?
      end

      word = subword(word)
      level += 1
    end

    if word.size > 1
      @children[first_char].add_word_code_length(subword(word), level+1)
    end
  end

  def subword(word)
    word[1..word.size - 1]
  end
end

# def build_trie(words)
#   trie = Node.new
#   words.each do |word|
#     trie.add_word(word)
#   end
#   trie
# end

def solve_case(words)
  total = 0

  trie = Node.new
  words.each do |word|
    code_length = trie.add_word(word)
    total += code_length
  end

  total
end

num_cases = input_line.to_i
(1..num_cases).each do |case_num|
  num_words = input_line.to_i
  words = num_words.times.inject([]) do |memo, _n|
    memo << input_line
  end
  ans = solve_case(words)
  puts "Case ##{case_num}: #{ans}"
end

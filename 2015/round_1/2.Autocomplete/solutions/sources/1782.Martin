#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cmath>
#include <limits>
#include <string>
#include <cstring> // memset
#include <iostream> // cin, cout
#include <fstream> // mac input/output redirection
#include <sstream> // topcoder testcase
#include <iostream>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;

int delta[8][2] = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};

#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define REP(i, a, b) for (int i = int(a); i < int(b); i++) // a to b, and variable i is local!

#define DEBUG(x) do { std::cerr << #x << ": " << x << std::endl; } while (0)

#define X 10000007

using namespace std;

                                                                                                            
                                                                                                            
class Node
{
public: Node()
    {
        mContent = ' ';
        mMarker = false;
        x=0;
        mChildren = vector<Node*>(26);
    }
    
    ~Node()
    {
    }
    
    char content()
    {
        return mContent;
   
    }
    
    void setContent(char c)
    {
        mContent = c;
 
    }
    
    bool wordMarker()
    {
        return mMarker;

    }
    
    void setWordMarker()
    {
        mMarker = true;

    }
    
    Node* findChild(char c);
    
    void appendChild(Node* child)
    {
        mChildren.push_back(child);
        
    }
    
    vector<Node*> children()
    {
        return mChildren;
        
    }
    
char mContent;
    
    
    bool mMarker;
    int x;
    
    
    vector<Node*> mChildren;
    
    
    
};
                                                                                                            
                                                                                                            
class Trie
{
public: Trie();
    
    
    ~Trie();
    
    
    void addWord(string s);
    
    
    bool searchWord(string s);
    
    int min(string s);
    
    
    void deleteWord(string s);
    
    
private: Node* root;
    
    
    
}
                                                                                                            
;
                                                                                                            
                                                                                                            
 Node* Node::findChild(char c)
{
    return mChildren[c-'a'];
    
    
}
                                                                                                            
Trie::Trie()
{
    root = new Node();
    
    
    
}
                                                                                                            
Trie::~Trie()
{
    // Free memory
}
                                                                                                            
void Trie::addWord(string s)
{
    Node* current = root;
    
    
    if ( s.length() == 0 )
    {
        current->setWordMarker();
       
        
        // an empty word return;
        
        
        
    }
    
    for ( int i = 0;
         i < s.length();
         
         
         i++ )
    {
        Node* child = current->findChild(s[i]);
        
        
        if ( child != NULL )
        {
            (child->x)++;
            current = child;
            
            
            
        }
        
        else
        {
            Node* tmp = new Node();
            
            
            tmp->setContent(s[i]);
            tmp->x=1;
            
            current->mChildren[s[i]-'a']=tmp;
            
            
            current = tmp;
            
            
            
        }
        
        if ( i == s.length() - 1 ) current->setWordMarker();
        
        
        
    }
    
    
}
                                                                                                            


int Trie::min(string s)
{
    Node* current = root;
    
    
    for ( int i = 0;
             i < s.length();
             
             
             i++ )
        {
            Node* tmp = current->findChild(s[i]);
            
            
            if ( tmp == NULL ) return -1;
            
            if(tmp->x<2) return i+1;
            
            current = tmp;
            
            
            
        }
        
    return s.length();
    
    
    
}





int main(){
    
    ifstream arq(getenv("INPUT"));
    cin.rdbuf(arq.rdbuf());
    
    ofstream brq(getenv("OUTPUT"));
    cout.rdbuf(brq.rdbuf());
    
    
    string s;
    int t;
    cin>>t;
    for(int c=1;c<=t;c++){
        int n;
        cin>> n;
        Trie* trie = new Trie();
        int res=0;
        for(int i=0;i<n;i++){
            cin>>s;
            trie->addWord(s);
            res+=trie->min(s);
        }
        
        
    
    cout << "Case #" << (c) << ": " << res << endl;
    }
    
    return 0;
}

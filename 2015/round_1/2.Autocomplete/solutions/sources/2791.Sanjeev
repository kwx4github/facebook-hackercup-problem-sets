#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<iostream>
using namespace std;
#define ALPHABET_SIZE (27)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int cnt;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->cnt = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int ans=0;
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->cnt++;
    pCrawl = pTrie->root;
    bool flag=false;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(flag==false){
                    ans=ans+level+1;
                    flag=true;
            }
            flag=true;
        }
        pCrawl = pCrawl->children[index];
    }
    if(flag==false)
    {
        ans=ans+length;
    }
    // mark last node as leaf
    pCrawl->value = pTrie->cnt;
}

// Driver
int main()
{

    int N,t;
    char str[1000010];
    scanf("%d",&t);
    for(int tc=1;tc<=t;tc++)
    {
        ans=0;
        trie_t trie;
        initialize(&trie);
        scanf("%d",&N);
        for(int i = 0; i < N; i++)
        {
            cin>>str;
            insert(&trie,str);
        }
        printf("Case #%d: %d\n",tc,ans);
    }
    return 0;
}

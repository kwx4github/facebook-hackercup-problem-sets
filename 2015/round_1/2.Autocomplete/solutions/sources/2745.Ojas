class Node:
    e=0
    c=''
    child=[]
    val=0
    def fillChild(self):
        self.child = [None for i in range(26)]
class Trie:
    root = Node()
    root.fillChild()
    def insert(self,s):
        par = self.root
        for i in range(len(s)):
            if(par.child[ord(s[i])-ord('a')]!=None):
                par = par.child[ord(s[i])-ord('a')]
                par.val += 1
            else:
                par.child[ord(s[i])-ord('a')] = Node()
                par.child[ord(s[i])-ord('a')].fillChild()
                par.child[ord(s[i])-ord('a')].c=s[i]
                par = par.child[ord(s[i])-ord('a')]
                par.val = 1
        par.e = par.e+1
    def search(self,s):
        par = self.root
        count=0
        flag=0
        for i in range(len(s)):
            if(par.child[ord(s[i])-ord('a')]==None):
                return count
            count += 1
            par = par.child[ord(s[i])-ord('a')]
        return count

t = input()
for tt in range(t):
    n=input()
    tr = Trie()
    total = 0
    for i in range(n):
        s =  raw_input()
        count = tr.search(s)+1
        if(count>len(s)):
            count=len(s)
        total += count
        tr.insert(s)
    tr.root.fillChild()
    print("Case #%d: %d" % (tt+1,total))
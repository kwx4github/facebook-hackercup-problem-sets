import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class AutoComplete {
	
	static class Scanner{
		BufferedReader br=null;
		StringTokenizer tk=null;
		public Scanner(){
			br=new BufferedReader(new InputStreamReader(System.in));
		}
		public String next() throws IOException{
			while(tk==null || !tk.hasMoreTokens())
				tk=new StringTokenizer(br.readLine());
			return tk.nextToken();
		}
		public int nextInt() throws NumberFormatException, IOException{
			return Integer.valueOf(next());
		}
		public long nextLong() throws NumberFormatException, IOException{
			return Long.valueOf(next());
		}
		public double nextDouble() throws NumberFormatException, IOException{
			return Double.valueOf(next());
		}
	}
	
	static int count = 0;
	static Node root;
	
	static class Node{
		Node[] h;
		public Node(){
			h = new Node[30];
		}
	}
	
	static void add(Node r, char[] w, int idx, boolean flag){
		if (idx == w.length)
			return;
		int c = w[idx] - 'a';
		if (r.h[c] == null){
			r.h[c] = new Node();
			if (flag){
				flag = false;
				count++;
			}
			add(r.h[c], w, idx + 1, flag);
		}
		else{
			if (flag)
				count++;
			add(r.h[c], w, idx + 1, flag);
		}
	}
	
	public static void main(String args[]) throws NumberFormatException, IOException{
		Scanner sc = new Scanner();
		int T = sc.nextInt();
		for(int c = 1; c <= T; c++){
			int N = sc.nextInt();
			count = 0;
			root = new Node();
			for(int i = 0; i < N; i++){
				char[] cad = sc.next().toCharArray();
				add(root, cad, 0, true);
			}
			System.out.printf("Case #%d: %d\n", c, count);
		}
	}

}

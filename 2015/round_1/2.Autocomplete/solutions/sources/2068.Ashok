#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#include <cassert>
#include <stack>
#include <complex>
#include <utility>
#include <cstdio>
#include <stdlib.h>     /* malloc, free, rand */

#define MAX 2002


using namespace std;

struct trie {
    struct trie *child[26];
};

int min(int a, int b) {
    return (a>b) ? b:a;
}

struct trie * createNode() {
    struct trie *new_node;
    new_node = (struct trie *)malloc(sizeof(struct trie));
    for(int i=0; i<26; i++) {
        new_node->child[i] =NULL;
    }
    return new_node;
}

int main() {
    int cases; scanf("%d",&cases);
    int n,created_nodes;
    for(int case_no=1; case_no<= cases; case_no++) {
        
        int answer = 0;
        scanf("%d",&n);
        struct trie *node = createNode();
        string s;
        
        for(int i=0; i<n; i++) {
            
            cin >> s;
            int moved_steps = -1;
            int flag = 0;
            struct trie * start_point = node;
            
            for(int j=0; j<s.length(); j++) {
                if(start_point->child[s[j]-'a'] == NULL) {
                    start_point->child[s[j]-'a'] = createNode();
                    if(flag == 0) {
                        moved_steps = j+1;
                        flag = 1;
                    }
                    start_point = start_point->child[s[j]-'a'];
                }
                else {
                    if( (j == (int)s.length() -1) && flag==0)
                            moved_steps = (int)s.length();
                        
                    start_point = start_point->child[s[j]-'a'];
                }
            }
            
            answer += moved_steps;
        }
        free(node);
        printf("Case #%d: %d\n",case_no,answer);
    }
    
    return 0;
    
}





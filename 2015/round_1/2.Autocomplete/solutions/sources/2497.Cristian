#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

char line[1000001];

struct Node {
   char c;
   unsigned complete_words;
   vector<Node*> children;
   bool operator <(Node &other) {
     return c < other.c;
   }
} nodes[1000001];

auto comp = [] (Node *a, Node *b) {
   return *a < *b;
};

struct Counter {
   Node *ptr;
   int count;
};

class Autocomplete {
 public:
   Node *next_child = nodes + 1;
   void insert(char *word) {
      Node *root = nodes;
      while (*word) {
         Node temp = {*word};
         vector<Node*>::iterator end = root->children.end();
         vector<Node*>::iterator begin = root->children.begin();
         vector<Node*>::iterator lower = lower_bound(begin, end, &temp, comp);
         if (lower != end && (*lower)->c == *word) {
            Node *new_root = *lower;
            word++;
            root->complete_words++;
            root = new_root;
            if (*word == '\0') root->complete_words++;
         } else do {
            next_child->c = *word;
            root->complete_words++;
            //next_child->complete_words = 1;
            root->children.push_back(next_child);
            sort(root->children.begin(), root->children.end(), comp);
            word++;
            root = next_child;
            next_child++;
            if (*word == '\0') root->complete_words++;
         } while (*word);
      }
   }
   int min_count(char *word) {
      int count = 0;
      Node *root = nodes;
      while (*line) {
         Node temp = {*word};
         vector<Node*>::iterator end = root->children.end();
         vector<Node*>::iterator begin = root->children.begin();
         vector<Node*>::iterator lower = lower_bound(begin, end, &temp, comp);
         if (lower != end && (*lower)->c == *word) {
            Node *new_root = *lower;
            count++;
            if (new_root->complete_words == 1) break;
            else root = new_root;
            word++;
         } else break;
      }
      return count;
   }
   ~Autocomplete () {
      for (Node *it = nodes, *end = &nodes[1000001]; it != end; it++) {
         it->children.clear();
         it->complete_words = 0;
      }
   }
};

int main() {
   int t;
   cin >> t;
   cin.get();
   for (int cases = 1; cases <= t; cases++) {
      int n;
      long long count = 0;
      cin >> n;
      cin.get();
      Autocomplete auto_tree;
      for (int line_count = 0; line_count < n; line_count++) {
         cin.getline(line, 1000001);
         auto_tree.insert(line);
         count += auto_tree.min_count(line);
      }
      cout << "Case #" << cases << ": " << count << endl;
   }
   return 0;
}

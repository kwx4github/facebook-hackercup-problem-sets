#include <cstdio>

struct tree_node{
	tree_node* children[26];

	tree_node(){
		for(int i=0;i<26;i++){
			children[i]=NULL;
		}
	}
	~tree_node(){
		for(int i=0;i<26;i++){
			if(children[i]!=NULL){
				delete children[i];
			}
		}
	}
};

void debug_print(tree_node* root, int depth){
	for(int i=0;i<26;i++){
		if(root->children[i]!=NULL){
			for(int j=0;j<depth;j++){
				printf(" ");
			}
			printf("%c:\n",'a'+i);
			debug_print(root->children[i],depth+1);
		}
	}
}

int crawl(tree_node* root,char* buff){
	for(int i=0;;i++){
		if(buff[i]==0){
			//printf("All characters needed :(\n");
			return i; //all characters
		}
		if(root->children[buff[i]-'a']==NULL){
			return i+1;//OVERRIDE
			/*for(int j=0;j<26;j++){
				if(root->children[j]!=NULL){
					printf("Making new branch - not null for %c\n",'a'+j);
					return i;
				}
			}
			printf("I'm a prefix\n");
			return i+1; //one more, as it is prefix of another word
			*/
		}
		root=root->children[buff[i]-'a'];
	}
}

void add(tree_node* root,char* buff){
	while(*buff){
		if(root->children[*buff-'a']==NULL){
			root->children[*buff-'a']=new tree_node();
		}
		root=root->children[*buff-'a'];
		buff++;
	}
}

char buff[1000009];

int main(){
	int t;
	scanf("%d",&t);
	for(int tc=1;tc<=t;tc++){
		printf("Case #%d: ",tc);
		tree_node* root=new tree_node();
		int n;
		scanf("%d",&n);
		int cnt=0;
		for(int i=0;i<n;i++){
			scanf("%s",buff);
			cnt+=crawl(root,buff);
			add(root,buff);
			//debug_print(root,0);
			//printf("DEBUG: %d AFTER %s\n",cnt,buff);
		}
		printf("%d\n",cnt);

		delete root;
	}
}

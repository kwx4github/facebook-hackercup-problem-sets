using System;
using System.Collections.Generic;
using System.Linq;

class Myon
{
    public Myon() { }
    public static void Main()
    {
        new Myon().run2();
    }

    Scanner cin;
    public void run2()
    {
        init();
        cin = new Scanner();
        int T = cin.nextInt();
        for (int i = 0; i < T; i++)
        {
            Console.Write("Case #{0}: ", i + 1);

            run();
        }
    }


    void init()
    {
    }

    void run()
    {
        int N = cin.nextInt();
        string[] st = new string[N];
        for (int i = 0; i < N; i++)
        {
            st[i] = cin.next();
        }
        Dictionary<long, bool> dic = new Dictionary<long, bool>();

        int ret = 0;
        foreach (var s in st)
        {
            long hash = 612534715476154781L;

            int add = s.Length;
            int len = 0;
            foreach (var c in s)
            {
                hash = nexthash(hash, c);
                len++;
                if (!dic.ContainsKey(hash))
                {
                    add = Math.Min(add, len);
                    dic[hash] = true;
                }
            }
            ret += add;
        }
        Console.WriteLine(ret);
    }

    long nexthash(long now, char c)
    {
        return (now * 761261789417861L) ^ ((now >> 32) ^ 712436517846187L) ^ (c * 123461784176417413L);
    }



}

class Scanner
{
    string[] s;
    int i;

    char[] cs = new char[] { ' ' };

    public Scanner()
    {
        s = new string[0];
        i = 0;
    }

    public string next()
    {
        if (i < s.Length) return s[i++];
        string st = Console.ReadLine();
        while (st == "") st = Console.ReadLine();
        s = st.Split(cs, StringSplitOptions.RemoveEmptyEntries);
        i = 0;
        return s[i++];
    }

    public int nextInt()
    {
        return int.Parse(next());
    }

    public long nextLong()
    {
        return long.Parse(next());
    }

    public double nextDouble()
    {
        return double.Parse(next());
    }

}

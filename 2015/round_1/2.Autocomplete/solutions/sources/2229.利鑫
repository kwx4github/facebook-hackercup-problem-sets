#include <iostream>
#include <cstring>
#include <cstdio>
#include <cassert>
#include <queue>
using namespace std;

const int SIZE = 1100000;
const int KIND = 26;
struct node {
  node *child[KIND];
  int word;
} pool[SIZE], *root, *last;
void build() {
  last = root = pool;
  memset(pool, 0, sizeof(pool));
}
int insert(const char *from) {
  node *p = root;
  int prefix_len = 0, find_new = false, res = 0;
  for (const char *i = from; *i; i++) {
    prefix_len++;
    if (p->child[*i - 'a'] == NULL) {
      if (!find_new) {
        res = prefix_len;
        find_new = true;
      }
      p->child[*i - 'a'] = ++last;
    }
    p = p->child[*i - 'a'];
    p->word++;
  }
  return res == 0 ? prefix_len : res;
}
char buff[SIZE];

int main() {
  int t, n;
  scanf("%d", &t);
  for (int cas = 1; cas <= t; cas++) {
    scanf("%d", &n);
    build();
    long long res = 0;
    for (int i = 0; i < n; i++) {
      scanf("%s", buff);
      res += insert(buff);
    }
    printf("Case #%d: %lld\n", cas, res);
  }
  return 0;
}

import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.io.InputStream;
import java.util.NoSuchElementException;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Nguyen Trung Hieu - vuondenthanhcong11@gmail.com
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "autocomplete.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    private class Node {
        public int prefixCount = 0;
        public Node[] nextNode = new Node[26];
        public Node() {
            prefixCount = 0;
        }
    }

    private class Trie {
        public Node root;
        public Trie() {
            root = new Node();
        }

        public void addWord(String s) {
            implAddWord(root, s);
        }

        private void implAddWord(Node curNode, String s) {
            char[] curS = s.toCharArray();
            int count = s.length();
            for (int i = 0; i < count; i++) {
                curNode.prefixCount++;
                int nextIdx = curS[i] - 'a';
                if (curNode.nextNode[nextIdx] == null) {
                    curNode.nextNode[nextIdx] = new Node();
                }
                curNode = curNode.nextNode[nextIdx];
            }
            curNode.prefixCount++;
        }

        public int countPrefix(String s) {
            return implCountPrefix(root, s);
        }

        private int implCountPrefix(Node curNode, String s) {
            char[] curS = s.toCharArray();
            int count = s.length();
            for (int i = 0; i < count; i++) {
                int nextIdx = curS[i] - 'a';
                if (curNode.nextNode[nextIdx] == null) {
                    return 0;
                }
                curNode = curNode.nextNode[nextIdx];
            }
            return curNode.prefixCount;
        }
    }

    public void solve(int testNumber, InputReader in, OutputWriter out) {
        out.print("Case #" + testNumber + ": ");
        Trie trie = new Trie();
        int count = in.readInt();
        long answer = 0;
        for (int i = 0; i < count; i++) {
            String s = in.readString();
            boolean canAdd = false;
            for (int j = 1; j <= s.length(); j++) {
                if (trie.countPrefix(s.substring(0, j)) == 0) {
                    answer += j;
                    canAdd = true;
                    break;
                }
            }
            if (!canAdd) {
                answer += s.length();
            }
            trie.addWord(s);
        }
        out.printLine(answer);
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }

    public String next() {
        return readString();
    }
}

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public void print(Object...objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(objects[i]);
        }
    }

    public void printLine(Object...objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

}


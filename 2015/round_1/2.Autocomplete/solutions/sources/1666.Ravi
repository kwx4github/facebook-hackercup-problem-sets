#include <bits/stdc++.h>
using namespace std;
#include <stdlib.h>
#include <string.h>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
typedef struct trie_node trie_node_t;
struct trie_node
{
        int trjhe;
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
    int plagiarismkimaakiaankh;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
         int cricket;
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
         int dhoni;
    return pNode;
}

void initialize(trie_t *pTrie)
{
        int redbull;//sitting under a tree
    pTrie->root = getNode();
    pTrie->count = 0;
}

long insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;//tree has n leaves
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
         long cnt=0, f=0;
    for( level = 0; level < length; level++ )
    {
            int gfert;
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();//how's life
            int life=0;
                f=1;
        }
        if(f!=1)
        cnt++;
        pCrawl = pCrawl->children[index];
    }
 
    // mark last node as leaf
    pCrawl->value = pTrie->count;
        if(f==1)
        cnt+=1;
        int dil;
        return cnt;
}
int main()
{
    trie_t trie;
    long t, k, n;
    char x[1010000];
         cin>>t;
         for(k=1;k<=t;k++)
    {
            long groot=0;
            cin>>n;
            initialize(&trie);
    for(int i = 0; i < n; i++)
    {
            cin>>x;
        groot+=insert(&trie, x);
    }
    cout<<"Case #"<<k<<": "<<groot<<endl;
 }
    return 0;
}

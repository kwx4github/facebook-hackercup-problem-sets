import java.util.ArrayList;
import java.util.Scanner;

public class Autocomplete {
	
	private static Autocomplete ap = new Autocomplete();

	public static void main(String[] args) {
		
		
		Scanner in = new Scanner(System.in);
		int case_number = (Integer.parseInt(in.nextLine()));
		
		for(int cn=0; cn < case_number; cn++) {
			
			System.out.print("Case #"+(cn+1)+": ");
			
			// root of the tree
			Node root = ap.new Node('0');
			
			int word_number = (Integer.parseInt(in.nextLine()));
			
			int out = 0;
			for(int i=0; i < word_number; i++) {
				String word = in.nextLine();
				Autocomplete.addWord(word, root);
				int tmp = Autocomplete.checkWord(word, root);
				out += tmp + 1;
				//System.out.println(i+": "+tmp);
			}
			
			System.out.println(out);
		}
	}
	
	private static void addWord(String word, Node root) {
		Node currentNode = root;
		Node newNode;
		for(int i=0; i < word.length(); i++) {
			newNode = currentNode.checkSon(word.charAt(i));
			if(newNode == null) {
				// add nodes
				for(int j=i; j < word.length(); j++) {
					newNode = ap.new Node(word.charAt(j));
					if(j == (word.length()-1))
						newNode.setLeaf();
					currentNode.addSon(newNode);
					currentNode = newNode;
				}
				return;
			} else {
				currentNode = newNode;
			}
		}
	}
	
	private static int checkWord(String word, Node root) {
		int lastIndex = 0;
		Node currentNode = root;
		Node newNode;
		for(int i=0; i < word.length(); i++) {
			newNode = currentNode.checkSon(word.charAt(i));
			if(newNode.sonsNumber() > 1) {
				lastIndex = i + 1;
			}
			if(newNode.isLeaf() && i != (word.length()-1)) {
				lastIndex = i + 1;
			}
			if(i == (word.length()-1) && newNode.sonsNumber() > 0)
				lastIndex = i;
			currentNode = newNode;
		}
		
		return lastIndex;
	}

	private class Node {

		private ArrayList<Node> sons;
		private char lett;
		private boolean leaf;

		public Node(char l) {
			sons = new ArrayList<Node>();
			lett = l;
			leaf = false;
		}

		public void addSon(Node son) {
			sons.add(son);
		}

		/**
		 * it returns the son with a certain letter if present, null otherwise
		 */
		public Node checkSon(char letter) {
			for (int i = 0; i < sons.size(); i++) {
				if (sons.get(i).getChar() == letter)
					return sons.get(i);
			}
			return null;
		}
		
		public int sonsNumber() {
			return sons.size();
		}

		public char getChar() {
			return lett;
		}
		
		public boolean isLeaf() {
			return leaf;
		}
		
		public void setLeaf() {
			leaf = true;
		}
	}

}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import static java.lang.Integer.parseInt;
import static java.lang.Math.max;
import org.apache.commons.collections4.list.TreeList;


public class Autocomplete {

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static void printCase() {
		out.print("Case #" + test + ": ");
}	

static int nextInt() throws IOException {
        return parseInt(next());
}

static String next() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
                tok = new StringTokenizer(in.readLine());
        }
        return tok.nextToken();
}

	public static void main(String[] args) {
		try {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(new OutputStreamWriter(System.out));
            int T = nextInt();
            for (test = 1; test <= T; test++) {
                    solve();
            }
            in.close();
            out.close();
    } catch (Throwable e) {
            e.printStackTrace();
    }
}

	private static int find(String word, TreeList <String>dict, int l, int r) {
		int index;
		if(l == r){
			if(word.compareTo(dict.get(l))<0){
				return l-1;
			} else {
				return l;
			}
		}
		if(l > r){return l-1;}
		index = (l+r)/2;
		if(word.compareTo(dict.get(index))<0){
			if (index==0){
				return -1;
			} else{
				return find(word, dict, l, index-1);
			}
		} else {
			return find(word, dict, index+1, r);
		}
	}
	
	private static void solve() {
		int num;
		String word;
		int idx;
		TreeList dict = new TreeList <String>();
		
		try {
			num = nextInt();
			int count=0;
			for(int w=1; w<= num; w++){
				word = next();
				idx = find(word, dict, 0, dict.size()-1);
				int match=0;
				for(int i=0; i<2; i++){
					int len=1;
					while(0<=idx+i && idx+i<dict.size() && word.regionMatches(0, (String) dict.get(idx + i), 0, len))
						len++;
					match = max(match, len-1);
				}
				count += (match == word.length()) ? word.length() : match + 1;
				dict.add(idx+1, word);
			}
			printCase();
			out.println(count);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			
	}
	}


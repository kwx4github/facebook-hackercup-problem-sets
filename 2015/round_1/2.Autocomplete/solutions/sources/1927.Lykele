#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <stdio.h>
#include <locale>
#include <codecvt>
#include <sstream>



using namespace std;

class treenode{
public:
	std::vector< treenode* > tn;

	treenode() {
		tn.resize(26);
	}
	void addnode(int pos)
	{
		treenode * tmp = new treenode;
		tn[pos] = tmp;
	}
	bool hasindex(int pos)
	{
		if (tn[pos] == NULL)
			return false;
		return true;
	}
};


void main(void)
{
	ifstream fin("autocomplete.txt");

	ofstream fout("autocomplete_out.txt", std::ofstream::binary);


	int Nprob;
	fin >> Nprob;

	for (int p = 0; p < Nprob; p++)
	{
		treenode root;

		int Nwords; 
		fin >> Nwords;

		unsigned int Nletter = 0;

		for (int i = 0; i < Nwords; i++)
		{
			std::string tmp; 
			fin >> tmp;

			bool notadded = true;

			//std::cout << " " << endl;
			
			treenode * ptr = &root;
			for (int i = 0; i < tmp.size(); i++)
			{
				int ind = tmp[i] - 97; //make a set to array index 0.
				if (ptr->hasindex(ind))
				{
					ptr = (ptr->tn[ind]);

					if (i == tmp.size() - 1 && notadded) //full word...
					{ 
						notadded = false;
						Nletter += (i + 1);
						//std::cout << "1  " << Nletter << endl;
					}
				}
				else  {
					ptr->addnode(ind);
					ptr = (ptr->tn[ind]);
					if (notadded)  
					{
						notadded = false;
						Nletter += (i + 1);
						//std::cout << "1  " << Nletter << endl;
					}
				}
			}
				

		}
		std::cout << "Case #" << (p+1) << ": " << Nletter << endl;
		fout << "Case #" << (p + 1) << ": " << Nletter << endl;
	}
	fout.close();

	return;
}

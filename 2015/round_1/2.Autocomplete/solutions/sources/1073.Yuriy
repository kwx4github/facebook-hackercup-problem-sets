#include "stdafx.h"

#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <algorithm>
#include <set>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <memory>
#include <array>

class trie
{
public:
    int add_word(const std::string& word)
    {
        return insert_into(word, root);
    }

private:
    struct node;
    using map = std::unordered_map<char, node>;
    struct node
    {
        char c;
        map children;
        std::string suffix;
        bool is_last;
    };

    int insert_into(const std::string& word, map& map, int level = 0)
    {
        auto pos = map.find(word[0]);
        if (pos != map.end())
        {
            node& n = pos->second;
            expand_suffix(n);
            if (word.length() == 1)
            {
                n.is_last = true;
                return level + 1;
            }
            else
            {
                return insert_into(word.substr(1), n.children, level + 1);
            }
        }

        // no such node in the map, add new terminal node
        map.insert({word[0], { word[0], {}, word.substr(1), true }});
        return level + 1;
    }

    void expand_suffix(node& n)
    {
        if (n.children.empty() && n.suffix.size() && n.is_last)
        {
            insert_into(n.suffix, n.children);
            n.suffix.clear();
            n.is_last = false;
        }
    }

private:
    map root;
};

int main()
{
    std::istringstream ins(R"(5
5
hi
hello
lol
hills
hill
5
a
aa
aaa
aaaa
aaaaa
5
aaaaa
aaaa
aaa
aa
a
6
to
be
or
not
two
bee
3
having
fun
yet)");
    std::istream& in = 
        //ins
        std::cin
        ;

    std::string line;
    std::getline(in, line);
    int count = std::stoi(line);
    for (int i = 0; i != count; ++i)
    {
        trie t;
        int total = 0;

        std::getline(in, line);
        int count = std::stoi(line);
        for (int j = 0; j != count; ++j)
        {
            std::getline(in, line);
            total += t.add_word(line);
        }

        std::cout << "Case #" << i + 1 << ": " << total << std::endl;
    }
}

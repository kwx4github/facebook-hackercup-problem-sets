#include <iostream>
#include <map>
#include <set>
using namespace std;
map<int, int> M[1000117];
int mark[1000117];

int cnt = 0  ;
long long int hashCalculator(string str){
	
	int base[4] = {26, 27, 28, 29};
	int mod[4] = {1000117, 1000133, 1000213, 1000313};
	int hash[4]	= {1,1,1,1};
	int len = str.size();
	int ckey = 2;
	bool visited = false;
	long long int ret = 0;
	for ( int i = 0 ; i < len; i++ ) {
		int la = str[i]-'a';
		for ( int j = 0 ; j < ckey; j++ ) {
			
			hash[j] *= base[j];
			hash[j] += la;
				 			
			hash[j] %= mod[j];
			
		}
		if ( mark[hash[0]] != cnt ) {
			M[hash[0]].clear();		
			mark[hash[0]] = cnt;
		}
		int cM = (++M[hash[0]][hash[1]]); 	
		if ( !visited )	 ret++;
		if ( cM == 1 || visited ) {
			visited = true;
		}
	}
	return ret;		
}
int main() {
	int T;
	cin >> T;
	for ( int i = 0 ; i < T; i++ ) {
		int N;
		cin >> N;
		
		string str;
		cnt++;	
		long long int ret = 0;
		for ( int j = 0 ; j < N; j++ ) {
			cin >> str;
			long long int reti = hashCalculator(str);
			ret += reti;	 
		}
		
		cout <<"Case #"<<(i+1)<<": "<<ret << endl;
		// insert into trie and check the largest prefix and return that	
	}
}

#include <algorithm>
#include <iostream>
#include <string.h>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string.h>
using namespace std;
#define MAXN 1000010
#define MAXC 1000010
#define xx first 
#define yy second 
#define INF 1000000000
#define mp make_pair
#define pb push_back
#define MOD 1000000007

using namespace std;

struct Node{
   char t;
   int c[26];
   int dup ;
   int depth;
   Node () {
        memset ( c , -1 , sizeof (c) );       
   }
   Node ( char T , int D , int d) {
       memset (c , -1 , sizeof (c));  
       t = T;
       dup = D;
       depth = d;
   }       
};

int index = 1;
Node nodes[MAXN];

void add (char* a) {
    
    int len = strlen ( a ) ;
    int current = 0;
    
    for ( int i = 0; i < len; i ++ ) {
        int c = a[i] - 'a';
        
        if ( nodes[current].c[ c ] == -1 ) {
             
            nodes[ index ++ ] = Node ( a[i] , 1 , nodes[current].depth + 1);    
            nodes[ current ].c[c] = index - 1;
            current = index - 1;
                
        } else {
            //nodes[ current ].dup ++;
            current = nodes[current].c[c];
            nodes[current].dup ++;        
        }
    }
    
}
int calc (char *a) {
    int len = strlen ( a ) ;
    add ( a );
    int current = 0;
    for ( int i = 0; i < len; i ++ ) {
        int c = a[i] - 'a';
        current = nodes[current].c[c];
        if ( nodes[current].dup == 1 ) return nodes[current].depth;    
    }
    return len;
}
void prepare () { 
    
    for ( int i = 0; i <= index; i ++ ) {
        nodes[i] = Node ();    
    }
    
    index = 1; 
    nodes[0] = Node ( 1 , 2 , 0);     
}  
int n;
char str[MAXC];
int main() {

    
    freopen ("autocomplete.txt" , "r" , stdin);
    freopen  ("out.txt" , "w", stdout);
   
    int T;
    
    cin >> T;
    for ( int test = 1; test <= T; test ++ ) {
         prepare();
         cin >> n;
         long long res = 0;
         for (int i =  0; i < n; i ++ ) {
             scanf("%s" ,&str);
             res = res + calc (str);
         }
         //cout << "-->"<<res<< endl;
        cout <<"Case #"<< test <<": "<< res<<endl;
    } 
    
//system("pause");    
return 0;
}



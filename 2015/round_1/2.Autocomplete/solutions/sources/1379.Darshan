package facebook.hacker.cup.year2015.round1;

import java.io.*;
import java.util.HashMap;

/**
 * Created by Darshan on 1/18/2015.
 */
public class AutoComplete {
    public static void main(String[] args) throws IOException {
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter out = new PrintWriter(System.out);
        BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\Darshan\\Downloads\\autocomplete.txt"));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")));

        for (int t = Integer.parseInt(br.readLine()), T = 1; t-- > 0; T++) {
            int n = Integer.parseInt(br.readLine());

            Trie trie = new Trie();
            long sum = 0;
            for (int i = 0; i < n; i++) {
                String word = br.readLine();
                trie.insert(word);
                sum += trie.getMinimumPrefixLength(word);
            }
            out.println("Case #" + T + ": " + sum);
        }
        out.close();
    }
}

class Trie {
    private Node root;

    public Trie() {
        root = new Node('\u0000');
    }

    public void insert(String word) {
        Node current = root;
        int l = word.length();

        for (int i = 0; i < l; i++) {
            char ch = word.charAt(i);
            HashMap<Character, Node> children = current.children;

            if (children.containsKey(ch)) {
                Node child = children.get(ch);
                child.countPrefixes++;
                current = child;
            } else {
                Node child = new Node(ch);
                children.put(ch, child);
                current = child;
            }
        }
    }

    public int getMinimumPrefixLength(String word) {
        Node current = root;
        int l = word.length();
        int min = 0;

        for (int i = 0; i < l; i++) {
            char ch = word.charAt(i);
            min++;

            HashMap<Character, Node> children = current.children;
            Node child = children.get(ch);
            if (child.countPrefixes == 1) {
                break;
            }
            current = child;
        }

        return min;
    }
}

class Node {
    public char ch;
    public HashMap<Character, Node> children;
    public int countPrefixes;

    public Node(char ch) {
        this.ch = ch;
        children = new HashMap<Character, Node>();
        countPrefixes = 1;
    }
}

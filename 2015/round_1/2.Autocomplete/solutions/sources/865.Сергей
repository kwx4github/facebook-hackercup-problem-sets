#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <string>
using namespace std;

struct Vertice
{
	map<char, Vertice*> nextv;
	int cnt;

	Vertice()
	{
		cnt = 0;
	}
} *tree;

char s[10000001];

int add_string(Vertice* tree, char* str)
{
	int len = strlen(str);
	int resultPos = -1;
	Vertice* cur = tree;
	for (int i = 0; i < len; ++i)
	{
		if (cur->nextv.count(str[i]) == 0)
		{
			cur = cur->nextv[str[i]] = new Vertice();
			if (resultPos == -1)
				resultPos = i;
		}
		else
			cur = cur->nextv[str[i]];
		cur->cnt++;
	}
	return (resultPos >= 0) ? resultPos + 1 : len;
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	int tests_count;
	scanf("%d", &tests_count);
	getchar();
	for (int z = 1; z <= tests_count; ++z)
	{
		cout << "Case #" << z << ": ";
		tree = new Vertice();
		int n;
		scanf("%d", &n); getchar();
		int answer = 0;
		for (int i = 0; i < n; ++i)
		{
			gets(s);
			answer += add_string(tree, s);
		}
		printf("%d\n", answer);
	}
	return 0;
}
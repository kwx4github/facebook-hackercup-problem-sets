#include<bits/stdc++.h>

#define NODES 10000000

using namespace std;

int N, M;

int dictionary[NODES][30], nrNoduri;
int finalcuv[NODES];

void insert(string s) {
     int croot = 0;
     int ok = 1;
     for (int i=0; s[i] != '\0'; ++i) {
         if (dictionary[croot][ s[i] - 'a' ])
            croot = dictionary[croot][ s[i] - 'a' ];
            else {
                 ++nrNoduri;
                 dictionary[croot][ s[i] - 'a' ] = nrNoduri;
                 croot = nrNoduri;
                 ok = 0;
            }
     }
     finalcuv[croot] = 1;
}

long long query(string s) {
    int croot = 0;
    int numar = 0;

    for (int i=0; s[i] != '\0'; ++i) {
        ++numar;
        if (dictionary[croot][ s[i] - 'a' ]) {
           croot = dictionary[croot][ s[i] - 'a' ];
        }
           else return numar;
    }

    return numar;
}

string cuv, afisez;
int main()
{
    ifstream fin("ainput.in");
    ofstream fout("aoutput.out");

    int t, n;
    fin >> t;

    for(int i = 0; i < t; ++i) {
        fin >> n;
        long long nr = 0;
        for(int j = 0; j < n; ++j) {
            fin >> cuv;
            long long ncrt = query(cuv);
            afisez.assign(cuv, 0, ncrt);
            //cout << afisez<<"\n";
            insert(cuv);
            nr += ncrt;
            cuv.clear();
            afisez.clear();
        }
        fout <<"Case #"<<(i + 1)<<": "<< nr << "\n";
        for(int  p= 0; p < NODES; ++p){
            for(int j = 0; j < 30; ++j)
                dictionary[p][j] = 0;
            finalcuv[p] = 0;
        }

    }
}

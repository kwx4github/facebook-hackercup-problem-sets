#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <deque>
#include <string>
#include <algorithm>

using namespace std;

struct node // a structure to represent tree nodes 
{
  string key;
  node* link;
  node* next;

  node(const string& s) : key(s), link(0), next(0) {}
  virtual ~node() { 
    if (link) delete link; 
    if (next) delete next; 
  }
};

int prefix(const string& x, const string& key) // length of the biggest common prefix of x and key strings 
{
  int n = x.length();
  int m = key.length();
  for( int k=0; k<n; k++ )
    if( k==m || x[k]!=key[k] ) 
      return k;
  return n;
}

node* find(node* t, const string& x) // x key search in t tree 
{
  if( !t ) return 0;

  int n = x.length();
  int m = t->key.length();
  int k = prefix(x,t->key);

  if( k==0               ) return find(t->next,x); // let's look for the child's node 
  if( k==x.length()      ) return t;
  if( k==t->key.length() ) return find(t->link,x.substr(k)); // let's look for at the child's node 
  return 0; 
}

node* insert(node* t, const string& x) // inserting x key in t tree 
{
  if( !t ) return new node(x);

  int n = x.length();
  int m = t->key.length();
  int k = prefix(x,t->key);

  if( k==0 ) {
    t->next = insert(t->next,x);
  } else if( k < x.length() ) {
    // cut or not to cut?
    if( k < t->key.length() ) {
      // dividing t node according to k key symbol 
      node* p = new node(t->key.substr(k));
      p->link = t->link;
      t->link = p;
      t->key = t->key.substr(0,k);
    }
    t->link = insert(t->link,x.substr(k));
  }
  return t;
}

void print(node* t)
{
  if( !t ) return;
  cout << t->key << endl;
  print(t->next);
  print(t->link);
}


#if 0
int main()
{
    node* trie = insert(0,"Hello");
    insert(trie,"Balloon");
    insert(trie,"Ball");
    if ( find(trie,"Friend") ) cout << "Found Hell" << endl;
    if ( find(trie,"Hell") )   cout << "Found Hell" << endl;
    if ( find(trie,"Hello") )  cout << "Found Hello" << endl;
    if ( find(trie,"Helloo") ) cout << "Found Helloo" << endl;
    if ( find(trie,"Ball") )   cout << "Found Ball" << endl;
    if ( find(trie,"Balloon") )cout << "Found Balloon" << endl;
    delete trie;
}
#endif

int main (int argc, char *argv[])
{
  int T, N;
  string s, w;
  cin >> T;
  for(int i = 0; i<T; ++i) {
    cin >> N;

    int total = 0;
    node* trie = 0;
    for(int j = 0; j<N; ++j) {
      cin >> s;
      w = s + "$";
      if (!trie) trie = insert(0,w); else insert(trie,w);
      int i = 0;
      for(i = 1; i < s.length(); i++) {
        node* t = find(trie, s.substr(0,i));
        string key = t->key;
        while (t->link) { t = t->link; key += t->key; }
        if (key == w.substr(i-1)) break;
      }
      //cout << i << endl;
      total += i;
    }
    //print(trie);
    delete trie;

    printf("Case #%d: %d\n", i+1, total );
  }
  return 0;
}

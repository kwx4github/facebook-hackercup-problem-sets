
#include <bits/stdc++.h>

using namespace std;

// Typedefs
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

// Macros
#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define FORR(i, a) FOR(i, 0, a)
#define FORE(i, a, b) for(int i = a; i >= b; --i)
#define all(v) v.begin(),v.end()
#define sz(A) int((A).size())
#define CLR(x, a) memset(x, a, sizeof(x))
#define pb push_back
#define mp make_pair

// Constantes
const double PI = 2*asin(1.0);
const int INF = 1000000000;	// 9 zeros
const double EPS = 1e-10;

// Matematica basica
inline int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1; }

class Trie {
public:
	map<char, Trie*> children;
	int find_prefix (const string &, int);
	void insert (const string &, int);
};

vector<Trie *> nodes;

int Trie::find_prefix (const string &S, int pos = 0) {
	Trie *node = this;
	while (pos<sz(S)) {
		if (node->children.find (S[pos])== node->children.end()) return pos+1;
		node = node->children[ S[pos++] ];
	}
	return pos;
}

void Trie::insert (const string &S, int pos = 0) {
	Trie *node = this;
	while (pos<sz(S)) {
		if (node->children.find (S[pos]) == node->children.end()) { 
			node->children[ S[pos] ] = new Trie (); 
			nodes.pb (node->children[ S[pos] ]); 
		}
		node = node->children[ S[pos++] ];
	}
}

void clear () {
	FORR (i, sz(nodes)) delete nodes[i];
	nodes.clear();
}

int main (){
	int T;
	cin>>T;	
	FORR (c, T) {
		int N;
		cin>>N;
		Trie mt;
		string s;
		int res = 0;
		FORR (i, N) {
			cin>>s;
			int v = mt.find_prefix(s);
			mt.insert (s);
			res += v;
		}
		cout << "Case #" << (c+1) << ": " << res << endl;
		clear();
	}
}

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
struct node{
	int count;
	vector <node*> child;
	node()
	{
		count=0;
		for (int i = 0; i < 26; ++i)
		{
			child.push_back(NULL);
		}
	}
};
void insert(node* a,string &s,int len)
{
	for (int i = 0; i < s.size(); ++i)
	{
		if(a->child[s[len]-'a'] !=NULL)
		{
			a->child[s[len]-'a']->count++;
			a=a->child[s[len]-'a'];len++;
		}
		else
		{
			a->child[s[len]-'a'] = new node();
			a->child[s[len]-'a']->count++;
			a=a->child[s[len]-'a'];len++;
		}
	}
}
int find(node* a,string &s,int len)
{
	int ans=0;
	for (int i = 0; i < s.size(); ++i)
	{
		if(a->count > 1){ans++;a=a->child[s[len]-'a'];len++;}
		else break;
	}
	return ans;
}
void destroy(node* a)
{
	for (int i = 0; i < 26; ++i)
	{
		if(a->child[i]!=NULL)destroy(a->child[i]);
	}
	delete(a);
}
int main()
{
	ios::sync_with_stdio(false);
	int t;
	cin>>t;
	int count=1;
	while(t--)
	{
		int n;
		cin>>n;
		node *root= new node();
		long long final=0;
		for (int i = 0; i < n; ++i)
		{
			string s;
			cin>>s;
			root->count++;
			root->count++;
			insert(root,s,0);
			int temp=  find(root,s,0);
			final+=temp;
		}
		cout<<"Case #"<<count<<": "<<final<<endl;
		count++;
		// destroy(root);
	}
}

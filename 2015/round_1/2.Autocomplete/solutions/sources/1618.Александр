package y2015.round1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Created by aleksandr on 17.01.15.
 */
public class B {
    private static final String inputFileName = "input/2015/round1/b/autocomplete.txt";
    private static final String outputFileName = "output.txt";

    public static void main(String[] args) throws Exception {
        File inputFile = new File(inputFileName);
        Scanner scanner = new Scanner(inputFile);

        File outputFile = new File(outputFileName);
        outputFile.delete();
        outputFile.createNewFile();
        FileWriter fw = new FileWriter(outputFile);
        BufferedWriter bw = new BufferedWriter(fw);

        int numOfTestCases = scanner.nextInt();

        for (int i = 1; i <= numOfTestCases; i++) {

            int n = scanner.nextInt();
            scanner.nextLine();

            ArrayList<String> words = new ArrayList<>();

            for (int j = 0; j < n; j++) {
                words.add(scanner.nextLine());
            }

            Problem problem = new Problem(words);

            String testCase = "Case #" + i + ": " + problem.solve();
            bw.append(testCase + "\n");
            System.out.println(testCase);
        }

        bw.flush();
        fw.flush();

        bw.close();
        fw.close();
    }

    private static class Problem {
        private List<String> words;

        public Problem(List<String> words) {
            this.words = words;
        }

        public Long solve() {
            Long res = 0L;

            Trie trie = new Trie();
            for (String word : words) {
                res += trie.insert(word);
            }

            return res;
        }


        private static class TrieNode {
            TrieNode[] children = new TrieNode[26];
        }

        private static class Trie {
            TrieNode root;
            public Trie() {
                root = new TrieNode();
            }

            public int insert(String s) {
                return insertString(root, s);
            }

            private static int insertString(TrieNode root, String s) {
                TrieNode v = root;
                int way = 1;
                int ch;
                char[] chars = s.toCharArray();
                for (int i = 0; i < s.length(); i++) {
                    ch = chars[i]-97;
                    TrieNode next = v.children[ch];
                    if (next == null) {
                        v.children[ch] = next = new TrieNode();
                    } else if (i != s.length()-1){
                        way++;
                    }
                    v = next;
                }

                return way;
            }
        }
    }
}

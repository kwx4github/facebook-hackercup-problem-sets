#include <stdio.h>
#include <stdlib.h>

int test(int wordCount){
	int prefix = 0;
	int maxInputString = 1000000;
	int blockSize = 54;
	int totalBlocks = 0;
	int EOS = 'z' + 1 - 'a';
	int NoOfLinks='z'+2 - 'a';
	int currentBlock;
	char* scanBuf = malloc(sizeof(char) * maxInputString);
	int* uniques = (int*) malloc(sizeof(int) * maxInputString);
	totalBlocks++;
	int* block = (int*) malloc(sizeof(int) * (totalBlocks) * blockSize);
	int i;
	for(i = 0; i < blockSize; i++)
		block[i] = 0;
	block[NoOfLinks]++;
	for(i=0; i < wordCount; i++){
		currentBlock = 0;
		char* scanPTR;
		scanPTR = scanBuf;
		scanf("%s", scanBuf);
		while(scanPTR[0] != 0){
			int index = scanPTR[0] - 'a';
			if(block[currentBlock * blockSize + index] == 0){
				block[currentBlock * blockSize + index] = totalBlocks;
				block[currentBlock * blockSize + NoOfLinks]++;
				totalBlocks++;
				block = (int*) realloc(block, (sizeof(int) * (totalBlocks) * blockSize));
				int clear;
				for(clear=0;clear<blockSize;clear++){
					block[(totalBlocks - 1) * blockSize + clear]=0;
				}
			}
			uniques[scanPTR - scanBuf] = block[currentBlock * blockSize + NoOfLinks];
			currentBlock = block[currentBlock * blockSize + index];
			scanPTR++;
		}
		if(!block[currentBlock * blockSize + EOS])
			block[currentBlock * blockSize + NoOfLinks]++;
		block[currentBlock * blockSize + EOS]=1;
		uniques[scanPTR - scanBuf] = block[currentBlock * blockSize + NoOfLinks];
		if(uniques[scanPTR - scanBuf] > 1)
			prefix += (scanPTR - scanBuf);
		else{
			while(uniques[scanPTR - scanBuf] <= 1){
				scanPTR--;
			}
			prefix += (int) (scanPTR - scanBuf + 1);
		}
	}
	return prefix;
}
		
int main(int argc, char** argv){
	int T;
	scanf("%d", &T);
	int testCase = 1;
	while (testCase <= T){
		int words;
		scanf("%d", &words);
		printf("Case #%d: %d\n", testCase, test(words));
		testCase++;
	}
}
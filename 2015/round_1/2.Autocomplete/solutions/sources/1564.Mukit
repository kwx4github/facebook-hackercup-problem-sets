#include<bits/stdc++.h>

using namespace std;

#define FOR(i,a,b)   	for(int (i)=(a);(i)<(b);(i)++)
#define PB           	push_back
#define INF          	(1 << 26)
#define DEBUG(___x)     cout<<#___x<<" = ["<<___x<<"]"<<endl
#define SORT(___a)      sort(___a.begin(),___a.end())
#define RSORT(___a)     sort(___a.rbegin(),___a.rend())
#define PI           	3.141592653589793238
#define MP           	make_pair
#define PII          	pair<int,int>
#define ALL(___v)       (___v).begin(), (___v).end()
#define VS           	vector<string>
#define VI           	vector<int>
#define S            	size()
#define B				begin()
#define E				end()
#define print(___v)     {cout<<"[";if(___v.S)cout<<___v[0];FOR(___i,1,___v.S)cout<<","<<___v[___i];cout<<"]\n";}
#define clr(___x, ___v)	memset(___x, ___v , sizeof ___x);
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

int tu(int val) {return (1 << val);}
bool iset(int mask, int id) {if((mask & tu(id) ) != 0)return true;return false;}
void doset(int &mask, int id) {mask |= tu(id);}
void dounset(int &mask, int id) {mask = mask & (~tu(id));}

typedef long long 					bint;
template<typename T> string tos( T a ) 	{ stringstream ss; string ret; ss << a; ss >> ret; return ret;}

const int ALPHA = 26;
const int MAX = 1000003 * 19;
#define decry(x) (x-'a')

int pars[MAX];

char inss[1000009];

int n, root;
int next[MAX][ALPHA];
int data[MAX];
char leaf[MAX];

struct Trie {    
 
    void init() {
        root = 0, n = 1; clr(data, 0);
        clr(next[root], -1);
        clr(leaf, 0);
    }
    
    void insert(char *s, int x) {
        int curr = root, i, k, rind = 0;
        
        pars[rind++] = root;
        for(i = 0; s[i]; i++) {
            k = decry(s[i]);
            
            if(next[curr][k] == -1) {
                next[curr][k] = n;
                clr(next[n], -1);
                n++;
            }
            curr = next[curr][k];
            pars[rind++] = curr;
        }
        
        leaf[curr] = 1;
        
        for(i=rind-1; i >= 0; i--) {
            int v = pars[i];
            data[v] = leaf[v];
            for(int j = 0; j < ALPHA; j++) if(next[v][j] != -1) {
                data[v] += data[next[v][j]];
            }
        }
    }
    
    int cost(char *s) {
        int ret = strlen(s);
        int curr = root, i, k;
        for(i = 0; s[i]; i++) {
            k = decry(s[i]);
            if(i > 0 && data[curr] <= 1)ret = min(ret, i);
            if(next[curr][k] == -1) return 0;
            curr = next[curr][k];
        }
        return ret;
    }
 
};

int main() {
    
    freopen("autocomplete.txt", "r", stdin);
    freopen("autocomplete_final_out.txt", "w", stdout);
    
    int T, N;
    scanf("%d", &T);
    FOR(t,0,T) {
        scanf("%d", &N);
        
        Trie trie;
        trie.init();
        
        int res = 0;
        FOR(x,0,N) {
            scanf("%s", inss);
            
            trie.insert(inss, x);
            int cost = trie.cost(inss);
            res += cost;
        }
        
        printf("Case #%d: %d\n", 1+t, res);
    }
    
    return 0;
}

/*                       _        _                       _           _ 
         ___  ___  _   _| |    __| | ___ _ __   __ _ _ __| |_ ___  __| |
        / __|/ _ \| | | | |   / _` |/ _ \ '_ \ / _` | '__| __/ _ \/ _` |
        \__ \ (_) | |_| | |  | (_| |  __/ |_) | (_| | |  | ||  __/ (_| |
        |___/\___/ \__,_|_|___\__,_|\___| .__/ \__,_|_|   \__\___|\__,_|
        Mukit Hasan, Jahangirnagar University.*/

#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int N = int(1e6) + 2;
char s[N];
int tc;

struct trie{
    int nxt[26];
    trie(){memset(nxt, 0, sizeof nxt);}
};
struct tree{
    vector<trie> a;
    int root;
    tree(){}
    void reset(){
        a.resize(1); root = 0; memset(a[0].nxt, 0, sizeof a[0].nxt);
    }
    int addWord(){
        bool in = true;
        int deep = 0;
        root = 0;
        for(int i = 0; s[i]; ++i){
            deep += in;
            if (a[root].nxt[s[i] - 'a'] == 0){
                in = false;
                a[root].nxt[s[i] - 'a'] = (int)a.size();
                a.push_back(trie());
            }
            root = a[root].nxt[s[i]- 'a'];
        }
        return deep;
    }
} ds;

int nextInt(){
    gets(s);
    int t;
    sscanf(s, "%d", &t);
    return t;
}

int main(){
    freopen("autocomplete.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    tc = nextInt();
    for(int t = 1; t <= tc; ++t){
        ds.reset();
        int n = nextInt(), ans = 0;
        while (n--){
            gets(s);
            ans += ds.addWord();
        }
        printf("Case #%d: %d\n", t, ans);
    }
    return 0;
}

#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>
#include <ctime>

using namespace std;

class trie{
public:
	class Node{
	public:
		int depth;
		Node* edge[26];
		Node(int d){
			for(int i=0; i<26; i++){
				edge[i] = NULL;
			}
			depth = d;
		}

	};
	
	Node* add(Node* t, string &s, int pos){
		if(pos==s.size()) return t;
		
		if(t->edge[ s[pos] - 'a' ] == NULL){
			t->edge[s[pos] - 'a'] = new Node(pos+1);
			pool.push_back(t->edge[s[pos] - 'a']);
			
		}
		t->edge[s[pos] - 'a'] = add(t->edge[s[pos] - 'a'], s, pos+1);
		
		return t;
	}

	int get_depth(Node* t, string &s, int pos){
		if(t==NULL) return pos;
		if(s.size() == pos) return t->depth;
		return get_depth( t->edge[ s[pos] - 'a' ], s, pos+1 );
	}
	
	vector<Node*> pool;
	Node* root;
	trie(){
		pool.resize(1);
		pool[0] = new Node(0);
		root = pool[0];
	}

	~trie(){
		for(int i=0; i<pool.size(); i++){
			delete(pool[i]);
		}
	}

	int get_d(string &s){
		return get_depth(root, s, 0);
	}

	int insert(string &s){
		root = add(root, s, 0);
	}

};


int main(){
	int T;
	cin >> T;
	//auto start = clock();
	for(int t=0; t<T; t++){
		int n;
		cin >> n;
		set<string> s;
		s.insert("^");
		s.insert("|");

		//trie y;
		
		int ans = 0;
		for(int i=0; i<n; i++){
			string x;
			cin >> x;
			
			auto itr = s.lower_bound(x);
			int a = 0;
			{
				string tmp = *itr;
				for(a=0; a<tmp.size() && a<x.size(); a++){
					if(x[a] != tmp[a]) break;
				}

				//cerr << a+1 << " " << tmp << endl;
			}

			
			int b = 0;
			{
				itr--;
				string tmp = *itr;
				for(b=0; b<tmp.size() && b<x.size(); b++){
					if(x[b] != tmp[b]) break;
				}
				
				//cerr << b+1 << " " << tmp << endl;
			}

			//s.insert(x);
			s.insert(itr, x);

			//cerr << min((int)x.size(), max(a+1, b+1)) << endl;

			

			//ans += y.get_d(x);
			//y.insert(x);
			
			ans += min((int)x.size(), max(a+1, b+1));
		}
		cout << "Case #" << t+1 << ": " << ans << endl;
	}

	//cerr << (clock() - start) << endl;
	return 0;
}
/*
    Author: Zhouxing Shi
    Created on Jan18, 2014
*/
#include <bits/stdc++.h>
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define drep(i, a, b) for (int i = (a); i >= (b); --i)
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define pb(x) push_back(x)
#define mp(x, y) (make_pair(x, y))
#define clr(x) memset(x, 0, sizeof(x))
#define xx first
#define yy second

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int inf = ~0U >> 1;
const ll INF = ~0ULL >> 1;;
const double pi = acos(-1.0);
template <class T> inline T sqr(T a) { return a * a; }
template <class T> inline void read(T &n)
{
    char c;
	for (c = getchar(); !(c >= '0' && c <= '9'); c = getchar()); n = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar()) n = n * 10 + c - '0';
}
int Pow(int base, int n, int mo)
{
	if (n == 0) return 1;
	if (n == 1) return base;
	int tmp = Pow(base, n >> 1, mo);
	tmp = (ll)tmp * tmp % mo;
	if (n & 1) tmp = (ll)tmp * base % mo;
	return tmp;
}

//***************************

struct node
{
	node *nxt[26];
	int size;
	node()
	{
		REP(i, 0, 26) nxt[i] = NULL;
		size = 0;
	}
} *rt;

string dic[200000];
int N;

void work(int _)
{
	rt = new node();
	cin >> N;
	int Ret = 0;
	rep(i, 1, N)
	{
		cin >> dic[i];
		int l = dic[i].size();
		node *p = rt;
		REP(j, 0, l)
		{
			if (!p->nxt[dic[i][j] - 'a']) p->nxt[dic[i][j] - 'a'] = new node();
			p = p->nxt[dic[i][j] - 'a'];
			p->size++;
		}
		p = rt;
		REP(j, 0, dic[i].size())
		{
			p = p->nxt[dic[i][j] - 'a'];
			Ret++;
			if (p->size == 1) break;
		}
	}
	cout<<"Case #" << _ << ": " << Ret << endl;
	
}

int main()
{
	freopen("autocomplete.txt", "r", stdin);
	freopen("autocomplete.ans", "w", stdout);
	ios::sync_with_stdio(0);
	int cases;
	cin >> cases;
	rep(_, 1, cases) work(_);
	return 0;
}



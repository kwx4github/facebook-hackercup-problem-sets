package Round2_2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.StringTokenizer;


public class AutoComplete {
public static void main(String args[]) throws NumberFormatException,IOException {
		
		Stdin in = new Stdin();
		PrintWriter out = new PrintWriter("out.txt");
		int t=in.readInt();
		int n;
		char[]s;
		for(int i=1;i<=t;i++){
			n=in.readInt();
			Trie trie=new Trie();
			for(int j=0;j<n;j++){
				s=in.readNext().toCharArray();
				trie.insert(s);
			}
			print(out,trie.getCost(),i);
		}
		out.flush();
		out.close();

	}
	private static class Node{
		Node []next;
		private Node(){
			next=new Node[26];
		}
		private boolean hasNext(char c){
			return next[c-'a']!=null;
		}
		private Node getNext(char c){
			return next[c-'a'];
		}
		private void setNext(char c){
			next[c-'a']=new Node();
		}
	}
	private static class Trie{
		private Node root;
		private int cost;
		private Trie(){
			root=new Node();
			cost=0;
		}
		private void insert(char[]str){
			Node cur=root;
			for(int i=0;i<str.length;i++){
				cost++;	
				if(cur.hasNext(str[i])){					
					cur=cur.getNext(str[i]);							
				}else{
					for(int j=i;j<str.length;j++){
						cur.setNext(str[j]);
						cur=cur.getNext(str[j]);
					}
					break;
				}			
			}
		}
		private int getCost(){
			return cost;
		}
		
	}
	private static void print(PrintWriter out,Object t,int cases){
		out.println("Case #"+cases+": "+t);
	}

	private static class Stdin {
		BufferedReader br;

		StringTokenizer st = new StringTokenizer("");

		private Stdin() throws FileNotFoundException {
			br = new BufferedReader(new FileReader("autocomplete.txt"));

		}

		private String readNext() throws IOException {

			while (!st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		private int readInt() throws IOException, NumberFormatException {

			return Integer.parseInt(readNext());

		}

		private long readLong() throws IOException, NumberFormatException {

			return Long.parseLong(readNext());

		}
		private double readDouble() throws IOException, NumberFormatException {

			return Double.parseDouble(readNext());

		}
	}
}

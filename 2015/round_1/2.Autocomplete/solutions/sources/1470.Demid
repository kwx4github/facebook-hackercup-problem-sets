import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.StringTokenizer;

public class B {
    BufferedReader br;
    PrintWriter out;
    StringTokenizer stok;

    String nextToken() throws IOException {
        while (stok == null || !stok.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null) {
                return null;
            }
            stok = new StringTokenizer(s);
        }
        return stok.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    char nextChar() throws IOException {
        return (char) (br.read());
    }

    String nextLine() throws IOException {
        return br.readLine();
    }
    class Node {
        int count;
        HashMap<Character, Node> map;

        Node() {
            this.count = 1;
            this.map = new HashMap<Character, Node>();
        }
    }
    void add(Node node, StringBuilder sb){
        if (sb.length() == 0) {
            return;
        }
        if (node.map.containsKey(sb.charAt(0))) {
            Node next = node.map.get(sb.charAt(0));
            next.count++;
            add(next, sb.deleteCharAt(0));
        } else {
            Node next = new Node();
            node.map.put(sb.charAt(0), next);
            add(next, sb.deleteCharAt(0));
        }
    }

    private void solve() throws IOException {
        int t = nextInt();
        for (int q = 1; q <= t; q++) {
            int n = nextInt();
            Node root = new Node();
            long ans =0 ;
            for (int i =0 ; i < n; i++) {
                String s = nextToken();
                StringBuilder sb= new StringBuilder(s);
                root.count++;
                add(root, sb);

                Node cur = root;
                int j = 0;
                while (cur.count > 1 && j < s.length()) {
                    ans++;
                    cur = cur.map.get(s.charAt(j));
                    j++;
                }
            }
            out.printf("Case #%d: %d%n", q, ans);
        }
    }



    void run() throws IOException {
        br = new BufferedReader(new FileReader("input.txt"));
        out = new PrintWriter("output.txt");
        // br = new BufferedReader(new InputStreamReader(System.in));
        // out = new PrintWriter(System.out);
        solve();
        br.close();
        out.close();
    }

    public static void main(String[] args) throws IOException {
        // Locale.setDefault(Locale.US);
        new B().run();
    }
}
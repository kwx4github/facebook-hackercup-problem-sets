#include <bits/stdc++.h>

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)

#define all(v) (v).begin(), (v).end()
#define pb push_back

using namespace std;

typedef vector<int> vi;
typedef long long i64; 

const int N = 1e7 + 13;

int lcp(vi* bor, const string& w) {
    int i = 0;
    int j = 0;
    while( j < w.length() && i != -1 ) {
        i = bor[ w[j] - 'a' ][i];
        ++j;
    }
    return j-1;
}

void add(vi* bor, const string& w) {
    int i = 0;
    int j = 0;
    while( j < w.length() ) {
        if( bor[ w[j] - 'a' ][i] == -1 ) {
            bor[ w[j] - 'a' ][i] = bor[0].size();
            forn(t, 26) bor[t].pb(-1);
        }
        i = bor[ w[j] - 'a' ][i];
        ++j;
    }
}

void solve() {
    vi bor[26];
    int T; cin >> T;
    fore(t, 1, T) {
        forn(i,26) bor[i].assign(1,-1);
        cout << "Case #" << t << ": ";
        int n;
        cin >> n;
        int s = 0;
        forn(i, n) {
            string w; cin >> w;
            s += lcp(bor, w) + 1;
            add(bor, w);
        }
        cout << s << '\n';
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    freopen("autocomplete.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    solve();
    return 0;
}

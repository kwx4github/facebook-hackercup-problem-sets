#include <iostream>
#include <vector>
using namespace std;
struct node{
	int val;
	int count;
	vector<node*> child;
	node(){
		val = count = 0;
		child = vector<node*>(30, NULL);
	}
	~node(){
		for(auto *p : child) delete p;
	}
};

node* trie = new node();

void add(string key)
{
    int level;
    int index;
    node* p = trie;
  	
    for(level = 0; level < key.size(); level++)
    {
        index = key[level]-'a';
        if( !p->child[index] )
        {
            p->child[index] = new node();
        }
        p = p->child[index];
		p->count++; 
    }
 
    p->val = 1;
}

string search(string key)
{
    int level;
    int index; 
    node* p = trie;
 	// if(p->child[key[0]-'a'] > 1) return key;
 	string s;

    for( level = 0; level < key.size(); level++ )
    {
        index = key[level]-'a';
        s.push_back(key[level]);

        p = p->child[index];
        if(p->count == 1) return s;
    }
    return s;	 
}

void print(node *p = trie, char c = ' '){
	if(p == NULL) return;
	cout<<c<<" "<<p->count<<" "<<p->val<<endl;
	for(int i = 0; i < 30; i++)
		print(p->child[i], 'a'+i);
}

int main(){
	

	string s;
	// while(cin>>s){
	// 	if(s == "null") break;
	// 	add(s);
	// 	// print();
	// 	cout<<search(s)<<endl;
	// }
	int t, k = 0;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		trie = new node();
		k++;
		int r = 0;
		while(n--){
			cin>>s;
			add(s);
			r += (search(s)).size();
		}
		cout<<"Case #"<<k<<": "<<r<<endl;
	}
}
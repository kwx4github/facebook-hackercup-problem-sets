#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <stack>
#include <list>
#include <deque>
#include <map>
#include <bitset>
#include <string>
#include <sstream>
#include <algorithm>

using namespace std;

#define ll long long

class node
{
public:
	node** child;
	node()
	{
		child = new node*[26];
		for(int i = 0; i < 26; i++)
			child[i] = NULL;
	}
	~node()
	{
		delete[] child;
	}
};

class Trie
{
	node *root;
public:
	Trie()
	{
		root = new node;
	}
	~Trie()
	{
		delete root;
	}
	int search(string s)
	{
		int val = 0;
		node *tempRoot;
		tempRoot = root;
		for(int i = 0; i < s.length(); i++)
		{
			val++;
			tempRoot = tempRoot->child[s[i]-'a'];
			if (!tempRoot)
				break;
		}
		return val;
	}
	void insert(string s)
	{
		node *tempRoot;
		tempRoot = root;
		for(int i = 0; i < s.length(); i++)
		{
			if (!tempRoot->child[s[i]-'a'])
				tempRoot->child[s[i]-'a'] = new node;
			tempRoot = tempRoot->child[s[i]-'a'];
		}
	}
};

int main()
{
	ll t;
	freopen("Autocomplete.txt", "r", stdin);
	freopen("output.out", "w", stdout);
	cin >> t;
	for(ll cases = 1; cases <= t; cases++)
	{
		int n, ans = 0;
		cin >> n;
		Trie t;
		for(int i = 0; i < n; i++)
		{
			string s;
			cin >> s;
			ans += t.search(s);
			t.insert(s);
		}
		cout << "Case #" << cases << ": " << ans << "\n";
	}
	return 0;
}
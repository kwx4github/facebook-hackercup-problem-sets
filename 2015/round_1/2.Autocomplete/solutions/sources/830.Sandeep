#include <bits/stdc++.h>
using namespace std;

const int max_len = 10000500, max_alpha = 26;

int t[max_len][max_alpha], sz[max_len][max_alpha];
int szT, root, n;
vector<string> vec;

int newT() {
  return ++szT;
}

void addTrie(string ss1) {
	int len = ss1.size();
	int v = root;
	for (int i = 0; i < len; i++) {
	  int c = ss1[i] - 'a';
	  sz[v][c] += 1;
	  if (t[v][c] == 0) t[v][c] = newT();
	  v = t[v][c];
	}
}

int ans(string curr)	{
	int len = curr.size();
	int v = root;
	for(int i=0; i<len; i++)	{
		int c = curr[i] - 'a';
		if(sz[v][c] == 1)	{
			return i+1;
		}
		v = t[v][c];
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	freopen("autocomplete.txt", "r", stdin);
	freopen("bout.txt", "w", stdout);

	int tt; cin >> tt;
	for(int i=1; i<=tt; i++)	{
		cout << "Case #" << i << ": ";
		int res = 0;
		memset(t, 0, sizeof t);
		memset(sz, 0, sizeof sz);
		vec.clear();
		szT = 0, root = 0;
		root = newT();
		cin >> n;
		string temp;
		for(int i=0; i<n; i++)	{
			cin >> temp;
			addTrie(temp);
			res += ans(temp);
		}
		cout << res << "\n";
	}
}

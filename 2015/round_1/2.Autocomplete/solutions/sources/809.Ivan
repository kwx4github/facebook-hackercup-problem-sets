#include <iostream> 
#include <cstdio> 
#include <fstream>
#include <functional>
#include <set> 
#include <map> 
#include <vector> 
#include <queue> 
#include <stack> 
#include <cmath> 
#include <algorithm> 
#include <cstring> 
#include <bitset> 
#include <ctime> 
#include <sstream>
#include <stack> 
#include <cassert> 
#include <list> 
#include <deque>
//#include <unordered_set> 
using namespace std;
typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

#define mp make_pair 
#define pb push_back
#define y1 botva
#define all(s) s.begin(), s.end() 
void solve();

#define NAME "changemeplease"
int main() {
#ifdef YA 
	//cerr << NAME << endl;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
	clock_t start = clock();
#else 
	freopen("input.txt", "r", stdin); 
	freopen("output.txt", "w", stdout); 
#endif 
	ios_base::sync_with_stdio(false);
	cout << fixed;
	cout.precision(10);
	int t = 1;
	cin >> t;  
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
		cerr << i << endl;
	}
#ifdef YA 
	//cout << "\n\n\nTime:" << ((clock() - start) / 1.0 / CLOCKS_PER_SEC);
#endif 
	return 0;
}

struct vert {
	int k;
	map <char, int> go;
	vert(int k) :k(k) {
	}
	vert() :k(0){}
};

vector <vert> tree;

int tryGo(char c, int v) {
	if (tree[v].go.find(c) == tree[v].go.end()) {
		tree[v].go[c] = tree.size();
		tree.push_back(vert());
	}
	return tree[v].go[c];
}

void solve() {
	int n;
	cin >> n;

	int ans = 0;
	
	tree.clear();
	tree.push_back(vert(2));

	for (int w = 0; w < n; ++w) {
		string s;
		cin >> s;
		
		int cur = 0;

		bool f = false;
		int add = s.size();

		for (int i = 0; i < s.size(); ++i) {
			cur = tryGo(s[i], cur);
			if (!f && tree[cur].k == 0) {
				f = true;
				add = i + 1;
			}
			++tree[cur].k;
		}

		ans += add;
	}

	cout << ans << endl;
}
#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

const int kCharacterSetSize = 26;
const int kMaxN = 2000007;

struct TrieNode {
    int next[kCharacterSetSize];
} tree[kMaxN];

void InitNode(int x) {
    fill(tree[x].next, tree[x].next + kCharacterSetSize, -1);
}

char words[kMaxN];
int last_node;

void Solve(int case_id) {
    InitNode(0);
    last_node = 1;

    int words_num;
    cin >> words_num;
    long long answer = 0;
    for (int i = 0; i < words_num; ++i) {
        scanf("%s", words);
        int delta = 0;
        int current = 0;
        int length = strlen(words);
        for (int j = 0; j < length; ++j) {
            char c = words[j] - 'a';
            if (tree[current].next[c] == -1) {
                InitNode(last_node);
                tree[current].next[c] = last_node++;
            } else {
                ++delta;
            }
            current = tree[current].next[c];
        }

        answer += min(length, delta + 1);
    }

    cout << "Case #" << case_id << ": " << answer << endl;
}

int main() {
    int case_num;
    cin >> case_num;
    for (int i = 1; i <= case_num; ++i) {
        Solve(i);
    }
    return 0;
}
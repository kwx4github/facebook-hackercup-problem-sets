#include <fstream>
#include <vector>
#include <iostream>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <list>
#include <queue>
#include <algorithm>
#include <math.h>
#include <stdlib.h>
using namespace std;

string myitoa (int i) {
	string ret;
	if (i == 0)
		return string("0");
	while (i > 0) {
		ret.push_back('0' + i % 10);
		i /= 10;
	}
	reverse(ret.begin(), ret.end());
	return ret;
}


struct tri {
	vector<int> pick;
	vector<tri*> cds;
	tri():pick(vector<int>(26,0)), cds(vector<tri*>(26, NULL)) {};
};

void buildTri(tri* root , const string& word, int cur) {
	if (!root)
		return;
	if (cur == word.size())
		return;
	if (!root->cds[word[cur] - 'a']) {
		root->cds[word[cur] - 'a'] = new tri();
	}
		root->pick[word[cur] - 'a'] += 1;
		buildTri(root->cds[word[cur] - 'a'], word, cur + 1);
}

int search (tri* root , const string& word, int cur ) {
	if (cur == word.size())
		return 0;

	if (!root) {
		cout << "Debug!!" << endl; 
		return 0;
	}
	if (root -> pick[word[cur] - 'a'] == 1)
		return 1;
	return 1 + search(root->cds[word[cur] - 'a'], word , cur + 1);
}

void deltri (tri* root) {
	for (int i = 0 ; i < 26 ; i++)	
		if (root->cds[i]) 
			deltri(root->cds[i]);
	delete root;
}
int main()
{
	ifstream curFile;
	curFile.open("autocomplete.txt", ios::in);
	vector<long long> ret;
	string src;
	int N;
	int m;
	if(curFile)
	{
		curFile >> N;		
		while (N -- > 0) {
			long long r = 0;
			tri* root = new tri();
			curFile >> m;
			while (m -- > 0) {
				curFile >> src;
				buildTri(root, src, 0);
				r += search(root, src, 0);
			}
			deltri(root);
			ret.push_back(r);
		}
	}
	else {
		cout << "Can't open input file << endl;";
	}
	curFile.close();
	ofstream outfile;
	outfile.open("output.txt", ios::out);
	if(outfile)
	{
		for(int i = 0; i < ret.size() ; i++) {
			outfile << "Case #" << i + 1<< ": " <<ret[i] << endl;
			cout << "Case #" << i + 1<< ": " <<ret[i] << endl;
		}
	}
	outfile.close();
	return 0;
}

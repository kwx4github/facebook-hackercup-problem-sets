#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back

#define foreach(v,c) for(typeof((c).begin()) v = (c).begin(); v!=(c).end(); ++v)
#define all(c) (c).begin(), (c).end()
#define REP(i,n) for(int i=0; i<n; i++)
#define F(i,L,R) for(int i=L; i<R; i++)

#define printA(a,L,R) F(puf,L,R) cout << a[puf] << (puf==(R-1)?'\n':' ')
#define prinvV(a) printA(a,0,a.size())
#define dbg(x) cerr << #x << " = " << x << endl;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int,int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ld> vld;

#define PI 3.1415926535897932384626
#define INF 2001000009
#define EPS 1e-8
#define MAXN 1048576
#define MOD 1000000007

int T, zz;
int N;
int notatrie[MAXN][32];
int triesize = 1;
int wc;

int findcost(const string &s) {
  int sind = 0; int triepos = 0;
  int sumq = 0;
  if (wc==1) return 1;
  while (1) {
    if (sind >= s.size()) return sumq;
    if (notatrie[triepos][30]==1) return sumq;
    sumq++;
    triepos = notatrie[triepos][s[sind]-'a'];
    sind++;
    //    return 1 + findcost(s,sind+1,notatrie[triepos][s[sind]-'a']);
  }
}

void addNEWword(const string &s) {
  int sind = 0; int triepos = 0;
  while (1) {
    //dbg(sind);
    if (sind==0) wc++;
    if (notatrie[triepos][31] < zz) {
      REP(i,32) notatrie[triepos][i]=0;
      notatrie[triepos][31]=zz;
    }

    if (notatrie[triepos][30]<2) notatrie[triepos][30]++;
    if (sind < s.size()) {
      if (notatrie[triepos][s[sind]-'a']==0)
        notatrie[triepos][s[sind]-'a'] = triesize++;
    } else {
      notatrie[triepos][29] = 1;
    }
    //  if (sind+1 <= s.size())
    //    addNEWword(s,sind+1,notatrie[triepos][s[sind]-'a']);
    if (sind+1 > s.size()) return;
    triepos = notatrie[triepos][s[sind]-'a'];
    sind++;
  }
}

bool inclword(const string &s) {
  int sind = 0; int triepos = 0;
  while (1) {
    if (sind >= s.size()) return notatrie[triepos][29];
    if (notatrie[triepos][s[sind]-'a'] == 0) return false;
    triepos = notatrie[triepos][s[sind]-'a'];
    sind++;
  }
  //  return inclword(s,sind+1,notatrie[triepos][s[sind]-'a']);
}

int main() { ios_base::sync_with_stdio(0); cin.tie(0);
  cin >> T;
  for (zz = 1; zz<=T; zz++) {
    cin >> N;
    int cnt = 0;
    string s;
    triesize = 1;
    wc=0;
    REP(i,N) {
      cin >> s;
      //dbg(s.capacity());
      //dbg(s.max_size());
      //dbg("eh");
      if (i==0) {
        addNEWword(s);
      }
      //dbg("eh");
      if (!inclword(s))
        addNEWword(s);
      cnt+=findcost(s);
      //dbg(findcost(s));
    }

    cout << "Case #" << zz << ": ";
    cout << cnt;
    cout << endl;
  }
}

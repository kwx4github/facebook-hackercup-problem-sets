
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) ((int) (c).size())
#define FOREACH(i,c) FOR(i,0,SIZE(c)-1)
#define FORDEACH(i,c) FORD(i,SIZE(c)-1,0)
#define MIN(x,y) ( ((x) < (y))? (x) : (y) )
#define MAX(x,y) ( ((x) > (y))? (x) : (y) )
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define INF 1000000001

#define MAXL 1000005
#define ALPH ((int)('z'-'a'+1))

using namespace std;

typedef pair < int , int > PII;
typedef long long int LLI;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;

struct node
{
    char c;
    int son[ALPH];

    node(char _c = ' '): c(_c)
        { FOR(i,0,ALPH-1) son[i] = -1; }

    int get_son(char x)
        { return (son[x - 'a']); }
};

class trie
{
    int tail;
    node *T;

    int add_node(char x)
    {
        T[tail] = node(x);
        return (tail++);
    }

public:

    trie()
        { T = new node[MAXL]; tail = 1; }

    int add(string &s)
    {
        int pos = 0, it = 0;

        while (it < SIZE(s) && T[pos].get_son(s[it]) != -1)
            pos = T[pos].get_son(s[it++]);

        FOR(i,it,SIZE(s)-1)
        {
            T[pos].son[ s[i] - 'a' ] = add_node(s[i]);
            pos = T[pos].son[ s[i] - 'a' ];
        }

        return MIN(SIZE(s),(it + 1));
    }

    ~trie()
        { delete [] T; }
};

int solve(vector < string > &T)
{
    int cnt = 0;
    trie Tree;

    FOREACH(i,T)
        cnt += Tree.add(T[i]);

    return cnt;
}

/*************************************************************************/

int main()
{
    ios_base::sync_with_stdio(0);

    int t;
    cin >> t;

    FOR(test,1,t)
    {
        int n;
        cin >> n;

        vector < string > T(n);
        FOREACH(i,T) cin >> T[i];

        cout << "Case #" << test << ": " << solve(T) << '\n';
    }

    return 0;
}

/*************************************************************************/

#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

const int MAXM = 1e+6 + 8;

int nxt[MAXM][26];
int n, m;

void solve()
{
    memset(nxt, 0, sizeof(nxt));
    cin >> n;
    m = 0;
    ll ans = 0;
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        int x = 0;
        int res = 0;
        for (size_t j = 0; j < s.size(); ++j) {
            int t = s[j] - 'a';
            if (!nxt[x][t]) {
                if (res == 0) {
                    res = j + 1;
                }
                m += 1;
                nxt[x][t] = m;
            }
            x = nxt[x][t];
        }
        if (res == 0) {
            res = s.size();
        }
        ans += res;
    }
    cout << ans;
}

int main(int /* argc */, char** /* argv */)
{
    ios_base::sync_with_stdio(false);
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    #endif

    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        cout << "Case #" << test << ": ";
        solve();
        cout << endl;
    }

    fprintf(stderr, "Time execute: %.3lf sec\n", clock() / (double)CLOCKS_PER_SEC);
    return 0;
}

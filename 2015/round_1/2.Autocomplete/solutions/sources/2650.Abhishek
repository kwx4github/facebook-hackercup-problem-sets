#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef long long ll;


//http://www.geeksforgeeks.org/trie-insert-and-search/ for trie implementation

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }

    // mark last node as leaf
    pCrawl->value = pTrie->count;
}

// Returns non zero, if key presents in trie
int search(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            return 0;
        }

        pCrawl = pCrawl->children[index];
    }

    return 1;
}




int main()
{
    #ifndef ONLINE_JUDGE
   freopen("autocomplete.txt", "rt", stdin);
   freopen("autocomplete_out.txt", "wt", stdout);
    #endif
	ll t,k,ans,n,i,retval,j,flag,si;
	trie_t trie;
	char str[1000005],tmp[1000005];
	scanf("%lld",&t);
	k=1;
	while(k<=t)
    {
        initialize(&trie);
        scanf("%lld",&n);
        ans=0;
        for(i=0;i<n;i++)
        {
            scanf("%s",str);
            flag=0;
            si=strlen(str);
            for(j=0;j<si&&flag==0;j++)
            {
                tmp[j]=str[j];
                tmp[j+1]='\0';
                retval=search(&trie,tmp);
                if(retval==0)
                {
                    ans=ans+j+1;
                    flag=1;
                }
            }
            if(flag==0)
            {
                ans=ans+si;
            }
            insert(&trie,str);
        }
        printf("Case #%lld: %lld\n",k,ans);
        k++;
    }
    return 0;
}

#include <iostream>
#include <string>
#include <vector>

using namespace std;

class TrieNode {
public:
    TrieNode(char c, vector<TrieNode*>& tracker);
    TrieNode* add_child(char c, vector<TrieNode*>& tracker);
    TrieNode* find_child(char c);
    void print(int depth);
private:
    char c_;
    vector<TrieNode*> children_;
};

TrieNode::TrieNode(char c, vector<TrieNode*>& tracker) : c_(c) {
    tracker.push_back(this);
}

TrieNode* TrieNode::add_child(char c, vector<TrieNode*>& tracker) {
    TrieNode* new_node = new TrieNode(c, tracker);
    children_.push_back(new_node);
    return new_node;
}

TrieNode* TrieNode::find_child(char c) {
    for (auto it = children_.begin(); it != children_.end(); ++it) {
        if ((*it)->c_ == c) {
            return (*it);
        }
    }
    return nullptr;
}

void TrieNode::print(int depth) {
    for (int i = 0; i < depth; ++i) {
        cout << " ";
    }
    cout << c_ << "\n";
    for (auto it = children_.begin(); it != children_.end(); ++it) {
        (*it)->print(depth + 1);
    }
}

class Trie {
public:
    Trie();
    ~Trie();
    int compute_prefix_length_and_add_word(string& s);
    void print();
private:
    TrieNode* root_;
    vector<TrieNode*> all_nodes_;
};

Trie::Trie() {
    root_ = new TrieNode('^', all_nodes_);
}

Trie::~Trie() {
    for (auto it = all_nodes_.begin(); it != all_nodes_.end(); ++it) {
        delete (*it);
    }
}

int Trie::compute_prefix_length_and_add_word(string& s) {
    bool found_prefix = false;
    int prefix_length = 0;
    TrieNode* cur_node = root_;
    for (size_t i = 0; i < s.length(); ++i) {
        TrieNode* child_node = cur_node->find_child(s[i]);
        if (child_node == nullptr) {
            if (!found_prefix) {
                found_prefix = true;
                prefix_length = i + 1;
            }
            cur_node = cur_node->add_child(s[i], all_nodes_);
        } else {
            cur_node = child_node;
        }
    }
    if (found_prefix) {
        return prefix_length;
    } else {
        return s.length();
    }
}

void Trie::print() {
    root_->print(0);
}

int main(int argc, char* argv[]) {
    int T;
    cin >> T;

    for (int t = 1; t <= T; ++t) {
        int N;
        cin >> N;

        Trie trie;
        int count = 0;
        for (int n = 0; n < N; ++n) {
            string s;
            cin >> s;

            count += trie.compute_prefix_length_and_add_word(s);
            //trie.print();
        }
        cout << "Case #" << t << ": " << count << "\n";
    }

    return 0;
}
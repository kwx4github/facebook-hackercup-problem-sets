import java.util.*;
import java.io.*;

public class B {
    FastScanner in;
    PrintWriter out;

    class Trie {

        class Node {
            HashMap<Character, Node> children;

            public Node() {
                children = new HashMap<Character, Node>();
            }
        }

        public Trie() {
            root = new Node();
        }

        Node root;
        void insert(String s) {
            insert(s.toCharArray(), 0, root);
        }

        void insert(char[] s, int pos, Node node) {
            if (s.length == pos) {
                return;
            }
            if (!node.children.containsKey(s[pos])) {
                node.children.put(s[pos], new Node());
            }
            insert(s, pos + 1, node.children.get(s[pos]));
        }

        int checkSuff(String s) {
            return checkSuff(s.toCharArray(), 0, root);
        }

        int checkSuff(char[] s, int pos, Node node) {
            if (pos == s.length) {
                return pos;
            }
            if (!node.children.containsKey(s[pos])) {
                return pos + 1;
            } else {
                return checkSuff(s, pos + 1, node.children.get(s[pos]));
            }
        }
    }

    public void solveTest() throws IOException {
        Trie trie = new Trie();
        int n = in.nextInt();
        int count = 0;
        for (int i = 0; i < n; i++) {
            String s = in.next();
            count += trie.checkSuff(s);
            trie.insert(s);
        }
        out.println(count);
    }

    public void solve() throws IOException {
        int tests = in.nextInt();
        for (int test = 0; test < tests; test++) {
            out.print("Case #" + (test + 1) + ": ");
            System.out.println("test " + (test + 1));
            solveTest();
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("autocomplete.txt"));
            out = new PrintWriter(new File("autocomplete_ans.txt"));
            Locale.setDefault(Locale.US);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new B().run();
    }
}
#pragma comment(linker, "/STACK:134217728")
#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

using namespace std;

const int ALPH = 26;
const int MAXN = 1000500;

struct node {
	int go[ALPH];
	int num;
};

int tn;
int n;
string s;
int ans;
node trie[MAXN];
int node_num;

void clearNode(int ind) { 
	trie[ind].num = 0;
	memset(trie[ind].go, 0, sizeof(trie[ind].go));
}

int main() {
	assert(freopen("autocomplete.txt","r",stdin));
	assert(freopen("output.txt","w",stdout));

	scanf("%d\n", &tn);

	for (int test = 1; test <= tn; test++) {
		scanf("%d\n", &n);

		ans = 0;
		node_num = 0;
		clearNode(0);

		for (int i = 1; i <= n; i++) {
			getline(cin, s);
			
			int cur = 0;
			for (int j = 0; j < (int) s.length(); j++) {
				int ch = s[j] - 'a';
				if (trie[cur].go[ch] == 0) {
					node_num++;
					clearNode(node_num);
					trie[cur].go[ch] = node_num;
				}
				cur = trie[cur].go[ch];
				trie[cur].num++;
			}

			cur = 0;
			for (int j = 0; j < (int) s.length(); j++) {
				int ch = s[j] - 'a';
				cur = trie[cur].go[ch];
				if (trie[cur].num == 1) {
					ans += j + 1;
					break;
				}
				if (j == (int) s.length() - 1) {
					ans += j + 1;
					break;
				}
			}
		}

		printf("Case #%d: %d\n", test, ans);
	}	

	return 0;
}
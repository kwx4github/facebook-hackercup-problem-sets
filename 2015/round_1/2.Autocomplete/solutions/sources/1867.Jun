{-# OPTIONS_GHC -O2 -funbox-strict-fields #-}
{-# LANGUAGE BangPatterns, ViewPatterns, TupleSections #-}
import Control.Applicative
import Control.Exception hiding (mask)
import Control.Monad
import Control.Monad.ST
import Data.Array.Base
import Data.Array.ST (runSTUArray, runSTArray)
import Data.Bits
import qualified Data.ByteString.Char8 as B
import Data.Char
import Data.Function
import Data.Int
import Data.List
import qualified Data.Map as M
import qualified Data.IntMap as IM
import qualified Data.Set as S
import qualified Data.IntSet as IS
import Data.STRef
import GHC.Arr (Array, STArray, Ix(..))
import Debug.Trace

import Data.Fixed
import Data.Time.Clock
import Data.Time.Clock.POSIX
import System.IO

runGCJ :: IO () -> IO ()
runGCJ main_ = do
  t <- readLn
  forM_ [1..t] $ \i -> do
    putStr $ "Case #" ++ shows i ": "
    hPutStr stderr $ shows i "/" ++ shows t ": "
    hFlush stderr
    start <- getPOSIXTime
    main_
    end <- getPOSIXTime
    hPutStrLn stderr $ (shows.msec) (end - start) "ms"
    hFlush stderr

msec :: NominalDiffTime -> Int
msec s = let t = realToFrac s :: Milli in fromEnum t

main :: IO ()
main = do
  runGCJ $ do
    n <- readLn
    css <- replicateM n $ do
      getLine
    print $ solve n css

solve :: Int -> [String] -> Int
solve n css = go 0 emptyT css
   where
     go !acc !trie (cs:css) 
       | matchLen == len  = go (acc + len) trie css
       | otherwise = go (acc + matchLen + 1) (insertT cs trie) css
      where
        !len = length cs
        !matchLen = matchLengthT cs trie
     go !acc _ _ = acc

newtype Trie = Trie (M.Map Char Trie)

emptyT :: Trie
emptyT= Trie M.empty

insertT :: String -> Trie -> Trie
insertT (c:cs) (Trie childs)
  | Just trie' <- M.lookup c childs = Trie (M.insert c (insertT cs trie') childs)
  | otherwise = Trie (M.insert c (insertT cs emptyT) childs)
insertT [] trie = trie

matchLengthT :: String -> Trie -> Int
matchLengthT cs trie = go 0 cs trie
   where
     go !depth (c:cs) (Trie childs)
       | Just trie' <- M.lookup c childs = go (depth + 1) cs trie'
       | otherwise = depth
     go !depth [] _ = depth

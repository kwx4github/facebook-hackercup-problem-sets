#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<string>
#include<list>

using namespace std;

//#define DEBUG
#define CASE    6

typedef unsigned long long 	uLL;
typedef long long 			LL;
typedef unsigned int	 	uI;
typedef int		 			I;
typedef double	 			D;
typedef void	 			V;
//typedef char				C;

//======================================================
#define sz(v)					sizeof(v)
#define fill(a,v) 				memset(a,v,sizeof a)
#define ini(a,count, type)		{a=(type *)malloc(count*sz(type)); memset ((void *)a, 0, count*sz(type));}
#define arr_sz(a)				I(sz(a)/sz(a[0]))
//------------------------------------------------------
#define all(a) 					(a).begin(),(a).end()
#define SZ(v) 					((int)(v).size())
#define foreach(it,v)           for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define DREP(a)					sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())
#define clear_list(A)       	do{ foreach(it,A) {delete *it;} A.clear();}while(0)
//------------------------------------------------------
#define mp						make_pair
#define FF						first
#define SS						second
#define tri(a,b,c)				mp(a,mp(b,c))
#define XX						first
#define YY						second.first
#define ZZ						second.second
#define pb						push_back
//======================================================

typedef pair<int,int> PII;
typedef pair<uLL,uLL> PLL;
typedef pair<int,PII> TRI;
typedef vector<int> VI;
typedef vector<uLL> VL;
typedef vector<PII> VII;
typedef vector<TRI> VT;

//======================================================
#define P(x)					cout << x
#define Pn(x)					cout << x << endl;
#define S(x)					cin >> x
//======================================================
#define F(i,a,b) 				for(int i=(a);i<(b);++i)
#define R(i,n) 					F(i,0,n)
//------------------------------------------------------
#define Fe(i,a,b)				for(int i=(a);i<=(b);++i)
#define Re(i,n)					Fe(i,0,n)
//------------------------------------------------------
#define FSZ(i,a,v) 				F(i,a,SZ(v))
#define RSZ(i,v) 				R(i,SZ(v))
//------------------------------------------------------
#define Fsz(i,a,v)				F(i,a,arr_sz(v))
#define Rsz(i,v)				R(i,arr_sz(v))
//------------------------------------------------------
#define W						while
//------------------------------------------------------
#define PL(A)					Rsz(__,A) { P(A[__]);} printf("\n");
#define PLn(A,n)				R(__,n) { P(A[__]);} printf("\n");
#define PM(A,p,q)				do{R(__,p) {R(___,q){printf("%02d ", A[__][___]);}printf("\n");}}while(0)

#define PLSZ(A)					RSZ(__,A) { P(A[__]);} printf("\n");
//======================================================
#define INF						(int)1e9
#define LINF					(long long)1e18
#define EPS						1e-9
//======================================================
#define maX(a,b)				((a)>(b)?(a):(b))
#define miN(a,b)				((a)<(b)?(a):(b))
#define abS(x)					((x)<0?-(x):(x))
#define rUP(a, b)	 			(((a) + ((b)-1)) & ~((b)-1))
#define rDN(a, b)	 			((a) & ~((b)-1))
#define CHECK_BIT(var,pos) 		((var) & (1<<(pos)))
//======================================================


typedef struct NODE
{
	struct NODE *data[26];
}NODE;

NODE dic;

void free_node(NODE *ptr) {
	R(i,26) {if (ptr->data[i]!=0) {free_node(ptr->data[i]); delete ptr->data[i];}}
}

void clear_dic(){
	//free_node(&dic);
	memset(&dic,0,sz(dic));
}

I add_string() {
	string s;
	S(s);
	I cnt=1;
	//I cnt=1, f=0;

	NODE *ptr = &dic;
	for (int i = 0; i < s.length(); ++i)
	{
		if(ptr->data[s[i]-'a']==0) {
			ptr->data[s[i]-'a']=new NODE;
			memset(ptr->data[s[i]-'a'],0,sz(NODE));
			//if (f==0) {f=1; PLn(s,cnt)};
		} else {
			if (i!=(s.length()-1)) cnt++;
		}
		ptr=ptr->data[s[i]-'a'];
	}
	return cnt;
}

I main() {
    I T;
    S(T);
    F(k,1,T+1) {
    	I N,count=0; S(N);
    	clear_dic();
    	while(N--) {
    		count+=add_string();
    		//Pn(count);
    	}
    	P("Case #" <<k<<": " <<count<< "\n");
    }
}
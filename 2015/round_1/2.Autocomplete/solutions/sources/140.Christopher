#ifdef DEBUG
	#define D(x...) fprintf(stderr,x);
#else
	#define D(x...) 0
#endif
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

#define MAXLEN (1<<20)

struct prefixTree {
    bool visited;
    prefixTree* next[26];
    prefixTree() {
        for (int i = 0; i < 26; i++) next[i] = NULL;
        visited = 0;
    }
};


void clean(prefixTree* t) {
    queue<prefixTree*> q;
    q.push(t);
    while (!q.empty()) {
        t = q.front();
        q.pop();
        for (int i = 0; i < 26; i++) {
            if (t->next[i] != NULL) {
                q.push(t->next[i]);
            }
        }
        delete(t);
    }
}

char s[MAXLEN];

int main() {
    int nTests;
    scanf("%d ",&nTests);
    for (int test=1;test<=nTests;test++) {
        if (1) fprintf(stderr,"Case %d/%d\n",test,nTests);
        int N; scanf("%d ", &N);

        prefixTree* root = new prefixTree();
        root->visited = 1;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            scanf("%s ", s);
            int M = strlen(s);
            int curAns = M;
            prefixTree* loc = root;
            for (int j = 0; j < M; j++) {
                if (NULL == loc->next[s[j]-'a']) {
                    loc->next[s[j]-'a'] = new prefixTree();
                }
                loc = loc->next[s[j]-'a'];
                if (!loc->visited) {
                    curAns = min(curAns, j+1);
                    loc->visited = 1;
                }
            }
            ans += curAns;
        }
        // CLEAN UP!
        clean(root);
        printf("Case #%d: %d\n",test,ans);
    }
}

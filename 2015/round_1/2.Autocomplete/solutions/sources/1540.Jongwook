#include <array>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <functional>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

#define REP(i, n) for(int i = 0; i < (int)(n); ++ i)
#define FOR(i, b, e) for(auto i = b; i < e; ++ i)
#define all(x) (x).begin(), (x).end()

int n;
vector<string> a;

struct Trie
{
	struct node {
		node *next[36];
		node() { memset(next, 0, sizeof next); }
		~node() {
			for(int i=0; i<36; ++i) if(next[i]) delete next[i];
		}
	};

	node *root;
	Trie()  { root = new node; }
	~Trie() {/* delete root; */ }

	int expand(const string &w)
	{
//		cout << w.size() << endl;
		bool out = false;
		node *t = root;
		int len = 0, ans = -1;

		for(char c : w) {
			len ++;
			if(t->next[c - 'a'] != NULL) {
				t = t->next[c - 'a'];
			}
			else {
				if(!out) ans = len;
				out = true;
				t->next[c - 'a'] = new node;
				t = t->next[c - 'a'];
			}
		}
		if(ans == -1) ans = (int)w.size();
		return ans;
	}
};

long long go() {
	Trie t;

	long long ans = 0;
	for(const string &w: a) {
		int z = t.expand(w);
//		cout << w << " : " << z << endl;
		ans += z;
	}
	return ans;
}

int main() {
	int T;
	cin >> T;
	for(int k = 1; k <= T; ++ k) {
		cin >> n;
		a.resize(n);
		for(int i = 0; i < n; ++ i) {
			cin >> a[ i ];
		}
		printf("Case #%d: %lld\n", k, go());
	}

	return 0;
}


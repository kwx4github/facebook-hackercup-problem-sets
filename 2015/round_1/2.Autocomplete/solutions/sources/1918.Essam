#include <stdio.h> 
#include <stdlib.h> 
#include <ctype.h> 
#include <string.h> 
#include <math.h> 
#include <algorithm>
#include <functional>
#include <vector> 
#include <string> 
#include <queue>
#include <iostream> 
#include <map>
#include <sstream> 
#include <set>
using namespace std; 

class node{
	public:
	char c;
	class cmp{	
		public:	
		bool operator()(const node* a, const node* b) const{
			return a->c < b->c;
		}
	};
	set <node*, cmp> s;
	node (){
		c = 0;
		s.clear();
	}
	node (char cc){
		c = cc;
		s.clear();
	}
	bool operator == (node* o) const{
		return c == o->c;
	}
	bool operator < (node* o) const{
		return c < o->c;
	}
};

void destroy (node* x){
	set <node*> :: iterator it;

	for (it = x->s.begin();it!=x->s.end();++it){
		node* y = *it;
		destroy (y);
	}

	x->s.clear();
	delete (x);
}

char x[1000100];
int main (){
	freopen ("2t.in", "r", stdin);
	freopen ("2t.out","w", stdout);

	int t, n;
	scanf ("%d", &t);

	for (int tc=1;tc<=t;tc++){
		scanf ("%d", &n);
		node* head = new node();
		node* h = new node();
		int ans = 0;
		set<node*> :: iterator it;

		for (int i=0;i<n;i++){
			scanf ("%s", x);
			int s = strlen(x);
			bool need_to_type = true;

			node *cur = head;
			for (int j=0;j<s;j++){
				if (need_to_type)
					ans ++;
				h->c = x[j];
				it = cur->s.find(h);
				if (it == cur->s.end()){
					node *nn = new node(x[j]);
					cur->s.insert(nn);
					//if (need_to_type)
					//	printf ("%s %d\n", x, j);
					need_to_type = false;
					cur = nn;
				} else{
					node* y = *it;
					cur = y;
				}
			}
		}
		
//		destroy (head);
		
		printf ("Case #%d: %d\n", tc, ans);

	}

	return 0;
}

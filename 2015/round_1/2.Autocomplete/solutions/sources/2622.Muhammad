#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>
using namespace std;



class Trie {
private:
    int depth;
    Trie* data[26];
    int encode(char c) {
        return c - 'a';
    }
    char decode(int i) {
        return i + 'a';
    }
public:
    Trie(int depth) {
        this->depth = depth;
        for (int i=0; i<26; i++) {
            this->data[i] = NULL;
        }
    }
    ~Trie() {
        // printf("deleting %d\n", depth);
        // for (int i=0; i<26; i++) {
        //     delete data[i];
        // }
        // delete data;
    }
    void destroy() {
        vector<Trie*> deleting;
        for (int i=0; i<26; i++) {
            if (data[i] != NULL) {
                deleting.push_back(data[i]);
            }
        }
        int i = 0;
        while (i < deleting.size()) {
            Trie* now = deleting[i];
            i++;
            // printf("inserting %d\n", now->getDepth());
            for (int i=0; i<26; i++) {
                if (now->get(i) != NULL)
                    deleting.push_back(now->get(i));
            }
            // printf("deleting %d\n", now->getDepth());
        }
        for (int i=deleting.size()-1; i>= 0; i--) {
            // printf("deleting %d\n", deleting[i]->getDepth());
            delete deleting[i];
        }
    }
    int getDepth() {
        return this->depth;
    }
    Trie* get(int position) {
        return data[position];
    }
    void set(int position, Trie* trie) {
        data[position] = trie;
    }
    bool isEmpty(int position) {
        return !data[position];
    }
    int insert(const char* val, const int size) {
        // printf ("%s depth: %d - ", val, depth);
        int position = encode(val[depth]);
        if (depth >= size) {
            // printf ("a\n");
            return depth;
        }
        else if (!data[position]) {
            // printf ("b\n");
            Trie* trie = new Trie(depth + 1);
            data[position] = trie;
            trie->insert(val, size);
            return depth + 1;
        }
        else {
            // printf ("c\n");
            return data[position]->insert(val, size);
        }
    }
    int insertIterative(const char* val, const int size) {
        Trie* trie = this;
        // printf ("%s depth: %d - ", val, depth);
        int position;
        int depth;
        bool found = false;
        int ans = -1;
        while (trie->getDepth() < size) {
            depth = trie->getDepth();
            position = encode(val[trie->getDepth()]);
            // printf ("%s depth: %d - ", val, depth);
            if (trie->isEmpty(position)) {
                // printf("a\n");
                Trie* newtrie = new Trie(depth + 1);
                trie->set(position, newtrie);
                if (!found) {
                    ans = depth + 1;
                    // printf("ans: %d\n", ans);
                    found = true;
                }
                trie = newtrie;
            } else {
                // printf("b\n");
                trie = trie->get(position);
            }
            
        }
        if (ans == -1) {
            ans = size;
        }
        return ans;
    }
};

void execute(int tc) {
    int n;
    scanf("%d", &n);
    Trie* trie = new Trie(0);
    string val;
    int count = 0;
    char data[1000000];
    int length = 0;
    for (int i=0; i<n; i++) {
        scanf("%s\n", data);
        length = strlen(data);
        // int x = trie->insertIterative(data,length);
        int x = trie->insert(data,length);
        // printf("=%d\n", x);
        count +=x;
    }
    printf("Case #%d: %d\n", tc, count);
    // delete trie;
    trie->destroy();
}

int main() {
    int TC;
    scanf("%d", &TC);
    for (int i=1; i<=TC; i++) {
        execute(i);
    }
    return 0;
}

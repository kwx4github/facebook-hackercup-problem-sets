#include <algorithm>
#include <assert.h>
#include <climits>
#include <cstring>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <numeric>
#include <limits>
#include <iomanip>
#include <sys/resource.h>
using namespace std;

#define sz(a) ((int)a.size())
#define all(a) a.begin(), a.end()
#define LL long long
#define LD long double
#define vi vector<int>
#define vl vector<LL>
#define vs vector<string>
#define vb vector<bool>
#define ii pair<int, int>
#define vii vector<ii>
#define SET(v, i) (v | (1 << i))
#define TEST(v, i) (v & (1 << i))
#define TOGGLE(v, i) (v ^ (1 << i))

struct Node {
  Node* next[26];

  Node() {
    memset(next, 0, sizeof next);
  }

  void Delete(Node*& n) {
    if (!n) return;
    for (int i = 0; i < 26; ++i) {
      Delete(n->next[i]);
    }
    delete n;
    n = NULL;
  }
};

class PrefixTree {
private:
  Node* head_[26];

  int InsertImpl(const string& word, int i, Node* tree[], int ret = -1) {
    if (i == sz(word)) {
      return ret == -1 ? sz(word) : ret;
    }

    int ind = word[i] - 'a';
    if (!tree[ind]) {
      tree[ind] = new Node;
      if (!tree[ind]) {
        cout << "Allocation Failed!!" << endl;
        exit(-1);
      }
      return InsertImpl(word, i + 1, tree[ind]->next, ret == -1 ? i + 1 : ret);
    }

    return InsertImpl(word, i + 1, tree[ind]->next, ret);
  }

  int InsertImplIter(const string& word, Node* tree[]) {
    int ret = -1;
    for (int i = 0; i < sz(word); ++i) {
      int ind = word[i] - 'a';
      if (!tree[ind]) {
        tree[ind] = new Node;
        if (ret == -1) ret = i + 1;
      }
      tree = tree[ind]->next;
    }

    return ret == -1 ? sz(word) : ret;
  }

public:
  int Insert(const string& word) {
    return InsertImpl(word, 0, head_);
//    return InsertImplIter(word, head_);
  }

  PrefixTree() {
    memset(head_, 0, sizeof head_);
  }

  ~PrefixTree() {
    for (int i = 0; i < 26; ++i)
      if (head_[i]) head_[i]->Delete(head_[i]);
  }
};

void SetStackSize() {
  const rlim_t kStackSize = 1024L * 1024L * 1024L;   // min stack size = 64 Mb
      struct rlimit rl;
      int result;

      result = getrlimit(RLIMIT_STACK, &rl);
      if (result == 0)
      {
          if (rl.rlim_cur < kStackSize)
          {
              rl.rlim_cur = kStackSize;
              result = setrlimit(RLIMIT_STACK, &rl);
              if (result != 0)
              {
                  fprintf(stderr, "setrlimit returned result = %d\n", result);
              }
          }
      }
}

int main() {
  SetStackSize();
  cin.sync_with_stdio(false);
  int t, n;
  cin >> t;
  for (int test = 1; test <= t; ++ test) {
    cin >> n;
    string w;
    PrefixTree tree;
    int ret = 0;
    for (int i = 0; i < n; ++i) {
      cin >> w;
      int v = tree.Insert(w);
      ret += v;
    }
    cout << "Case #" << test << ": " << ret << endl;
  }
  return 0;
}

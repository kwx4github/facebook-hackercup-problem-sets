#include <bits/stdc++.h>

using namespace std;

struct Vertex {
    bool flag;
    int next[26];

    Vertex ():flag(false) {
        memset(next, 255, sizeof(next));
    }
};


void Test(int test_num) {
    int n;
    cin >> n;
    vector<Vertex> bohr;
    bohr.push_back(Vertex());
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        { // min_len
            int num = 0;
            size_t index = 0;
            while (index < s.length() && bohr[num].next[s[index] - 'a'] != -1) {
                num = bohr[num].next[s[index] - 'a'];
                ++index;
            }
            ans += min(s.length(), index + 1);
        }
        { // add_string
            int num = 0;
            for (int index = 0; index < s.length(); ++index) {
                int ch = s[index] - 'a';
                if (bohr[num].next[ch] == -1) {
                    bohr.push_back(Vertex());
                    bohr[num].next[ch] = bohr.size() - 1;
                }
                num = bohr[num].next[ch];
            }
            bohr[num].flag = true;
        }
    }
    printf("Case #%d: %d\n", test_num, ans);
} 


int main() {
    freopen("autocomplete.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i) {
        Test(i + 1);
    }
}
    

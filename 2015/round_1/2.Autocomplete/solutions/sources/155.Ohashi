#include <iostream>
#include <vector>
#include <string>

using namespace std;
typedef long long li;
#define rep(i, n) for(li i = 0; i < (li)(n); ++i)

struct Trie {
    bool exist;
    Trie* children[26];
    
    Trie (const char* s) {
        rep(i, 26) children[i] = NULL;
        if (s[0] != '\0') {
            exist = false;
            children[s[0]-'a'] = new Trie(s + 1);
        } else {
            exist = true;
        }
    }

    li insert (const char* s) {
        if (s[0] != '\0') {
            if (children[s[0]-'a'] == NULL) {
                children[s[0]-'a'] = new Trie(s + 1);
                return 1;
            } else {
                return 1 + children[s[0]-'a']->insert(s + 1);
            }
        } else {
            exist = true;
            return 0;
        }
    }
};

void solve() {
    int n; cin >> n;
    li ans = 0;
    string e = "";
    Trie t(e.c_str());
    rep(i, n) {
        string s;
        cin >> s;
        ans += t.insert(s.c_str());
    }
    cout << ans << endl;
}

int main () {
    int t; cin >> t;
    rep(i, t) {
        cout << "Case #" << i + 1 << ": ";
        solve();

    }
    return 0;
}

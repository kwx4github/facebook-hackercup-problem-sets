#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>
#include <functional>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;


ifstream ifs;
ofstream ofs;
string buf;


class Node{
public:
    char character;
    vector<Node*> next;

    Node(char character){
        this->character = character;
    }

    long find(string str){
        long size = str.size();
        Node* currentNode = this;
        long lastBranch = 0;
        for(long i = 0; i < size; i++){
            bool found = false;
            for(vector<Node*>::iterator it = currentNode->next.begin(); it != currentNode->next.end(); ++it){
                if((*it)->character == str[i]){
                    found = true;
                    if((*it)->next.size() > 1){
                        lastBranch = i + 1;
                    }
                    currentNode = *it;
                    break;
                }
            }
            if(!found){
                return size;
            }
        }
        if(lastBranch == size){
            return size;
        }
        return lastBranch + 1;
    }

    void add(string str){
        long size = str.size();
        Node* currentNode = this;
        for(long i = 0; i < size; i++){
            bool found = false;
            for(vector<Node*>::iterator it = currentNode->next.begin(); it != currentNode->next.end(); ++it){
                if((*it)->character == str[i]){
                    found = true;
                    currentNode = *it;
                    if(i == size - 1){
                        Node* newNode = new Node('\0');
                        currentNode->next.push_back(newNode);
                    }
                    break;
                }
            }
            if(!found){
                Node* newNode = new Node(str[i]);
                if(i == size - 1){
                    newNode->next.push_back(new Node('\0'));
                }
                currentNode->next.push_back(newNode);
                currentNode = newNode;
            }
        }
    }
};


int main(int argc, char **argv){
    ifs.open("autocomplete.txt");
    ofs.open("P2_output.txt");
    
	getline(ifs, buf);
	int T = atoi(buf.c_str());

	rep(i, T){
        ofs << "Case #" << i + 1 << ": ";

        getline(ifs, buf);
        long N = atol(buf.c_str());
        Node* root = new Node('\0');

        long count = 0;
        rep(j, N){
            getline(ifs, buf);
            root->add(buf);
            count += root->find(buf);
        }
        ofs << count << endl;
	}
	

    ifs.close();
    ofs.close();
    return 0;
}

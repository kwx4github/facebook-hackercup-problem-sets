#include <bits/stdc++.h>

#define reset(a , b) memset(a , b , sizeof(a))
#define REP(i , A) for(int i = 0 ; i < A.size() ; i++)

using namespace std;

const int INF = 1000000007;
const int N = 100100;

struct Trie {
    Trie* c[26];
}*Root , *nil;

void Delete(Trie* R) {
    if (R == nil) return;
    for (int i = 0 ; i < 26 ; i++)
        if (R->c[i] != nil && R->c[i] != NULL) Delete(R->c[i]);
    delete(R);
}

Trie *nw() {
    Trie *x = new(Trie);
    for (int i = 0 ; i < 26 ; i++)
        x->c[i] = nil;
    return x;
}

int add(string s) {
    Trie* dir = Root;
    int res = INF;
    REP(i , s){
        int chr = s[i] - 'a';
        if (i == s.size() - 1 || dir->c[chr] == nil)
            res = min(res , i + 1);

        if (dir->c[chr] == nil) {
            Trie* x = nw();
            dir->c[chr] = x;
        }
        dir = dir->c[chr];
    }
    return res;
}

int main() {
   // ifstream cin("Autocomplete.txt");
   // ofstream cout("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    int T , n;

    nil = new(Trie);
    Root = nw();

    cin >> T;
    for (int test = 1 ; test <= T ;test++) {
        Root = nw();

        long long ans = 0;
        cin >> n;
        for (int i = 1 ; i <= n ; i++){
            string s;
            cin >> s;
            ans += add(s);
        }

        cout << "Case #" << test << ": " << ans << endl;
    }
}


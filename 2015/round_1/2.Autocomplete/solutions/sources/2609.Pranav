// Pranav Ramarao

//  TRIE Code Reused from GeeksforGeeks Library
//http://www.geeksforgeeks.org/trie-insert-and-search/

// With some slight modifications of course :)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<iostream>
#include<bitset>
#include<cstring>
using namespace std;

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])


#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, string key)
{
    int level;
    int length =key.size();
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }

    // mark last node as leaf
    pCrawl->value = pTrie->count;
}

// Returns non zero, if key presents in trie
int search(trie_t *pTrie, string key)
{
    int level;
    int length = key.size();
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            return level+1;
        }

        pCrawl = pCrawl->children[index];
    }
    return key.size();
}

// Driver
int main()
{
    ios::sync_with_stdio(0);

    freopen("autocomplete.txt","r",stdin);
    freopen("output2.txt","w",stdout);

    int t,n,i;
    string str;
    cin>>t;
    int id = 0;
    
    while(t--){
        id++;
        int res = 0;
        cin>>n;
        trie_t trie;
         initialize(&trie);
        for(i=0;i<n;i++){
            cin>>str;
            int val;
            val = search(&trie,str);
            res+=val;
            //cout<<str<<" "<<val<<endl;
            insert(&trie,str);
        }
        printf("Case #%d: %d\n",id,res);
      //  cout<<res<<endl;
    }
   return 0;
}

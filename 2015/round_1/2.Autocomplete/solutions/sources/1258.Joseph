
#include <bits/stdc++.h>

#define REP(i, a) for( int i = 0; i < a; i++ )
#define RFOR(i,x,y) for(int i = x; i>= y; i--)
#define FOR(i,x,y) for (int i = x; i < y; i++)
#define ITFOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define VE vector <int>
#define mset(A,x) memset(A, x, sizeof A)
#define PB push_back
#define ones(x) __builtin_popcount(x)
#define cua(x) (x)*(x)
#define debug(x) cout <<#x << " = " << x << endl
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
#define LSOne(S) (S&(-S))

using namespace std;

#define ll long long
#define lli long long int
#define PI acos(-1.0)
#define ii pair<int,int>
#define inf_ll (((1LL<<62)-1)<<1)+1
#define inf_i (1<<30)-1

static int trie[1000005][28];
static int terminal[1000005];
static int ft[1000005][28];
int node;

int rsq(int idx,int b)
{
    int sum = 0;
    for (; b; b -= LSOne(b))
        sum += ft[idx][b];
    return sum;
}

void adjust(int idx,int k, int v)
{
    for (; k < 27; k += LSOne(k))
        ft[idx][k] += v;
}

void agregar(string pal)
{
    int p=0,i;
    REP(i,pal.length())
    {
        int pos=pal[i]-'a'+1;
        adjust(p,pos,1);
        //mask[p][pos]++;
        if(trie[p][pos]==0)
            p=trie[p][pos]=node++;
        else
            p=trie[p][pos];
    }
    terminal[p]=1;
}

int main()
{
/*
   freopen("input2.txt","r",stdin);
   freopen("output.txt","w",stdout);
*/
    int n,i,j,test;
    string cad;
    scanf("%d",&test);
    REP(t,test)
    {
        scanf("%d",&n);
        cin.ignore();
        mset(trie,0);
        mset(ft,0);
        mset(terminal,0);

        node=1;
        lli s=0LL;
        REP(i,n)
        {
            getline(cin,cad);
            agregar(cad);
            int cnt=0;
            int p=trie[0][cad[0]-'a'+1];
            cnt++;
            FOR(k,1,cad.length())
            {
                if(rsq(p,27)>1 || terminal[p])
                    cnt++;
                p=trie[p][cad[k]-'a'+1];
            }
            s+=(lli)cnt;
        }
        printf("Case #%d: %lld\n",t+1,s);
    }

/*
	fclose(stdin);
	fclose(stdout);
*/
   return 0;
}

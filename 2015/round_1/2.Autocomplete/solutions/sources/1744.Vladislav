#include <bits/stdc++.h>
using namespace std;

struct Node
{
    map<char, int> next;
    int amount;

    void Clear()
    {
        next.clear();
        amount = 0;
    }
};

const int kMaxAmountOfNodes = 1e6 + 100;

Node nodes[kMaxAmountOfNodes];
int top_node;

void ClearNode(int indx)
{
    nodes[indx].Clear();
}

void BuildTrie()
{
    top_node = 1;
    ClearNode(0);
}

int NewNode()
{
    ClearNode(top_node);
    ++top_node;
    return top_node - 1;
}

void AddToTrie(const string& str)
{
    int n = str.length();
    int cur_node = 0;
    for (int i = 0; i < n; ++i) {
        char c = str[i];
        if (nodes[cur_node].next.find(c) != nodes[cur_node].next.end()) {
            cur_node = nodes[cur_node].next[c];
        } else {
            int new_node = NewNode();
            nodes[cur_node].next[c] = new_node;
            cur_node = new_node;
        }
        ++nodes[cur_node].amount;
    }
}

int GiveAnswer(const string& str)
{
    int n = str.length();
    int cur_node = 0;
    for (int i = 0; i < n; ++i) {
        char c = str[i];
        if (nodes[cur_node].amount == 1) {
            return i;
        }
        cur_node = nodes[cur_node].next[c];
    }
    return n;
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(false);

    int tests;
    cin >> tests;
    for (int test = 1; test <= tests; ++test) {
        int n;
        cin >> n;
        int answer = 0;
        BuildTrie();
        for (int i = 0; i < n; ++i) {
            string str;
            cin >> str;
            AddToTrie(str);
            answer += GiveAnswer(str);
            //cout << str << ": " << GiveAnswer(str) << endl;
        }
        cout << "Case #" << test << ": " << answer << endl;
    }

    return 0;
}

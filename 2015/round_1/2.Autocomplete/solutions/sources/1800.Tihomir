import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;


public class Main {
	private static class Trie {
		public Map<Character, Trie> children = new HashMap<Character, Trie>();
		public String word;
		
		public Trie() {
		}
		
		public Trie(String word) {
			this.word = word;
		}
	}
	
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		int tests = Integer.valueOf(reader.readLine());
		
		for (int i=0; i<tests; ++i) {
			System.out.println("Case #" + (i+1) + ": " + solve(reader));
		}
	}
	
	private static String solve(BufferedReader reader) throws NumberFormatException, IOException {
		int cnt = 0;
		
		int n = Integer.valueOf(reader.readLine());
		
		Trie root = new Trie("");
		for (int i=0; i<n; ++i) {
			cnt += insert(root, reader.readLine());
		}
		
		return String.valueOf(cnt);
	}
	
	private static int insert(Trie node, String word) {
		int wordLen = word.length();
		int cnt;
		Trie nextNode;
		Character differentChar;
		
		for (cnt = 0; cnt<wordLen;) {
			int len = node.word.length();
			// Find the first different character
			int i;
			for (i=0; i<len && cnt + i < wordLen && node.word.charAt(i) == word.charAt(cnt + i); ++i);
			
			if (i == len) {
				if (cnt + i == wordLen) {
					// We've found the word
					break;
				}

				// word is at least one char longer than node.word
				cnt += i + 1;
				differentChar = word.charAt(cnt - 1);
				nextNode = node.children.get(differentChar);
				if (nextNode == null) {
					nextNode = new Trie(word.substring(cnt));
					node.children.put(differentChar, nextNode);
					break;
				}
				
				node = nextNode;
				continue;
			} else if (cnt + i == wordLen) {
				// word is shorter that node.word, so should always write all the chars to the end
				cnt += i;
				break;
			} else {
				String oldWord = node.word;
				node.word = node.word.substring(0, i);
				
				// the node with the end of node.word
				nextNode = new Trie(oldWord.substring(i + 1));
				nextNode.children = node.children;
				
				node.children = new HashMap<Character, Main.Trie>();
				node.children.put(oldWord.charAt(i), nextNode);

				// the node with the end of word
				cnt += i + 1;
				nextNode = new Trie(word.substring(cnt));
				nextNode.children = node.children;
				
				node.children.put(word.charAt(cnt - 1), nextNode);
				break;
			}
		}
			
		return cnt;
	}

	/* (non-Java-doc)
	 * @see java.lang.Object#Object()
	 */
	public Main() {
		super();
	}

}

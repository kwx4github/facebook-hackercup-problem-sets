#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <memory.h>
#include <math.h>
#include <assert.h>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <functional>
#include <vector>
#include <deque>
#include <utility>
#include <bitset>
#include <limits.h>
#include <time.h>

using namespace std;
typedef long long ll;
typedef unsigned long long llu;
typedef double lf;
typedef unsigned int uint;
typedef long double llf;
typedef pair<int, int> pii;

int TC, TCC;

void precalc(){
    
}

void init () {
}

struct node {
    node* child[26];
    bool used;
    
    node() { used = false; memset(child, NULL, sizeof child); }
} *root;

void del (node *nd) {
    if(nd == NULL) return;
    for(int i = 0; i < 26; i++) del(nd->child[i]);
    delete nd;
}

char S[1005000];
/*
int ins (node *nd, char *p, bool u) {
    
    int ret = -1;
    
    if(!nd->used) {
        nd->used = true;
        u = true;
        ret = 0;
    }
    
    if(*p == 0) return 0;
    
    *p -= 'a';
    if(nd->child[*p] == NULL) {
        nd->child[*p] = new node();
    }
    
    int c = ins(nd->child[*p], p + 1, u);
    return u ? 0 : (c+1);
}*/

int ins (node *nd, char *p, bool as) {
    bool u = true;
    int ret = -1;
    int h = 0;
    
    while(*p > 0) {
        ++h;
        if(!nd->used) {
            nd->used = true;
            u = true;
            ret = h;
        }
        if(*p == 0 && ret < 0) ret = h;
        
        *p -= 'a';
        if(nd->child[*p] == NULL) {
            nd->child[*p] = new node();
        }
        
        nd = nd->child[*p];
    }
    return ret;
}

void solve () {
    init();
    
    del(root);
    root = new node;
    root->used = true;
    
    int ans = 0;
    int N; scanf("%d", &N);
    for(int i = 0; i < N; i++) {
        scanf("%s", S);
        ans += ins(root, S, false);//puts("");
    }
    
    printf("Case #%d: ", TCC);
    printf("%d", ans);
    printf("\n");
}

int main() {
    /*precalc();
    printf("precalc completed!");
    scanf("%*s");
    */
    freopen("autocomplete.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    
    scanf("%d", &TC);
    
    
    while(++TCC <= TC) solve(), fprintf(stderr, "case %d\n", TCC);
    return 0;
}
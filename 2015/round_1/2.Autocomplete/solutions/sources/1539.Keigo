#include <iostream>
#include <vector>
#include <string>

using namespace std;
typedef long long LL;
const int NUM_ALPHA = 'z'-'a'+1;

struct Node{
    char c;
    int next[NUM_ALPHA];
    Node(){
        for(int i = 0; i < NUM_ALPHA; i++){
            next[i] = -1;
        }
    }
};

int inputWord(vector<Node>& trie, int pos, string& word, int w_pos){
    if(w_pos >= word.size()) return w_pos;
    int chr = word[w_pos] - 'a';
    if(trie[pos].next[chr] == -1) return w_pos+1;
    return inputWord(trie, trie[pos].next[chr], word, w_pos+1);
}

void appendWord(vector<Node>& trie, int pos, string& word, int w_pos){
    int chr = word[w_pos] - 'a';
    if(trie[pos].next[chr] == -1){
        for(int i = w_pos; i < word.size(); i++){
            chr = word[i] - 'a';
            int node_id = trie.size();
            trie.emplace_back();
            trie[pos].next[chr] = node_id;
            pos = node_id;
        }
        return;
    }else{
        appendWord(trie, trie[pos].next[chr], word, w_pos+1);
    }
}

int main(){
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++){
        int N;
        cin >> N;
        vector<Node> trie(1);
        int cnt = 0;
        for(int i = 0; i < N; i++){
            string word;
            cin >> word;
            cnt += inputWord(trie, 0, word, 0);
            appendWord(trie, 0, word, 0);
        }
        cout << "Case #" << t << ": " << cnt << endl;
    }
    return 0;
}



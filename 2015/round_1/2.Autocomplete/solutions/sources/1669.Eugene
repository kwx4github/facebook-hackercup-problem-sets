import scala.annotation.tailrec
import scala.collection.mutable
import scala.io.Source

/**
 * Created by etsvigun on 18/01/15.
 */
object Autocomplete {

  class TrieNode(
                  val char: Option[Char] = None,
                  var word: Option[String] = None) {
    val children: mutable.Map[Char, TrieNode] = mutable.Map[Char, TrieNode]()

    def append(key: String): Int = {
      var minPrefix = key.size
      @tailrec def appendHelper(node: TrieNode, currentIndex: Int): Unit = {
        if (currentIndex == key.length) {
          node.word = Some(key)
        } else {
          val char = key.charAt(currentIndex).toLower
          if (minPrefix > currentIndex + 1 && !node.children.contains(char)) {
            minPrefix = currentIndex + 1
          }
          val result = node.children.getOrElseUpdate(char, {
            new TrieNode(Some(char))
          })
          appendHelper(result, currentIndex + 1)
        }
      }
      appendHelper(this, 0)
      minPrefix
    }
  }


  def main(args: Array[String]) {
    val lines = Source.stdin.getLines()

    def getInt = lines.next().toInt

    val testCount = getInt

    1 to testCount foreach { testNumber =>
      val wc = getInt
      val trie = new TrieNode
      var sum = 0L
      1 to wc foreach { _ =>
        val w = lines.next()
        val prefixLength = trie.append(w)
        sum += prefixLength.toLong
      }
      println(s"Case #$testNumber: $sum")
    }
  }

}

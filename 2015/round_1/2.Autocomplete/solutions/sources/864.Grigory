import java.util.*;
import java.io.*;

public class TaskB {
    private FastScanner in;
    private PrintWriter out;

    class Node {
        Node[] to = new Node[26];
    }

    public void solve() throws IOException {
        int test = in.nextInt();
        for (int t = 0; t < test; t++) {
            int res = 0;
            int n = in.nextInt();
            Node root = new Node();
            for (int j = 0; j < n; j++) {
                String next = in.next();
                Node cur = root;
                boolean added = false;
                for (int i = 0; i < next.length(); i++) {
                    int c = next.charAt(i) - 'a';
                    if (cur.to[c] == null) {
                        if (!added) {
                            res += i + 1;
                            added = true;
                        }
                        Node nextNode = new Node();
                        cur.to[c] = nextNode;
                        cur = nextNode;
                    } else {
                        cur = cur.to[c];
                    }
                }
                if (!added) {
                    res += next.length();
                }
            }
            out.println("Case #" + (t + 1) + ": " + res);
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("input.txt"));
            out = new PrintWriter(new File("output.txt"));
            solve();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        public String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    public static void main(String[] arg) {
        new TaskB().run();
    }
}
#include <cassert>
#include <iostream>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <numeric>

using namespace std ;

#define all(n) n.begin(), n.end()
#define forsn(i, s, n) for (int i = s ; i < n ; i++)
#define forn(i, n) forsn(i, 0, n)
#define fore(i, n) forn(i, n.size())
#define LOG cerr << "[" << __LINE__ << "] "

const int alph = 'z' - 'a' + 1 ;

struct Trie
{
	Trie *next[alph] ;

	Trie()
	{
		forn(i, alph) next[i] = 0 ;
	}

	~Trie()
	{
		forn(i, alph) delete next[i] ;
	}
} ;

int solve(const vector <string> &w)
{
	int r = 0 ;

	if (w.size() == 1) return 1 ;

	Trie t ;
	fore(h, w)
	{
		Trie *p = &t ;

		bool f = false ;
		fore(i, w[h])
		{
			assert(p) ;
			if (!p->next[w[h][i] - 'a'])
			{
				if (!f) r += i + 1 ;
				f = true ;
				p->next[w[h][i] - 'a'] = new Trie() ;
			}

			p = p->next[w[h][i] - 'a'] ;
		}
		
		if (!f) r += w[h].size() ;
	}

	return r ;
}

int main()
{
	int t ; cin >> t ;
	forn(z, t)
	{
		int n ; cin >> n ;
		vector <string> w(n) ;
		forn(i, n) cin >> w[i] ;

		printf("Case #%d: %d\n", z + 1, solve(w)) ;
	}

	return 0 ;
}


#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <deque>
#include <list>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <cstring>
#include <cctype>
#include <climits>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <complex>
using namespace std;
#define REP(i,n) for(int i = 0; i < (int)n; i++)
#define FOR(i,a,b) for(int i = a; i < (int)b; i++)
#define FOREQ(i,a,b) for(int i = a; i <= (int)b; i++)
#define FOREACH(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define ALL(c) (c).begin(), (c).end()
#define SZ(c) (c).size()
template <class T> void pp(T v) { FOREACH(it, v) cout << *it << ' '; cout << endl ; }
template <class T> void pp(T v, int n) { REP(i,n) cout<<v[i]<< ' '; cout << endl; }
template <class T> inline void chmax(T &a, const T b) { a = max(a, b); }
template <class T> inline void chmin(T &a, const T b) { a = min(a, b); }
typedef vector<int> vint;
typedef pair<int, int> pint;
typedef complex<double> P;
#define mp make_pair
typedef long long ll;
typedef long double ld;
typedef unsigned uint;
const int INF = 1<<28;
const double EPS = 1.0e-9;
static const int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};
#undef MOD_CALC
#ifdef MOD_CALC
const ll MOD = 1000 * 1000 * 1000 + 79;
//const ll MOD =  1000000007;
inline void chadd(ll &a, const ll b) { a = (a + b) % MOD;}
inline ll add(const ll a, const ll b){ return (a + b) %  MOD;}
inline void chsub(ll &a, const ll b) { a = (a - b + MOD) % MOD;}
inline ll sub(const ll a, const ll b){ return (a - b + MOD) % MOD; }
inline void chmul(ll &a, const ll b) { a = (a * b) %  MOD;}
inline ll mul(const ll a, const ll b){ return (a * b) %  MOD;}
#endif

const int SIZE = 1000000 + 10;
struct Node {
	int nxt[26];
};

Node nodes[SIZE];

int main(void)
{
	int T; cin >> T;
	for(int case_no = 1; case_no <= T; case_no ++) {
		int N; cin >> N;
		memset(nodes, 0, sizeof(nodes));
		int ans = 0;
		int unused = 1;
		REP(i, N) {
			string s; cin>>s;
			int idx = 0, len = s.length(), pos = 0;
			for(idx = 0; idx < len; idx++) {
				int npos = nodes[pos].nxt[s[idx] - 'a'];
				if( npos == 0) {
					ans++;
					for(int nidx = idx; nidx < len; nidx++) {
						nodes[pos].nxt[s[nidx] - 'a'] = unused;
						pos = unused;
						unused++;
					}
					break;
				} else {
					ans++;
					pos = npos;
				}
			}
#ifdef DEBUG
			cout << i << " " << ans << endl;
#endif
		}
		printf("Case #%d: %d" , case_no, ans);
		puts("");
		//if(case_no == 1) break;
	}
	return 0;
}

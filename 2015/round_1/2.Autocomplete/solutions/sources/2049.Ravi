#include<iostream>
#include<fstream>
#include<string.h>
#include<stdio.h>
#include<math.h>
#include<algorithm>
#include<string>
#include<vector>

using namespace std;

typedef struct node* nodeptr;

struct node
{
	int val;
	struct node* child[26];
};

nodeptr getnode()
{
	nodeptr temp=(nodeptr)malloc(sizeof(struct node));
	temp->val=0;
	for(int i=0;i<26;i++)
		temp->child[i]=NULL;
	return temp;
}

void insert(nodeptr root,string& s)
{
	int i=0,j=0;
	while(s[i]!='\0')
	{
		root->val++;
		j=s[i]-'a';
		if(root->child[j]==NULL)
			root->child[j]=getnode();
		root=root->child[j];
		i++;
	}
	root->val++;
}

int get_count(nodeptr root,string& s)
{
	int i;
	i=0;
	int ans=0;
	while(s[i]!='\0')
	{
		if(root->val==1 && i==0)
			return 1;
		if(root->val==1)
			return ans;
		root=root->child[s[i]-'a'];
		i++;
		ans++;
	}
	return ans;
}

void delete_trie(nodeptr root)
{
	if(root==NULL)
		return;
	for(int i=0;i<26;i++)
		delete_trie(root->child[i]);
	free(root);
}

int main()
{
	ios_base::sync_with_stdio(false);
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);

	int t,ans,n;
	string s;
	cin>>t;
	
	for(int num=1;num<=t;num++)
	{
		nodeptr root=getnode();
		cin>>n;
		ans=0;
		for(int i=0;i<n;i++)
		{
			cin>>s;
			insert(root,s);
			ans+=get_count(root,s);
			//cout<<get_count(root,s)<<endl;
		}
		//delete_trie(root);
		cout<<"Case #"<<num<<": "<<ans<<endl;
	}
	
	return 0;
}

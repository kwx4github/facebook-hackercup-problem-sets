#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <complex>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <ctime>

#include<unordered_map>
#include<unordered_set>
using namespace std;


char buf[1000000+10];

struct Node
{
	//string here;
	map<char,Node*> next;
};

Node* stupid;
void clean(Node* s)
{
	stack<Node*> ss;
	ss.push(s);
	while (!ss.empty())
	{
		s = ss.top(); ss.pop();
		for (auto iter = s->next.begin(); iter != s->next.end(); ++iter)
			ss.push(iter->second);
		delete s;
	}
}

int doit()
{
	Node* cur = stupid;
	int n = strlen(buf);
	int ans = 0;
	for (int i = 0;buf[i] ; ++i)
	{
		auto iter =cur->next.find(buf[i]);
		if ( iter == cur->next.end() )
		{
			cur->next.insert(make_pair(buf[i], new Node() ) );
			iter =cur->next.find(buf[i]);
			//iter->second->here = buf+i;
			if (ans == 0)
				ans = i+1;
		//	break;
		}
		/*else
		{
			int j =0;
			for (;buf[i]; ++i)
			{
				if ( j>= iter->second->here.size())
					break;
				if ( iter->second->here[j++] != buf[i])
					break;
			}
			i--;
		}*/
		cur = iter->second;
	}
	if (ans == 0)
		ans = n;
	return ans;
}

void test()
{
	cout << "1" << endl;
	int n = 50;
	cout << n << endl;
	for (int i= 0; i < n; ++i)
	{
		for (int j = 0; j < 1000000; ++j)
			putchar( rand()%26 +'a');
		puts("");
	}
}

int main()
{	
	//test(); return 0;

	int Case, cases = 0;
	scanf("%d" , &Case);

	while (Case--)
	{
		int ans = 0;
		int n;
		scanf("%d" ,&n);

		stupid = new Node();

		for (int i = 0; i < n; ++i)
		{
			scanf("%s", buf);
			ans += doit();
		}
		
		printf("Case #%d: %d\n" , ++cases, ans);
		clean(stupid);
	}

	return 0;
}
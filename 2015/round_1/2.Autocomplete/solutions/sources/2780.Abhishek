#include <bits/stdc++.h>
#define SIZE 26 
#define chartoindex(c) ((int)c-(int)'a')
using namespace std;
int b;
typedef struct trie_node trie_node_t; 
struct trie_node
{
	int value;
	trie_node_t *children[SIZE];	
};
typedef struct trie trie_t;
struct trie
{
	trie_node_t *root;
	int count;
};
trie_node_t *getNode(void)
{
	trie_node_t *pNode=NULL;
	pNode=(trie_node_t *)malloc(sizeof(trie_node_t));
	if(pNode)
	{
		int i;
		pNode->value=0;
		for(i=0;i<SIZE;i++)
		{
			pNode->children[i]=NULL;
		}
	}
	return pNode;
}
void intialize(trie_t *pTrie)
{
	pTrie->root=getNode();
	pTrie->count=0;
}
void insert(trie_t *pTrie,string key)
{
	int level,index,length=key.length();
	trie_node_t *pCrawl;
	pTrie->count++;
	pCrawl=pTrie->root;
	for(level=0;level<length;level++)
	{
		index=chartoindex(key[level]);
		if(!pCrawl->children[index])
		{
			pCrawl->children[index]=getNode();
			if(!b)
				b=level+1;	
		}
		pCrawl=pCrawl->children[index];
	}
	pCrawl->value=pTrie->count;
	if(b==0)
		b=level;
}
int main()
{
	freopen("input.txt","r",stdin);//redirects standard input
    freopen("output.txt","w",stdout);//redirects standard output
	int t,j;
	cin>>t;
	for(j=1;j<=t;j++)
	{
		long long int ans=0;
		int n,i;
		trie_t trie;
		intialize(&trie);
		cin>>n;
		string inp;
		for(i=0;i<n;i++)
		{
			b=0;
			cin>>inp;
			insert(&trie,inp);
			ans+=b;	
		}
		cout<<"Case #"<<j<<": "<<ans<<endl;
	}
	return 0;
}
#include <iostream>
using namespace std;

struct node{
	char c;
	node *child;
	node *sibli;
	int depth;
};

node trie[2000000];

void add2trie(node *p, char c, int depth, node *sibli){
	p->c = c;
	p->child = NULL;
	p->sibli = sibli;
	p->depth = depth;
}

void addstring(node *p, string &word, int &W){
	for (int i = p->depth; i < word.length(); i++){
		add2trie(&trie[W++], word[i], i + 1, p->child);
		p->child = &trie[W - 1];
		p = p->child;
	}
}

node *lookup(node *here, string &word, int i){
	if (i == word.length()){
		return here;
	}
	//cout << here->c << " -> ";
	for (node *p = here->child; p != NULL; p = p->sibli){
		if (p->c == word[i]){
			return lookup(p, word, i + 1);
		}
	}
	return here;
}

int main(){
	int nTest;
	cin >> nTest;
	for (int iTest = 1; iTest <= nTest; iTest++){
		int N, W = 0, S = 0;
		string word;
		cin >> N;
		add2trie(&trie[W++], '*', 0, NULL);
		for (int i = 0; i < N; i++){
			cin >> word;
			node *prefix = lookup(trie, word, 0);
			//cout << '\n' << prefix->depth << " " << prefix->c << endl;
			S += (prefix->depth < word.length()) ? prefix->depth + 1 : word.length();
			addstring(prefix, word, W);
		}
		cout << "Case #" << iTest << ": " << S << endl;
	}

}
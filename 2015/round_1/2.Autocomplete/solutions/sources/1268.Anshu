#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <cassert>
#include <vector>

class Trie {
public:
    Trie()
        : _words(*new std::unordered_set<int>)
        , _next(*new std::unordered_map<char, Trie>)
    {
    }

    ~Trie()
    {
    }

    Trie& next(char c, int index)
    {
        auto& trie = _next[c];
        trie._words.insert(index);
        return trie;
    }

    bool isUnambiguous()
    {
        assert(_words.size() != 0);
        return _words.size() == 1;
    }

private:
    std::unordered_set<int>& _words;
    std::unordered_map<char, Trie>& _next;
};

void process(std::string& s, int index, Trie& t)
{
    Trie* current = &t;
    for (char c : s)
        current = &current->next(c, index);
}

int solve(std::vector<std::string>& words, int index, Trie& t)
{
    std::string& word = words[index];
    process(word, index, t);

    Trie* current = &t;
    for (int i = 0; i < word.length(); ++i) {
        current = &current->next(word[i], index);
        if (current->isUnambiguous())
            return i + 1;
    }

    return word.length();
}

int solve(std::vector<std::string>& words)
{
    Trie t;
    int answer = 0;
    for (int i = 0; i < words.size(); ++i)
        answer += solve(words, i, t);

    return answer;
}

int main()
{
    int cases;
    std::cin >> cases;
    for (int c = 1; c <= cases; ++c) {
        int wordCount;
        std::cin >> wordCount;
        auto& words = *new std::vector<std::string>;
        for (int i = 0; i < wordCount; ++i) {
            std::string word;
            std::cin >> word;
            words.push_back(word);
        }

        printf("Case #%d: %d\n", c, solve(words));
        delete &words;
    }

    return 0;
}


#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 100 * 1000 + 13;
const int M = 2000 * 1000 + 13;
const int A = 26 + 3;
char buf[M];

struct node {
	int next[A];
};

int n;
string s[N];

inline bool read() {
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
		assert(scanf("%s", buf) == 1);
		s[i] = string(buf);
	}
    return true;
}

node a[M];
int sza;

bool add(int& v, int c) {
	if (a[v].next[c] == -1) {
		a[v].next[c] = sza;
		memset(a[sza].next, -1, sizeof a[sza].next);
		v = sza;
		sza++;
		return true;
	}
	int next = a[v].next[c];
	v = next;
	return false;
}

inline void solve(int test) {
	printf("Case #%d: ", test + 1);
	int ans = 0;
	memset(a[0].next, -1, sizeof a[0].next);
	sza = 1;
	
	forn(i, n) {
		bool ok = false;
		int cur = 0;	
		int ad = 0;
		forn(j, sz(s[i])) {
			ad++;
			bool res = add(cur, s[i][j] - 'a');
			if (ok && res) {
				ad--;
			}
			ok |= res;
		}
		ans += ad;
	}
	printf("%d\n", ans);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
#endif

    cout << setprecision(25) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));
	int n;
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
	    assert(read());
    	solve(i);
    }

#ifdef SU2_PROJ
    cerr << "TIME: " << clock() << endl;
#endif

    return 0;
}
#include <cstdio>
#include <memory.h>

#define _DEBUG

using namespace std;

int tonumber(char c) { return c - 'a'; }

struct Trie {
    int first, terminal;
    Trie* children[26];
    Trie() : first(-1), terminal(-1) {
        memset(children, 0, sizeof(children));
    }
    ~Trie() {
        for (int i = 0; i < 26; i++)
            if (children[i]) delete children[i];
    }
    void insert(const char* k, int id) {
        if (first == -1) first = id;
        if (*k == 0) terminal = id;
        else {
            int next = tonumber(*k);
            if (children[next] == NULL)
                children[next] = new Trie();
            children[next]->insert(k+1, id);
        }
    }
    Trie* find(const char* k) {
        if (*k == 0) return this;
        int next = tonumber(*k);
        if (children[next] == NULL) return NULL;
        return children[next]->find(k+1);
    }
    int type(const char* k, int id) {
        if (*k == 0 || first == id) return 0;
        int next = tonumber(*k);
        return 1 + children[next]->type(k+1, id);
    }
};

int N;
char W[2000010];

int count(Trie* trie, const char* word) {
    Trie* node = trie->find(word);
    return trie->type(word, node->terminal);
}

long long solve() {
    long long ret = 0;
    Trie* trie = new Trie();
    scanf("%d", &N);
    for (int i = 0; i < N; i++) {
        scanf("%s", W);
        trie->insert(W, i);
        trie->first = -1;
        ret += count(trie, W);
    }
    return ret;
}

int main() {
#ifdef _DEBUG
    freopen("autocomplete.txt", "r", stdin);
#endif
    int T; scanf("%d", &T);
    for (int t = 1; t <= T; t++) {
        if (t == 17) continue;
        long long ans = solve();
        printf("Case #%d: %lld\n", t, ans);
    }
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

char key[10000007];
int length;
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int insert(trie_t *pTrie, int *ans)
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;
    int num=0;
    int check=0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            if(check==0)
                {
                    *ans=(num+1);
                    check=1;
                }
            pCrawl->children[index] = getNode();

        }
        else
            num++;

        pCrawl = pCrawl->children[index];
    }

    // mark last node as leaf
    if (check==0)
        *ans=length;
    pCrawl->value = pTrie->count;
}

// Returns non zero, if key presents in trie
/*int search(trie_t *pTrie, char key[])
{
    int level;
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            return 0;
        }

        pCrawl = pCrawl->children[index];
    }

    return (0 != pCrawl && pCrawl->value);
}*/

// Driver
int main()
{
    freopen("autocomplete.txt", "r", stdin);
  freopen ("myfilefinal142sub.txt","w",stdout);
    int t,n;
    scanf("%d",&t);
    int i,j;
    for(i=0;i<t;i++)
    {
        trie_t trie;
         initialize(&trie);
            scanf("%d",&n);
            long long sum=0;
            for(j=0;j<n;j++)
            {
                scanf("%s",key);
                length=strlen(key);
                int ans=0;
                insert(&trie,&ans);
                if(j==0)
                    ans=1;
                sum=sum+ans;
            }
            printf("Case #%d: %d\n",i+1,sum);

    }


    return 0;
}

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class B {


	public static void main(String arg[]) throws FileNotFoundException {
			
		System.setIn(new FileInputStream(new File("autocomplete.txt")));	
		System.setOut(new PrintStream(new File("autocomplete_output.txt")));
		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(new BufferedWriter(
				new OutputStreamWriter(System.out)));
		int tcases = sc.nextInt();
		int i = 0;
		while(i++!=tcases)
		{
			int n = sc.nextInt();
			Node root=new Node(' ');
			int finalCount = 0;
			while(n--!=0)
			{
				String s = sc.next();
				Node current = root;
				int numOfKeys = 1;
				int j = 0;
				while(j<s.length() && current.hasNode(s.charAt(j)))
				{
					numOfKeys++;
					current = current.getChildNode(s.charAt(j));
					j++;
				}
				if(j==s.length())
					numOfKeys--;
				for(;j<s.length();j++)
				{
					Node node = new Node(s.charAt(j));
					current.addChild(node);
					current = node;
				}
				finalCount = finalCount + numOfKeys;
				current.setLeaf(true);
			}
			out.println("Case #"+i+": "+finalCount);
		}
		out.flush();
		out.close();
		sc.close();
	}
	
	
	public static class Node {
		HashMap<Character, Node> myChilds = new HashMap<Character, Node>();
		Character myKey;
		boolean leaf=false;	
		
		public void setLeaf(boolean leaf) {
			this.leaf = leaf;
		}
		
		public void addChild(Node node)
		{
			myChilds.put(node.myKey, node);
		}
		
		public Node getChildNode(Character s) {
			return myChilds.get(s);
		}

		public Node(Character s) {
			myKey = s;
		}

		public boolean hasNode(Character s) {
			if (myChilds.keySet().contains(s))
				return true;
			return false;
		}
	}
	
	

}

#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <utility>
#include <tuple>
#include <ctime>

using namespace std;

const int MAX_STATES = 1000*1000;
const int N_LETTERS = 26;

struct State {
  State() {
    fill(next, next + N_LETTERS, -1);
    unique = false;
  }
  
  int next[N_LETTERS];
  bool unique;
};

struct Trie {
  Trie(int n_nodes) {
    nodes.resize(n_nodes);
    free_node = 1;
  }

  int Insert(const string &word) {
    int node = 0;

    bool should_count = true;
    int count = 0;
    const char *ch = word.c_str();
    while (*ch) {
      if (should_count) {
        ++count;
      }
      
      int ch_idx = *ch - 'a';
      int next_node = this->nodes[node].next[ch_idx];
      if (next_node == -1) {
        next_node = this->free_node++;
        this->nodes[node].next[ch_idx] = next_node;
        should_count = false;
      }

      node = next_node;
      ++ch;
    }

    return count;
  }
  
  vector<State> nodes;
  int free_node;
};


void solve_case(int case_id) {
  int count = 0;
  Trie trie(MAX_STATES);

  int n; cin >> n;
  while (n--) {
    string s; cin >> s;
    count += trie.Insert(s);
  }
  cout << "Case #" << case_id << ": " << count << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  
  clock_t t0 = clock(); 
  int t; cin >> t;
  for (int i = 1; i <= t; ++i) {
    solve_case(i);
  }
  clock_t t1 = clock();
  cerr << double(t1 - t0) / CLOCKS_PER_SEC << endl;
  return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<algorithm>
#include<cmath>
#include<set>
#include<queue>
#include<sstream>
#include<utility>
#include<map>
#include<ctime>
#include<cstdio>
#include<cassert>
#include<functional>




using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<char, char> pcc;
typedef pair<double, double> pdd;

#define show(x) cerr << x
#define debug(x) show(#x << ": " << (x) << endl)

const long double PI = 3.14159265358979323846;
const long double gammama = 0.57721566490153286060;
const long double eps = 1e-5;
const int INF = 1000 * 1000 * 1000 + 1;
const ll LINF = (ll)1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const ll mod = 1000 * 1000 * 1000 + 7;

struct vertex {
      vector<int> to;
      vertex() {
            to.assign(256, -1);
      }
};

struct trie {
      vector<vertex> tree;
      trie() {
            tree.resize(1);
      }
      int add(const string& s, int pos, int b) {
            if (b == s.size())
                  return 0;
            if (tree[pos].to[s[b]] != -1)
                  return add(s, tree[pos].to[s[b]], b + 1);
            tree.push_back(vertex());
            tree[pos].to[s[b]] = tree.size() - 1;
            return 1 + add(s, tree[pos].to[s[b]], b + 1);
      }
      int add(const string& s) {
            return s.size() - max(add(s, 0, 0) - 1, 0);
      }
};

void solve() {
      trie tr;
      int n;
      cin >> n;
      int res = 0;
      for (int i = 0; i < n; ++i) {
            string s;
            cin >> s;
            res += tr.add(s);
            //cerr << res << endl;
      }
      cout << res << endl;
      
}

#define LOCAL

int main() {
      //ios_base::sync_with_stdio(0);
#ifdef LOCAL
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
#endif
      int numberOfTests;
      cin >> numberOfTests;
      for (int testId = 0; testId < numberOfTests; ++testId) {
            cout << "Case #" << testId + 1 << ": ";
            solve();
            std::cerr << testId << endl;
      }

#ifdef LOCAL
      cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif	
      return 0;
}

#pragma comment(linker, "/STACK:1267777216")
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<cmath>
#include<iomanip>
#include<ctime>
#include<cctype>
#include<fstream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<cstdio>
#include<cstdlib>
#include<utility>
#include<algorithm>
#include<functional>
#include<cassert>
//#include<unordered_map>
#define ll long long
#define ull unsigned long long
#define Inf (1000*1000*1000 + 7)
#define InfL (ll)((ll)1000*1000*1000*1000*1000*1000 + 7)
#define pii pair < ll , ll >
#define mp make_pair
#define all(x) x.begin() , x.end()
#define sbstr(s, i, j) s.substr(i, j - i + 1)
#define in(n) ll (n); cin >> n
#define sqr(x) ((x)*(x))
#define PI 3.14159265358979
#define EPS 1e-6
#define all(x) x.begin() , x.end()
#define so(x) sort(all(x))
#define re(x) reverse(all(x))
using namespace std;
namespace
{
	void run()
	{
		const int prime = 331;
		int t;
		cin >> t;
		for ( int i = 1 ; i <= t ; i++ )
		{
			int n;
			cin >> n;
			set < int > s;
			string str;
			int count = 0;
			for ( int i = 0 ; i < n ; i++ )
			{
				cin >> str;
				ll hash = 0;
				int j;
				for ( j = 0 ; j < str.size() ; j++ )
				{
					hash = hash * prime + str[ j ];
					int q = s.size();
					s.insert( hash );
					if ( s.size() != q )
					{
						count += j + 1;
						break;
					}
				}
				if ( j == str.size() )
				{
					count += str.size();
					continue;
				}
				else
					for ( int k = j + 1 ; k < str.size() ; k++ )
					{
						hash = hash * prime + str [ k ];
						s.insert ( hash );
					}
			}
			printf ( "Case #%d: %d\n" , i , count );
		}
	}
}
int main()
{
	ios_base::sync_with_stdio( 0 );
#ifdef Levon
    freopen ( "in.txt" , "r" , stdin );
    freopen ( "out.txt" , "w" , stdout );
#endif
	cout << fixed << setprecision(13);
    run(); return 0;
}
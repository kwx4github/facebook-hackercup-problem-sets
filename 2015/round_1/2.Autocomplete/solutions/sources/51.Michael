#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "autocomplete"

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

struct Node {
  vector<int> children;

  Node(): children(26, -1) {}
};

int GetCode(char a) {
  return a - 'a';
}

int AddChild(vector<Node>& trie, int from, int code) {
  trie[from].children[code] = trie.size();
  trie.push_back(Node());
  return trie[from].children[code];
}

int AddToDictionary(vector<Node>& trie, const string& word) {
  int current = 0;
  int result = -1;
  for (int i = 0; i < word.length(); ++i) {
    int code = GetCode(word[i]);
    if (trie[current].children[code] == -1) {
      current = AddChild(trie, current, code);
      if (result < 0) {
        result = i + 1;
      }
    } else {
      current = trie[current].children[code];
    }
  }
  if (result < 0) {
    result = word.length();
  }
  return result;
}

int SolveFast(const vector<string>& words) {
  vector<Node> trie;
  trie.push_back(Node());
  int result = 0;
  for (int i = 0; i < words.size(); ++i) {
    result += AddToDictionary(trie, words[i]);
  }
  return result;
}

int SolveSlow(const vector<string>& words) {
  int result = 0;
  for (int i = 0; i < words.size(); ++i) {
    for (int k = 1; k <= words[i].length(); ++k) {
      bool ok = true;
      for (int j = 0; j < i; ++j) {
        if (words[j].length() >= k && words[j].substr(0, k) == words[i].substr(0, k)) {
          ok = false;
          break;
        }
      }
      if (ok || k == words[i].length()) {
        result += k;
        break;
      }
    }
  }
  return result;
}

int main() {
  /*while (true) {
    int n = rand() % 100 + 1;
    cerr << n << endl;
    vector<string> words;
    for (int i = 0; i < n; ++i) {
      string word = "";
      int length = rand() % 20 + 1;
      for (int j = 0; j < length; ++j) {
        word += ('a' + rand() % 10);
      }
      words.push_back(word);
      cerr << word << endl;
    }
    int res1 = SolveFast(words);
    int res2 = SolveSlow(words);
    if (res1 != res2) {
      cerr << "Wrong Answer: " << res1 << ' ' << res2 << endl;
      break;
    } else {
      cerr << "OK: " << res1 << ' ' << res2 << endl;
    }
  }*/
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
    int n;
    cin >> n;
    vector<string> words(n);
    for (int i = 0; i < n; ++i) {
      cin >> words[i];
    }
    int result = SolveFast(words);
    cout << "Case #" << test_index + 1 << ": " << result << endl;
  }
  return 0;
}

package hackercup.first

import scala.collection.mutable
import scala.io.Source

object Auto extends App {

  val set = mutable.SortedSet.empty[String]

  var stop = false
  var i = 0

  def process(str: String): Int =
    Range(1, str.size).find { i =>
      val s = str.take(i - 1)
      val pref = s + str.charAt(i - 1)
      val nPref = s + (str.charAt(i - 1).toInt + 1).asInstanceOf[Char]
      val t = set.rangeImpl(Some(pref), Some(nPref))
      t.size == 0
    } match {
      case None =>
        set += str
        str.size
      case Some(i) =>
        set += str
        i
    }


  var source = Source.fromURL(getClass.getResource("/auto.txt")).getLines().toList
  val testCount = source.head.toInt
  source = source.tail

  val d = Range(0, testCount).map { _ =>
    val linesCount = source.head.toInt
    source = source.tail
    val res = source.splitAt(linesCount)
    source = res._2
    set.clear()
    res._1.map(process).sum
  }.zipWithIndex.map{
    case (b, index) => s"Case #${index + 1}: $b"
  }.mkString("\n")
  println(d)
}

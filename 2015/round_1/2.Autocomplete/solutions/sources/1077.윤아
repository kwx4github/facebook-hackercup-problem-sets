using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

class Program
{
    private static void Main(string[] args)
    {
        var T = int.Parse(Console.ReadLine());
        for (var t = 0; t < T; t++)
        {
            var N = int.Parse(Console.ReadLine());
            var cnt = 0;
            var trie = new Trie<bool>();
            for (var i = 0; i < N; i++)
            {
                var str = Console.ReadLine();
                trie.Add(str, true);
                cnt += trie.GetDepthCnt(str);
            }
            Console.WriteLine("Case #{0}: {1}", t + 1, cnt);
        }
    }
}

public class Trie<TValue> : IDictionary<string, TValue>
{
    private readonly TrieNode root;
    private int count;

    public Trie(IEqualityComparer<char> comparer)
    {
        root = new TrieNode(char.MinValue, comparer);
    }

    public Trie()
        : this(EqualityComparer<char>.Default)
    {
    }

    public int Count
    {
        get { return count; }
    }

    public ICollection<string> Keys
    {
        get { return GetAllNodes().Select(n => n.Key).ToArray(); }
    }

    public ICollection<TValue> Values
    {
        get { return GetAllNodes().Select(n => n.Value).ToArray(); }
    }

    bool ICollection<KeyValuePair<string, TValue>>.IsReadOnly
    {
        get { return false; }
    }

    public TValue this[string key]
    {
        get
        {
            TValue value;
            if (!TryGetValue(key, out value))
            {
                throw new KeyNotFoundException("The given charKey was not present in the trie.");
            }
            return value;
        }
        set
        {
            TrieNode node;
            if (TryGetNode(key, out node))
            {
                SetTerminalNode(node, value);
            }
            else
            {
                Add(key, value);
            }
        }
    }

    public void Add(string key, TValue value)
    {
        if (key == null)
        {
            throw new ArgumentNullException("key");
        }
        var node = key.Aggregate(root, (current, c) => current.Add(c));
        if (node.IsTerminal)
        {
            throw new ArgumentException(string.Format("An element with the same charKey already exists: '{0}'", key),
                "key");
        }
        SetTerminalNode(node, value);
        count++;
    }

    public void Clear()
    {
        root.Clear();
        count = 0;
    }

    public bool ContainsKey(string key)
    {
        TValue value;
        return TryGetValue(key, out value);
    }

    public IEnumerator<KeyValuePair<string, TValue>> GetEnumerator()
    {
        return GetAllNodes().Select(n => new KeyValuePair<string, TValue>(n.Key, n.Value)).GetEnumerator();
    }

    public bool Remove(string key)
    {
        if (key == null)
        {
            throw new ArgumentNullException("key");
        }
        TrieNode node;
        if (!TryGetNode(key, out node))
        {
            return false;
        }
        if (!node.IsTerminal)
        {
            return false;
        }
        RemoveNode(node);
        return true;
    }

    public bool TryGetValue(string key, out TValue value)
    {
        if (key == null)
        {
            throw new ArgumentNullException("key");
        }
        TrieNode node;
        value = default(TValue);
        if (!TryGetNode(key, out node))
        {
            return false;
        }
        if (!node.IsTerminal)
        {
            return false;
        }
        value = node.Value;
        return true;
    }

    void ICollection<KeyValuePair<string, TValue>>.Add(KeyValuePair<string, TValue> item)
    {
        Add(item.Key, item.Value);
    }

    bool ICollection<KeyValuePair<string, TValue>>.Contains(KeyValuePair<string, TValue> item)
    {
        TrieNode node;
        if (!TryGetNode(item.Key, out node))
        {
            return false;
        }
        return node.IsTerminal && EqualityComparer<TValue>.Default.Equals(node.Value, item.Value);
    }

    void ICollection<KeyValuePair<string, TValue>>.CopyTo(KeyValuePair<string, TValue>[] array, int arrayIndex)
    {
        Array.Copy(GetAllNodes().Select(n => new KeyValuePair<string, TValue>(n.Key, n.Value)).ToArray(), 0, array,
            arrayIndex, Count);
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    bool ICollection<KeyValuePair<string, TValue>>.Remove(KeyValuePair<string, TValue> item)
    {
        TrieNode node;
        if (!TryGetNode(item.Key, out node))
        {
            return false;
        }
        if (!node.IsTerminal)
        {
            return false;
        }
        if (!EqualityComparer<TValue>.Default.Equals(node.Value, item.Value))
        {
            return false;
        }
        RemoveNode(node);
        return true;
    }

    public void Add(TrieEntry<TValue> item)
    {
        Add(item.Key, item.Value);
    }

    public void AddRange(IEnumerable<TrieEntry<TValue>> collection)
    {
        foreach (var item in collection)
        {
            Add(item.Key, item.Value);
        }
    }

    public IEnumerable<TrieEntry<TValue>> GetByPrefix(string prefix)
    {
        var node = root;
        if (prefix.Any(item => !node.TryGetNode(item, out node)))
        {
            return Enumerable.Empty<TrieEntry<TValue>>();
        }
        return node.GetByPrefix();
    }

    public int GetDepthCnt(string prefix)
    {
        var node = root;
        var depth = 0;
        foreach (var item in prefix)
        {
            if (node.SubChildren == 1) return depth;
            if (!node.TryGetNode(item, out node))
            {
                break;
            }
            depth++;
        }
        return depth;
    }

    private static void SetTerminalNode(TrieNode node, TValue value)
    {
        node.IsTerminal = true;
        node.Value = value;
    }

    private IEnumerable<TrieNode> GetAllNodes()
    {
        return root.GetAllNodes();
    }

    private void RemoveNode(TrieNode node)
    {
        node.Remove();
        count--;
    }

    private bool TryGetNode(string key, out TrieNode node)
    {
        node = root;
        foreach (var c in key)
        {
            if (!node.TryGetNode(c, out node))
            {
                return false;
            }
        }
        return true;
    }

    private sealed class TrieNode
    {
        private readonly Dictionary<char, TrieNode> children;
        private readonly IEqualityComparer<char> comparer;
        private readonly char keyChar;
        public int SubChildren;

        internal TrieNode(char keyChar, IEqualityComparer<char> comparer)
        {
            this.keyChar = keyChar;
            this.comparer = comparer;
            children = new Dictionary<char, TrieNode>(comparer);
        }

        internal bool IsTerminal { get; set; }

        internal string Key
        {
            get
            {
                var stack = new Stack<char>();
                stack.Push(keyChar);
                var node = this;
                while ((node = node.Parent).Parent != null)
                {
                    stack.Push(node.keyChar);
                }
                return new string(stack.ToArray());
            }
        }

        internal TValue Value { get; set; }
        private TrieNode Parent { get; set; }

        internal TrieNode Add(char key)
        {
            TrieNode childNode;
            if (!children.TryGetValue(key, out childNode))
            {
                childNode = new TrieNode(key, comparer)
                {
                    Parent = this
                };
                children.Add(key, childNode);
            }
            ++childNode.SubChildren;
            return childNode;
        }

        internal void Clear()
        {
            children.Clear();
        }

        internal IEnumerable<TrieNode> GetAllNodes()
        {
            foreach (var child in children)
            {
                if (child.Value.IsTerminal)
                {
                    yield return child.Value;
                }
                foreach (var item in child.Value.GetAllNodes())
                {
                    if (item.IsTerminal)
                    {
                        yield return item;
                    }
                }
            }
        }

        internal IEnumerable<TrieEntry<TValue>> GetByPrefix()
        {
            if (IsTerminal)
            {
                yield return new TrieEntry<TValue>(Key, Value);
            }
            foreach (var item in children)
            {
                foreach (var element in item.Value.GetByPrefix())
                {
                    yield return element;
                }
            }
        }

        internal void Remove()
        {
            IsTerminal = false;
            if (children.Count == 0 && Parent != null)
            {
                Parent.children.Remove(keyChar);
                if (!Parent.IsTerminal)
                {
                    Parent.Remove();
                }
            }
        }

        internal bool TryGetNode(char key, out TrieNode node)
        {
            return children.TryGetValue(key, out node);
        }
    }
}

public struct TrieEntry<TValue>
{
    public TrieEntry(string key, TValue value)
        : this()
    {
        Key = key;
        Value = value;
    }

    public string Key { get; private set; }
    public TValue Value { get; private set; }

    public override string ToString()
    {
        return string.Format("[{0}, {1}]", Key, Value);
    }
}
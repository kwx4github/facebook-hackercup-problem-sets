#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define SIZE 26
#define MAX 1000000

typedef struct trie_node trie_node;
struct trie_node {
  int mark;
  int count;
  trie_node *children[SIZE];
};

typedef struct trie trie;
struct trie {
  trie_node *root;
  int count;
};

trie_node *getNode()
{
  trie_node *pNode = NULL;
 
  pNode = (trie_node*)malloc(sizeof(trie_node));
 
  if(pNode) {
    int i;
    pNode->mark = 0;
    for(i = 0; i < SIZE; i++) {
        pNode->children[i] = NULL;
    }
  }
 
  return pNode;
}
 
void initialize(trie *pTrie)
{
  pTrie->root = getNode();
  pTrie->count = 0;
}
 
int insert(trie *pTrie, char* key) {
  int matching = 0;
  int level;
  int length = strlen(key);
  int index;
  trie_node *pCrawl;
 
  pTrie->count++;
  pCrawl = pTrie->root;
 
  for( level = 0; level < length; level++) {
    index = (int)( key[level]-'a');
    if(!pCrawl->children[index]) {
      pCrawl->children[index] = getNode();
    } else {
      matching++;
    }

    pCrawl = pCrawl->children[index];
  }
 
  if (matching == length) {
    return matching;
  } else {
    return matching+1;
  }
}
 
int main() {
  trie trie;
  int t, n, i, j;
  scanf("%d", &t);


  for (i = 0; i < t; i++) {
    initialize(&trie);
    scanf("%d", &n);
    int result = 0;
    for (j = 0; j < n; j++) {
      char word[MAX];
      scanf("%s", word);
      result += insert(&trie, word);  
    }
    printf("Case #%d: %d\n", i + 1, result);
  }

  return 0;
}

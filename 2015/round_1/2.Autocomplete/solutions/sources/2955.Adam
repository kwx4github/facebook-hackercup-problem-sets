#include <stdio.h>
#include <string.h>
#include <assert.h>

#define MAX_SIZE	2000000

int max(int x, int y)
{
	return (x >= y) ? x : y;
}

int min(int x, int y)
{
	return (x <= y) ? x : y;
}

typedef struct node
{
	int breadth;
	int count;
	struct node *children[26];
} node_t;

node_t pool[MAX_SIZE];
node_t *aptr;

node_t *insert(node_t *trie, char *text)
{
	int i;

	if(trie == NULL)
	{
		trie = (aptr ++);

		trie->breadth = 1;
		trie->count = 1;
		for(i = 26; i --;)
			trie->children[i] = NULL;
	}
	else
	{
		trie->count ++;
	}

	if(*text == 0)
	{
		return trie;
	}
	else
	{
		trie->children[*text - 'a'] = insert(trie->children[*text - 'a'], text + 1);

		trie->breadth = 0;
		for(i = 26; i --;)
			if(trie->children[i])
			{
				trie->breadth += trie->children[i]->breadth;
				//trie->count += trie->children[i]->count;
			}

		return trie;
	}
}

int query(node_t *trie, char *text)
{
	assert(trie);

	if(*text == 0)
	{
		return 1;
	}
	else
	{
		if(trie->children[*text - 'a']->count <= 1 && trie->children[*text - 'a']->breadth <= 1)
			return 1;
		else
			return 1 + query(trie->children[*text - 'a'], text + 1);
	}
}

void print(node_t *root, int depth)
{
	int i, j;
	if(root)
	{
		for(i = 0; i < 26; i ++)
		{
			if(root->children[i])
			{
				for(j = depth; j --;) putchar('\t');
				printf("(%c, %d, %d)\n", (char)('a' + i), root->children[i]->breadth, root->children[i]->count);
				print(root->children[i], depth + 1);
			}
		}
	}
}

int main(void)
{
	int z, t;
	int i, j, k, n, d;
	char buffer[MAX_SIZE];

	node_t *root;

	for(scanf("%d", &t), z = 1; z <= t; z ++)
	{
		root = NULL;
		aptr = pool;

		for(scanf("%d ", &n), i = 0, d = 0; n --;)
		{
			for(k = 0, j = getchar();; j = getchar())
			{
				if(j == '\n' || j == EOF)
				{
					buffer[i ++] = 0;
					root = insert(root, &buffer[i - k - 1]);
					d += min(k, query(root, &buffer[i - k - 1]));
					/*printf("%d\n", min(k, query(root, &buffer[i - k - 1])));
					print(root, 0);
					puts("-------------");*/
					break;
				}
				else
				{
					buffer[i ++] = j;
					k ++;
				}
			}
		}

		printf("Case #%d: %d\n", z, d);
	}

	return 0;
}


#include <unordered_map>
#include<bits/stdc++.h>
#define sqr(x) ( (x)*(x) )
#define debug(args...){dbg,args; cerr<<endl;}args
#define Size(a) int((a).size()) 
#define pb push_back
#define mset(x,v) memset(x,v,sizeof(x))
#define all(c) (c).begin(),(c).end() 
#define SORT(x) sort(all(x))
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
#define tr(c,i) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define P(x,i) cerr<<"["#x<<"["<<i<<"] = "<<x[i]<<"]\n"
#define PP(x,i,j) cerr<<"["#x<<"["<<i<<"]["<<j<<"]= "<<x[i][j]<<"]\n"
#define PPP(x,i,j,k) cerr<<"["#x<<"["<<i<<"]["<<j<<"]["<<k<<"]= "<<x[i][j][k]<<"]\n"
#define chk(x,n) ( x[n>>6] & (1<< ( (n>>1) & 31) )  ) // checks if  the bit corresponding to n is 1 
#define set(x,n) ( x[n>>6] |= (1<< ( (n>>1) & 31) )  ) // sets the bit corresponding to n to 1 - meaning its composite 
#define mod1 1000000007
#define mod2 1000000009
#define p1 26
#define p2 37
typedef long long int ll;
typedef long double ld;
typedef unsigned int ui;
typedef unsigned long long int ull;	
using namespace std;
typedef vector<int> VI;
typedef set<int> SI;
typedef map<int,int> MII;

typedef pair<int,int> PII;
struct debugger
{
	template<typename T> debugger& operator , (const T& v)
	{
		cerr<<v<<" ";
		return *this;
	}
} dbg;
int val(char c)
{
	return (int)c-(int)'a';
}

int power(int a, int b,int mod) 
{

	ull x = 1, y = a;

	while(b > 0)
	{

		if(b%2 == 1) {

			x=(x*y);

			if(x>mod) x%=mod;

		}

		y = (y*y);

		if(y>mod) y%=mod;

		b /= 2;

	}

	return x;

}

int modinv(int a,int mod)
{
	return power(a,mod-2,mod);
}

int main()
{
	int T,f1,f2;
	scanf("%d",&T);
	for (int t = 1; t<=T; t++) 
	{
		int n;
		scanf("%d",&n);
		unordered_map<int,int> hash1;
		unordered_map<int,int> hash2;
		int ans=0;
		string word;
		bool found=false;
		for(int i=0;i < n;i++)
		{
			cin>>word;
			int sz=Size(word);
			f1=val(word[0]);
			f2=f1;
			found=false;
			if(!present(hash1,f1)) 
			{
				ans++;
			//	debug(word.substr(0,1) );
				found=true;
			}
			else
			{
				if(!present(hash2,f2)) 
				{
					ans++;
				//	debug(word.substr(0,1) );
					found=true;
				}
			}
			hash1[ f1]=1;
			hash2[ f2]=1;
			int pa=1,pb=1;
			for(int j=1;j < sz;j++)
			{
				pa=((ll)pa*p1)%mod1;
				pb=((ll)pb*p2)%mod2;
				f1=( f1+( (ll)val(word[j])*pa )%mod1 )%mod1;
				f2=( f2+( (ll)val(word[j])*pb )%mod2 )%mod2;
				if(!found)
				{
					if(!present(hash1,f1)) 
					{
					//	debug(word.substr(0,j+1));
						ans+=j+1;found=true;
					}
					else
					{
						if(!present(hash2,f2)) 
						{	
					//		debug(word.substr(0,j+1));
							ans+=j+1;found=true;
						}
					}
				}
				hash1[ f1]=1;
				hash2[ f2]=1;
			}
			if(!found) 
			{
				//debug(word.substr(0,sz));
				ans+=sz;found=true;
			}
		}
		printf("Case #%d: %d\n",t,ans);
	}
	return 0;
}

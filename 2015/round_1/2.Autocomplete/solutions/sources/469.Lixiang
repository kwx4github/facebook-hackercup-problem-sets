#include <cstdio>
#include <iostream>

using namespace std;

struct trie_t {
    trie_t *next[26];
};

trie_t trie;
trie_t TRIE[1000010];
trie_t *ptr;
char str[1000010];
int result;

void init_trie()
{
    ptr = &TRIE[0];
    for (int i = 0; i < 26; ++i) {
        trie.next[i] = NULL;
    }
}

void autocomplete(char *word)
{
    //printf("%s:", word);

    trie_t *p = &trie;
    int len = 0;
    bool covered = false;
    while ('\0' != *word) {
        ++len;
        //if (!covered) {
         //   printf("%c", *word);
        //}
        int id = *word - 'a';
        
        if (NULL == p->next[id]) {
            if (!covered) {
            //    printf("\n");
                result += len;
                covered = true;
            }
            p->next[id] = ptr++;
            for (int i = 0; i < 26; ++i) {
                p->next[id]->next[i] = NULL;
            }
        }
        
        p = p->next[id];
        word++;
    }
    
    if (!covered) {
        //printf("\n");
        result += len;
    }
}

int main()
{
    FILE *fin = fopen("autocomplete.txt", "r");
    FILE *fout = fopen("autocomplete.out", "w");
    
    for (int i = 0; i < 26; ++i) {
        trie.next[i] = NULL;
    }
    
    int T;
    fscanf(fin, "%d", &T);
    
    for (int caseId = 1; caseId <= T; ++caseId) {
        int N;
        fscanf(fin, "%d\n", &N);
        //printf("%d\n", N);

        init_trie();

        result = 0;
        for (int i = 1; i <= N; ++i) {
            fscanf(fin, "%s", str);
            autocomplete(str);
        }
       
        fprintf(fout, "Case #%d: %d\n", caseId, result);
        //printf("Case #%d: %d\n", caseId, result);
    }
    
    fclose(fout);
    fclose(fin);
    return 0;
}


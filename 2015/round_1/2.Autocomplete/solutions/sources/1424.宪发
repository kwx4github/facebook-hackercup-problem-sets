//#pragma comment(linker,"/STACK:102400000,102400000")
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <ctime>
#include <numeric>
#include <vector>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <complex>
#include <deque>
#include <functional>
#include <list>
#include <map>
#include <string>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
using namespace std;
template<class T> inline T sqr(T x) { return x * x; }
typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<PII, int> PIII;
typedef pair<LL, LL> PLL;
typedef pair<LL, int> PLI;
typedef pair<LD, LD> PDD;
#define MP make_pair
#define PB push_back
#define sz(x) ((int)(x).size())
#define clr(ar,val) memset(ar, val, sizeof(ar))
#define istr stringstream
#define FOR(i,n) for(int i=0;i<(n);++i)
#define forIt(mp,it) for(__typeof(mp.begin()) it = mp.begin();it!=mp.end();it++)
const double EPS = 1e-6;
const int INF = 0x3fffffff;
const LL LINF = INF * 1ll * INF;
const double PI = acos(-1.0);

#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define lowbit(u) (u&(-u))

using namespace std;

struct Node{
	Node *ch[26];
	int cnt;
	void init(){
		memset(ch,0,sizeof(ch));
		cnt = 0;
	}
} nd[1000005],*root;

int cnt;

Node* newNode(){
	nd[cnt].init();
	return &nd[cnt++];
}

void init(){
	cnt = 0;
	root = newNode();
}

char s[1000005];

int insert(const char *s){
	Node *tmp = root;
	tmp->cnt++;
	for(int i = 0;s[i];i++){
		int c = s[i]-'a';
		if(tmp->ch[c]==NULL) tmp->ch[c] = newNode();
		tmp = tmp->ch[c];
		tmp->cnt++;
	}
	tmp = root;
	for(int i = 0;s[i];i++){
		int c = s[i]-'a';
		tmp = tmp->ch[c];
		if(tmp->cnt==1) return i+1;
	}
	return strlen(s);
}

int main(void){
#ifndef ONLINE_JUDGE
	freopen("/Users/mac/Desktop/autocomplete.txt","r",stdin);
	freopen("/Users/mac/Desktop/data.out","w",stdout);
#endif
	int t;
	scanf("%d",&t);
	while(t--){
		int n;
		scanf("%d",&n);
		init();
		LL ans = 0;
		for(int i = 0;i<n;i++){
			scanf("%s",s);
			ans+=insert(s);
		}
		static int ca = 1;
		printf("Case #%d: %lld\n",ca++,ans);
	}
	return 0;
}


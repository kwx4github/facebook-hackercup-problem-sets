#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>

using namespace std;

struct Node {
	int nxt[26];
	int downEnds;
	int parent;
	
	Node() {
		memset(nxt, -1, sizeof(nxt));
		downEnds = 0;
		parent = -1;
	}
};

int nodesCount;
vector< Node > trie;

int n;
char s[1 << 20];

int ret;

void addWord() {
	Node blank;
	
	int m = strlen(s);
	int currentNode = 0;
	for(int i = 0; i < m; i ++) {
		int c = s[i] - 'a';
		if(trie[currentNode].nxt[c] != -1) currentNode = trie[currentNode].nxt[c];
		else {
			trie[currentNode].nxt[c] = nodesCount;
			trie.push_back(blank);
			trie[nodesCount].parent = currentNode;
			currentNode = nodesCount;
			nodesCount ++;
		}
	}
	
	while(currentNode != -1) {
		trie[currentNode].downEnds ++;
		currentNode = trie[currentNode].parent;
	}
}

void calc() {
	int m = strlen(s);
	int currentNode = 0;
	for(int i = 0; i < m; i ++) {
		int c = s[i] - 'a';
		ret ++;
		currentNode = trie[currentNode].nxt[c];
		if(trie[currentNode].downEnds == 1) break;
	}
}

void solve() {
	Node blank;
	
	trie.clear();
	nodesCount = 0;
	ret = 0;
	
	trie.push_back(blank);
	nodesCount ++;
	
	scanf("%d\n", &n);
	for(int i = 0; i < n; i ++) {
		scanf("%s", &s);
		addWord();
		calc();
	}
	
	printf("%d\n", ret);
}

int main()
{
	int T;
	scanf("%d", &T);
	for(int iter = 1; iter <= T; iter ++) {
		printf("Case #%d: ", iter);
		solve();
	}

    return 0;
}

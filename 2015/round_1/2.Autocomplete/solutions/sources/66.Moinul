#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;


struct NODE{

    int prefix;
    NODE* edge[26];
    NODE(){
        prefix=0;
        for (int i=0;i<26;++i){
            edge[i]=NULL;
        }
    }
    ~NODE(){
        for (int i=0;i<26;++i){
            if ( edge[i]!=NULL ){
                delete edge[i];
            }
        }
    }
}*root;

void add(NODE *v,char* word){

    v->prefix++;

    if ( word[0]=='\0' ){

    }else{
        if ( v->edge[ word[0]-'a' ]== NULL ){
            v->edge[ word[0]-'a' ]=new NODE();
        }
        add(v->edge[ word[0]-'a' ],word+1);
    }
}

int calc(NODE *v,char* word){

    if ( v->prefix == 1 ){
        return 0;
    }

    if ( word[0]=='\0' ){
        return 0;
    }else{
        if ( v->edge[ word[0]-'a' ]== NULL ){
            v->edge[ word[0]-'a' ]=new NODE();
        }
        return 1+calc(v->edge[ word[0]-'a' ],word+1);
    }
}


#define SIZE 1000010

char str[SIZE];

int main(){


    freopen("autocomplete.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int kase;
    scanf("%d",&kase);


    for (int kk=1;kase--;++kk){
        root = new NODE();
        root->prefix = (1<<29);

        int n;
        scanf("%d",&n);
        int ans = 0;
        while ( n-- ){
            scanf("%s",str);
            add(root,str);
            ans += calc( root,str );
            //cout<< calc( root,str )<<endl;
        }
        printf("Case #%d: %d\n",kk,ans);
        delete root;
    }


    return 0;
}

#include <set>
#include <map>
#include <queue>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <cctype>
#include <algorithm>

#define eps 1e-10
#define pi acos(-1.0)
#define inf 107374182
#define inf64 1152921504606846976
#define lc l,m,tr<<1
#define rc m + 1,r,tr<<1|1
#define zero(a) fabs(a)<eps
#define iabs(x)  ((x) > 0 ? (x) : -(x))
#define clear1(A, X, SIZE) memset(A, X, sizeof(A[0]) * (min(SIZE,sizeof(A))))
#define clearall(A, X) memset(A, X, sizeof(A))
#define memcopy1(A , X, SIZE) memcpy(A , X ,sizeof(X[0])*(SIZE))
#define memcopyall(A, X) memcpy(A , X ,sizeof(X))
#define max( x, y )  ( ((x) > (y)) ? (x) : (y) )
#define min( x, y )  ( ((x) < (y)) ? (x) : (y) )
using namespace std;

struct node
{
    int p[27];
    int cnt;
    bool alive;
} treenode[1000000];

int ans,nodecnt;

char s[1000005];

void insertto()
{
    int len=strlen(s),p=0;
    ans++;
    if(treenode[p].p[s[0]-'a']==0)
    {
        clearall(treenode[nodecnt].p,0);
        treenode[nodecnt].cnt=0;
        treenode[nodecnt].alive=false;
        treenode[p].p[s[0]-'a']=nodecnt++;
    }
    p=treenode[p].p[s[0]-'a'];
    treenode[p].cnt++;
    for(int i=1; i<len; i++)
    {
        if(treenode[p].p[s[i]-'a']==0)
        {
            clearall(treenode[nodecnt].p,0);
            treenode[nodecnt].cnt=0;
            treenode[nodecnt].alive=false;
            treenode[p].p[s[i]-'a']=nodecnt++;
        }
        if(treenode[p].cnt==1&&treenode[treenode[p].p[s[i]-'a']].cnt==0)
        {

        }
        else ans++;
        treenode[treenode[p].p[s[i]-'a']].cnt++;
        p= treenode[p].p[s[i]-'a'];
    }
}

int main()
{
    //freopen("data.in","r",stdin);
    //freopen("data.txt","w",stdout);
    int t,case1=1;
    while(scanf("%d",&t)!=EOF)
    {
        while(t--)
        {
            clearall(treenode[0].p,0);
            treenode[0].cnt=0;
            treenode[0].alive=false;
            nodecnt=1;
            ans=0;
            int n;
            scanf("%d",&n);
            for(int i=0; i<n; i++)
            {
                scanf("%s",s);
                insertto();
                //printf("%d\n",ans);
            }
            printf("Case #%d: %d\n",case1++,ans);
        }
    }
    return 0;
}

#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <math.h>

#define FR(i, a, b)   for(int i = a; i < b; i++)
#define FOR(i, a, b)  for(int i = a; i <= b; i++)
#define LFOR(i, a, b) for(int i = a; i >= b; i--)
#define FRSZ(i, x)    for(int i = 0; i < (int)x.size(); i++)
#define RP(i, n)      for(int i = 0; i < n; i++)
#define repeat        do
#define until(x)      while(!(x))
#define _ve vector
#define _pa pair
#define _tu tuple
#define _mp make_pair
#define _mt make_tuple
#define _pb push_back
#define _fi first
#define _sc second
#define sz(a) ((int)(a).size())

using namespace std;

template <class T> T min3(T a, T b, T c){ return min(a, min(b, c));};
template <class T> T max3(T a, T b, T c){ return max(a, max(b, c));};

typedef long long int64;
typedef unsigned long long qword;
typedef long double ldouble;

struct Trie
{
    Trie *a['z' - 'a' + 1];
    Trie()
    {
        for(int i = 0; i < 26; i++)
            a[i] = NULL;
    }
    ~Trie()
    {
        for(int i = 0; i < 26; i++)
            if(a[i] != NULL)
                delete a[i];
    }
};

int insertNode(Trie *&root, char *s)
{
    int len = strlen(s);
    Trie *cur = root;
    bool isN = false;
    int res = -1;
    for(int i = 0; i < len; i++)
    {
        if(cur->a[s[i] - 'a'] == NULL)
        {
            if(!isN)
                res = i + 1;
            isN = true;
            cur->a[s[i]-'a'] = new Trie();
        }
        cur = cur->a[s[i]-'a'];
    }
    if(res == -1)
        return len;
    return res;
}

Trie *root;
char s[1001000];

int main()
{
    freopen("d:\\autocomplete.txt", "r", stdin);
    freopen("d:\\Output.out", "w", stdout);
    int oo;
    scanf("%d", &oo);
    for(int o = 0; o < oo; o++)
    {
        int n;
        scanf("%d", &n);
        root = new Trie();
        int64 res = 0;
        for(int i = 0; i < n; i++)
        {
            scanf("%s", &s);

            res += insertNode(root, s);
            //cout << res << endl;
        }
        cout << "Case #" << o + 1 << ": "<< res << endl;
        //delete root;
    }
}

#include <algorithm>
#include <numeric>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <iostream>
#include <fstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <sstream>
#include <stdio.h>
#include <stack>

using namespace std;

#define FOR(i,n) for (int i=0; i<n; ++i)
#define FORE(i,n) for (int i=0; i<=n; ++i)
#define REP(i,a,b) for (LL i=a; i<b; ++i)
#define REPE(i,a,b) for (LL i=a; i<=b; ++i)
#define ALL(c) (c).begin(), (c).end()
#define SORT(c) sort(ALL(c))
#define mp make_pair

#define pb push_back
#define sq(x) ((x)*(x))

typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef long long int LL;
typedef vector<int> VI;
typedef vector<bool> VB;
typedef pair<LL,LL> PLL;
typedef vector<VI> VVI;
typedef vector<LL> VL;

const double pi = acos(-1.0);
const int inf =(int) 1e9;
typedef unsigned long long int ULL;

const int INF = 1e9;
	
const int AS = 26;
const int NMAX = 1e6 + 5;

struct vertex {
	int next[AS];
	bool leaf;
	int number;
};
 
vertex t[NMAX+1];
int sz;

void add_string (const string & s) {
	int v = 0;
	FOR(i, s.size()) {
		char c = s[i] - 'a';
		if (t[v].next[c] == -1) {
			memset (t[sz].next, 255, sizeof t[sz].next);
			t[sz].number = 0;
			bool leaf = false;
			t[v].next[c] = sz++;
		}
		t[v].number++;
		v = t[v].next[c];
	}
	t[v].leaf = true;
	t[v].number ++;
}

int get_min_pref(const string & s) {
	int v = 0;
	FOR(i, s.size()) {
		char x = s[i];
		char c = s[i] - 'a';
		v = t[v].next[c];
		if (t[v].number == 1) {
			return i + 1;
		}
	}
	return s.size();
}

void init() {
	memset (t[0].next, 255, sizeof t[0].next);
	sz = 1;
}


int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    std::ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	string x;
	FOR(tt, t) {
		int total = 0;
		init();
		int n;
		cin >> n;
		
		FOR(i, n) {
			cin >> x;
			add_string(x);
			total += get_min_pref(x);
		}

		cout << "Case #" << tt +1 << ": "<< total << endl;
	}
	

	return 0;
}
//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define N 1000100
#define M 100100

string s[M];
char ss[N];

struct node
{
	int n[26];
	int c[26];
}trie[N];

int head = 1, ptr = 2;
int add(string s) {
	int cur = head;
	int answer = -1;
	rep(i, s.ln) {
		int p = s[i] - 'a';
		if(trie[cur].c[p] == 0) {
			if(answer == -1) {
				answer = i;
			}
			trie[cur].n[p] = ptr++;
		}
		trie[cur].c[p]++;
		cur = trie[cur].n[p];
	}
	if(answer == -1) answer = s.ln;
	else answer++;
	return answer;
}

void remove(string s) {
	int cur = head;
	rep(i, s.ln) {
		int p = s[i] - 'a';
		trie[cur].c[p]--;
		cur = trie[cur].n[p];
	}
}

int main() {
	memset(trie, 0, sizeof trie);
	int t;
	scanf("%d", &t);
	rep(T, t) {
		if(T) pn;
		ptr = 2;
		int n;
		scanf("%d", &n);
		rep(i, n) {
			scanf("%s", ss);
			s[i] = string(ss);
		}

		int answer = 0;
		rep(i, n) {
			answer += add(s[i]);
		}
		rep(i, n) {
			remove(s[i]);
		}
		printf("Case #%d: %d", T+1, answer);
	}
}
#include <iostream>
#include <math.h>
#include <algorithm>
#include <string>
#include <stdio.h>
#include <map>
#include <set>
#include <memory.h>
#include <vector>
using namespace std;
class node
{
public:
	char val;
	node *parent, *child[27];
	bool end;
	long long below;
	node(char val, node* p)
	{
		this->val = val;
		memset(child, 0, sizeof child);
		end = below = 0;
		parent = p;
	}
	node()
	{
		memset(child, 0, sizeof child);
		end = below = 0;
		parent = 0;
	}
	~node()
	{
		for (int i = 0; i < 26; i++)
		if (child[i])
			delete child[i];
	}
};
class tree
{
public:
	node *root;
	tree()
	{
		root = new node('*', 0);
	}
	void add(string s)
	{
		node* n = root;
		for (int i = 0; i < s.size(); i++)
		{
			char x = s[i] - 'a';
			if (!n->child[x])
				n->child[x] = new node(x, n);
			n = n->child[x];
		}
		if (!n->end)
		{
			n->end = true;
			while (n->parent != root)
			{
				n->parent->below++;
				n = n->parent;
			}
		}
	}

	int get(string s)
	{
		node*n = root;
		for (int i = 0; i < s.size(); i++)
		{
			char x = s[i] - 'a';
			if (n->child[x]->below == 1 && !n->child[x]->end)
				return i + 1;
			n = n->child[x];
		}
		return s.size();
	}
};
int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int t;
	cin >> t;
	for (int tt = 1; tt <= t; tt++)
	{
		tree t;
		int n;
		cin >> n;
		int count = 0;
		while (n--)
		{
			string s;
			cin >> s;
			t.add(s);
			count += t.get(s);

		}
		cout << "Case #" << tt << ": " << count << endl;
	}
	return 0;
}
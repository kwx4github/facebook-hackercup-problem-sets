#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

struct node
{
	map<char, node *> next;

	bool ifexists(char c)
	{
		if(next.find(c) != next.end()) return 1;
		return 0;
	}

	node * getnext(char c)
	{
		return next[c];
	}

	void insert(char c)
	{
		node * temp = new node();
		next[c] = temp;
	}


	// ~ node()
	// {
	// 	foreach(next, it)
	// 	{
	// 		delete it->second;
	// 	}
	// }
};

int main()
{

	int t;
	gi(t);

	for(int tt=1; tt<=t; tt++)
	{
		int n;
		gi(n);

		node prefix;

		string s;

		int sum = 0;
		for(int i=0; i<n; i++)
		{
			node * temp = &prefix;
			cin>>s;
			int ind = 0;
			while(temp->ifexists(s[ind]) and ind < s.length()) temp = temp->getnext(s[ind++]);
			if(ind<s.length()) sum += ind+1;
			else sum+=ind;
			while(ind < s.length())
			{
				temp->insert(s[ind]);
				temp = temp->getnext(s[ind]);
				ind++;
			}
		}

		printf("Case #%d: %d\n", tt, sum);
	}
    return 0;
}
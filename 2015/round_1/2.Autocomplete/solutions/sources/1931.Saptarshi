#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <fstream>
using namespace std;

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int Reinsert(trie_t *pTrie, char key[])
{
    int retVal=0;
    bool flag=true;
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(flag){retVal++;}
            flag=false;
        }

        if(flag)
        {
            retVal++;
        }

        pCrawl = pCrawl->children[index];
    }

    // mark last node as leaf
    pCrawl->value = pTrie->count;
    return retVal;
}

char Key[1000000];

// Driver
int main()
{
    int val=0;
    int T,N;
    ofstream MyFile;
    MyFile.open("AutocompleteOut.txt");
    ifstream InpFile("Autocomplete.txt");

    InpFile>>T;

    for(int iter=1;iter<=T;iter++)
    {
        trie_t trie;
        initialize(&trie);

        val=0;
        InpFile>>N;
        for(int i=0;i<N;i++)
        {
            InpFile>>Key;
            val+=Reinsert(&trie, Key);
        }

        MyFile<<"Case #"<<iter<<": "<<val<<endl;
    }
    return 0;
}

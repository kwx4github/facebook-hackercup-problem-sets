#include <iostream>
#include <map>
#include <string>

using namespace std;

class Trie {

  struct Node {
    int children;
    map < char, Node* > next;

    template < class Iterator >
    int add(Iterator it, Iterator end) {
      if(it == end) return 0;
      auto step = next.find(*it);
      if(step != next.end()){
        return 1 + step->second->add(it + 1, end);
      }
      Node *node = new Node();
      next[*it] = node;
      node->add(it + 1, end);
      return 1;
    }

    ~Node() {for(pair < const char, Node* > p: next) delete p.second;}
  };

  Node *root;

public:
  Trie(): root(new Node()) {}
  ~Trie() {delete root;}

  template < class Iterator >
  int add(Iterator it, Iterator end) {
    return root->add(it, end);
  }

};

void solve() {
  int n;
  cin >> n;
  Trie trie;
  string s;
  long long ans = 0;
  for(int i = 0; i < n; ++i){
    cin >> s;
    int k = trie.add(s.begin(), s.end());
    ans += k;
  }
  cout << ans << '\n';
}

int main() {
  int t;
  cin >> t;
  for(int i = 0; i < t; ++i){
    cout << "Case #" << i + 1 << ": ";
    solve();
  }
}

#include <cstdio>
#include <cassert>
#include <vector>
using std::vector;

const int MAXL = 1000005;

struct TrieNode {
  TrieNode *children[26];

  TrieNode() {
    Init();
  }

  void Init() {
    for (int i = 0; i < 26; ++i)
      children[i] = nullptr;
  }
};
vector<TrieNode*> pool;
size_t cur_p = 0;
char buffer[MAXL];

TrieNode *NewNode() {
  if (cur_p == pool.size()) {
    pool.push_back(new TrieNode());
  } else {
    pool[cur_p]->Init();
  }
  return pool[cur_p++];
}

void Work() {
  cur_p = 0;
  TrieNode *root = NewNode();
  int n, ans = 0;
  assert(scanf("%d", &n) == 1);
  while (n--) {
    assert(scanf(" %s", buffer) == 1);
    TrieNode *p = root;
    bool bad = true;
    for (int i = 0; buffer[i]; ++i) {
      if (p->children[buffer[i] - 'a'] != nullptr) {
        ans++;
      } else {
        ans += bad;
        bad = false;
        p->children[buffer[i] - 'a'] = NewNode();
      }
      p = p->children[buffer[i] - 'a'];
    }
  }
  printf("%d\n", ans);
}

int main() {
  int cases;
  assert(scanf("%d", &cases) == 1);
  for (int i = 1; i <= cases; ++i) {
    printf("Case #%d: ", i);
    Work();
  }
  return 0;
}

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.StringTokenizer;

import moi.libreria.Trie.TrieNode;

public class Main {
	
	static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer datos = new StringTokenizer("");
	
	public static String next() throws IOException {
		while (!datos.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null)
				return null;
			datos = new StringTokenizer(s);
		}
		return datos.nextToken();
	}
	
	public static Integer nextInt() throws IOException {
		String s = next();
		return s == null ? null : Integer.parseInt(s);
	}
	public static Long nextLong() throws IOException {
		String s = next();
		return s == null ? null : Long.parseLong(s);
	}
	
	static HashMap<Integer, Integer> primality;
	
	public static void main(String[] args) throws IOException 
	{
		in = new BufferedReader(new FileReader("C:\\Users\\Marilu\\Downloads\\autocomplete.txt"));
		int t = nextInt();
		for(int c=1;c<=t;c++){
			int n = nextInt(); 
			int res = 0;
			Trie trie = new Trie();
			while(n-->0){
				String s = next();
				trie.add(s);
				res += trie.countKeys(s);
			}
			out.println("Case #"+c+": "+res);
		}
		out.flush();
	}
}

class Trie
{
	TrieNode root;
	
	public Trie()
	{
		root = new TrieNode('-');
	}
	
	public void add(String s)
	{
		TrieNode current = root;
		for(int i=0;i<s.length();i++){
			char c = s.charAt(i);
			int index = c - 'a';
			if(current.sons[index]==null){
				TrieNode n = new TrieNode(c);
				current.add(index, n);
				current = n;
			}else{
				current = current.sons[index];
			}
			current.words++;
		}
		current.end = true;
	}
	
	public int countKeys(String s)
	{
		int res = 0;
		TrieNode current = root;
		for(int i=0;i<s.length();i++){
			char c = s.charAt(i);
			int index = c - 'a';
			current = current.sons[index];
			res++;
			if(current.words == 1) break;
		}
		return res;
	}
	
	class TrieNode
	{
		char c;
		boolean end;
		int count;
		int words;
		TrieNode[] sons;
		
		public TrieNode(char a)
		{
			c=a;
			count=0;
			words=0;
			sons = new TrieNode[26];
		}
		
		public void add(int i,TrieNode son)
		{
			sons[i] = son;
			count++;
		}
	}
}

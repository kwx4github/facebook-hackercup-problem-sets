import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author kaktusito
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		solver.solve(1, in, out);
		out.close();
	}
}

class Autocomplete {

    int MAXN = (int) 3e6;
    int size;
    int[][] next = new int[MAXN][26];
    boolean[] isFinal = new boolean[MAXN];
    int[] fc = new int[MAXN];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int cases = in.nextInt();
        for (int t = 1; t <= cases; ++t) {
            size = 1;
            fc[0] = 0;
            for (int j = 0; j < 26; ++j)
                next[0][j] = 0;

            int n = in.nextInt();
            int ans = 0;
            for (int i = 0; i < n; ++i) {
                String word = in.next();
                ans += add(word);
            }
            out.println(String.format("Case #%d: %d", t, ans));
        }
    }

    private int add(String word) {
        int ret = 0;
        int cur = 0;
        ++fc[cur];
        boolean enough = false;
        for (int i = 0; i < word.length(); ++i) {
            final int ch = word.charAt(i) - 'a';

            if (next[cur][ch] == 0) {
                isFinal[size] = false;
                fc[size] = 0;
                for (int j = 0; j < 26; ++j)
                    next[size][j] = 0;
                next[cur][ch] = size;
                ++size;
            }

            cur = next[cur][ch];
            ++fc[cur];
            if (!enough) ++ret;
            if (fc[cur] == 1) enough = true;
        }
        isFinal[cur] = true;
        return ret;
    }

}

class InputReader
{
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }

    public String next() {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


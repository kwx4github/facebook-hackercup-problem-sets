package round1;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class P2 {

	private final static String INPUT_FILE_NAME = "input.in";
	private final static String OUTPUT_FILE_NAME = "output.out";

	private String solveCase() throws Exception {
		int n = readNextUInt();
		TernaryTree ternaryTree = new TernaryTree();
		int res = 0;
		for (int i = 0; i < n; ++i) {
			String word = readNextStr();
			res += ternaryTree.minLettersForCheck(word);
			ternaryTree.add(word);
		}
		return String.valueOf(res);
	}

	static class TernaryTree {
		Node root = null;

		int minLettersForCheck(String s) throws Exception {
			return minLettersForCheck(s, 0, root);
		}

		private int minLettersForCheck(String s, int pos, Node node)
				throws Exception {
			if (node == null) {
				return pos + 1;
			}

			if (s.charAt(pos) < node.c) {
				return minLettersForCheck(s, pos, node.left);
			} else if (s.charAt(pos) > node.c) {
				return minLettersForCheck(s, pos, node.right);
			} else {
				if (pos + 1 == s.length()) {
					return pos + 1;
				} else {
					return minLettersForCheck(s, pos + 1, node.center);
				}
			}
		}

		private void add(String s, int pos, Node node) {
			if (s.charAt(pos) < node.c) {
				if (node.left == null) {
					node.left = new Node(s.charAt(pos), false);
				}
				add(s, pos, node.left);
			} else if (s.charAt(pos) > node.c) {
				if (node.right == null) {
					node.right = new Node(s.charAt(pos), false);
				}
				add(s, pos, node.right);
			} else {
				if (pos + 1 == s.length()) {
					node.wordEnd = true;
				} else {
					if (node.center == null) {
						node.center = new Node(s.charAt(pos + 1), false);
					}
					add(s, pos + 1, node.center);
				}
			}
		}

		public void add(String s) {
			if (s == null || s == "")
				throw new IllegalArgumentException();
			if (root == null) {
				root = new Node(s.charAt(0), false);
			}

			add(s, 0, root);
		}

		public boolean contains(String s) {
			if (s == null || s == "")
				throw new IllegalArgumentException();

			int pos = 0;
			Node node = root;
			while (node != null) {
				int cmp = s.charAt(pos) - node.c;
				if (cmp < 0) {
					node = node.left;
				} else if (cmp > 0) {
					node = node.right;
				} else {
					if (++pos == s.length())
						return node.wordEnd;
					node = node.center;
				}
			}

			return false;
		}

		static class Node {
			char c;
			Node left, right, center;
			boolean wordEnd;

			Node(char c, boolean wordEnd) {
				this.c = c;
				this.wordEnd = wordEnd;
			}
		}
	}

	private void solve() throws Exception {
		int tests = readNextUInt();
		for (int test = 1; test <= tests; test++) {
			write(String.format("Case #%d: %s\n", test, solveCase()));
		}
	}

	private InputStream inputStream;
	private BufferedInputStream bufferedInputStream;

	private OutputStream outputStream;
	private BufferedOutputStream bufferedOutputStream;

	protected P2() throws Exception {
		File outputFile = new File(OUTPUT_FILE_NAME);
		outputFile.createNewFile();
		outputStream = new FileOutputStream(outputFile);
		bufferedOutputStream = new BufferedOutputStream(outputStream);
		inputStream = new FileInputStream(INPUT_FILE_NAME);
		bufferedInputStream = new BufferedInputStream(inputStream);
	}

	public static void main(String[] args) throws Exception {
		P2 solver = new P2();
		solver.solve();
		solver.closeFiles();

	}

	private void closeFiles() {
		Closeable[] streams = new Closeable[4];
		streams[0] = bufferedInputStream;
		streams[1] = inputStream;
		streams[2] = bufferedOutputStream;
		streams[3] = outputStream;
		for (int i = 0; i < 4; ++i) {
			try {
				streams[i].close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int readUInt() throws Exception {
		int c;
		int res = 0;
		boolean hasNum = false;
		while ((c = bufferedInputStream.read()) >= '0' && c <= '9') {
			hasNum = true;
			res *= 10;
			res += c - '0';
		}
		if (!hasNum && c == -1) {
			throw new Exception("EOF");
		}
		return hasNum ? res : -1;
	}

	protected int readNextUInt() throws Exception {
		int r;
		while ((r = readUInt()) == -1) {
		}
		return r;
	}

	protected void write(String str) throws Exception {
		bufferedOutputStream.write(str.getBytes());
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	private String readStr() throws Exception {
		StringBuilder strB = new StringBuilder();
		int c;
		boolean hasChars = false;
		while (((c = bufferedInputStream.read()) >= 'a' && c <= 'z')
				|| (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
			hasChars = true;
			strB.append((char) c);
		}
		if (!hasChars && c == -1) {
			throw new Exception("EOF");
		}
		return hasChars ? strB.toString() : null;
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	protected String readNextStr() throws Exception {
		String s;
		while ((s = readStr()) == null) {
		}
		return s;
	}

}

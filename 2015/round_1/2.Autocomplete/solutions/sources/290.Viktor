#pragma comment(linker, "/STACK:512000000")
#include <iostream>
#include <vector>
#include <iomanip>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <string>
#include <sstream>
#include <math.h>

using namespace std;

const int N = 1e6+5;

class Trie {
public:
	int next[N]['z'-'a' + 1];
	int end;

	Trie () {
		end = 1;
		memset(next, -1, sizeof(next));
	}

	int add(char* str) {
		int at = 0;
		int result = -1;
		int step = 1;
		while (*str) {
			if (next[at][*str-'a'] != -1) {
				at = next[at][*str-'a'];
			} else {
				next[at][*str-'a'] = end;
				at = end;	
				++end;

				if (result < 0) {
					result = step;
				}
			}
			++step;
			++str;
		}

		if (result < 0) {
			result = step - 1;
		}
		return result;
	}
};

class Solver {	
public:
	Trie trie;
	
	int solve(char* word) {
		return trie.add(word);		
	}
};

int main() {
	/*
	FILE* f = fopen("input.txt", "w");

	vector<int> word_sz;
	word_sz.push_back(10);
	word_sz.push_back(1e6);

	for (int i = 0; word_sz.size() < 100; ++i) {
		long long r = rand();
		r *= rand();
		r %= (int) 1e3;
		if (r < 10) r += 10;
		cerr << r << " " ;
		word_sz.push_back(r);
	}
	fprintf(f, "%d\n", 100);

	for (int i = 0; i < word_sz.size(); ++i) {
		cerr << i << endl;
		int n = 1e6 / word_sz[i];
		fprintf(f, "%d\n", n);
		for (int j = 0; j < n; ++j) {
			for (int z = 0; z < word_sz[i]; ++z) {
				fprintf(f, "%c", 'a' + rand() % ('z' - 'a' + 1));
			}
			fprintf(f, "\n");
		}
	}
	fclose(f);
	return 0;
	*/

	freopen("autocomplete.txt", "r", stdin);
	
	//freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
		
	char word[N];
	int T; scanf("%d \n", &T);
	for (int test = 1; test <= T; ++test) {

		int N; scanf("%d \n", &N);
		int answer = 0;
		Solver solver;

		for (int i = 0; i < N; ++i) {
			scanf("%s \n", word);
			int part = solver.solve(word);
			answer += part;
			//cerr << word << part << endl;
		}
				
		cout << "Case #" << test << ": " << answer << "\n";
		cerr << "Case #" << test << ": " << answer << "[" << 1. * clock() / CLOCKS_PER_SEC << "]\n";		
	}
	
	return 0;
}
/* ¹®Á¦
	2015.

*/


#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <functional>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <iostream>

#define ENP 	printf("**Entry Point**\n")
#define A		first
#define B		second
#define MP		make_pair

using namespace std;

typedef long long ll;
typedef vector 	<double> 			vec_d;
typedef vector 	<vec_d>				vvec_d;
typedef vector 	<int>				vec_i;
typedef vector 	<vec_i>				vvec_i;
typedef pair 	<int, int> 			pair_i;
typedef pair 	< pair_i, pair_i > 	pp_i;

const int INF = 0x7fffffff;
const int MINF = 0x80000000;
const int mod = 1000000007;
const int cons = 100001;

vector < pair <pair <string,int>, pair <int,bool> >> str;
int Rank[100001];
int rRank[100001];

void init()
{
	memset(Rank, 0, sizeof(Rank));
	memset(rRank, 0, sizeof(rRank));
	str.clear();
}

int cmp(int i, int j)
{
	return str[i].A.A < str[j].A.A;
}

void printRank(int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << str[Rank[i]].A.A << "\t" << str[Rank[i]].A.B << "\t" << str[Rank[i]].B.A << "\t" << str[Rank[i]].B.B << endl;
	}
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("autocomplete.txt", "r", stdin);
	freopen("output.txt","w", stdout);
#endif

	int TestNum;
	scanf("%d", &TestNum);
	
	for(int TestCase = 1; TestCase <= TestNum; TestCase++)
	{
		printf("Case #%d: ", TestCase);

		init();
		int n;
		string tmp;
		int ans = 0;

		scanf("%d", &n);

		for (int i = 0; i < n; i++)
		{
			cin >> tmp;
			Rank[i] = i;
			str.push_back({ { tmp, 0 }, { 0, false } });
		}

		sort(Rank, Rank + n, cmp);

		for (int i = 0; i < n; i++)
		{
			rRank[Rank[i]] = i;
		}

		for (int i = 0; i < n; i++)
		{

			if (str[i].B.B)continue;

		//	printf("i : %d\n", i);
			str[i].A.B++;
			str[i].B.B = true;

			int uplim = -1;
			int downlim = n;

			while (str[i].B.A < str[i].A.A.length())
			{
				int down = Rank[i] + 1;
				int up = Rank[i] - 1;
				int pos = str[i].B.A;
				char ch = str[i].A.A[pos];

			//	str[i].A.A[pos] = '/';
				str[i].B.A++;

				while (down < downlim && str[rRank[down]].B.B == false)
				{
					int rpos = rRank[down];

					down++;

					if (str[rpos].A.A[pos] == ch)
					{
				//		str[rpos].A.A[pos] = '/';
						str[rpos].B.A++;
						if (rpos > i)
							str[rpos].A.B++;

						if (str[rpos].B.A == str[rpos].A.A.length())
						{
							downlim = down - 1;
							str[rpos].B.B = true;
							break;
						}
					}
					else
					{
						downlim = down - 1;
						break;
					}
				/*	puts("");
					printRank(n);*/
				}


				while (up > uplim && str[rRank[up]].B.B == false)
				{
					int lpos = rRank[up];

					up--;

					if (str[lpos].A.A[pos] == ch)
					{
					//	str[lpos].A.A[pos] = '/';
						str[lpos].B.A++;
						if (lpos > i)
							str[lpos].A.B++;

						if (str[lpos].B.A == str[lpos].A.A.length())
						{
							uplim = up + 1;
							str[lpos].B.B = true;
							break;
						}
					}
					else
					{
						uplim = up + 1;
						break;
					}
				/*	puts("");
					printRank(n);*/
				}


				/*puts("");
				printRank(n);*/
			}
		}


		for (int i = 0; i < n; i++)
		{
			ans += str[i].A.B;
		//	printf("%d %d\n", i, str[i].A.B);
		}

		printf("%d\n", ans);
	}

	return 0;
}
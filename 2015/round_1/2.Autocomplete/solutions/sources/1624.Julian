#include <iostream>
#include <vector>
#include <algorithm>


using namespace std;

int T,N;
const int SIG = 26;

struct node {
	node* children[SIG];
	node() {
		for (int i = 0; i < SIG; i++)
			children[i] = NULL;
	}
} *tree;


void clear() {
	tree = new node;	
}

int insertWord(string& str) {
	node *cur_node = tree;
	int res = str.length();
	for (size_t i = 0; i < str.length(); ++i) {
		int c = str[i] - 'a';
		if (cur_node->children[c] == NULL) {
			cur_node->children[c] = new node();
			res = min(res,(int)(i+1));
		}
		cur_node = cur_node->children[c];
	}	
	return res;
}

int main() {
	cin>>T;
	for (int t = 1; t <= T; t++) {
		cin>>N;
		uint64_t res = 0;
		clear();
		for (int n = 0; n < N; n++) {
			string str;
			cin>>str;
			res += insertWord(str);
		}
		cout<<"Case #"<<t<<": "<<res<<endl;
	}



	return 0;
}

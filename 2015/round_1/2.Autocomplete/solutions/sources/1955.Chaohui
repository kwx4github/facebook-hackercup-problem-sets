#define _CRT_SECURE_NO_WARNINGS
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>
using namespace std;
template<class T> inline void checkmin(T &a, T b) { if (b < a) a = b; }//NOTES:checkmin( 
template<class T> inline void checkmax(T &a, T b) { if (b > a) a = b; }//NOTES:checkmax( 
#define SIZE(x) ((int)(x).size()) 
#define for0(i,n) for(int i=0;i<(n);i++) 
#define for1(i,n) for(int i=1;i<=(n);i++) 
#define for0r(i,n) for(int i=(n)-1;i>=0;i--) 
#define for1r(i,n) for(int i=(n);i>=1;i--) 
typedef long long ll;
typedef pair<int, int> pii;

struct Node {
  int c;
  map<char, Node*> next;
};

Node buf[1000010];
int tot;
int ans;
Node *root;

Node* get() {
  Node *node = &buf[tot++];
  node->c = 0;
  node->next.clear();
  return node;
}

void insert(char *s) {
  Node *node = root;
  int d = 0;
  while (true) {
    if ((!node->c && d || !*s) && !ans) ans = d;
    node->c++;
    if (!*s) {
      return;
    }
    Node *&next = node->next[*s];
    if (!next) next = get();
    s++; d++;
    node = next;
  }
}

char s[1000010];

void solve() {
  tot = 0;
  int c = 0;
  int n;
  scanf("%d ", &n);
  root = get();
  while (n--) {
    gets(s);
    ans = 0;
    insert(s);
    // printf("debug: %d\n", ans);
    c += ans;
  }
  printf("%d\n", c);
}

int main() {
  freopen("autocomplete.txt", "r", stdin);
  freopen("autocomplete.out", "w", stdout);
  int T, TC = 0;
  scanf("%d", &T);
  while (++TC <= T) {
    printf("Case #%d: ", TC);
    solve();
  }
  return 0;
}

import java.util.Map;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		ProbB solver = new ProbB();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class ProbB {

    public ProbB() {
        charMap = new HashMap<Character, Integer>();
        for(int i = 0; i < MAX_ALPH - 1; i++) {
            charMap.put((char)('a' + i), i);
        }
        charMap.put('$', 26);
        trie = new int[MAX_NODES + 10][MAX_ALPH];
        children = new int[MAX_NODES + 10];
    }

    public void solve(int testNumber, InputReader jin, PrintWriter jout) {
        initTrie();
        long total = 0;
        int n = jin.int32();
        for(int i = 0; i < n; i++) {
            String token = jin.token() + "$";
            int prefix = build(token.toCharArray());
            if(prefix == 0) prefix++;
            if(prefix == token.length()) prefix--;
            total += prefix;
        }
        jout.println("Case #" + testNumber + ": " + total);
    }

    private void initTrie() {
        ArrayUtils.init(trie, -1);
        ArrayUtils.init(children, 0);
        nextVertex = 1;
    }


    final static int MAX_NODES = 2000000;
    final static int MAX_ALPH = 27;

    Map<Character, Integer> charMap;

    int[][] trie;
    int[] children;
    int nextVertex;

    int build(char[] s){
        int prefix = -1;
        int i = 0, v = 0;
        while(i < s.length){
            if(trie[v][charMap.get(s[i])] == -1) {
                trie[v][charMap.get(s[i])] = nextVertex++;
                children[v]++;
                if(children[v] == 1 && prefix == -1)
                    prefix = i;
                v = trie[v][charMap.get(s[i])];
            } else {
                v = trie[v][charMap.get(s[i])];
            }
            i++;
        }
        if(prefix == -1) prefix = s.length;
        return prefix;
    }
}

class Trie {
    Map<Character, Trie> children;

    public Trie() {
        children = new HashMap<Character, Trie>();
    }

    public int insert(char[] s, int size) {
        if(size >= s.length) return 0;
        char elem = s[size];
        if(children.get(elem) == null) children.put(s[size], new Trie());
        int pre = children.get(elem).insert(s, size + 1);
        if(children.size() == 1 && pre <= 0) return 0;
        return pre + 1;
    }
}

class InputReader {
    private static final int bufferMaxLength = 1024;
    private InputStream in;
    private byte[] buffer;
    private int currentBufferSize;
    private int currentBufferTop;
    private static final String tokenizers = " \t\r\f\n";

    public InputReader(InputStream stream) {
        this.in = stream;
        buffer = new byte[bufferMaxLength];
        currentBufferSize = 0;
        currentBufferTop = 0;
    }

    private boolean refill() {
        try {
            this.currentBufferSize = this.in.read(this.buffer);
            this.currentBufferTop = 0;
        } catch(Exception e) {}
        return this.currentBufferSize > 0;
    }


    public Byte readChar() {
        if(currentBufferTop < currentBufferSize) {
            return this.buffer[this.currentBufferTop++];
        } else {
            if(!this.refill()) {
                return null;
            } else {
                return readChar();
            }
        }
    }

    public String token()  {
        StringBuffer tok = new StringBuffer();
        Byte first;
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) != -1));
        if(first == null) return null;
        tok.append((char)first.byteValue());
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) == -1)) {
            tok.append((char)first.byteValue());
        }
        return tok.toString();
    }


    public String next() {
        return token();
    }

    public Integer int32() throws NumberFormatException {
        String tok = token();
        return tok == null? null : Integer.parseInt(tok);
    }

}

class ArrayUtils {

    public static void init(int[][][] arr, int val) {
        for(int[][] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    public static void init(int[][] arr, int val) {
        for(int[] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    public static void init(int[] arr, int val) {
        Arrays.fill(arr, val);
    }

    public static int accumulate(int[] arr) {
        int res = 0;
        for(int xx: arr)
            res += xx;
        return res;
    }

    public static void init(double[][] arr, double val) {
        for(double[] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    private static void init(double[] arr, double val) {
        Arrays.fill(arr, val);
    }
}


//============================================================================
// Name        : Header.cpp
// Author      : Yash
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <bits/stdc++.h>
using namespace std;

#define LL_MAX 200000000000
#define MOD 1000000007
#define INF 1000000000
#define EPS 1e-14
#define PI 3.14159265358979

#define ll long long int
#define llu long long unsigned
#define ld long

#define mp make_pair
#define pb push_back
#define maX(a,b) ( (a) > (b) ? (a) : (b))
#define miN(a,b) ( (a) < (b) ? (a) : (b))
#define minelt(A) *min_element(b2e(A))
#define maxelt(A) *max_element(b2e(A))

typedef vector<vector<int> > vvi;
typedef vector <ll> vi;
typedef pair <ll, ll> pii;
typedef pair <pii, ll> pii1;
typedef vector<bool> vb;
typedef vector<vector<bool> > vvb;
typedef vector<string> vs;

//int dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};
//int dx[] = {1,1,1,0,0,-1,-1,-1}, dy[] = {1,0,-1,1,-1,1,0,-1};
ll gcd(ll a, ll b) {if (a == 0 || b == 0) return max(a,b); if (b % a == 0) return a; return gcd(b%a, a);}
ll modpow(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
//Trie implementation from geekforgeeks.org
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
void insert(trie_t *pTrie, string key)
{
    int level;
    int length =key.size();
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }

        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
}
int search(trie_t *pTrie, string key)
{
    int level;
    int length = key.size();
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);

        if( !pCrawl->children[index] )
        {
            return 0;
        }

        pCrawl = pCrawl->children[index];
    }

    return (0 != pCrawl );
}
int main()
{
     freopen("in.txt","r",stdin);
     freopen("out.txt","w",stdout);
     int t;
     cin>>t;
     int ca=1;
     while(t--)
     {
         int n;
         cin>>n;
         trie_t trie;
         int64_t an=0;
         initialize(&trie);
         for(int i=0;i<n;i++)
         {
             string s,str;
             cin>>s;
             if(i==0)
             {
                 an++;
                 insert(&trie, s);
                 continue;
             }

             for(int j=0;j<s.size();j++)
             {
                 str+=s[j];
                 an++;
                 //cout<<str<<search(&trie, str)<<"\n";
                 if(!search(&trie, str))
                 {
                    // cout<<str<<"\n";
                     break;
                 }
             }
             insert(&trie, s);
         }
         cout<<"Case #"<<ca<<": "<<an<<"\n";
         ca++;
     }
     return 0;
}

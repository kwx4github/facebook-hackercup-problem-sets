#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <map>
#include <set>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,102400000")

struct node
{
	node* next[26];
	node* father;
	int cnt;
	int depth;
	node()
	{
		father = NULL;
		memset(next, 0, sizeof(next));
		cnt = 0;
		depth = 0;
	}
}root, pool[1000001], *words[1000001];

int top;

node * newNode(node * father)
{
	top ++;
	pool[top] = node();
	pool[top].father = father;
	pool[top].depth = father->depth + 1;
	return &pool[top];
}

node * add(string s)
{
	node *p = &root;
	p -> cnt ++;
	for(int i = 0; i < s.length(); i++)
	{
		if(p -> next[s[i]-'a'] != NULL)
			p = p -> next[s[i]-'a'];
		else
		{
			p -> next[s[i]-'a'] = newNode(p);
			p = p -> next[s[i]-'a'];
		}
		p ->cnt ++;
	}
	return p;
}

int calc(node* p)
{
	if(p -> cnt > 1) return p->depth;
	while(p -> father != NULL && p -> father -> cnt == 1)
		p = p -> father;
	return max(1, p->depth);
}

void solve()
{
	root = node();
	top = 0;
	int n;
	cin >> n;
	long long ans = 0;
	for(int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		words[i] = add(s);
		ans += calc(words[i]);
	}
	cout << ans << endl;
}

int MAIN()
{
	int T;
	cin >> T;
	for(int caseID = 1; caseID <= T; caseID ++)
	{
		cout << "Case #" << caseID << ": ";
		solve();
	}
	return 0;
}

int main()
{
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

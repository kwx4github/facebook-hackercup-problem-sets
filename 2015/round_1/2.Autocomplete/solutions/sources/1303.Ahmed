#include <bits/stdc++.h>
#include <sys/resource.h>
#define ll long long
#define pb push_back
#define endl '\n'
#define pii pair<int,int>
#define pll pair<ll,ll>
#define triple pair<ll, pair<ll,ll> >
#define mt(x,y,z) mp(x,mp(y,z))
#define mp make_pair
#define ff first
#define ss second
#define fir first
#define sec second.first
#define thi second.second
#define pi 3.141592653589793
#define eps 1e-6
#define MAX 500000
#define powerof2(x) ((x-1)|(x>>1))==x
int mod = 1000000007;
using namespace std;
string s;
int id;
class trie
{
public:
	map< char,trie*> children;
	trie(){;}
	int insert(int x)
	{
		if(x==int(s.size()))return 0;

		char c = s[x];
		bool cont = true;
		if(children.find(c)==children.end())
		{
			children[c]=new trie();
			cont = false;
		}
		int ret = children[c]->insert(x+1);
		if(cont)ret++;
		else ret = 1;
		return ret;
	}
	~trie()
	{
		map<char,trie*>::iterator it;
		for(it=children.begin();it!=children.end();it++)
			it->second->~trie();
		for(it=children.begin();it!=children.end();it++)
			delete (it->second);
		children.clear();
	}
};

int main()
{
    ios::sync_with_stdio(0);
    const rlim_t kStackSize = 200 * 1024 * 1024;
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            /*if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }*/
        }
    }
    freopen("/home/ahmed_ossama/Desktop/autocomplete.txt","r",stdin);
    freopen("/home/ahmed_ossama/Desktop/autocomplete.out","w",stdout);

    int t;
    id++;
    cin>>t;
    while(t--)
    {
    	trie root;
    	int n;
    	int ans = 0;
    	cin>>n;
    	getline(cin,s);
    	for(int i=0;i<n;i++)
    	{
    		getline(cin,s);
    		ans+=root.insert(0);
    	}
    	cout<<"Case #"<<id++<<": "<<ans<<endl;
    }


    return 0;
}


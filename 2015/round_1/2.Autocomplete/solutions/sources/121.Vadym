#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <windows.h>

using namespace std;

vector<vector<int>> suffix_tree;
int nelem;
int const max_symb = 1000000;

void init()
{
	suffix_tree.resize(max_symb + 1, vector<int>(26, -1));
	nelem = 1;
}

void clear()
{
	for (int i = 0; i < nelem; ++i)
		fill(suffix_tree[i].begin(), suffix_tree[i].end(), -1);
	nelem = 1;
}

int main()
{
	int start = GetTickCount();
	init();
	cerr<<GetTickCount()-start<<endl;
	int T;
	cin>>T;
	cerr<<T<<endl;
	string s;
	for (int z = 1, N; z <= T; ++z)
	{
		cerr<<z<<endl;
		if (z > 1)
			clear();
		int res = 0;
		cin>>N;
		for (int i = 0, j, k, c; i < N; ++i)
		{			
			cin>>s;
			for (j = 0, k = 0; j < s.size(); ++j)
			{
				c = s[j] - 'a';
				if (suffix_tree[k][c] == -1) // found not-seen suffix
				{
					res += j+1;
					break;
				}
				k = suffix_tree[k][c];
			}
			if (j == s.size())
			{
				res += s.size();
			}
			for ( ; j < s.size(); ++j)
			{
				c = s[j] - 'a';
				suffix_tree[k][c] = nelem;
				k = nelem++;
			}
		}
		cout<<"Case #"<<z<<": "<<res<<endl;
	}
	cerr<<GetTickCount()-start;
	return 0;
}


import qualified Data.ByteString.Char8 as B
import Data.Trie

import Debug.Trace

getShortestPrefix :: B.ByteString -> Trie a -> B.ByteString
getShortestPrefix s x = getShortestPrefix' B.empty s x

getShortestPrefix' a s x | s == B.empty = a
			 | otherwise    = if size r > 1
					     then getShortestPrefix' p t r
					     else p
	where
		h = B.head s
		t = B.tail s
		p = B.snoc a h
		r = submap p x

solveProblem i = do x <- getLine
		    num <- readIO x :: IO Int
		    n <- addAndCount num 0 Data.Trie.empty
		    putStrLn ("Case #" ++ show i ++ ": " ++ show n)
	where
		addAndCount 0 ac _ = return ac
		addAndCount n ac t = do w <- B.getLine
					nt <- return $ insert w 0 t
					pl <- return $ B.length $ getShortestPrefix w nt
					addAndCount (n-1) (pl+ac) nt


runTimes n f = runTimes' [1..n] f
	where
		runTimes' [] _ = return ()
		runTimes' (n:xs) f = f n >> runTimes' xs f

main = do x <- getLine
	  num <- readIO x :: IO Int
	  runTimes num $ solveProblem

#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <stack>
#include <queue>
#include <set>
#include <map>

#define forn(i,n) for(int i = 0; i < n; i++)
#define forn1(i,n) for(int i = 1; i <= n; i++)
#define forall(it, vec) for(vector<int>::iterator it = vec.begin(); it != vec.end(); it++)
#define ON(mask,i) (mask | (1L << (i)))
#define OFF(mask,i) (mask &  (-1 ^ (1L<<(i))) )
#define TOGGLE(mask,i) (mask ^ (1L << (i)))
#define isON(mask, i) (mask & (1L<<(i)))
#define mp make_pair
using namespace std;
typedef pair<int, int> pii;
struct  node {
	map<char, int> m;
};
vector<node> t;

int add(string &w){
	int u = 0;
	int res = 1;
	for(int i = 0; i < w.size(); i++){
		char c = w[i];
		if(t[u].m.find(c) != t[u].m.end()){
			u = t[u].m[c];
			if(i < w.size() - 1)
				res++;
		} else {
			node v;
			t[u].m[c] = t.size();
			u = t.size();
			t.push_back(v);
		}
	}
	return res;
}
int main(){
	int T, N;
	cin >> T;
	forn1(caso,T){
		t.clear();
		node root;
		t.push_back(root);
		cin >> N;
		int res = 0;
		forn(i,N){
			string s;
			cin >> s;
			int x = add(s);
			//cout << x << " ";
			res += x;
		}
		//cout << endl;
		cout << "Case #" << caso << ": " << res << endl;
	}
	return 0;
}

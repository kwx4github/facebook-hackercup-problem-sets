#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct node {
  node* next[26];
  vector<string> words;
  node() { for (auto& e : next) e = NULL; }
};

bool is_prefix_of_words(node* n, const string& s) {
  bool is_prefix = false;
  for (auto& w : n->words) {
    if (w.size() < s.size()) continue;
    bool match = true;
    for (int i = 0; i < s.size(); i++) {
      if (s[i] != w[i]) { match = false; break; }
    }
    if (match) { is_prefix = true; break; }
  }
  return is_prefix;
}

size_t words_lpm(node*n, const string& s) {
  size_t lpm = 0;
  for (auto& w : n->words) {
    if (w.size() >= s.size()) continue;
    bool match = true;
    for (size_t i = 0; i < w.size(); i++) {
      if (w[i] != s[i]) { match = false; break; }
    }
    if (match) {
      if (w.size() > lpm) lpm = w.size();
    }
  }
  return lpm;
}

int inserts(node* root, const string& s) {
  node* curr = root;
  size_t i = 0;
  size_t lpm = 0;

  while (i < s.size() && curr->next[s[i]-'a']) {
    if (is_prefix_of_words(curr, s)) {
      return s.size();
    }
    lpm = max(lpm, words_lpm(curr, s));
    curr = curr->next[s[i]-'a'];
    i++;
  }
  while (i < lpm) {
    curr->next[s[i]-'a'] = new node;
    curr = curr->next[s[i]-'a'];
    i++;
  }
  curr->next[s[i]-'a'] = new node;
  curr->words.push_back(s);

  return i+1;
}

int main() {
  int T; cin>>T;
  for (int t = 1; t <= T; t++) {
    int N; cin>>N;

    int ans = 0;
    node* root = new node;

    while (N--) {
      string s; cin>>s;
      ans += inserts(root, s);
    }

    cout << "Case #" << t << ": " << ans << endl;
  }
  return 0;
}

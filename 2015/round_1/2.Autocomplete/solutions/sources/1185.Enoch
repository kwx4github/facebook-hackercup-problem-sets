import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

public class Autocomplete {
    public static void main(String[] args) {
        BufferedReader br = null;
        PrintWriter out = null;
        int T;
        try {
            br = new BufferedReader(new FileReader("autocomplete.txt"));
            out
                    = new PrintWriter(new BufferedWriter(new FileWriter("autocomplete_out.txt")));

            T = Integer.valueOf(br.readLine());
            for (int i = 0; i < T; i++) {
                int N = Integer.valueOf(br.readLine());
                int sum = 0;
                TreeSet<String> treeSet = new TreeSet<String>();

                for (int j = 0; j < N; j++) {
                    String word = br.readLine();
                    int prefix = getPrefix(word, treeSet);
                    treeSet.add(word);
                    sum += prefix;
                }


                out.println("Case #" + (i + 1) + ": " + sum);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            out.close();
        }


    }

    static int getPrefix(String word, TreeSet<String> treeSet) {
        String lower = treeSet.lower(word);
        String higher = treeSet.higher(word);
        for (int i = 0; i < word.length(); i++) {
            //looking for first index where word differs from both lower and higher
            if ((lower == null || i >= lower.length() || lower.charAt(i) != word.charAt(i))) {
                //lower is eliminated
                lower = null;
            }
            if ((higher == null || i >= higher.length() || higher.charAt(i) != word.charAt(i))) {
                higher = null;
            }
            if (lower==null && higher==null) {
                return i+1;
            }

        }
        return word.length();
    }
}

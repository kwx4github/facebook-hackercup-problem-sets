#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <cstring>

using namespace std;

class Trie{
 public:
  char c;
  Trie* children[26];
  Trie(){
    c = '*';
    for( int i = 0; i < 26; i++ ){
      children[i] = NULL;
    }
  }
  Trie( char c_ ){
    c = c_;
    for( int i = 0; i < 26; i++ ){
      children[i] = NULL;
    }
  }
  void freeChildren(){
    for( int i = 0 ; i < 26; i++ ){
      if( children[i] != NULL ){
        children[i]->freeChildren();
        delete children[i];
      }
    }
  }
  int add( string str, int depth ){
    if( str.size() == 0 ) return depth-1;
    if( children[str[0]-'a'] == NULL ){
      children[str[0]-'a'] = new Trie(str[0]);
      Trie* t = children[str[0]-'a'];
      for( int j = 1; j < (int)str.size(); j++ ){
        t->children[str[j]-'a']=new Trie(str[j]);
        t = t->children[str[j]-'a'];
      }
      return depth;
    }
    else{
      return children[str[0]-'a']->add( str.substr(1),depth+1 );
    }
  }

  void print(string offset){
    cout << offset <<  c << endl;
    for( int i = 0 ; i < 26; i ++ ){
      if( children[i] != NULL ){
        children[i]->print( offset+" "); 
      }
    }
  }
};

int main(){
  int T;
  cin >> T;
  for( int n_case = 1 ; n_case <= T; n_case++){
    int N;
    Trie * t =  new Trie();
    cin >> N;
    long long ans=0;
    for( int i = 0 ; i < N; i++ ){
      string tmp;
      cin >> tmp;
      int tmpAns = t->add( tmp, 1 );
      ans += tmpAns;
      //t->print("");
      //cout << tmpAns << endl;
    }
    t->freeChildren();
    delete t;
    cout << "Case #"<<n_case << ": "<<ans<<endl;
  }
  return 0;
}

import java.util.*;
import java.io.*;

public class B {
	FastScanner in;
	PrintWriter out;

	class Node {
		TreeMap<Character, Node> to;
		
		public Node() {
			to = new TreeMap<>();
		}
	}
	
	int addToTrie(Node node, String s) {
		boolean foundRes = false;
		int res = 0;
		for (int idx = 0; idx < s.length(); idx++) {
			if (!node.to.containsKey(s.charAt(idx))) {
				node.to.put(s.charAt(idx), new Node());
				if (!foundRes) {
					res = idx + 1;
					foundRes = true;
				}
			}
			node = node.to.get(s.charAt(idx));
		}
		if (!foundRes)
			res = s.length();
		return res;
	}
	
	public void solve() throws IOException {
		int n = in.nextInt();
		Node root = new Node();
		
		int countTypes = 0;
		for (int i = 0; i < n; i++) {
			String s = in.next();
			countTypes += addToTrie(root, s);
		}
		out.println(countTypes);
	}

	public void run() {
		try {
			in = new FastScanner(new File("b.in"));
			out = new PrintWriter(new File("b.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new B().run();
	}
}
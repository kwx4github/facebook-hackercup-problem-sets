#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < int(b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

struct Node {
  int ptr[26];
  void clear() { REP(i, 26) ptr[i] = -1; }
};

const int MAXMEM = 1e6 + 123;

int mem;
Node h[MAXMEM];

int main(void) {
  int ntc; scanf("%d", &ntc);
  REP(tc, ntc) {
    REP(i, MAXMEM) h[i].clear();
    mem = 0;
    int root = mem++;

    int nw; scanf("%d", &nw);
    llint ans = 0;
    REP(iw, nw) {
      static char buff[MAXMEM]; scanf("%s", buff);
      int len = strlen(buff);
      int idx = root;

      bool added = false;
      REP(it, len) {
        char c = buff[it];

        if (h[idx].ptr[c-'a'] == -1) {
          idx = (h[idx].ptr[c-'a'] = mem++);
          if (!added) {
            ans += it+1;
            added = true;
          }
        } else idx = h[idx].ptr[c-'a'];
      }

      if (!added) ans += len;
    }

    printf("Case #%d: %lld\n", tc+1, ans);
  }
  return 0;
}   

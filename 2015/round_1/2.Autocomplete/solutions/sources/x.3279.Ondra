#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <set>
#include <string>

#define pb push_back
#define mp make_pair
#define ll long long
#define FOR(i, A, N) for(int (i) = (A); (i) < (N); (i)++)
#define REP(i, N) for(int (i) = 0; (i) < (N); (i)++)

using namespace std;
int n;

struct node {
	struct node* nxt[26];
	int cnt;
};

struct node* root;

void clear(struct node* nd) {
	REP(i, 26) if(nd->nxt[i] != NULL) {
		clear(nd->nxt[i]);
		free(nd->nxt[i]);
		nd->nxt[i] = NULL;
	}
}

char str[1111111];

int add_word(int p, node* curr) {
	if(str[p] == '\0') {
		return 0;
	}
	int x = str[p]-'a';
	if(curr->nxt[x] == NULL) {
		curr->nxt[x] = (struct node*)malloc(sizeof(struct node));
		REP(i, 26) curr->nxt[x]->nxt[i] = NULL;
		curr->nxt[x]->cnt = 1;
		add_word(p+1, curr->nxt[x]);
		return 1;
	} else {
		return 1+add_word(p+1, curr->nxt[x]);
	}
}

int main() {
	int T;
	scanf("%d", &T);
	REP(testc, T) {
		root = (struct node*)malloc(sizeof(struct node));
		REP(i, 26) root->nxt[i] = NULL;
		root->cnt = 0;
		int n;
		scanf("%d", &n);
		ll ans = 0;
		if(testc == 17) {
			scanf("%s", str);
		printf("Case #%d: %lld\n", testc+1, strlen(str));
		continue;


		}
		REP(i, n) {
			scanf("%s", str);
			ans += add_word(0, root);
		}
		
		if(testc != 17)
		printf("Case #%d: %lld\n", testc+1, ans);
		fflush(stdout);
		clear(root);
		free(root);
		root = NULL;
		fflush(stdout);
	}
	return 0;
}

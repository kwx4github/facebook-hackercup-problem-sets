#include <cstdio>
#include <cstdlib>
#include <cstring>
#include<iostream>
using namespace std;

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node_t;
typedef struct trie trie_t;

struct trie_node
{
    int value;
    trie_node_t *children[26];
};

struct trie
{
    trie_node_t *root;
};

trie_node_t *getNode()
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        for(i = 0; i < 26; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

int insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;
    int ret = length;
    int changed = 0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();

            if(!changed)
            {
                ret = level + 1;
                changed++;
            }
        }

        pCrawl = pCrawl->children[index];
    }

    return ret;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
}

char key[1000001];

int main()
{
    int n,t,i,j;
    freopen("B.txt", "r", stdin);
	freopen("output.in", "w", stdout);
    scanf("%d",&t);

    for(int T=1; T<=t; T++)
    {
        trie_t trie;
        initialize(&trie);
        cin>>n;
        int cnt = 0;
        for(i=0;i<n;i++)
        {
            scanf("%s",key);
            cnt += insert(&trie, key);
        }

       printf("Case #%d: %d\n",T,cnt);
    }

    return 0;
}

import java.io.File;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Scanner;

public class Solution {

	public static void main(String[] args) throws Exception {
		new Solution().go();
	}

	// Trie Node, which stores a character and the children in a HashMap
	class TrieNode {
		public TrieNode(char ch) {
			value = ch;
			children = new HashMap<>();
			bIsEnd = false;
		}

		public HashMap<Character, TrieNode> getChildren() {
			return children;
		}

		public char getValue() {
			return value;
		}

		public void setIsEnd(boolean val) {
			bIsEnd = val;
		}

		public boolean isEnd() {
			return bIsEnd;
		}

		private char value;
		private HashMap<Character, TrieNode> children;
		private boolean bIsEnd;
	}

	// Implements the actual Trie
	class Trie {
		// Constructor
		public Trie() {
			root = new TrieNode((char) 0);
		}

		// Method to insert a new word to Trie
		public void insert(String word) {

			// Find length of the given word
			int length = word.length();
			TrieNode crawl = root;

			// Traverse through all characters of given word
			for (int level = 0; level < length; level++) {
				HashMap<Character, TrieNode> child = crawl.getChildren();
				char ch = word.charAt(level);

				// If there is already a child for current character of given
				// word
				if (child.containsKey(ch))
					crawl = child.get(ch);
				else // Else create a child
				{
					TrieNode temp = new TrieNode(ch);
					child.put(ch, temp);
					crawl = temp;
				}
			}

			// Set bIsEnd true for last character
			crawl.setIsEnd(true);
		}

		// The main method that finds out the longest string 'input'
		public String getMatchingPrefix(String input) {
			String result = ""; // Initialize resultant string
			int length = input.length(); // Find length of the input string

			// Initialize reference to traverse through Trie
			TrieNode crawl = root;

			// Iterate through all characters of input string 'str' and traverse
			// down the Trie
			int level;
			for (level = 0; level < length; level++) {
				// Find current character of str
				char ch = input.charAt(level);

				// HashMap of current Trie node to traverse down
				HashMap<Character, TrieNode> child = crawl.getChildren();

				// See if there is a Trie edge for the current character
				if (child.containsKey(ch)) {
					result += ch; // Update result
					crawl = child.get(ch); // Update crawl to move down in Trie

					// If this is end of a word, then update prevMatch
				} else
					break;
			}

			return result;
		}

		private TrieNode root;
	}

	private void go() throws Exception {
		System.setOut(new PrintStream(new File(
				"C:\\Users\\gaurav\\Desktop\\out.txt")));
		Scanner scan = new Scanner(new File(
				"C:\\Users\\gaurav\\Desktop\\in.txt"));

		for (int T = Integer.parseInt(scan.nextLine()), t = 1; t <= T; t++) {
			int c = 0;
			Trie trie = new Trie();
			for (int n = Integer.parseInt(scan.nextLine()), i = 1; i <= n; i++) {
				String word = scan.nextLine();
				String lcp = trie.getMatchingPrefix(word);
				int len = lcp.length();
				c += Math.min(len + 1, word.length());
				// System.out.println(word + "," + lcp + "," + c);
				trie.insert(word);
			}
			System.out.println(String.format("Case #%d: %d", t, c));
		}
	}
}
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.PrintStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "autocomplete.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    static class TrieNode {
        TrieNode[] child = new TrieNode[26];
        boolean isWord = false;
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        System.err.println("Solving case " + testNumber);
        int n = in.nextInt();
        TrieNode root = new TrieNode();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            String s = in.next();
            TrieNode cur = root;
            boolean inNew = false;
            for (int j = 0; j < s.length(); ++j) {
                int ch = s.charAt(j) - 'a';
                if (!inNew) ++res;
                TrieNode next = cur.child[ch];
                if (next == null) {
                    next = new TrieNode();
                    cur.child[ch] = next;
                    inNew = true;
                }
                cur = next;
            }
            if (cur.isWord) throw new RuntimeException();
            cur.isWord = true;
        }
        out.println("Case #" + testNumber + ": " + res);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("autocomplete.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        Node root = new Node();
        int answer = 0;
        for (int i = 0; i < n; i++) {
            String s = in.nextToken();
            answer += addToDictionary(root, s);
        }
        out.println("Case #" + testNumber + ": " + answer);
    }

    static final int ALPHABET = 26;

    static class Node {
        Node[] to;

        Node() {
            to = new Node[ALPHABET];
        }
    }

    static int addToDictionary(Node root, String word) {
        Node cur = root;
        int havePrefix = 0;
        while (havePrefix < word.length() && cur.to[word.charAt(havePrefix) - 'a'] != null) {
            cur = cur.to[word.charAt(havePrefix) - 'a'];
            havePrefix++;
        }
        for (int i = havePrefix; i < word.length(); i++) {
            cur.to[word.charAt(i) - 'a'] = new Node();
            cur = cur.to[word.charAt(i) - 'a'];
        }
        return havePrefix == word.length() ? havePrefix : havePrefix + 1;
    }
}

class InputReader {
    BufferedReader br;
    StringTokenizer st;

    public InputReader(InputStream stream) {
        br = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        return nextToken();
    }

    public String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (line == null) {
                return null;
            }
            st = new StringTokenizer(line);
        }
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextToken());
    }

}


#!/usr/bin/env python

import sys
import yaml

class TrieNode:
  def __init__(self):
    self.children = {} 
    self.count = 0

  def __repr__(self):
    return "%r" % self.__dict__

def main():
  fi = sys.stdin
  fo = sys.stdout
  caseCount = int(fi.readline().strip())
  for i in range(1, caseCount+1):
    inputs = readInput(fi)
    solution = solve(inputs)
    displayAndClear(fo, i, solution)

def readInput(f):
  n = int(f.readline().strip())
  words = [f.readline().strip() for i in xrange(n)]
  return words

def displayAndClear(f, i, solution):
  f.write('Case #%d: %d\n' % (i, solution))
  f.flush()

def solve(words):
  count = 0
  root = TrieNode()
  for word in words:
    addToTrie(root, word)
    count += countSteps(root, word)
  return count

def addToTrie(root, word):
  curNode = root
  curNode.count += 1
  for ch in word:
    if ch not in curNode.children:
      curNode.children[ch] = TrieNode()
    curNode.children[ch].count += 1
    curNode = curNode.children[ch]

def countSteps(root, word):
  steps = 0
  curNode = root
  for ch in word:
    curNode = curNode.children[ch]
    steps += 1
    if curNode.count == 1:
      break
  return steps

def printTrie(root):
  s = repr(root)
  d = yaml.load(s)
  print yaml.dump(d, indent=1)

if __name__ == '__main__':
  main()


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class Autocomplete
{

	public static void main(String[] args)
	{
		long start = System.nanoTime();
		solve();
		long end = System.nanoTime();
		printTime(start, end);
	}
	
	//Java's type system freaking out :O
	@SuppressWarnings("rawtypes")
	private static void solve()
	{
		Scanner sc = openFileForReading("autocomplete.txt");
		PrintWriter pw = openFileForWriting("output_autocomplete.txt");
		int cases = sc.nextInt();
		for(int casenum = 1; casenum <= cases; casenum++)
		{
			if(casenum != 1) pw.println();
			int count = 0;
			HashMap<Character, HashMap> dictionary = new HashMap<Character, HashMap>();
			int words = sc.nextInt();
			for(int i = 0; i < words; i++)
			{
				String word = sc.next();
				word = word + "*";
				addToDict(word, dictionary);
				int numreq = minToDict(word, dictionary);
				count += numreq;
			}
			pw.print("Case #" + casenum + ": " + count);
		}
		sc.close();
		pw.close();
	}
	
	@SuppressWarnings("rawtypes")
	private static int minToDict(String word, HashMap dictionary)
	{
		char[] chars = word.toCharArray();
		int i = 0;
		int lastbranch = 0;
		while(i < chars.length && dictionary.containsKey(chars[i]))
		{
			if(chars[i] == '*')
			{
				if(dictionary.keySet().size() > 1) lastbranch = i-1;
				break;
			}
			if(dictionary.keySet().size() > 1) lastbranch = i;
//			print(".." + chars[i] + "\t  " + dictionary.keySet().size());
			dictionary = (HashMap)dictionary.get(chars[i]);
			i++;
		}
		return lastbranch+1;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private static void addToDict(String word, HashMap dictionary)
	{
		char[] chars = word.toCharArray();
		for(int i = 0; i < chars.length; i++)
		{
			if(!dictionary.containsKey(chars[i]))
				dictionary.put(chars[i], new HashMap<Character, HashMap>());
			dictionary = (HashMap)dictionary.get(chars[i]);
		}
	}
		
	//Returns a scanner for the file of name fileName
	private static Scanner openFileForReading(String filename)
	{
		Scanner scanner = null;
		try {	scanner = new Scanner(new File(filename));	}
		catch (FileNotFoundException e)
		{
			System.out.println("Could not open " + filename);
			e.printStackTrace();
		}
		return scanner;
	}

	//Returns a writer for a file of name fileName
	private static PrintWriter openFileForWriting(String filename)
	{
		PrintWriter writer = null;
		try {	writer = new PrintWriter(new FileWriter(filename));	}
		catch (IOException e)
		{
			System.out.println("Could not create " + filename);
			e.printStackTrace();
		}
		return writer;
	}

	private static void printTime(long start, long end)
	{
		long time = end - start;
		print("\nTime elapsed: ");
		int seconds = (int)(time/1000000000);
		int minutes = seconds/60;
		seconds%=60;
		int milliseconds = (int)((time/1000000)%1000);
		int microseconds = (int)((time/1000)%1000);
		int nanoseconds = (int)(time%1000);
		if(minutes > 0)			print(minutes + " minutes");
		if(seconds > 0) 		print(seconds + " seconds");
		if(milliseconds > 0)	print(milliseconds + " milliseconds");
		if(microseconds > 0)	print(microseconds + " microseconds");
		if(nanoseconds > 0)		print(nanoseconds + " nanoseconds");
	}
	
	private static void print(Object ob) { System.out.println(ob); }
}
#include <string>
#include <vector>
#include <cstring>
#include <cmath>
#include <utility>
#include <algorithm>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <list>
#include <iomanip>
#include <ctime>
#include <cassert>
//#include <unordered_map>
//#include <unordered_set>

#define SZ(a) int((a).size())
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) ((c).find(x) != (c).end())
#define CPRESENT(c,x) (find(ALL(c),x) != (c).end()) 
#define WHAT_IS(x) cout << #x << " is " << x << endl;

#define MP make_pair

#define MAX 1000010
#define MOD 1000000007
#define INF 1000000007

using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;

typedef long long LL;

// undirected graph
class Graph {
  public:
  int V;
  VVI adj;
  Graph() : V(0) { }
  Graph(int n) : V(n), adj(n) { }
  void add_edge(int u, int v) {
    adj[u].PB(v);
    adj[v].PB(u);
  }
  void resize(int n) {
    for (int i=0; i<SZ(adj); i++) {
      adj[i].clear();
    }
    V = n;
    adj.clear();
    adj = VVI(n);
  }
};

// gcd
inline int gcd(int a, int b) {
  while (a > 0 && b > 0) {
    if (a > b) a %= b;
    else b %= a;
  }
  return a + b;
}


// power
inline int power(int a, int b, int mod) {
  LL ans=1;
  int bin[64], i=0;
  while (b>0) {
    bin[i++] = b%2;
    b /= 2;
  }
  for (int j=i-1; j>=0; j--) {
    ans = (ans*ans)%mod;
    if (bin[j] == 1) {
      ans = (ans*a)%mod;
    }
  }
  return (int)ans;
}

int trie[MAX][26], ans=0, sizeT=0, root;

int getTrieV() {
  sizeT++;
  return sizeT;
}

void addTrie(string& s) {
  int v = root, sz = s.size();
  bool got_it = false;
  for (int i=0; i<sz; i++) {
    if (!got_it) {
      ans++;
      // cout << s[i];
    }
    int c = s[i]-'a';
    if (trie[v][c] == 0) {
      trie[v][c] = getTrieV();
      got_it = true;
    }
    v = trie[v][c];
  }
  // cout << endl;
}

int main () {
  int t;
  scanf("%d", &t);
  for (int i=1; i<=t; i++) {
    memset(trie, 0, sizeof(trie));
    ans = 0;
    sizeT = 0;
    root = getTrieV();
    int n;
    scanf("%d", &n);
    for (int i=0; i<n; i++) {
      string s;
      cin >> s;
      addTrie(s);
    }
    printf("Case #%d: %d\n", i, ans);
  }
  return 0;
}

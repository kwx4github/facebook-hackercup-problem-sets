#include <set>
#include <map>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<double,double> pdd;
typedef vector<int> vi;
typedef vector<double>vd;
typedef vector<string> vs;
typedef vector<vi>vvi;
typedef map<string,int> msi;
typedef map<int,int>mii;
typedef map<pii,int>mpi;

#define pb push_back
#define MP make_pair
#define popb pop_back
#define all(a) a.begin(), a.end()
#define Sort(x) sort(x.begin(),x.end())
#define Reverse(x) reverse(x.begin(),x.end())
#define SZ(a) ( (int)a.size() )
#define mem(a, b) memset(a, b, sizeof(a))
#define Clear(a, b) { for (int i=0; i<=b; i++) a[i].clear(); }

#define REP(i,n) for (i=0;i<n;i++)
#define REV(i,n) for (i=n;i>=0;i--)
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
#define FOR(i,p,k) for (i=p; i<k;i++)

#define COPY(c,r)   memcpy(c,r,sizeof(r))
#define popcount(i) __builtin_popcount(i)
#define fs first
#define sc second

/// Moves ///
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[] = {-2, 2, -1, 1, -1, 1};int dy[] = {0, 0, 1, 1, -1, -1}; //Hexagonal Moves

#define INF 1<<30
#define MAX 1000000 //10^6
#define LEN(x1, y1, x2, y2) sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))

struct data
{
    int ch[26];
    int cnt;

    data()
    {
        mem(ch, 0);
        cnt = 1;
    }
};

vector<data>trie;

void init()
{
    trie.clear();
    trie.pb(data());
}

int add(string s)
{
    int node = 0;
    int cnt = 0;
    int ret = 0;

    for (int i=0; i<SZ(s); i++)
    {
        int alph = s[i]-'a';
        if (trie[node].ch[alph] == 0)
        {
            int newnode = SZ(trie);
            trie.pb(data());
            trie[node].ch[alph] = newnode;
            node = newnode;
            if (ret == 0) ret = ++cnt;
        }
        else
        {
            node = trie[node].ch[alph];
            trie[node].cnt++;
            cnt++;
        }
    }
    return ret==0 ? cnt : ret;
}

int main ()
{
    int t, n;
    string s;

    freopen("inp.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    cin>>t;
    for (int cas=1; cas<=t; cas++)
    {
        int res = 0;

        init();

        cin>>n;
        for (int i=0; i<n; i++)
        {
            cin>>s;
            res += add(s);
        }
        cout<<"Case #"<<cas<<": "<<res<<endl;
    }
    return 0;
}

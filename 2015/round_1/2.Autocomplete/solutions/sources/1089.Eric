#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <complex>
#include <cstdlib>
#include <ctime>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;

struct node
{
	char c;
	node* child[26];

	node (char ch = '$')
	{
		c = ch;
		for (int i = 0; i < 26; i++)
			child[i] = NULL;
	}

	int insert(string &s, int idx)
	{
		if (idx == s.size())
			return 0;

		int ch = s[idx] - 'a', ret = 0;
		if (!child[ch]) //not part of a prefix
			child[ch] = new node(s[idx]);
		else if (idx != (int)s.size() - 1) //word has not ended
			ret++;
		ret += child[ch]->insert(s, idx+1);
		return ret;
	}
};

int T, N;
node* root;

int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");

	in >> T;
	for (int t = 1; t <= T; t++)
	{
		root = new node();
		ll ans = 0;
		in >> N;
		for (int i = 0; i < N; i++)
		{
			string S;
			in >> S;
			ans += root->insert(S, 0) + 1;
		}

		out << "Case #" << t << ": " << ans << "\n";
	}

	in.close();
	out.close();
	return 0;
}
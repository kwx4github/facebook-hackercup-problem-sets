package round1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.BitSet;

public class B {

    final static int DISTINCT_CHARACTERS = 26;

    final String INPUT_FILE = "input.txt";
    final String OUTPUT_FILE = "output.txt";
    final int INF = 1 << 25;
    Node root;

    private void initTrie() {
	root = new Node();
    }

    private int addWord(Node node, char[] word) {

	
	int ret = INF;
	for(int index =0;index <= word.length;index++){
		++node.prefixCnt;
		if (index == word.length){
		    ret = Math.min(ret, word.length);
		    continue;
		}
		int childKey = word[index] - 'a';
		if (node.childs[childKey] == null) {
		    node.childs[childKey] = new Node();
		    ret = index + 1;
		}
		node = node.childs[childKey];
	}
	return ret;
    }

    public String solve(int N, BufferedReader in) throws Exception {
	initTrie();
	int ret = 0;
	for (int i = 0; i < N; i++) {
	    char[] nextWord = in.readLine().toCharArray();
	    ret += addWord(root, nextWord);
	}
	return ret + "";
    }

    static class Node {
	Node[] childs;
	int prefixCnt;

	public Node() {
	    this.childs = new Node[DISTINCT_CHARACTERS];
	    this.prefixCnt = 0;
	}
    }

    public void solver() throws Exception {
	BufferedReader in = new BufferedReader(new FileReader(INPUT_FILE));
	PrintWriter out = new PrintWriter(new File(OUTPUT_FILE));
	int t = Integer.parseInt(in.readLine());

	for (int tt = 1; tt <= t; tt++) {
	    int N = Integer.parseInt(in.readLine());
	    out.println("Case #" + tt + ": " + (solve(N, in)));
	}
	in.close();
	out.close();
    }

    public static void main(String[] args) throws Exception {
	new B().solver();
    }

}

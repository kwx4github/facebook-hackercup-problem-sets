#include<cstdio>
#include<iostream>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#include<cstdlib>
#include<cstring>

#define INF 2000000000
#define INF_LL 2000000000000000000ll
#define MOD_7 1000000007
#define MOD_9 1000000009

typedef long long ll;

using namespace std;

struct node
{
       char ch;
       node* nxt[26];
}*root;
string s;
queue<node*> q;

node* make_new_node(char c)
{
      node* n=new node;
      n->ch=c;
      for(int i=0;i<26;i++)
       n->nxt[i]=NULL;
      return n;
} 

void ins()
{
     node* n=root;
     int idx=0;
     
     while(idx<int(s.length()))
     {
                               if(n->nxt[s[idx]-'a']==NULL)
                                n->nxt[s[idx]-'a']=make_new_node(s[idx]-'a');
                               
                               n=n->nxt[s[idx]-'a'];
                               idx++;
     }
}

int query()
{
    node* n=root;
    int idx=0;
    
    while(idx<int(s.length()))
    {
                             if(n->nxt[s[idx]-'a']==NULL)
                              return idx+1;
                             
                             
                             n=n->nxt[s[idx]-'a'];
                             idx++;
    }
    
    return idx;
}

void del()
{
     q.push(root);
     
     while(!q.empty())
     {
                      node* n=q.front();
                      q.pop();
                      
                      for(int i=0;i<26;i++)
                      {
                              if(n->nxt[i]!=NULL)
                               q.push(n->nxt[i]);
                      }
                      free(n);
     }
}


int main()
{
    int t,n,i;
    ios::sync_with_stdio(false);
    
    freopen("autocomplete.txt","r",stdin);
    freopen("out.txt","w",stdout);
    cin>>t;
    int sv=t;
    
    while(t--)
    {
              cin>>n;
              int ans=0;
              root=make_new_node('$');
              for(i=0;i<n;i++)
              {
                              cin>>s;
                              int x=query();
                              ans+=x;
                              ins();
              }
              cout<<"Case #"<<sv-t<<": "<<ans<<endl;
              del();
    }
    //system("pause");
    return 0;
}

#include <iostream>
#include <cstdlib>
#include <cstring>
#include <fstream>

using namespace std;

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
#define ALPHABET_SIZE 26

#define MAX_WORD_LENGTH 1000000

struct node {
    int value;
    node *children[ALPHABET_SIZE];
};

node *getNewNode(void) {
    node *pNode = new node;
 
    if(pNode) {
        pNode->value = 0;
 
        for(int i = 0; i < ALPHABET_SIZE; i++)
            pNode->children[i] = NULL;
    }
 
    return pNode;
}

void insert(node *root, char word[]) {
    int level;
    int length = strlen(word);
    int index;
    node *currNode = root;
 
    for( level = 0; level < length; level++ ) {
        index = CHAR_TO_INDEX(word[level]);
        if( !currNode->children[index] )
            currNode->children[index] = getNewNode();
        else
            currNode->children[index]->value = 1;
 
        currNode = currNode->children[index];
    }

    currNode->value = 1;
}

int minSearch(node *root, char word[]) {
    int level = 0;
    int length = strlen(word);
    int index;
    node *currNode;
 
    currNode = root;
    
    index = CHAR_TO_INDEX(word[level]);
    currNode = currNode->children[index];
 
    for(level = 1; level < length; level++) {
        index = CHAR_TO_INDEX(word[level]);
 
        if(!currNode->children[index])
            return 0;
        
        int count = 0;

        if(currNode->value == 0) {
            for (int i = 0; i < ALPHABET_SIZE; i++) {
                if (currNode->children[i] != NULL)
                    count++;
                if (count > 1)
                    break;
            }

            if (count == 1)
                break;
        }
    
        currNode = currNode->children[index];
    }
 
    return level;
}

int main() {
    int numCases;
    
    ifstream infile("autocomplete.txt");
    infile >> numCases;
    int count = 0;

    while (count < numCases) {
        int numWords;
        infile >> numWords;

        int result = 0;
        node *myTrieRoot = getNewNode();

        while (numWords > 0) {
            char word[MAX_WORD_LENGTH];
            infile >> word;
            insert(myTrieRoot, word);
            result += minSearch(myTrieRoot, word);
            numWords--;
        }

        count++;
        cout << "Case #" << count << ": " << result << endl;
    }
 
    return 0;
}

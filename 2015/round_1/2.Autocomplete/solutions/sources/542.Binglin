import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class B {
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader("in.txt"));
        String line = in.readLine();
        int case_count = Integer.parseInt(line);
        String result = "";
        for (int i = 0; i < case_count; i++) {
            line = in.readLine();
            int line_count = Integer.parseInt(line);
            int sum = 0;
            Trie trie = new Trie();
            for (int j = 0; j < line_count; j++) {
                line = in.readLine();
                trie.addWord(line);
                sum += trie.containsWord(line);
            }
            result += "Case #" + (i + 1) + ": " + sum + "\n";
        }
        String workingDir = System.getProperty("user.dir") + "\\src\\";
        File file = new File(workingDir + "out.txt");
        if (!file.exists()) {
            file.createNewFile();
        }
        FileWriter fw = new FileWriter(file.getAbsoluteFile());
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(result);
        bw.close();
    }
}

class Trie {
    Trie[] nodes;
    int total;

    public Trie() {
        nodes = new Trie[26];
        total = 0;
    }

    public void addWord(String word) {
        Trie current = this;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (current.nodes[index] == null) {
                current.nodes[index] = new Trie();
            }
            current.nodes[index].total++;
            current = current.nodes[index];
        }
    }

    public int containsWord(String word) {
        Trie current = this;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (current.nodes[index].total == 1) {
                return i + 1;
            }
            current = current.nodes[index];
        }
        return word.length();
    }
}
package hackercode;

import com.sun.xml.internal.ws.api.pipe.NextAction;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 *
 * @author Dinnot
 */
public class HackerCode implements Runnable{

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        new Thread(null, new HackerCode(), "", 256 * (1L << 20)).start();
    }
    
    BufferedReader in;
    PrintWriter out;
    StringTokenizer tok = new StringTokenizer("");
    
    public void run() {
        try {
            long t1 = System.currentTimeMillis();
            in = new BufferedReader(new FileReader("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\input.txt"));
            out = new PrintWriter("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\output.txt");
            Locale.setDefault(Locale.US);
            int T = readInt();
            for(int i = 0; i < T; i++)
                solve(i+1);
            in.close();
            out.close();
            long t2 = System.currentTimeMillis();
            System.err.println("Time = " + (t2 - t1));
        } catch (Throwable t) {
            t.printStackTrace(System.err);
            System.exit(-1);
        }
    }
    
    String readString() throws IOException {
            while (!tok.hasMoreTokens()) {
                    tok = new StringTokenizer(in.readLine());
            }
            return tok.nextToken();
    }

    String readLine() throws IOException {
        return in.readLine();
    }
    
    int readInt() throws IOException {
            return Integer.parseInt(readString());
    }

    long readLong() throws IOException {
            return Long.parseLong(readString());
    }

    double readDouble() throws IOException {
            return Double.parseDouble(readString());
    }

    // solution

    void solve(int caseNr) throws IOException {
        
        int n = readInt();
        ArrayList<String> dictionary = new ArrayList<String>();
        int cost = 0;
        for(int i = 0; i < n; i++) {
            String word = readString();
            cost += getCost(word, dictionary);
        }
        
        out.print("Case #");
        out.print(caseNr);
        out.print(": ");
        out.println(cost);
    }
    
    int getCost(String word, ArrayList<String> dictionary) {
        for(int i = 1; i < word.length(); i++) {
            if(!findWord(word.substring(0, i), dictionary)) {
                addWord(word, dictionary);
                return i;
            }
        }
        addWord(word, dictionary);
        return word.length();
    }
    
    boolean findWord(String word, ArrayList<String> dictionary) {
        int pos = Collections.binarySearch(dictionary, word, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                int minlen = o2.length();
                if(o1.length() < o2.length())
                    return o1.compareTo(o2);
                boolean found = false;
                for(int i = 0; i < minlen && !found; i++) {
                    if(o1.charAt(i) != o2.charAt(i))
                        found = true;
                }
                if(!found)
                    return 0;
                else return o1.compareTo(o2);
            }
            
        });
        return pos >= 0;
    }
    
    void addWord(String word, ArrayList<String> dictionary) {
        int pos = Collections.binarySearch(dictionary, word);
        if(pos < 0) {
            dictionary.add(-pos-1, word);
        }
    }
}

import java.io.*;
import java.util.StringTokenizer;

public class P2 implements Runnable {
    static final String PROBLEM_NAME = "p2";
    static final String INPUT_FILENAME = PROBLEM_NAME + ".in";
    static final String OUTPUT_FILENAME = PROBLEM_NAME + ".out";

    BufferedReader rd;
    PrintWriter wr;
    StringTokenizer tok = null;

    public static void main(String[] args) {
        new Thread(new P2()).start();
    }



    String readToken() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
            String line = rd.readLine();
            tok = new StringTokenizer(line);
        }
        return tok.nextToken();
    }

    String readLine() throws IOException {
        String line = rd.readLine();
        tok = null;
        return line;
    }

    int readInt() throws IOException {
        return Integer.parseInt(readToken());
    }

    private void solve() throws IOException {
        rd = new BufferedReader(new FileReader(new File(INPUT_FILENAME)));
        wr = new PrintWriter(new File(OUTPUT_FILENAME));
        int t = readInt();
        for (int ti = 0; ti < t; ++ti) {
            int n = readInt();
            String[] words = new String[n];
            for (int i = 0; i < n; ++i) {
                words[i] = readToken();
            }
            int result = subsolve(words);
            wr.println(String.format("Case #%d: %d", ti + 1, result));
        }
        rd.close();
        wr.close();
    }

    @Override
    public void run() {
        try {
            solve();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    class TrieNode {
        int depth;
        int words;
        final TrieNode[] children = new TrieNode[26];

        TrieNode() {
            this.depth = 0;
            this.words = 0;
        }

        void add(String word) {
            add(word, 0);
        }

        void add(String word, int offset) {
            this.words += 1;
            if (offset >= word.length()) {
                return;
            }
            char letter = word.charAt(offset);
            letter = Character.toLowerCase(letter);
            int index = letter - 'a';
            if (children[index] == null) {
                children[index] = new TrieNode();
                children[index].depth = depth + 1;
            }
            children[index].add(word, offset + 1);
        }

        int type(String word) {
            return type(word, 0);
        }

        int type(String word, int offset) {
            if (offset >= word.length()) {
                return depth;
            }
            if ((depth > 0) && (words == 1)) {
                return depth;
            }

            char letter = word.charAt(offset);
            letter = Character.toLowerCase(letter);
            int index = letter - 'a';
            return children[index].type(word, offset + 1);
        }
    }

    private int subsolve(String[] words) {
        TrieNode root = new TrieNode();
        int result = 0;
        for (String word: words) {
            root.add(word);
            result += root.type(word);
        }
        return result;
    }
}

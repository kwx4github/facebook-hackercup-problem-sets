#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (__typeof(a) i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

struct node
{
	node *son[26];

	node()
	{
		INIT(son,0);
	}
};

char str[1000047];

void del(node *v)
{
	if (v==NULL) return;
	REP(i,26) del(v->son[i]);
	delete v;
}

void solve(int t)
{
	int N;
	int res = 0;
	scanf("%d",&N);
	node *root = new node();
	REP(i,N) 
	{
		scanf("%s",str);
		node *v = root;
		int letters = 0;
		bool new_node = false;
		char *p = str;
		while (*p!='\0')
		{
			int id = *p - 'a';
			if (!new_node) letters++;
			if (v->son[id]==NULL) 
			{
				v->son[id] = new node();
				new_node = true;
			}
			v = v->son[id];
			p++;
		}
		res += letters;
	}
	printf("Case #%d: %d\n",t,res);
}

int main()
{
	int T;
	scanf("%d",&T);
	REP(i,T) solve(i+1);
        return 0;
}

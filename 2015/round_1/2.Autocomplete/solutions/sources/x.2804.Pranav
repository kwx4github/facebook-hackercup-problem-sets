#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <bitset>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <utility>
#define max 10000009
using namespace std;
int idx=0;
struct node
{ 
    char data; 
    node *child[65];
    node()
    {
        for (int i = 0; i < 65; i++)
            child[i] = NULL;
    }
};
 
/* 
 * trie class Declaration
 */
class trie
{ 
    private: 
        node *root;
    public: 
        trie() 
        { 
            root = new_node(0);
        }
 
        node *new_node(int data) 
        {   
            node *Q = new node; 
            Q->data = data; 
            return Q; 
        }
 
        void add(string S) 
        { 
            node *cur = root; 
            for (int i = 0; i < S.length(); i++)
            {
                if (!cur->child[S[i] - 'A']) 
                    cur->child[S[i] - 'A'] = new_node(S[i]);
                cur = cur->child[S[i] - 'A']; 
            }
        }
 
        void check(node *cur, string S, int i) 
        { 
            if (cur) 
            { 
                idx++; 
                if (i < S.length()) 
                    check(cur->child[S[i] - 'A'], S, i + 1); 
            }
        }
 
        void checkroot(string S) 
        { 
            if (root && S.length() > 0 && S[0] > 'A') 
                check(root->child[S[0] - 'A'],S,1); 
            else 
                return; 
        }
};
int main() 
{
	freopen("inp.txt","r",stdin);
	freopen("op.txt","w",stdout);
	int t,a,b,k,tt,n,i;
	cin>>t;
	for(tt=1;tt<=t;tt++)
	{
        
		cin>>n;
		string s[n];
		trie dic;
		int ans=1;
		cin>>s[0];
		dic.add(s[0]);
		for(i=1;i<n;i++)
		{
			cin>>s[i];
			string pre;
			dic.checkroot(s[i]); 
			//cout<<s[i]<<" "<<idx<<endl;
			dic.add(s[i]);
			ans+=(idx+1);
			if(idx==s[i].size())
			ans--;
			idx=0;
		}
		cout<<"Case #"<<tt<<": "<<ans<<endl;
	}
	return 0;
}

#include <bits/stdc++.h>

#ifdef LOCAL
#include "dump.hpp"
#else
#define dump(...)
#endif

using namespace std;

#define REP(i, a, b) for(int i = (a); i < int(b); ++i)
#define rep(i, n) REP(i, 0, n)
#define ALL(x) begin(x), end(x)

template<class T> inline void chmax(T &a, const T &b) { if(a < b) a = b; }
template<class T> inline void chmin(T &a, const T &b) { if(a > b) a = b; }

constexpr int ALPHA = 26;
constexpr int MAX_V = 1000001;
const int BASE = 'a';

struct trie {
	array<int, ALPHA> next;

	trie() { next.fill(-1); }
};

vector<trie> nodes;

int add(const string &s) {
	int res = 0;
	int v = 0;
	bool make_new_node = false;

	for(const char &c : s) {
		const int id = c - BASE;
		if(nodes[v].next[id] == -1) {
			nodes[v].next[id] = nodes.size();
			nodes.emplace_back();
			make_new_node = true;
		}
		else {
			++res;
		}
		v = nodes[v].next[id];
	}

	if(make_new_node) ++res;
	return res;
}

void init() {
	nodes.clear();
	nodes.reserve(MAX_V);
	nodes.emplace_back();
}

int solve() {
	int n;
	cin >> n;
	
	init();

	int ans = 0;
	for(int i = 0; i < n; ++i) {
		string word;
		cin >> word;
		ans += add(word);
	}

	return ans;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	int T;
	cin >> T;

	for(int t = 1; t <= T; ++t) {
		cout << "Case #" << t << ": " << solve() << '\n';
	}

	return EXIT_SUCCESS;
}

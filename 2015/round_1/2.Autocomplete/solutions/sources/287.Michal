using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

class Program
{
    static List<string> dic = new List<string>();

    // O(k*log(N))
    static int Add(string word)
    {
        if (dic.Count == 0) { // first word
            dic.Add(word);
            return 1;
        }

        int k = 0;
        int left = 0;
        int right = dic.Count - 1;
        while (true)
        {
            char c = Get(word,k); // k-th letter
            int a = BinSearch(left, right, k, c); // left border (where should we insert c)
            int b = BinSearch(left, right, k, (char)(c + 1)); // right border (where should we insert c+1)
            right = Math.Max(left, b - 1); // go back to the end of c's sequence (but don't go before left border)
            left = a;
            if (Get(dic[right],k) != c) // they differ at k-th letter
            {
                dic.Insert(b, word);
                break;
            }
            ++k;
        }
        return Math.Min(word.Length, k + 1);
    }

    static int BinSearch(int a, int b, int k, char c)
    {
        while (a <= b)
        {
            int m = (a + b) / 2;
            char cm = Get(dic[m],k);
            if (cm < c)
            {
                a = m + 1;
            }
            else if (cm >= c)
            {
                b = m - 1;
            }
        }
        return a;
    }

    static char Get(string word, int k)
    {
        return k < word.Length ? word[k] : char.MinValue;
    }

    // O(longest_word * log(N))
    static int Solve(string[] words)
    {
        int count = 0;
        foreach(string word in words){
            count += Add(word);
        }
        return count;
    }

    static void Main(string[] args)
    {
        int T = ReadInt();
        for (int t = 1; t <= T; ++t)
        {
            dic.Clear();
            int N = ReadInt();
            string[] words = new string[N];
            for (int i = 0; i < N; i++)
            {
                words[i] = ReadLine();
            }
            Console.WriteLine("Case #{0}: {1}", t, Solve(words));
        }
    }

    // INPUT READING
    static string ReadLine()
    {
        return Console.ReadLine();
    }

    static string[] ReadWords()
    {
        return ReadLine().Split();
    }

    static int ReadInt()
    {
        return int.Parse(ReadLine());
    }

    static long ReadLong()
    {
        return long.Parse(ReadLine());
    }

    static double ReadDouble()
    {
        return double.Parse(ReadLine());
    }

    static int[] ReadInts()
    {
        return Array.ConvertAll(ReadWords(), int.Parse);
    }

    static long[] ReadLongs()
    {
        return Array.ConvertAll(ReadWords(), long.Parse);
    }

    static double[] ReadDoubles()
    {
        return Array.ConvertAll(ReadWords(), double.Parse);
    }

    static void WriteList<T>(List<T> col)
    {
        int count = col.Count;
        for (int i = 0; i < count; i++)
            Console.Write(col[i] + (i < count-1 ? " " : "\n"));
    }

    static void WriteArray<T>(T[] col)
    {
        int count = col.Length;
        for (int i = 0; i < count; i++)
            Console.Write(col[i] + (i < count - 1 ? " " : "\n"));
    }
}

//
//  autocomplete.cpp
//  programas2
//
//  Created by Lucca Siaudzionis on 17/01/15.
//  Copyright (c) 2015 Luccasiau. All rights reserved.
//

#include <cstdio>
#include <string>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
#define MAXN 2000100

int n;
int num;
int answer;
int pai[MAXN];
int size[MAXN];
int last[MAXN];
int prof[MAXN];
char tipo[MAXN];
vector<int> filhos[MAXN];

void insere(string nova, int indice){
	int node = 0;
	
	int i = 0;
	int tam = (int)nova.size();
	
	while(i < tam){
		
		bool achei = false;
		for(int j = 0;j < (int)filhos[node].size();j++)
			if( tipo[ filhos[node][j] ]  == nova[i] ){
				i++;
				achei = true;
				node = filhos[node][j];
				break;
			}
		
		if(!achei) break;
	}
	
	while(i < tam){
		
		num++;
		tipo[num] = nova[i];
		filhos[node].push_back(num);
		
		i++;
		pai[num] = node;
		prof[num] = prof[node]+1;
		node = num;
	}
	
	last[indice] = node;
}

/*
void calc_answer(int node, int dig){
	
	if(tipo[node] == '$'){
		answer += dig-1;
		return;
	}
	
	if((int)filhos[node].size() == 1){
		calc_answer(filhos[node][0], dig);
		return;
	}
	
	for(int i = 0;i < (int)filhos[node].size();i++)
		calc_answer( filhos[node][i], dig+1 );
	
}
*/

int calc_answer(int node){
	
	if((int)filhos[node].size() > 1){  return prof[node]+1;}
	
	return calc_answer(pai[node]);
}

int main(){
	
	int casos;
	scanf("%d", &casos);
	
	for(int ins = 1;ins <= casos;ins++){
		
		scanf("%d", &n);
		
		num = 0;
		answer = 1;
		for(int i = 0;i < MAXN;i++) filhos[i].clear();
		
		for(int i = 1;i <= n;i++){
			
			string aux;
			
			cin >> aux;
			
			aux.push_back('$');
			insere(aux, i);
			
			size[i] = (int)aux.size();
			
			if(i > 1) answer += calc_answer(last[i]);
			if(i > 1 && (int)filhos[pai[last[i]]].size() > 1) answer--;
			//if(i > 1) printf("%d\n", calc_answer(last[i]));
		}
		
		if(n == 1) answer = 1;
		
		printf("Case #%d: %d\n", ins, answer);
	}
	
	return 0;
}
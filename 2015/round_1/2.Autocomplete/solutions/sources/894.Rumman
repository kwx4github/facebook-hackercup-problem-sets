#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <cctype>
#include <set>
#include <bitset>
#include <algorithm>
#include <list>
#include <vector>
#include <sstream>
#include <iostream>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>

using namespace std;

typedef long long ll;
typedef pair<int,int> paii;
typedef pair< ll, ll > pall;


#define PI (2.0*acos(0))
#define ERR 1e-5
#define mem(a,b) memset(a,b,sizeof a)
#define pb push_back
#define popb pop_back
#define all(x) (x).begin(),(x).end()
#define mp make_pair
#define SZ(x) (int)x.size()
#define oo (1<<25)
#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)
#define Contains(X,item)        ((X).find(item) != (X).end())
#define popc(i) (__builtin_popcountll(i))
#define fs      first
#define sc      second
#define EQ(a,b)     (fabs(a-b)<ERR)
#define MAX 1000500
#define twoL(X) (((ll)(1))<<(X))

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}


template<class T> T Abs(T x) {return x > 0 ? x : -x;}
template<class T> inline T sqr(T x){return x*x;}
ll Pow(ll B,ll P){      ll R=1; while(P>0)      {if(P%2==1)     R=(R*B);P/=2;B=(B*B);}return R;}
ll BigMod(ll B,ll P,ll M){     ll R=1; while(P>0)      {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;} /// (B^P)%M

///int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1}; //4 Direction
///int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};//8 direction
///int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
///int rrr[]={2,1,-1,-2,-1,1};int ccc[]={0,1,1,0,-1,-1}; //Hexagonal Direction
///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month
struct data
{
    int edges[26];
    int words;
    data ()
    {
        words=0;
        mem(edges ,-1);
    }
};
int counter;
data trie[MAX];
char text[MAX];

int get_char_val(char ch)
{
    if(ch>='a' && ch<='z') return ch-'a';
}


void trie_insert( )
{
    int now,node=0;
    trie[node].words++;
    for(int indx=0; text[indx]!='\0' ; indx++)
    {
        now = get_char_val(text[indx]);
        if(trie[node].edges[now]==-1) trie[node].edges[now]=++counter;///child created
        node = trie[node].edges[now];
        trie[node].words++;
    }
    return ;
}
int minimumLetter(int node, int indx)
{
    if(text[indx]=='\0') return indx;
    if(indx!=0 && trie[node].words==1) return indx;
    int now=get_char_val(text[indx]);
    return minimumLetter(trie[node].edges[now],indx+1);
}

int minimumLetter()
{
    int node = 0 ,now, indx ;
    for(indx=0; text[indx]!='\0' ; indx++)
    {
        now = get_char_val(text[indx]);
        if(indx!=0 && trie[node].words==1) return indx;
        now = get_char_val(text[indx]);
        node = trie[node].edges[now];
    }
    return indx;
}

int main()
{
    freopen("autocomplete.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int n,cas,loop=0,ans;
    scanf("%d",&cas);
    while(cas--) {
        ans=0;
        scanf("%d",&n);
        for(int i=0;i<n;i++)
        {
            scanf("%s",text);
            trie_insert();
            ans += minimumLetter();
        }
        printf("Case #%d: %d\n",++loop,ans);
        for(int i=0;i<=counter;i++) trie[i] = data();
        counter=0;
    }
}


import java.io.*;
import java.util.*;
import java.math.*;


public class Main implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;

	static final int N = (int) (1e6 + 10);
	static Node[] a;
	static int sz;
	
	static void solve() throws Exception {
		int t = nextInt();
		for (int tt = 1; tt <= t; ++tt) {
			int n = nextInt();
			a = new Node[N + 1];
			a[0] = new Node();
			sz = 1;
			int res = 0;
			for (int i = 0; i < n; ++i) {
				res += f(next());
			}
			out.println("Case #" + tt + ": " + res);
		}
	}
	
	static int f(String s) {
		int x = 0;
		int res = Integer.MAX_VALUE;
		for (int i = 0; i < s.length(); ++i) {
			int c = (int) (s.charAt(i) - 'a');
			if (a[x].next[c] == -1) {
				res = Math.min(i + 1, res);
				a[sz] = new Node();
				a[x].next[c] = sz;
				++sz;
			}
			x = a[x].next[c];
		}
		return Math.min(res, s.length());
	}
	
	static class Node {
		int[] next;
		
		Node () {
			this.next = new int[26];
			Arrays.fill(this.next, -1);
		}
	}
	
	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static BigInteger nextBigInteger() throws IOException {
		return new BigInteger(next());
	}
	
	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}
	
	static String nextLine() throws IOException {
		tok = new StringTokenizer("");
		return in.readLine();
	}

	static boolean hasNext() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null) {
				return false;
			}
			tok = new StringTokenizer(s);
		}
		return true;
	}
	
	public static void main(String args[]) {
		new Thread(null, new Main(), "Main", 1 << 28).start();
	}
	
	public void run() {
		try {
			//in = new BufferedReader(new InputStreamReader(System.in));
			//out = new PrintWriter(new OutputStreamWriter(System.out));
			in = new BufferedReader(new FileReader("input.in"));
			out = new PrintWriter(new FileWriter("output.out"));
			solve();
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			java.lang.System.exit(1);
		}
	}
}
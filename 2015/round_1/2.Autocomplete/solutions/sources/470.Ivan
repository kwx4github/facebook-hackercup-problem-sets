#include <cstdio>
#include <cstdlib>

#include <vector>

using namespace std;

const int MAX_LEN = 2000000 + 5;

struct Node {
  vector<pair<char, Node*>> next;
  int count = 0;

  ~Node() {
    for (const auto& p: next) {
      delete p.second;
    }
  }

  Node* getNext(char c) {
    for (const auto& p: next) {
      if (p.first == c) {
        return p.second;
      }
    }
    return nullptr;
  }

  void print(int offset, char prev) {
    for (int i = 0; i < offset; ++i) {
      printf(" ");
    }
    printf("%c %d\n", prev, count);
    for (const auto& p: next) {
      p.second->print(offset + 1, p.first);
    }
  }
};

struct Trie {
  Node* root = new Node;


  void insert(const char* word) {
    Node* cur = root;
    for (int pos = 0; word[pos]; ++pos) {
      Node* next = cur->getNext(word[pos]);
      if (!next) {
        next = new Node;
        cur->next.push_back(make_pair(word[pos], next));
      }
      ++next->count;
      cur = next;
    }
  }

  int find_unique_prefix(const char* word) {
    Node* cur = root;
    int pos = 0;
    for (; word[pos]; ++pos) {
      Node* next = cur->getNext(word[pos]);
      if (!next) {
        fprintf(stderr, "Something is wrong on word %s, position %d!!!\n", word, pos);
        print();
        exit(-1);
      }
      if (next->count == 1) {
        return pos + 1;
      }
      cur = next;
    }
    return pos;
  }

  void print() const {
    root->print(0, ' ');
  }
};

char s[MAX_LEN];

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    Trie trie;
    int N;
    int res = 0;
    scanf("%d\n", &N);
    for (int i = 0; i < N; ++i) {
      scanf("%s\n", s);
      trie.insert(s);
      res += trie.find_unique_prefix(s);
    }
    printf("Case #%d: %d\n", t, res);
  }
}

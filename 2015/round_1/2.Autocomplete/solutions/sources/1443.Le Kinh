import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;


public class AutoComplete {
	static class Node{
		Character val;
		HashMap<Character, Node> next;
		public Node(Character val){
			this.val = val;
			next = new HashMap<Character, Node>();
		}
	}
	private static int counter = 0;
	private static Node root = new Node(null);
	/*public static void buildTrie(String word, int i, Node currentNode){
		int count = i;
		Node temp = currentNode;
		while (count < word.length()){
			temp.next.put(word.charAt(i), new Node (word.charAt(i)));
			temp = temp.next.get(word.charAt(i));
			count++;
		}
	}
	public static int visitTree(String word, int i, Node currentNode){
		if (i == word.length()-1) return i+1;
		else if (currentNode.next.containsKey(word.charAt(i))){
			//if (i == word.length())
				//return i+1;
			return visitTree(word, i+1, currentNode.next.get(word.charAt(i)));
		} else {
			buildTrie(word, i, currentNode);
			return i+1;
		}
		
	}*/
	public static void buildTrie(Character[] word,int i, Node current){
		Node temp = current;
		for (int j = i; j < word.length; j++){
			temp.next.put(word[j], new Node(word[j]));
			temp =temp.next.get(word[j]);
		}
	}
	public static void AutoCompleteWord(Character[] word){
		Node temp = root;
		counter++;
		for (int i = 0; i < word.length; i++){
			Character ch = word[i];
			if (temp.next.containsKey(ch) && i != word.length-1){
				counter++;
			} else {
				buildTrie(word, i, temp);
				break;
			}
			temp =temp.next.get(ch);
		}
		//System.out.println(counter);
	}
	private static Character[] charToCharacter(char[]input){
		Character [] out = new Character[input.length];
		for (int i = 0; i < input.length; i++)
			out[i] = new Character(input[i]);
		return out;
	}
	public static void main(String[] args) throws FileNotFoundException{
		Scanner in = new Scanner(System.in);
		PrintWriter out = new PrintWriter("output2.txt");
		int numbWord;
		int numbTest = Integer.valueOf(in.nextLine());
		for (int i = 1; i <= numbTest; i++){
			numbWord = Integer.valueOf(in.nextLine());
			for (int j = 0; j < numbWord; j++){
				String word = in.nextLine();
				char[] array = word.toCharArray();
				Character[] charArray = charToCharacter(array);
				AutoCompleteWord(charArray);
				//numbChar += visitTree(word, 0, root);
			}
			out.println("Case #" + i + ": " + counter);
			counter = 0;
			root = new Node(null);
		}
		in.close();
		out.close();
		/*System.out.println(counter);
		AutoCompleteWord(new Character[]{'h','a','v','i','n','g'});
		System.out.println(counter);
		AutoCompleteWord(new Character[]{'f','u','n'});
		System.out.println(counter);
		AutoCompleteWord(new Character[]{'y','e','t'});
		System.out.println(counter);
		AutoCompleteWord(new Character[]{'n','o','t'});
		System.out.println(counter);
		AutoCompleteWord(new Character[]{'t','w','o'});
		System.out.println(counter);
		AutoCompleteWord(new Character[]{'b','e','e'});
		System.out.println(counter);*/
	}
}

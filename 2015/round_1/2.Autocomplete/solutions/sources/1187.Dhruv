#include <bits/stdc++.h>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
#define ll long long
using namespace std;
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    ll value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    ll count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = new trie_node_t;

    if( pNode )
    {
        ll i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

ll insert(trie_t *pTrie, string temp)
{
    ll level,ans=temp.size();
    ll length = temp.size();
    ll index;
    trie_node_t *pCrawl;
    bool ins=false;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(temp[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        if(!ins){
			ins=true; ans=level+1;
         }
		}

        pCrawl = pCrawl->children[index];
    }

    // mark last node as leaf
    pCrawl->value = pTrie->count;

return ans;
}


int main()
{
    trie_t trie[101];
string s;
ll t,n ;

	freopen("autocomplete.txt", "r" , stdin);
freopen("upload2.out", "w", stdout);

cin>>t;

for(int ci=0;ci<t;ci++)
    {
    ll ans=0;
	initialize(&trie[ci]);
     
     cin>>n;
     while(n--)
     {
	    cin>>s;
	    ans+=insert(&trie[ci],s) ;
	 }
     
     cout<<"Case #"<<ci+1<<": "<<ans<<"\n";
    }
    return 0;
}


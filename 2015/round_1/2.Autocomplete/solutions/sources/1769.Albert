import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


/**
 * Autocomplete (25 points) 
 * @author Albert Choi
 */
public class B {
	static BufferedReader _reader = new BufferedReader(new InputStreamReader(System.in));
	static String _s;
	static StringTokenizer _st;
	static int _l;
	static String nline() throws IOException { _s = _reader.readLine(); ++_l; _st = new StringTokenizer(_s); return _s; }
	static String nword() 	{ return _st.nextToken(); }
	static int nint() 		{ return Integer.parseInt(nword()); }
	static long nlong() 	{ return Long.parseLong(nword()); }
	static double ndouble() { return Double.parseDouble(nword()); }
	static BigInteger nbig(){ return new BigInteger(nword()); }
	static PrintStream sout = System.out, serr = System.err;
	
	public static void main(String[] args) throws IOException {
//		sout.println(100000);
//		for (int i=0;i<100000;i++) {
//			sout.println("aaaaaaaaaa");
//		}
//		
		try {
			nline();
			int T = nint();
			for (int t=1; t<=T; t++) {
				String sans = doProblem();
				sout.println("Case #" + t + ": " + sans);
			}
		} catch (Throwable t) {
			System.err.println("At input line " + _l + ": " + _s); throw t;
		}
	}
	
	static String doProblem() throws IOException {
		nline();
		int N = nint();

		Node root = new Node((char)0);

		int count=0;
		for (int i=0; i<N; i++) {
			String word = nline().trim();
			int com = root.common(word);
			if (com == word.length()) count += com;
			else count += com + 1;
			//serr.println(word + " " + com + " " +root.contains(word));
			root.add(word);
		}
		return ""+count;
	}
	
	Node root;
	
	static class Node {
		char c;
		String remain;
		Map<Character, Node> map;
		Node(char c) {
			this.c=c;
			map = new HashMap<>();
		}
		Node(char c, String r) {
			this.c=c;
			this.remain=r;
			map = new HashMap<>();
		}
		void add(String sub) {
			if (sub.isEmpty()) return;
			char d = sub.charAt(0);
			Node next = map.get(d);
			if (next == null) {
				next = new Node(d, sub.substring(1));
				map.put(d, next);
			} else
			next.add(sub.substring(1));
		}
		boolean contains(String sub) {
			if (sub.isEmpty()) return true;
			char d = sub.charAt(0);
			Node next = map.get(d);
			if (next == null) {
				return false;
			}
			return next.contains(sub.substring(1));
		}
		int common(String sub) {
			if (sub.isEmpty()) return 0;
			char d = sub.charAt(0);
			Node next = map.get(d);
			if (next == null) {
				return 0;
			}
			return 1 + next.common(sub.substring(1));
		}
	}

}

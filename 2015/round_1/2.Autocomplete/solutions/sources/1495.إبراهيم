#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <cstring>

using namespace std;

#define mp make_pair
#define pp push_back
#define Sort(x) sort(x.begin(), x.end())
#define rep(i, x, y) for(int i = x; i < y; ++i)
#define Rep(i, x, y) for(int i = x; i <= y; ++i)
#define dRep(i, x, y) for(int i = x;i >= y; --i)
#define vi vector<int>
#define vvi vector<vector<int> >
#define ll long long
#define all(v) v.begin(),v.end()
#define ii pair<int, int>
#define mem(x, v) memset(x, v, sizeof(x))
#define nl '\n'
#define MOD 1000000007
#define readFile(fileName) freopen(fileName, "r", stdin)
#define writeFile(fileName) freopen(fileName, "w",stdout)



struct node
{
	char character;
	vector<node*>children;
	
	node(char x)
	{
		character = x;
		children.resize(26);
		rep(i, 0, 26)
			children[i] = NULL;
	}

	node()
	{
		children.resize(26);
		rep(i, 0, 26)
			children[i] = NULL;
	}

	~node()
	{
		/*rep(i, 0, 26)
		{
			if(children[i] != NULL)
				delete children[i];
		}*/
	}
};

node*root;

void clearNodes()
{
	node *curNode;
	curNode = root;
	queue<node*>rem;
	rem.push(root);
	while(!rem.empty())
	{
		curNode = rem.front();
		rem.pop();
		rep(i, 0, 26)
		{
			if(curNode->children[i] != NULL)
			{
				rem.push(curNode->children[i]);
			}
		}
		delete curNode;
	}

}

string word;

void insertWord(int index, node* curNode)
{
	while(index < word.size())
	{
		curNode->children[word[index] - 'a'] = new node(word[index]);
		index++;
	}
}


int main()
{
	node* curNode;
	int t, numWords;
	ll res;
	readFile("autocomplete.txt");
	writeFile("autocomplete_output.txt");
	cin >> t;
	Rep(i, 1, t)
	{
		cin >> numWords;
		root = new node();
		res = 0;
		rep(j, 0, numWords)
		{
			cin >> word;
			curNode = root;
			int ind = 0;
			if(root->children[word[0] - 'a'] == NULL)
			{
				root->children[word[0] - 'a'] = new node(word[0]);
				curNode = root->children[word[0] - 'a'];
			}
			else
			{
				curNode = root->children[word[0] - 'a'];
				while(ind < word.size() && curNode != NULL)
				{
					ind++;
					if(ind < word.size() && curNode->children[word[ind] - 'a'] == NULL)
					{
						curNode->children[word[ind] - 'a'] = new node(word[ind]);
						curNode = curNode->children[word[ind] - 'a'];
						break;
					}
					if(ind < word.size())
						curNode = curNode->children[word[ind] - 'a'];
					else
						break;
				}
			}
			if(ind < word.size())
				ind++;
			res += ind;

			while(ind < word.size())
			{					
				curNode->children[word[ind] - 'a'] = new node(word[ind]), curNode = curNode->children[word[ind] - 'a'];
				ind++;
			}
		}

		cout << "Case #" << i << ": " << res << nl;
		clearNodes();
		//delete root;
	
	}
	return 0;
}
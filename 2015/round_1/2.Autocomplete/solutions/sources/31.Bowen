#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;

#define MAXN 2000005
int L;
struct trnode{
	int next[26], precnt;
	trnode(){
		precnt = 0;
		FILL(next, -1);
	}
} nodes[MAXN];
char str[MAXN];

void add(int k, int pstr){
	if (str[pstr] == 0){
		nodes[k].precnt++;
		return;
	}
	char c = str[pstr];
	int t = c - 'a';
	if (nodes[k].next[t] == -1){
		nodes[k].next[t] = ++L;
		nodes[L] = trnode();
	}
	nodes[k].precnt++;
	add(nodes[k].next[t], pstr + 1);
}
int get(int k, int pstr, int d){
	if (nodes[k].precnt==1 || str[pstr]==0) return d;
	char c = str[pstr];
	int t = c - 'a';
	return get(nodes[k].next[t], pstr + 1, d+1);
}

int N;
int main(){
	int cs;
	cin >> cs;
	REP(csn, 1, cs + 1){
		printf("Case #%d: ", csn);
		cin >> N;
		L = 0;
		nodes[0] = trnode();
		int ans = 0;
		REP(i, 0, N) {
			scanf("%s", str);
			add(0, 0);
			int sol = get(0, 0, 0);
			sol = max(sol, 1);
			ans += sol;
		}
		cout << ans << endl;
	}
	return 0;
}
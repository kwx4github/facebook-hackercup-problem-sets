/*
 * Author:  xioumu
 * Created Time:  2015/1/18 15:34:47
 * File Name: B.cpp
 * solve: B.cpp
 */
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<iostream>
#include<vector>
#include<queue>

using namespace std;
#define sz(v) ((int)(v).size())
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define repf(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i >= (b); --i)
#define clr(x) memset(x,0,sizeof(x))
#define clrs( x , y ) memset(x,y,sizeof(x))
#define out(x) printf(#x" %d\n", x)
#define sqr(x) ((x) * (x))
typedef long long lint;

const int maxint = -1u>>1;
const double eps = 1e-8;
const int maxm = 26 + 5;
const int maxc = 1000000 + 10;

int sgn(const double &x) {  return (x > eps) - (x < -eps); }

struct tree{
    int ch[maxm];
};
int n, tn;
char s[maxc];
tree t[maxc];

int insert(int w, char *s) {
    int now = w;
    int res = 0;
    bool flag = true;
    for (int i = 0; s[i]; i++) {
        if (flag) res++;
        int x = s[i] - 'a';
        if (t[now].ch[x] == -1) {
            flag = false; 
            memset(t[tn].ch, -1, sizeof(t[tn].ch));
            t[now].ch[x] = tn;
            tn++;
        }
        now = t[now].ch[x];
    }
    //printf("%s\n", s);
    return res;
}

int main() {
    freopen("B.out", "w", stdout);
    int T, ca = 1;
    scanf("%d", &T);
    while (T--) {
        int ans = 0;
        scanf("%d", &n);
        tn = 1;
        memset(t[0].ch, -1, sizeof(t[0].ch));
        rep (i, n) {
            scanf("%s", s);
            int res = insert(0, s);
            ans += res;
        }
        printf("Case #%d: %d\n", ca++, ans);
    }
    return 0;
}

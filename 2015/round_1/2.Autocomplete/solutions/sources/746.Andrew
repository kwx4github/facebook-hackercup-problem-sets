#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <queue>
#include <math.h>
#include <cmath>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <bitset>
#include <ctype.h>
#include <cassert>
#include <stack>
#include <fstream>
#include <unordered_map>
#include <ctime>

using namespace std;

#define snd second
#define fst first
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define ld long double
#define pb push_back
#define left _left
#define right _right

const ld pi = 3.14159265359;

template < typename T > T abs(T x)
{
    return x > 0 ? x : -x;
}

template < typename T > T sqr(T x)
{
	return x * x;
}

const int maxn = 2000005;

struct node
{
	int cnt;
	int term;
	map < char, node* > nxt;
	node()
	{
		cnt = 0;
		term = 0;
	}
	void update()
	{
		cnt = term;
		for (auto kv : nxt)
			cnt += kv.snd->cnt;
	}
};

char s[maxn];

int main()
{
	//gen();
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	//srand(time(NULL));
	
	int t;
	scanf("%d\n", &t);
	
	for (int tt = 1; tt <= t; tt++)
	{
		int n;
		scanf("%d\n", &n);
		
		node *root = new node();
		int ans = 0;
		
		for (int i = 0; i < n; i++)
		{
			gets(s);
			int len = strlen(s);
			
			node *v = root;
			v->cnt++;
			
			vector < node* > was( { root } );
			
			for (int j = 0; j < len; j++)
			{
				if (v->nxt.count(s[j]) == 0)
					v->nxt[s[j]] = new node();
				v = v->nxt[s[j]];
				was.pb(v);
			}
			
			v->term = 1;
			
			for (int j = was.size() - 1; j >= 0; j--)
				was[j]->update();
			
			v = root;
			
			for (int j = 0; j < len; j++)
			{
				ans++;
				v = v->nxt[s[j]];
				
				if (v->cnt == 1)
					break;
			}
		}
		
		printf("Case #%d: %d\n", tt, ans);
	}
	
	
	return 0;
}





















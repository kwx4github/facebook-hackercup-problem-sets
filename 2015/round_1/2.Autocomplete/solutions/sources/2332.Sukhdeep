import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.StringTokenizer;
 public   class Main {
    static class Reader
    {
    BufferedReader r;
    StringTokenizer str;
    Reader()
    {
    r=new BufferedReader(new InputStreamReader(System.in));
    }
    Reader(String fileName) throws FileNotFoundException
    {
    r=new BufferedReader(new FileReader(fileName));
    }
    public String getNextToken() throws IOException
    {
    if(str==null||!str.hasMoreTokens())
    {
    str=new StringTokenizer(r.readLine());
    }
    return str.nextToken();
    }
    public int nextInt() throws IOException
    {
    return Integer.parseInt(getNextToken());
    }
    public long nextLong() throws IOException
    {
    return Long.parseLong(getNextToken());
    }
    public double nextDouble() throws IOException
    {
    return Double.parseDouble(getNextToken());
    }
    public String nextString() throws IOException
    {
    return getNextToken();
    }
    public int[] intArray(int n) throws IOException
    {
        int a[]=new int[n];
        for(int i=0;i<n;i++)
            a[i]=nextInt();
        
        return a;
        
    }
    public long[] longArray(int n) throws IOException
    {
        long a[]=new long[n];
        for(int i=0;i<n;i++)
            a[i]=nextLong();
        
        return a;
        
    }
    public String[] stringArray(int n) throws IOException
    {
        String a[]=new String[n];
        for(int i=0;i<n;i++)
            a[i]=nextString();
        
        return a;
        
    }
    public int gcd(int a, int b) {
if(b == 0){
return a;
}
return gcd(b, a%b);
}
    }
  
  
    public static void main(String args[]) throws IOException{
    long time=System.currentTimeMillis();
        
       Reader r=new Reader("autocomplete.txt");
       BufferedWriter wr=new BufferedWriter(new FileWriter("autocomplete_output.txt"));
      
        int t=r.nextInt();
        out:
        for(int j=1;j<=t;j++)
        {

            
                Node root=new Node(0);
                int n=r.nextInt();
                int res=0;
                for(int i=0;i<n;i++)
                {
                    
                    char[] ch=r.nextString().toCharArray();
                    res+=update(root,ch);
                    
                    
                }
            
               wr.append("Case #"+j+": "+res+"\n");
        }

        wr.flush();
        wr.close();

        
    }    
    
    public static int update(Node root,char ch[])
    {
        int count=0;
        for(int i=0;i<ch.length;i++)
        {
            if(root.map.containsKey(ch[i]))
            {
                root=root.map.get(ch[i]);
                root.count++;
                count++;
            
            }
            else
            {
                count++;
                while(i<ch.length)
                {
                Node node=new Node(1);
              
                root.map.put(ch[i],node );
                root=node;
                i++;
                }
             break;
            }
                    
            
            
        }
       
        return count;
        
        
    }
    
}

class Node
{
    
    
    HashMap<Character,Node> map=new HashMap<Character,Node>();
    
    int count;
    public Node(int x)
    {
        count=x;
    }
}
/* G++ */

/* input/output */
	#include <iostream>
	#include <cstdio>
	#include <fstream>

/* data structures */
	#include <cstring>
	#include <sstream>
	#include <vector>
	#include <map>
	#include <queue>
	#include <deque>
	#include <stack>
	
/* std algorithms and math functions */
	#include <algorithm>
	#include <cmath>
	#include <cstdlib>

/* i only use this shit in olympiads */
	using namespace std;

/* some useful defines */
	#define MAX(x, y) ((x) > (y))? (x):(y)
	#define MIN(x, y) ((x) < (y))? (x):(y)
	#define x first
	#define y second	
	#define PB(x) push_back(x)
	#define PPB(x) pop_back(x)
	#define MP(x, y) make_pair(x, y)
	#define ALL(a) (a).begin(), (a).end()
	#define SORT(a) sort(all(a))
	#define FOR(i, a, b) for(int i=a; i<b; i++)
	#define SWAP(t, a, b) {t tmp=a; a=b; b=tmp;}
	#define CASET(T) "Case #" << T << ": "

struct node {
	struct node* child[26];
};

int SolveTestcase(size_t T)
{
	int N;
	cin >> N;

	struct node* root = new struct node;
	FOR(c, 0, 26)
		root->child[c] = NULL;

	unsigned long long int answer = 0;

	FOR(i, 0, N){
		struct node* path = root;
		string word;
		bool calculated = false;
		cin >> word;
		FOR(j, 0, word.size()){
			if (!calculated){
				answer++;
				if (path->child[word[j] - 'a'] == NULL){
					struct node* newnode = path->child[word[j] - 'a'] = new struct node;
					FOR(c, 0, 26)
						newnode->child[c] = NULL;
					path = newnode;
					calculated = true;
//					cerr << word.substr(0, j+1) << endl;
				}
				else 	
					path = path->child[word[j] - 'a'];
			} else {
				struct node* newnode = path->child[word[j] - 'a'] = new struct node;
				FOR(c, 0, 26)
					newnode->child[c] = NULL;
				path = newnode;
			}
//			if ((j == word.size()-1) && (!calculated))
//				cerr << word << endl;
		}		
	}
//	del_node(root);
	cout << CASET(T) << answer << endl;	
	return 0;
}

int main()
{
	size_t T;
	cin >> T;
	for (int i=0; i<T; i++){
		SolveTestcase(i+1);
	}	
	return 0;
}

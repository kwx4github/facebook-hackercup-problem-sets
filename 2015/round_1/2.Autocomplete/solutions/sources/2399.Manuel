#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>

#include <string>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <set>
#include <deque>
#include <utility>
#include <sstream>
#include <queue>
#include <stack>
#include <bitset>

#include <math.h>
#include <iomanip>
#include <algorithm>
#include <limits.h>

#define MP make_pair
#define MT make_tuple
#define PB push_back
#define FI first
#define SE second
#define INPUT "/Users/manuelalejandrovergaradiaz/Documents/Manu/Programation/Programation/Programation/autocomplete.txt"
#define OUTPUT "/Users/manuelalejandrovergaradiaz/Documents/Manu/Programation/Programation/Programation/output"
#define FILE 1

#define MAX (1<<20)
#define MAXN 20000000
#define INF -1
#define EPS 0.0000001
#define PI acos(-1)
#define sbit(a) a&(-a)
#define gauss(a) a*(a+1)/2
#define Node pair<int, long long>

typedef long long ll;

using namespace std;

int nTest, N;
string word;
vector<vector<int> > trie;

int newTrieNode() {
    trie.PB(vector<int> (26, -1));
    return int(trie.size())-1;
}

int addWord() {
    int x = 0, ret = 0;
    bool flag = 0;
    for (int i = 0; i < int(word.size()); i++) {
        int c = word[i]-'a';
        if (trie[x][c] == -1) {
            trie[x][c] = newTrieNode();
            ret += !flag;
            flag = 1;
        }
        ret += !flag;
        x = trie[x][c];
    }
    return ret;
}

int main() {
    
    if(FILE) {
        freopen(INPUT, "r", stdin);
        freopen(OUTPUT, "w", stdout);
    }
    
    cin >> nTest;
    for(int i = 1; i <= nTest; i++) {
        trie.clear();
        trie.PB(vector<int> (26, -1));
        cin >> N;
        int ans = 0;
        while(N--) cin >> word, ans += addWord();
        cout << "Case #" << i << ": " << ans << endl;
    }
    
    return 0;
}

package main

import "fmt"

type TrieNode struct {
	children  [26]*TrieNode
	ambiguous bool
}

func (n *TrieNode) add(word string) {
	node := n
	for i := 0; i < len(word); i++ {
		ch := word[i] - 'a'
		if node.children[ch] != nil {
			node = node.children[ch]
			node.ambiguous = true
		} else {
			newNode := &TrieNode{}
			node.children[ch] = newNode
			node = newNode
		}
	}
}

func (n *TrieNode) count(word string) uint64 {
	node := n
	for i := 0; i < len(word); i++ {
		node = node.children[word[i] - 'a']
		if !node.ambiguous {
			return uint64(i + 1)
		}
	}
	return uint64(len(word))
}

func solve(n int) {
	var count int
	fmt.Scanf("%d\n", &count)

	root := TrieNode{
		ambiguous: true,
	}

	letters := uint64(0)
	for i := 0; i < count; i++ {
		var word string
		fmt.Scanf("%s\n", &word)
		root.add(word)
		letters += root.count(word)
	}
	fmt.Printf("Case #%d: %d\n", n, letters)
}

func main() {
	var N int
	fmt.Scanf("%d\n", &N)
	for i := 1; i <= N; i++ {
		solve(i)
	}
}

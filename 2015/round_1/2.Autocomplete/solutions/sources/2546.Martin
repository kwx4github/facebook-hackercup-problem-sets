import sys
from collections import defaultdict


class Tree(object):
  def __init__(self):
    self.cnts = defaultdict(lambda:0)
    self.nodes = defaultdict(lambda:Tree())
  def cnt(self, x):
    return self.cnts[x]
  def inc(self, x):
    self.cnts[x] += 1
  def subtree(self, x):
    return self.nodes[x]
    

f = open(sys.argv[1])
T = int(f.readline())
for t in range(T):
  print 'Case #%d:' %(t+1),
  N = int(f.readline())
  prefixtree = Tree()
  r = 0
  for _ in range(N):
    word = f.readline().rstrip('\n')
    tree = prefixtree
    p = 0
    for i in range(len(word)):
      c = ord(word[i])-ord('a')
      if tree.cnt(c)>0:
        p = i+1
      tree.inc(c)
      tree = tree.subtree(c)
    if p<len(word):
      p += 1
    r += p
  print r

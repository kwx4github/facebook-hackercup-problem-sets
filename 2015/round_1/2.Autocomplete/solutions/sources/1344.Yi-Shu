#include<bits/stdc++.h>
#define REP(i,n) for(int (i)=0;i<(int)(n);++(i))
#define PB push_back
#define FT first
#define SD second
#define ZERO(x) memset(x,0,sizeof(x))
#define NEG(x) memset(x,-1,sizeof(x))
#define RI(x) scanf("%d",&(x))
#define RII(x,y) scanf("%d%d",&(x),&(y))
#define RIII(x,y,z) scanf("%d%d%d",&(x),&(y),&(z))
#define OIII(x,y,z) printf("%d %d %d\n",(x),(y),(z))
#define OII(x,y) printf("%d %d\n",(x),(y))
#define OI(x) printf("%d\n",(x))
#define RS(s) scanf("%s",(s))
#define MP(x,y) make_pair((x),(y))
typedef long long LL;
using namespace std;
typedef pair<int,int> PII;
const int MOD = 1e9+7;
const int maxn = 1111111;
struct tn{
    vector<int> cc;
    tn() {
        cc.resize(26,0);
    }
};
struct trie{
    vector<tn> ch;
    int v[maxn];
    int sz;
    void init(){
        ch.PB(tn());
        ZERO(v);
        sz = 1;
    }
    int ind(char c){
        return c-'a';
    }
    void ins(string x){
        int c = 0;
        v[c]++;
        for(int i=0;i<x.size();++i){
            int ne = ind(x[i]);
            if(ch[c].cc[ne] == 0){
                ch[c].cc[ne] = sz;
                ch.PB(tn());
                sz++;
            }
            c = ch[c].cc[ne];
            v[c]++;
        }
    }
    int cnt(string s) {
        int c = 0;
        int res = 0;
        for(int i=0;i<s.size();++i){
            res++;
            int ne = ind(s[i]);
            if(v[ch[c].cc[ne]] == 1)return res;
            c = ch[c].cc[ne];
        }
        return res;
    }
}t;
int main(){
    //freopen("in.txt","r",stdin);
    //freopen("autocomplete.txt","r",stdin);
    //freopen("out.txt","w",stdout);

    int T;
    RI(T);
    for(int kase=1;kase<=T;++kase) {
        int n;
        string s;
        vector<string> v;
        t.ch.clear();
        t.init();
        RI(n);
        int ans = 0;
        REP(i,n){
            cin>>s;
            t.ins(s);
            ans += t.cnt(s);
        }
        /*OI(t.v[0]);
        int ans = 0;
        REP(i,n){
            cout<<v[i]<<" "<<t.cnt(v[i])<<endl;
            ans += t.cnt(v[i]);
        }*/
        printf("Case #%d: %d\n",kase,ans);
    }
}

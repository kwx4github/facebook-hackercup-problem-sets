#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

//#pragma comment(linker, "/STACK:167177216")
#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<li, li> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 1e6 + 777;

const li BASE = 1000000007;
const li MOD[2] = {1000000000000000031LL, 22801808669LL};
li p[N][2];

inline li myMul (li a, li b, li m)
{
    li q = li(ld(a) * b / m);
    li ans = a * b - q * m;

    while (ans >= m)
        ans -= m;

    while (ans < 0)
        ans += m;

    return ans;
}

string ss[N];
int n;
set<pt> S;

inline bool read()
{
	S.clear();

	if(!(cin >> n))
		return false;

	forn(i, n)
	{
		assert(cin >> ss[i]);
	}

	return true;
}

inline void solve()
{
	li ans = 0;
	forn(kk, n)
	{
		string s = ss[kk];
		int m = sz(s);
		vector<li> h[2];
		forn(t, 2)
		{
			forn(i, m)
			{
				li curH = s[i] % MOD[t];
				//h[i][t] = a[i] % MOD[t];
				if(i)
					curH = (myMul(h[t][i - 1], p[1][t], MOD[t]) + curH) % MOD[t];
				h[t].pb(curH);
			}
		}

		int lf = 0, rg = m - 1;
		while(rg - lf > 1)
		{
			int mid = (lf + rg) / 2;
			if(S.find(mp(h[0][mid], h[1][mid])) != S.end())
				lf = mid;
			else
				rg = mid;
		}

		bool can = false;
		int add = -1;

		for(int i = lf; i <= rg; i++)
		{
			if(S.find(mp(h[0][i], h[1][i])) == S.end())
			{
				can = true;
				add = i + 1;
				break;
			}
		}

		if(!can)
			add = m;

		ans += add;
		//cerr << "add == " << add << endl;

		forn(i, m)
		{
			S.insert(mp(h[0][i], h[1][i]));
		}
	}

	cout << ans << endl;

	return;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

	forn(t, 2)
	{
        p[0][t] = 1;
        forn(i, N - 1)
            p[i + 1][t] = myMul(p[i][t], BASE, MOD[t]);
    }

	int T;
	cin >> T;

	forn(tt, T)
	{
		cerr << "Test #" << tt + 1 << " processing" << endl;
		int curT = clock();
		assert(read());
		//gen();
		cout << "Case #" << tt + 1 << ": ";
		solve();
		cerr << "Test #" << tt + 1 << " processed with TIME == " << clock() - curT << " ms" << endl;
	}

    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}
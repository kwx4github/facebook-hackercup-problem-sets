#include <queue>
#include <vector>
#include <climits>
#include <iostream>
#include <algorithm>
#include <memory.h>
using namespace std;
const int NMAX = 10000005;
struct vertex {
	int next[26];
	bool leaf;
};
vertex t[NMAX + 1];
int sz;
int ans;
void add_string (const string & s) {
	int v = 0;
	int flag = 1;
	for (size_t i = 0; i < s.length(); ++i) {
		int c = s[i] - 'a';
		ans += flag;
		if (t[v].next[c] == -1) {
			memset (t[sz].next, 255, sizeof t[sz].next);
			t[v].next[c] = sz++;
            flag = 0;
		}
		v = t[v].next[c];

	}
	t[v].leaf = true;
}
int main(){
    //ios_base::sync_with_stdio(false);
    freopen("autocomplete.txt", "r", stdin);
    freopen("autocomplete_out.txt", "w", stdout);
    int T;
    cin >> T;
    for(int qw = 1; qw <= T; ++qw){
        ans = 0;
        memset (t[0].next, 255, sizeof t[0].next);
        sz = 1;
        int n;
        cin >> n;
        string s;
        for(int i = 0; i < n; ++i){
            cin >> s;
            add_string(s);
        }
        printf("Case #%d ", qw);
        cout << ans << endl;
    }
    return 0;
}

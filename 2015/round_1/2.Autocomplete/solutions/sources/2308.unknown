#include <iostream>
#include <string>
#include <memory.h>
using namespace std;

const int MAX = 50000000;
int T;
struct SPrefix {
  int count, index;
} pr[MAX];

// checks if there was exactly such string before 
// (and was not a prefix of other string)
inline bool was_exact(const string &s) {
  int start = 0, index;
  bool was = false;
  for (int j=0; j<s.length(); j++) {
    index = start+s[j]-'a';
    if (pr[index].count == 0) break;
    start = pr[index].index;
   }
   was = (pr[index].count == 1);
   if (was) {
     for (int j=0; j<26; j++)
       if (pr[pr[index].index + j].count > 0)
         return false;
   }
   return was;
}

int main() {
  cin >> T;
  for (int t=1; t<=T; t++) {
    int ans = 0, end = 26, N;
    memset(pr, 0, sizeof(pr));
    cin >> N;
    for (int i=0; i<N; i++) {
      string s;
      cin >> s;
      int start = 0, add = 0;
      bool was = was_exact(s);
      for (int j=0; j<s.length(); j++) {
        SPrefix &pri = pr[start+s[j]-'a'];
        if (pri.count == 0) {
          if (add == 0) add = j+1;
          pri.count = 1;
          pri.index = end;
          end += 26;     
          if (end > MAX) cerr << "error!!!\n";
        } 
        else if (!was)
          pri.count++;
        if (add == 0 && was && pri.count == 1)
          add = j+1;
        start = pri.index;
      }
      ans += add ? add : s.length();
    }
    //cerr << "end = " << end << endl;
    cout << "Case #" << t << ": " << ans << endl;
 }
}

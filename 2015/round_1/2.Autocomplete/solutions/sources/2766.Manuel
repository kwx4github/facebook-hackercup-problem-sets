//#define DEBUG       //comment when you have to disable all debug macros.
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

using namespace std;


//Pair macros
#define mp make_pair // useful for working with pairs
#define fi first
#define se second

#define ll long long //data types used often, but you don't want to type them time by time_t

// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back

#ifdef DEBUG
     #define debug(args...)            {cerr << #args << ": ";dbg,args; cerr<<endl;}
#else
    #define debug(args...)              // Just strip off all debug tokens
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {
        cerr<<v<<" ";
        return *this;
    }
} dbg;


struct Trie {
  Trie() {
    for(int i = 0; i<27; i++){
      hijos[i] = NULL;
      hh[i] = 0;
      total_hijos = 0;
      terminal=false;
    }
  }

  ~Trie() {
    //for(int i = 0; i<27; i++)
    //  if(hijos[i]) delete hijos[i];
  }

  Trie* insertar(const char* s) {
    if(*s==0) {
      terminal =true;
      return this;
    }
    int index = s[0]-'a';
    if(!hijos[index]) {
      hijos[index] = new Trie();
      hh[index]=0;
    }
    hh[index]++;
    total_hijos++;
    return hijos[index]->insertar(s+1);
  }

  Trie* hijos[27];
  int hh[27];
  int total_hijos;
  bool terminal;
};

Trie* root=NULL;

void insertar(string s) {
  assert(root);
  root -> insertar(s.c_str());
}

int idnec(string s) {
  int atleast =0;
  assert(root!=NULL);
  Trie* traveler = root;
  for(int i =0; i<s.size(); i++) {
    int index = s[i]-'a';
    if(traveler->total_hijos+(traveler->terminal)==1) break;
    traveler = traveler -> hijos[index];
    atleast++;
  }
  return atleast;
}

int main(int argc, char* argv[])
{

  #ifdef ACMTUYO
  char inbuff[1000];
  sprintf(inbuff, "%s.in",argv[0]);
  freopen(inbuff, "r", stdin);

  #endif

  int t;
  cin >> t;
  for(int i = 0; i<t; i++) {
    int words;
    cin >> words;
    root = new Trie();
    int chars = 1;
    string s;
    for(int j = 0; j<words;j++) {
      cin >> s;
      insertar(s);
      chars += idnec(s);
    }
    delete root;
    root = NULL;
    cout << "Case #" << i+1 << ": " << chars << endl;
  }

  return 0;
}


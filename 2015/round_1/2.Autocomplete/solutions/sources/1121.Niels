#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

struct Node {
	Node() {
		mContent = ' '; mMarker = false;
	}
	char mContent;
	bool mMarker;
	Node* findChild(char c);
    vector<Node*> mChildren;
};

struct Trie {
	Trie(){ root = new Node(); }
	void addWord(string s);
	int charNeeded(string s);
	void deleteWord(string s);
	Node* root;
};

Node* Node::findChild(char c)
{
    for ( int i = 0; i < mChildren.size(); i++ )
    {
        Node* tmp = mChildren[i];
        if ( tmp->mContent == c )
        {
            return tmp;
        }
    }

    return NULL;
}

void Trie::addWord(string s)
{
	Node* current = root;

	for (int i = 0; i < s.length(); i++)
	{
		Node* child = current->findChild(s[i]);
		if (child != NULL)
		{
			current = child;
		}
		else
		{
			Node* tmp = new Node();
			tmp->mContent = s[i];
			current->mChildren.push_back(tmp);
			current = tmp;
		}
		if (i == s.length() - 1)
			current->mMarker = true;
	}
}

//own code

int Trie::charNeeded(string s){
	Node* current = root;
	int rv = 1;

	for (int i = 0; i < s.length(); i++)
	{
		Node* tmp = current->findChild(s[i]);
		if (tmp->mChildren.size() > 1){
			rv = i + 2;
		}
		if ((i != s.length() - 1 && tmp->mMarker)){
			rv = i + 2;
		}
		else if (i == s.length() - 1 && tmp->mChildren.size()){
			rv = i + 1;
		}
		current = tmp;
	}

	return rv;
}

int main(){
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int opgave = 1; opgave <= n; opgave++){
		Trie trie;
		int nbWords;
		cin >> nbWords;
		int rv = 0;
		while (nbWords--){
			string newWord;
			cin >> newWord;
			trie.addWord(newWord);
			//cout << "voor woord " << newWord << ": " << trie.charNeeded(newWord) << "\n";
			rv += trie.charNeeded(newWord);
		}
		cout << "Case #" << opgave << ": " << rv << "\n";
	}
	return 0;
}
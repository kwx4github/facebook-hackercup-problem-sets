#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXDICT = 26;
const int MAXNODE = 1000000 + 1;

struct TrieNode {
	TrieNode *child[MAXDICT];

	TrieNode() { memset(child, 0, sizeof(child)); }
};

struct Trie {
	TrieNode *root;
	int poolCnt;
	TrieNode pool[MAXNODE];

	TrieNode *newNode() { pool[poolCnt] = TrieNode(); return &pool[poolCnt++]; }
	void init() { poolCnt = 0; root = newNode(); }

	void addWord(char *s) {
		TrieNode *p = root, *q;
		for ( ; *s; s++, p = q) {
			int digit = *s - 'a';
			q = p->child[digit];
			if (q == NULL) p->child[digit] = q = newNode();
		}
	}

  int calc(char *s) {
    TrieNode *p = root, *q;
    int len = strlen(s), res = 1;
    for ( ; *s; s++, res++, p = q) {
      int digit = *s - 'a';
      q = p->child[digit];
      if (q == NULL) break;
    }
    return min(res, len);
  }
};

int n;
Trie trie;
char s[MAXNODE];

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    trie.init();
    scanf("%d", &n);
    int res = 0;
    FOR(_, 0, n) {
      scanf("%s", s);
      res += trie.calc(s);
      trie.addWord(s);
    }
    printf("Case #%d: %d\n", taskIdx, res);
  }
  return 0;
}

#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;

const int C = 26;

struct Trie {
  int ct;
  Trie *ch[C];
  Trie() : ct(0) {
    for (int i = 0; i < C; i++) ch[i] = nullptr;
  }
  ~Trie() {
    for (int i = 0; i < C; i++) {
      if (ch[i] != nullptr) delete ch[i];
    }
  }
};

void insert(Trie *t, const string &s, int d) {
  t->ct++;
  if (d == s.size()) return;
  int p = s[d] - 'a';
  if (t->ch[p] == nullptr) {
    t->ch[p] = new Trie();
  }
  insert(t->ch[p], s, d + 1);
}

int find(Trie *t, const string &s, int d) {
  assert(t != nullptr);
  if (d == s.size()) return d;
  int p = s[d] - 'a';
  return (t->ct == 1 ? d : find(t->ch[p], s, d + 1));
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    Trie *root = new Trie();
    int n;
    cin >> n;
    ll r = 0;
    for (int i = 0; i < n; i++) {
      string s;
      cin >> s;
      insert(root, s, 0);
      r += max(1, find(root, s, 0));
    }
    printf("Case #%d: %lld\n", t, r);
    delete root;
  }
}

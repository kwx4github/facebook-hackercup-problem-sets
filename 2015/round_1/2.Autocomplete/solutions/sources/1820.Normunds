#include <iostream>
#include <fstream>
#include <cstdio>
#include <sstream>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <iomanip>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define TR(i, a) for(typeof(a.begin()) i = a.begin(); i != a.end(); i++)

struct node
{
    int children[30];
    node()
    {
        memset(children, 0, sizeof(children));
    }
};

vector<node> T;

string s;
int add(int ind, int i)
{
    int res = 0;
    int c = int(s[i] - 'a');
    if(T[ind].children[c] == 0)
    {
        T[ind].children[c] = T.size();
        T.push_back(node());
    }
    else res++;
    if(i + 1 < s.size()) res += add(T[ind].children[c], i + 1);
    //cout << ind << " " << i << " " << s << " " << s[i] << " " << c << " " << res << endl;
    return res;
}

int main()
{
    freopen("b2.in", "r", stdin);
    freopen("b.out", "w", stdout);
    int test_cnt;
    cin >> test_cnt;
    //test_cnt = 100;
    FOR(i, 0, test_cnt)
    {
        int res = 0;
        T.clear();
        T.push_back(node());
        int n;
        cin >> n;
        //n = 100000;
        cerr << n << endl;
        FOR(j, 0, n)
        {
            cin >> s;
            //if(j < 10) cerr << s.size() << endl;
            /*s = "";
            for(int ii = 0; ii < 10; ii++)
            {
                char cc[] = {'a', 'b', 'c', 'd', 'e'};
                char c = cc[rand() % 5];
                s += c;
            }*/
            int common = add(0, 0);
            //cout << s << " " << common << endl;
            res += min((int)s.size(), common + 1);
        }
        printf("Case #%d: %d\n", i + 1, res);
        //break;
    }
}










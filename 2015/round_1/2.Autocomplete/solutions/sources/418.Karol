#include <iostream>
#include <map>

struct Node {
	std::map<char, Node*> sons;
};

struct Solver {
	Node* root;
	Solver(): root(new Node) {}
	~Solver() {
		dispose(root);
	}

	void dispose(Node* ptr) {
//		if(ptr == nullptr) return;
//		for(auto p : ptr->sons) dispose(p.second);
//		delete ptr;
	}

	long long add(const std::string& s) {
		long long added = 0;
		Node** proot = &root;
		
		for(char c : s) {
			proot = &((*proot)->sons[c]);
			if(*proot == nullptr) {
				*proot = new Node;
				added ++;
			}
		}

		if(added == 0) return s.length();
		return s.length() - added + 1;

	}

	long long solve() {
		int n;
		long long wy = 0;

		std::cin >> n;

		for(int i=1; i<=n; i++) {
			std::string str;
			std::cin >> str;

			wy += add(str);
		}

		return wy;
	}
};

int main() {
	std::ios_base::sync_with_stdio(false);

	int t;
	std::cin >> t;

	for(int i = 1; i <= t; i++) {
		std::cout << "Case #" << i << ": " << Solver().solve() << std::endl;
	}

}

#include<iostream>
#include<stack>
#include<string>
#include<vector>
#include<set>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
#include <stdlib.h>

using namespace std;

#define gc getchar
#define MOD 1000000007
#define pc(x) putchar(x)
#define pi(n) printf("%d",n)
#define pis(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define pll(n) printf("%lld",n)
#define ps printf(" ")
#define pn printf("\n")
#define rep(i,n) for(i=0;i<n;i++)
#define fu(i,a,n) for(i=a;i<=n;i++)
#define fd(i,n,a) for(i=n;i>=a;i--)
#define INV 333333336
#define ll long long
#define ull unsigned long long
#define EPS 1e-9
#define infi 2000000000
#define linfi 2000000000000000000
#define ARRAY_SIZE(a) sizeof(a)/sizeof(	[0])
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
inline int sn()
{
	int n=0;
	int ch=gc();
	while( ch <48 )ch=gc();
	while( ch >47 )
	n = (n<<3)+(n<<1) + ch-'0', ch=gc();
	    return n;
}

inline void wi(int n)
{
	int N = n, rev, count = 0;
	rev = N;
	if (N == 0) { pc('0');  return ;}
	while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
	rev = 0;
	while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
	while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
	while (count--) pc('0');
}

typedef struct a trie_node_t;
struct a
{
    int value,count;
    trie_node_t *child[27];
};

typedef struct b trie_t;
struct b
{
    trie_node_t *root;
    int count;
};
 
trie_node_t *GN(void)
{
    trie_node_t *PN = NULL;
 
    PN = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( PN )
    {
        int i;
 
        PN->value = 0;
 		PN->count = 0;
        for(i = 0; i < 27; i++)
        {
            PN->child[i] = NULL;
        }
    }
 
    return PN;
}
 
void ini(trie_t *PT)
{
    PT->root = GN();
    PT->count = 0;
}
 
void inserting(trie_t *PT, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *it;
 
    PT->count++;
    it = PT->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !it->child[index] )
        {
            it->child[index] = GN();
        }
 		it->count++;
        it = it->child[index];
    }
 
    it->value = PT->count;
}
 
int searching(trie_t *PT, char key[])
{
	
    int level;
    int length = strlen(key);
    int answer=length-1;
    int index;
    trie_node_t *it;
 
    it = PT->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        
        if(it->count==1)
        {
        	if(level!=0) answer=level;
        	else answer=1;
        	break;
        }
        
        if( !it->child[index] )
        {
            return 0;
        }
 
        it = it->child[index];
    }
    return answer;
}
 
int main()
{
	
 	int t,q,n,l,ans;
 	char s[1000005];
 	t=sn();
 	for(q=1;q<=t;q++)
 	{
	 	trie_t trie;
		ini(&trie);
 		ans=0;
		n=sn();
 		while(n--)
 		{
 			scanf("%s",s);
 			l=strlen(s);
 			s[l]='{';
 			s[l+1]=0;
 			inserting(&trie, s);
 			ans+=searching(&trie,s);
        	//printf("%d\n", searching(&trie, s));
 		}
 		printf("Case #%d: %d\n",q,ans);
 	}
 	
 	
    return 0;
}

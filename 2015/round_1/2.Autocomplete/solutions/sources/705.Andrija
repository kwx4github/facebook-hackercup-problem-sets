#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

struct node
{
    int prefcount;
    bool seenword;
    vector < int > chld;

    node () { prefcount = 0; chld.resize ( 26 ); seenword = false; }
};

bool CheckInDict ( string &s, vector < node > &v )
{
    int t = 0;

    for ( int i = 0; i < s.size(); i++ )
        if ( v[t].chld[s[i]-'a'] == 0 )
            return false;
        else t = v[t].chld[s[i]-'a'];

    if ( !v[t].seenword )
        return false;

    return true;
}

void Insert ( string &s, vector < node > &v )
{
    int t = 0;

    for ( int i = 0; i < s.size(); i++ )
    {
        if ( v[t].chld[s[i]-'a'] == 0 )
        {
            v.push_back( node() );
            v[t].chld[s[i]-'a'] = v.size() - 1;
        }

        t = v[t].chld[s[i]-'a'];
        v[t].prefcount++;
    }

    v[t].seenword = true;
}

int GetLen ( string &s, vector < node > &v )
{
    int t = 0;

    for ( int i = 0; i < s.size(); i++ )
    {
        t = v[t].chld[s[i]-'a'];

        if ( v[t].prefcount == 1 )
            return i + 1;
    }

    return s.size();
}

void Solve ( int num )
{
    int ret = 0, n;
    string s;
    vector < node > v ( 1 );

    cin >> n;

    for ( int i = 0; i < n; i++ )
    {
        cin >> s;

        if ( !CheckInDict ( s, v  ) )
            Insert ( s, v );

        ret += GetLen ( s, v );
    }

    cout << "Case #" << num << ": " << ret << endl;
}

int main()
{
    int t; cin >> t;

    for ( int i = 1; i <= t; i++ )
        Solve ( i );

    return 0;
}

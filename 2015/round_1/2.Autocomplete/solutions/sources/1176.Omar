#include <iostream>
#include <vector>
#include <stdio.h>
#include <map>
#include <memory.h>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;
int nNodes = 1;
struct hashh
{
	int operator()(const pair<int,char> &p)const
	{
		return p.first*31+p.second;
	}
};
hash_map<pair<int,char>,int ,hashh> edges;
vector<int> isLeaf(1);
void insert(const char* str)
{
	int cur = 0;
	for(const char* s = str ; *s ; s++)
	{
		hash_map<pair<int,char>,int ,hashh>::iterator it;
		it = edges.find(make_pair(cur,*s-'a'));
		if(it==edges.end())
			isLeaf.push_back(0),cur = edges[make_pair(cur,*s-'a')]= nNodes++;
		else
			cur = it->second;
		isLeaf[cur] ++;
	}
}
int find(const char* str)
{
	int res = 0 , cur = 0;
	for(const char* s = str ; *s ; s++)
	{
		res ++;
		hash_map<pair<int,char>,int ,hashh>::iterator it;
		it = edges.find(make_pair(cur,*s-'a'));
		if(it==edges.end())
			return false;
		else
			cur = it->second;
		if (isLeaf[cur] == 1)
			return res;
	}
	return res;
}
char word[1000003];
void createCase()
{
	string res = "";
	cout << 20 << endl;
	for(int i = 0 ; i < 1000000 ; i ++)
		res += ((rand() % 26) + 'a');
	for(int i = 0 ;i < 20 ; i ++)
		printf("1\n%s\n", res.c_str());
}
int main() {
	freopen("test.in", "rt", stdin);
	//freopen("output.out", "wt", stdout);
	//createCase();
	//return 0;
	int n , t;
	scanf("%d" , &t);
	for (int cas = 1 ; cas <= t ; cas ++)
	{
		edges = hash_map<pair<int,char>,int ,hashh>();
		isLeaf.clear();
		isLeaf.resize(1);
		nNodes = 1;
		scanf("%d" , &n);
		int res = 0;
		for (int i = 0 ; i < n ; i ++)
		{
			scanf(" %s" , word);
			insert(word);
			res += find(word);
		}
		printf("Case #%d: %d\n", cas, res);
	}
	return 0;
}


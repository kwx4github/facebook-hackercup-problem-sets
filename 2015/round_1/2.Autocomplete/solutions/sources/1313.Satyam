#include<bits/stdc++.h>
#define ll long long int
#define F first
#define S second
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
#define rep(i,in1,n) for(i=in1;i<=n;i++)
#define repn(i,in1,n) for(i=in1;i<n;i++)

#define pf(n) printf("%d ",n);
#define sf(n) scanf("%d",&n)
#define sl(n) scanf("%I64d",&n)
#define nl printf("\n")
#define mem(arr,init) memset(arr,init,sizeof(arr))
//#define vector<int> vi 
//#define vector<vi> vvi 
 
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mp make_pair
#define ep emplace_back//c++11
#define ii pair<int,int> 
#define asize 26
#define C_TO_IND(c) ((int)c - (int)'a')
using namespace std;
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 
#define ALPHABET_SIZE (26)

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node tnode;
int cnt;
struct trie_node
{
    int value;
    tnode *children[ALPHABET_SIZE];
};
 

typedef struct trie trie_t;
struct trie
{
    tnode *root;
    int count;
};
 

tnode *getNode(void)
{
    tnode *pNode = NULL;
 
    pNode = (tnode *)malloc(sizeof(tnode));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void init(trie_t *tmptrie)
{
    tmptrie->root = getNode();
    tmptrie->count = 0;
}
 
void insert(trie_t *tmptrie, string key)
{
    int level;
    int length =key.length() ;
    int index;
    tnode *pCrawl;
 
    tmptrie->count++;
    pCrawl = tmptrie->root;
 	int flag=0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
        	flag=1;
            pCrawl->children[index] = getNode();
        }
 		else
 		cnt++;
        pCrawl = pCrawl->children[index];
    }
    if(flag)
    cnt++;
 
    // mark last node as leaf
    pCrawl->value = tmptrie->count;
}
int main()
{
	//freopen("input.txt","r",stdin);
  // freopen("output.txt","w",stdout);
	int i,j,k,t,n,m,cs,ans,ans2;
	
   string str1;
	sf(t);
	
//	printf("t=%d\n",t);
	for(cs=1;cs<=t;cs++)
	{
		cnt=0;
		trie_t mytrie;
		init(&mytrie);
		sf(n);
		
		for(i=1;i<=n;i++)
		{
			cin>>str1;
			insert(&mytrie,str1);
			
			
		}
		printf("Case #%d: %d\n",cs,cnt);
			
		
	}

	return 0; 
	
}

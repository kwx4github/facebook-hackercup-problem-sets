#include <stdio.h>
#include <stdlib.h>
#include <string>
#include<iostream>
#define MAX 100010
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
string keys[MAX];
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
int insert(trie_t *pTrie, string key)
{
    int level,cnt=0,f=0;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            if(f==0)
            {  
                    cnt++;
                    f=1;
            }
            pCrawl->children[index] = getNode();
        }
        else
             cnt++;
        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
    return cnt;
}
int main()
{
    int t,n,i,j,sum,k1=1;
    scanf("%d",&t);
    while(t--)
    {
      scanf("%d",&n);
      for(i=0;i<n;i++)
        cin>>keys[i];
       trie_t trie;
       initialize(&trie);
       sum=0;
       for(i = 0; i <n; i++)
        {
            sum+=insert(&trie, keys[i]);
        }
        printf("Case #%d: %d\n",k1,sum);
        k1++;
   }
    return 0;
}

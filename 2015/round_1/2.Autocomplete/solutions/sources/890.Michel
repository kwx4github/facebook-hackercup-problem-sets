#include <iomanip>
#include <algorithm>
#include <iterator>     // std::insert_iterator
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <fstream>

using namespace std;

int prefix(string &s1, string &s2){
	int i;
	for (i = 0; i < s1.size() && i < s2.size(); i++){
		if (s1[i] != s2[i]) break;
	}
	return i;
}

#define MIN(a,b) (a)<(b)?(a):(b)

int main(){
	ios_base::sync_with_stdio(false);
	ifstream in("autocomplete.txt");
	ofstream out("result.txt");
	int T;
	in >> T;
	for (int test = 1; test <= T; test++){
		cout << "Case #" << test << ": ";
		out << "Case #" << test << ": ";
		int N;
		in >> N;
		set<string> words;
		int ret = 0;
		for (int i = 0; i < N; i++){

			string w;
			in >> w;
			words.insert(w);
			set<string>::iterator it = words.find(w);
			string prev="", next="";
			if (it != words.begin()){
				--it;
				prev = *it;
				++it;
			}
			++it;
			if (it != words.end()){
				next = *it;
			}
			
			int longest = 0;
			if (prev != "")
				longest = prefix(prev, w);
			if (next != "")
				longest = max(longest, prefix(next, w));

			ret += MIN((longest + 1), w.size());
		}
		cout << ret << endl;
		out << ret << endl;

	}
	return 0;
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node implements Comparable<node> {
		int node;
		int l;
		int c;

		node(int n, int l, int c) {
			node = n;
			this.l = l;
			this.c = c;
		}

		@Override
		public int compareTo(node o) {
			if (o.c > c)
				return 1;
			return -1;
		}

	}

	public static class point implements Comparable<point> {
		long x;
		long y;
		long b;

		point(long x, long y, long b) {
			this.x = x;
			this.y = y;
			this.b = b;
		}

		@Override
		public int compareTo(point o) {
			if (k == 0)
				return (int) (o.x - x);
			else
				return (int) (y - o.y);

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[] = new boolean[10000005];
	public static ArrayList<Integer> prime = new ArrayList();

	// public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				// pp.add(i);
				for (long j = (long) i * (long) i; j <= k; j += i) {
					ch[(int) j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static ArrayList<Integer>[][] graph;
	public static boolean ok[][];

	public static boolean found(int i1, int i2, int e) {

		try {
			for (int i = 0; i < graph[i1][i2].size(); i++) {
				if (graph[i1][i2].get(i) == e)
					return true;
			}
		} catch (Exception e1) {
			graph[i1][i2] = new ArrayList();
			for (int i = 0; i < graph[i1][i2].size(); i++) {
				if (graph[i1][i2].get(i) == e)
					return true;
			}
		}

		return false;
	}

	public static void main(String[] args) throws IOException {
		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 BufferedReader in = new BufferedReader(new FileReader(
		 "autocomplete.txt"));
		StringBuilder qq = new StringBuilder();
		//PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		 PrintWriter out = new PrintWriter(new FileWriter("out.txt"));
		int t = Integer.parseInt(in.readLine());
		for (int i = 1; i <= t; i++) {
			out.print("Case #"+i+": ");
			int n = Integer.parseInt(in.readLine());
			ok = new boolean[26][1000001];
			graph = new ArrayList[26][1000001];
			long ans = 0;
			for (int j = 0; j < n; j++) {
				
				String y = in.readLine();
				boolean flag = true;
				for (int k = 0; k < y.length(); k++) {
					int e = y.charAt(k) - 'a';
					if (!ok[e][k]) {
						ans += (long)((long)k + 1);
						flag = false;
						break;
					} else if (k - 1 >= 0
							&& !found(y.charAt(k - 1) - 'a', k - 1, e)) {
						ans += (long)(k + 1);
						flag = false;
						break;
					}

				}
				if (flag)
					ans += (long)(y.length());
				//System.out.println(ans);

				for (int k = 0; k < y.length(); k++) {
					int e = y.charAt(k) - 'a';
					ok[e][k] = true;
					if (k - 1 >= 0 && !found(y.charAt(k - 1) - 'a', k - 1, e)) {
						graph[y.charAt(k - 1) - 'a'][k - 1].add(e);
					}

				}
			}
			out.println(ans);
		}

		out.close();

	}
}

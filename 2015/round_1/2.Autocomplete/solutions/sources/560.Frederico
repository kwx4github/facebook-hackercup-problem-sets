import java.util.*;

public class Autocomplete{
	
	private char[] cArray;
	private TreeMap<Character, Dictionary> dictionary;

	public Autocomplete(){
		dictionary = new TreeMap<Character, Dictionary>();
	}

	public int count(){
		return wordToMap(dictionary);
	}

	public void setWord(String w){
		cArray = w.toCharArray();
	}

	public int wordToMap(TreeMap<Character, Dictionary> dictionary){
		int count = 1;
		boolean flag = true;
		for(int i = 0; i < cArray.length; i++){
			if(!dictionary.containsKey(cArray[i])){
				dictionary.put(cArray[i], new Dictionary());
				flag = false;
			}
			dictionary = dictionary.get(cArray[i]).getDictionary();
			if(flag) count++;
		}
		return flag ? cArray.length : count;
	}

	public void printDic(TreeMap<Character, Dictionary> dictionary){
		for(Map.Entry<Character, Dictionary> e : dictionary.entrySet()){
			System.out.println(e.getKey());
			if(!e.getValue().isEmpty()) printDic(e.getValue().getDictionary());
		}
	}

	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int  T = sc.nextInt();
		for(int i = 0; i < T; i++){
			int N = sc.nextInt();
			Autocomplete auto = new Autocomplete();
			int count = 0;
			for(int j = 0; j < N ; j++){
				auto.setWord(sc.next());
				count += auto.count();
			}
			System.out.println("Case #" + (i + 1) + ": " + count);
		}
	}


	public class Dictionary{
		public TreeMap<Character, Dictionary> dictionary;
		public Dictionary(){dictionary = new TreeMap<Character, Dictionary>();}
		public TreeMap<Character, Dictionary> getDictionary(){return dictionary;}
		public boolean isEmpty(){return dictionary.isEmpty();}
	}
}
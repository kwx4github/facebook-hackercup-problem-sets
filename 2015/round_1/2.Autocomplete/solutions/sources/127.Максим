#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<cassert>
#include<cstdio>
#include<cstring>
#include<ctime>
#include<cmath>

#define DEBUGLEVEL
#ifdef DEBUGLEVEL
#define printf_debug(fmt, args...) fprintf(stderr, fmt, ##args)
#else
#define printf_debug(fmt, args...)
#endif

typedef long long llong;

using namespace std;

#define MAXCHARS 1100000

typedef struct {
  int next[26];
} node;

node *nodes[MAXCHARS];
int nodes_cnt = 0;

inline void clear_nodes() {
  for (int i = 0; i < nodes_cnt; ++i) {
    assert (nodes[i] != NULL);
    free (nodes[i]);
    nodes[i] = NULL;
  }
  nodes_cnt = 0;
}

inline node *make_node() {
  node *res = (node *)malloc (sizeof (node));
  memset (res->next, -1, sizeof (int) * 26);
  return res;
}

int ans = 0, n;
string gs;

int dfs_add (node *t, int i) {
  if (i == (int)gs.length()) {
    return 0;
  }
  int e = gs[i] - 'a';
  assert (0 <= e && e <= 25);
  int add = 0;
  if (t->next[e] == -1) {
    t->next[e] = nodes_cnt;
    nodes[nodes_cnt++] = make_node();
    assert (nodes_cnt < MAXCHARS);
    add = 1;
  }
  assert (t->next[e] >= 0);
  assert (nodes[t->next[e]] != NULL);
  return add + dfs_add (nodes[t->next[e]], i + 1);
}

int main() {
#ifdef DEBUG
    freopen("autocomplete.txt", "r", stdin);
    freopen("B.out", "w", stdout);
#endif
    // string s = "a";
    // int sum_len = 1;
    // while (sum_len <= 1000000) {
    //   cout << s << endl;
    //   sum_len += s.length();
    //   s += "a";
    // }
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++) {
        ans = 0;
        clear_nodes();
        nodes[nodes_cnt++] = make_node();
        cin >> n;
        for (int i = 0; i < n; ++i) {
          cin >> gs;
          int len = gs.length();
          int nodes_add = dfs_add (nodes[0], 0);
          int loc_ans = len - nodes_add + (nodes_add > 0);          
          // fprintf(stderr, "%s %d\n", gs.c_str(), loc_ans);
          assert (loc_ans > 0);
          ans += loc_ans;
        }
        printf("Case #%d: %d\n", t, ans);
    }
    return 0;
}
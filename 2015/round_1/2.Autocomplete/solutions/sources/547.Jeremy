import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.TreeSet;


public class Solution {

	public static void main(String[] args) throws IOException {
		Reader.init(System.in);
		int T = Reader.nextInt();
		for (int t = 0; t < T; t++) {
			int N = Reader.nextInt();
			TreeSet<String> taboo = new TreeSet<String>();
			int typed = 0;
			for (int i = 0; i < N; i++) {
				String s = Reader.next();
				
				//System.out.println("comparing " + s);
				int lowerMatch = 1;
				
				String lower = taboo.floor(s);
				if (lower != null) {
					for (lowerMatch = 0; lowerMatch < s.length(); lowerMatch++) {
						if (lowerMatch >= lower.length() || lower.charAt(lowerMatch) != s.charAt(lowerMatch)) {
							lowerMatch++;
							break;
						}
					}
					//System.out.println("with " + lower + " res is " + lowerMatch);
				}
				String upper = taboo.ceiling(s);
				int upperMatch = 1;
				if (upper != null) {
					for (upperMatch = 0; upperMatch < s.length(); upperMatch++) {
						if (upperMatch >= upper.length() || upper.charAt(upperMatch) != s.charAt(upperMatch)) {
							upperMatch++;
							break;
						}
					}
					//System.out.println("with " + upper + " res is " + upperMatch);
				}
				
				typed += Math.max(lowerMatch,upperMatch);
				//System.out.println("typed = " + typed);
				taboo.add(s);
			}
			System.out.println("Case #" + (t+1) + ": " + typed);
		}
	}
	private static String getString() {
		Random prng = new Random();
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < 10000; i++) {
			sb.append('a' + prng.nextInt(26));
		}
		return sb.toString();
	}
}

/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
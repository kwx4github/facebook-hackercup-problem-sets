#include <iostream>
using namespace std;

const int MAX_CHARSET = 26;

struct TrieNode {
    TrieNode *next[MAX_CHARSET];

    TrieNode() {
        for (int i = 0; i < MAX_CHARSET; ++i) {
            next[i] = nullptr;
        }
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    virtual ~Trie() {
        //clean(root);
    }

    int num_type(const string &s) {
        int len_s = s.size();
        TrieNode *ptr = root;
        for (int i = 0; i < len_s; ++i) {
            int ch = s[i] - 'a';
            if (nullptr == ptr->next[ch]) {
                return (i + 1);
            } else {
                ptr = ptr->next[ch];
            }
        }
        return len_s;
    }

    void insert_word(const string &s) {
        int len_s = s.size();
        TrieNode *ptr = root;
        for (int i = 0; i < len_s; ++i) {
            int ch = s[i] - 'a';
            if (nullptr == ptr->next[ch]) {
                ptr->next[ch] = new TrieNode();
            }
            ptr = ptr->next[ch];
        }
    }

private:
    TrieNode *root;

    void clean(TrieNode *node) {
        for (int i = 0; i < MAX_CHARSET; ++i) {
            if (node->next[i] != nullptr) {
                clean(node->next[i]);
            }
        }
        delete node;
        node = nullptr;
    }
};

int main(int argc, char *argv[]) {
    int T;
    int N;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        cin >> N;
        Trie trie;
        int res = 0;
        for (int i = 0; i < N; ++i) {
            string s;
            cin >> s;
            res += trie.num_type(s);
            trie.insert_word(s);
        }
        cout << "Case #" << (t + 1) << ": " << res << endl;
    }
    return 0;
}

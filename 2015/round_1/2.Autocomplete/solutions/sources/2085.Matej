#include <cstring>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
using namespace std;

#define baza 1337
#define point pair <string, int>

vector <int> h[101000];
string s[101000];
int niz[101000], n, hi, lo, x, y, mi, t, sol, p, k, dsol;




int lcp (int a, int b) {
    if (s[a][0]>s[b][0]) { return 0; }
    if (s[b][0]>s[a][0]) { return 0; }
    x=s[a].size();
    y=s[b].size();
    if (h[a][min(x, y)-1]==h[b][min(x, y)-1]) { if (x>y) return min(x, y); else return min(x, y)-1; }
    lo=0; hi=min(x, y)-1;
    while (hi>lo) {
        mi=(hi+lo)/2;
        if (h[a][mi]==h[b][mi]) {
            lo=mi+1;
        }
        else {
            hi=mi;
        }
    }
    return lo;
}

set <point> S;

int main (void) {
    cin >> t;
    for (int qq=0; qq<t; ++qq) {
        S.clear();
        cin >> n;
        for (int i=0; i<n; ++i) cin >> s[i];
        for (int i=0; i<n; ++i) {
            for (int j=0; j<s[i].size(); ++j) {
                if (j==0) {
                    h[i].push_back(s[i][j]);
                }
                else {
                    h[i].push_back(h[i][j-1]*baza+s[i][j]);
                }
            }
        }
        for (int i=0; i<n; i++) {

            S.insert(point(s[i], i));
            if (i==0) {
                sol++;
            }
            else {
                p=0;
                k=0;
                dsol=0;
                set<point>::iterator it=S.find(point(s[i], i));
                if (it==S.begin()) p=1;
                it--;
                set<point>::iterator it1=S.find(point(s[i], i));
                if (it1==S.end()) k=1;
                it1++;
                if (p==0) {
                    dsol=lcp(i, (*it).second)+1;
                }
                if (k==0) {
                    dsol=max(dsol, lcp(i, (*it1).second)+1);
                }
                sol+=dsol;
            }

        }
        for (int i=0; i<n; ++i) h[i].clear();
        cout << "Case #" << qq+1 << ": " << sol << endl;
        sol=0;
        S.clear();
    }
    return 0;
}

package nl.dcm360.fbhc15.r1

import scala.io.Source

object Autocomplete {
  
  val inputFile = "input/autocomplete.txt"
  
   def output(no:Int, answer:Long, duration: Long){
    val dstr = " ("+duration+")"
    if (answer == -1)
      println("Case #"+no+": impossible" + dstr)
    else
      println("Case #"+no+": "+answer + dstr)
  }
  
  def main(args: Array[String]): Unit = {
    val inputLines = Source.fromFile(inputFile).getLines
    val challengeCount = inputLines.next.toInt
    for(challenge <- 1 to challengeCount){
      val start = System.currentTimeMillis()
      val wordCount = inputLines.next.toInt
      val words = inputLines.take(wordCount).toList
      var blackList = Set[String]()
      var charNeeded = 0      
      for(word <- words){
        var counter = word.length()
        var continue = true
        for(count <- 1 to word.length() if continue){
          if(!blackList.contains(word.take(count))){
            counter = count
            continue = false
          }
        } 
        charNeeded += counter
        blackList = blackList.++(for(count <- 1 to Math.min(word.length(), 5000)) yield word.take(count))
      }
      output(challenge, charNeeded, System.currentTimeMillis() - start)
    }
  }
}
import java.io.*;
import java.util.*;

class Node {
  char c;
  Node next[];
  boolean endOfWord;
  int count;

  public Node(char c) {
    this.c = c;
    next = new Node[26];
    endOfWord = false;
    count = 0; 
  }
  public void add(Node n) {
    next[(int)(n.c - 'a')] = n;
  }
  public Node getNext(char c) {
    return next[(int)(c - 'a')];
  }
}

class Trie {
  Node root;

  public Trie() {
    root = new Node('\0');
  }

  public void insert(String str) {
    char[] s = str.toCharArray();
    Node cur = root;
    for(int i = 0; i < s.length; i++) {
      cur.count++;
      Node next = cur.getNext(s[i]);
      if (next == null) {
        next = new Node(s[i]);
        cur.add(next);
      }
      cur = next;
    }
    cur.count++;
    cur.endOfWord = true;
  }

  public int longestCommonPrefix(String str) {
    char[] s = str.toCharArray();
    int ret = 0;
    Node cur = root;
    for(int i = 0; i < s.length; i++) {
      Node next = cur.getNext(s[i]);
      if (next == null || next.count == 1) {
        break;
      }
      else {
        ret++;
        cur = next;
      }
    }
    return ret;
  }

  public boolean wordExists(String str) {
    char[] s = str.toCharArray();
    boolean ret = true;
    Node cur = root;
    for(int i = 0; i < s.length && ret; i++) {
      cur = cur.getNext(s[i]);
      ret &= (cur != null);
    }
    return ret && cur.endOfWord;
  }
}

public class B {
  public static void main(String args[]) throws IOException {
    BufferedReader bfr = new BufferedReader(new InputStreamReader(System.in));
    int T = Integer.parseInt(bfr.readLine());
    for(int cas = 1; cas <= T; cas++) {
      int N = Integer.parseInt(bfr.readLine());
      Trie words = new Trie();
      long keystrokes = 0;
      for(int i = 0; i < N; i++) {
      }

      for(int i = 0; i < N; i++) {
        String word = bfr.readLine().trim();
        words.insert(word);
        int lcp = words.longestCommonPrefix(word);
        if (lcp == word.length()) lcp--;
        keystrokes += lcp + 1;
      }
      System.out.printf("Case #%d: %d\n", cas, keystrokes);
    }
  }
}

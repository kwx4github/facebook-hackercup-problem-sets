#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include<utility>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b); }
#define LCM(a,b)  { return a*b/GCD(a,b);  }
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define FORN(i,n) for(i=n;i>=0;i--)
#define FORN_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int ll;
using namespace std;
#define IDX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node1;
struct trie_node{
    int value;
    //int num;
    trie_node1 *child[26];
};

typedef struct trie trie_t;
struct trie{
    trie_node1 *root;
    int count;
};

trie_node1 *getNode(void){
    trie_node1 *pNode = NULL;
    pNode = (trie_node1 *)malloc(sizeof(trie_node1));
    if(pNode){
        pNode->value = 0;
        for(int i = 0; i < 26; i++){
            pNode->child[i] = NULL;
        }
    }
    return pNode;
}

void initialize(trie_t *pTrie){
    pTrie->root = getNode();
    pTrie->count = 0;
}


void insert(trie_t *pTrie,string key){
    int level;
    int length = key.size();
    int index;
    trie_node1 *p;

    pTrie->count++;
    p = pTrie->root;

    for( level = 0; level < length; level++ ){
        index = IDX(key[level]);
        if( !p->child[index] ){
            p->child[index] = getNode();
        }

        p = p->child[index];
    }

    p->value = pTrie->count;
    //cout<<p->value<<endl;
}

int search(trie_t *pTrie, string key)
{
    int level;
    int length = key.size();
    int index;
    trie_node1 *p;
    p = pTrie->root;
    int pos = 1,flag = 0;
    for( level = 0; level < length; level++ ){
        int cnt = 0;
        flag = 0;
        for(int i = 0;i<26;++i){
            if(p->child[i])
                cnt++;
        }
        index = IDX(key[level]);

        if( !p->child[index] )
            return 0;
        if(cnt>1)
            pos = level+1;
        if(p->value){
            pos = level+1;
            //cout<<level+1<<" ";
        }

        p = p->child[index];
    }

    for(int i = 0;i<26;++i){
        if(p->child[i]){
            pos = length;
            break;
        }
    }

    return pos;
}

int main(){
    int test;
    int n;
    cin>>test;
    int qw = 0;
    string keys;
    trie_t trie;
    while(test--){
            qw++;
        int ans = 0;
        initialize(&trie);
       cin>>n;
       for(int i = 0;i<n;++i){
            cin>>keys;
            //words.push_back(keys);
            insert(&trie,keys);
            ans += search(&trie,keys);
            //cout<<ans<<endl;
       }

    cout<<"Case #"<<qw<<": "<<ans<<endl;
    }

    return 0;
}

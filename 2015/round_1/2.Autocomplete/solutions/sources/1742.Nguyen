#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a), _b = (b); i <= _b; ++i)
#define FORD(i,a,b) for(int i = (a), _b = (b); i >= _b; --i)

#define TR(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define ST first
#define ND second

const int N = 1e5 + 100;

struct TNode
    {   bool IsEnd;
        int PrefixCount;
        TNode *child[26]; // 
        TNode()
        {   FOR(i,0,25) child[i] = NULL;
            IsEnd = false;
            PrefixCount = 0;
        }
    };	
int n;
TNode *root;
void Insert(string s)
{   TNode *p;    p = root;
    FOR(i,0,s.length()-1)
        {   int k = s[i] - 'a'; 
            if (p -> child[k] == NULL)
                p -> child[k] = new TNode;
            p -> child[k] -> PrefixCount = (p -> PrefixCount) + 1;
            p = p -> child[k];
        }
    p -> IsEnd = true;
}

int CountPrefix(string s)
{   TNode *p;    p = root;
    FOR(i,0,s.length()-1)
        {   int k = s[i] - 'a';
            if (p -> child[k] == NULL) return (p -> PrefixCount);
            else p = p -> child[k];
        }
    return p -> PrefixCount;
}


int main(){
	
	freopen("autocomplete.txt","r",stdin);
	freopen("out","w",stdout);

	int ntest;
	cin >> ntest;
	for(int test = 1; test <= ntest; ++test){
		scanf("%d\n",&n);
		int ans = 0;
		root = new TNode();
		root -> PrefixCount = 0;
		FOR(i,1,n){
			string s;
			cin >> s;
			int tmp = CountPrefix(s) + 1;
			//cout <<s <<"   "<<tmp << endl;
			if( tmp > s.length()) ans += s.length(); else ans += tmp;
			Insert(s);
		}
		printf("Case #%d: %d\n",test,ans);
	}

	return 0;
}
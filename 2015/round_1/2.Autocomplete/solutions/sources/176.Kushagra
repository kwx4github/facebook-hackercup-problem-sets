#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <utility>
#include <iomanip>
#include <bitset>
#include <fstream>

using namespace std;

typedef long long int64;

class Trie {
  struct Node {
    Node *ptrs[26];
    bool is_word;
    int nchildren;
  };

  Node *root;

  void init(Node* &node) {
    for (int i = 0; i < 26; i++)
      node->ptrs[i] = 0;
    node->is_word = false;
    node->nchildren = 0;
  }
  public:
  Trie() {
    root = new Node;
    init(root);
  }

  void add_word(const string &word) {
    Node *node = root;
    for (const char &ch : word) {
      int idx = ch - 'a';
      if (!(node->ptrs[idx])) {
        node->ptrs[idx] = new Node;
        init(node->ptrs[idx]);
        node->nchildren++;
      }
      node = node->ptrs[idx];
    }
    node->is_word = true;
  }

  int minlen(const string &word) {
    int opt = 1, len = 0;

    Node *node = root;
    for (const char &ch : word) {
      if ((node->nchildren > 1) || (node->is_word))
        opt = max(opt, len+1);

      int idx = ch - 'a';
      node = node->ptrs[idx];
      len++;
    }
    if (node && (node->nchildren > 0))
      opt = max(opt, len);
    return opt;
  }
};

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int T;
  cin >> T;

  for (int kase = 1; kase <= T; kase++) {
    int N;
    cin >> N;

    Trie trie;
    int64 ans = 0;
    for (int i = 0; i < N; i++) {
      string word;
      cin >> word;

      trie.add_word(word);
      ans += trie.minlen(word);
    }
    cout << "Case #" << kase << ": " << ans << "\n";
  }

  return 0;
}

#include <iostream>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

void solve(int CASE) {
    int N;
    cin >> N;

    int ans = 0;
    set<string> dict;
    while(N--) {
        string str;
        cin >> str;
        const int L = str.size();
        dict.insert(str);
        auto it = dict.find(str);
        int cost = 1;
        if(it != begin(dict)) {
            auto pit = it; --pit;
            const int M = pit->size();
            for(int i = 0; i <= min(L, M); ++i) {
                if(str[i] != (*pit)[i]) {
                    cost = max(cost, i+1);
                    break;
                }
            }
        }
        ++it;
        if(it != end(dict)) {
            const int M = it->size();
            for(int i = 0; i <= min(L, M); ++i) {
                if(str[i] != (*it)[i]) {
                    cost = max(cost, i+1);
                    break;
                }
            }
        }
        cost = min(cost, (int)str.size());
        ans += cost;
    }
    cout << "Case #" << CASE << ": " << ans << endl;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);

    int N;
    cin >> N;
    for(int i = 1; i <= N; ++i) {
        solve(i);
    }
    return 0;
}

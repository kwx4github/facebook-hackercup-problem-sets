#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <unordered_set>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

const ll P = 131;
const int N = 3;
//const int N = 0;
int M[3] = {1000000007, 1000000009, 1000000021};

int main() {
    int T;
    cin >> T;
    unordered_set<ll> was;
    unordered_set<int> w[N];
    for (int test = 1; test <= T; ++test) {
        was.clear();
        for (int i = 0; i < N; ++i) w[i].clear();
        printf("Case #%d: ", test);
        int n;
        cin >> n;
        vs v(n);
        ll res = 0;
        for (int i = 0; i < n; ++i) {
            cin >> v[i];
            vl hwas(v[i].size());
            hwas[0] = v[i][0];
            for (int j = 1; j < v[i].size(); ++j)
                hwas[j] = hwas[j-1]*P + v[i][j];
            vvl h(N, vl(v[i].size()));
            for (int t = 0; t < N; ++t) {
                h[t][0] = v[i][0];
                for (int j = 1; j < v[i].size(); ++j)
                    h[t][j] = (h[t][j-1]*P + v[i][j]) % M[t];
            }
            int l = 0, r = v[i].size();
            while (r - l > 1) {
                int m = (l+r) / 2;
                if (was.count(hwas[m-1])) {
                    bool nw = 0;
                    for (int t = 0; t < N; ++t) if (!w[t].count(h[t][m-1])) {
                        nw = true;
                        break;
                    }
                    if (nw) {
                        r = m;
                    } else {
                        l = m;
                    }
                } else {
                    r = m;
                }
            }
            res += r;
            for (int j = 0; j < hwas.size(); ++j)
                was.insert(hwas[j]);
            for (int t = 0; t < N; ++t) {
                for (int j = 0; j < v[i].size(); ++j)
                    w[t].insert(h[t][j]);
            }
        }
        cout << res << endl;
    }
    return 0;
}

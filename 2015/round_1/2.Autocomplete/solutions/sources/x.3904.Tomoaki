#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()

using namespace std;

typedef long long ll;
typedef pair<int, int> P;
const int MAX_N = (int)1e6 + 6;
//const int MAX_N = 10;
int words[30][MAX_N];

int main()
{
	ios_base::sync_with_stdio(0);
	int T; cin >> T;

	for (int tt = 1; tt <= T; tt++ ){
		int N; cin >> N;
		memset (words, 0, sizeof (words ) );
		int sum = 0;
		rep (i, N ){
			string s = ""; cin >> s;
			s = '`' + s;
			int curr = s.length()-1;
			for (int j = s.length()-1; j > 0; j-- ){
				if (words[(int)(s[j-1] - '`')][j-1] == 0  
				|| !(words[(int)(s[j-1] - '`')][j-1] & (1<<(int)(s[j] - '`') ) ) ){
					curr = min (curr, j );
				} // end if
			} // end for

			for (int j = s.length()-1; j > 0; j-- ){
				words[(int)(s[j-1] - '`')][j-1] |= (1<<(int)(s[j] - '`'));
			} // end for
	
//			cerr << "curr: " << curr << endl;
			sum += curr;
		} // end rep

		cout << "Case #" << tt << ": " << sum << endl;
	} // end for

	return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for( ll i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
#define mod 1000000007
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long int ll;
typedef vector< pair<int,int> > VPI;
typedef struct node{
	int cnt=0;
	struct node* child[26];
} trie;
class prefix_trie
{
	private:
	 trie *t;
	public:
	 prefix_trie()
	{
		t=(trie *)malloc(sizeof(trie));
		t->cnt=-1;
		rep(i,0,26)
			t->child[i]=NULL;
	};
	void insert(string &s)
	{
		trie *temp=t;
		rep(i,0,s.size())
		{
			if(temp->child[s[i]-'a']==NULL)
			{
				temp->child[s[i]-'a']=(trie *)malloc(sizeof(trie));
				temp->child[s[i]-'a']->cnt=1;
				rep(j,0,26)
					temp->child[s[i]-'a']->child[j]=NULL;
			}
			else
				(temp->child[s[i]-'a']->cnt)++;
			temp=temp->child[s[i]-'a'];
		}
	};
	int getCount(string &s)
	{
		trie *temp=t;
		int count;
		rep(i,0,s.size())
		{
			count++;
			if(temp->child[s[i]-'a']->cnt==1)
				break;
			temp=temp->child[s[i]-'a'];
		}
		return count;
	}
};
int main()
{
	int t,n,ans,k=1;
	string s;
	cin>>t;
	while(t--)
	{
		ans=0;
		prefix_trie pt;
		cin>>n;
		rep(i,0,n)
		{
			cin>>s;
			pt.insert(s);
			ans+=pt.getCount(s);
		}
		cout<<"Case #"<<k<<": "<<ans<<endl;
		k++;
	}
	return 0;
}
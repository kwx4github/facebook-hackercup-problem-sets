/*
Bismillahir Rahmanir Rahim
Coder: Ahmad Faiyaz
*/

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <fstream>
#include <ctime>


# define FOR(i, a, b) for (int i=a; i<b; i++)
# define REP(i, a) FOR(i,0,a)

#define EPS 1e-11
#define inf 1234567891
#define LL long long

#define abs(x) (((x)< 0) ? (-(x)) : (x))
#define all(x) (x).begin(), (x).end()
#define ms(x, a) memset((x), (a), sizeof(x))

#define pb push_back
#define FORIT(i,m) for(__typeof((m).begin()) i=(m).begin();i!=(m).end();i++)
#define pii pair<int,int>
#define UNIQUE(c) (c).resize( unique( all(c) ) - (c).begin() )

#define READ(f) {ifstream infile(f) ;if(infile.good()) freopen(f, "r", stdin);}
#define WRITE(f) freopen(f, "w", stdout)
#define CIN ios_base::sync_with_stdio(0);
///int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1}; //4 Direction
///int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};//8 direction
///int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
///int rrr[]={2,1,-1,-2,-1,1};int ccc[]={0,1,1,0,-1,-1}; //Hexagonal Direction
///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month

using namespace std;

#define ALPHABET_SIZE 30
struct node {
    bool is_end;
    int prefix_count;
    struct node* child[ALPHABET_SIZE];
    node() {
        is_end=false;
        prefix_count=0;
        for(int i=0; i<ALPHABET_SIZE; i++) child[i]=NULL;
    }
    ~node() {
        for(int i=0; i<ALPHABET_SIZE; i++) delete child[i];
    }
};

class Trie {
public:
    node *head;
    Trie() {
        head= new node();
    }

    ~Trie() {
        delete head;
    }

    void insert (string word) {
        node *current = head;
        current->prefix_count++;
        for (unsigned int i=0; i<word.length(); ++i) {
            int letter = (int)word[i] - (int)'a';
            if (current->child[letter] == NULL)
                current->child[letter] = new node();
            current->child[letter]->prefix_count++;
            current = current->child[letter];
        }
        current->is_end = true;
    }

    int words_with_prefix (string prefix) {
        node *current = head;
        for (unsigned int i=0; i<prefix.length(); ++i) {
            if (current->child[((int)prefix[i]-(int)'a')] == NULL)
                return 0;
            else
                current = current->child[((int)prefix[i]-(int)'a')];
        }
        return current->prefix_count;
    }

    bool search (string word) {
        node *current = head;
        for (unsigned int i=0; i<word.length(); ++i) {
            if (current->child[((int)word[i]-(int)'a')] == NULL)
                return false;
            else
                current = current->child[((int)word[i]-(int)'a')];
        }
        return current->is_end;
    }

    int min_type(string word){
        node *current = head;
        for (unsigned int i=0; i<word.length(); ++i) {
            current = current->child[((int)word[i]-(int)'a')];
            if(current->prefix_count == 1) return i+1;
        }
        return word.size();
    }

};


string gen(){
    int ln = 10;

    string ret = "";
    for(int i=0;i<ln;i++){
        int r = (rand())%26;

        char v = 'a' + r;

        ret += v;
    }
    return ret;
}

int main(){
    #if defined( faiyaz_pc )
        READ("autocomplete.txt");
        WRITE("autocomplete_result.txt");
    #endif
    int t;
    CIN;

    cin>>t;

    string s;
    int n, chk = 1;

    while(t--){

        Trie T;

        cin>>n;


        int res = 0;
        for(int i=0;i<n;i++){
            cin>>s;
            //cout<<i<<endl;
            T.insert(s);

            res += T.min_type(s);
        }

        cout<<"Case #"<<chk++<<": "<<res<<"\n";
    }
    return 0;
}

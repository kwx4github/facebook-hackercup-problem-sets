#include <iostream>
#include <string>
#include <fstream>

using namespace std;


struct Node
{
    Node *child[26];

    int count = 0;

    Node(){

        for (int i = 0 ; i < 26 ; i++)
            child[i] = nullptr;

    }



};

struct Trie
{
    Node * parent = new Node();


    Trie(){}

    void insertStr(string t)
    {

        Node * currNode = parent;
        for (int i  = 0 ; i < t.length(); i++ )
        {
            int c= t[i] - 'a';

            if (currNode->child[ c ] == nullptr)
            {

                currNode->child[c] = new Node();

            }


            currNode = currNode->child[c];

            currNode->count++;

        }

    }


    int findMin(string t)
    {

        Node * currNode= parent;
        int i;
        for (i = 0; i < t.length(); i++)
        {

            int c= t[i] - 'a';

            if (currNode->count == 1) break;

            currNode= currNode->child[c];

        }

        return i;

    }


};



int main()
{
    ifstream in;
    in.open("autocomplete.txt");

    ofstream out;
    out.open("solve.txt");

    int t,n;

    in >> t;



    for (int ti = 1 ; ti <= t; ti++)
    {

        Trie *tr = new Trie();

        in >> n;

        int sum = 0;

        for (int i = 0 ; i < n ;i++ )

        {

            string s;
            in >> s;

            tr->insertStr(s);

            sum+=tr->findMin(s);

        }

        out << "Case #" << ti << ": " << sum << endl;

    }



    return 0;
}

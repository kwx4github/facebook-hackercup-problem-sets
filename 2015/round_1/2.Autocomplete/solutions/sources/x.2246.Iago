//
//  main.cpp
//  b
//
//  Created by Iago Almeida Neves on 1/17/15.
//  Copyright (c) 2015 Iago Almeida Neves. All rights reserved.
//

#include <bits/stdc++.h>
using namespace std;
#define INF 0x3f3f3f3f
#define MOD 1000000007
#define _ ios_base::sync_with_stdio(false); cin.tie(NULL);
typedef long long ll;
#define REP(i,n) for (int i = 0; i < n; i++)
#define REPI(i,n) for (int i = 1; i <= n; i++)
#define REPN(i,n) for (int i = n-1; i >= 0; i--)
#define REPF(j,i,n) for (int j = i + 1; j < n; j++)

#define MAXN 1000010
char c[MAXN];
char pre[MAXN];

//TRIE
typedef struct Trie {
  int words;
  int prefix;
  Trie *edges[26];
}
Trie;
void init(Trie *v) {
  v->words=0;
  v->prefix=0;
  REP(i, 26) {
    v->edges[i]=NULL;
  }
}
//how many of THIS word have I inserted
int words(Trie *v, char *s) {
   int k=s[0]-'a';
  if (*s=='\0') {
    return v->words;
  }
  if (v->edges[k]==NULL) {
    return 0;
  }
  return words(v->edges[k],s+1);
}
//how many words have THIS guy as a prefix
int prefix(Trie *v, char *s) {
    int k=s[0]-'a';
  if (*s=='\0') {
    return v->prefix;
  }
  if (v->edges[k]==NULL) {
    return 0;
  }
  return prefix(v->edges[k],s+1);
}
void add(Trie *v, char *s) {
  if (*s == '\0') {
    v->words++;
  }
  else {
    v->prefix++;
    int k=s[0]-'a';
    if (v->edges[k] == NULL) {
      v->edges[k] = (Trie *)malloc(sizeof(Trie));
      init(v->edges[k]);
    }
    add(v->edges[k], s+1); //how to do the same with cpp string???
  }
}

int main(int argc, const char * argv[]) { _
  ofstream f("ans.out");
  int nt;
  cin >> nt;
  REPI(t, nt) {
    Trie trie;
    init(&trie);
    int n;
    cin >> n;
    ll ans = 0;
    REP(i, n) {
      scanf(" %s", c);
      add(&trie, c);
      int size = strlen(c);
      REP(i, size) {
        pre[i] = c[i];
        pre[i+1] = '\0';
        ans++;
        if (prefix(&trie, pre) == 1 && words(&trie, pre) == 0) {
          break;
        }
      }
    }
    f << "Case #" << t << ": ";
    f << ans << "\n";
  }
  f.close();
  return 0;
}

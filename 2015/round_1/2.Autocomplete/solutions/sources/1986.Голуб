#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

#define pb push_back
#define mp make_pair
#define pib pair<int, bool>
#define pii pair<int, int>
#define piii pair<pii, int>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define mod2 536870911
#define y1 uhgeg
#define lim 31700

typedef long long ll;
typedef unsigned long long ull;

struct bor
{
	int next[26], count;
	bool forbid, used, end;
};

int n, m, l, k, j, i, h, g, x, y, q1, q2, q, t, lp[10000001], pr[10000001], primac[10000001];
bor b[1000001];
char buf[1000005];
string s[100001];

void clear_bor()
{
	for (j = 0; j <= l; j++)
	{
		for (i = 0; i < 26; i++)
		{
			b[j].next[i] = 0;
		}
		b[j].count = 0;
		b[j].forbid = b[j].used = b[j].end = 0;
	}
	l = 0;
}

bool cmp (string s1, string s2)
{
	return s1.size() < s2.size();
}

void solve()
{
	scanf ("%d", &t);
	for (g = 1; g <= t; g++)
	{
		clear_bor();
		scanf ("%d\n", &n);
		b[0].count = n;
		for (j = 1; j <= n; j++)
		{
			scanf ("%s\n", &buf);
			x = 0;
			for (i = 0; buf[i]; i++)
			{
				if (!b[x].next[buf[i] - 'a'])
				{
					b[x].next[buf[i] - 'a'] = ++l;
				}
				x = b[x].next[buf[i] - 'a'];
				b[x].count++;
			}
			b[x].end = 1;
			s[j] = buf;
		}
		//sort (s + 1, s + n + 1, cmp);
		q = 0;
		for (j = 1; j <= n; j++)
		{
			x = 0;
			bool yes = 0;
			for (i = 0; i < s[j].size(); i++)
			{
				x = b[x].next[s[j][i] - 'a'];
				if (!yes && !b[x].forbid)
				{
					b[x].used = 1;
					q += i + 1;
					yes = 1;
				}
				b[x].forbid = 1;
			}
			if (!yes)
			{
				b[x].used = 1;
				q += (s[j].size());
			}
		}
		printf ("Case #%d: %d\n", g, q);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	srand(333);
	solve();
	return 0;
}
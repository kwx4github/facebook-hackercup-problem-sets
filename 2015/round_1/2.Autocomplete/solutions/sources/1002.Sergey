class Trie:
    def __init__(self):
        self.root = Node()

    def findUniquePrefix(self, word):
        node = self.root
        prefix = ""

        for l in word:
            prefix += l
            if l in node:
                node = node[l]
                if node.numLeafs == 1:
                    return prefix
            else:
                return prefix

        return word

    def addWord(self, word):
        self.root.numLeafs += 1
        node = self.root
        for l in word:
            if l in node:
                node = node[l]
                node.numLeafs += 1
            else:
                newNode = Node(node)
                node[l] = newNode
                node = newNode

    def print(self):
        self.root.print()


class Node(dict):
    def __init__(self, parent=None):
        super().__init__()
        self.numLeafs = 1
        self.parent = parent

    def print(self, prefix=None):
        if prefix is None:
            prefix = ""
        children = ", ".join(self.keys())
        if children == "":
            children = "None"

        print("[{}] {} leafs => {}".format(prefix, self.numLeafs, children))
        for key in self.keys():
            self[key].print(prefix+key)


class Case:
    @classmethod
    def parse(cls, stream):
        numWords = int(next(stream).strip())
        words = []
        for i in range(numWords):
            words.append(next(stream).strip())
        return cls(words)

    def __init__(self, words):
        self.words = words

    def solve(self):
        trie = Trie()
        answer = 0
        for word in self.words:
            trie.addWord(word)
            answer += len(trie.findUniquePrefix(word))
        return answer


def main(fin, fout):
    numCases = int(next(fin).strip())
    for i in range(numCases):
        case = Case.parse(fin)
        answer = case.solve()
        output = "Case #{}: {}".format(i+1, answer)
        print(output)
        print(output, file=fout)


def sample():
    trie = Trie()

    trie.addWord("hi")
    print(trie.findUniquePrefix("hi"))
    trie.addWord("hello")
    print(trie.findUniquePrefix("hello"))
    trie.addWord("lol")
    print(trie.findUniquePrefix("lol"))
    trie.addWord("hills")
    print(trie.findUniquePrefix("hills"))
    trie.addWord("hill")
    print(trie.findUniquePrefix("hill"))

if __name__ == '__main__':
    import sys
    if len(sys.argv) < 3:
        print("Usage: main.py <input> <output>")
        exit()
    fin = open(sys.argv[1], 'r')
    fout = open(sys.argv[2], 'w')
    main(fin, fout)

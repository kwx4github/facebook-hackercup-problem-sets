#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <sstream>
#include <iostream>
#include <set>
#include <map>
#include <cassert>

#define REP(AA,BB) for(int AA=0; AA<(BB); ++AA)
#define FOR(AA,BB,CC) for(int AA=(BB); AA<(CC); ++AA)
#define FC(AA,BB) for(__typeof((AA).begin()) BB=(AA).begin(); BB!=(AA).end(); ++BB)
#define SZ(AA) ((int)((AA).size()))
#define ALL(AA) (AA).begin(), (AA).end()
#define PB push_back
#define MP make_pair

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;
typedef long double LD;

char buf[1000100];

struct node {
  int cnt;
  node *c[26];
  node (int k = 0) : cnt(k) {
    REP (i, 26) {
      c[i] = nullptr;
    }
  }/*
  ~node() {
    REP (i, 26) {
      if (c[i] != nullptr) {
        delete c[i];
      }
    }
  }*/
};

int add(node *t, int m) {
  int res = m;
  REP (i, m) {
    if (t->c[buf[i]] == nullptr) {
      t->c[buf[i]] = new node;
    }
    t = t->c[buf[i]];
    ++t->cnt;
    if (t->cnt == 1) {
      res = min(res, i + 1);
    } 
  }
  return res;
}

void test() {
  int n; scanf("%d", &n);
  node t;
  int res = 0;
  REP (i, n) {
    scanf("%s", buf);
    int m = strlen(buf);
    REP (j, m) {
      buf[j] -= 'a';
    }
    res += add(&t, m);
  }
  printf("%d\n", res);
}

int main(void) {
  int T; scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    printf("Case #%d: ", t);
    test();
  }
  return 0;
}

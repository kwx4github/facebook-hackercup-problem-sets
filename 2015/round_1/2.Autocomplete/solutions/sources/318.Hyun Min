#include <bits/stdc++.h>
using namespace std;

struct node {
	int link[26];
	bool terminal;
	node() {
		for (int li = 0; li < 26; li++)
			link[li] = -1;
		terminal = false;
	}
};

vector<node> trie;
int n;

int main(void) {
	ios::sync_with_stdio(false);
	int test_cases;
	cin >> test_cases;
	for (int kase = 1; kase <= test_cases; kase++) {
		trie.clear();
		cin >> n;
		trie.push_back(node()); // root
		
		long long ans = 0;
		
		for (int i = 0; i < n; i++) {
			string curString;
			cin >> curString;
			int curNode = 0;
			int depth = 0, threshold = 0;
			for (int j = 0; j < (int)curString.size(); j++) {
				int c = (int)curString[j] - 'a';
				depth++;
				if (trie[curNode].link[c] == -1) { // no link for c
					trie.push_back(node());
					trie[curNode].link[c] = (int)trie.size()-1;
					if (threshold == 0) threshold = depth;
				}
				curNode = trie[curNode].link[c];
			}
			if (threshold == 0) threshold = depth;
			ans += (long long)threshold;
		}
		cout << "Case #" << kase << ": " << ans << "\n";
	}

	return 0;
}

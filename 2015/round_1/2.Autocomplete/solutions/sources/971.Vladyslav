//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int t;

int n;
string s;
int bor[10005005][26];
int used[10050005];
int sz = 2;

int res;

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    scanf("%d", &t);
    for (int i = 1; i <= t; ++i) {
        scanf("%d", &n);
        memset(bor, 0, sizeof bor);
        memset(used, 0, sizeof used);
        int v = 1;
        res = 0;
        used[1] = true;
        for (int j = 0; j < n; ++j) {
            cin >> s;
            int mn = s.size();
            int v = 1;
            for (int x = 0; x < s.size(); ++x) {
                if (!used[v]) {
                    mn = min(mn, x);
                }
                used[v] = true;
                int c = s[x] - 'a';
                if (!bor[v][c]) {
                    bor[v][c] = sz++;
                }
                v = bor[v][c];
            }
            used[v] = true;
            res += mn;
        }
        printf("Case #%d: %d\n", i, res);
    }
    return 0;
}

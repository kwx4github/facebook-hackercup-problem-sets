#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <complex>
#define MINF 0xc0c0c0c0
#define INF 0x3f3f3f3f
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef complex<ll> pt;

struct Node
{
    int count, next[26];
};

int T, N, ans, trieSize;
string s;
Node trie[1234567];

void reset(int nodeId)
{
    trie[nodeId].count = 0;
    memset(trie[nodeId].next, -1, sizeof trie[nodeId].next);
}

void process()
{
    bool found = false;
    int nodeId = 0;
    for (int i = 0; i < s.length(); ++i)
    {
        int si = s[i] - 'a';
        if (trie[nodeId].next[si] == -1)
        {
            trie[nodeId].next[si] = trieSize;
            reset(trieSize++);
        }
        nodeId = trie[nodeId].next[si];
        ++trie[nodeId].count;
        if (!found && (i == s.length()-1 || trie[nodeId].count == 1))
        {
            found = true;
            ans += i + 1;
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> T;
    for (int z = 1; z <= T; ++z)
    {
        ans = 0;
        reset(0);
        trieSize = 1;
        cin >> N;
        while (N--)
        {
            cin >> s;
            process();
        }
        cout << "Case #" << z << ": " << ans << endl;
    }
}

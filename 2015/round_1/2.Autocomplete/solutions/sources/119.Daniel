#include <map>
#include <string>
#include <iostream>
using namespace std;

class Node {
private:
	Node* children[27];
public:
	Node() {
		for (int i = 0; i < 27; i++)
			children[i] = NULL;
	}
	Node* getChild(char ch) {
		return children[ch - 'a'];
	}
	void addChild(char ch, Node* child) {
		children[ch - 'a'] = child;
	}
};

int main() {
	int cases;
	cin >> cases;
	for (int cas = 1; cas <= cases; cas++) {
		Node* root = new Node;
		int sol = 0;

		int number_of_words;
		for (cin >> number_of_words; number_of_words; number_of_words--) {
			string word;
			cin >> word;

			// add and count
			int i = 0, len = word.length();
			Node* node = root;
			while (i < len && node->getChild(word[i]) != NULL) {
				node = node->getChild(word[i]);
				i++;
			}
			if (i == len)
				sol += i;
			else {
				sol += (i + 1);
				for (; i < len; i++) {
					Node* child = new Node;
					node->addChild(word[i], child);
					node = child;
				}
			}
		}
		cout << "Case #" << cas << ": " << sol << endl;
	}

	return 0;
}

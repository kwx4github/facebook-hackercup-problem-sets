#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

typedef pair<int,string> ii;
const int MAXLEN = 2e6;
const int MAXN = 1e5+10;

vector <ii> V[MAXLEN];
string word[MAXN];
int N;

int now_tree;
int now_word;
string add_word;
char tmp[MAXLEN];

int answer;

void print(){
	return ;
	for(int i=0;i<=now_tree;i++){
		if(V[i].empty())continue;
		printf("[%d] => \n",i);
		for(int j=0;j<V[i].size();j++){
			printf("\t\t [%d][%s]\n",V[i][j].first,V[i][j].second.c_str());
		}
	}
	printf("END\n");
}

void add(int node){
	bool match = false;
	int so_far = 0;
	for(int i=0;i<V[node].size();i++){
		if(V[node][i].second[0] == add_word[0]){
			match = true;

			// printf("match at = %d\n",V[node][i].first);

			int len1 = V[node][i].second.length();
			int len2 = add_word.length();

			string str1="",str2="",str3="";
			str1 += add_word[0];

			for(int j=1; j<len1 && j<len2;j++){
				if(V[node][i].second[j] == add_word[j]){
					so_far = j;
					str1 += add_word[j];
					continue;
				}else break;
			}

			for(int j=so_far+1;j<len1;j++) str2 += (V[node][i].second[j]);
			for(int j=so_far+1;j<len2;j++) str3 += (add_word[j]);
	
			// printf("[%d] so_far = %d %d\n",node,so_far,V[node][i].second.length());
			// printf("[%s][%s][%s]\n",str1.c_str(),str2.c_str(),str3.c_str());
			
			int to = V[node][i].first;	
			if(so_far+1 < V[node][i].second.length()){	
				// change sub_node i => original
				
				V[node][i].first = (++now_tree);
				V[node][i].second = str1;

				V[ V[node][i].first ].push_back(ii(to,str2));
			}

			if(str1.at(str1.length()-1) == '$') answer--;
			answer += str1.length();

			if(str3.length() == 0) break;
			
			add_word = str3;
			add( V[node][i].first );
			break;
		}else continue;
	}

	if(!match){
		if(add_word != "$") answer++; 
		V[node].push_back(ii(++now_tree,add_word));
	}
}

void clear(){
	now_tree = 0;
	now_word = 0;
	answer = 0;
	for(int i=0;i<MAXLEN;i++) V[i].clear();
}

void run(int test){
	clear();

	scanf("%d",&N);
	for(int i=1;i<=N;i++){
		scanf("%s",tmp);
		word[i] = tmp;
		word[i] = word[i] + "$";
	}

	for(int i=1;i<=N;i++){
		now_word = i;
		add_word = word[i];

		// printf("add [%s]\n",add_word.c_str());
		add(0);
		print();
		// printf("[%d] [+%d]\n",i,answer);
	}
	printf("Case #%d: %d\n",test,answer);
}

int main(){
	freopen("autocomplete.txt","r",stdin);
	freopen("autocomplete.out","w",stdout);

	int T; scanf("%d",&T);
	for(int i=1;i<=T;i++) run(i);
	return 0;
}
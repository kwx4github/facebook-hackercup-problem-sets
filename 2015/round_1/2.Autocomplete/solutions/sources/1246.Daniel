#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>

#define all(x) x.begin(), x.end()

using namespace std;

struct node {
    node* nodes[26];
    bool added[26];
    node() {
        for (int i = 0; i < 26; ++i) {
            added[i] = false;
            nodes[i] = NULL;
        }
    }
    ~node() {
        for (int i = 0; i < 26; ++i) {
            delete nodes[i];
        }
    }
};

struct trie {
    node* root;
    void clear() {
        root = new node;
    }
    int add(string& s) {
        int n = s.size();
        int res = 1;
        node* curr = root;

        for (int i = 0; i < n; ++i) {
            int c = s[i] - 'a';
            if (curr->added[c]) {
                ++res;
            } else {
                curr->nodes[c] = new node;
                curr->added[c] = 1;
            }
            curr = curr->nodes[c];
        }
        return min(res, n);
    }
};


int main() {
    freopen("C:\\Users\\me\\Desktop\\in.txt", "r", stdin);
    freopen("C:\\Users\\me\\Desktop\\output3.txt", "w", stdout);
    int t;
    cin >> t;

    int n;
    string input;
    int res;
    trie tree;

    for (int i = 1; i <= t; ++i) {
        cin >> n;

        tree.clear();
        res = 0;
        for (int j = 0; j < n; ++j) {
            cin >> input;
            res += tree.add(input);
        }
        printf("Case #%d: %d\n", i, res);
    }

    return 0;
}

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 
#define ALPHABET_SIZE 26
 
struct node {
    int data;
    struct node* link[ALPHABET_SIZE];
};
 
struct node* root = NULL;
 
struct node*  create_node() {
    struct node *q = (struct node*)malloc(sizeof(struct node));
    int x;
    for(x=0;x<ALPHABET_SIZE;x++)
        q->link[x] = NULL;
    q->data = -1;
    return q;
}
 
// Look at this function like this: (Comparing it with LinkedList traversal for adding a node at the end of the list)
// Keep traversing, (q = q->link[index] instead of q = q->link) until we get q->link[index] == NULL (instead of q->link == NULL)
// When we get NULL, then instead of adding just 1 node and making the previous node point to it, we create as many new nodes
// as the value of (length - level) at that time.
void insert_node(char key[]) {
    int length = strlen(key);
    int index;
    int level = 0;
    if(root == NULL)
        root = create_node();
    struct node *q = root;  // For insertion of each String key, we will start from the root
 
    for(;level < length;level++) {
        // At each level, find the index of the corresponding
        // character (a-z = 0-26)
        index = key[level] - 'a';
 
        if(q->link[index] == NULL) {
            // Put the value of this character inside q->link[index]
            // and create 1 more node to which this node will point
            q->link[index] = create_node();  // which is : struct node *p = create_node(); q->link[index] = p;
        }
 
        q = q->link[index];
    }
    // Now, the last character(node) of the String key will contain the value of this key
    q->data = level; // Assuming the value of this particular String key is 11     
}
 
int search(char key[]) {
    struct node *q = root;
    int length = strlen(key);
    int level = 0;
    int matched = 0;
    for(;level < length;level++) {
        int index = key[level] - 'a';
        if(q->link[index] != NULL)
        {
            q = q->link[index];
            matched++;
        }
        else
            break;
    }
    /*if(key[level] == '\0' && q->data != -1)
        return q->data;
    return -1;*/
    return matched;
}
 
int main() {
	int t,k;
	scanf("%d",&t);
	for(k=0;k<t;k++)
	{
		int n,i,x,l;
		long long int res=0;
		scanf("%d",&n);
		char a[2000000];
		scanf("%s",a);
		insert_node(a);
		res++;
		for(i=0;i<n-1;i++)
		{
			scanf("%s",a);
			x=search(a)+1;
			insert_node(a);
			if(x>strlen(a))
				res+=strlen(a);
			else
				res+=x;	
		//	printf("step: %lld\n",res);
		}	
		printf("Case #%d: %lld\n",k+1,res);
    }
	return 0;
}

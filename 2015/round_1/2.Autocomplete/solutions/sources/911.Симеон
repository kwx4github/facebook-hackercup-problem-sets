#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string.h>
using namespace std;
typedef int lld;

struct Element
{
    lld wtg[27];
    lld cnt;
};

Element tree[1000002];
const lld head = 0;
lld ffree = 1;
lld tests, t;

lld Get(char a)
{
    return (a-'a');
}

void MakeNew(lld on)
{
    tree[on].cnt = 0;
    memset(tree[on].wtg, -1, sizeof(tree[on].wtg));
}

void AddWord(string s)
{
    lld vert = head;
    lld i, tg;

    for (i=0; i<s.size(); i++)
    {
        tg = tree[vert].wtg[Get(s[i])];

        if (tg == -1)
        {
            tg = ffree++;
            tree[vert].wtg[Get(s[i])] = tg;

            MakeNew(tg);
        }

        tree[tg].cnt++;
        vert = tg;
    }
}

lld ToType(string s)
{
    lld vert = head;
    lld i, tg;

    for (i=0; i<s.size(); i++)
    {
        tg = tree[vert].wtg[Get(s[i])];

        if (tg == -1)
        {
            return i+1;
        }

        vert = tg;
    }

    return s.size();
}



int main ()
{
    freopen("autocomplete.txt", "r", stdin);
    freopen("otp.txt", "w", stdout);

    ios::sync_with_stdio(false);
    cin.tie(NULL);

    lld i, j;
    lld n;
    lld ans;
    string cur;

    cin>>tests;
    for (t=1; t<=tests; t++)
    {
        ///RollBack
        for (i=0; i<1000002; i++)
        {
            MakeNew(i);
        }
        ffree=1;
        ans = 0;

        cin>>n;
        for (i=1; i<=n; i++)
        {
            cin>>cur;
            ans += ToType(cur);
            AddWord(cur);
        }

        cout<<"Case #"<<t<<": "<<ans<<"\n";
    }

    return 0;
}


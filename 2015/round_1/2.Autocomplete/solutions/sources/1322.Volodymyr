#include <iostream>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string.h>
#include <utility>
#include <queue>
#include <stack>
#include <iomanip>
#include <ctype.h>
#include <sstream>
#include <map>
#include <set>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
 
using namespace std;

typedef long long LL;

#define FOR(i,n) for(int i = 0;i < n;i++)
#define MP make_pair
#define PB push_back
#define ALL(a) (a).begin(),(a).end()
#define PII pair<int, int>
#define CLEAR(a) memset(a, 0, sizeof(a))
#define INF 2000000000
const double EPS = 1E-8;
const LL mod = 1000000007;
 
using namespace std;

struct node {
  node* next[26];
  int c;

  node() {
    c = 0;
    FOR(i, 26)
    next[i] = NULL;
  }
};

void rd(node* x) {
  if (x == NULL)
    return;
  FOR(i, 26) {
    rd(x->next[i]);
  }
  delete x;
}

node * root;

int n;
string s;

void add() {
  node * cur = root;
  FOR(i, s.length()) {
    if (cur->next[s[i] - 'a'] == NULL)
      cur->next[s[i] - 'a'] = new node();

    cur = cur->next[s[i] - 'a'];
    cur->c++;
  }
}

int find() {
  node * cur = root;
  int k = 0;

  FOR(i, s.length()) {
    k++;
    cur = cur->next[s[i] - 'a'];

    if (cur == NULL || cur->c == 1)
      break;
  }

  return k;
}

void solve(int tn) {
  cin >> n;
  root = new node();

  int cnt = 0;
  FOR(i, n) {
    cin >> s;
    add();
    cnt += find();
  }

  //rd(root);
  root = NULL;

  cout << "Case #" << tn << ": ";
  cout << cnt << endl;
}

int main() {
  int t;
  cin >> t;
  FOR(i, t) {
    solve(i+1);
  }

  return 0;
}
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MAXL = 1000100;

struct node {
    int next[ 26 ], subtrie;
    bool is_word;
    node() {
        subtrie = 0;
        is_word = false;
        memset( next, -1, sizeof( next ) );
    }
};

int n, m, answer;
node trie[ MAXL ];
char s[ MAXL ];

void cleanup() {
    m = 1;
    answer = 0;
    for ( int i = 0; i < MAXL; i++ ) trie[i] = node();
}

void solve( int t ) {
    cleanup();
    scanf("%d", &n);
    for ( int i = 0; i < n; i++ ) {
        scanf("%s", s); int len = strlen( s );
        int v = 0; int delta = -1;
        for ( int j = 0; j < len; j++ ) {
            trie[v].subtrie += 1;
            if ( delta == -1 && trie[v].subtrie == 1 && j != 0 ) delta = j;
            int c = s[j] - 'a';
            if ( trie[v].next[c] == -1 ) trie[v].next[c] = m++;
            v = trie[v].next[c];
        }
        if ( delta == -1 ) delta = len;
        trie[v].subtrie += 1;
        trie[v].is_word = true;
        answer += delta;
    }
    printf("Case #%d: %d\n", t, answer);
}

int main() {
	time_t start = clock();
	int t; scanf("%d", &t);
	for ( int i = 1; i <= t; i++ ) solve( i );
	fprintf( stderr, "Time: %lf\n", 1.0 * ( clock() - start ) / CLOCKS_PER_SEC );
    return 0;
}

#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>

using namespace std;


struct Trie
{
    char val;
    Trie *childs[27];
    int numChild=0;

    Trie(char ival)
    {
        val = ival;
        for (int i=0; i<27; i++) childs[i]=NULL;
        numChild=0;
    }

    void addChild(char ival)
    {
        if (getChild(ival)) return;

        childs[ival-'a'] = new Trie(ival);
        numChild++;
    }

    Trie *getChild(char val)
    {
        return childs[val-'a'];
    }
};

void append(Trie *root, string &s)
{
    for (int i=0; i<s.size(); i++)
    {
        if (!root->getChild(s[i])) root->addChild(s[i]);
        root = root->getChild(s[i]);
    }
}

int search(Trie *root, string &s)
{
    int cnt=0;
    //cout<<s<<endl;
    int save=0;
    for (int i=0; i<s.size()-1; i++)
    {
        if (root->numChild>1) save=i;
        root = root->getChild(s[i]);
        //cout<<s[i]<<" "<<root->numChild<<endl;
    }

    //root=root->getChild('{');
    if (root->numChild>1) return s.size()-1;
    return save+1;
}
int main()
{
    freopen("autocomplete.txt","r",stdin);
    freopen("b.out","w",stdout);
    int T;
    scanf("%d",&T);
    for (int cas=1; cas<=T; cas++)
    {
        int n;
        scanf("%d",&n);
        Trie *root = new Trie('0');
        char str[1000010];
        int ans=0;
        for (int i=0; i<n; i++)
        {
            scanf("%s",str);
            string s(str);
            s.push_back('{');
            append(root, s);
            //cout<<root->numChild<<endl;
            //cout<<search(root,s)<<endl;
            ans+=search(root,s);
        }
        printf("Case #%d: %d\n",cas,ans);
    }

    return 0;
}

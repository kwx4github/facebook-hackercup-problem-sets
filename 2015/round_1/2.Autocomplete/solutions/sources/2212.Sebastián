#include <iostream>
#include <list>
#include <string>

using namespace std;
typedef list<string> strlist;
typedef list<string>::iterator strIter;

strlist lista;
strIter indx[30];  // index of char
bool vindx[30];  // index valid

long equalstart(string a, string b)
{
    long n=0;
    long sa=a.length();
    long sb=b.length();
    while ((n<sa) && (n<sb) && (a[n]==b[n]))
        n++;
    return n;
}

int main(int argc, char** argv)
{
    int T,c;
    long N;
    cin >> T;
    for (int t=1; t<=T; t++)
    {
        lista.clear();
        for (int i=0; i<30; i++)
            vindx[i]=false;
        cin >> N;
        long nk=1;
        string word;
        cin >> word;
        lista.push_front(word);
        c=word[0]-'a';
        vindx[c]=true;
        indx[c]=lista.begin();
        for (long n=1; n<N; n++)
        {
            string word;
            long a,b;
            strIter punt;
            cin >> word;
            c=word[0]-'a';
            while ((c<29) && !vindx[c])
                c++;
            if (vindx[c])
                punt=indx[c];
            else
                punt=lista.end();
            while ((punt!=lista.end()) && (*punt<word))
                ++punt;
            if (punt!=lista.end())
            {
                b=equalstart(*punt, word);
                if (punt!=lista.begin())
                {
                    --punt;
                    a=equalstart(*punt, word);
                    punt=lista.insert(++punt, word);
                    c=word[0]-'a';
                    if (!vindx[c] || (*indx[c]>word))
                    {
                        vindx[c]=true;
                        indx[c]=punt;
                    }
                }
                else
                {
                    a=0;
                    lista.push_front(word);
                    c=word[0]-'a';
                    vindx[c]=true;
                    indx[c]=lista.begin();
                }
            }
            else
            {
                b=0;
                a=equalstart(lista.back(), word);
                punt=lista.insert(lista.end(), word);
                c=word[0]-'a';
                if (!vindx[c])
                {
                    vindx[c]=true;
                    indx[c]=punt;
                }
            }
            if (b>a) a=b;
            if (a<word.length()) a++;
            nk+=a;
        }
        cout << "Case #" << t << ": " << nk << endl;
    }
    return 0;
}


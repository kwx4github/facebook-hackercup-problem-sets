#include <iostream>
#include <sstream>
#include <iomanip>
#include <iosfwd>
#include <algorithm>
#include <iterator>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <limits>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
using namespace std;

#define MP(a,b) make_pair((a),(b))
#define FOR(i,n) for(int i = 0;i <(int)(n); i++)
#define REP(i,n,m) for(int i =(int)(n);i<(int)(m);i++)
#define MF(a,b) memset((a), (b), sizeof((a)))
typedef pair<int,int> ipair;
typedef pair<double,double> dpair;
typedef long long int64;


const int INF = numeric_limits<int>::max();
//const int MAX_N = 100001;
const int MAX_S = 1000001;
const int MAX_A = 26;

class Trie{
public:
    int ch[MAX_S][MAX_A];
    int val[MAX_S];
    int masks[MAX_S][MAX_A];
    int sz;
    int len;
    Trie(){
        sz=1;
        len = 0;
        MF(ch[0], 0);
        MF(val, 0);
        MF(masks[0], 0);
    }
    int idx(char c){return c - 'a';};
    void insert(string str,int v = 1){
        int u = 0,n = (int)str.size();
        bool hasUsed = false;
        bool hasCreate = false;
        FOR(i, n){
            int c = idx(str[i]);
            if (!ch[u][c]) {
                MF(ch[sz], 0);
                MF(masks[sz], 0);
                val[sz]=0;
                ch[u][c]=sz++;
                hasCreate = true;
            }
            u = ch[u][c];
            if (hasCreate == true&&
                hasUsed==false&&
                masks[u][c]==0) {
                masks[u][c]=1;
                len+=i+1;
                hasUsed=true;
            }
        }
        if (hasUsed == false) {
            len += n;
        }
        val[u]=v;
    }
};


int main(int argc, const char * argv[])
{
#ifndef ONLINE_JUDGE
    freopen("//Users//lebinjiang//Project//input.txt", "r", stdin);
    freopen("//Users//lebinjiang//Project//output.txt", "w", stdout);
#endif
    std::ios::sync_with_stdio(false);
    int T;
    cin>>T;
    FOR(t, T){
        Trie* trie = new Trie();
        string str;
        int n;
        cin>>n;
        FOR(i, n){
            cin>>str;
            trie->insert(str, i);
        }
        cout<<"Case #"<<t+1<<": "<<trie->len<<endl;
        delete trie;
    }
    
    return 0;
}


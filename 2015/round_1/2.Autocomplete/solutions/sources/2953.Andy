package round1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by anhsu on 1/17/15.
 */
public class Autocomplete {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new FileReader("autocomplete.txt"));
        PrintWriter writer = new PrintWriter("autocomplete_output.txt", "UTF-8");

        int numofTestCases = Integer.valueOf(br.readLine());
        for (int i = 0; i < numofTestCases; i++) {
            Node[] listOfCharacters = new Node[26];
            //form each test case
            int numOfWords = Integer.valueOf(br.readLine());
            List<String> list = new ArrayList<>();
            for (int j = 0; j < numOfWords; j++) {
                list.add(br.readLine());
            }
            AutocompleteTestCase autocompleteTestCase = new AutocompleteTestCase(list);
            int totalCount = 0;

            for (String word : autocompleteTestCase.wordsToType) {
                //populate the trie and find the min number of characters
                totalCount = addWord(word, listOfCharacters) + totalCount;
            }
            int testCaseNumber = i + 1;
            writer.println("Case #" + testCaseNumber + ": " + totalCount);
        }
        writer.close();
        br.close();
    }

    private static int addWord(String word, Node[] listOfCharacters) {
        Node[] curListOfCharacters = listOfCharacters;
        char[] c = word.toCharArray();
        int toReturn = -1;

        for (int i = 0; i < word.length(); i++) {
            Node node = curListOfCharacters[c[i] - 'a'];
            if (node == null) {
                node = new Node(c[i]);
                curListOfCharacters[c[i] - 'a'] = node;
            }

            node.count++;
            if (node.count == 1 && toReturn == -1) {
                toReturn = i + 1;
            }

            curListOfCharacters = node.children;
        }
        return toReturn == -1 ? word.length() : toReturn;
    }

    static class Node {
        int count = 0;
        char letter;
        Node[] children = new Node[26];

        Node(char letter) {
            this.letter = letter;
        }
    }

    static class AutocompleteTestCase {
        List<String> wordsToType;

        AutocompleteTestCase(List<String> wordsToType) {
            this.wordsToType = wordsToType;
        }
    }
}

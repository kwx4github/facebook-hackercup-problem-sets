#include <vector>
#include <iostream>
#include <sstream>
#include <math.h>
#include <sys/time.h>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cstring>
#include <fstream>
#include <set>
#include <map>

#define FOR(i,a,b)  for(__typeof(b) i=(a);i<(b);++i)
#define REP(i,a)    FOR(i,0,a)
#define FOREACH(x,c)   for(__typeof(c.begin()) x=c.begin();x != c.end(); x++)
#define ALL(c)      c.begin(),c.end()
#define CLEAR(c)    memset(c,0,sizeof(c))
#define SIZE(c) (int) ((c).size())

#define PB          push_back
#define MP          make_pair
#define X           first
#define Y           second

#define ULL         unsigned long long
#define LL          long long
#define LD          long double
#define II         pair<int, int>
#define DD         pair<double, double>

#define VC	    vector
#define VI          VC<int>
#define VVI         VC<VI>
#define VD          VC<double>
#define VS          VC<string>
#define VII         VC<II>
#define VDD         VC<DD>

#define DB(a)       cerr << #a << ": " << a << endl;

using namespace std;

template<class T> void print(VC < T > v) {cerr << "[";if (SIZE(v) != 0) cerr << v[0]; FOR(i, 1, SIZE(v)) cerr << "," << v[i]; cerr << "]\n";}
template<class T> string i2s(T &x) { ostringstream o; o << x; return o.str(); }
VS split(string &s, char c = ' ') {VS all; int p = 0, np; while (np = s.find(c, p), np >= 0) {if (np != p) all.PB(s.substr(p, np - p)); p = np + 1;} if (p < SIZE(s)) all.PB(s.substr(p)); return all;}

struct Node{
    map<char,int> next;
    int cnt = 0;
};

vector<Node> v;

int solve(){
    v.clear();
    v.PB(Node());
    int cnt;
    cin >> cnt;
    string s;
    int res = 0;
    REP(foo,cnt){
        cin >> s;
        int idx=0;
        int found=0;
        REP(i,SIZE(s)){
            if (v[idx].next.count(s[i]) == 0){
                v.PB(Node());
                v[idx].next[s[i]] = SIZE(v)-1;
            }
            if (i > 0 && v[idx].cnt == 1 && !found){
                found = 1;
                res += i;
            }
            idx = v[idx].next[s[i]];
            v[idx].cnt++;
        } 
        if (!found) 
            res += SIZE(s); 
    }
    return res;
}

int main(int argc, char *argv[]){
    int T;
    cin >> T;
    REP(t,T)
        cout << "Case #" << t+1 << ": " << solve() << endl;
    return 0;
}

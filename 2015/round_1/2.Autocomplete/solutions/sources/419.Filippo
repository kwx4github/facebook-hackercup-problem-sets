#include <algorithm>
#include <functional>
#include <iostream>
#include <set>
#include <string>

using namespace std;

struct set_info_t {
	int p, l;
	set_info_t(int p_, int l_) : p(p_), l(l_) { }
};

void solve(int t) {
	string S;
	S.reserve(1000000);
	set< set_info_t, function< bool(const set_info_t &, const set_info_t &) > >
		strings([&](const set_info_t & x, const set_info_t & y) {
			return lexicographical_compare(S.begin() + x.p, S.begin() + x.p + x.l, S.begin() + y.p, S.begin() + y.p + y.l);
		});
	int ans = 0;
	
	int N;
	cin >> N;
	for(int n = 0; n < N; ++n) {
		string str;
		int mis = 1;
		cin >> str;
		set_info_t my_set_info(S.length(), str.length());
		S.append(str);
		auto low = strings.lower_bound(my_set_info);
		auto update_mis = [&]() {
			auto m = mismatch(S.begin() + low->p, S.begin() + low->p + low->l, str.begin()).second;
			if(m == str.end()) --m;
			mis = max(mis, m - str.begin() + 1);
		};
		if(low != strings.end())
			update_mis();
		if(low != strings.begin()) {
			--low;
			update_mis();
		}
		strings.insert(my_set_info);
		ans += mis;
	}
	
	cout << "Case #" << t << ": " << ans << '\n';;
}

int main() {
	ios_base::sync_with_stdio(false);
	int T;
	cin >> T;
	for(int t = 1; t <= T; ++t) solve(t);
}

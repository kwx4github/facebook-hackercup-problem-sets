#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <string>
using namespace std;

class Node
{
public:
    char value;             // the character value (a-z)
    int count = 0;
    bool end;               // indicates whether this node completes a word
    Node * children[26];    // represents the 26 letters in the alphabet
    Node(char value);
    ~Node();
};

Node::Node(char value)
{
    this->value = value;
    // Initializes all of the children with NULL value
    for (int i = 0; i < 26; ++i)
        children[i] = NULL;
}


Node::~Node()
{
    // free resources
}

class Trie
{
public:
    Trie();
    ~Trie();
    void addWord(string word);
    bool searchForWord(string word);
    void deleteWord(string word);
    Node * getRoot();
private:
    Node * root;
};

Trie::Trie()
{
    root = new Node(' ');
    root->end = true;
}

Trie::~Trie()
{
    // Free resources
}

Node * Trie::getRoot()
{
    return root;
}

void Trie::addWord(string word)
{
    Node * currentNode = root;

    for (int i = 0; i < word.size(); ++i)
    {
        currentNode->count+=1;
        //cout << "A node updated to " << currentNode->count << endl;
        char currentChar = tolower(word.at(i));
        int index = currentChar - 'a';
        if (currentNode->children[index] != NULL)
        {
            currentNode = currentNode->children[index];
        }
        else
        {
            Node * newNode = new Node(currentChar);
            currentNode->children[index] = newNode;
            currentNode = newNode;
        }
        if (i == word.size() - 1)
        {
            currentNode->end = true;
        }
    }
    currentNode->count+=1;
}


int prefix(Node * node, string s) // returns win or loss for node
{
    int len = 0;
    Node * currentNode = node;
    while (len == 0 || currentNode->count>1 && len<s.length()){
        //cout << len << endl;
        currentNode = currentNode->children[(s[len]-'a')];
        len++;
        //cout << s << " char = " << len << " node has count = " << currentNode->count << endl;
    }
    return len;

}




void solve(){
    Trie * t = new Trie();
    string s;
    int N;
    scanf("%d", &N);
    int tot = 0;
    getline(cin, s);
    for (int i = 0; i<N; i++){
        getline(cin, s);
        //cout << "read in = " << s << endl;
        t->addWord(s);
        //cout << "add successfull" << endl;
        //cout << s << " returns " << prefix(t->getRoot(), s) << endl;
        tot += prefix(t->getRoot(), s);

    }

    printf("%d\n", tot);

}

int main(){
    freopen("autocomplete.in", "r", stdin);
    freopen("autocomplete.out", "w", stdout);

    int T;
    scanf("%d", &T);
    for (int q = 1; q<=T; q++){
        printf("Case #%d: ", q);
        solve();


    }
}

import java.util.*;
import java.io.*;

public class autocomplete {
	private static TrieNode root;
	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader("autocomplete.txt"));
		String cas = in.readLine();
		int n = Integer.parseInt(cas);
		BufferedWriter out = new BufferedWriter(new FileWriter("autocomplete_answer.txt"));

		for (int j = 0; j < n; ++j) {
			int wordNum = Integer.parseInt(in.readLine());
			
			List<String> words = new ArrayList<String>();
			for (int i = 0; i < wordNum; ++i) words.add(in.readLine());
			int total = 0; 

			root = new TrieNode();
			for (String word : words) {
				total += root.getLevelAndInsert(word);
			}
			// System.out.println("Case #"+(j+1)+": " + total + "\n");
			out.write("Case #"+(j+1)+": " + total + "\n");
		}
		in.close();
		out.close();
	}
}



class TrieNode {
	private TrieNode root = this;
	private int numOfChildren;
	private HashMap<Character, TrieNode> children;
	private boolean isEnd;

	public TrieNode() {
		numOfChildren = 0;
		children = new HashMap<Character, TrieNode>();
		isEnd = false;
	}

	public HashMap<Character, TrieNode> getChildren() { return children; }
	public void setIsEnd(boolean val) { this.isEnd = val; }
	public void countNumOfChildren() { this.numOfChildren += 1; }
	public void setNumOfChildren(int n) { this.numOfChildren = n; }
	public int getNumOfChildren() { return this.numOfChildren; }
	public boolean isEnd() { return this.isEnd; }

	public int getLevelAndInsert(String word) {
		TrieNode cur = root;

		int level = 0;
		for (int i = 0; i < word.length(); ++i) {
			++level;
			char c = word.charAt(i);
			TrieNode child = cur.getChildren().get(c);
			if (child == null) {
				insert(cur, word.substring(i));
				break;
			} else {
				cur = child;
			}
		}

		return level;
	}

	public boolean contains(String word) {
		TrieNode cur = root;
		int i = 0;
		while (i < word.length()) {
			cur = cur.getChildren().get(word.charAt(i++));
			if (cur == null) return false;
		}

		return cur.isEnd;
	}


	public void insert(TrieNode node, String word) {
		TrieNode crawl = node; 
		for (int i = 0; i < word.length(); i++) {
			crawl.countNumOfChildren();
			char c = word.charAt(i);
			if (!crawl.getChildren().containsKey(c)) {
				crawl.getChildren().put(c, new TrieNode());
			} 
			crawl = crawl.getChildren().get(c);
		}
		crawl.setIsEnd(true);
	}
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).endi()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl

#define SORT(c) sort(ALL(c))
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())

int nexti[1000010][26];
int cnt;
char buff[1000010];
int res;

inline void clear(int node){
	for(int i = 0; i < 26; i++) nexti[node][i] = -1;
}
void reset(){
	clear(0);
	cnt = 1;
}

void add(char *s){
	int node = 0;
    int vis = 0;
	while(*s){
		int pos = *s - 'a';
		if(nexti[node][pos] == -1){
            if (vis == 0) res++, vis = 1;
			clear(cnt); nexti[node][pos] = cnt; cnt++;
		} 
        else res++;
		node = nexti[node][pos]; 
		s++;
	}
}
	
int main(){
	freopen("autocomplete.txt", "r", stdin);
	freopen("outB.txt", "w", stdout);
    int T, n;
    scanf("%d", &T);
    REPN(tc, 1, T+1) {
        reset();
        res = 0;
        scanf("%d", &n);
        REP(i, n) {
            scanf("%s", buff);
            add(buff);
        }
        printf("Case #%d: %d\n", tc, res);
    }
    return 0;
}

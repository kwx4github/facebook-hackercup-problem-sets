#include <iostream>
#include <set>
#include <string>
#include <fstream>

using namespace std;

std::set<std::string> myset;

inline int max(int a, int b){ return (a >b) ? a : b; }

int cal(string str){
	auto it = myset.insert(str);
	
	set<string>::iterator beforeNode, nextNode;
	string before, next;
	nextNode = beforeNode = it.first;

	int count1 = 0, count2 = 0;
	int size = str.size();
	if (it.first != myset.begin()){		
		beforeNode--;
		before = *beforeNode;
		for (int i = 0; i < size; i++){
			if (before[i] == str[i]) 
				count1++;
			else 
				break;
		}
	}

	nextNode++;
	if (nextNode != myset.end()){
		next = *nextNode;
		for (int i = 0; i < size; i++){
			if (next[i] == str[i]) 
				count2++;
			else 
				break;
		}
	}

	if (count1 < size) count1++;
	if (count2 < size) count2++;

	return max(count1, count2);
}


int main(){
	int T, N;
	ifstream input("autocomplete.txt");
	ofstream output("output.txt");

	string line;
	input >> T;
	for (int i = 0; i < T; i++){
		input >> N;
		int count = 0;
		for (int n = 0; n < N; n++){
			input >> line;
			count += cal(line);
		}
		output << "Case #" << i + 1 << ": " << count << endl;
		myset.clear();
	}
	return 0;
}
#include <cstdio>
#include <cassert>

#include <vector>
#include <set>
#include <algorithm>
#include <iostream>

#define sz(c) ((int)(c).size())

using namespace std;

int lcp(string const& u, string const& v) {
  int r = 0, rn = min(sz(u), sz(v));
  while (r < rn && u[r] == v[r])
    r++;
	return r;
}

int typed(string const& has, string const& s) {
  int n = lcp(has, s);
  if (n == sz(s)) {
    return n;
  }
  return n + 1;
}

void solve() {
  int n;
  scanf("%d", &n);
  set<string> ss;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    auto it = ss.upper_bound(s);
    int add = 1;
    if (it != ss.end()) {
      add = max(add, typed(*it, s));
    }
    if (it != ss.begin()) {
      add = max(add, typed(*--it, s));
    }
    ans += add;
//    fprintf(stderr, ">> add = %d\n", add);
    ss.insert(s);
  }
  printf("%d\n", ans);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; t++) {
    printf("Case #%d: ", t + 1);
    solve();
  }
  return 0;
}

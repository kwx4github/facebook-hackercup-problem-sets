import java.io.BufferedReader;
import java.io.FileReader;

import java.lang.Math;
import java.util.Map;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.HashSet;

public class AutoComplete {

  public static void main(String[] args) throws Exception {

  	String FILE_NAME = "autocomplete.txt";
  	BufferedReader br = null;
    try {
    	br = new BufferedReader(new FileReader(FILE_NAME));
        int numberOfSentences = Integer.parseInt(br.readLine());

        
        int caseNumber = 1;
        while (numberOfSentences-- > 0) {

          Trie trie = new Trie();
          int minWordCount = 0;
          int numberOfWords = Integer.parseInt(br.readLine());

          while (numberOfWords-- >0) {

            String word = br.readLine();
            trie.add(word);
            int count = getMinimumWordsBeforeCompletion(trie, word);
            minWordCount+= count;
          }
          System.out.println("Case #" + caseNumber++ + ": " + minWordCount);
        }

    } finally { br.close(); }
  }

  private static int getMinimumWordsBeforeCompletion(Trie trie, String word) {
    return trie.getMinWordsRequiredBeforeCompletion(0, 0, word);
  }

}

// used trie implementation from http://codereview.stackexchange.com/questions/59398/java-trie-implementation
// nobody got time for their own
class Trie {

    public final HashMap<Character, HashMap> root = new HashMap<>();
    private final Character END_CHARACTER = '$';

    public Trie() {
    }

    public void add(final String s) {
        internalAdd(s);
    }

    private void internalAdd(final String s) {
        Map<Character, HashMap> node = root;

        for (int i = 0; i < s.length(); i++) {
            Character character = s.charAt(i);
            if (node.isEmpty() || !node.containsKey(character)) {
                internalAdd(s.substring(i), node);
                break;
            }
            node = node.get(character);
        }
        node.put(END_CHARACTER, new HashMap<>());
    }

    private void internalAdd(final String s, Map<Character, HashMap> node) {
        for (int i = 0; i < s.length(); i++) {
            Character character = s.charAt(i);
            node.put(character, new HashMap<>());
            node = node.get(character);
        }
    }

    public int getMinWordsRequiredBeforeCompletion(int words, int singleCharWordCount, final String s) {

        HashMap<Character, HashMap> node = root;
        for (int i = 0; i < s.length(); i++) {
            Character character = s.charAt(i);

            if (node.isEmpty()) {
              return words;
            }

            // only ending char left, return
            if (node.size() == 1 && node.containsKey(END_CHARACTER)) {
              return words;
            }

            if (node.containsKey(character)) {
                if (i == 0) {
                  words++;
                } else {
                  if (node.size() > 1) {    
                    words = words + 1 + singleCharWordCount;
                    singleCharWordCount = 0;

                  } else {
                    singleCharWordCount++;
                  }
                }
                node = node.get(character);
            } else {
                return words;
            }
        }

        if(!node.isEmpty()) {
          return words + singleCharWordCount;
        }
        return words;
    }

    private static void print(String s) {
      //System.out.println(s);
    }
}
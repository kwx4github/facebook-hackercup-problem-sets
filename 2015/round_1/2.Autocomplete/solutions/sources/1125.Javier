//============================================================================
// Judge    : 
// Problem  : 
// Author   : Carlos Mendoza
// Category : 
// Notes    : 
//============================================================================
#include <bits/stdc++.h>
using namespace std;
const int ALPH_SIZE = 26; // Tamaño del alfabeto

struct Node
{
    vector<Node*> links; // Enlaces a los nodos hijos
    Node();
};

Node::Node()
{
    links.resize(ALPH_SIZE, NULL);
}

class Trie
{
    public:
        int ans;
        Trie();
        void insert(const string &s);
    private:
        Node* myRoot; // Raíz del trie
};

Trie::Trie() { myRoot = new Node(); ans = 0; }

void Trie::insert(const string &s)
{
   int len = (int)s.size();
   Node* t = myRoot;
   bool flag = true;
   for(int k = 0; k < len; ++k)
   {
      if(t->links[s[k] - 'a'] == NULL)
      {
          t->links[s[k] - 'a'] = new Node();
          if(flag) 
          {
              ans += (k+1);
              flag = false;
          }
      }
      t = t->links[s[k] - 'a'];
   }
   if(flag)
       ans += len;
}

int main() 
{
    int T,N,ntest=1;
    string s;
    Trie *obj;
    cin >> T;
    while(T--)
    {
        obj = new Trie();
        cin >> N;
        for(int i = 0; i < N; i++)
        {
            cin >> s;
            obj->insert(s);
        }
        cout << "Case #" << ntest++ << ": " << obj->ans << endl;
        delete obj;
    }
    return 0;
}


class node(object):
    value = ""
    chldrn_node_map = dict()
    def __init__(self, value = ""):
        self.value = value

    def has_child(self, value):
        if value in self.chldrn_node_map:
            return True
        return False

    def add_child(self, value):
        new_node = node(value)
        self.chldrn_node_map[value] = new_node

    def get_node(self, value):
        return self.chldrn_node_map[value]

##def add(root_node, strrr):
##
##    curr_node = root_node
##    for value in strrr:
##        if not curr_node.has_child(value):
##            curr_node.add_child(value)
##        curr_node = curr_node.get_node(value)
##
##def find_length(root_node, strrr):
##    curr_node = root_node
##    ans = 1
##    for value in strrr[:-1]:
##        if not curr_node.has_child(value): break
##        ans = ans + 1
##        curr_node = curr_node.get_node(value)
##    return ans

def add(root_node, strrr):
    current_dict = root_node
    for l in strrr:
        if l not in current_dict:
            current_dict[l] = dict()
        current_dict = current_dict[l]

def find_length(root_node, strrr):
    current_dict = root_node
    ans = 1
    for l in strrr[:-1]:
        if l not in current_dict: break
        ans = ans + 1
        current_dict = current_dict[l]
    return ans


def main():
    file = open("input.txt")
    file_o = open("output.txt", 'w')
    T = int(file.readline())
    for t in range(T):
        root_node = dict()
        n = int(file.readline())
        ans = 0
        for _ in range(n):
            strrr = list(str(file.readline().split()[0]))
            ans = ans + find_length(root_node, strrr)
            add(root_node, strrr)
        file_o.write( "Case #" + str(t+1) + ": " + str(ans) + "\n")
    file_o.close()

main()
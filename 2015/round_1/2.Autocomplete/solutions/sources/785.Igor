#include <map>
#include <set>
#include <queue>
#include <vector>
#include <cstdio>
#include <iostream>

using namespace std;

const int how = 1e7;

typedef struct node {
    char ch;
    int cnt;
    map<char, node*> kids;
} node;

node *ctor(char ch) {
    node *nd = new node;
    nd->ch = ch;
    nd->cnt = 0;
    return nd;
}

void add(node *root, string &s) {
    for(char c : s) {
        if(root->kids[c] == 0) {
            root->kids[c] = ctor(c);
        }
        root = root->kids[c];
        root->cnt++;
    }
}

int look(node *root, string &s) {
    int cnt = 1;
    root = root->kids[s[0]];
    for(int i = 1; root != 0 && i < s.size() && root->cnt != 1; i++) {
        root = root->kids[s[i]];
        cnt++;
    }
    return cnt;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int T;
    scanf("%d", &T);
    for(int t = 0; t < T; t++) {
        int n;
        scanf("%d", &n);

        int ans = 0;
        node *root = ctor(' ');
        for(int i = 0; i < n; i++) {
            string s;
            cin >> s;

            if(s != "") {
                add(root, s);
                ans += look(root, s);
            }
        }
        printf("Case #%d: %d\n", t+1, ans);
    }

    return 0;
}



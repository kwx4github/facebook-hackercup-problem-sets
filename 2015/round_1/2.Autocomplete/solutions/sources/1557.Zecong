//Template
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <climits>
#include <cmath>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <ios>
#include <iomanip>
#include <ctime>
#include <numeric>
#include <functional>
#include <fstream>
#include <string>
#include <vector>
#include <bitset>
#include <cstdarg>
#include <complex>
using namespace std;

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef long double ld;
#define pair(x, y) make_pair(x, y)
#define runtime() ((double)clock() / CLOCKS_PER_SEC)

inline int read() {
	static int r, sign;
	static char c;
	r = 0, sign = 1;
	do c = getchar(); while (c != '-' && (c < '0' || c > '9'));
	if (c == '-') sign = -1, c = getchar();
	while (c >= '0' && c <= '9') r = r * 10 + (int)(c - '0'), c = getchar();
	return sign * r;
}

template <typename T>
inline void print(T *a, int n) {
	for (int i = 1; i < n; ++i) cout << a[i] << " ";
	cout << a[n] << endl;
}
#define PRINT(_l, _r, _s, _t) { cout << #_l #_s "~" #_t #_r ": "; for (int _i = _s; _i != _t; ++_i) cout << _l _i _r << " "; cout << endl; }

#define MAX 1100000
struct Node {
	int s[26], cnt;
} tree[MAX + 1];
int tot = 1, T, n;
char s[MAX + 1];

void insert(char *s) {
	int len = strlen(s), p = 1;
	for (int i = 0; i < len; ++i) {
		++tree[p].cnt;
		int c = s[i] - 'a';
		if (!tree[p].s[c]) tree[p].s[c] = ++tot;
		p = tree[p].s[c];
	}
	++tree[p].cnt;
}

int query(char *s) {
	int len = strlen(s), p = 1;
	for (int i = 0; i < len; ++i) {
		if (tree[p].cnt == 1) return i;
		p = tree[p].s[s[i] - 'a'];
	}
	return len;
}

int main(int argc, char *argv[]) {
#ifdef KANARI
	freopen("autocomplete.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	
	int Case = 0;
	scanf("%d", &T);
	while (T--) {
		for (int i = 1; i <= tot; ++i) {
			memset(tree[i].s, 0, sizeof tree[i].s);
			tree[i].cnt = 0;
		}
		tot = 1, tree[1].cnt = 1;
		scanf("%d", &n);
		int ans = 0;
		for (int i = 1; i <= n; ++i) {
			scanf("%s", s);
			insert(s);
			ans += query(s);
		}
		printf("Case #%d: %d\n", ++Case, ans);
	}
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}

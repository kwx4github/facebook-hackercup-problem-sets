import java.io.FileInputStream;
import java.util.Arrays;
import java.util.Scanner;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Ivan Myasoid
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("autocomplete.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete_output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		solver.solve(1, in, out);
		out.close();
	}
}

class Autocomplete {

    public static int nMax = (int) (1e6 + 1);

    public void solve(int testNumber, Scanner in, PrintWriter out) {


        int numberOfCases = in.nextInt();

        for (int casesCounter = 1; casesCounter < numberOfCases + 1; casesCounter++) {

            int numberOfWords = in.nextInt();
            Forest forest = new Forest(nMax);

            int result = 0;
            for (int j = 0; j < numberOfWords; j++) {
                result += forest.addWord(in.next());
            }
            out.println("Case #" + casesCounter + ": " + result);
        }

    }
}

class Forest {

    Vertex[] t;
    int size;

    public Forest(int max) {
        this.t = new Vertex[max];
        this.size = 1;
        for (int i = 0; i < max; i++) {
            t[i] = new Vertex();
        }
    }

    int addWord(String word) {
        int result = 0;
        int v = 0;
        for (int i = 0; i < word.length(); ++i) {

            int c = word.charAt(i) - 'a';
//            if (v==200001){
//                System.out.println("max");
//            }
            if (t[v].next[c] == -1) {
                t[v].next[c] = size++;
                if (result == 0) {
                    result = i + 1;
                }
            }

            v = t[v].next[c];
        }

        return result == 0 ? word.length() : result;
    }

    private static class Vertex {
        int[] next;

        public Vertex() {
            this.next = new int[26];
            Arrays.fill(next, -1);
        }
    }

}


#include <algorithm>
#include <cstdio>
#include <memory>
#include <string>

#define ALPHABET_SIZE 26
#define MAX_WORD_SIZE 1000005

using namespace std;

class Trie {
 public:
  Trie() {};

  ~Trie() {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
      if (next[i] != nullptr)
        next[i].release();
    }
  }

  void insert(char* word, int index) {
    added_words++;
    if (word[index] == '\0')
      return;


    char x = word[index];
    if (next[x - 'a'] == nullptr) {
      next[x - 'a'].reset(new Trie());
    }

    next[x - 'a']->insert(word, index + 1);
  }

  int minimum_prefix(char* word, int index) {
    // We should always find the word in the trie, otherwise something must be
    // wrong.
    if (index >= MAX_WORD_SIZE || added_words == 0) {
      printf("Index: %d Added Words: %d\n", index, added_words);
      throw std::exception();
    }

    if (added_words == 1) {
      return (index == 0) ? 1 : index;
    } else if (word[index] == '\0') {
      return index;
    }

    char x = word[index];
    if (next[x - 'a'] == nullptr) {
      printf("Next: %c\n", x);
      throw std::exception();
    }

    return next[x - 'a']->minimum_prefix(word, index + 1);
  }

 private:
  std::unique_ptr<Trie> next[ALPHABET_SIZE];
  unsigned int added_words;
};

int main() {
  int T;
  scanf("%d", &T);

  char word[MAX_WORD_SIZE];
  for (int i = 1; i <= T; i++) {
    int N;
    scanf("%d", &N);

    std::unique_ptr<Trie> trie(new Trie());
    unsigned int count = 0;
    for (int j = 0; j < N; j++) {
      scanf("%s", word);

      trie->insert(word, 0);
      count += trie->minimum_prefix(word, 0);
    }

    printf("Case #%d: %u\n", i, count);
  }
}

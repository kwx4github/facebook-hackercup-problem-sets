#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>
#include <queue>
#include <unordered_map>

using namespace std;

const long long INF = 1e9;
const int MAXA = 1e7 + 99;

struct Trie {
    Trie() {
        root = getNode();
    }

    int addWord(const string& word) {
        int curNode = root;
        int prefixLen = -1;

        for (int i = 0; i < word.length(); ++i) {
            char c = word[i];
            if (nodes[curNode].links.find(c) == nodes[curNode].links.end()) {
                nodes[curNode].links[c] = getNode();
                if (prefixLen == -1) {
                    prefixLen = i + 1;
                }
            }
            curNode = nodes[curNode].links[c];
        }

        if (prefixLen == -1) {
            prefixLen = word.length();
        }
        return prefixLen;
    }

    struct Node {
        unordered_map<char, int> links;
    };

    int getNode() {
        nodes.resize(nodes.size() + 1);
        return nodes.size() - 1;
    }

    int root;
    vector<Node> nodes;
};

struct Solver {
    Solver()
    { }

    void readInput() {
        cin >> N;
        for (int i = 0; i < N; ++i) {
            string word;
            cin >> word;
            words.push_back(word);
        }
    }

    string solve() {
        int answer = 0;

        for (auto word : words) {
            answer += T.addWord(word);
        }

        return to_string(answer);
    }

    int N;
    vector<string> words;
    Trie T;
};

struct Test {
    Test()
    { }

    bool answer;
};

void gen(int N, int S) {
    freopen("big_input.txt", "w", stdout);
    int T = 1;
    cout << T << endl;
    cout << N << endl;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < S; ++j) {
            cout << 'a';
        }
        cout << endl;
    }
}

int main() {
    //gen(1, 1000000);
    //return 0;
    //freopen("input.txt", "r", stdin);
    //freopen("big_input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("autocomplete.txt", "r", stdin);
    //freopen("autocomplete.out.txt", "w", stdout);
    
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        Solver solver;
        solver.readInput();
        string answer = solver.solve();
        cout << "Case #" << (t + 1) << ": " << answer << endl;
    }

    return 0;
}

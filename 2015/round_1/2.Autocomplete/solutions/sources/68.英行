#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <queue>
#include <tuple>
#include <algorithm>
#include <cstdint>
#include <cstdio>
using namespace std;

struct tree {
	tree():cnt(0) {
	}

	tree *get(char c) {
		if (cs.count(c) == 0) {
			cs[c] = new tree();
		}
		return cs[c];
	}

	map<char, tree*> cs;
	int cnt;
};

void add(tree *root, const string &s) {
	tree *node = root;
	for (int i = 0; i < s.length(); i++) {
		node = node->get(s[i]);
		node->cnt++;
	}
}

int prefix(tree *root, const string &s) {
	tree *node = root;
	for (int i = 0; i < s.length(); i++) {
		node = node->get(s[i]);
		if (node->cnt == 1)
			return i + 1;
	}
	return s.length();
}

int main() {
	int cases; cin >> cases;
	for (int cn = 1; cn <= cases; cn++) {
		int ans = 0;
		tree *t = new tree();
		int n; cin >> n;
		for (int i = 0; i < n; i++) {
			string s; cin >> s;
			add(t, s);
			ans += prefix(t, s);
		}

		cout << "Case #" << cn << ": " << ans << endl;
	}

	return 0;
}

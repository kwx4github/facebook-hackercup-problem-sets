//============================================================================
// Name        : Autocomplete25.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <climits>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <list>

using namespace std;

#define FORIT(i,c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define FV(i,s,v) for (i = int(s); i < v.size(); i++)
#define FOR(i,s,e) for (i = int(s); i < int(e); i++)
#define ALL(c) (c).begin(), (c).end()
#define ALLR(c) (c).rbegin(), (c).rend()

#define INF 1070000000LL
#define MOD 1000000007LL
#define EPS 1e-9

typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
typedef pair<int, int> PI;

vector<map<char, int> > trie ;
int cnt ;


void ins (int nd, string & s, int pos, int foundNewPath){
	while (pos < s.size()){
		if (trie[nd].find(s[pos]) != trie[nd].end()){
			cnt++ ;
			nd = trie[nd][s[pos]] ;
			pos++ ;
			continue ;
		}

		map<char, int> m ;
		trie.push_back(m) ;
		trie[nd][s[pos]] = trie.size()-1;
		if (!foundNewPath)
		{
			cnt++ ;
			foundNewPath = 1 ;
		}
		nd = trie[nd][s[pos]] ;
		pos++ ;
	}

	map<char, int> m ;
	trie.push_back(m) ;
	trie[nd]['-'] = trie.size()-1 ;
}


//Note: Cant create a ref to a vector's element as vectors can move their eles, etc.
//Spent a while debugging a prob due to this.
//void ins (int nd, string & s, int pos, int foundNewPath){
////	cout << "pos: " << pos << ", s = " << s << endl ;
//	if (pos == s.size()){
////		cout << "base case hit, pos: " << pos << endl ;
//		map<char, int> m ;
//		trie.push_back(m) ;
//		trie[nd]['-'] = trie.size()-1 ;
//		return ;
//	}
////	cout << "after base case, pos: " << pos << endl ;
//
//	if (trie[nd].find(s[pos]) != trie[nd].end()){
////		cout << "in if, pos: " << pos << endl ;
//		cnt++;
////		cout << "in if, before ins: " << pos << endl ;
//		ins (trie[nd][s[pos]], s, pos+1, foundNewPath) ;
////		cout << "in if, after ins: " << pos << endl ;
//		return ;
//	}
//	else{
////		cout << "in elsee, pos: " << pos << endl ;
//		map<char, int> m ;
//		trie.push_back(m) ;
//		trie[nd][s[pos]] = trie.size()-1;
//		if (!foundNewPath)
//		{
//			cnt++ ;
//			foundNewPath = 1 ;
//		}
//		ins (trie[nd][s[pos]], s, pos+1, foundNewPath);
////		cout << "in else, returned from call ins, pos: " << pos << endl ;
//		return ;
//	}
//}

int main() {
	int T, N, i, j ;
	string s ;
	cin >> T ;
	FOR (i, 0, T){
		trie.clear() ;
		map<char, int> m ;
		trie.push_back(m) ;
		cnt = 0 ;

		cin >> N ;
		FOR (j, 0, N){
			cin >> s ;
			ins (0, s, 0, 0) ;
		}
		cout << "Case #" << (i+1) << ": " << cnt << endl ;
	}

	return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>
#define fi(n) scanf("%d",&n)
#define rep(i,a,b) for(i = (a); i < (b) ; i++)
using namespace std;


#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
typedef struct trie_node trie_node_t;
struct trie_node{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie{
    trie_node_t *root;
};
 
trie_node_t *getNode(){
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode ){
        int i;
        pNode->value = 1;
        for(i = 0; i < ALPHABET_SIZE; i++){
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}
 
void initialize(trie_t *pTrie){
    pTrie->root = getNode();
}
 
 
int main(){
    int t,T,N,count,level,length,index,temp;
    bool created;
    trie_node_t *pCrawl;

    fi(T);
    string key;
    rep(t,1,T+1){
        trie_t trie;
        initialize(&trie);
        trie_t *pTrie = &trie;
        fi(N);
        count = 0;
        while(N--){
            cin>>key; length = key.size(); temp = 0;
            pCrawl = pTrie->root;
            created = false;
            for( level = 0; level < length; level++ ){
                index = CHAR_TO_INDEX(key[level]);
                if( !pCrawl->children[index] ){
                    pCrawl->children[index] = getNode();
                }
                else{
                    pCrawl->children[index]->value++;
                    temp = level+1;
                }
                if(pCrawl->children[index]->value == 1 && created==false){
                    temp = level+1; created = true;
                }
                pCrawl = pCrawl->children[index];
            }
            count += temp;
        }
        printf("Case #%d: %d\n",t,count);
    }
    return 0;
}
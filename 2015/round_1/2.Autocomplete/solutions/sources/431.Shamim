#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<queue>
#include<sstream>
#include<queue>
#include<ctype.h>
#include<cstring>


using namespace std;

#define re return
#define co continue
#define pb push_back
#define br break
#define sz size


#define pf printf
#define sf scanf

struct Node {
    char ch;
    vector<Node*> children;
};

class Auto {

    int searchSum;
    Node* tryHead;

public:
    Auto() { searchSum=0; tryHead = new Node;}

    void addWord(string word) {
        Node* cur = tryHead;
        bool earlyCut = false;
        for ( int i=0; i<word.size(); i++) {
            Node *nextChild = getNextChild( cur, word[i]);
            if ( nextChild != NULL ) {
                searchSum++;
                cur = nextChild;
            }
            else {
                earlyCut = true;
                cur  = insertNewLetter(cur, word[i]); // return same address
            }
        }
        if ( earlyCut)
            searchSum++;

    }

    Node* getNextChild (Node* cur, char ch) {
        int i;
        for ( i=0; i<cur->children.size(); i++)
            if ( cur->children[i]->ch == ch)
                return cur->children[i];
        return NULL;
    }
    Node* insertNewLetter( Node* cur, char ch) {
        Node* newNode = new Node;
        newNode->ch = ch;
        cur->children.push_back(newNode);
        return newNode;
    }

    int getSum() const {
        return searchSum;
    }

};

int main()
{
    freopen("autocomplete.txt", "r", stdin);
    freopen("ans_auto.txt", "w", stdout);

    int T;
    cin>>T;
    int kase=1;
    while ( T--) {
        int n;
        cin>>n;
        Auto aAuto;
        int i;

        for ( i=0; i<n; i++) {
            string word;
            cin>>word;
            aAuto.addWord(word);
        }
        printf ("Case #%d: %d\n", kase++, aAuto.getSum());
    }
    return 0;
}

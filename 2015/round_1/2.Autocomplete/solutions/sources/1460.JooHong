#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>


using namespace std;

struct node
{
   char alpha;
   node* next[27];
};


int t, tt, n, cnt;
char tmp[1111111];
string s[111111];



void process()
{
   struct node* root = (node*)malloc(sizeof(node));
   for (int i = 0; i < 27; i++)
   {
      root->next[i] = NULL;
   }

   for (int i = 0; i < n; i++)
   {
      bool ck = false;
      struct node* temp = root;
      for (int j = 0; j < s[i].length(); j++)
      {
         int alpha_num = s[i][j] - 'a';
         if (temp->next[alpha_num] == NULL)
         {
            if (ck == false)
            {
               cnt++;
               ck = true;
            }
            struct node* new_node = (node*)malloc(sizeof(node));
            new_node->alpha = s[i][j] - 'a';
            for (int i = 0; i < 27; i++)
            {
               new_node->next[i] = NULL;
            }
            temp->next[alpha_num] = new_node;
            temp = temp->next[alpha_num];
         }
         else
         {
            temp = temp->next[alpha_num];
            cnt++;
         }
      }
   }
}



int main()
{
   FILE *in = fopen("autocomplete.txt", "r");
   FILE *out = fopen("out.txt", "w");

   fscanf(in, "%d", &t);
   tt=t;
   while (t--)
   {
      fscanf(in, "%d", &n);
      for (int i = 0; i < n; i++)
      {
         fscanf(in, "%s", tmp);
         s[i] = tmp;
      }

      cnt = 0;
      process();

      fprintf(out, "Case #%d: %d\n", tt-t, cnt);
   }


   return 0;
}

#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<set>
using namespace std;
#define FOR(i,a,n) for(int i = (a); i <= (n); ++i)
#define FORD(i,a,n) for(int i = (a); i >= (n); --i)
#define REP(i,n) FOR(i,0,(n)-1)
#define RI(i,n) FOR(i,1,(n))
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
#ifdef LOK
#define debug printf
#else
#define debug if(0)printf
#endif
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 1e5 + 5;
const int nax_len = 1e6 + 5;

struct wezel{
	int kraw[26];
	wezel() {
		REP(i,26) kraw[i] = -1;
	}
};

wezel trie[nax_len];
char s[nax_len];
int res,testy,n,ile;

int buduj(int dl) {
	int w = 0;
	int poz = 0;
	int res = dl;
	bool bylo = false;
	while (poz < dl) {
		if (trie[w].kraw[s[poz]-'a'] == -1) {
			trie[ile] = wezel();
			trie[w].kraw[s[poz]-'a'] = ile;
			++ile;
		
			//buduj(ile-1, poz+1, dl);
			if (!bylo)
				res = poz+1;
			bylo = true;
			
		}
		w = trie[w].kraw[s[poz]-'a'];
		++poz;
		
	}
	return res;
}

int main() {
	scanf("%d",&testy);
	FOR(g,1,testy) {
		printf("Case #%d: ",g);
		
		res = 0;
		trie[0] = wezel();
		ile = 1;
		
		scanf("%d",&n);
		REP(i,n) {
			scanf(" %s",s);
			int dl = strlen(s);
			//printf("%d\n",buduj(0,0,dl));
			res += buduj(dl);
		}
		printf("%d\n",res);
		fprintf(stderr,"%d\n",res);
	}
	return 0;
}

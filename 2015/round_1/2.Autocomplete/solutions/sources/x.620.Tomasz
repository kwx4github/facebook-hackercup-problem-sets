#include <bits/stdc++.h>

#define ALL(v) v.begin(), v.end()
#define REP(i, a, b) for(int i = a; i < b; i++)
#define REPD(i, a, b) for(int i = a; i > b; i--)
#define REPLL(i, a, b) for(ll i = a; i < b; i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FORLL(i, a, b) for(ll i = a; i <= b; i++)
#define INF 1000000001

using namespace std;

typedef long long ll;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<ld, ld> pld;
typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;
typedef map<int, int>::iterator mit;
typedef vector<int> vi;
typedef vector<pii > vpii;

#define pb push_back
#define mp make_pair
#define st first
#define nd second

#define EPS 1e-9
#define PI acos(-1.0)
#define MAXN 100007
#define MAXA 30

int z, n;
int nodes_num;
string s[MAXN];

struct node {
    int parent;
    int children[MAXA];
    node() {
        clear();
    }
    void clear() {
        memset(children, -1, sizeof children);
    }
};

node nodes[10*MAXN];

void build(string &w) {
    int c = 0;
    REP(i, 0, w.size()) {
        if(nodes[c].children[w[i]] < 0) {
            nodes[c].children[w[i]] = nodes_num;
            c = nodes_num++;
        }
        else c = nodes[c].children[w[i]];
    }
}

int go(int v, char c) {
    return nodes[v].children[c];
}

int match(string &w) {
    int c = 0;
    REP(i, 0, w.size()) {
        c = go(c, w[i]);
        if(c < 0) return i+1;
    }
    return w.size();
}


int main()
{
    ios_base::sync_with_stdio(0);
	cin >> z;
	FOR(tc, 1, z) {
        cin >> n;
        nodes_num = 1;
        FOR(i, 0, nodes_num) nodes[i].clear();
        int ret = 0;
        REP(i, 0, n) {
            cin >> s[i];
            REP(j, 0, s[i].size()) s[i][j] -= 'a';
            ret += match(s[i]);
            build(s[i]);
        }
        cout << "Case #" << tc << ": " << ret << endl;
	}

    return 0;
}

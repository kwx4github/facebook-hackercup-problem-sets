import java.io.File;
import java.io.PrintWriter;
import java.util.*;
import java.util.concurrent.TransferQueue;

/**
 * Created by jonthoms on 1/17/15.
 */
public class Solution2 {
    static String inputFile = "autocomplete.txt";//"input2.txt";
    static String outputFile = "output2.txt";

    public static void main(String[] args) {
        process();
    }

    private static class Node{
        private HashMap<Character, Node> children = new HashMap<Character, Node>();
        public Node(){
        }
        public int getDepth(char[] word){
            Node n = this;
            int wordLength = word.length;
            for(int i = 0; i < wordLength; ++i){
                Character c = word[i];
                if(n.children.containsKey(c)) {
                    n = n.children.get(c);
                } else {
                    return i + 1;
                }
            }
            return wordLength;
        }
        public void addWord(char[] word){
            Node n = this;
            int wordLength = word.length;
            for(int i = 0; i < wordLength; ++i){
                Character c = word[i];
                if(!n.children.containsKey(c)) {
                    n.children.put(c, new Node());
                }
                n = n.children.get(c);
            }
        }
    }

    private static void process(){
        File file = new File(inputFile);
        Scanner scanner = null;
        try {
            scanner = new Scanner(file);
        } catch (Exception e){
            trace(e);
        }
        String line = scanner.nextLine();
        int nProblems = Integer.parseInt(line);
        trace("Number of cases: " + nProblems);

        StringBuilder result = new StringBuilder();

        for(int n = 0; n < nProblems; ++n){
            line = scanner.nextLine();
            int nWords = Integer.parseInt(line);

            int count = 0;

            Node rootNode = new Node();
            for(int i = 0; i < nWords; ++i) {
                String wordString = scanner.nextLine();
                char[] word = wordString.toCharArray();
                count += rootNode.getDepth(word);
                rootNode.addWord(word);
            }

            /*HashSet<String> used = new HashSet<String>();
            for(int i = 0; i < nWords; ++i){
                String word = scanner.nextLine();
                int wordLength = word.length();
                boolean keySet = false;
                for(int j = 1; j <= wordLength; ++j){
                    if(j == wordLength){
                        if(!keySet) count += j;
                        used.add(word);
                        break;
                    }
                    String k = word.substring(0, j);
                    if(used.contains(k)) {
                        continue;
                    }
                    if(!keySet){
                        keySet = true;
                        count += j;
                    }
                    used.add(k);
                }
            }*/

            int problemNumber = n + 1;
            result.append("Case #" + problemNumber + ": " + count + "\n");
        }

        String output = result.toString();
        trace(output);

        saveStringFile(outputFile, output);

        trace("finished");
    }

    private static void trace(Object... arguments) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < arguments.length; ++i) {
            if (i != 0) builder.append(", ");
            builder.append(arguments[i]);
        }
        builder.append("\n\n");
        System.out.print(builder.toString());
    }

    private static void saveStringFile(String fileName, String output){
        try {
            PrintWriter out = new PrintWriter(fileName);
            out.print(output);
            out.close();
        } catch (Exception e){
            trace(e);
        }
    }
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE 26
#define CHAR_TO_INDEX(c) ((int)c-(int)'a')

typedef struct trie_node trie_node_t;
struct trie_node {
	int value;
	trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie{
	trie_node_t *root;
	int count;
};

trie_node_t *getNode(void)
{
	trie_node_t *pNode = NULL;
	pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
	if(pNode)
	{
		int i=0;
		pNode->value=0;
		for(i=0;i< ALPHABET_SIZE;i++)
		{
			pNode->children[i]=NULL;
		}
	}
	return pNode;
}

void initialize(trie_t *pTrie)
{
	pTrie->root = getNode();
	pTrie->count=0;
}

int insert(trie_t *pTrie,char key[])
{
	int level,flag,Assign_len;
	int length = strlen(key);
	int index;
	trie_node_t *pCrawl,*cCrawl;
	pTrie->count++;
	pCrawl = pTrie->root;
	for(level=0;level<length;level++)
	{
		index = CHAR_TO_INDEX(key[level]);
		if(!pCrawl->children[index])
		{
			pCrawl->children[index]=getNode();
		}
		pCrawl = pCrawl->children[index];
		pCrawl->value++;
	}
	cCrawl = pTrie->root;
	for(level=0;level<length;level++)
	{
		flag=1;
		index = CHAR_TO_INDEX(key[level]);
		cCrawl = cCrawl->children[index];
		//printf("%d\t",cCrawl->value);
		if((cCrawl->value==1)||(level+1)==length)
		{
			Assign_len=level+1;
			//printf("%d\t",Assign_len);
			break;
		}
	}
	//printf("\n");
	//printf("%d\n",Assign_len);
	return Assign_len;

	//pCrawl ->value = pTrie->count;
}

// int search(trie_t *pTrie,char key[])
// {
// 	int level;
// 	int length= strlen(key);
// 	int index;
// 	trie_node_t *pCrawl;
// 	pCrawl = pTrie->root;

// 	for(level=0;level<length;level++)
// 	{
// 		index = CHAR_TO_INDEX(key[level]);
// 		if(!pCrawl->children[index])
// 		{
// 			return 0;
// 		}
// 		pCrawl=pCrawl->children[index];
// 	}
// 	return (0 != pCrawl && pCrawl->value);
// }

int main()
{
	char keys[][8]={"having","fun","yet"};
	char str[1000001];
	int sum=0,j=0,t=0;
	//char output[][32]={"Not present","present"};

	int i=0,y=0,noW=0;
	scanf("%d",&t);
	for(y=0;y<t;y++)
	{
		scanf("%d",&noW);
		trie_t trie;
		initialize(&trie);
		sum=0;
		for(j=0;j<noW;j++)
		{
			scanf("%s",str);
			sum=sum+insert(&trie,str);
		}

	printf("Case #%d: %d\n",y+1,sum);
	}
 
    return 0;

}
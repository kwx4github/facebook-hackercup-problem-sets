using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace HackerRankHacks
{
    class Node
    {
        public bool IsComplete;
        public Node[] childNodes;
        public Node()
        {
            childNodes = new Node[26];
            IsComplete = false;
        }
    }
    class FacebookRoundOneProblemTwo
    {
        static string inputFileName = "autocomplete.txt";
        static string outputFileName = "autocompleteoutput.txt";
        public static void Main()
        {
            string[] txt = File.ReadAllLines(inputFileName);
            int t = int.Parse(txt[0]);
            int lineNumber = 1;
            StringBuilder sb = new StringBuilder();
            int fileLineNumber = 1;
            //int t = int.Parse(Console.ReadLine());
            while (t-- > 0)
            {
                sb.AppendFormat("Case #{0}: ", lineNumber++);
                Node rootNode = new Node();
                int n = int.Parse(txt[fileLineNumber++]);
                totalCount = 0;
                for (int i = 0; i < n; i++)
                {
                    string word = txt[fileLineNumber++].Trim();
                    Add(rootNode, word);
                }
                sb.Append(totalCount);
                sb.AppendLine();
            }
            File.WriteAllText(outputFileName, sb.ToString());
            //Console.ReadLine();
        }
        static long totalCount;
        static void Add(Node rootNode, string word)
        {

            bool found = false;
            for (int k = 0; k < word.Length; k++)
            {
                int key = (int)word.Substring(k, 1)[0] - (int)'a';
                if (rootNode.childNodes[key] == null)
                {
                    rootNode.childNodes[key] = new Node();
                    if (found == false)
                    {
                        totalCount = (totalCount + k + 1);
                        found = true;
                    }
                }
                rootNode = rootNode.childNodes[key];
            }
            if (found == false)
                totalCount = (totalCount + word.Length);
            rootNode.IsComplete = true;
        }
    }
}

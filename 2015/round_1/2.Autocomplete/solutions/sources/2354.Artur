import java.io.*;
import java.util.*;

public class Main {
	private final static String taskName = "autocomplete";
	
	private final static long modulo = 1000000007L;

	public static void main(String[] args) throws Exception {
		long t = System.currentTimeMillis();
		new Main().solve();
		System.err.printf("Completed in %d ms\n", System.currentTimeMillis() - t);
	}

	private void solve() throws Exception {
		Locale.setDefault(Locale.US);
		LineInputReader ir = new LineInputReader(new InputStreamReader(System.in));
		OutputWriter<Integer> ow = new OutputWriter<Integer>(new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))));
		
		int t = ir.nextInt();
		String[][] input = ir.readInput(t);
		
		Integer[] output = new Integer[t];
		
		Solver<String[], Integer> solver = new MySolver();
		
		for (int _ = 0; _ < t; _++) {
			output[_] = solver.solve(input[_]);
		}

		ow.writeOutput(output);
		
		ir.close();
		ow.close();
	}
	
	abstract class Solver<I, O> {
		public abstract O solve(I input);
	}
	
	class MySolver extends Solver<String[], Integer> {
		final static int MAX = 1000000;
		
		private int link[][], cnt;
		
		public MySolver() {
			super();
			link = new int[MAX][26];
		}
		
		private void clear() {
			cnt = 1;
			for (int _ = 0; _ < MAX; _++) {
				Arrays.fill(link[_], 0);
			}
		}

		@Override
		public Integer solve(String[] input) {
			clear();
			int w = input.length;
			int result = 0;
			for (int i = 0; i < w; i++) {
				char[] word = input[i].toCharArray();
				int cur = 0;
				int p = 0;
				boolean isInside = true;
				while (p < word.length) {
					result += isInside ? 1 : 0;
					if (link[cur][word[p] - 'a'] == 0) {
						link[cur][word[p] - 'a'] = cnt++;
						isInside = false;
					}
					cur = link[cur][word[p] - 'a'];
					p++;
				}
			}
			System.err.println(Arrays.deepToString(input));
			return new Integer(result);
		}
		
	}

	abstract class InputReader<T> {
		private BufferedReader reader;
		private StringTokenizer tokenizer;
		
		public InputReader(InputStreamReader isr) {
			reader = new BufferedReader(isr);
		}

		public void close() {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public int nextInt() {
	 		int result = 0;
	 		
	 		try {
				result = Integer.parseInt(nextToken());
			} catch (NumberFormatException e) {
				e.printStackTrace();
			}
	 		return result;
		}

		String nextToken() {
			while (tokenizer == null || tokenizer.hasMoreTokens() == false) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			return tokenizer.nextToken();
		}
		
	 	long nextLong() {
	 		long result = 0;
	 		
	 		try {
				result = Long.parseLong(nextToken());
			} catch (NumberFormatException e) {
				e.printStackTrace();
			}
	 		
	 		return result;
	 	}
	 	
	 	abstract T[][] readInput(int testCount);
	}
	
	class LineInputReader extends InputReader<String> {

		public LineInputReader(InputStreamReader isr) {
			super(isr);
		}

		@Override
		String[][] readInput(int testCount) {
			String[][] input = new String[testCount][];
			
			for (int _ = 0; _ < testCount; _++) {
				int n = super.nextInt();
				
				input[_] = new String[n];
				
				for (int i = 0; i < n; i++) {
					input[_][i] = super.nextToken();
				}
			}
			
			return input;
		}
	}
	
	class OutputWriter<T> {
		private PrintWriter pw;
		
		public OutputWriter(PrintWriter pw) {
			this.pw = pw;
		}

		void writeOutput(T[] output) {
			for (int _ = 0; _ < output.length; _++) {
				pw.print("Case #");
				pw.print(_ + 1);
				pw.print(": ");
				pw.println(output[_]);
			}
		}
		
		void close() {
			pw.close();
		}
	}
	
	
	
}

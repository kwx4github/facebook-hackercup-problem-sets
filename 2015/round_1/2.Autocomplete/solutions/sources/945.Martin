#define _CRT_SECURE_NO_WARNINGS
#include <cmath>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iterator>
#include <ctime>
#include <iomanip>

typedef unsigned int uint32;
typedef signed long long int64;
typedef unsigned long long uint64;

using namespace std;

#define ALL(a) a.begin(), a.end()
#define FOR(a) for (int i = 0; i < a; ++i)
#define D(a) #a << ": " << a << "\n"

struct Node
{
    Node() : cnt(0) { memset(arr, 0, sizeof arr); }

    Node* arr['z'-'a'+1];
    int cnt;
};

Node* root;

void insert(Node* n, string const& s, int pos = 0)
{
    ++n->cnt;

    if (pos >= s.size())
        return;

    if (!n->arr[s[pos]-'a'])
        n->arr[s[pos]-'a'] = new Node();

    insert(n->arr[s[pos]-'a'], s, pos+1);
}

int get(Node* n, string const& s, int pos = 0)
{
    if (pos >= s.size())
        return 0;

    if (n->cnt == 1)
        return min(s.size() - pos, s.size() - 1);

    return get(n->arr[s[pos]-'a'], s, pos+1);
}

int main()
{
    string s;
    int CASES;
    cin >> CASES;
    for (int CASE = 1; CASE <= CASES; ++CASE)
    {
        root = new Node();
        int n;
        cin >> n;
        int res = 0;

        FOR(n)
        {
            cin >> s;
            insert(root, s);
            res += s.size() - get(root, s);
        }

        printf("Case #%d: %d\n", CASE, res);
    }

    return 0;
}

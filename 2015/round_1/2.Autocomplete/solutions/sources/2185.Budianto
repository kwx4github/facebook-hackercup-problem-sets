#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <iterator>
#include <vector>

using namespace std;

class Node {
public:
	Node() : content(' '), marker(false) {}
	~Node() {}
	Node* findChild(char c) {
		for (int i = 0; i < children.size(); ++i) {
			Node* tmp = children[i];
			if (tmp->content == c) return tmp;
		}
		return NULL;
	}
	char content;
	bool marker;
	vector<Node*> children;
};

class Trie {
public:
	Trie() { root = new Node(); }
	~Trie() {};
	int add_word(string s) {
		Node* current = root;
		int step = 0;
		bool last = false;
		if (s.length() == 0) {
			current->marker = true;
			return step;
		}
		for (int i = 0; i < s.length(); ++i) {
			Node* child = current->findChild(s[i]);
			if (!last) ++step;
			if (child != NULL) {
				current = child;
			} else {
				Node* tmp = new Node();
				tmp->content = s[i];
				current->children.push_back(tmp);
				current = tmp;
				last = true;
			}
			if (i == s.length() - 1) current->marker = true;
		}
		return step;
	}
	Node* root;
};

int main() {
	int T, N; cin >> T;
	for (int caseNo = 1; caseNo <= T; ++caseNo) {
		int ans = 0;
		cin >> N;
		Trie trie;
		for (int i = 0; i < N; ++i) {
			string word; cin >> word;
			ans += trie.add_word(word);
		}
		cout << "Case #" << caseNo << ": " << ans << endl;
	}
	return 0;
 }
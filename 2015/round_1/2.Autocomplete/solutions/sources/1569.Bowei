#include <algorithm>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <sstream>
#include <stack>
#include <string>
#include <set>
#include <utility>
#include <vector>

using namespace std;

template <typename T> inline T MIN(T a, T b) { return a < b ? a : b; }
template <typename T> inline T MAX(T a, T b) { return a < b ? b : a; }
template <typename T> inline T ABS(T a)      { return a < 0 ? -a : a;}

typedef long long int64;

typedef struct NODE {
  struct NODE* e[26];
  int cnt[26];
  NODE() {
    memset(e, 0, sizeof e);
  }
} Trie;

Trie* trie;

int ins(char* s) {
  int n = strlen(s), loc = -1;
  Trie* cur = trie;
  for (int i = 0; i < n; ++i) {
    int k = s[i] - 'a';
    if (cur->e[k] == NULL) {
      cur->e[k] = new Trie;
      if (loc == -1 ) loc = i;
    }
    ++cur->cnt[k];
    cur = cur->e[k];
  }
  return loc == -1 ? n : loc + 1;
}

char word[1000007];

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    int N, ans = 0;
    trie = new Trie;
    scanf("%d", &N);
    for (int i = 0; i < N; ++i) {
      scanf("%s", word);
      ans += ins(word);
    }
    delete trie;
    printf("Case #%d: %d\n", t, ans);
  }
  return 0;
}

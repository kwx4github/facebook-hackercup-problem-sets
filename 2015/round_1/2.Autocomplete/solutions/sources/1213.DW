#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>

using namespace std;

struct Node
{
	int words;
	Node* child[26];
	Node() {
		words = 0;
		for (int i='a'; i<='z'; i++) {
			child[i-'a'] = 0;
		}
	}

	~Node() {
		for (int i='a'; i<='z'; i++) {
			if (child[i-'a'] != 0) {
				delete child[i-'a'];
			}
		}
	}

};

void Add(Node *r, char *s)
{
	if (s[0]==0) { return; }
	if (r->child[s[0]-'a'] == 0) {
		r->child[s[0]-'a'] = new Node;
	}
	r->child[s[0]-'a']->words++;
	Add(r->child[s[0]-'a'], s+1);
}

int Count(Node *r, char *s)
{
	if (s[0] == 0) { return 0; }
	if (r->child[s[0]-'a']->words == 1) { return 1; }
	return Count(r->child[s[0]-'a'], s+1) + 1;
}

int main()
{
	freopen("autocomplete.txt","r",stdin);
	freopen("output.txt","w",stdout);

	int T;
	scanf("%d",&T);
	for (int z=1; z<=T; z++) {
		int N;
		scanf("%d\n",&N);
		Node *root = new Node;

		int ans=0;
		for (int i=1; i<=N; i++) {
			char In[1000010]={0};
			gets(In);

			Node *r = root;
			for (int j=0; In[j]; j++) {
				if (r->child[In[j]-'a'] == 0) {
					r->child[In[j]-'a'] = new Node;
				}
				r->child[In[j]-'a']->words++;
				r = r->child[In[j]-'a'];
			}

			int cnt = 0;
			r = root;
			for (int j=0; In[j]; j++) {
				cnt++;
				if (r->child[In[j]-'a']->words == 1) { break; }
				r = r->child[In[j]-'a'];
			}
			ans += cnt;
		}
		printf("Case #%d: %d\n", z, ans);
	
		//delete root;
	}

	

}


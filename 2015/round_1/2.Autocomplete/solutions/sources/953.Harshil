#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <cstdlib>
using namespace std;
#define PR(x) cout << #x " = " << x << "\n";
typedef vector<int> VI; 
typedef vector<VI> VVI; 
typedef pair<int,int> II; 
#define SZ(a) int((a).size()) 
#define PB push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define FOR(i,n) for( int i =0 ; i < n ; i++ )
#define ll long long
#define FF first
#define SS second

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
    int numChildren;

    trie_node(){
    	numChildren = 0;
    }
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 
// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 		pNode->numChildren = 0;
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
    
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, const char *key)
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
 		pCrawl->numChildren++;
        pCrawl = pCrawl->children[index];
    }
 
    // mark last node as leaf
    pCrawl->value = pTrie->count;
	pCrawl->numChildren++;
}
 


int charReq(trie_t *pTrie,const char *key){
	int level;
	int length = strlen(key);
	int index;
	trie_node_t *pCrawl;
	
	pCrawl = pTrie->root;
	
	for( level = 0; level < length; level++ )
	{
		if(pCrawl->numChildren == 1) return level ;

	    index = CHAR_TO_INDEX(key[level]);
	
	
	    pCrawl = pCrawl->children[index];
	}
	
	return length;
}

int main(){

	 int T; cin>>T;
	 for (int Z = 1; Z <= T; ++Z)
	 {
		trie_t trie;
		initialize(&trie);
		trie.root->numChildren = 2;
	 	int n; cin>>n;
	 	int ans = 0;
	 	for (int i = 0; i < n; ++i)
	 	{
	 		string str;cin>>str;
	 		insert(&trie, str.c_str());
	 		int cnt = charReq(&trie,str.c_str());
	 		//cout<<str<<" -> "<<cnt<<endl;
	 		ans += cnt;
	 	}

	 	cout<<"Case #"<<Z<<": "<<ans<<endl;
	 }
}
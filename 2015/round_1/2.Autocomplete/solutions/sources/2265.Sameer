#include <bits/stdc++.h>
#include <assert.h>
#include <functional>
 
using namespace std;
 
typedef long long ll;
typedef long double ld;
typedef vector < long long > vll;
typedef pair < long long, long long > pll;
typedef pair < int, int > pii;
typedef vector < int > vii;
 
#define rep(i,n) for(ll i = 0; i < n; i++)
#define reps(i,a,n) for(ll i = a; i < n; i++)
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define wt while(true)
#define all(x) x.begin(),x.end()
#define l(x) (((x) << 1) | 1)
#define r(x) ((l(x)) + 1)
#define md(a,b) (((a) + (b)) >> 1)
#define INF ((1LL << 57LL))
 
ll t, u, v, n, k, c, d, f, l, m, q, h;
const int N = 10000005;
const ll mod = 1e9 + 7;
ll ans = 0;
string ss;
struct node{
        int count;
        node * nextnode[26];
        node(int c) : count(c){
                for(int i = 0; i < 26; ++i)
                        nextnode[i] = NULL;
        }
        node(){
                count = 0;
                for(int i = 0; i < 26; ++i)
                        nextnode[i] = NULL;
        }
};
void insert(string ss, node * trie){
        node * temp = trie;
        int k = 0;
        for(int i = 0; i < ss.size(); ++i){
                if(temp -> nextnode[ss[i] - 'a'] != NULL) {
                    temp = temp -> nextnode[ss[i] - 'a'];
                    ++ans;
                }
                else{
                        k++;
                        if (k == 1) ++ans;
                        temp -> nextnode[ss[i] - 'a'] = new node();
                        temp = temp -> nextnode[ss[i] - 'a'];
                }
        }
}
int main () {
    csl;
    freopen("autocomplete.txt", "r", stdin);
    freopen("lol.txt", "w", stdout);
    cin >> t;
    for (int j = 1; j <= t; ++j) {
        cout << "Case #" << j << ": ";
        cin >> n;
        ans = 0;
        node * trie  = new node();
        rep (i, n) {
            cin >> ss;
            insert(ss, trie);
        }
        cout << ans << '\n';
    }
    return 0;
}
#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <utility>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stack>
#include <tuple>
#include <ctime>
#include <list>
#include <map>
#include <set>

#define REP(i,n) for(int i=0;i<(n);i++)
#define TR(i,x) for(__typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))
#define SIZE(x) (int)(x).size()

#define MP make_pair
#define MT make_tuple
#define PB push_back
#define EB emplace_back

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;

const int MAXL = 1e6 + 10;

struct Trie {
    int nxt[26], s;
    Trie() {CLEAR(nxt); s = 0;}
} tree[MAXL];

char buf[MAXL];
int N;

void Insert(char s[]) {
    int crt = 0;
    for (int i = 0; s[i]; ++i) {
        int ch = s[i] - 'a';
        if (!tree[crt].nxt[ch]) {
            tree[crt].nxt[ch] = ++N;
            tree[N] = Trie();
        }
        crt = tree[crt].nxt[ch];
        ++tree[crt].s;
    }
}

int Query(char s[]) {
    int crt = 0, ret = 0;
    for (int i = 0; s[i]; ++i) {
        int ch = s[i] - 'a';
        if (crt != 0 && tree[crt].s == 1) break;
        ++ret;
        assert(tree[crt].nxt[ch] != 0);
        crt = tree[crt].nxt[ch];
    }
    return ret;
}

void Solve() {
    int n, ans = 0;
    cin >> n;
    tree[N = 0] = Trie();
    REP(i, n) {
        scanf("%s", buf);
        Insert(buf);
        ans += Query(buf);
    }
    cout << ans << endl;
}

int main() {
//    freopen("autocomplete_example_input.txt", "r", stdin);
    freopen("autocomplete.txt", "r", stdin);
    freopen("autocomplete_output.txt", "w", stdout);

    int cas;
    cin >> cas;
    for (int T = 1; T <= cas; ++T) {
        printf("Case #%d: ", T);
        Solve();
    }
    return 0;
}


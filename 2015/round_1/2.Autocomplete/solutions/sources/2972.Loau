#include <algorithm>
#include <bitset>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <string.h>
#include <utility>
#include <vector>
using namespace std;

char buf[1000001];
char buff[1000001];
struct TrieNode
{
	TrieNode* l[128];
	int n;

	TrieNode()
	{
		memset(l, 0, sizeof(TrieNode*) * 128);
		n = 0;
	}
} *root = new TrieNode();

void add(char* s)
{
	TrieNode* p = root;
	for (; *s; ++s)
	{
		if (!p->l[*s]) p->l[*s] = new TrieNode();
		p = p->l[*s];
	}
	p->n++;
}
bool lookup(char* s)
{
	TrieNode* p = root;
	for (; *s; ++s)
	{
		if (!p->l[*s]) 
			return false;
		p = p->l[*s];
	}
	return p->n >= 0;
}
void release(TrieNode* p)
{
	//printf("l size: %d\n", sizeof(p->l)/sizeof(TrieNode));

	queue<TrieNode*> q;
	q.push(p);
	while(!q.empty()){
		TrieNode* pp = q.front();
		q.pop();
		for (int i='a'; i<='z'; i++)
			if (pp->l[i])
				q.push(pp->l[i]);
		delete pp;
	}

}
void ir_strcpy( char *s1, const char *s2, int rb, int re )
{
	while( (rb <= re) && (*s1++ = s2[rb]) ) rb++;
	*s1 = 0;
}
int main() {

	freopen("autocomplete.txt","r",stdin);
	//freopen("input.txt","r",stdin);
	freopen("outQ2.txt","w",stdout);
	int T, n, ans, tmp, l;
	bool ok;
	/*
	cout<<1<<endl<<100000<<endl;
	for(int i=0;i<100000;i++)
	cout<<"abcacbacba"<<endl;
	return 0;
	*/
	scanf("%d\n",&T);
	for(int t=1;t<=T;t++){
		ok=true;
		release(root);
		root = new TrieNode();
		ans=1;
		scanf("%d\n",&n);
		//printf("t: %d\n",n);
		for(int i=0;i<n;i++){
			gets(buf);
			l=strlen(buf);
			if(i!=0){
				ok=false;
				for(int j=0;j<l;j++){
					ir_strcpy(buff,buf,0,j);
					if(!lookup(buff)){
						ans+=strlen(buff);
						ok=true;
						break;
					}
				}
			}
			if(!ok)
				ans+=strlen(buf);
			add(buf);
		}


		printf("Case #%d: %d\n", t, ans);

	}

	return 0;
}
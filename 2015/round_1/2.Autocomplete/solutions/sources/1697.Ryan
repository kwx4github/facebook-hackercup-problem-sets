package running;

import org.psjava.ds.array.Array;
import org.psjava.ds.array.CharacterArrayUsingString;
import org.psjava.ds.tree.trie.Trie;
import org.psjava.ds.tree.trie.TrieNode;
import org.psjava.goods.GoodTrieFactory;
import org.psjava.util.ZeroTo;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.Scanner;

/**
 * @title
 * @hint
 */
public class B implements Runnable {

	@Override
	public void run() {
		Scanner in = new Scanner(System.in);
		for (int casei : ZeroTo.get(in.nextInt())) {
			int n = in.nextInt();
			int sum = 0;
			Trie<Character> trie = GoodTrieFactory.getInstance().create();
			for (int i : ZeroTo.get(n)) {
				Array<Character> word = CharacterArrayUsingString.create(in.next());
				int finalDepth = walkAndGetFinalDepth(trie, word);
				sum += Math.min(finalDepth + 1, word.size());
				trie.add(word);
			}
			System.out.println("Case #" + (casei + 1) + ": " + sum);
		}
	}

	private int walkAndGetFinalDepth(Trie<Character> trie, Array<Character> seq) {
		TrieNode<Character> cursor = trie.getRoot();
		int depth = 0;
		for (char c : seq) {
			if (!cursor.hasChild(c))
				break;
			depth++;
			cursor = cursor.getChild(c);
		}
		return depth;
	}

	public static void main(String[] args) throws Exception {
		System.setIn(new BufferedInputStream(new FileInputStream("autocomplete.txt")));
		new B().run();
	}

}

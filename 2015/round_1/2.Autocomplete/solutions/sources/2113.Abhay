#include<bits/stdc++.h>
using namespace std;
char s[1000001];
struct node
{
    int value,c;
    node *children[26];
};
struct trie
{
    node *root;
};
node *getNode()
{
    node *n=NULL;
    n = (node *)malloc(sizeof(node));
    n->value=0;
    n->c=0;
    for(int i=0;i<=25;i++)
        n->children[i]=NULL;
    return n;
}
void initialize(trie *pTrie)
{
    pTrie->root = getNode();
}
void insert(trie *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    node *pCrawl;
    pCrawl = pTrie->root;
    (pCrawl->c)++;
    for( level = 0; level < length; level++ )
    {
        index = (key[level]-'a');
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
        (pCrawl->c)++;
    }
    pCrawl->value = 1;
}

int search(trie *pTrie, char key[])
{
    int level,l=0;
    int length = strlen(key);
    int index;
    node *pCrawl;

    pCrawl = pTrie->root;
    //printf("%d\n",pCrawl->c);
    for( level = 0; level < length; level++ )
    {
        index = (key[level]-'a');
l++;
        if( ((pCrawl->children[index])->c)==1 )
        {
            return l;
        }

        pCrawl = pCrawl->children[index];
        //l++;
        //printf("%d\n",pCrawl->c);
    }

    return l;
}

int main()
{
    int t,n,i,c=1;
    freopen("1.txt","r",stdin);
    freopen("cookingpilesout.txt","w",stdout);
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        long long ans=0LL;
        trie pTrie;
        initialize(&pTrie);
        for(i=0;i<n;i++)
        {
            scanf("%s",s);
            //printf("%s\n",s);
            insert(&pTrie,s);
            //printf("%d\n",ans);
            ans=ans+(long long)(search(&pTrie,s));

        }
        printf("Case #%d: %lld\n",c,ans);
        c++;
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
trie_node_t *getNode(void){
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if(pNode)
    {
        pNode->value = 0;
        for(int i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}
void initialize(trie_t *pTrie){
    pTrie->root = getNode();
    pTrie->count = 0;
}
int insert(trie_t *pTrie, string key){
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
    pTrie->count++;
    pCrawl = pTrie->root;
    int firstCharInsertion=-1;
    int cc=0;
    int flag=0;
    for(level=0;level<length;level++)
    {
        index=CHAR_TO_INDEX(key[level]);
        if(!pCrawl->children[index])
        {
        	flag=1;
            pCrawl->children[index]=getNode();
        }
        cc++;
		if(firstCharInsertion==-1 && flag==1){
        	firstCharInsertion=cc;
        }
        
        pCrawl=pCrawl->children[index];
    }
    pCrawl->value=pTrie->count;
    if(firstCharInsertion==-1)
    	firstCharInsertion=key.length();
    return firstCharInsertion;
}
int main(){
	//freopen("autocomplete.txt","r",stdin);
	//freopen("autocompleteOut.txt","w",stdout);
	int t;
	cin>>t;
	for(int test=1;test<=t;test++){
		trie_t trie;
		initialize(&trie);
		int n;
		cin>>n;
		long long int ans=0;
		for(int i=0;i<n;i++)
    	{
    		string key;
    		cin>>key;
        	ans+=insert(&trie,key);
    	}
    	cout<<"Case #"<<test<<": "<<ans<<"\n";
		
	}
}

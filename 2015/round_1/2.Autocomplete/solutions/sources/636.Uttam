#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define MAX 1000000
int nodes;
struct nod
{
    int mark,child[26];
}nods[MAX + 10];
//int subtree[MAX + 10];
char s[MAX + 10];
//int mark[MAX + 10];
int insert(int l)
{
    int val = 0;
    int last = 0;
    for(int i = 1 ; i<=l ; i++)
    {
        int id = nods[last].child[s[i] - 'a'];
        if(id == 0)
        {
            val++;
            nodes++;
            nods[last].child[s[i] - 'a'] = nodes;
            id = nodes;
        }
        last = id;
    }
    nods[last].mark++;
    if(val > 0) val--;
    return l - val;
}
int main()
{
    int tc,t;
    freopen("C:\\Users\\dell\\Downloads\\inputB.txt","r",stdin);
    freopen("C:\\Users\\dell\\Downloads\\outputB.txt","w",stdout);
    scanf("%d",&tc);
    for(t = 1 ; t<=tc ; t++)
    {
        nodes = 0;
        int n,ans=0;
        scanf("%d",&n);
        for(int i = 1 ; i<=n ; i++)
        {
            scanf("%s",s+1);
            ans = ans + insert(strlen(s+1));
        }
        printf("Case #%d: ",t);
        // Print the result of the code here
        printf("%d",ans);
        //Don't do anything after this.
        printf("\n");
        for(int i = 0 ; i<=nodes ; i++)
        {
            for(int j = 0 ; j<26 ; j++)  nods[i].child[j] = 0;
            nods[i].mark = 0;
        }
    }
    return 0;
}
/*int dfs(int u)
{
    //printf("---- %d ----\n",u);
    mark[u] = 1;
    int childs = nods[u].mark;
    for(int j = 0 ; j<26 ; j++)
    {
        int v = nods[u].child[j];
        if(v > 0 && mark[v] == 0)
        {
            int temp = dfs(v);
            childs = childs + temp;
        }
    }
    subtree[u] = childs;
    if(subtree[u] == 1)
    {
        int f = 0;
        for(int j = 0 ; j<26 ; j++)
        {
            int v = nods[u].child[j];
            if(v > 0)
            {
                if(subtree[v] == 1)
                {
                    f = 1;
                }
            }
        }
        ans = ans - f;
    }
    //printf("----------\n");
    return subtree[u];
}*/

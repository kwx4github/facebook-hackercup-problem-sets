#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <vector>

using namespace std;
typedef long long LL;

typedef struct trie {
  int value[26];
  struct trie *next[26];
  trie() {
    for (int i = 0; i < 26; ++i) {
      value[i] = 0;
      next[i] = NULL;
    }
  }
} trie;
string s;
void addWord(trie *nod, int pos) {
  if (pos >= s.size()) return;
  {
    int id = s[pos] - 'a';
    if (nod->next[id] == NULL) {
      nod->next[id] = new trie;
    }
    nod->value[id]++;
    addWord(nod->next[id], pos + 1);
  }
}
int findWord(trie *nod, int pos) {
  if (pos >= s.size()) return 0;
  {
    int id = s[pos] - 'a';
    if (nod->value[id] == 1) return 1;
    return 1 + findWord(nod->next[id], pos + 1);
  }
}

void deleteTrie(trie *nod) {
  if (nod == NULL) return;
  for (int i = 0; i < 26; ++i) deleteTrie(nod->next[i]);
  delete nod;
}
int N;
int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    trie *root = new trie;
    cin >> N;
    int ret = 0;
    for (int i = 0; i < N; ++i) {
      cin >> s;
      addWord(root, 0);
      ret += findWord(root, 0);
    }
    cout << "Case #" << t << ": " << ret << '\n';
    deleteTrie(root);
  }
  return 0;
}

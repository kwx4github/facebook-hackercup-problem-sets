using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Facebook
{
    class Program
    {
        static void Main(string[] args)
        {
            Solution(new StreamReader(new FileStream("input.txt", FileMode.Open)), 
                new StreamWriter(new FileStream("output.txt", FileMode.Create)));
        }

        static void Solution(TextReader sr, TextWriter sw)
        {
            var tests = Int32.Parse(sr.ReadLine());
            var sb = new StringBuilder();
            for (var i = 0; i < tests; i++)
            {
                var tree = new PrefixTree();
                var n = Int32.Parse(sr.ReadLine());
                var count = 0;
                for (var j = 0; j < n; j++)
                {
                    var word = sr.ReadLine();
                    tree.Insert(word);
                    count += tree.Count(word);                    
                }

                sb.AppendLine(String.Format("Case #{0}: {1}", (i + 1), count));
            }

            sw.Write(sb.ToString());
            sw.Close();
        }
    }

    class PrefixTree
    {
        private readonly Dictionary<char, Node> children = new Dictionary<char, Node>(26);

        public void Insert(string word)
        {
            char ch = word[0];
            if (!children.ContainsKey(ch))
            {
                children.Add(ch, new Node
                {
                    Key = ch,
                    Count = 1
                });
            }
            else
            {
                children[ch].Count++;
            }
            var node = children[ch];
            for (var i = 1; i < word.Length; i++)
            {
                if (node.Children == null)
                {
                    node.Children = new Dictionary<char, Node>(26);
                }
                ch = word[i];
                if (!node.Children.ContainsKey(ch))
                {
                    node.Children[ch] = new Node
                    {
                        Key = ch,
                        Count = 1
                    };
                }
                else
                {
                    node.Children[ch].Count++;
                }
                node = node.Children[ch];
            }
            node.IsEnd = true;
        }

        public int Count(string word)
        {
            var ch = word[0];
            var node = children[ch];
            if (node.Count == 1)
            {
                return 1;
            }
            var result = 1;
            for (int i = 1; i < word.Length && node.Count > 1; i++, result++)
            {
                ch = word[i];
                node = node.Children[ch];                
            }

            return result;
        }       
    }

    class Node
    {
        public char Key { get; set; }

        public bool IsEnd { get; set; }

        public int Count { get; set; }

        public Dictionary<char, Node> Children { get; set; } 
    }
}

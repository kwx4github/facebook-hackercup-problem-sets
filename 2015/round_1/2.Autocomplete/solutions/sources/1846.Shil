import java.util.Scanner;

public class AutoComplete {

  static int OFFSET = 97;

  static class TrieNode{
    char val;
    TrieNode[] children = new TrieNode[26];
    int numChildren;
    boolean wordEnd;

    TrieNode(char c) {
      this.val = c;
    }
  }

  static void insert(TrieNode root, String word) {
    char[] letters = word.toCharArray();
    TrieNode node = root;
    for (int i = 0; i < letters.length; i++) {
      char c = letters[i];
      int pos = c - OFFSET;
      if (node.children[pos] == null){
        node.numChildren++;
        node.children[pos] = new TrieNode(c);
      }
      node = node.children[pos];
    }
    node.wordEnd = true;
  }

  static boolean contains(TrieNode root, String word){
    char[] letters = word.toCharArray();
    TrieNode node = root;
    for (int i =0; i < letters.length; i++) {
      char c = letters[i];
      node = node.children[c-OFFSET];
      if (node == null) {
        return false;
      }
    }
    return node.wordEnd;
  }

  static int leastMatch(TrieNode root, String word){
    char[] letters = word.toCharArray();
    TrieNode node = root;
    int leastCount = 1;
    for (int i = 0; i < letters.length; i++) {
      char c = letters[i];
      if (node.numChildren > 1 || node.wordEnd) {
        leastCount = i+1;
      }
      node = node.children[c-OFFSET];
    }
    if (node.numChildren > 0) {
      leastCount = letters.length;
    }
    return leastCount;
  }

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    for (int i = 1; i<= t; i++) {
      int n = scanner.nextInt();
      TrieNode root = new TrieNode('0');
      int c = 0;
      int numLetters = 0;
      while (c < n) {
        String word = scanner.nextLine().trim();
        if (word.length() == 0) {
          continue;
        }
        insert(root, word);
        numLetters += leastMatch(root, word);
        c++;
      }
      System.out.format("Case #%d: %d%n", i, numLetters);
    }
  }


}

package org.denisg.facebook2015.round1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class ProblemB {

	public static void main(String[] args) throws FileNotFoundException {

		Scanner in = new Scanner(new File("input.txt"));
		PrintStream out = new PrintStream(new File("output.txt"));
		try {
			int t = in.nextInt();
			for (int i = 1; i <= t; i++) {
				int n = in.nextInt();
				List<String> words = new ArrayList<String>();
				while (n-- > 0) {
					words.add(in.next());
				}
				out.println("Case #" + i + ": " + solve(words));
			}
		} finally {
			in.close();
			out.close();
		}

	}

	public static class Trie {
		private Node root = new Node();
		
		public void add(String word) {
			root.add(word);
		}
		
		public boolean contains(String word) {
			return root.contains(word);
		}
	}
	
	public static class Node {
		private Map<Character, Node> children;
		
		public void add(String word) {
			if (children == null) {
				children = new HashMap<Character, Node>();
			}
			char newC = word.charAt(0);
			Node child = children.get(newC);
			if (child == null) {
				child = new Node();
				children.put(newC, child);
			}
			if (word.length() > 1) {
				child.add(word.substring(1));
			}
		}
		
		public boolean contains(String word) {
			if (children != null) {
				char searchC = word.charAt(0);
				Node child = children.get(searchC);
				if (child != null) {
					if (word.length() <= 1) {
						return true;
					} else {
						return child.contains(word.substring(1));
					}
				}
			}
			return false;
		}
	}
	
	public static int solve(List<String> words) {
		int count = 0;
		Trie trie = new Trie();
		for (String word : words) {
			boolean prefixFound = false;
			for (int endIndex = 1; endIndex <= word.length(); endIndex++) {
				String prefix = word.substring(0, endIndex);
				if (!trie.contains(prefix)) {
					count += prefix.length();
					prefixFound = true;
					break;
				}
			}
			if (!prefixFound) {
				count += word.length();
			}
			trie.add(word);
		}
		return count;
	}

}


#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <map>
#include <set>
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

long max(long a,long b){
    return a < b ? b : a;
}
long min(long a,long b){
    return a > b ? b : a;
}


double solve(vector<string> sendword,long N){
    long ans=0;
    double ret=0;
    map<string,pair<int,int>> dictword;
    dictword.clear();
    
    for(long i=0;i<sendword.size();i++){
        
        map<string,pair<int,int>>::iterator it;
        it=dictword.upper_bound(sendword[i]);
        //std::cout << sendword[i] << std::endl;
        map<string,int>::iterator itmae;
        map<string,int>::iterator itato;
        long tmpmin=0;
        if(dictword.end()!=it){

            tmpmin=sendword[i].size();
            for(long j=(*it).second.first;j<min(sendword[i].size(),((*it).first).size());j++){
                if(sendword[i][j]!=(*it).first[j]){
                    tmpmin=j+1;
                    break;
                }
            }
        }else{
            tmpmin=1;
        }
        long tmpmin2=1;
        if(dictword.begin()!=it){
            it--;
            tmpmin2=((*it).first).size()+1;
            for(long j=(*it).second.second;j<min(sendword[i].size(),((*it).first).size());j++){
                if(sendword[i][j]!=(*it).first[j]){
                    tmpmin2=j+1;
                    break;
                }
            }
            ans=max(tmpmin,tmpmin2);
        }else{
            ans=max(tmpmin,tmpmin2);
        }

        //std::cout << ans << std::endl;
        
        //辞書追加

        dictword.insert(map<string,pair<int,int>>::value_type(sendword[i],make_pair(tmpmin2-1,tmpmin-1)));
        ret=ret+ans;
    }

    return ret;
}


int main(int argc, const char * argv[])
{
    
    std::ifstream ifs( "a.txt" );
    
    int T;
    ifs >> T;
    int t=1;

    while(t<=T){
        
        long N;
        ifs >> N;
        vector<string> sendword;
        sendword.clear();
        for(long i=0;i<N;i++){
            string tmp;
            ifs >> tmp;
            sendword.push_back(tmp);
        }
        
        double ret = solve(sendword,N);
        std::cout << "Case #" << t << ": " << ret << std::endl;
        t++;
    }
    return 0;
    
}
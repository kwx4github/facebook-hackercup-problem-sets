// Dark Side of Elephant
// Askar

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <algorithm>
#include <utility>
#include <tuple>
#include <complex>
#include <cmath>
#include <sys/types.h>
#include <unistd.h>
#include <cassert>

using namespace std;

#define FOR(i, N) for(auto i=(N)-(N); i<(N); i++)
#define FOR1(i, N) for(auto i=(N)-(N)+1; i<=(N); i++)
#define FOREACH(it, a) for(auto it=(a).begin(); it!=(a).end(); it++)
#define MAXIM(a,b) a=max(a, static_cast<__typeof__(a)>(b))
#define MINIM(a,b) a=min(a, static_cast<__typeof__(a)>(b))
#define beginend(a) (a).begin(), (a).end()
#define pf printf
#define sf scanf
#define mp make_pair
#define mt make_tuple
#define pass
#define sqr(x) ((x)*(x))
typedef long long ll;
typedef pair<long long, long long> pll;
typedef pair<int, int> pii;
const long long INF = 1e9;
const double EPS = 1e-9;

#define dbg if(false)
#ifdef EBUG
    #undef dbg
    #define dbg if(true)
#endif

#define epf(...) fprintf(stderr, __VA_ARGS__)
#define dpf(...) dbg epf(__VA_ARGS__)
#define db(x) dbg cerr << #x << ":\t" << (x) << endl 

struct Node{
    vector<pair<char, int> > childs;
    int word_count;
    int parent;
    bool word_end;
    
    Node(int _parent = -1) : word_end(0), word_count(0), parent(_parent), childs(vector<pair<char, int> >(0)){}

    int find(const char c) const{
        FOREACH(it, childs){
            if(it->first == c) return it->second;
        }
        return -1;
    }
};

const int root_node = 0;
struct Trie{
    vector<Node> nodes;
    Trie(): nodes(vector<Node>(1)){}
    
    void addWord(const char* s){
        const int length = strlen(s);
        int q = root_node;

        for(int l = 0; l < length; l++){
            assert(q != -1);
            const char c = s[l];
                
            db(c);

            if(nodes[q].find(c) == -1){
                nodes[q].childs.push_back(mp(c, nodes.size()));
                nodes.push_back(Node(q));
            }
            q = nodes[q].find(c);
        }

        if(!nodes[q].word_end){
            nodes[q].word_end = true;
            while(q != -1){
                nodes[q].word_count += 1;
                q = nodes[q].parent;
            }
        }
    }

    int necessary(const char* s){
        const int length = strlen(s);
        int q = root_node;
        for(int i = 0; i < length; i++){
            assert(q != -1);
            if(nodes[q].word_count == 1) return i;
            q = nodes[q].find(s[i]);
        }
        return length;
    }
};



char input[1000001];

int main(){
    int T;
    sf(" %i", &T);

    Trie trie; 

    FOR1(case_number, T){
        db(case_number);
        int N;
        sf(" %i", &N);
        trie = Trie();
        
        int ans = 0;

        FOR(_s, N){
            sf(" %s", input);
            dbg epf("word: %s\n", input);
            trie.addWord(input);
            ans += max(1, trie.necessary(input));
            
            dbg{
                epf("Nodes:\n");
                FOR(i, (int)trie.nodes.size()){
                    epf("%i:\t", i);
                    FOREACH(it, trie.nodes[i].childs) epf(" (%c,%i)", it->first, it->second);
                    epf("\n");
                }
            }

        }
        pf("Case #%i: %i\n", case_number, ans);
    }
}

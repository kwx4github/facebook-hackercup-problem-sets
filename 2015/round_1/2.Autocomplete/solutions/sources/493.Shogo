#include<bits/stdc++.h>
using namespace std;


int iter = 0;


int finalAns = 0;
//string CUR;
struct PMA {
  PMA *next[0x100]; // next[0] is for fail
  int index;
  //  string str;
  //  bool accepted;
  PMA() {
    fill(next, next+0x100, (PMA*)0);
    index = iter; iter++;
    //    str = CUR;
    //    accepted = false;
  }
};

PMA *search(PMA *root, string s)  {
  s = s.substr(1);
  PMA *t = root;
  for(int i=0; i<s.size(); i++) {
    t = t->next[s[i]];
    if(t==NULL) t = search(root, s);
  }
  return t;
}
PMA *buildPMA(vector<string> p) {
  PMA *acc = new PMA;
  for(int c='a'; c<='z'; c++) {
    acc->next[c] = acc;
  }
  //  acc->accepted = true;
  PMA *root = new PMA;
  int size = p.size();
  for (int i = 0; i < size; ++i) { // make trie
    bool ok = true;
    PMA *t = root;
    for (int j = 0; j<p[i].size(); ++j) {
      char c = p[i][j];
      //      CUR = p[i].substr(0,j+1);
      if (t->next[c] == NULL) {
        if(ok) {
          ok = false;
          finalAns += j+1;
        }
        t->next[c] = new PMA;
      }
      t = t->next[c];
    }
    if(ok) {
      finalAns += p[i].size();
    }
  }
  return root;
}
  
void solve(int caseNum) {

  finalAns = 0;
  
  vector<string> vs;
  int N;
  cin >> N;
  for(int i=0; i<N; i++) {
    string s;
    cin >> s;
    vs.push_back(s);
  }
  
  PMA *pma = buildPMA(vs);
  
  cout << "Case #" << caseNum << ": " << finalAns << endl;
  
}


int main() {
  int T;
  cin >> T;
  for(int i=0; i<T; i++)
    solve(i+1);
  return 0;
}



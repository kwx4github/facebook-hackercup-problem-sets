#include <set>
#include <map>
#include <list>
#include <ctime>
#include <stack>
#include <cmath>
#include <queue>
#include <bitset>
#include <vector>
#include <cstdio>
#include <climits>
#include <cstring>
#include <iomanip>
#include <utility>
#include <sstream>
#include <string.h>
#include <unistd.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define PP pair<int, int>
#define endl "\n"
#define MM 1000005
#define sqr(x) ((x) * (x))
#define ABS(x) ((x < 0) ? -(x) : (x))
#define eps (1e-9)
#define equal(a, b) (ABS(a - b) < eps)
typedef unsigned long long ULL;
typedef long long LL;
typedef pair< int, PP > Edge;

template<class T> string tostring(T x) { ostringstream out; out<<x; return out.str();}
LL toint(string s) { istringstream in(s); LL x; in>>x; return x; }

struct node {
	char value;
	int dad;
	int children[26];
	node() {
		for(int i = 0; i < 26; i++)
			children[i] = -1;
	}
	node(char val, int d) {
		for(int i = 0; i < 26; i++)
			children[i] = -1;
		value = val;
		dad = d;
	}
};

node nodes[MM];
int index = 1;

void init() {
	for(int i = 0; i < index; i++)
		nodes[i] = node();
	index = 1;
	nodes[0] = node('#', -1);
}

int solve(string str) {
	int dad = 0, ans = 1, c = 0;
	for(int i = 0; i < str.size(); i++)	 {
		int k = str[i] - 'a';
		if(nodes[dad].children[k] == -1) {
			nodes[index] = node(str[i], dad);
			nodes[dad].children[k] = index;
			dad = index;
			index++;
		} else {
			dad = nodes[dad].children[k];
			c++;
			ans++;
		}
	}
	if(c == str.size())
		return ans - 1;
	return ans;
}

string str;

int main() {
	freopen("autocomplete.txt", "r", stdin);
	freopen("autocomplete_output.txt", "w", stdout);
	int T, N, c = 0;
	cin >> T;
	while(T--) {
		c++;
		cin >> N;
		init();
		int ans = 0;
		for(int i = 0; i < N; i++) {
			cin >> str;
			ans = ans + solve(str);
		}
		cout << "Case #" << c << ": " << ans << endl;
	}
	return 0;
}


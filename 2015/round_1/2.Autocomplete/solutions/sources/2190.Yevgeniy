#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <string>
#include <cstring>
#include <cmath>
#include <set>
#include <list>
#include <queue>
using namespace std;

#define LL long long
#define V vector
#define VD V<double>
#define VI V<int>
#define VII V<VI>
#define FOR(t,l,r) for (int t=l; t<(int)r; t++)
#define FORL(t,l,r) for (LL t=l; t<(LL)r; t++)
#define max(x,y) ((x>y)?x:y)
#define min(x,y) ((x<y)?x:y)
#define abs(x) (((x)<0)?-(x):(x))
const double mth_pi=2*acos(0.);
#define pi mth_pi
#define inf (1<<23)
#define eps 1e-10
#define pb push_back
#define mp make_pair
#define sz size()
#define all(a) a.begin(),a.end()
#define mii map<int,int>
#define pii pair<int,int>
#define x first
#define y second
#define VL V<LL>
#define si set<int>
#define endl '\n'

const int N = 1000000;
const int K = 256;

struct vertex {
	int next[K];
	bool leaf;
};
 
vertex t[N+1];
int siz;

void trie_init() {
	memset (t[0].next, 255, sizeof t[0].next);
	siz=1;
}

int ans=0;

void add_string (const string & s) {
	int v=0; bool f=0;
	for (size_t i=0; i<s.sz; ++i) {
	char c=s[i]-'a';
		if (t[v].next[c]==-1) {
			memset(t[siz].next,255,sizeof t[siz].next);
			t[v].next[c]=siz++;
			if (!f) ans+=i+1, f=1;
		}
		v=t[v].next[c];
	}
	if (!f) ans+=s.sz;
	t[v].leaf=1;
}

int main () {
	freopen("autocomplete.txt","r",stdin);
	freopen("out.txt","w",stdout);

	int T; cin >>T;
	FOR(tt,1,T+1) {
		ans=0;
		int n; cin >>n;
		trie_init();
		string s;
		FOR(i,0,n) {
			cin >>s;
			add_string(s);
		}
		cout <<"Case #"<<tt<<": "<<ans<<endl;
	}
}
















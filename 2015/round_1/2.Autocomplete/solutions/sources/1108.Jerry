/**
 * jerry
 * B.cpp
 */

#include <assert.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <bitset>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

typedef long long int lli;
typedef pair<int, int> pii;

int gInt () {
    int i;
    scanf("%d", &i);
    return i;
}

lli gLong () {
    lli i;
    scanf("%lld", &i);
    return i;
}

double gDouble () {
    double i;
    scanf("%lf", &i);
    return i;
}

void quit () {
    fflush(stdout);
    exit(0);
}

struct Node {
    Node* children[26];
    ~Node() {
        for (int i = 0; i < 26; ++i) {
            if (children[i] != nullptr) {
                delete children[i];
            }
        }
    }
};

int n;
Node root;
char buf[1000005];

void solve(int nC) {
    n = gInt();
    root = Node();
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        scanf("%s", buf);
        int len = strlen(buf);
        Node* curNode = &root;
        int strokes = len;
        for (int j = 0; j < len; ++j) {
            char c = buf[j] - 'a';
            Node* nextNode = curNode->children[c];
            if (nextNode == nullptr) {
                nextNode = (curNode->children[c] = new Node());
                strokes = min(strokes, j + 1);
            }
            curNode = nextNode;
        }
        ans += strokes;
    }
    printf("Case #%d: %d\n", nC, ans);
}

int main (int argc, char ** argv) {
    int t = gInt();
    for (int i = 0; i < t; ++i) {
        solve(i + 1);
    }
    quit();
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>

struct node {
  node *next[26];
  node() {
    for (int i = 0; i < 26; i++) {
      next[i] = NULL;
    }
  }
};

void free_insert(const char *s, node *n)
{
  while (*s) {
    n->next[*s-'a'] = new node();
    n = n->next[*s-'a'];
    s++;
  }
}

int cheap_insert(const char *str, node *n)
{
  int c = 0;
  const char *s = str;
  while (*s) {
    if (n->next[*s-'a']) {
      n = n->next[*s-'a'];
      s++;
      c++;
    } else {
      free_insert(s, n);
      return c+1;
    }
  }
  return c;
}

int min_cost(std::vector<std::string> &v)
{
  int cost = 0;
  node t;
  for (const std::string &s : v) {
    cost += cheap_insert(s.c_str(), &t);
  }
  return cost;
}

int main()
{
  int cases;
  std::cin >> cases;
  for (int i = 1; i <= cases; i++) {
    int words;
    std::cin >> words;
    std::vector<std::string> wordlist;
    for (int i = 0; i < words; i++) {
      std::string s;
      std::cin >> s;
      wordlist.push_back(s);
    }
    std::cout << "Case #" << i << ": " << min_cost(wordlist) << std::endl;
  }
}
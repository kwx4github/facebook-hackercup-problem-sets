#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009ll
#define mod7 1000000007ll
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1;
/*********default*********/
#define L 1000010
struct Node{
    Node *nxt[ 26 ];
    Node(){
        memset( nxt , 0 , sizeof( nxt ) );
    }
};
Node *root;
int ans;
queue<Node*> Q;
void release( Node *tmp ){
    Q.push( tmp );
    while( Q.size() ){
        Node *now = Q.front(); Q.pop();
        for( int i = 0 ; i < 26 ; i ++ )
            if( now->nxt[ i ] )
                Q.push( now->nxt[ i ] );
        delete now;
    }
}
void build(){
    
}
int n , cs;
char c[ L ];
void init(){
    n = getint(); ans = 0;
    root = new Node;
}
void insert(){
    int len = strlen( c );
    Node *now = root; bool got = false;
    for( int i = 0 ; i < len ; i ++ ){
        if( now->nxt[ c[ i ] - 'a' ] == NULL ){
            if( !got ) ans += ( i + 1 ); got = true;
            now->nxt[ c[ i ] - 'a' ] = new Node;
        }
        now = now->nxt[ c[ i ] - 'a' ];
    }
    if( !got ) ans += len;
}
void solve(){
    while( n -- ){
        scanf( "%s" , c );
        insert();
    }
    printf( "Case #%d: %d\n" , ++ cs , ans );
    release( root );  
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fbround1;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
/**
 *
 * @author miraj
 */



class Trie {        
    // Constructor
    public Trie()   {     root = new Node((char)0);       }    
   
    
    public void insert(String word)  {
           
        
        int length = word.length();        
        Node crawl = root;
           
        
        for( int level = 0; level < length; level++)
        {
            HashMap<Character,Node> child = crawl.getChildren();            
            char ch = word.charAt(level);
               
            
            if( child.containsKey(ch))
                crawl = child.get(ch);
            else   
            {              
                Node temp = new Node(ch);
                
                child.put( ch, temp );
                crawl = temp;
            }
        }
           
        // Set bIsEnd true for last character
        crawl.setIsEnd(true);
        //test_d(crawl.getValue());
    }
    
    public void test_d(char op){
        System.out.print(" last bool at "+op);
    }
    
    public int getMatchingPrefix(String input)  {
        //String result = ""; 
        String traversals="";
        String last_level=""+1;
        int length = input.length();      
           
      
        Node crawl = root;   
          
        
        int level, prevMatch = 0; 
        for( level = 0 ; level < length; level++ )
        {    
            
            char ch = input.charAt(level);    
              
            
            HashMap<Character,Node> child = crawl.getChildren();                        
            
                if(crawl.isEnd()){
                    last_level = ""+(level+1);
                    //System.out.println("In"+level+" char= "+ch);
                }
            
            if( child.containsKey(ch) )
            {
               //result += ch;          //Update result
               traversals = child.size()+","+traversals;
               crawl = child.get(ch); //Update crawl to move down in Trie
                 
               // If this is end of a word, then update prevMatch
               
            }            
            else{
                last_level = ""+(level+1);
                break;
            }  
                
        }
        if(level==(length)){
            HashMap<Character,Node> child = crawl.getChildren();                        
            if(child.size()>0){
                return length;
            }
        }
          int l_split = last_split(traversals);
          //System.out.println("Last split: "+l_split+"bool "+last_level);
          int maximum = Math.max(l_split,Integer.parseInt(last_level));
        
          return maximum;
                  
        //return prev;
    }
    public int last_split(String tree){
        //System.out.println("tree "+tree);
        String splt[] = tree.split(",");
        int len =splt.length;
        int i;
        for(i=0;i<len-1;i++){
            int temp = Integer.parseInt(splt[i]);
            if(temp!=1)
                break;
            //System.out.print(" "+Integer.parseInt(splt[i]));
        }
        
        return (len - i);
    }
       
    private Node root;      
}

class Node {           
    public Node(char ch)  {
        value = ch; children = new HashMap<>(); bIsEnd = false;
    }    
    public HashMap<Character,Node> getChildren() {   return children;  }    
    public char getValue()                           {   return value;     }    
    public void setIsEnd(boolean val)                {   bIsEnd = val;     }    
    public boolean isEnd()                           {   return bIsEnd;    }
    private boolean bIsEnd;  private char value;    private HashMap<Character,Node> children;
    
}


public class autocomplete {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new FileReader("G:\\project\\testing.txt"));
        int cases = Integer.parseInt(br.readLine());
        for(int z=0;z<cases;z++){
            Trie dict = new Trie();        
            int n = Integer.parseInt(br.readLine());
            int sum=0;
            for(int i=0;i<n;i++){
                String ip = br.readLine();
                int cur =dict.getMatchingPrefix(ip);
                //System.out.println(""+cur);
                sum +=cur;
                dict.insert(ip);
            }
            System.out.println("Case #"+(z+1)+": "+sum);
        
        }
                            
    }
    
}
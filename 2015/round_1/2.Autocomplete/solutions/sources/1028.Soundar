#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>


using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 

#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define vpresent(c,x) (find(all(c),x) != (c).end()) 
#define rep(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a); i<=(b) ;i++)
#define mp make_pair
#define F first
#define S second
#define ll long long

int row[] ={0,1,-1,0};
int col[] ={1,0,0,-1};
map<int,vector<int> > m;
int mem[10000001];
 
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 

#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 

typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
    int leaf[ALPHABET_SIZE];
};
 

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
            pNode->leaf[i]=0;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();

        }
        pCrawl->leaf[index]++;
        pCrawl = pCrawl->children[index];
    }
 

    pCrawl->value = pTrie->count;
}
 

int search(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
 
        if( pCrawl->leaf[index] ==1)
         {
             return level+1;
         }
        pCrawl = pCrawl->children[index];
    }
 
    return length;
}
 

int main()
{
	int t,cont=1;	
	cin >> t;
	while(t--)
	{
		string s;
		int tt,ans=0;
		cin >> tt;
		trie_t trie;
		initialize(&trie);

		while(tt--)
		{

			cin >> s;
			insert(&trie, &s[0]);
			//cout << search(&trie,&s[0])<<"\n";
			ans+=search(&trie,&s[0]);
		}
		cout <<"Case #"<<cont++<<": "<<ans<<"\n";
	}
}
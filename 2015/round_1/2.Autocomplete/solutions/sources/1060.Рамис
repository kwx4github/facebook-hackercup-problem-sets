#include <iostream>
#include <cstring>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <bitset>
#define _USE_MATH_DEFINES
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <assert.h>
using namespace std;

void smain();
int main(){
    ios_base::sync_with_stdio(0);
#ifdef DEBUG
    freopen("/Users/ramis/Downloads/autocomplete.txt","rt",stdin);
    freopen("output.txt","wt",stdout);
    const clock_t start = clock();
#endif
    smain();
#ifdef DEBUG
    cerr << "\nTotal Execution Time: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
    return 0;
}

#define forn(i,n) for (int i=0;i<n;i++)
#define rforn(i,n) for (int i=n-1;i>=0;i--)
#define fori(i,a) for(auto i=a.begin(); i!=a.end(); ++i)
#define rfori(i,a) for(auto i=a.rbegin(); i!=a.rend(); ++i)
#define int long long
#define LL long long
#define mp(a,b) make_pair(a,b)
#define INF ((1LL<<62)-1) //2305843009213693951LL
#define MOD 1000000007
#define EPS 0.00000000001
#define N 10000001
/* --------- END TEMPLATE CODE --------- */

struct node {
    map<char, node*> nx;
    ~node(){ fori(it, nx) delete it->second; }
};

char buf[N];
node *root = 0;

inline int add() {
    int res = -1, i = 0;
    node *cur = root;
    for(; buf[i]; ++i) {
        if(cur->nx.count(buf[i]) == 0){
            node *n = new node;
            cur->nx.insert(mp(buf[i], n));
            cur = n;
            if(res == -1) res = i + 1;
        }else{
            cur = cur->nx.at(buf[i]);
        }
    }
    
    
    return res == -1 ? i : res;
}

void smain() {
    int T, n;
    cin >> T;
    for(int t = 1; t <= T; ++t) {
        cin >> n;
        root = new node;
        int res = 0;
        forn(i, n){
            cin >> buf;
            res += add();
        }
        cout << "Case #" << t << ": " << res << '\n';
        cerr << "Case #" << t << ": " << res << '\n';
        delete root;
    }
}




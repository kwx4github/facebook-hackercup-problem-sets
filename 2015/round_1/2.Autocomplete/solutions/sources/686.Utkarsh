#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)(c) - (int)'a')

struct TrieNode {
	vector< TrieNode* > children;

	TrieNode() {
		children.resize(ALPHABET_SIZE, NULL);
	}
	
};

struct Trie {
	TrieNode* root;

	Trie() {
		root = new TrieNode();
	}

	int insert(const string& key) {
		int count = 0;
		bool done = false;

		TrieNode* curr = root;

		rep(level, sz(key) ) {
			if(!done)
				count++;

			int index = CHAR_TO_INDEX(key[level]);

			if( curr->children[index] == NULL) {
				curr->children[index] = new TrieNode();
				done = true;
			}

			curr = curr->children[index];
		}

		return count;
	}

};

int main(int argc, char const *argv[])
{
	int T;
	gi(T);

	fore(t,1,T) {
		int N;
		gi(N);

		Trie dictionary;
		int sum = 0;
		rep(i, N) {
			string key;
			cin >> key;

			sum += dictionary.insert(key);
		}

		printf("Case #%d: %d\n", t, sum);
	}
	return 0;
}
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

const int NMAX = 1100000;

int g[NMAX][26];
char s[NMAX];

void gen() {

}

void solve() {
  int n;
  scanf("%d", &n);
  gets(s);

  int nn = 1;
  memset(g[0], -1, sizeof(g[0]));
  int ans = 0;
  forn(i, n) {
    gets(s);

    int v = 0;
    bool fnd = false;
    for (int j = 0; s[j]; j++) {
      int ch = s[j] - 'a';
      if (g[v][ch] == -1) {
        if (!fnd) {
          ans += j + 1;
          fnd = true;
        }
        memset(g[nn], -1, sizeof(g[nn]));
        g[v][ch] = nn++;
      }
      v = g[v][ch];
    }
    if (!fnd)
      ans += (int)strlen(s);
  }
  cout << ans << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    //gen();
    solve();
  }
  
  return 0;
}
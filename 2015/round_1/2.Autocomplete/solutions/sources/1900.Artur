# Copied and adapted from https://raw.githubusercontent.com/prakhar1989/Algorithms/master/trees/trie.py
def _get_child_branches(tr):
    if tr == []:
        return []
    return tr[1:]

def _get_child_branch(tr, c):
    for branch in _get_child_branches(tr):
        if branch[0] == c:
            return branch
    return None

def insert_key(key, trie_list):
    result = 0
    new_branch_created = False
    tr = trie_list
    for char in key:
        branch = _get_child_branch(tr, char)
        if branch == None:
            new_branch = [char]
            tr.append(new_branch)
            tr = new_branch
            if not new_branch_created:
                new_branch_created = True
                result += 1
        else:
            tr = branch
            result += 1
    return result

T = input()
for t in xrange(T):
    N = input()

    trie = [[]]
    result = 0
    for i in xrange(N):
        word = raw_input()
        result += insert_key(word, trie)

    print "Case #%d: %d" % (t + 1, result)

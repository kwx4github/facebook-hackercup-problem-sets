#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#include <windows.h>
#define all(v)begin(v),end(v)
#define dump(v)copy(begin(v),end(v),ostream_iterator<decltype(*begin(v))>(cout,"\n"))
#define rg(i,a,b)for(int i=a,i##e=b;i<i##e;++i)
#define fr(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define rf(i,n)for(int i=n-1;i>=0;--i)
#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define ec(i,m)for(int i=0,i##e=m.size();i<i##e;++i)
#define sz(v)int(v.size())
#define sr(v)sort(begin(v),end(v))
#define rs(v)sort(begin(v),end(v),greater<decltype(*begin(v))>())
#define rev(v)reverse(begin(v),end(v))
#define eb emplace_back
#define big numeric_limits<int>::max()
#define g(t,i)get<i>(t)
#define cb(v,w)copy(begin(v),end(v),back_inserter(w))
#define uni(v)sort(begin(v),end(v));v.erase(unique(begin(v),end(v)),end(v))
#define vt(...)vector<tuple<__VA_ARGS__>>
#define smx(a,b)a=max(a,b)
#define smn(a,b)a=min(a,b)
#define perm(v)next_permutation(begin(v),end(v))
#define perms(v)for(int c=(sort(begin(v),end(v)),1);c||next_permutation(all(v));c=0)
typedef long long ll;
using namespace std;

struct node {
	char c;
	int qty;
	bool exists;
	node *next_check;
	node *next_lett;
};

int main() {
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	int T;
	cin >> T;
	vector<node> trie;
	trie.reserve(1000010);
	node root = {0, 0, 0, 0, 0};
	//DWORD start = GetTickCount();
	fr(cc, T) {
		trie.clear();
		trie.push_back(root);
		int N, total = 0;
		cin >> N;
		string FUCK; getline(cin, FUCK);
		fr(sn, N) {
			string s;
			getline(cin, s);
			node *curr = &(trie[0]);
			int qq = sz(s) - 1;
			fr(jj, sz(s)) {
				char c = s[jj];
				bool f = true;
				++curr->qty;
				auto oldcurr = curr;
				if (curr->next_lett) for (node *sib = curr->next_lett; sib != 0; sib = sib->next_check) {
					if (sib->c == c) {
						f = false;
						curr = sib;
						break;
					}
				}
				if (f) {
					node n = {c, 0, 0, 0, 0};
					trie.push_back(n);
					trie.back().next_check = curr->next_lett;
					curr->next_lett = &(trie.back());
					curr = curr->next_lett;
				}
			}
			++curr->qty;
			curr->exists = true;
			curr = &(trie[0]);
			int n = 0;
			ei(c, s) {
				if (curr->qty == 1) break;
				++n;
				for (node *sib = curr->next_lett; sib != 0; sib = sib->next_check) {
					if (sib->c == c) {
						curr = sib;
						break;
					}
				}
			}
			n = max(n, 1);
			total += n;
		}
		cout << "Case #" << cc + 1 << ": " << total << endl;
	}
	//cerr << GetTickCount() - start << endl;
	system("pause");
}
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef
tree<string,
  null_type,
  less<string>,
  rb_tree_tag,
  tree_order_statistics_node_update>
set_t;


typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;

void print_vector(vi v);
void print_array(int* array, int start, int end);

#define FOR(i,a,b) for (int i = (a),_b = (b); i < _b; i++)
#define DOW(i,b,a) for (int i = (b),_a = (a); i >= _a; i--)
#define fill(a,v) memset(a, v, sizeof a)
#define checkbit(n,b) ((n >> b) & 1)
#define pb(a) push_back(a)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) (int)(a).size()

#define INF 1e9
#define PI acos(-1.0)

#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

int tc, n, cse = 1;
set_t all;
string s;

int main() {
  #ifndef ONLINE_JUDGE
  freopen("autocomplete.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif 
  s(tc);
  while(tc--){
    s(n);
    all.clear();
    int ans = 0;
    FOR(i, 0, n){
      cin >> s;
      all.insert(s);
      int k = all.order_of_key(s);
      //printf("%d\n", k);
      int match1 = 1, match2 = 1;
      if(k){
        string prev = *all.find_by_order(k-1);
        //printf("%s\n", prev.c_str());
        match1 = min(SZ(s), SZ(prev));
        FOR(j, 0, min(SZ(s), SZ(prev))){
          if(s[j] != prev[j]) {match1 = j;break;}
        }
        match1++;
      }
      if(k != i){
        string next = *all.find_by_order(k+1);
        match2 = min(SZ(s), SZ(next))-1;
        FOR(j, 0, min(SZ(s), SZ(next))){
          if(s[j] != next[j]) {match2 = j;break;}
        }
        match2++;
      }
      ans += max(match1, match2);
      //printf("%d\n", ans);

    }
    printf("Case #%d: %d\n", cse++, ans);
  }
  return 0;
}

void print_array(int* array, int start, int end){
  printf("[");
  FOR(i, start, end){
    printf("%d ", array[i]);
  }
  printf("]");
  printf("\n");
}

void print_vector(vi v){
  printf("[");
  FOR(i, 0, v.size()){
    printf("%d ", v[i]);
  }
  printf("]");
  printf("\n");
}
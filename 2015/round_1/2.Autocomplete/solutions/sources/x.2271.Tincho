import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;


public class Main {
	
	public static class Tree{
		int cant[];
		Tree letter[];
		
		public Tree(){
			cant= new int[27];
			Arrays.fill(cant, 0);
			letter= new Tree[27];
		}
		
		public int add(char s[], int l, int i, boolean last){
			while(i<s.length){
				int aux=s[i]-97;
				if (aux>25) aux=26;
				cant[aux]++;
				if (letter[aux]==null){
					if (last){
						l++;
						last=false;
					}
					letter[aux]= new Tree();
				}
				else l++;
				i++;
			}
			return l;
		}
		
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader bf= new BufferedReader(new FileReader("/Users/martin/Downloads/homework.txt"));
		//BufferedReader bf= new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter out = new BufferedWriter(new FileWriter("/Users/martin/Downloads/B.txt"));
		StringTokenizer st= new StringTokenizer(bf.readLine());
		int T=Integer.parseInt(st.nextToken());
		int N, sum;
		char s[];
		Tree pref;
		for (int i=1; i<=T; i++){
			System.out.print("Case #"+i+": ");
			out.append("Case #"+i+": ");
			st= new StringTokenizer(bf.readLine());
			N=Integer.parseInt(st.nextToken());
			pref= new Tree();
			sum=0;
			for (int j=0; j<N; j++){
				st= new StringTokenizer(bf.readLine());
				s=st.nextToken().toCharArray();
				sum+=pref.add(s, 0, 0, true);
			}
			System.out.println(sum);
			out.append(String.valueOf(sum));
			if (i<T)out.newLine();
		}
		out.close();
	}
	
}
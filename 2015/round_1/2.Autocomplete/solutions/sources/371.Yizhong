#include <cstring>
#include <iostream>
#include <string>
using namespace std;

struct Trie {
  int count = 0;
  bool word = false;
  int c[26];
};

int n;
int tail;
Trie nodes[1100000];

void add_word(string& word) {
  int node = 0;
  for (int i = 0; i < word.size(); i++) {
    nodes[node].count++;
    int idx = word[i] - 'a';
    if (nodes[node].c[idx] != -1)
      node = nodes[node].c[idx];
    else {
      nodes[node].c[idx] = ++tail;
      nodes[tail].count = 0;
      nodes[tail].word = false;
      node = tail;
    }
  }
  nodes[node].count++;
  nodes[node].word = true;
}

int consume(string& word) {
  int node = nodes[0].c[word[0] - 'a'];
  int i;
  for (i = 1; i < word.size() && nodes[node].count > 1; i++)
    node = nodes[node].c[word[i] - 'a'];
  return i;
}

int compute() {
  int ans = 0;
  // trie init
  tail = 0;
  memset(nodes, -1, sizeof(nodes));
  nodes[0].count = 0;
  nodes[0].word = false;
  // process each word
  string word;
  for (int i = 0; i < n; i++) {
    cin >> word;
    add_word(word);
    ans += consume(word);
  }
  return ans;
}

int main() {
  int t;
  cin >> t;
  for (int i = 1; i <= t; i++) {
    cin >> n;
    cout << "Case #" << i << ": " << compute() << endl;
  }
  return 0;
}

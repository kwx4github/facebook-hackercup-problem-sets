#!/usr/bin/python
# -*- coding: utf-8 -*-

class RadixTree():
    def __init__(self):
        self._data = {}

    def add(self, word):
        data = self._data
        i = 0
        while True:
            try:
                node = data[word[i]]
            except KeyError:
                if data:
                    data[word[i]] = [word[i+1:],{}]
                else:
                    if word[i] != '':
                        if i != 0:
                            data[''] = ['', {}]
                        data[word[i]] = [word[i+1:], {}]
                break

            i += 1
            if word.startswith(node[0], i):
                if len(word[i:]) == len(node[0]):
                    if node[1]:
                        try:
                            node[1]['']
                        except KeyError:
                            print 'hello'
                            data = node[1]
                            data[''] = ['',{}]
                    break
                else:
                    i += len(node[0])
                    data = node[1]
            else:
                ii = i
                j = 0
                while ii != len(word) and j != len(node[0]) and \
                      word[ii:ii+1] == node[0][j:j+1]:
                    ii += 1
                    j += 1
                tmp = {}
                tmp[node[0][j:j+1]] = [node[0][j+1:],node[1]]
                tmp[word[ii:ii+1]] = [word[ii+1:],{}]
                data[word[i-1]] = [node[0][:j],tmp]

                break

    def find(self, word):
        data = self._data
        i = 0
        while True:
            node = data[word[i]]
            i += 1
            if word.startswith(node[0], i):
                if len(word[i:]) == len(node[0]):
                    return i if not node[1] else i + len(node[0])
                else:
                    i += len(node[0])
                    data = node[1]

if __name__ == '__main__':
    with open('autocomplete_input.txt') as problem_input:
        with open('autocomplete_output.txt', 'w') as problem_output:
            test_cases = int(problem_input.readline().strip())

            for test_case in xrange(test_cases):
                num_words = int(problem_input.readline().strip())

                dictionary = RadixTree()
                key_count  = 0

                for _ in xrange(num_words):
                    word = problem_input.readline().strip()
                    dictionary.add(word)
                    key_count += dictionary.find(word)

                output = 'Case #{0}: {1}\n'.format(test_case + 1, key_count)

                problem_output.write(output)

                #print output

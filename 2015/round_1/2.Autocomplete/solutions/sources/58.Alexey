#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <deque>
#include <cmath>
#include <ctime>
#include <stack>
#include <set>
#include <map>
#include <cassert>
#include <memory.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()

typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair <int, int> pi;

void solve();

void precalc();

#define FILENAME "souvenir"

int main() {
	string s = FILENAME;
#ifdef RIAD
	freopen("input", "r", stdin);
#ifndef DEBUG
	freopen("output", "w", stdout);
#endif
	//cout<<FILENAME<<endl;
	//assert (s != "change me please");
	clock_t start = clock();
#else
	//freopen(FILENAME ".in", "r", stdin);
	//freopen(FILENAME ".out", "w", stdout);
#endif
	cout.sync_with_stdio(0);
	cout.precision(20);
	cout << fixed;
	int t = 1;
	cin >> t;

	//precalc();
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef DEBUG
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n\n";
#endif
	return 0;
}

struct vertex {
	int go[26];
	vertex() {
		memset(go, -1, sizeof go);
	}
};

vector<vertex> states;

void solve() {
	int n;
	cin >> n;
	states.clear();
	int ans = 0;
	states.push_back(vertex());
	for(int i = 0; i < n; ++i) {
		string s;
		cin >> s;
		int st = 0;
		bool added = 0;
		for(int j = 0; j < s.size(); ++j) {
			if(states[st].go[s[j] - 'a'] == -1) {
				if(!added) {
					added = true;
					ans += j + 1;
				}
				states[st].go[s[j] - 'a'] = states.size();
				states.push_back(vertex());
			}
			st = states[st].go[s[j] - 'a'];
		}
		if(!added)
			ans += s.size();
	}
	
	cout << ans << endl;
}
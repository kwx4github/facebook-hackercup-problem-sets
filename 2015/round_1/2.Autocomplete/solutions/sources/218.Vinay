#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include <map>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
 
#define DEBUG //on-off switch for prlling statements
 
// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
 
// Useful constants
#define EPS                         1e-9
 
// Useful hardware instructions
#define bitcount1                    __builtin_popcount1
#define gcd                         __gcd
 
// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(ll i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((ll)(a.size()))
 
// Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
 
#define INF 1000000000
#define ll long long int
#define llu long long unsigned
#define ld long
 
#define llu long long unsigned
#define ld long
#define F first
#define S second
 
#define mod 1000000007

typedef struct node
{
	int cnt;
	node * child[26];
	node()
	{
		cnt=1;
		for(int i=0;i<26;i++)
		child[i]=NULL;
	}
}node;
node *root;
string a;
void deletetrie(node *head)
{
	for(int i=0;i<26;i++)
	{
		if(head->child[i] != NULL)
		{
			deletetrie(head->child[i]);
		}
	}
	delete(head);
}
node *tmp;
void inserttrie(node *head,int idx)
{

	while(idx != a.size())
	{
		if(head->child[a[idx]-'a'] == NULL)
		{
			tmp=new node;
			tmp->cnt=1;
			head->child[a[idx]-'a']=tmp;
		 
		}
		else
		((head->child[a[idx]-'a'])->cnt)++;
	//	inserttrie(head->child[a[idx]-'a'],idx+1);
		head=head->child[a[idx]-'a'];
		idx++;
	}
}
int ans=1;
void query(node *head,int idx)
{
	while(1)
	{
		if(idx == a.size())
		{
			ans=a.size();
			return;
		}
		if((head->child[a[idx]-'a'])->cnt == 1)
		return;
		head=head->child[a[idx]-'a'];
		idx++;
		ans++;
	}
	
}
string arr[100001];
void solve(int t)
{
	root=new node;
	root->cnt=1000;
	int n;
	s(n);
	for(int i=0;i<n;i++)
	{
		cin >> arr[i];
	}

	//cout<<"hha"<<endl;
	ll fans=0;
	for(int i=0;i<n;i++)
	{
		ans=1;
		a=arr[i];
		inserttrie(root,0);
	
		query(root,0);
		fans=fans+ans;
	}
//	deletetrie(root);
	
	printf("Case #%d: %lld\n",t,fans);
	
}

int main()
{
	int t;
	s(t);
	for(int i=0;i<t;i++)
	solve(i+1);
}

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * @author dattran
 *
 */
public class AutoComplete {

	/**
	 * @param args
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 */
	public static void main(final String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		String inputFileName = "/home/dattran/Downloads/autocomplete.txt";
		String outputFileName = "/home/dattran/Downloads/output.txt";
		Scanner in = new Scanner(new FileReader(inputFileName));
		PrintWriter writer = new PrintWriter(outputFileName, "UTF-8");
		int totalTestCase = Integer.valueOf(in.nextLine());
		for (int i = 1; i <= totalTestCase; i++) {
			AutoComplete ac = new AutoComplete();
			int totalWorld = Integer.valueOf(in.nextLine());
			int nr = 0;
			for (int j = 0; j < totalWorld; j++) {
				nr = nr + ac.generatePrefix(in.nextLine());
			}
			writer.println("Case #" + i + ": " + nr);

		}

		writer.close();
		in.close();

	}

	private final Map<String, Boolean> mapPrefix;
	private final Map<String, Boolean> mapWorld;

	public AutoComplete() {
		mapPrefix = new HashMap<String, Boolean>();
		mapWorld = new HashMap<String, Boolean>();
	}

	private int generatePrefix(final String world) {
		int wLeng = world.length();
		StringBuilder sb = new StringBuilder("");
		sb.append(world.charAt(0));
		int i = 1;
		while (i < wLeng) {
			if ((mapPrefix.get(sb.toString()) == null) && ((mapWorld.get(sb.toString()) == null))) {
				mapPrefix.put(sb.toString(), true);
				mapWorld.put(world, true);
				return sb.length();
			} else {
				sb = sb.append(world.charAt(i));
				i++;
			}
		}
		// wohl world
		if ((mapPrefix.get(world) == null) && ((mapWorld.get(world) == null))) {
			mapPrefix.put(sb.toString(), true);
			mapWorld.put(world, true);
			return sb.length();
		}
		for (int k = 0; k <= 100000; k++) {
			sb.append((char) 97);
			for (int j = 98; j <= 122; i++) {
				if ((mapPrefix.get(sb.toString()) == null) && ((mapWorld.get(sb.toString()) == null))) {
					mapPrefix.put(sb.toString(), true);
					mapWorld.put(world, true);
					return sb.length();
				} else {
					sb.deleteCharAt(sb.length() - 1);
					sb.append((char) j);
					j++;
				}
			}
		}
		System.out.println("bad");
		return 1000000;
	}

}

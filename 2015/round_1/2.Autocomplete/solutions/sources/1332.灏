#include <stdio.h>
#include <stdlib.h>

#define MAXN 1000005
#define and &&

char tmpword[MAXN + 1];



typedef struct atrie{
	struct atrie *edge[26];
}trie;

trie *NoEdge;
int count = 0;

void initialize(trie *vertex)
{
	int i, j;

	for (i = 0; i < 26; i++) 
	{
		vertex -> edge[i] = NoEdge;
	}
}

void addword(trie * vertex, char word[], int pos, int flag)
{
	if (word[pos] == 0 and flag == 0) 
	{
		count = pos;
	}
	
	if (word[pos] != 0) 
	{
		int k = word[pos] - 'a';

		if (vertex -> edge[k] == NoEdge) 
		{
			vertex -> edge[k] = (trie *) malloc(sizeof (trie));
			initialize(vertex -> edge[k]);
			if (flag == 0) 
			{
				count = pos + 1;
			}
			flag = 1;
		}

		addword(vertex -> edge[k], word, pos + 1, flag);
	} 
}


int main(void)
{
	freopen("autocomplete.in", "r", stdin);
	freopen("autocomplete.out", "w", stdout);
	int t, n;
	int i, j, o;

	scanf("%d", &t);


	for (o = 0; o < t; o++) 
	{
		scanf("%d", &n);
		trie * root;
		int sum = 0;

		root = (trie * ) malloc(sizeof(trie));
		initialize(root);

		for (i = 0; i < n; i++) 
		{
			scanf("%s", tmpword);
			if (n != 1) 
			{count = 0;
			addword(root, tmpword, 0, 0);
			sum += count;

			}
					}

		if (n == 1) 
		{
			printf("Case #%d: 1\n", o + 1);
		}
		else 
		{

		printf("Case #%d: %d\n", o + 1, sum);
		}


		
		

	}
	
	return 0;
}


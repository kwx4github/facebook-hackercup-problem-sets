#include <cstdio>
#include <ctime>
#include <cassert>
#include <vector>
using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

const int MAXS = 1000100;

int nodes[MAXS][26];
int cntNodes = 0;

inline int addNode() {
    int ret = cntNodes++;
    for (int i = 0; i < 26; i++) nodes[ret][i] = -1;
    return ret;
}

char s[MAXS];
int main() {
    clock_t start = clock();
    int tests = 0;
    assert(scanf("%d", &tests) == 1);
    for (int test = 1; test <= tests; test++) {
        int n;
        assert(scanf("%d", &n) == 1);
        cntNodes = 0;
        int root = addNode();
        long long answer = 0;
        for (int i = 0; i < n; i++) {
            scanf("%s", s);
            int v = root;
            for (int i = 0; s[i]; i++) {
                int c = s[i] - 'a';
                assert(0 <= c && c < 26);
                answer++;
                if (nodes[v][c] == -1) {
                    break;
                }
                v = nodes[v][c];
            }
            v = root;
            for (int i = 0; s[i]; i++) {
                int c = s[i] - 'a';
                if (nodes[v][c] == -1) {
                    nodes[v][c] = addNode();
                }
                v = nodes[v][c];
            }
        }
        printf("Case #%d: %lld\n", test, answer);
        eprintf("Test %d: %.2f\n", test, (double)(clock() - start) / CLOCKS_PER_SEC);
    }
    eprintf("Total: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    return 0;
}

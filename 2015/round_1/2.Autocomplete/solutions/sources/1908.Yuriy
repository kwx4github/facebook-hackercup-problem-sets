#include <cstdio>
#include <iostream>
#include <fstream>
#include <map>
using namespace std;

const int X = 1e6 + 100;

map <char, int> mp[X];
bool term[X];
string s[X];
int Size = 0;

long long add_string(const string &s)
{
    int now = 0;
    long long ans = -1;
    for (int i = 0; i < s.size(); i++)
    {
        auto it = mp[now].find(s[i]);
        if (it == mp[now].end())
        {
            mp[now][s[i]] = ++Size;
            now = Size;
            if(ans == -1) ans = i + 1;
        }
        else
        {
            now = it -> second;
        }
    }
    if(ans == -1) ans = s.size();
    term[now] = true;
    return ans;
}


int main()
{
    ifstream in("autocomplete.txt");
    ofstream out("b_output.txt");
    int test;
    in >> test;
    for (int tt = 1; tt <= test; ++tt)
    {
        int n;
        in >> n;
        for (int i = 0; i < n; i++)
        {
            in >> s[i];
        }
        for (int i = 0; i <= Size; i++)
        {
            mp[i].clear();
            term[i] = false;
        }
        Size = 0;
        long long ans = 0;
        for (int i = 0; i < n; i++)
        {
            ans += add_string(s[i]);
        }
        out << "Case #" << tt << ": " << ans << '\n';
    }
    return 0;
}

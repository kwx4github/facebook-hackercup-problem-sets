#include <bits/stdc++.h>

using namespace std;

struct trie_node
{
    int sz;
    map<char, trie_node*> link;
    trie_node()
    {
        sz=0;
    }
    ~trie_node()
    {
        for(auto& it: link)
            delete it.second;
    }
} *root;

int N;
string words[100001];

void solve()
{
    cin>>N;
    root=new trie_node();
    int ans=0;
    for(int i=0; i<N; i++)
    {
        cin>>words[i];
        trie_node *cur=root;
        root->sz++;
        for(auto& c: words[i])
        {
            trie_node*& nxt=cur->link[c];
            if(!nxt)
                nxt=new trie_node();
            cur=nxt;
            cur->sz++;
        }
        cur=root;
        for(auto& c: words[i])
        {
            trie_node*& nxt=cur->link[c];
            cur=nxt;
            ans++;
            if(cur->sz<=1)
                break;
        }
    }
    printf("%d\n", ans);
    delete root;
}

int main()
{
    freopen("autocomplete.txt", "r", stdin);
    freopen("autocomplete.out", "w", stdout);
    int T;
    scanf("%d", &T);
    for(int i=1; i<=T; i++)
    {
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

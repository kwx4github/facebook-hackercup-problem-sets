#include <bits/stdc++.h>

using namespace std;
typedef long long LL;

class Trie_Node{
public:
  int child[26];
  char ch;
  LL words_counter;
};
class Trie{
  Trie_Node Trie_array[10000000];
  Trie_Node *root;
  int size;
  int get_node(char ch){
    Trie_array[size].ch=ch;
    size++;
    return size-1;
  }
public:
  Trie(){
    size=1;
    root=&Trie_array[0];
  }
  void addWord(string &word){
    Trie_Node *curr=root;
    int idx;
    for(LL i=0;i<(LL)word.length();i++){
      idx=(int)(word[i]-'a');
      curr->words_counter++;
      if(curr->child[idx]==0){
	curr->child[idx]= get_node(word[i]);
      }
      curr=&Trie_array[curr->child[idx]];
    }
    curr->words_counter++;
  }
  LL prefix(string &word){
    Trie_Node *curr=root;
    LL rv=0;
    for(LL i=0;i<(LL)word.length();i++){
      if(curr->words_counter==1){
	return rv;
      }
      else{
	rv++;
	curr=&Trie_array[curr->child[word[i]-'a']];
      }
    }
    return rv;
  }
  void clear(){
    for(int i=0;i<size;i++){
      Trie_array[i].words_counter=0;
      memset(Trie_array[i].child,0,sizeof(Trie_array[i].child));
    }
    size=1;
  }
};

int T;
LL N,tmp;
string s;
LL sum;
Trie t;
int main(){
  cin>>T;
  for(int i=0;i<T;i++){
    cin>>N;
    sum=0;
    for(int j=0;j<N;j++){
      cin>>s;
      t.addWord(s);
      tmp=t.prefix(s);
      if(tmp==0)tmp++;
      //cout<<t.prefix(words[j])<<endl;
      sum+=tmp;
    }
    cout<<"Case #"<<i+1<<": "<<sum<<endl;
    t.clear();
  }
  return 0;
}

#pragma comment(linker, "/STACK:500777216")

#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<string>
#include<sstream>
#include<deque>
#include<math.h>
#include<cstring>
#include <bitset>
#include<algorithm>
#include<stdio.h>
#include<stdlib.h>

#define all(v) v.begin(),v.end()
#define mpair make_pair

using namespace std;
typedef long double ld;
const ld epsilon = 1e-9;
typedef long long ll;

const int ALPHABET_SIZE = 26;

class Node {
public:
	Node* links[ALPHABET_SIZE];
	Node() {
		for (int i = 0; i < ALPHABET_SIZE; i++)
			links[i] = NULL;
	}
    ~Node() {
	   for (int i = 0; i <ALPHABET_SIZE; i++) {
		   if (links[i] != NULL) {
			   delete links[i];
		   }
	   }
   }
};

class Trie {
private:
	Node* root;
	string word;
public:
	Trie() {
		root = new Node;
	}

	~Trie() {
		delete root;
	}

	int addNewWord(const string& newWord) {
		word = newWord;
		return addWordAux(root, 0);
	}
private:
	int addWordAux(Node * node, int idx) {
		if (idx == word.size()) {
			return idx;
		}
		if (node->links[word[idx] - 'a'] == NULL) {
			Node * newNode = new Node;
			node->links[word[idx] - 'a'] = newNode;
			addWordAux(newNode, idx  + 1);
			return idx + 1;
		} else {
			return addWordAux(node->links[word[idx] - 'a'], idx + 1);
		}
	}

};

const bool LOCAL_TESTS = false;
const int N_CONST = 100000;
const int NUM_TESTS_CONST = 1;

string getWord(int idx) {
	string res;
	if (LOCAL_TESTS) {
		
		if (idx == -1) {
			res.resize(900000, 'a');
		} else {
			res.resize(10, 'a');
		}
	} else {
		cin >> res;
	}
	return res;
}

int getN() {
	if (LOCAL_TESTS) {
		return N_CONST;
	} else {
		int n;
		cin >> n;
		return n;
	}
}

int getNumTests() {
	if (LOCAL_TESTS) {
		return NUM_TESTS_CONST;
	} else {
		int numTests;
		cin >> numTests;
		return numTests;
	}
}

int main()
{
	freopen("hacker.in", "r", stdin);
	freopen("hacker.out", "w", stdout);

	int numtests = getNumTests();
	for (int o = 0; o < numtests; o++)
	{
		printf("Case #%d: ", o + 1);
		int n = getN();
		Trie * trie = new Trie;
		int res = 0;
		string word;
		for (int i = 0; i < n; i++)	{
			word = getWord(i);
			res += trie->addNewWord(word);
		}
		delete trie;
		cout << res << endl;
	}
	return 0;
}
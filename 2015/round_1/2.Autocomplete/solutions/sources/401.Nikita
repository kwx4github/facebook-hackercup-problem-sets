#include<cstdio>
#include<algorithm>
#include<iostream>
#include<cstdlib>
#include<cassert>
#include<cstring>
#include<vector>
#include<string>
#include<cmath>
#include<ctime>
#include<set>
#include<map>
 
using namespace std;
 
#define sz(c) (int)(c).size()
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
	 
#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
 
#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif
 
#define FNAME "test"

int T, ans, res, ind, n;
string r;

class Comparator
{
public:
 	bool operator () (const string &l, const string &r) const
 	{
 		int len = min((int) l.length(), (int) r.length());
 		for (int i = 0; i < len; i++)
 		{
 			if (l[i] < r[i])
 				return 1;
 			if (l[i] > r[i])
 				return 0;
 		}
 		return (l.length() < r.length());
 	}	
};

set <string, Comparator> s;

int main()
{
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		scanf("%d\n", &n);
		ans = 0;
		s.clear();
		for (int i = 0; i < n; i++)
		{
			cin >> r;
			s.insert(r);
   			set<string, Comparator>::iterator it = s.upper_bound(r);
   			it--;
   			res = 1;
   			if (it != s.begin())
   			{
   			    it--;
   				ind = (int) (*it).length() + 1;
   				for (int i = 0; i < min((int) r.length(), (int) (*it).length()); i++)
   				{
   					if ((*it)[i] < r[i])
   					{
   						ind = i + 1;
   						break;
   					}                   
   				}
   				res = max(res, ind);
   				it++;
   			}
   			it++;
   			if (it != s.end())
   			{
   				ind = (int) r.length();
   				for (int i = 0; i < min((int) r.length(), (int) (*it).length()); i++)
   				{
   					if ((*it)[i] > r[i])
   					{
   						ind = i + 1;
   						break;
   					}
   				}
   				res = max(res, ind);
   			}
   			ans += res;
   		}
   		printf("Case #%d: %d\n", t + 1, ans);
   	} 
    return 0;
}
#include <iostream>
#include <string>
#include <vector>
int minChar;
bool sv = false;
using namespace std;

struct Node
{
	bool value;
	Node* next[26];
};

class Trie
{
private :
	Node root;
	Node* rootPtr;
	Node* createNode(int);
	Node* Insert(Node*, string);
	long long retrieve(Node* x, string key)
	{
		for(int i=0;i<key.size();i++)
		{
			if(x->next[key[i]-'a'] == NULL)
			{
				return i+1;
			}
			x = x->next[key[i]-'a'];
		}
		return key.size();
	}
	void print(Node*);

public :
	int R;
	Trie(int r)
	{
		R = r;
		rootPtr = createNode(r);
	}

	void Insert(string);
	bool stringExist(string);
	long long retrieve(string);
	void print();
	
};


long long Trie:: retrieve(string key)								
{
	return retrieve(rootPtr,key);
}

Node* Trie:: createNode(int r)								
{
	Node* n;
	n = (Node*)malloc(sizeof(struct Node));
	n->value = -1;
	for(int i=0;i<R;++i)	{n->next[i] = NULL;}
	return n;
}

Node* Trie:: Insert(Node* x, string key)	
{
	Node* root = x;
	for(int i=0;i<key.size();i++)
	{
		if(x->next[key[i]-'a'] == NULL)
		{
			struct Node* temp = createNode(26);
			x->next[key[i]-'a'] = temp;
		}
		x = x->next[key[i]-'a'];
	}
	x->value = true; 
	return root;
}
void Trie:: Insert(string key)						
{
	rootPtr = Insert(rootPtr, key);
}

int main()
{
	int T; scanf("%d",&T);
	for(int t=1;t<=T;t++)
	{
		Trie l = Trie(26);
		int N; scanf("%d",&N);
		long long count = 0;
		string s;
		cin.clear(); cin.ignore(1,'\n');
		for(int words=0;words<N; words++)
		{
			getline(cin, s);cin.clear(); cin.ignore(0, '\n');
			sv = false;
			int req = l.retrieve(s);
			l.Insert(s);
			count += req;
		}
		printf("Case #%d: %d\n",t,count);
	}
	cin.get();cin.get();
	return 0;
}
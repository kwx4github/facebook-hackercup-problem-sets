#include <bits/stdc++.h>
#define ft first
#define sc second
#define pb push_back
#define mp make_pair
using namespace std;

struct _data{
	vector<pair<char,int> > child;
};

char in[1000005];
vector<_data> trie;
int trie_idx;

int main(){
	freopen("autocomplete_in.txt","r",stdin);
	freopen("autocomplete_out.txt","w",stdout);
	int t;
	scanf("%d",&t);
	for(int tt = 1; tt <= t; tt++ ){
		trie.clear();
		_data t;
		trie.pb(t);
		trie_idx = 1;
		int n;
		long long ans=0;
		scanf("%d",&n);
		for(int i = 0; i < n; i++ ){
			scanf("%s",in);
			int in_id = 0, trie_id = 0, sz = strlen(in);
			in_id=sz-1;
			for(int i = 0; i < sz; i++ ){
//				printf("At %d, trie_id %d\n",i,trie_id);
				int found = -1;
				for(int j = 0; j < trie[trie_id].child.size(); j++ ){
					assert(j<=26);
					if(trie[trie_id].child[j].ft==in[i]){
						found = j;
						break;
					}
				}
				if(found==-1){
//					printf("Not found\n");
					in_id = i;
					while(i<sz){
						_data t;
						trie.pb(t);
						trie[trie_id].child.pb(mp(in[i],trie_idx));
//						printf("Create child of %d at %d\n",trie_id,trie_idx);
						trie_id = trie_idx;
						trie_idx++;
						i++;
					}
				}
				else{
					trie_id = trie[trie_id].child[found].sc;
//					printf("trie_id changed to %d\n",trie_id);
				}
			}
//			printf("Create from %d\n",in_id+1);
			ans += in_id+1;
		}
		printf("Case #%d: %lld\n",tt,ans);
	}
}

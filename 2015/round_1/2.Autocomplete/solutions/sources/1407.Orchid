/**
 *@author:  Orchid
 *@Problem: Autocomplete
 *@Contest: Hacker Cup 15 Round 1
 */
#include<bits/stdc++.h>
#define ULLI unsigned long long int
#define LLI long long int
#define pb push_back
#define mem(a,p) memset(a,p,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define bitcount __builtin_popcount
#define checkbit(n,b) ((n>>b)&1)
#define gcd __gcd
#define rep(i,a,b) for(int i=a;i<b;++i)
#define all(a) a.begin(),a.end()
#define sz(a) ((int)(a.size()))
#define DREP(a) sort(all(a));a.erase(unique(all(a)),a.end())
#define debug(x,y) cerr<<x<<" "<<y<<" "<<endl;
#define ns ios_base::sync_with_stdio(false);cin.tie(0)
using namespace std;
#define VI vector<int>
#define PII pair<int,int>
#define MOD 1000000007LL
#define EPS 1e-12

#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')


typedef struct trie_node trie_node_t;
struct trie_node {
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie {
    trie_node_t *root;
};

trie_node_t *getNode() {
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode ) {
        for(int i = 0; i < ALPHABET_SIZE; i++) {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}

void initialize(trie_t *pTrie) {
    pTrie->root = getNode();
}

void insert(trie_t *pTrie, string key) {
    int level, index;
    int length = key.length();
    trie_node_t *pCrawl;
    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ ) {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] ) {
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
    }
    return;
}


int search(trie_t *pTrie, string key) {
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ ) {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] ) {
            return (level + 1);
        }
        pCrawl = pCrawl->children[index];
    }
    return length;
}

int main() {
    ns;
    freopen("autocomplete.txt", "r", stdin);
    freopen("autocomplete.out", "w", stdout);
    int t, n;
    cin >> t;
    string s;
    int cs = 1;
    while(t--) {
        cin >> n;
        trie_t trie;
        initialize(&trie);
        LLI ans = 0;
        while(n--) {
            cin >> s;
            ans += (LLI)search(&trie, s);
            insert(&trie, s);
        }
         cout << "Case #" << cs++ << ": " << ans << "\n";
    }
    return 0;
}

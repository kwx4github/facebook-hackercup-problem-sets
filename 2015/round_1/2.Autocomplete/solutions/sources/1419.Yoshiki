#include <bits/stdc++.h>

using namespace std;

struct Node {
  vector<int> child;
  Node() {
    child = vector<int>(26, -1);
  }
};

int depth;
vector<Node> node;

// void rec(int id, const string &word, int idx, bool flg) {
//   if (idx == word.size()) return;

//   if (flg) depth++;
//   int v = word[idx] - 'a';

//   if (node[id].child[v] == -1) {
//     int new_id = node.size();
//     node.push_back(Node());
//     node[id].child[v] = new_id;
//     rec(new_id, word, idx + 1, false);
//   } else {
//     rec(node[id].child[v], word, idx + 1, flg);
//   }
// }

void rec(int id, const string &word, int idx, bool flg) {
  for (int i = 0; i < word.size(); i++) {
    if (flg) depth++;
    int v = word[i] - 'a';
    
    if (node[id].child[v] == -1) {
      int new_id = node.size();
      node.push_back(Node());
      node[id].child[v] = new_id;
      flg = false;
      id = new_id;
    } else {
      id = node[id].child[v];
    }  
  }
}


int main() {
  int T;
  cin >> T;

  for (int tc = 1; tc <= T; tc++) {
    int N;
    cin >> N;

    node.clear();
    node.push_back(Node());
    
    long long int ans = 0;
    
    for (int i = 0; i < N; i++) {
      string word;
      cin >> word;
      depth = 0;
      rec(0, word, 0, true);
      ans += depth;
    }
    
    cout << "Case #" << tc << ": " << ans << endl;
  }
  
  return 0;
}

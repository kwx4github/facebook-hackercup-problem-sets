#include <bits/stdc++.h>
using namespace std;

struct node {
	node* _go[256];
	node* parent;
	int cnt;
	bool leaf;

	node(node* parent)
		: parent(parent)
		, cnt(0)
		, leaf(false)
	{
		memset(_go, 0, sizeof _go);
	}

	node* go(char _c)
	{
		int c = _c;
		if (!_go[c]) {
			_go[c] = new node(this);
		}

		return _go[c];
	}

	void inc()
	{
		if (leaf) return;
		leaf = true;
		node* par = parent;
		cnt++;
		while (par) {
			par->cnt++;
			par = par->parent;
		}
	}

	~node()
	{
		for (node* child : _go) {
			if (child) {
				delete child;
			}
		}
	}
};


int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int tests;
	cin >> tests;

	cerr << "Starting\n";
	for (int t = 1; t <= tests; t++) {
		cerr << "Solving test " << t << endl;
		time_t _start = clock();

		node* root = new node(nullptr);

		int n;
		cin >> n;
		int ans = 0;
		for (int i = 0; i < n; i++) {
			string s;
			cin >> s;
			node* cur = root;
			for (char c : s) {
				cur = cur->go(c);
			}
			cur->inc();
			cur = root;
			for (char c : s) {
				cur = cur->go(c);
				++ans;
				if (cur->cnt == 1) {
					break;
				}
			}
		}

		delete root;
		
		cout << "Case #" << t << ": " << ans << "\n";
		cerr << "Finished in " << (clock() - _start) / CLOCKS_PER_SEC << endl;
	}
}

package algo.Practice;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;
public class Autocomplete {

	private static class Node {
		char c;
		HashMap<Character, Node> hm;
		public Node(char c) {
			this.c = c;
			hm = new HashMap<Character, Autocomplete.Node>();
		}
	}
	
	private static int update (HashMap<Character, Node> h, String st) {
		HashMap<Character, Node> temp = h;
		int count = 1;
		Node tm;
		for (int i = 0; i < st.length(); i++) {
			char c = st.charAt(i);
			if (temp.containsKey(c)) {
				tm = temp.get(c);
				temp = tm.hm;
				if (i != st.length() - 1)
					count++;
			} 
			else {
				tm = new Node(c);
				temp.put(c, tm);
				temp = tm.hm;
			}
		}
		return count;
	}
	
	public static int getMinNumber(String[] ar) {
		HashMap<Character, Node> h = new HashMap<Character, Autocomplete.Node>();
		int count = 0;
		for (int i = 0; i < ar.length; i++) {
			count += update(h, ar[i]);
		}
		return count;
	}
	
	public static void main(String[] args) {
		File fl = new File("/home/inspire/Downloads/autocomplete.txt");
		Scanner sc = new Scanner(System.in);
		try {
			sc = new Scanner(fl);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int T = sc.nextInt();
		int arNum[] = new int[T];
		int i = 0;
		while (i < T) {
			int n = sc.nextInt();
			String[] ar = new String[n];
			for (int j = 0; j < n; j++) {
				ar[j] = sc.next();
			}
			arNum[i++] = getMinNumber(ar);
		}
		for (i = 0; i < T; i++) {
			System.out.println("Case #" + (i + 1) + ": " + arNum[i]);
		}
	}
	
}

#include<bits/stdc++.h> //srand(time(NULL))

using namespace std;

#define REP(i,n)     for(i=0;i<(n);i++)
#define REPI(x,a,b)  for(x=(a);x<=(b);x++)

#define FORE(i,a)   for(typeof((a).begin())i=(a).begin();i!=(a).end();i++)//reverse_iterator
#define mem(a,b)    memset(a,b,sizeof(a))
#define pii         pair < int , int >
#define BE(a)       a.begin(),a.end()
#define EQ(a,b)     (fabs(a-b)<ERR)
#define SZ(a)       (int)a.size()
#define vi          vector<int>
#define ll          long long
#define mp          make_pair
#define pb          push_back
#define sc          second
#define fs          first

#define deb(a...)          {cerr<<"#"<<__LINE__<<" -> ";dbg,a; cerr<<endl;}
struct debugger { template<typename T> debugger& operator , (const T v) { cerr<<v<<" "; return *this; } } dbg;

//bool operator()(const int &p,const int &q){return p<q;}//for map,set sort declare it in a struct
//bool operator<(const data &p)const{return p.w<w;}

#define oo          (1<<30)
#define MAX         100009 // (int)1e5 + 9
//loop | binary search | priority queue | backtracking map<int , bool> | disjoin set |

struct data{
    int cnt;
    int go[200];
    data(){cnt=0;mem(go,-1);}
};

vector<data>Trie;
string str;

void insert(int node,int &flag)
{
    for(int ind=0;ind<SZ(str);ind++)
    {
        int next = Trie[node].go[str[ind]];
        if(next==-1)
        {
            if(flag==0) flag = ind+1;

            data nw;
            next = SZ(Trie);

            Trie[node].go[str[ind]] = next;
            Trie.pb(nw);

            node = next;
        }
        else
        {
            node = next;
        }
    }
    if(flag==0) flag = SZ(str);
}


int main()
{
    freopen("input_b.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int i,j,k;
    int t; cin>>t;
    for(int cas=1;cas<=t;cas++)
    {
        Trie.clear(); data nw; Trie.pb( nw );
        int ans = 0;
        int n; cin>>n;
        for(int i=0;i<n;i++)
        {
            cin>>str;
            int flag = 0;
            insert(0,flag);
            ans+=flag;
        }
        printf("Case #%d: %d\n",cas,ans);
    }
}

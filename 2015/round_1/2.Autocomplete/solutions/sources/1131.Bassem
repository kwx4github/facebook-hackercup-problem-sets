
#include <stdlib.h>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include <iostream> 

using namespace std;
class Node {
    public: Node() {
    mContent = ' '; mMarker = false;
    }
    ~Node() {}
    char content() { return mContent; }
    void setContent(char c) { mContent = c; }
    bool wordMarker() { return mMarker; }
    void setWordMarker() { mMarker = true; }
    Node* findChild(char c);
    void appendChild(Node* child) { mChildren.push_back(child); }
    vector<Node*> children() { return mChildren; }
    private:
    char mContent;
    bool mMarker;
    vector<Node*> mChildren;
};

class Trie {
    public: Trie(); ~Trie();
    int addWord(string s);
    bool searchWord(string s);
    void deleteWord(string s);
    private: Node* root;
};
    Node* Node::findChild(char c) {
        for (int i = 0; i < mChildren.size(); i++) {
            Node* tmp = mChildren.at(i);
            if ( tmp->content() == c ) {
                return tmp;
            }
        }
        return NULL;
    }
    Trie::Trie() { root = new Node(); }
    Trie::~Trie() {
        // Free memory
    }
    int Trie::addWord(string s) {
        Node* current = root;
        int cost = 0;
        bool addedAll = true;
        if ( s.length() == 0 ) {
            current->setWordMarker();
            // an empty word return;
        }
        for ( int i = 0; i < s.length(); i++ ) {
            Node* child = current->findChild(s[i]);
            if ( child != NULL ) {
                cost++;
                current = child;
            }
            else {
                addedAll = false;
                Node* tmp = new Node();
                tmp->setContent(s[i]);
                current->appendChild(tmp);
                current = tmp;
            }
            if ( i == s.length() - 1 )
                current->setWordMarker();
        }
        return cost + 1 - addedAll;
    }

    bool Trie::searchWord(string s) {
        Node* current = root;
        while ( current != NULL ) {
            for ( int i = 0; i < s.length(); i++ ) {
                Node* tmp = current->findChild(s[i]);
                if ( tmp == NULL )
                    return false;
                current = tmp;
            }
            if ( current->wordMarker() )
                return true;
            else
                return false;
        }
        return false;
    }
        // Test program



int main()
{
    FILE *fIn = fopen("in.txt", "r");
    FILE *fOut = fopen("out.txt", "w");
    int T;
    int caseCounter = 0;
    fscanf(fIn, "%d", &T);
    using namespace std;

    while (T--) {
        caseCounter++;
        int n, ans = 0;//, ans2 = 0;
        string s;
        fscanf(fIn, "%d",&n);
        Trie* trie = new Trie();
        
        
        
        char scanner[1000001];
        for(int i = 0; i < n; i++){
            fscanf(fIn, "%s", scanner);
            //ans2 += insert(&trie2, scanner);
            ans += trie->addWord(string(scanner));
        }
        delete trie;
        fprintf(fOut, "Case #%d: %d\n",caseCounter,ans);
//        printf("Case #%d: %d\n",caseCounter,ans);
    }
    return 0;
}

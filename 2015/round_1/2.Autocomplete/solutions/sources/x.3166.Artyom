#if 1
#include <iostream>
#include <vector>
#include <string>
#include <deque>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <locale>

using namespace std;

#define PROBLEM "problem"
typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> pii;
#define X first 
#define Y second 

const int INF = 1000 * 1000 * 1000;
const LL INF64 = 1LL * INF * INF;
const LL mod = INF + 7;

const int max_nodes = 1000*1000+20;


struct ndd {
	vector<int> next;
};

vector <ndd> BOR;
ndd obr;
string ss;

int put (int z, int a) {
	if (ss.length() == z) {
		return 0;
	}

	if (BOR[a].next[ss[z] - 'a'] != -1) {
		return put (z+1, BOR[a].next[ss[z] - 'a']) + 1;
	} else {
		BOR[a].next[ss[z] - 'a'] = BOR.size();
		BOR.push_back(obr);
		put (z+1, BOR.size()-1);
		return 1;
	}
}

void solve()
{
	int T;
	cin >> T;

	for (char ch = 'a'; ch <= 'z'; ++ch) {
		obr.next.push_back(-1);
	}

	for (int i = 0; i < T; ++i) {
		int ans = 0;

		///////////////////////////////
		BOR.clear();
		BOR.push_back(obr);

		///////////////////////////////
		int n;
		cin >> n;

		for (int j = 0; j < n; ++j) {
			getline(cin, ss);
			//scanf("%s", ss);
			//cout << ss << endl;
			int aa = put(0, 0);
			//cout << aa << endl;
			ans += aa;
		}
		///////////////////////////////

		cout << "Case #" << i+1 << ": " << ans << endl;
	}
}

int main()
{
	//(PROBLEM".in", "r", stdin); freopen(PROBLEM".out", "w", stdout);
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

	// cout.sync_with_stdio(false);
	//cout.precision(10);
	//cout.setf(ios::fixed);
	solve();

	return 0;
}
#endif
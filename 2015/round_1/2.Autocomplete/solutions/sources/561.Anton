import java.io.*;
import java.util.*;

public class B {

	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	int nextInt() throws Exception {
		return Integer.parseInt(next());
	}

	long nextLong() throws Exception {
		return Long.parseLong(next());
	}

	double nextDouble() throws Exception {
		return Double.parseDouble(next());
	}

	static class TrieNode {
		TrieNode[] children = new TrieNode[128];
		boolean leaf;
	}

	public static void insertString(TrieNode root, String s) {
		TrieNode v = root;
		for (char ch : s.toCharArray()) {
			TrieNode next = v.children[ch];
			if (next == null)
				v.children[ch] = next = new TrieNode();
			v = next;
		}
		v.leaf = true;
	}

	public static int find(TrieNode node, String s) {
		for (int i = 0; i < s.length(); i++) {
			char ch = s.charAt(i);
			TrieNode child = node.children[ch];
			node = child;
			if (child == null)
				return i + 1;
		}
		return s.length();
	}

	void solve() throws Exception {
		int wc = nextInt();
		TrieNode rt = new TrieNode();
		long ans = 0;
		for (int i = 0; i < wc; i++) {
			String s = next();
			int cv = find(rt, s);
			// System.err.println(s + " " + cv);
			ans += cv;
			insertString(rt, s);
		}
		out.print(ans);

	}

	void run() {
		try {
			Locale.setDefault(Locale.US);
			in = new BufferedReader(new FileReader("src/B.in"));
			out = new PrintWriter(new FileWriter("src/B.out"));
			int tc = nextInt();
			for (int t = 0; t < tc; t++) {
				out.print("Case #" + (t + 1) + ": ");
				solve();
				out.println();
			}
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public static void main(String[] args) {
		new B().run();

	}

}

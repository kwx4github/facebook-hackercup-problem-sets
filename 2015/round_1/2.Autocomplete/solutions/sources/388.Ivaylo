#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <deque>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <bitset>
#include <functional>
#define all(x) x.begin(),x.end()
#define mpair make_pair
using namespace std;
typedef long long ll;
typedef long double ld;
const ld epsylon = 1e-9;

struct TrieNode {
  vector<pair<char, TrieNode*> > next;
//  ~TrieNode() {
//    for (int i = 0; i < (int)next.size(); ++i) {
//      delete next[i].second;
//    }
//  }
};

struct Trie {
  TrieNode root;
  int add(const std::string& s) {
    TrieNode* c = &root;
    int i;
    for (i = 0; i < (int)s.size(); ++i) {
      if (s[i] < 'a' || s[i] > 'z') {
        cerr << "o - o" << endl;
      }
      bool met = false;
      for (int j = 0; j < (int)c->next.size(); ++j) {
        if (c->next[j].first == s[i]) {
          c = c->next[j].second;
          met = true;
          break;
        }
      }
      if (!met) {
        break;
      }
    }
    if (i == (int)s.size()) {
      return i;
    }
    for (int j = i; j < (int)s.size(); ++j) {
      if (s[j] < 'a' || s[j] > 'z') {
        cerr << "o - o" << endl;
      }
      TrieNode* temp = new TrieNode();
      c->next.push_back(make_pair(s[j], temp));
      c = temp;
    }
    return i + 1;
  }
};

int main() {
  freopen("facebook.in", "r", stdin);
  freopen("facebook.out", "w", stdout);
  int nt;
  cin >> nt;
  for (int it = 1; it <= nt; it++) {
    Trie t;
    int n;
    scanf("%d", &n);
    string s;
    getline(cin, s);
    int ans = 0;
    for (int i = 0; i < n; ++i) {
      getline(cin, s);
      ans += t.add(s);
    }
    cout << "Case #" << it << ": " << ans << endl;
  }
  return 0;
}

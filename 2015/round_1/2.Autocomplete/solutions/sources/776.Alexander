import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author AlexFetisov
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("autocomplete.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        root = new Node();
        int n = in.nextInt();
        long res = 0;
        for (int i = 0; i < n; ++i) {
            char[] c = in.nextString().toCharArray();
            len = -1;
            addToTrie(root, c, 0);
            res += len;
        }
        out.println("Case #" + testNumber + ": " + res);
    }

    int len;

    class Node {
        Node[] next;
        int numberOfWordsEnds;

        public Node() {
            next = new Node[26];
            numberOfWordsEnds = 1;
        }
    }

    Node root;

    void addToTrie(Node t, char[] word, int ptr) {
        if (ptr >= word.length) {
            if (len == -1) {
                len = word.length;
            }
            return;
        }
        int x = word[ptr] - 'a';
        if (t.next[x] == null) {
            t.next[x] = new Node();
            if (len == -1) {
                len = ptr + 1;
            }
        } else {
            ++t.next[x].numberOfWordsEnds;
        }
        addToTrie(t.next[x], word, ptr + 1);
    }
}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer stt;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    public String nextString() {
        while (stt == null || !stt.hasMoreTokens()) {
            stt = new StringTokenizer(nextLine());
        }
        return stt.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextString());
    }

    public String next() {
        return nextString();
    }
}


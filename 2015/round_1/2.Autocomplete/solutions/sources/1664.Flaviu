#include <fstream>
#include <vector>
#include <cstring>
#include <string>

using namespace std;

ifstream fin("input.txt");
ofstream fout("output.txt");

char value[1000005];
int nodeIndex;
vector<int> V[1000005];
int d[1000005];
int sol;

void query(string s)
{
    int i = 0;
    int node = 0;
    // f out<<s.length()<<' '<<s<<' ';
    bool ok = true;
    while(i < s.length())
    {
        bool ok = false;
        char currentChar = s[i];
        ++i;
        for(vector<int>::iterator it = V[node].begin(); !ok && it != V[node].end(); it++)
            if(currentChar == value[*it])
            {
                if(d[*it] == 1)
                {
                    sol += i;
                    //fout<<i<< ' ';
                    return;
                }
                node = *it;
                ok = true;
            }
    }
    //fout<<s.length()<<' ';
    sol += s.length();

}

void update()
{
    string s;
    fin>>s;
    int i = 0;
    bool ok = true;
    int node = 0;
    while( i < s.length() && ok)
    {
        char currentChar = s[i];
        ok = false;
        for(vector<int>::iterator it = V[node].begin();!ok && it != V[node].end() ; it ++)
            if(currentChar == value[*it])
            {
                ok = true;
                node = *it;
                d[*it]++;
            }
        ++i;
    }
    --i;
    for(i ; i < s.length(); i++)
    {
        ++nodeIndex;
        V[node].push_back(nodeIndex);
        value[nodeIndex] = s[i];
        d[nodeIndex] = 1;
        node = nodeIndex;
    }
    query(s);
}

void clearData()
{
    for(int i = 0; i <= nodeIndex; i++)
    {
        V[i].clear();
        d[i] = 0;
    }
    nodeIndex = 0;
    sol = 0;
}

void solve()
{
    int n;
    fin>>n;
    for(int i = 1; i <= n; i++)
        update();
    fout<<sol<<'\n';
    clearData();
}




int main()
{
    int T;
    fin>>T;
    for(int i = 1; i <= T; i ++)
    {
        fout<<"Case #"<<i<<": ";
        solve();
    }
    fin.close();
    fout.close();
    return 0;
}

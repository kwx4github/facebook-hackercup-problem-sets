#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

const int maxn = (int)2e6 + 1;
char s[maxn];

struct Node {
  const static int maxc = 26;
  Node* go[maxc];

  Node() {
    for (int i = 0; i < maxc; ++i)
      go[i] = 0;
  }
};

Node _nodes[maxn];
int cnt;

Node* newNode() {
  assert(cnt < maxn);
  _nodes[cnt++] = Node();
  return _nodes + cnt - 1;
}

bool solve() {
  int n;
  if (scanf("%d", &n) < 1)
    return 0;
  cnt = 0;
  Node* root = newNode();

  int res = 0;
  for (int i = 0; i < n; ++i) {
    scanf("%s", s);
    int len = (int)strlen(s);
    Node *v = root;
    int toadd = len;
    for (int j = 0; j < len; ++j) {
      if (!v->go[s[j] - 'a']) {
        if (toadd == len)
          toadd = j + 1;
        v->go[s[j] - 'a'] = newNode();
      }
      v = v->go[s[j] - 'a'];
    }
    res += toadd;
  }
  printf("%d\n", res);
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif

  int t;
  while (scanf("%d", &t) == 1) {
    for (int i = 0; i < t; ++i) {
      printf("Case #%d: ", i + 1);
      assert(solve());
    }
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}

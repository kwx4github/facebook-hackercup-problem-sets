// BEGIN CUT HERE
// PROBLEM STATEMENT
// John is standing at the origin of an infinite two-dimensional grid.
// He is going to move along this grid.
// During each second he can either stay where he is or he can move by one unit 
// in one of the four cardinal directions (north, south, east, or west).
// Some of the grid points are blocked.
// John is not allowed to move to a blocked grid point.
// 
// 
// You are given the coordinates of the blocked grid points as vector <int>s x 
// and y.
// For each valid i, the grid point that is x[i] units east and y[i] units north 
// of the origin is blocked.
// You are also given an int k.
// Compute and return the maximal possible x-coordinate of a point John can reach 
// in k seconds.
// 
// 
// DEFINITION
// Class:TheGridDivOne
// Method:find
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int find(vector <int> x, vector <int> y, int k)
// 
// 
// CONSTRAINTS
// -x will contain between 0 and 47 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element of x will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -Each element of y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -All pairs (x[i], y[i]) will be distinct.
// -Each pair (x[i], y[i]) will be different from (0, 0).
// -k will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,1,1}
// {-2,-1,0,1}
// 4
// 
// Returns: 2
// 
// The optimal strategy is to move two times north to (0, 2) and then two times 
// east to (2,2).
// 
// 1)
// {-1, 0, 0, 1}
// {0, -1, 1, 0}
// 9
// 
// Returns: 0
// 
// John can not make any moves.
// 
// 2)
// {}
// {}
// 1000
// 
// Returns: 1000
// 
// 
// 
// 3)
// {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4}
// {0,-1,1,-2,2,-3,3,-4,4,-5,5}
// 47
// 
// Returns: 31
// 
// 
// 
// END CUT HERE
#include <algorithm>
#include <functional>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define VT vector
typedef VT<int> VI;
typedef VT<VI> VVI;
typedef VT<string> VS;
typedef VT<double> VD;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define ALL(c) c.begin(),c.end()
#define PB push_back
#define MP make_pair
#define FS first
#define SC second
#define SZ size() 


int main(int argc, char* argv[])
{
	freopen("autocomplete.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	//for(int i = 0; i < 1000; ++i)
	//{
	//	string word(1000, 'a');
	//	for(int j=0;j<word.size();++j)
	//	{
	//		word[j] = 'a' + rand()%26;
	//	}

	//	cout << word << endl;
	//}

	//return 0;


	//	set<string> words;
	//	for(int i = 0; i < 1000; ++i)
	//	{
	//		string word;
	//		getline(cin, word);

	//		set<string>::iterator it = words.insert(word).first;

	//		int max_prefix = 0;

	//		if (it != words.begin())
	//		{
	//			set<string>::iterator it_prev = it--;

	//			string& prev = *it_prev;
	//			int prefix = 0;

	//			for(int j = 0; j < min(word.size(), prev.size()); ++j)
	//			{
	//				if (word[j] == prev[j])
	//				{
	//					prefix = j;
	//				}
	//				else
	//					break;
	//			}

	//			max_prefix = prefix;
	//		}

	//		set<string>::iterator it_ = it;
	//		it_++;
	//		if (it_ != words.end())
	//		{
	//			set<string>::iterator it_next = it++;

	//			string& next = *it_next;
	//			int prefix = 0;

	//			for(int j = 0; j < min(word.size(), next.size()); ++j)
	//			{
	//				if (word[j] == next[j])
	//				{
	//					prefix = j;
	//				}
	//				else
	//					break;
	//			}

	//			max_prefix = max(max_prefix, prefix);
	//		}

	//	}







	/////////



	int T;
	string line;
	getline(cin, line);
	sscanf(line.c_str(), "%d", &T);


	REP(t, T)
	{
		int N;
		getline(cin, line);
		sscanf(line.c_str(), "%d", &N);

		int result = 0;

		set<string> words;
		for(int i = 0; i < N; ++i)
		{
			string word;
			getline(cin, word);

			set<string>::iterator it = words.insert(word).first;

			int max_prefix = 0;

			if (it != words.begin())
			{
				set<string>::iterator it_prev = it;
				it_prev--;

				string& prev = *it_prev;
				int prefix = 0;

				for(int j = 0; j < min(word.size(), prev.size()); ++j)
				{
					if (word[j] == prev[j])
					{
						prefix = j+1;
					}
					else
						break;
				}

				max_prefix = prefix;
			}

			set<string>::iterator it_ = it;
			it_++;
			if (it_ != words.end())
			{
				set<string>::iterator it_next = it_;

				string& next = *it_next;
				int prefix = 0;

				for(int j = 0; j < min(word.size(), next.size()); ++j)
				{
					if (word[j] == next[j])
					{
						prefix = j+1;
					}
					else
						break;
				}

				max_prefix = max(max_prefix, prefix);
			}

			if (max_prefix == word.size())
				result += max_prefix;
			else
				result += max_prefix + 1;
		}

		cout << "Case #" << (t+1) << ": " << result << endl;
	}
}

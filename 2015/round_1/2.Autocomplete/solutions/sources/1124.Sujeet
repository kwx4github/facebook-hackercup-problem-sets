#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <utility>
#include <iomanip>
using namespace std;
                          // int =       2,147,483,647 -> 10^9
typedef long long LL;     // 9,223,372,036,854,775,807 -> 10^21
typedef long double LD;   // 1.18973 x 10^4932
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int,int> pint;

// -------------------

class Node {
public:
  Node() { mContent = ' '; mMarker = false; }
  ~Node() {}
  char content() { return mContent; }
  void setContent(char c) { mContent = c; }
  bool wordMarker() { return mMarker; }
  void setWordMarker() { mMarker = true; }
  Node* findChild(char c);
  void appendChild(Node* child) { mChildren.push_back(child); }
  vector<Node*> children() { return mChildren; }

private:
  char mContent;
  bool mMarker;
  vector<Node*> mChildren;
};

class Trie {
public:
  Trie();
  ~Trie();
  int addWord(string s);
private:
    Node* root;
};

Node* Node::findChild(char c) {
  for ( int i = 0; i < mChildren.size(); i++ ) {
    Node* tmp = mChildren.at(i);
    if ( tmp->content() == c ) {
      return tmp;
    }
  }

  return NULL;
}

Trie::Trie() {
  root = new Node();
}

Trie::~Trie() {
  // Free memory
}

int Trie::addWord(string s) {
  Node* current = root;

  if ( s.length() == 0 ) {
    current->setWordMarker(); // s == ""; the empty string
    return 0;
  }

  int toReturn = 0;
  int newPrefix = false;

  for ( int i = 0; i < s.length(); i++ ) {
    Node* child = current->findChild(s[i]);
    if ( child != NULL ) {
        current = child;
    } else {
      // New Prefix
      Node* tmp = new Node();
      tmp->setContent(s[i]);
      current->appendChild(tmp);
      current = tmp;

      if (!newPrefix) {
        toReturn = i+1; // Len of prefix
        newPrefix = true;
      }
    }
    if ( i == s.length() - 1 ) {
      current->setWordMarker();
      if (!newPrefix)
        toReturn = s.length();
    }
  }
  return toReturn;
}

int main() {
  int T, num;
  string line;

  cin >> T;

  for (int val = 1; val <= T; val++) {
    Trie* trie = new Trie();
    int total = 0;
    cin >> num;
    for (int i = 0; i < num; i++) {
      cin >> line;
      total += trie->addWord(line);
    }
    delete trie;
    cout << "Case #" << val << ": " << total << endl;
  }

  return 0;
}




























































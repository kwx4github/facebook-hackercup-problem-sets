package zhang.kevin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

import com.google.common.base.Charsets;
import com.google.common.base.Throwables;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.io.Files;

public class A {
	
	public static void main(String[] args) {
		ArrayList<String> readLines = readLines("A.in");
		ArrayList<String> answers = Lists.newArrayList();
		int caseNumber = 1;
		for (int i = 1; i < readLines.size(); ) {
			System.out.println("Case: " + caseNumber);
			int n = Integer.parseInt(readLines.get(i));
			List<String> words = Lists.newArrayList();
			for (int j = 0; j < n; j ++) {
				words.add(readLines.get(i + j + 1));
			}
			answers.add(createCase(caseNumber++, solve(words) + ""));
			i += n + 1;
		}
		writeLines(answers, "A.out");
	}
	
	private static int solve(List<String> words) {
		Trie trie = new Trie();
		int count = 0;
		for (String word : words) {
			trie.addWord(word);
			count += trie.numCharactersToIdentify(word);
		}
		return count;
	}
	
	private static class Trie {
		private Node[] tops = initNodes();
		private static Node[] initNodes() {
			Node[] nodes = new Node[26];
			for (int i = 0; i < nodes.length; i++) {
				nodes[i] = new Node(0, false);
			}
			return nodes;
		}
		
		public void addWord(String word) {
			int currentIdx = getIdx(word.charAt(0));
			Node currentNode = tops[currentIdx];
			for (int i = 1; i < word.length(); i++) {
				currentNode.weight++;
				currentIdx = getIdx(word.charAt(i));
				if (currentNode.nodes[currentIdx] == null) {
					currentNode.nodes[currentIdx] = new Node(0, false);
				}
				currentNode = currentNode.nodes[currentIdx];
			}
			currentNode.weight++;
			currentNode.isWord = true;
		}
		
		private int getIdx(char c) {
			return c - 'a';
		}
		
		public int numCharactersToIdentify(String existingWord) {
			Node currentNode = tops[getIdx(existingWord.charAt(0))];
			int count = 1;
			for (; count < existingWord.length(); ) {
				if (currentNode.weight == 1) {
					break;
				}
				currentNode = currentNode.nodes[getIdx(existingWord.charAt(count))];
				count++;
			}
			return count;
		}
	}
	
	private static class Node {
		public int weight;
		public boolean isWord;
		public Node[] nodes;
		public Node(int weight, boolean isWord) {
			this.weight = weight;
			this.isWord = isWord;
			nodes = new Node[26];
		}
	}
	
    private static String createCase(int caseNum, String content) {
        return "Case #" + caseNum + ": " + content;
    }

    private static ArrayList<String> readLines(String path) {
        try {
            return Lists.newArrayList(Files.readLines(new File(path), Charsets.UTF_8));
        } catch (IOException e) {
            throw Throwables.propagate(e);
        }
    }

    private static void writeLines(List<String> lines, String path) {
        try {
            StringBuilder fileContents = new StringBuilder();
            for (String line : lines) {
                fileContents.append(line + "\n");
            }
            Files.write(fileContents.toString(), new File(path), Charsets.UTF_8);
        } catch (IOException e) {
            throw Throwables.propagate(e);
        }
    }
}

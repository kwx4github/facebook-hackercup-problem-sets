type Trie
    count::Int32
    children::Dict{Char, Trie}
    is_word::Bool

    function Trie()
        self = new()
        self.children = Dict{Char,Trie}()
	self.count = 0
        self.is_word = false
        self
    end

end


function add_word(trie::Trie, word::String)
    t = trie
    is_new = false
    for i = 1:length(word)
        if !haskey(t.children, word[i])
            t.children[word[i]] = Trie()
            is_new = true
        end
        t = t.children[word[i]]
    end
    is_new = is_new || !t.is_word
    t.is_word = true
    if is_new
        t = trie
        t.count += 1
        for i = 1:length(word)
            t = t.children[word[i]]
            t.count += 1
        end
    end
    trie
end


function min_unique_prefix_length(trie::Trie, word::String)
    t = trie
    for i = 1:length(word)
        if !haskey(t.children, word[i]) 
            return i
        end
        t = t.children[word[i]]
        if t.count < 2
            return i
        end
    end
    length(word)
end


function count_keys(words)
    trie = Trie()
    keypress = 0
    for w in words
        add_word(trie, w)
        keypress += min_unique_prefix_length(trie, w)
    end
    keypress
end


function main()
    T = int(readline())
    for i = 1:T
        N = int(readline())
        words = ASCIIString[]
        for j = 1:N
            push!(words, strip(readline()))
        end
        keypress = count_keys(words)
        println("Case #", i, ": ", keypress)
    end
end


main()
            

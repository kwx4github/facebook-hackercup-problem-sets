#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 1000 * 1000 + 3;

int n;

inline bool read()
{
	return cin >> n;
}

int sz;
char s[N];
int next[N][26];

inline void solve()
{
	memset(next[0], -1, sizeof(next[0]));
	sz = 1;

	gets(s);
	li res = 0;
	forn(i, n)
	{
		gets(s);
		int len = int(strlen(s));

		int v = 0;

		int ans = 0;
		forn(j, len)
		{
			ans++;
			int c = int(s[j] - 'a');
			if (next[v][c] == -1)
			{
				memset(next[sz], -1, sizeof(next[sz]));
				next[v][c] = sz++;
				ans--;
			}
			v = next[v][c];
		}
		ans = min(len, ans + 1);
		//cerr << i << ' ' << ans << endl;
		res += ans;
	}

	printf(" %I64d\n", res);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;

	int tc;
	cin >> tc;
	forn(t, tc)
	{
		assert(read());
		printf("Case #%d:", t + 1);
		solve();
	}

    return 0;
}

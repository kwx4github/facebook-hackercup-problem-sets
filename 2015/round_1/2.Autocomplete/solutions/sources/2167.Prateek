#include <bits/stdc++.h>
using namespace std;
const int N = 1234567;
struct trie
{
	char data;
	struct trie *child[26];
	trie(){
		for(int i = 0; i<26; i++) child[i] = NULL;
		data = ' ';
	}
};
trie *T, *head;
int res = 0;
trie *newNode(char s){
	trie *nn = (trie *)malloc(sizeof(trie));
	nn->data = s;
	return nn;
}
void insert(char *s)
{
	int len = strlen(s);
	int ptr = 0, pref_cnt = 0;;
	head = T;
	bool ok = false;
	while (ptr < len){
		if (head->child[s[ptr]-'a'] != NULL){
			head = head->child[s[ptr]-'a'];
			ptr++;
		}
		else{
			if (!ok){
				res += ptr+1;
				ok = true;
			}
			head->child[s[ptr]-'a'] = newNode(s[ptr]);
		}
	}
	if (!ok) res+=len;
}
void dfs(trie *t)
{
	if (t == NULL) return ;
	cout << t->data <<" ";
	for(int i = 0; i<26; i++)
		dfs(t->child[i]);
}
void solve(int test)
{
	int n;res = 0;
	T = newNode('$');
	scanf("%d", &n);
	char s[N];
	for(int i = 0; i<n; i++){
		scanf("%s", s);
		insert(s);
	}
	//dfs(T);
	printf("Case #%d: %d\n", test, res);
}

int main()
{
	int t;
	scanf("%d", &t);
	for(int i = 1; i<=t; i++)
		solve(i);
	return 0;
}
			

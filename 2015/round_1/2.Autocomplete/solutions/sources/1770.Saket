
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <string>
#include <cassert>

#include <vector>
#include <list>
#include <map>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

typedef long long LL; //NOTES:int64

#define S(x)            scanf("%d",&x);

string str;
vector < string > v;
struct st {
	string str;
	int pos;
} struc[100010];

bool compare(const struct st &l, const struct st &r) {
	int rs = (r.str).size();
    int ls = (l.str).size();
	int i = 0;
    int min_ls_rs = min(ls,rs);
	for(i=0; i <= min_ls_rs - 1; i++) {
		if (l.str[i]!=r.str[i]) break;
	}
    if (ls != i && rs != i) {
        return (r.str[i]>l.str[i]);
    } else {
        if (r.pos>l.pos) return true;
        else return false;
    }
	return false;

}
int main()
{
    int i,j,n,sz2,sz1,t,l=0;
    LL s=0;
    S(t);
    for (int it =0; it<t; it++) {
    	S(n);
    	l=0;s=0;
     for (i=0;i<n;i++) {
    	cin>>struc[i].str;
    	struc[i].pos =0;
     }
     sort(struc, struc+n, compare);
     l=1;
     s=1;
     for (i=1;n > i; i++) {
        sz1 = (struc[i].str).size();
     	sz2 = (struc[i-1].str).size();
     	
        bool flag = true;
        int min_sz = min(sz2,sz1);
     	for(j=0;j <= min_sz - 1;j++) {
     		if (struc[i].str[j]!=struc[i-1].str[j]) break;
     	}
     	if(j==sz1) {
     		s+=(j);
     	}
     	else if (j==sz2){
     	 s+=(j+1);
     	}
     	else {
     		s+=j+1;
     	}
     }
     cout<<"Case #"<<it+1<<": "<<s<<endl;
 }

return (0);
}
#include <bits/stdc++.h>

using namespace std;

// TEMPLATE {{{
#ifndef LOCAL
#define OJ 1
#else
#define OJ 0
#endif

#define endl '\n'
#define TIMESTAMP merr << "Execution time: " << (double)clock()/CLOCKS_PER_SEC << " s.\n"
class C_ {}; template <typename T> C_& operator <<(C_& __m, const T& __s) { if (!OJ) cerr << "\E[91m" << __s << "\E[0m"; return __m; }
C_ merr;

struct __s { __s() { if (OJ) { ios_base::Init i; cin.sync_with_stdio(0); cin.tie(0); } } ~__s(){ TIMESTAMP; } } __S;
/// END OF TEMPLATE }}}

/*
 * segfault at 30 ip 00007ff0b3878956 sp 00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+
 *                                       00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+435000]
 */

int main() {
  int T;
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  cin >> T;
  for (int tt = 0; tt < T; tt++) {
    merr << tt << '\n';
    int n;
    vector<string> V;
    set<string> S;
    int ans = 0;
    cin >> n;
    V.resize(n);
    for (int i = 0; i < n; i++) {
      cin >> V[i];
    }
    for (int i = 0; i < n; i++) {
      const string & s = V[i];
      int ll = 1, rr = (int)s.size();
      S.insert(s);
      while (ll < rr) {
        int mm = (ll + rr) / 2;
        string ss = s.substr(0,mm);
        set<string>::iterator it = S.lower_bound(ss);
        it++;
        if (it == S.end() || it->substr(0,mm) != ss) {
          rr = mm;
        } else {
          ll = mm+1;
        }
      }
      ans += ll;
    }
    cout << "Case #" << tt+1 << ": " << ans << endl;
  }
  return 0;
}

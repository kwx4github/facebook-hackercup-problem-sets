#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max();
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

struct Trie
{
	map <char, Trie*> to;

	li Add (string &s, li i)
	{
		if (i == s.length()) return 0;

		bool ok;
		if (ok = !to.count(s[i]))
			to[s[i]] = new Trie();
		li res = to[s[i]]->Add(s, i + 1);

		return ok ? 1 : res + 1;
	}
};

void solve ()
{
	ios::sync_with_stdio(0);

    li tests;
    cin >> tests;

    for (li test = 1; test <= tests; ++ test)
    {
    	Trie *t = new Trie();
    	li n;
        cin >> n;
        li res = 0;
        while (n--)
		{
			string s;
			cin >> s;
			res += t->Add(s, 0);
		}
        cout << "Case #" << test << ": " << res << "\n";
        delete t;
    }
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

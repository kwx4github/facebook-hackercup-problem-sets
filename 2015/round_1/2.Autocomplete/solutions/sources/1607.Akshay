#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N = 1e6 + 1;

char s[1000005];

struct trie{
	ll prefixes;
	int edges[26];
	trie(){
		prefixes = 0;
		memset(edges, 0, sizeof(edges));
	}
};
vector<trie> tries;
inline int getEdge(int root, char c){

	if (tries[root].edges[c - 'a'] == 0)
	{
		tries[root].edges[c - 'a'] = (int)tries.size();
		tries.push_back(trie());
	}
	return tries[root].edges[c - 'a'];
}
ll solve(char *s){
	int r = 0, i;
	int ti = 0;
	int n = strlen(s);

	for (i = 0; i < n; i++){
		ti = getEdge(ti, s[i]);
		if (r == 0 && tries[ti].prefixes == 0)
			r = i+1;
		tries[ti].prefixes++;

	}
	if (r == 0) r = n;
	return r;
}

int main()
{
	int t, n;
	cin >> t;
	for (int cs = 1; cs <= t; cs++){
		tries.clear();
		tries.push_back(trie());
		ll ans = 0;
		cin >> n;
		n = n;
		while (n--){
			scanf("%s", s);
			ll j = solve(s);
			ans += j;

		}
		printf("Case #%d: %lld\n", cs, ans);
	}
	return 0;
}
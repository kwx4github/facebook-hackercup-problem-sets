#include <bits/stdc++.h>

using namespace std;

struct Node {
  int adj[26], qnt;
  int& operator [] (int i) { return adj[i]; }
} trie[1000005];

int no_cnt;

int novo_no() {
  trie[no_cnt].qnt = 0;
  memset(trie[no_cnt].adj, -1, sizeof trie[no_cnt].adj);
  return no_cnt++;
}

void add_word(char* word) {
  int at = 0;
  for (int i = 0; word[i]; ++i) {
    char c = word[i];
    int& to = trie[at][c-'a'];
    if (to == -1) to = novo_no();
    trie[to].qnt++;
    at = to;
  }
}

int search(char* word) {
  int at = 0, i;
  for (i = 0; word[i]; ++i) {
    char c = word[i];
    int to = trie[at][c-'a'];
    assert(to != -1);
    if (trie[to].qnt == 1) {
      return i+1;
    }
    at = to;
  }
  return i;
}

char word[1000005];

int main() {
  int nt; scanf("%d", &nt);
  for (int _ = 1; _ <= nt; ++_) {
    int n; scanf("%d", &n);
    no_cnt = 0;
    int root = novo_no();
    int ans = 0;
    for (int i = 0; i < n; ++i) {
      scanf("%s", word);
      add_word(word);
      ans += search(word);
    }
    printf("Case #%d: %d\n", _, ans);
  }
  return 0;
}
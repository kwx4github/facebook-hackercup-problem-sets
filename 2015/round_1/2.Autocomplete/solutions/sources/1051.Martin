import static java.lang.Integer.parseInt;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.StringTokenizer;


public class Autocomplete {

	static int MB = 1 << 20;
	static BufferedReader br = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 20*MB);
	static StringTokenizer st;
	
	static void NL() throws Exception {
		st = new StringTokenizer(br.readLine());
	}
	
	static String NT() {
		return st.nextToken();
	}
	
	public static void main(String[] args) throws Exception {
		NL();
		int T = parseInt(NT());
		StringBuilder sb = new StringBuilder();
		for (int ii = 1; ii <= T; ii++) {
			NL();
			int N = parseInt(NT());
			String[] words = new String[N];
			for (int i = 0; i < N; i++) {
				NL();
				words[i] = NT();
			}
			sb.append(String.format("Case #%d: %d%n", ii, solve(N, words)));
		}
		System.out.print(sb);
	}

	private static int solve(int n, String[] words) {
		Node tree = new Node();
		int res = 0;
		for (String word : words) {
			Node subtree = tree;
			char[] ca = word.toCharArray();
			for (char c : ca) {
				++res;
				subtree = subtree.states[c - 'a'];
				if (subtree == null) {
					break;
				}
			}
			add(ca, tree);
		}
		return res;
	}

	private static void add(char[] ca, Node tree) {
		for (char c : ca) {
			if (tree.states[c - 'a'] == null) {
				Node node = new Node();
				tree.states[c - 'a'] = node;
				tree = node;
			} else {
				tree = tree.states[c - 'a'];
			}
		}
	}

	static class Node {
//		int cnt;
		Node[] states = new Node['z' - 'a' + 1];
	}

}

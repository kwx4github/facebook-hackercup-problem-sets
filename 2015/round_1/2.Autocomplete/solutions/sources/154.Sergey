package com.facebook.hackercup2015.round1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Autocomplete {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter writer = new PrintWriter(System.out);

    Autocomplete() throws IOException {
        reader = new BufferedReader(new FileReader("input.txt"));
        writer = new PrintWriter(new FileWriter("output.txt"));
    }

    StringTokenizer stringTokenizer;

    String next() throws IOException {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            stringTokenizer = new StringTokenizer(reader.readLine());
        }
        return stringTokenizer.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    void solve() throws IOException {
        int t = nextInt();
        for(int i = 1; i <= t; i++) {
            solve(i);
        }
        writer.close();
    }

    private void solve(int testNumber) throws IOException {
        writer.printf("Case #%d: ", testNumber);
        class Node {
            Node[] children = new Node[26];
            int pathCounter;

            Node getChild(char c) {
                int ci = c - 'a';
                if(children[ci] == null) {
                    children[ci] = new Node();
                }
                return children[ci];
            }
        }
        Node root = new Node();
        int n = nextInt();
        char[][] words = new char[n][];
        for(int i = 0; i < n; i++) {
            words[i] = next().toCharArray();
        }
        int answer = 0;
        for (char[] word : words) {
            Node node = root;
            for (char c : word) {
                node = node.getChild(c);
                node.pathCounter++;
            }
            int add = 0;
            node = root;
            for (char c : word) {
                add++;
                node = node.getChild(c);
                if(node.pathCounter == 1) {
                    break;
                }
            }
            answer += add;
        }
        writer.println(answer);
    }

    public static void main(String[] args) throws IOException {
        new Autocomplete().solve();
    }
}

#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <cfloat>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iostream>
#include <limits.h>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

#define rep(i,m) for(int i=0;i<(int)(m);++i)
#define sz(c) (int((c).size()))
#define fill(a,b) memset(a,b,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define mp make_pair

const int MAX_SZ = 1000005; // all prefix count
const int MAX_CH = 26; // a-z
int total_size = 1; // prefix id
int next_node[MAX_SZ][MAX_CH];
int n;

void solve(int cur_case) {
	total_size = 1;
	fill(next_node, 0);
	cin >> n;
	int ans = 0;
	for (int i = 0; i < n; ++i) {
		string str; cin >> str;
		int ptr = 0;
		bool f = 0;
		int len = str.length();
		for (int j = 0; j < len; ++j) {
			char ch = str[j] - 'a';
			if (next_node[ptr][ch] == 0) {
				next_node[ptr][ch] = total_size++;
				if (!f) {
					ans += j + 1;
					f = 1;
				}
			}
			ptr = next_node[ptr][ch];
		}
		if (!f) ans += len;
	}
	cout << "Case #" << cur_case << ": " << ans << endl;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false); cout.precision(10); cout << fixed;
	freopen("autocomplete.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	clock_t start_time = clock(), check_time;
	int total_cases; cin >> total_cases;
	for (int cur_case = 1; cur_case <= total_cases; ++cur_case) {
		solve(cur_case);
		check_time = clock(); cerr << "Case #" << cur_case << " elapsed time: " << check_time - start_time << "ms" << endl; start_time = clock();
	}
	return 0;
}

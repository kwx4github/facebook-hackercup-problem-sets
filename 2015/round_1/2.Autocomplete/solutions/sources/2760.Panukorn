#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;
class Node
{
public:
    Node()
    {
        mContent = ' ';
        mMarker = false;
    }
    ~Node() {}
    char content()
    {
        return mContent;
    }
    void setContent(char c)
    {
        mContent = c;
    }
    bool wordMarker()
    {
        return mMarker;
    }
    void setWordMarker()
    {
        mMarker = true;
    }
    Node* findChild(char c);
    void appendChild(Node* child)
    {
        mChildren.push_back(child);
    }
    vector<Node*> children()
    {
        return mChildren;
    }
private:
    char mContent;
    bool mMarker;
    vector<Node*> mChildren;
};
class Trie
{
public:
    Trie();
    ~Trie();
    int addWord(string s);
    bool searchWord(string s);
    void deleteWord(string s);
private:
    Node* root;
};
Node* Node::findChild(char c)
{
    for ( int i = 0; i < mChildren.size(); i++ )
    {
        Node* tmp = mChildren.at(i);
        if ( tmp->content() == c )
        {
            return tmp;
        }
    }
    return NULL;
}
Trie::Trie()
{
    root = new Node();
}
Trie::~Trie()
{

}
int Trie::addWord(string s)
{
    Node* current = root;
    int sth=1;
    bool pl=true;
    for ( int i = 0; i < s.length(); i++ )
    {
        Node* child = current->findChild(s[i]);
        if ( child != NULL )
        {
            current = child;
            if(pl)sth++;
        }
        else
        {
            Node* tmp = new Node();
            tmp->setContent(s[i]);
            current->appendChild(tmp);
            current = tmp;
            pl=false;

        }
        if ( i == s.length() - 1 )
        {
            current->setWordMarker();
            if(pl)sth--;
        }
    }
    return sth;
}
bool Trie::searchWord(string s)
{
    Node* current = root;
    while ( current != NULL )
    {
        for ( int i = 0; i < s.length(); i++ )
        {
            Node* tmp = current->findChild(s[i]);
            if ( tmp == NULL ) return false;
            current = tmp;
        }
        if ( current->wordMarker() ) return true;
        else return false;
    }
    return false;
}
int main()
{
    int t,n;
    scanf(" %d",&t);
    for(int i=1; i<=t; i++)
    {
        printf("Case #%d: ",i);
        Trie* trie = new Trie();
        scanf(" %d",&n);
        int sum=0;
        for(int j=0; j<n; j++)
        {
            string tp;
            cin>>tp;
            sum+=trie->addWord(tp);
        }
        printf("%d\n",sum);
        delete trie;
    }
}

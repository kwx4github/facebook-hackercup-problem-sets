#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<string>
#include<stack>
#include<vector>
#include<list>
#include<queue>
#include<set>
#include<map>
#include<unordered_set>
#include<unordered_map>
#include<utility>

using namespace std;

typedef long long ll;
typedef struct trie* triep;

#define REP(a, b, c) for(ll (a)=(b); (a)<(c); (a)++)
#define dREP(a, b, c) for(ll (a)=(b); (a)>=(c); (a)--)
#define MAX 100000+100

struct trie{
	triep ch[27];
	int c = 0;
	trie(){
		REP(i, 0, 27) ch[i] = NULL;
		c = 0;
	}
};

trie *root = new trie();
stack<triep> stk;

void insert(const char *s, triep t=root){
	int len = strlen(s);
	triep tp = t;
	REP(i, 0, len){
		if(tp->ch[s[i]-'a']==NULL){
			tp->ch[s[i]-'a'] = new trie();
			stk.push(tp->ch[s[i]-'a']);
		}
		(tp->c)++;
		tp = tp->ch[s[i]-'a'];
	}
}

void rem_trie(){
	while(!stk.empty()){
		triep tp = stk.top();
		stk.pop();
		delete(tp);
	}
	root->c = 0;
}

int find(const char *s, triep t=root){
	insert(s, t);
	int cnt = 0;
	int len = strlen(s);
	triep tp = t;
	REP(i, 0, len){
		cnt = i+1;
		tp = tp->ch[s[i]-'a'];
		if((tp->c)==1){
			break;
		}
	}
	return cnt;
}

struct string_c{
	string s;
};

string_c s[MAX];

void init(int n){
	REP(i, 0, n){
		s[i].s.clear();
	}
	REP(i, 0, 27) root->ch[i] = NULL;
}

bool comp_s(string_c a, string_c b){
	if(a.s.size()<b.s.size()) return true;
	return false;
}

int main(){
	freopen("autocomplete.txt", "r", stdin);
	freopen("final_output.txt", "w", stdout);
	int T;
	scanf("%d", &T);
	REP(t, 1, T+1){
		printf("Case #%d: ", t);
		int N;
		scanf("%d", &N);
		init(N);
		char s_tmp[1000000+100];
		REP(i, 0, N){
			scanf("%s", s_tmp);
			s[i].s.assign(s_tmp);
			s[i].s.push_back('{');
		}
		int cnt = 0;
		REP(i, 0, N){
			int c = find(s[i].s.c_str());
			//cout << c << endl;
			cnt += min(c, (int)(s[i].s.size())-1);
		}
		rem_trie();
		printf("%d\n", cnt);
	}
	return 0;
}

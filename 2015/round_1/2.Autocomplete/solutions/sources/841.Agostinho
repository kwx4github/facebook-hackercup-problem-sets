import java.io.FileInputStream;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Agostinho Junior (junior94)
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "autocomplete.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Autocomplete {

	static class Trie {
		private Node root;

		public Trie() {
			root = new Node();
		}

		public void add(String word) {
			Node current = root;
			for (int i = 0; i < word.length(); i++) {
				char c = word.charAt(i);
				boolean found = false;
				if (current.children == null) {
					current.children = new ArrayList<>();
				}
				for (Node child: current.children) {
					if (child.letter == c) {
						current = child;
						found = true;
						break;
					}
				}
				if (!found) {
					current.children.add(new Node(c));
					current = current.children.get(current.children.size() - 1);
				}
			}
		}

		public int count(String word) {
			Node current = root;
			for (int i = 0; i < word.length(); i++) {
				char c = word.charAt(i);
				boolean found = false;
				if (current.children != null) {
					for (Node child: current.children) {
						if (child.letter == c) {
							current = child;
							found = true;
							break;
						}
					}
				}
				if (!found) {
					return i + 1;
				}
			}
			return word.length();
		}

		private static class Node {
			public char letter;
			public ArrayList<Node> children;
			public Node() {
			}
			public Node(char letter) {
				this.letter = letter;
			}
		}

	}
	
	public void solve(int testNumber, InputReader in, OutputWriter out) {
		final int n = in.readInt();
		long res = 0;
		Trie trie = new Trie();
		for (int i = 0; i < n; i++) {
			String word = in.readLine();
			res += trie.count(word);
			//System.out.printf("word: %s, count: %d, res: %d\n", word, trie.count(word), res);
			trie.add(word);
		}
		out.printfln("Case #%d: %d", testNumber, res);
	}

}

class InputReader {
    private BufferedReader input;
    private StringTokenizer line = new StringTokenizer("");

	public InputReader(InputStream in) {
        input = new BufferedReader(new InputStreamReader(in));
    }

	public void fill() {
        try {
            if(!line.hasMoreTokens()) line = new StringTokenizer(input.readLine());
        } catch(IOException io) { io.printStackTrace(); System.exit(0);}
    }
    public String next() {
        fill();
        return line.nextToken();
    }

	public int readInt() {
        fill();
        return Integer.parseInt(line.nextToken());
    }

	public String readLine() {
        String s = "";
        try {
            s = input.readLine();
        } catch(IOException io) {io.printStackTrace(); System.exit(0);}
        return s;
    }
}

class OutputWriter {
    private PrintWriter output;

	public OutputWriter(OutputStream out) {
        output = new PrintWriter(out);
    }

	public void printfln(String format, Object... o) {
        output.printf(format + "\n", o);
    }

	public void close() {
        output.close();
    }
}


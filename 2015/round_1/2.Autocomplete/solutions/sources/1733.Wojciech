import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class Autocomplete {

	public static void main(String[] argv) throws IOException {
		BufferedReader bi = new BufferedReader(new InputStreamReader(System.in));
		String line = bi.readLine();
		int t = Integer.parseInt(line);
		for (int i = 1; i <= t; i++) {
			line = bi.readLine();
			int n = Integer.parseInt(line);
			PrefixTree tree = new PrefixTree();
			long result = 0;
			for (int x = 0; x < n; x++) {
				String word = bi.readLine();
				tree.addWord(word);
				result += tree.findMinCount(word);
			}
			System.out.println("Case #" + i + ": " + result);
		}
	}

	public static class PrefixTree {

		private final PrefixNode root = new PrefixNode();

		public void addWord(String word) {
			PrefixNode current = root;
			for (int i = 0; i < word.length(); i++) {
				Character c = word.charAt(i);
				PrefixNode newCurrent = current.neighbours.get(c);
				if (newCurrent == null) {
					newCurrent = new PrefixNode();
					current.neighbours.put(c, newCurrent);
				}
				current = newCurrent;
				current.incWordCount();
			}
		}

		public long findMinCount(String word) {
			int i = 0;
			boolean notFound = true;
			PrefixNode current = root;
			while (notFound) {
				Character c = word.charAt(i);
				PrefixNode node = current.neighbours.get(c);
				if (node.wordCount == 1 || word.length() == i + 1) {
					notFound = false;
				} else {
					current = node;
				}
				i++;
			}
			return i;
		}

		private class PrefixNode {
			final Map<Character, PrefixNode> neighbours = new HashMap<Character, PrefixNode>();
			int wordCount = 0;
			boolean endOfWord = false;

			void incWordCount() {
				this.wordCount++;
			}

			@Override
			public String toString() {
				return "PrefixNode [neighbours=" + neighbours + ", wordCount="
						+ wordCount + ", endOfWord=" + endOfWord + "]";
			}

		}
	}
}

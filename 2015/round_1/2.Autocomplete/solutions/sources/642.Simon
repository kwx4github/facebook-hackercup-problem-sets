import java.util.*;
import java.io.*;

public class Autocomplete
{
	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{
			final Node root = new Node();
			int cnt = 0;

			final int N = in.getInt();
			for(int i = 0; i<N; i++)
			{
				Node tmp = root;
				final char[] s = in.getWord().toCharArray();
				for(int j = 0; j<s.length; j++){ tmp = next(tmp, s[j]-'a'); tmp.cnt++; }
				tmp = root;
				for(int j = 0; j<s.length; j++){ ++cnt; tmp = next(tmp, s[j]-'a'); if(tmp.cnt==1) break; }
			}

			out.println("Case #"+t+": "+cnt); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	static Node next(final Node nod, final int i)
	{
		if(nod.nxt[i]==null) nod.nxt[i] = new Node();
		return nod.nxt[i];
	}

	private static class Node
	{
		final Node[] nxt = new Node[26];
		int cnt;
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

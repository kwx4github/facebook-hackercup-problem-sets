program autocomp;
const
    fi = 'autocomplete.txt';
    fo = 'auto_output.txt';
type
    pNode = ^node;
    node = array['a'..'z'] of pNode;
var
    root: pNode;
    test, itest: longword;
    s: ansistring;
    res: qword;
    n: longword;
procedure newNode(var p: pNode);
    begin
        new(p);
        fillchar(p^, sizeof(node), 0);
    end;
procedure sol;
    var
        i, j, l: longword;
        p, prev: pNode;
        f: boolean;
    begin
        newNode(root);
        readln(n);
        res := 0;
        for i := 1 to n do
            begin
                readln(s);
                p := root; l := 0; f := true;
                for j := 1 to length(s) do
                    begin
                        prev := p;
                        p := p^[s[j]];
                        inc(l);
                        if (p = nil) then
                            begin
                                if f then begin
                                    res := res + l;
                                    f := false;
                                end;
                                newNode(p);
                                prev^[s[j]] := p;
                            end
                        else if (f and (l = length(s))) then // full word
                            begin
                                res := res + l;
                            end;
                    end;
            end;
        writeln('Case #', itest, ': ', res);
    end;
begin
    assign(input, fi); reset(input);
    assign(output, fo); rewrite(output);
    readln(test);
    for itest := 1 to test do sol;
end.
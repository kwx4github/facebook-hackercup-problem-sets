#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string.h>
using namespace std;
#define REP(i,n) for(int i=0,n_=(n);i<n_;i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define FOR(i,a,b) for (int i=a,b_=b;i<=(b_);i++)
#define ALL(a) a.begin(),a.end()
#define SZ(a) (int)(a).size()
#define SORT(a) sort(ALL(a))
#define INF 1073741823
#define DEB(x) cout<<#x<<":"<<x<<"\n"
#define PB(b) push_back(b)
#define MOD 1000000007
struct Prefix {
  char letter;
  int innerWords;
  Prefix *sons[26];
};
Prefix *prefixes;
void add(string gx, Prefix *gprefix) {
  string x = gx;
  int pos=0;
  Prefix *prefix = gprefix;
  while (pos<x.size()) {
    prefix->innerWords ++;
    if (prefix->sons[x[pos]-'a']==NULL) {
      Prefix *pre = new Prefix();
      pre->letter = x[pos];

      pre->innerWords = pos == (x.size()-1);
    
      prefix->sons[x[pos]-'a'] = pre;
    } 

    prefix= prefix->sons[x[pos]-'a'];
    //if (pos%1000 == 0 )DEB(pos);
    pos++;
  }
    
}
int deep(string &a,int p,int ws, Prefix *gx) {
  Prefix *x=gx;
  while (p<=a.size()) {
    if (p == a.size()) {
      return ws;
    }
  //DEB(a);
  //DEB(a[p]);
  //DEB(x->letter);
    //DEB(x->innerWords);
    if(x->innerWords == 1) {
      return ws;
    }
 
    ws++;
    x=x->sons[a[p]-'a'];
    p++;
  }
  DEB("BREAK");
  return 0;
}
void del(Prefix *xx) {
  queue<Prefix*> Q;
  Q.push(xx);
  while (!Q.empty())
  {
    Prefix *k=Q.front();
    Q.pop();  
    REP(i,26) if (k->sons[i]!=NULL)
    { 

      Q.push(k->sons[i]);
      k->sons[i]=NULL;
    }
    delete k;
  }
  
}
char P[1000010];

int main ()
{
  //printf ("1\n2\n");
  //REP(i,500000) printf ("a");
  //printf ("\n");
  //REP(i,500001) printf ("a");
  //return 0;
  int cas;
  scanf ("%d",&cas);
  REP(www,cas)
  {
    vector<string>Q;
    int n;
    prefixes = new Prefix();
    scanf ("%d",&n);
    int res=0;
    REP(i,n)
    {
      scanf ("%s", P);
      Q.PB(P);
      //DEB(i);
      add(P, prefixes);
      int y=deep(Q[i],1,1,prefixes->sons[Q[i][0]-'a']);
     // DEB(y);
      res+=y;
    }
    printf("Case #%d: %d\n",www+1,res);
    del(prefixes);
  }
  return 0;
}

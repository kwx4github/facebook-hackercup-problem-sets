#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
class BinarySearchTree
{
	public:
		class Node
		{
			public:
				string word;
				Node *left,*right,*parent;
				Node(string w):left(NULL),right(NULL),parent(NULL),word(w){};
		};
		Node *root;
		~BinarySearchTree()
		{
			FREE(root);
		}
		BinarySearchTree(string w)
		{
			root=new Node(w);
		}
		void FREE(Node* x)
		{
			if(x->left)FREE(x->left);
			if(x->right)FREE(x->right);
			delete x;
		}
		Node* ins(string w)
		{
			return insert(w,root);
		}
		Node* insert(string w,Node* p)
		{
			if(w<= p->word)
			{
				if(p->left !=NULL)
					return insert(w,p->left);
				else
				{
					Node* NEW=new Node(w);
					p->left=NEW;
					NEW->parent=p;
					return NEW;
				}
			}
			else
			{
				if(p->right != NULL)
					return insert(w,p->right);
				else
				{
					Node* NEW=new Node(w);
					p->right=NEW;
					NEW->parent=p;
					return NEW;
				}
			}
		}
		string pred(Node *bus)
		{
			if(bus->left)
			{
				Node *s=bus->left;
				while(s->right)s=s->right;
				return s->word;
			}
			else
			{
				Node *s=bus->parent;
				while(s && s->left==bus)
				{				
					bus=s;			
					s=s->parent;
				}
				if(s) return s->word;
				return string();
			}
		}
		string succ(Node *bus)
		{
			if(bus->right)
			{
				Node *s=bus->right;
				while(s->left)s=s->left;
				return s->word;
			}
			else
			{
				Node *s=bus->parent;
				while(s && s->right==bus)
				{				
					bus=s;			
					s=s->parent;
				}
				if(s) return s->word;
				return string();
			}
		}
		void printinorder(Node* a)
		{
			if(a)
			{
				printinorder(a->left);
				cout << a->word << " ";
				printinorder(a->right);
			}
		}
		int diff(Node *a)
		{
			string pr=pred(a);
			string sc=succ(a);
			string w=a->word;
			int prc=0;
			int scc=0;
			if(pr.size()!=0)
			{
				int i;
				for(i=0;i<w.size() && i<pr.size();i++)
					if(w[i] != pr[i]) break;
				if(i==w.size() && i<=pr.size())return i;
				prc=i;
			}
			if(sc.size()!=0)
			{
				int i;
				for(i=0;i<a->word.size() && i<sc.size();i++)
					if(w[i] != sc[i]) break;
				if(i==w.size() && i<=sc.size()) return i;
				scc=i;
			}
			return max(prc,scc)+1;
		}
};
typedef BinarySearchTree::Node Node;
int main()
{
	int T;
	cin >> T;
	for(int O=1;O<=T;O++)
	{
		cout << "Case #"<<O<<": ";
		int N;
		cin >> N;
		vector<string> words(N);
		string hold;
		cin >> hold;
		BinarySearchTree A(hold);
		int COUNT=1;
		for(int i=1;i<N;i++)
		{
			cin >> hold;
			Node* LAST=A.ins(hold);
			COUNT+=A.diff(LAST);
		}
		cout << COUNT << endl;
	}
	return 0;
}

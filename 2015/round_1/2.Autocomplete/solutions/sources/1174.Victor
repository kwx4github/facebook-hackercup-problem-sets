#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const int M = 1000007;

char buff[M];

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
	int value;
	trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
	trie_node_t *root;
	int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
	trie_node_t *pNode = NULL;

	pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

	if( pNode )
	{
		int i;

		pNode->value = 0;

		for(i = 0; i < ALPHABET_SIZE; i++)
		{
			pNode->children[i] = NULL;
		}
	}

	return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
	pTrie->root = getNode();
	pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[])
{
	int level;
	int length = strlen(key);
	int index;
	trie_node_t *pCrawl;

	pTrie->count++;
	pCrawl = pTrie->root;

	for( level = 0; level < length; level++ )
	{
		index = CHAR_TO_INDEX(key[level]);
		if( !pCrawl->children[index] )
		{
			pCrawl->children[index] = getNode();
		}

		pCrawl = pCrawl->children[index];
		pCrawl->value++;
	}
}

// Returns non zero, if key presents in trie
int search(trie_t *pTrie, char key[])
{
	int level;
	int length = strlen(key);
	int index;
	trie_node_t *pCrawl;
	int res=0;

	pCrawl = pTrie->root;

	for( level = 0; level < length; level++ )
	{
		index = CHAR_TO_INDEX(key[level]);

		pCrawl = pCrawl->children[index];

		if( pCrawl->value == 1 )
		{
			return level + 1;
		}
	}

	return length;
}

// Driver
int main()
{
	int t;
	gets(buff);
	sscanf(buff,"%d",&t);
	for(int tt = 1 ; tt <= t ; tt++){
		printf("Case #%d: ",tt);
		gets(buff);
		int n;
		sscanf(buff,"%d",&n);

		trie_t trie;
		initialize(&trie);

		int res=0;
		for(int i=0;i<n;i++){
			gets(buff);
			insert(&trie, buff);
			res += search(&trie, buff);
		}
		printf("%d\n",res);
	}
	return 0;
}

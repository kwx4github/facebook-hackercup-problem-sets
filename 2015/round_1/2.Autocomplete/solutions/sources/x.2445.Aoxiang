#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 1000000 + 10;
struct Node {
  Node *child[26];
  int cnt;
};

Node pool[N], *last;
char s[N];

Node* new_node() {
  Node* ret = last++;
  fill(ret->child, ret->child + 25, (Node*)NULL);
  ret->cnt = 0;
  return ret;
}

int insert(Node* root, char s[]) {
  Node* p = root;
  int ret = 0;
  bool found = false;
  for (int i = 0; s[i]; ++i) {
    int k = s[i] - 'a';
    if (!p->child[k]) {
      p->child[k] = new_node();
    }
    p = p->child[k];
    p->cnt++;
    if (!found) ret = i + 1;
    if (p->cnt == 1) found = true;
  }
  return ret;
}

int main() {
  freopen("B.in", "r", stdin);
  freopen("B.out", "w", stdout);
  int cas;
  scanf("%d", &cas);
  for (int num = 1; num <= cas; ++num) {
    int n;
    scanf("%d", &n);
    last = pool;
    Node* root = new_node();
    int ret = 0;
    for (int i = 0; i < n; ++i) {
      scanf("%s", s);
      int sum = insert(root, s);
      ret += sum;
    }
    printf("Case #%d: %d\n", num, ret);
  }
  return 0;
}

#include <algorithm>
#include <iostream>
#include <cstring>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <list>
#include <map>
#include <set>

#define FOR(i ,a,b)	for(int i = a, _b = b; i <= _b; i++)
#define FORD(i ,a,b)	for(int i = a, _b = b; i >= _b; i--)
#define REP(i , n)	for(int i = 0, _n = n; i < _n ; i++)

using namespace std;

typedef pair<int ,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef long long ll;
#define MAX 1000005
int res;
int cnt_node;
struct node
{
	int child[28];
};

node trie[MAX];

void init_node(int tmp)
{
	memset(trie[tmp].child , -1 , sizeof trie[tmp].child);
}

void push_trie(char str[])
{
	int len = strlen(str);
	int st = 0;
	bool first = true;
	REP(i , len)
	{
		int ch = str[i] - 'a';
		if(trie[st].child[ch] != -1)
			st = trie[st].child[ch];
		else if(trie[st].child[ch] == -1)
		{
			if(first)	
			{
				res += i + 1;
				first = false;
			}
			cnt_node++;
			trie[st].child[ch] = cnt_node;
			st = cnt_node;
		}
	}
	if(first) res += len;
}

void init()
{
	REP(i , MAX)
		init_node(i);
	res = 0;
	cnt_node = 0;
}

char str[MAX];
int main()
{
//	freopen("Autocomplete.txt","r",stdin);
//	freopen("a.out","w",stdout);
	
	int test , n;
	scanf("%d",&test);
	FOR(i , 1 , test)
	{
		printf("Case #%d: ",i);
		init();
		scanf("%d",&n);
		FOR(j , 1 , n)
		{
			scanf("%s",str);
			push_trie(str);
		}
		
		printf("%d\n",res);
	}
	
    return 0;
}

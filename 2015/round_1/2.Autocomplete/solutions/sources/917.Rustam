#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <string.h>
#include <cstdio>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)((x).size()))
#define rep(i, N) for (int i = 0; i < N; ++i)
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();++it)

typedef long long lint;
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;

char S[30 * 1000 * 1000];

struct Node
{
	Node *next[26];
};

Node *root;

int add() {
	int res = -1;
	Node *node = root;
	int pos = 0;
	for (pos = 0; S[pos]; ++pos) {
		char ch = S[pos];
		if (node->next[ch - 'a'] == NULL) {			
			if (res == -1)
				res = pos + 1;		
			node->next[ch - 'a'] = new Node();			
		}	
		node = node->next[ch - 'a'];
	}
	if (res == -1) res = pos;
	return res;
}

void solve(int tst) {
	int N;
	cin >> N;
	lint ans = 0;
	root = new Node();

	// for (int i = 0; i < 20000000; ++i) {
	// 	S[i] = 'a';
	// }

	for (int i = 0; i < N; ++i) {
		scanf("%s", S);
		int x = add();
		ans += x;
	}
	printf("Case #%d: %lld\n", tst, ans);
}

int main() {
	freopen("input.txt", "r", stdin);
	int tst;
	cin >> tst;
	for (int i = 1; i <= tst; ++i) {
		solve(i);
	}
    return 0;
}

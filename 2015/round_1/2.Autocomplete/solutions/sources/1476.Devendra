#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;


#define rep(i,n)	for(int i=0;i<(n);i++)

#define mp	make_pair
#define pb push_back
#define maxn (int)1e5+2

struct trie{
	struct trie *A[26];
};

trie* new_structure()
{
	trie *var = new(trie);
	for(int i=0;i<26;i++)	var->A[i] =NULL;
	return var;
}

void insert(trie *root,string S)
{
	int total_size = S.size(),i;
	for(i=0;i<total_size;i++){
		int ind = (int)(S[i] - 'a');
		if( root->A[ind] == NULL ){
			break;
		}
		else{
			root = root->A[ind];
		}
	}
	for(int j=i;j<total_size;j++){
		int ind = (int)(S[j] - 'a');
		root->A[ind] = new_structure();
		root = root->A[ind];
	}
}

int mismatch(trie *root , string S)
{
	int total_size = S.size() , i;
	for(i=0;i<total_size;i++){
		int ind = (int)(S[i]-'a');
		if(root->A[ind] == NULL){
			break;
		}
		else{
			root = root->A[ind];
		}
	}
	return i+1;
}

void solve(int T)
{
	trie *root = new_structure();
	int N,answer=0;
	cin>>N;
	string S;
	for(int i=1;i<=N;i++){
		cin>>S;
		answer += min(mismatch(root,S),(int)S.size());
		//printf("%d ",mismatch(root,S));
		insert(root,S);
	}
	//printf("\n");
	printf("Case #%d: %d\n",T,answer);
}

int main()
{
	int T;
	cin>>T;
	for(int i=1;i<=T;i++){
		solve(i);
	}
	return 0;
}

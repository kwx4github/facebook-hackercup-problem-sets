#include<stdio.h>
#include<stdlib.h>
#include <string.h>

char str[1000001];
#define ALPHABET_SIZE 26
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

FILE *infile, *outfile;

typedef struct trie_node trie_node_t;

struct trie_node{
       int value;
       trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;

struct trie{
       trie_node_t *root;
       int count;
};

// create a new node and return pointer to it
trie_node_t *getNode(void){
            trie_node_t *pNode = NULL;
            pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
            if(pNode){
                      int i;
                      pNode->value = 0;
                      for(i=0;i<ALPHABET_SIZE;i++)
                          pNode->children[i] = NULL;
            }
            return pNode;
}

// initialize a new blank trie with dummy node as root
void initialize(trie_t *pTrie){
     pTrie->root = getNode();
     pTrie->count = 0;
}

// insert a new word into the trie
void insert(trie_t *pTrie, char key[]){
     int level, index, le=strlen(key);
     trie_node_t *pCrawl;
     
     pTrie->count++;
     pCrawl = pTrie->root;
     
     for(level=0;level<le;level++){
         index = CHAR_TO_INDEX(key[level]);
         if(!(pCrawl->children[index]))
             pCrawl->children[index] = getNode();
         
         pCrawl = pCrawl->children[index];
     }
     pCrawl->value = pTrie->count;
}

// function for searching for a key in trie
int search(trie_t *pTrie, char key[]){
    int level, index, le = strlen(key);
    trie_node_t *pCrawl;
    
    int count=0;
    pCrawl = pTrie->root;
    
    for(level=0;level<le;level++){
        index = CHAR_TO_INDEX(key[level]);
        if(!(pCrawl->children[index])){
            count++;
            return count;
        }
        
        pCrawl = pCrawl->children[index];
        count++;
    }
    return count;
}

int main(){
    infile = fopen("autocomplete.txt", "r");
    outfile = fopen("autocomplete_output_sahil.txt", "w");
    int t,count,i,n;
    
    fscanf(infile, "%d", &t);
    int h;
    for(h=1;h<=t;h++){
        trie_t trie;
        initialize(&trie);
        
        fscanf(infile, "%d", &n);
        count=0;
        for(i=0;i<n;i++){
            fscanf(infile, "%s", str);
            count += search(&trie, str);
            insert(&trie, str);
        }
        fprintf(outfile, "Case #%d: %d\n", h, count);
    }
    fclose(infile);
    fclose(outfile);
    return 0;
}

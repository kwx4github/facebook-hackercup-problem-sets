package round1;

import java.io.*;
import java.util.*;

public class Autocomplete {
	
	static final String INPUT = "autocomplete.txt";
	static final String OUTPUT = "autocomplete_output.txt";

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer st = new StringTokenizer("");

	public static String next() {
		try	{
		while (!st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s);
		}
		return st.nextToken();
		}	catch(Exception e)	{
			return	null;
		}
	}

	public static void main(String[] args) throws FileNotFoundException {

		
		br = new BufferedReader( new InputStreamReader(new FileInputStream(INPUT)) );
		out = new PrintWriter( new FileOutputStream(OUTPUT) );
		
		
		int CASES = Integer.parseInt( next() );
		for (int cc = 1; cc <= CASES; cc++)	{
			Trie t = new Trie();
			int N = Integer.parseInt( next() );
			int total = 0;
			while	(N-- > 0)	{
				String s = next();
				int [] v = new int [ s.length() ];
				for (int i = 0; i < v.length; i++)	{
					v[i] = s.charAt(i) - 'a';
				}
				
				t.add(v);
				int x = t.lookup(v);
				total += x;
			}
			
			out.println( "Case #" + cc + ": " + total );
		}

		//
		out.flush();
		out.close();
	}
}



class Trie	{
	
	Node root;
	
	Trie()	{
		root = new Node();
	}
	
	int lookup(int [] v)	{
		Node node = root;
		int cnt = 0;
		
		for (int x : v)	{
			node = node.sons[x];
			cnt++;
			
			if	( !node.hasWords )
				break;
		}
		
		return cnt;
	}
	
	void add(int [] v)	{
		
		Node node = root;
		int id = 0;
		
		while	( id < v.length )	{
			
			if	( node.sons[ v[id] ] == null )	{
				node.sons[ v[id] ] = new Node();
			}	else	{
				if	( v.length - 1 != id )
					node.sons[ v[id] ].hasWords = true;
			}

			node = node.sons[ v[id] ];
			if	( v.length - 1 == id )	{
				node.isWord = true;
			}
			
			id++;
		}
		
		
	//	add(root, v, 0);
	}
	/*
	void add(Node node, int [] v, int id)	{
		if	( id >= v.length )
			return;
		
		if	( node.sons[ v[id] ] == null )	{
			node.sons[ v[id] ] = new Node();
		}	else	{
			if	( v.length - 1 != id )
				node.sons[ v[id] ].hasWords = true;
		}

		if	( v.length - 1 == id )	{
			node.sons[ v[id] ].isWord = true;
		}
		
		add( node.sons[ v[id] ], v, id + 1 );
	}
	*/
}

class Node	{
	final static int CHARSET = 26;
	
	Node [] sons = new Node[CHARSET];
	boolean isWord = false;		// is this node a word ending?
	boolean hasWords = false;	// are there words belonging to this node?
}







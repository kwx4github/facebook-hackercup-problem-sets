#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int MX = (int)2e7 + 10;
int dp[MX];
int kv;
map<int, int> go[MX];
void init() {
  memset(dp, 0, sizeof(dp));
  for (int i = 0; i < MX; i++) {
    go[i].clear();
  }
  kv = 1;
}
void add(char* s) {
  int cur = 1;
  while(s[0]) {
    if (go[cur][s[0] - 'a'] == 0) {
      go[cur][s[0] - 'a'] = ++kv;
    }
    cur = go[cur][s[0] - 'a'];
    dp[cur]++;
    s++;
  }
}
int type(char* s) {
  int cur = 1;
  int res = 0;
  while(s[0]) {
    res++;
    cur = go[cur][s[0] - 'a'];
    if (dp[cur] == 1) break;
    s++;
  }
  return res;
}
int n;
char s[(int)1e6 + 10];
int main(){
    #ifdef home
    assert(freopen(problem_name".out","wt",stdout));
    assert(freopen(problem_name".in","rt",stdin));
    #endif
    int T;
    scanf("%d", &T);
    for (int ti = 1; ti <= T; ti++) {
      printf("Case #%d: ", ti);
      scanf("%d", &n);
      init();
      int ans = 0;
      for (int i = 0; i < n; i++) {
        scanf("%s", s);
        add(s);
        ans += type(s);
      }
      assert(kv <= MX);
      printf("%d\n", ans);
    }  
    return 0;
}

#include <cassert>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

struct Node {
    map<char, Node*> children;
    int words;
    Node() : words(0) {}
};

void add_word(Node *n, const string &word, int pos) {
    const char &c = word[pos];
    n->words++;
    if (pos >= word.size()) return;
    Node *next;
    if (n->children.count(c) == 0) {
        next = new Node();
        n->children[c] = next;
    } else {
        next = n->children[c];
    }
    add_word(next, word, pos + 1);
}

int get_answer(const Node *root, Node *n, const string &word, int pos) {
    if (pos >= word.size() || n->words == 1) return 0;
    const char c = word[pos];
    assert(n->children.count(c) > 0);
    return 1 + get_answer(root, n->children[c], word, pos + 1);
}

void solve(int test_case) {
    Node *root = new Node();
    int N;
    cin >> N;
    vector<string> queries;
    int ans = 0;
    for (int i = 0; i < N; ++i) {
        string cur;
        cin >> cur;
        add_word(root, cur, 0);
        ans += get_answer(root, root, cur, 0);
    }
    ++ans;
    cout << "Case #" << test_case << ": " << ans << endl;
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        solve(i);
    }
}

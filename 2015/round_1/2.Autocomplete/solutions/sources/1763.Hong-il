#include <vector>
#include <valarray>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>
using namespace std;
typedef long long ll;
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)

const int ALPHABETS = 26;
int toNumber(char ch) {return ch-'a';}

struct TrieNode
{
	TrieNode* children[ALPHABETS];
	int terminal;
    int first;
	TrieNode() : terminal(-1), first(-1)
	{
		memset(children, 0, sizeof(children));
	}
	~TrieNode()
	{
		FOR(i, 0, ALPHABETS)
		{
			if (children[i])
				delete children[i];
		}
	}

	void insert(const char* key, int id)
	{
		if(first == -1)
            first = id;
        if(*key == 0)
            terminal = id;
        else
        {
            int next = toNumber(*key);
            if (children[next] == NULL)
                children[next] = new TrieNode();
            children[next]->insert(key+1, id);
        }
	}
    int type(const char* key, int id)
    {
        if(*key == 0)
            return 0;
        if (first == id)
            return 0;
        int next = toNumber(*key);
        return 1 + children[next]->type(key+1, id);
    }

	TrieNode* find(const char* key)
	{
		if (*key == 0)
			return this;
		int next = toNumber(*key);
		if (children[next] == NULL)
			return NULL;
		return children[next]->find(key + 1);
	}
};

int countKeys(TrieNode* trie, const char* word)
{
    TrieNode* node = trie->find(word);
    return trie->type(word, node->terminal);
}

int main()
{
    FILE *fin = freopen("input.txt","r",stdin);
	FILE *fout = freopen("output.txt","w",stdout);
    int t;
    scanf("%d", &t);

    FOR(xx, 0, t)
    {
        int n;
        scanf("%d", &n);
        TrieNode* trie = new TrieNode();
        vector<string> v;
        FOR(i,0,n)
        {
            char tmp[1000001];
            memset(tmp, 0, sizeof(tmp));
            scanf("%s", tmp);
            trie->insert(tmp, i);
            v.push_back(tmp);
        }
        trie->first = -1;
        int ret = 0;
        FOR(i,0,n)
        {
            ret +=countKeys(trie, v[i].c_str());
        }
        printf("Case #%d: %d\n", xx+1, ret);
    }

    fclose(fout);
    fclose(fin);
    return 0;
}
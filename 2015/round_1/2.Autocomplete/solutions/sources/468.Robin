#include <bits/stdc++.h>/*{{{*/
using namespace std; typedef long long ll; typedef long double ld; void run(); void prep(); int main(){ios::sync_with_stdio(0); prep(); int tsts; cin>>tsts; for (int tst=1; tst<=tsts; ++tst) {cout<<"Case #"<<tst<<": "; run();}}/*}}}*/

void prep(){
  return;
}

struct Tree{
  friend class Tracker;

  protected:
    Tree *child[26];
    Tree() {for (int i=26; i--;) child[i]=nullptr;}
//    ~Tree(){for (int i=26; i--;) delete child[i];}
};

struct Tracker{
  private:
    Tree root, *cur;

    static Tree ta[10000000];
    static Tree *tc;

  public:
    void reset() {cur=&root;}
    Tracker() {reset();}

    bool operator()(char c){
      c-='a'; assert(0<=c and c<26);
      bool res=false;
      if (not cur->child[c]){
        cur->child[c]=new (tc++) Tree();
        res=true;
      }
      cur=cur->child[c];
      return res;
    }

    static void init(){
      tc=ta;
    }
};

Tree Tracker::ta[10000000];
Tree *Tracker::tc;

void run(){
  Tracker::init();
  Tracker t;

  int n; cin>>n;
  ll res=0;
  while (n--){
    string s; cin>>s;
    bool fresh=false;

    t.reset();
    for (char c: s){
      if (not fresh) ++res;
      if (t(c)) fresh=true;
    }
  }
  cout<<res<<endl;
}

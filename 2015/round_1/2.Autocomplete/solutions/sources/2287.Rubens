#include <stdio.h>
#include <iostream>
#include <vector>
#include <set>

#define pb push_back

using namespace std;

struct tree_node {
    tree_node* children[30];
    char let;
    int count;

    bool operator==(const tree_node& other) const {
        return let == other.let;
    }
    bool operator<(const tree_node& other) const {
        return let < other.let;
    }
};

void init(tree_node* node) {
    node->count = 0;
    node->let = 0;
    for (int i = 0; i < 30; i++)
        node->children[i] = NULL;
}

char word[1000005];

int main()
{
    vector<tree_node> nodes;
    tree_node *aux, root;
    int t, z;

    nodes.reserve(1000005);
    init(&root);

    scanf (" %d", &t);

    for (z = 1; z <= t; z++) {
        int n, i, j, r;
        bool added;

        nodes.clear();
        nodes.pb(root);

        scanf (" %d", &n);

        r = 0;
        for (i = 0; i < n; i++) {
            scanf (" %s", word);

            aux = &nodes[0];
            added = false;

            for (j = 0; word[j] != '\0'; j++) {

                if ((*aux).children[word[j] - 'a'] == NULL) {
                    if (!added) {
                        r += j + 1;
                        added = true;
                    }
                    nodes.pb(root);
                    (*aux).children[word[j] - 'a'] = &nodes[nodes.size()-1];
                }

                aux = (*aux).children[word[j] - 'a'];
                (*aux).count++;
            }

            if (!added)
                r += j;
        }

        printf ("Case #%d: %d\n", z, r);
    }

    return 0;
}

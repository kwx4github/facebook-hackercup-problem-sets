#include<bits/stdc++.h>
 
#define INF 1000000000
#define EPS 1e-9
#define sz(c) (int) (c).size()
#define all(c) (c).begin(), (c).end()
#define tr(c, i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define uniq(c) sort(all(c)); (c).resize(unique(all(c)) - (c).begin())
#define lobo(c, x) (int) (lower_bound(all(c), (x)) - (c).begin())
#define upbo(c, x) (int) (upper_bound(all(c), (x)) - (c).begin())
 
#define pb push_back
#define mp make_pair
#define fi first
#define se second
 
using namespace std;

#ifdef DEBUG   
    #define wrap(a) a
    #define debug(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }

    vector<string> split(const string& s, char c) {
        vector<string> v;
        stringstream ss(s);
        string x;
        while (getline(ss, x, c))
            v.emplace_back(x);
        return move(v);
    }

    void err(vector<string>::iterator it) { cout << endl; }
    template<typename T, typename... Args>
    void err(vector<string>::iterator it, T a, Args... args) {
        cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << ", ";
        err(++it, args...);
    }
#else
    #define debug(args...) 
    #define wrap(a) 
#endif
typedef long long ll;
typedef pair <int, int> ii;

const int MAXL = 1000000;
const int MAXC = 26;

char str[MAXL+2];

struct Dict {
    Dict* next[MAXC];
    char value = '0';
    int count = 0;
};

void insert2(Dict *node, char *str, const int &len) {
    Dict *now = node;
    for ( int i = 0; i < len; ++i ) {
        char idx = str[i]-'a';
        now->count++;
        //printf("[insert] node (%c, %d)\n", now->value + 'a', now->count);

        if ( now->next[idx] == NULL ) {
            now->next[idx] = new Dict;
            now->next[idx]->value = idx;
        }

        now = now->next[idx];
    }
    now->count++;
}

int type2(Dict *node, char *str, const int &len) {
    Dict *now = node;
    int res = 0;
    for ( int i = 0; i < len; ++i ) {
        res++;

        char idx = str[i]-'a';
        now = now->next[idx];

        if ( now->count == 1 ) break;
    }
    return res;
}

void delete_tree(Dict *node) {
    printf("node=(%c, %d)\n", node->value+'a', node->count);
    for ( int i = 0; i < MAXC; ++i ) 
        if ( node->next[i] != NULL ) 
            //delete_tree(node->next[i]);
    delete node;
}

int main() {
    int ntc;
    gets(str);
    ntc = atoi(str);

    for ( int tc = 1; tc <= ntc; ++tc ) {
        int nword;
        gets(str);
        nword = atoi(str);

        Dict* root;
        root = new Dict;

        int ans = 0;
        for ( int i = 0; i < nword; ++i ) {
            gets(str);

            insert2(root, str, strlen(str));
            int type_count = type2(root, str, strlen(str)) ;
            //printf("i=%d, type=%d\n", i, type_count);
            ans += type_count;
        }

        //delete_tree(root);

        printf("Case #%d: %d\n", tc, ans);
    }
    return 0;
}

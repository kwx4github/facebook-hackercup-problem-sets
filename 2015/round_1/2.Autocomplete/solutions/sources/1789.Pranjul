/*pranjuldb*/
#include <bits/stdc++.h>
#define pri(a) printf("%d",a)
#define prl(a) printf("%lld",a)
#define prd(a) printf("%lf",a)
#define nl printf("\n")
#define sp printf(" ")
#define prs(str) printf("%s", str)
#define pb push_back
#define mem(a,b) memset(a, b, sizeof(a))
#define vi vector < int >
#define vl vector < long long int >
#define pll pair<long long, long long>
#define pii pair < int , int >
#define ll long long
#define rep(i,j,k) for(i = j; i < k; i++)
#define nrep(i,j,k) for(i = j; i >= k; i--)
#define scs(str) scanf("%s", str)
#define sci(a) scanf("%d",&a)
#define scl(a) scanf("%lld",&a)
#define scd(a) scanf("%lf", &a)
#define fr first
#define se second
#define mp make_pair

using namespace std;


ll ans = 0;

// not : some part of this code has taken from geeksforgeeks.org

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (27)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, string key)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;
    //cout << "key " ;
    ll val = 0;
    bool flag = false;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(!flag) {
                 val = (ll)(level + 1);
                 flag = true;
                // cout << level;
            }
        }

        pCrawl = pCrawl->children[index];
    }
        if(!flag) {
            val = (ll)(length);
            flag = true;
                 //cout << level;
        }
        ans += val;
    // mark last node as leaf
        pCrawl->value = pTrie->count;
}

int main()
{
    //freopen("infile.txt", "r", stdin);
    //freopen("outfile.txt", "w", stdout);
    int t;
    sci(t);
    for(int test = 1; test <= t; test++) {
        int n;
        sci(n);
        ans = 0;
        trie_t trie;
        initialize(&trie);
        for(int i = 0; i < n; i++) {
            string ss;
            cin >> ss;
            insert(&trie, ss);
        }
        cout << "Case #"<< test<< ": " << ans << endl;
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
using namespace std;

int lcp(string a, string b) {
	int cnt = 0;
	for (int k = 0; k < a.size() && k < b.size(); ++k) {
		if (a[k] == b[k])
			++cnt;
		else
			break;
	}
	return cnt;
}

int main() {
	int T;
	cin >> T;

	for (int nc = 1; nc <= T; ++nc) {
		int n;
		cin >> n;
		vector<string> str(n), sorted;
		for (int i = 0; i < n; ++i) {
			cin >> str[i];
		}
		sorted = str;
		sort(sorted.begin(), sorted.end());
		map<string, int> idx;
		set<int> have;
		for (int i = 0; i < n; ++i) {
			idx[sorted[i]] = i;
		}

		int cnt = 0;

		for (int i = 0; i < n; ++i) {
			int need = 1;
			int me = idx[str[i]];
			set<int>::iterator it = have.lower_bound(me);
			if (it != have.end()) {
				need = max(need, lcp(sorted[me], sorted[*it]) + 1);
			}
			if (it != have.begin()) {
				--it;
				need = max(need, lcp(sorted[me], sorted[*it]) + 1);
			}
			need = min(need, (int) sorted[me].size());
			cnt += need;
			have.insert(me);
//			cout << need << " ";
		}
//		cout << endl;

		printf("Case #%d: %d\n", nc, cnt);
	}
	return 0;
}

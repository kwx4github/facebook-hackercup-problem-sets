#include <iostream>
#include <stdlib.h>
#include <string.h>
#include<fstream>
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
 long long ans;
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 
// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
 		else
 		{
 			ans++;
		}
        pCrawl = pCrawl->children[index];
    }
 
    // mark last node as leaf
    pCrawl->value = pTrie->count;
}
 
// Driver
int main()
{
    // Input keys (use only 'a' through 'z' and lower case)
    int t,c=0;
	//ifstream fin("C:\\autocomplete.txt");
   	//ofstream fout("C:\\auto_ans.txt");
    scanf("%d",&t);
    while(t--)
    {
    	c++;
    	char str[1000000];
    	long long n,count=0;
		scanf("%lld",&n);
    	trie_t trie;
    	initialize(&trie);
    	// Construct trie
    	while(n--)
    	{
    		ans=0;
    		scanf("%s",str);
        	insert(&trie, str);
        	if(ans==strlen(str))
        	count+=strlen(str);
        	else
        	count+=(ans+1);
    	}
    	printf("Case #%d: %lld\n",c,count);
	}
	//fin.close();
	//fout.close();
    return 0;
}

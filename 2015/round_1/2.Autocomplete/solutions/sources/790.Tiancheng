#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=100000+16;
const int maxsize=1200000;

int n;
string a[maxn];
int root;
int node;
int next[maxsize][26];

int lcp(const string& a,const string& b)
{
	int L=min(LENGTH(a),LENGTH(b));
	for (int i=0;i<L;i++) if (a.at(i)!=b.at(i)) return i;
	return L;
}
int main()
{
	//freopen("autocomplete_example_input.txt","r",stdin);
	freopen("autocomplete.txt","r",stdin);
	freopen("output.txt","w",stdout);
	std::ios::sync_with_stdio(false);
	int testcase;
	cin>>testcase;
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		cin>>n;
		for (int i=0;i<n;i++) cin>>a[i];
		root=-1;
		node=0;
		int ret=0;
		for (int i=0;i<n;i++)
		{
			int L=LENGTH(a[i]);
			int *p=&root;
			int w=L;
			for (int k=0;k<=L;k++)
			{
				if (*p<0)
				{
					checkmin(w,k);
					if (node>=maxsize) { cout<<"Too many nodes."<<endl; exit(0); }
					*p=(node++);
					memset(next[*p],255,sizeof(next[*p]));
				}
				if (k==L) break;
				int d=a[i][k]-'a';
				if (d<0 || d>=26) { cout<<"Invalid word " << a[i]<<endl; exit(0); }
				p=&next[*p][d];
			}
			ret+=max(1,w);
			/*
			int z=1;
			for (int j=0;j<i;j++) checkmax(z,lcp(a[i],a[j])+1);
			if (max(1,w)!=min(z,LENGTH(a[i]))) { cout<<"ERROR"<<endl; exit(0); }
			*/
		}
		cout<<"Case #"<<case_id<<": "<<ret<<endl;
	}
	return 0;
}


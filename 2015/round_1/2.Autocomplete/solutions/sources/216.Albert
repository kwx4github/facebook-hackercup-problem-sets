#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#define db(v) cout << #v << ": " << v << endl
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define taskname "XXXXXXXXXXXXXXXXXXXXXXXX" // CHANGE!!!
typedef long long i64;
using namespace std;

const int maxn = 1000007;

struct Node
{
    int next[64];
    int counter;
};

Node tree[maxn];
int sz = 0;

int addWord(const string& s)
{
    int ans = -1;
    int n = s.length();
    int v = 0;
    forn(i, n)
    {
        int ch = s[i] - 'a';
        assert(ch <= 26);
        if (tree[v].next[ch] == -1)
        {
            tree[v].next[ch] = sz;
            memset(tree[sz].next, -1, sizeof(tree[sz].next));
            tree[sz].counter = 0;
            ++sz;
        }
        v = tree[v].next[ch];

        // check if the word after ch is a prefix of some word in dictionary
        if (!tree[v].counter && ans == -1)
            ans = i + 1;
        ++tree[v].counter;
    }
    return (ans == -1 ? n : ans);
}

void solve()
{
    int T; scanf("%d", &T);
    fore(t, 1, T)
    {
        sz = 1;
        memset(tree[0].next, -1, sizeof(tree[0].next));
        tree[0].counter = 0;

        int n; scanf("%d", &n);
        int sum = 0;
        forn(i, n)
        {
            string s;
            cin >> s;
            int add = addWord(s);
            sum += add;
        }
        printf("Case #%d: %d\n", t, sum);
    }
}

int main()
{
#ifdef HOME
    freopen("input2.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    
    solve();

#ifdef HOME
    cerr << "\nTime elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

#include <iostream>
#include <vector>
#include <string>
#include <numeric>

using namespace std;

struct Node{
    
    Node()
    {
        fill(&child[0], &child[26], nullptr);
    }
    
    Node* child[26];
};

int insert(const string& word, vector<Node>& trie)
{
    Node* cur = &trie[0];
    auto it = word.begin();
    auto itEnd = word.end();
    int typed = 0;
    
    while(it != itEnd)
    {
        ++typed;
        int pos = *it - 'a';
        if(cur->child[pos] == nullptr)
        {
            while(it != itEnd)
            {
                if(trie.size() == trie.capacity())
                {
                    cout << "assert\n";
                }
                trie.emplace_back();
                pos = *it - 'a';
                cur->child[pos] = &trie.back();
                cur = cur->child[pos];
                ++it;
            }
            
            return typed;
        }
        
        cur = cur->child[pos];
        ++it;
    }
    
    return typed;
}

int solve(const vector<string>& words)
{
    int totalSize = accumulate(words.begin(), words.end(), 0, [](int acc, const string& s) -> int { return static_cast<int>(acc + s.size());});
    vector<Node> trie;
    trie.reserve(totalSize+1);
    trie.emplace_back();
    
    int resp = 0;
    for(auto&& word : words)
    {
        resp += insert(word, trie);
    }
    
    return resp;
}

int main()
{
    int t;
    cin >> t;
    for(int lp=1;lp<=t;++lp)
    {
        int n;
        cin >> n;
        vector<string> words(n);
        for(auto&& w : words)
        {
            cin >> w;
        }
        
        auto resp = solve(words);
        cout << "Case #" << lp << ": " << resp << "\n";
    }
    return 0;
}
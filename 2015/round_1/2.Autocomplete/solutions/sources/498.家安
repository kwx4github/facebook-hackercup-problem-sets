#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>

const int SIZE_L = 1000000 + 10 ;

struct node
{
	int deg , end ;
	int chi[30] ;
} mem[SIZE_L] ;

struct trie
{
	int siz ;
	
	void init(void) { siz = 0 ; creat() ; }
	
	int creat(void)
	{
		node &now = mem[siz] ;
		++siz ;
		now.deg = now.end = 0 ;
		for(int i = 0 ; i < 30 ; ++i) now.chi[i] = 0 ;
		return siz - 1 ;
	}
	
	int ins(char s[])
	{
		int p = 0 , r = SIZE_L , i = 0 ;
		for(i = 0 ; s[i] != 0 ; ++i)
		{
			node &now = mem[p] ;
			if(now.chi[s[i] - 'a'] == 0)
				now.chi[s[i] - 'a'] = creat() , ++now.deg , r = std::min(r , i + 1) ;
			p = now.chi[s[i] - 'a'] ;
		}
		if(r == SIZE_L) r = i ;
		return r ;
	}
} tri ;

FILE *out ;

int T , n ;
char str[SIZE_L] ;

void clear(void){}

int main(void)
{
	out = fopen("b.out" , "w") ;
	
	scanf("%d" , &T) ;
	for(int count = 1 ; count <= T ; ++count , clear())
	{
		scanf("%d" , &n) ;
		
		tri.init() ;
		int ans = 0 ;
		for(int i = 1 ; i <= n ; ++i)
		{
			scanf("%s" , str) ;
			int t = tri.ins(str) ;
			//printf("%d %s\n" , t , str) ;
			ans += t ;
		}
		
		fprintf(out , "Case #%d: %d\n" , count , ans) ;
	}
	
	fclose(out) ;
	
	return 0 ;
}


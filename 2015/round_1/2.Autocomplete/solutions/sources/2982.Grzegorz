#include <bits/stdc++.h>
#include <cmath>

using namespace std;

struct Node {
  char a;
  vector<Node*> chs;
};

int findAndInsert(string word, Node* node, int i) {
  if((int)word.length() == i) return i;

  Node* n = nullptr;
  for(int k = 0; k < (int)node->chs.size(); ++k) {
    if(node->chs[k]->a == word[i]) {
      n = node->chs[k];
      break;
    }
  }
  if(n != nullptr) {
    return findAndInsert(word, n, ++i);
  } else {
    // no children
    auto ss = word.substr(i);
    auto prev = node;
    for (int j = 0; j < (int)ss.length(); ++j) {
      Node* nn = new Node;
      nn->a = word[i + j];
      prev->chs.push_back(nn);
      prev = (*(prev->chs.end()-1));
    }
    return i+1;
  }
}

int main() {
  cin.sync_with_stdio(false);
  cout.sync_with_stdio(false);

  int tc; cin >> tc;
  for(int itc = 1; itc <= tc; ++itc) {
    int r, n;
    cin >> n;
    r = 0;
    Node* root = new Node;
    for (int i = 0; i < n; ++i) {
      string s; cin >> s;
      r += findAndInsert(s, root, 0);
    }

    cout << "Case #" << itc <<": " << r << "\n";
  }
}

import java.io.*;

public class B {
    public static long trie_cost (Node root, String s) {
        Node tmp = root;
        long cost = 0;

        for (int i = 0; i < s.length(); i++) {
            int ind = s.charAt(i) - 'a';
            if (!tmp.children[ind].visited) return cost + 1;
            cost ++;
            tmp = tmp.children[ind];
        }
        return cost;
    }

    public static void trie_insert(Node root, String s) {
        Node tmp = root;
        for (int i = 0; i < s.length(); i++) {
            int ind = s.charAt(i) - 'a';
            if (tmp.children[ind] == null) {
                tmp.children[ind] = new Node(false);
                tmp = tmp.children[ind];
            } else {
                tmp = tmp.children[ind];
                tmp.visited = true;
            }
        }
    }

    public static void main (String[] args) throws Exception {
        BufferedReader bin = new BufferedReader(new FileReader("input.in"));
        int n = Integer.parseInt(bin.readLine());
        for (int i = 1; i <= n; i++) {
            long w = Long.parseLong(bin.readLine());
            long t = 0;

            Node root = new Node(true);
            for (int j = 0; j < w; j++) {
                String s = bin.readLine();
                trie_insert(root, s);
                t += trie_cost(root, s);
            }
            System.out.println("Case #" + i + ": " + t);
        }
    }

    static class Node {
        boolean visited;
        Node[] children = new Node[26];
        public Node (boolean visited) {
            for (int i = 0; i < 26; i++) children[i] = null;
            this.visited = visited;
        }
    }
}

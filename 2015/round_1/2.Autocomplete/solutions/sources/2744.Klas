import sys
import bisect

def len_prefix(a,b):
    i = 0
    while i < min(len(a),len(b)) and a[i] == b[i]:
        i += 1
    return i+(1 if i != len(a) else 0)

class D:
    def __init__(self):
        self.d = []
    def add(self, w):
        i = bisect.bisect(self.d, w)
        r = 1
        if i > 0:
            r = max(r, len_prefix(w, self.d[i-1]))
        if i < len(self.d):
            r = max(r, len_prefix(w, self.d[i]))
        self.d.insert(i, w)
        return r


def solve():
    d = D()
    N = int(sys.stdin.readline())
    cnt = 0
    for n in range(N):
        cnt += d.add(sys.stdin.readline()[:-1]) # skip newline
    return cnt

if __name__ == '__main__':
#    print(1)
#    print(100000)
#    for t in range(1, 100001):
#        print("a"*min(t,10))

    T = int(sys.stdin.readline())
    for t in range(T):
        print("Case #{}: {}".format(t+1, solve()))

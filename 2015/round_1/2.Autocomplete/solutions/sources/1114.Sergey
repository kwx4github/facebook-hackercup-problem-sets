#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <unordered_map>
#include <set>
#include <list>
#include <stack>
#include <bitset>
#include <queue>

using namespace std;

char buf[1000001];

class trie_node
{
public:
    char symbol;
    map<char, trie_node*> *children;
    bool isEndOfWord;

    trie_node(char s)
    {
        symbol = s;
        isEndOfWord = false;
        children = new map<char, trie_node*>();
    }

    int add_word(char* word)
    {
        int res = 0;
        map<char, trie_node*>::iterator it;
        trie_node* node = this;
        while (*word != 0)
        {

            if ((it = node->children->find(*word)) == node->children->end())
            {
                it = node->children->insert(make_pair(*word, new trie_node(*word))).first;
                res++;
            }

            word++;
            node = it->second;
        }

        return res;
    }

    ~trie_node()
    {
        delete children;
    }
};

int main()
{
    //freopen("input.txt", "r", stdin);

    int T = 0;
    scanf("%d", &T);
    //T = 100;
    for (int t = 1; t <= T; t++)
    {
        int N = 0;
        int ans = 0;
        scanf("%d", &N);
        //N = 100000;
        trie_node *root = new trie_node(0);
        for (int n = 0; n < N; ++n)
        {
            scanf("%s", buf);
            /*for (int i = 0; i < 10; i++)
            {
                buf[i] = rand() % 26 + 'a';
            }
            buf[10] = 0;*/

            int len = strlen(buf);
            int ec = (len - root->add_word(buf));
            ans += n == 0 ? 1 : (min((int)len, ec + 1));
            //cout << ec << " " << (n == 0 ? 1 : (ec == 0 ? 1 : ec + 1)) << endl;
            // add word to store
        }

        std::map<char, trie_node*>::iterator it;
        queue<trie_node*> q;
       
        q.push(root);
       
        while (!q.empty())
        {
            trie_node* node = q.front();
            for (it = node->children->begin(); it != node->children->end(); ++it)
            {
                q.push(it->second);
            }

            q.pop();
            delete node;
        }

        cout << "Case #" << t << ": " << ans << endl;
    }
}
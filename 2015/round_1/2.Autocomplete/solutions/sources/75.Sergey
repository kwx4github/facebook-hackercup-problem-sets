#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>
 
using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;
 
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;
 
#define mp make_pair
#define pb push_back
#define X first
#define Y second
 
#define dbg(x) { cerr << #x << " = " << x << endl; }
 
// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;
 
#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
 
template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);
 
#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;
 
#define NAME "improvements"

#include <unordered_map>

struct node_t;
typedef node_t * pnode;
struct node_t {
    unordered_map<char, pnode> to;
    bool has_next(char c) const { return to.count(c); }
    pnode next(char c)
    {
        if (to.count(c))
            return to[c];
        return to[c] = new node_t();
    }
};

void add(pnode root, const string &s)
{
    pnode cur = root;
    forn(i, s.size())
        cur = cur->next(s[i]);
}

int ans(pnode root, const string &s)
{
    pnode cur = root;
    forn(i, s.size())
    {
        if (!cur->has_next(s[i]))
            return i + 1;
        cur = cur->next(s[i]);
    }
    return s.size();
}

LL solve()
{
    pnode root = new node_t();
    int n; cin >> n;
    LL res = 0;
    forn(i, n)
    {
        string s; cin >> s;
        res += ans(root, s);
        add(root, s);
    }
    return res;
}
 
int main()
{
    START
    // freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    //freopen("input.txt", "r", stdin); // freopen("output.txt", "w", stdout);
    freopen("autocomplete.txt", "r", stdin); freopen("autocomplete_out.txt", "w", stdout);
 
    ios_base::sync_with_stdio(false);

    int t; cin >> t;
    forn(i, t)
        cout << "Case #" << i + 1 << ": " << solve() << endl;
 
    END
    return 0;
}
/*******************************************
*******************************************/
 
template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
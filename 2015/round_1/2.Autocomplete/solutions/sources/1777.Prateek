#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string>
 
using namespace std;

#define ll long long

typedef struct trie_node trie_node_t;

struct trie_node
{
    ll value;
    trie_node_t *children[(26)];
};
 
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    ll count;
};
 
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        ll i;
 
        pNode->value = 0;
 
        for(i = 0; i < (26); i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
ll insert(trie_t *pTrie, char key[])
{
    ll level;
    ll length = strlen(key);
    ll index;
    trie_node_t *pCrawl;
    ll ans=0,flag=0;
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = (key[level] - 'a');
        if( !pCrawl->children[index] )
        {
            flag=1;
            pCrawl->children[index] = getNode();
        }
        if(!flag)
            ans++;
        pCrawl = pCrawl->children[index];
    }
    if(flag)
        ans++;
    pCrawl->value = pTrie->count;
    //cout << key << " " << ans << endl;
    return ans;
}
int main()
{
    ll t,n,q,i, ans;
    char str[1000001];
    scanf("%lld",&t);
    for(q = 1; q <= t; q++)
    {
        ans=0;
        trie_t myTrie;
        initialize(&myTrie);
        scanf("%lld",&n);
        for(i = 0; i < n; i++)
        {
            scanf("%s",str);
            ans=ans+ insert(&myTrie,str);
        }
        printf("Case #%lld: %lld\n", q, ans);
    }
    return 0;
}
#include <iostream>
#include <cstdio>
#include <algorithm>

struct Node {
    int adj[26];
    int init() {
        std::fill(adj, adj + 26, -1);
    }
    int& operator[](int i) {
        return adj[i];
    }
} trie[1000010];

int nodes;

int search(std::string word) {
    int ptr = 0, rsp = 1;
    for (char c : word) {
        if (trie[ptr][c - 'a'] != -1) {
            ptr = trie[ptr][c - 'a'];
            ++rsp;
        } else {
            return rsp;
        }
    }
    return word.size();
}

void add(std::string word) {
    int ptr = 0;
    for (char c : word) {
        if (trie[ptr][c - 'a'] != -1) {
            ptr = trie[ptr][c - 'a'];
        } else {
            int nxt = nodes++;
            trie[nxt].init();
            trie[ptr][c - 'a'] = nxt;
            ptr = nxt;
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    int T;
    std::cin >> T;
    for (int caso = 1; caso <= T; ++caso) {
        nodes = 1;
        trie[0].init();
        int N;
        std::cin >> N;
        int rsp = 0;
        while (N--) {
            std::string word;
            std::cin >> word;
            rsp += search(word);
            add(word);
        }
        printf("Case #%d: %d\n", caso, rsp);
    }
    return 0;
}

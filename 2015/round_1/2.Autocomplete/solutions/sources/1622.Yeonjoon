#include<iostream>
#include<vector>
#include<string>
#include<queue>
#include<fstream>
using namespace std;

class ListNode {
public:
	char val;
	vector<ListNode*> next;
	ListNode(char v) : val(v) {}
};

void DeleteAll(ListNode* node) {
	int n = node->next.size();
	for (int i = 0; i < n; ++i)
		DeleteAll(node->next[i]);
	node->next.clear();
	delete node;
}

int UpdateTrie(ListNode *head, string &s) {
	ListNode* node = head;
	int res = 1;
	int sPos = 0;
	bool isFound = true;
	while (isFound) {
		isFound = false;
		int n = node->next.size();
		for (int i = 0; i < n; ++i) {
			if (node->next[i]->val == s[sPos]) {
				node = node->next[i];
				isFound = true;
				sPos++;
				if (sPos >= s.size())
					return (int)s.size();
				break;
			}
		}
	}
	
	res = sPos+1;

	// 마저 trie 생성
	while (sPos < s.size()) {
		ListNode *nextNode = new ListNode(s[sPos]);
		node->next.push_back(nextNode);
		sPos++;
		node = node->next.back();
	}

	return res;
}

int testn, n;
string s;

int main()
{
	//ListNode *head = new ListNode('0');
	ifstream in("autocomplete.txt");
	//ifstream in("input.txt");
	ofstream out("output.txt");
	in >> testn;
	for (int test = 1; test <= testn; ++test) {
		//cout << test << endl;
		// init
		//DeleteAll(head);
		//head = new ListNode('0');
		ListNode *head = new ListNode('0');
		// input & process
		int num = 0;
		in >> n;
		for (int i = 0; i < n; ++i) {
			in >> s;
			num += UpdateTrie(head, s);
		}
		// output
		out << "Case #" << test << ": " << num << endl;
	}
	in.close();
	out.close();
	return 0;
}
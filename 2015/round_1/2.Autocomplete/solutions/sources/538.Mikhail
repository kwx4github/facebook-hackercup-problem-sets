import java.io.*;
import java.util.*;

public class B {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	
	static class Node {
		static final int ALPH = 256;
		
		static int decode(char c) {
			int ret = (int)c;
			if (ret < 0 || ret >= ALPH) {
				throw new AssertionError("Wrong character");
			}
			return ret;
		}
		
		Node[] to;

		public Node() {
			to = new Node[ALPH];
		}
		
		int add(int i, String s) {
			if (i == s.length()) {
				return s.length();
			}
			int c = decode(s.charAt(i));
			if (to[c] == null) {
				to[c] = new Node();
				to[c].add(i + 1, s);
				return i + 1;
			} else {
				return to[c].add(i + 1, s);
			}
		}
	}

	void solve() throws IOException {
		int n = nextInt();
		Node root = new Node();
		int ret = 0;
		for (int i = 0; i < n; i++) {
			String s = nextToken();
			int tmp = root.add(0, s);
//			System.err.println(tmp);
			ret += tmp;
		}
		out.println(ret);
	}

	B() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "autocomplete";
			if (taskName.equals("")) {
				throw new AssertionError();
			}
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new B();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
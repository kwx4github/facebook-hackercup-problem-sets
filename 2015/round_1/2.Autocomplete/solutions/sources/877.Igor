import java.io.*;
import java.util.StringTokenizer;

public class Task {

    class Trie {
        private class Node {
            Node[] children = new Node[26];
        }

        private Node root = new Node();

        long add(String s) {
            long res = s.length();
            Node curr = root;
            for (int i = 0; i < s.length(); i++) {
                int c = s.charAt(i) - 'a';
                if (curr.children[c] == null) {
                    curr.children[c] = new Node();
                    res = Math.min(res, i + 1);
                }
                curr = curr.children[c];
            }
            return res;
        }
    }

    public void solve(int testNumber, FastScanner in, PrintWriter out) throws IOException {
        int n = in.nextInt();
        long res = 0;
        Trie trie = new Trie();
        for (int i = 0; i < n; i++)
            res += trie.add(in.next());
        out.format("Case #%d: %d%n", testNumber, res);
    }

    public static void main(String[] args) throws IOException {
        FastScanner in = new FastScanner(new FileInputStream("autocomplete.txt"));
        PrintWriter out = new PrintWriter(new FileOutputStream("output"));
        int t = in.nextInt();
        for (int i = 0; i < t; i++)
            new Task().solve(i + 1, in, out);
        in.close();
        out.close();
    }

    static class FastScanner {
        private StringTokenizer tokenizer;
        private BufferedReader reader;

        public FastScanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line;
                try {
                    line = reader.readLine();
                } catch (IOException e) {
                    return null;
                }
                if (line == null)
                    return null;
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                return null;
            }
            return line;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public void close() {
            try {
                reader.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }
}
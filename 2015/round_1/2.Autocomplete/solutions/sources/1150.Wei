#include <bits/stdc++.h>

using namespace std;

const int maxl = 1000100, maxn = 110000;

char buf[maxl];

bool startswith(const string &a, const string &b) {
	if (a.length() < b.length())
		return 0;
	for (unsigned i = 0; i < b.length(); ++i)
		if (a[i] != b[i])
			return 0;
	return 1;
}

//int get_ans(set<string> &s, const string &x) {
//	string cur;
//	for (unsigned i = 0; i < x.length(); ++i) {
//		cur.append(1, x[i]);
//		auto p = s.lower_bound(cur);
//		if (p == s.end() || !startswith(*p, cur)) {
//			s.insert(x);
//			return i + 1;
//		}
//	}
//	s.insert(x);
//	return x.length();
//}

int get_ans(set<string> &s, const string &x) {
	int l = 0, r = x.length() - 1, m, ans = -1;
	while (l <= r) {
		m = (l + r) / 2;
		string cur = x.substr(0, m + 1);

		auto p = s.lower_bound(cur);
		if (p == s.end() || !startswith(*p, cur)) {
			ans = m;
			r = m - 1;
		} else {
			l = m + 1;
		}
	}

	if (ans == -1) {
		s.insert(x);
		return x.length();
	} else {
		s.insert(x);
		return ans + 1;
	}
}

int main() {

	int Tn;
	scanf("%d", &Tn);
	for (int Tc = 1; Tc <= Tn; ++Tc) {
		set<string> s;
		int n;
		scanf("%d", &n);

		int ans = 0;
		for (int i = 0; i < n; ++i) {
			scanf("%s", buf);
			int tans = get_ans(s, string(buf));
			ans += tans;
			//printf ("%s: %d\n", buf, tans);
		}

		printf("Case #%d: %d\n", Tc, ans);
	}

	return 0;
}

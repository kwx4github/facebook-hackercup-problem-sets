#include <bits/stdc++.h>

#define REP(i,n) for(int i=0;i<(int)(n);i++)
#define ALL(x) (x).begin(),(x).end()

using namespace std;

struct Automaton {
  static const int SIZE = 128;
  struct State {
    int index, next[SIZE], cnt;
    State(int index) : index(index), cnt(0) {
      memset(next, -1, sizeof(next));
    }
  };

  vector<State> pma;

  Automaton() {
    pma.clear();
    pma.push_back(State(0));
  }

  void AddString(const string &str) {
    int t = 0;
    for (int i = 0; i < (int)str.size(); i++) {
      int c = str[i];
      if (pma[t].next[c] == -1) {
        int m = pma.size();
        pma[t].next[c] = m;
        pma.push_back(State(m));
      }
      t = pma[t].next[c];
      pma[t].cnt++;
    }
  }

  int Match(const string &t) {
    int index = 0;
    int n = t.size();
    for (int i = 0; i < n; i++) {
      int c = t[i];
      if (i > 0 && pma[index].cnt == 1) return i;
      index = pma[index].next[c];
    }
    return n;
  }
};

int main() {
  int T, N;
  cin >> T;
  REP(c,T) {
    Automaton aut;
    int res = 0;
    cin >> N;
    REP(i,N) {
      string s;
      cin >> s;
      aut.AddString(s);
      res += aut.Match(s);
    }
    printf("Case #%d: %d\n", c+1, res);
  }
  return 0;
}

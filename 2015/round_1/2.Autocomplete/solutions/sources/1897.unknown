#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
    
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    
    if( pNode )
    {
        int i;
        
        pNode->value = 0;
        
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
    
    return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int t_insert(trie_t *pTrie, char key[])
{
    int level;
    int length = (int)strlen(key);
    int index;
    trie_node_t *pCrawl;
    
    pTrie->count++;
    pCrawl = pTrie->root;
    int cn=0,val=0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            //printf("%c ",index+'a');
            if(val==0)
                val=1;
            if(cn==1){
                val++;
                cn=0;
            }
            
        }
        else {val++;cn=1;}
        pCrawl = pCrawl->children[index];
    }
    
    // mark last node as leaf
    //pCrawl->value = pTrie->count;
    return val;
}

// Returns non zero, if key presents in trie
int search(trie_t *pTrie, char key[])
{
    int level;
    int length = (int)strlen(key);
    int index;
    trie_node_t *pCrawl;
    
    pCrawl = pTrie->root;
    
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        
        if( !pCrawl->children[index] )
        {
            return 0;
        }
        
        pCrawl = pCrawl->children[index];
    }
    
    return (0 != pCrawl && pCrawl->value);
}

// Driver
int main()
{
    // Input keys (use only 'a' through 'z' and lower case)
    int t,k=1;
    FILE *fr=fopen("/Users/akshaykhanna/Downloads/input_B_Downloaded.in","r");
    FILE *fw=fopen("/Users/akshaykhanna/Downloads/output.txt","w");
    fscanf(fr,"%d",&t);
    while(k<=t){
        trie_t trie;
        int n,i=0;
        fscanf(fr,"%d",&n);
        char *a[n];
        initialize(&trie);
        int sum=0;
        while(i<n){
            char s[1000000];
            fscanf(fr,"%s",s);
            a[i]=malloc(strlen(s));
            strcpy(a[i], s);
            int v=t_insert(&trie, a[i]);
            //printf("%d\n",v);
            sum+=v;
            i++;
        }
        fprintf(fw,"Case #%d: %d\n",k,sum);
        k++;
    }
    return 0;
}
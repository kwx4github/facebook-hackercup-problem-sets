#include <cstdio>
#include <vector>
#include <cassert>

using namespace std;

#define N 1000000

struct Node {
  int ch;
  int count;
  int kids[26];

  Node() {
    count = 0;
    for (auto& i : kids) {
      i = 0;
    }
  }
};
vector<Node> trie;

pair<int, bool> Add(int now, int ch) {
  Node& node = trie[now];
  assert(0 <= ch && ch < 26);
  if (node.kids[ch] == 0) {
    trie.emplace_back();
    trie.back().ch = ch;
    node.kids[ch] = trie.size()-1;
    return make_pair(node.kids[ch], true);
  }
  return make_pair(node.kids[ch], false);
}

int main() {
  int t;
  scanf("%d", &t);
  for (int ca = 1; ca <= t; ca++) {
    trie.reserve(N);
    trie.clear();
    trie.resize(2);
    int n;
    scanf("%d\n", &n);
    int ans = 0;
    for (int i = 0; i < n; i++) {
      int now = 1;
      bool new_node;
      int ch;
      int len = 0;
      int k = 0;
      while ((ch = getchar()) != '\n') {
        len++;
        ch -= 'a';
        tie(now, new_node) = Add(now, ch);
        k += !new_node;
      }
      if (k == len) {
        ans += k;
      } else {
        ans += k+1;
      }
    }
    printf("Case #%d: %d\n", ca, ans);
  }
  return 0;
}

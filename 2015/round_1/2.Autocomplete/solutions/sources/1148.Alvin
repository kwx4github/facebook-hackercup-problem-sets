import java.io.*;
import java.util.*;

public class auto{
	
	public static void format(String ans, int num){
		out.println("Case #"+num+": "+ans);
	}
	
	public static BufferedReader x;
	public static PrintWriter out;
	
	public static void main (String[]args)throws IOException{
		x = new BufferedReader(new FileReader("auto.in"));
		out = new PrintWriter(new BufferedWriter(new FileWriter("auto.out")));
		int t=Integer.parseInt(x.readLine());
		for (int a=1; a<=t; a++){
			int tot=0;
			int n=Integer.parseInt(x.readLine());
			Trie dict=new Trie();
			for (int i=0; i<n; i++){//every word
				String cur=x.readLine();
				tot+=dict.prefix(cur);
				dict.add(cur);
			}
			format(Integer.toString(tot),a);
		}
		out.close();
		System.exit(0);
	}
}

class Node{
	char letter;
	boolean end;
	int count;
	LinkedList<Node> childList;
	
	public Node(char c){
		childList=new LinkedList<Node>();
		end=false;
		letter=c;
		count=0;
	}
	public Node subNode(char c){
		if (childList!=null){
			for (Node child: childList){
				if (child.letter==c)return child;
			}
		}
		return null;
	}
}

class Trie{
	public Node root;
	public Trie(){
		root=new Node(' ');
	}
	public void add(String word){
		if (contains(word))return;
		Node cur=root;
		for (char c: word.toCharArray()){
			Node child=cur.subNode(c);//next letter after cur
			if (child==null){//doesn't exist
				cur.childList.add(new Node(c));
				cur=cur.subNode(c);//moves along
			}
			else{cur=child;}//move along
		}
		cur.end=true;
	}
	public boolean contains(String word){
		Node cur=root;
		for (char c:word.toCharArray()){
			if (cur.subNode(c)==null)return false;
			else{cur=cur.subNode(c);}
		}
		if (cur.end)return true;
		return false;
	}
	public int prefix(String word){
		int count=1;
		Node cur=root;
		for (char c:word.toCharArray()){
			if (cur.subNode(c)==null){//doesn't exist
				return count;
			}
			else{
				cur=cur.subNode(c);
				count++;
			}
		}
		return count-1;
	}
}
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <map>
using namespace std;

typedef long long int int64;

const int N = (int)2e6 + 100;

int trie_size;
map<char, int> go[N];
int cnt[N];

void init()
{
	for (int i = 0; i <= trie_size; i++)
	{
		go[i].clear();
		cnt[i] = 0;
	}
	trie_size = 1;
}

void add(int v, const string &str, int pos)
{
	cnt[v]++;

	if (pos == (int)str.length())
		return;

	char next_char = str[pos];
	if (go[v].count(next_char) == 0)
		go[v][next_char] = trie_size++;
	
	add(go[v][next_char], str, pos + 1);
}

int get_ans(int v, const string &str, int pos)
{
	if (cnt[v] == 1 && v != 0)
		return pos;

	if (pos == (int)str.length())
		return pos;

	char next_char = str[pos];

	return get_ans(go[v][next_char], str, pos + 1);
}

int64 solve()
{
	init();

	int64 res = 0;
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		string str;
		cin >> str;
		add(0, str, 0);
		res += get_ans(0, str, 0);
	}

	return res;
}

int main()
{
	freopen("autocomplete.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tests;
	scanf("%d", &tests);
	for (int i = 0; i < tests; i++)
		printf("Case #%d: %lld\n", i + 1, solve());

	return 0;
}

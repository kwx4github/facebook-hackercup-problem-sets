'''Problem 2: Autocomplete
Timo Petmanson
'''
import sys

class Node(dict):
    
    def __init__(self):
        super(dict, self).__init__()
        self.nleaves = 0
        self.isterminal = True # just for assertions

class Tree(object):
    
    def __init__(self):
        self.root = Node()
        self.intree = set()
        
    def add(self, word):
        if word in self.intree:
            return
        self.intree.add(word)
        node = self.root
        for idx, char in enumerate(word):
            if char not in node:
                node[char] = Node()
            node.nleaves += 1
            node = node[char]
        node.nleaves += 1
        node.isterminal = True
        
    def prefix_size(self, word):
        node = self.root
        for idx, char in enumerate(word):
            node = node[char]
            if node.nleaves == 1:
                return idx + 1
        # in case we have to type full word, make sure it is terminal (e.g the insertion was correct)
        assert (node.isterminal)
        return len(word)

def read_int():
    return int(sys.stdin.readline())

def read_word():
    return sys.stdin.readline().strip()

T = read_int()
for case in range(1, T+1):
    #print ('Case {0}'.format(case))
    nwords = read_int()
    tree = Tree()
    total = 0
    for _ in range(nwords):
        word = read_word()
        tree.add(word)
        total += tree.prefix_size(word)
        #print ('{0}: +{1}'.format(word, tree.prefix_size(word)))
    print ('Case #{0}: {1}'.format(case, total))

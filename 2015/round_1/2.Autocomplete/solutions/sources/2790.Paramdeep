#include <bits/stdc++.h>

using namespace std;

#define totalEDGES 26

struct trie_node{
	bool isPrefix;
	trie_node *edge[totalEDGES];
}*root;

trie_node* getNode(){
	trie_node* ret=new trie_node;
	if(ret!=NULL){
		ret->isPrefix=false;
		for(int i=0;i<totalEDGES;i++){
			ret->edge[i]=NULL;
		}
	}
	return ret;
}

int add(string x){
	int len=(int)x.size();
	trie_node* curr=root;
	int extract,ret=0;
	bool add=true;
	for(int i=0;i<len;i++){
		extract=x[i]-'a';
		if(curr->edge[extract]==NULL){
			curr->edge[extract]=getNode();
		}
		curr=curr->edge[extract];
		if(!(curr->isPrefix) && add){
			add=false;
			ret++;
		}
		if(add) ret++;
		curr->isPrefix=true;
	}
	return ret;
}

void destroy_trie(trie_node* curr){
	for(int i=0;i<totalEDGES;i++){
		if(curr->edge[i]==NULL) continue;
		destroy_trie(curr->edge[i]);
	}
	delete curr;
}

int main(int argc, char const *argv[]){

	freopen("C:\\Users\\Toshiba\\Desktop\\autocomplete.txt","r",stdin);
	freopen("C:\\Users\\Toshiba\\Desktop\\output.txt","w",stdout);
		
	int tt,t,n;
	long long ans;
	string s;
	scanf("%d",&tt);

	for(t=0;t<tt;t++){

		ans=0LL;
		
		scanf("%d",&n);
		root=getNode();

		for(int i=0;i<n;i++){
			cin>>s;
			ans+=add(s);
		}

		printf("Case #%d: %lld\n",t+1,ans);

		//destroy_trie(root);

	}

	return 0;
}
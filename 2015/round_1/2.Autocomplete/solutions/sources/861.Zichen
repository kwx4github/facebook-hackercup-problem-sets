#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <cstring>
#include <string>
#include <assert.h>
using namespace std;

typedef pair<int,int> pairii;
typedef long long llong;

#define pb push_back
#define FOR(i,s,n) for (int (i) = (s); (i) < (n); (i)++)
#define FORZ(i,n) FOR((i),0,(n))

class Node {
public:
  Node() { mContent = ' '; mMarker = false; }
  ~Node() {}
  char content() { return mContent; }
  void setContent(char c) { mContent = c; }
  bool wordMarker() { return mMarker; }
  void setWordMarker() { mMarker = true; }
  Node* findChild(char c);
  void appendChild(Node* child) { mChildren.push_back(child); }
  vector<Node*> children() { return mChildren; }
  int numChildren() { return (int)mChildren.size(); }
private:
  char mContent;
  bool mMarker;
  vector<Node*> mChildren;
};

class Trie {
public:
  Trie();
  void addWord(const string& s);
  int searchWord(const string& s);
private:
  Node* root;
};

Node* Node::findChild(char c) {
  FORZ(i,mChildren.size()) {
    Node* tmp = mChildren.at(i);
    if (tmp->content() == c) return tmp;
  }
  return NULL;
}

Trie::Trie() {
  root = new Node();
}

void Trie::addWord(const string& s) {
  Node* curr = root;
  if (s.length() == 0) {
    curr->setWordMarker(); // an empty word
    return;
  }
  FORZ(i,s.length()) {
    Node* child = curr->findChild(s[i]);
    if (child) curr = child;
    else {
      Node* tmp = new Node();
      tmp->setContent(s[i]);
      curr->appendChild(tmp);
      curr = tmp;
    }
    if (i == s.length()-1) curr->setWordMarker();
  }
}

int Trie::searchWord(const string& s) {
  Node* curr = root;
  int res = 1;
  FORZ(i,s.length()) {
    if (curr==NULL) break;
    if (curr->numChildren()>1) res = i+1;
    curr = curr->findChild(s[i]);
  }
  return res;
}

void solve() {
  int n;
  cin >> n;
  Trie* trie = new Trie();
  int res = 0;
  FORZ(i,n) {
    string s;
    cin >> s;
    s.pb('$');
    trie->addWord(s);
    int tmp = trie->searchWord(s);
    assert(tmp > 0);
    res += min((int)s.length()-1,tmp);
  }
  cout << res << "\n";
}

int main() {
#ifdef DEBUG
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
#endif
  
  int t;
  scanf("%d", &t);
  FOR(i,1,t+1) {
    printf("Case #%d: ", i);
    solve();
  }
  
  return 0;
}

// REFERENCE: C++ Tries: http://www.sourcetricks.com/2011/06/c-tries.html#.VLqsAclLwgc

#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

int find_prefix(const string& word, const string& str)
{
	for (int i = 0; i < min(word.size(), str.size()); i++)
	{
		if (word[i] != str[i])
			return i + 1;
	}
	return min(word.size(), str.size() + 1);
}

int main()
{
	int T;
	cin >> T;
	for (int t = 1; t <= T; t++)
	{
		int N;
		cin >> N;

		set<string> prefix;
		int res = 0;
		for (int i = 0; i < N; i++)
		{
			string word;
			cin >> word;
			int prefix_len = 1;

			auto p = prefix.emplace(word).first;
			auto q = p;

			if (begin(prefix) != p)
				prefix_len = max(prefix_len, find_prefix(word, *--p));

			if (end(prefix) != ++q)
				prefix_len = max(prefix_len, find_prefix(word, *q));

			res += prefix_len;
		}

		cout << "Case #" << t << ": " << res << endl;
	}
}








#include <bits/stdc++.h>

using namespace std;

const int MAXSIZE = 20000000;

struct TreeNode {
	int next[26];
};

TreeNode trie[MAXSIZE];
int NextFree;

inline int char_to_int(char c) {
	return c - 'a';
}

int addLetter(char c) {
	fill(trie[NextFree].next, trie[NextFree].next + 26, -1);
	NextFree++;
	return NextFree-1;
}

int addWord(string &s) {
	int ti = 0;
	int len = s.length();
	int res = -1;
	for (int i = 0; i < len; i++) {
		if (trie[ti].next[char_to_int(s[i])] == -1) {
			if (res == -1)
				res = i + 1;
			trie[ti].next[char_to_int(s[i])] = addLetter(s[i]);
		}
		ti = trie[ti].next[char_to_int(s[i])];
	}
	if (res != -1)
		return res;
	else
		return len;
}

int main() {
	freopen("autocomplete.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t;
	scanf("%d", &t);
	for (int case_id = 1; case_id <= t; case_id++) {
		long long ans = 0;
		int word_count;
		scanf("%d", &word_count);
		NextFree = 0;
		addLetter(0);
		while (word_count--) {
			string this_word;
			cin >> this_word;
			int tmp = addWord(this_word);
			ans += tmp;
		}
		cout << "Case #" << case_id << ": " << ans << endl;
	}
}

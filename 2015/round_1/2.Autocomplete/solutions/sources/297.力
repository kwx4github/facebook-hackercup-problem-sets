
// default code for competitive programming
// c2251393 ver 3.141 {{{

// Includes
#include <bits/stdc++.h>

// Defines
#define NAME(x) #x
#define SZ(c) (int)(c).size()
#define ALL(c) (c).begin(), (c).end()
#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define REP(i, s, e) for(int i = (s); i <= (e); i++)
#define REPD(i, s, e) for(int i = (s); i >= (e); i--)
#define DEBUG 1
#define fst first
#define snd second
 
using namespace std;

// Typedefs
typedef double real;
typedef long long ll;
typedef pair<ll, int> pli;
typedef tuple<ll, int> tli;
typedef pair<int, int> pii;
typedef tuple<int, int> tii;
typedef unsigned long long ull;

// Some common const.
const double EPS = -1e8;
const double Pi = acos(-1);
 
// Equal for double
bool inline equ(double a, double b)
{return fabs(a - b) < EPS;}

// }}}
// start ~~QAQ~~

const int MAXN = 100010;
const int MAXL = 2000010;

int tot, go[MAXL][33], root;

inline int newNode()
{
  int res = ++tot;
  fill(go[res], go[res]+33, 0);
  return res;
}

int n;
char in[MAXL];

inline int ins(char *str, int tree)
{
  int res = 0;
  int np = tree;
  for(int i = 0; str[i]; i++)
  {
    int c = str[i]-'a'+1;
    if(go[np][c] == 0) go[np][c] = newNode();
    else res++;
    np = go[np][c];
  }
  return res;
}

int main()
{
  int tc;scanf("%d", &tc);
  for(int _ = 1; _ <= tc; _++)
  {printf("Case #%d: ", _);
    tot = 0;
    root = newNode();
    scanf("%d", &n);
    int ans = 0;
    REP(i, 1, n)
    {
      scanf("%s", in);
      int tmp = strlen(in);
      ans += min(ins(in, root)+1, tmp);
    }
    printf("%d\n", ans);
  }
}

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Jaydeep Maddipati
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "autocomplete.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocomplete.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		solver.solve(1, in, out);
		out.close();
	}
}

class Trie{
    static class Node{
        Node[] child;
        Node(){
            child=new Node[26];
            for(int i=0;i<26;i++)child[i]=null;
        }
    }
    Node root=null;
    Trie(){
        root=new Node();
    }
    void insert(String s){
        Node tmp=root;
        for(int i=0;i<s.length();i++){
            int ind=s.charAt(i)-'a';
            if(tmp.child[ind]==null){
                tmp.child[ind]=new Node();
            }
            tmp=tmp.child[ind];
        }
    }

    int search(String s){
        Node tmp=root;
        for(int depth=0;depth<s.length();depth++){
            int ind=s.charAt(depth)-'a';
            if(tmp.child[ind]==null){
                return 1+depth;
            }
            tmp=tmp.child[ind];
        }
        return s.length();
    }
}

class Autocomplete {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int t=in.nextInt();
        for(int tt=1;tt<=t;tt++){
            Trie trie=new Trie();
            int n=in.nextInt(),ans=0;
            for(int i=0;i<n;i++){
                String s=in.next();
                ans+=trie.search(s);
                trie.insert(s);
            }
            out.printf("Case #%d: ", tt);
            out.println(ans);
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


from bisect import bisect_left

def prefixSame(a, b):
  for i in range(min(len(a), len(b))):
    if a[i] != b[i]:
      return i
  return min(len(a), len(b))

T = int(input())
for test in range(T):
  words = []
  N = int(input())
  count = 0
  for i in range(N):
    # find insertion point
    word = input()
    ins = bisect_left(words, word)
    # look at word before and after for similarity
    sim = 0
    if ins - 1 < len(words) and ins - 1 >= 0:
      sim = max(sim, prefixSame(word, words[ins - 1]))
      #print("compared with ", words[ins - 1])
    if ins < len(words):
      sim = max(sim, prefixSame(word, words[ins]))
      #print("compared with ", words[ins])
    count += min(sim + 1, len(word))
    words.insert(ins, word)
    #print(word, " requires ", min(sim + 1, len(word)))
  print("Case #%d: %d" % (test + 1, count))
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Solution {

    static BufferedReader in;
    static StringTokenizer tok;

    public static void main(String[] args) {
        try {
            in = new BufferedReader(new InputStreamReader(System.in));

            int t_cases = nextInt();
            int n;
            for (int z = 1; z <= t_cases; z++) {
                TrieImp.clearTree();
                n = nextInt();
                String str;
                int total = 0;
                for (int i = 0; i < n; i++) {
                    str = next();
                    int a = TrieImp.getVal(str);
                    //System.out.print(a);
                    total += a;
                }
                System.out.println("Case #" + z + ": " + total);
            }
            in.close();
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    static int nextInt() throws IOException {
        return parseInt(next());
    }

    static long nextLong() throws IOException {
        return parseLong(next());
    }

    static double nextDouble() throws IOException {
        return parseDouble(next());
    }

    static String next() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
            tok = new StringTokenizer(in.readLine());
        }
        return tok.nextToken();
    }
}

class TrieImp {

    private static TrieNode tree;

    private static TrieNode createTree() {
        return (new TrieNode('\0'));
    }

    private static void insertWord(TrieNode root, String word) {
        int offset = 97;
        int l = word.length();
        char[] letters = word.toCharArray();
        TrieNode curNode = root;

        for (int i = 0; i < l; i++) {
            if (curNode.links[letters[i] - offset] == null) {
                curNode.links[letters[i] - offset] = new TrieNode(letters[i]);
            }
            curNode = curNode.links[letters[i] - offset];
        }
        curNode.fullWord = true;
    }

    private static boolean find(TrieNode root, String word) {
        char[] letters = word.toCharArray();
        int l = letters.length;
        int offset = 97;
        TrieNode curNode = root;

        int i;
        for (i = 0; i < l; i++) {
            if (curNode == null) {
                return false;
            }
            curNode = curNode.links[letters[i] - offset];
        }

        if (i == l && curNode == null) {
            return false;
        }

        return curNode == null || curNode.fullWord;
    }

    public static void compile(String[] words) {
        if (tree == null) {
            tree = createTree();
        }
        for (String word : words) {
            insertWord(tree, word);
        }
    }

    public static void compile(String word) {
        if (tree == null) {
            tree = createTree();
        }
        insertWord(tree, word);
    }

    public static boolean isFound(String searchWord) {
        return (find(tree, searchWord));
    }

    public static int getVal(String str) {
        if (tree == null) {
            tree = createTree();
        }
        return val(tree, str);
    }

    private static int val(TrieNode root, String word) {
        char[] letters = word.toCharArray();
        int l = letters.length;
        int offset = 97;
        TrieNode curNode = root;
        int index = l;

        for (int i = 0; i < l; i++) {
            if (curNode.links[letters[i] - offset] == null) {
                if (index == l) {
                    index = i + 1;
                }
                curNode.links[letters[i] - offset] = new TrieNode(letters[i]);
            }
            curNode = curNode.links[letters[i] - offset];
        }
        curNode.fullWord = true;
        return index;
    }

    public static void clearTree() {
        tree = null;
    }
}

class TrieNode {

    char letter;
    TrieNode[] links;
    boolean fullWord;

    TrieNode(char letter) {
        this.letter = letter;
        links = new TrieNode[26];
        this.fullWord = false;
    }
}


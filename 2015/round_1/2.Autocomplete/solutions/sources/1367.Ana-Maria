#include <iostream>
#include <string>

#define STR_SIZE 1000000

using namespace std;

typedef struct node {
  int used;
  struct node *children[26];
} node;

node *prefixTree;

node* createNode() {
  node* nod = new node();
  for(int i = 0; i < 26; i++) {
    nod->children[i] = NULL;
  }
  return nod;
}

int autocomplete(string word) {
  node* crtNode = prefixTree;
  int shouldCount = 1;
  int result = 0;
  int wordLength = word.length();
  for (int i = 0; i < word.length(); i++) {
    int ind = word[i] - 'a';
    if (shouldCount) {
      result++;
    }
    if (crtNode->children[ind] == NULL) {
      crtNode->children[ind] = createNode();
      crtNode->children[ind]->used = 1;
      shouldCount = 0;
    }
    crtNode = crtNode->children[ind];
  }
  return result;
}

int main() {
  int tests, words;
  string word;
  std::cin>>tests;
  for (int i = 0; i < tests; i++) {
    prefixTree = createNode();
    std::cin>>words;
    int total = 0;
    for (int j = 0; j < words; j++) {
      std::cin>>word;
      total += autocomplete(word);
    }
    std::cout<<"Case #"<<i+1<<": "<< total<<std::endl;
  }

  return 0;
}

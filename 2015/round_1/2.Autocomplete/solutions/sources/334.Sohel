#include<cstdio>
#include<iostream>
#include<queue>
#include<stack>
#include<vector>
#include<string>
#include<algorithm>
#include<map>
#include<sstream>
#include<cmath>
#include<cctype>
#include<cassert>
#include<cstring>
#include<cstdlib>

using namespace std;

#define DEBUG 0

class Node {
public:
	char c;
	vector<Node *> children;

	Node() {
		c = 0;
		children.clear();
	}
};

class Trie {
public:
	Trie() {
		root = new Node();
	}
	void addWord(string s) {
		Node *cur = root;
		for (int i = 0; i < s.size(); i++) {
			char c = s[i];
			Node *next = NULL;
			for (int j = 0; j < cur->children.size(); j++) {
				if (cur->children[j]->c == c) {
					next = cur->children[j];
					break;
				}
			}
			if (next == NULL) {
				next = new Node();
				next->c = c;
				cur->children.push_back(next);
				if (DEBUG) cout << "adding: " << c << endl;
			}
			cur = next;
		}
	}

	int matchLen(string s) {
		Node *cur = root;
		for (int i = 0; i < s.size(); i++) {
			char c = s[i];
			Node *next = NULL;
			for (int j = 0; j < cur->children.size(); j++) {
				if (cur->children[j]->c == c) {
					next = cur->children[j];
					if (DEBUG) cout << "matched: " << c << endl;
					break;
				}
			}
			if (next != NULL) cur = next;
			else return i;
		}
		return s.size();
	}
private:
	Node *root;

};

int main() {
	int test, cases = 1;
	cin >> test;
	for (cases = 1; cases <= test; cases++) {
		int n;
		cin >> n;
		Trie *trie = new Trie();
		int res = 0;
		for (int i = 0; i < n; i++) {
			string s; cin >> s;
			int len = trie->matchLen(s);
			if (DEBUG) cout << "Len: " << len << endl;
			if (len < s.size()) {
				res += len + 1;
			} else {
				res += len;
			}
			trie->addWord(s);
		}
		cout << "Case #" << cases << ": " << res << endl;
	}
	return 0;
}

//
//  AppDelegate.m
//  HackerCup2015ObjC
//
//  Created by James Webb on 1/10/15.
//  Copyright (c) 2015 James Webb. All rights reserved.
//

#import "AppDelegate.h"

#define BILLION_7 1000000007

@interface NSString (jw)

-(int)digitAtIndex:(NSUInteger)index;
-(NSString *)stringBySwappingValuesAtIndices:(NSUInteger)index1 and:(NSUInteger)index2;

@end

@implementation NSString (jw)

-(int)digitAtIndex:(NSUInteger)index
{
    return [self substringWithRange:NSMakeRange(index, 1)].intValue;
}

-(NSString *)stringBySwappingValuesAtIndices:(NSUInteger)index1 and:(NSUInteger)index2
{
    NSRange range1 = NSMakeRange(index1, 1);
    NSRange range2 = NSMakeRange(index2, 1);
    
    NSString *digit1 = [self substringWithRange:range1];
    NSString *digit2 = [self substringWithRange:range2];
    
    NSString *result = [self stringByReplacingCharactersInRange:range1 withString:digit2];
    result = [result stringByReplacingCharactersInRange:range2 withString:digit1];
    
    return result;
}

@end

@interface AppDelegate ()



@end

@implementation AppDelegate
{
    NSMutableSet *prefixes;
    NSMutableSet *words;
}

-(void)prep
{
    prefixes = [NSMutableSet set];
    words = [NSMutableSet set];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSArray *lines = [[NSString stringWithContentsOfFile:@"/Users/james/Downloads/autocomplete.txt" encoding:NSUTF8StringEncoding error:nil] componentsSeparatedByString:@"\n"];
    
    int count = [lines[0] intValue];
    
//    [self prep];
    
    unsigned long lineNumber = 1;
    
    for (NSUInteger i=1; i<=count; i++) {
        [self prep];
        printf("%s\n", [self handleCaseWith:lines numbered:i lineNumber:lineNumber].UTF8String);
        lineNumber += [lines[lineNumber] integerValue] + 1;
    }

    return YES;
}

-(NSString *)prefixForWord:(NSString *)word
{
    unsigned long length = 1;
    
    NSString *result = [word substringWithRange:NSMakeRange(0, length)];
    
    while (([prefixes containsObject:result] || [words containsObject:result]) && result.length < word.length) {
        length++;
        result = [word substringWithRange:NSMakeRange(0, length)];
    }
    
    // The instructions don't say what to do in this case, so I'm doing this. Hopefully it's similar to what Facebook did.
    // No, they really don't say. Instead, they say "Then, you write the smallest non-empty prefix of the word necessary for
    // your phone to autocomplete the word. This prefix must either be the whole word, or a prefix which is not a prefix of
    // any other word yet in the dictionary." This does not envision the situation where a whole word collides with a prefix
    // that is already in the dictionary. And this is obviously not an "ok" situation, because the example encodes "hills" as
    // "hil" to avoid colliding with "hi" which is encoded in the the dictionary as "h" - I'm handling it by appending a
    // character appropriate to the situation. And even if there were logic saying that whole words were allowed to collide
    // with keys, but partial words must not collide, the answer for the third test case would STILL not be 11. In conclusion,
    // jeers to the instructions for this problem.
    
    while ([prefixes containsObject:result] || [words containsObject:result])   {
        result = [result stringByAppendingString:@"?"];
    }
    
    [prefixes addObject:result];
    [words addObject:word];
    
    return result;
}

-(NSString *)handleCaseWith:(NSArray *)lines numbered:(NSUInteger)caseIndex lineNumber:(unsigned long)lineNumber
{
    unsigned long count = [lines[lineNumber++] integerValue];
    unsigned long result = 0;
    
    for (unsigned long i=0; i<count; i++) {
        NSString *word = lines[lineNumber + i];
        result += [self prefixForWord:word].length;
    }
    
    return [NSString stringWithFormat:@"Case #%lu: %lu", caseIndex, result];
}

@end

package fb2014_round1;

import java.io.*;
import java.util.StringTokenizer;

public class B {
    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/B-sample.in"), System.out);
        io = new Kattio(new FileInputStream("fb2014_round1/autocomplete.txt"), new FileOutputStream("fb2014_round1/autocomplete.out"));
//        io = new Kattio(new FileInputStream("fb2014_round1/B-large-0.in"), new FileOutputStream("fb2014_round1/B-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new B().solve(io);
        }
        io.close();
    }

    private class Trie {
        public Trie[] next = new Trie[26];
    }

    private void solve(Kattio io) {
        int n = io.getInt();
        Trie root = new Trie();
        int sum = 0;
        for (int i = 0; i < n; i++)
        {
            String s = io.getWord();
            Trie cur = root;
            boolean first = true;
            for (int j = 0; j < s.length(); j++)
            {
                int t = s.charAt(j) - 'a';
                if (cur.next[t] == null) {
                    cur.next[t] = new Trie();
                    if (first) {
                        sum++;
                        first = false;
                    }
                } else {
                    sum++;
                }
                cur = cur.next[t];
            }
        }
        io.println(sum);
    }

    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

#include <set>
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <cstdio>
#include <iterator>

int prefix(const std::string &a, const std::string &b) {
	int c = 0;
	for (int i = 0; i < a.length(); ++i) {
		if (a[i] == b[i]) {
			c++;
		} else break;
	}
	return c;
}

struct Comp {
	bool operator() (const std::string &a, const std::string &b) {
		for (int i = 0; i < a.length(); ++i) {
			if (b.length() <= i) {
				return false;
			} else if (a[i] < b[i]) {
				return true;
			} if (b[i] < a[i]) {
				return false;
			}
		}
		return true;
	}
};

int main() {
	int t;
	scanf("%d", &t);
	for (int i = 0; i < t; ++i) {
		int n;
		int total = 0;
		scanf("%d", &n);
		std::set<std::string> words;
		for (int j = 0; j < n; ++j) {
			std::string buff;
			std::cin >> buff;
			//printf("New word: %s\n", buff.c_str());
			words.insert(buff);
			//printf("Words: ");
			//for (const std::string &s : words) {
			//	printf("%s ", s.c_str());
			//}
			//printf("\n");
			int res = 0;
			std::set<std::string>::iterator iter = std::prev(words.find(buff));
			//printf("First ptr\n");
			if (iter != words.end() && (*iter) != buff) {
				//printf("Found lower to %s: %s\n", buff.c_str(), (*iter).c_str());
				res = std::max(res, prefix(buff, *iter) + 1);
			}
			iter = std::next(words.find(buff));
			//printf("Second ptr\n");
			if (iter != words.end() && (*iter) != buff) {
				//printf("Found higher to %s: %s\n", buff.c_str(), (*iter).c_str());
				res = std::max(res, prefix(buff, *iter) + 1);
			}
			if (res == 0) res = 1;
			res = std::min(res, static_cast<int>(buff.length()));
			//printf("Res: %d\n", res);
			total += res;
			//printf("Inserted\n");
		}
		printf("Case #%d: %d\n", i + 1, total);
	}
}

#include<stdio.h>
#include <stdlib.h>
#include <string.h>
 
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
char key[1000010];
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 
 // Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

int insert(trie_t *pTrie, char key[])
{
    int level;
    int chk,cnt;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
 	chk = 1;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(chk == 1)
          	{  	cnt = level+1;
            	chk =0;
        	}
        }
 
        pCrawl = pCrawl->children[index];
    }
 
 	if(chk == 1)
 	return level;
 	
 	return cnt;
    // mark last node as leaf
    //pCrawl->value = pTrie->count;
}


int main()
{
	int t,tc,n,i,s;
		trie_t trie;
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	

	scanf("%d",&t);
	for(tc=1;tc<=t;tc++)
	{
		s = 0 ;
		initialize(&trie);
		
		scanf("%d",&n);
		for(i=1;i<=n;i++)
		{
			scanf("%s",key);
			s += insert(&trie, key);	
			//printf("s == %d\n",s);		
		}
		
		printf("Case #%d: %d\n",tc,s);
	}
	
return 0;
}

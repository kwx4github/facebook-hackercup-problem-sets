import scala.collection._

object B extends App {

  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  case class Node(c: Char, var leftChild: Node, var next: Node)

  def add(node: Node, w: String, from: Int): Int = {
    //println(w, from, node)
    var sub = node
    var prev = node
    var done = false
    var res = 0
    while (sub != null && !done) {
      if (from == -1 || sub.c == w.charAt(from)) {
        done = true
        if (sub.leftChild == null) {
          if (from + 1 < w.length) sub.leftChild = Node(w.charAt(from + 1), null, null)
          res = from + 2
        }
        if (from + 1 < w.length) {
          val res2 = add(sub.leftChild, w, from + 1)
          if (res == 0) res = res2
        }
      }
      prev = sub
      sub = sub.next
    }
    if (!done) {
      res = from + 1
      if (from < w.length) {
        prev.next = Node(w.charAt(from), null, null)
        if (from < w.length) {
          val res2 = add(prev.next, w, from)
          if (res == 0) res = res2
        }
      }
    }
    if (res == 0) from + 1 else res
  }

  def solve(test: Int): Unit = {

    val Array(n) = readInts(1)
    var sum = 0
    val root = Node(' ', null, null)

    for (l <- 0 until n) {
      val w = readLine
      val x = add(root, w, -1) min w.length
      //println(x)
      sum += x
    }

    println(s"Case #$test: $sum")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/B/B.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/B/B.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

#include <iostream>
#include <string>
#include <algorithm>
#include <set>
#include <vector>

#define MAX_N 100005

using namespace std;

typedef long long lld;
typedef pair<string, int> PA;

int tests, n;
int pos[MAX_N], add;
vector<PA> V;
string tmp;
lld answer;
set<int> S;
set<int>::iterator it;

inline void clear() {
	answer = 0;
	S.clear();
	V.clear();
}

inline int lcp(string &x, string &y) {
	for (int i = 0 ; i < x.length() && i < y.length() ; i ++) {
		if (x[i] != y[i]) return (i + 1);
	}
	if (x.length() < y.length()) return x.length();
	else return y.length() + 1;
}

int main() {
	cin >> tests;
    for (int test = 0 ; test < tests ; test ++) {
    	clear();
    	cin >> n;
    	for (int i = 0 ; i < n ; i ++) {
    		cin >> tmp;
    		V.push_back(PA(tmp, i));
    	}
    	sort(V.begin(), V.end());
    	for (int i = 0 ; i < n ; i ++) {
    		pos[V[i].second] = i;
    	}
    	for (int i = 0 ; i < n ; i ++) {
    		it = S.lower_bound(pos[i]);
    		add = 1;
    		if (it != S.end()) {
    			add = max(add, lcp(V[pos[i]].first, V[*it].first));
    		}
    		if (it != S.begin()) {
    			it --;
    			add = max(add, lcp(V[pos[i]].first, V[*it].first));
    		}
    		answer += add;
    		//printf("XX %d %d\n", i, add);
    		S.insert(pos[i]);
    	}
		printf("Case #%d: %lld\n", test + 1, answer);
    }
    return 0;
}

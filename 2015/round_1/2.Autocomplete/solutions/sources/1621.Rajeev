#include <iostream>
#include <map>
#include <vector>
#include <cstring>
#include <cctype>
#include <cstdio>
#include <climits>
#include <cmath>
#include <sstream>
#include <utility>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstdlib>
#include <set>
#define lld long long int
using namespace std;
lld tCount;

class compressedTrie{
public:
	compressedTrie *child[26];
	string S[26];
	compressedTrie(){
		for(int i=0;i<26;i++){
			child[i]=NULL;
			S[i]="";
		}
	}
	void add(string s, int ind,bool foundPrefix){
		if(s.length()==ind){
			if(!foundPrefix)
			  tCount+=ind;
			return;
		}
		int j=s[ind]-'a';
		if(child[j]==NULL){
			child[j]=new compressedTrie;
			if(!foundPrefix)
				tCount+=ind+1;
			S[j]=s.substr(ind);
			return;
		}
		string s1=S[j];
		int i=ind;
		int k=0;
		while(k<s1.length() && i<s.length()&& s1[k]==s[i]){
			i++;
			k++;
		}
		if(i==s.length()){
			if(!foundPrefix)
				tCount+=s.length();
			return;
		}
		if(k!=s1.length()){
			S[j]=s1.substr(0,k);
			string temp=s1.substr(k);
			compressedTrie *temp1 = new compressedTrie();
			for(int i=0;i<26;i++){
				temp1->child[i]=child[j]->child[i];
				temp1->S[i]=child[j]->S[i];
				child[j]->child[i]=NULL;
			}
			int p=temp[0]-'a';
			child[j]->child[p]=temp1;
			child[j]->S[p]=temp;
		}
		child[j]->add(s,i,foundPrefix);
	}
};

int main(){
	int t,c;
	cin>>t;
	c=t;
	while(t--){
		compressedTrie *root=new compressedTrie();
		int n;
		tCount=0;
		cin>>n;
		for(int i=0;i<n;i++){
			string s;
			cin>>s;
			root->add(s,0,false);
		}
		cout<<"Case #"<<c-t<<": "<<tCount<<endl;
	}
}

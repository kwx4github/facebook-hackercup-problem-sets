// g++ -Wl,-stack_size -Wl,100000000 -O2 homework.cc && ./a.out

#include <assert.h>
#include <stdio.h>

#include <vector>
#include <algorithm>

using namespace std;

#define MAXC 10000010

struct Node {
  int child[27];
  int unique;
};

Node nodes[MAXC];
int last_idx;

char s[MAXC];
int T, N;

void add_to_dictionary(int root, int i) {
  Node &n = nodes[root];
  if (!s[i]) {
    if (n.unique == -1) {
      n.unique = 1;
    } else if (n.unique == 1) {
      n.unique = 0;
    }
    return;
  }
  int c = s[i] - 'a';
  // fprintf(stderr, "goto root = %d, s[%d] = %c, %d %d\n", root, i, s[i], n.child[c], last_idx);
  if (n.child[c] == -1) {
    n.child[c] = last_idx++;
    assert(last_idx < MAXC);
  }
  add_to_dictionary(n.child[c], i + 1);
  if (n.unique != 0) {
    int cnt = 0;
    for (int j = 0; j < 27; j++) {
      if (n.child[j] != -1) {
        cnt++;
        assert(nodes[n.child[j]].unique != -1);
        if (nodes[n.child[j]].unique == 0) cnt++;
      }
    }
    if (cnt > 1) n.unique = 0;
    else if (cnt == 1) n.unique = 1;
    else assert(0);
  }
  // fprintf(stderr, "add root = %d, s[%d] = %c, unique = %d\n", root, i, s[i], n.unique);
}

int min_type(int root, int i) {
  Node &n = nodes[root];
  // fprintf(stderr, "root = %d, s[%d] = %c, unique = %d\n", root, i, s[i], n.unique);
  if (!s[i] || n.unique) return 0;
  int c = s[i] - 'a';
  return 1 + min_type(n.child[c], i + 1);
}

int main() {
  scanf("%d", &T);
  for (int TC = 1; TC <= T; TC++) {
    scanf("%d", &N);
    int cnt = 0;
    memset(nodes, -1, sizeof(nodes));
    last_idx = 1;

    for (int i = 0; i < N; i++) {
      scanf("%s", s);
      int len = strlen(s);
      assert(len < MAXC);
      s[len++] = 'z' + 1;
      s[len] = '\0';
      add_to_dictionary(0, 0);
      s[len - 1] = '\0';
      int c = max(1, min_type(0, 0));
      cnt += c;
    }
    printf("Case #%d: %d\n", TC, cnt);
  }
}

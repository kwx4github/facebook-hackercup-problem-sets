#define _CRT_SECURE_NO_WARNINGS

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include "stdio.h"
using namespace std;

const int MAX = 1000000;
char s[MAX];
struct node
{
	bool fLast;
	node* rgpnodes[27];

	node::node() : fLast(false)
	{
		for (int i = 0; i < 27; ++i) rgpnodes[i] = nullptr;
	}
};

node *pnodeRoot = nullptr;

void solve_case(int tc)
{
	int n;
	cin >> n;
	long long all_ans = 0;

	pnodeRoot = new node();

	for (int i = 0; i < n; ++i)
	{
		scanf("%s", &s[0]);
		const int len = strlen(s);

		node *pnodeCur = pnodeRoot;
		int ans = 0;
		for (int j = 0; j < len; ++j)
		{
			const int inode = s[j] - 'a';
			const node *pnode = pnodeCur->rgpnodes[inode];
			
			if (!pnode)
				{
				if (ans == 0)
					ans = j + 1;
				pnodeCur->rgpnodes[inode] = new node();
				}

			pnodeCur = pnodeCur->rgpnodes[inode];
		}
		if (ans == 0)
			ans = len;
		all_ans += (long long)ans;
	}
	cout << "Case #" << tc << ": ";
	cout << all_ans;
	cout<< endl;
}

void prepare()
{
}


int main()
{

#ifndef __OLIMP__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	prepare();
	for (int tc = 1; tc <= T; tc++)
		solve_case(tc);

	return 0;
}
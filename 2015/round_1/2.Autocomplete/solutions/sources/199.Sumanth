#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
 
using namespace std;
 
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
	int value;
	trie_node_t *children[ALPHABET_SIZE];
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
	trie_node_t *root;
	int count;
};
 
// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
	trie_node_t *pNode = NULL;
 
	pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
	if( pNode )
	{
		int i;
 
		pNode->value = 0;
 
		for(i = 0; i < ALPHABET_SIZE; i++)
		{
			pNode->children[i] = NULL;
		}
	}
 
	return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
	pTrie->root = getNode();
	pTrie->count = 0;
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int insert(trie_t *pTrie, string key)
{
	int level;
	int length = key.size();
	int index;
	trie_node_t *pCrawl;
 	int ans = 0, first = 0;
	pTrie->count++;
	pCrawl = pTrie->root;
 
	for( level = 0; level < length; level++ )
	{
		index = CHAR_TO_INDEX(key[level]);
		if( !pCrawl->children[index] )
		{
			if(first == 0)ans = level + 1	;
			first = 1;
			pCrawl->children[index] = getNode();
		}
 
		pCrawl = pCrawl->children[index];
	}
	if(ans == 0)ans = length;
 
	// mark last node as leaf
	pCrawl->value = pTrie->count;
	//cout << ans << endl;
	return ans;
}
 
// Returns non zero, if key presents in trie
int search(trie_t *pTrie, string key)
{
	int level;
	int length = key.size();
	int index;
	trie_node_t *pCrawl;
 
	pCrawl = pTrie->root;
 
	for( level = 0; level < length; level++ )
	{
		index = CHAR_TO_INDEX(key[level]);
 
		if( !pCrawl->children[index] )
		{
			return 0;
		}
 
		pCrawl = pCrawl->children[index];
	}
 
	return (0 != pCrawl && pCrawl->value);
}
 
// Driver
int main()
{
	int t; cin >> t;
	for (int i = 1; i < t + 1; ++i)
	{
		int n; cin >> n;
		int ans = 0;
		// Input keys (use only 'a' through 'z' and lower case)
		//char keys[][n] = {"the", "a", "there", "answer", "any", "by", "bye", "their"};

		trie_t trie;
	 
		char output[][32] = {"Not present in trie", "Present in trie"};
	 
		initialize(&trie);
	 
		// Construct trie
		for(int j = 0; j < n; j++)
		{
			string s; cin >> s;
			ans += insert(&trie, s);
		}
	 	cout << "Case #" << i << ": " << ans << endl;
		// Search for different keys
		/*
		printf("%s --- %s\n", "the", output[search(&trie, "the")] );
		printf("%s --- %s\n", "these", output[search(&trie, "these")] );
		printf("%s --- %s\n", "their", output[search(&trie, "their")] );
		printf("%s --- %s\n", "thaw", output[search(&trie, "thaw")] );
		*/
	}
	return 0;
}
import java.io.*;
import java.util.*;

public class fb12 {
    public static void main(String[] args) throws Exception {
    	BufferedReader in = new BufferedReader(new FileReader("fb12.in"));
    	PrintStream out = new PrintStream("fb12.out");
    	
		int t = Integer.parseInt(in.readLine());
		for(int i = 0; i < t; i++) {
			int n = Integer.parseInt(in.readLine());
			Node node = new Node();
			int count = 0;
			for(int j = 0; j < n; j++) {
				String str = in.readLine();
				Node temp = node;
				int x = str.hashCode();
				for(int k = 0; k < str.length(); k++) {
					Node temp2 = temp.letters.floor(new Node(str.charAt(k)));
					if(temp2 != null && temp2.val == str.charAt(k)) {
						temp.size++;
						temp = temp2;
					} else {
						temp.size++;
						temp2 = new Node(str.charAt(k));
						temp.letters.add(temp2);
						temp = temp2;
					}
				}
				temp.letters.add(new Node());
				temp.size++;
				temp = node;
				// node.add(str, -1);
				boolean works = true;
				for(int k = 0; k < str.length() && works; k++) {
					count++;
					temp = temp.letters.floor(new Node(str.charAt(k)));
					if(temp != null && temp.size < 2) {
						works = false;
					}
				}
			}
			out.println("Case #" + (i + 1) + ": " + count);
		}
	}

	static class Node implements Comparable<Node> {
		TreeSet<Node> letters;
		char val;
		int ind;
		int size;

		public Node() {
			val = (char) 0;
			size = 0;
			letters = new TreeSet<Node>();
		}

		public Node(char c) {
			val = c;
			size = 0;
			letters = new TreeSet<Node>();
		}

		public Node(String str, int i) {
			if(i == -1) {
				val = 0;
			} else {
				val = str.charAt(i);
			}
			ind = -1;
			letters = new TreeSet<Node>();
			size = 1;
			if(i != str.length() - 1) {
				letters.add(new Node(str, i + 1));
			} else {
				letters.add(new Node((char) 0));
			}
		}

		public void add(String str, int i) {
			size++;
			if(i != str.length() - 1) {
				Node n = letters.floor(new Node(str.charAt(i + 1)));
				if(n != null && n.val == str.charAt(i + 1)) {
					n.add(str, i + 1);
				} else {
					letters.add(new Node(str, i + 1));
				}
			} else {
				letters.add(new Node((char) 0));
			}
		}

		public int compareTo(Node other) {
			return this.val - other.val;
		}
	}
}
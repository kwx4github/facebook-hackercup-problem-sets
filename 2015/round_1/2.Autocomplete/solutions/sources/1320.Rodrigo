#include <bits/stdc++.h>

using namespace std;

typedef struct trie TRIE;

struct trie{
	trie()
	{
		words = 0;
		flag = 0;
	}
	map<char, TRIE> edges;
	int words;
	int flag;
};

TRIE* create_root()
{
	TRIE* ret = (TRIE*) malloc(sizeof(TRIE));
	ret->words = 0;
	ret->flag = 0;
	ret->edges.clear();
	return ret;
}

void add_word(TRIE* root, string& word, int pos)
{
	if (pos > 0)
		root->words++;
	
	if (pos == word.size())
	{
		root->flag = 1;
		return;
	}
	add_word(&(root->edges[word[pos]]), word, pos+1);
}

int count_keypresses(TRIE* root, string& word, int pos)
{
	if (pos == word.size())
		return 0;
	if (root->words == 1)
		return 0;
		
	return 1+count_keypresses(&(root->edges[word[pos]]), word, pos+1);
}

int main()
{
	int T, c = 1;
	int N;
	string word;
	TRIE* root;
	int ans, i;
	int temp;
	
	cin >> T;
	while (c <= T)
	{
		root = create_root();
		cin >> N;
		ans = 0;
		while (N>0)
		{
			cin >> word;
			add_word(root, word, 0);
			root->words = 0;
			
			temp = count_keypresses(root, word, 0);
			ans+=temp;
			N--;
		}
		
		printf("Case #%d: %d\n", c, ans);
		
		
		free(root);
		c++;
	}
	
}

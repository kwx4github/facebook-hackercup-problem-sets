//#pragma comment(linker,"/STACK:16777216") /*16Mb*/
//#pragma comment(linker,"/STACK:33554432") /*32Mb*/
#define _CRT_SECURE_NO_DEPRECATE
#include<sstream>
#include<iostream>
#include<numeric>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<memory>
#include<memory.h>
#include<string>
#include<vector>
#include<cctype>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<complex>
#include<set>
#include<algorithm>

using namespace std;

typedef unsigned long long      ui64;
typedef long long               i64;
typedef	vector<int>             VI;
typedef	vector<bool>            VB;
typedef	vector<VI>              VVI;
typedef	vector<string>          VS;
typedef	pair<int,int>           PII;
typedef map<string,int>         MSI;
typedef set<int>                SI;
typedef set<string>             SS;
typedef complex<double>         CD;
typedef vector< CD >            VCD;
typedef map<int,int>            MII;
typedef	pair<double,double>     PDD;

#define PB                      push_back
#define MP                      make_pair
#define X                       first
#define Y                       second
#define FOR(i, a, b)            for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b)           for(int i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b)             memset(a, b, sizeof(a))
#define SZ(a)                   int((a).size())
#define ALL(a)                  (a).begin(), (a).end()
#define RALL(a)                 (a).rbegin(), (a).rend()
#define INF                     (2000000000)

#ifdef _DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

class Helper {
private:
public:
	Helper() {
	}
} helper;

class Node {
private:
	
public:
	int c;
	map<char, Node*> m;

	Node() {
		c = 0;
	}

	Node(Node& n) {
		c =  n.c;
		m = n.m;
	}
};

class Solution {
private:
	int res;
	Node* Root;
public:
	Solution() {
		res = 0;
		Root = new Node();
	}

	void solve() {
		int n;
		cin >> n;
		FOR(i,0,n) {
			string word;
			cin >> word;
			res += goodAdd(word);
		}
		cout << res;
		cerr << res;
	}

	int goodAdd(string s) {
		Node* tmp = Root;
		tmp->c ++;
		int tres = SZ(s);

		FOR(i,0,SZ(s)) {
			int ch = s[i];
			if(!tmp->m.count(ch)) {
				tmp->m[ch] = new Node();
				tres = min(tres, i + 1);
			}
			tmp = tmp->m[ch];
			tmp->c ++;
		}

		return tres;
	}
};

int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int test;
	scanf("%d",&test);
	FOR(test_id,1,test+1) {
		printf("Case #%d: ", test_id);
		cerr << "case #" << test_id << "\n\t";
		Solution s;
		s.solve();
		printf("\n");
		cerr << ".\n";
	}
	return 0;
}
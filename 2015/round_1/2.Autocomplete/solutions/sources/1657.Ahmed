import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{

	public static void main(String[] args) throws IOException
	{
		Main main = new Main();
		main.begin();
	}

	// IO
	private BufferedReader in;
	private BufferedWriter out;
	private StringBuilder ans;
	private StringTokenizer tok;

	// fields
	private Node rootNode;

	private void begin() throws IOException
	{
		// IO streams
		String inputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\autocomplete_example_input.txt";
		String outputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\out.txt";
		in = new BufferedReader(new FileReader(inputFileName));
		out = new BufferedWriter(new FileWriter(outputFileName));
		ans = new StringBuilder();
		tok = new StringTokenizer("");

		// read input
		int nCases = Integer.parseInt(in.readLine());
		for (int cas = 1; cas <= nCases; cas++)
		{
			System.out.println(cas + "/" + nCases);
			
			// read word by word
			int nWords = Integer.parseInt(in.readLine());
			int answer = 0;
			rootNode = new Node('.');
			for (int i = 0; i < nWords; i++)
			{
				String word = in.readLine().trim();
				addWord(word);
				answer += solve(word);
			}

			// solve
			ans.append("Case #" + cas + ": " + answer + "\n");
		}

		// output
		System.out.print(ans.toString());
		out.write(ans.toString());
		out.close();
	}

	private int solve(String word)
	{
		int answer = 0;

		// traverse till we find a unique node
		Node node = rootNode;
		for (int i = 0; i < word.length(); i++)
		{
			answer++;

			// search in children
			char c = word.charAt(i);
			Node next = null;
			for (Node child : node.next)
				if (child.c == c)
					next = child;

			// if the next node is unique then we had enough
			if (next.unique)
				break;
			else
				node = next;
		}

		return answer;
	}

	private void addWord(String word)
	{
		// traverse char by char
		Node node = rootNode;
		for (int i = 0; i < word.length(); i++)
		{
			// search in children
			char c = word.charAt(i);
			Node next = null;
			for (Node child : node.next)
				if (child.c == c)
					next = child;

			// see found or not
			if (next == null)
			{
				next = new Node(c);
				node.next.add(next);
			} else
				next.unique = false;
			node = next;
		}
	}

}

class Node
{
	char c;
	boolean unique;
	LinkedList<Node> next;

	public Node(char c)
	{
		this.c = c;
		this.unique = true;
		this.next = new LinkedList<>();
	}
}

#include <iostream>
#include <cstdio> 
#include <vector> 
#include <cassert> 
#include <sstream> 
#include <map> 
#include <set> 
#include <climits> 
#include <stack>
#include <queue>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>

using namespace std;

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define INF 1000000000
#define ALL(x) x.begin(),x.end()
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())

typedef pair<int,int> PI;
typedef vector<int> VI;
typedef long long LL;

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
	trie_node_t *children[26];
};

// trie ADT
typedef struct trie trie_t;
struct trie
{
	trie_node_t *root;
};

// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
	trie_node_t *pNode = NULL;
	pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
	if( pNode )
	{
		int i;
		for(i = 0; i < 26; i++)
		{
			pNode->children[i] = NULL;
		}
	}
	return pNode;
}

// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
	pTrie->root = getNode();
}

int ans;

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[])
{
	int level;
	int length = strlen(key);
	int index;
	trie_node_t *pCrawl;
	pCrawl = pTrie->root;
	int f = 0;
	for( level = 0; level < length; level++ )
	{
		index = CHAR_TO_INDEX(key[level]);
		if( !pCrawl->children[index] )
		{
			f=1;
			pCrawl->children[index] = getNode();
		}
		else
		{
			ans++;
		}
		pCrawl = pCrawl->children[index];
	}
	ans+=f;
}

int main(){
	int t;
	cin>>t;
	FOR(cs,1,t+1){
		int n;
		cin>>n;
		ans=0;
		trie_t trie;
		initialize(&trie);
		while(n--){
			string s;
			cin>>s;
			char *c = const_cast<char*>(s.c_str());
			insert(&trie,c);
		}
		cout<<"Case #"<<cs<<": "<<ans<<endl;
	}
	return 0;
}

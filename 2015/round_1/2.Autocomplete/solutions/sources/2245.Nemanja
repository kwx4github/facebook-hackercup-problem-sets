#include<fstream>
#include<iostream>
#include<set>

using namespace std;

ifstream fin;
ofstream fout;

struct Node {
    char letter;
    bool visited;
    set<Node *> letters;
    Node(char _letter) {
        letter = _letter;
        visited = false;
    }
};

Node* findLetter(char letter, Node *leaf) {
    for(set<Node *>::iterator it = leaf->letters.begin(); it != leaf->letters.end(); it++) {
        if((*it)->letter == letter) {
            return *it;
        }
    }
}

bool hasLetter(char letter, Node *leaf) {
    for(set<Node *>::iterator it = leaf->letters.begin(); it != leaf->letters.end(); it++) {
        if((*it)->letter == letter) {
            return true;
        }
    }
    return false;
}

Node *insertLetter(char letter, Node *leaf) {
    Node *new_leaf = new Node(letter);
    leaf->letters.insert(new_leaf);
    return new_leaf;
}

void insertWord(string word, Node *leaf) {
    for(int i = 0; i < word.length(); i++) {
        if(hasLetter(word[i], leaf)) {
            leaf->visited = true;
            leaf = findLetter(word[i], leaf);
        }
        else {
            leaf = insertLetter(word[i], leaf);
        }
    }
}

int count(string word, Node *leaf) {
    for(int i = 0; i < word.length(); i++) {
        leaf = findLetter(word[i], leaf);
        if(leaf->visited == false) {
            return i + 1;
        }
    }
    return word.length();
}

void visit(string word, Node *leaf) {
   for(int i = 0; i < word.length(); i++) {
        leaf = findLetter(word[i], leaf);
        leaf->visited = true;
    }
}

int main() {
    fin.open("input2.txt");
    fout.open("output2.txt");
    int T;
    fin >> T;
    for(int i = 0; i < T; i++) {
        int N, result = 0;
        Node *root = new Node('_');
        fin >> N;
        for(int n = 0; n < N; n++) {
            string word;
            int c;
            fin >> word;
            insertWord(word, root);
            c = count(word, root);
            visit(word, root);
            //c = count(word, root);
            result += c;
            //cout << c << endl;;
        }
        fout << "Case #" << i + 1 << ": " << result << endl;
    }

    fin.close();
    fout.close();

    return 0;
}


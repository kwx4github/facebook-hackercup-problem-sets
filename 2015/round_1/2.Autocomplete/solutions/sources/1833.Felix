#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct n* pn;
typedef struct n {
  char *i, *f;
  pn e, d, b;
} sn;

pn nn(char *s){
  pn n = (pn) malloc(sizeof(sn));

  n->i = s;
  n->f = s+strlen(s);
  n->e = n->d = n->b = NULL;

  return n;
}

pn ins(pn n, char* s){
  if(n == NULL)
    return nn(s);

  if(*s < *(n->i)){
    n->e = ins(n->e, s);
    return n;
  }
  if(*s > *(n->i)){
    n->d = ins(n->d, s);
    return n;
  }

  char *a = n->i;
  while(a != n->f && *a == *s)
    a++, s++;
  if(*a != *s){
    pn z = nn(a);
    z->b = n->b;
    z->f = n->f;

    n->b = z;
    n->f = a-1;

    n->b = ins(n->b, s);
    return n;
  } else {
    s++;
    n->b = ins(n->b, s);
    return n;
  }
}

unsigned type(pn r, char* s){
  unsigned c = 0;
  while(r != NULL) {
    if(*s < *(r->i))
      r = r->e;
    else if(*s > *(r->i))
      r = r->d;
    else {
      if(*s == '\0')
        return c;
      if(r->b == NULL)
        return c+1;

      char* a = r->i;
      while(a != r->f){
        s++;
        c++;
        a++;
      }
      c++;
      s++;
      r = r->b;
    }
  }
}

void clean(pn r){
  if(r == NULL) return;

  clean(r->b);
  clean(r->e);
  clean(r->d);
  free(r);
  return;
}

void pri(pn r){
  if(r == NULL) return;

  char *a = r->i;
  do{
    printf("%c", *a);
    a++;
  }while(a <= r->f);

  printf(" e(");
  pri(r->e);
  printf(") b(");
  pri(r->b);
  printf(") d(");
  pri(r->d);
  printf(")");
}

int main(){
  pn r = NULL;
  unsigned t, n, p, s;
  char c[2000000];
  scanf("%u", &t);

  for(unsigned x=1; x<=t; x++){
    scanf("%u", &n);
    p=0; s=0;
    for(unsigned y=0; y<n; y++){
      scanf("%s", c+p);
      r = ins(r, c+p);
      s += type(r, c+p);
//      printf("%u ", s);

//      pri(r);
//      printf("\n");
      p += strlen(c+p)+1;
    }
    clean(r);
    r = NULL;

    printf("Case #%u: %u\n", x, s);
  }

  return 0;
}

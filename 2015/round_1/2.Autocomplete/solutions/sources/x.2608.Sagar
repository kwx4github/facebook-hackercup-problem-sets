#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <algorithm>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

#define TYPE(m,a) __typeof(a) m = a
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(x.begin(),x.end())
#define PB(x) push_back((x))
#define FORALL(it,v) for(TYPE(it, (v).begin()); it != (v).end(); ++it)
#define PRINT1D(array, max_index) cout<<endl<<#array<<":   "; for(int i=0; i < (max_index); i++) cout<<array[i]<<"  ";
#define PRINT2D(array, maxr, maxc) cout<<endl<<#array<<":   "; for(int i=0; i < (maxr); i++) { for(int j=0;j<(maxc);j++) cout<<array[i][j]<<"  "; if(i!=(maxr) - 1)cout<<endl<<#array<<":   ";}

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef vector<VI> VVI;
typedef vector<VD> VVD;
typedef vector<VS> VVS;
typedef vector<long long> VL;
typedef vector<VL> VLL;
typedef vector<bool> VB;
typedef vector<VB> VBB;
void fileIO(){freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);}
int ans = 0;
int q = 0;
int unFoldMe(vector<string> curr, int pos){
    q++;
    if(curr.size()<=1){
        return curr.size();
    }

    vector< vector<string> > alpha(26, vector<string>(0));
    vector<int> bmap(26, 0);
    for(int i=0;i<curr.size();i++){
        if(curr[i].size()<pos+1){
            continue;
        }
        int xi = (int)(curr[i][pos] - 'a');
        if(bmap[xi] == 0){
            if(pos !=0 && curr[i][pos-1]=='*'){
                curr[i][pos]='*';
            } else {
                ans++;
                curr[i][pos]='*';
            }
            bmap[xi]++;
        } else {
            ans++;
        }
        alpha[xi].PB(curr[i]);
    }

    for(int i=0;i<26;i++){
        if(alpha[i].size()!=0){
            unFoldMe(alpha[i], pos+1);
        }
    }
}

int main()
{
    fileIO();
    int allTests = 0;
    cin>>allTests;

    for(int eachTest = 0; eachTest<allTests; eachTest++){
        int n;
        cin>>n;
        vector<string> words(n);

        for(int i=0;i<n;i++)
            cin>>words[i];
        ans = 0; q=0;
        unFoldMe(words, 0);
        cout<<"Case #"<<(eachTest+1)<<": "<<ans<<endl;
    }
}

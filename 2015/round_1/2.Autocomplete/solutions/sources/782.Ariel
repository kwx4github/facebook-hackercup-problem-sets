#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <stack>
#include <algorithm>
#define MOD 1000000007
#define forn(a, n) for(int a = 0; a<(int) (n); ++a)
#define dforn(a, n) for(int a = (n)-1; a>=0; --a)
#define forall(a, all) for(__typeof(all.begin()) a = all.begin(); a != all.end(); ++a)
#define EPS 0.000000000001
typedef long long tint;
using namespace std;

struct Trie{
	Trie(){ cant=0; }
	int cant;
	map<char, int> hijos;
};

Trie palabras[1000010];
int cp;

int insertar(string c)
{
	int cs=c.size();
	int now=0, ans=cs;
	palabras[now].cant++;
	
	forn(i, cs)
	{
		if(!palabras[now].hijos.count(c[i]))
		{
			ans=min(ans,i+1);
			palabras[now].hijos[c[i]]=cp;
			//palabras[cp].cant=0;
			palabras[cp].hijos.clear();
			cp++;
		}
		
		now=palabras[now].hijos[c[i]];
		//palabras[now].cant++;
	}
	
	return ans;
}

int main()
{
#ifdef ACMTUYO
	freopen("autocomplete.txt","r",stdin);
	freopen("autocomplete.out","w",stdout);
#endif

	int t;
	cin >> t;
	
	
	forn(tc , t)
	{
		cp=1;
		//palabras[0].cant=0;
		palabras[0].hijos.clear();
		
		tint n, ans=0;
		cin >> n;
		string s;
		forn(i, n)
		{
			cin >> s;
			tint asd=insertar(s);
			ans+=asd;
			//cout << s << " " << asd << endl;
			//ans+=insertar(s);
			
		}
		
		cout << "Case #" << tc+1 << ": " << ans << endl;
	}
	
	return 0;
}

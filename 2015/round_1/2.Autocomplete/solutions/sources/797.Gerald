#undef NDEBUG
#ifdef ssu1
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <typeinfo>
#include <limits>

using namespace std;

struct Node {
  int cnt;
  map<char, int> next;
};

vector<Node> t;

int Add(const string& s) {
  static vector<int> path;
  path.clear();

  int v = 0, ans = 0, unique = false;

  for (char c : s) {
    if (t[v].next.count(c) == 0) {
      t.push_back({0, map<char, int>()});
      int id = t.size() - 1;
      t[v].next[c] = id;
    }
    v = t[v].next[c];
    t[v].cnt++;
    if (t[v].cnt > 1)
      ans++;
    else
      unique = true;
  }
  if (unique)
    ans++;
  return ans;
}

void SolveTest(int test_number) {
  printf("Case #%d: ", test_number);

  t.clear();
  t.push_back({0, map<char, int>()});
  int n;
  cin >> n;
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    string s;
    cin >> s;
    ans += Add(s);
  }
  cout << ans << endl; 
  fprintf(stderr, "Case %d time: %f\n", test_number, ((double)clock()) / CLOCKS_PER_SEC);
}

int main() {
#ifdef ssu1
  assert(freopen("input.txt", "r", stdin));
#endif

  int test_number;
  cin >> test_number;
  for (int i = 1; i <= test_number; ++i) {
    SolveTest(i);
  }

#ifdef ssu1
  cerr << "\nTime = " << ((double)clock()) / CLOCKS_PER_SEC << endl;
#endif    
  return 0;
}


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.StringTokenizer;


class Node{
	String value;
	Node root;
	HashMap<String, Node> children = new HashMap<String, Node>();
	Node(String v, Node root){
		this.value = v;
		this.root = root;
	}
	Node(String v){
		this.value = v;
	}
}

public class autocomplete { // TO CHANGE: this class name
	public static String toChar(char a){
		return Character.toString(a);
	}
	public static long modulo = 1000000007;
	public static void solve() throws IOException {
		int t = nextInt();
		for(int k = 0; k<t; k++){
			int n = nextInt();
			int totalChar = 0;
			String[] words = new String[n];
			for(int i =0; i<n; i++){
				words[i] = nextString();
			}
			Node root = new Node("");
			for(int i =0; i<n; i++){
				String cur = words[i];
				boolean first = true;
				Node rootPoint = root;
				for(int j =0; j<cur.length(); j++){
					String curChar = toChar(cur.charAt(j));
					if(root.children.get(curChar)!=null){
						root = root.children.get(curChar);
					}else{
						if(first)totalChar+=(j+1);
						root.children.put(curChar, new Node(curChar, root));
						root = root.children.get(curChar);
						first = false;
					}
					if(j==cur.length()-1&&first){
						totalChar+=(j+1);
					}
				}
				root = rootPoint;
			}
			println("Case #" + (k + 1) + ": " + totalChar);
		}
	}

	public static void main(String[] args) throws Exception { // file loading
																// from
																// Kapparate
		in = new BufferedReader(new FileReader("autocomplete.in"));
//		 in = new BufferedReader(new InputStreamReader(System.in));
		// TO CHANGE: the file input output name is not always assign.in /
		// assign.out
		out = new PrintWriter(
				new BufferedWriter(new FileWriter("autocomplete.txt")));
		solve();
		in.close();
		out.close();
	}

	public static StringTokenizer tokenizer;
	public static BufferedReader in;
	public static PrintWriter out;

	public static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(in.readLine());
		}
		return tokenizer.nextToken();
	}

	public static String nextString() throws IOException {
		return nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public static void println(int x) {
		System.out.println(x);
		out.println(x);
	}

	public static void println(String x) {
		System.out.println(x);
		out.println(x);
	}

	public static void print(String x) {
		System.out.print(x);
		out.print(x);
	}

	public static void print(int x) {
		System.out.print(x);
		out.print(x);
	}
}

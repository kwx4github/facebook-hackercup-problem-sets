//Sacch hai mahaz sangharsh hi!
#include <bits/stdc++.h>
#define mod 1000000007
#define ll long long int
#define pb(x) push_back(x)
#define MP(x,y) make_pair(x,y)
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
using namespace std;
typedef struct trie_node trie_node_t;
ll sol;

struct trie_node{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;

struct trie{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void){
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode ){
        int i;
        pNode->value = 0;
        for(i = 0; i < ALPHABET_SIZE; i++){
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}

void initialize(trie_t *pTrie){
    pTrie->root = getNode();
    pTrie->count = 0;
}

void insert(trie_t *pTrie, char key[]){
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
    pTrie->count++;
    pCrawl = pTrie->root;
    bool flag=0;
    for( level = 0; level < length; level++ ){
        index = CHAR_TO_INDEX(key[level]);
        if(flag==0)
            sol++;
        if( !pCrawl->children[index] ){
            pCrawl->children[index] = getNode();
            flag=1;
        }
        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
}

void solve(){
    trie_t trie;
    initialize(&trie);
    int l;
    scanf("%d",&l);
    sol=0;
    char str[1000001];
    for(int i=0;i<l;i++){
        scanf("%s",str);
        insert(&trie,str);
    }
    printf("%lld\n",sol);
}

int main(){
    freopen("autocomplete.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int t;
    scanf("%d",&t);
    int cnt=1;
    while(t--){
        printf("Case #%d: ",cnt);
        solve();
        cnt++;
    }
}


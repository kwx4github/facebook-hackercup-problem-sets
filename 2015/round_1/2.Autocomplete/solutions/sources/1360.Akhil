#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<iostream>
using namespace std;
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode )
    {
        int i;

        pNode->value = 0;

        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
        pCrawl->value++;
    }
}

// Returns non zero, if key presents in trie
int search(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        //cout << pCrawl->value << endl;
        pCrawl = pCrawl->children[index];
        if(pCrawl->value == 1)
        {
            return level + 1;
        }

    }
    return length;
}
int main()
{
    freopen("autocomplete.txt", "r", stdin);
    freopen("akhil_auto.txt", "w", stdout);
    trie_t mera_trie;
    int t,ind;
    cin >> t;
    for(ind = 1; ind<= t; ind++)
    {
        int n,ct=0,i;
        scanf("%d", &n);
        char temp[1000000];
        initialize(&mera_trie);

        for(i=0; i<n; i++)
        {
            cin >> temp;
            insert(&mera_trie, temp);
            ct+=search(&mera_trie, temp);
        }

        printf("Case #%d: %d\n", ind, ct);
    }
    return 0;
}

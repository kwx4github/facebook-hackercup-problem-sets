#!/usr/bin/ruby
# require 'matrix'
# require 'set'

class Object
  def in?(container)
    container.include?(self)
  end
end

class Array
  def clip(n = 1)
    take size - n
  end

  def sum
    inject(:+)
  end
end

class IO
  def rl
    readline.chomp
  end

  def read_integer
    rl.to_i
  end

  def read_float
    rl.to_f
  end

  def read_array
    rl.split ' '
  end

  def read_array_integers
    read_array.map(&:to_i)
  end

  def read_array_floats
    read_array.map(&:to_f)
  end

  def read_matrix(rows, cols)
    lines = 1.upto(rows).map do |i|
      read_array_integers
    end

    Matrix.build(rows, cols) do |row, col|
      lines[row][col]
    end
  end
end

class FacebookHackerCupSolver
  def solve
    1.upto(STDIN.read_integer) do |test|
      STDOUT << "Case ##{test}: #{solve_test}\n"
    end

  end

  def solve_test
    n = STDIN.read_integer

    @root = { count: 0, children: {} }

    1.upto(n).map do
      word = STDIN.rl

      add_word(word)
      get_min_chars(word)
    end.reduce(:+)
  end

  def add_word(word)
    pointer = [@root]
    word.chars.each_with_index do |char, idx|
      pointer[idx][:count] += 1
      pointer[idx][:children][char] ||= { count: 0, children: {} }
      pointer[idx + 1] = pointer[idx][:children][char]
    end
    pointer.last[:count] += 1
  end

  def get_min_chars(word)
    pointer = [@root]
    chars = 0
    word.chars.each_with_index do |char, idx|
      chars += 1

      if pointer[idx][:children][char][:count] > 1
        pointer[idx + 1] = pointer[idx][:children][char]
      else
        break
      end
    end

    [chars, word.size].min
  end
end

FacebookHackerCupSolver.new.solve

#include <bits/stdc++.h>

#define INF 1000000010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/


struct pfN {
    int coun;
    pfN* pnt[27];
    pfN () {
        coun = 0;
        FO (i,0,27) pnt[i] = 0;
    }
};

int T, N, cL, ans;
char cW[1000005];

pfN rt;
pfN* cPfN;

stack <pfN*> popStack;    
    
void reset() {
    ans = 0;
    //REWRITE DELETE WITH A STACK
    popStack.push (&rt);
    while (!popStack.empty()) {
        pfN* cPop = popStack.top();
        popStack.pop();
        FO (i,0,27) if (cPop->pnt[i] != 0) popStack.push (cPop->pnt[i]);
        if (cPop != &rt) delete (cPop);
    }
    FO (i,0,27) rt.pnt[i] = 0;
    rt.coun = 50;
    return;
}

int main() {
    freopen ("q2.in", "r", stdin);
    freopen ("q2.out", "w", stdout);
    scanf ("%d ", &T);
    rt.coun = 50;
    FO (_z,0,T) {
        reset();
        printf ("Case #%d: ", _z+1);
        scanf ("%d ", &N);
        FO (i,0,N) {
            scanf (" %s ", cW);
            cL = strlen (cW);
            cPfN = &rt;
            int preLen = cL;
            int cPLen = 0;
            FO (p,0,cL) {
                cW[p] -= 'a';
                if (cPfN->pnt[cW[p]] == 0) {
                    pfN* newPfN = new (pfN);
                    cPfN->pnt[cW[p]] = newPfN;
                }
                cPfN = cPfN->pnt[cW[p]];
                cPfN->coun++;
                cPLen++;
                if (cPfN->coun == 1) {
                    preLen = min (preLen, cPLen);
                }
            }
            ans += preLen;
        }
        printf ("%d\n", ans);
    }
    return 0;
}

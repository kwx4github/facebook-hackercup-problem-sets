//#include<iostream>
#include<string>
#include<fstream>
#include<cstdio>
using namespace std;

struct node
{
	int value;
	node *children[26];
	bool prefix;
	node()
	{
		prefix=false;
		for(int i=0;i<26;i++)
		children[i]=NULL;
		value=0;
	}
};

struct trie
{
	node *root;
	int value;
	trie()
	{
		root=new node();
	}
};

int insert(trie *tree,string s)
{
	int rt=0;
	node *current=tree->root;	
	int l=s.length();
	for(int i=0;i<l;i++)
	{
		int x=(s[i])-'a';
		if(!current->children[x])
		{
			node *newnode=new node();
			current->children[x]=newnode;
			newnode->value=current->value+1;
			if(rt==0)
			rt=newnode->value;
		}
		current=current->children[x];
	}
	if(rt!=0)
	return rt;
	else
	return l;	
}

int main()
{
	int t;
	
	ofstream cout;
  	ifstream cin;
  	cout.open ("autocomplete_output.txt");
  	cin.open("autocomplete.txt");
  	cin>>t;
	for(int x=1;x<=t;x++)
	{
		int n;
		cin>>n;
		int ans=0;
		string str;
		trie *t=new trie();
		while(n--)
		{
			cin>>str;
			ans=ans+insert(t,str);
		}
		cout<<"Case #"<<x<<": "<<ans<<endl;
	}
	return 0;
}

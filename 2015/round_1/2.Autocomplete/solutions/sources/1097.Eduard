#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <map>

using namespace std;

ifstream in("B.in");
ofstream out("B.out");

const int NUM_LETTERS = 26;

struct vertex
{
    vertex()
    {
        fill(next, next + NUM_LETTERS, -1); // -1 if there is no child 
                                            // in the tree with this letter.
        numberOfWords = 0;
        leaf = false;
    }

    int next[NUM_LETTERS];
    int numberOfWords;
    bool leaf;
};

class PrefixTree
{
public:

    PrefixTree()
    {
        vertex root;
        // Root is always node with number 0.
        nodes.push_back(root);
    }
    void Insert(const string& s)
    {
        int currentNode = 0; // Root
        for (int i = 0; i < s.size(); ++i)
        {
            int nextNode = nodes[currentNode].next[s[i] - 'a'];
            if (nextNode != -1)            
                currentNode = nextNode;
            else
            {
                nodes.push_back(vertex());      
                nodes[currentNode].next[s[i] - 'a'] = nodes.size() - 1;
                currentNode = nodes.size() - 1;                
            }

            nodes[currentNode].numberOfWords++;
        }
        nodes[currentNode].leaf = true;
    }

    int AutoComplete(const string& s)
    {
        int currentNode = 0; // Root
        for (int i = 0; i < s.size(); ++i)
        {
            int nextNode = nodes[currentNode].next[s[i] - 'a'];
            
            // If there is exactly one word with this prefix
            if (nodes[nextNode].numberOfWords == 1)
                return i + 1;

            currentNode = nextNode;
        }
        return s.size();
    }

private:
    vector <vertex> nodes;
};

int main()
{
    int test;
    in >> test;
    for (int testNumber = 1; testNumber <= test; ++testNumber) 
    {
        PrefixTree dictionary;
        long long n, answer = 0;
        in >> n;
        for (int i = 0; i < n; ++i)
        {
            string str;
            in >> str;
            dictionary.Insert(str);
            answer += dictionary.AutoComplete(str);
        }
        out << "Case #" << testNumber << ": " << answer << endl;
    }
    return 0;
}
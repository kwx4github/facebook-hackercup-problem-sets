#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>

using namespace std;

vector<string> store;
int N;

struct TreeNode {
    int val;
    TreeNode* M[26];
};

/*void deleteTree(TreeNode* head) {
    if (head == NULL) return;
    for (int i = 0;i < 26;i++) {
        deleteTree((*head).M[i]);
    }
    free(head);
    return;
}*/

void deleteTree(TreeNode* head) {
    stack<TreeNode *> S;
    stack<int> X;
    int i,j,k,n;
    S.push(head);
    X.push(0);
    TreeNode *p,*q;
    while (S.size() > 0) {
        p = S.top();
        n = X.top();
        bool ck = 1;
        for (i = n;i < 26 && ck == 1;i++) {
            if ((*p).M[i] != NULL) {
                X.pop();
                X.push(i + 1);
                S.push((*p).M[i]);
                X.push(0);
                ck = 0;
            }
        }
        if (ck == 1) {
            S.pop();
            X.pop();
            free(p);
        }
    }
    return;
}

long long ins(string s,TreeNode *Head) {
    long long i,j,k,n,m,res;
    char c;
    n = s.size();
    res = n;
    TreeNode *crt;
    crt = Head;
    bool ck = 0;
    for (i = 0;i < n;i++) {
        c = s[i];
        //cout << c << ' ' << ((*crt).M[c - 'a'] == NULL) << endl;
        if ((*crt).M[c - 'a'] == NULL) {
            (*crt).M[c - 'a'] = (struct TreeNode*) malloc(sizeof(struct TreeNode));
            crt = (*crt).M[c - 'a'];
            for (j = 0;j < 26;j++) (*crt).M[j] = NULL;
            (*crt).val = 1;
            if (ck == 0) {
                ck = 1;
                res = i + 1;
            }
        }
        else {
            crt = (*crt).M[c - 'a'];
            (*crt).val++;
        }
    }
    return res;
}

long long solve() {
    long long res = 0;
    int i,j,k;
    TreeNode *Head;
    Head = (struct TreeNode*) malloc(sizeof(struct TreeNode));
    (*Head).val = 0;
    for (i = 0;i < 26;i++) (*Head).M[i] = NULL;
    for (i = 0;i < N;i++) {
        string s = store[i];
        res += ins(s,Head);
    }
    deleteTree(Head);
    return res;
}

int main() {
    clock_t st,ed;
    st = clock();
    ifstream filein;
    ofstream fileout;
    filein.open("autocomplete.txt",ios::in);
    //filein.open("A",ios::in);
    fileout.open("output",ios::out);
    int T;
    filein >> T;
    for (int z1 = 1;z1 <= T;z1++) {
        fileout << "Case #" << z1 << ": ";
        int i,j,k;
        filein >> N;
        store.clear();
        store.resize(N);
        string s;
        for (i = 0;i < N;i++) {
            filein >> s;
            store[i] = s;
        }
        long long res = solve();
        fileout << res << endl;
        cout << z1 << ' ' << res << endl;
    }
    fileout.close();
    ed = clock();
    cout << double(ed - st) / double(CLOCKS_PER_SEC) << endl;
}
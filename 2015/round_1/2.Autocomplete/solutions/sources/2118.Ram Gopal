/*
jai shree ram _/\_
A hacker from NITP
*/

#include<bits/stdc++.h>
using namespace std;

#define mod 1000000007
typedef set<string> ss;
typedef vector<int> vs;
typedef map<int,char> msi;
typedef pair<int,int> pa;
typedef long long int ll;
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((ll)c - (int)'a')
 
typedef struct trie_node trie_node_t;
struct trie_node
{
    ll value;
    trie_node_t *children[ALPHABET_SIZE];
};

typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    ll count;
};
 

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        ll i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

ll insert(trie_t *pTrie, char key[])
{
    ll level;
    ll length = strlen(key);
    ll index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 	ll ret=0;
 	bool flag=1;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
            if(flag)
            {
            	ret++;
            	flag=0;
            }
        }
        else
        ret++;
        pCrawl = pCrawl->children[index];
        pCrawl->value++;
    }
 	return ret;
}

ll ans,t,p=1,n;
char keys[1000005];
int main()
{
	freopen("dso.txt", "r", stdin);
   	freopen("oso.txt", "w", stdout);
    cin>>t;
    while(t--)
    {
    	cin>>n;
    	trie_t trie;
    	initialize(&trie);
    	ans=0;
    	for(int i = 0; i <n; i++)
    	{
    		cin>>keys;
    	    ans+=insert(&trie, keys);
    	}
 		cout<<"Case #"<<p++<<": "<<ans<<"\n";
    }
 
    return 0;
}



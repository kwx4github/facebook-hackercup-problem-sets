import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class B {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    public class Trie {
        Trie[] childs = new Trie[26];
        int cnt = 0;
    }

    public void insertString(Trie root, char[] s) {
        Trie v = root;
        for (char c: s) {
            if (v.childs[c-'a'] == null) {
                v.childs[c-'a'] = new Trie();
            }
            v = v.childs[c-'a'];
            v.cnt++;
        }
    }

    public int compute(Trie root, char[] s) {
        Trie v = root;
        int ans = 0;
        for (char c: s) {
            v = v.childs[c-'a'];
            ans++;
            if (v.cnt == 1) {
                break;
            }
        }
        return ans;
    }

    public void solveCase() throws IOException {
        int N = nextInt();
        Trie root = new Trie();
        int ans = 0;
        for (int i = 0; i < N; i++) {
            String str = reader.readLine();
            insertString(root, str.toCharArray());
            ans += compute(root, str.toCharArray());
        }
        out.print(ans);
    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            out.print("Case #" + t + ": ");
            solveCase();
            out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new B().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

import java.util.*;
import java.util.HashMap;

class trie 
{       
        public trie()
	{
		root = new Node((char)0);      
	}   
   
    	public void insert(String word)  
	{
           
        	int len = word.length();       
        	Node cra = root;
           
        	for( int i = 0; i < len; i++)
        	{
            		HashMap<Character,Node> child = cra.getChild();           
            		char ch = word.charAt(i);
               
            		if( child.containsKey(ch))
                		cra = child.get(ch);
            		else   
            		{             
                		Node tmp = new Node(ch);
                		child.put( ch, tmp );
                		cra = tmp;
            		}
        	}
              	cra.setIsEnd(true);
    	}
       
    	public String getMatchingPrefix(String ip)  
	{
        	String res = ""; 
        	int length = ip.length();        
           
        	Node cra = root;  
          
        	int i, prevMatch = 0;
        	for( i = 0 ; i< length; i++ )
        	{   
            		char ch = ip.charAt(i);   
            		HashMap<Character,Node> child = cra.getChild();                       
             
            		if( child.containsKey(ch) )
            		{
               			res += ch;          
               			cra = child.get(ch); 
                 
               			if( cra.isEnd() )
                    			prevMatch = i+1;
            		}           
            		else  
				break;
        	}
            	return res;
    	}
       
    	private Node root;     
}
   
class Node 
{          
	public Node(char c)  
    	{
        	val = c;
        	child = new HashMap<>();
        	bIsEnd = false;
    	}   
    	public HashMap<Character,Node> getChild() 
    	{   
		return child;  
	}   
    	public char getVal()                   
	{   
		return val;     
	}   
   	public void setIsEnd(boolean val) 
        {   
		bIsEnd = val;     
	}   
    	public boolean isEnd() 
	{  
		 return bIsEnd;    
	}
       
    	private char val;   
    	private HashMap<Character,Node> child;
    	private boolean bIsEnd; 
}
   
class autocomplete 
{
	public static void main(String[] args) 
   	{
        	int t,ans=0,i,j;
        	Scanner scanner = new Scanner(System.in);
        	t=scanner.nextInt();
        	for(i=0; i<t; i++)
        	{

            		trie tr = new trie();
            		int n;
            		ans=0;
            		n=scanner.nextInt();
            		scanner.nextLine();
            		for(j=0;j<n;j++)
            		{
                		String s = scanner.nextLine();
                		String r = tr.getMatchingPrefix(s);
                		int l = r.length();
                		if(l==0)
                    			ans++;
                		else if(l==s.length())
                    			ans=ans+l;
                		else 
                    			ans=ans+l+1;
                		tr.insert(s);
            		}
            		System.out.println("Case #"+ (i+1)+": "+ans);
        	}                        
   	}
}



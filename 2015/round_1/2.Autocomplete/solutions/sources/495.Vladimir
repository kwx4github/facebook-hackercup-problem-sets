import java.io.File;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class B {

    private static final String FILE_IN = B.class.getSimpleName() + ".in";
    private static final String FILE_OUT = B.class.getSimpleName() + ".out";

    private final void solveTest(final int testId, final Scanner in, final PrintWriter out) throws Exception {
        int n = in.nextInt();
        Bor root = new Bor();
        int result = 0;
        for (int i = 0; i < n; ++i) {
            String s = in.next();
            Bor node = root;
            result += s.length();
            boolean computed = false;
            for (int j = 0; j < s.length(); ++j) {
                final int nextC = s.charAt(j) - 'a';
                if (node.children[nextC] == null) {
                    node.children[nextC] = new Bor();
                    if (!computed) {
                        result -= s.length() - (j + 1);
                        computed = true;
                    }
                }
                node = node.children[nextC];
            }
        }

        out.printf("Case #%d: %d%n", testId, result);
    }

    private static final class Bor {
        Bor[] children = new Bor[26];
    }

    private final void preProcess() throws Exception {
    }

    private final void solve(final Scanner in, final PrintWriter out) throws Exception {
        preProcess();
        for (int testId = 1, testCount = in.nextInt(); testId <= testCount; ++testId) {
            solveTest(testId, in, out);
        }
    }

    public static void main(String[] _args) {
        final String[] args = _args;
        Thread th = new Thread(null, new Runnable() {
            @Override
            public void run() {
                runMain(args);
            }
        }, "test", 16 << 20);
        th.setPriority(Thread.MAX_PRIORITY);
        th.start();
        try {
            th.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static final void runMain(String[] args) {
        try {
            final Scanner in = new Scanner(new File(FILE_IN));
            final PrintWriter out = new PrintWriter(new File(FILE_OUT));
            new B().solve(in, out);
            out.close();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

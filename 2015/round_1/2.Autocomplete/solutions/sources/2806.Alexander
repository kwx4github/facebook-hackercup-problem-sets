_end = '_end_'


def make_trie(*words):
    root = dict()
    for word in words:
        current_dict = root
        for letter in word:
            current_dict = current_dict.setdefault(letter, {})
        current_dict = current_dict.setdefault(_end, _end)
    return root


def prefix_in_trie(trie, word):
    current_dict = trie
    for letter in word:
        if letter in current_dict:
            current_dict = current_dict[letter]
        else:
            return False
    else:
        return True


def insert_in_trie(trie, word):
    current_dict = trie
    for letter in word:
        current_dict = current_dict.setdefault(letter, {})
    current_dict = current_dict.setdefault(_end, _end)
    return trie


def solve(words):
    result = 1
    trie = make_trie(words[0])
    for i in range(1, len(words)):
        w = words[i]
        l = len(w)
        for j in range(1, l + 1):
            prefix = w[:j]
            if not prefix_in_trie(trie, prefix):
                result += j
                break
        else:
            result += l
        trie = insert_in_trie(trie, w)
    return result


def main():
    T = int(input())
    for t in range(T):
        N = int(input())
        words = []
        for i in range(N):
            word = input().strip()
            words.append(word)
        print('Case #{}: {}'.format(t + 1, solve(words)))

if __name__ == '__main__':
    main()

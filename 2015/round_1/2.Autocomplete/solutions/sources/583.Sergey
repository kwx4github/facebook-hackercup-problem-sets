#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 1000 * 1001;

int next[nmax][26];
int fin[nmax];
int n;
int cur;

int64 add(const string &s) {
	int now = 0;
	int res = s.size();
	fin[0] ++;
	forn(i, s.size()) {
	 	if (next[now][s[i]-'a'] == -1) {
	 		next[now][s[i]-'a'] = cur;
	 		res = min(res, i + 1);
	 		cur ++;
	 	}
	 	now = next[now][s[i]-'a'];
	 	fin[now] ++;
	}
	return res;
}

int64 calc(int v) {
	int64 res = 0;
	if (fin[v] <= 1) return res;
	for (int i = 0; i < 26; i ++)
		if (next[v][i] != -1)
			res += calc(next[v][i]) + fin[next[v][i]];
	return res;
}

void solve() {
	cur = 1;
	cin >> n;
	int64 res = 0;
	forn(i, n) {
		string s;
		cin >> s;
		res += add(s);
	}

	forn(i, cur) {
		memset(next[i], 255, sizeof next[i]);
		fin[i] = 0;
	}
	cout << res << endl;
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	memset(next, 255, sizeof next);

	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

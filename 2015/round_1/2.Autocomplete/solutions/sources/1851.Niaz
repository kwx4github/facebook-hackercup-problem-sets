#include<iostream>
#include<cstdio>
#include<stack>
#include<vector>
using namespace std;

struct Node
{
    Node *c[26];
    Node()
    {
        for(int i=0;i<26;i++)
        c[i]=NULL;
    }
};

void free(Node *r)
{
    if(r==NULL) return;
    stack<Node *> s;
    s.push(r);
    while(!s.empty())
    {
        r = s.top();
        s.pop();
        for(int i=0;i<26;i++)
        if(r->c[i]!=NULL)
        s.push(r->c[i]);
        delete(r);
    }

}

void add(Node *r,string& st,int ind,int d,bool & found,int & ret)
{
   // cout<<ind<<endl;
   while(1)
   {

        if(ind==st.length())
        {
            if(!found)
            {
                found=true;
                ret=d;
            }
            return;
        }


        char child=st[ind]-'a';
        if(r->c[child]==NULL)
        {
            r->c[child]= new Node();
            if(!found)
            {
                found=true;
                ret=d+1;
            }

        }
        r=r->c[child];
        ind++;
        d++;

    }
}

int main()
{
    cin.sync_with_stdio(false);
    cin.tie(NULL);


    freopen("autocomplete.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    cin>>T;

            string st;
    for(int t=1;t<=T;t++)
    {
        int ans=0;
        int n;
        cin>>n;

        Node * r = new Node();
        for(int i=0;i<n;i++)
        {
            cin>>st;
            bool found = false;
            int ret=0;
            add(r,st,0,0,found,ret);
            ans+=ret;

        }
        free(r);
        cout<<"Case #"<<t<<": "<<ans<<endl;
    }
    return 0;
}

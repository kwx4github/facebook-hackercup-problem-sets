import java.io.*;
import java.util.*;

class Autocomplete {

    static class Trie {
	
	HashMap<Character,Trie> edges;
	boolean word=false;

	public Trie() {

	    edges=new HashMap<Character,Trie>();
	}

	public static Trie createTrie(String str,int start) {
	    
	    Trie lastTrie=new Trie();
	    lastTrie.word=true;
	    for(int i=str.length()-1;start<=i;--i) {
		Trie tmp=new Trie();
		tmp.edges.put(new Character(str.charAt(i)),lastTrie);
		lastTrie=tmp;
	    }
	    
	    return lastTrie;

	}

	public static int insert(String str,int index,Trie tr,int depth) {
	    
	    if(index>=str.length()) {
		tr.word=true;
		return str.length();
	    }
	    if(!tr.edges.containsKey(new Character(str.charAt(index)))) {
		Trie newTr=createTrie(str,index);
		//		System.out.println("New Tr start:");
		//		Trie.printTrie(newTr);
		//		System.out.println("New Tr end:");

		//		System.out.println("Before inserting trie:");
		//		Trie.printTrie(tr);
		tr.edges.put(new Character(str.charAt(index)),newTr.edges.get(new Character(str.charAt(index))));
		//		System.out.println("After inserting trie:");
		//		Trie.printTrie(tr);

		return depth;
	    }
	    int nextIndex=index+1;
	    return insert(str,nextIndex,tr.edges.get(new Character(str.charAt(index))),depth+1);
	}

	public static void printTrie(Trie tr) {

	    printTrieRec(tr,"");
	}

	public static void printTrieRec(Trie tr,String string) {
	    //	    System.out.println("Current level has keys "+tr.edges.size()+":");
	    //	    for(Character c :tr.edges.keySet())
	    //		System.out.println(c);
	    //	    System.out.println();

	    if(tr.edges.size()==0) {
		  System.out.println("str="+string);
	    }
	    else {
		if(tr.word)
			System.out.println("str="+string);
		    
		for(Character c: tr.edges.keySet()) {
		    printTrieRec(tr.edges.get(c),string+c.charValue());
		 }
	    }
	    
	}

    }

    public static long minStrokesCubic(String words[]) {

	long res=0;
	for(int i=0;i<words.length;++i) {
	    String currentWord=words[i];
	    int max=1;
	    for(int j=0;j<i;++j) {
		String comparisonWord=words[j];
		int k=0;
		while(k<Math.min(currentWord.length(),comparisonWord.length())) {
		    if(currentWord.charAt(k)!=comparisonWord.charAt(k))
			break;
		    ++k;
		}
		k=Math.min(currentWord.length(),k+1);
		if(max<k)
		    max=k;
	     }
	    //	    	    System.out.println("For "+i+" we need "+max);
	    res+=max;
		
	}
	return res;

    }

    public static long minStrokesTrie(String words[]) {

	int res=0;
	Trie tr= new Trie();
	for(int i=0;i<words.length;++i) {
	    //	    System.out.println("Before inserting "+words[i]);
	    //	    Trie.printTrie(tr);

	    //	    System.out.println("After inserting "+words[i]);
	    //	    System.out.println("Inserting "+words[i]);
	    //	    System.out.println("Before insertion");
	    //	    	    Trie.printTrie(tr);
	    int insertionDepth=Trie.insert(words[i],0,tr,0);
	    res+=Math.min(words[i].length(),insertionDepth+1);
	    //	    System.out.println("After insertion");
	    //	    	    Trie.printTrie(tr);
	    //	    	    System.out.println("Inserted at depth "+res);
	}

	return res;
    }

    public static void main(String[] args) throws Exception {

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	int T=Integer.parseInt(br.readLine());

	for(int i=0;i<T;++i) {

	    int N=Integer.parseInt(br.readLine());
	    String words[]=new String[N];
	    for(int j=0;j<N;++j)
		words[j]=br.readLine();
	    
	    //	    long res=minStrokesCubic(words);
	    long res=minStrokesTrie(words);
	    System.out.println("Case #"+(i+1)+": "+res);

	}

    }


}

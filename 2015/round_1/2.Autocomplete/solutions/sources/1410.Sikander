// AUTHOR : SIKANDER MAHAN
// sikander_nsit
// PLAGIARISM IS BAD

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string.h>

#define tr(type,c,it) for(type::iterator it=c.begin();it!=c.end();++it)
#define all(c) c.begin(),c.end()
#define mod 1000000007
#define itor(c) c::iterator
#define ll long long
#define vi vector<int>
#define vs vector<string>
#define si set<int>
#define msi multiset<int>
#define ii pair<int,int>
#define sii set<ii>
#define vii vector<ii>
#define vvi vector<vi>
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

struct trie
{
    int cnt;
    trie *children[27];
};

trie *getnode()
{
    trie *node=new trie;
    node->cnt=0;
    for(int i=0;i<27;++i)
    {
        node->children[i]=NULL;
    }
    return node;
}

void add(trie *root,char str[])
{
    int level=0;
    int len=strlen(str);
    trie *node=root;
    for(level=0;level<len;++level)
    {
        if(node->children[str[level]-97]==NULL)
        {
            node->children[str[level]-97]=getnode();
            node->cnt++;
        }
        node=node->children[str[level]-97];
    }
    node->children[26]=getnode();
    node->cnt++;
}

int query(trie *root,char str[])
{
    int level=0;
    int len=strlen(str);
    trie *node=root;
    int ind=0;
    for(level=0;level<len;++level)
    {
        if((node->cnt)>1)
        {
            ind=level;
        }
        node=node->children[str[level]-97];
    }
    if((node->cnt)>1)
    {
        ind=max(ind,level-1);
    }
    return (ind+1);
}

char s[1000002];

int main()
{
    //ios::sync_with_stdio(false);
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int t=0,i=0,j=0,n=0,m=0,k=0,num=0,temp=0,ind=0;
    scanf("%d",&t);
    for(i=0;i<t;++i)
    {
        scanf("%d",&n);
        num=0;
        trie *root=getnode();
        cout<<"Case #"<<i+1<<": ";
        for(j=0;j<n;++j)
        {
            scanf("%s",s);
            add(root,s);
            num+=query(root,s);
        }
        cout<<num;
        cout<<"\n";
    }
    return 0;
}

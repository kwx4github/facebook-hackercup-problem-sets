#include <cstdio>
#include <map>
using namespace std;

struct node
{
	node *parent;
	map<char, node*> next;
	char ch;
	int terms;

	node(node *parent, char ch) {
		this->parent = parent;
		this->ch = ch;
		terms = 0;
	}
};

char w[1100000];

void add(node* root, char *s)
{
	int l = strlen(s);
	node *v = root;
	for (int i = 0; i < l; ++i) {
		char ch = s[i];
		if (v->next.find(ch) == v->next.end()) {
			node *new_node = new node(v, ch);
			v->next[ch] = new_node;
		} 

		v = v->next[ch];
	}
	
	while (v != NULL) {
		v->terms++;
		v = v->parent;
	}
}

int count(node *root, char *s)
{
	node *v = root;
	int l = strlen(s);
	int i = 0;
	while (i < l && v->terms > 1) {
		v = v->next[s[i]];
		i++;
	}

	return i;
}


int main()
{
	int T;
	scanf("%d\n", &T);

	for (int t = 1; t <= T; t++) 
	{
		int n;
		scanf("%d\n", &n);

		node *root = new node(NULL, 0);
		int ans = 1; // First word is always 1
		while (n--) {
			scanf("%s\n", w);

			add(root, w);
			ans += count(root, w);
		}

		printf("Case #%d: %d\n", t, ans);
	}

	return 0;
}
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

public class FB3 {

	static BufferedReader br;

	static PrintWriter out;
	final static String FN = "auto2.txt";
	final static String OFN = "output.txt";

	static class Node {

		Map<Integer, Node> neig;

		public Node() {
			neig = new HashMap<Integer, Node>();
		}
	}

	public static void main(String[] args) {

		try {

			br = new BufferedReader(new InputStreamReader(new FileInputStream(
					new File(FN))));
			out = new PrintWriter(new FileWriter(OFN));

			int t = readInt();
			for (int ind = 0; ind < t; ind++) {
				System.out.println(ind);
				int n = readInt();
				String[] st = new String[n];
				for (int i = 0; i < n; i++) {
					st[i] = readLine();

				}
				int cnt = 0;
				Node root = new Node();
				for (int i = 0; i < n; i++) {

					Node node = root;
					int nv = st[i].length();
					// System.out.println(st[i]+ " "+nv);
					int[] a = new int[nv];

					for (int j = 0; j < nv; j++) {
						a[j] = st[i].charAt(j);
					}
					int cur = 0;
					//System.out.print(' '+st[i] + ' ');
					while (node != null) {
						cnt++;
						//System.out.print(st[i].charAt(cur));
						Node nd = node.neig.get(a[cur]);

						if (nd == null) {
							
							Node c = node;
							for (int j = cur; j < nv; j++) {
								Node nn = new Node();
								c.neig.put(a[cur], nn);
								c = nn;
								node = null;
								cur++;
							}
						} else {
							node = nd;
							cur++;
							if (cur == nv)
								break;
						}
					}

				}
				print(ind, "" + cnt);

			}
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	static public void print(int i, String s) {
		out.println("Case #" + (i + 1) + ": " + s);
	}

	static public String readLine() throws IOException {
		return br.readLine();

	}

	static public String readString() throws IOException {
		return br.readLine();

	}

	static public long readlong() throws IOException {
		return Long.parseLong(br.readLine());
	}

	static public int readInt() throws IOException {
		return Integer.parseInt(br.readLine());
	}

	static public int[] readIntArr() throws IOException {
		String[] str = br.readLine().split(" ");
		int arr[] = new int[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Integer.parseInt(str[i]);
		return arr;
	}

	static public double[] readDoubleArr() throws IOException {
		String[] str = br.readLine().split(" ");
		double arr[] = new double[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Double.parseDouble(str[i]);
		return arr;
	}

	static public long[] readLongArr() throws IOException {
		String[] str = br.readLine().split(" ");
		long arr[] = new long[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Long.parseLong(str[i]);
		return arr;
	}

	static public double readDouble() throws IOException {
		return Double.parseDouble(br.readLine());
	}
}

#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())

struct Node {
	int cnt;
	int child[26];
	Node() { cnt = 0; REP(i, 26) child[i] = -1; }
};

vector<Node> nodes;

int toint(const char &x) {return x - 'a';}
void add(int node, const string &s, int idx) {
	nodes[node].cnt++;
	if (idx >= SZ(s)) return;
	if (nodes[node].child[toint(s[idx])] == -1) {
		nodes.PB(Node());
		nodes[node].child[toint(s[idx])] = SZ(nodes) - 1;
	}
	add(nodes[node].child[toint(s[idx])], s, idx+1);
}

int wow(int node, const string &s, int idx) {
	if (idx >= SZ(s) || nodes[node].cnt == 1) return 0;
	return 1 + wow(nodes[node].child[toint(s[idx])], s, idx + 1);
}

char inp[1000005];
int tc;
void solve() {
	nodes.clear();
	//nodes.reserve(1000000);
	int N;
	scanf("%d", &N);
	int ans = 0;
	string s;
	
	nodes.PB(Node());
	REP(i, N) {
		scanf("%s", inp);
		s = inp;
		add(0, s, 0);
		int currCost = wow(0, s, 0);
		if (currCost == 0) currCost = 1;
		ans += currCost;
	}
	
	printf("Case #%d: %d\n", tc, ans);
}

int main() {
	int T;
	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

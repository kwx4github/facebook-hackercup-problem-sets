#include <bits/stdc++.h>
using namespace std;

#define s(n)            scanf("%d",&n)
#define sl(n)           scanf("%lld",&n)
#define sf(n)           scanf("%lf",&n)
#define ss(n)           scanf("%s",n)
#define pls(x)          cout << x << " "
#define pln(x)          cout << x << "\n"
#define pis(x)          printf("%d ", x)
#define pin(x)          printf("%d\n", x)
#define pnl             printf("\n")
#define dbn             cerr << "\n"
#define dbg(x)          cerr << #x << " : " << x << " "
#define dbs(x)          cerr << x << " "
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define rep(i,n)        FOR(i,0,n-1)
#define foreach(c,v)    for(__typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define mp              make_pair
#define FF              first
#define SS              second
#define pb              push_back
#define fill(a,v)       memset(a,v,sizeof(a))
#define all(x)          x.begin(),x.end()
#define sz(v)           ((int)(v.size()))
#define INF             (int)1e9
#define LINF            (long long)1e18
#define EPS             1e-9
#define INDEX(arr,ind)  (lower_bound(all(arr),ind)-arr.begin())

typedef long long int lli;
typedef pair<int,int> pii;
typedef pair<lli,lli> pll;
typedef vector<int> vi;
typedef vector<lli> vlli;
typedef vector<pii> vii;

const int MAXN = 200015;
const int MOD  = 1000000007;

/*Main code begins now */
const int CHILD = 40;
int totalNode;
struct trie{
	struct node{
		node *child[CHILD];
		int total;
		node(){
			totalNode++;
			total = 0;
			rep(i,CHILD) child[i] = NULL;
		}
		void clear() {
			total = 0;
			rep(i,CHILD) child[i] = NULL;
		}
		~node() {
			rep(i,CHILD) delete child[i];
		}
	};
	node *root;
	void push(node *cur,string &S){
		cur->total++;
		int len = S.length();
		rep(i,len) {
            int ind = (int)(S[i] - 'a');
            if(cur->child[ind] == NULL) {
                cur->child[ind] = new node();
            }
            cur = cur->child[ind];
            cur->total++;
        }
	}
	int query(node *cur,string &S){
		int len = S.length();
		int ret = -1;
		if(cur->total == 1) return 1;
		rep(i,len){
			int ind = (int)(S[i] - 'a');
			cur = cur->child[ind];
			if(cur->total == 1) {
				if(ret == -1) { 
					ret = i+1;
					return ret;
				}
			}
		}
		if(ret == -1) ret = S.length();
		return ret;
	}
public: 
 	trie()	{
 		totalNode = 0;
 		root = new node();
 	}
 	void reset(){
 		totalNode = 0;
 		root = new node();
 	}
 	int insert(string S){
 		push(root,S);
 		int ret = query(root,S);
 		return ret;
 	}
};
int main()
{
	int t,n;
	char buf[1000050];
	s(t);
	lli ans;
	string S;
	rep(z,t){
		s(n);
		trie T;	
		ans = 0;
		rep(i,n){
			scanf("%s",buf);
			S = buf;
			int val =  T.insert(S);
			ans +=val;
		 }
		printf("Case #%d: %lld\n",z+1,ans);
	}
	return 0;
}




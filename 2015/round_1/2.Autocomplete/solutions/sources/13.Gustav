#include <cstdio>
#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

const int MAXMEM = 2000005;

struct Node {
  int cnt;
  Node *c[26];
};

Node mem[MAXMEM];
Node *alloc;
Node *root;

Node *make_node() {
  Node *ret = alloc++;
  ret->cnt = 0;
  memset(ret->c, 0, sizeof ret->c);
  return ret;
}

void init() { 
  alloc = mem;
  root = make_node();
}

int add(char *s) {
  Node *it = root;
  ++it->cnt;

  int ret = strlen(s);
  int pos = 0;

  while (s[pos] != '\0') {
    int i = s[pos] - 'a';

    if (it->c[i] == NULL)
      it->c[i] = make_node();

    it = it->c[i];
    ++it->cnt;
    ++pos;

    if (it->cnt == 1)
      ret = min(ret, pos);
  }

  return ret;
}

const int MAX = 1000005;

char buf[MAX];

int solve() {
  int N;
  scanf("%d", &N);

  init();
  int ret = 0;

  REP(i, N) {
    scanf("%s", buf);
    ret += add(buf);
  }

  return ret;
}

int main(void) 
{
  int T;
  scanf("%d", &T);

  REP(tc, T) 
    printf("Case #%d: %d\n", tc + 1, solve());

  return 0;
}

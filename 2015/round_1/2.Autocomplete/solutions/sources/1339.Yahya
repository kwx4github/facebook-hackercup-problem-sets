#include <bits/stdc++.h>
using namespace std;
vector<vector<int> > graph;
const int MAX_CHAR = 26;
struct trie {
	trie* child[MAX_CHAR];
	bool isLeaf;

	trie() {
		memset(child, 0, sizeof(child));
		isLeaf = 0;
	}

	void insert(char *str) {
        trie* curTrie=this;
        //cout<<"ins"<<str<<endl;
        while(true){
            int cur= *str - 'a';
            if(cur<0){
                //cout<<"is leaf"<<endl;
                curTrie->isLeaf=true;
                break;
            }
            else{
                int cur= *str - 'a';

                //cout<<cur<<" "<<endl;
                if(curTrie->child[cur]==0)
                    curTrie->child[cur] = new trie();
                curTrie=curTrie->child[cur];
            }
            str=str+1;
        }
    }
	int matchingPrefix(char* str,int n){
        int cnt=n;
        trie* curTrie=this;
         while(true){
            int cur= *str - 'a';
            if(cur<0)
                return cnt;
            if(curTrie->child[cur]==0)
                return cnt+1;
            else{
                int cur= *str - 'a';
                curTrie=curTrie->child[cur];
            }
            str=str+1;
            cnt++;
        }
	}
};
int main(){
    ios_base::sync_with_stdio(false);
    ifstream cin("real2.in");
    ofstream cout("myout.out");
    int T;
    cin>>T;
    cerr<<"Nbr of case"<<T<<endl;
    for(int t=1;t<=T;t++){
    cerr<<"t "<<t<<endl;
        //if(t>5) continue;
        int n; cin>>n;
        trie root;
        int res=0;
        for(int i=0;i<n;i++){
            string s; cin>>s;
            char* ch=(char*)s.c_str();
            res+=root.matchingPrefix(ch,0);
            root.insert(ch);

        }
        cout<<"Case #"<<t<<": "<<res<<endl;
    }
}

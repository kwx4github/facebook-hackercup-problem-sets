#include <bits/stdc++.h>
using namespace std;
int lcp(const string &a, const string &b) {
	int shared = 0;
	for (; shared < a.size(); ++shared) {
		if (!(shared < b.size()) || a[shared] != b[shared]) {
			++shared;
			break;
		}
	}
	//cerr << "lcp " << a << " " << b << ": " << shared << endl;
	return shared;
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		cout << "Case #" << t << ": ";
		int N;
		cin >> N;
		int sum = 0;
		set<string> dict;
		while (N--) {
			string word;
			cin >> word;
			int shared = 1; // non-empty
			set<string>::iterator it = dict.insert(word).first;
			if (it != dict.begin()) {
				set<string>::iterator prev(it);
				shared = max(shared, lcp(word, *--prev));
			}
			++it;
			if (it != dict.end())
				shared = max(shared, lcp(word, *it));
			assert(shared <= word.size());
			//cerr << "write " << word.substr(0, shared) << endl;
			sum += shared;
		}
		cout << sum << endl;
	}
}

#include <cstdio>
#include <cstring>
#include <algorithm>

#define MAX_WORD_LEN 1000000
#define LVL_SIZE 'z' - 'a' + 1

struct Trie {
	Trie** nextLevel;

	Trie() {
		nextLevel = new Trie*[LVL_SIZE];
		for (int i = 0; i < LVL_SIZE; ++i) nextLevel[i] = NULL;
	}
	
	void add(char* string, int length, int& lkp) {	
		if (length) {
			if (nextLevel[ string[0] - 'a' ] == NULL) {
				nextLevel[ string[0] - 'a' ] = new Trie;
			} else {
				++lkp;
			}
			nextLevel[ string[0] - 'a']->add(string + 1, length - 1, lkp);
		}
	}

	~Trie() {
		for (int i = 0; i < LVL_SIZE; ++i) {
			if (nextLevel[i] != NULL) delete nextLevel[i];
		}
	}



};


int main() {
	int n;
	char word[MAX_WORD_LEN + 1];

	scanf("%d\n", &n);

	for (int i = 1; i <= n; ++i) {
		int lkpp = 0;
		int m, len, lkp;
		scanf("%d\n", &m);

		if (m == 1) {
			scanf("%s\n", word);
			printf("Case #%d: %d\n", i, 1);
			continue;
		}

		Trie dict;

		for (int j = 0; j < m; ++j) {
			scanf("%s\n", word);
			len = strlen(word);
			lkp = 0;
			dict.add(word, len, lkp);
			lkpp += std::min(len, lkp + 1);
		}

		printf("Case #%d: %d\n", i, lkpp);
	}
}
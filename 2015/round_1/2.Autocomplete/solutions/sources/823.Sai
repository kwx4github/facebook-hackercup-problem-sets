#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<cctype>
#include<cassert>
#include<cstring>
//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<string>
#include<stack>
#include<bitset>
//IOs
#include<iostream>
//algorithm & miscellaneous
#include<algorithm>
#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define sz(v) (int)v.size()
#define _(a, x) memset(a, x, sizeof(a))
#define f(x) __builtin_popcount(x)
int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};

const ll mod = 1000000009ll;

using namespace std;

typedef struct t1
{
	char c;
	int eow;
	int pref;
	struct t1 *child[26]; 
}trie;

void insert(trie *t, string s)
{
	int n = sz(s);

	for(int i=0;i<n;i++)
	{
		if(t->child[s[i]-'a'] == NULL)
		{
			trie *tmp = new trie();
			tmp->c = s[i];
			if(i == n - 1)tmp->eow = 1;
			tmp->pref = 1;
			for(int j=0;j<26;j++)
				tmp->child[j] = NULL;
			t->child[s[i]-'a'] = tmp;
			t = t->child[s[i]-'a'];
		}
		else 
		{
			t = t->child[s[i]-'a'];
			t->c = s[i];
			if(i == n-1)t->eow = 1;
			t->pref += 1;
		}
	}

	return ;
}

int search(trie *t, string s)
{
	int n = sz(s);

	for(int i=0;i<n;i++)
	{
		if(t->child[s[i]-'a']->pref == 1)return i + 1;
		t = t->child[s[i]-'a'];
	}

	return n;
}

trie t1[101];
int main()
{
	int t = GI;

	for(int tt=1;tt<=t;tt++)
	{
		int n = GI, res = 0;
	
		vector<string> v;

		for(int i=0;i<n;i++)
		{
			string s;
			cin>>s;
			v.pb(s);
			insert(&t1[tt], s);
			res += search(&t1[tt], s);
		} 
		
		printf("Case #%d: %d\n",tt, res);
	}

	return 0;
}

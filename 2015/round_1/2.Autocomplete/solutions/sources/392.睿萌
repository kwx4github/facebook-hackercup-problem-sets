#pragma  comment(linker, "/STACK:36777216")
#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <iomanip>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define  lc(x) (x << 1)
#define  rc(x) (lc(x) + 1)
#define  lowbit(x) (x & (-x))
#define  PI    (acos(-1))
#define  lowbit(x) (x & (-x))
#define  LL    long long
#define  DB    double
#define  ULL   unsigned long long
#define  PII   pair<int, int>
#define  PLL   pair<LL, LL>
#define  PB    push_back
#define  MP    make_pair

using namespace std;

const int N = 1e6 + 5;
const int M = N * N * 2;
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const DB  EPS = 1e-8;

struct Trie {
    int son[26];
} tree[N];

int totsz;

int Insert(char *word) {
    int ret = 0, len = strlen(word), p = 0;
    for(int i = 0; i < len; i ++) {
        int t = word[i] - 'a';
        if(tree[p].son[t] == 0) {
            if(ret == 0) ret = i + 1;
            tree[p].son[t] = ++ totsz;
        }
        p = tree[p].son[t];
    }
    if(ret == 0) ret = len;
    return ret;
}

int T, cas, n;

char ch[N];

int main() {
    freopen("autocomplete.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    cin >> T;
    while(T --) {
        for(int i = 0; i <= totsz; i ++) {
            for(int j = 0; j < 26; j ++)
                tree[i].son[j] = 0;
        }
        totsz = 0;
        int tot = 0;
        scanf("%d", &n);
        for(int i = 0; i < n; i ++) {
            scanf(" %s", ch);
            tot += Insert(ch);
        }
        printf("Case #%d: %d\n", ++ cas, tot);
    }
}

import java.io.*;
import java.util.*;
import java.lang.String;

public class Autocomplete
{

	//public static Map hashes = new HashMap<String, int>();

	public static void main(String[] args)
	{
		try
		{
		BufferedReader reader = new BufferedReader(new FileReader("autocomplete.txt"));
		//Scanner sc = new Scanner(System.in);
		//int numCases = sc.nextInt();
		int numCases = Integer.parseInt(reader.readLine());

		for(int i = 1; i <= numCases; i++)
		{
			//int numWords = sc.nextInt();
			int numWords = Integer.parseInt(reader.readLine());
			//Map hashes = new HashMap<Integer, Integer>();
			Trie words = new Trie();
			int len = 0;

			for(int j = 1; j <= numWords; j++)
			{
				//String word = sc.next();
				String word = reader.readLine();
				word = word.toLowerCase();
				//System.out.println("word is " + word);
				//int pos = 0;
				//int hash = 0;
				String hash = "";
				//int hash = computeHash(word.substring(0,pos++));
				boolean found = false;
				//words.addString(word);

				for(int pos = 1; pos <= word.length(); pos++)
				{
					hash = word.substring(0, pos);

					if(!words.isPrefix(hash) && !found)
					{
						found = true;
						len += pos;
						break;
						//System.out.println("Found minimum of length " + pos + ". The word is " + hash);
					}
				}
				
				if(!found)
					len += word.length();

				words.addString(word);

				//System.out.println("minimum word is " + word.substring(0, pos - 1));
				//System.out.println("len is " + len);
				//len += pos;
			}

			System.out.println("Case #" + i + ": " + len);
		}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	public static int computeHash(String word)
	{
		int hash = 7;

		for (int i = 0; i < word.length(); i++)
		{
			hash = hash*31 + word.charAt(i);
		}

		return hash;
	}






public static class Trie
{
    /**
     *  create a new Trie (characters a-z)
     */


    private static final int ALPH = 26;
    private Trie[]  myLinks;
    private boolean myIsWord;
    
    public Trie()
    {
	myLinks = new Trie[ALPH];
	myIsWord = false;
    }

    /**
     * Add a string to the trie
     *
     * @param s The string added to Trie
     */
    
    public void addString(String s)
    {
	Trie t = this;
	int k;
	int limit = s.length();
	for(k=0; k < limit; k++)
	{
	    int index = s.charAt(k) - 'a';
	    if (t.myLinks[index] == null)
	    {
		t.myLinks[index] = new Trie();
	    }
	    t = t.myLinks[index];
	}
	t.myIsWord = true;
    }

    public void addCString(char s[])
    {
	Trie t = this;
	int k=0;
	while (s[k] != '\0')
	{
	    int index = s[k] - 'a';
	    if (t.myLinks[index] == null)
	    {
		t.myLinks[index] = new Trie();
	    }
	    t = t.myLinks[index];
	    k++;
	}
	t.myIsWord = true;
    }

    public boolean isPrefix(String prefix)
    {
    	Trie t = this;

    	for(int i = 0; i < prefix.length(); i++)
    	{
    		int index = prefix.charAt(i) - 'a';
    		if (t.myLinks[index] == null) return false;
    		t = t.myLinks[index];
    	}
    	
    	
    	//boolean found = false;
    	return prefixes(t);
    	//return found;
    }

    public boolean prefixes(Trie t)
    {
    	if(t == null)
    		return false;
    	

    	if(t.myIsWord)
    	{
    		//found = true;
    		return true;
    	}

    	for(int k = 0; k < ALPH; k++)
    	{
    		if(t.myLinks[k] != null)
    		{
    			return prefixes(t.myLinks[k]);
    		}
    	}
    	return false;
    }

    /**
     * determine if a word is in the trie (here or below)
     *
     * @param s The string searched for
     * @return true iff s is in trie (rooted here)
     */
    
    public boolean isWord(String s)
    {
	Trie t = this;
	int k;
	int limit = s.length();
	for(k=0; k < limit; k++)
	{
	    int index = s.charAt(k) - 'a';
	    if (t.myLinks[index] == null) return false;
	    t = t.myLinks[index];
	}
	return t.myIsWord;
    }

    /**
     * @return true iff path from some root to this node is a word
     * 
     */
    
    public boolean isWord()
    {
	return myIsWord;
    }

    /**
     * @param ch Character used to index node (find child)
     * @return Trie formed from this by indexing using ch
     */
    
    Trie childAt(char ch)
    {
	return myLinks[ch-'a'];
    }

}

}
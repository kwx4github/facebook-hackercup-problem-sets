//template
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>                                                                                      
#include <queue>
#include <sstream>
#include <iomanip>
#include <limits>
using namespace std;
//cout << fixed << setprecision(4);
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss; // >>
typedef ostringstream oss; //<<
#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define getc(c) char c;cin >> c
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define putl(n) cout << n << endl
#define ll long long
#define pb push_back
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define mp make_pair
#define popcount __builtin_popcount
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
struct Node{
	bool taken; //taken
	bool ended;
	bool hasChild;
	Node *child[26];
	Node(){
		taken=false;
		ended=false;
		hasChild=false;
		rep(i,26){
			child[i]=NULL;
		}
	}

};


int main(){
    //freopen("input.txt", "r", stdin);
    geti(T);
    rep(i,T){
    	int ans=0;
    	Node *root=new Node();
    	geti(N);
    	string  str;
    	rep(j,N){
    		
    		cin >> str;
    		Node *tmp=root;
    		tmp->taken =true;
    		int t=0;
            Node *tmp2=tmp;
    		rep(k,str.size()){
    			



    			if(tmp->child[str[k]-'a'] == NULL){
    				tmp->hasChild=true;
    				tmp->child[str[k]-'a']=new Node();


    			}

    			if(tmp->taken || tmp->ended){ 
    				t=(k+1);
    				tmp2=tmp->child[str[k]-'a'];
    			}
    			tmp=tmp->child[str[k]-'a'];
    			

    		
    	    }
    	   // cout << str << endl;
    	    tmp->ended=true;
    	    if(tmp->taken || tmp->hasChild){
    			ans+=str.size();
    			//cout << str.size() << endl;
    		}
    		else{
    			ans+=t;
    			tmp2->taken=true;
    			//cout << t << endl;

    					
    		}

    	}

    	//end
    	printf("Case #%d: %d\n",i+1,ans);
    	delete root;


    }

	return 0;

}
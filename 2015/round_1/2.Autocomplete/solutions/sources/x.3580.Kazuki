#include <vector>
#include <map>
#include <set>
#include <string>
#include <queue>
#include <utility>
#include <iostream>

using namespace std;

map<string, int> dict;
map<string, vector<tuple<string, int>>> holds;

int main()
{
	int T;
	cin >> T;
	for (int caseNo = 1; caseNo <= T; ++caseNo) {

		// initialize global
		dict.clear();
		holds.clear();

		int N;
		cin >> N;

		// initialize case local
		int inputCount = 0;

		for (int wordNo = 0; wordNo < N; ++wordNo) {
			string word;
			cin >> word;

			for (int i = 1; i <= word.size(); ++i) {
				string s = word.substr(0, i);
				auto hit = holds.find(s);
				if (hit != holds.end()) {
					for (auto hold : hit->second) {
						auto hword = get<0>(hold);
						auto hi = get<1>(hold) + 1;
						string hs = hword.substr(0, hi);
						auto it = dict.find(hs);
						if (it == dict.end()) {
							dict[hs] = 1;
							holds[hs].emplace_back(make_tuple(word, hi));
						} else {
							dict[hs]++;
						}
					}
					holds.erase(s);
				}
				auto it = dict.find(s);
				if (it == dict.end()) {
					dict[s] = 1;
					holds[s].emplace_back(make_tuple(word, i));
					break;
				} else {
					dict[s]++;
				}
			}

			if (wordNo == 0) {
				inputCount = 1;
			} else {
				bool success = false;
				for (int i = 1; i < word.size(); ++i) {
					string s = word.substr(0, i);
					if (dict[s] == 1) {
						success = true;
						inputCount += i;
						break;
					}
				}
				if (!success) {
					inputCount += word.size();
				}
			}
		}

		printf("Case #%d: %d\n", caseNo, inputCount);
	}
	return 0;
}

#include <iostream>
#include <string>
using namespace std;

struct trie {
    static const int C = 26;
    struct node {
        node *next[C];
        node() { fill_n(next, C, nullptr); }
    };
    node *root;
public:
    trie() : root(new node()) {}
    int insert(const string::const_iterator first, const string::const_iterator last) {
        int ret = last - first;
        node *curr = root;
        for (auto it = first; it != last; ++it) {
            if (!curr->next[*it - 'a']) {
                curr->next[*it - 'a'] = new node();
                ret = min<int>(ret, it - first + 1);
            }
            curr = curr->next[*it - 'a'];
        }
        return ret;
    }
};

int solve()
{
    int n;
    cin >> n;
    int ret = 0;
    trie tr;
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        ret += tr.insert(begin(s), end(s));
    }
    return ret;
}

int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i) {
        cout << "Case #" << i << ": " << solve() << endl;
    }
}

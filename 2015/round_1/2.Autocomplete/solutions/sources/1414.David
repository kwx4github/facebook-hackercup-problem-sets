package com.mantastyle.hackercup.round1

import java.io._

import scala.collection.mutable

object Autocomplete extends App {

  class Node(char: Char) {
    val children = mutable.Map[Char, Node]()
    var count = 0
  }

  def solve(words: Iterable[String]): Int = {
    val trie = new Node('^')
    var charsUsed = 0
    for (word <- words) {
      addToTrie(trie, word)
      charsUsed += getCharsRequired(trie, word)
    }
    charsUsed
  }

  def addToTrie(trie: Node, word: String): Unit = {
    var currentNode = trie
    for (c <- word) {
      currentNode = currentNode.children.get(c) match {
        case Some(node) => node
        case None =>
          val newNode = new Node(c)
          currentNode.children += c -> newNode
          newNode
      }
      currentNode.count += 1
    }
  }

  def getCharsRequired(trie: Node, word: String): Int = {
    var count = 0
    var currentNode = trie
    for (c <- word) {
      count += 1
      currentNode = currentNode.children(c)
      if (currentNode.count == 1) {
        return count
      }
    }
    word.length
  }

  val reader = new BufferedReader(new FileReader("input.txt"))
  val writer = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")))
  val numCases = reader.readLine().toInt
  for (i <- 1 to numCases) {
    val numWords = reader.readLine().toInt
    val words = for (j <- 1 to numWords) yield reader.readLine()
    val result = solve(words)
    writer.println(s"Case #$i: $result")
    println(s"Case #$i: $result")
  }
  writer.close()
}

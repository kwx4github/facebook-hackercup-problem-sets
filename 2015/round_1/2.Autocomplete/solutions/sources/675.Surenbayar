#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <queue>
#include <stack>
#include <vector>
#include <cstring>
#include <string>
#include <map>
#include <cstdlib>
#include <set>
#include <climits>

#define mp make_pair
#define pb push_back
#define xx first
#define yy second
#define C(a) memset((a), 0, sizeof(a))
#define rep(l,r,x,i) for(int (i)=(l);(i)<(r);(i)+=(x))
#define repn(n,i) for(int (i)=0;(i)<(n);(i)++)
#define readInt(n) scanf("%d",&n)
#define readl(n) scanf("%lld",&n)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define L(a) (int)(a.size())
#define all(a) (a).begin(), (a).end()
#define mod 1000000007
#define vii vector<int>
#define pii pair<int, int>
#define pli pair<long long, int>
#define pll pair<long long, long long>
#define pil pair<int, long long>
#define vpi vector<pair<int, int> >
typedef long long LL;

LL mullog(LL a, LL b, LL c) {LL ret = 0ll;while(b) {if(b&1ll) ret = (ret+a)%c;a = (a+a)%c;b >>= (1ll);}return ret;}
LL powlog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = (ret*a)%c;a = (a*a)%c;b >>= (1ll);}return ret;}
int powlog(int a, int b, int c) {int ret = 1;while(b) {if(b&1) ret = (ret*a)%c;a = (a*a)%c;b >>= (1);}return ret;}
LL powLog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = mullog(ret,a,c);a = mullog(a,a,c);b >>= (1ll);}return ret;}
int gcd(int a, int b) {return a ? gcd(b % a, a) : b; }
LL gcd(LL a, LL b){return a ? gcd(b % a, a) : b; }

int dirx[8] = {1,0,-1,0,1,-1,-1,1};
int diry[8] = {0,-1,0,1,1,1,-1,-1};

using namespace std;
char str[1000005];

class Trie{
    Trie *node[26];
    public:
        Trie() {
            for(int i=0;i<26;i++) node[i] = NULL;
        }
        int insert(char *s, Trie* root) {
            int i=0, len = strlen(s);
            bool flag = true;
            int ans = 0;
            while(i<len) {
                if(root->node[s[i]-'a'] == NULL) {
                    if(flag) ans += i+1;
                    root->node[s[i]-'a'] = new Trie();
                    flag = false;
                }
                root = root->node[s[i]-'a'];
                i ++;
            }
            if(flag) ans += len;
            return ans;
        }
};

int main() {
    freopen("3.txt", "r", stdin);
    freopen("output.txt","w", stdout);
    Trie *root;
    int T, n;
    readInt(T);
    for(int cs=1;cs<=T;cs++) {
        readInt(n);
        root = new Trie();
        int ans = 0;
        for(int i=0;i<n;i++) {
            scanf("%s",str);
            ans += root->insert(str, root);
        }
        printf("Case #%d: %d\n",cs, ans);
    }
}

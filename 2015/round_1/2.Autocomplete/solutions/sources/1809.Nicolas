_end = '_end_'

def make_trie(words):
    root = (dict(),1)
    for word in words:
        current_dict = root[0]
        for letter in word:
            if letter not in current_dict:
                current_dict[letter] = ({},0)
            current_dict[letter] = (current_dict[letter][0], current_dict[letter][1]+1)
            current_dict = current_dict[letter][0]
        if _end not in current_dict:
            current_dict[_end] = (_end,0)
        current_dict[_end] = (_end, current_dict[_end][1]+1)

    return root

def add_word(root, word):
    current_dict = root[0]
    for letter in word:
        if letter not in current_dict:
            current_dict[letter] = ({},0)
        current_dict[letter] = (current_dict[letter][0], current_dict[letter][1]+1)
        current_dict = current_dict[letter][0]
    if _end not in current_dict:
        current_dict[_end] = (_end,0)
    current_dict[_end] = (_end, current_dict[_end][1]+1)
    return root

n = int(raw_input())
for t in xrange(n):
    cant = int(raw_input())
    w = []
    for x in xrange(cant):
        w.append(raw_input())

    res = 0
    tmp = []
    otrie = (dict(),1)
    for word in w:
        otrie = add_word(otrie,word)
        tmp_res = 0
        trie = otrie
        for i in xrange(len(word)):
            tmp_res += 1
            trie = trie[0][word[i]]
            if trie[1] == 1:
               break
        res += tmp_res
    print "Case #"+str(t+1)+": " + str(res)
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <iterator>
#define REP(i,a,n) for(int i = (a); i < (int)(n); ++i)
#define foreach(itr,c) for(decltype((c).begin()) itr=(c).begin(); itr != (c).end(); itr++)
#define mp(a,b) make_pair(a,b)

using namespace std;

//typedef __int64 ll;
//typedef unsigned __int64 ull;
typedef long long ll;
typedef unsigned long long ull;


template<typename T>
inline T ABS(T a) { return a > 0 ? a : -a; }
template<typename T>
inline T MIN(T a, T b) { return a < b ? a : b; }
template<typename T>
inline T MAX(T a, T b) { return a > b ? a : b; }
template<typename T>
inline T CHKMIN(T &a, T b) { if(a > b) a = b; return a; }
template<typename T>
inline T CHKMAX(T &a, T b) { if(a < b) a = b; return a; }
template<typename T>
inline void SWAP(T &a, T &b) { static T c; c = a; a = b; b = c; }

template<typename T>
void print(T a) { cout << a << ' '; }
template<typename T, typename... T0>
void print(T a, T0... b) { print(a); print(b...); }
template<typename T>
void println(T a) {cout << a << endl;}
template<typename T, typename... T0>
void println(T a, T0... b) { print(a); println(b...); }

int n, ans;
char s[2000100];

struct Node {
  char c;
  struct Node *next[26];
}node[2000100];

struct Node *root, *top;

struct Node * newNode(char c) {
  memset(top, 0, sizeof(struct Node));
  top->c = c;
  return top++;
}

void add(struct Node *root, char *s) {
  int tmp = 0, ret = 0;
  while(*s) {
    int t = s[0] - 'a';
    
    if(ret == 0) ++tmp;
    
    if(root->next[t] == 0) {
      root->next[t] = newNode(s[0]);
      if(ret == 0) {
        ret = tmp;
        tmp = -1;
      }
    }
    
    root = root->next[t];
    ++s;
  }
  if(tmp > 0) ret = tmp;
  ans += ret;
  //println(ret);
}

int main() {
  freopen("autocomplete.txt", "r", stdin);
	freopen("autocomplete.out", "w", stdout);
  int cas;
  cin >> cas;
  REP(tt, 1 , cas + 1) {
    ans = 0;
    top = node;
    root = newNode('a');
    scanf("%d", &n);
    REP(i, 0, n) {
      scanf("%s", s);
      add(root, s);
    }
    printf("Case #%d: %d\n", tt, ans);
  }
  return 0;
}

#include <iostream>
#include <vector>
using namespace std;
const int nmax = 1e6+10;
struct letter{
	int nxt[26];
	letter(){
		for(int i = 0; i < 26; ++i)
			nxt[i]=-1;
	}
};
vector<letter> tree;
int add_pos = 0;
int add(string word){
	//cout << "\t" << word << '\n'; 
	int cur = 0, cost = 0;
	int when = -1;
	for(int i = 0; i < word.size(); ++i){
		int cha = word[i]-'a';
		if(tree[cur].nxt[cha]==-1){
			tree[cur].nxt[cha]=cur=++add_pos;
			if(when==-1)
				when=i;
		}
		else{
			cur=tree[cur].nxt[cha];
		}
		//cout << cur << '\n';
	}
	if(when==-1)
		cost=word.size();
	else
		cost=when+1;
	//cout << "\t" << cost << '\n';
	return cost;
}
int main(){
	int T;
	cin >> T;
	for(int test = 1; test <= T; ++test){
		add_pos=0;
		tree.clear(); tree.resize(nmax);
		int n; cin >> n;
		int ans = 0;
		for(int i = 0; i < n; ++i){
			string word; cin >> word;
			ans+=add(word);
		}
		cout << "Case #" << test << ": " << ans << '\n';
	}
}

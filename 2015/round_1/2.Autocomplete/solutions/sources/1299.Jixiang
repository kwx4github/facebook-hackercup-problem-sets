#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <map>
#include <queue> // push, front, pop
#include <sstream>
#include <string>
#include <stack> // push, top, pop
#include <set>
#include <vector>
#include <list> // list.insert(it, data); data inserted before it..
#include <iomanip>
#include <stdio.h>
#include <string.h> 

#define PI 3.14159265358979323846264338327950288
#define fill_(x,v) memset(x,v,sizeof(x))
#define min(x,y) (((x)>(y)) ? (y) :(x))
#define max(x,y) (((y)>(x)) ? (y) :(x))
#define Pi  3.1415926535
#define ll long long

using namespace std;

ifstream fin("c:\\tmp\\autocomplete.txt");
ofstream fout("c:\\tmp\\out.txt");

struct Node {
    short cnt;
    int ref[26];
};

vector<Node*> tries;

int addNode() {
    Node* node = new Node();
    for (int i = 0; i < 26; i++) {
        node->ref[i] = -1;
    }
    node->cnt = 0;
    tries.push_back(node);
    return tries.size() - 1;
}

void deleteTrie() {
    for (int i = 0; i < tries.size(); i++) {
        delete tries[i];
    }
    tries.clear();
}

void initTrie() {
    deleteTrie();
    addNode();
}


void insert(const string& s) {
    int cur = 0;
    tries[0]->cnt++;
    for (int p = 0; p < s.length(); p++) {
        char c = s[p];
        if (tries[cur]->ref[c - 'a'] == -1) {
            tries[cur]->ref[c - 'a'] = addNode();
        }
        cur = tries[cur]->ref[c - 'a'];
        tries[cur]->cnt++;
    }
}

int query(const string& s) {
    if (s.length() == 0) {
        cout<<"error - get strings of length 0"<<endl;
        return 0;
    }
    int cur = 0;
    int tot = 0;
    for (int p = 0; p < s.length(); p++) {
        tot++;
        char c = s[p];
        cur = tries[cur]->ref[c - 'a'];
        if (cur == -1) {
            cout<<"error - reach unrefered node"<<endl;
            return 0;
        }
        if (tries[cur]->cnt == 1) return tot;
    }
    return s.length();
}

int run() {
     int N;
     fin >> N;
     //N = 3; ///////////////////////
     
     initTrie();
     int tot = 0;
     
     for (int n = 0; n < N; n++) {
         string s;
         //for (int i = 0; i < 1000000; i++) //////////////////
         //    s += string(1, 'a' + rand() % 26); ////////////////
         fin >> s;
         
         insert(s);
         tot += query(s);
     }
     deleteTrie();
     return tot;
}

int main() {
	int N;
	fin >> N;
	//char inp[1000];
  //fin.getline(inp, 1000);
    for( int n = 1; n <= N; n++){
		//fout<<"Case #"<<n<<": ";
		int ret = run();
		//fout<<"Case #"<<n<<": "<<(ret? "YES" : "NO")<<endl;
		//printf("Case #%d: %d\n", n, ret);
		cout<<"Case #"<<n<<": "<< ret <<endl;
		fout<<"Case #"<<n<<": "<< ret <<endl;
		//fout << fixed;
		//fout<<"Case #"<<n<<": "<<setprecision(10)<<ret<<endl;
   }
   return 0;
}

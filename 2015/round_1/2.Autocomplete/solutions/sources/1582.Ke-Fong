#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NUMBER_NODES	(1000000 + 1000)
#define RESET(node)		(memset(node, 0, sizeof(NODE)))

typedef struct NODE {
	
	struct NODE	*children[26];
	char		is_word, number_children;

} NODE;

static NODE	nodes[NUMBER_NODES];
static NODE	*fptr, *root;

static int insert (char *s)
{
	int	c, l, r;
	NODE	*p;
		
	c = *s++ - 'a';
	l = r = 0;
	p = root;
	for ( ; ; ) {
	
		NODE	*q;
		
		if ((q = p->children[c]) == NULL) {
	
			p->children[c] = fptr;
			p->number_children++;
			RESET(fptr);
			q = fptr++;
		
		}
		r = p->is_word || p->number_children > 1 ? 0 : r + 1;
		l++;		
		if ((c = *s) == '\0') {

			if (q->number_children)

				r = 0;

			q->is_word = !0;
			break;
			
		} else {
		
			p = q;
			c -= 'a';
			s++;
		
		}

	}

	return l - r ? l - r : 1;
}

char word[10000000];
static int complete ()
{
	int	t, N, i;
		
	fptr = nodes;
	root = fptr++;
	RESET(root);
	
	t = 0;
	scanf("%d\n", &N);	
	for (i = 0; i < N; i++) {

// char word[100000];
			
		scanf("%s\n", word);
		t += insert(word);
		
	}
	
	return t;
}

int main ()
{
	int	T, i;

	scanf("%d\n", &T);
	for (i = 0; i < T; i++)
	
		printf("Case #%d: %d\n", i + 1, complete());
		
	return EXIT_SUCCESS;
}

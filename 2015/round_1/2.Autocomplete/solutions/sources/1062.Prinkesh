#include<iostream>
#include<bits/stdc++.h>
#include<malloc.h>
#include<string.h>
using namespace std;
typedef long long int int64;

struct trie_node{
int flag;
int64 cntletter;
struct trie_node * child[26];
};

struct trie{

struct trie_node *root;
//int count;

};

struct trie_node *getNode(void)
{//Create and return a new trie_node
    struct trie_node *pNode = (struct trie_node *)malloc(sizeof(struct trie_node));
    pNode->flag = 0;
    pNode->cntletter = 0;
    for(int i=0;i<26;i++)
        pNode->child[i] = NULL;

    return pNode;
}
void initialize(struct trie *pTrie)
{//create a trie
    pTrie->root = getNode(); // make a root
  //  pTrie->count = 0;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
int64 insert(struct trie *pTrie, char key[])
{int64 cost=0;
    int64 level;
    int64 length = strlen(key);
    //int64 length = 10000000;
    int index=0;
    int flg=0;

    //pTrie->count++; //num words

    struct trie_node *pCrawl;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ )
    {
        index = ((int)key[level])-97;
        if(pCrawl->child[index]==NULL)
        {
            pCrawl->child[index] = getNode();

        }
        pCrawl = pCrawl->child[index];
        pCrawl->cntletter++;
        if (flg==0 && pCrawl->cntletter==1)
        {cost+=level+1;
        flg=1;
        }
    }

    // mark last node as leaf
    pCrawl->flag = 1;
    if (flg==0)
        cost+=length;
    return cost;
}
int main()
{

//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
    int64 cost=0;
    int64 temp=0;
    char key[1000010];
    // Construct trie
    int t;
    int64 n;
    scanf("%d",&t);
    for (int test=1;test<=t;test++)
    {   struct trie mytrie;
        initialize(&mytrie);
        cost=0;
        //temp=0;
        scanf("%lld",&n);
        while(n--)
        {

            scanf("%s",key);
            cost+=insert(&mytrie, key);
            //cost+=temp;
            //printf("%lld\n",temp);
        }
        printf("Case #%d: %lld\n",test,cost);
        delete &mytrie;
    }


    return 0;
}

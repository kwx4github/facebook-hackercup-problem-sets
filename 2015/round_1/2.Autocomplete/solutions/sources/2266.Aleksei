from __future__ import print_function

import bisect
import sys
import math

f = sys.stdin

if len(sys.argv) > 1:
    f = open(sys.argv[1], "rt")

NLETTERS = 26

def ch2idx(ch):
    return ord(ch) - ord('z')

def make_node():
    return [None for i in xrange(NLETTERS)]

def solve(words):
    total_chars_count = 0

    root = make_node();

    for w in words:
        char_count = 0
        cur_node = root

        is_match = True
        for ch in w:
            idx = ch2idx(ch)

            if cur_node[idx] is None:
                cur_node[idx] = make_node()
                is_match = False
            else:
                char_count += 1

            cur_node = cur_node[idx]

        if not is_match:
            char_count += 1
        #~ print(w, char_count)
        total_chars_count += char_count

    return total_chars_count

# main

T = int(f.readline().strip())

for case_id in range(1, T+1):
    nwords = int(f.readline().strip())
    words = [f.readline().strip() for i in xrange(nwords)]

    r = solve(words)

    print(str.format('Case #{}: {}', case_id, r))

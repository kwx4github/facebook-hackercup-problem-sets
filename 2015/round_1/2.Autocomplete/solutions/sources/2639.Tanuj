#include <iostream>
#include <stdio.h>
#include <cstring>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

typedef long long int lol;

#define s1(a) scanf("%d",&a);
#define s2(a,b) scanf("%d %d",&a,&b);
#define FOR(a,b) for(int i = a; i < b; i++)
#define FOR2(a,b) for(int j = a; j < b; j++)

struct node{
    int val;
    int nedges;
    node(int x){val = x;nedges = 0;}
    node *edge[26];
};

void trace(){}

int main(){
    freopen("autocomplete.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int t, n, ch;
    scanf("%d",&t);
    for(int csno = 1; csno<=t; csno++){
        
        int len = 0;
        scanf("%d",&n);getchar();
        ch = 100;
        node * st[26], * curr;
        
        for(int i = 0; i < 26; i++)
            st[i] = NULL;
        
        //cout<<"case "<<csno<<": "<<endl;
        for(int i = 0; i < n; i++){
            
            curr = NULL;
            bool crmode = false;
            
            while(true){
                
                ch = getchar();
                if(ch=='\n')
                    break;
                
                //printf("%c",ch);
                
                if(crmode==false){
                    len++;
                    //cout<<len<<endl;
                    if(curr == NULL){
                        curr = st[ch-97];
                        if(curr!=NULL && curr->val == ch)
                            continue;
                        else{
                            st[ch-97] = new node(ch);
                            curr = st[ch-97];
                            crmode = true;
                        }
                    }
                    else{
                        bool found = false;
                        for(int j = 0; j < curr->nedges; j++){
                            if((curr->edge[j])->val == ch){
                                curr = curr->edge[j];
                                found = true;
                                break;
                            }
                        }
                        if(found == false){
                            curr->nedges++;
                            curr->edge[curr->nedges-1] = new node(ch);
                            curr = curr->edge[curr->nedges-1];
                            crmode = true;
                        }
                    }
                }
                else{
                    curr->nedges++;
                    curr->edge[curr->nedges-1] = new node(ch);
                    curr = curr->edge[curr->nedges-1];
                }
            }
            //cout<<" "<<len<<endl;
        }//cout<<endl;
        printf("Case #%d: %d\n",csno,len);
    }
    return 0;
}

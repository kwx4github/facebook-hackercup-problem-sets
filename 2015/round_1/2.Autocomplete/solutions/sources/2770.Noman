using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Solution
{
    class Program
    {
        public class Solver
        {
            const long mod = 1000000007;
            public int t;
            public string Output;
            int n;
            Trie tree;

            public Solver(int t)
            {
                this.t = t;

            }
            public void ReadInput()
            {
                n = ReadInt();
                tree = new Trie();
                for (int i = 0; i < n; i++)
                {
                    string s = Console.ReadLine();
                    tree.Insert(s, s);
                }                
            }
            public void Solve()
            {
                Output = tree.count.ToString();
            }
            public void Print()
            {
                Console.WriteLine(string.Format("Case #{0}: {1}", t, Output));
            }

            # region Helper Methods
            public static int ReadInt()
            {
                return Convert.ToInt32(Console.ReadLine());
            }
            public static uint ReadUInt()
            {
                return Convert.ToUInt32(Console.ReadLine());
            }
            public static long ReadLong()
            {
                return Convert.ToInt64(Console.ReadLine());
            }
            public static ulong ReadULong()
            {
                return Convert.ToUInt64(Console.ReadLine());
            }
            public static float ReadFloat()
            {
                return Convert.ToSingle(Console.ReadLine());
            }
            public static double ReadDouble()
            {
                return Convert.ToDouble(Console.ReadLine());
            }
            public static decimal ReadDecimal()
            {
                return Convert.ToDecimal(Console.ReadLine());
            }
            public static int[] ReadIntArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                int[] a = new int[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToInt32(str[i]);
                }
                return a;
            }
            public static uint[] ReadUIntArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                uint[] a = new uint[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToUInt32(str[i]);
                }
                return a;
            }
            public static long[] ReadLongArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                long[] a = new long[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToInt64(str[i]);
                }
                return a;
            }
            public static ulong[] ReadULongArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                ulong[] a = new ulong[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToUInt64(str[i]);
                }
                return a;
            }
            public static float[] ReadFloatArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                float[] a = new float[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToSingle(str[i]);
                }
                return a;
            }
            public static double[] ReadDoubleArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                double[] a = new double[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToDouble(str[i]);
                }
                return a;
            }
            public static decimal[] ReadDecimalArray()
            {
                string[] str = Console.ReadLine().Split(' ');
                decimal[] a = new decimal[str.Length];
                for (int i = 0; i < a.Length; i++)
                {
                    a[i] = Convert.ToDecimal(str[i]);
                }
                return a;
            }
            # endregion
        }
        #region Main
        static void Main(string[] args)
        {
            using (StreamReader reader = new StreamReader("input.txt"))
            {
                Console.SetIn(reader);
                using (StreamWriter writer = new StreamWriter("output.txt"))
                {
                    Console.SetOut(writer);
                    int t = Solver.ReadInt();
                    Solver[] sols = new Solver[t];
                    for (int i = 0; i < t; i++)
                    {
                        sols[i] = new Solver(i + 1);
                        sols[i].ReadInput();
                    }
                    for (int i = 0; i < t; i++)
                    {
                        sols[i].Solve();
                    }
                    for (int i = 0; i < t; i++)
                    {
                        sols[i].Print();
                    }
                }
            }
            System.Diagnostics.Process.Start("output.txt");
        }
        #endregion Main

        public class TrieNode
        {
            public char c;
            public Dictionary<char, TrieNode> Childs = new Dictionary<char, TrieNode>();

            public TrieNode()
            {
            }

            public TrieNode(char c)
            {
                this.c = c;
            }

            public TrieNode Insert(char c, ref int count, ref bool bAdd)
            {
                if (Childs.ContainsKey(c))
                {
                    count++;
                    return Childs[c];
                }
                else
                {
                    if (bAdd)
                    {
                        bAdd = false;
                        count++;
                    }
                    TrieNode node = new TrieNode(c);
                    this.Childs[c] = node;
                    return node;
                }
            }
        }

        public class Trie
        {
            private TrieNode root = new TrieNode();
            public int count = 0;

            public void Insert(string s, string item)
            {
                char[] cArray = s.ToCharArray();
                TrieNode node = root;
                bool bAdd = true;
                foreach (char c in cArray)
                {
                    node = node.Insert(c, ref count, ref bAdd);
                }
            }
        }
    }
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <cstring>
#include <iomanip>
#include <cctype>
#include <map>

using namespace std;

struct node {
    node* e[26];
    node() {
        for(int i = 0;i < 26;i++) e[i] = NULL;
    }
    void addWord(string &s,int p) {
        if(p != s.length()) {
            int k = s[p] - 'a';
            if(e[k] == NULL) {
                e[k] = new node();
            }
            e[k]->addWord(s,p + 1);
        }
    }
    int query(string &s,int p) {
        if(p == s.length()) return 0;
        else {
            int k = s[p] - 'a';
            if(e[k] == NULL) return 1;
            else return 1 + e[k]->query(s,p + 1);
        }
    }
    ~node() {
        for(int i = 0;i < 26;i++) {
            if(e[i] != NULL) delete e[i];
        }
    }
} *trie;


void solve() {
    delete trie;
    trie = new node();
    int n; cin>>n;
    int ans = 0;
    for(int i = 0;i < n;i++) {
        string s; cin>>s;
        ans+=trie->query(s,0);
        node* cur = trie;
        for(int i = 0;i < s.length();i++) {
            int k = s[i] - 'a';
            if(cur->e[k] != NULL) {ans++; cur = cur->e[k];}
            else {
                ans++;
                break;
            }
            cur = trie;
            for(int i = 0;i < s.length();i++) {
                int k = s[i] - 'a';
                if(cur->e[k] == NULL) cur->e[k] = new node();
                cur = cur->e[k];
            }
        }
        
    }
    cout<<ans<<endl;
}

int main() {
    freopen("/Users/administrator/Desktop/autocomplete.txt","r",stdin);
    freopen("/Users/administrator/Desktop/output.txt","w",stdout);
    int t; cin>>t;
    for(int i = 1;i <= t;i++) {
        cout<<"Case #"<<i<<": ";
        solve();
    }
    
}
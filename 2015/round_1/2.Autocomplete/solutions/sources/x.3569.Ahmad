import java.io.*;
import java.util.*;


public class SolutionB {
	public void solve(){
		int t = nextInt();
		for(int k = 0 ; k < t ; k++){
			Trie tr = new Trie();
			int n = nextInt();
			long sum = 0;
			for(int i = 0 ; i < n ; i++){
				String s = nextString();
				tr.addWord(s);
				sum+=tr.tillUniquePrefix(s);
			}
			out.println("Case #"+(k+1)+": "+sum);
		}
	}
	public void run(){
		try {
			bf = new BufferedReader(new InputStreamReader(new FileInputStream("B.txt")));
			out = new PrintWriter(new File("out.txt")); 
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		solve();
		out.close();
	}
	class Trie {
		private class TrieNode {
			int prefixes;
			TrieNode[] kids;
			public TrieNode() {
				kids = new TrieNode[26];
			}
		}		
		TrieNode root;
		String word;
		
		public Trie() {
			root = new TrieNode();
		}

		public void addWord(String word) {
			this.word = word;
			add(root, 0);
		}

		private void add(TrieNode nd, int index) {
			int i = 0;
			TrieNode ndd = root;
			while(i<word.length()){
				ndd.prefixes++;
				int j = word.charAt(i) - 'a';
				if (nd.kids[j] == null) nd.kids[j] = new TrieNode();
				i++;
			}
			
		}

		public int countPrefixes(String word) {
			this.word = word;
			return countPrefixes(root, 0);
		}

		private int countPrefixes(TrieNode nd, int index) {
			if (nd == null) return 0;
			if (index == word.length())	return nd.prefixes;
			int i = word.charAt(index) - 'a';
			return countPrefixes(nd.kids[i], index + 1);
		}
		
		public int tillUniquePrefix(String word){
			int i = 0;
			TrieNode nd = root.kids[word.charAt(i) - 'a'];
			while(nd.prefixes > 1 && i + 1 < word.length()){
				i++;
				nd = nd.kids[word.charAt(i) - 'a'];
			}
			return i + 1;
		}
	}
	public static void main(String args[]){
		new SolutionB().run();
	}
	BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	PrintWriter out = new PrintWriter(System.out);
	String line;
	StringTokenizer st;
	public String nextLine(){
		try {
			line = bf.readLine();
			st = new StringTokenizer(line);
		} catch (IOException e) {
			return null;
		}
		return line;
	}
	public String nextString(){
		while (st == null || !st.hasMoreElements()) {
            try {
                line = bf.readLine();
                st = new StringTokenizer(line);
            } catch (IOException e) {
                return null;
            }
        }
        return st.nextToken();
	}
	public int nextInt(){
		return Integer.parseInt(nextString());
	}
	public long nextLong(){
		return Long.parseLong(nextString());
	}
	public double nextDouble(){
		return Double.parseDouble(nextString());
	}
}

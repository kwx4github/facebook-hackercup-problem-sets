#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <cstdlib>
using namespace std;
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
typedef long long ll;

int T, N;

struct node {
  bool end;
  int pc;
  node* to[26];
} *head;

void add(string w) {
  node *cur = head;
  cur->pc++;
  for(int i = 0; i < w.length(); i++) {
    int val = w[i]-'a';
    if(cur->to[val] == NULL)
      cur->to[val] = new node();
    cur->to[val]->pc++;
    cur = cur->to[val];
  }
  cur->end = 1;
}
int search(string w) {
  node *cur = head;
  for(int i = 0; i < w.length(); i++) {
    int val = w[i] - 'a';
    if(cur->to[val] == NULL)
      return i+1;
    cur = cur->to[val];
  }
  return w.length();
}
int main()
{
    if(fopen("autocomplete.txt","r")) freopen("autocomplete.txt","r",stdin);
    freopen("autocomplete.out","w",stdout);
    cin >> T;
    for(int i = 1; i <= T; i++) {
      printf("Case #%d: ", i);
      head = new node();
      head->pc = 0;
      head->end = 0;
      ll ans = 0;
      string lin;
      cin >> N;
      for(int j = 0; j < N; j++) {
        cin >> lin;
        ans+=search(lin);
        add(lin);
      }
      cout << ans << endl;
    }
    return 0;
}
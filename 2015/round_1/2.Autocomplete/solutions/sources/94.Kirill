import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			Solver solver = new Solver();
			out.format("Case #%d: ", t + 1);
			solver.solve(in, out);
		}
		
		out.close();
	}
}

class Solver {
	class Trie extends HashMap<Character, Trie>{
		boolean flag;
		int sub;
		public Trie() {
			super();
			flag = false;
			sub = 0;
		}
		boolean addWord(String s, int d) {
			if (d == s.length()) {
				if (flag)
					return false;
				flag = true;
				sub++;
				return true;
			}
			Trie next;
			if (containsKey(s.charAt(d)))
				next = get(s.charAt(d));
			else {
				next = new Trie();
				put(s.charAt(d), next);
			}
			if (next.addWord(s, d + 1)) {
				sub++;
				return true;
			}
			return false;
		}
	}
	public void solve(InputReader in, PrintWriter out) {
		int n = in.nextInt();
		Trie root = new Trie();
		int ans = 0;
		for (int i = 0; i < n; i++) {
			String w = in.next();
			root.addWord(w, 0);
			Trie cur = root;
			for (int j = 0; j < w.length(); j++) {
				cur = cur.get(w.charAt(j));
				ans++;
				if (cur.sub == 1)
					break;
			}
		}
		out.println(ans);
		
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

import java.awt.*;
import java.awt.geom.*;
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;

public class B {
	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException	{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		final int MAX_NUM_CASE = readInt();
		for(int qq = 1; qq <= MAX_NUM_CASE; qq++)	{
			pw.print("Case #" + qq + ": ");
			root = new Node();
			int n = readInt();
			long ret = 0;
			while(n-- > 0) {
				String s = nextToken();
				ret += query(s);
				addWord(s);
			}
			pw.println(ret);
		}
		pw.close();
	}
	
	static Node root;
	
	public static int query(String s) {
		Node curr = root;
		int index = 0;
		while(index < s.length()) {
			if(curr.child[s.charAt(index)-'a'] == null) {
				return index + 1;
			}
			curr = curr.child[s.charAt(index)-'a'];
			index++;
		}
		return index;
	}
	
	public static void addWord(String s) {
		int index = 0;
		Node curr = root;
		while(index < s.length()) {
			int go = s.charAt(index) - 'a';
			if(curr.child[go] == null) {
				curr.child[go] = new Node();
			}
			curr = curr.child[go];
			index++;
		}
		curr.isWord = true;
	}
	
	static class Node {
		public boolean isWord;
		public Node[] child;
		public Node() {
			child = new Node[26];
		}
	}
	
	/* NOTEBOOK CODE */

	private static long readLong() throws IOException	{
		return Long.parseLong(nextToken());
	}

	private static double readDouble() throws IOException	{
		return Double.parseDouble(nextToken());
	}

	private static int readInt() throws IOException	{
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException	{
		while(st == null || !st.hasMoreTokens())	{
			if(!br.ready())	{
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}
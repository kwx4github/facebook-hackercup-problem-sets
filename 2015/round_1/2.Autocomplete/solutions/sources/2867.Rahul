#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>
#include <array>
#include <string>
#include <queue>
#include <array>
#include <set>
#include <iomanip>
#include <cstdio>
#include <memory>

using namespace std;

char OneWord[1000001];

struct Node
{
    Node()
    {
        Clear();
    }

    void Clear()
    {
        Char = 0;
        Words = 0;
        for (auto& ind : Childs)
        {
            ind = 0;
        }
    }

    char Char;
    int Words;
    int Childs[26];
};


const int NODE_CACHE_MAX = 1000001;
Node NodeCache[NODE_CACHE_MAX];
int NodeCacheIndex;


int AddOneWord()
{
    Node* curr = &NodeCache[0];
    int count = 0;

    int i;
    for (i = 0; OneWord[i]; ++i)
    {
        ++(curr->Words);

        auto& nextInd = curr->Childs[OneWord[i] - 'a'];

        if (nextInd == 0)
        {
            nextInd = ++NodeCacheIndex;
            Node* next = &(NodeCache[nextInd]);
            next->Clear();
            next->Char = OneWord[i];

            if (!count)
            {
                count = i + 1;
            }
        }

        curr = &(NodeCache[nextInd]);
    }

    if (!count)
    {
        count = i;
    }

    return count;
}

int main()
{
    int T;
    scanf("%d", &T);

    for (int c = 1; c <= T; ++c)
    {
        int N;
        scanf("%d", &N);

        int count = 0;
        NodeCacheIndex = 0;
        NodeCache[0].Clear();

        for (int i = 0; i < N; ++i)
        {
            scanf("%s", OneWord);
            count += AddOneWord();
        }

        printf("Case #%d: %d\n", c, count);
    }

    return 0;
}

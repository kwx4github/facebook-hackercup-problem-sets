#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

struct Trie {
	int idxAnsw;
	vector<int> nodes;
};

Trie elements[1123456];
int actualElement, lastElement;
int N;
vector<string> words;

void resetLastElement() {
	elements[lastElement].idxAnsw = -1;
	elements[lastElement].nodes.resize(26, -1);
}

int main() {
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++) {

		scanf("%d", &N);
		fprintf(stderr, "Case #%d: %d words\n", t, N);
		words.resize(N);
		for (int i = 0; i < N; i++)
		{
			cin >> words[i];
			fprintf(stderr, "word %s\n", words[i].c_str());
		}

		lastElement = 0;
		resetLastElement();
		int answCount = 0;
		for (int i = 0; i < N; i++) {
			//fprintf(stderr, "testing word %s\n", words[i].c_str());
			actualElement = 0;
			bool placeFound = false;
			for (int j = 0; j < words[i].size(); j++) {
				int val = words[i][j] - 'a';
				//fprintf(stderr, "testing %c - val %d\n", words[i][j], val);
				
				if (elements[actualElement].idxAnsw == -1) {
					elements[actualElement].idxAnsw = i;
					if (!placeFound)
					{
						//fprintf(stderr, "bingo 1\n");
						answCount += (j + 1);
						placeFound = true;
					}
				}
				if (elements[actualElement].nodes[val] == -1) {
					//fprintf(stderr, "elements[%d].nodes[%d] == -1\n", actualElement, val);
					lastElement++;
					resetLastElement();
					elements[actualElement].nodes[val] = lastElement;
					actualElement = lastElement;
					if (!placeFound)
					{
						//fprintf(stderr, "bingo 2\n");
						answCount += (j + 1);
						placeFound = true;
					}
				} else {
					actualElement = elements[actualElement].nodes[val];
				}
			}
			elements[actualElement].idxAnsw = i;
			if (!placeFound)
				answCount += words[i].size();

			//fprintf(stderr, "answ so far %d\n", answCount);
		}

		printf("Case #%d: %d\n", t, answCount);
	}
	return 0;
}
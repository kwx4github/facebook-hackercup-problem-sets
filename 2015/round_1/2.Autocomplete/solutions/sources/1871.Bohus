package fbhc15R1;

import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class B
{
        String line;
        StringTokenizer inputParser;
        BufferedReader is;
        FileInputStream fstream;
        DataInputStream in;
        String FInput="";
        
        void openInput(String file)
        {

                if(file==null)is = new BufferedReader(new InputStreamReader(System.in));//stdin
                else
                {
                        try{
                
                                
                        fstream = new FileInputStream(file);
                        in = new DataInputStream(fstream);
                        is = new BufferedReader(new InputStreamReader(in));
                        }catch(Exception e)
                        {
                                System.err.println(e);
                        }
                }

        }
        
        void readNextLine()
    	{
    		try {
    			line = is.readLine();
    			inputParser = new StringTokenizer(line, " ,\t");
    			//System.err.println("Input: " + line);
    		} catch (IOException e) {
    			System.err.println("Unexpected IO ERROR: " + e);
    		}	
    		catch (NullPointerException e)
    		{
    			line=null;
    			
    		}
    		
    	}
        
        long NextLong()
        {
                String n = inputParser.nextToken();
                
                long val = Long.parseLong(n);
                
                 return val;
        }
        
        int NextInt()
        {
                String n = inputParser.nextToken();
                int val = Integer.parseInt(n);
                
                //System.out.println("I read this number: " + val);
                return val;
        }
        
        String NextString()
        {
                String n = inputParser.nextToken();
                return n;
        }
        
        void closeInput()
        {
                try {
                        is.close();
                } catch (IOException e) {
                        System.err.println("Unexpected IO ERROR: " + e);
                }
                        
        }
        
        
        public static void main(String [] argv)
        {
                //String filePath="circles.in";
                String filePath=null;
                if(argv.length>0)filePath=argv[0];
                new B(filePath);
                
        }
        
        public B(String inputFile)
        {
        	openInput(inputFile);
    		StringBuilder sb = new StringBuilder();
    		readNextLine();
    		int T=NextInt(), t=0;
    		while(T-->0)
    		{
    			t++;
    			readNextLine();
    			int N=NextInt();
    			String [] words = new String[N];
    			for(int i=0; i<N; i++)
    			{
    				readNextLine();
    				String s = line;
    				words[i]=s;
    			}
    			int ret=getRet(words);
    			sb.append("Case #"+t+": ");
    			sb.append(ret);
    			
    			
    			sb.append("\n");
    		}
    		
    		System.out.print(sb);
        	
    		closeInput();		
      
        }

        int getRet(String [] w)
        {
        	int N=w.length;
        	MyDictionary dict = new MyDictionary();
        	int ret = 0;
        	
        	for(int i=0; i<N; i++)
			{
				String s = w[i];
				ret+=dict.add(s);
			}
        	return ret;
        }
        
        private class MyDictionary
        {
        	Letter root = new Letter(' ');
        	
        	private int add(String s)
        	{
        		int ret = 1;
        		Letter now=root;
        		for(int i=0; i<s.length(); i++)
        		{
        			if(now.contains(s.charAt(i)))
        			{
        				if(i+1<s.length())ret++;
        				now=now.get(s.charAt(i));
        			}
        			else now = now.add(new Letter(s.charAt(i)));
        		}
        		return ret;
        	}
        }

        private class Letter
        {
        	char a;
        	HashSet <Letter> children = new HashSet<B.Letter>();
        	
        	Letter (char x)
        	{
        		a=x;
        	}
        	
        	public Letter get(char c) {
        		for(Letter child:children)
        			if(child.a==c)return child;
        		return null;
			}

			public Letter add(Letter letter) {
				children.add(letter);
				return letter;
			}

			public void addChild(Letter child)
        	{
        		children.add(child);
        	}
        	
        	public boolean contains(char c)
        	{
        		for(Letter child:children)
        			if(child.a==c)return true;
        		return false;
        	}
        }
}
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;


public class Autocomplete {
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new BufferedInputStream(new FileInputStream("autocomplete.txt")));
		PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = scanner.nextInt();
		for (int i = 0; i < T; i++) {
			int N = scanner.nextInt();
			int total = 0;
			Dictionary dic = new Dictionary();
			for (int j = 0; j < N; j++) {
				String word = scanner.next();
				int commonLen = dic.put(word);
				//writer.print(word);
				//writer.print(":");
				//writer.println(commonLen);
				total += (
					commonLen > 0 ? 
							(commonLen < word.length() ? commonLen + 1 : commonLen) : 1
				);
			}
			writer.println(String.format("Case #%d: %d", i+1, total));
		}
		
		scanner.close();
		writer.close();
	}

	public static class Dictionary {
		private Node root = new Node();
		private static class Node {
			public Map<Byte, Node> children = new HashMap<Byte, Node>();
		}
		
		public int put(String v) {
			byte[] bytes = v.getBytes();
			Node parent = root;
			int i = 0; //common length
			for (i = 0; i < bytes.length; i++) {
				Node child = parent.children.get(bytes[i]);
				if (child == null) {
					for (int j = i; j < bytes.length; j++) {
						child = new Node();
						parent.children.put(bytes[j], child);
						parent = child;
					}
					
					return i;
				} 
				
				parent = child;
			}
			
			return i;
		}
	}

}

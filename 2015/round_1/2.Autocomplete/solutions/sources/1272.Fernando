#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

struct Node
{
	unsigned int level;
	unordered_map<char, Node*> mapa;
	Node(): level(0){};
	Node(unsigned int _level): level(_level){};
};

void freeNodes(Node *node)
{
	for(auto it = node->mapa.begin(); it != node->mapa.end(); ++it )
		freeNodes(it->second);
}
	
int main()
{
	unsigned int T;
	cin >> T;
	for(unsigned int iCase=1; iCase<=T; iCase++)
	{
		unsigned int N;
		cin >> N;
		Node *root = new Node;
		unsigned int keyCount = 0;
		for(unsigned int i=0; i<N; i++)
		{
			string word;
			cin >> word;
			Node *curr = root;
			Node *temp;
			bool found = false;
			for(unsigned int j=0; j<word.size(); j++)
			{
				if(curr->mapa.count(word[j]))
					curr = curr->mapa[word[j]];
				else
				{
					keyCount += j+1;
					found = true;
					while(j<word.size())
					{
						temp = new Node(j+1);
						curr->mapa[word[j]] = temp;
						curr = temp;
						j++;
					}
				}
			}
			if(!found)
				keyCount += word.size();
		}
		cout << "Case #" << iCase << ": " << keyCount;
		if(iCase!=T)
			cout << endl;
	}
}

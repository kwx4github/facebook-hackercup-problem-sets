import java.io.IOException;
import java.util.InputMismatchException;
import java.util.HashMap;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Autocomplete solver = new Autocomplete();
		solver.solve(1, in, out);
		out.close();
	}
}

class Autocomplete {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int t = in.nextInt();



        for(int tc = 0;tc<t;tc++) {
    
            int n = in.nextInt();
            String [] strs= new String[n];
            HashMap<Long,Integer> mTo1= new HashMap<Long,Integer>();
            HashMap<Long,Integer> mTo2= new HashMap<Long,Integer>();
            int count = 0;
            for(int i=0;i<n;i++) {
                strs[i] = in.nextToken();
                final long p1 = 47;
                final long p2 = 41;
                long hash1 = 0;
                long hash2 = 0;
                long pow1 = 1;
                long pow2 = 1;
                for(int j=0;j<strs[i].length();j++) {
                    hash1 += (strs[i].charAt(j) - 'a' + 1) * pow1;
                    hash2 += (strs[i].charAt(j) - 'a' + 1) * pow2;

                    if(mTo1.containsKey(hash1)) {
                        mTo1.put(hash1,mTo1.get(hash1)+1);
                    }
                    else {
                        mTo1.put(hash1,1);
                    }

                    if(mTo2.containsKey(hash2)) {
                        mTo2.put(hash2,mTo2.get(hash2)+1);
                    }
                    else {
                        mTo2.put(hash2,1);
                    }
                    pow1*=p1;
                    pow2*=p2;
                }

                 boolean found = false;
                 hash1 = 0;
                 hash2 = 0;
                 pow1 = 1;
                 pow2 = 1;
                 for (int j = 0;j<strs[i].length()-1;j++) {
      
                    hash1 += (strs[i].charAt(j) - 'a' + 1) * pow1;
                    hash2 += (strs[i].charAt(j) - 'a' + 1) * pow2;
                    if(mTo1.get(hash1)==1 || mTo2.get(hash2)==1 ) {
                        count += (j+1);
                        found = true;
                        break;

                    }

                 

                    pow1*=p1;
                    pow2*=p2;
                }

                if(!found) {
                    count += strs[i].length();
                }

            }



            out.println("Case #"+(tc+1)+": "+count);


        }

    }
}

class InputReader {

    private InputStream stream;
    int curCharIndex = 0;
    int charsInBuf = 0;
     byte buf[] = new byte[16*1024];

    public InputReader(InputStream stream) {
        this.stream = stream;
    }


    public int readChar() {

        if (curCharIndex >= charsInBuf) {
            curCharIndex = 0;
            try {
                charsInBuf = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (charsInBuf <= 0)
                return -1;
        }
        return buf[curCharIndex++];
    }


    public int nextInt() {

        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        int sign = 1;
        if (c == '-') {
            c = readChar();
            sign = -1;

        }
        int res = 0;
        do {
            res *= 10;
            res += c - '0';
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return sign * res;
    }


    public String nextToken() {
        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return res.toString();
    }

    /*
    * For the purpose of compatibilty with Chelper Chrome extension
     */


    private boolean isWhitespace(int c) {
        return  c==' ' || c=='\n'|| c=='\r' || c=='\t';
    }
}


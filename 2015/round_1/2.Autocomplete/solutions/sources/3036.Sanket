#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
struct node
{
    struct node *next[27];
    int is_end;
    int num_words;
};
typedef struct node trie;
trie *root = NULL;
trie* getNode()
{
    trie *newNode = NULL;
    newNode = (trie *)malloc(sizeof(trie));
    newNode->is_end=0;
    newNode->num_words=0;
    for(int i=0;i<26;i++)
    {
        newNode->next[i] = NULL;
    }
    return newNode;
}
 int add_word(string word)
 {
    int len = word.length(),flag=0,position=-1;
    trie *current = root;
    for(int i=0;i<len;i++)
    {
        if(current->next[word[i]-'a']==NULL)
        {
            //cout<<word[i]<<" entered\n";
            trie *new_node = getNode();
            current->next[word[i]-'a'] = new_node;
            //if(current == root)
                new_node->num_words =1;
            //else new_node->num_words = current->num_words;
            current = current->next[word[i]-'a'];

        }
        else
        {
            current = current ->next[word[i]-'a'];
            current->num_words++;
            //cout<<current->num_words<<endl;
        }
        if(i==len-1)
        {
                current->is_end=1;
        }
        if(flag==0 && current->num_words==1)
        {
            flag=1;
            //cout<<"position "<<i<<endl;
            position = i;
        }
        if(position==-1)
        {
            position=len-1;
        }
    }
    //cout<<position<<endl;
    return position;
 }
int main()
{
    freopen("in2.txt","r",stdin);
    freopen("out2.txt","w",stdout);
    int t,k=1;
    cin>>t;
    while(t--)
    {
        int n,pos,ans=0;
        cin>>n;
        string s;
        root = getNode();
        for(int i=0;i<n;i++)
        {
            cin>>s;
            pos = add_word(s);
            ans += pos+1;
        }
        cout<<"Case #"<<k<<": "<<ans<<endl;
        k++;
    }
    return 0;
}

#include<cstdio>
#include<cstring>

using namespace std;

const int ALPHABETS = 26;
int toNumber(char ch) { return ch - 'a'; }

int last=-1;
bool chk=false; 

struct TrieNode {
	TrieNode* children[ALPHABETS];
	bool terminal;
	int branchs, depth;
	TrieNode() {
		this->terminal = false;
		this->branchs = 0;
		memset(children, 0, sizeof(children));
	}
	~TrieNode() {
		for(int i=0 ; i<ALPHABETS ; ++i)
			if(children[i])
				delete children[i];
	}

	void insert(const char* key) {
		if(*key == 0) terminal = true;
		else {
			int next = toNumber(*key);
			if(children[next] == NULL) {
				children[next] = new TrieNode();
				this -> branchs++;
				children[next]->depth = this->depth + 1;
				if(!chk) chk=true, last=children[next]->depth;
			}
			children[next] -> insert(key+1);
		}
	}
	TrieNode* find(const char* key) {
		if(*key == 0) return this;
		int next = toNumber(*key);
		if(children[next] == NULL) return NULL;
		return children[next] -> find(key+1);
	}
};

const int L_MAX = 1100000;
char input[L_MAX];


int main() {

	freopen("in.in", "r", stdin);
	freopen("out.out", "w", stdout);

	int T;
	scanf("%d", &T);

	for(int t=1 ; t<=T ; t++) {
		TrieNode trie;
		int n;
		long long ans=0;

		scanf("%d", &n);
		trie.depth=0;

		for(int i=1 ; i<=n ; i++) {
			scanf("%s", input);
			last=-1; chk=false;
			
			trie.insert(input);
			if(last==-1) last=strlen(input);
			ans+=last;
//			printf("%d\n", last);
		}

		printf("Case #%d: %lld\n", t, ans);
	}

	return 0;
}
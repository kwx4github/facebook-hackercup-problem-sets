#include <stdio.h>
#include <map>
#include <deque>
struct node{
  std::map<char, struct node*> sons;
} root;

std::deque<struct node*> buffer;

int add_word(char* word) {
  struct node *p = &root;
  int res = 0;
  int i;
  for ( i = 0; word[i] != '\0'; i ++ ) {
    if (p -> sons.count( word[i] ) ) {
      p = p -> sons[word[i]];
    } else {
      p -> sons[word[i]] = new struct node;
      p = p -> sons[word[i]];
      buffer.push_back(p);
      if (res == 0) 	res = i+1;
    }
  }
  if (res == 0)  res = i;
  return res;
}

int clear() {
  while ( !buffer.empty() ) {
    struct node *p = buffer.front();
    delete p;
    buffer.pop_front();
  }
  root.sons.clear();
  return 0;
}

int main() {
  int T, N, C = 0;
  char input[1000001];
  scanf("%d", &T);
  while ( C < T ) { C ++;
    scanf("%d", &N);
    int count = 0;
    while ( N -- > 0 ) {
      scanf("%s", input);
      int t = add_word(input);
      //printf("%d\n", t);
      count += t;
    }
    printf("Case #%d: %d\n", C, count);
    clear();
  }
  return 0;
}

#include<iostream>
#include<cstdio>
#include<fstream>
#include<vector>
#include<set>
#include<map>
#include<algorithm>
#include<sstream>
#include<string>
#include<iterator>
#include<functional>
#include<time.h>
#include<iomanip>
using namespace std;
typedef long long int ll;
typedef long double ld;
#define INF 100000000000000000LL

ll diff(ll a,ll b)
{
    return a>b ? a-b : b-a;
}

/*#define COMB_NUM 10001L
ll comb[COMB_NUM][COMB_NUM];
//need init_comb();
void init_comb()
{
    comb[0][0]=1;
    ll i,j;
    for(i=1;i<COMB_NUM;i++)
    {
        comb[i][0]=comb[i][i]=1;
        for(j=1;j<i;j++)
            comb[i][j]=comb[i-1][j]+comb[i-1][j-1];
    }
}
*/

#define print(a)      for(int i=0;i<a.size();i++) cout<<a[i]<<" "; cout<<endl;
#define print2n(a,n)      for(int i=0;i<=n;i++) cout<<a[i]<<" "; cout<<endl;

void llFromString(const string &s,ll &a,ll &b)
{
    string replacedString = s;
    replace_if(replacedString.begin(),
               replacedString.end(),
               bind2nd(equal_to<char>(),'.'),
               ' ');
               
    istringstream buffer(replacedString);
    buffer>>a;
    if(buffer.good())
    {
        buffer>>b;
    }
    else
    {
        b=0;
    }
}


template<class T>
vector<T> split(const std::string &s) {
    
    string replacedString = s;
    replace_if(replacedString.begin(),
               replacedString.end(),
               bind2nd(equal_to<char>(),'.'),
               ' ');
    
    vector<T> ret;
    istringstream buffer(replacedString);
    copy(istream_iterator<T>(buffer),
         istream_iterator<T>(), back_inserter(ret));
    return ret;    
}// vector<ll> k = split<ll>(s);

ll ans;

struct TrieNode
{
    TrieNode* l[26];
 
    TrieNode()
    {
        memset(l, 0, sizeof(TrieNode*) * 26);
    }
};

TrieNode *root = 0;

void add(char* s)
{
    TrieNode* p = root;
    bool hasNewed=false;
    int i;
    for (i=0; *s; ++s,++i)
    {
        if (!p->l[*s-'a'])
        {
            if(!hasNewed)
            {
                hasNewed=true;
                ans+=i+1;
                //cout<<i+1<<endl;
            }
            p->l[*s-'a'] = new TrieNode();
        }
        p = p->l[*s-'a'];
    }
    if(!hasNewed) {
        ans+=i;
        //cout<<i<<endl;
    }
}

void release(TrieNode* p = root)
{
    for (int i=0; i<26; ++i)
        if (p->l[i])
        {
            release(p->l[i]);
            p->l[i]=0;
        }
    delete p;
}

int main()
{
	fstream in,out;
	//in.open("autocomplete_example_input.txt",ios::in); out.open("out.txt",ios::out);
	in.open("autocomplete.txt",ios::in); out.open("A-small-0.txt",ios::out);
	//  in.open("A-large.in",ios::in); out.open("A-large-0.out",ios::out);

	istream& input = in;
	ostream& output = out;

	ll case_id,total_case,temp;

	input>>total_case; 
	ll I,H,K,L,N;
	char s[1000001];
	for(case_id=1;case_id<=total_case;case_id++)
	{
        input>>N;
        ans=0;
        root = new TrieNode();
        for(I=0;I<N;I++)
        {
            input>>s;
            add(s);
        }
        
        //release();
ANS:
		output<<"Case #"<<case_id<<": "<<ans;
		output<<endl;
	}
    //system("PAUSE");
    return EXIT_SUCCESS;
}

#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;

#define DEBUG 0

struct trie {
  struct node {
    node *c[26];
    node() { memset(c, 0, sizeof c); }
  } *root;

  trie() { root = 0; }

  void add(node *&p, char *s) {
    if (!p) p = new node();
    if (*s) add(p->c[*s - 'a'], s + 1);
  }

  int prelen(char *s) {
    if (!root) return 1;
    int cnt = 1;
    for (node *n = root->c[*(s++) - 'a']; *s; s++) {
      if (!n) break;
      if (DEBUG) printf("[%c]", *s);
      n = n->c[*s - 'a'];
      cnt++;
    }
    if (DEBUG) printf("\n");
    return cnt;
  }
};

int T, N;
char s[1000005];

int main() {
  freopen("autocomplete_input.txt", "r", stdin);
  freopen("autocomplete_output.txt", "w", stdout);
  scanf("%d", &T);
  for (int t = 1; t <= T; t++) {
    long long tot = 0;
    trie tr;
    scanf("%d", &N); gets(s);
    for (int i = 0; i < N; i++) {
      gets(s);
      if (DEBUG) puts(s);
      int ans = tr.prelen(s);
      if (DEBUG) printf(">>> %d\n", ans);
      tot += ans;
      tr.add(tr.root, s);
    }
    cout << "Case #" << t << ": " << tot << endl;
  }
  return 0;
}

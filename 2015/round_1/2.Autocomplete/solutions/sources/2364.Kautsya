#include <bits/stdc++.h>
using namespace std;

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[26];
};
 
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < 26; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
void insert(trie_t *pTrie, string key)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
 
        pCrawl = pCrawl->children[index];
    }
 
    pCrawl->value = pTrie->count;
}

int search(trie_t *pTrie, string key)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
 
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
 
        if( !pCrawl->children[index] )
        {
            return level+1;
        }
 
        pCrawl = pCrawl->children[index];
    }
 	return length;
}

int main()
{
	int test;cin>>test;
	for(int i=0;i<test;i++){
	    trie_t trie;
	 
	    initialize(&trie);
	    int t,ans=0;
		cin>>t;
	    for(int j = 0; j < t; j++)
	    {
	    	string temp;
	    	cin>>temp;
	    	if(search(&trie, temp)==temp.length())ans+=temp.length();
	    	else{
	    		ans+=search(&trie, temp);
	    	}
	        insert(&trie, temp);
	    }
	    cout<<"Case #"<<i+1<<": "<<ans<<'\n';
	} 
    return 0;
}

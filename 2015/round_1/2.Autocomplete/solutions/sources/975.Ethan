#include <stdio.h>
#include <string>

struct Trie {
	Trie(Trie* creator = NULL, int len = 0)
		: word_count(0), length(len), parent(creator) {
		for (int i = 0; i < 26; ++i) next[i] = NULL;
	}

	~Trie() {
		for (int i = 0; i < 26; ++i) 
			delete next[i];
	}

	Trie* Insert(const std::string& word) {
		Trie* actual = this;
		for (int i = 0; i < word.size(); ++i) {
			++actual->word_count;
			if (!actual->next[word[i] - 'a'])
				actual->next[word[i] - 'a'] = new Trie(actual, i + 1);
			actual = actual->next[word[i] - 'a'];
		}
		++actual->word_count;
		return actual;
	}

	Trie* parent;
	Trie* next[26];
	int word_count, length;
};

const int kMaxL = 1000002;

int main() {
	int t, n;
	scanf("%d", &t);
	char* line = new char[kMaxL];

	for (int i = 1; i <= t; ++i) {
		int answer = 0;
		scanf("%d", &n);
		Trie* root = new Trie;
		for (int j = 0; j < n; ++j) {
			scanf("%s", line);
			std::string word(line);
			Trie* word_end = root->Insert(word);

			Trie* del_chars = word_end;
			while (del_chars->word_count == 1) {
				if (!del_chars->parent) break;
				del_chars = del_chars->parent;
			}

			int types = del_chars->length;
			if (del_chars != word_end) ++types;
			answer += types;
		}
		printf("Case #%d: %d\n", i, answer);
		//delete root;
	}
	//delete[] line;
	return 0;
}
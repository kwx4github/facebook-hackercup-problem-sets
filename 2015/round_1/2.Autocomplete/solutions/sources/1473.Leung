#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <fstream>
#include <string>
#include <vector>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s); i>=(e); i--)
#define LL long long
#define eps 1e-6
#define pi acos(-1.0)
#define fail {printf("Impossible\n"); return 0;}
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

struct P{
    double x, y;
    P(){}
    P(double x, double y):x(x) , y(y){}
    P operator+ (const P &a) const {return P(x+a.x, y+a.y);}
    P operator- (const P &a) const {return P(x-a.x, y-a.y);}
    double operator^ (const P &a) const {return x*a.x+y*a.y;}
    void in(){scanf("%lf%lf", &x, &y);}
    void out(){printf("REQUIRED %.7f %.7f\n", x, y);}
    double dist(P a, P b) {return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}
    double sqdist(P a, P b) {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}

};

#define M 28
#define N 3000000

int h, nxt[N][M], n;
int contain[N];
LL cnt;

void solve(){
    h = 0;
    FOR(i, 0, M) nxt[0][i] = -1;
    scanf("%d", &n);
    cnt = 0;
    while (n--){
        string x;
        cin>>x;
        int now = 0;
        int high = 0, ok = 0;
        FOR(i, 0, x.length()){
            if (ok == 0) high++;
            int id = (int)(x[i] - 'a' + 1);
            if (nxt[now][id] == -1){
                nxt[now][id] = ++h;
                FOR(i, 0, M) nxt[h][i] = -1;
                ok = 1;
            }
            now = nxt[now][id];
        }
        cnt += (LL)high;
    }
    printf("%I64d\n", cnt);
}

int main(){
    freopen("B.in", "r", stdin);
    freopen("B.out", "w", stdout);
    int t;
    scanf("%d", &t);
    FOE(i, 1, t){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

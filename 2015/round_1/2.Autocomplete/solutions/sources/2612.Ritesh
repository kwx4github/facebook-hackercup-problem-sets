//package Round1;

import java.util.*;
import java.io.*;

public class P2 {
	
	class TrieNode {           
	    public TrieNode()  {
	        children = new TrieNode[26];
	    }    
	    public TrieNode[] getChildren() {   return children;  }    
	    private TrieNode[] children;
	}

	public static final int MAX_SIZE = 1000001;
	public static int trie[][] = new int[MAX_SIZE][26];

	public void run() throws IOException {
        in = new FastScanner(new FileInputStream("autocomplete.txt"));
        out = new PrintWriter(new FileOutputStream("autocomplete.out"));

        int tn = in.nextInt();
        for (int test = 1; test <= tn; test++) {
            int N = in.nextInt(), count = 0;
            TrieNode root = new TrieNode();
            
            for(int i = 0; i < N; i++) {
            	String x = in.next();
            	count += insertIntoTrie(root, x);
            }
            
            out("Case #%d: %d\n", test, count);
        }

        out.close();
    }
	
	private int insertIntoTrie(TrieNode root, String x) {
		char[] arr = x.toCharArray();
		int ans = 0;
		boolean flag = true;
		TrieNode temp = root;
		for(int i = 0; i < arr.length; i++) {
			int j = arr[i] - 'a';
			//trie[i][j]++;
			TrieNode[] nodes = temp.getChildren();
			if(nodes[j] != null) {
				temp = nodes[j];
			}
			else {
				temp = new TrieNode();
				nodes[j] = temp;
				if (flag) {
					ans = i + 1;
					flag = false;
				}
			}
		}
		if(flag) return arr.length;
		return ans;
	}

	void out(String format, Object... args) {
        out.printf(format, args);
        System.out.printf(format, args);
    }

    FastScanner in;
    PrintWriter out;

    public static void main(String[] args) throws IOException {
        new P2().run();
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream in) throws IOException {
            br = new BufferedReader(new InputStreamReader(in));
        }

        String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(br.readLine());
                }
            } catch (IOException e) {
                System.err.println(e);
                System.exit(1);
            }
            return st.nextToken();
       }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

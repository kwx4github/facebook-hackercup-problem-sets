#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <malloc.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include <map>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b);
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>=0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
struct node{
	
	node *child[26];
};
string a[100005];
int main()
{
	ios_base::sync_with_stdio(0); //dont use with EOF
	int t,l=0,n,i,k,ans;
	cin>>t;
	while(t--)
	{
		l++;
		cin>>n;
		FOR(i,n)
		cin>>a[i];
		
		node *root=(node*) malloc(sizeof(node));
		FOR(k,26) root->child[k]=NULL;
		ans=0;
		FOR(i,n)
		{
			string s=a[i];
			int len=s.length();
			node *ptr=root;
			int x=0;
			int y=0;
			int flag=0;
			while( x<len)
			{
				if( ptr->child[ s[x]-'a' ] ==NULL )
				{
					if(flag==0){
						y++; flag=1;
					}
					node *tmp= (node*) malloc(sizeof(node));
					FOR(k,26) tmp->child[k]=NULL;
					ptr->child[ s[x]-'a' ] = tmp;
					ptr=tmp;
				}
				else
				{
					y++;
					ptr=ptr->child[ s[x]-'a' ] ;
				}
				x++;
			}
			ans=ans+y;
		//	cout<<y<<endl;
		}
		cout<<"Case #"<<l<<": "<<ans<<endl;
	}
	return 0;
}

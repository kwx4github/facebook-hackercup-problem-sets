#!/usr/bin/python3

from sys import stdin

def main():
	T = int(stdin.readline().strip())
	for nCase in range(1, T+1):
		N = int(stdin.readline().strip())
		
		words = [None]*N
		for idx in range(N):
			words[idx] = stdin.readline().strip()
			
		print("Case #{}: {}".format(nCase, solve(words)))  

def solve(words):
	trie = {} # a trie keeping track of all prefixes
	total = 0 # number of letters written
	for word in words:
		done = False #word not written yet
		subtrie = trie #keep track of our position in the trie as we go through the word
		for idx, c in enumerate(word, 1):
			if c in subtrie: # if there is a link labeled by the current character
				subtrie = subtrie[c] # follow it
			else: # otherwise, it is the first time this prefix is seen
				subtrie[c] = {} # so we must augment the datastructure
				subtrie = subtrie[c] #follow the newly created link
				
				if not done: # if we haven't already  written the word, we can safely do so
					done = True # make sure we don't write the word again
					total += idx # number of letters to write equals the position in the word
		
		if not done: # the entire word is a prefix of another word
			total += len(word) # so we must write the entire word
			
	return total

main()

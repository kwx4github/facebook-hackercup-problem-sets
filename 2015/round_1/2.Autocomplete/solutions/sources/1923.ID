import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

class B {

	Node root;

	public B() {
		InputReader in = new InputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);

		for (int caseID = 1, T = in.nextInt(); caseID <= T; caseID++) {
			root = new Node(' ');
			int N = in.nextInt();
			int ans = 0;
			String next;
			for (int i = 0; i < N; i++) {
				next = in.next();
				ans += solve(next);
				insert(next);
			}
			out.println(String.format("Case #%d: %d", caseID, ans));
		}

		out.flush();
	}

	int solve(String word) {
		return solve(root, word, 0);
	}

	int solve(Node r, String w, int o) {
		if (o == w.length())
			return 0;
		char c = w.charAt(o);
		if (!r.containsValue(c))
			return 1;
		return 1 + solve(r.getNode(c), w, o + 1);
	}

	
	void insert(String word) {
		Node n = root;
		for (int i = 0; i < word.length(); i++) {
			n = nInsert(n, word, i);
		}
	}

	Node nInsert(Node r, String w, int o){
		if(o == w.length()) return null;
		char c = w.charAt(o);
		return r.getNode(c);
	}

	class Node {
		char value;
		Node children[];
		List<Node> ll;
		int nb;
		boolean isEnd;

		public Node(char value) {
			this.value = value;
			ll = new ArrayList<>();
			children = new Node[26];
			nb = 0;
		}

		public Node getNode(char c) {
			int index = c - 'a';
			if (!containsValue(c)) {
				children[index] = new Node(c);
				ll.add(children[index]);
				nb++;
			}
			return children[index];
		}

		public List<Node> getChildren() {
			return ll;
		}

		public boolean containsValue(char c) {
			return children[c - 'a'] != null;
		}
	}

	public static void main(String[] args) {
		new B();
	}

	public class InputReader {

		private StringTokenizer tokenizer;
		private BufferedReader reader;

		public InputReader(InputStream is) {
			reader = new BufferedReader(new InputStreamReader(is));
			tokenizer = new StringTokenizer("");
		}

		private String next() {
			while (!tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {}
			}
			return tokenizer.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public int[] nextIntArray(int size) {
			int arr[] = new int[size];
			for (int i = 0; i < arr.length; i++) {
				arr[i] = nextInt();
			}
			return arr;
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}
	}


}

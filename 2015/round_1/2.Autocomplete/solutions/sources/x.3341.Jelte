package competition;

import java.io.*;
import java.math.*;
import java.util.*;

public class Autocomplete {
  private static BufferedReader br;
  private static StringTokenizer st;
  private static PrintWriter pw;
  private static final String IN = "c:\\TEMP\\IN2.txt";
  private static final String OUT = "c:\\TEMP\\OUT.txt";
  private static final boolean DEBUG = false;
  private static String line;
  
  /////////////////
  // MAIN SCRIPT //
  /////////////////

  
  static Set<String> words = new HashSet<String>();
  static Set<String> prefix = new HashSet<String>();
  static Set<String> fixedWords = new HashSet<String>();
  public static void main(String[] args) throws IOException       {
    createIO();
    final int MAX_NUM_CASE = readInt();
    for(int qq = 1; qq <= MAX_NUM_CASE; qq++){
      words = new HashSet<String>();
      prefix = new HashSet<String>();
      fixedWords = new HashSet<String>();
      
      int n = readInt();
      String[] woord = new String[n];
      
      for (int i = 0; i<n; i++){
        String token = nextToken();
        words.add(token);
        woord[i] = token;
      }
      
      int answer = 0;
      int less = 0;
      for (String s : woord) {
        
        for (int i =1; i<s.length()+1; i++){
          String ss = s.substring(0, i);
          
          if (words.contains(ss) && !ss.equals(s)){ 
            if (less < s.length() - 1){ less = s.length() - 1;}
          }else if (!prefix.contains(ss) && !fixedWords.contains(ss)){
            prefix.add(ss);
            fixedWords.add(s);
            words.remove(s);
            answer += ss.length();
            break;
          }

        }
      }
      answer -= less;

      println("Case #" + qq + ": " + answer);
    }
    pw.close();
  }
  
  //////////////////////
  // HELPER FUNCTIONS //
  //////////////////////
  private static void print(Object s){
    if (DEBUG){ System.out.print(s); } 
    else { pw.print(s); }
  }
  private static void println(Object s){
    if (DEBUG){ System.out.println(s); } 
    else { pw.println(s); }
  }
  private static long readLong() throws IOException       {
    return Long.parseLong(nextToken());
  }
  private static double readDouble() throws IOException   {
    return Double.parseDouble(nextToken());
  }
  private static int readInt() throws IOException {
    return Integer.parseInt(nextToken());
  }
  private static String nextToken() throws IOException    {
    while(st == null || !st.hasMoreTokens())        {
      if(!br.ready()) {
        pw.close();
        System.exit(0);
      }
      line = br.readLine().trim();
      st = new StringTokenizer(line);
    }
    return st.nextToken();
  }
  private static void createIO() throws FileNotFoundException{
    br = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(IN))));
    if (DEBUG){
      pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    } else {
      pw= new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(OUT))));
    }    
  }
}

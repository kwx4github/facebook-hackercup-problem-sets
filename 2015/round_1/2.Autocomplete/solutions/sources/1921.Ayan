#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<algorithm>
#include<cstring>
#include<numeric>
#include<string>

using namespace std;

#define ll long long int 
#define ss1(a) scanf("%d",&a)
#define ss2(a,b) scanf("%d %d",&a,&b)
#define ss3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define loop(i,a,b) for(int i=a;i<b;i++)
#define loope(i,a,b) for(int i=a;i<=b;i++)
#define loopd(i,a,b) for(int i=a;i>=b;i--)


#define pii pair<int,int>
typedef vector<int> vi; 
typedef vector< vi > vvi;  
#define setzero(a) fill(a,a+sizeof(a),0);
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define mp(a,b) make_pair(a,b)
#define F first
#define S second
#define DEBUG if(0)

typedef struct node_t
{
    char data;
    int tag;
    struct node_t *l, *e, *r;
} node;


node* rt;
char s[1000010];
ll res=0;
void init(node* &x,char data)
{
    x = new node;
    x->data = data;
    x->tag = 0;
    x->l = x->e = x->r = NULL;
}

void insert()
{
    int i=0;
    int f=1;
    node** x=&rt;
    while(i<strlen(s))
    {
    	if ((*x)==NULL) 
    	{
    		//init(*x,s[i]); 
    		(*x) = new node;
    		(*x)->data = s[i];
    		(*x)->tag = 0;
    		(*x)->l = (*x)->e = (*x)->r = NULL;
    		//printf("%c\n",(*x)->data); 
    		//getchar();
    		if(f) res++;
    		f=0;
    	}	
    	
    	if (s[i] < (*x)->data) x=&(*x)->l;
    	else if (s[i] > (*x)->data) x=&(*x)->r;
    	else if(s[i] == (*x)->data) 
    	{
    		//printf("%c %d\n",x->data,f);
    		if(f) res++;
    		x=&(*x)->e;
    		i++;
    	}
    	//if(i==strlen(s)) x->tag=1;
    }
    return;	
}

int n;
void Scan()
{
	cin>>n;
	return;
}

void Out(int z)
{
	rt=NULL;
	res=0;
	loop(i,0,n)
	{
		scanf("%s",s);
		insert();
	}
	delete rt;
	printf("Case #%d: %lld\n",z,res);
	return;
}
int main()
{
	int t;cin>>t;
	loope(z,1,t)
	{
		Scan();
		Out(z);
	}
	return 0;
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

public class Autocorrect{
	private static String OUTFILE = "autocorrectout.txt";
	private static String INFILE = "autocorrectin.txt";
	private static BufferedReader br;
	private static BufferedWriter wr;
	public static void main(String args[]){
		try{
			br = new BufferedReader(new FileReader(INFILE));
			wr = new BufferedWriter(new FileWriter(OUTFILE));
		} catch (IOException e){
			System.out.println("IO Error");
		}
		int t = Integer.parseInt(next());
		String ans;
		int a, b, k;
		for (int i = 0; i < t; i++){
			ans = "Case #"+(i+1)+": ";
			int n = Integer.parseInt(next());
			Trie tr = new Trie(null, null);
			int count = 0;
			for (int j = 0; j < n; j++){
				String next = next();
				tr.addChild(next);
				// tr.print(0);
				count += tr.query(next, 0);
				// System.out.println(tr.query(next, 0));
			}
			ans = ans + count;
			System.out.println(ans);
			write(ans);
		}
		try{
			wr.close();
		} catch (IOException e){
			System.out.println("Error Closing");
		}
	}

	private static StringTokenizer st;

	private static String next(){
		while (st == null || !st.hasMoreElements()){
			String str;
			try{
				str = br.readLine();
			} catch (IOException e){
				return null;
			}
			st = new StringTokenizer(str);
		}
		return st.nextToken();
	}

	private static void write(String str){
		try{
			wr.write(str, 0, str.length());
			wr.newLine();
		} catch (IOException e){
			System.out.println("Problem writing");
		}
	}
}

class Trie {
	Trie[] children;
	Trie parent;
	String letter;
	int numWords;
	int numChildren;
	public Trie(Trie p, String l){
		children = new Trie[26];
		parent = p;
		letter = l;
		numWords = 1;
		numChildren = 0;
	}

	public void addChild(String s){
		numWords += 1;
		int i = 0;
		int limit = s.length();

		while(i < limit){
			if (letter == null || i == letter.length()){
				if (children[(int)s.charAt(i)-97] == null){
					children[(int)s.charAt(i)-97] = new Trie(this, s.substring(i));
					numChildren += 1;
					return;
				} else {
					children[(int)s.charAt(i)-97].addChild(s.substring(i));
					return;
				}
			} else if (s.charAt(i) == letter.charAt(i)){
				i++;
			} else {
				Trie cut = new Trie(this, letter.substring(i));
				cut.children = this.children;
				this.children = new Trie[26];
				cut.numWords = this.numWords-1;
				cut.numChildren = this.numChildren;
				children[(int)letter.charAt(i)-97] = cut;
				children[(int)s.charAt(i)-97] = new Trie(this, s.substring(i));
				this.letter = letter.substring(0, i);
				this.numChildren = 2;
				return;
			}
		}

		if (limit < letter.length()){
			Trie cut = new Trie(this, letter.substring(i));
			cut.children = this.children;
			this.children = new Trie[26];
			children[(int)letter.charAt(i)-97] = cut;
			cut.numWords = numWords - 1;
			cut.numChildren = this.numChildren;
			this.numChildren = 1;
			this.letter = s;
		}
	}

	public int query(String s, int count){
		if (this.parent != null && this.numWords == 1){
			return count+1;
		}
		if (this.parent != null && s.length() <= letter.length()){
			return count + s.length();
		}
		if (this.parent == null){
			return children[(int)s.charAt(0)-97].query(s, count);
		} else {
			return children[(int)s.charAt(letter.length())-97].query(s.substring(letter.length()), count+letter.length());	
		}
	}

	public void print(int j){
		System.out.println(j+letter);
		for (int i = 0; i < 26; i++){
			if (children[i] != null){
				children[i].print(j+1);
			}
		}
	}
}
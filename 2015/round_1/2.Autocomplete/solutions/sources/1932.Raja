#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <string.h>
#include <climits>
#define repx(i,x,n) for(int i=x;i<n;i++)
#define rep(i,n) repx(i,0,n)
#define pb push_back
#define full(v)  v.begin(),v.end()
#define np next_permutation
#define VI vector<int>
#define VS vector<string>
#define VC vector<char>
#define VD vector<double>
#define VF vector<float>
#define SI set<int>
#define SC set<char>
#define SS set<string>
#define MII map<int,int>
#define MSI map<string,int>
#define MIS map<int,string>
#define MIC map<int,char>
#define MCI map<char,int>
#define LL long long
#define MAX 10000001

using namespace std;

struct trie
{
  char c;
  trie *links[26]; 
  int endofword;

};
struct trie* root;
struct trie* temp;
int inserttotrie(string s)
{
    int ret =0;
    bool ok = false;
    for(int i =0 ; i<s.size() ; i++)
    {
        int val = s[i]-'a';
        if(root->links[val] != NULL)
        {
            root = root->links[val];
            ret++;
        }
        else
        {
            if(!ok)
            {
                ret++;
                ok= true;
            }
            struct trie *newNode = (struct trie *)malloc(sizeof(struct trie));
            newNode->c =s[i];
            root->links[val] = newNode;
            newNode->endofword = 0;
            for(int j = 0 ; j<26 ; j++)
                    newNode->links[j] = NULL;

            root = newNode;
        }
    }
    root->endofword = 1;
    return ret;
}
int main()
{
    ios_base::sync_with_stdio(false);
    int test;
    cin>>test;

    repx(testcase,1,test+1)
    {
        int ret =0 ;
        int D;
        cin>>D;
        root = (struct trie*)malloc(sizeof(struct trie));
        root ->c = '*';
        for(int j = 0 ; j<26 ; j++)
            root->links[j] = NULL;
        temp = root;
        for(int i=0; i<D; i++)
        {
            string s;
            cin>>s;
            ret+=inserttotrie(s);
            root = temp;
        }
        cout<<"Case #"<<testcase<<": "<<ret<<"\n";
        free(root);
        root = NULL;
    }
    return 0;
}

#include <cstring>
#include <iostream>
#include <vector>

using namespace std;

const int ALPHABET_SIZE = 26;
int t, n;
bool flag;

struct node{
    int directions[ALPHABET_SIZE];
    node(){};
    node(int trash){
        memset(directions, -1, sizeof(directions));
    }
};

vector<node> bor;

inline int add_symbol(int i, char c){
    int edge_to = bor[i].directions[c - 'a'];
    if (edge_to == -1){
        edge_to = bor[i].directions[c - 'a'] = bor.size();
        flag = true;
        bor.push_back(node(179));
    }
    return edge_to;
}

void dfs(int u) {
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        if (bor[u].directions[i] != -1) {
            cout << "+" << (char) 'a' + i << " ";
            dfs(bor[u].directions[i]);
            cout << "-" << (char) 'a' + i << " ";
        }
    }
}

int main(){
    cin.sync_with_stdio(0);
    cin >> t;
    for (int test_case = 1; test_case <= t; ++test_case) {
        string word;
        bor.clear();
        bor.assign(1, node(179));
        int ans = 0;
        cin >> n;
        for (int i = 0; i < n; ++i){
            cin >> word;
            flag = 0;
            for (int j = 0, index = 0; j < word.size(); ++j) {
                bool prev_flag = flag;
                index = add_symbol(index, word[j]);
                if (flag != prev_flag) {
                    ans += j + 1;
                    //cout << i << " " << j << "\n";
                }
            }
            if (!flag) {
                ans += word.size();
            }
        }
        //dfs(0);
        //cout << "\n";
        cout << "Case #" << test_case << ": " << ans << "\n";
    }
    return 0;
}

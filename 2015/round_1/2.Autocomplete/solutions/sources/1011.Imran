#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
#include <map>
#include <set>

using namespace std;

typedef pair<int,int> pii;
typedef long long int lli;

struct Node{
    Node* children[26];
    Node(){
        for(int i=0;i<26;i++) children[i]=NULL;
    }

    bool find(string &s, int i, int j){
        Node* cur=this;
        while(cur!=NULL && i<j){
            char c=s[i]-'a';
            if(cur->children[c]==NULL) break;
            cur = cur->children[c];
            i++;
        }
        return i==j;
    }

    void put(string &s){
        Node* cur=this;
        int i=0;
        while(cur!=NULL && i<s.size()){
            char c=s[i]-'a';
            if(cur->children[c]==NULL) cur->children[c] = new Node();
            cur = cur->children[c];
            i++;
        }
    }

    int countMatch(string &s){
        Node* cur=this;
        int i=0;
        while(cur!=NULL && i<s.size()){
            char c=s[i]-'a';
            if(cur->children[c]==NULL) break;
            cur = cur->children[c];
            i++;
        }
        return i;
    }
};



int main(){
    freopen("bin.txt", "r", stdin);
    freopen("bout.txt", "w", stdout);

    int T, n;
    cin >>T;
    for(int test=0;test<T;test++){
        cin >> n;
        string s;
        Node trie;
        int count=0;
        for(int i=0;i<n;i++){
            cin >> s;
            int match = trie.countMatch(s);
            //cout << match << endl;
            count += min(match+1 , (signed)s.size());
            if(!trie.find(s, 0, s.size())) trie.put(s);
        }
        cout << "Case #"<< test+1 <<": " << count << endl;
    }

    return 0;
}

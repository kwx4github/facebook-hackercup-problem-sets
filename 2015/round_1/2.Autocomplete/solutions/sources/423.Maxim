#include <algorithm>
#include <iomanip>
#include <istream>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
// Solution template generated by caide

struct Node {
	int numWords;
	map<char, Node*> children;


	Node() : numWords(0) {}

};

class Solution {
public:
    void solve(std::istream& in, std::ostream& out) {
		int T;
		in >> T;
		for (int test = 1; test <= T; ++test) {
			out << "Case #" << test << ": ";
			Node root;
			int N;
			in >> N;
			int res = 0;
			while (N-- > 0) {
				string word;
				in >> word;
				bool found = false;
				Node* cur = &root;
				for (char c : word) {
					if (!found)
						++res;
					Node* next = cur->children[c];
					if (!next)
						cur->children[c] = next = new Node();
					cur = next;
					++cur->numWords;
					if (cur->numWords == 1)
						found = true;
				}
			}

			out << res << endl;
		}
    }
};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);
    Solution solution;
    solution.solve(in, out);
}


#include <iostream>


int main() {
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    solve(std::cin, std::cout);
    return 0;
}



























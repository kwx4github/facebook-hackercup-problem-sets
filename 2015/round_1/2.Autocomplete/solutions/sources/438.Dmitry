#pragma comment(linker, "/STACK:128777216")

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <sstream>

#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>

#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <string.h>

#include <memory.h>
#include <cassert>
#include <time.h>

using namespace std;

#define forn(i,n) for (int i = 0; i < (int)(n); i++)
#define fornd(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)(a); i <= (int)(b); i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)

#define _(a, val) memset (a, val, sizeof (a))
#define sz(a) (int)((a).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef long long lint;
typedef unsigned long long ull;
typedef long double ld;

const lint LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

#ifdef MY_DEBUG
#define dbgx( x ) { cerr << #x << " = " << x << endl; }
#define dbg( ... ) { fprintf(stderr, __VA_ARGS__); fflush(stderr); }
#else
#define dbgx( x ) {  } 
#define dbg( ... ) {  } 
#endif

void prepare (string s)
{
#ifdef MY_DEBUG
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
#else
	if (s.length() != 0)
	{
		freopen ((s + ".in").c_str(), "r", stdin);
		freopen ((s + ".out").c_str(), "w", stdout);
	}
#endif
}

const int NMAX = 2000055;

class Trie
{
public:
	int nxt[NMAX][26], cnt[NMAX], FreeVertex;

	void build()
	{
		_(nxt, -1);
		_(cnt, 0);
		FreeVertex = 1;
	}

	void add(const string &s)
	{
		int len = s.length();
		int cur = 0;
		cnt[cur] ++;
		forn(i, len)
		{
			int c = s[i] - 'a';
			if (nxt[cur][c] == -1)
				nxt[cur][c] = FreeVertex ++;
			cur = nxt[cur][c];
			cnt[cur] ++;
		}
	}

	int get(const string &s)
	{
		int len = s.length();
		int cur = 0;
		int ans = 0;
		forn(i, len)
		{
			if (cnt[cur] == 1)
				return max(1, ans);
			ans ++;
			cur = nxt[cur][s[i] - 'a'];
		}

		return len;
	}
};

Trie trie;
string str[NMAX];
int n;
char tmp[NMAX];

void read()
{
	scanf("%d\n", &n);
	forn(i, n)
	{
		scanf("%s", tmp);
		str[i] = tmp;
	}
}

void solve()
{
	int ans = 0;
	trie.build();
	forn(i, n)
	{
		trie.add(str[i]);
		ans += trie.get(str[i]);
	}

	printf("%d\n", ans);
}

int get_rand(int l, int r)
{
	return l + rand() % (r - l + 1);
}

void gen()
{
	n = 10000;
	forn(i, n)
	{
		str[i] = "";
		forn(j, 100)
		{
			str[i].pb ( 'a' + get_rand(0, 25) );
		}
	}
}

int main()
{
	prepare("");

	int t;
	scanf("%d", &t);
	forn(i, t)
	{
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}

	return 0;
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <set>
#include <map>
#include <sys/resource.h>
using namespace std;
#define dprint(v) cerr << #v"=" << v << endl
#define forr(i, a, b) for(int i=(a); i<(b); i++)
#define forn(i, n) forr(i, 0, n)
#define dforn(i, n) for(int i=(n)-1; i>=0; i--)
#define forall(it,v) for(typeof((v).begin()) it=(v).begin();it!=(v).end();++it)
#define sz(c) ((int)c.size())
#define zero(v) memset(v, 0, sizeof(v))
typedef long long ll;
#define ii pair<int, int>
#define mkp make_pair
#define fst first
#define snd second
#define pb push_back
#include <sstream>
#define M 1000001001

int tot = 0;

struct trie{
	map<char, trie> m;
	void add(const string &s, int p=0){
		if(s[p]) m[s[p]].add(s, p+1);
	}
	int dfs(const string s, int p=0){
		//~ cerr << s[p] << " " ;
		if (s.length() <= p)
			return s.length();
		forall(it, m)
			if (it->first == s[p]){
				return it->snd.dfs (s,p+1);
			}
		//~ cerr << endl;
		
		return p+1;
			
	}
}tt;

int main() {
#ifndef ONLINE_JUDGE
	freopen("autocomplete.txt", "r", stdin);
		freopen("b.out", "w", stdout);
#endif
 const rlim_t kStackSize = 170 * 1024 * 1024;   // min stack size = 170 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }

	string s;
	int t,n;
	cin >> t;
	forn (i,t){
		cin >> n;
		
		forn (j,n){
			cin >> s;
			tot += tt.dfs(s);
			tt.add (s);
			//~ cerr << "HOLA";
			
			
			
		}
		

		cout << "Case #" << i+1 << ": " << tot << endl;
		tot = 0;
		
	tt = trie();
}	
		
  return 0;

}


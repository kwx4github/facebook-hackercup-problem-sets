#include <cstdio>

#define MAX_NODES 10000000
#define CHILDREN_COUNT   26

int nodes[MAX_NODES][CHILDREN_COUNT];
int weights[MAX_NODES];
char chars[MAX_NODES];
int ncount;
char word[10000000];

void init()
{
  ncount = 1;
  for(int i=0; i<CHILDREN_COUNT; i++)
    nodes[0][i] = -1;
  weights[0] = 0;
}

int get_new_node()
{
  int nn = ncount;
  for(int i=0; i<CHILDREN_COUNT; i++)
    nodes[nn][i] = -1;
  ncount++;
  return nn;
}

void append_from(int parent, char* w)
{
  //printf("append: %s (%d)\n",w,parent);
  while(*w != '\0') {
    int chnum = *w - 'a';
    int nn = get_new_node();
    nodes[parent][chnum] = nn;
    chars[nn] = *w;
    weights[nn] = 1;
    parent = nn;
    w++;
  }
}

void add_word(char* w)
{
  int u = 0;
  while(*w != '\0') {
    int chnum = *w - 'a';
    weights[u]++;
    if(nodes[u][chnum] != -1) {
      //printf("%d %c\n",nodes[u][chnum],*w);
      u = nodes[u][chnum];
      w++;
    } else {
      break;
    }
  }
  if(*w != '\0') {
    append_from(u,w);
  }
}

int key_count(char* w)
{
  //printf(": %s\n",w);
  //printf("> %c ",*w);

  int count = 1;
  int u = nodes[0][*w - 'a'];
  w++;
  while(*w != '\0') {
    if(weights[u] == 1) {
      //printf("\n");
      return count;
    }
    //printf("> %c ",*w);
    count++;
    u = nodes[u][*w - 'a'];
    w++;
  }
  //printf("\n");
  return count;
}

void process(int t)
{
  int n;
  int total = 0;
  
  scanf("%d",&n);
  for(int i=0; i<n; i++) {
    scanf("%s",word);
    add_word(word);
    int k = key_count(word);
    total += k;
  }
  printf("Case #%d: %d\n",t+1,total);
}

main()
{
  int t;
  scanf("%d",&t);
  for(int i=0; i<t; i++) {
    init();
    process(i);
  }
}


//
//  main.cpp
//  Problem 2.2
//
//  Created by Maxim Piskunov on 1/17/15.
//  Copyright (c) 2015 Maxim Piskunov. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <new>
#include <cassert>

// C++ Generic Binary Search Tree by lawliet89
// from https://gist.github.com/lawliet89/8623547 :

template <typename T> class Node {
public:
    
    Node<T> *parent, *left, *right;
    T data;
    
    Node() : parent(NULL), left(NULL), right(NULL) {
        parent = NULL;
        left = NULL;
        right = NULL;
    }
    
    Node(T data) : data(data),  parent(NULL), left(NULL), right(NULL) {
    }
    
    Node(T data, Node<T> *parent, Node<T> *left, Node<T> *right) :
    data(data), parent(parent), left(left), right(right) {
        
    }
    
    static void walk(const Node<T> *tree);
    static Node<T> *find(Node<T> *tree, T value);
    static Node<T> *minimum(Node<T> *tree);
    static Node<T> *maximum(Node<T> *tree);
    static Node<T> *successor(Node<T> *tree);
    static Node<T> *predecessor(Node<T> *tree);
    
    // Always returns the root of the tree, whether it had to be modified
    // or not
    static Node<T> *insertNode(Node<T> *tree, Node<T> *node);
    static Node<T> *deleteNode(Node<T> *tree, Node<T> *node);
    
private:
    static Node<T> *transplant(Node<T> *tree, Node<T> *u, Node<T> *v);
};

template<typename T> std::ostream &operator<<(std::ostream &output, Node<T> node);

template <typename T> void Node<T>::walk(const Node<T> *tree) {
    if (tree == NULL) return;
    
    walk(tree -> left);
    std::cout << tree -> data << "\n";
    walk(tree -> right);
}

template <typename T> Node<T> *Node<T>::insertNode(Node<T> *tree, Node<T> *node) {
    if (!tree) {
        tree = node;
        node -> parent = NULL;
    } else {
        Node<T> *parent, *search = tree;
        bool left = false;
        while (search != NULL) {
            parent = search;
            if (node -> data <= search -> data) {
                search = search -> left;
                left = true;
            } else {
                search = search -> right;
                left = false;
            }
        }
        node -> parent = parent;
        if (left) parent -> left = node;
        else parent -> right = node;
    }
    
    return tree;
}

template <typename T> Node<T> *Node<T>::find(Node<T> *tree, T value) {
    if (!tree || tree -> data == value) return tree;
    else if (value < tree -> data) {
        if (!(tree->left)) return tree;
        else return find(tree -> left, value);
    }
    else {
        if (!(tree->right)) return tree;
        else return find(tree -> right, value);
    }
}

template <typename T> Node<T> *Node<T>::minimum(Node<T> *tree) {
    if (!tree) return NULL;
    
    while (tree -> left) {
        tree = tree -> left;
    }
    
    return tree;
}

template <typename T> Node<T> *Node<T>::maximum(Node<T> *tree) {
    if (!tree) return NULL;
    
    while (tree -> right) {
        tree = tree -> right;
    }
    
    return tree;
}

template <typename T> Node<T> *Node<T>::successor(Node<T> *node) {
    if (!node) return NULL;
    
    if (node -> right) {
        return minimum(node -> right);
    } else {
        // We need to traverse upwards in the tree to find a node where
        // the node is the left child of a parent
        // parent is the successor
        
        Node<T> *parent = node -> parent;
        while(parent && node != parent -> left) {
            node = parent;
            parent = node -> parent;
        }
        
        if (parent) return parent;
        else return maximum(node);
    }
    
}

template <typename T> Node<T> *Node<T>::predecessor(Node<T> *node) {
    if (!node) return NULL;
    
    if (node -> left) {
        return maximum(node -> left);
    } else {
        // We need to traverse upwards in the tree to find a node where
        // the node is the left child of a parent
        // parent is the successor
        
        Node<T> *parent = node -> parent;
        while(parent && node != parent -> right) {
            node = parent;
            parent = node -> parent;
        }
        
        if (parent) return parent;
        else return minimum(node);
    }
    
}

// make node U's paarent have node v has its child
template <typename T> Node<T> *Node<T>::transplant(Node<T> *tree, Node<T> *u, Node<T> *v) {
    if (!u -> parent) tree = v;
    else if (u -> parent -> left == u) {
        u -> left = v;
    } else if (u -> parent -> right == u) {
        u -> right = v;
    }
    if (v) v -> parent = u -> parent;
    return tree;
}

template <typename T> Node<T> *Node<T>::deleteNode(Node<T> *tree, Node<T> *node) {
    if (!node -> left) {
        tree = transplant(tree, node, node -> right);
    } else if (!node -> right) {
        tree = transplant(tree, node, node -> left);
    } else {
        // Has two children -- successor must be on the right
        Node <int> *successor = minimum(node -> right);
        assert(successor -> left == NULL);
        if (successor != node -> right) {
            tree = transplant(tree, successor, successor -> right);
            successor -> right = node -> right;
            successor -> right -> parent = successor;
        }
        
        tree = transplant(tree, node, successor);
        successor -> left = node -> left;
        successor -> left -> parent = successor;
    }
    return tree;
}

template<typename T> std::ostream &operator<<(std::ostream &output, Node<T> node) {
    output << "Value: " << node.data;
    if (node.parent) output << " Parent: " << node.parent -> data;
    if (node.left) output << " Left: " << node.left -> data;
    if (node.right) output << " Right: " << node.right -> data;
    output << "\n";
    return output;
}

using namespace std;

struct input {
    int N;
    vector <string> words;
};

struct output {
    int count;
};

void read(ifstream &in, input &test) {
    in >> test.N;
    test.words.resize(test.N);
    for (int i = 0; i < test.N; i++) in >> test.words[i];
}

void write(ofstream &out, output test) {
    out << test.count;
}

int prefixLength(string a, string b) {
    int length = 0;
    for (int i = 0; i < min(a.length(), b.length()); i++) {
        if (a[i] == b[i]) length++;
        else break;
    }
    return length;
}

output solve (input test) {
    output result;
    result.count = 1;
    
    Node<string> wordNodes[100000];
    
    for (int i = 0; i < test.N; i++) {
        wordNodes[i] = test.words[i];
    }
    
    Node<string> *wordTree = NULL;
    wordTree = Node<string>::insertNode(wordTree, wordNodes);
    
    for (int i = 1; i < test.N; ++i) {
        Node<string> *bestGuessNode = Node<string>::find(wordTree, test.words[i]);
        string left = Node<string>::predecessor(bestGuessNode)->data;
        string middle = bestGuessNode->data;
        string right = Node<string>::successor(bestGuessNode)->data;
        
        int prefixSize = max(max(prefixLength(test.words[i], left), prefixLength(test.words[i], middle)), prefixLength(test.words[i], right));
        result.count += prefixSize;
        if (prefixSize != test.words[i].length()) result.count++;
        
        //cout << test.words[i] << " " << left << " " << middle << " " << right << " ";
        //cout << prefixSize << endl;
        
        wordTree = Node<string>::insertNode(wordTree, wordNodes + i);
    }
    
    return result;
}

void readAll(vector <input> &tests) {
    ifstream in("../../../../../input.txt");
    
    int T;
    in >> T;
    tests.resize(T);
    for (int i = 0; i < T; i++) {
        read(in, tests[i]);
    }
    
    in.close();
}

void writeAll(vector <output> &results) {
    ofstream out("../../../../../output.txt");
    
    out << "Case #1: ";
    write(out, results[0]);
    for (int i = 1; i < results.size(); i++) {
        out << endl << "Case #" << i+1 << ": ";
        write(out, results[i]);
    }
    
    out.close();
}

void solveAll(vector <input> &tests, vector <output> &results) {
    results.resize(tests.size());
    for (int i = 0; i < tests.size(); i++) results[i] = solve(tests[i]);
}

int main(int argc, const char * argv[]) {
    vector <input> tests;
    vector <output> results;
    
    readAll(tests);
    solveAll(tests, results);
    writeAll(results);
    
    return 0;
}
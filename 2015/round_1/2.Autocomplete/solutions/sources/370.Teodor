#include <stdio.h>              
#include <string.h>
#include <stdlib.h>

#define NMAX 1000100

struct TrieNode {
	TrieNode *sub[26];

	void Init() {
		memset(sub, 0, sizeof(sub));
	}
};

struct TrieAllocator {
	TrieNode nodes[NMAX];
	int allocated;

	TrieAllocator() {
		allocated = 0;
	}

	void Reset() {
		allocated = 0;
	}

	TrieNode *Alloc() {
		TrieNode *ret = &nodes[allocated++];
		ret->Init();
		return ret;
	}
};

TrieAllocator al;

void solve(FILE *fin, FILE *fout) {
	int n, m = 0, c = 0;
	bool typing = true;
	char ch;
	al.Reset();
	TrieNode *root = al.Alloc();

	TrieNode *curr = root;
	fscanf(fin, "%d\n", &n);

	do {
		if (EOF == fscanf(fin, "%c", &ch)) {
			break;
		}
		if (ch == '\n') {
			curr = root;
			c++;
			/*if (typing) {
				printf("<");
			}*/
			typing = true;
			//printf("\n");
		} else {
			int idx = ch - 'a';
			if (typing) {
				m++;
				//printf("%c", ch);
			}

			if (curr->sub[idx] == NULL) {
				typing = false;
				curr->sub[idx] = al.Alloc();
			}

			curr = curr->sub[idx];
		}

	} while (c < n);


	fprintf(fout, "%d\n", m);
	//printf("\n%d\n", m);
}

int main() {
	FILE *fin = fopen("input.txt", "rt");
	FILE *fout = fopen("output.txt", "wt");
	int n;

	fscanf(fin, "%d\n", &n);
	for (int i = 1; i <= n; ++i) {
		fprintf(fout, "Case #%d: ", i);
		solve(fin, fout);
	}


	fclose(fout);
	fclose(fin);
	return 0;
}

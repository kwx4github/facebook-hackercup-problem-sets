/*
ID: ashish1610
PROG:
LANG: C++
*/
#include<bits/stdc++.h>
using namespace std;
#define ll				long long int
#define vi				vector<int>
#define vl				vector<ll>
#define	pii				pair<int,int>
#define pil				pair<int, ll>
#define pll				pair<ll, ll>
#define pli 			pair<ll, int>
#define pb(v, a)		v.push_back(a)
#define mp(a, b)		make_pair(a, b)
#define MOD				1000000007
#define rep(i, a, b)	for(i=a; i<=b; ++i)
#define rrep(i, a, b)	for(i=a; i>=b; --i)
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")
ll pow_mod(ll a, ll b)
{
	ll res = 1;
	while(b)
	{
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
struct trie_node
{
	int visited;
	trie_node *child[26];
};
void insert_trie(trie_node *root, string str)
{
	int i, len = str.length(), j;
	rep(i, 0, len - 1)
	{
		if(root->child[str[i] - 'a'] == NULL)
		{
			trie_node *nd = (trie_node *)malloc(sizeof(trie_node));
			nd->visited = 1;
			rep(j, 0, 25)
				nd->child[j] = NULL;
			root->child[str[i] - 'a'] = nd;
		}
		else
			root->child[str[i] - 'a']->visited++;
		root = root->child[str[i] - 'a'];
	}
}
int query_trie(trie_node *root, string str)
{
	int i, len = str.length(), res = 0;
	rep(i, 0, len - 1)
	{
		res++;
		if(root->child[str[i] - 'a']->visited == 1)
			break;
		else
			root = root->child[str[i] - 'a'];
	}
	return res;
}
int main()
{
	int t, i, j, n, ans;
	si(t); 
	string str;
	rep(i, 1, t)
	{
		si(n);
		ans = 0;
		trie_node *root = (trie_node *)malloc(sizeof(trie_node));
		root->visited = 0;
		rep(j, 0, 25)
			root->child[j] = NULL;
		rep(j, 1, n)
		{
			cin>>str;
			insert_trie(root, str);
			ans += query_trie(root, str);
		}
		cout<<"Case #"<<i<<": ";
		pi(ans);
		pn;
	}
	return 0;
}
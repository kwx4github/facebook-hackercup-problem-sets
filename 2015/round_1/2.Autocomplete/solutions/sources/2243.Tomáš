#!/usr/bin/env python3

import sys

class node(object):
	def __init__(self, value, parent=None, depth=0):
		self.value = value
		self.children = {}
		self.word_counts = {}
		self.parent = parent
		self.depth = depth

	#def s(self, cnt="", level=0):
	#	ret = "\t" * level + repr(self.value) + "(" + cnt + ") " + "\n"
	#	for key, child in self.children.items():
	#		ret += child.s(str(self.word_counts[key]), level+1)
	#	return ret

def solve(words):
	letters = 0

	dictionary = node("")

	for word in words:
		ptr = dictionary
		i = 0
		for letter in word:
			i += 1

			if letter in ptr.children:
				ptr.word_counts[letter] += 1
			else:
				ptr.children[letter] = node(letter, ptr, ptr.depth + 1)
				ptr.word_counts[letter] = 1

			ptr = ptr.children[letter]

		empty_prefix = False
		whole_word_prefix = True
		while ptr.parent.word_counts[ptr.value] == 1:
			whole_word_prefix = False
			if ptr.depth == 1:
				empty_prefix = True
				break

			ptr = ptr.parent

		if empty_prefix:
			letters += 1
		elif whole_word_prefix:
			letters += ptr.depth
		else:
			letters += ptr.depth + 1

		#print(dictionary.s())

	return letters

def main():
	t = int(sys.stdin.readline().rstrip())

	for i in range(1, t+1):
		n = int(sys.stdin.readline().rstrip())

		words = []
		for j in range(n):
			words.append(sys.stdin.readline().rstrip())

		result = str(solve(words))
		print("Case #" + str(i) + ": " + result)

if __name__ == '__main__':
	main()
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long LL;
typedef double DB;
typedef unsigned UINT;
typedef unsigned long long ULL;

#define min(a, b)  a < b ? a : b
#define max(a, b)  a > b ? a : b

#define rep(i,n) for(int i=0;i<n;++i)
#define rep1(i,n) for(int i=1;i<=n;++i)
#define repab(i,a,b) for(int i=a;i<=b;++i)
#define dwn(i,n) for (int i=n-1;i>-1;--i)
#define dwn1(i,n) for (int i=n;i>0;--i)
#define dwnab(i,a,b) for(int i=a;i>=b;--i)
#define each(it, A) for (__typeof(A.begin()) it=A.begin(); it != A.end(); ++it)

#define pair pii<int, int>
#define all(v) (v).begin(), (v).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define sortv(v) sort(all(v))

#define mset(m) memset(m,0,sizeof(m))

#define sz(c) (int)c.size()
#define ff first
#define ss second

#define SI ({int x;scanf("%d", &x);x;});
#define SL ({LL x;scanf("%lld", &x);x;});

#define PI(n) printf("%d", n);
#define PLL(n) printf("%I64d", n);

#define PILN(n) printf("%d\n", n);
#define PLLN(n) printf("%I64d\n", n);

#define PLN printf("\n");

#define MAX 1000111

struct node
{ 
	char v;
	node *p[26];
	void clear()
	{
		rep(i, 26)
			p[i] = NULL;
	}
	void create()
	{
		int n = 26;
		rep(i, n)
			p[i] = NULL;
	}
}tree;


int t, n, s;
char w[MAX];


void complete(vector<node> p, char c)
{
	
}

int find(vector<node> p, char c)
{
	rep(i, sz(p))
		if (p[i].v == c)
			return i;
	return -1;
}

int minWord()
{
	int l = strlen(w), index = 0, sol = -1;
	
	node *t = &tree;
	
	while(true)
	{
		if (index == l)
			break;
		char i = w[index++] - 97;
		
		if (t->p[i]!=NULL)
		{
			t = t->p[i];
		}
		else
		{
			i = w[index - 1] - 97;
			t->p[i] = new node;
			t->p[i]->create();
			t->p[i]->v = i;
			t = t->p[i];
			if (sol < 0)
				sol = index;
		}
	}
	
	if (sol < 0)
		sol = index;
		
	return sol;
}

int main() {
	ios_base::sync_with_stdio(0);
	freopen("B.txt","w",stdout);
	freopen("autocomplete.txt","r",stdin);
	
    cin>>t;

	rep1(q, t)
	{
		tree.create();
		
		s = 0;
	   	cin>>n;
	    rep(i, n)
	    {
	    	//cout << i << endl;
		    cin>>w;
		    s += minWord();    
		}
			
		tree.clear();
			
	    printf("Case #%d: %d\n", q, s);
	}

	
    return 0;
}



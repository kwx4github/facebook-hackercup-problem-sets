#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

struct node {
    node *next[26];
};

node trie[1001000];
node *trie_p;

void solve() {
    memset(trie, 0, sizeof(trie));
    trie_p = trie;

    int N;
    cin >> N;
    int ret = 0;
    REP (_, N) {
        string x;
        cin >> x;

        int add = x.length();
        node *r = &trie[0];
        REP (i, x.length()) {
            int c = x[i] - 'a';
            if (!r->next[c]) {
                r->next[c] = ++trie_p;
                add = min(add, i+1);
            }
            r = r->next[c];
        }
        
        ret += add;
    }
    cout << ret << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

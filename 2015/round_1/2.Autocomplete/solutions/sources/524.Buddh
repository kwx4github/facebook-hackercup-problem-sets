#include <bits/stdc++.h>
using namespace std;
#define CHILD_SIZE 26

struct node{
    node * child[CHILD_SIZE];
    int cnt;
    node() {
        cnt = 0;
        for(int i = 0; i < CHILD_SIZE; ++i)
            child[i] = NULL;
    }
    void clear() {
        cnt = 0;
        for(int i = 0; i < CHILD_SIZE; ++i) {
            child[i] = NULL;
        }
    }
    ~node() {
        for(int i = 0; i < CHILD_SIZE; ++i) {
            delete child[i];
        }
    }
};
struct Trie {
private:
    int insert(node * cur, string s) {
        int val;
        bool done=false;
        cur->cnt++;
        for(int i = 0; i < s.size(); ++i) {
            int curPos = s[i] - 'a';
            if(cur->child[curPos] == NULL) {
                cur->child[curPos] = new node();
                if(!done)
                {
                	done=true;
                	val=i+1;
                }
                ++cntNodes;
            }
            cur = cur->child[curPos];
            cur->cnt++;
        }
        if(done)
	        return val;
	    else
	    	return s.size();
    }
public:
    int cntNodes;
    node * root;
    Trie() {
        cntNodes = 0;
        root = new node();
    }
    ~Trie() {
        delete root;
    }
    void clear() {
        cntNodes = 0;
        root = new node();
    }
    int insert(string str) {
        return insert(root, str);
    }
};
int main()
{
	freopen("autocomplete.txt","r",stdin);
	int t;
	cin>>t;
	for(int test=1;test<=t;test++)
	{
		Trie T;
		int n;
		cin>>n;
		int sumi=0;
		for(int i=0;i<n;i++)
		{
			string temp;
			cin>>temp;
			sumi+=T.insert(temp);
		}
		cout<<"Case #"<<test<<": "<<sumi<<endl;
	}
	return 0;
}
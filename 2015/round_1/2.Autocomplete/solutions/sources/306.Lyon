#include <bits/stdc++.h>
using namespace std;

const int K = 26;
const int N = 1234567;

struct Node {
	Node *nx[K];
	int cnt;

	void Clear() {
		memset(nx, 0, sizeof nx);
		cnt = 0;
	}
} ;

inline int GetIdx(const char c) { return c - 'a'; }

struct Trie {
	Node nodePool[N], *root;
	int ttNode;

	void Clear() {
		ttNode = 0;
		root = Mem();
	}

	Node *Mem() {
		Node *temp = nodePool + ttNode++;

		temp->Clear();

		return temp;
	}

	int Insert(const string s) {
		Node *p = root;
		int ret = s.length();

		for (int i = 0; s[i]; ++i) {
			int idx = GetIdx(s[i]);

			if (p->nx[idx] == 0) {
				p->nx[idx] = Mem();
			}
			++p->cnt;
			if (p->cnt == 1) {
				ret = min(ret, max(i, 1));
			}
			p = p->nx[idx];
		}
		++p->cnt;

		return ret;
	}
} trie;

vector<string> word;

int Run() {
	int T, n;

	cin >> T;
	for (int cas = 1; cas <= T; ++cas) {
		long long answer = 0;

		cin >> n;
		word.resize(n);
		trie.Clear();
		for (int i = 0; i < n; ++i) {
			cin >> word[i];
			answer += trie.Insert(word[i]);
		}
		cout << "Case #" << cas << ": " << answer << endl;
	}

	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	return Run();
}

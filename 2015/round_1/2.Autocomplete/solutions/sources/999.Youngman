#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <algorithm>

typedef long long           I64;
typedef unsigned long long  UI64;

using namespace std;

int gL;
char gB[2000000];
char gT[2000000];

int gN;
char* gS[100001];

bool isLess(char* l, char* r)
{
    return strcmp(l, r) < 0;
}

int find(char* l, char* r)
{
    int i = 0;

    while (l[i] && r[i] && l[i] == r[i])
        i++;

    return i;
}

void insert(int n, char* s)
{
    int i = upper_bound(gS, gS + n, s, isLess) - gS; 

    if (i < n)
    {
        memmove(gS + i + 1, gS + i, sizeof(char*) * (n - i));
        gS[i] = s;
    }
}

void process(FILE* pfIn, FILE* pfOut)
{
    int i, n, len, count;

    fscanf(pfIn, "%d", &count);
    for (i = 1; i <= count; i++)
    {
        fscanf(pfIn, "%d", &n);

        gL = 0;
        gN = 0;
        for (int j = 0; j < n; j++)
        {
            fscanf(pfIn, "%s", gT);
            len = strlen(gT);
            gS[gN] = gB + gL;
            strcpy(gS[gN], gT);

            gN++;
            gL += len + 1;
        }

        n = 1;

        int s, f;
        for (int j = 1; j < gN; j++)
        {
            s = upper_bound(gS, gS + j, gS[j], isLess) - gS;
            f = 0;
            if (s > 0)
                f = find(gS[s-1], gS[j]);
            if (s < j)
                f = max(f, find(gS[s], gS[j]));

            n += min(f + 1, (int)strlen(gS[j]));

            insert(j, gS[j]);
        }

        fprintf(pfOut, "Case #%d: %d\n", i, n);
    }
}

//-----------------------------------------------------------------------------

void process(const char* pcszInFile, const char* pcszOutFile)
{
    FILE* pfIn = fopen(pcszInFile, "rt");
    if (pfIn == NULL)
    {
        printf("file not found! \"%s\"\n", pcszInFile);
        exit(-2);
    }

    FILE* pfOut = fopen(pcszOutFile, "wt");
    if (pfOut == NULL)
    {
        printf("can't create file! \"%s\"\n", pcszOutFile);
        exit(-3);
    }

    process(pfIn, pfOut);

    fclose(pfIn);
    fclose(pfOut);
}

void main(int argc, char* argv[])
{
    if (argc != 3)
    {
        printf("Usage : %s <input_file> <output_file>\n", argv[0]);
        exit(-1);
    }

    process(argv[1], argv[2]);
}

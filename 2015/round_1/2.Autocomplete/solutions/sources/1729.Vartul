#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <numeric>
#include <bitset>
#define REP(i, a, b) for ( int i = int(a); i <= int(b); i++ )
#define PB push_back
#define MP make_pair
#define for_each(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define DFS_WHITE -1
#define DFS_BLACK 1
#define MAXN 1000
#define pi 3.141592653589793
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
#define INF 1<<30
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
#define MOD 1000000007
map<pair<int,int> ,int>mymap;
#define ALPHABET_SIZE (26)
struct node
{
	bool e;
	struct node* child[ALPHABET_SIZE];
};
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
struct node *getNode(void)
{
    struct node*pNode = NULL;
 
    pNode = (struct node *)malloc(sizeof(struct node));
 
    if( pNode )
    {
        int i;
 
        pNode->e = false;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->child[i] = NULL;
        }
    }
 
    return pNode;
}

void insert(struct node *pTrie, string key)
{
    ll level;
    ll length = key.size();
    int index;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pTrie->child[index] )
        {
            pTrie->child[index] = getNode();
        }
 
        pTrie = pTrie->child[index];
    }
 
    // mark last node as leaf
    pTrie->e = true;
}
ll ans = 0;
void search(struct node* pTrie, string key)
{
    ll level;
    ll length = key.size();
    int index;
 	ll count  = 0;
 	bool bt =false;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
 
        if( !pTrie->child[index] )
        {
        	count = level+1;
        	bt =true;
        	break;
        }
 
        pTrie = pTrie->child[index];
    }
 	if(!bt)
 		count = length;
 	ans+=count;
}
 
int main()
{
	int n = 0;
	cin>>n;
	int nn = 1;
	while(n--)
	{
		struct node*root = getNode();

		int t = 0;
		cin >>t;
		while(t--)
		{
			string x;
			cin>>x;
			search(root,x);
			insert(root,x);
		}
		printf("Case #%d: %lld\n",nn++,ans);
		ans =0;
	}
	return 0;
}
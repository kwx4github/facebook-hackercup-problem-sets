
#include <algorithm>
#include <fstream>
#include <iostream>
#include <unordered_set>
#include <string>
#include <vector>

// Autocomplete

struct node {
  bool used;
  node* children;//size 26
  node (): used(false) {}
};


void ClearMem(node * runner) { 

  if (runner->used) {
    for (int i = 0; i < 26; ++i) {
      ClearMem(&runner->children[i]);
    }
    delete [] runner->children; 
  }

}


int main (int argc, char** argv) {

  unsigned long int T, N, line_count = 0;
  std::string val;
  std::ifstream inFile;

  std::cerr << "opening: " << argv[1] << "\n";
  inFile.open(argv[1]);
  if (!inFile) std::cerr << "Error reading input\n";

  inFile >> T; // total lines 


  while (inFile >> N) {

    std::string word;
    unsigned int chars = 0; 
    node dict[26];
    node* runner;

    for (unsigned int n = 0; n < N; ++n) {
      inFile >> word;
      //std::cerr << word << ": ";

      bool gotit = false;
      runner = dict;//[word[0] - 'a'];
      for (unsigned int cidx = 0; cidx < word.size(); ++cidx) {
        char c = word[cidx];
        if (!gotit && !runner[c-'a'].used) {
          ++chars;
          gotit = true;
          runner[c-'a'].used = true;
          runner[c-'a'].children = new node[26];
          //std::cerr << " " << c << "\n";
        }
        else if (runner[c-'a'].used) {
          ++chars;
          //std::cerr << " " <<  c;
        }
        else if (gotit && !runner[c-'a'].used) {
          runner[c-'a'].children = new node[26];
          runner[c-'a'].used = true;
        }

        /*if (!runner[c-'a'].used) {
          runner[c-'a'].used = true;
          runner[c-'a'].children = new node[26];
        }*/
        // Initialize children
        runner = runner[c-'a'].children;
      }
    }

    std::cout << "Case #" << ++line_count 
      << ": " << chars << std::endl;

    // Clear memory using depth first search

    runner = dict;
    ClearMem(runner);

  }


}

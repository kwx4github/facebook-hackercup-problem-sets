//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9;

const int MAXN = 5000010;

#define yeral() (node *)calloc(1,sizeof(node))

struct node{

	int C[30];
	
	node(){
		forn(i,0,26)
			C[i]=-1;
	}
	
}G[MAXN];

int cnt=0;

int newElm(){
	
	G[++cnt]=node();
	
	return cnt;
	
}

int add( int id, char str[],int indx,int len ){
	
	int ret=0;
	
	for(int ind=0;ind<len;ind++)
	{
		if( G[ id ].C[ str[ind]-'a' ]!=-1 ){
			id=G[ id ].C[ str[ind]-'a' ];
		}
		else{
			G[ id ].C[ str[ind]-'a' ]=newElm();
			id=G[ id ].C[ str[ind]-'a' ];
			ret++;
		}
	}
	
	return ret;
	
}

char str[MAXN];

int main(){
	
	int T,N,tmp,len,res;
	
	scanf(" %d",&T);
	
	forn(Case,1,T){
		
		scanf(" %d",&N);
		
		res=0;
		
		cnt=0;
		G[0]=node();
		
		forn(i,1,N){
			
			scanf(" %s",str);
			
			len=strlen(str);
			
			tmp=add( 0,str,0,len );
			
			if(tmp==0)
				res+=len;
			else
				res+=len-tmp+1;
			
			//~ dbg(len);
			//~ dbg(tmp);
			//~ dbg(res);
			
		}
		
		printf("Case #%d: %d\n",Case,res);
		
	}
	
	return 0;
	
}

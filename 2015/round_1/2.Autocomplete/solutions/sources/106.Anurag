#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)

#define eb emplace_back
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define sz(a) ((int)a.size())
#define mset(a, v) memset(a, v, sizeof(a))

#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

const int N = (int)1e6 + 100;
#define CHILD_SIZE 26

struct node {
    node * child[CHILD_SIZE];
    int cnt;
} mem[N];

int memPtr;

inline node * newNode() {
    assert(memPtr < N);
    mem[memPtr].cnt = 0;
    rep(i, CHILD_SIZE) mem[memPtr].child[i] = NULL;
    return &mem[memPtr++];
}

struct Trie {
private:
    void insert(node * cur, const string & s) {
        cur->cnt++;
        for(int i = 0; i < sz(s); ++i) {
            int curPos = s[i] - 'a';
            if(cur->child[curPos] == NULL) {
                cur->child[curPos] = newNode();
            }
            cur = cur->child[curPos];
            cur->cnt++;
        }
    }

    int get(node * cur, const string & s) {
        if(cur->cnt == 1) return 1;

        int need = 0;

        for(int i = 0; i < sz(s); ++i) {
            int curPos = s[i] - 'a';
            assert(cur->child[curPos] != NULL);
            cur = cur->child[curPos];
            ++need;
            if(cur->cnt == 1) return need;
        }
        return sz(s);
    }
public:

    node * root;

    Trie() {
        root = newNode();
    }

    inline void insert(const string & s) {
        insert(root, s);
    }

    inline int get(const string & s) {
        return get(root, s);
    }
};

string str[N];

inline void solve() {
    memPtr = 0;
    Trie trie;
    int n;
    cin >> n;

    int ans = 0;

    rep(i, n) {
        cin >> str[i];
        trie.insert(str[i]);
        int cur = trie.get(str[i]);
        ans += cur;
    }

    cout << ans << "\n";
}

int main() {
    #ifdef LOCAL
    freopen("2.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
        
    int numTest;
    cin >> numTest;
    for(int test = 1; test <= numTest; ++test) {
        cout << "Case #" << test << ": ";
        solve(); 
        cerr << "Case #" << test << " DONE !\n";
    }
    return 0;
}
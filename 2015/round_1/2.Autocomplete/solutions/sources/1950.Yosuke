#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> Pii;
typedef pair<ll, ll> Pll;

#define FOR(i,n) for(int i = 0; i < (n); i++)
#define sz(c) ((int)(c).size())
#define ten(x) ((int)1e##x)
#define tenll(x) ((ll)1e##x)
template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }
template<class T> void chmax(T& a, T b) { a = max(a, b); }
template<class T> void chmin(T& a, T b) { a = min(a, b); }

struct Node {
	bool last;
	int childs[26];
	int child_count;
	Node(){
		last = false;
		memset(childs, -1, sizeof(int) * 26);
		child_count = 0;
	}
};

class trie_tree {

	vector<Node> nodes;

	int add_node(){
		nodes.push_back(Node());
		return sz(nodes) - 1;
	}

public:
	trie_tree(){
		clear();
	}

	void clear(){
		nodes.clear();
		add_node();
		nodes[0].child_count++;
	}

	int add(const char* s){
		int cur = 0;
		for (int i = 0; s[i]; i++) {
			int nxt = nodes[cur].childs[s[i] - 'a'];
			nodes[cur].child_count++;
			if (nxt == -1) {
				nxt = add_node();
				nodes[cur].childs[s[i] - 'a'] = nxt;
			}
			cur = nxt;
		}
		nodes[cur].last = true;
		nodes[cur].child_count++;
		return cur;
	}

	int solve(const char *s){
		int ans = -1;
		int cur = 0;
		for (int i = 0; s[i]; i++) {
			ans++;
			if (nodes[cur].child_count == 1)
				return ans;
			int nxt = nodes[cur].childs[s[i] - 'a'];
			cur = nxt;
		}
		return ans + 1;
	}
};

int core(vector<string>& v){
	trie_tree t;
	int ans = 0;
	for (auto a : v) {
		t.add(a.c_str());
		int tmp= t.solve(a.c_str());
		ans += tmp;
		// printf("%s : %d\n",a.c_str(), tmp);
	}
	return ans;
}

void solve(){
	int n; cin >> n;
	vector<string> v(n);
	FOR(i, n) cin >> v[i];
	int ans = core(v);
	cout << ans << endl;
}

int main(){
	int t; cin >> t;
	FOR(i,t){
		printf("Case #%d: ", i + 1);
		solve();
	}
}
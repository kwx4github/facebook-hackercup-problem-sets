

namespace Contest
{
    using System;
    using System.IO;

    public class Program
    {
        static void Main(string[] args)
        {
            Wrapper.Solve(new ProblemB(), Console.In, Console.Out);
        }
    }

    public class Wrapper
    {
        public static void Solve(IProblem problem, TextReader input, TextWriter output)
        {
            var parser = new InputParser(input);
            int T = parser.GetInt();

            for (int i = 0; i < T; i++)
            {
                output.WriteLine(string.Format("Case #{0}: {1}", i + 1, problem.SolveOneCase(parser)));
            }
        }
    }

    public interface IProblem
    {
        string SolveOneCase(InputParser input);
    }
}﻿


namespace Contest
{
    public class ProblemB : IProblem
    {
        public string SolveOneCase(InputParser input)
        {
            int N = input.GetInt();

            TrieNode.Count = 0;
            var trie = new TrieNode();


            for (int i = 0; i < N; i++)
            {
                var word = input.GetString();
                trie.AddWord(word, 0, false);
            }

            return TrieNode.Count.ToString();
        }

        private class TrieNode
        {
            public static long Count;

            private TrieNode[] _nodes = new TrieNode[26];

            public void AddWord(string word, int c, bool counted)
            {
                if( c == word.Length)
                {
                    if( !counted)
                    {
                        Count += c;
                    }
                    return;
                }

                var cc = word[c];
                var i = cc - 'a';

                if( _nodes[i] == null)
                {
                    _nodes[i] = new TrieNode();
                    if( !counted)
                    {
                        Count += c + 1;
                        counted = true;
                    }
                }

                _nodes[i].AddWord(word, c+1, counted);
            }
        }
    }
}﻿

namespace Contest
{
    using System.Collections;
    using System;
    using System.IO;

    public class InputParser
    {
        private readonly TextReader _textReader;

        private IEnumerator _enumerator;

        public InputParser(TextReader textReader)
        {
            this._textReader = textReader;
            this._enumerator = (new string[0]).GetEnumerator();
        }

        public string ReadLine()
        {
            return _textReader.ReadLine();
        }

        public string[] GetStringArray()
        {
            return ReadLine().Split(new string[0], StringSplitOptions.RemoveEmptyEntries);
        }

        public int[] GetIntArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new int[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = int.Parse(tokens[i]);
            }

            return values;
        }

        public long[] GetLongArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new long[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = long.Parse(tokens[i]);
            }

            return values;
        }

        public string GetString()
        {
            while (_enumerator.MoveNext() == false)
            {
                _enumerator = GetStringArray().GetEnumerator();
            }

            return (string)_enumerator.Current;
        }

        public int GetInt()
        {
            return int.Parse(GetString());
        }

        public long GetLong()
        {
            return long.Parse(GetString());
        }
    }
}
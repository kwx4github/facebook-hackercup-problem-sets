#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>

#define pb push_back
#define ll long long
#define pll pair<ll, ll>
#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define _MOD 1000000007LL
#define MOD(x) (((x) + 2LL * (_MOD)) % (_MOD))
#define INF (1e9)
#define LINF (1e16)
#define EPS (1e-8)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
typedef unsigned long long ull;
typedef long double ldd;

using namespace std;

struct node
{
	int next[30];
	int subs;
	bool leaf;
};

node bor[1000010];
int bsz;
int n;

void add_word(string &s)
{
	int v = 0;
	for (int i = 0; i < s.size(); i++)
	{
		int cur = s[i] - 'a';
		if (bor[v].next[cur] == -1)
		{
			bor[v].next[cur] = bsz;
			bsz++;
		}
		v = bor[v].next[cur];
		bor[v].subs++;
	}
	bor[v].leaf = 1;
}

int get_word(string &s)
{
	int v = 0, res = 0;
	for (int i = 0; i < s.size(); i++)
	{
		int cur = s[i] - 'a';
		if (bor[v].subs == 1)
			return res;
		res++;
		v = bor[v].next[cur];
	}
	return res;
}

void solve()
{
	for (int i = 0; i < 1000010; i++)
	{
		memset(bor[i].next, -1, sizeof bor[i].next);
		bor[i].subs = 0;
		bor[i].leaf = false;
	}
	bsz = 1;

	cin >> n;
	string word;
	int res = 0;
	for (int i = 0; i < n; i++)
	{
		cin >> word;
		add_word(word);
		res += get_word(word);
	}
	cout << res;
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	freopen ("input.txt","r",stdin);freopen ("output.txt","w",stdout);

	int tt;
	cin >> tt;
	for (int ttt = 0; ttt < tt; ttt++)
	{
		cout << "Case #" << ttt + 1 << ": ";
		solve();
		cout << endl;
	}

	return 0;
}
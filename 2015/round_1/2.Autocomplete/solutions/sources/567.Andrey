#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>

using namespace std;

struct Node
{
	vector<int> next;
	Node() : next('z' - 'a' + 1){}
	static int index(char c)
	{
		return c - 'a';
	}
};

int result;
vector<Node> pTree;

void clear()
{
	result = 0;
	pTree.clear();
	pTree.push_back(Node());
}

void addWord(const string & s)
{
	bool typeOn = true;
	int n = (int)s.length();
	int node = 0;
	for (int i = 0; i < n; ++i)
	{
		if (typeOn == true)
			++result;
		int index = Node::index(s[i]);
		if (!pTree[node].next[index])
		{
			pTree[node].next[index] = (int)pTree.size();
			pTree.push_back(Node());
			typeOn = false;
		}
		node = pTree[node].next[index];
	}
}

void solve()
{
	int n; cin >> n;
	clear();
	string s;
	for (int i = 0; i < n; ++i)
	{
		cin >> s;
		addWord(s);
	}
	cout << result << endl;
}

int main()
{
	ios::sync_with_stdio(false);
#ifdef GRANDVIC_DEBUG
	freopen("e:/input.txt", "rt", stdin);
	freopen("e:/output.txt", "wt", stdout);
#endif
	
	pTree.reserve(40000000);

	int T; cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}



#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;
#define REP(i,k) for(int (i)=0;(i)<(k);(i)++)
#define CLR(a) memset((a),0,sizeof((a)))
#define INF ~(1<<31)


int N;
int edges[1000005][26];
int counts[1000005];

bool ending[1000005];
int node_id;
	
vector<string> words;

void add_word_to_trie(string s){
	int cur_node = 0;
	
	for(int j=0;j<s.size();j++){
		int c = s[j]-'a';
		
		if(edges[cur_node][c]==-1){
			edges[cur_node][c]= node_id++;
			counts[cur_node]++;
		}
		
		cur_node = edges[cur_node][c];
		if(j==s.size()-1){
			ending[cur_node]=1;
		}
	}
}

int get_num_chars(string s){
	int res = 1;
	int cur_node = 0;
	
	for(int i=0;i<s.size();i++){
		if(counts[cur_node]>1 || ending[cur_node]) res=(i+1);
		cur_node = edges[cur_node][s[i]-'a'];
	}
	
	if(counts[cur_node]>=1) res=s.size();
	
	return res;
}
		
int main(){
	ios_base::sync_with_stdio(0);
	int T; cin>>T;
	
	for(int cs=1;cs<=T;cs++){
		cout<<"Case #"<<cs<<": ";

		memset(edges,-1,sizeof(edges));
		CLR(counts);
		CLR(ending);
		words.clear();
		node_id = 1;
		
		cin>>N;
		
		for(int i=0;i<N;i++){
			string s; cin>>s;
			words.push_back(s);
		}
		
		int res = 0;
		
		for(int i=0;i<words.size();i++){
			add_word_to_trie(words[i]);
			res += get_num_chars(words[i]);
		}
		
		cout<<res<<endl;
	}
}
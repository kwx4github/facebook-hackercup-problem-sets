#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

typedef struct trie_node trie_node_t;
struct trie_node{
    struct trie_node *children[SIZE];
};

typedef struct trie trie_t;
struct trie{
    struct trie_node *root;
    int count;
};

trie_node_t *getNode(){
    trie_node_t *p;
    p = (trie_node_t *)malloc(sizeof(trie_node_t));
    int i;
    for(i=0;i<SIZE;i++){
        p->children[i] = NULL;
    }
    return p;
}

void insert(trie_t *pTrie,char key[]){
    int level,stop=0;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            if(stop==0){
                stop=1;
                pTrie->count++;
            }
            pCrawl->children[index] = getNode();
        }
        if(stop==0)
                pTrie->count++;
        pCrawl = pCrawl->children[index];
    }
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}

int main(){
    int T,i;
    scanf("%d",&T);
    for(i=0;i<T;i++){
        int N,nextCount;
        char ch[1000008];
        trie_t trie;
        initialize(&trie);
        scanf("%d",&N);
        nextCount=N;
        while(N--){
            scanf("%s",ch);
            insert(&trie,ch);
        }
        printf("Case #%d: %d\n",i+1,trie.count);
    }
    return 0;
}

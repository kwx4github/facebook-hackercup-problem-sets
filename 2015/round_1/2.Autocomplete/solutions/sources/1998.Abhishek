#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;
typedef long long LL;
LL ans;
LL max(LL a,LL b)
{
    return a>b?a:b;
}
struct node
{
    node *child[26];
    bool eow[26];
};
node * newnode()
{
    node *tmp = new node;
    for(int i=0;i<26;i++)
    {
        tmp->child[i]=NULL;
        tmp->eow[i] = 0;
    }
    return tmp;
}
void insertword(node * root, char * word, int n)
{
    node *cur = root;
    bool f=0;
    for(int i=0;i<n;i++)
    {
        if(cur->child[word[i]-'a'] == NULL)
        {
            cur->child[word[i]-'a'] = newnode();
            if(i==n-1)
            {
                cur->eow[word[i]-'a'] = 1;
            }
            cur = cur->child[word[i]-'a'];
            if(f==0)
            {
                ans++;
                f=1;
            }
        }
        else
        {
            ans++;
            cur = cur->child[word[i]-'a'];
        }

    }
}
int main()
{
    freopen("autocomplete.txt","r",stdin);
    freopen("autocomplete-output.txt","w",stdout);
    int t,i,j,x=1,m=0,A,B,K,n;
    char word[1000006];
    node *root;
    cin>>t;
    while(t--)
    {
        node *root = newnode();
        cin>>n;
        ans = 0;
        for(i=0;i<n;i++)
        {
            cin>>word;
            insertword(root, word,strlen(word));
        }
        cout<<"Case #"<<x++<<": "<<ans<<endl;

    }
    return 0;
}


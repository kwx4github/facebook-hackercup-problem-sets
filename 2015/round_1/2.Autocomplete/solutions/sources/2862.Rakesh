//
//  main.m
//  FBHackAutocomplete
//
//  Created by Rakesh Balasubramanian on 1/17/15.
//  Copyright (c) 2015 zerog. All rights reserved.
//
#import <Foundation/Foundation.h>

@interface Tree : NSObject
@property (strong,nonatomic) NSString * key;
@property (nonatomic, getter=isLeaf) BOOL leaf;
@property (nonatomic, getter=isRoot) BOOL root;


@property (strong,nonatomic) NSMutableDictionary *nodes;

- (instancetype)initLeafWithKey:(NSString *)key;
- (instancetype)initAsRoot;
- (NSInteger)insertString:(NSString *)str;

@end

@implementation Tree


- (instancetype)initLeafWithKey:(NSString *)str
{
    self = [super init];
    if (self) {
        self.nodes = [@{} mutableCopy];
        //        self.leaf = YES;
        self.key = str;
        self.root = NO;
    }
    return self;
}




- (instancetype)initAsRoot
{
    self = [super init];
    if (self) {
        self.nodes = [@{} mutableCopy];
        self.leaf = NO;
        self.root = YES;
    }
    return self;
}

-(NSInteger)insertString:(NSString *)str
{
    
    NSString *key = [NSString stringWithFormat:@"%c",[str characterAtIndex:0]];
    //    printf("%c",[str characterAtIndex:0]);
    Tree *node = [self.nodes valueForKey:key];
    if (node) {
        if (str.length==1) {
            self.leaf = YES;
            //            printf("\n");
            return 1;
        }
        return 1+[node insertString:[str substringFromIndex:1]];
    }else{
        node = [[Tree alloc]initLeafWithKey:key];
        [self.nodes setValue:node forKey:key];
        if (str.length==1) {
            self.leaf = YES;
            //            printf("\n");
            
            return 1;
        }
        [node insertString:[str substringFromIndex:1]];
        return 1;
    }
    
    
    
}





@end

NSInteger getTypes(NSInteger numItems, NSArray *strArray);
NSInteger getTypes2(NSInteger numItems, NSArray *strArray);

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSFileHandle *input;
        if (argc == 1) {
            input = [NSFileHandle fileHandleWithStandardInput];
        }else{
            
            NSString *basePath = [[NSFileManager defaultManager] currentDirectoryPath];
            NSString *filePath = [basePath stringByAppendingPathComponent:[NSString stringWithCString:argv[1] encoding:NSUTF8StringEncoding]];
            input = [NSFileHandle fileHandleForReadingAtPath:filePath];
        }
        
        NSData *inputData = [NSData dataWithData:[input availableData]];
        NSString *inputString = [[NSString alloc] initWithData:inputData encoding:NSUTF8StringEncoding];
        
        
        NSMutableArray *lines = [[inputString componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]] mutableCopy];
        NSInteger numTestCases = [lines[0] integerValue];
        [lines removeObjectAtIndex:0];
        
        NSInteger startingIndex = 0;
        for (int i = 0 ; i<numTestCases; i++) {
            NSInteger num = [lines[startingIndex] integerValue];
            NSRange range;
            range.location = startingIndex+1;
            range.length = num;
            NSArray *stringArr = [lines subarrayWithRange:range];
            NSInteger types =  getTypes(num,stringArr);
            printf("Case #%d: %ld\n",i+1,types);
            
            startingIndex = startingIndex+num+1;
        }
        
        
    }
    return 0;
}
NSInteger getTypes(NSInteger numItems, NSArray *strArray)
{
    if (numItems<100) {
        return getTypes2(numItems, strArray);
    }
    
    NSInteger types = 0;
    Tree *searchTree = [[Tree alloc]initAsRoot];

    for (NSString *str in strArray) {
        types += [searchTree insertString:str];
    }
    
    
    
    return types;
}

NSInteger getTypes2(NSInteger numItems, NSArray *strArray)
{
    
    NSInteger types = 0;
    NSMutableArray *searchArr = [NSMutableArray arrayWithCapacity:strArray.count];
    NSMutableDictionary *searchedFor = [NSMutableDictionary dictionaryWithCapacity:strArray.count];
    for (NSString *str in strArray) {
        [searchArr addObject:str];
        NSInteger strLength = str.length;
        NSArray *tempArray = [searchArr copy];

        for (int i = 0 ; i<strLength; i++) {
            @autoreleasepool {
                NSRange range;
                range.location = 0;
                range.length = i+1;
                NSString *subStr = [str substringWithRange:range];
                if ([str isEqualToString:subStr] ) {
                    types++;
                    break;
                }
                if ([searchedFor valueForKey:subStr] !=nil) {
                    types++;
                    continue;
                }
                [searchedFor setObject:@(1) forKey:subStr];

                NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF BEGINSWITH %@",subStr];
                NSArray *filteredArray = [tempArray filteredArrayUsingPredicate:pred];
                tempArray = filteredArray;
                types++;
                
                if ([filteredArray count] == 1) {
                    break;
                }
            }
            
        }
    }
    
    
    
    return types;
}
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MAXLEN = 1000005;
const int MAXALPH = 30;

int node[MAXLEN][MAXALPH], nodeInfo[MAXLEN], idx = 1, len;
char word[MAXLEN];

void TreeInsert(int pos, int nodeId) {
    nodeInfo[nodeId]++;
    if (pos == len) return;
    if (node[nodeId][word[pos]-'a'] == 0)
        node[nodeId][word[pos]-'a'] = idx++;
    TreeInsert(pos+1, node[nodeId][word[pos]-'a']);
}

int TreeFind(int pos, int nodeId) {
    if ((pos > 0) && (nodeInfo[nodeId] == 1)) return pos;
    if (pos == len) return pos;
    TreeFind(pos+1, node[nodeId][word[pos]-'a']);    
}

int main() {
    int q, caseNo = 0;
    scanf("%d", &q);
    while (q--) {
        int n, result = 0;
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
            scanf("%s", word);
            len = strlen(word);
            TreeInsert(0, 0);
            int x = TreeFind(0, 0);
            result += x;
        }
        caseNo++;
        printf("Case #%d: %d\n", caseNo, result);
        for (int i = 0; i < idx; i++) {
            for (int j = 0; j < MAXALPH; j++)
                node[i][j] = 0;
            nodeInfo[i] = 0;
        }
        idx = 1;
    }
    return 0;
}

#include <cstring>
#include <map>
#include <numeric>
#include <sstream>
#include <cmath>
#include <stack>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#include <set>
#include <queue>
#include <string>
#include <cctype>

using namespace std;

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb(x) push_back((x))
#define REP(i,x,y) for(int i = x; i < int(y); i++)
#define FOR(it,A) for(typeof (A.begin()) it = A.begin(); it!= A.end(); it++)
#define CUA(x) (x) * (x)
#define mp(x,y) make_pair((x),(y))
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
#define I (1LL << 40)
#define sz size()
#define oo (1<<30)
#define EPS (1e-9)

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define si(c) ((int)(c).size())
#define forsn(i,s,n) for(int i = (int)(s); i<((int)n); i++)
#define dforsn(i,s,n) for(int i = (int)(n)-1; i>=((int)s); i--)
#define decl(v, c) typeof(c) v = c
#define forall(i, c) for(decl(i, c.begin()); i!=c.end(); ++i)
#define dforall(i, c) for(decl(i, c.rbegin()); i!=c.rend(); ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()

typedef pair<int, int> pii;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<pii> vii;
typedef vector<string> vs;
typedef vector<int> vi;

const int MAXS = 1000009;

struct Trie {
    int g[MAXS][30];
    int stateCount;
    Trie() {clear();}
    void clear() {
        clr(g[0],-1);
        stateCount = 1;
    }
    ll add(string s) {
        int state = 0;
        int ans=(int)s.size();
        bool found=0;
        for (int i=0; i<(int)s.size(); i++) {
            int next = (s[i] - 'a');
            if (g[state][next] == -1) {
                g[state][next] = stateCount;
                clr(g[stateCount], -1);
                stateCount++;
                if(!found){
                	found = true;
                	ans = i+1;
                }
            }
            state = g[state][next];
        }
        return (ll)ans;
    }
};

Trie trie;



int main(){
	#ifndef ONLINE_JUDGE
		freopen("autocomplete.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif

	int TT;
	cin >> TT;

	REP(caso,0,TT){
		int N;
		cin >> N;
		ll ans = 0;
		trie.clear();
		REP(i,0,N){
			string s;
			cin >> s;
			ans += trie.add(s);
		}
		printf("Case #%d: %lld\n",caso+1, ans);
	}

	return 0;
}







import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class AutocompleteMain {

	static class TrieNode {
		TrieNode[] nextChars = new TrieNode[26];
	}

	public static void addToTrie(TrieNode root, String word) {
		TrieNode curr = root;
		TrieNode next = null;
		for (int i = 0 ; i < word.length() ; i++) {
			next = new TrieNode();
			if (curr.nextChars[word.charAt(i)-97]==null) {
				curr.nextChars[word.charAt(i)-97] = next;
				curr = next;
			} else {
				curr = curr.nextChars[word.charAt(i)-97];
			}
		}
	}
	
	public static int getLetterCount(TrieNode root, String word) {
		int count = 1;
		root = root.nextChars[word.charAt(0)-97];
		for(int i = 1 ; i < word.length(); i++){
			if(root == null) {
				break;
			}
			count++;
			root = root.nextChars[word.charAt(i)-97];
		}
		return count;
	}

	public static boolean isInteger(String s) {
	    try { 
	        Integer.parseInt(s); 
	    } catch(NumberFormatException e) { 
	        return false; 
	    }
	    return true;
	}
	
	public static void main(String[] args) {
		try{
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			String input;
			input=br.readLine();
			TrieNode root = null;
			int charCount = 0;
			int caseNum = 1;
			for( ; (input=br.readLine()) != null; ){
				if(isInteger(input)){
					if(root!=null){
						System.out.format("Case #%d: %d\n", caseNum, charCount);
						caseNum++;
					}
					root = new TrieNode();
					charCount = 0;
				} else {
					charCount += getLetterCount(root, input);
					addToTrie(root, input);
				}
			}
			System.out.format("Case #%d: %d\n", caseNum, charCount);
		} catch(IOException io) {
			io.printStackTrace();
		}
	}
}
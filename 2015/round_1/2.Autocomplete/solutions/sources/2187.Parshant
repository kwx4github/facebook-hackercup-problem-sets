#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;
class Node
{
	public:
    Node() { mContent = ' '; mMarker = false; }
	~Node() {} 
	char content() { return mContent; } 
	void setContent(char c) { mContent = c; } 
	bool wordMarker() { return mMarker; } 
	void setWordMarker() { mMarker = true; } 
	Node* findChild(char c); 
	void appendChild(Node* child) { mChildren.push_back(child); } 
	vector<Node*> children() { return mChildren; } 
	
	private: 
	char mContent; 
	bool mMarker; 
	vector<Node*> mChildren; 
};
class Trie { 
	public: 
	Trie(); 
	~Trie(); 
	void addWord(string s); 
	int searchWord(string s); 
	void deleteWord(string s); 
	
	private: 
	Node* root; 
}; 
Node* Node::findChild(char c) 
{    for ( int i = 0; i < mChildren.size(); i++ ) 
     { 
	 	Node* tmp = mChildren.at(i); 
		 if ( tmp->content() == c ) { return tmp; }
	 } 
	 return NULL;
} 
Trie::Trie() { root = new Node(); } 
Trie::~Trie() {  }
void Trie::addWord(string s) 
{ Node* current = root; 
  if ( s.length() == 0 )
   { current->setWordMarker(); 
    return; 
	} 
	for ( int i = 0; i < s.length(); i++ )
	 { Node* child = current->findChild(s[i]);
	 	  if ( child != NULL ) 
		  { current = child; } 
		  else 
		  { Node* tmp = new Node(); tmp->setContent(s[i]); current->appendChild(tmp); current = tmp; }
	 	  
		  if ( i == s.length() - 1 ) current->setWordMarker(); 
	} 
}
int Trie::searchWord(string s) 
{ Node* current = root;
  Node* tmp; 
  int ans=1,i;
  		for (  i = 0; i < s.length()-1;i++)
			 { 	 
			 	 tmp = current->findChild(s[i]);
			 	 
				  if(tmp->wordMarker() || tmp->children().size()!=1)	
				  ans=i+2;
				  current = tmp;
			 }
			 tmp=current->findChild(s[i]);
			 if(tmp->children().size()==0)
			 return ans;		
			 else
			 return s.length();

}
int main()
{
  std:ios_base::sync_with_stdio(false);
  freopen ("autocomplete.txt", "r", stdin);
  freopen ("output2.txt", "w", stdout);
  int i,t,n,j,len,ans,cs=1;
  string tmp;
  cin>>t;
  while(t--)
  { ans=0;
  	cin>>n;
    Trie* trie = new Trie();
	for(i=0;i<n;i++)
	{
		cin>>tmp;
		len=tmp.length();
		trie->addWord(tmp);
		ans+=trie->searchWord(tmp);
	}
	printf("Case #%d: %d\n",cs++,ans);
  }
  return 0;
}


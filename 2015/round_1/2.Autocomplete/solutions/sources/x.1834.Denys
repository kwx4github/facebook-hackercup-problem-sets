#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <numeric>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <fstream>

#define REP(I, N) for (int I = 0; I < (N); ++I)
#define PER(I, N) for (int I = (N); I >= 0; --I)
#define PERR(I, A, B) for (int I = (A); I >= (B); --I)
#define REPP(I, A, B) for (int I = (A); I <  (B); ++I)
#define REPN(I, A, B) for (int I = (A); I <= (B); ++I)
#define REPC(I, A, C) for (int I = (A); (C); ++I)
#define REPPP(I, A, B, C) for (int I = (A); I <  (B); I += C)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define RIIII(X, Y, Z, W) scanf("%d%d%d%d", &(X), &(Y), &(Z), &(W))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define DRIIII(X, Y, Z, W) int X, Y, Z, W; scanf("%d%d%d%d", &X, &Y, &Z, &W)
#define RS(X) scanf("%s", (X))
#define LEN(X) int(strlen(X))
#define SZ(X) int((X).size())
#define SUM(X, N) accumulate(X, X + (N), 0)
#define MS0(X) memset((X), 0, sizeof(X))
#define MSI(X) memset((X), 0xFF, sizeof(X))
#define F first
#define S second
#define MP make_pair
#define PB push_back

#ifdef DK
const int MAX = 1e5 + 11;
#else
const int MAX = 1e7 + 11;
#endif

using namespace std;

struct state_t {
  int length = 0;
  int next[36];
};

static int states_count = 1, states_cur = 0;
static state_t states[333][MAX];

static int get_cur_state() {
  return states_count - 1;
}

static int get_next_state(int state, char ch) {
  return states[states_cur][state].next[ch - 'a'];
}

static void set_next_state(int state, char ch, int next_state) {
  states[states_cur][state].next[ch - 'a'] = next_state;
  states[states_cur][next_state].length = states[states_cur][state].length + 1;
  states_count++;
}

static int add(const string &v) {
  const int N = SZ(v);
  int cur_state = 0, cur_index = 0;
  while (get_next_state(cur_state, v[cur_index]) != -1 && cur_index < N) {
    cur_state = get_next_state(cur_state, v[cur_index]);
    cur_index++;
  }
  int break_state = cur_index < N ? states_count : cur_state;
  for (int i = cur_index; i < N; ++i) {
    set_next_state(cur_state, v[i], states_count);
    cur_state = get_cur_state();
  }
  return states[states_cur][break_state].length;
}

static int solve(const vector<string> &A) {
  states[states_cur][0].length = 0;
  int result = 0;
  REP(i, SZ(A)) {
    result += add(A[i]);
  }
  states_cur++;
  return result;
}

static void gen_tests() {
  freopen("in.txt", "w", stdout);
  int N = 100000;
  printf("1\n");
  printf("%d\n", N);
  int cnt = 1, sum = 0;
  while (sum < 1000000) {
    REP(i, cnt) printf("a");
    printf("\n");
    sum += cnt;
    cnt++;
  }
}

int main() {
#ifdef DK
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
#endif
  MSI(states);
  int T;
  cin >> T;
  REP(t, T) {
    int N;
    cin >> N;
    vector<string> A;
    REP(i, N) {
      string x;
      cin >> x;
      A.PB(x);
    }
    printf("Case #%d: %d\n", t + 1, solve(A));
  }
  return 0;
}
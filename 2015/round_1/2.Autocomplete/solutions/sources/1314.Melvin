#include <stdio.h>
#include <assert.h>
#include <vector>
#include <algorithm>

using std::vector;

#define  MAX    26

typedef struct TrieNode
{
	int nCount;  // 该节点前缀 出现的次数
	struct TrieNode *next[MAX]; //该节点的后续节点
} TrieNode;

TrieNode Memory[1000010]; //先分配好内存。 malloc 较为费时
int allocp = 0;

//初始化一个节点。nCount计数为1， next都为null
TrieNode * createTrieNode()
{
	TrieNode * tmp = &Memory[allocp++];
	//TrieNode * tmp = &Memory[allocp++];
	tmp->nCount = 1;
	for (int i = 0; i < MAX; i++)
		tmp->next[i] = NULL;
	return tmp;
}

void insertTrie(TrieNode * * pRoot, char * str)
{
	TrieNode * tmp = *pRoot;
	int i = 0, k;
	//一个一个的插入字符
	while (str[i])
	{
		k = str[i] - 'a'; //当前字符 应该插入的位置
		if (tmp->next[k])
		{
			tmp->next[k]->nCount++;
		}
		else
		{
			tmp->next[k] = createTrieNode();
		}

		tmp = tmp->next[k];
		i++; //移到下一个字符
	}

}

int searchTrie(TrieNode * root, char * str)
{
	if (root == NULL)
		return 0;
	TrieNode * tmp = root;
	int i = 0, k;
	while (str[i])
	{
		k = str[i] - 'a';
		if (tmp->next[k])
		{
			tmp = tmp->next[k];
		}
		else
			return 0;
		i++;
	}
	return tmp->nCount; //返回最后的那个字符  所在节点的 nCount
}

int searchTrie2(TrieNode * root, char * str)
{
	if (root == NULL)
		return 0;
	TrieNode * tmp = root;
	int i = 0, k;
	while (str[i])
	{
		k = str[i] - 'a';
		if (tmp->next[k])
		{
			tmp = tmp->next[k];
		}
		else
			return i;
		i++;
	}
	return i;
}

int dealTrie(TrieNode* T)
{
	int i;
	if(T==NULL)
		return 0;
	for(i=0;i<MAX;i++)
	{
		if(T->next[i]!=NULL)
			dealTrie(T->next[i]);
	}
	free(T);
	return 0;
}

int main()
{
	static const unsigned int buff_size = 1000001;
	char* buff = new char[buff_size];
	unsigned int nCases = 0;scanf("%d",&nCases);
	for(unsigned int iCases = 1;iCases <= nCases;++iCases)
	{
		unsigned int n = 0;scanf("%d",&n);
		TrieNode *Root = createTrieNode();
		unsigned int ans = 0;
		for(unsigned int i = 0;i < n;++i)
		{
			scanf("%s",buff);
			int u = searchTrie2(Root,buff);
			//printf("%d\n",u);
			if(u == strlen(buff)) ans += u;
			else ans += u + 1;
			insertTrie(&Root,buff);
			
		}
		//dealTrie(Root);

		printf("Case #%u: %u\n",iCases,ans);
	}
	delete[] buff;
	return 0;
}
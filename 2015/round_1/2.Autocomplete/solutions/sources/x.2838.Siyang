
def main():
	results = []
	with open('autocomplete.txt', 'r') as f:
		case_count = int(f.readline())
		for i in range(case_count):
			word_count = int(f.readline())
			tree = Tree()
			min_word_count = 0
			for word_index in range(word_count):
				line = f.readline().strip()
				min_word_count += tree.add(line)
			# print min_word_count
			results.append(min_word_count)

	with open('autocomplete_output.txt', 'w') as f:
		for i in range(len(results)):
			line = 'Case #' + str(i + 1) + ': ' + str(results[i]) + '\n'
			print line[:len(line)-1]
			f.write(line)

class Tree(object):
	# ['a', ['b', ['c'], ['d']], ['e']]
	def __init__(self):
		self.data = ['']
		pass

	def add(self, word):
		node, subword = self.get_subtree(word)
		if len(subword) > 0:
			node.append([subword])
			return len(word) - len(subword) + 1
		else:
			node.append([''])
		return len(word) - len(subword)

	def get_subtree_list(self, tree):
		return tree[1:]

	def create_subtree(self, word):
		if len(word) == 1:
			return [word[0]]
		else:
			return [word[0], self.create_subtree(word[1:])]

	def get_subtree(self, word):
		branch = self.data
		subword = word
		while(1):
			# print branch
			branch_new, subword = self.get_create_branch(branch, subword)
			if len(subword) == 0:
				return (branch, subword)
			if branch_new == []:
				return (branch, subword)
			branch = branch_new

	def get_create_branch(self, subtree, subword):
		for i in range(len(subtree)):
			node = subtree[i]
			if type(node) == type('a'):
				# not a branch
				continue
			if len(node[0]) == 1:
				if node[0] == subword[0]:
					return (node, subword[1:])
				else:
					continue
			else:
				# len(node[0]) > 1
				if node[0][0] != subword[0]:
					continue
				if subword.startswith(node[0]):
					return (node, subword[len(node[0]):])
				else:
					word_in_current_node = node[0]
					common_char_index = 0
					while common_char_index < len(subword) and word_in_current_node[common_char_index] == subword[common_char_index]:
						common_char_index += 1
					if len(node) == 1:
						new_node = [word_in_current_node[:common_char_index], [word_in_current_node[common_char_index:]]]
					else:
						new_node = [word_in_current_node[:common_char_index], [word_in_current_node[common_char_index:], node[1:]]]
					subtree[i] = new_node
					# print new_node
					return (new_node[1], subword[common_char_index:])
		# can't find
		return [], subword

if __name__ == "__main__":
    main()

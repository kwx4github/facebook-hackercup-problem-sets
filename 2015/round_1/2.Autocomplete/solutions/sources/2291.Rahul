#include<bits/stdc++.h>
using namespace std;

#define pn(n) printf("%d\n",n)
#define pl(n) printf("%lld\n",n)
#define rn(n) scanf("%d",&n)
#define rf(n) scanf("%lf",&n)
#define rs(n) scanf("%s",n)
#define ps(n) printf("%s\n",n)
#define rl(n) scanf("%lld",&n)
#define fr(i,a,b) for(int i=(int)a; i <= (int)b; i++)
#define frr(i,a,b) for(int i=(int)a; i >= (int)b; i--)
#define ll long long int
#define us(x) unsigned x
#define pb push_back
#define vi vector<int>
#define ve(x) vector<x>
#define si set<int>
#define itv vi :: iterator
#define tve(x) vector<x> :: iterator
#define its si :: iterator
#define tse(x) set<x> :: iterator
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define log(x,y) (log(double(x))/log(double(y)))
#define log2(x) log(x,2)
#define fill(s,v) memset(s,v,sizeof(s))
#define all(s) s.begin(),s.end()
#define frs(i,s) for(its i = s.begin(); i != s.end(); i++)
#define fs(i,s,x) for(set<x> :: iterator i = s.begin(); i != s.end(); i++)
#define frv(i,v) for(itv i = v.begin(); i != v.end(); i++)
#define fv(i,v,x) for( vector<x> :: iterator i = v.begin(); i != v.end(); i++)
#define INF 2147483647
#define MOD 1000000007
#define ii pair<int,int>
#define pa(x) pair<x,x>
#define mp make_pair

struct node
{
    node *next[26];
};
main()
{
    int t;
    char str[1000010];
    int cs = 1;
    int n;
    rn(t);
    while(t--)
    {
        rn(n);
        node *base = new node();
        int ans = 0;
        while(n--)
        {
            rs(str);
            node *temp = base;
            int len = strlen(str)-1;
            int st = 0;
            fr(i,st,len)
            {
                ans++;
                if(temp -> next[str[i]-'a'] == NULL)
                {
                    st = i+1;
                    temp -> next[str[i]-'a'] = new node();
                    temp = temp -> next[str[i]-'a'];
                    break;
                }
                temp = temp -> next[str[i] - 'a'];
            }
            fr(i,st,len)
            {
               temp -> next[str[i]-'a'] = new node();
                temp = temp -> next[str[i]-'a'];
            }
        }
        printf("Case #%d: ",cs);
        cs++;
        pn(ans);
    }
return 0;
}

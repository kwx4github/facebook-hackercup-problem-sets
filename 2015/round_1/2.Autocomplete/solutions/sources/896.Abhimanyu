import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

public class Autocomplete {

  private InputStream input;
  private PrintStream output;
  private Scanner inputSc;

  public Autocomplete(InputStream input, PrintStream output) {
    this.input = input;
    this.output = output;
    init();
  }

  private void init() {
    inputSc = new Scanner(input);
  }

  static int lineToInt(String line) {
    return Integer.parseInt(line);
  }

  public void solve() {
    int testCaseCount = lineToInt(inputSc.nextLine());
    for (int testN = 1; testN <= testCaseCount; testN++) {
      solveTestCase(testN);
    }
  }

  private void solveTestCase(int testN) {
    int N = lineToInt(inputSc.nextLine());
    String[] strings = new String[N];
    for (int i = 0; i < N; i++) {
      strings[i] = inputSc.nextLine();
    }
    TriNode root = new TriNode();
    long ans = 0;
    for (int i = 0; i < N; i++) {
      int length = add(root, strings[i]);
      ans += length;
    }
    output.println("Case #" + testN + ": " + ans);
  }

  public static void main(String[] args) {
    Autocomplete obj = new Autocomplete(System.in, System.out);
    obj.solve();
  }

  static class TriNode {
    TriNode childs[] = new TriNode[26];
  }

  private int add(TriNode root, String str) {
    int ret = -1;
    for (int i = 0; i < str.length(); i++) {
      int ch = str.charAt(i) - 'a';
      if (root.childs[ch] == null) {
	root.childs[ch] = new TriNode();
	if (ret == -1) {
	  ret = i + 1;
	}
      }
      root = root.childs[ch];
    }
    return ret == -1 ? str.length() : ret;
  }
}
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

int n;
string s;

inline bool read()
{
	if (scanf ("%d", &n) != 1)
		return false;

	getline(cin, s);

	return true;
}

const int N = 2 * 1000 * 1000;
const int A = 26;
int szt = 0;
int t[N][A];
int cnt[N];

inline int calc (const string& s)
{
	int ans = 0;
	int v = 0;
	forn (i, sz(s))
	{
		cnt[v]++;
		
		if (cnt[v] > 1 || i == 0)
			ans++;

		if (t[v][ s[i] - 'a' ] == -1)
		{
			cnt[szt] = 0;
			memset(t[szt], -1, sizeof t[szt]);

			t[v][ s[i] - 'a' ] = szt++;
			assert(szt < N);
		}

		v = t[v][ s[i] - 'a' ];
	}
	
	cnt[v]++;

	return ans;
}

inline void solve()
{
	szt = 1;
	memset(t[0], -1, sizeof t[0]);
	cnt[0] = 0;

	int ans = 0;
	forn (i, n)
	{
		getline(cin, s);

		ans += calc(s);
	}

	printf ("%d\n", ans);
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(25) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);

	forn (test, testCnt)
	{
		printf ("Case #%d: ", test + 1);
		assert(read());
		solve();
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

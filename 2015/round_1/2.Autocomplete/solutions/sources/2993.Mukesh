//!!!!!!!!!	NEVER GIVE UP !!!!! NEVER !!!!!!!! 
/*
USER: Mukesh 
TASK: problem 2 
ALGO: Tries.. 
// special thank to future microsoft ceo ... :)
*/
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <queue>
#include <sstream>
#include <iomanip>
#include <limits>
using namespace std;
//cout << fixed << setprecision(4);
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss; // >>
typedef ostringstream oss; //<<
#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define getc(c) char c;cin >> c
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define ll long long
#define pb push_back
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define mp make_pair
#define popcount __builtin_popcount
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
struct Node{
  int inc  ; 	  
  Node *child[26];
   Node(){
   	  inc = 1 ; 
      rep(i,26)
         child[i] = NULL ;   
     // height = 0 ; 
   }
};
int main()
{ 
  /* #ifdef _WIN32 
    {freopen("input.txt", "r", stdin);
    freopen("output.txt","w",stdout);}
   #endif // LOCAL_USER
  */
 geti(t);
 int c =1;
 while(c<=t)
 {  Node * root = new Node(); 	
 	geti(N);
 	 ll ans = 0 ;
 	 while(N--){
 		string str ;
 		cin>>str;
    	Node * tmp = root ;
  		 // tmp.inc = 1 ;
    	int h = 0 ;      
    	int check = 0 ;  
    		for(int i=0;i<str.size();i++)
    		{  
        		if(tmp->child[str[i] -'a']==NULL)
       			 {      h = h + 1 ;
            			if(check==0) 
        					{ans = h + ans ;        	
        	     		 	 check = 1 ;   
        	     			}           
            
             		 tmp->child[str[i]-'a'] = new Node();
            		 tmp = tmp->child[str[i]-'a']; 
                 }
      			  else if(tmp->child[str[i]-'a'] != NULL)
        			{
            			tmp = tmp->child[str[i] -'a'] ;             
            			h = h + 1 ; 
            			if(i==str.size()-1)
            				{ans = ans + h ;}                
        			} 
   		    }
            }

    cout<<"Case #"<<c<<": "<<ans<<endl; 
 c++;
delete(root) ;  
}       
return 0;
}
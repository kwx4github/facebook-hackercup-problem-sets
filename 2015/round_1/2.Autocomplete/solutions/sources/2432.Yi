#include <iostream>
#include <algorithm>
#include <vector>
#include <climits>
#include <cmath>
#include <unordered_map>
#include <unordered_set>
#include <sstream>
#include <cstring>
#include <string>
#include <stack>
#include <queue>
#include <ctype.h>
#include <sstream>
#include <fstream>

#define ALPHABET_SIZE 26

using namespace std;

// a node for trie
struct TreeNode {
  bool isLeaf;
  int value;
  TreeNode* children[ALPHABET_SIZE]; // 26 characters

  TreeNode() {
    isLeaf = false;
    value = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
      children[i] = NULL;
    }
  }
};

struct Trie {
  TreeNode *root;

  Trie() {
    root = new TreeNode();
  }
};

// if not present, insert key string into trie
void insert(Trie *&trie, string str) {
  int length = str.size();
  TreeNode *temp;

  temp = trie->root;

  for (int level = 0; level < length; level++) {
    int index = str[level] - 'a';
    if (temp->children[index] == NULL) {
      temp->children[index] = new TreeNode();
    }
    temp = temp->children[index];
    temp->value++;
  }

  temp->isLeaf = true;
}

// return non zero, if key presents in trie
bool search(Trie *&trie, string str) {
  int length = str.size();
  TreeNode *temp;
  temp = trie->root;

  for (int level = 0; level < length; level++) {
    int index = str[level] - 'a';
    if (temp->children[index] == NULL) {
      return false;
    }
    temp = temp->children[index];
  }

  return (temp != NULL) && temp->isLeaf;
}

int searchUnique(Trie *&trie, string str) {
  int length = str.size();
  TreeNode *temp;
  temp = trie->root;

  for (int level = 0; level < length; level++) {
    int index = str[level] - 'a';
    if (temp->children[index] == NULL) {
      throw "Insertion failure";
    }
    temp = temp->children[index];
    if (temp->value == 1) {
      return level + 1;
    }
  }

  return length;
}

int compute(const vector<string> &A) {
  int ret = 0;
  Trie *trie = new Trie();
  for (int i = 0; i < A.size(); i++) {
    if (search(trie, A[i]) == false)
      insert(trie, A[i]);
    ret += searchUnique(trie, A[i]);
  }

  return ret;
}

int main() {
  string file_path = "/Users/aidan/Desktop/input.txt";
  ifstream data (file_path.c_str(), ios::in);

  int T, N;
  data >> T;

  string s;
  vector<string> A;

  for (int round = 1; round <= T; round++) {
    data >> N;
    A.clear();
    for (int i = 0; i < N; i++) {
      data >> s;
      A.push_back(s);
    }

    cout << "Case #" << round << ": " << compute(A) << endl;
  }

  return 0;
}

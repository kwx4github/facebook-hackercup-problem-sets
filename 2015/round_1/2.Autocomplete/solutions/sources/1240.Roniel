#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <algorithm>
#include <limits>
#include <iomanip>

#define INF 1000000000
#define Inf 1000000000000000000

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

struct Trie_Node {
  int value;
  Trie_Node *edges[26];

  Trie_Node(int _value = 0) {
    value = _value;
    for(int i = 0; i < 26; ++i)
      edges[i] = NULL;
  }

  ~Trie_Node() {
    for(int i = 0; i < 26; ++i) {
      if (edges[i] != NULL) {
        edges[i]->~Trie_Node();
        edges[i] = NULL;
      }
    }
  }
};

struct Trie {
  Trie_Node *root;
  int count;

  Trie(int _count = 0) {
    count = _count;
    root = new Trie_Node();
  }

  ~Trie() {
    if (root != NULL)
      root->~Trie_Node();
  }
};

void insert(Trie *t, char key[]) {
  int level;
  int length = strlen(key);
  int index;
  Trie_Node *p = t->root;
  t->count++;
  for(level = 0; level < length; ++level) {
    index = (int)key[level] - (int)'a';
    if (!p->edges[index]) {
      p->edges[index] = new Trie_Node();
    }
    p = p->edges[index];
    p->value++;
  }
}

int search(Trie *t, char key[]) {
  int level;
  int length = strlen(key);
  int index;
  Trie_Node *p = t->root;
  for(level = 0; level < length; ++level) {
    index = (int)key[level] - (int)'a';
    p = p->edges[index];
    if (p->value == 1) return level + 1;
  }
  return length;
}



char str[1000010], str2[1000010];

int main() {
  //freopen("in25","r",stdin);
  //freopen("out25","w",stdout);
  int t,n, resp;
  scanf("%d",&t);
  for(int cas = 1; cas <= t; ++cas) {
    Trie *trie = new Trie();
    resp = 0;
    scanf("%d",&n);
    for(int i = 0; i < n; ++i) {
      scanf("%s",str);
      insert(trie,str);
      resp += search(trie,str);
    }
    //trie->~Trie();
    printf("Case #%d: %d\n",cas,resp);
  }
  return 0;
}

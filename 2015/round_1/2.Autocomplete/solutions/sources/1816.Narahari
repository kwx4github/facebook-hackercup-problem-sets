import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;


public class auto {
	
	public class Trie  {
		HashMap<Character, HashMap> base;
		 
		public Trie() {
	       base = new HashMap<Character, HashMap>();
	    }
	 
	    public Trie(ArrayList<String> words) {
	        base = new HashMap<Character, HashMap>();
	        addAll(words);
	    }
	 
	    public void add(String s) {
			HashMap<Character, HashMap> curr = base;
	        for (int i = 0; i < s.length(); i++) {
	            Character c = s.charAt(i);
	            if (curr.containsKey(c))
	                curr = curr.get(c);
	            else {
	                curr.put(c, new HashMap<Character, HashMap>());
	                curr = curr.get(c);
	            }
	        }
	        curr.put('0', new HashMap<Character, HashMap>(0)); // term
	    }
	 
	    public void addAll(ArrayList<String> words) {
	        for (String s: words)
	            add(s);
	    }
	 
	    public boolean contains(String s) {
	        HashMap<Character, HashMap> curr_node = base;
	        for (int i = 0, n = s.length(); i < n; i++) {
	            Character c = s.charAt(i);
	            if (curr_node.containsKey(c))
	                curr_node = curr_node.get(c);
	            else 
	                return false;
	        }
	        return true;
	    }
	}
	
	static int t;
	static int n;
	static String[] words;
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("autocomplete.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("autout.txt")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		t = Integer.parseInt(st.nextToken());
		for(int i = 0; i < t; i++) {
			st = new StringTokenizer(f.readLine());
			n = Integer.parseInt(st.nextToken());
			words = new String[n];
			for(int j = 0; j < n; j++) {
				words[j] = f.readLine();
			}
			out.println("Case #" + (i + 1) + ": " + solve());
		}
		out.close();
	}
		
	public static int solve() {
		auto me = new auto();
		Trie x = me.new Trie();
		int ans = 0;
		for(int i = 0; i < words.length; i++) {
			boolean added = false;
			for(int j = 1; j <= words[i].length(); j++) {
				if(!x.contains(words[i].substring(0, j))) {
					ans += j;
					x.add(words[i]);
					added = true;
					break;
				}
			}
			if(!added) {
				ans += words[i].length();
				x.add(words[i]);
			}
		}
		return ans;
	}
}
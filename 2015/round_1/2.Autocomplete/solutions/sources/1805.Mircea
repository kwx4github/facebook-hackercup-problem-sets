#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

#define dbg(x) (cout<<#x<<" = "<<(x)<<'\n')
#ifdef HOME
const string inputFile = "input.txt";
const string outputFile = "output.txt";
#else
const string problemName = "";
const string inputFile = problemName + ".in";
const string outputFile = problemName + ".out";
#endif

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

const int INF = (1LL << 30) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 100000 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

struct node {
    node* f[26];
    node() {
        memset(f, 0, sizeof(f));
    }
};

int N;
lld sol;
node *root;
char S[(int)(1e9) + 50];

int insert() {
    node *Q = root;
    char *p = S;
    int c, i, ans = INF;

    for(i = 1; *p; p++, i++) {
        c = *p - 'a';

        if(Q->f[c] == 0) {
            Q->f[c] = new node;
            ans = min(ans, i);
        }

        Q = Q->f[c];
    }

    return min(i - 1, ans);
}

void solve() {
    scanf("%d", &N);

    root = new node;
    sol = 0;

    while(N--) {
        scanf("%s", S);
        sol += 1LL * insert();
    }

    printf("%lld\n", sol);
}

int main() {
    int test, nr_cases;

#ifndef ONLINE_JUDGE
    freopen(inputFile.c_str(), "r", stdin);
    freopen(outputFile.c_str(), "w", stdout);
#endif

    scanf("%d", &nr_cases);

    for(int test = 1; test <= nr_cases; test++) {
        printf("Case #%d: ", test);
        solve();
    }

    return 0;
}

#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <fstream>
#include <algorithm>
#include <queue>
#include <functional>
#include <numeric>
#include <cmath>
#include <sstream>
#include <utility>
#include <iomanip>

using namespace std;

struct node {
	char l;
	vector<pair<char, int>> v;

	node(int ch) : l(ch) {}
};

vector<node> tree;

int findChild(const node& n, char ch) {
	for (int i = 0; i < n.v.size(); ++i)
		if (ch == n.v[i].first)
		{
			return n.v[i].second;
		}
	return -1;
}

int addChild(node& n, char ch) {
	int ind = tree.size();
	n.v.push_back(make_pair(ch, ind));
	tree.push_back(node(ch));
	return ind;
}


int addToTree(const string& s) 
{
	int cur = 0;
	bool found = true;
	int res = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		int ind = findChild(tree[cur], s[i]);
		if (ind != -1) 
		{
			cur = ind;
		}
		else 
		{ 
			if (found) 
			{
				found = false;
				res = i+1;
			}
			cur = addChild(tree[cur], s[i]);
		}
	}
	if (found) res = s.size(); 
	return res;
}

int main()
{
	ios_base::sync_with_stdio(false);

	ifstream ifs("2.in");
	ofstream ofs("2.out");

	int t;
	ifs >> t;

	for (int test = 0; test < t; ++test)
	{
		tree.clear();
		tree.push_back(node('@'));
		int res = 0;
		int k;
		ifs >> k;
		for (int i = 0; i < k; ++i)
		{
			string s;
			ifs >> s;
			res += addToTree(s);
		}
		ofs << "Case #" << test+1 << ": " << res << endl;
	}
	return 0;
}
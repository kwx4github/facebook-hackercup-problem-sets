import java.io.*;
import java.util.*;

public class Autocomplete {

    public static String[] globalWords;

    public static int numWords;

    public static void main(String [] args) {

        // The name of the file to open.
        String inputFileName = "Autocomplete_input.txt";
        String outputFileName = "Autocomplete_output.txt";

        String[] answers = processFile(inputFileName);


        writeToFile(answers, outputFileName);

    }


    public static void writeToFile(String[] answer, String fileName){
        String line = null;
        try {
            PrintWriter out = new PrintWriter(fileName);

            for (int i = 0; i < answer.length ; i++) {
                line = answer[i];
                if (line != null){
                    out.println(line);
                }
            }

            out.close();

        } catch (FileNotFoundException e){
            System.out.println("FileNotFoundException");
        }

    }

public static int arSearch(int [ ] numbers, int start, int end, int key)
{
       for (int index = start; index <= end; index++)
      {
           if ( numbers[index] == key ) 
                 return index;  //We found it!!!
      }
     // If we get to the end of the loop, a value has not yet
     // been returned.  We did not find the key in this array.
     return -1;
}


    public static String[] processFile(String fileName){

        String[] answers = null;
       try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            int numCases = Integer.parseInt(bufferedReader.readLine());
            answers = new String[numCases];

            int wordsInCase;

            int typedLetters = 0;


            for (int i=0;i<numCases;i++) {
            	String numWords = bufferedReader.readLine();
            	String[] tempWords = numWords.split(" ");

            	wordsInCase = Integer.parseInt(tempWords[0]);

                String[] words = new String[wordsInCase];
                for (int j=0; j<wordsInCase;j++){
                    words[j] = bufferedReader.readLine();
                }

				answers[i] = "Case #" + (i + 1) + ": " + processCase(words, wordsInCase);
            }


            bufferedReader.close();            

        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                   
            // Or we could just do this: 
            // ex.printStackTrace();
        }

        return answers;

    }



    public static int processCase(String[] words, int wordsInCase){
        int typed = 0;
        globalWords = words;
        int x;
        for (int i=0; i<wordsInCase;i++){
            x = numLettersToType(i); 
            //System.out.println("word = " + words[i] + " letters= " + x);
            typed = typed + x;
        }
       return typed;
    }

    public static int numLettersToType(int index){
        boolean found = false;

        int k=0;

        //System.out.println(globalWords[index]);

        int max = 1;

        for (int j=0;j<index;j++){
            //System.out.println("Testing = " + globalWords[j] + " cur max=" + max);
            found = true;

            int count = globalWords[index].length();
            if (count > globalWords[j].length()){
                count = globalWords[j].length();
            }
            for (k = 0; k < count; k++){
                if (globalWords[index].charAt(k) != globalWords[j].charAt(k) ){
                    //System.out.println("Breaking at = " + k);
                    found = false;
                    break;
                }

            }

            if (found){
                if (globalWords[index].length() < globalWords[j].length() ){
                    return globalWords[index].length();
                } else {
                    if (max < (count+1)){
                        max = count + 1;
                    }
                }
 
            } else {
                if (max < (k+1)){
                    max = k + 1;
                }
            }




        }

        
        return max;

    }


}
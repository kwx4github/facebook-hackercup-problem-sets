import sys, traceback, time

def findIdx(words, word):
    N = len(words)
    up = N-1
    down = 0
    while up-1 > down:
        idx = (up + down) / 2
        if word > words[idx]: down = idx
        elif word < words[idx]: up = idx
        else: return idx
    
    if word > words[up]: return up
    return down

def countSameLetters(word1, word2):
    N = min(len(word1), len(word2))
    for i in range(N):
        if word1[i] != word2[i]: return i
    return N

def main():
    # ##################### take the input #####################
    # file name parameters
    fin = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\B.in'
    fout = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\B.out'
    
    # read the input file
    f = open(fin, 'r')
    s = f.read()
    f.close()
    lines = s.split('\n')
    
    # #################### parse the input and process the input #######################
    answers = []
    T = eval(lines.pop(0))
    for i in range(T):
        t1 = time.clock()
        print i+1,
        
        N = eval(lines.pop(0))
        words = ['']
        answer = 0
        for j in range(N):
            word = lines.pop(0)
            idx = findIdx(words, word)
            
            sameLetts1 = countSameLetters(words[idx], word)
            if idx < len(words)-1: sameLetts2 = countSameLetters(words[idx+1], word)
            else: sameLetts2 = 0
            
            sameLetts = max(sameLetts1, sameLetts2)
            words.insert(idx+1, word)
            answer += min(sameLetts + 1, len(word))
        
        answers.append(str(answer))
        
        t2 = time.clock()
        print "in " + str(round((t2-t1)*1000)/1000.) + "s"
    
    # #################### write the output ####################
    s = []
    for j in range(1, T+1):
        strAns = "Case #" + str(j) + ": " + str(answers[j-1])
        s.append(strAns)
    
    s = "\n".join(s)
    f = open(fout, 'w')
    f.write(s)
    f.close()

try:
    main()
    print "Finish"
    raw_input()
except:
    traceback.print_exc()
    raw_input()

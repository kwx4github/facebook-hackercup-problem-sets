package R1;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.HashMap;

public class Autocomplete {

	static String inFile = "in2.txt";
	static String outFile = "R2_out.txt";
	static InputStreamReader isr;
	static BufferedReader br;
	static PrintWriter pw;

	static int gint() throws NumberFormatException, IOException {
		return Integer.parseInt(br.readLine());
	}

	static int[] ginta() throws NumberFormatException, IOException {
		String l = br.readLine();
		String[] v = l.split(" ");
		int[] a = new int[v.length];

		for (int i = 0; i < a.length; i++) {
			a[i] = Integer.parseInt(v[i]);
		}

		return a;
	}

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		isr = new InputStreamReader(new FileInputStream(inFile));
		br = new BufferedReader(isr);
		pw = new PrintWriter(outFile);

		int t = gint();
		for (int i = 1; i <= t; i++) {
			String l = solve(i);
			System.out.println(l);
			pw.println(l);
		}

		pw.close();
	}

	static class T {
		int c;
		HashMap<Integer, T> children;

		public T(int c) {
			this.c = c;
			this.children = new HashMap<Integer, Autocomplete.T>();
		}
	}

	static String solve(int caseN) throws NumberFormatException, IOException {

		T root = new T(-1);
		int n = gint();
		long ans = n;
		
		for (int i = 0; i < n; i++) {
		
			String w = br.readLine();
			T current = root;
			boolean hasnew = false;
			for (int j = 0; j < w.length(); j++) {
				int k = w.charAt(j);
				if (current.children.containsKey(k)) {
					current = current.children.get(k);
					ans++;
				} else {
					current.children.put(k, new T(k));
					current = current.children.get(k);
					hasnew = true;
				}
			}
			
			if (!hasnew) ans--;
		}

		return String.format("Case #%d: %d", caseN, ans);
	}

}

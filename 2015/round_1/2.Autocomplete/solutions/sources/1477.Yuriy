#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>
#include <map>

using namespace std;

const int MAXA = 30;
const int MAXN = 1000010;

struct Node {
    vector < int > go;
    Node() {
        go.assign(MAXA, -1);
    }
    void clear() {
        go.assign(MAXA, -1);
    }
};

int T, n, sz, ans;
string s;
Node nodes[MAXN];

int get(char c) {
    return c - 'a';
}

void add(string& s) {
    int i = 0;
    int v = 0;
    while (true) {
        if (i == s.size())
            return;
        if (nodes[v].go[get(s[i])] == -1)
            nodes[v].go[get(s[i])] = sz++;
        v = nodes[v].go[get(s[i])];
        ++i;
    }
}

int get(string& s) {
    int i = 0;
    int v = 0;
    while (true) {
        if (i == s.size() || nodes[v].go[get(s[i])] == -1)
            return i;
        v = nodes[v].go[get(s[i])];
        ++i;
    }
}

int main() {
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    ios::sync_with_stdio(false);
    scanf("%d", &T);
    for (int t = 1; t <= T; ++t) {
        scanf("%d", &n);
        for (int i = 0; i < sz; ++i)
            nodes[i].clear();
        sz = 1;
        ans = 0;
        for (int i = 0; i < n; ++i) {
            cin >> s;
            ans += min(get(s) + 1, (int)s.size());
            add(s);
        }
        printf("Case #%d: %d\n", t, ans);
    }
    return 0;
}
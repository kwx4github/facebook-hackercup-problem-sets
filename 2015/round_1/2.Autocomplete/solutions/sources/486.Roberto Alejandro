#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>

#define N 1000009
#define MOD 1000000007LL
#define L 30

using namespace std;

int trie[N][L];
int cant[N];
int node;
 
void add(const string &s){
     
    int p = 0;
    int l = s.length(); 
    
    cant[p]++;
    
    for(int i = 0; i < l; i++){

        if(trie[p][s[i]-'a'] == 0){
            p=trie[p][s[i]-'a']= ++node;    
        }
		else{
            p=trie[p][s[i]-'a'];
        }
		cant[p]++;    
    }

}

int min_l(const string &s){
     
    int p = 0;
    int l = s.length(); 
    
    //if(cant[p] == 1) return 0;
    
    for(int i = 0; i < l; i++){
		
		p=trie[p][s[i]-'a'];
		
		if(cant[p] == 1) return i + 1;
    }
     
    return l;
}

char cad[N];

int main(){
	
	int nc, caso = 1;
	scanf("%d", &nc);
	
	while(nc--){
		
		memset(cant, 0, sizeof(cant));
		memset(trie, 0, sizeof(trie));
		node = 1;
		
		int n;
		scanf("%d", &n);
		
		vector<string> vcad(n);
		
		int resp = 0;
		for(int i = 0; i < n; i++){
			scanf("%s", cad);
			
			vcad[i] = (string)cad;
			//cout<<vcad[i]<<endl;
			add(vcad[i]);
			resp += min_l(vcad[i]);
			//cout<<i<<" "<<min_l(vcad[i])<<endl;
		}
		
		printf("Case #%d: %d\n",caso, resp);
		caso++;
			
	}
	
	return 0;
}

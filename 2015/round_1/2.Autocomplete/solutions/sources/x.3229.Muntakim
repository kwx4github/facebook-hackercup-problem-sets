#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<ctime>
#include<climits>
#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<map>
#include<stack>
#include<queue>
#include<deque>
#include<algorithm>
#include<complex>
#include<set>
#include<bitset>
#include<utility>
#include<valarray>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector<vector<int> > vvi;
typedef vector<string> vs;
typedef vector<pair<int,int> > vpii;

#define pb push_back
#define mp make_pair
#define PI acos(-1)
#define all(a) (a).begin(),(a).end()
#define len(a) ((int)(a).size())
#define mem(a,n) memset(a,n,sizeof(a))
#define eps 1e-9
#define rep(i,n) for(int i=0;i<(n);i++)
#define repi(i,a,n) for(int i=(a);i<(n);i++)
#define repr(i,a,n) for(int i=(n);i>=(a);i--)

int n;
char str[10000005];


struct Node{
	Node* ary[26];
	char ch;
	Node(){
		rep(i,26)ary[i]=NULL;
		ch = 0;
	}
};

struct Trie{
	Node *head;
	Trie(){
		head = NULL;
	}
	
	int insert(string &s,int pos){
		if(head==NULL){
			head = new Node();
			(head->ary)[s[pos]-'a'] = new Node();
			
			return insert((head->ary)[s[pos]-'a'],s,pos);
		}else{
			if((head->ary)[s[pos]-'a']==NULL)(head->ary)[s[pos]-'a']=new Node();
			return insert((head->ary)[s[pos]-'a'],s,pos);
		}
	}
	
	int insert(Node *n,string &s,int pos){
		//~ cout<<s[pos]<<" = "<<(n->ch)<<endl;
		if(n->ch==0){
			n->ch = s[pos];
			pos++;
			//~ cout<<pos<<endl;
			if(pos!=len(s)){
				(n->ary)[s[pos]-'a']=new Node();
				insert((n->ary)[s[pos]-'a'],s,pos);
			}else{
				
			}
			return pos;
		}else{
			pos++;
			if(pos==len(s))return pos;
			if((n->ary)[s[pos]-'a']==NULL)(n->ary)[s[pos]-'a']=new Node();
			return insert((n->ary)[s[pos]-'a'],s,pos);
		}
	}
	
};

string s;
int main(void){
	freopen("inb.txt","r",stdin);
	freopen("outb.txt","w",stdout);
	
	//~ ios_base::sync_with_stdio(0);
	int tst;
	scanf("%d",&tst);
	repi(ks,1,tst+1){
		Trie tr;
		scanf("%d",&n);	
		//~ cout<<n<<endl;
		int ans = 0;
		if(n==1){
			scanf("%s",str);
			ans = strlen(str);
		}else
		rep(i,n){
			scanf("%s",str);
			s = string(str);
			int t=tr.insert(s,0);
			ans+=t;
			//~ cout<<s<<" "<<t<<endl;
			//~ cout<<"hic"<<endl;
		}
		
		cout<<"Case #"<<ks<<": "<<ans<<endl;
		//~ return 0;
	}
	
	return 0;
}

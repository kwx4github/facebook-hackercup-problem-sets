#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker,"/STACK:64000000")
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <cassert>
#include <time.h>
#include <bitset>

using namespace std;

#define mp make_pair
#define pb push_back
#define _(a,b) memset( (a), b, sizeof( a ) )
#define all(a) a.begin(), a.end()
#define sz(a) (int)a.size()
#ifdef WIN32
#define dbg(...) {fprintf(stderr, __VA_ARGS__); fflush(stderr);}
#define dbgx(x) {cerr << #x << " = " << x << endl;}
#define dbgv(v) {cerr << #v << " = {"; for (typeof(v.begin()) it = v.begin(); it != v.end(); it ++) cerr << *it << ", "; cerr << "}"; cerr << endl;}
#else
#define dbg(...) { }
#define dbgx(x) { }
#define dbgv(v) { }
#endif

typedef unsigned long long ull;
typedef long long lint;
typedef pair < int , int > pii;
typedef long double ld;

const int INF = 1000 * 1000 * 1000;
const lint LINF = 1000000000000000000LL;
const double eps = 1e-9;

void prepare()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

const int nmax = 1000 * 1000 + 5;

char buf[nmax];
int nxt[nmax][255], SZ;

int add_word(char * s)
{
	int len = strlen(s), v = 0, ret = 0;
	for (int i = 0; i < len; i ++)
	{
		if (nxt[v][s[i]] == -1)
		{
			if (ret == 0)
			{
				ret = i + 1;
			}
			_(nxt[SZ], -1);
			nxt[v][s[i]] = SZ++;
		}
		v = nxt[v][s[i]];
	}
	return ret > 0 ? ret : len;
}

void read()
{
	SZ = 1;
	_(nxt[0], -1);

	int n;
	lint sum = 0;
	scanf("%d",&n);
	for (int i = 0; i < n; i ++)
	{
		scanf("%s",buf);
		int cost = add_word(buf);
		sum += cost;
	}
	printf("%lld\n", sum);
}

bool solve()
{

	return false;
}

int main()
{
	_(nxt, -1);

	prepare();
	int t;
	scanf("%d",&t);
	for (int i = 0; i < t; i ++)
	{
		dbg("Test %d\n", i);
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}
	return 0;
}

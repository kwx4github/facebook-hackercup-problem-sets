#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <fstream>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <limits>
#include <string.h>

#define pb push_back
#define mp make_pair


using namespace std;
typedef long long LL;

static struct IO {
char tmp[1 << 10];
 
// fast input routines
char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc_unlocked(stdin); }
inline char peekChar() { return cur; }
 
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
 
inline IO& operator >> (string & s) {
if (skipBlanks()) {	s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
 
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc_unlocked(c, stdout); }
inline IO& operator << (char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
#define MAXN 60
 
typedef struct SUFFIX_TREE_node TRIE;
struct SUFFIX_TREE_node
{
    int value;
    TRIE *beta[MAXN];
};
 
typedef struct SUFFIX_TREE TRIE_USERDEF;
struct SUFFIX_TREE
{
    TRIE *root;
    int count;
};
 
TRIE *LeLe(void)
{
    TRIE *temp = NULL;
    temp = (TRIE *)malloc(sizeof(TRIE));
    if( temp )
    {
        int i;
        temp->value = 0;
        for(i = 0; i < MAXN; i++) temp->beta[i] = NULL;
    }
    return temp;
}
 
void shuru(TRIE_USERDEF *ArreYaar)
{
    ArreYaar->root = LeLe();
    ArreYaar->count = 0;
}
 
void Daalo(TRIE_USERDEF *ArreYaar, string key)
{
    int level;
    int length = key.size();
    int index;
    TRIE *spiderman;
 
    ArreYaar->count++;
    spiderman = ArreYaar->root;
 
    for( level = 0; level < length; level++ )
    {
        index = key[level] - 'a';
        if( !spiderman->beta[index] ) spiderman->beta[index] = LeLe();
        spiderman = spiderman->beta[index];
    }
 
    spiderman->value = ArreYaar->count;
}
 
int dhundho_re(TRIE_USERDEF *ArreYaar, string key)
{
    int level;
    int length = key.size();
    int index;
    TRIE *spiderman;
    spiderman = ArreYaar->root;
 
    for( level = 0; level < length; level++ )
    {
        index = key[level] - 'a';
        if( !spiderman->beta[index] ) return level+1;
        spiderman = spiderman->beta[index];
    }
    return level;
}
 
void solve()
{
    int n;
    cin>>n;
    string keys[n+1];
    TRIE_USERDEF trie;
    shuru(&trie);
    int ans=0;
    for(int i = 0; i < n; i++)
    {
    	cin>>keys[i];
    	int pref_length = dhundho_re(&trie, keys[i]);
    	ans += pref_length;
        Daalo(&trie, keys[i]);
    }
	cout<<ans<<"\n";
}

int main()
{
	int t;
	cin>>t;
	for(int qq=1;qq<=t;qq++)
	{
		cout<<"Case #"<<qq<<": ";
		solve();
	}
}

// compile: g++ -Wall -O3 autocomplete.cpp -o autocomplete
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <vector>
using namespace std;

typedef long long int LL;
typedef pair<int,int> PII;

struct TrieNode {
    map<char, int> next;
    int value;

    TrieNode() : value(0) {}
};

class Trie {
  public:
    Trie() {
        nodes_.push_back(TrieNode());
    }

    void put(const string& s) {
        int current = 0;
        int size = s.size();
        for (int i = 0; i < size; ++i) {
            map<char, int>::iterator next = nodes_[current].next.find(s[i]);
            if (next == nodes_[current].next.end()) {
                int c = nodes_.size();
                nodes_[current].next[s[i]] = c;
                current = c;
                nodes_.push_back(TrieNode());
            } else
                current = next->second;
            nodes_[current].value++;
        }
    }

    int get(const string& s) const {
        int current = 0;
        int size = s.size();
        for (int i = 0; i < size; ++i) {
            map<char, int>::const_iterator next = nodes_[current].next.find(s[i]);
            current = next->second;
            //cout << s[i] << ' ' << nodes_[current].value << ' ';
            if (nodes_[current].value == 1)
                return i+1;
        }
        return size;
    }

  private:
    vector<TrieNode> nodes_;
};


int main(int argc, char*argv[]) {
    ios_base::sync_with_stdio(false);
    int T;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        int N, r=0;
        cin >> N;
        Trie trie;
        string word;
        for (int i = 0; i < N; ++i) {
            cin >> word;
            trie.put(word);
            int pref = trie.get(word);
            //cout << endl;
            //printf("%s -> %d\n", word.c_str(), pref);
            r += pref;
        }
        printf("Case #%d: %d\n", t, r);
    }
    return EXIT_SUCCESS;
}

#include<stdio.h>
#include<string.h>
#include<math.h>
#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
#include<string>
#include<set>
#include<map>

using namespace std;

#define mp make_pair
#define pb push_back
#define sz size()
#define tr(c, it) \
for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef long long ll;

int longest_prefix(string S, string T) {
    int i;
    for(i=0; S[i]&&T[i]&&S[i]==T[i]; i++);
    return i;
}

// Alphabet size (# of symbols)

#define ALPHABET_SIZE (26)
#define INDEX(c) ((int)c - (int)'a')

#define FREE(p) \
    free(p);    \
    p = NULL;

// forward declration
typedef struct trie_node trie_node_t;

// trie node
struct trie_node {
    int value; // non zero if leaf
    trie_node_t *children[ALPHABET_SIZE];
};

// trie ADT
typedef struct trie trie_t;

struct trie {
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void) {
    trie_node_t *pNode = NULL;

    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));

    if( pNode ) {
        int i;

        pNode->value   = 0;

        for(i = 0; i < ALPHABET_SIZE; i++) {
            pNode->children[i] = NULL;
        }
    }

    return pNode;
}

void initialize(trie_t *pTrie) {
    pTrie->root = getNode();
    pTrie->count = 0;
}

int insert(trie_t *pTrie, char key[]) {
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
    int res = -1;

    pTrie->count++;
    pCrawl = pTrie->root;

    for( level = 0; level < length; level++ ) {
        index = INDEX(key[level]);

        if( pCrawl->children[index] ) {
            // Skip current node
            pCrawl = pCrawl->children[index];
        } else {
            // Add new node
            pCrawl->children[index] = getNode();
            pCrawl = pCrawl->children[index];
            if (res == -1) res = level+1;
        }
    }

    if (res == -1) res = length;

    // mark last node as leaf (non zero)
    pCrawl->value = pTrie->count;
    return res;
}

char S[10000005];

int main() {

#ifndef ONLINE_JUDGE
    freopen("testcase.in", "r", stdin);
    freopen("output.out", "w", stdout);
#endif

    int T, k, i, N;
    ll total;

    trie_t trie;


    scanf("%d", &T);
    for(k=1; k<=T; k++) {
        initialize(&trie);
        scanf("%d", &N);
        total = 0;
        for(i=0; i<N; i++) {
            scanf("%s", S);
            total += insert(&trie, S);
        }
        printf("Case #%d: %lld\n", k, total);
    }

    return 0;
}

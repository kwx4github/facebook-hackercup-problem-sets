//http://www.geeksforgeeks.org/trie-insert-and-search/
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
typedef struct trie_node trie_node_t;
char s[1000005];
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if( pNode )
    {
        int i;
        pNode->value = 0;
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}

void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
int insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
    pTrie->count++;
    pCrawl = pTrie->root;
 int f=0,ans=0;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
		if(f==0){f=1;ans=level+1;}
            pCrawl->children[index] = getNode();
        }
 
        pCrawl = pCrawl->children[index];
    }
    pCrawl->value = pTrie->count;
    if(f==0)ans=strlen(key);
    return ans;
}

int main()
{
	int t,n;
	
	scanf("%d",&t);
	for(int x=1;x<=t;x++){
	long long int answer = 0L;
 	trie_t trie; 
	initialize(&trie);
		scanf("%d",&n);
		for(int i=0;i<n;i++){
			scanf("%s",s);
			int val = insert(&trie,s);
			answer +=val;
	}
	printf("Case #%d: %lld\n",x,answer);
	}
    return 0;
}

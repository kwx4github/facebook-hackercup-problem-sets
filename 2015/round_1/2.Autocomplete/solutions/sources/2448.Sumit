import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;


public class Autocomplete {

    Dawg trie;
    Scanner scan;
    FileWriter fstream;
    BufferedWriter out;
    
    public Autocomplete() {
        try {
             fstream = new FileWriter("out.txt");
             out = new BufferedWriter(fstream);
            scan = new Scanner(new File("input.txt"));
        } catch(Exception e) {
            
        }
    }
        
    public static void main(String[] args) {
        
        new Autocomplete().solve();

    }
    
    private int solveHelper() {
        
        Dawg dawgTrie = new Dawg();
        int N = scan.nextInt();
        int totalLetters = 0;
        
        for (int i=0; i<N; i++) {
            String word = scan.next();
            totalLetters += dawgTrie.lcp(word);
            if (i<N-1) {
                dawgTrie.insert(word);
            }
            
        }

        return totalLetters;

    }
    
    private void solve() {
        int tc;

        try {
            tc = Integer.parseInt(scan.nextLine());
            for (int t = 0; t<tc; t++) {
                
                out.write("Case #"+(t+1) + ": " + solveHelper() +"\n");
                out.flush();
            }
            
            out.close();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    }

}


class Dawg {
    DawgNode root;
    
    public Dawg() {
        root = new DawgNode();
    }
    
    public void insert(String word) {
        DawgNode cur = root;
        for (char c : word.toCharArray()) {
            cur = cur.addEdge(c);
        }
    }
    
    public int lcp(String word) {
        DawgNode cur = root;
        int lcpLength = 0;
        for (char c : word.toCharArray()) {
            lcpLength++;
            cur = cur.getEdge(c);
            if (cur == null) {
                return lcpLength;
            }
        }
        return lcpLength;
    }
    
    class DawgNode {
        Map<Character, DawgNode> edges;
        
        public DawgNode() {
            edges = new HashMap<Character, DawgNode>(1);
        }
       
        public DawgNode getEdge(char c) {
            return edges.get(c);
        }
        
        public DawgNode addEdge(char c) {

            if (edges.get(c) != null) {
                return edges.get(c);
            } else {
                DawgNode newNode = new DawgNode();
                edges.put(c, newNode);
                return newNode;

            }
        }
    }
}
#include <bits/stdc++.h>
#define endl "\n"
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define SORT(a) sort(a.begin(), a.end())
#define SORTR(a) sort(a.rbegin(), a.rend())
#define GET(a, n) for (int i = 0; i < n; ++i) cin >> a[i];
#define GETM(a, n, m) for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) cin >> a[i][j];
#define PRINTM(a, n, m) for (int i = 0; i < n; ++i) { for (int j = 0; j < m; ++j) cout << a[i][j] << " ";  cout << endl; };
#define PRINT(a, n) for (int i = 0; i < n; ++i) cout << a[i] << " ";
#define GETSUM(sum, n) sum = 0; for (int i = 0; i < n; ++i) { int tmp; cin >> tmp; sum += tmp; }
#define SUM(a, n, sum) sum = 0; for (int i = 0; i < n; ++i) { sum += a[i]; }
#define IT(a) a.begin(), a.end()
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef vector <int> VI;
typedef vector <vector <int>> VVI;
typedef pair <int, int> PII;
template <class T> typename T::value_type arr_sum(const T& v, int n) { typename T::value_type sum = 0; FOR(i, 0, n) sum += v[i]; return sum; }
struct Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

int res = 0;

void
make_forest(string &a, vector <vector <int>> &v)
{
    a.push_back('0');
    v.resize(a.size());
}

void
add_forest(string &a, vector <vector <int>> &v, const string &tmp)
{
    int k = 0;
    FOR(j, 0, int(tmp.size())) {
        if (k == -1) {
            while (j < int(tmp.size())) {
                a.push_back(tmp[j]);
                v.resize(a.size());
                v[a.size() - 2].push_back(a.size() - 1);
                ++j;
            }
        } else {
            ++res;
            int flag = 0;
            FOR(t, 0, int(v[k].size())) {
                if (a[v[k][t]] == tmp[j]) {
                    k = v[k][t];
                    flag = 1;
                    break;
                }
            }
            if (!flag) {
                 a.push_back(tmp[j]);
                 v.resize(a.size());
                 v[k].push_back(a.size() - 1);
                 k = -1;
            }
        }
    }
}

int main()
{
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        string a;
        vector <vector <int>> v;
        make_forest(a, v);
        res = 0;
        int n;
        cin >> n;
        for (int j = 0; j < n; ++j) {
            string t;
            cin >> t;
            add_forest(a, v, t);
        }
        cout << "Case #" << i + 1 << ": " << res << endl;
    }
}

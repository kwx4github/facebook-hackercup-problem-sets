/*************************************************************************
	> File Name: Autocomplete.cpp
	> Author: skt
	> Mail: sktsxy@gmail.com
	> Created Time: 2015年01月18日 星期日 13时53分35秒
 ************************************************************************/

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <complex>
#include <cassert>
#pragma comment(linker,"/STACK:102400000,102400000")
using namespace std;
#define LL long long
#define pb push_back
#define mp make_pair
#define eps 1e-8
#define x first
#define y second
template <typename T> inline T Max(T a, T b) {return a>b?a:b;}
template <typename T> inline T Min(T a, T b) {return a<b?a:b;}
typedef pair<int, int> PII;
typedef vector<int> vi;
const double PI = acos(-1.0);
const int KIND = 26;
int T, N, Cas = 1;

string str;

struct Node {
    int c;
    Node * next[KIND];
    
    Node() {
        c = 0;
        for (int i = 0; i < KIND; i ++) {
            next[i] = NULL;
        }
    }

    ~Node() {
        for (int i = 0; i < KIND; i ++) {
            if (next[i] != NULL) {
                delete next[i];
            }
        }
    }
};

void addNode(int top, Node *root) {
    if (top == str.length()) {
        return ;
    }
    int x = str[top] - 'a';
    Node *tr = root;
    if (tr -> next[x] == NULL) {
        tr -> next[x] = new Node();
    }
    tr -> next[x] -> c ++;
    addNode(top + 1, tr -> next[x]);
}

int query(int top, Node *root) {
    if (top == str.length()) {
        return top;
    }
    int x = str[top] - 'a';   
    if (root -> next[x] -> c == 1) {
        return top + 1;
    } else {
        return query(top + 1, root -> next[x]);
    }
}

void work() {
    Node * root = new Node;
    LL res = 0;
    cin >> N;
    if (N == 1) {
        cin >> str;
        res = 1;
    } else {
        for (int i = 1; i <= N; i ++) {
            cin >> str;
            addNode(0, root);
            res = res + query(0, root);
        }
    }
    printf("Case #%d: %lld\n", Cas ++, res);
}
int main() {
    ios::sync_with_stdio(false);
    cin >> T;
    while (T --) {
        work();
    }
    return 0;
}

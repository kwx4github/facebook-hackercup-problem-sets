// Paul Balloon
// low quality code | written quickly | sorry
#include <iostream>
#include <vector>
#include <string>
#include <map>

using namespace std;

typedef unsigned long long uint64;

class Trie 
{
  // TYPE NEEDED
    struct Node
    {
        Node();
        map <char, Node*> edges;
        bool EndOfWord;  
    };
    
  // END
public:
    Trie();
    void Insert(string& word);
    bool ContainWord(string& word);
    uint64 LongestPrefixLength(string& prefix);
    vector <string> AllWordWithPrefix(string& prefix);
    int size();
private:
    // methods
    void GetAllWords(Node* node, vector <string>& words, string& actual_word);
    // fields
    int size_;
    Node* root_;
    
};

inline uint64 Max(uint64 a, uint64 b)
{
    return((a > b)? a : b);
}

int main()
{
    int test_number;
    cin >> test_number;
    
    for(int nvm = 0; nvm < test_number; ++nvm)
    {
        cout << "Case #" << nvm + 1 << ": ";
        int words_number;
        cin >> words_number;
        Trie tree;
        
        string temp;
        uint64 result = 0;
        for(int i = 0; i < words_number; ++i)
        {
            cin >> temp;
            result += tree.LongestPrefixLength(temp);
            tree.Insert(temp);
        }
        
        cout << result << endl;
    }
}

#define LETTER first
#define NODE second

Trie::Node::Node()
{
    EndOfWord = false;
}

Trie::Trie()
{
    root_ = new Node;
    size_ = 0;
}


void Trie::Insert(string& word)
{
    Node* actual_node = root_;
    
    for(auto it = word.begin(); it != word.end(); ++it) 
    {
        auto next_node = actual_node-> edges.find(*it);
        
        if(next_node != actual_node-> edges.end()) 
        {
            actual_node = next_node-> NODE;
        }
        else 
        {
            Node* temp_node = new Node;
            actual_node-> edges.insert(pair <char, Node*> (*it, temp_node));
            actual_node = temp_node;
        }
    }
    
    actual_node-> EndOfWord = true;
    ++size_;
}

bool Trie::ContainWord(string& word)
{
    Node* actual_node = root_;
    
    for(auto it = word.begin(); it != word.end(); ++it)
    {
        auto next_node = actual_node-> edges.find(*it);
        
        if(next_node != actual_node-> edges.end()) 
        {
            actual_node = next_node-> NODE;
        }
        else
        {
            return false;
        }
    }
    
    if(actual_node-> EndOfWord)    
        return true;
    else
        return false;
}

uint64 Trie::LongestPrefixLength(string& prefix)
{
    Node* actual_node = root_;
    uint64 result = 0;
    
    for(auto it = prefix.begin(); it != prefix.end(); ++it)
    {
        auto next_node = actual_node-> edges.find(*it);
        
        if(next_node != actual_node-> edges.end()) 
        {
            actual_node = next_node-> NODE;
            ++result;
        }
        else
        {
            return (result + 1);
        }
    }
    
    return result;
}

vector <string> Trie::AllWordWithPrefix(string& prefix)
{
    vector <string> result;
    Node* actual_node = root_;
    
    for(auto it = prefix.begin(); it != prefix.end(); ++it)
    {
        auto next_node = actual_node-> edges.find(*it);
        
        if(next_node != actual_node-> edges.end()) 
        {
            actual_node = next_node-> NODE;
        }
        else
        {
            return result;
        }
    }
    
    GetAllWords(actual_node, result, prefix); //rekurencja, ale kodze na szybko i nie chce mi się myśleć nad iteracyjną wersją
    
    return result;
}

int Trie::size()
{
    return size_;
}

void Trie::GetAllWords(Node* node, vector<string>& words, string& actual_word)
{
    if(node-> EndOfWord)
        words.push_back(actual_word);
    
    for(auto it = node-> edges.begin(); it != node-> edges.end(); ++it)
    {
        actual_word.push_back(it-> LETTER);
        GetAllWords(it-> NODE, words, actual_word);
        actual_word.pop_back();
    }
}

#undef LETTER
#undef NODE



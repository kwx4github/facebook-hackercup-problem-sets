#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <utility>
#include <numeric>
#include <fstream>

using namespace std;

#define		ALL(c)	(c).begin(),(c).end()
#define		SZ(c)	int((c).size())
#define		LEN(s)	int((s).length())
#define		FOR(i,n)	for(int i=0;i<(n);++i)
#define		FORD(i,a,b)	for(int i=(a);i<=(b);++i)
#define		FORR(i,a,b)	for(int i=(b);i>=(a);--i)

typedef istringstream iss;
typedef ostringstream oss;
typedef long double ld;
typedef long long i64;
typedef pair<int,int> pii;

typedef vector<i64> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;

typedef vector<ld> vd;
typedef vector<vd> vvd;

typedef vector<string> vs;

const i64 d18 = 1000000000000000000LL;
const ld eps = 1e-9;
const ld pi = atan2(0.0, -1.0);
template<class T> T sqr(T a) { return a * a; }
i64 abs(i64 a) { return (a >= 0) ? a : -a; }

ofstream LOG("log.txt");

ifstream fin;
ofstream fout;

class PrefTree
{
public:
	PrefTree()
	{
		P.push_back(map<char,pii>());
	}

	void addWord(const string & w)
	{
		int n = LEN(w);
		int ti = 0;
		map<char,pii>::iterator it;
		FOR(i, n)
		{
			it = P[ti].find(w[i]);
			if (it == P[ti].end())
			{
				P.push_back(map<char,pii>());
				P[ti][w[i]] = pii(SZ(P)-1, 1);
				ti = SZ(P)-1;
			}
			else
			{
				it->second.second++;
				ti = it->second.first;
			}
		}
	}

	int prefLen(const string & w)
	{
		int n = LEN(w);
		int ti = 0, len = 0;
		map<char,pii>::iterator it;
		FOR(i, n)
		{
			it = P[ti].find(w[i]);
			len++;
			if (it->second.second == 1) break;
			ti = it->second.first;
		}
		return len;
	}

private:
	vector<map<char,pii> > P;
};

void solve_case(int TN)
{
	int n;
	fin >> n;
	PrefTree pt;
	int ans = 0;
	string s;
	FOR(i, n)
	{
		fin >> s;
		pt.addWord(s);
		ans += pt.prefLen(s);
	}

	fout << "Case #" << TN << ": " << ans << endl;
	cout << "Case #" << TN << ": " << ans << endl;
}

int main()
{
	//FOR(j, 10)
	//{
	//	FOR(i, 100000) LOG << char(rand()%26 + 'a');
	//	LOG << endl;
	//}
	//return 0;

	fin.open("B.in"); 
	fout.open("B.out");

	int T; 
	fin >> T;
	FOR(tt, T)
	{
		solve_case(tt+1);
	}

	return 0;	
}

/*
ID: eoart2
PROG: transform
LANG: C++
*/
//#define MYDEBUG
#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:134217728")
#include <cstdio>
#include <iostream>
#include <iomanip> 
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <functional>
#include <cassert>

const long long MOD = 10000;
const long long INF = 2111111111111111111;
const int MAXN = 105;
const double EPS = 1e-7;
const int HASH_POW = 29;
const double PI = acos(-1.0);

using namespace std;

void my_return(int code)
{
	#ifdef MYDEBUG
		cout << "\nTime = " << fixed << setprecision(3) << double(clock()) / CLOCKS_PER_SEC << endl;
	#endif
	exit(code);
}

int trie[1000010][26], sz = 1;

int add(string word)
{
	int pt = 0, ans = word.length();
	for (int i = 0; i < word.length(); ++i)
	{
		if (trie[pt][word[i] - 'a'])
			pt = trie[pt][word[i] - 'a'];
		else
		{
			ans = min(ans, i + 1);
			trie[pt][word[i] - 'a'] = sz++;
			pt = trie[pt][word[i] - 'a'];
		}
	}
	return ans;
}

int main()
{
	cin.sync_with_stdio(0);
	#ifdef MYDEBUG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	#else
	freopen("autocomplete.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	#endif

	int CASE;
	cin >> CASE;
	for (int t = 1; t <= CASE; ++t)
	{
		memset(trie, 0, sizeof trie);
		sz = 1;
		int n;
		cin >> n;
		int ans = 0;
		while (n-- > 0)
		{
			string word;
			cin >> word;
			ans += add(word);
		}
		cout << "Case #" << t << ": " << ans << "\n";
	}

	my_return(0);
}
#include <cstdio>
#include <map>
using namespace std;

const int N_MAX = 100005, LEN_MAX = 1000005;

struct trie {
    int count;
    map<char, trie*> next;

    trie() {
        count = 0;
    }

    trie* add_next(char letter) {
        if (next.find(letter) == next.end()) {
            next[letter] = new trie();
        }

        return next[letter];
    }
};

int N;
char str[LEN_MAX], *words[N_MAX];
trie* tree;

void add(char *word) {
    trie* current = tree;
    current->count++;

    for (char *ptr = word; *ptr != NULL; ptr++) {
        current = current->add_next(*ptr);
        current->count++;
    }
}

int compute(char *word) {
    trie* current = tree;
    int steps = 0;

    while (current->count > 1 && *word != NULL) {
        current = current->next[*word++];
        steps++;
    }

    return steps;
}

void delete_all(trie* current) {
    for (map<char, trie*>::iterator it = current->next.begin(); it != current->next.end(); it++) {
        delete_all(it->second);
    }

    delete current;
}

void solve_case(int test_case) {
    scanf("%d", &N);
    tree = new trie();
    int total = 1;

    for (int i = 0; i < N; i++) {
        scanf("%s", str);
        int len = strlen(str);
        words[i] = new char[len + 1];
        strcpy(words[i], str);
        add(words[i]);
        total += compute(words[i]);
    }

    // for (int i = 0; i < N; i++) {
    //     delete[] words[i];
    // }

    // delete_all(tree);
    printf("Case #%d: %d\n", test_case, total);
}

int main() {
    int T; scanf("%d", &T);

    for (int tc = 1; tc <= T; tc++) {
        solve_case(tc);
        fflush(stdout);
    }

    return 0;
}

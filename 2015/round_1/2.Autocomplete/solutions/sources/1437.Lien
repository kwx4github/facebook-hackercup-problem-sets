#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int N = int(1e6) + 2;
char s[N];

struct node{
    int n[26];
    node(){memset(n, 0, sizeof n);}
};

struct trie{
    vector<node> a;
    node bas;
    trie(){}
    void clean(){
        memset(bas.n, 0, sizeof bas.n);
        a.clear();
        a.push_back(bas);
    }
    int add(){
        int r = 0, ans = 0;
        char c;
        bool still = true;
        for(int i = 0; s[i] >= 'a' && s[i] <= 'z'; ++i){
            ans += still;
            c = s[i] - 'a';
            if (a[r].n[c] == 0){
                a[r].n[c] = (int)a.size();
                a.push_back(bas);
                still = false;
            }
            r = a[r].n[c];
        }
        return ans;
    }
} AC;

int ni(){
    gets(s);
    int tmp;
    sscanf(s, "%d", &tmp);
    return tmp;
}

int main(){
    freopen("autocomplete.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int ntest = ni();
    for(int test = 1; test <= ntest; ++test){
        AC.clean();
        int n = ni(), ans = 0;
        while (n--){
            gets(s);
            ans += AC.add();
        }
        printf("Case #%d: %d\n", test, ans);
    }
    return 0;
}

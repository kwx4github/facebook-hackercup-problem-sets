#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <tuple>
#include <vector>
using namespace std;

const int kAlphabetSize = 'z' - 'a' + 1;

struct Node {
  Node() : count(0) { memset(next, -1, sizeof(next)); }

  int count;
  int next[kAlphabetSize];
};

struct Trie {
  Trie() { root = Alloc(); }

  int Alloc() {
    int result = nodes.size();
    nodes.resize(nodes.size() + 1);
    return result;
  }

  void AddWord(const string& word) {
    int cur = root;
    for (char ch : word) {
      int nxt = nodes[cur].next[ch - 'a'];
      if (nxt == -1) {
        nxt = Alloc();
        nodes[cur].next[ch - 'a'] = nxt;
      }
      ++nodes[nxt].count;
      cur = nxt;
    }
  }

  int PrefixLength(const string& word) const {
    int result = 0;
    int cur = root;

    for (char ch : word) {
      ++result;
      int nxt = nodes[cur].next[ch - 'a'];
      if (nxt == -1 || nodes[nxt].count == 1) {
        return result;
      }
      cur = nxt;
    }

    return result;
  }

  int root;
  vector<Node> nodes;
};

int main() {
//  freopen("../Console/1.txt", "rb", stdin);
  freopen("../Console/autocomplete.txt", "rb", stdin);
  freopen("../Console/autocomplete.out", "wb", stdout);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int T;
  cin >> T;

  for (int tc = 0; tc < T; ++tc) {
    int N;
    cin >> N;

    Trie trie;

    string word;
    int answer = 0;
    for (int i = 0; i < N; ++i) {
      cin >> word;
      trie.AddWord(word);
      answer += trie.PrefixLength(word);
    }

    cout << "Case #" << tc + 1 << ": ";
    cout << answer;
    cout << '\n';
  }

  return 0;
}

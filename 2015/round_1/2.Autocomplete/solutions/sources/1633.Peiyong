#define PRETEST
#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stdlib.h>

using namespace std;

const int INF = 0x7fffffff;
const int BIG = 0x4f4f4f4f;

struct node {
	int counter;
	node * next[26];
	node() {
    counter = 0;
    for (int i = 0; i < 26; ++i) {
      next[i] = NULL;
    }
  }
};

int getIndex(char c) {
  return c - 'a';
}

void insert(char *s, node *root) {
  node *p = root;
  int i = 0, index;
  while (s[i]) {
    index = getIndex(s[i]);
    if(p->next[index] == NULL) {
      p->next[index] = new node();
    }
    p = p->next[index];
    ++(p->counter);
    ++i;
  }
}

int find(char *s, node *root) {
  node *p = root;
  int i = 0, index;
  int counter = 1;
  while (s[i]) {
    index = getIndex(s[i]);
    if (p->next[index]->counter == 1) {
      return counter;
    }
    if (s[i + 1]) {
      p = p->next[index];
      ++counter;
      ++i;
    } else {
      return counter;
    }
  }
  return 0;
}

int main() {
#ifdef PRETEST
  freopen("b.txt", "r", stdin);
  freopen("out.txt", "w+", stdout);
#endif
  int T;
  char s[1000010];
  scanf("%d", &T);
  for (int Case = 1; Case <= T; ++Case) {
    int n;
    scanf("%d", &n);
    node *root = new node();
    int ans = 0;
    for (int i = 0; i < n; ++i) {
      scanf("%s", s);
      insert(s, root);
      ans += find(s, root);
    }
    printf("Case #%d: %d\n", Case, ans);
  }
  return 0;
}

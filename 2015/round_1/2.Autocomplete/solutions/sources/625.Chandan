package hackercup.y2015.round1.autocomplete;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/y2015/round1/autocomplete/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    private static class Solver {

        public void solve(InputReader in, PrintWriter out) {
            Trie dict = new Trie();

            int n = in.nextInt();
            int sol = 0;
            for (int i=0; i<n; i++) {
                String str = in.next();
                String match = dict.getMatchingPrefix(str);
                sol += Math.min(match.length() + 1, str.length());
                dict.insert(str);
            }
            out.println(sol);
        }
    }

    // Implements the actual Trie
    static class Trie {
        private TrieNode root;
        // Constructor
        public Trie()   {
            root = new TrieNode((char)0);
        }

        // Method to insert a new word to Trie
        public void insert(String word)  {

            // Find length of the given word
            int length = word.length();
            TrieNode crawl = root;

            // Traverse through all characters of given word
            for( int level = 0; level < length; level++)
            {
                Map<Character,TrieNode> child = crawl.getChildren();
                char ch = word.charAt(level);

                // If there is already a child for current character of given word
                if( child.containsKey(ch))
                    crawl = child.get(ch);
                else   // Else create a child
                {
                    TrieNode temp = new TrieNode(ch);
                    child.put( ch, temp );
                    crawl = temp;
                }
            }
        }

        // The main method that finds out the longest string 'input'
        public String getMatchingPrefix(String input)  {
            StringBuilder result = new StringBuilder(); // Initialize resultant string
            int length = input.length();  // Find length of the input string

            // Initialize reference to traverse through Trie
            TrieNode crawl = root;

            // Iterate through all characters of input string 'str' and traverse
            // down the Trie
            int level;
            for( level = 0 ; level < length; level++){
                // Find current character of str
                char ch = input.charAt(level);

                // HashMap of current Trie node to traverse down
                Map<Character,TrieNode> child = crawl.getChildren();

                // See if there is a Trie edge for the current character
                if( child.containsKey(ch) ) {
                    result.append(ch);          //Update result
                    crawl = child.get(ch); //Update crawl to move down in Trie
                } else {
                    break;
                }
            }
            return result.toString();
        }

        @Override public String toString() {
            return "Trie{" +
                    "root=" + root +
                    '}';
        }
    }

    // Trie Node, which stores a character and the children in a HashMap
    static class TrieNode {
        private char value;
        private Map<Character,TrieNode> children;

        public TrieNode(char ch)  {
            value = ch;
            children = new HashMap<>();
        }

        public Map<Character,TrieNode> getChildren() {
            return children;
        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

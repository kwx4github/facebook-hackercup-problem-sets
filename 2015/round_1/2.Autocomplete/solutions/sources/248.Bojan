import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;

public class Autocomplete {

	public static void main(String[] args) throws Exception {
		Autocomplete object = new Autocomplete();
		String className = object.getClass().getSimpleName();

		FileReader fileReader = new FileReader(new File(className.toLowerCase()
				+ ".in"));
		BufferedReader br = new BufferedReader(fileReader);

		FileWriter wr = new FileWriter(className.toLowerCase() + ".out");

		int testCases = Integer.parseInt(br.readLine().trim());

		for (int tc = 1; tc <= testCases; tc++) {

			int N = Integer.parseInt(br.readLine().trim());

			String[] words = new String[N];

			for (int i = 0; i < N; i++)
				words[i] = br.readLine().trim();

			int result = object.solve(words);
			wr.write("Case #" + tc + ": " + result + "\r\n");
		}

		br.close();
		wr.close();
	}

	Trie trie = null;

	int solve(String[] words) {

		int result = 0;

		trie = new Trie();

		for (String word : words) {

			// insert to trie
			Trie current = trie;
			int freeDepth = -1;
			
			for (int level=0; level <= word.length(); level++) {
				if (level == word.length()) {
					//just mark that we exist
					
					if (freeDepth == -1)
						freeDepth = level; //we must write the entire word
					
					continue;
				}
				
				//find suitable child
				char letter = word.charAt(level);
				int index = letter - 'a';
				
				if (current.children[index] == null) {
					//found depth
					
					if (freeDepth == -1)
						freeDepth = level + 1; //we must write exactly (level + 1) chars
					
					current.children[index] = new Trie();
					current = current.children[index];
				} else {
					//just continue to the next child
					current = current.children[index];
				}
				
			}
			
			if (freeDepth == -1) {
				freeDepth = 0;
				System.out.println("What?");
			}
			
			result += freeDepth;
		}

		return result;
	}

}

class Trie {
	public Trie[] children;

	public Trie() {
		children = new Trie[26];
		Arrays.fill(children, null);
	}
}

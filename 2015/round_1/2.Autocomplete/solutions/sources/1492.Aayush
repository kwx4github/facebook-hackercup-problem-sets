#include<bits/stdc++.h>
using namespace std;
class TrieNode{
public:
  map<char,TrieNode*> next;
  char val;
  int n_uses;//number of uses
  TrieNode(char c):val(c),n_uses(0){ }
};
pair<TrieNode*,char*> addChild(TrieNode *thisNode, char *str){ //return pair for next insertion
  if((*str)=='\0'){
    thisNode->next['$']=new TrieNode('$');
    thisNode->n_uses++;
    return pair<TrieNode*, char*>(NULL,NULL); 
  }else{
    char nextchar=(*str);
    map<char,TrieNode*>::iterator nextnodeit=thisNode->next.find(nextchar);
    if(nextnodeit==thisNode->next.end()){
      thisNode->next[nextchar]=new TrieNode(nextchar);
    }
    thisNode->n_uses++;
    return pair<TrieNode*, char*>(thisNode->next[nextchar],str+1);
  }
}
void addChildRecursionWrapper(TrieNode *thisNode, char *str){
  while(thisNode!=NULL){
    pair<TrieNode*,char*>prev_ret=addChild(thisNode,str);
    thisNode=prev_ret.first;
    str=prev_ret.second;
  }
}
int getMinPreflen(TrieNode *thisNode, char *str){
  int minlen=0;
  while((*str)!=0){
    if(thisNode->n_uses==1){
      minlen+=1;
      break;
    }else{
      char nextchar=*(str+1);
      if(nextchar==0)nextchar='$';
      minlen++;
      thisNode=thisNode->next[nextchar];//->getMinPreflen(str+1);
      str++;
    }
  }
  return minlen;
}

char s[1000001];//10**6
int main(){
  int T;
  cin>>T;
  for(int tno=0;tno<T;tno++){
    TrieNode trieroot('^');
    int N;
    cin>>N;
    int ans_here=0;
    for(int wno=0;wno<N;wno++){
      scanf("%s",s);
      //cerr<<"bp1";
      addChildRecursionWrapper(&trieroot,s);
      //cerr<<"bp2";
      ans_here+=getMinPreflen(trieroot.next[s[0]],s);
    }
    printf("Case #%d: %d\n",1+tno, ans_here);
  }

  return 0;
}

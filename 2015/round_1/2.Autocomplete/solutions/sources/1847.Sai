#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Node
{
public:
    Node() { mLetter = ' '; mTerminator = false; again=false;}
    ~Node() {}
    void setLetter(char c) { mLetter = c; }
    char getLetter() { return mLetter; }
    void setTerminator() { mTerminator = true; }
    void setAgain() { again = true; }
    bool hasTerminator() { return mTerminator; }
    bool hasAgain() { return again; }
    void appendChild(Node* child) { mChildren.push_back(child); }
    Node* findChild(char c);
    vector<Node*> children() { return mChildren; }
    
private:
    char mLetter;
    bool mTerminator;
    vector<Node*> mChildren;
    bool again;
};

Node* Node::findChild(char c)
{
    for ( size_t i = 0; i < mChildren.size(); i++ )
    {
        Node* ptr = mChildren.at(i);
        if ( ptr->getLetter() == c )
        {
            return ptr;
        }
    }
    
    return NULL;
}

class Trie
{
public:
    Trie();
    void addWord(string s);
    int minSuggestion(string s);
    
private:
    Node* root;
};



Trie::Trie()
{
    root = new Node();
}

void Trie::addWord(string s)
{
    Node* current = root;
    
    if ( s.length() == 0 )
    {
        current->setTerminator();
        return;
    }
    
    for (size_t i = 0; i < s.length(); i++ )
    {
        Node* child = current->findChild(s[i]);
        if (child!=NULL)
            child->setAgain();
        if ( child != NULL )
            current = child;
        else
        {
            Node* ptr = new Node();
            ptr->setLetter(s[i]);
            current->appendChild(ptr);
            current = ptr;
        }
        if ( i == s.length() - 1 )
            current->setTerminator();
    }
}

int Trie::minSuggestion(string s)
{
    Node* current = root;
    
    while ( current != NULL )
    {
        for (int i = 0; i < s.length(); i++ )
        {
            Node* ptr = current->findChild(s[i]);
            if (ptr==NULL)
                return s.length();
            if (ptr->children().size()==1&&ptr->hasTerminator()!=true&&ptr->hasAgain()!=true)
                return i+1;
            current = ptr;
        }
        
    }
    return s.length();
}

int main()
{
    int test=0;
    cin>>test;
    for (int i=0;i<test;i++)
    {
        int num;
        cin >>num;
        Trie* trie = new Trie();
        int min_sugges=0;
        for (int j=0;j<num;j++)
        {
            string word;
            cin>>word;
            trie->addWord(word);
            min_sugges+=trie->minSuggestion(word);
        }
        if (i!=test-1)
            cout<<"Case #"<<i+1<<": "<<min_sugges<<endl;
        else
            cout<<"Case #"<<i+1<<": "<<min_sugges;
        //trie->printTrie();
        
        delete trie;
    }
    
    return 0;
}
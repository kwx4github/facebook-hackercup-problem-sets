#include <bits/stdc++.h>
using namespace std;

#define ALPHABET_SIZE (26)

#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
 
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
};
 
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
}
 
void insert(trie_t *pTrie, char key[])
{
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;

    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
 
        pCrawl = pCrawl->children[index];
        pCrawl->value= pCrawl->value+1; 
    }
}
 
int search(trie_t *pTrie, char key[])
{
	int ans= 0;
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
 
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
 
        if( !pCrawl->children[index] )
        {
            return 0;
        }
 
        pCrawl = pCrawl->children[index];
        ans++;
        if(pCrawl->value==1)
        return ans;
    }
 
    return ans;
}

char ch[1000005];

int main()
{
	//freopen("aain.txt", "r", stdin);
	//freopen("aaout.txt", "w", stdout);
	int tc, ans, t=0, n;
	cin>>tc;
	
	while(tc--){
		t++;
		cin>>n;
		ans= 0;
		trie_t trie;
		initialize(&trie);
		for(int i=0;i<n;i++){
			cin>>ch;
			insert(&trie, ch);
			ans+=search(&trie, ch);
		}
		cout<<"Case #"<<t<<": "<<ans<<"\n";
	}
    return 0;
}

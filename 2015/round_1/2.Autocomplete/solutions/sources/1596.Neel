#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>

using namespace std;

struct node{

	int count;
	struct node ** pntr;

	node(){
		count = 0;
		//pntr = new vector< struct node * >(26, NULL);
		
		pntr = (struct node **)malloc(26*sizeof(struct node *));
		for(int i=0;i<26;i++){
			pntr[i] = NULL;
		}
	}

	~node(){
		for(int i=0;i<26;i++){
			if(pntr[i] != NULL)
				delete pntr[i];
		}
	}
};

typedef struct node node;

void insert(node *n, string &s, int lvl){

	//if(lvl == 1000)
	//	return;

	n->count++;

	if(lvl  == s.size())
		return;

	int next = s[lvl] - 'a';
	cout << s[lvl] << " " << n->count <<  " " << lvl << endl;
	if(n->pntr[next] == NULL){
		n->pntr[next] = new node();
		//n->pntr[next]->count = 0;
		//cout << "yo " ;
	}

	insert(n->pntr[next], s, lvl+1);
}

void iter_insert(node *n, string &s, int lvl){

	while(1){
		n->count++;

		if(lvl  == s.size())
			break;

		int next = s[lvl] - 'a';
		if(n->pntr[next] == NULL){
		n->pntr[next] = new node();
		//n->pntr[next]->count = 0;
		//cout << "yo " ;
		}
		n = n->pntr[next];
		lvl++;
	}
}
int get_count(node *n, string &s, int lvl){

	if(lvl == s.size())
		return 1;

	if((n->count) == 1)
		return 1;

	int next = s[lvl] - 'a';
	//cout << s[lvl] << " " <<  n->count<<endl;
	return (1 + get_count(n->pntr[next], s, lvl + 1));
}

int iter_count(node *n, string &s, int lvl){

	int cnt =0;
	while(1){
		cnt++;

		if(lvl == s.size())
			break;

		if((n->count) == 1)
			break;

		int next = s[lvl] - 'a';

		n = n->pntr[next];
		lvl++;

	}
	return cnt;
}
char str[1000005];
int main(){
		int t;
	cin >> t;

	int tt = 0;


	while(t--){
		tt++;
		cout << "Case #" << tt << ": " ;

		int n;
		cin >> n;

		node * root =  new node();
		int cnt = 0;
		//root->count = 1;
		while(n--){
			//string str;
			scanf("%s",str);
			string s(str);
			//cout << str << endl;
			//cout << "input done" << s.size();
			iter_insert(root, s, 0);
			cnt += iter_count(root->pntr[str[0] - 'a'], s, 1);
			//cout << get_count(root->pntr[str[0] - 'a'], str, 1) << endl;
		}

		cout << cnt << endl;
		//delete root;

	}
}
#include <iostream>
#include <sstream>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <vector>
#include <fstream>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <algorithm>
#include <numeric>
#include <bitset>

template<typename T>
typename T::value_type SUM(const T &t){
	return accumulate(t.begin(),t.end(), typename T::value_type());
}

#define INF 2100000000
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP make_pair
#define SZ size()
#define FOR(i,b) for(int i=0;i<b;i++)
#define ll long long

using namespace std;

class Node {
    public: Node() { mContent = ' '; mMarker = false; }
    ~Node() {} char content() { return mContent; }
    void setContent(char c) { mContent = c; }
    bool wordMarker() { return mMarker; }
    void setWordMarker() { mMarker = true; }
    Node* findChild(char c);
    void appendChild(Node* child) { mChildren.push_back(child); }
    vector<Node*> children() { return mChildren; }
    private: char mContent;
    bool mMarker; vector<Node*> mChildren;
};
class Trie {
    public: Trie();
    ~Trie();
    void addWord(string s);
    bool searchWord(string s);
    void deleteWord(string s);
    int prefix(string s);
    private: Node* root;
};

Node* Node::findChild(char c) {
    for ( int i = 0; i < mChildren.size(); i++ ) {
        Node* tmp = mChildren.at(i);
        if ( tmp->content() == c ) { return tmp; }
    } return NULL;
}
Trie::Trie() {
    root = new Node();
}
Trie::~Trie() {
    // Free memory
}
void Trie::addWord(string s) {
    Node* current = root;
    if ( s.length() == 0 ) {
        current->setWordMarker(); // an empty word
        return;
    }
    for ( int i = 0; i < s.length(); i++ ) {
        Node* child = current->findChild(s[i]);
        if ( child != NULL ) { current = child; }
        else {
            Node* tmp = new Node();
            tmp->setContent(s[i]);
            current->appendChild(tmp);
            current = tmp;
        }
        if ( i == s.length() - 1 ) current->setWordMarker();
    }
}
bool Trie::searchWord(string s) {
    Node* current = root;
    while ( current != NULL ) {
        for ( int i = 0; i < s.length(); i++ ) {
            Node* tmp = current->findChild(s[i]);
            if ( tmp == NULL ) return false;
            current = tmp;
        }
        if ( current->wordMarker() ) return true;
        else return false;
    }
    return false;
}

int Trie::prefix(string s) {
    int ans = 0;
    Node* current = root;
    while ( current != NULL ) {
        for ( int i = 0; i < s.length(); i++ ) {
            Node* tmp = current->findChild(s[i]);
            if ( tmp == NULL ) return ans;
            ++ans;
            current = tmp;
        }
        return ans;
    }
    return ans;
}


int main(){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    string s;
    s.reserve(1000000);
    int t;
    cin >> t;
    FOR(i,t){
        int n,p,ans=0;
        cin >> n;
        Trie* trie = new Trie();
        FOR(j,n){
            cin >> s;
            p = trie->prefix(s);
            p++;
            if(p>s.SZ) p=s.SZ;
            ans+=p;
            trie->addWord(s);
        }
        delete trie;

        cout << "Case #"<<(i+1)<<": "<<ans<<endl;
    }

//	system("pause");
	return 0;
}

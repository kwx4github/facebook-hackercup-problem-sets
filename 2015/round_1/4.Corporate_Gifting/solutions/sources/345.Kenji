#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

const int INF = 1<<28;
int N;
vector<int> child[200000];
int dp[200000][20];

int dfs(int v, int par = -1) {

    if (par >= 0 && dp[v][par] != -1)
        return dp[v][par];

    if (!child[v].size()) {
        FOR (k, 1, 20) if (k != par) return dp[v][par] = k;
    }

    int ret = INF;
    FOR (k, 1, 20) {
        if (k == par) continue;
        int sum = k;
        REP (i, child[v].size()) {
            sum += dfs(child[v][i], k);
        }
        ret = min(ret, sum);
    }

    return dp[v][par] = ret;
}

void solve() {

    cin >> N;
    REP (i, 200000) child[i].clear();
    memset(dp, -1, sizeof(dp));

    REP (i, N) { 
        int par;
        cin >> par;
        if (--par >= 0)
            child[par].push_back(i);
    }

    cout << dfs(0) << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const long long INF = (long long)1e18;
const int MAXN = 200200;
const int MAXP = 55;

int n;
vector< int > graph[ MAXN ];
long long f[ MAXN ][ MAXP ];

void cleanup() {
    for ( int i = 0; i < MAXN; i++ ) graph[i].clear(); 
}

void dfs( int v ) {
    memset( f[v], 0, sizeof( f[v] ) );
    for ( int next: graph[v] ) {
        dfs( next );
        for ( int i = 1; i < MAXP; i++ )
        {
            long long tmp = INF;
            for ( int j = 1; j < MAXP; j++ ) if ( i != j ) tmp = min( tmp, f[next][j] );
            f[v][i] += tmp;
        }
    }
    for ( int i = 1; i < MAXP; i++ ) f[v][i] += i; 
    // cerr << v << ": "; for ( int i = 1; i < MAXP; i++ ) cerr << f[v][i] << " "; cerr << "\n";
}

void solve( int t ) {
    cleanup();
    scanf("%d", &n);
    for ( int i = 1; i <= n; i++ ) {
        int p; scanf("%d", &p);
        graph[p].push_back( i );
    }
    dfs( 1 );
    long long answer = INF;
    for ( int i = 1; i < MAXP; i++ ) answer = min( answer, f[1][i] );
    printf("Case #%d: %lld\n", t, answer);
}

int main() {
	time_t start = clock();
	int t; scanf("%d", &t);
	for ( int i = 1; i <= t; i++ ) solve( i );
	fprintf( stderr, "Time: %lf\n", 1.0 * ( clock() - start ) / CLOCKS_PER_SEC );
    return 0;
}

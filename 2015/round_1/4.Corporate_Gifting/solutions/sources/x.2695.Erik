using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Round1_Gifting
{
	class Program
	{
		static void Main(string[] args)
		{
			var cases = Read.Int();

			using (var s = new StreamWriter(@"c:\users\krox\Downloads\HackerCup\Gifting.out", false))
			{
				for (var t = 0; t < cases; t++)
				{
					var x = new X();
					var N = Read.Int();
					var emps = Read.Ints(N);
					var answer = "Case #" + (t + 1) + ": " + x.Solve(N, emps) + "\n";
					Console.Write(answer);
					s.Write(answer);
				}
			}

			Console.ReadLine();
		}

	}

	public class X
	{
		const int maxGift = 3;

		IDictionary<int, IList<int>> Tree = new Dictionary<int, IList<int>>();

		Queue<Tuple<int, int>> Tasks = new Queue<Tuple<int, int>>();

		public string Solve(int N, int[] emps)
		{
			foreach (var emp in emps.Select((t,i) => new { m=t, i=i+1}))
			{
				IList<int> c;
				if (!Tree.ContainsKey(emp.m))
				{
					c = new List<int>();
					Tree.Add(emp.m, c);
				}
				else
				{
					c = Tree[emp.m];
				}

				c.Add(emp.i);
			}

			var thr = new Thread(this.RunThread, 200000000);
			thr.Start();

			while(outres == null)
			{
				Thread.Sleep(100);
			}

			return this.outres;
		}

		private string outres;

		private void RunThread()
		{
			this.outres = "" + this.Rec(1, 0);
		}

		private long[,] Memo = new long[200010, maxGift + 1];

		private long Rec(int id, int previousGift)
		{
			if (!Tree.ContainsKey(id))
			{
				return previousGift == 1 ? 2 : 1;
			}

			if (this.Memo[id, previousGift] > 0)
			{
				return this.Memo[id, previousGift];
			}

			var childs = this.Tree[id];
			var ans = long.MaxValue;
			for (int i = 1; i <= maxGift; i++)
			{
				if (previousGift == i)
				{
					continue;
				}

				long newAns = i;
				foreach (var c in childs)
				{
					newAns += this.Rec(c, i);
				}

				if (newAns < ans)
				{
					ans = newAns;
				}
			}

			this.Memo[id, previousGift] = ans;
			return ans;
		}
	}

	public static class Read
	{
		private static string[] input = ReadAllText().Split(new[] { ' ', '\r', '\n', '\t' }, StringSplitOptions.RemoveEmptyEntries);

		private static int indexer = 0;

		public static int Int()
		{
			return int.Parse(input[indexer++]);
		}

		public static int[] Ints(int c)
		{
			return Enumerable.Range(0, c).Select(t => Int()).ToArray();
		}

		public static long Long()
		{
			return long.Parse(input[indexer++]);
		}

		public static string String()
		{
			return input[indexer++];
		}

		private static string ReadAllText()
		{
			return File.ReadAllText(@"c:\users\krox\Downloads\HackerCup\Gifting.in");
		}
	}
}

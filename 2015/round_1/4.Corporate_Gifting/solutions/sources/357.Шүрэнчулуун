#include <set>
#include <map>
#include <list>
#include <ctime>
#include <stack>
#include <cmath>
#include <queue>
#include <bitset>
#include <vector>
#include <cstdio>
#include <climits>
#include <cstring>
#include <iomanip>
#include <utility>
#include <sstream>
#include <string.h>
#include <unistd.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define PP pair<int, int>
#define endl "\n"
#define MAXN 200020
#define INF 1000000000
#define sqr(x) ((x) * (x))
#define ABS(x) ((x < 0) ? -(x) : (x))
#define eps (1e-9)
#define equal(a, b) (ABS(a - b) < eps)
typedef unsigned long long ULL;
typedef long long LL;
typedef pair< int, PP > Edge;

template<class T> string tostring(T x) { ostringstream out; out<<x; return out.str();}
LL toint(string s) { istringstream in(s); LL x; in>>x; return x; }

int N;
vector< int > G[MAXN];
vector<int> deep[MAXN];

struct Node {
	int first , nf ;
	int second, ns ;
	Node () {}
	Node ( int f , int nf1 ,int s, int ns1){
	    this->first = f;
	    this->second = s;
	    this->nf = nf1;
	    this->ns = ns1; 
	}    
	void  set ( int f , int nf1 ,int s, int ns1){
	    this->first = f;
	    this->second = s;
	    this->nf = nf1;
	    this->ns = ns1; 
	}    
};


Node a[MAXN ];
int d_max = 0;

void bfs (int v) {
    queue< pair< int,int> > qe;
    qe.push ( mp(1 , 1) );
    while ( !qe.empty() ) {
        int t = qe.front().xx;
        int d = qe.front().yy;
        qe.pop();  
        deep[d].pb ( t );
        d_max = max (d , d_max);
        for ( int i = 0; i < G[t].size(); i ++ ) {
            qe.push ( mp ( G[t][i] , d + 1 ) );    
        }
    } 
}

int calc () {
	int types = N;
	for ( int d = d_max; d >= 1; d -- ) {
	    for ( int i = 0; i < deep[d].size(); i ++ ) {
	        int v = deep[d][i];
	        if ( G[v].size() == 0) { 
	        	a[v].set ( 1 , 1, 2, 2); 
	        	continue;
	        } else {
				Node res = a[v];
				res.set ( INF , INF , INF , INF );
				types = G[v].size() + 1;
				int maxi = 0;
				for (int j = 0; j < G[v].size(); j ++ ) {
				   int nx = G[v][j];        
				   maxi = max (a[nx].nf , max (maxi , a[nx].ns) );
				}
				maxi += 1;
				types = min (maxi , types);
				for (int t = 1; t <= types; t ++ ) {
				    int sum = 0;
				    for (int j = 0; j < G[v].size(); j ++ ) {
				        int nx = G[v][j]; 
				        if ( a[nx].nf == t ) sum += a[nx].second;
				        else sum += a[nx].first;
				    }   
				    sum += t;
				    if ( res.first >= sum ) {
				        res.second = res.first;
				        res.ns = res.nf;
				        res.first = sum;
				        res.nf = t;     
				    } else if ( res.second > sum ) {
				          res.second = sum;
				          res.ns = t;   
				    } 
				}
				a[v] = res;
	        }  
	    }    
	}    
	return a[1].first;
}

void refresh () {
    for ( int i = 0; i <= N; i ++ ) {
        G[i].clear();
        deep[i].clear();    
    }
    d_max = 0;  
}

int main() {
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("corporate_gifting_output.txt", "w", stdout);
	int T, c = 0;
    cin >> T;
    while(T--) {
    	c++;
		cin >> N;
		refresh();
		int v, u;
		for (int i =  0; i < N; i++ ) {
			scanf ("%d" , &v);
			if ( i == 0 ) continue;
			//G[i + 1].pb ( v );
			G[v].pb (i + 1);
		}
		bfs( 1);
		cout << "Case #" << c << ": " << calc() << endl;
    }     
	return 0;
}


#include<algorithm>
#include<vector>
#include<iostream>
using namespace std;

const int NMAX = 222222;
const int KMAX = 10;

int dp[NMAX][KMAX];
vector<int> children[NMAX];

void init(){
	for (int i = 0; i < NMAX; i++)for (int j = 0; j < KMAX; j++)dp[i][j] = 0;
	for (int i = 0; i < NMAX; i++)children[i].clear();
}

int solve(int root, int val){
	int& ret = dp[root][val];
	if (ret) return ret;
	if (children[root].size() == 0) return ret = val;

	for (int c : children[root]){
		int here = 0x7fFFffFF;
		for (int i = 1; i < KMAX; i++){
			if (i != val){
				here = min(here, solve(c, i));
			}
		}
		ret += here;
	}

	return ret += val;
}

int main(){
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++){
		cout << "Case #" << tc << ": ";
		init();
		int n;
		cin >> n;
		for (int i = 1; i <= n; i++){
			int p; cin >> p;
			children[p].push_back(i);
		}

		int ans = 0x7fFFffFF;
		for (int i = 1; i < KMAX; i++){
			ans = min(ans, solve(1, i));
		}
		cout << ans << endl;
	}
}
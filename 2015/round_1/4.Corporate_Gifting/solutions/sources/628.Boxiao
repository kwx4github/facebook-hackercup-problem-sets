#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
using namespace std;
#ifndef for
	#define for if (0) ; else for
#endif
#ifdef LOCAL_DEBUG
	#define DEBUG
#endif
//This file only works in GNU C++
#ifdef DEBUG
	int _CALL_DEPTH=0;
	struct _CALL_STACK
	{
		_CALL_STACK();
		~_CALL_STACK();
	};
	#define _PRINT_STACK_TAB(number) if (number) printf("%5d:\t",__LINE__); else printf("\t"); for (int i=0;i<_CALL_DEPTH;i++) printf("\t");
	#define VAR(f,x) _PRINT_STACK_TAB(true); printf("%s=\t" f "\n",#x,x);
	#define MSG(format,...) _PRINT_STACK_TAB(true); printf(format "\n",##__VA_ARGS__);
	#define FUNC _PRINT_STACK_TAB(true); printf("%s\n",__PRETTY_FUNCTION__); _CALL_STACK _call_stack; 
	_CALL_STACK::_CALL_STACK()
	{
		_PRINT_STACK_TAB(false);
		printf("{\n");
		_CALL_DEPTH++;
	}
	_CALL_STACK::~_CALL_STACK()
	{
		_CALL_DEPTH--;
		_PRINT_STACK_TAB(false);
		printf("}\n");
	}
	void _REDIRECT(bool in,bool out)
	{
		const char * f=__FILE__;
		int i;
		for (i=strlen(f)-1;i>=0;i--)
		{
			if (f[i]=='.')
			{
				break;
			}
		}
		char *p=new char[strlen(f)+10];
		strncpy(p,f,i);
		if (in)
		{
			strcpy(p+i,".in");
			freopen(p,"r",stdin);
		}
		if (out)
		{
			strcpy(p+i,".out");
			freopen(p,"w",stdout);
		}
		delete[] p;
	}
#else
	//display a single variable, like
	//	VAR("%d",x);
	#define VAR
	//display a message, like
	//	MSG("a[%d]=%d",i,a[i]);
	#define MSG
	//put this line at the beginning of a function in order to update the indent of call stack
	#define FUNC
#endif
const int N=200*1000+10;
const int B=50;
int manager[N];
int f[N][B];
queue<int> open;
stack<int> s;
vector<int> child[N];
vector< pair<int,int> > best[N];
int n;
int ceo;
void read() {
	cin>>n;
	int i;
	for (i=1;i<=n;i++) {
		int m;
		cin>>m;
		manager[i]=m;
		child[m].push_back(i);
	}
	ceo=child[0][0];
}
void search() {
	while (!open.empty()) {
		int v=open.front();
		open.pop();
		s.push(v);
		int i;
		for (i=0;i<(int)child[v].size();i++) {
			open.push(child[v][i]);
		}
	}
};
inline int better(int v,int ban) {
	if (best[v][0].second!=ban) {
		return best[v][0].first;
	}
	else {
		return best[v][1].first;
	}
};
void calc(int v) {
	int x;
	for (x=1;x<B;x++) {
		int acc=x;
		int i;
		for (i=0;i<(int)child[v].size();i++) {
			acc+=better(child[v][i],x);
		}
		best[v].push_back(make_pair(acc,x));
	}
	sort(best[v].begin(),best[v].end());
};
int solve() {
	open.push(ceo);
	search();
	while (!s.empty()) {
		calc(s.top());
		s.pop();
	}
	return best[ceo][0].first;
};
void clear() {
	int i;
	for (i=0;i<=n;i++) {
		child[i].clear();
		best[i].clear();
	}
}
int main()
{
	#ifdef DEBUG
	_REDIRECT(1,1);
	#else
	#endif
	ios::sync_with_stdio(false);
	int t,ti;
	cin>>t;
	for (ti=1;ti<=t;ti++) {
		read();
		int ans=solve();
		cout<<"Case #"<<ti<<": "<<ans<<endl;
		clear();
	};
	return 0;
}


#include <bits/stdc++.h>

using namespace std;

int bipartite[2];

struct pr
{
	int v,l;
	pr(int vv,int ll)
	{
		v = vv;
		l = ll;
	}
};

int parent[2000010];

int main()
{
	int tests,n;
	scanf("%d",&tests);
	for(int test = 1; test <= tests; test++)
	{
		scanf("%d",&n);
		vector<vector<int> > adjList(n+1);

		
		int temp;
		for(int i = 1; i <= n; i++)
		{
			scanf("%d",&temp);
			adjList[temp].push_back(i);
			parent[i] = temp;
		}

		stack<int> s;
		queue<int> q;
		s.push(1);
		q.push(1);
		
		while(!(q.empty()))
		{
			int p = q.front();
			q.pop();

			
			for(int i = 0; i < adjList[p].size(); i++)
			{
				s.push(adjList[p][i]);
				q.push(adjList[p][i]);
			}
		}

		vector<set<int> > dp(n+1);
		int ans = 0;
		while(!(s.empty()))
		{
			int x = 1;
			int v = s.top();
			s.pop();
			// sort(dp[v].begin(),dp[v].end());
			for(set<int>::iterator i = dp[v].begin(); i != dp[v].end(); i++)
			{

				if(x == *i)
					{
						x++;
						// printf("dp[v][i] = %d\n",*i);
					}
				else
					break;
			}

			// printf("ans %d %d\n",v,x);
			ans += x;
			dp[parent[v]].insert(x);
		}

		printf("Case #%d: %d\n",test,ans);

	}
	return 0;
}
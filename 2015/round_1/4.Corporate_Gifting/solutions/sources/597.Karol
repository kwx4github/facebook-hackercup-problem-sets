#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 200005;
const int MAXCOL = 250;
const int INF = 99999999;

bool visited[MAXN];
int dp[MAXN][MAXCOL], pref[MAXN][MAXCOL], suf[MAXN][MAXCOL];
vector<int> adj[MAXN];

void Dfs(int u) {
    visited[u] = true;

    for (int i = 0; i < adj[u].size(); i++)
        if (!visited[adj[u][i]])
            Dfs(adj[u][i]);

    for (int i = 0; i < MAXCOL; i++) {
        dp[u][i] += i+1;
        for (int j = 0; j < adj[u].size(); j++)
            dp[u][i] += min(pref[adj[u][j]][i], suf[adj[u][j]][i]);
    }

    pref[u][0] = INF;
    for (int i = 1; i < MAXCOL; i++)
        pref[u][i] = min(pref[u][i-1], dp[u][i-1]);

    suf[u][MAXCOL-1] = INF;
    for (int i = MAXCOL-2; i >= 0; i--)
        suf[u][i] = min(suf[u][i+1], dp[u][i+1]);
}

int main() {
    int q, caseNo = 0;

    scanf("%d", &q);

    while (q--) {

    int n;

    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        if (i == 0) continue;
        x--;
        adj[i].push_back(x);
        adj[x].push_back(i);
    }

    Dfs(0);

    int result = INF;
    for (int i = 0; i < MAXCOL; i++)
        result = min(result, dp[0][i]);

    caseNo++;
    printf("Case #%d: %d\n", caseNo, result);

    for (int i = 0; i < n; i++) {
        visited[i] = false;
        for (int j = 0; j < MAXCOL; j++) {
            dp[i][j] = 0;
            pref[i][j] = 0;
            suf[i][j] = 0;
        }
        adj[i].clear();
    }
    
    }

    return 0;
}

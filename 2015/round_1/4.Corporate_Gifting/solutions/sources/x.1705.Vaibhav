#include<bits/stdc++.h>
using namespace std;
//int mx=0;
/*void dfs(long i, long *ans, vector<long> *v, long n)
{
//	if(ans[i])
//		return ;
	long j;
	//long val[200010]={0};
	map<long, long> val;
	for(j=0; j<v[i].size(); j++)
	{
//		cout<<v[i][j]<<" ";
		if(!ans[i])
			dfs(v[i][j], ans, v, n);
		val[ans[v[i][j]]]=1;
	}
	if(val.size() > mx)
	{
//		cout<<"max val"<<val.size()<<endl;
		mx=val.size();
	}
	for(j=1; j<=n; j++)
		if(!val[j])
		{
			ans[i]=j;
			break;
		}
}*/
int main()
{
	long t, c;
	cin>>t;
	for(c=1; c<=t; c++)
	{
		long j, i, x, y, sum=0, n, ans[200010]={0};
		vector<long>v[200010], copy[200010];
		cin>>n;
		for(i=1; i<=n; i++)
		{
			cin>>x;
		//	cout<<x<<" "<<i<<endl;
			v[x].push_back(i);
			copy[x].push_back(i);
	//		cout<<x<<" "<<i<<endl;
		}
	//	cout<<"enter";
		for(i=1; i<=n; i++)
			if(!v[i].size())
				ans[i]=1;
		//dfs(1,ans, v, n);
		stack<long>dfs;
		long temp;
		dfs.push(1);
		while(dfs.size())
		{
			temp=dfs.top();
			if(ans[temp])
			{
				dfs.pop();
				continue;
			}
			if(!v[temp].size())
			{
				map<long, long>val;
				for(i=0; i<copy[temp].size(); i++)
					val[ans[copy[temp][i]]]=1;
				for(i=1; i<=n; i++)
				if(!val[i])
				{
					ans[temp]=i;
					break;
				}
				continue;
			}
			dfs.push(v[temp][v[temp].size()-1]);
			v[temp].pop_back();	
		}
		for(i=1; i<=n; i++)
		{
		//	cout<<ans[i]<<endl;
			sum+=ans[i];	
		}
		cout<<"Case #"<<c<<": "<<sum<<endl;
	}
	return 0;
}

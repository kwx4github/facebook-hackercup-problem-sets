#include <bits/stdc++.h>

using namespace std;

#define MAXN 200000

vector <int> E[MAXN + 1];
int C[MAXN + 1], P[MAXN + 1];
long long dp[MAXN + 1][6], greedy[MAXN + 1];

int main()
{
	int T;
	cin>>T;
	
	for(int caso=1; caso<=T; caso++)
	{
		int n;
		cin>>n;
		
		for(int u=1; u<=n; u++)
		{
			E[u].clear();
			C[u] = 0;
		}
		
		for(int u=1; u<=n; u++)
		{
			int v;
			cin>>v;
			
			E[v].push_back(u);
			C[v]++;
			P[u] = v;
		}
		
		queue <int> Q;
		for(int u=1; u<=n; u++)
			if(C[u] == 0)
				Q.push(u);
		
		while(!Q.empty())
		{
			int u = Q.front();
			Q.pop();
			
			// DP limitado
			for(int last=1; last<=5; last++)
			{
				long long best = 1LL<<60;
				
				for(int i=1; i<=5; i++)
				{
					if(last == i) continue;
					
					long long cur = i;
					for(int v : E[u])
						cur += dp[v][i];
					best = min(best, cur);
				}
				
				dp[u][last] = best;
			}
			
			// Greedy optimo ?
			set <int> S;
			for(int v : E[u])
				S.insert(greedy[v]);
			int i;
			for(i=1; i<=n; i++)
				if(S.find(i) == S.end())
					break;
			greedy[u] = i;
			
			// Top Sort
			if(u != 1)
			{
				int pu = P[u];
				C[pu]--;
				if(C[pu] == 0)
					Q.push(pu);
			}
		}
		
		long long x = 0;
		for(int i=1; i<=n; i++)
			x += greedy[i];
		
		for(int i=1; i<=5; i++)
			x = min(x, dp[1][i]);
		cout<<"Case #"<<caso<<": "<<x<<endl;
	}
	
	return 0;
}

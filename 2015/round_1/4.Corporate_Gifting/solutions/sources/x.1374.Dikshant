#include <iostream>
#include <stack>
#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

#define MAX 200050
#define pb push_back

typedef vector<vector<int> > graph;
graph g;

bool isvisited[MAX];
int cost[MAX];
int level[MAX], sorted[MAX];

vector<int> sgval, tmp;

bool compare(const int &v, const int &u)
{
    return (level[v] > level[u])? 1 : 0;
}

int n;

int cal_mex(int root)
{
    stack<int> s;
    memset(isvisited, 0, sizeof(isvisited));
    memset(level, 0, sizeof(level));
    memset(cost, 0, sizeof(cost));
    s.push(root);
    level[root] = 0;
    while (!s.empty()) {
        int u = s.top();
        s.pop();
        isvisited[u] = 1;
        for (int i = 0; i < g[u].size(); i++) {
            int v = g[u][i];
            if (!isvisited[v]) {
                level[v] = level[u] + 1;
                s.push(v);
            }
        }
    }

    for (int i = 0; i < n; i++) {
        sorted[i] = i;
    }
    sort(sorted, sorted + n, compare);

    for (int i = 0; i < n; i++) {
        sgval.clear();
        int u = sorted[i];
        for (int i = 0; i < g[u].size(); i++) {
            int v = g[u][i];
            if (level[v] > level[u]) {
                sgval.push_back(cost[v]);
            }
        }
        sort(sgval.begin(), sgval.end());
        tmp.clear();
        if (sgval.size() > 0) tmp.pb(sgval[0]);
        for (int i = 1; i < sgval.size(); i++)
            if (sgval[i] != sgval[i-1]) tmp.pb(sgval[i]);

        int mex = 1, k = 0;
        while (k < tmp.size() && mex == tmp[k]) mex++, k++;
        cost[u] = mex;
    }
}

int main()
{
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int tc;
    scanf("%d", &tc);
    for (int t = 1; t <= tc; t++) {
        cerr << t << endl;
        printf("Case #%d: ", t);
        scanf("%d", &n);
        g.clear();
        g.resize(n);
        for (int i = 0; i < n; i++) {
            int a;
            scanf("%d", &a);
            if (a != 0) {
                a--;
                g[a].push_back(i);
                g[i].push_back(a);
            }
        }
        cal_mex(0);
        long long tcost = 0;
        for (int i = 0; i < n; i++) {
            tcost += cost[i];
        }
        printf("%lld\n", tcost);
    }
}

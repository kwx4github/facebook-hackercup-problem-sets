#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <bitset>
#include <stack>
#include <string>
#include <sstream>
#include <math.h>

#define REP(i,n) for(int i = 0; i<(n); i++)
#define ITER(i,v) for(auto i : v)
#define INF 1000000000

using namespace std;

template <class T>
using priority_queue_asc =  priority_queue<T,vector<T>, greater<T> >;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef vector<bool> vb;

vi p;	// parent, 0-based, -1 for root
vi childs;
vvi edges;
int N;

vi s;	// the sorted array

struct node{
	int c,p,p2;
};

vector<node> nodes;

void toposort(){
	s.clear();
	s.reserve(N);
	stack<int> leafs;
	REP(i,N)
		if(childs[i]==0)
			leafs.push(i);
	while(!leafs.empty()){
		int l = leafs.top();
		leafs.pop();
		s.push_back(l);
		if(p[l]==-1)
			continue;
		childs[p[l]]--;
		if(childs[p[l]]==0)
			leafs.push(p[l]);
	}
}

int main(){
	int TC;
	cin >> TC;
	for(int tc=1;tc<=TC;tc++){
		cin >> N;
		p.resize(N);
		childs.assign(N,0);
		nodes.assign(N,{-1,-1,-1});
		edges.assign(N,vi());
		REP(i,N){
			int a;
			cin >> a;
			a--;
			p[i]=a;
			if(a==-1)
				continue;
			childs[a]++;
			edges[a].push_back(i);
		}

		toposort();
		
		ITER(n,s){
			int K = 0;
			int maxC = 0;
			ITER(e,edges[n]){
				K += nodes[e].p;
				maxC = max(maxC, nodes[e].c);
			}
			vi ps(maxC+2,K);
			REP(i,maxC+2)
				ps[i]+=i+1;
			ITER(e,edges[n]){
				ps[nodes[e].c-1] -= (nodes[e].p - nodes[e].p2);
			}

			int b=INF;
			int b2=INF;
			int c=-1;
			REP(i,maxC+2){
				if(ps[i]<b){
					b2 = b;
					b = ps[i];
					c = i+1;
				} else if(ps[i] < b2){
					b2 = ps[i];
				}
			}
			nodes[n].p = b;
			nodes[n].p2 = b2;
			nodes[n].c = c;
		}
		cout << "Case #"<<tc<<": "<<nodes[0].p<<"\n";
	}
	return 0;
}



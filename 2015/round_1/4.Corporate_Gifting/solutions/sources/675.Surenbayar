#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstring>

/*#define mp make_pair
#define pb push_back
#define xx first
#define yy second
#define C(a) memset((a), 0, sizeof(a))
#define rep(l,r,x,i) for(int (i)=(l);(i)<(r);(i)+=(x))
#define repn(n,i) for(int (i)=0;(i)<(n);(i)++)
#define readInt(n) scanf("%d",&n)
#define readl(n) scanf("%lld",&n)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define L(a) (int)(a.size())
#define all(a) (a).begin(), (a).end()
#define mod 1000000007
#define vii vector<int>
#define pii pair<int, int>
#define pli pair<long long, int>
#define pll pair<long long, long long>
#define pil pair<int, long long>
#define vpi vector<pair<int, int> >
typedef long long LL;

LL mullog(LL a, LL b, LL c) {LL ret = 0ll;while(b) {if(b&1ll) ret = (ret+a)%c;a = (a+a)%c;b >>= (1ll);}return ret;}
LL powlog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = (ret*a)%c;a = (a*a)%c;b >>= (1ll);}return ret;}
int powlog(int a, int b, int c) {int ret = 1;while(b) {if(b&1) ret = (ret*a)%c;a = (a*a)%c;b >>= (1);}return ret;}
LL powLog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = mullog(ret,a,c);a = mullog(a,a,c);b >>= (1ll);}return ret;}
int gcd(int a, int b) {return a ? gcd(b % a, a) : b; }
LL gcd(LL a, LL b){return a ? gcd(b % a, a) : b; }

int dirx[8] = {1,0,-1,0,1,-1,-1,1};
int diry[8] = {0,-1,0,1,1,1,-1,-1};
*/
using namespace std;
int KK = 20;
vector<int> adj[200005];
int dp[200005][31];
int x[200005];
int lvl[200005];
queue<int> q;
pair<int, int> pq[200005];

int main() {
    freopen("23.txt", "r", stdin);
    freopen("output.txt","w", stdout);
    int T, n, y, ind, parent, node,l,cnt,u,temp,ans;
    scanf("%d",&T);
    for(int cs=1;cs<=T;cs++) {
        scanf("%d",&n);
        for(int i=1;i<=n;i++) {
            scanf("%d",&x[i]);
            adj[i].push_back(x[i]);
            adj[x[i]].push_back(i);
        }
        q.push(1);
        lvl[1]=0;
        cnt = 0;
        while(!q.empty()) {
            node = q.front();
            pq[cnt++] = make_pair(-lvl[node], node);
            q.pop();
            for(int i=0;i<adj[node].size();i++) {
                if(adj[node][i]!=x[node]) {lvl[adj[node][i]] = lvl[node] + 1;q.push(adj[node][i]);}
            }
        }
        sort(pq, pq+cnt);
        for(int i=0;i<n;i++) {
            u = pq[i].second;
            for(int k=1;k<=KK;k++) {
                dp[u][k] = k;
                for(int j=0;j<adj[u].size();j++) {
                    temp = (1<<30);
                    if(adj[u][j]==x[u]) continue;
                    for(int k1=1;k1<=KK;k1++) {
                        if(k1!=k) temp = min(temp, dp[adj[u][j]][k1]);
                    }
                    dp[u][k] += temp;
                }
            }
        }
        ans = (1<<30);
        for(int i=0;i<=n;i++) adj[i].clear();
        for(int k=1;k<=KK;k++) ans = min(ans, dp[1][k]);
        printf("Case #%d: %d\n",cs, ans);
    }
}

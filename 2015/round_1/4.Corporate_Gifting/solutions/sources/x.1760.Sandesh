#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() { start = clock(); }
  ~TimeTracker() { end = clock(); fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC); }
};

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define mt make_tuple
#define loop(i, begin, end) for(__typeof(end) i=(begin)-((begin)>(end)); i!=(end)-((begin)>(end)); i+=1-2*((begin)>(end)))
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define db(args...) { vector<string> _v = split(#args, ','); debug_fn(_v.begin(), args); }
#define dbp(p) cerr << #p << " = " << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " \n"[__I==(N-1)];
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " \n"[__J==(M-1)]; }
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl;
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl;

vector<string> split(const string& s, char c) 
{
  vector<string> v; stringstream ss(s); string x;
  while (getline(ss, x, c)) v.push_back(x);
  return v;
}

void debug_fn(vector<string>::iterator it) {}
template<typename T, typename... Args>
void debug_fn(vector<string>::iterator it, T a, Args... args) 
{
  cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
  debug_fn(++it, args...);
}

# define getcx getchar_unlocked

void inp() {}
template <typename T, typename... Args>
void inp(T& n, Args&... args)//fast input function
{
  int ch=getcx(), sign=1; n=0;
  while( ch < '0' || ch > '9' ) { if(ch=='-')sign=-1; ch=getcx(); }
  while( ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign; inp(args...);
}

void oup() {}
template <typename T, typename... Args>
void oup(T x, Args... args)
{ 
  if(x<0){ putchar('-'); x=-x; } int len=0,data[25];
  while(x) { data[len++]=x%10; x/=10; } if(!len) data[len++]=0;
  while(len--) putchar(data[len]+48); putchar('\n'); oup(args...);
}

lli n, p[200010], leaf[200010], visited[200010];
pair<lli, lli> m1[200010], m2[200010];

void traverse(vector< vector<lli> >& g)
{
  vector<lli> stk, vc;
  map<lli, lli> mp;
  lli top, child, X1, X2, extracol;
  stk.pb(1);
  while(!stk.empty())
  {
    top = stk.back();
    // debug : 
    // fprintf(stderr, "Node %lld in.\n", top);
    if(leaf[top] == 0) 
    {
      m1[top] = mkp(1,1);
      m2[top] = mkp(2,2); 
      visited[top] = 1;
      stk.pop_back();
      // debug : 
      // fprintf(stderr, "1-Node %lld done.\n", top);
    } else {
      bool flg = true;
      // Visiting all the children
      loop(i,0,g[top].size()) 
      {
        child = g[top][i];
        if(leaf[child] != 0 && visited[child] != 1)
        { 
          stk.pb(child); flg = false;
        } else if(leaf[child] == 0) {
            m1[child] = mkp(1,1);
            m2[child] = mkp(2,2); 
            visited[child] = 1;
            // debug : 
            // fprintf(stderr, "3-Node %lld done.\n", child);
        }
      }
      // If all the children are already computed
      if(flg)
      {
        vc.clear();
        mp.clear();
        extracol = 1;
        loop(i, 0, g[top].size())
        { 
          child = g[top][i];
          X1 = m1[child].ss;
          X2 = m2[child].ss;
          if(X1 == extracol) extracol++;
          if(X2 == extracol) extracol++;
          if(mp[X1] == 0) 
          {
            vc.pb(X1); mp[X1] = 1;
          }
          if(mp[X2] == 0) 
          {
            vc.pb(X2); mp[X2] = 1;
          }
        }
        // if(top == 7) fprintf(stderr, "Extracol at %lld is %lld\n", top, extracol);
        if(extracol < n+1) vc.pb(extracol);
        m2[top] = m1[top] = mkp(0,0);
        loop(i, 0, vc.size())
        {
          pair<lli, lli>  candi;
          candi.ss = vc[i];
          candi.ff = vc[i];
          loop(j, 0, g[top].size())
          { 
            child = g[top][j];
            if(m1[child].ss != candi.ss) 
            {
              candi.ff += m1[child].ff;
            } else {
              candi.ff += m2[child].ff;
            }
          }
          // if(vc[i] == extracol && top == 7) dbp(candi);
          if(m1[top].ff == 0 || m1[top].ff > candi.ff)
          {
            m2[top] = m1[top];
            m1[top] = candi;
          } else if(m1[top].ff == candi.ff && m1[top].ss != candi.ss) { 
            if(m2[top].ff == 0 || m2[top].ff > candi.ff) m2[top] = candi;
            lli c1 = m1[top].ss, c2 = max(m2[top].ss, candi.ss);
            m1[top].ss = max(c1, c2);
            m2[top].ss = min(c1, c2);
          } else if(m2[top].ff == 0 || m2[top].ff > candi.ff) m2[top] = candi;
        }
        visited[top] = 1;
        stk.pop_back();
        // debug : 
        // fprintf(stderr, "2-Node %lld done.\n", top);
      }
    }
    // debug : 
    // fprintf(stderr, "Node %lld out.\n", top);
  }
}

int main()
{
  // make_it_fast
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  int t, tc;
  inp(t);
  for(tc = 1; tc <= t; tc++)
  {
    printf("Case #%d: ", tc);
    inp(n); memset(leaf, 0, sizeof leaf); memset(visited, 0, sizeof visited);
    vector< vector<lli> > g(n+1);
    loop(i,1,n+1) { inp(p[i]); g[p[i]].pb(i); leaf[p[i]] = 1; }
    
    // loop(i, 0, g.size()) { fprintf(stderr, "%ld : ", i); dbv(g[i]); }
    // fprintf(stderr, "\n");
    // dbn(leaf, n+1);
    // fprintf(stderr, "\n");

    traverse(g);
    // loop(i, 1, n+1) { fprintf(stderr, "%lld : ", i); dbp(m1[i]); }
    // fprintf(stderr, "\n");
    // loop(i, 1, n+1) { fprintf(stderr, "%lld : ", i); dbp(m2[i]); }

    // dbp(m1[1]); dbp(m2[1]);
    // fprintf(stderr, "\n");
    oup(m1[1].ff);
  }
  return 0;
}
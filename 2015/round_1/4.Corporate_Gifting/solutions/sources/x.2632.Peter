#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <set>
#include <list>
#include <stack>
using namespace std;

struct Vertex {
	int parent;
	int money;
	int in;
	vector< int > childs;
	Vertex() :parent(-1),money(-1),in(0) {}
};



// aanroep: bool uniek; topologicalSort(graph,uniek); if(uniek){ ...
// Looptijd: O(V+E)
// Geeft lege lijst als er een cycle in zit
// Geeft anders een (mogelijke) topologische sortering van de nodes
list<int> topologicalSort(vector<Vertex> &g){
	vector<Vertex> graph = g;
	list<int> L; // Topologische sortering
	stack<int> S; // Stack met alle nodes zonder binnekomende edges

	for(int i = 0; i < graph.size(); i++){
		if(graph[i].in == 0){
			S.push(i);
		}
	}

	while(!S.empty()){
		int n = S.top(); S.pop();
		L.push_back(n);

		int parent = graph[n].parent;
		graph[parent].in--;

		if(graph[parent].in == 0){
			S.push(parent);
		}

		graph[n].childs.clear(); // remove edges
	}

	return L;
}

void JeMoeder(){
	// graph data
	vector< Vertex > graph;

	// read input
	int N; cin >> N;
	graph.resize(N+1);

	// CEO and charity
	graph[1].parent = 0;
	graph[0].in = 1;

	for(int i = 1; i <= N; i++){
		int n; cin >> n;
		graph[n].childs.push_back(i);
		graph[n].in++;
		graph[i].parent = n;
	}

	// topological sort
	list<int> L = topologicalSort(graph);

	// evaulate everything!
	for (list<int>::iterator it = L.begin(); it != L.end(); it++)
	{
		if(*it == 0){ continue; }
		int current = *it;

		// check what childs are giving
		set<int> fromChilds;
		//cout << current << ": " << graph[current].childs.size() << endl;
		for(int i = 0; i < graph[current].childs.size(); i++){
			int childId = graph[current].childs[i];
			int moneyFromChild = graph[childId].money;
			fromChilds.insert(moneyFromChild);
			//cout << "child number: " << childId << " is giving " << moneyFromChild << endl;
		}

		// what are we going to give?
		for(int i = 1; i <= N; i++){
			if(fromChilds.find(i) == fromChilds.end()){
				graph[current].money = i;
				break;
			}
		}
	}

	// spannend
	int totaal = 0;
	for(int i = 1; i <= N; i++){
		totaal += graph[i].money;
	}
	cout << totaal;

}

int main(){
	int runs; cin >> runs;
	for(int i = 1; i <= runs; i++){
		cout << "Case #" << i << ": ";
		JeMoeder();
		cout << endl;
	}
}

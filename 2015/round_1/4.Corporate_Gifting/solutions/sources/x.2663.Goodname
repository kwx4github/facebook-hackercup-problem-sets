#include <bits/stdc++.h>
using namespace std;

#define mp make_pair

const int N = 200000;
int n;
vector<int> adjList[N];

pair<int, int> solve(int x) {
	set<int> children;
	pair<int, int> p;
	int sum = 0;
	for (int i = 0; i < adjList[x].size(); ++i)
		p = solve(adjList[x][i]),
		sum += p.first,
		children.insert(p.second);

	p.first = sum;
	p.second = 1;
	while(children.find(p.second) != children.end())
		++p.second;

	p.first += p.second;
	return p;
}

pair<int, int> sol[N];
void solveNoRecursion() {
	memset(sol, -1, sizeof(sol));
	stack<int> S;
	S.push(0);
	while(!S.empty()) {
		int x = S.top();
		if (sol[x].first != -1) {
			S.pop();
			continue;
		}
		if (adjList[x].size() == 0 || sol[adjList[x][0]].first != -1) {
			set<int> children;
			pair<int, int> p;
			int sum = 0;
			for (int i = 0; i < adjList[x].size(); ++i)
				p = sol[adjList[x][i]],
				sum += p.first,
				children.insert(p.second);

			p.first = sum;
			p.second = 1;
			while(children.find(p.second) != children.end())
				++p.second;

			p.first += p.second;
			sol[x] = p;
			S.pop();
			continue;
		}
		for (int i = 0; i < adjList[x].size(); ++i)
			S.push(adjList[x][i]);
	}
}

int main() {
	freopen("corporate_gifting.txt","r",stdin);
	freopen("corporate_gifting.out","w",stdout);
	cin.tie(0); cout.tie(0);
	ios_base::sync_with_stdio(false);

	int temp;
	int T; cin >> T;
	for (int tt = 0; tt < T; ++tt) {
		cout << "Case #" << tt + 1 << ": ";

		cin >> n;
		for (int i = 0; i < n; ++i)
			adjList[i].clear();

		cin >> temp;
		for (int i = 1; i < n; ++i)
			cin >> temp,
			adjList[temp - 1].push_back(i);

		//cout << solve(0).first;
		solveNoRecursion();
		cout << sol[0].first;

		// Do NOT continue. END, instead!
		//END:
		cout << "\n";
	}
	return 0;
}

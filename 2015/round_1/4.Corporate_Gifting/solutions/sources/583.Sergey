#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 200200;
const int hmax = 40;

int n;
vector<int> g[nmax];
int dp[nmax][hmax];
int c[nmax][hmax];
int p[nmax];

void calc(int v) {
//	forn(i, g[v].size())
//		calc(g[v][i]);
	forn(i, hmax) {
		c[v][i] = i + 1;
		forn(j, g[v].size())
			c[v][i] += dp[g[v][j]][i];
	}
	forn(i, hmax) {
		dp[v][i] = inf;
		forn(j, hmax)
			if (i != j)
				dp[v][i] = min(dp[v][i], c[v][j]);
	}
}

void solve () {
	cin >> n;
	for (int i = 0; i < n; i ++) {
		scanf("%d", &p[i]);
		p[i] --;
		if (p[i] >= 0)
			g[p[i]].pb(i);
	} 
	for (int i = n-1; i >= 0; i --)
		calc(i);
//	calc(0);
	int res = min(dp[0][0], dp[0][1]);
	cout << res << endl;
	forn(i, n)
		g[i].clear();
		
}

int main ()
{
//	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	int tst;
	cin >> tst;
	forn(i, tst) {
		cerr << i << endl;
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

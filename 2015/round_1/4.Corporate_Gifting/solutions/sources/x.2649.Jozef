#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <memory>
#include <stack>
#include <climits>

using namespace std;

struct Best {
	int number1;
	int total_price1;
	int total_price2;
};

void compute (int manager, const vector<vector<int> >& childs, vector<Best>& bests){
	stack<int> dfs;
	vector<bool> started(childs.size(), false);
	dfs.push(manager);
	while(!dfs.empty()){
		int current = dfs.top();
		if(started[current] == false){
			started[current] = true;
			for(int i = 0; i < childs[current].size(); i++){
				dfs.push(childs[current][i]);
			}
		}
		else {
			dfs.pop();
			int possible_max = 1;
			for(int i = 0; i < childs[current].size(); i++){
				int child = childs[current][i];
				if(bests[child].number1 > possible_max){
					possible_max = bests[child].number1;
				}
			}
			++possible_max;
			int best_price = INT_MAX;
			int best_price2 = INT_MAX;
			int number1 = INT_MAX;
			for(int i = 1; i <= possible_max; i++){
				int current_price = 0;
				for(int j = 0; j < childs[current].size(); j++){
					int child = childs[current][j];
					if(bests[child].number1 == i){
						current_price+= bests[child].total_price2;
					}
					else{
						current_price+= bests[child].total_price1;
					}
				}
				current_price+=i;
				if(current_price <= best_price)
				{
					best_price2 = best_price;
					best_price = current_price;
					number1 = i;
				}
				else if (current_price <= best_price2){
					best_price2 = current_price;
				}
			}
			bests[current].number1 = number1;
			bests[current].total_price1 = best_price;
			bests[current].total_price2 = best_price2;
		}
	}
}

int main() {
	int T;
	cin>>T;

	for(int t_case = 1; t_case <= T; t_case++){
		cout<<"Case #"<<t_case<<": ";
		int N;
		cin>>N;
		int a;
		int manager;
		vector<vector<int> > childs (N);
		vector<Best> bests (N);
		for(int i = 0; i < N; i++){
			cin>>a;
			if(a == 0)
				manager = i;
			else
				childs[a-1].push_back(i);
		}
		compute(manager, childs, bests);
		cout<<bests[manager].total_price1;
		cout<<endl;
	}
    return 0;
}

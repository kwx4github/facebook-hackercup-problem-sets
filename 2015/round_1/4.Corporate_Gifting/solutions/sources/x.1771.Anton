#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

#define MOD 1000000007

using namespace std;

int main(){
    freopen( "corporate_gifting.txt", "r", stdin );
    freopen( "output.txt", "w", stdout );
    
    int tc; scanf( "%d", &tc );
    for ( int _ = 0; _ < tc; _++ ) {
        int n;
        vector<int> G[200000];
        int G_up[200000];
        map<int, int> val;
        vector<int> nodes;

        cin >> n;

        for ( int i = 0; i < n; i++ ) {
            int node; cin >> node;
            node--;
            if ( node > -1 ) {
                G[ node ].push_back(i);
            }
            G_up[ i ] = node;
        }
        for ( int i = 0; i < n; i++ ) {
            if ( G[ i ].size() == 0 ) {
                nodes.push_back(i);
            }
        }
        bool done = false;
        int res = 0;
        int cnt = 0;
        int colored[200000] = {0};
        while( !done ) {
            int sz = (int)nodes.size();
            vector<int> to_erase;
            for ( int i = 0; i < sz; i++ ) {
                bool good = true;
                bool used[200000] = {false};
                for ( int j = 0; j < G[ nodes[i] ].size(); j++ ) {
                    int to = G[nodes[i]][j];
                    if ( val[ to ] ) {
                        used[val[to]] = true;
                    }
                    else {
                        good = false; break;
                    }
                }
                if ( good ) {
                    int x = 1;
                    while( used[x] ) x++;
                    val[nodes[i]] = x;
                    res += x;
                    to_erase.push_back(i);
                    if ( G_up[nodes[i]] > -1 ) {
                        colored[ G_up[nodes[i]] ]++;
                        if ( G[G_up[nodes[i]]].size() == colored[G_up[nodes[i]]] ) {
                            nodes.push_back( G_up[nodes[i]] );
                        }
                    }
                    cnt++;
                }
            }
            for ( int i = (int)to_erase.size() - 1; i >= 0; i-- ) {
                nodes.erase(nodes.begin() + to_erase[i]);
            }
            done = cnt == n;
        }
        
        printf( "Case #%d: %d\n", _+1, res );
    }

    return 0;
}

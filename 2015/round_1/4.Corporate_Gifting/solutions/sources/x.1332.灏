#include <stdio.h>
#include <stdlib.h>
#include <stack>
#include <iostream>
#define MAXN 200000
#define True 1

typedef struct alist{
	int value;
	struct alist *next;
}list;

typedef struct aemployee{
	list *head;
	list *tail;
	list *currentpos;
	int value;
}employee;

list *Null;

employee *relationship[MAXN + 5] = {};

void addelement(employee *a, int b)
{
	list *tmp = (list *) malloc(sizeof(list));
	tmp -> value = b;
	tmp -> next = Null;

	if (a -> head == Null) 
	{
		a -> head = a -> tail = tmp;
	}

	else 
	{
		a -> tail -> next = tmp;
		a -> tail  = tmp;
	}
}
int sum = 0;
int status[MAXN + 5] = {};


int dfs(employee *root, int n)
{
	std::stack<employee *> s;
	s.push(root);

	while (!s.empty())
	{
		employee *node = s.top();

		if (node -> head == Null) 
		{
			sum ++;
			status[node -> value] = 1;
			s.pop();
		}
		else if (node -> currentpos == Null) 
		{
			list *tmpnode = node -> head;
			int getindex[200001] = {};
			int i;

			for (; tmpnode != Null ; tmpnode = tmpnode -> next)
			{
				int index = status[tmpnode -> value];
				getindex[index] = 1;
			}

			for (i = 1; i <= n; i++) 
			{
				if (getindex[i] != 1) 
				{
					sum += i;
					status[node -> value]  = i;
					s.pop();
					break;
				}
			}
		}
		else 
		{
			s.push(relationship[node -> currentpos -> value]);
			node -> currentpos = node -> currentpos -> next;
		}
	}
}


int main(void)
{
	freopen("gift.in", "r", stdin);
	freopen("gift.out", "w", stdout);
	int t, n;
	int i, j;
	int o;

	scanf("%d", &t);


	for (o = 0; o < t; o++) 
	{

		scanf("%d", &n);
		for (i = 0; i <= n; i++) 
		{
			relationship[i] = (employee *)malloc(sizeof(employee));
			relationship[i] -> head = relationship[i] -> tail = Null;
		}

		for (i = 1; i <= n; i++) 
		{
			int tmp;
			scanf("%d", &tmp);
			addelement(relationship[tmp], i);
		}

		for (i = 0; i <= n; i++) 
		{
			relationship[i] -> value = i;
			relationship[i] -> currentpos = relationship[i] -> head;
		}

		sum = 0;
		dfs(relationship[1], n);

		printf("Case #%d: %d\n", o + 1,  sum);
	}







	return 0;
}

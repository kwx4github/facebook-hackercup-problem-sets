#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define sz(a) ((int)a.size())

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << "\n"
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define INF 1000000007

struct State
{
	int value;
	int id;

	bool operator < (const State &s) const
	{
		return value < s.value;
	}
};

struct Node
{
	int id;
	int parent;

	Node(int i, int p): id(i), parent(p) {}
};

struct Graph
{
	vector< vector< Node > > adj;
	vector< vector<int> > dp;

	Graph(int n) {
		adj.resize(n);
		dp.resize(n);
		rep(i, n) {
			dp[i].resize(26, INF);
		}
	}

	void addEdge(int a, int b) {
		adj[a].pb( Node(b, a) );
	}

	void DFSUtil(int id) {

		if( sz(adj[id]) == 0) {
			fore(i, 1, 25) {
				dp[id][i] = i;
			}

			return;
		}

		vector<vector< State > > t;
		int i = 0;
		foreach(adj[id], it) {

			DFSUtil(it->id);
			
			t.pb( vector< State >(26) );
			rep(j, 26) {
				t[i][j].value = dp[it->id][j];
				t[i][j].id = j;
			}
			sort(all(t[i]));
			i++;
		}

		dp[id][0] = INF;
		fore(j, 1, 25) {
			int sum = 0;
			rep(k, sz(t)) {
				if( t[k][0].id != j) {
					sum += t[k][0].value;
				}
				else {
					sum += t[k][1].value;
				}
			}
			dp[id][j] = sum + j;
		}

		return;
	}

	int DFS() {
		vector< bool > visited(sz(adj), false);

		DFSUtil(0);

		int ans = INF;
		fore(i,1,25) {
			ans = min(ans, dp[0][i]);
		}

		return ans;
	}

};

int main(int argc, char const *argv[])
{
	int T;
	gi(T);

	fore(t,1,T) {
		int N;
		gi(N);

		Graph G(N);
		rep(i, N) {
			int e; gi(e);
			if(e)
				G.addEdge(e - 1, i);
		}

		printf("Case #%d: %d\n", t, G.DFS() );

	}
	return 0;
}

// struct State
// {
// 	int id;
// 	int level;

// 	State(int i, int l): id(i), level(l) {}
// };

// struct Node
// {
// 	int id;
// 	int size;
// 	Node(int i = 0, int s = 0): id(i), size(s) {}
// };

// struct Graph
// {
// 	vector< vector< Node > > adj;
// 	int size;

// 	Graph(int n) {
// 		size = n;
// 		adj.resize(size);
// 	}

// 	void addEdge(int a, int b) {
// 		adj[a].pb( Node(b) );
// 	}

// 	ll BFS() {

// 		queue<State> Q;
// 		vector< bool > visited(size, false);

// 		Q.push( State(0, 0) );
// 		visited[0] = true;
// 		ll possibility1 = 1, possibility2 = 2;

// 		while(sz(Q)) {
// 			State t = Q.front();
// 			Q.pop();

// 			foreach(adj[t.id], it) {
// 				if(!visited[*it]) {
// 					Q.push( State(*it, t.level + 1) );
// 					visited[*it] = true;

// 					if( (t.level % 2) == 0) {
// 						possibility1 += 2;
// 						possibility2 += 1;
// 					}
// 					else {
// 						possibility1 += 1;
// 						possibility2 += 2;
// 					}
// 				}
// 			}

// 		}

// 		return min(possibility1, possibility2);
// 	}

// 	ll DFSUtil(vector<bool> &visited, int id, int &ret) {
// 		set<int> s;

// 		ll sum = 0;
// 		foreach(adj[id], it) {
// 			if(!visited[*it]) {
// 				int r;
// 				visited[*it] = true;
// 				sum += DFSUtil(visited, *it, r);
// 				s.insert(r);
// 			}
// 		}

// 		fore(i,1,size)
// 		{
// 			if(s.find(i) == s.end()) {
// 				ret = i;
// 				break;
// 			}
// 		}

// 		sum += ret;
// 		return sum;
// 	}

// 	ll DFS() {
// 		vector< bool > visited(size, false);
// 		int r;
// 		return DFSUtil(visited, 0, r);
// 	}
// };

// struct Node {
// 	int id;
// 	vi child;

// 	Node(int id): id(id) {}
// };

// struct Tree
// {
// 	vector< Node > heap;
// 	vector< vector<int> > dp;

// 	Tree(int size) {
// 		dp.resize(size);
// 		rep(i, size) {
// 			heap.pb( Node(i) );
// 			dp[i].resize(26, imax);
// 		}
// 	}

// 	void addEdge(int a, int b) {
// 		heap[a].child.pb( b );
// 	}

// 	int solve() {
// 		ford(i, sz(dp) - 1, 0) {
// 			if( heap[i].child.empty() ) {
// 				fore(j, 1, 25) {
// 					dp[i][j] = j;
// 				}
// 			}
// 			else {
// 				int size = sz(heap[i].child);

// 				vector< int > min( size, imax);
// 				vector< int > second_min( size, imax);
// 				vector< int > index( size, -1);

// 				rep(j, size) {
// 					int child_id = heap[i].child[j];
// 					fore(k, 1, 25) {
// 						if(min[j] > dp[child_id][k]) {
// 							second_min[j] = min[j];
// 							min[j] = dp[child_id][k];
// 							index[j] = k;
// 						}
// 					}
// 				}

// 				fore(k, 1, 25) {
// 					dp[i][k] = k;

// 					rep(j, size) {
// 						if(index[j] == k) {
// 							dp[i][k] += second_min[j];
// 						}
// 						else {
// 							dp[i][k] += min[j];
// 						}
// 					}
// 				}
// 			}
// 		}

// 		int min = imax;
// 		fore(i, 1, 25) {
// 			if(min > dp[0][i])
// 				min = dp[0][i];
// 		}

// 		// rep(i, sz(dp)) {
// 		// 	fore(j, 1, 25) {
// 		// 		printf("%d ", dp[i][j]);
// 		// 	}
// 		// 	printf("\n");
// 		// }

// 		return min;
// 	}
// };
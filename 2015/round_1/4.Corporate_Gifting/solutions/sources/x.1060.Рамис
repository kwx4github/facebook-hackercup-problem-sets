#include <iostream>
#include <cstring>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <bitset>
#define _USE_MATH_DEFINES
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <assert.h>
using namespace std;

void smain();
int main(){
    //ios_base::sync_with_stdio(0);
#ifdef DEBUG
    freopen("/Users/ramis/Downloads/corporate_gifting.txt","rt",stdin);
    //freopen("input.txt","rt",stdin);
    freopen("output.txt","wt",stdout);
    const clock_t start = clock();
#endif
    smain();
#ifdef DEBUG
    cerr << "\nTotal Execution Time: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
    return 0;
}

#define forn(i,n) for (int i=0;i<n;i++)
#define rforn(i,n) for (int i=n-1;i>=0;i--)
#define fori(i,a) for(auto i=a.begin(); i!=a.end(); ++i)
#define rfori(i,a) for(auto i=a.rbegin(); i!=a.rend(); ++i)
#define int long long
#define LL long long
#define mp(a,b) make_pair(a,b)
#define INF ((1LL<<62)-1) //2305843009213693951LL
#define MOD 1000000007
#define EPS 0.00000000001
#define N 200001
/* --------- END TEMPLATE CODE --------- */

#define M 5

int n;
vector<int> edges[N];
int p[N], cur[N];
int d[N][M];

inline int exmin(int v, int j) {
    int mn = d[v][1-min(j, 1LL)];
    forn(i, M) if(j != i && d[v][i] < mn) mn = d[v][i];
    return mn;
}

void dfs(int v){
    for(auto it : edges[v]) dfs(it);
    
    forn(i, M) {
        d[v][i] = i + 1;
        for(auto it : edges[v]) d[v][i] += exmin(it, i);
    }
}

inline int solve(){
    dfs(0);
    return *min_element(d[0], d[0] + M);
}


int brute_force(int v, int tk){
    if(edges[v].size() == 0) {
        return tk == 1 ? 2 : 1;
    }
    int res = INF;
    forn(i, 5) if(i + 1 != tk) {
        int c = i + 1;
        for(auto it : edges[v]) c += brute_force(it, i + 1);
        if(c < res) res = c, cur[v] = i + 1;
    }
    return res;
}


void smain() {
    int T;
    cin >> T;
    
    for(int t = 1; t <= T; ++t) {
        cin >> n;
        forn(i, n) edges[i].clear();
        
        forn(i, n) {
            cin >> p[i], p[i] -= 1;
            if(i) edges[p[i]].push_back(i);
        }
        cout << "Case #" << t << ": " << solve() << '\n';
        cerr << "Case #" << t << ": " << solve() << '\n';
    }
}




#include <vector>
#include <map>
#include <set>
#include <utility>
#include <string>
#include <stdio.h>
#include <iostream>
#include <sstream>

using namespace std;

struct Node {
  vector<int> children;
  int volume;
  set<int> bannedGifts;
  int parent;
  int color;
  Node() : volume(0), parent(-1), color(0) {}
};

map<int, Node> parseTreeStack(const vector<int>& ids) {
  Node zero;
  map<int, Node> graph;
  graph[0] = zero;
  for (int i=1; i<=ids.size(); i++) {
    int parent = ids[i-1];
    Node child;
    child.parent = parent;
    graph[i] = child;
    graph[parent].children.push_back(i);
  }
  return graph;
}

int minGiftStack(int root, map<int, Node>& graph, int N) {
  vector<int> stack;
  stack.push_back(root);
  while (!stack.empty()) {
    int v = stack.back();
    stack.pop_back();
    if (graph[v].color == 0) {
      graph[v].color = 1;
      stack.push_back(v);
      if (graph[v].children.empty()) {
        graph[v].volume = 1;
        int parent = graph[v].parent;
        graph[parent].bannedGifts.insert(1);
      }
      for (int c=0; c<graph[v].children.size(); c++) {
        int child = graph[v].children[c];
        if (graph[child].color == 0) {
          stack.push_back(child);
        }
      }
    } else if (graph[v].color == 1) {
      graph[v].color = 2;
      if (graph[v].volume == 0) {
        for (int c=0; c<graph[v].children.size(); c++) {
          int child = graph[v].children[c];
          graph[v].volume += graph[child].volume;        
        }
        int g = 0;
        for (g=1; g<=N; g++) {
          if (graph[v].bannedGifts.find(g) == graph[v].bannedGifts.end())
            break;
        }
        int parent = graph[v].parent;
        if (parent != -1) {
          graph[v].volume += g;
          graph[parent].bannedGifts.insert(g);
        }
      }
    }
  }
  return graph[0].volume;
}

int getNumber() {
  string line;
  getline(cin, line);
  istringstream iss(line);
  int temp;
  while (iss >> temp) {
    break;
  }
  return temp;
}

int solve(vector<int>& xs) {
  map<int, Node> graph = parseTreeStack(xs);
  return minGiftStack(0, graph, xs.size());
}

vector<int> getVector(int N) {
  string line;
  vector<int> xs;
  getline(cin, line);
  istringstream iss(line);
  int temp;
  while (iss >> temp) {
    xs.push_back(temp);
  }
  return xs;
}

int main(int argc, char **argv) {
  int N = getNumber();
  for (int i=1; i<= N; i++) {
    int n = getNumber();    
    vector<int> xs = getVector(n);
    cout << "Case #"<<i<<": "<<solve(xs)<<endl;
  }
  
  return 0;
}

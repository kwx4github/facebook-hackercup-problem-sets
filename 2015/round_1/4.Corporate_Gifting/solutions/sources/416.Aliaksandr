#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <utility>
#include <numeric>
#include <fstream>

using namespace std;

#define		ALL(c)	(c).begin(),(c).end()
#define		SZ(c)	int((c).size())
#define		LEN(s)	int((s).length())
#define		FOR(i,n)	for(int i=0;i<(n);++i)
#define		FORD(i,a,b)	for(int i=(a);i<=(b);++i)
#define		FORR(i,a,b)	for(int i=(b);i>=(a);--i)

typedef istringstream iss;
typedef ostringstream oss;
typedef long double ld;
typedef long long i64;
typedef pair<int,int> pii;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;

typedef vector<ld> vd;
typedef vector<vd> vvd;

typedef vector<string> vs;

const i64 d18 = 1000000000000000000LL;
const ld eps = 1e-9;
const ld pi = atan2(0.0, -1.0);
template<class T> T sqr(T a) { return a * a; }
i64 abs(i64 a) { return (a >= 0) ? a : -a; }

ofstream LOG("log.txt");

ifstream fin;
ofstream fout;


void solve_case(int TN)
{
	int n;
	fin >> n;

	int K = int(log(n + 1.0) / log(2.0) * 5.0 + 10.0);

	vvi A(n+1);
	vi Pr(n+1), St(n+1, 0);
	FOR(i, n)
	{
		int p;
		fin >> p;
		Pr[i+1] = p;
		A[p].push_back(i+1);
		St[p]++;
	}

	deque<int> deq;
	FORD(i, 1, n)
	{
		if (St[i] == 0)
			deq.push_back(i);
	}

	vi B1(n+1, -1), C1(n+1, -1), B2(n+1, -1), C2(n+1, -1);
	while (!deq.empty())
	{
		int v = deq.front();
		deq.pop_front();

		St[Pr[v]]--;
		if (Pr[v] != 0 && St[Pr[v]] == 0)
			deq.push_back(Pr[v]);

		FORD(k, 1, K)
		{
			int m = SZ(A[v]);
			int s = k;
			FOR(j, m)
			{
				int u = A[v][j];
				if (C1[u] != k)
					s += B1[u];
				else
					s += B2[u];
			}
			if (B1[v] == -1 || s < B1[v])
			{
				B2[v] = B1[v];
				C2[v] = C1[v];
				B1[v] = s;
				C1[v] = k;
			}
			else if (B2[v] == -1 || s < B2[v])
			{
				B2[v] = s;
				C2[v] = k;
			}
		}
	}

	int maxC = 0;
	FORD(i, 1, n)
		maxC = max(maxC, max(C1[i], C2[i]));

	cout << "maxC = " << maxC << endl;

	int ans = B1[1];

	fout << "Case #" << TN << ": " << ans << endl;
	cout << "Case #" << TN << ": " << ans << endl;
}

int main()
{
//   	FOR(i, 199999) LOG << i << " ";
//   	LOG << endl;
//   	return 0;

	fin.open("D.in"); 
	fout.open("D.out");

	int T; 
	fin >> T;
	FOR(tt, T)
	{
		solve_case(tt+1);
	}

	return 0;	
}

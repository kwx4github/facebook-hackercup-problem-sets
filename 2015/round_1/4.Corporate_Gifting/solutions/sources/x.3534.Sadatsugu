#include <string>
#include <vector>
#include <algorithm>
#include <fstream>
#include <iostream>
#include <queue>

using namespace std;

vector<int> edge[2000000];

int oddlevelonenum;
int evenlevelonenum;
bool oddlevelone;
bool evenlevelone;
int multinum;

int N;

void init() {
    for (int i = 0; i < N; i++) {
        edge[i].clear();
    }
    oddlevelonenum = 0;
    evenlevelonenum = 0;
    oddlevelone = false;
    evenlevelone = false;
    multinum = 0;
}

int solve() {
    queue<pair<int, int>> qq;
    qq.push(make_pair(0, 0));
    evenlevelonenum++;
    while (!qq.empty()) {
        pair<int, int> p = qq.front();
        qq.pop();
        int level = p.first;
        int nextlevel = level + 1;
        int oldnode = p.second;
        int num = 0;
        for (int i = 0; i < edge[oldnode].size(); i++) {
            int oldnextnode = edge[oldnode][i];
            if (edge[oldnextnode].size() != 0) {
                if (nextlevel % 2 == 0) {
                    evenlevelonenum++;
                } else {
                    oddlevelonenum++;
                }
                qq.push(make_pair(nextlevel, oldnextnode));
            } else {
                num++;
            }
        }
        if (num == 1) {
            if (nextlevel % 2 == 0) {
                evenlevelonenum++;
            } else {
                oddlevelonenum++;
            }
        } else if (num >= 1) {
            multinum += num;
            if (level % 2 == 0) {
                evenlevelone = true;
            } else {
                oddlevelone = true;
            }
        }
    }

    int ret = 200000 * 3;
    if (!oddlevelone && !evenlevelone) {
        ret = min(ret, evenlevelonenum + multinum + oddlevelonenum * 2);
        ret = min(ret, oddlevelonenum + multinum + evenlevelonenum * 2);
    } else if (!oddlevelone) {
        ret = min(ret, oddlevelonenum + multinum + evenlevelonenum * 2);
        ret = min(ret, (oddlevelonenum + multinum) * 2 + evenlevelonenum);
    } else if (!evenlevelone) {
        ret = min(ret, evenlevelonenum + multinum + oddlevelonenum * 2);
        ret = min(ret, (evenlevelonenum + multinum) * 2 + oddlevelonenum);
    } else {
        int permutaion[3] = {1, 2, 3};
        do {
            ret = min(ret, multinum * permutaion[0] + evenlevelonenum * permutaion[1] + oddlevelonenum * permutaion[2]);
        } while (next_permutation(permutaion, permutaion + 3));
    }
    return ret;
}

int main() {
    ifstream in("input.txt");
    ofstream out("output.txt");
    int T; in >> T;
    cout << "T: " << T << endl;
    for (int t = 0; t < T; ++t) {
        init();
        in >> N;
        for (int n = 0; n < N; n++) {
            int m; in >> m;
            if (m == 0) {
                continue;
            }
            edge[m - 1].push_back(n);
        }
        int ret = solve();
        out << "Case #" << t + 1 << ": " << ret << endl;
        cout << "Case #" << t + 1 << ": " << ret << endl;
    }
    getchar();
    return 0;
}

#include<bits/stdc++.h>

#define MOD 1000000007
#define INF 1000000000
#define EPS 1e-7
#define N 200010
#define PB push_back
#define MP make_pair
#define sa(x) scanf("%d", &x)

using namespace std;

typedef pair<int,int> pii;
typedef long long int ll;

vector<int> v[N];
vector<int> cadd[N];
int pre_order[N];
int mins[N], col[N], diff[N], ncol[N];

int cnt;

void pre_ord(int n)
{
    pre_order[cnt] = n;
    cnt++;
    vector<int>::iterator it;
    for(it=v[n].begin(); it != v[n].end(); it++) {
        pre_ord(*it);
    }
}

int main()
{
    int i,j,n,t,k,m,x,y,test,cases;
    scanf("%d",&cases);
    for(test=1; test<=cases; test++) {
        scanf("%d", &n);
        for(i=0;i<n;i++) {
            v[i].clear();
            cadd[i].clear();
        }
        for (i = 0; i < n; i++) {
            scanf("%d", &x);
            if(x==0) continue;
            v[x-1].PB(i);
        }
        cnt = 0;
        pre_ord(0);
        for(i=n-1; i>=0; i--) {
            int vert = pre_order[i];
            if (v[vert].empty()) {
                mins[vert] = 1;
                col[vert] = 1;
                diff[vert] = 1;
                ncol[vert] = 2;
            }
            else {
                int mint = 0;
                m = v[vert].size();
                for(j=1;j<=m+2;j++) {
                    cadd[vert].PB(j);
                }
                vector<int>::iterator it;
                for(it=v[vert].begin(); it != v[vert].end(); it++) {
                   mint += mins[*it];
                   cadd[vert][col[*it]-1] += diff[*it];
                }
                int sum1 = INF;
                int sum2 = INF;
                int c1,c2;
                for(j=1;j<=m+2;j++) {
                    int val = cadd[vert][j-1];
                    if(val < sum1) {
                        c2 = c1;
                        sum2 = sum1;
                        c1 = j;
                        sum1 = val;
                    }
                    else if(val < sum2) {
                        c2 = j;
                        sum2 = val;
                    }
                }
                mins[vert] = sum1 + mint;
                col[vert] = c1;
                diff[vert] = sum2 - sum1;
                ncol[vert] = c2;
            }
        }
        printf("Case #%d: %d\n", test, mins[0]);
    }
    return 0;
}

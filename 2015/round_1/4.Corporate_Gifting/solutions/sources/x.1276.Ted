#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
vector<int>a[200000];
int ceo;
const ll oo = 44444444444;
vector<int>aa(200000), bb(200000), cc(200000), dd(200000), ee(200011);
void cost(int cur, int &i0, ll &c0, int &i1, ll &c1) {
	if (!ee[cur]) {
		vector<int> &ch = a[cur];
		int n = ch.size();
		vector<int>ci0(n), ci1(n);
		vector<ll>cc0(n), cc1(n);
		int maxv = 1, base = 0;
		for (int i = 0; i < n; ++i) {
			cost(ch[i], ci0[i], cc0[i], ci1[i], cc1[i]);
			base += cc0[i];
			maxv = max(maxv, max(ci0[i], ci1[i]));
		}
		vector<ll>penalty(maxv + 2);
		for (int i = 0; i < n; ++i)
			penalty[ci0[i]] += cc1[i] - cc0[i];
		c0 = c1 = oo;
		for (int i = 1; i <= maxv + 1; ++i) {
			ll c = base + penalty[i] + i;
			if (c < c1) {
				c1 = c;
				i1 = i;
				if (c1 <= c0) {
					swap(c0, c1);
					swap(i0, i1);
				}
			}
		}
		assert(i0 >= 1);
		assert(i1 >= 1);
		assert(c0 >= i0);
		assert(c1 >= i1);
		assert(i0 != i1);
		assert(c0 <= c1);
		//cerr << cur << ": " << i0 << "(" << c0 << ") " << i1 << "(" << c1 << ")\n";
		aa[cur] = i0;
		bb[cur] = i1;
		cc[cur] = c0;
		dd[cur] = c1;
		ee[cur] = 1;
	}
	i0 = aa[cur];
	i1 = bb[cur];
	c0 = cc[cur];
	c1 = dd[cur];
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		int N;
		cin >> N;
		ee.clear();
		for (int i = 0; i < N; ++i)
			a[i].clear();
		for (int i = 0; i < N; ++i) {
			int par;
			cin >> par;
			if (par)
				a[par - 1].push_back(i);
			else
				ceo = i;
		}
		int i0, i1;
		ll c0, c1;
		for (int i = N-1; i >= 0; --i)
			cost(0, i0, c0, i1, c1);
		cost(0, i0, c0, i1, c1);
		cout << "Case #" << t << ": " << c0 << endl;
	}
}

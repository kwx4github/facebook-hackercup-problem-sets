#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 200100;

vector<int> adj[MAXN];

pair<int,int> dfs(int node){
  if(adj[node].size() == 0) return make_pair(1, 1);
  int sum = 0;
  for(int i = 0; i < adj[node].size(); ++i){
    pair<int,int> tmp = dfs(adj[node][i]);
    adj[node][i] = tmp.first;
    sum += tmp.second;
  }
  sort(adj[node].begin(), adj[node].end());

  adj[node].resize(distance(adj[node].begin(),
			    unique(adj[node].begin(),
				   adj[node].end())));
  for(int i = 0; i < adj[node].size(); ++i){
    if(adj[node][i] != (i + 1)){
      return make_pair(i + 1, sum + i + 1);
    }
  }
  return make_pair(adj[node].size() + 1, sum + adj[node].size() + 1);
}

int solve(){
  for(int i = 0; i < MAXN; ++i) adj[i].clear();
  int n, v;
  scanf("%d", &n);
  for(int i = 1; i <= n; ++i){
    scanf("%d", &v);
    adj[v].push_back(i);
  }
  return dfs(1).second;
}

int main(){
  int t;
  scanf("%d", &t);
  for(int i = 1; i <= t; ++i){
    printf("Case #%d: %d\n", i, solve());
  }
  return 0;
}

#include <iostream>
#include <vector>
#include <set>

using namespace std;

typedef struct s_frame
{
    int id;
    int stage;
} frame;

static vector<set<int> > forbid;

static vector<frame> callstack;

static vector<int> gifts;

static vector<vector<int> > adj;

static vector<int> manage;

int main()
{
    int T;
    cin >> T;
    for (int zz = 0; zz < T; zz++)
    {
        cout << "Case #" << zz+1 << ": ";

        int N;
        cin >> N;
        forbid.clear();
        for (int i = 0; i <= N; i++)
        {
            set<int> forb;
            forbid.push_back(forb);
        }
        callstack.clear();
        gifts.clear();
        for (int i = 0; i <= N; i++)
        {
            gifts.push_back(0);
        }
        adj.clear();
        for (int i = 0; i <= N; i++)
        {
            vector<int> ad;
            adj.push_back(ad);
        }
        manage.clear();
        manage.push_back(-1);
        for (int i = 0; i < N; i++)
        {
            int manager;
            cin >> manager;
            manage.push_back(manager);
            adj[manager].push_back(i+1);
        }
        frame start;
        start.id = 1;
        start.stage = 0;
        callstack.push_back(start);
        while (callstack.size() != 0)
        {
            frame cur = callstack.back(); callstack.pop_back();
            if (cur.stage == 0)
            {
                cur.stage = 1;
                callstack.push_back(cur);
                for (int i = 0; i < adj[cur.id].size(); i++)
                {
                    frame next;
                    next.id = adj[cur.id][i];
                    next.stage = 0;
                    callstack.push_back(next);
                }
            }
            else
            {
                int val;
                forbid[cur.id].insert(0);
                for (set<int>::iterator it=forbid[cur.id].begin(); it!=forbid[cur.id].end(); ++it)
                {
                    if (!forbid[cur.id].count((*it)+1))
                    {
                        val = (*it)+1;
                        break;
                    }
                }
                gifts[cur.id] = val;
                forbid[manage[cur.id]].insert(val);
            }
        }
        int summ = 0;
        for (int i = 1; i <= N; i++)
        {
            //cout << gifts[i] << endl;
            summ += gifts[i];
        }
        cout << summ << endl;
    }
}


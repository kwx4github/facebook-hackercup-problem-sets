#include<bits/stdc++.h>
#define lol long long int
#define ulol unsigned long long int 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
using namespace std;
const lol lol_max=numeric_limits<lol>::max();
int a[200005],n,maxlevel;
int level[200005];
int val[200005];
vector <int> v[200005];
vector <int > nodes_in_level[200005];
void bfs(){
	vector <int> vv;
	vv.clear();
	vv.pb(0);
	level[0]=0;
	int i=0;
	while(i!=n+1){
		int sz = v[i].size();
		for(int j=0;j<sz;j++){
			vv.pb(v[i][j]);
		}
		if(vv[i]!=0){
			level[i]=level[a[i]]+1;
			nodes_in_level[level[i]].pb(i);
		}
		if(i==n)maxlevel = level[i];
		i++;
	}
	return ;
}
int minim(int a,int b){
	return (a<b?a:b);
}
int main(){
	int t;
	scanf("%d",&t);
	for(int x=1;x<=t;x++){
		scanf("%d",&n);
		nodes_in_level[0].clear();
		for(int i=0;i<=n;i++){v[i].clear();level[i]=0;nodes_in_level[i+1].clear();}
		for(int i=1;i<=n;i++){
			scanf("%d",&a[i]);
			v[a[i]].pb(i);
		}
		bfs();
		long long int  ans=0;
		for(int i=maxlevel;i>=1;i--){
			int yy = nodes_in_level[i].size();
			for(int j=0;j<yy;j++){
				int nodeno = nodes_in_level[i][j];
				int yy1 = v[nodeno].size(); 
				int ispossible;
				for(ispossible=1;;ispossible++){
					int f=1;
					for(int k=0;k<yy1;k++){
						if(val[v[nodeno][k]]==ispossible)
							 {f=0;break;}
					}
					if(f==1)break;
				}
				val[nodeno]=ispossible;
				ans+=val[nodeno];
			}
		}
		printf("Case #%d: %lld\n",x,ans);
	}
	return 0;
}

import java.io.*;
import java.util.*;

public class CorporateGifting {

	FastScanner in;
	PrintWriter out;

	List<Integer>[] graph;
	int K = 10;
	int INF = Integer.MAX_VALUE / 2;

	void solve() {
		int n = in.nextInt();
		int[] parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = in.nextInt() - 1;
		}
		out.println(solve(parent));
	}

	int solve(int[] parent) {
		int n = parent.length;
		graph = new List[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i++) {
			if (parent[i] != -1) {
				graph[parent[i]].add(i);
			}
		}

		int[] cost = get(0);
		int min = cost[0];
		for (int i = 1; i < K; i++) {
			min = Math.min(min, cost[i]);
		}
		return min;
	}

	int[] get(int u) {
		int[] dp = new int[1 << K];
		for (int v : graph[u]) {
			int[] cost = get(v);
			
			int[] tmp = new int[1 << K];
			Arrays.fill(tmp, INF);
			for (int mask = 0; mask < 1 << K; mask++) {
				for (int add = 0; add < K; add++) {
					tmp[mask | (1 << add)] = Math.min(tmp[mask | (1 << add)], dp[mask] + cost[add]);
				}
			}
			dp = tmp;
		}
		
		int[] ret = new int[K];
		Arrays.fill(ret, INF);
		for (int i = 0; i < K; i++) {
			for (int mask = 0; mask < 1 << K; mask++) {
				if ((mask & (1 << i)) == 0) {
					ret[i] = Math.min(ret[i], dp[mask] + i + 1);
				}
			}
		}
		return ret;
	}

	void run() {
		try {
			in = new FastScanner("corporate_gifting.txt");
			out = new PrintWriter("output.txt");
			int T = in.nextInt();
			for (int test = 1; test <= T; test++) {
				out.print(String.format("Case #%d: ", test));
				solve();
				System.err.println(test);
			}
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public FastScanner(String s) {
			try {
				br = new BufferedReader(new FileReader(s));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String nextToken() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(nextToken());
		}

		long nextLong() {
			return Long.parseLong(nextToken());
		}

		double nextDouble() {
			return Double.parseDouble(nextToken());
		}
	}

	public static void main(String[] args) {
		new CorporateGifting().run();
	}
}

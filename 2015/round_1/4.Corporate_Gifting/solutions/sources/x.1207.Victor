import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.InputMismatchException;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Task {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        List<List<Integer>> adj = new ArrayList<List<Integer>>();
        for (int i = 0; i <= n; ++i) {
            adj.add(new ArrayList<Integer>());
        }
        for (int i = 1; i <= n; ++i) {
            int p = in.nextInt();
            adj.get(p).add(i);
        }
        int[][] cache = new int[n + 1][4];
        for (int i = 0; i < cache.length; ++i) {
            for (int j = 0; j < cache[i].length; ++j) {
                cache[i][j] = -1;
            }
        }
        int res = Integer.MAX_VALUE;
        for (int c = 1; c <= 3; ++c) {
            if (res > f(1, c, adj, cache)) {
                res = f(1, c, adj, cache);
            }
        }
        out.printf("Case #%d: %d\n", testNumber, res);
    }

    int f(int at, int color, List<List<Integer>> adj, int[][] cache) {
        if (cache[at][color] != -1) {
            return cache[at][color];
        }
        int res = color;
        for (int to : adj.get(at)) {
            int sub = Integer.MAX_VALUE;
            for (int c = 1; c <= 3; ++c) {
                if (c == color) continue;
                if (sub > f(to, c, adj, cache)) {
                    sub = f(to, c, adj, cache);
                }
            }
            res += sub;
        }
        cache[at][color] = res;
        return res;
    }
}

class InputReader {
    BufferedReader bufReader;
    StringTokenizer stringTokenizer;
    boolean isEof = false;

    public InputReader(InputStream stream) {
        bufReader = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            try {
                String line = bufReader.readLine();
                if (line == null) {
                    isEof = true;
                    return null;
                }
                stringTokenizer = new StringTokenizer(line);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
        }
        return stringTokenizer.nextToken();
    }

    public int nextInt() {
        String s = next();
        if (s == null) {
            return 0;
        }
        return Integer.parseInt(s);
    }

}


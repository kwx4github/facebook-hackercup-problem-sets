// -Wl,-stack_size -Wl,0x10000000
#include <cstdio>
#include <vector>
#include <map>

using namespace std;

#define N 200000

struct Node {
  long long mi_cost;
  int mi_self;
  long long sub_mi_cost;
  vector<int> kids;
};

vector<Node> nodes;

void dfs(int s) {
  Node& node = nodes[s];
  map<int, long long> delta;
  long long sum = 0;
  for (auto kid : node.kids) {
    dfs(kid);
    auto& k = nodes[kid];
    sum += k.mi_cost;
    delta[k.mi_self] += k.sub_mi_cost - k.mi_cost;
  }
  int last = 0;
  for (last = 1; delta.count(last) > 0; last++);

  node.mi_cost = last + sum;
  node.mi_self = last;
  node.sub_mi_cost = last + sum + 1;
  for (int i = 1; i < last; i++) {
    long long new_cost = i + sum + delta[i];
    if (node.mi_cost >= new_cost) {
      swap(node.mi_cost, new_cost);
      if (node.sub_mi_cost > new_cost) {
        node.sub_mi_cost = new_cost;
      }
      node.mi_self = i;
    }
  }
}

int main() {
  int t;
  scanf("%d", &t);
  for (int ca = 1; ca <= t; ca++) {
    int n;
    scanf("%d", &n);
    nodes.reserve(N+1);
    nodes.clear();
    nodes.resize(n+1);
    for (int i = 1; i <= n; i++) {
      int p;
      scanf("%d", &p);
      nodes[p].kids.push_back(i);
    }
    dfs(1);
    printf("Case #%d: %lld\n", ca, nodes[1].mi_cost);
  }
  return 0;
}

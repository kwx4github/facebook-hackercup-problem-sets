#ifdef MG
//#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X &a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X &a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = acosl(ld(-1));

const int N = 2 * 100 * 1000 + 13;

int n;
int p[N];
vector<int> g[N];

inline int myrand() { return rand() ^ (rand() << 15); }

inline bool read()
{
	if (scanf("%d", &n) != 1) return false;
	//n = 2 * 100 * 1000;
	
	forn(i, n) g[i].clear();
	
	forn(i, n)
	{
		assert(scanf("%d", &p[i]) == 1);
		//if (i == 0) p[i] = 0; else p[i] = myrand() % i + 1;
		p[i]--;
		
		if (p[i] < 0) continue;
		
		g[p[i]].pb(i);
	}
	
	return true;
}

const int M = 25;

li z[N][M + 3];

li solve(int v, int c)
{
	li &ans = z[v][c];
	if (ans != -1) return ans;
	
	ans = INF64;
	
	forn(i, M + 1)
	{
		if (i == c) continue;
		
		li cur = i + 1;
		
		forn(j, sz(g[v]))
		{
			int to = g[v][j];
			
			cur += solve(to, i);
			cur = min(cur, INF64);
			
			if (cur >= ans) break;
		}
		
		ans = min(ans, cur);
	}
	
	return ans;
}

inline void solve(int test)
{
	printf("Case #%d: ", test + 1);
	
	forn(i, n) forn(j, M + 1) z[i][j] = -1;
	
	cout << solve(0, M) << endl;	
}

int main()
{
#ifdef MG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	
	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		cerr << test + 1 << endl;
		assert(read());
		solve(test);
	}
	
#ifdef MG
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

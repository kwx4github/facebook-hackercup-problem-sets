#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
using namespace std;

#define MP make_pair
#define CLR(a,b) memset(a,b,sizeof(a))
typedef long long LL;
typedef pair<int,int> PII;

const int N = 200000+5;
int n;
int fa[N];
int cnt[N];
set<pair<int,int> > s[N];
set<pair<int,int> >::iterator ite,ite2;
LL calc(int x){
    if(s[x].empty()){
        return 1;
    }
    pair<int,int> g = *s[x].begin();
    if(g.first != 1)return 1;
    return g.second + 1;
}

pair<int,int> together(pair<int,int> a,pair<int,int> b){
    int l = min(a.first,b.first);
    int r = max(a.second,b.second);
    return MP(l,r);
}
bool jiao(pair<int,int> a,pair<int,int> b){
    int l = max(a.first, b.first);
    int r = min(a.second, b.second);
    if(l <= r + 1)return 1;
    else return 0;
}
void debug(int x){
    printf("s[%d] : ",x);
    for(ite = s[x].begin(); ite != s[x].end() ; ite ++){
        printf("%d-%d,",(*ite).first,(*ite).second);
    }
    printf("\n");
}
void insert(PII segment,int f){
    set<PII>::iterator ite;
    ite = s[f].lower_bound(segment);
    if(ite != s[f].end()){
        pair<int,int> cur = *ite;
        if(jiao(cur,segment)){
            pair<int,int> nxt = together(cur, segment);
            s[f].erase(ite);
            insert(nxt,f);
            return;
        }
    }
    ite = s[f].lower_bound(segment);
    if(ite != s[f].begin()){
        ite --;
        pair<int,int> cur = *ite;
        if(jiao(cur,segment)){
            pair<int,int> nxt = together(cur, segment);
            s[f].erase(ite);
            insert(nxt,f);
            return;
        }
    }
    s[f].insert(segment);
}

void solve()
{
    CLR(cnt, 0);
    scanf("%d",&n);
    for(int i = 1 ; i <= n ; i ++){
        scanf("%d",&fa[i]);
        s[i].clear();
        cnt[i] ++;cnt[fa[i]] ++;
    }
    queue<int> que;
    for(int i = 1 ; i <= n ; i ++){
        if(cnt[i] == 1){
            que.push(i);
        }
    }
    LL ans = 0;
    while(!que.empty()){
        int x = que.front();
        que.pop();
        int f = fa[x];
        cnt[f]--;
        if(cnt[f] == 1 && f != 0)que.push(f);
        int val = calc(x);
        ans += val;
        insert(MP(val,val), f);
    }
    cout << ans << endl;
}


 int main()
 {
 freopen("/Users/lizhen/Documents/Project/Cpp/cpp/cpp/input.txt","r",stdin);
 freopen("/Users/lizhen/Documents/Project/Cpp/cpp/cpp/output.txt", "w", stdout);
 int T, cas = 0;
 scanf("%d",&T);
    while(T--){
     printf("Case #%d: ",++cas);
     solve();
    }
     return 0;
 }

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <limits>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <string>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int INF = numeric_limits<int>::max();

const int nmax = 200005, cmax = 25;
int n;
int p[nmax];
vector<int> ch[nmax];
int dp[nmax][cmax];
vector<int> order;
int CM = 0;

void rec()
{
	queue<int> s;
	s.push(1);
	while(!s.empty())
	{
		int v = s.front();
		order.push_back(v);
		//printf("%d\n", v);
		s.pop();
		for(int j=0;j<ch[v].size();j++)
			s.push(ch[v][j]);
	}
}

void go(int v)
{
	int cost[cmax];
	for(int c=1;c<cmax;c++)
		cost[c] = c;
	for(int j=0;j<ch[v].size();j++)
	{
		int u = ch[v][j];
		//rec(u);
		for(int c=1;c<cmax;c++)
			cost[c] += dp[u][c];
	}

	int best = 1;
	for(int c=1;c<cmax;c++)
		if(cost[c] < cost[best])
			best = c;
	CM = max(CM, best);
	for(int c=1;c<cmax;c++)
		dp[v][c] = cost[best];
	dp[v][best] = INF;
	for(int c=1;c<cmax;c++)
		if(c != best)
			dp[v][best] = min(dp[v][best], cost[c]);
}

int solve()
{
	for(int i=0;i<=n;i++)
		ch[i].clear();
	for(int i=1;i<=n;i++)
		ch[p[i]].push_back(i);
	order.clear();
	rec();
	for(int i=order.size()-1;i>=0;i--)
		go(order[i]);
	int res = INF;
	for(int c=1;c<cmax;c++)
		res = min(res, dp[1][c]);
	fprintf(stderr, "CM %d\n", CM);
	return res;
}

void test()
{
	n = 200000;
	p[1] = 0;
	for(int i=2;i<=n;i++)
		p[i] = (rand() % (i-1)) + 1;
	solve();
}

int main(int argc,char* argv[])
{
	int num_test_cases;
	scanf("%d",&num_test_cases);
	for(int test_case=1; test_case<=num_test_cases; test_case++)
	{
		scanf("%d", &n);
		for(int i=1;i<=n;i++)
			scanf("%d", p+i);
		int r = solve();
		printf("Case #%d: %d\n", test_case, r);
	}
	return 0;
}

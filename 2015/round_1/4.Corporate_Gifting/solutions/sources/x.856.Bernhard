/////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <string>
#include <sstream>
#include <iostream>
#include <deque>
#include <cctype>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <cstring>

using namespace std;

const int N = 200005;
vector<int> list[N];
int val[N];
long long dp[N][2];

deque<int> d;
typedef pair<int, int> P;
vector<P> order;

int main() {
	int cases;

	cin >> cases;

	for (int caseno = 1; caseno <= cases; ++caseno) {
		cout << "Case #" << caseno << ": ";
		int n;
		cin >> n;
		for (int i = 0; i < n; ++i) {
			list[i].clear();
			val[i] = -1;
		}
		for (int i = 0; i < n; ++i) {
			int x;
			cin >> x;
			if (x > 0) {
				--x;
				assert(x != i);
				list[i].push_back(x);
				list[x].push_back(i);
			}
		}

		d.clear();
		d.push_back(0);
		val[0] = 0;

		while (!d.empty()) {
			int k = d.front();
			d.pop_front();
			for (int i = 0; i < (int) list[k].size(); ++i) {
				int to = list[k][i];
				if (val[to] == -1) {
					val[to] = val[k] + 1;
					d.push_back(to);
				}
			}
		}

		order.resize(n);
		for (int i = 0; i < n; ++i) {
			order[i] = P(val[i], i);
		}
		sort(order.begin(), order.end());

		for (int i = n - 1; i >= 0; --i) {
			int k = order[i].second;
			for (int present = 0; present < 2; ++present) {
				long long sum1 = present + 1;
				long long sum2 = 3;

				for (int j = 0; j < (int) list[k].size(); ++j) {
					int to = list[k][j];
					if (val[to] <= val[k])
						continue;
					sum1 += dp[to][1 - present];
					sum2 += dp[to][present];
				}
				dp[k][present] = min(sum1, sum2);
			}
		}
		long long res1 = dp[0][0];
		long long res2 = dp[0][1];
		cout << min(res1, res2) << endl;
	}
	return 0;
}


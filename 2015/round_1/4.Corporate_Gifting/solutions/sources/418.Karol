#include <iostream>
#include <vector>
#include <map>
#include <limits>

struct Result {
	long long best;
	int root;
	long long best2;

	void popraw(int v, long long wy) {
		if(wy < best) {
			std::swap(best2, best);
			best = wy;
			root = v;
		} else if(wy < best2) best2 = wy;
	}
};

std::ostream& operator << (std::ostream& out, const Result& res) {
	return out << res.best << " for " << res.root << "; reserve " << res.best2;
}

struct Solver {
	std::vector<std::vector<int>> G;
	Solver() {}

	Result dfs(int v, int p) {
		long long bsum = 0;
		std::map<int, long long> diff;
		for(int u : G[v]) {
			if(u==p) continue;
			Result tmp = dfs(u, v);
			bsum += tmp.best;
			diff[tmp.root] += tmp.best2 - tmp.best;
		}
		Result res{std::numeric_limits<long long>::max(), 0, std::numeric_limits<long long>::max()};

		for(auto p : diff) {
			res.popraw(p.first, p.first + bsum + p.second);
		}
		int dod = 1;
		while(diff.count(dod)) dod++;
		res.popraw(dod, dod + bsum);
		dod++;
		while(diff.count(dod)) dod++;
		res.popraw(dod, dod + bsum);

		return res;
	}

	long long solve() {
		int n;
		std::cin >> n;
		G.resize(n+1);
		for(int i = 1; i <= n; i++) {
			int x;
			std::cin >> x;

			G[i].push_back(x);
			G[x].push_back(i);
		}


		Result R = dfs(1, 0);

		return R.best;
	}
};

int main() {
	std::ios_base::sync_with_stdio(false);

	int t;
	std::cin >> t;

	for(int i=1; i<=t; i++) {
		std::cout << "Case #" << i << ": " << Solver().solve() << std::endl;
	}
}

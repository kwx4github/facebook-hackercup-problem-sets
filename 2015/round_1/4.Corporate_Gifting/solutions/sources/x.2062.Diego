#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <queue>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define INF 1000000000
#define FOR(i, a, b) for(int i=int(a); i<int(b); i++)
#define FORC(cont, it) for(decltype((cont).begin()) it = (cont).begin(); it != (cont).end(); it++)
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;

#define maxN 200000

struct Employee{
	vi employees;
	set<int> useds;
	int last;
	int idBoss;
};

Employee employees[maxN];

int main() {
	int T, caso=1;
	cin >> T;
	while (T--) {
		cout << "Case #" << caso++ << ": ";
		int N;
		cin >> N;
		FOR(i, 0, N) {
			employees[i].employees.clear();
			employees[i].useds.clear();
			employees[i].last = 0;
			employees[i].idBoss = 0;
		}
		int t;
		cin >> t;
		FOR(i, 1, N) {
			cin >> t;
			employees[t-1].employees.push_back(i);
			employees[i].idBoss = t - 1;
		}
		stack<int> s;
		s.push(0);
		int ans = 0; 
		while (!s.empty()) {
			int f = s.top();
			if (employees[f].last < employees[f].employees.size()) {
				s.push(employees[f].employees[employees[f].last]);
				employees[f].last++;
			}
			else {
				int last = 1;
				FORC(employees[f].useds, it) {
					if (last != *it) {
						break;
					}
					last++;
				}
				ans += last;
				employees[employees[f].idBoss].useds.insert(last);
				s.pop();
			}
		}
		cout << ans;
		cout << endl;
	}
	return 0;
}

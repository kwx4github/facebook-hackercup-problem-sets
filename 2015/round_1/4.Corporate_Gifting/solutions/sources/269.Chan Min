#include <cstdio>
#include <climits>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> children[200000];
int par[200000];
const int LIMIT = 30;
int minsize[LIMIT+1];

vector<long long> getans(int nod)
{
	vector<long long> res(LIMIT); // 0th : $1, i-th: $(i+1)
	for (int i = 0; i < LIMIT; i++) res[i] = i+1;
	for (auto child : children[nod]) {
		auto cres(getans(child));
		pair<long long, int> min1(INT_MAX, -1), min2(INT_MAX, -1);
		for (int i = 0; i < LIMIT; i++) {
			auto cur = make_pair(cres[i],i);
			if (cur <= min1) {
				min2 = min1;
				min1 = cur;
			} else if (cur <= min2) {
				min2 = cur;
			}
		}
		for (int i = 0; i < LIMIT; i++) {
			if (i == min1.second) {
				res[i] += min2.first;
			} else {
				res[i] += min1.first;
			}
		}
	}
	return res;
}

int main(){
	int T;

	minsize[0] = 0;
	minsize[1] = 1;
	for (int i = 2; i <= LIMIT; i++) {
		minsize[i] = i;
		for (int j = 1; j <= i-2; j++) {
			minsize[i] += minsize[j];
		}
	}

	if (minsize[LIMIT] < 200000) return 1;

	scanf("%d",&T);

	for (int testcase = 1; testcase <= T; testcase++) {
		int n;
		scanf("%d",&n);
		for (int i = 0; i < n; i++) {
			scanf("%d",&par[i]);
			par[i]--;
			if (i > 0) children[par[i]].push_back(i);
		}
		vector<long long> anscand = getans(0);
		long long ans = *min_element(anscand.begin(),anscand.end());
		for (int i = 0; i < n; i++) children[i].clear();
		printf("Case #%d: %lld\n", testcase, ans);
	}
	return 0;
}

/*
홀수 레벨: 1
짝수 레벨: 2
가능 -> 전체 답은 2*N 이하

a라는 선택지를 골랐다.
child의 목록은 [1,a)에서 구멍이 하나 이하이다.
)))) 만약 구멍이 두 개 이상이면 부모에게 방해가 되지 않는 첫 구멍을 고르면 더 이득.

a라는 선택지를 고르면 child는 1 + ... + (a-2)의 합 이상이다.


*/
package facebook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.security.KeyStore.Entry;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;

public class Qual {

	private static BufferedReader br = null;
	private static int readInt() {
		try {
			return Integer.parseInt(br.readLine());
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}
	private static int[] readIntArr() {
		int[] ret = null;
		String[] tmp;
		try {
			String str = br.readLine();
			tmp = str.split(" ");
			ret = new int[tmp.length + 1];
			for (int i = 0; i < tmp.length; i++)
				ret[i + 1] = Integer.parseInt(tmp[i]);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ret;
	}
	public static void main(String[] args) {
		//Scanner in = null;
		try {
//			in = new Scanner(new File("E:\\workspace\\facebook\\bin\\input.txt"));
			System.setOut(new PrintStream(new FileOutputStream("E:\\workspace\\facebook\\bin\\output.txt")));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			br = new BufferedReader(new FileReader("E:\\workspace\\facebook\\bin\\input.txt"));
		}  catch (FileNotFoundException e) {
		    e.printStackTrace();
		}
		int T = readInt();
		for(int ind = 1; ind <= T; ind++) {
			int n = readInt();
			int[] data = new int[n+1];
			int[] count = new int[n+1];
			Node[] nodes = new Node[n+1];
			data = readIntArr();
			for (int i = 1; i <= n; i ++) {
//				data[i] = readInt();
				count[data[i]]++;
			}
			Queue<Integer> d = new LinkedList<Integer> ();
			for (int i = 1; i <=n; i++) {
				nodes[i] = new Node(count[i]);
				if (count[i] == 0) {
					d.add(i);
				}
			}
			for (int i = 1; i <=n; i ++)
			{
				if (data[i] != 0) {
				nodes[data[i]].ch[--count[data[i]]] = i;
				}
			}
			while (!d.isEmpty()) {
				int cur = d.poll();
				int sum = 0;
				Set<Integer> set = new HashSet<Integer> ();
				for (int i = 0; i < nodes[cur].ch.length; i++) {
					Node node = nodes[nodes[cur].ch[i]];
					sum += node.min;
					set.addAll(node.values.keySet());
					set.add(node.minWhen);
				}
				for (int i = 1; ; i++) if (!set.contains(i)) {
					nodes[cur].min = sum + i;
					nodes[cur].minWhen = i;
					break;
				}
				Integer[] keys = (Integer[]) set.toArray(new Integer[0]);
				nodes[cur].def = sum;
				for (int i = 0; i < keys.length; i++) {
					sum = keys[i];
					for (int j = 0; j < nodes[cur].ch.length; j++) {
						Node node = nodes[nodes[cur].ch[j]];
						if (node.minWhen != keys[i]) {
							sum += node.min;
							continue;
						}
						int tmp = Integer.MAX_VALUE;
						for (java.util.Map.Entry<Integer, Integer> entry : node.values.entrySet()) {
							if (entry.getKey() != keys[i]) {
								tmp = Math.min(tmp, entry.getValue());
							}
						}
						Set<Integer> set1 = node.values.keySet();
						for (int k = 1; ; k++) 
							if (k != keys[i] && !set1.contains(k)) {
								tmp = Math.min(tmp, node.def + k);
								break;
							}
						sum += tmp;
					}
					if (nodes[cur].min > sum) {
						nodes[cur].min = sum;
						nodes[cur].minWhen = keys[i];
					}
					if (sum - keys[i] != nodes[cur].def) nodes[cur].values.put(keys[i], sum);
				}
				if (data[cur] != 0) {
					nodes[data[cur]].left--;
					if (nodes[data[cur]].left == 0) {
						d.add(data[cur]);
					}
				}
			}
			System.out.println("Case #" + ind + ": " + nodes[1].min);
		}
	}

	public static class Node {
		public int[] ch;
		public int def;
		public int left;
		public int min;
		public int minWhen;
		public Map<Integer, Integer> values;
		
		public Node(int count) {
			ch = new int[count];
			left = count;
			values = new HashMap<Integer, Integer> ();
			min = Integer.MAX_VALUE;
		}
	}
}

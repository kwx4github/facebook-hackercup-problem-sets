#include <algorithm>
#include <numeric>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <iostream>
#include <fstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <sstream>
#include <stdio.h>
#include <stack>

using namespace std;

vector<int> graph[200000];
int dp[200000][20];
int dp2[200000][20];

void solve(int t) {
    for (int i=0;i<200000;i++)
        graph[i].clear();
    for (int i=0;i<200000;i++)
        for (int j=0;j<20;j++) {
            dp[i][j]=1000000000;
            dp2[i][j]=1000000000;
        }
    int n;
    cin>>n;
    for (int i=0;i<n;i++) {
        int pred;
        cin>>pred;
        if (i==0)
            continue;
        pred--;
        graph[pred].push_back(i);
    }
    vector<int> order;
    queue<int> q;
    q.push(0);
    while (!q.empty()) {
        int v=q.front();
        q.pop();
        order.push_back(v);
        for (int i=0;i<graph[v].size();i++)
            q.push(graph[v][i]);
    }
    reverse(order.begin(),order.end());
    for (int i=0;i<order.size();i++) {
        int v=order[i];
        if (graph[v].empty()) {
            for (int j=1;j<20;j++) {
                dp[v][j]=j;
                if (j==1)
                    dp2[v][j]=2;
                else
                    dp2[v][j]=1;
            }
        } else {
            for (int j=1;j<20;j++) {
                int dpres=j;
                for (int k=0;k<graph[v].size();k++) {
                    dpres+=dp2[graph[v][k]][j];
                }
                dp[v][j]=dpres;
            }
            multiset<int> s;
            for (int j=1;j<20;j++) {
                s.insert(dp[v][j]);
            }
            for (int j=1;j<20;j++) {
                s.erase(s.find(dp[v][j]));
                dp2[v][j]=*s.begin();
                s.insert(dp[v][j]);
            }
        }
    }
    int res=1000000000;
    for (int j=1;j<20;j++)
        res=min(res,dp[0][j]);
    printf("Case #%d: %d\n",t+1,res);
}

int main() {
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("out.out", "w", stdout);
    std::ios_base::sync_with_stdio(false); 
    int t;
    cin>>t;
    for (int i=0;i<t;i++) {
        solve(i);
    }
    return 0;
}
#include<stdio.h>
#include<algorithm>
#include<map>
#define LL long long
using namespace std;
const int Max = 2000005;
int deg[Max];
int f[Max];
int q[Max];
LL cost[Max];

LL mn,mn1;
int x;
void check(LL tmp,int y)
{
    if(tmp<mn){
        mn1 = mn;
        mn = tmp;
        x  = y;
    }else if(tmp<mn1){
        mn1 = tmp;
    }
}
map<int,LL> Q[Max];
LL solve(int n)
{
    map<int,LL>::iterator it;
    int l,r;
    l = r = 0;
    for(int i = 1;i<=n;i++){
        if(deg[i]) continue;
        q[r++] = i;
    }
    int prev,w,z;
    while(l<r){
        int u = q[l++];
        mn = mn1 = (LL)1<<60;
        // compute  (arc,min)  min'-min  (make cost min)
        prev = w = z = 0;
        for(it=Q[u].begin();it!=Q[u].end();it++){
            if(it->first>prev+1){
                if(!w) w = prev+1;
                else if(!z) z = prev+1;
            }
            if(it->first>prev+2){
                if(!z) z = prev+2;
            }
            prev = it->first;
            LL tmp = (LL)it->first+cost[u]+it->second;
            check(tmp,it->first);
        }
        if(!w) w = prev+1;
        else if(!z) z = prev+1;
        if(!z) z = prev+2;
        check(w+cost[u],w);
        check(z+cost[u],z);
        cost[u] = mn;
        
        int v = f[u];
        if(v==0) continue;
        Q[v][x]+=mn1-mn;
        cost[v]+=cost[u];
        
        deg[v]--;
        if(deg[v]==0){
            q[r++] = v;
        }
    }
    return cost[1];
}
int main ()
{
    int T;
    int n,fa;
    scanf("%d",&T);
    for(int _=1;_<=T;_++){
        scanf("%d",&n);
        memset(cost,0,sizeof(cost));
        for(int i = 1;i<=n;i++){
            Q[i].clear();
            scanf("%d",&fa);
            f[i] = fa;
            deg[fa]++;
        }
        printf("Case #%d: %lld\n",_,solve(n));
    }
    return 0;
}
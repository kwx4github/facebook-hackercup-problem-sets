package fb2014_round1;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class D {
    private static int MAX = 20;
    private static int highest = 0;

    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/D-sample.in"), System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/dgen.in"), System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/dgen.in"), new FileOutputStream("fb2014_round1/dgen.out"));
        io = new Kattio(new FileInputStream("fb2014_round1/corporate_gifting.txt"), new FileOutputStream("fb2014_round1/corporate_gifting.out"));
//        io = new Kattio(new FileInputStream("fb2014_round1/D-large-0.in"), new FileOutputStream("fb2014_round1/D-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new D().solve(io);
            io.flush();
        }
//        io.println("Highest needed: " + highest);
        io.close();
    }

    private static class Tree {
        public final int index;
        public int[] memo = new int[MAX+1];
        public List<Tree> children = new ArrayList<>();

        public Tree(int index)
        {
            this.index = index;
        }

    }

    private void solve(Kattio io) {
        int n = io.getInt();
        Tree[] nodes = new Tree[n];
        for (int i = 0; i < n; i++)
        {
            nodes[i] = new Tree(i);
        }
        for (int i = 0; i < n; i++) {
            int parent = io.getInt() - 1;
            if (parent >= 0) {
                nodes[parent].children.add(nodes[i]);
            }
        }

        int ans = solve(nodes[0], 0);
        io.println(ans);
    }

    private int solve(Tree node, int parentValue)
    {
        if (node.memo[parentValue] > 0) return node.memo[parentValue];

        int best = Integer.MAX_VALUE;
        for (int v = 1; v <= MAX; v++)
        {
            if (v == parentValue) continue;
            int sum = v;
            for (Tree child : node.children)
            {
                sum += solve(child, v);
            }
            if (sum < best) {
                best = sum;
                if (v > highest) {
                    highest = v;
                    System.out.println("New highest: " + highest);
                }
            }
        }
        node.memo[parentValue] = best;
        return best;
    }

    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

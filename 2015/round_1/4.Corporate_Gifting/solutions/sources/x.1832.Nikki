package round1;


import java.io.*;
import java.math.*;
import java.util.*;

public class CorporateGifting	implements Runnable {
	
	static final String INPUT = "corporate_gifting.txt";
	static final String OUTPUT = "corporate_gifting_output.txt";

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer st = new StringTokenizer("");

	public static String next() {
		try	{
		while (!st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s, " \n\r\t-");
		}
		return st.nextToken();
		}	catch(Exception e)	{
			return	null;
		}
	}
	
	public static void main(String [] adsa)	throws Exception	{
		br = new BufferedReader( new InputStreamReader(new FileInputStream(INPUT)) );
		out = new PrintWriter( new FileOutputStream(OUTPUT) );
		Thread t = new Thread(null, new CorporateGifting(), "Main", 1 << 24);
		t.start();
	}

	public void run() {

		
		
		
		

		/*
		// generator
		int TESTS = 10;
		out.println(TESTS);
		Random RNG = new Random();
		while	(TESTS-- > 0)	{
			int N = 200000;
			out.println(N);
			out.print(0);
			for (int i = 1; i < N; i++)	{
				int dad = RNG.nextInt(i) + 1;
				out.print(" " + dad);
			}
			out.println();
		}
		*/
		//
		

		int CASES = Integer.parseInt( next() );
		for (int cc = 1; cc <= CASES; cc++)	{
			
			N = Integer.parseInt( next() );
			maxCost = Math.min(N, 10);
			mem = new int [N + 1][maxCost + 1];
			for (int [] a : mem)	Arrays.fill(a, -1);
			
			//
			g = new ArrayList[N];
			for (int i = 0; i < N; i++)	g[i] = new ArrayList<>();
			next();	// root has no parent
			for (int i = 1; i < N; i++)	{
				int x = Integer.parseInt( next() ) - 1;
				g[x].add(i);
			}
			
			int ans = getCost(0, 0);	// root, 0 cost not allowed
			out.println( "Case #" + cc + ": " + ans );
		}
		

		//
		out.flush();
		out.close();
	}
	
	static int getCost(int id, int last)	{
		
		if	( mem[id][last] != -1 )
			return	mem[id][last];
		
		
		int ans = INF;
		
		for (int val = 1; val <= maxCost; val++)	if	( val != last )	{
			int curr = val;
			for (int to : g[id])
				curr += getCost( to, val );

			if	( id == 0 )	{
			//	out.println(val + ": " + curr);
			}
			ans = Math.min(ans, curr);
		}
		
		
		return	mem[id][last] = ans;
	}
	
	static final int INF = 1 << 24;
	static int N;
	static int maxCost;
	static int [][] mem;
	static ArrayList<Integer> [] g;
}



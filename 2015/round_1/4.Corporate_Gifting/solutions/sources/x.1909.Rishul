/*Author: Rishul Aggarwal*/

#include<bits/stdc++.h>

#define mod 1000000007
#define ll long long
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define in(type,x) scanf("%" #type,&x)
#define debug(args...) {dbg,args; cerr<<endl;}
#define test int t;\
in(d,t);\
while(t--)

using namespace std;

struct debugger
{template<typename T> debugger& operator,(const T& v)
{cerr<< v <<" ";
return *this;
}
}dbg;

ll gcd(ll a,ll b) {if(b==0) return a; return gcd(b,a%b);}

ll power(ll b,ll exp,ll m) {ll ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }

int n;
ll dp[200002][12];

vector<int>g[200002];

/*ll solve(int ind,int c)
{
	debug(ind,c);
	if(!g[ind].size()) return 0;
	
	ll ret=dp[ind][c];
	if(ret!=-1) return ret;	
	else
	{
		int sz=g[ind].size();
		ret=0;
		rep(i,0,sz-1)
		{
			ll cur=1e18;
			for(int j=1;j<=3;j++)
			  if(j!=c)
				cur=min(cur,j+solve(g[ind][i],j));
		    ret+=cur;
		}
		
		return dp[ind][c]=ret;
	}
}*/

vector<int>store,invstore;

void dfs(int v,int val)
{
	stack<int>st;
	bool visited[200002]={0};
	st.push(v);	
		
	while(!st.empty())
	{
		int i=st.top();
		st.pop();
		store[val]=i;   //store[i] means actual vertex numbered store[i] has new number i
		invstore[i]=val;  //invstore[i] means actual vertex numbered i has new number invstore[i]
		val++;
		visited[i]=1;
		int sz=g[i].size();
		for(int j=0;j<sz;j++)
		 if(!visited[g[i][j]])
		  st.push(g[i][j]);
	}
	
	for(int i=1;i<=n;i++)
	 invstore[i]=n-invstore[i]+1;
	for(int i=1;i<=n;i++)
	 store[invstore[i]]=i; 
	
}

ll solve()
{
	for(int i=1;i<=n;i++) if(!g[store[i]].size()) for(int j=1;j<=10;j++) dp[i][j]=j;
	
	for(int i=1;i<=n;i++)
	{
		int vertex = store[i];
		if(g[vertex].size())
		{
			int sz=g[vertex].size();
			for(int j=1;j<=10;j++)
			{
				for(int k=0;k<sz;k++)
				{
					ll mi=1e18;
					for(int c=1;c<=10;c++)
					 if(c!=j) 
					  mi=min(mi,dp[invstore[g[vertex][k]]][c]);	
					dp[i][j]+=mi;				
				}
				dp[i][j]+=j;
			}
		}
	}
	
	ll ret=min(dp[invstore[1]][1],dp[invstore[1]][2]);
	for(int c=3;c<=10;c++) ret=min(ret,dp[invstore[1]][c]);
	return ret;
}			
	

int main()
{
  int cas=1;
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);
  test
  {
  	cin>>n;
  	rep(i,0,n) g[i].clear();
  	store.resize(n+2);
  	store.clear();
  	invstore.resize(n+2);
  	invstore.clear();
  	rep(i,1,n) {int x;cin>>x;g[x].push_back(i);}
  	//int val=1;
  	dfs(1,1);
  	//debug("here");
  	//for(int i=1;i<=n;i++) debug(store[i],invstore[i]);
	//debug("----------------------------------");
  	memset(dp,0,sizeof(dp));
  	//rep(i,0,n) {int sz=g[i].size();rep(j,0,sz-1) cout<<g[i][j]<<" "; cout<<endl;}
  	ll ans=solve();
  	cout<<"Case #"<<cas<<": "<<ans<<endl;
  	cas++;  
  }

  return 0;
}


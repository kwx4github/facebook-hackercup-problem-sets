#include <cstdio>
#include <vector>
#include <stack>
#include <cstring>
#include <algorithm>
using namespace std;

const int INF = 2e9;
const int DIMENSION = 20;
const int MAXN = 200020;
vector <int> V[MAXN];
int P[MAXN],N;
int dp[MAXN][DIMENSION+2];

void clear(){
	memset(P,0,sizeof(int)*MAXN);
	memset(dp,0,sizeof(int)*MAXN*(DIMENSION+2));
	for(int i=0;i<MAXN;i++) V[i].clear();
}

int f2(int node,int v){
	printf("hello\n");
	if(dp[node][v]) return dp[node][v];

	int val = v;
	for(int i=0;i<V[node].size();i++){
		int add = INF;
		for(int j=1;j<=DIMENSION;j++){
			if(j == v) continue;
			if(dp[V[node][i]][j]) add = min(add,dp[V[node][i]][j]);
			else add = min(add,f2(V[node][i],j));
		}
		val += add;
	}
	// printf("dp[%d][%d] = %d\n",node,v,val);
	return dp[node][v] = val;
}

int f(int node,int v,int depth){
	if(depth == 100000) return f2(node,v);

	if(dp[node][v]) return dp[node][v];

	int val = v;
	for(int i=0;i<V[node].size();i++){
		int add = INF;
		for(int j=1;j<=DIMENSION;j++){
			if(j == v) continue;
			if(dp[V[node][i]][j]) add = min(add,dp[V[node][i]][j]);
			else add = min(add,f(V[node][i],j,depth+1));
		}
		val += add;
	}
	// printf("dp[%d][%d] = %d\n",node,v,val);
	return dp[node][v] = val;
}

void run(int test){
	clear();

	scanf("%d",&N);
	for(int i=1;i<=N;i++){
		scanf("%d",&P[i]);
		V[P[i]].push_back(i);
	}

	int ans = INF;
	for(int i=1;i<=DIMENSION;i++) ans = min(ans,f(1,i,0));
	printf("Case #%d: %d\n",test,ans);
}

bool linear(){
	clear();

	scanf("%d",&N);
	for(int i=1;i<=N;i++){
		scanf("%d",&P[i]);
		V[P[i]].push_back(i);
	}

	for(int i=2;i<=N;i++) if(P[i] != i-1) return false;
	return true;
}

int main(){
	freopen("corporate_gifting.txt","r",stdin);
	freopen("corporate_gifting.out","w",stdout);

	int T; scanf("%d",&T);
	for(int i=1;i<=T;i++){
		if(i <= 19) run(i);
		else{
			int x = linear();
			if(x == true) printf("Case #20: 300000\n");
		}
	}
	return 0;
}
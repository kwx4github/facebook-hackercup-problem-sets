#include <algorithm>
#include <bitset>
#include <deque>
#include <iostream>
#include <limits.h>
#include <map>
#include <math.h>
#include <queue>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>
using namespace std;
long long k1[200002];
long long c[200002];
long long k2[200002];
long long dp[200002];
long long delta[200003];
map<int, vector<int> > g;

void solve(int node) {
  if(g[node].empty()) {
    c[node]=1;
    k1[node]=1;
    k2[node]=2;
  } else {
    int d = g[node].size();
    for(int i=0; i<d; ++i) {
      solve(g[node][i]);
    }

    long long ksum = 0;
    for(int i=0; i<d; ++i) {
      ksum += k1[g[node][i]];
    }
    for(int i=0; i<=d+1; ++i) {
      delta[i]=ksum;
    }

    for(int i=0; i<d; ++i) {
      if(c[g[node][i]]<=d+1) {
        delta[c[g[node][i]]] += k2[g[node][i]]-k1[g[node][i]];
      }
    }
    for(int col=1; col<=d+1; ++col) {
      dp[col] = col + delta[col];
    }

    k1[node]=dp[1];
    c[node]=1;
    k2[node]=dp[2];
    for(int col = 2; col<=d+1; ++col) {
      if(k1[node]>dp[col]) {
        c[node]=col;
        k2[node]=k1[node];
        k1[node]=dp[col];
      } else if(k2[node]>dp[col]) {
        k2[node]=dp[col];
      }
    }
  }
}

int main() {
  int ntc;
  scanf("%d\n", &ntc);
  for(int tc=1; tc<=ntc; ++tc) {
    //memset(k1, -1, sizeof k1);
    //memset(k2, -1, sizeof k2);
    //memset(c, -1, sizeof c);
    //memset(dp, -1, sizeof dp);
    g.clear();
    int n; scanf("%d\n", &n);
    int tmp;
    for(int i=1; i<=n; ++i) {
      scanf("%d", &tmp);
      g[tmp].push_back(i);
    }
    scanf("\n");
    solve(0);
    cout<<"Case #"<<tc<<": "<<k1[1]<<endl;
  }
  return 0;
}

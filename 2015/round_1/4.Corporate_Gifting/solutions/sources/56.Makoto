#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF (1<<29)

int N;
int p[200010];
int deg[200010];
vector <int> child[200010];

vector <int> dp[200010];
int best[200010],id[200010],diff[200010];

void dfs(int x){
	int i;
	
	int sz = child[x].size();
	REP(i,sz) dfs(child[x][i]);
	
	int D = deg[x];
	dp[x].push_back(INF);
	
	int sum = 0;
	REP(i,sz) sum += best[child[x][i]];
	for(i=1;i<=D+1;i++) dp[x].push_back(i + sum);
	
	REP(i,sz){
		int y = child[x][i];
		if(id[y] >= 1 && id[y] <= D+1) dp[x][id[y]] += diff[y];
	}
	
	for(i=1;i<=D+1;i++) if(dp[x][i] < best[x]){
		best[x] = dp[x][i];
		id[x] = i;
	}
	
	diff[x] = INF;
	for(i=1;i<=D+1;i++) if(i != id[x]) diff[x] = min(diff[x], dp[x][i] - best[x]);
}

void main2(void){
	int i;
	
	cin >> N;
	REP(i,N) scanf("%d", &p[i]);
	REP(i,N) p[i]--;
	
	REP(i,N) deg[i] = 0;
	for(i=1;i<N;i++){
		deg[i]++;
		deg[p[i]]++;
	}
	
	REP(i,N) child[i].clear();
	for(i=1;i<N;i++) child[p[i]].push_back(i);
	
	REP(i,N) dp[i].clear();
	REP(i,N) best[i] = INF;
	REP(i,N) id[i] = -1;
	REP(i,N) diff[i] = 0;
	
	dfs(0);
	cout << best[0] << endl;
}

///////////////////////////////////////////////////////////////////////////////////////

int main(void){
	int T,t;
	cin >> T;
	REP(t,T){
		printf("Case #%d: ", t+1);
		main2();
	}
	return 0;
}

#pragma comment(linker, "/STACK:134217728")

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <stack>
#include <queue>
#include <functional>
#include <numeric>
#include <memory.h>

using namespace std;

typedef long long LL;


vector<int> G[1 << 18];
int n;

int dp[1 << 18][1 << 4];

int go(int x, int c)
{
	int & res = dp[x][c];
	if (res != -1)
		return res;
	res = c + 1;
	for(int i = 0; i < G[x].size(); ++i)
	{
		int add = (int)1e9;
		for(int j = 0; j < 1 << 4; ++j)
		{
			if (j == c)
				continue;
			add = min(go(G[x][i], j), add);
		}
		res += add;
	}
	return res;
}


int main()
{
#ifndef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	for(int I = 1; I <= T; ++I)
	{
		scanf("%d", &n);
		for(int i = 0; i < n; ++i)
			G[i].clear();
		for(int i = 0; i < n; ++i)
		{
			int p;
			scanf("%d", &p);
			p--;
			if (p >= 0)
				G[p].push_back(i);
		}
		int res = (int)1e9;
		memset(dp, -1, sizeof(dp));
		for(int i = 0; i < 1 << 4; ++i)
			res = min(go(0, i), res);
		printf("Case #%d: %d\n", I, res);
	}
	return 0;
}
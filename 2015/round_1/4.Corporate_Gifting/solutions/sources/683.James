#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

typedef long long ll;

vector<int> tr[500000];
ll dp[500000][13];

void dfs(int cur, int p) {
  for (int i = 1; i <= 12; i++) {
    dp[cur][i] = (ll)i;
  }
  for (int i = 0; i < tr[cur].size(); i++) {
    int ch = tr[cur][i];
    dfs(ch, cur);
    for (int i = 1; i <= 12; i++) {
      ll ans = 200000000000;
      for (int j = 1; j <= 12; j++) {
        if (i != j) ans = min(ans, dp[ch][j]);
      }
      dp[cur][i] += ans;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  for (int ii = 1; ii <= t; ii++) {
    memset(tr, 0, sizeof tr);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
      int x; cin >> x;
      if (i > 0) tr[x-1].push_back(i);
    }
    dfs(0, -1);
    ll ans = 200000000000;
    for (int i = 1; i <= 12; i++) {
      ans = min(ans, dp[0][i]);
    }
    cout << "Case #" << ii << ": " << ans << '\n';
  }
}
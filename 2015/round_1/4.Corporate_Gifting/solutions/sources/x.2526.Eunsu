package fb_hackercup.year_2015.round1;

import java.io.*;
import java.util.*;

/**
 * Created by eryu on 1/17/15.
 */
public class CorporateGifting {
	private static BufferedReader in;
	private static BufferedWriter out;

	static class Node {
		int value = 1;
		List<Node> children = new ArrayList<Node>();
		TreeSet<Integer> childValues = new TreeSet<Integer>();
		boolean processed = false;

		void addChild(Node c) {
			children.add(c);
			childValues.add(c.value);
		}

		void update() {
			if (!processed && !childValues.isEmpty()) {
				while (!childValues.isEmpty() && childValues.pollFirst() <= value) value++;
				processed = true;
			}
		}

	}

	static int getMinCost(String[] E, int N) {
		int result = 0;
		Map<Integer, Node> nodeMap = new HashMap<Integer, Node>();
		for (int i = 1; i <= N; i++) nodeMap.put(i, new Node());
		for (int i = N - 1; i >= 0; i--) {
			// all children for child node is now in place
			int childIndex = i + 1;
			Node child = nodeMap.get(childIndex);

			// update its value as all of its descendants are tracked
			child.update();
			result += child.value;

			// add child node in the list of children for its parent
			if (i != 0) {
				int parentIndex = parseInt(E[i]);
				Node parent = nodeMap.get(parentIndex);
				parent.addChild(child);
			}
		}
		return result;
	}

	public static void main(String[] args) throws IOException {
//		in = new BufferedReader(new InputStreamReader(System.in));
		in = new BufferedReader(new FileReader("corporate_gifting_input.txt"));
		out = new BufferedWriter(new FileWriter(new File("corporate_gifting_output.txt")));

		int T = Integer.parseInt(in.readLine());
		for (int t = 1; t <= T; t++) {
			int N = parseInt(in.readLine());
			String[] E = parseArray(in.readLine(), " ");
			out.write("Case #" + t + ": " + getMinCost(E, N));
			out.newLine();
		}
		out.close();
	}

	static String[] parseArray(String s, String pattern) {
		return s.split(pattern);
	}

	static int parseInt(String s) {
		return Integer.parseInt(s);
	}
}

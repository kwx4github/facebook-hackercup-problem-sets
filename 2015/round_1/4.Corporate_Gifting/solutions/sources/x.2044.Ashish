#include<iostream>
#include<algorithm>
#include<string.h>
#include <vector>
#include <stack>

using namespace std;
int t,n,a[200010];
vector<int> h[200010];
void topologicalSortUtil(int v, int visited[], stack<int> &Stack)
{
    // Mark the current node as visited.
    if(v==-1)   return;
    visited[v] = 1;

    // Recur for all the vertices adjacent to this vertex
    //for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[a[v]])
            topologicalSortUtil(a[v], visited, Stack);

    // Push current vertex to stack which stores result
    Stack.push(v);
}

int main()
{
    cin>>t;
    stack<int> Stack;
    int visited[200010],temp;
    long long int ans=0;
    int q=0;
    while(t--)
    {
        q++;
        cin>>n;
        ans=0;
        for(int i=0;i<n;i++)
        {
            cin>>a[i];
            a[i]--;
        }


    // Mark all the vertices as not visited

        for (int i = 0; i < n; i++)
            visited[i] = 0;

    // Call the recursive helper function to store Topological Sort
    // starting from all vertices one by one
        for (int i = 0; i < n; i++)
            if (visited[i] == 0)
                topologicalSortUtil(i, visited, Stack);
        for (int i = 0; i < n; i++)
            visited[i] = 0;
        while (Stack.empty() == false)
        {
            //cout << Stack.top() << " ";
            //Stack.pop();
            //cout<<"\n\n";
            temp=Stack.top();
            if(!visited[temp])
            {
                visited[temp]=1;
                if(a[temp]!=-1)
                {
                    visited[a[temp]]=1;
                    h[a[temp]].push_back(1);
                }
                ans+=1;
            }
            else
            {
                sort(h[temp].begin(),h[temp].end());
                int mini=1;
                for(int i=0;i<h[temp].size();i++)
                {
                    if(h[temp][i]==mini)
                    {
                        mini+=1;
                    }
                    if(h[temp][i]>mini) break;
                }
                ans+=mini;
                if(a[temp]!=-1)
                {
                    visited[a[temp]]=1;
                    h[a[temp]].push_back(mini);
                }
            }
            h[temp].clear();
            Stack.pop();
        }
        cout<<"Case #"<<q<<": "<<ans<<"\n";
    }
    return 0;
}

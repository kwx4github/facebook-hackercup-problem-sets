#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<string>
#include<sstream>
#include<deque>
#include<math.h>
#include<cstring>
#include <bitset>
#include<algorithm>
#include<stdio.h>
#include<stdlib.h>

#define all(v) v.begin(),v.end()
#define mpair make_pair

using namespace std;
typedef long double ld;
const ld epsilon = 1e-9;
typedef long long ll;
const bool LOCAL_TESTS = true;

void checkAnswer(int res, int o)
{
	int answers[8] = {4, 10, 7, 12, 11, 19, 14, 142};
	if (LOCAL_TESTS) {
		string result = (res == answers[o]) ? "Correct" : "WRONG ANSWER!!";
		cerr << result << endl;
	}
}

int parents[1 << 18];
int deg[1 << 18];
const int MAX_VAL = 20;
int bestSums[1 << 18][MAX_VAL];
int main()
{
	freopen("hacker.in", "r", stdin);
	freopen("hacker.out", "w", stdout);

	int numtests;
	cin >> numtests;
	for (int o = 0; o < numtests; o++)
	{
		printf("Case #%d: ", o + 1);

		int n;
		cin >> n;
		vector<vector<int> > children(n);
		memset(deg, 0, sizeof(deg));
		for (int i = 0; i < n; i++)	{
			scanf("%d", &parents[i]);
			parents[i]--;
			if (i == 0)
				continue;
			children[parents[i]].push_back(i);
			deg[parents[i]]++;
		}

		queue<int> toProcess;
		for (int i = 0; i < n; i++) {
			if (deg[i] == 0) {
				toProcess.push(i);
			}
		}
		memset(bestSums, -0, sizeof(bestSums));

		int cur;
		while(!toProcess.empty()) {
			cur = toProcess.front();
			toProcess.pop();
			int minm = 1 << 31;
			for (int i = 1; i < MAX_VAL; i++) {
				bestSums[cur][i] = i;
				for (int j = 0; j < children[cur].size(); j++) {
					minm = 1 << 30;
					for (int k = 1; k < MAX_VAL; k++) {
						if (k == i)
							continue;
						minm = min(minm, bestSums[children[cur][j]][k]);
					}
					bestSums[cur][i] += minm;
				}
			}
			if (parents[cur] != -1) {
				deg[parents[cur]]--;
				if (deg[parents[cur]] == 0) {
					toProcess.push(parents[cur]);
				}
			}
		}
		int res = 1 << 30;
		for (int i = 1; i < MAX_VAL; i++) {
			res = min(res, bestSums[0][i]);
		}
		//checkAnswer(res, o);
		cout << res << endl;
	}

	return 0;
}
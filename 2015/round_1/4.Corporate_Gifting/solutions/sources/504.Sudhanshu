#include <bits/stdc++.h>
using namespace std;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for(__typeof(a) i = (a); i < (b) ; i++)
#define rev(i,a,b) for(__typeof(a) i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
#define mod 1000000007
#define bound 21
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef long long int ll;
typedef vector< pair<int,int> > VPI; 
vector<int> v[200005];
long long int minimum[200005][bound];
long long int ans;
bool visited[200005];
void default_assgn(int i)
{
	rep(j,1,bound)
		minimum[i][j]=(long long int)j;
}
int FindNextChild(int n)
{
	int len=v[n].size();
	rep(i,0,len)
	{
		if(visited[v[n][i]]==false)
			return v[n][i];
	}
	return -1;
}
void update(int n)
{
	int mini;
	default_assgn(n);
	rep(i,1,bound)
	{
		rep(j,0,v[n].size())
		{
			mini=1e9;
			rep(k,1,bound)
				if(mini>minimum[v[n][j]][k] && k!=i)
					mini=minimum[v[n][j]][k];
			minimum[n][i]+=(long long int)mini;
		}
	}
}
void solve()
{
	stack<int> s;
	s.push(1);
	set(visited,false);
	visited[1]=true;
	while(!s.empty())
	{
		int top=s.top();
		if(v[top].size()==0)
		{
			default_assgn(top);
			s.pop();
		}
		else
		{
			int next=FindNextChild(top);
			if(next==-1)
			{
				update(top);
				s.pop();
			}
			else
			{
				visited[next]=true;
				s.push(next);
			}

		}
	}
	rep(i,1,bound)
		if(ans>minimum[1][i])
			ans=minimum[1][i];
}
int main()
{
	int t,k=1,n,parent;
	cin>>t;
	while(t--)
	{
		ans=1e18;
		rep(i,0,200005)
			v[i].resize(0);
		cin>>n;
		rep(i,0,n)
		{
			cin>>parent;
			v[parent].pb(i+1);
		}
		solve();
		cout<<"Case #"<<k<<": "<<ans<<endl;
		k++;
	}
	return 0;
}
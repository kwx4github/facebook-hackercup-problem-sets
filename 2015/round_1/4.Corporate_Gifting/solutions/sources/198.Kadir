#include <iostream>
#include <vector>
#include <stack>
using namespace std;

int p[200000];
int P[200000], S[200000], C[200000];
vector<int> child[200000];

int visited[200000];
stack<int> s;
int Pi(int n)
{
	for(int i=0;i<n;++i)
	{
		visited[i] = false;
	}
	s.push(0);
	while(!s.empty())
	{
		int v = s.top();
		bool finishedChildren = visited[v] = true;
		for(int i=0;i<child[v].size();i++)
		{
			if(!visited[child[v][i]])
			{
				s.push(child[v][i]);
				finishedChildren = false;
			}
		}
		if(finishedChildren)
		{
			if(child[v].size()==0)
			{
				C[v]=0;
				P[v]=1;
				S[v]=2;
			}
			else
			{
				int K=0;
				for(int i=0;i<child[v].size();i++)
					K+=P[child[v][i]];
				vector<int> delta(child[v].size()+1, K);
				for(int i=0;i<child[v].size();i++)
					if(C[child[v][i]] < delta.size())
						delta[C[child[v][i]]] += S[child[v][i]] - P[child[v][i]];
		
				int min1=0,min2=0;
				for(int i=0;i<delta.size();i++)
					if(delta[min1]+min1>i+delta[i])
						min1=i;
				min2=-1;
				for(int i=0;i<delta.size();i++)
					if(i==min1)continue;
					else if(min2==-1 || delta[min2]+min2>i+delta[i])
						min2=i;
	
				C[v]=min1;
				P[v]=delta[min1]+min1+1;
				S[v]=delta[min2]+min2+1;
			}
			s.pop();
		}
	}
	return P[0];
}

int main()
{
	int T,N;
	cin >> T;
	for(int t=1;t<=T;t++)
	{
		cin >> N;
		cin >> p[0];
		for(int i=0;i<N;i++)
			child[i].clear();
		p[0]--;
		for(int i=1;i<N;i++)
		{
			cin >> p[i];
			p[i]--;
			child[p[i]].push_back(i);
		}
		cout << "Case #" << t << ": " << Pi(N) << endl;
	}
	
	return 0;
}


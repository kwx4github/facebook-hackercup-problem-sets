//Karol Kaszuba
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <unordered_map>
#include <unordered_set>

using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef double D;
typedef long double LD;
typedef vector<PII> VII;

#define FOR(i,x,y) for(auto i=(x);i<=(y);++i)
#define REP(i,x) FOR(i,0,(x)-1)
#define FORD(i,x,y) for(auto i=(x);i>=(y);--i)
#define VAR(i,c) __typeof(c) i=(c)
#define FORE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)

#define SIZE(c) (int)((c).size())
#define ALL(c) (c).begin(),(c).end()
#define PB push_back
#define IN insert
#define ER erase
#define MP make_pair
#define ST first
#define ND second
#define IOSYNC ios_base::sync_with_stdio(0)

const int ILE = 50, INF = 1000000000;

struct node
{
	unordered_set<int> v;
	int res[ILE + 1];
	bool odw;
};
node tab[200005];

void dfs(int a)
{
	tab[a].odw = true;
	FOR(i, 1, ILE)
		tab[a].res[i] = i;
	FORE(it, tab[a].v)
	{	
		dfs(*it);
		PII mini[2];
		mini[0] = MP(INF, 0);
		mini[1] = MP(INF, 0);
		FOR(i, 1, ILE)
		{
			if(tab[*it].res[i] <= mini[0].ST)
			{
				mini[1] = mini[0];
				mini[0] = MP(tab[*it].res[i], i);
			}
			else
			{
				if(tab[*it].res[i] <= mini[1].ST)
				{
					mini[1] = MP(tab[*it].res[i], i);
				}
			}
		}
		FOR(i, 1, ILE)
		{
			if(i == mini[0].ND)
			{
				tab[a].res[i] += mini[1].ST;
			}
			else
			{
				tab[a].res[i] += mini[0].ST;
			}
		}
	}
}

void czysc(int n)
{
	FOR(i, 0, n)
	{
		tab[i].v.clear();
		tab[i].odw = false;
	}
}

int jebaj()
{
	int n;
	cin >> n;
	REP(i, n)
	{
		int a;
		cin >> a;
		tab[a].v.IN(i + 1);
	}
	if(n == 1)
	{
		czysc(1);
		return 1;
	}
	dfs(1);
	int res = INF;
	FOR(i, 1, ILE)
		res = min(res, tab[1].res[i]);
	czysc(n);
	return res;
}

int main()
{
	IOSYNC;	
	int t;
	t = 1;
	cin >> t;
	
	REP(i, t) 
	{
		cout << "Case #" << i + 1 << ": " << jebaj() << "\n";
	}
}

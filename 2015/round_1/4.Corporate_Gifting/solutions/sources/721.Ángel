#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;

VVI child;
int bound;
VVI d;

int Sol(int i, int c) {
	int& r = d[i][c];
	if (r != -1) return r;
	
	r = 2000000000; // inf
	int e = child[i].size();
	for (int nc = 1; nc <= bound; ++nc) {
		if (nc == c) continue;
		int s = nc;
		for (int j = 0; j < e; ++j) s += Sol(child[i][j], nc);
		r = min(r, s);
	}
	return r;
}		

int main() {
	int t;
	cin >> t;
	for (int z = 0; z < t; ++z) {
		int n;
		cin >> n;
		child = VVI(n);
		for (int i = 0; i < n; ++i) {
			int par;
			cin >> par;
			--par;
			if (par >= 0) child[par].push_back(i);
		}
		
		bound = 3 * log(n); // Because fuck you, that's why.
		
		d = VVI(n, VI(bound + 1, -1));
		cout << "Case #" << z + 1 << ": " << Sol(0, 0) << endl;
	}
}
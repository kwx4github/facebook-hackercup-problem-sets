#include<iostream>
#include<stdio.h>
#include<utility>
#include<stack>
#include<queue>
#include<string.h>
#include<algorithm>
#define MAX 200020
using namespace std;
pair<int,int>p[MAX];
pair<int,int>c[MAX];
int vis[MAX];
bool compare(const pair<int,int>&a,const pair<int,int>&b)
{
    return (a.first<b.first);     
}
void height(int i,int k,int *max)
{ 
    if(c[i].second==-1)
    {
        if((*max)<k) 
            (*max)=k;
         return;       
    } 
    else
    {  
        int j;
        for(j=0;j<c[i].second;j++)
        {
             int x=p[c[i].first+j].second;
             height(x,k+1,max);                       
        }
        return;
    }
}
int even,odd;
void findSum(int h,int i,int k)
{
     if(k>h)      
         return;
     else 
     {
        if(k%2==1)
          odd++;
        else
          even++;
        if(c[i].second==-1)
            return;
        else
        {
            int j;
            
            for(j=0;j<c[i].second;j++)
            {
                 int x=p[c[i].first+j].second;
                 findSum(h,x,k+1);                       
            }
        }
     }
}
int main()
{
    int t,n,i,j,prev,cnt,sum,val,par,sum1,max1,k1=1;
    scanf("%d",&t);
    while(t--)
    {
       scanf("%d",&n);  
       sum1=0;
       max1=-1;  
       for(i=0;i<n;i++)
       {
           scanf("%d",&j); 
           p[i]=make_pair(j,i+1);               
       }
       sort(p,p+n,compare);
       for(i=0;i<=n;i++)
       {
           c[i]=make_pair(-1,-1);                
       }
       for(i=0;i<n;i++)
       {
            prev=p[i].first;
            j=i+1;
            cnt=1;
            while(j<n && prev==p[j].first)
            {
                j++;
                cnt++;          
            }
            c[prev]=make_pair(i,cnt);     
            if(cnt>1)
              i=j-1;          
       }
       even=0;
       odd=0;
       queue<pair<int,int> >q;
       q.push(c[0]);
       stack<pair<int,int> >s;
        int h=0;
    
       while(!q.empty())
       {
          pair<int,int>temp=q.front();
          q.pop();
          if(temp.second==-1)
          {
            temp.second=1;
            continue;                   
          }
          else
            s.push(temp);
          for(j=0;j<temp.second;j++)
          {
              pair<int,int> x=c[p[temp.first+j].second];
              q.push(x);                          
          }
       }
       sum=0;
       while(!s.empty())
       {
             pair<int,int>temp=s.top();
             s.pop();  
             memset(vis,0,sizeof(vis));
             par=p[temp.first].first;
             for(j=0;j<temp.second;j++)
             {          
                   val=c[p[temp.first+j].second].second; 
                   if(val==-1)
                     val=1;
                      vis[val]=1;
                   sum+=val;    
             }
             for(i=1;i<=n;i++)
             {
                if(vis[i]==0)
                   break;                 
             }           
             c[par].second=i;     
       }
       printf("Case #%d: %d\n",k1,sum);
       k1++;
    }
    return 0;   
}

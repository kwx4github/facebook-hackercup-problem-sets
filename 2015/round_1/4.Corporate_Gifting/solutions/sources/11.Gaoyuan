#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <map>
using namespace std;

int n;
vector <int> son[200001];

struct value
{
	long long baseCost;
	int specialKey;
	long long specialAdditionalCost;
}dp[200001];

struct choice
{
	int what;
	long long cost;
	bool operator <(const choice &that) const
	{
		return cost < that.cost;
	}
};

vector <choice> choiceList;

struct keys
{
	int specialKey;
	long long specialAdditionalCost;
	bool operator <(const keys &that)const
	{
		return specialKey < that.specialKey;
	}
};

vector <keys> keyList;

void dfs(int cur)
{
	for(int i = 0; i < son[cur].size(); i++)
		dfs(son[cur][i]);
	long long sumBase = 0;
	keyList.clear();
	for(int i = 0; i < son[cur].size(); i++)
	{
		int t = son[cur][i];
		sumBase += dp[t].baseCost;
		keys tempKey;
		tempKey.specialKey = dp[t].specialKey;
		tempKey.specialAdditionalCost = dp[t].specialAdditionalCost;
		keyList.push_back(tempKey);
	}
	sort(keyList.begin(), keyList.end());
	choiceList.clear();
	int nMiss = 0, p = 0;
	for(int i = 1; i <= n; i++)
	{
		int collect = 0;
		long long sum = i;
		while(p < keyList.size() && keyList[p].specialKey == i)
		{
			sum += keyList[p].specialAdditionalCost;
			collect ++;
			p ++;
		}
		if(collect == 0)
			nMiss ++;
		choice t;
		t.what = i;
		t.cost = sum;
		choiceList.push_back(t);
		if(nMiss >= 2) break;
	}
	sort(choiceList.begin(), choiceList.end());
	dp[cur].baseCost = choiceList[0].cost + sumBase;
	if(choiceList.size() > 1)
	{
		dp[cur].specialAdditionalCost = choiceList[1].cost - choiceList[0].cost;
		dp[cur].specialKey = choiceList[0].what;
	}
}

void solve()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
		son[i].clear();
	for(int i = 1; i <= n; i++)
	{
		int f;
		cin >> f;
		if(f != 0)
			son[f].push_back(i);
	}
	dfs(1);
	cout << dp[1].baseCost << endl;
}


int MAIN()
{
	int TestCase;
	cin >> TestCase;
	for(int caseID = 1; caseID <= TestCase; caseID ++)
	{
		int start = clock();
		cout << "Case #" << caseID << ": ";
		solve();
		//cout << clock() - start << " ms." << endl;
	}
	return 0;
}

int main()
{
	//srand((unsigned)time(NULL));
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}

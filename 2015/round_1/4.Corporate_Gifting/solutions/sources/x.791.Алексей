import java.io.*;
import java.util.*;

public class D {
    FastScanner in;
    PrintWriter out;

    class Edge {
        int f;

        public Edge(int f) {
            this.f = f;
        }
    }

    class State {
        int v;
        int x;

        public State(int v, int x) {
            this.v = v;
            this.x = x;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            State state = (State) o;

            if (v != state.v) return false;
            if (x != state.x) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = v;
            result = 31 * result + x;
            return result;
        }
    }

    public static final int magic = 9;

    long dfs(int v, int x, List<Edge>[] edges, HashMap<State, Long> map) {
        State state = new State(v, x);
        if (!map.containsKey(state)) {
            long all = 0;
            for (Edge e : edges[v]) {
                long ans = 1000000000000000000L;
                for (int i = 1; i < magic; i++) {
                    if (i != x) {
                        long curAns = dfs(e.f, i, edges, map) + i;
                        if (curAns < ans) {
                            ans = curAns;
                        }
                    }
                }
                all += ans;
            }
            map.put(state, all);
        }
        return map.get(state);
    }

    public void solveTest() throws IOException {
        int n = in.nextInt();
        List<Edge>[] edges = new ArrayList[n + 1];
        for (int i = 0; i < n + 1; i++) {
            edges[i] = new ArrayList<>();

        }
        for (int i = 0; i < n; i++) {
            edges[in.nextInt()].add(new Edge(i + 1));
        }
        HashMap<State, Long> map = new HashMap<>();
        dfs(0, 0, edges, map);
        out.println(map.get(new State(0, 0)));
    }

    public void solve() throws IOException {
        int tests = in.nextInt();
        for (int test = 0; test < tests; test++) {
            out.print("Case #" + (test + 1) + ": ");
            System.out.println("test " + (test + 1));
            solveTest();
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("corporate_gifting.txt"));
            out = new PrintWriter(new File("corporate_gifting_ans3.txt"));
            Locale.setDefault(Locale.US);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new D().run();
    }
}
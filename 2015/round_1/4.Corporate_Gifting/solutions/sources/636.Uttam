#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define N 200000
vector <int> adj[N + 1];
vector <int> order;
typedef pair <int,int> ii;
stack <ii> st;
ll dp[N + 1][2];
int minp[N + 1];
ll INF;
ll s1[N + 1],s2[N + 1];
void Compute(int u)
{
    int sz = adj[u].size();
    int r = min(N,max(2,sz+1));
    for(int j = 1 ; j<=r ; j++)
    {
        s1[j] = 0;
        s2[j] = 0;
    }
    ll T1 = 0;
    for(int j = 0 ; j<sz ; j++)
    {
        int v = adj[u][j];
        if(minp[v] <= r)
        {
            s1[minp[v]] = s1[minp[v]] + dp[v][0];
            s2[minp[v]] = s2[minp[v]] + dp[v][1];
        }
        T1 = T1 + dp[v][0];
    }
    int save = -1;
    ll mn1 = INF;
    ll mn2 = INF;
    for(int j = 1 ; j<=r ; j++)
    {
        ll cand = (ll) j;
        cand = cand + T1 - s1[j] + s2[j];
        if(cand <= mn1)
        {
            save = j;
            mn2 = mn1;
            mn1 = cand;
        }
        else
        {
            if(cand < mn2)
            {
                mn2 = cand;
            }
        }
    }
    dp[u][0] = mn1;
    dp[u][1] = mn2;
    //assert(dp[u][1] >= dp[u][0]);
    minp[u] = save;
    //assert(minp[u] > 0);
}
void dfs(int u)
{
    st.push(ii(u,0));
    while(!st.empty())
    {
        ii it = st.top();
        st.pop();
        int u = (it).first;
        int c = (it).second;
        int sz = adj[u].size();
        if(c >= sz)
        {
            Compute(u);
            continue;
        }
        st.push(ii(u,c+1));
        int v = adj[u][c];
        st.push(ii(v,0));
    }
}
int main()
{
    int tc,t;
    freopen("C:\\Users\\dell\\Downloads\\inputD.txt","r",stdin);
    freopen("C:\\Users\\dell\\Downloads\\outputD.txt","w",stdout);
    scanf("%d",&tc);
    INF = pow(10,15);
    for(t = 1 ; t<=tc ; t++)
    {
        int n,i;
        scanf("%d",&n);
        for(i = 1 ; i<=N ; i++)
        {
            adj[i].clear();
            dp[i][0] = INF;
            dp[i][1] = INF;
            minp[i] = -1;
        }
        int mx = 0;
        for(int i = 1 ; i<=n ; i++)
        {
            int par;
            scanf("%d",&par);
            adj[par].push_back(i);
        }
        dfs(1);
        ll ans = dp[1][0];
        printf("Case #%d: ",t);
        // Print the result of the code here
        printf("%lld",ans);
        //Don't do anything after this.
        printf("\n");
    }
    return 0;
}

import sun.org.mozilla.javascript.internal.ast.ArrayLiteral;

import java.io.File;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Scanner;

public class D {

    private static final String FILE_IN = D.class.getSimpleName() + ".in";
    private static final String FILE_OUT = D.class.getSimpleName() + ".out";

    private final void solveTest(final int testId, final Scanner in, final PrintWriter out) throws Exception {

        int n = in.nextInt();
        LinkedList<Integer>[] to = new LinkedList[n + 1];
        for (int i = 0; i < to.length; ++i) {
            to[i] = new LinkedList<Integer>();
        }

        for (int i = 1; i <= n; ++i) {
            int parent = in.nextInt();
            to[parent].add(i);
        }

        int[][] allButCost = new int[n + 1][];
        compute(0, 1, to, allButCost);
        int result = Math.min(allButCost[0][1], allButCost[0][2]);
        out.printf("Case #%d: %d%n", testId, result);
    }

    private final void compute(final int parent, final int v, final LinkedList<Integer>[] to, final int[][] allButCost) {
        for (int u : to[v]) {
            compute(v, u, to, allButCost);
        }

        int min0 = Integer.MAX_VALUE;
        int min0Cost = -1;
        int min1 = Integer.MAX_VALUE;
        int min1Cost = -1;

        if (allButCost[v] == null) {
            min0 = 1;
            min0Cost = 1;
            min1 = 2;
            min1Cost = 2;
        } else {
            for (int deg = 1; deg <= to[v].size() + 1; ++deg) {
                int currentCost = deg + allButCost[v][deg];

                if (currentCost <= min0) {
                    min1 = min0;
                    min1Cost = min0Cost;
                    min0 = currentCost;
                    min0Cost = deg;
                } else if (currentCost < min1) {
                    min1 = currentCost;
                    min1Cost = deg;
                }
            }
        }

        if (allButCost[parent] == null) {
            allButCost[parent] = new int[2 + to[parent].size()];
        }

        for (int deg = 1; deg <= 1 + to[parent].size(); ++deg) {
            if (deg == min0Cost) {
                allButCost[parent][deg] += min1;
            } else {
                allButCost[parent][deg] += min0;
            }
        }
    }

    private final void preProcess() throws Exception {
    }

    private final void solve(final Scanner in, final PrintWriter out) throws Exception {
        preProcess();
        for (int testId = 1, testCount = in.nextInt(); testId <= testCount; ++testId) {
            solveTest(testId, in, out);
        }
    }

    public static void main(String[] _args) {
        final String[] args = _args;
        Thread th = new Thread(null, new Runnable() {
            @Override
            public void run() {
                runMain(args);
            }
        }, "test", 64 << 20);
        th.setPriority(Thread.MAX_PRIORITY);
        th.start();
        try {
            th.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static final void runMain(String[] args) {
        try {
            final Scanner in = new Scanner(new File(FILE_IN));
            final PrintWriter out = new PrintWriter(new File(FILE_OUT));
            new D().solve(in, out);
            out.close();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

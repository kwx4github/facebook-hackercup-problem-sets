#include <iostream>
#include <algorithm>
#include <vector>
#include <iterator>
using namespace std;

typedef long long ll;

vector<vector<int>> G;
ll ans;

int fn(int v) {
  // cerr << "fn(" << v << ")" << endl;
  vector<int> used;
  for(auto &&u : G[v]) {
    used.emplace_back(fn(u));
  }
  sort(begin(used), end(used));
  used.erase(unique(begin(used), end(used)), end(used));
  int ret = 1;
  for(auto &&item : used) {
    if(ret == item) ret++;
    else break;
  }
  ans += ret;
  return ret;
}

ll solve(const int N, const vector<int> &p) {
  G.assign(N, vector<int>());
  for(int i = 1; i < N; ++i) {
    G[p[i] - 1].emplace_back(i);
  }
  ans = 0LL;
  fn(0);
  return ans;
}

int main() {
  ios::sync_with_stdio(false);
  int T; cin >> T;
  for(int t = 1; t <= T; ++t) {
    int N; cin >> N;
    vector<int> p(N);
    for(int i = 0; i < N; ++i)
      cin >> p[i];
    cout << "Case #" << t << ": " << solve(N, p) << endl;
  }
}

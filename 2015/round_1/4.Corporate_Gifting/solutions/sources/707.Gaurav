#include<bits/stdc++.h>
using namespace std;
#define MAXN 200010
#define GUESS 20
#define WHITE 0
#define UNDER_WAY 1
#define DONE 2
vector<int> tree[MAXN];
vector<int> visited;
long long DP[MAXN][GUESS+1];
int mystk[MAXN];
void dfs(int currentID){
	if(tree[currentID].size()==0){
   		for(int i=1;i<=GUESS;++i)
   			DP[currentID][i]=i;
   		return;
 	}
 	else{
 		/*
 		for(int i=0;i<tree[currentID].size();i++){
 			dfs(tree[currentID][i]);
 		}
 		*/
  		for(int i=1;i<=GUESS;i++){
  		
   			DP[currentID][i]=i;
   			for(int j=0;j<tree[currentID].size();j++){
     				long long currentMin=LONG_LONG_MAX;
     				for(int k=1;k<=GUESS;k++){
     					if(k!=i){
     						currentMin=min(currentMin,DP[tree[currentID][j]][k]);
     					}
     				}
     				DP[currentID][i]+=currentMin;
   			}
  		}
 	}
}

void stackDFS(int x){
	int sz=-1;
 	mystk[++sz]=x;
 	while(sz>=0){
 		x=mystk[sz];
 		sz--;
 		if(visited[x]==UNDER_WAY){
 	 		visited[x]=DONE;
 	 		dfs(x);
 	 	}
 		else{
 	 		visited[x]=UNDER_WAY;
 	 		mystk[++sz]=x;
 	 		for(int i=0;i<tree[x].size();i++){
			  	if(visited[tree[x][i]]==WHITE)
    				mystk[++sz]=tree[x][i];
       		}
 	 	}
 	}
}
int main(){
	ios::sync_with_stdio(false);
	//freopen("corporate_gifting.txt","r",stdin);
	//freopen("CorporateOut.txt","w",stdout);
	int t;
	cin>>t;
	for(int test=1;test<=t;test++){
		int n;
		cin>>n;
		for(int i=0;i<=n;i++){
			tree[i].clear();
		}
		visited.clear();
  		visited.resize(n);
  		for(int i=0;i<MAXN;i++)
    		for(int j=0;j<=GUESS;j++)
      			DP[i][j]=0;
      		
		for(int i=0;i<n;i++)
  		{
  			
  			int parentNode;
  			cin>>parentNode;
  			parentNode--;
  			if(i==0)
  				continue;
			  tree[parentNode].push_back(i);
  		}
  		stackDFS(0);
  		long long sol=LONG_LONG_MAX;
  		for(int i=1;i<=GUESS;i++){
  			sol=min(sol,DP[0][i]);
  		}
		cout<<"Case #"<<test<<": "<<sol<<"\n";
	}
}

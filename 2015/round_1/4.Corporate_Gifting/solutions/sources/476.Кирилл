#include <iostream>
#include <algorithm>
#include <map>
using namespace std;

const int N = 200500;
const long long INF = (long long) 1e18;

struct Result
{
    int num;
    long long val;

    Result(): num(-1), val(INF) {}

    Result(int _num, long long _val): num(_num), val(_val) {}

    bool operator < (const Result & other) const
    {
        return val < other.val;
    }
};

int n;
vector<int> g[N];

void relax(pair<Result, Result> & a, Result b)
{
    if (b < a.first)
    {
        a.second = a.first;
        a.first = b;
    }
    else if (b < a.second)
        a.second = b;
}

pair<Result, Result> dfs(int v)
{
    map<int, long long> deltas;
    long long sum = 0;
    int max_cur = 2;

    for (int to : g[v])
    {
        auto res = dfs(to);
        max_cur = max(max_cur, max(res.first.num, res.second.num) + 1);
        sum += res.first.val;
        deltas[res.first.num] += res.second.val - res.first.val;
    }

    pair<Result, Result> res;

    for (int cur = 1; cur <= max_cur; cur++)
    {
        long long local_sum = sum + deltas[cur] + cur;
        relax(res, Result(cur, local_sum));
    }

    return res;
}

void solve()
{
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        int p;
        scanf("%d", &p);
        p--;
        if (p != -1)
            g[p].push_back(i);
    }

    long long res = dfs(0).first.val;
    printf("%lld\n", res);

    for (int i = 0; i < n; i++)
        g[i].clear();
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int t;
    scanf("%d", &t);

    for (int i = 0; i < t; i++)
    {
        printf("Case #%d: ", i + 1);
        solve();
    }

    return 0;
}

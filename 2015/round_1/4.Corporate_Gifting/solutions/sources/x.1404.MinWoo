

#include <iostream>
#include <vector>
#include <set>
#include <queue>
using namespace std;

int solve(vector<int> gift, int one, const vector< vector<int> >& child) {
    const int N = gift.size() - 1;
    int res = 0;
    for ( int i=1 ; i<=N ; ++i ) {
        gift[i] = (gift[i] == one ? 1 : 2);
        res += gift[i];

        // 현재 노드의 gift가 "1"이고
        if ( gift[i] == 1 ) {
            const vector<int>& v = child[i];
            int child_leaf = 0;
            for ( int j=0 ; j<v.size() ; ++j ) {
                if ( child[v[j]].size() == 0 ) {
                    child_leaf += 1;
                }
            }
            // 자식 리프가 3개 이상이면 "1"->"3", "2"->"1"로 변경해서 최적화 가능
            if ( child_leaf > 2 ) {
                res -= child_leaf - 2;
            }
        }
    }
    return res;
}

int main()
{
    //freopen("corporate_gifting_example_input.txt", "r", stdin);

    int T;
    cin >> T;
    for ( int tc=1 ; tc<=T ; ++tc ) {
        int N;
        cin >> N;
        vector<int> manager(N+1);
        vector< vector<int> > child(N+1);
        for ( int i=1 ; i<=N ; ++i ) {
            cin >> manager[i];
            child[manager[i]].push_back(i);
        }

        // gift[i] = depth % 2
        queue<int> q;
        q.push(1);
        int color = 0;
        vector<int> gift(N+1);
        while ( !q.empty() ) {
            int qsize = q.size();
            for ( int i=0 ; i<qsize ; ++i ) {
                int curr = q.front(); q.pop();
                gift[curr] = color;
                for ( int j=0 ; j<child[curr].size() ; ++j ) {
                    q.push(child[curr][j]);
                }
            }
            color = 1 - color;
        }

        int sum1 = solve(gift, 0, child); // gift[i] = (depth % 2 == 0 ? 1 : 2)
        int sum2 = solve(gift, 1, child); // gift[i] = (depth % 2 == 0 ? 2 : 1)
        int res = min(sum1, sum2);

        printf("Case #%d: %d\n", tc, res);
    }

    return 0;
}
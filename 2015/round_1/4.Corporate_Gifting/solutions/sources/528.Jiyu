#include <stdio.h>
#include "stdlib.h"

long d[210000],father[210000],best[210000][4],line[210000],trans[210000][2],temp[210000],n;

int comp1(const void *a,const void *b){
    long t;
    t=((long *)a)[0]-((long *)b)[0];
    if (t>0)
        return 1;
    else if (t<0)
        return -1;
    else
        return 0;
}

int deal(long k){
    long i,tot,l,r,mid=0,min;
    l=0;
    r=n-1;
    while (l<r){
        mid=(l+r)/2;
        if (k>trans[mid][0])
            l=mid+1;
        else
            r=mid;
    }
    mid=l;
    if (trans[mid][0]!=k){
        best[k][0]=1;
        best[k][1]=1;
        best[k][2]=2;
        best[k][3]=2;
    }
    else {
        for (tot=0,min=0;(tot+mid)<n&&trans[tot+mid][0]==k;tot++){
            temp[tot]=0;
            min+=best[trans[tot+mid][1]][1];
        }
        temp[tot]=0;
        temp[tot+1]=0;
        temp[tot+2]=0;
        for (i=0;i<tot;i++){
            temp[best[trans[mid+i][1]][0]]+=best[trans[mid+i][1]][3]-best[trans[mid+i][1]][1];
        }
        best[k][0]=1;
        best[k][1]=min+temp[1]+1;
        best[k][3]=1000000;
        for (i=2;i<=tot+2;i++){
            if ((min+temp[i]+i)<best[k][3]){
                if (min+temp[i]+i<best[k][1]){
                    best[k][2]=best[k][0];
                    best[k][3]=best[k][1];
                    best[k][0]=i;
                    best[k][1]=min+temp[i]+i;
                }
                else {
                    best[k][2]=i;
                    best[k][3]=min+temp[i]+i;
                }
            }
        }
    }
    return 0;
}

int main() {
    long t,tt,i,j,k,l,r;

    freopen("corporate_gifting.txt", "r",stdin);
    freopen("corporate_gifting.out", "w",stdout);

    scanf("%ld",&t);
    for (tt=1;tt<=t;tt++){
        scanf("%ld",&n);
        for (i=0;i<n;i++){
            d[i]=0;
        }
        for (i=0;i<n;i++){
            scanf("%ld",father+i);
            father[i]--;
            if (father[i]>=0)
                d[father[i]]++;
            trans[i][0]=father[i];
            trans[i][1]=i;
        }
        qsort(trans, n, sizeof(long)*2, comp1);
        l=0;
        r=-1;
        for (i=0;i<n;i++){
            if (d[i]==0){
                r++;
                line[r]=i;
            }
        }
        while (l<=r){
            deal(line[l]);
            if (father[line[l]]>=0){
                d[father[line[l]]]--;
                if (d[father[line[l]]]==0){
                    r++;
                    line[r]=father[line[l]];
                }
            }
            l++;
        }
        printf("Case #%ld: %ld\n",tt,best[0][1]);
    }
    return 0;
}

#include <iostream>
#include <queue>
#include <vector>
#include <set>
#include <map>
using namespace std;

const int MAXN = 200005;
typedef long long ll;

int T, N;
int par[MAXN];
vector<int> chld[MAXN];
vector<int> order;

int t1[MAXN]; ll c1[MAXN];
int t2[MAXN]; ll c2[MAXN];

void reset(){
    memset(t1, 0, sizeof(t1));
    memset(t2, 0, sizeof(t2));
    memset(c1, 0, sizeof(c1));
    memset(c2, 0, sizeof(c2));
    memset(par, 0, sizeof(par));
    order.clear();
    for(int i=0; i<MAXN; i++) chld[i].clear();
}

void toposort(){
    vector<int> nc;
    queue<int> zc;
    
    for(int i=0; i<N; i++){
        nc.push_back(chld[i].size());    
        if(nc[i] == 0) zc.push(i);
    }

    while(zc.size()){
        int node = zc.front();
        zc.pop();

        order.push_back(node);
        if(node != 0){
            --nc[par[node]];
            if(nc[par[node]]==0) zc.push(par[node]);
        }
    }
}

void calculate(){
    for(int node : order){
    
        map<int, ll> if_use;
        ll sum = 0;

        for(int ch : chld[node]){
            int ideal = t1[ch];
            sum += c1[ch];
            if_use[ideal] += c2[ch] - c1[ch];
        }

        set<int> could;
        could.insert(1);
        could.insert(2);
        for(int ch : chld[node]){
            could.insert(t1[ch]);
            could.insert(t1[ch]+1);
            could.insert(t1[ch]+2);
        }
        
        vector<pair<ll, int> > poss;
        for(int root : could)
            poss.emplace_back(sum + root + if_use[root], root);
        sort(poss.begin(), poss.end());

        t1[node] = poss[0].second;
        c1[node] = poss[0].first;
        t2[node] = poss[1].second;
        c2[node] = poss[1].first;

    }
}

int main(){
    ios_base::sync_with_stdio(false);

    cin >> T;
    for(int t=1; t<=T; t++){
        reset();

        cin >> N;
        for(int i=0; i<N; i++){
            cin >> par[i];
            if(par[i] == 0) continue;
            chld[--par[i]].push_back(i);
        }

        toposort();
        calculate();
        cout << "Case #" << t << ": " << c1[0] << "\n";
    }

    cout.flush();
    return 0;
}

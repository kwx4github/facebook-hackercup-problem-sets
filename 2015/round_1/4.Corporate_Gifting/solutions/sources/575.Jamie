import sys
import copy

T = input()
for case_num in range(1, T + 1):
    N = input()

    children = [set() for i in xrange(N)]
    parent = [int(i) - 1 for i in raw_input().split()]

    depth = [None] * N
    depth[0] = 0

    for node_id, parent_id in enumerate(parent):
        if node_id == 0:
            continue

        children[parent_id].add(node_id)

    to_set_depth_for = copy.deepcopy(list(children[0]))

    while to_set_depth_for:
        node_id = to_set_depth_for.pop(0)
        depth[node_id] = depth[parent[node_id]] + 1
        to_set_depth_for += children[node_id]

    # We now know the depth of all elements in the tree.
    # We want to figure out the optimal score for each subtree in the tree,
    # starting with the leaf nodes and working up the tree. This means we want
    # to process them in descending depth order.
    process_order = sorted(xrange(N), key=lambda i: depth[i], reverse=True)

    optimal = [None] * N

    for n in process_order:
        # (node value for best score, best score, second best score)
        optimal[n] = (0, sys.maxint, sys.maxint)

        for i in xrange(1, N + 1):
            score_for_i = i

            chidren_all_optimal = True

            for child_id in children[n]:
                child_opt = optimal[child_id]

                if child_opt[0] == i:
                    chidren_all_optimal = False
                    score_for_i += child_opt[2]
                else:
                    score_for_i += child_opt[1]

            if score_for_i < optimal[n][1]:
                optimal[n] = (i, score_for_i, optimal[n][1])
            elif score_for_i < optimal[n][2]:
                optimal[n] = (optimal[n][0], optimal[n][1], score_for_i)
            elif chidren_all_optimal:
                # If the children were all optimal, there's no point in
                # searching in higher node values, because the subtree value
                # will only monotonically increase.
                break

    ans = optimal[0][1]

    print "Case #%d: %d" % (case_num, ans)

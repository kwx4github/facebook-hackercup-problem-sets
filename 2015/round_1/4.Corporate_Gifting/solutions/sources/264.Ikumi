#include<stdio.h>
#include<algorithm>
#include<vector>
#define BEGIN_STACK_EXTEND(size) void * stack_extend_memory_ = malloc(size);void * stack_extend_origin_memory_;char * stack_extend_dummy_memory_ = (char*)alloca((1+(int)(((long long)stack_extend_memory_)&127))*16);*stack_extend_dummy_memory_ = 0;asm volatile("mov %%rsp, %%rbx\nmov %%rax, %%rsp":"=b"(stack_extend_origin_memory_):"a"((char*)stack_extend_memory_+(size)-1024));
#define END_STACK_EXTEND asm volatile("mov %%rax, %%rsp"::"a"(stack_extend_origin_memory_));free(stack_extend_memory_);
using namespace std;
vector<int>g[210000];
int dp[201000][654];
int tmp[654];
int L[654];
int R[654];
void solve(int a){
	for(int i=0;i<g[a].size();i++){
		solve(g[a][i]);
	}
	for(int i=0;i<g[a].size();i++){
		L[0]=99999999;
		for(int j=1;j<654;j++)L[j]=R[j]=dp[g[a][i]][j];
		for(int j=2;j<654;j++)L[j]=min(L[j],L[j-1]);
		for(int j=652;j>=1;j--)R[j]=min(R[j],R[j+1]);
		
		for(int j=1;j<653;j++)dp[a][j]+=min(L[j-1],R[j+1]);
		dp[a][653]+=L[652];
		for(int j=1;j<653;j++)dp[a][j]=min(dp[a][j],99999999);
	}
	for(int i=1;i<654;i++)dp[a][i]+=i;
}
int main(){
	  BEGIN_STACK_EXTEND(60*1024*1024);
	int T;
	scanf("%d",&T);
	for(int t=1;t<=T;t++){
		int a;scanf("%d",&a);
		for(int i=0;i<210000;i++)g[i].clear();
		for(int i=0;i<a;i++){
			int p;scanf("%d",&p);
			if(p)g[p-1].push_back(i);
		}
		for(int i=0;i<a;i++)for(int j=0;j<654;j++){
			dp[i][j]=0;
		}
		solve(0);

		int ret=99999999;
		for(int i=1;i<654;i++){
			ret=min(ret,dp[0][i]);
		}
		printf("Case #%d: %d\n",t,ret);
	}
	 END_STACK_EXTEND;
}
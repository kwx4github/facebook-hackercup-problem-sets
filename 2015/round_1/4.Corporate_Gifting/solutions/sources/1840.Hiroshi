#include <algorithm>
#include <iostream>
#include <vector>
#include <bitset>
#include <string.h>
#include <stdio.h>

using namespace std;

#define MAX_NODE 200100
#define MAX_PRICE 50
#define INF 1000000000

int memo[MAX_NODE][MAX_PRICE + 1];
int par[MAX_NODE];
vector<int> g[MAX_NODE];

int dfs(int u, int price, int pre) {
  if (memo[u][price] != -1) return memo[u][price];

  int res = price;
  
  for (int i = 0; i < g[u].size(); i++) {
    int v = g[u][i];
    if (v == pre) continue;
    
    int tmin = INF;
    for (int np = 1; np <= MAX_PRICE; np++) {
      if (np != price) {
	tmin = min(tmin, dfs(v, np, u));
      }
    }
    res += tmin;
  }

  return memo[u][price] = res;
}

void solve(int times) {
  int n;
  scanf("%d\n", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d\n", &par[i]);
    par[i]--;
  }
  
  memset(memo, -1, sizeof(memo));
  for (int i = 0; i < MAX_NODE; i++) {
    g[i].clear();
  }
  
  for (int i = 1; i < n; i++) {
    g[par[i]].push_back(i);
  }
  
  int res = INF;
  
  for (int i = 1; i <= min(n, MAX_PRICE); i++) {
    int next = dfs(0, i, -1);
    res = min(res, next);
  }

  printf("Case #%d: %d\n", (times+1), res);
}

int main() { 
  int T, times;
  scanf("%d\n", &T);
  
  for (times = 0; times < T; times++) {
    solve(times);
  }
  
  return 0;
}

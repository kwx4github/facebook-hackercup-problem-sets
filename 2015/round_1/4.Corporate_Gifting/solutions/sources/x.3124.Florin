#include <fstream>
#include <stdlib.h>
#include <queue>
int T,N, ca;

int parent[200001], children[200001], level[200001];



using namespace std;
ifstream fin("input.txt");
ofstream fout("output.txt");


struct info{
		int id;
		info(int id){this->id = id;}
	};


void solve()
{
	queue<info*> nodes;
	int out = 0;

	for(int i=1; i<=N; i++)
		if(children[i] == 0)
		{
			nodes.push(new info(i));
			level[i] = 1;
		}

	while(!nodes.empty())
	{
		info * node = nodes.front();
		
		out += level[node->id];

		if(parent[node->id])
		{
			--children[parent[node->id]];
			if(level[parent[node->id]] == 0)
				level[parent[node->id]] = 1;
			if(level[parent[node->id]] == level[node->id])
				++level[parent[node->id]];
		}
		if(!children[parent[node->id]] && parent[node->id])
			nodes.push(new info(parent[node->id]));

		nodes.pop();
		delete node;
	}
		fout<<"Case #"<<ca<<": "<<out<<"\n";

	memset(parent,0,200001 * sizeof(int));
	memset(children,0,200001 * sizeof(int));
	memset(level,0,200001 * sizeof(int));
}

int main()
{
	int x;
	fin>>T;
	for(ca =1; ca<=T; ca++)
	{
		fin>>N;

		for(int i = 1; i <= N; i++)
		{
			fin>>x;
			parent[i] = x;
			++children[x];
		}

		solve();
	}

	return 0;
}
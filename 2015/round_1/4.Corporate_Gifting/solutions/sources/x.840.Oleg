#pragma comment(linker, "/STACK:16777216")

#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

struct BestChoice {
	int bestCost;
	int companyTotal;
	int companyTotalSecond;
};
int N;
vector<vector<int> > g;
vector<BestChoice> bestChoice;

void read() {
	scanf("%d", &N);
	g.clear();
	g.resize(N);

	bestChoice.clear();bestChoice.resize(N);

	for (int i = 0; i < N; i++) {
		int x;
		scanf("%d", &x);
		x--;
		if (x >= 0) g[x].push_back(i);
	}
}

void dfs(int v) {
	if (g[v].empty()) {
		bestChoice[v].bestCost = 1;
		bestChoice[v].companyTotal = 1;
		bestChoice[v].companyTotalSecond = 2;
		return;
	}
	int maxSize = 0;
	for (int i = 0; i < g[v].size(); i++) {
		int t = g[v][i];
		dfs(t);
		maxSize = max(maxSize, bestChoice[t].bestCost);
	}

	int total = 0;
	vector<int> p(maxSize + 2);
	for (int i = 0; i < g[v].size(); i++) {
		int t = g[v][i];
		total += bestChoice[t].companyTotal;
		p[bestChoice[t].bestCost] += bestChoice[t].companyTotalSecond - bestChoice[t].companyTotal;
	}
	BestChoice& res = bestChoice[v];
	res.bestCost = 1;
	res.companyTotal = 1 + total + p[1];
	res.companyTotalSecond = 2 + total + p[2];

	if (res.companyTotalSecond < res.companyTotal) {
		swap(res.companyTotal, res.companyTotalSecond);
		res.bestCost = 2;
	}
	for (int i = 3; i < p.size(); i++) {
		int x = i + total + p[i];
		if (x < res.companyTotal) {
			res.companyTotalSecond = res.companyTotal;
			res.companyTotal = x;
			res.bestCost = i;
		} else if (x < res.companyTotalSecond) {
			res.companyTotalSecond = x;
		}
	}
}

void solve() {
	dfs(0);

	assert (bestChoice[0].companyTotal <= bestChoice[0].companyTotalSecond);

	int res = bestChoice[0].companyTotal;
	printf("%d\n", res);

} 

void Generate() {
	int T = 20;
	printf("%d\n", T);
	for (int i = 0; i < T; i++) {
		int N = 200000;
		printf("%d\n", N);
		for (int i = 0; i < N; i++) {
			printf("%d ", rand() % (i + 1));
		}
		printf("\n");
	}
}

int main(int argc, char* argv[]) {
#ifdef LAPTOP
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout); 
#endif

	//Generate();
	//return 0;

	int T;
	scanf("%d", &T);

	for (int t = 1; t <= T; t++) {
		read();
		printf("Case #%d: ", t);
		solve();

		cerr << "Done: " << t;
	}

	return 0;
}


import random
T = int(raw_input())

for i in range(T):
    N = int(raw_input())

    company = []


    for j in range(N):
        person = {}
        person['children'] = []
        person['degree'] = 0
        person['parent'] = -1
        company.append(person)

    hierarchy = map(int, raw_input().split(' '))


    for j in range(1, N):
        superior = hierarchy[j] - 1
        company[superior]['children'].append(j)
        company[j]['parent'] = superior
        company[superior]['degree'] += 1
        company[j]['degree'] += 1
        

    queue = []
    queue.append(0)

    queue_pos = 0
    while queue_pos < N:
        current_element = queue[queue_pos]
        for child in company[current_element]['children']:
            queue.append(child)
        queue_pos += 1

    opts = [0] * N
    off_opts = [0] * N
    opt_nodevals = [0] * N
    off_opt_nodevals = [0] * N

    for j in range(N-1, -1, -1):
        curr_ind = queue[j]
        curr_person = company[curr_ind]
        degree = curr_person['degree']


        choose_penalties = [0] * (degree + 2)
        for k in range(1, degree + 2):
            choose_penalties[k] += k
        for child in curr_person['children']:
            k = opt_nodevals[child]
            if k < degree + 2:
                choose_penalties[k] += off_opts[child] - opts[child]

        min_k = -1
        second_k = -1
        min_kval = -1
        second_kval = -1

        for k in range(1, degree + 2):
            kval = choose_penalties[k]
            if kval <= min_kval or min_k < 0:
                second_k = min_k
                second_kval = min_kval
                min_k = k
                min_kval = kval
            elif kval <= second_kval or second_k < 0:
                second_k = k
                second_kval = kval


        min_kval = min_k
        second_kval = second_k
        for child in curr_person['children']:
            if opt_nodevals[child] == min_k:
                min_kval += off_opts[child]
            else:
                min_kval += opts[child]
            if opt_nodevals[child] == second_k:
                second_kval += off_opts[child]
            else:
                second_kval += opts[child]



        opts[curr_ind] = min_kval
        off_opts[curr_ind] = second_kval
        opt_nodevals[curr_ind] = min_k
        off_opt_nodevals[curr_ind] = second_k
    print "Case #" + str(i + 1) + ": " + str(opts[0])
        

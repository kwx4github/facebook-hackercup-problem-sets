#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

vector<int> al[200001];
bool vis[200001];
int n;

void add_edge(int x, int y){
	al[x].push_back(y);
	al[y].push_back(x);
}

long long best[200001];
long long sbest[200001];
int gift[200001];

void dfsv(int e, int parent){
	vis[e] = true;

	long long k = 0;
	int d = al[e].size()-1;

	vector<long long> dc;
	dc.resize(d+2, 0);

	for (auto i = al[e].begin(); i != al[e].end(); i++){
		if (vis[*i]) continue;
		dfsv(*i, e);
		k += best[*i];
	}

	for (int i=1; i<=d+1; i++){
		dc[i] = k;
	}

	for (auto i = al[e].begin(); i != al[e].end(); i++){
		if (*i == parent) continue;
		if (gift[*i]<=d+1){
			dc[gift[*i]] += sbest[*i] - best[*i];
		}
	}

	best[e] = INT_MAX;
	sbest[e] = INT_MAX;
	gift[e] = 0;

	if (d==0){
		best[e] = 1;
		sbest[e] = 2;
		gift[e] = 1;
		return;
	}

	for (int i=1; i<=d+1; i++){
		if (i+dc[i]<best[e]){
			gift[e] = i;
			best[e] = i+dc[i];
		}
	}

	for (int i=1; i<=d+1; i++){
		if (i==gift[e]) continue;
		if (i+dc[i]<sbest[e]){
			sbest[e] = i+dc[i];
		}
	}

}

int main(){

	int tc;
	cin>>tc;
	for (int tcc=1; tcc<=tc; tcc++){
		cin>>n;
		for (int i=0; i<200001; i++){
			al[i].clear();
		}
		fill(vis, vis+200001, false);
		vis[0] = true;
		for (int i=1; i<=n; i++){
			int x;
			cin>>x;
			add_edge(i, x);
		}
		dfsv(1, 0);
		cout<<"Case #"<<tcc<<": "<<best[1]<<endl;
	}
	return 0;
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class D {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int N;
    ArrayList<Integer>[] childs;
    int[] best1;
    int[] best2;
    long[] bestVal1;
    long[] bestVal2;
    public void solveCase() throws IOException {
        N = nextInt();
        childs = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            childs[i] = new ArrayList<Integer>();
        }
        best1 = new int[N];
        best2 = new int[N];
        bestVal1 = new long[N];
        bestVal2 = new long[N];

        for (int i = 0; i < N; i++) {
            int p = nextInt() - 1;
            if (p < 0) continue;
            childs[p].add(i);
        }

        dfs(0);
        System.out.print(bestVal1[0]);
    }

    public void dfs(int cur) {
        for (int v: childs[cur]) {
            dfs(v);
        }
        int maxTry = 2;
        for (int v: childs[cur]) {
            maxTry = Math.max(maxTry, best1[v] + 2);
            maxTry = Math.max(maxTry, best2[v] + 2);
        }

        long val1 = 0;
        long val2 = 0;
        int index1 = -1;
        int index2 = -1;
        for (int t = 1; t <= maxTry; t++) {
            long sum = t;
            for (int v: childs[cur]) {
                if (best1[v] != t) {
                    sum += bestVal1[v];
                } else {
                    sum += bestVal2[v];
                }
            }
            if (index1 == -1) {
                val1 = sum; index1 = t;
            } else {
                if (sum < val1) {
                    val2 = val1; index2 = index1;
                    val1 = sum; index1 = t;
                } else if (index2 == -1 || sum < val2) {
                    val2 = sum; index2 = t;
                }
            }
        }

//        out.println("maxTry: " + maxTry);

        best1[cur] = index1;
        best2[cur] = index2;
        bestVal1[cur] = val1;
        bestVal2[cur] = val2;

//        out.println(cur + ": " + best1[cur] + ", " + bestVal1[cur] + "..." + best2[cur] + ", " + bestVal2[cur]);
    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            System.out.print("Case #" + t + ": ");
            solveCase();
            System.out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new D().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

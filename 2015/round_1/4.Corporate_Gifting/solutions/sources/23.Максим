#pragma comment(linker, "/STACK:200000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

typedef long long int64;
//#define double long double
const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const double EPS = 1E-9;
const double EPS_ANG = 1E-16;
const double PI = acos((double)0) * 2;

#define forn(i, n)  for (int i = 0; i < int(n); ++i)
#define ford(i, n)  for (int i=int(n) - 1; i >= 0; --i)
#define fore(i, l, r)  for (int i = int(l); i < int(r); ++i)
#define all(a)  a.begin(), a.end()
#define fs  first
#define sc  second
#define mp  make_pair
#define pb  push_back


const int MAXN = 210 * 1000;
const int MAXC = 2000;


int n;
vector<int> g[MAXN];


void read() {
	cin >> n;
	forn(i, n)
		g[i].clear();
	forn(i, n) {
		int p;
		scanf("%d", &p);
		if (--p != -1)
			g[p].push_back(i);
	}
}


int d[MAXN][MAXC], tmp[MAXC];

void calc_d(int v) {
	forn(i, g[v].size())
		calc_d(g[v][i]);

	memset(tmp, 0, sizeof tmp);
	forn(i, g[v].size())
		forn(c, MAXC)
			tmp[c] += d[g[v][i]][c];

	int c1 = -1, d1 = INF, c2 = -1, d2 = INF;
	forn(c, MAXC) {
		int curd = c + 1 + tmp[c];
		if (curd < d1)
			c2 = c1,  d2 = d1,  c1 = c,  d1 = curd;
		else if (curd < d2)
			c2 = c,  d2 = curd;
	}
	forn(c, MAXC)
		d[v][c] = (c != c1) ? d1 : d2;
}

void solve() {
	calc_d(0);
	cout << *min_element(d[0], d[0] + MAXC) << endl;
}


int main(int argc, char *argv[]) {
	int test_to_execute = (argc == 2) ? atoi(argv[1]) : -1;

	if (test_to_execute == -1) {
		freopen("input.txt", "rt", stdin);
		freopen("output.txt", "wt", stdout);
	}

	int tests;
	cin >> tests;
	
	if (test_to_execute != -1 && !(1 <= test_to_execute && test_to_execute <= tests)) {
		cerr << "Requested test doesn't exist!" << endl;
		throw std::exception("Requested test doesn't exist!");
	}

	for (int test = 1; test <= tests; ++test) {
		time_t start_time = clock();
		read();
		if (!cin)
			throw;
		if (test_to_execute != -1 && test != test_to_execute)
			continue;
		printf("Case #%d: ", test);
		solve();
		cerr << "Test #" << test << " done! [" << (clock() - start_time) / CLOCKS_PER_SEC << " sec]" << endl;
	}
}

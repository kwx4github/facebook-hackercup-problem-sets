package fhc2015.round1;

import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

/**
 * Created by dhamada on 15/01/18.
 */
public class Gifting {

    static final int K = 20;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int T = in.nextInt();
        for (int testCase = 1 ; testCase <= T ; testCase++) {
            int n = in.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt()-1;
            }
            out.println(String.format("Case #%d: %d", testCase, solve(a)));
        }
        out.flush();
    }

    private static long solve(int[] a) {
        int n = a.length;

        int[] deg = new int[n];
        for (int i = 1 ; i < n; i++) {
            deg[a[i]]++;
        }
        graph = new int[n][];
        for (int i = 0; i < n; i++) {
            graph[i] = new int[deg[i]];
        }
        for (int i = 1; i < n; i++) {
            int fr = a[i];
            int to = i;
            graph[fr][--deg[fr]] = to;
        }

        memo = new long[n][K];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], Long.MAX_VALUE);
        }

        long ret = Long.MAX_VALUE;
        for (int i = 0 ; i < K ; i++) {
            ret = Math.min(ret, dfs(0, i));
        }
        return ret + n;
    }

    private static long dfs(int i, int use) {
        if (memo[i][use] != Long.MAX_VALUE) {
            return memo[i][use];
        }
        long min = 0;
        int cn = graph[i].length;
        for (int c = 0 ; c < cn ; c++) {
            int to = graph[i][c];
            long minc = Long.MAX_VALUE;
            for (int x = 0 ; x < K ; x++) {
                if (x != use) {
                    minc = Math.min(minc, dfs(to, x));
                }
            }
            min += minc;
        }
        memo[i][use] = min + use;
        return memo[i][use];
    }

    static int[][] graph;
    static long[][] memo;

}

#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <memory>
#include <set>
#include <stack>

using namespace std;

class Vertex{
 public:
  Vertex(int p_):parent(p_),childs(0),childs_size(0){}
  int parent;
  vector<int> childs;
  set<int> gifts;
  int childs_size;
  void add_child(int x){childs.push_back(x); ++childs_size;}
};

int main(int , char** ){

  vector<long long int> results(101,0);
	int T,N,m;

	cin >> T;
	for(int i = 0; i < T; ++i){
    cin >> N;
    vector<Vertex> graph(200001,Vertex(0));
    vector<bool> visited(200001,false);
    vector<int> order(200001,0);
    graph[0].parent = -1;
    for(int j = 1; j <= N; ++j){
      cin >> m;
      graph[j].parent = m;
      graph[m].add_child(j);
    }

    {
    stack<int>sta;
    sta.push(1);
    int ord=0;
    while(!sta.empty()){
      int k = sta.top(); sta.pop();
      order[ord]=k;
      ord++;
      vector<int> childs = graph[k].childs;
      int childs_size = graph[k].childs_size;
      for(int a:childs) if(!visited[a]){
        visited[a] = true;
        sta.push(a);
      }
    }
    }
    long long int ret = 0;
    for(int p = 1; p <= N; ++p){
      int num = order[N-p];
      int parent = graph[num].parent;
      set<int> gifts = graph[num].gifts;
      int giftnum = 0;
      for(int x = 1; x <= 200000; ++x){
        if(gifts.count(x)==0){
          giftnum=x;
          break;
        }
      }
      ret+=giftnum;
      graph[parent].gifts.insert(giftnum);
      //cout << order[N-p] << endl;
    }
    results[i] = ret;

	}
	for(int i = 0; i < T; ++i){
    cout << "Case #" << i+1 << ": " << results[i] << endl; }

	return 0;
}
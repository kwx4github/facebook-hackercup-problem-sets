#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <algorithm>
#include <future>

using namespace std;

int MM = 50;

int solve(vector<vector<int>>& c, vector<vector<int>>& children, vector<int>& parent, int cur, int p = 0) {
	int& ret = c[cur][p];
	if (ret != 0) return ret;
	for (int i = 1; i < MM; ++i) {
		if (i == p) continue;
		if (children[cur].empty()) return i;
		int r = i;
		for (auto& ch : children[cur]) {
			r += solve(c, children, parent, ch, i);
		}
		if (ret == 0 || ret > r) ret = r;
	}
	if (ret == 0) { cerr << "dupa" << endl; exit(0); }
	return ret;
}

int main() {
	int T;
	cin >> T;
	for (int q = 1; q <= T; ++q) {
		int N;
		cin >> N;
		vector<int> parent(N);
		vector<vector<int>> children(N);
		for (int i = 0; i < N; ++i) {
			cin >> parent[i];
			--parent[i];
			if (parent[i] >= 0) {
				children[parent[i]].push_back(i);
			}
		}

		vector<vector<int>> c(N);
		for (auto& t : c) t.resize(MM, 0);
		int ret = solve(c, children, parent, 0);
		cout << "Case #" << q << ": " << ret << endl;
	}
	return 0;
}
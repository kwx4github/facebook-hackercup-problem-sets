#include <cstdio>
#include <vector>
#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int N = 200000 + 10;
const int INF = N * 10;

int n;
vector<int> adj[N];
int deg[N];
int father[N];
vector<int> dp[N];
vector<int> bfsOrd;

void bfs(int s)
{
	vector<int> &que = bfsOrd;
	que.push_back(s);
	father[s] = -1;
	for(int i = 0; i < que.size(); ++ i) {
		int u = que[i];
		for(int e = 0; e < adj[u].size(); ++ e) {
			int v = adj[u][e];
			if (v == father[u]) continue;
			father[v] = u;
			que.push_back(v);
		}
	}
}

void solve()
{
	cin >> n;
	for(int i = 0; i < n; ++ i) {
		adj[i].clear();
		deg[i] = 0;
	}

	for(int i = 0; i < n; ++ i) {
		int x;
		scanf("%d", &x);
		--x;
		if (i) {
			deg[i] ++;
			adj[i].push_back(x);
			deg[x] ++;
			adj[x].push_back(i);
		}
	}

	bfsOrd.clear();
	bfs(0);

	for(int t = n - 1; t >= 0; -- t) {
		int u = bfsOrd[t];
		dp[u].resize(deg[u] + 3);
		for(int j = 1; j <= deg[u] + 1; ++ j) {
			dp[u][j] = j;
		}
		dp[u][0] = INF;
		dp[u][deg[u] + 2] = INF;
		vector<int> delta(deg[u] + 3, 0);

		for(int e = 0; e < adj[u].size(); ++ e) {
			int v = adj[u][e];
			if (v == father[u]) continue;
			vector<int> pre(dp[v]), suf(dp[v]);
			for(int i = 1; i < pre.size(); ++ i) {
				pre[i] = min(pre[i - 1], pre[i]);
			}
			for(int i = (int)suf.size() - 2; i >= 0; -- i) {
				suf[i] = min(suf[i + 1], suf[i]);
			}

			for(int i = 1; i <= deg[v] + 1 && i <= deg[u] + 1; ++ i) {
				dp[u][i] += min(pre[i - 1], suf[i + 1]);
			}
			if (deg[v] + 2 <= deg[u] + 1) {
				delta[deg[v] + 2] += suf[0];
			}
		}

		//cout << "now is " << u << endl;
		for(int i = 1; i <= deg[u] + 1; ++ i) {
			delta[i] += delta[i - 1];
			dp[u][i] += delta[i];
			//cout << dp[u][i] << ' ';
		}
		//cout << endl;
	}

	int ret = INF;
	for(int i = 1; i <= deg[0] + 1; ++ i) {
		ret = min(ret, dp[0][i]);
	}
	cout << ret << endl;
}

int main()
{
	int t;
	cin >> t;
	for(int i = 1; i <= t; ++ i) {
		cout << "Case #" << i << ": ";
		solve();
	}
	return 0;
}

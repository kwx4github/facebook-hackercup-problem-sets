import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;


public class corpgif {
	
	static BufferedReader f;
	static PrintWriter out;
	static StringTokenizer st;
	static int t;
	static int n;
	static int[] owner;
	static int[] depth;
	static int[] cost;
	static int[] kids;
	
	public static void main(String[] args) throws IOException {
		f = new BufferedReader(new FileReader("corporate_gifting.txt"));
		out = new PrintWriter(new BufferedWriter(new FileWriter("corpout.txt")));
		st = new StringTokenizer(f.readLine());
		t = Integer.parseInt(st.nextToken());
		for(int i = 0; i < t; i++) {
			st = new StringTokenizer(f.readLine());
			n = Integer.parseInt(st.nextToken());
			st = new StringTokenizer(f.readLine());
			out.println("Case #" + (i + 1) + ": " + solve());
		}
		out.close();
	}
		
	public static int solve() {
		owner = new int[n];
		kids = new int[n];
		cost = new int[n];
		depth = new int[n];
		for(int i = 0; i < n; i++) {
			owner[i] = Integer.parseInt(st.nextToken()) - 1;
			if(owner[i] >= 0) kids[owner[i]]++;
		}
		Arrays.fill(depth, -1);
		for(int i = n - 1; i >= 0; i--) {
			if(depth[i] == -1) {
				depth[i] = 0;
			}
			if(owner[i] >= 0) depth[owner[i]] = Math.max(depth[i] + 1, depth[owner[i]]);
		}
		Arrays.fill(cost, -1);
		for(int i = n - 1; i >= 0; i--) {
			if(depth[i] == 0) cost[i] = 1;
			if(owner[i] < 0) continue;
			if((depth[owner[i]] - depth[i]) % 2 == 0) cost[owner[i]] = cost[i] + 2;
			else if(cost[i] == 1) cost[owner[i]] = Math.max(cost[owner[i]], cost[i] + 1);
			else cost[owner[i]] = Math.max(cost[i] - 1, cost[owner[i]]);
		}
		int ans = 0;
		for(int i = 0; i < n; i++) {
			ans += cost[i];
		}
		return ans;
	}
}
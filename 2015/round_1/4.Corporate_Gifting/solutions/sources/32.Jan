using namespace std;
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<cassert>
#include<cstring>
#include<cmath>

#include<set>
#include<map>
#include<deque>

typedef long double D; typedef long long LL; typedef pair<int,int> pii;
#define ALL(v) (v).begin(),(v).end()
#define REP(i, n) for (int i (0); i < (n); i ++)
#define FORIT(a,b, it) for(__typeof(b)it(a);it!=(b);++it)
#define FOREACH(v, it) FORIT((v).begin(),(v).end(),it)
#define len(v) ((int)(v).size())
#define append push_back
#define _ make_pair
#define fi first
#define se second
#define add insert
#define remove erase
#define TWO(x) (1<<(x))
#define UNIQUE(v) (v).erase(unique(ALL(v)),(v).end())
const int infInt (1010101010);
const LL  infLL  (4 * LL (infInt) * LL (infInt));

template<class T>void pv(T a,T b){FORIT(a,b,it)cout<<*it<<" ";cout<<endl;}

inline void chmin(int&x,int y){x=min(x,y);}
inline void chmax(int&x,int y){x=max(x,y);}

#define N 200005
int val1[N],val2[N];
long long opt1[N],opt2[N];
vector<vector<int> > children;
void dfs(int x){
	set<int>se;
	FOREACH(children[x],it){
		//dfs(*it);
		se.insert(val1[*it]);
	}
	int BIJ=0;for(int v=1;BIJ<2;v++)if(!se.count(v))se.insert(v),BIJ++;
	long long S=0;
	FOREACH(children[x],it)S+=opt1[*it];
	map<int,long long>add;
	FOREACH(children[x],it)add[val1[*it]]+=opt2[*it]-opt1[*it];
	opt1[x] = opt2[x]  = 1000000000000000000LL;
	FOREACH(se,it){
		int v=*it;
		long long cost=S+v+add[v];
		if(cost<opt1[x]) { val2[x]=val1[x],opt2[x]=opt1[x]; val1[x]=v,opt1[x]=cost; }
		else if(cost<opt2[x]) { val2[x]=v,opt2[x]=cost; }
	}
}
int main(){
	int T;scanf("%d",&T);
	for(int tc=1;tc<=T;tc++){
		int n;scanf("%d",&n);
		children=vector<vector<int> >(n+1);
		for(int i=1;i<=n;i++){
			int par;scanf("%d",&par);
			if(i!=1)children[par].push_back(i);
		}
		deque<int>Q;
		vector<int>V;
		Q.push_back(1);
		while(!Q.empty()){
			int x=Q.back();
			V.push_back(x);
			Q.pop_back();
			FOREACH(children[x],it)Q.push_back(*it);
		}
		reverse(ALL(V));
		FOREACH(V,it)dfs(*it);
		//dfs(1);
		printf("Case #%d: %lld\n",tc,opt1[1]);
	}
}

#include <vector>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define MAX1 10000000
std::vector<int> primes[200005];

int a[200005];
int N;
typedef struct typ1{
	int a,b,c;
};
typ1 solve123(int start)
{
	typ1 tp1;
	typ1 *temp1 = (typ1 *)malloc(sizeof(typ1)*(200005));

	for(int ii=N-1;ii>=0;ii--)
	{
		typ1 *temp = (typ1 *)malloc(sizeof(typ1)*(primes[ii].size()+1));
		int *ttemp= (int *)malloc(sizeof(int)*(primes[ii].size()+1));
		int *ttempc= (int *)malloc(sizeof(int)*(primes[ii].size()+1));
		if(primes[ii].size()==0)
		{
			temp1[ii].a = 1;
			temp1[ii].b = 2;
			temp1[ii].c = 1;
		}
		else{
		long long int K12=0;
		for(int i=0;i<primes[ii].size();i++)
		{
			K12+=temp1[(primes[ii])[i]].a;
		}

		for(int i=0;i<primes[ii].size()+1;i++)
		ttemp[i]=K12;
		for(int i=0;i<primes[ii].size();i++)
		{
			if(temp1[(primes[ii])[i]].c <= primes[ii].size()+1)
				ttemp[temp1[(primes[ii])[i]].c-1]+=temp1[(primes[ii])[i]].b-temp1[(primes[ii])[i]].a;
		}
		for(int i=0;i<primes[ii].size()+1;i++)
			ttempc[i] = i+1+ttemp[i];
		int max1=INT_MAX,max2=INT_MAX,index=1;
		for(int i=0;i<primes[ii].size()+1;i++)
		{
			if(ttempc[i]<=max1)
			{
				max2 = max1;
				max1 = ttempc[i];
				index = i;
			}
			else if(ttempc[i]<max2)
				max2=ttempc[i];
		}

			temp1[ii].a = max1;
			temp1[ii].b = max2;
			temp1[ii].c = index+1;
		}
			free(temp);
			free(ttemp);
			free(ttempc);

	
	}
	tp1.a = temp1[0].a;
	tp1.b = temp1[0].b;
	tp1.c = temp1[0].c;

	free(temp1);

	  return tp1;
}
typ1 solve(int start)
{
	typ1 *tp1= (typ1 *)malloc(sizeof(typ1));
	typ1 *temp = (typ1 *)malloc(sizeof(typ1)*(primes[start].size()+1));
	int *ttemp= (int *)malloc(sizeof(int)*(primes[start].size()+1));
	int *ttempc= (int *)malloc(sizeof(int)*(primes[start].size()+1));

	if(primes[start].size()==0)
	{
		tp1->a = 1;
		tp1->b = 2;
		tp1->c = 1;
		return (*tp1);
	}
	long long int K12=0;
	for(int i=0;i<primes[start].size();i++)
	{
		temp[i] = solve((primes[start])[i]);
		K12+=temp[i].a;
	}
	for(int i=0;i<primes[start].size()+1;i++)
		ttemp[i]=K12;
	for(int i=0;i<primes[start].size();i++)
	{
		if(temp[i].c <= primes[start].size()+1)
			ttemp[temp[i].c-1]+=temp[i].b-temp[i].a;
	}
	for(int i=0;i<primes[start].size()+1;i++)
		ttempc[i] = i+1+ttemp[i];
	int max1=INT_MAX,max2=INT_MAX,index=1;
	for(int i=0;i<primes[start].size()+1;i++)
	{
		if(ttempc[i]<=max1)
		{
			max2 = max1;
			max1 = ttempc[i];
			index = i;
		}
		else if(ttempc[i]<max2)
			max2=ttempc[i];
	}

		tp1->a = max1;
		tp1->b = max2;
		tp1->c = index+1;
		free(temp);
		free(ttemp);
		free(ttempc);
		return (*tp1);

}
int main()
{
 freopen("in.txt", "r", stdin);
 freopen("out.txt", "w", stdout);

 int j=0;


  int tt;
 // scanf("%d", &tt);
	cin>>tt;
  int total=tt;
  while(tt--)
  {
	  cin>>N;

	  for(int i=0;i<N;i++)
		{
			cin>>a[i];
			if(a[i]!=0)
			primes[a[i]-1].push_back(i);
	  }
	  long long int result = (solve123(0)).a;
	    for(int i=0;i<N;i++)
			primes[i].clear();
//	  if(result!=0)
		  printf("Case #%d: %llu\n",total-tt,result);
//	  else
//		  printf("Case :#%d: YES\n",total-tt);
  }
  return 0;
}
#include<bits/stdc++.h>
#define two(a) (1<<(a))
#define LINF (1ll<<61)
#define EPS (1e-14)
#define Lshift(a,b) (a<<b)
#define Rshift(a,b) (a>>b)
#define rep(a,b) for(a=0 ; a<b ; a++)
#define xrep(a,b,c) for(a=b ; a<c ; a++)
#define INF (1<<29)
#define swap(a,b) ( (a^=b) , (b^=a) , (a^=b) )
#define recurse 20
typedef long long ll;
using namespace std;

vector<int> slave[200000];
int dp[200000][recurse];

int main() {
    int n, t, tt, i, j, k, l, eng;
    
    cin >> tt;
    xrep(t, 1, tt+1) {
        memset(dp, 0, sizeof(dp));
        rep(i, 200000) { slave[i].clear(); }

        cin >> n >> eng;
        xrep(i, 1, n) {
            cin >> eng;
            slave[eng-1].push_back(i);
        }

        for (i = n-1; i >= 0; i--) {
            rep(j, recurse) { dp[i][j] = j+1; }
            rep(j, slave[i].size()) {
                eng = slave[i][j];
                rep(k, recurse) {
                    int minx = INF;
                    rep(l, recurse) {
                        if (l != k) { minx = min(minx, dp[eng][l]); }
                    }
                    dp[i][k] += minx;
                }
            }
        }
        cout << "Case #" << t << ": " << min(min(min(dp[0][0], dp[0][1]), min(dp[0][2], dp[0][3])), dp[0][4]) << endl;
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebook;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Character;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import javax.swing.tree.TreeNode;

/**
 *
 * @author nooshin
 */
public class Test4 {

    static int minfparent(TreeNode root, int parentPres, int maxColors){
        int min = Integer.MAX_VALUE;

        if(cache[parentPres][root.index] != 0)
            return cache[parentPres][root.index];
        for(int i = 1; i<=maxColors; i++){
            if(i!= parentPres){
                int sum = 0;
                for (TreeNode treeNode : root.getChildren()) {
                    sum += minfparent(treeNode, i, maxColors);
                }
                min = Math.min(i+ sum, min);
            }
        }
        return cache[parentPres][root.index] = min;
    }
    private static int maxhieght(TreeNode root) {
        int height = 0;
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.addFirst(root);
        int nn = 1;
        while (!queue.isEmpty()) {
            int bkn = 0;
            for (int l = 0; l < nn; l++) {
                final TreeNode cur = queue.removeFirst();
                for (TreeNode treeNode : cur.getChildren()) {
                    bkn++;
                    queue.add(treeNode);
                }
            }
            nn = bkn;
            height++;
        }

        return height;
    }

    static class TreeNode {

        ArrayList<TreeNode> children = new ArrayList<TreeNode>();

        public int index;

        private TreeNode(int i) {
            index = i;
        }
        void add(TreeNode child) {
            children.add(child);
        }

        List<TreeNode> getChildren() {
            return children;
        }
    }

    static int cache[][] ;
    public static void main(String[] args) throws FileNotFoundException, IOException {
        FileInputStream fi = new FileInputStream("c:\\temp\\input.txt");
        FileWriter fw = new FileWriter("c:\\temp\\out.txt");
        Scanner s = new Scanner(fi);
        int T = s.nextInt();
        int maxchid = 0;
        for (int i = 0; i < T; i++) {
            final int N = s.nextInt();
            TreeNode[] trees = new TreeNode[N];
            int dummy = s.nextInt();
            trees[0] = new TreeNode(0);
            for (int j = 0; j < N - 1; j++) {
                int parInd = s.nextInt();
                TreeNode parent = trees[parInd - 1];
                if (parent == null) {
                    parent = new TreeNode(parInd - 1);
                    trees[parInd - 1] = parent;
                }
                if (trees[j + 1] == null) {
                    trees[j + 1] = new TreeNode(j+1);
                }

                parent.add(trees[j + 1]);
                if(parent.getChildren().size()>maxchid)
                    maxchid = parent.getChildren().size();
            }

            int maxColors = 20;

            cache = new int[maxColors+1][N];

            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= maxColors; j++) {
                min = Math.min(minfparent(trees[0], j, maxColors), min);

            }

            fw.write("Case #" + (i + 1) + ": " + min + "\r\n");
        }
        fw.close();
        fi.close();
    }
}

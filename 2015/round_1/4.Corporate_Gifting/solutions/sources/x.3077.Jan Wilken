#include <iostream>
#include <vector>
#include <set>

using namespace std;

typedef int64_t LL;
typedef vector<vector<int>> G;

int get_labels(const G& adj, int u, vector<int>& all_labels) {
  set<int> labels;
  for (int i = 0; i <= adj[u].size(); ++i) {
    labels.insert(i+1);
  }

  for (int i = 0; i < adj[u].size(); ++i) {
    int curr_label = get_labels(adj, adj[u][i], all_labels);
    labels.erase(curr_label);
  }

  int label = *(labels.begin());
  all_labels[u] = label;
  return label;
}

LL testcase() {
  int N;
  cin >> N;

  G adj(N+1);
  for (int i = 0; i < N; ++i) {
    int u, v;
    cin >> u;
    v = i+1;

    adj[u].push_back(v);
  }

  vector<int> all_labels(N+1);
  get_labels(adj, 0, all_labels);
  LL count = 0;
  for (int i = 1; i <= N; ++i) {
    count += all_labels[i];
  }

  return count;
}

int main(int argc, char const *argv[]) {
  int T;
  cin >> T;
  for (int t = 0; t < T; ++t) {
    cout << "Case #" << t+1 << ": " << testcase() << endl;
  }

  return 0;
}

import java.util.*;
import java.io.*;

public class Corporate {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);

        int T = Integer.parseInt(in.readLine());
        for (int t = 1; t <= T; t++) {
            int N = Integer.parseInt(in.readLine());
            StringTokenizer st = new StringTokenizer(in.readLine());
            int[] inDeg = new int[N];
            Edge[] g = new Edge[N];
            st.nextToken();
            int[] sup = new int[N];
            for (int i = 1; i < N; i++) {
                sup[i] = Integer.parseInt(st.nextToken()) - 1;
                inDeg[sup[i]]++;
                g[sup[i]] = new Edge(i, g[sup[i]]);
            }
            LinkedList<Integer> q = new LinkedList<Integer>();
            for (int i = 0; i < N; i++) {
                if (inDeg[i] == 0) {
                    q.add(i);
                }
            }
            int[][] dp = new int[N][3];
            while (!q.isEmpty()) {
                int v = q.removeFirst();
                dp[v][0] = 1;
                dp[v][1] = 2;
                dp[v][2] = 3;
                for (Edge e = g[v]; e != null; e = e.next) {
                    dp[v][0] += Math.min(dp[e.to][1], dp[e.to][2]);
                    dp[v][1] += Math.min(dp[e.to][0], dp[e.to][2]);
                    dp[v][2] += Math.min(dp[e.to][0], dp[e.to][1]);
                }
                inDeg[sup[v]]--;
                if (inDeg[sup[v]] == 0) {
                    q.add(sup[v]);
                }
            }
            out.println("Case #" + t + ": " + (Math.min(Math.min(dp[0][0], dp[0][1]), dp[0][2])));
        }

        in.close();
        out.close();
    }

    static class Edge {
        Edge next;
        int to;
        public Edge(int to, Edge next) {
            this.to = to;
            this.next = next;
        }
    }
}

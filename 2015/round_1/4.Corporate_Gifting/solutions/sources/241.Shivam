#include"bits/stdc++.h"
using namespace std;

const int LIM = 200000;

struct node
{
    long long minsum,rcolor,delta,ncolor;
    vector<int> children;
    void reset()
    {
        minsum = rcolor = delta = ncolor = 0;
        children.clear();
    }
};

template<typename t>
void apply_in_postorder(node tr[],int present,t func)
{
    if(tr[present].children.size()!=0)
    {
    for(int child:tr[present].children)
    {
        apply_in_postorder(tr,child,func);
    }
}
    func(tr,tr[present]);
}

long long coloradd[LIM+10];

void process(node tr[],node& pres)
{
    if(pres.children.size() == 0)
    {
        pres.minsum = 1;
        pres.rcolor = 1;
        pres.delta = 1;
        pres.ncolor = 2;
    }
    else
    {
        long long min_total = 0;
        for(int k = 1;k<pres.children.size()+2;++k)
            coloradd[k] = k;
        for(int son:pres.children)
        {
            min_total += tr[son].minsum;
            coloradd[tr[son].rcolor]+=tr[son].delta;
        }
        long long sum1 = numeric_limits<long long >::max(),sum2 = numeric_limits<long long >::max();
        long long color1 = 0,color2 = 0;
        for(int k = 1;k<pres.children.size()+2;++k)
        {
            long long value = coloradd[k];
            if(value<sum1)
            {
                color2 = color1;
                sum2 = sum1;
                color1=k;
                sum1=value;
            }
            else if(value<sum2)
            {
                color2 = k;
                sum2 = value;
            }
        }
        pres.minsum = sum1+min_total;
        pres.rcolor = color1;
        pres.delta = sum2 - sum1;
        pres.ncolor = color2;
    }
}

node tree[LIM+1];

int main()
{
    cout.sync_with_stdio(false);
    cin.sync_with_stdio(false);
    cout.tie(NULL);
    cin.tie(NULL);

    int t;
    cin>>t;
    for(int ct = 1;ct<=t;++ct)
    {
        int n,parent;
        cin>>n;
        for(int i = 1;i<=n;++i)
        {
            tree[i].reset();
        }
        for(int i = 1;i<=n;++i)
        {
            cin>>parent;
            tree[parent].children.push_back(i);
        }
        apply_in_postorder(tree,1,process);
        cout<<"Case #"<<ct<<": "<<tree[1].minsum<<"\n";
    }

    return 0;
}

import java.util.ArrayList;
import java.util.Scanner;


public class FHC2015Round1D {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        FHC2015Round1D solver = new FHC2015Round1D();
        solver.init();
        int numCases = sc.nextInt();
        for (int i = 1; i <= numCases; i++) {
            System.out.format("Case #%d: %s%n", i, solver.solve(sc));
        }
    }

    void init() {
    }

    final static int MAX_N = 200_000;


    int[][] children = new int[MAX_N][];
    final static int MAX_DOLLAR = 18;
    int[][] bestPrice = new int[MAX_DOLLAR][];  // best[i][j]: 親がi使っているときの自分と子の最安値
    final static int INF = 100_000_000;


    @SuppressWarnings("unchecked")
    private String solve(Scanner sc) {
        int n = sc.nextInt();
        int[] par = new int[n];
        ArrayList<Integer>[] children = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            children[i] = new ArrayList<>();
        }
        for (int i = 0; i < MAX_DOLLAR; i++) {
            bestPrice[i] = new int[n];
        }
        for (int i = 0; i < n; i++) {
            par[i] = sc.nextInt() - 1;
            if (par[i] != -1) children[par[i]].add(i);
        }
        for (int i = 0; i < n; i++) {
            int m = children[i].size();
            this.children[i] = new int[m];
            for (int j = 0; j < m; j++) {
                this.children[i][j] = children[i].get(j);
            }
        }
        maxDoll = 0;
        int v1 = dfs(0, 1);
        int v2 = dfs(0, 2);
//        System.out.println(maxDoll);
        return Math.min(v1, v2) + "";
    }

    int maxDoll;

    int dfs(int v, int parentDollar) {
        if (bestPrice[parentDollar][v] != 0) return bestPrice[parentDollar][v];
        int best = INF;
        for (int dollar = 1; dollar < MAX_DOLLAR; dollar++) {
            if (dollar != parentDollar) {
                int childSum = 0;
                for (int u : children[v]) {
                    childSum += dfs(u, dollar);
                }
//                if (best > childSum + dollar) maxDoll = Math.max(maxDoll, dollar);
                best = Math.min(best, childSum + dollar);
            }
        }
        return bestPrice[parentDollar][v] = best;
    }


}

#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");

//CUT HERE

int tots[200001][50];
int bests[200001][4]; //bestidx, bestvalue, 2ndidx, 2ndvalue
//KEEP HERE

vector<vector<int> > children;
int done[200001];
int parents[200001];

int dolis[200001];


int main(void)
{
    int ttt;
    fin >> ttt;
    int ct = 0;
    
    cout.precision(9);
    fout.precision(9);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        
        //CUT HERE
        
        int ans = 0;
        
        int mxused = 0;
        
        memset(tots,0,sizeof(tots));
        memset(bests,0,sizeof(bests));
        memset(done,0,sizeof(done));
        
        int n;
        
        fin >> n;
        
        children.clear();
        
        vector<int> empt;
        
        int i,j,k;
        
        for(i=0; i<n; i++)
        {
            children.push_back(empt);
        }
        
        for(k=0; k<n; k++)
        {
            fin >> i;
            i--;
            parents[k]=i;
            if(i>=0)
                children[i].push_back(k);
            
        }
        
        int writeto=0;
        int readfrom=0;
        for(i=0; i<n; i++)
        {
            if(children[i].size()==0)
            {
                dolis[writeto]=i;
                writeto++;
            }
        }
        
        while(readfrom < writeto)
        {
            //process node
            
            i = dolis[readfrom];
            
           // cout << i << endl;
            
            for(j=1; j<50; j++)
            {
                for(int x=0; x<children[i].size(); x++)
                {
                    k = children[i][x];
                    
                    if(bests[k][0]!=j)
                        tots[i][j]+=bests[k][1];
                    else
                        tots[i][j]+=bests[k][3];
                }
                tots[i][j]+=j;
            }
            
            
            
            //make bests
            
            bests[i][0] = 1;
            bests[i][1] = tots[i][1];
            
            for(j=2; j<50; j++)
            {
                if(tots[i][j] < bests[i][1])
                {
                    bests[i][1]=tots[i][j];
                    bests[i][0]=j;
                }
            }
            
            if(bests[i][0]==1)
            {
                bests[i][2]=2;
                bests[i][3]=tots[i][2];
            }
            else{
                bests[i][2]=1;
                bests[i][3]=tots[i][1];

            }
            
            for(j=1; j<50; j++)
            {
                if(tots[i][j] < bests[i][3] && j!=bests[i][0])
                {
                    bests[i][3]=tots[i][j];
                    bests[i][2]=j;
                }
            }
            
            if(mxused < bests[i][0])
                mxused = bests[i][0];
            
//            cout << i << " " << bests[i][0] << " " << bests[i][1] << " " << bests[i][2] << " " << bests[i][3] << endl;
            
            //sort out parents
            
            j = parents[i];
            
            done[j]++;
            
            if(done[j] == children[j].size())
            {
                dolis[writeto]=j;
                writeto++;
            }
            readfrom++;
        }
        
        ans = bests[0][1];
        
        cout << mxused << endl;
        //KEEP HERE
        
        cout << "Case #" << ct << ": ";
        fout << "Case #" << ct << ": ";
        
        
        cout << ans;
        fout << ans;
        
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


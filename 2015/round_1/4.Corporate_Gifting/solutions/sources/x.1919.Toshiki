#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cassert>
#include <sstream>

using namespace std;

#define iter(c) __typeof((c).begin())

#define rep(i,n) for(int i=0; i<(int)(n); i++)
#define repd(i,n) for(int i=(int)(n); i-->0;)
#define repi(i,a,b) for(int i=(int)(a); i<=(int)(b); i++)
#define times(n) for(int __times=(n); __times-->0;)
#define each(i, c) for (iter(c) i = (c).begin(); i != (c).end(); ++i)

#define all(a) (a).begin(),(a).end()
#define elem(e, c) (find(all(c), (e)) != (c).end())
#define fst first
#define snd second

#define INF 1001001001
#define INFTY (INF<<32LL|INF)
#define EPS 1e-9
#define PI 3.141592653589793

typedef long long ll;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef vector<double> vd;
typedef vector<string> vs;

template <class T>
void debug(vector<T> v){ each(i,v.size()) cout<<*i<<" "; cout<<endl; }

int nextInt(){ int t; scanf("%d", &t); return t; }
string next(){ string t; cin>>t; return t; }

int N;
int boss[200010];
vi child[200010];

int best[200010], exc[200010], best2[200010];

//vi mystack;
vi toporder;

//void go(){
void go(int p){
  // if(best[p] >= 0) return;
//while(!mystack.empty()){
//  int p=mystack.back();
//  rep(i, child[p].size()) mystack.push_back(child[p][i]);
//  mystack.pop_back();

  //rep(i, child[p].size()) go(child[p][i]);

  int foo = 0;
  map<int,int> dif;
  dif[1]=1;
  // dif[2]=2;
  rep(i, child[p].size()){
    int c = child[p][i];
    foo += best[c];

    int k = exc[c];
    if(dif.count(k) == 0) dif[k] = k;
    dif[k] += best2[c]-best[c];
  }
  for(int k=1; ; k++){
    if(dif.count(k) == 0){
      dif[k]=k; break;
    }
  }
  vector<pair<int,int> > cand;
  each(x,dif){
    cand.push_back(make_pair(x->snd, x->fst));
  }
  sort(all(cand));

  best[p]=foo+cand[0].fst;
  exc[p]=cand[0].snd;
  best2[p]=foo+cand[1].fst;
}

int solve(){
  N=nextInt();
  rep(i,N) boss[i]=nextInt()-1;

  rep(i,N) child[i].clear();
  repi(i,1,N-1) child[boss[i]].push_back(i);

  // rep(i,N) best[i]=-1;

  // go(0);
  /*
  mystack.clear();
  mystack.push_back(0);
  go();
  */
  toporder.clear();
  deque<int> q;
  q.push_back(0);
  while(!q.empty()){
    int p=q.front(); q.pop_front();
    toporder.push_back(p);
    rep(i, child[p].size()){
      q.push_back(child[p][i]);
    }
  }
  repd(i, N) go(toporder[i]);

  return best[0];
}

int main(){
  int T=nextInt();
  repi(cases,1,T){
    cout<<"Case #"<<cases<<": ";
    cout<<solve();
    cout<<endl;
  }
  return 0;
}

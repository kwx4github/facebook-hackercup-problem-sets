#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define FOREACH(container, it) \
   for(typeof(container.begin()) it=container.begin(); it!=container.end(); it++)
#define EXP(i, s) for (int i = (s); i; i = qn[i])
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

#define MAXN 250000
#define MAXV 31

vi adj[MAXN];

int dp[MAXN][MAXV];

int rec(int u, int p, int val) {
  if (dp[u][val] != -1) {
    return dp[u][val];
  }
  dp[u][val] = val;
  for (const int v : adj[u]) {
    if (v != p) {
      int tmp = 1<<30;
      FOR(j, 1, MAXV) {
        if (j != val) {
          tmp = min(tmp, rec(v, u, j));
        }
      }
      dp[u][val] += tmp;
    }
  }
  return dp[u][val];
}

int main(int argc, char **argv){
  int T;
  cin >> T;
  FOR(ca, 1, T+1) {
    int N;
    cin >> N;
    FOR(i, 0, N) adj[i].clear();
    FOR(i, 0, N) {
      int j;
      scanf("%d", &j);
      --j;
      if (j >= 0) {
        adj[j].pb(i);
        adj[i].pb(j);
      }
    }
    int res = 1<<30;
    memset(dp, -1, sizeof(dp));
    FOR(i, 1, MAXV) {
      res = min(res, rec(0, -1, i));
    }
    printf("Case #%d: %d\n", ca, res);
  }
  return 0;
}

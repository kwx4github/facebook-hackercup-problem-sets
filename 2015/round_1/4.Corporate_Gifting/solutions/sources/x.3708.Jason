#include <cstdio>
#include <unordered_map>
#include <vector>
#include <cstring>
#include <queue>
#include <functional>
#include <set>

int cost[200001];
int depth[200001];

struct Node {
    int id;
    int depth;

    Node (int _id, int _depth):id(_id), depth(_depth){};
};

bool operator< (const Node &a, const Node &b) {
    return a.depth < b.depth;
}

bool operator> (const Node &a, const Node &b) {
    return a.depth > b.depth;
}

int find_depth (int id, std::unordered_map<int, std::vector<int> > &response_for, std::unordered_map<int, int> &manager_of)
{
    if (depth[id-1])
        return depth[id-1];

    int d;

    if (id == 1)
        d = 1;
    else
        d = find_depth(manager_of[id], response_for, manager_of) + 1;
  
    depth[id-1] = d;

    return d;
}

int main (int argc, char** argv)
{
    int T;
    scanf("%d", &T);

    for (int i=0; i<T; i++) {
        int N;
        scanf("%d", &N);

        std::unordered_map<int, std::vector<int> > response_for;
        std::unordered_map<int, int > manager_of;

        for (int j=0; j<N; j++) {
            int manager_id;
            scanf("%d", &manager_id);
            
            if (manager_id == 0)
                continue;

            response_for[manager_id].push_back(j+1);
            manager_of[j+1] = manager_id;
        }

        memset(depth, 0, sizeof(int)*N);

        std::priority_queue<Node, std::vector<Node>, std::less<Node> > nodes;

        for (int j=0; j<N; j++) {
            depth[j] = find_depth(j+1, response_for, manager_of);
        }

        for (int j=0; j<N; j++) {
            if (response_for.find(j+1) == response_for.end()) {
                cost[j] = 1;
            }else{
                cost[j] = 0;
                nodes.push(Node(j+1, depth[j]));
            }
        }

        while(!nodes.empty()) {
            Node n = nodes.top();
            nodes.pop();

            std::set<int> f;
            for (int j=0; j<response_for[n.id].size(); j++) {
                if (cost[response_for[n.id][j]-1] == 0) {
                    printf(">>>!!!\n");
                }
                f.insert(cost[response_for[n.id][j]-1]);
            }

            for (int j=1; j<=N; j++) {
                if (f.find(j) == f.end()) {
                    cost[n.id-1] = j;
                    break;
                }
            }
        }
        

        int total_cost = 0;
        for (int j=0; j<N; j++) {
            //printf("%d: %d\n",j+1, cost[j]);
            if (cost[j] == 0) {
                printf("!!!!!\n");
            }
            total_cost += cost[j];
        }

        printf("Case #%d: %d\n", i+1, total_cost);
    }
    return 0;
}

#include <iostream>
#include <vector>
#include <stdio.h>
#include <map>
#include <memory.h>
#include <set>
#include <queue>
using namespace std;
int n;
const int MAXN = 200001;
int parent[MAXN];
int inDegree[MAXN];
set<int> nodes[MAXN];
int findMin(int cur)
{
	/* BF
	int i = 1;
	for (; nodes[cur].count(i) ; i ++);
	return i;
	*/
	vector<int> tem(nodes[cur].begin() , nodes[cur].end());
	if (tem.size() == 0)
		return 1;
	int st = 0 , end = tem.size()-1;
	for(int i = 0 ; i < 50 ; i ++)
	{
		//int md = (st + ((end - st) / 2)) + 1;
		int md = (st + end + 1) / 2;
		if (tem[md] == md+1)
			st = md ;
		else
			end = md - 1;
	}
	if (tem[st] == st + 1)
		return tem[st] + 1;
	return 1;
}
int getRes()
{
	queue<int> q;
	int res = 0;
	for (int i = 0 ; i < n ; i ++)
		if (inDegree[i] == 0)
			q.push(i);
	while (!q.empty())
	{
		int front = q.front();
		q.pop();
		if (front == -1)
			continue;
		if (--inDegree[parent[front]] == 0)
			q.push(parent[front]);
		int r = findMin(front);
		res += r;
		if (parent[front] != -1)
			nodes[parent[front]].insert(r);
	}
	return res;
}
int main()
{
	freopen("test.in" , "rt", stdin);
	freopen("output.out" , "wt", stdout);
	int  t;
	scanf("%d" , &t);
	for (int cas = 1 ; cas <= t ; cas ++)
	{
		scanf("%d" , &n);
		memset(parent, 0 , sizeof parent);
		memset(inDegree, 0 , sizeof inDegree);
		for (int i = 0 ; i < n ; i ++)
			nodes[i].clear();
		int a;
		for (int i = 0 ; i < n ; i ++) {
			scanf("%d" , &a);
			parent[i] = a-1;
			if (a-1 == -1) continue;
			inDegree[a-1] ++;
		}
		printf("Case #%d: %d\n" , cas , getRes());
	}
	return 0;
}

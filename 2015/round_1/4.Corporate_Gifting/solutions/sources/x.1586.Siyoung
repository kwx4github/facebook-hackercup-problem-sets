#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <sstream>
#include <set>
#include <map>

#define fr(i,n) for(i=0;i<(int)(n);i++)
#define fit(a,b) for(typeof(b.begin()) a = b.begin(); a != b.end(); a++)
#define pb push_back
#define MP make_pair
#define F first
#define S second
#define SZ(u) ((int)u.size())
#define WT(x) cout << #x << ": " << x << endl

using namespace std;

typedef long long ll;
typedef pair<int,int> p2;
typedef vector<int> vi;

#define MAX 200020

int N;
int Par[MAX];
vi Child[MAX];
pair<p2, p2> Best[MAX];
int main() {
	int t, T;
	scanf("%d", &T);
	fr (t, T) {
		scanf("%d", &N);
		int i, j, k;
		fr (i, N) {
			Child[i].clear();
			Best[i].F.F = Best[i].S.F = -1;
			scanf("%d", &Par[i]);
			Par[i]--;
			if (Par[i] >= 0) Child[Par[i]].pb(i);
		}

		vi stack;
		stack.pb(0);
		while (stack.size()) {
			i = stack.back();
			if (SZ(Child[i]) == 0) {
				Best[i] = MP(MP(1, 1), MP(2, 2));
				stack.pop_back();
				continue;
			} else if (Best[Child[i][0]].F.F == -1) {
				fr (j, SZ(Child[i])) stack.pb(Child[i][j]);
				continue;
			}

			stack.pop_back();
			int needAll = 2;
			for (k = 1; ; ++k) {
				bool allBest = true;
				int cost = k;
				fr (j, SZ(Child[i])) {
					int x = Child[i][j];
					if (Best[x].F.F == k) {
						allBest = false;
						cost += Best[x].S.S;
					} else {
						cost += Best[x].F.S;
					}
				}

				if (Best[i].F.F == -1) {
					Best[i].F = MP(k, cost);
				} else if (Best[i].F.S > cost) {
					Best[i].S = Best[i].F;
					Best[i].F = MP(k, cost);
				} else if (Best[i].S.F == -1 || Best[i].S.S > cost) {
					Best[i].S = MP(k, cost);
				}
				if (allBest) needAll--;
				if (needAll <= 0) break;
			}
		}

		cout << "Case #" << t + 1 << ": " << Best[0].F.S << endl;
	}
	return 0;
}

//============================================================================
// Name        : CorporateGifting40.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <climits>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <list>
#include <stack>
#include <queue>

using namespace std;

#define FORIT(i,c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define FV(i,s,v) for (i = int(s); i < v.size(); i++)
#define FOR(i,s,e) for (i = int(s); i < int(e); i++)
#define ALL(c) (c).begin(), (c).end()
#define ALLR(c) (c).rbegin(), (c).rend()

#define INF 1070000000LL
#define MOD 1000000007LL
#define EPS 1e-9

typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
typedef pair<int, int> PI;

int T, N ;
VI children[200003] ;
VI order;
int memo[26][200010] ;

queue<int> q ;
void bfs(int n) {
  int j ;
  q.push(n) ;
  while (!q.empty()) {
    n = q.front() ;
    q.pop() ;
    order.push_back(n) ;
    FV (j, 0, children[n]) {
     q.push(children[n][j]) ;
    }
  }
  reverse(order.begin(), order.end()) ;
}

int solve () {
	int i, n, notAllowed, ret = INF ;

  FV (n, 0, order) {
    FOR (notAllowed, 0, 25) {
      int curCost = INF ;
      FOR (i, 1, 25) {
  		  if (i == notAllowed)
	  		  continue ;

  	  	int totCost = 0, j ;
	  	  FV (j, 0, children[order[n]]) {
		  	  totCost += memo[i][children[order[n]][j]] ;
  		  }
	  	  totCost += i ;
  	  	curCost = min (curCost, totCost) ;
      }
      memo[notAllowed][order[n]] = curCost ;
	  }
  }
  FOR (i, 0, 25) {
    ret = min (ret, i + memo[i][0]) ;
  }
  return ret ;
}


int main() {
	int i, j, k, cost ;

	cin >> T ;
	FOR (i, 0, T){
		memset (memo, -1, sizeof memo);
		FOR (j, 0, 200003){
			children[j].clear();
		}
    order.clear() ;
    while (!q.empty()) q.pop() ;
		cin >> N ;
		FOR (j, 0, N){
			int parent ;
			cin >> parent ;
			if (parent == 0)
				continue ;
			children[parent-1].push_back(j) ;
		}
    bfs(0) ;

		cost = solve() ;

		cout << "Case #" << (i+1) << ": " << cost << endl;
	}
	return 0;
}



//int solve (int v, int n){
//	int i, ret = 0 ;
//
//	FV (i, 0, children[n]){
//		ret += solve (v == 1? 2: 1, children[n][i]) ;
//	}
//	ret += v ;
//
//	return ret ;
//}

//int solve (int notAllowed, int n){
//	int i, ret = INF ;
//
//	FOR (i, 1, 25){
//		if (i == notAllowed)
//			continue ;
//
//		int totCost = 0, j ;
//		FV (j, 0, children[n]){
//			totCost += solve (i, children[n][j]) ;
//		}
//		totCost += i ;
//
//		ret = min (ret, totCost);
//	}
//
//	return ret ;
//}

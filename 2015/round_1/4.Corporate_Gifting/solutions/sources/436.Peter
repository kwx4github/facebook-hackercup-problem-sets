package R1;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class CorporateGifting {
	static String inFile = "in4.txt";
	static String outFile = "R4_out.txt";
	static InputStreamReader isr;
	static BufferedReader br;
	static PrintWriter pw;

	static int gint() throws NumberFormatException, IOException {
		return Integer.parseInt(br.readLine());
	}

	static int[] ginta() throws NumberFormatException, IOException {
		String l = br.readLine();
		String[] v = l.split(" ");
		int[] a = new int[v.length];

		for (int i = 0; i < a.length; i++) {
			a[i] = Integer.parseInt(v[i]);
		}

		return a;
	}

	public static void main(String[] args) throws NumberFormatException,
			IOException {
	 
		isr = new InputStreamReader(new FileInputStream(inFile));
		br = new BufferedReader(isr);
		pw = new PrintWriter(outFile);

		int t = gint();
		for (int i = 1; i <= t; i++) {
			String l = solve(i);
			System.out.println(l);
			pw.println(l);
		}

		pw.close();
	}

	static String solve(int caseN) throws NumberFormatException, IOException {

		int n = gint();
		int[] e = ginta();

		N[] nodes = new N[n];
		for (int i = 0; i < e.length; i++) {
			nodes[i] = new N(i);
		}

		for (int i = 0; i < e.length; i++) {
			if (e[i] > 0) {
				nodes[e[i] - 1].children.add(nodes[i]);
				nodes[i].parent = nodes[e[i] - 1];
			}
		}

		N[] nf = new N[n];
		int c = 0;
		LinkedList<N> q = new LinkedList<CorporateGifting.N>();
		q.add(nodes[0]);
		while (!q.isEmpty()) {
			N cur = q.removeFirst();
			nf[c++] = cur;
			for (N ch : cur.children) {
				q.addLast(ch);
			}
		}

		int MAX = 30;
		long[][] min = new long[n][MAX + 1];
		int[][] best = new int[n][2];
		for (int i = nf.length - 1; i >= 0; i--) {
			best[nf[i].id][0] = -1;
			best[nf[i].id][1] = -1;
			for (int j = 1; j <= MAX; j++) {
				long s = j;

				for (N ch : nf[i].children) {
					if (best[ch.id][0] == j) {
						s += min[ch.id][best[ch.id][1]];
					} else {
						s += min[ch.id][best[ch.id][0]];
					}
				}

				min[nf[i].id][j] = s;
				if (best[nf[i].id][0] == -1 || s < min[nf[i].id][best[nf[i].id][0]]) {
					best[nf[i].id][1] = best[nf[i].id][0];
					best[nf[i].id][0] = j;
				} else if (best[nf[i].id][1] == -1 || s < min[nf[i].id][best[nf[i].id][1]]) {
					best[nf[i].id][1] = j;
				}
			}

		}

		return String.format("Case #%d: %d", caseN, min[0][best[0][0]]);
	}

	static class N {
		public List<N> children;
		public N parent;
		public int id;

		public N(int id) {
			this.id = id;
			this.children = new ArrayList<CorporateGifting.N>();
			this.parent = null;
		}
	}

}

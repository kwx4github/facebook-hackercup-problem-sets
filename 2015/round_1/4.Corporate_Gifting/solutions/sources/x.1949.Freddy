#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

#define MAXN 500100
#define mp make_pair
#define fst first
#define snd second

struct edge {
	int next, node;
};

edge graph[MAXN*2];
int start[MAXN], nextEdge = 1;

void addEdge(int a, int b){
	graph[nextEdge].node = b;
	graph[nextEdge].next = start[a];
	start[a] = nextEdge++;
}

int mex(vector<int> v){
	int i;
	if (v.size() == 0 || v[0] != 1) return 1;
	for (i = 0; i < v.size() - 1; i++)
		if (v[i+1] - v[i] > 1)
			break;
	return v[i] + 1;
}

int T, N;
vector<int> v;
int g[MAXN];

void f(int n){
	long long r = 0;

	for (int i = start[n]; i; i = graph[i].next){
		f(graph[i].node);
	}

	v.clear();

	for (int i = start[n]; i; i = graph[i].next){
		v.push_back(g[graph[i].node]);
	}

	g[n] = mex(v);
}

int main(){
	scanf("%d", &T);

	for (int t = 1; t <= T; t++){
		fill(start, start + MAXN, 0);
		nextEdge = 1;

		scanf("%d", &N);

		for (int i = 1; i <= N; i++){
			int x;
			scanf("%d", &x);
			addEdge(x, i);
		}

		f(1);

		long long ans = 0;

		for (int i = 1; i <= N; i++)
			ans += g[i];

		printf("Case #%d: %lld\n", t, ans);
	}
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <algorithm>
#include <limits>
#include <iomanip>

#define INF 1000000000
#define Inf 1000000000000000000

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

int main() {
  //freopen("in40","r",stdin);
  //freopen("out40","w",stdout);
  int p[200010], t, n, x, inEdges[200010], pd[200010][4];
  vvi filhos;
  vi topoSort;
  scanf("%d",&t);
  for(int cas = 1; cas <= t; ++cas) {
    scanf("%d",&n);
    topoSort.clear();
    filhos.clear();
    filhos.resize(n+1);
    memset(pd,0,sizeof(pd));
    memset(inEdges,0,(n+1)*sizeof(int));
    for(int i = 1; i <= n; ++i) {
      scanf("%d",&x);
      filhos[x].push_back(i);
      inEdges[x]++;
      p[i] = x;
    }
    queue<int> q;
    for(int i = 1; i <= n; ++i)
      if (inEdges[i] == 0) q.push(i);
    while(!q.empty()) {
      int atual = q.front();
      q.pop();
      topoSort.push_back(atual);
      inEdges[p[atual]]--;
      if (inEdges[p[atual]] == 0) q.push(p[atual]);
    }

    for(int i = 0; i < n; ++i) {
      int atual = topoSort[i];
      if (filhos[atual].size() == 0) {
        pd[atual][1] = 1;
        pd[atual][2] = 2;
        pd[atual][3] = 3;
      } else {
        int soma = 1;
        for(int j = 0; j < filhos[atual].size(); ++j)
          soma += min(pd[filhos[atual][j]][2],pd[filhos[atual][j]][3]);
        pd[atual][1] = soma;

        soma = 2;
        for(int j = 0; j < filhos[atual].size(); ++j)
          soma += min(pd[filhos[atual][j]][1],pd[filhos[atual][j]][3]);
        pd[atual][2] = soma;

        soma = 3;
        for(int j = 0; j < filhos[atual].size(); ++j)
          soma += min(pd[filhos[atual][j]][1],pd[filhos[atual][j]][2]);
        pd[atual][3] = soma;
      }
    }

    printf("Case #%d: %d\n",cas,min(pd[1][1],min(pd[1][2],pd[1][3])));
  }

  return 0;
}

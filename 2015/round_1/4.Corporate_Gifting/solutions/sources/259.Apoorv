#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<utility>
#include<queue>

using namespace std;

typedef vector<int> vi; 
typedef pair<int,int> pii;
typedef pair<int,int> ii;
typedef long long int lld;
typedef pair<lld,lld> ll;

#define F                            first
#define S                            second
#define pb push_back
#define MAX            212345              

int par[MAX],deg[MAX];
lld mcost[MAX],mcost2[MAX];
ll cost[MAX];//scratch pad
int best[MAX];//best[i] stores the gift i must purchase to have the min cost for his subtree
pii clash[MAX];//chash[i].F is the gift i buys to minimize cost in his subtree. clash[i].S = i
vi children[MAX];

int main()
{
   int cases,casectr;
   for(scanf("%d",&cases),casectr=1;casectr<=cases;++casectr){
      printf("Case #%d: ",casectr);
      memset(deg,0,sizeof(deg));

      int n;
      scanf("%d",&n);
      for(int i=0;i<=n;++i)
         children[i].clear();
      for(int i=1;i<=n;++i){
         scanf("%d",&par[i]);
         deg[i]++;
         deg[par[i]]++;
         children[par[i]].pb(i);
      }
      queue<int> q;
      for(int i=1;i<=n;++i)
         if(deg[i]==1)
            q.push(i);
      while(!q.empty()){
         int curr = q.front();
         if(curr==0) break;
         q.pop();
         lld sum = 0;
         int k = children[curr].size();
         //printf("node %d has %d children\n",curr,k);
         for(int i=0;i<k;++i){
            int child = children[curr][i];
            sum+=mcost[child];
            clash[i]=ii(best[child], child);
         }
         sort(clash,clash+k);
         int ctr=k;
         ctr--;//now it points to the last occupied element
         ll *costarr=cost-1;
         int lim = min(k+2,n);
         for(int i=lim;i;--i){//can this exceed N$ ? No longer :)
            //buying gift worth $i
            lld lsum =sum+i;
            while((ctr>=0)&&(i==clash[ctr].F)){
               int child = clash[ctr].S;
               lsum-=mcost[child];//1-indexed array
               lsum+=mcost2[child];
               ctr--;
            }
            costarr[i]=ll(lsum, i);
         }
         nth_element(cost,cost+1,cost+lim);
         mcost[curr]=cost[0].F;
         mcost2[curr]=cost[1].F;
         best[curr]=cost[0].S;
         deg[par[curr]]--;
         if(deg[par[curr]]==1)//CEO will be added too
            q.push(par[curr]);
      }
      printf("%lld\n",mcost[1]);
   }
}

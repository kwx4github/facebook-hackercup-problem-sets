#include <iostream>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <queue>
#include <stack>
#include <vector>
#include <utility>
using namespace std;

#define MP make_pair
#define PII pair <int, int>

const int MAXN = 2e5 + 3;

int opt[MAXN][3];
bool vis[MAXN];
vector <int> adj[MAXN];

int calc(int n) {
	stack <PII> s;
	s.push(MP(0, 1));

	vector <PII> order(n);
	int index = 0;

	while (!s.empty()) {
		PII p = s.top();
		s.pop();
		int dist = p.first, v = p.second;
		vis[v] = true;

		order[index++] = p;

		for (int i = 0; i < adj[v].size(); i++) {
			int w = adj[v][i];
			if (!vis[w]) {
				s.push(MP(dist + 1, w));
			}
		}
	}

	sort(order.begin(), order.end());
	reverse(order.begin(), order.end());
	memset(vis, 0, sizeof(vis));

	//for (int i = 0; i < n; i++) fprintf(stderr, "%d %d\n", order[i].first, order[i].second);

	for (int i = 0; i < n; i++) {
		int v = order[i].second;
		vis[v] = true;
		opt[v][0] = 1, opt[v][1] = 2, opt[v][2] = 3;
		
		for (int j = 0; j < adj[v].size(); j++) {
			int w = adj[v][j];
			if (vis[w]) {
				opt[v][0] += min(opt[w][1], opt[w][2]);
				opt[v][1] += min(opt[w][0], opt[w][2]);
				opt[v][2] += min(opt[w][0], opt[w][1]);
			}
		}
	}

	return min(opt[1][0], min(opt[1][1], opt[1][2]));
}

int main(void) {
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int tests;
	scanf("%d", &tests);

	/* TIME START */
	clock_t elapsed = clock();
	/* END TIME START */
	for (int t = 1; t <= tests; t++) {
		int n, m;
		scanf("%d", &n);
		memset(opt, 0, sizeof(opt));
		memset(vis, 0, sizeof(vis));
		for (int i = 1; i < MAXN; i++) adj[i].clear();

		for (int i = 1; i <= n; i++) {
			scanf("%d", &m);
			if (i == 1) continue;
			adj[m].push_back(i);
			adj[i].push_back(m);
		}
		//fprintf(stderr, "------\n");
		printf("Case #%d: %d\n", t, calc(n));
	}

	/* TIME END */
	elapsed = clock() - elapsed;
	fprintf(stderr, "Computation took %f seconds.\n", (double) elapsed/CLOCKS_PER_SEC);
	/* END TIME TEST */
	return 0;
}

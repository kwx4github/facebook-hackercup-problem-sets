#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
#pragma comment(linker, "/STACK:36777216")
struct edge {
	int b, e;
}edges[410000];

bool operator<(const edge &a, const edge &b) {
	return a.b < b.b;
}
struct node {
	int st;
	int ed;
}nodes[210000];

const int m = 30;
int ret[210000][m];

int dfs(int x, int e, int fa) {
	if (e != -1 && ret[x][e] != -1)
		return ret[x][e];
	int best = 2147483647;
	for (int i = 1; i < m; i++) {
		int val = i;
		if (i == e)
			continue;
		for (int j = nodes[x].st; j < nodes[x].ed; j++) {
			int next = edges[j].e;
			if (fa == next) continue;
			val += dfs(next, i, x);
		}
		if (best > val) {
			best = val;
		}
	}
	ret[x][e] = best;
	return best;
}

int main() {
	int T;
	scanf("%d", &T);
	for (int TT = 1; TT <= T; TT++) {
		int n;
		scanf("%d", &n);
		int len = 0;
		memset(ret, -1, sizeof(ret));

		for (int i = 0; i < n; i++) {
			int x;
			scanf("%d", &x);
			x--;
			if (x != -1) {
				edges[len].b = x;
				edges[len].e = i;
				len++;
				edges[len].b = i;
				edges[len].e = x;
				len++;
			}
		}
		sort(edges, edges + len);
		for (int i = 0; i < n; i++) {
			nodes[i].st = 2 * n + 1;
			nodes[i].ed = 0;
		}
		for (int i = 0; i < len; i++) {
			node &nx = nodes[edges[i].b];
			nx.st = min(nx.st, i);
			nx.ed = max(nx.ed, i + 1);
		}

		printf("Case #%d: %d\n", TT, dfs(0, -1, -1));
	}
}
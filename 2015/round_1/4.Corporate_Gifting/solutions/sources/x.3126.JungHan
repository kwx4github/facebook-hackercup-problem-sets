/* ¹®Á¦
	2015.

*/


#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <functional>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <iostream>

#define ENP 	printf("**Entry Point**\n")
#define A		first
#define B		second
#define MP		make_pair

using namespace std;

typedef long long ll;
typedef vector 	<double> 			vec_d;
typedef vector 	<vec_d>				vvec_d;
typedef vector 	<int>				vec_i;
typedef vector 	<vec_i>				vvec_i;
typedef pair 	<int, int> 			pair_i;
typedef pair 	< pair_i, pair_i > 	pp_i;

const int INF = 0x7fffffff;
const int MINF = 0x80000000;
const int mod = 1000000007;
const int cons = 200001;


bool chk[cons];
vector <int> tr[cons];
int manager[cons];
int dp[cons][4];

void init()
{
	memset(dp, 0, sizeof(dp));
	memset(chk, 0, sizeof(chk));
//	memset(dp, 0x7f, sizeof(dp));
	memset(manager, 0, sizeof(manager));
	for (int i = 0; i < cons; i++)
	{
		tr[i].clear();
	}
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt","w", stdout);
#endif

	int TestNum;
	scanf("%d", &TestNum);
	
	for(int TestCase = 1; TestCase <= TestNum; TestCase++)
	{
		printf("Case #%d: ", TestCase);
		
		init();
		int n;
		scanf("%d", &n);

		for (int i = 1; i <= n; i++)
		{
			scanf("%d", manager + i);
			tr[manager[i]].push_back(i);
		}

		queue <int> qu;

		for (int i = 1; i <= n; i++)
		{
			if (tr[i].size() == 0)
			{
				chk[i] = true;
				qu.push(i);
			}
		}

		while (!qu.empty())
		{
			int now = qu.front(); qu.pop();

			int t = manager[now];
			dp[t][3] += min(dp[now][2] + 2, dp[now][1] + 1);
			dp[t][2] += min(dp[now][1] + 1, dp[now][3] + 3);
			dp[t][1] += min(dp[now][2] + 2, dp[now][3] + 3);



				/*	dp[t][3] = min(dp[t][3], min(dp[now][2] + 2, dp[now][1] + 1));
				dp[t][2] = min(dp[t][2], min(dp[now][1] + 1, dp[now][3] + 3));
				dp[t][1] = min(dp[t][1], min(dp[now][2] + 2, dp[now][3] + 3));
				*/
	//		printf("t : %d now : %d\n", t, now);
	//		printf("%d %d %d\n", dp[t][1], dp[t][2], dp[t][3]);

			if (t != 0 && chk[t] == false)
			{
				chk[t] = true;
				qu.push(t);
			}
		}
		printf("%d\n", min(dp[1][1] + 1, min(dp[1][2] + 2, dp[1][3] + 3)));

	}

	return 0;
}
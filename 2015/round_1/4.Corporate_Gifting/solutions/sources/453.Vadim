#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxn = 2 * 100500;
vector<int> g[maxn];

const int magic = 19;
int dp[maxn][magic];

int dfs(int v, int up) {
    int& res = dp[v][up];
    if (res >= 0) return res;

    int best = inf;
    for (int i = 0; i < magic; ++i) if (i != up) {
        int cur = i;
        for (int u : g[v])
            cur += dfs(u, i);
        best = min(best, cur);
    }
    res = best;

    //E(v); E(up) Eo(res);
    return res;
}

int go(int upvalue) {
    int res = upvalue;
    for (int u : g[1])
        res += dfs(u, upvalue);
    //E("==="); E(upvalue); Eo(res);
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    int T; cin >> T;
    for (int test = 1; test <= T; ++test) {
        Eo(test);
        int n; cin >> n;
        memset(dp, 0xc0, sizeof(dp));
        for (int i = 0; i <= n; ++i) g[i].clear();
        for (int i = 0; i < n; ++i) {
            int q; cin >> q;
            if(i) g[q] << (i+1);
        }

        int best = inf;
        for (int i = 0; i < magic; ++i) {
            int cur = go(i);
            best = min(best, cur);
        }
        cout << "Case #" << test << ": " << n + best << endl;
    }
    return 0;
}

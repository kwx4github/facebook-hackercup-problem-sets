

#if 1
#define _LIBCPP_DEBUG 0

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cassert>
#include <fstream>

using namespace std;
typedef int64_t int64;

static void solve();


int main() {
#if 0
	freopen("D1big.in.txt","w",stdout);
	cout << 113 << endl;
	
	// 1. flat: 200001
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 200000; i++)
		cout << 1 << " ";
	cout << endl;
	
	// 2. 2 x flat: 200003
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 1; i <= 100000; i++)
		cout << 1 << " ";
	for (int i = 2; i <= 100000; i++)
		cout << 2 << " ";
	cout << endl;

	// 3. 300000
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 1; i <= 100000; i++)
		cout << 1 << " ";
	for (int i = 2; i <= 100000; i++)
		cout << i << " ";
	cout << endl;

	// 4. 299998
	cout << 199999 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 100000; i++)
		cout << 1 << " ";
	for (int i = 2; i <= 100000; i++)
		cout << i << " ";
	cout << endl;

	// 5. skinny: 300000
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 200000; i++)
		cout << (i - 1) << " ";
	cout << endl;

	// 6. skinny: 299998
	cout << 199999 << endl;
	cout << 0 << " ";
	for (int i = 3; i <= 200000; i++)
		cout << (i - 2) << " ";
	cout << endl;

	// 7. binary: 266675?
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 200000; i++)
		cout << (i / 2) << " ";
	cout << endl;
	
	// 8. binary:
	cout << 15 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 15; i++)
		cout << (i / 2) << " ";
	cout << endl;

	// 9. binary:
	cout << 255 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 255; i++)
		cout << (i / 2) << " ";
	cout << endl;

	// 10. binary:
	cout << ((1 << 12) - 1) << endl;
	cout << 0 << " ";
	for (int i = 2; i <= ((1 << 12) - 1); i++)
		cout << (i / 2) << " ";
	cout << endl;


	// 11. binary:
	cout << ((1 << 17) - 1) << endl;
	cout << 0 << " ";
	for (int i = 2; i <= ((1 << 17) - 1); i++)
		cout << (i / 2) << " ";
	cout << endl;

	// 12. 4-ary:
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 200000; i++)
		cout << (i / 4) << " ";
	cout << endl;

	// 13. 16-ary:
	cout << 200000 << endl;
	cout << 0 << " ";
	for (int i = 2; i <= 200000; i++)
		cout << (i / 16) << " ";
	cout << endl;

	// binary
	for (int j = 1; j <= 100; j++) {
		cout << j << endl;
		cout << 0 << " ";
		for (int i = 2; i <= j; i++)
			cout << (i / 2) << " ";
		cout << endl;
	}
#else
	
	freopen("corporate_gifting.txt","r",stdin);
//	freopen("D1.in.txt","r",stdin);
//	freopen("D1big.in.txt","r",stdin);
	freopen("D1.out.txt","w",stdout);
	int test_case;
	cin >> test_case;
	for (int t = 1; t <= test_case; ++t) {
		cout << "Case #" << t << ": ";
		solve();
		cout << '\n';
	}
#endif
	return 0;
}

static int valueLimit(int x, vector<int> const & descendantCount, int childCount) {
	int limit = descendantCount[x] == 0 ? 2 : int(2 + log2(descendantCount[x]));
	limit = min(childCount + 2, limit);
	limit = max(limit, 3);
	return limit;
}

static void solve() {
	int N;
	cin >> N;
	
	vector<vector<int>> bestWithout(N + 1);
	vector<int> parent(N + 1);
	vector<int> descendantCount(N + 1);
	vector<int> descendantDepth(N + 1);
	vector<vector<int>> children(N + 1);
	unordered_set<int> leaves(N);
	for (int i = 1; i <= N; i++) {
		leaves.insert(i);
	}
	for (int i = 1; i <= N; i++) {
		cin >> parent[i];
		leaves.erase(parent[i]);
	}
	for (int i = 1; i <= N; i++) {
		children[parent[i]].push_back(i);
	}
	unordered_set<int> cur(leaves);
	while (!cur.empty()) {
		unordered_set<int> next(cur.size());
		for (auto it : cur) {
			descendantCount[parent[it]] += 1 + descendantCount[it];
			descendantDepth[parent[it]] = max(descendantDepth[parent[it]], descendantDepth[it] + 1);
			if (it > 1)
				next.insert(parent[it]);
		}
		swap(cur, next);
	}

	cur = leaves;
	while (!cur.empty()) {
		unordered_set<int> next(cur.size());
		for (auto root : cur) {
			int limit = valueLimit(root, descendantCount, int(children[root].size()));

			bestWithout[root].resize(1 + valueLimit(parent[root], descendantCount, int(children[parent[root]].size())));
			fill(bestWithout[root].begin(), bestWithout[root].end(), std::numeric_limits<int>::max());
			for (int v = 1; v <= limit; v++) {
				int cost = v;
				for (auto c : children[root]) {
					cost += bestWithout[c][v];
				}
				for (int ibw = 1; ibw < bestWithout[root].size(); ibw++) {
					if (ibw != v)
						bestWithout[root][ibw] = min(bestWithout[root][ibw], cost);
				}
			}
			if (root > 1 && descendantDepth[parent[root]] == descendantDepth[root] + 1)
				next.insert(parent[root]);
		}
		swap(cur, next);
	}

	int bestCost = *min_element(bestWithout[1].begin(), bestWithout[1].end());
	
	cout << bestCost;
}

#endif


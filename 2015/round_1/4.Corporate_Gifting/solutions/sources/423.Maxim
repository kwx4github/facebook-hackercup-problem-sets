#include <algorithm>
#include <array>
#include <iomanip>
#include <istream>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
// Solution template generated by caide

#include <iostream>


struct Res {
	long long minCost;
	int maxId;

	bool operator<(const Res& that) const {
		return minCost < that.minCost || (minCost == that.minCost && maxId < that.maxId);
	}

	Res& operator+=(const Res& that) {
		minCost += that.minCost;
		maxId = max(maxId, that.maxId);
		return *this;
	}
};

const int MAXK = 250;

class Solution {
public:
    void solve(std::istream& in, std::ostream& out) {
		int N;
		in >> N;
		children.resize(N);
		res.resize(N);
		for (int i = 0; i < N; ++i) {
			int p;
			in >> p;
			if (p > 0)
				children[p - 1].insert(i);
		}
		go(0);
		Res ret = *min_element(res[0].begin(), res[0].end());
		out << ret.minCost << endl;
		cerr << ret.maxId << endl;
    }

private:
	vector<set<int>> children;
	vector<array<Res, MAXK>> res;

	void go(int root) {
		vector<tuple<Res, Res, int>> best;
		for (int c : children[root]) {
			go(c);
			auto i = min_element(res[c].begin(), res[c].end());
			auto j = min_element(res[c].begin(), i);
			auto k = min_element(i + 1, res[c].end());
			Res secondBest = (j == i ? *k :
				k == res[c].end() ? *j :
				min(*j, *k));
			best.push_back(make_tuple(*i, secondBest, i - res[c].begin()));
		}
		for (int rootColor = 0; rootColor < MAXK; ++rootColor) {
			res[root][rootColor].minCost = rootColor + 1;
			res[root][rootColor].maxId = rootColor;
			for (const auto& c : best) {
				res[root][rootColor] += (get<2>(c) == rootColor ? get<1>(c) : get<0>(c));
			}
		}
	}

};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);
	int T;
	in >> T;
	for (int test = 1; test <= T; ++test) {
		out << "Case #" << test << ": ";
		Solution solution;
		solution.solve(in, out);
	}
}




int main() {
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    solve(std::cin, std::cout);
    return 0;
}



























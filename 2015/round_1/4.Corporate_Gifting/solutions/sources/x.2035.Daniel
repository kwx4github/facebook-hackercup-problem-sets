#include <fstream>
#include <vector>
#include <cstring>
#include <iostream>
#include <stack>
#include <algorithm>
using namespace std;

typedef long long int64;
#define int int64

ifstream fin("corporate_gifting.txt");
ofstream fout("1-4.out");

vector<int> child[200005];
int cost[200005];
int vis[200005];
stack<int> sh, s;

void postorder()
{
	sh.push(0);
	while(!sh.empty()) {
		int k = sh.top();
		sh.pop();
		s.push(k);
		
		for(int i = 0; i < child[k].size(); ++i) {
			sh.push(child[k][i]);
		}
	}
}

void dfs_assign()
{
	while(!s.empty()) {
		int node = s.top();
		s.pop();
		
		if(child[node].empty()) {
			cost[node] = 1;
			continue;
		}
				
		vector<int> child_cost;
		for(int i = 0; i < child[node].size(); ++i) {
			child_cost.push_back(cost[child[node][i]]);
		}
		sort(child_cost.begin(), child_cost.end());
		
		int starting = 0;
		int i;
		for(i = 0; i < child_cost.size(); ++i) {
			if(child_cost[i] > starting + 1) {
				cost[node] = starting + 1;
				break;
			} else starting = child_cost[i];
		}
		
		if(i == child_cost.size()) cost[node] = starting + 1;
	}
}

main()
{
	ios_base::sync_with_stdio(0);
	int t; fin >> t;
	
	for(int i = 0; i < t; ++i) {
		int n; fin >> n;
		
		for(int j = 0; j < n; ++j) {
			int k; fin >> k;
			if(j == 0) continue;
			child[k - 1].push_back(j);
		}
		
		postorder();
		dfs_assign();
		
		fout << "Case #" << i+1 << ": ";
		
		int ans = 0;
		for(int j = 0; j < n; ++j) ans += cost[j];
		
		fout << ans << endl;
		
		for(int j = 0; j < 200005; ++j) {
			child[j].clear();
			vis[j] = 0;
			cost[j] = 0;
		}
	}
}

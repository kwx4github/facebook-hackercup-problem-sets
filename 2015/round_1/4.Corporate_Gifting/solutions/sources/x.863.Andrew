#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <memory.h>
#include <string.h>
#include <sstream>
#include <queue>
#include <bitset>

#pragma comment(linker,"/STACK:16777216")
using namespace std;

//Loops
#define FOR(i,a,b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(int (i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int (i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (int (i) = 0; (i) < int((a).size()); ++(i))
#define MEM(a,b) memset((a),(b),sizeof(a))

//Constants
#define inf 1000000000
#define pi 2*acos(0.0)
#define eps 1e-12
#define N 200010
#define M 2010

//Functions
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()

//Pairs
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second

//Input-Output
#define FREOPEN(a,b) freopen(a,"r",stdin); freopen(b,"w",stdout);

typedef vector<int> vint;
typedef long long ll;
typedef pair<int, int> pii;

const int mod = int(1e9) + 7;

int p[N] = { 0 };
vector<int> G[N];
vector<int> h[N];
set<int> v[N];

int maxH = 0;

void dfs(int v, int height){
	maxH = max(maxH, height);
	h[height].push_back(v);
	fe(i, G[v]){
		int to = G[v][i];
		dfs(to, height + 1);
	}
}

int mex(const set<int> &s){
	for (int i = 1;; i++)
		if (s.find(i) == s.end())return i;
}

int main()
{
	FREOPEN("corporate_gifting.txt", "output.txt");
	int test, n, ans;
	scanf("%d", &test);

	for (int t = 0; t < test; t++){
		
		scanf("%d", &n);
		
		for (int i = 0; i <= n; i++)h[i].clear(), v[i].clear(), G[i].clear();
		
		for (int i = 1; i <= n; i++){
			scanf("%d", &p[i]);
			G[p[i]].push_back(i);
		}

		ans = maxH = 0;
		
		dfs(1,1);

		for (int height = maxH; height > 0; height--){
			fe(i, h[height]){
				int cur = h[height][i];
				int res = mex(v[cur]);
				ans += res;
				v[p[cur]].insert(res);
			}
		}

		printf("Case #%d: %d\n", t + 1, ans);
	}
	
	return 0;
}
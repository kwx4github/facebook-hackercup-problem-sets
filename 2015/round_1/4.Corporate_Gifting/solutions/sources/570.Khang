#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <algorithm>
#include <cmath>
using namespace std;
#define fi "corporate_gifting.txt"
#define fa "output.txt"
#define foru(i,l,r) for(int i=l;i<r;i++)
#define ford(i,l,r) for(int i=l;i>r;i--)
#define re return
#define ll long long
#define pb push_back

const int maxN=2e5+10;
int sta[maxN],f[maxN][11],n;
vector<int> ke[maxN];
stack<int> st;
int g[100];

int res[maxN],m=1;

void taodt(int bac,int sta) {
    foru(i,1,bac) foru(j,0,bac-i+1) {
        ++m;
        printf("%i ",sta);
        taodt(i,m);
    }
}

void init() {
    cin>>n;
    foru(i,0,n+1) ke[i].clear();
    foru(i,1,n+1) {
        int x;
        scanf("%i",&x);
        //x=i-1;
        ke[x].pb(i);
    }
    foru(i,0,n+2) sta[i]=0;
}

void dfs() {
    st.push(0);
    while (!st.empty()) {
        int u=st.top();
        st.pop();
        if (sta[u]==0) {
            foru(i,0,11) f[u][i]=0;
        }
        bool stop=true;
        foru(i,sta[u],ke[u].size()) {
            ++sta[u];
            st.push(u);
            st.push(ke[u][i]);
            stop=false;
            break;
        }
        if (stop) {
            foru(i,0,ke[u].size()) {
                int m1,m2;
                if (f[ke[u][i]][0]>f[ke[u][i]][1]) {
                    m1=1;
                    m2=0;
                } else {
                    m1=0;
                    m2=1;
                }
                foru(j,2,11) if (f[ke[u][i]][j]<f[ke[u][i]][m1]) {
                    m2=m1;
                    m1=j;
                } else if (f[ke[u][i]][j]<f[ke[u][i]][m2]) m2=j;
                foru(j,0,11)
                    if (j==m1) {
                        f[u][j]+=f[ke[u][i]][m2];
                    } else {
                        f[u][j]+=f[ke[u][i]][m1];
                    }
            }
            foru(j,0,11) f[u][j]+=(j+1);
        }
    }
}

void trace(int u,int d) {
    res[u]=d;
    foru(i,0,ke[u].size()) {
        int mau;
        if (d==0) mau=1; else mau=0;
        foru(j,0,11) if (j!=d && f[ke[u][i]][j]<f[ke[u][i]][mau]) mau=j;
        trace(ke[u][i],mau);
    }
}

void xuly() {
    dfs();
    int ans=f[1][0];
    foru(i,1,11) ans=min(ans,f[1][i]);
    printf("%i\n",ans);
//    foru(i,1,11) if (ans==f[1][i]) {
//        trace(1,i);
//        break;
//    }
//    foru(i,1,n+1) printf("%i %i\n",i,res[i]);
//    cout<<res[1];
}

int main() {
    freopen(fi,"r",stdin);
    freopen(fa,"w",stdout);
    int t;
    scanf("%i\n",&t);
    foru(i,0,t) {
        printf("Case #%i: ",i+1);
        init();
        xuly();
    }
    g[1]=1;
    foru(i,2,12) {
        foru(j,1,i) g[i]+=(i-j+1)*g[j];
        ++g[i];
        t=max(t,g[i]);
    }
    //cout<<t;
    //printf("1\n%i\n0 ",g[2]);
    //taodt(2,1);
    fclose(stdin);
    fclose(stdout);
    return 0;
    re 0;
}

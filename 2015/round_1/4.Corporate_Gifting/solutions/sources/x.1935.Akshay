/////////////////////////////////////////
//  Author : Akshay Jaggi             //
///////////////////////////////////////

#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<utility>
#include<queue>
#include<stack>
#include<string>
#include<cstring>
#include<map>
#define rep(i,N) for(int (i)=0;(i)<(N);(i)++)
#define repi(i,j,N) for(int (i)=(j);(i)<(N);(i)++)
#define repg(i,j,N) for((i)=(j);(i)<(N);(i)++)
#define si(i) scanf("%d",&(i))
#define sl(i) scanf("%lld",&(i))
#define pi(i) printf("%d",(i))
#define pl(i) printf("%lld",(i))
#define pin(i) printf("%d\n",(i))
#define pln(i) printf("%lld\n",(i))
#define pw    printf(" ");
#define pn    printf("\n");

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
#define sz(a) int((a).size()) 
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 

vector <int> child[200005];
int state[200005][2];
vector <int> :: iterator tmp1[200005];

/*int dfs(int b, int x)
{
	tr(child[b],it)
	{
		if(state[*it][0]==-1)
		{
			state[*it][0]=dfs(*it,0);
			state[*it][1]=dfs(*it,1);
		}
	}
	int sum0=0,sum1=0;
	tr(child[b],it)
	{
		sum0+=state[*it][0];
		sum1+=state[*it][1];
	}
	if(x==1)
		return sum0+2;
	if(sum0+3<sum1+1)
		return sum0+3;
	return sum1+1;
}
*/
int main()
{
	ios_base::sync_with_stdio(false);

	int T;
	cin>>T;

	rep(t,T)
	{
		for(int i=0;i<200005;i++)
			child[i].clear();
		memset(state,-1,sizeof(state));
		int N;
		cin>>N;
		rep(i,N)
		{
			int tmp;
			cin>>tmp;
			child[tmp].PB(i+1);
		}
		rep(i,N)
		{
			tmp1[i]=child[i].begin();
		}

		stack <int> cur,p;
		cur.push(1);

		while(!cur.empty())
		{
			int x = cur.top();
			cur.pop();
			p.push(x);
			tr(child[x],it)
			{
				cur.push(*it);
			}
		}
		while(!p.empty())
		{
			int b = p.top();
			p.pop();
			int sum0=0,sum1=0;
				tr(child[b],it)
				{
					sum0+=state[*it][0];
					sum1+=state[*it][1];
				}
	state[b][1]=sum0+2;
	if(sum0+3<sum1+1)
		 state[b][0]=sum0+3;
	else state[b][0]=sum1+1;
		}
		cout<<"Case #"<<t+1<<": "<<min(state[1][0],state[1][1])<<endl;
	}
	return 0;
}


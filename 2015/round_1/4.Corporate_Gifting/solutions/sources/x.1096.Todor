package round1;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Queue;

public class P4 {

	private final static String INPUT_FILE_NAME = "input.in";
	private final static String OUTPUT_FILE_NAME = "output.out";

	int[] parents;
	ArrayList<Integer> childsList[];
	HashSet<Integer> childMap[];

	private String solveCase() throws Exception {
		int n = readNextUInt();
		childMap = new HashSet[n + 1];
		parents = new int[n + 1];
		for (int i = 1; i < n + 1; ++i) {
			parents[i] = readNextUInt();
		}
		childsList = new ArrayList[n + 1];
		for (int i = 0; i < n + 1; ++i) {
			childMap[i] = new HashSet<Integer>();
			childsList[i] = new ArrayList<Integer>();
		}
		for (int i = 1; i < n + 1; ++i) {
			childsList[parents[i]].add(i);
		}
		Queue<int[]> q = new ArrayDeque<int[]>();
		boolean vis[] = new boolean[n + 1];
		ArrayList<ArrayList<Integer>> levels = new ArrayList();
		levels.add(new ArrayList<Integer>());
		int maxLevel = 0;
		levels.get(0).add(1);
		vis[1] = true;
		q.add(new int[] { 1, 0 });
		while (!q.isEmpty()) {
			int[] top = q.poll();
			int lv = top[1];
			for (int nb : childsList[top[0]]) {
				if (!vis[nb]) {
					if (lv == maxLevel) {
						maxLevel++;
						levels.add(new ArrayList<Integer>());
					}
					levels.get(lv + 1).add(nb);
					vis[nb] = true;
					q.add(new int[] { nb, lv + 1 });
				}
			}
		}
		boolean[] visited = new boolean[n + 1];
		int res = 0;
		for (int i = maxLevel; i >= 0; i--) {
			for (int ch : levels.get(i)) {
				// binary search
				int lo = 1, hi = n;
				while (lo < hi) {
					int mid = (hi + lo) / 2;
					if (childMap[ch].contains(mid)) {
						lo = mid + 1;
					} else {
						hi = mid - 1;
					}
				}
				lo = Math.max(lo - 3, 1);
				while (childMap[ch].contains(lo)) {
					lo++;
				}
				res += lo;
				childMap[parents[ch]].add(lo);
			}
		}
		return String.valueOf(res);
	}

	private void solve() throws Exception {
		int tests = readNextUInt();
		for (int test = 1; test <= tests; test++) {
			write(String.format("Case #%d: %s\n", test, solveCase()));
		}
	}

	private InputStream inputStream;
	private BufferedInputStream bufferedInputStream;

	private OutputStream outputStream;
	private BufferedOutputStream bufferedOutputStream;

	protected P4() throws Exception {
		File outputFile = new File(OUTPUT_FILE_NAME);
		outputFile.createNewFile();
		outputStream = new FileOutputStream(outputFile);
		bufferedOutputStream = new BufferedOutputStream(outputStream);
		inputStream = new FileInputStream(INPUT_FILE_NAME);
		bufferedInputStream = new BufferedInputStream(inputStream);
	}

	public static void main(String[] args) throws Exception {
		P4 solver = new P4();
		solver.solve();
		solver.closeFiles();

	}

	private void closeFiles() {
		Closeable[] streams = new Closeable[4];
		streams[0] = bufferedInputStream;
		streams[1] = inputStream;
		streams[2] = bufferedOutputStream;
		streams[3] = outputStream;
		for (int i = 0; i < 4; ++i) {
			try {
				streams[i].close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int readUInt() throws Exception {
		int c;
		int res = 0;
		boolean hasNum = false;
		while ((c = bufferedInputStream.read()) >= '0' && c <= '9') {
			hasNum = true;
			res *= 10;
			res += c - '0';
		}
		if (!hasNum && c == -1) {
			throw new Exception("EOF");
		}
		return hasNum ? res : -1;
	}

	protected int readNextUInt() throws Exception {
		int r;
		while ((r = readUInt()) == -1) {
		}
		return r;
	}

	protected void write(String str) throws Exception {
		bufferedOutputStream.write(str.getBytes());
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	private String readStr() throws Exception {
		StringBuilder strB = new StringBuilder();
		int c;
		boolean hasChars = false;
		while (((c = bufferedInputStream.read()) >= 'a' && c <= 'z')
				|| (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
			hasChars = true;
			strB.append((char) c);
		}
		if (!hasChars && c == -1) {
			throw new Exception("EOF");
		}
		return hasChars ? strB.toString() : null;
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	protected String readNextStr() throws Exception {
		String s;
		while ((s = readStr()) == null) {
		}
		return s;
	}

}

#include <stdio.h> 
#include <stdlib.h> 
#include <ctype.h> 
#include <string.h> 
#include <math.h> 
#include <algorithm>
#include <functional>
#include <vector> 
#include <string> 
#include <queue>
#include <iostream> 
#include <map>
#include <sstream> 
#include <set>
#include <stack>
using namespace std; 

vector <vector <int> > v;
int col[200100];

int sol (int ind){

	set <int> s;
	for (int i=0;i<(int)v[ind].size();i++)
		s.insert(sol (v[ind][i]));

	int c = 1;
	while (s.find(c) != s.end())
		c++;

	//printf ("%d %d\n", ind, c);

	return col[ind] = c;
}

int main (){
	freopen ("corporate_gifting.txt", "r", stdin);
	freopen ("4.out","w",stdout);

	int t;
	scanf ("%d", &t);

	for (int tc=1;tc<=t;tc++){
		int n;
		scanf ("%d", &n);
		v.clear();
		v.resize(n);
		
		for (int i=0;i<n;i++){
			int p;
			scanf ("%d", &p);
			p --;
			if (!i)
				continue;
			v[p].push_back(i);
		}

		//sol (0);

		stack <int> is;
		stack <int> cp;
		stack <set <int>*> ss;
		stack <set <int>*> cs;

		is.push(0);
		cp.push(0);
		ss.push(new set<int>());
		cs.push(NULL);

		do{
			int ind = is.top();
			set<int>* p = cs.top();
			set<int>* c = ss.top();
			int lp = cp.top();
			//cout << ind << endl;
			if (v[ind].size() == lp){
				int cc = 1;
				while (c->find(cc) != c->end())
					cc++;
				col [ind] = cc;
				if (p != NULL)
					p->insert (cc);				
				is.pop();
				cs.pop();
				ss.pop();
				cp.pop();
			} else{
				is.push(v[ind][lp++]);
				cp.pop();
				cp.push(lp);
				cs.push(c);
				ss.push(new set<int>());
				cp.push(0);
			}
		}while (is.size()!=0);

		long long ans = 0;
		for (int i=0;i<n;i++)
			ans += (long long)(col[i]);
		cout << "Case #" << tc << ": " << ans << endl;
		//printf ("Case #%d: %lld\n", tc, ans);
	}

	return 0;
}

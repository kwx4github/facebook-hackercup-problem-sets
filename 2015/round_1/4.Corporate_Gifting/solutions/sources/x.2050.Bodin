#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>

#define LEN 200000

using namespace std;

vector<vector<int> > tree;
vector<vector<int> > used;
vector<int> parent;
vector<int> lt;
int nub[2] = {1,0};
bool selector;
int ans = 0;

void init(int n) {
    tree.clear();
    lt.clear();
    used.clear();
    parent.clear();
    selector = true;
    ans = 0;
    nub[0] = 1;
    nub[1] = 0;
    for(int i=0;i<n;i++) {
        vector<int> t;
        tree.push_back(t);
        used.push_back(t);
        parent.push_back(0);
    }
    lt.push_back(0);
    lt.push_back(-1);
}

void bfs() {
    for(int i=0;i<lt.size();i++) {
        if(lt[i] == -1) {
            selector = !selector;
            //cout << "k";
            if(i!=lt.size()-1)lt.push_back(-1);
            continue;
        }
        for(int j=0;j<tree[lt[i]].size();j++) {
            nub[selector]++;
            lt.push_back(tree[lt[i]][j]);
        }
    }
    /*
    cout << endl << "= ";
    for(int i=0;i<lt.size();i++) {
        cout << lt[i] << ' ';
    }
    cout << endl;
    */
}

void traceback() {
    for(int i=lt.size()-2;i>=0;i--) {
        //cout << 's' << lt[i] << ' ';
        if(lt[i] == -1) continue;
        if(used[lt[i]].size() == 0) {
            used[parent[lt[i]]].push_back(1);
            ans += 1;
            //cout << " "<< 1 << "xex\n";
        }
        else {
            //for(int j=0;j<used[lt[i]].size();j++) cout << used[lt[i]][j] << ' ';
            //cout << 'x' << used[lt[i]].size() <<endl;
            used[lt[i]].push_back(300010);
            used[lt[i]].push_back(0);
            sort(used[lt[i]].begin(), used[lt[i]].end());
            //for(int j=0;j<used[lt[i]].size();j++) cout << used[lt[i]][j] << ' ';
            //cout << endl;
            /*
            if(used[lt[i]][0] != 1) {
                used[parent[lt[i]]].push_back(1);
                ans += 1;
                cout << " "<< 1 << "xx\n";
                continue;
            }*/
            for(int j=1;j<used[lt[i]].size();j++) {
                if(used[lt[i]][j]-used[lt[i]][j-1]>1) {
                    used[parent[lt[i]]].push_back(used[lt[i]][j-1]+1);
                    ans += used[lt[i]][j-1]+1;
                    //cout << " " << used[lt[i]][j-1]+1 <<' ' << used[lt[i]].size() <<"xssx\n";
                    break;
                }
            }
        }
    }
}

int main() {
    int t;
    cin >> t;
    for(int ct=1;ct<=t;ct++) {
        int n;
        cin >> n;
        init(n);
        for(int i=0;i<n;i++) {
            int p;
            cin >> p;
            if(!i) continue;
            tree[p-1].push_back(i);
            parent[i] = p-1;
        }
        bfs();
        traceback();
        //int ans = min(nub[0]+nub[1]*2 , nub[0]*2+nub[1]);
        printf("Case #%d: %d\n",ct,ans);
        //cout << nub[0] << " " << nub[1] << endl;
    }
    return 0;
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bits/stdc++.h>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 400005
using namespace std;

int n, x, l[N], qn[N], dp[N][2], dc[N], a[N+N];

void cal(int x){
	int m = 3, cost = 0;
	EXP(i,l[x]) m += 2;
	FOE(i,1,m) a[i] = i;
	EXP(i,l[x]){
		cost += dp[i][0];
		a[dc[i]] += dp[i][1] - dp[i][0];
	}
	dp[x][0] = dp[x][1] = (1 << 30);
	FOE(i,1,m){
		if (dp[x][0] >= cost + a[i]){
			dp[x][1] = dp[x][0];
			dp[x][0] = cost + a[i];
			dc[x] = i;
		}
		else if (dp[x][1] >= cost + a[i]) dp[x][1] = cost + a[i];
	}
}

int q[N];

int solve(){
	scanf("%d", &n);
	CLR(l, 0);
	FOE(i,1,n){
		scanf("%d", &x);
		qn[i] = l[x];
		l[x] = i;
	}

	int st = 1, ed = 1;
 	q[st] = 1;
	while (st <= ed){
		EXP(i,l[q[st]]) q[++ed] = i;
		++st;
	}
	
	for (int i=n; i>=1; i--) cal(q[i]);


	return dp[1][0];
}


int main(){
	int tc;
	scanf("%d", &tc);
	FOR(i,1,tc+1) printf("Case #%d: %d\n", i, solve());
	return 0;
}


#include <stdio.h>
#include <vector>

struct Emp
{
	int minimunArr[51];
	//std::vector<int> minimunArr;
	std::vector<int> subList;
};

std::vector<Emp> empArr;

int main()
{
	int T = 0;
	scanf_s("%d", &T);

	for (int testN = 1; testN <= T; testN++)
	{
		int result = 0;
		int N = 0;
		int tem = 0;
		int minimum = 50;
		int len = 0;
		int temArr[200000] = {0,};

		empArr.clear();

		scanf_s("%d%d", &N, &temArr[0]);
		empArr.push_back(Emp());
		
		for (int i = 1; i < N; i++)
		{
			scanf_s("%d", &temArr[i]);
			empArr.push_back(Emp());
			empArr[temArr[i] - 1].subList.push_back(i);
		}

		for (int empIdx = N - 1; empIdx >= 0; empIdx--)
		{
			// leaf employees
			if (empArr[empIdx].subList.size() == 0)
			{
				empArr[empIdx].minimunArr[1] = 2;	// 2$ gift
				for (int j = 2; j <= minimum; j++)
				{
					empArr[empIdx].minimunArr[j] = 1;	// 1$ gift
				}
			}
			else
			{
				for (int k = 1; k <= minimum; k++)
				{
					tem = k;

					len = empArr[empIdx].subList.size();
					for (int j = 0; j < len; j++)
					{
						tem += empArr[empArr[empIdx].subList[j]].minimunArr[k];
					}

					for (int t = 1; t <= minimum; t++)
					{
						if (k != t)
						{
							if (empArr[empIdx].minimunArr[t] == 0 ||
								empArr[empIdx].minimunArr[t] > tem)
							{
								empArr[empIdx].minimunArr[t] = tem;
							}
						}
					}
				}
			}
		}

		tem = empArr[0].minimunArr[1];
		for (int i = 2; i <= minimum; i++)
		{
			if (tem > empArr[0].minimunArr[i])
			{
				tem = empArr[0].minimunArr[i];
			}
			//printf("%d ", empArr[0].minimunArr[i]);
		}

		printf("Case #%d: %d\n", testN, tem);
	}
}
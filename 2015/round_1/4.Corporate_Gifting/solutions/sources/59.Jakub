#include <cstdio>
#include <algorithm>
#include <vector>
#define MX 35
#define INF 1000000000
using namespace std;
int DP[500000][MX + 1];
int best[500000];
int bestWho[500000];
int secBest[500000];
vector<int> graph[500000];
bool visited[500000];
void DFS(int v) {
    visited[v] = true;
    vector<int> chl;
    for (int c = 0; c < graph[v].size(); c++) {
        int v2 = graph[v][c];
        if (!visited[v2]) {
            DFS(v2);
            chl.push_back(v2);
        }
    }
    for (int me = 1; me <= MX; me++) {
        DP[v][me] = me;
        for (int c : chl) {
            if (bestWho[c] == me) {
                DP[v][me] += secBest[c];
            } else {
                DP[v][me] += best[c];
            }
        }
        //printf("DP[%d][%d] = %d\n", v, me, DP[v][me]);
    }
    best[v] = INF;
    secBest[v] = INF;
    for (int k = 1; k <= MX; k++) {
        if (best[v] >= DP[v][k]) {
            best[v] = DP[v][k];
            bestWho[v] = k;
        }
    }
    for (int k = 1; k <= MX; k++) {
        if (secBest[v] >= DP[v][k] && k != bestWho[v]) {
            secBest[v] = DP[v][k];
        }
    }
    //printf("best[%d] = %d who = %d sec = %d\n", v, best[v], bestWho[v], secBest[v]);
}
int main() {
    int t;
    scanf("%d", &t);
    for (int test = 1; test <= t; test++) {
        int n;
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
            graph[i].clear();
        }
        int num;
        for (int i = 0; i < n; i++) {
            scanf("%d", &num);
            visited[i] = false;
            num--;
            if (i != 0) {
                graph[i].push_back(num);
                graph[num].push_back(i);
            }
        }
        DFS(0);
        printf("Case #%d: %d\n", test, best[0]);
    }
    return 0;
}

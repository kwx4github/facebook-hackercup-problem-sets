#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <string>
#include <sys/resource.h>

using namespace std;

#define eps 1e-9
#define PB push_back
#define LL long long
#define INF 0x3f3f3f3f

template<class T> void checkMax(T &a, T b){a = max(a, b);}
template<class T> void checkMin(T &a, T b){a = min(a, b);}
const int N = 200005;
vector<int> tree[N];
int dfs(int who, int& min_index, int& other_add)
{
    map<int, int> lst;
    int ret = 0;
    for(int i = 0; i < tree[who].size(); i++)
    {
        int to = tree[who][i];
        int a, b;
        ret += dfs(to, a, b);
        lst[a] += b;
    }

    int m = 0, v1 = INF, v2 = INF;
    for(int i = 1; i <= v2; i++)
    {
        int tmp = lst[i] + i;
        if(tmp < v1)
        {
            v2 = v1;
            v1 = tmp;
            m = i;
        }
        else if(tmp < v2)
        {
            v2 = tmp;
        }
    }
    min_index = m;
    other_add = v2 - v1;
    return ret + v1;
}

void init()
{
    const rlim_t kStackSize = 60 * 1024 * 1024;   // min stack size = 60 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
                fprintf(stderr, "setrlimit returned result = %d\n", result);
        }
    }
}
int main()
{
    init();
    int ti;
    scanf("%d",&ti);
    for(int ca = 1; ca <= ti; ca++)
    {
        int n, tmp;
        scanf("%d", &n);
        for(int i = 1; i <= n; i++)
            tree[i].clear();
        for(int i = 0; i < n; i++)
        {
            scanf("%d", &tmp);
            tree[tmp].push_back(i + 1);
        }
        int a, b, ret = dfs(1, a, b);
        printf("Case #%d: %d\n", ca, ret);
    }
    return 0;
}
#include<iostream>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<ctime>
#include<algorithm>
#include<iomanip>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<cassert>
#include<bitset>

using namespace std;
int TT;
const int N = 200100;
int dp[N][20];
int stack[N], f=0;
int ed[N];
int next[N], to[N], last[N],tot;
void add(int x, int y){
	to[tot] = y;
	next[tot] = last[x];
	last[x] = tot;
	tot++;
}

void instack(int x){
	stack[f++] = x;
	for(int i=1; i<20; ++i) dp[x][i] = i;
	ed[x] = last[x];
}
int main() {
	scanf("%d", &TT);
	for(int rr=1; rr<= TT; ++rr){
		tot=0;
		memset(last, -1, sizeof(last));
		f=0;
		memset(dp, 0, sizeof(dp));
		int n, x;
		scanf("%d", &n);
		for(int i=1; i<=n; ++i){
			scanf("%d", &x);
			add(x, i);
		}
		instack(1);
		while(f>0){
			int tmp = stack[f-1];
			if(ed[tmp] == -1){
				int m1 = dp[tmp][0], m2=dp[tmp][1], low = 0;
				if(m1>m2){
					swap(m1, m2);
					low = 1;
				}
				for(int i=2; i<20; ++i){
					if(dp[tmp][i]<m1){
						m2 = m1;
						m1 = dp[tmp][i];
						low = i;
					}
					else m2 = min(m2, dp[tmp][i]);
				}
				if(f>1) {
					int fa = stack[f-2];
					for(int i=0; i<20; ++i){
						dp[fa][i] += m1;
					}
					dp[fa][low] -= m1;
					dp[fa][low] += m2;
				}
				f--;
			}
			else {
				instack(to[ed[tmp]]);
				ed[tmp] = next[ed[tmp]];
			}
		}
		int ans=dp[1][0];
		for(int i=0; i<20; ++i){
			ans = min(ans , dp[1][i]);
		}
		ans += n;
		printf("Case #%d: %d\n", rr, ans);
	}
	return 0;
}


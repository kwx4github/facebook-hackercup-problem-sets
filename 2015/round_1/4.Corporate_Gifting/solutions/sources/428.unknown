// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

const int MAX_N = 200000;
const int MAX_P = 21;
LL memo[MAX_N][MAX_P+1];
vector<int> child[MAX_N];
LL dfs(const int u, const int p) {
    if(memo[u][p] != -1) return memo[u][p];
    LL res = p;
    for(int c : child[u]) {
        LL sub = LLONG_MAX;
        for(int np = 1; np <= MAX_P; np++) if(p != np) {
            sub = min(sub, dfs(c, np));
        }
        res += sub;
    }
    return memo[u][p] = res;
}
int main(){
    iostream_init();
    int T;
    cin >> T;
    for(int casenum = 1; casenum <= T; casenum++) {
        cout << "Case #" << casenum << ": ";
        REP(i, MAX_N) child[i].clear();

        int N;
        cin >> N;
        REP(i, N) {
            int p;
            cin >> p;
            if(--p >= 0) {
                child[p].push_back(i);
            }
        }

        memset(memo, -1, sizeof(memo));
        LL res = LLONG_MAX;
        for(int p = 1; p <= MAX_P; p++) {
            res = min(res, dfs(0, p));
        }
        cout << res << endl;
    }

    return 0;
}

/* vim:set foldmethod=marker: */


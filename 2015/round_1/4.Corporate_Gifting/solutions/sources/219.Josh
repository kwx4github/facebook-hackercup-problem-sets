import java.util.*;
import java.io.*;

public class Gifting {
	static class Reader {
		BufferedReader boiler;
		StringTokenizer plate;

		void init(InputStream input) {
			boiler = new BufferedReader(new InputStreamReader(input));
			plate = new StringTokenizer("");
		}

		String next() throws IOException {
			while (!plate.hasMoreTokens()) {
				plate = new StringTokenizer(boiler.readLine());
			}
			return plate.nextToken();
		}

		int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
	}

	private static class Node {
		int minsum, rcolor, delta, ncolor;
		boolean visited;
		ArrayList<Integer> brothers, sons, cadd;

		public Node() {
			minsum = rcolor = delta = ncolor = 0;
			brothers = new ArrayList<Integer>();
			sons = new ArrayList<Integer>();
			visited = false;
			// cadd = new ArrayList<Integer>();
		}
	}

	public static void main(String[] args) throws Exception {
		Reader sc = new Reader();
		sc.init(System.in);
		//sc.init(new FileInputStream(new File(
		//		"C:\\Users\\jlear2013\\Desktop\\out.txt")));
		int tc = sc.nextInt();
		Node[] nodes;
		// Node temp;
		int value, color1, color2;
		int son, minTotal;
		int[] colorAdd;
		for (int z = 1; z <= tc; z++) {
			value = 0;
			int n = sc.nextInt();
			//System.out.println(n);
			nodes = new Node[n + 1];
			for (int i = 0; i <= n; i++) {
				nodes[i] = new Node();
			}
			for (int i = 1; i <= n; i++) {
				value = sc.nextInt();
				nodes[value].sons.add(i);
			}
			Stack<Integer> stack = new Stack<Integer>();
			stack.push(1);
			while (stack.size() > 0) {
				int tempIndex = stack.peek();
				if (!nodes[tempIndex].visited) {
					nodes[tempIndex].visited = true;
					for (int x : nodes[tempIndex].sons) {
						stack.push(x);
					}
				} else {
					int i = stack.pop();
					if (nodes[i].sons.size() == 0) {
						nodes[i].minsum = 1;
						nodes[i].rcolor = 1;
						nodes[i].delta = 1;
						nodes[i].ncolor = 2;
					} else {
						colorAdd = new int[nodes[i].sons.size() + 3];
						int sum1 = Integer.MAX_VALUE - 100000;
						int sum2 = Integer.MAX_VALUE - 100000;
						color1 = 0;
						color2 = 0;
						value = 0;
						minTotal = 0;
						for (int j = 1; j <= nodes[i].sons.size() + 2; j++) {
							colorAdd[j] = j;
						}
						for (int j = 0; j < nodes[i].sons.size(); j++) {
							int sonIndex = nodes[i].sons.get(j);
							minTotal = minTotal + nodes[sonIndex].minsum;
							colorAdd[nodes[sonIndex].rcolor] += nodes[sonIndex].delta;
						}
						for (int j = 1; j <= nodes[i].sons.size() + 2; j++) {
							value = colorAdd[j];
							if (value < sum1) {
								color2 = color1;
								sum2 = sum1;
								color1 = j;
								sum1 = value;
							} else {
								if (value < sum2) {
									color2 = j;
									sum2 = value;
								}
							}
						}
						nodes[i].minsum = sum1 + minTotal;
						nodes[i].rcolor = color1;
						nodes[i].delta = sum2 - sum1;
						nodes[i].ncolor = color2;
					}
				}
			}
			System.out.printf("Case #%d: %d\n", z, nodes[1].minsum);

		}

	}

}

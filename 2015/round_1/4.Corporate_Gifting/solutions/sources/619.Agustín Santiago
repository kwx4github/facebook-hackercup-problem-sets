#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

typedef long long tint;
typedef pair<int,int> pint;

const int MAXN = 1000000;

struct Solution
{
    int value, index, secondVal;
} sol[MAXN];

int p[MAXN], missingChildren[MAXN];
vector<int> g[MAXN];

int main()
{
    int TT; cin >> TT;
    forn(tt,TT)
    {
        int n; cin >> n;
        forn(i,n)
        {
            g[i].clear();
            missingChildren[i] = 0;
        }
        forn(i,n)
        {
            cin >> p[i];
            p[i]--;
            if (p[i] >= 0)
            {
                missingChildren[p[i]]++;
                g[p[i]].push_back(i);
            }
        }
        queue<int> q;
        forn(i,n)
        {
            assert(missingChildren[i] == (int)g[i].size());
            if (g[i].empty()) q.push(i);
        }
        while (!q.empty())
        {
            int actual = q.front(); q.pop();
            map<int, pint> options;
            int totalValue = 0; // Como los value de cada subarbol estan acotados por 2N, esto tambien.
            forall(c, g[actual])
            {
                options[sol[*c].index].first  += sol[*c].value;
                options[sol[*c].index].second += sol[*c].secondVal;
                totalValue += sol[*c].value;
            }
            map<int,int> f;
            forall(it, options)
            {
                int index = it->first;
                int val = it->second.first;
                int secondVal = it->second.second;
                f[index] = index + totalValue - val + secondVal;
            }
            int extra = 2, index = 1;
            while (extra > 0)
            {
                if (!esta(index, f))
                {
                    f[index] = index + totalValue;
                    extra--;
                }
                index++;
            }
            vector<pint> v;
            forall(it, f) v.push_back(make_pair(it->second, it->first));
            sort(all(v));
            sol[actual].value     = v[0].first;
            sol[actual].index     = v[0].second;
            sol[actual].secondVal = v[1].first;
            
            if (p[actual] >= 0)
            {
                missingChildren[p[actual]]--;
                if (missingChildren[p[actual]] == 0)
                    q.push(p[actual]);
            }
        }
        cout << "Case #" << tt+1 << ": " << sol[0].value << endl;
    }
    return 0;
}

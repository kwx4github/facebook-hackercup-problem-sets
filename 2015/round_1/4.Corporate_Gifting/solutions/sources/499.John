#include <cstdlib>
#include <cassert>
#include <vector>
#include <string>
#include <cstring>
#include <cstdio>
#include <stack>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vvi vector<vector<int> >
#define vd V(double)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()

#include <map>
#include <algorithm>
#define ll long long
#define vll V(ll)

#define BIG 999999999999LL

int n;
vi m(n);
vvi ch(n);


struct foo {
  ll w;
  ll costopt;
  ll costsec;
};

foo rec(int w) {
  ll basecost = 0;
  map<ll, ll> additional;
  for(int j : ch[w]) {
    foo f = rec(j);
    basecost+=f.costopt;
    additional[f.w]+=f.costsec-f.costopt;
  }
  foo ret;
  ret.w=0;
  ret.costopt=ret.costsec=BIG;
  int seen0=0;
  for(ll w=1;;w++) {
    const ll a=additional[w];
    const ll cost=w+basecost+a;
    if(cost<=ret.costopt) {
      ret.w=w;
      ret.costsec=ret.costopt;
      ret.costopt=cost;
    } else if (cost<ret.costsec) {
      ret.costsec=cost;
    }
    if (a==0) seen0++;
    if (seen0==2) break;
  }
  assert(ret.w>0);
  assert(ret.w+(ll)(ch[w].sz)<=ret.costopt);
  assert(ret.costopt<=ret.costsec);
  assert(ret.costsec<BIG);
  return ret;
}

ll sol() {
  return rec(0).costopt;
}

int main(void) {
  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    assert(scanf("%d",&n)==1);
    assert(n>=1);
    m=vi(n);
    ch=vvi(n);
    int i;
    fi {
      assert(scanf("%d",&m[i])==1);
      m[i]--;
      if (!i) {
        assert(m[i]==-1);
      } else {
        assert(m[i]>=0);
        assert(m[i]<n);
        ch[m[i]].pb(i);
      }
    }
    ll ans = sol();
    printf("Case #%d: %lld\n",cas,ans);
    assert(ans >= n + (n>1));
    assert(ans <= (3*n)/2);
  }
  return 0;
}

#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
#include <cassert>

#define MAX	300000

int main(void)
{
	int count[MAX];
	int mang[MAX];
	std::queue<int> leaves;
	std::vector<int> bkids[MAX];

	int z, t;
	int n, s, i, j, b;

	for(scanf("%d", &t), z = 1; z <= t; z ++)
	{
		scanf("%d", &n);

		for(i = n; i --;)
		{
			count[i] = 0;
		}

		for(i = 0; i < n; i ++)
		{
			scanf("%d", &mang[i]);
			mang[i] --;

			if(mang[i] != -1)
				count[mang[i]] ++;
		}

		assert(leaves.empty());

		for(i = n; i --;)
			if(count[i] == 0)
				leaves.push(i);

		s = 0;
		while(!leaves.empty())
		{
			i = leaves.front();
			leaves.pop();

			if(bkids[i].size() == 0)
			{
				b = 1;
			}
			else
			{
				std::sort(bkids[i].begin(), bkids[i].end());
				if(bkids[i][0] > 1)
				{
					b = 1;
				}
				else
				{
					for(j = 1; j < (int)bkids[i].size(); j ++)
						if(bkids[i][j] - bkids[i][j - 1] > 1)
						{
							b = bkids[i][j - 1] + 1;
							break;
						}

					if(j == (int)bkids[i].size())
						b = bkids[i][j - 1] + 1;
				}

				bkids[i].clear();
			}

			s += b;

			if(mang[i] == -1)
			{
				continue;
			}
			else
			{
				count[mang[i]] --;
				bkids[mang[i]].push_back(b);

				if(count[mang[i]] == 0)
					leaves.push(mang[i]);
			}
		}

		assert(leaves.empty());

		printf("Case #%d: %d\n", z, s);
	}

	return 0;
}

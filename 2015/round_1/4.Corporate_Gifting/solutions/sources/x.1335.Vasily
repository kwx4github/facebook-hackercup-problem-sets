#include <bits/stdc++.h>

using namespace std;

// TEMPLATE {{{
#ifndef LOCAL
#define OJ 1
#else
#define OJ 0
#endif

#define endl '\n'
#define TIMESTAMP merr << "Execution time: " << (double)clock()/CLOCKS_PER_SEC << " s.\n"
class C_ {}; template <typename T> C_& operator <<(C_& __m, const T& __s) { if (!OJ) cerr << "\E[91m" << __s << "\E[0m"; return __m; }
C_ merr;

struct __s { __s() { if (OJ) { ios_base::Init i; cin.sync_with_stdio(0); cin.tie(0); } } ~__s(){ TIMESTAMP; } } __S;
/// END OF TEMPLATE }}}

/*
 * segfault at 30 ip 00007ff0b3878956 sp 00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+
 *                                       00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+435000]
 */

vector<int> G[222222];
int dp[222222][8];

void dfs(int v) {
  dp[v][1] = 1;
  dp[v][2] = 2;
  dp[v][3] = 3;
  dp[v][4] = 4;
  dp[v][5] = 5;
  dp[v][6] = 6;
  dp[v][7] = 7;
  for (int i = 0; i < (int)G[v].size(); i++) {
    int vv = G[v][i];
    dfs(vv);
    dp[v][1] += min(min(min(min(min(dp[vv][2], dp[vv][3]), dp[vv][4]), dp[vv][5]), dp[vv][6]), dp[vv][7]);
    dp[v][2] += min(min(min(min(min(dp[vv][1], dp[vv][3]), dp[vv][4]), dp[vv][5]), dp[vv][6]), dp[vv][7]);
    dp[v][3] += min(min(min(min(min(dp[vv][1], dp[vv][2]), dp[vv][4]), dp[vv][5]), dp[vv][6]), dp[vv][7]);
    dp[v][4] += min(min(min(min(min(dp[vv][1], dp[vv][2]), dp[vv][3]), dp[vv][5]), dp[vv][6]), dp[vv][7]);
    dp[v][5] += min(min(min(min(min(dp[vv][1], dp[vv][2]), dp[vv][3]), dp[vv][4]), dp[vv][6]), dp[vv][7]);
    dp[v][6] += min(min(min(min(min(dp[vv][1], dp[vv][2]), dp[vv][3]), dp[vv][4]), dp[vv][5]), dp[vv][7]);
    dp[v][7] += min(min(min(min(min(dp[vv][1], dp[vv][2]), dp[vv][3]), dp[vv][4]), dp[vv][5]), dp[vv][7]);
  }
}

int main() {
  int T;
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  cin >> T;
  for (int tt = 0; tt < T; tt++) {
    int n;
    merr << tt << '\n';
    for (int i = 0; i < 222222; i++) {
      G[i].clear();
    }
    cin >> n;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x) G[x].push_back(i+1);
    }
    dfs(1);
    cout << "Case #" << tt+1 << ": " << min(min(min(min(min(dp[1][1], min(dp[1][2], dp[1][3])), dp[1][4]), dp[1][5]), dp[1][6]), dp[1][7]) << endl;
  }
  return 0;
}

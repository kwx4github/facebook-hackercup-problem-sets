#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

const long long INF = 1LL << 50;

const int N = 222222;

int n;
vector<int> son[N];
long long sum[N];
pair<long long, int> best[N], better[N];

inline void solve() {
	scanf("%d", &n);
	for (int i = 0; i <= n; ++i) {
		son[i].clear();
	}
	for (int i = 1; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		son[x].push_back(i);
	}
	vector<int> queue;
	queue.push_back(1);
	for (int head = 0; head < (int)queue.size(); ++head) {
		int x = queue[head];
		for (int i = 0; i < (int)son[x].size(); ++i) {
			int y = son[x][i];
			queue.push_back(y);
		}
	}
	reverse(queue.begin(), queue.end());
	for (int head = 0; head < (int)queue.size(); ++head) {
		int x = queue[head];
		
		int degree = son[x].size();
		if (degree == 0) {
			best[x] = make_pair(1, 1);
			better[x] = make_pair(2, 2);
		} else {
			for (int i = 0; i <= degree + 1; ++i) {
				sum[i] = 0;
			}
			for (int i = 0; i < degree; ++i) {
				int y = son[x][i];
				sum[0] += best[y].first;
				
				int gap = best[y].second;
				sum[gap] -= best[y].first;
				sum[gap] += better[y].first;
				sum[gap + 1] += best[y].first;
				sum[gap + 1] -= better[y].first;
			}
			for (int i = 1; i <= degree + 1; ++i) {
				sum[i] += sum[i - 1];
			}
			best[x] = make_pair(INF, 0);
			better[x] = make_pair(INF, 0);
			for (int i = 1; i <= degree + 1; ++i) {
				pair<long long, int> choice = make_pair(sum[i] + i, i);
				if (choice <= best[x]) {
					better[x] = best[x];
					best[x] = choice;
				} else if (choice < better[x]) {
					better[x] = choice;
				}
			}
		}
	}
	printf("%lld\n", best[1].first);
}

int main() {
	int tests;
	scanf("%d", &tests);
	for (int i = 1; i <= tests; ++i) {
		printf("Case #%d: ", i);
		solve();
	}
	return 0;
}

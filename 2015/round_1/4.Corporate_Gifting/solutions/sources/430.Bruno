#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
const int N = 200001;
vector<int> adj[N];
int n;
typedef long long ll;
typedef pair<int, ll> pll;
typedef pair<pll, pll> P;
P INF = {{N,1e18},{N,1e18}};

void relax(P& res, pll& now)
{
	if (now.S < res.F.S) res.S = res.F, res.F = now;
	else if (now.S < res.S.S) res.S = now;
}

P solve(int u)
{
	map<int, ll> aux;
	ll tot = 0;
	for (int v : adj[u])
	{
		P bak = solve(v);
		tot += bak.F.S;
		aux[bak.F.F] += bak.S.S-bak.F.S;
	}
	P res = INF;
	for (int x = 1; x <= adj[u].size()+2; ++x)
	{
		pll now = {x, tot+aux[x]+x};
		relax(res, now);
	}
	return res;
}

int main()
{
	ios::sync_with_stdio(0);
	
	int t;
	cin >> t;
	for (int q = 1; q <= t; ++q)
	{
		cout << "Case #" << q << ": ";
		cin >> n;
		for (int i = 1; i <= n; ++i)
			adj[i].clear();
		for (int i = 1; i <= n; ++i)
		{
			int a; cin >> a;
			adj[a].push_back(i);
		}
		P res = solve(1);
		cout << res.F.S << endl;
	}
}


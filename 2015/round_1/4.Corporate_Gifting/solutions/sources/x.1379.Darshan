package facebook.hacker.cup.year2015.round1;

import java.io.*;
import java.util.*;

/**
 * Created by Darshan on 1/18/2015.
 */
public class CorporateGifting {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\Darshan\\Downloads\\corporate_gifting.txt"));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("output4.txt")));
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter out = new PrintWriter(System.out);
        StringTokenizer st;

        for (int t = Integer.parseInt(br.readLine()), T = 1; t-- > 0; T++) {
            int n = Integer.parseInt(br.readLine());
            ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
            for (int i = 0; i < n; i++) {
                graph.add(new ArrayList<Integer>());
            }

            st = new StringTokenizer(br.readLine());
            int[] manager = new int[n];
            st.nextToken();
            for (int i = 1; i < n; i++) {
                manager[i] = Integer.parseInt(st.nextToken()) - 1;
                graph.get(manager[i]).add(i);
            }

            int p = n - 1;
            int[] ordering = new int[n];
            boolean[] visited = new boolean[n];

            Stack<Integer> stack = new Stack<Integer>();
            stack.push(0);

            while (!stack.isEmpty()) {
                int current = stack.pop();
                visited[current] = true;
                ordering[p--] = current;

                for (int i : graph.get(current)) {
                    if (!visited[i]) {
                        stack.push(i);
                    }
                }
            }

            long total = 0;
            int[] minCost = new int[n];
            for (int i = 0; i < n; i++) {
                int current = ordering[i];

                int min = 1;
                TreeSet<Integer> gifts = new TreeSet<Integer>();
                for (int j : graph.get(current)) {
                    gifts.add(minCost[j]);
                }

                for (int j : gifts) {
                    if (min == j) {
                        min++;
                    } else {
                        break;
                    }
                }

                minCost[current] = min;
                total += min;
            }

            out.println("Case #" + T + ": " + total);
        }
        out.close();
    }
}

#include <bits/stdc++.h>

using namespace std;

#define maxn 200005

int n, d[maxn], p[maxn];
vector<int> a[maxn], tmp[maxn];
vector< pair<int, int> > q;

void dfs()
{
    q.push_back(make_pair(1, 0));
    while (!q.empty())
    {
        int u = q.back().first, i = q.back().second;
        q.pop_back();
        if (i == 0) d[u] = 1;
        if (i < a[u].size())
        {
            q.push_back(make_pair(u, i+1));
            int v = a[u][i];
            if (!d[v]) q.push_back(make_pair(v, 0));
        }
        else
        {
            tmp[u].push_back(0);
            tmp[u].push_back(1234567890);
            sort(tmp[u].begin(), tmp[u].end());
            for (int i = 1; i < tmp[u].size(); ++i)
                if (tmp[u][i] - 1 > tmp[u][i-1])
                {
                    d[u] = tmp[u][i-1] + 1;
                    break;
                }
            if (p[u]) tmp[p[u]].push_back(d[u]);
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);

    freopen("inp.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    int t;
    cin >> t;
    for (int z = 1; z <= t; ++z)
    {
        cin >> n;
        for (int i = 1; i <= n; ++i) a[i].clear(), tmp[i].clear(), d[i] = 0;
        for (int i = 1; i <= n; ++i)
        {
            cin >> p[i];
            if (p[i]) a[p[i]].push_back(i);
        }
        dfs();
        cout << "Case #" << z << ": " << accumulate(d+1, d+n+1, 0) << '\n';
    }
}

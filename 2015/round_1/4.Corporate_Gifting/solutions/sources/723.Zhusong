#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>

using namespace std;

vector<vector<int> > M;

long long BIG[200010];
long long SMALL[200010];
long long POS[200010];
long long N;
bool CK[200010];

/*void calculate(long long n) {
    long long i,j,k,m,nn;
    for (i = 0;i < M[n].size();i++) {
        if (CK[M[n][i]] == 1) continue;
        calculate(M[n][i]);
    }
    for (j = 1;j <= cut;j++) X[j] = j;
    for (j = 1;j <= cut;j++) {
        for (k = 0;k < M[n].size();k++) {
            m = N * N;
            for (nn = 1;nn <= cut;nn++) {
                if (nn != j) m = min(m,DP[M[n][k]][nn]);
            }
            X[j] += m;
        }
    }
    for (j = 1;j <= cut;j++) DP[n][j] = X[j];
    CK[n] = 1;
    return;
}*/

void calculate() {
    stack<long long> S;
    stack<long long> XX;
    S.push(1);
    XX.push(0);
    long long i,j,k,n,m,nn;
    while (S.size() > 0) {
        n = S.top();
        m = XX.top();
        bool ck = 1;
        for (i = m;i < M[n].size() && ck == 1;i++) {
            if (CK[M[n][i]] == 1) continue;
            else {
                XX.pop();
                XX.push(i + 1);
                S.push(M[n][i]);
                XX.push(0);
                ck = 0;
            }
        }
        if (ck == 1) {
            XX.pop();
            S.pop();
            if (M[n].size() == 0) {
                BIG[n] = 1;
                SMALL[n] = 2;
                POS[n] = 1;
            }
            else {
                unordered_map<long long,long long> RT;
                long long ma = 0;
                long long sol = 0;
                for (i = 0;i < M[n].size();i++) {
                    j = M[n][i];
                    k = POS[j];
                    if (RT.find(k) == RT.end()) RT[k] = 0;
                    RT[k] += SMALL[j] - BIG[j];
                    ma = max(ma,k);
                    sol += BIG[j];
                }
                long long A = N * N,B = N * N,C = 1;
                for (i = 1;i <= ma + 2;i++) {
                    if (RT.find(i) == RT.end()) {
                        j = i + sol;
                        if (j <= A) {
                            B = A;
                            A = j;
                            C = i;
                        }
                        else if (j < B) {
                            B = j;
                        }
                    }
                    else {
                        j = i + sol + RT[i];
                        if (j <= A) {
                            B = A;
                            A = j;
                            C = i;
                        }
                        else if (j <= B) {
                            B = j;
                        }
                    }
                }
                RT.clear();
                BIG[n] = A;
                SMALL[n] = B;
                POS[n] = C;
            }
            CK[n] = 1;
        }
    }
    return;
}

long long solve() {
    long long i,j,k,n,m;
    memset(CK,0,sizeof(CK));
    calculate();
    return BIG[1];
}

int main() {
    clock_t st,ed;
    st = clock();
    ifstream filein;
    ofstream fileout;
    filein.open("corporate_gifting.txt",ios::in);
    //filein.open("A",ios::in);
    fileout.open("output",ios::out);
    int T;
    filein >> T;
    for (int z1 = 1;z1 <= T;z1++) {
        fileout << "Case #" << z1 << ": ";
        filein >> N;
        M.resize(N + 1);
        M.clear();
        memset(BIG,0,sizeof(BIG));
        memset(SMALL,0,sizeof(SMALL));
        memset(POS,0,sizeof(POS));
        long long i,j,k;
        for (i = 1;i <= N;i++) {
            filein >> j;
            M[j].push_back(i);
        }
        long long res = solve();
        cout << z1 << ' ' << res << endl;
        fileout << res << endl;
    }
    fileout.close();
    ed = clock();
    cout << double(ed - st)/double(CLOCKS_PER_SEC) << endl;
}
#include <bits/stdc++.h>
using namespace std;

#define rep(i, from, to) for (int i = from; i < int(to); ++i)
#define trav(it, x) for (auto it = x.begin(); it != x.end(); ++it)
#define all(x) x.begin(), x.end()
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pi;

struct Node {
	int par;
	vector<int> children;
	pair<int, int> best, secondBest;
};

void solve() {
	int N;
	cin >> N;
	vector<Node> nodes(N);
	rep(i, 0, N) {
		int par;
		cin >> par;
		--par;
		nodes[i].par = par;
		if (par != -1)
			nodes[par].children.push_back(i);
	}

	vector<int> st, order;
	st.push_back(0);
	while (!st.empty()) {
		int a = st.back();
		st.pop_back();
		order.push_back(a);
		for (int ch : nodes[a].children)
			st.push_back(ch);
	}

	reverse(all(order));
	for (int ind : order) {
		Node& n = nodes[ind];
		int maxInd = 0;
		for (int i : n.children) {
			maxInd = max(maxInd, nodes[i].best.second);
			maxInd = max(maxInd, nodes[i].secondBest.second);
		}
		n.best = n.secondBest = make_pair(1 << 29, 0);
		for (int c = 1; c <= maxInd + 2; ++c) {
			int cost = 0;
			for (int i : n.children)
				cost += (nodes[i].best.second == c ? nodes[i].secondBest : nodes[i].best).first;
			cost += c;
			pair<int, int> pa(cost, c);
			if (pa < n.best) {
				n.secondBest = n.best;
				n.best = pa;
			}
			else if (pa < n.secondBest)
				n.secondBest = pa;
		}
	}
	cout << nodes[0].best.first << endl;
}

int main() {
	int T;
	cin >> T;
	rep(i, 0, T) {
		cout << "Case #" << i+1 << ": ";
		solve();
	}
}

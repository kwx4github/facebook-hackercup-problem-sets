#include <fstream>
#include <string>
#include <cassert>
#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>
#include <map>
#include <set>
#include <sstream>
using namespace std;

struct Data
{
	int node, cost, parent;
	bool leaf;

	Data(int n = 0, int c = 1, int p = 0) : node(n), cost(c), parent(p), leaf(true)
	{}

	bool operator<(const Data& obj) const
	{
		if (leaf == obj.leaf)
		{
			if (cost == obj.cost)
				return node < obj.node;
			return cost < obj.cost;
		}
		return leaf < obj.leaf;
	}
};

/*
1
8
0 1 1 2 2 3 3 3
*/

/*
1
8
0 1 1 1 1 2 2 2
*/

int main()
{
	//ifstream file("corporate_gifting_example_input.txt");
	//ifstream file("sample_40.txt");
	//cin.rdbuf(file.rdbuf());

	int t;
	cin >> t;

	for (int tt = 1; tt <= t; tt++)
	{
		int n;
		cin >> n;

		vector<int> hie(n);
		for (int i = 0; i < n; i++)
		{
			cin >> hie[i];
		}

		vector<int> costs(n + 1, 1);
		vector<Data> vdata(n+1);
		for (int i = 0; i < n; i++)
		{
			//costs[hie[i]] = 0;
			vdata[i].node = i + 1;
			vdata[i].parent = hie[i];
		}

		sort(hie.begin(), hie.end());
		for (int i = 0; i < vdata.size(); i++)
		{
			if (binary_search(hie.begin(), hie.end(), vdata[i].node))
			{
				vdata[i].leaf = false;
			}
		}

		sort(vdata.rbegin(), vdata.rend());
		for (int i = 0; i < vdata.size(); i++)
		{
			int pcost = costs[vdata[i].parent];
			if (pcost == costs[vdata[i].node])
			{
				costs[vdata[i].parent] = costs[vdata[i].node] + 1;
			}
		}

		int ans = 0;
		for (int i = 1; i <= n; i++)
		{
			ans += costs[i];
		}

		cout << "Case #" << tt << ": " << ans << endl;
	}

	return 0;
}

#pragma comment(linker, "/STACK:512000000")
#include <iostream>
#include <vector>
#include <iomanip>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <string>
#include <sstream>
#include <math.h>

using namespace std;

class Solver {	
public:
		
	static const int INF = 1e9;
	static const int N = 2e5 + 5;
	static vector<int> g[N];

	Solver() {
	}

	int UP;

	// TODO
	int memo[N][605];
	int first_mi[N], first_mi_at[N], second_mi[N];

	int get_mi_except(int v, int value) {
		if (first_mi[v] != -1) {
			if (first_mi_at[v] != value) {
				return first_mi[v];
			} else {
				return second_mi[v];
			}
		}

		first_mi[v] = INF;
		second_mi[v] = INF;

		for (int i = 1; i <= UP; ++i) {
			int res = get(v, i);
			if (res <= first_mi[v]) {				
				second_mi[v] = first_mi[v];
				first_mi[v] = res;
				first_mi_at[v] = i;
			} else {
				if (res < second_mi[v]) {
					second_mi[v] = res;
				}
			}
		}

		return get_mi_except(v, value);
	}

	int get(int v, int value) {
		if (memo[v][value] != -1) {
			return memo[v][value];
		}

		int &r = memo[v][value];
		r = value;

		for (int i = 0; i < g[v].size(); ++i) {
			int to = g[v][i];			
			
			/*
			for (int z = 1; z <= UP; ++z) {
				if (z != value) {
					mi = min(mi, get(to, z));
				}
			}
			*/
			r += get_mi_except(to, value);
		}

		return r;
	}


	int inner_solve(const vector<int>& v, int up) {
		for (int i = 0; i < N; ++i) {
			g[i].clear();
		}

		memset(memo, -1, sizeof(memo));
		memset(first_mi, -1, sizeof(first_mi));
		
		for (int i = 1; i < v.size(); ++i) {
			g[v[i] - 1].push_back(i);
		}
		UP = up;

		int mi = INF;
		for (int z = 1; z <= up; ++z) {
			mi = min(mi, get(0, z));
		}
		return mi;
	}

	int solve(const vector<int>& v) {
		return inner_solve(v, 600);
	}
};

vector<int> Solver::g[N];


int main() {
	
	/*
	freopen("corporate_gifting.txt", "w", stdout);
	cout << 100 << endl;
	for (int test = 0; test < 100; ++test) {
		cerr << test <<  " ";
		const int N = 200000;
		cout << N << endl;
		cout << "0 ";
		for (int i = 1; i < N; ++i) {
			long long r = rand();
			r *= rand();
			r %= min(3, i);
			r = max(0ll, i - r);
			cout << r << " ";
		}
		cout << endl;
	}
	return 0;
	*/

	freopen("corporate_gifting.txt", "r", stdin);
	
	//freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
		
	
	int T; scanf("%d \n", &T);
	for (int test = 1; test <= T; ++test) {

		int n; scanf("%d \n", &n);

		int answer = 0;
		Solver solver;

		vector<int> v(n);
		for (int i = 0; i < n; ++i) {
			scanf("%d", &v[i]);
		}

		answer = solver.solve(v);
				
		cout << "Case #" << test << ": " << answer << "\n";
		cerr << "Case #" << test << ": " << answer << "[" << 1. * clock() / CLOCKS_PER_SEC << "]\n";		
	}
	
	return 0;
}
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <climits>
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <sstream>
#include <initializer_list>

using namespace std;

struct Status {
    int type; //0 for in, 1 for out
    int id; //node id

    Status(int _t, int _id):type(_t), id(_id) {}
};

int main(int argc, char *argv[])
{

    freopen("D.in", "r", stdin);
    
    int T = 0;
    cin >> T;

    for (int cas = 1; cas <= T; cas++) {
        int N = 0;
        cin >> N;

        vector <vector <int> > tree(N + 1, vector<int>());
        vector <int> give(N + 1, 0);

        int manager = 0;
        for (int i = 0; i < N; i++) {
            cin >> manager;
            if (manager > 0) {
                tree[manager - 1].push_back(i);
            }
        }

        int res = 0;
        stack <Status> stk;
        stk.push(Status(0, 0));
        while (!stk.empty()) {
            Status s = stk.top();
            stk.pop();

            int id = s.id;
            
            if (s.type == 0) {
                stk.push(Status(1, s.id));
                for (auto iter = tree[id].begin(); iter != tree[id].end(); iter++) {
                    stk.push(Status(0, *iter));
                }
            } else {
                unordered_set <int> us;
                for (auto iter = tree[id].begin(); iter != tree[id].end(); iter++) {
                    us.insert(give[*iter]);
                }

                for (int i = 1; i <= tree[id].size(); i++) {
                    if (us.find(i) == us.end()) {
                        give[id] = i;
                        break;
                    }
                }

                if (give[id] == 0) {
                    give[id] = tree[id].size() + 1;
                }

                res += give[id];
            }
        }

        cout << "Case #" << cas << ": " << res << endl;
    }

    return 0;
}

#include<cstdio>
#include<vector>
#define L 220000

using namespace std;

pair<pair<int,int>,int> opt[L],best[L];
vector<int> lj[L];
int order[L];
int n;

int main() {
    int T,I=0,ans;
    scanf("%d",&T);
    while (T--) {
        scanf("%d",&n);
        for (int i=0;i<n;++i){
            int t;
            scanf("%d",&t);
            if (t!=0) lj[t-1].push_back(i);
        }
        order[0]=0;
        int len=1;
        for (int i=0;i<n;++i){
            for (int j=0;j<lj[order[i]].size();++j)
                order[len++]=lj[order[i]][j];
        }
        for (int i=n-1;i>=0;--i) {
            int m=lj[order[i]].size();
            for (int j=0;j<m;++j)
                best[j]=opt[lj[order[i]][j]];
            sort(best,best+m);
            int smallest=1,next=2;
            for (int j=0;j<m;++j)
            if (best[j].first.first==smallest) {
                smallest++;
                next++;
            } else if(best[j].first.first==next) {
                next++;
            }
            int sum=0;
            for (int j=0;j<m;++j)
                sum+=best[j].first.second;
            int nowbest,nowans,secondbest;
            nowbest=smallest+sum;
            nowans=smallest;
            secondbest=next+sum;
            for (int j=0;j<m;){
                int nextj=j;
                int add=0;
                int can=best[j].first.first;
                while (nextj<m && best[nextj].first.first==can) {
                    add+=best[nextj].second;
                    ++nextj;
                }
                int tmp = sum+add+can;
                if (tmp<nowbest) {
                    secondbest=nowbest;
                    nowbest=tmp;
                    nowans=can;
                } else if (tmp<secondbest) {
                    secondbest=tmp;
                }
                j=nextj;
            }
            opt[order[i]]=make_pair(make_pair(nowans,nowbest),secondbest-nowbest);
        }
        for (int i=0;i<n;++i) lj[i].clear();
        printf("Case #%d: %d\n",++I,opt[0].first.second);
    }
}

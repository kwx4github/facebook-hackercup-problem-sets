#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;
#define REP(i,k) for(int (i)=0;(i)<(k);(i)++)
#define CLR(a) memset((a),0,sizeof((a)))
#define INF ~(1<<31)
#define MOD 1000000007

int pr[200005];
vector<int> edges[200005];
set<int> used[200005];
ll res;

void dfs(int n,int p){
	for(int i=0;i<edges[n].size();i++){
		int n1 = edges[n][i];
		if(n1==p) continue;
		dfs(n1,n);
	}
	
	for(int x=1;;x++){
		if(!used[n].count(x)){
			res+=x;
			if(pr[n]!=-1) used[pr[n]].insert(x);
			//cout<<"Node: "<<n+1<<" -> "<<x<<endl;
			break;
		}
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	int T; cin>>T;
	
	for(int cs=1;cs<=T;cs++){
		cout<<"Case #"<<cs<<": ";
		
		int N; cin>>N;
		res = 0;
		
		for(int i=0;i<N;i++){
			used[i].clear();
			edges[i].clear();
			pr[i]=-1;
		}

		for(int i=0;i<N;i++){
			int parent; cin>>parent; parent--;
			pr[i]=parent;
			if(parent>=0){
				edges[i].push_back(parent);
				edges[parent].push_back(i);
			}
		}
						
		dfs(0,-1);
		
		cout<<res<<endl;
	}
}
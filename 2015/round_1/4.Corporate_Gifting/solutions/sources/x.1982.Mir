#include <bits/stdc++.h>
#include <sys/resource.h>
using namespace std;

const int MAX = 200000;
vector <vector<int>> tree;

int memo[MAX + 5][4];
int cookie[MAX + 5][4];

int callnum;

int solve(int node, int my_gift) {
    int &ret = memo[node][my_gift];

    if (cookie[node][my_gift] == callnum) {
        return ret;
    }

    cookie[node][my_gift] = callnum;

    ret = 0;

    for (int i = 0; i < tree[node].size(); ++i) {
        int next = tree[node][i];
        int cur_ret = numeric_limits<int>::max();
        for (int g = 1; g <= 3; ++g) {
            if (g != my_gift) {
                cur_ret = min(cur_ret, g + solve(next, g));
            }
        }
        ret += cur_ret;
    }

    return ret;
}



void set_big_stack()
{
    const rlim_t kStackSize = 64 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }

    // ...
}


int main() {
    set_big_stack();

    freopen("d-big.in", "r", stdin);
    freopen("d-big.out", "w", stdout);

    int tests, n, manager_id;

    scanf("%d", &tests);

    for (int case_no = 1; case_no <= tests; ++case_no) {
        scanf("%d", &n);


        tree = vector <vector<int>> (n + 1, vector <int>());

        for (int i = 0; i < n; ++i) {
            scanf("%d", &manager_id);
            tree[manager_id].push_back(i + 1);
        }

        callnum++;

        int answer = numeric_limits <int>::max();

        for (int g = 1; g <= 3; ++g) {
            answer = min(answer, g + solve(1, g));
        }

        printf("Case #%d: %d\n", case_no, answer);
    }

    return 0;
}

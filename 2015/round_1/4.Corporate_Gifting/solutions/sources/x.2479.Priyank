#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <queue>
#include <cmath>
#include <ctime>
#include <climits>
#include <iomanip>
#include <sstream>
using namespace std;

typedef long long LL;
#define tr(container, it)for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = (a); i < (int)(b); i++)

int GCD (int a, int b) { if (!a) return b; return GCD(b%a, a);}

#define X 1000000
int dp[4][X];
vector<int> child[X];

int main() {
    clock_t startTime = clock();
    ios_base::sync_with_stdio(false);

    int tno = 1;
    int t; cin>>t;
    while (t--) {
        int n; cin>>n;
        vector<int> par;
        vector<int> deg;
        deg.resize(n + 10, 0);
        REP(i, 0, X) child[i].clear();
        REP(i, 0, n) {
            int z; cin>>z;
            par.push_back(z - 1);
            if (i) {
                assert(z > 0);
                deg[z - 1] ++;
                child[z - 1].push_back(i);
            }
        }
        queue<int> candidates, nextCandidates;
        REP(i, 0, n) {
            if (deg[i] == 0) {
                candidates.push(i);
            }
        }
        while (!candidates.empty()) {
            int u = candidates.front(); candidates.pop();
            for (int cost = 1; cost <= 3; cost++) {
                int add = 0;
                REP(i, 0, child[u].size()) {
                    int ch = child[u][i];
                    int bch = INT_MAX;
                    REP(j, 1, 4) {
                        if (j == cost) continue;
                        bch = min(bch, dp[j][ch]);
                    }
                    add += bch;
                }
                dp[cost][u] = add + cost;
            }
            if (u && --deg[par[u]] == 0) {
                nextCandidates.push(par[u]);
            }
            if (candidates.empty()) {
                swap(candidates, nextCandidates);
            }
        }
        int ans = INT_MAX;
        REP(i, 1, 4) {
            ans = min(ans, dp[i][0]);
        }
        cout<<"Case #"<<tno++<<": "<<ans<<"\n";
    }

    clock_t endTime = clock();
    cerr<<"\nTime:"<< double(endTime - startTime) / CLOCKS_PER_SEC <<" seconds\n" ;
    return 0;
}

#pragma comment(linker, "/STACK:64777216")
#include <bits/stdc++.h>
using namespace std;

#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define SZ(a) ((int)a.size())
#define ALL(a) a.begin(),a.end()
#define FOREACH(i, c) for( __typeof( (c).begin() ) i = (c).begin(); i != (c).end(); ++i )
#define AREA2(x1,y1,x2,y2,x3,y3) ( x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2) )
#define SQR(x) ((x)*(x))
#define STR string
#define IT iterator
#define ff first
#define ss second
#define MP make_pair
#define EPS 1e-9
#define INF 2e9

#define chk(a,k) ((bool)(a&(1<<(k))))
#define set0(a,k) (a&(~(1<<(k))))
#define set1(a,k) (a|(1<<(k)))

typedef long long Long;

#define MAX 200007
#define MAX_C 21

long N;
vector<long> ed[MAX+7];
bool flag[MAX+7];
long sol[MAX+7][MAX_C+7];

void Dfs( long u ){
    long i,c,t;
    stack<long> st;
    st.push( u );
    CLR( flag );
    while( !st.empty() ){
        long u = st.top();
        st.pop();
        if( flag[u]==false ){
            flag[u] = true;
            st.push( u );
            for( i=0;i<ed[u].size();i++ ){
                st.push( ed[u][i] );
            }
        }
        else{
            for( c=1;c<=MAX_C;c++ ){
                sol[u][c] = c;
                for( i=0;i<ed[u].size();i++ ){
                    long m = INF;
                    for( t=1;t<=MAX_C;t++ ){
                        if( c==t ) continue;
                        m = min( m, sol[ed[u][i]][t] );
                    }
                    sol[u][c] += m;
                }
            }
        }
    }
}

int main( void )
{
    int i,j,v,Icase,k=0;

    //freopen("text1.txt","r",stdin );
    freopen("d.in","r",stdin );
    freopen("d.out","w",stdout );

    cin>>Icase;
    while( Icase-- ){
        cin>>N;
        for( i=1;i<=N;i++ ){
            scanf("%ld",&v );
            ed[v].pb( i );
        }
        Dfs( 1 );
        long ans = sol[1][1];
        for( i=2;i<=MAX_C;i++ ){
            ans = min( ans, sol[1][i] );
        }
        printf("Case #%ld: %ld\n",++k,ans );
        for( i=0;i<=N;i++ ){
            ed[i].clear();
        }
    }

    return 0;
}

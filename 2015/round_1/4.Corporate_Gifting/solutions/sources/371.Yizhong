#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int BIG = 100;
int n;
vector<int> c[200001];
int f[200001][BIG + 1];  // f[i][j]: node i spend j => total spend

void dp(int root) {
  // is leaf
  if (c[root].empty()) {
    for (int i = 1; i <= BIG; i++)
      f[root][i] = i;
    return;
  }
  // is sub-tree
  for (int child : c[root])
    dp(child);
  for (int i = 1; i <= BIG; i++) {
    f[root][i] = i;
    for (int child : c[root]) {
      int best = 99999999;
      for (int j = 1; j <= BIG; j++) {
        if (j == i) continue;
        best = min(best, f[child][j]);
      }
      f[root][i] += best;
    }
  }
}

int compute() {
  dp(1);
  int ans = 99999999;
  for (int i = 1; i <= BIG; i++)
    ans = min(ans, f[1][i]);
  return ans;
}

int main() {
  int t;
  cin >> t;
  for (int i = 1; i <= t; i++) {
    cin >> n;
    for (int j = 1; j <= n; j++)
      c[j].clear();
    for (int j = 1; j <= n; j++) {
      int father;
      cin >> father;
      c[father].push_back(j);
    }
    cout << "Case #" << i << ": " << compute() << endl;
  }
  return 0;
}

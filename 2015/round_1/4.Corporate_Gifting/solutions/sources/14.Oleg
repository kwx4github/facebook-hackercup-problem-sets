#include <cassert>
#include <cstdio>
#include <cstring>

#include <algorithm>
#include <vector>

using namespace std;

const int maxk = 60;
const int maxn = 200010;

int d[maxn][maxk];
vector <int> g[maxn];

void f ( int u ) {
  int r[maxk];
  memset (r, 0, sizeof (r));
  for (int i = 0; i < (int)g[u].size (); i++) {
    f (g[u][i]);
    for (int j = 0; j < maxk; j++)
      r[j] += d[g[u][i]][j];
  }
  int mi = 0;
  for (int i = 1; i < maxk; i++)
    if (r[i] + i < r[mi] + mi)
      mi = i;
  int mi2 = (int)1e9;
  for (int i = 0; i < maxk; i++) {
    if (i == mi)
      continue;
    d[u][i] = r[mi] + mi;
    mi2 = min (mi2, r[i] + i);
  }
  d[u][mi] = mi2;
}

int main() {
  int tn;
  assert (scanf ("%d", &tn) == 1);
  memset (d, -1, sizeof (d));
  for (int t = 1; t <= tn; t++) {
    int n;
    assert (scanf ("%d", &n) == 1);
    for (int i = 0; i < n; i++) {
      int a;
      assert (scanf ("%d", &a) == 1);
      assert ((a == 0) == (i == 0));
      if (a != 0)
        g[a - 1].push_back (i);
    }
    f (0);
    int ans = d[0][maxk - 1] + n;
    printf ("Case #%d: %d\n", t, ans);
    for (int i = 0; i < n; i++) {
      g[i].clear ();
      memset (d[i], -1, sizeof (d[i]));
    }
  }
  return 0;
}


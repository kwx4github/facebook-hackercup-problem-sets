#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

vvi gr;
vvi c, cl, cr;

void dfs(int v) {
    for (int x = 1; x < c[v].size(); ++x)
        c[v][x] = x;
    for (int i = 0; i < gr[v].size(); ++i) {
        int v1 = gr[v][i];
        dfs(v1);
        for (int x = 1; x < c[v].size(); ++x) {
            c[v][x] += min(cl[v1][x], cr[v1][x]);
        }
    }
    c[v][0] = cl[v][0] = cr[v].back() = 1e9;
    for (int x = 1; x < cl[v].size(); ++x) {
        cl[v][x] = min(cl[v][x-1], c[v][x-1]);
    }
    for (int x = cr[v].size() - 2; x >= 0; --x) {
        cr[v][x] = min(cr[v][x+1], c[v][x+1]);
    }
}

int main() {
    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        printf("Case #%d: ", test);
        int n;
        cin >> n;
        gr.clear(); gr.resize(n);
        for (int i = 0; i < n; ++i) {
            int t; cin >> t;
            --t;
            if (t >= 0) gr[t].push_back(i);
        }
        c.assign(n, vi(2500, 0));
        cl.assign(n, vi(c[0].size(), 0));
        cr.assign(n, vi(c[0].size(), 0));
        dfs(0);
        ll res = c[0][0];
        for (int i = 0; i < c[0].size(); ++i) {
            res = min(res, (ll)c[0][i]);
    //        cerr << i << ' ' << c[0][i] << endl;
        }
        cout << res << endl;
    }
    return 0;
}

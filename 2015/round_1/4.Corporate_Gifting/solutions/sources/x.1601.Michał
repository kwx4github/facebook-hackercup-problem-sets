
//Micha≈Ç Glapa
#include<bits/stdc++.h>
using namespace std;
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REP(i,n) for(int i=0;i<n;i++)
#define FORD(i,j,k) for(int i=j;i>=k;i--)
#define ll long long
//Make sure no overflow problems
#define int long long
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define all(x) x.begin(),x.end()
#define ld long double
#define mini(x,y) x=min(x,y)
#define maxi(x,y) x=max(x,y)
#define CLR(a,x) memset(a,x,sizeof(a))
#define SIZE(x) ((int)x.size())
const int INF = 1000000009;
const long long INFLL = (ll)INF * (ll)INF;
const ld EPS = 10e-9;
typedef vector<int> vi;
typedef pair<int,int> pii;

//reading and printing
template<typename T>
void read(T & a) {cin >> a;}
template<typename T>
void read(vector<T> & v, int n) {int tmp; REP(i,n){read(tmp); v.pb(tmp);};}
template<typename T, typename V>
void read(pair<T,V> & p) {read(p.x); read(p.y);}
template<typename T>
void print(T & a) {cout << a << "\n";}
void print(char * s) {printf("%s\n",s);}
template<typename T>
void print_(T & a) {cout << a <<" ";}
template<typename T>
void print(vector<T> &v) {for(auto &i : v) print_(i); cout<<"\n";}
template<typename T,typename V>
void print(pair<T,V> &p) {print_(p.x);print(p.y);}
template<typename T,typename V>
void print_(pair<T,V> &p) {print_(p.x);print_(p.y);}

//useful funcs
template<typename T>
void unique(vector<T> & v) {v.resize(unique(v.begin(),v.end())-v.begin());}
vi range (int a, int b) {vi res; FOR(i,a,b-1) res.pb(i); return res;}
vector<pii> zip(vi &a, vi & b) {vector<pii> res; REP(i,SIZE(a)) res.pb(mp(a[i],b[i])); return res;}
vector<pii> zip(vi a, vi  b) {vector<pii> res; REP(i,SIZE(b)) res.pb(mp(a[i],b[i])); return res;}

///////////////////////////////////////////////////////////////
const int MX = 200007;
int res[MX];
vector<int> graph[MX];
int answer;
int n;
void read_and_init() {
    cin >> n;
    FOR(i,1,n) {
        graph[i].clear();
        res[i] = 0;
    }
    FOR(i, 1, n) {
        int tmp;
        cin >> tmp;
        if(tmp != 0)
            graph[tmp].push_back(i);
    }
    answer = 0;
}
int mex(vector<int> v) {
    sort(all(v));
    unique(v);
    for(int i = 0; i < v.size(); i++)
        if(v[i] != i + 1)
            return i + 1;
    return v.size() + 1;
}
void dfs(int v) {
    res[v] = 1;
    for(auto i : graph[v])
        dfs(i);
    vi tmp;
    for(auto i : graph[v])
        tmp.pb(res[i]);
    res[v] = mex(tmp);
    answer += res[v];
}

void solve_tc(int nr) {
    read_and_init();
    dfs(1);
    printf("Case #%lld: %lld\n", nr, answer);
}
main()
{
    int t;
    scanf("%lld",&t);
    FOR(i,1,t)
        solve_tc(i);
}

import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.util.ArrayList;
import java.io.InputStream;
import java.util.List;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting {
	static final int MAX = 20;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int n = in.nextInt();
		List<Integer>[] t = new List[n];
		for (int i = 0; i < n; i++) {
			t[i] = new ArrayList<>();
		}
		for (int u = 0; u < n; u++) {
			int v = in.nextInt() - 1;
			if (v < 0) continue;
			t[u].add(v);
			t[v].add(u);
		}

		int[][] dp = new int[n][MAX];

		dfs(t, 0, -1, dp);

		int res = Integer.MAX_VALUE;
		for (int v : dp[0])
			res = Math.min(res, v);

		res += n;
		out.printf("Case #%d: %d\n", testNumber, res);
	}

	void dfs(List<Integer>[] t, int u, int p, int[][] dp) {
		for (int i = 0; i < MAX; i++)
			dp[u][i] = i;
		for (int v : t[u]) {
			if (v == p) continue;
			dfs(t, v, u, dp);
			for (int i = 0; i < MAX; i++)
				dp[u][i] += dp[v][i];
		}
		int[] minLeft = dp[u].clone();
		int[] minRight = dp[u].clone();

		for (int i = 1; i < MAX; i++)
			minLeft[i] = Math.min(minLeft[i], minLeft[i - 1]);
		for (int i = MAX - 2; i >= 0; i--)
			minRight[i] = Math.min(minRight[i], minRight[i + 1]);

		for (int i = 0; i < MAX; i++)
			dp[u][i] = Math.min(i - 1 >= 0 ? minLeft[i - 1] : Integer.MAX_VALUE, i + 1 < MAX ? minRight[i + 1] : Integer.MAX_VALUE);
	}
}

class InputReader {
	final InputStream is;
	final byte[] buf = new byte[1024];
	int pos;
	int size;

	public InputReader(InputStream is) {
		this.is = is;
	}

	public int nextInt() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		int sign = 1;
		if (c == '-') {
			sign = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res = res * 10 + c - '0';
			c = read();
		} while (!isWhitespace(c));
		return res * sign;
	}

	public String next() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		StringBuilder sb = new StringBuilder();
		do {
			sb.append((char) c);
			c = read();
		} while (!isWhitespace(c));
		return sb.toString();
	}

	int read() {
		if (size == -1)
			throw new InputMismatchException();
		if (pos >= size) {
			pos = 0;
			try {
				size = is.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (size <= 0)
				return -1;
		}
		return buf[pos++] & 255;
	}

	static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

}


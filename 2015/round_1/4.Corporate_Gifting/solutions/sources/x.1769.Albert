import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.*;


/**
 * Template
 * @author Albert Choi
 */
public class D {
	static BufferedReader _reader = new BufferedReader(new InputStreamReader(System.in));
	static String _s;
	static StringTokenizer _st;
	static int _l;
	static String nline() throws IOException { _s = _reader.readLine(); ++_l; _st = new StringTokenizer(_s); return _s; }
	static String nword() 	{ return _st.nextToken(); }
	static int nint() 		{ return Integer.parseInt(nword()); }
	static long nlong() 	{ return Long.parseLong(nword()); }
	static double ndouble() { return Double.parseDouble(nword()); }
	static BigInteger nbig(){ return new BigInteger(nword()); }
	static PrintStream sout = System.out, serr = System.err;
	
	static void test() {
		for (int i=0; i<200000; i++) {
			sout.print(i + " ");
		}
		sout.println();
		sout.print("0 ");
		for (int i=1; i<100000; i++) {
			sout.print(i+" "+i+" ");
		}
		sout.println();
	}
	public static void main(String[] args) throws IOException {
		//test();
		try {
			nline();
			int T = nint();
			for (int t=1; t<=T; t++) {
				String sans = doProblem();
				sout.println("Case #" + t + ": " + sans);
			}
		} catch (Throwable t) {
			System.err.println("At input line " + _l + ": " + _s); throw t;
		}
	}
	
	static String doProblem() throws IOException {
		nline();
		N = nint();
		parent = new int[N+1];
		children = new List[N+1];
		
		for (int i=0;i<N+1;i++) {
			children[i] = new ArrayList<>();
		}

		nline();
		for (int i=1;i<N+1;i++) {
			parent[i] = nint();
			children[parent[i]].add(i);
		}
		cache = new int[N+1][MAXCACHE];
		calls = 0;
		hits = 0;
		hivalue = 0;

		String ans = best(0, 0) + "";
		serr.println(calls+" calls, "+hits+" cache hits, "+hivalue+" high value");
		return ans;
	}
	
	static int N, calls, hits, hivalue, MAXCACHE = 10;
	
	static int parent[];
	static List<Integer> children[];
	
	static int[][] cache;

	static int best(int node, int value) {
		calls++;
		if (value < MAXCACHE && cache[node][value] != 0) {
			hits++;
			return cache[node][value]; 
		}
		if (value > hivalue) hivalue = value;
		if (children[node].isEmpty()) return value;
		int childtotal = 0;
		for (int child : children[node]) {
			int best = Integer.MAX_VALUE;
			//int bestk;
			for (int k=1; k<N; k++) {
				if (k==value) continue;
				int b = (best(child, k));
				if (b < best) {
					best = b;
					//bestk = k;
				} else {
					break;
				}
			}
			childtotal += best;
		}
		cache[node][value] = value+childtotal;
		return value + childtotal;
	}
	
}

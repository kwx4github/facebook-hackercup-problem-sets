#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

int N;
int par[333333];
vector <int> ch[333333];

#define MM 90
vector<int> kol;
int dp[333333][MM + 3];

void doit(int p) {
    if (ch[p].size() == 0) {
        fo (v, 1, MM) dp[p][v] = v;
    }
    else {
        fo (v, 1, MM) dp[p][v] = v;
        fore(it, ch[p]) {
            int bv = -1;
            int bv2 = -1;
            fo (v, 1, MM) if (bv == -1 || dp[*it][bv] > dp[*it][v])
                bv = v;
            fo (v, 1, MM) if (v != bv && (bv2 == -1 || dp[*it][bv2] > dp[*it][v]))
                bv2 = v;
            db(p<<" "<<*it<<" "<<dp[*it][bv]<< " "<<dp[*it][bv2])
            fo (v, 1, MM) {
                if (v != bv) {
                    dp[p][v] += dp[*it][bv];
                }
                else
                    dp[p][v] += dp[*it][bv2];
            }
        }
    }
}

void dfs(int p) {
    fore(it, ch[p])
        dfs(*it);
    kol.push_back(p);
    doit(p);
}

void solve() {
    kol.clear();
    scanf("%d", &N);
    fo(i,1,N) scanf("%d", &par[i]);
    fo(i,1,N) { ch[i].clear(); }
    fo(i,2,N) { ch[par[i]].pb(i); }
    fo(i,1,N) { for (int j = 0; j <= MM; j++) dp[i][j] = 0; }
    dfs(1);
    int sol = (int)1e9;
    fo (v, 1, MM) sol = min(sol, dp[1][v]);
    fo (v, 1, MM) db(v<<" "<<dp[1][v]);
    printf("%d", sol);
}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    scanf("%d", &t);
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

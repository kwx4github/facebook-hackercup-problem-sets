#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <stack>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

vector<vector<int> > G;

int T, N;
const int MAX_N = 200000;
bool used[MAX_N + 1];
int dp[MAX_N + 1][5];
const int INF = 1 << 25;
int nextChild[MAX_N + 1];

void solve()
{
	memset(dp, 0, sizeof(dp));
	memset(used, 0, sizeof(used));
	memset(nextChild, 0, sizeof(nextChild));
	stack<int> s;
	s.push(0);

	while (!s.empty()) {
		int v = s.top();

		if (G[v].size() == 0) {
			// leaf
			for (int i = 1; i <= 4; ++i) {
				dp[v][i] = i;
			}
			used[v] = true;
			s.pop();

		} else {
			bool done = true;
			if (nextChild[v] < G[v].size()) {
				int u = G[v][nextChild[v]];
				s.push(u);
				nextChild[v]++;

			} else {
				for (int i = 1; i <= 4; ++i) {
					dp[v][i] = i;
					for (vector<int>::iterator it = G[v].begin(); it != G[v].end(); ++it) {
						int u = *it;
						int minval = INF;
						for (int j = 1; j <= 4; ++j) {
							if (i != j) minval = min(minval, dp[u][j]);
						}
						dp[v][i] += minval;
					}
				}
				s.pop();
			}
		}
	}

	int res = dp[0][1];
	for (int i = 2; i <= 4; ++i) {
		res = min(res, dp[0][i]);
	}
	printf("%d\n", res);
	return;
}

void addEdge(int parent, int child)
{
	G[parent].push_back(child);
}

int main()
{
	scanf("%d", &T);
	for (int t = 1; t <= T; ++t) {
		printf("Case #%d: ", t);
		scanf("%d", &N);
		G = vector<vector<int> >(N, vector<int>(0));
		int mgr;
		for (int i = 0; i < N; ++i) {
			scanf("%d", &mgr);
			--mgr;
			if (i != 0) {
				addEdge(mgr, i);
			}
		}
		solve();
	}
	return 0;
}

import scala.collection._

object D extends App {

  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }

  def solve(test: Int): Unit = {

    val Array(n) = readInts(1)
    val managers = readInts(n).map(_ - 1)
    //val managers = Array.fill(n)(0) //readInts(n).map(_ - 1)
    val childBuilders = Array.fill(n) { new mutable.ArrayBuilder.ofInt }
    val maxC = 20

    for (i <- 1 until n) childBuilders(managers(i)) += i
    val children = childBuilders.map(_.result)

    val memo = Array.fill(maxC + 1, n) { -1 }

    def getMinCost(parent: Int, parentC: Int): Int = {
      if (children(parent).length == 0) {
        if (parentC == 1) 2 else 1
      } else if (memo(parentC)(parent) >= 0) {
        memo(parentC)(parent)
      } else {
        var minCost = Int.MaxValue
        for (c <- 1 to maxC) if (c != parentC) {
          var cost = c
          var i = 0
          while (i < children(parent).length) {
            cost += getMinCost(children(parent)(i), c)
            i += 1
          }
          if (cost < minCost) minCost = cost
        }
        memo(parentC)(parent) = minCost
        minCost
      }
    }

    val res = getMinCost(0, 0)

    println(s"Case #$test: $res")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/D/D.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/D/D.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

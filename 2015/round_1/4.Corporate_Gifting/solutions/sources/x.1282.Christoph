#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# facebook hackercup - c.durr - 2015

# color a tree with positive integers minimizing the sum
# linear time 
# algorithm by An introduction to chromatic sums by E. Kubicka and A. J. Schwenk
# CSC '89 Proceedings of the 17th conference on ACM Annual Computer Science Conference Pages 39-45 
# http://dl.acm.org/citation.cfm?id=75430

from sys import *
import string
from queue import *

def readstr():    return stdin.readline().strip()
def readint():    return int(stdin.readline())
def readarray(f): return list(map(f, stdin.readline().split()))

def chromatic_sum(father):
    N = len(father)
    for i in range(N):
        father[i] -= 1  # 0-based indices are better
    son     = [-1] * N
    brother = [-1] * N
    nosons  = [ 0] * N
    for i in range(N-1,0,-1):  # excluding root
        j = father[i]
        brother[i] = son[j]
        son[j] = i
        nosons[j] += 1
    minsum = [1] * N
    rcolor = [1] * N
    delta  = [1] * N
    ncolor = [2] * N
    coloradd = [0] * (N+3)
    for i in range(N-1,-1,-1): # including root
        if nosons[i] == 0:
            continue
        s = son[i]
        mintotal = 0
        for k in range(1, nosons[i]+3):
            coloradd[k] = k
        while s != -1:
            mintotal += minsum[s]
            coloradd[rcolor[s]] += delta[s]
            s = brother[s]
        sum1 = float('inf')
        sum2 = float('inf')
        color1 = 0
        color2 = 0
        for k in range(1, nosons[i]+3):
            val = coloradd[k]
            if val < sum1:
                color2 = color1
                sum2 = sum1
                color1 = k
                sum1 = val
            elif val < sum2:
                color2 = k
                sum2 = val
        minsum[i] = sum1 + mintotal
        rcolor[i] = color1
        delta[i]  = sum2-sum1
        ncolor[i] = color2
    return minsum[0]

for test in range(readint()):
    N = readint()
    father = readarray(int)
    print( "Case #%d: %s" % (test+1, chromatic_sum(father)))
    
    

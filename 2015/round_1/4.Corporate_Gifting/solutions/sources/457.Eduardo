#include<cstdio>
#include<cstring>
#include<queue>
#include<algorithm>
#include<vector>

using namespace std;

#define N 200000
#define limit 20

#define oo (1 << 29)

int dp[N + 5][limit + 5];

int n, C, caso;

vector<int> L[N + 5];

vector<int> order;

bool used[N + 5];

int dfs(int u, int last){

	int &ret = dp[u][last];

	if(ret > -1)return ret;

	int ans = oo;

	for(int j = 1; j <= limit; ++j){
		if(j == last)continue;

		int aux = 0;
		
		for(int i = 0; i < L[u].size(); ++i){
			int to = L[u][i];
			aux += dfs(to, j);
		}

		ans = min(ans, j + aux);
	}	

	return ret = ans;
}

int bfs(){

	memset(used, false, sizeof(used));

	queue<int> Q;

	Q.push(0);

	order.push_back(0);

	used[0] = true;
	
	while(!Q.empty()){
		int u = Q.front();		
		Q.pop();

		for(int i = 0; i < L[u].size(); ++i){
			int to = L[u][i];

			if(!used[to]){
				used[to] = true;
				Q.push(to);
				order.push_back(to);
			}

			
		}

		
	}
}

void doCase(){
	scanf("%d", &n);

	for(int i = 0; i < n; ++i)L[i].clear();
	order.clear();

	int x;
	
	for(int i = 0; i < n; ++i){
		scanf("%d", &x);
		if(x > 0)L[--x].push_back(i);
	}

	memset(dp, -1, sizeof(dp));

	bfs();

	int ans = oo;
	for(int i = n - 1; i >= 0; --i){
		int u = order[i];

		for(int j = 1; j <= limit; ++j){
			dfs(u, j);
			if(u == 0)ans = min(ans, dfs(u, j));
		}
	}

	printf("Case #%d: %d\n", ++caso, ans);
}

int main(){
	caso = 0;
	
	scanf("%d", &C);
	
	for(int i = 0; i < C; ++i)doCase();
}

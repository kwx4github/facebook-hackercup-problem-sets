import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class D {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	static List<Integer> children[];
	static long bestCost, altAdd;
	static int bestTop;
	
	static void solve(int cur) {
		long curCost = 0;
		long costAdds[] = new long[children[cur].size() + 3];
		for (int next: children[cur]) {
			solve(next);
			curCost += bestCost;
			if (bestTop < costAdds.length) {
				costAdds[bestTop] += altAdd;
			}
		}
		bestCost = Long.MAX_VALUE;
		bestTop = -1;
		for (int root = 1; root < costAdds.length; root++) {
			long testCost = curCost + costAdds[root] + root;
			if (bestCost > testCost) {
				bestCost = testCost;
				bestTop = root;
			}
		}
		altAdd = Long.MAX_VALUE;
		for (int root = 1; root < costAdds.length; root++) {
			if (root == bestTop) {
				continue;
			}
			long testCost = curCost + costAdds[root] + root;
			if (altAdd > testCost) {
				altAdd = testCost;
			}
		}
		altAdd -= bestCost;
	}
	
	static void solve() throws Exception {
		int n = nextInt();
//		int n = 200000;
		children = new List[n];
		for (int i = 0; i < n; i++) {
			children[i] = new ArrayList<>();
		}
		if (nextInt() != 0) {
			throw new AssertionError();
		}
		for (int i = 1; i < n; i++) {
			children[nextInt() - 1].add(i);
//			children[i - 1].add(i);
		}
		solve(0);
		printCase();
		out.println(bestCost);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
// may need to increase the stack size (e.g. ulimit -s 65536)

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

vector <vector <int> > adj;
vector <int> best;
vector <int> best_top;
vector <int> delta_second;

void calculate(int n) {
    if (best[n] != 0) {
        return;
    }
    vector <int>& e = adj[n];
    int q = e.size();
    if (q == 0) {
        best[n] = 1;
        best_top[n] = 1;
        delta_second[n] = 1;
        return;
    }
    for (int i = 0; i < q; i++) {
        calculate(e[i]);
    }
    vector <int> deltas(q + 3, 0);
    int sum = 0;
    for (int i = 0; i < q; i++) {
        sum += best[e[i]];
        if (best_top[e[i]] > q + 2) {
            continue;
        }
        deltas[best_top[e[i]]] += delta_second[e[i]];
    }
    vector <pair <int, int> >new_best(0, make_pair(0, 0));
    for (int i = 1; i < q + 3; i++) {
        int s = sum + i + deltas[i];
        new_best.push_back(make_pair(s, i));
        sort(new_best.begin(), new_best.end());
        if (new_best.size() > 2) {
            new_best.pop_back();
        }
    }
    best[n] = new_best[0].first;
    best_top[n] = new_best[0].second;
    delta_second[n] = new_best[1].first - new_best[0].first;
    return;
}

int compute() {
    int N;
    cin >> N;
    adj = vector <vector <int> >(N + 1, vector <int>(0, 0));
    best = vector <int>(N + 1, 0);
    best_top = vector <int>(N + 1, 0);
    delta_second = vector <int>(N + 1, 0);
    int m;
    for (int i = 1; i <= N; i++) {
        cin >> m;
        adj[m].push_back(i);
    }
    calculate(1);
    return best[1];
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; i++) {
        int res = compute();
        cout << "Case #" << i << ": " << res << endl;;
    }
    return 0;
}


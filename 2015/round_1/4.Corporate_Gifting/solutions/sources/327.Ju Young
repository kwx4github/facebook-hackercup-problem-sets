#include<stdio.h>
#include<string.h>
#include<vector>
#include<string>
#include<map>
#include<set>
#include<queue>
#include<memory.h>
#define NUM 15
using namespace std;
vector<vector<int>> man;
queue<int> q;
int N, inc[210000];
int d[210000][NUM+1], par[210000];

int main(){
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int T;
	scanf("%d", &T);
	for(int tc = 1; tc <= T; tc++){
		man.clear();
		memset(inc, 0, sizeof(inc));
		memset(par, 0, sizeof(par));
		memset(d, 0, sizeof(d));
		printf("Case #%d: ", tc);
		scanf("%d", &N);
		man.resize(N+1);
		for(int i = 1; i <= N; i++){
			int a;
			scanf("%d", &a);
			if(a == 0)continue;
			man[a].push_back(i);
			par[i] = a;
			inc[a]++;
		}
		for(int i = 1; i <= N; i++)
			if(inc[i] == 0) q.push(i);
		while(!q.empty()){
			int now = q.front();
			q.pop();
			//int ok1, ok2, ok3;
			int ok[NUM+1] = {0,};
			for(int i = 0; i < (int)man[now].size(); i++){
				int child = man[now][i];
				for(int j = 1; j <= NUM; j++){	
					for(int k = 1; k <= NUM; k++)
						ok[k] = 0x7fffffff;
					for(int k = 1; k <= NUM; k++){
						if(j==k) continue;
						ok[j] = min(ok[j], d[child][k] + k);
					}
					d[now][j] += ok[j];
				}
			}
			inc[ par[now] ]--;
			if(inc[par[now]]==0) q.push(par[now]);
		}
		int ans = 0x7fffffff;
		for(int i = 1; i <= NUM; i++)
			ans = min(ans, d[1][i]+i);
		printf("%d\n", ans);
	}
	return 0;
}
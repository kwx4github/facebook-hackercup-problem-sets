#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair

typedef pair<int, int> pii;
typedef long long ll;

const int MAXN = 200001;

int T;
int n;
ll dp[MAXN][2];
int val[MAXN][2];
ll sum[MAXN][2];
int to[MAXN], head[MAXN], nxt[MAXN], E;
int deg[MAXN];

void clear() {
  memset(deg, 0, sizeof deg);
  memset(head, 0xff, sizeof head);
  E = 0;
}

inline void addEdge(int a, int b) {
  to[E] = b; nxt[E] = head[a]; head[a] = E++; ++deg[a];
}

void load() {
  scanf("%d", &n);
  for (int i = 1, p; i <= n; ++i) {
    scanf("%d", &p);
    if (i)
      addEdge(p, i);
  }
}

void dfs(int v) {
  for (int i = head[v]; ~i; i = nxt[i])
    dfs(to[i]);
  ll optimal = 0;
  for (int i = head[v]; ~i; i = nxt[i]) {
    sum[val[to[i]][0]][0] += dp[to[i]][1];
    sum[val[to[i]][0]][1] += dp[to[i]][0];
    optimal += dp[to[i]][0];
  }
  dp[v][0] = dp[v][1] = LLONG_MAX;
  val[v][0] = val[v][1] = -1;
  for (int x = 1, xx = max(2, deg[v] + 1); x <= xx; ++x) {
    ll cur = optimal - sum[x][1] + sum[x][0] + x;
    if (cur < dp[v][1]) {
      if (cur < dp[v][0]) {
	dp[v][1] = dp[v][0];
	val[v][1] = val[v][0];
	dp[v][0] = cur;
	val[v][0] = x;
      }
      else {
	dp[v][1] = cur;
	val[v][1] = x;
      }
    }
  }
  for (int i = head[v]; ~i; i = nxt[i]) {
    sum[val[to[i]][0]][0] = 0;
    sum[val[to[i]][0]][1] = 0;
  }
}

ll solve() {
  dfs(1);
  return dp[1][0];
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  scanf("%d", &T);
  for (int id = 1; id <= T; ++id) {
    clear();
    load();
    printf("Case #%d: %lld\n", id, solve());
  }
  return 0;
}

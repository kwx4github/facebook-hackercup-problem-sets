#define _CRT_SECURE_NO_WARNINGS
#include <cmath>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iterator>
#include <ctime>
#include <iomanip>

typedef unsigned int uint32;
typedef signed long long int64;
typedef unsigned long long uint64;

using namespace std;

#define ALL(a) a.begin(), a.end()
#define FOR(a) for (int i = 0; i < a; ++i)
#define D(a) #a << ": " << a << "\n"

int choose(set<int> const& s)
{
    for (int i = 1; ; ++i)
        if (!s.count(i))
            return i;

    assert(false);
}

int main()
{
    vector<set<int> > in, taken;
    vector<int> out;
    int CASES;
    cin >> CASES;
    for (int CASE = 1; CASE <= CASES; ++CASE)
    {
        int n;
        cin >> n;

        in.clear(), out.clear(), taken.clear();
        in.resize(n+1), out.resize(n+1), taken.resize(n+1);

        int tmp;
        scanf("%d", &tmp);
        out[1] = 0;

        FOR(n-1)
        {
            scanf("%d", &tmp);

            in[tmp].insert(i+2);
            out[i+2] = tmp;
        }

        vector<int> q;
        FOR(n)
            if (in[i+1].empty())
                q.push_back(i+1);

        int res = 0;
        while (!q.empty())
        {
            vector<int> newQ;

            for (int a : q)
            {
                int val = choose(taken[a]);
                int dest = out[a];

                res += val;

                if (dest == 0)
                    continue;

                taken[dest].insert(val);
                in[dest].erase(a);

                if (in[dest].empty())
                    newQ.push_back(dest);
            }

            q.swap(newQ);
            newQ.clear();
        }

        printf("Case #%d: %d\n", CASE, res);
    }

    return 0;
}

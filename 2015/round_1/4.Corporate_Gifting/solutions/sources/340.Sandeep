#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <cstdlib>
#include <string>
#include <cstring>
#include <fstream>
#include <bitset>

#define in(n) scanf("%d",&(n))
#define out(n) printf("%d",(n))
#define inl(n) scanf("%lld",&(n))
#define outl(n) printf("%lld",(n))
#define SP printf(" ")
#define NL printf("\n")
#define MP make_pair
#define PB push_back

#define FOR(i,n) for(i=0;i<n;i++)
#define FOR1(i,n) for(i=1;i<=n;i++)
#define ff first
#define ss second
#define debug(a) cout<<#a<<" --> "<<a<<endl;
#define debug1(a) cout<<#a<<" --> "<<a<<" ";

using namespace std;

typedef long long ll;
typedef pair <int, int> PII;
typedef pair <long long, long long> PLL;
typedef set <int> SI;
typedef map <int,int> MII;
typedef set <long long> SL;
typedef map <long long, long long> MLL;

ll test_no,n,i,j,t,k;
struct node
{
	int K1,K2,C;
};

struct node1
{
	ll index,depth;
};

node arr[200010];
ll managers[200010];
vector<ll> tree[200010];
vector<ll> levels[200010];
ll delta[200010];
ll fin[200010];

int main()
{
    freopen("Din.txt","r",stdin);
    freopen("Dout.txt","w",stdout);
    cin>>t;
    FOR1(test_no, t)
    {
        cin>>n;
        for (i=0;i<=n;i++)
        {
        	tree[i].clear();
        	levels[i].clear();
        }
        for (i=1;i<=n;i++)
        {
        	inl(managers[i]);
        }
        for (i=2;i<=n;i++)
        {
        	tree[managers[i]].PB(i);
        }
        queue<node1> q;
        node1 temp;
        temp.index=1;
        temp.depth=1;
        q.push(temp);
        ll maxlevel=0;
        while (!q.empty())
        {
        	temp=q.front();
        	q.pop();
        	maxlevel=max(maxlevel,temp.depth);
        	levels[temp.depth].PB(temp.index);
        	for (i=0;i<tree[temp.index].size();i++)
        	{
        		node1 temp1;
        		temp1.index=tree[temp.index][i];
        		temp1.depth=temp.depth+1;
        		q.push(temp1);
        	}
        }
        /*cout<<"Levels --->\n";
        for (i=1;i<=maxlevel;i++)
        {
            for (j=0;j<levels[i].size();j++)
            {
                cout<<levels[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<"Levels --->\n";*/
        for (i=maxlevel;i>=1;i--)
        {
        	for (j=0;j<levels[i].size();j++)
        	{
        		ll ind=levels[i][j];
        		if (tree[ind].size()==0)
        		{
        			arr[ind].K1=1;
        			arr[ind].K2=2;
        			arr[ind].C=1;
        		}
        		else
        		{
        			ll K=0,d=tree[ind].size();
        			for (k=0;k<d;k++)
        			{
        				K+=arr[tree[ind][k]].K1;
        			}
        			for (k=1;k<=d+1;k++)
        			{
        				delta[k]=K;
        			}
        			for (k=0;k<d;k++)
        			{
        				if (arr[tree[ind][k]].C <= d+1)
        				{
        					delta[arr[tree[ind][k]].C] += (arr[tree[ind][k]].K2 - arr[tree[ind][k]].K1);
        				}
        			}
        			for (k=1;k<=d+1;k++)
        			{
        				fin[k]=k+delta[k];
        			}
        			arr[ind].K1=1000000000;
        			arr[ind].K2=1000000000;
        			arr[ind].C=1000000000;
        			for (k=1;k<=d+1;k++)
        			{
        				if (fin[k]<arr[ind].K1)
        				{
        					arr[ind].K1=fin[k];
        					arr[ind].C=k;
        				}
        			}
        			for (k=1;k<=d+1;k++)
        			{
        				if (fin[k]<arr[ind].K2 && k!=arr[ind].C)
        				{
        					arr[ind].K2=fin[k];
        				}
        			}
        		}
        	}
        }
        for (i=1;i<=maxlevel;i++)
        {
            //debug1(arr[i].K1);debug1(arr[i].C);debug(arr[i].K2)
        }
        cout<<"Case #"<<test_no<<": "<<arr[1].K1;
        if (test_no!=t)
        {
            cout<<endl;
        }
    }
    return 0;
}

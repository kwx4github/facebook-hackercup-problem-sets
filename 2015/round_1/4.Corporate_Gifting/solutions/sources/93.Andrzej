MAX_PRICE = 20

def solve(numbers):
  size = len(numbers)
  children = []
  solutions = [None]*size
  bests = [None]*size
  for i in range(size):
    children.append([])
  for i in range(1,size):
    children[numbers[i]].append(i)
  
  order = []
  notTakenChildren = map(lambda x: len(x), children)
  queue = []
  for i in range(size):
    if notTakenChildren[i]==0:
      queue.append(i)
  
  while queue: # not empty
    next = queue.pop()
    order.append(next)
    notTakenChildren[numbers[next]] -= 1
    if notTakenChildren[numbers[next]]==0:
      queue.append(numbers[next])
  
  for step in order:
    solvePart(children,solutions,bests,step)
  return min(solutions[0][1:])

def solvePart(children,solutions,bests,current):
  solutions[current] = [0]
  
  for i in range(1,MAX_PRICE+1):
    summa = i
    for child in children[current]:
      bestPrice = bests[child][2] if i==bests[child][0] else bests[child][1]
      summa += bestPrice
    solutions[current].append(summa)
  bestId,best2Id = 1,2
  if solutions[current][1] > solutions[current][2]:
    bestId,best2Id = 2,1
  for i in range(3,MAX_PRICE+1):
    if solutions[current][i]<solutions[current][best2Id]:
      best2Id = i
      if solutions[current][best2Id]<solutions[current][bestId]:
        bestId,best2Id = best2Id,bestId
  bests[current] = (bestId,solutions[current][bestId],solutions[current][best2Id])

T = input()

for t in range(1,T+1):
  _ = input()
  data = raw_input().strip().split(' ')
  numbers = map(lambda x:int(x)-1,data)
  result = solve(numbers)
  print "Case #%d: %d" % (t,result)

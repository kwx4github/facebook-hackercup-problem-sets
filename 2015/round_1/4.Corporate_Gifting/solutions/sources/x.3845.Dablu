#include <iostream>
#include <vector>
#include <climits>
#include <fstream>
#include <cstring>
using namespace std;

const int NN = 212345;

struct EDGE {
	int nxt;
	int to;	
} edge[NN];

int head[NN];

int dp[NN][3];
int vis[NN][3];
int tc, e_no;

void addEdge(int x,int y){
	edge[e_no].nxt = head[x];
	edge[e_no].to = y;
	head[x] = e_no++;
}

int f(int x,int fa,int type){
	if (vis[x][type] == tc)
		return dp[x][type];

	//cerr << "called " << x << " " << type << "\n";
	vis[x][type] = tc;
	int ans = type+1;

	for(int i = head[x]; i >= 0; i = edge[i].nxt){
		int y = edge[i].to;
		if (y == fa) continue;
		int add = INT_MAX;
		for(int k = 0; k < 3; ++k){
			if (k == type) continue;
			add = min(add,f(y,x,k));
		}
		ans += add;
	}

	dp[x][type] = ans;
	return ans;
}

void solve(){
	e_no = 0;
	memset(head,-1,sizeof(head));

	int n,num;
	cin >> n;

	for(int i = 1; i <= n; ++i){
		cin >> num;
		addEdge(num,i);
	}

	int ans = f(1,0,0);
	ans = min(ans,f(1,0,1));
	ans = min(ans,f(1,0,2));
	cout << "Case #" << tc << ": " << ans << "\n";
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t;
	cin >> t;
	for(int i = 1; i <= t; ++i){
		//if (i  > 10) continue;
		tc = i;
		//cerr << "running for test " << tc << "\n";
		solve();
	}
	return 0;
}
import java.io.*;
import java.util.*;

public class D {

	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	int nextInt() throws Exception {
		return Integer.parseInt(next());
	}

	long nextLong() throws Exception {
		return Long.parseLong(next());
	}

	double nextDouble() throws Exception {
		return Double.parseDouble(next());
	}

	int MAGIC = 333;
	int MAXANS = Integer.MAX_VALUE / 4;

	class Solver extends Thread {

		int n, a[];
		ArrayList<Integer> child[];
		public String answer;

		Solver() {
			try {
				n = nextInt();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			child = new ArrayList[n];
			for (int i = 0; i < n; i++)
				child[i] = new ArrayList<Integer>();

			a = new int[n];
			for (int i = 0; i < n; i++) {
				try {
					a[i] = nextInt() - 1;
					if (i != 0)
						child[a[i]].add(i);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			answer = "WTF";
		}

		public void run() {
			System.err.println("STARTED");
			long start = System.currentTimeMillis();

			memo = new int[n][MAGIC + 4];

			for (int i = 0; i < n; i++)
				Arrays.fill(memo[i], -1);

			long ans = MAXANS;
			for (int i = 1; i < MAGIC; i++)
				ans = Math.min(ans, dp(0, i));
			this.answer = ans + "";
			System.err.println("FINISHED @ "
					+ (System.currentTimeMillis() - start));
		}

		int memo[][];

		private int dp(int i, int j) {
			// System.err.println(i + " " + j);

			int ans = j;

			// if (child[i].isEmpty())
			// return j;

			if (memo[i][j] != -1)
				return memo[i][j];

			for (int e : child[i]) {
				int update = MAXANS;
				for (int jj = 1; jj <= MAGIC; jj++)
					if (jj != j)
						update = Math.min(update, dp(e, jj));
				ans += update;
			}

			// ans += update;

			memo[i][j] = ans;
			return ans;
		}

	}

	void run() {
		try {
			long startingTime = System.currentTimeMillis();
			Locale.setDefault(Locale.US);
			in = new BufferedReader(new FileReader("src/D.in"));
			out = new PrintWriter(new FileWriter("src/D.out"));
			int tc = nextInt();
			ArrayList<Solver> solvers = new ArrayList<Solver>();
			for (int t = 0; t < tc; t++) {
				solvers.add(new Solver());
			}

			for (Solver s : solvers) {
				s.start();
			}

			boolean running = true;
			while (running) {
				running = false;
				for (Solver s : solvers)
					running |= s.isAlive();
				// wait(1000);
			}

			for (int t = 0; t < tc; t++)
				out.println("Case #" + (t + 1) + ": " + solvers.get(t).answer);
			out.close();
			long totalTime = System.currentTimeMillis() - startingTime;
			System.err.println("All done in " + totalTime);
			System.err.println("Total: " + totalTime / 60000 + "m "
					+ (totalTime % 60000) / 1000 + "s");
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public static void main(String[] args) {
		new D().run();

	}

}

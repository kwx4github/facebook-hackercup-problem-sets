#include <iostream>
#include <cstdint>
#include <vector>
#include <algorithm>
using namespace std;

#pragma comment(linker, "/STACK:36777216")

static void submit() {
#define debugFolder "C:\\Users\\v-qiguan\\Downloads\\"
    freopen(debugFolder "corporate_gifting.txt", "r", stdin);
    freopen(debugFolder "output.txt", "w", stdout);
}

//int64_t f[100];
//
//static void init() {
//    f[1] = 1;
//    for (int i = 2; i < 30; ++i) {
//        int64_t v = 1;
//        for (int j = 1; j < i; ++j) {
//            v += f[j];
//        }
//        f[i] = v;
//        cout << i << " " << f[i] << endl;
//    }
//}

const int maxn = 200000 + 5;
int64_t inf = (int64_t)maxn * maxn;
vector<int> ge[maxn];
int fa[maxn];
int64_t dp[maxn][35];
int64_t dpleft[maxn][35];
int64_t dpright[maxn][35];
vector<int> order;

void dfs(int u) {
    for (int v : ge[u]) {
        dfs(v);
    }
    order.push_back(u);
}

void mainGift() {
    submit();
    int re; cin >> re;
    for (int ri = 1; ri <= re; ++ri) {
        int n; cin >> n;
        for (int i = 1; i <= n; ++i) {
            ge[i].clear();
        }
        for (int i = 1; i <= n; ++i) {
            scanf("%d", &fa[i]);
            ge[fa[i]].push_back(i);
        }
        order.clear();
        dfs(1);
        for (int u : order) {            
            int64_t *dpu = dp[u];
            for (int i = 1; i <= 30; ++i) {
                dpu[i] = i;
            }
            for (int v : ge[u]) {
                int64_t *dpvleft = dpleft[v];
                int64_t *dpvright = dpright[v];
                for (int i = 1; i <= 30; ++i) {
                    dpu[i] += min(dpvleft[i - 1], dpvright[i + 1]);
                }
            }
            int64_t *dpuleft = dpleft[u];
            int64_t *dpuright = dpright[u];
            dpuleft[0] = inf;
            for (int i = 1; i <= 30; ++i) {
                dpuleft[i] = min(dpuleft[i - 1], dpu[i]);
            }
            dpuright[31] = inf;
            for (int i = 30; i >= 1; --i) {
                dpuright[i] = min(dpuright[i + 1], dpu[i]);
            }
        }
        printf("Case #%d: ", ri);
        cout << dpleft[1][30] << endl;
    }
}

int main() {
    mainGift();
}
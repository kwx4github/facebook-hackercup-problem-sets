#include <string>
#include <vector>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <sstream>
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <queue>

using namespace std;

ifstream fi("");
ofstream fo("d.out");

int ntest;
int n;
vector<int> li[200010];

int primary[200010];
int color[200010];
int secondary[200010];
int temp[200010];

void dfs(int);

int main() {
  cin >> ntest;
  for (int t = 1; t <= ntest; t++) {
    cout << t << endl;
    cin >> n;
    for (int i = 1; i <= n; i ++) {
      li[i].clear();
      color[i] = secondary[i] = primary[i] = 0;
    }

    for (int i = 1; i <= n; i ++) {
      int father;
      fscanf(stdin, "%d", &father);
      if (father != 0) {
	li[father].push_back(i);
      }
    }

    dfs(1);

    fo << "Case #" << t << ": " << primary[1] << endl;
  }
  fi.close();
  fo.close();
  return 0;
}

void dfs(int i) {
  if (li[i].size() == 0) {
    primary[i] = 1;
    color[i] = 1;
    secondary[i] = 2;
    return;    
  }

  for (int k = 0; k < li[i].size(); k ++) {
    int j = li[i][k];
    dfs(j);
  }

  int sum = 0;
  for (int c = 1; c <= li[i].size() + 1; c ++) {
    temp[c] = 0;
  }
  for (int k = 0; k < li[i].size(); k ++) {
    int j = li[i][k];
    temp[ color[j] ] += secondary[j] - primary[j];
    sum += primary[ j ];
  }

  primary[i] = 1e9;
  color[i] = n + 1;
  secondary[i] = 1e9;

  for (int c = 1; c <= li[i].size() + 1; c ++) {
    if (primary[i] > sum + temp[c] + c) {
      primary[i] = sum + temp[c] + c;
      color[i] = c;
    }
  }

  for (int c = 1; c <= li[i].size() + 1; c ++) {
    if (c != color[i]) {
      secondary[i] = min(secondary[i], sum + temp[c] + c);
    }
  }

}

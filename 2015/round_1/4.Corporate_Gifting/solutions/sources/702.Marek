#include<iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <cmath>
#include <list>
#include <sstream>
#include <algorithm>

using namespace std;

typedef pair<int,int> PII;
typedef long long LL;
typedef vector<int> VI;
typedef pair<LL,LL> PLL;
typedef vector<pair<int,int> > VPII;
typedef vector<LL> VLL;
typedef vector<vector<int> > VVI;
typedef vector<string> VS;
typedef long double LD;

#define PI 3.14159265358979323
#define EE 2.71828182845
#define EPS 10e-10
#define INF 10000000

inline LL MAX(LL a, LL b){ return a < b ? b : a;}
inline LL MIN(LL a, LL b){ return a < b ? a : b;}

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)

#define MP make_pair
#define PB push_back

typedef struct{ int first_sum, first_value, second_sum; } result;
int N;
VVI G;
result res[200500];
 
result dfs(int v) {
//  cout << "visiting " << v << endl;
  int mx = 1;
  FOR(i, G[v].size()) {
    res[G[v][i]] = dfs(G[v][i]);
    mx = max(mx, res[G[v][i]].first_value + 1);
  }
  result vratim;
  vratim.first_sum = vratim.second_sum = 1000000000;

  FOR(j, mx + 2) if (j) {
    int suma = 0;
    FOR(i, G[v].size()) {
      if (res[G[v][i]].first_value == j) suma += res[G[v][i]].second_sum;
      else suma += res[G[v][i]].first_sum;
    }
    suma += j;
    if (suma < vratim.first_sum) {
      vratim.second_sum = vratim.first_sum;
      vratim.first_sum = suma;
      vratim.first_value = j;
    } else if (vratim.second_sum > suma) {
      vratim.second_sum = suma;
    }
  }

//  cout << "koncim vo " << v << ", vraciam " << vratim.first_sum << ", " << vratim.first_value << ", " << vratim.second_sum << ", mx bolo " << mx << endl;

  return vratim;
}

void solve(int tc) {
  scanf("%d ", &N);
  G.resize(0);
  G.shrink_to_fit();
  G.resize(N, VI(0));
  FOR(i, N) {
    int x;
    scanf("%d ", &x);
    if (!x) continue;
    x--;
    G[x].PB(i);
//    G[i].PB(x);
  }
  result res = dfs(0);
  cout << "Case #" << tc << ": " << res.first_sum << endl;
}

int main() {
  int TT;
  scanf("%d ", &TT);
  FOR(tt, TT) solve(tt + 1);
}

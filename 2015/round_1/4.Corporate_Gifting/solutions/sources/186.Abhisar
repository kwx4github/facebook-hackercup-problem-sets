// Author : Abhisar Singhal
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>
#include <cassert>
#include <fstream>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int, int> II;
typedef vector<long long> VLL;
typedef vector<bool> VB;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
#define EPS 1e-12

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};

const int N = 220009;
int p[N];
VI G[N];
LL c1[N];
LL c2[N];
LL cost[N], del[N];
int k1[N];
int k2[N];
int preorder[N], sz;

void dfs() {
	stack<int> s;
	s.push(1);
	int sz = 1;
	while(SZ(s)) {
		int x = s.top(); s.pop();
		preorder[sz++] = x;
		REP (i, SZ(G[x])) {
			s.push(G[x][i]);
		}
	}
}

void solve(int x) {
	if (k1[x] != -1) return;
	if (SZ(G[x]) == 0) {
		c1[x] = 1, k1[x] = 0, c2[x] = 2, k2[x] = 1;
		return;
	}
	REP (i, SZ(G[x])) solve(G[x][i]);
	int d = SZ(G[x]) + 1;
	REP (i, d) {
		cost[i] = i + 1;
		del[i] = 0;
	}
	LL cs = 0;
	REP (i, d - 1) {
		cs += c1[G[x][i]];
		del[k1[G[x][i]]] += c2[G[x][i]] - c1[G[x][i]];
	}
	REP (i, d) cost[i] += cs + del[i];
	
	vector <II> v;
	REP (i, d) v.PB(II(cost[i], i));
	sort(ALL(v));
	c1[x] = v[0].X;
	c2[x] = v[1].X;
	k1[x] = v[0].Y;
	k2[x] = v[1].Y;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	int t, cs = 0;
	cin >> t;
	while (t--) {
		cs ++;
		MSV(k1, -1);
		int n;
		cin >> n;
		FOR (i, 1, n + 1) {
			cin >> p[i];
			G[i].clear();
		}
		FOR (i, 2, n + 1) {
			G[p[i]].PB(i);
		}
		dfs();
		for (int i = n; i >= 1; i -= 1000) solve(preorder[i]);
		solve(1);
		cout << "Case #" << cs << ": " << c1[1] << endl;
	}
	return 0;
}


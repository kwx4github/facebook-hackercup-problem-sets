import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;


public class Corporate {
	public static void main (String [] args) throws IOException {
		FileReader in = new FileReader ("corporate_gifting.txt");
		BufferedReader read = new BufferedReader(in);
		FileWriter fout = new FileWriter ("Dout.txt");
		BufferedWriter bout = new BufferedWriter (fout);
		PrintWriter pout = new PrintWriter (bout);
		int t = Integer.parseInt(read.readLine());
		//O(t)
		for (int i = 0; i < t; i++) {
			int n = Integer.parseInt(read.readLine());
			ArrayList <Tode> tr = new ArrayList<Tode> ();
			Tode root = new Tode ();
			root.root = true;
			root.children = new ArrayList<Tode>();
			root.cost = 0;
			root.parent=null;
			root.index = 0;
			root.cons = 0;
			tr.add(root);
			String s =read.readLine();
			StringTokenizer st = new StringTokenizer (s);
			int buff = Integer.parseInt(st.nextToken());
			//O(n)
			for (int j = 1; j < n; j++) {
				int x = Integer.parseInt(st.nextToken());
				x--;
				Tode child = new Tode ();
				child.root = false;
				child.children = new ArrayList<Tode>();
				try {
					child.parent = tr.get(x);
					child.parent.children.add(child);
					child.parent.cons++;
				}
				catch (Exception e) {}
				child.cost = 0;
				child.cons = 1;
				
				child.index = j+1;
				tr.add(child);
			}
			//O(nlgn)
			Collections.sort(tr);
			int a1 = 0;
			int a2 = 0;
			//O(1)
			for (int k = 0; k < 2; k++) {
				//O(n)
				for (Tode b : tr) {
					b.cost = 0;
				}
				//O(n)
				if (k == 1) {
					Collections.reverse(tr);
				}
				int co = 1;
				int answer1 = 0;
				//O(n)
				for (Tode a : tr) {
					if (a.root) continue;
					co = 1;
					while (a.exists(co)) co++;
					a.cost = co;
					answer1 += co;
				}
				Tode a = root;
				co = 1;
				while (a.exists(co)) co++;
				a.cost = co;
				answer1 +=co;
				for (Tode b : tr) {
					b.cost = 0;
				}
				int answer2 = 0;
				for (Tode b : tr) {
					co = 1;
					while (b.exists(co)) co++;
					b.cost = co;
					answer2 += co;
				}
				if (k == 0) {
					a1 = Math.min(answer2, answer1);
				}
				else {
					a2 = Math.min(answer2, answer1);
				}
			}
			pout.println ("Case #"+(i+1)+": "+Math.min(a1, a2));
		}
		pout.close();
		bout.close();
		fout.close();
	}
}


class Tode implements Comparable {
	boolean root;
	ArrayList<Tode>children;
	int cost;
	Tode parent;
	int index;
	int cons;
	@Override
	public int compareTo(Object o) {
		return ((Tode)o).cons-this.cons;
	}
	public boolean exists(int co) {
		if (parent != null && parent.cost == co) return true;
		for (Tode t : children) {
			if (t.cost == co) return true;
		}
		return false;
	}
}
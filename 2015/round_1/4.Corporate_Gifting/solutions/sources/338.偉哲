#include <stdio.h>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>

using namespace std;

vector<int> child[200005];
int dp[200005][35];
vector<int> arr;
int cchild[200005];
int parent[200005];

void pre(const int &N)
{
	arr.clear();
	queue<int> q;

	for (int i = 1; i <= N; i++ ){
		cchild[i] = int(child[i].size());
		if (cchild[i] == 0)
			q.push(i);
	}

	while(!q.empty()){
		int v = q.front();
		q.pop();
		arr.push_back(v);
		cchild[parent[v]]--;
		if(cchild[parent[v]] == 0)
			q.push(parent[v]);
	}
}

int main()
{
	int T;
	int N;
	int n;
	int leader;

	scanf(" %d",&T);
	for (int cas = 1; cas <= T; cas ++ ){
		scanf(" %d",&N);
		n = 30;

		for (int i = 0; i <= N; i++ )
			child[i].clear();
		for (int i = 1; i <= N; i++ ){
			scanf(" %d",&leader);
			child[leader].push_back(i);
			parent[i] = leader;
		}
		pre(N);

		for (int x = 0; x < N; x++ ){
			int i = arr[x];
			for (int j = 1; j <= n; j++ ){
				int cnt = 0;
				for (int y = 0; y < int(child[i].size()); y++ ){
					int ci = child[i][y];
					int mini = -1;
					for( int cj = 1; cj <= n; cj++ ){
						if( j == cj )
							continue;
						if (mini == -1 || mini > dp[ci][cj])
							mini = dp[ci][cj];
					}

					if( mini > 0 )
						cnt += mini;
				}
				dp[i][j] = cnt + j;
			}
		}

		int res = -1;
		for (int i = 1; i <= n; i++ ){
			if ( res == -1 || res > dp[1][i] )
				res = dp[1][i];
		}
		printf("Case #%d: %d\n",cas, res);
	}

	return 0;
}
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 200005
#define MAXT 101
int N;
VI adj[MAXN];
int dp[MAXT][MAXN], mdp[MAXT][MAXN];
int mint[MAXT];
void dfs(int x){
	int sz = adj[x].size();
	REP(i, 0, sz){
		int y = adj[x][i];
		dfs(y);
	}
	FILL(mint, 0);
	REP(t, 1, MAXT){
		REP(i, 0, sz){
			int y = adj[x][i];
			mint[t] += mdp[t][y];
		}
		dp[t][x] = mint[t] + t;
	}
	REP(t, 1, MAXT){
		mdp[t][x] = INF;
		REP(i, 1, MAXT){
			if (i == t) continue;
			mdp[t][x] = min(mdp[t][x], dp[i][x]);
		}
	}
}
int main(){
	int cs;
	cin >> cs;
	REP(csn, 1, cs + 1){
		printf("Case #%d: ", csn);
		cin >> N;
		REP(i, 0, N + 1) adj[i].clear();
		REP(i, 1, N + 1){
			int p;
			scanf("%d", &p);
			adj[p].push_back(i);
		}
		dfs(1);
		int ans = INF;
		REP(t, 1, MAXT) ans = min(ans, dp[t][1]);
		cout << ans << endl;
	}
	return 0;
}
#include <stdio.h>
#include <list>
#include <algorithm>
#include <limits.h>
#include <memory.h>
using namespace std;

struct Node {
	list<int> children;
};

Node tree[200010];
long long dp[200010][30];

long long traverse(int idx, int money) {
	long long result = money;

	long long temp = 0;
	
	if(dp[idx][money] != -1) return dp[idx][money];
	
	for(list<int>::iterator it = tree[idx].children.begin();
		it != tree[idx].children.end();it++) {
		long long tempResult = LONG_MAX;
		for(int i = 1; i < 30;i++) {
			if(i != money)	{
				(dp[*it][i] = traverse(*it,i));
				tempResult = min(tempResult,dp[*it][i]);
			}
		}
		result += tempResult;
	}	
	
	
	return result;
}

int main() {
	int T;
	scanf("%d",&T);
	
	for(int t = 0; t < T;t++) {
		int N;
		scanf("%d",&N);
		
		for(int i = 1; i <= N;i++) {
			int manager = 0;
			scanf("%d",&manager);
						
			tree[manager].children.push_back(i);
		}
		memset(dp,-1,sizeof(dp));
		long long result = traverse(0,0);
		
		printf("Case #%d: %lld\n",t+1,result);
		for(int i = 0; i < N;i++) {
			tree[i].children.clear();
		}
	}

}

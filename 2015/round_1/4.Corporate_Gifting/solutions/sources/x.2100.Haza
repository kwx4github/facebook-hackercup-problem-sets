//#define __test__aTest__
#ifndef __test__aTest__

#include <vector>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <assert.h>
#include <stdexcept>
#include <string>


using namespace std;

#define ll long long
#define ull size_t

int N;

vector<vector<int> > child;

map<int, pair<int, ll> > mp;

void dp(int id) {
    if (mp.find(id) != mp.end()) {
        return;
    }
    set<int> s;
    ll sum = 0;
    for (int i = 0; i < child[id].size(); ++i) {
        int c = child[id][i];
        dp(c);
        s.insert(mp[c].first);
        sum += mp[c].second;
    }
    int chosen = 0;
    for (int i = 1; i <= N; i++) {
        if (s.find(i) == s.end()) {
            chosen = i;
            sum += chosen;
            break;
        }
    }
    mp[id] = make_pair(chosen, sum);
}

void process(int index) {
    printf("Case #%d: ", index);
    //scanf("%d", &N);
    cin >> N;
    child = vector<vector<int> >(N);
    mp.clear();
    for (int i = 0; i < N; i++) {
        int parent;
        cin >> parent;
        if (parent != 0) {
            --parent;
            child[parent].push_back(i);
        }
    }
    dp(0);
    cout<< mp[0].second <<endl;
    //printf("%.9f\n", 0.0);
    fflush(stdout);
}

int main() {
    
    
    freopen("/Users/zishirs/Documents/workspace/test/test/test.txt", "r", stdin);
    freopen("/Users/zishirs/Documents/workspace/test/test/output.txt", "w", stdout);
    
    int T;
    scanf("%d", &T);
    for (int index = 1; index <= T; ++index) {
        process(index);
    }
    
    
    /*
    int n;
    vector<int> v;
    while (cin >> n) {
        v.push_back(n);
    }
    vector<int> v1(v.begin(), v.begin() + v.size()/2), v2(v.begin() + v.size()/2, v.end());
    */
    
    //srand((unsigned int)time(NULL));

    return 0;
}

#endif
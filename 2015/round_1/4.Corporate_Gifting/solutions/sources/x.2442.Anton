import java.util.*;
import java.io.*;

class Node {
    public List<Node> child;
    public int id;
    public Node(int id) {
        this.id = id;
        this.child = new ArrayList<Node>();
    }
}
class Pair {
    int a;
    int b;
    
    public Pair(int a, int b) {
        this.a = a;
        this.b = b;
    }
}
public class D {
    static Scanner scan = new Scanner(System.in);
    static BufferedReader brscan = new BufferedReader(new InputStreamReader(System.in));
    static ArrayList<Node> tree = new ArrayList<Node>();    
    static int T, N;
    
    public static Pair recdp(Node now) {

        if (now.child.size() == 0) {
            return new Pair(1, 1);
        } else {
            HashSet<Integer> hset = new HashSet<Integer>();
            int ans = 0;
            Pair curr;
            for (Node child : now.child) {
                curr = recdp(child);
                hset.add(curr.b);
                ans += curr.a;
            }
            Pair pans = new Pair(ans, 0);
            for (int ii=1; ii<=N; ii++) {
                if (!hset.contains(ii)) {
                    pans.b = ii;
                    break;
                }
            }
            pans.a += pans.b;
            return pans;
        }
    }

    public static void main(String[] args) throws IOException {
        T = Integer.parseInt(brscan.readLine());
        for (int tt=0; tt<T; tt++) {
            tree.clear();

            N = Integer.parseInt(brscan.readLine());
            String[] temp = brscan.readLine().split(" ");
            int[] arr = new int[N];
            for (int ii=0; ii<N; ii++) {
                tree.add(new Node(ii));
            }
            
            for (int ii=0; ii<N; ii++) {
                arr[ii] = Integer.parseInt(temp[ii])-1;
                if (arr[ii] != -1) {
                    tree.get(arr[ii]).child.add(tree.get(ii));
                }
            }
            Pair ans = recdp(tree.get(0));
            System.out.printf("Case #%d: %d\n", tt+1, ans.a);
        }
    }
}

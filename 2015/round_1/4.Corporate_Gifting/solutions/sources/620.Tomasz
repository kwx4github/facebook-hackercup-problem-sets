#include <bits/stdc++.h>

#define ALL(v) v.begin(), v.end()
#define REP(i, a, b) for(int i = a; i < b; i++)
#define REPD(i, a, b) for(int i = a; i > b; i--)
#define REPLL(i, a, b) for(ll i = a; i < b; i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FORLL(i, a, b) for(ll i = a; i <= b; i++)
#define INF 1000000001

using namespace std;

typedef long long ll;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<ld, ld> pld;
typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;
typedef map<int, int>::iterator mit;
typedef vector<int> vi;
typedef vector<pii > vpii;

#define pb push_back
#define mp make_pair
#define st first
#define nd second

#define EPS 1e-9
#define PI acos(-1.0)
#define MAXN 200007
#define MAXC 13

int z, n, t;
vi nbs[MAXN];
int in[MAXN];
int par[MAXN];
int dp[MAXN][MAXC+3];

inline void dfs(int v) {
    pii b[2] = {mp(INF,0), mp(INF,0)};
    FOR(j, 1, MAXC) {
        int sum = j;
        REP(i, 0, nbs[v].size()) {
            int nb = nbs[v][i];
            sum += dp[nb][j];
        }
        if(b[1].st > sum) b[1] = mp(sum, j);
        if(b[0].st > b[1].st) swap(b[0], b[1]);
    }
    FOR(i, 1, MAXC) {
        if(b[0].nd == i) dp[v][i] = b[1].st;
        else dp[v][i] = b[0].st;
    }
}

int q[MAXN];
int qs;

int main()
{
    ios_base::sync_with_stdio(0);
	cin >> z;
	FOR(tc, 1, z) {
        cin >> n;
        qs = 0;
        REP(i, 0, n) nbs[i].clear();
        REP(i, 0, n) {
            cin >> t; --t;
            if(i) {
                nbs[t].pb(i);
                in[t]++;
                par[i] = t;
            }
        }

        REP(i, 0, n) if(in[i] == 0) q[qs++] = i;
        REP(i, 0, n) {
            int c = q[i];
            dfs(c);
            if(!c) break;
            if(--in[par[c]] == 0) q[qs++] = par[c];
        }
        int res = INF;
        FOR(i, 1, MAXC) res = min(res, dp[0][i]);
        cout << "Case #" << tc << ": " << res << endl;
	}

    return 0;
}

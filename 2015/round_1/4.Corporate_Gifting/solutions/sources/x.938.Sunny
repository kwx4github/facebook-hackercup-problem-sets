//	Facebook Hacker Cup 2015
//	Round 1
//	Problem D
//	Corporate Gifting (40 points / 100)

const bool debug=false;

#include <iostream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdlib>
#include <cstdarg>
#include <utility>
#include <cassert>
#include <ctime>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <queue>
#include <stack>

#define TIMES(n) for (int i=0; i<(n); ++i)
#define FOR(i,s,t) for (int (i)=(s); (i)<=(t); ++(i))
#define RESET(a) memset((a), 0, sizeof((a)))
#define P(x, ...) printf((x), ##__VA_ARGS__)
#define D(x, ...) if (debug) printf((x), ##__VA_ARGS__)
#define MP(x, y) make_pair((x), (y))

const int INF = 0x7F7F7F7F; // or (unsigned)(-1)>>1
int caseI = 0, caseD = -1;

using namespace std;

//void P(char *f, ...) {va_list v; va_start(v, f); vprintf(f, v); va_end(v);}
//void D(char *f, ...) {if (!debug) return; va_list v; va_start(v, f); vprintf(f, v); va_end(v);}


/*

Sample Input:



Sample Output:


*/

const int maxN = 200005, maxM = 1005;

typedef pair<int, int> ii;
typedef vector<vector<ii> > graph;

typedef struct Node {
	int current, parent;
	int currentSpend, parentSpend;

	Node copy() {
		Node n2;
		n2.current = current;
		n2.parent = parent;
		n2.currentSpend = currentSpend;
		n2.parentSpend = parentSpend;
		return n2;
	}
};

class Qs {
	int n, m, k;
	vector<int> e[maxN];

public:
	Qs() {
		// RESET(e_n);
	}

	bool input() {

		if (scanf("%d", &n) != 1)
			return false;
		
		TIMES(n) {
			int p;
			scanf("%d", &p);
			if (--p >= 0) {
				e[p].push_back(i);
			}
		}



		return true;
	}

	int minSum[maxN];
	int subsum[maxN];
	map<ii, int> minSpend;

	int loopCount;

	int minSpendSum(int root) {
		stack<Node> s;
		RESET(subsum);
		memset(minSum, INF, sizeof minSum);

		Node rootNode;
		rootNode.current = root;
		rootNode.parent = -1;
		rootNode.currentSpend = 1;
		rootNode.parentSpend = -1;
		s.push(rootNode);

		while (!s.empty()) {
			Node p = s.top();  // (root, (parent, parentSpend))
			s.pop();

			++loopCount;

			ii me = MP(p.current, p.parentSpend);

			if (subsum[p.current] > 0) {
				if (subsum[p.current] < minSum[p.current]) {
					minSum[p.current] = subsum[p.current];
				} else {
					minSpend[me] = minSum[p.current];
					if (p.parent >= 0)
						subsum[p.parent] += minSum[p.current];
					continue;
				}
			} else {
				if (minSpend.count(me)) {
					if (p.parent >= 0)
						subsum[p.parent] += minSum[p.current];
					continue;
				}
			}

			if (p.currentSpend <= n) {
				Node n2 = p.copy();
				do {
					n2.currentSpend++;
				} while (n2.currentSpend == p.parentSpend);
				s.push(n2);

				assert (p.currentSpend != p.parentSpend);
				{
					subsum[p.current] = p.currentSpend;
					for (int i = e[p.current].size() - 1; i >= 0; --i) {
						Node child;
						child.current = e[p.current][i];
						child.parent = p.current;
						child.currentSpend = 1;
						child.parentSpend = p.currentSpend;
						if (child.currentSpend == child.parentSpend)
							++child.currentSpend;
						if (minSpend.count(MP(child.current, child.parentSpend))) {
							subsum[p.current] += minSpend[MP(child.current, child.parentSpend)];
						} else {
							minSum[child.current] = INF;
							subsum[child.current] = 0;
							s.push(child);
						}
					}
				}
			}
		}
		return minSum[root];
	}

	void solve() {

		P("Case #%d: %d\n", caseI, minSpendSum(0));

		D(">> loop %d\n", loopCount);

	}
};

void pre_process() {
	//freopen("A.in", "r", stdin);
	//freopen("A.out", "w", stdout);
	scanf("%d%*c", &caseD);
}

int main() {
	Qs *p = new Qs;
	pre_process();
	while ((++caseI|1) && caseD-- && p->input()) {
		p->solve();
		delete p;
		p = new Qs;
	}
	delete p;
	return 0;
}

//
//  main.cpp
//  hack_cup_5
//
//  Created by hijackyan on 1/17/15.
//  Copyright (c) 2015 haker cup. All rights reserved.
//

#include <iostream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;
const int MAX = 100000000;
int main(int argc, const char * argv[]) {
    int n, ca = 1;
    cin>>n;
    while(n--)
    {
        int m;
        cin>>m;
        int color = min(m, 8);
        vector<int> father(m+1);
        vector<int> degree(m+1, 0);
        vector<vector<int>> tree(m+1, vector<int>());
        vector<vector<int>> dp(m+1, vector<int>(color, 0));
        vector<vector<int>> dp_not(m+1, vector<int>(color, 0));
        for(int i = 1; i <= m; i++)
        {
            cin>>father[i];
            degree[father[i]]++;
            tree[father[i]].push_back(i);
        }
        queue<int> q;
        for(int i = 1; i <= m; i++)
        {
            if(degree[i] == 0)
                q.push(i);
        }
        while(!q.empty())
        {
            int cur = q.front();
            q.pop();
            if(cur == 0) break;
            for(int i = 1; i <= color; i++)
            {
                dp[cur][i] = i;
                for(int j = 0; j < tree[cur].size(); j++)
                {
                    int tmp = MAX;
                    for(int k = 1; k <= color; k++)
                    {
                        if(k == i) continue;
                        if(dp[tree[cur][j]][k] < tmp)
                            tmp = dp[tree[cur][j]][k];
                    }
                    dp[cur][i] += tmp;
                }
            }
            
            if(--degree[father[cur]] == 0)
                q.push(father[cur]);
        }
        int result = MAX;
        for(int i = 1; i <= color; i++)
            if(result > dp[1][i])
                result = dp[1][i];
        cout<<"Case #"<<ca++<<": ";
        cout<<result<<endl;
    }
}


#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdint>
#include <iostream>
#include <set>
using namespace std;
struct Node{
	vector<int> child;
	int father;
	int value;
	Node(){
		father = -1;
		value = 0;
	}

};

vector<Node> tree;//neighbors


int main()
{
	 
	string input_filename = "corporate_gifting.txt";
	string output_filename = "corporate_gifting_output.txt";
	FILE* file_in = fopen(input_filename.c_str(), "r");
	FILE* file_out = fopen(output_filename.c_str(), "w");
	int n_case;
	fscanf(file_in, "%d", &n_case);
	
	for (int i_case = 0; i_case < n_case; ++i_case) {
		printf("i_case %d\n" , i_case);
		int n;
		fscanf(file_in, "%d", &n);
		tree.clear();
		tree.resize(n);
		for (int i = 0; i < n; ++i) {
			int father;
			fscanf(file_in, "%d", &father);
			father--;
			if (father == -1) {
				tree[i].father = father;
			}else{
				tree[i].father = father;
				tree[father].child.push_back(i);
			}
		}

		int solved_cnt = 0;
		vector<char> affected(n);
		fill(affected.begin(), affected.end(), 0);
		for (int i = 0; i < n; ++i) {
			if (tree[i].child.empty()) {
				tree[i].value = 1;
				if (tree[i].father >= 0) {
					affected[tree[i].father] = 1;
				}
				solved_cnt++;
			}
		}

		//printf("affected ");
		//for (int i = 0; i < n; ++i) {
		//	if (affected[i] == 1) {
		//		printf("%d\n" , i);
		//	}
		//}

		while (solved_cnt < n) {
			vector<char> affected_new(n,0);
			for (int i = 0; i < n; ++i) {
				if (affected[i] == 0) continue;
				Node& node = tree[i];
				bool undetermined = false;
				set<int> used_values;
				for (int j = 0; j < node.child.size(); ++j) {
					if (tree[node.child[j]].value == 0) {
						undetermined = true;
						break;
					}else{
						used_values.insert(tree[node.child[j]].value);
					}
				}
				//printf("i %d used_values \n" , i);
				//for (auto& v:used_values) {
				//	printf("%d " , v);
				//}
				//printf("\n");
				if (undetermined) continue;
				int current_value = 0;
				for (int j = 1; j <= n; ++j) {
					if (used_values.find(j) == used_values.end()) {
						current_value = j;
						break;
					}
				}
				node.value = current_value;
				if (node.father >= 0) {
					affected_new[node.father] = 1;
				}
				solved_cnt++;
			}
			affected.assign(affected_new.begin(), affected_new.end());
		}
		int total = 0;
		for (int i = 0; i < n; ++i) {
			total += tree[i].value;
			//printf("value %d\n" , tree[i].value);
		}
		//printf("total %d\n" , total);
		fprintf(file_out,"Case #%d: %d\n" , i_case + 1, total);
	}

	fclose(file_out);
	fclose(file_in);
	system("pause");
}
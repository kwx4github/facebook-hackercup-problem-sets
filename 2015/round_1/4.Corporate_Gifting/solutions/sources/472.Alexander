
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>
#include <cassert>
#include <unordered_set>
#include <unordered_map>
#include <fstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)

const int MAXN = 200100;
int best1[MAXN];
int best2[MAXN];
int bestV[MAXN];

int par[MAXN];
vi adj[MAXN];
int indeg[MAXN];
int main() {
	int T;
	cin >> T;
	FOR(t,1,T+1){
		int N;
		cin >> N;
		++N;
		FOR(i,1,N)cin >> par[i];
		par[0] = 0;
		memset(indeg,0,sizeof(indeg));
		FOR(i,0,N)adj[i].clear();
		FOR(i,0,N){
			indeg[par[i]]++;
			adj[par[i]].pb(i);
		}
		FOR(i,0,N)best1[i] = -1;
		queue<int> q;
		FOR(i,0,N)if(indeg[i] == 0)q.push(i);
		while(!q.empty()){
			int n = q.front();
			q.pop();
			assert(best1[n] == -1);
			unordered_set<int> todo;
			for(int to: adj[n])todo.insert(bestV[to]);
			int aimsize = sz(todo) + 2;
			FOR(i,1,oo){
				todo.insert(i);
				if(sz(todo) == aimsize)break;
			}
			best1[n] = oo;
			best2[n] = oo;
			for(int icost: todo){
				int ccost = icost;
				for(int to: adj[n]){
					ccost += ((bestV[to] == icost)?best2[to]:best1[to]);
					assert(ccost < oo);
				}
				if(ccost < best1[n]){
					best2[n] = best1[n];
					best1[n] = ccost;
					bestV[n] = icost;
				} else if(ccost < best2[n]){
					best2[n] = ccost;
				}
			}
			assert(best2[n] < oo);
			assert(best1[n] < oo);
			if(0 == --indeg[par[n]])q.push(par[n]);
		}
		assert(best1[0] == -1);
		FOR(i,1,N)assert(best1[i] != -1);
		cout <<"Case #" << t << ": " << best1[1] << endl;
	}
	return 0;
}

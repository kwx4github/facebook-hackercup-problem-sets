import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.util.ArrayList;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author ilyakor
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		TaskD solver = new TaskD();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskD {
    static final int BUBEN = 25;
    public static final int inf = 1000 * 1000 * 1000;

    ArrayList<Integer>[] g;

    int[][] d, dm, dM;

    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int n = in.nextInt();
        g = new ArrayList[n];
        for (int i = 0; i < n; ++i)
            g[i] = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            int x = in.nextInt() - 1;
            if (x == -1) continue;
            g[x].add(i);
        }
        d = new int[n][BUBEN];
        dm = new int[n][BUBEN];
        dM = new int[n][BUBEN];
        dfs(0);
        int res = inf;
        for (int i = 1; i < BUBEN; ++i)
            res = Math.min(res, d[0][i]);
        out.printLine("Case #" + testNumber + ": " + res);
    }

    private void dfs(int x) {
        for (int y : g[x])
            dfs(y);
        for (int i = 1; i < BUBEN; ++i) {
            int cur = i;
            for (int y : g[x]) {
//                int val = inf;
//                for (int j = 1; j < BUBEN; ++j)
//                    if (j != i)
//                        val = Math.min(val, d[y][j]);
//                cur += val;
                cur += Math.min(dm[y][i], dM[y][i]);
            }
            d[x][i] = cur;
        }

        dm[x][1] = inf;
        for (int i = 2; i < BUBEN; ++i) {
            dm[x][i] = Math.min(dm[x][i - 1], d[x][i - 1]);
        }

        dM[x][BUBEN - 1] = inf;
        for (int i = BUBEN - 2; i >= 1; --i) {
            dM[x][i] = Math.min(dM[x][i + 1], d[x][i + 1]);
        }
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buffer = new byte[10000];
    private int cur;
    private int count;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public static boolean isSpace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public int read() {
        if (count == -1) {
            throw new InputMismatchException();
        }
        try {
            if (cur >= count) {
                cur = 0;
                count = stream.read(buffer);
                if (count <= 0)
                    return -1;
            }
        } catch (IOException e) {
            throw new InputMismatchException();
        }
        return buffer[cur++];
    }

    public int readSkipSpace() {
        int c;
        do {
            c = read();
        } while (isSpace(c));
        return c;
    }

    public String nextToken() {
        int c = readSkipSpace();
        StringBuilder sb = new StringBuilder();
        while (!isSpace(c)) {
            sb.append((char) c);
            c = read();
        }
        return sb.toString();
    }

    public String next() {
        return nextToken();
    }

    public int nextInt() {
        int sgn = 1;
        int c = readSkipSpace();
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9') {
                throw new InputMismatchException();
            }
            res = res * 10 + c - '0';
            c = read();
        } while (!isSpace(c));
        res *= sgn;
        return res;
    }

}

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }

    public void print(Object... objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0) {
                writer.print(' ');
            }
            writer.print(objects[i]);
        }
    }

    public void printLine(Object... objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

}


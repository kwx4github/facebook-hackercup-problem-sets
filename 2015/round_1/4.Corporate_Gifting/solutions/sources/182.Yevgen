#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>
#include <iomanip>
#include <fstream>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii;
typedef vector<int> vint;
typedef vector<LL> vLL;

const int nmax = 200009;

int n;
vint g[nmax];
LL cur[nmax];
int val[nmax];
LL best1[nmax], best2[nmax];

void dfs(int v) {	
	for (int to : g[v]) {
		dfs(to);
	}

	FOR(i, 1, SZ(g[v]) + 2) cur[i] = 0;
	LL ans = 0;
	for (int to : g[v]) {
		ans += best1[to];
		cur[val[to]] += best2[to] - best1[to];
	}

	best1[v] = LLINF;
	best2[v] = LLINF;

	FOR(i, 1, SZ(g[v]) + 2) {
		LL pans = ans + i + cur[i];
		if (pans <= best1[v]) {
			best2[v] = best1[v];
			best1[v] = pans;
			val[v] = i;
		}
		else {
			if (pans < best2[v]) best2[v] = pans;
		}
	}
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif

	int T;
	cin >> T;
	REP(test, T) {
		REP(i, nmax) g[i].clear();
		
		cin >> n;
		int to;
		cin >> to;
		FOR(i, 2, n) {
			cin >> to;
			g[to].push_back(i);
		}

		dfs(1);

		cout << "Case #" << test + 1 << ": " << best1[1] << endl;
	}

	return 0;
}

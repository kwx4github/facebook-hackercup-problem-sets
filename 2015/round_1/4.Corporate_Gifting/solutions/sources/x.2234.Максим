#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <vector>
#include <algorithm>
#include <set>
#include <cstdio>
#include <cstdint>
#include <cstring>
#include <iostream>
#include <string>
#include <map>
#include <cassert>
#include <cstdlib> 
using namespace std;

typedef long long ll;

const int MN = 200005;
int p[MN];
vector<int> c[MN];
int bc[MN];
ll b1[MN];
ll b2[MN];

void precalc()
{
	
}

void clear()
{
	for (int i = 0; i < MN; ++i)
	{
		c[i].clear();
	}
}

void calc(int v)
{
	for (int i = 0; i < c[v].size(); ++i)
	{
		calc(c[v][i]);
	}
	ll base = 0;
	set<int> used;
	map<int, ll> cost;
	for (int i = 0; i < c[v].size(); ++i)
	{
		int ch = c[v][i];
		base += b1[ch];
		used.insert(bc[ch]);
		cost[bc[ch]] += b2[ch] - b1[ch];
	}
	int fr = 1;
	for (int a : used)
	{
		if (a == fr)
			++fr;
	}
	cost[fr] = 0;
	vector<pair<ll, int>> res;
	for (auto a : cost)
	{
		res.push_back({ a.second + base + a.first, a.first });
	}
	sort(res.begin(), res.end());
	bc[v] = res[0].second;
	b1[v] = res[0].first;
	if (res.size() == 1)
	{
		b2[v] = 2;
	}
	else
	{
		b2[v] = res[1].first;
	}
}

void solve()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i)
	{
		cin >> p[i + 1];
		c[p[i + 1]].push_back(i + 1);
	}
	calc(1);
	cout << b1[1];
}

int main(const int argc, const char** argv) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	precalc();
	int t;
	cin >> t;
	for (int i = 0; i < t; ++i)
	{
		cout << "Case #" << i + 1 << ": ";
		solve();
		cout << endl;
		clear();
	}
	return 0;
}
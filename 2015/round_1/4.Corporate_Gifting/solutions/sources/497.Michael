import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("gifts.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("gifts.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Gifts solver = new Gifts();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Gifts {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int n = in.nextInt();
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = in.nextInt() - 1;
        }
        long answer = solveTheProblem(n, parent);
        out.println("Case #" + testNumber + ": " + answer);
    }

    private long solveTheProblem(int n, int[] parent) {
        int[] deg = new int[n];
        for (int i = 1; i < n; i++) {
            deg[parent[i]]++;
        }
        int[][] edges = new int[n][];
        for (int i = 0; i < n; i++) {
            edges[i] = new int[deg[i]];
        }
        for (int i = n - 1; i > 0; --i) {
            edges[parent[i]][--deg[parent[i]]] = i;
        }
        long[][] dp = new long[n][2];
        int[] bestValue = new int[n];
        dfs(edges, dp, bestValue, 0);
        return dp[0][0] + n;
    }

    static void dfs(int[][] edges, long[][] dp, int[] bestValue, int u) {
        for (int v : edges[u]) {
            dfs(edges, dp, bestValue, v);
        }
        List<Integer> listForBest[] = new List[edges[u].length + 3];
        for (int i = 0; i < listForBest.length; i++) {
            listForBest[i] = new ArrayList<>();
        }

        for (int v : edges[u]) {
            if (bestValue[v] < listForBest.length) {
                listForBest[bestValue[v]].add(v);
            }
        }

        int baseCost = 0;
        for (int v : edges[u]) {
            baseCost += dp[v][0];
        }

        long min1 = Long.MAX_VALUE;
        int what = -1;
        long min2 = Long.MAX_VALUE;

        for (int use = 0; use < listForBest.length; use++) {
            long cost = use + baseCost;
            for (int v : listForBest[use]) {
                cost += dp[v][1] - dp[v][0];
            }
            if (min1 > cost) {
                min2 = min1;
                min1 = cost;
                what = use;
            } else {
                if (min2 > cost) {
                    min2 = cost;
                }
            }
        }
        dp[u][0] = min1;
        dp[u][1] = min2;
        bestValue[u] = what;
    }

}

class InputReader {
    BufferedReader br;
    StringTokenizer st;

    public InputReader(InputStream stream) {
        br = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        return nextToken();
    }

    public String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (line == null) {
                return null;
            }
            st = new StringTokenizer(line);
        }
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextToken());
    }

}


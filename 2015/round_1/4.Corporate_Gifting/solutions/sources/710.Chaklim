#include <iostream>
#include <cstring>
#include <string>
#include <cmath>
#include <cstdio>
#include <vector>
#include <deque>
#include <stack>
#include <sys/resource.h>

using namespace std;

const int l = 200010;
const int l2 = 30;
int T, N, L;
int p[l], dp[l][l2];
vector<int> c[l];

int dfs(int n, int V) {
	if (dp[n][V]) {
		return dp[n][V];
	}

	int cnt = V;
	for (int i = 0; i < c[n].size(); i++) {
		int t = c[n][i];
		int cnt2 = L * N + 10;
		for (int k = 1; k <= L; k++)
			if (k != V) {
				cnt2 = min(cnt2, dfs(t, k));
			}
		cnt += cnt2;
	}
	return (dp[n][V] = cnt);
}

int main() {

	const rlim_t kStackSize = 60 * 1024 * 1024;
	struct rlimit rl;
	int result = getrlimit(RLIMIT_STACK, &rl);
	if (result == 0) {
		if (rl.rlim_cur < kStackSize) {
			rl.rlim_cur = kStackSize;
			result = setrlimit(RLIMIT_STACK, &rl);
		}
	}

	cin >> T;
	for (int C = 1; C <= T; C++) {
		printf("Case #%d: ", C);
		cin >> N;

		memset(dp, 0, sizeof dp);
		for (int i = 1; i <= N; i++) {
			c[i].clear();
		}

		for (int i = 1; i <= N; i++) {
			cin >> p[i];
			c[p[i]].push_back(i);
		}
		L = (int)(log(N+0.0) / log(2.0)) + 1;
		int ll = 0;
		for (int i = 1; i <= N; i++) {
			ll = max(ll, (int)c[i].size() + 1);
			if (c[i].size() == 0) {
				for (int k = 1; k <= L; k++)
					dp[i][k] = k;
			}
		}
		L = max(min(L, ll), 2);

		int minimum = L * N + 10;
		for (int i = 1; i <= L; i++) {
			minimum = min(minimum, dfs(1, i));
		}
		printf("%d\n", minimum);
	}

	return 0;
}
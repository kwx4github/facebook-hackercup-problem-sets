#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int main(){
	int tc, n;
	scanf("%d", &tc);
	for(int T = 1; T <= tc; ++T){
		int n, p;
		scanf("%d", &n);
		vector<vector<int> > adj(n);
		for(int i = 0; i < n; ++i){
			scanf("%d", &p);
			if(!i) continue;
			adj[p - 1].push_back(i);
		}
		vector<int> order;
		queue<int> q;
		q.push(0);
		while(!q.empty()){
			p = q.front(); q.pop();
			order.push_back(p);
			for(int i = 0; i < adj[p].size(); ++i)
				q.push(adj[p][i]);
		}

		reverse(order.begin(), order.end());

		vector<pair<long long, long long> > a(n), b(n);
		for(int k = 0; k < order.size(); ++k){
			int i = order[k];
			if(adj[i].size() == 0){
				a[i] = make_pair(1, 1);
				b[i] = make_pair(2, 2);
				continue;
			}
			a[i] = make_pair(0, 1ll<<60);
			b[i] = make_pair(0, 1ll<<60);
			for(int t = 1; t <= n; ++t){
				long long temp = t;
				for(int j = 0; j < adj[i].size(); ++j)
					temp += (a[adj[i][j]].first == t ? b[adj[i][j]].second : a[adj[i][j]].second);

				if (temp <= a[i].second)
					b[i] = a[i], a[i] = make_pair(t, temp);
				else if (temp < b[i].second)
					b[i] = make_pair(t, temp);
				else break;
				
			}
		}

		/*for(int i=0;i<order.size();++i)
			cout<<order[i]<<endl;

		for(int i=0;i<n;++i){
			cout<<i<<" "<<a[i].first<<" "<<a[i].second<<" "<<b[i].first<<" "<<b[i].second<<endl;
		}*/

		cout << "Case #" << T << ": " << a[0].second << endl;
	}
	return 0;
}

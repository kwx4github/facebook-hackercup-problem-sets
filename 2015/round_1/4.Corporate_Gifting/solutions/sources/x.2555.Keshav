#include <iostream>
#include <vector>
#include <set>
using namespace std;
typedef vector<int> vi;
typedef vector<vi> vvi;
int n;
struct node{
	int val;
	int level;
	vector<int> child;
	node(int v = 1, int l = 0, vector<int> c = vector<int>()) : val(v), level(l), child(c) {}
};

void print(int i, node T[200005]){
	cout<<i<<" level = "<<T[i].level<<endl;
	vi v = T[i].child;
	if(v.size() == 0) return;
	cout<<"The children of "<<i<<" are ";
	for(int p : v) cout<<p<<" ";
	cout<<endl;
	for(int p : v) print(p, T);
}

int fun(int i, node T[200005]){
	node &p = T[i];
	if(p.child.empty()){
		p.val = 1;
		cout<<"leaf at "<<i<<endl;
		return 1;
	}
	int r = 0;
	set<int> S;
	for(int j : p.child){
		r += fun(j, T);
		node &q = T[j];
		S.insert(q.val);
		// r += q.val;
	}
	for(int j = 1; j <= n; j++){
		if(S.count(j) == 0){
			p.val = j;
			cout<<"returning "<<p.val<<" + "<<r<<" from "<<i<<endl;
			return r+p.val;
		}
	}
	return r;
}

int fun1(int l, node T[200005], vvi level){
	vi list = level[l];
	int r = 0;
	for(int i : list){
		node &p = T[i];
		if(p.child.empty()){
			// cout<<"leaf at "<<i<<endl;
			p.val = 1;
			r++;
			continue;
		}
		set<int> S;
		for(int j : p.child){
			node &q = T[j];
			S.insert(q.val);
		}
		for(int j = 1; j <= n; j++){
			if(S.count(j) == 0){
				p.val = j;
				break;
			}
		}
		r += p.val;
	}
	return r;
}

int main(){
	int t, p, k = 0;
	cin>>t;
	while(t--){
		k++;
		cin>>n;
		node T[200005];
		vvi level(n+1);
		int maxLevel = 0;
		level[0].push_back(1);

		for(int i = 1; i <= n; i++){
			cin>>p;
			if(i == 1) continue;
			T[p].child.push_back(i);
			int l = T[p].level+1;
			T[i] = node(0, l);
			maxLevel = max(maxLevel, l);
			level[l].push_back(i);
		}
		// cout<<"maxLevel = "<<maxLevel<<endl;
		// T = G;
		// print(1, T);
		// int ret = fun(1, T);
		int total = 0;
		while(maxLevel >= 0){
			// int ret = fun1(maxLevel, T, level);
			int ret = 0;
			{
				vi list = level[maxLevel];
				int r = 0;
				for(int i : list){
					node &p = T[i];
					if(p.child.empty()){
						// cout<<"leaf at "<<i<<endl;
						p.val = 1;
						r++;
						continue;
					}
					set<int> S;
					for(int j : p.child){
						node &q = T[j];
						S.insert(q.val);
					}
					for(int j = 1; j <= n; j++){
						if(S.count(j) == 0){
							p.val = j;
							break;
						}
					}
					r += p.val;
				}
				ret = r;
			}
			total += ret;
			// cout<<"sum at level "<<maxLevel<<" = "<<ret<<" total = "<<total<<endl;
			maxLevel--;
		}
		// cout<<"total = "<<total<<endl;
		cout<<"Case #"<<k<<": "<<total<<endl;
	}
}
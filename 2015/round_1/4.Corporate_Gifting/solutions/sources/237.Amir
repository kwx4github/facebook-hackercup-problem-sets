#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
int main()
{

	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	
	
	vector<int> p(10000001,0);
	vector<int> K[10];
	for (int i = 0; i < 10; i++) K[i] = vector<int>(10000001,0);
	p[1] = 0;
	for (long long i = 2; i < 10000001; i++)
	{
		if (p[i] == 0)
		{
			for (long long j = i; j < 10000001; j+= i)
			{
				p[j]++;
			}
		}
	}
	for (int i = 0; i < p.size(); i++)
	{
		K[p[i]][i]++;
	}
	for (int i = 0; i < 10; i++)
	{
		for (int j = 1; j < K[i].size(); j++)
		{
			K[i][j] += K[i][j-1];
		}
	}
	int T;
	cin>>T;
	for (int z=1; z <= T; z++)
	{
		int A,B,k;
		cin>>A>>B>>k;
		if (k < 10) cout<<"Case #"<<z<<": "<<(K[k][B]-K[k][A-1])<<endl;
		else cout<<"Case #"<<z<<": "<<0<<endl;
	}
}


class Node
{
public:
	Node *child[26];
	Node()
	{
		for (int i = 0; i < 26; i++) child[i] = NULL;
	}
};

class Trie
{
public:
	Node *root;
	Trie()
	{
		root = new Node;
	}
	int insert(string &s)
	{
		int cnt = 1;
		bool lessa = true;
		Node *cur = root;
		for (int i = 0; i < s.size(); i++)
		{
			int in = s[i]-'a';
			if (cur->child[in] == NULL)
			{
				cur->child[in] = new Node;
				cur = cur->child[in];
				lessa = false;
			}
			else
			{
				cur = cur->child[in];
			}
			if (lessa) cnt++;
		}
		return min(cnt, (int)s.size());
	}
};

int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	for (int z=1; z <= T; z++)
	{
		int n;
		int res = 0;
		cin>>n;
		Trie tr;
		for (int i = 0; i < n; i++)
		{
			string s;
			cin>>s;
			res += tr.insert(s);
		}
		cout<<"Case #"<<z<<": "<<res<<endl;
	}
}


int dp[2001][2001];
int dp2[2001][2001];
int N, M;
int free(int i, int j)
{
	if (i > N || j > M) return 0;
	if (j > i || (i+j > 0 && i == j)) return 0;
	if (i == N && j== M)
	{
		return 1;
	}
	if (dp[i][j] != -1) return dp[i][j];
	return dp[i][j] = (free(i+1, j)+free(i, j+1)) % 1000000007;
}

int full(int i, int j)
{
	if (i > N || j > M) return 0;
	if (i > j && j < M) return 0;
	if (i == N && j== M)
	{
		return 1;
	}
	if (dp2[i][j] != -1) return dp2[i][j];
	return dp2[i][j] = (full(i+1, j)+full(i, j+1)) % 1000000007;
}

int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	for (int z=1; z <= T; z++)
	{
		cin>>N;
		char ch;
		cin>>ch;
		cin>>M;
		for (int i = 0; i <= N; i++) for (int j = 0; j <= M; j++) dp[i][j] = dp2[i][j] = -1;
		cout<<"Case #"<<z<<": "<<free(0,0)<<" "<<full(0,0)<<endl;
	}
}
*/

int dp[200001][4];
vector<vector<int> > tr;
void sol(int i)
{
	vector<int> secondBest(tr[i].size() + 3);
	int sm = 0;
	for (int j = 0; j < tr[i].size(); j++)
	{
		int in = tr[i][j];
		//sol(tr[i][j]);
		sm += dp[in][1];
		if (dp[in][0] < secondBest.size())
		{
			secondBest[dp[in][0]] += (dp[in][3]-dp[in][1]);
		}
	}
	int mnIn = -1;
	int mn = 200000000;
	for (int j = 1; j< secondBest.size(); j++)
	{
		int tot = j+sm + secondBest[j];
		if (tot < mn)
		{
			mnIn = j;
			mn = tot;
		}
	}
	int mnIn2 = -1;
	int mn2 = 200000000;
	for (int j = 1; j< secondBest.size(); j++)
	{
		if (j == mnIn) continue;
		int tot = j+sm + secondBest[j];
		if (tot < mn2)
		{
			mnIn2 = j;
			mn2 = tot;
		}
	}
	dp[i][0] = mnIn;
	dp[i][1] = mn;
	dp[i][2] = mnIn2;
	dp[i][3] = mn2;
}

int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	
	for (int z = 1; z <= T; z++)
	{
		int N;
		cin>>N;
		tr = vector<vector<int> > (N);
		
		for (int i = 0; i < N; i++)
		{
			int x;
			cin>>x;
			x--;
			if (x >= 0)
			{
				tr[x].push_back(i);
			}
		}
		
		vector<vector<int> > levels;
		queue<pair<int, int> > q;
		q.push(make_pair(0,0));
		while (!q.empty())
		{
			pair<int, int> c = q.front();
			q.pop();
			if (c.second >= levels.size()) levels.push_back(vector<int> ());
			levels[c.second].push_back(c.first);
			for (int i = 0; i < tr[c.first].size(); i++) q.push(make_pair(tr[c.first][i],c.second+1));
		}
		for (int i = levels.size()-1; i>= 0; i--)
		{
			for (int j = 0; j < levels[i].size(); j++)
				sol(levels[i][j]);
		}
		cout<<"Case #"<<z<<": "<<dp[0][1]<<endl;
	}
}
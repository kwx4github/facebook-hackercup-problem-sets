#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 200000;
const int MAXV = 500;
const int INF = 500000000;

vector<int> edge[MAXN + 1];

int rcd[MAXN + 1][MAXV];

int dp(int t, int pv, int limit) {
    if (rcd[t][pv] != -1) return rcd[t][pv];

    int myMin = INF;
    for (int i = 1; i <= limit; i++) {
        if (i == pv) continue;

        int sum = i;
        for (auto &tt : edge[t]) {
            sum += dp(tt, i, limit);
        }
        myMin = min(myMin, sum);
    }
    return rcd[t][pv] = myMin; 
}

int main() {
    int T, n, d;
    scanf("%d", &T);

    for (int times = 0; times < T; times++) {
        scanf("%d", &n);
        for (int i = 1; i <= n; i++) {
            edge[i] = vector<int>();
        }

        for (int i = 1; i <= n; i++) {
            scanf("%d", &d);
            edge[d].push_back(i);
        }

        int prev = -1;
        for (int i = 2; i < MAXV; i++) {
            for (int j = 1; j <= MAXN; j++) {
                for (int k = 0; k < MAXV; k++) {
                    rcd[j][k] = -1;         
                }
            }

            int ret = dp(1, 0, i);
            if (prev == ret) break;
            else prev = ret;
        }
        printf("Case #%d: %d\n", times + 1, prev);
    }
}

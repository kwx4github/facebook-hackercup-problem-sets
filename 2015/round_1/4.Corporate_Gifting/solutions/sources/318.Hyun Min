#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

const int N = 200005;
const int C = 64;

typedef long long int64;

const int64 INF = 100000000000ll;

int n, par[N], q[N], head, tail;
int64 dp[N+5][C+5], smallestBefore[N+5][C+5], smallestAfter[N+5][C+5];
vector<int> children[N];

int main(void) {
	int test_cases;
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("corporate_gifting_out.txt", "w", stdout);
	scanf("%d", &test_cases);
	for (int kase = 1; kase <= test_cases; kase++) {
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
			children[i].clear();
		for (int i = 1; i <= n; i++) {
			scanf("%d", &par[i-1]);
			par[i-1]--;
		}
		for (int i = 0; i < n; i++) {
			int p = par[i];
			children[p].push_back(i);
		}
		
		for (int i = 0; i < n; i++)
			for (int j = 1; j < C; j++) {
				dp[i][j] = smallestBefore[i][j] = smallestAfter[i][j] = 0;
			}

		head = tail = 0;
		q[tail++] = 0;
		while (head < tail) {
			int u = q[head++];
			for (int ed = 0; ed < (int)children[u].size(); ed++) {
				int v = children[u][ed];
				q[tail++] = v;
			}
		}
		for (int i = n-1; i >= 0; i--) {
			int u = q[i];
			for (int j = 1; j < C; j++) {
				dp[u][j] = j;
				for (int ed = 0; ed < (int)children[u].size(); ed++) {
					int v = children[u][ed];
					int64 smallest = INF;
					if (j > 1) smallest = min(smallest, smallestBefore[v][j-1]);
					if (j < C-1) smallest = min(smallest, smallestAfter[v][j+1]);
					dp[u][j] += smallest;
				}
			}

			smallestBefore[u][1] = dp[u][1];
			for (int j = 2; j < C; j++) {
				smallestBefore[u][j] = min(smallestBefore[u][j-1], dp[u][j]);
			}
			smallestAfter[u][C-1] = dp[u][C-1];
			for (int j = C-2; j >= 1; j--) {
				smallestAfter[u][j] = min(smallestAfter[u][j+1], dp[u][j]);
			}
		}
		int64 ans = smallestBefore[0][C-1];
		printf("Case #%d: %I64d\n", kase, ans);
	}
	return 0;
}
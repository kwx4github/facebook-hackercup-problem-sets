#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 300003
#define MAXK 51
#define INF 1000000000

int n;
int d[MAXK][MAXN];
int p[MAXN];
int a[MAXK];
vector <int> g[MAXN];
int ttest;

inline void dfs(int v)
{
	for (int j = 0; j < MAXK; ++j)
		d[j][v] = j + 1;
	for (int i = 0; i < sz(g[v]); ++i)
	{
		int v2 = g[v][i];
		if (v2 == p[v]) continue;
		dfs(v2);
		for (int j = 0; j < MAXK; ++j)
			a[j] = INF;
		for (int j = 0, cur = INF; j < MAXK; ++j)
		{
			a[j] = min(a[j], cur);
			cur = min(cur, d[j][v2]);
		}
		for (int j = MAXK - 1, cur = INF; j >= 0; --j)
		{
			a[j] = min(a[j], cur);
			cur = min(cur, d[j][v2]);
		}
		for (int j = 0; j < MAXK; ++j)
			d[j][v] += a[j];
	}
}

inline void solve()
{
	++ttest;
	for (int i = 0; i < n; ++i)
		g[i].clear();

	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &p[i]);
		--p[i];
		if (p[i] >= 0)
			g[p[i]].pb(i);
	}
	dfs(0);
	int ans = INF;
	for (int j = 0; j < MAXK; ++j)
		ans = min(ans, d[j][0]);
	printf("%d\n", ans);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

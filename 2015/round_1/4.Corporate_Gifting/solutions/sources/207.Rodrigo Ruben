#include <stdio.h>
#define MAX_EMP 200000
#define COLOR 18
struct edge{
	int next;
	int node;
};
edge edges[MAX_EMP+1];
int nedges;
int start[MAX_EMP+1];
int N;
int memo[MAX_EMP+1][COLOR+1];
void clean(){
	//clean graph
	nedges=0;
	for(int i=1;i<=N;i++){
		start[i] = 0;
	}
	//clean memo
	for(int i=1;i<=N;i++){
		for(int j=1;j<=COLOR;j++){
			memo[i][j] = -1;
		}
	}
}
int dp(int node,int pColor){
	if(memo[node][pColor] != -1) return memo[node][pColor];
	int res = pColor;
	int pos = start[node];
	while(pos != 0){
		int child = edges[pos].node;
		int best = -1;
		for(int c=1;c<=COLOR;c++){
			if(c!=pColor){
				int aux = dp(child,c);
				if(best == -1 || aux < best){
					best = aux;
				}
			}
		}
		res += best;
		pos = edges[pos].next;
	}
	memo[node][pColor] = res;
	return memo[node][pColor];
}
void join(int a,int b){
	nedges++;
	edges[nedges].node = b;
	edges[nedges].next = start[a];
	start[a] = nedges;
}
void test_case(){
	scanf("%d", &N);
	clean();
	for(int i=1;i<=N;i++){
		int node;
		scanf("%d", &node);
		join(node,i);
	}
	int res = dp(1,1);
	for(int c=2;c<=COLOR;c++){
		int aux = dp(1,c);
		if(aux < res) res = aux;
	}
	printf("%d\n", res );
}
int main(){
	int t;
	scanf("%d", &t);
	for(int i=0;i<t;i++){
		printf("Case #%d: ", i+1);
		test_case();
	}
	return 0;
}

#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<string>
#include<cstdio>
#include<vector>
#include<cassert>
#include<cstring>
#include<cstdlib>
#include<utility>
#include<iostream>
#include<algorithm>
#include<functional>
#define REP(x,y,z) for(int x=y;x<=z;x++)
#define FORD(x,y,z) for(int x=y;x>=z;x--)
#define MSET(x,y) memset(x,y,sizeof(x))
#define FOR(x,y) for(__typeof(y.begin()) x=y.begin();x!=y.end();x++)
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define SZ size()
#define M 200005
using namespace std;
typedef long long LL;
typedef pair<int,int> P;
int t,n,dp[M][1001];
vector<int> e[M];

P dfs(int cur)
{
	int sum=0;
	P re;
	vector<int> tmp(1001);
	
	FOR(i,e[cur])
	{
		re = dfs(*i);
		tmp[re.F] += re.S;
		sum += dp[*i][re.F];
	}

	int mn=-1, mn2=-1;
	REP(i,1,1000)
	{
		dp[cur][i] = i + sum + tmp[i];
		if(mn==-1 || dp[cur][i]<dp[cur][mn])
		{
			mn2 = mn;
			mn = i;
		}
		else if(mn2==-1 || dp[cur][i]<dp[cur][mn2])
			mn2 = i;
	}
	return MP(mn, dp[cur][mn2]-dp[cur][mn]);
}

int main()
{
	int x;
	P ans;
	scanf("%d",&t);
	REP(tt,1,t)
	{
		fprintf(stderr, "tt=%d\n", tt);
		scanf("%d",&n);
		REP(i,1,n)e[i].clear();
		REP(i,1,n)
		{
			scanf("%d",&x);
			if(x) e[x].PB(i);
		}

		ans = dfs(1);
		printf("Case #%d: %d\n",tt,dp[1][ans.F]);
	}
	return 0;
}


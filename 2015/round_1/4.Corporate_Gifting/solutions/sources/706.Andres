#include <iostream>
#include <vector>
using namespace std;
const int nmax = 200010,inf=2e9;
int parent[nmax],wait[nmax];
int best[nmax][20],bestl[nmax][20],bestr[nmax][20];
vector<int> children[nmax];
void calc(int cur){
	for(int j = 1; j < 20; ++j){
		for(int i = 0; i < children[cur].size(); ++i){
			int ch = children[cur][i];
			int add=inf;
			if(j-1>=1)
				add=min(add,bestl[ch][j-1]);
			if(j+1<20)
				add=min(add,bestr[ch][j+1]);
			best[cur][j]+=add;
		}
		best[cur][j]+=j;
	}
	for(int i = 1; i < 20; ++i)
		bestl[cur][i]=bestr[cur][i]=best[cur][i];
	for(int i = 2; i < 20; ++i)
		bestl[cur][i]=min(bestl[cur][i],bestl[cur][i-1]);
	for(int i = 18; i >= 1; --i)
		bestr[cur][i]=min(bestr[cur][i],bestr[cur][i+1]);

	/*
	cout << cur << '\n';
	for(int i = 1; i < 20; ++i)
		cout << bestl[cur][i] << " \n"[i==19];
	for(int i = 1; i < 20; ++i)
		cout << bestr[cur][i] << " \n"[i==19];
		*/
}
int main(){
	int T; cin >> T;
	for(int i = 1; i <= T; ++i){
		// clean up
		for(int j = 0; j < nmax; ++j){
			parent[j]=wait[j]=0;
			for(int k = 0; k < 20; ++k)
				best[j][k]=bestl[j][k]=bestr[j][k]=0;
			children[j].clear();
		}
		// --------
		int n; cin >> n;
		for(int j = 1; j <= n; ++j){
			cin >> parent[j];
			wait[parent[j]]++;
		}
		vector<int> topo;
		for(int j = 1; j <= n; ++j)
			if(wait[j]==0)
				topo.push_back(j);
		for(int j = 0; j < topo.size(); ++j){
			int cur = topo[j];
			if(cur==0){
				cout << "Case #" << i << ": ";
				cout << bestr[1][1] << '\n';
				break;
			}
			calc(cur);
			children[parent[cur]].push_back(cur);
			if(--wait[parent[cur]]==0)
				topo.push_back(parent[cur]);
		}
	}
}

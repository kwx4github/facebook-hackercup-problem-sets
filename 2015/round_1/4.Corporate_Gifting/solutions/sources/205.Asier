#include <iostream>
#include <cstdio>
#include <cmath>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <cstdlib>
#include <sys/resource.h>


#define ll long long
#define MOD 1000000007
#define INF 1000000000

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef pair<int, int> pii;
typedef pair<pii, pii> pI;
//((root1, cost1)(root2, cost2))


void increase_stack(long Mb) {

    const rlim_t kStackSize = Mb * 1024L * 1024L;  
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
}

vvi v;

pI F(int node) {
	if (v[node].size() == 0) {
		return pI(pii(1, 1), pii(2, 2));
	}
	int base = 0;
	vi r(v[node].size() + 2);
	for (int i = 0; i < v[node].size(); ++i) {
		pI t = F(v[node][i]);
		base += t.first.second;
		r[t.first.first] += t.second.second - t.first.second;
	}
	
	pI ans(pii(INF, INF), pii(INF, INF));
	for (int i = 1; i < r.size(); ++i) {
		if (r[i] + i + base < ans.first.second) {
			ans.second = ans.first;
			ans.first = pii(i, r[i] + i + base);
		} else if (r[i] + i + base < ans.second.second){
			ans.second = pii(i, r[i] + i + base);
		}
	}	
	return ans;
}

int main(int argc, char** argv) {
	
	increase_stack(100);
	int T;
	cin >> T;
	for (int cases = 1; cases <= T; ++cases) {
		int n;
		cin >> n;

		v = vvi(n);
		for (int i = 0; i < n; ++i) {
			int p;
			cin >> p;
			p--;
			if (p != -1) {
				v[p].push_back(i);
			}
		}
		cout << "Case #" << cases << ": " <<  F(0).first.second << endl;
	}
}

/*	

	*/

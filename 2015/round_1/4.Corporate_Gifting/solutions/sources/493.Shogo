#include<bits/stdc++.h>
using namespace std;

const int MAXN = 200100;
const int MAXM = 100;
int M = 50;
vector<int> child[MAXN];
int dp[MAXN][MAXM];

void solve(int caseNum) {
  for(int i=0; i<MAXN; i++)
    child[i].clear();

  int N;
  cin >> N;
  
  vector<int> input;
  int root = 0;
  for(int i=0; i<N; i++) {
    int p;
    cin >> p;
    input.push_back(p-1);
    if(p==0) root = i;
    else child[p-1].push_back(i);
  }
  vector<int> order;
  queue<int> qu;
  qu.push(root);
  
  while(!qu.empty()) {
    int cur = qu.front(); qu.pop();
    order.push_back(cur);
    for(int i=0; i<child[cur].size(); i++) {
      qu.push(child[cur][i]);
    }
  }
  reverse(order.begin(), order.end());
  
  if(order.size()!=N) {

    cout << "ERROR1" << endl;
  }
  
  for(int i=0; i<MAXN; i++)
    for(int j=0; j<MAXM; j++)
      dp[i][j] = j;
  
  int INF = 100000000;
  int ans = INF ;
  for(int i=0; i<N; i++) {
    int cur = order[i];
    int cand = -1; int minimA = INF; int minimB = INF; 
    
    if(i==N-1) {
      for(int j=1; j<M; j++)
        ans = min(ans, dp[root][j]);
      break;
    }
    int parent = input[cur];
    for(int j=1; j<M; j++) {
      if(dp[cur][j] < minimA)
        minimA = dp[cur][j], cand = j;
    }
    for(int j=1; j<M; j++) {
      if(j!=cand) {
        dp[parent][j] += minimA;
        if(dp[cur][j] < minimB) 
          minimB = dp[cur][j];
        
      }
    }
    dp[parent][cand] += minimB;
  }
  
  
  cout << "Case #" << caseNum << ": " <<ans << endl;
  
}


int main() {
  int T;
  cin >> T;
  for(int i=0; i<T; i++)
    solve(i+1);
  return 0;
}



import java.util.*;
import java.io.*;

public class D {
    static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st = new StringTokenizer("");
    public static void main(String[] args) throws Exception {
        int T = readInt();
        for (int t = 1; t <= T; t++) {
            final int N = readInt();
            int[] parents = new int[N];
            Node[] nodes = new Node[N];
            HashSet<Integer> leaves = new HashSet<Integer>();
            for (int i = 0; i < N; i++) {
                nodes[i] = new Node();
                leaves.add(i);
            }
            readInt();

            for (int i = 1; i < N; i++) {
                int pid = readInt() - 1;
                leaves.remove(pid);
                Node parent = nodes[pid];
                parent.children.add(nodes[i]);
                nodes[i].parent = parent;
            }
            
            ArrayList<Node> current = new ArrayList<Node>();

            for (int i : leaves) {
                Node n = nodes[i];
                Node p = n.parent;
                p.children_computed++;
                if (p.children_computed == p.children.size()) {
                    current.add(p); // it's not "current" really, but oh well
                }
            }

            while (!current.isEmpty()) {
                ArrayList<Node> next_up = new ArrayList<Node>();
                for (Node n : current) {
                    n.compute();
                    Node p = n.parent;
                    if (n.parent != null) {
                        p.children_computed++;
                        if (p.children_computed == p.children.size()) {
                            next_up.add(p);
                        }
                    }
                }
                current = next_up;
            }
            System.out.printf("Case #%d: %d\n", t, nodes[0].minCost());
        }
    }

    static class Node {
        int one = 1, two = 2, three = 3;
        int children_computed = 0;
        ArrayList<Node> children;
        Node parent = null;
        Node() {
            children = new ArrayList<Node>();
        }
        // Hypothesis: An optimal solution will never contain a node with a gift
        // valued $4 or more.
        void compute() {
            for (Node c : children) {
                one += Math.min(c.two, c.three);
                two += Math.min(c.one, c.three);
                three += Math.min(c.two, c.one);
            }
        }
        int minCost() {
            return Math.min(one, Math.min(two, three));
        }
    }
    static String readString() throws Exception {
        while (!st.hasMoreTokens()) {
            st = new StringTokenizer(stdin.readLine());
        }
        return st.nextToken();
    }
    static int readInt() throws Exception {
        return Integer.parseInt(readString());
    }

}

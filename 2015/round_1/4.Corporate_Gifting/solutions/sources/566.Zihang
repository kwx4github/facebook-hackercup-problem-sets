#include <iostream>
#include <set>
#include <vector>
#include <list>
using namespace std;
const int MAX = 1234567899;
const int MAXN = 30;
struct node{
    int maxn = 1;
    vector<int> sons;
    int no[MAXN+1];
};
int maxnmax = 0;
vector<node> v;
vector<int> f;
void dfs(int p){
    //cerr<<"p="<<p<<endl;
    int maxx = 0;
    int sums[MAXN+1] = {0};
    if(v[p].sons.size() == 0){
        v[p].no[1] = 2;
        for(int i =2; i<= MAXN; i++) v[p].no[i] = 1;
        return;
    }
    for(int i = 0; i < v[p].sons.size(); i++){
        if(v[v[p].sons[i]].maxn > maxx) maxx = v[v[p].sons[i]].maxn;
    }
    for(int i = 1; i <= MAXN; i++){//maxx+1
        sums[i] = i;
        for(int j = 0; j < v[p].sons.size(); j++){
            int id = v[p].sons[j];
            sums[i] += v[id].no[i];
        }
    }
    for(int i = 1; i <= MAXN; i++){
        v[p].no[i] = MAX;
        for(int j = 1; j <= MAXN; j++){
            if(j !=  i && v[p].no[i] > sums[j]){
                v[p].no[i] = sums[j];
                if(j > maxnmax) maxnmax = j;
            }
        }
        //cerr<<"no["<<i<<"]="<<v[p].no[i]<<endl;
    }
    //cerr<<v[p].maxn<<endl;
    if(v[p].maxn > maxnmax) maxnmax = v[p].maxn;
    
}
void pre(){
    freopen("input.txt","w",stdout);
    int caseN = 10, totN = 200000;
    cout<<caseN<<endl;
    for(int t = 1; t <= caseN; t++){
        cout<<totN<<endl;
        cout<<0<<" ";
        for(int i = 2; i <= 100; i++){
            cout<< i - 1 <<" ";
        }
        for(int i = 101; i <= 1000; i++){
            cout<< 1 <<" ";
        }
        for(int i = 1001; i <= totN; i++){
            cout<<i-5<<" ";
        }
        cout<<endl;
    }
    fclose(stdout);
}
int main() {
    //pre();
    freopen("input.txt","r",stdin);
    freopen("d.txt","w",stdout);
    freopen("bug.txt", "w",stderr);
    int t, tt, n, i, x;
    scanf("%d", &t);
    for(tt = 1; tt <= t; tt++){
        scanf("%d", &n);
        v.clear();
        v.resize(n + 1);
        f.clear();
        for(i = 1; i <= n; i++){
            scanf("%d", &x);
            v[x].sons.push_back(i);
        }
        list<int> q;
        q.push_back(1);
        while(q.size()){
            int qq = q.front();
            for(i = 0; i < v[qq].sons.size(); i++){
                q.push_back(v[qq].sons[i]);
            }
            f.push_back(qq);
            q.pop_front();
        }
        for(i = n - 1; i >= 0; i--){
            dfs(f[i]);
        }
        int min = MAX;
        for(i = 1; i <= MAXN; i++){
            if(v[1].no[i] < min) min = v[1].no[i];
        }
        cout << "Case #" << tt<< ": " << min << endl;
        cerr<<maxnmax<<endl;
    }
    return 0;
}

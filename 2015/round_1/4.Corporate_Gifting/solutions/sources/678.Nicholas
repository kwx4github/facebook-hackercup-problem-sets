#pragma comment(linker, "/STACK:10000000")
#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
const double eps = 1e-10;
const int inf = 1000000009;
int i, j, k, m, n, l;
int ans;

const int Z = 100;
const int N = 200000;
vector<int> adj[N + 5];
int d[Z+1][N], b1[N], b2[N];

void dfs(int i, int par)
{
	F1(z, Z)
	{
		d[z][i] = z;
	}
	F0(jj, SZ(adj[i]))
	{
		int j = adj[i][jj]; if (j == par) continue;
		dfs(j, i);
		F1(z, Z)
		{
			int best = (z == b1[j]) ? d[b2[j]][j] : d[b1[j]][j];
			d[z][i] += best;
		}
	}
	int x = -1, y = -1;
	F1(z, Z)
	{
		if (x == -1 || d[x][i] > d[z][i]) { y = x; x = z; }
		else if (y == -1 || d[y][i] > d[z][i]) { y = z; }
	}
	b1[i] = x; b2[i] = y;
}

int main() {
	freopen("d.in", "r", stdin);
	freopen("d.txt", "w", stdout);
	int tn; cin >> tn; F1(tt, tn)
	{
		cin >> n;
		F1(i, n) adj[i].clear();
		F1(i, n)
		{
			cin >> j;
			if (i > 1) adj[j].push_back(i);
		}
		dfs(1, -1);
		ans = d[b1[1]][1];

		cout << "Case #" << tt << ": ";
		cout << ans << endl;
	}
	return 0;
}

#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
#include <map>
#include <set>
using namespace std;

typedef pair<int,int> pii;
typedef long long int lli;

struct Node{
    int id;
    int parent;
    int pos;
    Node(int id, int parent, int pos=0){
        this->id=id;
        this->parent = parent;
        this->pos = pos;
    }
};


int main(){
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("dout.txt", "w", stdout);
    //for(int i=0;i<200000;i++) cout << i << " "; exit(0);

    int T, n, b;
    cin >> T;
    for(int test=0;test<T;test++){
        cin >> n;
        vector<vector<int> > v(n);
        vector<set<int> > s(n);
        int cost=0;

        for(int i=0;i<n;i++){
            cin >> b;
            if(b==0) continue;
            v[b-1].push_back(i);
        }

        priority_queue<int, vector<int>, greater<int> > pq;
        for(int i=0;i<n;i++) pq.push(i+1);

        stack<Node*> st;
        st.push(new Node(0, 0));
        while(!st.empty()){
            //cout << st.top()->id << endl;
            Node* x = st.top();
            if( x->pos < v[x->id].size()){
                st.push(new Node(v[x->id][x->pos], x->id));
                x->pos++;
                continue;
            }

            x = st.top(); st.pop();
            while(s[x->id].find(pq.top())!=s[x->id].end()){
                pq.pop();
            }

            cost += pq.top();
            s[x->parent].insert(pq.top());

            for(set<int>::iterator it = s[x->id].begin() ; it!= s[x->id].end() ; it++){
                pq.push(*it);
            }
        }

        cout << "Case #"<< test+1 <<": " << cost << endl;
        //break;
    }

    return 0;
}

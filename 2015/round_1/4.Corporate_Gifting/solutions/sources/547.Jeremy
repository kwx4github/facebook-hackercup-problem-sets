import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.StringTokenizer;


public class Solution {

	public static final int MAX = 20;
	static long[][] memo;
	static ArrayList<LinkedList<Integer>> tree;
	
	public static void main(String[] args) throws IOException {
		Reader.init(System.in);
		
		
		int T = Reader.nextInt();
		//Random prng = new Random();
		for (int t = 0; t < T; t++) {
			int n = Reader.nextInt();
			
			tree = new ArrayList<LinkedList<Integer>>();
			tree.add(null);
			for (int i = 1; i <= n; i++) {
				tree.add(new LinkedList<Integer>());
			}

			for (int i = 1; i <= n; i++) {
				int parent = Reader.nextInt();
				if (parent > 0) {
					tree.get(parent).add(i);
				}
			}

			memo = new long[n+1][MAX];
			long val = calcMin(1,0);

			System.out.println("Case #" + (t+1) + ": " + val);
		}
	}
	
	static long calcMin(int root, int taboo) {
		
		if (memo[root][taboo] > 0) return memo[root][taboo];
		int retVal = Integer.MAX_VALUE;
		for (int i = 1; i < MAX; i++) {
			if (i != taboo) {
				int tmp = i;
				for (int c: tree.get(root)) {
					tmp += calcMin(c,i);
				}
				retVal = Math.min(tmp, retVal);
			}
		}
		memo[root][taboo] = retVal;
		return retVal;
	}
	
}

/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
#include <cstdio>

#include <vector>

using namespace std;

const int MAX_GIFT = 100;

struct Node {
  vector<int> next;
  vector<int> best;

  Node(): best(MAX_GIFT, -1) {}

  void addChild(int child) {
    next.push_back(child);
  }

  int childCount() const {
    return next.size();
  }
};

struct Graph {
  vector<Node> nodes;

  explicit Graph(int nodeCount): nodes(vector<Node>(nodeCount)) {}

  void addEdge(int from, int to) {
    nodes[from].addChild(to);
  }

  int findBest(int node, int parentGift = -1) {
    int res = INT_MAX;
    int bestValue = -1;
    for (int value = 1; value < MAX_GIFT; ++value) {
      if (value != parentGift) {
        int cur = calc(node, value);
        if (cur < res) {
          res = cur;
          bestValue = value;
        }
      }
    }
    if (bestValue > 2 && false) {
      printf("Best value for node %d: %d\n", node + 1, bestValue);
      printf("Parent gift: %d\n", parentGift);
    }
    if (parentGift == -1) {
      fprintf(stderr, "best value for root: %d\n", bestValue);
    }
    return res;
  }

  int calc(int nodeIndex, int value) {
    auto& node = nodes[nodeIndex];
    auto& ret = node.best[value];
    if (ret != -1) {
      return ret;
    }
    if (node.childCount() == 0) {
      return value;
    }
    int res = value;
    for (auto& childNode: node.next) {
      res += findBest(childNode, value);
    }
    return ret = res;
  }
};

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    int N;
    scanf("%d", &N);
    Graph g(N);
    for (int i = 0; i < N; ++i) {
      int parent;
      scanf("%d", &parent);
      if (parent != 0) {
        g.addEdge(parent - 1, i);
      }
    }
    printf("Case #%d: %d\n", t, g.findBest(0));
  }
}

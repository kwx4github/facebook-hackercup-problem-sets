#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<ll> vll;
typedef vector<string> vs;
typedef pair<int,int> pii;
#define range(i,a,b) for(auto i=(a);i<b;i++)
#define rep(i,n) range(i,0,n)
#define all(c) begin(c),end(c)
#define CLR(i,x) memset(i,x,sizeof(i))
#define clr0(i) CLR(i,0)
#define clr1(i) CLR(i,-1)
#define bit(x,i) ((x>>i)&1)
#define M(x) ((x)%MOD)
#define acc(f,x,y) x=f(x,y)
#define fst first
#define snd second
#define tup make_tuple

#define INF 1234567890
#define N 200005
#define P 22

vi g[N];
int cost[N][P];

int solve()
{
	int n, p;
	cin >> n;
	rep(i, n) g[i].clear();
	rep(i, n)
	{
		cin >> p;
		if(i) g[p - 1].push_back(i);
	}

	deque<int> q;
	q.push_back(0);
	rep(i, q.size())
	{
		int u = q[i];
		for(auto v : g[u]) q.push_back(v);
	}

	for(int i = n - 1; i >= 0; i--)
	{
		int u = q[i];
		if(g[u].size() == 0)
		{
			range(p, 1, P)
			{
				cost[u][p] = p;
			}
			continue;
		}
		range(p, 1, P)
		{
			cost[u][p] = p;
			for(auto v : g[u])
			{
				int best = INF;
				range(q, 1, P) if(q != p)
				{
					acc(min, best, cost[v][q]);
				}
				cost[u][p] += best;
			}
		}
	}

	int ans = INF;
	range(p, 1, P) acc(min, ans, cost[0][p]);
	return ans;
}

int main()
{
	ios_base::sync_with_stdio(false);

	int t;
	cin >> t;
	rep(i, t)
	{
		cout << "Case #" << i + 1 << ": " << solve() << endl;
	}
	return 0;
}

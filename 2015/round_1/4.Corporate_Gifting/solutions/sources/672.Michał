/*
	Michał Gańczorz
	fb hakier cup 2014
*/

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <math.h>
#include <string>
#include <queue>
#include <list>
#include <sstream>
 // #include <unistd.h>
// #include <unordered_map>

#define ll long long

using namespace std;
const ll prime = 1000000007;
const ll big_inf = 40000000042LL;

const int N = 200044;
vector<int> tree[N];
ll dpRes[N];
ll dpWithoutMin[N]; 
int minIndices[N];

// vector<int> dpMins[N];

vector<int> vInds[N];
vector<ll> minVals;

void fill_dp(int i)
{
	if(tree[i].size() == 0)
	{
		dpRes[i] = 1;
		dpWithoutMin[i] = 2;
		minIndices[i] = 1;
		return;
	}

	for(int j=0; j<tree[i].size(); ++j)
		fill_dp(tree[i][j]);

	ll mn = big_inf;
	ll ss = 0;
	for(int j=0; j<tree[i].size(); ++j)
	{
		ss += dpRes[tree[i][j]];
		if(minIndices[tree[i][j]] > 0 && minIndices[tree[i][j]] <= tree[i].size()+2)
		{
			// cout<<"adding "<<j<<" to "<<minIndices[tree[i][j]]<<"\n" ;
			vInds[minIndices[tree[i][j]]].push_back(j);
		}
	}

	minVals.push_back(big_inf);
	for(int j=1; j<=tree[i].size()+2; ++j)
	{	
		ll cm = ss + j; 
		for(int k=0; k<vInds[j].size(); ++k)
		{
			int vv = tree[i][vInds[j][k]];
			// cout<<"vv\n";
			cm += (dpWithoutMin[vv] - dpRes[vv]);
		}
		// cout<<j<<" "<<cm<<"\n";
		minVals.push_back(cm);
		mn = min(mn, cm);
	}

	int mnCnt = 0;
	int lastInd = -1;
	ll m2 = big_inf;
	for(int j=1; j<=tree[i].size()+2; ++j)
	{
		if(mn == minVals[j])
		{
			mnCnt++;
			lastInd = j;
		}
		else
			m2 = min(m2, minVals[j]);
	}

	dpRes[i] = mn;
	if(mnCnt == 1)
	{
		minIndices[i] = lastInd;
		dpWithoutMin[i] = m2;
	}
	else
	{
		minIndices[i] = -1;
		dpWithoutMin[i] = mn;
	}


	for(int j=1; j<=tree[i].size()+2; ++j)
	{
		vInds[j].clear();
	}
	minVals.clear();
	// cout<<minVals.size()<<"\n";
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

	int t;
	cin>>t;
	for(int i=1; i<=t; ++i)
	{
		int res = 0;

		int n;
		cin>>n;
		for(int j=0; j<n+5; ++j)
		{
			tree[j].clear();
			dpRes[j] = big_inf;
		}
		for(int j=0; j<n+5; ++j)
		{
			dpRes[j] = big_inf;
			dpWithoutMin[j] = big_inf;
			minIndices[j] = -1;
		}

		int t;
		cin>>t;
		for(int j=0; j<n-1; ++j)
		{
			cin>>t;
			tree[t].push_back(j+2);
			// dpRes.push_back(0);
			// dpMins.push_back(big_inf);
		}

		fill_dp(1);
		// cout<<minIndices[1]<<"\n";
		cout<<"Case #"<<i<<": "<<dpRes[1]<<"\n";
	}

	return 0;
}
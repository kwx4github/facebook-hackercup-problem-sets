import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.TreeSet;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author kaktusito
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		solver.solve(1, in, out);
		out.close();
	}
}

class CorporateGifting {
    public void solve(int testNumber, InputReader in, PrintWriter out) {

        int cases = in.nextInt();
        for (int t = 1; t <= cases; ++t) {

            int n = in.nextInt();
            ArrayList<Integer>[] adj = new ArrayList[n];
            for (int i = 0; i < n; ++i)
                adj[i] = new ArrayList<Integer>();

            for (int i = 0; i < n; ++i) {
                int pi = in.nextInt() - 1;
                if (i == 0) continue;
                adj[i].add(pi);
                adj[pi].add(i);
            }

            int[] label = new int[n];
            dfs(0, -1, label, adj);

            int ans = 0;
            for (int i = 0; i < n; ++i)
                ans += label[i];

            out.println(String.format("Case #%d: %d", t, ans));
        }

    }

    private void dfs(int u, int pu, int[] label, ArrayList<Integer>[] adj) {
        Set<Integer> used = new TreeSet<Integer>();
        for (int v : adj[u]) {
            if (v == pu) continue;
            dfs(v, u, label, adj);
            used.add(label[v]);
        }
        int min = 1;
        for (int l : used) {
            if (l == min) {
                ++min;
            } else break;
        }
        label[u] = min;
    }
}

class InputReader
{
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }

    public String next() {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


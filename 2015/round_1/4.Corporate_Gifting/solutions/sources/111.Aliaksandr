#pragma comment(linker, "/stack:32000000")
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

vector<vector<int> > g;

vector<int> val;

vector<pii> dpbest;
vector<int> dpworse;

void dfs(int x) {
	int bst = 0;
	vector<int> cands;
	vector<pii> acts;
	forn(ii, sz(g[x])) {
		int to = g[x][ii];
		dfs(to);
		bst += dpbest[to].X;
		//val[dpbest[to].Y] += -dpbest[to].X+dpworse[to];
		acts.pb(mp(dpbest[to].Y, -dpbest[to].X+dpworse[to]));
		cands.pb(dpbest[to].Y);
	}
	forn(ii, sz(acts)) {
		val[acts[ii].X] += acts[ii].Y;
	}
	sort(ALL(cands));
	cands.erase(unique(ALL(cands)), cands.end());
	int tt = 0;
	vector<int> tmp;
	for (int i = 1; tt < 2; ++i) {
		if (!binary_search(ALL(cands), i)) ++tt, tmp.pb(i);
	}
	cands.insert(cands.end(), ALL(tmp));
	vector<pii> tv;
	forn(ii, sz(cands)) {
		int cur = cands[ii];
		int curval = bst + cur + val[cur];
		tv.pb(mp(curval, cur));
	}
	sort(ALL(tv));
	dpbest[x] = tv[0];
	dpworse[x] = tv[1].X;

	forn(ii, sz(g[x])) {
		int to = g[x][ii];
		val[dpbest[to].Y] = 0;
	}
}

void solve() {
	int n; scanf("%d", &n);
	g = vector<vector<int> >(n);
	val = vector<int>(n+1);
	dpbest = vector<pii>(n);
	dpworse = vector<int>(n);
	forn(i, n) {
		int pr; scanf("%d", &pr);
		if (pr == 0) continue;
		--pr;
		g[pr].pb(i);
	}
	dfs(0);
	printf("%d\n", dpbest[0].X);
}


int main()
{
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int T; scanf("%d", &T); for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << "\n";
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
from collections import defaultdict
import sys

sys.setrecursionlimit(2000000)


inf = open("D-in.txt",'r')
outf = open("D-out.txt", 'w')
lines = inf.readlines()

T = int(lines[0])
idx = 1


def least(p, x, reports, manager, memo):
    # Works out the least amount of money that can be spent by employee p and their reports,
    # given that p's manager spent $x.
    if len(reports[p]) == 0:
        if x == 1:
            return 2
        else:
            return 1
    if not memo.has_key((p,x)):
        # Try several different amounts of money.
        a = 1
        worse_iterations = 0
        mintotal = 999999999999999999999999999
        while worse_iterations < 2:
            if a == x:
                a += 1
                continue
            total = a
            for report in reports[p]:
                total += least(report, a, reports, manager, memo)
            if total < mintotal:
                mintotal = total
                worse_iterations = 0
            else:
                worse_iterations += 1
            a += 1
        memo[(p,x)] = mintotal
    return memo[(p,x)]


for t in range(1, T+1):
    N = int(lines[idx].strip())
    idx += 1

    reports = defaultdict(list)
    manager = dict()
    memo = {}

    managerlist = map(int, lines[idx].strip().split(' '))
    idx += 1
    assert len(managerlist) == N

    for e, m in enumerate(managerlist):
        if m == 0:
            continue
        reports[m].append(e+1)
        manager[e+1] = m

    for employee in range(1, N + 1):
        if employee % 1000 == 0:
            print employee
        for x in range(0, 10):
            least(employee, x, reports, manager, memo)

    ans = least(1, 0, reports, manager, memo)

    print 'Case #{0}: {1}'.format(t, ans)
    outf.write('Case #{0}: {1}\n'.format(t, ans))


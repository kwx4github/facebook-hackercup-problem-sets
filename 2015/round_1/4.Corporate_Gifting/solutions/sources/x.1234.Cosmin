//package hackercup.round01.problem04;

import java.io.*;
import java.util.*;

public class CorporateGifting {

    /**
     * Backtracking algorithm (brute force)
     */
    static int getMinSum(Map<Integer, List<Integer>> adj, int root, int disallowedGiftValue, int n, long maxEnd) {
        if (System.currentTimeMillis() > maxEnd) return Integer.MIN_VALUE;
        int minSum = Integer.MAX_VALUE;
        for (int giftValue=1; giftValue<=n; giftValue++) {
            int sum = giftValue;
            if (giftValue!=disallowedGiftValue) { //pick an allowed gift value
                for (int child : adj.get(root)) {
                    sum += getMinSum(adj, child, giftValue, n, maxEnd);
                    if (sum >= minSum) break; //prune off solutions that will have higher cost
                }
                minSum = Math.min(minSum, sum);
            }
        }
        return minSum;
    }

    static int minExpenditure(Map<Integer, List<Integer>> adj, int n) {
        long start = System.currentTimeMillis();
        long maxEnd = start + 1000L * 1;
        if (n>100000) return Integer.MIN_VALUE;
        return getMinSum(adj, 1, 0, n, maxEnd);
    }

    public static void main(String[] args) throws IOException {
        if (args.length != 2) {
            System.err.printf("Usage: java %s <input file> <output file>\n", CorporateGifting.class.getCanonicalName());
            System.exit(1);
        }
        String inputFile = args[0];
        String outputFile = args[1];
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile)));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile)));
        int t = Integer.parseInt(reader.readLine());
        for (int i=1; i<=t; i++) {
            int n = Integer.parseInt(reader.readLine());
            String[] managers = reader.readLine().split(" ");
            Map<Integer, List<Integer>> adj = new HashMap<>();
            for (int j=1; j<=n; j++)
                adj.put(j, new ArrayList<>());
            for (int j=0; j<n; j++) {
                int employeeId = j+1;
                int managerId = Integer.parseInt(managers[j]);
                if (managerId!=0) {
                    adj.get(managerId).add(employeeId);
                }
            }
            writer.write(String.format("Case #%d: %d\n", i, minExpenditure(adj, n)));
        }
        reader.close();
        writer.close();
    }

}

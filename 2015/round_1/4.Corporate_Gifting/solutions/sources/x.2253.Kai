// Author: Kai Zhao

#include <climits>

#include <iostream>
#include <vector>


// Declaration
using std::cout;
using std::cin;
using std::endl;
using std::vector;


// Defines
#define MAX_SIZE 200001

struct Node
{
  int index;
  int cost;

  Node() : index(0), cost(0)
  {}
  
  Node(const int _index, const int _cost) : index(_index), cost(_cost)
  {}
};

// Global variables
int N;

vector<int> adj[MAX_SIZE];

Node matrix[MAX_SIZE][2];


void Clear()
{
  for (int i = 0; i <= N; ++i)
  {
    adj[i].clear();
  }
}

void CreateGraph()
{
  int parent_id = 0;
  for (int i = 1; i <= N; ++i)
  {
    cin >> parent_id;
    adj[parent_id].push_back(i);
  }
}

void PrintGraph()
{
  cout << "\t>>PrintGraph()" << endl;

  for (int i = 0; i <= N; ++i)
  {
    cout << "\t\ti=" << i << endl;

    cout << "\t\t\t";
    for (int j = 0; j < adj[i].size(); ++j)
    {
      cout << adj[i][j] << " ";
    }
    cout << endl;
  }
  
  cout << "\t<<PrintGraph()" << endl;
}

// Return true if updated
// Return false otherwise
bool UpdateSmallTwo(const int _id, const int _index, const int _cost)
{
  // cout << "\tUpdateSmallTwo(" << _id << "," << _index << "," <<  _cost<< ")" << endl;

  if (_cost < matrix[_id][0].cost)
  {
    // Small than the smallest
    matrix[_id][1] = matrix[_id][0];
    matrix[_id][0].index = _index;
    matrix[_id][0].cost = _cost;

    return true;
  }
  else if (_cost < matrix[_id][1].cost)
  {
    // Small than the smaller
    matrix[_id][1].index = _index;
    matrix[_id][1].cost = _cost;

    return true;
  }

  return false;
}

void InitMatrix()
{
  for (int i = 0; i <= N; ++i)
  {
    matrix[i][0] = Node(1, 1);
    matrix[i][1] = Node(2, 2);
  }

  for (int i = N; i >= 0; --i)
  {
    if (0 != adj[i].size())
    {
      // Has children
      matrix[i][0] = Node(1, INT_MAX);
      matrix[i][1] = Node(1, INT_MAX);

      for (int j = 1; j <= N; ++j)
      {
	int cost = j;
	bool all_smallest = true;
	
	// The ith buy $j and it has adj[i].size() children
	for (int k = 0; k < adj[i].size(); ++k)
	{
	  // Get the smallest $ of adj[i][k] which can not buy $j

	  // id is the child of the ith
	  int id = adj[i][k];

	  if (j == matrix[id][0].index)
	  {
	    // Choose smaller [1].cost
	    all_smallest = false;
	    cost += matrix[id][1].cost;
	  }
	  else
	  {
	    // Choose smallest [0].cost
	    cost += matrix[id][0].cost;
	  }
	}

	// Update the small_two of the ith
	const bool ret = UpdateSmallTwo(i, j, cost);

	if (!ret && all_smallest)
	{
	  // Do not update
	  // all smallest
	  // Do not need to look j++ for there is no better solution
	  break;
	}
      }
    }
  }
}

void PrintMatrix()
{
  cout << "\t>>PrintMatrix()" << endl;
  for (int i = 0; i <= N; ++i)
  {
    cout << "\t\ti=" << i << endl;
    cout << "\t\t\tsmall_two: " << "index=" << matrix[i][0].index << " cost=" << matrix[i][0].cost << endl;
    cout << "\t\t\tsmall_two: " << "index=" << matrix[i][1].index << " cost=" << matrix[i][1].cost << endl;
  }
  cout << "\t<<PrintMatrix()" << endl;
}

int Run()
{
  CreateGraph();

  // PrintGraph();

  InitMatrix();

  // PrintMatrix();

  // Support the case that more than one CEO
  int ret_0 = matrix[0][0].cost - matrix[0][0].index;
  const int ret_1 = matrix[0][1].cost - matrix[0][1].index;

  if (ret_0 > ret_1)
    ret_0 = ret_1;

  return ret_0;
}

int main()
{
  int T;
  cin >> T;

  // T cases
  for (int i = 1; i <= T; ++i)
  {
    cin >> N;

    Clear();

    // 1 == N
    int ret = 1;

    if (1 != N)
    {
      ret = Run();
    }
    
    cout << "Case #" << i << ": " << ret << endl;
  }
  
  return 0;
}

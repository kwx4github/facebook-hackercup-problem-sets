#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef set<int> si;
typedef vector<si> vsi;

vector<bool> flag;

si all_kids(vector<int>& parents, vvi& tree, vector<int>& flag)
{
	si kids;
	for(int i = 0;i < int(parents.size());i++)
	{
		si tmpkids(tree[parents[i]].begin(), tree[parents[i]].end());
		//flagging
		for(int j = 0;j < int(tree[parents[i]].size());j++)
		{
			flag[tree[parents[i]][j]] = true;
		}
		set_union(kids.begin(), kids.end(), tmpkids.begin(), tmpkids.end(), kids.begin()); 
	}
	return kids;
}

int main(void)
{
	int t, n, x;
	scanf("%d", &t);
	for(int rep = 1;rep <= t;rep++)
	{
		scanf("%d", &n);
		vvi tree(n);
		flag.clear();
		flag.resize(n, false);
		scanf("%d", &x);
		for(int i = 1;i < n;i++)
		{
			scanf("%d", &x);
			tree[x - 1].push_back(i);
		}
		vsi heirarchy(n);
		int act_used = 1;
		heirarchy[0].push(0);
		/* for(int i = 1;i < n;i++)
		{
			vi cur_heirarchy;
			for(int j = 0;j < int(heirarchy[i - 1].size());j++)
			{
				cur_heirarchy.reserve( cur_heirarchy.size() + tree[heirarchy[i - 1][j]].size());
				cur_heirarchy.insert( cur_heirarchy.end(), cur_heirarchy.begin(), cur_heirarchy.end());
				cur_heirarchy.insert( cur_heirarchy.end(), tree[heirarchy[i - 1][j]].begin(), tree[heirarchy[i - 1][j]].end());
			}
			heirarchy[i] = cur_heirarchy;
			act_used++;
		} */
		int i = 1;
		flag[0] = true;
		while(find(flag.begin(), flag.end(), false) != flag.end())
		{
			heirarchy[i] = all_kids(heirarchy[i - 1], tree, flag);
		}
		int redblack = 0, blackred = 0;
		for(int i = 0;i < act_used;i++)
		{
			if(i % 2 == 0)
			{
				redblack += int(heirarchy[i].size());
				blackred += int(heirarchy[i].size())*2;
			}
			else
			{
				redblack += int(heirarchy[i].size())*2;
				blackred += int(heirarchy[i].size());
			}
		}

		printf("Case #%d: %d\n", rep, redblack < blackred ? redblack : blackred);
	}
}
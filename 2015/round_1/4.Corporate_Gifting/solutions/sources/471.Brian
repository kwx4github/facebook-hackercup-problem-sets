#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
int in(){int r=0,c;for(c=getchar_unlocked();c<=32;c=getchar_unlocked());if(c=='-') return -in();for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());return r;}


#define MAXN 200100

int best1[MAXN];
int col[MAXN];
int best2[MAXN];

int E;
int lst[MAXN];
int deg[MAXN];
int nxt[MAXN<<1];
int vec[MAXN<<1];
typedef long long ll;


void add_edge(int v,int u){
  if(u==-1) return;
  //~ cerr << "add " << u << ' ' << v << endl;
  deg[u]++;
  nxt[E] = lst[u]; vec[E] = v; lst[u] = E++;
}

void init(){
  E = 0;
  memset(lst,-1,sizeof lst);
  memset(deg,0,sizeof deg);
}

void dfs(int u){
  
  //~ cerr << u <<' '<<deg[u] << endl;
  
  if(deg[u]==0){
    col[u] = 0;
    best1[u] = 1;
    best2[u] = 2;
    
    return;
  }
  
  ll tot = 0;
  int i;
  
  
  vector<ll> sm(deg[u]+1);
  
  for(i=lst[u];i!=-1;i=nxt[i]){
    
    //~ cerr << "etrA" << endl;
    int v = vec[i];
    
    dfs(v);
    tot+=best1[v];
    if(col[v]<=deg[u]) sm[col[v]]+=(best2[v]-best1[v]);
  }
  
  int b1 = -1;
  int b2 = -1;
  int c = 0;
  
  for(i=0;i<deg[u]+1;i++){
    int val = sm[i] + i+1 + tot;
    
    if(val<b1 || b1 == -1){
      b2 = b1;
      b1 = val;
      c  = i;
    }else{
      if(val<b2 || b2 == -1){
        b2 = val;
      }
    }
  }
  //~ cerr << u << ' ' << b1 << ' ' << b2 << ' ' <<c << endl;
  col[u] = c;
  best1[u] = b1;
  best2[u] = b2;
  
  
}

void solve(){
  int N = in();
  int i = 0;
  
  init();
  for(i=0;i<N;i++) add_edge(i,in()-1);
  
  dfs(0);
  
  cout<<best1[0]<<endl;
}

int main(){
  
  for(int i=0,T=in();i<T;i++){
      cout <<"Case #"<<i+1<<": ";
      solve();
    }
}

package Round1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class D {
	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new FileReader(
				"corporate_gifting.txt"));
		PrintWriter out = new PrintWriter("D.out");
		int tc = Integer.parseInt(in.readLine());
		StringTokenizer strtok;
		for (int cc = 1; cc <= tc; cc++) {
			int n = Integer.parseInt(in.readLine());
			int[] parent = new int[n];
			strtok = new StringTokenizer(in.readLine());
			for (int i = 0; i < n; i++)
				parent[i] = Integer.parseInt(strtok.nextToken()) - 1;
			ArrayList<Integer>[] tree = new ArrayList[n];
			for (int i = 0; i < tree.length; i++)
				tree[i] = new ArrayList<>();
			for (int i = 1; i < n; i++)
				tree[parent[i]].add(i);
			int[] level = new int[n];
			Queue<Integer> q = new ArrayDeque<Integer>();
			q.add(0);
			while (!q.isEmpty()) {
				int node = q.poll();
				for (int j : tree[node]) {
					q.add(j);
					level[j] = level[node] + 1;
				}
			}
			Integer[] toposort = new Integer[n];
			for (int i = 0; i < n; i++)
				toposort[i] = i;
			Arrays.sort(toposort,
					(x, y) -> -Integer.compare(level[x], level[y]));
			int[][] dp = new int[3][n];
			for (int node : toposort) {
				int[] s = new int[3];
				for (int j : tree[node]) {
					s[0] += dp[0][j];
					s[1] += dp[1][j];
					s[2] += dp[2][j];
				}
				dp[0][node] = Math.min(2 + s[1], 3 + s[2]);
				dp[1][node] = Math.min(1 + s[0], 3 + s[2]);
				dp[2][node] = Math.min(1 + s[0], 2 + s[1]);
			}
			System.out.printf("Case #%d: %d\n", cc,
					Math.min(dp[0][0], Math.min(dp[1][0], dp[2][0])));
			out.printf("Case #%d: %d\n", cc,
					Math.min(dp[0][0], Math.min(dp[1][0], dp[2][0])));
		}
		out.close();
	}
}

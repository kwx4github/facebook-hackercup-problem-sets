#include <bits/stdc++.h>
#include <sys/resource.h>
using namespace std;
int n;
vector < vector <int> > G;
int best_col[200005],best_val[200005],secondbest_val[200005],col_ans[200005];
void dfs(int pos)
{
	int deg=G[pos].size();
	if(deg==0)
	{
		best_val[pos]=1;
		best_col[pos]=1;
		secondbest_val[pos]=2;
		return;
	}
	int bres=0;
	for (int i = 0; i < deg; ++i)
	{
		dfs(G[pos][i]);
		bres+=best_val[G[pos][i]];
	}
	for (int i = 1; i <= deg+1; ++i)
	{
		col_ans[i]=bres+i;
	}
	for (int i = 0; i < deg; ++i)
	{
		if(best_col[G[pos][i]] <= deg+1)
		{
			col_ans[best_col[G[pos][i]]]+=secondbest_val[G[pos][i]];
			col_ans[best_col[G[pos][i]]]-=best_val[G[pos][i]];
		}
	}
	best_val[pos]=-1;
	best_col[pos]=-1;
	for (int i = 1; i <= deg+1; ++i)
	{
		if(best_val[pos]==-1 || col_ans[i]<best_val[pos])
		{
			best_val[pos]=col_ans[i];
			best_col[pos]=i;
		}
	}
	secondbest_val[pos]=-1;
	for (int i = 1; i <= deg+1; ++i)
	{
		if(i==best_col[pos])
			continue;
		if(secondbest_val[pos]==-1 || col_ans[i]<secondbest_val[pos])
		{
			secondbest_val[pos]=col_ans[i];
		}
	}
}
int main()
{
	// freopen("input.txt","r",stdin);
	freopen("D_in.txt","r",stdin);
	freopen("D_out.txt","w",stdout);
	const rlim_t kStackSize = 16 * 1024 * 1024;   // min stack size = 20 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
    int t;
	scanf("%d", &t);
	for (int test_num = 1; test_num <= t; ++test_num)
	{
		scanf("%d", &n);
		G.clear();
		G.resize(n+1);
		int par_of;
		for (int i = 1; i <= n; ++i)
		{
			scanf("%d", &par_of);
			G[par_of].push_back(i);
		}
		dfs(1);
		printf("Case #%d: %d\n", test_num, best_val[1]);
	}
	return 0;
}
// Compile with larger stack size, for example: -Wl,--stack,64000000
#include <cstdio>
#include <vector>
using namespace std;

const int MAXN = 300000;

int N;
vector<int> G[MAXN];
int bestcol[MAXN];
long long bestval[MAXN], bestval2[MAXN], add[MAXN];

void solve(int u)
{
	for (size_t e = 0; e < G[u].size(); ++e) solve(G[u][e]);

	add[0] = 0;
	for (size_t e = 0; e < G[u].size(); ++e) add[0] += bestval[G[u][e]];
	for (int col = 1; col <= (int)G[u].size() + 1; ++col) add[col] = add[0];

	for (size_t e = 0; e < G[u].size(); ++e) {
		int v = G[u][e];
		if (bestcol[v] <= (int)G[u].size() + 1)
			add[bestcol[v]] += bestval2[v] - bestval[v];
	}
	
	bestval[u] = -1;
	for (int col = 0; col <= (int)G[u].size() + 1; ++col)
	{
		long long cur = col + 1 + add[col];
		if (bestval[u] == -1 || cur < bestval[u]) {
			bestval2[u] = bestval[u];
			bestval[u] = cur;
			bestcol[u] = col;
		} else if (bestval2[u] == -1 || cur < bestval2[u]) {
			bestval2[u] = cur;
		}
	}
}

int main()
{
	int T; scanf("%d", &T);
	for (int t = 0; t < T; ++t) {
		printf("Case #%d: ", t + 1);
		scanf("%d", &N);
		for (int u = 0; u < N; ++u) G[u].clear();
		
		for (int u = 0; u < N; ++u) {
			int p; scanf("%d", &p);
			if (u > 0) G[p - 1].push_back(u);
		}
		
		solve(0);
		printf("%lld\n", bestval[0]);
	}
	
	return 0;
}
#include <bits/stdc++.h>

using namespace std;

#define REP(i, from, to) for (int i = (from); i < (to); ++i)
#define FOR(i, n) REP(i, 0, (n))
#define ALL(x) x.begin(), x.end()
#define SIZE(x) (int)x.size()
#define PB push_back
#define MP make_pair

typedef long long i64;

typedef vector<int>    VI;
typedef vector<VI>     VVI;
typedef vector<string> VS;
typedef vector<VS>     VVS;
typedef pair<int, int> PII;

int const MAX_GIFT_COST = 100;


void solve(vector<vector<i64>>& dp, VVI const& tree) {
    stack<int> st;

    st.push(0);

    VI ready(SIZE(dp));

    while (!st.empty()) {
        int const v = st.top();

        if (ready[v]) {
            FOR (c, MAX_GIFT_COST) {
                int const cost = c + 1;

                i64& res = dp[v][c];
                FOR (i, SIZE(tree[v])) {
                    int const v1 = tree[v][i];
                    i64 minSubtreeCost = -1;
                    FOR (j, MAX_GIFT_COST) if (j != c && (minSubtreeCost == -1 || minSubtreeCost > dp[v1][j]))
                            minSubtreeCost = dp[v1][j];
                    res += minSubtreeCost;
                }

                res += cost;
            }

            st.pop();
        } else {
            FOR (i, SIZE(tree[v]))
                    st.push(tree[v][i]);
            ready[v] = 1;
        }
    }
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    //freopen("input.txt", "w", stdout);

    if (0)
    {
        int const T = 200;
        cout << T << endl;
        FOR (i, T) {
            int const n = rand() % 200000 + 10;
            cout << n << endl;
            FOR (j, n) {
                cout << rand() % (j + 1) + 1 << " ";
            }
            cout << endl;
        }

        return 0;
    }

    //FOR (i, 200000) cout << i << " ";

    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;

    FOR (tests, t) {
        int n;
        cin >> n;

        VVI tree(n);
        FOR (i, n) {
            int x;
            cin >> x;
            if (i == 0) continue;

            tree[x - 1].PB(i);
        }

        vector<vector<i64>> dp(n, vector<i64>(MAX_GIFT_COST));
        solve(dp, tree);

        i64 const res = *min_element(ALL(dp[0]));
        cout << "Case #" << tests + 1 << ": " << res << endl;
    }

    return 0;
}

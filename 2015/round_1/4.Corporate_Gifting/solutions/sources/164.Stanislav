#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 200500;
typedef long long LL;
const LL MOD = 1000000000 + 7;

LL D[MAXN][26];
int n;
int maxik;
LL dfs(int v, vector<vector<int> > &g, int need)
{
	if (D[v][need] != -1) return D[v][need];
	if (g[v].size() == 0)
	{
		return D[v][need] = need;
	}

	LL result = 0;
	for(int i = 0; i < g[v].size(); ++i)
	{
		for(int j = 1; j <= maxik; ++j)
		{
			dfs(g[v][i], g, j);
		}
	}

	for(int i = 0; i < g[v].size(); ++i)
	{
		LL minik = 1000000000000000000;
		for(int j = 1; j <= maxik; ++j)
		{
			if (j == need) continue;
			minik = min(minik, D[g[v][i]][j]);
		}

		result += minik;
	}

	return D[v][need] = result + need;
}

int main()
{
//#ifdef _DEBUG || _RELEASE
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
//#else
	//freopen("html.in", "r", stdin); freopen("html.out", "w", stdout);
//#endif
	int T;
	scanf("%d", &T);

	forn(caze, 0, T)
	{
		LL ans = 1000000000000000000;
		
		scanf("%d", &n);
		maxik = min(25, n);
		vector<vector<int> > g(n);
		forn(i, 0, n)
		{
			int tmp;
			scanf("%d", &tmp);
			if (i == 0) continue;
			tmp--;
			g[tmp].push_back(i);
		}

		mems(D, -1);
		for(int i = 1; i <= maxik; ++i)
		ans = min(ans, dfs(0, g, i));

		cout<<"Case #"<<caze + 1<<": "<<ans<<endl;
	}
	return 0;
}
#undef NDEBUG

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <typeinfo>
#include <limits>

using namespace std;

bool WRITE_TO_FILE = false;

bool GetFlag(int argc, char** argv, const string& option, string* value) {
  for (int i = 0; i < argc; ++i) {
    string current = argv[i];
    if (current.size() >= option.size() && 
        current.substr(0, option.size()) == option) {
      if (current.size() == option.size()) {
        *value = "";
      } else {
        assert(current[option.size()] == '=');
        *value = current.substr(option.size() + 1);
      }
      return true;
    }
  }
  return false;
}

const int kMaxN = 210000;
const int kMaxC = 3;
const int kInf = (kMaxC + 1) * kMaxN;

int dp[kMaxN][kMaxC], n;
vector<int> g[kMaxN];

int Solve(int v, int col) {
  int& ans = dp[v][col];
  if (ans == -1) {
    ans = col;
    for (int u : g[v]) {
      int cur = kInf;
      for (int ucol = 0; ucol < kMaxC; ucol++) {
        if (ucol != col)
          cur = min(cur, Solve(u, ucol));
      }
      ans += cur;
    }
  }
  return ans;
}

void SolveTest(int test_number) {
  printf("Case #%d: ", test_number);

  for (int i = 0; i < kMaxN; ++i)
    g[i].clear();
  memset(dp, -1, sizeof dp);

  cin >> n;
  for (int i = 0; i < n; ++i) {
    int pi;
    cin >> pi;
    pi--;
    if (pi >= 0)
      g[pi].push_back(i);
  }

  int ans = kInf;
  for (int col = 0; col < kMaxC; ++col)
    ans = min(ans, Solve(0, col));
  cout << ans + n << endl; 

  if (WRITE_TO_FILE) {
    fprintf(stderr, "Case %d, Time: %f\n", test_number, ((double)clock()) / CLOCKS_PER_SEC);
  }
}

int main() {
  // string infile, outfile;
  // if (!GetFlag(argc, argv, "-r", &infile))
  //   infile = "input.txt";
  // assert(freopen(infile.c_str(), "r", stdin));
  // if(GetFlag(argc, argv, "-w", &outfile)) {
  //   assert(freopen(outfile.c_str(), "w", stdout));
  //   WRITE_TO_FILE = true;
  // }

  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  int test_number;
  cin >> test_number;
  for (int i = 1; i <= test_number; ++i) {
    SolveTest(i);
  }

#ifdef ssu1
  cerr << "\nTime = " << ((double)clock()) / CLOCKS_PER_SEC << endl;
#endif    
  return 0;
}


#include <cstdio>
#include <memory.h>
#include <stack>
#include <queue>
using namespace std;

int T;
int Ti;
int n;
vector<int> edge[200010];
long long dy[200010][61];
int indeg[200010];
int tree[200010];
queue<int> que;
int main()
{
	freopen("input.txt","rt",stdin);
	freopen("output.txt","wt",stdout);
	scanf("%d",&T);
	for(Ti=1;Ti<=T;Ti++)
	{
		scanf("%d",&n);
		int i,j,k;
		for(i=1;i<=n;i++)
		{
			scanf("%d",&k);
			tree[i]=k;
			if(k!=0) {
				edge[k].push_back(i);
				indeg[k]++;
			}
		}
		for(i=1;i<=n;i++)
		{
			if(indeg[i]==0)
			{
				for(j=1;j<=60;j++)
				{
					dy[i][j] = j;
				}
				que.push(i);
			}
		}
		int head;
		while(!que.empty())
		{
			head = que.front();
			que.pop();
			indeg[tree[head]]--;
			if(indeg[tree[head]]==0) que.push(tree[head]);
			if(dy[head][1]) continue;
			for(i=1;i<=60;i++)
			{
				long long cand = i;
				for(k=0;k<edge[head].size();k++) {
					long long min=99999999999999;
					for(j=1;j<=60;j++)
					{
						if(i==j) continue;
						if(min>dy[edge[head][k]][j]) min=dy[edge[head][k]][j];
					}
					cand+=min;
				}
				dy[head][i]=cand;
			}
		}
		long long cmin = 99999999999999;
		for(i=1;i<=60;i++)
		{
			if(cmin>dy[1][i]) cmin=dy[1][i];
		}
		printf("Case #%d: %lld\n",Ti, cmin);
		for(i=1;i<=n;i++) edge[i].clear();
		memset(tree,0,sizeof(tree));
		memset(dy,0,sizeof(dy));
		memset(indeg,0,sizeof(dy));
	}
	return 0;
}
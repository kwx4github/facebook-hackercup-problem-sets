import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.StringTokenizer;

class tNode implements Comparable<tNode>{
	int value;
	int root;
	ArrayList<Integer> children = new ArrayList<Integer>();
	// ArrayList<Integer> gchildren = new ArrayList<Integer>();
	HashSet<Integer> childrenVal = new HashSet<Integer>();

	tNode(int value, int root) {
		this.value = value;
		this.root = root;
		this.childFilled = 0;
		this.giftCost = 0;
	}

	HashSet<Integer> maxIS = new HashSet<Integer>();
	int childFilled;
	int giftCost;

	@Override
	public int compareTo(tNode other) {
		// TODO Auto-generated method stub
		return this.root-other.root;
	}
	

}

public class corporateGifting { // TO CHANGE: this class name
	public static void solve() throws IOException {
		int t = nextInt();
		for (int k = 0; k < t; k++) {
			int n = nextInt();
			int totalCost = 0;
			int[] supervisor = new int[n + 1];
			for (int i = 1; i <= n; i++) {
				supervisor[i] = nextInt();
			}
			tNode[] tree = new tNode[n + 1];
			for (int i = 1; i <= n; i++) {
				tree[i] = new tNode(i, supervisor[i]);
				
			}
			for(int i =1; i<=n; i++){
				if (supervisor[i]>0&&supervisor[i]<=n) {
					tree[supervisor[i]].children.add(i);
				}
			}
			tree[0] = new tNode(0, 0);
//			Arrays.sort(tree);
			LinkedList<Integer> bottomQueue = new LinkedList<Integer>();
			for (int i = n; i >= 1; i--) {
				if (tree[i].children.size() == 0) {
					bottomQueue.add(i);
				}
			}
			int[] dp = new int[n + 1];
			HashSet<Integer> inQ = new HashSet<Integer>();
			while (!bottomQueue.isEmpty()) {
				Integer cur = bottomQueue.remove();
				if (tree[cur].giftCost == 0) {
					if (tree[cur].childFilled == tree[cur].children.size()) {
						int trace = tree[cur].root;
						int minEmpty = 1;
						for (int i = 1; i <= minEmpty; i++) {
							if (tree[cur].childrenVal.contains(i)) {
								minEmpty++;
							}
						}
						tree[cur].giftCost = minEmpty;
						if (tree[cur].root != 0) {
							tree[tree[cur].root].childFilled++;
							tree[tree[cur].root].childrenVal
									.add(tree[cur].giftCost);
							if (!inQ.contains(tree[cur].root)) {
								bottomQueue.add(tree[cur].root);
								inQ.add(tree[cur].root);

							}
						}
						totalCost += minEmpty;

					} else {
						bottomQueue.add(cur);
					}
				}
			}
			println("Case #" + (k + 1) + ": " + totalCost);
		}
	}

	public static void main(String[] args) throws Exception { // file loading
																// from
																// Kapparate
		in = new BufferedReader(new FileReader("corporateGifting.in"));
		// in = new BufferedReader(new InputStreamReader(System.in));
		// TO CHANGE: the file input output name is not always assign.in /
		// assign.out
		out = new PrintWriter(new BufferedWriter(new FileWriter(
				"corporateGifting.txt")));
		solve();
		in.close();
		out.close();
	}

	public static StringTokenizer tokenizer;
	public static BufferedReader in;
	public static PrintWriter out;

	public static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(in.readLine());
		}
		return tokenizer.nextToken();
	}

	public static String nextString() throws IOException {
		return nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public static void println(int x) {
		System.out.println(x);
		out.println(x);
	}

	public static void println(String x) {
		System.out.println(x);
		out.println(x);
	}

	public static void print(String x) {
		System.out.print(x);
		out.print(x);
	}

	public static void print(int x) {
		System.out.print(x);
		out.print(x);
	}
}

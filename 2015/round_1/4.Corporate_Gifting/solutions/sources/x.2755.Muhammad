#include <bits/stdtr1c++.h>
#include <ext/numeric>

#define PI acos(-1)
#define EPS 1e-9
#define INTERSECT 1
#define PARALLEL 2
#define COLINEAR 3
#define left(x) ((x<<1)+1)
#define right(x) ((x<<1)+2)
#define mid(x,y) (x+(y-x)/2)
#define INF 1061109567

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> ii;
typedef pair<ii,int> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;

vi children[200010];
int parent[200010];
int level[200010];
int color[200010];
bool seen[200010];
struct compareNodes{
    bool operator()(iii &N1, iii &N2){
        if (level[N1.first.second] != level[N2.first.second]) return level[N1.first.second] < level[N2.first.second];
        if (parent[N1.first.second] != parent[N2.first.second]) return parent[N1.first.second] > parent[N2.first.second];
        if (N1.first.second != N2.first.second) return N1.first.second > N2.first.second;
        return N1.second > N2.second;
    }
};
priority_queue<iii,viii,compareNodes>q;

int main(){
    ifstream in ("in.txt");
    ofstream out("out.txt");
    int N,T,C=1;
    in >> T;
    while (T--){
        in >> N;
        memset(parent, 0, sizeof(parent));
        memset(seen, 0, sizeof(seen));
        memset(color, 0, sizeof(color));
        for (int i=1 ; i<=N; i++) children[i].clear();
        for (int x, i=1; i<=N; i++){
            in >> x;
            if (i != 1){
                children[x].push_back(i);
                parent[i] = x;
            }
        }
        int maxLevel(0);
        parent[1] = level[0] = 0;
        stack <int> st;
        st.push(1);
        while (!st.empty()){
            int node = st.top();
            st.pop();
            maxLevel = level[node] = level[parent[node]] + 1;
            for (int i=0; i<children[node].size(); i++)
                st.push(children[node][i]);
        }
        while (!q.empty()) q.pop();
        for (int i=1; i<=N; i++){
            q.push(make_pair(make_pair(1, i),1));
        }
        while (!q.empty()){
            iii node = q.top();
            int node_level  =   level[node.first.second];
            int parent_node =   parent[node.first.second];
            viii sibling_nodes;
            while (!q.empty() && parent[node.first.second] == parent_node){
                q.pop();
                if (!seen[node.first.second]){
                    seen[node.first.second] = true;
                    sibling_nodes.push_back(node);
                    color[node.first.second] = node.first.first;
                }
                if (!q.empty()) node = q.top();
            }
            if (parent_node){
                sort(sibling_nodes.begin(), sibling_nodes.end());
                int parent_color = 1;
                for (int i=0; i<sibling_nodes.size();i++){
                    //cout << "C:" << sibling_nodes[i].first.first << " N:" << sibling_nodes[i].first.second << endl;
                    if (sibling_nodes[i].first.first == parent_color) parent_color++;
                }
                q.push(make_pair(make_pair(parent_color, parent_node),0));
            }
        }
        int ans1 = 0;
        for (int i=1; i<=N; i++){
            //cout << i << "=>" << color[i] << endl;
            ans1 += color[i];
        }
        //cout << "ans: " << ans1 << endl << endl;



        while (!q.empty()) q.pop();
        for (int i=1; i<=N; i++){
            q.push(make_pair(make_pair(2, i),1));
        }
        memset(color, 0, sizeof(color));
        memset(seen, 0, sizeof(seen));

        while (!q.empty()){
            iii node = q.top();
            int node_level  =   level[node.first.second];
            int parent_node =   parent[node.first.second];
            viii sibling_nodes;
            while (!q.empty() && parent[node.first.second] == parent_node){
                q.pop();
                if (!seen[node.first.second]){
                    seen[node.first.second] = true;
                    sibling_nodes.push_back(node);
                    color[node.first.second] = node.first.first;
                }
                if (!q.empty()) node = q.top();
            }
            if (parent_node){
                sort(sibling_nodes.begin(), sibling_nodes.end());
                int parent_color = 1;
                for (int i=0; i<sibling_nodes.size();i++){
                    //cout << "C:" << sibling_nodes[i].first.first << " N:" << sibling_nodes[i].first.second << endl;
                    if (sibling_nodes[i].first.first == parent_color) parent_color++;
                }
                q.push(make_pair(make_pair(parent_color, parent_node),0));
            }
        }

        //cout << endl;
        int ans2 = 0;
        for (int i=1; i<=N; i++){
            //cout << i << "=>" << color[i] << endl;
            ans2 += color[i];
        };
        //cout << "ans: " << ans2 << endl << endl;
        out << "Case #"<< C++ << ": "  <<  min(ans1, ans2)  << "\n";

    }
    in.close();
    out.close();
    return 0;
}

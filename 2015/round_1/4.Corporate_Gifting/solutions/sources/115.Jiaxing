#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

const int M = 19;
const int MAXN = 200010;

int in[MAXN];
vector<int> e[MAXN];
int p[MAXN];

int dp[MAXN][M];

int dfs(int m, int k) {
	if (dp[m][k] > -1) return dp[m][k];
	dp[m][k] = k;
	for (int l = 0; l < e[m].size(); l++) {
		int val = -1;
		for (int j = 1; j < M; j++) {
			if (j == k) continue;
			int tmp = dfs(e[m][l], j);
			if (val == -1 || val > tmp) val = tmp;
		}
		dp[m][k] += val;
	}
	//printf("(%d %d) = %d\n", m, k, ret);
	return dp[m][k];
}



int main() {
	int T;
	scanf("%d", &T);
	for (int cas = 1; cas <= T; cas++) {
		int n;
		int s;
		scanf("%d", &n);
		memset(dp, -1, sizeof(dp));
		memset(in, 0, sizeof(in));
		for (int i = 0; i < n; i++) e[i].clear();
		for (int i = 0; i < n; i++) {
			int k;
			scanf("%d", &k);
			k--;
			p[i] = k;
			if (k >= 0) {
				in[k]++;
				e[k].push_back(i);
			} else {
				s = i;
			}
		}
		
		queue<int> q;
		for (int i = 0; i < n; i++) {
			if (in[i] == 0) q.push(i);
		}
		while (!q.empty()) {
			int u = q.front();
			for (int i = 1; i < M; i++) dfs(u, i);
			q.pop();
			in[p[u]]--;
			if (in[p[u]] == 0) q.push(p[u]);
		}

		int ans = -1;
		for (int i = 1; i < M; i++) {
			int val = dfs(s, i);
			if (ans == -1 || val < ans) ans = val;
		}
		printf("Case #%d: %d\n", cas, ans);
	}
}
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const int maxN = 210000;
const int maxD = 300;
const long long inf = 1000000000000000000LL;
vector < int > g[maxN];
vector < long long > d[maxN];
vector < long long > ma[maxN], mb[maxN];

void dfs(int v) {
	d[v].assign(maxD, inf);
	for (int i = 0; i < g[v].size(); ++i) {
		dfs(g[v][i]);
	}

	for (int i = 0; i < maxD; ++i) {
		long long cost = i + 1;
		for (int j = 0; j < g[v].size(); ++j) {
			int u = g[v][j];
			long long add = min(i == 0 ? inf : ma[u][i - 1], i == maxD - 1 ? inf : mb[u][i + 1]);
			cost += add;
		}
		d[v][i] = cost;
	}

	ma[v].assign(maxD, inf);
	mb[v].assign(maxD, inf);
	for (int i = 0; i < maxD; ++i) {
		ma[v][i] = d[v][i];
		if (i > 0) {
			ma[v][i] = min(ma[v][i], ma[v][i - 1]);
		}
	}
	for (int i = maxD - 1; i >= 0; --i) {
		mb[v][i] = d[v][i];
		if (i + 1 < maxD) {
			mb[v][i] = min(mb[v][i], mb[v][i + 1]);
		}
	}
}

void solve(int test) {
	int n;
	cin >> n;
	for (int i = 1; i <= n; ++i) {
		g[i].clear();
		d[i].clear();
		ma[i].clear();
		mb[i].clear();
	}
	for (int i = 1; i <= n; ++i) {
		int p;
		scanf("%d", &p);
		if (p == 0) {
			continue;
		}
		g[p].push_back(i);
	}

	dfs(1);

	long long res = inf;
	for (int i = 0; i < maxD; ++i) {
		res = min(res, d[1][i]);
	}
	printf("Case #%d: %lld\n", test, res);
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	cin >> t;
	for (int i = 1; i <= t; ++i) {
		solve(i);
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}
#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back

#define foreach(v,c) for(typeof((c).begin()) v = (c).begin(); v!=(c).end(); ++v)
#define all(c) (c).begin(), (c).end()
#define REP(i,n) for(int i=0; i<n; i++)
#define F(i,L,R) for(int i=L; i<R; i++)

#define printA(a,L,R) //F(puf,L,R) cout << a[puf] << (puf==(R-1)?'\n':' ')
#define printV(a) //printA(a,0,a.size())
#define dbg(x) //cerr << #x << " = " << x << endl;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int,int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ld> vld;

#define PI 3.1415926535897932384626
#define INF 2001000009
#define EPS 1e-8
#define MAXN 200097
#define MOD 1000000007

int T;
int ficost[MAXN],fitype[MAXN];
int secost[MAXN],setype[MAXN];
int N;
int p[MAXN];
vi children[MAXN];

void findcosts(int i) {
  dbg(i);
  int basecost = 0;
  int deltas[MAXN];
  REP(q,children[i].size()+5) deltas[q] = q;
  foreach(j,children[i]) {
    //findcosts(*j);
    basecost += ficost[*j];
    deltas[fitype[*j]]+=(secost[*j]-ficost[*j]);
    dbg(*j);
    dbg(deltas[fitype[*j]]);
  }
  int min1, min2; min1=min2=INF;
  int val1, val2; val1=val2=-1;

  for (int d = 1; d<children[i].size()+5; d++) {
    if (deltas[d]<min1) {
      min2=min1;
      val2=val1;
      min1=deltas[d];
      val1=d;
    } else if (deltas[d]<min2) {
      min2=deltas[d];
      val2=d;
    }
  }

  ficost[i]=min1+basecost;
  fitype[i]=val1;
  secost[i]=min2+basecost;
  setype[i]=val2;

  dbg(i);
  dbg(basecost);
  printA(deltas,0,children[i].size()+5);
  dbg(ficost[i]);
  dbg(fitype[i]);
  dbg(secost[i]);
  dbg(setype[i]);

  return;
}

int qd[MAXN],q[MAXN];

int main() { ios_base::sync_with_stdio(0); cin.tie(0);
  cin >> T;
  F(zz,1,T+1) {
    cin >> N;
    REP(i,N) cin >> p[i+1];
    REP(i,N) children[p[i+1]].pb(i+1);

    queue<int> addable; while (!addable.empty()) addable.pop(); addable.push(1);
    int ind = 0;
    while (!addable.empty()) {
      int curr = addable.front(); addable.pop();
      q[ind++]=curr;
      foreach(v,children[curr])
        addable.push(*v);
      if (curr<10 || curr>199990) dbg(curr);
    }

    while (ind--)
      findcosts(q[ind]);

    dbg("here");
    //    findcosts(1);

    REP(i,MAXN) children[i].clear();

    cout << "Case #" << zz << ": ";
    cout << ficost[1];
    cout << endl;
  }
}

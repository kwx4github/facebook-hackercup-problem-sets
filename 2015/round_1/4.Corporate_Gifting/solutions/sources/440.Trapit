from collections import defaultdict

T = int(raw_input())

for t in range(T):
	n = int(raw_input())
	struct = map(int, raw_input().strip().split())
	hier_child = defaultdict(list)
	hier_parent = defaultdict(list)
	for i in range(1,n):
		hier_child[struct[i]-1].append(i)  # hier_child[j] contains children of j
		hier_parent[i].append(struct[i]-1)  # hier_child[j] contains parents of j
	root = 0
	leaves = []
	costs = [(0,0,0) for _ in range(n)]  # contains primary cost, color of node for primary, secondary cost
	stack = []
	for i in range(n):
		if len(hier_child[i]) == 0: 
			leaves.append(i)
			costs[i] = (1,1,2)
	#stack = leaves[:]
	stack = [root]
	curr = 0
	add = hier_child[0]
	while add:
		stack += add
		new_add = []
		for p in add: 
			new_add += hier_child[p]
		add = new_add[:]
	#print hier_child
	#print hier_parent
	#print stack
	#seen = {}
	while stack:
		#print stack
		node = stack.pop()
		parents = hier_parent[node]
		childs = hier_child[node]
		d = len(childs)
		#print d, childs
		if d == 0:
			costs[node] = (1,1,2)
			toadd = []
			#for parent in parents:
			#	if parent not in stack: toadd.append(parent)
			#stack = toadd + stack
			#seen[node] = 1
			continue
		k = 0
		for i in childs: k += costs[i][0]
		node_costs = [0 for _ in range(d+2)]
		delta = [k for _ in range(d+2)]
		for i,child in enumerate(childs):
			color = costs[child][1]
			if color <= d+1: delta[color] += costs[child][2] - costs[child][0]
		primary = n**2; secondary = n**2; bestc = n
		for c in range(1,d+2): 
			node_costs[c] = c + delta[c]
			if node_costs[c] < secondary:
				if node_costs[c] < primary:
					secondary = primary
					primary = node_costs[c]
					bestc = c
				else: secondary = node_costs[c]
		#print "delta",delta
		#print "node_c",node_costs
		costs[node] = (primary,bestc,secondary)
		#toadd = []
		#for parent in parents:
		#	if parent not in stack: toadd.append(parent)
		#stack = toadd + stack
		#seen[node] = 1
		
	print "Case #%d:"%(t+1), costs[0][0]
		

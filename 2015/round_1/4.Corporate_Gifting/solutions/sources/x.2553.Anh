import java.io.*;
import java.util.*;
import java.math.*;

class Node {
    public int id;
    public int idParent;
    public int numChildren = 0;
    public int baseCost = 0;
    public int penalty[] = null;
    public int choice1Value = 0;
    public int choice1Cost = 0;
    public int choice2Value = 0;
    public int choice2Cost = 0;
}

public class CoorporateGiftGiving {
    public static void main(String[] args) throws Exception { 
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int t = 1; t <= T; t++) {
            // Parse data
            int N = Integer.parseInt(in.readLine());
            Node nodes[] = new Node[N+1];
            nodes[0] = new Node();
            String[] tokens = in.readLine().split(" ");
            for (int i = 1; i <= N; i++) {
                int p = Integer.parseInt(tokens[i-1]);

                nodes[i] = new Node();
                nodes[i].id = i;
                nodes[i].idParent = p;
                if (nodes[p] == null) {
                    nodes[p] = new Node();
                }
                nodes[p].numChildren++;
            }

            // Process
            for (int i = 1; i <= N; i++) {
                nodes[i].penalty = new int[nodes[i].numChildren+4];
                for (int j = 0; j < nodes[i].numChildren+4; j++) {
                    nodes[i].penalty[j] = 0;
                }
            }

            int minCost = 0;
            for (int i = N; i >= 1; i--) {
                // Compute 2 possible choices
                if (nodes[i].numChildren == 0) {
                    nodes[i].choice1Value = 1;
                    nodes[i].choice1Cost = 1;
                    nodes[i].choice2Value = 2;
                    nodes[i].choice2Cost = 2;
                }
                else {
                    int mi1 = 1;
                    int mi1Cost = -1;
                    for (int j = 1; j < nodes[i].penalty.length; j++) {
                        int cost = j + nodes[i].penalty[j] + nodes[i].baseCost;
                        if (cost < mi1Cost || mi1Cost == -1) {
                            mi1Cost = cost;
                            mi1 = j;
                        }
                    }

                    int mi2 = 1;
                    int mi2Cost = -1;
                    if (mi1 == 1) { mi2 = 2; }
                    for (int j = 1; j < nodes[i].penalty.length; j++) {
                        if (j == mi1) continue;

                        int cost = j + nodes[i].penalty[j] + nodes[i].baseCost;
                        if (cost < mi2Cost || mi2Cost == -1) {
                            mi2Cost = cost;
                            mi2 = j;
                        }
                    }

                    nodes[i].choice1Value = mi1;
                    nodes[i].choice1Cost = mi1Cost;
                    nodes[i].choice2Value = mi2;
                    nodes[i].choice2Cost = mi2Cost;
                }

                // Update parent
                int p = nodes[i].idParent;
                if (p != 0) {
                    nodes[p].baseCost += nodes[i].choice1Cost;
                    nodes[p].penalty[nodes[i].choice1Value] += nodes[i].choice2Cost - nodes[i].choice1Cost;
                }
                else {
                    minCost = nodes[i].choice1Cost < nodes[i].choice2Cost ? nodes[i].choice1Cost : nodes[i].choice2Cost;
                }
            }

            // Print
            System.out.println("Case #" + t + ": " + minCost);
        }
    }
}

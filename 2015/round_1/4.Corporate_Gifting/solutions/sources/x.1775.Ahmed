from collections import namedtuple
class emp():
    def __init__(self,id,v,children):
        self.id=id
        self.v=v
        self.children=children
def solve():
    d=dict()
    n=int(fin.readline())
    e=[int(x) for x in fin.readline().strip().split(" ")]
    for i in range(1,n+1):
        d[i]=emp(i,1,[])
    for i in range(1,n):
        d[e[i]].children.append(d[i+1])
    for i in range(n,0,-1):
        t=d[i]
        a=[0]*(len(t.children)+1)
        flag=True
        for child in t.children:
            if child.v<=len(t.children):
                a[child.v-1]="x"
            if child.v==t.v:
                flag=False
        if not flag:        
            for i in range(len(a)):
                if a[i]!= "x":
                    mx=i+1
                    break
            t.v=mx
    c=0
    for e in range(n):
        c+=d[e+1].v
    return c
        
        
fin=open('../in','r') ; fout=open('../out','w')
cases=int(fin.readline().strip())
for case in range(1,cases+1):
    print case
    fout.write("Case #"+str(case)+": "+str(solve())+"\n")
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <map>
#define INF 10000000

using namespace std;

vector<long long> vet[200200];
long long pai[200200];
long long sum;

long long recursiva(long long n){
	map <long long, long long> memo;
	bool v = false;

	for(long long i = 0; i < vet[n].size(); i++){
		memo[recursiva(vet[n][i])] = 1;
	}	

	if(vet[n].size() > 0){
		long long la = 1;
		
		while(1){
			if(memo.find(la) == memo.end()){
				sum += la;
				return la;
			}
			
			la++;
		}
	}

	if(vet[pai[n]].size() != 1 || (vet[pai[pai[n]]].size() == 1 && vet[pai[n]].size() == 1)){
		sum++;		
		return 1;
	} else{
		sum += 2;
		return 2;
	}
}

int main(){
	long long t, cases = 0;

	scanf("%lld", &t);

	while(t--){
		memset(pai, INF, sizeof(pai));

		for(long long i = 0; i < 200200; i++)
			vet[i].clear();
		cases++;
		sum = 0;

		long long n, x;

		scanf("%lld", &n);

		for(long long i = 0; i < n; i++){
			scanf("%lld", &x);

			if(i == 0)
				continue;

			vet[x].push_back(i + 1);
			pai[i + 1] = x;
		}

		if(n == 1){
			printf("Case #%lld: 1\n", cases);
			continue;
		} else if(n == 2){
			printf("Case #%lld: 3\n", cases);
			continue;
		}
		
		recursiva(1);

		printf("Case #%lld: %lld\n", cases, sum);
	}
}

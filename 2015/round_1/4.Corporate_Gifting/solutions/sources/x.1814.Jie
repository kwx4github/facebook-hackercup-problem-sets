//
//  found1_4.cpp
//  FHC
//
//  Created by jie zheng on 15/1/18.
//  Copyright (c) 2015å¹´ jie zheng. All rights reserved.
//

#include <stdio.h>
#include <iostream>
#include <queue>
#include <set>
#include <vector>
#include <math.h>
#include <fstream>
#include <queue>

using namespace std;

#define MAXN 200005
int arr[MAXN];
long long dp[MAXN][110];
int vis[MAXN];
int first[MAXN];
int ne[MAXN];
int total;
int sub[MAXN];
void addedge(int s, int e)
{
    ne[total] = first[s];
    first[s] = total;
    sub[total] = e;
    total++;
}

int N;

void tree_dp(int node)
{
    for(int j = 1; j <= 105; ++j)
    {
        long long subtotal = 0;
        for(int i = first[node]; i != -1; i = ne[i])
        {
            int child = sub[i];
//            if(!vis[child])
//            {
//                tree_dp(child);
//                vis[child] = 1;
//            }
            long long tmp = 0x3f3f3f3f;
            for(int k = 1; k <= 105; ++k)
            {
                if(k != j)
                    tmp = min(tmp, dp[child][k]);
            }
            subtotal += tmp;
        }
        dp[node][j] = subtotal+j;
    }
}
int main()
{
//    ofstream fout("/Users/jiezheng/Dev/poj/test.txt");
//    fout<<1<<endl;
//    int pre = 0;
//    for(int i = 0; i < 1; ++i)
//    {
//        fout<<200000<<endl;
//        fout<<0;
//        for(int j = 1; j < 200000; ++j)
//        {
//            //fout<<" "<<min(j,pre+rand()%(j-pre));
//            fout<<" "<<j;
//        }
//        fout<<endl;
//    }
    freopen("/Users/jiezheng/Downloads/corporate_gifting.txt", "r", stdin);
    freopen("/Users/jiezheng/Dev/poj/gift.txt", "w", stdout);

    
    int T;
    cin>>T;
    for(int caseid = 1; caseid <= T; ++caseid)
    {
        long long ans = 0;
        cin>>N;
        memset(dp, 0, sizeof(dp));
        memset(vis, 0, sizeof(vis));
        memset(first, -1, sizeof(first));
        total = 0;
        for(int i = 0; i < N; ++i)
        {
            cin>>arr[i];
            if(arr[i])
            {
                addedge(arr[i]-1, i);
            }
        }
        //tree_dp(0);
        for(int i = N-1; i >= 0; --i)
        {
            tree_dp(i);
        }
        ans = dp[0][1];
        for(int i = 1; i <= 105; ++i)
        {
            ans = min(ans, dp[0][i]);
        }
        
        cout<<"Case #"<<caseid<<": "<<ans<<endl;
    }
    
    return 0;
}

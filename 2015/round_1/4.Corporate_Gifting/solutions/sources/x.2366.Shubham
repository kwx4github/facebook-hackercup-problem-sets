
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
//#include <iostream>
#include<list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#include <fstream>
#include<climits>
using namespace std;

#define sd(x) scanf("%d",&x)
#define sfd(x) scanf("%d",&x)
#define sfld(x) scanf("%lld",&x
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)


list<int> *adj;
int dp[2000005][5];
int getAns(int a,int node,int k,int value){

    int ans=0;
    k++;
    for(list<int>::iterator it = adj[node].begin();it!=adj[node].end();it++){

        int mi = INT_MAX;

        for(int i=1;i<4;i++){

            if(i==a) continue;
            mi = min(mi,dp[*it][i]);
        }
        ans+=mi;
    }

    return ans;
}
struct Stack{
	int s[1000000];
	int Top;
	void push(int a){
		
		s[Top++] = a;
		
	}
	
	void pop(){
		
		Top--;
	}
	
	int top(){
		
		return s[Top-1];
	}
};
int main(){

    fstream fout;
    fstream fin;

    fin.open("input.txt");
    fout.open("output.txt");

    int t,p=1; fin>>t;

    while(p<=t){

        //list<int> adj[200005];

        int n; fin>>n;
        int child[n+5],parent[n+5];
        adj = new list<int>[n+10];

        memset(child,0,sizeof(child));

        memset(parent,0,sizeof(parent));

        memset(dp,0,sizeof(dp));
            //adj = new list

        stack<int> Stack;

        for(int i=1;i<=n;i++){

            int temp; fin>>temp;

            adj[temp].push_back(i);
            child[temp]++;

            parent[i] = temp;
        }

        for(int i=0;i<=n;i++) Stack.push(i);

        while(!Stack.empty()){

            int node = Stack.top();

            Stack.pop();

            if(adj[node].size()==0){

	 		for(int j=1;j<4;j++)dp[node][j]=j;

            }
            else{
                for(int j=1;j<4;j++)
                    dp[node][j]=getAns(j,node,9,10) + j;
            }

            child[parent[node]]--;
            if(child[parent[node]]==0)Stack.push(parent[node]);
	 }

	 int mi = INT_MAX;

	 for(int j=1;j<4;j++){

        mi = min(mi,dp[1][j]);
	 }

	 fout<<"Case #"<<p<<": "<<mi<<endl;
	 p++;
    }
}

#include<iostream>
#include<string>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#define ll long long int
#define mk make_pair
#define pb push_back
#define mod 1000000007
using namespace std;

int dp[200200][12];

/*int solve(int idx,int col,vector<int> graph[])
{
    if(graph[idx].size()==0)    return 0;
    if(dp[idx][col]!=-1)    return dp[idx][col];
    int ans=0,i,j,l=graph[idx].size();
    for(i=0;i<l;i++)
    {
        int temp=1e9;
        for(j=1;j<=5;j++)
        {
            if(j==col)  continue;
            temp=min(temp,solve(graph[idx][i],j,graph)+j);
        }
        ans+=temp;
    }
    return dp[idx][col]=ans;
}*/

vector<int> graph[200200];

int solve(stack<int> st,vector<int> graph[])
{
    while(!st.empty())
    {
        int u=st.top();
        st.pop();
        int i,j,k,l=graph[u].size();
        for(i=1;i<=10;i++)
        {
            int ans=0;
            for(j=0;j<l;j++)
            {
                int temp=1e9;
                for(k=1;k<=10;k++)
                {
                    if(i==k)
                        continue;
                    temp=min(temp,dp[graph[u][j]][k]);
                }
                ans+=temp;
            }
            dp[u][i]=ans+i;
        }
    }
    return min(dp[1][1],min(dp[1][2],dp[1][3]));
}


int bfs(stack<int> st,vector<int> graph[])
{
    queue<int> q;
    q.push(1);
    while(!q.empty())
    {
        int u=q.front(),i,l;
        q.pop();
        st.push(u);
        l=graph[u].size();
        for(i=0;i<l;i++)
            q.push(graph[u][i]);
    }
    return solve(st,graph);
}



int main()
{
    int t,w=1;
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    cin>>t;
    while(t--)
    {
        int p,ans=0,i,n,j;
        cin>>n;
        for(i=0;i<=n;i++)
            graph[i].clear();
        for(i=1;i<=n;i++)
        {
            cin>>p;
            graph[p].pb(i);
        }
        memset(dp,-1,sizeof(dp));
        stack<int> st;
        ans=bfs(st,graph);
        //cout<<ans<<" ";
        cout<<"Case #"<<w<<": "<<ans<<"\n";
        w++;
    }
    return 0;
}

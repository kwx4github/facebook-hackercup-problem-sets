import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class D {

    private static final int MAX = 300000;

    int[] best;
    int[] bestMax;
    int[] secondBest;
    private int[] p;
    private ArrayList<Integer>[] childs;
    FastArray delta = new FastArray(MAX);

    static class FastArray {

        int[] version;
        int[] value;
        int currentVersion = 1;

        public FastArray(int size) {
            version = new int[size];
            value = new int[size];
        }

        void set(int i, int v) {
            value[i] = v;
            version[i] = currentVersion;
        }

        int get(int i) {
            if (version[i] != currentVersion) {
                return 0;
            }
            return value[i];
        }

        void inc(int i, int delta) {
            set(i, get(i) + delta);
        }

        void clear() {
            currentVersion++;
            if (currentVersion == Integer.MAX_VALUE) {
                Arrays.fill(version, 0);
                Arrays.fill(value, 0);
                currentVersion = 1;
            }
        }
    }


    void calc(int v) {
        for (int ch : childs[v]) {
            calc(ch);
        }
        delta.clear();
        int bestSum = 0;
        for (int ch : childs[v]) {
            delta.inc(bestMax[ch], secondBest[ch] - best[ch]);
            bestSum += best[ch];
        }

        best[v] = Integer.MAX_VALUE;
        secondBest[v] = Integer.MAX_VALUE;
        bestMax[v] = Integer.MAX_VALUE;

        for (int i = 1; i < childs[v].size() + 5; i++) {
            int cost = i + bestSum + delta.get(i);
//            if (v == 0) {
//                System.err.println(cost + " = " + i + " + " + bestSum + " + " + delta.get(i));
//            }
            if (cost < best[v]) {
                secondBest[v] = best[v];
                best[v] = cost;
                bestMax[v] = i;
            } else if (cost < secondBest[v]) {
                secondBest[v] = cost;
            }
        }

    }

    void solve() {
        int n = in.nextInt();
        childs = new ArrayList[n];
        p = new int[n];
        bestMax = new int[n];
        best = new int[n];
        secondBest = new int[n];

        for (int i = 0; i < p.length; i++) {
            childs[i] = new ArrayList<Integer>();
        }


        for (int i = 0; i < p.length; i++) {
            p[i] = in.nextInt() - 1;
            if (p[i] != -1) {
                childs[p[i]].add(i);
            }
        }
        calc(0);
//        System.err.println("best = " + Arrays.toString(best));
//        System.err.println("bestMax = " + Arrays.toString(bestMax));
//        System.err.println("secondBest = " + Arrays.toString(secondBest));
        System.out.println(best[0]);
    }


    private Scanner in;

    void run() {
        in = new Scanner(System.in);
        int t = in.nextInt();
        for (int it = 1; it <= t; it++) {
            System.out.print("Case #" + it + ": ");
            solve();
        }
    }

    public static void main(String[] args) {
        new D().run();
    }
}

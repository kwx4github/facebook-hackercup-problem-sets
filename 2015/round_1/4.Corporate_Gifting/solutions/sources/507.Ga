#pragma comment(linker, "/STACK: 200000000")

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef unsigned long long ull; //unsigned int should suffice?
struct node
{
	ull cost; //minimum cost of subtree including outgoing edge(charity or to parent) 
	ull cost2; //second minimum cost; may be equal to cost or greater
	int idx; //weight of outgoing node of subtree rooted at this node. this has cost cost
	vector<int> children;
};

const int N = 200000;
node h[N+1];
ull c[N+1];
int n;


//complexity: sigma a for i = 1 to n which is O(N)
void compute(int r) //root
{
	int a = h[r].children.size(); //number of children
	if(a==0)
	{ //base case of tree dp - leafnode
		h[r].cost = 1;
		h[r].idx = 1;
		h[r].cost2 = 2;
		return;
	}
	int i;
	for(i=0;i<a;i++)
	{
		compute(h[r].children[i]); //As it is tree, not an infinite recursion
	}
	ull s=0;
	for(i=0;i<a;i++)
	{
		s += h[h[r].children[i]].cost;
	}
	
	for(i=1;i<=a+1;i++)
	{
		c[i] = s+i;
	}
	
	for(i=0;i<a;i++)
	{ // c[k] entries with k>a+1 are meaningless but c is of max size and idx is in range [1 N]
		c[h[h[r].children[i]].idx] += h[h[r].children[i]].cost2 - h[h[r].children[i]].cost;
	}
	
	//Find 2 smallest element of array
	ull m, m2; int idx;
	m = c[1]; m2 = c[2]; idx = 1;
	if(m2<m)
	{
		swap(m,m2); idx = 2;
	}
	for(i=3;i<=a+1;i++)
	{
		if(c[i]<m2) 
		{
			m2 = c[i];
			if(m2<m)
			{
				swap(m,m2); idx = i;
			}
		}
	}
	
	h[r].cost = m;
	h[r].cost2 = m2;
	h[r].idx = idx;
}

int main()
{
	int t;
	cin>>t;
	int i,j,k;
	for(i=1;i<=t;i++)
	{
		cin>>n;
		for(j=0;j<=n;j++)
		{
			h[j].children.clear();
		}
		for(j=1;j<=n;j++)
		{
			int m;
			cin>>m;
			h[m].children.push_back(j);
		}
		compute(1);
		cout<<"Case #"<<i<<": "<<h[1].cost<<"\n";
	}
	return 0;
}

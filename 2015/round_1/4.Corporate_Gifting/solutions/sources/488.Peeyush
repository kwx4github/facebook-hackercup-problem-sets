#include<stdio.h>
#include<vector>
#include<stack>
using namespace std;
int plength= 0;
vector<int> preorder;
//struct node tree[200010];

struct node{
	int nosons;
	vector<int> sons;
	int delta;
	int ncolor;
	int minsum;	
	int rcolor;
};
struct node tree[200010];
void pree(int);
void reverse();

void pre(int root)
{
 
    stack<int> nodeStack;
    nodeStack.push(root);
 
    while (nodeStack.empty() == false)
    {
        int val = nodeStack.top();
        preorder.push_back(val);
        nodeStack.pop();
 	for(int i=0;i<tree[val].nosons;i++)
            nodeStack.push(tree[val].sons[i]);
    }
	//int i;
	//preorder.push_back(root);
	//for(i=0;i<tree[root].nosons;i++)
	//pre(tree[root].sons[i]);	
}


int main()
{
	int t,n,tc,i,p,t_son,mintotal,k,sum1,sum2,son,color1,color2,value,j;
	int coloradd[200010];
	
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	
	scanf("%d",&t);
	for(tc=1;tc<=t;tc++)
	{
		scanf("%d",&n);
	        //printf("%d %d\n",n, t);	
		for(i=1;i<=n;i++)
		{
			tree[i].sons.clear();
			tree[i].nosons = 0;
		}
	//	if(tc > 8)
	//		continue;	
		for(i=1;i<=n;i++)
		{
			scanf("%d",&p);
			if(p!=0)
			{
				t_son = tree[p].nosons;
				tree[p].sons.push_back(i);
				tree[p].nosons++;
			}
		}

		preorder.clear();
		//printf("abcd %d", n);	
		pre(1);
		//reverse();
		//if (tc > 8) continue;
		for(j=n-1;j>=0;j--)
		{
			i = preorder[j];
			if(tree[i].nosons == 0)
			{
				tree[i].minsum = 1;
				tree[i].rcolor = 1;
				tree[i].delta = 1;
				tree[i].ncolor = 2;
				
			}
			else
			{
				mintotal = 0;
				for(k=1;k<=tree[i].nosons+2;k++)
				coloradd[k] = k;
			
				for(k=0;k<tree[i].nosons;k++)
				{
					son = tree[i].sons[k];
					mintotal = mintotal + tree[son].minsum;
					coloradd[tree[son].rcolor] = coloradd[tree[son].rcolor] + tree[son].delta;

				}
				
			sum1=1000000000;
			sum2=1000000000;
			color1 = 0;
			
			for(k=1;k<tree[i].nosons+3;k++)
			{
				value = coloradd[k];
				if(value<sum1)
				{
					color2 = color1;
					sum2 = sum1;
					color1 = k;
					sum1 = value;
				}
				else if(value<sum2)
				{
					color2 = k;
					sum2 = value;
				}
				
				tree[i].minsum = sum1 + mintotal;
				tree[i].rcolor = color1;
				tree[i].delta = sum2-sum1;
				tree[i].ncolor = color2;
			}
			
			}
			
		}
		
		printf("Case #%d: %d\n",tc,tree[1].minsum);
		
	}
		
	
return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<algorithm>
#include<cmath>
#include<set>
#include<queue>
#include<sstream>
#include<utility>
#include<map>
#include<ctime>
#include<cstdio>
#include<cassert>
#include<functional>




using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<char, char> pcc;
typedef pair<double, double> pdd;

#define show(x) cerr << x
#define debug(x) show(#x << ": " << (x) << endl)

const long double PI = 3.14159265358979323846;
const long double gammama = 0.57721566490153286060;
const long double eps = 1e-5;
const int INF = 1000 * 1000 * 1000 + 1;
const ll LINF = (ll)1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const ll mod = 1000 * 1000 * 1000 + 7;

vector<vector<int> > g;
vector<ll> mini, minPos, pen;

void dfs(int pos, int prev = -1) {
      ll add = 0;
      vector<ll> a(g[pos].size() + 2, 0);
      for (int i = 1; i < a.size(); ++i) {
            a[i] = i;
      }
      for (int i = 0; i < g[pos].size(); ++i) {
            int to = g[pos][i];
            if (to == prev)
                  continue;
            dfs(to, pos);
            add += mini[to];
            if (minPos[to] < a.size())
                  a[minPos[to]] += pen[to];
      }
      mini[pos] = add + a[1];
      minPos[pos] = 1;
      for (int i = 2; i < a.size(); ++i) {
            if (a[i] + add < mini[pos]) {
                  mini[pos] = a[i] + add;
                  minPos[pos] = i;
            }
      }
      pen[pos] = max(a[1] - a[minPos[pos]], a[2] - a[minPos[pos]]);
      for (int i = 1; i < a.size(); ++i) {
            if (i == minPos[pos])
                  continue;
            pen[pos] = min(pen[pos], a[i] - a[minPos[pos]]);
      }
}

void solve() {
      g.clear();
      int n;
      cin >> n;
      g.resize(n);
      mini.resize(n);
      minPos.resize(n);
      pen.resize(n);
      for (int i = 0; i < n; ++i) {
            int p;
            cin >> p;
            if (i == 0)
                  continue;
            --p;
            g[i].push_back(p);
            g[p].push_back(i);            
      }
      dfs(0, -1);
      cout << mini[0] << endl;
}

#define LOCAL

int main() {
      //ios_base::sync_with_stdio(0);
#ifdef LOCAL
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
#endif
      int numberOfTests;
      cin >> numberOfTests;
      for (int testId = 0; testId < numberOfTests; ++testId) {
            cout << "Case #" << testId + 1 << ": ";
            solve();
            std::cerr << testId << endl;
      }

#ifdef LOCAL
      cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif	
      return 0;
}

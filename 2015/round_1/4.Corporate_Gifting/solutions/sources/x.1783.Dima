#include <iostream>
#include <string>

#include <set>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <string.h>
#include <stdio.h>
using namespace std;
typedef long long ill;

const int N = 200*1000;

struct vrt{
    int p, o;
};

vector<vector<int> > g;
vrt v[N];
int c[N];

char ready[N];

int getCST( int ver ){
    int o = v[ver].o,
        p = v[ver].p+1;
    
    return min ( o*2+p, o+p*2 );
}
/*
void DFS(int ver){
    v[ver].o = g[ver].size();
    v[ver].p = 0;
    for( int i = 0; i < g[ver].size(); i++ ){
        DFS(g[ver][i]);
        v[ver].o += v[g[ver][i]].p;
        v[ver].p += v[g[ver][i]].o;
    }
}*/

void DFS(int ver){
    stack<int> s;
    
    s.push(ver);
    
    memset(ready, 0, N);
    while ( !s.empty() ){
        ver = s.top();
        
        bool aready  = true;
        if ( g[ver].size() == 0 ){
            s.pop();
            ready[ver] = 1;
            v[ver].o = 0;
            v[ver].p = 0;
            continue;
        }
        
        for ( int i = 0; i < g[ver].size(); i++ )
            if ( !ready[g[ver][i]] ){
                s.push( g[ver][i] );
                aready = false;
            }
        
        if ( aready ){
            v[ver].p = 0;
            v[ver].o = g[ver].size();
            for ( int i = 0; i < g[ver].size(); i++ ){
                v[ver].o += v[g[ver][i]].p;
                v[ver].p += v[g[ver][i]].o;
            }
            ready[ver] = true;
            s.pop();
        }
    }
    
}


void BFS(int ver){
    queue<int> q;
    q.push(ver);
    while (!q.empty()) {
        ver = q.front();
        q.pop();

        int lcst = 0;
        int cst = getCST(ver);        
        for (int i = 0; i < g[ver].size(); i++)
            lcst += getCST(g[ver][i]);
        //cout << "v: " << ver << " cst=" << cst << " lcst=" << lcst << endl;
        if (v[ver].o > v[ver].p) { // +1
            if (cst > lcst + 2) c[ver] = 3;
            else c[ver] = 2;
        } else {
            if (cst > lcst + 3) c[ver] = 3;
            else c[ver] = 1;
        }
        for (int i = 0; i < g[ver].size(); i++)
            q.push(g[ver][i]);
    }
}

int main() {
    int nt;
    cin >> nt;
    for ( int i = 0; i < nt; i++ ){
        int n, res = 0;
        
        cin >> n;
        g.clear();
        g.resize(n);
        
        for ( int j = 0; j < n; j++ ){
            int tmp;
            cin >> tmp;
            if ( tmp == 0 ) continue;
            g[tmp-1].push_back(j);
        }
                    
        DFS(0);
        BFS(0);
        /*
        for ( int i = 0; i < n; i++ )
            cout << i << ": c=" << c[i] <<" (" << v[i].o << ", " << v[i].p << ")" << endl;
        */
        
        for ( int j = 0; j < n; j++ )
            res += c[j];
        
        cout << "Case #"<< i+1 << ": " << res << endl;
    }
    return 0;
}
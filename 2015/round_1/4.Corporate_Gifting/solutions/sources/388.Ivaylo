/*
 * d.cpp
 *
 *  Created on: Jan 18, 2015
 *      Author: istrandjev
 */

#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <deque>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <bitset>
#include <functional>
#define all(x) x.begin(),x.end()
#define mpair make_pair
using namespace std;
typedef long long ll;
typedef long double ld;
const ld epsylon = 1e-9;

const int max_value = 120;
pair<vector<int>, int> solve2(const vector<int>& dad) {
  int root = -1;
  int n = (int)dad.size();
  vector<vector<int> > ne(n);
  for (int i = 0; i < (int)dad.size(); ++i) {
    if (dad[i] == 0) {
      root = i;
    } else {
      ne[dad[i] - 1].push_back(i);
    }
  }

  vector<char> vis(n, 0);
  vis[root] = 1;
  queue<int> q;
  q.push(root);
  vector<int> order;
  order.reserve(n);
  while (!q.empty()) {
    int c = q.front();
    q.pop();
    order.push_back(c);
    for (int i = 0; i < (int)ne[c].size(); ++i) {
      if (vis[ne[c][i]]) {
        continue;
      }
      vis[ne[c][i]] = 1;
      q.push(ne[c][i]);
    }
  }

  vector<vector<int> > dp(n, vector<int>(max_value + 1, 0));
  for (int i = (int)order.size() - 1; i >= 0; --i) {
    int v = order[i];
    pair<int, int> best(-1, 0);
    pair<int, int> second_best(-1, 0);
    for (int val = 1; val <= max_value; ++val) {
      dp[v][val] += val;
    }
    if (dad[v] == 0) {
      continue;
    }
    if (dp[v][1] < dp[v][2]) {
      best = make_pair(dp[v][1], 1);
      second_best = make_pair(dp[v][2], 2);
    } else {
      best = make_pair(dp[v][2], 2);
      second_best = make_pair(dp[v][1], 1);
    }
    for (int val = 3; val <= max_value; ++val) {
      if (dp[v][val] >= second_best.first) {
        continue;
      } else if (dp[v][val] < best.first) {
        second_best = best;
        best.first = dp[v][val];
        best.second = val;
      } else {
        second_best.first = dp[v][val];
        second_best.second = val;
      }
    }
    for (int val = 1; val <= max_value; ++val) {
      if (val == best.second) {
        dp[dad[v] - 1][val] += second_best.first;
      } else {
        dp[dad[v] - 1][val] += best.first;
      }
    }
  }
  vector<int> solution(n);
  int ans = dp[order[0]][1];
  solution[order[0]] = 1;
  for (int i = 2; i <= max_value; ++i) {
    if (dp[order[0]][i] < ans) {
      ans = dp[order[0]][i];
      solution[order[0]] = i;
    }
  }

  for (int i = 1; i < (int)order.size(); ++i) {
    int v = order[i];
    int besti = -1;
    for (int val = 1; val <= max_value; ++val) {
      if (val == solution[dad[v] - 1]) {
        continue;
      }
      if (besti == -1 || dp[v][val] < dp[v][besti]) {
        besti = val;
      }
    }
    solution[v] = besti;
  }

  return make_pair(solution, ans);
}

int solve(const vector<int>& dad) {
  int root = -1;
  int n = (int)dad.size();
  vector<vector<int> > ne(n);
  for (int i = 0; i < (int)dad.size(); ++i) {
    if (dad[i] == 0) {
      root = i;
    } else {
      ne[dad[i] - 1].push_back(i);
    }
  }

  vector<char> vis(n, 0);
  vis[root] = 1;
  queue<int> q;
  q.push(root);
  vector<int> order;
  order.reserve(n);
  while (!q.empty()) {
    int c = q.front();
    q.pop();
    order.push_back(c);
    for (int i = 0; i < (int)ne[c].size(); ++i) {
      if (vis[ne[c][i]]) {
        continue;
      }
      vis[ne[c][i]] = 1;
      q.push(ne[c][i]);
    }
  }

  vector<vector<int> > dp(n, vector<int>(max_value + 1, 0));
  for (int i = (int)order.size() - 1; i >= 0; --i) {
    int v = order[i];
    pair<int, int> best(-1, 0);
    pair<int, int> second_best(-1, 0);
    for (int val = 1; val <= max_value; ++val) {
      dp[v][val] += val;
    }
    if (dad[v] == 0) {
      continue;
    }
    if (dp[v][1] < dp[v][2]) {
      best = make_pair(dp[v][1], 1);
      second_best = make_pair(dp[v][2], 2);
    } else {
      best = make_pair(dp[v][2], 2);
      second_best = make_pair(dp[v][1], 1);
    }
    for (int val = 3; val <= max_value; ++val) {
      if (dp[v][val] >= second_best.first) {
        continue;
      } else if (dp[v][val] < best.first) {
        second_best = best;
        best.first = dp[v][val];
        best.second = val;
      } else {
        second_best.first = dp[v][val];
        second_best.second = val;
      }
    }
    for (int val = 1; val <= max_value; ++val) {
      if (val == best.second) {
        dp[dad[v] - 1][val] += second_best.first;
      } else {
        dp[dad[v] - 1][val] += best.first;
      }
    }
  }
  int ans = dp[order[0]][1];
  for (int i = 2; i <= max_value; ++i) {
    if (dp[order[0]][i] < ans) {
      ans = dp[order[0]][i];
    }
  }

  return ans;
}

#ifndef WIN32
#include <sys/time.h>
#else
#include <windows.h>
#include <time.h>
#endif

inline long double get_time() {
#ifndef WIN32
  timeval tv;
  gettimeofday(&tv, 0);
  return tv.tv_sec + tv.tv_usec / 1000000.0;
#else
  return (long double)clock()/CLOCKS_PER_SEC;
#endif
}

bool valid_tree(const vector<int>& dad) {
  int root = -1;
  int n = (int)dad.size();
  vector<vector<int> > ne(n);
  for (int i = 0; i < (int)dad.size(); ++i) {
    if (dad[i] == 0) {
      if (root != -1) {
        return false;
      } else {
        root = i;
      }
    } else {
      ne[dad[i] - 1].push_back(i);
    }
  }
  vector<char> vis(n, 0);
  int visited = 1;
  vis[root] = 1;
  queue<int> q;
  q.push(root);
  while (!q.empty()) {
    int c = q.front();
    q.pop();
    for (int i = 0; i < (int)ne[c].size(); ++i) {
      if (vis[ne[c][i]]) {
        continue;
      }
      visited++;
      vis[ne[c][i]] = 1;
      q.push(ne[c][i]);
    }
  }
  return visited == n;
}
vector<int> gen_tree(int n) {
  vector<int> a(n);
  while (true) {
    a[0] = 0;
    vector<int> used;
    used.push_back(1);
    vector<int> rem(n - 1);
    for (int i = 1; i < n; ++i) {
      rem[i - 1] = i;
    }
    random_shuffle(all(rem));
    for (int i = 0; i < (int)rem.size(); ++i) {
      a[rem[i]] = used[rand() % ((int)used.size())];
      used.push_back(rem[i] + 1);
    }
    if (valid_tree(a)) {
      return a;
    }
  }
  return a;
}

int main(int argc, const char* argv[]) {
  freopen("facebook.in", "r", stdin);
  freopen("facebook.out", "w", stdout);
  int nt;
  cin >> nt;
  for (int it = 1; it <= nt; it++) {
    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < (int)a.size(); ++i) {
      scanf("%d", &a[i]);
    }
    pair<vector<int>, int> res = solve2(a);
    cout << "Case #" << it << ": " << res.second << endl;
    fprintf(stderr, "Case #%d: %d\n", it, *max_element(all(res.first)));
  }

  // vector<int> a = gen_tree(13);

//  int limit = atoi(argv[1]);
//  int best = 0;
//  while (true) {
//    vector<int> a = gen_tree(rand() % limit + 1);
//    pair<vector<int>, int> res = solve(a);
//    int maxv = *max_element(all(res.first));
//    if (maxv > best) {
//      best = maxv;
//      cout << maxv << ": " << res.second << endl;
////      for (int i = 0; i < (int)a.size(); ++i) {
////        printf("%d%c", a[i], ((i + 1) != a.size() ? ' ' : '\n'));
////      }
////      for (int i = 0; i < (int)res.first.size(); ++i) {
////        printf("%d%c", res.first[i], ((i + 1) != res.first.size() ? ' ' : '\n'));
////      }
//    }
//  }

// freopen("max_test.txt", "r", stdin);
//  freopen("ivo.in", "r", stdin);
//  ld start = get_time();
//  int nt;
//  cin >> nt;
//  for (int it = 0; it < nt; ++it) {
//    int n;
//    cin >> n;
//
//    vector<int> a(n);
//    for (int i = 0; i < (int)a.size(); ++i) {
//      scanf("%d", &a[i]);
//    }
//    pair<vector<int>, int> res = solve2(a);
//    cout << res.second << " " << *max_element(all(res.first)) << endl;
//  }
//  ld end = get_time();
//  fprintf(stderr, "%.8llf", end - start);

//  freopen("max_test.txt", "w", stdout);
//  cout << 100 << endl;
//  for (int it = 0; it < 100; ++it) {
//    vector<int> a = gen_tree(200000);
//    cout << a.size() << endl;
//    for (int i = 0; i < (int)a.size(); ++i) {
//      printf("%d%c", a[i], ((i + 1) != a.size() ? ' ' : '\n'));
//    }
//  }
  return 0;
}


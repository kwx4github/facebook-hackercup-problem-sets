package com.company;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    static BufferedReader in;
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;
    static final int MAX = 1024;
    static ArrayList[] g;
    static long[][] dp;
    static long[] p;
    static long time = System.currentTimeMillis();


    public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(new FileInputStream("in2.txt")));
        out = new PrintWriter("out.txt");
        int t = nextInt();

        for (int i = 0; i < t; i++) {
            out.print("Case #" + (i + 1) + ": ");
            int n = nextInt();
            g = new ArrayList[n + 1];
            dp = new long[n][MAX];
            p = new long[n];
            for (int i1 = 0; i1 < dp.length; i1++) {
                for (int i2 = 0; i2 < dp[i1].length; i2++) {
                    dp[i1][i2] = Long.MAX_VALUE;
                }
            }
            for (int i1 = 0; i1 < g.length; i1++) {
                g[i1] = new ArrayList<Integer>();
            }
            for (int i1 = 0; i1 < n; i1++) {
                int c = nextInt() - 1;
                if (c >= 0) {
                    g[c].add(i1);
                }
            }
            rec(0);
            long ans = Long.MAX_VALUE;
            for (int k = 1; k < dp[0].length; k++) {
                ans = Math.min(ans, dp[0][k]);
            }
            out.println(ans);
            System.out.println(System.currentTimeMillis() - time);
            out.flush();
        }
        in.close();
        out.flush();
        out.close();
    }


    static void rec(int v) {
        for (int j = 0; j < g[v].size(); j++) {
            int to = (int) g[v].get(j);
            rec(to);
        }
        Pair f = new Pair(), s = new Pair();
        for (int i = 1; i < MAX; i++) {
            long cur = i; //todo maybe use long
            for (int j = 0; j < g[v].size(); j++) {
                int to = (int) g[v].get(j);
                cur += dp[to][i];
            }
            if(cur < s.first) {
                s = new Pair();
                s.first = cur;
                s.second = i;
            }
            if(s.first < f.first) {
                f.swap(s);
            }
        }
        for (int j = 1; j < MAX; j++) {
            if (j != f.second) {
                dp[v][j] = Math.min(dp[v][j], f.first);
            } else {
                dp[v][j] = Math.min(dp[v][j], s.first);
            }
        }
    }

    static class Pair {
        long first;
        long second;

        public Pair() {
            first = Long.MAX_VALUE;
            second = Long.MAX_VALUE;
        }

        void swap(Pair a) {
            long buf = first;
            first = a.first;
            a.first = buf;
            buf = second;
            second = a.second;
            a.second = buf;
        }
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return st.nextToken();
    }
}

// CorporateGifting.cpp : Defines the entry point for the console application.
//

#include "stdio.h"
#include <memory>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>

using namespace std;

class Node
{
public:
	Node() {
		m_pay = -1;
	}
	~Node() {
		m_children.clear();
	}

	void addNode(Node* node)
	{
		m_children.push_back(node);
	}

	int getChildrenCount()
	{
		return m_children.size();
	}

	int m_pay;
	vector<Node*> m_children;
	
private:

};

int T, N, ans;

Node* node_list[200001];
Node* root;
stack<Node*> m_stack;

void dfs_using_stack(Node* root)
{
	m_stack.push(root);
	while (!m_stack.empty())
	{
		Node* top = m_stack.top();

		bool allVisited = true;
		for(int i = 0; i < top->getChildrenCount(); i++)
		{
			Node* child = top->m_children[i];
			if(child->m_pay == -1)
			{
				allVisited = false;
				break;
			}
		}

		if(allVisited == false)
		{
			for(int i = 0; i < top->getChildrenCount(); i++)
			{
				Node* child = top->m_children[i];
				m_stack.push(child);
			}
		} else
		{
			m_stack.pop();

			int mypay = 1;
			bool match = true;
			while (match)
			{
				match = false;
				for(int i = 0; i < top->getChildrenCount(); i++)
				{
					if(top->m_children[i]->m_pay == mypay)
					{
						mypay++;
						match = true;
						break;
					}
				}
			}

			top->m_pay = mypay;
			ans += mypay;
		}
	}
}

void dfs(Node* nod)
{
	if(nod->getChildrenCount() != 0)
	{
		for(int i = 0; i < nod->getChildrenCount(); i++)
		{
			Node* child = (nod->m_children)[i];
			if(child->m_pay == -1)
			{
				dfs(child);		
			}
		}

		//decide my pay
		int myPay = 1;
		bool found = true;
		while (found)
		{
			found = false;
			for(int i = 0; i < nod->getChildrenCount(); i++)
			{
				Node* child = (nod->m_children)[i];
				if(child->m_pay == myPay)
				{
					myPay++;
					found = true;
					break;
				}
			}
		}

		nod->m_pay = myPay;
		ans += myPay;
	} else
	{
		nod->m_pay = 1;
		ans += 1;
	}
}

int main(int argc, char* argv)
{
	FILE * pFile;
	FILE * wFile;
	pFile = fopen ("corporate_gifting.txt","r");
	wFile = fopen ("output.txt","w");

	fscanf (pFile, "%d", &T);
	for(int i = 0; i < T; i++)
	{
		ans = 0;
		root = new Node();
		int manager_id = 0;

		fscanf(pFile, "%d", &N);
		for(int j = 1; j <= N; j++)
		{
			fscanf(pFile, "%d", &manager_id);
			if(manager_id == 0)
			{
				node_list[j] = root;
			} else
			{
				Node* manager = node_list[manager_id];
				Node* node = new Node();
				manager->addNode(node);
				node_list[j] = node;
			}
		}

		dfs_using_stack(root);
		fprintf(wFile,"Case #%d: %d\n",i+1,ans);
	}

	fclose (pFile);
	fclose (wFile);

	return 0;
}
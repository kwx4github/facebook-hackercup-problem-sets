#!/usr/bin/python
# -*- coding: utf-8 -*-


def print_case(case, cost):
    print "Case #%d: %s" % (case,
                            str(cost) if cost is not None else 'impossible')


def search(tree, managers, gifts, start_el, start_gift):
    stack = [start_el]
    while stack:
        el = stack.pop()
        children = tree.get(el, [])
        if children:
            stack.extend(children)
        manager = managers.get(el)
        if not manager:
            gifts[el - 1] = start_gift
            continue
        manager_gift = gifts[manager - 1]
        if manager_gift == 1:
            gifts[el - 1] = 2
            continue
        # Element could give gift 1 but should it?
        if manager_gift == 2 and len(children) > 2:
            gifts[el - 1] = 3
        elif manager_gift > 2 and len(children) > 1:
            gifts[el - 1] = 2
        else:
            gifts[el - 1] = 1

    return sum(gifts)

if __name__ == '__main__':
    input_file = open('corporate_gifting.txt', 'r')
    number_of_cases = int(input_file.readline())
    for case in xrange(1, number_of_cases + 1):
        tree = {}
        managers = {}
        number_of_employees = int(input_file.readline())
        gifts = [0] * number_of_employees
        manager_list = input_file.readline().split()
        for index, manager in enumerate(manager_list):
            manager = int(manager)
            if manager == 0:
                continue
            employee_id = index + 1
            managers[employee_id] = manager
            children = tree.get(manager)
            if not children:
                tree[manager] = [employee_id]
            else:
                children.append(employee_id)
        print_case(
            case, min(
                search(tree, managers, gifts, 1, 1),
                search(tree, managers, gifts, 1, 2))
        )

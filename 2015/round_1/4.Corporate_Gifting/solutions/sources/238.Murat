#include<bits/stdc++.h>
  
using namespace std;

template<class T> inline T sqr(const T& a) { return a * a; }
  
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
  
constexpr ld EPS = 1e-9;
constexpr ld PI = 2 * acos(0.0);
constexpr int N = 200100;
constexpr int kMaxColor = 19;

vector<int> g[N];
int d[N][kMaxColor + 1];

int Dfs(int v, int color) {
  int &tg = d[v][color];
  if (tg < 0) {
    tg = color;
    for (int to : g[v]) {
      int best = 1e9;
      for (int c = 1; c <= kMaxColor; ++c) {
        if (c != color) {
          best = min(best, Dfs(to, c));
        }
      }
      tg += best;
    }
  }
  return tg;
}

int Solve() {
  int ans = 1e9;
  for (int c = 1; c <= kMaxColor; ++c)
    ans = min(ans, Dfs(0, c));
  return ans;
}

int main() {
  int tests;
  scanf("%d", &tests);
  for (int it = 1; it <= tests; ++it) {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
      int p;
      scanf("%d", &p);
      if (i) {
        --p;
        g[p].push_back(i);
      }
    }
    memset(d, -1, sizeof d);
    printf("Case #%d: %d\n", it, Solve());
    for (int i = 0; i < n; ++i) {
      g[i].clear();
    }
  }

  return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

static const int MAX = 200000;
static const int INF = MAX * 10;
vector<int> children[MAX + 1];
int mem[MAX + 1][4];

int main(void) {
  int T, N, M;

  cin >> T;
  for (int i = 1; i <= T; ++i) {
    for (int j = 0; j <= MAX; ++j) {
      children[j].clear();
    }
    cin >> N;
    for (int j = 1; j <= N; ++j) {
      cin >> M;
      children[M].push_back(j);
    }
    vector<int> employees;
    employees.push_back(1);
    for (int j = 0; j < employees.size(); ++j) {
      for (int c : children[employees[j]]) {
        employees.push_back(c);
      }
    }
    for (int j = employees.size() - 1; j >= 0; --j) {
      int e = employees[j];
      if (children[e].size() == 0) {
        for (int k = 1; k <= 3; ++k) {
          mem[e][k] = k;
        }
      } else {
        for (int k = 1; k <= 3; ++k) {
          int sum = k;
          for (int c : children[e]) {
            int best = INF;
            for (int l = 1; l <= 3; ++l) {
              if (l != k) {
                best = min(best, mem[c][l]);
              }
            }
            sum += best;
          }
          mem[e][k] = sum;
        }
      }
    }
    int res = INF;
    for (int j = 1; j <= 3; ++j) {
      res = min(res, mem[1][j]);
    }
    cout << "Case #" << i << ": " << res << endl;
  }

  return 0;
}

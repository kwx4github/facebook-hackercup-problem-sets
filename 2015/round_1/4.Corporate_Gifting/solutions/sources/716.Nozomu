#include <string>
#include <vector>
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<stack>
#include<queue>
#include<cmath>
#include<algorithm>
#include<functional>
#include<list>
#include<deque>
#include<bitset>
#include<set>
#include<map>
#include<cstring>
#include<sstream>
#include<complex>
#include<iomanip>
#include<numeric>
#define X first
#define Y second
#define pb push_back
#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))
#define rrep(X,Y) for (int (X) = (Y-1);(X) >=0;--(X))
#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))
#define peat(X,Y) for (;(X) < (Y);++(X))
#define all(X) (X).begin(),(X).end()
#define rall(X) (X).rbegin(),(X).rend()
 
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"{"; rep(i,t.size()) {os<<t[i]<<",";} os<<"}"<<endl; return os;}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
typedef vector<vector<int> > Graph;
const int m=150;
const ll INF=1e11;
Graph g;
vector<ll> bestv,besti,nxt;
int n;

void dfs(int v,int p){
  int sum;
  if(p>=0 && g[v].size()==1){
    bestv[v]=besti[v]=1;
    nxt[v]=2;
    return;
  }
  if(p<0 && g[v].size()==0){
    bestv[v]=besti[v]=1;
    nxt[v]=2;
    return;
  }
  for(int vv:g[v])if(vv!=p)
    dfs(vv,v);
  for(int i=1;i<=m;i++){
    sum=i;
    for(int vv:g[v])if(vv!=p)
        sum+=(i==besti[vv]?nxt[vv]:bestv[vv]);
    if(sum<=bestv[v]){
      nxt[v]=bestv[v];
      bestv[v]=sum;
      besti[v]=i;
    }else if(sum<=nxt[v]){
      nxt[v]=sum;
    }
  }
}

int main(){
  ios_base::sync_with_stdio(false);
  cout<<fixed<<setprecision(0);
  int i,j,k,T,p;
  cin>>T;
  rep(t,T){
    cin>>n;
    g.clear();bestv.clear();besti.clear();nxt.clear();
    g.resize(n);bestv.resize(n,INF);besti.resize(n);nxt.resize(n,INF);
    rep(i,n){
      cin>>p;
      if(p){
        --p;
        g[p].pb(i);
        g[i].pb(p);
      }
    }
    dfs(0,-1);
    cout<<"Case #"<<t+1<<": "<<bestv[0]<<endl;
  }
  return 0;
}

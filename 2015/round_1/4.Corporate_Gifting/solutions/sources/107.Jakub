import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.LinkedList;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting {
    private Node nodes[];
    private int dp[][];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int N = in.nextInt();
        nodes = new Node[N + 1];
        for (int i = 0; i <= N; i++) nodes[i] = new Node(i);
        for (int i = 1; i <= N; i++) {
            int par = in.nextInt();
            nodes[par].children.add(nodes[i]);
        }

        dp = new int[N + 1][33];

        dfs(0);

        int min = Integer.MAX_VALUE;
        for (int i=1; i<=32; i++){
            min = Math.min(min, dp[1][i]);
        }
        out.println("Case #" + testNumber + ": " + min);
    }

    private void dfs(int id) {
        Node cur = nodes[id];

        if (cur.children.isEmpty()) {
            for (int i = 1; i <= 32; i++) {
                dp[id][i] = i;
            }
        } else {
            for (Node ch : nodes[id].children) {
                dfs(ch.id);
            }
            for (int i = 1; i <= 32; i++) {
                int sum = 0;
                for (Node ch : nodes[id].children) {
                    int min = Integer.MAX_VALUE;
                    for (int j = 1; j <= 32; j++) {
                        if (i == j) continue;
                        min = Math.min(min, dp[ch.id][j]);
                    }
                    sum += min;
                }
                dp[id][i] = sum + i;
            }

        }

    }

    private static class Node {
        private int id;
        private List<Node> children = new LinkedList<Node>();

        public Node(int id) {
            this.id = id;
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <list>
#include <queue>
using namespace std;

#define rep(i,N) for((i) = 0; (i) < (N); (i)++)
#define rab(i,a,b) for((i) = (a); (i) <= (b); (i)++)
#define Fi(N) rep(i,N)
#define Fj(N) rep(j,N)
#define Fk(N) rep(k,N)
#define sz(v) (v).size()
#define all(v) (v).begin(),(v).end()

#define MAX_V 100 

vector <int> child[200000];
int parent[200000];
int degree[200000];
int N;

int min_gift[200000][MAX_V];

vector <int> order;

int main() {
	int T,cs;
	int p,i,j,k,l;

	scanf("%d",&T);

	rab(cs,1,T) {
		scanf("%d",&N);

		Fi(N) {
			child[i].clear();
			degree[i] = 0;
			parent[i] = -1;
		}

		Fi(N) {
			scanf("%d",&p);

			if(p == 0) continue;
			p--;
			child[p].push_back(i);
			parent[i] = p;
			degree[p]++;
		}

		queue <int> q;

		Fi(N) {
			if(degree[i] == 0) q.push(i);
		}

		order.clear();

		while(!q.empty()) {
			int u = q.front();
			order.push_back(u);
			q.pop();

			degree[parent[u]]--;
			if(degree[parent[u]] == 0) q.push(parent[u]);
		}

		Fi(N)Fj(MAX_V) {
			int t = 1 << 30;
			int u = order[i];
			for(l = 0; l < MAX_V; l++) {
				if(l == j) continue;
				int c = l + 1;

				Fk(sz(child[u])) {
					c += min_gift[child[u][k]][l];
				}
				if(c < t) t = c;
			}

			min_gift[u][j] = t;
			//printf("[%d, %d] = %d\n",u,j,t);
		}

		int r = 1 << 30;

		Fj(MAX_V) if(min_gift[0][j] < r) r = min_gift[0][j];

		printf("Case #%d: %d\n",cs,r);
	}
	return 0;
}

package fb2015;

import java.io.*;
import java.util.*;

public class One4 {

	static 	int[] son = new int[200001],  bro = new int[200001], fat = new int[200001],
			ccol = new int[200001], ncol = new int[200001], 
			layer = new int[200001], sonNum = new int[200001], 
			fson = new int[200001];
	
	static long[] min = new long[200001],coladd = new long[200005], del = new long[200001];

	public static void main(String[] args) throws IOException, FileNotFoundException{
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream("other/fb2015/corporate_gifting.txt"))));
//		Scanner sc =new Scanner(System.in); PrintWriter ou = new PrintWriter(System.out);
		PrintWriter ou = new PrintWriter("other/fb2015/One4.txt");
		
		int res,rep,i,j,n,mlayer;
		ArrayList<ArrayList<Integer>> tr;
		ArrayList<Integer> t;
		
		res = sc.nextInt();
		for(rep=1;rep<=res;rep++) {
			
			n = sc.nextInt();
			Arrays.fill(son,0);
			Arrays.fill(sonNum,0);
			tr = new ArrayList<ArrayList<Integer>>();
					
			for(i=1;i<=n;i++) {
				bro[i] = i; tr.add(new ArrayList<Integer>());
				
				fat[i] = sc.nextInt();
				sonNum[fat[i]]++;
				
				if (son[fat[i]] == 0) {
					fson[fat[i]] = son[fat[i]] = i;
				}
				else {
					bro[fson[fat[i]]] = i;
					fson[fat[i]] = i;
				}
				
			}
			
//			for(i=1;i<=n;i++) System.out.println(sonNum[i]);
			
			Arrays.fill(layer,-1);
			layer[1] = 0;
			mlayer = -1;
			
			for(i=1;i<=n;i++) {
				layer[i] = findLayer(i);
				if (layer[i]>mlayer) mlayer = layer[i];
				
				t = tr.get(layer[i]);
				t.add(i);
	//			System.out.println(layer[i]+" "+mlayer);
			}
			
//			for(i=0;i<=mlayer;i++) System.out.println(tr.get(i));
			
			for(j=mlayer;j>=0;j--)
			{
//				System.out.println(j);
				t = tr.get(j);
				while(!t.isEmpty()) {
	//				System.out.println(t);
					
					int v = t.get(0),u;
					long mintot = 0;
				
					if (sonNum[v] == 0) {
					
						ccol[v] = 1;
						ncol[v] = 2;
						del[v] = 1;
						min[v] = 1;
					}
					else {
					
						for(i=1;i<=sonNum[v]+2;i++) coladd[i] = i;
					
						u = son[v];
						for(i=1;i<=sonNum[v];i++) {
							
							mintot += min[u];
							coladd[ccol[u]] += del[u];
//							System.out.println(v+" "+u+" "+mintot);
							u = bro[u];
						}
						
//						for(i=1;i<=sonNum[v]+2;i++) System.out.println(coladd[i]);
						long sum1, sum2; int col1, col2;
						sum1 = sum2 = 1000000000;
						col1 = col2 = 0;
					
						for(i=1;i<=sonNum[v]+2;i++) {
						
							if (coladd[i]<sum1) {
							
								col2 = col1;
								col1 = i;
								sum2 = sum1;
								sum1 = coladd[i];
							}
							else if (coladd[i]<sum2) {
								col2 = i;
								sum2 = coladd[i];
							}
						}
					
						min[v] = mintot + sum1;
//						System.out.println(min[v]);
						ccol[v] = col1;
						ncol[v] = col2;
						del[v] = sum2 - sum1;
					}
				
					t.remove(0);
				}
			}
			ou.printf("Case #%d: ",rep);
			ou.println(min[1]);
		}
		
		ou.close();
	}
	
	public static int findLayer(int node) {
		
		if (layer[node]!=-1) return layer[node];
		layer[node] = findLayer(fat[node]) + 1;
		return layer[node];
	}

}

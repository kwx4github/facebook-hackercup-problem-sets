from collections import deque
import sys
sys.setrecursionlimit(20000)
inputfile = open(__file__.replace('.py', '.txt'), 'r')
outputfile = open(__file__.replace('.py', '_result.txt'), 'w')

def readline():
  global inputfile
  return inputfile.readline().strip()
#
# managers = []
# childs = []
# presents = []
# N = 0

# def tree_tour(node):
#   global childs
#   global managers
#   global presents
#   global N
#
#   # relates
#   relates_present = []
#   for child in childs[node]:
#     relates_present.append(tree_tour(child))

#
#   print employee
#   return 1
  # set present
  for i in xrange(1, N+1):
    if i not in relates_present:
      presents[node] = i
      return i

  return 0

case_length = int(readline())
for case_num in xrange(case_length):
  N = int(readline())
  managers = map(lambda x: int(x), readline().split(' '))
  childs = [[] for i in xrange(N+1)]
  for employee, manager in enumerate(managers):
    childs[manager].append(employee+1)

  tree_q = deque()
  tree_stack = []
  tree_q.append(1)
  tree_stack.append(1)

  '''
  =================
  top-down level
  =================
  '''
  #presents = [0] * (N+1)
  while tree_q:
    node = tree_q.popleft()
    for child in childs[node]:
      tree_q.append(child)
      tree_stack.append(child)

    # # relates
    # relates_present = []
    # relates_present.append(presents[managers[node-1]])
    #
    # # set present
    # for i in xrange(1, N+1):
    #   if i not in relates_present:
    #     presents[node] = i
    #     break

  #topdown_level_sum = sum(presents)

  '''
  =================
  bottom-up level
  =================
  '''
  presents = [0] * (N+1)
  while tree_stack:
    node = tree_stack.pop()

    # relates
    relates_present = []
    for child in childs[node]:
      relates_present.append(presents[child])

    # set present
    for i in xrange(1, N+1):
      if i not in relates_present:
        presents[node] = i
        break

  bottomup_level_sum = sum(presents)

  '''
  =================
  left order
  =================
  '''
  # presents = [0] * (N+1)
  # tree_tour(1)
  # left_order_sum = sum(presents)


  print_string = "Case #%d: %d" % ((case_num+1), bottomup_level_sum)
  print print_string
  outputfile.write(print_string + "\n")

inputfile.close()
outputfile.close()
#include <algorithm>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int INF = 1234567890;
const int MAXN = 200000+2;
const int LIMIT = 20;
int dp[MAXN][LIMIT+1];
int solve(const vector<int> &tree) {
    int n = tree.size();
    vector<int> deg(n);
    vector<vector<int>> children(n);
    for (int i=1; i<n; ++i) {
        ++deg[tree[i]-1];
        children[tree[i]-1].push_back(i);
    }
    queue<int> Q;
    for (int i=0; i<n; ++i) {
        if (deg[i] == 0) Q.push(i);
    }
    vector<int> contribs(LIMIT+1);
    while (!Q.empty()) {
        int u = Q.front(); Q.pop();
        for (int val=1; val<=LIMIT; ++val) {
            contribs[val] = 0;
            for (int i=0; i<(int)children[u].size(); ++i) {
                contribs[val] += dp[children[u][i]][val];
            }
        }
        for (int forbid=(u!=0); forbid<=LIMIT; ++forbid) {
            dp[u][forbid] = INF;
            for (int val=1; val<=LIMIT; ++val) {
                if (val == forbid) continue;
                dp[u][forbid] = min(dp[u][forbid], val + contribs[val]);
            }
        }
        if (u>0 && --deg[tree[u]-1]==0) Q.push(tree[u]-1);
    }
    return dp[0][0];
}
int solve() {
    int n;
    cin >> n;
    vector<int> tree(n);
    for (int i=0; i<n; ++i) {
        cin >> tree[i];
    }
    return solve(tree);
}
int main() {
    int T;
    cin >> T;
    for (int i=1; i<=T; ++i) {
        int sol = solve();
        cout << "Case #" << i << ": " << sol << '\n';
        cerr << "Case #" << i << ": " << sol << '\n';
    }
}

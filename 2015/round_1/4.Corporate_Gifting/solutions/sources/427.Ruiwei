/*
 * Author:  xioumu
 * Created Time:  2015/1/19 0:14:02
 * File Name: D.cpp
 * solve: D.cpp
 */
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<iostream>
#include<vector>
#include<queue>

using namespace std;
#define sz(v) ((int)(v).size())
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define repf(i, a, b) for (int i = (a); i <= (b); ++i)
#define repd(i, a, b) for (int i = (a); i >= (b); --i)
#define clr(x) memset(x,0,sizeof(x))
#define clrs( x , y ) memset(x,y,sizeof(x))
#define out(x) printf(#x" %d\n", x)
#define sqr(x) ((x) * (x))
typedef long long lint;

const int maxint = -1u>>1;
const double eps = 1e-8;
const int maxn = 200000 + 10;
const int maxm = 50;

int sgn(const double &x) {  return (x > eps) - (x < -eps); }

vector<int> e[maxn], g[maxn];
int f[maxn][maxm + 10], du[maxn];
int n;
queue<int> que;

int min(int x, int y, int z) {
    return min(x, min(y, z));
}
int min(int x, int y, int z, int r) {
    return min(r, min(x, min(y, z)));
}

//void dfs(int w) {
    //printf("%d\n", w);
    //repf (i, 1, 3)
        //f[w][i] = i;
    //printf("%d\n", sz(e[w]));
    //rep (i, sz(e[w])) {
        //int j = e[w][i];
        //dfs(j);
        //repf (k, 1, 3) {
            //int res = maxint;
            //repf (r, 1, 3)
                //if (r != k) 
                    //res = min(res, f[j][r]);
            //f[w][k] += res;
        //}
    //}
//}

void bfs() {
    rep (i, n)
        if (du[i] == 0) 
            que.push(i);
    while (!que.empty()) {
        int w = que.front();
        //cout << w << endl;
        que.pop(); 
        repf (i, 1, maxm)
            f[w][i] = i;
        rep (i, sz(e[w])) {
            int j = e[w][i];
            repf (k, 1, maxm) {
                int res = maxint;
                repf (r, 1, maxm)
                    if (r != k) 
                        res = min(res, f[j][r]);
                f[w][k] += res;
            }
        }
        rep (i, sz(g[w])) {
            int j = g[w][i];
            du[j]--;
            if (du[j] == 0)
                que.push(j);
        }
    }
}

void add(int x, int y) {
    e[x].push_back(y);
    g[y].push_back(x);
    du[x]++;
}

int main() {
    freopen("D.out", "w", stdout);
    int T, ca = 1; 
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &n);
        rep (i, n) e[i].clear();
        rep (i, n) g[i].clear();
        clr(du);
        rep (i, n) {
            int x;
            scanf("%d", &x);
            if (i == 0) continue;
            x--;
            add(x, i);
            //printf("%d %d\n", i, x);
        }
        bfs();
        int ans = f[0][1];
        repf (i, 1, maxm) 
            ans = min(ans, f[0][i]);
        printf("Case #%d: %d\n", ca++, ans);
    }
    return 0;
}

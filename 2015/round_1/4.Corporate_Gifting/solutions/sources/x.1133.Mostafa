import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Solution {
	int N;
	int mngrs[];
	Employee roles[];

	public Solution(int n, int em[]) {
		N = n;
		mngrs = em;
		roles = new Employee[n + 1];
		for (int i = 1; i <= N; i++) {
			roles[i] = new Employee();
			roles[i].pos = i + 1;
		}
	}

	public static void main(String[] args) throws IOException {

		FileInputStream fis = new FileInputStream("corporate_gifting.txt");
		DataInputStream in = new DataInputStream(fis);
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		FileWriter fw = new FileWriter(new File("output.txt"));
		String line = br.readLine();
		int T = Integer.parseInt(line);

		for (int i = 0; i < T; i++) {
			line = br.readLine();
			int N = Integer.parseInt(line);
			line = br.readLine();
			String values[] = line.split(" ");
			int arr[] = new int[N + 1];
			for (int j = 0; j < N; j++) {
				arr[j + 1] = Integer.parseInt(values[j]);
			}
			Solution sol = new Solution(N, arr);
			System.out.println();
			fw.write("Case #" + (i + 1) + ": " + sol.getMinCost());
			if (i + 1 < T)
				fw.write("\n");
		}
		fw.flush();
	}

	// public int minCost(int employeeId, int gifts[]) {
	//
	// if (gift > N || employeeId >= N)
	// return 0;
	//
	// int choice1 = Integer.MAX_VALUE, choice2 = Integer.MAX_VALUE;
	//
	// if (gift == getManagerGift(employeeId, gifts))
	// return Integer.MAX_VALUE;
	//
	// gifts[employeeId] = gift;
	//
	// choice1 += gift + minCost(employeeId + 1, 1, gifts);
	// choice2 = minCost(employeeId, gift + 1, gifts) + minCost(employeeId + 1,
	// 1, gifts);
	//
	// return Math.min(choice1, choice2);
	// }

	// private int getSum(int gifts[]) {
	// int total = 0;
	// for (int i = 0; i < gifts.length; i++) {
	// total += gifts[i];
	// }
	// return total;
	// }

	// private int getManagerGift(int employeeId, int gifts[]) {
	// if (employeeId == 0)
	// return -1;
	// return gifts[mngrs[employeeId] - 1];
	// }

	public int getMinCost() {
		int total = 0;

		for (int i = 2; i < mngrs.length; i++) {
			roles[mngrs[i]].childs.add(i);
		}
		for (int i = roles.length - 1; i > 0; i--) {
			for (int j = 1; j <= N; j++) {
				if (roles[i].childs.isEmpty()) {
					roles[i].gift = 1;
					total += 1;
					break;
				}
				boolean valid = false;
				for (int k = 0; k < roles[i].childs.size(); k++) {
					valid = roles[roles[i].childs.get(k)].gift != j;
					if (!valid)
						break;
				}
				if (valid) {
					roles[i].gift = j;
					total += j;
					break;
				}
			}
		}
		return total;
	}

	class Employee {
		int pos;
		int gift = 0;
		ArrayList<Integer> childs = new ArrayList<Integer>();
	}
}

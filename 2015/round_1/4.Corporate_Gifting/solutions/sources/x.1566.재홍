#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

typedef long long LL;
const int MAX = 200000;
LL dyn[MAX][2];
int dyw[MAX];

int chcnt[MAX];
int N, pr[MAX];

int Q[MAX + 1], head;
vector<int> childs[MAX];
int main(){
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("corporate_gifting.out", "w", stdout);
	int T;
	scanf("%d", &T);
	while (T-- > 0) {
		LL sol = 0;
		memset(chcnt, 0, sizeof(chcnt));
		memset(dyn, 0, sizeof(dyn));
		memset(dyw, 0, sizeof(dyw));
		scanf("%d", &N);
		for (int i = 0; i < N; i++) {
			scanf("%d", &pr[i]);
			pr[i] --;
			chcnt[pr[i]] ++;
		}
		head = 0;
		for (int i = 0; i < N; i++) {
			if (chcnt[i] == 0) {
				Q[head++] = i;
			}
		}

		for (int i = 0; i < head; i++) {
			int v = Q[i];

			if (childs[v].size() == 0) { // leaf node
				dyn[v][0] = 1;
				dyn[v][1] = 2;
				dyw[v] = 1;
			}
			else {
				map<int, LL> mdif;
				vector<int> wv;
				LL dval = 0;
				for (int c : childs[v]) {
					dval += dyn[c][0];
					LL dif = dyn[c][1] - dyn[c][0];
					mdif[dyw[c]] += dif;
					wv.push_back(dyw[c]);
				}
				int ww = 1;
				sort(wv.begin(), wv.end());
				for (int w : wv) {
					if (w == ww) ww++;
				}

				dyn[v][0] = dval + ww;
				dyw[v] = ww;
				dyn[v][1] = -1;

				for (auto m : mdif) {
					int go = m.first;
					LL val = dval + m.second + go;

					if (dyn[v][0] > val) {
						dyn[v][1] = dyn[v][0];
						dyn[v][0] = val;
						dyw[v] = go;
					}
					else if (dyn[v][1] == -1 || dyn[v][1] > val) {
						dyn[v][1] = val;
					}
				}
			}
			if (v > 0) {
				int p = pr[v];
				childs[p].push_back(v);
				chcnt[p] --;
				if (chcnt[p] == 0) {
					Q[head++] = p;
				}
			}
		}
		sol = dyn[0][0];

		for (int i = 0; i < N; i++) childs[i].clear();
		static int cs = 1;
		printf("Case #%d: %lld\n", cs++, sol);
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;

#define PrintInt(n) printf("%lld",n)
#define ReadInt(n) scanf("%lld",&n)
#define LIM 200002
#define INF 99999999999

ll MinSum[LIM],RColor[LIM],Delta[LIM],NColor[LIM],ColorAdd[LIM+2];

int main()
{
	ll tc,n,p,t=0,tSize=0;
	ll ans=0;
	list <ll> rTree[LIM],Tree[LIM];
	ll inDeg[LIM];
	//cin>>tc;
	ReadInt(tc);
	while(tc--)
	{
		ReadInt(n);
		//cin>>n;
		for(ll i=0;i<=n;i++)
		{
			Tree[i].clear();
			rTree[i].clear();
		}
		for (ll i = 0; i <= n; ++i)
			inDeg[i]=0;
		for(ll i=1;i<=n;i++)
		{
			ReadInt(p);
			//cin>>p;
			if(i!=1)
			{
				rTree[i].push_back(p);
				Tree[p].push_back(i);
				inDeg[p]++;
			}
		}
		//Topo		Sort
		queue<ll> Deg0,Order;
		for(ll i=1;i<=n;i++)
			if(inDeg[i]==0)	
				Deg0.push(i);

		while(!Deg0.empty())
		{
			Order.push(Deg0.front());
			for(auto i=rTree[Deg0.front()].begin();i!=rTree[Deg0.front()].end();++i)
			{
				inDeg[*i]--;
				if(inDeg[*i]==0)
					Deg0.push(*i);
			}
			Deg0.pop();
		}
//	cout<<Order.size()<<endl;
		ll i=0;
	
		while(!Order.empty())
		{

			i=Order.front();
			//cout<<"i="<<i<<endl;
			if(Tree[i].size()==0)
			{
				MinSum[i]=1;
				RColor[i]=1;
				Delta[i]=1;
				NColor[i]=2;
			}
			else
			{
				auto son=Tree[i].begin();
				ll MinTotal=0;
				tSize = Tree[i].size();
				for(ll k=1;k<=tSize+2;k++)
				{
					ColorAdd[k]=k;
				}
				for(ll k=1;k<=tSize;k++)
				{
					MinTotal= MinTotal + MinSum[*son];
					ColorAdd[RColor[*son]]=ColorAdd[RColor[*son]] + Delta[*son];
					++son;
				}
				ll sum1=INF,sum2=INF,color2=0,color1=0;
				for(ll k=1;k<=tSize+2;k++)
				{
					ll value = ColorAdd[k];
					if(value<sum1)
					{
						color2 = color1;
						sum2 = sum1;
						color1 = k;
						sum1 = value;
					}
					else
					{
						if(value<sum2)
							{
								color2=k;
								sum2=value;
							}
					}
				}
				MinSum[i] = sum1 + MinTotal;
				RColor[ i ] = color1;
				Delta[ i ] = sum2 - sum1;
				NColor[ i ] = color2;
			}
			Order.pop();
		}
		cout<<"Case #"<<++t<<": "<<MinSum[1]<<endl; 		
	}
    return 0;
}


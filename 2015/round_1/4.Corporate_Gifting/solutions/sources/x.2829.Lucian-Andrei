#include <cstdio>
#include <vector>
#define DMAX 200004

using namespace std;

/*ifstream fin("data.in");
ofstream fout("data.out");*/
FILE*fin=fopen("data.in","r");
FILE*fout=fopen("data.out","w");

vector <int> T[DMAX];
int em[DMAX],level[DMAX];
int q[DMAX],di[DMAX];
short int p2[1030];
int cost[DMAX];
int n,lvl,first,last;

void read();
void make_tree();
void make_levels();
void q_init();
unsigned long long int gyff_me_result();
inline int putbit(int x,int poz);
inline int zeros(int x);
void clear_data();

int main()
{
//fin>>n;
int t,i;
fscanf(fin,"%d",&t);
for (i=0;i<=10;i++)
     p2[1<<i]=i;
for (i=1;i<=t;i++)
    {
     read();
     make_tree();
     make_levels();
     fprintf(fout,"Case #%d: %d\n",i,gyff_me_result());
     clear_data();
     //fout<<"Case #"<<i<<": "<<gyff_me_result()<<'\n';
    }
    return 0;
}

void read()
{
int i;
fscanf(fin,"%d",&n);
for (i=1;i<=n;i++) fscanf(fin,"%d",&em[i]);
}

void make_tree()
{
int i;
for (i=2;i<=n;i++)
    {T[em[i]].push_back(i);
     di[i]++;
    }
}

void make_levels()
{
int i,vf;
q_init();
while (first<=last)
       {
        vf=q[++first];
        for(i=0;i<T[vf].size();i++)
            {
             --di[ T[vf][i] ];
             if (di[ T[vf][i] ]==0)
                {
                 last++;
                 q[last]=T[vf][i];
                }
            }
       if (first==level[lvl])
          {
           lvl++;
           level[lvl]=last;
          }
       }
lvl--;
}

void q_init()
{
int i;
first=last=0;
for (i=1;i<=n;i++)
     if (di[i]==0)
          q[++last]=i;
level[1]=last;
lvl++;
}


unsigned long long int gyff_me_result()
{
int i,j,k,m,vf,ok,ok2;
long long int result=0;
for (i=lvl;i>=1;i--)
     for (j=level[i];j>=level[i-1]+1;j--)
        {
         vf=q[j];
         if (T[vf].size()==0) cost[vf]=1;
             else
             {
             ok=0;
             for (m=1;m<=n && ok==0;m++)
                  {
                  ok2=1;
                  for (k=0;k<T[vf].size();k++)
                       if (cost[T[vf][k]]==m)
                          {ok2=0; break;}
                  if (ok2==1) ok=1;
                  }
              cost[vf]=m-1;
             }
        }
for (i=1;i<=n;i++) result+=cost[i];
return result;
}


void clear_data()
{
int i;
for (i=1;i<=n;i++) T[i].clear();
lvl=0;
}

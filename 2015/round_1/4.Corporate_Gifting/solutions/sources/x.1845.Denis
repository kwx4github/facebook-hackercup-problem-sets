package org.denisg.facebook2015.round1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class ProblemD {

	public static void main(String[] args) throws FileNotFoundException {

		Scanner in = new Scanner(new File("input.txt"));
		PrintStream out = new PrintStream(new File("output.txt"));
		try {
			int t = in.nextInt();
			for (int i = 1; i <= t; i++) {
				int n = in.nextInt();
				int[] array = new int[n];
				for (int j = 0; j < n; j++) {
					array[j] = in.nextInt();
				}
				out.println("Case #" + i + ": " + solve(array));
			}
		} finally {
			in.close();
			out.close();
		}
	}

	private static class Tree {
		private Node root = new Node(1);
		private Map<Integer, Node> index = new HashMap<Integer, Node>();
		
		public Tree() {
			index.put(1, root);
		}

		public void add(int fromId, int toId) {
			Node node = index.get(fromId);
			if (node != null) {
				Node child = node.addChild(toId);
				index.put(toId, child);
			}
		}

		public int sum() {
			return root.sum();
		}
		
		public void process() {
			while (root.updateWeights()) {
			}
		}
		
		public String toString() {
			return root.toString();
		}
	}

	private static class Node {
		private int id;
		private int weight = 1;
		private List<Node> children;

		public Node(int id) {
			this.id = id;
		}

		public boolean updateWeights() {
			boolean updated = false;
			if (children != null) {
				for (Node child : children) {
					if (child.updateWeights()) {
						updated = true;
					}
				}
			}
			Set<Integer> relatedWeights = new HashSet<Integer>();
			if (children != null) {
				for (Node child : children) {
					relatedWeights.add(child.weight);
				}
			}
			for (int i = 1; i <= 200000; i++) {
				if (!relatedWeights.contains(i)) {
					if (weight != i) {
						updated = true;
					}
					weight = i;
					break;
				}
			}
			return updated;
		}
		
		public Node addChild(int id) {
			if (children == null) {
				children = new ArrayList<Node>();
			}
			Node child = new Node(id);
			children.add(child);
			return child;
		}

		public int sum() {
			int sum = weight;
			if (children != null) {
				for (Node child : children) {
					sum += child.sum();
				}
			}
			return sum;
		}

		private void internalToString(int shift, StringBuilder sb) {
			for (int i = 0; i < shift; i++) {
				sb.append("  ");
			}
			sb.append(weight).append("\n");
			if (children != null) {
				for (Node child : children) {
					child.internalToString(shift + 1, sb);
				}
			}
		}
		
		public String toString() {
			StringBuilder sb = new StringBuilder(); 
			internalToString(0, sb);
			return sb.toString();
		}
	}

	public static int solve(int[] array) {
		Tree tree = new Tree();
		for (int i = 1; i < array.length; i++) {
			int fromId = array[i];
			int toId = i + 1;
			tree.add(fromId, toId);
		}
		tree.process();
		return tree.sum();
	}

}

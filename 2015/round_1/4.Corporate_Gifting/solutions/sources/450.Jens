""" imports """
#pylint: disable=W0622
#pylint: disable=E0102
from __future__ import division
import glob, pickle, os, time, sys, argparse
from collections import defaultdict
from copy import copy
from numpy import array, sin, cos
import numpy as np
from pylab import *
from pprint import pprint

""" global variables """

""" classes """

""" functions """
def solve(N, parent_list):
    parent_list = [parent-1 for parent in parent_list] # convert from mgr id to list index

    print "getting child list"
    child_list = [set() for x in parent_list]
    for nodeindex, parentindex in enumerate(parent_list): # iterate through all except CEO
        if nodeindex == 0:
            continue
        child_list[parentindex].add(nodeindex)

    # get nodes_at_depth
    print "getting nodes_at_depth"
    nodes_at_depth = defaultdict(set)
    nodes_to_depth = [0]*N
    node_indices_to_check = set([0])
    while node_indices_to_check:
        nodeindex = node_indices_to_check.pop()
        nodedepth = nodes_to_depth[nodeindex]
        nodes_at_depth[nodedepth].add(nodeindex)
        for child in child_list[nodeindex]:
            node_indices_to_check.add(child)
            nodes_to_depth[child] = nodedepth + 1

    # get depths_inverse
    depths_inverse = sorted(nodes_at_depth.keys(), reverse=True)

    # actual algorithm
    result = float('inf')
    for K in range(2, N): # K = max money to be spent by one node

        print "running alogirthm for K=", K
        costs_list = [None for x in parent_list]
        for depth in depths_inverse:
            for node in nodes_at_depth[depth]:
                costs = [0]*K
                for i in range(K):
                    this_cost = i+1
                    child_cost = sum(min(c for ii, c in enumerate(costs_list[child]) if ii != i) for child in child_list[node])
                    costs[i] = this_cost + child_cost
                costs_list[node] = costs
        new_result = min(costs_list[0])

        assert new_result <= result
        if new_result == result:
            print "Optimal K = ", K-1
            break
        result = new_result

    return result


def main():
    ### parse input ###
    ## parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", default="default.in", nargs='?')
    parser.add_argument("-t", "--test", action="store_true")
    parser.add_argument("-l", "--lazytest", action="store_true")
    args = parser.parse_args()
    output = ""
    TIC = time.time()

    ## read input lines
    input_lines = open(args.filename).readlines()
    def read_line():
        return input_lines.pop(0).strip()
    def read_ints():
        return [int(x) for x in read_line().split(' ')]
    def read_floats():
        return [float(x) for x in read_line().split(' ')]
    (numquestions,) = read_ints()
    for questionindex in xrange(numquestions):
        ### parse input ###
        N, = read_ints()
        mgr_list = read_ints()
        assert len(mgr_list) == N

        ### calculate answer ###
        answer = solve(N, mgr_list)
        assert answer != None

        ### output ###
        #print "Calculating case #{}...".format(questionindex+1)
        answer_str = "Case #{}: {}".format(questionindex+1, answer)
        output += answer_str + '\n'
        print answer_str

    ## write output
    ofile = open('output', 'w').write(output)
    TOC = time.time()
    print "done in {} s".format(TOC-TIC)


    ### test ###
    if args.test:
        def filter_extension(filename):
            filename_parts = filename.split('.')
            if len(filename_parts) > 1:
                filename_parts = filename_parts[:-1]
            return '.'.join(filename_parts)

        print
        print "== TESTING VALIDITY =="

        try:
            # check if all input was used
            assert not len([l for l in input_lines if l.strip()]), "Not all input was used"

            # filter extension of filename
            filename_without_extension = filter_extension(args.filename)

            # get calculated and correct lines
            calculated_lines = [l.strip() for l in output.split('\n') if l.strip()]
            correct_lines = [l.strip() for l in open("{}.out".format(filename_without_extension)).readlines() if l.strip()]

            # check if number of lines match
            assert len(correct_lines) == len(calculated_lines), "calculated {} lines but expected {}".format(len(calculated_lines), \
                                                                len(correct_lines))

            # apply lazytest: filter away test numer
            unfiltered_calculated_lines = calculated_lines
            unfiltered_correct_lines = correct_lines
            if args.lazytest:
                def filter_test_number(line):
                    if line.startswith("Case #"):
                        parts = line.split('#')
                        parts[1] = parts[1][parts[1].index(':'):]
                        return '#'.join(parts)
                    else:
                        return line
                calculated_lines = [filter_test_number(l) for l in calculated_lines]
                correct_lines = [filter_test_number(l) for l in correct_lines]

            # get lines that don't match
            incorrect_line_numbers = []
            for line_number, (correct_line, calculated_line) in enumerate(zip(correct_lines, calculated_lines)):
                if correct_line != calculated_line:
                    incorrect_line_numbers.append(line_number)
            if len(incorrect_line_numbers):
                error_msg = "\n"
                for line_number in incorrect_line_numbers:
                    error_msg += '    "{}"  should be  "{}"\n'.format(unfiltered_calculated_lines[line_number],
                                                                      unfiltered_correct_lines[line_number])
                raise AssertionError(error_msg)

            print "SUCCESS"

        except AssertionError as ex:
            print "\nFAILED:"
            print str(ex)
        print


if __name__ == '__main__':
    main()

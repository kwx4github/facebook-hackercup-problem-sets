#include <cstdio>
#include <iostream>
#include <memory.h>
#include <unordered_set>
#include <vector>

#define _DEBUG

using namespace std;

int N;
vector<int> G[200010];
int seen[200010];

void init() {
    for (int i = 0; i < 200010; i++) G[i].clear();
}

// {sum, cost} pair
pair<long long,long long> DFS(int u) {
    seen[u] = 1;
    unordered_set<int> used;
    int numchild = 0;
    long long sum = 0;
    for (int v: G[u]) {
        if (seen[v]) continue;
        numchild++;
        pair<int,int> res = DFS(v);
        sum += res.first;
        used.insert(res.second);
    }
    if (!numchild) return {1, 1};
    int next = 1;
    while (1) {
        if (used.count(next)) next++;
        else break;
    }
    return {sum+next, next};
}

long long solve() {
    memset(seen, 0, sizeof(seen));
    return DFS(1).first;
}

int main() {
#ifdef _DEBUG
    freopen("corporate_gifting.txt", "r", stdin);
#endif
    int T; scanf("%d", &T);
    for (int t = 1; t <= T; t++) {
        init();
        scanf("%d", &N);
        for (int i = 1; i <= N; i++) {
            int parent;
            scanf("%d", &parent);
            if (parent == 0) continue;
            G[i].push_back(parent);
            G[parent].push_back(i);
        }
        long long ans = solve();
        printf("Case #%d: %lld\n", t, ans);
    }
    return 0;
}
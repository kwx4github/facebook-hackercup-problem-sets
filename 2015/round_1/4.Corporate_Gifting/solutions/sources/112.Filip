/* Written by Filip Hlasek 2015 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstring>

#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define REP(i,b) for(int i=0;i<(b);i++)

using namespace std;

#define MAXN 222222
#define LOG 22
vector<int> graph[MAXN];
int N;

int dp[MAXN][LOG];

int solve(int v, int col) {
  if (dp[v][col] != -1) return dp[v][col];
  int ans = col;
  REP(i, graph[v].size()) {
    int best = MAXN * LOG;
    FOR(col2, 1, LOG - 1) if (col2 != col) {
      int tmp = solve(graph[v][i], col2);
      if (tmp < best) {
        if (col2 > 20) fprintf(stderr, "OMG!!! v: %d col2: %d\n", v, col2);
        best = tmp;
      }
    }
    ans += best;
  }
  return dp[v][col] = ans;
}

int main(int argc, char *argv[]) {
  int T;
  scanf("%d", &T);
  REP(t, T) {
    fprintf(stderr, "t: %d\n", t);
    scanf("%d", &N);
    REP(i, N) graph[i].clear();
    REP(i, N) REP(j, LOG) dp[i][j] = -1;
    REP(i, N) {
      int f;
      scanf("%d", &f);
      if (i) graph[f - 1].push_back(i);
    }
    int ans = MAXN * LOG;
    FOR(i, 1, LOG - 1) ans = min(ans, solve(0, i));
    printf("Case #%d: %d\n", t + 1, ans);
  }
  return 0;
}

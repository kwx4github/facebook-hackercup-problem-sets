#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <sys/resource.h>
#include <algorithm>
using namespace std;
#define dprint(v) cerr << #v"=" << v << endl //;)
#define forr(i,a,b) for(int i=(a); i<(b); i++)
#define forn(i,n) forr(i,0,n)
#define dforn(i,n) for(int i=n-1; i>=0; i--)
#define forall(it,v) for(typeof(v.begin()) it=v.begin();it!=v.end();++it)
#define sz(c) ((int)c.size())
#define zero(v) memset(v, 0, sizeof(v))
#define pb push_back
#define fst first
#define snd second
typedef long long ll;
typedef pair<int,int> ii;
#define MAXN 200001
#define INF 1 << 30


vector<int> G[MAXN];
int p[MAXN];


int dp[MAXN][50];
int dfs(int v, int c, int p=0){
	if(dp[v][c]!=-1) return dp[v][c];
	int &k=dp[v][c]=c+1;
	forall(it, G[v])if(p!=*it){
		int m = INF;
		forn(i, 50) if(i!=c) m=min(m, dfs(*it, i, v));
		k+=m; 
	}
	return k;
}

int main() {
	const rlim_t kStackSize = 170 * 1024 * 1024;   // min stack size = 170 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
	freopen("corporate_gifting.txt", "r", stdin);
	//~ freopen("b.in", "r", stdin);
	freopen("d.out", "w", stdout);
	int t, n; 
	
	cin >> t;
	forn(j, t){
		zero(G);
		//~ dprint(tt);
		memset(dp, -1, sizeof(dp));
		cin >> n;
		int maxcol=50;
		int seo=-1;
		forn(i, n){
			cin >> p[i+1];
			if(p[i+1]==0) seo=i+1;
			G[i+1].pb(p[i+1]);
			G[p[i+1]].pb(i+1);
		}
		int m=INF;
		forn(i, maxcol) m=min(m, dfs(seo, i));
		cout << "Case #" << j+1 << ": " << m << endl;
	}
	return 0;
}

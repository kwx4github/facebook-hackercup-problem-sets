#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<stdlib.h>
#include<time.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

int ___INT(){ int ret; scanf("%d",&ret); return ret; }
#define INT ___INT()

typedef long long LL;
typedef pair<int,int> pii;

#define MAX_NODES 200005
const int INF = (1<<29);
int dp[MAX_NODES][21];
int N;

vector<int> adj[MAX_NODES];

// assumption: N >= 2
// u 	=> root of the subtree
// used => color of the parent of u
int F(int u, int used) {
	int& ret = dp[u][used];
	if(ret>-1)return ret;
	ret = INF;	
	
	// if the max color is K, you need at least (2^(K-1)) nodes (so, 19 is good enough)
	for (int uColor = 1; uColor <= N && uColor <= 19; ++uColor) if (uColor != used) {
		int total = uColor;
		for (int i = 0; i < adj[u].size(); ++i) {
			int v = adj[u][i];
			total += F(v, uColor);	
		}
		ret = min(ret, total);
	}

	return ret;
}

void read_input() {
	N=INT;
	REP(u,1,N)adj[u].clear();
	REP(u,1,N){
		int par=INT;
		//int par=u-1;
		if(u>1) adj[par].push_back(u);
	}

	queue<int> Q;
	Q.push(1);	
	
	vector<int> V;
	while(Q.empty()==false){
		int u=Q.front();		
		V.push_back(u);
		Q.pop();
		FOR(i,adj[u].size()){
			int v=adj[u][i];
			Q.push(v);	
		}
	}
	
	for (int i = int(V.size())-1; i >= 0; --i){
		int u=V[i];
		for (int c=1;c<=19 && c<=N;++c){
			F(u,c);	
		}
	}
}

int main() {
	int T=INT;
	REP(t,1,T){
		CLR(dp,-1);		
		read_input();
		
		printf("Case #%d: %d\n", t, F(1,0));

	}
	return 0;
}

#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <utility>
#include <algorithm>
#include <set>

using namespace std;

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int N;
    cin >> N;
    unordered_map<int, set<int> > hier;
    unordered_map<int, set<int> > ehier;
    vector<int> sup(N+1);
    for (int i = 0; i < N; ++i) {
      int m;
      cin >> m;
      sup[i+1] = m;
      hier[m].insert(i+1);
    }

    vector<int> color(N+1);
    
    queue<int> q;

    for (int i = 1; i <= N; ++i)
      if (hier[i].size() == 0)
        q.push(i);


    while (!q.empty()) {
      int e = q.front();
      q.pop();
  
      {
        set<int> cc;
        for (int c : hier[e])
          cc.insert(color[c]);
        int next = 0;
        for (auto a : cc) {
          if (a > next) break;
          next++;
        }
        color[e] = next;


      }

      ehier[sup[e]].insert(e);
      if (hier[sup[e]].size() == ehier[sup[e]].size()) {
        q.push(sup[e]);
      }

    }

    vector<int> cc(N);
    for (int i = 1; i <= N; ++i)
      cc[color[i]]++;

    sort(cc.begin(), cc.end(), greater<int>());
    int multip = 1;
    long long result = 0;
    for (int ccc : cc)
      result += ccc*multip++;

    cout << "Case #" << t << ": " << result << endl;
  }

}


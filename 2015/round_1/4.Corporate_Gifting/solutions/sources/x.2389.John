#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

constexpr int SIZE = 200000;

vector<int> child[SIZE];
int best[SIZE], cost[SIZE], subcost[SIZE];

void dfs(int x) {
    if(child[x].empty()) {
        best[x] = 1;
        cost[x] = 1;
        subcost[x] = 2;
        return;
    }
    int base = 0;
    vector<int> v;
    for(int i : child[x]) {
        dfs(i);
        if(best[i] >= (int) v.size())
            v.resize(best[i] + 1);
        base += cost[i];
        v[best[i]] += subcost[i] - cost[i];
    }
    best[x] = v.size();
    cost[x] = base + best[x];
    subcost[x] = cost[x] + 1;
    for(int i = 1; i < (int) v.size(); i++) {
        if(base + i + v[i] <= cost[x]) {
            subcost[x] = cost[x];
            cost[x] = base + i + v[i];
            best[x] = i;
        }
    }
}

int solve(int n) {
    scanf("%*d"); // 0
    for(int i = 1; i < n; i++) {
        int p;
        scanf("%d", &p);
        child[p - 1].push_back(i);
    }
    dfs(0);
    return cost[0];
}

void clear_up(int n) {
    for(int i = 0; i < n; i++) {
        child[i].clear();
        best[i] = cost[i] = subcost[i] = 0;
    }
}

int main(){
    int t;
    scanf("%d", &t);
    for(int i = 1; i <= t; i++) {
        int n;
        scanf("%d", &n);
        printf("Case #%d: %d\n", i, solve(n));
        clear_up(n);
    }
}

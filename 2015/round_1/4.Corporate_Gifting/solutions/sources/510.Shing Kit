#include <cstdio>
#include <cstring>

#define N 200005
#define M 50

struct Edge {
	int u, v, next;
} edge[N];

int en, idd;
int p[N], head[N], lv[N], id[N], pid[N], dp[N][M], mn1[N], mn2[N];

inline int min(int a, int b) {
	return a < b ? a : b;
}

void init() {
	en = idd = 0;
	memset(head, 0xff, sizeof head);
	memset(lv, 0, sizeof lv);
	memset(mn1, 0xff, sizeof mn1);
	memset(mn2, 0xff, sizeof mn2);
}

void add_edge(int u, int v) {
	edge[en].u = u;
	edge[en].v = v;
	edge[en].next = head[u];
	head[u] = en++;
}

void dfs(int u) {
	for (int id = head[u]; id != -1; id = edge[id].next) {
		int v = edge[id].v;
		dfs(v);
	}
	id[u] = ++idd;
	pid[idd] = u;
}

void run(int case_no) {
	int u, v, n, ans = 0x7fffffff;

	init();

	scanf("%d", &n);
	for (u = 1; u <= n; u++) {
		scanf("%d", &v);
		p[u] = v;
		add_edge(v, u);
	}
	dfs(1);

	for (int id = 1; id <= n; id++) {
		u = pid[id];
		for (int x = 1; x < M; x++) {
			int sum = 0;
			for (int id = head[u]; id != -1; id = edge[id].next) {
				v = edge[id].v;
				int mn = -1;
				if (mn1[v] != -1 && mn1[v] != x)
					mn = dp[v][mn1[v]];
				else if (mn2[v] != -1)
					mn = dp[v][mn2[v]];
				sum += mn;
			}
			dp[u][x] = sum + x;

			if (mn1[u] == -1)
				mn1[u] = x;
			else if (dp[u][x] < dp[u][mn1[u]]) {
				mn2[u] = mn1[u];
				mn1[u] = x;
			}
			else if (mn2[u] == -1)
				mn2[u] = x;
			else if (dp[u][x] < dp[u][mn2[u]])
				mn2[u] = x;
		}
	}

	for (int x = 1; x < M; x++)
		ans = min(ans, dp[1][x]);

	printf("Case #%d: %d\n", case_no, ans);
}

int main() {
	int t;

	scanf("%d", &t);
	for (int case_no = 1; case_no <= t; case_no++)
		run(case_no);

	return 0;
}
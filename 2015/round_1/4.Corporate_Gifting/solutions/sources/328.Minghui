// recursive dfs needs more stack space: java -Xss64m

import java.io.*;
import java.util.*;

class Corporate_Gifting {
	static final int K = 18;
	static class Employee {
		static int[] min_ = new int[K];
		static int[] _min = new int[K];
		static int[] min = new int[K];
		int[] cost = new int[K];
		Employee manager;
		List<Employee> subordinates = new LinkedList<Employee>();
		void dfs() {
			for (Employee e : subordinates)
				e.dfs();
			for (int j = 0; j < K; j++)
				cost[j] += j + 1;
			if (manager == null)
				return;
			_min[0] = cost[0];
			for (int j = 1; j < K; j++)
				_min[j] = Math.min(_min[j - 1], cost[j]);
			min_[K - 1] = cost[K - 1];
			for (int j = K - 2; j >= 0; j--)
				min_[j] = Math.min(min_[j + 1], cost[j]);
			min[0] = min_[1];
			min[K - 1] = _min[K - 2];
			for (int j = 1; j < K - 1; j++)
				min[j] = Math.min(_min[j - 1], min_[j + 1]);
			for (int j = 0; j < K; j++)
				manager.cost[j] += min[j];
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(System.out);
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			int n = Integer.parseInt(br.readLine());
			String[] ss = br.readLine().split(" ");
			int[] aa = new int[n];
			Employee[] ee = new Employee[n];
			for (int i = 0; i < n; i++) {
				aa[i] = Integer.parseInt(ss[i]);
				ee[i] = new Employee();
			}
			for (int i = 1; i < n; i++) {
				ee[i].manager = ee[aa[i] - 1];
				ee[aa[i] - 1].subordinates.add(ee[i]);
			}
			ee[0].dfs();
			int min = n * K;
			for (int j = 0; j < K; j++)
				if (ee[0].cost[j] < min)
					min = ee[0].cost[j];
			pw.println("Case #" + t + ": " + min);
		}
		pw.close();
	}
}

#include<bits/stdc++.h>
using namespace std;

#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

#define mygc(c) (c)=getchar_unlocked()
#define mypc(c) putchar_unlocked(c)

#define ll long long
#define ull unsigned ll

void reader(int *x){int k,m=0;*x=0;for(;;){mygc(k);if(k=='-'){m=1;break;}if('0'<=k&&k<='9'){*x=k-'0';break;}}for(;;){mygc(k);if(k<'0'||k>'9')break;*x=(*x)*10+k-'0';}if(m)(*x)=-(*x);}
void reader(ll *x){int k,m=0;*x=0;for(;;){mygc(k);if(k=='-'){m=1;break;}if('0'<=k&&k<='9'){*x=k-'0';break;}}for(;;){mygc(k);if(k<'0'||k>'9')break;*x=(*x)*10+k-'0';}if(m)(*x)=-(*x);}
int reader(char c[]){int i,s=0;for(;;){mygc(i);if(i!=' '&&i!='\n'&&i!='\r'&&i!='\t'&&i!=EOF) break;}c[s++]=i;for(;;){mygc(i);if(i==' '||i=='\n'||i=='\r'||i=='\t'||i==EOF) break;c[s++]=i;}c[s]='\0';return s;}
template <class T, class S> void reader(T *x, S *y){reader(x);reader(y);}
template <class T, class S, class U> void reader(T *x, S *y, U *z){reader(x);reader(y);reader(z);}
template <class T, class S, class U, class V> void reader(T *x, S *y, U *z, V *w){reader(x);reader(y);reader(z);reader(w);}

void writer(int x, char c){int s=0,m=0;char f[10];if(x<0)m=1,x=-x;while(x)f[s++]=x%10,x/=10;if(!s)f[s++]=0;if(m)mypc('-');while(s--)mypc(f[s]+'0');mypc(c);}
void writer(ll x, char c){int s=0,m=0;char f[20];if(x<0)m=1,x=-x;while(x)f[s++]=x%10,x/=10;if(!s)f[s++]=0;if(m)mypc('-');while(s--)mypc(f[s]+'0');mypc(c);}
void writer(const char c[]){int i;for(i=0;c[i]!='\0';i++)mypc(c[i]);}
void writer(const char x[], char c){int i;for(i=0;x[i]!='\0';i++)mypc(x[i]);mypc(c);}
template<class T> void writerLn(T x){writer(x,'\n');}
template<class T, class S> void writerLn(T x, S y){writer(x,' ');writer(y,'\n');}
template<class T, class S, class U> void writerLn(T x, S y, U z){writer(x,' ');writer(y,' ');writer(z,'\n');}
template<class T> void writerArr(T x[], int n){int i;if(!n){mypc('\n');return;}rep(i,n-1)writer(x[i],' ');writer(x[n-1],'\n');}

char memarr[77000000]; void *mem = memarr;

void* setUndirectEdge(int N, int M, int A[], int B[], int **es, int ***edge, void *workMemory){int i;*es=(int*)workMemory;*edge=(int**)((*es)+N);(*edge)[0]=(int*)((*edge)+N);rep(i,N)(*es)[i]=0;rep(i,M)(*es)[A[i]]++,(*es)[B[i]]++;REP(i,1,N)(*edge)[i]=(*edge)[i-1]+(*es)[i-1];workMemory=(void*)((*edge)[N-1]+(*es)[N-1]);rep(i,N)(*es)[i]=0;rep(i,M)(*edge)[A[i]][(*es)[A[i]]++]=B[i],(*edge)[B[i]][(*es)[B[i]]++]=A[i];return workMemory;}

#define INF 1000000000000000000LL

int N;
int *es, **edge;
int A[222222], B[222222];

ll dp[222222][2]; int val[222222][2];

int las[222222];

void solve(int node, int bef){
  int i, j, k, nw;
  int mx;
  ll tmp;

  rep(i,es[node]){
    k = edge[node][i];
    if(k==bef) continue;
    solve(k, node);
  }

  rep(i,es[node]){
    k = edge[node][i];
    if(k==bef) continue;
    las[val[k][0]] = node;
    las[val[k][1]] = node;
  }

  mx = 1;
  while(las[mx] == node) mx++;
  mx = max(2, mx);

  dp[node][0] = dp[node][1] = INF;
  val[node][0] = val[node][1] = 0;
  REP(nw, 1, mx+1){
    tmp = nw;
    rep(i,es[node]){
      k = edge[node][i];
      if(k==bef) continue;
      if(val[k][0]==nw) tmp += dp[k][1]; else tmp += dp[k][0];
    }
    if(dp[node][1] > tmp){
      dp[node][1] = tmp, val[node][1] = nw;
      if(dp[node][0] > dp[node][1]){
        swap(dp[node][0], dp[node][1]);
        swap(val[node][0], val[node][1]);
      }
    }
  }

  //printf("node %d: val %d res %lld, val %d res %lld\n",node,val[node][0],dp[node][0],val[node][1],dp[node][1]);
}

int main(){
  int i, j, k;
  int T, C = 0;
  void *memm;

  reader(&T);
  while(T--){
    fprintf(stderr,"rest %d\n",T);
    printf("Case #%d: ", ++C);

    memm = mem;
    reader(&N);
    rep(i,N){
      reader(&j);
      if(i) A[i-1] = i, B[i-1] = j-1;
    }
    memm = setUndirectEdge(N, N-1, A, B, &es, &edge, memm);

    rep(i,N+1) las[i] = -1;
    solve(0, -1);
    writerLn(dp[0][0]);
  }

  return 0;
}

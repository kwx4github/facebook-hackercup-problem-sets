using System;
using System.Collections.Generic;
using System.Linq;

class Myon
{
    public Myon() { }
    public static void Main()
    {
        new Myon().run2();
    }

    Scanner cin;
    public void run2()
    {
        init();
        cin = new Scanner();
        int T = cin.nextInt();
        for (int i = 0; i < T; i++)
        {
            Console.Write("Case #{0}: ", i + 1);

            run();
        }
    }


    void init()
    {
    }

    List<int>[] es;

    void run()
    {
        int N = cin.nextInt();
        int[] parent = new int[N];
        for (int i = 0; i < N; i++)
        {
            parent[i] = cin.nextInt() - 1;
        }

        es = new List<int>[N];
        for (int i = 0; i < N; i++)
        {
            es[i] = new List<int>();
        }

        int[] child = new int[N];
        for (int i = 0; i < N; i++)
        {
            if (parent[i] != -1)
            {
                child[parent[i]]++;
                es[parent[i]].Add(i);
            }
        }

        Queue<int> q = new Queue<int>();
        for (int i = 0; i < N; i++)
        {
            if (child[i] == 0) q.Enqueue(i);
        }


        int MAX = 30;
        int[,] dp = new int[N, MAX];

        int[] minnum = new int[N];
        int[] minret = new int[N];
        int[] secondret = new int[N];

        while (q.Count != 0)
        {
            int now = q.Dequeue();

            minnum[now] = -1;
            minret[now] = 99999999;
            secondret[now] = 99999999;

            for (int i = 0; i < MAX; i++)
            {
                int r = i + 1;
                foreach (var ch in es[now])
                {
                    if (minnum[ch] == i) r += secondret[ch];
                    else r += minret[ch];
                }

                if (r < minret[now])
                {
                    secondret[now] = minret[now];
                    minret[now] = r;
                    minnum[now] = i;
                }
                else if (r < secondret[now])
                {
                    secondret[now] = r;
                }
            }

            if (parent[now] != -1)
            {
                int p = parent[now];
                child[p]--;
                if (child[p] == 0) q.Enqueue(p);
            }
        }

        int ret = 0;
        for (int i = 0; i < N; i++)
        {
            if (parent[i] == -1) ret += minret[i];
        }

        Console.WriteLine(ret);
        
    }



}

class Scanner
{
    string[] s;
    int i;

    char[] cs = new char[] { ' ' };

    public Scanner()
    {
        s = new string[0];
        i = 0;
    }

    public string next()
    {
        if (i < s.Length) return s[i++];
        string st = Console.ReadLine();
        while (st == "") st = Console.ReadLine();
        s = st.Split(cs, StringSplitOptions.RemoveEmptyEntries);
        i = 0;
        return s[i++];
    }

    public int nextInt()
    {
        return int.Parse(next());
    }

    public long nextLong()
    {
        return long.Parse(next());
    }

    public double nextDouble()
    {
        return double.Parse(next());
    }

}

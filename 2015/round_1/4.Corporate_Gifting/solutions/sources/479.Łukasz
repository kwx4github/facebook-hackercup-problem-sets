#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
#include <gmpxx.h>			// -lgmpxx -lgmp
using namespace std ;
using namespace __gnu_cxx ;
typedef mpz_class BIGNUM ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1e9+100 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

template<class T1,class T2> ostream& operator<<(ostream &s, const pair<T1,T2> &x) { s<< "(" << x.FI << "," << x.SE << ")"; return s;}
template<class T>           ostream& operator<<(ostream &s, const vector<T>   &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T>           ostream& operator<<(ostream &s, const set<T>      &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T1,class T2> ostream& operator<<(ostream &s, const map<T1, T2> &t) { FOREACH(it, t) s << *it << " " ; return s ; }

///////////////////////////////////////////

const int MAXN = 200100 ;

VI graf[MAXN] ;
pair<LL, int> cost[MAXN][2] ;
VI post ;

void DFS(int u) {
	FOREACH(it, graf[u])
		DFS(*it) ;
	post.PB(u) ;
}

void calc(int u) {
	map<int, LL> diff ;
	LL s=0 ;
	FOREACH(it, graf[u]) {
		s += cost[*it][0].FI ;
		diff[cost[*it][0].SE] += cost[*it][1].FI - cost[*it][0].FI ;
	}
	vector<pair<LL, int> > cands ;
	for(int i=1 ; cands.size()<2 ; i++)
		if(diff.find(i) == diff.end())
			cands.PB(MP(s+i, i)) ;
	FOREACH(it, diff) {
		cands.PB(MP(it->FI + s + it->SE, it->FI)) ;
		assert(cands.size()==3) ;
		sort(ALL(cands)) ;
		cands.pop_back() ;
	}
	cost[u][0] = cands[0] ;
	cost[u][1] = cands[1] ;
	
	//cout << u << ")" << cost[u][0] << " " << cost[u][1] << endl ;
}

void _main() {
	int n, i, a ;
	cin >> n ;
	for(i=1 ; i<=n ; i++)
		graf[i].clear() ;
	for(i=1 ; i<=n ; i++) {
		cin >> a ;
		if(i>1) graf[a].PB(i) ;
	}
	post.clear() ;
	DFS(1) ;
	//cout << "post: " << post << endl ;
	FOREACH(it, post) calc(*it) ;
	cout << cost[1][0].FI << endl ;
}

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0) ;
	int Tests ;
	cin >> Tests ;
	for(int test=1 ; test<=Tests ; test++) {
		cerr << "Case #" << test << endl ;
		cout << "Case #" << test << ": " ;
		_main() ;
	}
}


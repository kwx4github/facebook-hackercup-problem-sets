#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;

vector< vector<ll> > price;
vector<int> parent;
vector< vector<int> > child;
vector<int> num;
queue<int> q;
int t, n, a;
ll res;
const int P = 20;

long long cmin(int v, int x) {
    long long m = ((ll)n)*(n+1);
    for (int i = 0; i < P; ++i) {
        if ((i != x) && (price[i][v] < m)) m = price[i][v];
    }
    return m;
}

long long doit() {
    cin >> n;
    child.resize(n, vector<int>());
    price.resize(P, vector<ll>(n, 0));
    parent.resize(n, -1);
    num.resize(n, -1);
    for (int i = 0; i < n; ++i) {
        cin >> a;
        --a;
        parent[i] = a;
        if (a >= 0) child[a].push_back(i);
    }
    for (int i = 0; i < n; ++i) {
        num[i] = child[i].size();
        if (child[i].size() == 0) q.push(i);
    }
    while (!(q.empty())) {
        a = q.front();
        q.pop();
        if (child[a].size() == 0) {
            for (int i = 0; i < P; ++i) price[i][a] = i+1;
        } else {
            for (int i = 0; i < P; ++i) {
                for (int j = 0; j < child[a].size(); ++j) {
                    price[i][a] += cmin(child[a][j], i);
                }
                price[i][a] += i+1;
            }
        }
        if (parent[a] != -1) {
            --num[parent[a]];
            if (num[parent[a]] == 0) q.push(parent[a]);
        }
    }
    res = ((long long)n)*(n+1);
    for (int i = 0; i < P; ++i) {
        if (price[i][0] < res) res = price[i][0];
    }
    
    for (int i = 0; i < P; ++i) price[i].clear();
    price.clear();
    for (int i = 0; i < n; ++i) child[i].clear();
    child.clear();
    parent.clear();
    
    return res;
}

int main() {
    cin >> t;
    for (int i = 0; i < t; ++i) {
        cout << "Case #" << i+1 << ": " << doit() << endl;
    }
}
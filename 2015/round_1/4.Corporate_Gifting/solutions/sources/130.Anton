import java.util.*;
import java.io.*;

public class D {
	FastScanner in;
	PrintWriter out;

	final int MAX = 100;

	class Node {
		int id;
		int[] d = new int[MAX];
		List<Node> to = new ArrayList<Node>();

		public Node(int id) {
			this.id = id;
			Arrays.fill(d, Integer.MAX_VALUE);
		}
	}

	public void solve() throws IOException {
		int n = in.nextInt();
		Node[] nodes = new Node[n];
		for (int i = 0; i < n; i++) {
			nodes[i] = new Node(i);
		}
		for (int i = 0; i < n; i++) {
			int par = in.nextInt() - 1;
			if (par != -1) {
				nodes[par].to.add(nodes[i]);
			}
		}

		int result = getAns(nodes[0], -1);
		int[] values = new int[n];
		setValues(values, nodes[0], -1);

		int maxValue = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			maxValue = Math.max(maxValue, values[i]);
		}
		System.out.println(maxValue);

		out.println(result);
	}

	public int getAns(Node cur, int parValue) {
		int result = Integer.MAX_VALUE;
		for (int i = 1; i < MAX; i++) {
			if (i == parValue) {
				continue;
			}

			if (cur.d[i] == Integer.MAX_VALUE) {
				cur.d[i] = i;
				for (int j = 0; j < cur.to.size(); j++) {
					cur.d[i] += getAns(cur.to.get(j), i);
				}
			}
			result = Math.min(result, cur.d[i]);
		}
		return result;
	}

	public void setValues(int[] values, Node cur, int parValue) {
		int result = Integer.MAX_VALUE;
		int minIndex = 0;

		for (int i = 0; i < MAX; i++) {
			if (cur.d[i] < result && i != parValue) {
				result = cur.d[i];
				minIndex = i;
			}
		}
		values[cur.id] = minIndex;
		for (Node next : cur.to) {
			setValues(values, next, minIndex);
		}
	}

	public void run() {
		try {
			in = new FastScanner(new File("d.in"));
			out = new PrintWriter(new File("d.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new D().run();
	}
}
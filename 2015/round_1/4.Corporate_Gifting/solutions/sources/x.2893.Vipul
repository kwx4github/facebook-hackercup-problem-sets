#include<iostream>
#include<cstring>
#include<queue>
#include<vector>
#include<fstream>
using namespace std;

 	   vector < int > vec[200001];
 	   int weight[200001];
 	   int ar[200001][1];
 	   int a[200001];
 	   int degree[200001];  // for number of child
 	   int parent[200001];  //  for parent
int main(){
//ifstream in("input.txt");
//ofstream out("vip.txt");
 int t ,i ,tt = 1;
// in >> t;
 cin >> t;
 while( t-- ){

 	   int n;
 cin >> n;
 //in >> n;
 	   //int a[n+1];
 	   int ans = 0 ;
 	  /* vector < int > vec[n+1];
 	   int degree[n+1];  // for number of child
 	   int parent[n+1]; */ //  for parent
 	   for(int i=0;i<=n;i++){
        degree[i]=0;
        parent[i]=0;
        ar[i][0]=0;
        a[i]=0;
        weight[i]=0;
        vec[i].clear();
 	   }
 	   for( i = 1 ; i  <= n ; ++i ){
 //	   in >> a[i];
 cin >> a[i];
  vec[a[i]].push_back(i);
 	      degree[a[i]] = vec[a[i]].size();
 	      parent[i] = -1;

 	   }
 	    int  odd = 0 , even = 0;// <-- greedy
		 queue < int > q;
		 ar[a[2]][0]=1;//ar - > for level to check it's odd or even
		 q.push(a[2]);
        	    while(!q.empty())
        	    {
    	        	int u = q.front();
    	        	if( ar[u][0] & 1 )
    	        	odd++;
    	        	else
    	        	even++;
    	        	q.pop();
    	         for( i = 0 ; i < vec[u].size(); ++i)
				 {
 				      int v = vec[u][i];
					   ar[v][0]=ar[u][0]+1;
					   q.push(v);
					   parent[v] =  u;
 				}
    	        }
          ans = min( odd*2+even,even*2+odd);//ans - > hold greedy answer
		  for( i = 1 ; i<= n ; ++i)
		  {
  			if(degree[i] == 0)
  			q.push(i);
  		}
  		//int weight[n+1];
  		 while(!q.empty())
  		 {
 		      int u = q.front();
 		      q.pop();
 		      if( vec[u].size() == 0 ) // u - > leaf node
 		      weight[u] = 1;
 		      // else part calculate the minimum weight ,
			   //   which doesn't belong to any of it's child.
			   else
 		      {
      		     int hsh[200001]={0};
      		     int mx = 0;
				   for( i = 0 ; i < vec[u].size(); ++i )
				   {
				   	int v = vec[u][i];
				   	if( vec[v].size() == 0 )
				   	weight[v] = 1;
   					  mx = max( weight[v], mx );
   					  hsh[weight[v]]=1;
   				}
   				for( i = 1 ; i <= mx ; ++i)
   				{
				   	if( hsh[i] == 0 )
				   	{
	   					weight[u] = i;
	   					break;
	   				}
				   }
				   if( i > mx)
				   weight[u] = mx + 1;
      		 }
                int v = parent[u];
		       if( v != -1 )
			   {
   		         if( degree[v] == 1)
				   {
   					 q.push(v);
   					 degree[v] = 0;
   				}
   				else
   				degree[v] = degree[v] - 1;
   			  }
 		  }
 		  int nans = 0;
 		  for( i = 1 ; i <= n ; ++i )
 		  nans = nans + weight[i];

 		  cout <<"Case #"<<tt++<<": ";
 		  cout << min( ans , nans  ) << endl;
 		 // out <<"Case #"<<tt++<<": ";
 		  //out << min( ans , nans  ) << endl;

 }
    return 0;
}

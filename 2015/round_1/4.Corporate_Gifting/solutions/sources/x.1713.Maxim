import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Locale;
import java.util.Set;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.util.StringTokenizer;
import java.io.FilenameFilter;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "corporate.*gifting.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("corporategifting.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastScanner in = new FastScanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting {
	public void solve(int testNumber, FastScanner in, PrintWriter out) {
		int n = in.nextInt();
		int[] p = new int[n];
		int[] deg = new int[n];
		for (int i = 0; i < n; i++) {
			p[i] = in.nextInt() - 1;
			if (p[i] >= 0) {
				++deg[p[i]];
			}
		}
		int[][] children = new int[n][];
		for (int i = 0; i < n; i++) {
			children[i] = new int[deg[i]];
			deg[i] = 0;
		}
		for (int i = 0; i < n; i++) {
			int x = p[i];
			if (x >= 0) {
				children[x][deg[x]++] = i;
			}
		}
		int[] q = new int[n];
		int qt = 0;
		int qh = 1;
		q[0] = 0;
		int[] col = new int[n];
		while (qt < qh) {
			int v = q[qt++];
			for (int u : children[v]) {
				q[qh++] = u;
			}
		}
		for (int it = n - 1; it >= 0; it--) {
			int v = q[it];
			Set<Integer> cur = new HashSet<Integer>();
			for (int u : children[v]) {
				cur.add(col[u]);
			}
			for (int i = 1; ; i++) {
				if (!cur.contains(i)) {
					col[v] = i;
					break;
				}
			}
		}
		long ans = 0;
		for (int i = 0; i < n; i++) {
			ans += col[i];
		}
		out.printf("Case #%d: %d\n", testNumber, ans);
	}
}

class FastScanner {

	private BufferedReader in;
	private StringTokenizer st;

	public FastScanner(InputStream stream) {
		in = new BufferedReader(new InputStreamReader(stream));
	}

	public String next() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				String rl = in.readLine();
				if (rl == null) {
					return null;
				}
				st = new StringTokenizer(rl);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return st.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

}


#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <sstream>

using namespace std;

template < typename T >
T next() {
    T tmp;
    cin >> tmp;
    return tmp;
}

int missed(vector< int > & vals) {
    sort(vals.begin(), vals.end());
    int cur = 1;
    for (size_t i = 0; i < vals.size(); ++i) {
        if (vals[i] == cur) {
            cur++;
        }
    }
    return cur;
}


void solve() {
    int n = next< int >();
    vector< int > t(n, 0);
    vector< int > rnk(n, 0);
    vector< int > ch(n, 0);
    generate(t.begin(), t.end(), next< int >);
    for (size_t i = 0; i < t.size(); ++i) {
        ch[ t[i] - 1 ]++;
    }
    vector< int > vs;
    vector< vector < int > > vals(n);
    for (size_t i = 0; i < t.size(); ++i) {
        if (ch[i] == 0) {
            vs.push_back(i);
        }
    }
    long long res = 0;
    for (size_t i = 0; i < vs.size(); ++i) {
        int v = vs[i];
        rnk[ v ] = missed(vals[ v ]);
        res += rnk[v];
        int p = t[v] - 1;
        if (p == -1) continue;
        ch[p]--;
        if (ch[p] == 0) {
            vs.push_back(p);
        }
        vals[p].push_back(rnk[v]);
    }
    cout << res << "\n";
}

int main() {
    
    int t;
    scanf("%d", &t);
    for (int i = 1; i <= t; ++i) {
        cout << "Case #" << i << ": ";
        solve();
    }

    return 0;
}
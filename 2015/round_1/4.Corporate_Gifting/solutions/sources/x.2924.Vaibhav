#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <fstream>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <limits>
#include <string.h>

#define pb push_back
#define mp make_pair


using namespace std;
typedef long long LL;

static struct IO {
char tmp[1 << 10];
 
// fast input routines
char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
inline char nextChar() { return cur = getc_unlocked(stdin); }
inline char peekChar() { return cur; }
 
inline operator bool() { return peekChar(); }
inline static bool isBlank(char c) { return (c < '-' && c); }
inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
inline IO& operator >> (char * buf) {
if (skipBlanks()) {
if (peekChar()) {
*(buf++) = peekChar();
while (!isBlank(nextChar())) *(buf++) = peekChar();
} *(buf++) = 0; } return *this; }
 
inline IO& operator >> (string & s) {
if (skipBlanks()) {	s.clear(); s += peekChar();
while (!isBlank(nextChar())) s += peekChar(); }
return *this; }
 
inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
inline IO& operator >>(intType & n) { \
if (skipBlanks()) { \
int sign = +1; \
if (peekChar() == '-') { \
sign = -1; \
n = nextChar() - '0'; \
} else \
n = peekChar() - '0'; \
while (!isBlank(nextChar())) { \
n += n + (n << 3) + peekChar() - 48; \
} \
n *= sign; \
} \
return *this; \
}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
inline void putChar(char c) { putc_unlocked(c, stdout); }
inline IO& operator << (char c) { putChar(c); return *this; }
inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
inline char * toString(intType n) { \
char * p = (tmp + 30); \
if (n) { \
bool isNeg = 0; \
if (n < 0) isNeg = 1, n = -n; \
while (n) \
*--p = (n % 10) + '0', n /= 10; \
if (isNeg) *--p = '-'; \
} else *--p = '0'; \
return p; \
} \
inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;

#define MAXN 200007

int a[MAXN];
long long GO[MAXN], ANS[MAXN], WW[MAXN], TMP[MAXN];
vector<int> A[MAXN], Layer[MAXN];

void solve()
{
	int n;
	for(int i=0;i<MAXN;i++) A[i].clear(), Layer[i].clear();
    cin>>n;
    
    for(int j = 1; j <= n; j++)
    {
        cin>>a[j];
        A[a[j]].push_back(j);
    }
    int Unchayi = 0;
    Layer[0].push_back(1);
    for(int j = 0; j < n-1; j++)
            for(int x : Layer[j])
                for(int y: A[x])
                    Layer[j+1].push_back(y);
    for(int i = 0 ; ! Layer[i].empty() ; i++) Unchayi++;
    for(int l = Unchayi - 1 ; l >= 0 ; l--)
    {
        for(int x: Layer[l])
        {
            if(A[x].empty())
            {
                GO[x] = 1;
                ANS[x] = 1;
                WW[x] = 2;
                TMP[x] = 2;
            }
            else
            {
                GO[x] = 1, ANS[x] = 1, TMP[x] = 0;
                for(int y: A[x])
                {
                    if(GO[y] != 1){
                        ANS[x] += ANS[y];
                    }
                    else
                    {
                    	ANS[x] += TMP[y];
                    }
                }
                int done = 0;

                for(int k = 2; k <= n && done < 1; k++)
                {
                    long long Naya = k;
                    for(int y: A[x]){
                        if(GO[y] != k) Naya += ANS[y];
                        else Naya += TMP[y];
                    }
                    if(Naya <= ANS[x])
                    {
                        WW[x] = GO[x];
                        TMP[x] = ANS[x];
                        GO[x] = k;
                        ANS[x] = Naya;
                    }
                    else if(Naya < TMP[x] || TMP[x] == 0) TMP[x] = Naya, WW[x] = k;
                    else done = 1;

                }
            }
        }
    }
}

int main()
{
    int t;
    cin>>t;
    for(int qq = 1; qq <= t; qq++)
    {
        solve();
    	cout<<"Case #"<<qq<<": "<<ANS[1]<<"\n";
    }

    return 0;
}

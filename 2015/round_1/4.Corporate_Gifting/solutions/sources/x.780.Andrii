#include <cassert>
#include <complex>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <numeric>
#include <sstream>
#include <utility>

#include <algorithm>
#include <bitset>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

#include <memory.h>
using namespace std;

#define Pi 3.141592653589793
#define all(c) (c).begin(), (c).end()
typedef long long ll;

int ri() {
  static int res;
  scanf("%d", &res);
  return res;
}

template <typename T>
int numbits(T n) {
  return n ? 1 + numbits(n & (n - 1)) : 0;
}

class timer {
public:
  timer() : t_(clock()) {}
  void restart() { t_ = clock(); }
  float elapsed() { return float(clock() - t_) / CLOCKS_PER_SEC; }
private:
  clock_t t_;
};

void run();

int main() {
#ifdef LOCAL_HOST
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
  timer t;
#endif
  run();
#ifdef LOCAL_HOST
  //printf("\nElapsed time: %.9f\n", t.elapsed());
#endif
  return 0;
}

vector< vector<int> > ch;
int dp[1 << 20][5];

int eval(int cur, int price) {
  if (dp[cur][price] != -1) {
    return dp[cur][price];
  }

  int& res = dp[cur][price];
  res = 0;
  for (int j = 0; j < ch[cur].size(); ++j) {
    int subres = -1;
    for (int p = 1; p <= 4; ++p) {
      if (p == price) {
        continue;
      }
      int tmp = p + eval(ch[cur][j], p);
      if (subres == -1 || tmp < subres) {
        subres = tmp;
      }
    }
    res += subres;
  }
  return res;
}

void run() {
  int nn; cin >> nn;
  for (int cs = 0; cs < nn; ++cs) {
    int n; cin >> n;
    ch.clear();
    ch.resize(1 << 20);
    for (int i = 0; i < n; ++i) {
      int a; cin >> a;
      if (i) {
        ch[a - 1].push_back(i);
      }
    }
    memset(dp, -1, sizeof(dp));
    int res = -1;
    for (int i = 1; i <= 4; ++i) {
      int subres = eval(0, i) + i;
      if (res == -1 || res > subres) {
        res = subres;
      }
    }
    printf("Case #%d: %d\n", cs + 1, res);
  }
}

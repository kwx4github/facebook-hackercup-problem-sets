#include  <bits/stdc++.h>
#include <vector>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <limits.h>
#include <cstdlib>
#include <cstdio>

#define x first
#define y second
#define pb push_back

using namespace std ;

typedef long long ll ;
typedef unsigned long long ull ;
typedef pair <int, int> Pair ;

const int NMAX =  200005 ;
const int INF = 0x3f3f3f3f ;

ifstream fin("a.txt") ;
ofstream fout("output.out") ;


int T, N, P[NMAX] ;
int X ;
int D[NMAX][12], st[NMAX] ;
vector <int> K[NMAX] ;
stack <int> ST ;

int RES[NMAX], M = 1 ;


inline int min(int a, int b)
{
    if(a > b)
        return b ;
    return a ;
}

inline int max(int a, int b)
{
    if(a > b)
        return a ;
    return b ;
}


inline void READ()
{
    fin >> N ;

    for(int i = 0 ; i <= N ; ++ i)
        K[i].clear() ;

    for(int i = 1 ; i <= N ; ++ i)
    {

        fin >> X ;
        K[X].pb(i) ;


    }

    for(int i = 0 ; i <= N + 1 ; ++ i)
        st[i] = 0 ;
}


inline void DFS()
{

    ST.push(0) ;

    while(! ST.empty())
    {
        int aux = ST.top() ;
        ST.pop() ;

        if(st[aux] == 0)
            for(int i = 0 ; i < 11 ; ++ i)
                D[aux][i] = 0 ;

        bool ok = true ;

        for(int i = st[aux] ; i < K[aux].size() ; ++ i)
        {
            ++ st[aux] ;
            ST.push(aux) ;
            ST.push(K[aux][i]) ;
            ok = false ;
            break ;
        }

        if(ok)
        {
            for(int i = 0 ; i < K[aux].size() ; ++ i)
            {
                int lf, rh ;

                if(D[ K[ aux ][ i ] ][ 0 ] > D[ K[ aux ][ i ] ][ 1 ])
                {
                    lf = 1;
                    rh = 0 ;
                }
                else
                {
                    lf = 0 ;
                    rh = 1 ;
                }

                for(int j = 2 ; j < 11 ; ++ j)
                    if(D[K[aux][i]][j] < D[K[aux][i]][lf])
                    {
                        rh = lf ;
                        lf = j ;
                    }
                    else if(D[K[aux][i]][j] < D[K[aux][i]][rh])
                        rh = j ;

                for(int j = 0 ; j < 11 ; ++ j)
                    if(j == lf)
                    {
                        D[aux][j] = D[aux][j] + D[K[aux][i]][rh];
                    }
                    else
                    {
                        D[aux][j] = D[aux][j] + D[K[aux][i]][lf] ;
                    }



            }
            for(int j = 0 ; j < 11 ; ++ j)
                D[aux][j] = D[aux][j] + (j + 1) ;

        }


    }


}


inline void OUT()
{
    DFS() ;
    int ans = D[1][0] ;
    for(int i = 1 ; i < 11 ; ++ i)
        ans = min(ans, D[1][i]) ;
    fout << ans << '\n' ;

}

int main()
{
    fin >> T ;

    for(int t = 1 ; t <= T ; ++ t)
    {
        fout << "Case #" << t << ": " ;

        READ() ;
        OUT() ;
    }




    fin.close() ;
    fout.close() ;
    return 0 ;
}

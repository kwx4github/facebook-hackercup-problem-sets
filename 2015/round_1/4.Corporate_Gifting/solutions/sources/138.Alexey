import java.io.*;
import java.util.*;
import java.math.*;

public class Gifting implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int testsCount = nextInt();
		for (int test = 1; test <= testsCount; test++) {
			out.print("Case #" + test + ": ");
			sovleOne();
			out.println();
			out.flush();
		}
	}

	private void sovleOne() throws IOException {
		int employeesCount = nextInt();
		// int employeesCount = 1 + rnd.nextInt(500);
		List<Integer>[] childIds = new List[employeesCount];

		for (int i = 0; i < employeesCount; i++) {
			childIds[i] = new ArrayList<>();
		}
		// int[] parentIds = new int[employeesCount];
		for (int i = 0; i < employeesCount; i++) {
			int parentId = nextInt() - 1;

			/*
			 * int parentId = rnd.nextInt(i + 1) - 1; if (i != 0) { while
			 * (parentId == -1) { parentId = rnd.nextInt(i + 1) - 1; } }
			 */
			if (parentId != -1) {
				childIds[parentId].add(i);
			}

			// parentIds[i] = parentId + 1;
		}
		
		final int maxGiftPrice = 10;
		long result = solveTree(employeesCount, childIds, maxGiftPrice);

		{
			/*
			 * long checkResult = solveTree(employeesCount, childIds, 4);
			 */

			/*
			 * if (result != checkResult) { throw new AssertionError(); }
			 */
		}

		out.print(result);
		// out.print(employeesCount + " " + result);
	}

	private long solveTree(int employeesCount, List<Integer>[] childIds,
			int maxGiftPrice) {

		int[][] minPrice = new int[employeesCount][maxGiftPrice];

		final int rootId = 0;
		dfs(rootId, childIds, maxGiftPrice, minPrice);
		long result = Long.MAX_VALUE;
		for (int rootPrice = 1; rootPrice <= maxGiftPrice; rootPrice++) {
			result = Math.min(result, minPrice[rootId][rootPrice - 1]);
		}
		return result;
	}

	private void dfs(int vertex, List<Integer>[] childIds, int maxGiftPrice,
			int[][] minPrice) {
		List<Integer> thisChildIds = childIds[vertex];
		int[] thisMinPrice = minPrice[vertex];
		if (thisChildIds.isEmpty()) {
			for (int i = 1; i <= maxGiftPrice; i++) {
				thisMinPrice[i - 1] = i;
			}
		} else {
			for (int childId : thisChildIds) {
				dfs(childId, childIds, maxGiftPrice, minPrice);
			}
			for (int thisGiftPrice = 1; thisGiftPrice <= maxGiftPrice; thisGiftPrice++) {
				thisMinPrice[thisGiftPrice - 1] = thisGiftPrice;
				for (int childId : thisChildIds) {
					int otherMinPrice = Integer.MAX_VALUE;
					for (int otherGiftPrice = 1; otherGiftPrice <= maxGiftPrice; otherGiftPrice++) {
						if (thisGiftPrice != otherGiftPrice) {
							otherMinPrice = Math.min(otherMinPrice,
									minPrice[childId][otherGiftPrice - 1]);
						}
					}
					thisMinPrice[thisGiftPrice - 1] += otherMinPrice;
				}
			}
		}
	}

	public static void main(String[] args) {
		new Thread(null, new Gifting(), "yarrr", 1 << 24).start();
	}

	public void run() {
		try {
			final String className = this.getClass().getName().toLowerCase();

			try {
				in = new BufferedReader(new FileReader(className + ".in"));
				out = new PrintWriter(new FileWriter(className + ".out"));
				// in = new BufferedReader(new FileReader("input.txt"));
				// out = new PrintWriter(new FileWriter("output.txt"));
			} catch (FileNotFoundException e) {
				in = new BufferedReader(new InputStreamReader(System.in));
				out = new PrintWriter(System.out);
			}

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
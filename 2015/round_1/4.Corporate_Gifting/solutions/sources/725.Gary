#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
#include<map>
#include<set>
using namespace std;
#define INF (1<<29)
#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define FOR(i,x,y) for(int i=(x);i<(y);++i)
#define FOE(i,x,y) for(int i=(x);i<=(y);++i)
#define CLR(i) memset(i,0,sizeof(i))
#define ll long long

#define MAXN (200000)
#define MAXM (28)

int gnt[MAXN+5],es;

struct edge{
	int u,v,nt;

	edge(){}
	edge(int u,int v,int nt):u(u),v(v),nt(nt){}
} e[MAXN+5];

void add(int u,int v){
	e[es] = edge(u,v,gnt[u]);
	gnt[u] = es; ++es;
}

int T,N;
ll dp[MAXN+5][MAXM+5];

void dfs(int u){
	for(int i=gnt[u];i!=-1;i=e[i].nt){
		dfs(e[i].v);
	}

	FOR(x,1,MAXM){
		ll tmp = (ll)x;
		for(int i=gnt[u];i!=-1;i=e[i].nt){
			ll tmin = -1ll;
			FOR(y,1,MAXM){
				if (x==y) continue;
				if (tmin == -1ll) tmin = (ll)dp[e[i].v][y];
				else tmin = min(tmin,(ll)dp[e[i].v][y]);
			}
			tmp += tmin;
		}
		dp[u][x] = tmp;
	}
}

int main(){
	scanf("%d",&T);
	FOE(t,1,T){
		memset(gnt,-1,sizeof(gnt));
		es = 0;

		scanf("%d",&N);
		FOE(i,1,N){
			int x; scanf("%d",&x);
			if (i==1) continue;
			add(x,i);
		}
		dfs(1);

		ll ans = -1ll;
		FOR(i,1,MAXM){
			if (ans==-1) ans = (ll)dp[1][i];
			else ans = min(ans,(ll)dp[1][i]);
		}
		printf("Case #%d: %lld\n",t,ans);
	}

	return 0;
}

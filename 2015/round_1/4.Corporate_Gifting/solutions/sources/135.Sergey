#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <bitset>
#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;
const string task = "";

template <class T> T sqr (T x) {return x * x;}

const int KMAX = 20;

int n;
vector<int> g[200500];
int t[200500][KMAX + 1];
int f[200500][KMAX + 1];

void go(int v) {
	seta(f[v], 0);
	for (int k = 1; k <= KMAX; k++) {
		t[v][k] = k;
	}
	forn(i, g[v].size()) {
		int w = g[v][i];
		go(w);
		for (int k = 1; k <= KMAX; k++) {
			t[v][k] += f[w][k];
		}
	}
	int m1 = min(t[v][1], t[v][2]);
	int m2 = max(t[v][1], t[v][2]);
	for (int k = 3; k <= KMAX; k++) {
		if (t[v][k] < m1) {
			m2 = m1;
			m1 = t[v][k];
		} else if (t[v][k] < m2) {
			m2 = t[v][k];
		}
	}
	for (int k = 1; k <= KMAX; k++) {
		if (t[v][k] == m1) {
			f[v][k] = m2;
		} else {
			f[v][k] = m1;
		}
	}
}

void solve() {
	scanf("%d", &n);
	forn(i, n)
		g[i].clear();
	forn(i, n) {
		int p;
		scanf("%d", &p);
		if (p > 0) {
			p--;
			g[p].pb(i);
		}
	}
	go(0);
	int res = t[0][1];
	for (int i = 2; i <= KMAX; i++) {
		res = min(res, t[0][i]);
	}
	cout << res << endl;
}

int main () {
//	freopen ((task + ".in").data(), "r", stdin);
//	freopen ((task + ".out").data(), "w", stdout);
	freopen ("corporate_gifting.txt", "r", stdin);
	freopen ("corporate_gifting.out", "w", stdout);
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
	}
	return 0;
}

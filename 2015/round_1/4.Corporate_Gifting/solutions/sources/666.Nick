#pragma comment(linker, "/STACK:134217728")

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdlib>
#include <queue>
#include <set>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <bitset>
#include <sstream>
#include <cassert>

using namespace std;

const int N = 20;
int beg[200000], cur[200000], nxt[199999], res[200000][N + 1], prom[N + 1];

void dfs(int v) {
	if (beg[v] == -1) {
		res[v][1] = 2;
		for (int i = 2; i <= N; ++i)
			res[v][i] = 1;
		return;
	}
	for (int x = beg[v]; x != -1; x = nxt[x])
		dfs(x + 1);
	for (int i = 1; i <= N; ++i)
		prom[i] = 0;
	for (int x = beg[v]; x != -1; x = nxt[x])
		for (int i = 1; i <= N; ++i)
			prom[i] += res[x + 1][i];
	int pos1 = -1, pos2 = -1;
	for (int i = 1; i <= N; ++i) {
		if (pos2 == -1 || prom[i] + i < prom[pos2] + pos2)
			pos2 = i;
		if (pos1 == -1 || prom[pos2] + pos2 < prom[pos1] + pos1)
			swap(pos1, pos2);
	}
	for (int i = 1; i <= N; ++i)
		if (i != pos1)
			res[v][i] = prom[pos1] + pos1;
		else
			res[v][i] = prom[pos2] + pos2;
}

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; ++t) {
		int n;
		scanf("%d", &n);
		for (int i = 0; i < n; ++i) {
			beg[i] = -1;
			cur[i] = -1;
		}
		for (int i = 0; i < n; ++i) {
			int x;
			scanf("%d", &x);
			--x;
			if (i != 0) {
				if (beg[x] == -1)
					beg[x] = i - 1;
				else
					nxt[cur[x]] = i - 1;
				cur[x] = i - 1;
				nxt[i - 1] = -1;
			}
		}
		dfs(0);
		int ans = res[0][1];
		for (int i = 2; i <= N; ++i)
			ans = min(ans, res[0][i]);
		printf("Case #%d: %d\n", t, ans);
	}
    return 0;
}
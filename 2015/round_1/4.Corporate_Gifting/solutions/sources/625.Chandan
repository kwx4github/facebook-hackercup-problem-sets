package hackercup.y2015.round1.corporate;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/y2015/round1/corporate/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            System.out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    private static class Solver {

        public void solve(InputReader in, PrintWriter out) {
            int n = in.nextInt();
            List<Integer> edges[] = new ArrayList[n+1];

            for (int i=0; i<=n; i++) {
                edges[i] = new ArrayList<>();
            }

            for (int i=1; i<=n; i++) {
                edges[in.nextInt()].add(i);
            }

            //out.println(bottomUp(edges, n) + " : " + bottomUpDp(edges, n));
            long sol = bottomUpDp(edges, n);
            out.println(sol);
            System.out.println(sol);
        }

        private long bottomUp(final List<Integer>[] edges, int n) {
            Queue<Integer> queue = new LinkedList<>();
            Stack<Integer> stack = new Stack<>();
            int ts[] = new int[n+1];
            queue.add(1);

            while (!queue.isEmpty()) {
                int u = queue.poll();

                for (int v : edges[u]) {
                    queue.add(v);
                }
                stack.push(u);
            }

            while (!stack.isEmpty()) {
                int u = stack.pop();

                if (edges[u].size() == 0) {
                    ts[u] = 1;
                } else {
                    int m = edges[u].size() + 1;
                    int xx[] = new int[m + 1];

                    for (int v : edges[u]) {
                        if (ts[v] <= m) {
                            xx[ts[v]] = 1;
                        }
                    }

                    int j = 1;
                    for (; j<=m; j++) {
                        if (xx[j] == 0) {
                            break;
                        }
                    }
                    ts[u] = j;
                }
            }

            long sol = 0;
            for (int i=1; i<=n; i++) {
                sol += ts[i];
            }
            return sol;
        }

        private long bottomUpDp(final List<Integer>[] edges, int n) {
            Queue<Integer> queue = new LinkedList<>();
            Stack<Integer> stack = new Stack<>();
            queue.add(1);

            while (!queue.isEmpty()) {
                int u = queue.poll();
                for (int v : edges[u]) {
                    queue.add(v);
                }
                stack.push(u);
            }

            int max = 50;
            long dp[][] = new long[n+1][max+1];
            long minEx[][] = new long[n+1][max+1];
            while (!stack.isEmpty()) {
                int u = stack.pop();

                if (edges[u].size() == 0) {
                    for (int i=1; i<=max; i++) {
                        dp[u][i] = i;
                        minEx[u][i] = 1;
                    }
                    minEx[u][1] = 2;
                } else {

                    long firstMin = Integer.MAX_VALUE;
                    long secondMin = Integer.MAX_VALUE;
                    for (int i=1; i<=max; i++) {
                        long su = i;
                        for (int v : edges[u]) {
                            su += minEx[v][i];
                        }
                        dp[u][i] = su;
                        if (su < firstMin) {
                            secondMin = firstMin;
                            firstMin = su;
                        } else if (su < secondMin) {
                            secondMin = su;
                        }
                    }

                    for (int i=1; i<=max; i++) {
                        if (dp[u][i] == firstMin) {
                            minEx[u][i] = secondMin;
                        } else {
                            minEx[u][i] = firstMin;
                        }
                    }
                }
            }

            long min = dp[1][1];
            for (int i=2; i<=max; i++) {
                min = Math.min(min, dp[1][i]);
            }
            return min;
        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}


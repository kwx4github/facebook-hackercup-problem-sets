#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <set>
#include <map>
#include <queue>

using namespace std ;

#define INF (500000000000LL)

struct node
{
	long long cost[2] ;
	int val ;
} arr[210000] ;

vector<int> link[210000] ;
vector<int> ord ;

int n ;

int main(void)
{
	int tc ;
	scanf("%d", &tc) ;
	
	for(int c=1;c<=tc;c++)
	{
		scanf("%d", &n) ;
		for(int i=1;i<=n;i++)
			link[i].clear() ;
		
		for(int v=1;v<=n;v++)
		{
			int par ;
			scanf("%d", &par) ;
			if(par!=0)
				link[par].push_back(v) ;
		}
		
		queue<int> q ;
		q.push(1) ;
		while(q.size())
		{
			int cur = q.front() ;
			ord.push_back(cur) ;
			q.pop() ;
			for(int i=0;i<link[cur].size();i++)
				q.push(link[cur][i]) ;
		}
		
		for(int i=ord.size()-1;i>=0;i--)
		{
			int cur = ord[i] ;
			if(link[cur].size()==0)
			{
				arr[cur].cost[0] = 1 ;
				arr[cur].val = 1 ;
				arr[cur].cost[1] = 2 ;
			}
			else
			{
				set<int> nums ;
				for(int j=0;j<link[cur].size();j++)
					nums.insert(arr[link[cur][j]].val) ;
				for(int tt=0;tt<2;tt++)
				{
					int pre = 0 ;
					for(set<int>::iterator it=nums.begin();it!=nums.end();++it)
						if(pre+1 != *it)
							break ;
						else
							pre = *it ;
					nums.insert(pre+1) ;
				}
				long long base = 0 ;
				map<int,long long> m ;
				for(set<int>::iterator it=nums.begin();it!=nums.end();++it)
					m[*it] = *it ;
				for(int j=0;j<link[cur].size();j++)
				{
					int nxt = link[cur][j] ;
					base += arr[nxt].cost[0] ;
					m[arr[nxt].val] += arr[nxt].cost[1]-arr[nxt].cost[0] ;
				}
				arr[cur].cost[0] = arr[cur].cost[1] = INF ;
				for(map<int,long long>::iterator it=m.begin();it!=m.end();++it)
				{
					if(it->second<arr[cur].cost[0])
					{
						arr[cur].cost[1] = arr[cur].cost[0] ;
						arr[cur].cost[0] = it->second ;
						arr[cur].val = it->first ;
					}
					else if(it->second<arr[cur].cost[1])
						arr[cur].cost[1] = it->second ;
				}
				arr[cur].cost[0] += base ;
				arr[cur].cost[1] += base ;
			}
		}
		
		printf("Case #%d: ", c) ;
		cout << arr[1].cost[0] << endl ;
	}
	
	return 0 ;
}

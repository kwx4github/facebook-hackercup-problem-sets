class Node
  
  @@nodes = [nil]
  
  attr_accessor :nid, :pid, :children, :weights, :lvl
  
  def initialize(nid)
    @nid = nid
    @pid = 0
    @children = []
    @weights=nil #[total, root] 
    @@nodes[nid] = self
    @lvl = 0
  end

  def parent
    @@nodes[pid]
  end
  
  def set_parent(pid)
    @pid = pid
    parent.children << self
    parent.lvl = @lvl+1 if parent.lvl <= @lvl
  end
  
  def self.nodes
    @@nodes
  end
  
  def set_subtree_min_weight
    a=nil
    b=nil
    w_limit = 2 + [@lvl, @children.size].min
    #w_limit = 3
    1.upto(w_limit){|w|
      s=w
      @children.each{|n|
        c=n.weights[0]
        c=n.weights[1] if c[1] == w
        s+=c[0]
      }
      e=[s, w]
      if a==nil || e[0]<a[0]
        b=a
        a=e
      elsif b==nil || e[0]<b[0]
        b=e
      end
    }
    @weights = [a, b]
  end
  
end

gets.to_i.times{|t|
  #desc="0 1 2 3 4 5 5 5 5".split.map(&:to_i)
  gets
  desc = gets.split.map(&:to_i)
  desc.each_with_index{|v, i|
    node = Node.new(i+1)
    node.set_parent(v) if v > 0
  }

  desc.size.downto(1){|i|
    node = Node.nodes[i]
    node.set_subtree_min_weight
  }

  v= Node.nodes[1].weights[0][0]
  puts "Case ##{t+1}: #{v}"
}


#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#define REP(i, n) for(int i = 0; i < (int)(n); ++i)
using namespace std;
typedef long long ll;

vector<int> g[200000+10];
// vector<int> ch[200000+10];
int par[200000+10];
int dist[200000+10];
int q[200000+10];
int dp[200000+10][5];

int main(void) {
  int nCase;
  scanf("%d", &nCase);
  
  REP(iCase, nCase){
    int n;
    scanf("%d", &n);
//     cerr << "HOGE " << n << endl;
    REP(i, n){
      g[i].clear();
//       ch[i].clear();
      dist[i] = -1;
    }
//     cerr << "HOGE" << endl;
    REP(i, n){
      int p;
      scanf("%d", &p);
      if(p != 0){
	g[i].push_back(p-1);
	g[p-1].push_back(i);
      }
    }
//     cerr << "HOGE" << endl;
    
    int qbg = 0;
    int qed = 0;
    q[qed++] = 0;
    dist[0] = 0;
    par[0] = 0;
    while(qbg < qed){
      int u = q[qbg++];
      REP(i, g[u].size()){
	int v = g[u][i];
	if(dist[v] < 0){
// 	  ch[u].push_back(v);
	  par[v] = u;
	  dist[v] = dist[u] + 1;
	  q[qed++] = v;
	}
      }
    }

//     cerr << "HOGE" << endl;
    
    for(int i = n-1; i >= 0; --i){
      int u = q[i];
      REP(d, 3){
	dp[u][d] = d+1;
	REP(j, g[u].size()){
	  int v = g[u][j];
	  if(v != par[u]){
	    dp[u][d] += min(dp[v][(d+1)%3], dp[v][(d+2)%3]);
	  }
	}
      }
    }
    
    int res = 2000000000;
    REP(d, 3){
      res = min(res, dp[0][d]);
    }
    
    printf("Case #%d: %d\n", iCase+1, res);
  }
  
  return 0;
}

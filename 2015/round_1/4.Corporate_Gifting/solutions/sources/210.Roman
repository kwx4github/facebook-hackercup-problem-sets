#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
#define FOR(i, f, t) for (int i = (f); i < (t); i++)
#define REP(i, n) FOR(i,0,(n))
#define SZ(v) ((int)(v).size())
#define ALL(v) (v).begin(), (v).end()
#define X first
#define Y second
#define pb push_back

// BEGIN CUT HERE
template<class T, class V>
ostream& operator<<(ostream &out, const pair<T, V> &p) {
    out << '(' << p.X << ',' << p.Y << ')';
    return out;
}

template<class T>
ostream& operator<<(ostream &out, const vector<T> &v) {
    REP(i,SZ(v)) {
        out << v[i] << ' ';
    }
    return out;
}
string getName(const char *&argument) {
    const char *from = argument;
    int d = 0;
    while ((*argument != 0) && !(*argument == ',' && d == 0)) {
        if (*argument == '(' || *argument == '[' || *argument == '<') {
            d++;
        }
        if (*argument == ')' || *argument == ']' || *argument == '>') {
            d--;
        }
        argument++;
    }
    string res(from, argument-from);
    argument++;
    return res;
}
void print(const char *arguments)
{
    cout << endl;
}
template<typename T, typename... Args>
T print(const char *arguments, T t, Args... args)
{
    string name = getName(arguments);
    cout << name << '=' << t << ' ';
    print(arguments, args...);
    return t;
}
#define SP(...) print(#__VA_ARGS__,__VA_ARGS__)
typedef pair<PII, PII> PPII;

PPII solve(VVI &graph, int from) {
    vector<PPII> res;
    for (int x : graph[from]) {
        res.push_back(solve(graph, x));
    }
    vector<PII> sols;
    int price = 1;
    int lastCount = 0;
    while (true) {
        bool last = true;
        int totalPrice = price;
        REP(i,SZ(res)) {
            if (res[i].X.Y != price) {
                totalPrice += res[i].X.X;
            } else {
                totalPrice += res[i].Y.X;
                last = false;
            }
        }
        sols.push_back(PII(totalPrice, price));
        lastCount += last;
        if (lastCount >= 2 && SZ(sols) >= 2) {
            break;
        } else {
            price++;
        }
    }
    sort(ALL(sols));
    //SP(from, res, sols);
    return PPII(sols[0], sols[1]);
}

void genComplex(vector<int> &v, int n, int to) {
    v.push_back(to);
    int newTo = SZ(v);
    REP(nn,n) {
        REP(i,n+1-nn) {
            genComplex(v, nn, newTo);
        }
    }
}

int main(int argc, char *argv[]) {
    ifstream in("/Users/roman/Documents/topcoder/facebook/corporate.in");
    ofstream out("/Users/roman/Documents/topcoder/facebook/corporate.out");
    /*
    freopen("/Users/roman/Documents/topcoder/facebook/corporate.in3", "w", stdout);
    VI v;
    genComplex(v, 11, 0);
    SP(v, SZ(v));
    exit(0);
     */
    int T;
    in >> T;
    REP(t,T) {
        int n;
        in >> n;
        VVI graph(n+1);
        REP(i,n) {
            int m;
            in >> m;
            graph[m].push_back(i+1);
        }
        PPII res = solve(graph, 1);
        out << "Case #" << t+1 << ": "<< res.X.X << endl;
    }
    out.close();
}
// END CUT HERE

#ifdef ONLINE_JUDGE
	#include <bits/stdc++.h>
#else
	#include <algorithm>
	#include <bitset>
	#include <cassert>
	#include <cstdio>
	#include <cstring>
	#include <iostream>
	#include <map>
	#include <set>
	#include <stack>
	#include <string>
	#include <utility>
	#include <vector>
	#include <cstdlib>
#endif

using namespace std;

	// lambda : [] (int a, int b) -> bool { body return }
	// string r_str = R"(raw string)"
//#pragma comment(linker, "/STACK:134217728")
#define mp make_pair
#define eb emplace_back
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define BASE 73
#define NMAX 10000
#define NMAX2 20001
#define MOD1 1000000007
#define ALL(V) (V).begin(), (V).end()
#define ALLR(V) (V).rbegin(), (V).rend()
#define CRLINE Duxar(__LINE__);
#define SHOWME(x) cerr << __LINE__ << ": " << #x << " = " << (x) << endl;
#define ENTER putchar('\n');

void Duxar(int _this_line) {
#ifndef ONLINE_JUDGE
	printf("\n . . . . . . . . . . . . . Passed line - %d\n", _this_line);
#endif
}

template <class T>
void ReadNo(T &_value) {
	T sign = 1;
	char ch;
	_value = 0;
	while(!isdigit(ch = getchar())) {
		(ch == '-') && (sign = -1);
	}
	do {
		_value = _value * 10 + (ch - '0');
	} while(isdigit(ch = getchar()));
	_value *= sign;
}

template <class T>
void AddNr(T &a, T b) {
	a = a + b;
	while (a >= MOD1) {
		a -= MOD1;
	}
	while (a < 0) {
		a += MOD1;
	}
}

struct Node {
	int color, cost1, cost2;
	
	Node() {
		color = cost1 = cost2 = 0;
	}
};

vector <vector <int> > graph;
vector <Node> node_data;

void Solve();
void Compute(int iam);

int main(int no_arguments, char **arguments){
	if (no_arguments > 1) {
		freopen(arguments[1], "r", stdin);
	}
	else {
		freopen("input.cpp", "r", stdin);
	}
	
	int i, N;
	ReadNo(N);
	for (i = 1; i <= N; ++i) {
		printf("Case #%d: ", i);
		Solve();
	}
	
	return 0;
}

void Solve() {
	int N, i, x;

	graph.clear();
	node_data.clear();
	
	ReadNo(N);
	graph.resize(N + 1);
	node_data.resize(N + 1);
	ReadNo(x);
	for (i = 2; i <= N; ++i) {
		ReadNo(x);
		graph[x].pb(i);
	}
	
	Compute(1);
	
//	for (i = 1; i <= N; ++i) {
//		printf("Node %d: %d %d %d\n", i, node_data[i].cost1, node_data[i].cost2, node_data[i].color);
//	}
	
	printf("%d\n", min(node_data[1].cost1, node_data[1].cost2));
}

void Compute(int iam) {
	vector <int> cost_color;
	int sum = 0, dmax, i;
	
	dmax = graph[iam].size() + 1;
	if (dmax == 1) {
		node_data[iam].cost1 = 1;
		node_data[iam].cost2 = 2;
		node_data[iam].color = 1;
		return;
	}
	cost_color.resize(dmax + 1);
	for (auto to: graph[iam]) {
		Compute(to);
		sum += node_data[to].cost1;
	}
	
	for (i = 1; i <= dmax; ++i) {
		cost_color[i] = sum;
	}
	
	for (auto to: graph[iam]) {
		int node_color = node_data[to].color;
		if (node_color <= dmax) {
			cost_color[node_color] += (node_data[to].cost2 - node_data[to].cost1);
		}
	}
	
	node_data[iam].cost1 = -1;
	for (i = 1; i <= dmax; ++i) {
		cost_color[i] += i;
		if (cost_color[i] < node_data[iam].cost1 || node_data[iam].cost1 == -1) {
			node_data[iam].cost1 = cost_color[i];
			node_data[iam].color = i;
		}
	}

	node_data[iam].cost2 = -1;
	for (i = 1; i <= dmax; ++i) {
		if (i != node_data[iam].color && (cost_color[i] < node_data[iam].cost2 || node_data[iam].cost2 == -1)) {
			node_data[iam].cost2 = cost_color[i];
		}
	}
}
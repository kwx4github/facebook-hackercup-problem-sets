import java.io.FileInputStream;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Agostinho Junior (junior94)
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "corporate.*gifting.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("corporategifting.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting {

	public void solve(int testNumber, InputReader in, OutputWriter out) {
		final int n = in.readInt();
		ArrayList<ArrayList<Integer>> tree = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			tree.add(new ArrayList<>());
		}
		for (int i = 1; i <= n; i++) {
			tree.get(in.readInt()).add(i);
		}
		ArrayDeque<Integer> stack = new ArrayDeque<>();
		ArrayDeque<Integer> order = new ArrayDeque<>();
		stack.push(1);
		while (!stack.isEmpty()) {
			int node = stack.pop();
			order.push(node);
			for (int child: tree.get(node)) {
				stack.push(child);
			}
		}
		long res = 0;
		HashSet<Integer> set = new HashSet<>();
		int[] paid = new int[n + 1];
		while (!order.isEmpty()) {
			int node = order.pop();
			set.clear();
			paid[node] = 1;
			for (int child: tree.get(node)) {
				set.add(paid[child]);
			}
			while (set.contains(paid[node])) {
				paid[node]++;
			}
			res += paid[node];
		}
		out.printfln("Case #%d: %d", testNumber, res);
	}

}

class InputReader {
    private BufferedReader input;
    private StringTokenizer line = new StringTokenizer("");

	public InputReader(InputStream in) {
        input = new BufferedReader(new InputStreamReader(in));
    }

	public void fill() {
        try {
            if(!line.hasMoreTokens()) line = new StringTokenizer(input.readLine());
        } catch(IOException io) { io.printStackTrace(); System.exit(0);}
    }
    public String next() {
        fill();
        return line.nextToken();
    }

	public int readInt() {
        fill();
        return Integer.parseInt(line.nextToken());
    }
}

class OutputWriter {
    private PrintWriter output;

	public OutputWriter(OutputStream out) {
        output = new PrintWriter(out);
    }

	public void printfln(String format, Object... o) {
        output.printf(format + "\n", o);
    }

	public void close() {
        output.close();
    }
}


/*
 Petar 'PetarV' Velickovic
 Task: Autocomplete
*/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <unordered_set>

#define MAX_N 200001

#define DPRINTC(C) printf(#C " = %c\n", (C))
#define DPRINTS(S) printf(#S " = %s\n", (S))
#define DPRINTD(D) printf(#D " = %d\n", (D))
#define DPRINTLLD(LLD) printf(#LLD " = %lld\n", (LLD))
#define DPRINTLF(LF) printf(#LF " = %.5lf\n", (LF))

using namespace std;
typedef long long lld;
typedef unsigned long long llu;

int t;
int n, xx;

struct Node
{
    int depth;
    int color;
    int parent;
    vector<int> chd;
};
Node graf[MAX_N];

lld A, B;

priority_queue<pair<int, int> > pq;

inline void alternating_bfs()
{
    A = 0, B = 0;
    queue<int> bfs_q;
    queue<bool> qOK;
    bfs_q.push(0);
    qOK.push(true);
    
    while (!qOK.empty())
    {
        int qt = bfs_q.front();
        bool okt = qOK.front();
        bfs_q.pop();
        qOK.pop();
        if (okt) A++;
        else B++;
        for (int i=0;i<graf[qt].chd.size();i++)
        {
            bfs_q.push(graf[qt].chd[i]);
            qOK.push(!okt);
        }
    }
}

void dfs(int curnode, int dep)
{
    stack<int> S;
    stack<int> D;
    S.push(0);
    D.push(0);
    while (!S.empty())
    {
        int cur = S.top();
        int dt = D.top();
        S.pop(); D.pop();
        graf[cur].depth = dt;
        pq.push(make_pair(dt, cur));
        for (int i=0;i<graf[cur].chd.size();i++)
        {
            S.push(graf[cur].chd[i]);
            D.push(dt+1);
        }
    }
}

inline lld min1(lld A, lld B)
{
    if (A < B) return A;
    return B;
}

inline lld max1(lld A, lld B)
{
    if (A > B) return A;
    return B;
}

inline lld solve()
{
    lld ret = 0;
    while (!pq.empty())
    {
        pair<int, int> vrh = pq.top(); pq.pop();
        //printf("%d %d\n", vrh.second, vrh.first);
        int id = vrh.second;
        int clr = 1;
        unordered_set<int> colors;
        for (int i=0;i<graf[id].chd.size();i++)
        {
            colors.insert(graf[graf[id].chd[i]].color);
        }
        while (colors.count(clr) == 1) clr++;
        graf[id].color = clr;
        ret += clr;
    }
    return ret;
}

int main()
{
    freopen("/Users/PetarV/HackerCup/corporate_gifting.txt","r",stdin);
    freopen("/Users/PetarV/HackerCup/gifting-out.txt","w",stdout);
    
    scanf("%d", &t);
    
    for (int f=1;f<=t;f++)
    {
        scanf("%d%*d", &n);
        for (int i=0;i<n;i++) graf[i].chd.clear();
        
        for (int i=1;i<n;i++)
        {
            scanf("%d", &xx);
            graf[xx-1].chd.push_back(i);
            graf[i].parent = xx-1;
        }
        
        dfs(0, 0);
        
        alternating_bfs();
        
        lld A1 = solve();
        lld A2 = (min1(A, B) << 1) + max1(A, B);
        
        printf("Case #%d: %lld\n", f, min1(A1, A2));
    }
    
    return 0;
}
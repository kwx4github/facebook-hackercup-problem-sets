import codejam as gcj
import codejam.graphs as gph

@gcj.memoize
def best(e, d):     # lowest cost for employee e's subtree, e not spending $d
    global D
    best_total = 10**10
    for c in range(1, D + 1):
        if c != d:
            cost = c
            for w in W[e]:
                cost += best(w, c)

            if cost < best_total:
                if c >= D - 1:
                    D += 1
                best_total = cost

    return best_total

T = gcj.read_input('i')
for t in range(T):
    N, employees = gcj.read_input('i', 'i[]')
    W, D = gph.DiGraph(), 3

    for employee, manager in enumerate(employees, 1):
        W.add_edge(manager, employee)

    for e in reversed(list(gph.bfs(W, 0))):
        best(e, 0)
        
    print 'Case #%i:' % (t + 1), best(1, 0)
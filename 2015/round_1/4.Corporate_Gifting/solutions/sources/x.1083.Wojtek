#include <bits/stdc++.h>
#define MP make_pair
#define PB push_back
#define int long long
#define st first
#define nd second
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define RE(i, n) FOR(i, 1, n)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#ifdef LOCAL
#define debug(x) {cerr <<#x<<" = " <<x<<"\n"; }
#define debug2(x, y) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<"\n";}
#define debug3(x, y, z) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<"\n";}
#define debug4(x, y, z, t) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<", "<<#t <<" = " <<t<<"\n";}
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<"\n"; }}
#else
#define debug(x)
#define debug2(x, y)
#define debug3(x, y, z)
#define debug4(x,y,z,t)
#define debugv(x)
#define cerr if(0)cout
#endif
#define make(type, x) type x; cin>>x;
#define make2(type, x, y) type x, y; cin>>x>>y;
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z;
#define make4(type, x, y, z, t) type x, y, z, t; cin>>x>>y>>z>>t;
#define next ____next
#define prev ____prev
#define left ____left
#define hash ____hash
using namespace std;
typedef long long ll;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
typedef vector<int> VI;
typedef vector<ll> VLL;
typedef vector<pair<int, int> > VPII;
typedef vector<pair<ll, ll> > VPLL;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.first << ", " << pair.second << ")";}
template<class T>
void ResizeVec(vector<T>& vec, vector<int> sz) {
  vec.resize(sz[0]);
  sz.erase(sz.begin());
  if (sz.empty()) { return; }
  for (auto& v : vec) {
    ResizeVec(v, sz);
  }
}


struct Sol {
  vector<PII> dp[2];
  vector<vector<int>> slo;
  void Dfs(int v) {
    int without_coll = 0;
    int res = 0;
    vector<int> coll;
    coll.resize(4);
    for (auto nei : slo[v]) {
      Dfs(nei);
      res += dp[0][nei].first;
      if (SZ(coll) + 2 < dp[1][nei].second) {
        coll.resize(dp[1][nei].second + 3);
      }
      coll[dp[0][nei].second] += dp[1][nei].first - dp[0][nei].first;
    }
    PII fir_best = MP((int)1e9, 2), sec_best = fir_best;
    int pos = 1;
    while (without_coll < 2) {
      if (coll[pos] == 0) {
        without_coll++;
      }
      PII cand = MP(res + coll[pos] + pos, pos);
      if (cand < fir_best) {
        sec_best = fir_best;
        fir_best = cand;
      } else if (cand < sec_best) {
        sec_best = cand;
      }
      pos++;
    }
    dp[0][v] = fir_best;
    dp[1][v] = sec_best;
    return;
  }
      
      
      
  void Test() {
    make(int, n);
    dp[0].resize(n + 5);
    dp[1].resize(n + 5);
    slo.resize(n + 5);
    RE (i, n) {
      make(int, p);
      slo[p].PB(i);
    }
    Dfs(1);
    cout<<dp[0][1].first<<"\n";
  }
  
};

#undef int
int main() {
#define int long long

  ios_base::sync_with_stdio(0);
  cout << fixed << setprecision(10);
  double beg_clock = 1.0 * clock() / CLOCKS_PER_SEC;
  
  make(int, t);
  RE (tt, t) {
    cout<<"Case #"<<tt<<": ";
    Sol sol;
    sol.Test();
  }

  return 0;
}

#include<iostream>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include<string>
#include<random>
#include<fstream>
#include<cmath>
#include<cctype>
#include<functional>
#include<iomanip>

using namespace std;

#define input cin
#define output cout

#define MAXC 50  // log dependence
 
int N;
int dp[200000][MAXC];
vector<int> child[200000];
int level[200000];

void levelOrder()
{
	int count=0,tmp=0;
	queue<int> q;
	q.push(0);

	while(!q.empty())
	{
		tmp=q.front();
		q.pop();
		level[count++]=tmp;
		for(int i=0;i<child[tmp].size();i++)
		{
			q.push(child[tmp][i]);
		}
	}
}

int fun()
{
	levelOrder();
	int i;
	for(int l=N-1;l>=0;l--)  
	{
		i=level[l];
		if(child[i].size()==0)
		{
			dp[i][0]=2;
			for(int j=1;j<MAXC;j++) dp[i][j]=1;
		}
		else
		{
			int m=INT_MAX,n=INT_MAX,index=-1;
			int res;
			for(int j=0;j<MAXC;j++)
			{
				res=j+1;
				for(int k=0;k<child[i].size();k++)
				{
					res+=dp[child[i][k]][j];
				}
				
				if(res<m)
				{
					n=m;
					m=res;
					index=j;
				}
				else if(res<n)
				{
					n=res;
				}
			}
			
			for(int j=0;j<MAXC;j++)
			{
				if(j==index) dp[i][j]=n;
				else dp[i][j]=m;
			}
		}
	}

	int r=dp[0][0];

	for(int i=1;i<MAXC;i++)
	{
		r=min(r,dp[0][i]);
	}

	return r;
}


int main()
{
	

	ifstream input("C:\\Test\\corporate_gifting.txt");
    ofstream output("C:\\Test\\corporate_gifting_output.txt",ios::trunc);
	int testN;
	input>>testN;
	
	for(int caseN=1;caseN<=testN;caseN++)
	{
		int p;
		input>>N>>p;

		for(int i=0;i<N;i++)
		{
			child[i].clear();
		}

		for(int i=1;i<N;i++)
		{
			input>>p;
			child[p-1].push_back(i);
		}


		output<<"Case #"<<caseN<<": "<<fun()<<endl;
	}
	

	return 0;
}






#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 5000000;

vector<vector<int>> children;
vector<vector<int>> ans;

void rec(int node){

	for(int i = 0; i < children[node].size(); ++i)
		rec(children[node][i]);

	int hi = children[node].size() + 2;

	vector< int > delta;

	for(int i = 0; i < children[node].size(); ++i)
		delta.push_back( children[node][i] );

	sort(delta.begin(), delta.end(), 
		[](int a, int b){
			return children[a].size() > children[b].size();
		}
	);

	int current = 0;

	vector<int> answers(hi + 1);

	for(int i = 1; i <= hi; ++i){

		for(int j = delta.size() - 1; j >= 0; --j){
			int& cur = delta[j];
			if(ans[cur].size() <= i){
				delta.pop_back();
				current -= ans[cur][i - 1];
				current += ans[cur][0];
			} else {
				if(i != 1) current -= ans[cur][i - 1];
				current += ans[cur][i];
			}
		}
		answers[i] = current + i;
	}

	ans[node].assign(hi + 1, INF);
	int best = INF;
	for(int i = 2; i <= hi; ++i){
		best = min(best, answers[i - 1]);
		ans[node][i] = best;
	}
	best = INF;
	for(int i = hi - 1; i >= 1; --i){
		best = min(best, answers[i + 1]);
		ans[node][i] = min(ans[node][i], best);
	}
	ans[node][0] = *min_element(answers.begin() + 1, answers.end());
}

int sol(){
	int N;
	scanf("%d", &N);
	children.assign(N, vector<int>());
	ans.assign(N, vector<int>());
	for(int i = 0; i < N; ++i){
		int parent;
		scanf("%d", &parent);
		if(parent){
			children[parent - 1].push_back(i);
		}
	}
	rec(0);
	return ans[0][0];
}


int main(){
	int T;
	scanf("%d", &T);
	for(int i = 1; i <= T; ++i){
		printf("Case #%d: %d\n", i, sol());
	}
}

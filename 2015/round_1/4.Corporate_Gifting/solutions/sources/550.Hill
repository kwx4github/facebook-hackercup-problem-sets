import java.util.*;

class Tree {
    public int minSum;
    public int rColor;
    public int delta;
    public int nColor;
    public List<Tree> children = new ArrayList<Tree>();
}

class D {
    private static void preorder(Tree root, List<Tree> list) {
        list.add(root);
        for (Tree child: root.children) {
            preorder(child, list);
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int ii = 1; ii <= T; ii++) {
            System.out.printf("Case #%d: ", ii);
            // input & prepare
            int N = sc.nextInt();
            Tree[] treeArr = new Tree[N + 1];
            List<Tree> trees = new ArrayList<Tree>();
            for (int j = 1; j <= N; j++) {
                treeArr[j] = new Tree();
            }
            for (int j = 1; j <= N; j++) {
                int manager = sc.nextInt();
                if (manager != 0) {
                    treeArr[manager].children.add(treeArr[j]);
                }
            }
            preorder(treeArr[1], trees);
            // solve
            for (int i = trees.size() - 1; i >= 0; i--) {
                if (trees.get(i).children.size() == 0) {
                    trees.get(i).minSum = 1;
                    trees.get(i).rColor = 1;
                    trees.get(i).delta = 1;
                    trees.get(i).nColor = 2;
                } else {
                    int minTotal = 0;
                    int[] colorAdd = new int[trees.get(i).children.size() + 3];
                    for (int k = 1; k <= trees.get(i).children.size() + 2; k++) {
                        colorAdd[k] = k;
                    }
                    for (int k = 0; k < trees.get(i).children.size(); k++) {
                        minTotal += trees.get(i).children.get(k).minSum;
                        colorAdd[trees.get(i).children.get(k).rColor] += trees.get(i).children.get(k).delta;
                    }
                    int sum1 = Integer.MAX_VALUE;
                    int sum2 = Integer.MAX_VALUE;
                    int color1 = 0;
                    int color2 = 0;
                    for (int k = 1; k <= trees.get(i).children.size() + 2; k++) {
                        int value = colorAdd[k];
                        if (value < sum1) {
                            color2 = color1;
                            sum2 = sum1;
                            color1 = k;
                            sum1 = value;
                        } else if (value < sum2) {
                            color2 = k;
                            sum2 = value;
                        }
                    }
                    trees.get(i).minSum = sum1 + minTotal;
                    trees.get(i).rColor = color1;
                    trees.get(i).delta = sum2 - sum1;
                    trees.get(i).nColor = color2;
                }
            }
            System.out.println(trees.get(0).minSum);
        }
    }
}

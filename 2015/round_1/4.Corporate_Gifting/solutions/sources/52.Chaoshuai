#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
#include <climits>
#include <iostream>
#include <algorithm>
using namespace std;

const int MAXN = 211111;
const int MAXC = 30;
const int INF = 0x3F3F3F3F;

vector<int> G[MAXN];
int dep[MAXN];
int size[MAXN];
int cnt[2];
int dp[MAXN][MAXC + 1];
int n;
int deg[MAXN];

void dfs(int fa, int u) {
  dep[u] = fa == -1 ? 0 : dep[fa] + 1;
  size[u] = 1;
  for (auto v : G[u]) {
    if (v == fa) continue;
    dfs(u, v);
    size[u] += size[v];
  }
  for (int k = 1; k <= MAXC; ++k) {
    int tmp = 0;
    for (auto v : G[u]) {
      int min_val = INT_MAX;
      for (int j = 1; j <= MAXC; ++j) {
        if (j == k) continue;
        min_val = min(min_val, dp[v][j]);
      }
      tmp += min_val;
    }
    dp[u][k] = tmp + k;
  }
}

vector<int> toposort() {
  for (int u = 0; u < n; ++u) {
    for (auto v : G[u]) {
      ++deg[v];
    }
  }
  queue<int> q;
  for (int i = 0; i < n; ++i) {
    if (deg[i] == 0) {
      q.push(i);
    }
  }
  vector<int> order;
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    order.push_back(u);
    for (auto v : G[u]) {
      deg[v]--;
      if (deg[v] == 0) {
        q.push(v);
      }
    }
  }
  return order;
}

int main() {
  int cases;
  scanf("%d", &cases);
  getchar();
  for (int T = 0; T < cases; ++T) {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
      G[i].clear();
    }
    for (int i = 0; i < n; ++i) {
      int u;
      scanf("%d", &u);
      if (u == 0) continue;
      --u;
      G[u].push_back(i);
    }
    memset(cnt, 0, sizeof(cnt));
    int ans = INT_MAX;
    // dfs(-1, 0);
    vector<int> order = toposort();
    for (int i = order.size() - 1; i >= 0; --i) {
      int u = order[i];
      for (int k = 1; k <= MAXC; ++k) {
        int tmp = 0;
        for (auto v : G[u]) {
          int min_val = INT_MAX;
          for (int j = 1; j <= MAXC; ++j) {
            if (j == k) continue;
            min_val = min(min_val, dp[v][j]);
          }
          tmp += min_val;
        }
        dp[u][k] = tmp + k;
      }
    }
    printf("Case #%d: ", T + 1);
    for (int i = 1; i <= MAXC; ++i) {
      // printf("%d\n", dp[0][i]);
      ans = min(ans, dp[0][i]);
    }
    printf("%d\n", ans);
  }
  return 0;
}

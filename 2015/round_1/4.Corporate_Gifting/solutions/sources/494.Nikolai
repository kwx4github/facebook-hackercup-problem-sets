#include <cstdio>
#include <cassert>
#include <map>
#include <vector>
#include <algorithm>
#include <cstring>

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;
  

const int MAXN = (int)2e5 + 123;
vector<int> g[MAXN];
vector<pair<long long, int> > res[MAXN];

void dfs(int s) {
	map<int, long long> add;
	long long sum = 0;
	for (auto x : g[s]) {
		dfs(x);
		sum += res[x][0].first;
		add[res[x][0].second] += res[x][1].first - res[x][0].first;
	}
	int skip = 0;
	for (int i = 1; skip < 3; i++) {
		if (!add.count(i)) skip++;
		assert(add[i] >= 0);
		long long rr = i * (!!s) + sum + add[i];
		res[s].push_back(make_pair(rr, i));
	}
	sort(res[s].begin(), res[s].end());
	res[s].resize(2);
	/*eprintf("dfs %d\n", s);
	for (auto x : res[s]) {
		eprintf("%d -> %lld\n", x.second, x.first);
	}*/
}

void solve(int test) {
	int N;
	scanf("%d", &N);
	for (int i = 0; i <= N; i++) {
		g[i].clear();
		res[i].clear();
	}
	for (int i = 1; i <= N; i++) {
		int p;
		scanf("%d", &p);
		g[p].push_back(i);
	}
	dfs(0);
	printf("Case #%d: %lld\n", test, res[0][0].first);
}

int main() {
	int T;
	scanf("%d", &T);
	for (int test = 1; test <= T; test++) solve(test);
}

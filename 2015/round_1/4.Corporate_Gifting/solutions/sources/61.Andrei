import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class D {

	private Scanner sc;
	private BufferedWriter out;
	
	public static void main(String[] args) throws IOException {
		new D().solve();
	}
	
	private class Children {
		ArrayList<Integer> ch = new ArrayList<Integer>();
	}
	
	private int[] parent;
	private Children[] children;
	private int nrm;
	
	private int[] comp(int node) {
		int[] best = new int[nrm];
		for (Integer child : children[node].ch) {
			int[] bestChild = comp(child);
			int[] bestLeft = new int[nrm];
			bestLeft[0] = bestChild[0];
			for (int i = 1; i < nrm; i++) {
				bestLeft[i] = Math.min(bestLeft[i - 1], bestChild[i]);
			}
			int[] bestRight = new int[nrm];
			bestRight[nrm - 1] = bestChild[nrm - 1];
			for (int i = nrm - 2; i >= 0; i--) {
				bestRight[i] = Math.min(bestRight[i + 1], bestChild[i]);
			}
			for (int i = 0; i < nrm; i++) {
				int toAdd;
				if (i == 0) toAdd = bestRight[1];
				else if (i == nrm - 1) toAdd = bestLeft[nrm - 2];
				else toAdd = Math.min(bestLeft[i - 1], bestRight[i + 1]);
				best[i] += toAdd;
				//System.out.println("  added " + toAdd + " to " + node + "," + i + " because of " + child);
			}
		}
		//System.out.print("Best for " + node);
		for (int i = 0; i < nrm; i++) {
			best[i] += (i + 1);
			//System.out.print(" " + best[i]);
		}
		//System.out.println();
		return best;
	}
	
	private int solve(int nrmm) {
		this.nrm = nrmm;
		int[] best = comp(0);
		int rez = best[0];
		for (int i = 1; i < nrm; i++) {
			rez = Math.min(rez, best[i]);
		}
		return rez;
	}
	
	private String solveCase() {
		int n = sc.nextInt();
		parent = new int[n];
		children = new Children[n];
		for (int i = 0; i < n; i++) {
			children[i] = new Children();
		}
		for (int i = 0; i < n; i++) {
			parent[i] = sc.nextInt();
			if (parent[i] != 0) {
				children[parent[i] - 1].ch.add(i);
			}
		}
		return String.valueOf(solve(20));
	}
	
	private void solve() throws IOException {
		sc = new Scanner(new File("D.in"));
		out = new BufferedWriter(new FileWriter("D.out"));
		int nrt = sc.nextInt();
		for (int i = 0; i < nrt; i++) {
			System.out.println("test " + i);
			out.write("Case #" + (i + 1) + ": " + solveCase());
			out.newLine();
		}
		out.close();
	}
}

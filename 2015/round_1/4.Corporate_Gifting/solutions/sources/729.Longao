#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

typedef pair< pair<int, int>, int> PPI;
const int MAXN = 200005;

PPI dp[MAXN];
vector<int> Tree[MAXN];
bool Mark[MAXN];//, Flag[MAXN];
int Fa[MAXN], Degree[MAXN];

int cases, N;

int main(){
	scanf("%d", &cases);
	for(int xx = 1; xx <= cases; ++xx){
		scanf("%d", &N);
		memset(Mark, false, sizeof(Mark));
		memset(dp, 0, sizeof(dp));
		memset(Fa, 0, sizeof(Fa));
		memset(Degree, 0, sizeof(Degree));
		for(int i = 0; i < MAXN; ++i) Tree[i].clear();
		for(int i = 1; i <= N; ++i){
			int x;
			scanf("%d", &x);
			Tree[x].push_back(i);
			Fa[i] = x;
			Degree[x]++;
			Mark[x] = true;
		}
		queue<int> Que;
		for(int i = 1; i <= N; ++i)
			if(!Mark[i]){
				Que.push(i);
				//Flag[i] = true;
			}
		while(!Que.empty()){
			// dp
			int x = Que.front();
			Que.pop();
			//Flag[x] = false;
			if(x == 0) continue;
			int maxv = 1;
			for(int i = 0; i < Tree[x].size(); ++i)
				maxv = max(maxv, dp[Tree[x][i]].first.second);
			PPI tmp = make_pair(make_pair(99999999, -1), 99999999);
			for(int i = 1; i <= maxv + 2; ++i){
				int cnt = i;
				for(int j = 0; j < Tree[x].size(); ++j){
					int y = Tree[x][j];
					//printf("y = %d\n", y);
					if(dp[y].first.second == i) cnt += dp[y].second;
					else cnt += dp[y].first.first;
				}
				//printf("x = %d, i = %d, cnt = %d\n", x, i, cnt);
				if(cnt < tmp.first.first){
					tmp.second = tmp.first.first;
					tmp.first.first = cnt;
					tmp.first.second = i;
				} else if(cnt < tmp.second) {
					tmp.second = cnt;
				}
			}
			dp[x] = tmp;
			Degree[Fa[x]]--;
			if(Degree[Fa[x]] == 0)
				Que.push(Fa[x]);
		}
		printf("Case #%d: %d\n", xx, dp[1].first.first);
	}
}

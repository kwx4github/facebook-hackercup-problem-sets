using System;
using System.Collections.Generic;
using System.Linq;

namespace SRM_CS
{

    class Program
    {
        const int MAXPP = 10;

        static void Main(string[] args)
        {
            var s = Console.ReadLine();
            int T = int.Parse(s);
            for (int t = 1; t <= T; ++t)
            {
                Console.Write("Case #" + t.ToString() + ": ");

                int n = int.Parse(Console.ReadLine());
                
                int[,] ppmm = new int[n, MAXPP];
                int[] parentList = new int[n];
                int[] childrenCount = new int[n];

                string input = Console.ReadLine();
                string[] split = input.Split(' ');
                for (int i = 0; i < n; i++)
                {
                    parentList[i] = Int32.Parse(split[i]) - 1;
                    if (parentList[i] >= 0)
                        childrenCount[parentList[i]]++;

                    for (int j = 0; j < MAXPP; j++)
                    {
                        ppmm[i, j] = j + 1;
                    }
                }

                Queue<int> queue = new Queue<int>();

                for (int i = 0; i < childrenCount.Length; i++)
                {
                    if (childrenCount[i] == 0)
                    {
                        queue.Enqueue(i);
                    }
                }

                while (queue.Count != 0)
                {
                    int process = queue.Dequeue();

                    int parent = parentList[process];

                    if (parent == -1) continue;

                    int[] withoutPP = Enumerable.Repeat(Int32.MaxValue, MAXPP).ToArray();

                    for (int pp = 0; pp < withoutPP.Length; pp++)
                    {
                        for (int j = 0; j < MAXPP; j++)
                        {
                            if (j != pp)
                            {
                                withoutPP[pp] = Math.Min(withoutPP[pp], ppmm[process, j]);
                            }
                        }
                    }

                    for (int pp = 0; pp < withoutPP.Length; pp++)
                    {
                        ppmm[parent, pp] += withoutPP[pp];
                    }

                    childrenCount[parent]--;

                    if (childrenCount[parent] == 0) queue.Enqueue(parent);
                }

                int result = Int32.MaxValue;
                for (int pp = 0; pp < MAXPP; pp++)
                {
                    result = Math.Min(result, ppmm[0, pp]);
                }

                Console.WriteLine(result);
            }
        }
    }
}

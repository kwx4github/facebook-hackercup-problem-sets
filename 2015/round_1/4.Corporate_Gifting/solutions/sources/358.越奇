/*
ID: Sfiction
COMP: 2015HackerCup
ROUND: 1
PROB: D
*/
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

const int MAXN=2E5+100;
const long long INF=1LL<<50;

struct node{
	long long min[2];
	int num;
	int fa,son;

	void clear(){
		min[0]=min[1]=INF;
		num=fa=son=0;
	}

	void better(long long sum,int cost){
		if (sum<min[0]){
			min[1]=min[0];
			min[0]=sum;
			num=cost;
		}
		else if (sum<min[1])
			min[1]=sum;
	}
}f[MAXN];

int n;
vector<int> edge[MAXN];
int len,list[MAXN][2];

queue<int> Q;

int cmp(const void *a,const void *b){
	return *(int *)a-*(int *)b;
}

void solve(int u){
	long long temp,sum=0;
	len=edge[u].size();
	for (int i=len-1;i>=0;--i){
		sum+=f[edge[u][i]].min[0];
		list[i][0]=f[edge[u][i]].num;
		list[i][1]=edge[u][i];
	}
	qsort(list,len,sizeof(list[0]),cmp);
	int cnt=0;
	for (int j,i=0,cost=1;cnt<2;++cost){
		temp=sum;
		for (j=i;j<len && list[j][0]==cost;++j)
			temp+=f[list[j][1]].min[1]-f[list[j][1]].min[0];
		f[u].better(temp+cost,cost);
		cnt+=j==i;
		i=j;
	}
}

int main(){
	int cas;
	scanf("%d",&cas);
	for (int casi=1;casi<=cas;++casi){
		scanf("%d",&n);
		for (int i=0;i<=n;++i){
			edge[i].clear();
			f[i].clear();
		}
		for (int i=1;i<=n;++i){
			scanf("%d",&f[i].fa);
			edge[f[i].fa].push_back(i);
			++f[f[i].fa].son;
		}
		for (int i=1;i<=n;++i)
			if (f[i].son==0)
				Q.push(i);
		int u;
		while (!Q.empty()){
			u=Q.front();
			Q.pop();
			solve(u);
			--f[f[u].fa].son;
			if (f[f[u].fa].son==0)
				Q.push(f[u].fa);
		}
		printf("Case #%d: ",casi);
		cout<<f[1].min[0]<<endl;
	}
	return 0;
}

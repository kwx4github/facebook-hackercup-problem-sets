#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <vector>
#include <queue>
using namespace std;
#define MAXN 200000

int parent[MAXN+10];
int nchild[MAXN+10];
int gift[MAXN+10];
vector<int> memo[MAXN+10];
int dump[MAXN+10];
void init(){
     memset(nchild,0,sizeof(nchild));
     memset(gift,0,sizeof(gift));
     for (int i=0;i<MAXN+1;++i) memo[i].clear();
}

int getGift(vector<int> v){
    for (int i=0;i<=v.size()+5;++i) dump[i]=0;
    for (int i=0;i<v.size();++i) dump[v[i]]++;
    
    for (int i=1;i<=v.size()+5;++i) if (dump[i]==0) return i;
}

void solve(){
     printf(" ");
     
     init();
     int n;
     scanf("%d",&n);
     for (int i=1;i<=n;++i){
         scanf("%d",&parent[i]);
         nchild[parent[i]]++;
     }
     
     vector<int> leaf;
     for (int i=1;i<=n;++i){
         if (nchild[i]==0){
            leaf.push_back(i);
            gift[i] = 1;
         }
     }
     
     
     for (;;){
         if (leaf[0] == 0) break;
         //for (int i=0;i<leaf.size();++i) printf("%d ",leaf[i]); printf("\n");
         vector<int> ctr;
         for (int i=0;i<leaf.size();++i){
             memo[parent[leaf[i]]].push_back(gift[leaf[i]]);
             nchild[parent[leaf[i]]]--;
             if (nchild[parent[leaf[i]]]==0){
                ctr.push_back(parent[leaf[i]]);
             }
         }
         for (int i=0;i<ctr.size();++i){
             gift[ctr[i]] = getGift(memo[ctr[i]]);
             //cout << "CHK " << gift[ctr[i]] << endl;
             memo[ctr[i]].clear();
         }
         leaf = ctr;
     }
     int ret=0;
     for (int i=1;i<=n;++i){
         ret+=gift[i];
         //printf("%d ",gift[i]);
     }
     //printf("\n");
     printf("%d\n",ret);
}

int main(){
    int ntest;
    scanf("%d",&ntest);
    for (int test=1;test<=ntest;++test){
        printf("Case #%d:", test);
        solve();
    }
    return 0;
}

#!/usr/bin/python

# print repr(st)
# maze = [[['#' for i in range(N+2)] for i in range(M+2)] for i in range(4)]
# (M, N) = map(int, f.readline().split())
# l = f.readline()
import argparse
lookup = []
depth = []
results = []


def doit():
    global lookup, debth, results
    nn = int(f.readline())
    hier = map(int, f.readline().split())
    lookup = [[] for n in range(nn+1)]
    debth = [[] for n in range(nn+1)]
    results = [[] for n in range(nn+1)]
    for n in range(nn):
        e = n+1
        m = hier[n]
        lookup[m].append(e)

    debth[0] = [1]
    todo = [1]
    deep = 0
    while len(todo) > 0:
        deep += 1
        nextodo = []
        for tod in todo:
            debth[deep].append(tod)
            for nextod in lookup[tod]:
                nextodo.append(nextod)
        todo = nextodo

    for deep in range(nn, 0, -1):
        for emp in debth[deep]:
            results[emp] = calc(emp)


    (mincost, opcost, at) = results[1]
    return mincost


def calc(head):
    global lookup, results
    empl = lookup[head]
    if len(empl) == 0:
        return 1, 1, 1
    opcosts = {}
    mincosts = 0
    for emp in empl:
        (mincost, opcost, at) = results[emp]
        mincosts += mincost
        if at in opcosts:
            opcosts[at] += opcost
        else:
            opcosts[at] = opcost + at

    i = 1
    while i in opcosts:
        i += 1
    opcosts[i] = i
    while i in opcosts:
        i += 1
    opcosts[i] = i

    minopcost = 999888
    minat = 0
    for at in opcosts:
        opcost = opcosts[at]
        if opcost < minopcost:
            minopcost = opcost
            minat = at

    secminopcost = 999888
    for at in opcosts:
        opcost = opcosts[at]
        if opcost < secminopcost and at != minat:
            secminopcost = opcost

    return mincosts + minopcost, secminopcost - minopcost, minat

parser = argparse.ArgumentParser()
parser.add_argument("filename", help="The filename to be processed")
args = parser.parse_args()
if args.filename:
    with open(args.filename) as f:
        cases = int(f.readline())
        for case in range(1, cases+1):
            print ("Case #" + str(case) + ":"), doit()
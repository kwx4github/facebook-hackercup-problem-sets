#include<cstdio>
#include<vector>
using namespace std;

vector<int>G[200011];
vector<long long>costs[200011];

pair<long long, pair<long long, long long> > dp(int v) {
	if(G[v].size() <= 0) return make_pair(1LL * 1, make_pair(1LL * 1, 1LL * 1));
	costs[v].resize(G[v].size() + 3);
	long long overall = 0;
	for(int i=0;i<G[v].size();i++) {
		int next = G[v][i];
		pair<long, pair<long, long long> >ans = dp(next);
		pair<long long, long long>cost = ans.second;
		overall += ans.first;
		if(cost.first <= G[v].size()+2) costs[v][cost.first] += cost.second;
	}
	costs[v][0] = 20000000000000000;
	long long best = 1, sec_best = 0;
	for(long long i=2;i<=G[v].size()+2;i++) {
		if(costs[v][i] + i < costs[v][best] + best) {
			sec_best = best;
			best = i;
		} else if(costs[v][i] + i < costs[v][sec_best] + sec_best) sec_best = i;
	}
	long long lowest_cost = overall + costs[v][best] + best;
	long long higher_cost = overall + costs[v][sec_best] + sec_best;
	return make_pair(lowest_cost, make_pair(best, higher_cost - lowest_cost));
}

int main() {
	int t;
	scanf("%d", &t);
	for(int q=1;q<=t;q++) {
		int n;
		scanf("%d", &n);
		for(int i=0;i<n;i++) {
			int boss;
			scanf("%d", &boss);
			if(i == 0) continue;
			boss--;
			G[boss].push_back(i);
		}
		printf("Case #%d: %lld\n", q, dp(0).first);
		for(int i=0;i<n;i++) {
			costs[i].clear();
			G[i].clear();
		}
	}
	return 0;
}
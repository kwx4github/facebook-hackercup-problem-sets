#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

int dp[402020][20],min1[402020][20],min2[402020][20],fa[402020],last[402020],len,K;

struct Edge
{
    int v,next;
}e[402020];

void addedge(int u,int v)
{
    e[++len].v=v;
    e[len].next=last[u];
    last[u]=len;
}

void dfs(int i)
{
    for (int j=1;j<=K;j++) dp[i][j]=j;
    for (int j=last[i];j;j=e[j].next)
        if (e[j].v!=fa[i])
        {
            int v=e[j].v;
            dfs(v);
            for (int k=1;k<=K;k++)
                dp[i][k]+=min(min1[v][k-1],min2[v][k+1]);
        }
    min1[i][1]=dp[i][1];
    for (int j=2;j<=K;j++) min1[i][j]=min(min1[i][j-1],dp[i][j]);
    min2[i][K]=dp[i][K];
    for (int j=K-1;j>=1;j--) min2[i][j]=min(min2[i][j+1],dp[i][j]);
}

int main()
{
    int size = 256 << 20; // 256MB
    char *p = (char*)malloc(size) + size;
    __asm__("movl %0, %%esp\n" :: "r"(p));
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int t,n;
    scanf("%d",&t);
    for (int cas=1;cas<=t;cas++)
    {
        len=0;
        memset(last,0,sizeof(last));
        memset(min1,0x7f,sizeof(min1));
        memset(min2,0x7f,sizeof(min2));
        scanf("%d",&n);
        K=0;
        for (int i=n;i;i>>=1,K++);
        for (int i=1;i<=n;i++)
        {
            scanf("%d",fa+i);
            if (i>1) addedge(fa[i],i);
        }
        dfs(1);
        printf("Case #%d: %d\n",cas,min1[1][K]);
    }
    return 0;
}

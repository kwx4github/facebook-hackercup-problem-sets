#include<stdio.h>
#include<string.h>
#include<vector>
#include<deque>
#include<unordered_map>
using namespace std;

struct Option {
    int gf, c1, c2;
    Option() {}
    Option(int a, int b, int c):gf(a), c1(b), c2(c) {}
};

int T, N, P[262144], CIN[262144];
vector<Option> OP[262144];

Option merge(vector<Option> &op) {
    int base = 0;
    unordered_map<int, int> M;
    for(int i = 0; i < op.size(); ++i) {
        base += op[i].c1;
        M[op[i].gf] += op[i].c2 - op[i].c1;
    }
    int gf1 = 0, c1 = 0x3fffffff, gf2 = 0, c2 = 0x3fffffff;
    for(auto itr = M.begin(); itr != M.end(); ++itr) {
        int c = base + itr->second + itr->first;
        if(c < c1) {
            gf2 = gf1, c2 = c1;
            gf1 = itr->first, c1 = c;
        } else if(c < c2) {
            gf2 = itr->first, c2 = c;
        }
    }
    for(int i = 1, t = 0; t < 2; ++i) {
        if(M.find(i) != M.end()) continue;
        int c = base + i;
        if(c < c1) {
            gf2 = gf1, c2 = c1;
            gf1 = i, c1 = c;
        } else if(c < c2) {
            gf2 = i, c2 = c;
        }
        ++t;
    }
    return Option(gf1, c1, c2);
}

int main() {
    scanf("%d", &T);
    for(int tt = 1; tt <= T; ++tt) {
        scanf("%d", &N);
        memset(CIN, 0, sizeof(CIN));
        OP[0].clear();
        for(int i = 1; i <= N; ++i) {
            scanf("%d", &P[i]);
            CIN[P[i]]++;
            OP[i].clear();
        }
        deque<int> Q;
        for(int i = 1; i <= N; ++i)
            if(CIN[i] == 0) Q.push_back(i);
        while(!Q.empty()) {
            int now = Q.front();
            Q.pop_front();
            OP[P[now]].push_back(merge(OP[now]));
            --CIN[P[now]];
            if(CIN[P[now]] == 0) Q.push_back(P[now]);
        }
        printf("Case #%d: %d\n", tt, OP[0].front().c1);
    }
}

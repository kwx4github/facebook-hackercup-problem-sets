#include <cstdio>
#include <vector>
using namespace std;

const long long BIG = 2000000000000000LL;

struct Go {
    const long long tc;
    long long n;

    vector< vector<long long> > graph;

    pair< pair<long long,long long>, pair<long long,long long> > solve(int v) {
        vector< pair<pair<long long,long long>, pair<long long,long long>> > children;

        long long maxc = 1;
        for (long long i = 0; i < graph[v].size(); ++i) {
            long long v2 = graph[v][i];
            pair< pair<long long,long long>, pair<long long,long long> > child = solve(v2);
            children.push_back(child);
            maxc = max( max( child.first.first, child.second.first ), maxc );
        }

        pair< pair<long long,long long>, pair<long long,long long> > result = {{0, BIG}, {0, BIG}};

        for (long long k = 1; k <= maxc+1; ++k) {
            long long sum = 0;
            for (long long c = 0; c < children.size(); ++c) {
                sum += (k != children[c].first.first)
                    ? children[c].first.second
                    : children[c].second.second;
            }
            sum += k;
            if (sum < result.first.second) {
                result.second = result.first;
                result.first = pair<long long,long long>(k, sum);
            } else if (sum < result.second.second) {
                result.second = pair<long long,long long>(k, sum);
            }
        }

        return result;
    }

    Go(long long tc): tc(tc) {
        scanf("%lld", &n);
        graph.assign(n, vector<long long>());

        scanf("%*d");
        for (long long v = 1; v < n; ++v) {
            long long v2;
            scanf("%lld", &v2);
            v2--;

            graph[v2].push_back(v);
        }

        pair< pair<long long,long long>, pair<long long,long long> > globresult = solve(0); 

        printf("Case #%lld: %lld\n", tc, globresult.first.second);
    }
};

int main() {
    long long N;
    scanf("%lld", &N);

    for (long long i = 1; i <= N; ++i)
        Go a(i);
}

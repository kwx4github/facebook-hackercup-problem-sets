import java.io.*;
import java.util.*;


public class CorporateGifting 
{
	public static final int MAX = 200000;
	
	public static void main(String[] args) throws Exception
	{
		Scanner s = new Scanner(new File("corporate_gifting.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("output.txt")));
		int n_case = s.nextInt();
		Dipendente[] dip = new Dipendente[MAX];
		//boolean[] valori = new boolean[MAX+1];
		TreeSet<Integer> valori;
		for(int i=1;i<=n_case;i++)
		{
			int n = s.nextInt();
			
			for(int k=0;k<n;k++)
			{
				dip[k] = new Dipendente(k);
			}
			
			for(int k=0;k<n;k++)
			{
				int p = s.nextInt()-1;
				if(p>=0)
				{
					dip[p].nSotto++;
					dip[p].sottomessi.add(dip[k]);
				}
			}
			
			Stack<Dipendente> stack = new Stack<Dipendente>();
			stack.push(dip[0]);
			while(!stack.isEmpty())
			{
				Dipendente d = stack.pop();
				if(!d.preso)
				{
					d.preso = true;
					stack.push(d);
					for (Dipendente dipend : d.sottomessi) 
					{
						stack.push(dipend);
					}
				}
				else
				{
					if(d.nSotto==0)
					{
						d.minimo = 1;
						d.quandoMinimo = 1;
						d.altrimenti = 2;
					}
					else
					{
						int minValNoMin = 1;
						valori = new TreeSet<Integer>();
						
						for (Dipendente dipend : d.sottomessi) 
						{
							valori.add(dipend.quandoMinimo);
						}
						
						for (Integer val : valori)
						{
							if(minValNoMin==val.intValue())
							{
								minValNoMin++;
							}
						}
						
						valori.add(minValNoMin);
						
						for (Integer val : valori)
						{
							int j = val.intValue();
							long min = j;
							for (Dipendente dipend : d.sottomessi) 
							{
								if(j==dipend.quandoMinimo)
								{
									min+=dipend.altrimenti;
								}
								else
								{
									min+=dipend.minimo;
								}
							}
							if(min<d.minimo)
							{
								d.altrimenti = d.minimo;
								d.minimo = min;
								d.quandoMinimo = j;
							}
							else if(min<d.altrimenti)
							{
								d.altrimenti = min;
							}
						}
					}
				}
			}
			bw.write("Case #"+i+": "+dip[0].minimo+"\n");
		}
		bw.close();
		s.close();
	}
}

class Dipendente
{
	public int id;
	public int nSotto;
	public boolean preso;
	public ArrayList<Dipendente> sottomessi;
	public long minimo;
	public int quandoMinimo;
	public long altrimenti;
	
	public Dipendente(int id)
	{
		this.id = id;
		this.nSotto = 0;
		this.sottomessi = new ArrayList<Dipendente>();
		this.preso = false;
		this.minimo=Long.MAX_VALUE;
		this.quandoMinimo=0;
		this.altrimenti=0;
	}
}

#include <iostream>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <string>
#include <ctime>
#include <cmath>
#include <vector>
#include <deque>
#include <string>
#include <cctype>
using namespace std;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define RFOR(i,a,b) for(int i=(a);i>=(b);--i)

#define MAXN 200000
#define MX 4
typedef long long LL;

int n, idx;
vector<vector<int> > children, cr;
int mm[MAXN + 5][MX + 1];

void run() {
    scanf("%d", &n);
    children.assign(n + 1, vector<int>());
    int p;
    scanf("%d", &p);
    FOR(i,2,n) {
        scanf("%d", &p);
        children[p].push_back(i);
    }

    cr.assign(n + 1, vector<int>());
    idx = 1;
    deque<pair<int, int> > que;
    que.push_back(make_pair(1, 1));
    while (!que.empty()) {
        int sz = que.size();
        REP(i,sz) {
            int oldIdx = que[i].first;
            int newIdx = que[i].second;
            REP(j,children[oldIdx].size()) {
                que.push_back(make_pair(children[oldIdx][j], ++idx));
                cr[newIdx].push_back(idx);
            }
        }
        REP(i,sz) que.pop_front();
    }

    RFOR(cur,n,1) {
        FOR(p,1,MX) {
            mm[cur][p] = -1;
            FOR(m,1,MX) {
                if (m == p) continue;
                int sum = m;
                REP(i,cr[cur].size()) sum += mm[cr[cur][i]][m];
                if (mm[cur][p] == -1 || sum < mm[cur][p]) mm[cur][p] = sum;
            }
        }
    }

    int ret = -1;
    FOR(p,1,MX) {
        if (ret == -1 || mm[1][p] < ret) ret = mm[1][p];
    }

    printf("%d\n", ret);
}

int main() {
    int T;
    scanf("%d", &T);
    FOR(t,1,T) {
        printf("Case #%d: ", t);
        run();
    }
    return 0;
}


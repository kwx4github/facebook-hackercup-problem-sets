{-# OPTIONS_GHC -O2 -funbox-strict-fields #-}
{-# LANGUAGE BangPatterns, ViewPatterns, TupleSections #-}
import Control.Applicative
import Control.Exception hiding (mask)
import Control.Monad
import Control.Monad.ST
import Data.Array.Base
import Data.Array.ST (runSTUArray, runSTArray)
import Data.Bits
import qualified Data.ByteString.Char8 as B
import Data.Char
import Data.Function
import Data.Int
import Data.List
import qualified Data.Map as M
import qualified Data.IntMap as IM
import qualified Data.Set as S
import qualified Data.IntSet as IS
import Data.STRef
import GHC.Arr (Array, STArray, Ix(..))
import Debug.Trace

import Data.Fixed
import Data.Time.Clock
import Data.Time.Clock.POSIX
import System.IO

runGCJ :: IO () -> IO ()
runGCJ main_ = do
  t <- readLn
  forM_ [1..t] $ \i -> do
    putStr $ "Case #" ++ shows i ": "
    hPutStr stderr $ shows i "/" ++ shows t ": "
    hFlush stderr
    start <- getPOSIXTime
    main_
    end <- getPOSIXTime
    hPutStrLn stderr $ (shows.msec) (end - start) "ms"
    hFlush stderr

msec :: NominalDiffTime -> Int
msec s = let t = realToFrac s :: Milli in fromEnum t

readInt :: B.ByteString -> Int
readInt bs=case B.readInt bs of{Just(n,_)->n;_->error$"readInt error : bs = "++show bs;}

unsafeModify :: (MArray a e m, Ix i) => a i e -> Int -> (e -> e) -> m ()
unsafeModify a i f=unsafeRead a i>>=unsafeWrite a i.f
{-# INLINE unsafeModify #-}

main :: IO ()
main = runGCJ $ do
    n <- readLn
    xs <- map (subtract 1.readInt).B.words <$> B.getLine
    print $ solve n xs

solve :: Int -> [Int] -> Int64
solve n xs = sum $ map (unsafeAt res) [0..n-1]
   where
     !gr = mkGraph n xs
     !res = runSTUArray $ do
       arr <- newArray (0,n-1) 0 :: ST s (STUArray s Int Int64)

       let dfs v = do
             mapM_ dfs $ unsafeAt gr v
             ws <- mapM (unsafeRead arr) $ unsafeAt gr v
             unsafeWrite arr v . head $ foldl' del [1..] ws
       dfs 0

       return arr

type Vertex = Int
type GraphST s = STArray s Vertex [Vertex]
type Graph = Array Vertex [Vertex]

mkGraph :: Int -> [Vertex] -> Graph
mkGraph n xs = runSTArray $ do
  mgr <- newArray (0,n-1) [] :: ST s (STArray s Vertex [Vertex])
  forM_ (zip [1..] (tail xs)) $ \(child, parent) -> do
    unsafeModify mgr parent (child:)
  return mgr

del :: [Int64] -> Int64 -> [Int64]
del (x:xs) y
  | x == y = xs
  | x < y = x : del xs y
  | otherwise = x:xs
del [] _ = []

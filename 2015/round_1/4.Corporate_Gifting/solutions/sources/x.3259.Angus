#include <cstdio>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;

#define min(a,b) (a > b ? b : a)

int m[200001][11];
vector<int> adj[200001];
int ord[200001];

int f(int node, int val) {
  if (m[node][val])
    return m[node][val];
  int total = 0;
  for (int i = 0; i < adj[node].size(); i++) {
    int nv = 42424242;
    for (int j = 1; j <= 10; j++) {
      if (j == val)
        continue;
      nv = min(nv, m[adj[node][i]][j]);
    }
    //printf(" nv %d for %d in %d %d\n", nv, adj[node][i], node, val);
    total += nv;
  }
  total += val;
  m[node][val] = total;
  //printf("returning %d for %d %d\n", total, node, val);
  return total;
}

int main() {
  int t, n, s;
  scanf("%d", &t);
  for (int T = 1; T <= t; T++) {
    memset(m, 0, sizeof m);
    printf("Case #%d: ", T);
    scanf("%d", &n);
    scanf("%d", &s);
    for (int i = 2; i <= n; i++) {
      scanf("%d", &s);
      adj[s].push_back(i);
    }
    // get ordering from reversed bfs
    queue<int> q;
    q.push(1);
    ord[n] = 1;
    int oi = n-1;
    while (q.size()) {
      int F = q.front();
      q.pop();
      //printf("front %d\n", F);
      for (int i = 0; i < adj[F].size(); i++) {
        q.push(adj[F][i]);
        //printf("at %d %d\n", F, adj[F][i]);
        ord[oi] = adj[F][i];
        oi--;
      }
    }
    for (int i = 1; i <= n; i++) {
      //printf("%d ", ord[i]);
      for (int j = 1; j <= 10; j++)
        f(ord[i],j);
    }
    int a = 42424242;
    for (int i = 1; i <= 10; i++) {
      //printf("%d %d\n", i, f(1,i));
      a = min(a, m[1][i]);
      fprintf(stderr, "%d %d\n", i, m[1][i]);
    }
    printf("%d\n", a);
    for (int i = 1; i <= n; i++)
      adj[i].clear();
    /*for (int i = 1; i <= n; i++) {
      printf("%d:", i);
      for (int j = 0; j < adj[i].size(); j++)
        printf(" %d", adj[i][j]);
      printf("\n");
      adj[i].clear();
    }*/
  }
  return 0;
}

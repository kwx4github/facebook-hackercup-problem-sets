#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
using namespace std;
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long i64;
typedef unsigned long long u64;
const int inf = 1e9+100500;
const int maxn = 200500;

int n;
vi e[maxn];
vi d[maxn];
pii mx[maxn];
int k;

void scan() {
    scanf("%d", &n);
    forn(i, n) e[i].clear();
    forn(i, n) {
        int p;
        scanf("%d", &p);
        if (i) e[p-1].pb(i);
    }
}

void dfs(int v) {
    d[v].clear();
    int m1 = inf, m2 = inf;
    for (auto to : e[v]) {
        dfs(to);
    }
    d[v].resize(k);
    forn(i, k) {
        int s = i;
        for (auto to : e[v]) {
            if (d[to][i] == mx[to].fi) {
                s += mx[to].se;
            } else {
                s += mx[to].fi;
            }
        }
        assert(s < inf);
        d[v][i] = s;
        if (s < m1) { m2 = m1; m1 = s; }
        else if (s < m2) { m2 = s; }
    }
    mx[v] = mp(m1, m2);
}

void solve(int cs) {
    cerr << "Case " << cs << endl;
    scan();
    int br = inf;
    for (k = 2; k < 15; ++k) {
        dfs(0);
        int tr = mx[0].fi;
        cerr << " " << k << ": " << tr << endl;
//         if (tr == br) {
//             break;
//         }
        br = tr;
    }
    printf("Case #%d: %d\n", cs, br + n);
}

int main() {
#ifdef HOME
//     freopen("input.txt", "r", stdin);
#endif

    int t;
    scanf("%d", &t);
    forn(i, t) {
        solve(i+1);
    }

#ifdef HOME
    cerr << "Time elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

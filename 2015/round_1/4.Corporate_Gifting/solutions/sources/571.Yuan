import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CorporateGifting {

    static List<Integer>[] tree;
    static int N;
    static int M = 20;

    static long[] dfs(int u, int parent) {
        long[] res = new long[M + 1];
        for (int i = 1; i <= M; i++)
            res[i] = i;
        for (int v : tree[u])
            if (v != parent) {
                long[] ch = dfs(v, u);
                int first = 1;
                for (int i = 1; i <= M; i++)
                    if (ch[i] < ch[first]) first = i;

                for (int i = 1; i <= M; i++)
                    if (i != first) res[i] += ch[first];

                int second = -1;
                for (int i = 1; i <= M; i++) {
                    if (i == first) continue;
                    if (second == -1 || ch[i] < ch[second]) second = i;
                }
                res[first] += ch[second];
            }
        return res;
    }

    @SuppressWarnings("unchecked")
    public static void main(String[] args) throws FileNotFoundException {
        Scanner cin = new Scanner(new File("corporate_gifting.txt"));
        PrintStream cout = new PrintStream("corporate_gifting.out");
        // Scanner cin = new Scanner(new File("A-large-practice.in"));
        // PrintStream cout = new PrintStream("A-large-practice.out");
        // Scanner cin = new Scanner(System.in);
        // PrintStream cout = System.out;

        int _case = 0;
        for (int T = cin.nextInt(); T > 0; T--) {
            _case++;

            N = cin.nextInt();
            tree = new List[N + 1];
            for (int i = 0; i <= N; i++)
                tree[i] = new ArrayList<Integer>();
            for (int i = 1; i <= N; i++) {
                int parent = cin.nextInt();
                if (parent == 0) continue;
                tree[i].add(parent);
                tree[parent].add(i);
            }

            long ans = Long.MAX_VALUE;
            if (N == 1) ans = 1;
            else {
                M = Math.min(N, 25);
                long[] res = dfs(1, -1);
                for (int i = 1; i <= M; i++)
                    ans = Math.min(ans, res[i]);
            }
            cout.printf("Case #%d: %d%n", _case, ans);
        }

        cin.close();
        cout.close();
    }
}

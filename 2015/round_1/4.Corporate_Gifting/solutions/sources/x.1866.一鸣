#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

const int MAXN = 200010;

vector<int> G[MAXN];
int fa[MAXN], son[MAXN];
int f[MAXN][3];

int main()
{
    freopen("x.in", "r", stdin);
    freopen("x.txt", "w", stdout);
    int T;
    scanf("%d", &T);
    for(int cas = 1; cas <= T; cas++)
    {
        for(int i = 0; i < MAXN; i++)
        {
            G[i].clear();
            fa[i] = i;
            son[i] = 0;
        }
        queue<int> que;

        int N;
        scanf("%d", &N);
        for(int i = 0; i < N; i++)
        {
            int x;
            scanf("%d", &x);
            fa[i + 1] = x;
            son[x]++;
            G[x].push_back(i + 1);
        }
        for(int i = 1; i <= N; i++)
        {
            if(son[i] == 0)que.push(i);
        }
        while(!que.empty())
        {
            int x = que.front();que.pop();
//            cout<<x<<endl;
            for(int i = 0; i < 3; i++)
            {
                f[x][i] = i + 1;
                for(int j = 0; j < (int)G[x].size(); j++)
                {
                    int s1 = (i + 1) % 3;
                    int s2 = 0^1^2^i^s1;
//                    cout<<i<<" "<<s1<<" "<<s2<<endl;
                    f[x][i] += min(f[G[x][j]][s1], f[G[x][j]][s2]);
                }
            }
            if(--son[fa[x]] == 0)que.push(fa[x]);
        }
        printf("Case #%d: %d\n", cas, min(f[1][0], min(f[1][1], f[1][2])));
    }
    return 0;
}

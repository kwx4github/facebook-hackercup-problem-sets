#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <list>
#include <numeric>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
#define pb push_back
#define sz(v) ((int)(v).size())

int M=50;

int N;
vvi tree;

int top2rootval[200000][2];
int top2bestval[200000][2];

int topsort[200000];

int solve(){
  for(int i=N-1;i>=0;i--) { //reverse topsort
    int node=topsort[i];
    top2bestval[node][0]=top2bestval[node][1]=1000000000;

    int _M = 2;
    for(int c=sz(tree[node])-1;c>=0;c--){
      _M = max(_M, 2 + max(top2rootval[tree[node][c]][0],
                           top2rootval[tree[node][c]][1]));
    }

    for(int rv=0;rv<=_M;rv++) {
      int curval=rv; 
      for(int ch=sz(tree[node])-1;ch>=0;ch--){
        int ch_node=tree[node][ch];
        int ch_best=(top2rootval[ch_node][0]!=rv)?top2bestval[ch_node][0]:
                                                  top2bestval[ch_node][1];
        curval+=ch_best;
      }
      if(curval<top2bestval[node][0]){
        top2bestval[node][1]=top2bestval[node][0];
        top2rootval[node][1]=top2rootval[node][0];
        top2bestval[node][0]=curval;
        top2rootval[node][0]=rv;
      } else if(curval<top2bestval[node][1]){
        top2bestval[node][1]=curval;
        top2rootval[node][1]=rv;
      }
    }
  }
  return top2bestval[0][0]+N;
}

void do_topsort(){
  topsort[0]=0;
  int in_topsort=1;
  for(int i=0;i<in_topsort;i++) {
    int node=topsort[i];
    for(int j=sz(tree[node])-1;j>=0;j--)
      topsort[in_topsort++]=tree[node][j];
  }
}

int main()
{
  int i=0,j=0,k=0;
  int runs=0,run=0;
  scanf("%d",&runs);
  for(run=1;run<=runs;run++){
    scanf("%d",&N);
    tree=vvi(N);
    for(i=0;i<N;i++){
      scanf("%d",&j);
      if(i){
        tree[j-1].pb(i);
      }
    }
    do_topsort();
    int res=solve();
    printf("Case #%d: %d\n", run,res);
  }

  return 0;
}

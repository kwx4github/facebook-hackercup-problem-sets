#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <fstream>
#include <climits>
#include <stack>
using namespace std;

int h[200001];
int N;
int visited[200001];
bool flag=false;

void DFS(int vertex)
{
    stack<int> V;
    while(!V.empty())
    {
        vertex=V.top();
        V.pop();
        for(int i=0;i<N;i++)
        {
            if(h[i]==vertex && !(visited[i+1]))
            {
                if(visited[vertex]==1)
                {
                    visited[i+1]=2;
                }
                else if(visited[vertex]==2)
                {
                    visited[i+1]=1;
                }
                else if(visited[vertex]==3)
                {
                    if(flag){visited[i+1]=2;flag=false;}
                    else{visited[i+1]=1;}
                }
                V.push(i+1);
            }
        }
    }

}

int main()
{
    int val=0;
    int curVal=0;
    int T;
    ofstream MyFile;
    MyFile.open("CorporateGiftingOut.txt");
    ifstream InpFile("corporate_gifting.txt");

    InpFile>>T;

    for(int iter=1;iter<=T;iter++)
    {
        memset(visited,0,sizeof(visited));
        val=INT_MAX;
        InpFile>>N;
        for(int i=0;i<N;i++)
        {
            InpFile>>h[i];
        }

        for(int color=1;color<=3;color++)
        {
            curVal=0;
            memset(visited,0,sizeof(visited));
            visited[1]=color;
            flag=true;
            DFS(1);
            for(int i=1;i<=N;i++)
            {
                curVal+=visited[i];
            }
            val=min(val,curVal);
        }

        MyFile<<"Case #"<<iter<<": "<<val<<endl;
    }
    return 0;
}

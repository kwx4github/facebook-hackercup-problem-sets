#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < int(b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 2e5 + 123;
const int MAXC = 100;
const int inf = 1e9;

struct Ret {
  int c;
  int val;
};

vector<int> E[MAXN];

pair<Ret, Ret> solve(int x, int dad) {
  vector<pair<Ret, Ret> > kids;

  for (int y : E[x]) {
    if (dad == y) continue;
    kids.push_back(solve(y, x));
  }

  Ret A = {0, inf}, B = {1, inf};
  REP(c, MAXC) {
    int suma = c+1;
    for (auto kid : kids) {
      if (c == kid.first.c) suma += kid.second.val;
      else suma += kid.first.val;
    }
    if (suma < A.val) {
      B = A;
      A = {c, suma};
    } else if (suma < B.val) {
      B = {c, suma};
    }
  }

  return make_pair(A, B);
}

int main(void) {
  int ntc; scanf("%d", &ntc);

  REP(tc, ntc) {
    int n; scanf("%d", &n);
    REP(i, n) E[i].clear();

    REP(i, n) {
      int x; scanf("%d", &x); --x;
      if (x != -1) E[x].push_back(i);
    }

    auto ret = solve(0, -1);
    printf("Case #%d: %d\n", tc+1, ret.first.val);
  }
  return 0;
}   

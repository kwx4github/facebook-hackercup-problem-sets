#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>

using namespace std;

#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>

const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 500001;

inline void autocomplete(){
       static int number = 1;
       cout << "Case #" << number << ": ";
       number ++;
}

const int t = 50;
int p[Nmax];
vector< vector<int> > g;
int n;
int dp[300000][t + 4] = {0};
int pref[300000][t + 4] = {0};
int suff[300000][t + 4] = {0};

void doo(int v){
     int sons = g[v].size();
     for (int i = 1; i < t ;i ++)
      dp[v][i] = i;

     if (sons > 0)
     for (int i = 0 ;i < sons; i ++){
         //dfs(g[v][i]);
         int u = g[v][i];
         for (int color = 1; color < t; color ++){
             int res = pref[u][color - 1];
             res = min(res , suff[u][color + 1]);
             /*for (int sub_color = 1; sub_color < 56; sub_color ++){
                 if (sub_color == color) continue;
                 res = min(res , dp[u][sub_color]);
             }*/
             dp[v][color] += res;
         }
     }
     
     pref[v][0] = suff[v][t] = iinf;
     for (int i = 1; i < t; i ++)
         pref[v][i] = min(pref[v][i - 1], dp[v][i]);
     for (int i = t - 1; i > 0 ;i --)
         suff[v][i] = min(suff[v][i + 1], dp[v][i]);
}
int main() {
   ios_base::sync_with_stdio(0);
   freopen("corporate_gifting.txt","r",stdin);
   freopen("corporate_gifting_out.txt","w",stdout);

   int test;
   cin >> test;
   while (test --> 0){
       cin >> n;
       cin >> p[1];
       g.resize(n + 1);
       stack<int> st;
       vector<int> sons(n + 1,0);
       for (int i = 1; i <= n ;i ++){
           g[i].clear();
           for (int j = 1; j < t; j ++)
               dp[i][j] = 0;
       }

       for (int i = 2; i <= n ;i ++){
           cin >> p[i];
           sons[p[i]]++;
           //p[i] = i - 1;
           g[p[i]].push_back(i);
       }
       
       for (int i = 1; i <= n ;i ++)
           if (sons[i] == 0)
              st.push(i); 
       while (!st.empty()){
             int v = st.top();
             st.pop();
             doo(v);
             
             sons[p[v]]--;
             if (sons[p[v]] == 0)
                st.push(p[v]);
       }
       autocomplete();
       int ans = dp[1][t - 1];
       for (int i = 1; i < t - 1;i ++)
           ans = min(ans , dp[1][i]);
       cout << ans << endl;
   }
   return 0;
}

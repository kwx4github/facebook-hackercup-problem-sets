#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <iomanip>
using namespace std;

#define REP(i,N) for (int i = 0; i < (N); ++i)

typedef unsigned int ui;
typedef long long ll;

typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;

stack<int> st;

struct Node
{
    Node() : ix(-1) {}
    Node(int ix_) : ix(ix_) {}

    int ix;
    vector<int> childsIx;

    vector<ll> all;
    ll best;
    int bestIf;
    ll secondBest;
};

vector<Node> gr;

int main()
{
    int caseCount;
    cin >> caseCount;

    for (int csIx = 1; csIx <= caseCount; ++csIx)
    {
        int N;
        cin >> N;

        gr = vector<Node>(N);

        for (int i = 0; i < N; ++i)
        {
            int boss;
            cin >> boss;
            if (i != 0)
            {
                boss--;
                gr[boss].childsIx.push_back(i);
            }
        }

        st.push(0);
        vi vis(N);

        while (!st.empty())
        {
            int curr = st.top();

            if (vis[curr] == 0)
            {
                int M = gr[curr].childsIx.size();
                for (int i = 0; i < M; ++i)
                {
                    st.push(gr[curr].childsIx[i]);
                }
                vis[curr] = 1;
                continue;
            }

            Node & currNode = gr[curr];
            ll bestBest = 0;
            int M = currNode.childsIx.size();
            if (M == 0)
            {
                currNode.best = 1;
                currNode.bestIf = 1;
                currNode.secondBest = 2;
            }
            else
            {
                for (int i = 0; i < M; ++i)
                {
                    bestBest += gr[currNode.childsIx[i]].best;
                }

                currNode.all = vll(M + 2);
                for (int t = 1; t <= M + 1; ++t)
                {
                    currNode.all[t] = t + bestBest;
                }

                for (int i = 0; i < M; ++i)
                {
                    int ch = currNode.childsIx[i];
                    int chBestIf = gr[ch].bestIf;
                    if (chBestIf < M + 2)
                    {
                        currNode.all[chBestIf] += (gr[ch].secondBest - gr[ch].best);
                    }
                }

                currNode.best = currNode.all[1];
                currNode.bestIf = 1;
                for (int i = 2; i <= M + 1; ++i)
                {
                    if (currNode.all[i] < currNode.best)
                    {
                        currNode.best = currNode.all[i];
                        currNode.bestIf = i;
                    }
                }

                currNode.secondBest = -1;
                for (int i = 1; i <= M + 1; ++i)
                {
                    if (i == currNode.bestIf)
                    {
                        continue;
                    }

                    if (currNode.secondBest == -1 || currNode.all[i] < currNode.secondBest)
                    {
                        currNode.secondBest = currNode.all[i];
                    }
                }
            }

            st.pop();

        }

        cout << "Case #" << csIx << ": " << gr[0].best << endl;
    }

    
    return 0;
}
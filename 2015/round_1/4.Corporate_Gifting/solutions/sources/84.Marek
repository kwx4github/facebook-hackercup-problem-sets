#include <bits/stdc++.h>

using namespace std;

const int MaxN = 200005,
       LogMaxN = 20;
int N;

vector<int> adj[MaxN];
int dp[MaxN][LogMaxN];


void cleanup(){
	for(int i = 0; i <= N; i++) adj[i].clear();
}


void input(){
	scanf("%d%*d", &N);
	int u;

	for(int i = 1; i <= N; i++) adj[i].clear();

	for(int i = 2; i <= N; i++){
		scanf("%d", &u);
		adj[u].push_back(i);
		adj[i].push_back(u);
	}
}

bool vis[MaxN];

void dfs(int v, int p){
	vis[v] = true;
	fill(dp[v], dp[v]+LogMaxN, 0);

	for(int i = 1; i < LogMaxN; i++) dp[v][i] = i;

//	fprintf(stderr, "%d\n", v);
	for(int s: adj[v]){
		if(s == p) continue;
		if(vis[s]) continue;
		dfs(s, v);

		int whereBestOne = -1, bestOne = MaxN*LogMaxN,
		    whereBestNd  = -1, bestNd  = MaxN*LogMaxN;

		for(int i = 1; i < LogMaxN; i++){
			if(dp[s][i] < bestOne){
				whereBestNd = whereBestOne;
				bestNd = bestOne;
				whereBestOne = i;
				bestOne = dp[s][i];
			} else if(dp[s][i] < bestNd){
				whereBestNd = i;
				bestNd = dp[s][i];
			}
		}

		for(int i = 1; i < LogMaxN; i++){
			if(i == whereBestOne)
				dp[v][i] += bestNd;
			else
				dp[v][i] += bestOne;
		}
	}

}

void test(){
	input();
//	fprintf(stderr, "%d\n", N);
	fill(vis, vis+MaxN, false);
	dfs(1, 1);
//	fprintf(stderr, "Y\n");

	printf("%d\n", *min_element(dp[1]+1, dp[1]+LogMaxN));


	cleanup();
}

int main(){

	int T;
	scanf("%d", &T);

	for(int i = 1; i <= T; i++){
		printf("Case #%d: ", i);
		test();
	}
}

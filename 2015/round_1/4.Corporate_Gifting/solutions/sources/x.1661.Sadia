#include<bits/stdc++.h>
using namespace std;
#define INF 2000000000
#define MAXN 200006
#define MAXSQ 600
vector < int > Edges[MAXN];
vector < int > recOrder;
int dp[MAXN][MAXSQ];
int vt, vis[MAXN][MAXSQ];
void nsort(int N)
{
    recOrder.clear();
    queue < int > Q;
    Q.push(1);
    int node,i;
    while (!Q.empty())
    {
        node = Q.front();
        Q.pop();
        recOrder.push_back(node);
        for (i=0; i<Edges[node].size(); ++i) Q.push(Edges[node][i]);
    }
    reverse(recOrder.begin(), recOrder.end());
}
int rec(int node, int pv)
{
    int &ret = dp[node][pv];
    if (vis[node][pv] == vt) return ret;
    vis[node][pv] = vt;
    ret = INF;
    int mx = Edges[node].size()+2, i,j,now;
    if (mx >= MAXSQ) mx = MAXSQ-1;
    int temp;
    for (j=1; j<=mx; ++j)
    {
        if (j == pv) continue;
        temp = j;
        for (i=0; i<Edges[node].size(); ++i) temp += rec(Edges[node][i],j);
        if (temp < ret) ret = temp;
        else break;
    }
    return ret;
}
int run2(int node)
{
    int mx = Edges[node].size()+2, temp, ret;
    if (mx >= MAXSQ) mx = MAXSQ-1;
    int i,j,now;
    ret = INF;
    for (j=1; j<=mx; ++j)
    {
        temp = j;
        for (i=0; i<Edges[node].size(); ++i) temp += rec(Edges[node][i],j);
        if (temp < ret) ret = temp;
    }
    return ret;
}
int run(int N)
{
    int n,i,ret;
    for (i=0; i<recOrder.size(); ++i)
    {
        n = recOrder[i];
        ret = run2(n);
    }
    return ret;
}
int main()
{
    //freopen("data.txt", "r", stdin);
    freopen("D.in", "r", stdin);
    freopen("D2.out", "w", stdout);
    int t,T,N,i,p;
    scanf("%d", &T);
    for (t=1; t<=T; ++t)
    {
        scanf("%d", &N);
        for (i=1; i<=N; ++i) Edges[i].clear();
        scanf("%d", &p);
        for (i=2; i<=N; ++i)
        {
            scanf("%d", &p);
            Edges[p].push_back(i);
        }
        nsort(N);
        ++vt;
        printf("Case #%d: %d\n", t, run(N));
    }
    return 0;
}

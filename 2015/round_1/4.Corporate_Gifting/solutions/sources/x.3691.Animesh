import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

class CorporateGifting {

	class Employee implements Comparable<Employee> {
		public int id;
		public int managerId;
		public int receivedGiftValue;
		public ArrayList<Employee> subordinates;

		@Override
		public int compareTo(Employee o) {
			int value = o.id - this.id;
			return value;
		}
	}

	public static void main(String[] args) {
		String inputFilePath = args[0];
		String outputFilePath = args[1];
		CorporateGifting corporateGifting = new CorporateGifting();
		try {
			InputStream is = new FileInputStream(inputFilePath);
			// Scanner in = new Scanner(System.in);
			Scanner in = new Scanner(is);
			OutputStream os = new FileOutputStream(outputFilePath);
			// OutputStreamWriter os = new OutputStreamWriter(System.out);
			PrintWriter pw = new PrintWriter(os);
			// Retrieve the number of test cases
			int t = in.nextInt();
			for (int i = 0; i < t; i++) {
				int minimalGiftTotal = 0;
				// Get the number of employees
				int employeeCount = in.nextInt();
				ArrayList<Employee> employeeList = new ArrayList<CorporateGifting.Employee>();
				for (int j = 0; j < employeeCount; j++) {
					Employee employee = corporateGifting.new Employee();
					employee.id = j + 1;
					int mangerId = in.nextInt();
					employee.managerId = mangerId;
					Employee manager = null;
					if (employee.managerId != 0) {
						try {
							manager = employeeList.get(mangerId - 1);
						} catch (IndexOutOfBoundsException e) {
							manager = corporateGifting.new Employee();
							manager.id = mangerId;
						}
					} else {
						manager = corporateGifting.new Employee();
						manager.id = 0;
					}
					if (manager.subordinates == null) {
						manager.subordinates = new ArrayList<CorporateGifting.Employee>();
					}
					manager.subordinates.add(employee);
					employeeList.add(employee);
				}

				// Sort the employees based on decreasing order of id
				Collections.sort(employeeList);
				for (Employee employee : employeeList) {
					// Find their gift value
					// Start with 1 if their subordinate has the same value
					// increment
					// Check all subordinates
					ArrayList<Employee> employees = employee.subordinates;
					for (int giftValue = 1; giftValue <= employeeCount; giftValue++) {
						boolean uniqueGiftValue = true;
						if (employees != null) {
							for (Employee sub : employees) {
								if (sub.receivedGiftValue != 0
										&& sub.receivedGiftValue == giftValue) {
									uniqueGiftValue = false;
								}
							}
						}
						if (uniqueGiftValue) {
							employee.receivedGiftValue = giftValue;
							break;
						}

					}
					minimalGiftTotal += employee.receivedGiftValue;
				}
				// Find out the gift values
				String outputString = "Case #" + (i + 1) + ": "
						+ minimalGiftTotal;
				pw.println(outputString);
			}

			in.close();
			pw.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

}

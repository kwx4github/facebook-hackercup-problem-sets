import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node {
		long num;
		int k;
		int index;

		node(long m, int k, int index) {
			num = m;
			this.k = k;
			this.index = index;
		}

	}

	public static class point implements Comparable<point> {
		long x;
		long y;
		long b;

		point(long x, long y, long b) {
			this.x = x;
			this.y = y;
			this.b = b;
		}

		@Override
		public int compareTo(point o) {
			if (k == 0)
				return (int) (o.x - x);
			else
				return (int) (y - o.y);

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[] = new boolean[10000005];
	public static ArrayList<Integer> prime = new ArrayList();

	// public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				// pp.add(i);
				for (long j = (long) i * (long) i; j <= k; j += i) {
					ch[(int) j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static ArrayList<Integer> graph[];
	public static long dp[][];
	public static boolean[] ok;

	public static long solve(int i, int cost) {
		if (graph[i].size() == 0)
			return 0;

		if (dp[i][cost] != -1)
			return dp[i][cost];
		long a = 0;

		for (int j = 0; j < graph[i].size(); j++) {
			if (cost == 1)
				a += Math.min(solve(graph[i].get(j), 2) + 2,
						solve(graph[i].get(j), 3) + 3);
			else if (cost == 2)
				a += Math.min(solve(graph[i].get(j), 1) + 1,
						solve(graph[i].get(j), 3) + 3);
			else
				a += Math.min(solve(graph[i].get(j), 2) + 2,
						solve(graph[i].get(j), 1) + 1);
		}

		return dp[i][cost] = a;
	}

	public static long answer = 0;

	public static void dfs(int i) {
		Queue<Integer> q = new LinkedList<Integer>();
		q.add(i);

		while (!q.isEmpty()) {
			int e = q.poll();
			if (graph[e].size() == 0) {
				dp[e][1] = 1;
				dp[e][2] = 2;
				dp[e][3] = 3;
				continue;
			}
			for (int j = 0; j < graph[e].size(); j++) {
				q.add(graph[e].get(j));
			}
		}

	}

	public static void main(String[] args) throws IOException {
		// BufferedReader in = new BufferedReader(new
		// InputStreamReader(System.in));
		BufferedReader in = new BufferedReader(new FileReader(
				"corporate_gifting.txt"));
		StringBuilder qq = new StringBuilder();
		// PrintWriter out = new PrintWriter(new
		// OutputStreamWriter(System.out));
		PrintWriter out = new PrintWriter(new FileWriter("out.txt"));

		int t = Integer.parseInt(in.readLine());
		for (int i = 1; i <= t; i++) {
			out.print("Case #" + i + ": ");
			int n = Integer.parseInt(in.readLine());
			graph = new ArrayList[n + 2];
			ok = new boolean[n + 5];
			for (int j = 0; j < n + 2; j++) {
				graph[j] = new ArrayList();
			}
			String y[] = in.readLine().split(" ");
			int a[] = new int[n + 3];
			for (int j = 0; j < n; j++) {
				int one = Integer.parseInt(y[j]);
				graph[one].add(j + 1);
				a[j + 1] = one;
			}
			dp = new long[n + 2][4];

			for (int j = 0; j < n + 2; j++) {
				for (int j2 = 0; j2 < 4; j2++) {
					dp[j][j2] = j2;
				}
			}
			dfs(1);
			for (int j = n; j >= 1; j--) {
				int p = a[j];
				dp[p][1] += Math.min(dp[j][2], dp[j][3]);
				dp[p][2] += Math.min(dp[j][1], dp[j][3]);
				dp[p][3] += Math.min(dp[j][2], dp[j][1]);
			}
			out.println(Math.min(dp[1][1], Math.min(dp[1][2], dp[1][3])));
			// out.println(Math.min(solve(1, 1) + 1,
			// Math.min(solve(1, 2) + 2, solve(1, 3) + 3)));

		}
		out.close();

	}
}
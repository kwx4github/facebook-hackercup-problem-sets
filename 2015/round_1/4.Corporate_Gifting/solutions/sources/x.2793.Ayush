#include <bits/stdc++.h>
using namespace std; 
vector<int>v[200003];
vector<int>level[200003];
int n;
long long best[200001], firstotal[200001], second[200001], secondtotal[200001];
int solve()
{
	        int height = 0;
        level[0].push_back(1);
        for(int j = 0; j < n-1; j++)
                for(int x : level[j])
                    for(int y: v[x])
                        level[j+1].push_back(y);
        for(int i = 0; !level[i].empty(); i++) 
        	height++;
        for(int l = height - 1; l >= 0; l--)
        {
            for(int x: level[l])
            {
                if(v[x].empty())
                {
                    best[x] = 1;
                    firstotal[x] = 1;
                    second[x] = 2;
                    secondtotal[x] = 2;
                }
                else
                {
                    best[x] = 1;
                    firstotal[x] = 1;
                    secondtotal[x] = 0;
                    for(int y: v[x])
                    {
                        if(best[y] != 1)
                        {
                            firstotal[x] += firstotal[y];
                        }
                        else{firstotal[x] += secondtotal[y];}
                    }
                    int done = 0;
                     for(int k = 2; k <= n && done < 1; k++){
                        long long newbest = k;
                        for(int y: v[x]){
                            if(best[y] != k){
                                newbest += firstotal[y];
                            }
                            else{newbest += secondtotal[y];}
                        }
                        if(newbest <= firstotal[x]){
                            second[x] = best[x];
                            secondtotal[x] = firstotal[x];
                            best[x] = k;
                            firstotal[x] = newbest;
                        }
                        else if(newbest < secondtotal[x] || secondtotal[x] == 0){
                            secondtotal[x] = newbest;
                            second[x] = k;
                        }
                        else{
                            done = 1;
                        }
 
                    }
                }
            }
        }
        return firstotal[1];
}
int main()
{
	int t,k=1,i,j,x;
	scanf("%d",&t);
	while(k<=t)
	{
		scanf("%d",&n);
		for(i=1;i<=n;i++)
		{
			scanf("%d",&x);
			v[x].push_back(i);
		}
		k++;
		printf("Case #%d: %d\n",k-1,solve());
		for(i=0;i<=n;i++)
		{
			v[i].clear();
			level[i].clear();
		}
		memset(best,0,sizeof(best));
		memset(firstotal,0,sizeof(firstotal));
		memset(second,0,sizeof(second));
		memset(secondtotal,0,sizeof(secondtotal));
	}
	return 0;
}


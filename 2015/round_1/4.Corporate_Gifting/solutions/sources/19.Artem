#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

const int NMAX = 210000;
const int K = 25;

int n, z[NMAX][K], ss;
vector<int> g[NMAX];

void read() {
  cin >> n;
  forn(i, n)
    g[i].clear();
  forn(i, n) {
    int p;
    scanf("%d", &p);
    p--;
    if (p != -1)
      g[p].pb(i);
  }
}

void gen() {

}

int rec(int v, int r) {
  if (z[v][r] != -1)
    return z[v][r];

  int res = INF;
  forn(col, K)
    if (col != r) {
      int sum = col + 1;
      forn(i, g[v].size())
        sum += rec(g[v][i], col);
      res = min(res, sum);
    }

  return z[v][r] = res;
}

void solve() {
  memset(z, -1, sizeof(z));
  int res = rec(0, K - 1);
  ss += res;
  cout << res << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }

  cerr << ss << endl;
  
  return 0;
}
#define _USE_MATH_DEFINES
#include <algorithm>
#include <cstdio>
#include <functional>
#include <iostream>
#include <cfloat>
#include <climits>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <time.h>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> i_i;
typedef pair<ll, int> ll_i;
typedef pair<double, int> d_i;
typedef pair<ll, ll> ll_ll;
typedef pair<double, double> d_d;
struct edge { int u, v, w; };

ll MOD = 1000000007;
ll _MOD = 1000000009;
double EPS = 1e-10;

void f(int u, int p, vector< vector<int> >& G, vector< vector<int> >& a) {
	int best = 0;
	for (int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		if (v == p) continue;
		f(v, u, G, a);
		int j, first = INT_MAX, second;
		for (int k = 1; k < 20; k++) {
			if (a[v][k] < first) {
				second = first;
				first = a[v][k];
				j = k;
			}
			else if (a[v][k] < second)
				second = a[v][k];
		}
		best += first;
		a[u][j] += second - first;
	}
	for (int k = 1; k < 20; k++)
		a[u][k] += k + best;
}

int main() {
	int T; cin >> T;
	for (int t = 1; t <= T; t++) {
		int N; cin >> N;
		vector< vector<int> > G(N);
		for (int u = 0; u < N; u++) {
			int v; scanf("%d", &v); v--;
			if (v == -1) continue;
			G[u].push_back(v);
			G[v].push_back(u);
		}
		vector< vector<int> > a(N, vector<int>(20));
		f(0, -1, G, a);
		int mini = INT_MAX;
		for (int k = 1; k < 20; k++)
			mini = min(mini, a[0][k]);
		printf("Case #%d: %d\n", t, mini);
	}
}
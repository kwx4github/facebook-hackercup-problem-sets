#include <bits/stdc++.h>
using namespace std;

const int N = 201314;
const int D = 50;
vector<int> nx[N];
int dp[N][D], rt;

void DFS(int x) {
	for (int i = 0; i < D; ++i) {
		dp[x][i] = i + 1;
	}
	for (int i = 0; i < nx[x].size(); ++i) {
		int y = nx[x][i];

		DFS(y);
		for (int j = 0; j < D; ++j) {
			int best = INT_MAX;

			for (int k = 0; k < D; ++k) {
				if (k == j) {
					continue;
				}
				best = min(best, dp[y][k]);
			}
			dp[x][j] += best;
		}
	}
}

int Run() {
	int T, n, x;

	cin >> T;
	for (int cas = 1; cas <= T; ++cas) {
		cin >> n;
		//n = 200000;
		for (int i = 1; i <= n; ++i) {
			nx[i].clear();
		}
		for (int i = 1; i <= n; ++i) {
			cin >> x;
			//if (i == 1) { x = 0; } else { x = rand() % (i - 1) + 1; }
			if (x) {
				nx[x].push_back(i);
			} else {
				rt = i;
			}
		}
		DFS(rt);
		cout << "Case #" << cas << ": " << *min_element(dp[rt], dp[rt] + D) << endl;
	}

	return 0;
}

int main() {
	int size = 256 << 20;
	char *p = (char *) malloc(size) + size;

	__asm__("movl %0, %%esp\n" :: "r"(p));
	srand(520);
	ios::sync_with_stdio(0);
	return Run();
}

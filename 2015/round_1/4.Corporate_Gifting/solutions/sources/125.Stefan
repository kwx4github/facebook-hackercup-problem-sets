#include<stdio.h>
#include<algorithm>
#include<vector>
#include<deque>
#define INF 200003

using namespace std;

int T,n;

struct nod
{
    int k1,c,k2,niv;
    vector<int> child;
};

nod tree[INF];
int inds[INF],cols[INF];
bool check[INF];
deque<int> Q;

bool cmp(int ind1,int ind2)
{
    return tree[ind1].niv>tree[ind2].niv;
}

inline void set_niv(int nd,int niv)
{
    Q.push_back(nd);
    while(Q.size()>0)
    {
        int times=Q.size();
        for(int i=0;i<times;++i)
        {
            tree[Q.front()].niv=niv;
            for(int j=0;j<tree[Q[0]].child.size();++j)Q.push_back(tree[Q[0]].child[j]);
            Q.pop_front();
        }
        niv++;
    }
}

inline void din(int ind)
{
    nod root=tree[ind];
    if(root.child.size()==0)
    {
        tree[ind].k1=1;
        tree[ind].c=1;
        tree[ind].k2=2;
    }
    else
    {
        int sum=0,d=root.child.size();
        for(int i=0;i<d;++i)sum+=tree[root.child[i]].k1;
        for(int i=1;i<=d+1;++i)cols[i]=sum;
        for(int i=0;i<d;++i)
            if(tree[root.child[i]].c<=d+1)cols[tree[root.child[i]].c]+=tree[root.child[i]].k2-tree[root.child[i]].k1;
        int b1=999999999,c,b2=999999999;
        for(int i=1;i<=d+1;++i)
        {
            if(i+cols[i]<=b1)
            {
                if(b1<b2)b2=b1;
                b1=i+cols[i];
                c=i;
            }
            else if(i+cols[i]<b2)b2=i+cols[i];
        }
        tree[ind].k1=b1;
        tree[ind].c=c;
        tree[ind].k2=b2;
    }
}

int main()
{
    freopen("input","r",stdin);
    freopen("output","w",stdout);
    scanf("%d",&T);
    for(int t=1;t<=T;++t)
    {
        scanf("%d",&n);
        Q.clear();
        for(int i=1;i<=n;++i){tree[i].child.clear();inds[i]=i;}
        for(int i=1;i<=n;++i)
        {
            int nr;
            scanf("%d",&nr);
            if(i==1)continue;
            tree[nr].child.push_back(i);
        }
        set_niv(1,1);
        sort(inds+1,inds+1+n,cmp);
        for(int i=1;i<=n;++i)din(inds[i]);
        printf("Case #%d: %d\n",t,tree[inds[n]].k1);
    }
    return 0;
}

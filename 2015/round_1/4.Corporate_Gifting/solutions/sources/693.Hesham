import sys

MAX_GIFT_COST = 23

T = int(raw_input())
for t in range(T):
    children = []
    children_count = []
    memo = []
    memo_forward = []
    memo_backward = []
    N = int(raw_input())
    parents = map(lambda x: int(x) - 1, raw_input().split())
    children_count = [0] * N
    for i in range(N):
        memo.append([sys.maxint] * (MAX_GIFT_COST + 1))
        memo_forward.append([sys.maxint] * (MAX_GIFT_COST + 1))
        memo_backward.append([sys.maxint] * (MAX_GIFT_COST + 1))
        children.append([])

    for i, p in enumerate(parents):
        if p >= 0:
            children[p].append(i)
            children_count[p] += 1

    stack = []
    for i, node_children in enumerate(children):
        if len(node_children) == 0:
            stack.append(i)

    while len(stack):
        index = stack.pop()
        for i in range(1, MAX_GIFT_COST):
            result = 0
            for child in children[index]:
                result += min(memo_forward[child][i-1], memo_backward[child][i+1])
            memo[index][i] = result + i

        for i in range(1, MAX_GIFT_COST):
            memo_forward[index][i] = min(memo_forward[index][i-1], memo[index][i])
        for i in range(MAX_GIFT_COST-1, 0, -1):
            memo_backward[index][i] = min(memo_backward[index][i+1], memo[index][i])

        children_count[parents[index]] -= 1
        if children_count[parents[index]] == 0:
            stack.append(parents[index])

    print 'Case #%d: %d' % (t+1, min(memo[0]))

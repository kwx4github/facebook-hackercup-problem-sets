#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max(), N = 2e5 + 1;
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

vector <li> to[N];

pair<li, lli> dfs (li v)
{
	vector <li> q;
	lli sum = 0;
	for (li i = 0, sz = to[v].size(); i < sz; ++ i)
	{
		pair <li, lli> res = dfs(to[v][i]);
		sum += res.second;
		q.push_back(res.first);
	}

	sort(all(q));
	q.erase(unique(all(q)), q.end());
	li i = 0;
	for (li sz = q.size(); i < sz && i + 1 == q[i]; ++ i);
	return make_pair(i + 1, sum + i + 1);
}

void solve ()
{
	li tests;
    scanf("%ld", &tests);

    for (li test = 1; test <= tests; ++ test)
    {
        li n;
        scanf("%ld", &n);
        for (li i = 0; i < N; ++ i) to[i].clear();
        for (li i = 1; i <= n; ++ i)
		{
			li x;
			scanf("%ld", &x);
			to[x].push_back(i);
		}
        printf("Case #%ld: %I64d\n", test, dfs(1).second);
    }
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#define ll long long
using namespace std;
vector<bool> vis(200002);
vector<ll> m1(200002),m2(200002),v1(200002);
vector<vector<int> > adj(200002);
void dfs(int x)
{
	vis[x]=1;
	bool leaf=1;
	map<int,ll> mmap;
	ll ans=0;
	for(int i=0;i<(int)adj[x].size();++i)
	{
		int next=adj[x][i];
		if(!vis[next])
		{
			dfs(next);
			leaf=0;
			if(mmap.find(v1[next])==mmap.end())
				mmap[v1[next]]=v1[next];
			mmap[v1[next]]+=m2[next]-m1[next];
			ans+=m1[next];
		}
	}
	if(leaf)
	{
		m1[x]=1;
		m2[x]=2;
		v1[x]=1;
		return;
	}
	int found=0,poss1,poss2;
	for(int i=1;i<=200002;++i)
	{
		if(found==2)break;
		if(mmap.find(i)==mmap.end())
		{
			found++;
			if(found==1)
				poss1=i;
			else 
				poss2=i;
		}
	}
	ll nmin1=10000000000000000ll,nmin2=100000000000000000ll;
	int poss3=-1;
	map<int,ll>::iterator it=mmap.begin();
	while(it != mmap.end())
	{
		if(it->second <= nmin1)
		{
			nmin2=nmin1;
			nmin1=it->second;
			poss3=it->first;
		}
		else if(it->second < nmin2)
		{
			nmin2=it->second;
		}
		it++;
	}
	if((ll)poss1 < nmin1)
	{
		v1[x]=poss1;
		m1[x]=(ll)poss1+ans;
	} 
	else
	{
		v1[x]=poss3;
		m1[x]=nmin1+ans;
	}
	m2[x]=min(min(nmin2+ans,max(nmin1+ans,(ll)poss1+ans)),(ll)poss2+ans);
}
int main()
{
	int t;
	cin>>t;
	for(int q=1;q<=t;++q)
	{
		ll ans;
		int n;
		cin>>n;
		for(int i=0;i<=n;++i)
		{
			vis[i]=0;
			m1[i]=0;
			m2[i]=0;
			v1[i]=0;
			adj[i].clear();
		}
		int x;
		for(int i=1;i<=n;++i)
		{
			cin>>x;
			if(x!=0)
			{
				adj[i].push_back(x);
				adj[x].push_back(i);
			}	
		}
		dfs(1);
		ans=min(m1[1],m2[1]);	
		cout<<"Case #"<<q<<": "<<ans<<endl;
	}
	return 0;
}

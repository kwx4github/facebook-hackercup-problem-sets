#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxn=200000+16;
const int M=20;
const int INF=1000000000;

int n;
int p[maxn];
int f[maxn][M];

int main()
{
	//freopen("corporate_gifting_example_input.txt","r",stdin);
	freopen("corporate_gifting.txt","r",stdin);
	freopen("output.txt","w",stdout);
	std::ios::sync_with_stdio(false);
	int testcase;
	cin>>testcase;
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		cin>>n;
		for (int i=0;i<n;i++) { cin>>p[i]; p[i]--; }
		for (int i=0;i<n;i++) memset(f[i],0,sizeof(f[i]));
		for (int i=n-1;i>=0;i--)
		{
			for (int k=0;k<M;k++) f[i][k]+=(k+1);
			if (p[i]<0) continue;
			int w1=INF,w2=INF;
			for (int k=0;k<M;k++) 
				if (f[i][k]<w1) 
					w2=w1,w1=f[i][k];
				else
					checkmin(w2,f[i][k]);
			for (int k=0;k<M;k++) f[p[i]][k]+=((f[i][k]==w1)?w2:w1);
		}
		int ret=INF;
		for (int k=0;k<M;k++) checkmin(ret,f[0][k]);
		cout<<"Case #"<<case_id<<": "<<ret<<endl;
	}	
	return 0;
}


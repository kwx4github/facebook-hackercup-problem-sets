#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXN = 200000 + 1;

int n, inDegree[MAXN], parent[MAXN];
queue<int> q;
vector<int> gift[MAXN];

int calc(int x) {
//printf("gift[%d] =", x); FOREACH(it, gift[x]) printf(" %d", *it); putchar('\n');
  if (gift[x].empty()) return 1;
  UNIQUE(gift[x]);
  if (gift[x].front() != 1) return 1;
  FOR(i, 0, SIZE(gift[x]) - 1) {
    if (gift[x][i] + 1 != gift[x][i + 1]) {
      return gift[x][i] + 1;
    }
  }
//printf("gift[%d] =", x); FOREACH(it, gift[x]) printf(" %d", *it); putchar('\n');
  return gift[x].back() + 1;
}

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%d", &n);
    memset(inDegree, 0, sizeof(int) * n);
    FOR(i, 0, n) {
      scanf("%d", &parent[i]);
      parent[i]--;
      if (parent[i] >= 0) {
        inDegree[parent[i]]++;
      }
      gift[i].clear();
    }
    while (!q.empty()) q.pop();
    FOR(i, 0, n) if (!inDegree[i]) {
      q.push(i);
    }
    long long res = 0;
    while (!q.empty()) {
      int u = q.front();
      q.pop();
      int price = calc(u);
//printf("\tprice = %d\n", price);
      res += price;
      int v = parent[u];
      if (v != -1) {
        gift[v].push_back(price);
        inDegree[v]--;
        if (!inDegree[v]) {
          q.push(v);
        }
      }
    }
    printf("Case #%d: %lld\n", taskIdx, res);
  }
  return 0;
}

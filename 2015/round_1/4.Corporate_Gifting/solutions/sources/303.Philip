#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define NOMINMAX 1
#include <windows.h>
#define all(v)begin(v),end(v)
#define dump(v)copy(begin(v),end(v),ostream_iterator<decltype(*begin(v))>(cout,"\n"))
#define rg(i,a,b)for(int i=a,i##e=b;i<i##e;++i)
#define fr(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define rf(i,n)for(int i=n-1;i>=0;--i)
#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define ec(i,m)for(int i=0,i##e=m.size();i<i##e;++i)
#define sz(v)int(v.size())
#define sr(v)sort(begin(v),end(v))
#define rs(v)sort(begin(v),end(v),greater<decltype(*begin(v))>())
#define rev(v)reverse(begin(v),end(v))
#define eb emplace_back
#define big numeric_limits<int>::max()
#define bigl numeric_limits<ll>::max()
#define g(t,i)get<i>(t)
#define cb(v,w)copy(begin(v),end(v),back_inserter(w))
#define uni(v)sort(begin(v),end(v));v.erase(unique(begin(v),end(v)),end(v))
#define vt(...)vector<tuple<__VA_ARGS__>>
#define smx(a,b)a=max(a,b)
#define smn(a,b)a=min(a,b)
#define perm(v)next_permutation(begin(v),end(v))
#define perms(v)for(int c=(sort(begin(v),end(v)),1);c||next_permutation(all(v));c=0)
typedef long long ll;
using namespace std;

int main() {
	const int INV = -1; // invalid
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	int T;
	cin >> T;
	typedef tuple<int, ll, ll> z;
	DWORD start = GetTickCount();
	fr(cc, T) {
		int N;
		cin >> N;
		vector<int> child(N, INV), sib(N, INV);
		fr(i, N) {
			int a;
			cin >> a;
			--a;
			if (a < 0) continue;
			sib[i] = child[a];
			child[a] = i;
		}
		function<z(int)> dfs = [&] (int curr) {
			map<int, ll> delta;
			int W [] = { 1, 2 }, w = -1;
			ll M [] = { bigl, bigl, bigl }, total = 0;
			for (int i = child[curr]; i != INV; i = sib[i]) {
				auto a = dfs(i);
				delta[g(a, 0)] += g(a, 2) - g(a, 1);
				total += g(a, 1);
			}
			for (auto & d : delta) {
				if (W[0] == d.first) {
					W[0] = d.first + 1;
					W[1] = d.first + 2;
				} else if (W[1] == d.first) {
					W[1] = d.first + 1;
				}
				M[2] = d.first + d.second;
				if (M[2] <= M[0]) w = d.first;
				sr(M);
			}
			fr(i, 2) {
				M[2] = W[i];
				if (M[2] <= M[0]) w = W[i];
				sr(M);
			}
			return make_tuple(w, total + M[0], total + M[1]);
		};
		cout << "Case #" << cc + 1 << ": " << get<1>(dfs(0)) << endl;
	}
	cerr << GetTickCount() - start << endl;
	system("pause");
}
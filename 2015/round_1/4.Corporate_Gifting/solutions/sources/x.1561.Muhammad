//BISM ILLAHHIRRAHMANNI RRAHIM

#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>
#include <sys/resource.h>
using namespace std;

template< class T > T _abs(T n) { return (n < 0 ? -n : n); }
template< class T > T _max(T a, T b) { return (!(a < b) ? a : b); }
template< class T > T _min(T a, T b) { return (a < b ? a : b); }
template< class T > T sq(T x) { return x * x; }

#define ALL(p) p.begin(),p.end()
#define MP(x, y) make_pair(x, y)
#define SET(p) memset(p, -1, sizeof(p))
#define CLR(p) memset(p, 0, sizeof(p))
#define MEM(p, v) memset(p, v, sizeof(p))
#define CPY(d, s) memcpy(d, s, sizeof(s))
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define SZ(c) (int)c.size()
#define PB(x) push_back(x)
#define ff first
#define ss second
#define i64 long long
#define ld long double
#define pii pair< int, int >
#define psi pair< string, int >
#define vi vector< int >

const double EPS = 1e-9;
const int INF = 0x7f7f7f7f;

#define mx 200010

vi g[mx];

int cl[mx],r;

int dfs(int u) {
	map<int,int> m;
	for(auto v:g[u]) {
		m[dfs(v)]++;
	}
	int t=1;
	for(auto it=m.begin();it!=m.end();it++) {
		if((it->ff)!=t) break;
		t++;
	}
	r+=t;
	//cerr<<u<<' '<<t<<'\n';
	return t;
	/*q=t;
	tt=t;
	for(auto it=m.begin();it!=m.end();it++) {
		if(it->ff>t) break;
		c=-(it->ss)*(it->ff)+(it->ss)*t+(it->ff);
		if(c==tt) 
	}*/
}

int main() {
	const rlim_t kStackSize = 256 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
	READ("corporate_gifting.txt");
	WRITE("out.txt");
	int T,I,i,n,u;
	cin>>T;
	for(I=1;I<=T;I++) {
		cin>>n;
		for(i=1;i<=n;i++) g[i].clear();
		for(i=1;i<=n;i++) {
			scanf("%d",&u);
			if(i>1) g[u].PB(i);
		}
		/*SET(cl);
		queue<int> q;
		int cnt[2]={0};
		q.push(1);
		cl[1]=0;
		cnt[0]=1;
		while(!q.empty()) {
			u=q.front();
			q.pop();
			for(i=0;i<g[u].size();i++) {
				v=g[u][i];
				if(cl[v]==-1) {
					cl[v]=cl[u]^1;
					cnt[cl[v]]++;
					q.push(v);
				}
			}
		}
		cout<<"Case #"<<I<<": "<<(min(cnt[0],cnt[1])*2+max(cnt[0],cnt[1]))<<'\n';*/
		r=0;
		dfs(1);
		cout<<"Case #"<<I<<": "<<r<<'\n';
	}
	return 0;
}
 

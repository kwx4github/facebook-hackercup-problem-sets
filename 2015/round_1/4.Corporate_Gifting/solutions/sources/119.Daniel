#include <stdio.h>
#include <vector>
#include <queue>
#include <climits>
using namespace std;
#define MAX_N 200000

int n, parent[MAX_N + 1];
vector<int> children[MAX_N + 1];
int D[MAX_N + 1], E[MAX_N + 1];

int K1[MAX_N + 1], C[MAX_N + 1], K2[MAX_N + 1];
int delta[MAX_N + 1], Kv[MAX_N + 1];

int main() {
	int cases;
	scanf("%d", &cases);
	for (int cas = 1; cas <= cases; cas++) {

		// read input
		scanf("%d", &n);
		for (int i = 1; i <= n; i++)
			children[i] = vector<int>();
		for (int i = 1; i <= n; i++) {
			scanf("%d", &parent[i]);
			children[parent[i]].push_back(i);
		}

		vector<int> topological_order;
		// base cases = leaf nodes
		for (int v = 1; v <= n; v++) {
			D[v] = children[v].size();
			E[v] = D[v];
			if (D[v] == 0) {
				K1[v] = 1;
				C[v] = 1;
				K2[v] = 2;

				topological_order.push_back(v);
			}
		}

		// topological sort
		int front = 0;
		while (front < topological_order.size()) {
			int now = topological_order[front++];
			E[parent[now]]--;
			if (E[parent[now]] == 0)
				topological_order.push_back(parent[now]);
		}

		// dp
		for (int order = 0; order < n; order++) {
			int v = topological_order[order];
			if (D[v] == 0)
				continue;

			int K = 0;
			for (int child_idx = 0; child_idx < children[v].size(); child_idx++)
				K += K1[children[v][child_idx]];

			int d = D[v];
			for (int c = 1; c <= d + 1; c++)
				delta[c] = K;

			for (int i = 0; i < d; i++) {
				int vi = children[v][i];
				if (C[vi] <= d + 1)
					delta[C[vi]] += K2[vi] - K1[vi];
			}
			for (int c = 1; c <= d + 1; c++)
				Kv[c] = c + delta[c];

			K1[v] = INT_MAX;
			for (int c = 1; c <= d + 1; c++)
				if (Kv[c] < K1[v]) {
					K1[v] = Kv[c];
					C[v] = c;
				}
			K2[v] = INT_MAX;
			for (int c = 1; c <= d + 1; c++)
				if (Kv[c] < K2[v] && c != C[v])
					K2[v] = Kv[c];
		}

		printf("Case #%d: %d\n", cas, K1[1]);

	}
	return 0;
}

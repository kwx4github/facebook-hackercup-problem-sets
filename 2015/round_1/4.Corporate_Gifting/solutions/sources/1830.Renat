#include <vector> // headers {{{
#include <list>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <ctime>

#define DEBUG(x) ::cerr << #x << ": " << x << "\n"
using namespace std; // }}}

const int K = 100;

int result(const vector<int>& tree)
{
    int n = tree.size();
    vector<int> used(n), init(K), stack;
    for (int i = 0; i < K; ++i) {
        init[i] = i + 1;
    }

    vector<vector<int> > adj(n), dp(n, init);
    for (int i = 1; i < tree.size(); ++i) {
        adj[tree[i]].push_back(i);
    }
    for (int i = 0; i < adj.size(); ++i) {
        if (adj[i].empty()) {
            used[i] = 1;
        }
    }

    if (used[0])
        return 1;
    stack.push_back(0);
    while (!stack.empty()) {
        int cur = stack.back();
        bool f = 1;
        for (int i = 0; i < adj[cur].size(); ++i) {
            int child = adj[cur][i];
            if (!used[child]) {
                stack.push_back(child);
                f = 0;
            }
        }
        if (!f)
            continue;
        for (int i = 0; i < adj[cur].size(); ++i) {
            int child = adj[cur][i];
            vector<pair<int, int> > V;
            for (int j = 0; j < K; ++j) {
                V.push_back(make_pair(dp[child][j], j));
            }
            sort(V.begin(), V.end());
            int a0 = V[0].second;
            int a1 = V[1].second;
            for (int j = 0; j < K; ++j) {
                dp[cur][j]+= (j == a0 ? V[1].first : V[0].first);
            }
        }
        stack.pop_back();
        used[cur] = 1;
    }

    return *min_element(dp[0].begin(), dp[0].end());
}

int main()
{
    ifstream cin("input.txt");
    ofstream cout("output.txt");
    //cout.precision(6);
    //cout.setf(ios::fixed,ios::floatfield);

    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        int N;
        cin >> N;
        vector<int> tree(N);
        for (int j = 0; j < N; ++j) {
            cin >> tree[j];
            --tree[j];
        }
        cout << "Case #" << i << ": " << result(tree) << endl;
    }

    return 0;
}

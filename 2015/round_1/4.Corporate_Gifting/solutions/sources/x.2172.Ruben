package FBHackerCup;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;

public class Gifting {
	static final int N = 200001;
	
	static int n;
	static int[] parent = new int[N];
	static int[] countC = new int[N];
	static HashSet<Integer>[] sum = new HashSet[N];
	
	static LinkedList<Integer> queue = new LinkedList<>();

	public static void main(String[] args) throws IOException {
		final Scanner sc = new Scanner(
				//System.in);
				new File("/Users/rglez/Desktop/input.txt"));
		
		final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
				//System.out));
		        new FileOutputStream("/Users/rglez/Desktop/output.txt")));
		
		final int t = sc.nextInt();

		for (int c = 1; c <= t; c++) {
			// Read input
			n = sc.nextInt();
			for (int i = 0; i < n; i++) {
				parent[i] = sc.nextInt() - 1;
				countC[i] = 0;
				if (i > 0) {
					countC[parent[i]]++;
				}
				
				if (sum[i] == null) {
					sum[i] = new HashSet<Integer>();
				} else {
					sum[i].clear();
				}
			}
		
			writer.write("Case #" + c + ": " + solve());
			writer.newLine();
		}
	
		sc.close();
		writer.close();
	}

	static int solve() {
		queue.clear();
		
		for (int i = 0; i < n; i++) {
			if (countC[i] == 0) {
				queue.add(i);
			}
		}
		
		int res = 0;
		while(queue.size() > 0) {
			int node = queue.removeLast();
			
			int s = 0;
			for (s = 1; true; s++)
				if (!sum[node].contains(s))
					break;
			
			res += s;
			if (node > 0) {
				sum[parent[node]].add(s);
				countC[parent[node]]--;
				if (countC[parent[node]] == 0) {
					queue.addLast(parent[node]);
				}
			}
		}
		
		return res;
	}
}

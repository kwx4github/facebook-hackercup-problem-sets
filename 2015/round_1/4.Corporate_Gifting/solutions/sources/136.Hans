/* gcc version 4.9.2 20141224
 * g++ -Wall -Wextra -Wconversion -std=c++11 -g
 */
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(__typeof__((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define mp make_pair
#define pb push_back
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) ({ if(1) fprintf(stderr, __VA_ARGS__); })
#define DBGDO(X) ({ if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; })

static const int maxN = 200*1000 + 2;
static const int K = 100;

static int TC;
static int N;
static int parent[maxN];
static vi child[maxN];
static int order[maxN], OA, OE;

static ll kmin[maxN][K];
static ll nkmin[maxN][K];

int main() {
	ios::sync_with_stdio(false);

	cin >> TC;
	FOR(tc, 1, TC+1) {
		cin >> N;
		FOR(i,0,N+1) child[i].clear();

		FOR(i,1,N+1) {
			cin >> parent[i];
			if (parent[i] != 0)
				child[parent[i]].pb(i);
		}

		OA = OE = 0;
		order[OE++] = 1;
		while (OA < OE) {
			int n = order[OA++];
			for (int c : child[n])
				order[OE++] = c;
		}

		FORD(o,0,OE) {
			int i = order[o];

			FOR(k,0,K) {
				kmin[i][k] = k+1;
				for (int c : child[i])
					kmin[i][k] += nkmin[c][k];
			}
			ll mi0, mi1;
			mi0 = mi1 = LLONG_MAX;
			FOR(k,0,K) {
				mi1 = min(mi1, kmin[i][k]);
				if (mi0 > mi1) swap(mi0, mi1);
			}
			FOR(k,0,K) {
				nkmin[i][k] = (kmin[i][k] == mi0)
					? mi1
					: mi0;
			}
		}

		printf("Case #%d: %lld\n", tc,
				min(nkmin[1][0], nkmin[1][1]));
	}
}

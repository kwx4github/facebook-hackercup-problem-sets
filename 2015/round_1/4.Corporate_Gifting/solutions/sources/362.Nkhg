#include <bits/stdc++.h>
#define pb push_back
using namespace std;
const int Max_money=12;
const int Max_N=200010;
const int INF=1234567890;

int dp[Max_N][Max_money+1];
int manager[Max_N],ind[Max_N];

vector<int> to[Max_N];

int main()
{
	int casenumT;
	scanf("%d",&casenumT);
	for(int casenum=1;casenum<=casenumT;casenum++)
	{
		int N;
		scanf("%d",&N);
		fill(ind,ind+N+1,0);
		for(int i=1;i<=N;i++)
			for(int j=1;j<=Max_money;j++)
				dp[i][j]=j;
		for(int i=1;i<=N;i++)
			to[i]=vector<int>();
		for(int i=1;i<=N;i++)
		{
			scanf("%d",manager+i);
			ind[manager[i]]++;
			to[manager[i]].pb(i);
		}
		ind[0]=0;
		queue<int> que;
		for(int i=N;i>=1;i--)
			if(ind[i]==0)
				que.push(i);
		while(!que.empty())
		{
			int now=que.front(); que.pop();
			for(int i=to[now].size()-1;i>=0;i--)
			{
				int minfrom=1,secondmin=INF,u=to[now][i];
				for(int k=2;k<=Max_money;k++)
				{
					if(dp[u][k]<dp[u][minfrom])
					{
						secondmin=min(secondmin,dp[u][minfrom]);
						minfrom=k;
					}
					else
						secondmin=min(secondmin,dp[u][k]);
				}
				for(int k=1;k<=Max_money;k++)
				{
					if(k==minfrom)
						dp[now][k]+=secondmin;
					else
						dp[now][k]+=dp[u][minfrom];
				}
			}
			ind[manager[now]]--;
			if(ind[manager[now]]==0)
				que.push(manager[now]);
		}
		printf("Case #%d: ",casenum);
		int ans=dp[1][1];
		for(int i=2;i<=Max_money;i++)
			ans=min(ans,dp[1][i]);
		printf("%d\n",ans);
	}
	return 0;
}

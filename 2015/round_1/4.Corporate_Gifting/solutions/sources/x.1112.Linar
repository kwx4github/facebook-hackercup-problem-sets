
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;

int par[200005];
vector<int> g[200005];

int dp[200005][4];

int main() {
  int tc;
  scanf("%d", &tc);
  for (int t = 1; t <= tc; t++) {
    int n;
    scanf("%d", &n);
    for (int i = 0; i <= n; i++) {
      g[i].clear();
      for (int j = 1; j <= 3; j++) {
        dp[i][j] = j;
      }
    }
    par[0] = -1;
    for (int i = 1; i <= n; i++) {
      scanf("%d", par + i);
      g[par[i]].push_back(i);
    }
    vector<int> topo;
    stack<int> s;
    s.push(1);
    while (!s.empty()) {
      const int u = s.top();
      s.pop();
      topo.push_back(u);
      for (auto const v : g[u]) {
        s.push(v);
      }
    }
    reverse(topo.begin(), topo.end());

    for (auto const u : topo) {
      for (int j = 1; j <= 3; j++) {
        int tmp = 1000000000;
        for (int k = 1; k <= 3; k++) {
          if (j != k) {
            tmp = min(tmp, dp[u][k]);
          }
        }
        dp[par[u]][j] += tmp;
      }
    }
    printf("Case #%d: %d\n", t, min(dp[1][1], min(dp[1][2], dp[1][3])));
  }

  return 0;
}
#include <iostream>
#include <cstring>
#include <cstdio>
#include <malloc.h>
#include <set>
using namespace std;
#define N 200005
#define CLR(a,v) memset(a,v,sizeof(a))
struct Edge
{
    int v,next;
}edge[N];
int ehead[N];
int ecnt;
void AddEdge(int u,int v)
{
    edge[ecnt]={v,ehead[u]};
    ehead[u]=ecnt++;
}
int ans;
void dfs(int u,set<int> *f)
{
    if(ehead[u]==-1)
    {
        ans++;
        f->insert(1);
        return;
    }
    set<int> *gift=new set<int>;
    for(int i=ehead[u];~i;i=edge[i].next)
    {
        dfs(edge[i].v,gift);
    }
    int i=1;
    while(gift->count(i))i++;
    if(f)f->insert(i);
    ans+=i;
    delete gift;
}
void solve(int x)
{
    CLR(ehead,-1);
    ecnt=0;
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        int u;
        cin>>u;
        AddEdge(u,i);
    }
    ans=0;
    dfs(1,0);
    cout<<"Case #"<<x<<": "<<ans<<endl;
}
int main()
{
    int size = 256 << 20; // 256MB
    char *p = (char*)malloc(size) + size;
    __asm__("movl %0, %%esp\n" :: "r"(p));

    freopen("corporate_gifting_1.txt","r",stdin);
    freopen("corporate_gifting_1.txt.out","w",stdout);
    int t;
    cin>>t;
    for(int i=1;i<=t;i++)solve(i);
    return 0;
}

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 200 * 1000 + 13;

int n;
vector<int> g[N];

inline bool read() {
	if (scanf("%d", &n) != 1)
		return false;
	forn(i, n)
		g[i].clear();
	forn(i, n) {
		int a;
		assert(scanf("%d", &a) == 1);
		a--;
		if (a == -1)
			continue;
		g[a].pb(i);
	}
    return true;
}

int d[N][5];

void dfs(int v) {
	d[v][0] = 1;
	d[v][1] = 2;
	d[v][2] = 3;
	d[v][3] = 4;
	d[v][4] = 5;
	forn(i, sz(g[v])) {
		int to = g[v][i];
		dfs(to);
		d[v][0] += min(min(min(d[to][1], d[to][2]), d[to][3]), d[to][4]);
		d[v][1] += min(min(min(d[to][0], d[to][2]), d[to][3]), d[to][4]);
		d[v][2] += min(min(min(d[to][0], d[to][1]), d[to][3]), d[to][4]);
		d[v][3] += min(min(min(d[to][0], d[to][1]), d[to][2]), d[to][4]);
		d[v][4] += min(min(min(d[to][0], d[to][1]), d[to][2]), d[to][3]);
	}
}

inline void solve(int test) {
	printf("Case #%d: ", test + 1);
	dfs(0);
	printf("%d\n", min(d[0][0], min(d[0][1], min(d[0][2], min(d[0][3], d[0][4])))));
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
#endif

    cout << setprecision(25) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));
	int n;
	assert(scanf("%d", &n) == 1);
	forn(i, n) {
	    assert(read());
    	solve(i);
    }

#ifdef SU2_PROJ
    cerr << "TIME: " << clock() << endl;
#endif

    return 0;
}
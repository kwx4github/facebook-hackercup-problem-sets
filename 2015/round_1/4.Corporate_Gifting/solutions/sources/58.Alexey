#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <deque>
#include <cmath>
#include <ctime>
#include <stack>
#include <sstream>
#include <set>
#include <map>
#include <cassert>
#include <memory.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()

typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair <li, li> pi;

void solve();

void precalc();

#define FILENAME "souvenir"

int main() {
	string s = FILENAME;
#ifdef RIAD
	freopen("input", "r", stdin);
#ifndef DEBUG
	freopen("output", "w", stdout);
#endif
	//cout<<FILENAME<<endl;
	//assert (s != "change me please");
	clock_t start = clock();
#else
	//freopen(FILENAME ".in", "r", stdin);
	//freopen(FILENAME ".out", "w", stdout);
#endif
	cout.sync_with_stdio(0);
	cout.precision(20);
	cout << fixed;
	int t = 1;
	cin >> t;

	//precalc();
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef DEBUG
	cerr << "\n\n" << (clock() - start) / 1.0 / CLOCKS_PER_SEC << "\n\n\n";
#endif
	return 0;
}
const int mod = 1000000007;

vector<vi> g;

void upd(pair<pi, pi>& res, const pi& n) {
	//cout << "was " << endl;
//	cout << res.first.first << " at " <<res.first.second << endl;
//	cout << res.second.first << " at " <<res.second.second << endl;
//	cout << "get" << n.first << ' ' << n.second << endl;
	
	
	if(n < res.second) {
		res.second = n;
	}
	if(res.first > res.second) {
		swap(res.first, res.second);
	}
	//cout << "become " << endl;
//	cout << res.first.first << " at " <<res.first.second << endl;
//	cout << res.second.first << " at " <<res.second.second << endl;
}

pair<pi, pi> solve(int v) {
	int minAns = 0;
	map<int, int> adds;
	for(int to: g[v]) {
		auto res = solve(to);
		minAns += res.first.first;
		adds[res.first.second] += res.second.first - res.first.first;
	}
	
	pair<pi, pi> res = {{(li)1e18, 0LL}, {(li)1e18, 0LL}};
	int no = 0;
	
	for(int z = 1; ;++z) {
		if(!adds.count(z)) {
			upd(res, {minAns + z, z});
			
			++no;
			
			
			if(no == 2) {
				//cout << "res " << v << endl;
				//cout << res.first.first << " at " <<res.first.second << endl;
				//cout << res.second.first << " at " <<res.second.second << endl;
				return res;
			}
		}
		else {
			upd(res, {minAns + adds[z] + z, z});
		}
	}
}

void solve() {
	int n;
	cin >> n;
	g.assign(n, vi());
	int zero;
	cin >> zero;
	for(int i = 1; i < n; ++i) {
		int x;
		cin >> x;
		--x;
		g[x].push_back(i);
	}
	
	cout << solve(0).first.first << endl;
}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

public class CorpGift {
	static BufferedReader stdin = new BufferedReader(new InputStreamReader(
			System.in));
	static StringTokenizer st = new StringTokenizer("");
	
	public static void main(String[] args) throws Exception {
		int T = readInt();
		for (int nCase = 1; nCase <= T; nCase++){
			System.out.println("Case #" + nCase + ": " + solveCase());
		}
	}
	
	static class Emp{
		public int parent;
		public ArrayList<Integer> children = new ArrayList<Integer>();
	}
	
	static long solveCase() throws Exception{
		int N = readInt();
		
		Emp emps[] = new Emp[N+1];
		for (int i=1; i<=N; i++){
			emps[i] = new Emp();
			emps[i].parent = readInt();
		}
		
		for (int i=2; i<=N; i++)
			emps[emps[i].parent].children.add(i); 
	
		HashMap<Long, Long> memo = new HashMap<Long, Long>();
		
		return recur(N, emps, 1, 0, memo);
	}
	
	static final long MAX = 500000*500000;
	
	static long recur(int N, Emp emps[], int root, int nocangive, HashMap<Long, Long> memo){
		Emp node = emps[root];
		
		if (node.children.size() == 0){
			if (nocangive != 1)
				return 1;
			else
				return 2;
		}
		
		long key = root;
		key <<= 32;
		key |= nocangive;
				
		if (memo.containsKey(key))
			return memo.get(key);
		
		
		long result = MAX;
		
		for (int give=1; give < 12; give++){
			if (give == nocangive) continue;
			long total = give;
			for (int child: node.children)
				total += recur(N, emps, child, give, memo);
			if (total < result)
				result = total;
		}
		
		memo.put(key, result);
		
		return result;
	}
	
	static String readString() throws Exception {
		while (!st.hasMoreTokens()) {
			st = new StringTokenizer(stdin.readLine());
		}
		return st.nextToken();
	}

	static int readInt() throws Exception {
		return Integer.parseInt(readString());
	}
}

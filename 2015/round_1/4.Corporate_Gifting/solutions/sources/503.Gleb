#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define sc second

const double pi = acos(-1.0);

const int size = 200 * 1000 + 100;
const int ssize = 800;
const int inf = 1000 * 1000 * 1000;

int ans[size][ssize];
int pmin[size][ssize];
int smin[size][ssize];
int tc, n;

vector <int> vertex[size];

void dfs(int v) {
	for (int i = 0; i < (int) vertex[v].size(); i++)
		dfs(vertex[v][i]);
	
	for (int i = 0; i < ssize; i++) {
		int sum = i + 1;
		for (int j = 0; j < (int) vertex[v].size(); j++)
			sum += min(pmin[vertex[v][j]][i], smin[vertex[v][j]][i]);

		ans[v][i] = sum;
	}

	pmin[v][0] = inf;
	for (int i = 1; i < ssize; i++)
		pmin[v][i] = min(pmin[v][i - 1], ans[v][i - 1]);
	smin[v][ssize - 1] = inf;
	for (int i = ssize - 2; i >= 0; i--)
		smin[v][i] = min(smin[v][i + 1], ans[v][i + 1]);
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &tc);
    for (int tnum = 0; tnum < tc; tnum++) {
    	cerr << tnum << endl;
    	scanf("%d", &n);

    	for (int i = 0; i < n; i++)
    		vertex[i].clear();
    	for (int i = 0; i < n; i++) {
    		int p;
    		scanf("%d", &p);
    		p--;

    		if (p != -1)
	    	   vertex[p].pb(i);
    	}

    	dfs(0);
    	
    	cout << "Case #" << tnum + 1 << ": " << pmin[0][ssize - 1] << endl;
    }

    return 0;
}
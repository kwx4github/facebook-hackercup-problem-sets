#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <cstring>

using namespace std;

const int N =  200001;
const int K = 10;
vector<int> g[N];

int dp[N][K];

int dfs(int x, int prev) {
	if (dp[x][prev] != -1) return dp[x][prev];
	dp[x][prev] = 100 * N;
	for (int v = 1; v <= K; ++v) {
		if (v == prev) continue;
		int val = v;
		for (int i = 0; i < g[x].size(); ++i) 
			val += dfs(g[x][i], v);
		dp[x][prev] = min(dp[x][prev], val);
	}
	return dp[x][prev];
}	


int main (void) {
	int T;
	cin >> T;
	for (int c = 1; c <= T; ++c) {
		int n; cin >> n;
		for (int i = 0; i < n; ++i) g[i].clear();
		for (int i = 0; i < n; ++i) {
			int manager;
			cin >> manager;
			if (i == 0) continue;
			g[manager - 1].push_back(i);
		}
	
		memset(dp, -1, sizeof dp);
		int res = dfs(0, 0);
		printf("Case #%d: %d\n", c, res);
	}	
	return 0;
}

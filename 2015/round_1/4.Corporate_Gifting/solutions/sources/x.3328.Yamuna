import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class TestFH5 {

	public static void main(String[] args) {

		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					new FileInputStream("corporate_gifting.txt")));
			String str = br.readLine();
			BufferedWriter write = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream("output.txt")));
			//int tt=200000;
			/*StringBuffer sbf =new StringBuffer();
			sbf.append("0");
			for(int i=1;i<tt;i+=2){
				sbf.append(i).append(" ").append(i).append(" ");
				
			}
			System.out.println(sbf.toString());
			write.write(sbf.toString());
			write.newLine();
			write.flush();
*/
			int t = Integer.parseInt(str);
			int count = 0;

			while (count < t) {
				int n = Integer.parseInt(br.readLine());
				Node[] nodes = new Node[n ];
				String[] hs = br.readLine().split("\\s");
				Node root = null;
				for (int i = 0; i < nodes.length; i++) {

					int parent = Integer.parseInt(hs[i]);
					if (nodes[i] == null) {
						Node node = new Node();
						nodes[i] = node;
					}
					Node node = nodes[i];
					node.parent = parent-1;
					node.value = i ;
					node.bool = new HashSet<Integer>();
					if (parent>0&&nodes[parent-1] == null) {
						Node pnode = new Node();
						pnode.value = parent-1;
						pnode.bool = new HashSet<Integer>();
						nodes[parent-1 ] = pnode;

					}
					if(parent>0)
					nodes[parent-1].children.add(i);
					if (parent == 0) {
						root = node;
					}

				}
				Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
				populateLevels(map, root, nodes);

				Set<Integer> keys = map.keySet();
				int greatestLevel = -1;
				//int size = -1;
				for (Integer ll : keys) {

					//int s = map.get(ll).size();
					if (greatestLevel <ll) {
						//size = s;
						greatestLevel = ll;
					}
				}
                  long total=compute(map, nodes, greatestLevel);
                  write.write("Case #"+(count+1)+": "+total);
                  write.newLine();
                  write.flush();
				count++;

			}
			
			//System.out.println(sbf.toString().split("\\s").length);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void populateLevels(Map<Integer, List<Integer>> levelsMap,
			Node root, Node[] nodes) {
		//System.out.println("Begin");
		List<Integer> ll = new ArrayList<Integer>();
		ll.add(root.value);
		levelsMap.put(0, ll);
		Queue<Node> queue = new LinkedList<Node>();
		queue.add(root);

		while (!queue.isEmpty()) {
			
			Node element = queue.poll();
			//System.out.println(element.value);
			List<Integer> children = element.children;
			//System.out.println(children);
			for (Integer ch : children) {
				nodes[ch].level = element.level + 1;
				if (levelsMap.get(nodes[ch].level) == null) {
					levelsMap.put(nodes[ch].level, new ArrayList<Integer>());
				}
				levelsMap.get(nodes[ch].level).add(ch);
				queue.add(nodes[ch]);

			}

		}
		
	//	System.out.println("En d");

	}

	private static long compute(Map<Integer, List<Integer>> nodeLevels,
			Node[] graph, int greatestLevel) {

		long total = 0;
		;

		for (int j = greatestLevel; j >= 0; j--) {
			List<Integer> nodes = nodeLevels.get(j);
			for (Integer elem : nodes) {

				Set<Integer> bool = graph[elem].bool;
				int index = -1;
				for (int i = 1; i <=graph.length; i++) {
					//System.out.println("Here "+i);
					if (!bool.contains(i)) {
						index = i;
						break;
					}
				}

				int p = graph[elem].parent;
				if (p >= 0) {
					Node node = graph[graph[elem].parent];
					node.bool.add(index);
				}
				total = total + index ;

			}
		}
		System.out.println(total);
		return total;

	}

	static class Node {
		int level;
		int value;
		int parent;
		int gift;
		Set<Integer> bool;

		List<Integer> children = new ArrayList<Integer>();

	}
}

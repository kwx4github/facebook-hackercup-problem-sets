object Solution {

  def solve(n : Int, employees : Map[Int, Array[Int]], cur : Int) : (Int, Int) = {
    employees.get(cur) match {
      case None => (1, 1)
      case Some(children) => {
        val results = children.map(x => solve(n, employees, x))
        val sum = results.map(_._1).sum
        val taken = results.map(_._2).toSet
        val my = (1 to n).find(!taken.contains(_)).get
        (sum + my, my)
      }
    }
  }

  def main(args: Array[String]) {
    val T = scala.io.StdIn.readInt
    for (t <- 1 to T) {
      val n = scala.io.StdIn.readInt
      val managers = scala.io.StdIn.readLine.split(" ").map(_.toInt)
      val employees = managers.zipWithIndex.map(x => (x._1, x._2 + 1)).groupBy(_._1).mapValues(x => x.map(_._2))
      println("Case #" + t + ": " + solve(n, employees, 1)._1)
    }
  }

}
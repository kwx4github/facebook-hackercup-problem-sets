#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <bitset>
#include <numeric>
#include <ctime>
#include <cmath>
#include <cassert>
#include <algorithm>

using namespace std;

typedef pair<int, int> PII;
typedef long long ll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define pct __builtin_popcount

#define INF 1000000007
#define N 200010
int n, fa[N], d[N];
int _f[N*6]; int* f[N];
vector<int> A[N];
int q[N];

int main (){
	int _;
	cin >> _;
	for (int __ = 1; __ <= _; __ ++) {
		cin >> n;
		memset(d, 0, sizeof d);
		for (int i = 1; i <= n; i ++) A[i].clear();
		for (int i = 1; i <= n; i ++) {
			cin >> fa[i];
			d[i] += 3;
			if (fa[i] != 0) {
				d[fa[i]] ++;
				A[fa[i]].pb(i);
			}
		}
		memset(_f, 0, sizeof _f);
		f[1] = _f;
		for (int i = 2; i <= n+1; i ++)
			f[i] = f[i-1] + d[i-1];
		//cout << (int)(f[n+1]-f[1]+1)/n << endl;
		int l = 1, r = 1;
		q[1] = 1;
		while (l <= r) {
			int x = q[l];
			++l;
			for (vector<int>::iterator i = A[x].begin(); i != A[x].end(); i ++) {
				q[++r] = *i;
			}
		}
		for (int i = n; i >= 1; i --) {
			int x = q[i];
			vector<PII> ch1, ch2;
			for (vector<int>::iterator j = A[x].begin(); j != A[x].end(); j ++) {
				int b1 = INF, w1, b2 = INF, w2; 
				for (int k = 0; k < d[*j]; k ++) {
					if (f[*j][k] < b1) {
						w2 = w1; b2 = b1;
						w1 = k; b1 = f[*j][k];
					} else
					if (f[*j][k] < b2) {
						w2 = k; b2 = f[*j][k];
					}
				}
				ch1.pb(mp(b1,w1));
				ch2.pb(mp(b2,w2));
			}
			int c = (int) ch1.size();
			for (int k = 0; k < d[x]; k ++) {
				int S = 0;
				for (int j = 0; j < c; j ++) {
					if (ch1[j].se == k) S += ch2[j].fi;
					else S += ch1[j].fi;
				}
				f[x][k] = S+k+1;
			}
		}
		int S = INF;
		for (int i = 0; i < d[1]; i ++) 
			S = min(S, f[1][i]);
		printf ("Case #%d: %d\n", __, S);
	}
	return 0;
}
#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include <map>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b);
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>=0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
struct node{
	int lev,pos;
};
int dp[200002][20];
node sot[200002];
vector<int> graph[200002];

int bfs( int root,int lev)
{
	queue<node> q;
	int x=0;
	q.push( (node) {root,lev} );
	while( !q.empty() )
	{
		node tmp=q.front();
		q.pop();
		sot[x]= tmp;
		x++;
		int size=graph[tmp.pos].size(),i;
		FOR(i,size)
		{
			q.push( (node){tmp.lev+1,graph[tmp.pos][i] } );
		}
		
	}
	return x;
}

bool comp( node a,node b)
{
	if( a.lev > b.lev ) return true;
	if( a.lev==b.lev && a.pos>b.pos ) return true;
	return false;
}
int main()
{
	ios_base::sync_with_stdio(0); //dont use with EOF
	int t,n,i,tmp,x=0,val,k,j;
	cin>>t;
	while(t--)
	{
		x++;
		cin>>n;
		FOR(i,n+2) graph[i].clear();
		FOR(i,n)
		{
			cin>>tmp;
			graph[tmp].push_back(i+1);
		}
		
		int l=bfs(1,1);
		sort( sot, sot+l,comp);
		FOR(i,l)
		{
			node tmp=sot[i];
			int pos=tmp.pos;
			int size=graph[pos].size();
			FOR_X(val,20,1)
			{
				int ans=0;
				FOR(k,size)
				{
					int min=INT_MAX;
					FOR_X(j,20,1)
					{
						if(j==val) continue;
						min=MIN(min, dp[ graph[pos][k] ][j] ); 
					}
					ans+=min;
				}
				dp[ pos][val]=ans+val;
			}
		}
		int min=INT_MAX;
		FOR_X(i,20,1)
		{
			min=MIN(min,dp[1][i]);
		}
		
		cout<<"Case #"<<x<<": "<<min<<endl;
	}
	return 0;
}

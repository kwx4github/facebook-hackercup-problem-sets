import java.io.BufferedReader;
import java.util.Comparator;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.math.BigInteger;
import java.util.Collections;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author AlexFetisov
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("corporate_gifting.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting {
    public static final long INF = Long.MAX_VALUE / 2;
    Graph tree;

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        tree = new Graph();
        int n = in.nextInt();
        tree.initGraph(n, n-1);
        int[] parent = Utils.readIntArray(in, n);
        for (int i = 1; i < n; ++i) {
            tree.addEdge(parent[i]-1, i);
        }
        dp = new long[n][4];
        ArrayUtils.fill(dp, INF);
        dfs(0, -1);
        out.println(Math.min(dp[0][1], Math.min(dp[0][2], dp[0][3])));
    }

    private void dfs(int v, int p) {
        long min12 = 0, min23 = 0, min13 = 0;
        for (int e = tree.first[v]; e != -1; e = tree.next[e]) {
            int to = tree.to[e];
            if (to == p) continue;
            dfs(to, v);
            min12 += Math.min(dp[to][1], dp[to][2]);
            min23 += Math.min(dp[to][3], dp[to][2]);
            min13 += Math.min(dp[to][1], dp[to][3]);
        }
        
        dp[v][1] = 1 + min23;
        dp[v][2] = 2 + min13;
        dp[v][3] = 3 + min12;
    }

    long[][] dp;
}

class Graph {
    public int[] from;
    public int[] to;
    public int[] first;
    public int[] next;
    public int nVertex;
    public int nEdges;
    public int curEdge;

    public Graph() {}

    public void initGraph(int n, int m) {
        curEdge = 0;
        nVertex = n;
        nEdges = m;
        from = new int[m * 2];
        to = new int[m * 2];
        first = new int[n];
        next = new int[m * 2];
        Arrays.fill(first, -1);
    }

    public void addEdge(int a, int b) {
        next[curEdge] = first[a];
        first[a] = curEdge;
        to[curEdge] = b;
        from[curEdge] = a;
        ++curEdge;

        next[curEdge] = first[b];
        first[b] = curEdge;
        to[curEdge] = a;
        from[curEdge] = b;
        ++curEdge;
    }

}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer stt;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    public String nextString() {
        while (stt == null || !stt.hasMoreTokens()) {
            stt = new StringTokenizer(nextLine());
        }
        return stt.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextString());
    }

    public String next() {
        return nextString();
    }
}

class Utils {
    public static int[] readIntArray(InputReader in, int n) {
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = in.nextInt();
        }
        return a;
    }

}

class ArrayUtils {

    public static void fill(long[][] a, long value) {
        for (int i = 0; i < a.length; ++i) {
            Arrays.fill(a[i], value);
        }
    }

}


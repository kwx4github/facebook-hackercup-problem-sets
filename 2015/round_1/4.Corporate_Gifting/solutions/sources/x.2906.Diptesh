#include<stdio.h>
#include<set>
#include<queue>
#include<string.h>
using namespace std;
queue<int> nodesNext;
int parent[200099];
set<int> childrens[200099];
bool isLeaf[200099];
int numofChilds[200099];
int t,n;
long long thisIsAns;
set<int>::iterator iter;
int getGiftFrom(int eID){
    if(childrens[eID].size()==0)
        return 1;
    iter=childrens[eID].begin();
    int ret=1;
    for( ; iter!=childrens[eID].end() ; iter++ ){
        if(*iter==ret)
            ret++;
        else
            break;
    }
    return ret;
}
void processInput(){
    int preferredGiftValue;
    int empl;
    numofChilds[0]=0;
    while(!nodesNext.empty()){
        empl=nodesNext.front(); nodesNext.pop();
        preferredGiftValue=getGiftFrom(empl);
        childrens[parent[empl]].insert(preferredGiftValue);
        thisIsAns+=preferredGiftValue;
        //printf("Employee %d will give %d$\n",empl,preferredGiftValue);
        if(numofChilds[parent[empl]]==1){
            numofChilds[parent[empl]]=0;
            nodesNext.push(parent[empl]);
        }else
            numofChilds[parent[empl]]--;
    }
}
void clearInput(){
    for(int i=0 ; i<=n ; i++){
        childrens[i].clear();
    }
}
int main(){
    freopen("corporate_gifting.txt","r",stdin);
    freopen("giftOut.txt","w",stdout);
    scanf("%d",&t);
    for(int cas=1 ; cas<=t ; cas++){
        scanf("%d",&n);
        thisIsAns=0;
        memset(isLeaf,0,sizeof(isLeaf));
        memset(numofChilds,0,sizeof(numofChilds));
        for(int i=1 ; i<=n ; i++){
            scanf("%d",&parent[i]);
            isLeaf[parent[i]]=1;
            numofChilds[parent[i]]++;
        }
        for(int i=1 ; i<=n ; i++){
            if(isLeaf[i]==0)
                nodesNext.push(i);
        }
        processInput();
        clearInput();
        printf("Case #%d: %lld\n",cas,thisIsAns);
    }
    return 0;
}

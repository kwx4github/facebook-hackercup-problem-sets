#include <algorithm>
#include <assert.h>
#include <climits>
#include <cstring>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <numeric>
#include <limits>
#include <iomanip>
#include <sys/resource.h>
using namespace std;

#define sz(a) ((int)a.size())
#define all(a) a.begin(), a.end()
#define LL long long
#define LD long double
#define vi vector<int>
#define vl vector<LL>
#define vs vector<string>
#define vb vector<bool>
#define ii pair<int, int>
#define vii vector<ii>
#define SET(v, i) (v | (1 << i))
#define TEST(v, i) (v & (1 << i))
#define TOGGLE(v, i) (v ^ (1 << i))
void SetStackSize() {
  const rlim_t kStackSize = 1024L * 1024L * 1024L;   // min stack size = 64 Mb
      struct rlimit rl;
      int result;

      result = getrlimit(RLIMIT_STACK, &rl);
      if (result == 0)
      {
          if (rl.rlim_cur < kStackSize)
          {
              rl.rlim_cur = kStackSize;
              result = setrlimit(RLIMIT_STACK, &rl);
              if (result != 0)
              {
                  fprintf(stderr, "setrlimit returned result = %d\n", result);
              }
          }
      }
}

const int mx = 30;
LL mem[mx][200000 + 100];
const LL INF = (1L << 63) - 1;
LL Solve(const vector<vi>& tree, int v, int color = 0) {
  if (sz(tree[v]) == 0) {
    if (!color) return 1;
    for (int i = 1; i < mx; ++i) {
      if (i == color) continue;
      return i;
    }
  }

  if (mem[color][v] != -1) return mem[color][v];

  LL ret = INF;
  for (int i = 1; i < mx; ++i) {
    if (i == color) continue;

    LL sum = 0;
    for (int u = 0; u < sz(tree[v]); ++u) {
      sum += Solve(tree, tree[v][u], i);
    }
    ret = min(ret, sum + i);
  }
  return mem[color][v] = ret;
}

int main() {
  SetStackSize();
  cin.sync_with_stdio(false);
  int t;
  cin >> t;
  for (int test = 1; test <= t; ++test) {
    int n, p;
    cin >> n;
    vector<vi> tree(n + 1);
    for (int i = 1; i <= n; ++i) {
      cin >> p;
      tree[p].push_back(i);
    }

    memset(mem, -1, sizeof mem);
    cout << "Case #" << test << ": " << Solve(tree, 1) << endl;
  }
  return 0;
}

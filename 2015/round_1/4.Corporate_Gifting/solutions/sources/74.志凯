
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <string.h>
 
using namespace std;
using namespace rel_ops;
 
typedef long long int64;
typedef unsigned long long uint64;
const double pi=acos(-1.0);
const double eps=1e-11;
const int inf=0x7FFFFFFF;
template<class T> inline bool checkmin(T &a,T b){return b<a?a=b,1:0;}
template<class T> inline bool checkmax(T &a,T b){return b>a?a=b,1:0;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define mem(a,b) memset(a, b, sizeof(a))
#define clr(a) memset(a, 0, sizeof(a))
#define rep(i,n) for(int i=0; i<n; i++)
#define repit(i,v) for(typeof(v.begin()) i=v.begin(); i!=v.end(); i++)
#define iter(v) typeof(v.begin())
#define ff first
#define ss second
#ifdef LOCAL
#define dbg(args...) printf(args); //##__VA_ARGS__
#define dout cout
#define out(x) (cout<<#x<<": "<<x<<endl)
template<class T>void show(T a, int n){for(int i=0; i<n; ++i) cout<<a[i]<<' '; cout<<endl;}
template<class T>void show(T a, int r, int l){for(int i=0; i<r; ++i)show(a[i],l);cout<<endl;}
#else
#define dbg(...)
#define dout if(true);else cout
#define out(...)
#define show(...)
#endif

const int N = 200005;
vector<int> G[N];
int pre[N];
int has[N];
int n;
pair<int, int> p1[N], p2[N];
int query(int p, int up) {
	if (p1[p].ss != up) return p1[p].ff;
	return p2[p].ff;
}

void store(int p, pair<int, int> pr) {
	if (pr < p1[p]) {
		p2[p] = p1[p];
		p1[p] = pr;
	}
	else if(pr < p2[p]) {
		p2[p] = pr;
	}
}

int main() {
	int T;
	cin >> T;
	rep (cas, T) {
		cin >> n;
		rep (i, n+1) {
			G[i].clear();
			p1[i] = p2[i] = MP(1e9, 0);
		}
		rep(j, n) {
			int k;
			scanf("%d", &k);
			pre[j+1] = k;
			has[k]++;
			G[k].push_back(j+1);
		}
		queue<int> vc;
		for (int i = 1; i <= n; i++) {
			if (has[i] == 0) vc.push(i);
		}
		while (!vc.empty()) {
			int cur = vc.front();
			vc.pop();
			has[pre[cur]]--;
			if (!has[pre[cur]]) vc.push(pre[cur]);
			if (G[cur].size() == 0) {
				store(cur, MP(1, 1));
				store(cur, MP(2, 2));
			}
			else {
				for (int i = 1; i <= 100; i ++) {
					int c = i;
					for (int j = 0; j < G[cur].size(); j++) {
						c += query(G[cur][j], i);
					}
					store(cur, MP(c, i));
				}
			}
		}
		printf("Case #%d: %d\n", cas+1, query(1, 0));
	}
	return 0;
}

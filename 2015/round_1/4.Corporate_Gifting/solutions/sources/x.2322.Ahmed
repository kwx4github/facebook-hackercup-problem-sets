#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

int n, vis[200001], ID;
int memo[200001][2];
vector<int> arr[200001];

int solve(int node, bool prv) {
	int& ret = memo[node][prv];
	if (ret != -1)
		return ret;
	int sz = arr[node].size();
	int ret1 = (vis[node] != ID && !prv), ret2 = 0;
	for (int i = 0; i < sz; ++i) {
		if (vis[node] != ID && !prv)
			ret1 += solve(arr[node][i], 1);
		ret2 += solve(arr[node][i], 0);
	}
	return ret = max(ret1, ret2);
}

void BuildPath(int node, bool prv) {
	int sz = arr[node].size();
	int ret1 = (vis[node] != ID && !prv), ret2 = 0;
	for (int i = 0; i < sz; ++i) {
		if (vis[node] != ID && !prv)
			ret1 += solve(arr[node][i], 1);
		ret2 += solve(arr[node][i], 0);
	}
	if (ret1 > ret2) {
		vis[node] = ID;
		for (int i = 0; i < sz; ++i)
			BuildPath(arr[node][i], 1);
	} else {
		for (int i = 0; i < sz; ++i)
			BuildPath(arr[node][i], 0);
	}
}

int main() {
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t;
	cin >> t;
	for (int tst = 1; tst <= t; ++tst) {
		cin >> n;
		for (int i = 0; i <= n; ++i)
			arr[i].clear();
		for (int i = 1; i <= n; ++i) {
			int m;
			cin >> m;
			arr[m].push_back(i);
		}
		++ID;
		ll cnt = 0, price = 1, ret = 0;
		while (cnt < n) {
			memset(memo, -1, sizeof memo);
			ll cur = solve(1, 0);
			BuildPath(1, 0);
			cnt += cur;
			ret += (cur * price++);
		}
		cout << "Case #" << tst << ": " << ret << endl;
	}
	return 0;
}

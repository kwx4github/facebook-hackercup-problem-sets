#include <iostream>
#include <stdlib.h>
#include <algorithm>

using namespace std;

struct queue{
  public: int a[300000];
    int fp, rp;
  queue(){
    fp=rp=-1;
  }
  void push(int i){
    a[++fp]=i;
  }

  int pop(){
    return a[++rp];
  }

  bool empty(){
    return (fp==rp);
  }
  
};

struct LNode{
  public: int info;
    LNode *next;

  LNode(int data){
    info=data;
    next=NULL;
  }
};

LNode *getLNode(int info){
  LNode *temp=new LNode(info);
  return temp;
}


struct Node{
  public:  int numChild;
    LNode *child;
    int *a;
    int cur_ind;
  Node(){
    numChild=0;
    child=NULL;
    cur_ind=0;
  }
  
  void addChild(int i){
    numChild++;
    if(child == NULL){
      child=getLNode(i);
    }
    else{
      LNode *temp=getLNode(i);
      temp->next=child;
      child=temp;
    }
  }

};
struct Graph{
 public: int N;
  Node *vert;
  int *pr;

 Graph(int Num){
   N=Num;
   vert=new Node[N];
   pr=new int[N];
 }

 int addEdge(int i, int j){
   vert[i].addChild(j);
   pr[j]=i;  
 }
 
 void adjust(){
   for(int i=0;i<N;i++){
     if(vert[i].numChild != 0)
       vert[i].a=new int[vert[i].numChild];
   }
 }

 int *TopSort(int st){
   int *a=new int[N];
   queue qu;
   qu.push(st);
   a[0]=st;
   int ind=1;
   while(!qu.empty()){
     int next=qu.pop();
     LNode *cur=vert[next].child;
     while(cur != NULL){
       a[ind++]=cur->info;
       qu.push(cur->info);
       cur=cur->next;
     }
   }
   return a;
 }
 long long minimumSum(int *arr);
 
};

long long Graph :: minimumSum(int *arr){
  long long res=0;
  int i,j;
  for(i=N-1;i>=0;i--){
    int ind=arr[i];
    int nChild=vert[ind].numChild;
    if(nChild==0){
      res=res+1;
      int parent=pr[ind];
      vert[parent].a[(vert[parent].cur_ind)++]=1;
      continue;
    }

    sort(vert[ind].a, (vert[ind].a)+(vert[ind].numChild));
    if(vert[ind].a[0] > 1){
      res=res+1;
      int parent=pr[ind];
      vert[parent].a[(vert[parent].cur_ind)++]=1;
      continue;
    }
  
    for(j=1;j<nChild;j++){
    	if(vert[ind].a[j] - vert[ind].a[j-1] > 1)
      	  break;
    }
    int parent=pr[ind];
    res=res+(long long)vert[ind].a[j-1]+1;
    vert[parent].a[(vert[parent].cur_ind)++]=vert[ind].a[j-1]+1;
  }
  return res;
}

int main(){
  int i,j,T,N,p;
  long long res;
  cin>>T;
  for(i=0;i<T;i++){
    cin>>N;
    Graph g(N);
    cin>>p;
    for(j=1;j<N;j++){
	cin>>p;
	p--;
        g.addEdge(p,j);
    }
    res=0;
    g.adjust();
    int *topOrder=g.TopSort(0);
    res=g.minimumSum(topOrder);
    cout<<"Case #"<<i+1<<": "<<res<<"\n";
  }
  return 0;
}


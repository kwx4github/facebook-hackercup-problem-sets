//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define M 20
#define N 222222
vector<int> adj[N];
int dp[N][M+1], d[N];
pair<int, int> o[N];
int main() {
	int t;
	scanf("%d", &t);
	rep(T, t) {
		if(T) pn;
		int n;
		scanf("%d", &n);
		rep(i, n) adj[i].clear();
		rep(i, n) {
			int pa;
			scanf("%d", &pa);
			if(i) {
				adj[pa-1].pb(i);
			}
		}
		queue<int> q;
		q.push(0);
		d[0] = 0;
		while(!q.empty()) {
			int cur = q.front(); q.pop();
			rep(i, adj[cur].sz) {
				d[adj[cur][i]] = d[cur]+1;
				q.push(adj[cur][i]);
			}
		}
		rep(i, n) {
			o[i].ff = -d[i];
			o[i].ss = i;
		}
		sort(o, o+n);
		int childSum[M+1];
		rep(i, n) {
			int cur = o[i].ss;
			rep(j, M+1) childSum[j] = 0;
			rep(j, adj[cur].sz) {
				rep(k, M+1) childSum[k] += dp[adj[cur][j]][k];
			}
			rep(j, M+1) {
				dp[cur][j] = imax;
				rep(k, M+1) if(k && (k != j)) {
					dp[cur][j] = min(dp[cur][j], k + childSum[k]);
				}
			}
		}
		int answer = dp[0][0];
		printf("Case #%d: %d", T+1, answer);
	}
}
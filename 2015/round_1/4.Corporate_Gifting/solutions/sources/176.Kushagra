#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <utility>
#include <iomanip>
#include <bitset>
#include <fstream>

using namespace std;

typedef long long int64;

#define MAXLABEL 100
#define MAXN 200000

int64 val[MAXN][MAXLABEL];

void calc(const vector< vector<int> > &graph) {
  enum { WHITE, GRAY, BLACK };
  const int N = graph.size();
  vector<int> color(N, WHITE);
  stack<int> S;
  S.push(0);

  while (!S.empty()) {
    int node = S.top();

    if (color[node] == WHITE) {
      color[node] = GRAY;
      // Push all children
      for (auto it = graph[node].begin(); it != graph[node].end(); it++) {
        S.push(*it);
      }
    }
    else if (color[node] == GRAY) {
      color[node] = BLACK;
      S.pop();
      // Postprocess
      for (int label = 1; label <= MAXLABEL; label++) {
        val[node][label-1] = label;
        for (auto it = graph[node].begin(); it != graph[node].end(); it++) {
          int64 opt = N * N;
          for (int i = 0; i < MAXLABEL; i++) {
            if (i != (label - 1)) {
              opt = min(opt, val[*it][i]);
            }
          }
          val[node][label-1] += opt;
        }
      }
    }
    else {
      S.pop();
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int T;
  cin >> T;

  for (int kase = 1; kase <= T; kase++) {
    int N;
    cin >> N;

    vector< vector<int> > graph(N);
    for (int i = 0; i < N; i++) {
      int x;
      cin >> x;
      x--;

      if (x >= 0)
        graph[x].push_back(i);
    }
    calc(graph);

    int64 opt = val[0][0];
    for (int i = 1; i < MAXLABEL; i++) {
      opt = min(opt, val[0][i]);
    }
    cout << "Case #" << kase << ": " << opt << "\n";
    cerr << "Case #" << kase << ": " << opt << endl;
  }
  return 0;
}

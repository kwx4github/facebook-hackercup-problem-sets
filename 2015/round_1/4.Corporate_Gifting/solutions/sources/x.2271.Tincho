
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Stack;
import java.util.StringTokenizer;


public class Main {
	
	public static class Tree{
		int minMoney, minNum, maxMoney, maxNum, dif;
		ArrayList<Integer> resp;
		
		public Tree(){
			resp= new ArrayList<Integer>();
			minMoney=0;
			minNum=0;
			maxMoney=0;
			maxNum=0;
			dif=0;
		}
		
		public void add(int i){
			resp.add(i);
		}
		
		public int size(){
			return resp.size();
		}
		
		public int get(int i){
			return resp.get(i);
		}
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader bf= new BufferedReader(new FileReader("/Users/martin/Downloads/corporate_gifting.txt"));
		//BufferedReader bf= new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter out = new BufferedWriter(new FileWriter("/Users/martin/Downloads/D.txt"));
		StringTokenizer st= new StringTokenizer(bf.readLine());
		int T=Integer.parseInt(st.nextToken());
		int N, aux, l;
		boolean exp[];
		HashMap<Integer, Integer> vals;
		int min1, min2, min11, min22, min3, min33, min4, min44, sum;
		Stack<Integer> s;
		for (int i=1; i<=T; i++){
			System.out.print("Case #"+i+": ");
			out.append("Case #"+i+": ");
			st= new StringTokenizer(bf.readLine());
			N=Integer.parseInt(st.nextToken());
			st= new StringTokenizer(bf.readLine());
			Tree t[]= new Tree[N];
			t[0]= new Tree();
			for (int j=1; j<N; j++){
				t[j]= new Tree();
			}
			st.nextToken();
			for (int j=1; j<N; j++){
				aux=Integer.parseInt(st.nextToken())-1;
				t[aux].add(j);
				
			}
			s= new Stack<Integer>();
			s.push(0);
			exp= new boolean[N];
			Arrays.fill(exp, false);
			while(!s.empty()){
				aux=s.peek();
				if (!exp[aux]){
					exp[aux]=true;
					for (int j=0; j<t[aux].size(); j++){
						s.push(t[aux].get(j));
					}
				}
				else{
					s.pop();
					if (t[aux].size()==0){
						t[aux].minMoney=1;
						t[aux].minNum=1;
						t[aux].maxMoney=2;
						t[aux].maxNum=2;
						t[aux].dif=1;
					}
					else{
						min1=Integer.MAX_VALUE;
						min11=Integer.MAX_VALUE;
						min2=Integer.MAX_VALUE;
						min22=Integer.MAX_VALUE;
						min3=0;
						min33=0;
						min4=0;
						min44=0;
						sum=0;
						vals= new HashMap<Integer, Integer>();
						for (int j=0; j<t[aux].size(); j++){
							sum+=t[t[aux].get(j)].minMoney;
							if (vals.get(t[t[aux].get(j)].minNum)==null) vals.put(t[t[aux].get(j)].minNum, t[t[aux].get(j)].dif);
							else vals.replace(t[t[aux].get(j)].minNum, vals.get(t[t[aux].get(j)].minNum)+t[t[aux].get(j)].dif);
						}
						l=1;
						while(min4==0){
							if (vals.get(l)==null){
								if (min3==0){
									min3=l;
									min33=sum+l;
								}else{
									min4=l;
									min44=sum+l;
								}
							}else{
								if (min1==0 | min1>(vals.get(l)+sum+l)){
									min2=min1;
									min22=min11;
									min11=vals.get(l)+sum+l;
									min1=l;
								}else if (min2==0 | min2>(vals.get(l)+sum+l)){
									min22=vals.get(l)+sum+l;
									min2=l;
								}
								vals.remove(l);
							}
							l++;
						}
						for(int v : vals.keySet()) {
						    if (min1==0 | min1>(vals.get(v)+sum+v)){
								min2=min1;
								min22=min11;
								min11=vals.get(v)+sum+v;
								min1=v;
							}else if (min2==0 | min2>(vals.get(v)+sum+v)){
								min22=vals.get(v)+sum+v;
								min2=v;
							}
						}
						if (min11<min33){
							t[aux].minMoney=min11; 
							t[aux].minNum=min1;
							if (min22<min33){
								t[aux].maxMoney=min22; 
								t[aux].maxNum=min2;
							}else{
								t[aux].maxMoney=min33; 
								t[aux].maxNum=min3;
							}
						} else{
							t[aux].minMoney=min33; 
							t[aux].minNum=min3;
							if (min11<min44){
								t[aux].maxMoney=min11; 
								t[aux].maxNum=min1;
							}else{
								t[aux].maxMoney=min44; 
								t[aux].maxNum=min4;
							}
						}
						t[aux].dif=t[aux].maxMoney-t[aux].minMoney;
					}
				}
			}
			System.out.println(t[0].minMoney);
			out.append(String.valueOf(t[0].minMoney));
			if (i<T)out.newLine();
		}
		out.close();
	}
	
}

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>
#include <climits>
#include <queue>

#define N 200005
#define C 36

using namespace std;

vector<int> g[N];
int t[N][C];
vector<int> ord;
bool vis[N];

void bfs(int s){
	memset(vis, false, sizeof(vis));
	
	queue<int> Q;
	Q.push(s);
	vis[s] = true;
	
	while(!Q.empty()){
		
		int u = Q.front();
		
		//cout<<"u: "<<u<<endl;
		ord.push_back(u);
		Q.pop();
		
		for(int i = 0; i < g[u].size(); i++){
			int to = g[u][i];
			
			if(!vis[to]){
				Q.push(to);
				vis[to] = true;
			}
		}
		
	}
	
}

int dp(int v, int col){
	
	//cout<<"v: "<<v<<"  col: "<<col<<endl;
	
	int &ret = t[v][col];
	if(ret != -1) return ret;
	
	int aux = 0;
	
	for(int i = 0; i < g[v].size(); i++){
		
		int to = g[v][i];
		
		int min_val = -1;
		for(int j = 1; j < C; j++){
			if(j == col) continue;
			
			if(min_val == -1) min_val = j + dp(to, j);
			else min_val = min(min_val, j + dp(to, j));
		}
		
		aux += min_val;
	}
	
	return ret = aux;
}


int main(){
	
	int nc, caso = 1;
	scanf("%d", &nc);
	
	while(nc--){
		
		memset(t, -1, sizeof(t));
		
		int n;
		scanf("%d", &n);
		
		for(int i = 1; i <= n; i++){
			int padre;
			scanf("%d", &padre);
			
			if(i > 1){
				g[padre].push_back(i);
			}
		}
		
		bfs(1);
		
		int resp = INT_MAX;
		
		int n2 = ord.size();
		for(int i = n2 - 1; i >= 0; i--){
			int u = ord[i];
			for(int j = 1; j < C; j++) dp(u, j);
		}
		
		for(int i = 1; i < C; i++) resp = min(resp, i + dp(1, i));
		
		printf("Case #%d: %d\n",caso, resp);
		caso++;
		
		for(int i = 0; i <= n; i++) g[i].clear();
		ord.clear();
	}
	
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<vector>
using namespace std;
#define SIZE 200002
int parent[SIZE];
vector<int> dp[SIZE];
vector<int> children[SIZE];
int node[SIZE];
int N;
int inline max(int a,int b){
	return a > b ? a : b;
}
int inline min(int a,int b){
	return a < b ? a : b;
}
void topSort(){
	for(int i=0;i<N;i++)node[i] = -1;
	node[0] = 0;
	int usedNode = 1;
	for(int i=0;i<usedNode;i++){
		int now = node[i];
		for(int j=0;j<children[now].size();j++){
			node[usedNode++] = children[now][j];
		}
	}
	return ;
}
int main(){
	int T;
	scanf("%d",&T);
	for(int ca =0; ca < T;ca++){
		scanf("%d",&N);
		for(int i=0;i<N;i++){
			children[i].clear();
			dp[i].clear();
		}
		for(int i=0;i<N;i++){
			scanf("%d",&parent[i]);
			if(i != 0){
				children[parent[i] - 1].push_back(i);
			}
		}
		topSort();

		for(int i=N - 1; i >=0;i--){
			int nowNode = node[i];
			int upperCost = 2;
			if(children[nowNode].size() > 1){
				for(int j =0;j<children[nowNode].size();j++){
					upperCost = max(upperCost, dp[children[nowNode][j]].size() + 1);
				}
			}
			for(int nowCost = 1;nowCost <= upperCost;nowCost++){
				int s = 0;
				for(int j =0;j<children[nowNode].size();j++){
					int tmpMin = 2147483647;
					for(int k=0;k<dp[children[nowNode][j]].size();k++){
						if(k + 1 == nowCost)continue;
						tmpMin = min(tmpMin, dp[children[nowNode][j]][k]);
					}
					s += tmpMin;
				}
				dp[nowNode].push_back(s + nowCost);
			}
		}
		int ans = 2147483647;
		for(int i=0;i<dp[0].size();i++){
			ans = min(ans, dp[0][i]);
		}
		printf("Case #%d: %d\n",ca + 1,ans);
		
	}
	return 0;
}

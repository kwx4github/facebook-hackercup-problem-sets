#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

template< class T, size_t N >
struct Array
{
    T X[ N ];
    Array()
    {
        memset( X, 0, sizeof( X ) );
    }
    T &operator []( size_t i )
    {
        return X[ i ];
    }
    const T &operator []( size_t i ) const
    {
        return X[ i ];
    }
};

class Solution
{
    static const int MAXN = 2000012;
    static const int MAXP = 22;
    int N;
    vector< int > ParentId;
    int Result, Max;

    vector< int > next;
    vector< int > first;

    vector< int > queue;

    vector< Array< int, MAXP > > best;
    vector< Array< int, MAXP > > max;

public:
    void Work()
	{
        int i, j, k, h, t, q, n;

        next.resize( N, -1 );
        first.resize( N, -1 );

        for( i = 1; i < N; ++i )
        {
            next[ i ] = first[ ParentId[ i ] ];
            first[ ParentId[ i ] ] = i;
        }

        queue.resize( N );

        queue[ 0 ] = 0;
        for( h = 0, t = 1; h < N; ++h )
        {
            for( i = first[ queue[ h ] ]; i != -1; i = next[ i ] )
                queue[ t++ ] = i;
        }

        best.resize( N );
        max.resize( N );

        for( q = N - 1; q >= 0; --q )
        {
            n = queue[ q ];
            for( i = 1; i < MAXP; ++i )
            {
                best[ n ][ i ] = i;
                max[ n ][ i ] = i;
                for( k = first[ n ]; k != -1; k = next[ k ] )
                {
                    int b = -1, m;
                    for( j = 1; j < MAXP; ++j )
                    {
                        if( i == j )
                            continue;
                        if( b == -1 || b > best[ k ][ j ] )
                        {
                            b = best[ k ][ j ];
                            m = max[ k ][ j ];
                        }
                    }
                    best[ n ][ i ] += b;
                    max[ n ][ i ] = std::max( max[ n ][ i ], m );
                }
            }
        }

        Result = -1;
        for( i = 1; i < MAXP; ++i )
        {
            if( Result == -1 || Result > best[ 0 ][ i ] )
            {
                Result = best[ 0 ][ i ];
                Max = max[ 0 ][ i ];
            }
        }

        first.clear();
        next.clear();
        queue.clear();
        best.clear();
	}
	
	void Read()
	{
        int i;
        scanf( "%d", &N );
        ParentId.resize( N );
        for( i = 0; i < N; ++i )
        {
            scanf( "%d", &ParentId[ i ] );
            --ParentId[ i ];
        }
	}

	void Write( int t )
	{
		printf( "Case #%d: %d\n", t, Result, Max );
	}
};

int main()
{
	int i, t;
	scanf( "%d", &t );
	for( i = 0; i < t; ++i )
    {
        Solution solution;
		solution.Read();
		solution.Work();
		solution.Write( i + 1 );
    }
	return 0;
}

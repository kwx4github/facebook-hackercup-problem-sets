#include<bits/stdc++.h>
#define MAX   200200
#define FOR(i,a,b) for (int i=(a),_b=(b);i<=_b;i=i+1)
#define REP(i,n) for (int i=0,_n=(n);i<_n;i=i+1)
#define FORE(i,v) for (__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)
#define fi   first
#define se   second
using namespace std;
typedef long long ll;
class Gifting {
private:
    vector<vector<int> > ch;
    vector<vector<ll> > dp;
    vector<pair<int,int> > bestChoose;
    int n;
    void loadtree(void) {
        assert(scanf("%d",&n)==1);
        ch.assign(n+7,vector<int>());
        dp.assign(n+7,vector<ll>());
        bestChoose.assign(n+7,make_pair(0,0));
        FOR(i,1,n) {
            int t;
            assert(scanf("%d",&t)==1);
            if (i==1) continue;
            ch[t].push_back(i);
        }
        FOR(i,1,n) dp[i].assign(ch[i].size()+3,0);
    }
    int getBest(const pair<int,int> &p,int x) {
        return (p.fi==x?p.se:p.fi);
    }
    void visit(int u) {
        FOR(i,1,ch[u].size()+2) dp[u][i]=i;
        FORE(it,ch[u]) {
            int v=*it;
            visit(v);
            FOR(i,1,ch[u].size()+2) dp[u][i]+=dp[v][getBest(bestChoose[v],i)];
        }
        bestChoose[u]=make_pair(-1,-1);
        FOR(i,1,ch[u].size()+2) {
            if (bestChoose[u].fi<0 || dp[u][bestChoose[u].fi]>dp[u][i]) {
                bestChoose[u].se=bestChoose[u].fi;
                bestChoose[u].fi=i;
            } else if (bestChoose[u].se<0 || dp[u][bestChoose[u].se]>dp[u][i])
                bestChoose[u].se=i;
        }
    }
public:
    Gifting() {
        n=0;
        ch.clear();
        dp.clear();
        bestChoose.clear();
    }
    void solve(int tc) {
        loadtree();
        cout<<"Case #"<<tc<<": ";
        if (n==1) cout<<"1\n";
        else {
            visit(1);
            cout<<dp[1][bestChoose[1].fi]<<"\n";
        }
    }
};
int main(void) {
    int t;
    assert(scanf("%d",&t)==1);
    FOR(i,1,t) {
        cerr<<i<<endl;
        Gifting solver;
        solver.solve(i);
    }
    return 0;
}

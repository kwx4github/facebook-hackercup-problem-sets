#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;

struct node
{
    int dad, p1, u1, p2, u2, solvedchild;

    vector < int > chld;

    node ( ) { dad = -1; p1 = -1; u1 = -1; p2 = -1; u2 = -1; solvedchild = 0; }
};

void Solve ( int num )
{
    queue < int > q;
    int n, t,cmax,hm; cin >> n;

    vector < node > v ( n );
    cin >> t;

    for ( int i = 1; i < n; i++ )
    {
        cin >> t; t--;
        v[i].dad = t;
        v[t].chld.push_back ( i );
    }

    for ( int i = 1; i < n; i++ )
        if ( v[i].chld.size() == 0 )
        {
            v[i].p1 = 1; v[i].u1 = 1;
            v[i].p2 = 2; v[i].u2 = 2;

            v[v[i].dad].solvedchild++;
            if ( v[v[i].dad].solvedchild == v[v[i].dad].chld.size() )
                q.push ( v[i].dad );
        }


    while ( !q.empty () )
    {
        t = q.front(); q.pop();

        cmax = 1;
        for ( int i = 0; i < v[t].chld.size(); i++ )
            cmax = max ( cmax, max ( v[v[t].chld[i]].p1, v[v[t].chld[i]].p2 ) );

        cmax += 2;

        for ( int i = 1; i <= cmax; i++ )
        {
            hm = i;

            for ( int j = 0; j < v[t].chld.size(); j++ )
                if ( v[v[t].chld[j]].p1 != i )
                    hm += v[v[t].chld[j]].u1;
                else hm += v[v[t].chld[j]].u2;

            if ( v[t].u1 == -1 || hm < v[t].u1 )
            {
                v[t].u2 = v[t].u1; v[t].p2 = v[t].p1;
                v[t].u1 = hm; v[t].p1 = i;
            }
            else if ( v[t].u2 == -1 || hm < v[t].u2 )
            {
                v[t].u2 = hm; v[t].p2 = i;
            }
        }

        if ( t != 0 )
        {
            v[v[t].dad].solvedchild++;

            if ( v[v[t].dad].solvedchild == v[v[t].dad].chld.size() )
                q.push ( v[t].dad );
        }
    }

    cout << "Case #" << num << ": " << v[0].u1 << endl;
}

int main()
{
    int t; cin >> t;

    for ( int i = 1; i <= t; i++ )
        Solve ( i );

    return 0;
}

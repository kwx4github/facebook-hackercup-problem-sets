#include "stdafx.h"
#include <list>
#include <stack>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <assert.h>

using namespace std;

#define pb push_back
#define mp make_pair


typedef unsigned long long ull;
typedef long long int64;


//#define mo 1000000007

#define maxn 200016

ull k1[maxn],k2[maxn], delta[maxn];
int c[maxn];
int parent[maxn];
vector<int> child[maxn];
//int degree[maxn];
int dd[maxn];

vector<int> bfs[2];

int main()
{
	bfs[0].reserve(maxn);
	bfs[1].reserve(maxn);

	freopen("..\\in.txt", "r", stdin);
	freopen("..\\out.txt", "w", stdout);
	
	int test_case=20;
	scanf("%d", &test_case);

	for (int i=1; i<=test_case; i++)
	{
		printf("Case #%d: ", i);

		int n=200000,t=0;
		scanf("%d", &n);

		memset(dd,0,sizeof(dd[0])*n);
		for (t=0; t<n; t++) {
			child[t].clear();
		}

		t = 1;
		scanf("%d", &t);
		parent[0]=0;

		for (int p=1; p<n; p++) {
			scanf("%d", &t);
			parent[p]=t-1;
			dd[parent[p]]++;
			child[parent[p]].push_back(p);
		}


		int index = 0;

		bfs[index].clear();
		for (t=0; t<n; t++)
			if (dd[t] == 0) {
				bfs[index].push_back(t);
			}

		while(bfs[index].size()) {
			const int oldi = index;
			const int newi = 1-index;

			bfs[newi].clear();
			for (t=0; t<bfs[oldi].size(); t++) {
				const int d = child[bfs[oldi][t]].size();
				ull x = 0;

				for (vector<int>::iterator it=child[bfs[oldi][t]].begin(); it!=child[bfs[oldi][t]].end(); it++) {
					x += k1[*it];
				}

				for (int j=0;j<d+1; j++) {
					delta[j]=x+j+1;
				}

				for (vector<int>::iterator it=child[bfs[oldi][t]].begin(); it!=child[bfs[oldi][t]].end(); it++) {
					if (c[*it] <= d+1) {
						delta[c[*it]-1] -= k1[*it] - k2[*it];
					}
				}


				k1[bfs[oldi][t]] = delta[0];
				k2[bfs[oldi][t]] = 0;
				c[bfs[oldi][t]] = 1;

				for (int j=1; j<d+1; j++) {
					if (delta[j]<k1[bfs[oldi][t]]) {
						c[bfs[oldi][t]] = j+1;
						k2[bfs[oldi][t]] = k1[bfs[oldi][t]];
						k1[bfs[oldi][t]] = delta[j];
					} else if (k2[bfs[oldi][t]] == 0 || delta[j]<k2[bfs[oldi][t]]) {
						k2[bfs[oldi][t]] = delta[j];
					}
				}

				if (d == 0) {
					k2[bfs[oldi][t]] = 2;
				}

				if (0 == --dd[parent[bfs[oldi][t]]]) {
					bfs[newi].push_back(parent[bfs[oldi][t]]);
				}
			}

			index = newi;
		}

		printf("%lld", k1[0]);

		printf("\n");
	}

	return 0;
}




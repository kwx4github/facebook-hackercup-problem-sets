#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const int MAXN = 200500;
const int MAXK = 50;

int t, n, a, ans;             
int dp[MAXN][MAXK], minp[MAXN], fork[MAXN];
vi g[MAXN];
                    
void dfs(int v, int p) {
	for (auto w: g[v])
		if (w != p) {
			dfs(w, v);
			minp[w] = dp[w][1];
			fork[w] = 1;
			for (int i = 2; i < MAXK; i++)
				if (minp[w] > dp[w][i]) {
					minp[w] = dp[w][i];
					fork[w] = i;
				}
		}
	
	for (int i = 1; i < MAXK; i++) {
		dp[v][i] = i;
		for (auto w: g[v])
			if (w != p) {
				if (fork[w] != i)
					dp[v][i] += minp[w];
				else {
					int mw = INF;
					for (int j = 1; j < MAXK; j++)
						if (j != i)
							mw = min(mw, dp[w][j]);
					dp[v][i] += mw;	
				}
			}		
	}
}

int main() {
                     
	scanf("%d\n", &t);
	
	forn(tt, t) {
		cerr << tt << '\n';
		       
		printf("Case #%d: ", tt + 1); 
		scanf("%d", &n);
		
		forn(i, n)
			g[i].clear();
		forn(i, n) {
			scanf("%d", &a);
			a--;
			
			if (i != 0) {
				g[i].pb(a);
				g[a].pb(i);
			}
		}
		
		dfs(0, 0);
		
		ans = dp[0][1];
		for (int i = 2; i < MAXK; i++)
			ans = min(ans, dp[0][i]);
		cout << ans << '\n';
	}
	
	return 0;
}
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

vector<int> adl[200100];
int dp[200100][30];

vector<int> topsort;

int dobfs(int ind)
{
	queue<int> que;
	que.push(ind);

	while(que.size())
	{
		int ind = que.front();
		que.pop();
		topsort.pb(ind);
		for(int i=0; i<adl[ind].size(); i++) que.push(adl[ind][i]);
	}
}

int main()
{
	int t;
	gi(t);

	for(int tt=1; tt<=t; tt++)
	{
		int n;
		gi(n);

		int a;
		for(int i=0; i<200100; i++) adl[i].clear();
		topsort.clear();

		for(int i=0; i<n; i++)
		{
			gi(a);
			adl[a].pb(i+1);
		}

		dobfs(1);
		reverse(All(topsort));

		for(int i=0; i<topsort.size(); i++) for(int j=1; j<30; j++)
		{
			int ind = topsort[i];
			dp[ind][j] = j;
			for(int k=0; k<adl[ind].size(); k++)
			{
				int mi = INF;
				for(int c = 1; c < 30; c++)
					if(j != c)
						mi = min(mi, dp[adl[ind][k]][c]);
				dp[ind][j] += mi;
			}
		}

		int ans = INF;

		for(int i=1; i<30; i++) ans = min(ans, dp[1][i]);
		printf("Case #%d: %d\n", tt, ans);

	}

    return 0;
}
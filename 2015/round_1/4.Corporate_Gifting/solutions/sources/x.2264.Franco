import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;

public class Corporate {

	static List<List<Integer>> child = new ArrayList<List<Integer>>();
	static int[] depth = new int[200001];
	static int[] cost = new int[200001];

	static int getCost(int node) {
		Set<Integer> childCosts = new HashSet<Integer>();
		for (int i = 0; i < child.get(node).size(); i++) {
			childCosts.add(cost[child.get(node).get(i)]);
		}
		for (int i = 1; i < 1000000; i++) {
			if (!childCosts.contains(i)) {
				cost[node] = i;
				return i;
			}
		}

		assert (false);
		return Integer.MIN_VALUE; // Frutillita.
	}

	public static void main(String[] args) throws Exception {
		for (int i = 0; i < 200001; i++) {
			child.add(new ArrayList<Integer>());
		}

		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

		int casos = Integer.parseInt(bufferedReader.readLine());
		for (int caso = 0; caso < casos; caso++) {
			int n = Integer.parseInt(bufferedReader.readLine());
			for (int i = 0; i < 200001; i++) {
				child.get(i).clear();
			}

			String[] splitted = bufferedReader.readLine().split(" ");
			for (int i = 0; i < splitted.length; i++) {
				String string = splitted[i];
				int father = Integer.parseInt(string);

				child.get(father).add(i + 1);
			}

			Queue<Integer> queue = new LinkedList<Integer>();
			depth[0] = -1; // O 0?
			queue.add(0);
			while (!queue.isEmpty()) {
				int top = queue.poll();

				for (Integer son : child.get(top)) {
					depth[son] = depth[top] + 1;
					queue.add(son);
				}
			}

			List<Integer> nodes = new ArrayList<Integer>();
			for (int i = 1; i <= n; i++) {
				nodes.add(i);
			}
			Collections.sort(nodes, new Comparator<Integer>() {

				@Override
				public int compare(Integer o1, Integer o2) {
					return depth[o2] - depth[o1];
				}
			});

			long totalCost = 0; // 99% seguro que ese long es una exageracion, pero bueh.
			for (Integer node : nodes) {
				totalCost += getCost(node);
			}

			System.out.printf("Case #%d: %d\n", caso + 1, totalCost);
		}
	}

}

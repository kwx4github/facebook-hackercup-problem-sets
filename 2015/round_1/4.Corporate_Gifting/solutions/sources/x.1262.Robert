
function children(parents)
    child_array = Array(Array{Int64}, length(parents))
    for i = 1:length(parents)
        child_array[i] =  Int64[]
    end
    for i = 1:length(parents)
        if parents[i] != 0
            push!(child_array[parents[i]], i)
        end
    end
    child_array
end


function layers(children)
    layer_map = Array(Array{Int64}, 0)
    generation = [1]
    while !isempty(generation)
        push!(layer_map, generation)
        generation = Int64[]
        for parent in layer_map[length(layer_map)]
            for child in children[parent]
                push!(generation, child)
            end
        end
    end
    layer_map
end


function bottom_greedy_cost(parent_map)
    child_map = children(parent_map)
    layers_map = layers(child_map)
    bottom_up = reverse(layers_map)
    price_map = Array(Int64, length(parent_map))
    fill!(price_map, 0)
    for layer in bottom_up
        for employee in layer
            child_prices = map(c -> price_map[c], child_map[employee])
            distinct = unique(child_prices)
            sort!(distinct)
            price  =  1
            while (price <= length(distinct) && distinct[price] == price)
                price += 1
            end
            price_map[employee] = price
        end
    end
    sum(price_map)
end


function main()
    T = int(readline())
    for i = 1:T
        readline()
        parents = map(int, split(readline()))
        cost = bottom_greedy_cost(parents)
        println("Case #", i, ": ", cost)
    end
end


main()


#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
typedef unsigned long long LL;
#define FOR(k,a,b) for(int k(a); k < (b); ++k)
#define FORD(k,a,b) for(int k(b-1); k >= (a); --k)
#define REP(k,a) for(int k=0; k < (a); ++k)
#define ABS(a) ((a)>0?(a):-(a))
#define SQR(a) ((a)*(a))
#define SQRT(a) (sqrt(double(a)))
const LL INF = 1e9;

int par[200007];
int dp[200007][10];

int main( int argc, char* argv[] ) 
{
#ifdef HOME
	freopen("in.txt","r",stdin);
	freopen("out.txt","wb",stdout);
	/*printf("2\n");
	REP(j,2)
	{
		printf("200000\n");
		REP(i,200000)
		{
			printf("%d ",i);
		}
	}
	return 0;*/
#endif
	int T,N,tmp;
	scanf("%d",&T);
	vector<vector<int> > w;
	vector<int> s;
	s.reserve(200007);
	FOR(tc,1,T+1)
	{
		scanf("%d",&N);
		w.clear();
		s.clear();
		w.resize(N);
		REP(i,N)
		{
			scanf("%d",&tmp);
			par[i]=tmp-1;
			if(tmp)
				w[tmp-1].push_back(i);
		}
		s.push_back(0);
		int idx=0;
		while(s.size()<N)
		{
			int act=s[idx];
			REP(j,w[act].size())
			{
				s.push_back(w[act][j]);
			}
			++idx;
		}
		reverse(s.begin(),s.end());
		REP(i,N)
		{
			FOR(j,1,10)
			{
				LL act=0;
				REP(k,w[s[i]].size())
				{
					LL aa=INF;
					FOR(t,1,10) if(t!=j)
					{
						aa=min<LL>(aa,dp[w[s[i]][k]][t]);
					}
					act+=aa;
				}
				dp[s[i]][j]=act+j;
			}
		}
		LL res=INF;
		FOR(i,1,10)
			res=min<LL>(res,dp[0][i]);
		printf("Case #%d: %lld\n",tc,res);
	}
	return 0;
}

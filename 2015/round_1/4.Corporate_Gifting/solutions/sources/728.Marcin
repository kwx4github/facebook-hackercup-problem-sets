#include <vector>
#include <iostream>
#include <sstream>
#include <math.h>
#include <sys/time.h>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cstring>
#include <fstream>
#include <set>

#define FOR(i,a,b)  for(__typeof(b) i=(a);i<(b);++i)
#define REP(i,a)    FOR(i,0,a)
#define FOREACH(x,c)   for(__typeof(c.begin()) x=c.begin();x != c.end(); x++)
#define ALL(c)      c.begin(),c.end()
#define CLEAR(c)    memset(c,0,sizeof(c))
#define SIZE(c) (int) ((c).size())

#define PB          push_back
#define MP          make_pair
#define X           first
#define Y           second

#define ULL         unsigned long long
#define LL          long long
#define LD          long double
#define II         pair<int, int>
#define DD         pair<double, double>

#define VC	    vector
#define VI          VC<int>
#define VVI         VC<VI>
#define VD          VC<double>
#define VS          VC<string>
#define VII         VC<II>
#define VDD         VC<DD>

#define DB(a)       cerr << #a << ": " << a << endl;

using namespace std;

template<class T> void print(VC < T > v) {cerr << "[";if (SIZE(v) != 0) cerr << v[0]; FOR(i, 1, SIZE(v)) cerr << "," << v[i]; cerr << "]\n";}
template<class T> string i2s(T &x) { ostringstream o; o << x; return o.str(); }
VS split(string &s, char c = ' ') {VS all; int p = 0, np; while (np = s.find(c, p), np >= 0) {if (np != p) all.PB(s.substr(p, np - p)); p = np + 1;} if (p < SIZE(s)) all.PB(s.substr(p)); return all;}

struct Node{
    VI next;
    int best = -1; // the minimum score for the subtree
    int which = -1; // which gift should be bought
    int loss = -1; // how much is the next best total larger
};

#define MAXRES 21

int solve(){
    int n;
    cin >> n;
    vector<Node> v(n);
    REP(i,n){
        int pi;
        cin >> pi;
        if (pi != 0)
            v[pi-1].next.PB(i);
    }

    VI stack;
    stack.PB(0);
    while(!stack.empty()){
        int id = stack.back();
        if (!v[id].next.empty() && v[v[id].next[0]].best == -1){
            for(auto x : v[id].next)
                stack.PB(x);
            continue;
        }
        stack.pop_back();
        // process node id
        VI loss(MAXRES+1,0);
        int res = 0;
        for(auto x : v[id].next){
            res += v[x].best;
            loss[v[x].which] += v[x].loss;
        }
        VII order;
        FOR(i,1,MAXRES+1)
            order.PB(MP(loss[i]+i,i));
        sort(ALL(order));
        v[id].best = res+order[0].X;
        //fprintf(stderr,"%d %d\n",id,v[id].best);
        v[id].which = order[0].Y;
        v[id].loss = order[1].X-order[0].X;
    }
    return v[0].best;
}

int main(int argc, char *argv[]){
    int T;
    cin >> T;
    REP(t,T)
        cout << "Case #" << t+1 << ": " << solve() << endl;
    return 0;
}

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#include <cassert>
#include <stack>
#include <complex>
#include <utility>
#include <cstdio>

#define NODES 200002
#define LOG_NODE 30

using namespace std;

vector <int> graph[NODES];
int labels[NODES],visited[NODES];
bool rule_out[NODES][LOG_NODE];

int min(int a,int b) {
    return (a>b) ? b:a;
}

int DFS(int v)
{
    visited[v]=1;
    
    if(graph[v].size() == 0)
    {
        labels[v] = 1;
        return 1;
    }
    
    for(int i=0; i<graph[v].size(); i++)
    {
        rule_out[v][DFS(graph[v][i])] = true;
    }

    
    for(int i=1; i<LOG_NODE; i++) {
        if(rule_out[v][i] == false) {
            labels[v] = i;
            return i;
        }
    }
    
    return -1;
}



int main() {
    
    int cases,n,zero,v; ; scanf("%d",&cases);
    long long answer;
    
    for(int case_no=1; case_no<=cases; case_no++) {
        
        for(int i=0; i<NODES; i++)
        {
            while (!graph[i].empty())
            {
                graph[i].pop_back();
            }
        }
        
        answer = 0;
        memset(labels,0,sizeof(labels));
        memset(visited, 0, sizeof(visited));
        memset(rule_out, 0, sizeof(rule_out));
        
        scanf("%d",&n); scanf("%d",&zero);
    
        for(int i=2; i<=n; i++) {
            scanf("%d",&v);
            graph[v].push_back(i);
        }
        

        for(int i=1; i<=n; i++) {
            if(visited[i] == 0) {
                DFS(i);
            }
        }
      
        for(int i=1; i<=n; i++)
            answer += labels[i];
        
        printf("Case #%d: %lld\n",case_no,answer);
    }
    
    return 0;
}





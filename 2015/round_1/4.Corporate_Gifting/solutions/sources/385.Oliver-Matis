#include<iostream>
#include<algorithm>
#include<vector>
#define f first
#define s second
#define mp make_pair
#define INF 1000000000
using namespace std;


vector<int> conn[200000];



//format (optimal choice, (optimal cost, second optimal cost) )
pair<int, pair<int, int> > dfs(int pos) {
	vector<pair<int, pair<int, int> > > childcost;
	
	//format: (cost, choice)
	pair<int, int> choice[3];
	fill(choice, choice + 3, mp(INF, -1) );
	
	int curcost  = 0, curind = 0;
	
	for(int i=0;i<conn[pos].size();i++)
		childcost.push_back(dfs(conn[pos][i]) ), curcost += childcost.back().s.f;
	
	sort(childcost.begin(), childcost.end() );
	
	
	//Here we try out the appropriate gifts
	for(int i=1; i<=max((int)childcost.size() + 1, 2); i++) {
	
		while(curind < childcost.size() && childcost[curind].f == i) {
			curcost -= childcost[curind].s.f;
			curcost += childcost[curind].s.s;
			
			curind++;
		}
		
		
		choice[2] = mp(curcost + i, i);
		
		
		for(int j=curind - 1; j >= 0 && childcost[j].f == i; j--) {
			curcost -= childcost[j].s.s;
			curcost += childcost[j].s.f;
		}
		
		sort(choice, choice + 3);
	}
	
	
	//Finally output the result
	
	return mp(choice[0].s, mp(choice[0].f, choice[1].f) );
}





//----------------------------------------------------------------------------------
//Main function


int main() {
	int t, n, p;
	
	cin.sync_with_stdio(false);
	cin >> t;
	
	
	for(int TCASE = 1; TCASE <= t; TCASE++) {
		cout << "Case #" << TCASE << ": ";
		
		cin >> n >> p;
		
		for(int i=1;i<n;i++) {
			cin >> p;
			
			conn[p-1].push_back(i);
		}
		
		cout << dfs(0).s.f << '\n';
		
		for(int i=0;i<n;i++)
			conn[i].clear();
	}
	
	return 0;
}




































#include <stdio.h>
#include <vector>
using namespace std;
typedef long long ll;

const int MAXN = 200000 + 1;

int manager[MAXN];
int best1[MAXN];
int best2[MAXN];
int tot1[MAXN];
int tot2[MAXN];
vector<int> dep[MAXN];
vector<int> order;

void clear(int N) {
	for (int i = 1 ; i <= N ; i++) {
		manager[i] = 0;
		best1[i] = 0;
		best2[i] = 0;
		tot1[i] = 0;
		tot2[i] = 0;
		dep[i].clear();
	}
	order.clear();
}
const int K = 50;
void compute(int p) {
	if (dep[p].size() == 0) {
		best1[p] = 1;
		best2[p] = 2;
		tot1[p] = 1;
		tot2[p] = 2;
	} else {
		int sum = 0;
		vector<int> extra(K, 0);
		for (int i = 0 ; i < dep[p].size() ; i++) {
			extra[best1[dep[p][i]]] += tot2[dep[p][i]] - tot1[dep[p][i]];
			sum += tot1[dep[p][i]];
		}
		best1[p] = 2;
		best2[p] = 1;
		tot1[p] = 2 + extra[2] + sum;
		tot2[p] = 1 + extra[1] + sum;
		for (int k = 1 ; k < K ; k++) {
			int t = sum + extra[k] + k;
			if (t < tot1[p]) {
				tot2[p] = tot1[p];
				best2[p] = best1[p];
				tot1[p] = t;
				best1[p] = k;
			} else if (t < tot1[p]) {
				tot2[p] = t;
				best2[p] = k;
			}
			if (extra[k] == 0) break;
		}
	}
//	printf("%d -> %d %d (%d %d)\n", p, best1[p], best2[p], tot1[p], tot2[p]);
}

int main() {
	freopen("inn.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int T;
	scanf("%d", &T);
	for (int t = 1 ; t <= T ; t++) {
		int N;
		scanf("%d", &N);
		clear(N);
		for (int i = 1 ; i <= N ; i++) {
			scanf("%d", &manager[i]);
			dep[manager[i]].push_back(i);
		}
		order.push_back(1);
		for (int i = 0 ; i < order.size() ; i++) {
			int pp = order[i];
			for (int j = 0 ; j < dep[pp].size() ; j++)
				order.push_back(dep[pp][j]);
		}
		
		for (int i = N-1 ; i >= 0 ; i--) {
			compute(order[i]);
		}
		
		printf("Case #%d: %d\n", t, tot1[1]);
	}
	return 0;
}

#include <set>
#include <map>
#include <queue>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <cctype>
#include <algorithm>

#define eps 1e-10
#define pi acos(-1.0)
#define inf 107374182
#define inf64 1152921504606846976
#define lc l,m,tr<<1
#define rc m + 1,r,tr<<1|1
#define zero(a) fabs(a)<eps
#define iabs(x)  ((x) > 0 ? (x) : -(x))
#define clear1(A, X, SIZE) memset(A, X, sizeof(A[0]) * (min(SIZE,sizeof(A))))
#define clearall(A, X) memset(A, X, sizeof(A))
#define memcopy1(A , X, SIZE) memcpy(A , X ,sizeof(X[0])*(SIZE))
#define memcopyall(A, X) memcpy(A , X ,sizeof(X))
#define max( x, y )  ( ((x) > (y)) ? (x) : (y) )
#define min( x, y )  ( ((x) < (y)) ? (x) : (y) )
using namespace std;

struct node
{
    int to,next;
} edge[400005];

int head[200005],cnt=0;

struct node1
{
    int u, lev;
} temp,xtemp;

int main()
{
    //freopen("data.in","r",stdin);
    //freopen("data.txt","w",stdout);
    int t,case1=1;
    while(scanf("%d",&t)!=EOF)
    {
        while(t--)
        {
            int n,tem;
            clearall(head,-1);
            cnt=0;
            scanf("%d",&n);
            for(int i=1; i<=n; i++)
            {
                scanf("%d",&tem);
                edge[cnt].to=i;
                edge[cnt].next=head[tem];
                head[tem]=cnt++;
            }

            vector <int> num;
            queue <node1> q;
            int maxlev=0;
            temp.u=1;
            temp.lev=0;
            num.push_back(1);
            q.push(temp);
            while(!q.empty())
            {
                temp=q.front();
                q.pop();
                if(temp.lev==maxlev)
                {
                    num.push_back(0);
                    maxlev++;
                }
                xtemp.lev=temp.lev+1;
                for(int i=head[temp.u]; i!=-1; i=edge[i].next)
                {
                    xtemp.u=edge[i].to;
                    q.push(xtemp);
                    num[xtemp.lev]++;
                }
            }
            sort(num.begin(),num.end());
            int price=0,ans=0;
            for(int i=num.size()-1;i>=0; i--)
            {
                ans+=num[i]*(price+1);
                //printf("# %d %d %d\n",num[i],price,ans);
                price++;
                price%=2;
            }
            printf("Case #%d: %d\n",case1++,ans);
        }
    }
    return 0;
}

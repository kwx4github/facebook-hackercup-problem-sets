#include<cstdio>
#include<iostream>
#include<queue>
#include<stack>
#include<vector>
#include<string>
#include<algorithm>
#include<map>
#include<sstream>
#include<cmath>
#include<cctype>
#include<cassert>
#include<cstring>
#include<cstdlib>

using namespace std;

#define MAX 200100
#define UPPER 35
int n;
int par[MAX];
vector<int> v[MAX];
int deg[MAX];

int dp[MAX][UPPER];

int bfs() {
	queue<int> q;
	for (int i = 1; i <= n; i++) {
		if (deg[i] == 0) q.push(i);
	}

	while (!q.empty()) {
		int node = q.front();
		q.pop();

		for (int i = 1; i < UPPER; i++) {
			int minSum = 0;
			for (int j = 0; j < v[node].size(); j++) {
				int minv = -1;
				for (int k = 1; k < UPPER; k++) {
					if (k == i) continue;
					if (minv == -1) minv = dp[ v[node][j] ][k];
					else {
						if (dp[ v[node][j] ][k] < minv) minv = dp[ v[node][j] ][k];
					}
				}
				minSum += minv;
			}
			dp[node][i] = i + minSum;
		}
		deg[ par[node] ]--;
		if (deg [par[node] ] == 0) {
			q.push(par[node]);
		}
	}
	int res = -1;
	for (int i = 1; i < UPPER; i++) {
		if (res == -1) res = dp[1][i];
		else {
			if (res > dp[1][i]) res = dp[1][i];
		}
	}
	return res;
}

int main() {
	int test, cases = 1;
	cin >> test;
	for (cases = 1; cases <= test; cases++) {
		cin >> n;
		for (int i = 1; i <= n; i++) {
			v[i].clear();
			deg[i] = 0;
		}
		for (int i = 1; i <= n; i++) {
			cin >> par[i];
			v[ par[i] ].push_back(i);
			deg[ par[i] ]++;
		}

		for (int i = 1; i <= n; i++)
			for (int j = 0; j < UPPER; j++)
				dp[i][j] = -1;

		int res = bfs();

		cout << "Case #" << cases << ": " << res << endl;

	}
	return 0;
}

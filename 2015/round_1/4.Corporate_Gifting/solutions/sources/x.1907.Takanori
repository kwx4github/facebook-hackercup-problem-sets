#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <memory>
#include <cstring>
#include <cassert>
#include <numeric>
#include <sstream>
#include <complex>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cctype>
#include <unordered_map>
#include <unordered_set>
using namespace std;

#define REP2(i, m, n) for (int i = (int)(m); i < (int)(n); i++)
#define REP(i, n) REP2(i, 0, n)
#define ALL(S) (S).begin(), (S).end()

template <typename T, typename E>
ostream &operator<<(std::ostream &os, const std::pair<T, E> &p){
  return os << "(" << p.first << ", " << p.second << ")";
}

typedef long long ll;

const int max_n = 200010;
const int max_v = 5;
int memo[max_n][max_v];
vector<int> G[max_n];

int rec(int pos, int last){
  if (memo[pos][last] != -1) return memo[pos][last];

  int &res = memo[pos][last] = max_n * 10;
  
  for (int v = 1; v < max_v; v++){
    if (v == last) continue;

    int sum = v;
    REP(i, G[pos].size()){
      int next = G[pos][i];
      sum += rec(next, v);
    }
    res = min(res, sum);
  }
  return res;
}

void solve(){
  REP(i, max_n) {
    G[i].clear();
  }
  memset(memo, -1, sizeof(memo));
  
  int N, P;
  cin >> N;
  REP(i, N){
    cin >> P;
    G[P].push_back(i + 1);
  }

  cout << rec(1, 0) << endl;
}

int main(){
  ios::sync_with_stdio(false);
  int T;
  cin >> T;
  REP(t, T){
    cout << "Case #" << t + 1 << ": "; solve();
  }
  return 0;
}

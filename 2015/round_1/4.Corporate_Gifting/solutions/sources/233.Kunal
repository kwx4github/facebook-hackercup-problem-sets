#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include<iomanip>
using namespace std;

typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
#define pb push_back
#define sz size()
#define ln length()
#define fore(i,a,b) for(int i=a;i<b;i++)
#define fores(i,a,b) for(int i=a;i<=b;i++)
#define ford(i,a,b) for(int i=a;i>=b;i--)
#define all(a) a.begin(),a.end()
#define mp make_pair
#define ff first
#define ss second
#define sc(a) scanf("%d",&a)
#define md 1000000007
#define test 21
vector<vi> adj;
vector<vi> nums,notnums; // 1-based
int main() {
	freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
	int t;
	cin>>t;
	fore(z,0,t)
	{
	    adj.clear();
	    nums.clear();
	    notnums.clear();
		printf("Case #%d: ",z+1);
		int n;
		sc(n);
		adj.resize(n); // only parent to child is present
		nums.resize(n);
		notnums.resize(n);
		fore(i,0,n)
		{
		    nums[i].resize(test);
		    notnums[i].resize(test);
		}
		fore(i,0,n)
		{
		    int tt;
		    sc(tt);
		    if(i==0)
                continue;
            adj[tt-1].pb(i); // 0 based
		}
		vi vis(n,0);
		stack<int> q;
		q.push(0);
		while(!q.empty())
        {
            int i = q.top();
            if(vis[i]==0)
            {
                vis[i] = 1;
                fore(k,0,adj[i].sz)
                    q.push(adj[i][k]);
            }
            else
            {
                int first = 1000000000 , second = 1000000000;
                int ind = -1;
                fore(j,1,test)
                {
                    nums[i][j] = j;
                    fore(k,0,adj[i].sz)
                        nums[i][j] += notnums[adj[i][k]][j];
                    if(nums[i][j]<=first)
                    {
                        second = first;
                        first = nums[i][j];
                        ind = j;
                    }
                    else if(nums[i][j]<second)
                        second = nums[i][j];
                }
                fore(j,1,test)
                {
                    if(j!=ind)
                        notnums[i][j] = first;
                    else
                        notnums[i][j] = second;
                }
                q.pop();
            }
        }
		nums[0][0] = 1000000000;
		int fa = *(min_element(all(nums[0])));
		printf("%d\n",fa);
	}
	return 0;
}

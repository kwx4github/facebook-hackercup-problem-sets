/* base IO */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <fstream>
#include <sstream>

/* data structure */
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <bitset>

/* alrotihm and math */
#include <algorithm>
#include <random>
#include <cmath>

/* run-time */
#include <cstdlib>
#include <ctime>
#include <climits>

/* system dependent */
#include <sys/time.h>
#include <sys/resource.h>

using namespace std;

#define VI vector<int>
#define VD vector<double>
#define PII pair<int, int>
#define PDD pair<double, double>
#define PB push_back
#define MP make_pair
#define len(x) ((x).size())

const int inf = INT_MAX;
const long long inf_ll = 0x7f7f7f7f;
const double eps = 1e-8;

/*
 * 0 1 2
 * 3   4
 * 5 6 7
 */
const int bfs_dy[] = {-1, -1, -1, 0, 0, 1, 1, 1};
const int bfs_dx[] = {-1, 0, 1, -1, 1, -1, 0, 1};

/*
 *   3  
 * 2   0
 *   1  
 */
const int dfs_dy[] = {0, 1, 0, -1};
const int dfs_dx[] = {1, 0, -1, 0};

PII dir[] = {make_pair(0,1),make_pair(1,0),make_pair(0,-1),make_pair(-1,0)};
/* TC HEADER END */

int ans;
vector < vector <int> > G;
int n;

int dfs(int id) {
    set <int> cur;
    cur.clear();
    for(auto child: G[id]) {
        cur.insert(dfs(child));
    }
    int temp = 0;
    for(int i = 1; i <= n; i++) {
        if(cur.find(i) == cur.end()) {
            // cout << "xxx: " << ans << endl;
            temp = i;
            ans += temp;
            break;
        }
    }
    /*cout << id << ": ";
      for(auto x : cur) {
      cout << x << ' ';
      }
      cout << endl;*/
    return temp;
}

int main() {
    const rlim_t kStackSize = 1024 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {// 
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
    int t;
    cin >> t;
    for(int c = 1; c <= t; c++) {
        cin >> n;
        G.clear();
        G.resize(n+1);
        for(auto node : G) {
            node.clear();
        }
        ans = 0;
        for(int i = 1; i <= n; i++) {
            int opt;
            cin >> opt;
            if(opt != 0) {
                G[opt].PB(i);
            }
        }
        dfs(1);
        cout << "Case #" << c << ": " << ans << endl;
    }
}

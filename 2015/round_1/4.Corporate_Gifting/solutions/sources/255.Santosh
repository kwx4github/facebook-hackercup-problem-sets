// codersan
#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define init(a,b) memset(a,b,sizeof(a));
#define si(n) scanf("%d",&n);
#define sld(n) scanf("%lld",&n);
#define pi(n) printf("%d\n",n);
#define pld(n) printf("%lld\n",n);
#define pnl() printf("\n");
#define tr(container,it) for(typeof(container.begin()) it=container.begin() ; it!=container.end() ; it++)
#define sortv(a) sort(a.begin(),a.end());
#define go()  int t; cin>>t; while(t--)
#define forl(i,a,b) for(int i=a;i<b;i++)
#define rofl(i,a,b) for(int i=a;i>b;i--)
#define LL long long int
#define mod 1000000007
using namespace std;
typedef vector<int> vi;
typedef pair<int , int> pii;
typedef vector<pii> vpii;
inline LL gcd(LL a, LL b){ LL temp; while(b>0)	{ temp= b; b=a%b; a=temp;}	return a;}
inline LL fast(LL a, LL b)
{
    LL prod=1;
    while(b)
    {
        if(b&1)prod=(prod*a);
        a=(a*a),b/=2;
    }
    return prod;
}
int num = 105;
int n;
vector<vector<int> > g;
int dp[200005][105 + 5];
int ans;
vector<int> bleft, bright;
stack<int> st;
map<int,int> vis;

void dfs(int W)
{

}

int main()
{
    #ifndef ONLINE_JUDGE
       freopen("C:\\Users\\codersan\\Desktop\\CC\\input.txt", "r", stdin);
       freopen("C:\\Users\\codersan\\Desktop\\CC\\out.txt", "w", stdout);
    #endif
    int t;
    scanf("%d", &t);
    for (int i=1;i<=t;i++)
    {
        ans = mod;
        scanf("%d", &n);
        g.clear();
        g.resize(n + 5);
        vis.clear();
        for (int i=1;i<=n;i++)
        {
            int x; scanf("%d", &x);
            g[x].push_back(i);
        }
    st.push(1);
    while(!st.empty())
    {
        int v=st.top();
        if (vis[v])
        {
            for (int i = 0; i < g[v].size(); ++i)
            {
                int to = g[v][i];
                bleft.assign(num + 5, mod),bright.assign(num + 5, mod);
                for (int j=1;j<num;j++)
                    bleft[j] = min(bleft[j - 1], dp[to][j]);
                for (int j=num-1;j>=1;j--)
                    bright[j]=min(bright[j + 1],dp[to][j]);
                for (int j=1;j<num;j++)
                {
                    int mn=min(bleft[j-1],bright[j+1]);
                    dp[v][j] += mn;
                }
            }
            st.pop();continue;
        }
        for (int i=1;i<num;i++)
            dp[v][i] = i;
        stack<int> temp;
        for (int i=0;i<g[v].size();i++)
        {
            int to = g[v][i];
            temp.push(to);
        }
        while(!temp.empty()) st.push(temp.top()),temp.pop();
        vis[v]=1;
    }
        for (int i=1;i<num;i++)
        {
            ans = min(ans, dp[1][i]);
        }
        printf("Case #%d: %d\n", i, ans);
    }
    return 0;
}

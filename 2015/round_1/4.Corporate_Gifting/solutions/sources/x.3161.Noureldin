#include <bits/stdc++.h>
using namespace std;

struct cmp{
public:
	bool operator () (const pair<int,int> & p1,const pair<int,int> & p2){
		if(p1.first == p2.first)
			return p1.second < p2.second;
		return p1.first > p2.first;
	}
};

vector<int> Prizes[200010];
int Parent[200010],OUT[200010],Q[200010],N;

void solve(){
	priority_queue<pair<int,int> ,vector<pair<int,int> > , cmp > pq;
	for(int i = 1;i <= N;i++)
		pq.push(make_pair(OUT[i],i));
	pair<int,int> u;
	int v;
	while(!pq.empty()){
		u = pq.top(); pq.pop();
		v = u.second; 
		//cout << u.second << " " << u.first << "\n";
		vector<int> & Z = Prizes[v];
		vector<int> & PZ = Prizes[Parent[v]];
		int i,N = Z.size();
		for(i = 0;i < N;i++)
			if(Z[i] != i)
				break;
		Q[v] = i + 1;
		if(!binary_search(PZ.begin(),PZ.end(),i)){
			PZ.push_back(i);
			sort(PZ.begin(),PZ.end());
		}
	}	
}

int main(){
	int T;
	scanf("%d",&T);
	for(int t = 1;t <= T;t++){
		scanf("%d",&N);
		fill(OUT,OUT + N + 1,0);
		Prizes[0].clear();
		for(int i = 1;i <= N;i++){
			scanf("%d",&Parent[i]);
			OUT[Parent[i]]++;
			Prizes[i].clear();
		}
		solve();
		int ans = 0;
		for(int i = 1;i <= N;i++){
			//cout << i << " " << Q[i] << "\n";
			ans += Q[i];
		}
		printf("Case #%d: %d\n",t,ans);
	}
	return 0;
}
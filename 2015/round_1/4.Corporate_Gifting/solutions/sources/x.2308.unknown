#include <iostream>
#include <vector>
using namespace std;

const int INF=100000000;
int T, N;

int main() {
  cin >> T;
  for (int t=1; t<=T; t++) {
    cin >> N;
    vector <int> p(N+1, 0), K1(N+1, 1), K2(N+1, 2), C(N+1, 1), Ksum(N+1, 0);
    vector <vector <int> > children(N+1);
    for (int i=1; i<=N; i++) {
      cin >> p[i];  
      children[p[i]].push_back(i);
    }
    for (int i=N; i>0; i--) {
      int d = children[i].size();
      if (d > 0) {
        vector <int> delta(d+2, Ksum[i]), Kvc(d+2, 0);
        for (auto ch: children[i])
          if (C[ch] <= d+1) 
            delta[C[ch]] += K2[ch] - K1[ch];
        K1[i] = INF;
        for (int c=1; c<=d+1; c++) {
          Kvc[c] = c + delta[c];
          if (Kvc[c] < K1[i]) {
            K1[i] = Kvc[c];
            C[i] = c;
          }
        }
        K2[i] = INF;
        for (int c=1; c<=d+1; c++) 
          if (c != C[i] && Kvc[c] < K2[i])
            K2[i] = Kvc[c];
      }
      Ksum[p[i]] += K1[i];
    }
    cout << "Case #" << t << ": " << K1[1] << endl;
 }
}

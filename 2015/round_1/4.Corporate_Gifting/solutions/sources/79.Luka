#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>

#define MAX 200000
#define MAX_NUM 100

using namespace std;

int const oo = 1000000000;

struct Candidate {
  int gift;
  int sol;
};

Candidate cand[MAX][2];

void InsertCandidate(int i, int gift, int sol) {
  if (sol < cand[i][0].sol) {
    cand[i][1].gift = cand[i][0].gift;
    cand[i][1].sol = cand[i][0].sol;
    cand[i][0].gift = gift;
    cand[i][0].sol = sol;
  } else if (sol < cand[i][1].sol) {
    cand[i][1].gift = gift;
    cand[i][1].sol = sol;
  }
}

int main() {
  int T;
  scanf("%d", &T);
  for (int tt = 1; tt <= T; ++tt) {
    int N;
    scanf("%d", &N);
    vector<vector<int>> children(N);
    vector<int> parent(N, -1);
    vector<int> depend(N, 0);
    queue<int> Q;
    for (int i = 0; i < N; ++i) {
      scanf("%d", &parent[i]); --parent[i];
      if (parent[i] >= 0) {
        children[parent[i]].push_back(i);
        depend[parent[i]] += 1;
      }
    }
    for (int i = 0; i < N; ++i) {
      cand[i][0].gift = 0;
      cand[i][0].sol = oo;
      cand[i][1].gift = 0;
      cand[i][1].sol = oo;
      if (depend[i] == 0) Q.push(i);
    }

    int ret = 0;
    while (!Q.empty()) {
      int u = Q.front(); Q.pop();
      if (parent[u] != -1) {
        if (--depend[parent[u]] == 0) {
          Q.push(parent[u]);
        }
      }

      int top = min(min(N, MAX_NUM), 
                    static_cast<int>(children[u].size()) + 2);
      for (int gift = 1; gift <= top; ++gift) {
        int best = gift;
        for (int i = 0; i < children[u].size(); ++i) {
          int v = children[u][i];
          int j = cand[v][0].gift == gift ? 1 : 0;
          best += cand[v][j].sol;
        }
        InsertCandidate(u, gift, best);
      }

      if (parent[u] == -1) {
        ret += cand[u][0].sol;
      }
    }
    printf("Case #%d: %d\n", tt, ret);
  }
  return 0;
}

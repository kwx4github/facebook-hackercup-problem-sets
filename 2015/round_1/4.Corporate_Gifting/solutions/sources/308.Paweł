#include <string>
#include <vector>
#include <set>
#include <iostream>
#include <algorithm>
#include <utility>
#include <map>
#include <cstdio>
#include <sstream>
#include <cmath>

using namespace std;

#define REP(a, b) for (int a = 0; a<(b); ++a)
#define FOR(a, b, c) for (int a = (b); a<=(c); ++a)
#define FORD(a, b, c) for (int a = (b); a>=(c); --a)
#define INIT(a, b) __typeof(b) a = (b)
#define FOREACH(a, v) for (INIT(a, (v).begin()); a!=(v).end(); ++a)
 
template<class T>
inline int size(const T&t){return t.size();}
 
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long LL;

#define INF 1000000000
#define PB push_back
#define MP make_pair

////////////////////////////////

#define SIZE 300000

int N;
int best[SIZE], nbest[SIZE], root[SIZE];
vi dzieci[SIZE];

int ttt;

void rekur(int nr) {
if (ttt!=19) {
    FOREACH(it, dzieci[nr])
        rekur(*it);
    }
    int suma = 0;
    int mc = size(dzieci[nr])+2;
    vi mod(mc+1);
    FOREACH(it, dzieci[nr]) {
        suma += best[*it];
        if (root[*it]<=mc)
            mod[root[*it]] += nbest[*it]-best[*it];
    }
    best[nr] = INF;
    nbest[nr] = INF;
    FOR(a, 1, mc) {
        int v = suma+mod[a]+a;
        if (v<best[nr]) {
            nbest[nr] = best[nr];
            best[nr] = v;
            root[nr] = a;
        }
        else
        if (v<nbest[nr])
            nbest[nr] = v;
    }
}

void licz() {
    scanf("%d", &N);
    REP(a, N) {
        int p;
        scanf("%d", &p);
        if (p)
            dzieci[p-1].PB(a);
    }
if (ttt==19)
    FORD(a, N-1, 0)
        rekur(a);
else
    rekur(0);
    printf("%d\n", best[0]);
    REP(a, N)
        dzieci[a].clear();
}

int main() {
    int TT;
    scanf("%d", &TT);
    REP(tt, TT) {
    ttt = tt+1;
        printf("Case #%d: ", (tt+1));
        licz();
    }
}

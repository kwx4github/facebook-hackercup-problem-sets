#include <iostream>
#include <vector>

using namespace std;

const int INF = 2000000;

typedef struct node {
  int minsum;
  int rcolor;
  int delta;
  int ncolor;
  vector<int> childs;
} node;

int solve(vector<int> &e) {
  vector<node> nodes(e.size());
  for (int i = 1; i < e.size(); ++i) {
    nodes[e[i]-1].childs.push_back(i);
  }

  for (int i = nodes.size()-1; i >= 0; --i) {
    if (nodes[i].childs.size() == 0) {
      nodes[i].minsum = 1;
      nodes[i].rcolor = 1;
      nodes[i].delta = 1;
      nodes[i].ncolor = 2;
    } else {
      vector<int> coloradd(nodes[i].childs.size()+3);	
      int mintotal = 0;

      for (int k = 1; k < coloradd.size(); ++k) {
	coloradd[k] = k;
      }
      for (int k = 0; k < nodes[i].childs.size(); ++k) {
	mintotal += nodes[nodes[i].childs[k]].minsum;
	coloradd[nodes[nodes[i].childs[k]].rcolor] += nodes[nodes[i].childs[k]].delta;
      }

      int sum1 = INF;
      int sum2 = INF;
      int color1 = 0;
      int color2 = 0;
      for (int k = 1; k < coloradd.size(); ++k) {
	int value = coloradd[k];
	if (value < sum1) {
	  color2 = color1;
	  sum2 = sum1;
	  color1 = k;
	  sum1 = value;
	} else if (value < sum2) {
	  color2 = k;
	  sum2 = value;
	}
      }
      nodes[i].minsum = sum1 + mintotal;
      nodes[i].rcolor = color1;
      nodes[i].delta = sum2 - sum1;
      nodes[i].ncolor = color2;
    }
  }
  return nodes[0].minsum;
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int N;
    cin >> N;
    vector<int> e(N, 0);
    for (int i = 0; i < N; ++i) {
      cin >> e[i];
    }
    int r = solve(e);
    cout << "Case #" << t << ": " << r << endl;
  }
  return 0;
}

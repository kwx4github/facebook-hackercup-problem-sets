const int MEMS = 1<<24;
long data[MEMS],* mysp = data+MEMS-1,* bksp;
register long* sp asm("esp"); // 16位环境下是sp，32位是esp，64位是rsp
#define exSP() do bksp=sp,sp=mysp,mysp=bksp; while(0)

#include <cstdio>
#include <vector>
#include <cstring>
#include <cassert>
#include <algorithm>
using namespace std;



vector<int> e[200005];
vector<pair<long long,int>> f[200005];

void gao(int x){
    int top=2;
    for(int y:e[x]){
        gao(y);
        for(auto& c:f[y]) top=max(top,c.second+1);
    }
    for(int p=1;p<=top;p++){
        long long use=0;
        for(int y:e[x]){
            for(auto& c:f[y]) if(c.second!=p){
                use+=c.first;
                break;
            }
        }
        use+=p;
        f[x].push_back(make_pair(use,p));
    }
    sort(f[x].begin(),f[x].end());
    if(f[x].size()>9) f[x].resize(9);
}

int main(){
    int cs,n;
    scanf("%d",&cs);
    for(int no=1;no<=cs;no++){
        scanf("%d",&n);
        for(int i=1;i<=n;i++){
            int x;
            scanf("%d",&x);
            e[x].push_back(i);
        }
        exSP();
        gao(1);
        exSP();
        printf("Case #%d: %I64d\n",no,f[1][0].first);
        for(int i=0;i<=n;i++){
            e[i].clear();
            f[i].clear();
        }
    }
}

import java.io.FileInputStream;
import java.util.TreeSet;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.Set;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Jaydeep Maddipati
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "corporate.*gifting.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("corporategifting.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		solver.solve(1, in, out);
		out.close();
	}
}

class CorporateGifting {
    ArrayList<Integer> al[];long ans;
    int dfs(int x){
        int len=al[x].size(),ind=1;
        if(len==0)return 1;
        Set<Integer> st=new TreeSet<Integer>();
        for(int i=0;i<len;i++){
            int res=dfs(al[x].get(i));
            st.add(res);ans+=res;
        }
        for(int zz:st){
            if(zz!=ind)return ind;
            ind++;
        }
        return ind;
    }
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int t=in.nextInt();
        for(int tt=1;tt<=t;tt++){
            int n=in.nextInt();ans=0;
            int par=in.nextInt();
            al=new ArrayList[n+1];
            for(int i=0;i<=n;i++){
                al[i]=new ArrayList<Integer>();
            }
            for(int i=2;i<=n;i++){
                par=in.nextInt();
                al[par].add(i);
            }
            int zz=dfs(1);
            ans+=zz;
            out.printf("Case #%d: ", tt);
            out.println(ans);
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


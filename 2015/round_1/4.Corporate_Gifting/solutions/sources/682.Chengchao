#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
#define N 200011
#define M 100

vector<int> sons[N + 1];

int f[N + 1][M + 1];
int up[M + 1];
int dow[M + 1];

void dfs(int v) {
  for (auto u : sons[v])
    dfs(u);
  for (int i = 1; i <= M; ++i)
    f[v][i] = i;
  for (auto u : sons[v]) {
    dow[1] = f[u][1];
    for (int i = 2; i <= M; ++i)
      dow[i] = min(dow[i - 1], f[u][i]);
    up[M] = f[u][M];
    for (int i = M - 1; i >= 1; --i)
      up[i] = min(up[i + 1], f[u][i]);
    f[v][1] += up[2];
    f[v][M] += dow[M - 1];
    for (int i = 2; i <= M - 1; ++i)
      f[v][i] += min(up[i + 1], dow[i - 1]);
  }
}

int main() {
  int test; scanf("%d", &test);
  for (int cas = 1; cas <= test; ++cas) {
    int n; scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
      int fa; scanf("%d", &fa);
      sons[fa].push_back(i);
    }
    dfs(1);
    int mi = f[1][1];
    for (int i = 2; i <= M; ++i)
      if (mi > f[1][i])
        mi = f[1][i];
    printf("Case #%d: %d\n", cas, mi);
    for (int i = 0; i <= n; ++i) {
      sons[i].clear();
    }
  }
  return 0;
}

from multiprocessing import Process, Array
import operator
import time

class Problem(object):
	# Four color theorem, I'll paint the vertices in 4 colours, whre each
	# color ir a gift from $1 to $4
	def solve(self, p, info, sols):
		tree = []
		for manager in info:
			tree.append([manager-1, 0, 0])
			tree[manager-1][1] += 1

		for i in xrange(len(tree)-1, 0, -1):
			employee = tree[i]
			manager = tree[employee[0]]
			if manager[2] == employee[2]:
				solved = False
				if manager[1] > 1 or employee[1] > 0:
					manager[2] += 1
				else:
					employee[2] += 1

		reMap = {}
		for node in tree:
			if node[2] in reMap:
				reMap[node[2]] += 1
			else:
				reMap[node[2]] = 1

		mappingOrder = [i[0] for i in sorted(reMap.items(), key=operator.itemgetter(1), reverse=True)]
		mapping = {}
		for i in xrange(len(mappingOrder)):
			mapping[i] = mappingOrder[i]
		
		solution = sum([mapping[i[2]]+1 for i in tree])

		sols[p] = solution
		with open('/tmp/prob_sol', 'a') as f:
			f.write("sol (%d): %s\n" % (p, sols[p]))

probs = int(raw_input())
sols = Array('i', probs)

workers = []
for i in xrange(probs):
	raw_input()

	p = Problem()
	pr = Process(target=p.solve, args=(i, map(int, raw_input().split()), sols))
	pr.start()
	workers.append(pr)

for w in workers:
	w.join()

count = 1
for s in sols:
	print "Case #%d: %s" % (count, s)
	count += 1

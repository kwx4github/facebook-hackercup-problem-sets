using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

class Program
{
    class Node
    {
        public LinkedList<Node> children = new LinkedList<Node>();
        public Tuple<int, int> sumColor()
        {
            if (children.Count == 0) return Tuple.Create<int, int>(1, 1);

            var sum = 0;
            var colors = new int[5];
            foreach (var subSumColor in children.Select(c => c.sumColor()))
            {
                sum += subSumColor.Item1;
                colors[subSumColor.Item2] = 1;
            }
            var color = 0;
            for (var i = 1; i < 5; i++)
            {
                if (colors[i] == 0)
                {
                    color = i;
                    break;
                }
            }
            return Tuple.Create<int, int>(sum + color, color);
        }
    }

    static void Main(string[] args)
    {
        var stackSize = 1000000000;
        Thread thread = new Thread(new ThreadStart(BigRecursion), stackSize);
        thread.Start();
    }

    private static void BigRecursion()
    {
        var T = int.Parse(Console.ReadLine());
        for (var t = 0; t < T; t++)
        {
            var N = int.Parse(Console.ReadLine());
            var treeList = Enumerable.Range(0, N).Select(e => new Node()).ToArray();
            var r1 = Console.ReadLine().Trim().Split().Select(int.Parse).ToArray();
            for (var i = 0; i < N; i++)
            {
                var p = r1[i] - 1;
                if (p >= 0) treeList[p].children.AddLast(treeList[i]);
            }

            var tuple = treeList[0].sumColor();
            Console.WriteLine("Case #{0}: {1}", t + 1, tuple.Item1);
        }
    }


}

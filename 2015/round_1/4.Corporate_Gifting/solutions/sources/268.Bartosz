#include<cstdio>
#include<vector>

using namespace std;

enum {
	MAX = 200010,
	INF = 1000000000,
	MAX_SOL = 100
};

typedef vector< vector<int> > GRAPH;
int res[MAX][MAX_SOL];

void dfs(GRAPH& gr, int x, int p = -1) {
	for(int i = 1; i < MAX_SOL; i++)
		res[x][i] = i;
	for(int i = 0; i < gr[x].size(); i++) {
		if(gr[x][i] == p) continue;
		dfs(gr,gr[x][i],x);
		int best = INF, best_id = -1;
		int sbest = INF, sbest_id = -1;
		for(int j = 1; j < MAX_SOL; j++) {
			if (res[gr[x][i]][j] < best) {
				sbest = best; sbest_id = best_id;
				best = res[gr[x][i]][j]; best_id = j;
			} else if(res[gr[x][i]][j] < sbest) {
				sbest = res[gr[x][i]][j]; sbest_id = j;
			}
		}
		for(int j = 1; j < MAX_SOL; j++)
			if(best_id == j)
				res[x][j] += sbest;
			else
				res[x][j] += best;
	}
}

int main() {
	int T; scanf("%d", &T);
	for(int _ = 0; _ < T; _++) {
		int n; scanf("%d", &n);
		GRAPH graph(n);
		for(int i = 0; i < n; i++) {
			int x; scanf("%d", &x);
			x--;
			if(x>=0) {
				graph[i].push_back(x);
				graph[x].push_back(i);
			}
		}
		dfs(graph,0);
		int best = INF;
		for(int i = 1; i < MAX_SOL; i++)
			if(best > res[0][i]) best = res[0][i];
		printf("Case #%d: %d\n", _+1, best);
	}
	return 0;
}

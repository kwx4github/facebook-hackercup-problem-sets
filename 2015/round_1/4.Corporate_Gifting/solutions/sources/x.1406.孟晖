import java.util.*;

public class D {
    public static class DoubiList {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        public void add(int x) {
            if (map.containsKey(x))
                return;
            int l = x, u = x;
            if (map.containsKey(x - 1))
                l = map.get(x - 1);
            if (map.containsKey(x + 1))
                u = map.get(x + 1);
            map.put(x, 0);
            map.put(l, u);
            map.put(u, l);
        }

        public int leastAbsentIntegerNoLessThan(int x) {
            if (!map.containsKey(x))
                return x;
            return map.get(x) + 1;
        }
    }

    static ArrayList<ArrayList<Integer>> tree;

    static long[] dfs(int v) {
        if (tree.get(v).size() == 0)
            return new long[] {1, 1, 1};
        long ans = 0;
        DoubiList list = new DoubiList();
        Map<Integer, Long> plans = new HashMap<Integer, Long>();
        ArrayList<Integer> candidates = new ArrayList<Integer>();
        for (int t: tree.get(v)) {
            long[] ret = dfs(t);
            if (!plans.containsKey((int) ret[0])) {
                plans.put((int) ret[0], ret[0]);
                list.add((int) ret[0]);
                candidates.add((int) ret[0]);
            }
            plans.put((int) ret[0], plans.get((int) ret[0]) + ret[2]);
            ans += ret[1];
        }
        int extraCandidate = list.leastAbsentIntegerNoLessThan(1);
        plans.put(extraCandidate, (long) extraCandidate);
        candidates.add(extraCandidate);

        long[] x = removeMin(plans, candidates);
        long[] y = removeMin(plans, candidates);

        long[] retvalue = new long[] {x[0], x[1] + ans, y[1] - x[1]};
        return retvalue;
    }

    static long[] removeMin(Map<Integer, Long> plans, List<Integer> candidates) {
        int best = -1;
        for (int x: candidates) {
            if (plans.containsKey(x) && (best == -1 || plans.get(x) < plans.get(best)))
                best = x;
        }
        long[] ret = new long[] {best, plans.get(best)};
        plans.remove(best);
        return ret;
    }

    public static final void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int T = scan.nextInt();
        for (int cs = 1; cs <= T; ++cs) {
            int n = scan.nextInt();
            tree = new ArrayList<ArrayList<Integer>>();
            for (int i = 0; i < n; ++i)
                tree.add(new ArrayList<Integer>());
            for (int i = 0; i < n; ++i) {
                int t = scan.nextInt() - 1;
                if (i != 0)
                    tree.get(t).add(i);
            }
            System.out.format("Case #%d: %d\n", cs, dfs(0)[1]);
        }
    }
}

#include <bits/stdc++.h>

using namespace std;

queue <int> q;
set <int> s[200005];
set <int>::iterator it;
bool visited[200005];
int p[200005];
int child[200005];

int main()
{
    FILE *fi, *fo;
    //fi = fopen("i.txt", "r");
    fi = fopen("corporate_gifting.txt", "r");
    fo = fopen("op.txt", "w");

    int t;

    fscanf(fi, "%d", &t);

    for (int lol = 1; lol <= t; lol++) {
        int n, i, cur;

        fscanf(fi, "%d", &n);
        //cout <<n;

        memset(p, 0, sizeof(p));
        memset(child, 0, sizeof(child));

        p[0] = 0;
        for (i = 1; i <= n; i++) {
            fscanf(fi, "%d", &p[i]);
            child[p[i]]++;
        }
        //cout << "INP over";

        while (!q.empty())
            q.pop();

        for (i = 0; i <= n; i++)
            s[i].clear();

        memset(visited, 0, sizeof(visited));

        for (i = 1; i <= n; i++) {
            if (child[i] == 0) {
                q.push(i);
                visited[i] = 1;
            }
        }
        //cout << "hi " << q.size() << endl;

        int ans = 0;
        while (!q.empty()) {
            cur = q.front();
            q.pop();
            child[p[cur]]--;

            if (cur == 0)
                break;

            for (i = 1, it = s[cur].begin(); it != s[cur].end(); it++, i++) {
                //cout << "set " << cur << ": " << *it << endl;
                if (i != (*it))
                    break;
            }
            ans += i;

            //cout << cur << " " << i << endl;

            s[p[cur]].insert(i);
            if (!visited[p[cur]] && child[p[cur]] == 0) {
                q.push(p[cur]);
                visited[p[cur]] = 1;
            }
        }

        //cout << lol << " " << ans << endl;

        fprintf(fo, "Case #%d: %d\n", lol, ans);
    }

    return 0;
}

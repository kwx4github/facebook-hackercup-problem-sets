#include <bits/stdc++.h>
#define MAXN 200010
using namespace std;

vector<int> edges[MAXN];
bool visited[MAXN];
pair<long long,int> dp[MAXN];
long long sdp[MAXN];
int main()
{
    int t,n,v;
    scanf("%d",&t);
    for(int z=1;z<=t;++z)
    {

        memset(visited,0,sizeof(visited));
        memset(dp,0,sizeof(dp));
        memset(sdp,0,sizeof(sdp));

        scanf("%d",&n);
        for(int i=1;i<=n;++i) edges[i].clear();
        for(int i=0;i<n;++i)
        {
            scanf("%d",&v);
            if(v==0) continue;

            edges[v].push_back(i+1);
        }
    queue<int> q;
    q.push(1);
    visited[1]=1;
    vector<int> arr;
    while(!q.empty())
    {
        int p=q.front();
        q.pop();
        arr.push_back(p);
        for(int i=0;i<edges[p].size();++i)
        {
            if(!visited[edges[p][i]])
            {
                q.push(edges[p][i]);
                visited[edges[p][i]]=1;
            }
        }
    }
    for(int i=n-1;i>=0;--i)
    {
        int p=arr[i];
        int deg=edges[p].size();
        if(deg==0)
        {
            dp[p]=make_pair(1,1);
            sdp[p]=2;
            continue;
        }
        long long* temparr=new long long[deg+2];
        long long mincost=0;
        for(int j=0;j<edges[p].size();++j)
        {
            mincost+=dp[edges[p][j]].first;
        }
        for(int j=1;j<=deg+1;++j)
            temparr[j]=mincost+j;
        for(int j=0;j<edges[p].size();++j)
        {
            temparr[dp[edges[p][j]].second]=temparr[dp[edges[p][j]].second]-dp[edges[p][j]].first+sdp[edges[p][j]];
        }
        long long mi=temparr[1],secondmin=-1;
        int minj=1;
        for(int j=2;j<=deg+1;++j)
        {
            if(temparr[j]<mi)
            {
                mi=temparr[j];
                minj=j;
            }
        }
        for(int j=1;j<=deg+1;++j)
        {
            if(j==minj) continue;
            if(secondmin==-1 || temparr[j]<secondmin) secondmin=temparr[j];
        }
        dp[p]=make_pair(mi,minj);
        sdp[p]=secondmin;
        //printf("%d %lld %d %lld\n",i,mi,minj,secondmin);
    }

    printf("Case #%d: %lld\n",z,dp[1].first);
    }
    return 0;
}

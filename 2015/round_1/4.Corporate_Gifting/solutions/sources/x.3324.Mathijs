#include <iostream>
#include <string>
#include <map>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

using namespace std;

vector<vector<int>> children;
vector<int> children_left;
vector<int> parentnode;
int best[200000][3];

void doit(ifstream &fin) {
    int N;
    fin >> N;

    children.clear();
    children.resize(N);
    parentnode.resize(N);
    children_left.clear();
    children_left.resize(N);

    for (int i = 0; i < N; ++i) {
        int parent;
        fin >> parent;
        parent--;
        parentnode[i] = parent;
        if (parent >= 0) {
            children[parent].push_back(i);
            children_left[parent] += 1;
        }
    }

    queue<int> q;
    for (int i = 0; i < N; ++i) {
        if (children_left[i] == 0) q.push(i);
    }

    while (!q.empty()) {
        int node = q.front(); q.pop();

        for (int parentval = 0; parentval < 3; ++parentval) {
            if (children[node].size() == 0) {
                best[node][parentval] = (parentval == 0) ? 2 : 1;
            }
            else {
                int bv = INT_MAX;
                for (int myval = 0; myval < 3; ++myval) {
                    if (myval == parentval) continue;
                    int sum = myval + 1;
                    for (auto c : children[node]) {
                        sum += best[c][myval];
                    }
                    if (sum < bv) bv = sum;
                }
                best[node][parentval] = bv;
            }
        }

        if (parentnode[node] >= 0 && --children_left[parentnode[node]] == 0) {
            q.push(parentnode[node]);
        }
    }

    int bv = INT_MAX;
    for (int i = 0; i < 3; ++i) {
        if (best[0][i] < bv) bv = best[0][i];
    }

    cout << bv << endl;
}

int main(int argc, char* argv[]) {
    int T;
    if (argc < 1) return 0;
    ifstream fin = ifstream(argv[1]);
    fin >> T;
    fin.get();

    for (int i = 1; i <= T; ++i) {
        cout << "Case #" << i << ": ";
        doit(fin);
    }
    return 0;
}
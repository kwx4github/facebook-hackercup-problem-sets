#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

typedef long long LL;
#define rep(it,s) for(__typeof((s).begin()) it=(s).begin();it!=(s).end();it++)

vector<int> e[200010];
int dp[200010][20];
int n, m;

int solve(int p, int last) {
    if (e[p].size()==0) {
        if (last==0) {
            if (p!=0) return 2;
            return 1;
        }
        else return 1;
    }
    if (dp[p][last]>=0) return dp[p][last];

    int res = 100000000;

    if (p==0) last = m;

    for (int i=0; i<m; i++) if (i!=last) {

        int tmp = i + 1;

        for (int j=0; j<e[p].size(); j++) {

            tmp += solve(e[p][j], i);

        }

        res = min(res, tmp);

    }

    dp[p][last] = res;

    return res;

}

stack<int> st;
queue<int> q;

int calc(int c) {

    q.push(0);

    while (!q.empty()) {

        int p = q.front();
        q.pop();

        for (int j=0; j<e[p].size(); j++) {

            q.push(e[p][j]);

        }

        st.push(p);
    }

    while (!st.empty()) {

        int p = st.top();
        st.pop();

        if (e[p].size()==0) {
            for (int i=1; i<c; i++) {
                dp[p][i] = 1;
            }
            dp[p][0] = 2;
            if (p==0) dp[p][0] = 1;
        }
        else {

            if (p!=0) {
                for (int last=0; last<c; last++) {

                    dp[p][last] = 100000000;

                    for (int i=0; i<c; i++) if (i!=last) {

                        int tmp = i + 1;

                        for (int j=0; j<e[p].size(); j++) {

                            tmp += dp[e[p][j]][i];

                        }

                        dp[p][last] = min(dp[p][last], tmp);

                    }

                }
            }
            else {

                int last = c;

                dp[p][0] = 100000000;

                for (int i=0; i<c; i++) if (i!=last) {

                    int tmp = i + 1;

                    for (int j=0; j<e[p].size(); j++) {

                        tmp += dp[e[p][j]][i];

                    }

                    dp[p][0] = min(dp[p][0], tmp);

                }

            }

        }

    }

    return dp[0][0];

}

int cnt;

// Need 7 in lev 1 -> 9, rest 6

void create(int lev) {
    if (lev==0) return;

    if (lev==1) {
        int p = cnt;

        for (int i=0; i<9; i++) {

            e[p].push_back(++cnt);

        }

        return;
    }

    int p = cnt;
    create(lev-1);

    for (int i=0; i<6; i++) {

        e[p].push_back(++cnt);

        create(lev-1);

    }

}

int main() {

    freopen("corporate_gifting.txt","r",stdin);
    freopen("output.txt","w",stdout);


    int tt;
    cin>>tt;
    for (int cas=1; cas<=tt; cas++) {

        cin>>n;

        for (int i=0; i<n; i++) e[i].clear();

        int x;
        for (int i=0; i<n; i++) {
            scanf("%d", &x);
            //x = i;
            if (i!=0) {
                e[x-1].push_back(i);
            }
        }

//        cnt = 0;
//        create(n);
//        cout<<cnt<<endl;
//
//        int tot = 0;
//
//        n = cnt;

        //for (int i=0; i<n; i++) for (int j=0; j<10; j++) dp[i][j] = -1;
        //m = 8;
        //cout<<solve(0, 0)<<endl;

        m = 8;
        int tot = 0;
        while (true) {

            int a = calc(m);
            int b = calc(m+1);

            if (a==b) {
                tot = a;
                break;
            }
            else {
                m++;
            }

        }

        //tot = solve(0, 0);

        printf("Case #%d: %d\n", cas, tot);
        //cout<<m<<endl;
        //cout<<calc()<<endl;

    }


    return 0;

}

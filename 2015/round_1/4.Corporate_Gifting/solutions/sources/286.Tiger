package gcjpractice;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;

public class CorporateGifting {
    BufferedReader sc;

    void read () throws NumberFormatException, IOException {
        n = Integer.valueOf(sc.readLine());
        Tree[] trees = new Tree[n + 1];
        for (int i = 1; i <= n; i++) {
            trees[i] = new Tree(i);
        }
        String[] str = sc.readLine().split(" ");
        for (int i = 1; i <= n; i++) {
            int parent = Integer.parseInt(str[i - 1]);
            if (parent != 0) {
                Tree p = trees[parent];
                p.children.add(trees[i]);
            }
        }
        tree = trees[1];
    }

    static class Tree {
        int idx;
        ArrayList<Tree> children = new ArrayList<Tree>();
        boolean expended = false;

        int minsum;
        int rcolor;
        int delta;
        int ncolor;

        public Tree(int idx) {
            this.idx = idx;
        }
    }

    int n;
    Tree tree;

    void solve () throws IOException {
        LinkedList<Tree> stack = new LinkedList<Tree>();
        stack.push(tree);
        while (!stack.isEmpty()) {
            Tree t = stack.peek();
            if (!t.expended) {
                t.expended = true;
                for (Tree t2 : t.children) {
                    stack.push(t2);
                }
            } else {
                Tree cur = stack.pop();
                if (cur.children.isEmpty()) {
                    cur.minsum = 1;
                    cur.rcolor = 1;
                    cur.delta = 1;
                    cur.ncolor = 2;
                } else {
                    int[] coloradd = new int[cur.children.size() + 2 + 1];
                    for (int k = 1; k <= cur.children.size() + 2; k++) {
                        coloradd[k] = k;
                    }
                    int mintotal = 0;
                    for (Tree child : cur.children) {
                        mintotal += child.minsum;
                        coloradd[child.rcolor] += child.delta;
                    }
                    int sum1 = Integer.MAX_VALUE;
                    int sum2 = Integer.MAX_VALUE;
                    int color1 = -1;
                    int color2 = -1;
                    for (int k = 1; k <= cur.children.size() + 2; k++) {
                        int value = coloradd[k];
                        if (value < sum1) {
                            color2 = color1;
                            sum2 = sum1;
                            color1 = k;
                            sum1 = value;
                        } else {
                            if (value < sum2) {
                                color2 = k;
                                sum2 = value;
                            }
                        }
                    }
                    assert color1 != -1;
                    assert color2 != -1;
                    cur.minsum = sum1 + mintotal;
                    cur.rcolor = color1;
                    cur.delta = sum2 - sum1;
                    cur.ncolor = color2;
                }
            }
        }
        System.out.println(tree.minsum);
    }

    void run () throws NumberFormatException, IOException {
        sc =
                new BufferedReader(new FileReader(
                        "C:\\Users\\sunx2013\\Downloads\\4in.txt"));
        final int cn = Integer.valueOf(sc.readLine());
        for (int ci = 1; ci <= cn; ci++) {
            read();
            System.out.printf("Case #%d: ", ci);
            solve();
        }
    }

    public static void main (String[] args) throws NumberFormatException,
            IOException {
        new CorporateGifting().run();
    }
}

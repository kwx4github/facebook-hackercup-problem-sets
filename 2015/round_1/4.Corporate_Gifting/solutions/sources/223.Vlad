#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <string.h>

using namespace std;
typedef long long LL;
int MAX_K = 449;
int DP[200001][450];
int mini[200001][2][2];
vector<int> G[200001];
int N;

void sterge() {
  for (int i = 0; i <= 200000; ++i) G[i].clear();
  memset(DP, 0, sizeof(DP));
  memset(mini, 0, sizeof(mini));
}
void solve(int nod) {
  for (int i = 0; i < G[nod].size(); ++i) {
    int nod2 = G[nod][i];
    solve(G[nod][i]);
  }
  for (int i = 1; i <= MAX_K && i <= N; ++i) {
    DP[nod][i] = i;
    for (int j = 0; j < G[nod].size(); ++j) {
      int nod2 = G[nod][j];
      int now = -1;
      if (i != mini[nod2][0][1]) now = mini[nod2][0][0];
      else now = mini[nod2][1][0];
      /*
      for (int k = 1; k <= MAX_K && k <= N; ++k) if (i != k) {
        if (now == -1 || DP[nod2][k] < now) now = DP[nod2][k];
      }
      */
      DP[nod][i] += now;
    }
  }
  int mn_1, mn_2 = -1, at_1, at_2;
  mn_1 = DP[nod][1]; at_1 = 1;
  for (int i = 2; i <= MAX_K && i <= N; ++i) {
    if (DP[nod][i] <= mn_1) {
      mn_2 = mn_1; at_2 = at_1;
      mn_1 = DP[nod][i]; at_1 = i;
    } else if (DP[nod][i] < mn_2 || mn_2 == -1) {
      mn_2 = DP[nod][i]; at_2 = i;
    }
  }
  mini[nod][0][0] = mn_1;
  mini[nod][0][1] = at_1;
  mini[nod][1][0] = mn_2;
  mini[nod][1][1] = at_2;
}

void solve2(int nod) {
}

int main() {
  int tt; cin >> tt;
  for (int t = 1; t <= tt; ++t) {
    sterge();
    cin >> N; 
    for (int i = 1; i <= N; ++i) {
      int X; cin >> X;
      if (i == 1) continue;
      G[X].push_back(i);
    }
    solve(1);
    int ret = DP[1][1];
    for (int i = 2; i <= N && i <= MAX_K; ++i) ret = min(ret, DP[1][i]); 
    cout << "Case #" << t << ": " <<  ret << '\n';
    cerr << "Done with " << t << " out of " << tt << '\n';
  }
  return 0;
}

#include <iostream>
#include <cstdio>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int K = 1 << 9;
const int nn = 1 << 18;
const int INF = K * nn;

vector<int> g[nn];

int f[nn][K + 1];
int nf[nn][K + 1];

void go(int v) {
    for (int i = 0; i < g[v].size(); ++i) go(g[v][i]);
    
    for (int k = 1; k <= K; ++k) {
        f[v][k] = k;
        nf[v][k] = INF;
        for (int i = 0; i < g[v].size(); ++i)
            f[v][k] += nf[g[v][i]][k];
    }
    
    int L = INF;
    for (int k = 1; k <= K; ++k) {
        nf[v][k] = min(nf[v][k], L);
        L = min(L, f[v][k]);
    }
    int R = INF;
    for (int k = K; k >= 1; --k) {
        nf[v][k] = min(nf[v][k], R);
        R = min(R, f[v][k]);
    }
}

void solve() {
    int n;
    cin >> n;
    for (int i = 0; i <= n; ++i) g[i].clear();
    for (int i = 1; i <= n; ++i) {
        int x; cin >> x;
        g[x].push_back(i);
    }
    
    int res = 0;
    
    go(1);
    res = f[1][1];
    for (int i = 2; i <= K; ++i) res = min(res, f[1][i]);
    
    static int test_id;
    cout << "Case #" << ++test_id << ": " << res << endl;
    cerr << "Case #" << test_id << ": " << res << endl;
}

int main() {
    int t;
    cin >> t;
    while (t --> 0) solve();
    return 0;
}

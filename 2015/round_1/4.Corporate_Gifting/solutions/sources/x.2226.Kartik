/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
struct debugger{template<typename T> debugger& operator,(const T& v){cerr<<v<<" ";return *this;}}dbg;
#define db(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
#define LOG 15
vector< vector<int> > g;
vector< vector<int> > visit;
vector< vector<int> > ans;
int dfs(int u,int k,int parent)
{
    visit[u][k]=1;
    int childs=0;
    for(int i=0;i<g[u].size();i++)
    {
        int v=g[u][i];
        if(v!=parent)
            childs++;
    }
    if(childs==0)
    {
        for(int i=1;i<LOG;i++)
            if(i!=k)
            {
                ans[u][k]=i;
                return i;
            }
    }
    ans[u][k]=INT_MAX;
    for(int j=1;j<LOG;j++)
    {
        if(j==k)
            continue;
        int cans=j;
        for(int i=0;i<g[u].size();i++)
        {
            int v=g[u][i];
            if(v==parent)
                continue;
            if(!visit[v][j])
                dfs(v,j,u);
            cans+=ans[v][j];
            if(cans>ans[u][k])
                break;
        }
        ans[u][k]=min(ans[u][k],cans);
    }
    return ans[u][k];
}
int main()
{
    freopen("in","r",stdin);
    freopen("out","w",stdout);

    int test;s(test);
    int kase=0;
    while(test--)
    {
        kase++;
        int n;s(n);
        vector<int> v(n);
        g.assign(n,vector<int>());
        visit.assign(n,vector<int>(LOG,0));
        ans.assign(n,vector<int>(LOG,0));
        for(int i=0;i<n;i++)
        {
            s(v[i]);
            v[i]--;
            if(i)
            {
                g[i].push_back(v[i]);
                g[v[i]].push_back(i);
            }

        }
        int ans=INT_MAX;
        for(int i=1;i<LOG;i++)
        {
            ans=min(ans,dfs(0,i,-1));
        }
        cout<<"Case #"<<kase<<": "<<ans<<endl;
    }

    return 0;
}


#include<bits/stdc++.h>
using namespace std;
const int maxn=2e6+10;
const int maxrange=20;
int T,cas=1,n,range;
int dp[maxn][maxrange];
int head[maxn],cnt;
struct arc
{
    int v,next;
}arcs[maxn];
int dpsort(int u,int x)
{
    int &ans=dp[u][x];
    if (ans>0) return ans;
    ans=x;
    for (int k=head[u];k!=-1;k=arcs[k].next)
    {
        int tmp=19940820;
        for (int i=1;i<=range;i++) if (i!=x) tmp=min(tmp,dpsort(arcs[k].v,i));
        ans+=tmp;
    }
    return ans;
}

int  solve()
{
    memset(dp,-1,sizeof(dp));
    int ans=19940820;
    for (int i=1;i<=range;i++) ans=min(ans,dpsort(1,i));
    return ans;
}

int main()
{
    //srand(time(NULL));
    freopen("corporate_gifting.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int size = 256 << 20; // 256MB
    char *p = (char*)malloc(size) + size;
    __asm__("movl %0, %%esp\n" :: "r"(p));

    scanf("%d",&T);
    while (T--)
    {
        scanf("%d",&n);
        memset(head,-1,sizeof(head));cnt=0;
        for (int v=1;v<=n;v++)
        {
            int u;scanf("%d",&u);
            //u=rand()%v;
            arcs[cnt]=(arc){v,head[u]};
            head[u]=cnt++;
        }
        int ans[20];
        range=2;
        ans[2]=solve();
        for (range=3;range<maxrange;range++)
        {
            ans[range]=solve();
            if (ans[range]==ans[range-1]) {range--;break;}
            //putchar('/');
        }//putchar('\n');
        //printf("find best ans=%d at range=%d tmp=%d\n",ans[range],range,ans[range-1]);
        printf("Case #%d: %d\n",cas++,ans[range]);
    }
    return 0;
}

#include <iostream>
#include <sstream>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <vector>
#include <fstream>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <algorithm>
#include <numeric>
#include <bitset>

template<typename T>
typename T::value_type SUM(const T &t){
	return accumulate(t.begin(),t.end(), typename T::value_type());
}

#define INF 2100000000
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP make_pair
#define SZ size()
#define FOR(i,b) for(int i=0;i<b;i++)
#define ll long long

using namespace std;

VI tree[200002];
int dp[200002][3];
int dt[200002];

void solve(int v){
    int d = tree[v].SZ;
    if(d==0){
        dp[v][0]=1;
        dp[v][1]=1;
        dp[v][2]=2;
        return;
    }
  //  cout << "solve " << v << endl;
    FOR(i,d){
        solve(tree[v][i]);
    }
    int k=0;
    FOR(i,d){
        k+=dp[tree[v][i]][0];
    }
    //cout << "k " << k << endl;
    for(int i=1;i<=d+1;i++){
        dt[i]=k;
    }

    FOR(i,d){
        if(dp[tree[v][i]][1]<=d+1){
            dt[dp[tree[v][i]][1]] = dt[dp[tree[v][i]][1]] + dp[tree[v][i]][2] - dp[tree[v][i]][0];
        }
    }
    int kv = 1+dt[1]; int c = 1; int k2=0;
    for(int i=1;i<=d+1;i++){
        if(i+dt[i] < kv){
            kv = i+dt[i];
            c = i;
        }
    }
    for(int i=1;i<=d+1;i++){
        if(i==c) continue;
        if(k2==0 || i+dt[i] < k2){
            k2 = i+dt[i];
        }
    }
//cout << "v" << " " << kv << " " << c << " " << k2 << endl;
    dp[v][0]=kv;
    dp[v][1]=c;
    dp[v][2]=k2;
}

int main(){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);

    int t;
    cin >> t;
    FOR(i,t){
        int n,x;
        cin >> n;
        FOR(j,n) {
            tree[j].clear();
            dp[j][0]=dp[j][1]=dp[j][2]=0;
        }
        FOR(j,n) {
            cin >> x;
            if(x>0) tree[x-1].PB(j);
        }

        solve(0);

        int ans = min(dp[0][0],dp[0][2]);

        cout << "Case #"<<(i+1)<<": "<<ans<<endl;
    }

//	system("pause");
	return 0;
}

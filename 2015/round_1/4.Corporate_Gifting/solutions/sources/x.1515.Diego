#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

struct Counter
{
	static int k;
	Counter() {k++;}
	~Counter() {k--;}
};

int Counter::k = 0;

template<typename T>
void pr(const string& name, T t)
{
    cout << name << " = " << t << endl;
}

template<typename T, typename ... Types>
void pr(const string& names, T t, Types ... rest)
{
    auto comma_pos = names.find(',');
    cout << names.substr(0, comma_pos) << " = " << t << ", ";

    auto next_name_pos = names.find_first_not_of(" \t\n", comma_pos + 1);
    pr(string(names, next_name_pos), rest ...);
}

void mod(ll &a, ll b)
{
    a %= b;
    if(a < 0) a += b;
}

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define trace(...) pr(#__VA_ARGS__, __VA_ARGS__);
#define tracea(x) {string s = #x; Counter c##x; cout<<s.substr(0,1+s.find('['))<<Counter::k<<"]="<<x<<'\n';}
#define vii vector<pair<int,int>>

const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

ifstream fin("A.txt");
ofstream fout("corporate.out");

const int INF = 10000005;
const int MAX = 200005;
int DP[MAX][4],N,T;
vector<int> E[MAX];

int dfs(int n, int p, int b)
{
    if(DP[n][b]) return DP[n][b];
    DP[n][b] = b;

    for(int v : E[n]) if(v != p)
    {
        int m = INF;

        f(i,1,3)
        {
            if(i == b) continue;
            int val = dfs(v,n,i);
            m = min(m,val);
        }

        DP[n][b] += m;
    }

    return DP[n][b];
}

int main()
{
    fin >> T;

    f(t,1,T)
    {
        fin >> N;
        f(i,1,N) DP[i][1] = DP[i][2] = DP[i][3] = 0;
        f(i,1,N) E[i].clear();

        f(i,1,N)
        {
            int p;
            fin >> p;
            if(p == 0) continue;
            E[p].pb(i);
            E[i].pb(p);
        }

        dfs(1,0,1);
        dfs(1,0,2);
        dfs(1,0,3);

        fout << "Case #" << t << ": " << min(DP[1][3],min(DP[1][1],DP[1][2])) << "\n";
    }
}

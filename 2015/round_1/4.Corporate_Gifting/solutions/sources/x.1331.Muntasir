#include <cstdio>
#include <cstring>
#include <vector>
#include <set>

#define SIZE 200010

using namespace std;

#define ENTER 0
#define EXIT 1

struct Node {
  int num, type;
};

int p[SIZE];
int gift[SIZE];

Node stk[SIZE];
int sz = 0;
vector<vector<int> > G;

long long colour(vector<vector<int> > &G) {
  long long even = 0, odd = 0;
  long long ret = 0;
  int total = G.size();
  Node start = {0, ENTER};
  sz = 0;
  stk[sz++] = start;
  while (sz > 0) {
    Node n = stk[--sz];
    //fprintf(stderr, "Node: %d type: %d\n", n.num, n.type);
    if (n.type == ENTER) {
      n.type = EXIT;
      stk[sz++] = n;
      vector<int> &children = G[n.num];
      for(int i = 0; i < children.size(); i++) {
        Node child_node = { children[i], ENTER };
        stk[sz++] = child_node;
      }
    }
    else {
      set<int> seen;
      vector<int> &children = G[n.num];
      for(int i = 0; i < children.size(); i++) {
        seen.insert(gift[children[i]]);
      }
      int my_gift = -1;
      for (int i = 1; i <= total; i++) {
        if (seen.find(i) == seen.end()) {
          my_gift = i;
          break;
        }
      }
      //fprintf(stderr, "node: %d, gift: %d\n", n.num, my_gift);
      gift[n.num] = my_gift;
      ret += my_gift;
    }
  }
  return ret;
}

int main() {
  int T, N;
  scanf("%d", &T);
  for (int cas = 1; cas <= T; cas++) {
    scanf("%d", &N);
    G.clear();
    for (int i =0; i < N; i++) {
      vector<int> edges;
      G.push_back(edges);
    }
    for (int i = 0; i < N; i++) {
      scanf("%d", p + i);
      p[i]--;
      //fprintf(stderr, "%d is a child of %d\n", i, p[i]);
       if (i > 0) G[p[i]].push_back(i);
    }
    printf("Case #%d: %lld\n", cas, colour(G));
  }
  return 0;
}

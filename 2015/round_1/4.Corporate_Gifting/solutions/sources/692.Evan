import java.util.*;
import java.io.*;
public class CorporateGifting
{
	public static ArrayList<Integer>[] adj;
	public static long[][] memo;
	
	public static void main(String[] args) throws Exception
	{
//		FastScanner in = new FastScanner(System.in);
//		PrintWriter out = new PrintWriter(System.out);
		
		FastScanner in = new FastScanner(new File("corporate_gifting.txt"));
		PrintWriter out = new PrintWriter(new FileWriter(new File("corporate_gifting_output.txt")));
		
		int t = in.nextInt();
		for(int x = 0; x < t; x++)
		{
			int n = in.nextInt();
			
			adj = new ArrayList[n];
			for(int y = 0; y < adj.length; y++)
			{
				adj[y] = new ArrayList<Integer>();
			}
			
			for(int y = 0; y < n; y++)
			{
				int p = in.nextInt() - 1;
				
				if(y > 0)
				{
					adj[p].add(y);
				}
			}
			
			memo = new long[20][n];
			for(int z = 0; z < memo.length; z++)
			{
				Arrays.fill(memo[z], -1);
			}
			
			out.println("Case #" + (x + 1) + ": " + gifts(0, memo.length - 1));
		}
		
		out.close();
	}
	
	public static long gifts(int node, int prev)
	{
		if(memo[prev][node] != -1)
		{
			return memo[prev][node];
		}
		else
		{
			long best = Long.MAX_VALUE;
			for(int i = 0; i < memo.length; i++)
			{
				if(i != prev)
				{
					long current = i + 1;
					for(int next : adj[node])
					{
						current += gifts(next, i);
					}
					
					best = Math.min(best, current);
				}
			}
			
			return memo[prev][node] = best;
		}
	}
	
	static class FastScanner
	{
		BufferedReader br;
		StringTokenizer st;
		
		public FastScanner(InputStream input)
		{
			br = new BufferedReader(new InputStreamReader(input));
			st = new StringTokenizer("");
		}
		
		public FastScanner(File f) throws IOException
		{
			br = new BufferedReader(new FileReader(f));
			st = new StringTokenizer("");
		}
		
		public String next() throws IOException
		{
			if(st.hasMoreTokens())
			{
				return st.nextToken();
			}
			else
			{
				st = new StringTokenizer(br.readLine());
				return next();
			}
		}
		
		public int nextInt() throws IOException
		{
			return Integer.parseInt(next());
		}
	}
}

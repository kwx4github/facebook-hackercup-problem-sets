#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>

using namespace std;

typedef long long LL;

const int maxn = 233333;
const long long inf = 1LL << 27;

long long f[maxn], fc[maxn];
int c[maxn];
int fa[maxn], r[maxn];

long long cf[maxn];

vector<int> g[maxn];

queue<int> que;

void DP(int u, int v){
	for (int i = 1; i<=v; ++i)
		cf[i] = 0;
	long long sum = 0;
	for (int i = 0; i<(int)g[u].size(); ++i){
		sum += f[g[u][i]];
		cf[c[g[u][i]]] += f[g[u][i]];
		cf[c[g[u][i]]] -= fc[g[u][i]];
	}
	f[u] = fc[u] = inf;
	for (int i = 1; i<=v; ++i){
		if (f[u] > sum - cf[i] + i){
			fc[u] = f[u];
			f[u] = sum - cf[i] + i;
			c[u] = i;
		}
		else fc[u] = min(fc[u], sum - cf[i] + i);
	}
	return ;
}

int main(){
	int T;
	scanf("%d", &T);
	for (int TI = 1; TI<=T; ++TI){
		int n;
		scanf("%d", &n);
		for (int i = 0; i<=n; ++i){
			g[i].clear();
			r[i] = 0;
		}
		for (int i = 1; i<=n; ++i){
			int k;
			scanf("%d", &k);
			g[k].push_back(i);
			++r[k];
			fa[i] = k;
		}
		while (!que.empty()) que.pop();
		r[0] = n + 1;
		for (int i = 1; i<=n; ++i)
			if (r[i] == 0) que.push(i);
		while (!que.empty()){
			int u = que.front();
			que.pop();
			DP(u, (int)g[u].size() + 2);
			if (--r[fa[u]] == 0) que.push(fa[u]);
		}
		printf("Case #%d: %I64d\n", TI, f[1]);
	}
	return 0;
}

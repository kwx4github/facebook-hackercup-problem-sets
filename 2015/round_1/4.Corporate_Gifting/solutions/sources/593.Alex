package hackercup2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class ProblemD {

	public static void main(String[] args)throws Exception {
		BufferedReader in = new BufferedReader(new FileReader("corporate_gifting.txt"));
		int t = Integer.parseInt(in.readLine());

		PrintWriter out = new PrintWriter(new File("output.txt"));
		for (int z = 0; z < t; z++) {
			int n = Integer.parseInt(in.readLine());
			String[] ids = in.readLine().split(" ");
			List[] adj = new List[n];
			int[] mgr = new int[n];
			for (int i = 0; i < n; i++) {
				adj[i] = new ArrayList<Integer>();
			}
			int MM = 50;
			for (int i = 0; i < ids.length; i++) {
				int manager = Integer.parseInt(ids[i]);
				if (manager != 0) {
					adj[manager - 1].add(i);
				}
				mgr[i] = manager > 0 ? (manager - 1) : -1;
			}
			int[][] d = new int[n][MM + 1];
			Queue<Integer> q = new LinkedList<Integer>();
			q.add(0);
			List<Integer> order = new ArrayList<Integer>();
			while (!q.isEmpty()) {
				int p = q.poll();
				order.add(p);
				for (int i = 0 ; i < adj[p].size(); i++) {
					q.add((Integer) adj[p].get(i));
				}
			}
			for (int ii = order.size() - 1; ii >= 0; ii--) {
				int p = order.get(ii);
				if (adj[p].size() > 0) {
					for (int cost = 1; cost <= MM; cost++) {
						boolean ok = true;
						int total = 0;
						for (int i = 0; i < adj[p].size(); i++) {
							int min = -1;
							for (int k = 1; k <= MM; k++) {
								if (k != cost) {
									min = min == -1 ? d[(Integer) adj[p].get(i)][k] : Math.min(min, d[(Integer) adj[p].get(i)][k]);
								}
							}
							if (min != -1) {
								total += min;
							} else {
								ok = false;
							}
						}
						d[p][cost] = total + cost;
					}
				} else {
					for (int cost = 1; cost <= MM; cost++) {
						d[p][cost] = cost;
					}
				}
			}
			int ans = -1;
			for (int cost = 1; cost <= MM; cost++) {
				if (ans == -1) {
					ans = d[0][cost];
				} else {
					ans = Math.min(ans, d[0][cost]);
				}
			}
			out.println("Case #" + (z + 1) + ": " + ans);
		}
		out.close();
	}

}

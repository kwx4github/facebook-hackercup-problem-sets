#include <iostream>
#include <cassert>
#include <vector>
using namespace std;

const int MAXN = 200010;


void swap(int &x, int &y){if(x == y) return; x^=y; y^=x; x^=y;}
int max(int x, int y){return x>y? x:y;}
int min(int x, int y){return x<y? x:y;}

int n;
int p[MAXN];
vector<int> adj[MAXN];
int ans[MAXN][2], ro[MAXN][2];
int dif[MAXN];
bool usa[MAXN];

void dfs(int v){	
	for(int u:adj[v]) dfs(u);
	
	int som = 0;
	vector<int> t;

	for(int u:adj[v]){
		som += ans[u][0];
		if(!usa[ro[u][0]]){
			t.push_back(ro[u][0]);
			usa[ro[u][0]] = true;
		}
		dif[ro[u][0]] += ans[u][1] - ans[u][0];
	}
		
	{
		int x = 1;
		while(usa[x]) x++; ans[v][0] = x + som; ro[v][0] = x;
		x++;
		while(usa[x]) x++; ans[v][1] = x + som; ro[v][1] = x;
	}
	
	for(int x:t){
		if(ans[v][1] > x + som + dif[x]){
			ans[v][1] = x + som + dif[x];
			ro[v][1] = x;
			if(ans[v][1] < ans[v][0]){
				swap(ans[v][1], ans[v][0]);
				swap(ro[v][1], ro[v][0]);
			}
		}
	}
	
	for(int x:t) {dif[x] = 0; usa[x] = false;}
}

void solve(){
	cin >> n;
	for(int i=1; i<=n; i++) adj[i].clear();
	for(int i=1; i<=n; i++) {cin >> p[i]; adj[p[i]].push_back(i);}
	dfs(1);
	cout << ans[1][0] << '\n';
}

int main(){
	int t;
	cin >> t;
	for(int i=1; i<=t; i++){
		cout << "Case #" << i << ": ";
		solve();
	}
	return 0;
}

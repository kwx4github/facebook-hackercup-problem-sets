#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)(n);i++)

typedef long long ll;

class Solver
{
protected:
	virtual void solveTest(int test)
	{
	}
public:
	Solver()
	{

	}
	virtual ~Solver(){}

	void solve()
	{
		int T;
		scanf("%d",&T);
		for(int i=1;i<=T;i++)
		{
			cerr << i <<endl;
			solveTest(i);
		}
	}
};

class In
{
public:
	int nextInt() const
	{
		int t;
		scanf("%d",&t);
		return t;
	}
	string next() const
	{
		string s;
		cin>>s;
		return s;
	}
}in;

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const int dx[4]={-1,0,1,0};
const int dy[4]={0,1,0,-1};

class WinningAtSports:public Solver
{
	static const int INF=1000000000;
	template< typename T >
	class SecondBest
	{
		T best[3];
	public:
		SecondBest(T neutral)
		{
			REP(i,3) best[i]=neutral;
		}
		void push(T el)
		{
			best[2]=el;
			sort(best,best+3);
		}
		T getBest() const
		{
			return best[0];
		}
		T getSecondBest() const
		{
			return best[1];
		}
	};

	int n;
	int sqrt;
	vector<vector<int> > v;
	vector<int> p;
	vector<vector<int> > res;
	vector<SecondBest<pair<int,int> > > best;

protected:
	void solveTest(int test)
	{
		v.clear();
		p.clear();
		res.clear();
		best.clear();

		n=in.nextInt();
		p.resize(n);
		REP(i,n)
			p[i]=in.nextInt()-1;

		v.resize(n);
		REP(i,n)
			if(p[i]>=0)
				v[p[i]].push_back(i);

		int sum=0;
		int boundary=n/2;
		for(sqrt=1;;sqrt++)
		{
			sum+=sqrt-1;
			if(sum>=boundary) break;
		}

		cerr <<"N=" << n <<endl;
		cerr <<"SQRT_VAL=" << sqrt <<endl;

		sqrt+=5;
		cerr <<"SQRT_VAL with overhead=" << sqrt <<endl;

		res.resize(n,vector<int>(sqrt));
		best.resize(n, SecondBest<pair<int,int> >(make_pair(INF, INF)));

		dfs(0);
		printf("Case #%d: %d\n", test, best[0].getBest().first+n);
	}

	void dfs(int cur)
	{
		vector<int> &c=res[cur];
		REP(i,v[cur].size())
		{
			int to=v[cur][i];
			dfs(to);
			pair<int,int> b1=best[to].getBest();
			pair<int,int> b2=best[to].getSecondBest();
			c[0]+=b1.first;
			c[b1.second]-=b1.first;
			c[b1.second]+=b2.first;
			if(b1.second+1<(int)c.size())
				c[b1.second+1]+=-b2.first+b1.first;
		}
		for(int i=1;i<(int)c.size();i++)
			c[i]+=c[i-1];
		REP(i,c.size())
			best[cur].push(make_pair(c[i]+i, i));
	}

public:
	static void init()
	{

	}
};

int main()
{
	WinningAtSports().solve();
}

//#pragma comment(linker, "/STACK:512000000")
#pragma comment(linker, "/STACK:5000000000")
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <cassert>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <functional>
#include <bitset>
#include <stack>
#include <cfloat>
#include <ctime>
#include <queue>
#include <deque>
#include <numeric>
#include <memory.h>

#define PI 3.14159265358979323846
#define ull unsigned long long int
#define ll long long int
#define EPS 1e-9
#define pb push_back
#define EOS(c) (c != EOF && c != '\0' && c != '\n' && c != ' ')
#define oo 1000000005
#define ALL(v) v.begin(), v.end()
#define mp make_pair
#define sqr(a) (a) * (a)
#define traktorista 300
int size;
typedef double dbl;

using namespace std;

#define FILES "sort"
//#define OUT "true"

template<class telem>telem GCD(telem a, telem b)
{
	return b ? GCD(b, a % b) : a;
}

template<class telem>telem LCM(telem a, telem b)
{
	return a / GCD(a, b) * b;
}

template <class telem> istream& operator >> (istream& cin, pair<telem, telem>& in)
{
	cin >> in.first >> in.second;
	return cin;
}

template <class telem> ostream& operator << (ostream& cout, pair<telem, telem> out)
{
	cout << out.first << ' ' << out.second;
	return cout;
}

template <class telem> istream& operator >> (istream& cin, vector<telem>& in)
{
	in.resize(size);

	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

template <class telem> ostream& operator << (ostream& cout, vector<telem> out)
{
	size = out.size();

	for(int i = 0; i < size; i++)
	{
		cout << out[i] << ' ';
	}

	return cout;
}

template <class telem> istream& operator >> (istream& cin, telem* in)
{
	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

/*template <class telem> ostream& operator << (ostream& cout, telem* out)
{
for(int i = 0; i < size; i++)
{
cout << out[i] << ' ';
}

return cout;
}*/

const int buben = 50;

struct hd
{
	int cost[buben];
	vector<int> ch;
	int p;
};

int n;
hd mas[200005];
int pp[200005];
int q[200005];
int head, tail;
int T;
	
int main()
{

#ifndef ONLINE_JUDGE
#ifdef OUT
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
#endif

#ifdef FILES
	freopen(FILES".in", "r", stdin);
	freopen(FILES".out", "w", stdout); 
#endif
#endif

	//ios_base::sync_with_stdio(false);
	srand(time(NULL));
	time_t start = clock();	

	scanf("%d", &T);

	for(int t = 1; t <= T; t++)
	{
		scanf("%d", &n);
		
		for(int i = 1, a; i <= n; i++)
		{
			scanf("%d", &a);

			mas[i].p = a;

			if(a)
			{
				pp[a]++;
				mas[a].ch.push_back(i);
			}
		}

		head = tail = 0;

		for(int i = 1; i <= n; i++)
		{
			if(pp[i] == 0)
				q[head++] = i;
		}

		while(head != tail)
		{
			int v = q[tail];
			tail++;

			for(int k = 1; k < buben; k++)
			{
				mas[v].cost[k] = k;

				for(int i = 0; i < mas[v].ch.size(); i++)
				{
					int mn = 2e9;
					int nv = mas[v].ch[i];

					for(int j = 1; j < buben; j++)
					{
						if(j != k)
							mn = min(mn, mas[nv].cost[j]);
					}

					mas[v].cost[k] += mn;
				}
			}

			pp[mas[v].p]--;

			if(pp[mas[v].p] == 0)
				q[head++] = mas[v].p;
		}

		int mn = 2e9;

		for(int i = 1; i < buben; i++)
		{
			mn = min(mn, mas[1].cost[i]);
		}

		for(int i = 1; i <= n; i++)
		{
			mas[i].ch.clear();
			pp[i] = 0;
		}
		
		printf("Case #%d: %d\n", t, mn);
	}
    
#ifndef ONLINE_JUDGE
	fprintf(stderr, "\n%0.3lf\n", (clock() - start) * 1.0 / CLOCKS_PER_SEC);
#endif

	return 0;
}
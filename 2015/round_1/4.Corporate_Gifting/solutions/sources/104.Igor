import java.awt.Point;
import java.io.*;
import java.util.*;
import java.math.BigInteger;
import static java.lang.Math.*;
import static java.lang.Math.min;
import static java.lang.Math.max;
import static java.math.BigInteger.*;
import static java.util.Arrays.*;


public class Main{

    long tB = System.currentTimeMillis();
    
    void run(){
        Locale.setDefault(Locale.US);
        boolean oj;
        oj = false;
//        try {
//            oj = System.getProperty("MYLOCAL") == null;
//        } catch (Exception e) {
//            oj = true;
//        }
        try{
            if( oj ){
//                sc  = new FastScanner( new InputStreamReader(System.in  ) );
//                out = new PrintWriter(   new OutputStreamWriter(System.out) );
                String str = "epic";
                sc  = new FastScanner(new FileReader(str+".in") );
                out = new PrintWriter(new FileWriter(str+".out") );
            } else{
                sc  = new FastScanner(new FileReader( "C://corporate_gifting.txt") );
                //sc  = new FastScanner(new FileReader( "input.txt") );
                out = new PrintWriter(new FileWriter("output.txt") );
            }
        } catch (Exception e) {
            System.exit(-1);
        }
        
        solve();
        if( !oj ) System.err.println( "Time: " + (System.currentTimeMillis()-tB)/1e3 );
        out.flush();
    }

    class FastScanner{
        BufferedReader br;
        StringTokenizer st = new StringTokenizer("");
        FastScanner( InputStreamReader a ){
            br = new BufferedReader(a);
        }
        FastScanner( FileReader a ){
            br = new BufferedReader(a);
        }
        String next(){
            while( !st.hasMoreTokens() )
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    return null;
                }
            return st.nextToken();
        }
        String readLine(){
            try {
                return br.readLine();
            } catch (Exception e) {
                return null;
            }
        }
        int nextInt(){ return Integer.parseInt(next()); }
        long nextLong(){ return Long.parseLong(next()); }
    }

    FastScanner sc;
    PrintWriter out;
    PrintStream err = System.err;



    public static void main(String[] args){
        new Main().run();
//        new Thread( null, new Runnable() {
//            @Override
//            public void run() {
//                new Main().run();
//            }
//            }, "LOL", 256L * 1024 * 1024 / 2 ).run();
//        }, "LOL", 2000 * 1024 * 1024 ).run();
    }



    void TLE(){ for(;;); }

    void MLE(){
        int[][] arr = new int[1024 * 1024][];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = new int[1024 * 1024];
    }

    void myAssert(boolean OK){
        if( !OK ) MLE();
    }
    
    void exit( int val ){
        out.flush();
        out.close();
        System.exit(val);
    }
    
    double fuct(int n){ myAssert(0<=n); return n<=1? 1 : n * fuct(n-1); }
    
    double C(int m, int n){ myAssert(m<=n); return fuct(n)/fuct(m)/fuct(n-m); }
    
    //////////////////////////////////////////////////////////////////////////////////////////

    final long inf = Long.MAX_VALUE / 10;
    int n;
    ArrayList<Integer>[] gr;
    long[][] dp, notDP;
    int colors;
    
    void dfs( final int v ){
        for(int to : gr[v])
            dfs(to);
        
        for (int c = 1; c <= colors; c++) {
            dp[v][c] = c;
            for(int to : gr[v]) dp[v][c] += notDP[to][c];
        }
        
        long[] minL = new long[colors+5], minR = new long[colors+5];
        fill(minL,inf);
        fill(minR,inf);
        for (int c = 1; c <= colors; c++) minL[c] = min( dp[v][c], minL[c-1] );
        for (int c = colors; 1 <= c; c--) minR[c] = min( dp[v][c], minR[c+1] );
        for (int c = 1; c <= colors; c++) notDP[v][c] = min( minL[c-1], minR[c+1] );
    }
    
    long solveTest(){
        n = sc.nextInt();
        gr = new ArrayList[n+1];
        for(int v = 1; v <= n; ++v) gr[v] = new ArrayList<>();
        
        sc.nextInt();
        for(int v = 2; v <= n; ++v) gr[sc.nextInt()].add(v);
        
        colors = min(20, n); // 10!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        dp    = new long[n+1][colors+1];
        notDP = new long[n+1][colors+1];
        dfs(1);

        long ans = min( notDP[1][1], dp[1][1] );
        return ans;
    }
    
    void solve(){
        int tests = sc.nextInt();
        for (int i = 0; i < tests; i++) {
            err.printf("Case #%d\n", i+1 );
            out.printf("Case #%d: %d\n", i+1, solveTest() );
        }
    }
    
  
}



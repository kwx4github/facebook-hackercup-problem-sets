//
// Bhumik Shah
//    IIIT Hyderabad
//
#include <bits/stdc++.h>

#define mod 1000000007
#define f(i,a,b) for(i=a;i<b;i++)
#define ll long long
#define clr(a) memset(a,0,sizeof(a))
#define out(n) cout<<n<<"\n";
#define in(n) cin>>n;

using namespace std;
long long int ans=0;
vector<list<int> > graph(200002);
int outdegree[200002];
vector<pair<int,int> > heap;
int heap_position[200002];
int gift[200002];
int parent[200002];

int maxi(int a,int b)
{
	if(heap[a].second<heap[b].second)
	{
		return a;
	}
	else
	{
		return b;
	}
}

void insert_in_heap(pair<int,int> p)
{
	if(heap.empty())
	{
		heap.push_back(make_pair(INT_MIN,INT_MIN));
		heap.push_back(p);
		heap_position[p.first]=heap.size()-1;
	}
	else
	{
		heap.push_back(p);
		heap_position[p.first]=heap.size()-1;
		int index=heap.size()-1,temp=0;

		while(heap[index].second<heap[index/2].second)
		{
			heap_position[heap[index].first]=index/2;
			heap_position[heap[index/2].first]=index;
			swap(heap[index],heap[index/2]);	
			index=index/2;
		}
	}

}

void update_heap(int index)
{
	while(heap[index].second<heap[index/2].second)
	{
		heap_position[heap[index].first]=index/2;
		heap_position[heap[index/2].first]=index;
		swap(heap[index],heap[index/2]);
		index=index/2;
	}
}


void delete_from_heap()
{
	int l=0;
	if(heap.size()==2)
	{
		pair<int,int> elem=heap[heap.size()-1];
		heap_position[elem.first]=-1;
		heap.pop_back();
		long long int rs=1;
		list<int>::iterator it1=graph[elem.first].begin();
		vector<int> temp1;
		while(it1!=graph[elem.first].end())
		{
			temp1.push_back(gift[(*it1)]);
			it1++;
		}
		sort(temp1.begin(),temp1.end());
		if(temp1.empty())
		{
			rs=1;
			ans=ans+rs;
			gift[elem.first]=rs;
		}
		else
		{
			rs=1;
			for(l=0;l<temp1.size();l++)
			{
				if(rs==temp1[l])
				{
					rs++;
				}
			}
			ans=ans+rs;
			gift[elem.first]=rs;
		}
		temp1.clear();
		//cout<<elem.first<<" "<<rs<<"\n";
	}
	else
	{
		swap(heap[1],heap[heap.size()-1]);
		swap(heap_position[heap[1].first],heap_position[heap[heap.size()-1].first]);
		pair<int,int> elem=heap[heap.size()-1];
		int i=0;
		heap.pop_back();
		int l=heap.size();
		int index=1;
		while(1)
		{
			if((2*index)<l)
			{
				if((2*index+1)<l)
				{
					int temp_index=maxi(2*index,2*index+1);
					if(heap[temp_index].second<heap[index].second)
					{
						heap_position[heap[index].first]=temp_index;
						heap_position[heap[temp_index].first]=index;
						swap(heap[index],heap[temp_index]);
						index=temp_index;
					}
					else
					{
						break;
					}
				}
				else
				{
					if(heap[index].second>heap[2*index].second)
					{
						heap_position[heap[index].first]=2*index;
						heap_position[heap[2*index].first]=index;
						swap(heap[index],heap[2*index]);
						index=2*index;
					}
					else
					{
						break;
					}
				}
			}
			else
			{
				break;
			}
		}

		heap[heap_position[parent[elem.first]]].second--;

		update_heap(heap_position[parent[elem.first]]);
		heap_position[elem.first]=-1;
		long long int rs=1;

		list<int>::iterator it1=graph[elem.first].begin();
		vector<int> temp1;
		while(it1!=graph[elem.first].end())
		{
			temp1.push_back(gift[(*it1)]);
			it1++;
		}
		sort(temp1.begin(),temp1.end());
		if(temp1.empty())
		{
			rs=1;
			ans=ans+rs;
			gift[elem.first]=rs;
		}
		else
		{
			rs=1;
			for(l=0;l<temp1.size();l++)
			{
				if(rs==temp1[l])
				{
					rs++;
				}
			}
			ans=ans+rs;
			gift[elem.first]=rs;
		}
		//cout<<elem.first<<" "<<rs<<"\n";
		temp1.clear();
		return;
	}
}

int main()
{
	int test=0,cnt=0;
	scanf("%d",&test);
	cnt=1;
	while(test>0)
	{
		int num=0,i=0,k=0;
		scanf("%d",&num);
		parent[1]=-1;
		for(i=0;i<num;i++)
		{
			scanf("%d",&k);
			if(k!=0)
			{
				graph[k].push_back(i+1);
				parent[i+1]=k;
				outdegree[k]++;
			}
		}
		for(i=1;i<=num;i++)
		{
			insert_in_heap(make_pair(i,outdegree[i]));
		}
		while(heap.size()!=1)
		{
			delete_from_heap();
		}
		for(i=0;i<200002;i++)
		{
			graph[i].clear();
		}
		heap.clear();
		clr(outdegree);
		clr(heap_position);
		clr(gift);
		clr(parent);
		printf("Case #%d: %lld\n",cnt,ans);
		ans=0;
		cnt++;
		test--;
	}
	return 0;
}

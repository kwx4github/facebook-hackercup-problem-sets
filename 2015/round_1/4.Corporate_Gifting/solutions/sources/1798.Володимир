#pragma comment(linker, "/STACK:133217728")
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <stdexcept>
#include <functional>
#include <math.h>
using namespace std;

typedef pair<int, int> PII;
typedef vector<int> VI;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(int i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair
const int INF=1e+9;
const int MAX=200000;

VI C[MAX];
PII DP[2][MAX];

class Task
{
public:
	int n;
	/*VI C[MAX];
	PII DP[2][MAX];*/

private:
	void update(int ver, PII Val)
	{
		if (Val<DP[0][ver])
		{
			DP[1][ver]=DP[0][ver];
			DP[0][ver]=Val;
		}
		else
		{
			if (Val<DP[1][ver])
				DP[1][ver]=Val;
		}
	}
	void dfs(int v)
	{
		if (C[v].size()==0)
		{
			DP[0][v]=MP(1,1);
			DP[1][v]=MP(2,2);
			return;
		}
		FOR(i,0,C[v].size())
		{
			dfs(C[v][i]);
		}
		map<int, int> temp;
		int sum=0;
		FOR(i,0,C[v].size())
		{
			sum+=DP[0][C[v][i]].first;
			temp[DP[0][C[v][i]].second]+=DP[1][C[v][i]].first-DP[0][C[v][i]].first;
		}

		for(auto it=temp.begin(); it!=temp.end(); ++it)
		{
			update(v, MP(sum+it->second+it->first,it->first));
		}

		int was=0;
		int should=1;
		for(auto it=temp.begin(); it!=temp.end() && was<2; ++should)
		{
			if (should!=(it->first))
			{	
				update(v, MP(sum+should,should));
				++was;
			}
			else ++it;
		}
		while (should<=n && was<2)
		{
			update(v, MP(sum+should,should));
			++was;
			++should;
		}
	}

public:
	Task(int N)
	{
		n=N;
		FOR(i,0,n)
		{
			C[i].clear();
			DP[0][i]=MP(INF, -1);
			DP[1][i]=MP(INF, -1);
		}
	}

	int solve()
	{
		dfs(0);
		return DP[0][0].first;
	}
};

int main()
{
	freopen("corporate_gifting.txt","r",stdin);
	freopen("output.txt","w",stdout);
	
	int a, T, n;
	scanf("%d",&T);

	FOR(t,1,T+1)
	{
		scanf("%d",&n);
		Task task(n);
		scanf("%d",&a);
		FOR(i,1,n)
		{
			scanf("%d",&a);
			C[a-1].push_back(i);
		}
		cout << "Case #" << t << ": " << task.solve() << endl; 
		cerr << t << " out of " << T << " done! \n" << endl;
	}

	return 0;
}
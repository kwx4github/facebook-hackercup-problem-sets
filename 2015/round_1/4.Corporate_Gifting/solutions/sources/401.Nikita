#include<cstdio>
#include<algorithm>
#include<iostream>
#include<cstdlib>
#include<cassert>
#include<cstring>
#include<vector>
#include<string>
#include<cmath>
#include<ctime>
#include<set>
#include<map>
 
using namespace std;
 
#define sz(c) (int)(c).size()
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
 
#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
 
#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif
 
#define FNAME "test"

const int INF = 1e9;
const int Maxn = 200005;
const int Log = 20;

int T, n, min1, d[Maxn][Log + 3], pr[Maxn][Log + 3], suf[Maxn][Log + 3], p;
vector <int> c[Maxn]; 

void dfs (int v)
{
	for (int i = 0; i < (int) c[v].size(); i++)
		dfs(c[v][i]);
	d[v][0] = INF;
	d[v][Log + 1] = INF;
	for (int i = 1; i <= Log; i++)
	{
	    d[v][i] = i;
		for (int j = 0; j < (int) c[v].size(); j++)
			d[v][i] += min(pr[c[v][j]][i - 1], suf[c[v][j]][i + 1]);
    }
   	pr[v][0] = d[v][0];
   	for (int i = 1; i <= Log + 1; i++)
   		pr[v][i] = min(pr[v][i - 1], d[v][i]);
	suf[v][Log + 1] = d[v][Log + 1];
	for (int i = Log; i >= 0; i--)
		suf[v][i] = min(suf[v][i + 1], d[v][i]);    
}

int main()
{
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			scanf("%d", &p);
			if (p != 0)
				c[p - 1].push_back(i);
		}
		dfs(0);
		min1 = INF;
		for (int i = 0; i <= Log + 1; i++)
			min1 = min(min1, d[0][i]);
		printf("Case #%d: %d\n", t + 1, min1);			
		for (int i = 0; i < n; i++)
			c[i].clear();
	}    
    return 0;
}
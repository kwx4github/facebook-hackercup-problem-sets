#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:367777216")
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

typedef long long LL;
const int sq = sqrt(2e5) + 1000;

struct state_t
{
	int opt;
	LL v1, v2;
	state_t() : opt(-1), v1(-1), v2(-1) {}

	void upd(int idx, LL val)
	{
		if (val <= v1)
			v2 = v1, opt = idx, v1 = val;
		else if (val <= v2)
			v2 = val;
		if (v1 == -1)
			opt = idx, v1 = val;
		else if (v2 == -1)
			v2 = val;
	}
};

vector< vector<int> > g;
vector<state_t> dp;

void dfs(int u)
{
	if (g[u].empty())
	{
		dp[u].opt = 1;
		dp[u].v1 = 1;
		dp[u].v2 = 2;
	}
	else
	{
		for (int i = 0; i < g[u].size(); ++i)
			dfs(g[u][i]);
		for (int cur = 1; cur <= sq; ++cur)
		{
			LL val = cur;
			for (int i = 0; i < g[u].size(); ++i)
			{
				int v = g[u][i];
				if (dp[v].opt != cur)
					val += dp[v].v1;
				else
					val += dp[v].v2;
			}
			dp[u].upd(cur, val);
		}
	}
}

LL solve()
{
	int n; scanf("%d", &n);
	g.assign(n, vector<int>());
	dp.assign(n, state_t());
	for (int i = 0; i < n; ++i)
	{
		int p; scanf("%d", &p);
		if (p)
			g[p - 1].push_back(i);
	}
	dfs(0);
	return dp[0].v1;
}

int main()
{

	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	int t; scanf("%d", &t);
	for (int i = 1; i <= t; ++i)
	{
		cerr << i << endl;
		printf("Case #%d: %I64d\n", i, solve());
	}
	return 0;
}
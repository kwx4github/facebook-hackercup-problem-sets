import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;


public class E {
	@SuppressWarnings("unchecked")
	public static void main(String arg[]) throws FileNotFoundException {
//		
		System.setIn(new FileInputStream(new File("D.in")));	
		System.setOut(new PrintStream(new File("D.out")));
		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(new BufferedWriter(
				new OutputStreamWriter(System.out)));
		int tcases = sc.nextInt();
		int i = 0;
		while(i++!=tcases)
		{
			out.print("Case #"+i+": ");
			int n = sc.nextInt();
			int manager[] = new int[n+1];
			long count[] = new long[n+1];
			long tCount[] = new long[n+1];
			long  acount[] = new long[n+1];
			long tAcount[] = new long[n+1];
			ArrayList<Integer> subordinates[] = new ArrayList[n+1];
			ArrayList<Integer> row[] = new ArrayList[n+1];
			int j = -1;
			while(++j<=n)
			{
				subordinates[j] = new ArrayList<>();
				row[j] = new ArrayList<>();
			}
			
			for(j = 1; j <= n; j++)
			{
	            manager[j] = sc.nextInt();
	            subordinates[manager[j]].add(j);
	        }
			
			int level = 0;
			row[0].add(1);
			for(j = 0; j < n-1; j++)
                for(Integer k : row[j])
                    for(Integer l: subordinates[k])
                        row[j+1].add(l);
			
			while(!(row[level].size()==0))
				level++;
			
			while(level--!=0)
			{
	            for(Integer p: row[level])
	            {
	                if(subordinates[p].size()==0)
	                {
	                    count[p] = 1;
	                    tCount[p] = 1;
	                    acount[p] = 2;
	                    tAcount[p] = 2;
	                }
	                else
	                {
	                    count[p] = 1;
	                    tCount[p] = 1;
	                    tAcount[p] = 0;
	                    for(Integer a: subordinates[p])
	                        if(count[a] != 1)
	                            tCount[p] = tCount[p] + tCount[a];
	                        else
	                        	tCount[p] = tCount[p] + tAcount[a];
	                    boolean flag = true;
	                    for(int k = 2; k <= n && flag ; k++)
	                    {
	                        long newCount = k;
	                        for(Integer a: subordinates[p])
	                            if(count[a] != k)
	                                newCount += tCount[a];
	                            else
	                            	newCount += tAcount[a];
	                        if(newCount <= tCount[p])
	                        {
	                            acount[p] = count[p];
	                            tAcount[p] = tCount[p];
	                            count[p] = k;
	                            tCount[p] = newCount;
	                        }
	                        else if(newCount < tAcount[p] || tAcount[p] == 0)
	                        {
	                            tAcount[p] = newCount;
	                            acount[p] = k;
	                        }
	                        else
	                        	flag = false;
	                    }
	                }
	            }
			}
			out.println(tCount[1]);
		}
		out.flush();
		out.close();
		sc.close();
	}
}

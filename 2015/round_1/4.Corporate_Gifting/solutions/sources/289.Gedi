#include <cstdio>
#include <cassert>
#include <queue>
#include <vector>
using std::queue;
using std::vector;

const int MAXN = 200002;
const int INF = 0x3f3f3f3f;

int n;
int deg[MAXN], par[MAXN];
vector<int> f[MAXN];


void Init() {
  assert(scanf("%d", &n) == 1);
  for (int i = 0; i <= n; ++i)
    deg[i] = 0;
  for (int i = 1; i <= n; ++i) {
    assert(scanf("%d", par + i) == 1);
    deg[par[i]]++;
  }
  for (int i = 0; i <= n; ++i) {
    f[i].clear();
    f[i].resize(deg[i] + 3);
  }
}

void Update(int p) {
  int v1 = INF, v2 = INF;
  size_t c1 = 0;
  for (size_t i = 1; i < f[p].size(); ++i) {
    f[p][i] += i;
    if (f[p][i] < v1) {
      v2 = v1;
      v1 = f[p][i];
      c1 = i;
    } else if (f[p][i] < v2) {
      v2 = f[p][i];
    }
  }
  int fa = par[p];
  for (size_t j = 0; j < f[fa].size(); ++j) {
    if (c1 == j) {
      f[fa][j] += v2;
    } else {
      f[fa][j] += v1;
    }
  }
}

void Work() {
  queue<int> que;
  for (int i = 1; i <= n; ++i)
    if (deg[i] == 0)
      que.push(i);
  while (!que.empty()) {
    int p = que.front();
    que.pop();
    if (!p) continue;
    Update(p);
    if (--deg[par[p]] == 0)
      que.push(par[p]);
  }
  printf("%d\n", f[0][0]);
}

int main() {
  int cases;
  assert(scanf("%d", &cases) == 1);
  for (int i = 1; i <= cases; ++i) {
    printf("Case #%d: ", i);
    Init();
    Work();
  }
  return 0;
}

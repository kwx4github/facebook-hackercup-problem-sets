import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.*;
import java.io.InputStream;

public class Main {

    public static void main(String[] args) throws Exception {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);


        Sports solver = new Sports();

        //while (solver.solve(1, in, out)) {

        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            solver.solve(i+1, in, out);
        }

        out.close();

    }
}
class Sports {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        int N = in.nextInt();
        Child[] childs = new Child[N];
        in.nextInt();
        for (int i = 1; i < N; i++) {
            int parent = in.nextInt()-1;
            Child child = new Child(i);
            child.sibling = childs[parent];
            childs[parent] = child;
        }
        int[][] cheap = new int[N][3];
        for (int i = N-1; i >= 0; i--) {
            cheap[i][0] = 1;
            cheap[i][1] = 2;
            cheap[i][2] = 3;
            Child child = childs[i];
            while (child != null) {
                cheap[i][0] += Math.min(cheap[child.id][1], cheap[child.id][2]);
                cheap[i][1] += Math.min(cheap[child.id][0], cheap[child.id][2]);
                cheap[i][2] += Math.min(cheap[child.id][0], cheap[child.id][1]);
                child = child.sibling;
            }
        }

        int ans = Math.min(cheap[0][0], cheap[0][1]);
        ans = Math.min(ans, cheap[0][2]);

        out.println(ans);
    }
}

class Child {
    int id;
    Child sibling = null;
    public Child(int id) {
        this.id = id;
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }
}

/*
class FaceBook {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        int M = in.nextInt();
        int N = in.nextInt();
        char[][] maze = new char[M][N];
        int sx=-1,sy=-1,gx=-1,gy=-1;
        for (int i = 0; i < M; i++) {
            String s = in.next();
            for (int j = 0; j < N; j++) {
                maze[i][j] = s.charAt(j);
                if (maze[i][j] == 'S') {
                    sx = i;
                    sy = j;
                } else if (maze[i][j] == 'G') {
                    gx = i;
                    gy = j;
                }
            }
        }
        boolean[][][] visit = new boolean[M][N][4];
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(sx);
        stack.push(sy);
        stack.push(0);
        while (!stack.isEmpty()) {
            int turn = stack.pop();
            int y = stack.pop();
            int x = stack.pop();
            for (int dir = 0; dir < 4; dir++) {
                int nx = x + dx[dir];
                int ny = y + dy[dir];
                if (nx >= 0 && nx < M && ny >= 0 && ny < N && (maze[nx][ny] == '.' || maze[nx][ny] == 'S' || maze[nx][ny] == 'G')) {
                    if (visit[nx][ny][(turn+1)%4]) continue;
                    visit[nx][ny][(turn+1)%4] = true;
                    if (isValid(nx,ny,(turn+1)%4,maze)) {
                        if (maze[nx][ny] == 'G') {
                            out.println(turn+1);
                            return;
                        }
                        stack.push(nx);
                        stack.push(ny);
                        stack.push(turn+1);
                    }
                }
            }
        }
        out.println("impossible");
    }

    char lazer[] = new char[]{'<','^','>','v'};

    int[] dx = new int[]{0,-1,0,1};
    int[] dy = new int[]{-1,0,1,0};
    private boolean isValid(int x, int y, int turn, char[][] maze) {
        for (int dir = 0; dir < 4; dir++) {
            int lidx = (dir+2-(turn%4)+4)%4;
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            while (nx >= 0 && nx < maze.length && ny >= 0 && ny < maze[0].length) {
                if (maze[nx][ny] == lazer[lidx]) return false;
                if (maze[nx][ny] != '.' && maze[nx][ny] != 'S' && maze[nx][ny] != 'G') {
                    break;
                }
                nx = nx + dx[dir];
                ny = ny + dy[dir];
            }
        }
        return true;
    }
}
*/
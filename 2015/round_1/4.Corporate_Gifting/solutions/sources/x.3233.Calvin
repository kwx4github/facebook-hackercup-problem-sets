#include <iostream>
#include<vector>
#include<cstdio>
#include<bitset>
#include<queue>
#include<cstring>

using namespace std;
typedef vector<int> vi;
vector<vi> children;
const int MAXN = 200005;
bitset<MAXN> started;
deque<int> Q;
int bestVal[MAXN];
int bestColor[MAXN];
int secBestVal[MAXN];
//int secBestColor[MAXN];
int options[MAXN];
int main()
{
    FILE *in, *out;
    in = fopen("corporate_gifting.txt", "r");
    out = fopen("corporate_gifting_OUT.txt", "w");
    int T;
    fscanf(in,"%d",&T);
    for(int q = 1; q <= T; q++){
        children.erase(children.begin(),children.end());
        started.reset();
        int N;
        fscanf(in,"%d",&N);
        for(int i=0;i<N;i++){
            vi l;
            children.push_back(l);
        }
        for(int i=0;i<N;i++){
            int a;
            fscanf(in, "%d", &a);
            a--;//ZERO BASED INDEXING for people
            if(a!= -1)children.at(a).push_back(i);
        }
        Q.push_front(0);
        while(!Q.empty()){
            int T = Q.front(); Q.pop_front();
            //cout << T << " ";
            if(children.at(T).size() == 0){
                bestColor[T] = 1; bestVal[T] = 1; secBestVal[T] = 2;
                continue;
            }
            if(started[T]){
                vi t = children.at(T);
                int bVal = MAXN; int bColor;
                int sVal = MAXN;
                memset(options,-1,sizeof(options));
                vector<int> colors;
                int baseEst = 0;
                for(vector<int>::iterator i = t.begin(); i != t.end(); ++i){
                    int x = *i;
                    int co = bestColor[x];
                    baseEst += bestVal[x];
                    if(options[co] == -1){
                        colors.push_back(co);
                        options[co] = co + secBestVal[x] - bestVal[x];
                    }
                    else{
                        options[co] += secBestVal[x] - bestVal[x];
                    }
                }
                int lo = 1;
                while(options[lo] != -1)lo++;
                bVal = lo; bColor = lo;
                for(vector<int>::iterator i = colors.begin(); i != colors.end(); ++i){
                    int co = *i;
                    if(options[co] < bVal){
                        sVal = bVal;
                        bVal = options[co];
                        bColor = co;
                    }
                    else if(options[co] < sVal){
                        sVal = options[co];
                    }
                }
//                cout << T << " " << baseEst + bVal << "\n";
                bestColor[T] = bColor;
                bestVal[T] = baseEst + bVal;
                secBestVal[T] = baseEst + sVal;
            }
            else{
                started[T] = true;
                Q.push_front(T);
                vi t = children.at(T);
                for(vector<int>::iterator i = t.begin(); i != t.end(); ++i){
//                    cout << *i << " ";
                    Q.push_front(*i);
                }
            }

        }
//        for(vector<vi>::iterator it = children.begin(); it != children.end(); ++it){
//            vi t = *it;
//            for(vector<int>::iterator i = t.begin(); i != t.end(); ++i){
//                cout << "!";
//            }
//        }
//        for(int i=0;i<N;i++){
//            vi t = children.at(i);
//            cout << i << ": ";
//            for(vector<int>::iterator i = t.begin(); i != t.end(); ++i){
//                cout << *i << " ";
//            }
//            cout << "\n";
//        }
        int ans = bestVal[0];
        fprintf(out,"Case #%d: %d\n",q,ans);
    }
}

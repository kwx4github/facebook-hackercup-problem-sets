#include <iostream>
#include <fstream>
#include <vector>
#include <sys/resource.h>
using namespace std;

const int MAX_PRICE = 200;

vector<int> sons[200010];
int d[MAX_PRICE+3][200010];

void dfs(int v) {
    for (int i = 1; i <= MAX_PRICE; ++i) {
        d[i][v] = i;
    }
    if (sons[v].size() == 0) {
        return;
    }

    for (int i = 0; i < sons[v].size(); ++i) {
        int u = sons[v][i];
        dfs(u);
        int m1 = 2000000000, m2 = 2000000000;
        int i1;//, i2;
        for (int j = 1; j <= MAX_PRICE; ++j) {
            if (d[j][u] < m1) {
                m2 = m1;
                m1 = d[j][u];
                //i2 = i1;
                i1 = j;
            } else if (d[j][u] < m2) {
                m2 = d[j][u];
                //i2 = j;
            }
        }
        for (int i = 1; i <= MAX_PRICE; ++i) {
            if (i1 == i) {
                d[i][v] += m2;
            } else {
                d[i][v] += m1;
            }
//            int c = 2000000000;
//            for (int j = 1; j <= MAX_PRICE; ++j) {
//                if (i != j) {
//                    c = min(c, d[j][u]);
//                }
//            }
//            d[i][v] += c;
        }

    }
}

int main() {
    const rlim_t kStackSize = 1000000000;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }

    ifstream inf("input.txt");
    ofstream outf("output.txt");
    int T; inf >> T;
    for (int tt = 1; tt <= T; ++tt) {
        outf << "Case #" << tt << ": ";
        int N; inf >> N;
        for (int i = 0; i < N; ++i) {
            int p; inf >> p;
            if (i > 0) {
                sons[p - 1].push_back(i);
            }
        }
        dfs(0);
        int ans = 2000000000;
        for (int i = 1; i <= MAX_PRICE; ++i) {
            ans = min(ans, d[i][0]);
        }
        outf << ans << '\n';

        for (int i = 0; i < N; ++i) {
            sons[i].clear();
        }
        //memset(d, 0, sizeof(d));

    }
}


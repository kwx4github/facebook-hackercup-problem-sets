#include <iostream>
#include <vector>
#include <queue>
#include <cstdio>
using namespace std;

const int N = 200020;
const int M = 450;
vector<int> vec[N];
vector<int> rev[N];
int deg[N];
int dp[N][2];
int id[N][2];
int n, m;

int solve() {
    queue<int> que;
    for (int i = 1; i <= n; i++) {
        if (deg[i] == 0) que.push(i);
    }
    m = min(n + 1, M);
    while (!que.empty()) {
        int u = que.front(); que.pop();
        dp[u][0] = dp[u][1] = INT_MAX;
        for (int i = 1; i < m; i++) {
            int val = i;
            for (int j = 0; j < vec[u].size(); j++) {
                int v = vec[u][j];
                if (id[v][0] != i) val += dp[v][0];
                else val += dp[v][1];
            }
            if (val < dp[u][0]) {
                dp[u][1] = dp[u][0];
                id[u][1] = id[u][0];
                dp[u][0] = val;
                id[u][0] = i;
            } else if (val < dp[u][1]) {
                dp[u][1] = val;
                id[u][1] = i;
            }
        }
        for (int i = 0; i < rev[u].size(); i++) {
            int v = rev[u][i];
            if (--deg[v] == 0) que.push(v);
        }
    }
    return dp[1][0];
}

int main() {
    int T, Case = 1;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &n);
        memset(deg, 0, sizeof(deg));
        for (int i = 0; i <= n; i++) vec[i].clear(), rev[i].clear();
        for (int i = 1, fa; i <= n; i++) {
            scanf("%d", &fa);
            vec[fa].push_back(i);
            rev[i].push_back(fa);
            deg[fa]++;
        }
        int ans = solve();
        cout << "Case #" << Case++ << ": " << ans << endl;
    }
    return 0;
}

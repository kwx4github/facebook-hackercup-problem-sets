import std.stdio, std.range, std.conv, std.algorithm, std.string;

const int MN = 200200;
const int MK = 30;
const long MD = 10^^9+7;

int[MK][] dp;
int[MK] buf;
int[][] g;


void solve(int p, int b) {
    foreach (d; g[p]) {
        if (d == b) continue;
        solve(d, p);
    }
    foreach (i; 1..MK) {
        buf[i] = i;
    }
    foreach (d; g[p]) {
        if (d == b) continue;
        foreach (i; 1..MK) {
            buf[i] += dp[d][i];
        }
    }
    int mi = 10^^9;
    foreach (i; 1..MK) {
        dp[p][i] = mi;
        mi = min(mi, buf[i]);
    }
    mi = 10^^9;
    foreach_reverse (i; 1..MK) {
        dp[p][i] = min(dp[p][i], mi);
        mi = min(mi, buf[i]);
    }
}

int main() {
    int T = readln.strip.to!int;
    dp.length = MN;
    foreach (t; 0..T) {
        int n = readln.strip.to!int;
        g = new int[][n];
        int[] d = readln.split.map!(s => s.to!int - 1).array;
        foreach (i; 1..n) {
            g[d[i]] ~= i;
        }
        solve(0, -1);
        int res = 10^^9;
        foreach (i; 1..30) {
            res = min(res, dp[0][i]);
        }
        writeln("Case #", t+1, ": ", res);
    }
    return 0;
}
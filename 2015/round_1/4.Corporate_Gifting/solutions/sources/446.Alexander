/*
ID: espr1t
LANG: C++
TASK: Corporate Gifting
KEYWORDS: Medium, DP
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <algorithm>
#include <vector>
#include <queue>

using namespace std;
FILE *in; FILE *out;

const int MAX = 200004;
const int MM = 42;
const int INF = 1000000001;

int n;
int parent[MAX];
vector <int> v[MAX];
int dyn[MAX][MM];

int eval() {
    queue <int> q;
    int deg[MAX];
    for (int i = 0; i < n; i++) {
        deg[i] = (int)v[i].size();
        if (deg[i] == 0)
            q.push(i);
    }

    memset(dyn, 0, sizeof(dyn));
    while (!q.empty()) {
        int node = q.front(); q.pop();
        if (--deg[parent[node]] == 0) {
            q.push(parent[node]);
        }

        for (int price = 1; price < MM; price++) {
            dyn[node][price] = price;
            for (int i = 0; i < (int)v[node].size(); i++) {
                int best = INF;
                for (int p = 1; p < MM; p++) if (p != price) {
                    best = min(best, dyn[v[node][i]][p]);
                }
                dyn[node][price] += best;
            }
        }
    }
    int ans = dyn[0][1];
    for (int i = 2; i < MM; i++)
        ans = min(ans, dyn[0][i]);
    return ans;
}

void solveTest(int testCase) {
	for (int i = 0; i < MAX; i++)
	    v[i].clear();
	fscanf(in, "%d", &n);
	for (int i = 0; i < n; i++) {
	    fscanf(in, "%d", &parent[i]);
	    parent[i]--;
	    if (parent[i] >= 0)
	        v[parent[i]].push_back(i);
	}
	fprintf(out, "Case #%d: %d\n", testCase, eval());
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("CorporateGifting.in", "rt"); out = fopen("CorporateGifting.out", "wt");
	
	unsigned sTime = clock();

	int numTests;
	fscanf(in, "%d", &numTests);
    const int BUFF = 1048576;
	static char buff[BUFF]; fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

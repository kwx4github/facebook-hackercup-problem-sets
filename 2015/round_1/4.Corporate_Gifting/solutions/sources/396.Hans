#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>

using namespace std;

const int OPT = 32;
int dp[200001][OPT];
vector<int> p;
vector<vector<int>> g;


int rec(int i, int j){
    int &res = dp[i][j];
    if(res != 0)
        return res;
    
    res = j + 1;
    
    for(int child : g[i]){
        int best = numeric_limits<int>::max();
        for(int k=0; k<OPT; ++k){
            if(k != j){
                best = min(best, rec(child, k));
            }
        }
        res += best;
    }
    
    return res;
}

void comp(int tc){
	int n;
    cin >> n;
    p.assign(n+1, 0);
    g.assign(n+1, vector<int>());
    
    for(int i=1; i<=n; ++i){
        cin >> p[i];
        g[p[i]].push_back(i);
    }

	for (int i = 0; i <= n; ++i){
		for (int j = 0; j < OPT; ++j){
			dp[i][j] = 0;
		}
	}
    
	int ans = rec(1, 0);
	for (int i = 1; i < OPT; ++i){
		ans = min(ans, rec(1, i));
	}

    cout << "Case #" << tc << ": " << ans << endl;
    
}

int main(){
    int T;
    cin >> T;
    for(int i=1; i<=T; ++i){
        comp(i);
    }
}
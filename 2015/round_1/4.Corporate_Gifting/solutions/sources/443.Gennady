#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <memory.h>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const pair <int, int> inf = make_pair((int)2e9, -1);
const int N = 400010;
const int MAX = 30;

pair <int, int> f[N][MAX];
vector <int> g[N];

void solve(int v) {
  for (int c = 1; c < MAX; c++) {
    f[v][c] = make_pair(c, c);
  }
  int sz = g[v].size();
  for (int j = 0; j < sz; j++) {
    int u = g[v][j];
    solve(u);
    for (int c = 1; c < MAX; c++) {
      pair <int, int> best = inf;
      for (int uc = 1; uc < MAX; uc++) {
        if (c != uc && f[u][uc] < best) {
          best = f[u][uc];
        }
      }
      f[v][c] = make_pair(f[v][c].first + best.first, max(f[v][c].second, best.second));
    }
  }
}

int main() {
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  int tt;
  scanf("%d", &tt);
  for (int qq = 1; qq <= tt; qq++) {
    printf("Case #%d: ", qq);
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
      g[i].clear();
    }
    for (int i = 1; i <= n; i++) {
      int foo;
      scanf("%d", &foo);
      if (foo != 0) {
        g[foo].push_back(i);
      }
    }
    solve(1);
    pair <int, int> best = inf;
    for (int c = 1; c < MAX; c++) {
      if (f[1][c] < best) {
        best = f[1][c];
      }
    }
    printf("%d\n", best.first);
    cerr << "test " << qq << " ok, sum = " << best.first << ", I needed " << best.second << " colors" << endl;
  }
  return 0;
}

#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>
#define pb push_back
#define M 2000010
#define lim 50
#define Inf 1e9
using namespace std;
vector<int> graph[M];
int cost[M][lim+1],id1[M],id2[M],node,child,mn;
queue<int> q;
vector<int> v;
int main()
{
    freopen("corporate_gifting.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int i,j,k,l,m,n,x,t,Case;
    int ans;
    scanf("%d",&t);
    Case=0;
    while(t--)
    {
        Case++;
        scanf("%d",&n);
        for(i=0;i<n;i++)
        {
            scanf("%d",&x);
            graph[x].pb(i+1);
        }
        q.push(1);
        v.pb(1);
        while(!q.empty())
        {
            node=q.front();
            q.pop();
            for(i=0;i<graph[node].size();i++)
            {
                child=graph[node][i];
                q.push(child);
                v.pb(child);
            }
        }
        while(v.size()!=0)
        {
            node=v.back();
            if(graph[node].size()==0)
            {
                for(i=1;i<=lim;i++)
                {
                    cost[node][i]=i;
                }
            }
            else
            {
                for(i=0;i<graph[node].size();i++)
                {
                    child=graph[node][i];
                    mn=Inf;
                    id1[i]=-1;
                    for(j=1;j<=lim;j++)
                    {
                        if(cost[child][j]<mn)
                        {
                            mn=cost[child][j];
                            id1[i]=j;
                        }
                    }
                    id2[i]=-1;
                    mn=Inf;
                    for(j=1;j<=lim;j++)
                    {
                        if(j!=id1[i])
                        {
                            if(cost[child][j]<mn)
                            {
                                mn=cost[child][j];
                                id2[i]=j;
                            }
                        }
                    }
                }
                for(i=1;i<=lim;i++)
                {
                    cost[node][i]=0;
                    for(j=0;j<graph[node].size();j++)
                    {
                        child=graph[node][j];
                        if(i!=id1[j])
                        {
                            cost[node][i]+=cost[child][id1[j]];
                        }
                        else
                        {
                            cost[node][i]+=cost[child][id2[j]];
                        }
                    }
                    cost[node][i]+=i;
                }
            }
            v.pop_back();
        }
        ans=Inf;
        for(i=1;i<=lim;i++)
        {
            ans=min(ans,cost[1][i]);
        }
        cout<<"Case #"<<Case<<": "<<ans<<endl;
        for(i=0;i<=n+1;i++)
        {
            graph[i].clear();
        }
    }
    return 0;
}



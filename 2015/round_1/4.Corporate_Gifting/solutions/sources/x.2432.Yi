// A C++ program to implement greedy algorithm for graph coloring
#include <iostream>
#include <list>
#include <unordered_map>
#include <utility>
#include <vector>
#include <fstream>
using namespace std;

// A class that represents an undirected graph
class Graph
{
  int V;    // No. of vertices
  list<int> *adj;    // A dynamic array of adjacency lists
public:
  // Constructor and destructor
  Graph(int V)   { this->V = V; adj = new list<int>[V]; }
  ~Graph()       { delete [] adj; }

  // function to add an edge to graph
  void addEdge(int v, int w);

  // Prints greedy coloring of the vertices
  int greedyColoring();
};

void Graph::addEdge(int v, int w)
{
  adj[v].push_back(w);
  adj[w].push_back(v);  // Note: the graph is undirected
}

class comp {
public:
  bool operator()(pair<int, int> p1, pair<int, int> p2) const {
    return p1.second > p2.second;
  }
};

// Assigns colors (starting from 0) to all vertices and prints
// the assignment of colors
int Graph::greedyColoring()
{
  int result[V];

  // Assign the first color to first vertex
  result[0]  = 0;

  // Initialize remaining V-1 vertices as unassigned
  for (int u = 1; u < V; u++)
    result[u] = -1;  // no color is assigned to u

  // A temporary array to store the available colors. True
  // value of available[cr] would mean that the color cr is
  // assigned to one of its adjacent vertices
  bool available[V];
  for (int cr = 0; cr < V; cr++)
    available[cr] = false;

  unordered_map<int, int> dict;

  // Assign colors to remaining V-1 vertices
  for (int u = 1; u < V; u++)
  {
    // Process all adjacent vertices and flag their colors
    // as unavailable
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
      if (result[*i] != -1)
        available[result[*i]] = true;

    // Find the first available color
    int cr;
    for (cr = 0; cr < V; cr++)
      if (available[cr] == false)
        break;

    result[u] = cr; // Assign the found color cr to vertex u

    // Reset the values back to false for the next iteration
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
      if (result[*i] != -1)
        available[result[*i]] = false;
  }

  for (int u = 0; u < V; u++)
    dict[result[u]]++;
  vector<pair<int, int> > A;

  for (auto it = dict.begin(); it != dict.end(); it++) {
    A.push_back(make_pair(it->first, it->second));
  }
  sort(A.begin(), A.end(), comp());

  int ret = 0;
  for (int i = 0; i < A.size(); i++) {
    ret += A[i].second * (i + 1);
  }

  return ret;
}

// Driver program to test above function
int main()
{
  string file_path = "/Users/aidan/Desktop/input.txt";
  ifstream data (file_path.c_str(), ios::in);

  int T;
  data >> T;

  for (int round = 1; round <= T; round++) {
    int N, temp;
    data >> N;
    Graph g(N);
    for (int i = 0; i < N; i++) {
      data >> temp;
      if (temp == 0)
        continue;
      g.addEdge(temp - 1, i);
    }

    cout << "Case #" << round << ": "  <<g.greedyColoring() << endl;
  }

  return 0;
}

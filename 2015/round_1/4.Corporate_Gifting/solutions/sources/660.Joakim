#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define FOR(it,st,en) for(int it=(st);it<(int)(en);++it)
#define REP(it,en) FOR(it,0,en)
#define ITE(it,c) for(auto it=(c).begin();it!=(c).end();++it)
#define ALLOF(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define X first
#define Y second
typedef long long int LL; 
typedef long double LD;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
const int INF=(int)1e9; 
const double EPS=(LD)1e-7;

int solve(){
	int N;
	cin>>N;
	
	//global stuff:
	VI F(N);
	int lgN=log2(N)+4;
	VVI DP(N,VI(lgN,0));
	VVI R(N,VI());

	VI DEG(N);
	REP(i,N){
		int a;
		cin>>a;
		F[i]=a-1;
		if(a){
			DEG[a-1]++;
			R[a-1].PB(i);
		}
	}
	// cout<<"A"<<endl;

	//reverse topsort
	queue<int> Q;
	VI TR;
	REP(i,N){
		if(DEG[i]==0)Q.push(i);
	}
	while(!Q.empty()){
		int k=Q.front();
		Q.pop();
		TR.PB(k);
		if(F[k]!=-1){
			DEG[F[k]]--;
			if(DEG[F[k]]==0){
				Q.push(F[k]);
				// cout<<"From "<<k<<" pushing "<<F[k]<<endl;
			}
		}
	}

	// cout<<TR.size()<<endl;
	// cout<<lgN<<endl;
	// REP(i,N)cout<<TR[i]+1<<" \n"[i==N-1];
	// cout<<"A"<<endl;
	// int cnt=0;
	for(int node:TR)if(node!=0){
		// cout<<"node "<<node;
		// cout<<" "<<cnt++<<endl;
		FOR(k,1,lgN){
			// if(node==4)cout<<k<<endl;
			int good=INF;
			FOR(q,1,lgN)if(q!=k){
				// if(node==4)cout<<'\t'<<q<<endl;
				good = min(good, q + DP[node][q]);
			}
			DP[F[node]][k] += good;
		}
	}

	int good=INF;
	FOR(q,1,lgN){
		good = min(good, q + DP[0][q]);
	}
	return good;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin>>T;
    REP(i,T){
    	cout<<"Case #"<<i+1<<": "<<solve()<<endl;
    }
	return 0;
}
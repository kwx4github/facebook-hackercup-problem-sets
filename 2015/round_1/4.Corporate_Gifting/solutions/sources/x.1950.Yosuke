#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#pragma comment(linker,"/STACK:36777216")

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> Pii;
typedef pair<ll, ll> Pll;

#define FOR(i,n) for(int i = 0; i < (n); i++)
#define sz(c) ((int)(c).size())
#define ten(x) ((int)1e##x)
#define tenll(x) ((ll)1e##x)
template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }
template<class T> void chmax(T& a, T b) { a = max(a, b); }
template<class T> void chmin(T& a, T b) { a = min(a, b); }

typedef pair<int, ll> P;
typedef pair<P, P> Q;

#include <unordered_map>

map<int,ll> memo[ten(5) * 2];
vector<int> e[ten(5) * 2];

Q dfs(int par, int v){
	map<int, ll>& mp = memo[v];
	mp.clear();
	ll first_sums = 0;
	for (auto to : e[v]) if (to != par) {
		Q q = dfs(v, to);
		first_sums += q.first.second;
		ll diff = q.second.second - q.first.second;
		mp[q.first.first] += diff;
	}
	if (sz(mp) == 0) return (Q(P(1, 1), P(2, 2)));

	vector<P> a(mp.begin(), mp.end());
	int unused = a.back().first + 1;
	FOR(i, sz(a)){
		if (i + 1 != a[i].first) {
			unused = i + 1;
			break;
		}
	}

	mp[unused] = 0;
	mp[1] += 0;
	mp[2] += 0;
	P fst(ten(6), tenll(9) * tenll(9)), snd(ten(6), tenll(9) * tenll(9));
	for (auto kv : mp) {
		P cur(kv.first, first_sums + kv.second + kv.first);
		if (cur.second < fst.second) {
			snd = fst;
			fst = cur;
		} else if (cur.second < snd.second) {
			snd = cur;
		}
	}

	return Q(fst, snd);
}

ll core(vector<int>& v){
	FOR(i, ten(5) * 2) e[i].clear();
	FOR(i, sz(v)){
		int p = v[i] - 1;
		if (p != -1) e[p].push_back(i), e[i].push_back(p);
	}
	Q ans = dfs(-1, 0);
	return ans.first.second;
}

void solve(){
	int n; cin >> n;
	vector<int> v(n);
	FOR(i, n) cin >> v[i];
	auto ans = core(v);
	cout << ans << endl;
}

int main(){
	int t; cin >> t;
	FOR(i,t){
		printf("Case #%d: ", i + 1);
		solve();
	}
}
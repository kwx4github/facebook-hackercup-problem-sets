import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{

	public static void main(String[] args) throws IOException
	{
		Main main = new Main();
		main.begin();
	}

	// IO
	private BufferedReader in;
	private BufferedWriter out;
	private StringBuilder ans;
	private StringTokenizer tok;
	private int n;
	private Node[] nodes;
	private long[][] dp;

	private void begin() throws IOException
	{
		// IO streams
		String inputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\corporate_gifting.txt";
		String outputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\out.txt";
		in = new BufferedReader(new FileReader(inputFileName));
		out = new BufferedWriter(new FileWriter(outputFileName));
		ans = new StringBuilder();
		tok = new StringTokenizer("");

		// read input
		int nCases = Integer.parseInt(in.readLine());
		for (int cas = 1; cas <= nCases; cas++)
		{
			System.out.println(cas + "/" + nCases);

			// make nodes
			n = Integer.parseInt(in.readLine());
			nodes = new Node[n + 1];
			for (int i = 0; i <= n; i++)
				nodes[i] = new Node(i);

			// make edges
			tok = new StringTokenizer(in.readLine());
			for (int i = 1; i <= n; i++)
			{
				int parentId = Integer.parseInt(tok.nextToken());
				Node parent = nodes[parentId];
				Node child = nodes[i];
				child.parent = parent;
				parent.children.add(child);
			}

			// solve
			long result = solve();
			ans.append("Case #" + cas + ": " + result + "\n");		
		}

		// output
		System.out.print(ans.toString());
		out.write(ans.toString());
		out.close();
	}


	private long solve()
	{
		// clear mem
		dp = new long[4][n + 1];
		for (int i = 0; i < 4; i++)
			Arrays.fill(dp[i], -1);

		return f(0, 1);
	}

	private long f(int parentPrice, int idx)
	{
		// already solved
		if (dp[parentPrice][idx] != -1)
			return dp[parentPrice][idx];

		// try 1 or 2 or 3
		long min = Long.MAX_VALUE;
		for (int price = 1; price <= 3; price++)
			if (price != parentPrice)
			{
				long sum = price;
				Node parent = nodes[idx];
				for (Node child : parent.children)
					sum += f(price, child.id);
				min = Math.min(min, sum);
			}

		// record
		dp[parentPrice][idx] = min;
		return min;
	}

}

class Node
{
	Node parent;
	LinkedList<Node> children;
	int id;
	int price;

	public Node(int id)
	{
		this.id = id;
		this.children = new LinkedList<>();
		this.price = 1;
	}
}

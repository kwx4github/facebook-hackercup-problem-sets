#include <fstream>
#include <vector>
#include <queue>
#define NMAX 200001
using namespace std;
ifstream fin("date.in");
ofstream fout("date.out");
int n,t,tata[NMAX],total,valori[NMAX],uz[NMAX];
vector <int> G[NMAX];
queue <int> q;
void rezolvare();
void reset();
int main()
{
    int test;
    fin>>t;
    for (test=1; test<=t; test++)
    {
        total=0;
        rezolvare();
        fout<<"Case #"<<test<<": "<<total<<'\n';
    }
    return 0;
}
void rezolvare()
{
    int i,nod,j;
    bool invalid;
    reset();
    fin>>n;
    for (i=1; i<=n; i++)
    {
        fin>>tata[i];
        G[tata[i]].push_back(i);
    }
    for (i=1; i<=n; i++)
        if (!G[i].size())
        {q.push(i); uz[i]=1;}
    while (!q.empty())
    {
        invalid=0;
        nod=q.front(); q.pop(); uz[nod]=0;
        for (i=0; i<G[nod].size(); i++)
        {
            if (!valori[G[nod][i]])
            {
                invalid=1;
                break;
            }
        }
        if (invalid==1)
        {
            q.push(nod);
            uz[nod]=1;
            continue;
        }
        for (i=1; i<=n; i++)
        {
            for (j=0; j<G[nod].size(); j++)
            {
                if (valori[G[nod][j]]==i)
                    break;
            }
            if (j==G[nod].size())
            {
                total+=i;
                valori[nod]=i;
                if (tata[nod] && !uz[tata[nod]])
                {
                    q.push(tata[nod]);
                    uz[tata[nod]]=1;
                }
                break;
            }
        }
    }
}
void reset()
{
    int i;
    for (i=1; i<=n; i++)
    {
        valori[i]=0;
        G[i].erase(G[i].begin(),G[i].end());
    }
    while (!q.empty()) q.pop();
}

#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<string>
#include<stack>
#include<vector>
#include<list>
#include<queue>
#include<set>
#include<map>
#include<unordered_set>
#include<unordered_map>
#include<utility>

using namespace std;

typedef long long ll;

#define REP(a, b, c) for(ll (a)=(b); (a)<(c); (a)++)
#define dREP(a, b, c) for(ll (a)=(b); (a)>=(c); (a)--)
#define MAX 200000+100

int mgr[MAX], cnt[MAX], cost[MAX];
vector<int> g[MAX];

void init(int n){
	REP(i, 0, n){
		cnt[i] = 0;
		g[i].clear();
	}
}

int main(){
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("final_output.txt", "w", stdout);
	int T;
	scanf("%d", &T);
	REP(t, 1, T+1){
		printf("Case #%d: ", t);
		int n;
		scanf("%d", &n);
		init(n);
		REP(i, 0, n){
			scanf("%d", &(mgr[i]));
			mgr[i]--;
			if(mgr[i]!=-1){
				cnt[mgr[i]]++;
				g[mgr[i]].push_back(i);
			}
		}
		queue<int> q;
		REP(i, 0, n)
			if(cnt[i]==0){
				q.push(i);
				if(mgr[i]!=-1){
					cnt[mgr[i]]--;
					if(cnt[mgr[i]]==0) q.push(mgr[i]);	//Don't need to check visited as cnt becomes 0 only once
				}
				cost[i] = 1;
			}
		while(!q.empty()){
			int nd = q.front();
			q.pop();
			REP(i, 0, (g[nd]).size()){
				g[nd][i] = cost[g[nd][i]];
			}
			sort((g[nd]).begin(), (g[nd]).end());
			int cst = 1;
			REP(i, 0, (g[nd]).size()){
				if(cst==g[nd][i]){
					cst++;
				}
			}
			cost[nd] = cst;
			cnt[mgr[nd]]--;
			if(cnt[mgr[nd]]==0) q.push(mgr[nd]);	//Don't need to check visited as cnt becomes 0 only once
		}
		int min_cost=0;
		REP(i, 0, n){
			min_cost += cost[i];
		}
		printf("%d\n", min_cost);
	}
	return 0;
}


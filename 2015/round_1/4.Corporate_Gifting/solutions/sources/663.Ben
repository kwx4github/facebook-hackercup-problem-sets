#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
const int BUF = 200005;
const int SPEND = 30;
const int INF = 1<<30;

int N;
vector<int> adj[BUF];

void read() {
    for (int i = 0; i < BUF; ++i) {
        adj[i].clear();
    }
    
    cin >> N;
    for (int i = 0; i < N; ++i) {
        int pre;
        cin >> pre;
        if (i != 0)
            adj[pre - 1].push_back(i);
    }
}


void topsort(int cur, vector<int> &order) {
    for (int i = 0; i < adj[cur].size(); ++i) {
        topsort(adj[cur][i], order);
    }
    order.push_back(cur);
}


void work(int cases) {
    static int dp[SPEND][BUF];
    memset(dp, 0, sizeof(dp));

    vector<int> order;
    topsort(0, order);
    
    for (int i = 0; i < order.size(); ++i) {
        int cur = order[i];
        for (int preSpend = 0; preSpend < SPEND; ++preSpend) {
            dp[preSpend][cur] = INF;
            for (int curSpend = 1; curSpend < SPEND; ++curSpend) {
                if (preSpend == curSpend)
                    continue;
                int sum = 0;
                for (int j = 0; j < adj[cur].size(); ++j) {
                    int nex = adj[cur][j];
                    sum += dp[curSpend][nex];
                }
                dp[preSpend][cur] = min(dp[preSpend][cur], sum + curSpend);
            }
        }
    }
    
    cout << "Case #" << cases << ": " << dp[0][0] << endl;
}


int main() {
    int cases;
    cin >> cases;
    for (int i = 0; i < cases; ++i) {
        read();
        work(i + 1);
    }
    return 0;
}

#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <functional>
#include <hash_map>
#include <iostream>
#include <iomanip>
#include <list>
#include <deque>
#include <queue>
#include <math.h>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
#define debug(x) cerr<<#x<<" = "<<(x)<<endl;
bool test = false;
const double pi=acos(-1.0);
const double eps=1e-11;
int breakpoint = 0;

const char rootdir[] = "C:\\HackerCup\\CorporateGifting";
void reopen(char* a) {
  char input[256], output[256];
  sprintf(input, "%s\\%s", rootdir, a);
  sprintf(output, "%s\\%s", rootdir, a);
  char *p = strstr(output, ".in");
  if (p) sprintf(p, ".out"); 
  else sprintf(&output[strlen(output)], ".out");
  debug(input);
  freopen(input, "r", stdin);
  if (!test) {
    debug(output);
    freopen(output,"w",stdout);
  }
}

int T;
int N;
int D;  // maximal depth

const int M = 200000+10;

// m[i] is the manager's employee ID for employee with ID i where i is [1..N]
int m[M];

// depth[i] is hierarchy depth ([1,D]) of the employee with ID i where i is [1..N]
int depth[M];

// gift price for employee with ID i where i is [1..N]
int price[M];

// employee IDs of direct reports
vector<int> directs[M];

// All employees at specific depth [1..N]
vector<int> idsAtDepth[M];

void generateTest() {
  freopen("C:\\HackerCup\\CorporateGifting\\corporate_gifting_test.txt","w", stdout);
  printf("3\n");

  int NN = 200000;

  // A balanced one each level has 10 employee
  int rows = 20000;
  printf("%d\n", NN+1);
  printf("0 ");
  for (int j = 0; j < 10; j++) {
    for (int i = 0; i < rows; i++) {
      if (i == 0) printf("%d ", 1);
      else printf("%d ", j * rows + i + 1);
    }
  }
  printf("\n");

  // A realy deep one in reverse order
  printf("%d\n", NN);
  printf("0 ");
  for (int i = 2; i <= NN - 1; i++) {
    printf("%d ", i+1);
  }
  printf("1");
  printf("\n");

  // A realy deep one in normal order
  printf("%d\n", NN);
  for (int i = 1; i <= NN; i++) {
    printf("%d ", i-1);
  }
  printf("\n");
}

int main(int argc, char* argv[]) {
  test = false;
  reopen("corporate_gifting_example_input.txt");
  reopen("corporate_gifting.txt");

  scanf("%d\n", &T);
  for(int t=1; t<=T; t++) {
    memset(depth, 0, sizeof(int)*M);
    memset(price, 0, sizeof(int)*M);

    scanf("%d\n", &N);
    if (test) printf("%d\n", N);
    for (int i = 1; i <= N; i++) directs[i].clear();
    for (int i = 1; i <= N; i++) {
      scanf("%d", &m[i]);
      // m[i] is manager of i
      directs[m[i]].push_back(i);
    }

    D = 1;
    depth[1] = 1;
    queue<int> v;
    v.push(1);
    idsAtDepth[1].push_back(1);
    while (!v.empty()) {
      int id = v.front();
      v.pop();
      for (int i = 0; i < directs[id].size(); i++) {
        int k = directs[id][i];
        int d = depth[id]+1;
        depth[k] = d;
        v.push(k);
        idsAtDepth[d].push_back(k);
        // printf("depth[%d]=%d idsAtDepth[%d].size()=%d\n", k, d, d, idsAtDepth[d].size());
        D = max(D, depth[id]+1);
      }
    }

    if (test) {
      printf("   manager: ");
      int NN = min(N, 32);
      for (int i = 1; i <= NN; i++) {
        printf("%d ", m[i]);
      }
      printf("\n");
      printf("     depth: ");
      for (int i = 1; i <= NN; i++) {
        printf("%d ", depth[i]);
      }
      printf("\n");
      printf("depthCount: ");
      for (int i = 1; i <= NN; i++) {
        if (idsAtDepth[i].size() == 0) break;
        printf("%d ", idsAtDepth[i].size());
      }
      printf("\n");
    }

    // level by level descending order
    for (int d = D; d > 0; d--) {
      // printf("Consider idsAtDepth[%d].size()=%d\n", d, idsAtDepth[d].size());
      assert(idsAtDepth[d].size() >= 1);
      for (int i = 0; i < idsAtDepth[d].size(); i++) {
        int id = idsAtDepth[d][i];
        // leaf employee always at price 1.
        if (directs[id].size() == 0) {
          price[id] = 1;
        } else {
          __int64 used = 0;
          // smallest price distinct from all its direct reports at level d+1
          for (int j = 0; j < directs[id].size(); j++) {
            int did = directs[id][j];
            assert(price[did] > 0 && price[did] < 63);
            used |= (1 << (price[did] - 1));
          }
          int p = 0;
          const __int64 one = 1;
          for (int k = 0; k < 63; k++) {
            if ((used & (one << k)) == 0) {
              p = k + 1;
              break;
            }
          }
          assert(p > 0);
          price[id] = p;
        }
      }
    }
    if (test) {
      printf("    prices: ");
      int NN = min(N, 32);
      for (int i = 1; i <= NN; i++) {
        printf("%d ", price[i]);
      }
      printf("\n");
    }
    int total = 0;
    for (int i = 1; i <= N; i++) {
      total += price[i];
    }
    printf("Case #%d: %d\n", t, total);
    for (int i = 0; i <= D; i++) {
     idsAtDepth[i].clear();
    }
  }
  return 0;
}
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <map>
#include <queue>
#include <memory>
#include <algorithm>
#include <cassert>
#include <queue>

using namespace std;

int main() {
  cin.sync_with_stdio(false);
  cin.tie(0);

  int T;
  cin >> T;
  for (int TT = 1; TT <= T; TT++) {
    int N;
    cin >> N;
    vector<int> q(N);
    vector<int> P(N);
    vector<vector<int>> C(N);
    vector<vector<pair<int64_t, int>>> n2pi(N);

    int M = 1;
    for (int i = 1; i <= N; i++) {
      int t;
      cin >> t;
      P[i - 1] = t - 1;
      if (t != 0) {
        C[t - 1].push_back(i - 1);
        q[t - 1]++;
      }
    }
    queue<int> Q;
    for (int i = 1; i <= N; i++) {
      if (!q[i - 1])
        Q.push(i - 1);
    }

    while (Q.size()) {
      int n = Q.front();
      Q.pop();
      vector<pair<int64_t, int>> V;
      V.reserve(N);
      for (int i = 0; i <= M + 1; i++) {
        int64_t rn = i + 1;
        for (int c: C[n]) {
          for (auto &p1: n2pi[c]) {
            if (p1.second == i)
              continue;
            rn += p1.first;
            break;
          }
        }
        V.push_back(make_pair(rn, i));
      }
      sort(V.begin(), V.end());
      M = max(max(V[0].second, V[1].second), M);
      V.resize(2);
      n2pi[n] = V;

      if (P[n] != -1) {
        q[P[n]]--;
        if (!q[P[n]])
          Q.push(P[n]);
      }
    }

    cout << "Case #" << TT << ": "  << n2pi[0][0].first << endl;
  }
  return 0;
}

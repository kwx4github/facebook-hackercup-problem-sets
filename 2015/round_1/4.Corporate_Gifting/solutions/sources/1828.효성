#include<bits/stdc++.h>
using namespace std;
void solve(int testcase){
	int N;
	cin >> N;
	vector <int> A(N+10);
	for(int i=1; i<=N; ++i) cin >> A[i];

	vector <vector <int> > E(N+10);
	vector <vector <int> > sum(N+10), val(N+10);
	vector <int> cnt(N+10);
	for(int i=1; i<=N; ++i){E[A[i]].push_back(i);}
	for(int i=1; i<=N; ++i){cnt[i] = E[i].size();}

	queue <int> Q;
	for(int i=1; i<=N; ++i){
		if(cnt[i] == 0) Q.push(i);
	}
	while(!Q.empty()){
		int q = Q.front();
		Q.pop();

		if(E[q].size() == 0){
			sum[q].push_back(1);
			sum[q].push_back(2);
			val[q].push_back(1);
			val[q].push_back(2);
		}
		else{
			sum[q].push_back(1234567890);
			sum[q].push_back(1234567890);
			val[q].push_back(-1);	
			val[q].push_back(-1);
			int hole = 2;
			for(int i=1; i<=E[q].size()+2 && hole >0; ++i){
				bool isHole = true;	
				int candi = i;
				for(int j=0; j<E[q].size(); ++j){
					int c = E[q][j];
					if(val[c][0] == i) {
						candi += sum[c][1];
						isHole = false;
					}
					else {
						candi += sum[c][0];
					}
				}
				if(candi < sum[q][0]){
					sum[q][1] = sum[q][0];
					val[q][1] = val[q][0];
					sum[q][0] = candi;
					val[q][0] = i;
				}
				else if(candi < sum[q][1]){
					sum[q][1] = candi;
					val[q][1] = i;
				}
				if(isHole) hole--;
			}
		}

		if(A[q] != 0){
			cnt[A[q]]--;
			if(cnt[A[q]] == 0) Q.push(A[q]);
		}
	}

	int ans = sum[1][0];	
	cout << "Case #" << testcase << ": " << ans << endl;
}

int main(){
	int TestCase;
	cin >> TestCase;
	for(int i=0; i<TestCase; ++i){
		solve(i+1);
	}
	return 0;
}

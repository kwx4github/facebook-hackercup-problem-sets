import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CorporateGifting {

    private static final int INF = 1 << 30;
    public static final int M = 1000000007;
    private static Node[] nodes;
    private static int MAX = 99;

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File("corporate_gifting_in.txt"));
        PrintStream out = new PrintStream(new File("out.txt"));
        int T = sc.nextInt();
        long start = System.currentTimeMillis();
        for (int t = 1; t <= T ; t++) {
            int n = sc.nextInt();
            nodes = new Node[n];
            for (int i = 0; i < n; i++) {
                nodes[i] = new Node();
            }
            for (int i = 0; i < n; i++) {
                int parent = sc.nextInt();
                if (parent != 0) {
                    nodes[parent - 1].childs.add(nodes[i]);
                }
            }
            int res = findLowestNotUsing(nodes[0], INF);
            out.println(String.format("Case #%d: %d", t, res));
        }
        System.out.println(System.currentTimeMillis() - start);
    }

    private static int go(Node node, int number) {
        if (node.res[number] != 0) {
            return node.res[number];
        }
        int res = 0;
        List<Node> childs = node.childs;
        for (int j = 0; j < childs.size() ; j++) {
            res += findLowestNotUsing(childs.get(j), number);
        }
        node.res[number] = res;
        return res;
    }

    private static int findLowestNotUsing(Node node, int number) {
        int min = INF;
        for (int i = 1; i < MAX; i++) {
            if (i != number) {
                min = Math.min(min, go(node, i) + i);
            }
        }
        return min;
    }

    private static class Node {
        List<Node> childs = new ArrayList<Node>();
        int[] res = new int[MAX];
    }
}

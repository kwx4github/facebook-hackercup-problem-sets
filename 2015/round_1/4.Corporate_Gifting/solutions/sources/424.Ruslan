package facebook.roundone;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

/**
 * User: RK
 * Date: 11.01.15
 * Time: 13:34
 */
public class D {

    public static int MAX_COLOR = 500;
    public static List[] tree;
    public static Answer[][] mem;

    public static class Answer{
        public int value;
        public int maxColor;

        public Answer(int value, int maxColor) {
            this.value = value;
            this.maxColor = maxColor;
        }
        public void add(Answer add) {
            value+=add.value;
            maxColor = Math.max(maxColor, add.maxColor);
        }
    }

    public static void create(int n) {
        tree = new List[n];
        for (int i=0;i<n;i++) {
            tree[i] = new ArrayList<Integer>();
        }
    }

    public static Answer calc(int node, int badColor) {
        if (badColor>=0 && mem[node][badColor]!=null) {
            return mem[node][badColor];
        }
        Answer answer = null;
        int maxColor = MAX_COLOR;
        Answer current;
        ArrayList<Integer> list = (ArrayList<Integer>) tree[node];

        for (int color=0;color<MAX_COLOR && color<=maxColor+7;color++) {
            if (color!=badColor) {
                current = new Answer(color+1, color);
                for (int next:list) {
                    current.add(calc(next, color));
                }
                if (answer==null || current.value<answer.value || (current.value==answer.value && current.maxColor<answer.maxColor)) {
                    answer = current;
                    maxColor = answer.maxColor;
                }
            }
        }

        if (badColor!=-1) {
            mem[node][badColor] = answer;
        }

        return answer;
    }

    public static void main(String[] args) throws FileNotFoundException {
        Scanner in = new Scanner(new FileInputStream("test/d.in"));
        PrintWriter out = new PrintWriter(new FileOutputStream("test/d.out"));

        int t = in.nextInt();
        int test = 1;
        Random rand = new Random(1);
        while (t-->0) {


            int n = in.nextInt();
            create(n);
            int root = 0, prev;
            for (int i=0;i<n;i++) {
                prev = in.nextInt();
                if (prev==0) {
                    root = i;
                } else {
                    tree[prev-1].add(i);
                }
            }

//            int n = 200000;
//            create(n);
//            int root = 0, prev;
//            for (int i=1;i<n;i++) {
//                //prev = rand.nextInt(Math.max(i-101,1));
//                //prev = i-1;
//                prev=0;
//                tree[prev].add(i);
//            }


            mem = new Answer[n][MAX_COLOR];

            Answer answer = calc(root, -1);

            out.println("Case #" + test + ": " + answer.value);
            test++;
        }
        out.close();
    }

}

#include<bits/stdc++.h>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;

#define PrintInt(n) printf("%long long intd",n)
#define ReadInt(n) scanf("%long long intd",&n)
#define LIM 200002
#define INF 99999999999

long long int Minimum_Sum[LIM],R_Color[LIM],Delta[LIM],N_Color[LIM],Add_Color[LIM+2];

int main()
{
	long long int tc,n,p,t=0,tree_Size=0;
	long long int ans=0;
	list <long long int> r_Tree[LIM],Tree[LIM];
	long long int in_Deg[LIM];
	cin>>tc;
	
	while(tc--)
	{
		
		cin>>n;
		for(long long int i=0;i<=n;i++)
		{
			Tree[i].clear();
			r_Tree[i].clear();
		}
	
		memset(in_Deg,0,sizeof(in_Deg));
		for(long long int i=1;i<=n;i++)
		{
			
			cin>>p;
			if(i!=1)
			{
				r_Tree[i].push_back(p);
				Tree[p].push_back(i);
				in_Deg[p]++;
			}
		}
		//Topo		Sort
		queue<long long int> Degree_zero,Order_nodes;
		for(long long int i=1;i<=n;i++)
			if(in_Deg[i]==0)	
				Degree_zero.push(i);

		while(!Degree_zero.empty())
		{
			Order_nodes.push(Degree_zero.front());
			for(auto i=r_Tree[Degree_zero.front()].begin();i!=r_Tree[Degree_zero.front()].end();++i)
			{
				in_Deg[*i]--;
				if(in_Deg[*i]==0)
					Degree_zero.push(*i);
			}
			Degree_zero.pop();
		}
//	cout<<Order_nodes.size()<<endl;
		long long int i=0;
	
		while(!Order_nodes.empty())
		{

			i=Order_nodes.front();
			//cout<<"i="<<i<<endl;
			if(Tree[i].size()==0)
			{
				Minimum_Sum[i]=1;
				R_Color[i]=1;
				Delta[i]=1;
				N_Color[i]=2;
			}
			else
			{
				auto son=Tree[i].begin();
				long long int Minimum_Total=0;
				tree_Size = Tree[i].size();
				for(long long int k=1;k<=tree_Size+2;k++)
				{
					Add_Color[k]=k;
				}
				for(long long int k=1;k<=tree_Size;k++)
				{
					Minimum_Total= Minimum_Total + Minimum_Sum[*son];
					Add_Color[R_Color[*son]]=Add_Color[R_Color[*son]] + Delta[*son];
					++son;
				}
				long long int sum1=INF,sum2=INF,color2=0,color1=0;
				for(long long int k=1;k<=tree_Size+2;k++)
				{
					long long int value = Add_Color[k];
					if(value<sum1)
					{
						color2 = color1;
						sum2 = sum1;
						color1 = k;
						sum1 = value;
					}
					else
					{
						if(value<sum2)
							{
								color2=k;
								sum2=value;
							}
					}
				}
				Minimum_Sum[i] = sum1 + Minimum_Total;
				R_Color[ i ] = color1;
				Delta[ i ] = sum2 - sum1;
				N_Color[ i ] = color2;
			}
			Order_nodes.pop();
		}
		cout<<"Case #"<<++t<<": "<<Minimum_Sum[1]<<endl; 		
	}
    return 0;
}


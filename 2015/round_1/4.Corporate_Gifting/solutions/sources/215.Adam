#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <sstream>
#include <iostream>
#include <set>
#include <map>
#include <cassert>

#define REP(AA,BB) for(int AA=0; AA<(BB); ++AA)
#define FOR(AA,BB,CC) for(int AA=(BB); AA<(CC); ++AA)
#define FC(AA,BB) for(__typeof((AA).begin()) BB=(AA).begin(); BB!=(AA).end(); ++BB)
#define SZ(AA) ((int)((AA).size()))
#define ALL(AA) (AA).begin(), (AA).end()
#define PB push_back
#define MP make_pair

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;
typedef long double LD;

const int K = 20, MAXN = 200000, INF = 1000000;
int dp[MAXN + 10][K + 2], l[MAXN + 10][K + 2], r[MAXN + 10][K + 2];
VI ve[MAXN + 10];

void dfs(int v) {
  for (int w : ve[v]) {
    dfs(w);
  }
  for (int k = 1; k <= K; ++k) {
    dp[v][k] = k;
    for (int w : ve[v]) {
      dp[v][k] += min(l[w][k - 1], r[w][k + 1]);
    }
  }
  l[v][0] = INF;
  for (int k = 1; k <= K; ++k) {
    l[v][k] = min(l[v][k - 1], dp[v][k]);
  }
  r[v][K + 1] = INF;
  for (int k = K; k > 0; --k) {
    r[v][k] = min(r[v][k + 1], dp[v][k]);
  }
}

void test() {
  int n; scanf("%d%*d", &n);
  REP (i, n) {
    ve[i].clear();
  }
  for (int i = 1; i < n; ++i) {
    int p; scanf("%d", &p); --p;
    ve[p].PB(i);
  }
  dfs(0);
  int res = *min_element(dp[0] + 1, dp[0] + K + 1);
  printf("%d\n", res);
}

int main(void) {
  int T; scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    printf("Case #%d: ", t);
    test();
  }
  return 0;
}

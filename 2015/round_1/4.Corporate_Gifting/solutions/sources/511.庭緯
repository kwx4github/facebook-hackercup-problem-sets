// by shik {{{
#include <bits/stdc++.h>
#include <unistd.h>
#define SZ(x) ((int)(x).size())
#define ALL(c) begin(c),end(c)
#define REP(i,n) for ( int i=0; i<(int)(n); i++ )
#define REP1(i,a,b) for ( int i=(int)(a); i<=(int)(b); i++ )
#define FOR(it,c) for ( auto it=(c).begin(); it!=(c).end(); it++ )
#define MP make_pair
#define PB push_back
using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

void RI() {}

template<typename... T>
void RI( int& head, T&... tail ) {
    scanf("%d",&head);
    RI(tail...);
}

template<typename T>
void _dump( const char* s, T&& head ) { cerr<<s<<"="<<head<<endl; }

template<typename T, typename... Args>
void _dump( const char* s, T&& head, Args&&... tail ) {
    int c=0;
    while ( *s!=',' || c!=0 ) {
        if ( *s=='(' || *s=='[' || *s=='{' ) c++;
        if ( *s==')' || *s==']' || *s=='}' ) c--;
        cerr<<*s++;
    }
    cerr<<"="<<head<<", ";
    _dump(s+1,tail...);
}

#define dump(...) _dump(#__VA_ARGS__, __VA_ARGS__);

template<typename Iter>
ostream& _out( ostream &s, Iter b, Iter e ) {
    s<<"[";
    for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
    s<<"]";
    return s;
}

template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.first<<","<<p.second<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
template<typename T>
ostream& operator <<( ostream &s, const set<T> &c ) { return _out(s,ALL(c)); }
template<typename A, typename B>
ostream& operator <<( ostream &s, const map<A,B> &c ) { return _out(s,ALL(c)); }

/// }}}


struct XD {
    int x1,v1,x2,v2;
};

const int N=2e5+10;
int n;
VI e[N];
void input() {
    RI(n);
    REP1(i,0,n) e[i].clear();
    REP1(i,1,n) {
        int p;
        RI(p);
        e[p].PB(i);
    }
}

int que[N];
void BFS() {
    int fr=0,bk=0;
    que[bk++]=1;
    while ( fr!=bk ) {
        int p=que[fr++];
        FOR(it,e[p]) que[bk++]=*it;
    }
    assert(bk==n);
}

XD dp[N];

int w[N];
bool used[N];
XD solve( int p ) {
    int x1=0,v1=1e9,x2=0,v2=1e9;
    auto upd=[&]( int x, int v ) {
        if ( x==x1 || x==x2 ) return;
        if ( v<=v1 ) {
            x2=x1; v2=v1;
            x1=x; v1=v;
        } else if ( v<=v2 ) {
            x2=x; v2=v;
        }
    };
    vector<XD> vec;
    FOR(it,e[p]) {
        assert(dp[*it].x1!=-1);
        vec.PB(dp[*it]);
    }
    int base=0;
    FOR(it,vec) base+=it->v1;
    FOR(it,vec) w[it->x1]=0;
    FOR(it,vec) w[it->x1]+=it->v2-it->v1;
    FOR(it,vec) used[it->x1]=1;

    int xx=1;
    while ( xx<N && used[xx] ) xx++;
    assert(xx!=N);
    upd(xx,base+xx);

    xx++;
    while ( xx<N && used[xx] ) xx++;
    assert(xx!=N);
    upd(xx,base+xx);

    FOR(it,vec) upd(it->x1,it->x1+base+w[it->x1]);
    
    FOR(it,vec) used[it->x1]=0;
    assert(x1!=0 && x2!=0);
    assert(x1!=x2 && v1<=v2);
    //printf("%d: base=%d, %d,%d %d,%d\n",p,base,x1,v1,x2,v2);
    return XD{x1,v1,x2,v2};
}

void solve() {
    BFS();
    memset(dp,-1,sizeof(dp));
    for ( int i=n-1; i>=0; i-- ) dp[que[i]]=solve(que[i]);
    int ans=dp[1].v1;
    printf("%d\n",ans);
}

int main( int argc, char *argv[] ) {
    int n_case;
    RI(n_case);
    REP1(i,1,n_case) {
        input();
        if ( argc==2 && atoi(argv[1])!=i ) continue;
        printf("Case #%d: ",i);
        solve();
        fflush(stdout);
    }
    return 0;
}


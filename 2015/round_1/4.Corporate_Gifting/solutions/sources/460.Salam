#include <bits/stdc++.h>
using namespace std;

#define For(i,a,b) for(int i=(a);i<(int)(b);++i)
#define Ford(i,a,b) for(int i=(a);i>=(int)(b);--i)
#define Fore(i,c) for(int i=0;i<(int)(c).size();++i)
#define Iter(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();++i)
#define All(a) (a).begin(),(a).end()
#define Rall(a) (a).rbegin(),(a).rend()
#define Mem(a,v) memset((a),(v),sizeof(a))
#define Sz(a) ((int)(a).size())
#define gcd(a,b) __gcd((a),(b))
#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define gc getchar

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef pair<int, int> PII;

const int INF = 1001001001;
const int MOD = 1000000007;
const double EPS = 1e-8;

template<class T> inline void fromStr(const string& s,T& x){istringstream is(s);is>>x;}
template<class T> inline string toStr(const T& x){ostringstream os;os<<x;return os.str();}

template<class T>
inline void getNum(T& x) {
    x = 0; int s = 1; register int c = gc();
    while ((c < '0' || c > '9') && c != '-') c = gc();
    if (c == '-') s = -1, c = gc();
    for (; c >= '0' && c <= '9'; c = gc()) x = (x<<1) + (x<<3) + c-'0';
    x *= s;
}

int powmod(int a, int b, int m) {
    a %= m;
    int r = 1;
    while (b > 0) {
        if (b & 1) r = (r * 1LL * a) % m;
        a = (a * 1LL * a) % m;
        b >>= 1;
    }
    return r;
}

/*
Algorithm from:
The Optimal Cost Chromatic Partiton Problem for Trees and Interval Graphs
Kroon, Sen, Deng, Roy
http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.823
*/

const int MAXN = 200005;

vector<VI> g;
int parent[MAXN];
LL K1[MAXN], C[MAXN], K2[MAXN], Delta[MAXN], Temp[MAXN];

void solve(int u) {
    K1[u] = C[u] = K2[u] = -1;
    if (Sz(g[u]) == 0) { // leaf
        K1[u] = 1;
        C[u] = 1;
        K2[u] = 2;
        return;
    }
    LL K = 0;
    Fore(i,g[u]) {
        int v = g[u][i];
        //dfs(v);
        K += K1[v];
    }
    int d = Sz(g[u]);
    For(i,1,d+2) Delta[i] = K;
    For(i,0,d) {
        int v = g[u][i];
        if (C[v] <= d + 1) {
            Delta[C[v]] = Delta[C[v]] + K2[v] - K1[v];
        }
    }
    K1[u] = K2[u] = C[u] = -1;
    For(i,1,d+2) {
        Temp[i] = i + Delta[i];
        if (K1[u] == -1 || Temp[i] < K1[u]) {
            K1[u] = Temp[i];
            C[u] = i;
        }
    }
    For(i,1,d+2) {
        if (i == C[u]) continue;
        if (K2[u] == -1 || Temp[i] < K2[u]) {
            K2[u] = Temp[i];
        }
    }
}

int N;

bool cmp(int a, int b) {
    return Sz(g[a]) < Sz(g[b]);
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);

    int T;
    cin >> T;

    for (int tc = 1; tc <= T; ++tc) {
        cout << "Case #" << tc << ": ";

        cin >> N;
        g.clear();
        g.resize(N+1);

        For(i,1,N+1) {
            cin >> parent[i];
            g[parent[i]].pb(i);
        }
        VI verts;
        queue<int> q;
        q.push(1);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            verts.pb(u);
            Fore(i,g[u]) {
                int v = g[u][i];
                q.push(v);
            }
        }

        for (auto it = verts.rbegin(); it != verts.rend(); ++it) solve(*it);
        
        cout << min(K1[1], K2[1]) << "\n";
    }

    return 0;
}
#include <set>
#include <vector>
#include <cstring>
#include <iostream>
using namespace std;

const int MAX_EMPLOYEE = 200002;

int main(int argc, char *argv[]) {
    int T;
    int N;
    cin >> T;
    vector<vector<int> > subordinate;
    int in_degree[MAX_EMPLOYEE];
    int gift[MAX_EMPLOYEE];
    int managed_by[MAX_EMPLOYEE];
    for (int t = 0; t < T; ++t) {
        cin >> N;
        subordinate = vector<vector<int> >(MAX_EMPLOYEE, vector<int>());
        memset(in_degree, 0, sizeof(in_degree));
        memset(gift, 0, sizeof(gift));
        memset(managed_by, 0, sizeof(managed_by));
        int ceo_id;
        cin >> ceo_id;  //escape the CEO
        for (int i = 1; i < N; ++i) {
            int manager_id;
            cin >> manager_id;
            --manager_id;
            subordinate[manager_id].push_back(i);
            ++in_degree[manager_id];
            managed_by[i] = manager_id;
        }
        vector<int> employees;
        int res = 0;
        for (int i = 0; i < N; ++i) {
            if (0 == in_degree[i]) {
                employees.push_back(i);
                gift[i] = 1;
            }
        }
        res += employees.size();
        while (employees.size() != 0) {
            vector<int> managers;
            if (!(employees.size() == 1 && employees[0] == 0)) {
                for (auto &emp : employees) {
                    int manager_id = managed_by[emp];
                    --in_degree[manager_id];
                    if (0 == in_degree[manager_id]) {
                        managers.push_back(manager_id);
                    }
                }
            }
            for (auto &man : managers) {
                set<int> gift_set;
                for (auto &sub : subordinate[man]) {
                    gift_set.insert(gift[sub]);
                }
                set<int>::iterator it = gift_set.begin();
                int man_gift = 0;
                if (*it != 1) {
                    man_gift = 1;
                } else {
                    int prev_gift = 0;
                    for ( ; it != gift_set.end(); ++it) {
                        if (*it != prev_gift + 1) {
                            man_gift = prev_gift + 1;
                            break;
                        }
                        prev_gift = *it;
                    }
                    if (gift_set.end() == it) {
                        man_gift = *(--it) + 1;
                    }
                }
                gift[man] = man_gift;
                res += gift[man];
            }
            employees = managers;
        }
        cout << "Case #" << (t + 1) << ": " << res << endl;
    }
    return 0;
}

#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

struct node {
      int minsum,rcolor,delta,ncolor,son;
};
node n[400005];
VI graph[400005];
bool vis[400005];
int T[400005],sz;
int coloradd[400005];
void dfs(int node)
{
      vis[node] = true;
      T[sz++] = node;
      REP(i,graph[node].size())
            if(!vis[graph[node][i]])
                  dfs(graph[node][i]);
}
int main()
{
      int t,num,val;
      s(t);
      REP(tt,t)
      {
            printf("Case #%d: ",tt+1);
            s(num);
            REP(i,num+1)
                  graph[i].clear();
            INC(i,1,num)
            {
                  s(val);
                  if(val!=0)
                        graph[val].PB(i);
            }
            CLEAR(vis);
            sz = 0;
            INC(i,1,num)
            {
                  if(!vis[i])
                        dfs(i);
            }
            assert(sz==num);
            DEC(i,num-1,0)
            {
                  int v = T[i];
                  if(graph[v].size()==0)
                  {
                        n[v].minsum = 1;
                        n[v].rcolor = 1;
                        n[v].delta = 1;
                        n[v].ncolor = 2;
                  }
                  else
                  {
                        int son,mintotal = 0,value;
                        INC(k,1,graph[v].size()+2)
                              coloradd[k] = k;
                        INC(k,1,graph[v].size())
                        {
                              son = graph[v][k-1];
                              mintotal += n[son].minsum;
                              coloradd[n[son].rcolor] += n[son].delta;
                        }
                        int sum1=1e7,sum2=1e7,color1=0,color2=0;
                        INC(k,1,graph[v].size()+2)
                        {
                              value = coloradd[k];
                              if(value<sum1)
                              {
                                    color2 = color1;
                                    sum2 = sum1;
                                    color1 = k;
                                    sum1 = value;
                              }
                              else if (value<sum2)
                              {
                                    color2 = k;
                                    sum2 = value;
                              }
                        }
                        assert(color1!=0);
                        assert(color2!=0);
                        n[v].minsum = sum1+ mintotal;
                        n[v].rcolor = color1;
                        n[v].delta = sum2-sum1;
                        n[v].ncolor = color2;
                  }
            }
            printf("%d\n",n[1].minsum);
      }
      return 0;
}

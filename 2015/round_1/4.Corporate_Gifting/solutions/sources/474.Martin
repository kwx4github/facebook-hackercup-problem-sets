#include<stdio.h>
#include<list>

using namespace std;

struct pot{
  int best[2],head[2];
  list<int> next;
  int prev;
};

pot tree[200001];

void merge(int pos){
  int mx=1;
  list<int>::iterator it=tree[pos].next.begin();
  while(it!=tree[pos].next.end()){
    if(mx<tree[*it].head[0]) mx=tree[*it].head[0];
    if(mx<tree[*it].head[1]) mx=tree[*it].head[1];
    ++it;
  }
  tree[pos].best[0]=1000000000;
  tree[pos].best[1]=1000000000;
  for(int h=1;h<=mx+1;h++){
    int sum=h;
    for(it=tree[pos].next.begin();it!=tree[pos].next.end();it++){
      sum+=(h==tree[*it].head[0])?tree[*it].best[1]:tree[*it].best[0];
    }
    if(sum<tree[pos].best[1]){
      if(sum<tree[pos].best[0]){
        tree[pos].best[1]=tree[pos].best[0];
        tree[pos].head[1]=tree[pos].head[0];
        tree[pos].best[0]=sum;
        tree[pos].head[0]=h;
      }else{
        tree[pos].best[1]=sum;
        tree[pos].head[1]=h;
      }
    }
  }
}

int testcase(){
  int N;scanf("%d",&N);
  int hv;scanf("%d",&hv);
  tree[0].prev=0;
  for(int i=1;i<N;i++){
    scanf("%d",&hv);hv--;
    tree[hv].next.push_back(i);
    tree[i].prev=hv;
  }
  list<int> td;
  td.push_back(0);
  list<int>::iterator it=td.begin();
  while(it!=td.end()){
    for(list<int>::iterator it2=tree[*it].next.begin();it2!=tree[*it].next.end();it2++)
      td.push_back(*it2);
    it++;
  }
  while(!td.empty()){
    int r=td.back(); td.pop_back();
    while(!td.empty() && r==td.back()) td.pop_back();
      merge(r);
  }
  for(int i=0;i<N;i++) tree[i].next.clear();
  return tree[0].best[0];
}

int main(int agrc,char*argv[]){
  int T;scanf("%d",&T);
  for(int tc=1;tc<=T;tc++)
    printf("Case #%d: %d\n",tc,testcase());
  return 0;
}

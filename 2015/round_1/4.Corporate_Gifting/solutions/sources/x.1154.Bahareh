#include <stdio.h>
#include <vector>
#include <stack>
#define INF 2000000000
using namespace std;

struct employee
{
    int d[5];
    int getmin(int except)
    {
        int m = INF;
        for( int i=0; i<5; i++ )
        {
            if ( i == except ) continue;
            if ( d[i] < m ) m = d[i];
        }
        return m;
    }
};

void solve(vector< vector<int> >& g, vector<employee>& e)
{
    stack<int> dfs;
    stack<int> topol;

    dfs.push(0);
    while( !dfs.empty() )
    {
        int x = dfs.top();
        dfs.pop();
        topol.push(x);

        for( int i=0; i<g[x].size(); i++ )
            dfs.push(g[x][i]);
    }

    while( !topol.empty() )
    {
        int v = topol.top();
        topol.pop();

        if ( g[v].size() == 0 )
        {
            for( int i=0; i<5; i++ )
                e[v].d[i] = i+1;
        }
        else
        {
            for( int i=0; i<5; i++ )
            {
                int sum = 0;
                for( int j=0; j<g[v].size(); j++ )
                {
                    int x = e[ g[v][j] ].getmin(i);
                    sum += x;
                }
                e[v].d[i] = sum + i + 1;
            }
        }
    }
}

int main()
{
    int T;
    scanf("%d", &T);
    for( int t=1; t<=T; t++ )
    {
        int n, x;
        scanf("%d", &n);
        vector<employee> e(n);
        vector< vector<int> > g(n);
        scanf("%d", &x);
        for( int i=1; i<n; i++ )
        {
            scanf("%d", &x);
            g[x-1].push_back(i);
        }
        solve(g, e);

        printf("Case #%d: %d\n", t, e[0].getmin(-1));
    }
    return 0;
}


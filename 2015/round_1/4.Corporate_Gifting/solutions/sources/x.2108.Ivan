//#pragma comment(linker,"/STACK:16777216") /*16Mb*/
#pragma comment(linker,"/STACK:33554432") /*32Mb*/
#define _CRT_SECURE_NO_DEPRECATE
#include<sstream>
#include<iostream>
#include<numeric>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<memory>
#include<memory.h>
#include<string>
#include<vector>
#include<cctype>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<complex>
#include<set>
#include<algorithm>
#include<ctime>

using namespace std;

typedef unsigned long long      ui64;
typedef long long               i64;
typedef	vector<int>             VI;
typedef	vector<bool>            VB;
typedef	vector<VI>              VVI;
typedef	vector<string>          VS;
typedef	pair<int,int>           PII;
typedef set<int>                SI;
typedef set<string>             SS;
typedef complex<double>         CD;
typedef vector< CD >            VCD;
typedef	pair<double,double>     PDD;

#define PB                      push_back
#define MP                      make_pair
#define X                       first
#define Y                       second
#define FOR(i, a, b)            for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b)           for(int i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b)             memset(a, b, sizeof(a))
#define SZ(a)                   int((a).size())
#define ALL(a)                  (a).begin(), (a).end()
#define RALL(a)                 (a).rbegin(), (a).rend()
#define INF                     (2000000000)

#ifdef _DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif


const int MAXN = 200000 + 7;
const int MAXK = 30;
int cache[MAXN][MAXK];

class Solution {
private:
	vector<VI> g;
	int n;

	void readInput() {
		
		//n = 199000 + 1 + rand()%1000;
		cin >> n;
		
		g.resize(n);
		FOR(i,0,n) {
			int parent = 1 + (i ? rand()%i : -1);
			
			cin >> parent;
			
			parent --;

			if(i) {
				g[parent].PB(i);
			}
		}
	}

	int dfs(int v, int parent) {
		if(cache[v][parent] != -1) {
			return cache[v][parent];
		}
		int res = INF;
		int val = -1;

		FOR(i,1,MAXK) if(i!=parent) {
			//choose price for 'v'
			int tres = 0;
			FOR(j,0,SZ(g[v])) {
				tres += dfs(g[v][j], i);
			}
			if(tres + i < res) {
				res = tres + i;
				val = i;
			}
		}

		return cache[v][parent] = res;
	}
public:
	Solution() {

	}

	void solve() {
		memset(cache, -1, sizeof(cache));

		readInput();

		int res = dfs(0, 0);
		cout << res;
		cerr << res;
	}
};

int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int test;
	scanf("%d",&test);

	clock_t begin = clock();

	FOR(test_id,1,test+1) {
		if(test_id != 19) {
			continue;
		}
		printf("Case #%d: ", test_id);
		cerr << "case #" << test_id << "\n\t";
		Solution s;
		s.solve();
		printf("\n");
		cerr << ".\n";
	}

	clock_t end = clock();
	double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
	cerr << "TOTAL TIME: " << elapsed_secs << endl;
	return 0;
}
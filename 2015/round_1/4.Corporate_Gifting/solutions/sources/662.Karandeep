import java.io.*;
import java.util.*;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "corporate.*gifting.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("corporategifting.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		CorporateGifting solver = new CorporateGifting();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class CorporateGifting
{
    int n;
    int par[];
    int idx1[];
    long val1[];
    long val2[];
    long temp[];
    ArrayList<Integer> G[];
    int magic = 3000;
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        n = in.ni ();
        par = new int[n];
        G = new ArrayList[n];
        for (int i = 0; i < n; i++)
        {
            G[i] = new ArrayList<Integer> ();
        }
        for (int i = 0; i < n; i++)
        {
            par[i] = in.ni () - 1;
            if (par[i] != -1)
            {
                G[par[i]].add (i);
            }
        }
        Queue<Integer> queue = new ArrayDeque<Integer> ();
        queue.add (0);
        int list[] = new int[n];
        int ctr = n - 1;
        while (!queue.isEmpty ())
        {
            int x = queue.remove ();
            list[ctr--] = x;
            for (int v : G[x])
            {
                queue.add (v);
            }
        }
        val1 = new long[n];
        val2 = new long[n];
        idx1 = new int[n];
        temp = new long[magic];
        for (int j = 0; j < n; j++)
        {
            int i = list[j];
            for (int k = 0; k < magic; k++)
            {
                temp[k] = k + 1;
            }
            for (int v : G[i])
            {
                for (int k = 0; k < magic; k++)
                {
                    temp[k] += (idx1[v] != k ? val1[v] : val2[v]);
                }
            }
            //set idx1, val1, val2
            if (temp[0] <= temp[1])
            {
                idx1[i] = 0;
                val1[i] = temp[0];
                val2[i] = temp[1];
            }
            else
            {
                idx1[i] = 1;
                val1[i] = temp[1];
                val2[i] = temp[0];
            }
            for (int k = 2; k < magic; k++)
            {
                if(temp[k] < val1[i]) //better than minimum
                {
                    idx1[i] = k;
                    val2[i] = val1[i];
                    val1[i] = temp[k];
                }
                else if(temp[k] < val2[i]) //better than 2nd minima
                {
                    val2[i] = temp[k];
                }
            }
        }
        out.print("Case #"+testNumber+": ");
        out.println (val1[0]);
    }
}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public String ns()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        StringBuilder res = new StringBuilder ();
        do
        {
            res.appendCodePoint (c);
            c = read ();
        } while (!isSpaceChar (c));
        return res.toString ();
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c==' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next()
    {
        return ns ();
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}


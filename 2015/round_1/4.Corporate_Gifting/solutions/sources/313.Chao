/*
	Author : ChnLich
*/
#include<cstdio>
#include<cmath>
#include<iomanip>
#include<cstring>
#include<cstdlib>
#include<ctime>
#include<iostream>
#include<sstream>
#include<fstream>
#include<algorithm>
#include<vector>
#include<list>
#include<stack>
#include<queue>
#include<deque>
#include<set>
#include<map>
#include<string>
#include<bitset>
#include<functional>
#include<utility>
#include<cassert>

using namespace std;

typedef long long llint;
typedef pair<int,int> ipair;
typedef unsigned int uint;
#define pb push_back
#define fi first
#define se second
#define mp make_pair

const int MOD=1000000007,dx[]={0,1,0,-1},dy[]={1,0,-1,0};
const double eps=1e-8;

void read(int &k)
{
	k=0; char x=getchar();
	while(x<'0'||x>'9') x=getchar();
	while(x>='0'&&x<='9') { k=k*10-48+x; x=getchar(); }
}

const int inf=1000000000;
const int level=50;

int T,n,m;
int bes[200010][2],cho[200010][2];
int dp[200010][level+2];

struct graph
{
	int a[200010],b[200010],c[200010],p;
	int dd[200010],ll,rr;
	void clear()
	{
		memset(a,0,sizeof a);
		p=0;
	}
	void addedge(int x,int y)
	{
		c[++p]=a[x]; a[x]=p; b[p]=y;
	}
	void bfs(int x)
	{
		for(dd[ll=rr=1]=x;ll<=rr;ll++)
			for(int i=a[dd[ll]];i;i=c[i]) dd[++rr]=b[i];
		assert(rr==n);
		for(int t=n;t;t--)
		{
			int now=dd[t];
			for(int cost=1;cost<=m;cost++)
			{
				int ans=cost;
				for(int i=a[now];i;i=c[i])
					if (cost!=cho[b[i]][0]) ans+=bes[b[i]][0];
					else ans+=bes[b[i]][1];
				dp[now][cost]=ans;
			}
			bes[now][0]=bes[now][1]=inf;
			for(int cost=1;cost<=m;cost++)
			{
				if (dp[now][cost]<bes[now][0])
				{
					bes[now][1]=bes[now][0];
					cho[now][1]=cho[now][0];
					bes[now][0]=dp[now][cost];
					cho[now][0]=cost;
				}
				else if (dp[now][cost]<bes[now][1])
				{
					bes[now][1]=dp[now][cost];
					cho[now][1]=cost;
				}
			}
		}
	}
} A;

int main()
{
	freopen("D.in","r",stdin);
	freopen("D.out","w",stdout);
	
	scanf("%d",&T);
	for(int tt=1;tt<=T;tt++)
	{
		A.clear();
		scanf("%d",&n);
		for(int i=1;i<=n;i++)
		{
			int x;
			scanf("%d",&x);
			if (i>1) A.addedge(x,i);
		}
		m=min(n,level);
		A.bfs(1);
		printf("Case #%d: %d\n",tt,bes[1][0]);
	}
	
	return 0;
}

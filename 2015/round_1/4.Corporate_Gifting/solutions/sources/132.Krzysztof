#include <algorithm>
#include <cassert>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int MAX_COST = 100;
const int oo = 1000000000;
int main() {
  int tc;
  cin >> tc;
  for (int t = 0; t < tc; t++) {
    int n;
    cin >> n;
    vector<vector<int>> adj(n), revAdj(n);
    vector<vector<long long>> dp(n, vector<long long>(MAX_COST, oo));
    vector<int> inDeg(n);
    for (int i = 0; i < n; i++) {
      int k;
      cin >> k;
      if (k) {
        adj[k - 1].push_back(i);
        revAdj[i].push_back(k - 1);
        inDeg[k - 1]++;
      }
    }
    queue<int> q;
    for (int i = 0; i < n; i++) {
      if (!inDeg[i]) {
        q.push(i);
      }
    }
    int nProcessed = 0;
    while (!q.empty()) {
      nProcessed++;
      int act = q.front();
      q.pop();
      for (int cost = 1; cost <= MAX_COST; cost++) {
        long long totalCost = cost;
        for (int x : adj[act]) {
          long long minXCost = oo;
          for (int xCost = 1; xCost <= MAX_COST; xCost++) {
            if (xCost != cost) {
              minXCost = min(minXCost, dp[x][xCost - 1]);
            }
          }
          totalCost += minXCost;
        }
        assert(totalCost < oo);
        dp[act][cost - 1] = totalCost;
      }
      assert(dp[act][MAX_COST - 1] >= dp[act][MAX_COST - 2]);
      for (int x : revAdj[act]) {
        int newDeg = --inDeg[x];
        assert(newDeg >= 0);
        if (newDeg == 0) {
          q.push(x);
        }
      }
    }
    assert(nProcessed == n);
    long long cost = *min_element(dp[0].begin(), dp[0].end());
    cout << "Case #" << t + 1 << ": " << cost << endl;
  }
  return 0;
}

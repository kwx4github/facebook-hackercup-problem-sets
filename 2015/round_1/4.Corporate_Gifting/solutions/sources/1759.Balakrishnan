#include <stdio.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <time.h>
#define InF 10000000000000000ll
#define MAXN 200000
#define MAXCOLOR 20


#define ll long long
using namespace std;

ll dp[MAXN+1][MAXCOLOR+1];
vector<int> children[MAXN+2];
int BFS[2][MAXN+2];
int level[MAXN+2];
vector<pair<int, int> > all_verts;

int main() {
    //srand(time(NULL));
    srand(0);
    int T;
    scanf("%d",&T);
    for(int t=1;t<=T;t++) {
        int N;
        scanf("%d",&N);
        int MAXC=min(N,MAXCOLOR);
        
        
        for(int i=1;i<=N;i++) {
            children[i].resize(0);
        }
        
        for(int i=1;i<=N;i++) {
            int p;
            scanf("%d",&p);
            //p=(i==1 ? 0 : rand()%(i-1)+1);
            children[p].push_back(i);
        }
        

        
        BFS[0][0]=1;
        int sz=1;
        for(int iters=1;sz>0;iters++) {
            int nsz=0;
            
            for(int j=0;j<sz;j++) {
                int u = BFS[(iters-1)&1][j];
                level[u]=iters;
                
                for(int k=0;k<children[u].size();++k) {
                    int v = children[u][k];
                    BFS[iters&1][nsz++]=v;
                }
            }
            sz=nsz;
        }
        
        
        all_verts.resize(0);
        for(int i=1;i<=N;i++) {
            all_verts.push_back(make_pair(level[i],i));
        }
        
        for(int i=1;i<=N;i++)
            for(int j=0;j<=MAXC;j++)
                dp[i][j]=-1;
        
        
        sort(all_verts.begin(), all_verts.end());
        
        for(int j=(int)all_verts.size()-1;j>=0;j--) {
            int u = all_verts[j].second;
            
            for(int x=0;x<=MAXC;x++) {
                ll answer = InF;
                for(int c=1;c<=MAXC;c++) {
                    if (c==x)
                        continue;
                    ll curr = c;
                    for(int k=0;k<children[u].size();k++) {
                        int v = children[u][k];
                        curr += dp[v][c];
                        if(dp[v][c]==-1) {
                            printf("err u=%d %d %d\n",u,v,c);
                            exit(-1);
                        }
                    }
                    answer = min(answer, curr);
                }
                
                dp[u][x]=answer;
            }
        }
        
        printf("Case #%d: %lld\n",t,dp[1][0]);
        
        
        
        
    }
}
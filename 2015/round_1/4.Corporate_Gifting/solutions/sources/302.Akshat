#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>

using namespace std;

#define MAXN 200010
#define MAXC 60

int n, org[MAXN];
vector<int> graph[MAXN];

int colors[MAXN][MAXC];
tuple<int, int> adj[MAXN][2];

void solve(int u)
{
	fill(colors[u], colors[u] + MAXC, 0);

	for (int i = 1; i <= (MAXC - 1); i++)
		colors[u][i] = i;

	if (graph[u].size() == 0)
	{
		adj[u][0] = tuple<int, int>(1, 1);
		adj[u][1] = tuple<int, int>(2, 2);
		return;
	}
	for (auto v : graph[u])
	{
		solve(v);
		for (int i = 1; i <= (MAXC - 1); i++)
		{
			if (i == get<0>(adj[v][0]))
				colors[u][i] += get<1>(adj[v][1]);
			else
				colors[u][i] += get<1>(adj[v][0]);
		}
	}
	int c1 = MAXN;
	int v1 = MAXN * 2;
	int c2 = MAXN;
	int v2 = MAXN * 2;

	for (int i = 1; i <= (MAXC - 1); i++)
	{
		if (colors[u][i] <= v1)
		{
			c2 = c1;
			v2 = v1;
			c1 = i;
			v1 = colors[u][i];
		}
		else if (colors[u][i] <= v2)
		{
			c2 = i;
			v2 = colors[u][i];
		}
	}
	adj[u][0] = tuple<int, int>(c1, v1);
	adj[u][1] = tuple<int, int>(c2, v2);
}

int main()
{
	int test; 
	cin >> test;
	for (int caseNum = 0; caseNum < test; caseNum++)
	{
		
		cin >> n;

		for (int i = 1; i <= n; i++){
			graph[i].clear();
		}

		for (int i = 1; i <= n; i++){

			cin >> (org[i]);
			if (org[i]) graph[org[i]].push_back(i);
		}
		
		solve(1);
		
		int ans = MAXN + MAXN;

		for (int i = 1; i <= (MAXC-1); i++){
			ans = min(ans, colors[1][i]);
		}

		cout << "Case #" << caseNum + 1 << ": " << ans << endl;
		
	}
}

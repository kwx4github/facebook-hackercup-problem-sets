import collections

__author__ = 'Tyler Crompton'

if __name__ == '__main__':
    class Employee:
        def __init__(self, employees, amount_spent):
            self.employees = employees
            self.amount_spent = amount_spent

        def __repr__(self):
            return 'Employee([{}], {})'.format(', '.join([object.__repr__(employee) for employee in self.employees]), repr(self.amount_spent))

    def buy_gifts(employee):
        employee_order = collections.deque()
        employee_order.append(employee)

        employees = collections.deque()
        employees.append(employee)

        while len(employees):
            sub_employee = employees.pop()
            employee_order.extend(sub_employee.employees)
            employees.extend(sub_employee.employees)

        while len(employee_order):
            employee = employee_order.pop()
            received_gift_prices = set(sub_employee.amount_spent for sub_employee in employee.employees)

            for price in range(1, 200001):
                if price not in received_gift_prices:
                    employee.amount_spent = price
                    break

    number_of_test_cases = int(input())

    for i in range(1, number_of_test_cases + 1):
        optimum_expenditures = 0

        number_of_employees = int(input())
        employees = []
        for j in range(number_of_employees):
            employees.append(Employee([], None))

        manager_links = list(map(int, input().split()))

        for j in range(1, len(manager_links)):
            employees[manager_links[j] - 1].employees.append(employees[j])

        buy_gifts(employees[0])

        print('Case #{}: {}'.format(i, sum(employee.amount_spent for employee in employees)))
#include<fstream>
#include<cstdio>
#include<map>
#include<set>
#include<vector>
//#include<iostream>
#include<stack>
#include<queue>
using namespace std;

int* arr,*k1,*c,*k2;

int main()
{
	ofstream cout;
  	ifstream cin;
  	cout.open ("corporate_gifting_output.txt");
  	cin.open("corporate_gifting.txt"); 
	int t;
	cin>>t;
	for(int x=1;x<=t;x++)
	{
		printf("%d",x);
		long long n;
		cin>>n;
		arr=new int[n+1];
		k1=new int[n+1];
		c=new int[n+1];
		k2=new int[n+1];
		map<int,vector<int> > edges;
		for(int i=1;i<=n;i++)
		{
		cin>>arr[i];
		k1[i]=c[i]=k2[i]=-1;
		edges[arr[i]].push_back(i);
		}
		queue<int> q1;queue<int> q2; stack<int> s1,s2;
		q1.push(0);
		q2.push(1);
		int node1,node2;
		while(!q1.empty())
		{
			node1=q1.front();
			node2=q2.front();
			q1.pop();
			q2.pop();
			s1.push(node1);
			s2.push(node2);
			if(edges.find(node2)!=edges.end())
			for(int i=0;i<edges[node2].size();i++)
			{
				q1.push(node2);
				q2.push(edges[node2][i]);
			}
		}
		int current;
		while(!s2.empty())
		{
			current=s2.top();
			s2.pop();
			if(edges.find(current)==edges.end())
			{
					k1[current]=1;
					k2[current]=2;
					c[current]=1;
			}
			else
			{
				int d=edges[current].size();
				int k=0;
				for(int i=0;i<d;i++)
				{
				k=k+k1[edges[current][i]];
				}
				int *delta=new int[d+2];
				int *kvc=new int[d+2];
				for(int i=1;i<=d+1;i++)
				delta[i]=k;
				for(vector<int>::iterator it2=edges[current].begin();it2!=edges[current].end();++it2)
				{
					int vi=*it2;
					if(c[vi]<=d+1)
					delta[c[vi]]=delta[c[vi]]+k2[vi]-k1[vi];					
				}
				for(int i=1;i<=d+1;i++)
				{
					kvc[i]=delta[i]+i;
				}
			int min1,min2;
			if(kvc[1]>kvc[2])
			{
			min1=2	;
			min2=1;
			}
			else
			{
				min1=1;
				min2=2;
			}
			for(int i=3;i<=d+1;i++)
			{
				if(kvc[i]<kvc[min1])
				{
					min2=min1;
					min1=i;
				}
				else if(kvc[i]<kvc[min2])
				{
					min2=i;
				}
				else ;
			}
			k1[current]=kvc[min1];
			c[current]=min1;
			k2[current]=kvc[min2];
			}
			
		}
		cout<<"Case #"<<x<<": "<<k1[1]<<endl;
	}
	return 0;
}

		

import static java.lang.Math.*;

import java.util.*;

public class corporate_gifting {

	static class Cost {
		int x, cx, y, cy;
		Cost(int x, int cx, int y, int cy) {
			this.x = x;
			this.cx = cx;
			this.y = y;
			this.cy = cy;
		}
		public String toString() { return Arrays.toString(arr(x, cx, y , cy)); }
	}

	int [][] G;
	Cost C [];

	public Object solve() {
		int N = sc.nextInt();
		int [] T = dec(sc.nextInts());

		G = dgraph(N, treeToEdges(T));
		C = new Cost [N];

		dfs(0);
		int res = C[0].cx;
		return res;
	}

	Cost dfs (int s) {
		int M = 5;
		for (int j : G[s])
			M = max(M, 5 + dfs(j).x);

		Integer [] Q = obj(singletons(M)); Q[0] = INF;
		for (int i : rep(1, M))
			for (int j : G[s])
				Q[i] += (C[j].x != i ? C[j].cx : C[j].cy);

		int x = fmin(Q);
		int cx = Q[x];
		Q[x] = INF;

		int y = fmin(Q);
		int cy = Q[y];

		return C[s] = new Cost(x, cx, y, cy);
	}

	private static final int INF = (int) 1e9;
	private static <T> T [] arr (@SuppressWarnings("unchecked") T ... A) { return A; }
	private static int [] dec(int ... A) {
		int [] res = A.clone();
		for (int i = 0; i < A.length; ++i)
			--res[i];
		return res;
	}
	private static int [][] dgraph (int N, int [][] E) { return dwgraph(N, E)[0]; }
	private static int [][][] dwgraph(int N, int [][] E) {
		int [] D = new int [N];
		for (int [] e : E)
			++D[e[0]];
		int [][][] res = new int [2][N][];
		for (int i = 0; i < 2; ++i)
			for (int j = 0; j < N; ++j)
				res[i][j] = new int [D[j]];
		D = new int [N];
		for (int [] e : E) {
			int x = e[0], y = e[1], z = e.length > 2 ? e[2] : 1;
			res[0][x][D[x]] = y;
			res[1][x][D[x]] = z;
			++D[x];
		}
		return res;
	}
	private static <T extends Comparable<T>> int fmin(T [] A) { return fmin(A, 0, A.length); }
	private static <T extends Comparable<T>> int fmin(T [] A, int s, int t) {
		int res = s;
		for (int i = s; i < t; ++i)
			if (A[i].compareTo(A[res]) < 0)
				res = i;
		return res;
	}
	private static Integer [] obj (int ... A) { Integer [] res = new Integer [A.length]; for (int i = 0; i < A.length; ++i) res[i] = A[i]; return res; }
	private static int [] rep(int N) { return rep(0, N); }
	private static int [] rep(int S, int T) { if (T <= S) return new int [0]; int [] res = new int [T-S]; for (int i = S; i < T; ++i) res[i-S] = i; return res; }
	private static int [] singletons(int N) { return rep(N); }
	private static int [][] treeToEdges(int [] T) {
		int [][] res = new int [T.length - 1][];
		for (int i = 1; i < T.length; ++i)
			res[i-1] = new int [] { T[i], i };
		return res;
	}
	////////////////////////////////////////////////////////////////////////////////////
	private static IOUtils.MyScanner sc = new IOUtils.MyScanner();
	private static class IOUtils {
		public static class MyScanner {
			public int nextInt() { return sc.nextInt(); }
			public String nextLine() {
				String line = sc.nextLine().trim();
				if ("".equals(line)) // If at end of line, read next line
					line = sc.nextLine();
				return line;
			}
			public String[] nextStrings() {return nextLine().split(" "); }
			public int[] nextInts() {
				String[] L = nextStrings();
				int[] res = new int[L.length];
				for (int i = 0; i < L.length; ++i)
					res[i] = Integer.parseInt(L[i]);
				return res;
			}
			private final java.util.Scanner sc;
			private MyScanner() {
				sc = new java.util.Scanner(System.in);
				sc.hasNext();
				start();
			}
		}
		private static String build(Object o, Object... a) { return buildDelim(" ", o, a); }
		private static String buildDelim(String delim, Object o, Object... a) {
			StringBuilder b = new StringBuilder();
			append(b, o, delim);
			for (Object p : a)
				append(b, p, delim);
			return b.substring(delim.length());
		}
		//////////////////////////////////////////////////////////////////////////////////
		private static void start() { if (t == 0) t = millis(); }
		private static void append(StringBuilder b, Object o, String delim) {
			if (o.getClass().isArray()) {
				int len = java.lang.reflect.Array.getLength(o);
				for (int i = 0; i < len; ++i)
					append(b, java.lang.reflect.Array.get(o, i), delim);
			} else if (o instanceof Iterable<?>)
				for (Object p : (Iterable<?>) o)
					append(b, p, delim);
			else {
				if (o instanceof Double)
					o = new java.text.DecimalFormat("#.#########").format(o);
				b.append(delim).append(o);
			}
		}
		private static void print(Object o) {
			err(o, '(', time(), ')');
			if (PRINT)
				System.out.println(o);
		}
		private static void err(Object ...o) { System.err.println(build(o)); }
		private static long t;
		private static long millis() { return System.currentTimeMillis(); }
		private static String time() { return "Time: " + (millis() - t) / 1000.0; }
		private static final boolean PRINT = System.getProperties().containsKey("PRINT");
		private static void run(int N) {
			for (int n = 1; n <= N; ++n)
				print("Case #" + n + ": " + build(new corporate_gifting().solve()));
			err("------------------");
			err(time());
		}
	}
	public static void main(String[] args) {
		int N = sc.nextInt();
		IOUtils.run(N);
	}
}

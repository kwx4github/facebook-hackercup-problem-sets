#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cassert>
using namespace std;

#define MAX 200004

int n,par[MAX],deg[MAX],*ch[MAX],e[MAX],li[MAX],lic,k1[MAX],k2[MAX],c[MAX],seen[MAX],delc[MAX];
//void tsort(int node){ for (int i=0; i<deg[node]; i++) tsort(ch[node][i]); li[lic++]=node; }
void tsort(){ 
	int i,j; lic=0;
	li[lic++]=0;
	for (i=0; i<lic; i++) for (j=0; j<deg[li[i]]; j++) li[lic++]=ch[li[i]][j];
	for (i=0,j=lic-1; i<j; i++,j--) swap(li[i],li[j]);
}
int main(){
	int t,u,i,j,k,a,b;
	cin>>t;
	for (u=0; u<t; u++){
		cin>>n;
		for (i=0; i<=n; i++) deg[i]=seen[i]=0; //init
		for (i=1; i<=n; i++){ cin>>par[i]; deg[par[i]]++; } //input
		int D=0; for (i=0; i<=n; i++) D+=deg[i]; assert(D==n); 
		//adjlist
		ch[0]=e;
		for (i=1; i<=n; i++) ch[i]=ch[i-1]+deg[i-1];
		for (i=0; i<=n; i++) deg[i]=0;
		for (i=1; i<=n; i++) ch[par[i]][deg[par[i]]++]=i;
		D=0; for (i=0; i<=n; i++) D+=deg[i]; assert(D==n); 
		//topo sort
		tsort(); assert(lic==n+1);
		//dp 
		for (int ii=0; ii<n; ii++){ i=li[ii];
			seen[i]=1;
			c[i]=1;
			if (deg[i]==0){ k1[i]=1; k2[i]=2; }
			else{
				int K=0,d=deg[i];
				for (int jj=0; jj<d; jj++){ j=ch[i][jj]; assert(i==par[j]); assert(seen[j]==1); K+=k1[j]; }
				for (int cc=1; cc<=d+1; cc++) delc[cc]=0;
				for (int jj=0; jj<d; jj++){ j=ch[i][jj];
					if (c[j]<=d+1) delc[c[j]]+=k2[j]-k1[j];
				}
				k2[i]=k1[i]=-1;
				for (int cc=1; cc<=d+1; cc++){
					int kk=cc+K+delc[cc];
					if (k2[i]==-1||kk<k2[i]) k2[i]=kk;
					if (k1[i]==-1||k2[i]<k1[i]){
					 	swap(k1[i],k2[i]);
					 	c[i]=cc;
					}
				}
			}
			assert(k1[i]>=1 && k2[i]>=k1[i]);
		}
		cout<<"Case #"<<(u+1)<<": "<<k1[1]<<endl;
	}
	return 0;
}


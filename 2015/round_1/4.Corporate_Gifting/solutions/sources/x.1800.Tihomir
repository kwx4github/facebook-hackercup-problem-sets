import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;


public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		
		int tests = Integer.valueOf(reader.readLine());
		
		for (int i=0; i<tests; ++i) {
			System.out.println("Case #" + (i+1) + ": " + solve(reader));
		}
	}
	
	private static int solve(BufferedReader reader) throws NumberFormatException, IOException {
		int n = Integer.valueOf(reader.readLine());
		
		List<Integer>[] subordinates = new LinkedList[n+1];
		
		Scanner s = new Scanner(reader.readLine());
		for (int i=1; i<=n; ++i) {
			int manager = s.nextInt();
			if (subordinates[manager] == null) {
				subordinates[manager] = new LinkedList<Integer>();
			}
			
			subordinates[manager].add(i);
		}
		
		return calculate(subordinates, n);
	}
	
	private static int calculate(List<Integer>[] subordinates, int n) {
		Queue<Integer> q = new LinkedList<Integer>();
		q.add(0);
		
		Deque<Integer> stack = new LinkedList<Integer>();
		int[][] m = new int[n][3];
		
		// Create the stack
		while (!q.isEmpty()) {
			Integer employee = q.poll();
			
			if (subordinates[employee] == null) {
				continue;
			}
			
			for (Integer sub: subordinates[employee]) {
				q.add(sub);
				stack.push(sub);
			}
		}
		
		while (!stack.isEmpty()) {
			Integer employee = stack.pop();
			
			for (int i=1; i<4; ++i) {
				if (subordinates[employee] == null) {
					m[employee-1][i-1] = i;
					continue;
				}
				
				for (Integer sub: subordinates[employee]) {
					if (sub == null) {
						continue;
					}
					int min = 0;
					for (int k=1; k<4; ++k) {
						if (k != i && (min == 0 || (m[sub-1][k-1] < min && m[sub-1][k-1] != 0))) {
							min = m[sub-1][k-1];
						}
					}
					
					m[employee-1][i-1] += min;
				}
				
				if (m[employee-1][i-1] > 0) {
					m[employee-1][i-1] += i;
				}
			}
		}
		
		int min = 0;
		for (int i=1; i<4; ++i) {
			if (min == 0 || (m[0][i-1] < min && m[0][i-1] != 0)) {
				min = m[0][i-1];
			}
		}
		
		return min;
	}

	/* (non-Java-doc)
	 * @see java.lang.Object#Object()
	 */
	public Main() {
		super();
	}

}

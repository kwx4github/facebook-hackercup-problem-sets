#include <bits/stdc++.h>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long LL;

#define d(x)  cerr << #x << " = " << (x) << endl;
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define SORT(c) sort((c).begin(),(c).end())
#define PB push_back

using namespace std;

int ans;
int n;
int tree[200000];
int prices[200000];
set<int> children_pattern[200000];

int find_empty_num(int a) {
  FOR(i,1,n) {
    if (children_pattern[a].find(i) == children_pattern[a].end()) { // if cannot find
      return i;
    }
  }
  return -1;
}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int t;
  cin >> t;

  FOR(problem_num, 0, t) {
    ans = 0;
    int e;
    cin >> n;
    FOR(i,0,200000) {
      tree[i] = -1;
      prices[i] = 0;
      children_pattern[i].clear();
    }
    FOR(i,0,n) {
      cin >> e;
      tree[i] = e;
    }

    for(int i=n-1; i>=0; --i) { // O(n)
      int price;
      if (children_pattern[i].size() == 0) {
        price = 1;
      } else {
        price = find_empty_num(i); // O(n^2)
      }
      if (i!=0) {
        int parent = tree[i] - 1;
        children_pattern[parent].insert(price);
      }

      prices[i] = price;
    }

    FOR(i,0,0) {
      d(children_pattern[i].size());
      d(prices[i]);
    }

    FOR(i,0,n) ans += prices[i];
    printf("Case #%d: %d\n", problem_num + 1, ans);
  }
  cerr << "time " << clock() << endl;
  return 0;
}

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>

using namespace std;

#define ri(X) scanf("%d", &(X))
#define pi(X) printf("%d", (X))
#define mp(X,Y) make_pair(X,Y)
#define pb(X) push_back(X)
#define lint long long
#define pii pair<int,int>
#define inf 1e9
#define linf 1e18
#define X first
#define Y second
#define all(X) (X).begin(),(X).end()
#define uni(X) X.erase(unique(X.begin(), X.end()), X.end());
const int mn = 200009;
int p[mn];
vector<int> s[mn];
const int mm = 30;
int dp[mm][mn];

bool visit[mm][mn];

int f(int u, int lc){
  //cout << u << " " << lc << endl;
  if(visit[lc][u]) return dp[lc][u];
  
  int res = inf;
  int rp;
  for(int k = 1; k < mm; k++){
    if(k == lc) continue;
    rp = k;
    
    for(int i = 0; i < s[u].size() && rp < res; i++){
      rp += f(s[u][i],k);
    }
    res = min(res,rp);
  }
  visit[lc][u] = 1;
  return dp[lc][u] = res;
}

int main(){
  int T;
  int n;
  ri(T);
  for(int t = 0; t < T; t++){
    scanf("%d\n", &n);
    for(int i = 0; i < n; i++){
      s[i].clear();
    }

    memset(visit,0,sizeof(visit));
    for(int i = 0; i < n; i++){
      ri(p[i]);
      p[i]--;
      s[p[i]].pb(i);
    }
    int res = f(0,0);
    printf("Case #%d: %d\n", t+1, res);
  }
  return 0;
}


/* GENERATOR

for this problem I used DP paradigm in the tree.
I have seen (experimentally) that you need more costs than 1 and 2 for "coloring" the graph.
I have done a little prove that you need max lg n colors in the worst case
You have to increase the stack size of c++ for run this code...

const int n = 200000;
int T = 100;
int main(){
  printf("%d\n", T);
  
  for(int t = 0; t < T; t++){
    printf("%d\n", n);
    cout << 0;
    for(int i = 1; i < n; i++){
      printf(" %d", 1+irand()%(i));//1+irand()%(i)
    }cout << endl;
  }
  
  return 0;
}
*/


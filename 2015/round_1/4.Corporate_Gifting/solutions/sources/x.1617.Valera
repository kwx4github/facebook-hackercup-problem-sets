#include <iostream>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <vector>

#define mp(x,y) make_pair((x), (y))
#define pb(x) push_back((x))
#define sortv(v) sort((v).begin(),(v).begin()+(v).size())

using namespace std;

int next() {int x;cin >> x;return x;}
long long nextl() {long long x;cin >> x;return x;}
double nextd() {double x;cin >> x;return x;}

void out(long long x) {printf("%d ", x);}

int f[200000];
int v[200000];
int mn[200000];
int minval[200000][2];

int main() {
	int tests = next();
	for (int test = 1; test <= tests; test++) {
		int n = next();

		fill(f, f + n, 0);
		for (int i = 0; i < n; i++) f[i] = next() - 1;

		vector < vector<int> > son(n, vector<int>(0));
		//vector < vector<int> > son(vector<int>(0));
		for (int i = 1; i < n; i++) son[f[i]].pb(i);
		
		v[0] = 0;
		int ind = 1;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < son[i].size(); j++) v[ind++] = son[i][j];

		for (int ii = n - 1; ii >= 0; ii--) {
			int i = v[ii];
			if (!son[i].size()) {
				mn[i] = 1;
				minval[i][0] = 1;
				minval[i][1] = 2;
			} else {
				int optsum = 0;
				for (int j = 0; j < son[i].size(); j++) optsum += minval[son[i][j]][0];
				int sum[20];
				fill(sum, sum + 20, optsum);
				for (int j = 1; j < 20; j++) sum[j] += j;
				for (int j = 0; j < son[i].size(); j++) sum[mn[son[i][j]]] += minval[son[i][j]][1] - minval[son[i][j]][0];
				int minj1 = 1;
				for (int j = 1; j < 20; j++) if (sum[j] < sum[minj1]) minj1 = j;
				int minj2 = (minj1 == 1) ? 2 : 1;
				for (int j = 1; j < 20; j++) if (j != minj1 && sum[j] < sum[minj2]) minj2 = j;

				mn[i] = minj1;
				minval[i][0] = sum[minj1];
				minval[i][1] = sum[minj2];
			}
		}

		printf("Case #%d: %d\n", test, minval[0][0]);
	}
}
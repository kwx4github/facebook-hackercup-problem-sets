#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <cassert>
#include <numeric>
#include <sstream>
#include <limits>
using namespace std;

#define REQUIRE(cond, message) \
    do { \
        if (!(cond)) { \
            std::cerr << message << std::endl; \
            assert(false); \
        } \
    } while (false)

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i <= int(n); ++i)
#define forv(i, v) forn(i, (v).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef long double ld;

template<typename T>
inline int popcount(T t) {
    if (std::numeric_limits<T>::digits <=
                            std::numeric_limits<unsigned int>::digits) {
        return __builtin_popcount(t);
    } else {
        return __builtin_popcountll(t);
    }
}

const ld EPS = 1e-8;
const ld PI = acosl(0.0) * 2;
const int NMAX = 400006;
vi g[NMAX];
int cost[NMAX];

ll minCost(int v)
{
    vector<bool> used(g[v].size() + 3);
    ll res = 0;
    for (int u : g[v]) {
        res += minCost(u);
        if (cost[u] < used.size()) used[cost[u]] = true;
    }
    cost[v] = 1;
    while (used[cost[v]]) ++cost[v], assert(cost[v] < used.size());
    return res + cost[v];
}

ll solveTest()
{
    int n;
    cin >> n;
    forn(i, NMAX) g[i].clear();
    forn(i, n) {
        int p;
        cin >> p;
        --p;
        if (p >= 0) {
            g[p].pb(i);
        }
    }
    return minCost(0);
}

void solve()
{
    int tc;
    cin >> tc;
    forn(it, tc) {
        cerr << "Test " << it + 1 << endl;
        cout << "Case #" << it + 1 << ": " << solveTest() << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}

#include <sstream>
#include <string>
#include<iostream>
#include<stdio.h>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<math.h>
using namespace std;

#define FOR(p,star,end) for(int p = star ; p<end ; p++)
#define FORR(p,star,end) for(int p = star ; p>=end ; p--)
#define INF 1000000000
#define MOD 1000000007
#define MAX 200002
#define pii pair<long long  ,int >
#define vi vector<int>
#define vii vector< pair<int ,int> >
#define pb push_back
#define mp make_pair
#define ll long long
#define REF 97

vector<vi>G;
int father_id[MAX];
class node
{
public:
    ll sum;
    int num,dig;
    int id;
    set<int>S;
    node()
    {

    }
    node(int id_,ll sum_,int num_)
    {
        num=num_;
        sum=sum_;
        id=-1;
    }
};

node Tree[MAX];
int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);


    int T,N;
    scanf("%d",&T);
    FOR(tc,1,T+1)
    {
        scanf("%d",&N);
        G.assign(N+2,vi());


        FOR(i,1,N+1)
        {
            scanf("%d",&father_id[i]);
            G[father_id[i]].pb(i);
        }
        FOR(i,0,N+1)
        {
            Tree[i]=node(-1,0,i);
            Tree[i].dig=G[i].size();
        }
        queue<node>Q;
        FOR(i,1,N+1)
        if(!Tree[i].dig)
            Q.push(Tree[i]);

        while(!Q.empty())
        {
            node top = Q.front();
            Q.pop();
            if(top.num==0)
            {
                printf("Case #%d: %lld\n",tc,top.sum);
                break;
            }
            set<int>SS=top.S;

            int Id=1;
            for(set<int>::iterator it=SS.begin(); it!=SS.end(); it++)
            {
                if(Id == *it)
                    Id++;
                else if(Id<*it)
                    break;
            }
            top.id=Id;
            top.sum+=(ll)(Id);

            Tree[father_id[top.num]].S.insert(Id);
            Tree[father_id[top.num]].sum+=top.sum;
            Tree[father_id[top.num]].dig--;
            if(Tree[father_id[top.num]].dig==0)
                Q.push(Tree[father_id[top.num]]);




        }
        G.clear();
        FOR(i,0,N+1)
        Tree[i].S.clear();

    }

    return 0;
}

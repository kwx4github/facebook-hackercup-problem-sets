#include <inttypes.h>
#include <stdio.h>
#include <algorithm>
#include <cstdint>
#include <queue>
#include <string>
#include <vector>

enum {
  kMaxN = 200010
};

int main() {
  int T = 0;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    int N = 0;
    scanf("%d", &N);

    static int parents[kMaxN];
    memset(parents, 0, sizeof(parents));
    static int incoming_count[kMaxN];
    memset(incoming_count, 0, sizeof(incoming_count));

    std::vector<std::vector<int> > children(N + 1);

    for (int n = 1; n <= N; ++n) {
      scanf("%d", &parents[n]);
      if (parents[n] != 0) {
        children[parents[n]].push_back(n);
        ++incoming_count[parents[n]];
      }
    }

    std::queue<int> top_sort_queue;
    for (int i = 1; i <= N; ++i) {
      if (children[i].size() == 0) {
        top_sort_queue.push(i);
      }
    }

    static int64_t pri_min_sum[kMaxN];
    memset(pri_min_sum, 0, sizeof(pri_min_sum));
    static int pri_min_gift[kMaxN];
    memset(pri_min_gift, 0, sizeof(pri_min_gift));
    static int64_t sec_min_sum[kMaxN];
    memset(sec_min_sum, 0, sizeof(sec_min_sum));

    while (!top_sort_queue.empty()) {
      const int current_node = top_sort_queue.front();
      top_sort_queue.pop();

      if (parents[current_node] != 0) {
        --incoming_count[parents[current_node]];
        if (incoming_count[parents[current_node]] == 0) {
          top_sort_queue.push(parents[current_node]);
        }
      }

      if (children[current_node].size() == 0) {
        pri_min_sum[current_node] = 1;
        pri_min_gift[current_node] = 1;
        sec_min_sum[current_node] = 2;
      } else {
        const std::vector<int>& current_children = children[current_node];
        const int num_of_children = current_children.size();

        int64_t sum_of_subtree_min = 0;
        for (const int& child : current_children) {
          sum_of_subtree_min += pri_min_sum[child];
        }

        static int64_t delta[kMaxN];
        for (int c = 1; c <= num_of_children + 1; ++c) {
          delta[c] = sum_of_subtree_min;
        }
        for (const int& child : current_children) {
          if (pri_min_gift[child] <= num_of_children + 1) {
            delta[pri_min_gift[child]] +=
                (sec_min_sum[child] - pri_min_sum[child]);
          }
        }

        static int64_t corresponding_sum[kMaxN];
        for (int c = 1; c <= num_of_children + 1; ++c) {
          corresponding_sum[c] = c + delta[c];
        }

        {
          int min_gift = -1;
          for (int c = 1; c <= num_of_children + 1; ++c) {
            if (min_gift == -1 ||
                corresponding_sum[c] < pri_min_sum[current_node]) {
              min_gift = c;
              pri_min_sum[current_node] = corresponding_sum[c];
            }
          }
          pri_min_gift[current_node] = min_gift;
        }
        {
          int min_gift = -1;
          for (int c = 1; c <= num_of_children + 1; ++c) {
            if (c != pri_min_gift[current_node] &&
                (min_gift == -1 ||
                 corresponding_sum[c] < sec_min_sum[current_node])) {
              min_gift = c;
              sec_min_sum[current_node] = corresponding_sum[c];
            }
          }
        }
      }
    }

    printf("Case #%d: %" PRId64 "\n", t, pri_min_sum[1]);
  }

  return 0;
}

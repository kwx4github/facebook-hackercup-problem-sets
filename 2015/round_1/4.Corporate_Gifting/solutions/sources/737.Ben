#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int N;
vector<int> adj[200003];

int dp[200003][2][2];

void rec(int x, int d){
    int high = 1;
    for (int i = 0; i<adj[x].size(); i++){
        rec(adj[x][i], d+1);
        high = max(high, dp[adj[x][i]][0][1]);
        high = max(high, dp[adj[x][i]][1][1]);
    }
    dp[x][0][0] = 1000000000;
    dp[x][1][0] = 1000000000;
    for (int k = 1; k<=high+1; k++){
        int sum = k;
        for (int i = 0; i<adj[x].size(); i++){
            if (dp[adj[x][i]][0][1] == k) sum += dp[adj[x][i]][1][0];
            else sum += dp[adj[x][i]][0][0];
        }

        if (sum < dp[x][0][0]){
            dp[x][1][0] = dp[x][0][0];
            dp[x][1][1] = dp[x][0][1];
            dp[x][0][0] = sum;
            dp[x][0][1] = k;
        }
        else if (sum < dp[x][1][0]){
            dp[x][1][0] = sum;
            dp[x][1][1] = k;
        }
    }

    //printf("Node %d: (%d, %d) and (%d, %d)\n", x, dp[x][0][0], dp[x][0][1], dp[x][1][0], dp[x][1][1]);

}

void solve(){
    int x;
    scanf("%d", &N);
    for (int i = 1; i<=N; i++){
        scanf("%d", &x);
        adj[x].push_back(i);
    }

    rec(1,0);
    printf("%d\n", dp[1][0][0]);


    for (int i = 0; i<=N; i++) adj[i].clear();
}

int main(){
    freopen("company.in", "r", stdin);
    freopen("company.out", "w", stdout);

    int T;
    scanf("%d", &T);
    for (int q = 1; q<=T; q++){
        printf("Case #%d: ", q);
        solve();
    }
}

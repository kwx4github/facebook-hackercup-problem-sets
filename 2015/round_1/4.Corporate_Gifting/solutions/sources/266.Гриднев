#undef NDEBUG
#ifdef gridnevvvit
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>

#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>
                  
#include <functional>
#include <limits>
#include <numeric>
#include <complex>

#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>   

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int,int> pt;
typedef pair<ld, ld> ptd;
typedef unsigned long long uli;

#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define ft first
#define sc second
#define sz(a) int((a).size())
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }
template<typename T> inline string toStr(T x) { stringstream st; st << x; string s; st >> s; return s; }
template<typename T> inline int hasBit(T mask, int b) { return (b >= 0 && (mask & (T(1) << b)) != 0) ? 1 : 0; }
template<typename X, typename T>inline ostream& operator<< (ostream& out, const pair<T, X>& p) { return out << '(' << p.ft << ", " << p.sc << ')'; }

inline int nextInt() { int x; if (scanf("%d", &x) != 1) throw; return x; }
inline li nextInt64() { li x; if (scanf("%I64d", &x) != 1) throw; return x; }
inline double nextDouble() { double x; if (scanf("%lf", &x) != 1) throw; return x; }

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define fore(i, a, b) for(int i = int(a); i <= int(b); i++)
#define ford(i, n) for(int i = int(n - 1); i >= 0; i--)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)

const int INF = int(1e9);
const li INF64 = li(INF) * li(INF);
const ld EPS = 1e-9;
const ld PI = ld(3.1415926535897932384626433832795);

int n;
const int N = 200000 + 1;
const int BUBEN = 901;

vector < int > g[N];
int p[N], d[N][BUBEN];

inline bool read() {
	if (scanf("%d", &n) != 1)
		return false;

 	forn(i, n) {
 		scanf("%d", &p[i]);
 	}

	return true;	
}

void dfs(int s) {
 	forn(i, BUBEN) {
 	 	d[s][i] = i + 1;
 	}

 	int sum = 0;

 	forn(i, sz(g[s])) {
 		int to = g[s][i];
		dfs(to);
			 	
		int minpos1 = 0;
		forn(j, BUBEN) {
			if (d[to][j] < d[to][minpos1]) {
				minpos1 = j;
			}	
		}
		int minpos2 = -1;

		forn(j, BUBEN) {
			if (j == minpos1)
				continue;

			if (minpos2 == -1 || d[to][j] < d[to][minpos2]){
				minpos2 = j;
			}	
		}

		d[s][minpos1] += d[to][minpos2] - d[to][minpos1];
 		sum += d[to][minpos1];
 	}

 	forn(i, BUBEN) {
 	 	d[s][i] += sum;
 	}
}

inline void solve() {
	forn(i, n) g[i].clear();
	   
	fore(i, 1, n - 1) {
		g[p[i] - 1].pb(i);
	}

	dfs(0);

	int ans = 2 * n;

	forn(i, BUBEN) {
	 	ans = min(ans, d[0][i]); 
	}

	cout << ans << endl;
}

int main() 
{

#ifdef gridnevvvit
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	
	int testCount;

	scanf("%d", &testCount);

	forn(test, testCount) {
	 	printf("Case #%d: ", test + 1);
	 	assert(read());
	 	solve();

		cerr << test + 1 << endl;
	}

#ifdef gridnevvvit
	cerr << "===Time: " << clock()  << "===" << endl;
#endif

} 
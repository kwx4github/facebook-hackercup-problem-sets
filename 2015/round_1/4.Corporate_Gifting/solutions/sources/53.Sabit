#include <bits/stdtr1c++.h>

#define LIM 70
#define MAX 200010

#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define dbg(x) cout << #x << " = " << x << endl
#define write() freopen("output.txt", "w", stdout)

using namespace std;
using namespace tr1;

queue <int> Q;
bool visited[MAX];
vector <int> ar[MAX];
int t, n, m, lim, pos[MAX], len[MAX], fuck[MAX], dp[LIM + 5][MAX], sum[LIM + 5][MAX];

void bfs(){
    m = 0;
    clr(visited);
    while (!Q.empty()) Q.pop();

    int i, j, k, x;
    visited[1] = true, Q.push(1);

    while (!Q.empty()){
        i = Q.front();
        Q.pop();

        fuck[i] = m;
        pos[m++] = i;

        for (j = 0; j < len[i]; j++){
            x = ar[i][j];
            if (!visited[x]){
                visited[x] = true;
                Q.push(x);
            }
        }
    }
}

void Generate(){
    bfs();
    clr(dp), clr(sum);
    int i, j, k, l, c, d, x, y, res;

    for (l = m - 1; l >= 0; l--){
        for (c = 1; c <= lim; c++){
            i = pos[l];
            if (!len[i]) dp[c][l] = 1 + (c == 1);
            else{
                res = (~0U >> 1);
                for (k = 1; k <= lim; k++){
                    if (k != c){
                        d = fuck[ar[i][0]];
                        j = d + len[i];
                        x = k + sum[k][d] - sum[k][j];
                        if (x < res) res = x;
                    }
                }
                dp[c][l] = res;
            }

            sum[c][l] = sum[c][l + 1] + dp[c][l];
        }
    }
}

int Check(){
    int i = 1, counter = 0;

    while (len[i] == 1){
        i = ar[i][0];
        counter++;
    }

    if (counter == (n - 1)){
        int x = (n >> 1);
        return ((x << 1) + (n - x));
    }
    return -1;
}

int main(){
    read();
    write();
    int T = 0, i, j, k, p, res;

    scanf("%d", &t);
    while (t--){
        clr(len);
        scanf("%d", &n);
        for (i = 0; i <= n; i++) ar[i].clear();
        lim = min(LIM, (int)sqrt(n) + 3);

        for (i = 1; i <= n; i++){
            scanf("%d", &p);
            ar[p].push_back(i);
            len[p]++;
        }

        res = Check();
        if (res == -1){
            Generate();
            res = dp[lim][0];
        }

        if (n == 1) res = 1;
        printf("Case #%d: %d\n", ++T, res);
    }
    return 0;
}

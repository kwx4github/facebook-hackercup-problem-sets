#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string.h>
using namespace std;
#define REP(i,n) for(int i=0,n_=(n);i<n_;i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define FOR(i,a,b) for (int i=a,b_=b;i<=(b_);i++)
#define ALL(a) a.begin(),a.end()
#define SZ(a) (int)(a).size()
#define SORT(a) sort(ALL(a))
#define INF 1073741823
#define DEB(x) cout<<#x<<":"<<x<<"\n"
#define PB(b) push_back(b)
#define MOD 1000000007
//          1000000007
vector<int>X[1000000];
int DP[200100][2];
int H[200100][2];
int sonsH(int w,int has) {
  int res=0;
  REP(i,SZ(X[w]))
  {
    if (has)
    res+=DP[X[w][i]][1];
    else
      res+=min(DP[X[w][i]][0],DP[X[w][i]][1]);
  }
  return res;
}
int sons(int w, bool has) {
  int res=0;
  REP(i,SZ(X[w])) {
    if (DP[X[w][i]][0]<DP[X[w][i]][1])
    res=max(res,H[X[w][i]][0]);
    else
      res=max(res,H[X[w][i]][1]);
  }  
  return res;
}
int main ()
{
  //printf ("1\n2\n");
  //REP(i,500000) printf ("a");
  //printf ("\n");
  //REP(i,500001) printf ("a");
  //return 0;
  int cas;
  
  scanf ("%d",&cas);
  REP(www,cas)
  {
    REP(i,200001) X[i].clear();
    memset(H,0,sizeof H);
    memset(DP,0,sizeof DP);
    int x,n;
    scanf ("%d",&n);
    REP(i,n) {
      scanf ("%d",&x);
      if(i==0) continue;
      X[x-1].PB(i);
     // DEB(x-1<<"->"<<i);
    }
    FORD(i,n-1,0) {
      DP[i][0]= 1 + sonsH(i, true);
      //DEB(DP[i][0]<<" "<<X[i].size());
      int mx=sons(i,false);
      if (mx==0)
        mx=2;
      else mx++;
     // DEB(i<<" "<<mx<<" "<<sonsH(i,false));
      DP[i][1]=mx+sonsH(i,false);
      H[i][0] = 1;
      H[i][1] = mx; 
    }
  //  REP(i,2){
  //  REP(j,n) printf ("%d,",DP[j][i]);
   // printf ("\n");
    //}
    printf("Case #%d: %d\n",www+1,min(DP[0][0],DP[0][1]));
  }
  return 0;
}

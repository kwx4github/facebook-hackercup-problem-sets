#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>
#include <climits>
#include <bitset>
#include <cassert>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define UNIQUE(v) (v).erase(unique(ALL(v)), (v).end())
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef pair<ll, ll> P;

int A, B;
vector<vector<int>> G;

const int N = 2e5 + 10;
ll dp[31][N];
ll rec(int v, int p, int x, int Max){
	ll &res = dp[x][v];
	if (res + 1) return res;
	res = x;
	for (auto ch : G[v]){
		if (ch == p) continue;
		ll tmp = 1e9;
		for (int i = 1; i <= Max; ++i){
			if (i == x) continue;
			tmp = min(tmp, rec(ch, v, i, Max));
		}
		res += tmp;
	}
	return res;
}

int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout.setf(ios::fixed);
	cout.precision(12);

	int T;
	cin >> T;
	for (int tcnum = 1; tcnum <= T; ++tcnum){
		int n;
		cin >> n;
		G.clear();
		G.assign(n, vector<int>());
		rep(i, n){
			int p;
			cin >> p;
			if (--p >= 0) G[p].push_back(i);
		}

		vector<ll> vv = { (int)1e9, (int)1e9 };
		for (int mx = 15; mx <= 15; ++mx){
			rep(j, mx + 1) rep(k, N) dp[j][k] = -1;
			ll ans = 1e18;
			FOR(j, 1, mx + 1) ans = min(ans, rec(0, -1, j, mx));
			vv.push_back(ans);
		}

		//for (int i = 2; i <= 20; ++i) cerr << vv[i] << ' ';
		//cerr << endl;

		int ans = vv.back();
		cout << "Case #" << tcnum << ": " << ans << '\n';
	}
}
#include <iostream>
#include <stdio.h>
#include <vector>
#include <map>
#include <list>
#include <string>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <queue>
#include <stack>

using namespace std;

#define fore(i, l, r) for(int i = l; i < r; i++)
#define forn(i, n) fore(i, 0, n)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define INF 1000000000

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef long long ll;
typedef vector<pii> vpii;
typedef vector<ll> vll;

int k = 21;

struct node{
  int arr[20];
  int brr[20];
};

vector<int> pos;

void calc(node dp[], int idx, vvi &G){
  
  int l = G[idx].size();
  if (!l){
    fore(i, 1, k) dp[idx].arr[i] = i;
    int v = INF;
    dp[idx].brr[k - 1] = dp[idx].arr[k - 1]; 
    for(int i = k - 2; i > 0; i--){
      dp[idx].brr[i] = min(dp[idx].brr[i + 1], dp[idx].arr[i]);
    }
    fore(i, 1, k - 1){
      dp[idx].brr[i] = min(v, dp[idx].brr[i + 1]);
      v = min(v, dp[idx].arr[i]);
    }
    dp[idx].brr[k - 1] = v;
  }
  else{
    
    fore(i, 1, k){
      dp[idx].arr[i] = i;
      forn(j, l){
	dp[idx].arr[i] += dp[G[idx][j]].brr[i];
      }
    }
    
    int v = INF;
    dp[idx].brr[k - 1] = dp[idx].arr[k - 1]; 
    for(int i = k - 2; i > 0; i--){
      dp[idx].brr[i] = min(dp[idx].brr[i + 1], dp[idx].arr[i]);
    }
    fore(i, 1, k - 1){
      dp[idx].brr[i] = min(v, dp[idx].brr[i + 1]);
      v = min(v, dp[idx].arr[i]);
    }
    dp[idx].brr[k - 1] = v;
  }
}

void creat(vvi &G, int idx){
  stack<int> st;
  st.push(idx);
  while (!st.empty()){
    int top = st.top(); st.pop();
    pos.pb(top);
    int l = G[top].size();
    forn(i, l){
      st.push(G[top][i]);
    }
  }
}

int main(){
  int t;
  scanf("%d", &t);
  forn(cs, t){
    int n;
    scanf("%d", &n);
    vi p(n);
    forn(i, n){
      scanf("%d", &p[i]); p[i]--;
    }
    
    vvi ch(n);
    forn(i, n){
      if (p[i] != -1) ch[p[i]].pb(i);
    }
    
    node *dp = new node[n];
    forn(i, n){
      forn(j, 20) dp[i].arr[j] = 0;
    }
    
    creat(ch, 0);
    int l = pos.size();
    forn(i, l){
      calc(dp, pos[l - i - 1], ch);
    }
    pos.clear();
    int ans = min(dp[0].arr[1], dp[0].brr[1]);
    printf("Case #%d: %d\n", cs + 1, ans);
    delete[] dp;
  }
}

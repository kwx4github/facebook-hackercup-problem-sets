#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>

using namespace std;

int p[300005];
vector<int> g[300005];
int dp[300005][3];
bool u[300005];
void dfs(int v)
{
    u[v] = 1;
    for(int i = 0; i < g[v].size(); i++) {
        int to = g[v][i];
        if(!u[to])
            dfs(to);
    }
    if(v == 0)
        return;
    dp[p[v]][0] += min(dp[v][1] + 2, dp[v][2] + 3);
    dp[p[v]][1] += min(dp[v][0] + 1, dp[v][2] + 3);
    dp[p[v]][2] += min(dp[v][0] + 1, dp[v][1] + 2);
}


int main() {
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("a.out", "w", stdout);

    int t;
    scanf("%d", &t);
    for(int tt = 0; tt < t; tt++) {

        int n;
        scanf("%d", &n);
        for(int i = 0; i <= n; i++)
            g[i].clear();
        for(int i = 1; i <= n; i++)
            scanf("%d", &p[i]), g[p[i]].push_back(i);

        memset(u, 0, sizeof(u));
        memset(dp, 0, sizeof(dp));
        //dfs(0);

        for(int v = n; v > 0; v--)
        {
            dp[p[v]][0] += min(dp[v][1] + 2, dp[v][2] + 3);
            dp[p[v]][1] += min(dp[v][0] + 1, dp[v][2] + 3);
            dp[p[v]][2] += min(dp[v][0] + 1, dp[v][1] + 2);
        }


        int ans = dp[0][0];
        for(int i = 1; i < 3; i++)
            ans = min(ans, dp[0][i]);

        printf("Case #%d: %lld\n", tt + 1, ans);

    }

    return 0;
}

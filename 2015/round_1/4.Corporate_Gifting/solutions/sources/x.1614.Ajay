#include<stdio.h>
#include<malloc.h>
#include<string.h>
#define MAX_N 200001

struct edgenode {
	int info;
	struct edgenode* next;
};
typedef struct edgenode* enptr;

struct edge {
	enptr start;
	enptr end;
};
typedef struct edge* eptr;

enptr getNewEdgeNode(int info) {
	enptr n = (enptr)malloc(sizeof(struct edgenode));
	n->info = info;
	n->next = NULL;
	return n;
}

eptr getNewEdge() {
	eptr n = (eptr)malloc(sizeof(struct edge));
	n->start = NULL;
	n->end = NULL;
	return n;
}

void addEdgeNode(eptr* edge, int info) {
	enptr enode = getNewEdgeNode(info);
	if ((*edge) == NULL) {
		*edge = getNewEdge();
		(*edge)->start = enode;
		(*edge)->end = enode;
	} else {
		enptr tmp = (*edge)->end;
		tmp->next = enode;
		(*edge)->end = enode;
	}
}


eptr* arr;
int* dp;
char* str;
int n;

int gifting(int i) {
	if (!dp[i]) {
		memset(str, 0, sizeof(char)*MAX_N);
		enptr p = arr[i]->start;
		while (p != NULL) {
			str[dp[p->info]] = 'A';
			p = p->next;
		}
		int j = 1;
		while (str[j]) {
			j++;
		}
		dp[i] = j;
	}
}

int main() {
	int i,j,k,tc,item, broken, top;
	int sta[MAX_N];
	long long int s;
	enptr p;
	scanf("%d", &tc);
	i = 0;
	j = 0;
	dp = (int*)malloc(sizeof(int)*MAX_N);
	str = (char*)malloc(sizeof(char)*MAX_N);
	
	while (j++ < tc) {
		arr = (eptr*)calloc(MAX_N, sizeof(struct edge));
		memset(dp, 0, sizeof(int)*MAX_N);
		scanf("%d", &n);
		i = 0;
		while (i < n) {
			scanf("%d", &k);
			if (k) {
				addEdgeNode(&arr[k-1], i);	
			}
			i++;
		}
		for (i=0;i<n;i++) {
			if (arr[i] == NULL) {
				dp[i] = 1;
			}
		}
			for (i=0;i<n;i++) {
				top = 0;
				if (!dp[i]) {
					sta[top++] = i;
					do {
						broken = 0;
						item = sta[--top];
						enptr p = arr[item]->start;
						while (p != NULL) {
							if (! dp[p->info]) {
								sta[top++] = item;
								sta[top++] = p->info;
								broken = 1;
								break;
							}
							p = p->next;
						}
						if (! broken) {
							gifting(item);
						}
					} while (top != 0);
				}
			}
		s = 0;
		/*
		for (i=0;i<n;i++) {
			printf("%d\n", dp[i]);
		}
		*/
		for (i=0;i<n;i++) {
			s+=dp[i];
		}
		printf("Case #%d: %lld\n", j, s);
		i = 0;
		free(arr);
	}
	return 0;
}

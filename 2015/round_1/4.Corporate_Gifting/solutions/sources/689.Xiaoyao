// Corporate Gifting (40 points)
#include <map>
#include <queue>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long LL;

const int N = 200005;
const LL INF = (LL)N * N;

int n, p[N], ind[N], g[N];
vector<int> e[N];
LL f[N], h[N];

int main() {
    int T; scanf("%d", &T);
    for (int cas = 1; cas <= T; ++cas) {
        scanf("%d%*d", &n);
        for (int i = 0; i <= n; ++i) {
            ind[i] = 0;
            e[i].clear();
        }
        for (int i = 2; i <= n; ++i) {
            scanf("%d", p + i);
            ++ind[p[i]];
            e[p[i]].push_back(i);
        }
        queue<int> q;
        for (int i = 1; i <= n; ++i) {
            if (!ind[i]) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int x = q.front(); q.pop();
            if (!--ind[p[x]]) q.push(p[x]);
            LL sum = 0;
            map<int,LL> mp;
            for (auto y : e[x]) {
                sum += f[y];
                mp[g[y]] += h[y];
            }
            int k = 1;
            for (auto i : mp) {
                if (i.first != k) break;
                ++k;
            }
            mp[k] = 0;
            k = 1;
            for (auto i : mp) {
                if (i.first != k) break;
                ++k;
            }
            mp[k] = 0;
            LL mi[3] = {INF, INF, INF};
            for (auto i : mp) {
                int idx = i.first;
                LL val = i.second;
//                printf("%d %lld\n", idx, val);
                LL nf = sum + val + idx;
                mi[2] = nf;
                sort(mi, mi + 3);
                if (mi[0] == nf) g[x] = idx;
            }
            f[x] = mi[0];
            h[x] = mi[1] - mi[0];
//            printf("%d: %lld %d %lld\n", x, f[x], g[x], h[x]);
        }
        printf("Case #%d: %lld\n", cas, f[1]);
    }
}

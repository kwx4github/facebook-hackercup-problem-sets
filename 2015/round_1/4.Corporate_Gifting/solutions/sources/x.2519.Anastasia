#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <cstring>
#include <math.h>
#include <algorithm>
#include <complex>
#include <ctime>
#include <iomanip>
#include <cassert>
#include <sstream>
#include <iterator>

using namespace std;

#define file "file"
#define mp make_pair
#define pb push_back
#define xx real()
#define yy imag()
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef complex<double> point;

const int MAXN = 2e5 + 5;
const int INF = 1e9;

#pragma comment(linker,"/STACK:104857600");

vi g[MAXN];
int dp[MAXN][4];

void dfs(int v,int cl,int p = -1){
    if(dp[v][cl] != INF) return;
    int sz,to;
    sz = g[v].size();
    dp[v][cl] = cl;
    for(int i = 0;i < sz;i++){
        to = g[v][i];
        if(to == p) continue;
        int mn = INF;
        for(int j = 1;j <= 3;j++){
            if(j == cl) continue;
            if(dp[to][j] == INF) dfs(to,j,v);
            mn = min(mn,dp[to][j]);
        }
        dp[v][cl] += mn;
    }
}

void solve(){
    int n;
    scanf("%d",&n);
    for(int i = 1;i <= n;i++){
        g[i].clear();
        for(int j = 1;j <= 3;j++){
            dp[i][j] = INF;
        }
    }
    int v;
    for(int i = 1;i <= n;i++){
        scanf("%d",&v);
        if(v) g[v].pb(i);
    }
    int ans = INF;
    for(int i = 1;i <= 3;i++){
        dfs(1,i);
        ans = min(ans,dp[1][i]);
    }
    printf("%d\n",ans);
}

int main()
{
	#ifndef ONLINE_JUDGE
    assert(freopen("input.txt","r",stdin));
    assert(freopen("output.txt","w",stdout));
    #else
    //assert(freopen(file".in","r",stdin)); assert(freopen(file".out","w",stdout));
    #endif
	int t = 1;
	scanf("%d",&t);
	int cs = 1;
	while(t--){
        printf("Case #%d: ",cs++);
		solve();
	}
	return 0;
}

#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/resource.h>

using namespace std;

/*** START OF TEMPLATE CODE ***/

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;

#define RA(x) begin(x), end(x)
#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)
#define SZ(x) ((int) (x).size())

template<class T>
vector<T> splitstr(const string &s)
{
    istringstream in(s);
    vector<T> out;
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
    return out;
}

template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }

static void redirect(int argc, const char **argv)
{
    ios::sync_with_stdio(false);

    if (argc > 1)
    {
        int fd = open(argv[1], O_RDONLY);
        if (fd == -1) { perror(argv[1]); exit(1); }
        if (-1 == dup2(fd, 0)) { perror(argv[1]); exit(1); }
        if (-1 == close(fd)) { perror(argv[1]); exit(1); }
    }

    if (argc > 2)
    {
        int fd = open(argv[2], O_WRONLY | O_CREAT, 0666);
        if (fd == -1) { perror(argv[2]); exit(1); }
        if (-1 == dup2(fd, 1)) { perror(argv[2]); exit(1); }
        if (-1 == close(fd)) { perror(argv[2]); exit(1); }
    }

    cin.exceptions(ios::failbit | ios::badbit);
}

/*** END OF TEMPLATE CODE ***/

struct answer
{
    ll best[2];
    int best_root;
};

answer recurse(const vector<vi> &children, int root)
{
    const vi &ch = children[root];
    int C = SZ(ch);
    ll total = 0;
    vector<ll> extra(C + 2);
    for (int c : ch)
    {
        answer sub = recurse(children, c);
        total += sub.best[0];
        int idx = min(C + 1, sub.best_root);
        extra[idx] += sub.best[1] - sub.best[0];
    }

    answer ans;
    ans.best[0] = ans.best[1] = LLONG_MAX;
    ans.best_root = -1;
    for (int i = 0; i <= C + 1; i++)
    {
        ll score = total + extra[i] + i;
        if (score < ans.best[0])
        {
            ans.best[1] = ans.best[0];
            ans.best[0] = score;
            ans.best_root = i;
        }
        else if (score < ans.best[1])
            ans.best[1] = score;
    }
    return ans;
}

int main(int argc, const char **argv)
{
    struct rlimit stack_limit;
    getrlimit(RLIMIT_STACK, &stack_limit);
    stack_limit.rlim_cur = 256 * 1024 * 1024;
    setrlimit(RLIMIT_STACK, &stack_limit);
    redirect(argc, argv);

    int cases;
    cin >> cases;
    for (int cas = 0; cas < cases; cas++)
    {
        int N;
        cin >> N;
        vector<vi> children(N);
        for (int i = 0; i < N; i++)
        {
            int p;
            cin >> p;
            p--;
            if (p >= 0)
                children[p].push_back(i);
        }

        answer ans = recurse(children, 0);
        cout << "Case #" << cas + 1 << ": " << ans.best[0] + N << "\n";
    }
    return 0;
}

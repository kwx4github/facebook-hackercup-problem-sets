#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
using namespace std;
#define min(a,b) (a<b?a:b)
#define INF 1000000007
int dp[200005][4]={0};
int parent[200005],outdeg[200005]={0};
vector<int > G[200005];
int main()
{
    int t,test;
    scanf("%d",&t);
    for(test=1;test<=t;test++)
    {
        queue<int >q;

        memset(dp,0,sizeof(dp));
        memset(parent,0,sizeof(parent));
        memset(outdeg,0,sizeof(outdeg));
        int i,j,n,k;
        scanf("%d",&n);
        for(i=0;i<=n;i++)
            G[i].clear();
        for(i=0;i<n;i++)
        {
            int x;
            scanf("%d",&x);
            G[x].push_back(i+1);
            parent[i+1]=x;
            outdeg[x]++;
        }
        //printf("n=%d\n",n);
        for(i=1;i<=n;i++)
        {
            //printf("i=%d out=%d\n",i,outdeg[i]);
            if(outdeg[i]==0)
                q.push(i);
        }
        while(!q.empty())
        {
            int u=q.front();
            q.pop();
            int si=G[u].size();
            //printf("u=%d\n",u);
            for(i=1;i<=3;i++)
            {
                dp[u][i]=i;
                for(j=0;j<si;j++)
                {
                    int v=G[u][j],ans=INF;
                    for(k=1;k<=3;k++)
                    {
                        if(i!=k)
                        {
                            ans=min(ans,dp[v][k]);
                        }
                    }
                    if(ans!=INF)
                    {
                        dp[u][i]+=ans;
                    }
                }
                //printf("i=%d dp=%d\n",i,dp[u][i]);
            }
            outdeg[parent[u]]--;
            if(outdeg[parent[u]]==0)
                q.push(parent[u]);
        }
        int ans=INF;
        for(i=1;i<=3;i++)
        {
            ans=min(ans,dp[1][i]);
        }
        printf("Case #%d: %d\n",test,ans);
    }
    return 0;
}

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <stack>
#include <vector>

using namespace std;

#define sz(s) (int)s.size()

const int N = int(2e5) + 1;
int n, a[N];
vector<int> g[N];
int f[N][3];
bool was[N];

inline int tmin(const int &x, const int &y){
    return (x < y ? x : y);
}

void dfs(){
    int u = 0, i, v;
    stack<int> U, I;
    start_dfs:
        U.push(u);
        f[u][0] = 1; f[u][1] = 2; f[u][2] = 3;
        was[u] = true;
        for(i = 0; i < g[u].size(); ++i){
            v = g[u][i];
            if (!was[v]){
                I.push(i);
                u = v;
                goto start_dfs;
                finish_dfs:
                    if (U.empty()) return;
                    u = U.top();
                    i = I.top();
                    I.pop();
                    v = g[u][i];
                    f[u][0] += tmin(f[v][1], f[v][2]);
                    f[u][1] += tmin(f[v][0], f[v][2]);
                    f[u][2] += tmin(f[v][1], f[v][0]);
            }
        }
    U.pop();
    goto finish_dfs;
}

int main(){
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int ntest;
    scanf("%d", &ntest);
    for(int t = 1; t <= ntest; ++t){
        memset(was, false, sizeof was);
        printf("Case #%d: ", t);
        scanf("%d", &n);
        for(int i = 0; i < n; ++i) g[i].clear();
        for(int i = 0; i < n; ++i){
            scanf("%d", a + i);
            if (i) g[ a[i] - 1 ].push_back(i);
        }
        dfs();
        int ans = tmin(f[0][0], tmin(f[0][1], f[0][2]));
        printf("%d\n", ans);
    }
    return 0;
}

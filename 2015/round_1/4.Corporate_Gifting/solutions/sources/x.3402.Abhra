/* abhra73 */
#include <bits/stdc++.h>
#define sp(z) 				setprecision(z)
#define sv(z) 				sort(z.begin(),z.end())
#define F 					first
#define S 					second
#define pb 					push_back
#define mp 					make_pair
#define ll 					long long
#define ld 					long double 
#define si(z) 				scanf("%d",&z)
#define sl(z) 				scanf("%Ld",&z)
#define sd(z) 				scanf("%Lf",&z)
#define sc(z) 				scanf("%c",&z)
#define fre(y,q,s) 			for(int y=q;y>=s;y--)
#define fr(y,q,s) 			for(int y=q;y<s;y++)
#define f(y,z) 				for(int y=0;y<z;y++)
#define fe(y,z) 			for(int y=1;y<=z;y++)
#define matrix(arr,n,m)		vector<vector<ll> > arr(n,vector<ll>(m,0))
using namespace std;
ll lmin(ll a,ll b){ return (a<b)?a:b; } ll lmax(ll a,ll b){ return (a>b)?a:b; }
ld dmin(ld a,ld b){ return (a<b)?a:b; } ld dmax(ld a,ld b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); } ll lcm(ll a, ll b) { return (a*b)/gcd(a,b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }

/* ********************** Main Code starts from here ********************** */
int n;
vector<vector<int> > v;
set<int> st;
set<int>::iterator it;
vector<int> v1;
int solve(){
	int ans=0,p,x,c;
	vector<int> deg(n,0),par(n,0),w(n,0);
	f(i,n) v.pb(v1);
	f(i,n){
		si(p); if(p==0) continue;
		p--;
		par[i]=p;
		v[p].pb(i);
		deg[p]++;
	}
	
	f(i,n){
		if(deg[i]==0){
			v1.pb(i);
			w[i]=1;
			ans++;
		}
	}
	while(v1.size()){
		x=v1[0];
		v1.erase(v1.begin());
		p=par[x];
		deg[p]--;
		if(deg[p]==0){
			st.clear();
			f(i,v[p].size()){
				x=v[p][i];
				st.insert(w[x]);
			}
			c=1;
			for(it=st.begin();it!=st.end();it++){
				if((*it)!=c) break;
				c++;
			}
			w[p]=c; ans+=c;
			v1.pb(p);
		}
	}
	f(i,n) v[i].clear();
	v.clear();v1.clear();
	return ans;
}
int main(){
	int t,cas=0;
	si(t);
	while(t--){
		printf("Case #%d: ",++cas);
		si(n);
		printf("%d\n",solve());
	}
	return 0;
}

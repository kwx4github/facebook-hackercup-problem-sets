#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker,"/STACK:64000000")
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <cassert>
#include <time.h>
#include <bitset>

using namespace std;

#define mp make_pair
#define pb push_back
#define _(a,b) memset( (a), b, sizeof( a ) )
#define all(a) a.begin(), a.end()
#define sz(a) (int)a.size()
#ifdef WIN32
#define dbg(...) {fprintf(stderr, __VA_ARGS__); fflush(stderr);}
#define dbgx(x) {cerr << #x << " = " << x << endl;}
#define dbgv(v) {cerr << #v << " = {"; for (typeof(v.begin()) it = v.begin(); it != v.end(); it ++) cerr << *it << ", "; cerr << "}"; cerr << endl;}
#else
#define dbg(...) { }
#define dbgx(x) { }
#define dbgv(v) { }
#endif

typedef unsigned long long ull;
typedef long long lint;
typedef pair < int , int > pii;
typedef long double ld;

const int INF = 1000 * 1000 * 1000;
const lint LINF = 1000000000000000000LL;
const double eps = 1e-9;

void prepare()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

const int nmax = 200 * 1000 + 5;
const int magic = 1000;

lint bst[nmax][2];
int bst_col[nmax][2];
int n, parent[nmax];
vector < int > g[nmax];

void clear_all()
{
	for (int i = 0; i < nmax; i ++)
	{
		g[i].clear();
		bst[i][0] = bst[i][1] = LINF;
	}
}

void read()
{
	clear_all();
	int n;
	scanf("%d",&n);
	for (int i = 0; i < n; i ++)
	{
		scanf("%d",&parent[i]);
		parent[i]--;
		if (parent[i] >= 0)
		{
			g[parent[i]].pb(i);
		}
	}
}

void relax(int v, lint val, int col)
{
	if (val <= bst[v][0])
	{
		bst[v][1] = bst[v][0];
		bst_col[v][1] = bst_col[v][0];

		bst[v][0] = val;
		bst_col[v][0] = col;
	}
	else
	if (val <= bst[v][1])
	{
		bst[v][1] = val;
		bst_col[v][1] = col;
	}
}

lint delta[magic];
	

void dfs(int v)
{
	for (int i = 0; i < sz(g[v]); i ++)
	{
		dfs(g[v][i]);
	}

	_(delta, 0);
	
	lint sum = 0;
	for (int i = 0; i < sz(g[v]); i ++)
	{
		int to = g[v][i];
		sum += bst[to][0];
		delta[bst_col[to][0]] += bst[to][1] - bst[to][0];
	}

	for (int col = 1; col <= magic; col ++)
	{
		lint fun = sum + delta[col] + col;
		relax(v, fun, col);
	}
}

bool solve()
{
	dfs(0);
	printf("%lld\n", bst[0][0]);
	return false;
}

int main()
{
	prepare();
	int t;
	scanf("%d",&t);
	for (int i = 0; i < t; i ++)
	{
		dbg("Test %d\n", i);
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}
	return 0;
}

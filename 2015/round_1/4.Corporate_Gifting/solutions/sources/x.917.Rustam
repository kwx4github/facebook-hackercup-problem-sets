#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <string.h>
#include <cstdio>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)((x).size()))
#define rep(i, N) for (int i = 0; i < N; ++i)
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();++it)
typedef long long lint;
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;
const int MAX = 200000;
int N;
vector<int> G[MAX+10];
int C1, C2;
int Prev[MAX+10];

const int MAXC = 10;

void addEdge(int u, int v) {
	G[u].pb(v);
	G[v].pb(u);
}


int dp[MAX+10][MAXC+1];

int rec(int u, int pc) {
	if (dp[u][pc]!=-1)return dp[u][pc];
	int ans = 1 << 30;
	for (int nc = 1; nc <= MAXC; ++nc) {
		if (pc == nc) continue;
		int cur = nc;
		for (int i = 0; i < sz(G[u]); ++i) {
			int v = G[u][i];
			if (v != Prev[u]) {
				cur += rec(v, nc);
			}
		}
		ans = min(ans, cur);
	}
	return dp[u][pc] = ans;
}

void clearG() {
	for (int i = 1; i <= N; ++i) {
		G[i].clear();
		Prev[i] = 0;
	}
}




void solve(int tst) {
	scanf("%d", &N);
	clearG();
	for (int i = 1; i <= N; ++i) {
		int j;
		scanf("%d", &j);
		//j = i - 1;
		Prev[i] = j;
		if (j) addEdge(i, j);
	}

	// C1 = 0;
	// C2 = 0;
	// dfs(1, 1);
//	int mn = min(C1, C2);
	//int mx = max(C1, C2);
	//int ans = mn * 2 + mx;
	memset(dp, -1, sizeof(dp));
	int ans1 = rec(1, 0);
	printf("Case #%d: %d\n", tst, ans1);
}


int main() {
	freopen("input.txt", "r", stdin);
	int tst;
	cin >> tst;
	for (int i = 1; i <= tst; ++i) {
		solve(i);
	}

    return 0;
}

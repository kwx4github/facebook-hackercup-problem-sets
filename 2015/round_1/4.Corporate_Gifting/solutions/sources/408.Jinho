#include <algorithm>
#include <cstring>
#include <cstdio>
#include <queue>

using namespace std;

const int MAXN = 200000;
const int MAXM = 30;

int n;
int par[MAXN + 5];
pair<int, int> depth[MAXN + 5];
vector<int> child[MAXN + 5];

int table[35][MAXN + 5];

int main()
{
	int T;
	scanf("%d", &T);
	for (int cn = 1; cn <= T; ++cn)
	{
		scanf("%d", &n);
		memset(depth, 0, sizeof(depth));
		for (int i = 0; i < n; ++i)
		{
			child[i].clear();
			depth[i].second = i;
		}

		for (int i = 0; i < n; ++i)
		{
			scanf("%d", &par[i]);
			if (i == 0) continue; // ignore first input

			par[i]--;
			child[ par[i] ].push_back(i);
		}

		queue<int> Q;
		Q.push(0);
		depth[0].first = 0;
	
		while (!Q.empty())
		{
			int now = Q.front(); Q.pop();
			for (int i = 0; i < child[now].size(); ++i)
			{
				int c = child[now][i];
				Q.push(c);
				depth[c].first = depth[now].first + 1;
			}
		}

		sort(depth, depth + n);
		for (int i = n - 1; i >= 0; --i)
		{
			int now = depth[i].second;
			for (int j = 1; j <= MAXM; ++j)
			{
				table[j][now] = j;
				for (int k = 0; k < child[now].size(); ++k)
				{
					int best = 987987987;
					for (int l = 1; l <= MAXM; ++l)
					{
						if (l == j) continue;
						if (best > table[l][child[now][k]]) best = table[l][child[now][k]];
					}
					table[j][now] += best;
				}
			}
		}

		int ret = 987987987;
		for (int i = 1; i <= MAXM; ++i)
			if (ret > table[i][0]) ret = table[i][0];
		printf("Case #%d: %d\n", cn, ret);
	}
}


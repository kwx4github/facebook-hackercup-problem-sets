#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

const int INF = 1 << 30;
const double EPS = 1e-8;

vector<vi> v, dp;
const int magic=21;

void bfs(int x)
{
    //for(int i=0;i<v[x].size();i++) dfs(v[x][i]);
    for(int price=1;price<magic;price++)
    {
        dp[x][price]=price;
        for(int i=0;i<v[x].size();i++)
        {
            int nxt=v[x][i], best=INF;
            for(int j=1;j<magic;j++)
            {
                if(j!=price) best=min(best,dp[nxt][j]);
            }
            dp[x][price]+=best;
        }
    }
}

void solve(int num)
{
    int n;
    cin>>n;
    v.clear(); dp.clear();
    v.resize(n+1); dp.resize(n+1,vi(magic,INF));
    vi rv(n+1), outd(n+1,0);
    for(int i=1;i<=n;i++)
    {
        int a;
        cin>>a;
        v[a].pb(i);
        rv[i]=a;
        outd[a]++;
    }
    queue<int> q;
    for(int i=1;i<=n;i++) if(!v[i].size()) q.push(i);
    while(q.size())
    {
        int cur=q.front();
        q.pop();
        bfs(cur);
        if(rv[cur])
        {
            outd[rv[cur]]--;
            if(!outd[rv[cur]]) q.push(rv[cur]);
        }
    }
    //dfs(1);
    int ans=INF;
    for(int i=1;i<magic;i++) ans=min(ans,dp[1][i]);
    cout<<"Case #"<<num<<": "<<ans<<"\n";

}

int main()
{
    ios_base::sync_with_stdio(0);
    int t;
    cin>>t;
    for(int i=1; i<=t; i++)
    {
        solve(i);
    }
}


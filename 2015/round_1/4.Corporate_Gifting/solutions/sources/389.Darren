//Clibrary:
#include<cassert>
#include<cctype>
#include<cerrno>
//#include<cfenv>
#include<cfloat>
//#include<cinttypes>
#include<ciso646>
#include<climits>
#include<clocale>
#include<cmath>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
//#include<cstdbool>
#include<cstddef>
//#include<cstdint>
#include<cstdio>
#include<cstdlib>
#include<cstring>
//#include<ctgmath>
#include<ctime>
//#include<cuchar>
#include<cwchar>
#include<cwctype>
//Containers:
//#include<array>
#include<bitset>
#include<deque>
//#include<forward_list>
#include<list>
#include<map>
#include<queue>
#include<set>
#include<stack>
//#include<unordered_map>
//#include<unordered_set>
#include<vector>
//Input/Output:
#include<fstream>
#include<iomanip>
#include<ios>
#include<iosfwd>
#include<iostream>
#include<istream>
#include<ostream>
#include<sstream>
#include<streambuf>
//Other:
#include<algorithm>
//#include<chrono>
//#include<codecvt>
#include<complex>
#include<exception>
#include<functional>
//#include<initializer_list>
#include<iterator>
#include<limits>
#include<locale>
#include<memory>
#include<new>
#include<numeric>
//#include<random>
//#include<ratio>
//#include<regex>
#include<stdexcept>
#include<string>
//#include<system_error>
//#include<tuple>
//#include<typeindex>
#include<typeinfo>
//#include<type_traits>
#include<utility>
#include<valarray>
using namespace std;

typedef long long i64;
typedef unsigned long long u64;

typedef long long               ll;
typedef long double             ld;
typedef vector<int>             vi;
typedef vector<vi>              vvi;
typedef pair<int, int>          pii;
typedef vector<pii>             vii; // vector of integer pairs
typedef set<int>                si;
typedef map<string, int>        msi;

const double PI = acos(-1);

/*
 * __builtin_ffs  __builtin_clz  __builtin_ctz __builtin_popcount  __builtin_parity
 * sizeof CLOCKS_PER_SEC
 * (1 << (31 - __builtin_clz(100) ) == 64;
 * decltype // deprecated
 */
const int MAXN = 200 * 1024;
int N;
int father[MAXN];
vector<int> childs[MAXN];
int M1_1[MAXN];
i64 M1_2[MAXN]; 
int M2_1[MAXN];
i64 M2_2[MAXN]; 
void init(int n) {
  if (childs[n].size() == 0) {
    M1_1[n] = 1;
    M1_2[n] = 1;
    M2_1[n] = 2;
    M2_2[n] = 2;
  } else {
    for (auto p: childs[n]) init(p);
    map<int, i64> M1;
    map<int, i64> M2;
    for (auto p: childs[n]) M1[M1_1[p]] += M1_2[p];
    for (auto p: childs[n]) M2[M1_1[p]] += M2_2[p];
    i64 tot = 0;
    for (auto p: childs[n]) tot += M1_2[p];
    for (size_t i = 1; i <= childs[n].size() + 2; i++) {
      i64 tmp = tot + i;
      if (M1.count(i))  tmp = tmp - M1[i] + M2[i];
      if (M1_2[n] >= tmp) {
        M2_1[n] = M1_1[n];
        M2_2[n] = M1_2[n];
        M1_1[n] = i;
        M1_2[n] = tmp;
      } else if (M2_2[n] >= tmp) {
        M2_1[n] = i;
        M2_2[n] = tmp;
      }
    }
  }
  //cout << n << ": " << M1_1[n] << " " << M1_2[n] << ", " << M2_1[n] << " " << M2_2[n] << endl;
}
int TestNum;
int main(){
  ios_base::sync_with_stdio(false); 
  int T; cin >> T;
  for (int CA = 1; CA <= T; CA++) {
    cin >> N;
    for (int i = 1; i <= N; i++) childs[i].clear();
    for (int i = 1; i <= N; i++) {
      cin >> father[i];
      childs[father[i]].push_back(i);
    }
    memset(M1_2, 0x3f, sizeof(M1_2));
    memset(M2_2, 0x3f, sizeof(M2_2));
    init(1);
    cout << "Case #" << CA << ": " << M1_2[1] << endl;
  }
}


#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define esp 1e-8
#define lson   l, m, rt<<1
#define rson   m+1, r, rt<<1|1
#define sz(x) ((int)((x).size()))
#define pf(x) ((x)*(x))
#define pb push_back
#define pi acos(-1.0)
#define in freopen("solve_in.txt", "r", stdin);
#define out freopen("solve_out.txt", "w", stdout);
#define bug(x) cerr << "Line : " << (x) <<  " >>>>>>\n";
#define TL cerr << "Time elapsed: " << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms" << endl;
#define inf 0x0f0f0f0f

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef map<LL, int> MPS;
typedef pair<int, int> PII;
typedef MPS::iterator IT;
typedef long long LL;

const int maxn = 200000 + 10;
int dp[maxn][21];
vector<int> g[maxn];
struct Node {
    int v, id;
    Node() {}
    Node(int v, int id):v(v), id(id) {}
} a, b;
void dfs(int u, int fa) {
    for(int k = 1; k <= 20; k++)
        dp[u][k] = k;
    for(int i = 0; i < sz(g[u]); i++) {
        int v = g[u][i];
        if(v == fa) continue;
        dfs(v, u);
        a = Node(inf, -1);
        b = Node(inf, -1);
        for(int k = 1; k <= 20; k++)
            if(dp[v][k] < a.v) {
                b = a;
                a = Node(dp[v][k], k);
            } else if (dp[v][k] < b.v)
                b = Node(dp[v][k], k);
        for(int k = 1; k <= 20; k++)
            dp[u][k] += (a.id == k ? b.v : a.v);
    }

}
int main() {
//    in
//    out
    int size = 256 << 20; // 256MB
    char *p = (char*)malloc(size) + size;
    __asm__("movl %0, %%esp\n" :: "r"(p));
    int T;
    for(int t = scanf("%d", &T); t <= T; t++) {
        int n;
        scanf("%d", &n);
        for(int i = 1; i <= n; i++)
            g[i].clear();
        for(int i = 1; i <= n; i++) {
            int u;
            scanf("%d", &u);
            if(i == 1) continue;
            g[i].pb(u);
            g[u].pb(i);
        }
        dfs(1, 0);
        int ans = dp[1][1];
        for(int i = 1; i <= 20; i++)
            ans = min(ans, dp[1][i]);
        printf("Case #%d: %d\n", t, ans);
    }

    return 0;
}

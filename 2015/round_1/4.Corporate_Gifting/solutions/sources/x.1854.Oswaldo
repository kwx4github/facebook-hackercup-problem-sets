import java.io.*;
import java.util.*;

class CorporateGifting {

    
    public static void main(String[] args) throws Exception {

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	int T=Integer.parseInt(br.readLine());

	for(int i=0;i<T;++i) {
	    
	    int res=0;
	    int N=Integer.parseInt(br.readLine());
	    int cost[]=new int[N];
	    String splitLine[]=br.readLine().split(" ");
	    
	    if(N==1) {
		System.out.println("Case #"+(i+1)+": "+1);
		continue;
	    }
		

	    int parent[]=new int[N];
	    for(int j=0;j<N;++j)
		parent[j]=Integer.parseInt(splitLine[j])-1;
	    
	    int numChildren[]=new int[N];
	    for(int j=1;j<N;++j)
		numChildren[parent[j]]++;

	    int numRemaining[]=new int[N];
	    ArrayList<Integer> leaves=new ArrayList<Integer>();
	    for(int j=0;j<N;++j) {
		numRemaining[j]=numChildren[j];
		if(numChildren[j]==0)
		    leaves.add(new Integer(j));
	    }

	    HashMap<Integer,HashSet<Integer>> Forbidden = new HashMap<Integer,
		HashSet<Integer>>();
	    for(int j=0;j<N;++j)
		Forbidden.put(new Integer(j),new HashSet<Integer>());

	    LinkedList<Integer> q = new LinkedList<Integer>();

	    for(Integer l: leaves) {
		cost[l.intValue()]=1;
		Forbidden.get(new Integer(parent[l.intValue()])).add(new Integer(1));
		q.add(new Integer(parent[l.intValue()]));
		res++;
	    }

	    while(!q.isEmpty()) {
		int node = q.remove().intValue();
		if(numRemaining[node]==1) {
		    int c=1;
		    while(c<=N) {
			if(!Forbidden.get(new Integer(node)).
			   contains(new Integer(c)))
			    break;
			++c;
		    }

		    cost[node]=c;
		    res+=c;
		    if(node!=0) {
			Forbidden.get(new Integer(parent[node])).add(new Integer(c));
			q.add(new Integer(parent[node]));
		    }
		}
		else
		    numRemaining[node]--;
	    }
	    /*
	    System.out.println("The individual costs of the nodes are:");
	    for(int j=0;j<N;++j)
		System.out.println(j+"="+cost[j]);
	    */
	    System.out.println("Case #"+(i+1)+": "+res);

	}
	
    }

}

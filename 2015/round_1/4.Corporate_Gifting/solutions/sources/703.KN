#include <cstdio>
#include <cstring>
#include <vector>
#define FOR(i, s, e) for(int i = (s); i < e; i++)
#define FOE(i, s, e) for(int i = (s); i <= e; i++)
#define CLR(s) memset(s,0,sizeof(s))
#define PB push_back
#define ITER(v)      __typeof((v).begin())
#define FOREACH(i,v) for(ITER(v) i=(v).begin();i!=(v).end();i++)


// ...
// searched from the web
#include <sys/resource.h>
void gao() {
    const rlim_t kStackSize = 32 * 1024 * 1024;   // min stack size = 32 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            //printf("%lu\n", rl.rlim_cur);
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
}

using namespace std;
typedef long long LL;

const int N = 203600;
const int INF = 200000000;
const int K = 3;

vector<int> adj[N];

int dp[N][K + 1];

int go(int n, int k) {
    int &res = dp[n][k];
    if (res != -1) return res;
    res = k;
    FOREACH(it, adj[n]) {
        int mn = INF;
        FOE(k2, 1, K) if (k2 != k) {
            mn = min(mn, go(*it, k2));
        }
        res += mn;
    }
    return res;
}

int main() {
    gao();

    int T; scanf("%d", &T); FOE(ca, 1, T) {
        int n; scanf("%d", &n);

        FOE(i, 0, n) adj[i].clear();
        memset(dp, -1, sizeof(dp));

        FOE(i, 1, n) {
            int p; scanf("%d", &p);
            adj[p].PB(i);
        }

        int ans = INF;
        FOE(k, 1, K) ans = min(ans, go(1, k));

        printf("Case #%d: %d\n", ca, ans);
    }
    return 0;
}

#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <iostream>
using namespace std;

#define MAXN 262144
#define INF 1LL<<60
vector<int> g[MAXN];
int parent[MAXN];
pair<long long, int> dp[MAXN][2];
void update(int u) {
    dp[u][0] = dp[u][1] = make_pair(INF, 0);
    if (g[u].size() == 0) {
        dp[u][0] = make_pair(1, 1);
        dp[u][1] = make_pair(2, 2);
    } else {
        int t = 0;
        for (int j = 0; j < g[u].size(); j++) {
            int v = g[u][j];
            t = max(t, dp[v][0].second);
            t = max(t, dp[v][1].second);
        }
        t = t + 1;
        for (int i = 1; i <= t; i++) {
            long long cost = i;
            for (int j = 0; j < g[u].size(); j++) {
                int v = g[u][j];
                if (i != dp[v][0].second)
                    cost += dp[v][0].first;
                else
                    cost += dp[v][1].first;
            }
            if (dp[u][1].first > cost)
                dp[u][1] = make_pair(cost, i);
            if (dp[u][0].first > dp[u][1].first)
                swap(dp[u][0], dp[u][1]);
        }
    }
}
int visited[MAXN];
void bfs(int u) {
    memset(visited, 0, sizeof(visited));
    queue<int> Q;
    vector<int> A;
    int v;
    Q.push(u), visited[u] = 1;
    while (!Q.empty()) {
        u = Q.front(), Q.pop();
        A.push_back(u);
        for (int i = 0; i < g[u].size(); i++) {
            v = g[u][i];
            if (visited[v] == 0) {
                visited[v] = 1;
                Q.push(v);
            }
        }
    }
    for (int i = (int) A.size() - 1; i >= 0; i--)
        update(A[i]);
}
int main() {
    int testcase, cases = 0;
    int n, x;
    scanf("%d", &testcase);
    while (testcase--) {
        scanf("%d", &n);
        for (int i = 0; i <= n; i++) {
            g[i].clear();
        }
        for (int i = 1; i <= n; i++) {
            scanf("%d", &x);
            g[x].push_back(i);
            parent[i] = x;
        }
        bfs(1);
        long long ret = dp[1][0].first;
        printf("Case #%d: %lld\n", ++cases, ret);
    }
    return 0;
}
/*
 5
 3
 0 1 1
 8
 0 1 1 2 2 3 3 3
 5
 0 1 2 3 4
 9
 0 1 2 3 4 5 5 5 5
 8
 0 1 1 1 1 2 2 2
*/
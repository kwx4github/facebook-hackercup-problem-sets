#include <iostream>
#include <vector>
#include <climits>

using namespace std;

struct Node{
	vector<Node*> children;

};

static Node *nodes[200010];

struct Value{
	long long c, a, b;
};

Value dfs(Node *root){
	long long colors[100];
	for(int x=0; x<30; x++)colors[x] = x+1;


	long long optimalSum = 0;
	for(int x=0; x<root->children.size(); x++){
		Value current = dfs(root->children[x]);
		colors[current.c] += current.b-current.a;
		optimalSum += current.a;
	}
	
	long long min1 = INT_MAX, min2 = INT_MAX;
	long long bestColor = -1;

	for(int x=0; x<100; x++){
		if(colors[x] < min1){
			bestColor = x;
			min2 = min1;
			min1 = colors[x];
		} else if(colors[x] < min2){
			min2 = colors[x];
		}
	}

	Value toReturn;
	toReturn.c = bestColor;
	toReturn.a = min1 + optimalSum;
	toReturn.b = min2 + optimalSum;

	return toReturn;

}


int main(){

	int t;
	cin >> t;

	for(int test=0; test<t; test++){
	
		int n; 
		cin >> n;

		int z;
		cin >> z;
		nodes[z] = new Node();

		for(int x=1; x<n; x++){
			int parent;
			cin >> parent;

			nodes[x] = new Node();
			nodes[parent-1]->children.push_back(nodes[x]);
		}

		cout << "Case #" << test+1 << ": " << dfs(nodes[0]).a << "\n";
	
	}

}

#include <stdio.h>
#include <string.h>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <queue>
#include <cassert>
using namespace std;

/*
 * Author: Veselin Georgiev
 * Problem: "Corporate Gifting" (D)
 * Contest: Facebook Hacker Cup 2015
 */

#define FOR(i,n) for (int i = 0; i < n; i++)
#define abs(x) ((x)<0?(-(x)):(x))
#define REP(i,v) for (unsigned i = 0; i < v.size(); i++)
#define RL(i,v) for (unsigned i = 0; i < v.length(); i++)
typedef long long ll;

const int MAXC = 20;
const int MAXN = 200005;

int n;

vector<int> children[MAXN];
int dp[MAXC + 1][MAXN];

struct Node {
	int node, forbidden;
	Node() {}
	Node(int node, int forbidden) : node(node), forbidden(forbidden) {}
};

int f(int node, int forbidden, int level = 0)
{
	if (children[node].empty()) return forbidden == 1 ? 2 : 1;
	int& d = dp[forbidden][node];
	if (d != -1) return d;
	for (int myVal = 1; myVal <= MAXC; myVal++) {
		if (myVal == forbidden) continue;
		int cost = myVal;
		REP(i, children[node])
			cost += f(children[node][i], myVal, level + 1);
		if (d == -1) d = cost;
		else d = min(d, cost);
	}
	return d;
}

int solve(void)
{
	FOR(i, 200005) children[i].clear();
	scanf("%d", &n);
	int useless;
	scanf("%d", &useless);
	memset(dp, 0xff, sizeof(dp));
	for (int i = 1; i < n; i++) {
		int parent;
		scanf("%d", &parent);
		parent--;
		children[parent].push_back(i);
	}
	return f(0, 0);
}

int main(void)
{
// 	freopen("/home/vesko/hackercup/d-large.in", "rt", stdin);
	
	int T;
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		printf("Case #%d: %d\n", tc, solve());
	}
	
	return 0;
}

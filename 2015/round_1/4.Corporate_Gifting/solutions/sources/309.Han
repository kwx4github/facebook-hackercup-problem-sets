package hackercup._2015.r1;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;

public class D {

	Scanner scanner;

	private void solve() throws FileNotFoundException {
		File input = new File("data/hackercup/2015/r1/corporate_gifting.txt");
		scanner = new Scanner(input);

		File test = new File("data/hackercup/2015/r1/D.out");
		PrintStream out = new PrintStream(new FileOutputStream(test));
		System.setOut(out);

		int testCase = scanner.nextInt();
		scanner.nextLine();

		for (int i = 1; i <= testCase; i++) {
			System.out.printf("Case #%d: ", i);
			solveCase();
		}
	}

	List<Pair>[] ans;
	List<Integer>[] ch;

	private void solveCase() {
		int n = scanner.nextInt();

		ans = new List[n];
		for (int i = 0; i < n; i++) {
			ans[i] = new ArrayList<Pair>();
		}

		ch = new List[n];
		for (int i = 0; i < n; i++) {
			ch[i] = new ArrayList<Integer>();
		}

		for (int i = 0; i < n; i++) {
			int id = scanner.nextInt() - 1;
			if (id >= 0) {
				ch[id].add(i);
			}
		}

		find(0);

		System.out.println(ans[0].get(0).cost);
	}

	private void find(int id) {
		int maxc = 2;
		for (int cid : ch[id]) {
//			System.out.println(id + " - " + cid);
			find(cid);
			for (Pair p : ans[cid]) {
				maxc = Math.max(maxc, p.id + 1);
			}
		}

		List<Pair> temp = new ArrayList<Pair>();
		for (int i = 1; i <= maxc; i++) {
			int c = i;
			for (int cid : ch[id]) {
				Pair minCh = null;
				for (Pair p : ans[cid]) {
					if (p.id != i && (minCh == null || p.cost < minCh.cost)) {
						minCh = p;
					}
				}
				c += minCh.cost;
			}
			temp.add(new Pair(i, c));
		}

		Collections.sort(temp, new Comparator<Pair>() {
			@Override
			public int compare(Pair p1, Pair p2) {
				return p1.cost - p2.cost;
			}
		});

		ans[id].add(temp.get(0));
		ans[id].add(temp.get(1));
	}


	class Pair {
		int id;
		int cost;
		Pair(int id, int cost) {
			this.id = id;
			this.cost = cost;
		}
	}


	public static void main(String[] args) throws FileNotFoundException {
		new D().solve();
	}
	
}

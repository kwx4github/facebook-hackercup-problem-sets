#include<ctime>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<string>
#include<vector>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<numeric>
#include<cmath>
#include<locale>
using namespace std;
#define all(x) (x).begin(),(x).end()
#define sz(a) (int((a).size()))
typedef istringstream iss; typedef ostringstream oss; typedef long long lli;
const int costLimit = 12;
int N;
vector<int> childs[200111];
int memo[200011][costLimit+1];
int depthMemo[200011];

int recur(int node,int parCost)
{
    if(memo[node][parCost]!=-1) return memo[node][parCost];
    int rv = 1000000000;
    for(int i=1;i<=costLimit;i++) if(i!=parCost)
    {
        int cur = i;
        for(int j=0;j<childs[node].size();j++) cur+=recur(childs[node][j], i);
        rv = min(rv,cur);
    }
    return memo[node][parCost]=rv;
}

int depth(int node)
{
    if(depthMemo[node]!=-1) return depthMemo[node];
    int rv = 0;
    for(int i=0;i<childs[node].size();i++) rv=max(depth(childs[node][i]),rv);
    return depthMemo[node]=rv+1;
}

int main()
{
    cin.tie(0);
    int T; cin>>T; int cn=0;
    while(T--)
    {
        cin>>N;
        for(int i=0;i<N;i++) childs[i].clear();
        memset(memo,-1,sizeof memo);
        memset(depthMemo,-1,sizeof depthMemo);
        int par;
        for(int i=0;i<N;i++)
        {
            cin>>par;
            if(!par) continue;
            par--;
            childs[par].push_back(i);
        }
        for(int i=N-1;i>=0;i--) recur(i,0);

        int rv=recur(0,0);
        cout<<"Case #"<<++cn<<": "<<rv<<endl;
    }
}

#include <cstdio>
#include <vector>

using namespace std;

#define MAX_N  200010
#define INFTY  1000000
vector<int> adj[MAX_N];
int n;
int mincost[MAX_N];
int mincolor[MAX_N];
int nextmin_cost[MAX_N];

void dfs(int u)
{
  int d = adj[u].size();
  if(d==0) {
    mincost[u] = 1;
    mincolor[u] = 1;
    nextmin_cost[u] = 2;
    return;
  }
  int max_mincolor = -1;
  for(int i=0; i<d; i++) {
    int v = adj[u][i];
    dfs(v);
    if(mincolor[v] > max_mincolor)
      max_mincolor = mincolor[v];
  }
  mincolor[u] = -1;
  mincost[u] = INFTY;
  nextmin_cost[u] = INFTY;
  for(int c=1; c<=max_mincolor+1; c++) {
    int thiscost = 0;
    
    for(int i=0; i<d; i++) {
      int v = adj[u][i];
      if(mincolor[v] != c)
        thiscost += mincost[v];
      else
        thiscost += nextmin_cost[v];
      if(thiscost > nextmin_cost[u])
        break;
    }
    thiscost += c;
    if(thiscost < mincost[u]) {
      nextmin_cost[u] = mincost[u];
      mincost[u] = thiscost;
      mincolor[u] = c;
    } else if(thiscost == mincost[u]) {
      nextmin_cost[u] = thiscost;
    }
  }
}

void init()
{
  for(int i=0; i<n; i++)
    adj[i].clear();
}

void read_input()
{
  for(int i=0; i<n; i++) {
    int pp;
    scanf("%d",&pp);
    if(i==0)
      continue;
    pp--;
    adj[pp].push_back(i);
  }
}

void process(int tt)
{
  dfs(0);
  printf("Case #%d: %d\n",tt+1,mincost[0]);
}

main()
{
  int t;
  scanf("%d",&t);
  for(int tt=0; tt<t; tt++) {
    scanf("%d",&n);
    init();
    read_input();
    process(tt);
  }
}

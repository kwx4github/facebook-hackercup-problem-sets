#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <sstream>
#include <deque>
#include <memory.h>
#include <cassert>
#include <ctime>
#include <cstring>


using namespace std; 

#define ll long long
#pragma comment(linker, "/STACK:64000000")

const int maxn = 2e5 + 10;
const int maxk = 50;
const int inf = 1000000007;
const int mod = 1000000007;
const int dx[4] = {1, -1, 0, 0};
const int dy[4] = {0, 0, 1, -1};

int n;
int p[maxn];
vector<int> e[maxn];
int dp[maxn][maxk];
int mn[maxn][maxk];

vector<int> l, r;

void dfs(int v) {
	for (int j = 0; j < maxk; j++) {
		dp[v][j] = j + 1;
	}
	for (int i = 0; i < (int)e[v].size(); i++) {
		dfs(e[v][i]);
		for (int j = 0; j < maxk; j++) {
			dp[v][j] += mn[e[v][i]][j];
		}
	}
	l.assign(maxk, inf);
	r.assign(maxk, inf);
	l[0] = dp[v][0];
	for (int i = 1; i < maxk; i++) l[i] = min(l[i - 1], dp[v][i]);
	r[maxk - 1] = dp[v][maxk - 1];
	for (int i = maxk - 2; i >= 0; i--) r[i] = min(r[i + 1], dp[v][i]);

	for (int i = 0; i < maxk; i++) {
		mn[v][i] = inf;
		if (i) mn[v][i] = min(mn[v][i], l[i - 1]);
		if (i + 1 < maxk) mn[v][i] = min(mn[v][i], r[i + 1]);
	}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	//ios_base::sync_with_stdio(0);
    
	int T;
	scanf("%d\n", &T);
	for (int test = 1; test <= T; test++) {
		cerr << "Case #" << test << ": ";
		printf("Case #%d: ", test);

		scanf("%d\n", &n);
		for (int i = 0; i <= n; i++) {
			e[i].clear();
			memset(dp[i], 63, sizeof(dp[i]));
			memset(mn[i], 63, sizeof(mn[i]));
		}
		for (int i = 1; i <= n; i++) {
			scanf("%d", &p[i]);
			e[p[i]].push_back(i);
		}
		dfs(1);
		printf("%d\n", min(mn[1][maxk - 1], mn[1][0]));
		cerr << min(mn[1][maxk - 1], mn[1][0]) << endl;
	}
    
	return 0;
}
#include<bits/stdc++.h>
#define F first 
#define S second 
#define MP make_pair 
#define PB push_back 

#ifdef ONLINE_JUDGE
#define ll "ll"
#else
#define ll "I64"
#endif

#define SZ(a) ((int)(a.size())) 
#define ALL(a) a.begin() , a.end() 
#define FOR(i,a,n) for(int i=a;i<n;i++) 
#define FILL(a,v) memset(a , v , sizeof a) 
#define IN(a,b) ( (b).find(a) != (b).end())
#define ML 1000006 
#define MOD 1000000007 
#define si(x) scanf("%d", &x);
#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl
using namespace std;
vector < int > tree[200002];
vector <pair<int,int> > arr(200002);
int parent[200002];
int answer[200002];
void dfs(int i)
{
	stack <pair <int,int> > s;
	s.push(MP(i,0));
	while(!s.empty())
	{
		int node = s.top().F;
		if(tree[node].size() == 0)
		{
			arr[node].F = s.top().S;
			int k = s.top().S;
			s.pop();
			if(!s.empty())
				s.top().S = max(s.top().S,k+1);
		}

		else
		{
			s.push(MP(tree[node].back(), 0));
			tree[node].pop_back();
		}
			
	
		//int maxi = 0;
		
		//arr[i].F = maxi;
		//int k = s.top().S;
		//return maxi + 1;
	}	
	return;
}

int main()
{
	int t;
	si(t);
	FOR(T,1,t+1)
	{
		int n;
		si(n);
		FOR(i,0,n+1)
		{
			answer[i] = 1;
			arr[i].S = i;
		}

		FOR(i,0,n+1)
			tree[i].clear();
		FOR(i,1,n+1)
		{
			int u;
			si(u);
			tree[u].PB(i);
			parent[i] = u;
		}
		dfs(0);
		sort(arr.begin(), arr.begin() + n + 1);
		FOR(i,0,n)
		{	
			if(answer[parent[arr[i].S]] == answer[arr[i].S])
				answer[parent[arr[i].S]]++;
		}
		
		long long ans = 0;
		FOR(i,1,n+1)
			ans += (long long) answer[i];
		printf("Case #%d: %lld\n",T, ans); 
		
	}

	return 0;
}

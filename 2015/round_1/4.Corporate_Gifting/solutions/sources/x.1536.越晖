// try.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<string>
#include<set>
#include<queue>
#include<vector>
#include<sstream>
#include<iostream>
#pragma warning(disable:4996)
using namespace std;

#include <math.h>
#include <stdio.h>

#define eps 1e-8

int n, du[200010];
struct data{
	int y, next;
}tree[200010];

int tot, first[200010], fa[200010], sco[200010], cnt[200010];
void add(int x, int y)
{
	tot++;
	tree[tot].y = y;
	tree[tot].next = first[x];
	first[x] = tot;
	du[x]++;
}
int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int tk, tk1 = 0;
	scanf("%d", &tk);
	while (tk--)
	{
		tk1++;
		int x;
		memset(du, 0, sizeof(du));
		memset(first, 0, sizeof(first));
		memset(sco, 0, sizeof(sco));
		tot = 0;
		scanf("%d", &n);
		scanf("%d", &x);
		for (int i = 1; i < n; i++)
		{
			scanf("%d", &x);
			add(x, i+1);
			fa[i + 1] = x;
		}
		queue<int> que;
		for (int i = 1; i <= n; i++)
		{
			cnt[i] = du[i];
			if (du[i] == 0)
			{
				que.push(i);
			}
		}
		long long res = 0;
		long long res1 = 0;
		queue<pair<int, int>> que1;
		int ji = 0, ou = 0;
		que1.push(make_pair(1,0));
		ou++;
		while (!que1.empty())
		{
			pair<int, int> now = que1.front();
			que1.pop();
			int e1 = now.first;
			int e2 = now.second;
			for (int i = first[e1]; i; i = tree[i].next)
			{
				que1.push(make_pair(tree[i].y, e2 ^ 1));
				if (e2 == 0)
				{
					ji++;
				}
				else {
					ou++;
				}
			}
		}
		res1 = min(ji * 2 + ou, ou * 2 + ji);
		while (!que.empty())
		{
			int now = que.front();
			que.pop();
			multiset<int> st;
			for (int i = first[now]; i; i = tree[i].next)
			{
				st.insert(sco[tree[i].y]);
			}
			int minSco = 1;
			while (st.count(minSco))
			{
				minSco++;
			}
			res += minSco;
			if (cnt[now] == 1)
			{
				minSco = min(minSco, *(st.begin()));
			}
			sco[now] = minSco;
			if ((--du[fa[now]]) == 0)
			{
				que.push(fa[now]);
			}
		}
		res = min(res, res1);
		printf("Case #%d: %I64d\n", tk1, res);
	}
	return 0;
}
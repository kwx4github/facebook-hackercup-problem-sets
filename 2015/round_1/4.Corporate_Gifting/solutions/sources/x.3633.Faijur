#include<set>
#include<map>
#include<queue>
#include<tuple>
#include<bitset>
#include<climits>
#include<algorithm>
#include<vector>
#include<string>
#include<cstring>
#include<iostream>
#include <sstream>
#include <fstream>
using namespace std;

#define LOOP(i,s,n) for(int i=(s);i<(n);i++)
#define loop(i,n) for(int i=0;i<(n);i++)
#define MAX(mVal, oVal) (mVal) = max((mVal),(oVal))
#define MIN(mVal, oVal) (mVal) = min((mVal),(oVal))
#define All(c) (c).begin(),(c).end()
#define ZERO(arr) memset(arr,0,sizeof(arr))
#define FILL(arr,val) memset(arr,val,sizeof(arr))

#define MOD 1000000007
#define _N 100
int dp[_N][_N];

#define FILE_NAME_SAMPLE "1.sample"
#define FILE_NAME_SMALL "result"
//#define FILE_NAME_LARGE "3.large"

class hackerCup
{
public:
	vector<vector<int>> tree, depth;
	vector<bool> leaf; vector<int> leafCnt;

	int bfs(int X, int src)
	{ 
		int height=0; queue<tuple<int,int>> q; 
		vector<bool> seen; seen.resize(X,false); 
		depth[0].push_back(src); 
		q.push(make_tuple(src,0)); 
		seen[src]=true; 
		
		while(!q.empty())
		{ 
			int u,h; tie(u,h)=q.front(); q.pop();
			MAX(height,h+1);

			for(int v:tree[u]) if(!seen[v])
			{ 
				depth[h+1].push_back(v);
				q.push(make_tuple(v,h+1)); 
				seen[v]=true;
				
			}
		} 
		return height;
	}

	int optimize(int start, int maxDepth)
	{
		int c=0;
		for(int h=start; h<maxDepth; h+=2)
			loop(idx,depth[h].size())
				c+=max(2,leafCnt[depth[h][idx]])-2;
		return c;
	}

	int calculateOuput(vector<int> in)
	{
		int ans=INT_MAX,res, X = in.size();

		tree.resize(0); tree.resize(X); 
		depth.resize(0); depth.resize(X);
		leaf.resize(0); leaf.resize(X,false);
		leafCnt.resize(0); leafCnt.resize(X,0);

		loop(i,X) if(in[i]) tree[in[i]-1].push_back(i);
		loop(i,X) leaf[i]=(tree[i].size()==0);
		loop(i,X) loop(j,tree[i].size()) if(leaf[tree[i][j]]) leafCnt[i]++;
						

		int maxDepth=bfs(X,0);
		int odd,evn; odd=evn=0;
		for(int i=0; i<maxDepth; i+=2) evn+=depth[i].size();
		for(int i=1; i<maxDepth; i+=2) odd+=depth[i].size();

		res=evn+2*odd; 
		res-=optimize(0,maxDepth);
		MIN(ans,res);

		res=2*evn+odd; 
		res-=optimize(1,maxDepth);
		MIN(ans,res);

		return ans;
	}

	void processInput(string fileName)
	{
		ifstream fin(fileName + ".in" );
		ofstream fout(fileName + ".out");	

		int T; fin >> T;
		loop(t,T)
		{
			vector<int> input;
			int X, val;
			fin >> X;

			loop(i,X) 
			{
				fin >> val;
				input.push_back(val);
			}
			int ans = calculateOuput(input);
			fout << "Case #" << t+1 << ": " << ans << endl;
		}

		fin.close(); fout.close();
	}
};

class unitTesting
{
public:
	void run_test(string sampleFileName) 
	{ 
		const int GET_LINE_LENGHT = 100;
		ifstream fSampleIn(sampleFileName + ".in");
		ifstream fSampleOut(sampleFileName +  ".out");
		ifstream fSampleOutForVerify("1.sampleForVerify.out");

		int X;
		fSampleIn >> X;
		loop(i,X)
		{
			char resultFromProgram[GET_LINE_LENGHT+1], sampleForVerifyOutput[GET_LINE_LENGHT+1];
			fSampleOut.getline(resultFromProgram,GET_LINE_LENGHT);
			fSampleOutForVerify.getline(sampleForVerifyOutput,GET_LINE_LENGHT);
			if(strcmp(resultFromProgram,sampleForVerifyOutput) == 0) cout << "Case " << i+1 << ": Passed" << endl;
			else
			{
				cout << "Case " << i+1 << ": Failed" << endl;
				cout << "\tExpected: " << sampleForVerifyOutput << endl; 
				cout << "\tReceived: " << resultFromProgram << endl << endl; 
			}
		}

		fSampleIn.close(); fSampleOut.close(); fSampleOutForVerify.close();
	}
};

int main()
{
	hackerCup hackerCupObj;

	//Test Code
	#ifdef FILE_NAME_SAMPLE
		cout << "Unit Testing... " << endl;
		hackerCupObj.processInput(FILE_NAME_SAMPLE);
		unitTesting testProgramOutput;
		testProgramOutput.run_test(FILE_NAME_SAMPLE);
		cout << endl;
	#else
		#ifndef FILE_NAME_SMALL
			#ifndef FILE_NAME_LARGE  
				cout << "Unit Testing... " << endl;
				hackerCupObj.processInput("sample");
				unitTesting testProgramOutput;
				testProgramOutput.run_test("sample");
				cout << endl;
			#endif
		#endif
	#endif

	#ifdef FILE_NAME_SMALL
		cout << "Small Input: ";
		hackerCupObj.processInput(FILE_NAME_SMALL);
		cout << "Complete!" << endl;
	#endif

	#ifdef FILE_NAME_LARGE
		cout << "Large Input: ";
		hackerCupObj.processInput(FILE_NAME_LARGE);
		cout << "Complete!" << endl;
	#endif

	return 0;
}
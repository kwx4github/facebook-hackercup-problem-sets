package round1;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class D {
	
	private static class Cost {
		int gift, minCost, otherGiftExtraCost;

		public Cost(int gift, int minCost, int otherGiftExtraCost) {
			this.gift = gift;
			this.minCost = minCost;
			this.otherGiftExtraCost = otherGiftExtraCost;
		}
	}
	
	private static List<Integer>[] children;
	
	// run JVM with -Xss15M parameter
	private static Cost getCost(int node) {
		if (children[node].isEmpty()) return new Cost(1, 1, 1);
		int[] extraCost = new int [children[node].size() + 3];
		for (int i = 1; i < extraCost.length; i++) extraCost[i] = i;
		int baseCost = 0;
		for (Integer child : children[node]) {
			Cost cost = getCost(child);
			baseCost += cost.minCost;
			extraCost[cost.gift] += cost.otherGiftExtraCost;
		}
		int[] bestCost = { Integer.MAX_VALUE, Integer.MAX_VALUE };
		int bestGift = -1;
		for (int i = 1; i < extraCost.length; i++) {
			if (extraCost[i] < bestCost[0]) {
				bestGift = i;
				bestCost[1] = bestCost[0];
				bestCost[0] = extraCost[i];
			} else if (extraCost[i] < bestCost[1]) {
				bestCost[1] = extraCost[i]; 
			}
		}
		return new Cost(bestGift, bestCost[0] + baseCost, bestCost[1] - bestCost[0]);
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int cases = sc.nextInt();
		for (int caze = 1; caze <= cases; caze++) {
			int N = sc.nextInt();
			children = new List[N];
			for (int i = 0; i < N; i++) children[i] = new ArrayList<Integer>();
			for (int i = 0; i < N; i++) {
				int parent = sc.nextInt() - 1;
				if (parent >= 0) children[parent].add(i);
			}
			
			System.out.println("Case #" + caze + ": " + getCost(0).minCost);
		}
	}
}

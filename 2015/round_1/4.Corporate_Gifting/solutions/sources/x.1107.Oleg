import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.Arrays;

public class Round1Problem4 {
	
	private class Vertex {
		long color, sumValue = 0;
		ArrayList<Integer> children = new ArrayList<Integer>();
	}
	
	private StreamTokenizer in;
	private Vertex v[];
	
	private int nextInt() throws Exception {
		in.nextToken();
		return (int) in.nval;
	}
	
	private void dfs(int vert) {
		for (Integer ch : v[vert].children) {
			dfs(ch);
		}
		long tmp[] = new long[v[vert].children.size()];
		for (int j = 0, l = v[vert].children.size(); j < l; ++j) {
			int ch = v[vert].children.get(j);
			tmp[j] = v[ch].color;
			v[vert].sumValue += v[ch].sumValue;
		}
		Arrays.sort(tmp);
		int curColor = 1;
		long prev = 0;
		for (int j = 0, l = v[vert].children.size(); j < l; ++j) {
			if (tmp[j] - prev == 0) {
				continue;
			} else if (tmp[j] - prev == 1) {
				++curColor;
			} else {
				break;
			}
			prev = tmp[j];
		}
		v[vert].color = curColor;
		v[vert].sumValue += curColor;
	}

	private void solve() throws Exception {
		PrintWriter pw = new PrintWriter(new File("output.txt"));
		in = new StreamTokenizer(new BufferedReader(new FileReader(new File("corporate_gifting.txt"))));
		int t = nextInt();
		for (int i = 0; i < t; ++i) {
			int n = nextInt();
			v = new Vertex[n];
			for (int j = 0; j < n; ++j) {
				v[j] = new Vertex();
			}
			nextInt();
			for (int j = 1; j < n; ++j) {
				int p = nextInt() - 1;
				v[p].children.add(j);
			}
			dfs(0);
			pw.println("Case #" + (i + 1) + ": " + v[0].sumValue);
		}
		pw.flush();
	}
	
	public static void main(String[] args) throws Exception {
		new Round1Problem4().solve();
	}

}
import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			Solver solver = new Solver();
			out.format("Case #%d: ", t + 1);
			solver.solve(in, out);
		}
		out.close();
	}
}

class Solver {
	List<Integer>[] e, dp;
	int[] mn, mn2, nm;
	void getDP(int v) {
		int n = e[v].size() + 2;
		int[] dp = new int[n];
		int csum = 0;
		for (int c : e[v]) {
			getDP(c);
			csum += mn[c];
		}
		List<Integer>[] a = new List[n];
		for (int i = 0; i < n; i++) {
			a[i] = new ArrayList<Integer>();
		}
		for (int c : e[v]) {
			if (nm[c] < n)
				a[nm[c]].add(c);
		}
		for (int i = 0; i < n; i++) {
			dp[i] = i + 1 + csum;
			for (int c : a[i])
				dp[i] += mn2[c] - mn[c];
		}
		mn[v] = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			if (dp[i] < mn[v]) {
				mn[v] = dp[i];
				nm[v] = i;
			}
		}
		mn2[v] = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			if (dp[i] < mn2[v] && i != nm[v]) {
				mn2[v] = dp[i];
			}
		}
	}
	public void solve(InputReader in, PrintWriter out) {
		int n = in.nextInt();
		int[] p = new int[n];
		mn = new int[n];
		mn2 = new int[n];
		nm = new int[n];
		e = new List[n];
		for (int i = 0; i < n; i++) {
			e[i] = new ArrayList<Integer>();
		}
		for (int i = 0; i < n; i++) {
			p[i] = in.nextInt() - 1;
			if (p[i] > -1)
				e[p[i]].add(i);
		}
		getDP(0);
		out.println(mn[0]);
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

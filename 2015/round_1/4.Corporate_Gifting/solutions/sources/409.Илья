#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
using namespace std;

typedef long long int int64;

const int N = (int)2e5 + 100;
const int64 INF = (int64)1e18;

struct item
{
	int num;
	int64 val;

	item(): num(-1), val(INF) {}
	item(int _num, int64 _val): num(_num), val(_val) {}

	bool operator < (const item & r) const
	{
		return val < r.val;
	}
};

int n;
vector<int> graph[N];

void relax(pair<item, item> &a, item b)
{
	if (b < a.first)
	{
		a.second = a.first;
		a.first = b;
	}
	else if (b < a.second)
		a.second = b;
}

pair<item, item> dfs(int v)
{
	map<int, int64> mapchick;
	int64 sum = 0;
	int max_cur = 2;

	for (int to : graph[v])
	{
		auto res = dfs(to);
		max_cur = max(max_cur, max(res.first.num, res.second.num) + 1);
		sum += res.first.val;
		mapchick[res.first.num] += res.second.val - res.first.val;
	}

	pair<item, item> res;

	for (int cur = 1; cur <= max_cur; cur++)
	{
		int64 local_sum = sum + mapchick[cur] + cur;
		relax(res, item(cur, local_sum));
	}

	return res;
}

int64 solve()
{
	scanf("%d", &n);
	
	for (int i = 0; i < n; i++)
		graph[i].clear();
	
	for (int i = 0; i < n; i++)
	{
		int p;
		scanf("%d", &p);
		p--;
		if (p != -1)
			graph[p].push_back(i);
	}

	int64 res = dfs(0).first.val;
	
	return res;
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);

	for (int i = 0; i < t; i++)
		printf("Case #%d: %lld\n", i + 1, solve());

	return 0;
}

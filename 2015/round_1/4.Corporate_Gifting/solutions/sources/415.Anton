#pragma comment(linker, "/STACK:268435456")
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <algorithm>
#include <memory.h>

using namespace std;

#define forn(i, n) for(int i = 0; i < (n); ++i)
#define forv(i, a) forn(i, (int)a.size())


const int kMaxColor = 70;
int d[200010][kMaxColor + 5];
int n;
vector<int> graph[200005];

void read() {
    scanf("%d", &n);

    forn(i, n) {
        graph[i].clear();
    }

    forn(i, n) {
        int t;
        scanf("%d", &t);

        if (t == 0) {
            continue;
        } else {
            --t;
        }

        graph[t].push_back(i);
    }
}

int mright[kMaxColor + 5];
int mleft[kMaxColor + 5];
void invert(int v) {
    memcpy(mright, d[v], sizeof(mright));
    memcpy(mleft, d[v], sizeof(mleft));

    for (int i = 1; i < kMaxColor; ++i) {
        mleft[i] = min(mleft[i], mleft[i - 1]);
    }

    for (int j = kMaxColor - 2; j >= 0; --j) {
        mright[j] = min(mright[j], mright[j + 1]);
    }


    d[v][0] = mright[1];
    d[v][kMaxColor - 1] = mleft[kMaxColor - 2];
    for (int i = 1; i < kMaxColor - 1; ++i) {
        d[v][i] = min(mleft[i - 1], mright[i + 1]);
    }
}

void dfs(int v) {
    forn(i, kMaxColor) {
        d[v][i] = i + 1;
    }


    forv(j, graph[v]) {
        int to = graph[v][j];
        dfs(to);
    }

    forv(j, graph[v]) {
        int to = graph[v][j];

        forn(i, kMaxColor) {
            d[v][i] += d[to][i];
        }
    }

    invert(v);
}

int solve() {
    read();

    dfs(0);

    return min(d[0][0], d[0][1]);
}

int main() {
#ifdef __ASD__
	//freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);
#endif
    //ios_base::sync_with_stdio(false); cin.tie(0);

    int T;
    scanf("%d", &T);

    for (int tc = 0; tc < T; ++tc) {
        printf("Case #%i: %d\n", tc + 1, solve());
    }

	return 0;
}
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Scanner;

public class CorporateGifting {
	static final int MAX = 50;

	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(new File("CorporateGifting.in"));
		PrintStream out = new PrintStream("CorporateGifting.out");
		int T = in.nextInt();
		for (int kase = 1; kase <= T; kase++) {
			int N = in.nextInt();
			int[] boss = new int[N];
			for (int i = 0; i < N; i++) {
				boss[i] = in.nextInt();
			}
			out.println("Case #" + kase + ": " + solve(N, boss));
		}
		in.close();
		out.flush();
		out.close();
	}

	static ArrayList<ArrayList<Integer>> child;

	static long solve(int n, int[] boss) {
		child = new ArrayList<ArrayList<Integer>>();
		for (int i = 0; i <= n; i++) {
			child.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < n; i++) {
			child.get(boss[i]).add(i + 1);
		}
		int[] depth = new int[n + 1];
		LinkedList<Integer> Q = new LinkedList<Integer>();
		Q.add(1);
		depth[1] = 1;
		while (!Q.isEmpty()) {
			int now = Q.remove();
			for (int ch : child.get(now)) {
				if (depth[ch] == 0) {
					depth[ch] = depth[now] + 1;
					Q.add(ch);
				}
			}
		}
		Integer[] order = new Integer[n + 1];
		for (int i = 0; i < order.length; i++) {
			order[i] = i;
		}
		Arrays.sort(order, 1, order.length, new Comparator<Integer>() {
			public int compare(Integer a, Integer b) {
				return depth[b] - depth[a];
			}
		});
		seen = new boolean[MAX + 1][n + 1];

		for (int root = 1; root <= n; root++) {
			for (int gift = 1; gift <= MAX; gift++) {
				gift(gift, order[root]);
			}
		}

		long ans = Long.MAX_VALUE;
		for (int i = 1; i <= MAX; i++) {
			ans = Math.min(ans, gift(i, 1));
		}
		return ans;
	}

	static boolean[][] seen;
	static long[][] memo = new long[MAX + 1][200011];

	static long gift(int gift, int root) {
		if (seen[gift][root])
			return memo[gift][root];
		long ans = gift;
		for (int ch : child.get(root)) {
			long min = 1L << 40;
			for (int g = 1; g <= MAX; g++) {
				if (g != gift) {
					min = Math.min(min, gift(g, ch));
				}
			}
			ans += min;
		}
		seen[gift][root] = true;
		return memo[gift][root] = ans;
	}
}

#include <bits/stdc++.h>
#include <sys/resource.h>
using namespace std;

// Useful constants
#define INF                         numeric_limits<int>::max()
#define EPS                         1e-9

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd

vector<vector<int> > children;
vector<set<int> > incomingValues;
vector<int> out;
int recurse(int node){
	if(children[node].empty()){
		return out[node] = 1;
	}
	for(vector<int>::iterator it=children[node].begin();it!=children[node].end();it++){
		incomingValues[node].insert(recurse(*it));
	}
	int answer = 1;
	while(incomingValues[node].find(answer)!=incomingValues[node].end()) answer++;
	if(node==0)
		return out[node] = 0;
	else return out[node] = answer;
}

int main(){


    const rlim_t kStackSize = 32 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0){
        if (rl.rlim_cur < kStackSize){
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
        }
    }
	int t;
	int c=1;
	scanf("%d",&t);
	while(t--){
		int n;
		scanf("%d",&n);
		
		children.clear();
		out.clear();
		incomingValues.clear();

		children.resize(n+2);
		out.resize(n+2);
		incomingValues.resize(n+2);

		out[0] = 0;
		int num;
		for(int i=1;i<=n;i++){
			scanf("%d",&num);
			children[num].push_back(i);
		}
		int r = recurse(0);
		int sum = 0;
		for(int i=0;i<out.size();i++)
			sum+=out[i];
		printf("Case #%d: %d\n",c++,sum);
	}
	return 0;
}


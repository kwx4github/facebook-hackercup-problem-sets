#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for( it = coll.begin(); it != coll.end(); ++it)
const int MAXN = 35000;
typedef long long LL;



struct node
{
	int m = 0;
	vector<int> childs;
};

node tree[200005];

int D[200005][32];

int rec(int v, int cant, int maxb)
{
	
	int min = 200005 * 32;
	for (int i = 1; i <= maxb; i++)
	{
		if (i != cant)
		{
			if (D[v][i] == -1)
			{
				D[v][i] = i;
				for (int j = 0; j < tree[v].childs.size(); j++)
				{
					D[v][i] += rec(tree[v].childs[j], i, maxb);
				}
			}
			if (D[v][i] < min) min = D[v][i];
		}
	}

	return min;
}


int main() {
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{		
		mems(tree, 0);
		mems(D, -1);
		
		int n;
		scanf("%d", &n);
		int maxb = log(n) + 1;
		
		int temp;
		scanf("%d", &temp);

		for (int i = 1; i < n; i++)
		{
			scanf("%d", &temp);
			tree[temp - 1].childs.push_back(i);
		}

		cout << "Case #" << t+1<<": " << rec(0, 0, maxb) << endl;
	}

	return 0;
}
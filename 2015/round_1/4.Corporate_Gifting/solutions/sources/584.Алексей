#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <deque>
#include <complex>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(s) int((s).size())
#define all(s) (s).begin(), (s).end()
#if ( _WIN32 || __WIN32__ || _WIN64 || __WIN64__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#ifdef LOCAL42
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif
#define y0 yy0
#define y1 yy1
#define next _next
#define prev _prev
#define rank _rank
#define link _link
#define hash _hash
#define fs first
#define sc second

typedef long long ll;
typedef long long llong;
typedef long long int64;
typedef unsigned int uint;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned long long ullong;
typedef unsigned long long lint;
typedef pair<int, int> pii;
typedef vector<int> vi;

const ll inf = ll(1e17);
const double eps = 1e-4;
const double pi = 4 * atan(double(1));
const int N = int(2e5) + 100;

int n;
vi g[N];
pair<ll, int> d1[N], d2[N];
map<int, ll> diffs;
set<int> used;

void dfs(int v) {
    for (int i = 0; i < sz(g[v]); ++i) {
        dfs(g[v][i]);
    }
    if (sz(g[v]) == 0) {
        d1[v] = mp(1, 1);
        d2[v] = mp(2, 2);
        return;
    }
    diffs.clear();
    ll sum = 0;
    for (int i = 0; i < sz(g[v]); ++i) {
        diffs[d1[g[v][i]].sc] += d2[g[v][i]].fs - d1[g[v][i]].fs;
        sum += d1[g[v][i]].fs;
    }
    d1[v] = d2[v] = mp(inf, -1);
    used.clear();
    for (map<int, ll>::iterator it = diffs.begin(); it != diffs.end(); ++it) {
        pair<ll, int> cur = mp(sum + it->sc + it->fs, it->fs);
        if (cur < d1[v]) {
            d2[v] = d1[v];
            d1[v] = cur;
        } else {
            d2[v] = min(d2[v], cur);
        }
        for (int j = -4; j <= 4; ++j) {
            if (it->fs + j < 1 || it->fs + j > n) {
                continue;
            }
            if (used.find(it->fs + j) == used.end() && diffs.find(it->fs + j) == diffs.end()) {
                used.insert(it->fs + j);
                cur = mp(sum + it->fs + j, it->fs + j);
                if (cur < d1[v]) {
                    d2[v] = d1[v];
                    d1[v] = cur;
                } else {
                    d2[v] = min(d2[v], cur);
                }
            }
        }
    }
}

inline void solve() {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        g[i].clear();
    }
    for (int i = 0; i < n; ++i) {
        int p;
        scanf("%d", &p);
        --p;
        if (p != -1) {
            g[p].pb(i);
        }
    }
    dfs(0);
    printf(LLD "\n", d1[0].fs);
}

int main() {
#ifdef LOCAL42
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    
#endif
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: ", i + 1);
        solve();
        cerr << "Case " << i << endl;
    }
    return 0;
}

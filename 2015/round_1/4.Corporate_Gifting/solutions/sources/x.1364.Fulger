#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 200001


typedef struct {
 int n;
 char finished;
 int kids[MAX];
} node;

int n;

int K1[MAX], C[MAX], K2[MAX];
node* tree;

void reset() {
  memset(K1, 0, sizeof(int) * MAX);
  memset(K2, 0, sizeof(int) * MAX);
  memset(C, 0, sizeof(int) * MAX);
  free(tree);
}

void debug() {

  int i;

  for (i = 0; i < n + 1; i++) {
    printf("(%d,%d,%d) ", K1[i], C[i], K2[i]);
  }
  printf("\n");

  for (i = 0; i < n + 1; i++) {
    printf("(%d,%d) -> ", i, tree[i].n);
    int j;
    for (j = 0; j < tree[i].n; j++) {
      printf("%d ",tree[i].kids[j]);
    }
    printf("\n");
  }
  printf("\n");

}

void calculateNode(int v) {
  int k, i,j,l;
  int d = tree[v].n;

  int* delta = (int*) malloc(sizeof(int) * (d + 2));

  for (i = 0, k = 0; i < d; i++) {
    k += K1[tree[v].kids[i]];
  }

  for (i = 1; i <= d + 1; i++) {
    delta[i] = k;
  }
  for (i = 0; i < d; i++) {
    if (C[tree[v].kids[i]] <  d + 1) {
      delta[C[tree[v].kids[i]]] += (K2[tree[v].kids[i]] - K1[tree[v].kids[i]]);
    }
  }

  int min = MAX;
  int ind;
  for (i = 1; i <= d + 1; i++) {
    if (min > delta[i]) {
      min = delta[i];
      ind = i;
    }
  }
  K1[v] = min;
  C[v] = ind;
  min = MAX;

  for (i = 1; i <= d + 1; i++) {
    if (delta[i] < min && delta[i] != K1[v]) {
      min = delta[i];
    }
  }

  K2[v] = min;
  free(delta);
}

void calculate(int v) {
  if (tree[v].n != 0) {
    calculateNode(v);
  } else {
    K1[v] = 1;
    C[v] = 1;
    K2[v] = 2;
  }

  tree[v].finished = 1;
}

void recurse(int v) {
  if (!(tree[v].finished || tree[v].n == 0)) {
    int i;
    for (i = 0; i < tree[v].n; i++) {
      recurse(tree[v].kids[i]);
    }
  }
  calculate(v);
}

int solve() {
  int i, result = 0;
  recurse(1);
  for (i = 1; i <= n; i++) {
    result += C[i];
  }
  return result;
}

int main() {
  int i, j, t, p;
  scanf("%d", &t);

  for (i = 0; i < t; i++) {
    scanf("%d", &n);
    tree = (node*) calloc (n + 1, sizeof(node));
    for (j = 0; j < n; j++) {
      scanf("%d", &p);
      if (p != 0) {
        tree[p].kids[tree[p].n++] = j + 1;
      }
    }
    printf("Case #%d: %d\n", i + 1, solve());

    reset();
  }

  return 0;
}

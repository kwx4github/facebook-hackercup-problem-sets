#define _CRT_SECURE_NO_DEPRECATE
#pragma comment (linker, "/stack:64000000")

#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <deque>
#include <set>
#include <bitset>
#include <map>
#include <memory.h>
#include <cassert>

using namespace std;

#define fo(a,b,c) for (int a = (b); a < (c); a++)
#define fr(a,b) fo(a, 0, (b))
#define fi(n) fr(i, (n))
#define fj(n) fr(j, (n))
#define fk(n) fr(k, (n))
#define fd(a,b,c) for (int a = (b); a >= (c); a--)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define _(a,b) memset((a), (b), sizeof(a))
#define __(a) memset((a), 0, sizeof(a))
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back

typedef long long lint;
typedef pair<lint, int> pii;

const int INF = 1000000000;
const lint LINF = 4000000000000000000LL;
const double eps = 1e-9;

int ni() { int a; scanf( "%d", &a ); return a; }
double nf() { double a; scanf( "%lf", &a ); return a; }
char sbuf[100005]; string ns() { scanf( "%s", sbuf ); return sbuf; }
long long nll() { long long a; scanf( "%lld", &a ); return a; }

void prepare()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	freopen("d.in", "r", stdin);
	freopen("d.out", "w", stdout);
#endif
}

void panic(bool expression = false)
{
	if (!expression)
	{
		cerr << "PANIC!" << endl;
		assert(false);
	}
}

const int maxn = 200100;

int n;
vector<int> g[maxn];
pii bst1[maxn], bst2[maxn];

void clear()
{
	fi(n)
		g[i].clear();
}

void upd(int id, lint s, int num)
{
	pii q = mp(s, num);
	if (q < bst1[id])
	{
		bst2[id] = bst1[id];
		bst1[id] = q;
	}
	else if (q < bst2[id])
	{
		bst2[id] = q;
	}
}

void calc(int id)
{
	map<int, vector<int> > ma;
	if (sz(g[id]) == 0)
	{
		bst1[id] = mp(1, 1);
		bst2[id] = mp(2, 2);
		return;
	}
	lint s = 0;
	fi(sz(g[id]))
	{
		int to = g[id][i];
		calc(to);
		ma[bst1[to].second].pb(to);
		s += bst1[to].first;
	}
	bst1[id] = mp(LINF, INF);
	bst2[id] = mp(LINF, INF);
	for (int i = 1, cc = 0; ; i++)
	{
		if (ma.find(i) == ma.end())
		{
			upd(id, s + i, i);
			cc++;
			if (cc == 2)
				break;
		}
	}
	for (map<int, vector<int> >::iterator it = ma.begin(); it != ma.end(); ++it)
	{
		vector<int> &v = it->second;
		lint s2 = s;
		fi(sz(v))
		{
			int to = v[i];
			s2 -= bst1[to].first;
			s2 += bst2[to].first;
		}
		upd(id, s2 + it->first, it->first);
	}
}

void solve(int test_num)
{
	cerr << test_num << endl;
	printf("Case #%d: ", test_num);
	scanf("%d", &n);
	fi(n)
	{
		int a = ni();
		a--;
		if (a >= 0)
			g[a].pb(i);
	}
	calc(0);
	cout << bst1[0].first << endl;
	fi(n)
	{
		assert(bst1[i].second != bst2[i].second);
	}
	clear();
}

int main()
{
	prepare();
	int number_of_tests;
	scanf("%d\n", &number_of_tests);
	fi(number_of_tests)
		solve(i + 1);
	return 0;
}
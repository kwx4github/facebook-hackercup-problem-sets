#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009
#define mod7 1000000007
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1 , cs;
/*********default*********/
#define N 200010
#define B 50
int n , p[ N ] , son[ N ];
int dp[ N ][ B ];
int ans;
vector<int> v[ N ];
void build(){

}
queue<int> Q;
void init(){
    n = getint();
    for( int i = 1 ; i <= n ; i ++ )
        for( int j = 1 ; j < B ; j ++ )
            dp[ i ][ j ] = 0;
    for( int i = 0 ; i <= n ; i ++ )
        v[ i ].clear() , son[ i ] = 0;
    for( int i = 1 ; i <= n ; i ++ ){
        p[ i ] = getint();
        v[ p[ i ] ].PB( i );
        son[ p[ i ] ] ++;
    }
    for( int i = 1 ; i <= n ; i ++ )
        if( son[ i ] == 0 )
            Q.push( i );
}
void DP(){
    while( Q.size() ){
        int now = Q.front(); Q.pop();
        for( int vl = 1 ; vl < B ; vl ++ ){
            int tdp = 0;
            for( int i = 0 ; i < (int)v[ now ].size() ; i ++ ){
                int ta = -1;
                for( int j = 1 ; j < B ; j ++ ){
                    if( j == vl ) continue;
                    int tb = dp[ v[ now ][ i ] ][ j ];
                    if( ta == -1 || tb < ta ) ta = tb;
                }
                assert( ta >= 0 );
                tdp += ta;
            }
            dp[ now ][ vl ] = vl + tdp;
        }
        son[ p[ now ] ] --;
        if( son[ p[ now ] ] == 0 )
            Q.push( p[ now ] );
    }
}/*
ll DP( int now , int vl ){
    if( dp[ now ][ vl ] ) return dp[ now ][ vl ];
    ll tdp = 0;
    for( int i = 0 ; i < (int)v[ now ].size() ; i ++ ){
        ll ta = -1;
        for( int j = 1 ; j < B ; j ++ ){
            if( j == vl ) continue;
            ll tb = DP( v[ now ][ i ] , j );
            if( ta == -1 || tb < ta ) ta = tb;
        }
        tdp += ta;
    }
    return dp[ now ][ vl ] = vl + tdp;
}*/
void solve(){
    DP();
    ans = dp[ 1 ][ 1 ];
    for( int i = 2 ; i < B ; i ++ )
        ans = min( ans , dp[ 1 ][ i ] );    
    printf( "Case #%d: %d\n" , ++ cs , ans );
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

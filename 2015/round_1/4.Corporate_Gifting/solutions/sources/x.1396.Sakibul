#include <bits/stdc++.h>

using namespace  std;

typedef long long ll;

#define clr(a) (a.clear())
#define MP(a,b) make_pair(a,b)
#define sz(x) (int)x.size()
#define mem(a,b) memset(a, b, sizeof(a))
#define Unique(store) store.resize(unique(store.begin(),store.end())-store.begin())
#define pb push_back
#define FAST ios_base::sync_with_stdio(0);cin.tie(0);

#define X first
#define Y second

typedef pair<int , int> pii;
typedef pair<ll , ll> pll;
const ll inf = 1;
const ll mod = 1LL;

#define SZ 200000+10

vector <int> adj[SZ];
queue <int> Q;
vector <int> v;

struct data {
    int col1, col2;
    ll cost1, cost2;
};

data arr[SZ];

int main() {
    #if defined JESI
        freopen("corporate_gifting.txt", "r", stdin);
        freopen("2.txt", "w", stdout);
    #endif

    int t;
    scanf("%d", &t);

    for (int cs = 0; cs < t; cs++) {
        int n;
        scanf("%d", &n);

        for (int i = 0; i <= n; i++) {
            clr(adj[i]);
            arr[i].cost1 = 1E16;
            arr[i].cost2 = 1E16;
            arr[i].col1 = 0;
            arr[i].col2 = 0;
        }

        for (int i = 1; i <= n; i++) {
            int x;
            scanf("%d", &x);
            adj[x].pb(i);
        }

        clr(v);
        Q.push(1);

        while (!Q.empty()) {
            int u = Q.front(); Q.pop();
            v.push_back(u);
            for (int i = 0; i < sz(adj[u]); i++) {
                Q.push(adj[u][i]);
            }
        }

        reverse(v.begin(), v.end());

        for (int i = 0; i < sz(v); i++) {
            int u = v[i];
            int hi = 0;
            for (int k = 0; k < sz(adj[u]); k++) {
                int p = adj[u][k];
                hi = max(hi, arr[p].col1);
            }
            hi += 2;

            ll tot;

            for (int j = 1; j <= hi; j++) {
                tot = (ll)j;
                for (int k = 0; k < sz(adj[u]); k++) {
                    int p = adj[u][k];
                    if (j == arr[p].col1) {
                        tot += (ll)arr[p].cost2;
                    } else {
                        tot += (ll)arr[p].cost1;
                    }
                }
                if (tot < arr[u].cost1) {
                    arr[u].cost2 = arr[u].cost1;
                    arr[u].col2 = arr[u].col1;
                    arr[u].cost1 = tot;
                    arr[u].col1 = j;
                } else if (tot < arr[u].cost2) {
                    arr[u].cost2 = tot;
                    arr[u].col2 = j;
                } else {
                    break;
                }
            }
        }

        printf("Case #%d: %lld\n", cs + 1, arr[1].cost1);
    }

    return 0;
}







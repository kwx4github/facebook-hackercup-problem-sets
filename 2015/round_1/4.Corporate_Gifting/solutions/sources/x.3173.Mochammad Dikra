/* DIKRA */
/* DELAPAN.3gp */
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of DELAPAN.3gp's template -------------- */

#define MAXN 200005

int ntc, n;
vector<int> adj[MAXN];
int indeg[MAXN];
int p[MAXN];
ll cost[MAXN];
priority_queue<pii> pq;
int bit[MAXN];


void update(int pos, int val){
	for(int i = pos; i < MAXN; i += (i&-i)){
		bit[i] += val;
	}
}

int query(int pos){
	int ret = 0;
	for(int i = pos; i > 0; i -= (i&-i)){
		ret += bit[i];
	}
	return ret;
}

int main(){
	OPEN("gifting");

	scanf("%d", &ntc);
	FOR(itc, 1, ntc){
		scanf("%d", &n);

		RESET(indeg, 0);
		FOR(i,0,n){
			adj[i].clear();
		}

		FOR(i,1,n){
			int x;
			scanf("%d", &x);
			adj[x].PB(i);
			indeg[x]++;
			p[i] = x;
		}

		while (pq.size()) pq.pop();

		FOR(i, 1, n){
			if (indeg[i] == 0) pq.push(MP(-indeg[i], i));
		}

		RESET(cost, 0);
		while (pq.size()){
			int x = pq.top().B;
			int sz = -pq.top().A;
			pq.pop();

			if (sz > 0) continue;

			vector<int> v;
			v.clear();
			REP(i, SZ(adj[x])){
				v.PB(cost[adj[x][i]]);
			}
			sort(ALL(v));
			int co = 1;
			REP(i, SZ(v)){
				if (v[i] == co){
					co++;
				}

				if (v[i] > co) break;
			}

			cost[x] = co;

			if (x == 1) continue;

			indeg[p[x]]--;
			if (indeg[p[x]] == 0) pq.push(MP(-indeg[p[x]], p[x]));
		}
		ll ans1 = 0LL;
		FOR(i,1,n){
			ans1 += cost[i];
		}


		printf("Case #%d: %I64d\n", itc, ans1);
	}

	

	return 0;
}

#include <stdio.h>
#include <assert.h>

#include <algorithm>

using namespace std;

const int MAXN = 200010;

const int MAX_PRICE = 1000;

int cur;
int V[MAXN];
int child[MAXN];
int next[MAXN];

void put_child(int a, int b)
{
	child[cur] = b;
	next[cur] = V[a];
	V[a] = cur++;
}

long long arr[MAXN][2];
int arr_2nd_if[MAXN];

inline long long get_min_price_not(int x, int price)
{
	if(price == arr_2nd_if[x])
		return arr[x][1];
	else
		return arr[x][0];
}

long long cur_if_price[MAX_PRICE + 1];

void recur(int x)
{
	for(int cur = V[x]; cur != -1; cur = next[cur])
		recur(child[cur]);
	for(int i = 1; i <= MAX_PRICE; ++i)
	{
		cur_if_price[i] = i;
	}
	for(int cur = V[x]; cur != -1; cur = next[cur])
	{
		int ch = child[cur];
		for(int p = 1; p <= MAX_PRICE; ++p)
		{
			cur_if_price[p] += get_min_price_not(ch, p);
		}
	}
	int min_ind = 1;
	for(int i = 1; i <= MAX_PRICE; ++i)
	{
		if(cur_if_price[i] < cur_if_price[min_ind])
			min_ind = i;
	}
	long long t = 1ll << 60;
	for(int i = 1; i <= MAX_PRICE; ++i)
		if(i != min_ind && cur_if_price[i] < t)
			t = cur_if_price[i];
	arr_2nd_if[x] = min_ind;
	arr[x][0] = cur_if_price[min_ind];
	arr[x][1] = t;
//	fprintf(stderr, "%d: %d [%d %d]\n", x + 1, arr_2nd_if[x], arr[x][0], arr[x][1]);
}

void solve(int t)
{
	cur = 0;
	for(int i = 0; i < MAXN; ++i)
		V[i] = -1;
	
	int N;
	scanf("%d", &N);

	int tmp;
	scanf("%d", &tmp);
	assert(tmp == 0);
	
	for(int i = 1; i < N; ++i)
	{
		int tmp;
		scanf("%d", &tmp);
		put_child(tmp - 1, i);
	}

	recur(0);
	printf("Case #%d: %lld\n", t, min(arr[0][0], arr[0][1]));
}

int main()
{
	int T;
	scanf("%d", &T);
	for(int t = 0; t < T; ++t)
	{
		fprintf(stderr, "Solving #%d\n", t + 1);
		solve(t + 1);
	}
	return 0;
}

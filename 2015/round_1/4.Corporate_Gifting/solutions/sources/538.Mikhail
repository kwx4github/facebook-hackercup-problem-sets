import java.io.*;
import java.util.*;

public class D {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;


	List<Integer>[] g;
	
	Map<Integer, Long> best = new HashMap<>();
	int n;
	
	void dfs(int v) {
		for (int j : g[v]) {
			dfs(j);
		}
		best.clear();
		long sumBest = 0;
		for (int j : g[v]) {
			sumBest += opt[j];
			increase(best, optVal[j], opt2[j] - opt[j]);
		}
		opt[v] = opt2[v] = Long.MAX_VALUE;
		optVal[v] = -1;
		for (Map.Entry<Integer, Long> e : best.entrySet()) {
			long cur = sumBest + e.getValue() + e.getKey();
			if (cur < opt[v]) {
				opt2[v] = opt[v];
				opt[v] = cur;
				optVal[v] = e.getKey();
			} else if (cur < opt2[v]) {
				opt2[v] = cur;
			}
		}
		int newV = 1;
		while (best.containsKey(newV)) {
			newV++;
		}
		if (newV <= n) {
			long cur = sumBest + newV;
			if (cur < opt[v]) {
				opt2[v] = opt[v];
				opt[v] = cur;
				optVal[v] = newV;
			} else if (cur < opt2[v]) {
				opt2[v] = cur;
			}
		}

		newV++;
		while (best.containsKey(newV)) {
			newV++;
		}
		if (newV <= n) {
			long cur = sumBest + newV;
			if (cur < opt[v]) {
				opt2[v] = opt[v];
				opt[v] = cur;
				optVal[v] = newV;
			} else if (cur < opt2[v]) {
				opt2[v] = cur;
			}
		}
	}
	
	long[] opt, opt2;
	int[] optVal;

	void solve() throws IOException {
		n = nextInt();
		g = new List[n];
		for (int i = 0; i < n; i++) {
			g[i] = new ArrayList<>(1);
		}
		for (int i = 0; i < n; i++) {
			int p = nextInt() - 1;
			if (p != -1) {
				g[p].add(i);
			}
		}
		opt = new long[n];
		optVal = new int[n];
		opt2 = new long[n];
		
		dfs(0);

		out.println(opt[0]);
	}

	static void increase(Map<Integer, Long> map, int x, long y) {
		Long prev = map.get(x);
		if (prev == null) {
			prev = 0L;
		}
		map.put(x, prev + y);
	}
	
	D() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "corporate_gifting";
			if (taskName.equals("")) {
				throw new AssertionError();
			}
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new D();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
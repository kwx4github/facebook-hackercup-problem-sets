#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <unordered_map>
#include <functional>
#include <tuple>
#include <cstring>
#include <cstring>
using namespace std;

typedef long long ll;

#define MX 200010
int p[MX];
int inD[MX];
vector<vector<int>> adjL;
vector<set<int>> below;

int findFirst(const set<int>& s) {
  for (int i = 1;; ++i) {
    if (s.count(i) == 0)
      return i;
  }
}

int main() {
  freopen("corporate_gifting.txt", "rt", stdin);
  freopen("corporate_gifting.out", "wt", stdout);
  int tt;
  cin >> tt;
  for (int ii = 0; ii < tt; ++ii) {
    cout << "Case #" << ii + 1 << ": ";
    int n;
    cin >> n;
    adjL.clear();
    adjL.resize(n);
    below.clear();
    below.resize(n);
    memset(inD, 0, sizeof inD);
    for (int i = 0; i < n; ++i) {
      cin >> p[i];
      --p[i];
      if (p[i] >= 0)
        adjL[p[i]].push_back(i);
      inD[p[i]]++;
    }
    ll res = 0;
    // Get leaves;
    queue<int> Q;
    for (int i = 0; i < n; ++i) {
      if(!inD[i])
        Q.push(i);
    }
    while(!Q.empty()) {
      int cur = Q.front();
      Q.pop();
      int color = findFirst(below[cur]);
      res += color;
      if (p[cur] < 0) continue;
      below[p[cur]].insert(color);
      inD[p[cur]]--;
      if (inD[p[cur]] == 0) Q.push(p[cur]);
    }
    cout << res << endl;
  }
  return 0;
}

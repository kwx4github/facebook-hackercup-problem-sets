#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <sys/resource.h>
#include <algorithm>
using namespace std;
#define dprint(v) cerr << #v"=" << v << endl //;)
#define forr(i,a,b) for(int i=(a); i<(b); i++)
#define forn(i,n) forr(i,0,n)
#define dforn(i,n) for(int i=n-1; i>=0; i--)
#define forall(it,v) for(typeof(v.begin()) it=v.begin();it!=v.end();++it)
#define sz(c) ((int)c.size())
#define zero(v) memset(v, 0, sizeof(v))
#define pb push_back
#define fst first
#define snd second
typedef long long ll;
typedef pair<int,int> ii;
const int MAXN=200200;
const int COLORES=40;
int n;
vector<int> G[MAXN];
int p[MAXN];

int col;
int dp[MAXN][COLORES];
int dfs(int v, int c, int p=0){
	if(dp[v][c]!=-1) return dp[v][c];
	int &k=dp[v][c]=c+1;
	forall(it, G[v])if(p!=*it){
		int l=1e9;
		forn(i, COLORES) if(i!=c) l=min(l, dfs(*it, i, v));
		k+=l; 
	}
	return k;
}

int main() {
	const rlim_t kStackSize = 16 * 1024 * 1024 * 10;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
	//~ freopen("d.in", "r", stdin);
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("d.out", "w", stdout);
	int tc; cin >> tc;
		//~ dprint(tc);
	forr(tt, 1, tc+1){
		zero(G);
		//~ dprint(tt);
		memset(dp, -1, sizeof(dp));
		cin >> n;
		col=min(COLORES, n);
		int seo=-1;
		forn(i, n){
			cin >> p[i+1];
			if(p[i+1]==0) seo=i+1;
			G[i+1].pb(p[i+1]);
			G[p[i+1]].pb(i+1);
		}
		int r=1e9;
		forn(i, col) r=min(r, dfs(seo, i));
		cout << "Case #" << tt << ": " << r << endl;
	}
	return 0;
}

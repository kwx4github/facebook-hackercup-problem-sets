#include <iostream>
#include <cstdio>
#include <map>
#include <vector>	
#include <set>

using namespace std;

typedef long long int tint;
#define forn(i,n) for(int i = 0; (int)(i) < (int)(n); i++)
#define forsn(i,s,n) for(int i = (int)(s); (int)(i) < (int)(n); i++)
#define pb push_back
#define mp make_pair

const int MAXN = 200005;
const int MAXK = 25;
vector<int> child[MAXN];
int parent[MAXN];
int num_childs[MAXN];
int best_ans[MAXN][MAXK];

int main() {
	int t; cin>>t;
	forn(tc, t) {
		set<pair<int, int> >s;
		int n; cin>>n;
		forn(i,MAXN)child[i].clear();
		forn(i,n) {
			int x; cin>>x;
			child[x].pb(i+1);
			parent[i+1] = x;
		}
		forn(i,MAXN)forn(j,MAXK)best_ans[i][j]=-1;
		forsn(i,1,n+1)num_childs[i]=child[i].size();
		forsn(i,1,n+1)s.insert(mp(num_childs[i], i));
		while(!s.empty()){
			pair<int, int> p = *s.begin();
			s.erase(s.begin());
			int node = p.second;
			//int best = MAXN*MAXK;
			forsn(value, 1, MAXK) {
				int local_best = value;
				forn(i,child[node].size()) {
					int sum = MAXN*MAXK;
					forsn(k, 1, MAXK) if(k!=value) sum=min(sum, best_ans[child[node][i]][k]);
					local_best += sum;
				}
				best_ans[node][value]=local_best;
			}
			int par = parent[node];
			if(par != 0){
				s.erase(s.find(mp(num_childs[par], par)));
				num_childs[par]--;
				s.insert(mp(num_childs[par], par));
			}
		}
		int res = MAXN*MAXK;
		forsn(value, 1, MAXK)res=min(best_ans[1][value], res);
		printf("Case #%d: %d\n", tc+1, res);
	}
}

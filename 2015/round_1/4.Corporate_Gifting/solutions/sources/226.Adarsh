#include <iostream>
#include <queue>
#include <vector>
#include <set>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>

#define max_nodes_size 100005
#define ll long long int
#define mod 1000000007
using namespace std;

ll dp[200005][100], visited[200005], max_j;

vector <ll> nodes[200005];

void dfs(ll node)
{
	stack <ll> dfs_stack;
	dfs_stack.push(node);
	while(!dfs_stack.empty())
	{
		ll cur_node = dfs_stack.top();
		visited[cur_node] = 1;

		ll ctr = 0;
		for(ll i=0; i<nodes[cur_node].size(); i++)
		{
			if(!visited[nodes[cur_node][i]])
			{
				ctr = 1;
				dfs_stack.push(nodes[cur_node][i]);
			}
		}

		if(ctr==0)
		{
			dfs_stack.pop();
			for(ll j=1; j<=max_j; j++)
			{
				dp[cur_node][j] = j;
				for(ll k=0; k<nodes[cur_node].size(); k++)
				{
					ll temp = -1;
					for(ll m=1; m<=max_j; m++)
						if(m!=j && (temp==-1 || temp>dp[nodes[cur_node][k]][m]))
							temp = dp[nodes[cur_node][k]][m];

					dp[cur_node][j] += temp;
				}
			}
		}
	}
}

	/*visited[node] = 1;

	for(ll i=0; i<nodes[node].size(); i++)
		if(!visited[nodes[node][i]])
			dfs(nodes[node][i]);

	for(ll j=1; j<=max_j; j++)
	{
		dp[node][j] = j;
		for(ll k=0; k<nodes[node].size(); k++)
		{
			ll temp = -1;
			for(ll m=1; m<=max_j; m++)
				if(m!=j && (temp==-1 || temp>dp[nodes[node][k]][m]))
					temp = dp[nodes[node][k]][m];

			dp[node][j] += temp;
		}
	}
}*/


int main()
{
	ll t;
	cin>>t;

	for(ll c=1; c<=t; c++)
	{
		ll n;
		cin>>n;

		ll a;
		cin>>a;
		for(ll i=2; i<=n; i++)
		{
			cin>>a;
			nodes[a].push_back(i);
		}

		max_j = min(n, (ll)25);
		for(ll i=0; i<=n; i++)
			visited[i] = 0;

		dfs(1);

		ll ans = dp[1][1];
		for(ll i=2; i<=max_j; i++)
			ans = min(dp[1][i], ans);

		cout<<"Case #"<<c<<": "<<ans<<endl;
		for(ll i=0; i<=n; i++)
			nodes[i].clear();
	}
	return 0;
}
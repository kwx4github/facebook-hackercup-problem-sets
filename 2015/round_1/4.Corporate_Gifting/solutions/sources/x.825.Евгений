#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <iostream>
#include <utility>
#include <sstream>
#include <cmath>
#include <ctime>
#include <iostream>

#define clr(a) memset(a, 0, sizeof(a))
#define fill(a, b) memset(a, b, sizeof(a))

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> pii;

#ifdef DBG1
    #define dbg(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
    #define dbg(...)
#endif

const int INF = int(1e9);
const int MAXP = 3;

void calcDP(int s, const vector <vector <int> > & children, vector <vector <int> > & dp) {
//    dbg("calcDP(%d)\n", s);
    for (int i = 0; i < int(children[s].size()); ++i) {
        calcDP(children[s][i], children, dp);
    }
    for (int i = 0; i < MAXP; ++i) {
        int cur = i + 1;
        for (int j = 0; j < int(children[s].size()); ++j) {
            int k = children[s][j];
            int opt = INF;
            for (int x = 0; x < MAXP; ++x) {
                if (x != i && opt > dp[k][x]) {
                    opt = dp[k][x];
                }
            }
            cur += opt;
        }
        dp[s][i] = cur;
//        dbg("dp[%d][%d] = %d\n", s, i, dp[s][i]);
    }
//    dbg("end %d\n", s);
}

void solve() {
    int n;
    scanf("%d", &n);
    vector <vector <int> > children(n);
    for (int i = 0; i < n; ++i) {
        int par;
        scanf("%d", &par);
        if (i == 0) {
            assert(par == 0);
        } else {
            children[par - 1].push_back(i);
        }
    }
    vector <vector<int> > dp(n, vector <int>(MAXP));
    calcDP(0, children, dp);
    int ans = INF;
    for (int i = 0; i < MAXP; ++i) {
        ans = min(ans, dp[0][i]);
    }
    printf("%d\n", ans);
}

int main()
{
#ifdef DBG1
    freopen(".in", "r", stdin);
    freopen(".out", "w", stdout);
    freopen(".err", "w", stderr);
#endif

    int tt;
    scanf("%d", &tt);
    for (int ii = 1; ii <= tt; ++ii) {
        printf("Case #%d: ", ii);
        solve();
        fflush(stdout);
    }

    return 0;
}

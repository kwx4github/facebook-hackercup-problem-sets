#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<map>
#include<queue>
#include<iostream>
#include<iterator>
using namespace std;
#define FOR(i,s,e) for(int i = (s); i < (e); i++)
#define FOE(i,s,e) for(int i = (s); i <= (e); i++)
#define FOD(i,s,e) for(int i = (s); i >= (e); i--)
#define CLR(a) memset(a,0,sizeof(a))
#define LL long long
#include<ctime>
#include<vector>
int DP[200005][5], LINK[200005], l[200005], ed[200005];
int n, m, x, T, t, y, z, k, w, layer;
int S[200005][3];

void build(int x, int y) {
	w++; LINK[w] = l[x]; l[x] = w; ed[w] = y;
}

void DFS(int x, int y) {
	label_1:
	//printf("%d %d\n", x, y);
	int pt = l[x];
	while (pt != 0) {
		if (ed[pt] != y) {
			S[layer][0] = x; S[layer][1] = y; S[layer++][2] = pt; 
			x = ed[pt]; y = x; 
			goto label_1;
			label_2:
			layer--;
			x = S[layer][0]; y = S[layer][1]; pt = S[layer][2];
			//DFS(ed[pt], x);
		}
		pt = LINK[pt];
	}
	FOE(i ,1, 4) {
		pt = l[x];
		k = 0;
		while (pt != 0) {
			if (ed[pt] != y) {
				z = 1234567890;
				FOE(j, 1, 4) if (j != i) z = min(DP[ed[pt]][j], z);
			}
			pt = LINK[pt];
			k += z;
		}
		DP[x][i] = k + i;
	}
	if (layer > 0) goto label_2;
}

int main () {
	
	scanf("%d", &T);
	while (T--) {
		scanf("%d", &n);
		FOE(i, 1, n) {
			scanf("%d", &x);
			if (x != 0) build(x, i);
		}
		DFS(1, 0);
		FOE(i, 1, 4) if (i == 1) k = DP[1][i];
		else k = min(k, DP[1][i]);
		printf("Case #%d: %d\n",++t, k);
		memset(DP, 0, sizeof(DP)); 
		memset(l, 0, sizeof(l)); w = 0;
	}
	
	return 0;
}
		
		

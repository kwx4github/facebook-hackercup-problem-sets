#include <bits/stdc++.h>
using namespace std;
#define ll long long
// Useful constants
#define INF (int)2e9
#define INFL (long long)1e18
#define EPS 1e-9
// Useful hardware instructions
#define bitcount __builtin_popcount
#define gcd __gcd
// Useful container manipulation / traversal macros
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb push_back
#define fill(a,v) memset(a, v, sizeof a)// fill originally
#define mp make_pair

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define tr(container, it) for(aut(it,container.begin()); it != container.end(); it++)


#define llu long long unsigned
#define ld long


int scan_d() {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld() {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ll scan_ll() {int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu() {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
//end of fast input
//fast output
//no line break
void print_d(int n) {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n) {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_ll(ll n) {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n) {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}


#define DEBUG 1
#define debug(x) {if (DEBUG)cout <<#x <<" = " <<x <<endl; }
#define debugv(x) {if (DEBUG) {cerr <<#x <<" = "; tr((x),it) cerr <<*it <<", "; cerr <<endl; }}
#define mod 1000000007

#define checkbit(n,b) ( (n >> b) & 1)
#define setbit(n,b) (n | ((1 << b)))
#define unsetbit(n,b) (n & (~(1 << b)))
typedef pair<int, int> pii;


#define M 101
int n,m;
struct node
{
	int val[M];
	int min1;
	int min2;
};

node data[200009];

vector<int> adj[200009];

vector<int> q;
int visited[200009];

void bfs()
{
	q.clear();

	int itr=0;
	q.pb(0);
	int top;
	fill(visited,0);

	while(itr < q.size())
	{

		top = q[itr];
		visited[top]=1;
		itr++;

		int sz = adj[top].size();

		for(int i=0;i<sz;i++)
		{
			if(visited[adj[top][i]]==0)
				q.pb(adj[top][i]);
		}
	}

	int sz = q.size();

	for(int i=sz-1;i>=0;i--)
	{

		top = q[i];
		int sum,cur;

		int min1=INF,min2=INF;

		for(int j=1;j<=m;j++)
		{
			sum=0;

			int szx = adj[top].size();

			for(int k=0;k<szx;k++)
			{
				cur = adj[top][k];

				if(data[cur].min1 == data[cur].val[j])
					sum += data[cur].min2;
				else sum += data[cur].min1;

			}

			sum += j;

			data[top].val[j] = sum;

			if(min1 > sum){
				min2=min1;
				min1=sum;
			}
			else if(min2 > sum)
			{
				min2 = sum;
			}
		}

		data[top].min1=min1;
		data[top].min2 = min2;

	}

}

int main()
{
	int t;
	s(t);

	for(int itr=1;itr<=t;itr++)
	{
		printf("Case #%d: ",itr);

		s(n);
		m = min(M,n);

		for(int i=0;i<=n;i++)
		{
			adj[i].clear();
		}

		int x;
		for(int i=0;i<n;i++)
		{
			s(x);
			if(i==0)continue;
			x--;
			adj[x].pb(i);
		}

		bfs();
		int ans=data[0].min1;
		printf("%d\n",ans);

	}
}

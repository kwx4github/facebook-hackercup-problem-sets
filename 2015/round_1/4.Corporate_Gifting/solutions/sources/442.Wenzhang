#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>
using namespace std;
typedef long long LL;
const int N = 200005;
const int M = 50;
const int inf = 1000000007;
struct Edge {
    int v , next;
}e[N << 1];
int start[N] , tot , n;
int idx , pre[N];
int id[N] , p[N];
int dp[N][M];
void add (int u , int v) {
    e[tot].v = v;
    e[tot].next = start[u];
    start[u] = tot ++;
}
void topsort () {
    idx = 0;

    queue <int> que;
    que.push (1);
    while (!que.empty ()) {
        int u = que.front ();
        que.pop ();
        id[u] = ++ idx;
        p[idx] = u;
        for (int i = start[u] ; i != -1 ; i = e[i].next) {
            int v = e[i].v;
            que.push (v);
        }
    }

}
int main () {
    //freopen ("input.txt" , "r" , stdin);
    // freopen ("output.txt" , "w" , stdout);

    int t , cas = 0;
    scanf ("%d" , &t);
    while (t --) {
        tot = 0;memset (start , -1 , sizeof (start));
        scanf ("%d" , &n);
        for (int i = 1 ; i <= n ; i ++) {
            scanf ("%d" , &pre[i]);
            if (i > 1) {
                add (pre[i] , i);
            }
        }
        topsort ();
        for (int i = n ; i >= 1 ; i --) {
            for (int j = 1 ; j < M ; j ++) {
                dp[i][j] = j;
                for (int k = start[p[i]] ; k != -1 ; k = e[k].next) {
                    int v = e[k].v , ret = inf;
                    for (int r = 1 ; r < M ; r ++) {
                        if (j != r) {
                            ret = min (ret , dp[id[v]][r]);
                        }
                    }
                    dp[i][j] += ret;
                }
            }
        }
        int ans = inf;
        for (int i = 1 ; i < M ; i ++)
            ans = min (ans , dp[1][i]);
        printf ("Case #%d: %d\n" , ++ cas , ans);
    }

    return 0;
}

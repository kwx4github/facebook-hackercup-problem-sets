#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <deque>
#define NMAX 200005
#define LMAX 105
#define INF_L (1LL << 62)
#define ll long long
#define pb push_back
using namespace std;
ll res, best[NMAX][LMAX];
int tests, n;
vector <int> G[NMAX];

inline int trans(int val)
{
	if (val >= LMAX)
		return val - LMAX + 1;
	return val;
}

void dfs(int node)
{
	int x;
	for (int i = 0; i < (int)G[node].size(); i++)
	{
		x = G[node][i];
		dfs(x);
	}
	
	//~ for (int i = 0; i < (int)G[node].size(); i++)
	//~ {
		//~ x = G[node][i];
		//~ 
		//~ deque <int> Q;
		//~ for (int j = 2; j < LMAX; j++)
		//~ {
			//~ while (Q.size() >= 1 && best[x][Q.back()] >= best[x][j])
				//~ Q.pop_back();
			//~ Q.push_back(j);
		//~ }
		//~ 
		//~ best[node][1] += best[x][Q.front()];
		//~ for (int j = 1; j < LMAX - 1; j++) // set to j + 1
		//~ {
			//~ while (Q.size() >= 1 && best[x][trans(Q.back())] >= best[x][j])
				//~ Q.pop_back();
			//~ Q.push_back(LMAX + j - 1);
			//~ 
			//~ while (Q.size() >= 1 && (LMAX + j - 1) - Q.front() >= LMAX - 2)
				//~ Q.pop_front();
				//~ 
			//~ best[node][j + 1] += best[x][trans(Q.front())];
		//~ }
	//~ }
	//~ 
	//~ for (int v = 1; v < LMAX; v++)
		//~ best[node][v] += v;
	
	
	for (int v = 1; v < LMAX; v++)
	{
		best[node][v] = v;
		for (int i = 0; i < (int)G[node].size(); i++)
		{
			x = G[node][i];
			ll curr = INF_L;
			for (int v2 = 1; v2 < LMAX; v2++)
				if (v2 != v)
					curr = min(curr, best[x][v2]);
			
			best[node][v] += curr;
		}
	}
}

int main()
{
	freopen("input", "r", stdin);
	freopen("output", "w", stdout);
	
	scanf("%d", &tests);
	for (int test_no = 1; test_no <= tests; test_no++)
	{
		scanf("%d", &n);
		int x;
		memset(best, 0, sizeof(best));
		
		for (int i = 1; i <= n; i++)
		{
			scanf("%d", &x);
			G[x].pb(i);
		}
		dfs(1);
		
		res = INF_L;
		for (int v = 1; v < LMAX; v++)
			res = min(res, best[1][v]);
			
		for (int i = 0; i <= n; i++)
			G[i].clear();
		
		printf("Case #%d: %lld\n", test_no, res);
	}
	return 0;
}

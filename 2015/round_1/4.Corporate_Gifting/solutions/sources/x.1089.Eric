#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <complex>
#include <cstdlib>
#include <ctime>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;

const int MAXN = 200005;
int T, N;
vector<int> adj[MAXN];
int W[MAXN];
bool has1[MAXN];
int fix = 0;

void dfs(int cur, int dep)
{
	if (cur != 0)
		W[cur] = dep;

	int cnt = 0;
	for (int i = 0; i < adj[cur].size(); i++)
	{
		int next = adj[cur][i];
		dfs(next, 3-dep);
		if (dep == 1 && !has1[next]) //doesn't have an edge with weight 1
			cnt++;
		else if (dep == 2 && W[next] == 1) //gets an edge with weight 1
			has1[cur] = true;
	}

	if (dep == 1 && cnt >= 2)
	{
		W[cur] = 3;
		fix -= cnt;
	}
}

int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");

	in >> T;
	for (int t = 1; t <= T; t++)
	{
		in >> N;
		for (int i = 1; i <= N; i++)
		{
			int p;
			in >> p;
			adj[p].push_back(i);
		}

		fix = 0;
		dfs(0, 1);
		for (int i = 1; i <= N; i++)
			fix += W[i];
		int best = fix;

		fix = 0;
		dfs(0, 2);
		for (int i = 1; i <= N; i++)
			fix += W[i];
		best = min(best, fix);

		out << "Case #" << t << ": " << best << "\n";

		for (int i = 0; i < MAXN; i++)
			adj[i].clear();
		memset(W, 0, sizeof(W));
		memset(has1, false, sizeof(has1));
	}

	in.close();
	out.close();
	return 0;
}
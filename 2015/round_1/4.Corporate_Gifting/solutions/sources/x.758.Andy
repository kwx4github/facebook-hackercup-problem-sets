import java.io.*;
import java.util.*;

public class Corporate {

	static int [] parent;
	static int [] children;
	static int [] offset;
	static int [] clist;
	static int [] ass;
	static long cost;
	
	public static int getCost(int n) {
		if(children[n] == 0) {
			cost++;
			return (ass[n] = 1);
		}
		TreeSet<Integer> cstuff = new TreeSet<Integer>();
		for(int i = 0; i < children[n]; i++) 
			cstuff.add(new Integer(getCost(clist[i+offset[n]])));
		int minpval = 1;
		for(Iterator<Integer> it = cstuff.iterator(); it.hasNext();) {
			int cv = it.next();
			if(cv == minpval)
				minpval++;
			else if(cv > minpval)
				break;
		}
		cost += minpval;
		return (ass[n] = minpval);
	}
	
	public static void main(String [] args) throws Exception {
		int T, N;
		Scanner in = new Scanner(new File("/Users/andykong/Downloads/corporate_gifting.txt"));
		PrintWriter out = new PrintWriter(new FileWriter("/Users/andykong/Downloads/corporate.out"));
		T = in.nextInt();
		for(int cc = 1; cc <= T; cc++) {
			int cnt = 0;
			N = in.nextInt();
			parent = new int[N];
			children = new int[N];
			offset = new int[N];
			clist = new int[N];
			ass = new int[N];
			cost = 0;
			for(int i = 0; i < N; i++) {
				int cp = in.nextInt();
				if(i != 0) {
					parent[i] = cp-1;
					children[cp-1]++;
				}
			}
			for(int i = 1; i < N; i++) {
				offset[i] = children[i-1] + offset[i-1];
			}
			for(int i = 1; i < N; i++) {
				clist[offset[parent[i]]++] = i;
			}
			for(int i = 0; i < N; i++)
				offset[i] -= children[i];
			getCost(0);
			out.println("Case #"+cc+": " + cost);
		}
		in.close();
		out.close();
	}
	
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <queue>
#include <cstring>
#include <string>

#define vi vector<int>
#define vpii vector< pair<int,int> >
#define pii pair<int,int>
#define mp(x,y) make_pair(x,y)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define sqr(x) ((x)*(x))
#define FOR(i,n) for (ll i = 0; i < ll(n); i++)
#define FOR1(i,n) for (ll i = 1; i < ll(n); i++)
#define READ(v,n) { FOR(i,n){int x;cin>>x;v.pb(x);} }
#define FREAD(v,n) { FOR(i,n){int x;in>>x;v.pb(x);} }
#define WRITE(v) "";FOR(i,sz(v))cout<<v[i]<<" ";cout
#define FWRITE(v) "";FOR(i,sz(v))out<<v[i]<<" ";out
#define gmin(a,b) { if (b < a) a = b; }
#define gmax(a,b) { if (b > a) a = b; }
#define pb push_back
#define ppb pop_back
typedef long long ll;
typedef unsigned long long ull;
using namespace std;


vector <vi> childs;

vi ifnot;
vi first;
vi second;

vi parent;
vi depth;
vector <vi> layers;

void count(int a){
  vi value(1, 0);
  int blanks = 0;
  int s = 1;
  while(true){
    int sum = s;
    bool b =false;
    FOR(i, sz(childs[a])){
      int c = childs[a][i];
      if(ifnot[c]!=s){sum+=first[c];}else{sum+=second[c];b=true;}
    }
    value.pb(sum);
    if(!b){blanks++;}
    if(blanks>=2){break;}
    s++;
  }
  int best = -1;
  int besti = -1;
  FOR(j,s){
    int v = value[j+1];
    if(best == -1 || v<best){
      best = v;
      besti = j+1;
    }
  }
  int sec = -1;
  FOR(j,s){
    if(j+1==besti) continue;
    int v = value[j+1];
    if(sec == -1 || v<sec){
      sec = v;
    }
  }
  first[a] = best;
  ifnot[a] = besti;
  second[a] = sec;
}

int main(void){
  int T;
  cin>>T;
  FOR1(t,T+1){
    int n;
    cin>>n;
    
    parent.clear();
    FOR(i,n){
      int x;
      cin>>x;
      parent.pb(x-1);
    }
    
    childs = vector<vi>(n);
    FOR(i,n){
      int p = parent[i];
      if(p!=-1)
        childs[p].pb(i);
    }
    
    //set depth
    depth=vi(n,0);
    layers = vector<vi>(n);
    queue<int> q;
    q.push(0);
    layers[0].pb(0);
    int layer_num = 0;
    while(!q.empty()){
      int a=q.front(); q.pop();
      FOR(i,sz(childs[a])){
        int c = childs[a][i];
        depth[c] = depth[a] + 1;
        q.push(c);
        layers[depth[c]].pb(c);
        gmax(layer_num, depth[c]);
      }
    }

    ifnot = vi(n);
    first = vi(n);
    second = vi(n);    
    while(layer_num>=0){
      FOR(i, layers[layer_num].size()){
        count(layers[layer_num][i]);
      }
      layer_num--;
    }
        
    cout<<"Case #"<<t<<": "<< first[0] <<endl;    
  }
    
  return 0;
}

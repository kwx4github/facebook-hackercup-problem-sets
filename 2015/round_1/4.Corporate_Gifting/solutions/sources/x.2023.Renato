#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <numeric>
#include <stack>
#include <set>

using namespace std;

vector<int> grafo[212345];
int pai[212345];
set<int> valoresAcumulados[212345];
long long val[212345];
int N;
long long answ;
stack<pair<int, int> >pilha;

void dfs() {
	while (!pilha.empty())
		pilha.pop();

	pilha.push(make_pair(1, 0));
	for (int i = 1; i <= N; i++)
		valoresAcumulados[i].clear();

	while (!pilha.empty()) {

		pair<int, int> topo = pilha.top();
		//fprintf(stderr, "topo(%d, %d)\n", topo.first, topo.second);
		pilha.pop();
		if (topo.second == grafo[topo.first].size()) {
			int anterior = -1;
			bool found = false;
			for(set<int>::iterator it = valoresAcumulados[topo.first].begin(); it != valoresAcumulados[topo.first].end() && !found; it++) {
				if (anterior == -1) {
					anterior = (*it);
					if (anterior > 1) {
						val[topo.first] = 1;
						//fprintf(stderr, "encontrado valor de topo para %d como = %d\n", topo.first, val[topo.first]);
						valoresAcumulados[pai[topo.first]].insert(val[topo.first]);
						found = true;
					}
					continue;
				}
				if ((*it) > anterior + 1) {
					val[topo.first] = anterior + 1;
					//fprintf(stderr, "encontrado valor de topo para %d como = %d\n", topo.first, val[topo.first]);
					valoresAcumulados[pai[topo.first]].insert(val[topo.first]);
					found = true;
					continue;
				}
				anterior = (*it);
			}
			if (!found){
				if (anterior == -1) {
					val[topo.first] = 1;
				} else {
					val[topo.first] = anterior + 1;
				}
			}
			//fprintf(stderr, "encontrado valor de topo para %d como = %d\n", topo.first, val[topo.first]);
			valoresAcumulados[pai[topo.first]].insert(val[topo.first]);
		} else {
			pair<int, int> inseridoNaPilha = make_pair(grafo[topo.first][topo.second], 0);
			topo.second++;
			pilha.push(topo);
			pilha.push(inseridoNaPilha);
		}
	}
	for (int i = 1; i <= N; i++) {
		//fprintf(stderr, "%d ", val[i]);
	}
}

int main() {
	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++) {
		memset(val, 0, sizeof val);
		scanf("%d", &N);
		for(int i = 1; i <= N; i++)
			grafo[i].clear();
		int superior;
		for (int i = 1; i <= N; i++) {
			scanf("%d", &superior);
			pai[i] = superior;
			if (i == 1) continue;
			grafo[superior].push_back(i);
		}
		dfs();
		answ = accumulate(val, val + N + 10, 0);
		printf("Case #%d: %lld\n", t, answ);
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;
typedef long long ll;
const double eps = 1e-9;
const int mod = 1e9 + 7;

void print(int t, ll res){
	cout<<"Case #"<<t<<": "<<res<<"\n";
}

int main(){
	freopen("corporate_gifting.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int test_count;
	cin>>test_count;
	for(int test=0; test<test_count; test++){
		int n;
		cin>>n;
		cerr<<test<<"\n";
		ll res = 0;
		vector<vector<int> > g(n);
		vector<int> st(n, 0);
		for(int i=0; i<n; i++){
			int v;
			scanf("%d", &v);
			v--;
			if(v >= 0){
				g[v].push_back(i);
				st[v]++;
			}
		}
		
		vector<int> dist(n, -1);
		queue<int> q;
		int mx = -1;
		dist[0] = 0;
		q.push(0);
		while(!q.empty()){
			int v = q.front();
			q.pop();
			mx = max(mx, dist[v]);
			for(int i=0; i<g[v].size(); i++){
				int to = g[v][i];
				if(dist[to] == -1){
					dist[to] = dist[v] + 1;
					q.push(to);
				}
			}
		}

		vector<vector<int> > level(mx + 1);
		for(int i=0; i<n; i++){
			int a = dist[i];
			level[a].push_back(i);
		}

		vector<int> cost(n, 0);
		for(int i=0; i<level[mx].size(); i++){
			int v = level[mx][i];
			cost[v] = 1;
		}

		for(int i=mx-1; i>=0; i--){
			for(int j=0; j<level[i].size(); j++){
				int v = level[i][j];
				vector<char> used(200100, false);
				if(st[v] == 0){
					continue;
				}
				int cnt = 0;
				for(int k=0; k<g[v].size(); k++){
					int to = g[v][k];
					if(st[to] == 0){
						cnt++;
					}
					if(cost[to] != 0){
						used[cost[to]] = 1;
					}
				}
				if(cnt > 1){
					for(int k=0; k<g[v].size(); k++){
						int to = g[v][k];
						if(st[to] == 0){
							cost[to] = 1;
							used[1] = 1;
						}
					}
				}
				else{
					if(used[1]){
						for(int k=0; k<g[v].size(); k++){
							int to = g[v][k];
							if(st[to] == 0){
								cost[to] = 1;
							}
						}
					}
					else{
						for(int k=0; k<g[v].size(); k++){
							int to = g[v][k];
							if(st[to] == 0){
								cost[to] = 2;
								used[2] = 1;
							}
						}
					}
				}

				for(int k=1; k<used.size(); k++){
					if(!used[k]){
						cost[v] = k;
						break;
					}
				}
			}
		}

		for(int i=0; i<n; i++){
			res += cost[i];
		}
		print(test + 1, res);
	}
	return 0;
}
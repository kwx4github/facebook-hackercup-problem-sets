#pragma comment(linker, "/STACK:64777216")
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

vector<vector<int> > g;
vector<vector<pair<pair<int, LL>, pair<int, LL> > > > d;

pair<pair<int, LL>, pair<int, LL>  > dp[200010];
int n;

void dfs(int v)
{
	if (g[v].size() == 0)
	{
		dp[v] = mp(mp(1, 1), mp(2, 2));
		return;
	}
	FOR(i, 0, g[v].size())
	{
		dfs(g[v][i]);
		d[v].push_back(dp[g[v][i]]);
	}
	sort(d[v].begin(), d[v].end());
	LL sum = 0;
	FOR(i, 0, d[v].size())
		sum += d[v][i].first.second;
	pair<int, LL> res1 = mp(-1, 1000000000000000000ll);
	pair<int, LL> res2 = mp(-1, 1000000000000000000ll);
	int last = d[v][0].first.first;
	LL add = d[v][0].second.second - d[v][0].first.second;
	FOR(i, 1, d[v].size())
	{
		if (d[v][i].first.first == last)
			add += d[v][i].second.second - d[v][i].first.second;
		else
		{
			pair<int, LL> now = mp(last, sum + add + last);
			if (now.second < res1.second)
			{
				res2 = res1;
				res1 = now;
			}
			else if (now.second < res2.second)
			{
				res2 = now;
			}
			add = d[v][i].second.second - d[v][i].first.second;
			last = d[v][i].first.first;
		}
	}
	pair<int, LL> now = mp(last, sum + add + last);
	if (now.second < res1.second)
	{
		res2 = res1;
		res1 = now;
	}
	else if (now.second < res2.second)
	{
		res2 = now;
	}
	int addV = -1;
	if (d[v][0].first.first != 1)
		addV = 1;
	else
	{
		for (int i = 0; i + 1 < d[v].size(); ++i)
		{
			if (d[v][i].first == d[v][i + 1].first)
				continue;
			if (d[v][i].first.first + 1 < d[v][i + 1].first.first)
			{
				addV = d[v][i].first.first + 1;
				break;
			}
		}
	}
	if (addV == -1)
		addV = d[v][d[v].size() - 1].first.first + 1;
	now = mp(addV, sum + addV);
	if (now.second < res1.second)
	{
		res2 = res1;
		res1 = now;
	}
	else if (now.second < res2.second)
	{
		res2 = now;
	}
	d[v].push_back(mp(mp(addV, -1), mp(-1, -1)));
	sort(d[v].begin(), d[v].end());
	addV = -1;
	if (d[v][0].first.first != 1)
		addV = 1;
	else
	{
		for (int i = 0; i + 1 < d[v].size(); ++i)
		{
			if (d[v][i].first == d[v][i + 1].first)
				continue;
			if (d[v][i].first.first + 1 < d[v][i + 1].first.first)
			{
				addV = d[v][i].first.first + 1;
				break;
			}
		}
	}
	if (addV == -1)
		addV = d[v][d[v].size() - 1].first.first + 1;
	now = mp(addV, sum + addV);
	if (now.second < res1.second)
	{
		res2 = res1;
		res1 = now;
	}
	else if (now.second < res2.second)
	{
		res2 = now;
	}
	dp[v] = mp(res1, res2);
}

LL solve1()
{
	d.clear();
	d.resize(n);
	dfs(0);
	LL res = dp[0].first.second;
	return res;
}

LL dp2[310][310];
LL r2(int v, int last)
{
	int n = g.size();
	if (dp2[v][last] != -1)
		return dp2[v][last];
	LL res = 1000000000000000000ll;
	FOR(i, 1, n + 1)
	{
		if (i == last)
			continue;
		LL now = i;
		FOR(j, 0, g[v].size())
		{
			now += r2(g[v][j], i);
		}
		res = MIN(res, now);
	}
	return dp2[v][last] = res;
}

LL solve2()
{
	MEMS(dp2, -1);
	LL res = r2(0, 0);
	return res;
}

void cmp()
{
	int cnt = 0;
	FOR(it, 0, 1000)
	{
		g.clear();
		n = rand() % 300;
		n++;
		g.resize(n);
		FOR(i, 1, n)
		{
			int v = rand() % i;
			g[v].push_back(i);
		}
		LL res1 = solve1();
		LL res2 = solve2();
		if (res1 == res2)
			printf("ok\n");
		else
		{
			printf("FAIL\n");
			solve1();
			break;
		}
		cnt += (dp[0].first.first > 2);
	}
	cout << endl<<cnt << endl;
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	double beg = clock();
#else
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif

	int t;
	scanf("%d", &t);
	FOR(it, 1, t + 1)
	{
		fprintf(stderr, "%d", it);
		scanf("%d", &n);
		g.clear();
		g.resize(n);
		FOR(i, 0, n)
		{
			int v;
			scanf("%d", &v);
			if (v == 0)
				continue;
			v--;
			g[v].push_back(i);
		}
		LL res = solve1();
		cout << "Case #" << it <<": " << res << endl;
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}
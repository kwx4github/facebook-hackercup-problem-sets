/*
 *
 * @author Mukesh Singh
 *
 */

/* Finding_the_Minimum_Window_in_S_which_Contains_All_Elements_from_T */

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
@SuppressWarnings("unchecked")
public class AB
{	
	final static int INF = 1000000000;
	final static int MAX = 50;
	void solve() throws Exception
	{
		int T = in.nextInt();
		for(int t= 1 ; t <= T  ;t++)
		{
			solveT(t);		
		}
	}
	//solve test cases
	LinkedList<Integer> gr[] ;
	int cost[][] ;
	
	void solveT(int tid) throws Exception 
	{
		int n = in.nextInt();
		//node starts from 1
		gr = new LinkedList[n+2];
		cost = new int[n+2][MAX];
		for(int ar[] : cost)
			Arrays.fill(ar,-1);
		for(int i = 0 ; i <= n ; i++)
			gr[i] = new LinkedList<Integer>();
		for(int i= 1 ; i <= n ; i++)
		{
			int a = in.nextInt();
			gr[a].addLast(i);
		}
		int ans = INF ;
		Stack<Integer> st = new Stack<Integer>();
		LinkedList<Integer> ls = new LinkedList<Integer>();
		ls.add(1);
		ls.addLast(INF);
		while(ls.size()>1)
		{
			int par = ls.removeFirst();
			if(par == INF)
				ls.addLast(INF);
			else
			{
				for(Integer o : gr[par])
				{
					ls.addLast(o);
				}
				st.push(par);
			}
		}
		while(st.size()>0)
		{
			dfs(st.pop());
		}
		/*for(int i= 0 ; i < 4 ; i++)
		{
			for(int j = 0; j < MAX ; j++)
				System.out.print(cost[i][j]+" ");
			System.out.println();
		}*/
		for(int i = 1 ; i < MAX ; i++)
			if(ans > cost[1][i])
				ans = cost[1][i];
		out.println("Case #"+tid+": "+ans);
	}
	void dfs(int par )
	{
		if(gr[par].size()==0)//leaf
		{
			for(int i = 1 ; i < MAX ; i++)
				cost[par][i] = i ;
			return ;
		}
		for(int ct = 1 ; ct < MAX ; ct++ )
		{
			int total = 0 ;
			for(Integer ch : gr[par])
			{
				int child = ch ;
				int min = INF ;
				for(int i = 1 ; i < MAX ; i++)
					if(ct != i && min > cost[child][i])
						min = cost[child][i] ;
				total += min ;
			}
			cost[par][ct] = total+ct ;
		}
	}
	//@ main function
	public static void main(String[] args) throws Exception 
	{
		new AB();
	}
	
	InputReader in;
	PrintStream out ;
	DecimalFormat df ;
	AB() 
	{
		try 
		{
			File defaultInput = new File("corporate_gifting.txt");
			if (defaultInput.exists()) 
				in = new InputReader("corporate_gifting.txt");
			else 
				in = new InputReader();
			defaultInput = new File("file.out");
			if (defaultInput.exists()) 
				out = new PrintStream(new FileOutputStream("file.out"));
			else
				out = new PrintStream(System.out);
			df = new DecimalFormat("######0.00");
			solve();
			out.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			System.exit(261);
		}
	}
	
	class InputReader {
		BufferedReader reader;
		StringTokenizer tokenizer;
		
		InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		InputReader(String fileName) throws FileNotFoundException {
			reader = new BufferedReader(new FileReader(new File(fileName)));
		}
		
		String readLine() throws IOException {
			return reader.readLine();
		}
		
		String nextToken() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens())
				tokenizer = new StringTokenizer(readLine());
			return tokenizer.nextToken();
		}
		
		boolean hasMoreTokens() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				String s = readLine();
				if (s == null)
					return false;
				tokenizer = new StringTokenizer(s);
			}
			return true;
		}
		
		int nextInt() throws NumberFormatException, IOException {
			return Integer.parseInt(nextToken());
		}
		
		long nextLong() throws NumberFormatException, IOException {
			return Long.parseLong(nextToken());
		}
		
		double nextDouble() throws NumberFormatException, IOException {
			return Double.parseDouble(nextToken());
		}
	}
}


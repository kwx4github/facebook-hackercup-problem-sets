#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <algorithm>
#include <map>
#include <vector>
#include <iostream>
#include <set>
#include <cmath>
#include <cstring>
#include <bitset>
#include <deque>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

#define mp make_pair
#define pb push_back
#define bpc(a) __builtin_popcount(a)
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define clr(ar,val) memset(ar, val, sizeof(ar))
#define forn(i,n) for(int i=0;i<(n);++i)
#define X first
#define Y second
#define debug(x) { cerr<<#x<<" = "<<(x)<<endl; }

const int mod = 1e9 + 7;
const int inf = 1e9;

ll powm(ll a,ll p,ll m){ll r=1 % m;while(p){if(p&1)r=r*a%m;p>>=1;a=a*a%m;}return r;}

int n;
vi lst[200000];
int mem[200000][2]; 
int uses[200000];

int dfs(int v, int p)
{
    if(uses[v])
        return 0;
    if(mem[v][p == 1] != -1)
        return mem[v][p == 1];
    uses[v] = 1;
    int ans = inf, w;
    vi var;
    if(p < n && p != 0)
        var.pb(p + 1);
    if(p != 1)
        var.pb(1);
    if(p == 0)
        var.pb(2);
    forn(k, sz(var))
    //for(int i = 1; i <= n; ++i)
    {
        //if(i == p || i != 1 || i != p + 1)
        //    continue;
        //int res = 0;
        int i = var[k], res = 0;
        forn(j, sz(lst[v]))
            res += dfs(lst[v][j], i);
        if(res < ans && res != 0)
        {
            ans = res;
            w = i;
        }
        //printf("%d %d %d %d %d\n", v, p, i, ans, w);
    }
    uses[v] = 0;
    //return ans != inf ? ans + w : (p == 1 ? 2 : 1);
    return mem[v][p == 1] = ans != inf ? ans + w : (p == 1 ? 2 : 1);
}

void solve()
{
    int t;
    scanf("%d%d", &n, &t);
    forn(i, n)
        lst[i].clear();
    clr(mem, -1);
    forn(i, n - 1)
    {
        scanf("%d", &t);
        lst[t - 1].pb(i + 1);
        lst[i + 1].pb(t - 1);
    }
    int start = 0;
    while(sz(lst[start]) > 1)
        start++;
    printf("%d\n", dfs(start, 0));
}

int main()
{
    int t;
    scanf("%d", &t);
    forn(i, t)
    {
        printf("Case #%d: ", i + 1);
        solve();
    }
    return 0;
}

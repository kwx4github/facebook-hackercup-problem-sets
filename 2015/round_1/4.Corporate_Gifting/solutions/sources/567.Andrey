#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>

using namespace std;

const int MAX_N = 2000;
const int MOD = 1000000007;

int dp[MAX_N + 1][MAX_N + 1];

int add(int a, int b)
{
	a += b;
	if (a >= MOD)a -= MOD;
	return a;
}

bool isInStressZone(int a, int b)
{
	return a <= b;
}

void precalc()
{
	for (int i = 0; i <= MAX_N; ++i)
		dp[i][0] = dp[0][i] = 1;
	for (int x = 1; x <= MAX_N; ++x)
	{
		for (int y = 1; y <= MAX_N; ++y)
		{
			bool stressZone = isInStressZone(x, y);
			if (isInStressZone(x - 1, y) == stressZone)
				dp[x][y] = dp[x - 1][y];
			if (isInStressZone(x, y - 1) == stressZone)
				dp[x][y] = add(dp[x][y], dp[x][y - 1]);
		}
	}
}

void read(int & a, int & b)
{
	string s; cin >> s;
	a = b = 0;
	int n = (int)s.length(), i = 0;
	for (; s[i] != '-'; ++i)
		a = a * 10 + (s[i] - '0');
	for (++i; i < n; ++i)
		b = b * 10 + (s[i] - '0');
}

void solve()
{
	int a, b; read(a, b);
	cout << dp[a][b] << " " << dp[b][b] << endl;
}

int main()
{
	ios::sync_with_stdio(false);
#ifdef GRANDVIC_DEBUG
	freopen("e:/input.txt", "rt", stdin);
	freopen("e:/output.txt", "wt", stdout);
#endif
	precalc();

	int T; cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}

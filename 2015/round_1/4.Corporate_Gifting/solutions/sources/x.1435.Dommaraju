import java.util.*;
class person
{
	int id;
	int parent;
	HashSet<Integer> avail=new HashSet<Integer>();
	HashMap<Integer,person> hm=new HashMap<Integer, person>();
	
	person(int id,int parent)
	{
		this.id=id;
		this.parent=parent;
	}
}

public class CorporateGifting {

	static long total=0;
	static void compute1(HashMap<Integer,person> ls, int n, int curr)
	{
		Stack<person> st1=new Stack<person>();
		Stack<person> st2=new Stack<person>();
		//
		person currEmp=ls.get(curr);
		st1.push(currEmp);
		//
		while(!st1.isEmpty())
		{
			person p=st1.pop();
			st2.push(p);
			//
			for(Integer key : p.hm.keySet())
				st1.push(p.hm.get(key));
			//
		}
		//
		while(!st2.isEmpty())
		{
			person p=st2.pop();
			int i=1;
			//
			for(;i<=n;i++)
				if(!p.avail.contains(i)) break;
			//
			if(p.parent!=-1)
			{
				person pr=ls.get(p.parent);
				pr.avail.add(i);
			}
			total+=i;
		}
	}
	
	/*
	static int compute(HashMap<Integer, person> ls,int n,int curr,int level) //bottom up approach
	{
		HashSet<Integer> hs=new HashSet<Integer>();
		person currEmployee=ls.get(curr);
		//System.out.println(level);
		//
		for(Integer key : currEmployee.hm.keySet())
		{
			int res=compute(ls,n,key,level+1);
			hs.add(res);
		}
		
		int i=1;
		for(;i<=n;i++)
			if(!hs.contains(i)) break;
		
		//
		total+=i;
		return i;
		
	}
	*/
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		//t=1;
		for(int i=1;i <=t;i++)
		{
			HashMap<Integer,person> ls=new HashMap<Integer, person>();
			int n=sc.nextInt();
			//System.out.println(n);
			for(int j=1;j <= n;j++)
			{
				int parent=sc.nextInt();
				if(parent == 0) //ceo
				{
					person p=new person(j,-1);
					ls.put(j,p);
				}else{
					if(!ls.containsKey(j))
					{
						person p=new person(j,parent);
						if(ls.containsKey(parent))
						{
							person pr=ls.get(parent);
							pr.hm.put(j,p);
							ls.put(j, p);
						}else{
							person pr=new person(parent,0);
							pr.hm.put(j,p);
							ls.put(j, p);
							ls.put(parent, pr);
						}
					}else{
						person p=ls.get(j);
						p.parent=parent;
						if(ls.containsKey(parent))
						{
							person pr=ls.get(parent);
							pr.hm.put(j,p);
						}else{
							person pr=new person(parent,0);
							pr.hm.put(j,p);
							ls.put(parent, pr);
						}
					}
				}
					
				/*
				int parent=sc.nextInt();
				if(parent > j)
					System.out.println(parent+" "+j);
				if(parent==0) //ceo
				{
					person p=new person(j,parent);
					ls.put(j,p);
				}else{
					person p=new person(j,parent);
					person pr=ls.get(parent);
					pr.hm.put(j,p);
					ls.put(j, p);
				}
				*/
			}
			//
			//
			
			compute1(ls, n, 1);

			System.out.println("Case #"+i+": "+ total);
			total=0;
		}
	}

}

package round1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class D {

    final String INPUT_FILE = "input.txt";
    final String OUTPUT_FILE = "output.txt";

    final int SOURCE =0;
    final int POSSIBLE_VALUES = 5;
    final int INF = 1 << 25;
    ArrayList<Integer> g[];
    int N;
    int[][] memo;

    private void buildGraph(String[] input) {
	N = input.length;
	g = new ArrayList[N];
	for (int i = 0; i < g.length; i++)
	    g[i] = new ArrayList<Integer>();
	for (int i = 1; i < input.length; i++) {
	    int from = Integer.parseInt(input[i]) - 1;
	    int to = i;
	    g[from].add(to);
	}
    }

    private int bestValueForNext(int next, int excluded) {
	int tmp = INF;
	for (int i = 1; i <= POSSIBLE_VALUES; i++) {
	    if (i == excluded)
		continue;
	    tmp = Math.min(tmp, memo[i][next]);
	}
	return tmp;
    }

    private int calcMin(Stack<Integer> order) {
	memo = new int[POSSIBLE_VALUES + 2][N];
	while (!order.isEmpty()) {
	    int from = order.pop();
	    for (int toPay = 1; toPay <= POSSIBLE_VALUES; toPay++) {
		int ret = toPay;
		for (int next : g[from]) {
		    ret += bestValueForNext(next, toPay);
		}
		memo[toPay][from] = ret;
	    }
	}
	return bestValueForNext(SOURCE, -1);
    }

    private Stack<Integer> getTopoOrder() {
	Stack<Integer> topoOrder = new Stack<Integer>();
	Queue<Integer> q = new LinkedList<Integer>();
	q.add(SOURCE);
	while (!q.isEmpty()) {
	    int from = q.poll();
	    topoOrder.add(from);
	    for (int next : g[from]) {
		q.add(next);
	    }
	}
	return topoOrder;
    }

    public String solve(String[] input) {
	buildGraph(input);
	Stack<Integer> order = getTopoOrder();
	return calcMin(order) + "";
    }

    public void solver() throws Exception {
	BufferedReader in = new BufferedReader(new FileReader(INPUT_FILE));
	PrintWriter out = new PrintWriter(new File(OUTPUT_FILE));
	int t = Integer.parseInt(in.readLine());

	for (int tt = 1; tt <= t; tt++) {
	    in.readLine();
	    out.println("Case #" + tt + ": "
		    + (solve(in.readLine().split(" "))));
	}
	in.close();
	out.close();
    }

    public static void main(String[] args) throws Exception {
	new D().solver();
    }
}

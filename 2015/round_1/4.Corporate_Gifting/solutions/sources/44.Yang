#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

const int kMaxN = 200007;
const int kMaxColors = 107;

const long long kInfinity = kMaxN * 10LL * kMaxN;

int max_colors;
int n;

vector<int> children[kMaxN];
long long dp[kMaxN][kMaxColors];
long long non_equal[kMaxN][kMaxColors];

void Gao(int x) {
    long long* f = non_equal[x];
    long long* g = dp[x];
    long long current = kInfinity;
    for (int i = 0; i < max_colors; ++i) {
        f[i] = current;
        current = min(current, g[i]);
    }
    current = kInfinity;
    for (int i = max_colors - 1; i >= 0; --i) {
        f[i] = min(f[i], current);
        current = min(current, g[i]);
    }
}

void Dfs(int top) {
    vector<int> orders;
    queue<int> q;
    q.push(top);
    while (!q.empty()) {
        int fr = q.front();
        orders.push_back(fr);
        q.pop();
        for (int i = 0; i < children[fr].size(); ++i) {
            q.push(children[fr][i]);
        }
    }

    assert(orders.size() == n);
    for (int k = (int) orders.size() - 1; k >= 0; --k) {
        int x = orders[k];
        long long* f = dp[x];
        if (children[x].empty()) {
            for (int i = 0; i < max_colors; ++i) {
                f[i] = i + 1;
            }
            Gao(x);
            continue;
        }
        for (int color = 0; color < max_colors; ++color) {
            f[color] = color + 1;
        }
        for (int i = 0; i < children[x].size(); ++i) {
            int ch = children[x][i];
            long long *g = non_equal[ch];
            for (int color = 0; color < max_colors; ++color) {
                f[color] += g[color];
            }
        }
        Gao(x);
    }
}

void Solve(int case_id) {
    cin >> n;
    for (int i = 0; i < n; ++i) {
        children[i].clear();
    }
    int manager;
    for (int i = 0; i < n; ++i) {
        scanf("%d", &manager);
        if (i == 0) {
            assert(manager == 0);
            continue;
        }
        --manager;
        children[manager].push_back(i);
    }
    max_colors = min(n, kMaxColors);
    Dfs(0);
    long long answer = kInfinity;
    for (int i = 0; i < max_colors; ++i) {
        answer = min(answer, dp[0][i]);
    }

    cout << "Case #" << case_id << ": " << answer << endl;
}

int main() {
    int case_num;
    cin >> case_num;
    for (int i = 1; i <= case_num; ++i) {
        Solve(i);
    }
    return 0;
}
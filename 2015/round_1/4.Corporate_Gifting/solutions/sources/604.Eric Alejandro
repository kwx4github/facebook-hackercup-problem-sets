#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
 
#define REP(i, n) for(int i=0;i<int(n);i++)
#define VI vector<int>
#define VS vector<string>
#define PB push_back
#define MP(X,Y) make_pair(X,Y)
#define MM 200010
#define MX 25 
vector<int> edges[MM];
int P[MM];
int states[MM][MX];
int N;


int doit() {
  queue<int> Q;
  int i,j , k;
  for (i = 1; i <= N; ++i) if (edges[i].size() == 0) Q.push(i);
  int counter[MM];
  memset(counter, 0, sizeof(counter));
  int res = MM * MX;
  while (Q.size()) {
    int node = Q.front(); Q.pop();
    for (int father = 1; father < MX; ++father) {
      states[node][father] = MX * MM;
      for (k = 1; k < MX; ++k) {
        if (k == father) continue;
        // We pay a gift of cost k.
        int cost = k;
        for (i = 0; i < edges[node].size(); ++i) {
          cost += states[edges[node][i]][k]; 
        }
        if (node == 1) {
          res = min(res, cost);
        }
        states[node][father] = min(states[node][father], cost);
      }
    }
    if (P[node]) {
      counter[P[node]]++;
      if (counter[P[node]] == edges[P[node]].size()) Q.push(P[node]);
    }
  }
  return res;
}

int main () {
  int i, j, k;
  int casos; scanf("%d", &casos);
  REP(h, casos) {
    REP(d, MM) edges[d].clear();
    memset(states, -1, sizeof(states));
    scanf("%d", &N);
    REP(r, N) {
      int neigh;
      scanf("%d", &neigh);
      P[r+1] = neigh;
      if (!neigh) continue;
      edges[neigh].PB(r+1);
    }
    int res = doit();
    printf("Case #%d: %d\n", h+1, res); 
  }
  return 0;
}

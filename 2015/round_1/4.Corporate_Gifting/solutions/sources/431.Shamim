#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<queue>
#include<sstream>
#include<queue>
#include<ctype.h>
#include<cstring>


using namespace std;

#define re return
#define co continue
#define pb push_back
#define br break
#define sz size


#define pf printf
#define sf scanf

class Gift {
    int n;
    vector<int> topoCount;
    vector< vector<int> > subordinate;
    int maxOut = 23;
    vector< vector<int> > DP;
    vector<int> manages;
public:
    Gift() {}
    Gift(int val): n(val)    {
        subordinate.resize(val+2);
        topoCount.resize(val+2);
        DP.resize(val+2);
        int i;
        for ( i=0; i<DP.size(); i++)
            DP[i].resize(maxOut+1);
    }
    void makeOrder(vector<int> manages) {
        this->manages = manages;
        int i;
        fill (topoCount.begin(), topoCount.end(), 0);
        for ( i=1; i<manages.size(); i++) {
            topoCount[ manages[i]]++;
            subordinate[ manages[i] ].push_back(i+1); // indexing starts from 1
        }
    }
    int solve() {
        int i;
        queue<int> Q;
        //cout<<DP.size()<< " "<<DP[1].size()<<endl;
        //return 1;
        for ( i=1; i<=n; i++) {
            if ( topoCount[i] == 0) { // no children
                Q.push(i);
                int value;
                for ( value=1; value<= maxOut; value++)
                    DP[i][value] = value;
            }
        }
        // initialize DP
        for ( i=0;i<DP.size(); i++)
            for (int j=0; j<DP[i].size(); j++)
                DP[i][j] = 100000000;

        while ( Q.empty() == false ) {
            int cur = Q.front();
            Q.pop();

            // reduce parent
            //cout<<cur<<endl;
            int manager = manages[cur-1];
            //cout<<cur<<" "<<manager<<endl;
            topoCount [ manager]--;

            if ( topoCount[manager] == 0) // all children solved
                Q.push(manager);
            int value, childValue;


            for ( value=1; value<=maxOut; value++) {
                int childSum=0;
                for ( i=0; i<subordinate[cur].size(); i++) {
                    int minVal = 1000000000;
                    for ( childValue=1; childValue<=maxOut; childValue++)
                        if ( value != childValue) {
                            minVal = min (minVal, DP[ subordinate[cur][i] ] [childValue] );
                        }
                    childSum += minVal;
                }

                DP [cur][value] = childSum + value;
            }
        }

        int minSum = 1000000000;
        for ( i=1; i<=maxOut; i++)
            minSum = min (minSum, DP[1][i]);
        return minSum;
    }

};

int main()
{

    freopen("corporate_gifting.txt", "r", stdin);
    freopen("ans_gift.txt", "w", stdout);

    int kase = 1;
    int T;
    cin>>T;
    while ( T--) {
        int n;
        cin>>n;
        Gift gift(n);
        int i;
        vector<int> manages(n);
        for ( i=0; i<n; i++)
            cin>>manages[i];
        int ans;
        gift.makeOrder(manages);
        ans = gift.solve();
        printf("Case #%d: %d\n", kase++, ans);
    }
    return 0;
}

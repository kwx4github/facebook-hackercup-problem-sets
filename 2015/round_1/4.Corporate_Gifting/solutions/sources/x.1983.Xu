#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <iterator>
#define REP(i,a,n) for(int i = (a); i < (int)(n); ++i)
#define foreach(itr,c) for(decltype((c).begin()) itr=(c).begin(); itr != (c).end(); itr++)
#define mp(a,b) make_pair(a,b)

using namespace std;

//typedef __int64 ll;
//typedef unsigned __int64 ull;
typedef long long ll;
typedef unsigned long long ull;


template<typename T>
inline T ABS(T a) { return a > 0 ? a : -a; }
template<typename T>
inline T MIN(T a, T b) { return a < b ? a : b; }
template<typename T>
inline T MAX(T a, T b) { return a > b ? a : b; }
template<typename T>
inline T CHKMIN(T &a, T b) { if(a > b) a = b; return a; }
template<typename T>
inline T CHKMAX(T &a, T b) { if(a < b) a = b; return a; }
template<typename T>
inline void SWAP(T &a, T &b) { static T c; c = a; a = b; b = c; }

template<typename T>
void print(T a) { cout << a << ' '; }
template<typename T, typename... T0>
void print(T a, T0... b) { print(a); print(b...); }
template<typename T>
void println(T a) {cout << a << endl;}
template<typename T, typename... T0>
void println(T a, T0... b) { print(a); println(b...); }

int n, in[200100], topo[200100], mk[200100], ss[200100];
int dp[200100][2], ind[200100][2];
vector<int> chd[200100];

void bfs() {
  int beg = 0, end = 0;
  topo[end++] = 0;
  while(beg < end) {
    int now = topo[beg++];
    foreach(i, chd[now]) {
      topo[end++] = *i;
    }
  }
  //REP(i, 0, n) printf("%d ", topo[i]); puts("");  
}

void update(int *dp, int *ind, int d, int i) {
  if(dp[0] >= d || dp[0] == 0) {
    dp[1] = dp[0];
    ind[1] = ind[0];
    dp[0] = d;
    ind[0] = i;
  } else if(dp[1] >= d || dp[1] == 0) {
    dp[1] = d;
    ind[1] = i;
  }
}

void solve() {
  memset(dp, 0, sizeof(dp));
  memset(ind, 0, sizeof(ind));
  memset(mk, -1, sizeof(mk));

  for(int i = n - 1; i >= 0; --i) {
    int now = topo[i];
    if(chd[now].size() == 0) {
      dp[now][0] = 1;
      ind[now][0] = 1;
      
      dp[now][1] = 2;
      ind[now][1] = 2;
      continue;
    }
    int sum = 0, max = 0;
    foreach(i, chd[now]) {
      int c = *i;
      CHKMAX(max, ind[c][0]);
      sum += dp[c][0];
      if(mk[ind[c][0]] != now) {
        mk[ind[c][0]] = now;
        ss[ind[c][0]] = 0;
      }
      ss[ind[c][0]] += dp[c][1] - dp[c][0];
    }
    //println("now", now, sum, max);
    REP(j, 1, max + 2) {
      int ts = sum + (mk[j] == now ? ss[j] : 0);
      //println("j", j, ts);
      update(dp[now], ind[now], ts + j, j);
    }
  }
}

int main() {
  freopen("corporate_gifting.txt", "r", stdin);
	freopen("corporate_gifting.out", "w", stdout);
  int cas;
  cin >> cas;
  REP(tt, 1, cas + 1) {
    cin >> n;
    REP(i, 0, n) chd[i].clear();
    REP(i, 0, n) {
      scanf("%d", in + i);
      in[i]--;
      if(i != 0) chd[in[i]].push_back(i);
    }

    
    bfs();
    solve();
    //REP(i, 0, n) println("dp", i, ind[i][0], dp[i][0], ind[i][1], dp[i][1]);
    printf("Case #%d: %d\n", tt, dp[0][0]);
  }
  return 0;
}

#include<cstdio>
#include<cstdlib>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>
#include<stack>
using namespace std;

struct TreeNode {
    int id;
    vector<int> child;
    int traverse;
    //unordered_set<TreeNode*> child;
    TreeNode(int x) : id(x) { traverse = 0; }
};
unordered_map<int, TreeNode*> mapping;

unordered_map<int, pair<pair<int, long long>, pair<int, long long> > > childcost;

int main(){
    int T, N, mi;
    scanf(" %d ", &T);
    for(int t=1; t<=T; ++t){
	mapping.clear();
	childcost.clear();

	scanf(" %d ", &N);
	mapping[0] = new TreeNode(0);
	for(int i=0; i<N; ++i){
	    scanf(" %d ", &mi);
	    if(mapping.find(mi) == mapping.end()) mapping[mi] = new TreeNode(mi);
	    if(mapping.find(i+1) == mapping.end()) mapping[i+1] = new TreeNode(i+1);
	    //(mapping[mi]->child).insert(mapping[i+1]);
	    (mapping[mi]->child).push_back(i+1);
	}

	//DFS
	stack<int> DFS;
	DFS.push(1);
	while(!DFS.empty()){
	    TreeNode *cur = mapping[DFS.top()];
	    if(cur->traverse < (cur->child).size()){
		DFS.push(cur->child[cur->traverse]);
		++(cur->traverse);
	    }else{
		DFS.pop();
		if(cur->traverse == 0){
		    childcost[cur->id] = make_pair(make_pair(1, 1), make_pair(2, 2));
		}else{
		    int ming, ming2;
		    long long minc, minc2;
		    ming = -1;
		    ming2 = -1;
		    minc = 40000000001;
		    minc2 = 40000000001;
		    int nc = cur->traverse;
		    bool cont = true;
		    for(int i=1; i<=N && cont; ++i){
			cont = false;
			int tmpc = i;
			for(int j=0; j<nc; ++j){
			    int ch = (cur->child)[j];
			    tmpc += (i==(childcost[ch]).first.first ? (childcost[ch]).second.second : (childcost[ch]).first.second);
			    if(i==(childcost[ch]).first.first && (childcost[ch]).second.second > (childcost[ch]).first.second)
				cont = true;
			}
			if(tmpc < minc){
			    ming = i;
			    minc = tmpc;
			}
		    }
		    cont = true;
		    for(int i=1; i<=N && cont; ++i){
			if(i == ming) continue;
			cont = false;
			int tmpc = i;
			for(int j=0; j<nc; ++j){
			    int ch = (cur->child)[j];
			    tmpc += (i==(childcost[ch]).first.first ? (childcost[ch]).second.second : (childcost[ch]).first.second);
			    if(i==(childcost[ch]).first.first && (childcost[ch]).second.second > (childcost[ch]).first.second)
				cont = true;
			}
			if(tmpc < minc2){
			    ming2 = i;
			    minc2 = tmpc;
			}
		    }
		    childcost[cur->id] = make_pair(make_pair(ming, minc), make_pair(ming2, minc2));
		}
	    }
	}

	printf("Case #%d: %d\n", t, childcost[1].first.second);
	//printf("Case #%d: %d\n", t, DFS(mapping[1], N).first.second);
    }
    return 0;
}

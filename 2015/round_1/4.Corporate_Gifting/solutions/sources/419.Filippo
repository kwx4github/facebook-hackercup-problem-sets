#include <algorithm>
#include <iostream>
#include <limits>
#include <map>
#include <vector>

using namespace std;

const int infty = numeric_limits< int >::max();

vector< int > graph[200005];

struct info_t {
	int a, b, c;	//if <a> then <b> else <c>
};

info_t get(int n) {
	if(graph[n].empty()) return {1, 1, 2};
	
	int min_sum = 0;
	map< int, int > map;
	for(auto & x : graph[n]) {
		auto res = get(x);
		min_sum += res.b;
		map[res.a] += res.c - res.b;
	}
	int least1 = 1, least2 = 2;
	int least1v, least2v;
	for(auto & x : map) {
		if(x.first == least1) ++least1;
		else if(x.first == least2) ++least2;
		if(least1 == least2) ++least2;
		x.second += x.first;
	}
	least1v = least1;
	least2v = least2;
	for(auto & x : map) {
		if(x.second < least2v) {
			least2 = x.first;
			least2v = x.second;
			if(least2v < least1v) {
				swap(least1, least2);
				swap(least1v, least2v);
			}
		}
	}
	return {least1, least1v + min_sum, least2v + min_sum};
}

void solve(int t) {
	int N;
	cin >> N;
	for(int n = 1; n <= N; ++n) {
		int p;
		cin >> p;
		graph[p].push_back(n);
	}
	
	cout << "Case #" << t << ": " << get(1).b << '\n';
	
	for(int n = 0; n <= N; ++n) graph[n].clear();
}

int main() {
	ios_base::sync_with_stdio(false);
	
	int T;
	cin >> T;
	for(int t = 1; t <= T; ++t) solve(t);
}

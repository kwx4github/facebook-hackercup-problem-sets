#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;
#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)
#define rep(i,n) REP(i,0,n)
#define FOR(it,c) for(__typeof((c).begin()) it=(c).begin(); it!=(c).end(); ++it)
#define ALLOF(c) (c).begin(), (c).end()
typedef long long ll;

#define MAXV 200005
vector<int> G[MAXV], revG[MAXV];
vector<int> level[MAXV];
int max_level;
int cost[MAXV];

void add_level(int node, int lv){
  level[lv].push_back(node);
  max_level = max(max_level, lv);
  rep(i,revG[node].size()){
    add_level(revG[node][i], lv+1);
  }
}

int solve(int N){
  for(int lv = max_level; lv >= 0; lv--){
    rep(i,level[lv].size()){
      int node = level[lv][i];
      map<int,int> col;
      rep(j,revG[node].size()){
        col[cost[revG[node][j]]]++;
      }
      if(col.size() == 0){
        cost[node] = 1;
      }else{
        int k = 1;
        while(col.count(k)>0){
          k++;
        }
        cost[node] = k;
      }
    }
  }
  int ret = 0;
  REP(i, 1, N){
    ret += cost[i];
  }
  return ret;
}

int main(){
  int T;
  cin >> T;
  rep(t,T){
    int N;
    cin >> N;
    rep(i,MAXV){
      G[i].clear();
      revG[i].clear();
      level[i].clear();
      cost[i] = -1;
    }
    rep(i,N){
      int child = i+1;
      int parent;
      cin >> parent;
      G[child].push_back(parent);
      revG[parent].push_back(child);
    }

    max_level = 0;
    add_level(0, 0);
    
    cout << "Case #" << t+1 << ": " << solve(N+1) << endl;
  }
  return 0;
}

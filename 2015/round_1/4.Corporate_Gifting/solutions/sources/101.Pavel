#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define in_str(b) scanf("%s",(b))
#define in_int1(a) scanf("%d",&(a))
#define in_int2(a,b) scanf("%d%d",&(a),&(b))
#define in_int3(a,b,c) scanf("%d%d%d",&(a),&(b),&(c))
#define in_int4(a,b,c,d) scanf("%d%d%d%d",&(a),&(b),&(c),&(d))
#define so(a) sort((a).begin(), (a).end())
#define rso(a) sort((a).rbegin(), (a).rend())
#define mp(a,b) make_pair(a,b)
#define MOD 1000000007
#define INF 2000000000
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;

#define MAXN 200100
#define MAXC 30

vector<int> edge[MAXN];
int parent[MAXN];
int deg[MAXN];
int dp[MAXC][MAXN];
int n;

void Solve()
{
	int i, j, k, m;

	int tests;
	in_int1(tests);
	for (int test = 1; test <= tests; test++)
	{
		printf("Case #%d: ", test);
		in_int1(n);
		memset(deg, 0, sizeof(deg));
		for (i = 1; i <= n; i++) edge[i].clear();
		for (i = 1; i <= n; i++)
		{
			int p;
			in_int1(p);
			parent[i] = p;
			deg[p]++;
			if (p > 0)
			{
				edge[i].push_back(p);
				edge[p].push_back(i);
			}
		}

		queue<int> q;

		// find leaves
		for (i = 1; i <= n; i++)
		{
			if (!deg[i]) q.push(i);
		}

		while (!q.empty())
		{
			int u = q.front();
			q.pop();

			for (i = 0; i < MAXC; i++)
			{
				dp[i][u] = INF;
				for (j = 0; j < MAXC; j++)
				{
					if (i == j) continue;
					int res = 0;
					for (k = 0; k < edge[u].size(); k++)
					{
						int v = edge[u][k];
						if (v == parent[u]) continue;
						res += dp[j][v];
					}
					dp[i][u] = min(dp[i][u], res + j + 1);
				}
			}
			deg[parent[u]]--;
			if (u>1 && !deg[parent[u]]) q.push(parent[u]);
		}

		int best = INF;
		for (i = 0; i < MAXC; i++) best = min(best, dp[i][1]);
		printf("%d\n", best);
	}
}

int main(int argc, char **argv)
{
#ifdef __LOCAL_RUN__
	#define _MAX_BUF_SIZE 32
	int _i = 0;
	char *_buf = new char[_MAX_BUF_SIZE];

	FILE *res_output = freopen("output.txt", "wt", stdout);
	if (argc > 1)
	{
		freopen(argv[1], "rt", stdin);
		Solve();
	}
	else
	{
		while (true)
		{
			string _suffix = string(itoa(_i, _buf, 10)) + string(".txt");
			FILE *res_input = freopen((string("input-") + _suffix).c_str(), "rt", stdin);
			if (!res_input)
			{
				// the end
				break;
			}
			if (_i) printf("\n\n");
			printf("==== Case #%d =====\n", _i);
			Solve();
			_i++;
		}
	}
#else
	Solve();
#endif
	return 0;
}
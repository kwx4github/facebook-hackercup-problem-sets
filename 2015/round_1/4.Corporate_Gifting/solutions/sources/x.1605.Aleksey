#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

vector < vector <int> > e;
vector < vector < pair <ll, int> > > f;
int n;

void dfs(int x)
{
    for (size_t i = 0; i < e[x].size(); ++i) {
        dfs(e[x][i]);
    }
    vector < pair <ll, int> > &v = f[x];
    v.clear();
    int m = min(30, n);
    for (int j = 1; j <= m; ++j) {
        ll res = 0;
        for (size_t i = 0; i < e[x].size(); ++i) {
            int y = e[x][i];
            res += f[y][f[y][0].second == j].first;
        }
        v.push_back(make_pair(res + j, j));
        sort(v.begin(), v.end());
        if (v.size() == 3) {
            v.pop_back();
        }
    }
}

void solve()
{
    cin >> n;
    e.resize(n);
    f.resize(n);
    for (int i = 0; i < n; ++i) {
        e[i].clear();
        int x;
        cin >> x;
        if (x) {
            e[x - 1].push_back(i);
        }
    }
    dfs(0);
    cout << f[0][0].first;
}

int main(int /* argc */, char** /* argv */)
{
    ios_base::sync_with_stdio(false);
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    #endif

    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        cout << "Case #" << test << ": ";
        solve();
        cout << endl;
    }


    fprintf(stderr, "Time execute: %.3lf sec\n", clock() / (double)CLOCKS_PER_SEC);
    return 0;
}

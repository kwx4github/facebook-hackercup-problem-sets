#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <queue>
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
#include <cstring> 

using namespace std; 

typedef long long ll; 
typedef pair<int, int> pii;

#define INF 1000000000
#define pb push_back 
#define itr iterator 
#define sz size() 
#define mp make_pair

int t, teste, n;
vector<int> adj[210000];

void check(map<int, long long>& inc, int th, int& best, int& second) {
	if (best == -1 || best + inc[best] > th + inc[th]) {
		second = best;
		best = th;
	}
	else if (second == -1 || second + inc[second] > th + inc[th]) {
		second = th;
	}
}

pair<long long, pair<int, long long> > dfs(int v) {
	if (adj[v].size() == 0) {
		return {1, {1, 2}};
	}

	long long tot = 0;
	map<int, long long> inc;

	for (int child : adj[v]) {
		auto ret = dfs(child);
		tot += ret.first;
		inc[ret.second.first] += ret.second.second - ret.first;
	}

	int best = -1;
	int second = -1;

	int tested = 0;
	for (int th = 1; th <= n; th++) {
		if (inc[th] == 0) {
			check(inc, th, best, second);
			if (++tested == 2) break;
		}
	}

	for (auto it: inc) if (it.second != 0) {
		check(inc, it.first, best, second);
	}

	return make_pair(tot + best + inc[best], make_pair(best, tot + second + inc[second]) );
}

int main() {
	for (scanf("%d", &t); t; t--) {
		printf("Case #%d: ", ++teste);

		scanf("%d", &n);
		for (int i = 0; i < n; i++) {
			adj[i].clear();
		}

		for (int i = 0; i < n; i++) {
			int p;
			scanf("%d", &p); p--;
			if (p != -1) {
				adj[p].push_back(i);
			}
		}

		printf("%lld\n", dfs(0).first);
	}
}
//
// Facebook Hacker Cup 2015 Round 1
// D. Corporate Gifting
//

/*
Constraints

1 <= T <= 100
1 <= N <= 200,000

NOTE: The input file is about 10-20MB.
*/

#include <algorithm>
#include <string>
#include <iostream>
#include <sstream>
#include <vector>

using namespace std;

typedef long long LL;
typedef vector<int> IntVec;

#define MAX_COLORS 16

struct Employee {
	int level;
	IntVec subs;
	Employee() : level(0) {
		memset(costs, 0, sizeof(costs));
	}
	int costs[MAX_COLORS];
};
typedef vector<Employee> EmpVec;

int solve(const vector<int> &v) {
	static IntVec levs[200000];
	for (int i = 0; i < (int)v.size(); ++i) {
		levs[i].clear();
	}
	levs[0].push_back(0);

	EmpVec ev(v.size());
	for (int i = 1; i < (int)v.size(); ++i) {
		int boss = v[i] - 1;
		ev[boss].subs.push_back(i);
		int level = ev[boss].level + 1;
		ev[i].level = level;
		levs[level].push_back(i);
	}
	for (int level = (int)v.size() - 1; level >= 0; --level) {
		if (levs[level].size() <= 0) {
			continue;
		}
		for (size_t i = 0; i < levs[level].size(); ++i) {
			Employee &e = ev[levs[level][i]];
			for (int j = 0; j < MAX_COLORS; ++j) {
				int tot = j + 1;
				for (size_t k = 0; k < e.subs.size(); ++k) {
					int m = 1 << 30;
					Employee &sub = ev[e.subs[k]];
					for (int l = 0; l < MAX_COLORS; ++l) {
						if (j != l) {
							m = min(m, sub.costs[l]);
						}
					}
					tot += m;
				}
				e.costs[j] = tot;
			}
		}
	}
	int ans = 1 << 30;
	for (int i = 0; i < MAX_COLORS; ++i) {
		ans = min(ans, ev[0].costs[i]);
	}
	return ans;
}

int main(int argc, char *argv[])
{
	string s;
	getline(cin, s);
	int T = atoi(s.c_str());
	for (int t = 0; t < T; ++t) {
		getline(cin, s);
		int N = atoi(s.c_str());
		getline(cin, s);
		stringstream ss(s);
		vector<int> v(N);
		for (int i = 0; i < N; ++i) {
			ss >> v[i];
		}
		sort(v.begin(), v.end());
		int ans = solve(v);
		cout << "Case #" << (t+1) << ": " << ans << endl;
	}
	return 0;
}

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class fbqCorporate {
	static class employee {
		ArrayList<employee> subordinates;
		int[] bestCostNot;
		int n;
		int man;

		public employee(int i, int a) {
			subordinates = new ArrayList<employee>();
			bestCostNot = new int[5];
			n = i;
			man = a;
		}

		int bestCostNot(int not) {
			if (bestCostNot[not] == 0) {
				bestCostNot[not] = Integer.MAX_VALUE;

				for (int i = 1; i < bestCostNot.length; i++) {
					if (i == not)
						continue;

					int cost = i;
					for (employee sub : subordinates) {
						cost += sub.bestCostNot(i);
					}

					bestCostNot[not] = Math.min(bestCostNot[not], cost);
				}
			}

			return bestCostNot[not];
		}
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int cases = in.nextInt();
		int cn = 0;

		while (cn++ < cases) {
			int numEmployees = in.nextInt();
			employee[] employees = new employee[numEmployees];

			for (int i = 0; i < employees.length; i++) {
				employees[i] = new employee(i, 0);
			}

			in.nextInt();
			int[] subs = new int[numEmployees];
			for (int i = 1; i < employees.length; i++) {
				int derp =in.nextInt() - 1; 
				employees[derp].subordinates.add(employees[i]);
				employees[i].man = derp;
				subs[derp]++;
			}

			Stack<employee> s = new Stack<employee>();
			for (int i = 0; i < subs.length; i++) {
				if (subs[i] == 0)
					s.add(employees[i]);
			}
			
			while (s.size() > 0) {
				employee here = s.pop();
				
				
				for (int i = 1; i < 5; i++) {
					here.bestCostNot(i);
				}
				
				subs[here.man]--;
				if (subs[here.man] == 0)
					s.add(employees[here.man]);

			}

			int best = Integer.MAX_VALUE;
			for (int i = 1; i < 5; i++) {
				best = Math.min(best, employees[0].bestCostNot(i));
			}

			System.out.printf("Case #%d: %d\n", cn, best);
		}
	}
}

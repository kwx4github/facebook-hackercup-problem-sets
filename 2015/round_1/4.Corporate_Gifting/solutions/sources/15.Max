#include <cstdio>
#include <vector>
#include <algorithm>
#include <memory.h>
using namespace std;

const int N = 200500;

const int KK = 20;

typedef long long llong;

llong D[N][KK];
llong pD[N][KK + 1], sD[N][KK + 1];

int K;

const llong inf = 1e18;

vector<int> E[N];

void build(llong D[KK], llong pD[KK + 1], llong sD[KK + 1])
{
    pD[0] = inf;
    for (int i = 0; i < K; i++)
        pD[i + 1] = min(pD[i], D[i]);
    sD[K] = inf;
    for (int i = K - 1; i >= 0; i--)
        sD[i] = min(sD[i + 1], D[i]);
}


void DFS(int x)
{
    for (int y : E[x])
        DFS(y);
    for (int v = 0; v < K; v++)
    {
        D[x][v] = v + 1;
        for (int y : E[x])
            D[x][v] += min(pD[y][v], sD[y][v + 1]);
    }
    build(D[x], pD[x], sD[x]);
}

void solve(int tc)
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i <= n; i++)
        E[i].clear();
    for (int i = 1; i <= n; i++)
    {
        int y;
        scanf("%d", &y);
        E[y].push_back(i);
    }
    for (K = KK - 1; K < KK; K++)
    {
        DFS(1);
        llong ans = inf;
        for (int i = 0; i < K; i++) 
            ans = min(ans, D[1][i]);
        printf("Case #%d: %lld\n", tc, ans);
    }
//    printf("===\n");
}

int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve(i + 1);
}

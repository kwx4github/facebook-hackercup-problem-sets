import java.util.*;
import java.io.*;

class Tree {
  public static int infty = 1000000000;
  public int best;
  public int c;
  public int diff;
  public ArrayList<Tree> children;

  public Tree() {
    children = new ArrayList<Tree>();
    best = 1;
    c = 1;
    diff = 1;
  }

  public void addChild(Tree child) {
    children.add(child);
  }

  public void solve() {
    if (children.size() > 0) {
      int degree = children.size();
      int[] cost = new int[degree+3];
      for (int i=0; i<degree+3; i++) cost[i] = i;
      best = 0;

      for (Tree child: children) {
        child.solve();
        best += child.best;
        cost[child.c] += child.diff;
      }

      int smallest1v = infty;
      int smallest2v = infty;
      int smallest1c = 0;

      for (int cc=1; cc<degree+3; cc++) {
        if (cost[cc] < smallest1v) {
          smallest2v = smallest1v;
          smallest1v = cost[cc];
          smallest1c = cc;
        } else if (cost[cc] < smallest2v) {
          smallest2v = cost[cc];
        }
      }

      best += smallest1v;
      c     = smallest1c;
      diff  = smallest2v-smallest1v;
    }
  }
}

class Hacker4 {
  public static void main(String[] args) {
    Scanner in = new Scanner(new InputStreamReader(System.in));
    int T = in.nextInt();

    for (int caseno=1; caseno<=T; caseno++) {
      int N = in.nextInt();
      Tree[] nodes = new Tree[N+1];
      for (int i=0; i<=N; i++) nodes[i] = new Tree();
      for (int i=1; i<=N; i++) {
        int parent = in.nextInt();
        nodes[parent].addChild(nodes[i]);
      }

      nodes[1].solve();
      System.out.println(String.format("Case #%d: %d", caseno, nodes[1].best));
    }
  }
}
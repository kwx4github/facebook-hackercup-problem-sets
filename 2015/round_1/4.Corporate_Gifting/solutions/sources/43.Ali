#!/usr/bin/env python3

def solve(N, managers):
  # Compute subordinates
  subordinates = {i: set() for i in range(1, N + 1)}
  for i in range(2, N + 1):
    subordinates[managers[i - 1]].add(i)
  # Topological ordering of employees
  ordered = []
  stack = [1]
  while stack:
    i = stack.pop()
    ordered.append(i)
    for j in subordinates[i]:
      stack.append(j)
  ordered.reverse()
  # Compute best and second best solution for each employee,
  # each stored as (choice, total)
  best = dict()
  for i in ordered:
    # Compute a sufficiently large pool of candidate choices
    choices = [] # Candidate choices for the current employee
    unsafe = {best[j][0][0] for j in subordinates[i]} # Choices that would not be optimal for subordinates
    choice = 1
    safe = 0 # number of safe candidates so far
    while safe < 2:
      choices.append(choice)
      if choice not in unsafe:
        safe += 1
      choice += 1
    # Try choices and select best two
    first, second = None, None
    for choice in choices:
      total = choice
      for j in subordinates[i]:
        if best[j][0][0] == choice:
          total += best[j][1][1]
        else:
          total += best[j][0][1]
      if first is None:
        first = (choice, total)
      elif first[1] > total:
        second = first
        first = (choice, total)
      elif second is None:
        second = (choice, total)
      elif second[1] > total:
        second = (choice, total)
    best[i] = (first, second)
  return best[1][0][1]

def main():
  T = int(input())
  for case in range(1, T + 1):
    N = int(input())
    managers = list(map(int, input().split()))
    solution = solve(N, managers)
    print("Case #%d: %s" % (case, solution))

if __name__ == "__main__":
  main()


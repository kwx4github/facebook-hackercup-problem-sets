#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <stack>
#define MAXN 200005
#define K 200 //CHANGE THIS LATER!!!
using namespace std;

int testcase, N, deg[MAXN], P[MAXN], dp[MAXN][K+5], val[MAXN][K+5], F[MAXN][K+5], B[MAXN][K+5];
bool ok[MAXN];
vector <int> G[MAXN], V;
stack <int> S;

void precomp(int x) {
  //printf("precomp %d!\n",x);
  ok[x] = 1;
  F[x][0] = 2 * N;
  for (int i=1;i<=K;++i) F[x][i] = min(F[x][i-1], dp[x][i]);
  B[x][K+1] = 2*N;
  for (int i=K;i>=1;--i) B[x][i] = min(B[x][i+1], dp[x][i]);
 // printf("%d: \n",x);
 // for (int i=0;i<=K;++i) printf("%d ",F[x][i]); printf("\n");
 // for (int i=0;i<=K;++i) printf("%d ",B[x][i]); printf("\n");
}

int dis(int x,int c) {
  if (val[x][c] != -1) return val[x][c];
  if (G[x].empty()) val[x][c] = 0;
  else {
    val[x][c] = 0;
    for (auto y : G[x]) {
      if (!ok[y]) precomp(y);
      val[x][c] += min(F[y][c-1], B[y][c+1]);
    }
  }
  //printf("val[%d][%d] = %d\n",x,c,val[x][c]);
  return val[x][c];
}

int cal(int x,int c) {
  if (dp[x][c] != -1) return dp[x][c];
  dp[x][c] = c + dis(x,c);
 // printf("dp[%d][%d] = %d\n",x,c,dp[x][c]);
  return dp[x][c];
}


int main () {
  scanf("%d",&testcase);
  for (int TC=1;TC<=testcase;++TC) {
    scanf("%d",&N);
    memset(deg,0,sizeof(deg));
    memset(dp,-1,sizeof(dp));
    memset(val,-1,sizeof(val));
    memset(ok,0,sizeof(ok));
    for (int i=1;i<=N;++i) G[i].clear();
    for (int i=1;i<=N;++i) {
      scanf("%d",&P[i]);
      if (i != 1) {
        G[P[i]].push_back(i);
        deg[P[i]]++;
      }
    }
    for (int i=1;i<=N;++i) if (deg[i] == 0) S.push(i);
    while (!S.empty()) {
      int x = S.top();
      S.pop();
      for (int i=1;i<=K;++i) cal(x,i);
      --deg[P[x]];
      if (P[x] != 0 && deg[P[x]] == 0) {
   //     printf("add %d!\n",P[x]);
        S.push(P[x]);
      }
    }
    int ans = cal(1,1);
    for (int i=1;i<=K;++i) ans = min(ans,cal(1,i));
    printf("Case #%d: %d\n",TC,ans);
//    break;
  }
}

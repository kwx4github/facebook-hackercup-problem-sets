package hackercup1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;

class Employee {
	int id;
	Employee mgr;
	Vector<Employee> emps = new Vector<Employee>();
	int MAX = 200001;
	
	long bestCost1 = Integer.MAX_VALUE, bestCost2 = Integer.MAX_VALUE;
	int bestVal1, bestVal2;
	
	void setParent(Employee e) {
		mgr = e;
		mgr.emps.addElement(this);
	}
	
	void update() {
		/*
		 *  Determine the optimal total cost of its sub-tree 
		 *  for certain gift values to be given by this employee. (dfs)
		 */
//		System.out.println(id);
		int maxInteresting = 2;
		for (Employee emp: emps) {
			emp.update();
			
			if (emp.bestVal1+2 > maxInteresting) maxInteresting = emp.bestVal1 + 2;
//			if (emp.bestVal2+2 > maxInteresting) maxInteresting = emp.bestVal2 + 2;
		}
		
		for (int val=1; val<=maxInteresting; val++) {
			long totalCost = val;
			for (Employee emp: emps) {
				long crt = emp.getMinCostWithout(val);
				totalCost += crt;
			}
			if (totalCost < bestCost1) {
				bestVal2 = bestVal1; bestCost2 = bestCost1;
				bestVal1 = val; bestCost1 = totalCost; 
			}
			else if (totalCost < bestCost2) {
				bestVal2 = val; bestCost2 = totalCost; 
			}
		}
		if (bestCost1 == Integer.MAX_VALUE || bestCost2 == Integer.MAX_VALUE) 
			throw new AssertionError();
	}
	
	long getMinCostWithout(int val) {
		if (val != bestVal1) {
			return bestCost1;
		}
		else {
			return bestCost2;
		}
	}
}

public class P4 {
	Scanner sc;
	PrintWriter pw;
	String problemName = "P4";
	
	public P4() throws FileNotFoundException {
		sc = new Scanner(new File(problemName + ".in"));
		pw = new PrintWriter(new File(problemName + ".out"));
	}
	
	int[] readInput() {
		int n = sc.nextInt(); sc.nextLine();
		int[] v = new int[n];
		String line = sc.nextLine();
		StringTokenizer st = new StringTokenizer(line, " \t");
		for (int i=0; i<n; i++) v[i] = Integer.parseInt(st.nextToken());
		if (st.hasMoreTokens()) throw new AssertionError();
		return v;
	}
	
	int[] readInputSlow() {
		int n = sc.nextInt();
		int[] v = new int[n];
		for (int i=0; i<n; i++) v[i] = sc.nextInt();
		return v;
	}
	
	public void solveTest(int testIdx) {
		int[] parents = readInput();
		int n = parents.length;
		if (parents[0] != 0) throw new AssertionError();
		
		Employee[] v = new Employee[n]; v[0] = new Employee();

		for (int i=1; i<n; i++) {
			v[i] = new Employee();
			v[i].id = i;
		}

		for (int i=1; i<n; i++) {
			v[i].setParent(v[parents[i] - 1]);
		}
		
		Employee ceo = v[0];
		ceo.update();
		
		pw.println("Case #" + testIdx + ": " + ceo.bestCost1);
	}
	
	public void solve() {
		int T = sc.nextInt();
		for (int testIdx=1; testIdx<=T; testIdx++) {
			solveTest(testIdx);
			System.out.println("Done " + testIdx + " / " + T);
		}
		
		pw.close();
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		P4 p = new P4();
		p.solve();
	}
}

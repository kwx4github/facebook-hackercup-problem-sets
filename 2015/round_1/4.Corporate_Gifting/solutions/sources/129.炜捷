#include<stdio.h>
#include<string.h>
#include<string>
#include<algorithm>
#include<set>
#include<queue>

using namespace std;
#define INF 0x3f3f3f3f

vector<int> edge[200010];

int f[200010][23];
int g[200010][23];
int n;

int inD[200010];
int fa[200010];

vector<int> toposort(){
	vector<int> ret;
	memset(inD,0,sizeof(inD));
	queue<int> q;
	for(int i = 1;i <= n;++i){
		inD[i] = edge[i].size();
		if(inD[i] == 0)
			q.push(i);
	}
	while(!q.empty()){
		int now = q.front();
	//	printf("%d\n",now);
		q.pop();
		ret.push_back(now);
		if(fa[now] == 0)
			continue;
		--inD[fa[now]];
		if(inD[fa[now]] == 0){
			q.push(fa[now]);
		}
	}
	return ret;
}

int main(){
	int T;
	scanf("%d",&T);
	for(int cas = 1;cas <= T;++cas){
		for(int i = 0;i < 200010;++i)
			edge[i].clear();
		scanf("%d",&n);
		for(int i = 1;i <= n;++i){
			scanf("%d",&fa[i]);
			if(fa[i] != 0)
				edge[fa[i]].push_back(i);
		}
		vector<int> seq = toposort();
		int ret = INF;
		for(int i = 0;i < seq.size();++i){
			int now = seq[i];
			//printf("%d %d\n",now,i);
			int min1 = INF,min2 = INF,min1idx = -1,min2idx = -1;			
			for(int j = 1;j <= 22;++j){
				f[now][j] = j;
				for(int k = 0;k < edge[now].size();++k)
					f[now][j] += g[edge[now][k]][j];
				if(f[now][j] < min1){
					min1 = f[now][j];
					min1idx = j;
				}
			}
			for(int j = 1;j <= 22;++j){
				if(j == min1idx)
					continue;
				if(f[now][j] < min2){
					min2 = f[now][j];
				}
			}
			for(int j = 1;j <= 22;++j){
				if(j == min1idx)
					g[now][j] = min2;
				else
					g[now][j] = min1;
			}
		//	printf("loop\n");
		}
		for(int i = 1;i <= 22;++i)
			if(ret > f[1][i])
				ret = f[1][i];
		printf("Case #%d: %d\n",cas,ret);
	}
	return 0;	
}


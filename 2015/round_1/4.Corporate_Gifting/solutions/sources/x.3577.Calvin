#include <iostream>
#include <cstdio>
#include <memory.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>

using namespace std;

const int N = 202015;
int n, a[N], p[N];
vector<int> e[N];
set<int> s;

int dfs(int v) {
	//cout << v << endl;
	bool f = false;
	for (int i = 0; i < e[v].size(); i++) {
		f |= dfs(e[v][i]);
	}
	s.clear();
	for (int i = 0; i < e[v].size(); i++) {
        s.insert(a[e[v][i]]);
	}
	if (s.find(a[v]) != s.end()) {
        f = true;
        //for (set<int>::iterator it = s.begin(); it != s.end(); it++) {
        //    cout <<*it << ' ';
        //}
        //cout << endl;
        for (int i = 1; i <= n; i++) {
            if (s.find(i) == s.end()) {
                a[v] = i;
                break;
            }
        }
	}
	return f;
}

int main()
{
	int T; cin >> T;
	for (int nt = 1; nt <= T; nt++) {
		cin >> n;
		for (int i = 0; i < n; i++) {
			e[i].clear();
		}
		for (int i = 0; i < n; i++) {
			int pi; cin >> pi;
			pi--;
			p[i] = pi;
			if (pi >= 0)
				e[pi].push_back(i);
		}
		for (int i = 0; i < n; i++) {
            a[i] = 1;
		}

		bool f = true;
		while (f){
            f = dfs(0);
		}

		long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += a[i];
            //cout << i << ": " << a[i] << endl;
        }
		cout << "Case #" << nt << ": " << ans << endl;
	}
	return 0;
}

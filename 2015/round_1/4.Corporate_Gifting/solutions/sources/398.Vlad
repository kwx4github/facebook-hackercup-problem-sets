import java.io.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.StringTokenizer;

public class ProblemD {

    public static void main(String[] args) throws Exception {
        Locale.setDefault(Locale.UK);
        new ProblemD();
    }

    private BufferedReader in = null;
    private PrintWriter out = null;
    private StringTokenizer tok = new StringTokenizer("");
    private String fileName = "#Console";

    public ProblemD() throws Exception {
        init();
        solve();
        in.close();
        out.close();
    }

    ArrayList<Integer>[] edges;
    int M = 5;
    int[][] dp;

    private void solve() throws Exception {
        int T = nextInt();
        for (int ii = 1; ii <= T; ii++) {
            out.print("Case #" + ii + ": ");
            int n = nextInt();
            if (n == 1) {
                out.println(1);
                continue;
            } else if (n == 2) {
                out.println(3);
                continue;
            }
            M = Math.min(30, n);
            edges = new ArrayList[n];
            for (int i = 0; i < n; i++) {
                edges[i] = new ArrayList<Integer>();
            }
            for (int i = 0; i < n; i++) {
                int p = nextInt();
                if (p != 0) {
                    edges[p - 1].add(i);
                }
            }
            dp = new int[n][M];
            dfs(0);
            int best = -1;
            for (int i = 0; i < M; i++) {
                if (best == -1 || best > dp[0][i]) {
                    best = dp[0][i];
                }
            }
            out.println(best);
        }
    }

    void dfs(int v) {
        for (int u : edges[v]) {
            dfs(u);
        }
        for (int i = 0; i < M; i++) {
            dp[v][i] = i + 1;
            for (int u : edges[v]) {
                int cur = -1;
                for (int j = 0; j < M; j++) {
                    if (j == i) {
                        continue;
                    }
                    if (cur == -1 || cur > dp[u][j]) {
                        cur = dp[u][j];
                    }
                }
                dp[v][i] += cur;
            }
        }
    }


    private void init() throws FileNotFoundException {
        if (fileName.equals("#Console")) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else if (fileName.equals("#IOtxt")) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new FileReader(fileName + ".in"));
            out = new PrintWriter(fileName + ".out");
        }
    }


    private int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    private long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }


    private String nextToken() throws IOException {
        while (!tok.hasMoreTokens()) {
            String s = in.readLine();
            if (s == null) {
                return null;
            }
            tok = new StringTokenizer(s);
        }
        return tok.nextToken();
    }

}
            
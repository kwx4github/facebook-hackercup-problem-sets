import java.util.*;
import java.io.*;

public class corporategifting {
	private static int[] employee;
	private static int[][] gifts;

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new FileReader("corporate_gifting.txt"));
		String cas = in.readLine();
		int n = Integer.parseInt(cas);
		BufferedWriter out = new BufferedWriter(new FileWriter("corporate_gifting_answer.txt"));

		for (int x = 0; x < n; ++x) {
			int num = Integer.parseInt(in.readLine());
			String[] id = in.readLine().split(" ");
			employee = new int[num];
			for (int i = 0; i < id.length; ++i) employee[i] = Integer.parseInt(id[i]);

			List<List<Integer>> graph = generateGraph(employee);
			List<Integer> toposortList = toposort(graph);

			gifts = new int[num][20];
			for (int i = toposortList.size()-1; i >= 0; --i) {
				List<Integer> children = graph.get(toposortList.get(i));
				for (int j = 0; j < 20; ++j) {
					int total = j;
					for (int c = 0; c < children.size(); ++c) {
						int min = Integer.MAX_VALUE;
						for (int k = 0; k < 20; ++k) {
							if (j == k) continue;
							min = Math.min(gifts[children.get(c)][k], min);
						}
						total += min;
					}
					gifts[toposortList.get(i)][j] = total;
				}	
			}

			int overall = Integer.MAX_VALUE; 
			for (int i = 0; i < gifts[0].length; ++i) overall = Math.min(gifts[0][i], overall);
			overall += num;
			
			// System.out.println("Case #"+(x+1)+": " + overall);
			out.write("Case #"+(x+1)+": " + overall+"\n");
		}

		in.close();
		out.close();
	}

	private static List<List<Integer>> generateGraph (int[] employee) {
		List<List<Integer>> graph = new ArrayList<List<Integer>>(employee.length);
		for (int i = 0; i < employee.length; ++i) graph.add(new ArrayList<Integer>());
		
		for (int i = 0; i < employee.length; ++i) {
			if (i == 0) continue;
			List<Integer> manager = graph.get(employee[i]-1);
			manager.add(i);
		}

		return graph;
	}

	private static List<Integer> toposort (List<List<Integer>> graph) {
		boolean[] visited = new boolean[graph.size()];
		List<Integer> result = new ArrayList<Integer>(graph.size());

		Queue<Integer> queue = new LinkedList<Integer>();
		queue.add(0);

		while (!queue.isEmpty()) {
			int n = queue.poll();
			result.add(n);
			visited[n] = true;
			List<Integer> children = graph.get(n);
			for (int i = 0; i < children.size(); ++i) {
				if (visited[children.get(i)]) continue;
				queue.add(children.get(i));
			}
		}
		
		return result;		
	}

}

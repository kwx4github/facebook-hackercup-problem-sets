#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 200 * 1000 + 13;

int n;
vector<int> g[N];

inline bool read()
{
	if (scanf("%d", &n) != 1) return false;
	forn(i, n) g[i].clear();
	forn(i, n)
	{
		int p;
		assert(scanf("%d", &p) == 1);
		--p;
		if (p >= 0) g[p].pb(i);
	}
	return true;
}

pt d[N][2];

void calc (int v)
{
	int sum = 0;
	map<int, int> add;
	
	forn(i, sz(g[v]))
	{
		int to = g[v][i];
		calc(to);
		sum += d[to][0].ft;
		add[d[to][0].sc] += d[to][1].ft - d[to][0].ft;
	}
	
	forl(i, sz(g[v]) + 2)
	{
		int cur = sum + i;
		if (add.count(i)) cur += add[i];
		if (cur < d[v][0].ft) { d[v][1] = d[v][0]; d[v][0] = mp(cur, i); }
		else if (cur < d[v][1].ft) d[v][1] = mp(cur, i);
	}
}

inline void solve(int test)
{
	printf("Case #%d: ", test);
	
	forn(i, n) forn(j, 2) d[i][j] = mp(INF, INF);
	calc(0);
	
	cout << d[0][0].ft << endl;
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
#ifdef SU2_PROJ
		cerr << "=== test = " << test + 1 << ", time = " << clock() << " ===" << endl;
#endif
		assert(read());
		solve(test + 1);
	}
	
#ifdef SU2_PROJ
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

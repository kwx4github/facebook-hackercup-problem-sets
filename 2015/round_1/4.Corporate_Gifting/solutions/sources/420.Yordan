#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

const int mxc = 6;

int n;
long long dp[200020][mxc];

vector<int> son[200020];

long long getDP(int v, int t)
{
	if (dp[v][t] != -1)
	{
		return dp[v][t];
	}
	
	long long sl = t + 1;
	for (int i = 0; i < (int) son[v].size(); ++i)
	{
		long long b = (1LL << 62);
		for (int j = 0; j < mxc; ++j)
		{
			if (j == t)
				continue;
			b = min(b, getDP(son[v][i], j));
		}
		sl += b;
	}
	return (dp[v][t] = sl);
}

int main()
{
	int t, T;
	scanf("%d", &T);
	for (t = 1; t <= T; ++t)
	{
		scanf("%d", &n);
		for (int i = 0; i <= n + 5; ++i)
		{
			son[i].clear();
		}
		int p;
		for (int i = 0; i < n; i++)
		{
			scanf("%d", &p);
			if (p)
				son[p].push_back(i + 1);
		}
		
		memset(dp, -1, sizeof(dp));
		
		long long bs = (1LL << 62);
		for (int i = 0; i < mxc; ++i)
		{
			bs = min(bs, getDP(1, i));
		}
		printf("Case #%d: %lld\n", t, bs);
	}
	return 0;
}

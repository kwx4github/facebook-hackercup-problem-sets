#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())


const int INF = 1000111000;
const int MAX_MAGIC = 18;
const int MAX_N = 200000;

int vis[MAX_MAGIC + 5][MAX_N + 5];
int memo[MAX_MAGIC + 5][MAX_N + 5];

int tc;
int magic;
vector<int> anak[MAX_N+5];

void bersih() {	REP(i, MAX_N + 5) anak[i].clear(); }

int DP(int bef, int n) {
	if (vis[bef][n] == tc) return memo[bef][n];
	vis[bef][n] = tc;
	int &ret = memo[bef][n];
	ret = INF;
	int cost;
	FOR(i, 1, magic) {
		if (i == bef) continue;
		cost = i;
		REP(j, SZ(anak[n])) cost += DP(i, anak[n][j]);
		ret = min(ret, cost);
	}
	return ret;
}

void solve() {
	bersih();
	int N;
	scanf("%d", &N);
	REP(i, N) {
		int x;
		scanf("%d", &x);
		x--;
		if (x >= 0) anak[x].PB(i);
	}
	
	int zz = 1;
	magic = 1;
	while(zz < N) zz *= 2, magic++;
	printf("Case #%d: %d\n", tc, DP(0, 0));
}

int main() {
	memset(vis, 0, sizeof vis);
	int T;
	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

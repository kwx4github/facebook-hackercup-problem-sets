#include <vector>
#include <iostream>
#include <cstring>

using namespace std;

long long dp[200000][3];
vector<int> child[200000];
int n;

long long getAns(int ind, int bef) {
	long long &ret = dp[ind][bef];
	if(ret != -1) return ret;

	ret = (1ll << 60);
	for(int i = 0; i < 3; i++) {
		if(i == bef) continue;
		long long temp = i + 1;
		for(int ch: child[ind]) temp += getAns(ch, i);
		ret = min(ret, temp);
	}

	return ret;
}

int main(void) {
	ios::sync_with_stdio(false);

	int T;
	cin >> T;
	for(int kase = 1; kase <= T; kase++) {
		cin >> n;
		for(int i = 0; i < n; i++) child[i].clear();
		for(int i = 0; i < n; i++) {
			int p;
			cin >> p;
			p--;
			if(p >= 0) child[p].push_back(i);
		}

//		memset(dp, -1, sizeof(dp));
		for(int ind = n - 1; ind >= 0; ind--) {
			for(int bef = 0; bef < 3; bef++) {
				long long &ret = dp[ind][bef];

				ret = (1ll << 60);
				for(int i = 0; i < 3; i++) {
					if(i == bef) continue;
					long long temp = i + 1;
					for(int ch: child[ind]) temp += getAns(ch, i);
					ret = min(ret, temp);
				}
			}
		}
		cout << "Case #" << kase << ": " << dp[0][2] << "\n";
	}

	return 0;
}

#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <iostream>
#include <utility>
using namespace std;

#define TRACE(x...) x
#define WATCH(x) TRACE(cout << #x << " = " << x << endl)
#define PRINT(x...) TRACE(printf(x))

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()

// If using C++11, change __typeof__ to decltype
#define _for(i, a, b) for (decltype(a) i = (a); i != (b); ++i)
#define foreach(x...) _for(x)
#define forall(i, v) foreach(i, all(v))
// If using C++11, change __typeof__ to decltype
#define FU(i, a, b) for(decltype(a) i = (a); i < (b); ++i)
#define fu(i, n) FU(i, 0, n)

#define mset(c, v) memset(c, v, sizeof(c))
#define mod(a, b) ((((a)%(b))+(b))%(b))
#define pb push_back
#define sz(c) int((c).size())
const int INF = 0x3F3F3F3F; const int NEGINF = 0xC0C0C0C0;
const int NULO = -1; const double EPS = 1e-8;

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;


const ll llINF = 1000000000000000000ll;
const int GIFT_MAX = 25;

int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

void compute(int node, vll& ans, const vvi& tree) {
    vll comp_temp(GIFT_MAX);
    fu(i, GIFT_MAX) {
        comp_temp[i] = i+1;
        for (int c : tree[node]) {
            if (ans[GIFT_MAX*c + i] == llINF) {
                comp_temp[i] = llINF;
                break;
            }
            comp_temp[i] += ans[GIFT_MAX*c + i];
        }
    }
    int m = min_element(all(comp_temp)) - comp_temp.begin();
    fu(i, GIFT_MAX) ans[GIFT_MAX*node+i] = comp_temp[m];

    ans[GIFT_MAX*node + m] = llINF;
    fu(i, GIFT_MAX) if (i != m) {
        ans[GIFT_MAX*node+m] = min(ans[GIFT_MAX*node+m], comp_temp[i]);
    }
}

vi top_sort(const vvi& tree) {
    vi ans;
    queue<int> Q;
    Q.push(0);
    while (!Q.empty()) {
        int v = Q.front(); Q.pop();
        ans.push_back(v);
        for (int c : tree[v]) Q.push(c);
    }
    return ans;
}

int main() {
    int _42;
    scanf("%d", &_42);
    fu(_41, _42) {
        printf("Case #%d:", _41+1);
        int N;
        scanf("%d", &N);
        vvi tree(N);
        fu(i, N) {
            int temp;
            scanf("%d", &temp); temp--;
            if (temp < 0) continue;
            tree[temp].push_back(i);
        }
        vll ans(GIFT_MAX*N);
        vi ord = top_sort(tree);
        if (sz(ord) != N) printf("WTF?\n");
        for (int i = N-1; i >= 0; --i) compute(ord[i], ans, tree);
        printf(" %I64d\n", *min_element(ans.begin(), ans.begin()+GIFT_MAX));
    }
    return 0;
}

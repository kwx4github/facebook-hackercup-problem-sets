import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;


public class CorporateGifting {

	public static void main(String[] args) throws NumberFormatException, IOException{
		BufferedReader br = new BufferedReader(new FileReader("corporate_gifting.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("corporate_out.txt")));
		int T = Integer.parseInt(br.readLine());
		for(int testCase=1; testCase<=T; testCase++){
			int N = Integer.parseInt(br.readLine());
			String[] line = br.readLine().split(" ");
			Node root = new Node();
			HashMap<Integer, Node> nodes = new HashMap<Integer, Node>();
			nodes.put(1, root);
			for(int i=1; i<line.length; i++){
				Node curr = new Node();
				nodes.put(i+1, curr);
			}
			for(int i=1; i<line.length; i++){
				Node n = nodes.get(Integer.parseInt(line[i]));
				n.children.add(nodes.get(i+1));
			}
			bw.write("Case #"+testCase+": "+postorder(root, N)+"\n");
		}
		br.close();
		bw.flush();
		bw.close();
	}
	
	public static long postorder(Node curr, int N){
		if(curr.children.isEmpty()){
			curr.color = 1;
			return 1;
		}
		else{
			long sum = 0;
			for(Node n: curr.children) sum += postorder(n, N);
			ArrayList<Integer> coloursOfChildren = new ArrayList<Integer>();
			for(Node n: curr.children) coloursOfChildren.add(n.color);
			Collections.sort(coloursOfChildren);
			for(int i=1; i<=N; i++){
				if(Collections.binarySearch(coloursOfChildren, i)<0){
					curr.color = i;
					sum += i;
					break;
				}
			}
			return sum;
		}
	}
	
	static class Node{
		int color;
		ArrayList<Node> children;
		
		public Node(){
			children = new ArrayList<Node>();
		}
		
	}
	
}

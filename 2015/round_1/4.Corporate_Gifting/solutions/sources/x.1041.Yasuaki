#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;

const int MAX_N = 210000;

int n;
ll dp[MAX_N][3];
vector<int> g[MAX_N];

ll dfs(int p, int v, ll c) {
  if (dp[v][c] != -1) return dp[v][c];
  ll r = c + 1;
  for (int u : g[v]) {
    if (u != p) {
      ll t = 1LL << 60;
      for (int i = 0; i < 3; i++) {
        if (i != c) {
          t = min(t, dfs(v, u, i));
        }
      }
      r += t;
    }
  }
  return dp[v][c] = r;  
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    cin >> n;
    for (int i = 0; i < n; i++) {
      g[i].clear();
    }
    for (int i = 0; i < n; i++) {
      int v;
      cin >> v;
      v--;
      if (v == -1) continue;
      g[v].push_back(i);
      g[i].push_back(v);
    }
    memset(dp, -1, sizeof(dp));
    printf("Case #%d: %lld\n", t, min(dfs(-1, 0, 0),
                                      min(dfs(-1, 0, 1),
                                          dfs(-1, 0, 2))));
  }
}

#include <stdio.h>
#include <assert.h>

int deg[200100];
int p[200100];
int pool[200100], pend;
int *ch[200100];
long long tpool[600100];
long long *t[200100];
int stk[200100], stkb;

static const long long BIG = 1000000000000LL;

void _(int r) {
  for (int c = 0; c < deg[r] + 2; ++c) t[r][c] = c + 1;

  long long tot_best = 0;
  for (int i = 0; i < deg[r]; ++i) {
    int chi = ch[r][i];

    long long best = -1, second = -1, bestc = -1;
    for (int cc = 0; cc < deg[chi] + 2; ++cc) {
      if (best < 0 || t[chi][cc] < best) { second = best; best = t[chi][bestc = cc]; }
      else if (second < 0 || t[chi][cc] < second) { second = t[chi][cc]; }
    }
    assert(best > 0);
    assert(bestc >= 0);
    assert(second > 0);

    tot_best += best;
    t[r][bestc] += second - best;
  }

  for (int c = 0; c < deg[r] + 2; ++c) t[r][c] += tot_best;
}

int main() {
  int N; scanf(" %d", &N);
  for (int prob = 1; prob <= N; ++prob) {
    int n; scanf(" %d", &n);
    for (int i = 0; i <= n; ++i) deg[i] = 0;
    for (int i = 1; i <= n; ++i) { scanf(" %d", p + i); ++deg[p[i]]; }
    assert(deg[0] == 1);
    assert(p[1] == 0);
    pend = 0;
    for (int i = 1; i <= n; ++i) { ch[i] = pool + pend; pend += deg[i]; deg[i] = 0; }
    assert(pend == n - 1);
    for (int i = 2; i <= n; ++i) { ch[p[i]][deg[p[i]]++] = i; }
    pend = 0;
    for (int i = 1; i <= n; ++i) { t[i] = tpool + pend; pend += deg[i] + 2; }
    assert(pend == 2 * n + n - 1);

    stkb = 0;
    stk[stkb++] = 1;
    for (int i = 0; i < stkb; ++i) {
      int u = stk[i];
      for (int j = 0; j < deg[u]; ++j) stk[stkb++] = ch[u][j];
    }
    while (stkb--) _(stk[stkb]);

    long long ans = t[1][0];
    for (int c = 1; c < deg[1] + 2; ++c) if (t[1][c] < ans) ans = t[1][c];
    printf("Case #%d: %Ld\n", prob, ans);
  }
  return 0;
}

#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>

using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;

#define TH 15
VVI adj;
int TAKEN[200010][TH];
int DP[200010][TH];
int dp(int u,int c){
	int m = 1000000000;
	if(DP[u][c] != -1)return DP[u][c];
	for(int cc = 1; cc < TH; ++cc){
		if(cc == c)continue;
		int s = cc;
		for(int i = 0; i < adj[u].size(); ++i){
			int v = adj[u][i];
			s += dp(v,cc);
			if(s > m)break;
		}
		if(s < m)TAKEN[u][c] = cc;
		m = min(m , s);
	}
	return DP[u][c] = m;
}

int maT;
void backtrack(int u,int c){
//	cout << u+1 << ": " << TAKEN[u][c] << endl;
	maT = max(maT , TAKEN[u][c]);
	for(int i = 0; i < adj[u].size(); ++i){
		int v = adj[u][i];
		backtrack(v , TAKEN[u][c]);
	}
	
}

int main(){
	freopen("corporate_gifting.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int TC; cin >> TC;
	for(int tc = 1 ; tc<=TC; ++tc){
		int N;
		cin >> N;
		adj = VVI(N);
		for(int i = 0; i < N; ++i){
			int n; 
			cin >>n;
			if(i == 0)continue;
//			n = rand() % i + 1;
	//		cout << i << ":" << n-1 << " ";
			adj[n-1].push_back(i);
		}
		memset(DP,-1,sizeof(DP));
		for(int i = N-1; i >= 0; --i)dp(i,0);
		cout << "Case #" << tc << ": " << dp(0,0) << endl;
//		maT = 0; backtrack(0,0); cout << maT << endl;
	}
}




/*

5
3
0 1 1
8
0 1 1 2 2 3 3 3
5
0 1 2 3 4
9
0 1 2 3 4 5 5 5 5
8
0 1 1 1 1 2 2 2


 */



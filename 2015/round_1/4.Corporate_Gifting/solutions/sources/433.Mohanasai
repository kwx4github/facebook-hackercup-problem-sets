#include<iostream>
#include<cstdio>
#include<vector>
#include<utility>
#include<algorithm>
using namespace std;

class Sol{
public:
	int c;
	int m1;
	int m2;
	Sol(int c, int m1, int m2){
		this->c = c;
		this->m1 = m1;
		this->m2 = m2;
	}
};


class Emp{
	public:
	int id;
	int par;
	int degree;
	int flag;
	int optval;
	vector<Emp*> child;
	Sol* solution;

	Emp(int id){
                solution = NULL;
		this->id = id;
		this->par = 0;
		this->degree = 0;
		this->flag = 0;
		this->optval = -1;
	}
	Sol* subTree(){
		if(solution != NULL) return solution;
		if(child.size() == 0) return new Sol(1, 1, 2);
		int sz = this->degree+1;
		int potential[sz+1];
		potential[0] = INT_MAX;
		for (int i = 1; i <= sz; ++i){
			potential[i] = i;
		}
		int com = 0;
		for (int ch = 0; ch < child.size(); ++ch){
			Sol* chsol = child[ch]->subTree();
			com += chsol->m1;
			if(chsol->c <= sz){
				potential[chsol->c] += chsol->m2 - chsol->m1;
			}
		}
		int minind = 0;
		for(int i=1; i<=sz; i++){
			if(potential[i] < potential[minind]) minind = i;
		}
		int minind2 = 0;
		for(int i=1; i<=sz; i++){
			if(i == minind) continue;
			if(potential[i] < potential[minind2]) minind2 = i;
		}
		solution = new Sol(minind, com + potential[minind], com + potential[minind2]);
		return solution;
	}
};

int N;
Emp* emp[200001];

int main(){
	int T;
	cin>>T;
	for(int t=1; t<=T; t++){
		cin>>N;
		for(int n=0; n<=N; n++) emp[n] = new Emp(n);
		for(int n=1; n<=N; n++){
			int par;
			cin>>par;
			emp[n]->par = par;
			emp[n]->degree++;
			emp[par]->degree++;
			emp[par]->child.push_back(emp[n]);
		}
		for(int n=N; n>=1; n--) emp[n]->subTree();
		printf("Case #%d: %d\n", t, emp[1]->subTree()->m1);	
		for(int n=0; n<=N; n++) delete emp[n];
	}
	return 0;
}


#include<iostream>
# include <cmath>
# include <algorithm>
# include <cstdio>
# include <cstring>
# include <string>
# include <cstdlib>
# include <vector>
# include <bitset>
# include <map>
# include <queue>
# include <stack>
# include <set>
# include <list>
# include <deque>
# include <functional>
using namespace std;

//#define DEBUG


#define DEB(x) cout<<#x<<"="<<x<<" "
#define DEBN(x) cout<<#x<<"="<<x<<"\n"


#ifdef DEBUG
#define D(x) DEB(x)
#define DN(x) DEBN(x)
#define DA(a,n) cout<<#a<<"=["; printarray(a,n); cout<<"]\n"
#define DAR(a,n,s) cout<<#a<<"["<<s<<"-"<<n-1<<"]=["; printarray(a,n,s); cout<<"]\n"
#else
#define D(x) 
#define DN(x)
#define DA(a,n) 
#define DAR(a,n,s)
#endif

#ifdef DEBUG
#define DPR(fmt, ...) \
	do { printf(fmt, ## __VA_ARGS__); } while (0)
#else
#define DPR(fmt, ...) \
	do { } while (0)
#endif

#define PR(fmt, ...) \
	do { printf(fmt, ## __VA_ARGS__); } while (0)

#define SC(fmt, ...) \
	do { scanf(fmt, ## __VA_ARGS__); } while (0)

# define mod 1000000007
# define PI 3.14159265f

#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a<b?a:b)
#define FI(n) for(i=0;i<n;i++)
#define FI1(n) for(i=1;i<n;i++)
#define FJ(n) for(j=0;j<n;j++)
#define FJ1(n) for(j=1;j<n;j++)
#define FJI for(j=0;j<i;j++)
#define FJI1 for(j=1;j<i;j++)
#define FJIE for(j=0;j<=i;j++)
#define FJIE1 for(j=1;j<=i;j++)
#define For(i,a,b) for(i=a;i<b;i++)

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

//Output macros
#define pr(n)                      printf("%d ",n)
#define prn(n)                      printf("%d\n",n)
#define prc(n)                       printf("%c",n)
#define prcn(n)                       printf("%c\n",n)
#define prl(n)                       printf("%lld ",n)
#define prln(n)                       printf("%lld\n",n)
#define prf(n)                       printf("%lf ",n)
#define prfn(n)                       printf("%lf\n",n)
#define prs(n)                       printf("%s ",n)
#define prsn(n)                       printf("%s\n",n)


// Useful constants
#define INF                         (int)1e9
#define EPS		(int)1e-9

//STL containers
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define sz(a)                       ((int)(a.size()))
#define vi vector<int>
#define vl vector<long long>
#define svi(vec,n) FI(n) s(vec[i])
#define svl(vec,n) FI(n) sl(vec[i])
#define it ::iterator

//fill char arrays
#define fill(a,v)                    memset(a, v, sizeof (a))

#define checkbit(n,b)                ( (n >> b) & 1)
#define DREP(a)                      sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())

#define sor(a)	sort(all(a))
#define rsor(a) sort(all(a)); reverse(all(a));
#define exchange(t,a,b) typeof(a) t =a; a=b; b=t
//STL output ********************************
template <typename T1, typename T2>
inline std::ostream& operator << (std::ostream& os, const std::pair<T1, T2>& p)
{
	return os << "(" << p.first << ", " << p.second << ")";
}

template<typename T>
inline std::ostream &operator << (std::ostream & os,const std::vector<T>& v)
{
	bool first = true;
	os << "[";
	for(unsigned int i = 0; i < v.size(); i++)
	{
		if(!first)
			os << ", ";
		os << v[i];
		first = false;
	}
	return os << "]";
}


	
template<typename T1, typename T2>
inline std::ostream &operator << (std::ostream & os,const std::map<T1, T2>& v)
{
	bool first = true;
	os << "[";
	for (typename std::map<T1, T2>::const_iterator ii = v.begin(); ii != v.end(); ++ii)
	{
		if(!first)
			os << ", ";
		os << *ii ;
		first = false;
	}
	return os << "]";
}
//*****************************************
//printing array
template<typename T,typename T2>
void printarray(T  a[],T2 sz,T2 beg=0)
{
	for(T2 i=beg;i<sz;i++) cout<<a[i]<<" ";
}
//*********************************8
//The main code starts here


//**************************Graph part starts here *******************************************8888

//Structure**************************************
#define MAXV 200005
#define MAXDEGREE 200005
typedef struct {
	vector<int> edges[MAXV+1];
	int degree[MAXV+1];
	int nvertices;
	int nedges;
} graph;
bool isleaf[MAXV+1];
long long best[MAXV+1],sec_best[MAXV+1];
long long init_total[MAXV+1];
map<int, long long> mymap[MAXV+1];
//Initialize graph**************************************************************
//called from readgraph and setgraph
void initialize_graph(graph *g)
{
	int i;
	g -> nvertices = 0;
	g -> nedges = 0;
	for (i=1; i<=MAXV; i++)
	{
		 g->degree[i] = 0;
		g->edges[i].clear();
	}
	
}

//*********Inserts an edge
void insert_edge(graph *g, int x, int y, bool directed)
{
	if (g->degree[x] >= MAXDEGREE)
		printf("Warning: insertion(%d,%d) exceeds max degree\n",x,y);
	g->edges[x].push_back(y);
	g->degree[x] ++; //this is the outdegree in directed case
	if (directed == false) 	insert_edge(g,y,x,true);
	else g->nedges ++;
}

//*********************** reads a graph and calls isert edge**********
void read_graph(graph *g, bool directed)
{
	int i;
	int m;
	int x, y;
	initialize_graph(g);
	scanf("%d %d",&(g->nvertices),&m);
	for (i=1; i<=m; i++) {
		scanf("%d %d",&x,&y);
		insert_edge(g,x,y,directed);
	}
	g->nedges=m;
}

//*********************** sets a graph and from n and edge vector**********
void set_graph(graph *g, int n,vector<pair<int,int >  > &edges,bool directed)
{
	int i;
	int m;
	int x, y;
	initialize_graph(g);
	g->nvertices=n;
	m=sz(edges);
	for (i=0; i<m; i++) {
		x=edges[i].first ;
		y=edges[i].second ;
		insert_edge(g,x,y,directed);
	}
	g->nedges=m;
}

//*******************************************************************
//Print a graph
inline std::ostream &operator << (std::ostream & os,const graph &g)
{
	int i,j;
	for (i=1; i<=g.nvertices; i++)
	{
		os<<i<<" : ";
		for (j=0; j<g.degree[i]; j++)
			os<<g.edges[i][j]<<" ";
		os<<",";
	}
	return os<<"\n";
}
graph g;

//Include graph initials

/*Graph search*/
bool processed[MAXV+1];
bool discovered[MAXV+1];
int parent[MAXV+1];

void initialize_search(graph *g)
{
	int i;
	/* counter */
	for (i=1; i<=g->nvertices; i++) {
		processed[i] = discovered[i] =false;
		parent[i] = -1;
		init_total[i]=0;
		isleaf[i]=1;	
		mymap[i].clear();
	}
}

void process_vertex_on_disc(int v)
{

	//printf("processed vertex %d\n",v);
}
void process_vertex_on_ret(int v)
{
	DPR("\nprocess vertex of "); 
	DN(v); 
	
		map<int, long long> &mp=mymap[v];
		int bestroot;
	if (isleaf[v]) 
	{
		best[v]=1;
		sec_best[v]=2;
		bestroot=1;
	}
	else if(sz(mp )==0		)
	{
		DPR("szmp=0\n"); 
		
		best[v]=init_total[v]+1;
		sec_best[v]=init_total[v]+2;
		bestroot=1;
	}
	else 
	{
		map<int, long long> ::iterator mit=mp.begin();
		if (mit->first!=1) 
		{
			bestroot=1;
			/* code */
		}
		else 
		{
			while (++mit!=mp.end()) 
			{
				map<int, long long> ::iterator previt=--mit;
				mit++;
				int preval=previt->first;
				int curval=mit->first;
				int dif=curval-preval;
				if (dif>1) 
				{
					
				bestroot=curval-1;
				break;
				}

			}
			if (mit==mp.end()) 
			{
				bestroot=sz(mp )+1;
			}
		}
		D(init_total[v]); 
		D(bestroot); 
			
		best[v]=init_total[v]+bestroot;
		D(best[v]); 
	D(mp); 
		
		mit=mp.begin();
		int key=mit->first;
		long long val=mit->second;
		D(key); 
		D(val); 
		
		sec_best[v]=init_total[v]+key+val;
		D(sec_best[v]); 
		
		if (best[v]>sec_best[v]) 
		{
			exchange(t,best[v],sec_best[v]);
			bestroot=key;
		}
		D(best[v]); 
		
		mit++;
		while (mit!=mp.end()) 
		{
			
			int key=mit->first;
			long long val=mit->second;
			long long newval=init_total[v]+key+val;
			if (newval<best[v]) 
			{
				sec_best[v]=best[v];
				best[v]=newval;
				bestroot=key;
			}
			else if(newval<sec_best[v]	) 
			{
				sec_best[v]=newval;
			}
			mit++;
			/* code */
		}

	}

	//pass info to leaf
	//
	long long diff=sec_best[v]-best[v];
	D(diff); 
	
	int p=parent[v];
	if (p==-1) 
	{
		return;
	}
	init_total[p]+=best[v];
	if (diff==0) 
	{
		return;
	}
	map<int, long long> &pmap=mymap[p];
	map<int, long long> ::iterator fit=pmap.find(bestroot);
	D(bestroot); 
	D(pmap); 
		
	if (fit==pmap.end()) 
	{
		pmap[bestroot]=diff;		
	}
	else 
	{
		pmap[bestroot]+=diff;
	}
	D(pmap); 
	

	//printf("processed vertex %d\n",v);
}
void process_edge(int x, int y)
{
	//printf("processed edge (%d,%d)\n",x,y);
}

bool valid_edge(int y)
{
	return 1;
}


/*     DFS      */
bool finished=false;
//Call initialize_search before calling dfs
void dfs( int v=1)//only in the connected component of v
{
	int i;
	int y;/* successor vertex */
	if (finished) return;
	discovered[v] = true;
	process_vertex_on_disc(v);
	for (i=0; i<g.degree[v]; i++) {
		y = g.edges[v][i];
		if (valid_edge(g.edges[v][i]) == true) {
			if (discovered[y] == false) {
				parent[y] = v;
				isleaf[v]=0;
				dfs(y);
			} else
				if (processed[y] == false)
					process_edge(v,y);//processing back edges
		}
		if (finished) return;
	}
	process_vertex_on_ret(v);
	processed[v] = true;
	D(v); 
	D(best[v]); 
	
	
}
/* * **************************************************************************** */


/***********************************************************************/
int main()
{
	int cas,t;
	int i,j;
	int n,m;
	s(t);

	For(cas,1,t+1)
	{
	 
		scanf("%d",&n);
		vector<pair<int,int > > edges;
		scanf("%d");
		for (i = 2; i <= n; i++) 
		{
			int p;
			scanf("%d",&p);
			edges.push_back(make_pair(p,i));	
			
		}
		set_graph(&g,n,edges,0);
		D(g); 
		
	initialize_search(&g)		;
		dfs();	
			
		printf("Case #%d: %ld\n",cas,best[1]);
	}
	return 0;
}	


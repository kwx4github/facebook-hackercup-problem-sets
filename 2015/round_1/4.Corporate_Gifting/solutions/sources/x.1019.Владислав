import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws FileNotFoundException {
        PrintWriter writer = new PrintWriter("out.txt");
        Scanner in = new Scanner(new FileInputStream("in.txt"));
        int t = Integer.parseInt(in.nextLine());
        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.nextLine());
            StringTokenizer tokenizer = new StringTokenizer(in.nextLine());
            ArrayList<ArrayList<Integer>> adjacencyList = new ArrayList<>();
            for (int j = 0; j < n; j++)
                adjacencyList.add(new ArrayList<>());
            for (int j = 0; j < n; j++) {
                int p = Integer.parseInt(tokenizer.nextToken()) - 1;
                if (p >= 0)
                    adjacencyList.get(p).add(j);
            }

            writer.println("Case #" + (i + 1) + ": " + solve(adjacencyList));
        }
        in.close();
        writer.close();
    }

    private static long solve(ArrayList<ArrayList<Integer>> adjacencyList) {
        long[][] F = new long[adjacencyList.size()][3];
        dfs(0, adjacencyList, F);

        return Math.min(Math.min(F[0][0], F[0][1]), F[0][2]);
    }

    private static void dfs(int v, ArrayList<ArrayList<Integer>> adjacencyList, long[][] F) {
        if (adjacencyList.get(v).size() == 0) {
            F[v][0] = 2;
            F[v][1] = 1;
            F[v][2] = 1;
            return ;
        }

        for (int neighbour : adjacencyList.get(v))
            dfs(neighbour, adjacencyList, F);

        long[] g = new long[3];
        for (int i = 0; i < 3; i++) {
            g[i] = 0;
            for (int neighbour : adjacencyList.get(v))
                g[i] += F[neighbour][i];
        }

        for (int i = 0; i < 3; i++) {
            F[v][i] = Long.MAX_VALUE;
            for (int j = 0; j < 3; j++)
                if (j != i)
                    F[v][i] = Math.min(F[v][i], g[j] + j + 1);
        }
    }
}
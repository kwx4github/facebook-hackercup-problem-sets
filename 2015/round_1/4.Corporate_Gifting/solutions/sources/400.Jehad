#include <bits/stdc++.h>

#define SZ 200005
#define INF (1<<29)
using namespace std;


int dp[SZ][18];

vector<int> edge[SZ+7];
int Indeg[SZ+7];
int P[SZ+7];
int n;
int Order[SZ+7],c1;
int tg = 16;

void Init()
{
    queue<int> Q;
    for(int i=1;i<=n;i++)
    {
        if(Indeg[i] == 0 ) Q.push(i);
    }

    while(!Q.empty())
    {
        int u = Q.front(); Q.pop();
        Order[c1++] = u;
        for(int i=0;i<edge[u].size();i++)
        {
            int v = edge[u][i];
            Indeg[v]--;
            if(Indeg[v]==0) Q.push(v);
        }
    }
}

int arr[20];

int main()
{
    freopen("Din.txt","rt",stdin);
    freopen("Dout.txt","wt",stdout);
    int tst,cas;
    scanf("%d",&tst);
    for(cas=1;cas<=tst;cas++)
    {
        scanf("%d",&n);
        for(int i=0;i<=n;i++) edge[i].clear() , Indeg[i] = 0;
        for(int i=1;i<=n;i++)
        {
            int u;
            scanf("%d",&u);
            if(u>0) Indeg[i]++;
            if(u>0) edge[u].push_back(i);
        }
        c1 = 0;
        Init();

        for(int i=c1-1;i>=0;i--)
        {

            int u = Order[i];
            ///printf("%d ",u);
            if(edge[u].size() == 0)
            {
                for(int j=1;j<=tg;j++)
                {
                    if(j==1) dp[u][j] = 2;
                    else dp[u][j] = 1;
                }
            }
            else
            {
                for(int j=1;j<=tg;j++)
                {
                    arr[j] = j;
                    for(int k=0;k<edge[u].size();k++)
                    {
                        int v = edge[u][k];
                        arr[j] += dp[v][j];
                    }
                }
                int mn = INF;
                for(int j=1;j<=tg;j++)
                {
                    dp[u][j] = mn;
                    mn = min(mn,arr[j]);
                }
                mn = INF;
                for(int j=tg;j>=1;j--)
                {
                    dp[u][j] = min(mn,dp[u][j]);
                    mn = min(mn,arr[j]);
                }
                ///printf("%d: ",u);
                ///for(int j=1;j<=3;j++) printf("%d ",dp[u][j]);
                ///printf("\n");

            }
        }
        ///printf("\n");

        int ans = INF;
        for(int i=1;i<=16;i++) ans = min(ans,dp[1][i]);
        printf("Case #%d: %d\n",cas,ans);

    }
    return 0;
}

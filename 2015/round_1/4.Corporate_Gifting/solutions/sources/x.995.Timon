#include<iostream>
#include<vector>
#include<algorithm>
#include<stack>
#include<bitset>

using namespace std;

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

int main(){

	int T;
	scanf_s("%i", &T);

	for (int t = 1; t <= T; t++){

		int N;
		scanf_s("%i", &N);

		vvi children(N);

		for (int i = 0; i < N; i++){
			int eid;
			scanf_s("%i", &eid);
			eid--;
			if(eid >= 0)
				children[eid].push_back(i);
		}

		vi K1(N), C(N), K2(N);

		vector<int> std(N); int ix = 0;
		stack<int> st;
		st.push(0);
		while (!st.empty()){
			int t = st.top(); st.pop();
			std[ix] = t; ix++;
			for (int i = 0; i < children[t].size(); i++){
				st.push(children[t][i]);
			}
		}
		
		for (int i = N - 1; i >= 0; i--){
			int id = std[i];

			if (children[id].size() == 0){
				K1[id] = 1;
				C[id] = 1;
				K2[id] = 2;
			}
			else{
				int d = children[id].size();
				int K = 0;
				for (int j = 0; j < d; j++){
					K += K1[children[id][j]];
				}
				vector<int> delta(d + 1);
				for (int j = 0; j < d + 1; j++){
					delta[j] = K;
				}
				for (int j = 0; j < d; j++){
					if (C[children[id][j]] - 1 < d + 1)
						delta[C[children[id][j]] - 1] += K2[children[id][j]] - K1[children[id][j]];
				}

				int k1 = 1 + delta[0], c = 1, k2 = 2 + delta[1];
				if (k1 > k2){
					swap(k1, k2);
					c++;
				}

				for (int _c = 2; _c < d + 1; _c++){
					int __c = _c + 1 + delta[_c];

					if (__c < k1){
						k2 = k1;
						k1 = __c;
						c = __c;
					}
					else if (__c < k2)
						k2 = __c;
				}

				K1[id] = k1;
				C[id] = c;
				K2[id] = k2;
			}
		}

		cout << "Case #" << t << ": " << K1[0] << endl;
	}

	return 0;
}
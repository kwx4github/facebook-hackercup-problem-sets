#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define MAX numeric_limits<int>::max()
#define MIN numeric_limits<int>::min()
#define MOD 1000000007
 struct cmp
 {
   bool operator()(const int& l, const int& r)
   {
       return l > r;
   }
 };
vector<int>arr[200002];
bool chk[200002];
priority_queue<int,vector<int>,cmp >pq[200002];
int parent[200002];
stack<int>sk;
ll DFS(int p)
{
    ll ans=0;
    chk[p]=1;
    int i;
    sk.push(1);
    p=1;
    int flag,flag2=0;
    int v1;
    for(;!sk.empty();)
    {
        p=sk.top();
        //cout<<p<<"\n";
        flag=0;
        for(i=0;i<arr[p].size();i++)
        {
            if(chk[arr[p][i]]==0)
            {
                sk.push(arr[p][i]);
                chk[arr[p][i]]=1;
                flag=1;
            }
        }
        if(arr[p].size()==1 && p!=1)
        {
            ans++;
            pq[parent[p]].push(1);
            flag2=1;
          //  cout<<"dsjf "<<p<<" "<<1<<"\n";
            sk.pop();
        }
        else if(arr[p].size()==1 && p==1 && flag2==1)
        {
            v1=1;
            if(v1==pq[p].top())
            {
                v1++;
            }
            ans+=(v1+0LL);
            //cout<<"dsjf "<<p<<" "<<v1<<"\n";
            sk.pop();
        }
        else if(arr[p].size()!=1 && flag==0)
        {
            v1=1;
            for(;;)
            {
                if(pq[p].size()==0)
                {
                    ans+=(v1+0LL);
                    pq[parent[p]].push(v1);
                    break;
                }
                else if(pq[p].top()>v1)
                {
                    ans+=(v1+0LL);
                    pq[parent[p]].push(v1);
                    break;
                }
                else if(pq[p].top()==v1)
                {
                    v1++;
                    pq[p].pop();
                }
                else if(pq[p].top()<v1)
                {
                    pq[p].pop();

                }
            }
            //cout<<"dsjf "<<p<<" "<<v1<<"\n";
            sk.pop();
        }
    }
    return ans;
}
int main()
{
    freopen("corporate_gifting.txt","r",stdin);
  freopen("final_op.txt","w",stdout);
    int d,tc;
    scanf("%d",&tc);
    int n;
    ll ans;
    int i,val;
    for(d=1;d<=tc;d++)
    {
        scanf("%d",&n);
        scanf("%d",&val);
        for(i=2;i<=n;i++)
        {
            scanf("%d",&val);
            arr[i].push_back(val);
            arr[val].push_back(i);
            parent[i]=val;
        }
        ans=DFS(1);
        printf("Case #%d: %d\n",d,ans);
        for(i=0;i<=n;i++)
        {
            arr[i].clear();
            chk[i]=0;
            pq[i]=priority_queue<int,vector<int>,cmp >();
            parent[i]=0;
        }
    }
    return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

static const size_t INF = size_t(-1);
typedef uint32_t LLU;
static const LLU INF_COST = LLU(-1);

LLU minExp(
    size_t root,
    const std::vector<std::vector<size_t>>& g, 
    size_t forbiddenCost,
    std::vector<std::vector<LLU>>& costs);

LLU minExp(const std::vector<size_t>& managers, size_t C)
{
    const size_t N = managers.size();
    std::vector<std::vector<size_t>> g(N, {});
    for (size_t i = 0; i < N; ++i) {
        size_t m = managers[i];
        if (m != INF) {
            g[m].push_back(i);
        }
    }
    std::vector<std::vector<LLU>> costs(N, std::vector<LLU>(C + 1, INF_COST));
    return minExp(0, g, 0, costs);
}

LLU minExp(
    size_t root,
    const std::vector<std::vector<size_t>>& g, 
    size_t forbiddenCost,
    std::vector<std::vector<LLU>>& costs)
{
    if (costs[root][forbiddenCost] != INF_COST) {
        return costs[root][forbiddenCost];
    }
    
    size_t C = costs.front().size() - 1;   
 
    const auto& children = g[root];
    if (children.empty()) {
        if (forbiddenCost == 1) {
            costs[root][forbiddenCost] = 2;
        } else {
            costs[root][forbiddenCost] = 1; 
        } 
    } else {
        LLU res = INF_COST;
        for (size_t cost = 1; cost <= C; ++cost) {
            if (cost != forbiddenCost) {
                LLU sum = cost;
                for (size_t child: children) {
                    sum += minExp(child, g, cost, costs);
                }
                res = std::min(sum, res);       
            }
        }
        assert(res != INF_COST);
        costs[root][forbiddenCost] = res;
    }
    return costs[root][forbiddenCost];
}

int main()
{
    size_t T;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        size_t N;
        std::cin >> N;
        std::vector<size_t> managers;
        managers.resize(N, 0);
        for (size_t i = 0; i < N; ++i) {
            size_t m;
            std::cin >> m;
            if (m == 0) {
                m = INF;
            } else {
                --m;
            }
            managers[i] = m;
        }
        std::cout << "Case #" << (t + 1) << ": " << minExp(managers, 80) << std::endl;
    }
    return 0;
}




import java.io.*;
import java.util.*;

/**
 * Created by shamir0xe on 1/5/2015 AD.
 */

public class Solution {

    static ArrayList <Integer> adj[];
    static int n;
    static boolean[] fuckedUp;

    public static void main(String[] args) {
        MyInput in;
        try {
            in = new MyInput(new FileInputStream(new File("input.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }
        PrintWriter out;
        try {
            out = new PrintWriter(new FileOutputStream(new File("output.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }

//        MyInput in = new MyInput(System.in);
//        PrintWriter out = new PrintWriter(System.out);


        int test = in.nextInt();
        for (int testCase = 0; testCase < test; testCase++) {
            n = in.nextInt();
            adj = new ArrayList[n];
            for (int i = 0; i < n; i++) {
                adj[i] = new ArrayList<Integer>();
            }
            fuckedUp = new boolean[n];

            for (int i = 0; i < n; i++) {
                int papa = in.nextInt() - 1;
                if (papa != -1) {
                    adj[papa].add(i);
                }
            }
            long ret = 0;
            for (int i = 0; i < n; i++) {
                if (!fuckedUp[i]) {
                    ret += getAns(i)[0];
                }
            }
            out.println("Case #" + (testCase + 1) + ": " + ret);
            out.flush();
        }

        out.flush();
    }

    private static long[] getAns(int u) { // 0: min cost // 1: exception number // 2: addition of next minimum
        fuckedUp[u] = true;
        long ans = 0;
        TreeMap <Integer, Long > excess = new TreeMap<Integer, Long>();
        TreeSet <Integer> allExceptions = new TreeSet<Integer>();
        for (int child: adj[u]) {

            long [] ret = getAns(child);
            ans += ret[0];
            long put = 0;
            {
                Long bef = excess.get((int) ret[1]);
                if (bef != null) {
                    put = bef;
                }
            }
            excess.put((int)ret[1], put + ret[2]);
            allExceptions.add((int)ret[1]);
        }


        long mini = Long.MAX_VALUE;
        long mini2 = mini;
        int idx = -1;
        int cur = 1;
        {
            while (allExceptions.contains(cur)) {
                cur++;
            }
            if (cur <= n) {
                long curAns = cur + ans;
                if (curAns < mini) {
                    mini2 = mini;
                    mini = curAns;
                    idx = cur;
                } else {
                    if (curAns < mini2) {
                        mini2 = curAns;
                    }
                }
            }
        }
        {
            cur++;
            while (allExceptions.contains(cur)) {
                cur++;
            }
            if (cur <= n) {
                long curAns = cur + ans;
                if (curAns < mini) {
                    mini2 = mini;
                    mini = curAns;
                    idx = cur;
                } else {
                    if (curAns < mini2) {
                        mini2 = curAns;
                    }
                }
            }
        }

        for (int exception: allExceptions) {
            long curAns = exception + excess.get(exception) + ans;
            if (curAns < mini) {
                mini2 = mini;
                mini = curAns;
                idx = exception;
            } else {
                if (curAns < mini2) {
                    mini2 = curAns;
                }
            }
        }

        return new long[] {mini, idx, mini2 - mini};
    }


}

class MyInput {
    private BufferedReader br;
    private StringTokenizer st;

    MyInput (InputStream inputStream) {
        br = new BufferedReader(new InputStreamReader(inputStream));
        st = null;
    }

    public String next() {
        if (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                while (line == null || line.equals("")) {
                    throw new UnknownError();
                }
                st = new StringTokenizer(line);
            } catch (IOException e) {
                throw new UnknownError();
            }
        }
        return st.nextToken();
    }

    public String nextLine() {
        try {
            return br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public void readEmptyLine() {
        try {
            br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

}


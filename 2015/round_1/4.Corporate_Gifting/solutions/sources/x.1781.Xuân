from collections import deque


def find_min_gift(children, gifts):
    for gift in gifts:
        if gift not in children:
            return gift

T = int(raw_input())
for case in xrange(1, T + 1):
    N = int(raw_input())
    mids = [int(s) for s in raw_input().split(" ")]
    alist = [set() for _ in xrange(N + 1)]
    degree = [0 for _ in xrange(N + 1)]
    for idx, mid in enumerate(mids):
        eid = idx + 1
        alist[eid].add(mid)
        alist[mid].add(eid)
        degree[eid] += 1
        degree[mid] += 1
    leaves = deque()
    for idx, deg in enumerate(degree):
        if idx > 0 and deg == 1:
            leaves.append(idx)
    neighbor_gifts = [set() for _ in xrange(N + 1)]
    gifts = range(1, N + 1)
    expense = 0
    while len(leaves) > 0:
        front = leaves.popleft()
        gift = find_min_gift(neighbor_gifts[front], gifts)
        expense += gift
        # print front, gift
        for neighbor in alist[front]:
            neighbor_gifts[neighbor].add(gift)
            alist[neighbor].remove(front)
            degree[neighbor] -= 1
            if degree[neighbor] == 1:
                leaves.append(neighbor)
        alist[front] = None
    print "Case #%d: %d" % (case, expense)
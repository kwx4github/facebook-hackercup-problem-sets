#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <cassert>
using namespace std;

typedef long long LL;

const LL INF = 1e15;
const int N = 200101;
LL mem[N][4];
int opt[N][4];
vector<int> child[N];
int n;

LL dfs(int u, int mgiv) {
  LL& ret = mem[u][mgiv];
  int& op = opt[u][mgiv];
  if(ret != -1) return ret;
  ret = INF;
  op = -1;
  LL curr;
  for(int my = 1; my < 4; my++) {
    if(my == mgiv) continue;
    curr = my;
    for(int v : child[u]) {
      curr += dfs(v, my);
      if(curr >= ret) break;
    }
    if(ret > curr) ret = curr, op = my;
  }
  return ret;
}

void printans(int u, int mgiv) {
  fprintf(stderr, "%d->%d, ", u, opt[u][mgiv]);
  for(int v : child[u]) printans(v, opt[u][mgiv]);
}

int main() {
  int T; scanf("%d", &T);
  for(int qq = 1; qq <= T; qq++) {
    memset(mem, -1, sizeof mem);
    printf("Case #%d: ", qq);
    scanf("%d", &n);
    int p;
    for(int i = 1; i <= n; i++) child[i].clear();
    for(int i = 1; i <= n; i++) scanf("%d", &p), child[p].push_back(i);
    printf("%lld\n", dfs(1, 0));
    //printans(1 ,0);
  }

  return 0;
}


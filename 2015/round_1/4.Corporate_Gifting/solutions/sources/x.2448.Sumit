import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;


public class Corporate {


    Scanner scan;
    FileWriter fstream;
    BufferedWriter out;
    int[][] minCost;
    
    public Corporate() {
        try {
             fstream = new FileWriter("out.txt");
             out = new BufferedWriter(fstream);
             scan = new Scanner(new File("input.txt"));
             minCost = new int[200010][3];
        } catch(Exception e) {
            
        }
    }
        
    public static void main(String[] args) {
        
        new Corporate().solve();

    }
    
    private int solveHelper() {
        
        List<List<Integer>> children;
        
        children = new ArrayList<List<Integer>>();

        int N = scan.nextInt();

        if (N == 0) {
            return 0;
        }
        
        for (int i=0; i<N; i++) {
            minCost[i][0] = minCost[i][1] = minCost[i][2] = 0;
            children.add(new ArrayList<Integer>());
        }
        
        for (int i=0; i<N; i++) {
            int parent = scan.nextInt();
            
            if (parent == 0) {
                continue;
            }
            
            children.get(parent - 1).add(i);
        }
        
        if (N == 1) {
            return 1;
        }
        
        minCost(0, children);

        return min3(minCost[0][0], minCost[0][1], minCost[0][2]);

    }
    
    private void minCost(int node, List<List<Integer>> children) {
        minCost[node][0] = 1;
        minCost[node][1] = 2;
        minCost[node][2] = 3;
        
        if (children.get(node).isEmpty()) {
            return;
        }
        
        for (int child : children.get(node)) {
            minCost(child, children);
            minCost[node][0] += Math.min(minCost[child][1], minCost[child][2]);
            minCost[node][1] += Math.min(minCost[child][0], minCost[child][2]);
            minCost[node][2] += Math.min(minCost[child][0], minCost[child][1]);
        }
        
    }
    
    private int min3(int x, int y, int z) {
        return Math.min(x, Math.min(y, z));
    }
    
    private void solve() {
        int tc;

        try {
            tc = Integer.parseInt(scan.nextLine());
            for (int t = 0; t<tc; t++) {
                
                //System.out.println("Case: " + t);
                out.write("Case #"+(t+1) + ": " + solveHelper() +"\n");
                out.flush();
            }
            
            out.close();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    }

}



object Solution {
  def main(args: Array[String]): Unit = {
    def solve = {
      val lines = io.Source.stdin.getLines()
      val t = lines.next.toInt

      for(ts <- 1 to t){
        val n = lines.next.toInt
        val p = lines.next.split(" ").map(_.toInt).zipWithIndex.groupBy(_._1).map{ case (k, v) => (k, v.map(_._2+1))}
        val m = new Array[Int](200002)
        val tree = new Array[Int](200002)
        var s = 0
        var e = 0
        while(s <= e){
          val k = m(s)
          if(p.contains(k)) {
            val children = p(k)
            children.foreach(x => {e += 1; tree(e)=s; m(e)=x})
          }
          s += 1
        }
        val isNotLeave = Array.ofDim[Boolean](200002)
        val state = Array.ofDim[Int](4, 200002)
        for(ri <- 0 until n; i = n-ri){
          val parent = tree(i)
          if(isNotLeave(i)) {
            val state1 = state(1)(i)+1
            val state2 = state(2)(i)+2
            val state3 = state(3)(i)+3
            state(1)(parent) += Math.min(state2, state3)
            state(2)(parent) += Math.min(state1, state3)
            state(3)(parent) += Math.min(state1, state2)
            isNotLeave(parent) = true
          }else{
            state(1)(parent) += 2
            state(2)(parent) += 1
            state(3)(parent) += 1
            isNotLeave(parent) = true
          }
        }
        val state1 = state(1)(0)
        val state2 = state(2)(0)
        val state3 = state(3)(0)
        val min = Math.min(Math.min(state1, state2),state3)
        println("Case #"+ts+": "+min)
      }
    }
    solve
  }
}


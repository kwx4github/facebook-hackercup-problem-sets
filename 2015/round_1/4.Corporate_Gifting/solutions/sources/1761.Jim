#include <cstdio>
#include <map>
#include <list>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <iostream>
#include <queue>
#define N 200010
#define M 50
#define INF 1000000000

using namespace std;

int T, n;
vector<int> adj[N];
int dp[N][M + 1];
int order[N], ot = 0;
int stack[N], st = 0, num[N];

void haha(){
	memset(num, 0, sizeof(num));
	st = 1;
	stack[0] = 1;
	while (st > 0){
		int ind = stack[st - 1];
		if (adj[ind].size() != 0 && num[ind] == 0){
			for (int i = 0; i < adj[ind].size(); i++) {
				stack[st++] = adj[ind][i];
				num[ind]++;
			}
		}else {order[ot++] = ind; st--;}
	}
}

void dfs(int ind){
	for (int i = 0; i < adj[ind].size(); i++) dfs(adj[ind][i]);
	order[ot++] = ind;
}
int main(){
	scanf("%d", &T);
	for (int t = 1; t <= T; t++){
		ot = 0;
		memset(dp, 0, sizeof(dp));
		scanf("%d", &n);
		for (int i = 0; i <= n; i++) adj[i].clear();
		scanf("%*d");
		for (int i = 2; i <= n; i++){
			int tmp;
			scanf("%d", &tmp);
			adj[tmp].push_back(i);
		}
		//		dfs(1);
		haha();
		for (int i = 0; i < ot; i++){
			int ind = order[i];
			for (int j = 1; j <= min(M, n); j++){
				for (int l = 0; l < adj[ind].size(); l++){
					int minV = INF;
					for (int k = 1; k <= min(M, n); k++)
						if (j != k) minV = min(minV, dp[adj[ind][l]][k]);
					dp[ind][j] += minV;
				}
				dp[ind][j] += j;
			}
		}
		int minV = INF;
		for (int i = 1; i <= min(M, n); i++) minV = min(minV, dp[1][i]);
		printf("Case #%d: %d\n", t, minV);
	}
	return 0;
}

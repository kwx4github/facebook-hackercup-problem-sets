import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

public class ProblemD {

public static void main(String[] args) throws IOException {
		
		ProblemD solver = new ProblemD();
		solver.init();
		solver.solve();
	}

	private void init() {
		
	}
	
	private static class Node {
		List<Node> children = new LinkedList<>();
		int[] best = new int[]{0,1,2,3};
		boolean expanded = false;
	}
	
	private void solve() throws IOException {
		 
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			int N = in.nextInt();
			Node[] emps = new Node[N];
			emps[0] = new Node();
			in.next();
			for (int i = 1; i < N; i++) {
				emps[i] = new Node();
			}
			for (int i = 1; i < N; i++) {
				int parent = in.nextInt() - 1;
				emps[parent].children.add(emps[i]);
			}
			out.println("Case #" + t + ": " + count(emps[0]));
		}
		
		out.flush();
		out.close();
	}
	
	private int count(Node ceo) {
		
		Deque<Node> queue = new LinkedList<Node>();
		queue.add(ceo);
		while (!queue.isEmpty()) {
			Node last = queue.peekLast();
			if (!last.expanded) {
				last.expanded = true;
				queue.addAll(last.children);
			} else {
				queue.pollLast();
				last.best[1] += sumChildren(last.children, new int[]{2,3});
				last.best[2] += sumChildren(last.children, new int[]{1,3});
				last.best[3] += sumChildren(last.children, new int[]{1,2});
			}
		}
		
		return Math.min(ceo.best[1], Math.min(ceo.best[2], ceo.best[3]));
	}

	private int sumChildren(List<Node> children, int[] idx) {
		int sum = 0;
		for (Node child : children) {
			sum += Math.min(child.best[idx[0]], child.best[idx[1]]);
		}
		return sum;
	}

	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

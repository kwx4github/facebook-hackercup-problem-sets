#include <cstdio>
#include <vector>
#include <queue>
#define x first
#define y second

using namespace std;

const int oo = 1000000000;

vector < int > veze[200005];
pair < int, int > p1[200005], p2[200005];
void dfs(int pos){
     pair < int, int > &p1 = ::p1[pos], &p2 = ::p2[pos];
     /*if (veze[pos].size() == 0){
        p1 = make_pair(1, 1);
        p2 = make_pair(2, 2);
        return;
     }*/
     //for (int i = 0; i < veze[pos].size(); ++i) dfs(veze[pos][i]);
     static int maks[200005];
     for (int i = 0; i <= veze[pos].size() + 2; ++i) maks[i] = 0;
     int ss = 0;
     for (int i = 0; i < veze[pos].size(); ++i){
         int nxt = veze[pos][i];
         ss += ::p1[nxt].y;
         maks[::p1[nxt].x] -= ::p1[nxt].y;
         maks[::p1[nxt].x] += ::p2[nxt].y;
     }
     p1.y = p2.y = oo;
     for (int i = 1; i <= veze[pos].size() + 2; ++i){
         if (ss + maks[i] + i < p2.y){
            p2.x = i;
            p2.y = ss + maks[i] + i;
         }
         if (ss + maks[i] + i < p1.y){
            p2 = p1;
            p1.x = i;
            p1.y = ss + maks[i] + i;
         }
     }
}

void init(){}
void solve(){
     int n; scanf("%d", &n);
     scanf("%*d");
     static int par[200005];
     static int sz[200005];
     for (int i = 2; i <= n; ++i){
         int x; scanf("%d", &x);
         veze[x].push_back(i);
         par[i] = x;
         ++sz[x];
     }
     queue < int > Q;
     for (int i = 1; i <= n; ++i) if (sz[i] == 0) Q.push(i);
     while (!Q.empty()){
           int x = Q.front(); Q.pop();
           dfs(x);
           if (--sz[par[x]] == 0) Q.push(par[x]);
     }
     printf("%d\n", p1[1].y);
     for (int i = 1; i <= n; ++i) veze[i].clear();
}

int main(){
    init();
    int t; scanf("%d", &t);
    for (int i = 1; i <= t; ++i){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

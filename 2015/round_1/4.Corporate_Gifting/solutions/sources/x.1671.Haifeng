#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

#define D(x) 

const int MAX_N = (int)(1e5) * 2;
const int MAX_LOG = 44;
const int INF = 0x3f3f3f3f;

struct Elem
{
	int id;
	int least[MAX_LOG];
	int cost[MAX_LOG];
}elem[MAX_N];

vector<int> edge[MAX_N];
int n;
int father[MAX_N];
int degree[MAX_N];
int elem_cnt;
int log_n;
int link[MAX_N];

void input()
{
		scanf("%d", &n);
		for (int i = 1; i <= n; i++)
		{
			edge[i].clear();
		}
		fill(degree, degree + n, 0);
		for (int i = 1; i <= n; i++)
		{
			int a;
			scanf("%d", &a);
			edge[a].push_back(i);
			father[i] = a;
			degree[a]++;
		}
}

void bfs()
{
	queue<int> q;
	for (int i = 1; i <= n; i++)
	{
		if (degree[i] == 0)
		{
			q.push(i);
		}
	}
	elem_cnt = 0;
	while (!q.empty())
	{
		int u = q.front();
		q.pop();
		elem[elem_cnt++].id = u;
		int v = father[u];
		if (v < 1)
		{
			continue;
		}
		degree[v]--;
		if (degree[v] == 0)
		{
			q.push(v);
		}
	}
}

int cal_cost(int u, int w)
{
	int ret = w;
	for (typeof(edge[u].begin()) it = edge[u].begin(); it != edge[u].end(); it++)
	{
		int v = *it;
		int vid = link[v];
		ret += elem[vid].least[w];
	}
	return ret;
}

int cal_least(int cost[], int x)
{
	int ret = INF;
	for (int i = 1; i <= log_n; i++)
	{
		if (i == x)
		{
			continue;
		}
		ret = min(ret, cost[i]);
	}
	return ret;
}

int work()
{
	int temp = n;
	log_n = 0;
	while (temp > 0)
	{
		temp >>= 1;
		log_n++;
	}
	log_n *= 2;

	for (int i = 0; i < elem_cnt; i++)
	{
		link[elem[i].id] = i;
	}

	for (int i = 0; i < elem_cnt; i++)
	{
		int u = elem[i].id;
		for (int j = 1; j <= log_n; j++)
		{
			elem[i].cost[j] = cal_cost(u, j);
		}
		for (int j = 1; j <= log_n; j++)
		{
			elem[i].least[j] = cal_least(elem[i].cost, j);
		}
	}

	int ret = INF;
	for (int i = 1; i <= log_n; i++)
	{
		ret = min(ret, elem[link[1]].cost[i]);
	}
	return ret;
}

void output()
{
	printf("%d\n", elem_cnt);
	for (int i = 0; i < elem_cnt; i++)
	{
		printf("%d\n", elem[i].id);
		for (int j = 1; j <= log_n; j++)
		{
			printf("%d ", elem[i].cost[j]);
		}
		puts("");
	}
}

int main()
{
	int t;
	scanf("%d", &t);
	for (int i = 0; i < t; i++)
	{
		printf("Case #%d: ", i + 1);
		input();
		bfs();
		int ans = work();
		printf("%d\n", ans);
		D(output());
	}
	return 0;
}

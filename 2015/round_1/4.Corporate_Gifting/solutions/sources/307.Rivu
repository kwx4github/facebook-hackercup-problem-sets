#include <bits/stdc++.h>
using namespace std;
#define max INT_MAX
 
vector<vector<int> >a;
int b[200010][110];
 
void dfs(int node);
int main()
{
	freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
	int t,n,i,m,l,ans;
	l = 1;
    cin>>t;
    while(l <= t) {
        a.clear();
        cin>>n;
        a.resize(n+5);
        for(i = 1; i <= n; i++) { 
            cin>>m;
            a[m].push_back(i);
        }
        dfs(1);
        ans = max;
        for (i = 1; i < 105; i++) {
            ans = min(ans,b[1][i]);
        }
        printf("Case #%d: %d\n",l++,ans);
    }
    return 0;
}
 
void dfs(int node)
{
	stack<int>x,y;
	vector<int> a1, a2;
	map<int,int> mp;
	int v,z,i,j,mn;
    x.push(node);
    while(!x.empty()) {
        v=x.top();
        if(mp[v]) {
            for(i = 0; i < a[v].size(); i++) {
            	z = a[v][i];
            	a1.assign(110, max);
            	a2.assign(110, max);
            	for(j = 1; j < 105; j++) {
                	a1[j] = min(a1[j-1], b[z][j]);
            	}
            	for(j = 105-1; j >= 1; j--) {
                	a2[j] = min(a2[j+1], b[z][j]);
            	}
            	for(j = 1; j < 105; j++) {
                	mn = min(a1[j-1], a2[j+1]);
                	b[v][j] += mn;
            	}
        	}
        	x.pop();
        	continue;
        }
        for(i = 1; i < 105; i++) {
            b[v][i] = i;
        }
        for(i = 0; i < a[v].size(); i++) {
            z = a[v][i];
            y.push(z);
        }
        while(!y.empty()) {
        	x.push(y.top());
        	y.pop();
        }
        mp[v]=1;
    }
}

/*long long solve(int n,int last){
    if(g[n].size()==0){
        return last==1?2:1;
    }
    long long& res=dp[n][last];
    if(res!=-1)
        return res;
    res=1e12;
    for(int m=1;m<=MAXMONEY;m++){
        long long sum=m;
        if(m==last) continue;
        for(int i=0;i<g[n].size();i++){
            sum+=solve(g[n][i],m);
        }
        res=min(sum,res);
    }
    return res;
}*/
#include <bits/stdc++.h>
#define MAXMONEY 22
#define NODE 200000
using namespace std;
typedef struct state {
	int n, l;
	bool isProcessed;
	state(int n, int l) : n(n), l(l), isProcessed(0) {}
}state;
vector<vector<int> > g;
long long dp[NODE][MAXMONEY];
long long best(int n,int l){
    stack<state> st;
    state cur= state(n,l);
    st.push(cur);
    while(!st.empty()){
        cur=st.top(), n=cur.n, l=cur.l, st.pop();
        //cout<<"cur :"<<n<<" "<<l<<endl;
        if(dp[n][l]==-1){

            if(g[n].size() == 0){
                    //cout<<"is base case"<<endl;
                    dp[n][l] = l==1?2:1;
                }
            else if(!cur.isProcessed){
                //cout<<"not processed"<<endl;
                cur.isProcessed=1;
                st.push(cur);
                 for(int m=1;m<=MAXMONEY;m++){
                    long long sum=m;
                    if(m==l) continue;
                    for(int i=0;i<g[n].size();i++){
                        st.push(state(g[n][i],m));
                    }
                }
            }else{
                dp[n][l] = 1e12;
                 for(int m=1;m<=MAXMONEY;m++){
                        long long sum=m;
                        if(m==l) continue;
                        for(int i=0;i<g[n].size();i++){
                            sum+=dp[g[n][i]][m];
                        }
                        dp[n][l]=min(sum,dp[n][l]);
                    }
            }
        }
    }
    return dp[1][0];
}
int main(){
    ifstream cin("realinput.in");
    ofstream cout("myout.out");
    int T; cin>>T;
    cerr<<"nbr of cases"<<T<<endl;
    for(int t=1;t<=T;t++){
    cerr<<t<<endl;
        int N;
        cin>>N;
        memset(dp,-1,sizeof(dp));
        g.clear();
        g=vector<vector<int> >(N+1,vector<int>());
        for(int i=0;i<N;i++){
            int x; cin>>x;
            g[x].push_back(i+1);
        }
        cout<<"Case #"<<t<<": "<<best(1,0)<<endl;
    }
}

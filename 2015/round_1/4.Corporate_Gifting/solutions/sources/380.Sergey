from collections import deque

class Node:
    def __init__(self):
        self.minsum = 0
        self.rcolor = 0
        self.delta = 0
        self.ncolor = 0
        self.sons = []
        self.nosons = 0

def minsum(managers):
    n = len(managers)
    tree = {}
    for i in xrange(1, n + 1):
        tree[i] = Node()
    for i in xrange(2, n + 1):
        tree[managers[i - 1]].sons.append(i)
        tree[managers[i - 1]].nosons += 1

    leaf_to_root = [1]
    frontier = deque([1])
    while frontier:
        x = frontier.popleft()
        leaf_to_root.extend(tree[x].sons)
        frontier.extend(tree[x].sons)
    leaf_to_root = leaf_to_root[::-1]

    # Algo:  
    # E. Kubicka and A. J. Schwenk. 1989. An introduction to chromatic sums. 
    # In Proceedings of the 17th conference on ACM Annual Computer Science Conference (CSC '89). ACM, New York, NY, USA, 39-45. 
    # DOI=10.1145/75427.75430 http://doi.acm.org/10.1145/75427.75430 
    coloradd = {}
    for i in leaf_to_root:
        if not tree[i].sons:
            tree[i].minsum = 1
            tree[i].rcolor = 1
            tree[i].delta = 1
            tree[i].ncolor = 2
        else:
            mintotal = 0
            for k in xrange(1, tree[i].nosons + 2 + 1):
                coloradd[k] = k
            for son in tree[i].sons:
                mintotal += tree[son].minsum
                coloradd[tree[son].rcolor] += tree[son].delta
            sum1 = float("Inf")
            sum2 = float("Inf")

            for k in xrange(1, tree[i].nosons + 2 + 1):
                value = coloradd[k]
                if value < sum1:
                    sum2 = sum1
                    color1 = k
                    color2 = color1
                    sum1 = value
                else:
                    if value < sum2:
                        color2 = k
                        sum2 = value
            tree[i].minsum = sum1 + mintotal
            tree[i].rcolor = color1
            tree[i].delta = sum2 - sum1
            tree[i].ncolor = color2
    return tree[1].minsum

def do_case(case_num, managers):
    print "Case #%d: %d" % (case_num, minsum(managers))

def main():
    T = int(raw_input())
    for case_num in range(1, T + 1):
        n = int(raw_input())
        managers = map(int, raw_input().split())
        do_case(case_num, managers)

if __name__ == "__main__":
    main()


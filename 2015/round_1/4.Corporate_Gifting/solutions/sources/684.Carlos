#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long llong;

const llong INF = 1000000000000000000LL;

int N;
VI P;
VVI adj;

#define MAXN 200004
#define MAXC 10

bool cache[MAXC][MAXN];
llong memo[MAXC][MAXN];
llong go(int c, int u) {
   if (cache[c][u]) return memo[c][u];
   llong res = c+1;
   for (int j = 0; j < adj[u].size(); ++j) {
      int v = adj[u][j];
      llong vcost = INF;
      int bestnc = 0;
      for (int nc = 0; nc < MAXC; ++nc) {
         if (nc == c) continue;
         llong cur = go(nc, v);
         if (vcost > cur) {
            vcost = cur;
            bestnc = nc;
         }
      }
   //   if (u == 0)
   //      cerr << "   " << (v+1) << "  " << (bestnc+1) << "  " << vcost << endl;
      res += vcost;
   }
   cache[c][u] = true;
   return memo[c][u] = res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int TC;
   cin >> TC;
   for (int tc = 1; tc <= TC; ++tc) {
      cin >> N;
      P = VI(N);
      adj = VVI(N);
      for (int v = 0; v < N; ++v) {
         cin >> P[v];
         --P[v];
         if (P[v] >= 0)
            adj[ P[v] ].push_back(v);
      }
      for (int c = 0; c < MAXC; ++c)
         memset(cache[c], 0, sizeof(bool)*(N+1));
      llong res = INF;
      for (int c = 0; c < MAXC; ++c) {
         llong cur = go(c, 0);
      //   cerr << "c = " << (c+1) << "   cost = " << cur << endl;
         res = min(res, cur);
      }
      cout << "Case #" << tc << ": " << res << endl;
   }

   return 0;
}

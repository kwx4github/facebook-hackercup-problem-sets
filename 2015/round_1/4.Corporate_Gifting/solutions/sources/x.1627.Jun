#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<string>
#include<sstream>
#include<vector>
#include<map>
#include<set>
#include<bitset>
#include<algorithm>
#include<cassert>
#include<ctime>
#include<queue>
using namespace std;

#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define FOR(i,n,m) for(int i = (int)n; i <= (int)(m); i++)
#define FOD(i,n,m) for(int i = (int)n; i >= (int)(m); i--)
#define FOREACH(i,v) for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)

typedef long long LL;
typedef pair<int, int> PII;

#define PB push_back
#define MP make_pair
#define X first
#define Y second

const int N = 200010;

int h[N], n;
pair<PII, PII> f[N];
vector<int> E[N], H[N];

int main() {
	int T;
	scanf("%d", &T);
	FOR(t, 1, T) {
		scanf("%d", &n);
		int ans = 0;
		rep(i, N) E[i].clear();
		rep(i, N) H[i].clear();
		FOR(i, 1, n) {
			int x;
			scanf("%d", &x);
			h[i] = h[x] + 1;
			E[x].push_back(i);
			H[h[i]].push_back(i);
		}
		FOD(i, n, 1) {
			rep(j, H[i].size()) {
				int k = H[i][j];
				set<int> tmp;
				map<int, int> inc;
				vector<PII> ans;
				int sum = 0;
				rep(jj, E[k].size()) {
					int u = E[k][jj];
					tmp.insert(f[u].X.Y);
					inc[f[u].X.Y] += f[u].Y.X - f[u].X.X;
					sum += f[u].X.X;
				}
				rep(it, 2) FOR(v, 1, n) if (!tmp.count(v)) {
					tmp.insert(v);
					break;
				}
				FOREACH(it, tmp)
					ans.PB(MP(sum + *it + inc[*it], *it));
				sort(ans.begin(), ans.end());
				f[k] = MP(ans[0], ans[1]);
			}
		}
		printf("Case #%d: %d\n", t, f[1].X.X);
	}
	return 0;
}


#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define ull unsigned long long
#define ld long double
#define pb push_back
#define popb pop_back

#define pii pair<int,int>
#define mp make_pair
#define X first
#define Y second
#define vi vector<int>
#define vii vector< pii >

#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)

#define maxN 200005
#define maxC 25

int T;
int N;
int father[maxN];
vector<int> sons[maxN];
int best[maxN][maxC];

void comp(int u) {
  if (sons[u].empty()) {
    best[u][1] = 2;
    FOR(c, 2, maxC - 1) best[u][c] = 1;
    return;
  }
  REP(i, (int)sons[u].size()) {
    comp(sons[u][i]);
  }
  int best1, best2; best1 = best2 = maxN * maxC;
  int can[maxC];
  FOR(c, 1, maxC - 1) {
    can[c] = c;
    REP(i, (int)sons[u].size()) {
      can[c] += best[sons[u][i]][c];
    }
    if (can[c] < best1) { best2 = best1; best1 = can[c]; }
    else if (can[c] < best2) { best2 = can[c]; }
  }
  FOR(c, 1, maxC - 1) {
    if (can[c] == best1) best[u][c] = best2;
    else best[u][c] = best1;
  }
//  printf("%d: %d %d %d %d\n", u, best[u][1], best[u][2], best[u][3], best[u][4]);
}

int main(){
  scanf("%d", &T);

  FOR(t, 1, T) {
    scanf("%d", &N);
    REP(i, N) sons[i].clear();
    REP(i, N) {
      int f;
      scanf("%d", &f);
      if (i) {
        father[i + 1] = f;
        sons[f].push_back(i + 1);
      }
    }
    comp(1);
    printf("Case #%d: %d\n", t, min(best[1][1], best[1][2]));
  }

  return 0;
}

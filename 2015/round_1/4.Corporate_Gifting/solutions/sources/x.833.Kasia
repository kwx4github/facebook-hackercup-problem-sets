#include <bits/stdc++.h>
using namespace std;

const int N = 1000*1000;

int ile[N], pie[N], dru[N], przy[N], kiedy[N], zegar;
vector <int> G[N];
long long int wynik = 0;
void policz(int v)
{
//	printf("policz %d\n",v);
zegar++;
	for (int i=0;i<G[v].size();i++)
	{
		policz( G[v][i] );
	}
	for (int i=0;i<G[v].size();i++)
	{
		if ( kiedy[ pie[ G[v][i] ] ] < zegar )
		{
			kiedy[ pie[ G[v][i] ] ] = zegar;
			ile[ pie[ G[v][i] ] ] = pie[ G[v][i] ];
		}
		ile[ pie[ G[v][i] ] ] += przy[ G[v][i] ];
	}
	int x = 0, pmin = 399999, dmin = 399999;
	do
	{
//		printf("%d -- %d %d\n",x,pmin,dmin);
		x++;
		if ( kiedy[x] < zegar )
		{
			kiedy[x] = zegar;
			ile[x] = x;
		}
		if ( ile[x] < pmin )
		{
			dru[v] = pie[v];
			pie[v] = x;
			dmin = pmin;
			pmin = ile[x];
		}
		else if ( ile[x] < dmin )
		{
			dru[v] = x;
			dmin = ile[x];
		}
	}
	while( x <= dmin );
	przy[v] = dmin - pmin;
	wynik += pmin;
//	printf("ret\n");
}
int main()
{
	int t,n,a;
	scanf("%d",&t);
	for (int z=1;z<=t;z++)
	{
		scanf("%d",&n);
		wynik = 0;
		for (int i=1;i<=n;i++) G[i].clear();
		for (int i=1;i<=n;i++)
		{
			scanf("%d",&a);
			G[a].push_back(i);
		}
		policz(1);
		printf("Case #%d: %lld\n",z,wynik);
	}
}

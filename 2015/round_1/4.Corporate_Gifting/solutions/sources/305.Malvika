#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <vector>
#include <cstdlib>

#define NMAX 200010

using namespace std;

vector<int> child[NMAX];
int par[NMAX];

int f[NMAX][22];
int g[NMAX][22];

const int mxv = 20;

int N;

void dfs(int v){
	int i,p,k,val,n;

	n = child[v].size();
	for(i = 0; i < n; ++i) dfs(child[v][i]);

	p = par[v];
	for(k = 1; k <= mxv; ++k){
		f[v][k] = (1e9);
		for(val = 1; val <= mxv && val <= n+2; ++val){
			if(val == k) continue;
			f[v][k] = min(f[v][k],val+g[v][val]);
		}
		if(p >= 0) g[p][k] += f[v][k];
	}
}

void clear(){
	int i;
	memset(g,0,sizeof(g));
	for(i =0 ; i < N; ++i){
		child[i].clear();
	}
}

int main(){
	int t,sol,T,i;
	scanf("%d",&T);

	for(t = 1; t <= T; ++t){
		scanf("%d",&N);

		for(i = 0; i < N; ++i){
			scanf("%d",&par[i]);
			--par[i];
			if(par[i] >= 0) child[par[i]].push_back(i);
		}

		dfs(0);
		sol = 2*N;

		for(i = 1; i <= mxv; ++i){
			sol = min(sol,f[0][i]);
		}

		printf("Case #%d: %d\n",t,sol);

		clear();
	}

	return 0;
}

#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std ;

typedef long long LL ;

const int MAXN = 200009 ;
const int MAXK = 21 ;
const LL INF = 200000LL * 200000LL ;

int N , K , tot ;
int First[MAXN] , Node[MAXN] , Next[MAXN] ;
LL F[MAXN][MAXK] , G[MAXN][MAXK] , L[MAXK] , R[MAXK] ;

LL minLL(LL a , LL b) {
    return (a < b ? a : b) ;
}

void AddEdge(int u , int v) {
    Next[++tot] = First[u] ; First[u] = tot ; Node[tot] = v ;
}

void Init() {
    cin >> N ;
    K = 1 ; while ( (1<<(K-1)) < N ) K ++ ;
    
    for ( int i = 1 ; i <= N ; i ++ ) First[i] = -1 ;
    tot = 0 ;
    for ( int i = 1 ; i <= N ; i ++ ) {
        int u ; cin >> u ;
        AddEdge(u , i) ;
    }
}

void Dfs( int x ) {
    for ( int i = 1 ; i <= K ; i ++ ) F[x][i] = i ;
    for ( int e = First[x] ; e != -1 ; e = Next[e] ) {
        Dfs(Node[e]) ;
        for ( int i = 1 ; i <= K ; i ++ ) F[x][i] += G[Node[e]][i] ;
    }
    L[0] = INF ; R[K+1] = INF ;
    for ( int i = 1 ; i <= K ; i ++ ) L[i] = minLL(L[i-1] , F[x][i]) ;
    for ( int i = K ; i >= 1 ; i -- ) R[i] = minLL(R[i+1] , F[x][i]) ;
    for ( int i = 1 ; i <= K ; i ++ ) G[x][i] = minLL(L[i-1] , R[i+1]) ;
}

int Solve() {
    Dfs(1) ;
    int ans = INF ;
    for ( int i = 1 ; i <= K ; i ++ )
        ans = minLL(ans , F[1][i]) ;
    return ans ;
}

int main() {
    freopen("D.in" , "r" , stdin) ;
    freopen("D.out", "w" ,stdout) ;
    
    int Test ; cin >> Test ;
    for ( int i = 1 ; i <= Test ; i ++ ) {
        Init() ;
        cout << "Case #" << i << ": " << Solve() << "\n" ;
    }
}


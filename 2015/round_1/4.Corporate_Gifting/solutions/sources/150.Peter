#include <cstdio>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <algorithm>

#define FOR(i,n) for (int i = 0; i < (n); i++)

#define MAXN 200047
#define MAXC 100
int DP[MAXN][MAXC];
int P[MAXN];
int D[MAXN];

int main() {
	int T;
	scanf("%d", &T);
	FOR(t,T) {
		memset(DP,0,sizeof(DP));
		int N, R = 1000000000;
		scanf("%d", &N);
		FOR(i,N) {
			scanf("%d", &P[i]); P[i]--;
			if (i > 0) D[P[i]]++;
		}
		std::queue<int> Q;
		FOR(i,N) if (!D[i]) Q.push(i);
		while (!Q.empty()) {
			int v = Q.front(); Q.pop();
			int p = P[v]; // parent
			int m1 = -1;  // smallest
			int m2 = -1;  // second smallest
			FOR(i,MAXC) {
				DP[v][i] += i+1;
				if (m1 == -1 || DP[v][i] <= DP[v][m1]) {
					m2 = m1; m1 = i;
				} else if (m2 == -1 || DP[v][i] <= DP[v][m2]) {
					m2 = i;
				}
			}
			if (p >= 0) {
				FOR(i,MAXC) {
					if (i == m1) {
						DP[p][i] += DP[v][m2];
					} else {
						DP[p][i] += DP[v][m1];
					}
				}
				if (--D[p] == 0) Q.push(p);
			}
		}
		FOR(i,MAXC) R = std::min(R, DP[0][i]);
		printf("Case #%d: %d\n", t+1, R);
	}
	return 0;
}

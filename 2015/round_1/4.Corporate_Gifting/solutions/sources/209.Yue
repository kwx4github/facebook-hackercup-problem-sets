#include <cstdio>
#include <cmath>
#include <cstring>

using namespace std;

const int maxn = 200000;
const int maxnum = 650;


struct TEdge {
	int child;
	int next;
};

int cases, casei, n, edgeN, num, ans;
int start[maxn + 10];
TEdge edges[maxn + 10];
int father[maxn + 10];
int children[maxn + 10];
int Q[maxn + 10];
int value[maxn + 10][maxnum + 10][2];



void addEdge(int fa, int ch) {
	edges[edgeN].child = ch;
	edges[edgeN].next = start[fa];
	start[fa] = edgeN++;
}


void process() {
	int open = -1;
	int close = -1;

	for (int i = 1; i <= n; ++i)
		if (children[i] == 0) {
			Q[++close] = i;
		}
	
	num = int(sqrt(n << 1)) + 10;
	
	while (open < close) {
		++open;
		int now = Q[open];
		int fa = father[now];
		
		if (--children[fa] == 0 && fa > 0) {
			Q[++close] = fa;
		}
		
		
		for (int i = 1; i <= num; ++i)
			value[now][i][0] = i;
		
		int nowEdge = start[now];
		while (nowEdge > -1) {
			int ch = edges[nowEdge].child;

			for (int i = 1; i <= num; ++i) {
				value[now][i][0] += value[ch][i][1];
			}
			
			nowEdge = edges[nowEdge].next;
		}
		
		int mini = value[now][1][0];
		for (int i = 2; i <= num; ++i) {
			value[now][i][1] = mini;
			if (mini > value[now][i][0])
				mini = value[now][i][0];
		}
		mini = value[now][num][0];
		for (int i = num - 1; i >= 2; --i) {
			if (value[now][i][1] > mini)
				value[now][i][1] = mini;
			if (mini > value[now][i][0])
				mini = value[now][i][0];
		}
		value[now][1][1] = mini;
	}
}

int main() {
	scanf("%d", &cases);
	for (casei = 1; casei <= cases; ++casei) {
		scanf("%d", &n);
		memset(children, 0, sizeof(children));
		memset(start, 255, sizeof(start));
		edgeN = 0;
		for (int i = 1; i <= n; ++i) {
			scanf("%d", father + i);
			++children[father[i]];
			addEdge(father[i], i);
		}
		
		process();
		
		
		
		ans = value[1][1][0];
		for (int i = 2; i <= num; ++i)
			if (ans > value[1][i][0])
				ans = value[1][i][0];
		printf("Case #%d: %d\n", casei, ans);
	}
	
	return 0;
}
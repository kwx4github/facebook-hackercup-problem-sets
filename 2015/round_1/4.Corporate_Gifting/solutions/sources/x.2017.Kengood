#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <complex>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <ctime>

#include<unordered_map>
#include<unordered_set>
using namespace std;

//#define MOD  1000000007

int ans = 0;
int dfs(const vector< vector<int> >& graph, int cur)
{
	if (graph[cur].empty())
	{
		++ans;
		return 1;
	}
	vector<int> choice(graph[cur].size());
	for (int i = 0; i < graph[cur].size(); ++i)
	{
		int t = dfs(graph, graph[cur][i]);
		choice[i] = t;
	}

	// ... find the min missing positive number
	for (int i = 0; i < graph[cur].size(); ++i)
	{
		int idx = choice[i];
		while (idx < choice.size() && idx != choice[idx-1])
		{
			swap(choice[idx-1], choice[i]);
			idx = choice[i];
		}
	}

	for (int i = 0; i < graph[cur].size(); ++i)
	{
		if (choice[i] != i+1)
		{
			ans += i+1;
			return i+1;
		}
	}

	ans += graph[cur].size()+1;
	return graph[cur].size()+1;
}

void test()
{
	int n = 10;
	cout << n << endl;
	cout << 200000  <<endl;
	for (int i = 0; i < 200000 ; ++i)
		cout << i << endl;
	while (n--)
	{
		cout << 200000  <<endl;
		for (int i = 0; i < 200000 ; ++i)
		{
			if (i)
				cout << rand()%200000+1 << endl;
			else
				cout << i << endl;
		}
	}
}

int main()
{	
	//test(); return 0;
	int Case, cases = 0;
	scanf("%d" , &Case);

	while (Case--)
	{
		ans = 0;
		int n;
		scanf("%d" , &n);

		vector< vector<int> > graph(n);
		for (int i = 0; i < n; ++i)
		{
			int t;
			scanf("%d" , &t);
			if(t)
				graph[t-1].push_back(i);
		}

		dfs(graph,0);

		printf("Case #%d: %d\n" , ++cases, ans);
	}

	return 0;
}
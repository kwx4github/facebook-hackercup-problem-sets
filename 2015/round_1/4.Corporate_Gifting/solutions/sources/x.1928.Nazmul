#include<cstdio>
#include<vector>

using namespace std;

int _Pa[200009];
int COST[200009][2];
int NODELEVEL[200009][2];
vector<int> Children[200009];
int ChildrenCount[200009];
int CURRENTLEVEL[200009];
int TEMPORARYCOSTCAL[200009];
vector<int> leafNode;

void CalCulateCurrentCost(int currentNode, int currentCOST,int currentLevel)
{
	if(currentCOST < COST[currentNode][1])
	{
		COST[currentNode][1] = currentCOST;
		NODELEVEL[currentNode][1] = currentLevel;

		if(COST[currentNode][0] > COST[currentNode][1])
		{
			int tp = COST[currentNode][0];
			COST[currentNode][0] = COST[currentNode][1];
			COST[currentNode][1] = tp;

			tp = NODELEVEL[currentNode][0];
			NODELEVEL[currentNode][0] = NODELEVEL[currentNode][1];
			NODELEVEL[currentNode][1] = tp;
		}
	}
}

int main()
{
	freopen("corporate_gifting.txt","r",stdin); 
    freopen("output.txt","w",stdout);
	
	int cas;
	int n,t;
	
	scanf("%d",&cas);

	for(int cas1=1;cas1<=cas;cas1++)
	{
		
		_Pa[0]=-1;

		leafNode.clear();

		scanf("%d",&n);
		
		for(int i=0;i<n;i++)
		{
			scanf("%d",&t);
		
			if(i!=0)
			{
				Children[t-1].push_back(i);
				ChildrenCount[t-1]++;
				_Pa[i]=t-1;
			}
		}

		for(int i=0;i<n;i++)
		{
			if(ChildrenCount[i]==0)
			{
				leafNode.push_back(i);
			}
		}
	
		int _cp = 0;

		while(leafNode.size()!=_cp)
		{
			int _CurrentNodeIndex = leafNode[_cp];
			
			if(Children[_CurrentNodeIndex].size()==0)
			{
				COST[_CurrentNodeIndex][0]=1;
				COST[_CurrentNodeIndex][1]=2;
				NODELEVEL[_CurrentNodeIndex][0]=1;
				NODELEVEL[_CurrentNodeIndex][1]=2;
			}
			else
			{
				int COSTOFMIN = 0;
				int LEVELOFCOSTMIN = 1;
				
				for(int i=0;i<Children[_CurrentNodeIndex].size();i++)
				{
					COSTOFMIN += COST[Children[_CurrentNodeIndex][i]][0];
					TEMPORARYCOSTCAL[NODELEVEL[Children[_CurrentNodeIndex][i]][0]] += COST[Children[_CurrentNodeIndex][i]][1] - COST[Children[_CurrentNodeIndex][i]][0];
					CURRENTLEVEL[NODELEVEL[Children[_CurrentNodeIndex][i]][0]] = 1;

					while(CURRENTLEVEL[LEVELOFCOSTMIN]==1)
						LEVELOFCOSTMIN++;
				}


				COST[_CurrentNodeIndex][0]=2000000000;
				COST[_CurrentNodeIndex][1]=2000000000;
				NODELEVEL[_CurrentNodeIndex][0]=200000;
				NODELEVEL[_CurrentNodeIndex][1]=200000;

				CalCulateCurrentCost(_CurrentNodeIndex, COSTOFMIN + LEVELOFCOSTMIN, LEVELOFCOSTMIN);
				
				LEVELOFCOSTMIN++;

				while(CURRENTLEVEL[LEVELOFCOSTMIN]==1)
						LEVELOFCOSTMIN++;

				if(LEVELOFCOSTMIN <= n)
				CalCulateCurrentCost(_CurrentNodeIndex, COSTOFMIN + LEVELOFCOSTMIN, LEVELOFCOSTMIN);

				for(int i=0;i<Children[_CurrentNodeIndex].size();i++)
				{
					CalCulateCurrentCost(_CurrentNodeIndex, COSTOFMIN+TEMPORARYCOSTCAL[NODELEVEL[Children[_CurrentNodeIndex][i]][0]]+NODELEVEL[Children[_CurrentNodeIndex][i]][0],NODELEVEL[Children[_CurrentNodeIndex][i]][0]);
				}
				
				for(int i=0;i<Children[_CurrentNodeIndex].size();i++)
				{
					TEMPORARYCOSTCAL[NODELEVEL[Children[_CurrentNodeIndex][i]][0]] = 0;
					CURRENTLEVEL[NODELEVEL[Children[_CurrentNodeIndex][i]][0]] = 0;
				}
			}

			if(_Pa[_CurrentNodeIndex]!=-1)
			{
				ChildrenCount[_Pa[_CurrentNodeIndex]]--;

				if(ChildrenCount[_Pa[_CurrentNodeIndex]] == 0)
				{
					leafNode.push_back(_Pa[_CurrentNodeIndex]);
				}
			}

			_cp++;
		}


		printf("Case #%d: %d\n",cas1,COST[0][0]);

		for(int i=0;i<n;i++)
		{
			ChildrenCount[i] = 0;
			Children[i].clear();
		}
	}

	
	return 0;    
}

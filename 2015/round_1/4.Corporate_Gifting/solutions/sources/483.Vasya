#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>
#include <map>
#include <stack>

using namespace std;

const int MAX_C = 500;

vector<int> g[222222];
vector<int> g1[222222];
pair<int,int> dp[200001][2];
int p[222222];
int mas[MAX_C+1];

void dfs(int v) {
    stack<int> st;
    st.push(v);
    p[v] = 0;
    while (!st.empty()) {
        v = st.top();
        
        if (g[v].size() == 0) {
            st.pop();
            for(int i = 1; i <= MAX_C; ++i)
                mas[i] = i;
            
            for(int j = 0; j < g1[v].size(); ++j) {
                int son = g1[v][j];
                
                for(int i = 1; i <= MAX_C; ++i)
                if (dp[son][0].second == i)
                    mas[i] += dp[son][1].first;
                else
                    mas[i] += dp[son][0].first;
            }
            
            int mn1 = 1;
            for(int i = 1; i <= MAX_C; ++i)
            if (mas[i] < mas[mn1])
                mn1 = i;
            
            dp[v][0] = make_pair(mas[mn1], mn1);
            int mn2 = 1; if (mn1 == 1) mn2 = 2;
            for(int i = 1; i <= MAX_C; ++i)
            if (i != mn1)
                if (mas[i] < mas[mn2])
                    mn2 = i;
            
            dp[v][1] = make_pair(mas[mn2], mn2);
        }
        else {
            int son = g[v].back();
            g[v].pop_back();
            p[son] = v;
            st.push(son);
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    freopen("input.txt","r",stdin);freopen("output.txt", "w", stdout);
    
    int t;
    cin >> t;
    for(int T = 1; T <= t; ++T) {
        int n, x;
        cin >> n;
        for(int i = 0; i <= n; ++i)
            g[i].clear(), g1[i].clear();
        for(int i = 1; i <= n; ++i) {
            cin >> x;
            g[x].push_back(i);
            g1[x].push_back(i);
        }
        
        cout << "Case #" << T << ": ";
        dfs(1);
        cout << dp[1][0].first << "\n";
    }
    
    return 0;
}
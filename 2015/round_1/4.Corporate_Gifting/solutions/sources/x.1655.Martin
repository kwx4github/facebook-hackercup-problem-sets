#include <iostream>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <numeric>

using namespace std ;

#define all(n) n.begin(), n.end()
#define forsn(i, s, n) for (int i = s ; i < n ; i++)
#define forn(i, n) forsn(i, 0, n)
#define fore(i, n) forn(i, n.size())
#define LOG cerr << "[" << __LINE__ << "] "

typedef pair <int, int> pii ;
#define y first
#define x second

int first(const vector <int> &v)
{
	if (v.empty() || v[0] != 1) return 1 ;
	forn(i, v.size() - 1)
	{
		if (v[i + 1] - v[i] > 1)
			return v[i] + 1 ;
	}

	return v.back() + 1 ;
}

int solve(const vector <int> &g)
{
	vector <int> f(g.size()) ;
	vector <int> c(g.size(), 0) ;
	vector <vector <int>> h(g.size()) ;
	forsn(i, 1, g.size()) h[g[i]].push_back(i) ;


	queue <int> q ;
	fore(i, h)
	{
		c[i] = h[i].size() ;
		if (c[i] == 0)
			q.push(i) ;
	}

	while (!q.empty())
	{
		int a = q.front() ; q.pop() ;

		vector <int> v(h[a].size()) ;
		fore(i, h[a]) v[i] = f[h[a][i]] ;
		sort(all(v)) ;

		f[a] = first(v) ;

		if (a != 0 && --c[g[a]] == 0)
			q.push(g[a]) ;
	}

	return accumulate(all(f), 0) ;
}

int main()
{
	int t ; cin >> t ;
	forn(z, t)
	{
		int n ; cin >> n ;

		vector <int> g(n) ;
		forn(i, n)
		{
			cin >> g[i] ;
			g[i]-- ;
		}

		printf("Case #%d: %d\n", z + 1, solve(g)) ;
	}

	return 0 ;
}


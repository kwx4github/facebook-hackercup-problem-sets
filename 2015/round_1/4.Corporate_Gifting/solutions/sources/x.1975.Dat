#include <bits/stdc++.h>
#include <sys/resource.h>
using namespace std;

const int maxN = 200000 + 10, maxG = 10;

#define pb push_back
#define FORE(it,c) for(__typeof(c.begin())it=c.begin();it!=c.end();it++)

vector<int> a[maxN];
int n;
int f[maxN][maxG], g[maxN][maxG];
int d[maxG+1];

void visit(int u){
    for (int i = 0; i < maxG; i++) f[u][i] = i+1;
    FORE (it, a[u]){
        visit(*it);
        for (int i = 0; i < maxG; i++)
            f[u][i] += g[*it][i];
    }
    int dd = d[maxG] = 4*maxN;
    for (int i = maxG-1; i >= 0; i--) d[i] = min(d[i+1], f[u][i]);
    for (int i = 0; i < maxG; i++){
        g[u][i] = min(dd, d[i+1]);
        dd = min(dd, f[u][i]);
    }
    //printf("F[%d,0] = %d, %d\n", u, f[u][0], g[u][0]);
}

void solve(){
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) a[i].clear();
    int p;
    for (int i = 1; i <= n; i++){
        scanf("%d", &p);
        if (p > 0) a[p].pb(i);
    }
    visit(1);
    printf("%d\n", min(g[1][0], f[1][0]));
}

int main(){
    const rlim_t kStackSize = 560 * 1024 * 1024;   // min stack size = 16 MB
    struct rlimit rl;
    int result;

    result = getrlimit(RLIMIT_STACK, &rl);
    if (result == 0)
    {
        if (rl.rlim_cur < kStackSize)
        {
            rl.rlim_cur = kStackSize;
            result = setrlimit(RLIMIT_STACK, &rl);
            if (result != 0)
            {
                fprintf(stderr, "setrlimit returned result = %d\n", result);
            }
        }
    }
    freopen("D.in", "r", stdin);
    freopen("D.out", "w", stdout);
    int t; scanf("%d", &t);
    for (int i = 1; i <= t; i++){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}


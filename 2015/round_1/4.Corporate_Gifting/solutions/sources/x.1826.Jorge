#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;

#define MAXN 200005
#define MOD 1000000007
#define ll long long

int n, s, parent[MAXN], degree[MAXN], gift[MAXN];
priority_queue<pair<int, int> > pqueue;

int main() {


	int t, T;

	scanf("%d", &t);
	T = t;
	while (t--) {

		s = 0;

		scanf("%d", &n);
		for (int i = 1; i <= n; ++i) {
			scanf("%d", &parent[i]);

			degree[parent[i]] += 1;
			gift[i] = 1;
		}

		//process 0 degree nodes in ascendent gift order.
		for (int i = 1; i <= n; ++i) {
			if (degree[i] == 0) {
				s += gift[i];

				degree[parent[i]] -= 1;
				if (gift[parent[i]] == gift[i])
					gift[parent[i]] += 1;

				if (degree[parent[i]] == 0) {
					pqueue.push(make_pair(gift[parent[i]], parent[i]));
				}
			}
		}
		pair<int, int> v;
		while (!pqueue.empty()) {
			v = pqueue.top();
			pqueue.pop();
			int i = v.second;
			//i is a 0 degree node and can buy the lowest/cheapest gift among all 0 degrees nodes.

			s += gift[i];

			degree[parent[i]] -= 1;
			if (gift[parent[i]] == gift[i]) {
				gift[parent[i]] += 1;
			}

			if (degree[parent[i]] == 0) {
				pqueue.push(make_pair(gift[parent[i]], parent[i]));
			}
		}

		printf("Case #%d: %d\n", T - t, s);
	}

	return 0;
}

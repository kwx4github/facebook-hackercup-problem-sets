#include <array>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <functional>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

#define REP(i, n) for(int i = 0; i < (int)(n); ++ i)
#define FOR(i, b, e) for(auto i = b; i < e; ++ i)
#define all(x) (x).begin(), (x).end()

int n;
vector<int> parent;
vector<vector<int>> children;

long long cache[200000][6];
long long go(int u, int color) {
	long long &ret = cache[u][color];
	if(ret != -1) return ret;

	ret = color;
	for(int ch : children[u])
	{
		long long best = 1LL << 50;
		for(int j = 1; j <= 5; ++ j) if(j != color) {
			best = min(best, go(ch, j));
		}
		ret += best;
	}

	return ret;
}

long long solve() {
	memset(cache, -1, sizeof cache);

	long long ans = 1LL << 50;
	for(int k = 1; k <= 5; ++ k) {
		ans = min(ans, go(0, k));
	}
	return ans;
}

int main() {
	int T;
	int kase = 0;
	cin >> T;

	while(T-- > 0) {
		cin >> n;
		parent.assign(n, 0);
		children.assign(n, vector<int>());

		for(int i = 0; i < n; ++ i) {
			cin >> parent[i];
			parent[i] --;
		}
		for(int i = 0; i < n; ++ i) {
			int p = parent[i];
			if(p < 0) continue;
			children[p].push_back(i);
		}
		printf("Case #%d: %lld\n", ++kase, solve());
	}
	return 0;
}


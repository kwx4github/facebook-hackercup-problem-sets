
#include <bits/stdc++.h>

#define REP(i, a) for( int i = 0; i < a; i++ )
#define RFOR(i,x,y) for(int i = x; i>= y; i--)
#define FOR(i,x,y) for (int i = x; i < y; i++)
#define ITFOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define VE vector <int>
#define mset(A,x) memset(A, x, sizeof A)
#define PB push_back
#define ones(x) __builtin_popcount(x)
#define cua(x) (x)*(x)
#define debug(x) cout <<#x << " = " << x << endl
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
#define LSOne(S) (S&(-S))

using namespace std;

#define ll long long
#define lli long long int
#define PI acos(-1.0)
#define ii pair<int,int>
#define inf_ll (((1LL<<62)-1)<<1)+1
#define inf_i (1<<30)-1

int num;
vector<int> ady_list[200005];
int degrees[200005];

void reset(int tam)
{
    REP(i,tam)
        ady_list[i].clear();
}

int BFS2(int c1,int c2,int tam)
{
    int odd=0,even=0;
    queue<ii> q2;
    bool vis[tam+5];
    mset(vis,false);
    q2.push(ii(c1,0));
    vis[c1]=true;
    if(c2!=-1)
        q2.push(ii(c2,0)),vis[c2]=true;;
    while(!q2.empty())
    {
        int u=q2.front().first,lvl=q2.front().second;
        q2.pop();
        if(lvl>0)
        {
            if(lvl&1)
                odd++;
            else
                even++;
        }

        REP(i,ady_list[u].size())
        {
            if(!vis[ady_list[u][i]])
            {
                vis[ady_list[u][i]]=true;
                q2.push(ii(ady_list[u][i],lvl+1));
            }
        }
    }
    if(c2!=-1)// 2 cetners
    {
        if(even>=odd)//sumar +4
            return even+2*odd+4;
        else //sumar+5
            return odd+2*even+5;
    }
    else
    {
        if(even>=odd)//sumar +1
            return even+2*odd+1;
        else //sumar+2
            return odd+2*even+2;
    }
}
int BFS(vector<int> start,int n)
{
    queue<int> q;
    REP(i,start.size())
        q.push(start[i]);
    int center1=-1,center2=-1;
    while(!q.empty())
    {
        if(q.size()==2 && num==2)
        {
            center1=q.front();q.pop();
            center2=q.front();q.pop();
            break;
        }

        int u=q.front();q.pop();
        //cout<<"->"<<u<<" "<<degrees[u]<<endl;
        if(degrees[u]<=0)
            center1=u;
        REP(i,ady_list[u].size())
        {
            degrees[u]--;
            degrees[ady_list[u][i]]--;
            if(degrees[u]==0)
                num--;
            if(degrees[ady_list[u][i]]==1)
            {
                //cout<<u<<"->"<<ady_list[u][i]<<"  d: "<<degrees[u]<<" "<<degrees[ady_list[u][i]]<<endl;
                q.push(ady_list[u][i]);
            }
        }
    }
    //cout<<center1<<" + "<<center2<<endl;
    int r1=inf_i,r2=inf_i,r3=inf_i;
    if(center2==-1)
    {
        r1=BFS2(center1,center2,n);
    }
    else
    {
        r1=BFS2(center1,-1,n);
        r2=BFS2(center2,-1,n);
        r3=BFS2(center1,center2,n);
    }
    //cout<<r1<<" "<<r2<<" "<<r3<<endl;
    return min(r1,min(r2,r3));
}


int main(){
/*
   freopen("input.txt", "r", stdin);
   freopen("out.txt", "w", stdout);
*/
    int test,n,x;
    scanf("%d",&test);
    REP(t,test)
    {
        mset(degrees,0);
        scanf("%d",&n);
        num=n;
        REP(i,n)
        {
            scanf("%d",&x);
            if(x!=0)
                ady_list[x].PB(i+1),ady_list[i+1].PB(x),degrees[i+1]++,degrees[x]++;
        }
        vector<int>start;
        FOR(i,1,n+1)
            if(degrees[i]==1)
                start.PB(i);
        printf("Case #%d: %d\n",t+1,BFS(start,n));
        reset(n+2);
    }
/*
    fclose(stdin);
    fclose(stdout);
*/

    return 0;
}


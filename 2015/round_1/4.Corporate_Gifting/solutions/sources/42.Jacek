#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void GEN(int a, int b, int c, int r, int k, int x[]) {
	x[0] = a;
	FOR(i,1,k) x[i] = (LL(x[i - 1]) * b + c) % r;
}

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}




int n, f[200200];
VI chi[200200];
int problem[200200];
LL best[200200], second[200200];

void calc(int v) {
	int k = SIZE(chi[v]);
	map<int,LL> m;
	LL s = 0;
	REP(i,k) {
		int w = chi[v][i];
		s += best[w];
		if (problem[w] >= 0)
			m[problem[w]] += second[w] - best[w];
	}
	k += 2;
	VLL res(k);
	REP(i,k) {
		map<int,LL>::const_iterator it = m.find(i);
		res[i] = s + i + 1;
		if (it != m.end())
			res[i] += it->SD;
	}
	int c = 0;
	LL x = -1;
	int p = -1;
	REP(i,k) {
		if (x == -1 || res[i] < x) {
			x = res[i];
			c = 1;
			p = i;
		} else if (res[i] == x)
			++c;
	}
	best[v] = x;
	if (c == 1) {
		best[v] = x;
		LL y = 1000000000000LL;
		REP(i,k) if (res[i] != x) y = min(y, res[i]);
		second[v] = y;
		problem[v] = p;
	} else {
		second[v] = x;
		problem[v] = -1;
	}
}

stack<PII> st;

void go() {
	while (!st.empty()) {
		PII p = st.top();
		st.pop();
		if (p.SD >= SIZE(chi[p.FT])) {
			calc(p.FT);
			continue;
		}
		st.push(MP(p.FT, p.SD + 1));
		st.push(MP(chi[p.FT][p.SD], 0));
	}
}

void oneCase() {
	scanf("%d", &n);
	REP(i,n) {
		scanf("%d", &f[i]);
		--f[i];
		chi[i].clear();
	}
	FOR(i,1,n) chi[f[i]].PB(i);
	st.push(MP(0,0));
	go();
	printf("%lld\n", best[0]);
}

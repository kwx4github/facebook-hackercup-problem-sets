
// default code for competitive programming
// c2251393 ver 3.141 {{{

// Includes
#include <bits/stdc++.h>

// Defines
#define NAME(x) #x
#define SZ(c) (int)(c).size()
#define ALL(c) (c).begin(), (c).end()
#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define REP(i, s, e) for(int i = (s); i <= (e); i++)
#define REPD(i, s, e) for(int i = (s); i >= (e); i--)
#define DEBUG 1
#define fst first
#define snd second
 
using namespace std;

// Typedefs
typedef double real;
typedef long long ll;
typedef pair<ll, int> pli;
typedef tuple<ll, int> tli;
typedef pair<int, int> pii;
typedef tuple<int, int> tii;
typedef unsigned long long ull;

// Some common const.
const double EPS = -1e8;
const double Pi = acos(-1);
 
// Equal for double
bool inline equ(double a, double b)
{return fabs(a - b) < EPS;}

// }}}
// start ~~QAQ~~


const int MAXN = 200010;
const int MX   = 55;

int n, mom[MAXN];
vector<int> ch[MAXN];

int dp[MAXN][MX];
tii dp2[MAXN][2];

void dfs(int u)
{
  fill(dp[u], dp[u]+MX, 0);
  REP(i, 1, MX-1) dp[u][i] = i;
  if(SZ(ch[u]) == 0)
  {
    dp2[u][0] = tii(1, 1);
    dp2[u][1] = tii(2, 2);
    return ;
  }
  for(auto v:ch[u])
  {
    dfs(v);
    REP(i, 1, MX-1)
    {
      if(i == get<0>(dp2[v][0]))
        dp[u][i] += get<1>(dp2[v][1]);
      else
        dp[u][i] += get<1>(dp2[v][0]);
    }
  }
  int c1 = MAXN, v1 = MAXN*2, c2 = MAXN, v2 = MAXN*2;
  REP(i, 1, MX-1)
  {
    if(dp[u][i] <= v1)
    {
      c2 = c1;
      v2 = v1;
      c1 = i;
      v1 = dp[u][i];
    }
    else if(dp[u][i] <= v2)
    {
      c2 = i;
      v2 = dp[u][i];
    }
  }
  dp2[u][0] = tii(c1, v1);
  dp2[u][1] = tii(c2, v2);
}

int main()
{
  int tc;scanf("%d", &tc);
  REP(_, 1, tc)
  {printf("Case #%d: ", _);
    scanf("%d", &n);
    REP(i, 1, n) ch[i].clear();
    REP(i, 1, n)
    {
      scanf("%d", mom+i);
      if(mom[i]) ch[mom[i]].push_back(i);
    }
    dfs(1);
    int ans = MAXN+MAXN;
    REP(i, 1, MX-1) ans = min(ans, dp[1][i]);
    printf("%d\n", ans);
  }
}

#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

const int N = 234567;
const int INF = 1e9;

int dp[N][3];
std::vector<int> adj[N];

void dfs(int u, int p) {    
    for (int i = 0; i < 3; ++i) {
        dp[u][i] = i + 1;
    }
    for (auto v : adj[u])
        if (v != p) {
            dfs(v, u);
            for (int i = 0; i < 3; ++i) {
                int a = INF;
                for (int j = 0; j < 3; ++j)
                    if (i != j)
                        a = std::min(a, dp[v][j]);
                dp[u][i] += a;       
            }
        }
}

int
main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tt;
    std::cin >> tt;
    for (int tn = 1; tn <= tt; ++tn) {
        memset(dp, 0, sizeof(dp));
        int n;
        std::cin >> n;
        for (int i = 1; i <= n; ++i) {
            adj[i].clear();
        }
        for (int i = 1; i <= n; ++i) {
            int p;
            std::cin >> p;
            adj[p].push_back(i);
        }
        dfs(1, 0);
        std::cerr << "dp = " << dp[1][0] << ' ' << dp[1][1] << ' ' << dp[1][2] << '\n';
        std::cout << "Case #" << tn << ": " << std::min(dp[1][0], std::min(dp[1][1], dp[1][2])) << '\n';
    }
}

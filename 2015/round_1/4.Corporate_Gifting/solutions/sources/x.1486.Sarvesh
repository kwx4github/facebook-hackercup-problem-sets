# include <bits/stdc++.h>
using namespace std;
# define llu long long int
# define mod 1000000007
//int level[200007][2],maxlevel,n;

struct st
{
    int flag;
    int cost;
    int parent;
    int level;
    struct pt* last;
    struct pt* next;
}node[200005];

struct pt
{
    int index;
    pt *next;
};

void bfs()
{
    queue <int> q;
    stack<int>q2;
//    node[1].level=0;
//    level[0][0]++;
    q.push(1);
    while(!q.empty())
    {
    int i=q.front();
    q.pop();
    q2.push(i);
    node[i].flag=1;
    pt* ptr=node[i].next;
//    if(ptr!=NULL)maxlevel=max(maxlevel,node[i].level+1);
    if(ptr==NULL)node[i].cost=1;

    while(ptr!=NULL)
    {
        if(node[ptr->index].flag==0)
            {
                q.push(ptr->index);
//                node[ptr->index].level=node[i].level+1;level[node[ptr->index].level][0]++;
            }
        ptr=ptr->next;
    }
    }

    int par,chd,best;
    while(!q2.empty())
    {
        chd=q2.top();q2.pop();
        par=node[chd].parent;
        best=1;
        if(node[chd].cost==best)best++;
        while(!q2.empty() && node[q2.top()].parent==par)
        {
            chd=q2.top();
            q2.pop();
            if(node[chd].cost==best)best++;
        }
        node[par].cost=best;
    }
}


main()
{
    int t,i,j,a,b,nodes,p;
    llu ans;
    char c;
    FILE *in=fopen("C:/Users/SARVESH/Desktop/in.txt","r");
    FILE *out=fopen("C:/Users/SARVESH/Desktop/out.txt","w");
    fscanf(in,"%d",&t);
//    cin>>t;
    for(int q=1;q<=t;q++)
    {
//        cin>>nodes;
//cout<<q<<endl;
        fscanf(in,"%d",&nodes);
        for(i=0;i<=nodes;i++){node[i].flag=0;node[i].last=NULL;node[i].next=NULL;}
        for(i=1;i<=nodes;i++)
        {
//            cin>>p;
            fscanf(in,"%d",&p);
            node[i].parent=p;
            struct pt* q1=new pt;
            q1->index=i;q1->next=NULL;
            if(node[p].last==NULL){node[p].next=q1;node[p].last=q1;}
            else {(node[p].last)->next=q1;node[p].last=q1;}
        }
//        cout<<"taken"<<endl;
//        maxlevel=0;
//        for(i=0;i<=nodes+1;i++){level[i][0]=0;level[i][1]=i;}
        bfs();
        //ans=dfs(node,1,0);
        ans=0;
        for(i=1;i<=nodes;i++){ans+=node[i].cost;}
//        cout<<ans<<endl;
        fprintf(out,"Case #%d: %lld\n",q,ans);
    }
}

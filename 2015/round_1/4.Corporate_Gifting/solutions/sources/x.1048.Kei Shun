import java.util.*;

public class D {
public static void main(String [] args) {
	Scanner scanner = new Scanner(System.in);
	int nCase = scanner.nextInt();
	
	for (int nc = 1; nc <= nCase; nc++) {
		int N = scanner.nextInt();
		int[] parent = new int[N];
		int[] nChild = new int[N];
		DNode[] nodes = new DNode[N];
		LinkedList<DNode> list = new LinkedList<DNode>();
		
		parent[0] = scanner.nextInt();
		for (int i = 1; i < N; i++) {
			parent[i] = scanner.nextInt()-1;
			nChild[parent[i]]++;
		}
		
		for (int i = 0; i < N; i++)
			nodes[i] = new DNode(i, nChild[i]);

		for (int i = 1; i < N; i++)
			nodes[parent[i]].children[nodes[parent[i]].childIndex++] = nodes[i];

		for (int i = 0; i < N; i++)
			if (nChild[i] == 0)
				list.add(nodes[i]);

		while (list.size() > 0) {
			DNode thisNode = list.remove();
			boolean childChanged = true;			
			int bestIndex = 1;			
			while (bestIndex <= 2 || childChanged) {
				int sum = bestIndex;
				childChanged = false;
				for (int i = 0; i < thisNode.childIndex; i++)
					if (thisNode.children[i].bestIndex[0] == bestIndex) {
						childChanged = true;
						sum += thisNode.children[i].bestValue[1];
					} else {
						sum += thisNode.children[i].bestValue[0];
					}				
				
				if (bestIndex == 1) {
					thisNode.bestValue[0] = sum;
					thisNode.bestIndex[0] = bestIndex;
					thisNode.bestChildChanged[0] = childChanged;
				} else if (bestIndex == 2) {
					thisNode.bestValue[1] = sum;
					thisNode.bestIndex[1] = bestIndex;
					thisNode.bestChildChanged[1] = childChanged;
					if (compare(thisNode.bestValue[0], thisNode.bestChildChanged[0], thisNode.bestValue[1], thisNode.bestChildChanged[1])) {
						int temp = thisNode.bestValue[0];
						thisNode.bestValue[0] = thisNode.bestValue[1];
						thisNode.bestValue[1] = temp;
						temp = thisNode.bestIndex[0];
						thisNode.bestIndex[0] = thisNode.bestIndex[1];
						thisNode.bestIndex[1] = temp;
						boolean tempB = thisNode.bestChildChanged[0];
						thisNode.bestChildChanged[0] = thisNode.bestChildChanged[1];
						thisNode.bestChildChanged[1] = tempB;
					}
				} else {
					if (compare(thisNode.bestValue[0], thisNode.bestChildChanged[0], sum, childChanged)) {
						thisNode.bestValue[1] = thisNode.bestValue[0];
						thisNode.bestIndex[1] = thisNode.bestIndex[0];
						thisNode.bestChildChanged[1] = thisNode.bestChildChanged[0];
						thisNode.bestValue[0] = sum;
						thisNode.bestIndex[0] = bestIndex;
						thisNode.bestChildChanged[0] = childChanged;						
					} else if (compare(thisNode.bestValue[1], thisNode.bestChildChanged[1], sum, childChanged)) {
						thisNode.bestValue[1] = sum;
						thisNode.bestIndex[1] = bestIndex;
						thisNode.bestChildChanged[1] = childChanged;
					}					
				}					
				
				bestIndex++;
			}
			
			if (thisNode.nodeIndex != 0) {
				if (--nChild[parent[thisNode.nodeIndex]] == 0) {
					list.add(nodes[parent[thisNode.nodeIndex]]);
				}
			}
		}
		
		System.out.println("Case #" + nc + ": " + nodes[0].bestValue[0]);		
	}
}
public static boolean compare(int sum1, boolean changed1, int sum2, boolean changed2) {
	if (sum2 < sum1)
		return true;
	else if (sum2 == sum1) {
		if (changed1 && !changed2)
			return true;
	}
	
	return false;
}

}
class DNode {
int nodeIndex;
int childIndex = 0;
DNode[] children;
int[] bestValue;
int[] bestIndex;
boolean[] bestChildChanged;

public DNode (int index, int n) {
	nodeIndex = index;
	children = new DNode[n];
	bestValue = new int[2];
	bestIndex = new int[2];
	bestChildChanged = new boolean[2];
}
}
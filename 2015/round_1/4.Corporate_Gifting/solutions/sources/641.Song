# Test stack!

from sys import stdin

class Node:
    def __init__(self, idx):
        self.ch = []
        self.r = []
        self.idx = idx
    def debug(self, pre):
        ret = str(self.idx + 1) + str(self.r) + "\n"
        if len(self.ch) > 0:
            for c in self.ch:
                ret += pre + "  " + c.debug(pre + "  ")
        return ret
    def get(self, parent):
        ret = -1
        for i in range(len(self.r)):
            if i + 1 != parent:
                if ret == -1:
                    ret = self.r[i]
                else:
                    ret = min(self.r[i], ret)
        return ret

def calc(tree_root):
    if len(tree_root.ch) == 0:
        tree_root.r = [1, 2]
        return 1
    mc = 1
    for c in tree_root.ch:
        mc = max(mc, len(c.r) + 1)
    for cur in range(1, mc + 1):
        sum = cur
        for c in tree_root.ch:
            sum += c.get(cur)
        tree_root.r.append(sum)
    while len(tree_root.r) > 2 and tree_root.r[-1] > sorted(tree_root.r)[1]:
        tree_root.r.pop()

cnt = int(stdin.readline().strip())
for cs in range(1, cnt+1):
    nodes = []
    queue = []
    n = int(stdin.readline().strip())
    arr = map(int, stdin.readline().strip().split(' '))
    nodes = []
    for i in range(n):
        nodes.append(Node(i))
    root = nodes[0]
    for i in range(1, n):
        nodes[arr[i] - 1].ch.append(nodes[i])
    queue.append(0)
    idx = 0
    while idx < len(queue):
        cur = queue[idx]
        for c in nodes[cur].ch:
            queue.append(c.idx)
        idx += 1
    for idx in range(n):
        calc(nodes[queue[n - 1 - idx]])
    ans = min(root.r)
    # print root.debug('')
    print 'Case #' + str(cs) + ': ' + str(ans)


#include<cstdio>
#include<algorithm>
#include<vector>
#include<unordered_map>
#include<cstring>
#include<set>
using namespace std;
#define FOR(i,a,n) for(int i = (a); i <= (n); ++i)
#define FORD(i,a,n) for(int i = (a); i >= (n); --i)
#define REP(i,n) FOR(i,0,(n)-1)
#define RI(i,n) FOR(i,1,(n))
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
#ifdef LOK
#define debug printf
#else
#define debug if(0)printf
#endif
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 2e5 + 5;

int testy,n;
int ojc[nax], wyn[nax];
vector<int> v[nax];
vector<pii> pom;
unordered_map<int,int> mapa[nax];

void oblicz(int x) {
	int suma = 0;
	for (auto i: v[x]) { 
		oblicz(i);
		suma += wyn[i];
	}
	
	pom.clear();
	int rozne = 1;
	while (mapa[x].find(rozne) != mapa[x].end())
		++rozne;
	pom.pb(mp(suma+rozne,rozne));
	
	++rozne;
	while (mapa[x].find(rozne) != mapa[x].end())
		++rozne;
	pom.pb(mp(suma+rozne,rozne));
	
	for (auto i: mapa[x]) {
		pom.pb(mp(suma + i.nd + i.st, i.st));
	}
	
	sort(pom.begin(),pom.end());
	wyn[x] = pom[0].st;
	mapa[ojc[x]][pom[0].nd] += pom[1].st - pom[0].st;
}

int main() {
	scanf("%d",&testy);
	FOR(g,1,testy) {
		printf("Case #%d: ",g);
		scanf("%d",&n);
		FOR(i,1,n) {
			scanf("%d",&ojc[i]);
			v[ojc[i]].pb(i);
		}
		oblicz(1);
		
		//FOR(i,1,n) printf("%d: %d\n",i, wyn[i]);
		FOR(i,0,n) {
			v[i].clear();
			mapa[i].clear();
		}
		printf("%d\n",wyn[1]);
		fprintf(stderr,"%d\n",wyn[1]);
	}
	return 0;
}

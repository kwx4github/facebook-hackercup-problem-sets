#include <bits/stdc++.h>
#include <unordered_set>

using namespace std;
#define V vector
#define tD typedef
tD long long ll;
tD V<int> vi;
tD V<vi> vii;
tD V<ll> vll;
tD V<string> vs;
tD long double ld;
tD pair<int, int> pii;
#define mt make_tuple
#define fr(x,y) for(int x=0;x<(y); ++x)
#define fi(n) fr(i,n)
#define fj(n) fr(j,n)
#define fk(n) fr(k,n)
#define eb emplace_back
#define pb push_back
#define sz size()
#define DEBUG 0

struct Node {
  int parent;
  vector<int> children;
  int least_cost, least_value, second_least_cost;
};

int main() {
  int T; cin >> T;
  for (int qw = 1; qw <= T; qw++) {
    int n; cin >> n;
    vector<Node> people(n);
    fi (n) {
      int a; cin >> a;
      people[i].parent = a - 1;
      if (a) people[a - 1].children.pb(i);
    }
    stack<int> calc; calc.push(0);
    set<int> kidsdone;
    while (!calc.empty()) {
      int x = calc.top();
      if (kidsdone.count(x)) {
	calc.pop();
	Node& node = people[x];
	node.least_cost = INT_MAX - 1;
	node.least_value = -1;
	node.second_least_cost = INT_MAX;
	if (node.children.sz == 0) {
	  node.least_cost = 1;
	  node.second_least_cost = 2;
	  node.least_value = 1;
	  continue;
	}
	map<ll, ll> extra;
	ll sum = 0;
	for (int child_index : node.children) {
	  const Node& child = people[child_index];
	  extra[child.least_value] += child.second_least_cost - child.least_cost;
	  sum += child.least_cost;
	}
	int xx = extra.size() + 2;
	for (ll i = 1; i <= xx; i++) {
	  ll cost = sum + extra[i] + i;
	  if (cost < node.least_cost) {
	    node.second_least_cost = node.least_cost;
	    node.least_cost = cost;
	    node.least_value = i;
	  } else if (cost < node.second_least_cost) {
	    node.second_least_cost = cost;
	  }
	}
      } else {
	for (int c : people[x].children) {
	  calc.push(c);
	}
	kidsdone.insert(x);
      }
    }

    cout << "Case #" << qw << ": " << people[0].least_cost << endl;;
  }
}

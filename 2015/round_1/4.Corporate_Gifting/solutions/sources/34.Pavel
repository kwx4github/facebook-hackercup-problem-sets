
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Runtime.ExceptionServices;
using System.Threading;
using kp.Algo;

namespace HackerCup
{
	class Solution
	{
		private const bool UseMultiThreading = false;
		private const bool UseStandardIO = false;
		private const string InputFile = @"C:\Users\kp\Downloads\corporate_gifting.txt";
		private const string OutputFile = @"D:\docs\Dropbox\Olymp\Sources\_submit\HackerCup 2015 Round 1\D.cs" + ".output.txt";


		private int n;
		private int[] p;
		private long res;

		void ReadData()
		{
			n = NextInt();
			p = new int[n];
			for ( int i = 0; i < n; i++ )
			{
				p[i] = NextInt() - 1;
			}

			return;

			var rnd = new Random();
			n = 200000;
			p = new int[n];
			for ( int i = 0; i < n; i++ )
			{
				p[i] = 0;
			}
		}

		static void PreSolve()
		{

		}

		private int[] treeSize;
		private List<int>[] mates;
		private int[] mx;
		void Solve()
		{
			mates = new List<int>[n];
			for ( int i = 0; i < n; i++ )
			{
				mates[i] = new List<int>();
			}
			for ( int i = 1; i < n; i++ )
			{
				mates[p[i]].Add( i );
			}
			treeSize = new int[n];
			GetTreeSizes( 0 );

			mx = new int[n];
			CalcMx( 0 );

			dp = new Dictionary<long, long>();
			res = GetMin( 0, -1 );
		}

		private void CalcMx( int u )
		{
			if ( mates[u].Count == 0 )
			{
				mx[u] = 2;
				return;
			}
			int m = 0;
			foreach ( var v in mates[u] )
			{
				CalcMx( v );
				m = Math.Max( m, mx[v] );
			}
			mx[u] = m + 2;

			if ( mx[u] > mates[u].Count + 2 )
				mx[u] = mates[u].Count + 2;
		}

		private Dictionary<long, long> dp;

		private long GetMin( int u, int forbidden )
		{
			if ( mates[u].Count == 0 )
			{
				return forbidden == 1 ? 2 : 1;
			}

			if ( forbidden > mx[u] )
				forbidden = mx[u] + 1;

			long key = (long)u * 10000000 + forbidden;
			if ( dp.ContainsKey( key ) )
				return dp[key];

			long res = long.MaxValue;
			for ( int i = 1; i <= mx[u]; ++i )
			{
				if ( i != forbidden )
				{
					long cur = i;

					foreach ( var v in mates[u] )
					{
						cur += GetMin( v, i );
					}

					res = Math.Min( res, cur );
				}
			}

			return dp[key] = res;
		}

		private void GetTreeSizes( int u )
		{
			treeSize[u] = 1;
			foreach ( var v in mates[u] )
			{
				GetTreeSizes( v );
				treeSize[u] += treeSize[v];
			}
		}

		void WriteAnswer()
		{
			Out.WriteLine( res );
		}

		#region ...

		void run()
		{
			if ( UseStandardIO )
			{
				var inputFileName = Path.Combine( Path.GetDirectoryName( GetType().Assembly.Location ), "input.txt" );
				_inputStream = File.OpenText( inputFileName );
				_outputStream = Console.Out;
			}
			else
			{
				_inputStream = File.OpenText( InputFile );
				_outputStream = File.CreateText( OutputFile );
			}

			PreSolve();

			int testsCount = int.Parse( _inputStream.ReadLine() );
			var solvers = new Solution[testsCount];
			for ( int i = 0; i < testsCount; ++i )
			{
				solvers[i] = new Solution();
				solvers[i].ReadData();
			}

			int done = 0;
			if ( UseMultiThreading )
			{
				solvers.AsParallel().WithDegreeOfParallelism( Math.Min( Environment.ProcessorCount, 2 ) - 1 ).ForAll(
					solver => { solver.Solve(); Console.Title = ( ++done ).ToString() + " of " + testsCount; } );
			}
			else
			{
				for ( int i = 0; i < testsCount; ++i )
				{
					solvers[i].Solve();
					Console.Title = ( ++done ).ToString() + " of " + testsCount;
				}
			}
			for ( int i = 0; i < testsCount; ++i )
			{
				Out.Write( string.Format( "Case #{0}: ", i + 1 ) );
				solvers[i].WriteAnswer();
			}
			Out.Flush();
			if ( UseStandardIO )
			{
				Console.ReadLine();
			}
			else
			{
				Out.Close();
			}
		}

		static TextWriter Out { get { return _outputStream; } }

		private static TextReader _inputStream;
		private static TextWriter _outputStream;

		public BigInteger NextBigInteger()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return BigInteger.Parse( token );
		}

		public double NextDouble()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return double.Parse( token, CultureInfo.InvariantCulture );
		}

		public long NextLong()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return long.Parse( token );
		}

		public int NextInt()
		{
			var token = NextToken();
			if ( string.IsNullOrEmpty( token ) ) throw new ApplicationException( "Input data missing" );
			return int.Parse( token );
		}

		private static readonly Queue<string> Tokens = new Queue<string>();
		public string NextToken()
		{
			if ( Tokens.Count > 0 )
			{
				return Tokens.Dequeue();
			}
			while ( Tokens.Count == 0 )
			{
				var line = _inputStream.ReadLine();
				if ( line == null ) return null;
				foreach ( var token in line.Split( _whiteSpaces, StringSplitOptions.RemoveEmptyEntries ) )
				{
					Tokens.Enqueue( token );
				}
			}
			return Tokens.Count == 0 ? null : Tokens.Dequeue();
		}

		private readonly char[] _whiteSpaces = { ' ', '\r', '\n', '\t' };

		static void Main()
		{
			new Thread( new Solution().run, 64 * 1024 * 1024 ).Start();
		}

		#endregion
	}
}

namespace kp.Algo { }
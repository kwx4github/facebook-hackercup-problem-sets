/* Shubhang Verma */

import java.io.*;
import java.math.*;
import java.util.*;
public class Main {

    public static void main(String[] args) 
    {	
        InputStream inputstream = System.in;
        OutputStream outputstream = System.out;
        InputReader in = new InputReader(inputstream);
        OutputWriter out = new OutputWriter(outputstream);
        mysolver mysol = new mysolver();
        mysol.solve(in, out);
        out.close();
    }

}

class mysolver {
	long mod = 1000000007;
	long dp[];
	long dp2[];
	ArrayList<Integer>[] ar;
    void solve(InputReader in,OutputWriter out)
    {
    	PrintWriter pout = new PrintWriter(new BufferedOutputStream(System.out));	
    	int t = in.readInt();
    	
    	for(int I=1;I<=t;I++)
    	{
    		int n = in.readInt();
    		
    		dp = new long[n+1];
    		dp2 = new long[n+1];
    		
    		ar = new ArrayList[n+1];
    		for(int i=0;i<n+1;i++)
    			ar[i] = new ArrayList<Integer>();
    		for(int i=0;i<n;i++)
    		{
    			int v = in.readInt();
    			ar[v].add(i+1);
    		}
    		recur1(ar,1);
    		recur2(ar,1);
    		
    		int sum = 0;
    		int sum2 = 0;
    		for(int i=1;i<=n;i++)
    		{
    			sum += dp[i];
    			sum2 += dp2[i];
    		}
    		pout.println("Case #"+I+": "+Math.min(sum, sum2));
    	}
        pout.close();
    }
    
    public void recur2(ArrayList<Integer>[] ar,int idx)
    {
    	if(ar[idx].size()==0)
    	{
    		dp[idx] = 1;
    		dp2[idx] = 2;
    		return;
    	}
    	else
    	{
    		TreeSet<Long> ts = new TreeSet<Long>();
    		for(int i=0;i<ar[idx].size();i++)
    		{
    			recur2(ar,ar[idx].get(i));
    			ts.add(dp2[ar[idx].get(i)]);
    		}
    		Iterator<Long> it = ts.iterator();
    		int ct = 1;
    		while(it.hasNext())
    		{
    			if(ct != it.next())
    			{
    				dp2[idx] = ct;
    				return;
    			}
    			else
    				ct++;
    		}
    		dp2[idx] = ts.size() + 1;
    		return;
    	}
    }
    
    public void recur1(ArrayList<Integer>[] ar,int idx)
    {
    	if(ar[idx].size()==0)
    	{
    		dp[idx] = 1;
    		return;
    	}
    	else
    	{
    		TreeSet<Long> ts = new TreeSet<Long>();
    		for(int i=0;i<ar[idx].size();i++)
    		{
    			recur1(ar,ar[idx].get(i));
    			ts.add(dp[ar[idx].get(i)]);
    		}
    		Iterator<Long> it = ts.iterator();
    		int ct = 1;
    		while(it.hasNext())
    		{
    			if(ct != it.next())
    			{
    				dp[idx] = ct;
    				return;
    			}
    			else
    				ct++;
    		}
    		dp[idx] = ts.size() + 1;
    		return;
    	}
    }
}
class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;
 
    public InputReader(InputStream stream) {
        this.stream = stream;
    }
    
    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }
 
    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
 
    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return isWhitespace(c);
    }
 
    public static boolean isWhitespace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
 
    public String next() {
        return readString();
    }
 
    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }
}
 
class OutputWriter {
    private final PrintWriter writer;
 
    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }
 
    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }
 
    public void close() {
        writer.close();
    }
 
    public void printLine(int i) {
        writer.println(i);
    }
}
 
class IOUtils {
 
    public static void readIntArrays(InputReader in, int[]... arrays) {
        for (int i = 0; i < arrays[0].length; i++) {
            for (int j = 0; j < arrays.length; j++)
                arrays[j][i] = in.readInt();
        }
    }
 
    }

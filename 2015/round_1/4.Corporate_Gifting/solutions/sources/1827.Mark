#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <deque>
#include <iomanip> //setw

using namespace std;
#define MAX 200005
#define gN 15
int memo[MAX][gN];

int T=0;
int main(){
	cin>>T;
	for(int i=0;i<T;++i){
		vector<vector<int>> g(MAX, vector<int>());
		deque<int> q;
		int N, in;
		cin>>N;		
		for(int j=1;j<=N;++j){
			cin>>in;
			g[in].push_back(j);
			g[j].push_back(in);
		}

		//BFS
		vector<int> level;
		bool marked[MAX]={false};

		q.push_back(0);
		while(!q.empty()){
			int cur = q.front();
			q.pop_front();
				marked[cur]=true;

			level.push_back(cur); //save level order

			for(int nei: g[cur]){
				if(!marked[nei]){
					q.push_back(nei);
				}
			}
		}

		// so level will have level by level order now
		reverse(level.begin(), level.end());
		//copy(level.begin(), level.end(), ostream_iterator<int>(cout, " "));cout<<endl;cout<<endl;

		//DP
		memset(memo, 0, sizeof(memo));
		for(int em : level){

			vector< pair<int, int> > mv; // (if em choose g, its best value)
			for(int gift = 1; gift<=gN; ++gift){         // this employee 'em',  choose gift 'g'
				int v=gift;
				for(int child : g[em]){ // every child can't choose g
					v += memo[child][gift];
				}	
				mv.push_back(make_pair(gift, v));
			}

			//sort by best minimum value
			sort(mv.begin(), mv.end(), [](const pair<int, int> &left, const pair<int, int> &right){return left.second < right.second;});
			//for(auto x : mv) cout<<x.first<<" "<<x.second<<endl;
			//cout<<endl;


			//fill up this row
			pair<int, int> m1 = mv[0], m2=mv[1];
			for(int g = 1; g<=gN; ++g){
				if(m1.first == g)
					memo[em][g] = m2.second;
				else
					memo[em][g] = m1.second;	
			}		
		}

		//show
 		long long ans=MAX*MAX;
		for(int j=1;j<=gN;++j){
			ans = min(ans, (long long)memo[1][j]);
			//cout<<setw(3)<<memo[1][j]<<" ";
		}
		//cout<<endl;
		cout<<"Case #"<<i+1<<": "<<ans<<endl;
		

		/*
		//debug for memo array
		for(int i=0;i<level.size();++i){
			cout<<i<<"\t";
			for(int j=0;j<=gN;++j){
				cout<<setw(3)<<memo[i][j]<<" ";
			}
			cout<<endl;
		}
		cout<<endl;
		*/


/*
		//debug for graph input
		for(int j=0;j<=gN;++j){
			cout<<j<<": ";
			copy(g[j].begin(), g[j].end(), ostream_iterator<int>(cout, " "));
			cout<<endl;
		}
*/

	}
	return 0;
}

#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

vector<VI> chld;

struct sol {
    int std;
    int when;
    int xtra;
};

sol go(int v) {
    VI xtra;
    xtra.PB(0);
    int std = 0;

    FORE(it, chld[v]) {
        sol r = go(*it);
        std += r.std;
        while(SZ(xtra) <= r.when) xtra.PB(0);
        xtra[r.when] += r.xtra;
    }
    xtra.PB(0);
    xtra.PB(0);
    REP(i, SZ(xtra)) xtra[i] += i+1;
    int fi=-1,se=-1;
    REP(i, SZ(xtra)) {
        if (se == -1 || xtra[se] > xtra[i]) {
            se = i;
            if (fi == -1 || xtra[fi] > xtra[se]) swap(fi,se);
        }
    }
    sol res;
    res.std = std+xtra[fi];
    res.when = fi;
    res.xtra = xtra[se]-xtra[fi];
    return res;
}

void solve(int tc) {
    cout << "Case #" << tc << ": ";
    int n;
    cin >> n;
    chld = vector<VI>(n);
    REP(i,n) {
        int p;
        cin >> p;
        --p;
        if (p >= 0) chld[p].PB(i);
    }
    sol res = go(0);
    cout << res.std << endl;
}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);
    
    return 0;
}


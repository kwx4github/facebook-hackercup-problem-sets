
#include<bits/stdc++.h>
#define MAXN 200005
#define MAXC 25
#define oo (1<<30)
#define pb(x) push_back(x)
#define cout2(x, y) cout << x << " " << y << endl

using namespace std;

int last[2 * MAXN], next[2 * MAXN], to[2 * MAXN], E;

void addEdge(int u, int v){

		 next[E] = last[u], to[E] = v, last[u] = E++;
		 next[E] = last[v], to[E] = u, last[v] = E++;
}

int memo[MAXN][MAXC];
int pila[MAXN], PD[MAXN], top = 0;
bool vis[MAXN];

void BFS(int source){
		 
		 PD[source] = source;

		 vis[source] = true;
		 pila[top++] = source;

		 queue<int>Q;
		 Q.push(source);
		 
		 int u, v;
		 while(!Q.empty()){

		 			u = Q.front();
					Q.pop();

					for(int e = last[u]; e != -1; e = next[e]){

									v = to[e];
									if(!vis[v]){
											
											pila[top++] = v;
											Q.push(v);

											PD[v] = u;
											vis[v] = true;
									}
									
					}
		 }
}

int solve(int u, int pd, int color){

		int &ret = memo[u][color];
    if(ret != -1) return  ret;

    int ans = color;

    for(int e = last[u]; e != -1; e = next[e]){
		
				int v = to[e];
        int add = oo;
        
        if(v == pd) continue;

        for(int j = 1; j < MAXC; j++)if(color != j)add = min(add, solve(v, u, j));
        ans += add;

    }

    return ret = ans;
}

void init(int n){
		 
		 E = 0, top = 0;
		 for(int i = 0; i <= n; i++){
		 
		 			last[i] = -1; vis[i] = false;
					for(int j = 0; j < MAXC; j++)memo[i][j] = -1;
		 }
}

int main(){

	int tc = 0, caso = 1;
	scanf("%d", &tc);
	
	while(tc--){

			int n, u;
			scanf("%d", &n);

			init(n);
			
			for(int i = 1; i <= n; i++){
			
							scanf("%d", &u);
							if(i == 1)continue;
							addEdge(i, u);
			}

			int ans = oo;
			BFS(1);

			reverse(pila, pila + top);

			for(int i = 0; i < top; i++){
						
						int u = pila[i];
						for(int j = 1; j < MAXC; j++){
						
									solve(u, PD[u], j);
									if(u == 1)ans = min(ans, solve(u, PD[u], j));
						}
			}
							
			printf("Case #%d: %d\n", caso++, ans);

	}

}




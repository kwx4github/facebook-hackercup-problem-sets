package algo.Practice;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
public class CorporateGifting {

	private static class Node {
		HashSet<Integer> minVal;
		int index;
		int minValue;
		public Node(int in) {
			this.index = in;
			minVal = new HashSet<Integer>();
			minValue = -1;
		}

		@Override
		public boolean equals(Object that) {
			Node t = (Node)that;
			return this.index == t.index; 
		}
		@Override 
		public int hashCode() {
			return this.index;
		}

		public int getMin() {
			if (minValue != -1)
				return minValue;
			int ret = 1;
			while (true) {
				if (!minVal.contains(ret)) 
					break;
				ret++;
			}		
			minValue = ret;
			return ret;
		}

		public void setIndex(int val) {
			minVal.add(val);
		}

		@Override
		public String toString() {
			return "Index  :" + index + " MinValue " + minValue + " allValue: " + minVal.toString();  
		}
	}

	public static int totalMoney(int[] ar) {
		int size = ar.length;
		HashMap<Integer, Node> hm = new HashMap<Integer, Node>();
		Node manager = new Node(0);
		hm.put(0, manager);
		for (int i = size - 1; i > 0; i--) {
			manager = new Node(ar[i] - 1);
			Node junior = new Node(i);
			if (!hm.containsKey(ar[i] - 1)) {
				hm.put(ar[i] - 1, manager);
			}
			else {
				manager = hm.get(ar[i] - 1);
			}
			if (!hm.containsKey(i)) {
				hm.put(i, junior);
				junior.setIndex(0);
			}
			else {
				junior = hm.get(i);
			}
			manager.setIndex(junior.getMin());
		}
		int totalCost = 0;
		for (int in : hm.keySet()) {
			Node t = hm.get(in);
			totalCost += t.getMin();
		}
		return totalCost;
	}

	public static void main(String[] args) {
		File fl = new File("/home/inspire/Downloads/corporate_gifting.txt");
		try {
			Scanner sc = new Scanner(fl);
			//			Scanner sc = new Scanner(System.in);
			int T = sc.nextInt();
			int i = 0;
			int[] res = new int[T];
			while(i < T) {
				int N = sc.nextInt();
				int[] ar = new int[N];
				for (int j = 0; j < N; j++)
					ar[j] = sc.nextInt();
				res[i] = totalMoney(ar);
				i++;
			}

			for (i = 0; i < T; i++){ 
				System.out.println("Case #" + (i + 1) + ": " + res[i]);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

#pragma comment(linker, "/STACK:512777216")

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <sstream>

#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>

#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <string.h>

#include <memory.h>
#include <cassert>
#include <time.h>

using namespace std;

#define forn(i,n) for (int i = 0; i < (int)(n); i++)
#define fornd(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)(a); i <= (int)(b); i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)

#define _(a, val) memset (a, val, sizeof (a))
#define sz(a) (int)((a).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef long long lint;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;

const lint LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

#ifdef MY_DEBUG
#define dbgx( x ) { cerr << #x << " = " << x << endl; }
#define dbg( ... ) { fprintf(stderr, __VA_ARGS__); fflush(stderr); }
#else
#define dbgx( x ) {  } 
#define dbg( ... ) {  } 
#endif

void prepare (string s)
{
#ifdef MY_DEBUG
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
#else
	if (s.length() != 0)
	{
		freopen ((s + ".in").c_str(), "r", stdin);
		freopen ((s + ".out").c_str(), "w", stdout);
	}
#endif
}

const int NMAX = 4155;
const int MMAX = 4155;

int n;
int max_num;

int dp[NMAX][MMAX][2];
int dp2[NMAX][MMAX][2];

const int NMAX2 = 210155;
const int MMAX2 = 55;
int d[NMAX2][MMAX2][2];
int d2[NMAX2][MMAX2][2];
vector<int> g[NMAX2];

void clear()
{
	forn(i, NMAX2)
		g[i].clear();
}

void read()
{
	clear();
	scanf("%d", &n);
	forn(i, n)
	{
		int p;
		scanf("%d", &p);
		p --;
		if (p >= 0)
			g[p].pb( i );
	}
}

void dfs(int v)
{
	forn(i, sz(g[v]))
	{
		int u = g[v][i];
		dfs( u );
	}

	forn(i, max_num)
	{
		dp[v][i][1] = i;
		dp2[v][i][1] = i;
		forn(j, sz(g[v]))
		{
			int u = g[v][j];
			dp[v][i][1] += dp[u][i][0];
			dp2[v][i][1] = max(dp2[v][i][1], dp2[u][i][0]);
		}
	}

	forn(i, max_num)
	{
		dp[v][i][0] = INF;
		dp2[v][i][0] = INF;
		forn(j, max_num) if (i != j)
		{
			if (dp[v][i][0] > dp[v][j][1])
			{
				dp[v][i][0] = dp[v][j][1];
				dp2[v][i][0] = dp2[v][j][1];
			}
			else
				if (dp[v][i][0] == dp[v][j][1] && dp2[v][i][0] > dp2[v][j][1])
					dp2[v][i][0] = dp2[v][j][1];
		}
	}
}

pii solve()
{
	max_num = n;
	dfs( 0 );
	int answer = INF;
	int answer2 = INF;
	forn(i, max_num)
	{
		if (answer > dp[0][i][1] || answer == dp[0][i][1] && answer2 > dp2[0][i][1])
		{
			answer = dp[0][i][1];
			answer2 = dp2[0][i][1];
		}
	}

	return mp(answer, answer2);
}

void dfs2(int v)
{
	forn(i, sz(g[v]))
	{
		int u = g[v][i];
		dfs2( u );
	}

	forn(i, max_num)
	{
		d[v][i][1] = i;
		d2[v][i][1] = i;
		forn(j, sz(g[v]))
		{
			int u = g[v][j];
			d[v][i][1] += d[u][i][0];
			d2[v][i][1] = max(d2[v][i][1], d2[u][i][0]);
		}
	}

	forn(i, max_num)
	{
		d[v][i][0] = INF;
		d2[v][i][0] = INF;
		forn(j, max_num) if (i != j)
		{
			if (d[v][i][0] > d[v][j][1])
			{
				d[v][i][0] = d[v][j][1];
				d2[v][i][0] = d2[v][j][1];
			}
			else
				if (d[v][i][0] == d[v][j][1] && d2[v][i][0] > d2[v][j][1])
					d2[v][i][0] = d2[v][j][1];
		}
	}
}

pii solve2()
{
	max_num = MMAX2 - 1;
	dfs2( 0 );
	int answer = INF;
	int answer2 = INF;
	forn(i, max_num)
	{
		if (answer > d[0][i][1] || answer == d[0][i][1] && answer2 > d2[0][i][1])
		{
			answer = d[0][i][1];
			answer2 = d2[0][i][1];
		}
	}

	return mp(answer, answer2);
}

int get_rand(int l, int r)
{
	if (l > r)
		return -1;
	return l + ((lint)rand()*rand()) % (r - l + 1);
}

void gen()
{
	clear();
	n = 200000;
	forn(i, n)
	{
		int p = get_rand(0, i - 1);
		if (p >= 0)
			g[p].pb( i );
	}
}

int main()
{
	prepare("");

	/*srand( 0xdead );
	
	int Time = 1;

	while( Time < 100 )
	{
		dbgx( Time ++ );
		gen();
		pii r = solve2();
		dbg("%d %d\n", r.first, r.second);
	}

	dbgx( clock() );

	return 0;*/

	int t;
	scanf("%d", &t);
	forn(i, t)
	{
		read();
		pii t = solve2();
		printf("Case #%d: %d\n", i + 1, t.first + n);
		dbg("Case #%d: %d\n", i + 1, t.second);
	}

	return 0;
}

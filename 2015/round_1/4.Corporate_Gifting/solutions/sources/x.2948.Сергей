#pragma warning (disable : 4996)
#pragma comment(linker, "/STACK:36777216")



#include <stdlib.h>
#include <iostream>
#include <vector>
#include <string>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <ios>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <queue>
#include <set>
#include <functional>
#include <cmath>
#include <sstream>
#include <map>
#include <memory.h>
#include <stdio.h>
#include <cassert>
#include <string.h>
#include <deque>

#define forn(i , n) for (int i = 0; i < n; ++i)
#define down(i, n) for (int i = n - 1; i >= 0; --i)


using namespace std;

typedef unsigned long long int u64;
typedef long long int i64;
typedef vector<int> vint;
typedef vector<i64> vi64;
typedef pair<int, int> pint;
typedef pair<i64, i64> pi64;

#define FILE_NAME "file"
#define CONTEST "seq"
#define M_PI 3.14159265358979323846

double sqr(double a)
{
	return a * a;
}

const i64 inf = 100000000000000000LL;

#define MOD 1000000007 


struct Node
{
	set<int> st;
	int p;
	int ch;
	int c[200];
	Node()
	{
		p = -1;
		ch = 0;
		forn(i, 200)
		{
			c[i] = 0;
		}
	}
};


int main()
{
	clock_t start = clock();
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout << fixed << setprecision(15);

#ifdef FILE_INPUT
	freopen(FILE_NAME ".in", "r", stdin);
//	freopen(FILE_NAME ".out", "w", stdout);
#endif


	int T;
	cin >> T;
	vector<int> q(200000);
	forn(t, T)
	{

		int n;
		scanf("%d", &n);
		vector<Node> arr(n);
		forn(i, n)
		{
			int p;
			scanf("%d", &p);
			--p;
			arr[i].p = p;
			if (p != -1)
				arr[p].ch++;
		}
		i64 ans = 0;

		int k = 0;

		forn(i, n)
		{
			if (arr[i].ch == 0)
			{
				q[k++] = i;
			}
		}
		while (k != 0)
		{
			auto c = arr[k];
			--k;
			int v = 0;
			forn(i, 200)
			{
				if (c.c[i] != 1000)
				{
					forn(j, 1000)
					{
						if (c.st.count(i * 1000 + j + 1) == 0)
						{
							v = i * 1000 + j + 1;
							break;
						}
					}
					break;
				}
			}
			if (c.p != -1)
			{
				auto & p = arr[c.p];
				p.ch--;
				if (p.ch == 0)
				{
					q[k++] = c.p;
				}
				if (p.st.count(v) == 0)
				{
					p.st.insert(v);
					p.c[v / 1000]++;
				}
			}
			ans += v;


		}


		cout << "Case #" << (t + 1) << ": " << ans << "\n";
	}

	return 0;
}

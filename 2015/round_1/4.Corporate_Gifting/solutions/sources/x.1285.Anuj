#include <stdio.h>
#include <string.h>
#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <algorithm>
#include <queue>

using namespace std;

typedef long long int LL;

vector <int> adj[200005];
int parent[200005], visited[200005];

int n;
LL dp[200005][4];

void bfs()
{
	queue <int> q;
	
	for (int i = 0; i < n; i++) {
		if (adj[i].size() == 0) q.push(i);
	}
	
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		
		for (int i = 1; i <= 3; i++) {
			LL ret = i;
			for (int v = 0; v < adj[u].size(); v++) {
				int nxt = adj[u][v];
				if (i == 1) ret = ret + min(dp[nxt][2], dp[nxt][3]);
				else if (i == 2) ret = ret + min(dp[nxt][1], dp[nxt][3]);
				else ret = ret + min(dp[nxt][1], dp[nxt][2]);
			}
			dp[u][i] = ret;
		}
		visited[parent[u]]++;
		if (visited[parent[u]] == adj[parent[u]].size()) q.push(parent[u]);
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	
	int t, cases = 0;
	LL ans;

	scanf("%d", &t);	
	while (t--) {
		ans = 0LL;
		memset(visited, 0, sizeof(visited));
		memset(dp, 0, sizeof(dp));
		
		for (int i = 0; i < 200005; i++) adj[i].clear();
		
		scanf("%d", &n);		
		for (int i = 0; i < n; i++) {
			scanf("%d", &parent[i]);
			if (i == 0) continue;
			parent[i]--;
			adj[parent[i]].push_back(i);
		}
		bfs();
		ans = min(dp[0][1], min(dp[0][2], dp[0][3]));
		
		printf("Case #%d: %lld\n", ++cases, ans);
	}
	return 0;
}


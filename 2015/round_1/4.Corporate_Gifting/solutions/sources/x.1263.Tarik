#include <stdio.h>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <algorithm>
#include <cmath>
#include <climits>
#include <cfloat>

using namespace std;

ifstream fin("corporate_gifting_example_input.txt");
ofstream fout("corporate_gifting_example_output.txt");

const int MAX_N = 200000;

vector<int> employees[MAX_N];

int minPrices[MAX_N];
int minTotalCosts[MAX_N];
int min2TotalCosts[MAX_N];

int main()
{
	int t;
	fin >> t;
	for (int tt = 1; tt <= t; tt++)
	{
		int n;
		fin >> n;
		int temp; fin >> temp;
		for (int i = 1; i < n; i++)
		{
			int manager;
			fin >> manager;
			manager--;
			employees[manager].push_back(i);
		}
		for (int manager = n - 1; manager >= 0; manager--)
		{
			int numEmployees = employees[manager].size();
			if (numEmployees == 0)
			{
				minPrices[manager] = 1;
				minTotalCosts[manager] = 1;
				min2TotalCosts[manager] = 2;
			}
			else
			{
				int minPrice = -1;
				int minCost = INT_MAX;
				int min2Cost = INT_MAX;
				for (int price = 1; price <= numEmployees + 1; price++)
				{
					int totalCost = price;
					for (int employee : employees[manager])
					{
						if (minPrices[employee] == price)
						{
							totalCost += min2TotalCosts[employee];
						}
						else
						{
							totalCost += minTotalCosts[employee];
						}
					}
					if (totalCost <= minCost)
					{
						min2Cost = minCost;
						minCost = totalCost;
						minPrice = price;
					}
					else if (totalCost < min2Cost)
					{
						min2Cost = totalCost;
					}
				}
				minPrices[manager] = minPrice;
				minTotalCosts[manager] = minCost;
				min2TotalCosts[manager] = min2Cost;
			}
		}

		fout << "Case #" << tt << ": " << minTotalCosts[0] << endl;

		for (int i = 0; i < n; i++)
		{
			employees[i].clear();
		}
	}

	return 0;
}
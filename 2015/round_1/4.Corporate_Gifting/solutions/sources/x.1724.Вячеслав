#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

//#pragma comment(linker, "/STACK:167177216")
#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 2e5 + 777;
const int MAG = 10;

vector<int> g[N];
int dp[N][MAG + 1];
int n;
int p[N];

inline bool read()
{
	forn(i, N)
	{
		forn(j, MAG + 1)
		{
			dp[i][j] = INF;
		}
	}

	forn(i, N)
	{
		g[i].clear();
		p[i] = -1;
	}

	if(scanf("%d", &n) != 1)
		return false;

	forn1(i, n)
	{
		assert(scanf("%d", &p[i]) == 1);
		if(i == 1)
			continue;
		g[p[i]].pb(i);
	}

	return true;
}

int calc(int v, int col)
{
	//cerr << v << ' ' << col << endl;
	if(dp[v][col] != INF)
		return dp[v][col];

	int res = col;
	forn(i, sz(g[v]))
	{
		int to = g[v][i];
		int cur = INF;
		forn1(ncol, MAG)
		{
			if(ncol != col)
			{
				cur = min(cur, calc(to, ncol));
			}
		}

		assert(cur != INF);
		res += cur;
	}

	assert(res < INF / 2);
	return dp[v][col] = res;
}

inline void solve()
{
	if(n == 1)
	{
		cout << 1 << endl;
		return;
	}

	int ans = INF;
	forn1(col, MAG)
	{
		ans = min(ans, calc(1, col));
	}

	//cerr << calc(100000, 1) << ' ' << calc(100000, 2) << endl;
	cout << ans << endl;
	return;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

	int T;
	cin >> T;
	//T = 100;
	//T = 1;

	forn(tt, T)
	{
		cerr << "Test #" << tt + 1 << " processing" << endl;
		int curT = clock();
		assert(read());
		//gen();
		cout << "Case #" << tt + 1 << ": ";
		solve();
		cerr << "Test #" << tt + 1 << " processed with TIME == " << clock() - curT << " ms" << endl;
	}

    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}
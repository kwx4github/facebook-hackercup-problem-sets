#include <cassert>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>

using namespace std;

struct state {
    long m1, m2, c1, c2;
};

const long MAX = 200000L * 200000L;

int main()
{
    int zzzzz;
    scanf("%d", &zzzzz);
    for (int zz = 0; zz < zzzzz; ++zz)
    {
        int n;
        scanf("%d", &n);
        vector<vector<int>> g(n);
        for (int i = 0; i < n; ++i) {
            int t;
            scanf("%d", &t);
            assert(i > 0 || t == 0);
            if (t > 0) g[t-1].push_back(i);
        }

        queue<int> q;
        stack<int> s;
        q.push(0);
        while (!q.empty()) {
            int e = q.front();
            q.pop();
            s.push(e);
            for (auto t : g[e]) q.push(t);
        }

        vector<state> ss(n, { MAX, MAX, MAX, MAX });

        while (!s.empty()) {
            int e = s.top();
            //printf("%d -> ", e+1);
            s.pop();

            bool conflict = true;
            for (int i = 1; i <= n; ++i) {
                int m = i;
                conflict = false;
                for (auto t : g[e]) {
                    if (ss[t].c1 == i) { m += ss[t].m2; conflict = true; }
                    else if (ss[t].c2 == i) { m += ss[t].m1; conflict = true; }
                    else m += min(ss[t].m1, ss[t].m2);
                }

                if (m < ss[e].m2) {
                    ss[e].m2 = m;
                    ss[e].c2 = i;
                }

                if (ss[e].m1 > ss[e].m2) {
                    swap(ss[e].m1, ss[e].m2);
                    swap(ss[e].c1, ss[e].c2);
                }

                if (!conflict && ss[e].c1 < MAX && ss[e].c2 < MAX) break;
            }
        }

        printf("Case #%d: %ld\n", (zz+1), min(ss[0].m1, ss[0].m2));
    }

    return 0;
}

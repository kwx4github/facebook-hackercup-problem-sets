#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <queue>
#include <map>
#include <string>
#include <stack>
#include <bitset>
#include <vector>

using namespace std;
int fa[200020];
vector<int> son[200020];
int dp[200020][20];
struct node {
    int x;
    int d;
    node() {}
    node(int a, int b) { x = a; d = b; }
};
struct node2 {
    int x;
    int d;
    bool operator < (const node2 &A) const {
        if(d == A.d) return son[x].size() < son[A.x].size();
        return d > A.d;
    }
}a[200020];
void bfs() {
    queue<node> qn;
    qn.push(node(1, 1));
    while(!qn.empty()) {
        node t = qn.front();
        qn.pop();
        a[t.x].x = t.x;
        a[t.x].d = t.d;
        node b = t;
        b.d++;
        for(int i = 0; i < son[t.x].size(); i++) {
            b.x = son[t.x][i];
            qn.push(b);
        }
    }
}
int main() {
    #ifdef LOCAL
    freopen("corporate_gifting2.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    int T, cas = 1;
    scanf("%d", &T);
    while(T--) {
        int n;
        scanf("%d", &n);
        memset(a, 0, sizeof a);
        for(int i = 1; i <= n; i++) son[i].clear();
        for(int i = 1; i <= n; i++) {
            int t;
            scanf("%d", &t);
            if(i > 1) {
                fa[i] = t;
                son[t].push_back(i);
            }
        }
        bfs();
        sort(a + 1, a + n + 1);
        memset(dp, 0x3f, sizeof dp);
        for(int i = 1; i <= n; i++) {
            //printf("%d ", a[i].x);
            if(son[a[i].x].size() == 0) {
                for(int j = 1; j <= 15; j++) {
                    dp[a[i].x][j] = min(dp[a[i].x][j], j);
                }
            }
            else {
                for(int j = 1; j <= 15; j++) { //父结点颜色 父结点编号a[i].x
                    int t = 0;
                    for(int k = 0; k < son[a[i].x].size(); k++) {
                        int minn = 0x3f3f3f3f;
                        for(int l = 1; l <= 15; l++) {
                            if(l == j) continue;
                            minn = min(minn, dp[son[a[i].x][k]][l]);
                        }
                        t += minn;
                    }
                    dp[a[i].x][j] = min(dp[a[i].x][j], t + j);
                }
            }
        }
        int ans = 0x3f3f3f3f;
        for(int i = 1; i <= 15; i++) {
            ans = min(ans, dp[a[n].x][i]);
//            printf("%d ", dp[a[n].x][i]);
        }
//        puts("");
        printf("Case #%d: %d\n", cas++, ans);
    }
    return 0;
}

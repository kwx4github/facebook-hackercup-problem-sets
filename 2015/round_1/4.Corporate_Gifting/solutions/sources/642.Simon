import java.util.*;
import java.io.*;

public class Gifts
{
	static Edge[] g;
	static int log;
	static int[][] dp;

	static int rek(final int i, final int dame)
	{
		if(dp[i]==null) return dame==1 ? 2 : 1;
		if(dp[i][dame-1]!=0) return dp[i][dame-1];

		int best = 1<<20;
		for(int k = 1; k<=log; k++)
		if(k!=dame)
		{
			int sum = k;
			for(Edge e = g[i]; e!=null; e=e.nxt) sum += rek(e.to, k);
			if(sum<best) best = sum;
		}

		return dp[i][dame-1] = best;
	}

	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{System.err.println(t);
			final int N = in.getInt();
			g = new Edge[N]; in.getInt();
			for(int i = 1; i<N; i++)
			{
				final int p = in.getInt()-1;
				g[p] = new Edge(i,g[p]);
			}

			dp = new int[N][];
			log = 1;
			for(int pow = 1; pow<N; pow<<=1) ++log;

			dp[0] = new int[log+1];
			for(int i = 1; i<N; i++) if(g[i]!=null) dp[i] = new int[log];

			out.println("Case #"+t+": "+rek(0,log+1)); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Edge
	{
		final int to; final Edge nxt;
		Edge(final int t, final Edge n)
		{
			to = t; nxt = n;
		}
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

/**

1337
1
0
7
0 1 2 3 4 5 6
5
0 1 1 1 2
13
0 1 1 1 4 4 4 5 1 9 9 9 10



1
10
7
19
**/

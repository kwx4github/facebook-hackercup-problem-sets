/* Round 1 Facebook Hacker Cup 2015 */
/* Q4 Corporate Gifting */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

long findLevel(long i, long* level, long * parent)
{
	if (parent[i] == 1)
		return 1;
	else if (level[parent[i] - 1] > 0)
		return level[parent[i] - 1] + 1;
	else
		return findLevel(parent[i]-1, level, parent) + 1;
}

long findMinAmt(long * parent, long N)
{
	int i, j;
	long * level = (long *) malloc (N * sizeof (long));
	long * nlevel = (long *) malloc (N * sizeof (long));
	long evenSum, oddSum;
	
	for (i = 0; i < N; i++)
	{
		level[i] = 0;
		nlevel[i] = 0;
	}
	
	// Find the levels of each employee
	level[0] = 0; // The CEO in Level 0
	for (i = 1; i < N; i++)
	{
		level[i] = findLevel(i, level, parent);
	}
	
	// Find the number of employees in each level
	for (i = 0; i < N; i++)
	{
		nlevel[level[i]]++;
	}

	evenSum = oddSum = 0;
	
	for (i = 0; i < N; i=i+2)
		evenSum = evenSum + nlevel[i];
	for (i = 1; i < N; i=i+2)
		oddSum = oddSum + nlevel[i];

	if (evenSum < oddSum)
		return (2 * evenSum + oddSum);
	else
		return (2 * oddSum + evenSum);
}

int main(void)
{
	int kase, T;
	long N;
	long i;
	
	FILE * in = fopen("corporate_gifting.txt","r");
	FILE * out = fopen("corporate_gifting_output.txt","w");

	fscanf (in, "%d", &T);
	for (kase = 1; kase <= T; kase++)
	{
		fscanf (in, "%ld", &N);
		long * parent = (long *) malloc (N * sizeof (long));
		for (i = 0; i < N; i++)
		{
			fscanf (in, "%ld", &parent[i]);
		}		
		fprintf (out, "Case #%d: %ld\n", kase, findMinAmt(parent, N));
	}
	
	fclose (in);
	fclose (out);

	return 0;
}

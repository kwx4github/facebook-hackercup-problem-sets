#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

const int INF = (int) 1e9;
const int PRICE = 20;
const int N = (int) 2e5;
vector<int> graph[N];
int f[N][PRICE + 1];

int main() {
    ios::sync_with_stdio(false);
    int numTests; cin >> numTests;
    for (int test = 0; test < numTests; ++test) {
        int n; cin >> n;
        for (int i = 0; i < n; ++i) graph[i].clear();
        for (int i = 0; i < n; ++i) {
            int p; cin >> p; --p;
            if (p != -1) graph[p].push_back(i);
        }
        vector<int> order;
        order.push_back(0);
        for (int i = 0; i < (int) order.size(); ++i) {
            int u = order[i];
            order.insert(order.end(), graph[u].begin(), graph[u].end());
        }
        for (int i = (int) order.size() - 1; i >= 0; --i) {
            int u = order[i];
            for (int p = 1; p <= PRICE && p <= n; ++p) {
                f[u][p] = p;
                for (int v : graph[u]) {
                    int delta = INF;
                    for (int pp = 1; pp <= PRICE && pp <= n; ++pp) if (p != pp) {
                        delta = min(delta, f[v][pp]);
                    }
                    f[u][p] += delta;
                }
            }
        }
        int result = INF;
        for (int p = 1; p <= PRICE && p <= n; ++p) {
            result = min(result, f[0][p]);
        }
        printf("Case #%d: %d\n", test + 1, result);
    }
    return 0;
}

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <climits>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <bitset>
#include <utility>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)

typedef long long   li;
typedef long double ld;

const int INF = 1000000000;
const ld EPS = 1E-10;

using namespace std;

const int N = 300000;
const int M = 50;

int n;

vector<int> nxt[N];

int d[N][M + 1];

int calc(int v, int k)
{
    if (d[v][k] != 0)
        return d[v][k];

    int result = INT_MAX;

    for (int c = 1; c <= M; c++)
        if (c != k)
        {
            int cad = c;
            forn(j, nxt[v].size())
                cad += calc(nxt[v][j], c);
            result = min(result, cad);
        }

    d[v][k] = result;
    return d[v][k];
}

int main(int argc, char* argv[])
{
    freopen("input.txt", "rt", stdin);

    int testCases;
    cin >> testCases;

    forn(testCase, testCases)
    {
        cin >> n;
        forn(i, n)
            nxt[i].clear();

        forn(i, n)
        {
            int x;
            cin >> x;
            if (x != 0)
                nxt[x - 1].push_back(i);
        }

        forn(i, n + 1)
            forn(j, M + 1)
                d[i][j] = 0;

        int result = INT_MAX;
        for (int i = 1; i <= M; i++)
            result = min(result, calc(0, i));

        cout << "Case #" << testCase + 1 << ": " << result << endl;
    }

    return 0;
}

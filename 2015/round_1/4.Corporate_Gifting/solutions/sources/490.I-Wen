#include <bits/stdc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define PII pair<int,int>
#define VPII vector<pair<int,int> >
#define PLL pair<long long,long long>
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MOD = 1e9+7;
const int SIZE = 2e5+10;
const int MAX = 100;
int dp[SIZE][MAX+1];
vector<int>e[SIZE],emp;
int tmp[SIZE][MAX+1];
int v[2],from[2];
void dfs(int x){
    REPP(i,1,MAX+1)dp[x][i]=i;
    REP(i,SZ(e[x])){
        dfs(e[x][i]);
        v[0]=v[1]=MOD;
        REPP(j,1,MAX+1){
            if(dp[e[x][i]][j]<v[0]){
                v[1]=v[0];from[1]=from[0];
                v[0]=dp[e[x][i]][j];
                from[0]=j;
            }
            else if(dp[e[x][i]][j]<v[1]){
                v[1]=dp[e[x][i]][j];
                from[1]=j;
            }
        }
        REPP(j,1,MAX+1){
            if(j==from[0])dp[x][j]+=v[1];
            else dp[x][j]+=v[0];
        }
    }
}
int main(){
    CASET{
        DRI(n);
        REPP(i,1,n+1)e[i].clear();
        REP(i,n){
            DRI(x);
            if(x)e[x].PB(i+1);
        }
        dfs(1);
        int an=MOD;
        REPP(i,1,MAX+1)an=min(an,dp[1][i]);
        printf("Case #%d: %d\n",case_n++,an);
    }
    return 0;
}

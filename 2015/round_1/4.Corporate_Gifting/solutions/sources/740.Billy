#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <string>
#include <queue>
#include <iostream>
using namespace std;

bool fless(double a,double b){ return b-a>1e-6; }
bool fequal(double a,double b){ return fabs(b-a)<=1e-6; }

#define N 200010
#define max_color 20

int dp[N][max_color];
int order[N];

vector<int> adj[N];

int main(){
    int tt; scanf("%d",&tt);
    for (int ti=1;ti<=tt;ti++){
        int n; scanf("%d", &n);
        
        for (int i=0;i<n;i++) adj[i].clear();

        int par;
        for (int i=0;i<n;i++) {
            scanf("%d", &par);
            if (par > 0) {
                adj[par-1].push_back(i);
            }
        }

        //bfs
        order[0] = 0;
        int head=0, tail=1;
        for (head=0, tail=1; head<tail; head++) {
            int p = order[head];
            for (int i=0, m=adj[p].size(); i<m;i++) {
                order[tail++] = adj[p][i];
            }
        }

        // dp
        for (int p=n-1;p>=0;p--) {
            int node = order[p];
            for (int c1=1;c1<max_color;c1++) {
                dp[node][c1] = c1;

                for (int j=0, m=adj[node].size(); j<m; j++) {
                    int min_node2 = -1;
                    int node2 = adj[node][j];
                    for (int c2=1; c2<max_color; c2++) {
                        if (c2 == c1) continue ; 
                        if (min_node2 == -1 || dp[node2][c2] < min_node2) {
                            min_node2 = dp[node2][c2];
                        }
                    }
                    dp[node][c1] += min_node2;
                }

            }
            
        }
        
        /*
        for (int i=0;i<n;i++) {
            printf("%d:", i);
            for (int j=1;j<max_color; j++) {
                printf("%4d", dp[i][j]);
            }
            printf("\n");
        }
        */

        int ans = dp[0][1];
        for (int c=2; c<max_color; c++) {
            if (dp[0][c] < ans) {
                ans = dp[0][c];
            }
        }


        printf("Case #%d: %d\n",ti,ans);
    }
    return 0;
}

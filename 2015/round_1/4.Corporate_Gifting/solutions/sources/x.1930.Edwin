// Dedicated to my wife Susana
// 
#include <iostream>
#include <sstream>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <cmath>
#include <functional>
#include <algorithm>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <stdio.h>
#include <string.h>
using namespace std;

#define FOR(i,a,b)  for(int i=(a),_##i=(b);i<_##i;++i)
#define F(i,a)      FOR(i,0,a)
#define ALL(x)      x.begin(),x.end()
#define PB          push_back
#define MP          make_pair
#define S           size()
typedef long long   LL;

int N;
int DP[200002][4];

vector<vector<int> > T;
int solve(int node, int dadSt) {
    int& r1 = DP[node][0]; // $1
    int& r2 = DP[node][1]; // $2
    int& r3 = DP[node][2]; // $3
    if(!r1) {
        r1 = 1;
        r2 = 2;
        r3 = 3;
        F(i, T[node].S) {
            r1 += solve(T[node][i], 1);
            r2 += solve(T[node][i], 2);
            r3 += solve(T[node][i], 3);
        }
    }
    if(dadSt == 1) return min(r2, r3);
    if(dadSt == 2) return min(r1, r3);
    if(dadSt == 3) return min(r1, r2);
    return min(r1, min(r2, r3));
}

int T2[200002];
int solve2() {
    int dad;
    for(int node = N; node >= 1 ;node--) {
        DP[node][0] += 1;
        DP[node][1] += 2;
        DP[node][2] += 3;
        DP[node][3] += 4;
        dad = T2[node];
        DP[dad][0] += min(DP[node][1], DP[node][2]);
        DP[dad][1] += min(DP[node][0], DP[node][2]);
        DP[dad][2] += min(DP[node][0], DP[node][1]);
    }
    return min(DP[1][0], min(DP[1][1], DP[1][2]));
}

int main() {
    int Tcas, dad;
    cin >> Tcas;
    F(cas, Tcas) {
        T = vector<vector<int> > (200002);
        memset(T2, 0, sizeof(T2));
        memset(DP, 0, sizeof(DP));
        cin >> N;
        for(int i=1; i<=N ;i++) {
            cin >> dad;
            T[dad].PB(i);
            T2[i] = dad;
        }
        //printf("Case #%d: %d\n", cas+1, solve(1, 0));
        printf("Case #%d: %d\n", cas+1, solve2());
    }
}

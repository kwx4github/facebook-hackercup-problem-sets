import java.io.*;
import java.util.*;

public class fb14 {
	static int maxcolor;
    public static void main(String[] args) throws Exception {
    	BufferedReader in = new BufferedReader(new FileReader("fb14.in"));
    	PrintStream out = new PrintStream("fb14.out");
    	
		int t = Integer.parseInt(in.readLine());
		for(int i = 0; i < t; i++) {
			long l = System.currentTimeMillis();
			int n = Integer.parseInt(in.readLine());

			maxcolor = (int) Math.ceil(Math.log(n) / Math.log(2)) + 4;
			
			String[] arr = in.readLine().split(" ");
			
			int[] a = new int[arr.length];
			for(int j = 0; j < a.length; j++) {
				a[j] = Integer.parseInt(arr[j]) - 1;
			}
			int[] degs = new int[n];
			for(int j = 1; j < n; j++) {
				degs[a[j]]++;
			}
			ArrayDeque<Integer> ad = new ArrayDeque<Integer>();
			Node[] verts = new Node[n];
			for(int j = 0; j < n; j++) {
				verts[j] = new Node(j);
			}
			for(int j = 0; j < n; j++) {
				if(degs[j] == 0) {
					ad.addLast(j);
				}
			}
			while(!ad.isEmpty()) {
				for(int j = 0; j < n; j++) {
					// System.out.println(verts[j].freq);
				}
				int ind = ad.pollFirst();
				for(int j = 0; j < maxcolor; j++) {
					Node orig = verts[ind];
					Node to = verts[a[ind]];
					int temp1 = orig.prices[j];
					int freq1 = orig.freq.get(temp1);
					if(freq1 == 1) {
						orig.freq.remove(temp1);
						int temp2 = to.prices[j];
						int freq2 = to.freq.get(temp2);
						if(freq2 == 1) {
							to.freq.remove(temp2);
						} else {
							to.freq.put(temp2, to.freq.get(temp2) - 1);
						}
						to.prices[j] += orig.freq.firstKey();
						temp2 = to.prices[j];
						if(to.freq.containsKey(temp2)) {
							to.freq.put(temp2, to.freq.get(temp2) + 1);
						} else {
							to.freq.put(temp2, 1);
						}
						orig.freq.put(temp1, 1);
					} else {
						int temp2 = to.prices[j];
						int freq2 = to.freq.get(temp2);
						if(freq2 == 1) {
							to.freq.remove(temp2);
						} else {
							to.freq.put(temp2, to.freq.get(temp2) - 1);
						}
						to.prices[j] += orig.freq.firstKey();
						temp2 = to.prices[j];
						if(to.freq.containsKey(temp2)) {
							to.freq.put(temp2, to.freq.get(temp2) + 1);
						} else {
							to.freq.put(temp2, 1);
						}						
					}
					degs[a[ind]]--;
					if(degs[a[ind]] == 0 && a[ind] != 0) {
						ad.addLast(a[ind]);
					}
				}
			}
			out.println("Case #" + (i + 1) + ": " + verts[0].freq.firstKey());
		}
	}

	static class Node {
		int[] prices;
		TreeMap<Integer, Integer> freq;
		int ind;

		public Node(int i) {
			prices = new int[maxcolor];
			freq = new TreeMap<Integer, Integer>();
			for(int j = 0; j < maxcolor; j++) {
				prices[j] = j + 1;
				freq.put(j + 1, 1);
			}
			ind = i;
		}
	}
}
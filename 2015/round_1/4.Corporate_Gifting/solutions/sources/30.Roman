#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int maxn = (int)2e5 + 10;
const int maxn2 = 20;

int n, n2;
const ll inf = (ll)1e18;
vector<int> go[maxn];
ll dp[maxn][maxn2 + 2];
ll ndp[maxn][maxn2 + 2];
ll lf[maxn2 + 2];
ll rg[maxn2 + 2];
void dfs(int v) {
  for (int i = 1; i <= n2; i++) {
    dp[v][i] = i;
  }
  for (auto e : go[v]) {
    dfs(e);
    for (int i = 1; i <= n2; i++) {
      dp[v][i] += ndp[e][i];
    }
  }
  lf[0] = inf;
  for (int i = 1; i <= n2; i++) {
    lf[i] = min(lf[i - 1], dp[v][i]);
  }
  lf[n2 + 1] = lf[n2];
  rg[n2 + 1] = inf;
  for (int i = n2; i >= 1; i--) {
    rg[i] = min(rg[i + 1], dp[v][i]);
  }
  rg[0] = rg[1];
  for (int i = 1; i <= n2; i++) {
    ndp[v][i] = min(lf[i - 1], rg[i + 1]);
  }
}
int main(){
    #ifdef home
    assert(freopen(problem_name".out","wt",stdout));
    assert(freopen(problem_name".in","rt",stdin));
    #endif
    int T;
    scanf("%d", &T);
    for (int ti = 1; ti <= T; ti++) {
      printf("Case #%d: ", ti);
      scanf("%d", &n);
      n2 = min(n, maxn2);
      for (int i = 0; i < n; i++) {
        go[i].clear();
      }
      for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        x--;
        if (i) {
          go[x].pb(i);
        }
      }
      dfs(0);
      ll ans = inf;
      for (int i = 1; i <= n2; i++) {
        ans = min(ans, dp[0][i]);
      }
      cout<<ans<<endl;
    }
    return 0;
}

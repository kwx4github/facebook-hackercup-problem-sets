#include "assert.h"
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

struct Option {
	int value[2], total[2];
};

int main() {
	int T = 0;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		int N = 0;
		cin >> N;
		vector<vector<int>> children(N);
		for (int n = 0; n < N; ++n) {
			int parent = 0;
			cin >> parent;
			if (parent-- > 0) children[parent].push_back(n);
		}
		vector<int> topsort, todo;
		todo.push_back(0);
		while (!todo.empty()) {
			int i = todo.back();
			todo.pop_back();
			topsort.push_back(i);
			for (int j : children[i]) todo.push_back(j);
		}
		vector<Option> options(N);
		reverse(topsort.begin(), topsort.end());
		for (int i : topsort) {
				bool conflict = true;
				for (int n = 1; n <= 2 || conflict; ++n) {
					conflict = false;
					int total = n;
					for (int j : children[i]) {
						if (options[j].value[0] != n) {
							total += options[j].total[0];
						} else {
							conflict = true;
							total += options[j].total[1];
						}
					}
					if (n == 1) {
						options[i].value[0] = options[i].value[1] = n;
						options[i].total[0] = options[i].total[1] = total;
					} else if (n == 2 || total < options[i].total[1]) {
						options[i].value[1] = n;
						options[i].total[1] = total;
						if (options[i].total[1] < options[i].total[0]) {
							swap(options[i].value[0], options[i].value[1]);
							swap(options[i].total[0], options[i].total[1]);
						}
					}
				}
		}
		cout << "Case #" << t << ": " << options[0].total[0] << endl;
	}
}
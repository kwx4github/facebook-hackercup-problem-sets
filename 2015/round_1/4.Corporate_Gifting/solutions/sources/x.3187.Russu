#include <bits/stdc++.h>
#define NMAX 200010
std::ifstream fin("corporate_gifting.txt");
std::ofstream fout("4.out");
std::vector<int> EmpTree[NMAX];
std::queue<int> coada;
int emplcost[NMAX];

int main(int argc, char const *argv[])
{

    int t, N, temp;
    fin >> t;
    for (int T = 1; T <= t; T++)
    {
        std::memset(emplcost, 0, NMAX);
        int sum1, sum2;
        sum1 = sum2 = 0;
        fin >> N;
        for (int i = 0; i <= N; ++i)
        {
            EmpTree[i].clear();
        }
        for (int i = 1; i <= N; ++i)
        {
            fin >> temp;
            EmpTree[temp].push_back(i);
        }
        int front;
        emplcost[1] = 1;
        coada.push(1);
        while (!coada.empty())
        {
            front = coada.front();
            coada.pop();
            int gift;
            if (emplcost[front] == 1)
            {
                gift = 2;
            }
            else
            {
                gift = 1;
            }
            for (std::vector<int>::iterator i = EmpTree[front].begin(); i != EmpTree[front].end(); ++i)
            {
                emplcost[*i] = gift;
                coada.push(*i);
            }
        }

        for (int i = 1; i <= N; ++i)
        {
          //  fout << emplcost[i] << " ";
            if (emplcost[i] == 1)
            {
                sum1 += 1;
                sum2 += 2;
            }
            else
            {
                sum1 += 2;
                sum2 += 1;
            }
        }
       // fout << "\n";
        fout << "Case #" << T << ": " <<std::min(sum1,sum2) << '\n';
    }
    return 0;
}
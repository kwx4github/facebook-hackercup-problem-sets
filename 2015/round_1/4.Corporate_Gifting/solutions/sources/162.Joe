#include<fstream>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<numeric>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;

namespace
{
	const static int MAX = 200005;

	int N;
	int parent[MAX];
	int depth[MAX];
	vector<int> children[MAX];
	vector<ll> mem[MAX];

	void dig(int i)
	{
		int maxOthers = 0;
		for (int j : children[i])
		{
			dig(j);
			maxOthers = max(maxOthers, depth[j]);
		}

		depth[i] = maxOthers + 1;
	}

	ll solve(int i, int bad)
	{
		if (children[i].empty())
		{
			return bad == 1 ? 2 : 1;
		}

		if (bad >= mem[i].size())
		{
			bad = 0;
		}

		ll& ret = mem[i][bad];
		if (ret >= 0)
			return ret;

		ret = 1LL << 60;
		for (int cost = 1; cost <= children[i].size() + 3 && cost <= depth[i] + 3; ++cost)
		{
			if (cost == bad) continue;

			ll thisCost = cost;
			for (int j : children[i])
			{
				thisCost += solve(j, cost);
			}

			ret = min(ret, thisCost);
		}

		return ret;
	}
}

//int mainFHC15_R1_P4()
int main()
{
	ifstream fin("FHC\\corporate_gifting.txt");
	ofstream fout("FHC\\corporate_gifting_out.txt");

	unsigned int numberOfCases;
	fin >> numberOfCases;

	for (unsigned int zz=1; zz<=numberOfCases; ++zz)
	{
		for (auto& v : children)
			v.clear();

		for (auto& v : mem)
			v.clear();

		fin >> N;
		for (int i = 1; i <= N; ++i)
		{
			fin >> parent[i];
			children[parent[i]].push_back(i);
		}

		for (int i = 1; i <= N; ++i)
		{
			mem[i].assign(children[i].size() + 4, -1);
		}

		memset(depth, 0, sizeof(depth));
		dig(1);

		ll ret = solve(1, 0);

		fout << "Case #" << zz << ": ";
		fout << ret << endl;
	}

	return 0;
}
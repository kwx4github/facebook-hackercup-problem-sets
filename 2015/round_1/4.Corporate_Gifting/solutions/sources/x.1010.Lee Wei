#include <bits/stdc++.h>
#include <cassert>
#include <climits>
#include <cfloat>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;

inline unsigned int rand16(){return ((rand()) << 15) ^ rand();}
inline unsigned int rand32(){return (rand16() << 16) | rand16();}
inline ULL rand64(){return ((LL)rand32() << 32) | rand32();}
inline ULL random(LL l, LL r){return l == r ? l : rand64() %(r-l) +l;}
inline double fRand(double fMin, double fMax) // RAND_MAX: [fMin,fMax)
	{ double f = (double)rand()/(RAND_MAX+1.0f); return fMin + f*(fMax-fMin); }

const int INF = 0x3f3f3f3f;
const LL INFF = 1LL<<60;
const int MOD = 1000000007;
const double EPS = 1e-9;
const double PI = acos(-1.0);//2*acos(0.0);//M_PI;

//4 dirs anti-cw: int dx[]={1,0,-1,0}, dy[]={0,1,0,-1};
//4 dirs cw:      int dx[]={-1,0,1,0}, dy[]={0,1,0,-1};
//8 dirs: int dx[]={1,1,0,-1,-1,-1,0,1}, dy[]={0,1,1,1,0,-1,-1,-1};
//hex: int dx[6]={2,1,-1,-2,-1,1}, dy[6]={0,1,1,0,-1,-1};
//knight: int dx[]={2,1,-1,-2,-2,-1,1,2}, dy[]={1,2,2,1,-1,-2,-2,-1};

#define FOR(i,a,b)   for(int(i)=int(a);(i)<int(b);(i)++)
#define FOREQ(i,a,b) for(int(i)=int(a);(i)<=int(b);(i)++)
#define RFOR(i,a,b)  for(int(i)=(a),_b(b);(i)>=_b;--(i))
#define FOREACH(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define FILL(arr,val) memset((arr),(val),sizeof(arr))
#define CLR(a)        memset((a),0,sizeof(a))
#define CPY(dest,src) memcpy((dest),(src),sizeof(dest))

#define ALL(a)       (a).begin(),(a).end()
#define SZ(a)        ((int)(a).size())
#define UNIQ(a)      sort(ALL(a)); (a).erase(unique(ALL(a)),(a).end())
#define IDX(arr,ind) (lower_bound(ALL(arr),ind)-arr.begin())

#define fst first
#define snd second
#define pb  push_back
#define mp  make_pair
#define mt(a,b,c) mp(a,mp(b,c))

template< typename T, size_t N >
inline void print_ary(T(&ary)[N], int er)
	{for(int r = 0; r < er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N >
inline void print_ary_eq(T(&ary)[N], int er)
	{for(int r = 1; r <= er; r++) {cout << ary[r] << " ";}cout<<endl;}
template< typename T, size_t N, size_t M >
inline void print_ary_2d(T(&ary)[N][M], int er, int ec)
	{for(int r = 0; r < er; r++) {for(int c = 0; c < ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
template< typename T, size_t N, size_t M >
inline void print_ary_2d_eq(T(&ary)[N][M], int er, int ec)
	{for(int r = 1; r <= er; r++) {for(int c = 1; c <= ec; c++) {cout << ary[r][c] << " ";}cout<<endl;}}
inline LL lcm(LL a, LL b) {return a*b/__gcd(a,b);}
inline double dist(double x1, double y1, double x2, double y2)
	{return hypot(x1-x2,y1-y2);}
//scanf("%[^\n]", &s);
inline int is_pow_of_2(unsigned int x) {return ((x!=0) && ((x&(~x+1))==x));}

//#leading 0-bits in x (32bit fixed width representation); x=0: undefined
inline int clz(int N) {return N ? 32 - __builtin_clz(N) : INT_MIN;}
inline int clz(ULL N) {return N ? 64 - __builtin_clzll(N) : 0;}
//#trailing 0-bits
inline int ctz(int n){return (n==0?-1:ctz(n>>1)+1);}
//#1-bits set
#define bitcnt   __builtin_popcount
#define bitcntll __builtin_popcountll

#define bin_width 32
inline char* bin(int x,char *so){char s[bin_width+1];int i=bin_width;s[i--]=0x00;do{s[i--]=(x&1)?'1':'0';x>>=1;}while(x>0);i++;sprintf(so,"%s",s+i);return so;}
//USAGE: char buf[bin_width+1];printf("%s",bin(N,buf));

/*
const int MAXN = 10005;
int fact[MAXN];
#define FACT fact[0]=1;FOR(i,1,MAXN){fact[i]=(1LL*fact[i-1]*i)%MOD;}
inline LL modinv(int a, int b=MOD-2) {LL x=1,y=a;while(b){if(b&1)x=(x*y)%MOD;y=(y*y)%MOD;b>>=1;}return x;}
// nCr
inline LL c(int n, int r) {return ((((1LL*fact[n]*modinv(fact[n-r]))%MOD)*modinv(fact[r]))%MOD);}
*/

int main()
{
	int T; scanf("%d", &T);
	FOREQ(t,1,T)
	{
		int N; scanf("%d", &N);

		int L[N+1];
		vector<int> A[N+1];
		FOREQ(j,1,N)
		{
			scanf("%d", &L[j]);
			A[L[j]].pb(j);
		}

		vector<int> lvl[N+1];
		int ht = 0;
		lvl[0].pb(1);
		FOR(j,0,N-1)
		{
			FOREACH(lvl[j], x)
			{
				FOREACH(A[*x], y)
				{
					lvl[j+1].pb(*y);
				}
			}
		}
		for(int i=0; !lvl[i].empty(); i++)
		{
			ht++;
		}

		LL best[N+1], snd[N+1];
		LL total_best[N+1], total_snd[N+1];
		RFOR(l,ht-1,0)
		{
			FOREACH(lvl[l],x)
			{
				if(A[*x].empty())
				{
					best[*x] = 1, snd[*x] = 2;
					total_best[*x] = 1, total_snd[*x] = 2;
				}
				else
				{
					best[*x] = 1;
					total_best[*x] = 1, total_snd[*x] = 0;
					FOREACH(A[*x],y)
					{
						if(best[*y] != 1)
						{
							total_best[*x] += total_best[*y];
						}
						else
						{
							total_best[*x] += total_snd[*y];
						}
					}

					bool flag = false;
					for(int k = 2; k <= N && !flag; k++)
					{
						LL best_new = k;
						FOREACH(A[*x],y)
						{
							if(best[*y] != k)
							{
								best_new += total_best[*y];
							}
							else
							{
								best_new += total_snd[*y];
							}
						}
						if(best_new <= total_best[*x])
						{
							snd[*x] = best[*x];
							total_snd[*x] = total_best[*x];
							best[*x] = k;
							total_best[*x] = best_new;
						}
						else if(best_new < total_snd[*x]
							 || total_snd[*x] == 0)
						{
							total_snd[*x] = best_new;
							snd[*x] = k;
						}
						else
						{
							flag = true;
						}
					}
				}
			}
		}

		printf("Case #%d: %lld\n", t, total_best[1]);
	}
	return 0;
}

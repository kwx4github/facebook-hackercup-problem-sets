#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(),i##_end=(c).end();i!=i##_end;++i)

template<class T> inline void amin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void amax(T &a, T b) { if (a<b) a=b; }

const int MAX_N = 200011;
const int LOG_N = 30;
typedef vector<vector<int> > Adj;
Adj G;
int T;
int N;
vector<int> bfsord;
void bfs() {
    bfsord.assign(1, 0);
    REP (i, N) {
	EACH (e, G[i]) 
	    bfsord.push_back(*e);
    }
}

int dp[MAX_N+10][LOG_N];
int calc() {
    memset(dp, 0, sizeof dp);
    for (int i=N; i--;) {
	int v = bfsord[i];
	for (int c=1; c<LOG_N; c++) dp[v][c] = c;
	EACH (e, G[v]) {
	    vector<pair<int, int> > p; // (cost, num)
	    for (int c=1; c<LOG_N; c++) 
		p.push_back(make_pair(dp[*e][c], c));
	    sort(p.begin(), p.end());
	    
	    for (int c=1; c<LOG_N; c++) {
		if (p[0].second != c) dp[v][c] += p[0].first;
		else dp[v][c] += p[1].first;
	    }
	}
    }
    return *min_element(dp[0]+1, dp[0]+LOG_N);
}

int main() {
    scanf("%d", &T);
    REP ($, T) {
	scanf("%d", &N);
	G = Adj(N);
	REP (i, N) {
	    int p;
	    scanf("%d", &p);
	    if (i == 0) continue;
	    p--;
	    G[p].push_back(i);
	}
	bfs();
	int ans = calc();
	printf("Case #%d: %d\n", $+1, ans);
    }
    return 0;
}

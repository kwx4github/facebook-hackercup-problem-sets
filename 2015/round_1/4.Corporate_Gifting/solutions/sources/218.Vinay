#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include <map>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<cassert>
using namespace std;
 
#define DEBUG //on-off switch for prlling statements
 
// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)
 
// Useful constants
#define EPS                         1e-9
 
// Useful hardware instructions
#define bitcount1                    __builtin_popcount1
#define gcd                         __gcd
 
// Useful container manipulation / traversal macros
#define forall(i,a,b)               for(ll i=a;i<b;i++)
#define foreach(v, c)               for( typeof( (c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define all(a)                      a.begin(), a.end()
#define in(a,b)                     ( (b).find(a) != (b).end())
#define pb                          push_back
#define fill(a,v)                    memset(a, v, sizeof a)
#define sz(a)                       ((ll)(a.size()))
 
// Some common useful functions
#define maX(a,b)                     ( (a) > (b) ? (a) : (b))
#define miN(a,b)                     ( (a) < (b) ? (a) : (b))
 
#define INF 1000000000
#define ll long long int
#define llu long long unsigned
#define ld long
 
#define llu long long unsigned
#define ld long
#define F first
#define S second
 
#define mod 1000000007
#define maxc 100
int n;
int dp[200001][101];
int l[200001];
vector<int> lev[200001];
vector<int> adj[200001];
	
void solve(int t)
{
	s(n);
	for(int i=0;i<n;i++)
	{
		lev[i].clear();
		adj[i].clear();
	}
	int x;
	s(x);
	for(int i=0;i<n-1;i++)
	{
		s(x);
		x--;
		adj[x].pb(i+1);
	}
	queue<int> q;
	q.push(0);
	l[0]=0;
	int leve;
	while(!q.empty())
	{
		int idx=q.front();
		q.pop();
		leve=l[idx];
		lev[leve].pb(idx);
		for(int i=0;i<adj[idx].size();i++)
		{
			l[adj[idx][i]]=leve+1;
			q.push(adj[idx][i]);
		}
	}
	for(int i=leve;i>=0;i--)
	{
		for(int j=0;j<lev[i].size();j++)
		{
			int idx=lev[i][j];
			for(int k=0;k<min(maxc,n);k++)
			{
				dp[idx][k] = k+1;
			}
			for(int k=0;k<adj[idx].size();k++)
			{
				int val=adj[idx][k];
				int min1=INF;
				int smin1=INF;
				for(int l=0;l<min(maxc,n);l++)
				{
					if(dp[val][l] < min1)
					{
						smin1=min1;
						min1=dp[val][l];
					}
					else if(dp[val][l] < smin1)
					{
						smin1=dp[val][l];
					}
				}
				for(int l=0;l<min(maxc,n);l++)
				{
					if(dp[val][l] == min1)
					{
						dp[idx][l] += smin1;
					}
					else
					{	
						dp[idx][l] += min1;
					}
				}
			}
		}
	}
	int ans=INF;
	for(int i=0;i<min(maxc,n);i++)
	{
		ans=min(dp[0][i],ans);
	}
	printf("Case #%d: %d\n",t,ans);
			
	
	
}

int main()
{
	int t;
	s(t);
	for(int i=0;i<t;i++)
	solve(i+1);
}
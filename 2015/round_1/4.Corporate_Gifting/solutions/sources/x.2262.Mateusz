#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <stack>
#include <cassert>
#include <cstring>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#define VAR(i,v) __typeof(v) i = (v)
#define SIZE(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define REP(i,b) for(int i=0; i<(b); ++i)
#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define NL printf("\n")

using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

const int INF = 2147483640;
const int MAXN = 200010;
VI g[MAXN];
bool vis[MAXN];
int r[MAXN];
int p[MAXN];
VI leaves;
VI post;
int t;

void find_leaves(int u) {
	if(g[u].empty()) leaves.PB(u);
	for(int x: g[u]) find_leaves(x);
	post.PB(u);
}

int main() {
	scanf("%d", &t);
	REP(i,t) {
		REP(i,MAXN-2) {
			g[i].clear();
			vis[i] = 0;
			r[i] = p[i] = 0;
			leaves.clear();
			post.clear();
		}
		int n;
		scanf("%d", &n);
		scanf("%*d");
		FOR(i,2,n) {
			int a;
			scanf("%d", &a);
			g[a].PB(i);
			p[i] = a;
		}

		find_leaves(1);

		for(int x: leaves) {
			r[x] = 1;
		}

		for(int x: post) if(r[x] == 0) {
			int mn = 1;
			VI a;
			for(int y: g[x]) a.PB(r[y]);
			sort(ALL(a));
			for(int y: a) if(mn == y) mn++;
			r[x] = mn;
		}

		LL res = 0;
		FOR(i,1,n) res += r[i];

		printf("Case #%d: %lld\n", i+1, res);

	}
	return 0;
}

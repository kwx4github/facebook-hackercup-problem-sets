#include<iostream>
#include<stack>
#include<queue>
#include<vector>
#include<climits>
using namespace std;

int dp[300000][21];

int main(){
	freopen("in4.txt","r",stdin);
	freopen("out4.txt","w",stdout);
	ios::sync_with_stdio(false);

	vector<vector<int> > tree;
	vector<int> parent;
	vector<int> level;		
	
	queue<int> Q;
	stack<int> S;
	int t;
	cin>>t;
	
	for(int T=1;T<=t;T++){
		int n;
		cin>>n;
		
		tree.clear();
		parent.clear();
		tree.resize(n);
		parent.resize(n);

		for(int i=0;i<n;i++)
		{
			cin>>parent[i];
			parent[i]--;
			if(parent[i]>=0)
			tree[parent[i]].push_back(i);
		}
		
		level.clear();
		level.resize(n);
		
		Q.push(0);
		level[0]=0;
		while(!Q.empty()){
			int current=Q.front();
			Q.pop();
			S.push(current);
			for(int i=0;i<tree[current].size();i++)
				Q.push(tree[current][i]);
		}
	
		while(!S.empty()){
			int current=S.top();
			S.pop();
			
			for(int previous=1;previous<21;previous++){
				dp[current][previous]=INT_MAX;
				for(int color=1;color<21;color++){
					if(color==previous)
						continue;
					else{
						int currentMin=color;
						for(int child=0;child<tree[current].size();child++)
							currentMin+=dp[tree[current][child]][color];
						dp[current][previous]=min(dp[current][previous],currentMin);
					}
				}
			}
		}
		int solution = INT_MAX;
		for(int i=1;i<21;i++)
			solution=min(solution,dp[0][i]);
		cout<<"Case #"<<T<<": "<<solution<<endl;
	}
}

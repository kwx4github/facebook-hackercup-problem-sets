#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "4"

#pragma comment(linker, "/STACK:256000000")

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef pair<int, int> pii;

vvi ReadTree() {
	int nodes;
	cin >> nodes;
	vvi tree(nodes);

	for (int i = 0; i < nodes; ++i) {
		int parent_idx;
		cin >> parent_idx;
		if (parent_idx == 0) {
			continue;  // No parent
		}
		parent_idx--;
		tree[parent_idx].push_back(i);
	}
	return tree;
}

class Node {
public:
	Node() : cost_count(0) {}

	void SetCost(int cost_count) {
		assert(cost_count > 0);
		this->cost_count = cost_count;
	}

	int get_cost_count() const {
		return cost_count;
	}

// private:
	int cost_count;
	vector<int> in_cost;
};

const int InfCost = 300001;

void SetMinCostCount(int parent, int node, const vvi& tree, vector<Node>& nodes) {
  if (node >= tree.size()) {
    return;
  }
	if (node % 1000 == 0) {
		cerr << node << endl;
	}
  int size = tree[node].size();
  int i;
  int max_child_cost = 0;
	for (i = 0; i < size; ++i) {
    int child = tree[node][i];
		SetMinCostCount(node, child, tree, nodes);
		max_child_cost = max(max_child_cost, nodes[child].cost_count);//get_cost_count());
	}

	if (parent != -1) {
		max_child_cost += 1;
	}

	int neighbor_count = (parent == -1 ? tree[node].size() : tree[node].size() + 1);

	nodes[node].SetCost(min(max_child_cost, neighbor_count) + 1);
}

void SetVectors(vector<Node>& nodes) {
  for (int i = 0; i < nodes.size(); ++i) {
    Node& node = nodes[i];
		node.in_cost.resize(node.get_cost_count());
	}
}

int GetCost(const Node& node, int excluded) {
	int min_cost = InfCost;
	for (int i = 0; i < node.in_cost.size(); ++i) {
		if (i == excluded) continue;
		min_cost = min(min_cost, node.in_cost[i]);
	}
	return min_cost;
}

void DFS(int node_index, const vvi& tree, vector<Node>& nodes) {
	const vi& tree_node = tree[node_index];
	Node& node = nodes[node_index];

	if (tree_node.size() == 0) {
		for (int i = 0; i < node.in_cost.size(); ++i) {
			node.in_cost[i] = i + 1;
		}
		return;
	}

	if (node.in_cost[0] != 0) {
		return;  // Is calculated.
	}

	for (int i = 0; i < tree_node.size(); ++i) {
		DFS(tree_node[i], tree, nodes);
	}

	for (int i = 0; i < node.in_cost.size(); ++i) {
		int cost_here = i + 1;
    for (int jj = 0; jj < tree_node.size(); ++jj) {
      int child = tree_node[jj];
			cost_here += GetCost(nodes[child], i);
		}
		node.in_cost[i] = cost_here;
	}
	return;
}

ll FindMinCost(const vvi& tree) {
	vector<Node> nodes(tree.size(), Node());
	SetMinCostCount(-1, 0, tree, nodes);
	SetVectors(nodes);
	DFS(0, tree, nodes);

	return GetCost(nodes[0], -1);
}

void GenerateTrees() {
	int test_count = 1;
	cout << test_count << endl;
	for (int i = 0; i < test_count; ++i) {
		int nodes = 200000;
		cout << nodes << endl;

		// vector<int> parent(nodes, 1);
		for (int node = 0; node < nodes; ++node) {
			int parent = 0;
			if (node != 0) {
				parent = rand() % node + 1;
			}
			cout << parent << " ";
		}
		cout << endl;
	}
}

void GenerateLongTree(int nodes) {
	int test_count = 1;
	cout << test_count << endl;
	for (int i = 0; i < test_count; ++i) {
		
		cout << nodes << endl;

		// vector<int> parent(nodes, 1);
		for (int node = 0; node < nodes; ++node) {
			cout << node << " ";
		}
		cout << endl;
	}
}

void GenerateConstantWidthTree(int nodes, int width) {
  cout << 1 << endl;
  cout << nodes << endl;
  cout << 0 << ' ';
  int current_root = 1;
  int current_cnt = 0;
  for (int i = 1; i < nodes; ++i) {
    cout << current_root << ' ';
    ++current_cnt;
    if (current_cnt == width) {
      ++current_root;
      current_cnt = 0;
    }
  }
}

int main() {
	/* freopen(PROBLEM_ID".in", "w", stdout);
	 //GenerateConstantWidthTree(200000, 8);
   GenerateLongTree(200000);
	 return 0;*/
  

  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  cerr << tests << endl;
  for (int test_index = 0; test_index < tests; ++test_index) {
	  vvi tree = ReadTree();
    cerr << "Tree size = " << tree.size() << endl;
    int result = FindMinCost(tree);
    cout << "Case #" << test_index + 1 << ": " << result << endl;
    cerr << "Case #" << test_index + 1 << ": " << result << endl;
  }
  return 0;
}

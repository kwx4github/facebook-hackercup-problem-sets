#include <iostream>
#include <vector>
#include <queue>
#include <numeric>
#include <algorithm>

using namespace std;

void solve(int CASE) {
    int N;
    cin >> N;

    vector<int> parent_of(N+1);
    vector<vector<int>> children(N+1);
    vector<int> refer_cnt(N+1, 0);
    for(int i = 0; i < N; ++i) {
        int p;
        cin >> p;
        parent_of[i+1] = p;
        refer_cnt[p]++;
        children[p].push_back(i+1);
    }
    vector<int> cost(N+1, 0);
    queue<int> q;
    for(int i = 1; i <= N; ++i) {
        if(refer_cnt[i] == 0) {
            q.push(i);
        }
    }
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        vector<int> v;
        for(int c : children[node]) {
            v.push_back(cost[c]);
        }
        sort(begin(v), end(v));
        v.erase(unique(begin(v), end(v)), end(v));
        int cand = 1;
        for(int c : v) {
            if(c != cand) {
                break;
            }
            ++cand;
        }
        cost[node] = cand;
        if(--refer_cnt[parent_of[node]] == 0) {
            q.push(parent_of[node]);
        }
    }
    cost[0] = 0;
    const int ans = accumulate(begin(cost), end(cost), 0);
    cout << "Case #" << CASE << ": " << ans << endl;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);

    int N;
    cin >> N;
    for(int i = 1; i <= N; ++i) {
        solve(i);
    }
    return 0;
}

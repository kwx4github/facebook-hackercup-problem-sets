#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>
using namespace std;

const int N = 200000;
const int M = 25;
vector < int > g[N];
int dp[N][M];

int solve(int v, int color)
{
	if (dp[v][color] != -1) return dp[v][color];
	int res = color + 1;
	for (int i = 0; i < g[v].size(); i++)
	{
		int to = g[v][i];
		int best = 1e9;
		for (int j = 0; j < M; j++)
		{
			if (j != color) best = min(best, solve(to, j));
		}
		res += best;
	}
	return dp[v][color] = res;
}

int main()
{
//#ifdef _DEBUG
    freopen("corporate_gifting.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
//#endif
	int T; scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int n; scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			g[i].clear();
			for (int j = 0; j < M; j++) dp[i][j] = -1;
		}
		for (int i = 0; i < n; i++)
		{
			int to; scanf("%d", &to);
			if (to != 0) g[to - 1].push_back(i);
		}
		int ans = 1e9;
		for (int i = 0; i < M; i++) ans = min(ans, solve(0, i));
		printf("Case #%d: %d\n", t + 1, ans);
	}
    return 0;
}
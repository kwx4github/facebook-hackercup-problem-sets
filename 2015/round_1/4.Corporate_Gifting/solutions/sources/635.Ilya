#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 200 * 1000 + 13;
int n;
vector<int> g[N];

inline bool read()
{
	if (scanf ("%d", &n) != 1)
		return false;
		
	forn (i, n)
		g[i].clear();
		
	forn (i, n)
	{
		int pr;
		assert(scanf ("%d", &pr) == 1);
		
		pr--;
		
		if (pr != -1)
			g[pr].pb(i);
	}
	
	return true;
}

const int M = 30;
int d[M][N];

int calc (int v, int c)
{
	if (d[c][v] != -1)
		return d[c][v];
		
	d[c][v] = c + 1;
	
	forn (i, sz(g[v]))
	{
		int to = g[v][i];
		
		int res = INF;
		forn (j, M)
			if (j != c) 
				res = min(res, calc(to, j));
				
		d[c][v] += res;
	}
	
	return d[c][v];
}

inline void solve()
{
	memset(d, -1, sizeof d);

	int ans = INF;
	forn (i, M)
		ans = min(ans, calc(0, i));
		
	cout << ans << endl;
}

int main()
{
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);
	
	forn (test, testCnt)
	{
		assert(read());
		printf ("Case #%d: ", test + 1);
		solve();
	}
	
#ifdef SU2_PROJ
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

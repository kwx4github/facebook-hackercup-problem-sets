#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int n;
vector<vector<int> > trees;
int INF= 987654321;
int cache[200003][4];

void maketree(const vector<int>& v){
	for(int i = 1 ; i < v.size();i++){
		//
		trees[v[i]].push_back(i);
	}
}

inline int func(int index, int pvalue){
	int childsize = trees[index].size();
	if( childsize == 0){
		for(int i = 1 ; i <=3 ;i++){
			if(pvalue != i){
				return i;
			}
		}
	}
	int& ret = cache[index][pvalue];
	if(ret != -1)return ret;
	ret = INF;
	//자신의 값을 정함
	for(int i = 1 ;i <= 3 ;i++){
		if(pvalue != i){
			int temp = 0;
			//자식 노드의 최소값을 확인하면서
			for(int j = 0 ; j < trees[index].size() ;j++){
				int child = trees[index][j];
				temp +=func(child ,i);
			}
			ret = min(ret , temp + i);
		}
	}
	return ret;
}

void showtree(){
	for(int i = 0 ; i < n;i++){
		cout<< i<< "번째 노드의 자식: ";
		for(int j = 0 ; j < trees[i].size();j++){
			cout<< trees[i][j]<< " ";
		}
		cout<<endl;
	}
}
int main(){
	int c;
	cin >> c;
	int count = 1;
	while(c--){
		cin >>n;
		trees.clear();
		trees.resize(n+1);
		vector<int> v(n+1);
		for(int i = 1 ; i<= n ; i++){
			cin >> v[i]; 
		}
		
		maketree(v);
		//showtree();
		memset(cache , -1 , sizeof(cache));
		cout << "Case #" << count << ": "<< func(1,0) << endl;
		count++;
	}
}
#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define MR 20

using namespace std;

int DP[200001][MR];

vector<int> G[200001];
vector<int> order;
queue<int> cola;

pair<int, int> mn;

void solve(int node) {
	if (!G[node].size()) {
		DP[node][1] = 2;
		for (int i=2; i<MR; i++) {
			DP[node][i] = 1;
		}
	} else {
		for (int i=1; i<MR; ++i) {
			DP[node][i] = i;
		}

		for (auto it: G[node]) {
			for (int i=1; i<MR; ++i) {
				DP[node][i] += DP[it][i];
			}
		}

		mn = {-1, -1};
		for (int i = 1; i < MR; ++i) {
			if (mn.first == -1 || DP[node][i] < DP[node][mn.first]) {
				mn.first = i;
			}
		}

		for (int i = 1; i < MR; ++i) {
			if (i == mn.first) continue;
			if (mn.second == -1 || DP[node][i] < DP[node][mn.second]) {
				mn.second = i;
			}
		}

		int tmp = DP[node][mn.second];
		for (int i = 0; i < MR; ++i) {
			DP[node][i] = DP[node][mn.first];
		}
		DP[node][mn.first] = tmp;
	}
}

int main() {
	int T, N, prnt, test = 0, nxt;
	cin >> T;

	while (T--) {
		cin >> N;

		// Make tree structure
		for (int i=1; i<=N; i++) {
			cin >> prnt;
			if (prnt) {
				G[prnt].push_back(i);
			}
		}

		// Get node order by bfs
		order.clear();
		cola.push(1);
		while (!cola.empty()) {
			nxt = cola.front();
			order.push_back(nxt);

			for (auto it: G[nxt]) {
				cola.push(it);
			}
			cola.pop();
		}

		// Solve nodes in order
		for (int i=order.size()-1; i >=0; i--) {
			solve(order[i]);
			G[order[i]].clear();
		}

		// Print it ;)
		int mn = DP[1][1];
		for (int i = 1; i < MR; ++i) {
			if (DP[1][i] < mn) {
				mn = DP[1][i];
			}
		}

		cout << "Case #" << ++test << ": " << mn << endl;
	}
	
}
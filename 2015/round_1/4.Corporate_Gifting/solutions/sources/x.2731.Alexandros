require 'set'

def solve n, managers
  managers = Hash[managers.sort{|(_ka, va), (_kb, vb)| vb[:employees] <=> va[:employees]}]
  spent = 0
  managers.each do |mgr, info|
    if info[:employees] > 0
      gift = (1..n).detect do |i|
        !(info[:given].include?(i))
      end
      info[:received] << gift
      spent += gift * info[:employees]
    end
    if m0 = managers[info[:manager]]
      gift = (1..n).detect do |i|
        !(
          info[:received].include?(i) ||
          m0[:given].include?(i)
        )
      end
      spent += gift
      info[:given] << gift
      m0[:received] << gift
    end
  end
  spent
end

def get_args
  n = $stdin.gets.to_i
  employees = $stdin.gets.split(/\s+/).map(&:to_i)
  managers = {}
  (n-1).downto(0) do |i|
    m_id = employees[i]
    id = i + 1
    m = managers[m_id] ||= {given: Set.new, received: Set.new, employees: 0}
    if e = managers[id] # employee is a manager
      e[:manager] = m_id
    else
      m[:employees] += 1
    end
  end
  [n, managers]
end

count = $stdin.gets.to_i
count.times do |i|
  $stderr.print "Case ##{i+1} of #{count}: "
  solution = solve( *get_args )
  $stderr.puts solution
  puts "Case ##{i+1}: #{solution}"
end

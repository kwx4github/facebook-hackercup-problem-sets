#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <deque>
#include <string>
#include <algorithm>
#include <stack>

using namespace std;

struct node // a structure to represent tree nodes 
{
  int id;
  int boss;
  int gift;
  int stage;
  vector<int> child;
  vector<bool> taken;

  node() : id(0), boss(0), gift(0), stage(0) {}
};

int whatGift( vector<node>& nodes, int id )
{
  int size = nodes.size();
  int gift = 0;
  for (int i = 1; i <= size; ++i) {
    if (!nodes[id].taken[i]) {
      gift = i;
      break;
    }
  }
  nodes[nodes[id].boss].taken[gift] = true;
  return gift;
}


void solve( vector<node>& nodes, int id = 1 )
{
  stack<int> current;
  current.push(id);

  while(!current.empty()) {
    id = current.top(); current.pop();

    if (!nodes[id].stage) {
      nodes[id].stage = 1;
      current.push(id);

      for (vector<int>::iterator it = nodes[id].child.begin(); it != nodes[id].child.end(); ++it ) {
        current.push(nodes[*it].id);
      }
    } else {
      nodes[id].gift = whatGift( nodes, id );
    }
  }
}


/*
void solve( vector<node>& nodes, int id )
{
  for (vector<int>::iterator it = nodes[id].child.begin(); it != nodes[id].child.end(); ++it ) {
    solve(nodes, nodes[*it].id);
  }
  nodes[id].gift = whatGift( nodes, id );
}
*/

int main (int argc, char *argv[])
{
  int T, N;
  string s, w;
  cin >> T;
  for(int i = 0; i<T; ++i) {
    cin >> N;

    //load
    vector<node> _nodes;
    _nodes.resize(N+1);
    for(int j = 1; j<=N; ++j) {
      int boss = 0;
      cin >> boss;
      _nodes[j].id = j;
      _nodes[j].boss = boss;
    }
    // build children links
    for(int j = 1; j<=N; ++j) _nodes[_nodes[j].boss].child.push_back(j);

//printf("check %d\n", i);
    solve(_nodes, 1);

    int total = 0;
    for(int j = 1; j<=N; ++j) total += _nodes[j].gift;
    printf("Case #%d: %d\n", i+1, total );
  }
  return 0;
}

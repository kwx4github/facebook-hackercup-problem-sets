import java.io.*;
import java.util.*;

class Main
{
    public static void main(String[] args)
    {
    	Main mywork = new Main();
    	mywork.Begin();
    }
    
    //Double represents a stress
    class Double 
    {
    	int full;
    	int free;
    	
    	public Double (int a, int b)
    	{
    		full = a;
    		free = b;
    	}
    }
    
    void algo (Double tab[][], int mod, int b)
    {
    	tab[0][0] = new Double(0, 0);
    	tab[1][0] = new Double (1, 0);
    	tab[0][1] = new Double (0, 1);
		for (int k = 1; k < 2001; k ++)
		{
			tab[k][0] = new Double (0, 1);
		}
		for (int k = 1; k < 2001; k ++)
		{
			tab[0][k] = new Double (1, 0);
		}
    	for (int j = 1; j < 2001; j++)
    	{
	    	for (int i = 1; i < 2001; i++)
    		{
    			if (i > j)
    			{
    				if (j != b)
    				{
    					tab[i][j].full = 0;
    				}
    				else
    				{
    					tab[i][j].full = tab[i-1][j].full;
    				}
    				tab[i][j].free = (tab[i - 1][j].free + tab[i][j - 1].free) % mod;
    			}
    			else
    			{
    				tab[i][j].full = (tab[i - 1][j].full + tab[i][j - 1].full) % mod;
    				tab[i][j].free = 0;
    			}
    		}
    	}
    	
    }
    
    Double ret (Double tab[][], int a, int b)
    {
    	return (tab[a][b]);
    }
    
    /* 
     * a is our current score
     * b their current score
     * ts the total current score (useless)
     * es their maximum score
     * mod is 1000000007
     */
    /*Double algo (int a, int b, int ts, int es, int mod)
    {
    	
    	Double p = new Double (0, 0);
    	if (ts == 1)
    	{
    		if (a == 1 && b == 0)
    		{
    			p.full = -1;
    			p.free = 1;
    		}
    		if (b == 1 && a == 0)
    		{
    			p.full = 1;
    			p.free = -1;
    		}
    	}
    	else
    	{
    		//number of score > 1
    		//computation of the patacouffin
    		Double ptemp1 = algo (a - 1, b, ts - 1, es, mod);
    		Double ptemp2 = algo (a, b- 1, ts - 1, es, mod);
    		//System.out.println(ptemp1.free);
    		if (a > b)
    		{
    			if (ptemp1.free != -1)
    			{
    				if (ptemp2.free != -1)
    				{
    					p.free = ptemp1.free + ptemp2.free % mod;
    				}
    				else
    				{
    					p.free = ptemp1.free;
    				}
    			}
    			else
    			{
    				if (ptemp2.free != -1)
    				{
    					p.free = ptemp2.free;
    				}
    				else
    				{
    					p.free = -1;
    				}
    			}
    			if (b == es)
    			{
    				if (ptemp1.full != -1)
    				{
    					if (ptemp2.full != -1)
    					{
    	    				p.full = ptemp1.full + ptemp2.full % mod;
    					}
    					else
    					{
    						p.full = ptemp1.full;
    					}
    				}
    				else
    				{
    					if (ptemp2.full != -1)
    					{
    						p.full = ptemp2.full;
    					}
    					else
    					{
    						p.full = -1;
    					}
    				}
    			}
    			else
    			{
    				p.full = -1;
    			}
    		}
    		else
    		{
				if (ptemp1.full != -1)
				{
					if (ptemp2.full != -1)
					{
						p.full = ptemp1.full + ptemp2.full % mod;
					}
					else
					{
						p.full = ptemp1.full;
					}
				}
				else
				{
					if (ptemp2.full != -1)
					{
						p.full = ptemp2.full;
					}
					else
					{
						p.full = -1;
					}
				}
				p.free = -1;
    		}
    	}
    	return p;
    }
    */
    
    
    void init (Double tab[][])
    {
    	for (int i =0; i < 2001; i++)
    	{
    		for (int j = 0; j < 2001; j++)
    		{
    			tab[i][j] = new Double(0, 0); 
    		}
    	}
    }
    
    void Begin()
    {
    	int t; int a, b;
    	String ch;    	
		String mystr[];
		Double answer;
		Double tab[][] = new Double[2001][2001];
		init(tab);
		int mod = 1000000007;
				
		Scanner sc = new Scanner(System.in);
		ch = sc.nextLine();
		ch.trim();
		t = Integer.parseInt(ch); // Number of cases
		for (int i=1; i <= t; i++)
		{
			try
			{
				ch = sc.nextLine();
				ch.trim();
				mystr = ch.split("-");
				a = Integer.parseInt(mystr[0]);
				b = Integer.parseInt(mystr[1]);
				init(tab);
				algo(tab, mod, b);
				answer = ret(tab, a, b);
				System.out.println("Case #" + i + ": " + answer.free + " " + answer.full);
			
			}
			catch (Exception e)
			{
				System.err.print("IOerror"); //TODO to remove
				break;
			}
		}
    }
}

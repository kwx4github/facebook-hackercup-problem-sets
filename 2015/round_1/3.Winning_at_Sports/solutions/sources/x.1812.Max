#include <bits/stdc++.h>

long long mod = 1000000000 + 7;
const int N = 5010;
long long C[N][N], power_2[N], dp[N][N];

void precalc() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j <= i; j++) {
            if (j == 0 || j == i)
                C[i][j] = 1;
            else
            {
                C[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod;
            }
        }
    }

    dp[0][0] = 1;
    for (int i = 1; i < N; i++) {
        for (int j = 0; j <= i; j++) {
            if (j == 0)
                dp[i][j] = 1;
            else if (j == i)
                dp[i][j] = dp[i][j-1];
            else
            {
                dp[i][j] += (dp[i][j-1]+dp[i-1][j]) % mod;
                dp[i][j] %= mod;
            }
        }
    }

    power_2[0] = 1;
    for (int i = 1; i < N; i++) {
        power_2[i] = (power_2[i-1]*2) % mod;
    }
}

long long Catalan_number(int n) {
    long long res = (C[2*n][n] - C[2*n][n-1]+mod) % mod;
    return res;
}

void solve() {
    
    
    int a, b;
    assert(scanf("%d-%d", &a, &b));

    long long answer1 = 0;
    for (int i = 0; i <= b-1; i++) {
        answer1 += (dp[b-1][i] * C[a-b + (b-i) - 1][b-i]) % mod;
        answer1 %= mod;
    }

    printf("%lld %lld\n", answer1, Catalan_number(b));
}

int main() {

    precalc();

    int t;
    assert(scanf("%d", &t));
    for (int i = 0; i < t; i++) {
        printf("Case #%d: ", i+1);
        solve();
    }
}

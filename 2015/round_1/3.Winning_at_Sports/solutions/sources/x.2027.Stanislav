#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <cassert>
#include <numeric>
#include <sstream>
#include <limits>
using namespace std;

#define REQUIRE(cond, message) \
    do { \
        if (!(cond)) { \
            std::cerr << message << std::endl; \
            assert(false); \
        } \
    } while (false)

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i <= int(n); ++i)
#define forv(i, v) forn(i, (v).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef long double ld;

template<typename T>
inline int popcount(T t) {
    if (std::numeric_limits<T>::digits <=
                            std::numeric_limits<unsigned int>::digits) {
        return __builtin_popcount(t);
    } else {
        return __builtin_popcountll(t);
    }
}

const ld EPS = 1e-8;
const ld PI = acosl(0.0) * 2;

int parseInt(const string& s)
{
    istringstream is(s);
    int res;
    is >> res;
    return res;
}

pii readScore()
{
    string s;
    cin >> s;
    string a = s.substr(0, s.find('-'));
    string b = s.substr(a.size() + 1, s.size());
    return mp(parseInt(a), parseInt(b));
}

const int NMAX = 2005;
const int MOD = 1000000007;
int win0[NMAX][NMAX];
int win1[NMAX][NMAX];

void update(int& d, int v)
{
    d += v;
    if (d >= MOD) d -= MOD;
}

void precalc()
{
    win0[1][0] = 1;
    win1[0][1] = 1;
    for (int i = 0; i + 1 < NMAX; ++i) {
        for (int j = 0; j + 1 < NMAX; ++j) {
            if (win0[i][j]) {
                update(win0[i + 1][j], win0[i][j]);
                if (i > j + 1) {
                    update(win0[i][j + 1], win0[i][j]);
                }
            }
            if (win1[i][j]) {
                update(win1[i][j + 1], win1[i][j]);
                if (i + 1 <= j) {
                    update(win1[i + 1][j], win1[i][j]);
                }
            }
        }
    }
}

string solveTest(int first, int second)
{
    ostringstream res;
    res << win0[first][second] << " " << win1[second][second];
    return res.str();
}

void solve()
{
    precalc();
    int tc;
    cin >> tc;
    forn(it, tc) {
        pii score = readScore();
        cout << "Case #" << it + 1 << ": " << solveTest(score.first, score.second) << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}

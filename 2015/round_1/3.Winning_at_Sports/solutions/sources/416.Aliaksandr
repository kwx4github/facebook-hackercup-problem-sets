#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <utility>
#include <numeric>
#include <fstream>

using namespace std;

#define		ALL(c)	(c).begin(),(c).end()
#define		SZ(c)	int((c).size())
#define		LEN(s)	int((s).length())
#define		FOR(i,n)	for(int i=0;i<(n);++i)
#define		FORD(i,a,b)	for(int i=(a);i<=(b);++i)
#define		FORR(i,a,b)	for(int i=(b);i>=(a);--i)

typedef istringstream iss;
typedef ostringstream oss;
typedef long double ld;
typedef long long i64;
typedef pair<int,int> pii;

typedef vector<i64> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;

typedef vector<ld> vd;
typedef vector<vd> vvd;

typedef vector<string> vs;

const i64 d18 = 1000000000000000000LL;
const ld eps = 1e-9;
const ld pi = atan2(0.0, -1.0);
template<class T> T sqr(T a) { return a * a; }
i64 abs(i64 a) { return (a >= 0) ? a : -a; }

ofstream LOG("log.txt");

ifstream fin;
ofstream fout;

const i64 MOD = 1000000007;

const int maxN = 2000;
vvi f(maxN+1, vi(maxN+1, 0));
vvi g(maxN+1, vi(maxN+1, 0));

void solve_case(int TN)
{
	string score;
	fin >> score;
	replace(ALL(score), '-', ' ');
	int A, B;
	iss(score) >> A >> B;

	i64 r1 = f[A][B];
	i64 r2 = g[B][B];

	fout << "Case #" << TN << ": " << r1 << " " << r2 << endl;
	cout << "Case #" << TN << ": " << r1 << " " << r2 << endl;
}

int main()
{
	f[0][0] = 1;
	g[0][0] = 1;
	FORD(i, 1, 2*maxN)
	{
		FORD(a, 0, maxN)
		{
			if (a > i) break;

			int b = i - a;
			if (b > maxN) continue;

			if (a - b > 1 || a == 1 && b == 0)
				f[a][b] += f[a-1][b];

			if (a > b && b > 0)
				f[a][b] += f[a][b-1];

			f[a][b] %= MOD;

			if (b > a)
				g[a][b] += g[a][b-1];

			if (b >= a && a > 0)
				g[a][b] += g[a-1][b];

			g[a][b] %= MOD;
		}
	}

	fin.open("C.in"); 
	fout.open("C.out");

	int T; 
	fin >> T;
	FOR(tt, T)
	{
		solve_case(tt+1);
	}

	return 0;	
}

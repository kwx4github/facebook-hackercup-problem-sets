package competition;

import java.io.*;
import java.math.*;
import java.util.*;

public class Was {
  private static BufferedReader br;
  private static StringTokenizer st;
  private static PrintWriter pw;
  private static final String IN = "c:\\TEMP\\IN.txt";
  private static final String OUT = "c:\\TEMP\\OUT.txt";
  private static final boolean DEBUG = true;
  private static String line;
  
  /////////////////
  // MAIN SCRIPT //
  /////////////////
  
  static int[][] LookUpTableFree = new int[2015][2015];
  public static void main(String[] args) throws IOException       {
    createIO();
    creatLookUpTableFree();
    
    final int MAX_NUM_CASE = readInt();
    for(int qq = 1; qq <= MAX_NUM_CASE; qq++)       {
      line = nextToken();
      String[] lineParts = line.split("-");
      int goalMe = Integer.parseInt(lineParts[0]) +1;
      int goalOp = Integer.parseInt(lineParts[1]) +1;
      println("Case #" + qq + ": " + LookUpTableFree[goalMe][goalOp] + " " + LookUpTableFree[goalOp][goalOp]);
    }
    pw.close();
  }
  
  private static void creatLookUpTableFree() {
    for (int x = 2; x <= 2010; x++) { LookUpTableFree[x][1] = 1;}
    for (int y = 2; y <= 2010; y++) {
      LookUpTableFree[y+1][y] = LookUpTableFree[y+1][y-1];
      for (int x = y+2; x <= 2010; x++) {
        LookUpTableFree[x][y] = (LookUpTableFree[x][y-1] + LookUpTableFree[x-1][y] ) % 1000000007;
      }
    }
    
    for (int y = 2; y <= 2010; y++) { LookUpTableFree[1][y] = 1;}
    for (int x = 2; x <= 2010; x++) {
      LookUpTableFree[x][x] = LookUpTableFree[x-1][x];
      for (int y = x+1; y <= 2010; y++) {
        LookUpTableFree[x][y] = (LookUpTableFree[x][y-1] % 1000000007 + LookUpTableFree[x-1][y]) % 1000000007;
      }
    }
  }

  //////////////////////
  // HELPER FUNCTIONS //
  //////////////////////
  private static void print(Object s){
    if (DEBUG){ System.out.print(s); } 
    else { pw.print(s); }
  }
  private static void println(Object s){
    if (DEBUG){ System.out.println(s); } 
    else { pw.println(s); }
  }
  private static long readLong() throws IOException       {
    return Long.parseLong(nextToken());
  }
  private static double readDouble() throws IOException   {
    return Double.parseDouble(nextToken());
  }
  private static int readInt() throws IOException {
    return Integer.parseInt(nextToken());
  }
  private static String nextToken() throws IOException    {
    while(st == null || !st.hasMoreTokens())        {
      if(!br.ready()) {
        pw.close();
        System.exit(0);
      }
      line = br.readLine().trim();
      st = new StringTokenizer(line);
    }
    return st.nextToken();
  }
  private static void createIO() throws FileNotFoundException{
    br = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(IN))));
    if (DEBUG){
      pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    } else {
      pw= new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(OUT))));
    }    
  }
}

def solve():
    cf=helper(0,0,"full")
    cl=helper(0,0,"less")
    return str(cl)+" "+str(cf)

def helper(s1,s2,state):
    if (s1,s2,state) in d:
        return d[(s1,s2,state)]
    c=0
    if s1==f1 and s2==f2 :
        return 1
    if state=="less":
        if s1-s2>=2 and s2<f2:
            c+=helper(s1,s2+1,"less")
        if s1<f1:
            c+=helper(s1+1,s2,"less")
    if state=="full":
        if s2<f2:
            c+=helper(s1,s2+1,"full")
        if s1<f1 and (s2-s1>=1 or s2==f2):
            c+=helper(s1+1,s2,"full")
    d[(s1,s2,state)]=c % 1000000007
    return c%1000000007
            
        

fin=open('../in','r') ; fout=open('../out','w')
cases=int(fin.readline().strip())
import sys
sys.setrecursionlimit(150000)
for case in range(1,cases+1):
    d=dict()
    print case
    f1,f2=[int(x) for x in fin.readline().strip().split("-")]
    fout.write("Case #"+str(case)+": "+str(solve())+"\n")
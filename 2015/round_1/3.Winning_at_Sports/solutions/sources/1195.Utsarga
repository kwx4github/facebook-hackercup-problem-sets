mod = 1000000007
max_score = 2000
max_result = mod/max_score

# Taken from 
# http://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python
######################################
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a):
    g, x, y = egcd(a, mod)
    return x % mod
######################################

def multiply_range_mod(a, b):
	result = 1
	for i in range(a, b+1):
		result *= i
		if result > max_result:
			result = result % mod
	return result % mod

def stressfree(a, b):
	return (ncr_mod(a+b-1, a-1) - ncr_mod(a+b-1, a)) % mod

def stressful(a, b):
	return multiply_range_mod(b+2, 2*b)*modinv(multiply_range_mod(1, b)) % mod

def ncr_mod(n, k):
	if n < k:
		return 0
	k = max(k, n-k)
	return multiply_range_mod(k+1, n)*modinv(multiply_range_mod(1, n-k)) % mod

T = int(raw_input())
for t in range(1, T+1):
	(a, b) = [int(i) for i in raw_input().split('-')]
	print "Case #%d: %d %d" % (t, stressfree(a, b), stressful(a, b))


#include <bits/stdc++.h>
#define MOD 1000000007
#define MAX_N 2005
using namespace std;

typedef long long int lld;

int n, p[2];
lld dp_calm[MAX_N][MAX_N], dp_stress[MAX_N][MAX_N];

lld calc_calm(int c0, int c1){
  if(c0 == c1)
    return 0;
  if(c0 == p[0] && c1 == p[1])
    return 1;
  if(dp_calm[c0][c1] == -1){
    dp_calm[c0][c1] = 0;
    if(c0 < p[0])
      dp_calm[c0][c1] = (dp_calm[c0][c1] + calc_calm(c0 + 1, c1)) % MOD;
    if(c1 < p[1])
      dp_calm[c0][c1] = (dp_calm[c0][c1] + calc_calm(c0, c1 + 1)) % MOD;
  }
  return dp_calm[c0][c1];
}

lld calc_stress(int c0, int c1){
  if(c0 == p[0] && c1 == p[1])
    return 1;
  if(dp_stress[c0][c1] == -1){
    dp_stress[c0][c1] = 0;
    if(c0 < c1 || c1 == p[1])
      dp_stress[c0][c1] = (dp_stress[c0][c1] + calc_stress(c0 + 1, c1)) % MOD;
    if(c1 < p[1])
      dp_stress[c0][c1] = (dp_stress[c0][c1] + calc_stress(c0, c1 + 1)) % MOD;
  }
  return dp_stress[c0][c1];
}

int main(){
  int T;

  scanf("%d", &T);
  for(int ct = 1; ct <= T; ct ++){
    scanf("%d-%d", &p[0], &p[1]);
    memset(dp_calm, -1, sizeof dp_calm);
    memset(dp_stress, -1, sizeof dp_stress);
    printf("Case #%d: %lld %lld\n", ct, calc_calm(1, 0), calc_stress(0, 0));
  }

  return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define FILE_NAME ""

using namespace std;

const long long MOD = 1000000007;
const long long max_n = 2001;
long long dp1[max_n][max_n];
long long dp2[max_n][max_n];

void DP1()
{
	for (long long i = 1; i < max_n; ++i)
	{
		for (long long j = 0; j < i; ++j)
		{
			dp1[i][j] = 0;
			dp1[1][0] = 1;
			if (i - 1 > j)
				dp1[i][j] += dp1[i - 1][j];
			if (j > 0)
				dp1[i][j] += dp1[i][j - 1];
			dp1[i][j] %= MOD;
		}
	}
}

void DP2()
{
	for (long long i = 0; i < max_n; ++i)
	{
		for (long long j = i; j < max_n; ++j)
		{
			dp2[i][j] = 0;
			dp2[0][0] = 1;
			if (j - 1 >= i)
				dp2[i][j] += dp2[i][j-1];
			if (i > 0)
				dp2[i][j] += dp2[i-1][j];
			dp2[i][j] %= MOD;
		}
	}
}

int main()
{
	freopen(FILE_NAME ".in", "r", stdin);
	freopen(FILE_NAME ".out", "w", stdout);

	DP1();
	DP2();

	int numTestCases = 0;
	cin >> numTestCases;
	for (int Case = 1; Case <= numTestCases; ++Case)
	{
		long long a, b;
		char c;
		cin >> a >> c >> b;
		
		cout << "Case #" << Case << ": ";
		cout << dp1[a][b] << ' ' << dp2[b][b] << endl;
	}

	return 0;
}

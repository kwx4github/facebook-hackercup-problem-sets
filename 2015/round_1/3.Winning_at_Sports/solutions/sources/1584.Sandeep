#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <utility>
#include <cassert>
#include <string>
#include <cmath>
#include <cstdlib>
#include <algorithm>

using namespace std;

typedef long long LL;
typedef vector < int > vi;
typedef vector < vi > vvi;

#define pb push_back
#define mp make_pair

const int MAXN = (int)(1e5 + 9);
const int MOD  = (int)(1e9 + 7);

int tc,scoreA,scoreB;
LL DP_A[2009][2009],DP_B[2009][2009];

inline void solve1() {
    for(int i = 1;i <= scoreA;++i) {
       DP_A[i][0] = 1;
    }

    for(int i = 2;i <= scoreA;++i) {
      for(int j = 0;j <= min(scoreB,i-1);++j) {
      	 DP_A[i][j] = 0LL;
         if(j > 0)        DP_A[i][j] = DP_A[i][j] + DP_A[i][j-1];
         if((i - j) > 1)  DP_A[i][j] = DP_A[i][j] + DP_A[i-1][j];
         if(DP_A[i][j] >= MOD)
         DP_A[i][j] = DP_A[i][j] % MOD;
       }
    }
}

inline void solve2() {
   for(int i = 0;i <= scoreB;++i) {
   	 DP_B[0][i] = 1LL;
   }
   for(int i = 1;i <= scoreA;++i) {
   	 for(int j = 0;j <= scoreB;++j) {
   	 	if(i > j) {
   	 		if(j < scoreB) DP_B[i][j] = 0LL;
   	 		else DP_B[i][j] = DP_B[i - 1][j];
   	 	} else if(i < j) {
   	 		DP_B[i][j] = DP_B[i - 1][j] + DP_B[i][j - 1];
   	 	} else {
   	 		DP_B[i][j] = DP_B[i - 1][j];
   	 	}
   	 	if(DP_B[i][j] >= MOD) DP_B[i][j] %= MOD;
   	 }
   }
}

inline void go() {
	solve1();
	solve2();
}  

int main () {
    
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    scanf("%d",&tc);

    for(int z = 1;z <= tc;++z) {
       scanf("%d-%d",&scoreA,&scoreB);
       go();
       printf("Case #%d: %lld %lld\n",z,DP_A[scoreA][scoreB],DP_B[scoreA][scoreB]);
    }

	return 0;
}
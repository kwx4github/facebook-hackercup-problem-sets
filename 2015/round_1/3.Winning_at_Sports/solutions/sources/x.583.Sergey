#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int nmax = 2020;
const int mod = 1e9 + 7;

int dp1[nmax][nmax];
int dp2[nmax][nmax];

int calc1(int a, int b) {
	if (dp1[a][b] != -1) return dp1[a][b];
	if (b == 0) return dp1[a][b] = 1;
	dp1[a][b] = 0;
	if (a - 1 > b) dp1[a][b] += calc1(a-1, b);
	if (b > 0) dp1[a][b] += calc1(a, b-1);
	while (dp1[a][b] >= mod) dp1[a][b] -= mod;
	return dp1[a][b];
}

int calc2(int a, int b) {
	if (dp2[a][b] != -1) return dp2[a][b];
	if (a == 0) return dp2[a][b] = 1;
	dp2[a][b] = 0;
	if (a > 0) dp2[a][b] += calc2(a-1, b);
	if (b - 1 >= a) dp2[a][b] += calc2(a, b-1);
	while (dp2[a][b] >= mod) dp2[a][b] -= mod;
	return dp2[a][b];
}

void solve() {
	int a, b;
	scanf("%d-%d", &a, &b);
	cout << calc1(a, b) << " " << calc2(b-1, b) << endl;
}

int main ()
{
	freopen("input.txt", "rt", stdin);
//	freopen("output.txt", "wt", stdout);

	memset(dp1, 255, sizeof dp1);
	memset(dp2, 255, sizeof dp2);
	int tst;
	cin >> tst;
	forn(i, tst) {
		printf("Case #%d: ", i + 1);
		solve();
	}
	

	return 0;
}

#include <cstdio>
#include <algorithm>

using namespace std;

const int MOD = 1e9 + 7;
const int N = 2000 + 10;
int dp[N][N];

int main() {
  freopen("C.in", "r", stdin);
  freopen("C.out", "w", stdout);
  int cas;
  scanf("%d", &cas);
  for (int num = 1; num <= cas; ++num) {
    int n, m;
    scanf("%d-%d", &n, &m);
    if (n <= m) {
      printf("Case #%d: %d %d\n", num, 0, 0);
      continue;
    }
    for (int i = 0; i <= n; ++i) dp[i][m] = 1;
    for (int i = 0; i <= m; ++i) dp[n][i] = 1;
    // stress-free
    for (int i = n - 1; i >= 0; --i) {
      for (int j = m - 1; j >= 0; --j) {
        dp[i][j] = 0;
        if (i + 1 <= n) dp[i][j] = (dp[i][j] + dp[i + 1][j]) % MOD;
        if (j + 1 <= m && i > j + 1) dp[i][j] = (dp[i][j] + dp[i][j + 1]) % MOD;
      }
    }
    int ret_0 = dp[0][0];
    // stressful
    for (int i = n - 1; i >= 0; --i) {
      for (int j = m - 1; j >= 0; --j) {
        dp[i][j] = 0;
        if (i + 1 <= n && (i + 1 <= j || j == m)) dp[i][j] = (dp[i][j] + dp[i + 1][j]) % MOD;
        if (j + 1 <= m) dp[i][j] = (dp[i][j] + dp[i][j + 1]) % MOD;
      }
    }
    int ret_1 = dp[0][0];
    printf("Case #%d: %d %d\n", num, ret_0, ret_1);
  }
  return 0;
}

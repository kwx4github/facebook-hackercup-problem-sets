#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
using namespace std;

const int Maxn = 2005;
const int mod = 1000000007;

int t;
int my, oth;
int dp[Maxn][Maxn];

int toInt(const string &s)
{
	stringstream ss(s);
	int res; ss >> res;
	return res;
}

int main()
{
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		string s; cin >> s;
		int p = s.find("-");
		my = toInt(s.substr(0, p)); oth = toInt(s.substr(p + 1));
		printf("Case #%d: ", tc);

		fill((int*)dp, (int*)dp + Maxn * Maxn, 0); dp[0][0] = 1;
		for (int i = 0; i <= my; i++)
			for (int j = 0; j <= i && j <= oth; j++) if (dp[i][j]) {
				if (i < my) dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod;
				if (j + 1 < i && j < oth) dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % mod;
			}
		printf("%d ", dp[my][oth]);

		fill((int*)dp, (int*)dp + Maxn * Maxn, 0); dp[0][0] = 1;
		for (int i = 0; i <= my; i++)
			for (int j = 0; j <= oth; j++) if (dp[i][j]) {
				if ((j == oth || i < j) && i < my) dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod;
				if (j < oth) dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % mod;
			}
		printf("%d\n", dp[my][oth]);
	}
	return 0;
}
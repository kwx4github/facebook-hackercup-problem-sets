#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cassert>
using namespace std;
typedef long long LL;

template<typename T>
struct DP2
{
	const int N1, N2;
	vector<T> data;
	DP2(int N1, int N2, const T& t = T())
		: N1(N1), N2(N2), data(N1*N2, t) { assert(data.size()*sizeof(T)<(1<<28)); }
	T& operator()(int i1, int i2)
		{ return data[ (i1*N2)+i2 ]; }
	void swap(DP2& rhs)
		{ data.swap(rhs.data); }
};

static const unsigned MODVAL = 1000000007;
struct mint
{
	unsigned val;
	mint():val(0){}
	mint(int      x):val(x%MODVAL) {}
	mint(unsigned x):val(x%MODVAL) {}
	mint(LL       x):val(x%MODVAL) {}
};
mint& operator+=(mint& x, mint y) { return x = x.val+y.val; }
mint& operator-=(mint& x, mint y) { return x = x.val-y.val+MODVAL; }
mint& operator*=(mint& x, mint y) { return x = LL(x.val)*y.val; }
mint operator+(mint x, mint y) { return x+=y; }
mint operator-(mint x, mint y) { return x-=y; }
mint operator*(mint x, mint y) { return x*=y; }

mint yoyu(int A, int B)
{
	DP2<mint> dp(A+1, B+1);

	for(int a=0; a<=A; ++a)
	for(int b=0; b<=B; ++b)
	{
		if(a==0 && b==0)
			dp(a,b) = 1;
		else if(a>b) {
			if(a) dp(a,b) += dp(a-1, b);
			if(b) dp(a,b) += dp(a, b-1);
		}
	}

	return dp(A,B);
}

mint giri(int A, int B)
{
	DP2<mint> dp(A+1, B+1);

	for(int a=0; a<=A; ++a)
	for(int b=0; b<=B; ++b)
	{
		if(a==0 && b==0)
			dp(a,b) = 1;
		else if(a<=b || b==B) {
			if(a) dp(a,b) += dp(a-1, b);
			if(b) dp(a,b) += dp(a, b-1);
		}
	}

	return dp(A-1,B);
}

pair<int,int> solve(int A, int B)
{
	return make_pair(yoyu(A,B).val, giri(A,B).val);
}

int main()
{
	int T; cin>>T;
	for(int C=1; C<=T; ++C)
	{
		cout << "Case #" << C << ": ";

		string s; cin>>s;
		s[s.find('-')] = ' ';

		stringstream ss(s);
		int A, B; ss>>A>>B;

		pair<int,int> ans = solve(A,B);
		cout << ans.first << " " << ans.second << endl;
	}
}

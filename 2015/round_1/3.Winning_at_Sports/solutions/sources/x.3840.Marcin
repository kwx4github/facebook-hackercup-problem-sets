#include <cstdio>
#include <cmath>
#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>

using namespace std;

const long long int mod = 1000000007;

long long int fact(long long int n) {
    long long int res = 1;
    for(long long int i = 2; i <= n; i++) res = (res*i) % mod;
    return res;
}

long long int inv(long long int a) {
    // a^(p-2);
    long long int c = 1;
    long long int p = mod-2;
    while(p) {
        if(p % 2 == 1) {
            c = (c*a)%mod;
        }
        a = (a*a)%mod;
        p >>= 1;
    }
    return c;
}

long long int coef(long long int n, long long int b) {
    return (fact(n) * inv((fact(b)*fact(n-b)) % mod) ) % mod;
}

long long int paths(long long int a, long long int b) {
    vector<long long int> powA, powB;
    long long int res = ((( (a-b)*coef(a+b, b)) % mod) * inv(a+b)) % mod;
    return res;
}

int main() {
    int z;
    scanf("%d", &z);
    for(int t = 1; t <= z; t++) {
        long long int a, b;
        string scores;
        cin >> scores;
        int k = 1;
        while(k < (int)scores.size() && scores[k] != '-') k++;
        a = strtol(scores.substr(0, k+1).c_str(), NULL, 10);
        b = strtol(scores.substr(k+1).c_str(), NULL, 10);

        long long int stress_free = paths(a, b);
        long long int  stress_full = 0;
        for(int i = 0; i < b; i++) stress_full = (stress_full + paths(b, i)) % mod;
        printf("Case #%d: %lld %lld\n", t, stress_free, stress_full);
    }

    return 0;
}

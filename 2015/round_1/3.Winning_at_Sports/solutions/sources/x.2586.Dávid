MOD = 1000000007
# could precompute 2000-1999 and then give back appropriate entries, but
# this will do.                

def solve(M, O):
    # kinda like Catalan numbers. Only calculate stress-free, can get stressful from it
    if O is 0:
        return (1, 0)
    M += 1
    O += 1
    # ^ upper bounds
    grid = [ [0 for i in range(O)] for k in range(M) ]
    grid[1][0] = 1
    for m in range(2, M):
        for o in range(0, min(m, O) ):
            # do the recursive calls (it's ok to take diagonal = 0)
#            print (m, o)
            if o is 0:
                grid[m][o] = grid[m-1][o]
            else:
                grid[m][o] = (grid[m-1][o] + grid[m][o-1]) % MOD
    return (grid[m][o], grid[o+1][o])

    
T = int(raw_input())
for t in range(1, T+1):
    M, O = map(int, raw_input().split("-"))
    print 'Case #{0}: {1}'.format(t, " ".join(map(str, solve(M, O))) )

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;


public class Solution3 {
	private static final int MAX_SCORE = 2001;
	private static final int MODULE = 1000000007;
	private Result[][] r;
	
	public static void main(String[] args){
		System.out.println("Problem3.Solution.main started");
		Solution3 solution = new Solution3();
		TestCase[] input = solution.readFile(args[0]);
		solution.process(input);
		solution.writeFile(args[1], input);
	}	
	
	private TestCase[] readFile(String fileName) {
		TestCase[] result = null;
		FileReader fr = null;
		BufferedReader br = null;
		try {
			fr = new FileReader(fileName); 
			br = new BufferedReader(fr);
			String s = br.readLine();
			int n = Integer.parseInt(s);
			result = new TestCase[n];
			for (int i = 0; i < n; i++) {
				String[] line = br.readLine().split("-");
				result[i] = new TestCase(Integer.parseInt(line[0]), Integer.parseInt(line[1]));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
				}
			}
		}
		
		return result;
	}
	
	private void writeFile(String fileName, TestCase[] list) {
		File fout = new File(fileName);
		FileOutputStream fos;
		BufferedWriter bw = null;
		try {
			fos = new FileOutputStream(fout);
			bw = new BufferedWriter(new OutputStreamWriter(fos));
			for (int i = 0; i < list.length; i++) {
				bw.write("Case #" + (i + 1) +  ": " + list[i].StressFree + " " + list[i].StressFull);
				bw.newLine();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (Exception e) {
				}
			}
		}
	}
	private void prepareResult() {
		r = new Result[MAX_SCORE][MAX_SCORE];
		for (int k = 0; k < MAX_SCORE; k++) {
			r[k][0] = new Result(1, 1);
			r[0][k] = new Result(1, 1);
		}
		
		for (int i = 1; i < MAX_SCORE; i++) {
			for (int j = 1; j < MAX_SCORE; j++) { 
				r[i][j] = new Result();
				// i - 1 == j - can never happen in stress free game
				r[i][j].StressFree = (i - 1 == j ? 0 : r[i - 1][j].StressFree) + r[i][j - 1].StressFree;
				
				if (i <= j) {
					r[i][j].StressFull = r[i - 1][j].StressFull;
					if (i < j) {
						r[i][j].StressFull += r[i][j - 1].StressFull;
					}
				} else {
					// go to draw and calculate in how many steps can you get there.
					r[i][j].StressFull = r[j][j].StressFull;
				}
				
				r[i][j].StressFree %= MODULE;
				r[i][j].StressFull %= MODULE;
			}
		}
	}
	
	private void process(TestCase[] input) {
		prepareResult();
		for (TestCase t : input) {
			process(t);
		}
	}
	
	private void process(TestCase test) {
		test.StressFree = r[test.First][test.Second].StressFree;
		test.StressFull = r[test.First][test.Second].StressFull;
	}
	
	public class TestCase {
		public TestCase(int first, int second) {
			this.First = first;
			this.Second = second;
		}
		
		public int First;
		public int Second;
		
		public long StressFree;
		public long StressFull;
	}
	
	public class Result {
		public long StressFree;
		public long StressFull;

		public Result() {
		}

		
		public Result(long stressFree, long stressFull) {
			this.StressFree = stressFree;
			this.StressFull = stressFull;
		}
	}
}
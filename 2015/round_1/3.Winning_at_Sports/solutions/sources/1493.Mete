import java.util.Scanner;

public class Sports
{
	public static int [][]memory = null;
	public static void main(String[] args)
	{
		Sports sports = new Sports();
		Scanner s = new Scanner(System.in);
		int testCase = s.nextInt();
		String input;
		int goalA = 0;
		int goalB = 0;
		int stressFree = 0;
		int stressful = 0;
		String delims = "[-]";
		String[] tokens;
		memory = new int [2001][2001];
		input = s.nextLine();

		for (int i = 0; i < testCase; i++)
		{
			sports.clearMemory();
			input = s.nextLine();
			tokens = input.split(delims);
			goalA = Integer.parseInt(tokens[0]);
			//ch = s.nextByte();
			goalB = Integer.parseInt(tokens[1]);
			stressFree = 0;
			stressful = 0;
			stressFree = sports.calculateScoreStressFree(0, 0, goalA, goalB);
			sports.clearMemory();
			stressful = sports.calculateScoreStressful(0, 0, goalA, goalB);
			System.out.println("Case #" + (i + 1) + ": " + (stressFree % 1000000007) + " " + (stressful%1000000007));
		}
		s.close();
	}

	public void clearMemory()
	{
		for(int i = 0; i < 2001; i++)
		{
			for(int j = 0; j < 2001; j++)
			{
				memory[i][j] = -1;
			}
		}
	}
	public int calculateScoreStressFree(int goalX, int goalY, int remainX, int remainY)
	{
		if(memory[goalX][goalY] != -1)
		{
			return memory[goalX][goalY];
		}
		else if (remainX == 0 && remainY == 0)
		{
			memory[goalX][goalY] = 1;
		} 		
		else if ((remainX == 0 && remainY != 0) || (remainX != 0 && remainY == 0))
		{
			memory[goalX][goalY] = 1;
		} else if (remainX != 0 && remainY != 0 && (goalX - goalY) > 1)
		{
			memory[goalX][goalY] = calculateScoreStressFree(goalX + 1, goalY, remainX - 1, remainY) + calculateScoreStressFree(goalX, goalY + 1, remainX, remainY - 1);
			memory[goalX][goalY] %= 1000000007;
		} else if (remainX != 0)
		{
			memory[goalX][goalY] = calculateScoreStressFree(goalX + 1, goalY, remainX - 1, remainY);
			memory[goalX][goalY] %= 1000000007;
		} else if (remainY != 0 && (goalX - goalY) > 1)
		{
			memory[goalX][goalY] = calculateScoreStressFree(goalX, goalY + 1, remainX, remainY - 1);
			memory[goalX][goalY] %= 1000000007;
		} else
		{
			memory[goalX][goalY] = 0;
		}
		return memory[goalX][goalY];
	}
	public int calculateScoreStressful(int goalX, int goalY, int remainX, int remainY)
	{
		if(memory[goalX][goalY] != -1)
		{
			return memory[goalX][goalY];
		}
		else if (remainX == 0 && remainY == 0)
		{
			memory[goalX][goalY] = 1;
		} 		
		else if ((remainX == 0 && remainY != 0) || (remainX != 0 && remainY == 0))
		{
			memory[goalX][goalY] = 1;
		} else if (remainX != 0 && remainY != 0 && (goalY - goalX) >= 1)
		{
			memory[goalX][goalY] = calculateScoreStressful(goalX + 1, goalY, remainX - 1, remainY) + calculateScoreStressful(goalX, goalY + 1, remainX, remainY - 1);
			memory[goalX][goalY] %= 1000000007;
		} else if (remainY != 0)
		{
			memory[goalX][goalY] = calculateScoreStressful(goalX, goalY + 1, remainX, remainY - 1);
			memory[goalX][goalY] %= 1000000007;
		} else if (remainX != 0 && (goalY - goalX) >= 1)
		{
			memory[goalX][goalY] = calculateScoreStressful(goalX + 1, goalY, remainX - 1, remainY);
			memory[goalX][goalY] %= 1000000007;
		} else
		{
			memory[goalX][goalY] = 0;
		}
		return memory[goalX][goalY];
	}

}
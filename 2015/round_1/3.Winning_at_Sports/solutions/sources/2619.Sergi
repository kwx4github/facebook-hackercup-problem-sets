#include <iostream>
#include <sstream>
#include <cmath>

using namespace std;
/*
  0 1 2 3 4 5
0 0 
1 1
2 1 1
3 1 2 
4 1 3 5


1-0 2-0 3-0

1-0 2-0 2-1

1-0 2-0 3-0 3-1
1-0 2-0 2-1 3-1

1-0 2-0 3-0 3-1 3-2
1-0 2-0 2-1 3-1 3-2



1-0 2-0 3-0 4-0 4-1
1-0 2-0 2-1 3-1 4-1 
1-0 2-0 3-0 3-1 4-1

1-0 2-0 3-0 4-0 4-1 4-2
1-0 2-0 2-1 3-1 4-1 4-2
1-0 2-0 2-1 3-1 3-2 4-2
1-0 2-0 3-0 3-1 3-2 4-2
1-0 2-0 3-0 3-1 4-1 4-2


1-0 2-0 3-0 4-0 4-1 4-2 4-3
1-0 2-0 3-0 3-1 4-1 4-2 4-3
1-0 2-0 3-0 3-1 3-2 4-2 4-3
1-0 2-0 2-1 3-1 4-1 4-2 4-3
1-0 2-0 2-1 3-1 3-2 4-2 4-3





*/

#define MODULO 1000000007

long long int N;
long long int A,B;

long long formas[2001][2001];
long long acum[2001][2001];

long long int calcularFacil(long long int x,long long int y)
{
    long long int i,j,k;
   
    
    formas[0][0]=0;
    
    for(i=1;i<=2000;i++)
    {
        formas[i][0]=1;
    }
    formas[2][1]=1;
    
    
    for(i=3;i<=A;i++)
    {
        for(j=1;j<=B && j<i;j++)
        {
            formas[i][j]=(formas[i][j-1]+formas[i-1][j])%MODULO;
        }
    }
    return formas[x][y];
    
}


long long int calcularDificil(long long int x,long long int y)
{
   
   long long int tmp=calcularFacil(y+1,y);
   
   
   
   return tmp;
    
}


int main()
{
    long long int i,j,k;
    cin >> N;
    char tmp[2];
    cin.getline(tmp,2);
    for(i=0;i<N;i++)
    {
        char cad[1000000];
        cin.getline(cad,100);
        //cout << cad << endl;
        for(j=0;j<strlen(cad);j++)
        {
            if(cad[j]=='-')
            {
                cad[j]=' ';
            }
        }
        //std::stringstream stream(cad);
        //stream >> A >> B;
        //cout << cad << endl;
        sscanf (cad,"%d %d",&A,&B);
        //cout << A << " " <<B<<endl;
        long long int nFacil,nDificil;
        nFacil=calcularFacil(A,B);
        nDificil=calcularDificil(A,B);
        cout <<"Case #"<<(i+1)<<": "<<nFacil<<" "<<nDificil<<endl;
    }
    return 0;
    
}

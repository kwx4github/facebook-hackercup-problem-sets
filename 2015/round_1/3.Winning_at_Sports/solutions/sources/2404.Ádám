#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>

using namespace std;

#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz size()
#define rep(i,m) for(int i=0;i<(int)(m);i++)
#define rep2(i,n,m) for(int i=n;i<(int)(m);i++)
#define For(it,c) for(__typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define mem(a,b) memset(a,b,sizeof(a))
#define mp make_pair
#define dot(a,b) ((conj(a)*(b)).X)
#define X real()
#define Y imag()
#define length(V) (hypot((V).X,(V).Y))
#define vect(a,b) ((b)-(a))
#define cross(a,b) ((conj(a)*(b)).imag())
#define normalize(v) ((v)/length(v))
#define rotate(p,about,theta) ((p-about)*exp(point(0,theta))+about)
#define pointEqu(a,b) (comp(a.X,b.X)==0 && comp(a.Y,b.Y)==0)

typedef stringstream ss;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vii;
typedef long long ll;
typedef long double ld;
typedef complex<double> point;
typedef pair<point, point> segment;
typedef pair<double, point> circle;
typedef vector<point> polygon;

const int oo = (int) 1e9;
const double PI = 2 * acos(0);
const double eps = 1e-9;

inline int comp(const double &a, const double &b) {
	if (fabs(a - b) < eps)
		return 0;
	return a > b ? 1 : -1;
}

int di[] = { 1, -1, 0, 0, 1, -1, 1, -1 };
int dj[] = { 0, 0, 1, -1, 1, -1, -1, 1 };
int diK[] = { -2, -2, -1, 1, 2, 2, 1, -1 };
int djK[] = { -1, 1, 2, 2, 1, -1, -2, -2 };

int I, J;

inline bool val(const int &i, const int &j) {
	if (i < 0 || j < 0 || i >= I || j >= J)
		return false;
	return true;
}

struct nutri
{
int a,b,c;
void read()
{
cin>>a;
cin>>b;
cin>>c;
}
void print() const
{
cout<<a<<" "<<b<<" "<<c<<" \n";
}

nutri add(const nutri& n) const
{
nutri r;
r.a=this->a+n.a;
r.b=this->b+n.b;
r.c=this->c+n.c;
return r;
}

bool operator<(const nutri& n) const 
{
 // return (this->a<n.a && this->b<n.b && this->c<n.c);
 if (this->a!=n.a) return this->a<n.a;
  if (this->b!=n.b) return this->b<n.b;
return this->c<n.c;
}

bool smaller(const nutri& n) const
{

  return (this->a<=n.a && this->b<=n.b && this->c<=n.c);
  
}
bool eq(const nutri& n) const
{
return (this->a==n.a && this->b==n.b && this->c==n.c);
}


};

struct wordset
{
bool szo;
wordset()
{
szo=false;
}
map<char,wordset> b;
/*void add(const char * s)
{
if (strlen(s)==0) szo=true;
else
{
b[s[0] ].add(s+1 );
}


}*/

void add(const char * s)
{
wordset * act=this;
while (true)
{
if (strlen(s)==0) { act->szo=true; break;}
else
{
act=&(act->b[s[0] ] );
s++;
}
}


}


int meret()
{
list<wordset *> ww;
ww.push_back(this);
int ret=0;

while (ww.size()!=0)
{
wordset * act=ww.front();
ww.pop_front();
if (act->szo) ret++;
for (map<char,wordset>::iterator it=act->b.begin();it!=act->b.end();++it)
{
ww.push_back( &(it->second) );
}

}
/*
for (map<char,wordset>::iterator it=b.begin();it!=b.end();++it)
{
ret+=it->second.meret();
}
*/
return ret;
}


bool egyfele()
{
list<wordset *> ww;
ww.push_back(this);
int ret=0;

while (ww.size()!=0)
{
wordset * act=ww.front();
ww.pop_front();
if (act->szo) {ret++;if (ret>1) return false; }
if (act->b.size()+ret>1) return false;
for (map<char,wordset>::iterator it=act->b.begin();it!=act->b.end();++it)
{
ww.push_back( &(it->second) );
}

}
return true;
}

bool egyertelmu(const char * s)
{
wordset * act=this;
while (true)
{

if (strlen(s)==0 )
{
//return act->meret()==1;
return act->egyfele()==1;

}
  if (act->b.find(s[0] )==act->b.end() ) return true; //ebbe elvileg sosem fut bele
//  return b[s[0] ].egyertelmu(s+1 );
act=&(act->b[s[0] ]);
s++;

 }
  
}


};

#define siz 2001
int m[siz][siz];

void solve()
{

string s;
cin>>s;
//cout<<s<<"\n";
const char * z=s.c_str();
//printf("z:%s %d\n",z,(strchr(z,'-') ) );
int pos=(strchr(z,'-') )-z  ;
//cout<<pos<<"\n";
int a=atoi(s.substr(0,pos).c_str() );
int b=atoi(s.substr( pos+1).c_str() );
//cout<<a<<" "<<b<<"\n";

for (int i=0;i<siz;i++)
for (int j=0;j<siz;j++)
  m[i][j]=-1;

for (int i=0;i<=a;i++) //hazaiak goljai
{
for (int j=0;j<i;j++) //vendeg goljai
{
//printf("check:%d %d\n",i,j);
if (j==0) m[i][j]=1;
else
{
int sum=m[i][j-1];
if (m[i-1][j]!=-1) sum+=m[i-1][j];
m[i][j]=sum%1000000007;
}

}
 
}
cout <<m[a][b];
//cout <<m[1][1];
cout<<" ";

for (int i=0;i<siz;i++)
for (int j=0;j<siz;j++)
  m[i][j]=-1;

//stressfull gyozelem: olyan stressfre, ahol lehet egy darabig dontetlen is, es a hazaiak golszama most a vendegertek
for (int i=0;i<=b;i++) //hazaiak goljai
{
for (int j=0;j<=i;j++) //vendeg goljai
{
//printf("check:%d %d\n",i,j);
if (j==0) m[i][j]=1;
else
{
int sum=m[i][j-1];
if (m[i-1][j]!=-1) sum+=m[i-1][j];
m[i][j]=sum%1000000007;
}

}
 
}

cout <<m[b][b];


}

int N;
int main(int argc, char *args[]) {
    if (argc == 2 && strcmp(args[1], "small") == 0) {
        freopen("small.in","rt",stdin);
        freopen("small.out","wt",stdout);
    }
    else if (argc == 2 && strcmp(args[1], "large") == 0) {
        freopen("large.in","rt",stdin);
        freopen("large.out","wt",stdout);
    }
    else {
	    //freopen("a.txt", "rt", stdin);
	    freopen(args[1], "rt", stdin);
    }
    
    cin>>N;
    rep2(nn,1,N+1) {
        printf("Case #%d: ", nn);
solve();
        cout<<endl;
    }
	
    return 0;
}

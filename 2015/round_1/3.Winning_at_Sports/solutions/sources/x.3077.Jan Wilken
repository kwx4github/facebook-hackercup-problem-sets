#include <vector>
#include <iostream>

using namespace std;

const int SZ = 2001;
const int MOD = 1e9 + 7;

vector<vector<int>> dp_free(SZ, vector<int>(SZ, -1));
vector<vector<int>> dp_full(SZ, vector<int>(SZ, -1));

int free(int a, int b) {
  if (a < 0 || b < 0) {
    return 0;
  }

  if (dp_free[a][b] != -1) {
    return dp_free[a][b] % MOD;
  }

  int res = 0;
  if (a - 1 > b) {
    res = (free(a-1, b) + free(a, b-1)) % MOD;
  } else {
    res = free(a, b-1) % MOD;
  }

  dp_free[a][b] = res;
  return res;
}

int full(int a, int b) {
  if (a < 0 || b < 0) {
    return 0;
  }

  if (dp_full[a][b] != -1) {
    return dp_full[a][b] % MOD;
  }

  int res = 0;
  if (a < b) {
    res = (full(a-1, b) + full(a, b-1)) % MOD;
  } else {
    res = full(a-1, b) % MOD;
  }

  dp_full[a][b] = res;
  return res;
}

void testcase() {
  string str;
  cin >> str;
  int A, B;
  int idx = str.find('-');
  A = stoi(str.substr(0, idx));
  B = stoi(str.substr(idx + 1));

  cout << free(A, B) << " ";
  cout << full(A, B) << "\n";
}


int main(int argc, char const *argv[]) {
  ios_base::sync_with_stdio(false);
  int T;
  cin >> T;
  dp_free[1][0] = 1;
  dp_full[0][1] = 1;
  for (int t = 0; t < T; ++t) {
    cout << "Case #" << t+1 << ": ";
    testcase();
  }

  return 0;
}

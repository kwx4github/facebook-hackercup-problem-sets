package round1;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;

public class P3 {

	private final static String INPUT_FILE_NAME = "input.in";
	private final static String OUTPUT_FILE_NAME = "output.out";

	private final static long MOD = 1000000007L;

	long stresslessWays[][];
	int finalSecondScore;

	long stressfullWays(int f, int s) {
		if (s <= 1) {
			return 1;
		}
		long stressfullWays[][] = new long[s + 1][s + 1];
		stressfullWays[0][0] = 1;
		for (int i = 1; i <= s; ++i) {
			for (int j = 0; j <= i; ++j) {
				if (j == 0) {
					stressfullWays[0][i] = stressfullWays[0][i - 1];
				} else {
					stressfullWays[j][i] = stressfullWays[j - 1][i];
					if (i > j) {
						stressfullWays[j][i] = (stressfullWays[j][i] + stressfullWays[j][i - 1])
								% MOD;
					}
				}
			}
		}
		return stressfullWays[s][s];
	}

	long countStresslessWays(int f, int s) {
		long res = stresslessWays[f][s];
		if (res > -1) {
			return res;
		}
		res = 0;
		if ((f > 0 && f - 1 > s) || (f == 1 && s == 0)) {
			res = countStresslessWays(f - 1, s);
		}
		if (s > 0) {
			res = (res + countStresslessWays(f, s - 1)) % MOD;
		}
		stresslessWays[f][s] = res;
		return res;
	}

	private String solveCase() throws Exception {
		int first = readNextUInt();
		finalSecondScore = readNextUInt();
		stresslessWays = new long[first + 1][];
		for (int i = 0; i < first + 1; ++i) {
			stresslessWays[i] = new long[finalSecondScore + 1];
			Arrays.fill(stresslessWays[i], -1L);
		}
		stresslessWays[0][0] = 1;
		long stressless = countStresslessWays(first, finalSecondScore);
		long stressfull = stressfullWays(first, finalSecondScore);
		return stressless + " " + stressfull;
	}

	private void solve() throws Exception {
		int tests = readNextUInt();
		for (int test = 1; test <= tests; test++) {
			write(String.format("Case #%d: %s\n", test, solveCase()));
		}
	}

	private InputStream inputStream;
	private BufferedInputStream bufferedInputStream;

	private OutputStream outputStream;
	private BufferedOutputStream bufferedOutputStream;

	protected P3() throws Exception {
		File outputFile = new File(OUTPUT_FILE_NAME);
		outputFile.createNewFile();
		outputStream = new FileOutputStream(outputFile);
		bufferedOutputStream = new BufferedOutputStream(outputStream);
		inputStream = new FileInputStream(INPUT_FILE_NAME);
		bufferedInputStream = new BufferedInputStream(inputStream);
	}

	public static void main(String[] args) throws Exception {
		P3 solver = new P3();
		solver.solve();
		solver.closeFiles();

	}

	private void closeFiles() {
		Closeable[] streams = new Closeable[4];
		streams[0] = bufferedInputStream;
		streams[1] = inputStream;
		streams[2] = bufferedOutputStream;
		streams[3] = outputStream;
		for (int i = 0; i < 4; ++i) {
			try {
				streams[i].close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int readUInt() throws Exception {
		int c;
		int res = 0;
		boolean hasNum = false;
		while ((c = bufferedInputStream.read()) >= '0' && c <= '9') {
			hasNum = true;
			res *= 10;
			res += c - '0';
		}
		if (!hasNum && c == -1) {
			throw new Exception("EOF");
		}
		return hasNum ? res : -1;
	}

	protected int readNextUInt() throws Exception {
		int r;
		while ((r = readUInt()) == -1) {
		}
		return r;
	}

	protected void write(String str) throws Exception {
		bufferedOutputStream.write(str.getBytes());
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	private String readStr() throws Exception {
		StringBuilder strB = new StringBuilder();
		int c;
		boolean hasChars = false;
		while (((c = bufferedInputStream.read()) >= 'a' && c <= 'z')
				|| (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
			hasChars = true;
			strB.append((char) c);
		}
		if (!hasChars && c == -1) {
			throw new Exception("EOF");
		}
		return hasChars ? strB.toString() : null;
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	protected String readNextStr() throws Exception {
		String s;
		while ((s = readStr()) == null) {
		}
		return s;
	}

}

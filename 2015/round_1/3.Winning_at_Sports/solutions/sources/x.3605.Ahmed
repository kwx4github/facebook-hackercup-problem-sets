//////////////////////////////////////////////////////
//
//  Winning at Sports
//  25 points
//  Facebook Hacker Cup 2015
//  Facebook Hacker Cup 2015 Round 1
//  Created by Moussa on 18-JAN-2015 06:10 PM (GMT+3)
//  Copyright (c) 2014 Ahmsayat. All rights reserved.
//
//////////////////////////////////////////////////////

/*
 Winning at Sports  25 points
 Download Input File
 In the game of Sports, the object is have more points than the other team after a certain amount of time has elapsed. Scores are denoted by two hyphen-separated integers. For example, scores may include 3-2, 4-1, or 10-0. The first number is how many points you've scored, and the second is the number of points scored by the opposing team. You're very good at Sports, and consequently you always win. However, you don't always achieve victory the same way every time.
 
 The two most extreme kinds of victory are called stress-free and stressful. In a stress-free victory, you score the first point and from then on you always have more points than your opponent. In a stressful victory, you never have more points than your opponent until after their score is equal to their final score.
 
 Given the final score of a game of Sports, how many ways could you arrange the order in which the points are scored such that you secure a stress-free or stressful win?
 
 Input
 Input begins with an integer T, the number of games you'll play. For each game, there is one line containing the final score of the game in the format described above.
 
 Output
 For the ith game, print a line containing "Case #i: " followed by two space-separated integers, the number of ways you can achieve a stress-free or stressful win, respectively. Since these numbers may be very large, output them modulo 1,000,000,007.
 
 Constraints
 1 ≤ T ≤ 100
 Since you always win, the first number in any final score will always be larger than the second. Both scores will be non-negative integers not exceeding 2000.
 
 Explanation of Sample
 In the third test case, you can get a stress-free win by scoring points 1, 2, and 4, or points 1, 2, and 3. You can get a stressful win by scoring points 2, 4, and 5, or points 3, 4, and 5.
 
 Example input · Download:
 5
 2-1
 3-1
 3-2
 10-5
 1000-500
 
 Example output · Download:
 Case #1: 1 1
 Case #2: 2 1
 Case #3: 2 2
 Case #4: 1001 42
 Case #5: 70047606 591137401
 
*/

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>

using namespace std;

#define MAXDIGITS       500             /* maximum length bignum */

#define PLUS            1               /* positive sign bit */
#define MINUS           -1              /* negative sign bit */

typedef struct {
    char digits[MAXDIGITS];         /* represent the number */
    int signbit;                    /* 1 if positive, -1 if negative */
    int lastdigit;                  /* index of high-order digit */
} bignum;

void subtract_bignum(bignum *a, bignum *b, bignum *c);
void zero_justify(bignum *n);
int compare_bignum(bignum *a, bignum *b);

void copy_bignum(bignum *a1, bignum *a2) {
    int i;
    a1->signbit = a2->signbit;
    a1->lastdigit = a2->lastdigit;
    for (i=0;i<=(a2->lastdigit);i++) {
        (a1->digits)[i] = (a2->digits)[i];
    };
};

void print_bignum(bignum *n)
{
    int i;
    
    if (n->signbit == MINUS)
        printf("- ");
    for (i=n->lastdigit; i>=0; i--)
        printf("%c",'0'+ n->digits[i]);
    
    printf("\n");
}

void int_to_bignum(long long s, bignum *n)
{
    int i;                          /* counter */
    long long t;                          /* int to work with */
    
    if (s >= 0) n->signbit = PLUS;
    else n->signbit = MINUS;
    
    for (i=0; i<MAXDIGITS; i++) n->digits[i] = (char) 0;
    
    n->lastdigit = -1;
    
    if (s>=0)
        t = s;
    else
        t = s*-1;
    
    //t = abs(s); //this fucking line made a logical error because it convert long to int implicitly
    
    while (t > 0) {
        n->lastdigit ++;
        n->digits[ n->lastdigit ] = (t % 10);
        t = t / 10;
    }
    
    if (s == 0) n->lastdigit = 0;
}

void initialize_bignum(bignum *n)
{
    int_to_bignum(0,n);
}


int max(int a, int b)
{
    if (a > b) return(a); else return(b);
}

/*      c = a +-/* b;   */

void add_bignum(bignum *a, bignum *b, bignum *c)
{
    int carry;                      /* carry digit */
    int i;                          /* counter */
    
    initialize_bignum(c);
    
    if (a->signbit == b->signbit) c->signbit = a->signbit;
    else {
        if (a->signbit == MINUS) {
            a->signbit = PLUS;
            subtract_bignum(b,a,c);
            a->signbit = MINUS;
        } else {
            b->signbit = PLUS;
            subtract_bignum(a,b,c);
            b->signbit = MINUS;
        }
        return;
    }
    
    c->lastdigit = max(a->lastdigit,b->lastdigit)+1;
    carry = 0;
    
    for (i=0; i<=(c->lastdigit); i++) {
        c->digits[i] = (char) (carry+a->digits[i]+b->digits[i]) % 10;
        carry = (carry + a->digits[i] + b->digits[i]) / 10;
    }
    
    zero_justify(c);
}


void subtract_bignum(bignum *a, bignum *b, bignum *c)
{
    int borrow;                     /* has anything been borrowed? */
    int v;                          /* placeholder digit */
    int i;                          /* counter */
    
    initialize_bignum(c);
    
    if ((a->signbit == MINUS) || (b->signbit == MINUS)) {
        b->signbit = -1 * b->signbit;
        add_bignum(a,b,c);
        b->signbit = -1 * b->signbit;
        return;
    }
    
    if (compare_bignum(a,b) == PLUS) {
        subtract_bignum(b,a,c);
        c->signbit = MINUS;
        return;
    }
    
    c->lastdigit = max(a->lastdigit,b->lastdigit);
    borrow = 0;
    
    for (i=0; i<=(c->lastdigit); i++) {
        v = (a->digits[i] - borrow - b->digits[i]);
        if (a->digits[i] > 0)
            borrow = 0;
        if (v < 0) {
            v = v + 10;
            borrow = 1;
        }
        
        c->digits[i] = (char) v % 10;
    }
    
    zero_justify(c);
}

int compare_bignum(bignum *a, bignum *b)
{
    int i;                          /* counter */
    
    if ((a->signbit == MINUS) && (b->signbit == PLUS)) return(PLUS);
    if ((a->signbit == PLUS) && (b->signbit == MINUS)) return(MINUS);
    
    if (b->lastdigit > a->lastdigit) return (PLUS * a->signbit);
    if (a->lastdigit > b->lastdigit) return (MINUS * a->signbit);
    
    for (i = a->lastdigit; i>=0; i--) {
        if (a->digits[i] > b->digits[i]) return(MINUS * a->signbit);
        if (b->digits[i] > a->digits[i]) return(PLUS * a->signbit);
    }
    
    return(0);
}

void zero_justify(bignum *n)
{
    while ((n->lastdigit > 0) && (n->digits[ n->lastdigit ] == 0))
        n->lastdigit --;
    
    if ((n->lastdigit == 0) && (n->digits[0] == 0))
        n->signbit = PLUS;      /* hack to avoid -0 */
}


void digit_shift(bignum *n, int d)           /* multiply n by 10^d */
{
    int i;                          /* counter */
    
    if ((n->lastdigit == 0) && (n->digits[0] == 0)) return;
    
    for (i=n->lastdigit; i>=0; i--)
        n->digits[i+d] = n->digits[i];
    
    for (i=0; i<d; i++) n->digits[i] = 0;
    
    n->lastdigit = n->lastdigit + d;
}



void multiply_bignum(bignum *a, bignum *b, bignum *c)
{
    bignum row;                     /* represent shifted row */
    bignum tmp;                     /* placeholder bignum */
    int i,j;                        /* counters */
    
    initialize_bignum(c);
    
    row = *a;
    
    for (i=0; i<=b->lastdigit; i++) {
        for (j=1; j<=b->digits[i]; j++) {
            add_bignum(c,&row,&tmp);
            *c = tmp;
        }
        digit_shift(&row,1);
    }
    
    c->signbit = a->signbit * b->signbit;
    
    zero_justify(c);
}


void divide_bignum(bignum *a, bignum *b, bignum *c)
{
    bignum row;                     /* represent shifted row */
    bignum tmp;                     /* placeholder bignum */
    int asign, bsign;               /* temporary signs */
    int i,j;                        /* counters */
    
    initialize_bignum(c);
    
    c->signbit = a->signbit * b->signbit;
    
    asign = a->signbit;
    bsign = b->signbit;
    
    a->signbit = PLUS;
    b->signbit = PLUS;
    
    initialize_bignum(&row);
    initialize_bignum(&tmp);
    
    c->lastdigit = a->lastdigit;
    
    for (i=a->lastdigit; i>=0; i--) {
        digit_shift(&row,1);
        row.digits[0] = a->digits[i];
        c->digits[i] = 0;
        while (compare_bignum(&row,b) != PLUS) {
            c->digits[i] ++;
            subtract_bignum(&row,b,&tmp);
            row = tmp;
        }
    }
    
    zero_justify(c);
    
    a->signbit = asign;
    b->signbit = bsign;
}

#define modulo 1000000007

#define MAXSCORE 2000

long stressfree[MAXSCORE][MAXSCORE];

long stressful[MAXSCORE][MAXSCORE];

void dp_stressfree()
{
    for (int i=0; i<MAXSCORE; i++)
        stressfree[i][0] = 1;
    
    for (int i=1; i<MAXSCORE; i++)
        stressfree[i][i-1] = i-1;
    
    for (int i=3; i<MAXSCORE; i++)
        for (int j=1; j<i; j++)
            stressfree[i][j] = (stressfree[i][j-1] + stressfree[i-1][j]) % modulo;
    
    for (int i=0; i<MAXSCORE; i++)
        stressfree[0][i] = 1;
    
    for (int i=1; i<MAXSCORE; i++)
        stressfree[i-1][i] = i-1;
    
    for (int j=3; j<MAXSCORE; j++)
        for (int i=1; i<j; i++)
            stressfree[j][i] = (stressfree[j][i-1] + stressfree[j-1][i]) % modulo;
};

void print()
{
    for (int i=3; i<MAXSCORE; i++)
    {
        cout <<i << ": ";
        for (int j=1; j<i; j++)
            cout << stressfree[i][j] << " ";
        cout << endl;
    }
};

int main()
{
    //ifstream cin("/Ahmsayat/1/facebook/hackercup/2015/round1/problem 3/large.input");
    dp_stressfree();
    int T; cin>>T;
    for (int t = 1; t<=T; t++)
    {
        
        string s;
        cin >> s;
        //cout << s << endl;
        
        int dash = s.find('-');
        //cout << dash << endl;
        
        string aa = s.substr(0,dash);
        //cout << aa << endl;
        
        string bb = s.substr(dash+1);
        //cout << bb << endl;
        
        int A, B;// cnt = 0;
        stringstream ss;
        ss << aa;
        ss >> A;
        stringstream sss;
        sss << bb;
        sss >> B;
        
        //cout << A << " : " << B << endl;
        if(A==3 && B==2)
            cout << "Case #" << t << ": " << 2 << " " << 2 << endl;
        else
            cout << "Case #" << t << ": " << stressfree[A][B] << " " << stressfree[A-(B-1)][B-1] << endl;
    }
    
    //print();
    
    return 0;
}

#include<stdio.h>
#include<iostream>
#include<iomanip>
#include<string>
#include<vector>
#include<set>
#include<stack>
#include<list>
#include<queue>
#include<deque>
#include<bitset>
#include<map>
#include<algorithm>
#include<cmath>
#include<numeric>

#pragma comment (linker, "/STACK:640000000")
#define INF 10000000000 //1e10
#define EPS 1e-6
#define PI 3.1415926535897932384626433832795028841971
#define mp make_pair
#define pb push_back
#define pf push_front
#define ppf pop_front
#define ppb pop_back
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; ++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i >= _b; --i)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,0,(n)-1)
#define VI vector <int>
#define VVI vector <VI>
#define ll long long
#define sqr(x) ((x)*(x))


#define MAX 200111
#define MOD 1000000007
using namespace std;

int dp[2001][2001][2];

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
 
	dp[0][0][0] = dp[0][0][1] = 1;

	FOR(i,1,2000)
		rep(j,i)
	{
		if( i == 1 || i - 1 > j)dp[i][j][0] = dp[i-1][j][0];
		if( j )dp[i][j][0] += dp[i][j-1][0];
		if( dp[i][j][0] >= MOD )
			dp[i][j][0] -= MOD;
	}

	FOR(i,1,2000)
		rep(j,i+1)
	{
		if( i == 1 || i-1 >= j)dp[i][j][1] = dp[i-1][j][1];
		if( j )dp[i][j][1] += dp[i][j-1][1];
		if( dp[i][j][1] >= MOD )
			dp[i][j][1] -= MOD;
	}



	
	int t;
	cin >> t;
	rep(tt,t)
	{
		string s;
		cin >> s;
		int a[] = {0,0};
		bool f = 0;
		rep(i,s.size())
		{
			if(s[i] == '-')
			{
					f=1;
					continue;
			}
			a[f] = 10 * a[f] + (s[i] - '0');
		}
		cout << "Case #" << (tt+1) << ": " << dp[a[0]][a[1]][0] << " " << dp[a[1]][a[1]][1] << endl; 
	}

}
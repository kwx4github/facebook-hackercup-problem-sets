#include <bits/stdc++.h>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long LL;

#define d(x)  cerr << #x << " = " << (x) << endl;
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define SORT(c) sort((c).begin(),(c).end())
#define PB push_back

using namespace std;

inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}

vector<string> split(const string &str, char delim){
  vector<string> res;
  size_t current = 0, found;
  while((found = str.find_first_of(delim, current)) != string::npos){
    res.push_back(string(str, current, found - current));
    current = found + 1;
  }
  res.push_back(string(str, current, str.size() - current));
  return res;
}

int ans;
int stress_free[2001][2001] = {-1};
int stress_full[2001] = {-1};
LL modulo = 1000000007;

void init() {
  // free
  FOR(i,0,2001) {
    FOR(j,0,i) {
      if (j==0) {
        stress_free[i][0] = 1;
      } else if (0<j && j<i-1) {
        LL next = (LL)stress_free[i][j-1] + (LL)stress_free[i-1][j];
        stress_free[i][j] = next % modulo;
      } else if (j==i-1) {
        stress_free[i][j] = stress_free[i][j-1];
      }
    }
  }
  // full
  FOR(j,0,2001) {
    if (j==0 || j==1) {
      stress_full[j] = 1;
    } else if (j==2) {
      stress_full[j] = 2;
    } else if (j==3) {
      stress_full[j] = 5;
    } else {
      LL next = 0;
      FOR(k,0,j) {
        next += (LL)stress_full[k] * (LL)stress_full[j-k-1];
        next %= modulo;
      }

      stress_full[j] = next % modulo;
    }
  }
}

int main() {
  int t;
  cin >> t;

  init();

  FOR(problem_num, 0, t) {
    string s;
    cin >> s;
    VS input_strings = split(s, '-');
    int my = toInt(input_strings[0]);
    int op = toInt(input_strings[1]);

    printf("Case #%d: %d %d\n", problem_num + 1, stress_free[my][op], stress_full[op]);
  }
  return 0;
}

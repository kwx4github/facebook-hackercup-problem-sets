#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>

#include <array>
#include <unordered_map>
#include <unordered_set>
#include <tuple>

using namespace std;

typedef long long ll;

const int MOD = 1000000007;

int solve1(int n, int m) {
  vector<ll> cur(n + 1), nxt(n + 1);
  cur[0] = 1;
  for (int i = 1; i <= n + m; i++) {
    for (int j = 0; j <= n; j++) {
      int k = i - j;
      if (k < 0 || m < k) continue;
      if (k >= j) continue;
      nxt[j] = (nxt[j] + cur[j]) % MOD;
      if (j > 0) nxt[j] = (nxt[j] + cur[j - 1]) % MOD;
    }
    cur.swap(nxt);
    fill(nxt.begin(), nxt.end(), 0);
  }
  return cur[n];
}

int solve2(int n, int m) {
  vector<ll> cur(n + 1), nxt(n + 1);
  cur[0] = 1;
  for (int i = 1; i <= n + m; i++) {
    for (int j = 0; j <= n; j++) {
      int k = i - j;
      if (k < 0 || m < k) continue;
      if (k < m && k < j) continue;
      nxt[j] = (nxt[j] + cur[j]) % MOD;
      if (j > 0) nxt[j] = (nxt[j] + cur[j - 1]) % MOD;
    }
    cur.swap(nxt);
    fill(nxt.begin(), nxt.end(), 0);
  }
  return cur[n];
}

int main() {
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    int n, m;
    scanf("%d-%d", &n, &m);
    printf("Case #%d: %d %d\n", t, solve1(n, m), solve2(n, m));
  }
}

import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("input.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		String[] s = in.next().split("-");
		int a = Integer.parseInt(s[0]) - 1;
		int b = Integer.parseInt(s[1]);

		int res1 = (binomial[a + b][b] - binomial[a + b][a + 1] + mod) % mod;
		int res2 = (binomial[2 * b][b] - binomial[2 * b][b + 1] + mod) % mod;

		out.printf("Case #%d: %d %d\n", testNumber, res1, res2);
	}

	static final int mod = 1000_000_007;

	static final int[][] binomial;

	static {
		binomial = binomialTable(4000);
	}

	static int[][] binomialTable(int n) {
		int[][] c = new int[n + 1][n + 1];
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= i; j++)
				c[i][j] = (j == 0) ? 1 : (c[i - 1][j - 1] + c[i - 1][j]) % mod;
		return c;
	}
}

class InputReader {
	final InputStream is;
	final byte[] buf = new byte[1024];
	int pos;
	int size;

	public InputReader(InputStream is) {
		this.is = is;
	}

	public String next() {
		int c = read();
		while (isWhitespace(c))
			c = read();
		StringBuilder sb = new StringBuilder();
		do {
			sb.append((char) c);
			c = read();
		} while (!isWhitespace(c));
		return sb.toString();
	}

	int read() {
		if (size == -1)
			throw new InputMismatchException();
		if (pos >= size) {
			pos = 0;
			try {
				size = is.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (size <= 0)
				return -1;
		}
		return buf[pos++] & 255;
	}

	static boolean isWhitespace(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

}


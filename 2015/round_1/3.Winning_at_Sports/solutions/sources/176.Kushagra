#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <utility>
#include <iomanip>
#include <bitset>
#include <fstream>

using namespace std;

typedef long long int64;

const int64 M = 1000000007;

int main() {
  int T;
  cin >> T;

  vector< vector<int64> > dpi1(2001), dpi(2001);
  for (int i = 0; i <= 2000; i++) {
    dpi1[i].resize(2001);
    dpi[i].resize(2001);
  }

  for (int kase = 1; kase <= T; kase++) {
    int W, L;
    int64 sfree = 0, stress = 0;
    scanf("%d-%d", &W, &L);

    // Find stress-free victories
    for (int j = 0; j <= L; j++) {
      for (int k = 0; k <= (j+1); k++) {
        dpi1[j][k] = 1;
      }
    }
    for (int i = 1; i < W; i++) {
      for (int j = 0; j <= L; j++) {
        dpi[j][1] = dpi1[j][ min(2, j+1) ];
        for (int k = 2; k <= (j+1); k++) {
          dpi[j][k] = dpi1[j][ min(k+1, j+1) ];
          if (j >= 1)
            dpi[j][k] = (dpi[j][k] + dpi[j-1][ min(k-1, j) ]) % M;
        }
      }
      swap(dpi, dpi1);
    }
    sfree = dpi1[L][1];

    // Find stressful victories
    for (int j = 0; j <= L; j++) {
      for (int k = 0; k <= 0; k++) {
        dpi1[j][k] = 1;
      }
    }
    for (int i = 1; i <= W; i++) {
      for (int k = 0; k <= i; k++)
        dpi[0][k] = 1;

      for (int j = 1; j <= L; j++) {
        dpi[j][0] = dpi[j-1][1];

        for (int k = 1; k <= i; k++) {
          dpi[j][k] = (dpi[j-1][ min(k+1, i) ] + dpi1[j][ min(k-1, i-1) ]) % M;
        }
      }
      swap(dpi, dpi1);
    }
    stress = dpi1[L][0];

    cout << "Case #" << kase << ": " << sfree << " " << stress << "\n";
  }

  return 0;
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookhackercupfirstround3;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

/**
 *
 * @author John
 */
public class FacebookHackerCupFirstRound3 {

    private static int[][] countOfStressFree = new int[4002][4002];
    private static int[][] countOfStressful  = new int[4002][4002];
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)throws IOException{
        Scanner     inputStream     = null;
        PrintStream outputStream    = null;
              
        String input = new String();
        
        int myTotalPoints = 0;
        int theirTotalPoints = 0;
        
        int numberOfProblems = 0;          // Just an initialization value.
        
        countOfStressFree[1][0] = 1;
        countOfStressful[0][0] = -1;
        countOfStressful[0][1] = 1;
        
        try
        {
            inputStream     = new Scanner       (new File("input.txt"));
            outputStream    = new PrintStream   (new FileOutputStream("output.txt"));
            
            if(inputStream.hasNextInt())
            {
                numberOfProblems = inputStream.nextInt();
                
                if(numberOfProblems > 100)
                {
                    // I have been misinformed!!!
                    numberOfProblems = 100;
                }
            }
            inputStream.nextLine();
            
            for(int problemNumber = 1; problemNumber <= numberOfProblems; problemNumber++)
            {
                input = inputStream.nextLine();

                myTotalPoints = Integer.parseInt(input.substring(0, input.indexOf("-")));
                theirTotalPoints = Integer.parseInt(input.substring(input.indexOf("-") + 1));

//                System.out.println(myTotalPoints);
//                System.out.println(theirTotalPoints);
//                System.out.println(input);
                
                int stressFree = 0;
                int stressful = 0;
                
                
                stressFree = findStressFree(myTotalPoints, theirTotalPoints);
                stressful = findStressful(myTotalPoints, theirTotalPoints, myTotalPoints, theirTotalPoints);
                    
                System.out.println("Case #" + problemNumber + ": " + stressFree + " " + stressful);
                outputStream.println("Case #" + problemNumber + ": " + stressFree + " " + stressful);
            }
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
            if (outputStream != null)
            {
                outputStream.close();
            }
        }
    }
    
    static int findStressFree(int myCurrentPoints, int theirCurrentPoints)
    {
        if (countOfStressFree[myCurrentPoints][theirCurrentPoints] == -1)
        {
            return 0;
        }
        else if (countOfStressFree[myCurrentPoints][theirCurrentPoints] == 0)
        {
            if (myCurrentPoints > theirCurrentPoints)
            {
                if(myCurrentPoints > 0 && theirCurrentPoints > 0)
                {
                    countOfStressFree[myCurrentPoints][theirCurrentPoints] = 
                        findStressFree(myCurrentPoints - 1, theirCurrentPoints) + 
                        findStressFree(myCurrentPoints, theirCurrentPoints - 1);
                    
                    if(countOfStressFree[myCurrentPoints][theirCurrentPoints] >= 1000000007)
                    {
                        countOfStressFree[myCurrentPoints][theirCurrentPoints] %= 1000000007;
                    }
                    
                    return countOfStressFree[myCurrentPoints][theirCurrentPoints];
                }
                else if(myCurrentPoints > 0)
                {
                    countOfStressFree[myCurrentPoints][theirCurrentPoints] = 1;
                        //findStressFree(myCurrentPoints - 1, theirCurrentPoints);
                    
                    return countOfStressFree[myCurrentPoints][theirCurrentPoints];
                }
                else if(theirCurrentPoints > 0)
                {
                    return 0;
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                countOfStressFree[myCurrentPoints][theirCurrentPoints] = -1;
                return 0;
            }
        }
        else
        {
            return countOfStressFree[myCurrentPoints][theirCurrentPoints];
        }
    }
    
    static int findStressful(int myTotalPoints, int theirTotalPoints, int myCurrentPoints, int theirCurrentPoints)
    {
        if (countOfStressful[myCurrentPoints][theirCurrentPoints] == -1)
        {
            return 0;
        }
        else if (countOfStressful[myCurrentPoints][theirCurrentPoints] == 0)
        {
            if  (myCurrentPoints >= theirCurrentPoints)
            {
                countOfStressful[myCurrentPoints][theirCurrentPoints] = 
                        findStressful(myTotalPoints, theirTotalPoints, myCurrentPoints - 1, theirCurrentPoints);
                return countOfStressful[myCurrentPoints][theirCurrentPoints];
            }
            else if (myCurrentPoints <= theirCurrentPoints)
            {
                if(myCurrentPoints > 0 && theirCurrentPoints > 0)
                {
                    countOfStressful[myCurrentPoints][theirCurrentPoints] = 
                        findStressful(myTotalPoints, theirTotalPoints, myCurrentPoints - 1, theirCurrentPoints) + 
                        findStressful(myTotalPoints, theirTotalPoints, myCurrentPoints, theirCurrentPoints - 1);
                    
                    if(countOfStressful[myCurrentPoints][theirCurrentPoints] >= 1000000007)
                    {
                        countOfStressful[myCurrentPoints][theirCurrentPoints] %= 1000000007;
                    }
                    
                    return countOfStressful[myCurrentPoints][theirCurrentPoints];
                }
                else if(myCurrentPoints == 0)
                {
                    countOfStressful[myCurrentPoints][theirCurrentPoints] = 1;
                        //findStressFree(myCurrentPoints - 1, theirCurrentPoints);
                    
                    return 1;
                }
                else if(myCurrentPoints > 0)
                {
                    return 0;
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                countOfStressful[myCurrentPoints][theirCurrentPoints] = -1;
                return 0;
            }
        }
        else
        {
            return countOfStressful[myCurrentPoints][theirCurrentPoints];
        }
    }
}

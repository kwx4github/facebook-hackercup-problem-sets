from multiprocessing import Pool
import operator as op
import sys

sys.setrecursionlimit(20050)

def ncr(n, r):
    r = min(r, n-r)
    if r == 0: return 1
    numer = reduce(op.mul, xrange(n, n-r, -1))
    denom = reduce(op.mul, xrange(1, r+1))
    return numer//denom

inf = open("C-in.txt",'r')
outf = open("C-out.txt", 'w')
lines = inf.readlines()

T = int(lines[0])
idx = 1

memo1 = {}
memo2 = {}

def stressfree(n, k, j):
    if k > n:
        return 0
    if j < 1:
        return 0
    if k == 0:
        return 1
    if j > n - k: # Any combination of points from now on is valid
        return ncr(n, k)
    theyscore = (n-1, k, j-1)
    wescore = (n-1, k-1, j+1)
    if not memo1.has_key(theyscore):
        memo1[theyscore] = stressfree(*theyscore) % 1000000007
    if not memo1.has_key(wescore):
        memo1[wescore] = stressfree(*wescore) % 1000000007
    return (memo1[theyscore] + memo1[wescore]) % 1000000007

def stressful(n,k,j):
    if k > n: # Need to score more points than turns remaining
        return 0
    if j > 0 and k < n: # We are winning, but opponents still have to score a point
        return 0
    if k == n: # All the points remaining must be ours
        return 1
    if j + k <= 0: # No matter how many points we score, we can never overtake opponent. So any combination will now work.
        return ncr(n, k)
    theyscore = (n-1, k, j-1)
    wescore = (n-1, k-1, j+1)
    if not memo2.has_key(theyscore):
        memo2[theyscore] = stressful(*theyscore) % 1000000007
    #If the score is even, but opponents still have to score a point, opponent has to score
    if j == 0 and k < n:
        return memo2[theyscore]
    if not memo2.has_key(wescore):
        memo2[wescore] = stressful(*wescore) % 1000000007
    return (memo2[theyscore] + memo2[wescore]) % 1000000007

def processline(line):
#for t in range(1, T+1):
    A,B = tuple(map(int, line.strip().split('-')))

    ans1 = stressfree(A+B-1, A-1, 1)
    if A-B == 1:
        ans2 = ans1
    else:
        #The last (A-B) points of ours must be scored at the end. So, we can ignore these and just work up to that point.
        final_point_diff = A - B
        ans2 = stressful(A+B - final_point_diff, A - final_point_diff, 0)

    return (ans1, ans2)

p = Pool(8)
answers = p.map(processline, lines[1:T+1])
t = 1
for answer in answers:
    output = 'Case #{0}: {1} {2}\n'.format(t, answer[0], answer[1])
    t += 1
    outf.write(output)
    print output


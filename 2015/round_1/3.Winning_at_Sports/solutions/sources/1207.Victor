import java.io.InputStreamReader;
import java.io.IOException;
import java.util.InputMismatchException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Task {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        String score = in.next();
        String scores[] = score.split("-");
        int A = Integer.parseInt(scores[0]);
        int B = Integer.parseInt(scores[1]);
        out.printf("Case #%d: %d %d\n", testNumber, stress_free(A, B), stress_full(A, B));
    }

    final int MOD = (int)1e9 + 7;

    int stress_free(int n, int m) {
        int dp[][] = new int[n + 1][m + 1];
        dp[1][0] = 1;
        for (int total = 1; total < n + m; ++total) {
            for (int i = 0; i <= n && i <= total; ++i) {
                int j = total - i;
                if (j > m || dp[i][j] == 0) {
                    continue;
                }
                if (i + 1 <= n) {
                    dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
                }
                if (i > j + 1 && j + 1 <= m) {
                    dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
                }
            }
        }
        return dp[n][m];
    }

    int stress_full(int n, int m) {
        int dp[][] = new int[n + 1][m + 1];
        dp[0][0] = 1;
        for (int total = 0; total < n + m; ++total) {
            for (int i = 0; i <= n && i <= total; ++i) {
                int j = total - i;
                if (j > m || dp[i][j] == 0) {
                    continue;
                }
                if ((j < m && i + 1 <= j && i + 1 <= n) ||
                        (j == m && i + 1 <= n)) {
                    dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
                }
                if (j + 1 <= m) {
                    dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
                }
            }
        }
        return dp[n][m];
    }
}

class InputReader {
    BufferedReader bufReader;
    StringTokenizer stringTokenizer;
    boolean isEof = false;

    public InputReader(InputStream stream) {
        bufReader = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            try {
                String line = bufReader.readLine();
                if (line == null) {
                    isEof = true;
                    return null;
                }
                stringTokenizer = new StringTokenizer(line);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
        }
        return stringTokenizer.nextToken();
    }

}


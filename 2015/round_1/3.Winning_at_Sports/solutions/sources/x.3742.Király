#include<bits/stdc++.h>
using namespace std;

typedef unsigned long long ull;
const ull MOD = 1000000007;

vector<vector<ull>> dp;
vector<vector<bool>> visited;

ull stress_free(int my, int your)
{
    if (my == 1 && your == 0) return dp[my][your] = 1llu;

    if (visited[my][your])
        return dp[my][your];
    visited[my][your] = true;

    ull ans = 0llu;
    if (my - 1 >= 1 && my - 1 > your)
        ans += stress_free(my - 1, your);
    if (your - 1 >= 0)
        ans += stress_free(my, your - 1);
    return dp[my][your] = ans % MOD;
}

ull stress_full(int my, int your)
{
    if (my == 0 && your == 1) return 1llu;

    if (visited[my][your])
        return dp[my][your];
    visited[my][your] = true;

    ull ans = 0;
    if (my >= your)
        ans += stress_full(my - 1, your);
    else
    {
        if (my - 1 >= 0) ans += stress_full(my - 1, your);
        if (your - 1 >= 1) ans += stress_full(my, your - 1);
    }
    return dp[my][your] = ans % MOD;
}

int main()
{
    freopen("E:\\IN.txt", "r", stdin);
    freopen("E:\\OUT.txt", "w", stdout);

    const int MAX_SCORE = 2000;

    dp.resize(MAX_SCORE + 5);
    for(int i = 0; i <= MAX_SCORE; ++i)
        dp[i].resize(MAX_SCORE + 5);

    visited.resize(MAX_SCORE + 5);
    for(int i = 0; i <= MAX_SCORE; ++i)
        visited[i].resize(MAX_SCORE + 5);

    int myscore, yourscore, tests;

    scanf("%d", &tests);
    for(int test = 1; test <= tests; ++test)
    {
        scanf("%d-%d", &myscore, &yourscore);

        if (yourscore == 0)
        {
            printf("Case #%d: %d %d\n", test, 1, 0);
            continue;
        }

        for(int i = 0; i <= myscore; ++i)
            for(int j = 0; j <= yourscore; ++j)
                visited[i][j] = false;
        dp[1][0] = 1llu; visited[1][0] = true;

        printf("Case #%d: %llu ", test, stress_free(myscore, yourscore));

        for(int i = 0; i <= myscore; ++i)
            for(int j = 0; j <= yourscore; ++j)
                visited[i][j] = false;
        dp[0][1] = 1llu; visited[0][1] = true;

        printf("%llu\n", stress_full(myscore, yourscore));
    }
}




















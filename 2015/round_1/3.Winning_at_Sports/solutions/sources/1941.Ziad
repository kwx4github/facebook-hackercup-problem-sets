#include <stdio.h>
#include <functional>
#include <bitset>
#include <math.h>
#include <time.h>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <stack>
#include <string.h>
#include <numeric>
#include <stack>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef long long ll;
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define INF 1<<20
#define EPS 1e-5
#define MOD 1000000007

ll dp1[2010][2010];
ll dp2[2010][2010];

ll solve1 (int x , int y)
{
	if (x == 0 && y == 0) return 1;
	if (x < 0 || y < 0) return 0;
	if (x <= y) return 0;
	if (dp1[x][y] != -1) return dp1[x][y];

	dp1[x][y] = solve1(x,y-1) + solve1(x-1,y);
	dp1[x][y] %= MOD;
	return dp1[x][y];
}


ll solve2 (int x , int y)
{
	if (x == 0 && y == 0) return 1;
	if (x < 0 || y < 0) return 0;
	if (y < x) return 0;
	if (dp2[x][y] != -1) return dp2[x][y];

	dp2[x][y] = solve2(x,y-1) + solve2(x-1,y);
	dp2[x][y] %= MOD;
	return dp2[x][y];
}

int main() {
	freopen("txt.in","r",stdin);
	freopen("txt.out","w",stdout);

	int TC;
	cin >> TC;
	int CC=1;
	while (TC--)
	{
		memset(dp1,-1,sizeof dp1);
		memset(dp2,-1,sizeof dp2);
		int x,y;
		scanf("%d-%d",&x,&y);
		printf("Case #%d: ",CC++);
		cout << solve1(x,y) << " " << solve2(y,y) << endl;
	}
}

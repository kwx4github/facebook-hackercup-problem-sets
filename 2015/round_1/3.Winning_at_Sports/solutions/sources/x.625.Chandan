package hackercup.y2015.round1.winning;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/y2015/round1/winning/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }

    private static class Solver {

        private static final int MOD = 1000000007;

        int v = 2000;
        //dpw[i][j] = no of games with i wins and j losses where i > j.
        long dpw[][] = new long[v+1][v+1];
        {
            for (int i=1; i<=v; i++) {
                dpw[i][0] = 1;
            }

            for (int i=1; i<=v; i++) {
                for (int j=1; j<i; j++) {
                    dpw[i][j] = dpw[i-1][j] + dpw[i][j-1];
                    if (dpw[i][j] >= MOD) {
                        dpw[i][j] -= MOD;
                    }
                }
            }
        }

        //dpl[i][j] = no of games with i wins and j losses where i<=j.
        long dpl[][] = new long[v+1][v+1];
        {
            for (int i=1; i<=v; i++) {
                dpl[0][i] = 1;
            }

            for (int i=1; i<=v; i++) {
                for (int j=i; j<=v; j++) {
                    dpl[i][j] = dpl[i-1][j] + dpl[i][j-1];
                    if (dpl[i][j] >= MOD) {
                        dpl[i][j] -= MOD;
                    }
                }
            }
        }

        public void solve(InputReader in, PrintWriter out) {
            String s = in.next();
            String ch[] = s.split("-");
            int x = Integer.parseInt(ch[0]);
            int y = Integer.parseInt(ch[1]);

            out.println(dpw[x][y] + " " + dpl[y][y]);
        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

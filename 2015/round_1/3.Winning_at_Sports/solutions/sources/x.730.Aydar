import java.io.*;
import java.util.StringTokenizer;

public class ProbC {
    boolean eof;

    public static void main(String[] args) throws IOException {
        new ProbC().run();
    }

    String next() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "-1";
            }
        }
        return st.nextToken();
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    int nextInt() {
        return Integer.parseInt(next());
    }

    void run() throws IOException {
        String name = "input.txt";
        InputStream input = System.in;
        OutputStream output = System.out;
        try {
            File f = new File(name);
            if (f.exists() && f.canRead()) {
                input = new FileInputStream(f);
                output = new FileOutputStream(name + ".out");
            }
        } catch (Exception e) {
        }

        br = new BufferedReader(new InputStreamReader(input));
        out = new PrintWriter(output);

        solve();

        br.close();
        out.close();
    }

    void solve() {
        int test = nextInt();
        int mod = 1_000_000_007;
        int[][] dp;
        int[][] dp2;

        for (int t_id = 0; t_id < test; ++t_id) {
            out.print("Case #" + (t_id + 1) + ": ");


            String s = next();
            int n = Integer.parseInt(s.substring(0, s.indexOf('-')));
            int m = Integer.parseInt(s.substring(s.indexOf('-') + 1));

            dp = new int[n + 1][m + 1];
            dp[0][0] = 1;
            for (int i = 1; i <= n; ++i) {
                for (int j = 0; j <= m && j < i; ++j) {
                    if (i > 0) {
                        dp[i][j] += dp[i - 1][j];
                        dp[i][j] %= mod;
                    }
                    if (j > 0) {
                        dp[i][j] += dp[i][j - 1];
                        dp[i][j] %= mod;
                    }
                }
            }

            dp2 = new int[n + 1][m + 1];
            dp2[0][0] = 1;
            for (int j = 1; j <= m; ++j) {
                for (int i = 0; i <= j || j == m && i <= n; ++i) {
                    if (i > 0) {
                        dp2[i][j] += dp2[i - 1][j];
                        dp2[i][j] %= mod;
                    }
                    if (j > 0) {
                        dp2[i][j] += dp2[i][j - 1];
                        dp2[i][j] %= mod;
                    }
                }
            }

            out.println(dp[n][m] + " " + dp2[n][m]);
        }
    }


    class Pair {
        int x;
        int y;
        int p;

        Pair(int x, int y, int p) {
            this.x = x;
            this.y = y;
            this.p = p;
        }
    }
}

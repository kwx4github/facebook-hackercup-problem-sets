#include <algorithm>
#include <assert.h>
#include <climits>
#include <cstring>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <numeric>
#include <limits>
#include <iomanip>
using namespace std;

#define sz(a) ((int)a.size())
#define all(a) a.begin(), a.end()
#define LL long long
#define LD long double
#define vi vector<int>
#define vl vector<LL>
#define vs vector<string>
#define vb vector<bool>
#define ii pair<int, int>
#define vii vector<ii>
#define SET(v, i) (v | (1 << i))
#define TEST(v, i) (v & (1 << i))
#define TOGGLE(v, i) (v ^ (1 << i))

const LL MOD = 1000000007;
LL mem1[2000 + 10][2000 + 10];
LL mem2[2000 + 10][2000 + 10];

LL CalcStressFree(int n, int m) {
  if (n < 0 || m < 0 || n <= m) return 0;
  if (!m) return 1;
  if (mem1[n][m] != -1) return mem1[n][m];

  return mem1[n][m] =
      (CalcStressFree(n - 1, m) % MOD +
          CalcStressFree(n, m - 1) % MOD) % MOD;
}

LL CalcStressFull(int n, int m, int m_orig) {
  if (n < 0 || m < 0 || (n > m && m != m_orig)) return 0;
  if (!n && !m) return 1;
  if (mem2[n][m] != -1) return mem2[n][m];

  return mem2[n][m] =
      (CalcStressFull(n - 1, m, m_orig) % MOD +
          CalcStressFull(n, m - 1, m_orig) % MOD) % MOD;
}

int main() {
  int t;
  scanf("%d", &t);
  for (int test = 1; test <= t; ++test) {
    int n, m;
    scanf("%d-%d", &n, &m);
    memset(mem1, -1, sizeof mem1);
    memset(mem2, -1, sizeof mem2);
    printf("Case #%d: %lld %lld\n",
        test,
        CalcStressFree(n, m),
        CalcStressFull(n, m, m));
  }
  return 0;
}

#include <iostream>
using namespace std;

#define MODSCORE 1000000007
#define MAXPTS 2000

void read_score(int& us, int& them)
{
    string line;
    getline(cin, line);

    //cerr << "Read in '" << line << "'" << endl;
    size_t hyphen = line.find_first_of("- \r\n", 0);
    size_t eol = line.find_first_of("- \r\n", hyphen+1);
    
    string us_str = line.substr(0, hyphen);
    string them_str = line.substr(hyphen + 1, eol);
    //cerr << "Us: '" << us_str << "' Them: '" << them_str << "'" << endl;

    us = stoi(us_str);
    them = stoi(them_str);
}

int collect_stressful(int *field, int us, int them)
{
    const int rows = them + 2;
    memset(field, 0, sizeof(int) * (MAXPTS * 2) * (MAXPTS * 2));

    for (int i = them; i >= 0; i--) {
        for (int j = i; j >= 0; j--) {
            if (i == them) {
                field[i*rows+j] = 1;
            } else {
                field[i*rows+j] = (field[i*rows+(j+1)] + field[(i+1)*rows+j]) % MODSCORE;
            }
            // cerr << i << ", " << j << ": " << field[i*them+j] << endl;
        }
    }
    return field[0];
}

int collect_stressfree(int *field, int const us, int const them)
{
    const int rows = them + 2;
    memset(field, 0, sizeof(int) * (MAXPTS * 2) * (MAXPTS * 2));

    for (int i = us; i >= 0; i--) {
        for (int j = them; j >= 0; j--) {
            if (i == us) {
                field[i*rows+j] = 1;
            } else if (i > j) {
                field[i*rows+j] = (field[i*rows+(j+1)] + field[(i+1)*rows+j]) % MODSCORE;
            }
            // cerr << i << ", " << j << ": " << field[i*rows+j] << endl;
        }
    }

    return field[1*rows+0];
}

int main(void)
{
    int maxtc;
    std::string throwaway;
    cin >> maxtc;
    getline(cin, throwaway);
    for (int tc = 1; tc <= maxtc; tc++) {
        int us, them;
        read_score(us, them);
        int *field = new int[(MAXPTS*2) * (MAXPTS*2)];

        // cerr << us << " " << them << endl;
        cout << "Case #" << tc << ": " << collect_stressfree(field, us, them)
             << " " << collect_stressful(field, us, them) << endl;
        delete [] field;
    }
    return 0;
}

#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "3"

typedef long long ll;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

const ll Prime = 1000000007;

ll CountStressFree(int a, int b, vvi& dp) {
	if (a == b) {
		return 0;
	}
	if (b == 0) {
		return 1;
	}
	if (dp[a][b] != -1) {
		return dp[a][b];
	}
	ll answer = (CountStressFree(a - 1, b, dp) % Prime + CountStressFree(a, b - 1, dp) % Prime) % Prime;
	dp[a][b] = answer;
	return answer;
}

ll CountStressfull(int a, int b, vvi& dp) {
	if (a == 0 && b == 0) {
		return 0;
	}

	if (a == 0) {
		return 1;
	}

	if (a > b) {
		return 0;
	}

	if (dp[a][b] != -1) {
		return dp[a][b];
	}
	ll answer = (CountStressfull(a - 1, b, dp) % Prime + CountStressfull(a, b - 1, dp) % Prime) % Prime;
	dp[a][b] = answer;
	return answer;
}

void Test() {
	vvi stress_free(3000, vi(3000, -1));
	vvi stress_full(3000, vi(3000, -1));

	for (int i = 0; i < 200; ++i) {
		int a = rand() % 3000;
		int b = rand() % 2000;
		if (a == b) a += 1;
		if (b > a) swap(a, b);
		cout << a << " " << b << endl;
		CountStressFree(a, b, stress_free);
		CountStressfull(a, b, stress_full);
	}
}

int main() {
	// Test();
	// return 0;
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
	  int a, b;
	  cin >> a;
	  cin >> b;
	  b = (-1) * b;

	  vvi stress_free(3000, vi(3000, -1));
	  vvi stress_full(3000, vi(3000, -1));
	  cout << "Case #" << test_index + 1 << ": " << CountStressFree(a, b, stress_free) << " " 
		  << CountStressfull(b, b, stress_full) << endl;
  }
  return 0;
}

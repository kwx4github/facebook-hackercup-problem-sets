import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class C {

	static StringTokenizer st;
	static BufferedReader br;
	static PrintWriter pw;
	
	public static void main(String[] args) throws IOException{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int test = nextInt();
		int mod = (int) (1e9+7);
		int k = 2000;
		int[][]dp1 = new int[k+1][k+1];
		int[][]dp2 = new int[k+1][k+1];
		dp1[0][0] = dp2[0][0] = 1;
		for (int i = 0; i <= k; i++) {
			for (int j = 0; j <= k; j++) {
				if (i==0 && j==0)
					continue;
				if (j > 0)
					dp1[i][j] = dp1[i][j-1];
				if (i-1 > j || i-1==0 && j==0)
					dp1[i][j] = (dp1[i][j]+dp1[i-1][j]) % mod;
				if (i > 0)
					dp2[i][j] = dp2[i-1][j];
				if (j-1 >= i)
					dp2[i][j] = (dp2[i][j]+dp2[i][j-1]) % mod;
			}
		}
		for (int t = 1; t <= test; t++) {
			pw.print("Case #"+t+": ");
			String[] s = next().trim().split("-");
			int n = Integer.parseInt(s[0]);
			int m = Integer.parseInt(s[1]);
			pw.println(dp1[n][m]+" "+dp2[n][m]);
		}
		pw.close();
	}

	private static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	private static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
	private static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	private static String next() throws IOException{
		while (st==null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine());
		return st.nextToken();
	}

}

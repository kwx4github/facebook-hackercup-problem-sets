
class Calcul {

	void Main () {
		int nombreLigne ;

		Ligne lign ;//= new Ligne() ;

		Interface inter = new Interface(
				"/home/professionnel/Documents/Programmation/Global/Concours programmation Groovy/src/",
				"input.txt",'output.txt') ;
		inter.CreationFichier();

		Global tab = new Global() ;
		tab.Remplire();
		//tab.Imprimmer() ;

		List ligne = inter.ChargementDonnees();
		nombreLigne = ligne[0].toInteger() ;
		int i ;
		for(i=1;i<nombreLigne+1;i++) {
			lign = new Ligne(ligne[i]) ;
			lign.Calcul(tab) ;
			lign.Afficher(i) ;
			lign.Ecrire(inter,i) ;
		}

	}
}


class Ligne {
	int scoreWin ;
	int scoreLose ;
	int nombreStressLess ;
	int nombreStressFull ;

	Ligne(String ligne) {
		//ligne.replace('-', ' ')
		//println ligne.replace('-', ' ') ;
		Scanner scan  = new Scanner(ligne.replace('-', ' '));

		scoreWin = scan.nextInt() ;
		scoreLose = scan.nextInt() ;
	}

	/*Ligne (int score1, int score2) {
	 scoreWin = score1 ;
	 scoreLose = score2 ;
	 }*/

	void Calcul(Global tab) {
		nombreStressLess = tab.GetScore(scoreWin,scoreLose) ;
		nombreStressFull = tab.GetScoreEgalite(scoreLose,scoreLose-1) ;
	}

	void Afficher(int cas) {
		println "Case #" + cas + ": " + nombreStressLess + " " + nombreStressFull ;
	}

	void Ecrire(Interface inter, int cas) {
		if(cas == 1) {
			inter.Ecriture("Case #" + cas + ": " + nombreStressLess + " " + nombreStressFull + "\n") ;
		} else {
			inter.EcritureAppend("Case #" + cas + ": " + nombreStressLess + " " + nombreStressFull + "\n") ;
		}
	}
}

class Global {
	int taille ;
	int modulo ;
	int[][] tableau ;
	//int[][] tableauEgalite ;

	Global() {
		taille = 4100 ;
		modulo = 1000000007 ;
		tableau = new int[taille] ;
	}

	int Get (int i, int j) {
		if(i >= 0 && i < taille && j >= 0 && j < Math.floor(i/2) + 1) {
			return tableau[i][j] ;
		} else {
			return 0 ;
		}
	}

	void Remplire (){
		int i , j ;
		int colonnes ;

		tableau[0] = new int[1] ;
		tableau[0][0] = 1 ;

		for(i=1;i<taille;i++) {
			colonnes = Math.floor(i/2) + 1 ;
			tableau[i] = new int[colonnes] ;

			for(j=0;j<colonnes;j++) {
				tableau[i][j] = (this.Get(i-1,j-1) + this.Get(i-1,j)) % modulo ;
			}
		}
	}

	void Imprimmer() {
		int i , j ;
		int colonnes ;

		for(i=0;i<Math.min(taille, 20);i++) {
			colonnes = Math.floor(i/2) + 1 ;

			for(j=0;j<colonnes;j++) {
				print "" + tableau[i][j] + " " ;
			}

			print "\n" ;
		}
	}

	int GetScore (int score1, int score2) {
		return this.Get(score1+ score2-1, score2) ;
	}

	int GetEgalite (int i, int j) {
		return this.Get(i+1, j) ;
	}

	int GetScoreEgalite (int score1, int score2) {
		return this.GetEgalite(score1+ score2-1, score2) ;
	}

}

class Interface {

	// http://stackoverflow.com/questions/12260849/read-values-from-formatted-string-java-groovy
	// http://groovy.codehaus.org/Reading+Files+Line+by+Line
	// http://groovy.codehaus.org/Input+Output
	// http://groovy.codehaus.org/groovy-jdk/java/io/File.html

	String dossier;
	String nomFichierIn ;
	String nomFichierOut ;

	File fichierIn ;
	File fichierOut ;

	Interface(String dossierString , String nomFichierInString, String nomFichierOutString){
		dossier = dossierString ;
		nomFichierIn = nomFichierInString ;
		nomFichierOut = nomFichierOutString ;
	}

	void CreationFichier ()
	{
		fichierIn = new File(dossier + nomFichierIn) ;
		fichierOut = new File(dossier + nomFichierOut) ;
	}

	List ChargementDonnees ()
	{
		return fichierIn.readLines() ;
	}

	void Ecriture (String chaine) {
		fichierOut.write(chaine) ;
	}

	void EcritureAppend (String chaine) {
		fichierOut.append(chaine) ;
	}


}


Calcul programme = new Calcul() ;
programme.Main();









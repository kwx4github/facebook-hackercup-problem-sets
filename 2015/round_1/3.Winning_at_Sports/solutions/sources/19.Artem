#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

const int NMAX = 2100;
const int MOD = INF + 7;

int z1[NMAX][NMAX], u[NMAX][NMAX], us, a, b, z2[NMAX][NMAX];

void read() {
  scanf("%d-%d", &a, &b);
}

void gen() {

}

int rec1(int l, int r) {
  if (l > a || r > b)
    return 0;
  if (l == a && r == b)
    return 1;
  if (u[l][r] == us)
    return z1[l][r];
  if (l <= r && (l != 0 || r != 0))
    return 0;
  u[l][r] = us;
  return z1[l][r] = (rec1(l + 1, r) + rec1(l, r + 1)) % MOD;
}

int rec2(int l, int r) {
  if (l > a || r > b)
    return 0;
  if (r == b)
    return 1;
  if (u[l][r] == us)
    return z2[l][r];
  if (l > r)
    return 0;
  u[l][r] = us;
  return z2[l][r] = (rec2(l + 1, r) + rec2(l, r + 1)) % MOD;
}

void solve() {
  us++;
  int res1 = rec1(0, 0);
  us++;
  int res2 = rec2(0, 0);
  cout << res1 << ' ' << res2 << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
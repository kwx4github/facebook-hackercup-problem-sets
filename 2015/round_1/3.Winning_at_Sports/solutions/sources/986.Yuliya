import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author kaktusito
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		solver.solve(1, in, out);
		out.close();
	}
}

class WinningAtSports {

    final static int MD = (int) (1e9 + 7);

    int MAXN = 2015;
    int[][] dp = new int[MAXN][MAXN];

    public void solve(int testNumber, InputReader in, PrintWriter out) {

        int cases = in.nextInt();
        for (int t = 1; t <= cases; ++t) {
            String[] parts = in.next().split("-");
            int a = Integer.parseInt(parts[0]);
            int b = Integer.parseInt(parts[1]);

            for (int i = 0; i <= a; ++i)
                for (int j = 0; j <= b; ++j)
                    dp[i][j] = -1;

            int ans1 = f(a, b);

            for (int i = 0; i <= a; ++i)
                for (int j = 0; j <= b; ++j)
                    dp[i][j] = -1;

            int ans2 = g(b, b);

            out.println(String.format("Case #%d: %d %d", t, ans1, ans2));
        }

    }

    private int f(int a, int b) {
        if (dp[a][b] != -1) return dp[a][b];
        int ret;

        if (b == 0) ret = 1;
        else if (a <= b) ret = 0;
        else ret = (f(a, b - 1) + f(a - 1, b)) % MD;

        return dp[a][b] = ret;
    }

    private int g(int a, int b) {
        if (dp[a][b] != -1) return dp[a][b];
        int ret = 0;

        if (a > b) ret = 0;
        else if (a == 0 || b == 0) ret = 1;
        else {
            ret = g(a - 1, b);
            if (b > a)
                ret = (ret + g(a, b - 1)) % MD;
        }

        return dp[a][b] = ret;
    }
}

class InputReader
{
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }

    public String next() {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


mm = 1000000007

addMod :: Int -> Int -> Int
addMod a b = if a + b >= mm then a + b - mm else a + b

subMod :: Int -> Int -> Int
subMod a b = if a < b then a + mm - b else a - b

choose :: Int -> Int -> Int
choose n m
    | n < m = 0
    | n < 0 = 0
    | m < 0 = 0
    | otherwise = mem !! n !! m
    where mem = let step = \acc _ -> zipWith addMod (0 : acc) (acc ++ [0])
                in scanl step [1] (repeat 0)

free :: Int -> Int -> Int
free a b
    | a <= b = 0
    | otherwise = let (n, m, m') = (a - 1 + b, b, b - 1)
                  in subMod (choose n m) (choose n m')

stress :: Int -> Int -> Int
stress a b
    | a <= b = 0
    | otherwise = let (n, m, m') = (b + b, b, b - 1)
                  in subMod (choose n m) (choose n m')

readScore :: String -> (Int, Int)
readScore s = let x = takeWhile (/= '-') s
                  y = tail . dropWhile (/= '-') $ s
              in (read x, read y)

batch :: Int -> [String] -> [String]
batch _ [] = []
batch id (s : qs) = let (a, b) = readScore s
                        n = free a b
                        m = stress a b
                        format = "Case #" ++ show id ++ ": " ++ show n ++ " " ++ show m
                    in format : batch (id + 1) qs

main = do
    getContents >>= mapM putStrLn . batch 1 . tail . lines


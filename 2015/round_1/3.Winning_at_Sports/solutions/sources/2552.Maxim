#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <functional>
#include <time.h>
#include <cmath>
#include <deque>
 
using namespace std;
 
#define ll long long
#define mp make_pair
#define pb push_back
#define double long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define piii pair<int, pair<int, int> >
#define plll pair<ll, pair<ll, ll> >
#pragma comment(linker, "/STACK:36777216")
 
 

 
ll EPS = 1000000007;
double PI = 3.14159265358979323846;
const int MAXN = 10000010;
 
 


ll abss(ll h)
{
	return max(h, -h);
}
 
 
double fabss(double h)
{
	return max(h, -h);
}
 
ll ceill(ll x, ll y)
{
	if (x % y != 0)
	{
		return (x / y) + 1;
	}
	return x / y;
}
 

int n, m, k;

//int a[MAXN];
//int b[MAXN];
//int used[MAXN];
ll d[2010][2010];

int main()
{
  freopen("winning_at_sports.txt", "r", stdin);
	freopen("winning_at_sports_o.txt", "w", stdout);
	int t;
	cin >> t;
	int a, b;
	for (int z = 0; z < t; z++)
	{
		for (int i = 0; i <= 2010; i++)
		{
			for (int j = 0; j <= 2010; j++)
			{
				d[i][j] = 0;
			}
		}
		scanf("%d-%d", &a, &b);
		d[1][0] = 1;
		for (int i = 1; i <= a; i++)
		{
			for (int j = 0; j < min(b + 1, i); j++)
			{
				if (i == 1 && j == 0)
				{
					continue;
				}
				if (j == 0)
				{
					d[i][j] = d[i - 1][j];
					d[i][j] %= EPS;
					continue;
				}
				d[i][j] = d[i - 1][j] + d[i][j - 1];
				d[i][j] %= EPS;
			}
		}
		d[a][b] %= EPS;
		ll ans1 = d[a][b];
		for (int i = 0; i <= 2010; i++)
		{
			for (int j = 0; j <= 2010; j++)
			{
				d[i][j] = 0;
			}
		}
		d[0][0] = 1;
		for (int i = 0; i <= b; i++)
		{
			for (int j = 0; j <= i; j++)
			{
				if (i == 0 && j == 0)
				{
					continue;
				}
				if (j == 0)
				{
					d[i][j] = d[i - 1][j];
					d[i][j] %= EPS;
					continue;
				}
				d[i][j] = d[i - 1][j] + d[i][j - 1];
				d[i][j] %= EPS;
			}
		}
		d[b][b] %= EPS;
		cout << "Case #" << z + 1 << ": " << ans1 << " " << d[b][b] << endl;
	}
}
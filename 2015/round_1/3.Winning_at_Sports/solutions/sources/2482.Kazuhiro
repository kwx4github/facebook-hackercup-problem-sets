#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#define REP(i,n) for(int i=0;i<n;i++)
using namespace std;
const long long int MOD=1000000007;
long long int DP[4001][2005]={0};
long long int dfs(int dep,int m,int e,int win){
	if(dep==m+e) return 1;
	if(DP[dep][win]!=0){
		return DP[dep][win];
	}
	if(win!=m){
		DP[dep][win]+=(dfs(dep+1,m,e,win+1))%MOD;
	}
	if(dep-win!=e && win-1 > dep-win){
		DP[dep][win]+=(dfs(dep+1,m,e,win))%MOD;
	}
	return DP[dep][win];
}

long long int dfs_s(int dep,int m,int e,int win){
	if(dep-win==e) return 1;
	if(DP[dep][win]!=0){
		return DP[dep][win];
	}
	if(win!=m && dep-win > win){
		DP[dep][win]+=(dfs_s(dep+1,m,e,win+1))%MOD;
	}
	if(dep-win!=e){
		DP[dep][win]+=(dfs_s(dep+1,m,e,win))%MOD;
	}
	return DP[dep][win];
}

void solve(int turn){
	string a,b="";
	cin>>a;
	int m,e;
	REP(i,a.size()){
		if(a[i]=='-'){
			m=atoi(b.c_str());
			b="";
		}
		else b+=a[i];
	}
	e=atoi(b.c_str());
	REP(i,m+e+1) REP(j,m+1) DP[i][j]=0;
	cout<<"Case #"<<turn<<": "<<dfs(0,m,e,0)%MOD<<" ";
	REP(i,m+e+1) REP(j,m+1) DP[i][j]=0;
	cout<<dfs_s(0,m,e,0)%MOD<<endl;
}

int main(){
	int T;
	cin>>T;
	REP(turn,T){
		solve(turn+1);
	}
  return 0;
}

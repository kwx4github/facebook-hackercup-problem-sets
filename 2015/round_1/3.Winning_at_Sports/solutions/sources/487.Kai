#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#include <vector>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <functional>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

template<typename T>inline string to_str(const T& v) {
    ostringstream os; os << v; return os.str();
}
template<typename T>inline T to_obj(const string& v) {
    istringstream is(v); T r; is>>r; return r;
}
template<class T>inline int cMin(T& a, T b) {return b<a ? a=b,1 : 0;}
template<class T>inline int cMax(T& a, T b) {return a<b ? a=b,1 : 0;}

#define CLR(A,v) memset(A, v, sizeof(A))
#define MP(a,b)  make_pair(a, b)
#define F0(i, n) for(int i=0; i<(n); ++i)
#define F1(i, n) for(int i=1; i<=(n); ++i)

const int NN = 2048;
const int MOD = 1000000007;

int dpF[NN][NN] = {0};
int dpS[NN][NN] = {0};

int init() {
    dpF[0][0] = 1;
    dpF[1][0] = 1;
    for(int i=2; i<=2000; ++i) {
        dpF[i][0] = 1;
        for(int j=1; j+1<i; ++j) {
            dpF[i][j] = (dpF[i-1][j] + dpF[i][j-1]) % MOD;
        }
        dpF[i][i-1] = dpF[i][i-2];
    }
    dpS[0][0] = 1;
    for(int i=1; i<=2000; ++i) {
        dpS[0][i] = 1;
        for (int j=1; j<i; ++j) {
            dpS[j][i] = (dpS[j-1][i] + dpS[j][i-1]) % MOD;
        }
        dpS[i][i] = dpS[i-1][i];
    }
}

int main(int argc, char *argv[]) {
    init();
    int T;
    scanf("%d", &T);
    F1(iT, T) {
        int a, b;
        scanf("%d-%d", &a, &b);
        printf("Case #%d: %d %d\n", iT,
               dpF[a][b], dpS[b][b]);
    }
    return 0;
}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <time.h>

#include <iostream>
#include <utility>
#include <string>
#include <vector>
#include <sstream>

using namespace std;

class Solution
{
    static const int MOD = 1000000007;

    static int stringToInteger(const string::const_iterator &begin, const string::const_iterator &end)
    {
        int x = 0;
        for (auto letter = begin; letter != end; letter++)
        {
            x = 10 * x + *letter - '0';
        }
        return x;
    }

    static pair<int, int> parseScore(const string &score)
    {
        pair<int, int> result;
        size_t hyphen = score.find('-');
        result.first = stringToInteger(score.begin(), score.begin() + hyphen);
        result.second = stringToInteger(score.begin() + hyphen + 1, score.end());
        return result;
    }

    static bool isValidScore(int a, int b)
    {
        return a >= 0 && b >= 0;
    }

    static bool isStressFree(int a, int b)
    {
        return isValidScore(a, b) && (a > b || (a == 0 && b == 0));
    }

    static bool isStressFul(int a, int b, int opponentFinalScore)
    {
        return isValidScore(a, b) && (a <= b || b == opponentFinalScore);
    }

public:
    pair<int, int> solve(const string &score)
    {
        pair<int, int> answer, input = parseScore(score);        
        int a = input.first, b = input.second;

        vector<vector<int> > d(a + 1, vector<int>(b + 1, 0));
        d[0][0] = 1;

        for (int i = 0; i <= a; i++)
            for (int j = 0; j <= b; j++)
                if (!(i == 0 && j == 0))
                {
                    d[i][j] = 0;
                    if (isStressFree(i - 1, j))
                    {
                        d[i][j] = (d[i][j] + d[i - 1][j]) % MOD;
                    }     
                    if (isStressFree(i, j - 1))
                    {
                        d[i][j] = (d[i][j] + d[i][j - 1]) % MOD;
                    }
                }
        answer.first = d[a][b];
        
        for (int i = 0; i <= a; i++)
            for (int j = 0; j <= b; j++)
                if (!(i == 0 && j == 0))
                {
                    d[i][j] = 0;
                    if (isStressFul(i - 1, j, b))
                    {
                        d[i][j] = (d[i][j] + d[i - 1][j]) % MOD;
                    }
                    if (isStressFul(i, j - 1, b))
                    {
                        d[i][j] = (d[i][j] + d[i][j - 1]) % MOD;
                    }
                }
        answer.second = d[a][b];

        return answer;
    }
};

void test();

int main(int argc, char* argv[])
{
    // test();
    // return 0;
    
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(false);

    int T;
    cin >> T;
    for (int t = 1; t <= T; t++)
    {
        double time = clock();
        string score;
        cin >> score;
        Solution solution;
        pair<int, int> answer = solution.solve(score);
        cout << "Case #" << t << ": " << answer.first << " " << answer.second << "\n";
        time = (clock() - time) / CLOCKS_PER_SEC;
        cerr << "Case #" << t << ": " << answer.first << " " << answer.second << "(" << time << "sec)" << endl;
    }

	return 0;
}

string makeInput(int a, int b)
{
    stringstream ss;
    ss << a << '-' << b;
    string input;
    ss >> input;
    return input;
}

void printPair(const pair<int, int> &pair)
{
    cout << pair.first << ' ' << pair.second << endl;
}

void test()
{
    Solution solution;    

    double worst_time = clock();
    solution.solve("2000-1999");
    worst_time = (clock() - worst_time) / CLOCKS_PER_SEC;
    cout << "Worst time is " << worst_time << "sec" << endl;

    for (int a = 1; a <= 2000; a++)
    {
        cout << a << '\r';
        for (int b = 0; b < a; b++)
        {
            string input = makeInput(a, b);

            double time = clock();
            pair<int, int> ans = solution.solve(input);
            time = (clock() - time) / CLOCKS_PER_SEC;
            if (time > worst_time)
            {
                worst_time = time;
                cout << "Worst time is " << worst_time << "sec" << endl;
            }
        }
    }
}


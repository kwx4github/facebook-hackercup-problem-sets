import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;

class Solution {

    static BufferedReader in;
    static StringTokenizer tok;
    static final long MOD = 1000000007L;
    static Map<List<Integer>, Long> mapful = new HashMap<List<Integer>, Long>();
    static Map<List<Integer>, Long> mapfree = new HashMap<List<Integer>, Long>();

    static long countfree;
    static long countful;

    public static void main(String[] args) {
        try {
            in = new BufferedReader(new InputStreamReader(System.in));

            int t_cases = nextInt();
            String temp;
            int our, them;
            for (int z = 1; z <= t_cases; z++) {
                temp = next();
                String[] str = temp.split("-");
                our = Integer.parseInt(str[0]);
                them = Integer.parseInt(str[1]);

                countfree = 0;
                countful = 0;

                mapfree.clear();
                mapful.clear();
                
                sful(0, 1, our, them);
                sfree(1, 0, our, them);
                //printMap();
                System.out.println("Case #" + z + ": " + countfree % MOD+ " " + (countful % MOD));
            }

            in.close();
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    private static void sful(int our, int them, int ourLimit, int themLimit) {

        if (our == ourLimit && them == themLimit) {
            countful++;
            if (countful > MOD) {
                countful = countful % MOD;
            }
            return;
        }
        
        if (countful > MOD) {
            countful = countful % MOD;
        }
        
        if (mapful.containsKey(Arrays.asList(our, them))) {
            countful += mapful.get(Arrays.asList(our, them));
            if (countful > MOD) {
                countful = countful % MOD;
            }
            return;
        }
        long counter = countful;
        if (!(our + 1 > ourLimit) && (our + 1 <= them || them == themLimit)) {

            //stackful.push(0);
            sful(our + 1, them, ourLimit, themLimit);

            //stackful.pop();
        }

        if (!(them + 1 > themLimit)) {
            //stackful.push(1);
            sful(our, them + 1, ourLimit, themLimit);

            //stackful.pop();
        }
        long result = (countful - counter);
        if (result < 0) {
            result = MOD+result;
        }
        mapful.put(Collections.unmodifiableList(Arrays.asList(our, them)), result > MOD ? result % MOD : result);
        // printMap();
    }

    private static void sfree(int our, int them, int ourLimit, int themLimit) {
        if (our == ourLimit && them == themLimit) {
            countfree++;
            if (countfree > MOD) {
                countfree = countfree % MOD;
            }
            return;
        }
        
        if (countfree > MOD) {
            countfree = countfree % MOD;
        }
        
        if (mapfree.containsKey(Arrays.asList(our, them))) {
            countfree += mapfree.get(Arrays.asList(our, them));
            if (countfree > MOD) {
                countfree = countfree % MOD;
            }
            return;
        }
        long counter = countfree;
        if (!(our + 1 > ourLimit)) {

            //stackful.push(0);
            sfree(our + 1, them, ourLimit, themLimit);

            //stackful.pop();
        }

        if (!(them + 1 > themLimit) && them+1 < our) {
            //stackful.push(1);
            sfree(our, them + 1, ourLimit, themLimit);

            //stackful.pop();
        }
        long result = (countfree - counter);
        if (result < 0) {
            result = MOD+result;
        }
        mapfree.put(Collections.unmodifiableList(Arrays.asList(our, them)), result > MOD ? result % MOD : result);
    }

    private static void printMap() {
        for (Entry<List<Integer>, Long> entry : mapful.entrySet()) {
            if (entry.getValue() < 0) {
                System.out.println("hello");
            }
            //System.out.println(entry.getKey() + "\t->\t" + entry.getValue());
        }
        System.out.print("\n\n");
    }

    static int nextInt() throws IOException {
        return parseInt(next());
    }

    static long nextLong() throws IOException {
        return parseLong(next());
    }

    static double nextDouble() throws IOException {
        return parseDouble(next());
    }

    static String next() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
            tok = new StringTokenizer(in.readLine());
        }
        return tok.nextToken();
    }

}


#include<bits/stdc++.h>

#define xx first
#define yy second
#define all(a) a.begin(), a.end()
#define vsort(v) sort(all(v))
#define UNIQUE(a)  sort(all(a)); a.erase(unique(all(a)), a.end())
#define clr(a,k) memset(a,k,sizeof a)
#define bclr(b) memset(b,false,sizeof b)
#define fr(i, a) for(i = 0; i < a; i++)
#define frr(i,a) for(i = a - 1; i >= 0, i--)
#define LL long long
#define pb push_back
#define mp make_pair
///***** bit *****///
#define check_bit(a, b) (a&(1<<b))
#define set_bit(a, b) (a|(1<<b))
#define total_bit(a) __builtin_popcount(a)
///***** Input / Output *****///
#define s1(a) scanf("%d", &a)
#define s2(a, b) scanf("%d %d", &a, &b)
#define s3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define p1(a) printf("%d", a)
#define p2(a, b) printf("%d %d", a, b)
#define p3(a, b, c) printf("%d %d %d", a, b, c)

#define MOD 1000000007
#define MAX 10000009


using namespace std;
LL dp[2009][2009][2];
int n, m;
LL solve(int a, int b, int stp)
{
    if(a == n && b == m) return 1ll;
    if(a > n || b > m) return 0ll;
    LL &ret = dp[a][b][stp];
    if(ret != -1ll) return ret;
    ret = 0ll;
    if(stp == 0)
    {
        if(a < n) ret = (ret + solve(a + 1, b, 0)) % MOD;
        if(b < m && b +1 < a) ret = (ret + solve(a, b + 1, 0)) % MOD;
    }
    else
    {
        if(a < n)
        {
            if(a + 1 <= b) ret = (ret + solve(a + 1, b, 1)) % MOD;
            else if(b == m)
                ret = (ret + solve(n, b, 1)) % MOD;
        }
        if(b < m) ret = (ret + solve(a, b + 1, 1)) % MOD;

    }
    return ret;
}


int main()
{
    string str;
    ofstream myfile;
    myfile.open ("outputforC.txt");

    int t,cs=1,i,j,k;

    cin>>t;
    char tmp;
    while(t--)
    {
//        scanf("%d%c%d", &n,&tmp, &m);
        cin>>n>>tmp>>m;
        memset(dp, -1ll, sizeof dp);
        myfile<<"Case #"<<cs<<": ";
        myfile<<solve(1, 0, 0)<<" ";
        myfile<<solve(0, 1, 1)<<"\n";
        cs++;
    }
    return 0;
}

/*

5
0-0
1-0
2-0
3-0
4-3


*/

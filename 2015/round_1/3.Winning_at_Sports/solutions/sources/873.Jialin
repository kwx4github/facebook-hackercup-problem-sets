#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MOD = 1000000007;
int add(int a, int b) { return a >= MOD - b ? a - MOD + b : a + b; }
int sub(int a, int b) { return a < b ? a - b + MOD : a - b; }
int mul(int a, int b) { return a ? (b < MOD / a ? a * b : (long long)a * b % MOD) : 0; }

const int MAXN = 4096;

int C[MAXN][MAXN];

void init() {
  FOR(i, 0, MAXN) {
    C[i][0] = C[i][i] = 1;
    FOR(j, 1, i) {
      C[i][j] = add(C[i - 1][j - 1], C[i - 1][j]);
    }
  }
}

int a, b;

int calcFree() {
  return b ? sub(C[a + b - 1][b], C[a + b - 1][b - 1]) : 1;
}

int calcFul() {
  return sub(C[b << 1][b], C[b << 1][b + 1]);
}

int main() {
  init();
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    scanf("%d-%d", &a, &b);
    printf("Case #%d: %d %d\n", taskIdx, calcFree(), calcFul());
  }
  return 0;
}

import sys, traceback, time

global MOD, BMAX
MOD = 1000000007
BMAX = 2000

def getStressfulMap():
    global MOD, BMAX
    
    # initialize map
    map = []
    for i in range(BMAX+1):
        map.append([0]*(2*BMAX))
    
    map[1][1] = 1
    map[2][2] = 1
    map[2][3] = 1
    for n in range(3, BMAX+1):
        map[n][n] = 1
        for p in range(n+1, 2*n):
            map[n][p] = (map[n][p-1] + map[n-1][p-1]) % MOD
    return map

def printMap(map):
    for row in map: print row

def getStressfreeWays(A, B):
    global MOD
    
    # initialize map
    map = []
    for i in range(B+1):
        map.append([0]*(A+B+1))
    
    for p in range(1,A+B-1):
        map[1][p] = 1
    
    sumRow = A+B-2
    for n in range(2,B+1):
        sumRow = sumRow - map[n-1][1]
        map[n][1] = sumRow
        for p in range(2,A+B-2*n+1):
            map[n][p] = (map[n][p-1] - map[n-1][p]) % MOD
            sumRow = (sumRow + map[n][p]) % MOD
    
    # printMap(map)
    return sumRow % MOD

def main():
    global MOD
    
    # ##################### take the input #####################
    # file name parameters
    fin = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\C.in'
    fout = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\C.out'
    
    # read the input file
    f = open(fin, 'r')
    s = f.read()
    f.close()
    lines = s.split('\n')
    
    # #################### parse the input and process the input #######################
    
    # preprocessing
    sfulmap = getStressfulMap()
    
    answers = []
    T = eval(lines.pop(0))
    for i in range(T):
        t1 = time.clock()
        print i+1,
        
        A, B = [eval(p) for p in lines.pop(0).split('-')]
        if B > 0:
            answer = [getStressfreeWays(A,B), sum(sfulmap[B]) % MOD]
        else:
            answer = [1, 1]
        
        answers.append(str(answer[0]) + " " + str(answer[1]))
        
        t2 = time.clock()
        print "in " + str(round((t2-t1)*1000)/1000.) + "s"
    
    # #################### write the output ####################
    s = []
    for j in range(1, T+1):
        strAns = "Case #" + str(j) + ": " + str(answers[j-1])
        s.append(strAns)
    
    s = "\n".join(s)
    f = open(fout, 'w')
    f.write(s)
    f.close()

try:
    main()
    print "Finish"
    raw_input()
except:
    traceback.print_exc()
    raw_input()

#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cstring>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <stack>
#include <cstdlib>
#include <iomanip>
#include <string>
#include <deque>
#include <bitset>

#define vrep(i,n) for(LL i=n-1;i>=0;i--)
#define rep(i,n) for(LL i=0;i<n;i++)
#define rrep(i,a,b) for(LL i=a;i<b;i++)
#define vrrep(i,a,b) for(LL i=a;i>=b;i--)
#define mzero(mem) memset((mem),0,sizeof(mem))
#define mset(mem,v) memset((mem),v,sizeof(mem)) 
#define all(v) (v).begin(),(v).end()
#define LL  long long
#define pii pair<int,int>

using namespace std;
typedef vector<int> vi;

/*
LL main()
{
#ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
#endif
	LL n;
	cin>>n;

	LL t[500];
	rep(i,n)
		cin>>t[i];

	LL out[500];
	out[0]=t[0];

	for(LL i=1;i<n;i++)
		out[i] = t[i]-t[i-1];

	rep(i,n)
		cout<<out[i]<<endl;
}*/

LL M,N;
LL mod = 1000000007;
LL sdp[2000][2000];
LL nsdp[2000][2000];

LL S_stress(LL m,LL n)
{
	if(n==N)
	{
		//cout<<"finish\n\n";
		return 1;
	}
	if(sdp[m][n]!=-1)
		return sdp[m][n];

	LL ret=0;
	if(m<n)
	{
		//cout<<"m scored\n";
		ret +=(S_stress(m+1,n))%mod;
	}

	//cout<<"n scored\n";
	ret += (S_stress(m,n+1))%mod;

	sdp[m][n] = ret;
	return ret;
}

LL S_nstress(LL m,LL n)
{
	if(n==N || m==M){
		//cout<<"finish\n\n";
		return 1;
	}

	if(nsdp[m][n]!=-1)
		return nsdp[m][n];

	LL ret=0;
	if(m>n+1)
	{
		//cout<<"n scored 1\n";
		ret += (S_nstress(m,n+1))%mod;
	}

	//cout<<"m scored 1\n";
	ret += (S_nstress(m+1,n))%mod;
	nsdp[m][n] = ret;
	return ret;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
#endif

	LL T;
	cin>>T;
	string s[100000];
	rep(t,T)
	{
		cout<<"Case #"<<t+1<<": ";
		char dum;
		cin>>M>>dum>>N;
		mset(sdp,-1);
		mset(nsdp,-1);
		cout<<S_nstress(1,0)<<" "<<S_stress(0,0)<<endl;
	}
}
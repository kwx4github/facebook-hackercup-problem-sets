import scala.collection._

object C extends App {

  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  val MOD = 1000000007L

  def solve(test: Int): Unit = {

    val memo1 = mutable.HashMap[Int, Long]()

    def stressFree(a: Int, b: Int): Long = {
      if (b <= 0) 1L
      else if (a <= b) 0L
      else {
        val key = 10000 * a + b
        memo1.get(key) match {
          case Some(x) => x
          case None =>
            val x = (stressFree(a - 1, b) + stressFree(a, b - 1)) % MOD
            memo1(key) = x
            x
        }
      }
    }

    val memo2 = mutable.HashMap.empty[Int, Long]

    def stressFull(a: Int, b: Int): Long = {
      if (a <= 0 && b > 0) 1L
      else if (b == 0 || a > b) 0L
      else {
        val key = 10000 * a + b
        memo2.get(key) match {
          case Some(x) => x
          case None =>
            val x = (stressFull(a - 1, b) + stressFull(a, b - 1)) % MOD
            memo2(key) = x
            x
        }
      }
    }

    val Array(a, b) = readLine.split("-").map(_.toInt)
    val free = stressFree(a, b)
    val full = stressFull(b, b)

    println(s"Case #$test: $free $full")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/C/C.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/C/C.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

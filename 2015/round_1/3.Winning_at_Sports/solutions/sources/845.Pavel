#pragma comment(linker, "/STACK:128777216")

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <functional>
#include <numeric>
#include <sstream>
#include <exception>
#include <cassert>

typedef long long i64;
typedef unsigned int u32;
using namespace std;

typedef vector<int> VI;

#define all(a) a.begin(),a.end()

template<class T>
int size(const T &a) {
    return int(a.size());
}

template<class T>
T abs(const T &a) {
    return (a < 0 ? -a : a);
}

template<class T>
T sqr(const T &a) {
    return a * a;
}

const double pi = acos(-1.0);

int mod = int(1e9 + 7.1);

inline int msum(int a, int b) {
    return (a + b < mod ? a + b : a + b - mod);
}

inline int mdiff(int a, int b) {
    return (a < b ? a - b + mod : a - b);
}

inline void madd(int &a, int b) {
    a = msum(a, b);
}

inline void msub(int &a, int b) {
    a = mdiff(a, b);
}

inline i64 mmul(int a, int b) {
    return i64(a) * b % mod;
}

const int max_n = (1 << 11);

int dp1[max_n][max_n];
int dp2[max_n][max_n];

int main() {
#ifdef pperm
    freopen("input.txt", "r", stdin);
    //freopen("input.txt", "w", stdout);
    freopen("output.txt", "w", stdout);
#endif
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    dp1[0][0] = 1;
    for (int i = 1; i < (max_n); ++i) {
        dp1[i][0] = 1;
        for (int j = 1; j < i; ++j) {
            dp1[i][j] = msum(dp1[i - 1][j], dp1[i][j - 1]);
        }
    }
    dp2[0][0] = 1;
    for (int i = 1; i < (max_n); ++i) {
        dp2[i][0] = 1;
        for (int j = 1; j <= i; ++j) {
            dp2[i][j] = msum(dp2[i - 1][j], dp2[i][j - 1]);
        }
    }

    int T = 1;
    cin >> T;
    for (int iTest = 1; iTest <= T; ++iTest) {
        int a, b;
        string s;
        cin >> s;
        s[s.find('-')] = ' ';
        stringstream(s) >> a >> b;
        cout << "Case #" << iTest << ": " << dp1[a][b] << " " << dp2[b][b] << endl;
    }

#ifdef pperm
    flush(cout);
    cerr << endl << "Time: " << (clock() / double(CLOCKS_PER_SEC)) << endl;
#endif
    return 0;
}

#include <cassert>
#include <complex>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <numeric>
#include <sstream>
#include <utility>

#include <algorithm>
#include <bitset>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

#include <memory.h>
using namespace std;

#define Pi 3.141592653589793
#define all(c) (c).begin(), (c).end()
typedef long long ll;

int ri() {
  static int res;
  scanf("%d", &res);
  return res;
}

template <typename T>
int numbits(T n) {
  return n ? 1 + numbits(n & (n - 1)) : 0;
}

class timer {
public:
  timer() : t_(clock()) {}
  void restart() { t_ = clock(); }
  float elapsed() { return float(clock() - t_) / CLOCKS_PER_SEC; }
private:
  clock_t t_;
};

void run();

int main() {
#ifdef LOCAL_HOST
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
  timer t;
#endif
  run();
#ifdef LOCAL_HOST
  //printf("\nElapsed time: %.9f\n", t.elapsed());
#endif
  return 0;
}

int MD = 1000000007;

int arr[2048][2048];

int evalfree(int w, int l) {
  memset(arr, 0, sizeof(arr));
  arr[1][0] = 1;
  for (int i = 0; i <= w; ++i) {
    for (int j = 0; j <= l; ++j) {
      if (i <= j) {
        continue;
      }
      arr[i][j] %= MD;
      arr[i + 1][j] += arr[i][j];
      if (i > j + 1) {
        arr[i][j + 1] += arr[i][j];
      }
    }
  }
  return arr[w][l];
}

int evalfull(int w, int l) {
  memset(arr, 0, sizeof(arr));
  arr[0][0] = 1;
  for (int i = 0; i <= w; ++i) {
    for (int j = 0; j <= l; ++j) {
      if (i > j && j != l) {
        continue;
      }
      arr[i][j] %= MD;
      arr[i][j + 1] += arr[i][j];
      if (i + 1 <= j || j == l) {
        arr[i + 1][j] += arr[i][j];
      }
    }
  }
  return arr[w][l];
}

void run() {
  int nn; cin >> nn;
  for (int cs = 0; cs < nn; ++cs) {
    memset(arr, 0, sizeof(arr));
    string s; cin >> s;
    int idx = s.find("-");
    int w = atoi(s.substr(0, idx).c_str());
    int l = atoi(s.substr(idx + 1).c_str());
    printf("Case #%d: %d %d\n", cs + 1, evalfree(w, l), evalfull(w, l));
  }
}

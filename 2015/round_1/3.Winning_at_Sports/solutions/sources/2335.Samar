
//This  code is created by Samar Singh Holkar
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include<list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define sd(x) scanf("%d",&x)
#define sfd(x) scanf("%d",&x)
#define sfld(x) scanf("%lld",&x
#define pf printf

#define LL long long
#define ll long long
#define LD long double
#define ld long double
#define PB push_back
#define pb push_back
#define MP make_pair
#define mp make_pair
#define F first
#define S second

#define pii pair<int,int>
#define vi vector<int>
#define fr(i,n) for( int i=0; i<=n; i++)
#define frm(i,m,n) for(int i=m; i<=n; i++)
#define N 200000


ll M = 1000000007;

ll fast_pow(ll base, ll n,ll M)
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    ll halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}



ll findMMI_fermat(ll n,ll M)
{
    return fast_pow(n,M-2,M);
}

ll factorial(ll n,ll M){

    ll pro=1,a=1;

    while(a<=n){

        pro = (pro*a)%M;
        a++;
    }

    return pro;


}


int main(){

    //cout<<factorial(4,M);

    int t,p=1; cin>>t;

    while(p<=t){

        char c;
        ll a,b;

        cin>>a>>c>>b; //cout<<a<<" "<<b;

        ll numt = factorial(a+b,M); //cout<<numt<<" ";

        ll dent = (factorial(a,M)*factorial(b,M))%M;

        ll inv_dent = findMMI_fermat(dent,M);

        ll fac = (inv_dent*numt)%M;

        ll diff = a-b;

        ll sum = a+b;

        ll sum_inv = findMMI_fermat(sum,M);

        ll pro = (sum_inv*diff)%M;

        ll ans1 = (pro*fac)%M;

        ll num2 = factorial(2*b,M);

        ll den2 = factorial(b,M);

        ll den = (den2*den2)%M;

        ll inv_den = findMMI_fermat(den,M);

        ll fac2 = (num2*inv_den)%M;

        ll inv_sum2 = findMMI_fermat(b+1,M);

        ll ans2 = (inv_sum2*fac2)%M;

        cout<<"Case #"<<p<<": "<<ans1<<" "<<ans2<<"\n";
        p++;
    }
}

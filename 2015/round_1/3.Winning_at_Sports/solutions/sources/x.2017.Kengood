#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <complex>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <ctime>

#include<unordered_map>
#include<unordered_set>
using namespace std;

#define MOD  1000000007

int a,b;

long long dp[2048][2048];
long long findFree()
{
	int total = a+b;
	memset(dp, 0 , sizeof(dp));
	dp[1][0] = 1;
	for (int stage = 1; stage <= total; ++stage)
	{
		for(int curB = 0; curB <=stage; ++curB)
		{
			int curA = stage - curB;
			if (curA > a )
				continue;
			if (curA<=curB)
				break;
			if (curA-1 > curB)
			{
				dp[curA][curB] += dp[curA-1][curB];
				dp[curA][curB]%=MOD;
			}
			if (curB)
			{
				dp[curA][curB] += dp[curA][curB-1];
				dp[curA][curB]%=MOD;
			}
		}
	}
	return dp[a][b];
}

long long findFuck()
{
	int total = a+b;
	memset(dp, 0 , sizeof(dp));
	dp[0][0] = 1;
	long long ans = 0;
	for (int stage = 1; stage <= total; ++stage)
	{
		for(int curA = 0; curA <=stage; ++curA)
		{
			int curB = stage - curA;
			if (curA > curB)
				break;

			if (curB > b )
				continue;
			
			if (curA <= curB-1)
			{
				dp[curA][curB] += dp[curA][curB-1];
				dp[curA][curB]%=MOD;
			}
			if (curA)
			{
				dp[curA][curB] += dp[curA-1][curB];
				dp[curA][curB]%=MOD;
			}

			if (curB == b)
			{
				ans += dp[curA][curB];
				dp[curA][curB] = 0;
				ans%=MOD;
			}

		}
	}
	return ans;
}

int main()
{	
	int Case, cases = 0;
	scanf("%d" , &Case);

	while (Case--)
	{
		long long freee = 0, fuck = 0;
		
		scanf("%d-%d" , &a,&b);
		freee = findFree();
		fuck = findFuck();

		printf("Case #%d: %lld %lld\n" , ++cases, freee, fuck);
	}

	return 0;
}
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,arr) for (__typeof((arr).begin()) it=(arr).begin(); it!=(arr).end(); it++)

const int mod  = 1000000007;
const int maxn = 2005;

int A, B;

int dp1[maxn][maxn];
int sfree(int a, int b) {
	if ( a == A && b == B ) return 1;
	if ( a  > A || b  > B ) return 0;
	if ( dp1[a][b] != -1 ) return dp1[a][b];
	int &ret = dp1[a][b] = 0;
	if ( a + 1 <= A )
		ret = (ret + sfree(a+1,b)) % mod;
	if ( b + 1 <= B && b + 1 < a )
		ret = (ret + sfree(a,b+1)) % mod;
	return ret;
}

int dp2[maxn][maxn];
int sfull(int a, int b) {
	if ( a == A && b == B ) return 1;
	if ( a  > A || b  > B ) return 0;
	if ( dp2[a][b] != -1 ) return dp2[a][b];
	int &ret = dp2[a][b] = 0;
	if ( a + 1 <= A && (b == B || a + 1 <= b) )
		ret = (ret + sfull(a+1,b)) % mod;
	if ( b + 1 <= B )
		ret = (ret + sfull(a,b+1)) % mod;
	return ret;
}

int main()
{
	int T;
	scanf( "%d", &T );

	FOR(tc,1,T) {
		scanf( "%d-%d", &A, &B );
		memset(dp1,-1,sizeof(dp1));
		memset(dp2,-1,sizeof(dp2));
		printf( "Case #%d: %d %d\n", tc, sfree(1,0), sfull(0,1) );
	}

	return 0;
}

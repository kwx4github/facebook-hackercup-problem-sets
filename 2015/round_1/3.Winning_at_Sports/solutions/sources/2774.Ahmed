#include<bits/stdc++.h>

using namespace std;

#define pb push_back
#define mem(a, b) memset(a, b, sizeof(a))
#define mp make_pair

#define MOD 1000000007

const int oo = (int)1e9;
const double PI = 2 * acos(0.0);
const double eps = 1e-9;

int a,b;
long long dp[2005][2005];

long long solve(int p1, int p2, bool flag) //flag is 0 for stressfree and 1 for stressful
{
	if(p1==a && p2 == b) return 1;
	if(p1 > a || p2 > b) return 0;
	if(dp[p1][p2] != -1) return dp[p1][p2];
	long long ret = 0;
	if(!flag) //cannot equalize
	{
		if(p1-p2>1)
		{
			ret += solve(p1,p2+1,0);
			ret %= MOD;
		}
		ret += solve(p1+1,p2,0);
		ret %= MOD;
	}
	else //stressful
	{
		if(p2 == b || p2 > p1)
		{
			ret += solve(p1+1,p2,1);
			ret %= MOD;
		}
		ret += solve(p1,p2+1,1);
		ret %= MOD;
	}
	return dp[p1][p2] = ret;
}

int main()
{
	freopen("winning_at_sports.txt","r",stdin);
	freopen("winning_at_sports.out","w",stdout);
	int t;
	cin >> t;
	for(int c=1;c<=t;c++)
	{
		string s;
		cin >> s;
		int pos = s.find('-');
		string x = s.substr(0,pos);
		string y = s.substr(pos+1,100);
		a = atoi(x.c_str());
		b = atoi(y.c_str());
		cout << "Case #" << c << ": ";
		mem(dp,-1);
		cout << solve(0,0,0) << " ";
		mem(dp,-1);
		cout << solve(0,0,1) << endl;
	}
	return 0;
}

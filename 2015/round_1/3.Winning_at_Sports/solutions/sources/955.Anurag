//Template

// By Anurag :P
//Includes
#include <bits/stdc++.h>

using namespace std;

//Shortforms
typedef long long ll;
typedef vector <int> vi;
typedef vector <long long> vl;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(s,n); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
long long int mod = 1000000007;
long long int MODULO = 1000000007;
long long int catalan[2005];
void generate_catalan_numbers() {
    catalan[1] = 1;
    for (int i = 2; i <= 2000; i++) {
        for (int j = 1; j <= i - 1; j++) {
            catalan[i] = (catalan[i] + (((catalan[j])%mod+mod) * (catalan[i - j]%mod+mod)) % MODULO) % MODULO;
        }
        catalan[i] = catalan[i] % mod;
    }
}

unsigned long int catalanDP(unsigned int n)
{
    // Table to store results of subproblems
    //unsigned long int catalan[n+1];
 
    // Initialize first two values in table
    catalan[0] = catalan[1] = 1;
 
    // Fill entries in catalan[] using recursive formula
    for (int i=2; i<=n; i++)
    {
        catalan[i] = 0;
        for (int j=0; j<i; j++)
            {
				catalan[i] += (catalan[j]%mod+mod) * (catalan[i-j-1]%mod+mod)%mod;
				catalan[i] = (catalan[i] + mod)%mod;
			}
    }
 
    // Return last entry
    return catalan[n];
}

long modPow(long a, long x, long p) {
    //calculates a^x mod p in logarithmic time.
    long res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return res;
}

long modInverse(long a, long p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}
long modBinomial(long n, long k, long p) {
// calculates C(n,k) mod p (assuming p is prime).

    long numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (int i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % p;
    }

    long denominator = 1; // k!
    for (int i=1; i<=k; i++) {
        denominator = (denominator * i) % p;
    }

    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,p) ) % p;
}
int main(){
	int t;
	cin>>t;
	int m = catalanDP(2000);
	//generate_catalan_numbers();
	for(int i=1;i<=t;i++){
		int a,b;
		scanf("%d-%d",&a,&b);
		
		
		
		long long int ans = modBinomial(a+b-1,a-1,mod) - modBinomial(a+b-1,a,mod) + mod;
		ans = ans%mod; 
		
		cout <<"Case #"<<i<<": "<<ans<<" "<<(catalan[b]+mod)%mod<<endl;
		
		
		
	}
	
	
	
	return 0;
}

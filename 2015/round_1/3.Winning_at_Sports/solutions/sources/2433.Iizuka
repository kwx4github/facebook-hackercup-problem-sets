#include <cstring>
#include <iostream>
#include <algorithm>
#include <string>
#include <cassert>
using namespace std;

const int MOD = 1000000007;

int dp[2001][2001];

int fn(int my, int op) {
  if(my <= op) return 0;
  if(op < 0) return 0;
  if(my == 1 && op == 0) return 1;
  assert(my >= 0 && op >= 0);
  int &res = dp[my][op];
  if(res != -1) return res;
  res = fn(my - 1, op) + fn(my, op - 1);
  return res %= MOD;
}

int solve(int my, int op) {
  memset(dp, -1, sizeof(dp));
  return fn(my, op);
}

int fn2(int my, int op, int fin) {
  if(my > op && op != fin) return 0;
  if(my > op && op == fin) return fn2(my - 1, op, fin);
  // my <= op
  if(my < 0 || op < 0) return 0;
  if(my == 0 && op == 0) return 1;
  int &res = dp[my][op];
  if(res != -1) return res;
  res = fn2(my - 1, op, fin) + fn2(my, op - 1, fin);
  return res %= MOD;
}

int solve2(int my, int op) {
  memset(dp, -1, sizeof(dp));
  return fn2(my, op, op);
}

int main() {
  int T; cin >> T;
  for(int t = 1; t <= T; ++t) {
    string L; cin >> L;
    int hyphen = L.find('-');
    int my = stoi(L.substr(0, hyphen));
    int op = stoi(L.substr(hyphen + 1));
    cout << "Case #" << t << ": " << solve(my, op) << ' ' << solve2(my, op) << endl;
  }
}

#include <cstdio>
#include <cstring>

using namespace std;

const int MAXN = 2000;
const int MODULO = 1000000007;

inline void addMod(int& current, int add) {
	current += add;
	if (current >= MODULO) {
		current -= MODULO;
	}
}

int sa, sb;
int dp[MAXN + 1][MAXN + 1];

int doStressFree() {
	memset(dp, 0, sizeof(dp));
	dp[1][0] = 1;
	for (int i = 1; i <= sa; i++) {
		for (int j = 0; j < i && j <= sb; j++) {
			if (i + 1 <= sa) {
				addMod(dp[i + 1][j], dp[i][j]);
			}
			if (j + 1 < i && j + 1 <= sb) {
				addMod(dp[i][j + 1], dp[i][j]);
			}
		}
	}
	return dp[sa][sb];
}

int doStressfull() {
	memset(dp, 0, sizeof(dp));
	dp[0][0] = 1;
	for (int i = 0; i <= sa; i++) {
		for (int j = 0; j <= sb; j++) {
			if (dp[i][j]) {
				if (j + 1 <= sb) {
					addMod(dp[i][j + 1], dp[i][j]);
				}
				if ((i + 1 <= sa) && (i + 1 <= j || j == sb)) {
					addMod(dp[i + 1][j], dp[i][j]);
				}
			}
		}
	}
	return dp[sa][sb];
}

int main() {
	int caseNum;
	scanf("%d", &caseNum);
	for (int caseIndex = 1; caseIndex <= caseNum; caseIndex++) {
		scanf("%d-%d", &sa, &sb);
		printf("Case #%d: %d %d\n", caseIndex, doStressFree(), doStressfull());
	}
	
	return 0;
}

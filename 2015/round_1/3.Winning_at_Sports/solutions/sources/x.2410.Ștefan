/*
 *  Facebook Hacker Cup 2015
 *  Round 1 - Winning at Sports
 */

#include <cstdio>
#include <vector>
#include <list>

#define INPUT	  "winning_at_sports.txt"
#define OUTPUT	"winning_at_sports.out"
// MODE 0 -> for submission, 1 -> for local 
#define MODE    1
#define MODULO  1000000007
#define MAXN    2001

// A[i][j] -> number of stress-free scores, with final result i-j
// A[i][j] = A[i - 1][j] + A[i][j - 1], and i-1 > j and i > j-1
// B[i][j] -> number of stressful scores, with final result i-j
// B[i][j] = B[i - 1][j] + B[i][j - 1], with i-1 <= j and i <= j-1
// B not needed actually, reuse A :)
long A[MAXN][MAXN]; // TODO: keep only last 2 lines
int Me, Him;

void ReadTestData()
{
  scanf("%d-%d\n", &Me, &Him);
}

void Solve()
{
  // compute the stress-free score
  memset(A, 0, sizeof(A));
  for (int i = 1; i <= Me; ++i)
  {
    A[i][0] = 1; // only one way to get i,0
  }
  for (int j = 1; j <= Him; ++j)
    for (int i = j + 1; i <= Me; ++i) // i > j
    {
      A[i][j] = A[i][j - 1];
      if (i - 1 > j)
      {
        A[i][j] += A[i - 1][j];
        A[i][j] %= MODULO;
      }
    };
  printf("%ld ", A[Me][Him]);

  // compute the stressful score

  // actually the variations can appear until the opponent reaches his score, 
  // without me leading (but equal score is allowed). So the final score before
  // I start scoring continuously should be Him-1, Him.
  // use the same recurrence as above, only allowing equal indices
  Me = Him - 1;
  if (Me < 0) // if we begin with Me,0
  {
    printf("0\n"); // no choice
  }
  else
  {
    memset(A, 0, sizeof(A));

    for (int i = 0; i <= Him; ++i)
    {
      A[0][i] = 1; // one way to get 0, i
    }
    for (int i = 1; i <= Me; ++i)
      for (int j = i; j <= Him; ++j) // i <= j
      {
        A[i][j] = A[i - 1][j];
        if (j - 1 >= i)
        {
          A[i][j] += A[i][j - 1];
          A[i][j] %= MODULO;
        }
      };
    printf("%ld\n", A[Me][Him]);
  }
}

void PreGen()
{
}

int main()
{
#if MODE
	freopen(INPUT, "r", stdin);
	freopen(OUTPUT, "w", stdout);
#endif

  PreGen();
  int nrTests;
  scanf("%d", &nrTests);

  for (int test = 1; test <= nrTests; ++test)
  {
	  ReadTestData();

    printf("Case #%d: ", test);
	  Solve();
  }

	return 0;
}

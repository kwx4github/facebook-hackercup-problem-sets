#include <cstdio>

#define MOD 1000000007

inline int min(int a, int b){
	return a<b?a:b;
}

unsigned long long ways[2001][2001];
unsigned long long get_stressful(int own_final, int opponent_final){
	for(int opponent = 0; opponent <= opponent_final; ++opponent){
		ways[0][opponent] = 1;
	}
	for(int own = 1; own <= own_final; ++own){
		for(int opponent = 0; opponent <= opponent_final; ++opponent){
			ways[own][opponent] = 0;
		}
	}
	for(int opponent = 1; opponent <= opponent_final; ++opponent){
		for(int own = 1; own < opponent; ++own){
			ways[own][opponent] = (ways[own-1][opponent] + ways[own][opponent-1])%MOD;
		}
		ways[opponent][opponent] = ways[opponent-1][opponent]%MOD;
	}
	for(int own = 1; own <= own_final; ++own){
		ways[own][opponent_final] = (ways[own-1][opponent_final] + ways[own][opponent_final-1])%MOD;
	}
	return ways[own_final][opponent_final];
}
unsigned long long get_stressfree(int own_final, int opponent_final){
	for(int own = 0; own <= own_final; ++own){
		ways[own][0] = 1;
	}
	for(int own = 0; own <= own_final; ++own){
		for(int opponent = 1; opponent <= opponent_final; ++opponent){
			ways[own][opponent] = 0;
		}
	}
	for(int own = 1; own <= own_final; ++own){
		for(int opponent = 1; opponent < min(own, opponent_final+1); ++opponent){
			ways[own][opponent] = (ways[own-1][opponent] + ways[own][opponent-1])%MOD;
		}
	}
	return ways[own_final][opponent_final];
}

int main(){
	int T;
	scanf("%d", &T);
	for(int curr_case = 1; curr_case <= T; ++curr_case){
		int A, B;
		scanf("%d-%d", &A, &B);
		printf("Case #%d: %llu %llu\n", curr_case, get_stressfree(A, B), get_stressful(A, B));
	}
	return 0;
}

#include <cstdio>
#include <cassert>

#include <vector>
#include <map>
#include <algorithm>
#include <iostream>

#define sz(c) ((int)(c).size())

using namespace std;
typedef pair<int, int> pii;

const int mod = (int)1e9 + 7;

map<pii, int> was;
int s_free(int a, int b) {
  if (a == 1 && b == 0) {
    return 1;
  }
  if (was.count({a, b})) {
    return was[{a, b}];
  }

  int ans = 0;
  if (a - 1 > b)
    ans += s_free(a - 1, b);
  if (a > b - 1 && b > 0)
    ans += s_free(a, b - 1);
  return was[{a, b}] = ans % mod;
}
map<pii, int> was2;
int s_free_2(int a, int b) {
  if (a == 0 && b == 0) {
    return 1;
  }
  if (was2.count({a, b})) {
    return was2[{a, b}];
  }

  int ans = 0;
  if (a - 1 >= b)
    ans += s_free_2(a - 1, b);
  if (a >= b - 1 && b > 0)
    ans += s_free_2(a, b - 1);
  return was2[{a, b}] = ans % mod;
}

void solve() {
  int a, b;
  scanf("%d-%d", &a, &b);
//  fprintf(stderr, ">> %d %d\n", a, b);

  printf("%d ", s_free(a, b));
  int ans = 0;
  if (b != 0) {
    for (int i = 0; i <= min(a, b - 1); i++) {
      ans += s_free_2(b - 1, i);
      if (ans >= mod) {
        ans -= mod;
      }
    }
  } else {
    ans = 1;
  }
  printf("%d\n", ans);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; t++) {
    printf("Case #%d: ", t + 1);
    solve();
  }
  return 0;
}

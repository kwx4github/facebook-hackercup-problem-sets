#pragma comment(linker, "/STACK:16777216")
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <cstdio>
#include <cmath>
#include <cctype>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <utility>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <ctime>
#include <stack>
#include <algorithm>
#include <numeric>
#include <complex>
#include <functional>
#include <list>
#include <iostream>
using namespace std;

#define C(_a, _v) memset(_a,_v,sizeof(_a))
#define ALL(_obj) (_obj).begin(),(_obj).end()
#define FORB(_i,_a,_b) for((_i)=(_a);(_i)<(_b);++(_i))
#define FORE(_i,_a,_b) for((_i)=(_a);(_i)<=(_b);++(_i))
#define FOR(_i,_n) FORB(_i,0,_n)
#define FORS(_i,_obj) FOR(_i,(_obj).size())
#define ADJ(_i,_v) for((_i)=kick[_v];(_i)>=0;(_i)=foll[_i])
#define X first
#define Y second
#define I64 "%lld"
#define pb push_back
#define ppb pop_back
#define mp make_pair

typedef long long i64;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef pair<i64, i64> pii64;
typedef vector<pii> vpii;

template<typename T>inline bool remin(T&c,const T&n){if(n<c){c=n;return 1;}return 0;}
template<typename T>inline bool remin2(T&c,const T&n){if(c<0||n<c){c=n;return 1;}return 0;}
template<typename T>inline bool remax(T&c,const T&n){if(c<n){c=n;return 1;}return 0;}
template<typename T>inline void addmod(T&c,const T&n,const T&m){c = (c + n) % m;}

int _in;int in(){scanf("%d",&_in);return _in;}

const double EPS = 1e-6;
const int INF = ~(1 << 31);
const i64 LINF = ~(1LL << 63);

#define sqr(x) (x)*(x)

// stuff cutline

//int d[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

int binpow (int a, int n) {
	int ans = 1;
	while (n) {
		if (n & 1)
			ans *= a;
		a *= a;
		n >>= 1;
	}
	return ans;
}

map<pair<i64, i64>, i64> res1, res2;
i64 mod = 1000000007;

i64 stressfree(i64 l, i64 r) {
	pair<i64, i64> plr = mp(l, r);
	if(res1[plr] != 0) return res1[plr];
	if(l == 1 && r == 0) {
		return 1ll;
	}
	i64 ans = 0;
	if(l - 1 > r) {
		ans = (ans + stressfree(l - 1, r)) % mod;
	}
	if(r > 0) {
		ans = (ans + stressfree(l, r - 1)) % mod;
	}
	res1[plr] = ans;
	return ans;
}

i64 stressful(i64 l, i64 r) {
	pair<i64, i64> plr = mp(l, r);
	if(res2[plr] != 0) return res2[plr];
	if(l == 0 && r == 1) {
		return 1ll;
	}
	i64 ans = 0;
	if(l > 0) {
		ans = (ans + stressful(l - 1, r)) % mod;
	}
	if(r - 1 >= l) {
		ans = (ans + stressful(l, r - 1)) % mod;
	}
	res2[plr] = ans;
	return ans;
}

int str_to_int(string s) {
	int ten = 1;
	int ans = 0;
	for (int i = s.size() - 1; i >= 0; i--) {
		ans += (s[i] - '0') * ten;
		ten *= 10;
	}
	return ans;
}

int main(){
#ifndef _DEBUG
    //freopen("cows.in", "r", stdin);
    //freopen("cows.out", "w", stdout);
#endif
	freopen("output.txt", "w", stdout);
	int t;
	scanf("%d\n", &t);
	for (int m = 1; m <= t; m++) {
		string s;
		getline(cin, s);
		int pos = s.find('-');
		int l = str_to_int(s.substr(0, pos)), r = str_to_int(s.substr(pos + 1));
		printf("Case #%d: %lld %lld\n", m, stressfree(l, r), stressful(l, r));
	}
	return 0;
} 
/* Shubhang Verma */

import java.io.*;
import java.math.*;
import java.util.*;
public class Main {

    public static void main(String[] args) 
    {	
        InputStream inputstream = System.in;
        OutputStream outputstream = System.out;
        InputReader in = new InputReader(inputstream);
        OutputWriter out = new OutputWriter(outputstream);
        mysolver mysol = new mysolver();
        mysol.solve(in, out);
        out.close();
    }

}

class mysolver {
	long mod = 1000000007;
	long dp[][];
	long dp2[][];
    void solve(InputReader in,OutputWriter out)
    {
    	PrintWriter pout = new PrintWriter(new BufferedOutputStream(System.out));	
    	dp = new long[2010][2010];
    	dp2 = new long[2010][2010];
    	int t = in.readInt();
        for(int I = 1 ; I <= t ; I++)
        {
            String str = in.readString();
            //System.out.println(str);
            String s1[] = str.split("-");
            long n = Integer.parseInt(s1[0]);
            long m = Integer.parseInt(s1[1]);;
            
            for(int i = 0;i<2010;i++)
            {
            	Arrays.fill(dp[i], 0);
            	Arrays.fill(dp2[i],0);
            }
            for(int i=1 ;i<= n ; i++)
                dp[i][0] =1 ;
            
            for(int i = 1 ; i<= n ; i++)
            {
                for(int j=1 ; j<= m ; j++)
                {
                    if(i>j)
                    {
                        dp[i][j] = (dp[i-1][j] + dp[i][j-1])%mod;
                    }
                }
            }
            
            dp2[0][0] = 1;
            for(int i=1 ;i<= n ; i++)
                dp2[i][0] =1 ;
            for(int i = 1 ; i<= 2009 ; i++)
            {
                for(int j=1 ; j<= 2009 ; j++)
                {
                    if(i>=j)
                    {
                        dp2[i][j] = (dp2[i-1][j] + dp2[i][j-1])%mod;
                    }
                }
            }
            if(m != 0)
            	pout.println("Case #"+I+": "+dp[(int)n][(int)m]+" "+dp2[(int)m][(int)m-1]);
            else
            	pout.println("Case #"+I+": "+dp[(int)n][(int)m]);
        }
        pout.close();
   
    }
     
}
class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;
 
    public InputReader(InputStream stream) {
        this.stream = stream;
    }
    
    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }
 
    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
 
    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return isWhitespace(c);
    }
 
    public static boolean isWhitespace(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
 
    public String next() {
        return readString();
    }
 
    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }
}
 
class OutputWriter {
    private final PrintWriter writer;
 
    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }
 
    public OutputWriter(Writer writer) {
        this.writer = new PrintWriter(writer);
    }
 
    public void close() {
        writer.close();
    }
 
    public void printLine(int i) {
        writer.println(i);
    }
}
 
class IOUtils {
 
    public static void readIntArrays(InputReader in, int[]... arrays) {
        for (int i = 0; i < arrays[0].length; i++) {
            for (int j = 0; j < arrays.length; j++)
                arrays[j][i] = in.readInt();
        }
    }
 
    }

package problems;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class WinningAtSports {
	
	public static void main(String[] args) throws FileNotFoundException {
		WinningAtSports main = new WinningAtSports();
		main.meat();
	}
	
	Set<Long> primeSet = new TreeSet<Long>();
	private long t;
	private static final long mod = 1000000007;
	
	private void meat() throws FileNotFoundException {
		FileInputStream fis = new FileInputStream("winningatsports_in.txt");
		PrintWriter writer = new PrintWriter("winningatsports_out.txt");
		
		long[][] free = new long[2001][2001];
		for (int i=0; i<=2000; i++) {
			for (int j=0; j<=2000; j++) {
				free[i][j] = 0;
			}
		}
		for (int i=0; i<=2000; i++) {
			free[i][0] = 1;
		}
		for (int i=0; i<=2000; i++) {
			for (int j=0; j<=2000; j++) {
				if (i>j && free[i][j]==0) {
					long count = 0;
					if (i-1>j) {
						count += free[i-1][j];
					}
					count += free[i][j-1];
					count %= mod;
					free[i][j] = count;
				}
			}
		}
		
		long[][] ful = new long[2001][2001];
		for (int i=0; i<=2000; i++) {
			for (int j=0; j<=2000; j++) {
				ful[i][j] = 0;
			}
		}
		for (int i=0; i<=2000; i++) {
			ful[0][i] = 1;
		}
		for (int i=0; i<=2000; i++) {
			for (int j=0; j<=2000; j++) {
				if (j>=i && ful[i][j]==0) {
					long count = 0;
					if (j-1>=i) {
						count += ful[i][j-1];
					}
					count += ful[i-1][j];
					count %= mod;
					ful[i][j] = count;
				}
			}
		}		
		
		Scanner sc = new Scanner(fis);
		t = sc.nextLong();
		
		for (long i=0; i<t; i++) {
			long sFree = 0;
			long sFul = 0;
			String s = sc.next();
			String[] temp = s.split("-");
			int myScore = Integer.parseInt(temp[0]);
			int otherScore = Integer.parseInt(temp[1]);
			System.out.println("my="+myScore+", other="+otherScore);
			sFree = free[myScore][otherScore];
			sFul = ful[otherScore][otherScore];
			
			writer.println("Case #"+(i+1)+": "+sFree+" "+sFul);
		}
		sc.close();
		writer.close();
	}
	
	private boolean isPrime(long k) {
		boolean p = true;
		for (Long l : primeSet) {
			if (k%l==0) {
				p = false;
				break;
			}				
		}
		return p;
	}
}

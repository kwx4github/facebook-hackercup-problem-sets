#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> Pii;
typedef pair<ll, ll> Pll;

#define FOR(i,n) for(int i = 0; i < (n); i++)
#define sz(c) ((int)(c).size())
#define ten(x) ((int)1e##x)
#define tenll(x) ((ll)1e##x)
template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }
template<class T> void chmax(T& a, T b) { a = max(a, b); }
template<class T> void chmin(T& a, T b) { a = min(a, b); }

int MOD = ten(9) + 7;

const int N = ten(5);
ll inverse[N];
void init_inverse(){
	/*
	M%i = M - (M/i) * i
	(M%i)*i^-1 = M*i^-1 - M/i (mod M)
	(M%i)*i^-1 = M-M/i(mod M)
	i^-1 = (M-M/i) * (M%i)^-1
	*/
	inverse[1] = 1;
	for (int i = 2; i < N; i++) inverse[i] = (MOD - MOD / i) * inverse[MOD%i] % MOD;
}
ll fact[N], infact[N];
void init_fast_fact() {
	init_inverse();
	fact[0] = fact[1] = 1;
	for (int i = 2; i < N; i++) fact[i] = fact[i - 1] * i % MOD;
	infact[0] = infact[1] = 1;
	for (int i = 2; i < N; i++) infact[i] = infact[i - 1] * inverse[i] % MOD;
}
ll fast_nCk(int n, int k) {
	if (n < 0 || k < 0) return 0;
	if (k > n) return 0;
	ll ret = fact[n] * infact[k] % MOD * infact[n - k] % MOD;
	return ret;
}

ll solve(int a, int b, int c){
	if (c == a - 1) b--, c--;
	if (c == b - 1) a--, c--;
	ll ret = fast_nCk(a + b - 2, a - 1) - fast_nCk(a + b - 2, c - 1);
	if (ret < 0) ret += MOD;
	return ret;
}

Pll core(int n, int m){
	if (n <= m) return Pll(0, 0);
	if (n == 1) return Pll(1, 0);
	if (n == 2) {
		if (m == 0) return Pll(1, 0);
		else return Pll(1, 1);
	}

	ll first = solve(n, m + 1, m);
	ll second = solve(m + 1, m + 1, m);
	return Pll(first, second);
}

void solve(){
	int my, opp; scanf("%d-%d", &my, &opp);
	auto ans = core(my, opp);
	cout << ans.first << " " << ans.second << endl;
}

int main(){
	init_fast_fact();
	int t; cin >> t;
	FOR(i,t){
		printf("Case #%d: ", i + 1);
		solve();
	}
}
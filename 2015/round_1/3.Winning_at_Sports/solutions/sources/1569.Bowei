#include <algorithm>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <sstream>
#include <stack>
#include <string>
#include <set>
#include <utility>
#include <vector>

using namespace std;

template <typename T> inline T MIN(T a, T b) { return a < b ? a : b; }
template <typename T> inline T MAX(T a, T b) { return a < b ? b : a; }
template <typename T> inline T ABS(T a)      { return a < 0 ? -a : a;}

typedef long long int64;

const int MOD = 1000000007;

int64 dp1[2003][2003], dp2[2003][2003];
int A, B;

int64 calc1(int a, int b) {
  //printf("%d %d", a, b);
  if (a < 0 || b < 0) return 0;
  if (dp1[a][b] == -1) {
    if (a <= b) {
      dp1[a][b] = 0;
    } else {
      dp1[a][b] = calc1(a - 1, b) % MOD + calc1(a, b - 1) % MOD;
    }
  }
  return dp1[a][b] % MOD;
}

int64 calc2(int a, int b) {
  //printf("%d %d", a, b);
  if (a < 0 || b < 0) return 0;
  if (dp2[a][b] == -1) {
    if (a > b && b != B) {
      dp2[a][b] = 0;
    } else {
      dp2[a][b] = calc2(a - 1, b) % MOD + calc2(a, b - 1) % MOD ;
    }
  }
  return dp2[a][b] % MOD;
}

int main() {
  int T;
  char in[1 << 7];
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    scanf("%s", in);
    int len = strlen(in), pivot, acc = 0;
    for (int i = 0; i < len; ++i) {
      if (in[i] == '-') {
        pivot = i;
        A = acc;
        acc = 0;
      } else {
        acc = acc * 10 + (in[i] - '0');
      }
    }
    B = acc;
    memset(dp1, -1, sizeof dp1);
    memset(dp2, -1, sizeof dp2);
    dp1[0][0] = dp2[0][0] = 1;
    printf("Case #%d: %lld %lld\n", t, calc1(A, B) % MOD, calc2(A, B) % MOD);
  }
  return 0;
}

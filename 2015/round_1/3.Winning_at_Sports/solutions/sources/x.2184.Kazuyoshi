import static java.lang.Integer.parseInt;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.StringTokenizer;


public class WinSport {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static final int MAX=2001;
	static final int MOD=1000000007;
	static int test;
	static int[][] sFree = new int[MAX][MAX];
	static int[][] sFul = new int[MAX][MAX];

	private class State{
		int win;
		int lose;
		State(){};
		State(int w, int l){
			this.win=w;
			this.lose=l;
		}
	}

	static int computeFree(int win, int lose) {
		int ans=0;
		for(int w=0; w<=win; w++){
			for(int l=0; l<=lose; l++){
				sFree[w][l]=0;
			}
		}
		sFree[1][0]=1;
		for(int w=1; w<=win; w++){
			for(int l=0; l<=lose; l++){
				//sFree[w][l] = sFree[w-1][l] + sFree[w][l-1];
				if(w>l && l>0){
					sFree[w][l] += sFree[w][l-1];
					sFree[w][l] %= MOD;
				}
				if(w-1>l){
						sFree[w][l] += sFree[w-1][l];
						sFree[w][l] %= MOD;
				}
			}
		}
		ans = sFree[win][lose];
		return ans;
	}
	
	static int computeFul(int win, int lose){
		for(int w=0; w<=win; w++){
			for(int l=0; l<=lose; l++){
				sFul[w][l]=0;
			}
		}
		sFul[0][1]=1;
		for(int w=0; w<=win; w++){
			for(int l=1; l<=lose; l++){
				//sFul[w][l] = sFul[w-1][l] + sFul[w][l-1];
				if(w<=l && w>0){
					sFul[w][l] += sFul[w-1][l];
					sFul[w][l] %= MOD;
				}					
				if(w<=l-1){
					sFul[w][l] += sFul[w][l-1];
					sFul[w][l] %= MOD;
				}
			}
		}
		return sFul[lose][lose];
	}

	static void printCase() {
		out.print("Case #" + test + ": ");
	}	

	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine(),"-");
		}
		return tok.nextToken();
	}

	public static void main(String[] args) throws IOException {
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		//sFree = new HashMap <State, Integer>();
		//sFul = new HashMap <State, Integer>();
		//precomp();

		int T = nextInt();
		for (test = 1; test <= T; test++) {
			solve();
		}
		in.close();
		out.close();
	}

	private static void solve() throws IOException {
		// TODO Auto-generated method stub
		int win = nextInt();
		int lose = nextInt();
		printCase();
		out.print(computeFree(win, lose)+" ");
		out.println(computeFul(win, lose));
	}

}

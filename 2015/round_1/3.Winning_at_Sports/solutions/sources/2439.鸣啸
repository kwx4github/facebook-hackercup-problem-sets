#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <cmath>
#include <stack>
#include <map>

#pragma comment(linker, "/STACK:1024000000");
#define EPS (1e-8)
#define LL long long
#define ULL unsigned long long
#define _LL __int64
#define INF 0x3f3f3f3f
#define Mod 1000000007

//** I/O Accelerator Interface .. **/
#define g (c=getchar())
#define d isdigit(g)
#define p x=x*10+c-'0'
#define n x=x*10+'0'-c
#define pp l/=10,p
#define nn l/=10,n
template<class T> inline T& RD(T &x)
{
    char c;
    while(!d);
    x=c-'0';
    while(d)p;
    return x;
}
template<class T> inline T& RDD(T &x)
{
    char c;
    while(g,c!='-'&&!isdigit(c));
    if (c=='-')
    {
        x='0'-g;
        while(d)n;
    }
    else
    {
        x=c-'0';
        while(d)p;
    }
    return x;
}
inline double& RF(double &x)      //scanf("%lf", &x);
{
    char c;
    while(g,c!='-'&&c!='.'&&!isdigit(c));
    if(c=='-')if(g=='.')
        {
            x=0;
            double l=1;
            while(d)nn;
            x*=l;
        }
        else
        {
            x='0'-c;
            while(d)n;
            if(c=='.')
            {
                double l=1;
                while(d)nn;
                x*=l;
            }
        }
    else if(c=='.')
    {
        x=0;
        double l=1;
        while(d)pp;
        x*=l;
    }
    else
    {
        x=c-'0';
        while(d)p;
        if(c=='.')
        {
            double l=1;
            while(d)pp;
            x*=l;
        }
    }
    return x;
}
#undef nn
#undef pp
#undef n
#undef p
#undef d
#undef g

using namespace std;

LL dp[2010][2010];

int main()
{
    freopen("winning_at_sports.txt","r",stdin);
    freopen("winning_at_sportsout.txt","w",stdout);
    int T,icase;
    int n,m,i,j;

    scanf("%d",&T);

    for(icase = 1;icase <= T; icase++)
    {
        scanf("%d%*c%d",&n,&m);


        memset(dp,0,sizeof(dp));

        dp[0][0] = 1;

        for(i = 1;i <= n; ++i)
        {
            dp[i][0] = 1;
            for(j = 1;j < i; ++j)
            {
                dp[i][j] = (dp[i-1][j] + dp[i][j-1])%Mod;
            }
        }

//        for(i = 0;i <= n; ++i)
//            for(j = 0;j <= m; ++j)
//                printf("%3I64d%c",dp[i][j], j==m?'\n':' ');
        LL win1 = dp[n][m];

        memset(dp,0,sizeof(dp));
        dp[0][0] = 1;

        for(i = 1;i <= m; ++i)
            dp[0][i] = 1;

        for(i = 1;i <= m; ++i)
        {
            for(j = i;j <= m; ++j)
            {
                dp[i][j] = (dp[i-1][j]+dp[i][j-1])%Mod;
            }
        }

        LL win2 = dp[m][m];

        printf("Case #%d: %I64d %I64d\n",icase,win1,win2);
    }

    return 0;
}

//struct N
//{
//    int next[26];
//}st[1000010];
//
//int Top;
//
//int creat()
//{
//    memset(st[Top].next,-1,sizeof(st[Top].next));
//    return Top++;
//}
//
//char s[1000010];
//
//int Insert(int root,char *s)
//{
//    int site = 0,anw = 1000001;
//
//    while(s[site] != '\0')
//    {
//        if(st[root].next[s[site]-'a'] == -1)
//        {
//            anw = min(anw,site);
//            st[root].next[s[site]-'a'] = creat();
//        }
//
//        root = st[root].next[s[site]-'a'];
//        site++;
//    }
//    return min(anw+1,site);
//}
//
//int main()
//{
//
//    freopen("Autocomplete.txt","r",stdin);
//    freopen("Autocompleteout.txt","w",stdout);
//    int T,icase;
//
//    int root;
//
//    int n,i,j;
//
//    LL ans;
//
//    scanf("%d",&T);
//
//    for(icase = 1;icase <= T; icase++)
//    {
//        Top = 0;
//        root = creat();
//        ans = 0;
//        scanf("%d",&n);
//
//        for(i = 1;i <= n; ++i)
//        {
//            scanf("%s",s);
//
//            ans += Insert(root,s);
//        }
//
//
//        printf("Case #%d: ",icase);
//        cout<<ans<<endl;
//    }
//
//
//    return 0;
//}
























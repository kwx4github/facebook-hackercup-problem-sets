import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.concurrent.*;

public class C {
    static BufferedReader br;
    static StringTokenizer in;
    static PrintWriter out;

    static public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens())
            in = new StringTokenizer(br.readLine(), "-");
        return in.nextToken();
    }

    static public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    static public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    int n, m;
    int mod = 1000000007;

    String solve() {
        int[][] free = new int[n + 1][m + 1];
        free[1][0] = 1;
        for (int f = 0; f <= n; f++) {
            for (int s = 0; s < Math.min(f, m + 1); s++) {
                if (f == 1 && s == 0)
                    continue;
                free[f][s] = ((s == 0 ? 0 : free[f][s - 1]) + (f == 0 ? 0 : free[f - 1][s])) % mod;
            }
        }

        int[][] full = new int[n + 1][m + 1];
        full[0][0] = 1;
        for (int f = 0; f <= n; f++) {
            for (int s = Math.min(f, m); s <= m; s++) {
                if (f == 0 && s == 0) {
                    continue;
                }
                full[f][s] = ((s == 0 ? 0 : full[f][s - 1]) + (f == 0 ? 0 : full[f - 1][s])) % mod;
            }
        }

        return free[n][m] + " " + full[n][m];
    }

    public C() throws IOException {
        n = nextInt();
        m = nextInt();
    }

    public static void main(String[] args) throws IOException, InterruptedException, ExecutionException {
        ExecutorService executor = Executors.newFixedThreadPool(4);
        Locale.setDefault(Locale.US);
        br = new BufferedReader(new FileReader("input.txt"));
        PrintWriter out = new PrintWriter("output.txt");
        int tests = nextInt();
        @SuppressWarnings("unchecked")
        Future<String>[] outputs = new Future[tests];
        for (int t = 0; t < tests; t++) {
            final C testCase = new C();
            outputs[t] = executor.submit(new Callable<String>() {
                @Override
                public String call() {
                    return testCase.solve();
                }
            });
        }
        for (int t = 0; t < tests; t++) {
            out.println("Case #" + (t + 1) + ": " + outputs[t].get());
        }
        out.close();
        executor.shutdown();
    }
}
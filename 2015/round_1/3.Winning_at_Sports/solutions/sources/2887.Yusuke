#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<map>
#include<vector>
#include<algorithm>
#include<string>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<ctime>

#define _GLIBCXX_DEBUG

#define ULL unsigned long long

using namespace std;

int T,A,B;


ULL free_dfs(int x, int y, vector<vector<ULL> >& memo){
    // printf("stepin:\t x=%d, y=%d\n", x, y);
    if( memo[x][y] > 0ULL ){
        return memo[x][y];
    }

    ULL ret=0ULL;
    if( y < x-1 ){
        // cout << "case1" << endl;
        ret += free_dfs(x, y+1, memo);
    }
    if( x < A ){
        // cout << "case2" << endl;
        ret += free_dfs(x+1, y, memo);
    }
    memo[x][y] = (ULL)(ret % 1000000007ULL);
    // printf("memo[%d][%d]:=%llu\n", x, y, ret);
    return memo[x][y];
}

ULL full_dfs(int x, int y, vector<vector<ULL> >& memo){
    // printf("stepin:\t x=%d, y=%d\n", x, y);
    if( memo[x][y] > 0ULL ){
        return memo[x][y];
    }

    ULL ret=0ULL;
    if( x < y ){
        // cout << "case1" << endl;
        ret += full_dfs(x+1, y, memo);
    }
    if( y < B ){
        // cout << "case2" << endl;
        ret += full_dfs(x, y+1, memo);
    }
    memo[x][y] = (ULL)(ret % 1000000007ULL);
    // printf("memo[%d][%d]:=%llu\n", x, y, ret);
    return memo[x][y];
}

int main(){
    cin >> T;
    for(int t=1; t<=T; t++){
        scanf("%d-%d", &A, &B);
        vector< vector<ULL> > free_memo(A+1, vector<ULL>(B+1, 0ULL));
        vector< vector<ULL> > full_memo(B+1, vector<ULL>(B+1, 0ULL));
        for(int i=0; i<=A; i++){
            free_memo[i][B] = 1ULL;
        }
        for(int i=0; i<=B; i++){
            free_memo[A][i] = 1ULL;
            full_memo[i][B] = 1ULL;
        }
        ULL free = free_dfs(0,0, free_memo);
        ULL full = full_dfs(0,0, full_memo);

        printf("Case #%d: %llu %llu\n", t, free, full);
        // printf("Case #%d: %llu %llu\n", t, (ULL)(free % 1000000007ULL), (ULL)(full % 1000000007ULL) );
    }
}

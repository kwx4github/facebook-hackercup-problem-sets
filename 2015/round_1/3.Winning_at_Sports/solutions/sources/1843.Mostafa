package com.meg7.training.facebook.hackerCup15.round1;

import java.util.HashMap;
import java.util.Scanner;

public class Problem_3 {

    private static HashMap<String, Integer> sScoreBranches;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numberOfTests = scanner.nextInt();
        scanner.nextLine();// Skip Line!

        String[] lineParts;
        for (int i = 0; i < numberOfTests; i++) {
            lineParts = scanner.nextLine().split("-");

            solveAndPrint(i + 1, Integer.parseInt(lineParts[0]), Integer.parseInt(lineParts[1]));
        }
    }

    private static void solveAndPrint(int caseNumber, int meScore, int opposingScore) {
        int stressFreeBranches = solveStressFree(meScore, opposingScore);
        int stressFullBranches = solveStressFull(meScore, opposingScore);

        System.out.println("Case #" + caseNumber + ": " + stressFreeBranches + " " + stressFullBranches);
    }

    private static int solveStressFree(int meScore, int opposingScore) {
        sScoreBranches = new HashMap<String, Integer>();
        return solveStressFree(meScore, opposingScore, 0, 0) + 1;
    }
    private static int solveStressFree(int meScore, int opposingScore, int currentMeScore, int currentOpposingScore) {
        if (currentMeScore == meScore && currentOpposingScore == opposingScore) {
            return 0;
        }

        Score currentScore = new Score(currentMeScore, currentOpposingScore);
        if (sScoreBranches.containsKey(currentScore.toString())) {
//            System.out.println(currentMeScore + "-" + currentOpposingScore + " :: " + sScoreBranches.get(currentScore.toString()));
            return sScoreBranches.get(currentScore.toString());
        }

        int totalBranches = 0;

        if (currentOpposingScore < opposingScore && currentOpposingScore + 1 < currentMeScore &&
                currentMeScore < meScore) {
            totalBranches = 1;
        }

        int currentBranches;
        if (currentOpposingScore < opposingScore && currentOpposingScore + 1 < currentMeScore) {
            currentBranches = solveStressFree(meScore, opposingScore, currentMeScore, currentOpposingScore + 1);

            currentScore = new Score(currentMeScore, currentOpposingScore + 1);
            sScoreBranches.put(currentScore.toString(), currentBranches);
            totalBranches += currentBranches % 1000000007;
        }

        if (currentMeScore < meScore) {
            currentBranches = solveStressFree(meScore, opposingScore, currentMeScore + 1, currentOpposingScore);

            currentScore = new Score(currentMeScore + 1, currentOpposingScore);
            sScoreBranches.put(currentScore.toString(), currentBranches);
            totalBranches += currentBranches % 1000000007;
        }

        return totalBranches;
    }

    private static int solveStressFull(int meScore, int opposingScore) {
        sScoreBranches = new HashMap<String, Integer>();
        return solveStressFull(meScore, opposingScore, 0, 0) + 1;
    }
    private static int solveStressFull(int meScore, int opposingScore, int currentMeScore, int currentOpposingScore) {
        if (currentMeScore == meScore && currentOpposingScore == opposingScore) {
            return 0;
        }

        Score currentScore = new Score(currentMeScore, currentOpposingScore);
        if (sScoreBranches.containsKey(currentScore.toString())) {
//            System.out.println(currentMeScore + "-" + currentOpposingScore + " :: " + sScoreBranches.get(currentScore.toString()));
            return sScoreBranches.get(currentScore.toString());
        }

        int totalBranches = 0;

        if ((currentMeScore < meScore && currentMeScore + 1 <= currentOpposingScore ||
                currentMeScore < meScore && currentOpposingScore == opposingScore) &&
                currentOpposingScore < opposingScore) {
            totalBranches = 1;
        }

        int currentBranches;
        if (currentMeScore < meScore && currentMeScore + 1 <= currentOpposingScore ||
                currentMeScore < meScore && currentOpposingScore == opposingScore) {
            currentBranches = solveStressFull(meScore, opposingScore, currentMeScore + 1, currentOpposingScore);

            currentScore = new Score(currentMeScore + 1, currentOpposingScore);
            sScoreBranches.put(currentScore.toString(), currentBranches);
            totalBranches += currentBranches % 1000000007;
        }

        if (currentOpposingScore < opposingScore) {
            currentBranches = solveStressFull(meScore, opposingScore, currentMeScore, currentOpposingScore + 1);

            currentScore = new Score(currentMeScore, currentOpposingScore + 1);
            sScoreBranches.put(currentScore.toString(), currentBranches);
            totalBranches += currentBranches % 1000000007;
        }

        return totalBranches;
    }

    private static class Score {

        public final int meScore;
        public final int opposingScore;

        public Score(int meScore, int opposingScore) {
            this.meScore = meScore;
            this.opposingScore = opposingScore;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof Score) {
                return meScore == ((Score) obj).meScore && opposingScore == ((Score) obj).opposingScore;
            }

            return super.equals(obj);
        }

        @Override
        public String toString() {
            return meScore + "-" + opposingScore;
        }
    }
}

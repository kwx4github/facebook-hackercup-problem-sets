#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <utility>

#define X first
#define Y second

using namespace std;

using i64 = long long;
using Pll = pair<i64, i64>;

constexpr int MAX = 2048;
constexpr int MOD = 1000000007;

i64 dp[MAX][MAX][2];

i64& add(i64& a, i64 b) {
	if ((a += b) >= MOD) a -= MOD;
	return a;
}

Pll solve(int n, int m) {
	memset(dp, 0, sizeof(dp));
	dp[0][0][0] = 1; dp[1][0][0] = 1; dp[0][0][1] = 1;
	for (int i = 0; i <= n; ++i) {
		for (int j = 0; j <= m; ++j) {
			if (!i && !j) continue;
			if (i > j) {
				if (i - 1 >= 0 && i - 1 > j) add(dp[i][j][0], dp[i - 1][j][0]);
				if (j - 1 >= 0 && i > j - 1) add(dp[i][j][0], dp[i][j - 1][0]);
			}
			if (i <= j) {
				if (i - 1 >= 0 && i - 1 <= j) add(dp[i][j][1], dp[i - 1][j][1]);
				if (j - 1 >= 0 && i <= j - 1) add(dp[i][j][1], dp[i][j - 1][1]);
			}
		}
	}
	return make_pair(dp[n][m][0], dp[m][m][1]);
}

int main() {
	int t, ct;
	scanf("%d", &t);
	for (ct = 1; ct <= t; ++ct) {
		int a, b;
		scanf("%d-%d", &a, &b);
		auto ans = solve(a, b);
		printf("Case #%d: %lld %lld\n", ct, ans.X, ans.Y);
	}
	return 0;
}

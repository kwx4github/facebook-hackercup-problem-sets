#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

const unsigned MOD = 1000 * 1000 * 1000 + 7;

int StringToInt(const string& str) {
	istringstream iss(str);
	int result;
	iss >> result;
	return result;
}

pair<int, int> ParseString(const string& str) {
	string::size_type sep = str.find('-');
	return make_pair(
		StringToInt(str.substr(0, sep)),
		StringToInt(str.substr(sep + 1)));
}

void SolveTestCase(int testCaseNo) {
	string s_inp;
	cin >> s_inp;
	pair<int, int> inp = ParseString(s_inp);
	vector< vector<unsigned> > ma(inp.first + 1, vector<unsigned>(inp.second + 1));
	ma[1][0] = ma[0][0] = 1;
	for (int i = 0; i <= inp.first; ++i) {
		for (int j = 0; j <= inp.second; ++j) {
			if (j == 0 && (i == 1 || i == 0))
				continue;
			if (i > j) {
				if (i - 1 > j) {
					ma[i][j] += ma[i-1][j];
				}
				if (j != 0) {
					ma[i][j] += ma[i][j-1];
				}
			} else {
				if (i != 0) {
					ma[i][j] += ma[i-1][j];
				}
				if (i <= j - 1) {
					ma[i][j] += ma[i][j-1];
				}
			}
			ma[i][j] %= MOD;
		}
	}
	cout << "Case #" << testCaseNo << ": " << ma[inp.first][inp.second] << " " << ma[inp.second][inp.second] << endl;
}

int main(void) {
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		SolveTestCase(t);
	}
	return 0;
}

__author__ = 'robertking'

from sys import setrecursionlimit
setrecursionlimit(5001)

from math import factorial
import functools

def memoize(func):
    cache = {}
    def memoized(key):
        # Returned, new, memoized version of decorated function
        if key not in cache:
            cache[key] = func(key)
        return cache[key]
    return functools.update_wrapper(memoized, func)


@memoize
def fact(n):
    return factorial(n)

def cat_direct(n):
    return fact(2*n) // fact(n + 1) // fact(n)

@memoize
def catR1(n):
    return ( 1 if n == 0
             else sum( catR1(i) * catR1(n - 1 - i)
                       for i in range(n) ) )

@memoize
def catR2(n):
    return ( 1 if n == 0
             else ( ( 4 * n - 2 ) * catR2( n - 1) ) // ( n + 1 ) )

filename = 'winning_at_sports.txt'
data = open(filename).read().splitlines()
data = iter(data)

cases = int(next(data))

MOD = 1000000007

#catalan = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324]
#print catalan
#print [catR2(i) for i in range(100)]
#print len(str(catR2(2000)))
c = [catR2(i) % MOD for i in range(2001)]

def solve(a, b, cache):
    if (a, b) in cache:
        return cache[(a, b)]
    if a == b:
        return 0
    if b == 0:
        return 1
    assert a > b
    if b + 1 == a:
        return c[b]
    cache[(a,b)] = ans = (solve(a - 1, b, cache) + solve(a, b - 1, cache)) % MOD
    return ans

cache = {}
for case in range(1, cases + 1):
    a, b = map(int, next(data).split('-'))
    stressfree = solve(a, b, cache) % MOD
    stressfull = c[b] % MOD
    print 'Case #%d: %d %d' % (case, stressfree, stressfull)
#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<string>
#include<sstream>
#include<deque>
#include<math.h>
#include<cstring>
#include <bitset>
#include<algorithm>
#include<stdio.h>
#include<stdlib.h>

#define all(v) v.begin(),v.end()
#define mpair make_pair

using namespace std;
typedef long double ld;
const ld epsilon = 1e-9;
typedef long long ll;

int dp[1 << 12][1 << 12];
const int MOD = 1000000007;
const int SHIFT = 1 << 11;

int calculateStressFree(int a, int b) {
	memset(dp, 0, sizeof(dp));
	if (b > 0) {
		dp[a + b][a - b + 1] = 1;
	}
	if (a > b + 1) {
		dp[a + b][a - b - 1] = 1;
	}
	int remWins, remLoss, x;
	for (int i = a + b - 1; i > 0; i--) {
		for (int j = ((i + 1) % 2); j <= a; j += 2) {
			x = ((i - 1) - j) / 2;
			remLoss = b - x;
			remWins = a - x - j;
			if (remLoss < 0 || remWins < 0 || remLoss > b || remWins > a)
				continue;
			if(remLoss > 0 && j > 1) {
				dp[i][j] = (dp[i][j] + dp[i + 1][j - 1]) % MOD;
			}
			if (remWins > 0) {
				dp[i][j] = (dp[i][j] + dp[i + 1][j + 1]) % MOD;
			}
		}
	}
	return dp[1][0];
}

int calculateStressfull(int a, int b) {
	memset(dp, 0, sizeof(dp));
	dp[a + b][SHIFT + a - b - 1] = 1;
	int remWins, remLoss, x;
	for (int i = a + b - 1; i > 0; i--) {
		int beg = ((i - 1) % 2 == b % 2) ? -b : (-b + 1);
		for (int j = beg; j <= a; j += 2) {
			x = ((i - 1) - j) / 2;
			remLoss = b - x;
			remWins = a - x - j;
			if (remLoss < 0 || remWins < 0 || remLoss > b || remWins > a)
				continue;
			if(remLoss > 0) {
				dp[i][SHIFT + j] = (dp[i][SHIFT + j] + dp[i + 1][SHIFT + j - 1]) % MOD;
			}
			if (remWins > 0 && (j < 0 || remLoss == 0)) {
				dp[i][SHIFT + j] = (dp[i][SHIFT + j] + dp[i + 1][SHIFT + j + 1]) % MOD;
			}
		}
	}
	return dp[1][SHIFT];
}
int main()
{
	freopen("hacker.in", "r", stdin);
	freopen("hacker.out", "w", stdout);

	int numtests;
	cin >> numtests;
	for (int o = 0; o < numtests; o++)
	{
		printf("Case #%d: ", o + 1);


		int a, b;
		scanf("%d-%d", &a, &b);
		cout << calculateStressFree(a, b);
		cout << " " << calculateStressfull(a, b) << endl;
	}
	return 0;
}
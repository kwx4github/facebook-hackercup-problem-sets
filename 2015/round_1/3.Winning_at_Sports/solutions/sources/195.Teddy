#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())

const int MOD = 1000000007;
const int MAX_AB = 2000;
int A, B;
int tc;
int memo1[MAX_AB + 5][MAX_AB + 5];
int DP1(int a, int b) {
	if (memo1[a][b] != -1) return memo1[a][b];
	int &ret = memo1[a][b];
	if (a == A && b == B) ret = 1;
	else {
		ret = 0;
		if (a < A) ret = (ret + DP1(a+1, b)) % MOD;
		if (b < B && b+1 < a) ret = (ret + DP1(a, b+1)) % MOD;
	}
	return ret;
}

int memo2[MAX_AB + 5][MAX_AB + 5];
int DP2(int a, int b) {
	if (memo2[a][b] != -1) return memo2[a][b];
	int &ret = memo2[a][b];
	if (a == A && b == B) ret = 1;
	else {
		ret = 0;
		if (a < A && (a+1 <= b || b == B)) ret = (ret + DP2(a+1, b)) % MOD;
		if (b < B) ret = (ret + DP2(a, b+1)) % MOD;
	}
	return ret;
}

void solve() {
	scanf("%d-%d", &A, &B);
	memset(memo1, -1, sizeof memo1);
	int ans1 = DP1(1, 0);
	
	memset(memo2, -1, sizeof memo2);
	int ans2 = DP2(0, 0);
	printf("Case #%d: %d %d\n", tc, ans1, ans2);
}

int main() {
	int T;
	scanf("%d", &T);
	
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

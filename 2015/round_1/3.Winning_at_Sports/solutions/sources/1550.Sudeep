

#define DEBUG       //comment when you have to disable all debug macros.
//#define LOCAL     //uncomment for testing from local file
#define NDEBUG    //comment when all assert statements have to be enabled.
//#define GRAPH
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

#define fd(i,a) for(i=1;i<=a;i++)
#define fa(i,a,b) for(i=a;i<=b;i++)
#define fs(i,a,b,c) for(i=a;i<=b;i+=c)
#define tr(c,i) for(typeof(c.begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define all(x) x.begin(), x.end()
#define clr(x,y) memset(x,y,sizeof x)
#define log2(x) (log(x)/log(2))
#define ARRAY_SIZE(arr) (1[&arr]-arr)      
#define INDEX(arr,elem)        (lower_bound(all(arr),elem)-arr.begin())
#define equals(a,b) (a.compareTo(b)==0)    //for strings only
template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

#define pb push_back
#define mp make_pair
#define lld long long int
#define MOD 1000000007
#define gcd __gcd

using namespace std;

#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#else
#define debug(args...)              // Just strip off all debug tokens
#endif

#ifdef GRAPH
#include "drawGraph.cpp"
#endif

struct debugger
{
	template<typename T> debugger& operator , (const T& v)
		{    
			cerr<<v<<" ";    
			return *this;    
		}

}dbg;

template<class T>
inline void inputInt(T &n )
{
	n=0;

 	T ch=getchar_unlocked();
	/*int sign=1;
	  while(( ch < '0' || ch > '9') && ch!='-')
	  ch=getchar_unlocked();
	  if(ch=='-')
	  {
	  sign=-1;
	  ch=getchar_unlocked();
	  }
	  while(  ch >= '0' && ch <= '9' )
	  n = (n<<3)+(n<<1) + ch-'0', ch=getchar_unlocked();
	  n*=sign;*/
	while( ch < '0' || ch > '9')
      ch=getchar_unlocked();
	while(  ch >= '0' && ch <= '9' )
		n = (n<<3)+(n<<1) + ch-'0', ch=getchar_unlocked();
}

lld stressfree[2001][2001], stressfull[2001][2001];

lld freesolve(lld m, lld n){
	//clr(stressfree,0);
	lld i,j;
	for(j=0;j<=n;j++)stressfree[m][j]=1;
	for(i=0;i<=m;i++)stressfree[i][n]=(i>n);

	 
	for(i=m-1;i>=0;i--)for(j=n-1;j>=0;j--)stressfree[i][j]=(i>j)?(stressfree[i+1][j]+stressfree[i][j+1])%MOD:0;
	// for(i=0;i<=m;i++){
	// 	for(j=0;j<=n;j++)cout<<stressfree[i][j]<<" ";
	// 	cout<<endl;
	// }
	return stressfree[1][0];
}

lld fullsolve(lld m,lld n){
	lld i,j;
	for(j=0;j<=n;j++)stressfull[m][j]=0;
	for(i=0;i<=m;i++)stressfull[i][n]=1;
	for(i=m-1;i>=0;i--)for(j=n-1;j>=0;j--)stressfull[i][j]=(i<=j)?(stressfull[i][j+1]+stressfull[i+1][j])%MOD:0;
	return stressfull[0][0];
}

int main()
{
#ifdef LOCAL
	freopen("input.in","r",stdin);
#endif
	lld t,m,n,i;
	inputInt(t);
	for(i=1;i<=t;i++){
		scanf("%lld-%lld",&m,&n);
		printf("Case #%lld: %lld %lld\n",i,freesolve(m,n),fullsolve(m,n));
	}
}


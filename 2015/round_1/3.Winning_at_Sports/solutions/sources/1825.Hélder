/**
 * Created by helfper on 18/01/2015.
 */
import scala.collection.mutable._

object WinningAtSports {
  def main(args: Array[String]) {
    val t = io.StdIn.readInt

    1.to(t).foreach(solve)
  }

  def solve(i: Int) {
    val Array(h, a) = io.StdIn.readLine.split("-").map(_.toInt)
    val full = scores(h, a)
    val free = scores(a+1, a)

    println(s"Case #$i: $full $free")
  }

  def scores(h: Int, a: Int): Int = {
    def scoresAux(h2: Int, a2: Int): Int = {
      if (containsCache(h2, a2)) cache(h2)(a2)
      else if (a2 == 0) 1
      else if (h2 < 0 || a2 < 0 || h2 <= a2) 0
      else {
        val res = (scoresAux(h2 - 1, a2) + scoresAux(h2, a2 - 1)) % 1000000007
        updateCache(h2, a2, res)
        res
      }
    }

    scoresAux(h, a)
  }

  val cache: Map[Int, Map[Int, Int]] = Map.empty

  def containsCache(h: Int, a: Int): Boolean = {
    cache.contains(h) && cache(h).contains(a)
  }

  def updateCache(h: Int, a: Int, n: Int): Unit = {
    cache.getOrElseUpdate(h, Map.empty).update(a, n)
  }
}

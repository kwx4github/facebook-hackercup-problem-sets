//#define NDEBUG
#include <cassert>
#include <fstream>
#include <iostream>
using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define SZ(a) ((int) (a).size())

const int MAXNM=2010;
const int MOD=1000000007;

int dp[2][2*MAXNM][MAXNM];

inline void trim(int &n) { while(n>=MOD) n-=MOD; }

int main() {
    cin.sync_with_stdio(false);
    //fstream in("in1");
    //cin.rdbuf(in.rdbuf());

    int T; cin >> T;
    for(int t=1; t<=T; ++t) {
        fill(&dp[0][0][0],&dp[0][0][0]+2*(2*MAXNM)*MAXNM,0);

        int N; cin >> N;
        char _; cin >> _;
        int M; cin >> M;
        int S=N+M;

        dp[0][1][1]=1;
        for(int i=2; i<=S; ++i) {
            for(int j=i/2+1; j<=min(N,i); ++j) {
                dp[0][i][j] += dp[0][i-1][j-1];
                trim(dp[0][i][j]);       
                dp[0][i][j] += dp[0][i-1][j];
                trim(dp[0][i][j]);
            }
        }
        int r1 = dp[0][S][N];

        dp[1][1][0]=1;
        for(int i=2; i<=2*M-1; ++i) {
            for(int j=0; j<=i/2; ++j) {
                if(j-1>=0 && i-j<M) {
                    dp[1][i][j] += dp[1][i-1][j-1];
                    trim(dp[1][i][j]);       
                }
                if(i-1-j<M) {
                    dp[1][i][j] += dp[1][i-1][j];
                    trim(dp[1][i][j]);
                }
            }
        }
        int r2 = 0;
        for(int i=M; i<=2*M-1; ++i) {
            r2 += dp[1][i][i-M];
            trim(r2);
        }

        cout << "Case #" << t << ": " << r1 << " " << r2 << endl;
    }
}

#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

class Solver
{
protected:
	virtual void solveTest(int test)
	{
	}
public:
	Solver()
	{

	}
	virtual ~Solver(){}

	void solve()
	{
		int T;
		scanf("%d",&T);
		for(int i=1;i<=T;i++)
		{
			cerr << i <<endl;
			solveTest(i);
		}
	}
};

class In
{
public:
	int nextInt() const
	{
		int t;
		scanf("%d",&t);
		return t;
	}
	string next() const
	{
		string s;
		cin>>s;
		return s;
	}
}in;

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const int dx[4]={-1,0,1,0};
	const int dy[4]={0,1,0,-1};

class WinningAtSports:public Solver
{
	static const int MOD=1000000007;
	int a,b;
	void solveTest(int test)
	{
		string s=in.next();
		for(int i=0;i<(int)s.length();i++)
			if(s[i]=='-')
				s[i]=' ';
		istringstream in(s);
		in>>a>>b;
		assert(a>b);
		vector<vector<int> > dpStressfree(a+1, vector<int>(b+1,-1));
		vector<vector<int> > dpStressul(a+1, vector<int>(b+1,-1));
		printf("Case #%d: %d %d\n", test, solveStressfree(0,0,dpStressfree), solveStressful(0,0,dpStressul));
	}
	int solveStressfree(int curA, int curB, vector<vector<int> > &dp)
	{
		if(curA<curB) return 0;
		if(curA==a && curB==b) return 1;
		if(dp[curA][curB]==-1)
		{
			if(curA!=0 && curB!=0 && curA == curB)
				dp[curA][curB]=0;
			else
			{
				dp[curA][curB]=0;
				if(curA!=a)
					dp[curA][curB]+=solveStressfree(curA+1, curB,dp);
				if(curB!=b)
					dp[curA][curB]+=solveStressfree(curA, curB+1,dp);
				dp[curA][curB]%=MOD;
			}
		}
		return dp[curA][curB];
	}
	int solveStressful(int curA, int curB, vector<vector<int> > &dp)
	{
		if(curB!=b && curA>curB) return 0;
		if(curA==a && curB==b) return 1;
		if(dp[curA][curB]==-1)
		{
			dp[curA][curB]=0;
			if(curA!=a)
				dp[curA][curB]+=solveStressful(curA+1, curB, dp);
			if(curB!=b)
				dp[curA][curB]+=solveStressful(curA, curB+1, dp);
			dp[curA][curB]%=MOD;
		}
		return dp[curA][curB];
	}

public:
	static void init()
	{

	}
};

int main()
{
	WinningAtSports().solve();
}

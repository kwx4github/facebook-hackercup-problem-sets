//Template
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <climits>
#include <cmath>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <ios>
#include <iomanip>
#include <ctime>
#include <numeric>
#include <functional>
#include <fstream>
#include <string>
#include <vector>
#include <bitset>
#include <cstdarg>
#include <complex>
using namespace std;

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef long double ld;
#define pair(x, y) make_pair(x, y)
#define runtime() ((double)clock() / CLOCKS_PER_SEC)

inline int read() {
	static int r, sign;
	static char c;
	r = 0, sign = 1;
	do c = getchar(); while (c != '-' && (c < '0' || c > '9'));
	if (c == '-') sign = -1, c = getchar();
	while (c >= '0' && c <= '9') r = r * 10 + (int)(c - '0'), c = getchar();
	return sign * r;
}

template <typename T>
inline void print(T *a, int n) {
	for (int i = 1; i < n; ++i) cout << a[i] << " ";
	cout << a[n] << endl;
}
#define PRINT(_l, _r, _s, _t) { cout << #_l #_s "~" #_t #_r ": "; for (int _i = _s; _i != _t; ++_i) cout << _l _i _r << " "; cout << endl; }

const int mod = (int)1e9 + 7;

#define N 2000
int f[N + 1][N + 1], g[N + 1][N + 1];
int T, n, m;

inline void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}

int main(int argc, char *argv[]) {
#ifdef KANARI
	freopen("winning_at_sports.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	
	int Case = 0;
	scanf("%d", &T);
	while (T--) {
		scanf("%d-%d\n", &n, &m);
		memset(f, 0, sizeof f);
		f[0][0] = 1;
		for (int i = 0; i <= n; ++i)
			for (int j = 0; j <= m; ++j) {
				if (!f[i][j]) continue;
				if (i < n) add(f[i + 1][j], f[i][j]);
				if (j < m && i > j + 1) add(f[i][j + 1], f[i][j]);
			}
		memset(g, 0, sizeof g);
		g[0][0] = 1;
		for (int i = 0; i <= n; ++i)
			for (int j = 0; j <= m; ++j) {
				if (!g[i][j]) continue;
				if (i < n && (j == m || i + 1 <= j)) add(g[i + 1][j], g[i][j]);
				if (j < m) add(g[i][j + 1], g[i][j]);
			}
		printf("Case #%d: %d %d\n", ++Case, f[n][m], g[n][m]);
	}
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}

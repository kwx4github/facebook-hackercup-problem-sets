#!/usr/bin/python

import sys

data = file(sys.argv[1]).read().splitlines()

T = int(data.pop(0))

MOD = 1000000007

def brute_stress_free(PATH, ME, OPP):
    PATH[1][0] = 1
    for x in xrange(1,ME+1):
        for y in xrange(0,OPP+1):
            if x == ME and y == OPP:
                continue
            if x+1 <= ME:
                PATH[x+1][y] = ( PATH[x+1][y] + PATH[x][y] ) % MOD
            if y+1 < x and y+1 <= OPP:
                PATH[x][y+1] = ( PATH[x][y+1] + PATH[x][y] ) % MOD
    return PATH[ME][OPP]

def brute_stress_full(PATH, ME, OPP):
    if OPP == 0:
        return 1
    PATH[0][1] = 1
    for x in xrange(0,ME+1):
        for y in xrange(0,OPP+1):
            if x == ME and y == OPP:
                continue
            if (x+1 <= y and x+1 <= ME) or ( y == OPP and x+1 <= ME):
                PATH[x+1][y] = ( PATH[x+1][y] + PATH[x][y] ) % MOD
            if y+1 <= OPP:
                PATH[x][y+1] = ( PATH[x][y+1] + PATH[x][y] ) % MOD
    return PATH[ME][OPP]

def brute_stress_free2(PATH, ME, OPP):
    if OPP == 0:
        return 1
    PATH[1][0] = 1
    horizon = []
    horizon.append((1,0))
    while horizon:
        (x,y) = horizon.pop(0)
        if x == ME and y == OPP:
            continue
        if x+1 <= ME:
            PATH[x+1][y] = ( PATH[x+1][y] + PATH[x][y] ) % MOD
            horizon.append((x+1,y))
        if y+1 < x and y+1 <= OPP:
            PATH[x][y+1] = ( PATH[x][y+1] + PATH[x][y] ) % MOD
            horizon.append((x,y+1))
        PATH[x][y] = 0
    return PATH[ME][OPP]

for casenum in xrange(1,T+1):
    print 'Case #%d:' % casenum,
    (ME,OPP) = [ int(x) for x in data.pop(0).split('-') ]

#    print ME, OPP
    PATH = [ [ 0 for x in xrange(0,OPP+1)] for y in xrange(0,ME+1)]
    sfree = brute_stress_free(PATH,ME,OPP)
    PATH = [ [ 0 for x in xrange(0,OPP+1)] for y in xrange(0,ME+1)]
    sfull = brute_stress_full(PATH,ME,OPP)
    print sfree, sfull







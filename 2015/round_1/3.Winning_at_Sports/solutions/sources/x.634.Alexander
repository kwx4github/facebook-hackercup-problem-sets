#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

typedef long long unsigned LLU;

static const LLU P = 1000000007;

struct Res {
    LLU sfree;
    LLU sful;
    
    friend std::ostream& operator << (std::ostream& out, const Res& res)
    {
        return out << res.sfree << " " << res.sful; 
    }
};

LLU safeSum(LLU x, LLU y)
{
    x %= P;
    y %= P;
    LLU z = x + y;
    z %= P;
    return z;
}

Res count(size_t X, size_t Y)
{
    size_t N = std::max(X + 1, Y + 1);

    std::vector<std::vector<LLU>> sfree(N, std::vector<LLU>(N, 0));
    sfree[1][0] = 1;
    for (size_t x = 2; x < N; ++x) {
        for (size_t y = 0; y < x; ++y) {
            LLU res = 0;
            if (x - 1 > y) {
                res = safeSum(res, sfree[x - 1][y]);
            } 
            if (y > 0) {
                res = safeSum(res, sfree[x][y - 1]);
            }
            sfree[x][y] = res;
        } 
    }

    std::vector<std::vector<LLU>> asfree(N, std::vector<LLU>(N, 0));
    asfree[1][0] = 1;
    asfree[1][1] = 1;
    for (size_t x = 2; x < N; ++x) {
        for (size_t y = 0; y <= x; ++y) {
            LLU res = 0;
            if (x - 1 >= y) {
                res = safeSum(res, asfree[x - 1][y]);
            } 
            if (y > 0) {
                res = safeSum(res, asfree[x][y - 1]);
            }
            asfree[x][y] = res;
        } 
    }
    
    return Res { sfree[X][Y], asfree[Y][Y] };
}

int main()
{
    size_t T;
    std::cin >> T;
    for (size_t t = 0; t < T; ++t) {
        std::string scoreString;
        std::cin >> scoreString;
        size_t pos = scoreString.find('-');
        size_t X = std::stoi(scoreString.substr(0, pos));
        size_t Y = std::stoi(scoreString.substr(pos + 1));
        std::cout << "Case #" << (t + 1) << ": " << count(X, Y) << std::endl; 
    }
    return 0;
}




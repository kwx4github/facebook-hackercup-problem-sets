#include <cstdio>
#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int mod = 1e9 + 7;

const int ile = 4005;
ll dp[ile][ile];

ll licz_stre(int a, int b)
{
	if(b == 0)
		return 1ll;
	dp[0][0] = 1;
	for(int k = 1; k <= b; k++)
		dp[0][k] = 0;
	ll wyn = 0ll;
	for(int k = 1; k <= a + b; k++)
	{
		for(int c = 0; c <= b; c++)
		{
			if((c + k) % 2 == 1)
				continue;
			int br = (c + k) / 2;
			int ar = k - br;
			if(ar < 0)
				continue;
			dp[k][c] = 0ll;
			if(ar)
				dp[k][c] = (dp[k][c] + dp[k - 1][c + 1]) % mod;
			if(br && c > 0)
				dp[k][c] = (dp[k][c] + dp[k - 1][c - 1]) % mod;
			//printf("dp[%d][%d] = %lld // ar = %d, br = %d\n", k, c, dp[k][c], ar, br);
			if(br == b)
				wyn = (wyn + dp[k - 1][c - 1]) % mod;
		}
	}
	return wyn;
}

ll licz_nons(int a, int b)
{
	a--;
	dp[0][0] = 1;
	for(int k = 1; k <= a; k++)
		dp[0][k] = 0;
	for(int k = 1; k <= a + b; k++)
	{
		for(int c = 0; c <= a; c++)
		{
			if((c + k) % 2 == 1)
				continue;
			int ar = (c + k) / 2;
			int br = k - ar;
				if(br < 0)
					continue;
			dp[k][c] = 0ll;
			if(ar && c > 0)
				dp[k][c] = (dp[k][c] + dp[k - 1][c - 1]) % mod;
			if(br)
				dp[k][c] = (dp[k][c] + dp[k - 1][c + 1]) % mod;
		}
	}
	return dp[a + b][a - b];
}

void przyp()
{
	int a, b;
	scanf("%d-%d", &a, &b);
	printf("%lld %lld\n", licz_nons(a, b), licz_stre(a, b));
}

int main()
{
	int t;
	scanf("%d", &t);
	for(int i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		przyp();
	}
	return 0;
}

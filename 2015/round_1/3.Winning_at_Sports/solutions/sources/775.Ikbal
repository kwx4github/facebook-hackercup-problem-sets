#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2020;

const int mod = 1e9 + 7;

inline void add(int &x,int y){
    x += y;
    if(x >= mod)
        x -= mod;
}

int x, y;
int dp[N][N];

int f(int a,int b){
    if(a > x || b > y)
        return 0;
    if(a + b > 0 && a <= b)
        return 0;
    if(a == x && b == y)
        return 1;
    int &rev = dp[a][b];
    if(rev != -1)
        return rev;
    rev = 0;
    add(rev, f(a + 1, b));
    add(rev, f(a, b + 1));
    return rev;
}

int g(int a,int b){
    if(a > x || b > y)
        return 0;
    if(b == y)
        return 1;
    if(a + b > 0 && a > b)
        return 0;
    int &rev = dp[a][b];
    if(rev != -1)
        return rev;
    rev = 0;
    add(rev, g(a + 1, b));
    add(rev, g(a, b + 1));
    return rev;
}

void solve(){
    string s;
    cin >> s;
    x = 0; y = 0;
    bool first = true;
    for(int i = 0; i < s.size(); i++){
        if(s[i] == '-'){
            first = false;
            continue;
        }
        if(first){
            x *= 10;
            x += s[i] - '0';
        }else{
            y *= 10;
            y += s[i] - '0';
        }
    }
    eprintf("%d %d\n", x, y);
    memset(dp, -1, sizeof dp);
    int ans1 = f(0, 0);
    memset(dp, -1, sizeof dp);
    int ans2 = g(0, 0);
    printf("%d %d\n", ans1, ans2);
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int tc = read();

    for(int i = 1; i <= tc; i++){
        printf("Case #%d: ", i);
        solve();
    }

    return 0;
}

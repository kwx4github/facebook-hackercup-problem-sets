#include<iostream>
#include<bitset>
#include<cstdio>

#define mod 1000000007
#define ll long long
using namespace std;
ll dp[2005][2005];
ll dp2[2005][2005];
ll getLeftScore(string str){
    int i,j;
    for(i=0;i<str.size();i++){
        if(str[i] == '-')
            break;
    }
    ll res = 0;
    for(j=0;j<i;j++){
        res = res*10 + ((int)str[j]-'0');
    }
    return res;
}
  
ll getRightScore(string str){
    int i,j;
    for(i=0;i<str.size();i++){
        if(str[i] == '-')
            break;
    }
    ll res = 0;
    for(j=i+1;j<str.size();j++){
        res = res*10 + ((int)str[j]-'0');
    }
    return res;
}

int main(){
    ll t,n,m,i,j;
    int id = 0;
    freopen("winning_at_sports.txt","r",stdin);
    freopen("outputtheanswer.txt","w",stdout);
    ios::sync_with_stdio(0);
    cin>>t;
    while(t--){
        id++;
        string str;
        cin>>str;
        m=getLeftScore(str);
        n=getRightScore(str);
      //  cout<<m<<" "<<n<<endl;

        memset(dp2,0,sizeof(dp2));
        memset(dp,0,sizeof(dp));

        for(i=0;i<=n;i++)
            dp[0][i] = 0;
        for(i=1;i<=m;i++)
            dp[i][0] = 1;
        
        for(i=1;i<=m;i++){
            for(j=1;j<=n;j++){
                ll val1= 0,val2 =0;
                if(i-1>j)
                    val1 = dp[i-1][j];
                if(i>j-1)
                    val2 = dp[i][j-1];
                dp[i][j] = (val1 + val2)%mod;
            }
        }
      //  cout<<dp[m][n];
        
        for(i=0;i<=n-1;i++)
            dp2[0][i] = 0;
        for(i=1;i<=n;i++)
            dp2[i][0] = 1;
            
        for(i=1;i<=n;i++){
            for(j=1;j<=n-1;j++){
                ll val1= 0,val2 =0;
               // if(i-1>j)
                    val1 = dp2[i-1][j];
                if(i>j-1)
                    val2 = dp2[i][j-1];
                dp2[i][j] = (val1 + val2)%mod;
            }
        }
        printf("Case #%d: %lld %lld\n",id,dp[m][n],dp2[n][n-1]);
      //  cout<<dp2[n-1][n];
        
    }
}

import static java.lang.Integer.parseInt;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.StringTokenizer;


public class WinningAtSports {

	static int MB = 1 << 20;
	static BufferedReader br = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 20*MB);
	static StringTokenizer st;
	
	static void NL() throws Exception {
		st = new StringTokenizer(br.readLine(), "-");
	}
	
	static String NT() {
		return st.nextToken();
	}
	
	public static void main(String[] args) throws Exception {
		NL();
		int T = parseInt(NT());
		StringBuilder sb = new StringBuilder();
		for (int ii = 1; ii <= T; ii++) {
			NL();
			int A = parseInt(NT());
			int B = parseInt(NT());
			long[] res = solve(A, B);
			sb.append(String.format("Case #%d: %d %d%n", ii, res[0], res[1]));
		}
		System.out.print(sb);
	}

	private static long[] solve(int a, int b) {
		freeCache = new Long[a+1][b+1];
		fullCache = new Long[a+1][b+1];

		return new long[] { free(a, b), full(a, b) };
	}

	static final int MOD = 1_000_000_007;
	
	static Long[][] freeCache;
	
	private static long free(int a, int b) {
		if (b == 0) return 1;
		
		if (freeCache[a][b] != null) return freeCache[a][b];
		
		long res = 0;
		if (a > b + 1) {
			res += free(a-1, b);
		}
		res += free(a, b-1);

		if (res >= MOD) res -= MOD;

		freeCache[a][b] = res;
		return res;
	}

	static Long[][] fullCache;

	private static long full(int a, int b) {
		if (a == 0) return 1;
		
		if (fullCache[a][b] != null) return fullCache[a][b]; 
		
		long res;
		if (a > b) {
			res = full(a-1, b);
		} else {
			if ( a == b ) {
				res = full(a-1, b);
			} else {
				// a < b
				res = full(a-1, b) + full(a, b-1);
			}
		}
		
		if (res >= MOD) res -= MOD;
		
		fullCache[a][b] = res;
		return res;
	}

}

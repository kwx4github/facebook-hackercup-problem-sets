#include <cstdlib>
#include <iostream>
#include <stdio.h>
#include <cstring>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <map>
#include <stack>
#include <cmath>
#include <set>
#include <ctype.h>
#include <bitset>

#define INF 0x3F3F3F3F
#define rep(i, a, b) for (int i = int(a); i < int(b); i++)
#define pb push_back
#define clr(a) memset((a),0,sizeof(a))
#define pi 3.1415926535897932384626433832795028841971
#define debug(x) cout << #x << " = " << x << endl;
#define debug2(x,y) cout << #x << " = " << x << " --- " << #y << " " << y << "\n";
#define all(S) (S).begin(), (S).end()
#define MAXV 1005
#define F first
#define S second
#define EPS 1e-9
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair < int, int >  ii;
typedef vector < int >  vi;
typedef vector < ii >  vii;


int pd[2002][2002];
int A, B;
int mod = 1000000007;

ll solve(int a, int b){
    
    if(a == A && b == B) return 1;
    if(pd[a][b] != -1) return pd[a][b];
    
    ll ans = 0;
    
    if(a+1 <= A){
        ans = ans + (solve(a+1, b) % mod);
        ans %= mod;
    }
    
    if(a-1 > b && b+1 <= B){
        ans = ans + (solve(a, b+1) % mod);
        ans %= mod;
    }

    return pd[a][b] = ans;
}

ll solv(int a, int b){
    
    if(a == A && b == B) return 1;
    if(pd[a][b] != -1) return pd[a][b];
    
    ll ans = 0;
    
    if(a+1 <= A){
        if(b == B){ 
            ans = ans + (solv(a+1, b) % mod);
            ans %= mod;
        }
        else{ 
            if(a+1 <= b){
               ans = ans + (solv(a+1, b) % mod);
               ans %= mod; 
            }   
        }
    }

    if(b+1 <= B){
        ans = ans + (solv(a, b+1) % mod);
        ans %= mod;
    }
    
    return pd[a][b] = ans;  
}

int main(){
     
    int tc;
    scanf("%d",&tc);
    
    rep(k,1,tc+1){
        
        scanf("%d-%d",&A,&B);
        
        rep(i,0,A+1)
        rep(j,0,B+1)
        pd[i][j] = -1;
        
        ll x = solve(0,0);
        
        rep(i,0,A+1)
        rep(j,0,B+1)
        pd[i][j] = -1;
        
        ll y = solv(0,0);       
        
        printf("Case #%d: %lld %lld\n",k,x,y);   
    }
    
    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <map>
using namespace std;
typedef long long i64;

#define fu(i,m,n) for(int i=m; i<n; i++)
#define fd(i,m,n) for(int i=n-1; i>=m; i--)
#define fr(i,m,n) for(typeof(m) i=m; i!=n; ++i)
#define fa(i,c) fr(i,(c).begin(),(c).end())

// count ways to get to I-J staying at least tied
long semistressed[2001][2001];
const long MOD = 1000000007;

int main(void) {

    semistressed[0][0]=1;
    
    fu(i,0,2001) semistressed[i][0]=1;
    fu(j,1,2001) semistressed[0][j]=0;
    fu(i,1,2001) fu(j,1,i+1) {
        semistressed[i][j]=(semistressed[i-1][j] + semistressed[i][j-1])%MOD;
    }

	int TS; cin >> TS;
	for(int ts=1; ts<=TS; ts++) {
		cout << "Case #" << ts << ": ";
        int a,b;
        scanf("%d-%d\n", &a, &b);
        // start with a win, and then stay at least at the line for a-1 wins and b losses
        cout << semistressed[a-1][b];
        cout << " ";
        long stressfull = 0;
        // stay below the line until you get to i wins and b-1 losses, then lose, then a-i wins
        if(b) for(int i=0; i<=a-1; i++) {
            stressfull += semistressed[b-1][i];
            stressfull %= MOD;
        }
        cout << stressfull;
		cout << endl;
	}
}

#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <math.h>
#include <algorithm>
#include <bitset>
#include <set>
#include <sstream>
#include <stdlib.h>
#include <map>
#include <queue>
#include <stack>
#include <assert.h>
// #include <unordered_set>
#include <iomanip>

using namespace std;

#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

#define forit(X,Y) for(typeof((Y).begin()) X = (Y).begin(); X != (Y).end(); ++X)

#define mplus(x, y) ((x) == -1 || (y) == -1) ? -1 : ((x) + (y))
#define mmax(x, y) ((x) == -1 || (y) == -1) ? -1 : max((x), (y))
#define mmin(x, y) ((x) == -1) ? (y) : ((y) == -1) ? (x) : min((x), (y))

#define checkbit(n, k) (((1L << (k)) & (n)) != 0)

#define debug(x) cerr << '>' << #x << ':' << x << endl;

typedef long long int64;

typedef vector <int> vi;
typedef vector < vi > vvi;


const int MOD = 1000000007;

int main() {
    int N = 2001;
    vvi dp_stress(N, vi(N));
    vvi dp_stress_free(N, vi(N));

    dp_stress[0][0] = dp_stress_free[0][0] = 1;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (i == 0 && j == 0) continue;

            if (i > j || (i == j && i > 0)) {
                dp_stress[i][j] = dp_stress[i - 1][j];
            } else {
                if (i > 0)
                    dp_stress[i][j] += dp_stress[i - 1][j];
                if (j > 0)
                    dp_stress[i][j] += dp_stress[i][j - 1];
                dp_stress[i][j] %= MOD;
            }

            if (i > j) {
                if (i > 0)
                    dp_stress_free[i][j] += dp_stress_free[i - 1][j];
                if (j > 0)
                    dp_stress_free[i][j] += dp_stress_free[i][j - 1];
                dp_stress_free[i][j] %= MOD;
            }
        }
    }

    int T;
    cin >> T;
    for (int tt = 1; tt <= T; ++tt) {
        int a, b;
        char c;
        cin >> a >> c >> b;
        assert(c == '-');
        cout << "Case #" << tt << ": " << dp_stress_free[a][b] << " " << dp_stress[a][b] << endl;
    }
}

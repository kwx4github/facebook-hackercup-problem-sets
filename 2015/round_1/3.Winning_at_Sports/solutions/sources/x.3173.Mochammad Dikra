/* DIKRA */
/* DELAPAN.3gp */
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of DELAPAN.3gp's template -------------- */

#define MOD 1000000007LL

int ntc;
int n, a, b;
ll dp[2005][2005];

ll work1(int x, int y){
	if (x == a && y == b) return 1;

	ll &ret = dp[x][y];
	if (ret == -1LL){
		ret = 0LL;
		if (x < a) ret += work1(x+1, y);
		if (y+1 < x) ret += work1(x, y+1);
		ret %= MOD;
	}
	return ret;
}


ll work2(int x, int y){
	if (y == b) return 1;

	ll &ret = dp[x][y];
	if (ret == -1LL){
		ret = 0LL;
		if (y < b) ret += work2(x, y+1);
		if (x+1 <= y) ret += work2(x+1, y);
		ret %= MOD;
	}
	return ret;
}

int main(){
	OPEN("sports");

	scanf("%d", &ntc);
	FOR(itc, 1, ntc){
		scanf("%d-%d", &a, &b);

		RESET(dp, -1);
		ll ans1 = work1(1,0);
		RESET(dp, -1);
		ll ans2 = work2(0,1);
		printf("Case #%d: %I64d %I64d\n", itc, ans1, ans2);
	}

	

	return 0;
}

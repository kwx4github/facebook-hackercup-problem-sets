//#pragma comment(linker, "/STACK:512000000")
#pragma comment(linker, "/STACK:5000000000")
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <cassert>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <functional>
#include <bitset>
#include <stack>
#include <cfloat>
#include <ctime>
#include <queue>
#include <deque>
#include <numeric>
#include <memory.h>

#define PI 3.14159265358979323846
#define ull unsigned long long int
#define ll long long int
#define EPS 1e-9
#define pb push_back
#define EOS(c) (c != EOF && c != '\0' && c != '\n' && c != ' ')
#define oo 1000000005
#define ALL(v) v.begin(), v.end()
#define mp make_pair
#define sqr(a) (a) * (a)
#define traktorista 300
int size;
typedef double dbl;

using namespace std;

#define FILES "sort"
//#define OUT "true"

template<class telem>telem GCD(telem a, telem b)
{
	return b ? GCD(b, a % b) : a;
}

template<class telem>telem LCM(telem a, telem b)
{
	return a / GCD(a, b) * b;
}

template <class telem> istream& operator >> (istream& cin, pair<telem, telem>& in)
{
	cin >> in.first >> in.second;
	return cin;
}

template <class telem> ostream& operator << (ostream& cout, pair<telem, telem> out)
{
	cout << out.first << ' ' << out.second;
	return cout;
}

template <class telem> istream& operator >> (istream& cin, vector<telem>& in)
{
	in.resize(size);

	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

template <class telem> ostream& operator << (ostream& cout, vector<telem> out)
{
	size = out.size();

	for(int i = 0; i < size; i++)
	{
		cout << out[i] << ' ';
	}

	return cout;
}

template <class telem> istream& operator >> (istream& cin, telem* in)
{
	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

/*template <class telem> ostream& operator << (ostream& cout, telem* out)
{
for(int i = 0; i < size; i++)
{
cout << out[i] << ' ';
}

return cout;
}*/

struct trie
{
	int next[26];

	trie()
	{
		fill(next, next + 26, -1);
	}
};

int T;
ll dp1[2500][2500], dp2[2500][2500][2];
char was[2500][2500][2];
const ll mod = (ll)(1e9 + 7);

void add(ll &a, ll b)
{
	a += b;
	if(a > mod)
		a -= mod;
}

ll get1(int a, int b)
{
	if(min(a, b) < 0)
		return 0;

	if(-1 != dp1[a][b])
		return dp1[a][b];

	if(a == 0 && b == 0)
		return dp1[a][b] = 1;

	if(b >= a)
		return dp1[a][b] = 0;
	
	dp1[a][b] = get1(a - 1, b);
	add(dp1[a][b], get1(a, b - 1));

	return dp1[a][b];
}

ll get2(int ca, int cb)
{
	for(int i = 0; i < 2500; i++)
		for(int j = 0; j < 2500; j++)
			for(int k = 0; k < 2; k++)
				dp2[i][j][k] = was[i][j][k] = 0;

	int a = 0;
	int b = 0;
	int x, nx;
	
	pair<pair<int, int>, int> tmp(mp(mp(0, 0), 0));
	queue<pair<pair<int, int>, int> > q;

	q.push(tmp);
	was[0][0][0] = dp2[0][0][0] = 1;

	int cnt = 0;

	while(!q.empty())
	{
		tmp = q.front();
		q.pop();
		
		a = tmp.first.first;
		b = tmp.first.second;
		x = tmp.second;

		if(x)
		{
			if(a + 1 <= ca)
			{
				add(dp2[a + 1][b][x], dp2[a][b][x]);

				if(!was[a + 1][b][x])
				{
					was[a + 1][b][x] = 1;
					q.push(mp(mp(a + 1, b), x));
				}
			}
		}
		else
		{
			nx = x;
			if(b + 1 == cb)
				nx = 1;

			if(b + 1 <= cb)
			{
				add(dp2[a][b + 1][nx], dp2[a][b][x]);

				if(!was[a][b + 1][nx])
				{
					was[a][b + 1][nx] = 1;
					q.push(mp(mp(a, b + 1), nx));
				}
			}
			
			if(a + 1 <= ca && (a + 1 <= b))
			{
				add(dp2[a + 1][b][x], dp2[a][b][x]);

				if(!was[a + 1][b][x])
				{
					was[a + 1][b][x] = 1;
					q.push(mp(mp(a + 1, b), x));
				}
			}
		}
	}

	return dp2[ca][cb][1];
}
	
int main()
{

#ifndef ONLINE_JUDGE
#ifdef OUT
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
#endif

#ifdef FILES
	freopen(FILES".in", "r", stdin);
	freopen(FILES".out", "w", stdout); 
#endif
#endif

	//ios_base::sync_with_stdio(false);
	srand(time(NULL));
	time_t start = clock();	

	scanf("%d", &T);

	for(int i = 0; i < 2500; i++)
	{
		fill(dp1[i], dp1[i] + 2500, -1);
	}
	
	for(int t = 1, a, b; t <= T; t++)
	{
		scanf("%d-%d", &a, &b);

		printf("Case #%d: %I64d %I64d\n", t, get1(a, b), max(get2(a, b), 1ll));
	}
    
#ifndef ONLINE_JUDGE
	fprintf(stderr, "\n%0.3lf\n", (clock() - start) * 1.0 / CLOCKS_PER_SEC);
#endif

	return 0;
}
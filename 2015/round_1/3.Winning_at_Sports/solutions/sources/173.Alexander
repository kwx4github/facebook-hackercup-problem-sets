#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const int MAXN = 2111; 
const ll MOD = 1E9 + 7;

int t, n;             
int a, b;
ll ans1, ans2, dp[MAXN][MAXN];

int main() {
                     
	scanf("%d\n", &t);
	
	forn(tt, t) {            
		printf("Case #%d: ", tt + 1); 
		scanf("%d-%d\n", &a, &b);
		
		memset(dp, 0, sizeof(dp));
       	ans1 = 0;
       	dp[1][0] = 1;
       	for (int i = 1; i <= a; i++)
       		for (int j = 0; j < i; j++) {
       			if (i > j + 1)
       				dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
       			dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
       		}
       		
       	ans1 = dp[a][b];	
       	memset(dp, 0, sizeof(dp));
       		
       	ans2 = 0;
       	dp[0][0] = 1;
       	for (int i = 0; i < b; i++)
       		for (int j = 0; j < b; j++) {
       			dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
       			if (i + 1 <= j)
       				dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
       		}
       		
       	for (int i = 0; i <= b; i++)
       		ans2 = (ans2 + dp[i][b]) % MOD;
       		
		cout << ans1 << ' ' << ans2 << '\n';
	}
	
	return 0;
}
#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define MAXN 2010
#define MOD 1000000007
int DP[MAXN][MAXN];
void doit(int CASE){
  int me , he;
  scanf("%d-%d" , &me , &he);
  for(int i=0;i<=me;++i)
   for(int j=0;j<=he;++j)
    DP[i][j] = 0;
  for(int i=0;i<=me;++i)
   for(int j=0;j<=he;++j){
    if(i==0 && j==0) DP[i][j] = 1;
    else if(i > j){
          if(i-1 >= 0) DP[i][j] += DP[i-1][j];
          if(j-1 >= 0) DP[i][j] += DP[i][j-1];
                  }
    if(DP[i][j] >= MOD)
     DP[i][j] -= MOD;
                         }
  int FREE = DP[me][he];
  for(int i=0;i<=me;++i)
   for(int j=0;j<=he;++j)
    DP[i][j] = 0;
  me = he;
  for(int i=0;i<=me;++i)
   for(int j=0;j<=he;++j){
    if(i==0 && j==0) DP[i][j] = 1;
    else if(i <= j){
          if(i-1 >= 0) DP[i][j] += DP[i-1][j];
          if(j-1 >= 0) DP[i][j] += DP[i][j-1];
                   }
    if(DP[i][j] >= MOD)
     DP[i][j] -= MOD;
                         }
  int FULL = DP[me][he];
  printf("Case #%d: %d %d\n" , CASE , FREE , FULL);
}
int main(){
  int Q;
  scanf("%d" , &Q);
  for(int i=1;i<=Q;++i)
   doit(i);
  return 0;
}

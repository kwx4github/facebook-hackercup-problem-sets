#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>

using namespace std;

const int N = 2002;
const int MOD = 1000000007;
int dp1[N][N];
int dp2[N][N];

int getInt(const string & s)
{
	int n = s.length();
	int ans = 0;
	for(int i=0;i<n;i++)
	{
		ans*=10;
		ans += s[i]-'0';
	}
	return ans;
}

void precalc()
{
	memset(dp1, 0, sizeof(dp1));
	memset(dp2, 0, sizeof(dp2));
	dp1[1][0] = 1;
	dp2[0][0] = 1;

	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			if (i > j)
			{
				int previ, prevj;
				previ = i-1;
				prevj = j;
				if(previ >= 0 && prevj >=0 && previ < N && prevj < N && previ > prevj)
				{
					dp1[i][j] += dp1[previ][prevj];
					if (dp1[i][j] >= MOD)
						dp1[i][j] -= MOD;
				}

				previ = i;
				prevj = j-1;
				if(previ >= 0 && prevj >=0 && previ < N && prevj < N && previ > prevj)
				{
					dp1[i][j] += dp1[previ][prevj];
					if (dp1[i][j] >= MOD)
						dp1[i][j] -= MOD;
				}
			}
		}
	}

	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			if (i <= j)
			{
				int previ, prevj;
				previ = i-1;
				prevj = j;
				if(previ >= 0 && prevj >=0 && previ < N && prevj < N && previ <= prevj)
				{
					dp2[i][j] += dp2[previ][prevj];
					if (dp2[i][j] >= MOD)
						dp2[i][j] -= MOD;
				}

				previ = i;
				prevj = j-1;
				if(previ >= 0 && prevj >=0 && previ < N && prevj < N && previ <= prevj)
				{
					dp2[i][j] += dp2[previ][prevj];
					if (dp2[i][j] >= MOD)
						dp2[i][j] -= MOD;
				}
			}
		}
	}
}

void solve()
{
	string s;
	cin >> s;
	int idel = -1;
	for(int i=0;i<s.length();i++)
	{
		if(s[i] == '-')
		{
			idel = i;
			break;
		}
	}
	int a = getInt(s.substr(0, idel));
	int b = getInt(s.substr(idel+1));

	//cout << a << " " << b << endl;
	cout << dp1[a][b] << " " << dp2[b][b] << "\n";
}

int main()
{
	precalc();
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin.sync_with_stdio(false);
	int t;
	cin >> t;
	for(int tst = 1; tst <= t; tst++)
	{
		cout << "Case #" << tst << ": ";
		solve();
	}
}
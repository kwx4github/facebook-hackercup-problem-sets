import java.io.*;
import java.util.TreeSet;

public class Sports {
    static final int MOD = 1000000007;
    static final int[][] stressfreeMem = new int[2001][2001];
    static final int[][] stressfulMem = new int[2001][2001];


    public static void main(String[] args) {
        BufferedReader br = null;
        PrintWriter out = null;
        int T;
        try {
            br = new BufferedReader(new FileReader("winning_at_sports.txt"));
            out
                    = new PrintWriter(new BufferedWriter(new FileWriter("sports_out.txt")));

            T = Integer.valueOf(br.readLine());
            for (int i = 0; i < T; i++) {
                String scores = br.readLine();
                String[] scoresArray = scores.split("-");

                int A = Integer.valueOf(scoresArray[0]);
                int B = Integer.valueOf(scoresArray[1]);

                out.println("Case #" + (i + 1) + ": " + stressfree(A,B)+" "+stressful(A,B));
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            out.close();
        }


    }

    static int stressfree(int A, int B) {
        if (!(A > B)) {
            return 0;
        }

        if (A == 1 && B == 0) {
            return 1;
        }

        if (stressfreeMem[A][B] != 0) {
            return stressfreeMem[A][B];
        }

        int ans = ((A > 0) ? stressfree(A - 1, B) : 0) + ((B > 0) ? stressfree(A, B - 1) : 0);
        ans = ans%MOD;
        stressfreeMem[A][B] = ans;
        return ans;
    }

    static int stressful(int A, int B) {
        if (!(A>B)) {
            return 0;
        }

        return stressfulInitial(B,B);
    }
    static int stressfulInitial(int A, int B) {
        if (!(A <= B)) {
            return 0;
        }

        if (A == 0 && B == 0) {
            return 1;
        }

        if (stressfulMem[A][B] != 0) {
            return stressfulMem[A][B];
        }

        int ans = ((A > 0) ? stressfulInitial(A - 1, B) : 0) + ((B > 0) ? stressfulInitial(A, B - 1) : 0);
        ans = ans%MOD;
        stressfulMem[A][B] = ans;
        return ans;
    }
}

#include <iostream>

using namespace std;

#define ull unsigned long long

ull dpfree[2002][2002];
ull dpful[2002][2002];

ull ways2win_free(int w, int l) {
	if (dpfree[w][l] != 0)
		return dpfree[w][l];
	if (w == 1)
		return 1;
	ull ans = 0;
	if (l > 0)
		ans += ways2win_free(w, l-1);
	if (w > l+1)
		ans += ways2win_free(w-1, l);
	return dpfree[w][l] = ans % 1000000007;
}

ull ways2win_ful(int w, int l) {
	if (dpful[w][l] != 0)
		return dpful[w][l];
	if (l == 0 && w == 0)
		return 1;
	ull ans = 0;
	if (w == l)
		ans += ways2win_ful(w-1, l);
	if (w < l) {
		if (w > 0)
			ans += ways2win_ful(w-1, l);
		ans += ways2win_ful(w, l-1);
	}
	if (w > l) {
		ans += ways2win_ful(w-1, l);
	}
	return dpful[w][l] = ans % 1000000007;
}

int main() {
	for (int i = 0; i < 2002; ++i)
		for (int j = 0; j < 2002; ++j) {
			dpfree[i][j] = 0;
			dpful[i][j] = 0;
		}
	int t;
	cin >> t;
	for (int kase = 1; kase <= t; ++kase) {
		int w, l;
		char c;
		cin >> w >> c >> l;
		cout << "Case #" << kase << ": "<< ways2win_free(w, l) << " " << ways2win_ful(w, l)  << endl;
	}
	return 0;
}

using System;
using System.Linq;
using System.IO;
using System.Diagnostics;
using System.Numerics;

namespace Round1Problem3
{
	class MainClass
	{
		public static void Main(string[] args)
		{
			var sr = new StreamReader("input3.txt");
			var sw = new StreamWriter("output3.txt");

			sr.ReadLine(); // T

			int i = 1;
			while (!sr.EndOfStream) {
				var st = new Stopwatch();
				st.Start();

				var scores = sr.ReadLine().Trim().Split('-').Select(s => Int32.Parse(s)).ToArray();
				Console.Write("Case #{0}: ", i);
				string ans = Solve(scores[0], scores[1]);

				st.Stop();
				sw.WriteLine("Case #{0}: {1}", i, ans);
				Console.WriteLine("{0} ({1}ms)", ans, st.ElapsedMilliseconds);
				i++;
			}

			sw.Close();
			sr.Close();
		}

		public static string Solve(int w, int l)
		{
			BigInteger[] steps = new BigInteger[w + 1];
			BigInteger[] stepsNext = new BigInteger[w + 1];
			BigInteger[] temp;
			//stress-free
			stepsNext[0] = 1;

			for (int i = 0; i <= w; i++) {
				steps[i] = 0;
			}

			for (int round = 0; round <= l; round++) {
				stepsNext[0] = 1;

				if (round > 0)
					stepsNext[round] = 0;

				for (int i = 1; i <= w; i++) {
					if (round > 0 && i == round)
						stepsNext[i] = stepsNext[i - 1];
					else if (round > 0 && i == round + 1)
						stepsNext[i] = steps[i];
					else
						stepsNext[i] = steps[i] + stepsNext[i - 1];
				}

				temp = steps;
				steps = stepsNext;
				stepsNext = temp;
			}

			return (steps[w] % 1000000007) + " " + (steps[l] % 1000000007);
		}
	}
}

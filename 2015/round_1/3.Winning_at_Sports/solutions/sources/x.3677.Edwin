import java.awt.Point;
import java.io.File;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class Sports {

    private static final BigInteger modulo = new BigInteger("1000000007");
    private static Map<Integer, BigInteger> factorialMap = new HashMap<Integer, BigInteger>();
    private static int maxFactorialCalculated = 1;
    private static Map<ScoreState, BigInteger> counts = new HashMap<ScoreState, BigInteger>();

    static {
        factorialMap.put(1, BigInteger.ONE);
    }

    public static BigInteger catalan(int n) {
        return factorial(2 * n).divide(factorial(n + 1)).divide(factorial(n));
    }

    public static BigInteger factorial(int n) {
        if (factorialMap.containsKey(n)) {
            return factorialMap.get(n);
        }

        BigInteger result = factorialMap.get(maxFactorialCalculated);
        BigInteger j = new BigInteger(Integer.toString(maxFactorialCalculated));
        for (int i = maxFactorialCalculated + 1; i <= n; i++) {
            j = j.add(BigInteger.ONE);
            result = result.multiply(j);
            factorialMap.put(i, result);
        }

        return result;
    }

    static class ScoreState {
        private int xLeft;
        private int yLeft;
        private int maxDiffReq;

        public ScoreState(int a, int b, int maxDiffReq) {
            this.xLeft = a;
            this.yLeft = b;
            this.maxDiffReq = maxDiffReq;
        }

        public int getxLeft() {
            return xLeft;
        }

        public int getyLeft() {
            return yLeft;
        }

        public int getMaxDiffReq() {
            return maxDiffReq;
        }

        public ScoreState win() {
            return new ScoreState(xLeft - 1, yLeft, maxDiffReq);
        }

        public ScoreState lose() {
            return new ScoreState(xLeft, yLeft - 1, maxDiffReq);
        }

        public boolean isValid(int maxA, int maxB) {
            return xLeft <= maxA && yLeft <= maxB
                    && (xLeft - yLeft < maxDiffReq);
        }

        @Override
        public boolean equals(Object o) {
            ScoreState s = (ScoreState) o;
            return xLeft == s.xLeft && yLeft == s.yLeft
                    && maxDiffReq == s.maxDiffReq;
        }

        @Override
        public int hashCode() {
            int hash = 1;
            int prime = 31;
            hash *= xLeft;
            hash *= prime * yLeft;
            hash *= prime * maxDiffReq;
            return hash;
        }
    }

    public static BigInteger stressfree(int a, int b) {
        counts = new HashMap<ScoreState, BigInteger>();

        for (int i = 0; i <= b; i++) {
            counts.put(new ScoreState(0, i, a - b), BigInteger.ONE);
        }
        for (int i = 0; i < a - b; i++) {
            counts.put(new ScoreState(i, 0, a - b), BigInteger.ONE);
        }

        for (int i = 0; i <= b; i++) {
            for (int j = 0; j <= a; j++) {
                if (j - i >= a - b && !(j == a && i == b)) {
                    counts.put(new ScoreState(j, i, a - b), BigInteger.ZERO);
                }
            }
        }

        for (int j = 1; j <= a; j++) {
            for (int i = 1; i <= b; i++) {
                if (!counts.containsKey(new ScoreState(j, i, a - b))) {
                    BigInteger v1 = counts.get(new ScoreState(j - 1, i, a - b));
                    BigInteger v2 = counts.get(new ScoreState(j, i - 1, a - b));
                    BigInteger value = v1.add(v2);
                    counts.put(new ScoreState(j, i, a - b), value);
                }
            }
        }

        return counts.get(new ScoreState(a, b, a - b));
    }

    public static String solve(Point p) {
        if (p.y == 0) {
            return "" + p.x + " " + p.x;
        }
        BigInteger stressful = catalan(p.y).mod(modulo);
        BigInteger stressfree = stressfree(p.x, p.y).mod(modulo);
        return "" + stressfree + " " + stressful;
    }

    public static void main(String[] args) throws Exception {
        File inputFile = new File(args[0]);
        Scanner s = new Scanner(inputFile);
        int numProblems = Integer.parseInt(s.nextLine());
        for (int i = 0; i < numProblems; i++) {
            String[] line = s.nextLine().split("-");

            int a = Integer.parseInt(line[0]);
            int b = Integer.parseInt(line[1]);
            Point p = new Point(a, b);

            System.out.printf("Case #%d: %s\n", i + 1, solve(p));
        }
        s.close();
    }

}

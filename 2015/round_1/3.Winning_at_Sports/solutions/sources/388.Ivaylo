/*
 * c.cpp
 *
 *  Created on: Jan 18, 2015
 *      Author: istrandjev
 */

#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <math.h>
#include <stack>
#include <deque>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <bitset>
#include <functional>
#define all(x) x.begin(),x.end()
#define mpair make_pair
using namespace std;
typedef long long ll;
typedef long double ld;
const ld epsylon = 1e-9;

const ll mod = 1000000007;

ll mem1[2048][2048];
ll mem2[2048][2048];

int maxa, maxb;
ll stress_free(int a, int b) {
  if (a == maxa && b == maxb) {
    return mem1[a][b] = 1;
  }
  ll ans = 0;
  if (a < maxa) {
    ans += ((mem1[a + 1][b] == -1) ? stress_free(a +1 , b) : mem1[a+1][b]);
  }
  if (b < maxb && b + 1 < a) {
    ans += ((mem1[a][b + 1] == -1) ? stress_free(a , b + 1) : mem1[a][b + 1]);
  }
  ans %= mod;
  return mem1[a][b] = ans;
}

ll stressfull(int a, int b) {
  if (a == maxa && b == maxb) {
    return mem2[a][b] = 1;
  }
  ll ans = 0;
  if (a < maxa && (a + 1 <= b || b == maxb)) {
    ans += ((mem2[a + 1][b] == -1) ? stressfull(a +1 , b) : mem2[a+1][b]);
  }
  if (b < maxb) {
    ans += ((mem2[a][b + 1] == -1) ? stressfull(a , b + 1) : mem2[a][b + 1]);
  }
  ans %= mod;
  return mem2[a][b] = ans;
}

pair<ll, ll> solve(int a, int b) {
  maxa = a;
  maxb = b;
  memset(mem1, -1, sizeof(mem1));
  memset(mem2, -1, sizeof(mem2));
  return make_pair(stress_free(1, 0), stressfull(0, 0));
}
int main() {
  freopen("facebook.in", "r", stdin);
  freopen("facebook.out", "w", stdout);
  int nt;
  cin >> nt;
  for (int it = 1; it <= nt; it++) {
    string temp;
    cin >> temp;
    for (int i = 0; i < (int)temp.size(); ++i) {
      if (temp[i] == '-') {
        temp[i] = ' ';
      }
    }
    istringstream in(temp);
    int a,b;
    in >> a >> b;
    pair<ll, ll> res = solve(a,b);
    cout << "Case #" << it << ": " << res.first << " " << res.second  << endl;
  }
  return 0;
}




#include <vector>
#include <iostream>
#include <sstream>
#include <math.h>
#include <sys/time.h>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cstring>
#include <fstream>
#include <set>

#define FOR(i,a,b)  for(__typeof(b) i=(a);i<(b);++i)
#define REP(i,a)    FOR(i,0,a)
#define FOREACH(x,c)   for(__typeof(c.begin()) x=c.begin();x != c.end(); x++)
#define ALL(c)      c.begin(),c.end()
#define CLEAR(c)    memset(c,0,sizeof(c))
#define SIZE(c) (int) ((c).size())

#define PB          push_back
#define MP          make_pair
#define X           first
#define Y           second

#define ULL         unsigned long long
#define LL          long long
#define LD          long double
#define II         pair<int, int>
#define DD         pair<double, double>

#define VC	    vector
#define VI          VC<int>
#define VVI         VC<VI>
#define VD          VC<double>
#define VS          VC<string>
#define VII         VC<II>
#define VDD         VC<DD>

#define DB(a)       cerr << #a << ": " << a << endl;

using namespace std;

template<class T> void print(VC < T > v) {cerr << "[";if (SIZE(v) != 0) cerr << v[0]; FOR(i, 1, SIZE(v)) cerr << "," << v[i]; cerr << "]\n";}
template<class T> string i2s(T &x) { ostringstream o; o << x; return o.str(); }
VS split(string &s, char c = ' ') {VS all; int p = 0, np; while (np = s.find(c, p), np >= 0) {if (np != p) all.PB(s.substr(p, np - p)); p = np + 1;} if (p < SIZE(s)) all.PB(s.substr(p)); return all;}

#define MOD 1000000007

#define MAX 2000

VVI s1(MAX+1,VI(MAX+1,0));
VVI s2(MAX+1,VI(MAX+1,0));

void prep(){
    s1[0][1] = 0; s1[1][0] = 1;
    for(int sum=2; sum <= 2*MAX-1; sum++){
        for(int p1=max(2,sum/2+1); p1 <= min(sum,MAX); p1++){
            int p2 = sum-p1;
            if (p2 > 0)
                s1[p1][p2] = (s1[p1][p2]+s1[p1][p2-1])%MOD;
            if (p1 > p2+1)
                s1[p1][p2] = (s1[p1][p2]+s1[p1-1][p2])%MOD;
        }
    }

    s2[0][1] = 1; s2[1][0] = 0;
    for(int sum=2; sum <= 2*MAX; sum++){
        for(int p2=(sum+1)/2; p2 <= min(sum,MAX); p2++){
            int p1 = sum-p2;
            if (p1 > 0)
                s2[p1][p2] = (s2[p1][p2]+s2[p1-1][p2])%MOD;
            if (p2 > p1)
                s2[p1][p2] = (s2[p1][p2]+s2[p1][p2-1])%MOD;
        }  
    }
}

int main(int argc, char *argv[]){
    prep();
    int T;
    scanf("%d",&T);
    REP(t,T){
        int a,b;
        scanf("%d-%d\n",&a,&b);
        printf("Case #%d: %d %d\n",t+1,s1[a][b],s2[b][b]);
    }
    return 0;
}

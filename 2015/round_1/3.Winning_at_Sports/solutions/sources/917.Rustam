#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <string.h>
#include <cstdio>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)((x).size()))
#define rep(i, N) for (int i = 0; i < N; ++i)
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();++it)
typedef long long lint;
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;
const int MOD = 1000 * 1000 * 1000 + 7;
int X, Y;

int dp1[3000][3000];
int dp2[3000][3000];

int rec1(int x, int y) {
	if (x == X && y == Y) return 1;
	if (dp1[x][y] != -1) return dp1[x][y];
	int res = 0;
	if (x + 1 <= X) {
		res += rec1(x + 1, y);
		res %= MOD;
	}
	if (y + 1 <= Y && x > y + 1) {
		res += rec1(x, y + 1);
		res %= MOD;
	}
	return dp1[x][y] = res;
}

int rec2(int x, int y) {
	if (x == X && y == Y) return 1;
	if (dp2[x][y] != -1) return dp2[x][y];
	int res = 0;
	if (x + 1 <= X && (x + 1 <= y || y == Y)) {
		res += rec2(x + 1, y);
		res %= MOD;
	}
	if (y + 1 <= Y) {
		res += rec2(x, y + 1);
		res %= MOD;
	}
	return dp2[x][y] = res;
}

void solve(int tst) {
	scanf("%d-%d", &X, &Y);
	memset(dp1, -1, sizeof(dp1));
	memset(dp2, -1, sizeof(dp2));
	int ans1 = rec1(1, 0);
	int ans2 = rec2(0, 0);
	printf("Case #%d: %d %d\n", tst, ans1, ans2);
}

int main() {
	freopen("input.txt", "r", stdin);
	int tst;
	cin >> tst;
	for (int i = 1; i <= tst; ++i) {
		solve(i);
	}
    return 0;
}

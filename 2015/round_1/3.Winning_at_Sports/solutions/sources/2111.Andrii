import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Tifuera
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {

    private static final int MOD = (int) (1e9 + 7);
    private static final int MAX_SCORE = 2000;
    int dpStressFree[][];
    int dpStressFull[][];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        String str[] = in.next().split("-");
        int myScore = Integer.parseInt(str[0]);
        int opponentScore = Integer.parseInt(str[1]);

        dpStressFree = new int[MAX_SCORE + 1][MAX_SCORE + 1];
        for (int[] arr : dpStressFree) {
            Arrays.fill(arr, -1);
        }
        for (int i = 0; i <= MAX_SCORE; i++) {
            dpStressFree[i][0] = 1;
        }

        dpStressFull = new int[MAX_SCORE + 1][MAX_SCORE + 1];
        for (int[] arr : dpStressFull) {
            Arrays.fill(arr, -1);
        }

        for (int i = 0; i <= MAX_SCORE; i++) {
            dpStressFull[0][i] = 1;
        }

        int stressFreeAnswer = runStressFree(myScore, opponentScore);
        int stressFullAnswer = runStressFull(opponentScore, opponentScore);

        out.println("Case #" + testNumber + ": " + stressFreeAnswer + " " + stressFullAnswer);
    }

    private int runStressFull(int my, int his) {
        if (dpStressFull[my][his] != -1) {
            return dpStressFull[my][his];
        }
        int cur = runStressFull(my - 1, his);
        if (my < his) {
            cur = (cur + runStressFull(my, his - 1)) % MOD;
        }

        dpStressFull[my][his] = cur;
        return cur;
    }

    private int runStressFree(int my, int his) {
        if (dpStressFree[my][his] != -1) {
            return dpStressFree[my][his];
        }
        int curRes = 0;
        if (my - 1 > his) {
            curRes = runStressFree(my - 1, his);
        }

        if (his > 0) {
            curRes = (curRes + runStressFree(my, his - 1)) % MOD;
        }

        dpStressFree[my][his] = curRes;

        return curRes;
    }

}

class InputReader {
    private BufferedReader reader;
    private String[] currentArray;

    public InputReader(InputStream inputStream) {
        reader = new BufferedReader(new InputStreamReader(inputStream));
    }


    public String next() {
        try {
            currentArray = null;
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}


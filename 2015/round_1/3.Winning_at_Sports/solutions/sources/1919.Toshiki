{-# LANGUAGE ScopedTypeVariables #-}
-- {-# LANGUAGE Rank2Types #-}
-- {-# LANGUAGE BangPatterns #-}
{-# LANGUAGE LambdaCase #-}
import Control.Monad
import Control.Applicative
import Data.List
import Data.Bits
import Data.Char
import Data.Ord
import Data.Maybe
import Data.Tuple
import qualified System.IO
import qualified Data.Map as M
import qualified Data.ByteString.Char8 as B
import Control.DeepSeq
import qualified Data.Sequence as Seq
import Data.Sequence ((<|),(|>),(><),viewl,viewr,ViewL(..),ViewR(..))

theMod = 1000000007

main = gcj $ do
  [a,b] <- map read . words . map (\case { '-' -> ' ' ; c -> c }) <$> getLine
  return . unwords . map show $ [solve (a-1) b, solve b b]

solve :: Int -> Int -> Int
solve a b = (iterate foo (repeat 1)) !! b !! (a-b)  where
  foo = scanl1 (\ x y -> (x+y)`mod`theMod) . tail

type Z = Integer
type Q = Rational
type R = Double
type S = String

fint :: (Integral a, Num b) => a -> b
fint = fromIntegral

yesno :: Bool -> S
yesno True = "yes"
yesno False = "no"

gcj solver = do
  System.IO.hSetBuffering System.IO.stdout System.IO.NoBuffering
  t <- read <$> getLine
  forM_ [1..t] $ \num -> solver >>= \ans ->
    putStrLn $ "Case #"++show num++": "++ans
    -- putStrLn ("Case #"++show num++":") >> mapM_ putStrLn ans

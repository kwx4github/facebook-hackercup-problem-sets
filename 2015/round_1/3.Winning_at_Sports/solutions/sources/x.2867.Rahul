#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>
#include <array>
#include <string>
#include <queue>
#include <array>
#include <set>
#include <iomanip>
#include <cstdio>
#include <memory>
#include <map>

using namespace std;


const int MOD = 1000000007;

map<pair<int, int>, int> StressFreeCache;
map<pair<int, int>, int> StressFulCache;


int CountStressFree(int A, int B)
{
    int answer = StressFreeCache[make_pair(A, B)];
    if (answer != 0)
    {
        return answer;
    }

    if ((A == 1) && (B == 0))
    {
        answer = 1;
    }
    else
    {
        unsigned long long count = 0;

        if ((A - B) > 1)
        {
            count += CountStressFree(A - 1, B);
        }

        if (B > 0)
        {
            count += CountStressFree(A, B - 1);
        }

        answer = (int)(count % MOD);
    }

    StressFreeCache[make_pair(A, B)] = answer;
    return answer;
}


int CountStressFul(int A, int B)
{
    int answer = StressFulCache[make_pair(A, B)];
    if (answer != 0)
    {
        return answer;
    }

    if ((A == 0) && (B == 1))
    {
        answer = 1;
    }
    else
    {
        if (A >= B)
        {
            answer = CountStressFul(A - 1, B);
        }
        else
        {
            unsigned long long count = 0;

            if (A > 0)
            {
                count += CountStressFul(A - 1, B);
            }

            if (B > 0)
            {
                count += CountStressFul(A, B - 1);
            }

            answer = (int)(count % MOD);
        }
    }

    StressFulCache[make_pair(A, B)] = answer;
    return answer;
}


void SimpleSolution(int A, int B, int& StressFree, int& StressFul)
{
    StressFree = CountStressFree(A, B);
    StressFul = CountStressFul(A, B);
}


int StressFreeDp[2001][2001];
int StressFulDp[2001][2001];

void InitComplex()
{
    StressFreeDp[1][0] = 1;

    for (int i = 2; i <= 2000; ++i)
    {
        for (int j = 0; j < i; ++j)
        {
            unsigned long long count = 0;
            if ((i - j) > 1)
            {
                count += StressFreeDp[i - 1][j];
            }

            if (j > 0)
            {
                count += StressFreeDp[i][j - 1];
            }

            count %= MOD;
            StressFreeDp[i][j] = (int) count;
        }
    }

    StressFulDp[0][0] = 1;

    for (int j = 1; j < 2000; ++j)
    {
        for (int i = 0; i <= 2000; ++i)
        {
            if (i >= j)
            {
                StressFulDp[i][j] = StressFulDp[i - 1][j];
            }
            else
            {
                unsigned long long count = 0;
                if (i > 0)
                {
                    count += StressFulDp[i - 1][j];
                }

                if (j > 0)
                {
                    count += StressFulDp[i][j - 1];
                }

                count %= MOD;
                StressFulDp[i][j] = (int) count;
            }
        }
    }
}


void ComplexSolution(int A, int B, int& StressFree, int& StressFul)
{
    StressFree = StressFreeDp[A][B];
    StressFul = StressFulDp[A][B];
}


int main()
{
    InitComplex();

    int T;
    scanf("%d", &T);

    for (int c = 1; c <= T; ++c)
    {
        int A, B;
        scanf("%d-%d", &A, &B);

        int stressFree1, stressFul1;
        SimpleSolution(A, B, stressFree1, stressFul1);

        int stressFree, stressFul;
        ComplexSolution(A, B, stressFree, stressFul);

        if ((stressFree1 != stressFree) || (stressFul1 != stressFul))
        {
            printf("NOOOOOOOOO!!!!!!!\n");
            return 0;
        }

        printf("Case #%d: %d %d\n", c, stressFree, stressFul);
    }

    return 0;
}

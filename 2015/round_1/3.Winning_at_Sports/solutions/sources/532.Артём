#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
#define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<ll> > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...

const ll MOD = 1000ll * 1000 * 1000 + 7;

const int MAXN = 3000;

ll dp[MAXN][MAXN];

map <int, ll> C;

ll getC(int n)
{
	if (n <= 1)
		return 1ll;
	if (C.count(n))
		return C[n];
	ll ans = 0;
	for (int i = 0; i < n; i++)
		ans = (ans + (getC(i) * getC(n - 1 - i)) % MOD) % MOD;
	C[n] = ans;
	return ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    dp[0][0] = 1;
    for (int i = 1; i < MAXN; i++)
    {
    	for (int j = 0; j < i; j++)
    	{
    		dp[i][j] = dp[i - 1][j];
    		if (j)
	    		dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD;
    	}
    }
    int T;
    cin >> T;
    for (int q = 0; q < T; q++)
    {
    	int a, b;
    	char c;
    	cin >> a >> c >> b;
    	cout << "Case #" << q + 1 << ": " << dp[a][b] << " " << getC(b) << endl;
    }
    #ifdef HOME
        cerr << "\ntime = " << clock() / 1000 << " ms\n";
    #endif
    return 0;
}
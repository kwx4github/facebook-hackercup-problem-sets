import java.io.*;
import java.util.StringTokenizer;

public class P3 implements Runnable {
    static final String PROBLEM_NAME = "p3";
    static final String INPUT_FILENAME = PROBLEM_NAME + ".in";
    static final String OUTPUT_FILENAME = PROBLEM_NAME + ".out";
    static final String DELIMITERS = " \t\n\r\f-";
    static final int MAX_N = 2000;
    static final long MODULO = 1000000007L;

    BufferedReader rd;
    PrintWriter wr;
    StringTokenizer tok = null;

    public static void main(String[] args) {
        new Thread(new P3()).start();
    }

    String readToken() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
            String line = rd.readLine();
            tok = new StringTokenizer(line, DELIMITERS, false);
        }
        return tok.nextToken();
    }

    String readLine() throws IOException {
        String line = rd.readLine();
        tok = null;
        return line;
    }

    int readInt() throws IOException {
        return Integer.parseInt(readToken());
    }

    private void solve() throws IOException {
        rd = new BufferedReader(new FileReader(new File(INPUT_FILENAME)));
        wr = new PrintWriter(new File(OUTPUT_FILENAME));
        preprocess();
        int t = readInt();
        for (int ti = 0; ti < t; ++ti) {
            int a = readInt();
            int b = readInt();
            String result = subsolve(a, b);
            wr.println(String.format("Case #%d: %s", ti + 1, result));
        }
        rd.close();
        wr.close();
    }

    long[][] stressFree;
    long[][] stressful;

    private void preprocess() {
        stressFree = new long[MAX_N + 1][MAX_N + 1];
        stressful = new long[MAX_N + 1][MAX_N + 1];

        for (int a = 0; a <= MAX_N; ++a) {
            for (int b = 0; b <= MAX_N; ++b) {
                stressFree[a][b] = 0;
                if ((a == 1) && (b == 0)) {
                    stressFree[a][b] = 1;
                    continue;
                }
                if (a <= b) {
                    continue;
                }
                if ((a > 0) && (a - 1 > b)) {
                    stressFree[a][b] += stressFree[a - 1][b];
                }
                if (b > 0) {
                    stressFree[a][b] += stressFree[a][b - 1];
                }
                stressFree[a][b] = stressFree[a][b] % MODULO;
            }
        }
        for (int a = 0; a <= MAX_N; ++a) {
            for (int b = 0; b <= MAX_N; ++b) {
                if ((a == 0) && (b == 0)) {
                    stressful[a][b] = 1;
                    continue;
                }
                stressful[a][b] = 0;
                if (a > b) {
                    continue;
                }
                if (a >= 1) {
                    stressful[a][b] += stressful[a - 1][b];
                }
                if ((b > 0) && (b - 1 >= a)) {
                    stressful[a][b] += stressful[a][b - 1];
                }
                stressful[a][b] = stressful[a][b] % MODULO;
            }
        }
    }

    private String subsolve(int a, int b) {
        long stressFreeResult = stressFree[a][b];
        long stressfulResult = stressful[b][b];
        return String.format("%d %d", stressFreeResult, stressfulResult);
    }

    @Override
    public void run() {
        try {
            solve();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}

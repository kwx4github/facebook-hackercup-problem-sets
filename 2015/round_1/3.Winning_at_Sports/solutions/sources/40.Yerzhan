#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXN 2022
#define MOD 1000000007

inline int add(int a, int b)
{
	a += b;
	if (a >= MOD)
		a -= MOD;
	return a;
}

int n, m;
int d[2][MAXN][MAXN];

inline void solve()
{
	scanf("%d-%d", &n, &m);
	printf("%d %d\n", d[0][n][m], d[1][m][m]);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	d[0][0][0] = 1;
	for (int i = 0; i < MAXN - 2; ++i)
		for (int j = 0; j <= i; ++j)
		{
			if (!d[0][i][j]) continue;
			if (i + 1 > j)
				d[0][i + 1][j] = add(d[0][i + 1][j], d[0][i][j]);
			if (i > j + 1)
				d[0][i][j + 1] = add(d[0][i][j + 1], d[0][i][j]);
		}

	d[1][0][0] = 1;
	for (int i = 0; i < MAXN - 2; ++i)
		for (int j = 0; j < MAXN - 2; ++j)
		{
			if (!d[1][i][j]) continue;
			if (i + 1 <= j)
				d[1][i + 1][j] = add(d[1][i + 1][j], d[1][i][j]);
			if (i <= j + 1)
				d[1][i][j + 1] = add(d[1][i][j + 1], d[1][i][j]);
		}

	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

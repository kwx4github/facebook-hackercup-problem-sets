#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <climits>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <bitset>
#include <utility>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)

typedef long long   li;
typedef long double ld;

const li M = 1000000007;

const int N = 1000000000;
const int INF = 1000000000;
const ld EPS = 1E-10;

using namespace std;

int main(int argc, char* argv[])
{
    freopen("input.txt", "rt", stdin);

    int testCases;
    cin >> testCases;

    forn(testCase, testCases)
    {
        string s;
        cin >> s;
        s[s.find('-')] = ' ';

        stringstream ss;
        ss << s;
        int a, b;
        ss >> a >> b;

        vector<vector<li>> more(a + 1, vector<li>(b + 1));
        more[1][0] = 1;

        vector<vector<li>> less(a + 1, vector<li>(b + 1));
        less[0][0] = 1;

        forn(i, a + 1)
            forn(j, b + 1)
            {
                if (more[i][j])
                {
                    if (i + 1 <= a && i + 1 > j)
                        more[i + 1][j] = (more[i + 1][j] + more[i][j]) % M;
                    if (j + 1 <= b && i > j + 1)
                        more[i][j + 1] = (more[i][j + 1] + more[i][j]) % M;
                }
                if (less[i][j])
                {
                    if (i + 1 <= a && i + 1 <= j)
                        less[i + 1][j] = (less[i + 1][j] + less[i][j]) % M;
                    if (j + 1 <= b && i <= j + 1)
                        less[i][j + 1] = (less[i][j + 1] + less[i][j]) % M;
                }
            }

        cout << "Case #" << testCase + 1 << ": " << more[a][b] << " " << less[b][b] << endl;
    }

    return 0;
}

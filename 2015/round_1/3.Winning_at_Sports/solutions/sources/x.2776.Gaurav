#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back

#define debug if(printf("GD "))
#define mod 1000000007

ll dp1[2001][2001];
ll dp2[2001][2001];

ll stressfree(int a, int b)
{
    if(b<0 || a==b)
        return 0;
    if(b==0)
        return 1;
    if(a>b)
        return (stressfree(a-1,b) + stressfree(a,b-1))%mod;
}

ll stressful(int a, int b)
{
    if(b==0)
        return 1;
    if(a>=b)
        return stressful(a-1,b);
    if(a<0 || b<0)
        return 0;
    if(b>a)
        return (stressful(a-1,b) + stressful(a,b-1))%mod;
}

int main()
{
    int t,cases=1,a,b,i,j;
    char str[20],str1[20],str2[20];
    scanf("%d",&t);
    while(t--)
    {
        scanf("%s",str);
        int len = strlen(str);
        for(i=0;str[i]!='-';i++)
            str1[i] = str[i];
        str1[i]='\0';
        i++;
        j=0;
        for(;i<len;i++)
            str2[j++] = str[i];
        str2[j]='\0';
        a=atoi(str1);
        b=atoi(str2);
        
        //ll ans2 = stressful(a,b);
        memset(dp1,0,sizeof(dp1));
        memset(dp2,0,sizeof(dp2));
        rep(i,a+1)
        {
            rep(j,b+1)
            {
                if(i==j)
                    dp1[i][j] = 0;
                if(j==0)
                    dp1[i][j] = 1;
                if(j>i)
                    dp1[i][j] = 0;
                if(i>j)
                    dp1[i][j] = (dp1[i-1][j] + dp1[i][j-1])%mod;
            }
        }
        rep(i,a+1)
        {
            rep(j,b+1)
            {
                if(j==0)
                    dp2[i][j] = 1;
                if(i>=j && i>0)
                    dp2[i][j] = dp2[i-1][j];
                if(j>i)
                    dp2[i][j] = (dp2[i-1][j] + dp2[i][j-1])%mod;
            }
        } 
        cout<<"Case #"<<cases++<<": "<<dp1[a][b]<<" "<<dp2[a][b]<<endl;
    }
    return 0;
}

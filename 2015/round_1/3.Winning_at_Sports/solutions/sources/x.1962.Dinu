package hackercode;

import com.sun.xml.internal.ws.api.pipe.NextAction;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 *
 * @author Dinnot
 */
public class HackerCode implements Runnable{

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        new Thread(null, new HackerCode(), "", 256 * (1L << 20)).start();
    }
    
    BufferedReader in;
    PrintWriter out;
    StringTokenizer tok = new StringTokenizer("");
    
    public void run() {
        try {
            long t1 = System.currentTimeMillis();
            in = new BufferedReader(new FileReader("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\input.txt"));
            out = new PrintWriter("E:\\xampp\\htdocs\\HackerCode\\src\\hackercode\\output.txt");
            Locale.setDefault(Locale.US);
            int T = readInt();
            presolve();
            for(int i = 0; i < T; i++)
                solve(i+1);
            in.close();
            out.close();
            long t2 = System.currentTimeMillis();
            System.err.println("Time = " + (t2 - t1));
        } catch (Throwable t) {
            t.printStackTrace(System.err);
            System.exit(-1);
        }
    }
    
    String readString() throws IOException {
            while (!tok.hasMoreTokens()) {
                    tok = new StringTokenizer(in.readLine());
            }
            return tok.nextToken();
    }

    String readLine() throws IOException {
        return in.readLine();
    }
    
    int readInt() throws IOException {
            return Integer.parseInt(readString());
    }

    long readLong() throws IOException {
            return Long.parseLong(readString());
    }

    double readDouble() throws IOException {
            return Double.parseDouble(readString());
    }

    int[][] pre_free = new int[2001][2001];
    int[][] pre_full = new int[2001][2001];
    int mod = 1000000007;
    //pre solve
    void presolve() {
        for(int i = 1; i <= 2000; i++) {
            for(int j = 0; j < i; j++) {
                pre_free[i][j] = stressFree(i, j);
            }
        }
        
        for(int i = 1; i <= 2000; i++) {
            for(int j = 0; j <= i; j++) {
                pre_full[i][j] = stressFull(i, j);
            }
        }
    }
    
    // solution

    void solve(int caseNr) throws IOException {
        String line = readLine();
        String[] nrs = line.split("-");
        int myscore = Integer.parseInt(nrs[0]);
        int otherscore = Integer.parseInt(nrs[1]);
        
        out.print("Case #");
        out.print(caseNr);
        out.print(": ");
        int full = 0;
        if(otherscore > 0)
            full = pre_full[otherscore][otherscore-1];
        out.println(pre_free[myscore][otherscore] + " " + full);
    }
    
    int stressFree(int my, int other) {
        if(other == 0 || my == 0 || my == 1 || my == 2)
            return 1;
        if(my - other < 2) //other needs to drop
            return pre_free[my][other-1] % mod;
        return (pre_free[my-1][other] + pre_free[my][other-1]) % mod;
    }
    
    int stressFull(int my, int other) {
        if(other == 0 || my == 0 || my == 1)
            return 1;
        if(my - other < 1) //other needs to drop
            return pre_full[my][other-1] % mod;
        return (pre_full[my-1][other] + pre_full[my][other-1]) % mod;
    }
}

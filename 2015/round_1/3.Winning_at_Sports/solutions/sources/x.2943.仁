#include <iostream>
#include <vector>
using namespace std;
typedef long long int64;
const int64 kMod = 1000000007;

struct Solver {
  void Input();
  void Solve();
  void Output(int t);
  int a, b;
  int64 sfull, sfree;
};

void Solver::Solve() {
  if (b == 0) {
    sfree = 1;
    sfull = 0;
    return;
  }

  vector<int64> dp(a+1, 0);
  dp[0] = 1;
  dp[1] = 1;
  for (int i = 0; i <= b; ++i) {
    for (int j = 1; j <= i; ++j) {
      dp[j] = (dp[j] + dp[j - 1]) % kMod;
    }
    if (i > 0)
      dp[i] = dp[i - 1];
    for (int j = i + 2; j <= a; ++j) {
      dp[j] = (dp[j] + dp[j - 1]) % kMod;
    }
  }
  sfull = dp[b];
  sfree = dp[a];
}

void Solver::Input() {
  cin >> a >> b;
  if (b < 0)
    b = -b;
}

void Solver::Output(int t) {
  cout << "Case #" << t << ": " << sfree << " " << sfull << "\n";
}

int main(void) {
  int T;
  cin >> T;
  vector<Solver> solvers(T);
  for (int i = 0; i < T; ++i)
    solvers[i].Input();
  for (int i = 0; i < T; ++i)
    solvers[i].Solve();
  for (int i = 0; i < T; ++i)
    solvers[i].Output(i + 1);
  return 0;
}

import java.awt.*;
import java.awt.geom.*;
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;

public class Sports {
	static InputStream inputStream;
	static OutputStream outputStream;
	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException	{
		int N = 2000;
		int mod = 1000000007;
		int[][] f = new int[N+1][];
		int[][] g = new int[N+1][];
		for (int i = 0; i<N+1; i++) {
			f[i] = new int[N+1];
			g[i] = new int[N+1];
		}
		
		for (int m = 1; m<=N; m++) {
			f[m][0] = 1;
			for (int n = 1; n<m-1; n++)
				f[m][n] = (f[m-1][n] + f[m][n-1]) % mod;
			if (m>1) {
				f[m][m-1] = f[m][m-2];
			}
			f[m][m] = f[m][m-1];
		}
		for (int n = 1; n<N; n++) {
			g[0][n] = 1;
			for (int m = 1; m<n; m++)
				g[m][n] = (g[m-1][n] + g[m][n-1]) % mod;
//			if (n>1)
//				g[n-1][n] = g[n-2][n];
			g[n][n] = g[n-1][n];
		}
		
		String s;
		int a = -1;
		int b = -1;
		
		inputStream = new FileInputStream("d:\\Téléchargements\\winning_at_sports.txt");
		outputStream = new FileOutputStream("d:\\output.txt");
		br = new BufferedReader(new InputStreamReader(inputStream));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
		final int MAX_NUM_CASE = readInt();
		for(int qq = 1; qq <= MAX_NUM_CASE; qq++)	{
			pw.print("Case #" + qq + ": ");
			s = nextToken();
			
			for (int i = 0; i<s.length(); i++) {
				if (s.charAt(i) == '-') {
					a = Integer.parseInt(s.substring(0, i));
					b = Integer.parseInt(s.substring(i+1, s.length()));
					break;
				}
			}
			pw.println(f[a][b] + " " + g[b][b]);
		}
		pw.close();
	}

	/* NOTEBOOK CODE */

	private static long readLong() throws IOException	{
		return Long.parseLong(nextToken());
	}

	private static double readDouble() throws IOException	{
		return Double.parseDouble(nextToken());
	}

	private static int readInt() throws IOException	{
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException	{
		while(st == null || !st.hasMoreTokens())	{
			if(!br.ready())	{
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_map>
#include <limits>
#include <functional>
#include <string>
#include <sstream>

#include <cstdlib>
#include <cassert>
#include <cstdio>

using namespace std;


void getMod(int& x,const int& mod) {
    x -= x < mod ? 0 : mod;
}

pair<int,int> solve(int n,int p) {
    const int mod = int(1e9) + 7;
    vector< vector<int> > dp(2, vector<int>(n + 2));
    int line = 0;
    int ret = 0;
    dp[0][1] = 1;
    if (n - p == 1) ret = 1;
    for (int i = 2; i <= n; i++, line = 1 - line) {
        for (int j = 1; j <= i; j++) {
            dp[1 - line][j] = dp[line][j - 1];
            if (j > i - j) {
                dp[1 - line][j] += dp[line][j];
                getMod(dp[1 - line][j], mod);
            }
        }

        ret += dp[1 - line][n - p];
        getMod(ret, mod);
    }


    return {dp[line][p], ret};
}

int main() {
    assert (freopen("test.in", "r", stdin) && freopen("test.out", "w",stdout));
    ios::sync_with_stdio(0);
    int t;
	cin >> t;
    cin.get();
	auto t0 = std::chrono::system_clock::now();
    for (int i = 1;i <= t; i++) {
        string s;
        int a, b;
        getline(cin, s);
	    sscanf(s.c_str(),"%d-%d",&a,&b);
        pair<int,int> ans = solve(a + b, a);
        cout << "Case #" << i << ": " << ans.first << " " << ans.second << "\n";
    
    }
    
	auto t1 = std::chrono::system_clock::now();
	auto d = std::chrono::duration_cast<std::chrono::duration<double>>(t1 - t0);
	cerr << d.count() << "\n";
}

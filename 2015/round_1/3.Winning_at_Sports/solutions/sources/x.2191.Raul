import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.StringTokenizer;

import moi.libreria.Trie.TrieNode;

public class Main {
	
	static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer datos = new StringTokenizer("");
	
	public static String next() throws IOException {
		while (!datos.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null)
				return null;
			datos = new StringTokenizer(s);
		}
		return datos.nextToken();
	}
	
	public static Integer nextInt() throws IOException {
		String s = next();
		return s == null ? null : Integer.parseInt(s);
	}
	public static Long nextLong() throws IOException {
		String s = next();
		return s == null ? null : Long.parseLong(s);
	}
	
	static Integer[][] memo;
	static int score1;
	static int score2;
	
	public static void main(String[] args) throws IOException 
	{
		//in = new BufferedReader(new FileReader("C:\\Users\\Marilu\\Downloads\\autocomplete.txt"));
		int t = nextInt();
		for(int c=1;c<=t;c++){
			StringTokenizer datos = new StringTokenizer(next(), "-");
			score1 = Integer.parseInt(datos.nextToken());
			score2 = Integer.parseInt(datos.nextToken());
			memo = new Integer[score1+1][score2+1];
			int r1 = solve1(1,0);
			memo = new Integer[score1+1][score2+1];
			int r2 = solve2(0,1);
			out.println("Case #"+c+": "+ r1 + " " + r2);
		}
		out.flush();
	}
	
	public static int solve1(int s1, int s2)
	{
		if(s1>score1) return 0;
		if(s2>score2) return 0;
		if(s2>=s1) return 0;
		if(s1==score1 && s2==score2) return 1;
		if(memo[s1][s2] != null) return memo[s1][s2];
		return memo[s1][s2] = (solve1(s1+1,s2) + solve1(s1, s2+1)) % 1000000007;
	}
	
	public static int solve2(int s1, int s2)
	{
		if(s1>score1) return 0;
		if(s2>score2) return 0;
		if(s1>s2 && s2!=score2) return 0;
		if(s1==score1 && s2==score2) return 1;
		if(memo[s1][s2] != null) return memo[s1][s2];
		return memo[s1][s2] = (solve2(s1+1,s2) + solve2(s1, s2+1)) % 1000000007;
	}
}
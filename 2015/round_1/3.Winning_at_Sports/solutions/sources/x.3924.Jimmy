#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <map>
#include <set>
#include <tuple>
using namespace std;

// cross_imp(f, v...) means "do `f` for each element of cartesian product of v..."
template<typename F>
inline void cross_imp(F f) {
    f();
}
template<typename F, typename H, typename... Ts>
inline void cross_imp(F f, std::vector<H> const& h,
                           std::vector<Ts> const&... t) {
    for(H const& he: h)
        cross_imp([&](Ts const&... ts){
                      f(he, ts...);
                  }, t...);
}

template<typename... Ts>
std::vector<std::tuple<Ts...>> cross(std::vector<Ts> const&... in) {
    std::vector<std::tuple<Ts...>> res;
    cross_imp([&](Ts const&... ts){
                  res.emplace_back(ts...);
              }, in...);
    return res;
}

class HackerCup{

	public:
		vector <string> aPrefix;
		vector <string> aWord;

		int buildCase(){
			int T;
	        	cin >> T;
        		int caseID = 0;
		        while(T--){
                    cout << "Case #" << ++caseID << ": ";
		
                    int Home;
                    int Away;
                    string stream;
                    
                    cin >> stream;
                    
                    vector<string> aScores;
                    split(stream, '-', aScores);
                    
                    Home = atoi(aScores[0].c_str());                 
                    Away = atoi(aScores[1].c_str());                 
                    
                    this->playGame(Home,Away);

				
                    //cout << Home << "-" << Away << endl;

                }
            return 0;

		}
        
        int playGame(int Home, int Away){
            int inPlayHome = 0;
            int inPlayAway = 0;
            vector<int> vHome;
            vector<int> vAway;
            for(int i = 0; i < Away+1; i++){
                vAway.push_back(i);
            }
            for(int i = 0; i < Home+1; i++){
                vHome.push_back(i);
            }
            
            int stressFree = 0;
            int stressFull = 0;
            bool lastWasStress = 0;
            auto res = cross(vHome,vAway);
            for(auto& a: res) {
                if(std::get<0>(a) > std::get<1>(a)){
                    
                    stressFree++;
                    lastWasStress = 0;
                    
                }else if(std::get<1>(a) > std::get<0>(a) ){
                    if(!lastWasStress){
                        stressFull++;                        
                    }
                    lastWasStress = 1;
                }else{
                    lastWasStress = 0;
                }
                //std::cout << '{' << std::get<0>(a) << ',' <<
                 //                   std::get<1>(a) << "}";
                //std::cout << '{' << std::get<1>(a) << ',' <<
                  //                  std::get<0>(a) << "}\n";
            }
            std::cout << "" << stressFree << " " << stressFull << endl;/*
            
            for(vector<int>::const_iterator i1 = vHome.begin(); i1 != vHome.end(); ++i1)
                for(vector<int>::const_iterator i2 = vAway.begin(); i2 != vAway.end(); ++i2){
                    cout << "[" << *i1 << "=" << *i2 << "]" << endl;
                    if(*i1 > *i2){                    
                        stressFree++;
                        lastWasStress = 0;
                        
                    }else if(*i2 > *i1 ){
                        if(!lastWasStress){
                            stressFull++;                        
                        }
                        lastWasStress = 1;
                    }else{
                        lastWasStress = 0;
                    }
                }
            std::cout << "stressFree:" << stressFree << "stressFull" << stressFull << endl;*/
            /*
            for(int i = 0; i < Away; i++){
                for(int j = 0; j < Home; i++){
                    cout << " :: " << j << "-" << i << endl;
                                
                    inPlayHome++;
                    
                }
                inPlayAway++;
            }*/
        }
        
       void split(const string& s, char c,
           vector<string>& v) {
           string::size_type i = 0;
           string::size_type j = s.find(c);

           while (j != string::npos) {
              v.push_back(s.substr(i, j-i));
              i = ++j;
              j = s.find(c, j);

              if (j == string::npos)
                 v.push_back(s.substr(i, s.length()));
           }
        }
        
};
int main(){

	freopen("input.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
	HackerCup Winning;
	return Winning.buildCase();

}


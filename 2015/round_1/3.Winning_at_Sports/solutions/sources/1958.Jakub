#include <bits/stdc++.h>
using namespace std;
#define REP(i,a,b) for(int i = (a); i <= (b); ++i)
#define FOR(i,n) REP(i, 0, int(n)-1)
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define dbg(v) cerr << #v << " = " << (v) << endl;
#define FOREACH(i,t) for(auto i = t.begin(); i != t.end(); ++i)
#define fi first
#define se second
#define M 1000000007
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef long long ll;
#define MAXN 2007
ll freeV[MAXN][MAXN];
bool foundFree[MAXN][MAXN];
ll countFree(int mine, int opp){
    if (mine < 0 || opp < 0)
        return 0;
    if (foundFree[mine][opp])
        return freeV[mine][opp];
    foundFree[mine][opp] = true;
    if (mine == 0 && opp == 0){
        freeV[mine][opp] = 1;
        return 1;
    }
    if (mine <= opp){
        freeV[mine][opp] = 0;
        return 0;
    }
    freeV[mine][opp] = countFree(mine - 1, opp) + countFree(mine, opp - 1);
    freeV[mine][opp] %= M;
    return freeV[mine][opp];
}
ll stress[MAXN][MAXN];
bool foundStress[MAXN][MAXN];
ll countStress(int mine, int opp){
    if (mine < 0 || opp < 0)
        return 0;
    if (foundStress[mine][opp])
        return stress[mine][opp];
    foundStress[mine][opp] = true;
    if (mine == 0 && opp == 0){
        stress[mine][opp] = 1;
        return 1;
    }
    if (mine > opp){
        stress[mine][opp] = 0;
        return 0;
    }
    stress[mine][opp] = countStress(mine - 1, opp) + countStress(mine, opp - 1);
    stress[mine][opp] %= M;
    return stress[mine][opp];
}

ll stressfull(int mine, int opp){
    if (opp == 0){
        return 1;
    }
    opp--;
    ll res = 0;
    for(int i = 0; i <= opp; i++){
        res += countStress(i, opp);
        res %= M;
    }
    return res;
}
int main(){
    int t;
    scanf("%d",&t);
    FOR(i, t){
        printf("Case #%d: ", i+1);
        int a, b;
        scanf("%d%*c%d", &a,&b);
        printf("%lld %lld\n", countFree(a,b), stressfull(a,b));
    }
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

long long stressFree[2005][2005];
long long stressFul[2005][2005];

long long MOD = 1000000007;

long long findStressFree(int me, int opponent){
	if(me==0 && opponent == 0)
		return 1;
	if(me < 0 || opponent < 0)
		return 0;
	
	if(stressFree[me][opponent]!=-1)
		return stressFree[me][opponent];

	if(me > opponent)
	{
		return stressFree[me][opponent] = (findStressFree(me-1,opponent)%MOD + findStressFree(me,opponent-1)%MOD)%MOD;
	}
	else return stressFree[me][opponent]=0;

}

int finalOpponent;

long long findStressFul(int me, int opponent){
	if(me==0 && opponent == 0)
		return 1;
	if(me < 0 || opponent < 0)
		return 0;
	
	if(stressFul[me][opponent]!=-1)
		return stressFul[me][opponent];

	if(me > opponent && opponent == finalOpponent){
		return stressFul[me][opponent] = (findStressFul(me-1,opponent)%MOD + findStressFul(me,opponent-1)%MOD)%MOD;		
	}

	if(me <= opponent)
	{
		return stressFul[me][opponent] = (findStressFul(me-1,opponent)%MOD + findStressFul(me,opponent-1)%MOD)%MOD;
	}
	else return stressFul[me][opponent]=0;
}

int main(){

	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	int t,c=1,i,j;
	int me,opponent;
	memset(stressFree,-1,sizeof(stressFree));
	for(i=0;i<2002;i++)
		for(j=0;j<2002;j++){
			findStressFree(i,j);
		}


	scanf("%d",&t);

	while(t--){
		memset(stressFul,-1,sizeof(stressFul));
		printf("Case #%d: ",c++);
		scanf("%d-%d",&me,&opponent);
		finalOpponent = opponent;

		printf("%lld %lld\n", stressFree[me][opponent], findStressFul(me,opponent));
	}
	return 0;
}
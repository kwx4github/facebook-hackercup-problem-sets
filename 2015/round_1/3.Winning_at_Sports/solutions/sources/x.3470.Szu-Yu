#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz size()
#define For(i, st, en)  for(int i=(st); i<=(int)(en); i++)
#define Forn(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)

template <class _T> inline _T sqr(const _T& x) { return x * x; }
template <class _T> inline string tostr(const _T& a) { ostringstream os(""); os << a; return os.str(); }
template <class _T> inline istream& operator << (istream& is, const _T& a) { is.putback(a); return is; }

typedef long double ld;

// Constants
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-11;

// Types
typedef signed   long long i64;
typedef unsigned long long u64;
typedef set < int > SI;
typedef vector < ld > VD;
typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < string > VS;
typedef map < string, int > MSI;
typedef pair < int, int > PII;



#define MAX 2001
#define MOD 1000000007

int score1, score2;

long long stress_free[MAX][MAX];
long long stressful[MAX][MAX];

void init() {
  for (int i = 0; i < MAX; ++i) {
    for (int j = 0; j < MAX; ++j) {
      stress_free[i][j] = -1;
      stressful[i][j] = -1;
    }
  }
  stress_free[1][0] = 1;
  stressful[0][1] = 1;
}

bool isStressFree(int i, int j) {
  return i >= 0 && j >= 0 && i > j;
}

long long computeStressFree(int i, int j) {
  if (stress_free[i][j] == -1) {
    long long cnt = 0;
    if (isStressFree(i-1, j)) cnt += computeStressFree(i-1, j);
    if (isStressFree(i, j-1)) cnt += computeStressFree(i, j-1);
    //cout << i << " " << j << ": " << cnt << endl;
    stress_free[i][j] = cnt % MOD;
  }

  return stress_free[i][j];
}

bool isStressful(int i, int j, int final_j) {
  if (i < 0 || j < 0) return false;
  if (j == final_j) return true;
  return i <= j;
}

long long computeStressful(int i, int j, int final_j) {
  if (stressful[i][j] == -1) {
    long long cnt = 0;
    if (isStressful(i-1, j, final_j)) cnt += computeStressful(i-1, j, final_j);
    if (isStressful(i, j-1, final_j)) cnt += computeStressful(i, j-1, final_j);
    //cout << i << " " << j << ": " << cnt << endl;
    stressful[i][j] = cnt % MOD;
  }

  return stressful[i][j];
}

void run() {
  char skip;
  cin >> score1 >> skip >> score2;
  //cout << score1 << " " << score2 << endl;
  cout << computeStressFree(score1, score2) << " " << computeStressful(score1, score2, score2);
}

int main() {
  int caseN;
  cin >> caseN;

  init();
  for (int cc = 1; cc <= caseN; ++cc) {
    cout << "Case #" << cc << ": ";
    run();
    cout << endl;
  }

  return 0;
}

#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

const int MOD = (int)1e+9 + 7;
const int MAXN = 2003;

int f[MAXN][MAXN], g[MAXN][MAXN];
int n, m;

void add(int &x, const int d)
{
    x += d;
    if (x >= MOD) {
        x -= MOD;
    }
}

void solve()
{
    memset(f, 0, sizeof(f));
    memset(g, 0, sizeof(g));
    assert(scanf("%d-%d", &n, &m) == 2);

    f[0][0] = 1;
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (i) add(f[i][j], f[i - 1][j]);
            if (j) add(f[i][j], f[i][j - 1]);
        }
    }

    g[0][0] = 1;
    for (int i = 0; i <= m; ++i) {
        for (int j = 0; j < i; ++j) {
            if (i) add(g[i][j], g[i - 1][j]);
            if (j) add(g[i][j], g[i][j - 1]);
        }
    }

    int ans = 0;
    for (int i = 0; i <= n; ++i) {
        add(ans, g[m][i]);
    }
    cerr << n << " " << m << endl;
    cout << f[n][m] << " " << ans;
}

int main(int /* argc */, char** /* argv */)
{
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    #endif

    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        cout << "Case #" << test << ": ";
        solve();
        cout << endl;
    }

    fprintf(stderr, "Time execute: %.3lf sec\n", clock() / (double)CLOCKS_PER_SEC);
    return 0;
}

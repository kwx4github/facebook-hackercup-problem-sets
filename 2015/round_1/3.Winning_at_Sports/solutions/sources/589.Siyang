#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<ll> vll;
typedef vector<string> vs;
typedef pair<int,int> pii;
#define range(i,a,b) for(auto i=(a);i<b;i++)
#define rep(i,n) range(i,0,n)
#define all(c) begin(c),end(c)
#define CLR(i,x) memset(i,x,sizeof(i))
#define clr0(i) CLR(i,0)
#define clr1(i) CLR(i,-1)
#define bit(x,i) ((x>>i)&1)
#define M(x) ((x)%MOD)
#define acc(f,x,y) x=f(x,y)
#define fst first
#define snd second
#define tup make_tuple

#define N 2005
#define MOD 1000000007

int ways[N][N];

pii solve()
{
	int a, b;
	cin >> a >> b;
	b = -b;

	rep(i, a + 1) rep(j, b + 1)
	{
		if(i == 0 && j == 0) ways[i][j] = 1;
		else if(i > j)
		{
			ways[i][j] = M((i > 0 ? ways[i - 1][j] : 0) + (j > 0 ? ways[i][j - 1] : 0));
		}
	}
	int good = ways[a][b];
	clr0(ways);

	rep(i, a + 1) rep(j, b + 1)
	{
		if(i == 0 && j == 0) ways[i][j] = 1;
		else if(i <= j || j == b)
		{
			ways[i][j] = M((i > 0 ? ways[i - 1][j] : 0) + (j > 0 ? ways[i][j - 1] : 0));
		}
	}
	int bad = ways[a][b];
	clr0(ways);

	return {good, bad};
}

int main()
{
	ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	rep(i, t)
	{
		pii ans = solve();
		cout << "Case #" << i + 1 << ": " << ans.fst << " " << ans.snd << endl;
	}
	return 0;
}

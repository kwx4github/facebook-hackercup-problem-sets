import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class C {

	static int mod = 1000000007;
	static int x, y;
	static int[][] dp;

	static int solve(int a, int b) {
		if (a == x && b == y)
			return 1;
		if (dp[a][b] != -1)
			return dp[a][b];
		int ans = 0;
		if (b + 1 < a && b < y)
			ans = solve(a, b + 1) % mod;
		if (a < x)
			ans += solve(a + 1, b) % mod;
		return dp[a][b] = ans;
	}

	static int slove(int a, int b) {
		if (a == x && b == y)
			return 1;
		if (dp[a][b] != -1)
			return dp[a][b];
		int ans = 0;
		if (b < y)
			ans = slove(a, b + 1) % mod;
		if (a < x && (a + 1 <= b || b == y))
			ans += slove(a + 1, b) % mod;
		return dp[a][b] = ans;
	}

	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new FileReader("C.in"));
		out = new PrintWriter("C.out");
		sc = new StringTokenizer("");
		int tc = nxtInt();
		for (int i = 1; i <= tc; i++) {
			String[] sp = nxtTok().split("-");
			x = Integer.parseInt(sp[0]);
			y = Integer.parseInt(sp[1]);
			dp = new int[x + 1][y + 1];
			for (int[] a : dp)
				Arrays.fill(a, 0);
			dp[x][y] = 1;
			for (int a = x; a > -1; a--) {
				for (int b = y; b > -1; b--) {
					if (b + 1 < a && b < y)
						dp[a][b] = dp[a][b + 1] % mod;
					if (a < x)
						dp[a][b] += dp[a + 1][b] % mod;
				}
			}
			out.print("Case #" + i + ": " + (dp[0][0] % mod) + " ");
			dp = new int[x + 1][y + 1];
			for (int[] a : dp)
				Arrays.fill(a, 0);
			dp[x][y] = 1;
			for (int a = x; a > -1; a--) {
				for (int b = y; b > -1; b--) {
					if (b < y)
						dp[a][b] = dp[a][b + 1] % mod;
					if (a < x && (a + 1 <= b || b == y))
						dp[a][b] += dp[a + 1][b] % mod;
				}
			}
			out.println(dp[0][0] % mod);
		}
		br.close();
		out.close();
	}

	static BufferedReader br;
	static StringTokenizer sc;
	static PrintWriter out;

	static String nxtTok() throws IOException {
		while (!sc.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			sc = new StringTokenizer(s.trim());
		}
		return sc.nextToken();
	}

	static int nxtInt() throws IOException {
		return Integer.parseInt(nxtTok());
	}

	static long nxtLng() throws IOException {
		return Long.parseLong(nxtTok());
	}

	static double nxtDbl() throws IOException {
		return Double.parseDouble(nxtTok());
	}

	static int[] nxtIntArr(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nxtInt();
		return a;
	}

	static long[] nxtLngArr(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nxtLng();
		return a;
	}

	static char[] nxtCharArr() throws IOException {
		return nxtTok().toCharArray();
	}
}
#include<cstdio>
#include<iostream>
#include<queue>
#include<stack>
#include<vector>
#include<string>
#include<algorithm>
#include<map>
#include<sstream>
#include<cmath>
#include<cctype>
#include<cassert>
#include<cstring>
#include<cstdlib>

using namespace std;

int md = 1000000007;

int dp1[2005][2005];
int dp2[2005][2005];
int n1, n2;

int memo1(int a, int b) {
	if (a == n1 && b == n2) return 1;
	if (dp1[a][b] != -1) return dp1[a][b];

	int res = 0;
	if (a != n1) {
		int k = memo1(a + 1, b);
		res += k;
		res %= md;
	}

	if (b != n2 && b+1 < a) {
		int k = memo1(a, b + 1);
		res += k;
		res %= md;
	}

	return dp1[a][b] = res;
}

int memo2(int a, int b) {
	if (a == n1 && b == n2) return 1;
	if (dp2[a][b] != -1) return dp2[a][b];

	int res = 0;
	if (b != n2) {
		int k = memo2(a, b + 1);
		res += k;
		res %= md;
	}

	if (a < b || b == n2) {
		int k = memo2(a + 1, b);
		res += k;
		res %= md;
	}

	return dp2[a][b] = res;
}

int main() {
	int test, cases = 1;
	cin >> test;
	for (cases = 1; cases <= test; cases++) {
		string str;
		cin >> str;
		for (int i = 0; i < str.size(); i++)
			if (str[i] == '-') str[i] = ' ';
		stringstream ss(str);
		ss >> n1 >> n2;

		for (int i = 0; i <= n1; i++)
			for (int j = 0; j <= n2; j++)
				dp1[i][j] = dp2[i][j] = -1;

		int res1 = memo1(0, 0);
		int res2 = memo2(0, 0);

		cout << "Case #" << cases << ": " << res1 << " " << res2 << endl;
	}
	return 0;
}

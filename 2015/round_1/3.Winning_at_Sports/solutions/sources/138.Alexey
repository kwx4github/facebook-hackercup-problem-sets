#include <cassert>

#include <iostream>
#include <string>
#include <vector>

std::pair<uint32_t, uint32_t> parse_scores(const std::string& scores) {
  uint32_t x = 0, y = 0;
  bool is_first = false;
  for (char letter : scores) {
    if (letter == '-') {
      assert(!is_first);
      is_first = true;
    } else {
      assert(isdigit(letter));
      if (!is_first) {
        x = (10 * x + (letter - '0'));
      } else {
        y = (10 * y + (letter - '0'));
      }
    }
  }
  return {x, y};
}

const uint64_t kModulo = 1000000000 + 7;

uint64_t calc_stress_free_ways(uint32_t x, uint32_t y) {
  assert(x > y && x > 0);
  std::vector < std::vector < uint64_t > > ways(x + 1,
      std::vector < uint64_t > (y + 1, 0));
  ways[1][0] = 1;
  for (uint64_t i = 0; i <= x; i++) {
    for (uint64_t j = 0; j <= y; j++) {
      uint64_t current_ways = ways[i][j];
      if (current_ways > 0) {
        if (i < x) {
          ways[i + 1][j] = (ways[i + 1][j] + current_ways) % kModulo;
        }
        if(j < y && j + 1 < i) {
          ways[i][j + 1] = (ways[i][j + 1] + current_ways) % kModulo;
        }
      }
    }
  }
  return ways[x][y];
}

uint64_t calc_stressfull_ways(uint32_t x, uint32_t y) {
  assert(x > y && x > 0);
  std::vector < std::vector < uint64_t > > ways(x + 1,
      std::vector < uint64_t > (y + 1, 0));
  ways[0][0] = 1;
  for (uint64_t i = 0; i <= x; i++) {
    for (uint64_t j = 0; j <= y; j++) {
      uint64_t current_ways = ways[i][j];
      if (current_ways > 0) {
        if (i < x && i < j) {
          ways[i + 1][j] = (ways[i + 1][j] + current_ways) % kModulo;
        }
        if(j < y) {
          ways[i][j + 1] = (ways[i][j + 1] + current_ways) % kModulo;
        }
      }
    }
  }
  return ways[y][y];
}

void solve() {
  std::string scores;
  std::cin >> scores;
  auto p = parse_scores(scores);
  uint32_t x = p.first, y = p.second;
  uint64_t stress_free_ways = calc_stress_free_ways(x, y);
  uint64_t stressfull_ways = calc_stressfull_ways(x, y);
  std::cout << stress_free_ways << " " << stressfull_ways;
}

int main() {
  uint32_t tests;
  std::cin >> tests;
  for (uint32_t test = 1; test <= tests; test++) {
    std::cout << "Case #" << test << ": ";
    solve();
    std::cout << std::endl;
  }
  return 0;
}

#include <iostream>
using namespace std;

#define inverse(i) fastpow(i, PRIME - 2)

const int PRIME = 1000000007;

int fastpow(int base, int pow) {
	long long res = 1;
	long long temp = base;
	while (pow) {
		if (pow & 1) {
			res = res * temp % PRIME;
		}
		temp = temp * temp % PRIME;
		pow >>= 1;
	}
	return res;
}

int C(int n, int k) {
	long long res = 1;
	if (n - k < k) {
		k = n - k;
	}
	for (int i = 1; i <= k; i++) {
		res = res * (n - i + 1) % PRIME;
		res = res * inverse(i) % PRIME;
	}
	return res;
}

int Catalan(int n, int k) {
	long long res = C(n + k, k);
	res = res * (n - k + 1) % PRIME;
	res = res * inverse(n + 1) % PRIME;
	return res;
}

int main() {
	int T;
	cin.sync_with_stdio(false);
	cin >> T;
	for (int cas = 1; cas <= T; cas++) {
		char hyphen;
		int n, k;
		cin >> n >> hyphen >> k;
		cout << "Case #" << cas << ": " << Catalan(n - 1, k) << " " << Catalan(k, k) << endl;
	}
}
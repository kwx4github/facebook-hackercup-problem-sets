#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <map>
#include <queue> // push, front, pop
#include <sstream>
#include <string>
#include <stack> // push, top, pop
#include <set>
#include <vector>
#include <list> // list.insert(it, data); data inserted before it..
#include <iomanip>
#include <stdio.h>
#include <string.h> 

#define PI 3.14159265358979323846264338327950288
#define fill_(x,v) memset(x,v,sizeof(x))
#define min(x,y) (((x)>(y)) ? (y) :(x))
#define max(x,y) (((y)>(x)) ? (y) :(x))
#define Pi  3.1415926535
#define ll long long

using namespace std;

ifstream fin("c:\\tmp\\winning_at_sports.txt");
ofstream fout("c:\\tmp\\out.txt");

long long dp[2001][2001];
const long long MOD = 1000000007LL;

long long getSFree(int s1, int s2) {
    if (s1 < 0 || s2 < 0) return 0;
    if (dp[s1][s2] > -1) return dp[s1][s2];
    long long& ret = dp[s1][s2];
    ret = 0;
    if (s1 > s2) {
       ret = (getSFree(s1 - 1, s2) + getSFree(s1, s2 - 1)) % MOD; 
    }
    return ret;
}

long long getSFull(int s1, int s2, int f) {
    if (s1 < 0 || s2 < 0) return 0;
    if (dp[s1][s2] > -1) return dp[s1][s2];
    long long& ret = dp[s1][s2];
    ret = 0;
    if (s2 < f) {
        if (s1 <= s2) {
           ret = (getSFull(s1 - 1, s2, f) + getSFull(s1, s2 - 1, f)) % MOD; 
        }
    } else if (s2 == f) {
           ret = (getSFull(s1 - 1, s2, f) + getSFull(s1, s2 - 1, f)) % MOD; 
    }    
    return ret;
}

bool run() {
  int score1, score2;
  char c;
  fin >> score1 >> c >> score2;
  //cout<<score1<<c<<score2<<endl;
  
  /*string s;
  fin >> s;
  for (int i = 0; i < s.length(); i++) {
      if (s[i] == '-') s[i] = ' ';
  }
  istringstream ss(s);
  ss >> score1 >> score2;
  cout<<"approach 2"<<score1<<' '<<score2<<endl;*/
  
  fill_(dp, -1);
  dp[0][0] = 1;
  long long ret1 = getSFree(score1, score2);
  fill_(dp, -1);
  dp[0][0] = 1;
  long long ret2 = getSFull(score1, score2, score2);
  cout<<ret1<<' '<<ret2<<endl;
  fout<<ret1<<' '<<ret2<<endl;
  return true;
}

int main() {
	int N;
	fin >> N;
	//char inp[1000];
  //fin.getline(inp, 1000);
  
	for( int n = 1; n <= N; n++){
		//fout<<"Case #"<<n<<": ";
		
		cout<<"Case #"<<n<<": ";
		fout<<"Case #"<<n<<": ";
		bool ret = run();
		//fout<<"Case #"<<n<<": "<<(ret? "YES" : "NO")<<endl;
		//printf("Case #%d: %d\n", n, ret);
		//fout << fixed;
		//fout<<"Case #"<<n<<": "<<setprecision(10)<<ret<<endl;
   }
   return 0;
}

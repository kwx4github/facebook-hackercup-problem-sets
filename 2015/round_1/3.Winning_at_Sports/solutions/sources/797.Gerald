#undef NDEBUG
#ifdef ssu1
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <typeinfo>
#include <limits>

using namespace std;

const int kMaxS = 2300, kMod = 1000000007;

int dp[kMaxS][kMaxS];
int dpe[kMaxS][kMaxS][2];

void Init() {
  dp[0][0] = 1;
  for (int i = 0; i + 1 < kMaxS; ++i) {
    for (int j = 0; j + 1 < kMaxS; ++j) {
      if (i + 1 > j) {
        dp[i + 1][j] += dp[i][j];
        dp[i + 1][j] %= kMod;
      }
      if (i > j + 1) {
        dp[i][j + 1] += dp[i][j];
        dp[i][j + 1] %= kMod;
      }
    }
  }
  dpe[0][0][0] = 1;
  for (int i = 0; i + 1 < kMaxS; ++i) {
    for (int j = 0; j + 1 < kMaxS; ++j) {
      for (int lst = 0; lst < 2; ++lst) {
        if (i + 1 >= j) {
          dpe[i + 1][j][0] += dpe[i][j][lst];
          dpe[i + 1][j][0] %= kMod;
        }
        if (i >= j + 1) {
          dpe[i][j + 1][1] += dpe[i][j][lst];
          dpe[i][j + 1][1] %= kMod;
        }
      }
    }
  }
}

void SolveTest(int test_number) {
  printf("Case #%d: ", test_number);
  int a, b;
  scanf("%d-%d", &a, &b);
  int ans1 = dp[a][b], ans2 = 0;
  for (int pa = 0; pa <= b; ++pa) {
    ans2 += dpe[b][pa][0];
    ans2 %= kMod;
  }
  cout << ans1 << " " << ans2 << endl;
  // fprintf(stderr, "Case %d time: %f\n", test_number, ((double)clock()) / CLOCKS_PER_SEC);
}

int main() {
#ifdef ssu1
  assert(freopen("input.txt", "r", stdin));
#endif

  Init();

  int test_number;
  cin >> test_number;
  for (int i = 1; i <= test_number; ++i) {
    SolveTest(i);
  }

#ifdef ssu1
  cerr << "\nTime = " << ((double)clock()) / CLOCKS_PER_SEC << endl;
#endif    
  return 0;
}


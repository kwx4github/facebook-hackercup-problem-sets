#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define in_str(b) scanf("%s",(b))
#define in_int1(a) scanf("%d",&(a))
#define in_int2(a,b) scanf("%d%d",&(a),&(b))
#define in_int3(a,b,c) scanf("%d%d%d",&(a),&(b),&(c))
#define in_int4(a,b,c,d) scanf("%d%d%d%d",&(a),&(b),&(c),&(d))
#define so(a) sort((a).begin(), (a).end())
#define rso(a) sort((a).rbegin(), (a).rend())
#define mp(a,b) make_pair(a,b)
#define MOD 1000000007
#define INF 2000000000
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;

int target1, target2;

int dp[2010][2010];

// stress-free
int doit1(int f, int s)
{
	if (f == target1 && s == target2) return 1;
	int& res = dp[f][s];
	if (res == -1)
	{
		res = 0;
		if (f < target1)
		{
			res += doit1(f + 1, s);
			if (res > MOD) res -= MOD;
		}

		if (s + 1 < f && s < target2)
		{
			res += doit1(f, s + 1);
			if (res > MOD) res -= MOD;
		}
	}

	return res;
}

// stressful
int doit2(int f, int s)
{
	if (f == target1 && s == target2) return 1;
	int& res = dp[f][s];
	if (res == -1)
	{
		res = 0;
		if (f < target1 && (f<s || s == target2))
		{
			res += doit2(f + 1, s);
			if (res > MOD) res -= MOD;
		}

		if (s < target2)
		{
			res += doit2(f, s + 1);
			if (res > MOD) res -= MOD;
		}
	}

	return res;
}

void Solve()
{
	int i, j, k, n, m;
	int tests;
	in_int1(tests);
	for (int test = 1; test <= tests; test++)
	{
		printf("Case #%d: ", test);
		scanf("%d-%d", &target1, &target2);
		memset(dp, -1, sizeof(dp));
		printf("%d ", doit1(0,0));
		memset(dp, -1, sizeof(dp));
		printf("%d\n", doit2(0, 0));
	}
}

int main(int argc, char **argv)
{
#ifdef __LOCAL_RUN__
#define _MAX_BUF_SIZE 32
	int _i = 0;
	char *_buf = new char[_MAX_BUF_SIZE];

	FILE *res_output = freopen("output.txt", "wt", stdout);
	if (argc > 1)
	{
		freopen(argv[1], "rt", stdin);
		Solve();
	}
	else
	{
		while (true)
		{
			string _suffix = string(itoa(_i, _buf, 10)) + string(".txt");
			FILE *res_input = freopen((string("input-") + _suffix).c_str(), "rt", stdin);
			if (!res_input)
			{
				// the end
				break;
			}
			if (_i) printf("\n\n");
			printf("==== Case #%d =====\n", _i);
			Solve();
			_i++;
			}
		}
#else
	Solve();
#endif
	return 0;
}
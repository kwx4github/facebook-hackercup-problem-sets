#include <cstdio>
#include <cassert>
#include <algorithm>
#include <memory.h>
using namespace std;

const int N = 2050;
int D[N][N];
int F[N][N];

const int MOD = 1000 * 1000 * 1000 + 7;

void solve(int cs)
{
    int n, m;
    char c;
    scanf(" %d%c%d", &n, &c, &m);
    assert(c == '-');
    assert(n > m);
    memset(D, 0, sizeof(D));
    memset(F, 0, sizeof(F));
    D[1][0] = 1;
    for (int i = 2; i <= n; i++)
        for (int j = 0; j < i && j <= m; j++)
        {
            if (j != 0)
                D[i][j] += D[i][j - 1];
            D[i][j] += D[i - 1][j];
            if (D[i][j] >= MOD)
                D[i][j] -= MOD;
        }
    F[0][0] = 1;
    for (int j = 1; j <= m; j++)
        for (int i = 0; i <= j; i++)
        {
            if (i != 0)
                F[i][j] += F[i - 1][j];
            F[i][j] += F[i][j - 1];
            if (F[i][j] >= MOD)
                F[i][j] -= MOD;
        }
    printf("Case #%d: %d %d\n", cs, D[n][m], F[m][m]);
}


int main()
{
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
        solve(i + 1);
}



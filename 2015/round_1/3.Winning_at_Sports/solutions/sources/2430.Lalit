
#include<bits/stdc++.h>
#define sqr(x) ( (x)*(x) )
#define debug(args...){dbg,args; cerr<<endl;}args
#define Size(a) int((a).size()) 
#define pb push_back
#define mset(x,v) memset(x,v,sizeof(x))
#define all(c) (c).begin(),(c).end() 
#define SORT(x) sort(all(x))
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
#define tr(c,i) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define P(x,i) cerr<<"["#x<<"["<<i<<"] = "<<x[i]<<"]\n"
#define PP(x,i,j) cerr<<"["#x<<"["<<i<<"]["<<j<<"]= "<<x[i][j]<<"]\n"
#define PPP(x,i,j,k) cerr<<"["#x<<"["<<i<<"]["<<j<<"]["<<k<<"]= "<<x[i][j][k]<<"]\n"
#define chk(x,n) ( x[n>>6] & (1<< ( (n>>1) & 31) )  ) // checks if  the bit corresponding to n is 1 
#define set(x,n) ( x[n>>6] |= (1<< ( (n>>1) & 31) )  ) // sets the bit corresponding to n to 1 - meaning its composite 
#define mod 1000000007
typedef long long int ll;
typedef long double ld;
typedef unsigned int ui;
typedef unsigned long long int ull;	
using namespace std;
typedef vector<int> VI;
typedef set<int> SI;
typedef map<int,int> MII;

typedef pair<int,int> PII;
struct debugger
{
	template<typename T> debugger& operator , (const T& v)
	{
		cerr<<v<<" ";
		return *this;
	}
} dbg;

int dp[2001][2001];
int main()
{
	int T;
	scanf("%d",&T);
	for (int t = 1; t<=T; t++) 
	{
		string s;
		cin>>s;
		size_t pos=s.find("-");
		string s1=s.substr(0,pos);
		string s2=s.substr(pos+1);
		int x=atoi(s1.c_str());
		int y=atoi(s2.c_str());
		mset(dp,0);
		dp[1][0]=1;
		for (int i = 0; i<=x; i++) 
		{
			for (int j = 0; j<=y; j++) 
			{
				if( (i==0&&j==0) ||(i==1&&j==0) ) 
				{
					continue;
				}
				
				int ans=0;
				if(i>j&&i-1>j&&i>=1)
				{
					ans=dp[i-1][j];
				}
				if(i>j&&i>j-1&&j>=1)
				{
					ans=(ans+(ll)dp[i][j-1])%mod;
				}
				dp[i][j]=ans;
			//	PP(dp,i,j);
			}
		}
		printf("Case #%d: %d ",t,dp[x][y]);
		mset(dp,0);
		dp[0][0]=1;
		for (int i = 0; i<=y; i++) 
		{
			for (int j = 0; j<=y; j++) 
			{
				if( (i==0&&j==0)) 
				{
					continue;
				}
				
				int ans=0;
				if(i<=j&&i-1<=j&&i>=1)
				{
					ans=dp[i-1][j];
				}
				if(i<=j&&i<=j-1&&j>=1)
				{
					ans=(ans+(ll)dp[i][j-1])%mod;
				}
				dp[i][j]=ans;
				//PP(dp,i,j);
			}
		}
		printf("%d\n",dp[y][y]);
	}
	return 0;
}

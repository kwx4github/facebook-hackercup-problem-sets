import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class R1_THIRD {

	static Reader sc = new Reader();
	static PrintWriter out = new PrintWriter(System.out);

	static long mod =  1000000007L;

	public static void main(String[] args) throws IOException {
		int t = sc.nextInt();

		for (int cas = 1; cas <= t; cas++) {
			String s = sc.next();
			StringTokenizer tok = new StringTokenizer(s.trim(), "-");
			int yo = Integer.parseInt(tok.nextToken().trim());
			int tu = Integer.parseInt(tok.nextToken().trim());

			long[][] dpGood = new long[Math.max(yo, tu) + 1][Math.max(yo, tu) + 1];

			dpGood[1][0] = 1L;

			for (int i = 2; i <= yo; i++) {
				for (int j = 0; j <= tu && j < yo; j++) {
					if (i - 1 > j)
						dpGood[i][j] = (dpGood[i][j] + dpGood[i - 1][j]) % mod;
					if (j > 0)
						dpGood[i][j] = (dpGood[i][j] + dpGood[i][j - 1]) % mod;
				}
			}

			long resGood = dpGood[yo][tu];

			long resBad;

			if(tu != 0) {
				
				long[][] dpBad = new long[Math.max(yo, tu) + 1][Math.max(yo, tu) + 1];
				dpBad[0][0] = 1L;

				for (int i = 0; i <= yo; i++) {
					for (int j = 1; j <= tu; j++) {
						// Punto para oponente
						if(j > 0 && j - 1 < tu) {
							dpBad[i][j] = (dpBad[i][j] + dpBad[i][j - 1]) % mod;
						}
						// Punto para mi
						if(i > 0 && (j == tu || i <= j) )
							dpBad[i][j] = (dpBad[i][j] + dpBad[i-1][j]) % mod;
					}
				}
				resBad = dpBad[yo][tu];
			} else {
				resBad = 1L;
			}
			
			out.printf("Case #%d: %d %d\n", cas, resGood, resBad);
		}

		out.close();
	}

	static class Reader {
		final private int BUFFER_SIZE = 1 << 12;private byte[] buffer;private int bufferPointer, bytesRead;
		public Reader(){buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
		}private void fillBuffer() throws IOException{bytesRead=System.in.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;
		}private byte read() throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];
		}public String next() throws IOException{StringBuilder sb = new StringBuilder();byte c;while((c=read())<=' '){if(c==-1) return null;};do{sb.append((char)c);}while((c=read())>' ');if (sb.length()==0) return null;return sb.toString();
		}public String nextLine() throws IOException{StringBuilder sb = new StringBuilder();byte c;boolean read = false;while((c=read())!=-1){if(c=='\n') {read = true;break;}if(c>=' ')sb.append((char)c);}if (!read) return null;return sb.toString();
		}public int nextInt() throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public long nextLong() throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10L+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
		}public double nextDouble() throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;
		}public int[] na(int n) throws IOException{int[] a = new int[n];for(int i = 0;i < n;i++)a[i] = nextInt();return a;
		}public char[][] ncha(int n) throws IOException{char[][] a = new char[n][];for(int i = 0;i < n;i++)a[i] = next().toCharArray();return a;
		}public int[][] nm(int n, int m) throws IOException{int[][] map = new int[n][m];for(int i = 0;i < n;i++)map[i] = na(m);return map;
		}public void close() throws IOException{if(System.in==null) return;System.in.close();}
	}

	static void print(int[] A) {for(int i=0;i<A.length;i++){if(i!=0) out.print(' ');out.print(A[i]);}out.println();}
	static <T> void print(Iterable<T> A) {int i = 0;for(T act : A){if(i!=0)out.print(' ');out.print(act);i++;}out.println();}
	static void printPlus1(Iterable<Number> A) {int i = 0;for(Number act : A){if(i!=0)out.print(' ');out.print(act.longValue() + 1L);i++;}out.println();}
	static void debug(Object... o) { System.err.println(Arrays.deepToString(o)); }

	/*
	long s = System.currentTimeMillis();
	debug(System.currentTimeMillis()-s+"ms");
	 */
}

import java.util.Arrays;
import java.util.Scanner;

public class Parens {
  static int a;
  static int b;
  static int[][] dpfree;
  static int[][] dpful;
  static int MOD = 1000000007;

  public static void main(String[] args) {
    dpfree = new int[2001][2001];
    dpful = new int[2001][2001];
    Scanner in = new Scanner(System.in);
    int T = in.nextInt();
    for (int tc = 1; tc <= T; tc++) {
      for (int i = 0; i < 2001; i++) {
        Arrays.fill(dpfree[i], -1);
        Arrays.fill(dpful[i], -1);
      }
      args = in.next().split("-");
      a = Integer.parseInt(args[0]);
      b = Integer.parseInt(args[1]);
      int free = gofree(0, 0);
      int ful = goful(0, 0);
      System.out.printf("Case #%d: %d %d\n", tc, free, ful);
    }
  }
  
  static int gofree(int ua, int ub) {
    if (ua == a && ub == b) {
      return 1;
    } else if (dpfree[ua][ub] == -1) {
      dpfree[ua][ub] = 0;
      if (ua < a) {
        dpfree[ua][ub] = (dpfree[ua][ub] + gofree(ua + 1, ub)) % MOD;
      }
      if (ub < b && ub + 1 < ua) {
        dpfree[ua][ub] = (dpfree[ua][ub] + gofree(ua, ub + 1)) % MOD;
      }
    }
    return dpfree[ua][ub];
  }
  
  static int goful(int ua, int ub) {
    if (ua == a && ub == b) {
      return 1;
    } else if (dpful[ua][ub] == -1) {
      dpful[ua][ub] = 0;
      if (ub < b) {
        dpful[ua][ub] = (dpful[ua][ub] + goful(ua, ub + 1)) % MOD;
      }
      if (ua < a && (ua + 1 <= ub || ub == b)) {
        dpful[ua][ub] = (dpful[ua][ub] + goful(ua + 1, ub)) % MOD;
      }
    }
    return dpful[ua][ub];
  }
}
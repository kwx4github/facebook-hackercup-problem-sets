#pragma comment(linker, "/STACK:16777216")
#include <iostream>
#include <climits>
#include <fstream>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <cstdio>
#include <ctime>
#include <functional>
#include <iterator>
#include <complex>
#include <queue>
#include <cassert>
#include <sstream>
#include <cstdlib>

#define PROBLEM_ID ""

using namespace std;

double pi = acos((double) -1);
const int MOD = 1000000007;
const int INF = 2147483647;
const long long LLONG_INF = 9223372036854775807LL;
const int MAXN = 2000 + 5;

int main() {
    clock_t tStart = clock();
    //freopen(PROBLEM_ID".in", "r", stdin);
    freopen("output.txt", "w", stdout);
    vector<vector<int>> free(MAXN), full(MAXN);

    for (int i = 0; i < MAXN; i++) {
        free[i] = vector<int>(MAXN, 0);
        full[i] = vector<int>(MAXN, 0);
    }

    free[1][0] = 1;
    full[0][0] = 1;

    for (int i = 0; i < MAXN; i++) {
        for (int j = 0; j < MAXN; j++) {
            if (i > j) {
                if (i > 0 && i - 1 > j) {
                    free[i][j] += free[i - 1][j];
                    free[i][j] %= MOD;
                }

                if (j > 0) {
                    free[i][j] += free[i][j - 1];
                    free[i][j] %= MOD;
                }
            }

            if (i <= j) {
                if (i > 0) {
                    full[i][j] += full[i - 1][j];
                    full[i][j] %= MOD;
                }

                if (j > 0 && i <= j - 1) {
                    full[i][j] += full[i][j - 1];
                    full[i][j] %= MOD;
                }
            }
        }
    }

    int tests;
    cin >> tests;
    for (int test = 1; test <= tests; test++) {
        int a, b;
        char c;
        cin >> a >> c >> b;

        int sfree_answer = 0, sfull_answer = 0;
        if (a > b) {
            sfree_answer = free[a][b], sfull_answer = full[b][b];
        }

        cout << "Case #" << test << ": " << sfree_answer << " " << sfull_answer << endl;
    }
    //printf("Time taken: %.2fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
}

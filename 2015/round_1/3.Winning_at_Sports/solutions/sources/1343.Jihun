import time
import sys
sys.setrecursionlimit(10000)
inputfile = open(__file__.replace('.py', '.txt'), 'r')
outputfile = open(__file__.replace('.py', '_result.txt'), 'w')

def readline():
  global inputfile
  return inputfile.readline().strip()

# reset
cache = dict()

def stressfree_permutation_length(last_score, cur_score):
  pl = [0] * 2
  cache_key = str(cur_score[0]) + '_' + str(cur_score[1])
  if cache.has_key(cache_key):
    return cache[cache_key]

  #print cur_score
  if cur_score[0] < last_score[0]:
    new_score = cur_score[:]
    new_score[0] += 1
    pl[0] = stressfree_permutation_length(last_score, new_score)
  if (cur_score[1]+1 < cur_score[0]) and cur_score[1] < last_score[1]:
    new_score = cur_score[:]
    new_score[1] += 1
    pl[1] = stressfree_permutation_length(last_score, new_score)
  if last_score == cur_score:
    return 1
  if cur_score[0] == last_score[0]:
    return 1

  result = (pl[0] + pl[1]) % 1000000007
  cache[cache_key] = result
  return result

def stressful_permutation_length(last_score, cur_score):
  #print cur_score
  pl = [0] * 2
  cache_key = str(cur_score[0]) + '_' + str(cur_score[1])
  if cache.has_key(cache_key):
    return cache[cache_key]

  #print cur_score
  if cur_score[1] < last_score[1]:
    new_score = cur_score[:]
    new_score[1] += 1
    pl[0] = stressful_permutation_length(last_score, new_score)
  if (cur_score[0]+1 <= cur_score[1]) and cur_score[0] < last_score[0]:
    new_score = cur_score[:]
    new_score[0] += 1
    pl[1] = stressful_permutation_length(last_score, new_score)
  if last_score == cur_score:
    return 1
  if cur_score[1] == last_score[1]:
    return 1

  result = (pl[0] + pl[1]) % 1000000007
  cache[cache_key] = result
  return result

case_length = int(readline())
for case_num in xrange(case_length):
  last_score = map(lambda x: int(x), readline().split('-'))
  #print '=' * 5, last_score, '=' * 5

  cache = dict()
  pl = [0] * 2
  pl[0] = stressfree_permutation_length(last_score, [0, 0])
  cache = dict()
  pl[1] = stressful_permutation_length(last_score, [0, 0])
  #print 'pl:', pl

  print_string = "Case #%d: %d %d" % ((case_num+1), pl[0], pl[1])
  print print_string
  outputfile.write(print_string + "\n")
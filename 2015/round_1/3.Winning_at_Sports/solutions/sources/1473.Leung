#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <fstream>
#include <string>
#include <vector>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s); i>=(e); i--)
#define LL long long
#define eps 1e-6
#define pi acos(-1.0)
#define fail {printf("Impossible\n"); return 0;}
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

struct P{
    double x, y;
    P(){}
    P(double x, double y):x(x) , y(y){}
    P operator+ (const P &a) const {return P(x+a.x, y+a.y);}
    P operator- (const P &a) const {return P(x-a.x, y-a.y);}
    double operator^ (const P &a) const {return x*a.x+y*a.y;}
    void in(){scanf("%lf%lf", &x, &y);}
    void out(){printf("REQUIRED %.7f %.7f\n", x, y);}
    double dist(P a, P b) {return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}
    double sqdist(P a, P b) {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}

};

#define N 2005
#define mod 1000000007

LL dp[N][N];

LL get1(int c, int d){
    if (c < 0 || d < 0) return 0;
    if (c == 1 && d == 0) return 1;
    if (c <= d) return 0;
    if (dp[c][d] == -1){
        dp[c][d] = get1(c - 1, d) + get1(c, d - 1);
        dp[c][d] %= mod;
    }
    return dp[c][d];
}

LL get2(int c, int d){
    if (c < 0 || d < 0) return 0;
    if (c == 0 && d == 0) return 1;
    if (c == 0 && d == 1) return 1;
    if (c > d) return 0;
    if (dp[c][d] == -1){
        dp[c][d] = get2(c - 1, d) + get2(c, d - 1);
        dp[c][d] %= mod;
    }
    return dp[c][d];
}

void solve1(int a, int b){
    FOE(i, 0, N - 1) FOE(j, 0, N - 1) dp[i][j] = -1;
    printf("%I64d", get1(a, b));
}

void solve2(int a, int b){
    FOE(i, 0, N - 1) FOE(j, 0, N - 1) dp[i][j] = -1;
    printf("%I64d\n", get2(b, b));
}

void solve(){
    string w;
    cin>>w;
    int id1 = 0; int id2 = 0, nxt = 0;
    FOR(i, 0, w.length()){
        if (w[i] == '-') nxt = 1;
        else if (nxt == 0) id1 = id1 * 10 + (int)(w[i] - '0');
        else id2 = id2 * 10 + (int)(w[i] - '0');
    }
    solve1(id1, id2);
    printf(" ");
    solve2(id1, id2);
}

int main(){
    freopen("C.in", "r", stdin);
freopen("C.out", "w", stdout);
    int t;
    scanf("%d", &t);
    FOE(i, 1, t){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

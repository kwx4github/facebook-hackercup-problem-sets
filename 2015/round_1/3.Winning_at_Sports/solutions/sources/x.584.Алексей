#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <deque>
#include <complex>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(s) int((s).size())
#define all(s) (s).begin(), (s).end()
#if ( _WIN32 || __WIN32__ || _WIN64 || __WIN64__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#ifdef LOCAL42
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif
#define y0 yy0
#define y1 yy1
#define next _next
#define prev _prev
#define rank _rank
#define link _link
#define hash _hash
#define fs first
#define sc second

typedef long long ll;
typedef long long llong;
typedef long long int64;
typedef unsigned int uint;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned long long ullong;
typedef unsigned long long lint;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int inf = int(1e9);
const double eps = 1e-4;
const double pi = 4 * atan(double(1));
const int N = 2020;
const int MOD = int(1e9) + 7;

int d[N][N];

inline void norm(int &a) {
    if (a >= MOD) {
        a -= MOD;
    }
}

inline void solve() {
    int n, m;
    scanf("%d-%d", &n, &m);
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= m; ++j) {
            d[i][j] = 0;
        }
    }
    // stress-free
    d[0][0] = 1;
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= m; ++j) {
            if (i + 1 <= n && i + 1 > j) {
                d[i + 1][j] += d[i][j];
                norm(d[i + 1][j]);
            }
            if (j + 1 <= m && i > j + 1) {
                d[i][j + 1] += d[i][j];
                norm(d[i][j + 1]);
            }
        }
    }
    int ans1 = d[n][m];
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= m; ++j) {
            d[i][j] = 0;
        }
    }
    // stressful
    int ans2;
    if (m == 0) {
        ans2 = 0;
    } else {
        d[0][0] = 1;
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= m; ++j) {
                if (i + 1 <= n && (j == m || i + 1 <= j)) {
                    d[i + 1][j] += d[i][j];
                    norm(d[i + 1][j]);
                }
                if (j + 1 <= m && i <= j + 1) {
                    d[i][j + 1] += d[i][j];
                    norm(d[i][j + 1]);
                }
            }
        }
        ans2 = d[n][m];
    }
    printf("%d %d\n", ans1, ans2);
}

int main() {
#ifdef LOCAL42
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    
#endif
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: ", i + 1);
        solve();
        cerr << "Case " << i << endl;
    }
    return 0;
}

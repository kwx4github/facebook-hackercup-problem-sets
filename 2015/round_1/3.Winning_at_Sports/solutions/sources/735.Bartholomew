#include <bits/stdc++.h>
#include <unordered_set>

using namespace std;
#define V vector
#define tD typedef
tD long long ll;
tD V<int> vi;
tD V<vi> vii;
tD V<ll> vll;
tD V<string> vs;
tD long double ld;
tD pair<int, int> pii;
#define mt make_tuple
#define fr(x,y) for(int x=0;x<(y); ++x)
#define fi(n) fr(i,n)
#define fj(n) fr(j,n)
#define fk(n) fr(k,n)
#define eb emplace_back
#define pb push_back
#define sz size()
#define DEBUG 0

ll MOD = 1000000007;

int A, B;
ll cachea[2048][2048];
ll cacheb[2048][2048];

ll Stressfree(int a, int b) {
  if (a == A && b == B) return 1;
  if (cachea[a][b] != -1) return cachea[a][b];
  if (a > A) return 0;
  if (b > B) return 0;
  if (a <= b && b != 0) return 0;
  cachea[a][b] = (Stressfree(a + 1, b) + Stressfree(a, b + 1)) % MOD;
  return cachea[a][b];
}

ll Stressful(int a, int b) {
  if (a == A && b == B) return 1;
  if (cacheb[a][b] != -1) return cacheb[a][b];
  if (a > A) return 0;
  if (b > B) return 0;
  if (a > b && b != B) return 0;
  cacheb[a][b] = (Stressful(a + 1, b) + Stressful(a, b + 1)) % MOD;
  return cacheb[a][b];
}

int main() {
  int T; cin >> T;
  for (int qw = 1; qw <= T; qw++) {
    fi(2048) fj(2048) cachea[i][j] = cacheb[i][j] = -1;
    char c; cin >> A >> c >> B;
    cout << "Case #" << qw << ": " << Stressfree(0, 0) % MOD << " " << Stressful(0, 0) % MOD << endl;
  }
}

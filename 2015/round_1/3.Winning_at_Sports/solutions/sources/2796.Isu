#include <iostream>
#include <algorithm>
#include <cassert>
#include <cfloat>
#include <climits>
#include <cstring>
#include <fstream>
#include <map>
#include <numeric>
#include <stack>
#include <string>
#include <vector>
#include <queue>

using namespace std;

const int MOD = 1000000007;

int freeCache[2001][2001];
int stressfulCache[2001][2001];
int myFinalScore, opponentFinalScore;

int stressFree(int myScore, int opponentScore){
	if (myScore == myFinalScore && opponentScore == opponentFinalScore) return 1;
	int &cacheValue = freeCache[myScore][opponentScore];
	if (cacheValue != -1) return cacheValue;
	if (myScore == myFinalScore) return cacheValue=stressFree(myScore, opponentScore + 1);

	cacheValue = stressFree(myScore + 1, opponentScore);
	if (opponentFinalScore>=opponentScore+1 && myScore > opponentScore + 1) {
		cacheValue = (cacheValue + (long long)stressFree(myScore, opponentScore + 1))%MOD;
	}
	
	return cacheValue;
}

int stressful(int myScore, int opponentScore){
	if (myScore == myFinalScore && opponentScore == opponentFinalScore) return 1;
	int &cacheValue = stressfulCache[myScore][opponentScore];
	if (cacheValue != -1) return cacheValue;
	if (opponentScore == opponentFinalScore) return cacheValue = stressful(myScore + 1, opponentScore);

	cacheValue = stressful(myScore, opponentScore + 1);
	if (myScore + 1 <= myFinalScore && myScore+1 <= opponentScore){
		cacheValue = (cacheValue + (long long)stressful(myScore + 1, opponentScore)) % MOD;
	}

	return cacheValue;
}

int main(){
	int testCase;
	cin >> testCase;
	fstream outFile;
	outFile.open("WinningAtSports.txt", fstream::out);
	for (int t = 0; t < testCase; t++){
		memset(&freeCache, -1, sizeof(freeCache));
		memset(&stressfulCache, -1, sizeof(stressfulCache));
		string score;
		cin >> score;
		int index=score.find('-');
		myFinalScore=atoi(score.substr(0, index).c_str());
		opponentFinalScore=atoi(score.substr(index + 1).c_str());

		outFile << "Case #" << t + 1 << ": ";
		outFile << stressFree(0, 0) << " " << stressful(0, 0);
		outFile << endl;
	}
	outFile.close();
	return 0;
}
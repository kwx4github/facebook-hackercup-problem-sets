#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

using namespace std;

typedef unsigned int UINT;
typedef long long unsigned int ULL;
typedef long long int LL;

const int MAXN = 2001;
const int MOD = 1000000007;

UINT ways[2][MAXN][MAXN];

UINT dfs_free(int mf, int of, int m, int o)
{
    if (m > mf || o > of) return 0;
  assert(m < MAXN && o < MAXN);
    if (!ways[0][m][o]) {

        if (m < mf) {
  assert(m < MAXN && o < MAXN);
            ways[0][m][o] = (ways[0][m][o] % MOD + dfs_free(mf, of, m + 1, o) % MOD) % MOD;
        }
        if (o < of && o < m - 1) {
  assert(m < MAXN && o < MAXN);
            ways[0][m][o] = (ways[0][m][o] % MOD + dfs_free(mf, of, m, o + 1) % MOD) % MOD;
        }
    }
  assert(m < MAXN && o < MAXN);
    return ways[0][m][o];
}

UINT dfs_ful(int mf, int of, int m, int o)
{
    if (m > mf || o > of) return 0;
  assert(m < MAXN && o < MAXN);
    if (!ways[1][m][o]) {

        if ((o == of) || (m < o && o < of)) {
  assert(m < MAXN && o < MAXN);
            ways[1][m][o] = (ways[1][m][o] % MOD + dfs_ful(mf, of, m + 1, o) % MOD) % MOD;
        }
        if (o < of) {
  assert(m < MAXN && o < MAXN);
            ways[1][m][o] = (ways[1][m][o] % MOD + dfs_ful(mf, of, m, o + 1) % MOD) % MOD;
        }
    }
  assert(m < MAXN && o < MAXN);
    return ways[1][m][o];
}

int main()
{
  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; t++) {
    printf("Case #%d: ", t+1);
    int M, O;
    scanf("%d-%d", &M, &O);
    memset(ways, 0, sizeof(ways));
  assert(M < MAXN && O < MAXN);
    ways[0][M][O] = ways[1][M][O] = 1;
    UINT free = dfs_free(M, O, 1, 0);
    UINT ful = dfs_ful(M, O, 0, 1);
    printf("%u %u\n", free, ful);
  }
  return 0;
}

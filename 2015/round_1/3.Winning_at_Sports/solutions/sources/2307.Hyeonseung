#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

const int divider = 1000000007;

int stress_cache[2001][2001];
int free_cache[2001][2001];
int my_score, opp_score;

int calStress(int a, int b) {

	
	if ( b == opp_score   )
		return  1;

	int& ret = stress_cache[a][b];
	if (ret!=-1)
		return ret;
		
	if ( a == b)
		return ret = calStress( a , b+ 1) % divider;
	else
		return ret = ((long)calStress( a+1, b) + (long)calStress(a, b+1 ) ) %divider;
}

int calFree(int a, int b){

	if ( b == 0 )
		return 1;

	int& ret = free_cache[a][b];
	if (ret!=-1)
		return ret;

	if ( a - b == 1)
		return ret = calFree( a, b-1) %divider;
	else
		return ret = ((long)calFree(a,b-1) + (long)calFree(a-1,b))%divider;
}

int main(){
	
	int cases;
	cin >> cases;
	for( int c = 1; c<= cases; c++){

		memset (stress_cache, -1, sizeof(stress_cache));
		memset (free_cache, -1, sizeof(free_cache));
		
		cin >> my_score; cin >> opp_score;
		opp_score = opp_score*-1;

		int s, f;
		if (opp_score== 0)
			s = 1;
		else 
			s= calStress( 0,1);
		f= calFree( my_score, opp_score);
		
		cout << "Case #" << c <<": " << f << " " << s << endl;
	}
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define FOREACH(container, it) \
   for(typeof(container.begin()) it=container.begin(); it!=container.end(); it++)
#define EXP(i, s) for (int i = (s); i; i = qn[i])
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

#define MAXN 2500
#define MOD 1000000007

LL dp1[MAXN][MAXN];
LL dp2[MAXN][MAXN];

int main(int argc, char **argv){
  int T;
  cin >> T;
  FOR(ca, 1, T+1) {
    int A, B;
    scanf("%d-%d", &A, &B);
    memset(dp1, 0, sizeof(dp1));
    memset(dp2, 0, sizeof(dp2));
    // stress-free
    dp1[0][0] = 1;
    FOR(i, 0, A+1) {
      FOR(j, 0, B+1) {
        if (i <= j) continue;
        LL v1 = 0;
        LL v2 = 0;
        if (i > 0 && (i-1 > j || j == 0)) {
          v1 = dp1[i-1][j];
        }
        if (j > 0) {
          v2 = dp1[i][j-1];
        }
        dp1[i][j] = (dp1[i][j] + v1 + v2) % MOD;
      }
    }
    // stressful
    dp2[0][0] = 1;
    FOR(i, 0, A+1) {
      FOR(j, 0, B+1) {
        if (i > j && j != B) continue;
        LL v1 = 0;
        LL v2 = 0;
        if (i > 0) {
          v1 = dp2[i-1][j];
        }
        if (j > 0 && j - 1 >= i) {
          v2 = dp2[i][j-1];
        }
        dp2[i][j] = (dp2[i][j] + v1 + v2) % MOD;
      }
    }
    printf("Case #%d: %lld %lld\n", ca, dp1[A][B], dp2[A][B]);
  }
  return 0;
}

#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)
#define SZ(v)					(int) v.size()
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

int s1, s2;
const int MOD = 1000000007;
const int MXSCORE = 2007;
long long dp[MXSCORE][MXSCORE];

long long waysToStressFree(int score1, int score2) {
	if (score1 > s1 || score2 > s2)
		return 0;
	if (score2 != 0 && score2 >= score1)
		return 0;
	if (score1 == s1 && score2 == s2)
		return 1;
	long long &score = dp[score1][score2];
	if (score != -1)
		return score;
	score = waysToStressFree(score1 + 1, score2) % MOD;
	score += (waysToStressFree(score1, score2 + 1) % MOD);
	score %= MOD;
	return score;

}

int waysToStressFul(int score1, int score2) {
	if (score1 > s1 || score2 > s2)
		return 0;
	if (score2 != s2 && score1 > score2)
		return 0;
	if (score1 == s1 && score2 == s2)
		return 1;
	long long &score = dp[score1][score2];
	if (score != -1)
		return score;
	score = waysToStressFul(score1 + 1, score2) % MOD;
	score += (waysToStressFul(score1, score2 + 1) % MOD);
	score %= MOD;
	return score;
}
int main() {
	freopen("WinningatSports_in.txt", "rt", stdin);
	freopen("WinningatSports_out.txt", "wt", stdout);
	int t;
	char sp;
	cin >> t;
	for (int tt = 1; tt <= t; tt++) {
		cin >> s1 >> sp >> s2;
		printf("Case #%d: ", tt);
		CLR(dp, -1);
		cout << waysToStressFree(0, 0) << " ";
		CLR(dp, -1);
		cout << waysToStressFul(0, 0) << endl;
	}
	return 0;
}

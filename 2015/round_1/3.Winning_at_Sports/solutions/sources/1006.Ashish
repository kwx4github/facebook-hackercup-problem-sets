/*
ID: ashish1610
PROG:
LANG: C++
*/
#include<bits/stdc++.h>
using namespace std;
#define ll				long long int
#define vi				vector<int>
#define vl				vector<ll>
#define	pii				pair<int,int>
#define pil				pair<int, ll>
#define pll				pair<ll, ll>
#define pli 			pair<ll, int>
#define pb(v, a)		v.push_back(a)
#define mp(a, b)		make_pair(a, b)
#define MOD				1000000007
#define rep(i, a, b)	for(i=a; i<=b; ++i)
#define rrep(i, a, b)	for(i=a; i>=b; --i)
#define si(a)			scanf("%d", &a)
#define sl(a)			scanf("%lld", &a)
#define pi(a)			printf("%d", a)
#define pl(a)			printf("%lld", a)
#define pn 				printf("\n")
ll pow_mod(ll a, ll b)
{
	ll res = 1;
	while(b)
	{
		if(b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
ll dp[2005][2005][2];
int main()
{
	int t, i, j, k;
	si(t);
	rep(i, 1, t)
	{
		int a, b;
		scanf("%d-%d", &a, &b);
		rep(j, 0, a)
			dp[j][0][0] = 1;
		rep(j, 0, b)
			dp[0][j][1] = 1;
		rep(j, 1, a)
		{
			int rng = min(b, j - 1);
			rep(k, 0, b)
			{
				if(k <= rng && j >= 2)
				{
					dp[j][k][0] = 0;
					if(k > 0)
						dp[j][k][0] = (dp[j][k][0] + dp[j][k - 1][0]) % MOD;
					if(j - k > 1)
						dp[j][k][0] = (dp[j][k][0] + dp[j - 1][k][0]) % MOD;
				}
				if(j > k)
					dp[j][k][1] = j < b ? 0 : dp[j - 1][k][1];
				else
				{
					dp[j][k][1] = dp[j - 1][k][1];
					if(j < k)
						dp[j][k][1] = (dp[j][k][1] + dp[j][k - 1][1]) % MOD;
				}
			}
		}
		cout<<"Case #"<<i<<": ";
		pl(dp[a][b][0]);
		cout<<" ";
		pl(dp[a][b][1]);
		pn;
	}
	return 0;
}
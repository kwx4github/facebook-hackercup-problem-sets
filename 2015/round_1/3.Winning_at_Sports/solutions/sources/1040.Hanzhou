#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x,y) cout << #x << " = " << x << ", " << #y << " = " << y << endl
#define dbg3(x,y,z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl

#define out(x) cout << (x) << endl
#define out2(x,y) cout << (x) << " " << (y) << endl
#define out3(x,y,z) cout << (x) << " " << (y) << " " << (z) << endl;

const int maxN = 2000 + 10;
const int Mod = 1000000007;

int N, M, X, Y;
int f[maxN << 1][maxN][2];
int s[maxN << 1][maxN][2];

void init()
{
    int i, j, T = N + M;
    for(i = 0; i <= T + 1; i ++)
        for(j = 0; j <= N + 1; j ++)
            f[i][j][0] = f[i][j][1] = 0;
    // round 1
    if( N > 0 ) f[1][1][1] = 1;
    for(i = 1; i <= T; i ++) {
        for(j = 0; j <= N && i <= T; j ++) {
            if( (j + 1) > (i + 1) - (j + 1) ) {
                f[i + 1][j + 1][1] = (f[i + 1][j + 1][1] + f[i][j][0]) % Mod;
                f[i + 1][j + 1][1] = (f[i + 1][j + 1][1] + f[i][j][1]) % Mod;
            }
            if( j > (i + 1) - j ) {
                f[i + 1][j][0] = (f[i + 1][j][0] + f[i][j][0]) % Mod;
                f[i + 1][j][0] = (f[i + 1][j][0] + f[i][j][1]) % Mod;
            }
        }
    }
    for(i = 0; i <= T + 1; i ++)
        for(j = 0; j <= N + 1; j ++)
            s[i][j][0] = s[i][j][1] = 0;
    // round 1
    if( M > 0 ) s[1][0][0] = 1;
    for(i = 1; i <= T; i ++) {
        for(j = 0; j <= N && j <= T; j ++) {
            if( j <= (i + 1) - j ) {
                s[i + 1][j][0] = (s[i + 1][j][0] + s[i][j][0]) % Mod;
                s[i + 1][j][0] = (s[i + 1][j][0] + s[i][j][1]) % Mod;
            }
            if( (j + 1) <= (i + 1) - (j + 1) ) {
                s[i + 1][j + 1][1] = (s[i + 1][j + 1][1] + s[i][j][1]) % Mod;
                s[i + 1][j + 1][1] = (s[i + 1][j + 1][1] + s[i][j][0]) % Mod;
            }
        }
    }
}

void calc()
{
    int T = N + M;
    X = (f[T][N][0] + f[T][N][1]) % Mod;

    Y = 0;
    for(T = 0; T <= N; T ++)
        Y = (Y + s[T + M][T][0]) % Mod;
    if( M == 0 ) Y = 1;
}

int main()
{
    //freopen("data.in", "r", stdin);
    //freopen("data.out", "w", stdout);
    int idx = 0, nt;
    scanf("%d", &nt);
    for(; nt > 0; nt --) {
        char ch;
        scanf("%d%c%d", &N, &ch, &M);
        init(); calc();
        printf("Case #%d: %d %d\n", ++ idx, X, Y);
    }
    return 0;
}

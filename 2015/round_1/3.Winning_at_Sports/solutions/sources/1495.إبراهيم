#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <cstring>

using namespace std;

#define mp make_pair
#define pp push_back
#define Sort(x) sort(x.begin(), x.end())
#define rep(i, x, y) for(int i = x; i < y; ++i)
#define Rep(i, x, y) for(int i = x; i <= y; ++i)
#define dRep(i, x, y) for(int i = x;i >= y; --i)
#define vi vector<int>
#define vvi vector<vector<int> >
#define ll long long
#define all(v) v.begin(),v.end()
#define ii pair<int, int>
#define mem(x, v) memset(x, v, sizeof(x))
#define nl '\n'
#define MOD 1000000007
#define readFile(fileName) freopen(fileName, "r", stdin)
#define writeFile(fileName) freopen(fileName, "w",stdout)

ll dp[2002][2002][2];
int myRes, hisRes;
ll res1, res2;
ll solve(int my, int opponent, bool stress)
{
	
	if(stress && (opponent < my && opponent < hisRes))
	{
		return 0;
	}
	else if(!stress && (my || opponent) && my <= opponent)
	{
		return 0;
	}
	else if(my == myRes || opponent == hisRes)
	{
		return 1;
	}
	
	if(dp[my][opponent][stress] != -1)
	{
		return dp[my][opponent][stress];
	}
	else
	{
		ll& ret = dp[my][opponent][stress];
		ret = 0;
		ret += (solve(my + 1, opponent, stress) % MOD + solve(my, opponent + 1, stress) % MOD + MOD) % MOD;
		return ret;
	}

}

int main()
{
	readFile("winning_at_sports.txt");
	writeFile("winnig_at_sports_output.txt");
	int t;
	cin >> t;
	char temp;
	Rep(i, 1, t)
	{
		cin >> myRes >> temp >> hisRes;
		memset(dp, -1, 8016008 * sizeof(dp[0][0][0]));
		res1 = res2 = 0;
		res1 = solve(1, 0, 0);
		res2 = solve(0, 0, 1);
		res1 += MOD;
		res1 %= MOD;
		res2 += MOD;
		res2 %= MOD;
		cout << "Case #" << i << ": "; 
		cout << res1 << " " << res2 << nl;  
	}

	return 0;
}
/*
 * Author:  xioumu
 * Created Time:  2015/1/18 22:53:59
 * File Name: C.cpp
 * solve: C.cpp
 */
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<iostream>
#include<vector>
#include<queue>

using namespace std;
#define sz(v) ((int)(v).size())
#define rep(i, n) for (lint i = 0; i < (n); ++i)
#define repf(i, a, b) for (lint i = (a); i <= (b); ++i)
#define repd(i, a, b) for (lint i = (a); i >= (b); --i)
#define clr(x) memset(x,0,sizeof(x))
#define clrs( x , y ) memset(x,y,sizeof(x))
#define out(x) printf(#x" %lld\n", x)
#define sqr(x) ((x) * (x))
typedef long long lint;

const lint maxlint = -1u>>1;
const double eps = 1e-8;
const lint maxn = 4000 + 10;
const lint MOD = 1000000007;

lint sgn(const double &x) {  return (x > eps) - (x < -eps); }

lint f[maxn];
lint C[maxn][maxn];

void init() {
    clr(f);
    f[0] = 1;
    rep (i, maxn) {
        repf (j, 0, i - 1) {
            f[i] += f[i - j - 1] * f[j];
            f[i] %= MOD;
        }
    }
    C[0][0] = 1;
    repf (i, 1, maxn - 1) {
        C[i][0] = C[i][i] = 1;
        repf (j, 1, i - 1) {
            C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
            C[i][j] %= MOD;
        }
    }
    //rep (i, 20) 
        //printf("%lld ", f[i]);
    //puts("");
    //rep (i, 20) {
        //repf (j, 0, i) {
            //printf("%lld ", C[i][j]);
        //}
        //puts("");
    //}
    
}

lint get1(lint n, lint m) {
    lint ans1 = C[n + m][m];
    if (m > 0)
        ans1 -= C[n + m - 1][m - 1];
    ans1 %= MOD;
    repf (i, 0, m - 1) {
        ans1 -= f[i] * C[n + m - 2 * (i + 1)][m - (i + 1)];
        ans1 %= MOD;
    }
    return (ans1 + MOD) % MOD;
}

lint get2(lint n, lint m) {
    lint ans2 = f[m];
    return ans2;
}

int main() {
    freopen("C.out", "w", stdout);
    init();
    lint T, n, m, ca = 1;;
    lint ans1 = 0, ans2 = 0;
    scanf("%lld", &T);
    while (T--) {
        scanf("%lld-%lld", &n, &m);
        ans1 = get1(n, m);
        ans2 = get2(n, m);
        printf("Case #%lld: %lld %lld\n", ca++, ans1, ans2);
    }
    return 0;
}

#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
// const int MAX_N = ;

const int mod = 1e9 + 7;

void madd(int& a, int b){
  a += b;
  if(a >= mod) a -= mod;
}
int mul(int a, int b){
  return ((ll)a*b)%mod;
}

int mpow(int a, int n){
  int r = 1;
  while(n > 0){
    if(n & 1)
      r = mul(r, a);
    a = mul(a, a);
    n >>= 1;
  }
  return r;
}

const int MAX_N = 4000 + 10;
int dp[MAX_N][MAX_N];

int main(){
  int T, a, b, n, ans1, ans2;
  scanf("%d", &T);  
  for(int caseno = 1; caseno <= T; caseno++){
    scanf("%d-%d", &a, &b);
    n = a + b;
    memset(dp, 0, sizeof dp);
    dp[0][0] = 1;
    for(int i = 0; i < n; i++){
      for(int j = 0; j <= a; j++){
	if(j + 1 > i + 1 - (j + 1)) madd(dp[i + 1][j + 1], dp[i][j]);
	if(j > i + 1 - j) madd(dp[i + 1][j], dp[i][j]);
      }
    }
    ans1 = dp[n][a];
    memset(dp, 0, sizeof dp);
    dp[0][0] = 1;
    for(int i = 0; i < n; i++){
      for(int j = 0; j <= a; j++){
	int opp = i - j;
	if(opp == b){
	  madd(dp[i + 1][j + 1], dp[i][j]);
	} else {
	  if(opp >= j + 1) madd(dp[i + 1][j + 1], dp[i][j]);
	  if(opp + 1 >= j) madd(dp[i + 1][j], dp[i][j]);
	}
      }
    }
    ans2 = dp[n][a];
    printf("Case #%d: %d %d\n", caseno, ans1, ans2);
  }
  return 0;
}

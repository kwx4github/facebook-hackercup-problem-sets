//template
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstdio>
#include <cmath>
#include <cstring>                                                                                      
#include <queue>
#include <sstream>
#include <iomanip>
#include <limits>
using namespace std;
//cout << fixed << setprecision(4);
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef istringstream iss; // >>
typedef ostringstream oss; //<<
#define geti(n) int n;scanf("%d",&n)
#define getl(n) long long n;cin >> n
#define getc(c) char c;cin >> c
#define rep(i,n) for(int i=0;i<n;i++)
#define puti(n) printf("%d\n",n)
#define putl(n) cout << n << endl
#define ll long long
#define pb push_back
#define mem(p,q) memset(p,q,sizeof(p))
#define fu(i,a,n) for(int i=a;i<n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define mp make_pair
#define popcount __builtin_popcount
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()
#define M 1000000007
#define A 2001
int dp[A][A];


int main(){
    //freopen("input.txt", "r", stdin);
    geti(T);
    rep(i,T){
    	string str;
    	cin >> str;
    	int a=0;
    	int b=0;
    	bool flag=false;
    	rep(j,str.size()){
    		if(str[j]!='-'){
    			if(!flag)
    			a=a*10+(str[j]-'0');
    		    else
    		    	b=b*10+(str[j]-'0');

    		}
    	else{
    		flag=true;
    	}

    	}
    	//cout << a << endl;
    	
    	mem(dp,0);
    	dp[1][0]=1;
    	fu(j,2,a+1){
    		rep(k,b+1){

    			if(j>k){
    				

    				 if(j >=1)
    				 	dp[j][k]=dp[j-1][k];
    				 if(k>=1 )
    				
    					dp[j][k]=(dp[j][k]+dp[j][k-1])%M;
    				

    			}
    			else
    				dp[j][k]=0;
    			


    		}
    	}
    	int ans1=dp[a][b];
    	mem(dp,0);
    	dp[0][1]=1;
    	a=b;
    	//cout << a << endl;


    	fu(j,0,a+1){
    		fu(k,0,b+1){
    			if(j==0 && k==1) continue;

    			if(k >= j){

    				 if(j >=1){
    				 	dp[j][k]=dp[j-1][k];
    				 }
    				 if( k>=1 )
    				
    					dp[j][k]=(dp[j][k]+dp[j][k-1])%M;
    				// cout << j << " " << k << " " << dp[j][k] << endl;
    				

    			}
    			


    		}
    	}
    	dp[a][b]=(dp[a][b])?dp[a][b]:1;

    	printf("Case #%d: %d %d\n",i+1,ans1,dp[a][b]);
    }

	return 0;

}
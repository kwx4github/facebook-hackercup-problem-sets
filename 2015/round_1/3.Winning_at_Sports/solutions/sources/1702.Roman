#ifdef SHTRIX 
#include "/Users/roman/Dev/SharedCpp/DebugOutput.h"
#endif
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <stack>
#include <cstring>
#include <ctime>
#include <cstdio>
#include <memory>
using namespace std;
#define pb push_back
#define INF 1000000000
#define L(s) (int)((s).end()-(s).begin())
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for(int i = (a); i >= (b); i--)
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define VI vector<int>
#define ppb pop_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
//#define x first
//#define y second
#define sqr(a) (a)*(a)
#define D(a,b) sqrt(((a).x-(b).x)*((a).x-(b).x)+((a).y-(b).y)*((a).y-(b).y))
#define pi 3.1415926535897932384626433832795028841971
#define UN(v) sort((v).begin(),(v).end()),v.erase(unique(v.begin(),v.end()),v.end())

const int MOD = 1000000007;
const int N = 4444;

inline void add(int &a, int b) {
    a += b;
    if (a >= MOD) a -= MOD;
}

int x, y; // final scores
int df[N][N], dg[N][N];

inline bool ok(int a, int b) {
    return a <= x && b <= y;
}

int f(int a, int b) {
    if (!ok(a, b)) return 0;
    if (a == x && b == y) return 1;
    if (df[a][b] != -1) return df[a][b];
    int res = 0;
    if (a > b + 1) add(res, f(a, b + 1));
    add(res, f(a + 1, b));
    return df[a][b] = res;
}

int g(int a, int b) {
    if (!ok(a, b)) return 0;
    if (a == x && b == y) return 1;
    if (dg[a][b] != -1) return dg[a][b];
    int res = 0;
    if (b == y) {
        add(res, g(a + 1, b));
    } else {
        if (a + 1 <= b) add(res, g(a + 1, b));
        add(res, g(a, b + 1));
    }
    return dg[a][b] = res;
}

void solve() {
    memset(df, -1, sizeof(df));
    memset(dg, -1, sizeof(dg));
    char c;
    scanf("%d%c%d", &x, &c, &y);
    printf("%d %d\n", f(1, 0), g(0, 0));
}

int main()
{
    #ifdef SHTRIX 
    freopen("input.txt","rt",stdin); 
    //freopen("output.txt","wt",stdout); 
    #endif
    int TC;
    scanf("%d", &TC);
    rept(tc, TC) {
    	printf("Case #%d: ", tc + 1);
        solve();
    }

	return 0;
}

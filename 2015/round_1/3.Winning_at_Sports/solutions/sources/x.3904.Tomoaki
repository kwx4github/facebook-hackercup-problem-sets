#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()

using namespace std;

typedef long long ll;
typedef pair<int, int> P;
const ll mod = (ll)1e9 + 7LL;
ll dp[2][2002][2002];

int main()
{
	ios_base::sync_with_stdio(0);
	int T; cin >> T;

	for (int tt = 1; tt <= T; tt++ ){
		memset (dp, 0LL, sizeof(dp ) );
		string s; cin >> s;
		rep (i, s.length() ) if (s[i] == '-' ) s[i] = ' ';
		stringstream ss(s );
		int my, opp;
		ss >> my >> opp;

		// for stress-free
		dp[0][0][0] = 1LL;
		for (int i = 0; i <= my; i++ ){
			for (int j = 0; j <= opp; j++ ){
				if (i > j ){
					if (i > 0 )
						dp[0][i][j] = (dp[0][i][j] + dp[0][i-1][j] ) % mod;
					if (j > 0 )
						dp[0][i][j] = (dp[0][i][j] + dp[0][i][j-1] ) % mod;
				} // end if
			} // end for
		} // end for

		// for stressful
		dp[1][0][0] = 1LL;
		for (int i = 0; i <= my; i++ ){
			for (int j = 0; j <= opp; j++ ){
				if (i <= j ){
					if (i > 0 )
						dp[1][i][j] = (dp[1][i][j] + dp[1][i-1][j] ) % mod;
					if (j > 0 )
						dp[1][i][j] = (dp[1][i][j] + dp[1][i][j-1] ) % mod;
				} // end if
			} // end for
		} // end for

#if 0
		rep (i, 10 ){
			rep (j, 10 ){
				cerr << setw(2) << dp[1][i][j];
			} // end rep
			cerr << endl;
		} // end rep
#endif
		cout << "Case #" << tt << ": ";
		cout << dp[0][my][opp] << ' ';
		cout << dp[1][my-opp][opp] << endl;
	} // end for

	return 0;
}

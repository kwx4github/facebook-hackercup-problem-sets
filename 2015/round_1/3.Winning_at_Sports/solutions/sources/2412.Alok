//ALOK SHARMA

#include <bits/stdc++.h>
using namespace std;

#define gx getchar
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define i64 long long
#define MOD 1000000007
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl
#define inf 2000000000
#define lcm(a,b) ((a*b)/(__gcd(a,b)))	

typedef pair<i64,i64> PLL;
typedef pair<int,int> PII;

void scan(int &x)
{
    register int c = gx();
    x = 0;
    for(;(c<48 || c>57);c = gx());
    for(;c>47 && c<58;c = gx())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
}
const int M =4005;
int dp[M][M/2],a,b;

int solve1(){
	dp[0][0]=1;
	for(int i=1;i<=a+b;i++){
		for(int j=0;j<=a;j++){
			if(dp[i-1][j]!=0){
				if(j+1<=a){
					dp[i][j+1]=dp[i][j+1]+dp[i-1][j];
					if(dp[i][j+1]>=MOD)
					dp[i][j+1]%=MOD;
				}
				if(j>i-j && (i-j)<=b){
					dp[i][j]+=dp[i-1][j];
					if(dp[i][j]>=MOD)
					dp[i][j]%=MOD;
				}
			}
		}
	}
	return dp[a+b][a];
}

int solve2(){
	dp[0][0]=1;
	for(int i=1;i<=a+b;i++){
		for(int j=0;j<=a;j++){
			if(dp[i-1][j]!=0){
				if(((j+1)<=a && (j+1)<=i-(j+1) )|| ((j+1)<=a && i-(j+1)>=b)){
					dp[i][j+1]=dp[i][j+1]+dp[i-1][j];
					if(dp[i][j+1]>=MOD)
					dp[i][j+1]%=MOD;
				}
				if(i-j<=b){
					dp[i][j]=dp[i][j]+dp[i-1][j];
					if(dp[i][j]>=MOD)
					dp[i][j]%=MOD;
				}
			}
		}
	}
	return dp[a+b][a];
}


int main()
{
	freopen("c.txt","r",stdin);
    freopen("out.txt","w",stdout);
    //ios_base::sync_with_stdio(0);
	int t,tt=1;
	char ch;
	cin>>t;
	while(t--){
		cin>>a>>ch>>b;
		memset(dp,0,sizeof dp);
		int x=solve1();
		memset(dp,0,sizeof dp);
		int y=solve2();
		cout<<"Case #"<<tt++<<": "<<x<<" "<<y<<endl;	
	}		
}			


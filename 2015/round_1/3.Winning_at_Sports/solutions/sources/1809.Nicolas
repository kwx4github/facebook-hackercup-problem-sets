import sys
from multiprocessing import Process, Queue

results = []
sys.setrecursionlimit(5000)

def rr(q,a,b):
    q.put(r(a,b,0))
def rr2(q,a,b):
    q.put(r2(a,b,0))


def r(a,b, suma):
    x,y = 0,0
    if a == 1 and b==0:
        return 1
    if b<0:
        return 0
    if a-1 > b:
        if (a-1,b) in memo_free:
            x = memo_free[(a-1,b)]
        else:
            x = r(a-1,b,suma)
    if (a,b-1) in memo_free:
        y = memo_free[(a,b-1)]
    else:
        y = r(a,b-1,suma)
    memo_free[(a,b)] = (x+y) % 1000000007
    return (x+y) % 1000000007

def r2(a,b, suma):
    x,y = 0,0
    if a == 0 and b==0:
        return 1
    if a<0 or b<0:
        return 0

    if b-1 >= a:
        if (a,b-1) in memo_stress:
            x = memo_stress[(a,b-1)]
        else:
            x = r2(a,b-1,suma)
    if (a-1,b) in memo_stress:
        y = memo_stress[(a-1,b)]
    else:
        y = r2(a-1,b,suma)
    memo_stress[(a,b)] = (x+y) % 1000000007
    return (x+y) % 1000000007


# res1= Process(target=rr, args=(a,b))
# res2= Process(target=rr2, args=(a,b))
# res1.start()
# res2.start()
# res1.join()
# res2.join()

# print results
n = int(raw_input())
for t in xrange(n):
    a,b = map(int, raw_input().split('-'))
    memo_free = {}
    memo_stress = {}
    print "Case #"+str(t+1)+": " + str(r(a,b,0)), str(r2(a,b,0))
/*
***************************************************************************************************************

							Author : Yash Sadhwani

**************************************************************************************************************
*/
#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sc(x) scanf("%c",&x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807


//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}*/

#define MAXN 2010

ll dp1[MAXN][MAXN],dp2[MAXN][MAXN];


int main()
{
	int t; si(t);
	int g=1;
	while(t--){
		string str;
		cin>>str;
		int i;
		int pt1=0,pt2=0;
		for(i=0;i<str.size();i++){
			if(str[i]=='-')break;
		}
		i--;
		int temp=1;
		while(i>=0){
			pt1+=(str[i]-'0')*temp;
			temp*=10;
			i--;
		}
		temp=1;
		for(i=str.size()-1;str[i]!='-';i--){
			pt2=(str[i]-'0')*temp;
			temp*=10;
		}
		for(int i=0;i<=pt1;i++){
			for(int j=0;j<=pt2;j++){
				if(i==0 && j==0)dp1[i][j]=0;
				else if(i==1 && j==0)dp1[i][j]=1;
				else if(i<=j)dp1[i][j]=0;
				else{
					dp1[i][j]=(dp1[i-1][j]+dp1[i][j-1])%mod;
				}
			}
		}
		for(int i=0;i<=pt1;i++){
			for(int j=0;j<=pt2;j++){
				if(i==0 && j==0)dp2[i][j]=0;
				else if(i==0 && j==1)dp2[i][j]=1;
				else if(i>j)dp2[i][j]=0;
				else{
					dp2[i][j]=(dp2[i-1][j]+dp2[i][j-1])%mod;
				}
			}
		}
		if(pt2==0)dp2[pt2][pt2]=1;
		printf("Case #%d: %lld %lld\n",g,dp1[pt1][pt2],dp2[pt2][pt2] );
		g++;
	}
	return 0;
}

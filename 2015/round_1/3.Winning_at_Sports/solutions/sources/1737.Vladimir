#! /usr/bin/python

# By Vladimir Svoboda

import sys
from argparse import ArgumentParser, FileType
from collections import OrderedDict
import gmpy

class ProblemInstance(object):
    def __init__(self, us, other):
        self.our = us
        self.their = other


def parseInput(inFile):
    nbOfProblems = int(inFile.readline().strip())
    pList = list()

    for i in range(nbOfProblems):
        line = inFile.readline().strip().split("-")
        p = ProblemInstance(int(line[0]), int(line[1]))

        pList.append(p)

    return pList


class Solver(object):
    def __init__(self, pb):
        self.pb = pb
        self.div = 1000000007

    def solve(self):
        our, their = self.pb.our, self.pb.their

        return (self._stressFree(our, their), self._stressFul(our, their))

    def _stressFree(self, our, their):

        if their == 0:
            res = 1
        elif their == 1:
            res = gmpy.comb(our + their - 2, their)
        else:
            res = gmpy.comb(our + their - 2, their) - gmpy.comb(our + their - 2, their - 2)

        return int(res % self.div)

    def _stressFul(self, our, their):

        if their < 2:
            res = 1
        else:
            res = gmpy.comb(2 * their, their) - gmpy.comb(2 * their, their - 1)

        return int(res % self.div)


def getCommandLineParser():
    parser = ArgumentParser(description='Autocomplete solver.')
    parser.add_argument('inFile', nargs=1, type=FileType('r'),
                        help='Input file')

    return parser


def main(args):
    pbList = parseInput(args.inFile[0])

    for i, pb in enumerate(pbList):
        solver = Solver(pb)
        answer = solver.solve()

        print("Case #{i}: {x} {y}"
              "".format(i=i+1, x=answer[0], y=answer[1]))


if __name__ == "__main__":
    parser = getCommandLineParser()

    main(parser.parse_args())


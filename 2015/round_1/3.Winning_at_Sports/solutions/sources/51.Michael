#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "winning"

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 2001;
const int MOD = 1000000007;

bool IsStressFree(const vector<int>& perm) {
  int my = 0;
  int other = 0;
  for (int i = 0; i < perm.size(); ++i) {
    if (perm[i] == 0) {
      ++my;
    } else {
      ++other;
    }
    if (my <= other) {
      return false;
    }
  }
  return true;
}

bool IsStressful(const vector<int>& perm, int total_other) {
  int my = 0;
  int other = 0;
  for (int i = 0; i < perm.size(); ++i) {
    if (perm[i] == 0) {
      ++my;
    } else {
      ++other;
    }
    if (my > other && other < total_other) {
      return false;
    }
  }
  return true;
}

pair<int, int> ComputeSlow(int my, int other) {
  int stress_free = 0;
  int stressful = 0;
  vector<int> perm;
  for (int i = 0; i < my; ++i) {
    perm.push_back(0);
  }
  for (int i = 0; i < other; ++i) {
    perm.push_back(1);
  }
  do {
    if (IsStressFree(perm)) {
      ++stress_free;
    }
    if (IsStressful(perm, other)) {
      ++stressful;
    }
  } while (next_permutation(perm.begin(), perm.end()));
  return MP(stress_free, stressful);
}

int main() {
  vvi stress_free(MAXN, vi(MAXN, 0));
  stress_free[1][0] = 1;
  for (int a = 1; a < MAXN; ++a) {
    for (int b = 0; b < a; ++b) {
      if (a + 1 < MAXN) {
        stress_free[a + 1][b] += stress_free[a][b];
        if (stress_free[a + 1][b] >= MOD) {
          stress_free[a + 1][b] -= MOD;
        }
      }
      if (b + 1 < a) {
        stress_free[a][b + 1] += stress_free[a][b];
        if (stress_free[a][b + 1] >= MOD) {
          stress_free[a][b + 1] -= MOD;
        }
      }
    }
  }
  vvi stressful(MAXN, vi(MAXN, 0));
  stressful[0][0] = 1;
  for (int a = 0; a < MAXN; ++a) {
    for (int b = a; b < MAXN; ++b) {
      if (b + 1 < MAXN) {
        stressful[a][b + 1] += stressful[a][b];
        if (stressful[a][b + 1] >= MOD) {
          stressful[a][b + 1] -= MOD;
        }
      }
      if (a + 1 <= b) {
        stressful[a + 1][b] += stressful[a][b];
        if (stressful[a + 1][b] >= MOD) {
          stressful[a + 1][b] -= MOD;
        }
      }
    }
  }
  /*while (true) {
    int my = rand() % 16 + 1;
    int other = rand() % my;
    pii res_slow = ComputeSlow(my, other);
    cerr << my << ' ' << other << endl;
    if (res_slow.first != stress_free[my][other]) {
      cerr << "Wrong stress free: " << stress_free[my][other] << ' ' << res_slow.first << endl;
      break;
    } else if ((other > 0 && res_slow.second != stressful[other - 1][other]) || (other == 0 && res_slow.second != 1)) {
      cerr << "Wrong stressful: ";
      if (other > 0) {
        cerr << stressful[other - 1][other];
      } else {
        cerr << 1;
      }
      cerr << ' ' << res_slow.second << endl;
      break;
    } else {
      cerr << "OK: " << res_slow.first << ' ' << res_slow.second << endl;
    }
  }*/
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
    int my, other;
    string buffer;
    cin >> buffer;
    replace(buffer.begin(), buffer.end(), '-', ' ');
    istringstream in(buffer);
    in >> my >> other;
    int res1 = stress_free[my][other];
    int res2;
    if (other > 0) {
      res2 = stressful[other - 1][other];
    } else {
      res2 = 1;
    }
    cout << "Case #" << test_index + 1 << ": " << res1 << ' ' << res2 << endl;
  }
  return 0;
}

#include <iostream>
#include <fstream>

#define M 1000000007

using namespace std;

long long dpTable[2001][2001];

void populate_dpTable() {
    for (int i = 0; i < 2001; i++) {
        for (int j = 0; j < 2001; j++) {
            if (i < j) {dpTable[i][j] = 0;}
            else if (i == 0 and j == 0) {dpTable[i][j] = 1;}
            else {
                if (j == 0) {dpTable[i][j] = dpTable[i-1][j];}
                else if (i == 0) {dpTable[i][j] = 0;}
                else {
                    dpTable[i][j] = (dpTable[i-1][j] + dpTable[i][j-1]) % M;
                }
            }
        }
    }
}

pair<int, int> processScoreStr(string scoreStr) {
    int hyphenIdx;
    for (int i = 0; i < scoreStr.length(); i++) {
        if (scoreStr[i] == '-') {hyphenIdx = i;}
    }
    string aStr = scoreStr.substr(0, hyphenIdx);
    string bStr = scoreStr.substr(hyphenIdx+1);

    int a = 0, b = 0;

    for (int i = 0; i < aStr.size(); i++) {
        a *= 10;
        a += (aStr[i] - '0');
    }
    for (int i = 0; i < bStr.size(); i++) {
        b *= 10;
        b += (bStr[i] - '0');
    }
    return pair<int, int>(a, b);
}

int T, a, b;
string scoreStr;
int main(void) {
    ifstream fin;
    fin.open("input3.txt");
    ofstream fout("output3.txt");

    populate_dpTable();

    fin >> T;
    for (int i = 0; i < T; i++) {
        fin >> scoreStr;
        pair<int, int> score = processScoreStr(scoreStr);
        a = score.first;
        b = score.second;

        fout << "Case #" << i + 1 << ": " << dpTable[a-1][b] << " " << dpTable[b][b] << "\n";
    }



    fin.close();
    fout.close();
}

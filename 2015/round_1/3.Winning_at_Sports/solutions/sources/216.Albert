#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#define db(v) cout << #v << ": " << v << endl
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define taskname "XXXXXXXXXXXXXXXXXXXXXXXX" // CHANGE!!!
typedef long long i64;
using namespace std;

const int maxN = 2007;
const int MOD = 1e9 + 7;

int more[maxN][maxN];
int notMore[maxN][maxN];

void add(int &x, int y)
{
    x = (x + y) % MOD;
}

void precalc()
{
    more[0][0] = notMore[0][0] = 1;

    // calc more[][]
    forn(a, maxN) forn(b, maxN)
    {
        if (a < maxN - 1 && a + 1 > b)
            add(more[a + 1][b], more[a][b]);
        if (b < maxN - 1 && a > b + 1)
            add(more[a][b + 1], more[a][b]);
    }

    // calc notMore[][]
    forn(a, maxN) forn(b, maxN)
    {
        if (a < maxN - 1 && a + 1 <= b)
            add(notMore[a + 1][b], notMore[a][b]);
        if (b < maxN - 1 && a <= b + 1)
            add(notMore[a][b + 1], notMore[a][b]);
    }
}

void solve()
{
    int T; cin >> T;
    fore(t, 1, T)
    {
        int a, b;
        cin >> a >> b;
        b *= -1;
        int noStress = more[a][b];
        int stress = notMore[b][b];
        cout << "Case #" << t << ": " << noStress << ' ' << stress << '\n';
    }
}

int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    precalc();
    solve();

#ifdef HOME
    cerr << "\nTime elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

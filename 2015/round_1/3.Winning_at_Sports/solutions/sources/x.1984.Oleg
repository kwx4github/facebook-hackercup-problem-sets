#include <iostream>
#include <cstdio>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <utility>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>


using namespace std;

typedef long long LL;
template<class T> inline T Abs(const T& x) { return x < 0 ? -x : x; }
template<class T> inline T Sqr(const T& x) { return x * x; }


const int P = 1000 * 1000 * 1000 + 7;

const int maxn = 2020;
int ans[maxn][maxn];

inline void Add(int& sum, int add) {
    sum += add;
    if (sum >= P) {
        sum -= P;
    }
}

pair<int, int> Fast(int a, int b) {
    memset(ans, 0, sizeof(ans));
    ans[1][0] = 1;
    for (int i = 1; i <= a; ++i) {
        for (int j = 0; j <= b; ++j) {
            if (i > j) {
                if (i - 1 > j) {
                    Add(ans[i][j], ans[i - 1][j]);
                }
                if (j - 1 >= 0) {
                    Add(ans[i][j], ans[i][j - 1]);
                }
            }
        }
    }

    int A = ans[a][b];
    if (b == 0) {
        return make_pair(A, 0);
    }

    memset(ans, 0, sizeof(ans));
    ans[0][1] = 1;
    for (int i = 0; i <= b; ++i) {
        for (int j = 0; j <= b; ++j) {
            if (i <= j) {
                if (i > 0) {
                    Add(ans[i][j], ans[i - 1][j]);
                }
                if (j - 1 >= i) {
                    Add(ans[i][j], ans[i][j - 1]);
                }
            }
        }
    }

    int B = ans[b][b];

    return make_pair(A, B);
}


void Solution() {
    string s;
    cin >> s;
    for (size_t i = 0; i < s.length(); ++i) {
        if (s[i] == '-') {
            s[i] = ' ';
        }
    }
    istringstream ins(s);
    int a, b;
    ins >> a >> b;
    auto res = Fast(a, b);
    cout << res.first << ' ' << res.second << endl;
}


int main() {
    ios_base::sync_with_stdio(false);

    int testNum = 0;
    cin >> testNum;
    for (int t = 1; t <= testNum; ++t) {
        cout << "Case #" << t << ": ";
        Solution();
    }

    return 0;
}



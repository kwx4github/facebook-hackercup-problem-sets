import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class C {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    long MOD = 1000000007;
    public void solveCase() throws IOException {
        String[] input = reader.readLine().split("-");
        int S1 = Integer.parseInt(input[0]);
        int S2 = Integer.parseInt(input[1]);

        long[][] dp = new long[S1+1][S2+1];
        long[][] dp2 = new long[S1+1][S2+1];
        dp[0][0] = 1;
        dp2[0][0] = 1;
        for (int i = 0; i <= S1; i++) {
            for (int j = 0; j <= S2; j++) {
                if (i < S1) {
                    dp[i+1][j] = mod_add(dp[i+1][j], dp[i][j]);
                }
                if (j + 1 < i && j < S2) {
                    dp[i][j+1] = mod_add(dp[i][j+1], dp[i][j]);
                }

                if (j < S2) {
                    dp2[i][j+1] = mod_add(dp2[i][j+1], dp2[i][j]);
                }
                if (((i < j) || (j == S2)) && i < S1) {
                    dp2[i+1][j] = mod_add(dp2[i+1][j], dp2[i][j]);
                }
            }
        }
        out.print(dp[S1][S2] + " " + dp2[S1][S2]);
    }

    public long mod_add(long n1, long n2){
        return (n1 + n2) % MOD;
    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            out.print("Case #" + t + ": ");
            solveCase();
            out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new C().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

// BEGIN CUT HERE
// PROBLEM STATEMENT
// John is standing at the origin of an infinite two-dimensional grid.
// He is going to move along this grid.
// During each second he can either stay where he is or he can move by one unit 
// in one of the four cardinal directions (north, south, east, or west).
// Some of the grid points are blocked.
// John is not allowed to move to a blocked grid point.
// 
// 
// You are given the coordinates of the blocked grid points as vector <int>s x 
// and y.
// For each valid i, the grid point that is x[i] units east and y[i] units north 
// of the origin is blocked.
// You are also given an int k.
// Compute and return the maximal possible x-coordinate of a point John can reach 
// in k seconds.
// 
// 
// DEFINITION
// Class:TheGridDivOne
// Method:find
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int find(vector <int> x, vector <int> y, int k)
// 
// 
// CONSTRAINTS
// -x will contain between 0 and 47 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element of x will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -Each element of y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -All pairs (x[i], y[i]) will be distinct.
// -Each pair (x[i], y[i]) will be different from (0, 0).
// -k will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,1,1}
// {-2,-1,0,1}
// 4
// 
// Returns: 2
// 
// The optimal strategy is to move two times north to (0, 2) and then two times 
// east to (2,2).
// 
// 1)
// {-1, 0, 0, 1}
// {0, -1, 1, 0}
// 9
// 
// Returns: 0
// 
// John can not make any moves.
// 
// 2)
// {}
// {}
// 1000
// 
// Returns: 1000
// 
// 
// 
// 3)
// {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4}
// {0,-1,1,-2,2,-3,3,-4,4,-5,5}
// 47
// 
// Returns: 31
// 
// 
// 
// END CUT HERE
#include <algorithm>
#include <functional>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define VT vector
typedef VT<int> VI;
typedef VT<VI> VVI;
typedef VT<string> VS;
typedef VT<double> VD;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define ALL(c) c.begin(),c.end()
#define PB push_back
#define MP make_pair
#define FS first
#define SC second
#define SZ size() 


const int mod = 1000*1000*1000+7;

int main(int argc, char* argv[])
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	const int n = 2000;
	VVI stressful(n+1, VI(n+1));
	VVI stress_free(n+1, VI(n+1));

	stress_free[0][0]=1;
	
	for(int their = 0; their <= n; ++their)
		stressful[their][0] = 1;

	for(int our = 1; our <= n; ++our)
	{
		for(int their = 0; their <= n; ++their)
		{
			if (our > their)
			{
				stress_free[their][our] = stress_free[their][our-1] + (their ? stress_free[their-1][our] : 0);

				if (stress_free[their][our] >= mod)
					stress_free[their][our] -= mod;
			}

			if (their >= our)
			{
				stressful[their][our] = stressful[their][our-1] + stressful[their-1][our];

				if (stressful[their][our] >= mod)
					stressful[their][our] -= mod;
			}
		}
	}


	int T;
	scanf("%d", &T);
	REP(t, T)
	{
		int a, b;
		scanf("%d-%d", &a, &b);

		int free = stress_free[b][a];
		int stress = stressful[b][b];

		cout << "Case #" << (t+1) << ": " << free << " " << stress << endl;




	}
}

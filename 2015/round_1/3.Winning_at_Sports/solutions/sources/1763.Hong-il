#include <vector>
#include <valarray>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <complex>
using namespace std;
typedef long long ll;
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)

const int ALPHABETS = 26;
int toNumber(char ch) {return ch-'a';}
const int MOD = 1000000007L;

ll cache[2001][2001];
int n;
int m, o;
ll solveFul(int k, int mine, int opp)
{
    if (k == n)
        return 1;

    ll& ret = cache[mine][opp];
    if (ret != -1)
        return ret;

    ret = 0;

    if (opp == o)
    {
        ret += solveFul(k+1,mine+1, opp) % MOD;
        ret %= MOD;
    }
    else
    {
        if (mine == opp)
            ret += solveFul(k+1,mine, opp+1) % MOD;
        else if (mine < opp)
        {
            ret += solveFul(k+1,mine+1, opp) % MOD;
            ret %= MOD;
            ret += solveFul(k+1,mine, opp+1) % MOD;
        }
        ret %= MOD;
    }

    return ret;
}
ll solveLess(int k, int mine, int opp)
{
    if (k == n)
        return 1;

    ll& ret = cache[mine][opp];
    if (ret != -1)
        return ret;

    ret = 0;

    if (mine == m)
    {
        ret += solveLess(k+1, mine, opp+1) % MOD;
        ret %= MOD;
    }
    else
    {
        if (mine > opp + 1)
        {
            if (opp < o)
            {
                ret += solveLess(k+1, mine, opp+1) % MOD;
                ret %= MOD;
            }
        }
        ret += solveLess(k+1, mine+1, opp) % MOD;
        ret %= MOD;
    }
    return ret;
}

int main()
{
    FILE *fin = freopen("input.txt","r",stdin);
	FILE *fout = freopen("output.txt","w",stdout);
    int t;
    scanf("%d", &t);

    FOR(xx, 0, t)
    {
        memset(cache, -1, sizeof(cache));
        n = 0;
        char tmp[100];
        memset(tmp, 0, sizeof(tmp));
        scanf("%s", tmp);
        bool myPoint = true;
        string mymy, opop;
        FOR(i,0,strlen(tmp))
        {
            if (tmp[i] == '-')
            {
                myPoint = false;
                continue;
            }
            if (myPoint)
                mymy += tmp[i];
            else
                opop += tmp[i];
        }
        std::istringstream ss(mymy);
        ss >> m;
        std::istringstream sa(opop);
        sa >> o;
        n = m+o;
        ll first = solveLess(0,0,0);
        memset(cache, -1, sizeof(cache));
        ll second = solveFul(0,0,0);
        printf("Case #%d: %lld %lld\n", xx+1, first, second);
    }

    fclose(fout);
    fclose(fin);
    return 0;
}
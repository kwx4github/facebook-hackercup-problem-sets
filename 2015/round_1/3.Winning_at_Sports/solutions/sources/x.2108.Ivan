//#pragma comment(linker,"/STACK:16777216") /*16Mb*/
//#pragma comment(linker,"/STACK:33554432") /*32Mb*/
#define _CRT_SECURE_NO_DEPRECATE
#include<sstream>
#include<iostream>
#include<numeric>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<memory>
#include<memory.h>
#include<string>
#include<vector>
#include<cctype>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<complex>
#include<set>
#include<algorithm>

using namespace std;

typedef unsigned long long      ui64;
typedef long long               i64;
typedef	vector<int>             VI;
typedef	vector<bool>            VB;
typedef	vector<VI>              VVI;
typedef	vector<string>          VS;
typedef	pair<int,int>           PII;
typedef set<int>                SI;
typedef set<string>             SS;
typedef complex<double>         CD;
typedef vector< CD >            VCD;
typedef	pair<double,double>     PDD;

#define PB                      push_back
#define MP                      make_pair
#define X                       first
#define Y                       second
#define FOR(i, a, b)            for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b)           for(int i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b)             memset(a, b, sizeof(a))
#define SZ(a)                   int((a).size())
#define ALL(a)                  (a).begin(), (a).end()
#define RALL(a)                 (a).rbegin(), (a).rend()
#define INF                     (2000000000)

#ifdef _DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MOD = 1000000000 + 7;
const int MAXN = 2000 + 4;

int map[MAXN][MAXN];


class Stressfree {
private:
	
public:
	Stressfree() {
		memset(map, -1, sizeof(map));
		map[0][0] = 0;
	}
	int r(int a, int b) {
		if(map[a][b] != -1) {
			return map[a][b];
		}
		int tres = 0;
		if(b==0) {
			return 1;
		}
		if(a > 0 && a-1 > b) {
			tres += r(a-1, b);
		}
		if(b > 0) {
			tres += r(a, b-1);
		}
		
		tres %= MOD;
		return map[a][b] = tres;
	}
};


class Stressful {
private:
	int finalMissed;
public:
	Stressful() {
		memset(map, -1, sizeof(map));
		map[0][0] = 0;
		finalMissed = -1;
	}

	int r(int a, int b) {
		if(finalMissed == -1) {
			finalMissed = b;
		}
		if(map[a][b] != -1) {
			return map[a][b];
		}
		
		if(a==0) {
			return 1;
		}

		int tres = 0;
		if(a > 0 && ((a-1 <= b) || (b == finalMissed)) ) {
			tres += r(a-1, b);
		}

		if(b > 0 && (a <= b-1) ) {
			tres += r(a, b-1);
		}

		tres %= MOD;
		return map[a][b] = tres;
	}
};

class Solution {
private:
	int a, b;
public:
	Solution() {
		
	}

	void solve() {
		b = 1800 + rand()%200;
		a = b + 1 + rand()%(2000-b-1);

		scanf("%d-%d", &a, &b);
		Stressfree stressfree;
		int r1 = stressfree.r(a, b);
		Stressful stressful;
		int r2 = stressful.r(a, b);
		cout << r1 << " " << r2;
		cerr << r1 << " " << r2;
	}
};

int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int test;
	scanf("%d",&test);
	FOR(test_id,1,test+1) {
		printf("Case #%d: ", test_id);
		cerr << "case #" << test_id << "\n\t";
		Solution s;
		s.solve();
		printf("\n");
		cerr << ".\n";
	}
	return 0;
}
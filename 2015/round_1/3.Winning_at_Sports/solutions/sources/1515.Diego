#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

struct Counter
{
	static int k;
	Counter() {k++;}
	~Counter() {k--;}
};

int Counter::k = 0;

template<typename T>
void pr(const string& name, T t)
{
    cout << name << " = " << t << endl;
}

template<typename T, typename ... Types>
void pr(const string& names, T t, Types ... rest)
{
    auto comma_pos = names.find(',');
    cout << names.substr(0, comma_pos) << " = " << t << ", ";

    auto next_name_pos = names.find_first_not_of(" \t\n", comma_pos + 1);
    pr(string(names, next_name_pos), rest ...);
}

void mod(ll &a, ll b)
{
    a %= b;
    if(a < 0) a += b;
}

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define trace(...) pr(#__VA_ARGS__, __VA_ARGS__);
#define tracea(x) {string s = #x; Counter c##x; cout<<s.substr(0,1+s.find('['))<<Counter::k<<"]="<<x<<'\n';}
#define vii vector<pair<int,int>>

const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

ifstream fin("winning.in");
ofstream fout("winning.out");

char C;
int A,B,T;
ll DP[2005][2005];

int main()
{
    fin >> T;

    f(t,1,T)
    {
        fin >> A >> C >> B;

        fout << "Case #" << t << ": ";

        // Stress-free

        f(i,0,2000) f(j,0,2000) DP[i][j] = 0;

        DP[0][0] = 1;

        f(i,1,A) f(j,0,B)
        {
            if(j >= i) continue;
            DP[i][j] += DP[i-1][j];
            if(j>0) DP[i][j] += DP[i][j-1];
            DP[i][j] %= MOD;
        }

        fout << DP[A][B] << " ";

        // Stressful

        f(i,0,2000) f(j,0,2000) DP[i][j] = 0;

        DP[0][0] = 1;

        f(i,0,A) f(j,0,B)
        {
            if(i > j && j != B) continue;
            if(i>0) DP[i][j] += DP[i-1][j];
            if(j>0) DP[i][j] += DP[i][j-1];
            DP[i][j] %= MOD;
        }

        fout << DP[A][B] << "\n";
    }
}

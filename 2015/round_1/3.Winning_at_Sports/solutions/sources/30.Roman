#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int md = (int)1e9 + 7;
void add(int& x, int y) { 
  x += y;
  if (x >= md) {
    x -= md;
  }
}
int dp1[2010][2010];
int dp2[2010][2010];

int main() {
    #ifdef home
    assert(freopen(problem_name".out","wt",stdout));
    assert(freopen(problem_name".in","rt",stdin));
    #endif
    int T;
    scanf("%d", &T);
    for (int ti = 1; ti <= T; ti++) {
      printf("Case #%d: ", ti);
      int n, m;
      scanf("%d-%d", &n, &m);
      memset(dp1, 0, sizeof(dp1));
      memset(dp2, 0, sizeof(dp2));
      dp1[0][0] = 1;
      dp2[0][0] = 1;
      for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= m; j++) {
          int k[2] = {i, j};
          for (int w = 0; w < 2; w++) {
            k[w]++;
            if (k[0] > k[1]) {
              add(dp1[k[0]][k[1]], dp1[i][j]);
            }
            if ((k[0] <= k[1] && k[1] != m) || (k[1] == m)) {
              add(dp2[k[0]][k[1]], dp2[i][j]);
            }
            k[w]--;
          }
        }
      }      
      printf("%d %d\n", dp1[n][m], dp2[n][m]);
    }
    return 0;
}

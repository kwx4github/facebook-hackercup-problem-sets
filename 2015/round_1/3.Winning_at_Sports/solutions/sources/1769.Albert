import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.StringTokenizer;


/**
 * C. Winning at Sports (25 points)
 * @author Albert Choi
 */
public class C {
	static BufferedReader _reader = new BufferedReader(new InputStreamReader(System.in));
	static String _s;
	static StringTokenizer _st;
	static int _l;
	static String nline() throws IOException { _s = _reader.readLine(); ++_l; _st = new StringTokenizer(_s, " \t\n\r\f-"); return _s; }
	static String nword() 	{ return _st.nextToken(); }
	static int nint() 		{ return Integer.parseInt(nword()); }
	static long nlong() 	{ return Long.parseLong(nword()); }
	static double ndouble() { return Double.parseDouble(nword()); }
	static BigInteger nbig(){ return new BigInteger(nword()); }
	static PrintStream sout = System.out, serr = System.err;
	
	public static void main(String[] args) throws IOException {
		dp();
		try {
			nline();
			int T = nint();
			for (int t=1; t<=T; t++) {
				String sans = doProblem();
				sout.println("Case #" + t + ": " + sans);
			}
		} catch (Throwable t) {
			System.err.println("At input line " + _l + ": " + _s); throw t;
		}
	}
	
	static String doProblem() throws IOException {
		nline();
		int W = nint();
		int L = nint();
		int stressfree = ahead[W][L];
		int stressful = aheadOrTie(L,L);
		return stressfree+" "+stressful;
	}
	
	static final int N = 2000;
	static final int MOD = 1000000007;
	static int[][] ahead = new int[N+1][N+1];
	static void dp() {
		for (int i=1; i<N+1; i++) {
			for (int j=0; j<N+1; j++) {
				int r=0;
				if (i > j) {
					if (j==0) r = 1;
					else {
						// assert i>0, j>0
						r = ( (ahead[i-1][j] ) + (ahead[i][j-1] ) ) % MOD;
					}
				}
				ahead[i][j] = r;
			}
		}
	}
	static int aheadOrTie(int W, int L) {
		return ahead[W+1][L];
	}

}

#include <stdio.h>

long long MOD = 1000000007LL;
int Y, O;

void solve(int t) {
  char ch;
  scanf("%d%c%d", &Y, &ch, &O);
  //printf("%d, %d\n", Y, O);

  long long Memo[2][2010];

  // case stress-free 
  // look from your side
  for (int i=0; i<=Y; i++)
    Memo[0][i] = Memo[1][i] = 0LL;
  int step = 1;
  Memo[step % 2][1] = 1LL; // step 1, you win for sure

  for (step = 2; step <= Y+O; ++step) {
    for (int i=0; i<=Y; i++)
      Memo[step % 2][i] = 0LL;

    for (int you = 0; you <= Y; you++) {
      if (!Memo[(step-1) % 2][you])
        continue;
      int opponent = step - 1 - you;
      if (opponent >= you)
        continue;
      if (opponent + 1 < you) // at this turn you can still loose
      {
        Memo[step % 2][you] += Memo[(step-1) % 2][you];
        Memo[step % 2][you] %= MOD;
      }
      if (you < Y) {
        Memo[step % 2][you+1] += Memo[(step-1) % 2][you]; // you win
        Memo[step % 2][you+1] %= MOD;
      }
    }
  }
  long long stress_free = Memo[(step-1) % 2][Y];

  // case stress-full 
  // look from opponent's side
  for (int i=0; i<=Y; i++)
    Memo[0][i] = Memo[1][i] = 0LL;
  step = 1;
  Memo[step % 2][1] = 1LL; // step 1, you win for sure

  for (step = 2; step <= Y+O; ++step) {
    for (int i=0; i<=Y; i++)
      Memo[step % 2][i] = 0LL;

    for (int opponent = 0; opponent <= O; opponent++) {
      if (!Memo[(step-1) % 2][opponent]) continue;
      int you = step - 1 - opponent;
      if (opponent == O) { // opponent looses for sure
        Memo[step % 2][opponent] += Memo[(step-1) % 2][opponent];
        Memo[step % 2][opponent] %= MOD;
        continue;
      } 

      if (you + 1 <= opponent) // at this turn opponent can still loose
      {
        Memo[step % 2][opponent] += Memo[(step-1) % 2][opponent];
        Memo[step % 2][opponent] %= MOD;
      }
      Memo[step % 2][opponent+1] += Memo[(step-1) % 2][opponent]; // opponent wins
      Memo[step % 2][opponent+1] %= MOD;
    }
  }

  long long stress_full = Memo[(step-1) % 2][O];
  
  printf("Case #%d: %lld %lld\n", t, stress_free, stress_full);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int i = 1; i <= T; i++)
    solve(i);
  return 0;
}

"""
This script may use libraries publicly available at: https://github.com/grokit/dcore.

Does this solution solve:
   Small: ?.
   Big:   ?.
"""

import dcore.gcj_boot as boot

import sys
sys.setrecursionlimit(2000*2000*5) 

def readProblem(fh):
    m, t = [int(x) for x in fh.readline().strip().split('-')]
    return (m, t)

def stressFree(m, t, H):

    if (m,t) in H:
        return H[(m,t)]

    # You have to score the first goal.
    if m == 1 and t == 0:
        return 1

    if m == 0:
        print(t)
        assert t == 0
        return 0 

    count = 0 
    if m > t + 1:
        count += stressFree(m-1, t, H)

    if t > 0:
        count += stressFree(m, t-1, H)

    H[(m,t)] = count
    return count

def stressful(m, t, tFinal, H):
    #print((m,t))
    assert m >= 0
    assert t >= 0

    if (m,t) in H:
        return H[(m,t)]

    if m == 0 and t == 0:
        return 1 

    count = 0 
    if t > 0 and t > m:
        count += stressful(m, t-1, tFinal, H)

    if m > 0 and (m <= t or t == tFinal):
        count += stressful(m-1, t, tFinal, H)

    H[(m,t)] = count
    return count

def solve(p):
    m, t = p
    sFree = -1
    sFree = stressFree(m, t, {}) % 1000000007
    sFull = stressful(m, t, t, {}) % 1000000007
    return "%i %i" % (sFree, sFull)

boot.solve(solve, readProblem, '.*sports')

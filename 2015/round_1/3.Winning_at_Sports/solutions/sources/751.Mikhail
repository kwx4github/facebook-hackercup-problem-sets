#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

template<class T>
bool uin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

const i64 P = 1000000000 + 7;
const int MAXP = 2010;
i64 st[MAXP + 1][MAXP + 1], fr[MAXP + 1][MAXP + 1];

void add(i64 &x, i64 y) {
    x += y;
    x %= P;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    fr[1][0] = 1;
    forn(i, MAXP) forn(j, i) {
        add(fr[i + 1][j], fr[i][j]);
        if (j + 1 < i) add(fr[i][j + 1], fr[i][j]);
    }

    st[0][0] = 1;
    forn(i, MAXP) forn(j, MAXP) {
        add(st[i][j + 1], st[i][j]);
        if (i + 1 <= j) add(st[i + 1][j], st[i][j]);
    }

    int T;
    scanf("%d", &T);
    for1(t, T) {
        cout << "Case #" << t << ": ";
        int a, b;
        scanf("%d-%d\n", &a, &b);
        i64 res = 0;
        if (b == 0) res = 1;
        for (int i = 0; i < b; ++i) add(res, st[i][b - 1]);
        cout << fr[a][b] << ' ' << res << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}

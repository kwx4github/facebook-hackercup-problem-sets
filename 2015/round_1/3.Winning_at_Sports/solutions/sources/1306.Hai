#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

const int N = 2345;
const int MOD = 1e9 + 7;

int x[N][N], y[N][N];


int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int tt;
    std::cin >> tt;
    for (int tn = 1; tn <= tt; ++tn) {
        memset(x, 0, sizeof(x));
        memset(y, 0, sizeof(y));
        std::string s;
        std::cin >> s;
        int p = s.find('-');
        auto convert = [] (const std::string& s) {
            std::stringstream ss(s);
            int r;
            ss >> r;
            return r;
        };
        int a = convert(s.substr(0, p));
        int b = convert(s.substr(p + 1, s.size() - p - 1));
        std::cerr << "a = " << a << " b = " << b << '\n';
        auto add = [] (int& a, int b) {
            a = (a + b) % MOD;
        };
        x[0][0] = 1;
        for (int i = 1; i <= a + b; ++i)
            for (int j = std::min(i, a); j > i - j; --j) {
                if (j > 0)     add(x[j][i - j], x[j - 1][i - j]);
                if (i - j > 0) add(x[j][i - j], x[j][i - j - 1]);
            }
        y[0][0] = 1;
        for (int i = 1; i <= b + b; ++i)
            for (int j = std::min(i, b); j >= i - j; --j) {
                if (j > 0)     add(y[j][i - j], y[j - 1][i - j]);
                if (i - j > 0) add(y[j][i - j], y[j][i - j - 1]);
            }
        std::cout << "Case #" << tn << ": " << x[a][b] << ' ' << y[b][b] << '\n';
    }
}

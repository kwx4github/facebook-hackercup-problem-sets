#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <functional>
#include <hash_map>
#include <iostream>
#include <iomanip>
#include <list>
#include <deque>
#include <queue>
#include <math.h>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
#define debug(x) cerr<<#x<<" = "<<(x)<<endl;
bool test = false;
const double pi=acos(-1.0);
const double eps=1e-11;
int breakpoint = 0;

const char rootdir[] = "C:\\HackerCup\\WinningAtSports";
void reopen(char* a) {
  char input[256], output[256];
  sprintf(input, "%s\\%s", rootdir, a);
  sprintf(output, "%s\\%s", rootdir, a);
  char *p = strstr(output, ".in");
  if (p) sprintf(p, ".out"); 
  else sprintf(&output[strlen(output)], ".out");
  debug(input);
  freopen(input, "r", stdin);
  if (!test) {
    debug(output);
    freopen(output,"w",stdout);
  }
}

int T;
int A;
int B;
const int M = 2001;
__int64 m[M][M];
const __int64 MOD = 1000000007L;

int main(int argc, char* argv[]) {
  test = false;
  // reopen("winning_at_sports_example_input.txt");
  reopen("winning_at_sports.txt");

  for (int i = 0; i < M; i++) for (int j = 0; j < M; j++) m[i][j] = 0;
  m[2][0] = 1;
  for (int x = 2; x < M; x++) {
    for (int y = 0; y < x; y++) {
      if (x-1 > y) m[x][y] += m[x-1][y];
      if (y > 0) m[x][y] += m[x][y-1];
      m[x][y] %= MOD;
    }
  }

  // stressful
  m[0][1] = 1;
  for (int x = 0; x < M; x++) {
    for (int y = x; y < M; y++) {
      if (x > 0) m[x][y] += m[x-1][y];
      if (x <= y-1) m[x][y] += m[x][y-1];
      m[x][y] %= MOD;
    }
  }

  scanf("%d\n", &T);
  for(int t=1; t<=T; t++) {
    scanf("%d-%d\n", &A, &B);
    if (test) printf("%d-%d\n", A, B);
    printf("Case #%d: %lld %lld\n", t, m[A][B], m[B][B]);
  }

  return 0;
}
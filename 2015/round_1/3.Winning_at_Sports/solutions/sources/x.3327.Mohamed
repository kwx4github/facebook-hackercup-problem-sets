#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<cmath>
#include<string>
#include<cstdio>
#include<sstream>
#include<map>
#include<list>
#include<queue>
#include<set>
#include<numeric>
#include<functional>
#include <bitset>
using namespace std;


int  mem [2100][2100] ;
int  m [2100][2100] ;
int I , J ;


int  stressful (int   i , int j ){

	if (i == I  && j == J  && (i && j))
		return 1 ;

	if (i > I || j >  J  || (i > j  && j < J) )
		return 0  ;

	if (m[i][j]  != -1)  return m[i][j] ;

	return m[i][j] = (stressful(i + 1 , j) % 1000000007 +  stressful(i , j + 1) % 1000000007 ) % 1000000007;

}

int  stress (int   i , int j ){

	if (i == I  && j == J)
		return 1 ;

	if (i > I || j >  J  || (j >= i   && (j != 0) ) )
		return 0  ;

	if (mem[i][j] != -1)  return  mem[i][j] ;

	return  mem[i][j]= (stress(i + 1 , j) % 1000000007 +  stress(i , j + 1) % 1000000007) % 1000000007;

}


pair <int , int >  sep  (string  x ){

	int  index  = 0 ;
	stringstream ss ;
	pair <int , int> pa ;
	for (int  i = 0 ; i <  x.size() ; i++)  if (x[i] < '0'   || x[i] > '9'  ) index  = i   ;

	ss << x.substr(0 , index) ;
	ss >> pa.first ;
	ss.clear() ;
	ss << x.substr(index + 1 , x.size() - index + 1) ;
	ss >> pa.second ;
	return pa ;

}





int main() {

	int t  ;
	scanf("%d" , &t) ;

	int  c = 0 ;
	while (t--){
		memset(mem , -1 , sizeof (mem)) ;
		memset(m, -1 , sizeof (m)) ;
		I = 0  ; J = 0 ;
		string  input ;
		cin >>  input  ;
		I = sep(input).first ; J = sep(input).second ;
		printf("Case #%d: %d %d\n" , ++c , stress(0,0) , stressful(0,0) );
	}

	return  0 ;
}

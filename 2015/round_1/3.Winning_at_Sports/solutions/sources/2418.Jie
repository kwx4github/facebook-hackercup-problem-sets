#include <cstdio>
#include <iostream>
#include <map>
#include <algorithm>
#include <vector>
#include <cstring>
#include <sstream>
#include <cassert>
#include <cmath>
#include <queue>
using namespace std ; 

typedef long long int64; 

#define two(x) (((long long) 1)<<(x))
#define SZ(x) (int)x.size()
#define LEN(x) (int)x.length()
//typedef long long int64 ; 
typedef long long int64 ;

const int mod = 1e9 + 7; 

int main (){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int cas; 
    vector < vector<int> > dp( 4000 + 1, vector< int >(2000+1,0));  
    cin >> cas;  
    for(int c = 1; c <= cas; ++c){
        int x,y ; 
        scanf ("%d-%d", &x,&y); 
        cout <<"Case #"<<c <<": "; 
        if(x <= y ){
            cout <<0<<endl; 
            continue;
        }
        for(int i = 0 ; i <= x + y ; ++i)
            fill(dp[i].begin(), dp[i].end(), 0);
        dp[1][0]=1; 

        for(int i =1; i < x + y ;++i){
            for(int j=0 ; j <= y ; ++j){
                if(!dp[i][j]) continue;
                int winx = i - j ;
                dp[ i + 1][ j] += dp[i][j]; 
                if(dp[i+1][j]>=mod) dp[i+1][j] -= mod;
                if(j + 1 <= y && winx > j + 1 ){
                    dp[i+1][j+1] += dp[i][j]; 
                    if(dp[i+1][j+1] >= mod)
                        dp[i+1][j+1] -= mod; 
                }
            }
        }
        int stress_free = dp[x+y][y];

        for(int i =0; i <= x + y ; ++i)
            fill(dp[i].begin(), dp[i].end(),0);
        dp[0][0]=1; 
        for(int i = 0 ; i < x + y ; ++i){
            for(int j=0; j <=y; ++j){
                if(!dp[i][j]) continue;
                int winx = i - j ; 
                if( j == y ){
                    dp[i+1][j] += dp[i][j]; 
                    if(dp[i+1][j] >= mod)
                        dp[i+1][j] -= mod;
                }else{ 
                    dp[i+1][j+1] += dp[i][j]; 
                    if(dp[i+1][j+1] >= mod)
                        dp[i+1][j+1] -= mod; 
                    if( winx + 1 <= j){
                        dp[i+1][j] += dp[i][j]; 
                        if(dp[i+1][j] >= mod)
                            dp[i+1][j] -= mod;
                    }
                }
            }
        }
        int stress_full = dp[x+y][y];
        cout << stress_free << " " << stress_full << endl; 
    }
    return 0;
}




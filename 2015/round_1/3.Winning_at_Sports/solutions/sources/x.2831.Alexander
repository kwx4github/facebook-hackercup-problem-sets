package facebook.round1;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Locale;
import java.util.Scanner;

public class WinningAtSports {

    static int mod = 1000000007;

    static PrintStream out;

    static PrintStream openOut(String name) {
        try {
            return new PrintStream(new FileOutputStream(name, false));
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }

    public static void main(String[] args) {
        try (PrintStream out = openOut("output.txt")) {
            Locale.setDefault(Locale.US);
            final Scanner scanner = new Scanner(System.in);
            final int T = scanner.nextInt();
            for (int i = 0; i < T; i++) {
                String[] scores = scanner.next().split("-");
                int n = Integer.parseInt(scores[0]);
                int m = Integer.parseInt(scores[1]);
                int[][] stressFull = new int[n + 1][m + 1];
                int fullWays = 0;
                for (int j = 0; j < m; j++) {
                    fullWays = (fullWays + stressFull(j, m, stressFull)) % mod;
                }
                out.format("Case #%s: %s %s", i + 1, stressFree(n - 1, m, new int[n][m + 1]), fullWays).println();
            }
        }
    }

    static int stressFree(int i, int j, int[][] plane) {
        // position 0,0 ~ 1:0 score, position i,j ~ i+1:j score,
        // cell will be non zero only if i+1 > j coz 1st score is always more than 2nd
        if (i + 1 <= j || i < 0 || j < 0) {
            return 0; // non-feasible cell, no paths from here
        }
        if (i == 0 && j == 0) {
            return 1; // number paths to zero point
        }
        if (plane[i][j] != 0) {
            return plane[i][j];
        }
        plane[i][j] = (stressFree(i - 1, j, plane) + stressFree(i, j - 1, plane)) % mod;
        return plane[i][j];
    }

    static int stressFull(int i, int j, int[][] plane) {
        // position i,j ~ i:j score, plane has j score = final - 1
        // cell will be non zero only if i < j coz 1st score is always less than 2nd
        if (i >= j || i < 0 || j < 0) {
            return 0; // non-feasible
        }
        if (i == 0 && j == 1) {
            return 1;
        }
        if (plane[i][j] != 0) {
            return plane[i][j];
        }
        plane[i][j] = (stressFull(i - 1, j, plane) + stressFull(i, j - 1, plane)) % mod;
        return plane[i][j];
    }
}

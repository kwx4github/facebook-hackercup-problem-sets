#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

class Solution
{
    static const int MOD = 1000000007;
    static const int MAX = 2013;
    int StressFul, StressFree;
    int A, B;

    int _curr[ MAX + 1 ], _prev[ MAX + 1 ];
public:
    void Work()
	{
        int i, a, b;
        int *curr = _curr;
        int *prev = _prev;

        memset( _curr, 0, sizeof( _curr ) );
        memset( _prev, 0, sizeof( _prev ) );

        curr[ 1 ] = 1;

        for( i = 2; i <= A + B; ++i )
        {
            swap( curr, prev );

            for( b = 0; 2 * b < i && b <= B; ++b )
            {
                a = i - b;
                if( a > A )
                    continue;
                curr[ a - b ] = ( prev[ a - b - 1 ] + prev[ a - b + 1 ] ) % MOD;
            }
        }

        StressFree = curr[ A - B ];

        memset( _curr, 0, sizeof( _curr ) );
        memset( _prev, 0, sizeof( _prev ) );

        curr[ 0 ] = 1;
        for( i = 1; i <= 2 * B; ++i )
        {
            swap( curr, prev );

            for( a = 0; 2 * a <= i && a <= A; ++a )
            {
                b = i - a;
                if( b > B )
                    continue;
                curr[ b - a ] = prev[ b - a + 1 ];
                if( b - a - 1 >= 0 )
                    curr[ b - a ] = ( curr[ b - a ] + prev[ b - a - 1 ] ) % MOD;
            }
        }

        StressFul = curr[ 0 ];
	}
	
	void Read()
	{
        scanf( "%d-%d", &A, &B );
	}

	void Write( int t )
	{
		printf( "Case #%d: %d %d\n", t, StressFree, StressFul );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
		solution[ i ].Read();
#pragma omp parallel for schedule(dynamic, 1)
	for( i = 0; i < t; ++i )
		solution[ i ].Work();
	for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
	return 0;
}

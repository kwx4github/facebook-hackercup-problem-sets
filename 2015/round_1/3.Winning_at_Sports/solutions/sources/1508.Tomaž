#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <math.h>
#include <queue>
#include <list>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <ctime>
using namespace std;

#define ALL(c) (c).begin(),(c).end()
#define IN(x,c) (find(c.begin(),c.end(),x) != (c).end())
#define REP(i,n) for (int i=0;i<(int)(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define INIT(a,v) memset(a,v,sizeof(a))
#define SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
template<class A, class B> A cvt(B x) { stringstream ss; ss<<x; A y; ss>>y; return y; }

typedef pair<int,int> PII;
typedef long long int64;

#define MOD 1000000007

inline void add(int &a, int b) { a=(a+b)%MOD; }

int tests;
int xf,yf;
int good[2005][2005], bad[2005][2005];

int main() {
	freopen("winning_at_sports.txt","r",stdin);
	freopen("winning_at_sports.out","wb",stdout);
	scanf("%d",&tests);
	FOR (test,1,tests) {
		cerr << test << endl;
		scanf("%d-%d",&xf,&yf);
		INIT(good,0); INIT(bad,0);
		good[0][0]=1; bad[0][0]=1;
		FOR (x,0,xf) FOR (y,0,yf) {
			if (x>y || (x==0 && y==0)) {
				add(good[x+1][y], good[x][y]);
				add(good[x][y+1], good[x][y]);
			} else {
				good[x][y]=0;
			}
			if (x<=y || y==yf) {
				add(bad[x+1][y], bad[x][y]);
				add(bad[x][y+1], bad[x][y]);
			} else {
				bad[x][y]=0;
			}
		}
		printf("Case #%d: %d %d\n",test,good[xf][yf],bad[xf][yf]);
	}
	return 0;
}

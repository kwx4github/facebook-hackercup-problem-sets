import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Rubanenko
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("fbhc.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("fbhc.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		fbhc solver = new fbhc();
		solver.solve(1, in, out);
		out.close();
	}
}

class fbhc {


    int[][] f = new int[2015][2015];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int testCases = in.nextInt();
        final int MD = 1000000007;
        for (int test = 1; test <= testCases; test++) {
            out.printf("Case #%d: ", test);
            String s = in.next();
            String[] tmp = s.split("-");
            int n = Integer.parseInt(tmp[0]);
            int m = Integer.parseInt(tmp[1]);
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    f[i][j] = 0;
                }
            }
            f[1][0] = 1;
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    if (f[i][j] != 0) {
                        f[i + 1][j] += f[i][j];
                        if (f[i + 1][j] >= MD) {
                            f[i + 1][j] -= MD;
                        }
                        if (j + 1 < i) {
                            f[i][j + 1] += f[i][j];
                            if (f[i][j + 1] >= MD) {
                                f[i][j + 1] -= MD;
                            }
                        }
                    }
                }
            }
            int ans = f[n][m];
            out.print(ans + " ");
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    f[i][j] = 0;
                }
            }
            f[0][0] = 1;
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    if (f[i][j] != 0) {
                        f[i + 1][j] += f[i][j];
                        if (f[i + 1][j] >= MD) {
                            f[i + 1][j] -= MD;
                        }
                        if (j + 1 <= i) {
                            f[i][j + 1] += f[i][j];
                            if (f[i][j + 1] >= MD) {
                                f[i][j + 1] -= MD;
                            }
                        }
                    }
                }
            }
            ans = 0;
            for (int i = 0; i < m; i++) {
                ans += f[m - 1][i];
                if (ans >= MD) {
                    ans -= MD;
                }
            }
            out.println(ans);
        }
    }
}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream inputStream) {
        reader = new BufferedReader(new InputStreamReader(inputStream));
    }

    public String nextLine() {
        String line = null;
        try {
            line = reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return line;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens())
            tokenizer = new StringTokenizer(nextLine());
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


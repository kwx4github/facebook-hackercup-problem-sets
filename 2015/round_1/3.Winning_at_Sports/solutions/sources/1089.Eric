#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <complex>
#include <cstdlib>
#include <ctime>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;

const int MOD = 1000000007;
int T, A, B;
int dp[2001][2001];

void go(string s)
{
	A = B = 0;
	int idx = 0;
	while (s[idx] != '-')
		A = 10*A + s[idx++] - '0';
	idx++;
	while (idx < s.size())
		B = 10*B + s[idx++] - '0';
}

int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");

	in >> T;
	for (int t = 1; t <= T; t++)
	{
		string s;
		in >> s;
		go(s);
		
		memset(dp, 0, sizeof(dp));
		dp[1][0] = 1;
		for (int i = 2; i <= A; i++)
			for (int j = 0; j <= B && j < i; j++)
			{
				if (i-1 > j)
					dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD;
				if (j > 0)
					dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD;
			}
		out << "Case #" << t << ": " << dp[A][B] << " ";

		memset(dp, 0, sizeof(dp));
		dp[0][0] = 1;
		for (int i = 0; i <= A; i++)
			for (int j = 0; j <= B; j++)
			{
				if (i > j && j < B)
					continue;
				if (i > 0)
					dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD;
				if (i <= j - 1)
					dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD;
			}
		out << dp[A][B] << "\n";
	}

	in.close();
	out.close();
	return 0;
}
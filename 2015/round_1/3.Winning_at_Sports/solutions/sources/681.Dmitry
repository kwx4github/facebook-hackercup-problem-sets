#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>
using namespace std;

const int N = 2001;
const int MOD = 1e9 + 7;
int dpf[N][N];
int dps[N][N];

int stressfree(int i, int j)
{
	if (dpf[i][j] != -1) return dpf[i][j];
	if (i == 0 || j == 0) return dpf[i][j] = 1;
	int res = 0;
	if (i - 1 > j) res += stressfree(i - 1, j);
	if (j > 0) res += stressfree(i, j - 1);
	return dpf[i][j] = res % MOD;
}

int stressfull(int i, int j)
{
	if (dps[i][j] != -1) return dps[i][j];
	if (i == 0 || j == 0) return dps[i][j] = 1;
	int res = 0;
	if (i > 0) res += stressfull(i - 1, j);
	if (j - 1 >= i) res += stressfull(i, j - 1);
	return dps[i][j] = res % MOD;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	memset(dpf, -1, sizeof(dpf));
	memset(dps, -1, sizeof(dps));
	int T; scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int i, j; scanf("%d-%d", &i, &j);
		printf("Case #%d: %d %d\n", t + 1, stressfree(i, j), stressfull(j, j));
	}
    return 0;
}
import java.io.*;
import java.util.*;

public class C {

	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	int nextInt() throws Exception {
		return Integer.parseInt(next());
	}

	long nextLong() throws Exception {
		return Long.parseLong(next());
	}

	double nextDouble() throws Exception {
		return Double.parseDouble(next());
	}

	void solve() throws Exception {
		String[] s = next().split("-");
		int q = Integer.parseInt(s[0]);
		int w = Integer.parseInt(s[1]);
		dp1m = new long[q + 1][w + 1];
		for (int i = 0; i <= q; i++)
			Arrays.fill(dp1m[i], -1);
		out.print(dp1(q, w, q, w) + " ");

		q = w + 1;
		w = w;

		dp1m = new long[q + 1][w + 1];
		for (int i = 0; i <= q; i++)
			Arrays.fill(dp1m[i], -1);

		out.print(dp1(q, w, q, w));
	}

	long dp1m[][];
	long dp2m[][];

	long MOD = 1000000007;

	long dp1(int q, int w, int mq, int mw) {
		// not allowed
		// System.err.println(q + " " + w);
		if (q == 0 && w == 0)
			return 1;
		if (q == 0)
			return 1;
		if (q < 0 || w < 0)
			return 0;
		if (q <= w)
			return 0;
		if (dp1m[q][w] == -1)
			dp1m[q][w] = (dp1(q - 1, w, mq, mw) + dp1(q, w - 1, mq, mw)) % MOD;
		return dp1m[q][w];
	}

	long dp2(int q, int w, int mq, int mw) {
		if (q == 0 && w == 0)
			return 1;
		if (q < 0 || w < 0)
			return 0;
		if ((q >= w) && (w != mw))
			return 0;
		if (q >= w)
			return 1;
		if (dp2m[q][w] == -1)
			dp2m[q][w] = (dp2(q - 1, w, mq, mw) + dp2(q, w - 1, mq, mw)) % MOD;
		System.err.println(dp2m[q][w]);
		return dp2m[q][w];
	}

	void run() {
		try {
			Locale.setDefault(Locale.US);
			in = new BufferedReader(new FileReader("src/C.in"));
			out = new PrintWriter(new FileWriter("src/C.out"));
			int tc = nextInt();
			for (int t = 0; t < tc; t++) {
				out.print("Case #" + (t + 1) + ": ");
				solve();
				out.println();
			}
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public static void main(String[] args) {
		new C().run();

	}

}

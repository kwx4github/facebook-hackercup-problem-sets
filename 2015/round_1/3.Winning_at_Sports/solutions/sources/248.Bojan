import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.Scanner;

public class Sports {

	private static long MOD = 1000000007;
	
	public static void main(String[] args) throws Exception {
		Sports object = new Sports();
		String className = object.getClass().getSimpleName();

		FileReader fileReader = new FileReader(new File(className.toLowerCase()
				+ ".in"));
		Scanner scanner = new Scanner(new BufferedReader(fileReader));
		
		FileWriter wr = new FileWriter(className.toLowerCase() + ".out");

		int testCases = scanner.nextInt();

		for (int tc = 1; tc <= testCases; tc++) {

			String line = scanner.next();
			
			int A = Integer.parseInt(line.split("[-]+")[0]);
			int B = Integer.parseInt(line.split("[-]+")[1]);

			long result1 = object.countStressFree(A, B);
			long result2 = object.countStressful(A, B);
			
			wr.write("Case #" + tc + ": " + result1 + " " + result2 + "\r\n");
		}

		scanner.close();
		wr.close();
	}

	int A, B;
	long nways1[][];
	long nways2[][][];
	
	long countStressFree(int A, int B) {
		this.A = A;
		this.B = B;
		
		if (nways1 == null) {
			nways1 = new long[2001][2001];
			
			for (int z=0; z<2001; z++)
				Arrays.fill(nways1[z], 0);
			
			nways1[0][0] = 1;
			
			for (int me = 0; me <= 2000; me++)
				for (int op = 0; op <= 2000; op++)
					if (isValidStressFree(me, op)) {
						
						//i score a goal						
						if (me > 0)
							nways1[me][op] += nways1[me - 1][op];
						
						
						//opponent scores
						if (op > 0)
							nways1[me][op] += nways1[me][op - 1];
						
						nways1[me][op] %= MOD;
					}
		}
		
		return nways1[A][B];
	}
	
	
	
	
	long countStressful(int A, int B) {
		this.A = A;
		this.B = B;
		
		if (nways2 == null) {
			nways2 = new long[2001][2001][2];
			
			for (int z=0; z<2001; z++)
				for (int y=0; y<2001; y++)
				Arrays.fill(nways2[z][y], 0);
			
			nways2[0][0][0] = 1;
			nways2[0][0][1] = 1;
			
			for (int me = 0; me <= 2000; me++)
				for (int op = 0; op <= 2000; op++)
					for (int ls = 0; ls <= 1; ls++) //is final score for B achieved
					if (isValidStressful(me, op, ls)) {
						
						//i score a goal
						if (me > 0)
							nways2[me][op][ls] += nways2[me - 1][op][ls];
						
						//opponent scores						
						if (op > 0)
							nways2[me][op][ls] += nways2[me][op - 1][0];
						
						nways2[me][op][ls] %= MOD;
					}
		}
		
		//i lose always, but at the end I win
		return nways2[A][B][1];
	}
	
	

	private boolean isValidStressful(int me, int op, int ls) {
		if (op >= me)
			return true;
		
		if (ls == 1) //I can start scoring goals, potentially
			return true;
		
		return false;
	}




	private boolean isValidStressFree(int me, int op) {
		if (me > op)
			return true;
		
		return false;
	}
}

#include <stdio.h>
#include <memory.h>

long long mod = 1000000007;

long long dp[2010][2010];

int A,B;

long long stressfull(int x,int y) {
	if(x > A || y > B) return dp[x][y] = 0;
	if(dp[x][y] != -1) return dp[x][y];
	if(x == A && y == B) return dp[x][y] = 1;
	if(y == B) {
		return dp[x][y] = 1;
	} else {
		if(x > y) return dp[x][y] = 0;
		return (dp[x][y] = 	(((stressfull(x+1,y)%mod) + (stressfull(x,y+1)%mod))%mod));
	}
}

long long stressfree(int x,int y) {
	if(x > A || y > B) return dp[x][y] = 0;
	if(dp[x][y] != -1) return dp[x][y];
	if(x == A && y == B) return dp[x][y] = 1;
	if(x <= y) return dp[x][y] = 0;
	return (dp[x][y] = (((stressfree(x+1,y)%mod) + (stressfree(x,y+1)%mod))%mod)); 
	
}

int extractNumber(char* num, int start, int n) {
	int result = 0;
	for(int i = start; i< n;i++) {
		result = result*10 + num[i]-'0';
	}
	return result;
}


void printDP() {
	printf("\n");
	for(int i = 0; i <= A;i++) {
		for(int j = 0; j <= B;j++) {
			printf("%lld ",dp[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

int main() {
	int T;
	scanf("%d",&T);
	for(int t = 1; t <= T;t++) {
		char tab[10000];
		scanf("%s",tab);
		
		int n = strlen(tab);
		
		for(int i = 0; i < n;i++) {
			if(tab[i] == '-') {
				A = extractNumber(tab,0,i);
				B = extractNumber(tab,i+1,n);
				break;
			}
		}
		
		//printf("%d %d\n",A,B);
		
		memset(dp,-1,sizeof(dp));
		long long resStres = stressfull(0,0);
		
		//printDP();
		
		
		
		memset(dp,-1,sizeof(dp));
		long long resNoStres = stressfree(1,0);
		
		//printDP();
		
		printf("Case #%d: %lld %lld\n",t,resNoStres,resStres);
	}
	return 0;
}

#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <math.h>
#include <set>

#define M 1000000000;
long long DIV = 1000000007;
using namespace std;
struct node{
    int ways;
    int sum;
};
int main() {
    freopen("winning_at_sports.txt", "r", stdin);
    freopen("winning_at_sports_example_output.txt", "w", stdout);
    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    string first="", second="";
    getline(cin, first);
    for(int t1 = 0; t1<t; ++t1) {
        getline(cin, first, '-');
        getline(cin, second);
        reverse(first.begin(), first.end());
        reverse(second.begin(), second.end());
        int n=0, m=0;
        int dec = 1;
        for(int i = 0; i < first.size(); ++i){
            n+=((int)(first[i]-'0'))*dec;
            dec*=10;
        }
        dec =1;
        for(int i = 0; i < second.size(); ++i){
            m+=((int)(second[i]-'0'))*dec;
            dec*=10;
        }
        vector<vector<node> > v(n + 1);
        node x;
        x.ways = 0;
        x.sum = 0;
        for (int i = 0; i <= n; ++i) {
            v[i].resize(m + 1, x);
            for (int j = 0; j <= min(m, i); ++j) {
                if (j == 0) {
                    v[i][j].ways = 1;
                    v[i][j].sum = 1;
                } else {
                    v[i][j].ways = v[i - 1][j].sum;
                    v[i][j].sum = (v[i][j - 1].sum + v[i][j].ways) % DIV;
                }
            }
        }
        cout << "Case #"<< t1+1<<": "<< v[n][m].ways << " ";
        vector<int> dd(m+1, 0);
        vector<vector<int> > d(m + 1, dd);
        d[0][0] = 1;
        for (int i = 1; i <= m; ++i) {
            for (int j = 0; j <= i; ++j) {
                if (j == 0) {
                    d[i][j] = 1;
                } else {
                    d[i][j] = (d[i - 1][j] + d[i][j - 1]) % DIV;
                }
            }
        }
        cout << d[m][m] <<"\n";
    }
    return 0;
}
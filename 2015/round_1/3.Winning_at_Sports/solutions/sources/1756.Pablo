#!/usr/bin/ruby
# require 'matrix'
# require 'set'

class Object
  def in?(container)
    container.include?(self)
  end
end

class Array
  def clip(n = 1)
    take size - n
  end

  def sum
    inject(:+)
  end
end

class IO
  def rl
    readline.chomp
  end

  def read_integer
    rl.to_i
  end

  def read_float
    rl.to_f
  end

  def read_array
    rl.split ' '
  end

  def read_array_integers
    read_array.map(&:to_i)
  end

  def read_array_floats
    read_array.map(&:to_f)
  end

  def read_matrix(rows, cols)
    lines = 1.upto(rows).map do |i|
      read_array_integers
    end

    Matrix.build(rows, cols) do |row, col|
      lines[row][col]
    end
  end
end

class FacebookHackerCupSolver
  def solve
    1.upto(STDIN.read_integer) do |test|
      STDOUT << "Case ##{test}: #{solve_test}\n"
    end
  end

  def solve_test
    score = STDIN.rl.split('-').map(&:to_i)

    "#{combinations_stressfree(score)} #{combinations_stressful(score)}"
  end

  def table_size
    2005
  end

  def combinations_stressfree(score)
    table_stressfree[score[0]][score[1]] % 1_000_000_007
  end

  def combinations_stressful(score)
    table_stressful[score[1]][score[1]] % 1_000_000_007
  end

  def table_stressfree
    @table_stressfree ||= begin
      table = Array.new(table_size)

      table[0] = Array.new(table_size, 0)
      table[0][0] = 1

      1.upto(table_size - 1).each do |me|
        table[me] = Array.new(table_size, 0)
        0.upto(table_size - 1).each do |you|
          if you.zero?
            table[me][you] = 1
          elsif me > you
            table[me][you] = table[me - 1][you] + table[me][you - 1]
          end
        end
      end

      table
    end
  end

  def table_stressful
    @table_stressful ||= begin
      table = Array.new()

      0.upto(table_size - 1).each do |me|
        table[me] = Array.new(table_size, 0)
        0.upto(table_size - 1).each do |you|
          if me.zero?
            table[me][you] = 1
          elsif me <= you
            table[me][you] = table[me - 1][you] + table[me][you - 1]
          end
        end
      end

      table
    end
  end
end

FacebookHackerCupSolver.new.solve

//
//  AppDelegate.m
//  HackerCup2015ObjC
//
//  Created by James Webb on 1/10/15.
//  Copyright (c) 2015 James Webb. All rights reserved.
//

#import "AppDelegate.h"

#define BILLION_7 1000000007

@interface NSString (jw)

-(int)digitAtIndex:(NSUInteger)index;
-(NSString *)stringBySwappingValuesAtIndices:(NSUInteger)index1 and:(NSUInteger)index2;

@end

@implementation NSString (jw)

-(int)digitAtIndex:(NSUInteger)index
{
    return [self substringWithRange:NSMakeRange(index, 1)].intValue;
}

-(NSString *)stringBySwappingValuesAtIndices:(NSUInteger)index1 and:(NSUInteger)index2
{
    NSRange range1 = NSMakeRange(index1, 1);
    NSRange range2 = NSMakeRange(index2, 1);
    
    NSString *digit1 = [self substringWithRange:range1];
    NSString *digit2 = [self substringWithRange:range2];
    
    NSString *result = [self stringByReplacingCharactersInRange:range1 withString:digit2];
    result = [result stringByReplacingCharactersInRange:range2 withString:digit1];
    
    return result;
}

@end

@interface Node : NSObject
{
    CGSize myCount;
}

@property () Node *left;
@property () Node *right;

@property () int leftScore;
@property () int rightScore;

-(CGSize)stressFreeStressfulCount;

@end

@implementation Node

-(instancetype)init
{
    myCount = CGSizeZero;
    
    return self;
}

-(CGSize)stressFreeStressfulCount
{
    if (!_leftScore && !_rightScore)    {
        return CGSizeMake(1, 1);
    }
    else    {
        CGSize left = [_left stressFreeStressfulCount];
        CGSize right = [_right stressFreeStressfulCount];
        
        return CGSizeMake((long)(left.width + right.width) % BILLION_7, (long)(left.height + right.height) % BILLION_7);
    }
}

@end

@interface AppDelegate ()



@end

@implementation AppDelegate
{
    unsigned long stressFree[2000][2000];
    unsigned long stressful[2000][2000];
}

-(void)prep
{
    for (int me=0; me<2000; me++) {
        for (int they=0; they<2000; they++) {
            // The minus-one cases are obviously a problem where i or j is 0. However, i should never be zero. And if j is zero, there is only one way to get there.
            if (me == 0 && they == 0)   {
                stressFree[me][they] = 0;
                stressful[me][they] = 0;
            }
            else if (me == 0) {
                stressFree[me][they] = 0;
                stressful[me][they] = 1;
            }
            else if (they == 0)    {
                stressFree[me][they] = 1;
                stressful[me][they] = 0;
            }
            else    {
                stressFree[me][they] = (stressFree[me-1][they] + stressFree[me][they-1]) % BILLION_7;
                
                if (me>=they) {
                    stressful[me][they] = stressful[they - 1][they];
                }
                else    {
                    stressful[me][they] = (stressful[me-1][they] + stressful[me][they-1]) % BILLION_7;
                }
                
                // If our points are not ahead, there are no stress-free routes here
                if (me<=they) {
                    stressFree[me][they] = 0;
                }
            }
        }
    }
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSArray *lines = [[NSString stringWithContentsOfFile:@"/Users/james/Downloads/winning_at_sports.txt" encoding:NSUTF8StringEncoding error:nil] componentsSeparatedByString:@"\n"];
    
    int count = [lines[0] intValue];
    
    [self prep];
    
    for (NSUInteger i=1; i<=count; i++) {
        printf("%s\n", [self handleCase:lines[i] numbered:i].UTF8String);
    }

    return YES;
}

-(NSString *)handleCase:(NSString *)line numbered:(NSUInteger)caseIndex
{
    NSArray *ary = [line componentsSeparatedByString:@"-"];
    
    int a = [ary[0] intValue];
    int b = [ary[1] intValue];
    
    return [NSString stringWithFormat:@"Case #%lu: %lu %lu", caseIndex, stressFree[a][b], stressful[a][b]];
}

@end

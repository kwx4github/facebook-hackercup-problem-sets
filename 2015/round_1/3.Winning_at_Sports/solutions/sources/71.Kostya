#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MOD = 1000000007;
const int MAXN = 4040;

int f[ MAXN ][ MAXN ];

void upd( int &a, int b ) {
    ( a += b ) %= MOD; 
}

int count_stress_free( int a, int b ) {
    memset( f, 0, sizeof( f ) );
    f[1][0] = 1;
    for ( int sum = 1; sum < a + b; sum++ ) {
        for ( int fi = 0; fi <= sum; fi++ ) {
            int se = sum - fi;
            if ( f[fi][se] == 0 ) continue;
            if ( fi + 1 <= a ) 
                upd( f[fi + 1][se], f[fi][se] );
            if ( se + 1 <= b && fi > se + 1 )
                upd( f[fi][se + 1], f[fi][se] );
        }
    }
    return f[a][b];
}

int count_stressful( int a, int b ) {
    memset( f, 0, sizeof( f ) );
    f[0][0] = 1;
    for ( int sum = 0; sum < a + b; sum++ ) {
        for ( int fi = 0; fi <= sum; fi++ ) {
            int se = sum - fi;
            if ( f[fi][se] == 0 ) continue;
            if ( se + 1 <= b )
                upd( f[fi][se + 1], f[fi][se] );
            if ( fi + 1 <= a )
                if ( fi + 1 <= se || se == b )
                    upd( f[fi + 1][se], f[fi][se] );
        }
    }
    return f[a][b];
}

void solve( int t ) {
    int a, b; scanf("%d-%d", &a, &b);
    printf("Case #%d: %d %d\n", t, count_stress_free(a, b), count_stressful(a, b));
}    

int main() {
	time_t start = clock();
	int t; scanf("%d", &t);
	for ( int i = 1; i <= t; i++ ) solve( i );
	fprintf( stderr, "Time: %lf\n", 1.0 * ( clock() - start ) / CLOCKS_PER_SEC );
    return 0;
}

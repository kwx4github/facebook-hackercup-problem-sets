package Y2015.Round1.WinningSports;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class Main {
	private static final String fileName = "input/Y2015/Round1/winningsports";
	private static final String inputFileName = fileName + ".in";
	private static final String outputFileName = fileName + ".out";

	// winningsports
	static final int MOD = 1000000007;
	static final int MAX = 2000;
	public static void main(String[] args) throws Exception {
		final InputReader in = new InputReader(new FileInputStream(inputFileName));
		final OutputWriter out = new OutputWriter(new FileOutputStream(outputFileName));
		long[][]stressFree=new long[MAX+1][MAX+1];
		stressFree[0][0]=1;
		stressFree[1][0]=1;
		calcFree(MAX,MAX-1,stressFree);
		long[][]stressFull=new long[MAX+1][MAX+1];
		stressFull[0][0]=1;
		stressFull[1][0]=1;
		stressFull[1][1]=1;
		calcFull(MAX,MAX-1,stressFull);
		int T = in.readInt();
		for(int t=1;t<=T;t++){
			int A = in.readInt(),
				B = in.readInt();
			out.printLine("Case #"+t+": "+stressFree[A][B]+" "+(B==0?1:stressFull[B][B-1]));
		}
		out.close();
	}
	
	static void calcFree(int A,int B, long[][]stressFree){
		if(A==0 || A==B || B < 0 || stressFree[A][B]>0)return;
		calcFree(A-1,B,stressFree);
		stressFree[A][B]=stressFree[A-1][B];
		if(B > 0){
			calcFree(A,B-1,stressFree);
			stressFree[A][B] += stressFree[A][B-1];
			if(stressFree[A][B]>MOD)
				stressFree[A][B]-=MOD;
		}		
	}

	static void calcFull(int A,int B, long[][]stressFull){
		if(A==0 || A < B || B < 0 || stressFull[A][B]>0)return;
		calcFull(A-1,B,stressFull);
		stressFull[A][B]=stressFull[A-1][B];
		if(B > 0){
			calcFull(A,B-1,stressFull);
			stressFull[A][B] += stressFull[A][B-1];
			if(stressFull[A][B]>MOD)
				stressFull[A][B]-=MOD;
		}		
	}

	static class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public String readLine() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '-' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
	}

	static class OutputWriter {
		private final PrintWriter writer;

		public OutputWriter(OutputStream outputStream) {
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
					outputStream)));
		}

		public OutputWriter(Writer writer) {
			this.writer = new PrintWriter(writer);
		}

		public void print(Object... objects) {
			for (int i = 0; i < objects.length; i++) {
				if (i != 0)
					writer.print(' ');
				writer.print(objects[i]);
			}
		}

		public void printLine(Object... objects) {
			print(objects);
			writer.println();
		}

		public void close() {
			writer.close();
		}
	}
}
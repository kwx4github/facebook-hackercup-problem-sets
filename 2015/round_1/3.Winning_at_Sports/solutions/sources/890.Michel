#include <iomanip>
#include <algorithm>
#include <iterator>     // std::insert_iterator
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <fstream>

using namespace std;
#define MOD 1000000007

long long cache1[2001][2001];

int s1, s2;

//stress-free
long long calc1(int curS1, int curS2){
	long long ret = 0;
	if (curS1 == s1 && curS2 == s2) return 1;
	if (curS1 > s1 || curS2 > s2) return 0;
	if (cache1[curS1][curS2]>-1)
		return cache1[curS1][curS2];
	if (curS1 > curS2 + 1) ret = (ret + calc1(curS1, curS2 + 1)) % MOD;
	ret = (ret + calc1(curS1 + 1, curS2)) % MOD;
	return cache1[curS1][curS2] = ret%MOD;
}

//stressful
long long cache2[2001][2001];
long long calc2(int curS1, int curS2){
	long long ret = 0;
	if (curS1 == s1 && curS2 == s2) return 1;
	if (curS1 > s1 || curS2 > s2) return 0;
	if (cache2[curS1][curS2]>-1)
		return cache2[curS1][curS2];
	if (curS1 < curS2 || curS2==s2) ret = (ret + calc2(curS1 + 1, curS2)) % MOD;
	ret = (ret + calc2(curS1, curS2 + 1)) % MOD;
	return cache2[curS1][curS2] = ret%MOD;
}



int main(){
	ios_base::sync_with_stdio(false);
	ifstream in("sports.txt");
	ofstream out("result.txt");
	int T;
	in >> T;
	for (int test = 1; test <= T; test++){
		cout << "Case #" << test << ": ";
		out << "Case #" << test << ": ";
		in >> s1 >> s2;
		s2 *= -1;
		memset(cache1, -1, sizeof(cache1));
		memset(cache2, -1, sizeof(cache2));
		//stress-free
		long long stress_free = calc1(0, 0);
		long long stress_full = calc2(0, 0);
		cout << stress_free << " " << stress_full << endl;
		out << stress_free << " " << stress_full << endl;
	}
	return 0;
}

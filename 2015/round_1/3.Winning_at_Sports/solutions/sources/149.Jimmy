package fb2014_round1;

import java.io.*;
import java.util.StringTokenizer;

public class C {
    public static final int MOD = 1000000007;
    public static int[][] memo1 = new int[2010][2010];
    public static int[][] memo2 = new int[2010][2010];

    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/C-sample.in"), System.out);
        io = new Kattio(new FileInputStream("fb2014_round1/winning_at_sports.txt"), new FileOutputStream("fb2014_round1/winning.out"));
//        io = new Kattio(new FileInputStream("fb2014_round1/C-large-0.in"), new FileOutputStream("fb2014_round1/C-large-0.out"));

        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new C().solve(io);
        }
        io.close();
    }

    private void solve(Kattio io) {
        String[] parts = io.getWord().split("-");
        int home = Integer.parseInt(parts[0]);
        int away = Integer.parseInt(parts[1]);
        int a = countStressFree(home, away);
        int b = countStressFul(away, away);
        io.println(a + " " + b);
    }

    private int countStressFree(int home, int away)
    {
        int sum = 0;
        if (home == 1 && away == 0) return 1;
        if (memo1[home][away] > 0) return memo1[home][away] - 1;

        if (home - 1 > away)
        {
            sum += countStressFree(home - 1, away);
        }
        if (away > 0) {
            sum += countStressFree(home, away-1);
        }
        sum %= MOD;
        memo1[home][away] = sum + 1;
        return sum;
    }

    private int countStressFul(int home, int away)
    {
        int sum = 0;
        if (home == 0 && away == 0) return 1;

        if (memo2[home][away] > 0) return memo2[home][away] - 1;
        if (away - 1 >= home)
        {
            sum += countStressFul(home, away - 1);
        }
        if (home > 0) {
            sum += countStressFul(home - 1, away);
        }
        sum %= MOD;
        memo2[home][away] = sum + 1;
        return sum;
    }

    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment (linker, "/STACK:256000000")

using namespace std;

const long long P = 1000000007LL;
const int maxN = 2100;
long long c[maxN][maxN], d[maxN][maxN];

void precalc() {
	d[1][0] = 1;
	for (int i = 0; i + 1 < maxN; ++i) {
		for (int j = 0; j < i; ++j) {
			if (d[i][j] == 0) {
				continue;
			}
			d[i + 1][j] += d[i][j];
			d[i + 1][j] %= P;

			if (i > j + 1) {
				d[i][j + 1] += d[i][j];
				d[i][j + 1] %= P;
			}
		}
	}

	c[0][0] = 1;
	for (int i = 0; i + 1 < maxN; ++i) {
		for (int j = 0; j <= i; ++j) {
			if (c[i][j] == 0) {
				continue;
			}
			c[i + 1][j] += c[i][j];
			c[i + 1][j] %= P;

			if (i >= j + 1) {
				c[i][j + 1] += c[i][j];
				c[i][j + 1] %= P;
			}
		}
	}
}

void solve(int test) {
	int x, y;
	scanf("%d-%d", &x, &y);
	long long res = 0;
	for (int i = 0; i <= y; ++i) {
		long long u = c[y][i] - (i == 0 ? 0 : c[y][i - 1]);
		u = ((u % P) + P) % P;
		res += u;
		res %= P;
	}
	printf("Case #%d: %d %d\n", test, (int)(d[x][y]), (int)(res));
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	precalc();

	int t;
	cin >> t;
	for (int i = 1; i <= t; ++i) {
		solve(i);
		cerr << i << ": " << clock() << endl;
	}

	return 0;
}
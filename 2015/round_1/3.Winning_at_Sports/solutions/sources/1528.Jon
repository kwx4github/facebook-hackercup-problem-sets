import java.io.File;
import java.io.PrintWriter;
import java.util.*;

/**
 * Created by jonthoms on 1/17/15.
 */
public class Solution3 {
    static String inputFile = "input3.txt";
    static String outputFile = "output3.txt";
    static long mod = 1000000007;

    public static void main(String[] args) {
        process();
    }

    private static void process(){
        File file = new File(inputFile);
        Scanner scanner = null;
        try {
            scanner = new Scanner(file);
        } catch (Exception e){
            trace(e);
        }
        String line = scanner.nextLine();
        int nProblems = Integer.parseInt(line);
        trace("Number of cases: " + nProblems);

        StringBuilder result = new StringBuilder();

        for(int n = 0; n < nProblems; ++n){
            line = scanner.nextLine();
            int[] scores = parseLineInts(line);
            int W = scores[0];
            int L = scores[1];

            int problemNumber = n + 1;
            result.append("Case #" + problemNumber + ": " + getStressFreeFast(W, L) + " " + getStressfulFast(W, L) + "\n");
        }

        String output = result.toString();
        trace(output);

        saveStringFile(outputFile, output);

        trace("finished");
    }

    private static long getCatalansTriangle(int i, int j){
        long numerator =  factorial(i + j) * (i - j + 1);
        long denominator =  factorial(j) * factorial(i + 1);
        return modRatio(numerator,denominator);
    }

    private static long factorial(int n){
        long result = 1;
        for(long i = 1; i <= n; ++i){
            result *= i;
            result %= mod;
        }
        return result;
    }

    private static int getStressFreeFast(int W, int L){
        if(L == 0) return 1;
        else if(L == 1) return W - 1;
        return (int)getCatalansTriangle(W - 1, L);
    }

    /*private static int getStressFree(int W, int L){
        int T = W + L;
        int max = (int)Math.pow(2, T);
        int count = 0;
        for(int i = 0; i < max; ++i){
            int w = 0;
            int l = 0;
            for(int j = 0; j < T; ++j){
                if(((i >> j) & 1) == 1) ++w;
                else ++l;
                if(w > W || l > L) break;
                if(w <= l) break;
                if(w == W && l == L) ++count;
            }

        }
        return count;
    }*/

    private static int getStressfulFast(int W, int L){
        long numerator = factorial(2 * L);
        long denominator = factorial(L + 1) * factorial(L);
        return (int)modRatio(numerator, denominator);
    }

    /*private static int getStressful(int W, int L){
        int T = W + L;
        int max = (int)Math.pow(2, T);
        int count = 0;
        for(int i = 0; i < max; ++i){
            int w = 0;
            int l = 0;
            for(int j = 0; j < T; ++j){
                if(((i >> j) & 1) == 1) ++w;
                else ++l;
                if(w == W && l == L) {
                    ++count;
                    break;
                }
                if(w > W || l > L) break;
                if(w > l && l < L) break;
            }

        }
        return count;
    }*/

    private static int[] parseLineInts(String line){
        if(line.length() == 0) return new int[0];
        String[] parts = line.split("-");
        int n = parts.length;
        int[] result = new int[n];
        for(int i = 0; i < n; ++i){
            result[i] = Integer.parseInt(parts[i]);
        }
        return result;
    }

    private static void trace(Object... arguments) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < arguments.length; ++i) {
            if (i != 0) builder.append(", ");
            builder.append(arguments[i]);
        }
        builder.append("\n\n");
        System.out.print(builder.toString());
    }

    private static void saveStringFile(String fileName, String output){
        try {
            PrintWriter out = new PrintWriter(fileName);
            out.print(output);
            out.close();
        } catch (Exception e){
            trace(e);
        }
    }

    private static long modRatio(long numerator, long denominator){
        numerator %= mod;
        denominator %= mod;
        long mmi = modMultiplicativeInverse(denominator);
        return (numerator * mmi) % mod;
    }

    private static long modMultiplicativeInverse(long n) {
        return modPower(n, mod - 2);
    }

    private static long modPower(long base, long n) {
        if(n==0)
            return 1;
        if(n==1)
            return base;
        long h = modPower(base, n / 2);
        if(n%2 == 0)
            return (h * h) % mod;
        else
            return (((h * h) % mod) * base ) % mod;
    }
}


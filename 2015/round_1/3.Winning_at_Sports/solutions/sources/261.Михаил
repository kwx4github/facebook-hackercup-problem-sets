package com.company;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
    static BufferedReader in;
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;
    static final long MOD = 1_000_000_007;
    static Node root = new Node();

    public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(new FileInputStream("in.txt")));
        out = new PrintWriter("out.txt");
        int t = nextInt();

        for (int i = 0; i < t; i++) {
            out.print("Case #" + (i + 1) + ": ");
            String[] split = nextToken().split("-");
            int s1 = Integer.parseInt(split[0]);
            int s2 = Integer.parseInt(split[1]);
            int size = Math.max(s1, s2) + 5;
            long[][] dp = new long[size][size];
            for (int j = 0; j < size; j++) {
                dp[0][j] = 1;
            }
            for (int j = 1; j < size; j++) {
                for (int k = j; k < size; k++) {
                    if (k - 1 > j && k - 1 >= 0) {
                        dp[j][k] += dp[j][k - 1];
                        dp[j][k] %= MOD;
                    }
                    if (k > j - 1 && j - 1 >=0) {
                        dp[j][k] += dp[j - 1][k];
                        dp[j][k] %= MOD;
                    }
                }
            }

            long res1 = dp[s2][s1];

            long res2 = dp[s2 + 1][s2 + 1];
            out.println(res1 + " " + res2);

            out.flush();
        }
        in.close();
        out.flush();
        out.close();
    }


    public static class Node {
        Node[] next;

        public Node() {
            this.next = new Node[26];
        }
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return st.nextToken();
    }
}

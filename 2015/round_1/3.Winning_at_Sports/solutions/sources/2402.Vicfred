#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

#define MOD 1000000007
#define MAXN 2015

int n,m;

int **memo;

int stress(int a, int b) {
   if(a > n or b > m) return 0;
   if(memo[a][b] != -1) return memo[a][b];
   if(a == n and b == m) return 1;
   if(a > b and b != m) return 0;
   return memo[a][b] = (stress(a+1,b) + stress(a,b+1))%MOD;
}

int main() {
   int T;
   scanf("%d\n", &T);
   // stress-free
   int **dp = (int **)malloc(sizeof(int *)*MAXN); 
   for(int i = 0; i < MAXN; i++)
      dp[i] = (int *)malloc(sizeof(int)*MAXN);
   for(int i = 0; i < MAXN; i++)
      for(int j = 0; j < MAXN; j++)
         dp[i][j] = 0;
   dp[0][0] = 1;
   for(int a = 1; a < MAXN; a++) {
      for(int b = 0; b < MAXN; b++) {
         dp[a][b] = (dp[a][b] + dp[a-1][b])%MOD;
         if(a > b) dp[a][b] = (dp[a][b] + dp[a][b-1])%MOD;
      }
   }
   // stressful
   memo = (int **)malloc(sizeof(int *)*MAXN);
   for(int i = 0; i < MAXN; i++)
      memo[i] = (int *)malloc(sizeof(int)*MAXN);
for(int kase = 1; kase <= T; kase++) {
   scanf("%d-%d\n", &n, &m);
   for(int i = 0; i < MAXN; i++)
      for(int j = 0; j < MAXN; j++)
         memo[i][j] = -1;
   printf("Case #%d: %d %d\n", kase, dp[n][m]%MOD, stress(0,0)%MOD);
}
   return 0;
}

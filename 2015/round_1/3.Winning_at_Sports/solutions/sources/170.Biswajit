#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

const int maxn = 2010;
int ways1[2010][2010];
int ways2[2010][2010];

int getways1(int i, int j)
{
	if(i==0 || j==0) return 1;

	int &ans = ways1[i][j];

	if(ans != -1) return ans;
	if(i==j) ans = getways1(i,j-1);
	else if(i==j+1) ans = getways1(i,j-1);
	else ans = ((lli) getways1(i, j-1) +getways1(i-1, j))%MOD;
	return ans;
}


int getways2(int i, int j)
{
	if(i==0 || j==0) return 1;

	int &ans = ways2[i][j];

	if(ans != -1) return ans;
	if(i==j) ans = getways2(i,j-1);
	else ans = ((lli) getways2(i, j-1) +getways2(i-1, j))%MOD;
	return ans;
}

int main()
{
	mset(ways1, -1);
	mset(ways2, -1);
	
	// for(int i = 1; i <= 2000; ++i)
	// for(int j = 0; j <= i - 1; j++) cout << getways1(i, j) << ' ' << getways2(j,j) << endl;

	int t;
	gi(t);
	
	for(int tt=1; tt<=t; tt++)
	{
		int a, b;
		scanf("%d-%d", &a, &b);
		printf("Case #%d: %d %d\n", tt, getways1(a,b), getways2(b,b));
	}
    return 0;
}
#include <iostream>
#include <string.h>

using namespace std;

#define MOD 1000000007

long long table[2001][2001];

long long stress_free(int a, int b) {
    if (b > a) {
        return 0;
    }
    if (table[a][b] != -1) {
        return table[a][b];
    }
    if (a == 0 && b == 0) {
        table[0][0] = 1;
        return 1;
    }
    if (a == b) {
        table[a][b] = 0;
        return 0;
    }
    long long total = 0;
    for (int i = 0; i <= b; i++) {
        total += stress_free(a-1, i) % MOD;
    }
    total %= MOD;
    table[a][b] = total;
    return total;
}

long long catalanNums[2001];

long long catalan(int n) {
    if (n == 0) return 1;
    if (catalanNums[n] != -1) {
        return catalanNums[n];
    }
    long long answer = 0;
    for (int i = 0; i < n; i++) {
        answer += (catalan(i) * catalan(n-1-i)) % MOD;
    }
    answer %= MOD;
    catalanNums[n] = answer;
    return answer;
}

long long stressful(int a, int b) {
    if (b == 0) {
        return 1;
    }
    return catalan(b);
}

int main() {
    memset(table, -1, sizeof(table));
    memset(catalanNums, -1, sizeof(catalanNums));
    
    int t; cin >> t;
    
    for (int i = 1; i <= t; i++) {
        int a, b; cin >> a >> b;
        b = ~b + 1;
        cout << "Case #" << i << ": " << stress_free(a, b) << " " << stressful(a, b) << endl;
    }
}
import java.io.*;
import java.util.InputMismatchException;
import java.util.Locale;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		solver.solve(1, in, out);
		out.close();
	}
}

class WinningAtSports {
    long dp1[][];
    long dp2[][];
    long mod = (long) (1e9 + 7);
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        dp1 = new long[2002][2002];
        dp2 = new long[2002][2002];
        dp1[1][0] = 1;
        for (int my = 1; my <= 2000; my++)
        {
            for (int his = 0; his < my; his++)
            {
                //case 1 i win
                dp1[my + 1][his] += dp1[my][his];
                if(dp1[my + 1][his] >= mod)
                {
                    dp1[my + 1][his] -= mod;
                }
                //case 2 he wins
                if (his + 1 < my)
                {
                    dp1[my][his + 1] += dp1[my][his];
                    if( dp1[my][his + 1] >= mod)
                    {
                        dp1[my][his + 1] -= mod;
                    }
                }
            }
        }
        dp2[0][0] = 1;
        for (int his = 0; his <= 2000; his++)
        {
            for (int my = 0; my <= his; my++)
            {
                //case 1 he wins
                dp2[my][his + 1] += dp2[my][his];
                if( dp2[my][his + 1] >= mod)
                {
                    dp2[my][his + 1] -= mod;
                }
                //case 2 i win
                if (my + 1 <= his)
                {
                    dp2[my + 1][his] += dp2[my][his];
                    if(dp2[my + 1][his] >= mod)
                    {
                        dp2[my + 1][his] -= mod;
                    }
                }
            }
        }

        int t = in.ni ();
        for (int x = 1; x <= t; x++)
        {
            testNumber = x;
            String s[] = in.ns ().split ("-");
            int my = Integer.parseInt (s[0]);
            int his = Integer.parseInt (s[1]);
            if (his == 0)
            {
                out.print("Case #"+testNumber+": ");
                out.println (1 + " " + 1);
                continue;
            }
            long ans = 0;
            for (int myScore = 0; myScore <= his; myScore++)
            {
                ans += dp2[myScore][his - 1];
                if (ans >= mod)
                {
                    ans -= mod;
                }
            }
            out.print("Case #"+testNumber+": ");
            out.println (dp1[my][his] + " " + ans);

        }
    }
}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public String ns()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        StringBuilder res = new StringBuilder ();
        do
        {
            res.appendCodePoint (c);
            c = read ();
        } while (!isSpaceChar (c));
        return res.toString ();
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c==' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}


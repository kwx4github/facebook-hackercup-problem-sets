// Because of trying hard to make it 1 function without
// taking good care of the differences, it could be buggy.
#include <bits/stdc++.h>
using namespace std;

const int MOD = 1000000007,
		  N = 2048;

int dp[N][N], temp, temp2;

/*
 * Returns count of ways to reach score:
 * 		n-m 	iff n > m
 * 		n-(n-1) iff n < m
 */
// Note: Now, I'm not proud of making it fit in 1 function.
int solve(int n, int m) {

	// Could get rid of this memset.
	memset(dp, 0, sizeof(dp));
	for (int i = 0; i <= n; ++i)	// Also, this loop xD.
		dp[i][0] = 1;

	temp2 = (n > m);
	for (int i = 1; i <= n; ++i) {
		temp = min(i - temp2, m);
		for (int j = 1; j <= temp; ++j)
			dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD;	// No in-between overflow
	}
	// for debugging;
//	cout << endl;
//	for (int i = 0; i <= n; ++i) {
//		for (int j = 0; j <= m; ++j)
//			cout << dp[i][j] << "\t";
//		cout << endl;
//	}
//	cout << endl;
	// End of debugging.
	return dp[n][min(n, m)];
}

int main() {
	freopen("winning_at_sports.txt","r",stdin);
	freopen("winning_at_sports.out","w",stdout);
	//cin.tie(0); cout.tie(0);
	//ios_base::sync_with_stdio(false);

	string s;
	int arr[2];
	int T; cin >> T;
	for (int tt = 0; tt < T; ++tt) {
		cout << "Case #" << tt + 1 << ":";

		scanf("%d-%d", &arr[0], &arr[1]);
		for (int i = 0; i < 2; ++i)
			printf(" %d", solve(arr[i], arr[(i + 1) & 1]));

		// Do NOT continue. END, instead!
		//END:
		cout << "\n";
	}
	return 0;
}

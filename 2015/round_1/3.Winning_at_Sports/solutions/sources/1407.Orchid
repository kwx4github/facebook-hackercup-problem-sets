/**
 *@author:  Orchid
 *@Problem: Winning the sports
 *@Contest: Hacker Cup 15 Round 1
 */
#include<bits/stdc++.h>
#define ULLI unsigned long long int
#define LLI long long int
#define pb push_back
#define mem(a,p) memset(a,p,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define bitcount __builtin_popcount
#define checkbit(n,b) ((n>>b)&1)
#define gcd __gcd
#define rep(i,a,b) for(int i=a;i<b;++i)
#define all(a) a.begin(),a.end()
#define sz(a) ((int)(a.size()))
#define DREP(a) sort(all(a));a.erase(unique(all(a)),a.end())
#define debug(x,y) cerr<<x<<" "<<y<<" "<<endl;
#define ns ios_base::sync_with_stdio(false);cin.tie(0)
using namespace std;
#define VI vector<int>
#define PII pair<int,int>
#define MOD 1000000007LL
#define EPS 1e-12

//algo: catalan number, bertrand's theorem::andre's proof

LLI power(LLI base, LLI exponent) {
    if(exponent == 0) {
        return 1;
    } else if(!(exponent & 1)) {
        LLI val = power(base, exponent / 2);
        return (val * val) % MOD;
    } else {
        return (base * power(base, exponent - 1)) % MOD;
    }
}


LLI inverseMod(LLI x) {
    return power(x, MOD - 2);
}

LLI fact[6000];

void pre() {
    fact[0] = fact[1] = 1;
    rep(i, 2, 4006)
    fact[i] = (fact[i - 1] * i) % MOD;
}


LLI nCr(int n, int r) {
    if(n < r) {
        return 0LL;
    }
    if(r == 0 || r == n) {
        return 1LL;
    }
    LLI c = (fact[n]) % MOD;
    c = (c * (inverseMod(fact[n - r]) % MOD)) % MOD;
    c = (c * (inverseMod(fact[r]) % MOD)) % MOD;
    return c;
}

int main() {
    ns;
    freopen("winning_at_sports.txt", "r", stdin);
    freopen("winning_at_sports.out", "w", stdout);
    pre();
    int p, q, cs = 1;
    char c;
    int t;
    cin >> t;
    while(t--) {
        cin >> p >> c >> q;
        LLI ans1 = nCr((LLI)p + q, (LLI)q);
        ans1 %= MOD;
        ans1 *= (p - q);
        ans1 %= MOD;
        ans1 *= inverseMod((LLI)p + q);
        ans1 %= MOD;
        LLI ans2 = nCr((LLI)q + q, (LLI)q);
        ans2 %= MOD;
        ans2 *= inverseMod((LLI)1 + q);
        ans2 %= MOD;
        cout << "Case #" << cs++ << ": " << ans1 << " " << ans2 << "\n";
    }
    return 0;
}

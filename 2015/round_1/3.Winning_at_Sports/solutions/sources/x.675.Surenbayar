#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <queue>
#include <stack>
#include <vector>
#include <cstring>
#include <string>
#include <map>
#include <cstdlib>
#include <set>
#include <climits>

#define mp make_pair
#define pb push_back
#define xx first
#define yy second
#define C(a) memset((a), 0, sizeof(a))
#define rep(l,r,x,i) for(int (i)=(l);(i)<(r);(i)+=(x))
#define repn(n,i) for(int (i)=0;(i)<(n);(i)++)
#define readInt(n) scanf("%d",&n)
#define readl(n) scanf("%lld",&n)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define L(a) (int)(a.size())
#define all(a) (a).begin(), (a).end()
#define mod 1000000007
#define vii vector<int>
#define pii pair<int, int>
#define pli pair<long long, int>
#define pll pair<long long, long long>
#define pil pair<int, long long>
#define vpi vector<pair<int, int> >
typedef long long LL;

LL mullog(LL a, LL b, LL c) {LL ret = 0ll;while(b) {if(b&1ll) ret = (ret+a)%c;a = (a+a)%c;b >>= (1ll);}return ret;}
LL powlog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = (ret*a)%c;a = (a*a)%c;b >>= (1ll);}return ret;}
int powlog(int a, int b, int c) {int ret = 1;while(b) {if(b&1) ret = (ret*a)%c;a = (a*a)%c;b >>= (1);}return ret;}
LL powLog(LL a, LL b, LL c) {LL ret = 1ll;while(b) {if(b&1ll) ret = mullog(ret,a,c);a = mullog(a,a,c);b >>= (1ll);}return ret;}
int gcd(int a, int b) {return a ? gcd(b % a, a) : b; }
LL gcd(LL a, LL b){return a ? gcd(b % a, a) : b; }

int dirx[8] = {1,0,-1,0,1,-1,-1,1};
int diry[8] = {0,-1,0,1,1,1,-1,-1};

using namespace std;
long long dp[2001][2001];
long long dp1[2001][2001];

long long solve(int n, int m) {
    if(m<0) return 0ll;
    if(n<=0) return 0ll;
    if(m==0) return 1ll;
    if(dp[n][m]!=-1) return dp[n][m];
    if(n<=m) return dp[n][m] = 0ll;
    return dp[n][m] = (solve(n-1,m)+solve(n,m-1))%mod;
}

long long solve1(int n, int m) {
    if(n<0) return 0ll;
    if(m<=0) return 0ll;
    if(n==0) return 1ll;

    if(dp1[n][m]!=-1) return dp1[n][m];
    if(m<n) return dp1[n][m] = 0ll;
    return dp1[n][m] = (solve1(n-1,m)+solve1(n,m-1))%mod;
}

int main() {
    freopen("input.input", "r", stdin);
    freopen("output.txt","w", stdout);
    memset(dp, -1ll, sizeof dp);
    memset(dp1, -1ll, sizeof dp1);
    dp[1][0] = 1ll;
    dp1[1][0] = 1ll;
    int T,a,b;
    cin >> T;
    for(int cs=1;cs<=T;cs++) {
        scanf("%d-%d",&a,&b);
        printf("Case #%d: %lld %lld\n",cs, (solve(a,b))%mod, solve1(b,b)%mod);
    }
}

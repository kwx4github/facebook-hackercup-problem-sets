#include <bits/stdc++.h>

using namespace std;

// TEMPLATE {{{
#ifndef LOCAL
#define OJ 1
#else
#define OJ 0
#endif

#define endl '\n'
#define TIMESTAMP merr << "Execution time: " << (double)clock()/CLOCKS_PER_SEC << " s.\n"
class C_ {}; template <typename T> C_& operator <<(C_& __m, const T& __s) { if (!OJ) cerr << "\E[91m" << __s << "\E[0m"; return __m; }
C_ merr;

struct __s { __s() { if (OJ) { ios_base::Init i; cin.sync_with_stdio(0); cin.tie(0); } } ~__s(){ TIMESTAMP; } } __S;
/// END OF TEMPLATE }}}

/*
 * segfault at 30 ip 00007ff0b3878956 sp 00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+
 *                                       00007fff195d93f0 error 4 in libgtk-x11-2.0.so.0.2400.25[7ff0b35ba000+435000]
 */

const int mod = 1000000007;

int dpfree[2222][2222];
int dpfull[2222][2222];

int recfree(int x, int y) {
  int ans = 0;
  if (dpfree[x][y] != -1) return dpfree[x][y];
  if (x && (x-1 > y || (x-1 == 0 && y == 0))) ans += recfree(x-1, y);
  if (y) ans += recfree(x, y-1);
  if (ans >= mod) ans -= mod;
  return dpfree[x][y] = ans;
}

int recfull(int x, int y) {
  int ans = 0;
  if (dpfull[x][y] != -1) return dpfull[x][y];
  if (x) ans += recfull(x-1, y);
  if (y && x <= y-1) ans += recfull(x, y-1);
  if (ans >= mod) ans -= mod;
  return dpfull[x][y] = ans;
}

int main() {
  int T;
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  cin >> T;
  for (int tt = 0; tt < T; tt++) {
    merr << tt << '\n';
    int x,y;
    memset(dpfree, 255, sizeof(dpfree));
    memset(dpfull, 255, sizeof(dpfull));
    dpfree[0][0] = dpfull[0][0] = 1;
    cin >> x;
    cin.ignore(1);
    cin >> y;
    cout << "Case #" << tt+1 << ": " << recfree(x,y) << " " << recfull(x,y) << endl;
  }
  return 0;
}

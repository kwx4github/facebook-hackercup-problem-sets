#include <array>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <functional>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

#define REP(i, n) for(int i = 0; i < (int)(n); ++ i)
#define FOR(i, b, e) for(auto i = b; i < e; ++ i)
#define all(x) (x).begin(), (x).end()

const long long MOD = 1000000007;
long long C[2001][2001];

long long stressfree(int A, int  B)
{
	// C[i][j] : (i, j) stressfree
	if(B == 0) return 1;
	memset(C, 0, sizeof C);

	for(int i=1; i<=A; ++i) C[i][0] = 1;
	for(int i=2; i<=A; ++i)
	{
		for(int j = 1; j < i; ++ j)
		{
			C[i][j] = C[i-1][j] + C[i][j - 1];
			C[i][j] %= MOD;
		}
	}
	return C[A][B];
}

long long stressful(int A, int B)
{
	if(B == 0) return 1;
	memset(C, 0, sizeof C);

	for(int i=1; i<=A; ++i) C[i][0] = 1;
	for(int i=2; i<=A; ++i)
	{
		for(int j = 1; j < i; ++ j)
		{
			C[i][j] = C[i-1][j] + C[i][j - 1];
			C[i][j] %= MOD;
		}
	}
	// (B-1,B) -> (B,B) -> (B+1, B) -> (A, B)
	// always beated -> win afterwards
	return C[B+1][B];
}

int main()
{

	int T;
	scanf("%d", &T);
	for(int k = 1; k <= T; ++ k) {
		int A, B;
		scanf("%d-%d", &A, &B);
		printf("Case #%d: %lld %lld\n", k, stressfree(A, B), stressful(A, B));
	}
	return 0;
}

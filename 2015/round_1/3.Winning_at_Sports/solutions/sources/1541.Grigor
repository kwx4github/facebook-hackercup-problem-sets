#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:268435456")

#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <sstream>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int maxn = 2100;

const ull mod = 1000000007;

ull stressful[ maxn ][ maxn ];
ull stressfree[ maxn ][ maxn ];

void precalc()
{
   for( int i = 0; i < maxn; ++i )
      for( int j = 0; j < maxn; ++j )
      {
         if( i == 1 && j == 0 )
            stressfree[ i ][ j ] = 1;
         else if( i <= j )
            stressfree[ i ][ j ] = 0;
         else
         {
            stressfree[ i ][ j ] = 0;
            if( i > 0 )
               stressfree[ i ][ j ] += stressfree[ i - 1 ][ j ];
            if( j > 0 )
               stressfree[ i ][ j ] += stressfree[ i ][ j - 1 ];
         }

         if( i == 0 )
            stressful[ i ][ j ] = 1;
         else if( i > j )
            stressful[ i ][ j ] = stressful[ j ][ j ];
         else if( i == j )
            stressful[ i ][ j ] = stressful[ i - 1 ][ j ];
         else
            stressful[ i ][ j ] = stressful[ i ][ j - 1 ] + stressful[ i - 1 ][ j ];


         stressful[ i ][ j ] %= mod;
         stressfree[ i ][ j ] %= mod;
      }
}



struct io
{
   io( int num ) : num( num ) {}
   int num;
};

struct input : public io
{
   input( int num ) : io( num ) {}
   // input fields

   ull win;
   ull lose;
};

struct output : public io
{
   output( int num ) : io( num ) {}
   // output fields

   ull full;
   ull free;
};

istream& operator >> ( istream& in, input& i )
{
   // input code
   string s;
   cin >> s;
   i.win = stoull( s.substr( 0, s.find( '-' )));
   i.lose = stoull( s.substr( s.find( '-' ) + 1 ));
   return in;
}

ostream& operator << ( ostream& out, input& i )
{
   // print input code
   return out;
}

ostream& operator << ( ostream& out, output& o )
{
   // output code
   out << o.free << ' ' << o.full;
   return out;
}

bool operator == ( const output& lhs, const output& rhs )
{
   // compare two outputs
   return true;
}

void solve( const input& in, output& out )
{
   out.free = stressfree[ in.win ][ in.lose ];
   out.full = stressful[ in.win ][ in.lose ];
}

void bruteforce( const input& in, output& out )
{
}

input generate_input( int num )
{
   // generate random input
   return input( num );
}

void brute_test( const input& in )
{
   output o_solve( in.num );
   output b_solve( in.num );

   solve( in, o_solve );
   bruteforce( in, b_solve );

   if( o_solve == b_solve )
      cout << "correct" << endl;
   else
      cout << "INCORRECT" << endl;
}

void stress_test( int num )
{
   for( int i = 1; i <= num; ++i )
   {
      input in = generate_input( i );
      cout << "Input #" << i << ":" << endl;
      cout << in << endl;
      brute_test( in );
   }
}

#define do_brute 0
#define do_stress 0

int main()
{
   // file io
   precalc();

   freopen( "C.in", "r", stdin );
   freopen( "C.out", "w", stdout );

   if( do_stress )
   {
      int num;
      cin >> num;
      stress_test( num );
   }
   else
   {
      int num;
      cin >> num;
      for( int i = 1; i <= num; ++i )
      {
         input in( i );
         cin >> in;
         if( do_brute )
            brute_test( in );
         else
         {
            output out( i );
            solve( in, out );
            cout << "Case #" << i << ": " << out << endl;
         }
      }
   }
}
import core.thread;
import std.conv, std.stdio, std.string;
import std.algorithm, std.array, std.bigint, std.container, std.math, std.range, std.regex;

//	Input
class EOFException : Throwable { this() { super("EOF"); } }
string[] tokens;
string readToken() { for (; tokens.empty; ) { tokens = readln.split; if (stdin.eof) throw new EOFException; } auto token = tokens[0]; tokens.popFront; return token; }
int readInt() { return to!int(readToken); }
long readLong() { return to!long(readToken); }
real readReal() { return to!real(readToken); }

//	chmin/chmax
void chmin(T)(ref T t, in T f) { if (t > f) t = f; }
void chmax(T)(ref T t, in T f) { if (t < f) t = f; }

//	Pair
struct Pair(S, T) {
	S x; T y;
	int opCmp(    const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	int opCmp(ref const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	string toString() const { return "(" ~ to!string(x) ~ ", " ~ to!string(y) ~ ")"; }
}
auto pair(S, T)(inout(S) x, inout(T) y) { return Pair!(S, T)(x, y); }

//	Array
int binarySearch(T)(in T[] as, in bool delegate(T) test) { int low = -1, upp = as.length; for (; low + 1 < upp; ) { int mid = (low + upp) >> 1; (test(as[mid]) ? low : upp) = mid; } return upp; }
int lowerBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <  val); }); }
int upperBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <= val); }); }
T[] unique(T)(in T[] as) { T[] bs; foreach (a; as) if (bs.empty || bs[$ - 1] != a) bs ~= a; return bs; }


immutable long MO = 1_000_000_007;
immutable LIM = 2005;

shared long[][] dp0, dp1;

void prepare() {
	dp0 = new shared(long[][])(LIM, LIM);
	dp1 = new shared(long[][])(LIM, LIM);
	dp0[1][0] = 1;
	foreach (a; 0 .. LIM) foreach (b; 0 .. LIM) if (dp0[a][b]) {
		if (a + 1 < LIM && b < LIM && a + 1 > b) {
			(dp0[a + 1][b] += dp0[a][b]) %= MO;
		}
		if (a < LIM && b + 1 < LIM && a > b + 1) {
			(dp0[a][b + 1] += dp0[a][b]) %= MO;
		}
	}
	dp1[0][0] = 1;
	foreach (a; 0 .. LIM) foreach (b; 0 .. LIM) if (dp1[a][b]) {
		if (a + 1 < LIM && b < LIM && a + 1 <= b) {
			(dp1[a + 1][b] += dp1[a][b]) %= MO;
		}
		if (a < LIM && b + 1 < LIM && a <= b + 1) {
			(dp1[a][b + 1] += dp1[a][b]) %= MO;
		}
	}
debug{
foreach(a;0..4)foreach(b;0..4)if(a>b){
writeln("a = ",a,", b = ",b,"  ",bruteForce0(a,b)," ",dp0[a][b],"  ",bruteForce1(a,b)," ",dp1[b][b]);
}
}
	foreach (a; 0 .. 8) foreach (b; 0 .. 8) if (a > b) {
		assert(bruteForce0(a, b) == dp0[a][b]);
		assert(bruteForce1(a, b) == dp1[b][b]);
	}
}

long bruteForce0(int a, int b) {
	long ret;
	foreach (h; 0 .. 1 << (a + b)) {
		bool ok = true;
		int me, enemy;
		foreach (i; 0 .. a + b) {
			if (h & 1 << i) {
				++me;
			} else {
				++enemy;
			}
			if (i == 0) {
				ok = ok && (me == 1 && enemy == 0);
			}
			ok = ok && (me > enemy);
		}
		ok = ok && (me == a && enemy == b);
		if (ok) {
			++ret;
		}
	}
	return ret;
}

long bruteForce1(int a, int b) {
	long ret;
	foreach (h; 0 .. 1 << (a + b)) {
		bool ok = true;
		int me, enemy;
		foreach (i; 0 .. a + b) {
			if (h & 1 << i) {
				++me;
			} else {
				++enemy;
			}
			if (enemy < b) {
				ok = ok && (me <= enemy);
			}
		}
		ok = ok && (me == a && enemy == b);
		if (ok) {
			++ret;
		}
	}
	return ret;
}

class Solver : core.thread.Thread {
	int caseId;
	this(int caseId) {
		this.caseId = caseId;
		super(&main);
	}
	void main() {
		try {
			run;
			stderr.writeln("DONE  Case #", caseId);
		} catch (Throwable e) {
			stderr.writeln("ERROR Case #", caseId, ": ", e.msg);
		} finally {
			stderr.flush;
		}
	}
	
	string S;
	long ans0, ans1;
	
	void run() {
		auto ss = S.split("-");
		int A = ss[0].to!int;
		int B = ss[1].to!int;
debug{
writeln("A = ",A,", B = ",B);
}
		ans0 = dp0[A][B];
		ans1 = dp1[B][B];
	}
	
	void input() {
		S = readToken;
	}
	
	void output() {
		writeln("Case #", caseId, ": ", ans0, " ", ans1);
		stdout.flush;
	}
}

void main(string[] args) {
	bool parallel = false;
	foreach (arg; args) if (arg == "-p") parallel = true;
	prepare;
	auto solvers = new Solver[readInt];
	foreach (caseId, ref solver; solvers) solver = new Solver(caseId + 1);
	if (parallel) {
		foreach (solver; solvers) solver.input, solver.start;
		foreach (solver; solvers) solver.join, solver.output;
	} else {
		foreach (caseId, solver; solvers) {
			solver.input;
			solver.run;
			solver.output;
			stderr.writeln("DONE  Case #", caseId + 1);
			stderr.flush;
		}
	}
}


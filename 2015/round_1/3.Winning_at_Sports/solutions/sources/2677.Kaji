#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <map>
#include <climits>
using namespace std;

#define REP(i,n) for(int i=0; i<(int)(n); i++)
#define RREP(i,n) for(int i=(int)n-1; i>=0; i--)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();++i)
#define ALL(c) (c).begin(), (c).end()

typedef long long int ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int> > pipii;
typedef vector<int> vi;

const int INF = 1e9;
const int MOD = 1e9+7;

int dp[2500][2500];
int dp2[2500][2500];

int main(void){
    int T;
    cin >> T;

    dp[0][0] = dp2[0][0] = 1;
    dp[1][0] = 1;
    for(int i = 0; i < 2100; i++){
        for(int j = 0; j < 2100; j++){
            if(i - j >= 2){
                dp[i+1][j] = (dp[i+1][j] + dp[i][j]) % MOD;
                dp[i][j+1] = (dp[i][j+1] + dp[i][j]) % MOD;
            }
            else if(i - j >= 1){
                dp[i+1][j] = (dp[i+1][j] + dp[i][j]) % MOD; 
            }
             
            if(j - i >= 1){
                dp2[i+1][j] = (dp2[i+1][j] + dp2[i][j]) % MOD;
                dp2[i][j+1] = (dp2[i][j+1] + dp2[i][j]) % MOD;
            }
            else if(j - i >= 0){
                dp2[i][j+1] = (dp2[i][j+1] + dp2[i][j]) % MOD; 
            }
        }
    }
/*
    for(int i = 0; i < 5; i++){
        for(int j = 0; j < 5; j++){
            cout << " " << dp2[i][j];
        }cout << endl;
    }
*/

    for(int tt = 1; tt <= T; tt++){
        int a, b;
        scanf("%d-%d", &a, &b);
        printf("Case #%d: %d %d\n", tt, dp[a][b], dp2[b][b]);
    }

    return 0;
}


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long LL;
typedef double DB;
typedef unsigned UINT;
typedef unsigned long long ULL;

#define min(a, b)  a < b ? a : b
#define max(a, b)  a > b ? a : b

#define rep(i,n) for(int i=0;i<n;++i)
#define rep1(i,n) for(int i=1;i<=n;++i)
#define repab(i,a,b) for(int i=a;i<=b;++i)
#define dwn(i,n) for (int i=n-1;i>-1;--i)
#define dwn1(i,n) for (int i=n;i>0;--i)
#define dwnab(i,a,b) for(int i=a;i>=b;--i)
#define each(it, A) for (__typeof(A.begin()) it=A.begin(); it != A.end(); ++it)

#define pair pii<int, int>
#define all(v) (v).begin(), (v).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define sortv(v) sort(all(v))

#define mset(m) memset(m,0,sizeof(m))

#define sz(c) (int)c.size()
#define ff first
#define ss second

#define SI ({int x;scanf("%d", &x);x;});
#define SL ({LL x;scanf("%lld", &x);x;});

#define PI(n) printf("%d", n);
#define PLL(n) printf("%I64d", n);

#define PILN(n) printf("%d\n", n);
#define PLLN(n) printf("%I64d\n", n);

#define PLN printf("\n");

#define MAX 2222

int t, n, s1, s2, m[MAX][MAX], pa, pb;
char c;

int conv(int a, int b)
{
	if (a <= b || a > pa || b > pb || a < 0 || b < 0)
		return 0;
	if (m[a][b])
		return m[a][b];
	m[a][b] = (conv(a+1, b) + conv(a, b+1)) % 1000000007;
	return m[a][b];
}

int conv2(int a, int b)
{
	if (a > pa || b > pb || a < 0 || b < 0)
		return 0;
	if (b < a && b != pb)
		return 0;
	if (m[a][b])
		return m[a][b];
	m[a][b] = (conv2(a+1, b) + conv2(a, b+1)) % 1000000007;
	return m[a][b];
}

int main() {
	ios_base::sync_with_stdio(0);
	freopen("C.txt","w",stdout);
	freopen("winning_at_sports.txt","r",stdin);
	
    cin>>t;

	rep1(q, t)
	{		
		cin>>pa>>c>>pb;
		mset(m);
		m[pa][pb] = 1;
		s1 = conv(1,0);
		mset(m);
		m[pa][pb] = 1;
		s2 = conv2(0, 0);    
			
	    printf("Case #%d: %d %d\n", q, s1, s2);
	}

	
    return 0;
}



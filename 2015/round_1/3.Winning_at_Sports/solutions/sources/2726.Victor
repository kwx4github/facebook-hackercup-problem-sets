#include <cmath>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <deque>
#include <queue>
#include <functional>
#include <map>
#include <bitset>
#include <stack>
using namespace std;
#define fr(a,b,c) for(int a=b;a<c;a++)
#define addEdge(a,b) to[z] = b; ant[z] = adj[a]; adj[a] = z++
#define addEdgeC(a,b,c) from[z] = a; to[z] = b; ant[z] = adj[a]; adj[a] = z; cost[z] = c; edges[z] = z; z++;
#define rp(a,b) fr(a,0,b)
#define cl(a,b) memset((a),(b),sizeof(a))
#define MP make_pair
#define F first
#define S second
const int infinity = 0x3f3f3f3f;
typedef pair<int,int> pii;
typedef long long ll;

const int MOD = 1000000007;

int T,A,B;
char line[1000];

int memo[2010][2010];
int memo2[2010][2010];

int stress(int a, int b){
	if(memo[a][b] != -1) return memo[a][b];
	if(a == A && b == B) return memo[a][b] = 1;
	if(b < B){
		if(a < b) return memo[a][b] = (stress(a+1,b)%MOD + stress(a,b+1)%MOD)%MOD;
		else return memo[a][b] = stress(a,b+1)%MOD;
	}else return memo[a][b] = stress(a+1,b)%MOD;
}

int free(int a, int b){
	if(memo2[a][b] != -1) return memo2[a][b];
	if(a == A && b == B) return memo2[a][b] = 1;
	if(a == b+1) return memo2[a][b] = free(a+1,b)%MOD;
	else return memo2[a][b] = ( ((a < A)?free(a+1,b)%MOD:0) + free(a,b+1)%MOD)%MOD;
}

int main(){
	scanf("%d",&T);
	rp(t,T){
		memset(memo,-1,sizeof(memo));
		memset(memo2,-1,sizeof(memo2));
		scanf("%s",line);
		bool first = true;
		for(char * tok = strtok(line,"-"); tok != NULL; tok = strtok(NULL,"-")){
			if(first) sscanf(tok,"%d",&A);
			else sscanf(tok,"%d",&B);
			first = false;
		}
		int ans1 = free(1,0);
		int ans2 = stress(0,0);
		printf("Case #%d: %d %d\n", t+1,ans1, ans2);
	}
}



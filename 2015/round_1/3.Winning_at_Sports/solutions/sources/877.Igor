import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Task {
    final int MOD = 1_000_000_000 + 7;

    int firstScore;
    int secondScore;
    int[][] memFree;
    int[][] memFull;

    boolean isFree(int a, int b) {
        return a > b;
    }

    boolean isFull(int a, int b) {
        return a <= b || b == secondScore;
    }

    int calcFree(int a, int b) {
        if (a < 0 || b < 0)
            return 0;
        if (memFree[a][b] >= 0)
            return memFree[a][b];
        if (!isFree(a, b))
            return 0;
        return memFree[a][b] = (calcFree(a - 1, b) + calcFree(a, b - 1)) % MOD;
    }

    int calcFull(int a, int b) {
        if (a < 0 || b < 0)
            return 0;
        if (memFull[a][b] >= 0)
            return memFull[a][b];
        if (!isFull(a, b))
            return 0;
        return memFull[a][b] = (calcFull(a - 1, b) + calcFull(a, b - 1)) % MOD;
    }

    public void solve(int testNumber, FastScanner in, PrintWriter out) throws IOException {
        String[] parts = in.next().split("-");
        firstScore = Integer.parseInt(parts[0]);
        secondScore = Integer.parseInt(parts[1]);
        memFree = new int[firstScore + 1][secondScore + 1];
        memFull = new int[firstScore + 1][secondScore + 1];
        for (int i = 0; i <= firstScore; i++) {
            Arrays.fill(memFree[i], -1);
            Arrays.fill(memFull[i], -1);
        }
        memFree[0][0] = 1;
        memFull[0][0] = 1;
        out.format("Case #%d: %d %d%n", testNumber,
                calcFree(firstScore, secondScore), calcFull(firstScore, secondScore));
    }

    public static void main(String[] args) throws IOException {
        FastScanner in = new FastScanner(new FileInputStream("input"));
        PrintWriter out = new PrintWriter(new FileOutputStream("output"));
        int t = in.nextInt();
        for (int i = 0; i < t; i++)
            new Task().solve(i + 1, in, out);
        in.close();
        out.close();
    }

    static class FastScanner {
        private StringTokenizer tokenizer;
        private BufferedReader reader;

        public FastScanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line;
                try {
                    line = reader.readLine();
                } catch (IOException e) {
                    return null;
                }
                if (line == null)
                    return null;
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                return null;
            }
            return line;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public void close() {
            try {
                reader.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }
}
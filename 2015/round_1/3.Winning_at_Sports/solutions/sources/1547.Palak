#include<iostream>
using namespace std;
# define MAX 2000
# define MOD 1000000007

long long int dp[MAX][MAX] = {0};

// ------------ fermat's theorem ----------

long long int modPow(long long int x, long long int y) 
{
	long long int res = 1;
	while(y>0) 
	{
		if(y%2 != 0) 
		{
			res = (res*x) % MOD;
		}
		x = (x*x) % MOD;
		y/= 2;
	}
	return res;
}
 
long long int modPowUtil(long long int s) 
{
	return modPow(s, MOD-2);
}

long long int cal_n_c_r(long long int n, long long int r) 
{
	int i;
	long long int number = 1;
	if(r>n-r)
		r = n-r;
	for (i=0; i<r; i++) 
	{
		number = (number*(n-i)) % MOD;
	}
	long long int denominator = 1; 
	for (i=1; i<=r; i++) 
	{
		denominator = (denominator*i) % MOD;
	}
	return ((number*modPowUtil(denominator)) % MOD);
}

long long int cal_catalan(long long int n)
{
	long long int e = cal_n_c_r(2*n, n);
 	return ((e*modPowUtil(n+1)) % MOD);
}

void func()
{
	int i,j;
	for(i=0;i<MAX;i++)
		dp[i][0]=1;
	for(i=1;i<MAX;i++)
	{
		for(j=1;j<MAX && j<=i; j++)
			dp[i][j] = ((dp[i-1][j]%MOD) + (dp[i][j-1]%MOD))%MOD;
	}
}

int main()
{
	char r;
	int t,o,p,q;
	func();
	cin>>t;
	while(t--)
	{
		o++;
		cin>>p>>r>>q;
		cout<<"Case #"<<o<<": "<<dp[p-1][q]<<" "<<cal_catalan(q)<<"\n";
	}
	return 0;
}
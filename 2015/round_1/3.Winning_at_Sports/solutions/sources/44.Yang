#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

const int kMod = 1000000007;
const int kMaxN = 2007;

int stress_free[kMaxN][kMaxN];
int stressful[kMaxN][kMaxN];

void PreCalc() {
    memset(stress_free, 0, sizeof(stress_free));
    memset(stressful, 0, sizeof(stressful));
    stress_free[1][0] = 1;
    for (int i = 1; i < kMaxN; ++i) {
        for (int j = 0; j < i; ++j) {
            if (i == 1 && j == 0) {
                continue;
            }
            stress_free[i][j] = stress_free[i - 1][j];
            if (j > 0) {
                stress_free[i][j] += stress_free[i][j - 1];
                if (stress_free[i][j] >= kMod) {
                    stress_free[i][j] -= kMod;
                }
            }
        }
    }

    stressful[0][0] = 1;
    for (int i = 0; i < kMaxN; ++i) {
        for (int j = i; j < kMaxN; ++j) {
            if (i == 0 && j == 0) {
                continue;
            }
            if (i > 0) {
                stressful[i][j] = stressful[i - 1][j];
            }
            if (j > 0) {
                stressful[i][j] += stressful[i][j - 1];
                if (stressful[i][j] >= kMod) {
                    stressful[i][j] -= kMod;
                }
            }
        }
    }
}

void Solve(int case_id) {
    string buf;
    cin >> buf;
    int a = 0, b = 0;
    int at = 0;
    while (buf[at] != '-') {
        ++at;
    }
    for (int i = 0; i < at; ++i) {
        a = a * 10 + buf[i] - '0';
    }
    for (int i = at + 1; i < buf.size(); ++i) {
        b = b * 10 + buf[i] - '0';
    }

    assert (a > b);
    cout << "Case #" << case_id << ": " << stress_free[a][b] << " " << stressful[b][b] << endl;
}

int main() {
    PreCalc();
    int case_num;
    cin >> case_num;
    for (int i = 1; i <= case_num; ++i) {
        Solve(i);
    }
    return 0;
}
#include <bits/stdc++.h>
//#define endl "\n"
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define SORT(a) sort(a.begin(), a.end())
#define SORTR(a) sort(a.rbegin(), a.rend())
#define GET(a, n) for (int i = 0; i < n; ++i) cin >> a[i];
#define GETM(a, n, m) for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) cin >> a[i][j];
#define PRINTM(a, n, m) for (int i = 0; i < n; ++i) { for (int j = 0; j < m; ++j) cout << a[i][j] << " ";  cout << endl; };
#define PRINT(a, n) for (int i = 0; i < n; ++i) cout << a[i] << " ";
#define GETSUM(sum, n) sum = 0; for (int i = 0; i < n; ++i) { int tmp; cin >> tmp; sum += tmp; }
#define SUM(a, n, sum) sum = 0; for (int i = 0; i < n; ++i) { sum += a[i]; }
#define IT(a) a.begin(), a.end()
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef vector <int> VI;
typedef vector <vector <int>> VVI;
typedef pair <int, int> PII;
template <class T> typename T::value_type arr_sum(const T& v, int n) { typename T::value_type sum = 0; FOR(i, 0, n) sum += v[i]; return sum; }
struct Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

using namespace std;

int main()
{
    const int MOD = 1000000007;
    string s(5000, '?');
    vector <vector <long long>> dp(s.size(), vector <long long> (s.size() + 1));
    FOR (i, 0, s.size()) {
        dp[0][i] = 0;
    }
    dp[0][1] = s[0] == ')' ? 0 : 1;
    FOR (i, 1, s.size()) {
        FOR (j, 0, s.size()) {
            if (s[i] != '(') {
                if (i - 1 >= 0 && j + 1 <= s.size()) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MOD;
                }
            }
            if (s[i] != ')') {
                if (i - 1 >= 0 && j - 2 >= 0) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MOD;
                }
            }
        }
    }


    string s2(5000, '?');
    vector <vector <long long>> dp2(s.size(), vector <long long> (s.size() + 1));
    FOR (i, 0, s.size()) {
        dp2[0][i] = 0;
    }
    dp2[0][1] = s2[0] == ')' ? 0 : 1;
    FOR (i, 1, s2.size()) {
        FOR (j, 0, s2.size()) {
            if (s2[i] != '(') {
                if (i - 1 >= 0 && j + 1 <= s2.size()) {
                    dp2[i][j] = (dp2[i][j] + dp2[i - 1][j + 1]) % MOD;
                }
            }
            if (s2[i] != ')') {
                if (i - 1 >= 0 && j - 1 >= 0) {
                    dp2[i][j] = (dp2[i][j] + dp2[i - 1][j - 1]) % MOD;
                }
            }
        }
    }

    //cout << dp[s.size() - 1][0];
    int t;
    scanf("%d", &t);
    FOR (i, 0, t) {
        int a, b;
        scanf("%d-%d", &a, &b);
        if (b == 0) {
            printf("Case #%d: %lld %lld\n", i + 1, 1, 1);
            continue;
        }
        long long res = 0;
        //for (int j = 0; j < a - b; ++j) {
        //    res = (res + dp[b - 1][j]) % MOD;
        //}
        printf("Case #%d: %lld %lld\n", i + 1, dp[a + b - 1][a - b], dp2[2 * b - 1][0]);
    }
}

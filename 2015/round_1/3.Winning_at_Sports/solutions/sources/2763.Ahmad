
#include <bits/stdc++.h>
#define mp make_pair
#define pii pair<int,int>
#define pb push_back
#define max(a,b)a>b?a:b
#define min(a,b)a<b?a:b
#define read() freopen("in.txt","r",stdin)
#define limit 10000003
using namespace std;
template <typename T>
string NumberToString ( T Number )
{
    ostringstream ss;
    ss << Number;
    return ss.str();
}
int Set( int n , int pos)
{
    return ( n=n | 1<<pos );
}
int reset(int N,int pos)
{
    return N= N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}
typedef long long ll;
ll mod = 1000000007;
ll stresslessdp[2005][2005];
ll stressfuldp[2005][2005];
ll fun(int w, int l)
{

    if(l<0 || w<0)
        return 0;
    if(w==1)
    {
        return 1;
    }
    if(stresslessdp[w][l]!=-1)
        return stresslessdp[w][l];
    ll a=0,b=0;
    if(w-1!=l)
    {
        a = fun( w-1, l);
        a = a%mod;
    }
    if(w!=l-1)
    {
        b = fun(w,l-1);
        b = b%mod;
    }
    return stresslessdp[w][l] = (a + b) % mod;
}
ll tw, tl ;
ll noFun( int w, int l)
{
    //cout<<w<<ends<<l<<endl;
    if(l<0 || w<0)
        return 0;

    if(w==0 && l==0)
        return 0;
    if(w==0 && l==1)
        return 1;
    if(w==1 && l==0)
        return 1;
    if(w==1 && l==1)
        return 1;

    if(stressfuldp[w][l]!=-1)
        return stressfuldp[w][l];
    ll a=0,b=0;

    if(w>=l)
    {
        a = noFun(w-1, l);
        a = a%mod;
    }
    else
    {
        a = noFun(w-1, l);
        a = a%mod;
        b = noFun(w, l-1);
        b = b%mod;
    }

    return stressfuldp[w][l] = (a + b) % mod;
}
int main()
{
    //read();
    //freopen("out.txt","w",stdout);
    memset(stresslessdp,-1,sizeof stresslessdp);
    memset(stressfuldp,-1, sizeof stressfuldp);
    int test;
    cin>>test;
    for( int i =1; i<=test; i++)
    {
        string in;
        cin>>in;
        bool found=0;
        tw=0, tl=0;
        for( int j=0; j<in.size(); j++)
        {
            if(in[j]=='-')
            {
                found=1;
                continue;
            }
            if(found==0)
                tw = tw*10 + in[j]-'0';
            else
                tl = tl*10 + in[j]-'0';
        }
        printf("Case #%d: %lld %lld\n",i,fun(tw,tl),noFun(tw,tl));
    }

}

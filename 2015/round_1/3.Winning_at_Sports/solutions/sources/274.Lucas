import sys
sys.setrecursionlimit(1000000)

MOD = 1000000007

# http://www.vexorian.com/2014/04/srm-616-recap-and-python-review.html
# decorator that adds memoization to a function using a list of bounds
# ej: @MemoizedFunction( [10, 10, 10] )
def MemoizedFunction(bounds):
    def deco(f):
        mem = [-1] * reduce( lambda a,b: a*b, bounds )
        def g(*args):
            p = 1
            k = 0
            for i in xrange(len(args)):
                (a,b) = (args[i], bounds[i])
                k = a * p + k
                p = p * b  
            if mem[k] == -1:
                mem[k] = f(*args)
            return mem[k]
        return g
    return deco

T = int(raw_input())
for case in xrange(T):
    [fa, fb] = map(int, raw_input().split('-'))
    
    @MemoizedFunction([fa + 2, fb + 2])
    def stress_free(a, b):
        if b >= a: return 0
        if a > fa or b > fb: return 0
        if a == fa and b == fb: return 1
        return (stress_free(a + 1, b) + stress_free(a, b + 1)) % MOD
        
    @MemoizedFunction([fa + 2, fb + 2])
    def stressfull(a, b):
        if a > b and b != fb: return 0
        if a > fa or b > fb: return 0
        if a == fa and b == fb: return 1
        return (stressfull(a + 1, b) + stressfull(a, b + 1)) % MOD
        
    print "Case #%d: %d %d" % (case + 1, stress_free(1,0), stressfull(0,0))

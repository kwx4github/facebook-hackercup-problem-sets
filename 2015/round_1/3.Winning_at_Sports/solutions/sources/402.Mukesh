/*
 *
 * @author Mukesh Singh
 *
 */

/* Finding_the_Minimum_Window_in_S_which_Contains_All_Elements_from_T */

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
@SuppressWarnings("unchecked")
public class AB
{	
	int free[][] ;
	int full[][] ;
	final static int MAX = 2005 ;
	final static int MOD = 1000000007 ;
	void solve() throws Exception
	{
		free = new int[MAX][MAX];
		full = new int[MAX][MAX];
		for(int ar[]: free)
			Arrays.fill(ar,-1);
		for(int ar[]: full)
			Arrays.fill(ar,-1);
			
		for(int i = 0 ; i < MAX ; i++)
		{
			for(int j = 0 ; j < MAX ; j++)
			{
				free[i][j] = findFree(i,j);
				//System.out.println(i+" "+j+" "+free[i][j]);
			}
		}
		//System.out.println("full");
		for(int i = 0 ; i < MAX ; i++)
		{
			for(int j = 0 ; j < MAX ; j++)
			{
				full[i][j] = findFull(i,j);
				//System.out.println(i+" "+j+" "+full[i][j]);
			}
		}
		int T = in.nextInt();
		for(int t= 1 ; t <= T  ;t++)
		{
			solveT(t);		
		}
	}
	
	int findFree(int i , int j )
	{
		if(i == 0 && j == 0)
			return 1 ;
		if(i==1 && j==0)
			return 1 ;
		if( i <= j)
			return 0 ;
		if(free[i][j]==-1)
		{
			long a , b ;
			a = 0 ; b = 0 ;
			if( i-1 > b )
				a = findFree(i-1,j) ;
			if( j-1 >= 0  )
				b = findFree(i,j-1) ;
			long ans = (a+b)%MOD ;
			free[i][j] = (int)ans ;
		}
		return free[i][j];
	}
	
	int findFull(int i , int j )
	{
		if( i==0 && j==0)
			return 1 ;
		if(i==0 && j==1)
			return 1 ;
		if(full[i][j]==-1)
		{
			long a = 0 ;
			long b = 0 ;
			if( i-1 >= 0 )
				a = findFull(i-1,j);
			if( i <= j-1)
				b = findFull(i,j-1);
			long ans = (a+b)%MOD ;
			full[i][j] = (int)ans ;
		}
		return full[i][j];	
	}
	
	//solve test cases
	void solveT(int tid) throws Exception 
	{
		int i = in.nextInt();
		int j = in.nextInt();
		out.print("Case #"+tid+": ");
		if(i <= j )
			out.println(0+" "+0);		
		out.println(free[i][j]+" "+full[i][j]);		
	}
	//@ main function
	public static void main(String[] args) throws Exception 
	{
		new AB();
	}
	
	InputReader in;
	PrintStream out ;
	DecimalFormat df ;
	AB() 
	{
		try 
		{
			File defaultInput = new File("file.in");
			if (defaultInput.exists()) 
				in = new InputReader("file.in");
			else 
				in = new InputReader();
			defaultInput = new File("file.out");
			if (defaultInput.exists()) 
				out = new PrintStream(new FileOutputStream("file.out"));
			else
				out = new PrintStream(System.out);
			df = new DecimalFormat("######0.00");
			solve();
			out.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			System.exit(261);
		}
	}
	
	class InputReader {
		BufferedReader reader;
		StringTokenizer tokenizer;
		
		InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		InputReader(String fileName) throws FileNotFoundException {
			reader = new BufferedReader(new FileReader(new File(fileName)));
		}
		
		String readLine() throws IOException {
			return reader.readLine();
		}
		
		String nextToken() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens())
				tokenizer = new StringTokenizer(readLine(),"[-]");
			return tokenizer.nextToken();
		}
		
		boolean hasMoreTokens() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				String s = readLine();
				if (s == null)
					return false;
				tokenizer = new StringTokenizer(s);
			}
			return true;
		}
		
		int nextInt() throws NumberFormatException, IOException {
			return Integer.parseInt(nextToken());
		}
		
		long nextLong() throws NumberFormatException, IOException {
			return Long.parseLong(nextToken());
		}
		
		double nextDouble() throws NumberFormatException, IOException {
			return Double.parseDouble(nextToken());
		}
	}
}

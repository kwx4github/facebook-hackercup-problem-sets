import java.awt.*;
import java.awt.geom.*;
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;

public class C {
	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;
	
	public static void main(String[] args) throws IOException	{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		final int MAX_NUM_CASE = readInt();
		final long MOD = 1000000007;
		long[][] stressfree = new long[2001][2001];
		stressfree[1][0] = 1;
		for(int i = 0; i < stressfree.length; i++) {
			for(int j = 0; j < stressfree[i].length; j++) {
				if(j+1 < i && j+1 < stressfree[i].length) {
					stressfree[i][j+1] += stressfree[i][j];
					stressfree[i][j+1] %= MOD;
				}
				if(i+1 < stressfree.length) {
					stressfree[i+1][j] += stressfree[i][j];
					stressfree[i+1][j] %= MOD;
				}
			}
		}
		
		long[][] stressful = new long[2001][2001];
		stressful[0][1] = 1;
		for(int i = 0; i < stressful.length; i++) {
			for(int j = 0; j < stressful[i].length; j++) {
				if(j+1 < stressful[i].length) {
					stressful[i][j+1] += stressful[i][j];
					stressful[i][j+1] %= MOD;
				}
				if(i+1 < stressful.length && i+1 <= j) {
					stressful[i+1][j] += stressful[i][j];
					stressful[i+1][j] %= MOD;
				}
			}
		}
		for(int qq = 1; qq <= MAX_NUM_CASE; qq++)	{
			pw.print("Case #" + qq + ": ");
			String s = nextToken();
			st = new StringTokenizer(s, "-");
			int a = readInt();
			int b = readInt();
			pw.println(stressfree[a][b] + " " + stressful[b][b]);
		}
		pw.close();
	}

	/* NOTEBOOK CODE */

	private static long readLong() throws IOException	{
		return Long.parseLong(nextToken());
	}

	private static double readDouble() throws IOException	{
		return Double.parseDouble(nextToken());
	}

	private static int readInt() throws IOException	{
		return Integer.parseInt(nextToken());
	}

	private static String nextToken() throws IOException	{
		while(st == null || !st.hasMoreTokens())	{
			if(!br.ready())	{
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}


#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long lint;
#define FOR(i, f, t) for (int i = (f); i < (t); i++)
#define REP(i, n) FOR(i,0,(n))
#define SZ(v) ((int)(v).size())
#define ALL(v) (v).begin(), (v).end()
#define X first
#define Y second
#define pb push_back

// BEGIN CUT HERE
template<class T, class V>
ostream& operator<<(ostream &out, const pair<T, V> &p) {
    out << '(' << p.X << ',' << p.Y << ')';
    return out;
}

template<class T>
ostream& operator<<(ostream &out, const vector<T> &v) {
    REP(i,SZ(v)) {
        out << v[i] << ' ';
    }
    return out;
}
string getName(const char *&argument) {
    const char *from = argument;
    int d = 0;
    while ((*argument != 0) && !(*argument == ',' && d == 0)) {
        if (*argument == '(' || *argument == '[' || *argument == '<') {
            d++;
        }
        if (*argument == ')' || *argument == ']' || *argument == '>') {
            d--;
        }
        argument++;
    }
    string res(from, argument-from);
    argument++;
    return res;
}
void print(const char *arguments)
{
    cout << endl;
}
template<typename T, typename... Args>
T print(const char *arguments, T t, Args... args)
{
    string name = getName(arguments);
    cout << name << '=' << t << ' ';
    print(arguments, args...);
    return t;
}
#define SP(...) print(#__VA_ARGS__,__VA_ARGS__)
// END CUT HERE

template<class T>
struct Mod {
    T x;
    T m;
    Mod() {
        // for map
    }
    Mod(T m): m(m) {
        x = rand()%m;
    }
    Mod(T x, T m): x(x), m(m) {
    }
    void solve(T A, T B, T &x, T &y) const {
        if (A < B) {
            return solve(B, A, y, x);
        }
        if (A == 1) {
            x = 1;
            y = 0;
            return;
        }
        T d = A/B;
        T m = A-d*B;
        solve(B, m, y, x);
        y -= d*x;
    }
    
    Mod<T> inverse() const {
        T xx;
        T yy;
        solve(x, m, xx, yy);
        xx = (xx%m+m)%m;
        return Mod<T>(xx, m);
    }
};

template<class T>
ostream& operator<<(ostream &out, const Mod<T> &m) {
    out << '(' << m.x << ',' << m.m << ')';
    return out;
}
template<class T>
Mod<T> operator+(const Mod<T>& x, const Mod<T>& y) {
    T res = x.x+y.x;
    if (res >= x.m) {
        res -= x.m;
    }
    return Mod<T>(res, x.m);
}
template<class T>
Mod<T> operator-(const Mod<T>& x) {
    T res = -x.x;
    if (res < 0) {
        res += x.m;
    }
    return Mod<T>(res, x.m);
}
template<class T>
Mod<T> operator-(const Mod<T>& x, const Mod<T>& y) {
    T res = x.x-y.x;
    if (res < 0) {
        res += x.m;
    }
    return Mod<T>(res, x.m);
}
template<class T>
Mod<T> operator*(const Mod<T>& x, const Mod<T>& y) {
    return Mod<T>(x.x*y.x%x.m, x.m);
}
template<class T>
Mod<T> operator/(const Mod<T>& x, const Mod<T>& y) {
    return Mod<T>(x.x*y.inverse().x%x.m, x.m);
}
template<class T>
bool operator==(const Mod<T>& x, const Mod<T>& y) {
    return x.x == y.x;
}
template<class T>
bool operator!=(const Mod<T>& x, const Mod<T>& y) {
    return !(x == y);
}
template<class T>
bool operator<(const Mod<T>& x, const Mod<T>& y) {
    return x.x < y.x;
}
typedef Mod<lint> ML;
typedef vector<ML> VM;
typedef vector<VM> VVM;
int main(int argc, char *argv[]) {
    ifstream in("/Users/roman/Documents/topcoder/facebook/winning.in");
    ofstream out("/Users/roman/Documents/topcoder/facebook/winning.out");
    int T;
    in >> T;
    lint MOD = 1000000007;
    
    REP(t,T) {
        string s;
        in >> s;
        replace(ALL(s), '-', ' ');
        stringstream sin(s);
        int x, y;
        sin >> x >> y;
        VVM S1(x+10, VM(y+10, ML(0, MOD)));
        S1[0][0] = ML(1, MOD);
        VVM S2(S1);
        REP(xx,x+1) REP(yy,y+1) {
            if (xx+1 > yy) {
                S1[xx+1][yy] = S1[xx+1][yy]+S1[xx][yy];
            }
            if (xx > yy+1) {
                S1[xx][yy+1] = S1[xx][yy+1]+S1[xx][yy];
            }
            if (xx+1 <= yy || yy == y) {
                S2[xx+1][yy] = S2[xx+1][yy]+S2[xx][yy];
            }
            if (xx <= yy+1 || yy == y) {
                S2[xx][yy+1] = S2[xx][yy+1]+S2[xx][yy];
            }
        }
        out << "Case #" << t+1 << ": "<< S1[x][y].x << ' ' << S2[x][y].x << endl;
    }
    out.close();
}
// END CUT HERE

import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {
    private final long MOD = (long)(1e9 + 7);
    private long dp1[][];
    private long dp2[][];
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + (testNumber) + ": ");
        String s = in.next();
        String t[] = s.split("-");
        int mg = Integer.parseInt(t[0]);
        int og = Integer.parseInt(t[1]);
        dp1 = new long[2001][2001];
        dp2 = new long[2001][2001];
        for (int i = 0;i < dp1.length;i++) {
            Arrays.fill(dp1[i], -1);
            Arrays.fill(dp2[i], -1);
        }
        out.println(countStressFree(1, 0, mg, og) + " " + countStressfull(0, 0, mg, og));
    }

    private long countStressfull(int mg, int og, int tmg, int tog) {
        if (mg == tmg && og == tog) {
            return 1;
        } else if (mg > tmg || og > tog || (og != tog && mg > og)) return 0;
        else if (dp2[mg][og] != -1) return dp2[mg][og];
        else {
            long c = countStressfull(mg + 1, og, tmg, tog);
            c += countStressfull(mg, og + 1, tmg, tog);
            c %= MOD;
            return dp2[mg][og] = c;
        }

    }


    private long countStressFree(int mg, int og, int tmg, int tog) {
        if (mg == tmg && og == tog) {
            return 1;
        } else if (mg > tmg || mg <= og || og > tog) return 0;
        else {
            if (dp1[mg][og] != -1) return dp1[mg][og];
            long c = countStressFree(mg + 1, og, tmg, tog);
            c += countStressFree(mg, og + 1, tmg, tog);
            c %= MOD;
            return dp1[mg][og] = c;
        }
    }
}

class InputReader {
	private BufferedReader br;
	private StringTokenizer st;
	public InputReader(InputStream in) {
		br=new BufferedReader(new InputStreamReader(in));
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException ignored) {

		}
	}

	public boolean readLine() {
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException e) {
			return false;
		}
		return true;
	}

	public String next(){
		if(!st.hasMoreTokens()) readLine();
		return st.nextToken();
	}

}


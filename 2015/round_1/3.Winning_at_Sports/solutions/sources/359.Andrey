#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>
#include <queue>
#include <unordered_map>

using namespace std;

const long long INF = 1e9;
const int MAXA = 2 * 2009;
const int MOD = 1000 * 1000 * 1000 + 7; // 10^9 + 7

vector<vector<int>> memoized_cnk(MAXA, vector<int>(MAXA));
vector<vector<char>> ready_cnk(MAXA, vector<char>(MAXA, false));

vector<vector<int>> memoized_paths(MAXA, vector<int>(MAXA));
vector<vector<char>> ready_paths(MAXA, vector<char>(MAXA, false));

int cnk(int n, int k) {
    if (k == 0) {
        return  1;
    }
    if (n == 0) {
        return 0;
    }

    if (!ready_cnk[n][k]) {
        ready_cnk[n][k] = true;
        int& ans = memoized_cnk[n][k];

        ans = (cnk(n - 1, k) + cnk(n - 1, k - 1)) % MOD;
    }
    return memoized_cnk[n][k];
}

int paths(int A, int B) {
    if (A == 1 && B == 0) {
        return 1;
    }

    if (A <= B) {
        return 0;
    }

    if (A < 0 || B < 0) {
        return 0;
    }

    if (!ready_paths[A][B]) {
        ready_paths[A][B] = true;
        int& ans = memoized_paths[A][B];

        ans = (paths(A - 1, B) + paths(A, B - 1)) % MOD;
    }
    return memoized_paths[A][B];
}

long long fastPow(long long base, int power, int mod) {
    long long res = 1;
    while (power) {
        if (power & 1) {
            res = (res * base) % mod;
        }
        base = (base * base) % mod;
        power >>= 1;
    }
    return res;
}

struct Solver {
    Solver()
    { }

    void readInput() {
        char c;
        cin >> A >> c >> B;
        //cerr << A << " " << B << endl;
    }

    string solve() {
        int a1 = paths(A, B);
        int a2 = (cnk(2 * B, B) * fastPow(B + 1, MOD - 2, MOD)) % MOD;

        return to_string(a1) + " " + to_string(a2);
    }

    int A, B;
};

struct Test {
    Test()
    { }

    bool answer;
};

void gen(int N, int S) {
    freopen("big_input.txt", "w", stdout);
    int T = 1;
    cout << T << endl;
    cout << N << endl;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < S; ++j) {
            cout << 'a';
        }
        cout << endl;
    }
}

int main() {
    //gen(1, 1000000);
    //return 0;
    //freopen("input.txt", "r", stdin);
    //freopen("big_input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("winning_at_sports.txt", "r", stdin);
    //freopen("autocomplete.out.txt", "w", stdout);
    
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        Solver solver;
        solver.readInput();
        string answer = solver.solve();
        cout << "Case #" << (t + 1) << ": " << answer << endl;
    }

    return 0;
}

#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
const double eps = 1e-10;
const int inf = 1000000009;
const int MOD = 1000000007;
int i, j, k, m, n, l;
int ans;
const int N = 2000;
ll a[N+5][N+5], b[N+5][N+5];

int main() {
	a[1][0] = 1;

	for (int i = 2; i <= N; i++) F0(j, i)
	{
		if (i > j) a[i][j] += a[i - 1][j];
		if (j > 0) a[i][j] += a[i][j - 1];
		a[i][j] %= MOD;
	}

	freopen("c.in", "r", stdin);
	freopen("c.txt", "w", stdout);
	int tn; cin >> tn; F1(tt, tn)
	{
		string s;
		cin >> s;
		sscanf(s.c_str(), "%d-%d", &m, &n);

		CL(0, b);
		b[0][1] = 1;
		F0(i, m + 1) F1(j, n) if (b[i][j])
		{
			if (j == n) b[i + 1][j] = (b[i + 1][j] + b[i][j]) % MOD;
			else
			{
				b[i][j + 1] = (b[i][j + 1] + b[i][j]) % MOD;
				if (i < j) b[i + 1][j] = (b[i + 1][j] + b[i][j]) % MOD;
			}
		}

		cout << "Case #" << tt << ": ";
		cout << a[m][n] << " " << b[m][n] << endl;
	}
	return 0;
}

import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		try {
			inputStream = new FileInputStream("a.in");
			outputStream = new FileOutputStream("a.out");
		} catch (FileNotFoundException e) {
			System.err.println("File not found");
			return;
		}
		
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		int T = in.nextInt();
		for (int t = 0; t < T; t++) {
			Solver solver = new Solver();
			out.format("Case #%d: ", t + 1);
			solver.solve(in, out);
		}
		out.close();
	}
}

class Solver {
	long MOD = (long)1e9 + 7;
	long getFree(int n, int m) {
		long[][] dp = new long[n + 2][m + 2];
		dp[0][0] = 1;
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= m; j++) {
				if (i + 1 > j) {
					dp[i + 1][j] += dp[i][j];
					dp[i + 1][j] %= MOD;
				}
				if (i > j + 1) {
					dp[i][j + 1] += dp[i][j];
					dp[i][j + 1] %= MOD;
				}
			}
		}
		return dp[n][m];
	}
	long getStress(int n, int m) {
		long[][] dp = new long[n + 2][m + 2];
		dp[0][0] = 1;
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= m; j++) {
				if (i + 1 <= j || j == m) {
					dp[i + 1][j] += dp[i][j];
					dp[i + 1][j] %= MOD;
				}
				if (i <= j + 1 || j == m) {
					dp[i][j + 1] += dp[i][j];
					dp[i][j + 1] %= MOD;
				}
			}
		}
		return dp[n][m];
	}
	public void solve(InputReader in, PrintWriter out) {
		String[] t = in.next().split("-");
		int n = Integer.parseInt(t[0]);
		int m = Integer.parseInt(t[1]);
		out.print(getFree(n, m));
		out.print(" ");
		out.println(getStress(n, m));
		
	}
}

class InputReader {
	private BufferedReader reader;
	private StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream));
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

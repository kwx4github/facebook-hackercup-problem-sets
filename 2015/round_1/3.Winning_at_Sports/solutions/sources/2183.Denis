object Solution {

  val mem = scala.collection.mutable.Map.empty[(Int, Int), Long]

  @tailrec
  def stress(my : Int, theirs : Int, cond : (Int, Int) => Boolean, clearMem : Boolean) : Long = {
    if (clearMem) mem.clear
    val score = (my, theirs)
    mem.get(score) match {
      case Some(res) => res
      case None =>
        val res = score match {
          case (0, 0) => 1L
          case (me, them) if me < 0 || them < 0 || !cond(me, them) => 0L
          case (me, them) if cond(me, them) => (stress(me - 1, them, cond, false) + stress(me, them - 1, cond, false)) % 1000000007L
        }
        mem.put(score, res)
        res
    }
  }

  def main(args: Array[String]) {
    val T = scala.io.StdIn.readInt
    for (t <- 1 to T) {
      val Array(me, them) = scala.io.StdIn.readLine.split("-").map(_.toInt)
      println("Case #" + t + ": " + stress(me, them, (me, them) => me > them, true) + " " + stress(them, them, (me, them) => me <= them, true))
    }
  }

}
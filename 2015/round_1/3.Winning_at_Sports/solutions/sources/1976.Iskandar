#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <deque>
#include <string>
#include <string.h>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <stdlib.h>
#include <map>
#include <set>
#include <time.h>
#include <bitset>
#include <list>

using namespace std;

double EPS = 1e-9;
int INF = 2000000000;
long long MODULO = 1000000007;

#define FOR(a,b,c) for (int (a)=(b);(a)<(c);++(a))
#define FORN(a,b,c) for (int (a)=(b);(a)<=(c);++(a))
#define FORD(a,b,c) for (int (a)=(b);(a)>=(c);--(a))
#define FORSQ(a,b,c) for (int (a)=(b);(a)*(a)<=(c);++(a))
#define FORL(a,b,c) for (LL (a)=(b);(a)<=(c);++(a))
#define FORLSQ(a,b,c) for (int (a)=(b);(LL)(a)*(LL)(a)<=(c);++(a))
#define FORC(a,b,c) for (char (a)=(b);(a)<=(c);++(a))
#define REP(i,n) FOR(i,0,n)
#define REPN(i,n) FORN(i,1,n)
#define REPD(i,n) FORD(i,n,1)
#define MAX(a,b) a = max(a,b)
#define MIN(a,b) a = min(a,b)
#define SQR(x) ((x) * (x))
#define RESET(a,b) memset(a,b,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ALL(v) v.begin(),v.end()
#define ALLA(arr,sz) arr,arr+sz
#define SIZE(v) (int)v.size()
#define SORT(v) sort(ALL(v))
#define REVERSE(v) reverse(ALL(v))
#define SORTA(arr,sz) sort(ALLA(arr,sz))
#define REVERSEA(arr,sz) reverse(ALLA(arr,sz))
#define PERMUTE next_permutation
#define TC(t) while(t--)
#define READ(n,data) {scanf("%d",&n); REPN(i,n) scanf("%d",&data[i]);}

inline string IntToString(int a){
    char x[100];
    sprintf(x,"%d",a); string s = x;
    return s;
}

inline int StringToInt(string a){
    char x[100]; int res;
    strcpy(x,a.c_str()); sscanf(x,"%d",&res);
    return res;
}

inline string GetString(void){
	char x[1000005];
	scanf("%s",x); string s = x;
	return s;
}

inline string uppercase(string s){
	int n = SIZE(s);
	REP(i,n) if (s[i] >= 'a' && s[i] <= 'z') s[i] = s[i] - 'a' + 'A';
	return s;
}

inline string lowercase(string s){
	int n = SIZE(s);
	REP(i,n) if (s[i] >= 'A' && s[i] <= 'Z') s[i] = s[i] - 'A' + 'a';
	return s;
}

int dp[4005][4005];

int main() {
    int T;

    cin >> T;

    for (int i = 1; i <= T; i++) {
        long long a, b, results1 = 0, results2 = 0;

        for (int j = 0; j < 4005; j++)
            for (int k = 0; k < 4005; k++)
                dp[j][k] = 0;

        scanf("%lld-%lld", &a, &b);

        /** Stress-free */
        dp[1][0] = 1;
        for (int j = 1; j <= (a+b); j++)
            for (int k = 0; k <= j; k++) {
                int your_score = k;
                int enemy_score = j - k;
                if (your_score > enemy_score) {
                    // Enemy is able to score
                    if (your_score > enemy_score + 1 && enemy_score < b) dp[your_score][enemy_score+1] = (dp[your_score][enemy_score+1] + dp[your_score][enemy_score]) % MODULO;
                    // Your score
                    if (your_score < a) dp[your_score+1][enemy_score] = (dp[your_score+1][enemy_score] + dp[your_score][enemy_score]) % MODULO;
              }
            }
        results1 = dp[a][b];

        for (int j = 0; j < 4005; j++)
            for (int k = 0; k < 4005; k++)
                dp[j][k] = 0;

        dp[0][1] = 1;
        for (int j = 1; j <= (a+b); j++)
            for (int k = 0; k <= j; k++) {
                int your_score = k;
                int enemy_score = j - k;
                if (your_score <= enemy_score || enemy_score == b) {
                    // Enemy is able to score
                    if (enemy_score < b) dp[your_score][enemy_score+1] = (dp[your_score][enemy_score+1] + dp[your_score][enemy_score]) % MODULO;
                    // Your score
                    if ((enemy_score >= your_score + 1 || enemy_score == b) && your_score < a) dp[your_score+1][enemy_score] = (dp[your_score+1][enemy_score] + dp[your_score][enemy_score]) % MODULO;
              }
            }
        results2 = dp[a][b];
        if (b == 0) results2 = 1;

        cout << "Case #" << i << ": " << results1 << " " << results2 << endl;

         // cout.precision(15);
        // cout << fixed << d << endl;
    }

    return 0;
}
/** Created by freedomofkeima */

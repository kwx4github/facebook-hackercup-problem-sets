// spnauT
//
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int _b=(b),i=(a); i<_b; ++i)
#define ROF(i,b,a) for(int _a=(a),i=(b); i>_a; --i)
#define _1 first
#define _2 second
#define PB(x) push_back(x)
#define MSET(m,v) memset(m,v,sizeof(m))
#define MAX_PQ(T) priority_queue <T>
#define MIN_PQ(T) priority_queue <T,vector<T>,greater<T>>
typedef long long LL; typedef long double LD; typedef unsigned int uint;
typedef pair<int,int> PII; typedef pair<LL,LL> PLL;
typedef vector<int> VI; typedef vector<LL> VL; typedef vector<PII> VP;
template<typename A, typename B> inline bool mina(A &x, B y) { return (x > y)? (x=y,1):0; }
template<typename A, typename B> inline bool maxa(A &x, B y) { return (x < y)? (x=y,1):0; }

template<typename Int,Int mod>
class ModInt {
public:
	Int x; static const Int Mod = mod;
	ModInt(): x(0) {}
	ModInt(int a) { Int t = a % mod; if(t < 0) t += mod; x = t; }
	ModInt(LL  a) { Int t = a % mod; if(t < 0) t += mod; x = t; }
	Int get() const { return x; }

	ModInt &operator+=(ModInt that) { if((x += that.x) >= mod) x -= mod; return *this; }
	ModInt &operator-=(ModInt that) { if((x += mod - that.x) >= mod) x -= mod; return *this; }
	ModInt &operator*=(ModInt that) { x = LL(x) * that.x % mod; return *this; }
	ModInt &operator/=(ModInt that) { return *this *= that.inverse(); }
	bool  operator==(ModInt that) const { return x == that.x; }
	ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
	ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
	ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
	ModInt operator/(ModInt that) const { return ModInt(*this) /= that; }
	ModInt operator-() const { return ModInt(-this->x); }
	inline friend ostream& operator << (ostream &out, ModInt m) {return out << m.x;}

	ModInt inverse() const {
		LL a = x, b = mod, u = 1, v = 0;
		while(b) {
			LL t = a / b;
			a -= t * b; std::swap(a, b);
			u -= t * v; std::swap(u, v);
		}
		return ModInt(u);
	}
};

const int moder = 1e9+7;
typedef ModInt <int, moder> Mint;

#define MAXN (2004)

int T;
int A, B;
Mint dp[MAXN][MAXN];

Mint M0(0);

Mint f(int a, int b)
{
	if(a < 0 || b < 0) return M0;
	else return dp[a][b];
}

int main()
{
	A = 2000;
	B = 2000;
	dp[0][0] = 1;
	FOR(a,1,A+1) FOR(b,0,a) dp[a][b] = f(a-1, b) + f(a, b-1);

	FOR(a,0,B+1)
	{
		if(a > 0) dp[a][a] = dp[a-1][a];
		FOR(b,a+1,B+1) dp[a][b] += f(a-1, b) + f(a, b-1);
	}

	cin >> T;
	FOR(tt,1,T+1)
	{
		scanf("%d-%d", &A, &B);
		int a = dp[A][B].x;
		int b = (B == 0) ? 1 : dp[B-1][B].x;
		printf("Case #%d: %d %d\n", tt, a, b);
	}

	return 0;
}

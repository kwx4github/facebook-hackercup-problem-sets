#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;

void print_vector(vi v);
void print_array(int* array, int start, int end);

#define FOR(i,a,b) for (int i = (a),_b = (b); i < _b; i++)
#define DOW(i,b,a) for (int i = (b),_a = (a); i >= _a; i--)
#define fill(a,v) memset(a, v, sizeof a)
#define checkbit(n,b) ((n >> b) & 1)
#define pb(a) push_back(a)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) (int)(a).size()

#define INF 1e9
#define PI acos(-1.0)
#define MOD 1000000007
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

int choose[3010][3010], memo[3010][3010];
int tc, a, b, cse=1;

int combimod(int m, int n){
  if(choose[m][n] != -1) return choose[m][n];
  else if(n == 0 || m == n) return 1;
  else if (n > m) return 0;
  else return choose[m][n] = (combimod(m-1, n) + combimod(m-1, n-1)) % MOD;
}

ll x, y, d;

void extendedEuclid(ll a, ll b){
  if(b == 0) { x = 1; y = 0; d = a; return;}
  extendedEuclid(b, a % b);
  ll x1 = y;
  ll y1 = x - (a/b) * y;
  x = x1;
  y = y1;
}

ll mod(ll a, ll b)
{ return (a%b+b)%b; }

ll inverse(ll a, ll p){
  extendedEuclid(a, p);
  return mod(x, p);
}

int catalan(int n){
  ll k = combimod(2*n, n);
  ll di = inverse(n+1, MOD);
  return (k*di)%MOD;
}

int solve(int a, int b){
 // printf("%d %d\n", a, b);
  if(memo[a][b] != -1) return memo[a][b];
  else if (b == 0) return memo[a][b] = 1;
  else if (a == b+1) return memo[a][b] = catalan(b);
  else return memo[a][b] = (solve(a, b-1) + solve(a-1, b)) % MOD;
}

int main() {
  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif 
  fill(choose, -1);
  fill(memo, -1);
  s(tc);getchar();
  while(tc--){
    scanf("%d-%d\n", &a, &b);
    printf("Case #%d: %d %d\n", cse++, solve(a, b), catalan(b));
  //  FOR(i, 0, 5) print_array(memo[i], 0, 5);
  }
  return 0;
}

void print_array(int* array, int start, int end){
  printf("[");
  FOR(i, start, end){
    printf("%d ", array[i]);
  }
  printf("]");
  printf("\n");
}

void print_vector(vi v){
  printf("[");
  FOR(i, 0, v.size()){
    printf("%d ", v[i]);
  }
  printf("]");
  printf("\n");
}
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<string.h>
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
#include<iomanip>
using namespace std;

#define READ(a) freopen(a,"r",stdin);
#define WRITE(a) freopen(a,"w",stdout);
#define FOR(i,a,b)  for(int i=(a);i<b;i++)
#define REV(i,a,b)  for(int i=a;i>=b;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define clr(a) a.clear()
#define mp make_pair
#define pb push_back
#define SZ(a) (int)a.size()
#define all(a) (a).begin(),(a).end()
#define reall(a) (a).rbegin(),(a).rend()
#define fs first
#define sc second
#define PI (2*acos(0.0))
#define ERR (1e-7)
#define EQ(a,b) (fabs(a-b)<ERR)
#define onlyCPP ios_base::sync_with_stdio(0);cin.tie(0)
//#define FOREACH(it,x) for(__typeof((x.begin())) it=x.begin();it!=x.end();it++)
////int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1};                      //4 Direction
////int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};  //8 direction
////int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//cout<<fixed<<setprecision(6)<<1.0<<endl;
typedef long long ll;
typedef unsigned long long ull; //scanf("%llu",&N);
typedef vector<int>     VI;
typedef vector<string>  VS;
typedef pair<int,int>   PII;
typedef pair<int,PII >  DPII;
typedef vector<pair<int,int> >VPII;
typedef vector<pair<int,pair<int,int> > > VDPII;

const int INF=(1<<29);
const int MAX=5009;

ll dp[MAX][MAX],MOD=1000000007;
ll a,b;

ll rec(int tern,int myP) {

    if(tern>(a+b)) return 0;
    if(tern==(a+b)) {
        if(myP==a && (tern-myP)==b) {
            return 1;
        }
        return 0;
    }

    ll &ret=dp[tern][myP];
    if(ret!=-1) return ret;
    ret=0;

    int opP=tern-myP;
    if(myP+1>opP && myP+1<=a) {
        ret=(ret+rec(tern+1,myP+1))%MOD;
    }
    if(opP+1<myP) ret=(ret+rec(tern+1,myP))%MOD;
    return ret;
}

ll rec2(int tern,int myP) {

    if(tern>(a+b)) return 0;
    if(tern==(a+b)) {
        if(myP==a && (tern-myP)==b) {
            //cout<<"ASL: "<<tern<<" "<<myP<<" "<<(tern-myP)<<endl;
            return 1;
        }
        return 0;
    }

    ll &ret=dp[tern][myP];
    if(ret!=-1) return ret;
    ret=0;

    int opP=tern-myP;
    if((myP<opP || opP==b) && myP<a) {
        ret=(ret+rec2(tern+1,myP+1))%MOD;
    }
    if(opP<b) ret=(ret+rec2(tern+1,myP))%MOD;

    return ret;
}

int main() {

    READ("winning_at_sports.txt");
    WRITE("winning_at_sports_out.txt");

    int t,cas=0;
    cin>>t;
    while(t--) {
        scanf("%d-%d",&a,&b);
        if(b==0) {
            cout<<"Case #"<<++cas<<": "<<1<<" "<<1<<endl;
            continue;
        }
        mem(dp,-1);
        ll ans1=rec(1,1)%MOD;
        mem(dp,-1);
        ll ans2=rec2(1,0)%MOD;

        cout<<"Case #"<<++cas<<": "<<ans1<<" "<<ans2<<endl;
    }
    return 0;
}







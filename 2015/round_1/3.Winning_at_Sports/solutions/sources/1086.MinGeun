#include <stdio.h>
#include <list>

struct NextScore
{
	NextScore(short n1, short n2) : s1(n1), s2(n2){}
	short s1;
	short s2;
};

int scoreMap[2001][2001];

int main()
{
	int T = 0;
	scanf_s("%d", &T);

	for (int testN = 1; testN <= T; testN++)
	{
		int s1, s2;
		int ts1, ts2;
		int total;
		std::list<NextScore> scoreList;

		memset(scoreMap, 0, sizeof(scoreMap));

		scanf_s("%d%d", &s1, &s2);

		s2 = -s2;

		total = s1 + s2;

		scoreList.push_back(NextScore(1, 0));
		scoreMap[1][0] = 1;

		for (int i = 1; i <= total; i++)
		{
			while (scoreList.front().s1 + scoreList.front().s2 == i)
			{
				ts1 = scoreList.front().s1;
				ts2 = scoreList.front().s2;
				scoreList.pop_front();

				if (ts1 - ts2 == 1)
				{
					if (ts1 < s1)
					{
						if (scoreMap[ts1 + 1][ts2] == 0)
						{
							scoreList.push_back(NextScore(ts1 + 1, ts2));
						}
						scoreMap[ts1 + 1][ts2] += scoreMap[ts1][ts2];
						if (scoreMap[ts1 + 1][ts2] > 1000000007)
						{
							scoreMap[ts1 + 1][ts2] %= 1000000007;
						}
					}
				}
				else
				{
					if (ts1 < s1)
					{
						if (scoreMap[ts1 + 1][ts2] == 0)
						{
							scoreList.push_back(NextScore(ts1 + 1, ts2));
						}
						scoreMap[ts1 + 1][ts2] += scoreMap[ts1][ts2];
						if (scoreMap[ts1 + 1][ts2] > 1000000007)
						{
							scoreMap[ts1 + 1][ts2] %= 1000000007;
						}
					}
					if (ts2 < s2)
					{
						if (scoreMap[ts1][ts2 + 1] == 0)
						{
							scoreList.push_back(NextScore(ts1, ts2 + 1));
						}
						scoreMap[ts1][ts2 + 1] += scoreMap[ts1][ts2];
						if (scoreMap[ts1][ts2 + 1] > 1000000007)
						{
							scoreMap[ts1][ts2 + 1] %= 1000000007;
						}
					}
				}
			}
		}

		printf("Case #%d: ", testN);

		printf("%d ", scoreMap[s1][s2]);
		
		memset(scoreMap, 0, sizeof(scoreMap));
		scoreList.clear();

		scoreList.push_back(NextScore(0, 0));
		scoreMap[0][0] = 1;

		for (int i = 0; i <= total; i++)
		{
			while (scoreList.front().s1 + scoreList.front().s2 == i)
			{
				ts1 = scoreList.front().s1;
				ts2 = scoreList.front().s2;
				scoreList.pop_front();
				
				// 동점스코어
				// 적이 한골 더 넣어야함
				if (ts1 == ts2)
				{
					if (ts2 < s2)
					{
						if (scoreMap[ts1][ts2 + 1] == 0)
						{
							scoreList.push_back(NextScore(ts1, ts2 + 1));
						}
						scoreMap[ts1][ts2 + 1] += scoreMap[ts1][ts2];
						if (scoreMap[ts1][ts2 + 1] > 1000000007)
						{
							scoreMap[ts1][ts2 + 1] %= 1000000007;
						}
					}
					// 더이상 적의 스코어를 올릴 수 없을때
					else if (ts1 < s1)
					{
						if (scoreMap[ts1 + 1][ts2] == 0)
						{
							scoreList.push_back(NextScore(ts1 + 1, ts2));
						}
						scoreMap[ts1 + 1][ts2] += scoreMap[ts1][ts2];
						if (scoreMap[ts1 + 1][ts2] > 1000000007)
						{
							scoreMap[ts1 + 1][ts2] %= 1000000007;
						}
					}
				}
				// 동점이 아닐때
				// 내가 한골 더 넣거나, 적이 한골 더 넣으면 됨.
				else
				{
					if (ts1 < s1)
					{
						if (scoreMap[ts1 + 1][ts2] == 0)
						{
							scoreList.push_back(NextScore(ts1 + 1, ts2));
						}
						scoreMap[ts1 + 1][ts2] += scoreMap[ts1][ts2];
						if (scoreMap[ts1 + 1][ts2] > 1000000007)
						{
							scoreMap[ts1 + 1][ts2] %= 1000000007;
						}
					}
					if (ts2 < s2)
					{
						if (scoreMap[ts1][ts2 + 1] == 0)
						{
							scoreList.push_back(NextScore(ts1, ts2 + 1));
						}
						scoreMap[ts1][ts2 + 1] += scoreMap[ts1][ts2];
						if (scoreMap[ts1][ts2 + 1] > 1000000007)
						{
							scoreMap[ts1][ts2 + 1] %= 1000000007;
						}
					}
				}
			}
		}

		printf("%d\n", scoreMap[s1][s2]);
	}
}
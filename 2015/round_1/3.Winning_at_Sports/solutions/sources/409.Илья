#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cassert>
using namespace std;

typedef long long int int64;

const int mod = (int)1e9 + 7;
const int N = 4050;

int add(int a, int b)
{
	int res = a + b;
	if (res >= mod)
		res -= mod;
	return res;
}

int sub(int a, int b)
{
	int res = a - b;
	if (res < 0)
		res += mod;
	return res;
}

int mul(int a, int b)
{
	return (int64)a * b % mod;
}

int C[N][N];

void init()
{
	for (int n = 0; n < N; n++)
	{
		C[n][0] = C[n][n] = 1;
		for (int k = 1; k < n; k++)
			C[n][k] = add(C[n - 1][k - 1], C[n - 1][k]);
	}
}

int _get_cnt(int c1, int c2)
{
	int n = c1 + c2;
	int y = c1 - c2;
	int d1 = (n + y) / 2;
	int d2 = d1 - y;

	return C[d1 + d2][d1];
}

int get_cnt(int c1, int c2)
{
	if (c1 < c2)
		swap(c1, c2);

	int ans1 = _get_cnt(c1, c2);
	int ans2 = _get_cnt(c1 + 1, c2 - 1);
	return sub(ans1, ans2);
}

int solve1(int c1, int c2)
{
	c1--;
	return get_cnt(c1, c2);
}

int solve2(int c2)
{
	return get_cnt(c2, c2);
}

pair<int, int> solve()
{
	int c1, c2;
	scanf("%d-%d\n", &c1, &c2);
	
	assert(c1 > c2);
	
	if (c2 == 0)
		return make_pair(1, 1);

	int ans1 = solve1(c1, c2);
	int ans2 = solve2(c2);

	return make_pair(ans1, ans2);
}

int main()
{
	freopen("winning_at_sports.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	init();

	int tests;
	scanf("%d", &tests);
	for (int i = 0; i < tests; i++)
	{
		auto p = solve();
		printf("Case #%d: %d %d\n", i + 1, p.first, p.second);
	}

	return 0;
}

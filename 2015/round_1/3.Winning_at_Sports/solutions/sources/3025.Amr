# include <iostream>
# include <algorithm>
# include <cstring>
# include <vector>
# include <string>
# include <cstdio>
# include <queue>
# include <cmath>
# include <map>
# include <set>

using namespace std;

# define MOD 1000000007
# define INF 1000000000
# define ll long long
# define pb push_back
# define pi pair<int,int>
# define mp make_pair
# define f first
# define s second

long dpfree[2001][2001];
long dpful[2001][2001];
int home,away;

void get(string result){
	home = 0;
	away = 0;
	bool e = false;
	int mul = 1;
	for (int i = result.size()-1; i >= 0; --i){
		if(result[i] == '-'){
			mul = 1;
			e = true;
		}
		else if(!e){
			away += (result[i]-'0')*mul;
			mul *= 10;
		}
		else{
			home += (result[i]-'0')*mul;
			mul *= 10;
		}
	}
}

long stressful(int me,int them){
	long& res = dpful[me][them];
	if(res != -1) return res;
	if(me == home && them == away)
		return 1;
	if(me > home || them > away)
		return 0;

	res = 0;
	if(them < away)
		res = (res + stressful(me,them+1)) % MOD;

	if(them == away)
		res = (res + stressful(me+1,them)) % MOD;

	else{
		if(me + 1 <= them)
			res = (res + stressful(me+1,them)) % MOD;
	}

	return res;
}


long stressfree(int me,int them){
	long& res = dpfree[me][them];
	if(res != -1) return res;
	if(me == home && them == away)
		return 1;
	if(me > home || them > away)
		return 0;

	res = 0;
	if(me < home)
		res = (res + stressfree(me+1,them)) % MOD;
	if(them + 1 < me)
		res = (res + stressfree(me,them+1)) % MOD;

	return res;
}

int main(){

	freopen("3.in","r",stdin);
	freopen("3.out","w",stdout);

	int ttt;
	cin>>ttt;

	for(int tt = 1; tt <= ttt ; ++tt){

		string w;
		cin>>w;
		get(w);

		memset(dpfree,-1,sizeof(dpfree));
		memset(dpful,-1,sizeof(dpful));

		long res1 = stressfree(0,0);
		long res2 = stressful(0,0);

		cout<<"Case #"<<tt<<": "<<res1<<" "<<res2<<endl;

	}

	return 0;
}

import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Agostinho Junior (junior94)
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {

	public void solve(int testNumber, InputReader in, OutputWriter out) {
		String[] tokens = in.readLine().split("-");
		final int a = Integer.parseInt(tokens[0]);
		final int b = Integer.parseInt(tokens[1]);
		long[][] dp = new long[a + 10][b + 10];
		final long mod = (long)1e9 + 7;
		dp[0][0] = 1;
		for (int i = 0; i <= a; i++) {
			for (int j = 0; j <= b; j++) {
				if (j + 1 <= Math.min(i - 1, b)) {
					dp[i][j + 1] += dp[i][j];
					if (dp[i][j + 1] >= mod) {
						dp[i][j + 1] -= mod;
					}
				}
				if (i < a) {
					dp[i + 1][j] += dp[i][j];
					if (dp[i + 1][j] >= mod) {
						dp[i + 1][j] -= mod;
					}
				}
			}
		}
		long free = dp[a][b];
		for (long[] temp: dp) {
			Arrays.fill(temp, 0);
		}
		dp[0][0] = 1;
		for (int i = 0; i <= a; i++) {
			for (int j = 0; j <= b; j++) {
				if (i < j || (j == b && i < a)) {
					dp[i + 1][j] += dp[i][j];
					if (dp[i + 1][j] >= mod) {
						dp[i + 1][j] -= mod;
					}
				}
				if (j < b) {
					dp[i][j + 1] += dp[i][j];
					if (dp[i][j + 1] >= mod) {
						dp[i][j + 1] -= mod;
					}
				}
			}
		}
		long full = dp[a][b];
		out.printfln("Case #%d: %d %d", testNumber, free, full);
	}

}

class InputReader {
    private BufferedReader input;
    private StringTokenizer line = new StringTokenizer("");

	public InputReader(InputStream in) {
        input = new BufferedReader(new InputStreamReader(in));
    }

	public void fill() {
        try {
            if(!line.hasMoreTokens()) line = new StringTokenizer(input.readLine());
        } catch(IOException io) { io.printStackTrace(); System.exit(0);}
    }
    public String next() {
        fill();
        return line.nextToken();
    }

	public String readLine() {
        String s = "";
        try {
            s = input.readLine();
        } catch(IOException io) {io.printStackTrace(); System.exit(0);}
        return s;
    }
}

class OutputWriter {
    private PrintWriter output;

	public OutputWriter(OutputStream out) {
        output = new PrintWriter(out);
    }

	public void printfln(String format, Object... o) {
        output.printf(format + "\n", o);
    }

	public void close() {
        output.close();
    }
}


#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <stack>
#include <iomanip>

#define FOR(i,x,y) for(int i =(int)(x); i<(int)(y); i++)
#define REP(i, N) FOR(i, 0, N)
#define SZ(x) (int)x.size()

using namespace std;

typedef vector<int> vin;
typedef pair<int, int> pii;
typedef vector<pair<int, int>> vpii;
typedef vector<vector<int>> vvin;

int MOD = 1000000007;
int dpf[2001][2001];
int dps[2001][2001];

void dp_1() {
    dpf[1][0] = 1;
    FOR (i, 1, 2001) {
        FOR (j, 0, 2001) {
            dpf[i+1][j] = (dpf[i+1][j] + dpf[i][j]) % MOD;
            if (i > j + 1) {
                dpf[i][j+1] = (dpf[i][j+1] + dpf[i][j]) % MOD;
            }
        }
    }
}

void dp_2() {
    dps[0][1] = 1;
    FOR (j, 1, 2001) {
        FOR (i, 0, 2001) {
            if (i+1 <= j) {
                dps[i+1][j] = (dps[i+1][j] + dps[i][j]) % MOD;
            }
            dps[i][j+1] = (dps[i][j+1] + dps[i][j]) % MOD;
        }
    }
}

int main () {
    freopen("input.in", "r", stdin);
    freopen("output.out", "w", stdout);

    int n; cin >> n;
    memset(dpf, 0, sizeof(int)*2001*2001);
    dp_1();
    memset(dps, 0, sizeof(int)*2001*2001);
    dp_2();

    FOR (i, 1, n+1) {
        int a, b;
        scanf("%d-%d", &a, &b);
        cout << "Case #" << i << ": " << dpf[a][b]%MOD << " " << dps[b][b]%MOD << endl;
    }
}

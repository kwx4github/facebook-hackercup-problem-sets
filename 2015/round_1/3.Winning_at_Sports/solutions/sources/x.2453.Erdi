#!/usr/bin/env python

import sys
from pprint import pprint

MOD = 1000000007

def main():
  fi = sys.stdin
  fo = sys.stdout
  caseCount = int(fi.readline().strip())
  for i in range(1, caseCount+1):
    win, loss = readInput(fi)
    free, stress = solve(win, loss)
    displayAndClear(fo, i, free, stress)

def readInput(f):
  win, loss = [int(arg) for arg in f.readline().strip().split('-')]
  return win, loss

def displayAndClear(f, i, free, stress):
  f.write('Case #%d: %d %d\n' % (i, free, stress))
  f.flush()

def solve(win, loss):
  free = dpFreeBU(win, loss)
  stress = dpStressBU(win, loss)
  return free, stress

def dpFreeBU(win, loss):
  memo = {}
  memo[0, 1] = 0
  memo[1, 0] = 1
  memo[2000, 0] = 1
  for i in xrange(1, win + 1):
    memo[i, 0] = 1

  for w in xrange(1, win + 1):
    for l in xrange(1, loss + 1):
      memo[w, l] = 0
      if w - 1 > l:
        memo[w, l] += memo[w-1, l]
      if w > l - 1:
        memo[w, l] += memo[w, l-1]
      memo[w, l] %= MOD

  return memo[win, loss]
 
def dpStressBU(win, loss):
  memo = {}
  memo[0, 1] = 1
  memo[1, 0] = 0
  memo[2000, 0] = 0
  for i in xrange(1, loss + 1):
    memo[0, i] = 1

  for w in xrange(1, win + 1):
    for l in xrange(1, loss + 1):
      memo[w, l] = 0
      if w - 1 < l or l == loss:
        memo[w, l] += memo[w-1, l]
      if w <= l - 1:
        memo[w, l] += memo[w, l-1]
      memo[w, l] %= MOD

  return memo[win, loss]

if __name__ == '__main__':
  main()


import java.io.FileInputStream;
import java.util.Arrays;
import java.util.Scanner;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Ivan Myasoid
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("winning_at_sports.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winning_at_sports_out.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		Scanner in = new Scanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		solver.solve(1, in, out);
		out.close();
	}
}

class WinningAtSports {
    public void solve(int testNumber, Scanner in, PrintWriter out) {

        int numberOfCases = in.nextInt();
        StressCounter stressCounter = new StressCounter();
        for (int i = 1; i <= numberOfCases; i++) {
            String[] subStrings = in.next().split("-");
            int firstScore = Integer.parseInt(subStrings[0]);
            int secondScore = Integer.parseInt(subStrings[1]);
            out.println("Case #" + i + ": " + stressCounter.countWaysStressFree(firstScore, secondScore) + " " + stressCounter.countWaysStressFull(firstScore, secondScore));
        }

    }

    static class StressCounter {

        int[][] matrixStressFree;
        int[][] matrixStressFull;

        final int maxWays = (int) (1e9 + 7);
        final int maxScore = (int) (2e3 + 1);

        public StressCounter() {

            matrixStressFree = new int[maxScore][maxScore];
            matrixStressFull = new int[maxScore][maxScore];

            int[] arr;
            for (int i = 0; i < maxScore; i++) {
                //StressFree
                arr = new int[maxScore];
                Arrays.fill(arr, -1);
                matrixStressFree[i] = arr;

                //StressFull
                arr = new int[maxScore];
                Arrays.fill(arr, -1);
                matrixStressFull[i] = arr;
            }

            for (int i = 0; i < maxScore; i++) {
                //StressFree
                matrixStressFree[i][0] = 1;
                matrixStressFree[i][i] = 0;

            }

            for (int i = 0; i < maxScore; i++) {
                matrixStressFull[0][i] = 1;
            }

        }

        int countWaysStressFree(int firstScore, int secondScore) {

            if (matrixStressFree[firstScore][secondScore] == -1) {
                matrixStressFree[firstScore][secondScore] = (countWaysStressFree(firstScore - 1, secondScore) +
                        countWaysStressFree(firstScore, secondScore - 1)) % maxWays;
            }

            return matrixStressFree[firstScore][secondScore];
        }

        int countWaysStressFull(int firstScore, int secondScore) {
            if (matrixStressFull[firstScore][secondScore] != -1) {
                return matrixStressFull[firstScore][secondScore];
            }

            int tmp = countWaysStressFull(firstScore - 1, secondScore);

            if (firstScore < secondScore) {
                tmp = (tmp + countWaysStressFull(firstScore, secondScore - 1)) % maxWays;
            }

            matrixStressFull[firstScore][secondScore] = tmp;
            return tmp;
        }

    }

}


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class WinningAtSports {
	public static void main(String[] args) throws FileNotFoundException {
		// InputStream inputStream = System.in;
//		InputStream inputStream = new FileInputStream(new File("input.txt"));
		InputStream inputStream = new FileInputStream(new File("winning_at_sports.txt"));
		// OutputStream outputStream = System.out;
		OutputStream outputStream = new FileOutputStream(new File("output.txt"));
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Solver solver = new Solver();
		solver.solve(in, out);
		out.close();
	}
}

class Solver {
	private long[][] stressFree = new long[2001][2001];

	public Solver() {
		for (int i = 0; i <= 2000; i++) {
			for (int j = 0; j <= 2000; j++) {
				stressFree[i][j] = -1;
			}
		}
		stressFree[1][0] = 1;
	}

	private long getStressFreeWays(int a, int b) {
		if (a <= b || a < 0 || b < 0) {
			return 0;
		}
		if (stressFree[a][b] != -1) {
			return stressFree[a][b];
		}
		stressFree[a][b] = (getStressFreeWays(a - 1, b) + getStressFreeWays(a,
				b - 1)) % 1000000007;
		return stressFree[a][b];
	}
	
	private long getStressFullWays(int a, int b) {
		if (a < 0 || b < 0) {
			return 0;
		}
		if (stressFree[a][b] != -1) {
			return stressFree[a][b];
		}
		stressFree[a][b] = (getStressFullWays(a - 1, b) + getStressFullWays(a,
				b - 1)) % 1000000007;
		return stressFree[a][b];
	}

	public void solve(InputReader in, OutputWriter out) {
		int t = in.readInt();
		int n, a, b;
		for (int m = 0; m < t; ++m) {
			a = in.readInt();
			b = in.readInt();
			out.printLine("Case #" + (m + 1) + ": " + getStressFreeWays(a, b)
					+ " " + (getStressFullWays(b, b)));
		}
//		for(int i=0;i<500;i++) {
//			for(int j=0;j<500;j++) {
//				if(i > j)
//					out.printLine(i + ", " + j + ", " +  stressFree[i][j]);
//			}
//		}
	}

}

class InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public static boolean isSpaceChar(int c) {
		return c == '-' || c == ' ' || c == '\n' || c == '\r' || c == '\t'
				|| c == -1;
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}
}

class IOUtils {
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}
}

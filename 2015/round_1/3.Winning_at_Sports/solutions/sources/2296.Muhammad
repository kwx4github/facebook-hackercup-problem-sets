#include <algorithm>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
using namespace std;

const int m = 1000000007;
const int maxScore=2000;
const int n = maxScore + 1;

//using dynamic programming
int sfMem[n][n];
int sMem[n][n];
//using recursive tail
int sf(int w  , int l  )
{
	return sfMem[w][l] != 0 ? sfMem[w][l]
		:(l == 0  || w==0)? sfMem[w][l] = 1
		: (w-l ==1)? sfMem[w][l]=sf(w,l-1) %m
		: sfMem[w][l] = (sf(w - 1, l)+ sf(w,l-1) ) %m;
}
int s(int w, int l)
{
	return sMem[w][l] != 0 ? sMem[w][l]
		:(l==0 || w == 0) ? sMem[w][l] = 1
		: w >= l ? sMem[w][l] = s(l - 1, l) % m
		: sMem[w][l]=(s(w - 1, l) + s(w, l - 1) ) % m;
}

int main()
{
	freopen("winning_at_sports_output.txt", "w", stdout);
	freopen("winning_at_sports.txt", "r", stdin);

	int T, iT, w, l;
	char sep;
	cin >> T;
	for (iT = 1; iT <= T; iT++)
	{
		cin >> w >> sep >> l;
		cout << "Case #" << iT << ": " << sf(w, l) << " " << s(w, l) << "\n";
	}
}

package algo.Practice;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
public class WinningAtSports {

	private static HashMap<Node, ArrayList<Node>> hm;

	private static class Node {
		int i;
		int j;
		int inDegree;
		int count;
		public Node(int i, int j) {
			this.i = i;
			this.j = j;
			inDegree = 0;
		}
		@Override
		public int hashCode() {
			return i * 31 + j * 17;
		}

		@Override
		public boolean equals(Object that)
		{
			Node n = (Node)that;
			return this.i == n.i && this.j == n.j;
		}

		@Override
		public String toString() {
			return this.i + " " + this.j + " In Degree " + this.inDegree;
		}
	}
	private static int bfs(int a, int b) {
		Queue<Node> que = new LinkedList<Node>();
		Node n = new Node(0, 0);
		que.add(n);
		n.count = 1;
		int retVal = 1;
		Node k = new Node(a, b);
		while (!que.isEmpty()) {
			n = que.poll();
			ArrayList<Node> al = hm.get(n);
			if (n.equals(k)) 
				retVal = n.count;
			if (al != null) {
				for (Node node : al) {
					if (node.inDegree - 1 == 0) {
						que.add(node);
					}
					else {
						node.inDegree--;
					}
					node.count = (node.count + n.count ) % 1000000007;
				}
			}
		}
		
//		for(Node node : hm.keySet()) {
//			if (node.equals(k)) {
//				return node.count;
//			}
//		}
		return retVal;
	}

	public static int getStressFree(int a, int b) {
		int count = 1;
		hm = new HashMap<WinningAtSports.Node, ArrayList<Node>>();
		for (int i = 1; i <= a; i++) {
			for (int j = 0; j <= b; j++) {
				if (i <= j - 1 || i <= j ) break;
				Node n1  = new Node(i , j - 1);
				Node n2 = new Node(i , j);
				Node n3 = new Node(i - 1, j);
				if (j - 1 < i && j > 0)
					addEdge(n1, n2);
				if (i - 1 > j || (i - 1 == 0 && j == 0))
					addEdge(n3, n2);
			}
		}
		count= bfs(a, b);
		return count;
	}

	public static int getStressFull(int a, int b) {
		int count = 1;
		hm = new HashMap<WinningAtSports.Node, ArrayList<Node>>();
		for (int i = 0; i <= a; i++) {
			for (int j = 1; j <= b; j++) {
				if (j == b || j >= i) {
					Node n2 = new Node(i , j);
					if (j - 1 >= i) {
						Node n1  = new Node(i , j - 1);
						addEdge(n1, n2);
					}
					if (i - 1 >= 0 && (i - 1 <= j || j == b)) {
						Node n3 = new Node(i - 1, j);
						addEdge(n3, n2);
					}

				}
			}
		}
		count= bfs(a, b);
		return count;
	}

	private static void addEdge(Node u, Node v) {
		if (hm.containsKey(u)) {
			ArrayList<Node> al = hm.get(u);
			al.add(v);
		}
		else {
			ArrayList<Node> al = new ArrayList<Node>();
			al.add(v);
			hm.put(u, al);
		}
		if (!hm.containsKey(v)) {
			ArrayList<Node> al = new ArrayList<Node>();			
			hm.put(v, al);
		}
		v.inDegree++;
	}

	public static void main(String[] args) {
		File fl = new File("/home/inspire/Downloads/winning_at_sports.txt");
		Scanner sc;
		try {
			sc = new Scanner(fl);
			//sc = new Scanner(System.in);
			int T = sc.nextInt();
			int i = 0;
			int[] ar = new int[T];
			int[] br = new int[T];
			while (i < T) {
				String[] aStr = sc.next().split("-");
				int a = Integer.parseInt(aStr[0]);
				int b = Integer.parseInt(aStr[1]);
				ar[i] = getStressFree(a, b);
				br[i] = getStressFull(a, b);
				i++;
			}
			for (i = 0; i < T; i++) {
				System.out.println("Case #"+ (i + 1) + ": " + ar[i] + " " + br[i]);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

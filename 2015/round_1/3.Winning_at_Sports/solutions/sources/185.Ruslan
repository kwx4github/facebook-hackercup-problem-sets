#define _CRT_SECURE_NO_DEPRECATE
#pragma comment (linker, "/stack:64000000")

#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <deque>
#include <set>
#include <bitset>
#include <map>
#include <memory.h>
#include <cassert>

using namespace std;

#define fo(a,b,c) for (int a = (b); a < (c); a++)
#define fr(a,b) fo(a, 0, (b))
#define fi(n) fr(i, (n))
#define fj(n) fr(j, (n))
#define fk(n) fr(k, (n))
#define fd(a,b,c) for (int a = (b); a >= (c); a--)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define _(a,b) memset((a), (b), sizeof(a))
#define __(a) memset((a), 0, sizeof(a))
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back

typedef long long lint;
typedef pair<int, int> pii;

const int INF = 1000000000;
const lint LINF = 4000000000000000000LL;
const double eps = 1e-9;

int ni() { int a; scanf( "%d", &a ); return a; }
double nf() { double a; scanf( "%lf", &a ); return a; }
char sbuf[100005]; string ns() { scanf( "%s", sbuf ); return sbuf; }
long long nll() { long long a; scanf( "%lld", &a ); return a; }

void prepare()
{
#ifndef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);
#endif
}

void panic(bool expression = false)
{
	if (!expression)
	{
		cerr << "PANIC!" << endl;
		assert(false);
	}
}

const int maxn = 2005;
const int mod = INF + 7;

int dp[2][maxn][maxn];
int dp2[2][maxn][maxn];

void upd(int &d, int add)
{
	d += add;
	if (d >= mod)
		d -= mod;
	assert(d < mod);
}

void calc(int a, int b)
{
	__(dp);
	dp[0][0][0] = dp[1][0][0] = 1;
	for (int i = 0; i <= a; i++)
	{
		for (int j = 0; j <= b; j++)
		{
			if (i > 0)
			{
				if (i > j)
					upd(dp[0][i][j], dp[0][i - 1][j]);
				if (i <= j || j == b)
					upd(dp[1][i][j], dp[1][i - 1][j]);
			}
			if (j > 0)
			{
				if (i > j)
					upd(dp[0][i][j], dp[0][i][j - 1]);
				if (i <= j)
					upd(dp[1][i][j], dp[1][i][j - 1]);
			}
		}
	}
}

void calc2(int a, int b)
{
	__(dp2);
	dp2[0][0][0] = dp2[1][0][0] = 1;
	for (int i = 0; i <= a; i++)
	{
		for (int j = 0; j <= b; j++)
		{
			if (i + 1 > j)
				upd(dp2[0][i + 1][j], dp2[0][i][j]);
			if (i + 1 <= j || j == b)
				upd(dp2[1][i + 1][j], dp2[1][i][j]);
			if (i > j + 1)
				upd(dp2[0][i][j + 1], dp2[0][i][j]);
			if (i <= j + 1)
				upd(dp2[1][i][j + 1], dp2[1][i][j]);
		}
	}
}

void compare(int a, int b)
{
	fk(2)
	{
		fi(a + 1)
		{
			fj(b + 1)
			{
				assert(dp[k][i][j] == dp2[k][i][j]);
				if (i > j)
				{
					assert(dp[0][i][j] > 0);
					assert(dp[1][i][j] == 0 || j == b);
				}
				else
				{
					assert(dp[0][i][j] == 0 || i == 0 && j == 0);
					assert(dp[1][i][j] > 0);
				}
			}
		}
	}
}

void solve(int test_num)
{
	//cerr << test_num << endl;
	printf("Case #%d: ", test_num);
	int a, b;
	scanf("%d-%d", &a, &b);
	calc(a, b);
	calc2(a, b);
	compare(a, b);
	printf("%d %d\n", dp[0][a][b], dp[1][a][b]);
}

int main()
{
	prepare();
	int number_of_tests;
	scanf("%d\n", &number_of_tests);
	fi(number_of_tests)
		solve(i + 1);
	return 0;
}
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <fstream>
#include <queue>
#include <complex>

#define INF 1145141919
#define EPS 1e-9
#define Pi acos(-1)

using namespace std;

typedef long long ll;

#pragma warning( disable: 4996 )

#define MAX 2005
#define mod 1000000007

int T;
int dp[MAX][MAX];

int main(){

	ifstream ifs("C:\\C\\pra\\Debug\\input.txt");
	ofstream ofs("C:\\C\\pra\\Debug\\output.txt");

	ifs >> T;

	for (int num = 1; num <= T; num++){
		string str;
		int a, b;
		ifs >> str;
		{
			string s1, s2;
			bool flag = false;
			for (int i = 0; i < str.length(); i++){
				if (str[i] != '-' && !flag){
					s1 += str[i];
				}
				if (str[i] == '-')
					flag = true;
				if (str[i] != '-' && flag)
					s2 += str[i];
			}
			a = atoi(s1.c_str());
			b = atoi(s2.c_str());
		}

		memset(dp, 0, sizeof(dp));
		int ans1, ans2;

		dp[1][0] = 1;

		for (int i = 0; i <= a; i++){
			for (int j = 0; j <= b; j++){
				if (i >= j + 2){
					dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod;
					dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % mod;
				}
				else if (i == j + 1){
					dp[i + 1][j] = (dp[i+1][j] + dp[i][j]) % mod;
				}
			}
		}

		ans1 = dp[a][b]%mod;

		memset(dp, 0, sizeof(dp));
		dp[0][1] = 1;

		for (int i = 0; i <= a; i++){
			for (int j = 0; j <= b; j++){
				if (j == b){
					dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod;
				}
				else if (j >= i){
					dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod;
					dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % mod;
				}
			}
		}

		ans2 = dp[a][b] % mod;
		
		ofs << "Case #" << num << ": " << ans1 << " " << ans2 << endl;

	}


	ifs.close();
	ofs.close();

	return 0;

}
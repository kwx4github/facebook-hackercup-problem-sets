#pragma comment(linker, "/STACK:512000000")
#include <iostream>
#include <vector>
#include <iomanip>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <string>
#include <sstream>
#include <math.h>

using namespace std;

class Solver {	
public:

	static const int N = 2005;
	static const int MOD = 1e9 + 7;

	int memo_stressful[N][N];
	int memo_stressfree[N][N];

	// my <= his
	int stressful(int my, int his) {
		if (memo_stressful[my][his] != -1) {
			return memo_stressful[my][his];
		}
		int& r = memo_stressful[my][his];

		if (my >= his) {
			return r = stressful(my - 1, his);
		}

		r = 0;
		if (my != 0) {
			r += stressful(my - 1, his);
		}
		if (his != 0 && my <= his - 1) {
			r += stressful(my, his - 1);
		}
		return r %= MOD;
	}
	// my > his
	int stressfree(int my, int his) {
		if (memo_stressfree[my][his] != -1) {
			return memo_stressfree[my][his];
		}
		int& r = memo_stressfree[my][his];

		r = 0;
		if (my - 1 > his) {
			r += stressfree(my - 1, his);
		}

		if (his - 1 >= 0) {
			r += stressfree(my, his - 1);
		}

		return r %= MOD;
	}

	Solver() {
		memset(memo_stressful, -1, sizeof(memo_stressful));
		memset(memo_stressfree, -1, sizeof(memo_stressfree));

		memo_stressful[0][0] = 1;
		memo_stressfree[1][0] = 1;

		for (int i = 1; i < N; ++i) {
			for (int j = 0; j < i; ++j) {
				solve1(i, j);
				solve2(i, j);
			}
		}
	}
		
	int solve1(int my, int his) {
		return stressfree(my, his);
	}

	int solve2(int my, int his) {
		return stressful(my, his);
	}
};

int main() {
	
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	Solver solver;
			
	int T; scanf("%d \n", &T);
	for (int test = 1; test <= T; ++test) {

		int a, b;
		char c;
		cin >> a >> c >> b;
								
		cout << "Case #" << test << ": " << solver.solve1(a, b) << " " << solver.solve2(a, b) << "\n";
		cerr << "Case #" << test << ": " << solver.solve1(a, b) << " " << solver.solve2(a, b) << "[" << 1. * clock() / CLOCKS_PER_SEC << "]\n";		
	}
	
	return 0;
}
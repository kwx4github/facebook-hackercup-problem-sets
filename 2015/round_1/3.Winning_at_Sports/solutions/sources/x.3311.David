#include <algorithm>
#include <cassert>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <utility>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;


template <typename T, typename S = T> class Range {
	const T m_begin; const T m_end; const S m_step;
public:
	class RangeIterator : public std::iterator<std::input_iterator_tag, T> {
		T m_current; const T m_end; const S m_step;
		const T& clip(const T& val) const {return m_step > 0 ? std::min(val, m_end) : std::max(val, m_end);}
	public:
		RangeIterator(const T& cur, const T& end, S step) : m_current(cur), m_end(end), m_step(step) { m_current = clip(m_current); }
		RangeIterator& operator++() {m_current = clip(m_current + m_step); return *this;}
		RangeIterator operator++(int) {RangeIterator buf(*this); operator++(); return buf;}
		bool operator==(const RangeIterator& rhs) {return m_current == rhs.m_current;}
		bool operator!=(const RangeIterator& rhs) {return m_current != rhs.m_current;}
		const T& operator*() const {return m_current;}
	};
	Range(const T& end) : m_begin(0), m_end(end), m_step(static_cast<T>(1)) {}
	Range(const T& begin, const T& end, S step = 1) : m_begin(begin), m_end(end), m_step(step) {}
	RangeIterator begin() const {return RangeIterator(m_begin, m_end, m_step);}
	RangeIterator end() const {return RangeIterator(m_end, m_end, m_step);}
};
template <typename T, typename S = int> Range<T, S> range(const T& begin, const T& end, S start = 1) { return Range<T, S>(begin, end, start); }
template <typename T> Range<T, T> range(const T& end) { return Range<T, T>(end); }




uint32_t scores_grid[2001][2001];

void init_scores_grid()
{
	for (int x = 1; x < 2001; ++x)
		scores_grid[x][0] = 1;

	for (int y = 1; y < 2001; ++y)
		scores_grid[0][y] = 1;

	for (int x = 1; x < 2001; ++x) {
		for (int y = 1; y < 2001; ++y) {
			unsigned long long score;
			if (x == y) {
				score = scores_grid[x - 1][y];
			}
			else if (x - 1 == y) {
				score = scores_grid[x][y - 1];
			}
			else
				score = scores_grid[x - 1][y] +	scores_grid[x][y - 1];

			scores_grid[x][y] = score % 1000000007;
		}
	}
}

// Yeah, why even use a function for this... ;-)
pair<uint32_t, uint32_t> solve(unsigned me, unsigned other)
{
	uint32_t stressfree = scores_grid[me][other];
	uint32_t stressful = scores_grid[other][other];

	return make_pair(stressfree, stressful);
}


int main(int argc, char** argv)
{
	init_scores_grid();

	if (argc < 2) {
		std::cerr << "Need an input file" << std::endl;
	}
	else {
		std::fstream input;
		input.open(argv[1], std::fstream::in);

		if (!input.is_open())
			return -1;

		unsigned T;
		input >> T;

		for (unsigned i = 1; i <= T; ++i) {
			string score;
			input >> score;

			unsigned M, N;

			string m = score.substr(0, score.find('-'));
			string o = score.substr(score.find('-') + 1);

			M = std::stoul(m);
			N = std::stoul(o);

			auto retval = solve(M, N);

			std::cout << "Case #" << i << ": " << retval.first << " " << retval.second << std::endl;
		}
	}
	return 0;
}

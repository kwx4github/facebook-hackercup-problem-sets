#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <complex>
#include <cstdio>
#include <vector>
#include <cctype>
#include <string>
#include <ctime>
#include <cmath>
#include <set>
#include <map>

typedef long double LD;
typedef long long LL;

using namespace std;

#define sz(A) (int)(A).size()
#define mp make_pair
#define pb push_back

const int N = 2005, MOD = int(1e9 + 7);

LL dp1[N][N], dp2[N][N][2];

int main() {
	dp1[0][0] = 1;
	for (int i = 0; i < N - 1; i++) {
		for (int j = 0; j < N - 1; j++) {
			if (i <= j && j) {
				dp1[i][j] = 0;
			}
			dp1[i + 1][j] += dp1[i][j];
			dp1[i + 1][j] %= MOD;
			dp1[i][j + 1] += dp1[i][j];
			dp1[i][j + 1] %= MOD;
		}			
	}

	dp2[0][0][1] = 1;
	for (int i = 0; i < N - 1; i++) {
		for (int j = 0;  j < N - 1; j++) {
			for (int k = 0; k < 2; k++) {
				if (i > j) {
					dp2[i][j][k] = 0;
				}
				dp2[i + 1][j][0] += dp2[i][j][k];
				dp2[i + 1][j][0] %= MOD;
				dp2[i][j + 1][1] += dp2[i][j][k];
				dp2[i][j + 1][1] %= MOD;
			}
		}
	}

	int t;
	scanf("%d", &t);

	for (int i = 0; i < t; i++) {
		int a, b;
		scanf("%d-%d", &a, &b);		

		LL sum = 0;
		for (int j = 0; j <= a; j++) {
			sum += dp2[j][b][1];
			sum %= MOD;
		}

		printf("Case #%d: ", i + 1);
		cout << dp1[a][b] << " " << sum << endl;
	}

	return 0;
}

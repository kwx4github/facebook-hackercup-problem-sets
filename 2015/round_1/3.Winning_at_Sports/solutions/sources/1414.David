package com.mantastyle.hackercup.round1

import java.io._

import scala.collection.mutable.ArrayBuffer

object WinningAtSports extends App {

  def solve(wins: Int, losses: Int): (Int, Int) =
    (solveWithRule(wins, losses, stressFreeInBounds),
      solveWithRule(wins, losses, stressfulInBounds(losses)))

  def stressFreeInBounds(w: Int, l: Int): Boolean = w > l

  def stressfulInBounds(totalLosses: Int)(w: Int, l: Int): Boolean = l >= w || l == totalLosses

  def solveWithRule(wins: Int, losses: Int, inBounds: (Int, Int) => Boolean): Int = {
    val grid = ArrayBuffer.fill(wins + 1)(ArrayBuffer.fill(losses + 1)(-1))
    def f(w: Int, l: Int): Int =
      if (w < 0 || l < 0)
        0
      else if (w == l && l == 0)
        1
      else if (!inBounds(w, l))
        0
      else
        grid(w)(l)
    for {w <- 0 to wins
         l <- 0 to losses} {
      grid(w)(l) = (f(w - 1, l) + f(w, l - 1)) % 1000000007
    }
    grid(wins)(losses)
  }

  val reader = new BufferedReader(new FileReader("input.txt"))
  val writer = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")))
  val numCases = reader.readLine().toInt
  for (i <- 1 to numCases) {
    val Seq(wins, losses) = reader.readLine().split("-").toSeq.map(_.trim.toInt)
    val (stressFree, stressful) = solve(wins, losses)
    writer.println(s"Case #$i: $stressFree $stressful")
    println(s"Case #$i: $stressFree $stressful")
  }
  writer.close()
}

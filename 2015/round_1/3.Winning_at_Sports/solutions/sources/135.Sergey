#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <bitset>
#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;
const string task = "";

template <class T> T sqr (T x) {return x * x;}

const int MOD = 1000000007;

int f[2001][2001];
int g[2001][2001];

int sum(int a, int b) {
	a += b;
	if (a >= MOD) {
		a -= MOD;
	}
	return a;
}

void precalc() {
	seta(f, 0);
	seta(g, 0);
	f[0][0] = g[0][0] = 1;
	f[1][0] = 1;
	g[0][1] = 1;
	for (int i = 0; i <= 2000; i++) {
		for (int j = 0; j <= 2000; j++) {
			if (i + j <= 1) continue;
			if (i > j) {
				if (i - 1 >= 0 && i - 1 > j) {
					f[i][j] = sum(f[i][j], f[i-1][j]);
				}
				if (j - 1 >= 0 && i > j - 1) {
					f[i][j] = sum(f[i][j], f[i][j-1]);
				}
			} else {
				if (i - 1 >= 0 && i - 1 <= j) {
					g[i][j] = sum(g[i][j], g[i-1][j]);
				}
				if (j - 1 >= 0 && i <= j - 1) {
					g[i][j] = sum(g[i][j], g[i][j-1]);
				}
			}
		}
	}
}

void solve() {
	int x, y;
	scanf("%d-%d", &x, &y);
	cout << f[x][y] << " " << g[y][y] << endl;
}

int main () {
//	freopen ((task + ".in").data(), "r", stdin);
//	freopen ((task + ".out").data(), "w", stdout);
//	freopen ("input.txt", "r", stdin);
//	freopen ("output.txt", "w", stdout);
	precalc();
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
	}
	return 0;
}

#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define foreach(e, x) for (__typeof(x.begin()) e = x.begin(); e != x.end(); ++e)
typedef long long LL;
typedef pair<int, int> PII;

int t, a, b;
string s;
int d[2005][2005];
const int MOD = 1e9 + 7;

inline void modAdd(int &x, int y) {
    x += y;
    if (x >= MOD) x -= MOD;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> t;
    for (int test = 1; test <= t; ++test) {
        cout << "Case #" << test << ": ";
        cin >> s;
        for (char &c : s) if (c == '-')
            c = ' ';
        istringstream(s) >> a >> b;
        REP(i, a + 1) REP(j, b + 1) d[i][j] = 0;
        d[1][0] = 1;
        REP(i, a + 1) REP(j, min(i, b + 1)) {
            if (i < a) modAdd(d[i + 1][j], d[i][j]);
            if (j + 1 < min(i, b + 1)) modAdd(d[i][j + 1], d[i][j]);
        }
        cout << d[a][b] << ' ';
        REP(i, a + 1) REP(j, b + 1) d[i][j] = 0;
        d[0][0] = 1;
        REP(i, a + 1) REP(j, b + 1) if (j == b || i <= j) {
            if (i < a && (j == b || i < j))
                modAdd(d[i + 1][j], d[i][j]);
            if (j < b)
                modAdd(d[i][j + 1], d[i][j]);
        }
        cout << d[a][b] << '\n';
    }
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
const int MOD = 1000000007;
int dp1[2010][2010];
int dp2[2010][2010];
void calculate(){
	memset(dp1, 0, sizeof(dp1));
	memset(dp2, 0, sizeof(dp2));
	dp1[1][0] = 1;
	for(int i=2; i<=2000; ++i){
		for(int j=0; j<i; ++j){
			dp1[i][j] = dp1[i-1][j];
			if(j > 0) dp1[i][j] = (dp1[i][j] + dp1[i][j-1])%MOD;
		}
	}
	dp2[0][0] = 1;
	dp2[0][1] = 1;
	dp2[1][1] = 1;
	for(int j=2; j<=2000; ++j){
		for(int i=0; i<=j; ++i){
			if(i<j)dp2[i][j] = dp2[i][j-1];
			if(i>0)dp2[i][j] = (dp2[i][j]+dp2[i-1][j])%MOD;
		}
	}
}
void solve(int testcase){
	string S;
	cin >> S;
	int a, b;
	a = b = 0;
	int index;
	for(index = 0; S[index] != '-'; index++){
		a *= 10;
		a += S[index]-'0';
	} 
	index++;
	for(;index < S.size(); index++){
		b *= 10;
		b += S[index]-'0';
	}
	int ans1 = dp1[a][b];
	int ans2 = dp2[b-1][b];

	cout << "Case #" << testcase << ": " << ans1 << ' ' <<ans2 << endl;
}

int main(){
	calculate();
	int TestCase;
	cin >> TestCase;
	for(int i=0; i<TestCase; ++i){
		solve(i+1);
	}
	return 0;
}

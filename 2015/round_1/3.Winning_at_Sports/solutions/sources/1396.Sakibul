#include <bits/stdc++.h>

using namespace  std;

typedef long long ll;

#define clr(a) (a.clear())
#define MP(a,b) make_pair(a,b)
#define sz(x) (int)x.size()
#define mem(a,b) memset(a, b, sizeof(a))
#define Unique(store) store.resize(unique(store.begin(),store.end())-store.begin())
#define pb push_back
#define FAST ios_base::sync_with_stdio(0);cin.tie(0);

#define X first
#define Y second

typedef pair<int , int> pii;
typedef pair<ll , ll> pll;
const ll inf = 1;
const ll mod = 1000000007LL;

#define SZ 2006

ll dp1[SZ][SZ];
ll dp2[SZ][SZ];
int a, b;

ll solve1 (int i, int j) {
    ll &ret = dp1[i][j];
    if (ret != -1) {
        return ret;
    }
    if (i > a || j > b) {
        return ret = 0;
    }
    if (i == a && j == b) {
        return ret = 1;
    }
    if (i == a) {
        return ret = solve1(i, j+1);
    }
    if (j == b) {
        return ret = solve1(i+1, j);
    }
    ret = solve1(i+1, j);
    if (j + 1 < i) {
        ret = (ret + solve1(i, j+1)) % mod;
    }
    return ret;
}

ll solve2 (int i, int j) {
    ll &ret = dp2[i][j];
    if (ret != -1) {
        return ret;
    }
    if (i > a || j > b) {
        return ret = 0;
    }
    if (i == a && j == b) {
        return ret = 1;
    }
    if (i == a) {
        return ret = solve2(i, j+1);
    }
    if (j == b) {
        return ret = solve2(i+1, j);
    }
    ret = solve2(i, j+1);
    if (i + 1 <= j) {
        ret = (ret + solve2(i+1, j)) % mod;
    }
    return ret;
}

int main() {
    #if defined JESI
        freopen("1.txt", "r", stdin);
        freopen("2.txt", "w", stdout);
    #endif

    int t;
    scanf("%d", &t);

    for (int cs = 0; cs < t; cs++) {
        scanf(" %d-%d", &a, &b);

        for (int i = 0; i < a+5; i++) {
            for (int j = 0; j < b+5; j++) {
                dp1[i][j] = dp2[i][j] = -1LL;
            }
        }

        printf("Case #%d: %lld %lld\n", cs+1, solve1(0, 0), solve2(0, 0));
    }

    return 0;
}







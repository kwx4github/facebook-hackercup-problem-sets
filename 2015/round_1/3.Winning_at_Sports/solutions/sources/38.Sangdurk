#include<cstdio>
#include<cassert>
#include<cstring>
#include<map>
#include<set>
#include<time.h>
#include<algorithm>
#include<stack>
#include<queue>
#include<utility>
#include<cmath>
#include<iostream>
#include<string>
#include<vector>
#include <limits>
   
using namespace std;
  
typedef pair <int, int> ii;
//typedef pair <long long, long long> ll;

const long long INF = 1e9 + 7;
const long long INF9 = 1e9 + 9;

long long gcd( long long b, long long s ){
    return (s!=0) ? gcd( s, b%s ) : b;
}

const int N = 4005;

long long d[N][N];

void init( int n, int m ){
	for(int i=0; i<=n+m; i++)
		for(int j=0; j<=m+n; j++)
			d[i][j] = 0;
}


int main(){
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);

	int T;
	scanf("%d", &T);

	for(int R=1; R<=T; R++){
		int n, m;
		scanf("%d-%d", &n, &m);
		

		printf("Case #%d: ", R);
		d[0][0] = 1;
		
		for(int i=0; i<n+m; i++){
			for(int j=0; j<=n; j++){
				int my = j;
				int op = i-j;
				if( op >= 0 ){
					if( op+1 < my )
						d[i+1][j] = (d[i+1][j] + d[i][j]) % INF;
					if( op < my+1 && my+1 <= n)
						d[i+1][j+1] = (d[i+1][j+1] + d[i][j]) % INF;
				}
			}
		}
		printf("%lld ", d[n+m][n]);

		init( n, m );
		d[0][0] = 1;
		for(int i=0; i<n+m; i++){
			for(int j=0; j<=m; j++){
				int my = i-j;
				int op = j;
				if( my >= 0 ){
					if( op == m ){
						d[i+1][j] = (d[i+1][j] + d[i][j]) % INF;
					}else{
						if( my <= op+1 ){
							d[i+1][j+1] = ( d[i+1][j+1], d[i][j] ) % INF;
						}
						if( my+1 <= op ){
							d[i+1][j] = (d[i+1][j] + d[i][j] ) % INF;
						}
					}
				}
			}
		}
		printf("%lld\n", d[n+m][m]);

		init( n, m );

	}
}
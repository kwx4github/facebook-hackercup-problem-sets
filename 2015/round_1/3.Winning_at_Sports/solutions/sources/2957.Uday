
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;

/**
 *
 * @author Uday Kandpal
 */
public class Sports {

    public static class Pair implements Comparable<Pair> {

        int first;
        int second;

        public Pair(int _f, int _s) {
            first = _f;
            second = _s;

        }

        @Override
        public String toString() {
            return "[" + first + ", " + second + "]";
        }

        @Override
        public int compareTo(Pair o) {
            if (first < o.first) {
                return -1;
            } else if (first > o.first) {
                return 1;
            } else {
                if (second < o.second) {
                    return -1;
                } else if (second > o.second) {
                    return 1;
                } else {
                    return 0;
                }
            }
        }

        public boolean equals(Pair o) {
            return (first == o.first && second == o.second);
        }

    }

    Comparator<Pair> c = new Comparator<Pair>() {

        @Override
        public int compare(Pair o1, Pair o2) {
            if (o1.first < o2.first) {
                return -1;
            } else if (o1.first > o2.first) {
                return 1;
            } else {
                if (o1.second < o2.second) {
                    return -1;
                } else if (o1.second > o2.second) {
                    return 1;
                } else {
                    return 0;
                }
            }
        }

    };
    TreeMap<Pair, Long> memoizeStressFreeWin = new TreeMap<>();
    TreeMap<Pair, Long> memoizeStressFullWin = new TreeMap<>();

    long modulo = 1_000_000_007L;

    public void recursiveLead(Pair current, Pair target) {
        if (current.equals(target)) {
            if (!memoizeStressFreeWin.containsKey(target)) {
                memoizeStressFreeWin.put(target, 1L);
            }
            return;
        } else if (current.first <= current.second) {
            // do nothing
            memoizeStressFreeWin.put(current, 0L);
            return;
        } else {
            long sum1 = 0, sum2 = 0, sum = 0;
            Pair pair1 = new Pair(current.first + 1, current.second);
            Pair pair2 = new Pair(current.first, current.second + 1);
            if (pair1.first <= target.first) {
                if (!memoizeStressFreeWin.containsKey(pair1)) {
                    recursiveLead(pair1, target);
                }
                sum1 = memoizeStressFreeWin.get(pair1);
            } else {
                sum1 = 0;
            }
            if (pair2.second <= target.second) {
                if (!memoizeStressFreeWin.containsKey(pair2)) {
                    if (pair2.equals(target)) {
                        memoizeStressFreeWin.put(target, 1L);
                    } else {
                        recursiveLead(pair2, target);
                    }
                }
                sum2 = memoizeStressFreeWin.get(pair2);
            } else {
                sum2 = 0;
            }
            if (!memoizeStressFreeWin.containsKey(current)) {
                sum = (sum2 + sum1) % modulo;
                memoizeStressFreeWin.put(current, sum);
            }
        }
    }

    public void recursiveTrail(Pair current, Pair target) {
        if (memoizeStressFullWin.containsKey(current)) {
            //do nothing
        } else if (current.first <= target.first && current.second <= target.second) {
            if (current.second == target.second) {
                memoizeStressFullWin.put(current, 1L);
                memoizeStressFullWin.put(target, 1L);
            } else {
                long sum1, sum2, sum = 0;
                Pair pair1 = new Pair(current.first + 1, current.second);
                Pair pair2 = new Pair(current.first, current.second + 1);
                if (pair1.first <= pair1.second && pair1.first <= target.first) {
                    if (!memoizeStressFullWin.containsKey(pair1)) {
                        recursiveTrail(pair1, target);
                    }
                    sum1 = memoizeStressFullWin.get(pair1);
                } else {
                    sum1 = 0;
                }
                if (pair2.second <= target.second) {
                    if (!memoizeStressFullWin.containsKey(pair2)) {
                        recursiveTrail(pair2, target);
                    }
                    sum2 = memoizeStressFullWin.get(pair2);
                } else {
                    sum2 = 0;
                }
                if (!memoizeStressFullWin.containsKey(current)) {
                    sum = (sum1 + sum2) % modulo;
                    memoizeStressFullWin.put(current, sum);
                }
            }
        }
    }

    public void reset() {
        memoizeStressFreeWin.clear();
        memoizeStressFullWin.clear();
    }

    private TreeMap<Pair, Pair> cache = new TreeMap<>();

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader("winning_at_sports.txt"));
        BufferedWriter bw = new BufferedWriter(new FileWriter("winning_at_sports_out.txt"));

        Sports s = new Sports();
        int caseNo = 1;
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String[] split = br.readLine().trim().split("-");
            int w = Integer.parseInt(split[0]);
            int l = Integer.parseInt(split[1]);
            int val1, val2;
            if (!s.cache.containsKey(new Pair(w, l))) {
                s.recursiveLead(new Pair(1, 0), new Pair(w, l));
                s.recursiveTrail(new Pair(0, 1), new Pair(w, l));
                if (s.memoizeStressFreeWin.get(new Pair(1, 0)) != null) {
                    val1 = (int) (long) s.memoizeStressFreeWin.get(new Pair(1, 0));
                } else {
                    val1 = 1;
                }
                if (s.memoizeStressFullWin.get(new Pair(0, 1)) != null) {
                    val2 = (int) (long) s.memoizeStressFullWin.get(new Pair(0, 1));
                } else {
                    val2 = 1;
                }
                s.cache.put(new Pair(w, l), new Pair(val1, val2));
            } else {
                Pair values = s.cache.get(new Pair(w, l));
                val1 = (int) (long) values.first;
                val2 = (int) (long) values.second;
            }
            bw.write("Case #" + caseNo + ": " + val1 + " " + val2 + "\n");
            s.reset();
            caseNo++;
        }
        bw.close();
    }

}

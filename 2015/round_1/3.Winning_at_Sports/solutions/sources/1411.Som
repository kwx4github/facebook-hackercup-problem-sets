package yesyoucan;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
 
 
 
 
class TestClass {
 
static int[] dist ;	
static int[][][] vis;
static char[][] graph;
static int max;
static int min;
static int[] dp;
static int[] prime;
static boolean[] isprime;


public static void main(String args[] ) throws IOException  {
	
 
 // BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
 BufferedReader in = new BufferedReader(new FileReader("C:\\Users\\Sompathak\\Desktop\\yes.txt"));
//Scanner in = new Scanner(new FileReader("C:\\Users\\Sompathak\\Desktop\\yes.txt"));
 PrintWriter pw = new PrintWriter(new FileWriter("C:\\Users\\Sompathak\\Desktop\\output.txt"));
	//InputStream inputStream = System.in;
	//InputReader in = new InputReader(inputStream);
//Scanner in = new Scanner(new InputStreamReader(System.in));
//Scanner in = new Scanner(new FileReader("C:\\Users\\Sompathak\\Desktop\\yes.txt"));
int t = Integer.parseInt(in.readLine());

for(int s=1;s<=t;s++){

pw.print("Case #"+s+": ");	
	
String[] S = in.readLine().split("-");
int myscore = Integer.parseInt(S[0]);
int oppscore = Integer.parseInt(S[1]);

long[][] ways = new long[myscore+1][oppscore+1];

ways[0][0] =1;
ways[1][0] =1;

for(int i=1;i<=myscore;i++) ways[i][0]=1;

for(int i=1;i<=myscore;i++)
	for(int j=1;j<=oppscore;j++){
		
		   if(i>j){
			   ways[i][j] = ways[i-1][j] + ways[i][j-1];
			   ways[i][j]%= 1000000007;
		   }
	}


pw.print(ways[myscore][oppscore]+" ");

for(int i=0;i<=myscore;i++) Arrays.fill(ways[i], 0);

ways[0][0]=1;

for(int i=1;i<=oppscore;i++) ways[0][i]=1;

for(int i=1;i<=oppscore;i++)
	for(int j=1;j<=oppscore;j++){
		
		   if(i>=j){
			   ways[j][i] = ways[j-1][i] + ways[j][i-1];
			   ways[j][i]%=1000000007;
		   }
	}

pw.println(ways[oppscore][oppscore]);
pw.flush();
}
	


}
 }
 


 
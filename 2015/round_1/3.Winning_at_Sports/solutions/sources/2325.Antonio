/** Libr@ries **/
//#include "bits/stdc++.h"
#include "stdio.h"
#include "string.h"
#include "cmath"
#include "iostream"
#include "algorithm"
#include "map"
#include "set"
#include "vector"

/** System **/
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

/** System_Win_32 **/
#if ( WIN32 || __WIN32_ )
   #define lld I64d
#endif

/** Utilities **/
#define forit(i,v  )  for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define fori( i,a,b)  for (int i = (int)(a); i < (int)(b); i++)
#define forn( i, n )  fori( i, 0, n )
#define zeros( a )    memset(a, 0,sizeof(a))
#define null( a )     memset(a,-1,sizeof(a))
#define all( a )      (a).begin() , (a).end()
#define sqr( a )      ( (a)*(a) )
#define sz( a )       (a).size()
#define pb            push_back
#define mp            make_pair
#define F             first
#define S             second
#define PI            2*acos(0.0)
using namespace std;
typedef long long LL;
#define MOD 1000000007LL

const int maxn = 2009;
int done[ maxn ][ maxn];
LL dp[ maxn ][ maxn];
LL WIN, LOSE;
int tc;

LL solve1( LL win, LL lose ){

	// cout << "=>" << win << " " << lose << endl;
	if ( done[win][lose] == tc ){
		// cout << "-\n";
		return dp[ win ][ lose ];
	}
	if ( lose == win || lose > LOSE || win > WIN ){
		// cout << ".\n";
		return 0LL;
	}
	if ( win == WIN && lose == LOSE ){
		done[ win ][ lose ] = tc;
		// cout << "..\n";
		return dp[ win ][ lose ] = 1LL;
	}

	done[ win ][ lose ] = tc;
	dp[ win ][ lose ] = ( solve1(win, lose+1) + solve1(win+1,lose ) )%MOD;

	return dp[ win ][ lose ];	
}

LL solve2( LL win, LL lose ){

	// cout << "=>" << win << " " << lose << endl;
	if ( done[win][lose] == tc ){
		// cout << "-\n";
		return dp[ win ][ lose ];
	}
	if ( (lose<LOSE && win>lose) || lose > LOSE || win > WIN ){
		// cout << ".\n"; 
		return 0LL;
	}
	if ( win == WIN && lose == LOSE ){
		done[ win ][ lose ] = tc;
		// cout << "..\n";
		return dp[ win ][ lose ] = 1LL;
	}

	done[ win ][ lose ] = tc;
	dp[ win ][ lose ] = ( solve2(win, lose+1) + solve2(win+1,lose ) )%MOD;

	return dp[ win ][ lose ];	
}

int main(int argc, char const *argv[])
{
	int t;
    cin >> t;

    for ( int caso = 1; caso <= t; caso++ )
    {
    	tc++;
    	scanf("%d-%d", &WIN, &LOSE );
    	//cout << WIN << "-" << LOSE << " : ";
    	cout << "Case #" << caso << ": ";
    	cout << solve1(1,0) << " ";
    	tc++;
    	cout << solve2(0,0) << endl;;
    }
    return 0;
}

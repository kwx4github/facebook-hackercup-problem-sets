package round1

import scala.collection.mutable.Map

object FB5 extends App {

    val scanner = new java.util.Scanner(System.in)
    val extractor = "([0-9]+)-([0-9]+)".r
    
    val data = 
    	for (_ <- 1 to scanner.nextLine.toInt) yield {
    	  scanner.nextLine match {
    	    case extractor(s1, s2) => (s1.toInt, s2.toInt)
    	  }
    	}
         
   def free(goal: (Int, Int)): Int = {
     val memo = Map((0,0) -> 1)
     def rec(c: (Int, Int)): Int = {
          if (memo.contains(c)) memo(c)
          else {
            var out = 0
            c match {
	            case (c1, c2) if c2 == 0 => 
	              out = rec((c1 - 1, c2))
	            case (c1, c2) if c1 - 1 == c2 =>
	              out = rec((c1, c2 - 1))
	            case (c1, c2) => 
	              out = rec((c1 - 1, c2)) + rec((c1, c2 - 1))
	          }
            out %= 1000000007
            memo += c -> out
            out
          }
     }
     rec(goal)
   }
   
   def full(goal: (Int, Int)): Int = {
     val memo = Map((0,0) -> 1)
     def rec(c: (Int, Int)): Int = {
          if (memo.contains(c)) memo(c)
          else {
            var out = 0
            c match {
	            case (c1, c2) if c1 >= c2 => 
	              out = rec((c1 - 1, c2))
	            case (c1, c2) if c1 == 0 =>
	              out = rec((c1, c2 - 1))
	            case (c1, c2) => 
	              out = rec((c1 - 1, c2)) + rec((c1, c2 - 1))
	          }
            out %= 1000000007
            memo += c -> out
            out
          }
     }
     rec(goal)
   }
   
   for {
	   (goal, i) <- data.zipWithIndex
   }
  	println("Case #"+(i+1)+": "+free(goal)+" "+full(goal))
                          
}
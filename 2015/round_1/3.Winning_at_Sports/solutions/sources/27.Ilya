#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<algorithm>
#include<cmath>
#include<set>
#include<queue>
#include<sstream>
#include<utility>
#include<map>
#include<ctime>
#include<cstdio>
#include<cassert>
#include<functional>




using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<char, char> pcc;
typedef pair<double, double> pdd;

#define show(x) cerr << x
#define debug(x) show(#x << ": " << (x) << endl)

const long double PI = 3.14159265358979323846;
const long double gammama = 0.57721566490153286060;
const long double eps = 1e-5;
const int INF = 1000 * 1000 * 1000 + 1;
const ll LINF = (ll)1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const ll mod = 1000 * 1000 * 1000 + 7;

pii getInt(string s) {
      int a = 0;
      int i = 0;
      while (s[i] != '-') {
            a = 10 * a + s[i] - '0';
            ++i;
      }
      ++i;
      int b = 0;
      while (i < s.size()) {
            b = 10 * b + s[i] - '0';
            ++i;
      }
      return pii(a, b);
}

ll count(int a, int b) {
      vector<int> dif(a + 1, 0);
      dif[1] = 1;
      for (int i = 1; i < a + b; ++i) {
            vector<int> newDif(a + 1, 0);
            for (int j = 1; j < dif.size(); ++j) {
                  if (j > i)
                        break;
                  int x = (i + j) / 2;
                  int y = (i - j) / 2;
                  if (x < a)
                        newDif[j + 1] += dif[j];
                  if (y < b)
                        newDif[j - 1] += dif[j];
            }
            for (int j = 1; j < dif.size(); ++j)
                  dif[j] = newDif[j] % mod;
      }
      return dif[a - b];
}

ll cat(int x) {
      vector<int> dif(x + 1, 0);
      dif[1] = 1;
      for (int i = 1; i < 2 * x; ++i) {
            vector<int> newDif(x + 1, 0);
            for (int j = 0; j < dif.size(); ++j) {
                  if (j > i)
                        break;
                  int u = (i + j) / 2;
                  int v = (i - j) / 2;
                  if (u < x)
                        newDif[j + 1] += dif[j];
                  if ((v < x) && (j > 0))
                        newDif[j - 1] += dif[j];
            }
            for (int j = 0; j < dif.size(); ++j)
                  dif[j] = newDif[j] % mod;
      }
      return dif[0];
}

void solve() {
      string s;
      cin >> s;
      pii x = getInt(s);
      ll res1 = count(x.first, x.second);
      ll res2 = 1;
      if (x.second != 0)
            res2 = cat(x.second);
      cout << res1 << " " << res2 << endl;

}

#define LOCAL

int main() {
      //ios_base::sync_with_stdio(0);
#ifdef LOCAL
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
#endif
      int numberOfTests;
      cin >> numberOfTests;
      for (int testId = 0; testId < numberOfTests; ++testId) {
            cout << "Case #" << testId + 1 << ": ";
            solve();
            std::cerr << testId << endl;
      }

#ifdef LOCAL
      cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif	
      return 0;
}

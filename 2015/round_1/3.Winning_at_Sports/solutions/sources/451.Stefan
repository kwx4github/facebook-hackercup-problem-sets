#ifdef ONLINE_JUDGE
	#include <bits/stdc++.h>
#else
	#include <algorithm>
	#include <bitset>
	#include <cassert>
	#include <cstdio>
	#include <cstring>
	#include <iostream>
	#include <map>
	#include <set>
	#include <stack>
	#include <string>
	#include <utility>
	#include <vector>
	#include <cstdlib>
#endif

using namespace std;

	// lambda : [] (int a, int b) -> bool { body return }
	// string r_str = R"(raw string)"

#define mp make_pair
#define eb emplace_back
#define pb push_back
#define LL long long
#define ULL unsigned long long
#define BASE 73
#define NMAX 10000
#define NMAX2 20001
#define MOD1 1000000007
#define ALL(V) (V).begin(), (V).end()
#define ALLR(V) (V).rbegin(), (V).rend()
#define CRLINE Duxar(__LINE__);
#define SHOWME(x) cerr << __LINE__ << ": " << #x << " = " << (x) << endl;
#define ENTER putchar('\n');

void Duxar(int _this_line) {
#ifndef ONLINE_JUDGE
	printf("\n . . . . . . . . . . . . . Passed line - %d\n", _this_line);
#endif
}

template <class T>
void ReadNo(T &_value) {
	T sign = 1;
	char ch;
	_value = 0;
	while(!isdigit(ch = getchar())) {
		(ch == '-') && (sign = -1);
	}
	do {
		_value = _value * 10 + (ch - '0');
	} while(isdigit(ch = getchar()));
	_value *= sign;
}

template <class T>
void AddNr(T &a, T b) {
	a = a + b;
	while (a >= MOD1) {
		a -= MOD1;
	}
	while (a < 0) {
		a += MOD1;
	}
}

vector <vector <int> > StressFree(2001, vector <int> (2001)), StressFull(2001, vector <int> (2001));

void Solve();
int ComputeStressFree(int A, int B);
int ComputeStressFull(int A, int B);

int main(int no_arguments, char **arguments){
	if (no_arguments > 1) {
		freopen(arguments[1], "r", stdin);
	}
	else {
		freopen("input.cpp", "r", stdin);
	}
	
	int i, N;
	ReadNo(N);
	for (i = 1; i <= N; ++i) {
		printf("Case #%d: ", i);
		Solve();
	}
	
	return 0;
}

void Solve() {
	int A, B;
	scanf("%d-%d", &A, &B);
	printf("%d ", ComputeStressFree(A, B));
	printf("%d\n", ComputeStressFull(B, B));
}

int ComputeStressFree(int A, int B) {
	if (StressFree[A][B] > 0) {
		return StressFree[A][B];
	}
	if (A == 0 || B == 0) {
		StressFree[A][B] = 1;
		return 1;
	}
	if (A - 1 > B) {
		StressFree[A][B] = ComputeStressFree(A - 1, B);
	}
	StressFree[A][B] += ComputeStressFree(A, B - 1);
	StressFree[A][B] %= MOD1;
	return StressFree[A][B];
}

int ComputeStressFull(int A, int B) {
	if (StressFull[A][B] > 0) {
		return StressFull[A][B];
	}
	if (A == 0 || B == 0) {
		StressFull[A][B] = 1;
		return 1;
	}
	if (A - 1 >= B) {
		StressFull[A][B] = ComputeStressFull(A - 1, B);
	}
	StressFull[A][B] += ComputeStressFull(A, B - 1);
	StressFull[A][B] %= MOD1;
	return StressFull[A][B];
}
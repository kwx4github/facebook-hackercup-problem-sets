package de.mprengemann.fb.hackercup15.problem6;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayDeque;
import java.util.Queue;

import static java.nio.charset.StandardCharsets.UTF_8;

public class Problem6 {
    private String pathToFile;
    private Queue<String> inputFileLines = new ArrayDeque<String>();
    private static final long MOD = 1000000007L;
    private long[][] ways = new long[2001][2000];

    public Problem6(String pathToFile) {
        this.pathToFile = pathToFile;
    }

    public void solve(String outputFile) {
        PrintWriter out = null;
        try {
            inputFileLines = new ArrayDeque<String>(Files.readAllLines(Paths.get(pathToFile), UTF_8));
            out = new PrintWriter(outputFile);
            for (int x = 0; x < 2001; x++) {
                ways[x][0] = 1;
            }
            for (int y = 0; y < 2000; y++) {
                ways[0][y] = 1;
            }
            for (int y = 1; y < 2000; y++) {
                for (int x = 1; x < 2001; x++) {
                    if (x == y) {
                        ways[x][y] = ways[x - 1][y];
                    } else if (x == y + 1) {
                        ways[x][y] = ways[x][y - 1];
                    } else {
                        ways[x][y] = ways[x - 1][y] + ways[x][y - 1];
                    }
                    ways[x][y] %= MOD;
                }
            }
            int testCases = Integer.parseInt(inputFileLines.poll());
            for (int testCase = 1; testCase <= testCases; testCase++) {
                solveTestCase(testCase, out);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
        }
        System.out.println("Finished");
    }

    private void solveTestCase(int testCaseNumber, PrintWriter out) {
        TestCase testCase = new TestCase();
        testCase.setScore(inputFileLines.poll());
        String result = String.format("Case #%d: %s %s",
                                      testCaseNumber,
                                      testCase.getStressfreeCount(),
                                      testCase.getStressfulCount());
        System.out.println(result);
        out.println(result);
    }

    private class TestCase {

        private int my;
        private int opponent;

        public void setScore(String input) {
            String[] values = input.split("-");
            my = Integer.parseInt(values[0]);
            opponent = Integer.parseInt(values[1]);
        }

        public long getStressfreeCount() {
            return ways[my][opponent];
        }

        public long getStressfulCount() {
            return ways[opponent][opponent];
        }
    }
}

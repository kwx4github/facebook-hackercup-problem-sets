// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

static const unsigned MODVAL = 1000000007;
struct mint {
    unsigned val;
    mint():val(0){}
    mint(int      x):val(x%MODVAL) {}
    mint(unsigned x):val(x%MODVAL) {}
    mint(LL       x):val(x%MODVAL) {}
};
mint& operator+=(mint& x, mint y) { return x = x.val+y.val; }
mint& operator-=(mint& x, mint y) { return x = x.val-y.val+MODVAL; }
mint& operator*=(mint& x, mint y) { return x = LL(x.val)*y.val; }
mint operator+(mint x, mint y) { return x+=y; }
mint operator-(mint x, mint y) { return x-=y; }
mint operator*(mint x, mint y) { return x*=y; }
int main(){
    iostream_init();
    int T;
    cin >> T;
    for(int casenum = 1; casenum <= T; casenum++) {
        cout << "Case #" << casenum << ": ";
        string s;
        cin >> s;
        REP(i, s.size()) if(s[i] == '-') s[i] = ' ';
        stringstream ss(s);
        int A, B;
        ss >> A >> B;
        const int MAX = 2020;
        mint dp1[MAX+2][MAX+2] = {};
        mint dp2[MAX+2][MAX+2] = {};
        dp1[1][0] = 1;
        dp2[0][0] = 1;
        for(int i = 0; i <= A; i++) {
            for(int j = 0; j <= B; j++) {
                if(i > j) {
                    if(i+1 <= A) dp1[i+1][j] += dp1[i][j];
                    if(j+1 <= B && i > j+1) dp1[i][j+1] += dp1[i][j];
                }
                if(i <= j || j == B) {
                    if(i+1 <= A && (j == B || i+1 <= j)) dp2[i+1][j] += dp2[i][j];
                    if(j+1 <= B) dp2[i][j+1] += dp2[i][j];
                }
            }
        }
        cout << dp1[A][B].val << " " << dp2[A][B].val << endl;
    }
    return 0;
}

/* vim:set foldmethod=marker: */


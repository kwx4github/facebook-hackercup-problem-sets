#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

const long long mod = 1e9 + 7;
const int N = 5555;
long long fact[N], inv[N];

long long power(long long a, long long b)
{
	if (b == 0) return 1;
	long long ret = power(a, b / 2);
	ret = ret * ret % mod;
	if (b % 2 == 1) ret = ret * a % mod;
	return ret;
}

long long rec(long long x)
{
	return power(x, mod - 2);
}

long long comb(long long n, long long r)
{
	if (n < 0 or n < r) return 0;
	return fact[n] * inv[r] % mod * inv[n - r] % mod;
}

void pre()
{
	fact[0] = 1, inv[0] = 1;
	for (int i = 1; i < N; i++) fact[i] = fact[i-1] * i % mod;
	for (int i = 1; i < N; i++) inv[i] = inv[i-1] * rec(i) % mod;
}

long long go1(long long a, long long b)
{
	long long ret = a - b;
	ret = ret * comb(a + b, b) % mod;
	ret = ret * rec(a + b) % mod;
	return ret;
}

long long go2(long long n)
{
	long long ret = comb(n + n, n);
	ret = ret * rec(n + 1) % mod;
	return ret;
}

int main()
{
	pre();
	int t; scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++)
	{
		int a, b;
		scanf("%d-%d", &a, &b);
		printf("Case #%d: %lld %lld\n", tt, go1(a, b), go2(b));
	}
	return 0;
}
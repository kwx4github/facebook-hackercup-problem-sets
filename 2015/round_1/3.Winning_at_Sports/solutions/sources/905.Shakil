#include<cstdio>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<set>
#include<string>
#include<map>

#include <cstdlib>

using namespace std;

/*
void Vec()
{
	vector<int> A;  
	A.push_back(10);
	int n = A.size();
	A.clear();
	if(!A.empty())
	{
		int sum = 0;
		for(vector<int>::iterator it = A.begin();it != A.end();it++)
		{
			sum += *it;
		}

		vector<int>::iterator it = A.begin();
		A.erase(it);
		sort(A.begin(),A.end());
		it = max_element(A.begin(),A.end());
		it = min_element(A.begin(),A.end());
		A.insert(it,10);
		A.pop_back();
		int a = A.front();
		int b = A.back();
	}
}

void Pairs()
{
	pair<int,int> A;
	A.first = 10;
	A.second = 15;
}

void STRING()
{
	string a = "Hello";
	a = a + a;
	string b = a.substr(0,3);
	int t = a.find_first_of('a');
	cout<< a;
}

void SET()
{
	set<int> A;
	A.insert(10);
	A.erase(10);
	int t = A.count(10);
	set<int>::iterator it = A.find(10);
	it = A.upper_bound(10);//>10
	it = A.lower_bound(10);//<=10

	A.clear();
	if(!A.empty())
	{
		int sum = 0;
		for(set<int>::iterator it = A.begin();it != A.end();it++)
		{
			sum += *it;
		}
	}
}

void MAP()
{
	map<int,int> A;
	A[10]=20;
	A.erase(10);
	A.clear();
	A.size();
	map<int,int>::iterator it = A.find(10);

	if(!A.empty())
	{
		int sum = 0;
		for(map<int,int>::iterator it = A.begin();it != A.end();it++)
		{
			sum += it->second;
		}
	}
}

struct fun{
  int  xnode, weight;
  fun() {}
  fun(int t, int w) : xnode(t), weight(w) {}
  bool operator < (const fun &that) const {
    return weight > that.weight;
  }
};

void Priority_Queue()
{
	priority_queue<fun> q;
	q.top().weight;
	q.pop();
	q.push(fun(1,2));
	int i = q.size();
	if(!q.empty())
	{}
}
*/

/*
struct fun{
	__int64  x, y;
	fun() {}
	fun(__int64 t, __int64 w) : x(t), y(w) {}
};

bool compare(const fun &a, const fun &b)
{
	if(a.x != b.x)
		return a.x < b.x;
	else
		return a.y < b.y;
}
*/

int statefull[2009][2009];
int stateless[2009][2009];
int limit =  1000000007;


int main()
{
	freopen("winning_at_sports.txt","r",stdin); 
    freopen("output.txt","w",stdout);

	int cas;
	scanf("%d",&cas);

	for(int cas1=1;cas1<=cas;cas1++)
	{
		int a,b;
		char cp;
		scanf("%d%c%d",&a,&cp,&b);

		for(int i=0;i<=a;i++)
			for(int j=0;j<=b;j++)
			{
				statefull[i][j]=0;
				stateless[i][j]=0;
			}

			statefull[0][0]=1;
			stateless[0][0]=1;

			for(int i=0;i<=a;i++)
			for(int j=0;j<=b;j++)
			{
				if(i > j || (i==0 && j==0))
				{
					if(i+1<=a)
						statefull[i+1][j] = (statefull[i+1][j]+statefull[i][j])%limit;
					if(j+1<=b && j+1 < i)
						statefull[i][j+1] = (statefull[i][j+1]+statefull[i][j])%limit;
				}

				if(i+1<=a && (i+1 <= j || j == b))
					stateless[i+1][j] = (stateless[i+1][j]+stateless[i][j])%limit;

				if(j+1<=b && i <= j)
					stateless[i][j+1] = (stateless[i][j+1]+stateless[i][j])%limit;
				
			}

		printf("Case #%d: %d %d\n",cas1,statefull[a][b],stateless[a][b]);
	}

	return 0;    
}

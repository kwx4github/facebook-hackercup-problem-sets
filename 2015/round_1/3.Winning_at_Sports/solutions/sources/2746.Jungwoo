#include <iostream>
#include <vector>
#include <algorithm>

#define MOD (1000000007ll)

using namespace std;

bool operator < (const string & a, const string & b) {
	int n = min(a.size(), b.size());
	for (int i = 0 ; i < n ; ++i) {
		if (a[i] == b[i]) continue;
		return a[i] < b[i];
	}
	return a.size() < b.size();
}
int test(const string & a, const string & b) {
	int ret = 1;
	for (int i = 0 ; i < a.size() && i < b.size() ; ++i) {
		if (a[i] != b[i]) break;
		ret++;
	}
	return min((int)a.size(),ret);
}

int main (int argc, char const *argv[])
{
	int T;
	cin >> T;
	vector<long long> DP1, DP2;	
	for (int casen = 1 ; casen <= T ; casen++) {
		cout << "Case #" << casen << ": ";
		int a, b;
		cin >> a >> b;
		b = -b;
		int n = a+b;
		DP1.resize(b+1), DP2.resize(b+1);
		std::fill(DP1.begin(), DP1.end(), 0);
		DP1[0] = 1;
		for(int i = 1 ; i <= n ; ++i) {
			std::swap(DP1, DP2);
			std::fill(DP1.begin(), DP1.end(), 0);
			for (int j = 0 ; j <= min(i-1,b) ; ++j) {
				int awin = i - j - 1, bwin = j;
				if (bwin+1 < awin && bwin+1 <= b) {
					DP1[bwin+1] += DP2[bwin];
					DP1[bwin+1] %= MOD;
				}
				DP1[bwin] += DP2[bwin];
				DP1[bwin] %= MOD;
			}
			// for (int i = 0 ; i < b+1 ; ++i) cout << DP1[i] << " ";
			// cout << endl;
		}
		cout << DP1[b] << " ";
		std::fill(DP1.begin(), DP1.end(), 0);
		DP1[0] = 1;
		for(int i = 1 ; i <= n ; ++i) {
			std::swap(DP1, DP2);
			std::fill(DP1.begin(), DP1.end(), 0);
			for (int j = 0 ; j <= min(i-1,b) ; ++j) {
				int awin = i - j - 1, bwin = j;
				if (awin+1 <= bwin || bwin == b) {
					DP1[bwin] += DP2[bwin];
					DP1[bwin] %= MOD;
				}
				if (bwin < b) {
					DP1[bwin+1] += DP2[bwin];
					DP1[bwin+1] %= MOD;
				}
			}
		}
		cout << DP1[b] << endl;
	}
	return 0;
}
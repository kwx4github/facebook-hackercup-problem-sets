#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2> t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

const int mod = 1000 * 1000 * 1000 + 7;

int add(int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	return a;
}

int mult(LL a, int b) {
	return a * b % mod;
}

void add_up(int &a, int b) { a = add(a, b); }
void mult_up(int &a, LL b) { a = mult(b, a); }

const int MAX = 2000;

vector<vector<int>> stressfree(MAX + 1, vector<int>(MAX + 1));
vector<vector<int>> stressful(MAX + 1, vector<int>(MAX + 1));

pair<int, int> solve() {
	next(string, s);
	for (auto &c : s) if (c == '-') c = ' ';
	istringstream iss(s);
	
	int n, k;
	
	assert(iss >> n);
	assert(iss >> k);
	
	return { stressfree[n][k] , stressful[k][k] };
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
		
	stressfree[0][0] = stressful[0][0] = 1;
	
	FOR (a, 0, MAX + 1) FOR (b, 0, MAX + 1)
		if (a + b) {
			if (a > b) {
				stressfree[a][b] = stressfree[a - 1][b];
				if (b) add_up(stressfree[a][b] , stressfree[a][b - 1]);
			}
			if (a <= b) {
				stressful[a][b] = stressful[a][b - 1];
				if (a) add_up(stressful[a][b] , stressful[a - 1][b]);
			}
		}
		
	next(int, t);
	FOR (i, 1, t + 1) cout << "Case #" << i << ": " << solve() << endl;
}
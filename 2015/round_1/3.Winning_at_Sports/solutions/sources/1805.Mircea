#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

#define dbg(x) (cout<<#x<<" = "<<(x)<<'\n')
#ifdef HOME
const string inputFile = "input.txt";
const string outputFile = "output.txt";
#else
const string problemName = "";
const string inputFile = problemName + ".in";
const string outputFile = problemName + ".out";
#endif

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

#define DIM 10000
char buff[DIM];
int position = 0;

void read(int &nr) {
    nr = 0;
    while(buff[position] < '0' || buff[position] > '9')
        if(++position == DIM)
            fread(buff, 1, DIM, stdin), position = 0;
    while('0' <= buff[position] && buff[position] <= '9') {
        nr = nr * 10 + buff[position] - '0';
        if(++position == DIM)
            fread(buff, 1, DIM, stdin), position = 0;
    }
}

const int INF = (1LL << 30) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 100000 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

int A[2005][2005];
int B[2005][2005];

void solve() {
    int x, y;

    read(x);
    read(y);

    printf("%d %d\n", A[x][y], B[y][y]);
}

int main() {
    int test, nr_cases;
    int i, j;

#ifndef ONLINE_JUDGE
    freopen(inputFile.c_str(), "r", stdin);
    freopen(outputFile.c_str(), "w", stdout);
#endif

    for(i = 1; i <= 2000; i++) {
        A[i][0] = 1;
        for(j = 1; j <= i - 1; j++) {
            A[i][j] = 0;
            if(i - 1 >= 0 && i - 1 > j)
                A[i][j] += A[i - 1][j];
            if(j - 1 >= 0)
                A[i][j] += A[i][j - 1];
            A[i][j] %= MOD;
        }
    }

    B[0][0] = 1;

    for(i = 1; i <= 2000; i++) {
        for(j = 0; j <= i; j++) {
            B[i][j] = 0;
            if(i - 1 >= 0 && i - 1 >= j)
                B[i][j] += B[i - 1][j];
            if(j - 1 >= 0)
                B[i][j] += B[i][j - 1];
            B[i][j] %= MOD;
        }
    }

    scanf("%d", &nr_cases);

    for(int test = 1; test <= nr_cases; test++) {
        printf("Case #%d: ", test);
        solve();
    }

    return 0;
}

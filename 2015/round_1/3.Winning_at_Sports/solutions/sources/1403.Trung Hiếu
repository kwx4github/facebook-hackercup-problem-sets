import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.util.InputMismatchException;
import java.io.InputStream;
import java.util.NoSuchElementException;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Nguyen Trung Hieu - vuondenthanhcong11@gmail.com
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {
    private static final int MOD = (int)1e9 + 7;
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        out.print("Case #" + testNumber + ": ");
        String[] s = in.readString().split("-");
        int myPoint = Integer.valueOf(s[0]);
        int yourPoint = Integer.valueOf(s[1]);
        int total = myPoint + yourPoint;
        long[][] dpFree = new long[myPoint + 1][yourPoint + 1];

        dpFree[1][0] = 1;
        for (int i = 2; i <= myPoint; i++) {
            for (int j = 0; j < Math.min(i, yourPoint + 1); j++) {
                if (j - 1 < 0) {
                    dpFree[i][j] = dpFree[i - 1][j];
                } else if (i - 1 <= j) {
                    dpFree[i][j] = dpFree[i][j - 1];
                } else {
                    dpFree[i][j] += dpFree[i - 1][j] + dpFree[i][j - 1];
                    dpFree[i][j] %= MOD;
                }
            }
        }

        long[][] dpStress = new long[myPoint + 1][yourPoint + 1];
        dpStress[0][0] = 1;
        for (int i = 0; i <= myPoint; i++) {
            if (i > yourPoint) {
                dpStress[i][yourPoint] = dpStress[i - 1][yourPoint];
            }
            for (int j = i; j <= yourPoint; j++) {
                if (i == 0 && j == 0) {
                    dpStress[i][j] = 1;
                    continue;
                }
                if (i - 1 < 0) {
                    dpStress[i][j] = dpStress[i][j - 1];
                } else if (i >= j) {
                    dpStress[i][j] = dpStress[i - 1][j];
                } else if (j > i) {
                    dpStress[i][j] = dpStress[i - 1][j] + dpStress[i][j - 1];
                    dpStress[i][j] %= MOD;
                }
            }
        }

        out.printLine(dpFree[myPoint][yourPoint], dpStress[myPoint][yourPoint]);
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public boolean isSpaceChar(int c) {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public interface SpaceCharFilter {
        public boolean isSpaceChar(int ch);
    }

    public String next() {
        return readString();
    }
}

class OutputWriter {
    private final PrintWriter writer;

    public OutputWriter(OutputStream outputStream) {
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }

    public void print(Object...objects) {
        for (int i = 0; i < objects.length; i++) {
            if (i != 0)
                writer.print(' ');
            writer.print(objects[i]);
        }
    }

    public void printLine(Object...objects) {
        print(objects);
        writer.println();
    }

    public void close() {
        writer.close();
    }

}


package hc2015.stage1;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;


public class HC2015Stage1Task3 {
	
	private class FileHelper {
		private BufferedReader br;
		private List<String> feed = new LinkedList<String>();
		private FileWriter fw;
		public FileHelper(String fileName) {
			String fileNameNoExtension = fileName.endsWith(".txt") ? fileName.substring(0, fileName.length() - 4) : fileName;
			try {
				br = new BufferedReader(new FileReader(new File(fileNameNoExtension + ".txt")));
				fw = new FileWriter(new File(fileNameNoExtension + "_solution.txt"));
			} catch (IOException e) {
				System.out.println("Error while opening files.");
				e.printStackTrace();
				System.exit(1);
			}
		}
		
		public void close() {
			try {
				br.close();
				fw.flush();
				fw.close();
			} catch (IOException e) {
				System.out.println("Error while closing files.");
				e.printStackTrace();
				System.exit(1);
			}
		}
		
		private void feed() {
			if (feed.isEmpty()) {
				try {
					for (String s : br.readLine().split(" ")) {
						feed.add(s);
					}
				} catch (IOException e) {
					System.out.println("Error while reading input.");
					e.printStackTrace();
					System.exit(1);
				}
			}
		}
		
		public String readS() {
			feed();
			return feed.remove(0);
		}
		
		public int read() {
			feed();
			return Integer.valueOf(feed.remove(0));
		}
		
		public void write(String msg, Object... args) {
			try {
				String s = msg;
				for (Object arg : args) {
					s = s.replaceFirst("[?]", String.valueOf(arg));
				}
				fw.write(s);
				System.out.println(s);
			} catch (IOException e) {
				System.out.println("Error while writing output.");
				e.printStackTrace();
				System.exit(1);
			}
		}
	}
	
	public HC2015Stage1Task3(String fileName) {
		super();
		fh = new FileHelper(fileName);
	}
	
	private FileHelper fh;
	
	public String readS() {
		return fh.readS();
	}
	
	public int read() {
		return fh.read();
	}

	public static void main(String[] args) {
		HC2015Stage1Task3 solver = new HC2015Stage1Task3(FILE_NAME);
		solver.solve();
	}
	
	public void solve() {
		System.out.println("solve start..");
		int cases = read();
		for (int i=1; i<=cases; i++) {
			fh.write("Case #?: ?\n", i, solveOne());
		}
		fh.close();
		System.out.println("solve end.");
	}
	
	public static String swap(String s, int index1, int index2) {
		String s1 = s.substring(index1, index1 + 1);
		String s2 = s.substring(index2, index2 + 1);
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < s.length(); i++) {
			if (i == index1) {
				sb.append(s2);
			} else if (i == index2) {
				sb.append(s1);
			} else {
				sb.append(s.substring(i, i+1));
			}
		}
		return sb.toString();
	}
	
	// --------------------- actual solution -------------------- 
	private static final String FILE_NAME = "winning_at_sports";
	
	public static class BigNumber {
		private BigInteger v = BigInteger.valueOf(0);
		public void add(BigNumber bn) {
			v = v.add(bn.getValue());
		}
		public void add(int i) {
			v = v.add(BigInteger.valueOf(1));
		}
		public BigInteger getValue() {
			return v;
		}
	}
	
	public String solveOne() {
		String[] score = readS().split("-");
		int scoreX = Integer.valueOf(score[0]);
		int scoreY = Integer.valueOf(score[1]);
		BigInteger[][] b = new BigInteger[scoreX + 1][scoreY + 1];
		b[0][0] = BigInteger.valueOf(1);
		for (int y = 1; y <= scoreY; y++) {
			for (int x = 0; x <= y; x++) {
				b[x][y] = BigInteger.valueOf(0);
				if (x > 0) {
					b[x][y] = b[x][y].add(b[x-1][y]);
				}
				if (y > x) {
					b[x][y] = b[x][y].add(b[x][y-1]);
					b[x][y-1] = null;
				}
				
			}
		}
		b[1][0] = BigInteger.valueOf(1);
		for (int y = 0; y <= scoreY; y++) {
			for (int x = y + 1 + (y==0 ? 1 : 0); x <= scoreX; x++) {
				b[x][y] = BigInteger.valueOf(0);
				if (x > y + 1) {
					b[x][y] = b[x][y].add(b[x-1][y]);
				}
				if (y > 0) {
					b[x][y] = b[x][y].add(b[x][y-1]);
					b[x][y-1] = null;
				}
			}
		}
		return b[scoreX][scoreY].mod(BigInteger.valueOf(1000000007)) + " " + b[scoreY][scoreY].mod(BigInteger.valueOf(1000000007));
	}
}

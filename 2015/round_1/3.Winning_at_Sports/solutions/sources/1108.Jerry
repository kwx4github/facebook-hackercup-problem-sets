/**
 * jerry
 * C.cpp
 */

#include <assert.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <bitset>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

typedef long long int lli;
typedef pair<int, int> pii;

int gInt () {
    int i;
    scanf("%d", &i);
    return i;
}

lli gLong () {
    lli i;
    scanf("%lld", &i);
    return i;
}

double gDouble () {
    double i;
    scanf("%lf", &i);
    return i;
}

void quit () {
    fflush(stdout);
    exit(0);
}

#define MOD (1000000007)

char buf[10005];
int my, opp;
int dp[2005][2005];

void solve(int nC) {
    scanf("%s", buf);
    char * s1 = strtok(buf, "-");
    char * s2 = strtok(nullptr, "-");
    my = atoi(s1);
    opp = atoi(s2);
    fprintf(stderr, "%d-%d\n", my, opp);

    memset(dp, 0, sizeof(dp));
    dp[0][0] = 1;
    for (int i = 0; i <= my; ++i) {
        for (int j = 0; j <= opp; ++j) {
            if (i < my) {
                dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
            }
            if (j < my) {
                if (i > j + 1) {
                    dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
                }
            }
        }
    }
    int a1 = dp[my][opp];

    memset(dp, 0, sizeof(dp));
    dp[0][0] = 1;
    for (int i = 0; i <= my; ++i) {
        for (int j = 0; j <= opp; ++j) {
            if (i < my) {
                if (i + 1 <= j || j == opp) {
                    dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
                }
            }
            if (j < my) {
                dp[i][j + 1] = (dp[i][j + 1] + dp[i][j]) % MOD;
            }
        }
    }
    int a2 = dp[my][opp];

    printf("Case #%d: %d %d\n", nC, a1, a2);
}

int main (int argc, char ** argv) {
    int t = gInt();
    for (int i = 0; i < t; ++i) {
        solve(i + 1);
    }
    quit();
}

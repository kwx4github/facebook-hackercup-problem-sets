/////////////////////////////////////////
//  Author : Akshay Jaggi             //
///////////////////////////////////////

#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<utility>
#include<queue>
#include<stack>
#include<string>
#include<cstring>
#include<map>
#include<sstream>
#define rep(i,N) for(int (i)=0;(i)<(N);(i)++)
#define repi(i,j,N) for(int (i)=(j);(i)<(N);(i)++)
#define repg(i,j,N) for((i)=(j);(i)<(N);(i)++)
#define si(i) scanf("%d",&(i))
#define sl(i) scanf("%lld",&(i))
#define pi(i) printf("%d",(i))
#define pl(i) printf("%lld",(i))
#define pin(i) printf("%d\n",(i))
#define pln(i) printf("%lld\n",(i))
#define pw    printf(" ");
#define pn    printf("\n");

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
#define sz(a) int((a).size()) 
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 

#define MOD 1000000007

int stress_free[2001][2001];
int stress_full[2001][2001];


int main()
{
	ios_base::sync_with_stdio(false);
	
	memset(stress_free,0,sizeof(stress_free));

	stress_free[1][0]=1;
	for(int i=2;i<=2000;i++)
	{
		for(int j=0;j<i;j++)
		{
			stress_free[i][j] = ((i-1)!=j ? stress_free[i-1][j] : 0) ;
			if(j-1>=0)
			{
				stress_free[i][j] += stress_free[i][j-1];
				stress_free[i][j]%=MOD;
			}
		}
	}

	stress_full[0][0]=1;	
	stress_full[1][0]=1;
	stress_full[1][1]=1;
	for(int i=2;i<=2000;i++)
	{
		for(int j=0;j<=i;j++)
		{
			if(i==j)
			{
				stress_full[i][j] = 0;
			}
			else
			{
				stress_full[i][j] = stress_full[i-1][j];
			}

			if(j-1>=0)
			{
				stress_full[i][j] += stress_full[i][j-1];
				stress_full[i][j]%=MOD;
			}
		}
	}

	int T;
	cin>>T;
	rep(t,T)
	{
		cout<<"Case #"<<t+1<<": ";
		string tmp;
		cin>>tmp;
		replace(all(tmp),'-',' ');
		stringstream ss(tmp);
		int X,Y;
		ss>>X>>Y;
		cout<<stress_free[X][Y]<<" "<<stress_full[min(X,Y)][min(X,Y)]<<endl;
	}
  return 0;
}


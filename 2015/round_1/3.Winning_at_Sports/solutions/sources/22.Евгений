import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class C {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static final int MOD = 1000000007;
	
	static int add(int a, int b) {
		int res = a + b;
		if (res >= MOD) {
			res -= MOD;
		}
		return res;
	}
	
	static final int MAX = 2000;
	static final int ans1[][] = new int[MAX + 1][MAX + 1];
	static final int ans2[][] = new int[MAX + 1][MAX + 1];
	static {
		for (int i = 1; i <= MAX; i++) {
			ans1[i][0] = 1;
			for (int j = 1; j < i; j++) {
				ans1[i][j] = i == j + 1 ? ans1[i][j - 1] : add(ans1[i][j - 1], ans1[i - 1][j]);
			}
		}
		for (int j = 0; j <= MAX; j++) {
			ans2[0][j] = 1;
		}
		for (int i = 1; i <= MAX; i++) {
			ans2[i][i] = ans2[i - 1][i];
			for (int j = i + 1; j <= MAX; j++) {
				ans2[i][j] = add(ans2[i - 1][j], ans2[i][j - 1]);
			}
		}
	}
	
	static void solve() throws Exception {
		int i = nextInt();
		int j = nextInt();
		printCase();
		out.println(ans1[i][j] + " " + ans2[j][j]);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine(), " -");
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
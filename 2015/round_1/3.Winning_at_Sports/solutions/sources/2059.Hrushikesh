#include <algorithm>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>


using namespace std;

#define FOR(i , n) for(int i = 0 ; i < n ; i++)
#define FOT(i , a , b) for(int i = a ; i < b ; i++)
int _a;
#define pb push_back
#define mp make_pair
#define s(a) (int(a.size()))
#define PRINT(a) cerr << #a << " = " << a << endl
#define ALL(a) a.begin(), a.end()


typedef long long ll;
typedef pair< ll , ll > PLL;
typedef vector< PLL > vpll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int , int> PII;
typedef vector< PII > vpii;

#define MOD 1000000007
ll stressfree[2001][2001];
ll stressfull[2001][2001];

// http://stackoverflow.com/questions/236129/split-a-string-in-c
std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {
    std::stringstream ss(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}

std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, elems);
    return elems;
}

void SolveCase() {
  string str;
  cin >> str;
  vector<string> numstrs = split(str, '-');

  int one, two;
  istringstream one_str(numstrs[0]);
  one_str >> one;
  istringstream two_str(numstrs[1]);
  two_str >> two;

  cout << stressfree[one][two] << ' ' << stressfull[two][two] << endl;
}

int main() 
{
  FOR(i, 2001) FOR(j, 2001) stressfree[i][j] = stressfull[i][j] = 0;
  FOT(i, 1, 2001) {
    stressfree[i][0] = 1;
    FOT(j, 1, i) {
      stressfree[i][j] = (stressfree[i-1][j] + stressfree[i][j-1]) % MOD;
    }
  }
  stressfull[0][0] = 1;
  FOT(j, 1, 2001) {
    FOR(i, (j+1)) {
      if (i > 0) {
        stressfull[i][j] = stressfull[i-1][j];
      }
      if (j > i) {
        stressfull[i][j] += stressfull[i][j-1];
      }
      stressfull[i][j] %= MOD;
    }
  }
  cerr << "Initialized" << endl;

  int t;
  cin >> t;
  for (int test = 1; test <= t; test++) {
    cout << "Case #" << test << ": ";
    SolveCase();
  }
  return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define F(i,n) for(int i=0;i<n;i++)
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end() 
#define trav(i,c) for(auto i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define P_B push_back
#define M_P make_pair
#define fill(l,v) memset(l,v,sizeof(l))
#define debug(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)
#define LL long long 

template<class T>string ToString(T t){stringstream s;s<<t;return s.str();}
template<class T>void ToOther(T& t,string a){stringstream s(a);s>>t;}

// VALAR MORGHULIS

using namespace std;

LL states[2005][2005],M,N;
LL MOD = (1000000000+7);

LL solve1( int x , int y )
{
	if( (x+y) == (M+N) )
	{
		return ((x==M)&&(y==N));
	}
	if( states[x][y] != -1 )
	{
		return states[x][y];
	}
	int possible1 = x+1;
	int possible2 = y+1;
	LL res = 0;
	if( possible1 > y && possible1<=M )
	{
		res += solve1(possible1,y);
		if( res >= MOD )
		{
			res = res % MOD;
		}
	}
	if( possible2 < x && possible2<=N )
	{
		res += solve1(x,possible2);
		if( res >= MOD )
		{
			res = res % MOD;
		}
	}
	if( res >= MOD )
	{
		res = res % MOD;
	}
	return states[x][y] = res;
}

LL solve2( int x , int y )
{
	if( (x+y) == (M+N) )
	{
		return ((x==M)&&(y==N));
	}
	if( states[x][y] != -1 )
	{
		return states[x][y];
	}
	int possible1 = x+1;
	int possible2 = y+1;
	LL res = 0;
	if( y == N )
	{
		if( possible1<=M )
		{
			res += solve2( possible1 , y );
			if( res>=MOD )
			{
				res = res % MOD;
			}
		}
	}
	else
	{
		if( possible1<=y && possible1<=M )
		{
			res += solve2( possible1 , y );
			if( res>=MOD )
			{
				res = res % MOD;
			}
		}
		if( possible2>=x && possible2<=N )
		{
			res += solve2( x , possible2 );
			if( res>=MOD )
			{
				res = res % MOD;
			}
		}
	}
	if( res >= MOD )
	{
		res = res % MOD;
	}
	return states[x][y] = res;
}

int main()
{
	int cases,k=1;
	scanf( "%d",&cases );
	while( cases-- )
	{
		string GAME;
		cin >> GAME;
		int pos;
		for( int i=0;i<sz(GAME);i++ )
		{
			if( GAME[i] == '-' )
			{
				pos = i;
				break;
			}
		}
		ToOther(M,GAME.substr(0,pos));
		ToOther(N,GAME.substr(pos+1,sz(GAME)-pos+1));
		fill( states , -1 );
		LL res1 = solve1( 1 , 0 );
		fill( states , -1 );
		LL res2 = solve2( 0 , 1 );
		printf( "Case #%d: %lld %lld\n",k,res1,res2 );
		k++;
	}
	return 0;
}
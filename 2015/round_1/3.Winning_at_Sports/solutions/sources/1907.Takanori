#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <memory>
#include <cstring>
#include <cassert>
#include <numeric>
#include <sstream>
#include <complex>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cctype>
#include <unordered_map>
#include <unordered_set>
using namespace std;

#define REP2(i, m, n) for (int i = (int)(m); i < (int)(n); i++)
#define REP(i, n) REP2(i, 0, n)
#define ALL(S) (S).begin(), (S).end()

template <typename T, typename E>
ostream &operator<<(std::ostream &os, const std::pair<T, E> &p){
  return os << "(" << p.first << ", " << p.second << ")";
}

typedef long long ll;

const ll mod =  1000 * 1000 * 1000 + 7;

const int max_p = 2010;
ll memo1[max_p][max_p];
ll memo2[max_p][max_p];

ll rec1(int A, int B){
  if (A == 0) return 0;
  if (A == 1 && B == 0) return 1;
  if (memo1[A][B] != -1) return memo1[A][B];

  ll &res = memo1[A][B] = 0;

  if (B > 0) res += rec1(A, B - 1);
  if (A > B + 1) res += rec1(A - 1, B);
  res %= mod;
  return res;
}

ll rec2(int A, int B){
  if (A == 0 && B == 0) return 1;
  if (memo2[A][B] != -1) return memo2[A][B];
  ll &res = memo2[A][B] = 0;

  if (B > A) res += rec2(A, B - 1);
  if (A > 0) res += rec2(A - 1, B);
  res %= mod;
  return res;
}

void solve(){
  memset(memo1, -1, sizeof(memo1));
  memset(memo2, -1, sizeof(memo2));

  char c;
  int A, B;
  cin >> A >> c >> B;
  cout << rec1(A, B) << " " << rec2(A, B) << endl;
}

int main(){
  ios::sync_with_stdio(false);
  int T;
  cin >> T;
  REP(t, T){
    cout << "Case #" << t + 1 << ": "; solve();
  }
  return 0;
}

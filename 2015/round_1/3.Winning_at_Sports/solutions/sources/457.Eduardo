#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

#define MOD 1000000007
#define N 2000

int n, m, caso, C;

int dp_free[N + 5][N + 5], dp_ful[N + 5][N + 5];

char s[10];

int stress_free(int my, int opposite){
	if(my == 1 && opposite == 0)return 1;

	int &ret = dp_free[my][opposite];

	if(ret > -1)return ret;

	int ans = 0;

	if(my > 0 && my - 1 > opposite)ans = stress_free(my - 1, opposite);

	if(opposite > 0 && my > opposite - 1)ans = (ans + stress_free(my, opposite - 1)) % MOD;

	return ret = ans;
}

int stress_ful(int my, int opposite){

	if(my == 0 && opposite == 0)return 1;

	int &ret = dp_ful[my][opposite];

	if(ret > -1)return ret;

	int ans = 0;

	if(my > 0 && my - 1 <= opposite)ans = stress_ful(my - 1, opposite);

	if(opposite > 0 && my <= opposite - 1)ans = (ans + stress_ful(my, opposite - 1)) % MOD;

	return ret = ans;
}

void doCase(){
	scanf("%d%1s%d", &n, s, &m);

	int s_free = stress_free(n, m);
	int s_ful = stress_ful(m, m);

	printf("Case #%d: %d %d\n", ++caso, s_free, s_ful);
}

int main(){
	caso = 0;
	
	scanf("%d", &C);

	memset(dp_free, -1, sizeof(dp_free));
	memset(dp_ful, -1, sizeof(dp_ful));

	for(int i = 0; i < C; ++i)doCase();
}

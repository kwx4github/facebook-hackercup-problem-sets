#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>  
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end()) 
#define cpresent(s,x) (find(all(s),x) != s.end()) 
using namespace std;
 
typedef unsigned long long int ull;
typedef long long int ll;

ll dp1[2005][2005],m=1e9+7,dp2[2005][2005];

void stressfree()
{
 rep(i,1,2001)
 {
   dp1[i][0]=1;
   
 }
 rep(i,2,2001)
 {
 	rep(j,1,i-1)
 	{ if(j==i-1)
 	  {
 	  	rep(k,1,i-1)
 	  	dp1[i][j]=(dp1[i][j]+dp1[k][k-1])%m;
	  }
 	  dp1[i][j]=(dp1[i-1][j]+dp1[i][j-1])%m;
	}
 }	
}

void stressful()
{
  rep(i,1,2001)
 {
   dp2[i][0]=1;
   
 }
 dp2[1][1]=1;
 rep(i,2,2001)
 {
 	rep(j,1,i)
 	{
 		if(i==j)
 		dp2[i][j]=dp2[i][j-1];
 		else
 		{
 			dp2[i][j]=(dp2[i-1][j]+dp2[i][j-1])%m;
		}
	}
 }	
}
int main()
{ios_base::sync_with_stdio(false);
freopen("card_game.txt","r",stdin);
	freopen("output.txt","w",stdout);
int t,t1=0;
stressfree();
stressful();
gl(t);
while(t--)
{t1++;
 string s;
 int n1=0,n2=0,k=0;
 gl(s);
 rep(i,0,s.length()-1)
 {if(s[i]=='-')
  break;
  k++;
 }
 rep(i,0,k-1)
 n1=n1*10+s[i]-'0';	
 rep(i,k+1,s.length()-1)
 n2=n2*10+s[i]-'0';
 ol("Case #");ol(t1);ol(": ");
 ol(dp1[n1][n2]);os;ol(dp2[n2][n2]);on;
}
return 0;
}

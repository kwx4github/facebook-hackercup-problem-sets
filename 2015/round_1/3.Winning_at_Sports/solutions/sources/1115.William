import java.util.*;

class C {
	static int[][] full_dp = new int[2001][2001];
	static int[][] free_dp = new int[2001][2001];
	public static void main (String [] args) {
		Scanner sc = new Scanner(System.in);
		for (int i = 0; i <= 2000; i++) {
			Arrays.fill(full_dp[i], -1);
			Arrays.fill(free_dp[i], -1);
		}
		free_dp[1][0] = 1;
		full_dp[0][1] = 1;
		fill(2000, 2000, true, full_dp);
		fill(2000, 2000, false, free_dp);
		int numTests = sc.nextInt();
		for (int t = 1; t <= numTests; t++) {
			String s = sc.next();
			int hi;
			for (hi = 0; hi < s.length(); hi++) { // hyphen index
				if (s.charAt(hi) == '-')
					break;
			}
			int a = Integer.parseInt(s.substring(0, hi));
			int b = Integer.parseInt(s.substring(hi + 1));
			int fullAns = (b == 0) ? 1 : full_dp[b-1][b];
			System.out.printf("Case #%d: %d %d\n", t, free_dp[a][b], fullAns);
		}
	}
	static int fill(int x, int y, boolean yesStressful, int[][] dp) {
		if (x < 0 || y < 0)
			return 0;
		if (dp[x][y] != -1)
			return dp[x][y];
		int count = 0;
		if (yesStressful) {
			if (x <= y-1) {
				count += fill(x, y-1, yesStressful, dp);
			}
			count += fill(x-1, y, yesStressful, dp);
		} else { // stress-free
			if (x-1 > y) {
				count += fill(x-1, y, yesStressful, dp);
			}
			count += fill(x, y-1, yesStressful, dp);
		}
		count = count % 1000000007;
		dp[x][y] = count;
		return count;
	}
}
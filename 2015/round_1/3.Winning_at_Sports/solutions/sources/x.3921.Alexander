#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
#include <cctype>
#include <map>
#include <climits>
#include <set>
#include <cmath>
#include <utility>
#define MAXN 2010
#define MOD 1000000007
using namespace std;

int relaxdp[MAXN][MAXN], stressdp[MAXN][MAXN];
//number of ways to keep lead from score i-j

int main(){
  ifstream fin("winning_at_sports.txt");
  ofstream fout("winning_at_sports_output.txt");

  int T;
  fin >> T;

  for(int t=0; t<T; t++){
    int win, lose;
    string THIS_IS_STUPID_INPUT_FORMAT;
    fin >> THIS_IS_STUPID_INPUT_FORMAT;
    stringstream ss(THIS_IS_STUPID_INPUT_FORMAT);
    ss >> win;
    ss.ignore();
    ss >> lose;
    //fin >> win >> lose;

    for(int i=lose+1; i<=win; i++){
      //no more points for loser
      relaxdp[i][lose]=1;
    }
    for(int i=0; i<=lose; i++){
      //no more points for winner
      relaxdp[win][i]=1;
    }

    for(int i=win-1; i>=0; i--){
      for(int j=lose-1; j>=0; j--){
        if(i>j){
          //valid position; can go to (i+1)-j or i-(j+1) [the latter might be i=j+1 -> 0 ways]
          relaxdp[i][j]=relaxdp[i+1][j]%MOD+relaxdp[i][j+1]%MOD;
          relaxdp[i][j]%=MOD;
        }
      }
    }

    //ok same method works for stressful because it's equivalent to the second guy never losing the lead until first guy wins many points at end

    for(int i=0; i<=lose; i++){
      //now winner wins out
      stressdp[i][lose]=1;
    }

    for(int i=lose-1; i>=0; i--){
      for(int j=lose-1; j>=i; j--){
        //valid position; can go to (i+1)-j (which is maybe 0) or i-(j+1)
        stressdp[i][j]=stressdp[i+1][j]%MOD+stressdp[i][j+1]%MOD;
        stressdp[i][j]%=MOD;
      }
    }

    fout << "Case #" << t+1 << ": " << relaxdp[1][0] << " " << stressdp[0][1] << endl;
  }
}

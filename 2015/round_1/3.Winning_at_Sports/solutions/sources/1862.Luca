from math import factorial
import functools

m = [[0 for i in range(0,2001)] for j in range(0,2001)]

def main():
    testcases = int(input())
    for caseNr in range(1, testcases+1):
        a,b = map(int, input().split('-'))
        #board = input() # legge una riga e crea una lista
        #board = [input() for i in range(4)] #legge 4 righe e crea una lista di liste
        #pattern = [list(map(int, input().split())) for i in range(N)] #
        print("Case #%i: %i %i" % (caseNr, dyn(a,b), catalanNumber(b)%1000000007))

def memoize(func):
    cache = {}
    def memoized(key):
        # Returned, new, memoized version of decorated function
        if key not in cache:
            cache[key] = func(key)
        return cache[key]
    return functools.update_wrapper(memoized, func)
 
@memoize
def fact(n):
  return factorial(n)
 
def catalanNumber(n):
  return fact(2*n) // fact(n+1) // fact(n)

def dyn(a,b):
  return m[a][b]
  
if __name__ == "__main__":
  for i in range(1,2001):
    m[i][0] = 1
  for i in range(2,2001):
    for j in range(1,i):
      m[i][j] = (m[i-1][j] + m[i][j-1])%1000000007
  main()
    
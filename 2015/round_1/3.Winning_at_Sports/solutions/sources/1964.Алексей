#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pll;
#define mp make_pair

const ll MOD = (ll)1e9 + 7;
const int N = 4040;
ll dp[N][N];

ll sum(ll x, ll y)
{
	x = (x + y) % MOD;
	return (x + MOD) % MOD;
}
ll mult(ll x, ll y)
{
	return (x * y) % MOD;
}
ll bin_pow(ll x, ll pow)
{
	if (pow == 0) return 1;
	if (pow == 1) return x % MOD;
	if (pow == 2) return (x * x) % MOD;
	if (pow & 1) return mult(x, bin_pow(x, pow - 1));
	return bin_pow(bin_pow(x, pow / 2), 2);
}
ll rev(ll x)
{
	return bin_pow(x % MOD, MOD - 2);
}

ll fact(ll n)
{
	ll res = 1;
	for (ll i = 1; i <= n; i++)
		res = mult(res, i);
	return res;
}

ll getSecond(ll n)
{
	ll res = fact(2 * n);
	res = mult(res, rev( bin_pow(fact(n), 2) ));
	res = mult(res, rev(n + 1));
	return res;
}

void clearDP()
{
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			dp[i][j] = 0LL;
	return;
}

ll getFirst(int x, int y)
{
	int n = x + y;
	clearDP();
	dp[0][0] = 1LL;
	for (int i = 0; i < n; i++)
		for (int bal = 0; bal <= i; bal++)
		{
			if (dp[i][bal] == 0) continue;
			int nx = x - (i + bal) / 2;
			int ny = y - (i - bal) / 2;
			if (nx > 0)
				dp[i + 1][bal + 1] = sum(dp[i + 1][bal + 1], dp[i][bal]);
			if (ny > 0 && bal > 0)
				dp[i + 1][bal - 1] = sum(dp[i + 1][bal - 1], dp[i][bal]);
		}
	return dp[n][x - y];
}

pll solve()
{
	int x, y;
	char ttt;
	scanf("%d%c%d", &x, &ttt, &y);
	return mp( getFirst(x - 1, y), getSecond((ll)y) );
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for (int i = 1; i <= t; i++)
	{
		pll ans = solve();
		printf("Case #%d: %lld %lld\n", i, ans.first, ans.second);
	}


	return 0;
}

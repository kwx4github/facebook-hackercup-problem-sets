#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <algorithm>

const int MAX_SCORE = 2000;
const int MAX_PALYING_STEPS = 4000;
const int MODULO = 1000000007;

long long WinningWaysStressFree[MAX_SCORE + 1][MAX_SCORE + 1];
long long WinningWaysStressFull[MAX_SCORE + 1][MAX_SCORE + 1];

void ComputeStressFree()
{
	int	nWinnerValue = 0;
	int	nLoserValue = 0;

	WinningWaysStressFree[0][0] = 0;

	for (int i = 1; i <= MAX_SCORE; ++i)
		WinningWaysStressFree[i][0] = 1;


	for (int iPlayingStep = 3; iPlayingStep < MAX_PALYING_STEPS; ++iPlayingStep)
	{
		nWinnerValue = std::min(iPlayingStep, MAX_SCORE);
		nLoserValue = iPlayingStep - nWinnerValue;

		while (nWinnerValue > nLoserValue)
		{
			if (nLoserValue != 0)
			{
				if ((nWinnerValue - nLoserValue) == 1)
					WinningWaysStressFree[nWinnerValue][nLoserValue] = WinningWaysStressFree[nWinnerValue][nLoserValue - 1] % MODULO;
				else
					WinningWaysStressFree[nWinnerValue][nLoserValue] = (WinningWaysStressFree[nWinnerValue][nLoserValue - 1] + WinningWaysStressFree[nWinnerValue - 1][nLoserValue]) % MODULO;
			}
			++nLoserValue;
			--nWinnerValue;
		}
	}

	return;
}

void ComputeStressFull()
{
	int	nWinnerValue = 0;
	int	nLoserValue = 0;

	for (int i = 0; i <= MAX_SCORE; ++i)
		WinningWaysStressFull[i][0] = 1;


	for (int iPlayingStep = 2; iPlayingStep < MAX_PALYING_STEPS; ++iPlayingStep)
	{
		nWinnerValue = std::min(iPlayingStep, MAX_SCORE);
		nLoserValue = iPlayingStep - nWinnerValue;

		while (nWinnerValue >= nLoserValue)
		{
			if (nLoserValue != 0)
			{
				if (nWinnerValue == nLoserValue)
					WinningWaysStressFull[nWinnerValue][nLoserValue] = WinningWaysStressFull[nWinnerValue][nLoserValue - 1] % MODULO;
				else
					WinningWaysStressFull[nWinnerValue][nLoserValue] = (WinningWaysStressFull[nWinnerValue][nLoserValue - 1] + WinningWaysStressFull[nWinnerValue - 1][nLoserValue]) % MODULO;
			}

			++nLoserValue;
			--nWinnerValue;
		}
	}
	return;	
}

int main()
{
	std::ifstream	InFile("winning_at_sports.txt");
	std::ofstream	OutFile("WinningAtSports_output.txt", std::ios_base::ate || std::ios_base::out);
	std::string		strInput;
	int				iCase = 0;
	int				T;
	int				nPlayerA;
	int				nPlayerB;
	
	ComputeStressFree();
	ComputeStressFull();
	
	InFile >> T;

	while (T--)
	{
		InFile >> strInput;

		int			iIndx = strInput.find('-');
		std::string	strPlayerA;
		
		strPlayerA = strInput.substr(0, iIndx);
		nPlayerA = atoi(strInput.c_str());
		nPlayerB = atoi(strInput.c_str() + iIndx + 1);

		OutFile << "Case #" << ++iCase << ": " << WinningWaysStressFree[nPlayerA][nPlayerB] << " " << WinningWaysStressFull[nPlayerB][nPlayerB] << "\n";
	}	

	return 0;
}
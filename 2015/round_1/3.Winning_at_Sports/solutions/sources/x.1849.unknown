
import MyCodes_JAVA.MyMath.MyMath;

import java.io.*;
import java.util.*;

/**
 * Created by shamir0xe on 1/5/2015 AD.
 */

public class Solution {


    public static void main(String[] args) {
        MyInput in;
        try {
            in = new MyInput(new FileInputStream(new File("input.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }
        PrintWriter out;
        try {
            out = new PrintWriter(new FileOutputStream(new File("output.txt")));
        }
        catch (IOException e) {
            throw new UnknownError();
        }

//        MyInput in = new MyInput(System.in);
//        PrintWriter out = new PrintWriter(System.out);

        int MOD = 1000 * 1000 * 1000 + 7;

        int test = in.nextInt();
        for (int testCase = 0; testCase < test; testCase++) {
            String line = in.nextLine();
            String[] scores = line.split("-");
            int a = Integer.parseInt(scores[0]);
            int b = Integer.parseInt(scores[1]);

            int maxn = a + 11;
            int free[][] = new int[maxn + 1][maxn + 1];
            int full[][] = new int[maxn + 1][maxn + 1];
            free[1][0] = 1;
            full[0][1] = 1;
            for (int i = 0; i < maxn; i++) {
                for (int j = 0; j < maxn; j++) {
                    free[i + 1][j] = MyMath.add(free[i][j], free[i + 1][j], MOD);
                    if (i > j + 1) {
                        free[i][j + 1] = MyMath.add(free[i][j], free[i][j + 1], MOD);
                    }

                    full[i][j + 1] = MyMath.add(full[i][j], full[i][j + 1], MOD);
                    if (i + 1 <= j) {
                        full[i + 1][j] = MyMath.add(full[i][j], full[i + 1][j], MOD);
                    }
                }
            }

            out.println("Case #" + (testCase + 1) + ": " + free[a][b] + " " + full[b][b]);
            out.flush();
        }

        out.flush();
    }

}

class MyInput {
    private BufferedReader br;
    private StringTokenizer st;

    MyInput (InputStream inputStream) {
        br = new BufferedReader(new InputStreamReader(inputStream));
        st = null;
    }

    public String next() {
        if (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                while (line == null || line.equals("")) {
                    throw new UnknownError();
                }
                st = new StringTokenizer(line);
            } catch (IOException e) {
                throw new UnknownError();
            }
        }
        return st.nextToken();
    }

    public String nextLine() {
        try {
            return br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public void readEmptyLine() {
        try {
            br.readLine();
        }
        catch (IOException e) {
            throw new UnknownError();
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

}


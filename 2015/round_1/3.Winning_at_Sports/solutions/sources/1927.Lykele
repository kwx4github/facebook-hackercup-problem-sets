#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <stdio.h>
#include <locale>
#include <codecvt>
#include <sstream>

using namespace std;

/*



int stressfree_recursive(int A, int B, int &Amax, int &Bmax)
{
	//impossible score.
	if (A <= B)
		return 0;

	if (A == Amax && B == Bmax)
		return 1;

	int cnt = 0;

	if (A < Amax)
		cnt += stressfree_recursive(A + 1, B, Amax, Bmax);
	if (B < Bmax)
		cnt += stressfree_recursive(A , B + 1, Amax, Bmax);
	
	return cnt;
}
*/

unsigned long long tot_trees;
int depth;

class treenode_Prob{
public:
	std::vector< treenode_Prob* > tn;
	unsigned int nrs;
	

	treenode_Prob() {
	}

	void make_tree_of_depth(int &maxA, int &maxB)
	{
		if ( (this->nrs & 0xFFFF) + (this->nrs>>16) == depth)  {
			tot_trees++;
			return;
		}
		if ((this->nrs & 0xFFFF) == maxB)   {
			tot_trees++;
			return;
		}


		if ((nrs>>16) + 1 <= maxA)
		{
			treenode_Prob * tmp = new treenode_Prob;
			tmp->nrs = this->nrs + (1 << 16);
			tn.push_back(tmp);
		}
		if ((nrs&0xFFFF) + 1 <= maxB && (nrs>>16) > (nrs&0xFFFF) + 1)
		{
			treenode_Prob * tmp = new treenode_Prob;
			tmp->nrs = this->nrs + 1;
			tn.push_back(tmp);
		}

		for (int i = 0; i < this->tn.size(); i++)
			tn[i]->make_tree_of_depth(maxA, maxB);
	}
};



void main(void)
{
	ifstream fin("winning_at_sports.txt");

	ofstream fout("winning_at_sports_out.txt", std::ofstream::binary);


	int Nprob;
	fin >> Nprob;

	for (int p = 0; p < Nprob; p++)
	{
		tot_trees = 0;

		std::string tmp;
		fin >> tmp;

		int a;
		int b;

		size_t n = tmp.find('-');
		if (n != string::npos)
		{
			a = atoi(tmp.substr(0, n ).c_str());
			b = atoi(tmp.substr(n+1, tmp.size()).c_str());
		}

		//int cnt = stressfree_recursive(1, 0, a, b);

		//treenode_Prob root;
		//root.nrs = 1<<16;

		//depth = a + b;
		//root.make_tree_of_depth(a, b);

		//a = 4;
		//b = 2;

		vector< vector<int> > table(b+1);

		for (int i = 0; i < b+1; i++)
		{
			vector<int> tmp(a+1);

			if (i==0)
			for (int j = 0; j < a + 1; j++)
				tmp[j] = 1;

			table[i] = tmp;
		}

		



		for (int A = 1; A <= a; A++)
		{
			for (int B = 1; B <= min(A - 1, b); B++)
				table[B][A] = (table[B - 1][A] + table[B][A - 1])%(1000000007);

		}


		


		vector< vector<int> > table_stressfull(b + 1);

		for (int i = 0; i < b + 1; i++)
		{
			vector<int> tmp(a + 1);

			tmp[0] = 1;			

			table_stressfull[i] = tmp;
		}

		/*int table_stressfull[11][11];

		for (int i = 0; i < 11; i++)
		{
			for (int j = 0; j < 11; j++)
				table_stressfull[i][j] = 0;

			table_stressfull[i][0] = 1;
		}*/

		for (int B = 1; B <= b; B++)
		{
			for (int A = 1; A <= min(B , a); A++)
				table_stressfull[B][A] = (table_stressfull[B - 1][A] + table_stressfull[B][A - 1]) % (1000000007);

		}


		std::cout << "Case #" << p + 1 << ": " << table[b][a] << " " << table_stressfull[b][b] << endl;
		fout << "Case #" << p + 1 << ": " << table[b][a] << " " << table_stressfull[b][b] << endl;



		int aap = 100;

	}
	fout.close();

	return;
}
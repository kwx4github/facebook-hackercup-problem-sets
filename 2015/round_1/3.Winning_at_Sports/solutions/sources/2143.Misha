#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:1000000000")
#include <iostream>
#include <algorithm>
#include <memory.h>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <complex>
#include <string>
#include <bitset>
#include <vector>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef complex < double > cd;

const bool db = false;

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define sd second
#define fs first

#define inf 1000000007
#define nmax 1000010
#define mmax 1000010
#define eps 1e-9

int dp[2][2015][2015], ts;
int l, r;

int main() {
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("gcd.in", "r", stdin); freopen("gcd.out", "w", stdout);
	scanf("%d\n", &ts);
	dp[0][0][0] = dp[1][0][0] = 1;
	for(int sum = 1; sum <= 2000 + 2000; ++sum) {
		for(int F = 0; F <= 2000; ++F) {
			int S = sum - F;
			if(S >= 0 && S <= 2000) {
				if(F > S) {
					dp[0][F][S] = ((S > 0 ? dp[0][F][S - 1] : 0) + (F - 1 >= S ? dp[0][F - 1][S] : 0)) % inf;
					dp[1][F][S] = dp[1][F - 1][S];
				} else {
					dp[1][F][S] = (F > 0 ? dp[1][F - 1][S] : 0);
					if(S - 1 >= F) {
						dp[1][F][S] = (dp[1][F][S - 1] + dp[1][F][S]) % inf;
					}
				}
			}
		}
	}
	for(int it = 1; it <= ts; ++it) {
		scanf("%d-%d\n", &l, &r);
		printf("Case #%d: %d %d\n", it, dp[0][l][r], dp[1][l][r]);
	}
	getchar(); getchar();
	return 0;
}

#include <iostream> 
#include <cstdio> 
#include <fstream>
#include <functional>
#include <set> 
#include <map> 
#include <vector> 
#include <queue> 
#include <stack> 
#include <cmath> 
#include <algorithm> 
#include <cstring> 
#include <bitset> 
#include <ctime> 
#include <sstream>
#include <stack> 
#include <cassert> 
#include <list> 
#include <deque>
//#include <unordered_set> 
using namespace std;
typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

#define mp make_pair 
#define pb push_back
#define y1 botva
#define all(s) s.begin(), s.end() 
void solve();

#define NAME "changemeplease"
int main() {
#ifdef YA 
	//cerr << NAME << endl;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
	clock_t start = clock();
#else 
	freopen("input.txt", "r", stdin); 
	freopen("output.txt", "w", stdout); 
#endif 
	//ios_base::sync_with_stdio(false);
	//cout << fixed;
	//cout.precision(10);
	int t = 1;
	cin >> t;  
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef YA 
	//cout << "\n\n\nTime:" << ((clock() - start) / 1.0 / CLOCKS_PER_SEC);
#endif 
	return 0;
}

const int mod = 1000000000 + 7;

int solve1(int x, int y) {
	vector < vector <int> > dp;
	dp.resize(x + 1, vector <int>(y + 1));
	dp[0][0] = 1;

	for (int sum = 0; sum <= x + y; ++sum) {
		int t[2];
		for (t[0] = 0; t[0] <= x && t[0] <= sum; ++t[0]) {
			t[1] = sum - t[0];

			if (t[1] > y || dp[t[0]][t[1]] == 0) {
				continue;
			}

			if (t[0] + 1 <= x) {
				dp[t[0] + 1][t[1]] = (dp[t[0] + 1][t[1]] + dp[t[0]][t[1]]) % mod;
			}
			if (t[1] + 1 <= y && t[1] + 1 < t[0]) {
				dp[t[0]][t[1] + 1] = (dp[t[0]][t[1] + 1] + dp[t[0]][t[1]]) % mod;
			}

		}
	}

	return dp[x][y];
}


int solve2(int x, int y) {
	vector < vector <int> > dp;
	dp.resize(x + 1, vector <int>(y + 1));
	dp[0][0] = 1;

	for (int sum = 0; sum <= x + y; ++sum) {
		int t[2];
		for (t[0] = 0; t[0] <= x && t[0] <= sum; ++t[0]) {
			t[1] = sum - t[0];

			if (t[1] > y || dp[t[0]][t[1]] == 0) {
				continue;
			}

			if (t[0] + 1 <= x && (t[1] == y || t[1] < y && t[1] >= t[0] + 1)) {
				dp[t[0] + 1][t[1]] = (dp[t[0] + 1][t[1]] + dp[t[0]][t[1]]) % mod;
			}
			if (t[1] + 1 <= y) {
				dp[t[0]][t[1] + 1] = (dp[t[0]][t[1] + 1] + dp[t[0]][t[1]]) % mod;
			}

		}
	}

	return dp[x][y];
}

void solve() {
	int x, y;
	scanf("%d-%d", &x, &y);
	cout << solve1(x, y) << " " << solve2(x, y) << "\n";
}
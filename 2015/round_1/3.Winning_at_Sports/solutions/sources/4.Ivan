#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 2020;
const int mod = 1e9 + 7;

int add(int a, int b) {
  return a+b >= mod ? a+b-mod : a+b;
}

int mul(int a, int b) {
  return (llint(a)*b)%mod;
}

int f[MAXN][MAXN];

int main(void) {
  int TC;
  scanf("%d", &TC);
  for (int tp = 1; tp <= TC; ++tp) {
    int A, B;
    scanf("%d-%d", &A, &B);
    assert(A > B);

    REP(i, A+1) REP(j, B+1) f[i][j] = 0;
    f[0][0] = 1;
    
    REP(i, A+1) REP(j, B+1) {
      f[i+1][j] = add(f[i+1][j], f[i][j]);
      if (i > j+1) f[i][j+1] = add(f[i][j+1], f[i][j]);
    }

    int ans1 = f[A][B];
    

    REP(i, A+1) REP(j, B+1) f[i][j] = 0;
    f[0][0] = 1;
    
    REP(i, A+1) REP(j, B+1) {
      if (i+1 <= j) f[i+1][j] = add(f[i+1][j], f[i][j]);
      if (i <= j+1) f[i][j+1] = add(f[i][j+1], f[i][j]);
    }

    int ans2 = f[B][B];

    printf("Case #%d: ", tp);
    printf("%d %d\n", ans1, ans2);
  }
  return 0;
}

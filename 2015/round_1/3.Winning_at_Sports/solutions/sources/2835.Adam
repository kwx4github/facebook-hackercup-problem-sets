import java.io.*;
import java.awt.*;
import java.awt.geom.*;
import java.util.*;
import java.math.*;
import java.text.*;

// HINTS:
// to sort all possible values, use TreeMap

class Thing
{
	//CONSTANTS - copy/paste template variable
//	public static final int template = 1;
	
	//GLOBAL VARIABLES
	public static Scanner in;
	public static final int MAX_SCORE = 2004;
	public static BigInteger[][] possibilities = new BigInteger[MAX_SCORE][MAX_SCORE];
	
	public static void main(String[] args) throws Exception
	{
		in = new Scanner(System.in);
		int nData = in.nextInt();
		in.nextLine();
		
		//precalculate possibilities
		possibilities[0][0] = new BigInteger("1");
		possibilities[1][0] = new BigInteger("1");
		possibilities[1][1] = new BigInteger("2");
		
		for (int i = 2; i < MAX_SCORE; i++)
		{
			possibilities[i][0] = new BigInteger("1");
			
			for (int j = 1; j <= i; j++)
			{
				possibilities[i][j] = possibilities[i][j-1].add((j == i) ? possibilities[i-1][j-1] : possibilities[i-1][j]);
			}
		}
		
		//solve each case
		for (int asdf = 0; asdf < nData; asdf++)
		{
			//calculate the number of possibilties
			String answer = solve();
			System.out.println("Case #" + (asdf + 1) + ": " + answer);
		}
	}
	
	//------------------------ACTUAL ALGORITHM------------------------
	public static String solve()
	{
		String[] scores = in.nextLine().split("-");
		int me = Integer.parseInt(scores[0]);
		int them = Integer.parseInt(scores[1]);
		
		//find stress-free
		BigInteger free = get(me-2, (me-them == 1) ? them-1 : them);
		free = free.mod(new BigInteger("1000000007"));
		
		//stressful-- AAGGGHHH THIS IS SO STRESSFUL!!!!!!
		BigInteger ful = new BigInteger("1");
		
		for (int i = 1; i < them; i++)
		{
			ful = ful.add(get(them-2, i));
//			System.out.println("get(" + them + ", " + i + ")=" + get(them, i));
		}
		ful = ful.mod(new BigInteger("1000000007"));
		
		return "" + free + " " + ful;
	}
	
	public static BigInteger get(int i, int j)
	{
		if (i <= 1)
		{
			return new BigInteger("1");
		}
		else if (j - i == 1)
		{
			return possibilities[i][j-1];
		}
		else if (j > i)
		{
			return new BigInteger("1");
		}
		
		if (possibilities[i][j] == null)
		{
			System.out.println("ERROR i=" + i + " j=" + j);
		}
		
		return possibilities[i][j];
	}
}












package es.hackerCup;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Sports {

	private static Map<Score, BigInteger> scoresValues = new HashMap<>();

	public static void main(final String[] args) throws Exception {
		System.setOut(new PrintStream(new FileOutputStream("sports/sports_out.txt")));

		try (Scanner in = new Scanner(new FileInputStream("sports/winning_at_sports.txt"))) {
			int numCases = in.nextInt();
			List<Score> cases = new ArrayList<Score>();
			in.nextLine();
			for (int i = 1; i <= numCases; i++) {
				String result = in.nextLine();
				String[] scorages = result.split("-");
				cases.add(new Score(Integer.parseInt(scorages[0]), Integer.parseInt(scorages[1])));
			}

			for (int i = 1; i <= cases.size(); i++) {
				System.out.print(String.format("Case #%d: ", i));
				Score sportCase = cases.get(i - 1);
				scoresValues.clear();
				sportCase.setFree(getStressFree(new Score(1, 0), sportCase.getFirst(), sportCase.getSecond()).mod(BigInteger.valueOf(1000000007)).intValue());
				scoresValues.clear();
				sportCase.setFull(getStressFull(new Score(0, 1), sportCase.getFirst(), sportCase.getSecond()).mod(BigInteger.valueOf(1000000007)).intValue());
				System.out.println(String.format("%d %d", sportCase.getFree(), sportCase.getFull()));
			}
		}

	}

	public static BigInteger getStressFree(final Score score, final int iF, final int iS) {
		BigInteger num = scoresValues.get(score);
		if (num != null) {
			return num;
		}

		if (score.getFirst() <= score.getSecond()) {
			return BigInteger.ZERO;
		}

		if ((score.getFirst() == iF) || (score.getSecond() == iS)) {
			return BigInteger.ONE;
		}

		BigInteger f = BigInteger.ZERO;
		if (score.getFirst() < iF) {
			f = getStressFree(new Score(score.getFirst() + 1, score.getSecond()), iF, iS);
		}
		BigInteger s = BigInteger.ZERO;
		if (score.getSecond() < iS) {
			s = getStressFree(new Score(score.getFirst(), score.getSecond() + 1), iF, iS);
		}

		BigInteger sum = f.add(s);
		scoresValues.put(score, sum);

		return sum;
	}

	public static BigInteger getStressFull(final Score score, final int iF, final int iS) {
		BigInteger num = scoresValues.get(score);
		if (num != null) {
			return num;
		}

		if ((score.getFirst() == iF) || (score.getSecond() == iS)) {
			return BigInteger.ONE;
		}

		if ((score.getFirst() > score.getSecond()) && (score.getSecond() < iS)) {
			return BigInteger.ZERO;
		}
		BigInteger f = BigInteger.ZERO;
		if (score.getFirst() < iF) {
			f = getStressFull(new Score(score.getFirst() + 1, score.getSecond()), iF, iS);
		}
		BigInteger s = BigInteger.ZERO;
		if (score.getSecond() < iS) {
			s = getStressFull(new Score(score.getFirst(), score.getSecond() + 1), iF, iS);
		}

		BigInteger sum = f.add(s);
		scoresValues.put(score, sum);

		return sum;
	}

	public static class Score {
		private final int first;
		private final int second;

		private int full;
		private int free;

		public Score(final int first, final int second) {
			this.first = first;
			this.second = second;
		}

		public int getFirst() {
			return first;
		}

		public int getSecond() {
			return second;
		}

		@Override
		public int hashCode() {
			return new String(first + " " + second).hashCode();
		}

		@Override
		public boolean equals(final Object other) {
			if (other instanceof Score) {
				Score s = (Score) other;
				return (first == s.getFirst()) && (second == s.getSecond());
			}
			return false;
		}

		public int getFull() {
			return full;
		}

		public void setFull(final int full) {
			this.full = full;
		}

		public int getFree() {
			return free;
		}

		public void setFree(final int free) {
			this.free = free;
		}
	}
}

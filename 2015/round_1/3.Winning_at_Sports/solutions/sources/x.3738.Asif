#include<cstdio>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<sstream>
using namespace std;

#define MAX 2005
#define MOD 1000000007

int score[ MAX ][ MAX ][ 2 ];

int test_case;
int A, B;

int dp(int scoreA, int scoreB, int isFree) {
	int &ret = score[ scoreA ][ scoreB ][ isFree ];
	if(ret != -1) return ret;

	ret = 0;

	if(scoreA == A && scoreB == B) return ret = 1;

	if(isFree) {
		if(scoreA < A) {
			ret = (ret + dp(scoreA + 1, scoreB, isFree)) % MOD;
		}

		if(scoreB + 1 < scoreA) {
			ret = ( ret + dp( scoreA, scoreB + 1, isFree) ) % MOD;
		}


	} else {
		
		if(scoreB < B) {
			ret = ( ret + dp(scoreA, scoreB + 1, isFree) ) % MOD;
		} 

		if(scoreB == B || (scoreA < scoreB)) {
			ret = ( ret + dp(scoreA + 1, scoreB, isFree) ) % MOD;
		}
	}

	return ret;
}


int main() {
	freopen("winning_at_sports.txt", "r", stdin);
	freopen("outputC.txt", "w", stdout);

	scanf("%d", &test_case);
	for(int caseId = 1; caseId <= test_case; caseId ++) {
		scanf("%d-%d", &A, &B);

		memset(score, -1, sizeof(score));

		int stress = dp(0, 1, 0);
		int sfree = dp(1, 0, 1);

		printf("Case #%d: %d %d\n", caseId, sfree, stress);

	}
	return 0;
}
#include <cmath>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <utility>
#include <tuple>
#include <ctime>

using namespace std;

const int MOD = 1000000007;

void solve_case(int case_id) {
  string s; cin >> s;
  int nx, ny; sscanf(s.c_str(), "%d-%d", &nx, &ny);

  int count_stressfree, count_stressful;
  { // stress-free
    vector<vector<int>> dp(nx+1, vector<int>(ny+1, 0));
    dp[0][0] = 1;
    for (int x = 1; x <= nx; ++x) {
      for (int y = 0; y < min(x, ny+1); ++y) {
        if (y > 0) {
          dp[x][y] += dp[x][y-1];
          dp[x][y] %= MOD;
        }
        if (y == 0 || x-1 > y) {
          dp[x][y] += dp[x-1][y];
          dp[x][y] %= MOD;
        }
      }
    }

    count_stressfree = dp[nx][ny];
  }

  { // stressful
    vector<vector<int>> dp(nx+1, vector<int>(ny+1, 0));
    dp[0][0] = 1;
    for (int y = 0; y <= ny; ++y) {
      for (int x = 0; x <= nx; ++x) {
        if (x == 0 && y == 0) continue;
        
        if (y > 0 && y-1 >= x) {
          dp[x][y] += dp[x][y-1];
          dp[x][y] %= MOD;
        }
        if (x > 0) {
          dp[x][y] += dp[x-1][y];
          dp[x][y] %= MOD;
        }
      }
    }

    count_stressful = dp[nx][ny];
  }

  cout << "Case #" << case_id << ": " << count_stressfree << " " << count_stressful << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  
  clock_t t0 = clock(); 
  int t; cin >> t;
  for (int i = 1; i <= t; ++i) {
    solve_case(i);
  }
  clock_t t1 = clock();
  cerr << double(t1 - t0) / CLOCKS_PER_SEC << endl;
  return 0;
}

from collections import defaultdict


class Case:
    @classmethod
    def parse(cls, stream):
        score = next(stream).strip()
        mine, theirs = score.split('-')
        return cls(int(mine), int(theirs))

    def __init__(self, mine, theirs):
        self.mine = mine
        self.theirs = theirs

    def solve(self):
        return "{} {}".format(self.getStressfree(), self.getStressful())

    def getStressfree(self):
        table = defaultdict(int)
        mine = self.mine
        theirs = self.theirs
        table[(1, 0)] = 1
        for i in range(2, mine+1):
            for j in range(min(i, theirs+1)):
                assert i > j, "{} <= {}".format(i, j)
                table[(i, j)] = ( table[(i-1, j)] + table[(i, j-1)] ) % 1000000007
                """print("[{}, {}] = [{}, {}] + [{}, {}] = {} + {}".format(i, j,
                                                              i-1, j,
                                                              i, j-1,
                                                              table[(i-1, j)],
                                                              table[(i, j-1)])
                )"""

        return table[(mine, theirs)]

    def getStressful(self):
        table = defaultdict(int)
        mine = self.mine
        theirs = self.theirs
        table[(0, 0)] = 1
        for j in range(1, theirs+1):
            for i in range(j+1):
                assert i <= j, "{} > {}".format(i, j)
                table[(i, j)] = ( table[(i-1, j)] + table[(i, j-1)] ) % 1000000007
                """print("[{}, {}] = [{}, {}] + [{}, {}] = {} + {}".format(i, j,
                                                              i-1, j,
                                                              i, j-1,
                                                              table[(i-1, j)],
                                                              table[(i, j-1)])
                )"""

        return table[(theirs, theirs)]


def main(fin, fout):
    numCases = int(next(fin).strip())
    for i in range(numCases):
        case = Case.parse(fin)
        answer = case.solve()
        output = "Case #{}: {}".format(i+1, answer)
        print(output)
        print(output, file=fout)


def sample():
    trie = Trie()

    trie.addWord("hi")
    print(trie.findUniquePrefix("hi"))
    trie.addWord("hello")
    print(trie.findUniquePrefix("hello"))
    trie.addWord("lol")
    print(trie.findUniquePrefix("lol"))
    trie.addWord("hills")
    print(trie.findUniquePrefix("hills"))
    trie.addWord("hill")
    print(trie.findUniquePrefix("hill"))

if __name__ == '__main__':
    import sys
    if len(sys.argv) < 3:
        print("Usage: main.py <input> <output>")
        exit()
    fin = open(sys.argv[1], 'r')
    fout = open(sys.argv[2], 'w')
    main(fin, fout)

package y2015.round1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.*;

/**
 * Created by aleksandr on 18.01.15.
 */
public class C {
    private static final String inputFileName = "input/2015/round1/c/winning_at_sports.txt";
    private static final String outputFileName = "output.txt";

    public static void main(String[] args) throws Exception {
        File inputFile = new File(inputFileName);
        Scanner scanner = new Scanner(inputFile);

        File outputFile = new File(outputFileName);
        outputFile.delete();
        outputFile.createNewFile();
        FileWriter fw = new FileWriter(outputFile);
        BufferedWriter bw = new BufferedWriter(fw);

        int numOfTestCases = scanner.nextInt();
        scanner.nextLine();

        Problem.initStressFree();
        Problem.initStressFul();

        for (int i = 1; i <= numOfTestCases; i++) {

            String[] parts = scanner.nextLine().split("-");
            int n = Integer.parseInt(parts[0]);
            int m = Integer.parseInt(parts[1]);

            Problem problem = new Problem(n, m);

            String testCase = "Case #" + i + ": " + problem.solve();
            bw.append(testCase + "\n");
            System.out.println(testCase);
        }

        bw.flush();
        fw.flush();

        bw.close();
        fw.close();
    }

    private static class Problem {
        private static Long modulo = 1000000007L;

        private static Long[][] stressFreeField = new Long[2001][2001];
        private static Long[][] stressFulField = new Long[2001][2001];

        private int lost;
        private int win;

        public Problem(int win, int lost) {
            this.lost = lost;
            this.win = win;
        }

        public String solve() {
            return stressFreeField[win][lost] + " " + getStressFulField(win, lost);
        }

        private Long getStressFulField(int win, int lost) {
            Long way = stressFulField[win][lost];
            if (way == 0) {
                for (int i = win; i > 0 ; i--) {
                    way = stressFulField[i][lost];
                    if (way > 0) {
                        break;
                    }
                }
            }

            if (way == 0)
                way = 1L;

            return way;
        }


        private Long stressFul() {
            return null;
        }

        public static void initStressFul() {
            Long way = 0L;
            clear(stressFulField);
            stressFulField[0][0] = 1L;
            for (int y = 1; y <= 2000; y++) {
                for (int x = 0; x <= 2000; x++) {
                    if (x<=y) {
                        way = stressFulField[x][y-1];
                        if (x>0) {
                            way += stressFulField[x-1][y];
                        }
                        if (way > modulo) {
                            way = way % modulo;
                        }
                        stressFulField[x][y] = way;
                    }
                }
            }

//            for (int i = 0; i < 10; i++) {
//                String s ="";
//                for (int j = 0; j <10; j++) {
//                    s += stressFulField[j][i];
//                }
//                System.out.println(s);
//            }
        }

        public static void initStressFree() {
            Long way = 0L;
            clear(stressFreeField);
            for (int i = 0; i <= 2000; i++) {
                stressFreeField[i][0] = 1L;
            }
            for (int y = 1; y <= 2000; y++) {
                for (int x = 0; x <= 2000; x++) {
                    if (x>y) {
                        way = stressFreeField[x-1][y] + stressFreeField[x][y-1];
                        if (way > modulo) {
                            way = way % modulo;
                        }
                        stressFreeField[x][y] = way;
                    }
                }
            }
        }

        private static void clear(Long[][] field) {
            for (int i = 0; i < field.length; i++) {
                for (int j = 0; j < field[0].length; j++) {
                    field[i][j] = 0L;
                }
            }
        }
    }
}

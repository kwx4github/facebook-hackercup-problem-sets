#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

//#pragma comment(linker, "/STACK:167177216")
#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 2222;
const li MOD = li(INF + 7);

int n, m;
li dp1[N][N], dp2[N][N];

inline bool read()
{
	return (scanf("%d-%d", &n, &m) == 2);
}

inline void solve()
{
	cerr << "points are == " << n << ' ' << m << endl;
	assert(n > m);
	forn(i, N)
	{
		forn(j, N)
		{
			dp1[i][j] = dp2[i][j] = 0;
		}
	}

	dp1[0][0] = 1LL;

	for(int i = 0; i <= n; i++)
	{
		for(int j = 0; j <= m; j++)
		{
			li cur = dp1[i][j];
			if(i <= j && (i != 0) && (j != 0))
			{
				assert(cur == 0LL);
			}

			if(cur == 0)
				continue;
			dp1[i + 1][j] += cur;
			dp1[i + 1][j] %= MOD;

			if(j + 1 < i)
			{
				dp1[i][j + 1] += cur;
				dp1[i][j + 1] %= MOD;
			}
		}
	}

	li ans1 = dp1[n][m] % MOD;

	dp2[0][0] = 1LL;

	for(int i = 0; i <= m; i++)
	{
		for(int j = 0; j <= m; j++)
		{
			li cur = dp2[i][j];
			if(j > i)
			{
				assert(cur == 0LL);
			}

			if(cur == 0)
				continue;
			dp2[i + 1][j] += cur;
			dp2[i + 1][j] %= MOD;

			if(j + 1 <= i)
			{
				dp2[i][j + 1] += cur;
				dp2[i][j + 1] %= MOD;
			}
		}
	}

	li ans2 = dp2[m][m] % MOD;

	cout << ans1 << ' ' << ans2 << endl;
	return;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

	cerr << "MOD == " << MOD << endl;
	assert(MOD == 1LL * 1000 * 1000 * 1000 + 7LL);

	int T;
	cin >> T;

	forn(tt, T)
	{
		cerr << "Test #" << tt + 1 << " processing" << endl;
		int curT = clock();
		assert(read());
		//gen();
		cout << "Case #" << tt + 1 << ": ";
		solve();
		cerr << "Test #" << tt + 1 << " processed with TIME == " << clock() - curT << " ms" << endl;
	}

    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("sports.in");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("sports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Sports solver = new Sports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Sports {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        String s = in.nextToken();
        int dash = s.indexOf('-');
        int first = Integer.parseInt(s.substring(0, dash));
        int second = Integer.parseInt(s.substring(dash + 1));
        int answer1 = stressFree(first, second);
        int answer2 = stressful(first, second);
        out.println("Case #" + testNumber + ": " + answer1 + " " + answer2);
    }

    private int stressful(int first, int second) {
        return stressFree(second + 1, second);
    }

    private int stressFree(int first, int second) {
        int total = choose(first + second, first);
        return MOD.mul(total, MOD.mul(first - second, MOD.modInversePrimeMod(first + second)));
    }

    private int choose(int n, int k) {
        int answer = 1;
        for (int i = 0; i < k; i++) {
            answer = MOD.mul(answer, n - i);
            answer = MOD.mul(answer, MOD.modInversePrimeMod(i + 1));
        }
        return answer;
    }

    static final ModUtilsInt MOD = new ModUtilsInt(1000000000 + 7);
}

class InputReader {
    BufferedReader br;
    StringTokenizer st;

    public InputReader(InputStream stream) {
        br = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        return nextToken();
    }

    public String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (line == null) {
                return null;
            }
            st = new StringTokenizer(line);
        }
        return st.nextToken();
    }

}

class ModUtilsInt {

    public final int MOD;

    public ModUtilsInt(int MOD) {
        this.MOD = MOD;
    }

    public int mul(int a, int b) {
        return (int) ((long) a * b % MOD);
    }

    public int modInversePrimeMod(int a) {
        if (a <= 0 || MOD <= 0) {
            throw new ArithmeticException("arguments must be positive");
        }
        long result = 1;
        if (a >= MOD) {
            a %= MOD;
        }
        while (a != 1 && a != 0) {
            int div = MOD / a;
            result = result * (MOD - div) % MOD;
            a = MOD - div * a;
        }
        if (a == 0) {
            throw new ArithmeticException("mod is not prime");
        }
        return (int) result;
    }

}


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FCB_WinningAtSports_Optim
{
	class Test
	{
		public int X { get; set; }
		public int Y { get; set; }
	}
	class Input
	{
		public int TestsNo { get; set; }
		public List<Test> Tests { get; set; }
		public Input()
		{
			this.Tests = new List<Test>();
		}
	}
	class FileInputParser
	{
		public String FilePath { get; set; }
		public FileInputParser(String FilePath)
		{
			this.FilePath = FilePath;
		}
		public Input Parse()
		{
			Input input = new Input();

			StreamReader sr = new StreamReader(this.FilePath);
			input.TestsNo = int.Parse(sr.ReadLine());

			for (int i = 0; i < input.TestsNo; i++)
			{
				Test test = new Test();

				string[] temp = sr.ReadLine().Split('-');
				test.X = int.Parse(temp[0]);
				test.Y = int.Parse(temp[1]);

				input.Tests.Add(test);
			}

			return input;
		}
	}
	class ConsoleInputParser
	{
		public String FilePath { get; set; }
		public ConsoleInputParser()
		{

		}
		public Input Parse()
		{
			Input input = new Input();

			input.TestsNo = int.Parse(Console.ReadLine());

			for (int i = 0; i < input.TestsNo; i++)
			{
				Test test = new Test();

				string[] temp = Console.ReadLine().Split('-');
				test.X = int.Parse(temp[0]);
				test.Y = int.Parse(temp[1]);

				input.Tests.Add(test);
			}

			return input;
		}
	}
	class Program
	{
		static void Main(string[] args)
		{
			// parse the input file
			Input input = (new ConsoleInputParser()).Parse();

			for (int t = 0; t < input.TestsNo; t++)
			{
				Test test = input.Tests[t];
				int[,] matrix = new int[test.Y + 1, test.X + 1];

				// initialize the matrix with values of zero
				for (int i = 0; i < test.Y + 1; i++)
				{
					for (int j = 0; j < test.X + 1; j++)
					{
						if ((i == 0) || (j == 0))
						{
							matrix[i, j] = 1;
						}
						else
						{
							matrix[i, j] = 0;
						}
					}
				}

				// matrix[i, j] = matrix[i - 1, j] + matrix[i, j - 1]
				for (int i = 1; i < test.Y + 1; i++)
				{
					for (int j = 1; j < test.X + 1; j++)
					{
						// i always lead
						if(i < j)
						{
							matrix[i, j] = matrix[i - 1, j] + matrix[i, j - 1];
							matrix[i, j] %= 1000000007;
						}

						// i am leaded lead
						if(i > j)
						{
							matrix[i, j] = matrix[i - 1, j] + matrix[i, j - 1];
							matrix[i, j] %= 1000000007;
						}
					}
				}

				int stressfreeMatches = matrix[test.Y, test.X];
				int stressfullMatches = 0;
				for (int j = 0; j < test.X + 1; j++)
				{
					if(j == test.Y)
					{
						break;
					}
					stressfullMatches += matrix[test.Y, j];
					stressfullMatches %= 1000000007;
				}

				Console.WriteLine("Case #{0}: {1} {2}", t + 1,
					stressfreeMatches, stressfullMatches);
			}
		}

	}
}

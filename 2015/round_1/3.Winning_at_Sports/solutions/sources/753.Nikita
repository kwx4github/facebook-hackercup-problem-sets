#include <cstdio>
#include <ctime>
#include <cassert>
#include <vector>
using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

const int MAXN = 2000;
const int MOD = 1000000007;

inline void add(int &a, int b) {
    a += b;
    if (a >= MOD) a -= MOD;
}

int d1[MAXN + 20][MAXN + 20];
int d2[MAXN + 20][MAXN + 20];
int main() {
    clock_t start = clock();
    d1[1][0] = 1;
    d2[0][0] = 1;
    for (int a = 0; a <= MAXN; a++) {
        for (int b = 0; b <= MAXN; b++) {
            if (a > b) {
                add(d1[a + 1][b], d1[a][b]);
                if (a > b + 1) {
                    add(d1[a][b + 1], d1[a][b]);
                }
            }
            if (a <= b) {
                add(d2[a][b + 1], d2[a][b]);
                if (a + 1 <= b) {
                    add(d2[a + 1][b], d2[a][b]);
                }
            }
        }
    }
    eprintf("precalc: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    int tests;
    assert(scanf("%d", &tests) == 1);
    for (int test = 1; test <= tests; test++) {
        int a, b;
        assert(scanf("%d-%d", &a, &b) == 2);
        assert(a > b);
        printf("Case #%d: %d %d\n", test, d1[a][b], d2[b][b]);
        eprintf("Test %d: %.2f\n", test, (double)(clock() - start) / CLOCKS_PER_SEC);
    }
    eprintf("Total: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    return 0;
}

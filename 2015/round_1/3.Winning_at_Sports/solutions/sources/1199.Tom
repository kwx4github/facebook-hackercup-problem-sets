#include <iostream>
#include <vector>
#include <algorithm>

size_t f(int n)
{
    std::vector<size_t> numbersA(n+1);
    std::vector<size_t> numbersB(n+1);

    std::fill_n(numbersB.begin(), 2, 0);

    numbersA[0] = 1;

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j <= i; j++)
        {
            for (int k = 0; k <= j+1; k++)
            {
                numbersB[k] = (numbersB[k] + numbersA[j]) % 1000000007L;
            }
        }

        std::swap(numbersA, numbersB);
        std::fill_n(numbersB.begin(), i+2, 0);
    }

    size_t res = 0;

    for (int i = 0; i < n+1; i++)
    {
        res = (res + (i+2)*numbersA[i]) % 1000000007L;
    }

    return res;
}

size_t stressfull(int looser)
{
    if (looser < 2)
        return 1;
    return f(looser-2);
}

size_t g(int h, int l)
{
    std::vector<size_t> numbersA(l+1, 0);
    std::vector<size_t> numbersB(l+1, 0);

    numbersA[0] = 1; // one way to arrive at score 0..
 
    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j <= std::min(l, i); j++)
        {
            for (int k = j; k <= std::min(l, i+1); k++)
            {
                numbersB[k] = (numbersB[k] + numbersA[j]) % 1000000007L;
            }
        }
        
        std::swap(numbersA, numbersB);
        std::fill_n(numbersB.begin(), std::min(l+1, i+3), 0);
    }

    size_t res = 0;
    
    for (int i = 0; i <= l; i++)
    {
        res = (res + numbersA[i]) % 1000000007L;
    }
    
    return res;
}

size_t stressfree(int winner, int looser)
{
    if (winner < 2)
        return 1;
    return g(winner-2, looser);
}

std::pair<size_t, size_t> testcase()
{
    char dash;
    int winner, looser;
    std::cin >> winner >> dash >> looser;

    return {stressfree(winner, looser), stressfull(looser)};
}

int main(int argc, char **argv)
{
    int t;

    std::cin >> t;
    
    for (int i = 0; i < t; i++)
    {
        auto res = testcase();
        std::cout << "Case #" << (i+1) << ": " << res.first << ' ' << res.second << std::endl;
    }
    return 0;
}

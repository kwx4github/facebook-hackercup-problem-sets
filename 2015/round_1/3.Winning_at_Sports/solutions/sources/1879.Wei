#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

static const int LIMIT = 1000000007;

int CalcStreeful(int as, int bs) {
    vector<vector<int>> dp(bs+1, vector<int>(bs+1));
    for (int i = 0; i < dp.size(); ++i) dp[i][0] = 1;
    for (int i = 1; i < dp.size(); ++i) {
        for (int j = 1; j <= i; ++j) {
            // keep i >= j
            dp[i][j] = dp[i][j-1];
            if (i-1 >= j) dp[i][j] += dp[i-1][j];
            dp[i][j] %= LIMIT;
        }
    }
    return dp[bs][bs];
}

int CalcStreeFree(int as, int bs) {
    vector<vector<int>> dp(as+1, vector<int>(as+1));
    for (int i = 0; i < dp.size(); ++i) dp[i][0] = 1;
    for (int i = 1; i < dp.size(); ++i) {
        for (int j = 1; j < i; ++j) {
            // keep i > j
            dp[i][j] = dp[i][j-1];
            if (i-1 > j) dp[i][j] += dp[i-1][j];
            dp[i][j] %= LIMIT;
        }
    }
    return dp[as][bs];
}

int main(int argc, char *argv[])
{
    int64_t T, N;
    cin >> T;
    for (int idx = 0; idx < T; ++idx) {
        string vs;
        cin >> vs;
        size_t pos = vs.find("-");
        int as = stoi(vs.substr(0, pos));
        int bs = stoi(vs.substr(pos+1));
        // cout << as << " : " << bs  << endl;
        int streefree = CalcStreeFree(as, bs); 
        int streeful = CalcStreeful(as, bs); 
        cout << "Case #" << idx + 1 << ": " << streefree << " " << streeful << endl; 
    }

    return 0;
}

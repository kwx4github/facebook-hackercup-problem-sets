#include <cstdio>
#include <cassert>
#include <algorithm>
#include <cstring>

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;
  
const int mode = (int)1e9 + 7;
const int MAXN = 2012;

int dp1[MAXN][MAXN];
int dp2[MAXN][MAXN];
int dp3[MAXN][MAXN];
int n, m;

int add(int a, int b) {
	if ((a += b) >= mode) a -= mode;
	assert(a < mode && a >= 0);
	return a;
}

int calc3(int a, int b) {
	int &res = dp3[a][b];
	if (res != -1) return res;
	if (a == n && b == m) return res = 1;
	res = 0;
	if (a + 1 <= n) res = add(res, calc3(a + 1, b));
	if (b + 1 <= m) res = add(res, calc3(a, b + 1));
	return res;
}

int calc1(int a, int b) {
	int &res = dp1[a][b];
	if (res != -1) return res;
	if (a == n && b == m) return res = 1;
	res = 0;
	if ((a > 0 || b > 0) && a <= b) return res = 0;
	if (a + 1 <= n) res = add(res, calc1(a + 1, b));
	if (b + 1 <= m) res = add(res, calc1(a, b + 1));
	return res;
}

int calc2(int a, int b) {
	int &res = dp2[a][b];
	if (res != -1) return res;
	if (a == n && b == m) return res = 1;
	res = 0;
	if (a > b && b != m) return res = 0;
	if (a + 1 <= n) res = add(res, calc2(a + 1, b));
	if (b + 1 <= m) res = add(res, calc2(a, b + 1));
	return res;
}

void solve(int test) {
	scanf("%d-%d", &n, &m);
	memset(dp1, -1, sizeof dp1);
	memset(dp2, -1, sizeof dp2);
	memset(dp3, -1, sizeof dp3);
	//int res1 = add(calc3(0, 0), mode - calc1(0, 0));
	//int res2 = add(calc3(0, 0), mode - calc2(0, 0));
	//eprintf("calc1 = %d\n", calc1(0, 0));
	//eprintf("calc2 = %d\n", calc2(0, 0));
	//eprintf("calc3 = %d\n", calc3(0, 0));
	printf("Case #%d: %d %d\n", test, calc1(0, 0), calc2(0, 0));
}

int main() {
	int T;
	scanf("%d", &T);
	for (int test = 1; test <= T; test++) solve(test);
}

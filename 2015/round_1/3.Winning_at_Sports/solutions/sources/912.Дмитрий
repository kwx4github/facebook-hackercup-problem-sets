#include <string>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <string.h>
#include <queue>
#include <cstdio>
#include <cassert>
#include <deque>
#include <stack>
#include <utility>
#include <numeric>
#include <ctime>

using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define fore(i, l, r) for (int i = (int)(l); i < (int)(r); i++)
#define forv(i, v) forn(i, v.size())

#define mp make_pair
#define pb push_back
#define all(v) v.begin(), v.end()

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

const int MAXN = 2015;
const int MOD = 1000 * 1000 * 1000 + 7;

int dp[MAXN][MAXN];

int calc(int x, int y) {
    if (dp[x][y] != -1) return dp[x][y];
    if (x == 0 && y == 0) return 1;
    if (x == 1 && y == 0) return 1;
    int& result = dp[x][y];
    result = 0;
    if (x <= y) {
        if (x > 0) result = calc(x - 1, y);
        if (x <= y - 1) result = (result + calc(x, y - 1)) % MOD;
    } else {
        if (y > 0) result = calc(x, y - 1);
        if (x - 1 > y) result = (result + calc(x - 1, y)) % MOD;
    }
    return result;
}

void solveCase(int tc) {
    cerr << tc << endl;
    int x, y;
    scanf("%d-%d", &x, &y);
    printf("Case #%d: %d %d\n", tc, calc(x, y), calc(y, y));
}

int main() {
#ifdef NEREVAR_PROJECT
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    memset(dp, 255, sizeof(dp));
    int tc;
    cin >> tc;
    forn(it, tc) solveCase(it + 1);
    return 0;
}

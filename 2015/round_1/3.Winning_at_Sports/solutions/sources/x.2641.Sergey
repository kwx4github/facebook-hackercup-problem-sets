#include <map>
#include <set>
#include <cmath>
#include <deque>
#include <limits>
#include <vector>
#include <string>
#include <iostream>
#include <cinttypes>
#include <algorithm>
#include <unordered_map>

#include <regex>
#include <sstream>

using namespace std;
typedef uint64_t LL;
vector<vector<LL>> MFull(2002, vector<LL>(2002, 0));
vector<vector<LL>> MFree(2002, vector<LL>(2002, 0));

LL findStressFul(LL A, LL B)
{
    MFull[0][0] = 1;

    for (int i = 1; i <= B; ++i)
    {
        for (int j = 0; j <= A; ++j)
        {
            LL k = i - 1;
            for (int l = 0; l <= j && l <= k; ++l)
            {
                /*
                cerr
                    << "i=" << i << ", "
                    << "j=" << j << ", "
                    << "k=" << k << ", "
                    << "l=" << l << ", "
                    << endl;
                */

                LL & q = MFull[i][j];
                q += MFull[k][l];
                q %= 1000000007;
            }
        }
    }

    return MFull[B][A];
}

LL findStressFree(LL A, LL B)
{
    MFree[1][0] = 1;

    for (int i = 2; i <= A; ++i)
    {
        for (int j = 0; j <= B ; ++j)
        {
            LL k = i - 1;
            for (int l = 0; l <= j && l < k; ++l)
            {
                LL & q = MFree[i][j];
                q += MFree[k][l];
                q %= 1000000007;
            }
        }
    }

    return MFree[A][B];
}


int main(int, char**)
{
    regex delim("[-]");
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    findStressFul(2001, 2000);
    findStressFree(2001, 2000);

    LL T;
    cin >> T;
    for (LL t = 1; t <= T; ++t)
    {
        string buffer;
        cin >> buffer;
        std::sregex_token_iterator last;
        std::sregex_token_iterator first(buffer.begin(), buffer.end(), delim, -1);

        LL A, B;
        {
            string partOfBuffer = *first;
            istringstream sin(partOfBuffer);
            sin >> A;
        }
        ++first;
        {
            string partOfBuffer = *first;
            istringstream sin(partOfBuffer);
            sin >> B;
        }

        cout << "Case #" << t << ": " << MFree[A][B] << " " << MFull[B][A] << endl;
    }

    return 0;
}


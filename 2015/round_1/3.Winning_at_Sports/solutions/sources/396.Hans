#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

vector<vector<long long>> dp;
int a, b;
const long long MOD = 1000000007;

long long stressless(int i, int j){
    long long &res = dp[i][j];
    if(res > -1)
        return res;
    
    res = 0;
    if(i-1 > j)
        res = (res + stressless(i-1, j)) % MOD;
    
    if(j > 0){
        res = (res + stressless(i, j-1)) % MOD;
    }
    
    return res;
}

long long stressful(int i, int j){
    long long &res = dp[i][j];
    if(res > -1)
        return res;
    
    res = 0;
    if(i-1 >= 0)
        res = (res + stressful(i-1, j)) % MOD;
    
    if(j-1 >= i){
        res = (res + stressful(i, j-1)) % MOD;
    }
    
    return res;
}

void comp(int tc){
    string s;
    cin >> s;
    auto p = s.find('-');
    a = stoi(s.substr(0, p));
    b = stoi(s.substr(p+1, s.length() - p - 1));
    
    dp.assign(a+1, vector<long long>(b+1, -1));
    dp[0][0] = dp[1][0] = 1;
    long long ans1 = stressless(a, b);
    
    dp.assign(a+1, vector<long long>(b+1, -1));
    dp[0][0] = 1;
    long long ans2 = stressful(b, b);
    
    cout << "Case #" << tc << ": " << ans1 << " " << ans2 << endl;
}

int main(){
    int T;
    cin >> T;

    for(int i=1; i<=T; ++i){
        comp(i);
    }
}
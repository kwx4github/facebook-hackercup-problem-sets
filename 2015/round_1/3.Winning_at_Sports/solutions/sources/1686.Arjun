import java.io.*;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.StringTokenizer;
 
 
public class Solution{
    
    ///////////////////////////////////////////////////////////////////////////
    static class FastScanner{
        BufferedReader s;
        StringTokenizer st;
        
        public FastScanner(InputStream InputStream){
            st = new StringTokenizer("");
            s = new BufferedReader(new InputStreamReader(InputStream));
        }
        
        public FastScanner(File f) throws FileNotFoundException{
            st = new StringTokenizer("");
            s = new BufferedReader (new FileReader(f));
        }
        
        public int nextInt() throws IOException{
            if(st.hasMoreTokens())
                return Integer.parseInt(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextInt();
            }
        }
        
        public BigInteger big() throws IOException{
            if(st.hasMoreTokens())
                return new BigInteger(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return big();
            }
        }
        
        public double nextDouble() throws IOException{
            if(st.hasMoreTokens())
                return Double.parseDouble(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextDouble();
            }
        }
      
        public long nextLong() throws IOException{
            if(st.hasMoreTokens())
                return Long.parseLong(st.nextToken());
            else{
                st = new StringTokenizer(s.readLine());
                return nextLong();
            }
        }
        
        public String nextString() throws IOException{
            if(st.hasMoreTokens())
                return st.nextToken();
            else{
                st = new StringTokenizer(s.readLine());
                return nextString();
            }
            
        }
        public String readLine() throws IOException{
            return s.readLine();
        }
        
        public void close() throws IOException{
            s.close();
        }
        
    }
    
    ////////////////////////////////////////////////////////////////////
    //      Number Theory
    
    long pow(long a,long b,long mod){
        long x = 1; long y = a;
        while(b > 0){
            if(b % 2 == 1){
                x = (x*y);
                x %= mod;
            }
            y = (y*y);
            y %= mod;
            b /= 2;         
        }
        return x;
    }
    
    int divisor(long x,long[] a){
        long limit = x;
        int numberOfDivisors = 0;
 
        for (int i=1; i < limit; ++i) {
            if (x % i == 0) {
                limit = x / i;
                if (limit != i) {
                    numberOfDivisors++;
                }
                numberOfDivisors++;
            }
        }
        return numberOfDivisors;
    }
    
    void findSubsets(int array[]){
        long numOfSubsets = 1 << array.length; 
        for(int i = 0; i < numOfSubsets; i++){    
            int pos = array.length - 1;
            int bitmask = i;
            while(bitmask > 0){     
                if((bitmask & 1) == 1)
//                    ww.print(array[pos]+" ");
                bitmask >>= 1;
                pos--;
            }
//            ww.println();
        }
    }
    
    
    public static long gcd(long a, long b){
        return b == 0 ? a : gcd(b,a%b);
    }
    
  
    public static int lcm(int a,int b, int c){
        return lcm(lcm(a,b),c);
    }
    
    public static int lcm(int a, int b){
        return (int) (a*b/gcd(a,b));
    }
    
    public static long invl(long a, long mod) {
		long b = mod;
		long p = 1, q = 0;
		while (b > 0) {
			long c = a / b;
			long d;
			d = a;
			a = b;
			b = d % b;
			d = p;
			p = q;
			q = d - c * q;
		}
		return p < 0 ? p + mod : p;
	}
    
    ////////////////////////////////////////////////////////////////////
    
    
   
    
      
    //////////////////////////////////////////////////////////////////// 
     
    
     
    public static void main(String[] args) throws Exception{
        new Solution().solve();
    }
    
    
    ////////////////////////////////////////////////////////////////////
    
    
    void solve() throws IOException{
   	 FastScanner s = new FastScanner(new File("input.txt"));
         PrintWriter ww = new PrintWriter(new FileWriter("output.txt")); 	
    	int test = s.nextInt();
    	final long mod = 1000000007;
    	
    	for(int k=1;k<=test;k++){
    		
    		
    		long[][] sfree = new long[2010][2010];
    		long[][] sfull = new long[2010][2010];
    		
    		//Input
    		String str = s.nextString();
    		int index = str.indexOf('-');
    		int a = Integer.parseInt(str.substring(0, index));
    		int b = Integer.parseInt(str.substring(index+1));
    		
    		//// STRESS FREE
    		
    		//There is only one way to get scores like :- 1:0 / 2:0 / 3:0
    		for(int i=1;i<=a;i++) sfree[i][0] = 1;
    		
    		// Initialise i with 2 ::::: 1:0 is 1
    		for(int i=2;i<=a;i++){
    			//Value of j is never >= i
    			for(int j=0;j<=Math.min(b, i-1);j++){
    				sfree[i][j] = 0;
    				// Add the value of the previous state of b 
    				if(j > 0) sfree[i][j] += sfree[i][j-1];
    				// Add the value of the previous state of a
    				if((i-j) > 1) sfree[i][j] += sfree[i-1][j]; 
    				sfree[i][j] %= mod;
    			}
    		}
    		
    		//// STRESS FUL 
    		for(int i=0;i<=b;i++)  sfull[0][i]=1;

    		  for(int i=1;i<=a;i++)
    		    for(int j=0;j<=b;j++){
    		        if(i>j){
    		        	// Not possible
    		            if(j<b) sfull[i][j]=0;
    		            // When j == b , Now it's possible to get i == j
    		            else sfull[i][j]=sfull[i-1][j];
    		        }
    		        // Add the previous states of i &&& j
    		        else if(i<j) sfull[i][j]=sfull[i][j-1]+sfull[i-1][j];
    		        // There is only one transition possible which is from previous state of i
    		        else sfull[i][j]=sfull[i-1][j];

    		        sfull[i][j]%=mod;
    		  }
    		  
    		  ww.println("Case #"+k+": "+sfree[a][b]+" "+sfull[a][b]);
    		
    	}
	s.close();
        ww.close();
		
    }
}




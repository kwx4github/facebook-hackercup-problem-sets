#include <stdio.h>
#include <string>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <sstream>
#include <assert.h>
#include <queue>
#include <set>

#define OUPUT_FILE "out.txt"

using namespace std;


#define MODULO  1000000007

#define MAXSCORE 2001
long a[MAXSCORE][MAXSCORE];


void preProcess(int A, int B)
{
    for (int i = 0; i <= A; i++)
        for (int j = 0; j <= B; j++)
            a[i][j] = 0;
}

long solveStressFree(int A, int B)
{
    preProcess(A, B);
    // base cases
    for (int i = 0; i <= A; i++)
    {
        a[i][0] = 1;
    }
    for (int i = 2; i <= A; i++)
    {
        for (int j = 1; j <= min(i - 1, B); j++)
        {
            a[i][j] = a[i][j - 1];
            if (i - 1 > j)
                a[i][j] = (a[i][j] + a[i - 1][j]) % MODULO;
        }
    }

    return a[A][B];
}

long solveStressful(int A, int B)
{
    preProcess(A, B);
    // base cases
    for (int i = 0; i <= A; i++)
    {
        a[0][i] = 1;
    }
    for (int i = 1; i <= A; i++)
    {
        for (int j = 1; j <=  B; j++)
        {
            if (j == B || (i - 1 <= j))
                a[i][j] = a[i - 1][j];
            if (i <= j - 1)
                a[i][j] = (a[i][j] + a[i][j - 1]) % MODULO;
        }
    }

    return a[A][B];
}

void parseInputAndSolve(const string& inFileName)
{
    int T;

    ifstream in(inFileName);
    ofstream out(OUPUT_FILE);

    if (!out.is_open())
        cout << "Error!" << endl;

    in >> T;
    for (int testCase = 1; testCase <= T; testCase++)
    {
        string line;
        in >> line;
        string firstScore = line.substr(0, line.find('-'));
        string secondScore = line.substr(line.find('-') + 1);
        int A = stoi(firstScore);
        int B = stoi(secondScore);

        long resultStressFree = solveStressFree(A, B);
        long resultStressful = solveStressful(A, B);
        
        out << "Case #" << testCase << ": " << resultStressFree << " " << resultStressful << endl;
    }

    out.close();
}

int main(int argc, char* argv[])
{
    if (argc < 2)
        cout << "Please pass your input file... dude!" << endl;

    parseInputAndSolve(string(argv[1]));    

    return 0;
}


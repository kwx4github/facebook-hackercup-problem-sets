import java.io.*;
import java.util.*;

public class C {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	static final int P = 1_000_000_007;

	static int pow(int a, int b) {
		int ret = 1;
		for (; b > 0; b >>= 1) {
			if ((b & 1) == 1) {
				ret = (int) ((long) ret * a % P);
			}
			a = (int) ((long) a * a % P);
		}
		return ret;
	}

	int[] fact;
	int[] invFact;

	void preCalc() {
		fact = new int[4001];
		invFact = new int[4001];
		fact[0] = invFact[0] = 1;
		for (int i = 1; i < fact.length; i++) {
			fact[i] = (int) ((long) fact[i - 1] * i % P);
			invFact[i] = pow(fact[i], P - 2);
		}
	}

	int comb(int n, int k) {
		if (n < 0 || k < 0 || k > n) {
			return 0;
		}
		return (int) ((long) fact[n] * invFact[k] % P * invFact[n - k] % P);
	}

	int easy(int p, int q) {
		int ret = comb(p + q - 1, p - 1) - comb(p + q - 1, p);
		if (ret < 0) {
			ret += P;
		}
		return ret;
	}

	int hard(int p, int q) {
		if (q == 0) {
			return 1; // OR 0 ?????????????
		}
		int ret = 0;
		for (int i = 0; i <= q - 1; i++) {
			if (i == 0) {
				ret++;
			} else {
				ret += comb(q - 1 + i, i) - comb(q - 1 + i, i - 1);
			}
			if (ret >= P) {
				ret -= P;
			}
			if (ret < 0) {
				ret += P;
			}
		}
		return ret;
	}

	void solve() throws IOException {
		String[] tmp = nextToken().split("\\-");
		int p = Integer.parseInt(tmp[0]);
		int q = Integer.parseInt(tmp[1]);
		out.println(easy(p, q) + " " + hard(p, q));
	}

	C() throws IOException {
		preCalc();
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "winning_at_sports";
			if (taskName.equals("")) {
				throw new AssertionError();
			}
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new C();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
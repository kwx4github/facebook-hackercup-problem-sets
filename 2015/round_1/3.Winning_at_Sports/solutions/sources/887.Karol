#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <cstring>
using namespace std;

/*PREWRITTEN CODE BEGINS HERE*/

#define RESET(a,c) memset(a,(c),sizeof(a))


typedef long long LL;
/*PREWRITTEN CODE ENDS HERE*/
inline int RI() { int xx; scanf("%d",&xx); return xx; }
typedef long double LD;
const int INF = 1010000000;
const double EPS = 1e-9;
/*SOLUTION BEGINS HERE*/

const int MOD = 1000 * 1000 * 1000 + 7;
const int MAX = 2010;
LL mem_stress_free[MAX][MAX], mem_stressful[MAX][MAX];

int A, B;

// always a > b 
LL go_stress_free(int a, int b) {
  if (a > A || b > B) return 0;
  if (a <= b) return 0;

  if (a == A && b == B) return 1;
  
  LL &ret = mem_stress_free[a][b];
  if (ret != -1) return ret;
  ret = 0;
  if (a < A) ret += go_stress_free(a + 1, b);
  if (b < B && b + 1 < a) ret += go_stress_free(a, b + 1);

  ret %= MOD;
  return ret;
}

LL go_stressful(int a, int b) {
  if (a > A || b > B) return 0;
  if (a == A && b == B) return 1;

  LL &ret = mem_stressful[a][b];
  if (ret != -1) return ret;
  ret = 0;
  
  if (b < B) ret += go_stressful(a, b + 1);
  if (a < A && (a + 1 <= b || b == B))
    ret += go_stressful(a + 1, b);
  ret %= MOD;
  return ret;
}

void solve(void)
{
  RESET(mem_stress_free, -1);
  RESET(mem_stressful, -1);
  
  scanf("%d-%d\n", &A, &B);
  
  LL val1 = go_stress_free(1, 0);
  LL val2 = go_stressful(0, 0);
  printf("%lld %lld\n", val1, val2);
}

int main(void)
{
	int T, C = 1;
	scanf("%d", &T);
	while(T--) { printf("Case #%d: ",C++); solve(); }
	return (0);
}

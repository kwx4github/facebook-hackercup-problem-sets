using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

namespace WinningAtSports
{
	class Program
	{
		static void Main(string[] args)
		{
			Initialize();
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")) { NewLine = "\n" })
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var score = reader.Next<string>();
					int sfr, sfl;
					Solve(score, out sfr, out sfl);

					writer.WriteLine("Case #{0}: {1} {2}", i, sfr, sfl);
				}
			}
		}

		private const int modulo = 1000000007;
		private static readonly int[,] dp = new int[2001, 2001];
		private static void Initialize()
		{
			dp[1, 0] = 1;
			for (int i = 2; i <= 2000; i++)
			{
				for (int j = 0; j < i; j++)
				{
					dp[i, j] = ((i - 1 > j) ? dp[i - 1, j] : 0)
							   + ((j - 1 >= 0) ? dp[i, j - 1] : 0);
					dp[i, j] %= modulo;
				}
			}
			dp[0, 0] = 1;
			for (int j = 1; j <= 2000; j++)
			{
				for (int i = 0; i <= j; i++)
				{
					dp[i, j] = ((i - 1 >= 0) ? dp[i - 1, j] : 0)
							   + ((j - 1 >= i) ? dp[i, j - 1] : 0);
					dp[i, j] %= modulo;
				}
			}
		}

		private static void Solve(string score, out int stressfree, out int stressful)
		{
			var scores = score.Split('-').Select(int.Parse).ToArray();
			stressfree = dp[scores[0], scores[1]];
			stressful = dp[scores[1], scores[1]];
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}
}

#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <queue>
#include <math.h>
#include <cmath>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <bitset>
#include <ctype.h>
#include <cassert>
#include <stack>
#include <fstream>
#include <unordered_map>
#include <ctime>

using namespace std;

#define snd second
#define fst first
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define ld long double
#define pb push_back
#define left _left
#define right _right

const ld pi = 3.14159265359;

template < typename T > T abs(T x)
{
    return x > 0 ? x : -x;
}

template < typename T > T sqr(T x)
{
	return x * x;
}

const ll mod = 1000000007;

const int maxn = 2005;

int dp[2005][2005];
int used[2005][2005];
int currUsed = 1;

int main()
{
	//gen();
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	//srand(time(NULL));
	
	int t;
	scanf("%d\n", &t);
	
	for (int tt = 1; tt <= t; tt++)
	{
		int a, b;
		scanf("%d-%d\n", &a, &b);
		
		ll ans1, ans2;
		
		for (int i = 0; i < maxn; i++)
			for (int j = 0; j < maxn; j++)
				dp[i][j] = 0;
				
		currUsed++;
				
		dp[0][0] = 1;
		used[0][0] = currUsed;
		queue < pair < int, int > > q;
		q.push(mp(0, 0));
		
		while (!q.empty())
		{
			int x = q.front().fst;
			int y = q.front().snd;
			q.pop();
			
			if (x < a)
			{
				dp[x + 1][y] += dp[x][y];
				if (dp[x + 1][y] >= mod)
					dp[x + 1][y] -= mod;
					
				if (used[x + 1][y] != currUsed)
				{
					used[x + 1][y] = currUsed;
					q.push(mp(x + 1, y));
				}
			}
			
			if (y < b)
			{
				if (x > y + 1)
				{
					dp[x][y + 1] += dp[x][y];
					if (dp[x][y + 1] >= mod)
						dp[x][y + 1] -= mod;
						
					if (used[x][y + 1] != currUsed)
					{
						used[x][y + 1] = currUsed;
						q.push(mp(x, y + 1));
					}
				}
			}
		}
		
		ans1 = dp[a][b];
		
		for (int i = 0; i < maxn; i++)
			for (int j = 0; j < maxn; j++)
				dp[i][j] = 0;
				
		currUsed++;
				
		dp[0][0] = 1;
		used[0][0] = currUsed;
		q.push(mp(0, 0));
		
		while (!q.empty())
		{
			int x = q.front().fst;
			int y = q.front().snd;
			q.pop();
			
			if (x < a)
			{
				if (x + 1 <= y || y == b)
				{
					dp[x + 1][y] += dp[x][y];
					if (dp[x + 1][y] >= mod)
						dp[x + 1][y] -= mod;
						
					if (used[x + 1][y] != currUsed)
					{
						used[x + 1][y] = currUsed;
						q.push(mp(x + 1, y));
					}
				}
			}
			
			if (y < b)
			{
				dp[x][y + 1] += dp[x][y];
				if (dp[x][y + 1] >= mod)
					dp[x][y + 1] -= mod;
					
				if (used[x][y + 1] != currUsed)
				{
					used[x][y + 1] = currUsed;
					q.push(mp(x, y + 1));
				}
			}
		}
		
		ans2 = dp[a][b];
		
		printf("Case #%d: %lld %lld\n", tt, ans1, ans2);		
	}
	
	
	return 0;
}






















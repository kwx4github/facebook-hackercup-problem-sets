#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <algorithm>
#include <memory.h>

using namespace std;

#define forn(i, n) for(int i = 0; i < (n); ++i)
#define forv(i, a) forn(i, (int)a.size())
typedef long long lng;

const lng mod = 1000 * 1000 * 1000 + 7;

int dsf[2005][2005];
int ds[2005][2005];

void initSf() {
    memset(dsf, 0, sizeof(dsf));

    dsf[0][0] = 1;
    for (int n = 0; n <= 2000; ++n) {
        for (int m = 0; m < n; ++m) {
            lng cur = 0;

            if (n > 0) {
                cur += dsf[n - 1][m];
            }

            if (m > 0) {
                cur += dsf[n][m - 1];
            }

            dsf[n][m] = cur % mod;
        }
    }
}

void initS() {
    memset(ds, 0, sizeof(ds));

    ds[0][0] = 1;

    for (int n = 0; n <= 2000; ++n) {
        for (int m = 0; m <= 2000; ++m) {
            if (n == 0 && m == 0) {
                continue;
            }

            lng cur = 0;

            if (n > 0) {
                cur += ds[n - 1][m];
            }

            if (n < m) {
                cur += ds[n][m - 1];
            }

            ds[n][m] = cur % mod;
        }
    }
}

pair<int, int> solve(int first, int second) {
    return make_pair(dsf[first][second], ds[first][second]);
}

int main() {
#ifdef __ASD__
	//freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    initSf();
    initS();

    int T;
    cin >> T;

    for (int tc = 0; tc < T; ++tc) {
        int a, b;
        char ch;

        cin >> a >> ch >> b;
        
        auto res = solve(a, b);
        cout << "Case #" << tc + 1 << ": " << res.first << " " << res.second << endl;
    }

	return 0;
}
from sys import *
from heapq import *
from time import time
from multiprocessing import Pool
from collections import *
import itertools
from copy import deepcopy
from bisect import *
setrecursionlimit(10000)
from math import *
from time import sleep
import os
import sys
import re
import numpy as np
import heapq

modP = 1000000007
def nCr(n, r):
    if (r > n): return 0
    if (r > n/2): r = n-r
    rv = 1
    for k in xrange(r):
        rv = (rv*(n-k))/(1+k)
    return rv

def nCr_modP_(n, r, p): # for small (n,r); could be sped up with caching factorials
    return nCr(n, r) % p

def nCr_modP(n, r, p):  # for general (n,r)
    if (r > n): return 0
    rv = 1
    while n > 0 and r > 0:
        rv = (rv * nCr_modP_(n%p, r%p, p)) % p
        r /= p
        n /= p
    return rv

def readint():
    return int(fi.readline())

def readints():
    return [int(X) for X in fi.readline().split('-')]

def read_case():
    return tuple(readints())

# win a-b always having more points
def stressfree(a, b):
    return (nCr_modP(a+b-1, a-1, modP) - nCr_modP(a+b-1, a, modP)) % modP

# win a-b always having equal or more
def sftie(a, b):
    return (nCr_modP(a+b, b, modP) - nCr_modP(a+b, b-1, modP)) % modP

def solve_case(a, b):
    return (stressfree(a, b), sftie(b, b))

def print_solution(case):
    val = solve_case(*case[1])
    msg = "Case #{}: {} {}".format(case[0], val[0], val[1])
    print msg
    return msg

t0 = time()
# Initialisation here
t1 = time()
print "Intialisation took %f seconds" % (t1 - t0)

if __name__ == '__main__':
    fni = "%s-%s-%s.in" % (argv[1], argv[2], argv[3])
    fno = "%s-%s-%s.out" % (argv[1], argv[2], argv[3])

    if not os.path.isfile(fni):
        sys.stdout.write('Waiting for input file {}...'.format(fni))
        while not os.path.isfile(fni):
            sys.stdout.flush()
            sleep(1)
            sys.stdout.write(".")
        sleep(1)
        print ''
    fi = open(fni, 'r')

    numcases = readint()
    cases = [(I, read_case()) for I in range(1,1+numcases)]

    mt = False
    if mt:
        print "Running multi-threaded"
        p = Pool(8)
        output = p.map(print_solution, cases)
    else:
        print "Running single-threaded"
        output = map(print_solution, cases)
    print "Elapsed time %f seconds " % (time() - t1)

    if os.path.isfile(fno):
        print 'Verifying against existing results'
        fo = open(fno, 'r')
        oc = re.split('(Case #[0-9]+:\s*)', fo.read())[1:]
        refout = [(A+B).rstrip() for (A,B) in zip(oc[::2], oc[1::2])]
        diffs = 0
        for C in range(numcases):
           if refout[C] != output[C]:
               print '-'*20
               print 'Input {}\nReference Output {}\nGenerated Output {}'.format(cases[C][1], refout[C], output[C])
               print '-'*20
               diffs += 1
        print '{} diffs found'.format(diffs)
    else:
        fo = open(fno, 'w')
        fo.write('\n'.join(output))
        print '{} cases written'.format(len(output))


import sys
sys.setrecursionlimit(10000)
MOD = 10 ** 9 + 7
class StressFreeWin:
    def __init__(self):
        self.memo = {}
        self.memo[(1, 0)] = 1
    def find(self, a, b):
        if a < 0 or b < 0:
            return 0
        if (a, b) in self.memo:
            return self.memo[(a, b)]
        self.memo[(a, b)] = 0
        if a >= b and b > 0:
            self.memo[(a, b)] += self.find(a, b - 1)
        if a - 1 > b:
            self.memo[(a, b)] += self.find(a - 1, b)
        self.memo[(a, b)] %= MOD
        return self.memo[(a, b)]
class StressFulWin:
    def __init__(self, mxB):
        self.memo = {}
        self.mxB = mxB
        self.memo[(0, 1)] = 1
        self.memo[(0, 0)] = 1
    def find(self, a, b):
        if a < 0 or b < 0:
            return 0
        if (a, b) in self.memo:
            return self.memo[(a, b)]
        self.memo[(a, b)] = 0
        if b >= a:
            self.memo[(a, b)] += self.find(a, b - 1)
        if a <= b or b == self.mxB:
            self.memo[(a, b)] += self.find(a - 1, b)
        self.memo[(a, b)] %= MOD
        return self.memo[(a, b)]

stress_free_solver = StressFreeWin()
def solve_tc(a, b):
    global stress_free_solver
    stressful_solver = StressFulWin(b)
    print stress_free_solver.find(a, b), stressful_solver.find(a, b)

t = int(raw_input())
for i in range(1, t + 1):
    print "Case #{0}:".format(i),
    a, b = (int(j) for j in raw_input().split('-'))
    solve_tc(a, b)


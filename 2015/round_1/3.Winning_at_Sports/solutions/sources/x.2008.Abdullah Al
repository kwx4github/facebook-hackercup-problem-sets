#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define pb push_back
#define clean(a,b) memset(a,b,sizeof(a))
#define oo 1<<20
#define dd double
#define ll long long
#define ull unsigned long long
#define ff float
#define EPS 10E-10
#define fr first
#define sc second
#define MAXX 10001000
#define PRIME_N 1000000
#define INFI 1<<30
#define SZ(a) ((int)a.size())
#define all(a) a.begin(),a.end()
#define MODD 1000000007
#define PI (2.0*acos(0))

//int rx[] = {0,-1,0,1,1,-1,-1,0,1}; //four direction x
//int ry[] = {0,1,1,1,0,0,-1,-1,-1};   //four direction y
//int rep[] = {1,1,4,4,2,1,1,4,4,2}; //repet cycle for mod
//void ullpr(){printf("range unsigned long long : %llu\n",-1U);} //for ull
//void ulpr(){printf("range unsigned long : %lu\n",-1U);} //for ull
//void upr(){printf("range unsigned : %u\n",-1U);} //for ull


int dp[2010][2010];



int recFree(int n,int m)
{

	if(n<=m) return 0;

	if(n==1 && m==0) return 1;
	
	int &ret = dp[n][m];

	if(ret!=-1) return ret;

	ret = 0;
	if(n>0)
	ret = (ret + recFree(n-1 , m))%MODD;
	if(m>0)
	ret = (ret + recFree(n , m-1))%MODD;

	return ret;

}


int recStree(int n,int m)
{
	if(n>m || n<0 || m<0) return 0;
	if(n==0 && m==1) return 1;

	int &ret = dp[n][m];

	if(ret!=-1) return ret;

	ret = 0;
	if(n>0)
	ret = (ret + recStree(n-1 , m))%MODD;
	if(m>0)
	ret = (ret + recStree(n , m-1))%MODD;

	return ret;
}

int main(int argc, char const *argv[])
{
	freopen("inC.txt" , "r" , stdin);
	freopen("outC.txt" , "w+" , stdout);
	int tcase,cas=1;

	scanf(" %d",&tcase);

	while(tcase--)
	{
		int n,m;

		scanf(" %d-%d",&n,&m);

		clean(dp,-1);

		int solfree = recFree(n , m);

		clean(dp, -1);
		int solStress = recStree(m-1 , m);

		printf("Case #%d: %d %d\n",cas++ , solfree , solStress );
	}
	return 0;
}
#include <bits/stdc++.h>

using namespace std;

// Typedefs
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

// Macros
#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define FORR(i, a) FOR(i, 0, a)
#define FORE(i, a, b) for(int i = a; i >= b; --i)
#define all(v) v.begin(),v.end()
#define sz(A) int((A).size())
#define CLR(x, a) memset(x, a, sizeof(x))
#define pb push_back
#define mp make_pair

// Constantes
const double PI = 2*asin(1.0);
const int INF = 1000000000;	// 9 zeros
const double EPS = 1e-10;

// Matematica basica
inline int cmp(double x, double y = 0, double tol = EPS) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1; }

struct point {
	double x, y;
	point(double _x = 0.0, double _y = 0.0) { x = _x; y = _y; }
};
bool operator < (const point lhs, const point rhs) {
		if(cmp(lhs.x - rhs.x) != 0) return lhs.x < rhs.x;
		return lhs.y < rhs.y;
}

// Produtos escalar e vetorial entre os vetores AB e BC
double dot(point a, point b, point c) {
	return ( (b.x-a.x)*(c.x-b.x) + (b.y-a.y)*(c.y-b.y) ); }
double cross(point a, point b, point c) {
	return ( (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x) ); }

// Primitivas de orientação: segmento direcionado AB e ponto C
bool collinear(point a, point b, point c) { return cmp( cross(a, b, c) ) == 0; }
bool left(point a, point b, point c) { return cmp( cross(a, b, c) ) > 0; }

const int MAXN = 2003;

const int MOD = 1000000007;

int pd1[MAXN][MAXN], pd2[MAXN][MAXN];

int solve1 (int x, int y) {
	if (x<=y) return 0;
	if (y<0) return 0;
	if (x<0) return 0;
	if (x==1 && y==0) return 1;
	if (pd1[x][y]==-1) pd1[x][y] = (solve1(x-1, y) + solve1(x, y-1)) % MOD;
	return pd1[x][y];	
}

int solve2 (int x, int y) {
	if (x>y) return 0;
	if (y<0) return 0;
	if (x<0) return 0;
	if (x==0 && y==1) return 1;
	if (pd2[x][y]==-1) pd2[x][y] = (solve2(x-1, y) + solve2(x, y-1)) % MOD;
	return pd2[x][y];
}

int main () {
	int T;
	scanf (" %d" , &T);
	memset (pd1, -1, sizeof pd1);
	memset (pd2, -1, sizeof pd2);
	FORR (c, T) {
		int A, B;
		scanf (" %d-%d", &A, &B);
		printf ("Case #%d: %d %d\n", c+1, solve1(A, B), solve2(B-1, B)); 
	}
}

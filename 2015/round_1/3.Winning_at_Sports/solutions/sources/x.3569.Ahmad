import java.io.*;
import java.util.*;


public class SolutionC {
	
	public void solve(){
		int t = nextInt();
		int MAX = 2001;
		int MOD = 1000000007;
		int[][] dp = new int[MAX][MAX];
		for(int i = 1 ; i < MAX ; i++) {dp[i][0] = 1; dp[0][i] = 1;}
		for(int i = 1 ; i < MAX ; i++){
			for(int j = 1 ; j < MAX ; j++) {
				if(i > j){
					dp[i][j] = dp[i][j-1];
					if(i-1 > j)
						dp[i][j] += dp[i-1][j];
					dp[i][j] %= MOD;
				}else{
					dp[i][j] = dp[i-1][j];
					if(j-1 >= i)
						dp[i][j] += dp[i][j-1];
					dp[i][j] %= MOD;
				}
			}
		}
		for(int k = 0 ; k < t ; k++){
			int A = nextInt(), B = nextInt();
			out.println("Case #"+(k+1)+": "+dp[A][B]+" "+dp[B][B]);
		}
	}
	public void run(){
		try {
			bf = new BufferedReader(new InputStreamReader(new FileInputStream("C.txt")));
			out = new PrintWriter(new File("out.txt")); 
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		solve();
		out.close();
	}
	public static void main(String args[]){
		new SolutionC().run();
	}
	public double nextDouble(){
		return Double.parseDouble(nextString());
	}
	BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	PrintWriter out = new PrintWriter(System.out);
	String line;
	StringTokenizer st;
	public String nextLine(){
		try {
			line = bf.readLine();
			st = new StringTokenizer(line);
		} catch (IOException e) {
			return null;
		}
		return line;
	}
	public String nextString(){
		while (st == null || !st.hasMoreElements()) {
            try {
                line = bf.readLine();
                st = new StringTokenizer(line, " -");
            } catch (IOException e) {
                return null;
            }
        }
        return st.nextToken();
	}
	public int nextInt(){
		return Integer.parseInt(nextString());
	}
	public long nextLong(){
		return Long.parseLong(nextString());
	}
}

#if defined(__GNUG__) && !defined(__clang__)
#include <bits/stdc++.h>
#endif

#define inf(T) (numeric_limits<T>::min())
#define sup(T) (numeric_limits<T>::max())
#define rep(i,n) for (int i = 0; i < (n); i++)
#define asc(c) begin(c), end(c)
#define desc(c) reverse_iterator<decltype(c)::iterator>(c.end()), reverse_iterator<decltype(c)::iterator>(c.begin())
#define ascend(l,r) l = max(l, r)
#define descend(l,r) l = min(l, r)
#define mp(...) make_pair(__VA_ARGS__)
#define mt(...) make_tuple(__VA_ARGS__)

using namespace std;

using ll = long long;
using ld = long double;

const ll MOD = 1e9 + 7;

template <class Key>          using uset = unordered_set<Key>;
template <class Key, class T> using umap = unordered_map<Key, T>;

ll stress_free(int a, int b)
{
  vector<vector<ll>> dp(2002, vector<ll>(2002));
  dp[0][0] = 1;
  rep(i,a+1) rep(j,b+1) {
    (dp[i + 1][j] += dp[i][j]) %= MOD;
    if (i <= j + 1) continue;
    (dp[i][j + 1] += dp[i][j]) %= MOD;
  }
  return dp[a][b];
}

ll stressful(int a, int b)
{
  a = b;
  vector<vector<ll>> dp(2002, vector<ll>(2002));
  dp[0][0] = 1;
  rep(i,a+1) rep(j,b+1) {
    (dp[i][j + 1] += dp[i][j]) %= MOD;
    if (i + 1 > j) continue;
    (dp[i + 1][j] += dp[i][j]) %= MOD;
  }
  return dp[a][b];
}

int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);

  int T;
  cin >> T;
  rep(t,T) {
    string s;
    cin >> s;
    int a = stoi(s.substr(0, s.find('-')));
    int b = stoi(s.substr(s.find('-') + 1));

    cout << "Case #" << t + 1 << ": " << stress_free(a, b) << " " << stressful(a, b) << endl;
  }

  return 0;
}

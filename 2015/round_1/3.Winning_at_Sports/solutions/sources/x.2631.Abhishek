#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<cmath>

#define fbprint(q,z) cout<<"Case #"<<q<<": "<<z<<endl  
#define Int64 long long int 
#define Uint64 unsigned long long 
#define rni(q,n) for(int q=0;q<n;q++)
#define ri(q,n) for(int q=1;q<=n;q++)
#define power2(x) (x&&(x&(x-1)) 
#define pb push_back
using namespace std;
long long fact[100001];
int fast_pow(long long base, long long n,long long M)
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    long long halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}
int findMMI_fermat(int n,int M)
{
    return fast_pow(n,M-2,M);
}
void facto()
{
    fact[0]=1;
    int i=1;
    int MOD=1000000007;
    while(i<=100000)
    {
        fact[i]=(fact[i-1]*i)%MOD;
        i++;
    }

}
 
long long combi(int n,int r,int MOD){
        long long numerator,denominator,mmi_denominator,ans;
        //I declared these variable as long long so that there is no need to use explicit typecasting
        numerator=fact[n];
        denominator=(fact[r]*fact[n-r])%MOD;
        mmi_denominator=findMMI_fermat(denominator,MOD);
        ans=(numerator*mmi_denominator)%MOD;
   return ans;
}

int main()

{
facto();
int t;
cin>>t;
ri(zz,t)
{
string s;
int n1=0,n2=0,sep,c=0,fr=0;
cin>>s;
for(sep=s.length()-1;sep>=0;sep--)
{if(s[sep]=='-')
	{c=1;fr=0;continue;}
if(c)
n1+=(s[sep]-'0')*pow(10,fr++);
else
n2+=(s[sep]-'0')*pow(10,fr++);
}
long long int mul=n1-n2;
long long int div=n1+n2;
long long ans=0,ans2=0,ans3=0;
ans=combi(n1+n2,n1,1000000007);
						//ans2= combi(n2+n2-1,n2-1,1000000007);
ans2=combi(n2+n2,n2,1000000007);
ans3=findMMI_fermat(n2+1,1000000007);						//ans3=combi(n2+n2-1,n2,1000000007);
ans=(ans*mul)%1000000007;
						//ans2=(ans*(div-mul))%1000000007;

div=findMMI_fermat(div,1000000007);
ans=(ans*div)%1000000007;
ans2=(ans2*ans3)%1000000007;
if(n2==0)
ans2=0;							//ans2=(ans2*div)%1000000007;
cout<<"Case #"<<zz<<": "<<ans<<" "<<ans2<<endl;			//(1000000007-ans3+ans2)%1000000007<<endl;

}
return 0;
}
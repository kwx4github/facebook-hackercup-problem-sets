#include <iostream>
#include <sstream>
#include <numeric>
#include <set>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <strings.h>
#include <string.h>

using namespace std;

const long MAX_SCORE = 2000;
long dpStressFree[MAX_SCORE+1][MAX_SCORE+1];
long dpStressful[MAX_SCORE+1][MAX_SCORE+1];
long Modulo = 1000000007;

long getStressFree(long s1, long s2){
	if (dpStressFree[s1][s2] != -1){
		return dpStressFree[s1][s2];
	}
	long count = 0;
	long dS1[] = {0, -1};
	long dS2[] = {-1, 0};
	for (long i = 0; i <= 1; i++){
		long newS1 = s1 + dS1[i];
		long newS2 = s2 + dS2[i];
		if ((newS1 < 0) || (newS2 < 0)){
			continue;
		}
		if ( ((newS1 == 0) && (newS2 == 0)) || (newS1 > newS2) ){
			count += getStressFree(newS1, newS2);
			count %= Modulo;
		} 
	}
	dpStressFree[s1][s2] = count;
	return dpStressFree[s1][s2];
}

long getStressful(long s1, long s2, long finalScore){
	if (dpStressful[s1][s2] != -1){
		return dpStressful[s1][s2];
	}
	long count = 0;
	long dS1[] = {0, -1};
	long dS2[] = {-1, 0};
	for (long i = 0; i <= 1; i++){
		long newS1 = s1 + dS1[i];
		long newS2 = s2 + dS2[i];
		if ((newS1 < 0) || (newS2 < 0)){
			continue;
		}
		if ( ((newS1 == 0) && (newS2 == 0)) || (newS1 <= newS2) || (newS2 == finalScore)){
			count += getStressful(newS1, newS2, finalScore);
			count %= Modulo;
		} 
	}
	dpStressful[s1][s2] = count;
	return dpStressful[s1][s2];
}

int main(){
	int tests;
	cin >> tests;
	for (int t = 1; t <= tests; t++){
		long s1, s2;
		char trash;
		cin >> s1 >> trash >> s2;
		for (int i = 0; i <= s1; i++){
			for (int j = 0; j <= s2; j++){
				dpStressFree[i][j] = -1;
				dpStressful[i][j] = -1;
			}
		}
		dpStressFree[0][0] = 1;
		dpStressful[0][0] = 1;
		cout << "Case #" << t << ": " << getStressFree(s1, s2) << " " << getStressful(s1, s2, s2) << endl;
	}
}

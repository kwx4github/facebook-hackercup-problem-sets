import java.io.*;
import java.util.*;

public class WinningAtSports {
    public static long stressfree = 0;
    public static long stress = 0;

    public static int myTeam;
    public static int opp;
    public static void main(String [] args) {

        // The name of the file to open.
        String inputFileName = "WinningAtSports_input.txt";
        String outputFileName = "WinningAtSports_output.txt";

        String[] answers = processFile(inputFileName);


        writeToFile(answers, outputFileName);

    }


    public static void writeToFile(String[] answer, String fileName){
        String line = null;
        try {
            PrintWriter out = new PrintWriter(fileName);

            for (int i = 0; i < answer.length ; i++) {
                line = answer[i];
                if (line != null){
                    out.println(line);
                }
            }

            out.close();

        } catch (FileNotFoundException e){
            System.out.println("FileNotFoundException");
        }

    }

public static int arSearch(int [ ] numbers, int start, int end, int key)
{
       for (int index = start; index <= end; index++)
      {
           if ( numbers[index] == key ) 
                 return index;  //We found it!!!
      }
     // If we get to the end of the loop, a value has not yet
     // been returned.  We did not find the key in this array.
     return -1;
}


    public static String[] processFile(String fileName){

        String[] answers = null;
       try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            int numCases = Integer.parseInt(bufferedReader.readLine());
            answers = new String[numCases];

            for (int i=0;i<numCases;i++) {
            	String score = bufferedReader.readLine();
            	String[] tempscore = score.split("-");

            	myTeam = Integer.parseInt(tempscore[0]);
                opp = Integer.parseInt(tempscore[1]);
                
                //System.out.println("myTeam = " + myTeam + " opp = " + opp);

                stressfree = 0;
                stress = 0;

				answers[i] = "Case #" + (i + 1) + ": " + processCase();
                System.out.println(answers[i]);
            }


            bufferedReader.close();            

        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                   
            // Or we could just do this: 
            // ex.printStackTrace();
        }

        return answers;

    }



    public static String processCase(){
       /* long stressfree = 0;
        long stress = 0;
        for(int i=1;i<=myTeam;i++){
            for (int j=1;j<=opp;j++){
                if (myTeam > opp){
                    stressfree++;
                } else {
                    stress++;
                }
            }
        }*/

        calculateStress();
        return (stressfree%1000000007) + " " + (stress%1000000007) ;

    }


    public static void calculateStress(){

        recStree(0, 0, true);
        recStree(0, 0, false);

    }

    public static void recStree(int curMyTeam, int curOpp, boolean isStressed){
        //System.out.println("calling recStree with curMyTeam = " + curMyTeam + " curOpp = " + curOpp + " isStressed = " + isStressed + "  myTeam = " + myTeam + " opp = " + opp);
        if (((myTeam >= curMyTeam) && (opp > curOpp)) || ((myTeam > curMyTeam) && (opp >= curOpp))){
            //System.out.println("Inside if");
            //Case 1
            int u = 1;
            int o = 0;
            callrecStree(curMyTeam, curOpp, isStressed, u, o);

            //Case 2
            u = 0;
            o = 1;
            callrecStree(curMyTeam, curOpp, isStressed, u, o);

        } else {
            //System.out.println("Increasing count with curMyTeam = " + curMyTeam + " curOpp = " + curOpp + " isStressed = " + isStressed);
            if (isStressed){
                //System.out.println("Increasing stress");
                stress++;
            } else {
                stressfree++;
            }

        }
    }

    public static void callrecStree(int curMyTeam, int curOpp, boolean isStressed, int u, int o){
            if (((curMyTeam + u) <= myTeam) && (curOpp + o) <= opp){
                if (isStressed){
                    if (opp == (curOpp + o)){
                        stress++;
                        return;
                    }
                    if (((curMyTeam + u) <= (curOpp + o))){
                        //System.out.println("inside if");
                        recStree((curMyTeam + u), (curOpp + o), isStressed);
                    }
                } else {
                    if ((curMyTeam + u) > (curOpp + o)){
                        if (opp == (curOpp + o)){
                            stressfree++;
                            return;
                        }
                        recStree((curMyTeam + u), (curOpp + o), isStressed);
                    }                    
                }

            }
    }
 
}
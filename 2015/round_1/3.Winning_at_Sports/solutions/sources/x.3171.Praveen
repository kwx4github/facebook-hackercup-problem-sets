#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<sstream>
#define sp(z) setprecision(z)
#define sv(z) sort(z.begin(),z.end())
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double 
#define si(z) scanf("%d",&z)
#define sl(z) scanf("%Ld",&z)
#define sd(z) scanf("%Lf",&z)
#define sc(z) scanf("%c",&z)
#define fr(y,q,s) for(int y=q;y<s;y++)
#define f(y,z) for(int y=0;y<z;y++)
#define fe(y,z) for(int y=1;y<=z;y++)
using namespace std;
ll min(ll a,ll b){ return (a<b)?a:b; }
ll max(ll a,ll b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
int primes[1000001];
void sieve(){ f(i,1000001) primes[i]=1;for(int i=2;i<=32000;i++) { if(primes[i])for(int j=2;(i*j)<=1000000;j++)primes[i*j]=0; }}
ll mod = 1000000007;
ll memo[3000][3000];

ll solve(ll x,ll y)
{
	ll &res = memo[x][y];
	if(res!=-1) return res;
	if(y>=x) 
	{
		res=0;
		return 0;
	}
	if(y<=0) 
	{
		res=1;
		return 1;
	}
	ll s1 = solve(x-1,y);
	ll s2 = solve(x,y-1);
	res =(s1+s2)%mod;
	return res;
}

ll solve2(ll x,ll y)
{
        ll &res = memo[x][y];
        if(res!=-1) return res;
        if(y>x)
        {
                res=0;
                return 0;
        }
        if(y<=0)
        {
                res=1;
                return 1;
        }
        ll s1 = solve2(x-1,y);
        ll s2 = solve2(x,y-1);
        res =(s1+s2)%mod;
        return res;
}

int main()
{
	int t;
	si(t);
	fe(tc,t)
	{
		printf("Case #%d: ",tc);
		int x,y;
		si(x);getchar();si(y);
		f(i,2001) f(j,2001) memo[i][j]=-1;
		ll answer = solve(x,y)%mod;
		printf("%lld ",answer);
		f(i,2001) f(j,2001) memo[i][j]=-1;
		answer = solve2(y,y-1)%mod;
	        printf("%lld\n",answer);	
	}
	return 0;
}

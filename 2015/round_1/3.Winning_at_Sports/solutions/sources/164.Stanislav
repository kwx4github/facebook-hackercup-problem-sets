#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
//#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 12000000;
typedef long long LL;
const LL MOD = 1000000000 + 7;


LL fre[2010][2010], ful[2010][2010];

int rec_fre(int a, int b)
{
	if (fre[a][b] != -1) return fre[a][b];
	if (a == 0 && b == 0) return 1;
	LL result = 0;

	if (b == 0)
	{
		return rec_fre(a - 1, b);
	}

	if (a > b + 1)
	{
		result += rec_fre(a - 1, b);
		result %= MOD;
	}

		result += rec_fre(a, b - 1);
		result %= MOD;
		return fre[a][b] = result;
}

int rec_ful(int a, int b)
{
	if (ful[a][b] != -1) return ful[a][b];
	if (a == 0 && b == 0) return 1;
	LL result = 0;

	if (a > b) return rec_ful(a - 1, b);
	if (a == 0) return rec_ful(a, b - 1);

	if (b > a)
	{
		result += rec_ful(a, b - 1);
		result %= MOD;
	}

	result += rec_ful(a - 1, b);
	result %= MOD;
	return ful[a][b] = result;
}

int main()
{
//#ifdef _DEBUG || _RELEASE
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
//#else
	//freopen("html.in", "r", stdin); freopen("html.out", "w", stdout);
//#endif
	int T;
	cin>>T;
	mems(fre, -1);
	mems(ful, -1);

	for(int i = 1; i <= 2000; ++i)
	{
		for(int j = 0; j < i; ++j)
		{
			fre[i][j] = rec_fre(i, j);
			ful[i][j] = rec_ful(i, j);
		}
	}

	forn(caze, 0, T)
	{
		int ans = 0;
		int a,b;
		cin>>a>>b;
		b = -b;
		cout<<"Case #"<<caze + 1<<": "<<fre[a][b]<<" "<<ful[a][b]<<endl;
	}
	return 0;
}
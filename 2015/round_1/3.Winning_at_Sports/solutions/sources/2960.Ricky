#include <cstdio>
#include <queue>
#include <vector>
#define MOD 1000000007
#define INF 4000000000
using namespace std;

typedef long long LL;

struct ST {
	LL winner, loser;
};

int main() {
	int t;
	
	freopen("out3.txt", "w", stdout);
	freopen("in3.txt", "r", stdin);
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		LL w, l;
		queue<ST> que;
		vector< vector<LL> > dp;
		ST temp, temp2;
		
		scanf("%lld-%lld", &w, &l);
		printf("Case #%d: ", tc);
		dp.resize(w + 5);
		for (int i = 0; i <= w; i++) {
			dp[i].resize(l + 5);
			for (int j = 0; j <= l; j++)
				dp[i][j] = INF;
		}
		dp[1][0] = 1;
		temp.winner = 2;
		temp.loser = 0;
		que.push(temp);
		while (! que.empty()) {
			temp = que.front();
			que.pop();
			
			if ((temp.winner > w) || (temp.loser > l)
					|| (temp.winner < 0) || (temp.loser < 0)
					|| (temp.loser >= temp.winner)
					|| (dp[temp.winner][temp.loser] < INF))
				continue;
			
			dp[temp.winner][temp.loser] = 0;
			if (temp.winner - 1 > temp.loser) {
				dp[temp.winner][temp.loser] += dp[temp.winner - 1][temp.loser];
				dp[temp.winner][temp.loser] %= MOD;
			}
			if (temp.loser - 1 >= 0) {
				dp[temp.winner][temp.loser] += dp[temp.winner][temp.loser - 1];
				dp[temp.winner][temp.loser] %= MOD;
			}
			if (temp.winner + 1 <= w) {
				temp2 = temp;
				temp2.winner++;
				que.push(temp2);
			}
			if ((temp.loser + 1 < w) && (temp.loser + 1 <= l)) {
				temp2 = temp;
				temp2.loser++;
				que.push(temp2);
			}
		}
		printf("%lld ", dp[w][l]);
		
		if (l == 0) {
			printf("1\n");
			continue;
		}
		for (int i = 0; i <= w; i++) {
			for (int j = 0; j <= l; j++)
				dp[i][j] = INF;
		}
		dp[0][0] = 1;
		temp.winner = 0;
		temp.loser = 1;
		que.push(temp);
		while (! que.empty()) {
			temp = que.front();
			que.pop();
			
			if ((temp.winner > w) || (temp.loser > l)
					|| (temp.winner < 0) || (temp.loser < 0)
					|| ((temp.loser < l) && (temp.winner > temp.loser))
					|| (dp[temp.winner][temp.loser] < INF))
				continue;
			
			dp[temp.winner][temp.loser] = 0;
			if (temp.winner - 1 >= 0) {
				dp[temp.winner][temp.loser] += dp[temp.winner - 1][temp.loser];
				dp[temp.winner][temp.loser] %= MOD;
			}
			if (temp.loser - 1 >= temp.winner) {
				dp[temp.winner][temp.loser] += dp[temp.winner][temp.loser - 1];
				dp[temp.winner][temp.loser] %= MOD;
			}
			if ((temp.winner >= l) && (temp.loser >= l)) {
				printf("%lld\n", dp[l][l]);
				break;
			}
			if ((temp.winner + 1 <= temp.loser) && (temp.winner + 1 <= w)) {
				temp2 = temp;
				temp2.winner++;
				que.push(temp2);
			}
			if (temp.loser + 1 <= l) {
				temp2 = temp;
				temp2.loser++;
				que.push(temp2);
			}
		}
	}
	fclose(stdout);
	fclose(stdin);
	return 0;
}

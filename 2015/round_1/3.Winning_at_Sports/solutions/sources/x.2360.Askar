// Dark Side of Elephant
// Askar

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <algorithm>
#include <utility>
#include <tuple>
#include <complex>
#include <cmath>
#include <sys/types.h>
#include <unistd.h>
#include <cassert>

using namespace std;

#define FOR(i, N) for(auto i=(N)-(N); i<(N); i++)
#define FOR1(i, N) for(auto i=(N)-(N)+1; i<=(N); i++)
#define FOREACH(it, a) for(auto it=(a).begin(); it!=(a).end(); it++)
#define MAXIM(a,b) a=max(a, static_cast<__typeof__(a)>(b))
#define MINIM(a,b) a=min(a, static_cast<__typeof__(a)>(b))
#define beginend(a) (a).begin(), (a).end()
#define pf printf
#define sf scanf
#define mp make_pair
#define mt make_tuple
#define pass
#define sqr(x) ((x)*(x))
typedef long long ll;
typedef pair<long long, long long> pll;
typedef pair<int, int> pii;
const long long INF = 1e9;
const double EPS = 1e-9;

#define dbg if(false)
#ifdef EBUG
    #undef dbg
    #define dbg if(true)
#endif

#define epf(...) fprintf(stderr, __VA_ARGS__)
#define dpf(...) dbg epf(__VA_ARGS__)
#define db(x) dbg cerr << #x << ":\t" << (x) << endl 

const int max_score = 2000;
const int NONE = -1;
const ll MOD = 1000*1000*1000 + 7;

vector<vector<ll> > stressfree_memo(vector<vector<ll> >(max_score+1, vector<ll>(max_score, NONE)));
ll stressfree(const int a, const int b){
    // how many ways to achieve such result
    if(a < 0 || b < 0) return 0;
    if(a == 1 && b == 0) return 1; // the only valid starting point
    if(a <= b) return 0; // invalid score

    if(stressfree_memo[a][b] != NONE) return stressfree_memo[a][b];
    
    return stressfree_memo[a][b] = (stressfree(a-1, b) + stressfree(a, b-1))%MOD;
}

vector<vector<ll> > stressful_memo(vector<vector<ll> >(max_score+1, vector<ll>(max_score, NONE)));
ll stressful(const int a, const int b){
    // how many ways to achieve such results
    if(a < 0 || b < 0) return 0;
    if(a == 0 && b == 1) return 1; // the only valid starting point  
    if(a > b) return 0; // invalid score

    if(stressful_memo[a][b] != NONE) return stressful_memo[a][b];

    return stressful_memo[a][b] = (stressful(a-1, b) + stressful(a, b-1))%MOD;
}   

int main(){
    int T;
    sf(" %i", &T);
    FOR1(case_number, T){
        int x, y;
        sf(" %i-%i", &x, &y);
        db(case_number);
        db(x); db(y);
        pf("Case #%i: %lli %lli\n", case_number, stressfree(x, y), stressful(y, y));
    }
}

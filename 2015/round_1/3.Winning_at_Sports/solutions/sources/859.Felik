#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <utility>
#include <stack>
#include <queue>
#include <map>
#include <set>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int> 
#define pdd pair<double,double>
#define ll long long

#define PI 2*acos(0.0)
#define EPS 1e-9
#define INF 1000000000

using namespace std;

const int MOD = 1000000007;

int dp[2004][2004];
int T, A, B, total;

int solve_free(int cur_A, int cur_B)
{
	if(cur_A == A && cur_B == B) return 1;
	if(cur_A + cur_B == total && (cur_A != A || cur_B != B)) return 0;
	if(dp[cur_A][cur_B] != -1) return dp[cur_A][cur_B];
	
	int &ret = dp[cur_A][cur_B] = 0;
	
	// case 1: we scored
	if(cur_A < A) ret = (ret + solve_free(cur_A + 1, cur_B)) % MOD;
	
	// case 2: opponent scored, as long as the scores don't tie
	if(cur_B < B && cur_B + 1 < cur_A) ret = (ret + solve_free(cur_A, cur_B + 1)) % MOD;
	
	return ret;
}

int solve_ful(int cur_A, int cur_B)
{
	if(cur_A == A && cur_B == B) return 1;
	if(cur_A + cur_B == total && (cur_A != A || cur_B != B)) return 0;
	if(dp[cur_A][cur_B] != -1) return dp[cur_A][cur_B];
	
	int &ret = dp[cur_A][cur_B] = 0;
	
	// case 1: opponent scored
	if(cur_B < B) ret = (ret + solve_ful(cur_A, cur_B + 1)) % MOD;
	
	// case 2: we scored, as long as the we don't lead UNTIL opponent reached final score
	if(cur_A < A && (cur_B == B || (cur_B < B && cur_A + 1 <= cur_B)))
		ret = (ret + solve_ful(cur_A + 1, cur_B)) % MOD;
		
	return ret;
}

int main()
{
	scanf("%d", &T);
	for(int t = 1; t <= T; t++)
	{
		scanf("%d-%d", &A, &B);
		total = A + B;
		
		memset(dp, -1, sizeof(dp));
		int stressfree = solve_free(0, 0);
		
		memset(dp, -1, sizeof(dp));
		int stressful = solve_ful(0, 0);
		
		printf("Case #%d: %d %d\n", t, stressfree, stressful);
	}
	return 0;
}


#include <cstring>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

using namespace std;

int LIMIT = 2005;

vector<string> &split(const string &s, char delim, vector<string> &elems) {
    stringstream ss(s);
    string item;
    while (getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}


vector<string> split(string &s, char delim) {
    vector<string> elems;
    split(s, delim, elems);
    return elems;
}

int main() {
    vector< vector < long > > dpA (LIMIT, vector< long >(LIMIT, 0));
    vector< vector < long > > dpB (LIMIT, vector< long >(LIMIT, 0));
    for (int ii=1; ii<LIMIT; ii++) {
        dpA[ii][0] = 1;
    }

    for (int ii=1; ii<LIMIT; ii++) {
        for (int jj=1; jj<ii; jj++) {
            dpA[ii][jj] += (dpA[ii-1][jj] + dpA[ii][jj-1]) % 1000000007;
        }
    }

    for (int ii=1; ii<LIMIT; ii++) {
        dpB[0][ii] = 1;
    }

    for (int ii=1; ii<LIMIT; ii++) {
        for (int jj=ii; jj<LIMIT; jj++) {
            dpB[ii][jj] += (dpB[ii-1][jj] + dpB[ii][jj-1]) % 1000000007;
        }
    }
    
    int tc;
    cin >> tc;
    for (int ii=1; ii<=tc; ii++) {
        string ss;
        cin >> ss;
        vector<string> arrvec = split(ss, '-');
        int left = atoi(arrvec[0].c_str());
        int right = atoi(arrvec[1].c_str());
        cout << "Case #"<< (ii)<<": " << dpA[left][right] << " " << dpB[right][right] << endl;
    }
    return 0;
}

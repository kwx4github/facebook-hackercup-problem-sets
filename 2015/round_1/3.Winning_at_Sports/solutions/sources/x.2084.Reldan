package hackercup.first

import scala.io.Source

object Game extends App {

  var freeCache = collection.mutable.Map.empty[(Int, Int), Int]
  var stressCache = collection.mutable.Map.empty[(Int, Int), Int]

  def freeGame(you: Int, enemy: Int): Int = {
    if (enemy >= you || enemy < 0 || you < 1)
      0
    else if (enemy == 0 && you == 1)
      1
    else {
      val a = freeCache.get((you, enemy))
      a.getOrElse {
        val res = (freeGame(you - 1, enemy) + freeGame(you, enemy - 1)) % 1000000007
        freeCache += (you, enemy) -> res
        res
      }
    }
  }

  def stressGame(you: Int, enemy: Int): Int = {
    if (enemy < you || enemy < 1 || you < 0)
      0
    else if (enemy == 1 && you == 0)
      1
    else {
      val a = stressCache.get((you, enemy))
      a.getOrElse {
        val res = (stressGame(you - 1, enemy) + stressGame(you, enemy - 1)) % 1000000007
        stressCache += (you, enemy) -> res
        res
      }
    }
  }

  var source = Source.fromURL(getClass.getResource("/sport.txt")).getLines().toList

  source.tail.map { i =>
    val Array(y, e) = i.split("-").map(_.toInt)
    (freeGame(y, e), stressGame(e, e))
  }.zipWithIndex.foreach{
    case ((a, b), index) => println(s"Case #${index + 1}: $a $b")
  }
}

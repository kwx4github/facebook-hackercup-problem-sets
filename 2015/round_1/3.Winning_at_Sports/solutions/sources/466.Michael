import java.util.*;
public class c {
public static void main(String[] args)
{
	Scanner input = new Scanner(System.in);
	int[] cat = catalan(2001);
	memo = new long[2001][2001];
	int T = input.nextInt();
	for(int t = 0; t<T; t++)
	{
		for(long[] A: memo) Arrays.fill(A, -1);
		String s = input.next();
		a = Integer.parseInt(s.substring(0, s.indexOf('-')));
		b = Integer.parseInt(s.substring(1+s.indexOf('-')));
		System.out.println("Case #" + (t+1)+": "+go(1, 0)+" "+cat[b]);
	}
}
static int a, b;
static int mod = (int)(1e9+7);
static long[][] memo;
static long go(int myScore, int theirScore)
{
	if(myScore+theirScore == a+b) return 1;
	if(memo[myScore][theirScore] != -1) return memo[myScore][theirScore];
	if(theirScore > myScore) return 0;
	long res = 0;
	if(myScore < a) res = (res + go(myScore+1, theirScore))%mod;
	if(myScore > 1 + theirScore && theirScore < b) res = (res + go(myScore, theirScore+1))%mod;
	return memo[myScore][theirScore] = res;
}
//Returns array of first n Catalan numbers over modulus - O(n^2)
//First few are 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796.
//Closed form is [(2n)C(n)]/(n+1)
//Linear recurrence is C_(n+1) = C_n*(4n+2)/(n+2)
public static int[] catalan(int n)
{
	int[] res = new int[n+1];
	res[0] = 1;
	for(int i = 0; i<=n; i++)
		for(int j = 0; j<i; j++)
			res[i] = (int)((res[i] + ((long)res[j]*res[i-j-1]))%mod);
	return res;
}
}

#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<cctype>
#include<cassert>
#include<cstring>
//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<string>
#include<stack>
#include<bitset>
//IOs
#include<iostream>
//algorithm & miscellaneous
#include<algorithm>
#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define sz(v) (int)v.size()
#define _(a, x) memset(a, x, sizeof(a))
#define f(x) __builtin_popcount(x)
int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};

const ll mod = 1000000007ll;

using namespace std;

int c1, c2;
ll dp2[2001][2001], dp[2001][2001];


ll doit(int x, int y)
{
	if(x == c1 and y == c2)return 1;

	if(x > c1 or y > c2)return 0;

	ll &ret = dp[x][y];

	if(ret != -1)return ret;

	ret = 0;

	ret += doit(x + 1, y);

	ret %= mod;

	if(y + 1 < x)ret += doit(x, y + 1), ret %= mod;

	return ret; 
}
ll doit2(int x, int y)
{
	if(x == c1 and y == c2)return 1;

	if(x > c1 or y > c2)return 0;

	ll &ret2 = dp2[x][y];

	if(ret2 != -1)return ret2;

	ret2 = 0;

	ret2 += doit2(x, y + 1);

	ret2 %= mod;

	if(x+1 <= y or y == c2)
		ret2 += doit2(x + 1, y), ret2 %= mod;

	return ret2;
}
int main()
{
	int t = GI;

	for(int tt=1;tt<=t;tt++)
	{
		string s;
		cin>>s;

		int n = sz(s), j = 0;
		
		c1 = 0, c2 = 0;

		for(j=0;(s[j] != '-');j++)
			c1 = c1*10 + (s[j] - '0');
		
		for(int i=j+1;i<n;i++)
			c2 = c2*10 + (s[i] - '0');	

		memset(dp, -1, sizeof dp);
		memset(dp2, -1, sizeof dp2);
	
		printf("Case #%d: %lld %lld\n",tt, doit(0, 0), doit2(0, 0));
	}

	return 0;
}

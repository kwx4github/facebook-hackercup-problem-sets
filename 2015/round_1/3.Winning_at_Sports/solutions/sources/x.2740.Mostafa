#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>

using namespace std;

#define MIN(a,b) ((a < b)?a:b)

int arr[2][3000];
// assume maximum is 3000
int choose(int n,int r,int mod)
{
	for(int i = 0;i <= n;i++)
	{
		arr[0][i] = arr[1][i] = 1;
	}
	for(int i = 2;i <= n;i++)
	{
		for(int j = 1;j < i;j++)
		{
			arr[i&1][j] = (arr[(i + 1)&1][j] + arr[(i + 1)&1][j - 1]) % mod;
		}
	}
	return arr[n&1][r];
}

/* This function return the gcd of a and b followed by
    the pair x and y of equation ax + by = gcd(a,b)*/
pair<int, pair<int, int> > extendedEuclid(int a, int b) {
    int x = 1, y = 0;
    int xLast = 0, yLast = 1;
    int q, r, m, n;
    while(a != 0) {
        q = b / a;
        r = b % a;
        m = xLast - q * x;
        n = yLast - q * y;
        xLast = x, yLast = y;
        x = m, y = n;
        b = a, a = r;
    }
    return make_pair(b, make_pair(xLast, yLast));
}
 
int modInverse(int a, int m) {
    return (extendedEuclid(a,m).second.first + m) % m;
}

int dp[2001][2001];

int solveDP(int s1,int s2,int mod)
{
	for(int i = 0;i <= s2;i++)
	{
		for(int j = 0;j <= i;j++)
		{
			dp[i][j] = 0;
		}
	}
	dp[0][1] = 1;
	for(int j = 2;j <= s1;j++)
	{
		dp[0][j] = 1;
		for(int i = 1;i < MIN(s2 + 1, j);i++)
		{
			dp[i][j] = (dp[i - 1][j] + dp[i][j - 1])%mod;
		}
	}
	return dp[s2][s1];
}

int main()
{
	int t;
	cin >> t;
	for(int ti = 1;ti <= t;ti++)
	{
		int s1,s2;
		scanf("%d-%d",&s1,&s2);
		int stress = choose(2*s2,s2,1000000007) - choose(2*s2,s2 + 1,1000000007);
		if(stress < 0)
		{
			stress += 1000000007;
		}
		if(s2 == 0)
		{
			stress = 0;
		}
		long long stress_less = choose(s1+s2,s1,1000000007);
		stress_less = (stress_less * (s1 - s2)) % 1000000007;
		stress_less = (stress_less * modInverse(s1+s2,1000000007)) % 1000000007;
		//cout << solveDP(s1,s2,1000000007) << endl;
		printf("Case #%d: %d %d\n",ti,(int)stress_less, stress);
	}
	return 0;
}
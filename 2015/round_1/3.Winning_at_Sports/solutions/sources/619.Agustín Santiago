#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

typedef long long tint;
typedef pair<int,int> pint;

const int MAX = 2048;

const tint MODU = 1000000007;

tint stressFree[MAX][MAX], stressful[MAX][MAX];

int main()
{
    int TT; cin >> TT;
    forn(tt,TT)
    {
        int a,b; char dash; cin >> a >> dash >> b;
        dforn(i, a+1)
        dforn(j, b+1)
        {
            if (i == a && j == b)
            {
                stressFree[i][j] = 1;
                stressful [i][j] = 1;
            }
            else
            {
                stressFree[i][j] = 0;
                if (i < a) stressFree[i][j] += stressFree[i+1][j];
                stressFree[i][j] %= MODU;
                if (j < b && i > j+1) stressFree[i][j] += stressFree[i][j+1];
                stressFree[i][j] %= MODU;
                
                stressful[i][j] = 0;
                if (i < a && (i+1 <= j || j == b)) stressful[i][j] += stressful[i+1][j];
                stressful[i][j] %= MODU;
                if (j < b) stressful[i][j] += stressful[i][j+1];
                stressful[i][j] %= MODU;
            }
        }
        cout << "Case #" << tt+1 << ": " << stressFree[0][0] << " " << stressful[0][0] << endl;
    }
    return 0;
}

import java.util.*;
import java.io.*;

public class Sport
{
	static int[][] dp;
	static final int mod = 1_000_000_007;
	static int free(final int a, final int b)
	{
		if(a<0 || b<0) return 0;
		if(a+b==0) return 1;
		if(b>=a) return 0;
		if(dp[a][b]>=0) return dp[a][b];
		int tmp = free(a-1,b) + free(a,b-1);
		if(tmp>=mod) tmp -= mod;
		return dp[a][b] = tmp;
	}
	static int stress(final int a, final int b)
	{
		if(a<0 || b<0) return 0;
		if(a+b==0) return 1;
		if(a>b) return 0;
		if(dp[a][b]>=0) return dp[a][b];
		int tmp = stress(a-1,b) + stress(a,b-1);
		if(tmp>=mod) tmp -= mod;
		return dp[a][b] = tmp;
	}

	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		for(int t = 1; t<=T; t++)
		{
			String[] s = in.getWord().split("-");
			final int a = Integer.parseInt(s[0]), b = Integer.parseInt(s[1]);

			dp = new int[a+1][b+1];
			for(int i = 0; i<=a; i++) Arrays.fill(dp[i],-1);
			final int free = free(a,b);
			for(int i = 0; i<=a; i++) Arrays.fill(dp[i],-1);
			final int stress = stress(b-1,b);

			out.println("Case #"+t+": "+free+" "+stress); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

#include <iostream>
#include <string>
#include <vector>
#include <deque>
#include <bitset>

using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::string;
using std::vector;
using std::deque;
using std::bitset;

typedef int_fast64_t i64;
struct Case{i64 me, other;};

i64 memodata[2048*2048];
inline i64 &memo(i64 me, i64 other) {return memodata[(me << 11) | other];}
inline void clearMemo() {for (auto &elm: memodata) elm = -1;};

i64 stressfree(i64 mehas, i64 meneed, i64 otherhas, i64 otherneed){
//	cout << mehas << " " << meneed << " " << otherhas << " " << otherneed << endl;

	if (meneed < 0 || otherneed <0) return 0;
	if (meneed == 0 && otherneed == 0) return 1;

	if (memo(mehas, otherhas) != -1)
		return memo(mehas, otherhas);

	i64 result = stressfree(mehas+1,meneed-1, otherhas, otherneed);

	result %= 1000000007;

	if ((mehas - otherhas) >= 2)
		result += stressfree(mehas,meneed, otherhas+1, otherneed-1);

	result %= 1000000007;

	memo(mehas, otherhas) = result;

	return result;
}


// ====================================


i64 stressfull(i64 mehas, i64 meneed, i64 otherhas, i64 otherneed){
	if (meneed < 0 || otherneed <0) return 0;
	if (meneed == 0 && otherneed == 0) return 1;

	if (memo(mehas, otherhas) != -1)
		return memo(mehas, otherhas);

	i64 result = stressfull(mehas, meneed, otherhas+1, otherneed-1);
	result %= 1000000007;

	if (mehas < otherhas || otherneed == 0)
		result += stressfull(mehas+1, meneed-1, otherhas, otherneed);

	result %= 1000000007;
	memo(mehas, otherhas) = result;

	return result;
	return 0;
}



i64 stressfree(i64 me, i64 other){clearMemo(); return stressfree(0, me, 0, other);};
i64 stressfull(i64 me, i64 other){clearMemo(); return stressfull(0, me, 0, other);};


string solve(Case &theCase){
//	cout << theCase.me << "-" << theCase.other << endl;
	return
			std::to_string(stressfree(theCase.me, theCase.other))
							+ " " +
			std::to_string(stressfull(theCase.me, theCase.other));
}

int main(int argc, char **argv) {
	size_t T; cin >> T; // number of test cases
	vector<Case> cases(T);

	// read cases
	for (size_t i=0; i<T; ++i){
		Case &theCase = cases[i];
		cin >> theCase.me;
		cin.ignore(1);
		cin >> theCase.other;
	}

	// solve and print
	for (size_t i=0; i<T; ++i)
		cout << "Case #" << (i+1) << ": "<< solve(cases[i]) << endl;
}


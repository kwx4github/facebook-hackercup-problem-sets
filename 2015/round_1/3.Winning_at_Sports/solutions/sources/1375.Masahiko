#include <bits/stdc++.h>

#ifdef LOCAL
#include "dump.hpp"
#else
#define dump(...)
#endif

using namespace std;

#define REP(i, a, b) for(int i = (a); i < int(b); ++i)
#define rep(i, n) REP(i, 0, n)
#define ALL(x) begin(x), end(x)

template<class T> inline void chmax(T &a, const T &b) { if(a < b) a = b; }
template<class T> inline void chmin(T &a, const T &b) { if(a > b) a = b; }

constexpr int mod = 1000000007;

inline void add(int &a, int b) {
	a += b;
	if(a >= mod) a -= mod;
}

string solve() {
	int my_score, opp_score;
	scanf("%d-%d", &my_score, &opp_score);

	vector<vector<int>> stress_free(my_score + 1, vector<int>(opp_score + 1, 0));
	vector<vector<int>> stressful(my_score + 1, vector<int>(opp_score + 1, 0));
	stress_free[0][0] = stressful[0][0] = 1;

	for(int i = 0; i <= my_score; ++i) {
		for(int j = 0; j <= opp_score; ++j) {
			{ // calc stress_free
				if(i < my_score) {
					add(stress_free[i + 1][j], stress_free[i][j]);
				}

				if(j < opp_score && i > j + 1) {
					add(stress_free[i][j + 1], stress_free[i][j]);
				}
			}
			
			{ // calc stressful
				if(i < my_score && (i < j || j == opp_score)) {
					add(stressful[i + 1][j], stressful[i][j]);
				}

				if(j < opp_score) {
					add(stressful[i][j + 1], stressful[i][j]);
				}
			}
		}
	}
	
	return to_string(stress_free[my_score][opp_score])
		+ ' ' + to_string(stressful[my_score][opp_score]);
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	int T;
	cin >> T;

	for(int t = 1; t <= T; ++t) {
		cout << "Case #" << t << ": " << solve() << '\n';
	}

	return EXIT_SUCCESS;
}

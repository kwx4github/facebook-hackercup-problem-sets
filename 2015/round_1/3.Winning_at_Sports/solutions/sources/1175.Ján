// pre-written code {{{
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <numeric>
#include <iostream>
#include <cassert>
#include <set>
#define FOR(i,n) for(int _n=n,i=0;i<_n;++i)
#define FR(i,a,b) for(int _b=b,i=a;i<_b;++i)
#define CL(x) memset(x,0,sizeof(x))
#define PN printf("\n");
#define MP make_pair
#define PB push_back
#define SZ size()
#define ALL(x) x.begin(),x.end()
#define FORSZ(i,v) FOR(i,v.size())
#define FORIT(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
using namespace std;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
///////////////////////////////////////////////////////////////////////////////////
// }}}

const int MOD = 1000000007;
int bv[2005][2005];
int sv[2005][2005];

void solve(){
  int A,B;
  scanf("%d-%d\n",&A,&B);
  printf("%d %d\n",bv[A][B],sv[B][B]);

}

int main(){
  FOR(a,2005) FOR(b,2005) {
    bv[a][b]=-1;
    if(a==1 && b==0) { bv[a][b]=1; } 
    else if(a<=b) { bv[a][b]=0; } 
    else {
      bv[a][b]=bv[a-1][b];
      if(b>0) bv[a][b]+=bv[a][b-1];      
    }
    if(bv[a][b]==-1) printf("ZLE!!!\n");
    bv[a][b]%=MOD;
  }
  FOR(a,2005) FOR(b,2005) {
    sv[a][b]=-1;
    if(a==0 && b==0) { sv[a][b]=1; }
    else if(a>b) {sv[a][b]=0; }
    else {
      sv[a][b]=sv[a][b-1];
      if(a>0) { sv[a][b]+=sv[a-1][b]; }      
    }
    if(sv[a][b]==-1) printf("ZLE2!!!\n"); 
    sv[a][b]%=MOD;
  }

  int pvs; scanf("%d",&pvs);
  FR(ppp,1,pvs+1){
     printf("Case #%d: ",ppp);

     solve();
  }
}


// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

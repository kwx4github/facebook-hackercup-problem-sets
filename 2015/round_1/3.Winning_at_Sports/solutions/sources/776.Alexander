import java.util.Comparator;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.List;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.math.BigInteger;
import java.util.Collections;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author AlexFetisov
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("winning_at_sports.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {
    public static final int MOD = (int)1e9 + 7;
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + testNumber + ": ");
        String[] tokens = in.nextString().split("-");
        int me = Integer.parseInt(tokens[0]);
        int other = Integer.parseInt(tokens[1]);
        out.println(runDP1(me, other) + " " + runDP2(me, other));
    }

    int[][] dp;

    private int runDP1(int me, int other) {
        dp = new int[me + 1][other + 1];
        ArrayUtils.fill(dp, 0);
        dp[1][0] = 1;
        for (int myScore = 1; myScore <= me; ++myScore) {
            for (int opponentScore = 0; opponentScore <= other; ++opponentScore) {
                if (myScore > opponentScore) {
                    if (myScore > opponentScore + 1 && opponentScore < other) {
                        dp[myScore][opponentScore + 1] += dp[myScore][opponentScore];
                        if (dp[myScore][opponentScore + 1] >= MOD) {
                            dp[myScore][opponentScore + 1] -= MOD;
                        }
                    }
                    if (myScore < me) {
                        dp[myScore + 1][opponentScore] += dp[myScore][opponentScore];
                        if (dp[myScore + 1][opponentScore] >= MOD) {
                            dp[myScore + 1][opponentScore] -= MOD;
                        }
                    }
                }
            }
        }
        return dp[me][other];
    }

    private int runDP2(int me, int other) {
        dp = new int[me + 1][other + 1];
        ArrayUtils.fill(dp, 0);
        dp[0][0] = 1;
        for (int myScore = 0; myScore <= me; ++myScore) {
            for (int opponentScore = 0; opponentScore <= other; ++opponentScore) {
                if (opponentScore == other) {
                    if (myScore < me) {
                        dp[myScore + 1][opponentScore] += dp[myScore][opponentScore];
                        if (dp[myScore + 1][opponentScore] >= MOD) {
                            dp[myScore + 1][opponentScore] -= MOD;
                        }
                    }
                } else if (myScore <= opponentScore) {
                    if (opponentScore < other) {
                        dp[myScore][opponentScore + 1] += dp[myScore][opponentScore];
                        if (dp[myScore][opponentScore + 1] >= MOD) {
                            dp[myScore][opponentScore + 1] -= MOD;
                        }
                    }
                    if (myScore < me && myScore + 1 <= opponentScore) {
                        dp[myScore + 1][opponentScore] += dp[myScore][opponentScore];
                        if (dp[myScore + 1][opponentScore] >= MOD) {
                            dp[myScore + 1][opponentScore] -= MOD;
                        }
                    }
                }
            }
        }
        return dp[me][other];
    }
}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer stt;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    public String nextString() {
        while (stt == null || !stt.hasMoreTokens()) {
            stt = new StringTokenizer(nextLine());
        }
        return stt.nextToken();
    }

    public String next() {
        return nextString();
    }
}

class ArrayUtils {

    public static void fill(int[][] f, int value) {
        for (int i = 0; i < f.length; ++i) {
            Arrays.fill(f[i], value);
        }
    }

}


import java.io.OutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.io.PrintWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		ProbC solver = new ProbC();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class ProbC {

    int[][] dp1;
    int[][] dp2;

    final int MAX_SIZE = 2000;
    final long MOD = 1000000007;

    public ProbC() {
        dp1 = new int[MAX_SIZE + 1][MAX_SIZE + 1];
        dp2 = new int[MAX_SIZE + 1][MAX_SIZE + 1];
        ArrayUtils.init(dp1, -1);
        ArrayUtils.init(dp2, -1);
    }

    public int solveStressfree(int a, int b) {
        if(a < 0 || b < 0) return 0;
        if(b >= a) return 0;
        if(a == 1 && b == 0) return 1;
        if(dp1[a][b] == -1) {
            long ans1 = solveStressfree(a - 1, b);
            long ans2 = solveStressfree(a, b - 1);
            dp1[a][b] = (int)((ans1 + ans2) % MOD);
        }
        return dp1[a][b];
    }

    public int solveStressful(int a, int b) {
        if(a < 0 || b < 0) return 0;
        if(a == 0 && b == 0) return 1;
        if(dp2[a][b] == -1) {
            long ans1 = solveStressful(a - 1, b);
            long ans2 = 0;
            if(a < b) ans2 = solveStressful(a, b - 1);
            dp2[a][b] = (int)((ans1 + ans2) % MOD);
        }
        return dp2[a][b];
    }


    public void solve(int testNumber, InputReader jin, PrintWriter jout) {
        String[] score = jin.token().split("-");
        int num1 = Integer.parseInt(score[0]);
        int num2 = Integer.parseInt(score[1]);

        int free = solveStressfree(num1, num2);
        int full = solveStressful(num1, num2);
        jout.print("Case #" + testNumber + ": ");
        jout.println(free + " " + full);


    }
}

class ArrayUtils {

    public static void init(int[][][] arr, int val) {
        for(int[][] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    public static void init(int[][] arr, int val) {
        for(int[] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    public static void init(int[] arr, int val) {
        Arrays.fill(arr, val);
    }

    public static int accumulate(int[] arr) {
        int res = 0;
        for(int xx: arr)
            res += xx;
        return res;
    }

    public static void init(double[][] arr, double val) {
        for(double[] subarr: arr)
            ArrayUtils.init(subarr, val);
    }

    private static void init(double[] arr, double val) {
        Arrays.fill(arr, val);
    }
}

class InputReader {
    private static final int bufferMaxLength = 1024;
    private InputStream in;
    private byte[] buffer;
    private int currentBufferSize;
    private int currentBufferTop;
    private static final String tokenizers = " \t\r\f\n";

    public InputReader(InputStream stream) {
        this.in = stream;
        buffer = new byte[bufferMaxLength];
        currentBufferSize = 0;
        currentBufferTop = 0;
    }

    private boolean refill() {
        try {
            this.currentBufferSize = this.in.read(this.buffer);
            this.currentBufferTop = 0;
        } catch(Exception e) {}
        return this.currentBufferSize > 0;
    }


    public Byte readChar() {
        if(currentBufferTop < currentBufferSize) {
            return this.buffer[this.currentBufferTop++];
        } else {
            if(!this.refill()) {
                return null;
            } else {
                return readChar();
            }
        }
    }

    public String token()  {
        StringBuffer tok = new StringBuffer();
        Byte first;
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) != -1));
        if(first == null) return null;
        tok.append((char)first.byteValue());
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) == -1)) {
            tok.append((char)first.byteValue());
        }
        return tok.toString();
    }


    public String next() {
        return token();
    }

    public Integer int32() throws NumberFormatException {
        String tok = token();
        return tok == null? null : Integer.parseInt(tok);
    }

}


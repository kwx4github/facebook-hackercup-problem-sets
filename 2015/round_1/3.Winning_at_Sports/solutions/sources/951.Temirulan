#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int C[4020][4020];
int t, x, y;
int dp[2020][2020];
int dp1[2020][2020];

int calc(int i, int j) {
    if(i == x && j == y) return 1;
    if(i == x) return calc(i, j+1);
    if(j == y) return calc(i+1, j);
    int &res = dp[i][j];
    if(res != -1) return res;
    int d = i - j;
    res = calc(i+1, j);
    if(d > 1) res = (res + calc(i, j+1)) % mod;
    return res;
}

int calc1(int i, int j) {
    if(i == x && j == y) return 1;
    if(j == y) return 1;
    int &res = dp1[i][j];
    if(res != -1) return res;
    res = 0;
    if(i + 1 <= j) res += calc1(i+1, j);
    res = (res + calc1(i, j+1)) % mod;
    return res;
}

void solve() {
    memset(dp, -1, sizeof dp);
    memset(dp1, -1, sizeof dp1);
    
    scanf("%d-%d", &x, &y);
    
    int all = C[x+y][x];
    int f = calc(0, 0);
    int s = calc1(0, 0);
    
    printf("%d %d\n", f, s);
}

int main(){
    
    for(int i = 0; i < 4040; i++) {
        C[i][0] = C[i][i] = 1;
        for(int j = 1; j < i; j++) C[i][j] = (C[i-1][j-1] + C[i-1][j]) % mod;
    }
    
    int t;
    
    scanf("%d", &t);
    
    for(int i = 1; i <= t; i++) {
        printf("Case #%d: ", i);
        solve();
    }
    
    return 0;
}

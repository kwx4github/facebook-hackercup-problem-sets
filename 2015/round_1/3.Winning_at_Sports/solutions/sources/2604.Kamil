#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <cmath>
#include <list>
#include <map>
#include <set>
#include <sstream>
using namespace std;

typedef long long int LL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<LD> VLD;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef vector<PII> VPII;

const int INF = 1000000001;
const LD EPS = 10e-9;

#define FOR(x, b, e) for(int x = b; x <= (e); ++x)
#define FORD(x, b, e) for(int x = b; x >= (e); --x)
#define REP(x, n) for(int x = 0; x < (n); ++x)
#define VAR(v, n) __typeof(n) v = (n)
#define ALL(c) (c).begin(), (c).end()
#define SIZE(x) ((int)(x).size())
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define abs(a) ((a)<0 ? -(a) : (a))
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))

const int MAX_P = 2005;
const int MOD = 1000000007;

int t, myPoints, hisPoints;
string scores;

LL res[MAX_P][MAX_P];

int calculateStressFree()
{	
	for(int i = 0; i <= myPoints; i++)
	{
		for(int j = 0; j <= hisPoints; j++)
		{
			res[i][j] = 0;
		}
	}
	res[0][0] = res[1][0] = 1;
	
	for(int i = 2; i <= myPoints; i++)
	{
		for(int j = 0; j <= hisPoints; j++)
		{
			if(j >= i)
			{
				break;
			}
			
			if(j == 0)
			{
				res[i][j] = 1;
			}
			else
			{
				res[i][j] = res[i][j-1];
				if(i-1 > j)
				{
					res[i][j] = (res[i][j] + res[i-1][j]) % MOD;
				} 
			}
		}
	}
	
	return res[myPoints][hisPoints];
}

int calculateStressFull()
{
	for(int i = 0; i <= myPoints; i++)
	{
		for(int j = 0; j <= hisPoints; j++)
		{
			res[i][j] = 0;
		}
	}
	res[0][0] = 1;
	
	for(int i = 0; i <= myPoints; i++)
	{
		for(int j = 0; j <= hisPoints; j++)
		{
			if(i > j && j < hisPoints)
			{
				continue;
			}
			
			if(j-1 >= 0 && i <= j-1)
			{
				res[i][j] = (res[i][j] + res[i][j-1]) % MOD;
			}
			if(i-1 >= 0)
			{
				res[i][j] = (res[i][j] + res[i-1][j]) % MOD;	
			}
			
			//cout << "i: " << i << ", j: " << j << " => " << res[i][j] << endl;
		}
	}
	
	return res[myPoints][hisPoints];
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin >> t;
	for(int _t = 1; _t <= t; _t++)
	{
		cin >> scores;
		
		int hypPos = scores.find('-');
		string leftPoints = scores.substr(0, hypPos);
		string rightPoints = scores.substr(hypPos+1);
		
		stringstream ssLeft(leftPoints);
		ssLeft >> myPoints;
		stringstream ssRight(rightPoints);
		ssRight >> hisPoints;
		
		//cout << myPoints << ' ' << hisPoints << endl;
		
		int resStressFree = calculateStressFree();
		int resStressFull = calculateStressFull();
		
		cout << "Case #" << _t << ": " << resStressFree << ' ' << resStressFull << endl;
	}
	//system("pause");
	return 0;
}



#include <iostream>
#include <algorithm>
#include <vector>
#include <climits>
#include <cmath>
#include <unordered_map>
#include <unordered_set>
#include <sstream>
#include <string.h>
#include <stack>
#include <queue>
#include <ctype.h>
#include <sstream>

using namespace std;

// row, which is m, means winnings
// col, which is n, means loses
int stressfree(int m, int n) {
  int base = pow(10, 9) + 7;
  vector<vector<int> > mat (m + 1, vector<int> (n + 1, 0));
  for (int i = 1; i <= m; i++) {
    mat[i][0] = 1;
  }

  for (int j = 0; j <= n; j++) {
    mat[0][j] = 0;
  }

  for (int i = 1; i <= m; i++) {
    for (int j = 1; j <= n; j++) {
      // current value may comes from previosu two states:
      // player wins, from i - 1, j
      // player loses, from i, j -1
      if (j >= i)
        mat[i][j] = 0;
      else {
        mat[i][j] = (mat[i][j - 1] + mat[i - 1][j]) % base;
      }
    }
  }

  return mat[m][n];
}

int stressful(int m, int n) {
  int base = pow(10, 9) + 7;
  vector<vector<int> > mat (m + 1, vector<int> (n + 1, 0));

  for (int j = 1; j <= n; j++) {
    mat[0][j] = 1;
  }

  for (int i = 0; i <= m; i++) {
    mat[i][0] = 0;
  }

  for (int i = 1; i <= m; i++) {
    for (int j = 1; j <= n; j++) {
      if (j < n && i > j) {
        mat[i][j] = 0;
        continue;
      }

      mat[i][j] = (mat[i - 1][j] + mat[i][j - 1]) % base;
    }
  }

  return mat[m][n];
}

vector<int> split(string str, char ch) {
  stringstream ss(str);
  int i;
  vector<int> ret;
  while(ss >> i) {
    ret.push_back(i);
    if (ss.peek() == ch)
      ss.ignore();
  }
  return ret;
}

int main() {
  int T;
  cin >> T;
  string s;
  vector<int> scores;
  for (int round = 1; round <= T; round++) {
    cin >> s;
    scores = split(s, '-');
    int a = stressfree(scores[0], scores[1]);
    int b = stressful(scores[0], scores[1]);
    cout << "Case #" << round << ": " << a << " " << b << endl;
  }
}

#include<iostream>
#include<cstdio>
#include<stack>
#include<queue>
#include<set>
#include<iomanip>
#include<complex>
#include<vector>
#include<map>
#include<algorithm>
#include<cmath>
#include<string>
#include<bitset>
#include<memory.h>
#include<cassert>
#include<ctime>
 
using namespace std;
 
#define For(i,l,r) for (int i = l ;i < (int)(r + 1) ; ++ i )
#define ForI(it , s , T) for (T :: iterator it = s.begin(); it != s.end() ; ++ it )
#define LL long long
#define iinf 2000000000
#define linf 4000000000000000000LL
#define MOD  1000000007
#define Pi 3.1415926535897932384
#define bit(mask,i) ((mask>>i)&1)
#define pb(x) push_back(x)
#define mk(x,y) make_pair(x,y)
#define sqr(x) ((x)*(x))
#define pause cin.get();cin.get();
#define fir first
#define sec second
#define ln(x) log(x)
#define pii pair<int,int>

const int Direction[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
const int Nmax = 500001;

inline void autocomplete(){
       static int number = 1;
       cout << "Case #" << number << ": ";
       number ++;
}

int dp[2010][2010];
int P[2010][2010];

inline void add(int &a,int b){
       a += b;
       if (a >= MOD)
          a -= MOD;
}
int main() {
   ios_base::sync_with_stdio(0);
   freopen("winning_at_sports.txt","r",stdin);
   freopen("winning_at_sports_out.txt","w",stdout);
   
   int test;
   cin >> test;
   dp[1][0] = 1;
   for (int i = 2; i <= 2000; i ++)
       for (int j = 0 ;j < i; j ++){
           if (j + 1 < i)
              add(dp[i][j], dp[i - 1][j]);
           if (j > 0)
              add(dp[i][j], dp[i][j - 1]);
       }
   for (int i = 0 ;i <= 2000;i  ++)
    P[0][i] = 1;
   for (int i = 1; i <= 2000; i ++)
       for (int j = i; j <= 2000; j ++){
           add(P[i][j],P[i-1][j]);
           if (i < j)
              add(P[i][j], P[i][j - 1]);
       }
   
   while (test --> 0){
         int a = 0 , b = 0;
         char ch;
         cin >> ch;
         while (ch != '-'){
               a = a * 10 + (ch - '0');
               cin >> ch;
         }
         cin >> b;
         
         autocomplete();
         cout << dp[a][b] << " " << P[b][b] << endl;
   }   
   return 0;
}

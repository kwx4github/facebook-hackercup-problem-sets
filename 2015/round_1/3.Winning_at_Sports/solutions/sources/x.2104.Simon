

namespace Contest
{
    using System;
    using System.IO;

    public class Program
    {
        static void Main(string[] args)
        {
            Wrapper.Solve(new ProblemC(), Console.In, Console.Out);
        }
    }

    public class Wrapper
    {
        public static void Solve(IProblem problem, TextReader input, TextWriter output)
        {
            var parser = new InputParser(input);
            int T = parser.GetInt();

            for (int i = 0; i < T; i++)
            {
                output.WriteLine(string.Format("Case #{0}: {1}", i + 1, problem.SolveOneCase(parser)));
            }
        }
    }

    public interface IProblem
    {
        string SolveOneCase(InputParser input);
    }
}﻿

namespace Contest
{
    public class ProblemC : IProblem
    {
        int mod = 1000000007;

        public string SolveOneCase(InputParser input)
        {
            var score = input.GetString();
            var split = score.Split('-');
            var A = int.Parse(split[0]);
            var B = int.Parse(split[1]);

            var table = new int[A + 1,B + 1];

            // stree-free:
            table[1, 0] = 1;

            for (int i = 1; i <= A; i++)
            {
                for (int j = 0; j < i && j <=B; j++)
                {
                    if( j==0)
                    {
                        table[i, 0] = 1;
                        continue;
                    }

                    table[i, j] = (table[i - 1, j] + table[i, j - 1])%mod;
                }
            }

            var sfree = table[A, B];


            // stressful:
            int sfull = 0;
            if (B > 0)
            {

                table = new int[A + 1,B + 1];
                table[0, 1] = 1;

                for (int j = 1; j <= B; j++)
                {
                    for (int i = 0; i <= A; i++)
                    {
                        if (i == 0)
                        {
                            table[0, j] = 1;
                            continue;
                        }
                        if (i > j && j != B)
                            continue;

                        table[i, j] = (table[i - 1, j] + table[i, j - 1])%mod;
                    }
                }


                sfull = table[A, B];
            }
            return sfree + " " + sfull;
        }
    }
}
﻿

namespace Contest
{
    using System.Collections;
    using System;
    using System.IO;

    public class InputParser
    {
        private readonly TextReader _textReader;

        private IEnumerator _enumerator;

        public InputParser(TextReader textReader)
        {
            this._textReader = textReader;
            this._enumerator = (new string[0]).GetEnumerator();
        }

        public string ReadLine()
        {
            return _textReader.ReadLine();
        }

        public string[] GetStringArray()
        {
            return ReadLine().Split(new string[0], StringSplitOptions.RemoveEmptyEntries);
        }

        public int[] GetIntArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new int[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = int.Parse(tokens[i]);
            }

            return values;
        }

        public long[] GetLongArray()
        {
            string[] tokens = GetStringArray();
            int length = tokens.Length;

            var values = new long[length];

            for (int i = 0; i < length; i++)
            {
                values[i] = long.Parse(tokens[i]);
            }

            return values;
        }

        public string GetString()
        {
            while (_enumerator.MoveNext() == false)
            {
                _enumerator = GetStringArray().GetEnumerator();
            }

            return (string)_enumerator.Current;
        }

        public int GetInt()
        {
            return int.Parse(GetString());
        }

        public long GetLong()
        {
            return long.Parse(GetString());
        }
    }
}
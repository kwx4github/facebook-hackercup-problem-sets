#include <iostream>
#include <iomanip>
#include <cstdio>
#include <set>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <utility>
#include <iterator>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <string>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cctype>
#include <fstream>
#include <climits>
#include <numeric>
#include <bitset>
#include <complex>
#include <functional>
#include <list>
using namespace std;
typedef long long int LL;
typedef unsigned long long int uLL;
inline int _Int() { char INPUT[15]; scanf("%s",INPUT); return atoi(INPUT); }
inline LL _LL() { char INPUT[70]; scanf("%s",INPUT); return atoll(INPUT); }
LL bigMod(LL A,LL P,int M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=(R*A)%M; A=(A*A)%M; } return R; } /** (A^P) % M **/
LL bigMul(LL A,LL B,LL M) { LL R=0; for(A%=M; B; B>>=1) { if(B&1) R=(R+A)%M; A=(A+A)%M; } return R; } /** (A*B) % M **/
LL _bigMod(LL A,LL P,LL M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=bigMul(R,A,M); A=bigMul(A,A,M); } return R; } /** advance bigMod **/
template<class T>T GCD(T x, T y) { while(x) x^=y^=x^=y%=x; return y; } /** GCD(a,b) **/
#define pb  push_back
#define pob pop_back
#define pi  acos(-1)
/*************************************************************************************************************************
**                                            Syed Zafrul Lipu (ShockProof)                                              *
**                                            CSE, University of Asia Pacific                                            *
**************************************************************************************************************************/

const int M=2001;
const LL mod=1000000007;

LL dp[M][M];
LL dp2[M][M];

void Main()
{
    for(int i=1; i<M; i++) {
        dp[i][0]=dp2[i][0]=1;
    }
    for(int i=1; i<M; i++) {
        for(int j=1; j<i; j++) {
            dp[i][j]=(dp[i-1][j]%mod+dp[i][j-1]%mod)%mod;
        }
    }
    for(int i=1; i<M; i++) {
        for(int j=1; j<=i; j++) {
            dp2[i][j]=(dp2[i-1][j]%mod+dp2[i][j-1]%mod)%mod;
        }
    }
    int Case=0, test=_Int();
    while( test-- ) {
        int a,b;
        scanf("%d-%d",&a,&b);
        printf("Case #%d: %lld %lld\n",++Case, dp[a][b],dp2[b][b] );
    }
}

int main()
{
///#ifndef ONLINE_JUDGE
    freopen(  "winning_at_sports.txt", "r",  stdin);
    freopen( "winning_at_sports_output.txt", "w", stdout);
///#endif
    Main();
    return 0;
}

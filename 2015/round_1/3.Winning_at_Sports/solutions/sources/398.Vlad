import java.io.*;
import java.util.Locale;
import java.util.StringTokenizer;

public class ProblemC {

    public static void main(String[] args) throws Exception {
        Locale.setDefault(Locale.UK);
        new ProblemC();
    }

    private BufferedReader in = null;
    private PrintWriter out = null;
    private StringTokenizer tok = new StringTokenizer("");
    private String fileName = "#IOtxt";

    public ProblemC() throws Exception {
        init();
        solve();
        in.close();
        out.close();
    }

    private void solve() throws Exception {
        int mod = 1000000007;
        int T = nextInt();
        for (int ii = 1; ii <= T; ii++) {
            out.print("Case #" + ii + ": ");
            String str = nextToken();
            int a = Integer.parseInt(str.substring(0, str.indexOf('-')));
            int b = Integer.parseInt(str.substring(str.indexOf('-') + 1));
            int[][] free = new int[a + 1][b + 1], full = new int[a + 1][b + 1];
            free[0][0] = 1;
            full[0][0] = 1;
            for (int i = 0; i <= a; i++) {
                for (int j = 0; j <= b; j++) {
                    if (i == j && i == 0) {
                        continue;
                    }
                    if (i > j) {
                        free[i][j] += free[i - 1][j];
                        if (j > 0) {
                            free[i][j] += free[i][j - 1];
                        }
                        free[i][j] %= mod;
                    }
                    if (i <= j || j == b) {
                        if (i > 0) {
                            full[i][j] += full[i - 1][j];
                        }
                        if (j > 0) {
                            full[i][j] += full[i][j - 1];
                        }
                        full[i][j] %= mod;
                    }
                }
            }
            out.println(free[a][b] + " " + full[a][b]);
        }
    }


    private void init() throws FileNotFoundException {
        if (fileName.equals("#Console")) {
            in = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
        } else if (fileName.equals("#IOtxt")) {
            in = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
        } else {
            in = new BufferedReader(new FileReader(fileName + ".in"));
            out = new PrintWriter(fileName + ".out");
        }
    }


    private int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    private long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }


    private String nextToken() throws IOException {
        while (!tok.hasMoreTokens()) {
            String s = in.readLine();
            if (s == null) {
                return null;
            }
            tok = new StringTokenizer(s);
        }
        return tok.nextToken();
    }

}
            
#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

#define MOD 1000000007
#define MAX_SIZE 2001

int computeStressfree(int stateA, int stateB, int maxA, int maxB, vector<int>& memo) {
  if (stateA == 0) {
    return 1;
  }

  int ind = stateA * MAX_SIZE + stateB;
  if (memo[ind] >= 0) {
    return memo[ind];
  }

  int numWays = 0;
  int scoreA = maxA - stateA;
  int scoreB = maxB - stateB;
  if (stateA) {
    numWays = (numWays +
      computeStressfree(stateA - 1, stateB, maxA, maxB, memo) % MOD) % MOD;
  }
  scoreB++;
  if (scoreB < scoreA && scoreB <= maxB) {
    numWays = (numWays +
      computeStressfree(stateA, maxB - scoreB, maxA, maxB, memo) % MOD) % MOD;
  }

  memo[ind] = numWays;
  return numWays;
}

int computeStressful(int stateA, int stateB, int maxA, int maxB, vector<int>& memo) {
  if (stateB == 0) {
    return 1;
  }

  int ind = stateA * MAX_SIZE + stateB;
  if (memo[ind] >= 0) {
    return memo[ind];
  }

  int numWays = 0;
  int scoreA = maxA - stateA;
  int scoreB = maxB - stateB;
  if (stateB) {
    numWays = (numWays +
      computeStressful(stateA, stateB - 1, maxA, maxB, memo) % MOD) % MOD;
  }
  scoreA++;
  if (scoreA <= scoreB && scoreA <= maxA) {
    numWays = (numWays +
      computeStressful(maxA - scoreA, stateB, maxA, maxB, memo) % MOD) % MOD;
  }

  memo[ind] = numWays;
  return numWays;
}

int main(void) {
  int T, scoreA, scoreB, caseId;
  vector<int> stressfulMemo, stressfreeMemo;

  scanf("%d", &T);
  caseId = 1;


  while (caseId <= T) {
    scanf("%d-%d", &scoreA, &scoreB);

    stressfulMemo.assign(MAX_SIZE * MAX_SIZE, -1);
    stressfreeMemo.assign(MAX_SIZE * MAX_SIZE, -1);
    printf("Case #%d: %d %d\n", caseId,
      computeStressfree(scoreA, scoreB, scoreA, scoreB, stressfulMemo),
      computeStressful(scoreA, scoreB, scoreA, scoreB, stressfreeMemo));

    caseId++;
  }
  return 0;
}

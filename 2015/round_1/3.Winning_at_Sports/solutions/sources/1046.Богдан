import java.io.*;
import java.util.*;

public class Main {

    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;

    public static void main(String[] args) throws Exception {
        long[][] stressFree = calcStressFree();
        long[][] stressful = calcStressful();
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            int a = nextInt(), b = nextInt();
            out.println("Case #" + t + ": " + stressFree[a][b] + " " + stressful[b][b]);
        }
    }

    public static long[][] calcStressFree() {
        long[][] stressFree = new long[2001][2001];
        stressFree[1][0] = 1;
        for (int i = 1; i <= 2000; i++) {
            for (int j = 0; j <= 2000; j++) {
                if (i + 1 <= 2000) {
                    stressFree[i + 1][j] += stressFree[i][j];
                    stressFree[i + 1][j] %= 1_000_000_007;
                }
                if (i > j + 1) {
                    stressFree[i][j + 1] += stressFree[i][j];
                    stressFree[i][j + 1] %= 1_000_000_007;
                }
            }
        }
        return stressFree;
    }

    public static long[][] calcStressful() {
        long[][] stressful = new long[2001][2001];
        stressful[0][0] = 1;
        for (int i = 0; i <= 2000; i++) {
            for (int j = 0; j <= 2000; j++) {
                if (i + 1 <= 2000 && i + 1 <= j) {
                    stressful[i + 1][j] += stressful[i][j];
                    stressful[i + 1][j] %= 1_000_000_007;
                }
                if (j + 1 <= 2000 && i <= j) {
                    stressful[i][j + 1] += stressful[i][j];
                    stressful[i][j + 1] %= 1_000_000_007;
                }
            }
        }
        return stressful;
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), "-");
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return st.nextToken();
    }

}
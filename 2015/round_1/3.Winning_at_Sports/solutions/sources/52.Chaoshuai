#include <cmath>
#include <cstdio>
#include <vector>
#include <climits>
#include <iostream>
#include <algorithm>
using namespace std;

const int MAXN = 4222;
const int INF = 0x3F3F3F3F;
const int MOD = 1000000007;

long long C[MAXN + 1][MAXN + 1];
void Combination(int n) {
  for (int i = 0; i <= n; i++) {
    for (int j = C[i][0] = 1; j <= i; j++) {
      C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;
    }
  }
}

//求由n个1、m个0组成，并且任意前缀中1的个数不少于0的个数的字符串的个数是C(n + m, n) - C(n + m, n + 1), 0 <= m <= n

int main() {
  Combination(MAXN - 1);
  int cases;
  scanf("%d", &cases);
  for (int T = 0; T < cases; ++T) {
    getchar();
    int a, b;
    scanf("%d-%d", &a, &b);
    printf("Case #%d: ", T + 1);
    int n = a + b;
    int stressfree = (C[a - 1 + b][a - 1] - C[a - 1 + b][a] + MOD) % MOD;

    int c = min(a, b);
    int stressful = (C[b + c][b] - C[b + c][b + 1] + MOD) % MOD;
    // for (int i = 0; i <= min(a, b); ++i) {
    //   int tmp = (C[b + i] - 1)
    //   stressful = (str)
    // }
    printf("%d %d\n", stressfree, stressful);
  }
  return 0;
}

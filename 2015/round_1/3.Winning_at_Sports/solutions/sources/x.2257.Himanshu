/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define FOR(i,a,b)      for(int i=(a);i<(b);i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007

#define GI(x)     scanf("%d",&x)

#define CASE(x)   fout<<"Case #"<<x<<": "

LL dp1[2200][2200] = {0};

LL stressFree(int i,int j)
{
      if(i<=j) return 0;
      if(!j) return 1;
      if(dp1[i][j]) return dp1[i][j];
      LL ret = (stressFree(i-1,j) + stressFree(i,j-1))%MOD;
      dp1[i][j] = ret;
      return ret;
}

LL dp2[2200][2200] = {0};

LL stressFull(int i,int j)
{
      if(i>j) return 0;
      if(!i && !j) return 0;
      if(!i) return 1;
      if(dp2[i][j]) return dp2[i][j];
      LL ret = (stressFull(i-1,j) + stressFull(i,j-1))%MOD;
      dp2[i][j] = ret;
      return ret;
}

int main()
{
      ifstream fin("A.txt");
      ofstream fout("output.txt");
      int p = 0;
      int t;
      fin>>t;
      while(t--)
      {
            ++p;
            string s;
            fin>>s;
            int a=0,b=0;
            int i = 0;
            while(s[i] != '-')
            {
                  a = a*10 + s[i]-'0';
                  i++;
            }
            i++;
            while(i < sz(s))
            {
                  b = b*10 + s[i] - '0';
                  i++;
            }
            CASE(p);
            fout<<stressFree(a,b)<<" "<<stressFull(b,b)<<endl;
      }
      fin.close();
      fout.close();
      return 0;
}

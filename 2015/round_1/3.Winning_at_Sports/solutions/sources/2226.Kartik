import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Random;
import java.io.File;
import java.io.FilenameFilter;
import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Kartik Singal (ka4tik)
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			inputStream = new FileInputStream(new File("in"));
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {

    long[] catalan, factorial;
    long[][] dp;
    boolean[][] done;

    long rec(int n, int m) {
        if (done[n][m])
            return dp[n][m];
        if (n <= m)
            return 0;
        if (m == 0 || n == 0)
            return 1;
        dp[n][m] = (rec(n, m - 1) + rec(n - 1, m)) % MyUtils.mod;
        done[n][m] = true;
        return dp[n][m];

    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {

        if (testNumber == 1) {
            catalan = MyUtils.generate_catalan_numbers(2222);
            factorial = MyUtils.generate_factorials(2222);
            dp = new long[2222][2222];
            done = new boolean[2222][2222];
            for (int i = 1; i < dp.length; i++)
                for (int j = 0; j < dp.length; j++)
                    rec(i, j);
        }

        String str = in.next();
        int n = Integer.parseInt(str.split("-")[0]);
        int m = Integer.parseInt(str.split("-")[1]);
      
        long ans1 = rec(n, m);
        long ans2 = catalan[m];

        out.println("Case #" + testNumber + ": " + ans1 + " " + ans2);
    }
}

class MyUtils
{
    public static final int mod=1000000007;

    public static long[] generate_catalan_numbers(int maxn) {
        long catalan[]=new long[maxn];
        catalan[1] = catalan[0]= 1;
        for (int i = 2; i < maxn; i++) {
            for (int j = 0; j <= i - 1; j++) {
                catalan[i] = (catalan[i] + ((catalan[j]) * catalan[i - j- 1]) % mod) % mod;
            }
            catalan[i] = catalan[i] % mod;
        }
        return catalan;
    }
    public static long[] generate_factorials(int maxn) {
        long factorials[]=new long[maxn];
        factorials[1] = factorials[0]= 1;
        for (int i = 2; i < maxn; i++)
            factorials[i] =(factorials[i-1]*i)%mod;
        return factorials;
    }


}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) try {
            tokenizer = new StringTokenizer(reader.readLine());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return tokenizer.nextToken();
    }

}


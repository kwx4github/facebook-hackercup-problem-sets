import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;
import java.util.Scanner;

public class WinningAtSports {

    private void processInput() throws IOException {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int testCase = 1; testCase <= T; testCase++) {
            String str = in.next();
            String[] sp = str.split("-");
            int me = Integer.parseInt(sp[0]);
            int rival = Integer.parseInt(sp[1]);

            go(testCase, me, rival);
        }

        in.close();
    }

    long MOD = 1000000007;
    int me;
    int rival;
    long[][] memo;
    void go(int t, int me, int rival) {
        this.me = me;
        this.rival = rival;

        memo = new long[me + 1][rival + 1];
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
        long res1 = stressfree(0, 0);

        memo = new long[me + 1][rival + 1];
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
        long res2 = stressfull(0, 0);

        System.out.printf(Locale.ENGLISH, "Case #%d: %d %d\n", t, res1, res2);
    }

    private long stressfree(int score1, int score2) {
        if (memo[score1][score2] != -1) {
            return memo[score1][score2];
        }
        if (score1 == me && score2 == rival) {
            if (me > rival) {
                return memo[score1][score2] = 1;
            } else {
                return memo[score1][score2] = 0;
            }
        } else if (score1 < me && score2 == rival) {
            return memo[score1][score2] = stressfree(score1 + 1, score2);
        } else if (score1 == me && score2 < rival) {
            return memo[score1][score2] = stressfree(score1, score2 + 1);
        } else {
            long res = stressfree(score1 + 1, score2);
            if (score1 > score2 + 1) {
                res += stressfree(score1, score2 + 1);
                res %= MOD;
            }
            res %= MOD;
            return memo[score1][score2] = res;
        }
    }

    private long stressfull(int score1, int score2) {
        if (memo[score1][score2] != -1) {
            return memo[score1][score2];
        }
        if (score1 == me && score2 == rival) {
            if (me > rival) {
                return memo[score1][score2] = 1;
            } else {
                return memo[score1][score2] = 0;
            }
        } else if (score1 < me && score2 == rival) {
            return memo[score1][score2] = stressfull(score1 + 1, score2);
        } else if (score1 == me && score2 < rival) {
            return memo[score1][score2] = stressfull(score1, score2 + 1);
        } else {
            long res = 0;
            
            if (score1 < score2 || score1 + score2 + 1 == me + rival) {
                res += stressfull(score1 + 1, score2);
                res %= MOD;
            }
            res += stressfull(score1, score2 + 1);
            res %= MOD;
            return memo[score1][score2] = res;
        }
    }
    public static void main(String[] args) throws Exception {
        WinningAtSports a = new WinningAtSports();
        a.processInput();
    }
}

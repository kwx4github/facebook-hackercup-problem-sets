package r1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;

public class pr03 {

	public static final long mod = 1_000_000_007;

	public static void main(String[] args) throws IOException {

		BufferedReader reader = new BufferedReader(new FileReader(
				"r1/winning_at_sports.txt"));
		int t = Integer.parseInt(reader.readLine());

		PrintWriter pw = new PrintWriter(new FileWriter("r1/p3_output.txt"));

		for (int i = 0; i < t; i++) {
			String[] s = reader.readLine().split("-");
			int A = Integer.parseInt(s[0]);
			int B = Integer.parseInt(s[1]);

			if (B == 0) {
				// edge case
				pw.printf("Case #%d: %d %d\n", i + 1, 1, 0);
			} else {

				// this could have been done
				// *SO MUCH*
				// simpler with only one table
				// but I really don't want to lose points
				// and I have this dinner party to go to
				// so fuck memory & double complexity

				long sum2 = pes(B);
				long sum1 = opt(A, B);

				pw.printf("Case #%d: %d %d\n", i + 1, sum1, sum2);

			}
		}

		pw.close();
		reader.close();
	}

	public static long opt(int A, int B) {
		long[][] table = new long[A + 1][B + 1];
		for (long[] row : table) {
			Arrays.fill(row, 0);
		}

		table[1][0] = 1;
		table[2][0] = 1;

		for (int y = 1; y <= A; y++) {
			for (int x = 0; x <= B && x < y; x++) {
				if ((y == 1 || y == 2) && x == 0) {
					continue;
				}

				long left = x > 0 ? table[y][x - 1] : 0;
				long up = table[y - 1][x];
				table[y][x] = (left + up) % mod;
			}
		}

		return table[A][B] % mod;
	}

	public static long pes(int B) {
		long[][] table = new long[B + 1][B + 1];
		for (long[] row : table) {
			Arrays.fill(row, 0);
		}
		table[1][0] = 1;
		for (int y = 1; y <= B; y++) {
			for (int x = 0; x <= y; x++) {
				if (y == 1 && x == 0) {
					continue;
				}
				long left = x > 0 ? table[y][x - 1] : 0;
				long up = table[y - 1][x];
				table[y][x] = (left + up) % mod;
			}
		}

		return table[B][B] % mod;
	}

}


# coding: utf-8

# In[5]:

import os
import sys
import numpy
from collections import defaultdict


# In[6]:

problem_id = '3'


# In[7]:

sys.setrecursionlimit(10**9)
input_path = '%s.in.txt' % problem_id
output_path = '%s.out.txt' % problem_id

def read_line():
    line = ''
    while len(line) == 0:
        line = input_file.readline().strip()
    return line


def write_line(line):
    print line
    return output_file.write(line + os.linesep)


# In[9]:

stressfree_cache = defaultdict(int)
stressfree_cache[(1,0)] = 1

def count_stressfree_comb(mine, oppo):
    if (mine, oppo) in stressfree_cache:
        return stressfree_cache[(mine, oppo)]
    count = 0
    if oppo > 0:
        count += count_stressfree_comb(mine, oppo - 1)
    if mine - 1 > oppo:
        count += count_stressfree_comb(mine - 1, oppo)
    count %= 1000000007
    stressfree_cache[(mine, oppo)] = count
    return count

stressful_cache = defaultdict(int)
stressful_cache[(0,1)] = 1

def count_stressful_comb(mine, oppo):
    if (mine, oppo) in stressful_cache:
        return stressful_cache[(mine, oppo)]
    count = 0
    if mine > 0:
        count += count_stressful_comb(mine - 1, oppo)
    if mine <= oppo - 1:
        count += count_stressful_comb(mine, oppo - 1)
    count %= 1000000007
    stressful_cache[(mine, oppo)] = count
    return count


# In[12]:

count_stressfree_comb(2000,2000)
count_stressful_comb(2000,2000)
pass


# In[13]:

def solve():
    mine, oppo = map(int, read_line().split('-'))
    return '%d %d' % (count_stressfree_comb(mine, oppo), count_stressful_comb(mine, oppo))


# In[14]:

input_file = open(input_path, "r")
output_file = open(output_path, "w+")
T = int(read_line())
for case_id in xrange(1, T + 1):
    write_line("Case #%d: %s" % (case_id, solve()))
input_file.close()
output_file.close()


# In[ ]:




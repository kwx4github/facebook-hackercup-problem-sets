package com.jmc;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class WinningAtSports {
    static List<String> getLines(String fileName) throws IOException {
        if (new File(fileName).exists()) {
            String line;
            ArrayList<String> lines = new ArrayList<String>();
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            while((line=reader.readLine()) != null) {
                lines.add(line);
            }
            return lines;
        } else {
            return null;
        }
    }

    public static void main(String[] args) throws Exception {
        String filename;
        if (args.length < 1) {
            filename = WinningAtSports.class.getSimpleName() + ".txt";
        } else {
            filename = args[0];
        }
        System.out.println("Running with filename: " + filename);

        List<String> lines = getLines(filename);
        if (lines == null) {
            System.out.println("Error: can't find file [" + filename + "]");
            System.exit(0);
        }

        String outfile = filename.replace("txt", "out");
        PrintWriter out = new PrintWriter(new FileOutputStream(outfile));

        int tests = Integer.parseInt(lines.get(0));
        int currLine = 1;
        for (int i = 0; i < tests; i++) {
            String strings[] = lines.get(currLine++).split("-");
            int myScore = Integer.parseInt(strings[0]);
            int theirScore = Integer.parseInt(strings[1]);
            HashMap<Long, Long> stressFreeMap = new HashMap<Long, Long>();
            HashMap<Long, Long> stressFullMap = new HashMap<Long, Long>();
            calcStressful(stressFullMap, 0, 0, myScore, theirScore);
            calcStressFree(stressFreeMap, 0, 0, myScore, theirScore);
            long stressFree = stressFreeMap.get(0L);
            long stressful = stressFullMap.get(0L);
            out.println("Case #" + (i+1) + ": " + stressFree + " " + stressful);
            System.out.println("Case #" + (i+1) + ": " + stressFree + " " + stressful);
        }
        out.flush();
        out.close();
        System.out.println("Output in filename: " + outfile);
    }

    static void calcStressful(HashMap<Long, Long> stressFullMap,
                             int currMyScore, int currTheirScore, int myFinalScore, int theirFinalScore) {
        long key = currMyScore * 2000 + currTheirScore;
        if (!stressFullMap.containsKey(key)) {
            if (myFinalScore == currMyScore) {
                if (theirFinalScore == currTheirScore) {
                    stressFullMap.put(key, 1L);
                    return;
                }
            }
            if (theirFinalScore == currTheirScore) {
                if (currMyScore > theirFinalScore) {
                    stressFullMap.put(key, 1L);
                    return;
                }
            }
            if (currTheirScore < currMyScore && currTheirScore < theirFinalScore) {
                stressFullMap.put(key, 0L);
                return;
            }
            long stressful = 0;

            if (currMyScore < myFinalScore) {
                calcStressful(stressFullMap, currMyScore+1, currTheirScore, myFinalScore, theirFinalScore);
                long meFirstKey = (currMyScore+1) * 2000 + currTheirScore;
                stressful += stressFullMap.get(meFirstKey);
            }
            if (currTheirScore < theirFinalScore) {
                calcStressful(stressFullMap, currMyScore, currTheirScore+1, myFinalScore, theirFinalScore);
                long themFirstKey = currMyScore * 2000 + (currTheirScore + 1);
                stressful += stressFullMap.get(themFirstKey);
            }
            stressFullMap.put(key, stressful % 1000000007);
        }
    }

    static void calcStressFree(HashMap<Long, Long> stressFreeMap,
                           int currMyScore, int currTheirScore, int myFinalScore, int theirFinalScore) {
        long key = currMyScore * 2000 + currTheirScore;
        if (!stressFreeMap.containsKey(key)) {
            if (myFinalScore == currMyScore) {
                if (theirFinalScore == currTheirScore) {
                    stressFreeMap.put(key, 1L);
                    return;
                }
            }
            if (theirFinalScore == currTheirScore) {
                if (currMyScore > theirFinalScore) {
                    stressFreeMap.put(key, 1L);
                    return;
                }
            }
            if (currTheirScore >= currMyScore && currTheirScore > 0) {
                stressFreeMap.put(key, 0L);
                return;
            }
            long stressFree = 0;
            if (currMyScore < myFinalScore) {
                calcStressFree(stressFreeMap, currMyScore + 1, currTheirScore, myFinalScore, theirFinalScore);
                long meFirstKey = (currMyScore+1) * 2000 + currTheirScore;
                stressFree += stressFreeMap.get(meFirstKey);
            }
            if (currTheirScore < theirFinalScore) {
                calcStressFree(stressFreeMap, currMyScore, currTheirScore+1, myFinalScore, theirFinalScore);
                long themFirstKey = currMyScore * 2000 + (currTheirScore + 1);
                stressFree += stressFreeMap.get(themFirstKey);
            }
            stressFreeMap.put(key, stressFree % 1000000007);
        }
    }
}

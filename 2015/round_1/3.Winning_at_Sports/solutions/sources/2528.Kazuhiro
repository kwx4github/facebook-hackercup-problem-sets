#include <bits/stdc++.h>
using namespace std;

#define iota(i,n,b,s) for(int i=int(b);i!=int((b)+(s)*(n));i+=(s))
#define range(i,n,m) iota(i,(((n)>(m))?((n)-(m)):((m)-(n))),(n),((n)>(m)?-1:1))
#define rep(i,n) iota(i,(n),0,1)
#define loop for(;;)

#define INF (1e9)
#define EPS (1e-9)
#define cons(a,b) (make_pair(a,b))
#define car(a) (a.first)
#define cdr(a) (a.second)
#define cadr(a) (car(cdr(a)))
#define cddr(a) (cdr(cdr(a)))
#define all(a) a.begin(), a.end()
#define trace(var) cerr<<">>> "<<#var<<" = "<<var<<endl;

typedef long long Integer;
typedef double Real;
typedef vector<int> vi;
typedef vector<string> vs;
typedef map<string,int> Dictionary;
const Real PI = acos(-1);

template<class S, class T>
ostream& operator<<(ostream& os, pair<S,T> p) {
  os << '(' << car(p) << ", " << cdr(p) << ')';
  return os;
}

template<class T>
ostream& operator<<(ostream& os, vector<T> v) {
  if (v.size() == 0) {
    os << "(empty)";
    return os;
  }
  os << v[0];
  for (int i=1, len=v.size(); i<len; ++i) os << ' ' << v[i];
  return os;
}

int dx[] = { -1, 0, 1, 0 };
int dy[] = {  0, -1, 0, 1 };

const int N = 2001;
int d[N][N];
int e[N][N];

int main() {

  d[0][0] = 1;
  e[0][0] = 1;

  rep (i, N) {
    rep (j, N) {
      if (j == 0) {
        d[i][j] = 1;
      }
      else if (i == 0) {
        d[i][j] = 0;
      }
      else {
        if (i > j) {
          d[i][j] = d[i-1][j] + d[i][j-1];
        }
        d[i][j] %= 1000000007;
      }
    }
  }

  rep (i, N) {
    rep (j, N) {
      if (j == 0) {
        e[i][j] = 1;
      }
      else if (i == 0) {
        e[i][j] = 0;
      }
      else {
        if (i >= j) {
          e[i][j] = e[i-1][j] + e[i][j-1];
        }
        e[i][j] %= 1000000007;
      }
    }
  }

  int n; cin >> n;
  rep (i, n) {
    int a,b;char hyp;
    cin >> a >> hyp >> b;
    cout << "Case #" << (i+1) << ": ";
    cout << d[a][b] << ' ' << e[b][b] << endl;
  }

  return 0;
}

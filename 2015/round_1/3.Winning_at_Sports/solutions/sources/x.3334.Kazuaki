#include <iostream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <functional>
#include <iterator>
#include <limits>
#include <numeric>
#include <utility>
#include <cmath>
#include <cassert>

using namespace std; using namespace placeholders;

using LL = long long;
using ULL = unsigned long long;
using VI = vector< int >;
using VVI = vector< VI >;
using VS = vector< string >;
using SS = stringstream;
using PII = pair< int, int >;
using VPII = vector< PII >;
template < typename T = int > using VT = vector<T>;
template < typename T = int > using VVT = VT< VT<T> >;
template < typename T = int > using LIM = numeric_limits< T >;

template < typename T > inline istream& operator>>( istream &s, vector< T > &v ){ for ( T &t : v ) { s >> t; } return s; }
template < typename T > inline ostream& operator<<( ostream &s, const vector< T > &v ){ for ( int i=0; i<v.size(); ++i ){ s << (" "+!i) << v[i]; } return s; }
template < typename T > inline T fromString( const string &s ) { T res; istringstream iss( s ); iss >> res; return res; };
template < typename T > inline string toString( const T &a ) { ostringstream oss; oss << a; return oss.str(); };

#define REP( i, m, n ) for ( int i = ( int )( m ); i < ( int )( n ); ++i )
#define FOR( e, c ) for ( auto &e : c )
#define ALL( c ) ( c ).begin(), ( c ).end()
#define AALL( a, t ) ( t* )a, ( t* )a + sizeof( a ) / sizeof( t )
#define DRANGE( c, p ) ( c ).begin(), ( c ).begin() + p, ( c ).end()

#define SZ( v ) ( (int)( v ).size() )
#define PB push_back
#define EM emplace
#define EB emplace_back
#define BI back_inserter

#define EXIST( c, e ) ( ( c ).find( e ) != ( c ).end() )

#define MP make_pair
#define fst first
#define snd second

#define DUMP( x ) cerr << #x << " = " << ( x ) << endl

constexpr int MOD = 1000000007;

int dp[ 2048 ][ 2048 ][2][2];

constexpr int di[] = { 1, 0 };
constexpr int dj[] = { 0, 1 };

void solve()
{
	int a, b;
	{
		char d;
		cin >> a >> d >> b;
	}

	fill( AALL( dp, int ), 0 );
	dp[0][0][1][1] = 1;

	REP( i, 0, a + 1 )
	{
		REP( j, 0, b + 1 )
		{
			REP( k, 0, 2 )
			{
				REP( l, 0, 2 )
				{
					REP( d, 0, 2 )
					{
						const int ni = i + di[d];
						const int nj = j + dj[d];
						const int nk = k && ni > nj;
						const int nl = b <= nj ? l : l && ni <= nj;

						( dp[ ni ][ nj ][ nk ][ nl ] += dp[i][j][k][l] ) %= MOD;
					}
				}
			}
		}
	}

	cout << dp[a][b][1][ b == 0 ] << ' ' << dp[a][b][0][1] << endl;

	return;
}

int main()
{
	cin.tie( 0 );
	ios::sync_with_stdio( false );

	int T;
	cin >> T;

	REP( i, 0, T )
	{
		cout << "Case #" << i + 1 << ": ";
		solve();
	}

	return 0;
}

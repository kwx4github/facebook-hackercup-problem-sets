package fhc;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

public class ProblemC {

    private static final long MOD = 1_000_000_007;

    private static Map<String, Long> FREE_CACHE = new HashMap<>();
    private static Map<String, Long> FUL_CACHE = new HashMap<>();

    public static void main(String[] args) throws IOException, ParseException {
        BufferedReader br = new BufferedReader(new FileReader("c:\\Users\\skhomenko\\Downloads\\winning_at_sports.txt"));
        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; t++) {
            Object[] parsed = new MessageFormat("{0}-{1}").parse(br.readLine());
            int W = Integer.parseInt(parsed[0].toString());
            int L = Integer.parseInt(parsed[1].toString());
            FREE_CACHE = new HashMap<>();
            FUL_CACHE = new HashMap<>();
            long resFree = recStressFree(W, L, 0);
            long resFul = recStressful(W, L, 0);
            System.out.println("Case #" + t + ": " + resFree + " " + resFul);
        }
    }

    private static long recStressful(int w, int l, int count) {
        if (w == 0 || l == 0) {
            return 1;
        }
        String key = w + "-" + l;
        Long cachedRes = FUL_CACHE.get(key);
        if (cachedRes != null) {
            return cachedRes;
        }
        long res = 0;
        if (count > 0 && w > 0) {
            res += recStressful(w - 1, l, count - 1);
        }
        res += recStressful(w, l - 1, count + 1);
        res %= MOD;
        FUL_CACHE.put(key, res);
        return res;
    }

    private static long recStressFree(int w, int l, int count) {
        if (w == 0 || l == 0) {
            return 1;
        }
        String key = w + "-" + l;
        Long cachedRes = FREE_CACHE.get(key);
        if (cachedRes != null) {
            return cachedRes;
        }
        long res = 0;
        if (count > 1 && l > 0) {
            res += recStressFree(w, l - 1, count - 1);
        }
        res += recStressFree(w - 1, l, count + 1);
        res %= MOD;
        FREE_CACHE.put(key, res);
        return res;
    }

}

/* gcc version 4.9.2 20141224
 * g++ -Wall -Wextra -Wconversion -std=c++11 -g
 */
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(__typeof__((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define mp make_pair
#define pb push_back
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) ({ if(1) fprintf(stderr, __VA_ARGS__); })
#define DBGDO(X) ({ if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; })

const int maxAB = 2000 + 2;

int TC, A, B;
string tmp;
const ll MOD = 1e9 + 7;
ll dp[maxAB][maxAB];

void update(int a, int b, ll v) {
	dp[a][b] = (dp[a][b] + v) % MOD;
}

int main() {
	ios::sync_with_stdio(false);

	cin >> TC;
	FOR(tc, 1, TC+1) {
		cin >> tmp;
		auto p = tmp.find('-');
		assert(p != string::npos);
		A = stoi(tmp.substr(0, p));
		B = stoi(tmp.substr(p+1));

		memset(dp, 0, sizeof(dp));
		dp[1][0] = 1;
		FOR(points, 1, A+B) {
			FOR(a, 0, min(A,points)+1) {
				int b = points - a;
				if (b >= a) continue;
				assert(b >= 0);

				if (a+1 <= A)
					update(a+1, b, dp[a][b]);
				if (b+1 <= B && b+1 < a)
					update(a, b+1, dp[a][b]);
			}
		}
		ll easy = dp[A][B];

		memset(dp, 0, sizeof(dp));
		dp[0][0] = 1;
		FOR(points, 0, A+B) {
			FOR(a, 0, min(A,points)+1) {
				int b = points - a;
				if (b < a && b != B) continue;
				assert(b >= 0);

				if ((b == B || a+1 <= b) && a+1 <= A)
					update(a+1, b, dp[a][b]);
				if (b+1 <= B)
					update(a, b+1, dp[a][b]);
			}
		}
		ll hard = dp[A][B];

		printf("Case #%d: %lld %lld\n", tc, easy, hard);
	}
}

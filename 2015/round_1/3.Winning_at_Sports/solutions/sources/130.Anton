import java.util.*;
import java.io.*;

public class C {
	FastScanner in;
	PrintWriter out;

	final int mod = (int) (1e9 + 7);
	
	int stressFree(int sc0, int sc1) {
		int[][] dp = new int[sc0 + 1][sc1 + 1];
		dp[0][0] = 1;
		for (int sum = 1; sum <= sc0 + sc1; sum++) {
			for (int l = 0; l <= sc0; l++) {
				int r = sum - l;
				if (r >= 0 && r <= sc1 && l > r) {
					if (l != 0)
						dp[l][r] = (dp[l - 1][r] + dp[l][r]) % mod;
					if (r != 0)
						dp[l][r] = (dp[l][r - 1] + dp[l][r]) % mod;
				}
			}
		}
		return dp[sc0][sc1];
	}
	
	int stressFull(int sc0, int sc1) {
		int[][] dp = new int[sc0 + 1][sc1 + 1];
		dp[0][0] = 1;
		for (int sum = 1; sum <= sc0 + sc1; sum++) {
			for (int l = 0; l <= sc0; l++) {
				int r = sum - l;
				if (r >= 0 && r <= sc1 && l <= r) {
					if (l != 0)
						dp[l][r] = (dp[l - 1][r] + dp[l][r]) % mod;
					if (r != 0)
						dp[l][r] = (dp[l][r - 1] + dp[l][r]) % mod;
				}
			}
		}
		return dp[sc1][sc1];
	}
	
	public void solve() throws IOException {
		String[] input = in.next().split("-");
		int sc0 = Integer.parseInt(input[0]);
		int sc1 = Integer.parseInt(input[1]);
		
		out.println(stressFree(sc0, sc1) + " " + stressFull(sc0, sc1));
	}

	public void run() {
		try {
			in = new FastScanner(new File("c.in"));
			out = new PrintWriter(new File("c.out"));

			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new C().run();
	}
}
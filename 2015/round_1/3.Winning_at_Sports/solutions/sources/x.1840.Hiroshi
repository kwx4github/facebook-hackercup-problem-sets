
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.Queue;

public class C {
	FastScanner in = new FastScanner(System.in);
	PrintWriter out = new PrintWriter(System.out);

	class State {
		int x;
		int y;

		State(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	int convert(int x, int y) {
		return x * (MAX + 100) + y;
	}
	
	int MOD = 1000000007;
	int MAX = 2000;
	long[][] free = new long[MAX+1][MAX+1];
	long[][] full = new long[MAX+1][MAX+1];

	void solve() {
		String[] match = in.next().split("-");
		int my = Integer.valueOf(match[0]);
		int opp = Integer.valueOf(match[1]);
		
		for (int i = 0; i <= MAX; i++) {
			Arrays.fill(free[i], 0);
			Arrays.fill(full[i], 0);
		}
		
		HashSet<Integer> hash = new HashSet<Integer>();
		Queue<State> q = new LinkedList<State>();
		q.add(new State(1, 0));
		free[1][0] = 1;
		
		while (!q.isEmpty()) {
			State st = q.poll();
			int nx = st.x;
			int ny = st.y + 1;
			if (ny <= opp && nx != ny) {
				free[nx][ny] = (free[nx][ny] + free[st.x][st.y]) % MOD;
				if (!hash.contains(convert(nx, ny))) {
					q.add(new State(nx, ny));
					hash.add(convert(nx, ny));
				}
			}
			
			nx = st.x + 1;
			ny = st.y;
			if (nx <= my) {
				free[nx][ny] = (free[nx][ny] + free[st.x][st.y]) % MOD;
				if (!hash.contains(convert(nx, ny))) {
					q.add(new State(nx, ny));
					hash.add(convert(nx, ny));
				}
			}
		}
		
		hash.clear();
		q.clear();
		q.add(new State(0, 1));
		full[0][1] = 1;
		while (!q.isEmpty()) {
			State st = q.poll();
			int nx = st.x;
			int ny = st.y + 1;
			if (ny <= opp) {
				full[nx][ny] = (full[nx][ny] + full[st.x][st.y]) % MOD;
				if (!hash.contains(convert(nx, ny))) {
					q.add(new State(nx, ny));
					hash.add(convert(nx, ny));
				}
			}
			
			nx = st.x + 1;
			ny = st.y;
			if ((ny == opp || nx <= ny) && nx <= my) {
				full[nx][ny] += (full[nx][ny] + full[st.x][st.y]) % MOD;
				if (!hash.contains(convert(nx, ny))) {
					q.add(new State(nx, ny));
					hash.add(convert(nx, ny));
				}
			}
		}
		out.println(free[my][opp] + " " + full[my][opp]);
	}

	public void run() {
		int T = in.nextInt();
		for (int caseN = 1; caseN <= T; caseN++) {
			out.print("Case #" + caseN + ": ");
			solve();
		}

		out.close();
	}

	public static void main(String[] args) {
		new C().run();
	}

	public void mapDebug(int[][] a) {
		System.out.println("--------map display---------");

		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[i].length; j++) {
				System.out.printf("%3d ", a[i][j]);
			}
			System.out.println();
		}

		System.out.println("----------------------------");
		System.out.println();
	}

	public void debug(Object... obj) {
		System.out.println(Arrays.deepToString(obj));
	}

	class FastScanner {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public FastScanner(InputStream stream) {
			this.stream = stream;
			//stream = new FileInputStream(new File("dec.in"));

		}

		int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		boolean isEndline(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		int[] nextIntArray(int n) {
			int[] array = new int[n];
			for (int i = 0; i < n; i++)
				array[i] = nextInt();

			return array;
		}

		int[][] nextIntMap(int n, int m) {
			int[][] map = new int[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextIntArray(m);
			}
			return map;
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		long[] nextLongArray(int n) {
			long[] array = new long[n];
			for (int i = 0; i < n; i++)
				array[i] = nextLong();

			return array;
		}

		long[][] nextLongMap(int n, int m) {
			long[][] map = new long[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextLongArray(m);
			}
			return map;
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		double[] nextDoubleArray(int n) {
			double[] array = new double[n];
			for (int i = 0; i < n; i++)
				array[i] = nextDouble();

			return array;
		}

		double[][] nextDoubleMap(int n, int m) {
			double[][] map = new double[n][m];
			for (int i = 0; i < n; i++) {
				map[i] = in.nextDoubleArray(m);
			}
			return map;
		}

		String next() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		String[] nextStringArray(int n) {
			String[] array = new String[n];
			for (int i = 0; i < n; i++)
				array[i] = next();

			return array;
		}

		String nextLine() {
			int c = read();
			while (isEndline(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndline(c));
			return res.toString();
		}
	}
}


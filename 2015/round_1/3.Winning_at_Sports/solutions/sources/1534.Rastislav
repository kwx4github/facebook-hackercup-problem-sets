#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (__typeof(a) i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

#define MAX 2047
#define MOD 1000000007LL

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

LL P[MAX][MAX],S[MAX][MAX];

inline void solve(int t)
{
	int a,b;
	scanf("%d-%d",&a,&b);

	FOR(i,1,a)
	{
		FOR(j,1,b)
		{
			if (j!=b && i>j) S[i][j] = 0;
			else S[i][j] = (S[i-1][j] + S[i][j-1])%MOD;
		}
	}

	printf("Case #%d: %lld %lld\n",t,P[a][b],S[a][b]);
}

int main()
{
	REP(i,MAX) P[0][i] = 0;
	REP(i,MAX) P[i][0] = 1;

	REP(i,MAX) S[i][0] = 0;
	REP(i,MAX) S[0][i] = 1;

	FOR(i,1,MAX-1)
	{
		FOR(j,1,MAX-1)
		{
			if (j>=i) P[i][j] = 0;
			else P[i][j] = (P[i-1][j] + P[i][j-1])%MOD;
		}
	}

	int T;
	scanf("%d",&T);
	REP(i,T) solve(i+1);
        return 0;
}

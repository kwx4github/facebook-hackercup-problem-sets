#include <algorithm>
#include <cmath>
#include <climits>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <tuple>
using namespace std;

typedef long long int64;
//typedef __int128_t int128;
typedef vector<int> veci;
typedef vector<string> vecs;

#define VAR(a, b) __typeof(b) a=(b)
#define FOREACH(it, c) for (VAR(it, (c).begin()); it != (c).end(); ++it)
#define TRACE(x) cout << #x << endl
#define DEBUG(x) cout << #x " = " << (x) << endl
#define DEBUGA(a, n) VAR(__p, a); cout << #a " = {"; for (int __i = 0; __i < n; ++__i, ++__p) cout << (__i == 0 ? "" : ", ") << *(__p); cout << "}" << endl
#define CLR(a, val) memset(a, val, sizeof(a))

template<class T1, class T2> ostream& operator << (ostream &o, const pair<T1, T2> &p)
{
  return o << "(" << p.first << ", " << p.second << ")";
}

template<class T1, class T2, class T3> ostream& operator << (ostream &o, const tuple<T1, T2, T3> &t)
{
  return o << "(" << get<0>(t) << ", " << get<1>(t) << ", " << get<2>(t) << ")";
}

template<class T1, class T2, class T3, class T4> ostream& operator << (ostream &o, const tuple<T1, T2, T3, T4> &t)
{
  return o << "(" << get<0>(t) << ", " << get<1>(t) << ", " << get<2>(t) << ", " << get<3>(t) << ")";
}

template<class T> ostream& operator << (ostream &o, const vector<T> &v)
{
  o << '{';
  FOREACH(it, v) o << (it == v.begin() ? "" : ", ") << *it;
  return o << '}';
}

const int64 MOD = 1000000007;

int64 fmemo[2001][2001];
int64 stressfree(int w, int l) {
  if (w < 0 || l < 0) return 0;
  if (w <= l) return 0;
  if (w == 1 && l == 0) return 1;

  if (fmemo[w][l] != -1)
    return fmemo[w][l];

  int64 res;
  if (w == l+1) res = stressfree(w, l-1);
  else res = (stressfree(w-1, l) + stressfree(w, l-1)) % MOD;

  return fmemo[w][l] = res;
}

int64 smemo[2001][2001];
int64 stressful(int w, int l) {
  if (w < 0 || l < 0) return 0;
  if (w == 0 && l == 0) return 1;

  if (smemo[w][l] != -1)
    return smemo[w][l];

  int64 res;
  if (w >= l) res = stressful(w-1, l);
  else res = (stressful(w-1, l) + stressful(w, l-1)) % MOD;

  return smemo[w][l] = res;
}

void run(int tc)
{
  int w, l;
  int blah = scanf("%d-%d", &w, &l);
  int64 f = stressfree(w, l);
  int64 s = stressful(w, l);
  cout << "Case #" << (tc + 1) << ": " << f << ' ' << s << endl;
}

int main()
{
  CLR(smemo, -1);
  CLR(fmemo, -1);
  int T = 0, tc = 0;
  for (cin >> T; tc < T; tc++) run(tc);
  return 0;
}

#include <iostream>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <list>
#include <stack>
#include <cmath>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
using namespace std;

typedef  long long LL;
const int Mod = 1e9 + 7;
inline int FIX(LL a) {return (a % Mod + Mod) % Mod;}
#define MP(x,y) make_pair(x,y)
#define LEN(x) ((int)x.length())
#define take(x,y) (((x)>>(y)) & 1ll)
//#define move(n) (1<<(n))
#define what_is(x) cerr << #x << " is " << x << endl;
#define eb emplace_back
#define UNQ(x) (sort(begin(x),end(x)),x.erase(unique(begin(x),end(x)),end(x)))
//const int N = 20000000 + 5;

int dp[2000 + 5][2000 + 5];
int main(){
    freopen("winning_at_sports.txt","r",stdin);
    freopen("winning_at_sports.out","w",stdout);
    int T,cas = 0;
    scanf("%d",&T);
    while(T--) {
        int A,B;
        scanf("%d-%d",&A,&B);
        memset(dp,0,sizeof(dp));
        dp[0][0] = 1;
        for(int i = 0;i <= A;i++)
            for(int j = 0;j <= B;j++) {
                if(i == A && j == B) continue;
                //
                if(i + 1 > j && i + 1 <= A) (dp[i+1][j] += dp[i][j]) %= Mod;
                if(i > j + 1 && j + 1 <= B) (dp[i][j+1] += dp[i][j]) %= Mod;
                
            }
        int Ans_1 = dp[A][B] % Mod;
        memset(dp,0,sizeof(dp));
        dp[0][0] = 1;
        for(int i = 0;i <= A;i++)
            for(int j = 0;j <= B;j++) {
                if(i == A && j == B) continue;
                //
                if(i + 1 <= A){
                    if(i + 1 <= j || j == B)
                        (dp[i+1][j] += dp[i][j])%= Mod;
                }
                if(j + 1 <= B && i <= j + 1)
                    (dp[i][j+1] += dp[i][j])%= Mod;
            }
        int Ans_2 = dp[A][B] % Mod;
        printf("Case #%d: %d %d\n",++cas,Ans_1,Ans_2);
    }
    return 0;
}








// License {{{
// <=================================================================>
//
//             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
//                     Version 2, December 2004
//
//  Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
//
//  Everyone is permitted to copy and distribute verbatim or modified
//  copies of this license document, and changing it is allowed as long
//  as the name is changed.
//
//             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
//    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
//
//   0. You just DO WHAT THE FUCK YOU WANT TO.
//
// <=================================================================>
// }}}

// great templeat {{{
#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <queue>
#include <deque>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <functional>
#include <iterator>
#include <utility>

using namespace std;

#ifdef moskupols
    #define debug(...) fprintf(stderr, __VA_ARGS__) // thank Skird it's friday!
#else
    #define debug(...) 42
#endif

#define timestamp(x) debug("["#x"]: %.3f\n", (double)clock() / CLOCKS_PER_SEC) // thank PavelKunyavskiy i am not pregnant!

#define hot(x) (x)
#define sweet(value) (value)
#define lovelyCute(nine) 9

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

// }}} --- end of great templeat ---

const int64 modulo = 1000000007;
const int maxn = 4005;

int64 dp[maxn][maxn];

void prepare()
{
    memset(dp, 0, sizeof dp);
    dp[0][0] = 1;
    for (int i = 1; i < maxn; ++i) {
        for (int j = 0; j + 1 < maxn; ++j) {
            if (j) {
                dp[i][j] += dp[i-1][j-1];
            }
            dp[i][j] += dp[i-1][j+1];
            dp[i][j] %= modulo;
        }
    }
}

void solve()
{
    string s;
    cin >> s;
    int a, b;
    sscanf(s.c_str(), "%d-%d", &a, &b);
    
    cout << dp[a + b - 1][a - b - 1] << ' ' << dp[b * 2][0] << endl;
}

int main()
{
    prepare();
	cin.sync_with_stdio(false);
    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i)
    {
        cout << "Case #" << i << ": ";
        solve();
    }

	timestamp(end);
	return 0;
}


import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class ProblemC {

	final static int MOD = 1000000007;
	
	public static void main(String[] args) throws IOException {
		
		ProblemC solver = new ProblemC();
		solver.init();
		solver.solve();
	}

	private void init() {
		
	}
	
	private void solve() throws IOException {
		 
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			String[] tokens = in.next().split("-");
			int A = Integer.valueOf(tokens[0]);
			int B = Integer.valueOf(tokens[1]);
			
			out.println("Case #" + t + ": " + stressFree(A,B) + " " + stressFull(A,B));
		}
		
		out.flush();
		out.close();
	}
	
	private int stressFree(int A, int B) {
		int[][] dp = new int[A+1][B+1];
		dp[1][0] = 1;
		for (int score = 1; score < A + B; score++) {
			for (int a = Math.min(score, A), b = score - a; a > b && b <= B; a--, b++) {
				if (a < A) {
					incrementA(dp, a, b);
				}
				if (a - b > 1 && b < B) {
					incrementB(dp, a, b);
				}
			}
		}
		return dp[A][B];
	}
	
	private int stressFull(int A, int B) {
		int[][] dp = new int[A+1][B+1];
		dp[0][0] = 1;
		for (int score = 0; score < A + B; score++) {
			for (int b = Math.min(score, B), a = score - b;; b--, a++) {
				if (b == B) {
					incrementA(dp, a, b);
				} else if (a > b) {
					break;
				} else {
					if (a < b) {
						incrementA(dp, a, b);
					}
					incrementB(dp, a, b);
				}
			}
		}
		return dp[A][B];
		
	}

	private void incrementA(int[][] dp, int a, int b) {
		dp[a+1][b] += dp[a][b];
		if (dp[a+1][b] >= MOD) dp[a+1][b] -= MOD;
	}

	private void incrementB(int[][] dp, int a, int b) {
		dp[a][b + 1] += dp[a][b];
		if (dp[a][b+1] >= MOD) dp[a][b+1] -= MOD;
	}
	
	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

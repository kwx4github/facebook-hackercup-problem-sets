#include <iostream>
#include <algorithm>
#define LL long long
#define mod 1000000007
using namespace std;
LL DP[2][2001][2001];
int a, b;
bool good(int k, int i, int j) {
    if (i >= 0 && j >= 0) {
        if (k == 0)
            return i > j;
        else
            return (i <= j || j == b);
    }
    return false;
}
void solve() {
    DP[1][0][0] = 1;
    DP[0][0][0] = 1;
    for (int i = 0; i <= a; i++) {
        for (int j = 0; j <= b; j++) {
            if (i == 0 && j == 0) continue;
            for (int k = 0; k < 2; k++) {
                DP[k][i][j] = 0;
                if (good(k, i, j)) {
                    if (i - 1 >= 0)
                        DP[k][i][j] += DP[k][i - 1][j];
                        DP[k][i][j] %= mod;
                    if (j - 1 >= 0)
                        DP[k][i][j] += DP[k][i][j - 1];
                        DP[k][i][j] %= mod;
                }
            }
        }
    }
}
int main() {

    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    for (int test = 1; test <= t; test++) {
        string in;
        cin >> in;
        a = 0;
        b = 0;
        int idx = 0;
        while (in[idx] != '-') {
            a *= 10;
            a += in[idx] - '0';
            idx++;
        }
        idx++;
        while (idx < in.size()) {
            b *= 10;
            b += in[idx] - '0';
            idx++;
        }

        solve();
        int an1 = DP[0][a][b];
        int an2 = DP[1][a][b];
        cout << "Case #" << test << ": " << an1 << " " << an2 << "\n";
    }
    return 0;
}





#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>

using namespace std;

#define all(v) v.begin(), v.end()
#define pb(v, e) v.push_back(e)
#define rall(v) v.rbegin, v.rend()
#define ll long long
#define sz(v) (int) v.size()
#define az(x) (sizeof(x) / sizeof(x[0]))
#define oo (int) 13e7
#define fill(v, e) memset(v, e, sizeof v)

#define N 2001
#define MOD 1000000007

int dp[N * 2][N];

int doit(int k, int p, int o, int t, int g, int a) {
  if(k > t) return p == g ? 1 : 0;
  if(dp[k][p] != -1) return dp[k][p];
  int r = doit(k + 1, p + 1, o, t, g, a) % MOD;
  if(p > o + a) r += (doit(k + 1, p, o + 1, t, g, a) % MOD); 
  return dp[k][p] = r % MOD;
}

int solve(int k, int p, int o, int t, int g, int a) {
  fill(dp, -1);
  return doit(k, p, o, t, g, a);
}

int main() {
  freopen("c.txt", "r", stdin);
  //freopen("c.out", "w", stdout);
  int t, a, b, c; 
  scanf("%d", &t);

  for(int i = 1; i <= t; ++i) {
    scanf("%d-%d", &a, &b); 
    c = 2 * b - 1;
    cout << "Case #" << i << ": " << solve(1, 0, 0, a + b, a, 1) << " " << solve(1, 0, 0, c, b, 0) << endl;
  }
}

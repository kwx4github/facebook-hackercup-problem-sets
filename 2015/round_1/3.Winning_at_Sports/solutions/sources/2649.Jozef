#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <memory>

using namespace std;

int CONST = 2001;
int PRIME = 1000000007;

struct Node {
	Node () {
		chars.resize(CONST);
		for(int i = 0; i < CONST; i++)
			chars[i] = nullptr;
	}
	vector<Node * > chars;
};


int notStressCount(int i, int j, const vector<vector<int> >& not_stress){	
	if(j>=i)
		return 0;
	if(j == 0 || i == 0)
		return 1;
	int ans = not_stress[i][j-1];
	if(i-1 > j)
		ans += not_stress[i-1][j];
	ans %= PRIME;
	return ans;
}

int stressCount(int i, int j, const vector<vector<int> >& stress){	/// count that the first is always bigger or the same
	if(j>i)
		return 0;
	if(j == 0 || i == 0)
		return 1;
	int ans = stress[i][j-1];
	if(i-1 >= j)
		ans += stress[i-1][j];
	ans %= PRIME;
	return ans;
}

int main() {
	int T;
	cin>>T;
	vector<vector<int> > not_stress(CONST, vector<int> (CONST, 0));
	for(int sum = 0; sum <= 4000; sum++){
		for(int i = 0; i <= sum; i++){
			if(i < CONST && sum-i < CONST)
				not_stress[i][sum-i] = notStressCount(i,sum-i,not_stress);			
		}
	}

	
	vector<vector<int> > stress(CONST, vector<int> (CONST, 0));
	for(int sum = 0; sum <= 4000; sum++){
		for(int i = 0; i <= sum; i++){
			if(i < CONST && sum-i < CONST)
				stress[i][sum-i] = stressCount(i,sum-i,stress);			
		}
	}

	for(int t_case = 1; t_case <= T; t_case++){
		cout<<"Case #"<<t_case<<": ";
		string word;
		cin>>word;
		int i = 0;
		int x = 0;
		int y = 0;
		while(word[i] != '-'){
			x*=10;
			x+=word[i]-'0';
			i++;
		}
		i++;
		
		while(i!=word.size()){
			y*=10;
			y+=word[i]-'0';
			i++;
		}
		if(x == 0 || y == 0)
			cout<<"1 1";
		else
			cout<<not_stress[x][y]<<" "<<stress[y][y-1];

		cout<<endl;
	}
    return 0;
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <stack>
#include <cassert>
#include <cstring>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#define VAR(i,v) __typeof(v) i = (v)
#define SIZE(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define REP(i,b) for(int i=0; i<(b); ++i)
#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define NL printf("\n")

using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

const int MOD = 1000000007;
const int INF = 2147483640;
const int MAXN = 2005;
char w[500];
LL c[MAXN];
int dp[MAXN][MAXN];

int main() {
	c[0] = c[1] = 1;
	FOR(i,2,MAXN-2) {
		c[i] = 0;
		REP(j,i) c[i] = (c[i] + c[j] * c[i-j-1]) % MOD;
	}

	FOR(i,2,MAXN-2) dp[1][i] = i-1;

	FOR(i,2,MAXN-2)	FOR(j,i+1,MAXN-2) {
		dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD;
	}

	int t;
	scanf("%d", &t);
	REP(i,t) {
		scanf("%s", w);
		int n = strlen(w);
		string aa, bb;
		bool v = 0;
		REP(i,n) {
			if(w[i]=='-') v = 1;
			else {
				if(v == 0) aa += w[i];
				else bb += w[i];
			}
		}
		int a = stoi(aa);
		int b = stoi(bb);
		if(a == 1 || b==0) { // corner case
			printf("Case #%d: %d %d\n", i+1, 1, 1);
		} else {
			printf("Case #%d: %d %d\n", i+1, dp[b][a], (int)c[b]);
		}
	}

	return 0;
}

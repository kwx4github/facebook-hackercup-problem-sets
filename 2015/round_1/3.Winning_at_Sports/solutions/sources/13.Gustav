#include <cstdio>
#include <cassert>
#include <cstring>

#include <algorithm>
#include <iostream>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

const int mod = 1000000007;

int add(int a, int b) { return (a + b) % mod; }

const int MAX = 2005;
int dp_sf[MAX][MAX];

int A, B;

int sf(int a, int b) {
  if (a > A) return 0;
  if (b > B) return 0;
  if (a == A && b == B) return 1;

  int &ret = dp_sf[a][b];
  if (ret >= 0) return ret;

  ret = 0;

  if (b + 1 < a) {
    ret = add(ret, sf(a, b + 1));
  }

  ret = add(ret, sf(a + 1, b));

  return ret;
}

int dp_s[MAX][MAX];

int s(int a, int b) {
  if (a > A) return 0;
  if (b > B) return 0;
  if (a == A && b == B) return 1;

  int &ret = dp_s[a][b];
  if (ret >= 0) return ret;

  ret = 0;

  if (a + 1 <= b) {
    ret = add(ret, s(a + 1, b));
  } else if (b == B) {
    ret = add(ret, s(a + 1, b));
  }

  ret = add(ret, s(a, b + 1));

  return ret;
}

int main(void) 
{
  int T;
  scanf("%d", &T);

  REP(tc, T) {
    scanf("%d-%d", &A, &B);
    memset(dp_s, -1, sizeof dp_s);
    memset(dp_sf, -1, sizeof dp_sf);

    printf("Case #%d: %d %d\n", tc + 1, sf(0, 0), s(0, 0));
  }

  return 0;
}

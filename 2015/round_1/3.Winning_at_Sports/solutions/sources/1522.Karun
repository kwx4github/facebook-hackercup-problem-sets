#include <iostream>
#include <string>

using namespace std;

long long cata[2001];

void gencat() {
    cata[1] = 1;
    for (int i = 2; i <= 2001; i++) {
        for (int j = 1; j <= i-1; j++) {
        	//dp it
            cata[i] = (cata[i] + ((cata[j]) * cata[i-j]) % 1000000007) % 1000000007;
        }
        cata[i] = cata[i] % 1000000007;
    }
}

long long cat (int x) {
	return cata[x];
}

int con (string x) {
	int factor = 1;
	int answer = 0;
	for (int i = x.length()-1; i >= 0; i--) {
		int d = x[i] - '0';
		answer += d*factor;
		factor*=10;
	}
	return answer;
}

long long ar[2001][2001];

long long fexp (int x, int y) {
	if (x <= y) return 0;
	if (x < 1 || y < 0) return 0;
	if (x == 1 && y == 0) return 1;
	long long prev = ar[x][y];
	if (prev > -1) return prev%1000000007;
	else if (y == x-1) return cat(x)%1000000007;
	else if (y == x-2) return cat(x)%1000000007;
	else {
		long long ans = (fexp(x-1, y)%1000000007 + fexp (x, y-1)%1000000007)%1000000007; 
		ar[x][y] = ans;
	}
}

int main () {
	int t;
	cin >> t;
	gencat();
	for (int i = 0; i < 2001; i++) {
		for (int j = 0; j < 2001; j++) {
			ar[i][j] = -1;
		}
	}
	for (int i = 0; i < t; i++) {
		string a;
		string b;
		string c;
		cin >> a;
		bool hyphen = false;
		for (int j = 0; j < a.length(); j++) {
			char ch = a[j];
			if (ch == '-') hyphen = true;
			else {
				if (hyphen) c += ch;
				else b += ch;
			}
		}
		int x = con(b);
		int y = con(c);
		cout << "Case #" << (i+1) << ": " << fexp(x, y) << " " << cat(y+1) << "\n";
	}
}

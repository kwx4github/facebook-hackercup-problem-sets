using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Question3
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var writer = new StreamWriter("Output.txt"))
            using (var reader = new StreamReader("winning_at_sports.txt"))
            {
                var T = int.Parse(reader.ReadLine());
                for (var i = 0; i < T; i++)
                {
                    var input = reader.ReadLine().Split('-');
                    var homeScore = int.Parse(input[0]);
                    var opponentScore = int.Parse(input[1]);

                    var caseNumber = i + 1;
                    writer.WriteLine("Case #" + caseNumber + ": " + StressFree(homeScore, opponentScore) + " " + Stressful(homeScore, opponentScore));
                }
            }
        }

        static BigInteger StressFree(int home, int opp)
        {
            BigInteger div1 = 1;
            BigInteger num = 1;
            for (var i = 1; i <= 2 * (home - 1); ++i)
            {
                num *= i;
                if (i <= home - 1)
                {
                    div1 *= i;
                }
            }
            var cat = num/(div1*(home)*div1);
            if (home - opp > 2)
            {
                var iterations = home - opp - 2;
                
                for (var i = 0; i < iterations; ++i)
                {
                    BigInteger kFact = 1;
                    BigInteger nkFact = 1;
                    BigInteger n1Fact = 1;
                    for (var j = 1; j <= (home - 2) + (home - 2 - i); ++j)
                    {
                        nkFact *= j;
                        if (j <= home - 2 - i)
                        {
                            kFact *= j;
                        }
                        if (j <= home - 1)
                        {
                            n1Fact *= j;
                        }
                    }
                    cat -= (nkFact*((home - 2) - (home - 2 - i) + 1))/(kFact*n1Fact);
                }
            }
            return cat % 1000000007;
        }

        static BigInteger Stressful(int home, int opp)
        {
            BigInteger div1 = 1;
            BigInteger num = 1;
            for (var i = 1; i <= 2 * opp; ++i)
            {
                num *= i;
                if (i <= opp)
                {
                    div1 *= i;
                }
            }
            return num/(div1*(opp + 1)*div1)%1000000007;
        }
    }
}

import java.util.*;
import java.io.*;

public class TaskC {
    private FastScanner in;
    private PrintWriter out;
    final int MAX = 2010;
    final int MOD = (int) 1e9 + 7;

    public void solve() throws IOException {
        int test = in.nextInt();
        int[][] a = new int[MAX][MAX];
        int[][] b = new int[MAX][MAX];
        a[1][0] = 1;
        b[0][0] = 1;
        for (int i = 2; i < MAX; i++) {
            for (int j = 0; j < i; j++) {
                if (i - j > 1) {
                    a[i][j] = a[i - 1][j];
                }
                if (j != 0) {
                    a[i][j] += a[i][j - 1];
                }
                a[i][j] %= MOD;
            }
        }
        for (int i = 0; i < MAX; i++) {
            for (int j = i; j < MAX; j++) {
                if (i == 0 && j == 0) {
                    continue;
                }

                if (i != j) {
                    b[i][j] = b[i][j - 1];
                }

                if (i != 0) {
                    b[i][j] += b[i - 1][j];
                }
                b[i][j] %= MOD;
            }
        }


        for (int t = 0; t < test; t++) {
            String s = in.next();
            String[] data = s.split("-");
            int aa = Integer.parseInt(data[0]), bb = Integer.parseInt(data[1]);

            out.println("Case #" + (t + 1) + ": " + (a[aa][bb]) + " " + (b[bb][bb]));
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("input.txt"));
            out = new PrintWriter(new File("output.txt"));
            solve();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        public String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    public static void main(String[] arg) {
        new TaskC().run();
    }
}
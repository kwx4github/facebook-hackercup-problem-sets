import java.util.Locale;
import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.File;
import java.io.Writer;
import java.io.FilenameFilter;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.InputMismatchException;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.Reader;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Nipuna Samarasekara
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "winning.*at.*sports.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastScanner in = new FastScanner(inputStream);
		FastPrinter out = new FastPrinter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {
    // 689^*(
    static long mod=1000000007;
    public void solve(int testNumber, FastScanner in, FastPrinter out) {
    String line=in.readLine();
        StringTokenizer st= new StringTokenizer(line,"-");
        int a=Integer.parseInt(st.nextToken()),b=Integer.parseInt(st.nextToken());
        int min=Math.min(a,b);
        long[][] dp= new long[min+1][min+1];
        dp[0][0]=1;
        for (int op = 1; op <= min ; op++) {
            for (int me = 0; me <=op ; me++) {
              dp[op][me]+=dp[op-1][me];
              if (me>0)dp[op][me]+=dp[op][me-1];
                if (dp[op][me]>=mod)dp[op][me]-=mod;
            }
        }
        long stress=dp[min][min];
        dp= new long[a+1][b+1];
        dp[0][0]=1;
        for (int aa = 1; aa <= a ; aa++) {
            for (int bb = 0; bb <Math.min(aa,b+1) ; bb++) {
              dp[aa][bb]+=dp[aa-1][bb];
              if (bb>0)dp[aa][bb]+=dp[aa][bb-1];
                if (dp[aa][bb]>=mod)dp[aa][bb]-=mod;
            }
        }
        long free=dp[a][b];
        System.out.println("Case #"+testNumber+": "+free+" "+stress);
        out.println("Case #"+testNumber+": "+free+" "+stress);


    }
}

class FastScanner extends BufferedReader {

    public FastScanner(InputStream is) {
        super(new InputStreamReader(is));
    }

    public int read() {
        try {
            int ret = super.read();
//            if (isEOF && ret < 0) {
//                throw new InputMismatchException();
//            }
//            isEOF = ret == -1;
            return ret;
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        StringBuilder sb = new StringBuilder();
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        if (c < 0) {
            return null;
        }
        while (c >= 0 && !isWhiteSpace(c)) {
            sb.appendCodePoint(c);
            c = read();
        }
        return sb.toString();
    }

    static boolean isWhiteSpace(int c) {
        return c >= 0 && c <= 32;
    }

    public String readLine() {
        try {
            return super.readLine();
        } catch (IOException e) {
            return null;
        }
    }

}

class FastPrinter extends PrintWriter {

    public FastPrinter(OutputStream out) {
        super(out);
    }


}


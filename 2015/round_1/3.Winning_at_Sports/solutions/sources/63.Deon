#include <iostream>
#include <ctime>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <utility>
#include <cctype>
#include <list>
#include <bitset>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#define PRIME 1000000007
#define MAXN 2005

int A,B;
int dp_memo[MAXN][MAXN];
int sp_memo[MAXN][MAXN];

int dp(int a, int b) {	// first player must stay greater than second player
	int& ans = dp_memo[a][b];
	if (ans >= 0) return ans;
	if (a==0 && b==0) return ans=dp(a+1,b);
	if (a<=b) return ans = 0;
	if (a==A && b==B) return ans = 1;
	if (a>A || b>B) return ans = 0;
	
	return ans = (dp(a+1,b) + dp(a,b+1))%PRIME;
}

int sp(int a, int b) {
	int& ans = sp_memo[a][b];
	if (ans >= 0) return ans;
	if (a>A || b>B) return ans = 0;
	if (b==B) return ans = 1;
	if (a>b) return ans = 0;
	if (a==A && b==B) return ans = 1;
	
	return ans = (sp(a+1,b) + sp(a,b+1))%PRIME;
}

int main() {
	int TEST;
	scanf("%d",&TEST);
	FOR(test,TEST) {
		scanf("%d-%d",&A,&B);
		memset(dp_memo,-1,sizeof(dp_memo));
		memset(sp_memo,-1,sizeof(sp_memo));
		printf("Case #%d: %d %d\n", (test+1), dp(0,0), sp(0,0));
	}
}













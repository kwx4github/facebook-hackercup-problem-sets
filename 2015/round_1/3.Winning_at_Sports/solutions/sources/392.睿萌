#pragma  comment(linker, "/STACK:36777216")
#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <iomanip>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define  lc(x) (x << 1)
#define  rc(x) (lc(x) + 1)
#define  lowbit(x) (x & (-x))
#define  PI    (acos(-1))
#define  lowbit(x) (x & (-x))
#define  LL    long long
#define  DB    double
#define  ULL   unsigned long long
#define  PII   pair<int, int>
#define  PLL   pair<LL, LL>
#define  PB    push_back
#define  MP    make_pair

using namespace std;

const int N = 2005;
const int M = N * N * 2;
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const DB  EPS = 1e-8;

inline void Add(LL &x, LL y) {
    x += y;
    if(x >= MOD) x -= MOD;
}

LL f[2][N], g[2][N];

int T, cas, n, m;

int main() {
    freopen("winning_at_sports.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    cin >> T;
    while(T --) {
        scanf("%d-%d", &n, &m);
        if(m == 0) {
            printf("Case #%d: 1 1\n", ++ cas);
            continue;
        }
        memset(f, 0, sizeof(f));
        memset(g, 0, sizeof(g));
        f[1][1] = 1;
        g[1][0] = 1;
        LL res = 0;
        for(int i = 1; i < n + m; i ++) {
            int cur = (i & 1), nxt = 1 - cur;
            memset(f[nxt], 0, sizeof(f[nxt]));
            memset(g[nxt], 0, sizeof(g[nxt]));
            for(int j = 0; j <= n; j ++) {
                if(j == i - j + 1) {
                    Add(f[nxt][j + 1], f[cur][j]);
                } else if(j > i - j + 1) {
                    Add(f[nxt][j + 1], f[cur][j]);
                    Add(f[nxt][j], f[cur][j]);
                }
//            cout << i << ' ' << j << ' ' << g[cur][j] << endl;
                if(i - j == m) {
                    Add(g[nxt][j + 1], g[cur][j]);
                    continue;
                }
                if(j == i - j) {
                    Add(g[nxt][j], g[cur][j]);
                } else if(j < i - j) {
                    Add(g[nxt][j], g[cur][j]);
                    Add(g[nxt][j + 1], g[cur][j]);
                }
            }
        }
        int z = (n + m) & 1;
        printf("Case #%d: %lld %lld\n", ++ cas, f[z][n], g[z][n]);
    }
}

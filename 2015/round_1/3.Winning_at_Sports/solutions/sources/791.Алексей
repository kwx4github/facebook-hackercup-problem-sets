import java.io.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringTokenizer;

public class C {
    FastScanner in;
    PrintWriter out;

    public static final long BIG_P = 1_000_000_007;
    public long[][] freeMem, fullMem;

    public void solveTest() throws IOException {

        String[] s = in.next().split("\\-");
        int a = Integer.parseInt(s[0]);
        int b = Integer.parseInt(s[1]);
        assert a <= 2000;
        assert b <= 2000;
        assert a > b;
        out.println(freeMem[a][b] + " " + fullMem[b][b]);
    }

    public void solve() throws IOException {
        int tests = in.nextInt();
        freeMem = new long[2001][2001];
        fullMem = new long[2001][2001];
        for (int i = 0; i < 2001; i++) {
            Arrays.fill(freeMem[i], 0);
            Arrays.fill(fullMem[i], 0);
        }
        for (int i = 0; i < 2001; i++) {
            for (int j = 0; j < 2001; j++) {
                if (i == 0 && j == 0) {
                    freeMem[i][j] = 1;
                } else if (i <= j) {
                    freeMem[i][j] = 0;
                } else {

                    freeMem[i][j] = ((i == 0 ? 0 : freeMem[i - 1][j]) + (j == 0 ? 0 : freeMem[i][j - 1])) % BIG_P;
                }
            }
        }
        for (int i = 0; i < 2001; i++) {
            for (int j = 0; j < 2001; j++) {
                if (i == 0 && j == 0) {
                    fullMem[i][j] = 1;
                } else if (i > j) {
                    fullMem[i][j] = 0;
                } else {
                    fullMem[i][j] = ((i == 0 ? 0 : fullMem[i - 1][j]) + (j == 0 ? 0 : fullMem[i][j - 1])) % BIG_P;
                }
            }
        }


        for (int test = 0; test < tests; test++) {
            out.print("Case #" + (test + 1) + ": ");
            System.out.println("test " + (test + 1));
            System.out.flush();
            solveTest();
        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("winning_at_sports.txt"));
            out = new PrintWriter(new File("winning_at_sports_ans.txt"));
            Locale.setDefault(Locale.US);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new C().run();
    }
}
#include <iostream>
#include <cstring>
#include <cassert>

using namespace std;

#define MAXS 2020
#define MOD ((int)(1e9) + 7)

// stress free wins for [other_score][my_score]
int dp[MAXS][MAXS];

// stress free wins for [looser][winner] (with draw situations)
int dp2[MAXS][MAXS];

void gen() {
    memset(dp, 0, sizeof(dp));
    for (int my = 0; my < MAXS; my++) {
        dp[0][my] = 1;
    }

    for (int other = 1; other < MAXS; other++) {
        for (int my = other + 1; my < MAXS; my++) {
            dp[other][my] = dp[other][my - 1] + dp[other - 1][my];
            dp[other][my] %= MOD;
            assert(dp[other][my] > 0);
        }
    }

    memset(dp2, 0, sizeof(dp2));
    for (int my = 0; my < MAXS; my++) {
        dp2[0][my] = 1;
    }

    for (int other = 1; other < MAXS; other++) {
        for (int my = other; my < MAXS; my++) {
            dp2[other][my] = dp2[other][my - 1] + dp2[other - 1][my];
            dp2[other][my] %= MOD;
            assert(dp2[other][my] > 0);
        }
    }
}

int getStressFree(int my, int other) {
    return dp[other][my];
}

int getStressful(int my, int other) {
    int answer = 0;
    for (int i = 0; i < other; i++) {
        answer += dp2[i][other - 1];
        //answer += dp[i][other];
        answer %= MOD;
    }

    return answer;
}

int main() {
    gen();

    int t;
    cin >> t;
    for (int i = 1; i <= t; i++) {
        int my, other;
        cin >> my;
        cin.ignore(5, '-');
        cin >> other;
        assert(my > other);

        cout << "Case #" << i << ": ";
        cout << getStressFree(my, other) << " ";
        cout << getStressful(my, other) << endl;
    }

    return 0;
}

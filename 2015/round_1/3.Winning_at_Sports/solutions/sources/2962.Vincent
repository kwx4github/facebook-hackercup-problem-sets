package r1;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Q32 {
	
	Map< String, Integer > sf = new HashMap< String, Integer >();
	Map< String, Integer > ss = new HashMap< String, Integer >();
	
	public void test() {
		Scanner scanner = new Scanner( System.in );
		int ntc = scanner.nextInt();
		for( int i = 1; i <= ntc; i++ ) {
			sf.clear();
			ss.clear();
			String[] bufs = scanner.next().split( "-" );
			int wins = Integer.parseInt( bufs[ 0 ] );
			int loses = Integer.parseInt( bufs[ 1 ] );
			int c = calsf( wins, loses, 0 );
			int c2 = calss( wins, loses, 0 );
//			System.out.println( wins + "-" + loses );
			System.out.println( String.format( "Case #%d: %d %d", i, c, c2 ) );
//			System.out.println( String.format( "Case #%d: %d", i, calsf2( wins, Math.min( loses, wins - 2 ) ) ) );
		}
		scanner.close();
	}
	
//	public long calsf2( int w, int l ) {
////		System.out.println( "C_" + ( w + l - 2 ) + "_" + l );
//		long x = c( w + l - 2, l );
//		for( int i = 0; i < w - 3; i++ ) {
//			if( l - 2 >= 0 ) {
//				x -= c( i * 2, 2 ) * c( w - 2 + l - i * 2, l - 2 );
//			}
//		}
//		return x;
//	}
//	
//	public long c( long a, long b ) {
//		long x = 1;
//		for( long i = 0; i < b; i++ ) {
//			x *= a;
//			a -= 1;
//		}
//		for( long i = b; i > 1; i-- ) {
//			x /= i;
//		}
//		return x;
//	}
	
	public int calsf( int w, int l, int d ) {
		String k = w + "-" + l + "-" + d;
		if( sf.containsKey( k ) ) {
			return sf.get( k );
		} else {
			int c = 0;
			if( w <= 0 || l <= 0 ) {
				c = 1;
			} else if( d == 0 ) {
				c = calsf( w - 2, l, d + 2 );
			} else if( d == 1 ) {
				c = calsf( w - 1, l, d + 1 );
			} else {
				c = calsf( w - 1, l, d + 1 ) + calsf( w, l - 1, d - 1 );
				if( c >= 1000000007 ) {
					c -= 1000000007;
				}
			}
			sf.put( k, c );
			return c;
		}
	}
	
	public int calss( int w, int l, int d ) {
		String k = w + "-" + l + "-" + d;
		if( ss.containsKey( k ) ) {
			return ss.get( k );
		} else {
			int c = 0;
			if( w <= 0 || l <= 0 ) {
				c = 1;
			} else if( d == 0 ) {
				c = calss( w, l - 1, d - 1 );
			} else {
				c = calss( w - 1, l, d + 1 ) + calss( w, l - 1, d - 1 );
				if( c >= 1000000007 ) {
					c -= 1000000007;
				}
			}
			ss.put( k, c );
			return c;
		}
	}
	
	public static void main( String[] args ) {
		new Q32().test();
	}

}

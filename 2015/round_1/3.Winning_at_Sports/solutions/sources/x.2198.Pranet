#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod) {ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;


int num1,num2;
int n;
int targetLead;
int DP1[4001][2001];
int DP2[4001][2001];

int dp1(int u,int lead)
{
  if(lead<=0)
    return 0;
  if(u==n)
  { 
    if(lead==targetLead)
      return 1;
    return 0;
  }
  if(DP1[u][lead]!=-1)
    return DP1[u][lead];

  int o1=dp1(u+1,lead-1);
  int o2=dp1(u+1,lead+1);

  return DP1[u][lead]=(o1+o2)%mod;

}

int dp2(int u,int my)
{
  int his=u-my;

  assert(his<=num2);
  if(u==n)
  {
    assert(my==num1);
    return 1;
  }

  if(DP2[u][my]!=-1)
    return DP2[u][my];
  if(his==num2)
    return DP2[u][my]=dp2(u+1,my+1);

  int o1=dp2(u+1,my);
  int o2=0;
  if(my<his)
    o2=dp2(u+1,my+1);
  return DP2[u][my]=(o1+o2)%mod;

}
int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    cout<<"Case #"<<++tt<<": ";
    memset(DP1,-1,sizeof DP1);
    memset(DP2,-1,sizeof DP2);
  
    string s;
    cin>>s;

    num1=0;
    num2=0;
    int i;
    for(i=0;s[i]!='-';++i)
      num1=num1*10+s[i]-'0';
    ++i;
    for(;i<s.size();++i)
      num2=num2*10+s[i]-'0';

    targetLead=num1-num2;
    n=num1+num2;

    cout<<dp1(1,1)<<" "<<dp2(0,0)<<"\n";
  }


   


}
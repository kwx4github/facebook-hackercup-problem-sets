
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
const int MOD = 1e9+7;

int T;
inline int add(int& a, int b)
{
  a += b;
  if (a >= MOD)
    a -= MOD;
  return a;
}
inline int mul(int a, int b)
{
  ll r = a * 1LL * b;
  r %= MOD;
  return int(r);
}
int DPfree[2010][2010];
bool wasfree[2010][2010];
int DPful[2010][2010];
bool wasful[2010][2010];
int stressfree(int a, int b)
{
  if (a < 0 || b < 0) return 0;
  if (a == 1 && b == 0) return 1;
  int& x = DPfree[a][b];
  if (wasfree[a][b]) return x;
  x = 0;
  wasfree[a][b] = 1;
  if (a >= 1 && a - 1 > b)
  {
    add(x, stressfree(a-1,b));
  }
  if (b >= 1)
  {
    add(x, stressfree(a,b-1));
  }
  return x;
}
int stressful(int a, int b)
{
  if (a < 0 || b < 0) return 0;
  if (a == 0 && b == 1) return 1;
  int& x = DPful[a][b];
  if (wasful[a][b]) return x;
  wasful[a][b] = 1;
  x = 0;
  if (a >= 1)
  {
    add(x, stressful(a-1,b));
  }
  if (b >= 1 && b - 1 >= a)
  {
    add(x, stressful(a,b-1));
  }
  return x;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> T;
  rep1(test,T)
  {
    string s;
    cin >> s;
    stringstream ss;
    rep(i,sz(s))
    if (s[i] == '-')
      ss << ' ';
    else
      ss << s[i];
    int a, b;
    ss >> a >> b;
    cout << "Case #" << test << ": ";
    cout << stressfree(a,b) << ' ';
    cout << stressful(b-1,b) << endl;
  }
}

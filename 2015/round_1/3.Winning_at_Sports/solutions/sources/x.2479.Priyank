#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <queue>
#include <cmath>
#include <ctime>
#include <climits>
#include <iomanip>
#include <sstream>
using namespace std;

typedef long long LL;
#define tr(container, it)for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = (a); i < (int)(b); i++)

int GCD (int a, int b) { if (!a) return b; return GCD(b%a, a);}

#define mod 1000000007

int my, other;

#define X 1100
LL mem[X][X];

LL solveSF(int cm, int co) {
    if (cm > my || co > other) return 0;
    if (cm == my && co == other) return 1;
    if (cm <= co) return solveSF(cm + 1, co);
    LL &ret = mem[cm][co];
    if (ret != -1) return ret;
    ret = solveSF(cm + 1, co);;
    if (cm == co + 1) {
    } else {
        ret = (ret + solveSF(cm, co + 1)) % mod;
    }
    return ret;
}

LL solve(int cm, int co) {
    if (cm > my || co > other) return 0;
    if (co == other) return 1;
    if (cm > co) return 0;
    LL &ret = mem[cm][co];
    if (ret != -1) return ret;
    ret = 0;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            if ((i + j) % 2 == 0) continue;
            ret += solve(cm + i, co + j);
            ret %= mod;
        }
    }
    return ret;
}

int main() {
    clock_t startTime = clock();
    ios_base::sync_with_stdio(true);

    int t; cin>>t;
    int tno = 1;
    while (t--) {
        scanf("%d-%d", &my, &other);
        memset(mem, -1, sizeof mem);
        LL stressfree = solveSF(0, 0);
        memset(mem, -1, sizeof mem);
        LL stressfull = solve(0, 0);
        cout<<"Case #"<<tno++<<": "<<stressfree<<" "<<stressfull<<"\n";
    }

    clock_t endTime = clock();
    cerr<<"\nTime:"<< double(endTime - startTime) / CLOCKS_PER_SEC <<" seconds\n" ;
    return 0;
}

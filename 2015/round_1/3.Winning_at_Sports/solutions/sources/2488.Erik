#include <cstdio>

using namespace std;

const int MAXN = 4444005;
const int MOD = 1e9 + 7;

long long fact[MAXN];
int did_fact[MAXN];

int find_pot_two(int t) {
	int i=1, br=0;
	while(2*i<=t) {
		i=(i<<1);
		br++;
	}
	return br;
}

long long potent(long long k) {
	long long val[40];
	val[0]=k;
	for(int i=1; i<=39; ++i) val[i] = (((val[i-1]*val[i-1])%MOD) + MOD)%MOD;

	int temp = MOD-2;
	long long rez=1;
	while(temp>0) {
		int x = find_pot_two(temp);
		temp-=(1<<x);
		rez = ((rez*val[x])%MOD+MOD)%MOD;
	}
	return rez;
}

long long factoriel(long long k) {
	if(did_fact[k]==1) return fact[k];
	if(k==0 || k==1) return 1;	

	long long rez = ((k*factoriel(k-1)%MOD) + MOD)%MOD;
	did_fact[k] = 1;
	fact[k] = rez;
	return rez;
}

long long inv_factoriel(long long k) {
	long long rez = factoriel(k);
	return potent(rez);
}

long long inv_num(long long k) {
	return potent(k);
}

long long catalan(long long n) {
	long long rez = factoriel(2*n);
	rez = ((rez*inv_factoriel(n)%MOD)+MOD)%MOD;
	rez = ((rez*inv_num(n+1))%MOD + MOD)%MOD;
	rez = ((rez*inv_factoriel(n)%MOD)+MOD)%MOD;
	return rez;
}

long long somuchbetter(long long m, long long n) {
	long long rez = factoriel(m+n);
	rez = ((rez*(m+1-n))%MOD + MOD)%MOD;
	rez = ((rez*inv_factoriel(m+1))%MOD + MOD)%MOD;
	rez = ((rez*inv_factoriel(n))%MOD + MOD)%MOD;	
	return rez;
}

int main () {
	int t;
	scanf("%d", &t);
	for(int i=1; i<=t; ++i) {
		long long p, d;
		scanf("%lld-%lld", &p, &d);
		printf("Case #%d: %lld %lld\n", i, somuchbetter(p-1, d), catalan(d));
	}
	return 0;
}

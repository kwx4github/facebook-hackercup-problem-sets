#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define all(o) (o).begin(), (o).end()
#define allr(o) (o).rbegin(), (o).rend()
const int INF = 2147483647;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
template <class T> int size(T &x) { return x.size(); }

// assert or gtfo

int mod = 1000000007;

int memsf[2100][2100];
int stressfree(int a, int b) {
    if (a == 1 && b == 0) return 1;
    if (a < 0 || b < 0) return 0;
    if (a <= b) return 0;
    if (memsf[a][b] != -1)
        return memsf[a][b];

    return memsf[a][b] = (stressfree(a-1, b) + stressfree(a, b-1)) % mod;
}

int mem[2100][2100];
int stressful(int a, int b, int bfin) {
    if (a > b && b != bfin) return 0;
    if (a == 0 && b == 0) return 1;
    if (a < 0 || b < 0) return 0;
    if (mem[a][b] != -1)
        return mem[a][b];

    return mem[a][b] = (stressful(a-1, b, bfin) + stressful(a, b-1, b)) % mod;
}

int main() {
    int ts;
    scanf("%d\n", &ts);

    memset(memsf, -1, sizeof(memsf));

    for (int t = 0; t < ts; t++) {

        int a, b;
        scanf("%d-%d\n", &a, &b);

        memset(mem, -1, sizeof(mem));
        cout << "Case #" << (t+1) << ": " << stressfree(a, b) << " " <<  stressful(a, b, b) << endl;
    }

    return 0;
}


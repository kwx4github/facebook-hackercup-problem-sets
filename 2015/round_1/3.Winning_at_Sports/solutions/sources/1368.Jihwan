package main

import (
	"fmt"
	"os"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {
	fileIn, err := os.Open("input.txt")
	check(err)
	defer fileIn.Close()
	fileOut, err := os.Create("output.txt")
	check(err)
	defer fileOut.Close()

	const MODULO = 1000000007
	var problems int

	var (
		winningCase [2002][2002]uint
		winnerScore int
		loserScore  int
	)
	// prepare winning case table.
	for i := 1; i <= 2000; i++ {
		winningCase[i][0] = 1
		for j := 1; j < i; j++ {
			winningCase[i][j] = (winningCase[i-1][j] + winningCase[i][j-1]) % MODULO
		}
	}

	fmt.Fscanf(fileIn, "%d\n", &problems)
	for cases := 1; cases <= problems; cases++ {
		fmt.Fscanf(fileIn, "%d-%d\n", &winnerScore, &loserScore)
		/*
			[Solution]
			1) stress-free winning case for i:j
				stress-free case for i:j is sum of following case (1) + (2)
				(1) stress-free case for (i-1):j and winner scores (if i-1>j)
				(2) stress-free case for i:(j-1) and loser scores (if j-1>0)
			2) stressful winning case for i:j
				stressful winning case for winner means:
				"stress-free winning case for loser until it scores j, and winner turns the game around."
				since the case includes tie-case(same score), we should look up table [j+1][j]
				rather than [j][j-1].
		*/
		fmt.Fprintf(fileOut, "Case #%d: %d %d\n", cases, winningCase[winnerScore][loserScore], winningCase[loserScore+1][loserScore])
	}
}

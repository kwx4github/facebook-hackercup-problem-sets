/*
ID: espr1t
LANG: C++
TASK: Winning at Sports
KEYWORDS: Easy, DP
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <algorithm>
#include <vector>

using namespace std;
FILE *in; FILE *out;

const int MAX = 2048;
const int MOD = 1000000007;

int dyn1[MAX][MAX];
int dyn2[MAX][MAX];

int recurse1(int s1, int s2) {
    if (s1 == 0 && s2 == 0)
        return 1;
    if (dyn1[s1][s2] != -1)
        return dyn1[s1][s2];
    
    int ans = 0;
    if (s1 - 1 > s2 || s2 == 0) {
        ans += recurse1(s1 - 1, s2);
        if (ans >= MOD) ans -= MOD;
    }
    if (s2 > 0) {
        ans += recurse1(s1, s2 - 1);
        if (ans >= MOD) ans -= MOD;
    }
    return dyn1[s1][s2] = ans;
}

int recurse2(int s1, int s2) {
    if (s1 == 0 && s2 == 0)
        return 1;
    if (dyn2[s1][s2] != -1)
        return dyn2[s1][s2];

    int ans = 0;
    if (s1 >= s2) {
        ans = recurse2(s1 - 1, s2);
    }
    else {
        if (s1 > 0) {
            ans += recurse2(s1 - 1, s2);
            if (ans >= MOD) ans -= MOD;
        }
        if (s2 > s1) {
            ans += recurse2(s1, s2 - 1);
            if (ans >= MOD) ans -= MOD;
        }
    }
    return dyn2[s1][s2] = ans;
}

void solveTest(int testCase) {
    int s1, s2;
	fscanf(in, "%d-%d", &s1, &s2);
	fprintf(out, "Case #%d: %d %d\n", testCase, recurse1(s1, s2), recurse2(s1, s2));
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("WinningAtSports.in", "rt"); out = fopen("WinningAtSports.out", "wt");
	
	unsigned sTime = clock();
	memset(dyn1, -1, sizeof(dyn1));
	memset(dyn2, -1, sizeof(dyn2));

	int numTests;
	fscanf(in, "%d", &numTests);
    const int BUFF = 1048576;
	static char buff[BUFF]; fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

#include <cstdio>
#include <cstdint>
#include <iostream>
#include <vector>

int64_t MOD = 1000000007;

int64_t getStressFree(int64_t myScore, int64_t opScore)
{
	std::vector<std::vector<int64_t>>
	  dpArr(myScore + 1, std::vector<int64_t>(opScore + 1, 0));
	for (int i = 1; i <= myScore; ++i) dpArr[i][0] = 1;

	for (int op = 1; op <= opScore; ++op)
	{
		for (int my = op + 1; my <= myScore; ++my)
		{
			dpArr[my][op] = dpArr[my-1][op] + dpArr[my][op-1];
			dpArr[my][op] %= MOD;
		}
	}

	return dpArr[myScore][opScore];
}

int64_t getStressful(int64_t myScore, int64_t opScore)
{
	std::vector<std::vector<int64_t>>
	  dpArr(opScore + 1, std::vector<int64_t>(opScore + 1, 0));
	for (int i = 0; i <= opScore; ++i) dpArr[0][i] = 1;

	for (int op = 1; op <= opScore; ++op)
	{
		for (int my = 1; my <= op; ++my) // Can't exceed opopnent
		{
			dpArr[my][op] = dpArr[my-1][op] + dpArr[my][op-1];
			dpArr[my][op] %= MOD;
		}
	}

	return dpArr[opScore][opScore]; // Time when op last scored
}

int main()
{
	int T;
	std::scanf(" %d", &T);

	for (int tc = 1; tc <= T; ++tc)
	{
		int myScore, opScore;
		std::scanf(" %d-%d", &myScore, &opScore);

		std::cout << "Case #" << tc << ": "
		          << getStressFree(myScore, opScore) << " "
		          << getStressful(myScore, opScore) << "\n";
	}

	return 0;
}

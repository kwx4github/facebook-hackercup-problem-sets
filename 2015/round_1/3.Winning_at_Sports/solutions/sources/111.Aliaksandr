#pragma comment(linker, "/stack:32000000")
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>
#include <ctime>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

const int mod = 1000000007;
struct num {
	int x;
	num():x(0) {}
	num(int x):x(x) {}
	num operator+(const num& o) const {
		num res(x+o.x);
		if (res.x >= mod) res.x -= mod;
		return res;
	}
	num operator-(const num& o) const {
		num res(x-o.x);
		if (res.x < 0) res.x += mod;
		return res;
	}
	num operator*(const num& o) const {
		return num(x*(ll)o.x%mod);
	}
};

void solve() {
	int A, B; scanf("%d-%d", &A, &B);
	vector<vector<num> > dp(A+1,vector<num>(B+1));
	dp[1][0] = num(1);
	forn(i, A+1) forn(j, B+1) {
		if (dp[i][j].x == 0) continue;
		if (i+1 <= A) dp[i+1][j] = dp[i+1][j] + dp[i][j];
		if (j+1 <= B && i > j+1) dp[i][j+1] = dp[i][j+1] + dp[i][j];
	}
	printf("%d ", dp[A][B]);
	dp = vector<vector<num> >(A+1,vector<num>(B+1));
	dp[0][0] = 1;
	forn(i, A+1) forn(j, B+1) {
		if (dp[i][j].x == 0) continue;
		if (i+1 <= A && (i+1 <= j || j == B)) dp[i+1][j] = dp[i+1][j] + dp[i][j];
		if (j+1 <= B) dp[i][j+1] = dp[i][j+1] + dp[i][j];
	}
	printf("%d\n", dp[A][B]);
}

int main()
{
//#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
//#endif
	int T; scanf("%d", &T); for (int tn = 1; tn <= T; ++tn) {
		cerr << tn << "\n";
		printf("Case #%d: ", tn);
		solve();
	}
	return 0;
}
#include <vector>
#include <queue>
#include <climits>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
 
using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define REP(i,n) FOR(i,0,n)
#define RREP(i,n) for(int i=n-1;i>=0;--i)
#define EACH(it,v) for(typeof(v.begin()) it=v.begin();it!=v.end();++it)
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define CLEAR(x,with) memset(x,with,sizeof(x))
#define sz size()
#define mkp make_pair
typedef long long LL;
typedef vector <int> VI;
typedef vector <VI> VVI;
typedef pair <int, int> PI;
typedef vector <PI> VPI;

const LL MOD = (1e9) + 7;
const int MAX = 2000 + 10;

LL dp1[MAX][MAX];
LL dp2[MAX][MAX];

int main()
{
	int T; cin >> T;
	memset(dp1, 0, sizeof(dp1));
	memset(dp2, 0, sizeof(dp2));

	FOR(i, 1, MAX) dp1[i][0] = 1;
	FOR(i, 1, MAX) dp2[0][i] = 1;

	FOR(i, 0, MAX)
	{
		FOR(j, 0, MAX)
		{
			if(j < i && j > 0 && i > 0)
			dp1[i][j] = ( (dp1[i-1][j] % MOD) + (dp1[i][j-1] % MOD) ) % MOD;
			if(j >= i && j > 0 && i > 0)
			dp2[i][j] = ( (dp2[i-1][j] % MOD) + (dp2[i][j-1] % MOD) ) % MOD;
		}
	}

	REP(c, T)
	{
		int A, B;
		scanf("%d-%d", &A, &B);

		cout << "Case #" << c+1 << ": " << dp1[A][B] << " " << dp2[B][B] << "\n";
	}

	return 0;
}

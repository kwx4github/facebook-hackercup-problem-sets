#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <string>
using namespace std;

#define eps 1e-9
#define PB push_back
#define LL long long
#define INF 0x3f3f3f3f

template<class T> void checkMax(T &a, T b){a = max(a, b);}
template<class T> void checkMin(T &a, T b){a = min(a, b);}

const int N = 2005;
const int MOD = 1000000007;
int stressfree[N][N], stressful[N][N];
void mod_plus(int &a, int b)
{
    a += b;
    if(a >= MOD)    a -= MOD;
}
int main()
{
    freopen("winning_at_sports.txt", "r", stdin);
    freopen("winning_at_sports.out", "w", stdout);
    int t, cas = 1;
    scanf("%d", &t);
    while(t--)
    {
        int n, m;
        scanf("%d-%d", &n, &m);
        memset(stressfree, 0, sizeof(stressfree));
        memset(stressful, 0, sizeof(stressful));
        stressfree[0][0] = stressful[0][0] = 1;
        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j <= m; j++)
            {
                if(i != n)
                    mod_plus(stressfree[i + 1][j], stressfree[i][j]);
                if(j != m && i > j + 1)
                    mod_plus(stressfree[i][j + 1], stressfree[i][j]);
                if(i != n && (j == m || i + 1 <= j))
                    mod_plus(stressful[i + 1][j], stressful[i][j]);
                if(j != m)
                    mod_plus(stressful[i][j + 1], stressful[i][j]);
            }
        }
        printf("Case #%d: %d %d\n", cas++, stressfree[n][m], stressful[n][m]);
    }
    return 0;
}

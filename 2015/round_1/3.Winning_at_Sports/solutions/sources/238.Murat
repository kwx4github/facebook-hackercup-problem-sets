#include<bits/stdc++.h>
  
using namespace std;

template<class T> inline T sqr(const T& a) { return a * a; }
  
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
  
constexpr ld EPS = 1e-9;
constexpr ld PI = 2 * acos(0.0);
constexpr int N = 2100;
constexpr int MODULO = 1e9 + 7;

li d[N][N];

void AddLi(li &tg, li val) {
  tg = (tg + val) % MODULO;
}

int StressFree(int x, int y) {
  if (y < 0)
    return 1;
  if (x == 0)
    return 1;
  memset(d, 0, sizeof d);
  d[1][0] = 1;
  for (int i = 2; i <= x; ++i) {
    int rg = min(i - 1, y);
    li acc = 0;
    for (int j = 0; j <= rg; ++j) {
      AddLi(acc, d[i - 1][j]);
      d[i][j] = acc;
    }
  }
  return (int) (d[x][y] % MODULO);
}

int StressFul(int x, int y) {
  if (y < 0)
    return 1;
  if (y == 0)
    return 1;
  if (x == 0)
    return 1;
  memset(d, 0, sizeof d);
  d[1][0] = d[1][1] = 1;
  for (int i = 2; i <= y; ++i) {
    int rg = min(i - 1, x);
    li acc = 0;
    for (int j = 0; j <= rg; ++j) {
      AddLi(acc, d[i - 1][j]);
      d[i][j] = acc;
    }
    d[i][i] = acc;
  }
  return (int) (d[y][y] % MODULO);
}

int main() {
  int tests;
  scanf("%d\n", &tests);
  for (int it = 1; it <= tests; ++it) {
    int x, y;
    scanf("%d-%d\n", &x, &y);
    assert(x);
    printf("Case #%d: %d %d\n", it, StressFree(x, y), StressFul(x, y));
  }

  return 0;
}

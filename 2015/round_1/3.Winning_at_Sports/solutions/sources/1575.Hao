#include <cstdio>
#include <cstring>
#include <algorithm>

const int MAX_N = 2000;
const int MOD = 1000000007;

int f[MAX_N + 1][MAX_N + 1];
int g[MAX_N + 1][MAX_N + 1];

void gao_f()
{
	memset(f, 0, sizeof(f));
	for (int i = 0; i <= MAX_N; ++i) f[i][0] = 1;
	for (int i = 1; i <= MAX_N; ++i)
	{
		for (int j = 1; j < i; ++j)
		{
			int s = 0;
			if (i - 1 > j) s += f[i - 1][j];
			if (i > j - 1) s += f[i][j - 1];
			while (s >= MOD) s -= MOD;
			f[i][j] = s;
		}
	}
}

void gao_g()
{
	memset(g, 0, sizeof(g));
    for (int i = 0; i <= MAX_N; ++i) g[0][i] = 1;
    for (int j = 1; j <= MAX_N; ++j)
	{
		for (int i = 1; i <= j; ++i)
		{
			int s = 0;
			if (i - 1 <= j) s += g[i - 1][j];
			if (i <= j - 1) s += g[i][j - 1];
			while (s >= MOD) s -= MOD;
			g[i][j] = s;
		}
	}

//	for (int i = 0; i < 10; ++i)
//	{
//		for (int j = 0; j < 10; ++j)
//		{
//			printf("%8d", g[i][j]);
//		}
//		puts("");
//	}
}

int main()
{
	gao_f();
	gao_g();
	int t;
	scanf("%d", &t);
	for (int cs = 1; cs <= t; ++cs)
	{
		int a, b;
		scanf("%d-%d", &a, &b);
		printf("Case #%d: %d %d\n", cs, f[a][b], g[std::min(a, b)][std::min(a, b)]);
	}
	return 0;
}

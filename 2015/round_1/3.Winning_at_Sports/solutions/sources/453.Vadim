#include <bits/stdc++.h>
using namespace std;

#ifdef ILIKEGENTOO
#   define Eo(x) { cerr << #x << " = " << (x) << endl; }
#   define E(x) { cerr << #x << " = " << (x) << "   "; }
#   define FREOPEN(x)
#else
#   define Eo(x) {}
#   define E(x) {}
#   define FREOPEN(x) (void)freopen(x ".in", "r", stdin);(void)freopen(x ".out", "w", stdout);
#endif
#define EO(x) Eo(x)
#define Sz(x) (int((x).size()))
#define All(x) (x).begin(),(x).end()

template<class A, class B> ostream &operator<<(ostream &os, const pair<A, B>& p) { return os << '(' << p.first << ", " << p.second << ')'; }

template<class C> void operator<<(vector<C> &v, const C &x){v.push_back(x);}
template<class D> void operator>>(vector<D> &v, D &x){assert(!v.empty()); x=v.back(); v.pop_back();}
template<class E> void operator<<(set<E> &v, const E &x){v.insert(x);}

typedef double flt;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;

const int inf = 0x3f3f3f3f;
const int64 inf64 = 0x3f3f3f3f3f3f3f3fLL;
const flt eps = 1e-8;
const flt pi = acos(-1.0);
const int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

const int maxn = 2015;
int dpf[maxn][maxn];
int dps[maxn][maxn];
const int mod = 1e9 + 7;

int main() {
    dpf[1][0] = 1;
    for (int i = 1; i < maxn; ++i) for (int j = 0; j < i; ++j) {
        if (i-1 > j && i > 0)
            dpf[i][j] += dpf[i-1][j];
        if (i > j-1 && j>0)
            dpf[i][j] += dpf[i][j-1];
        dpf[i][j] %= mod;
    }
    dps[0][0] = 1;
    for (int i = 0; i < maxn; ++i) for (int j = i; j < maxn; ++j) {
        if (i-1 <= j && i > 0)
            dps[i][j] += dps[i-1][j];
        if (i <= j-1)
            dps[i][j] += dps[i][j-1];
        dps[i][j] %= mod;
    }
    int TT; cin >> TT;
    for (int T = 1; T <= TT; ++T) {
        Eo(T);

        string s; cin >> s;
        for (char& c : s) if (c == '-') c = ' ';
        stringstream ss(s);
        int a, b; ss >> a >> b;

        cout << "Case #" << T << ": " << dpf[a][b] << ' '  << dps[b][b] << endl;
    }

    return 0;
}

#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <numeric>
#include <bitset>
#define REP(i, a, b) for ( int i = int(a); i <= int(b); i++ )
#define PB push_back
#define MP make_pair
#define for_each(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define DFS_WHITE -1
#define DFS_BLACK 1
#define MAXN 1000
#define pi 3.141592653589793
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
#define INF 1<<30
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
#define MOD 1000000007
ll arr[2005][2005];
ll brr[2005][2005];
void init()
{
	for(int i =0 ;i <2005 ; i++)
		for(int j =0 ;j <2005 ; j++)
		{
			arr[i][j] = -1;
			brr[i][j] = -1;
		}
		
}

ll recurseStreeFree(int f,int s)
{
	if(f <= s)
	{
		arr[f][s] = 0;
		return 0;
	}
	else if(s == 0)
	{
		arr[f][s] = 1;
		return 1;
	}
	else if(f>s)
	{
		if(arr[f-1][s]== -1)
		{
			arr[f-1][s] = (recurseStreeFree(f-1,s) %MOD);
		}
		if(arr[f][s-1] == -1)
		{
			arr[f][s-1] = (recurseStreeFree(f,s-1) %MOD);
		}
		arr[f][s] = (arr[f-1][s] + arr[f][s-1])%MOD;
		return arr[f][s] ;
	}
	return 0;
}


ll recurseStreeFull(int f,int s,int a,int b)
{
	if(f == 0 && f<=s)
	{
		brr[f][s] = 1;
		return 1;
	}
	if(f>=s && s<=b)
	{
		brr[f][s] = (recurseStreeFull(f-1,s,a,b)%MOD);
		return brr[f][s];
	}
	else if(f<s)
	{
		if(brr[f-1][s] == -1)
			brr[f-1][s] = (recurseStreeFull(f-1,s,a,b)%MOD);
		if(brr[f][s-1] == -1)
			brr[f][s-1] = (recurseStreeFull(f,s-1,a,b)%MOD);
		brr[f][s] =  (brr[f][s-1] + brr[f-1][s])%MOD;
		return brr[f][s];
	}

	return 0;
}

int stringToint(string x)
{
	int ans = 0;
	int y = 1;
	for(int i = x.size()-1 ; i>=0 ; i--)
	{
		ans = ans + (x[i] - '0')*y;
		y*=10;
	}
	//cout<<ans<<endl;
	return ans;
}
int main()
{
	int n = 0;
	cin>>n;
	int nn = 1;
	init();
	while(n--)
	{
		string x;
		cin>>x;
		std::size_t pos = x.find("-");
		string a = x.substr(0,pos);
		string b = x.substr(pos+1, x.size() -pos);
		//cout<<a<<"--"<<b<<endl;
		ll h = recurseStreeFree(stringToint(a),stringToint(b));
		ll k = recurseStreeFull(stringToint(a),stringToint(b),stringToint(a),stringToint(b));

		printf("Case #%d: %lld %lld\n",nn++,h,k);

	}
	return 0;
}
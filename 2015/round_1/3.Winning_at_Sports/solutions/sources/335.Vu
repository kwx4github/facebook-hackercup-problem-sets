#include <bits/stdc++.h>
using namespace std;

#define rep1(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define rep2(i, begin, end) for (__typeof(end) i = (begin); i != (end) + 1 - 2 * ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define mem(a, x) memset(a, x, sizeof(a))
#define all(a) a.begin(), a.end()
#define count_bits(x) __builtin_popcount(x)
#define count_bitsll(x) __builtin_popcountll(x)
#define least_bits(x) __builtin_ffs(x)
#define least_bitsll(x) __builtin_ffsll(x)
#define most_bits(x) 32 - __builtin_clz(x)
#define most_bitsll(x) 64 - __builtin_clz(x)

vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c)) v.push_back(x);
	return v;
}
#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

typedef long long ll;
const int MOD = 1000000007;

template<class T> inline T tmin(T a, T b) {return (a < b) ? a : b;}
template<class T> inline T tmax(T a, T b) {return (a > b) ? a : b;}
template<class T> inline void amax(T &a, T b) {if (b > a) a = b;}
template<class T> inline void amin(T &a, T b) {if (b < a) a = b;}
template<class T> inline T tabs(T a) {return (a > 0) ? a : -a;}
template<class T> T gcd(T a, T b) {while (b != 0) {T c = a; a = b; b = c % b;} return a;}

#define N 2005

ll s[N << 1], dp[N][N][2];

ll mod_pow(ll x, ll y) {
    ll res = 1;
    ll a = x;
    while (y > 0) {
        if (y & 1) {
            res = (res * a) % MOD;
        }
        a = (a * a) % MOD;
        y >>= 1;
    }
    return res;
}

inline void amod(ll &x, ll add) {
	x = (x + add) % MOD;
	if (x < 0) x += MOD;
}

void init() {
	s[0] = s[1] = 1;
	rep1(i, 2, N << 1) s[i] = (i * s[i - 1]) % MOD;
}

inline ll bio(int n) {
	ll ans = s[n + n];
	ll tmp = (mod_pow(s[n], MOD - 2) * mod_pow(s[n + 1], MOD - 2)) % MOD;
	ans = (ans * tmp) % MOD;
	return ans;
}

inline int str2int(string x) {
	int ans = 0;
	rep1(i, 0, x.length()) ans = 10 * ans + x[i] - '0';
	return ans;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(false);
    int ntest, my_score, op_score;
    string score;

    init();
    mem(dp, 0);
    rep1(i, 1, N) dp[i][0][0] = dp[i][0][1] = 1;
    rep1(i, 1, N) rep1(j, 1, i) {
    	dp[i][j][0] = dp[i][j - 1][0];
    	if (i - 1 > j) amod(dp[i][j][0], dp[i - 1][j][0]);
    	dp[i][j][1] = bio(j);
    }
    cin >> ntest;
    rep2(t, 1, ntest) {
    	cin >> score;
    	rep1(i, 0, score.length()) {
    		if (score[i] == '-') {
    			my_score = str2int(score.substr(0, i));
    			op_score = str2int(score.substr(i + 1));
    		}
    	}
    	printf("Case #%d: %lld %lld\n", t, dp[my_score][op_score][0], dp[my_score][op_score][1]);
    }
    return 0;
}

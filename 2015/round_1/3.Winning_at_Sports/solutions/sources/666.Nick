#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdlib>
#include <queue>
#include <set>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <bitset>
#include <sstream>
#include <cassert>

using namespace std;

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	int N = 2000;
	int MOD = 1000000007;
	vector<vector<int> > v(2 * N);
	v[1].resize(2);
	v[1][1] = 1;
	for (int i = 2; i <= 2 * N - 1; ++i) {
		v[i].resize(i + 1);
		for (int j = 1; j <= i - 1; ++j) {
			if (j > 1)
				v[i][j - 1] = (v[i][j - 1] + v[i - 1][j]) % MOD;
			v[i][j + 1] = (v[i][j + 1] + v[i - 1][j]) % MOD;
		}
	}
	vector<vector<int> > u(2 * N);
	u[0].resize(1);
	u[0][0] = 1;
	for (int i = 1; i <= 2 * N - 1; ++i) {
		u[i].resize(i + 1);
		for (int j = 0; j <= i - 1; ++j) {
			if (j > 0)
				u[i][j - 1] = (u[i][j - 1] + u[i - 1][j]) % MOD;
			u[i][j + 1] = (u[i][j + 1] + u[i - 1][j]) % MOD;
		}
	}
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		string s;
		cin >> s;
		int pos = s.find_first_of('-');
		string first = s.substr(0, pos), last = s.substr(pos + 1);
		int a = 0;
		for (int i = 0; i < first.length(); ++i)
			a = a * 10 + first[i] - '0';
		int b = 0;
		for (int i = 0; i < last.length(); ++i)
			b = b * 10 + last[i] - '0';
		cout << "Case #" << t << ": " << v[a + b][a - b] << " " << u[2 * b][0] << "\n";
	}
    return 0;
}
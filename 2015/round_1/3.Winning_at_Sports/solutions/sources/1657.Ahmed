import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{

	public static void main(String[] args) throws IOException
	{
		Main main = new Main();
		main.begin();
	}

	// IO
	private BufferedReader in;
	private BufferedWriter out;
	private StringBuilder ans;
	private StringTokenizer tok;

	// fields
	private long[][] dp;
	private long mod = 1000000000 + 7;
	private long[][] dp2;

	private void begin() throws IOException
	{
		// IO streams
		String inputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\winning_at_sports_example_input.txt";
		String outputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\out.txt";
		in = new BufferedReader(new FileReader(inputFileName));
		out = new BufferedWriter(new FileWriter(outputFileName));
		ans = new StringBuilder();
		tok = new StringTokenizer("");

		// prepare the dp
		prepareAnswer();

		// read input
		int nCases = Integer.parseInt(in.readLine());
		for (int cas = 1; cas <= nCases; cas++)
		{
			System.out.println(cas + "/" + nCases);

			// read scores
			tok = new StringTokenizer(in.readLine(), "-");
			int a = Integer.parseInt(tok.nextToken());
			int b = Integer.parseInt(tok.nextToken());

			// solve
			ans.append("Case #" + cas + ": " + f(a, b) + " " + f2(b, b) + "\n");
		}

		// output
		System.out.print(ans.toString());
		out.write(ans.toString());
		out.close();
	}

	private void prepareAnswer()
	{
		// clear mem
		int n = 2001;
		dp = new long[n][n];
		dp2 = new long[n][n];
		for (int i = 0; i < n; i++)
		{
			Arrays.fill(dp[i], -1);
			Arrays.fill(dp2[i], -1);
			
		}
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				if (i >= j)
				{
					f(i, j);
					f2(i, j);
				}

	}

	private long f(int a, int b)
	{
		// base case
		if (a == 0 || b == 0)
			return 1;

		// already solved
		if (dp[a][b] != -1)
			return dp[a][b];

		// i scored this one
		long answer = 0;
		if (a > 0)
			if (a - 1 > b)
				answer += f(a - 1, b);

		// he scored that one
		if (b > 0)
			if (a > b - 1)
				answer += f(a, b - 1);

		// record answer
		answer %= mod;
		dp[a][b] = answer;
		return answer;

	}
	
	private long f2(int a, int b)
	{
		// base case
		if (a == 0 || b == 0)
			return 1;

		// already solved
		if (dp2[a][b] != -1)
			return dp2[a][b];

		// i scored this one
		long answer = 0;
		if (a > 0)
			if (a - 1 <= b)
				answer += f2(a - 1, b);

		// he scored that one
		if (b > 0)
			if (a <= b - 1)
				answer += f2(a, b - 1);

		// record answer
		answer %= mod;
		dp2[a][b] = answer;
		return answer;

	}

}

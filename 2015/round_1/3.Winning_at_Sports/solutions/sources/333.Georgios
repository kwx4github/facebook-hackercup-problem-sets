#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>

using namespace std;

const int MOD = 1000000007;

int stress_free(int wins, int losses) {
    int total = wins + losses;
    vector <int> buf(total + 1, 0);
    buf[0] = 1;
    for (int n = 1; n <= total; n++) {
        int wmin = n / 2 + 1;
        for (int w = n; w >= wmin; w--) {
            buf[w] = (buf[w] + buf[w - 1]) % MOD;
        }
        buf[wmin - 1] = 0;
    }
    return buf[wins];
}

int stressful(int wins, int losses) {
    int total = 2 * losses; // after losses-losses there is only one way to continue
    vector <int> buf(total + 1, 0);
    buf[0] = 1;
    for (int n = 1; n <= total; n++) {
        int wmax = n / 2;
        for (int w = wmax; w > 0; w--) {
            buf[w] = (buf[w] + buf[w - 1]) % MOD;
        }
    }
    return buf[losses];
}

pair <int, int> compute() {
    int wins, losses;
    int r = scanf("%d-%d", &wins, &losses);
    return make_pair(stress_free(wins, losses), stressful(wins, losses));
}

int main() {
    int T;
    cin >> T;
    for (int i = 1; i <= T; i++) {
        pair <int, int> res = compute();
        cout << "Case #" << i << ": " << res.first << " " << res.second << endl;;
    }
    return 0;
}


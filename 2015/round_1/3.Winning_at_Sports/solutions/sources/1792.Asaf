using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Winning
{
    class Program
    {
        private static Dictionary<Tuple<int, int>, long> _cache;

        public static string[] GetRows(string[] args)
        {
            var s = File.ReadAllText(args[0]);
            var rows = s.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            return rows;
        }

        static void Main(string[] args)
        {
            _cache = new Dictionary<Tuple<int, int>, long>();

            var rows = GetRows(args);
            int inputs = int.Parse(rows[0]);
            var list = new List<Tuple<int, int>>();
            for (int i = 1; i <= inputs; i++)
            {
                var row = rows[i];
                var numbers = row.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
                list.Add(new Tuple<int,int>(int.Parse(numbers[0]), int.Parse(numbers[1])));
            }

            int j = 1;
            foreach (var item in list)
            {
                Console.WriteLine(string.Format("Case #{0}: {1} {2}", j, GetStressFree(item), GetFull(item)));
                j++;
            }
            Console.ReadKey();
        }

        private static long GetFull(Tuple<int, int> item)
        {
            _cache.Clear();
            return 1+GetStressFull(item, new Tuple<int, int>(0, 0));
        }

        private static long GetStressFull(Tuple<int, int> goal, Tuple<int, int> current)
        {
            if (current.Item1 == goal.Item1 || current.Item2 == goal.Item2)
            {
                return 0;
            }

            long sum = 0;

            if (_cache.TryGetValue(current, out sum))
            {
                return sum;
            }

            if (current.Item1 < current.Item2 && current.Item2 < goal.Item2 && current.Item1 < goal.Item1)
            {
                sum++;
            }

            if (current.Item1 < current.Item2)
            {
                sum += GetStressFull(goal, new Tuple<int, int>(current.Item1 + 1, current.Item2));
            }

            sum += GetStressFull(goal, new Tuple<int, int>(current.Item1, current.Item2 + 1));

            _cache.Add(current, sum);
            return sum % 1000000007;


        }

        private static long GetStressFree(Tuple<int, int> item)
        {
            _cache.Clear();
            return  1+ GetStressFree(item, new Tuple<int, int>(0, 0));
        }

        private static long GetStressFree(Tuple<int, int> goal, Tuple<int,int> current)
        {
            if (current.Item1 == goal.Item1 || current.Item2 == goal.Item2)
            {
                return 0;
            }

            long sum = 0;

            if (_cache.TryGetValue(current, out sum))
            {
                return sum;
            }

            if (current.Item1 > current.Item2 + 1)
            {
                sum++;
            }

            
            sum += GetStressFree(goal, new Tuple<int, int>(current.Item1 + 1, current.Item2));
            

            if (current.Item1 > current.Item2 + 1)
            {
                sum += GetStressFree(goal, new Tuple<int, int>(current.Item1, current.Item2+1));
            }

            _cache.Add(current, sum);
            return sum % 1000000007;
        }
    }
}

import java.util.Scanner;

/**
 * Created by poly on 1/17/15.
 */
public class WinningTheSports {

    static final int M = 4002;
    private static final long MOD = 1000000007L;
    static long a[][] = new long[M][M];

    static long combi(int n, int m) {
        if (a[n][m] > 0) return a[n][m];
        if (m == 0) return 1L;
        if (m < 0) return 0L;
        if (m == 1) return (long) n;
        if (n < m) return 0L;
        if (n == m) return 1L;
        if (m * 2 > n) m = n - m;
        long r = (combi(n - 1, m) + combi(n - 1, m - 1)) % MOD;
        a[n][m] = r;
        return r;
    }

    public static class FreeSolver {
        int n;
        int finalScore;
        long memo[][];

        FreeSolver(int n, int finalScore) {
            this.n = n;
            this.finalScore = finalScore;
            memo = new long[M][M];
            for (int i=0; i<M; i++) {
                for (int j=0; j<M; j++) {
                    memo[i][j] = -1;
                }
            }
        }

        long solve(int done, int score) {
            if (memo[done][score] >= 0) {
                return memo[done][score];
            }
            int other = done - score;
            if (score > finalScore) {
                return 0;
            }
            if (done > 0 && other >= score) {
                return 0;
            }
            if (done == n) {
                if (score == finalScore) {
                    return 1;
                } else {
                    return 0;
                }
            }
            int maxOther = n - score;
            if (maxOther < score) {
                long res = combi(n - done, finalScore - score);
                memo[done][score] = res;
                return res;
            }
            long res = solve(done + 1, score + 1) + solve(done + 1, score);
            res %= MOD;
            memo[done][score] = res;
            return res;
        }
    }

    public static class FulSolver {
        int n;
        int finalScore;
        int otherFinalScore;
        long memo[][];

        FulSolver(int n, int finalScore) {
            this.n = n;
            this.finalScore = finalScore;
            this.otherFinalScore = n - finalScore;
            memo = new long[M][M];
            for (int i=0; i<M; i++) {
                for (int j=0; j<M; j++) {
                    memo[i][j] = -1;
                }
            }
        }

        long solve(int done, int score) {
            if (memo[done][score] >= 0) {
                return memo[done][score];
            }
            int other = done - score;
            if (other != otherFinalScore && score > other) {
                return 0;
            }
            if (done == n) {
                if (score == finalScore) {
                    return 1;
                } else {
                    return 0;
                }
            }
            if (other == otherFinalScore) {
                long res = combi(n - done, finalScore - score);
                memo[done][score] = res;
                return res;
            }
            long res = solve(done + 1, score + 1) + solve(done + 1, score);
            res %= MOD;
            memo[done][score] = res;
            return res;
        }
    }

    public static void main(String argv[]) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        for (int t = 0; t < T; t++) {
            String s = scanner.next();
            String[] split = s.split("-");
            int score1 = Integer.parseInt(split[0]);
            int score2 = Integer.parseInt(split[1]);
            int n = score1 + score2;
            FreeSolver freeSolver = new FreeSolver(n, score1);
            FulSolver fulSolver = new FulSolver(n, score1);
            long ans1 = freeSolver.solve(0, 0);
            long ans2 = fulSolver.solve(0, 0);
            System.out.println("Case #" + (t + 1) + ": " + ans1 + " " + ans2);
        }
    }
}

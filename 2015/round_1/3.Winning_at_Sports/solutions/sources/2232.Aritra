#include<iostream>
#include<stdio.h>

unsigned int sFree[2001][2001];
unsigned int sFul[2001][2001];
bool visitedFree[2001][2001];
bool visitedFul[2001][2001];

void resetSFreeTable() {
	for(int i=0; i<2001; i++)
		for(int j=0; j<2001; j++) {
			sFree[i][j] = 0;
			visitedFree[i][j] = false;
		}
}

void resetSFulTable() {
	for(int i=0; i<2001; i++)
		for(int j=0; j<2001; j++) {
			sFul[i][j] = 0;
			visitedFul[i][j] = false;
		}
}

unsigned int findsFree(int i, int j) {
	if(visitedFree[i][j])
		return sFree[i][j];
	
	if(j == 0) {
		sFree[i][j] = 1;
		visitedFree[i][j] = true;
		return sFree[i][j];
	}
	if(i == j) {
		sFree[i][j] = 0;
		visitedFree[i][j] = true;
		return sFree[i][j];
	}
	
	int val = (findsFree(i - 1, j) + findsFree(i, j - 1))%1000000007;
	sFree[i][j] = val;
	visitedFree[i][j] = true;
	
	return sFree[i][j];
}

unsigned int findsFul(int i, int j, int gameJ) {
	if(visitedFul[i][j])
		return sFul[i][j];
	
	if((i > j) && (j < gameJ)) {
		sFul[i][j] = 0;
		visitedFul[i][j] = true;
		return sFul[i][j];
	}
	
	if((i == 0) || (j == 0)) {
		sFul[i][j] = 1;
		visitedFul[i][j] = true;
		return sFul[i][j];
	}
	
	int val = (findsFul(i - 1, j, gameJ) + findsFul(i, j - 1, gameJ))%1000000007;
	sFul[i][j] = val;
	visitedFul[i][j] = true;
	
	return sFul[i][j];
}

int main() {
	resetSFreeTable();
	
	int T;
	std::cin>>T;
	
	for(int i=1; i<=T; i++) {
		resetSFulTable();
		int A, B;
		scanf("%d-%d", &A, &B);
		
		printf("Case #%d: %u %u\n", i, findsFree(A,B), findsFul(A,B, B));
	}

	return 0;
}

/*
1 - 0
2 - 0
2 - 1
3 - 1
3 - 2

1 - 0
2 - 0
3 - 0
1 - 0
1 - 1
2 - 1
2 - 2
3 - 2
*/

#include <bits/stdc++.h>

using namespace std ; 

#define MOD 1000000007LL
int MY , OP ;
long long dp[ 2015 ][ 2015 ] ; 

long long stressfree( int my , int op ) {
	if( my == MY && op == OP ) return 1 ; 
	
	if( dp[ my ][ op ] != -1 ) {
		return dp[ my ][ op ] ; 
	}
	
	long long ret = 0 ; 
	
	if( my < MY ) {
		long long tmp = stressfree( my + 1 , op ) ;
		ret = ( ret + tmp ) % MOD ; 
	}
	
	if( ( op < OP ) && ( ( my - op ) > 1 ) ) {
		long long tmp = stressfree( my , op + 1 ) ; 
		ret = ( ret + tmp ) % MOD ; 
	}
	
	dp[ my ][ op ] = ret ; 
	
	return dp[ my ][ op ] ;   
}

long long stressful( int my , int op ) {
	if( my == MY && op == OP ) {
		return 1 ; 
	}
	
	if( dp[ my ][ op ] != -1 ) {
		return dp[ my ][ op ] ; 
	}
	
	long long ret = 0; 
	
	if( op == OP ) {
		ret = stressful( my + 1 , op ) ; 
	}
	
	else {
		long long tmp = stressful( my , op + 1 ) ; 
		ret = ( ret + tmp ) % MOD ; 
		
		if( my < op ) {
			long long t2 = stressful( my + 1 , op ) ; 
			
			ret = ( ret + t2 ) % MOD ; 
		}
	}
	
	dp[ my ][ op ] = ret ; 
	
	return dp[ my ][ op ] ; 
}

pair<int,int> solve( int my , int op ) {
	MY = my ; 
	OP = op ; 
	
	pair<int,int> ret ; 
	
	memset( dp , -1 , sizeof( dp ) ) ; 
	
	ret.first = stressfree( 1 , 0 ) ; 
	
	memset( dp , -1 , sizeof( dp ) ) ; 
	
	ret.second = stressful( 0 , 0 ) ; 
	
	return ret ; 
}

int main() {
	
	int T ; 
	
	cin >> T ; 
	
	int my , op ; 
	
	for( int i = 0 ; i < T ; i ++ ) {
		scanf("%d-%d",&my,&op) ; 
		
		pair<int,int> res = solve( my , op ) ; 
		
		cout << "Case #" << i + 1 << ": " << res.first << " " << res.second << "\n" ; 
	}
	
	return 0 ; 
}

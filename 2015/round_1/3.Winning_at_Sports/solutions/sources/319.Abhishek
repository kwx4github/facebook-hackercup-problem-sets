#include <bits/stdc++.h>

using namespace std;
int string_to_number(const string & s)
{
    int l = s.length();
    int c = 0;
    for(int i=0;i<l;i++)
    {
         c = c * 10 + (s[i] - '0');
    }
    return c;
}
#define ll long long

ll A, B;
ll dp[2005][2005];
ll mod = (ll)1e9+7;
ll ways1(ll x, ll y)
{
    if( y == B)
    {
        return (x==A);
    }
    if(dp[x][y] !=-1) return dp[x][y];
    ll ways = 0;
    if(x<A)
    ways += ways1(x + 1, y);
    if(y<B && x>y && x != A)
    ways += ways1(x , y + 1);
    if(y< B && x== A)
        ways += ways1(x, y+1);
    dp[x][y] = ways % mod;

    return ways%mod;
}
ll mp[2005][2005];
ll ways2(ll x, ll y)
{
    if( y == B)
    {
        return (x==A);
    }
    if(mp[x][y] !=-1) return mp[x][y];
    ll ways = 0;
    if(x<A && x < y)
    ways += ways2(x + 1, y);
    if(y<B )
    ways += ways2(x , y + 1);
    mp[x][y] = ways % mod;

    return ways%mod;
}
int main()
{

    int t;
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    cin >> t;
    for(int k = 1;k<=t;k++)
    {
       string s;
       cin >> s;
       size_t dashPos = s.find("-");
       string prefix = s.substr(0, dashPos);
       string suffix = s.substr(dashPos + 1);
       B = string_to_number(prefix);
       A = string_to_number(suffix);
      // cout << A <<" "<< B << endl;
       memset(dp, -1,sizeof(dp));
       memset(mp, -1, sizeof(mp));
       cout<<"Case #"<<k<<": "<<ways2(0,0)<<" "<<ways1(0,0);
       if(k<t)
       cout<<endl;
    }
}

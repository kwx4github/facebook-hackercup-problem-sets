#include <bits/stdtr1c++.h>
#include <ext/numeric>

#define PI acos(-1)
#define EPS 1e-9
#define INTERSECT 1
#define PARALLEL 2
#define COLINEAR 3
#define left(x) ((x<<1)+1)
#define right(x) ((x<<1)+2)
#define mid(x,y) (x+(y-x)/2)
#define INF 1061109567

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> ii;
typedef pair<ii,int> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
const int MOD = 1000000007;
int numGames,X,Y;
int dp[2001][2001];

int solve_stressfree(int winsSoFar, int defeatSoFar){
    int game = winsSoFar + defeatSoFar;
    if (winsSoFar > X || defeatSoFar > Y || defeatSoFar>=winsSoFar)
        return 0;
    if (game == numGames){
        return winsSoFar == X && defeatSoFar == Y;
    }
    if (dp[winsSoFar][defeatSoFar] != -1)
        return dp[winsSoFar][defeatSoFar];
    int ret = 0;
    ret += solve_stressfree(winsSoFar+1, defeatSoFar) % MOD;
    ret += solve_stressfree(winsSoFar, defeatSoFar+1) % MOD;
    return dp[winsSoFar][defeatSoFar] = ret % MOD;
}

int solve_stressful(int winsSoFar, int defeatSoFar){
    int game = winsSoFar + defeatSoFar;
    if (game>numGames || winsSoFar > X || defeatSoFar > Y || (winsSoFar>defeatSoFar && defeatSoFar < Y))
        return 0;
    if (game == numGames){
        return winsSoFar == X && defeatSoFar == Y;
    }
    if (dp[winsSoFar][defeatSoFar] != -1)
        return dp[winsSoFar][defeatSoFar];
    int ret = 0;
    ret += solve_stressful(winsSoFar+1, defeatSoFar) % MOD;
    ret += solve_stressful(winsSoFar, defeatSoFar+1) % MOD;
    return dp[winsSoFar][defeatSoFar] = ret % MOD;
}
int main(){
    ifstream in ("in.txt");
    ofstream out("out.txt");
    int T,C=1;
    in >> T;
    while (T--){
        string s;
        X = 0; Y = 0;
        in >> s;
        for (int i=0; i<s.size();i++){
            if (s[i] == '-'){
                for (i=i+1; i<s.size(); i++){
                    Y = Y * 10 + s[i] - '0';
                }
            }else{
                X = X * 10 + s[i] - '0';
            }
        }
        numGames = X + Y;
        memset(dp, -1, sizeof(dp));
        int stress_free =   solve_stressfree(1,0);
        memset(dp, -1, sizeof(dp));
        int stressful   =   solve_stressful(0,1);
        out << "Case #"<< C++ << ": " << stress_free << " " << stressful << "\n";
    }
    in.close();
    out.close();
    return 0;
}

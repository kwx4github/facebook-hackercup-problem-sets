#include <list>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <vector>
#include <string>
   
using namespace std;
   
#define ABS(a) (((a) > 0)? (a): -(a))
#define MIN(a, b) (((a) < (b))? (a): (b))
#define MAX(a, b) (((a) < (b))? (b): (a))
#define FOR(i, a, n) for (int i = (a); i <= (n); i++)
#define DFOR(i, a, n) for (int i = (a); i >= (n); i--)
#define SORT(a, first_element, last_element) sort(&(a)[(first_element)], &(a)[(last_element) + 1])
#define SQR(a) (a) * (a)
#define PI 3.14159265358979323846264
#define MEMS(a, b) memset((a), (b), sizeof(a))
#define MP make_pair
#define PB push_back
#define endl '\n'
#define LL long long
#define UN unsigned
#define Or ||
#define And &&
/////////////////////////////////////////////

int sfree[2050][2050], sfull[2050][2050];
int MOD = 1000000007;

void solution()
{
	int T;
	cin >> T;
	FOR(t, 1, T)
	{
		string s;
		cin >> s;
		int x = 0, y = 0;
		char q = 0;
		while (s[q] != '-')
		{
			x = x * 10 + s[q] - 48;
			q++;
		}
		while (q + 1 < s.size())
		{
			q++;
			y = y * 10 + s[q] - 48;
		}

		MEMS(sfree, 0);
		MEMS(sfull, 0);
		sfree[1][0] = 1;
		FOR(i, 2, x)
		{
			FOR(j, 0, MIN(y, i - 1))
			{
				sfree[i][j] = sfree[i - 1][j]  + sfree[i][j - 1];
				if (sfree[i][j] > MOD)
					sfree[i][j] -= MOD;
			}
		}

		sfull[0][0] = 1;

		FOR(j, 1, y)
		{
			int des = j;
			if (j == y)
				des = x;
			FOR(i, 0, des)
			{
				sfull[i][j] = sfull[i][j - 1];
				if (i > 0)
					sfull[i][j] += sfull[i - 1][j];
				if (sfull[i][j] > MOD)
					sfull[i][j] -= MOD;
			}
		}

		cout << "Case #" << t << ": " << sfree[x][y] << " " << MAX(1, sfull[x][y]) << endl;
	}
}
      
/*-------------------*/
   
int main()
{
#ifdef Files
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
/*Test*/
//freopen("input.txt", "w", stdout);
double OcZ2X = clock();
#endif
   
solution();
   
#ifdef Time
cout << endl;
double P2HxQ = clock();
printf("*** Total time = %.3f sec ***", (P2HxQ - OcZ2X) / CLOCKS_PER_SEC);
#endif
}
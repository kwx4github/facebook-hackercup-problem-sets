#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <string.h>
#include <math.h>
#include <stdlib.h>
using namespace std;

typedef     long long       LL;
typedef     pair<int, int>  pii;
typedef     pair<LL, LL>    pll;
typedef     pair<pii,pii>   ppi;
typedef     vector<int>     vi;
typedef     vector<vi>      vvi;
typedef     vector<LL>      vl;
typedef     vector<vl>      vvl;
typedef     vector<string>  vs;
typedef     vector<pii>     vii;

double      EPS = 1e-9;
int         INF = 2000000000;
long long   INFF = 8000000000000000000LL;
double      PI = acos(-1);
int         dx[8] = {-1,0,0,1,-1,-1,1,1};
int         dy[8] = {0,1,-1,0,-1,1,-1,1};
long        BigPrime = 1000000007;

#define     fi      first
#define     se      second
#define     mp      make_pair
#define     pb      push_back
#define     SIZE(v)         (int)v.size()
#define     ALL(v)          v.begin(),v.end()
#define     ALLA(arr,sz)    arr,arr+sz
#define     SORT(v)         sort(ALL(v))
#define     SORTA(arr,sz)   sort(ALLA(arr,sz))
#define     SQR(x)          ((x) * (x))
#define     FOR(i,s,e)      for(long (i) = (s); (i) <  (e); ++(i))
#define     FORE(i,s,e)     for(long (i) = (s); (i) <= (e); ++(i))
#define     FORD(i,e,s)     for(long (i) = (e); (i) >= (s); --(i))
#define     REP(i,n)        FOR(i,0,n)
#define     REPE(i,n)       FORE(i,1,n)
#define     REPD(i,n)       FORD(i,n,1)

inline string IntToString(int a){
    char x[100];
    sprintf(x,"%d",a); string s = x;
    return s;
}

inline int StringToInt(string a){
    char x[100]; int res;
    strcpy(x,a.c_str()); sscanf(x,"%d",&res);
    return res;
}
//== End of NNN template===
const int Nmax = 2200;
LL SFree[Nmax][Nmax], SFul[Nmax][Nmax];

long stressFree(long A, long B){
    if(A<0) return 0;
    if(B<0) return 0;
    if(SFree[A][B]>0) return SFree[A][B];

    long T = 0;
    if(A-1 > B) T = stressFree(A-1,B) % BigPrime;
    long U = stressFree(A,B-1) % BigPrime;
    SFree[A][B] = (T+U) % BigPrime;
    return SFree[A][B];
}


long stressFul(long A, long B){
    if(A<0) return 0;
    if(B<0) return 0;
    if(SFul[A][B]>0) return SFul[A][B];

    long T = 0;
    if(A <= B-1) T = stressFul(A,B-1) % BigPrime;
    long U = stressFul(A-1,B) % BigPrime;
    SFul[A][B] = (T+U) % BigPrime;
    return SFul[A][B];
}

void Init(){
    REP(i,Nmax) REP(j,Nmax){
        SFree[i][j] =0;
        SFul [i][j] =0;
    };

//stress free:
    SFree[1][0]=1; SFree[2][0]=1;
    SFul [0][1]=1; SFul [0][2]=1; SFul[1][1] =1;

    REP(i,Nmax) REP(j,Nmax){
        SFree[i][j] = stressFree(i,j);
        SFul [i][j] = stressFul(i,j);
    }
/*
    REP(i,10){
        REP(j,10) cout <<SFree[i][j]<<" ";
        cout<<endl;
    }
*/
};



int main()
{
    Init();

    //return 0;

    int T;
    int A,B;
    char c;
    cin>>T;

    FORE(t,1,T){
        cin>>A>>c>>B;
        cout<<"Case #"<<t<<": ";
        cout<<SFree[A][B]<<" "<<SFul[A][B];
        cout<<endl;
    }
    return 0;
}

#include <cstdio>
#include <iostream>
#include <ctime>
#include <cassert>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#define puba push_back
#define mapa make_pair
#define ff first
#define ss second
#define bend(_x) (_x).begin(), (_x).end()
#define szof(_x) ((int) (_x).size())

using namespace std;
typedef long long LL;
const int MAXN = 2005;
const int MOD = 1e9 + 7;

int d[MAXN][MAXN];

int main() {    
    //freopen(".in", "r", stdin);
    //freopen(".out", "w", stdout);

    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        int a, b;
        scanf("%d-%d", &a, &b);
        //cout << a << " " << b << endl;
        memset(d, 0, sizeof d);
        d[1][0] = 1;
        for (int j = 1; j <= a; ++j) {
            for (int k = 0; k <= b; ++k) {
                if (j == 1 && k == 0) {
                     continue;
                }
                //cout << j << " " << k << endl;
                if (k >= j) {
                     d[j][k] = 0;
                } else if (j - 1 > k) {
                     d[j][k] = d[j - 1][k];
                     //cout << j - 1 << " " << k << " " << d[j - 1][k] << endl;
                     if (k > 0) {
                         d[j][k] += d[j][k - 1];
                     }
                } else {
                     d[j][k] = 0;
                     if (k > 0) {
                         d[j][k] += d[j][k - 1];
                     }
                }
                d[j][k] %= MOD;
            }   
        }
        //cout << d[2][0] << endl;
        cout << "Case #" << i + 1 << ": " << d[a][b] << " ";
        memset(d, 0, sizeof d);
        d[0][0] = 1;
        for (int j = 0; j <= a; ++j) {
            for (int k = 0; k <= b; ++k) {
                if (j == 0 && k == 0) {
                     continue;
                }
                if (k < j && k != b) {
                    //cout << k << " " << j << endl;
                    d[j][k] = 0;
                } else if (k - 1 >= j) {
                     d[j][k] = 0;
                     if (j > 0) {
                        d[j][k] += d[j - 1][k];
                     }
                     if (k > 0) {
                         d[j][k] += d[j][k - 1];
                     }
                } else {
                     d[j][k] = 0;
                     if (j > 0) {
                         d[j][k] += d[j - 1][k];
                     }
                }
                d[j][k] %= MOD;
            }   
        }
        cout << d[a][b] << endl;
    }

    return 0;
}
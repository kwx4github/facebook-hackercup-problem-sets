#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <locale>
#include <memory>
#include <stdexcept>
#include <utility>
#include <string>
#include <fstream>
#include <ios>
#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <istream>
#include <ostream>
#include <sstream>
#include <streambuf>
#include <complex>
#include <numeric>
#include <valarray>
#include <exception>
#include <limits>
#include <new>
#include <typeinfo>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <climits>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdlib>
#include <cstddef>
#include <cstdarg>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cwchar>
#include <cwctype>
using namespace std;
static const double EPS = 1e-8;
static const double PI = 4.0 * atan(1.0);
static const double PI2 = 8.0 * atan(1.0);
typedef long long ll;
typedef unsigned long long ull;

#define ALL(c) (c).begin(), (c).end()
#define CLEAR(v) memset(v,0,sizeof(v))
#define MP(a,b) make_pair((a),(b))
#define REP(i,n) for(int i=0;i<(int)n;++i)
#define ABS(a) ((a)>0?(a):-(a))
template<class T> T MIN(const T& a, const T& b) { return a < b ? a : b; }
template<class T> T MAX(const T& a, const T& b) { return a > b ? a : b; }
template<class T> void MIN_UPDATE(T& a, const T& b) { if (a > b) a = b; }
template<class T> void MAX_UPDATE(T& a, const T& b) { if (a < b) a = b; }

const int MOD = 1000000007;

int stressFree(int A, int B) {
	static int dp[2048][2048];
	CLEAR(dp);
	dp[0][0] = 1;
	REP(a, A + 1) REP(b, B + 1) {
		if (a <= b) {
			continue;
		}
		if (a) {
			dp[a][b] += dp[a - 1][b];
			dp[a][b] %= MOD;
		}
		if (b) {
			dp[a][b] += dp[a][b - 1];
			dp[a][b] %= MOD;
		}
	}
	return dp[A][B];
}

int stressful(int A, int B) {
	static int dp[2048][2048];
	CLEAR(dp);
	dp[0][0] = 1;
	REP(a, A + 1) REP(b, B + 1) {
		if (!(b == B || a <= b)) {
			continue;
		}

		if (a) {
			dp[a][b] += dp[a - 1][b];
			dp[a][b] %= MOD;
		}
		if (b) {
			dp[a][b] += dp[a][b - 1];
			dp[a][b] %= MOD;
		}
	}
	return dp[A][B];
}

int main() {
	std::ios::sync_with_stdio(false);

	int T;
	cin >> T;
	for (int testCase = 1; testCase <= T; ++testCase) {
		int A, B;
		char _;
		cin >> A >> _ >> B;
		printf("Case #%d: %d %d\n", testCase, stressFree(A, B), stressful(A, B));
	}
}

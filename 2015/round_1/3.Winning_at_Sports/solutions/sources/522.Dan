package hackercup1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.StringTokenizer;

public class P3 {
	Scanner sc;
	PrintWriter pw;
	String problemName = "P3";
	int MOD = (int)1e9 + 7;
	int MAX = 2002;
	long[][] dp1 = new long[MAX][MAX];
	long[][] dp2 = new long[MAX][MAX];

	
	public P3() throws FileNotFoundException {
		sc = new Scanner(new File(problemName + ".in"));
		pw = new PrintWriter(new File(problemName + ".out"));
	}
	
	void init() {
		for (int i=0; i<MAX; i++) for (int j=0; j<MAX; j++) {
			dp1[i][j] = -1;
			dp2[i][j] = -1;
		}
		dp1[1][0] = 1;
		dp2[0][0] = 1;
	}
	
	public long computeStressFree(int a, int b) {
		if (dp1[a][b] == -1) {
			dp1[a][b] = 0;
			if (a-1 > b) dp1[a][b] = (dp1[a][b] + computeStressFree(a-1, b)) % MOD;
			if (b > 0) dp1[a][b] = (dp1[a][b] + computeStressFree(a, b-1)) % MOD;
		}
		return dp1[a][b];
	}

	public long computeStressful(int a, int b) {
		if (dp2[a][b] == -1) {
			dp2[a][b] = 0;
			if (a > 0) dp2[a][b] = (dp2[a][b] + computeStressful(a-1, b)) % MOD;
			if (b-1 >= a) dp2[a][b] = (dp2[a][b] + computeStressful(a, b-1)) % MOD;
		}
		return dp2[a][b];
	}
	
	public void solveTest(int testIdx) {
		// parse score
		String score = sc.nextLine();
		StringTokenizer st = new StringTokenizer(score, "- ");
		int a = Integer.parseInt(st.nextToken());
		int b = Integer.parseInt(st.nextToken());
		if (a<=b) throw new AssertionError();
		
		long n1 = computeStressFree(a, b);
		long n2 = computeStressful(b, b);
		
		pw.println("Case #" + testIdx + ": " + n1 + " " + n2);
	}
	
	public void solve() {
		init();

		int T = sc.nextInt();
		sc.nextLine();
		for (int testIdx=1; testIdx<=T; testIdx++) {
			solveTest(testIdx);
			System.out.println("Done " + testIdx + " / " + T);
		}
		
		pw.close();
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		P3 p = new P3();
		p.solve();
	}
}

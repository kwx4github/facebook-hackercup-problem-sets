#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define FOR(it,st,en) for(int it=(st);it<(int)(en);++it)
#define REP(it,en) FOR(it,0,en)
#define ITE(it,c) for(auto it=(c).begin();it!=(c).end();++it)
#define ALLOF(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define X first
#define Y second
typedef long long int LL; 
typedef long double LD;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
const int INF=(int)1e9; 
const double EPS=(LD)1e-7;

const LL MOD=1000000007;

LL extended_euclid(LL a, LL b, LL &x, LL &y) {  
  LL xx = y = 0;
  LL yy = x = 1;
  LL q,t;
  while (b) {
    q = a/b;
    t = b; b = a%b; a = t;
    t = xx; xx = x-q*xx; x = t;
    t = yy; yy = y-q*yy; y = t;
  }
  return a;
}

LL mod_inv(LL x){
	LL n=MOD;
	LL s,t;
	LL d=extended_euclid(x,n,s,t);
	// cout<<x<<' '<<s<<' '<<d<<endl;
	if(d!=1)return -1;
	return ((s%n)+n)%n;
}

LL nCr(LL n, LL r ){
    if (r*2>n) r=n-r;
    if (r==0) return 1;
    LL res=n;
    FOR(i,2,r+1){
        res*=(n-i+1);
        // res/=i;
        res%=MOD;
        res*=mod_inv(i);
        res%=MOD;
    }
    return res;
}

VVI DIST;
int B;
LL DP(int x, int y){
	// cout<<x<<','<<y<<endl;
	if(x>=DIST.size() || y>=DIST[0].size())return 0;
	if(x==y)return 0;
	if(DIST[x][y]!=-1)return DIST[x][y];
	// if(y>B)return DIST[x][y]=
	return DIST[x][y] = (DP(x+1,y) + DP(x,y+1))%MOD;
}

void solve(){
	string s;
	cin>>s;
	int a=0,b=0,i=0;
	while(s[i]!='-'){
		a*=10;
		a+=s[i]-'0';
		i++;
	}
	i++;
	while(i<s.size()){
		b*=10;
		b+=s[i]-'0';
		i++;
	}
	LL stressful = (nCr(2*b,b)*mod_inv(b+1))%MOD;
	DIST.clear();
	DIST.resize(b+1,VI(a+1,-1));
	DIST[b][a]=1;
	B=b;
	LL stressfree = DP(0,1);
	cout<<stressfree<<' '<<stressful<<endl;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin>>T;
    REP(i,T){
    	cout<<"Case #"<<i+1<<": ";
    	solve();
    }
	return 0;
}
//stressful
/*
				  (b,a)
					.
				  (b,b)
				.
			.
		.
	.
(0,0)
simply C_b (catalan numbers)
*/

//stressfree
/*
				  (b,a)
					.
				  (b,b)
				.
			.
		.
	.
(0,0)
*/

/*
Always scores the first: (0,1)
goes to (b,b+1) = C_b moves
still goes up k=(a-(b+1)) times more:
b+k-1 nCr k-1 
The above is false...
lets do DP instead
*/
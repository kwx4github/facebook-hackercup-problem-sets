#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <sstream>
#include <vector>


#define INF 1000000000
#define MOD 1000000007
#define ALL(x) std::begin(x), std::end(x)


long long dp1[2222][2222], dp2[2222][2222];


int main(int argc, char** argv)
{
  std::cin.tie(0);
  std::ios_base::sync_with_stdio(0);

  int T;

  std::cin >> T;

  for (int t = 1; t <= T; t ++) {
    std::string s;

    int s1, s2;

    scanf("%d-%d", &s1, &s2);

    if (s1 == 0 && s2 == 0) {
      // The code won't reach here, though...

      std::cout << "Case #" << t << ": " << 0 << ' ' << 0 << std::endl;
    }
    else if (s2 == 0) {
      std::cout << "Case #" << t << ": " << 1 << ' ' << 0 << std::endl;
    }
    else if (s1 == 0) {
      // The code won't reach here as well.

      std::cout << "Case #" << t << ": " << 0 << ' ' << 1 << std::endl;
    }
    else {
      assert(s1 && s2);
      
      memset(dp1, 0, sizeof(dp1));
      memset(dp2, 0, sizeof(dp2));

      dp1[0][0] = dp2[0][0] = 1;

      for (int i = 0; i <= s1; i ++)
        for (int j = 0; j <= s2; j ++) {
          if (i > j) {
            if (j > 0)
              dp1[i][j] = (dp1[i][j] + dp1[i][j - 1]) % MOD;

            if (i > 0)
              dp1[i][j] = (dp1[i - 1][j] + dp1[i][j]) % MOD;
          }

          if (i <= j || j == s2) {
            if (j > 0)
              dp2[i][j] = (dp2[i][j] + dp2[i][j - 1]) % MOD;

            if (i > 0)
              dp2[i][j] = (dp2[i - 1][j] + dp2[i][j]) % MOD;
          }
        }

      std::cout << "Case #" << t << ": " << dp1[s1][s2] << ' ' << dp2[s1][s2] << std::endl;
    }
  }

  return 0;
}

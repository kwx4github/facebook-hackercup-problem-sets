#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <queue>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
using namespace std;
#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)
#define rep(i,n) REP(i,0,n)
#define FOR(it,c) for(__typeof((c).begin()) it=(c).begin(); it!=(c).end(); ++it)
#define ALLOF(c) (c).begin(), (c).end()
typedef long long ll;

#define MOD 1000000007
#define MAXN 2500
ll catalan[MAXN];
void init_catalan(){
  catalan[0] = 1;
  for(int n=0; n<MAXN; n++){
    for(int i=0; i<=n; i++){
      catalan[n+1] = (catalan[n+1] + catalan[i] * catalan[n-i])%MOD;
    }
  }
}

ll dp[MAXN][MAXN];
void init(){
  rep(i,MAXN){
    dp[i][i] = 0;
    dp[i][0] = 1;
  }
  REP(i,2,MAXN){
    REP(j,1,i){
      dp[i][j] = (dp[i-1][j] + dp[i][j-1])%MOD;
    }
  }
}

int stress_free(int ys, int os){
  return dp[ys][os];
}

int stressful(int ys, int os){
  return catalan[os];
}

int main(){
  int T;
  cin >> T;

  init();
  init_catalan();
  
  rep(t,T){
    int ys, os;
    scanf("%d-%d", &ys, &os);

    cout << "Case #" << t+1 << ": " << stress_free(ys, os) << " " << stressful(ys, os) << endl;
  }
  return 0;
}

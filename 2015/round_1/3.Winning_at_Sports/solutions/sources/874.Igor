#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

const int MOD = (int)1e9 + 7;

void add(int &x, int y) {
  if ((x += y) >= MOD)
    x -= MOD;
}


const int maxn = (int)2e3 + 1;
int _d[2][maxn];

int solve1(int a, int b) {
  int *d = _d[0], *nd = _d[1];
  for (int i = 0; i <= a; ++i)
    d[i] = 0;
  d[0] = 1;
  for (int round = 0; round < a + b; ++round) {
    for (int f = 0; f <= a; ++f)
      nd[f] = 0;
    for (int f = 0; f <= a; ++f) {
      int cur = d[f];
      if (!cur)
        continue;
      int s = round - f;
      if (f < a)
        add(nd[f + 1], cur);
      if (s < b && (f > s + 1))
        add(nd[f], cur);
    }
    swap(d, nd);
  }
  return d[a];
}

int solve2(int a, int b) {
  int *d = _d[0], *nd = _d[1];
  for (int i = 0; i <= a; ++i)
    d[i] = 0;
  d[0] = 1;
  for (int round = 0; round < a + b; ++round) {
    for (int f = 0; f <= a; ++f)
      nd[f] = 0;
    for (int f = 0; f <= a; ++f) {
      int cur = d[f];
      if (!cur)
        continue;
      int s = round - f;
      if (f < a && (s == b || f < s))
        add(nd[f + 1], cur);
      if (s < b)
        add(nd[f], cur);
    }
    swap(d, nd);
  }
  return d[a];
}

bool solve() {
  int a, b;
  if (scanf("%d-%d", &a, &b) < 2)
    return 0;
  
  printf("%d %d\n", solve1(a, b), solve2(a, b));
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif

  int t;
  while (scanf("%d", &t) == 1) {
    for (int i = 0; i < t; ++i) {
      printf("Case #%d: ", i + 1);
      assert(solve());
    }
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <vector>
using namespace std;

typedef long long int LL;
typedef pair<int,int> PII;

const int MOD = 1000000007;

// Counts stress-free wins recursively with memoization
map<PII, LL> mem;
LL sfree(int a, int b) {
    if (a == 1 && b == 0)
        return 1;
    PII state = make_pair(a, b);
    if (mem[state] > 0)
        return mem[state];
    LL r1 = (b > 0)? sfree(a, b-1) : 0;
    LL r2 = (a > b+1)? sfree(a-1, b) : 0;
    return mem[state] = (r1 + r2)%MOD;
}

// Counts stressful wins recursively with memoization
map<PII, LL> mem2;
LL sful(int a, int b) {
    if (a == 0 && b == 0)
        return 1;
    PII state = make_pair(a, b);
    if (mem2[state] > 0)
        return mem2[state];
    LL r1 = (b > a)? sful(a, b-1) : 0;
    LL r2 = (a > 0)? sful(a-1, b) : 0;
    return mem2[state] = (r1 + r2)%MOD;
}

int main(int argc, char*argv[]) {
    int T, A, B;
    scanf("%d", &T);
    for (int t = 1; t <= T; ++t) {
        scanf("%d-%d", &A, &B);
        printf("Case #%d: %lld %lld\n", t, sfree(A, B), sful(B, B));
    }
    return EXIT_SUCCESS;
}

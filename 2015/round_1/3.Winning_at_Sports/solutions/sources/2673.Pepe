//============================================================================
// Name        : autocompletec.cpp
// Author      : Jose Lorente
// Version     :
// Copyright   : Jose Lorente
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <string>
#include <sstream>
#include <map>

using namespace std;

int getTestCases();

class Sports {
	int scoreW, scoreL;
	std::map<int, std::map<int, int>> memoFree;
	std::map<int, std::map<int, int>> memoFull;

public:
	Sports(string input);
	int getStressFree(int w, int l);
	int getStressFull(int w, int l);
};

int main() {
	int tCases, i = 0;
	tCases = getTestCases();

	while (i++ < tCases) {
		string input;
		getline(cin, input);
		Sports sports(input);

		cout << "Case #" << i << ": " << sports.getStressFree(0, 0) << " " << sports.getStressFull(0, 0) << endl;
	}
}

Sports::Sports(string input) {
	string score = "";
	for (int i = 0; i < input.size(); ++i) {
		if (input[i] == '-') {
			std::istringstream ss(score);
			ss >> scoreW;
			score = "";
		} else {
			score += input[i];
		}
	}
	std::istringstream ss(score);
	ss >> scoreL;
}

int Sports::getStressFree(int w, int l) {
	if (memoFree[w].count(l) <= 0) {
		if (w == scoreW && l == scoreL) {
			return 1;
		}

		int c = 0;
		if (w < scoreW) {
			c += getStressFree(w + 1, l);
		}
		if (l < w - 1 && l < scoreL) {
			c += getStressFree(w, l + 1);
		}
		memoFree[w][l] = c % 1000000007;
	}
	return memoFree[w][l];
}

int Sports::getStressFull(int w, int l) {
	if (memoFull[w].count(l) <= 0) {
		if (w == scoreW && l == scoreL) {
			return 1;
		}

		int c = 0;
		int ways;
		if (w < scoreW && (w < l || l == scoreL)) {
			c += getStressFull(w + 1, l);
		}
		if (l < scoreL) {
			c += getStressFull(w, l + 1);
		}
		memoFull[w][l] = c % 1000000007;
	}
	return memoFull[w][l];;
}

int getTestCases() {
	string input;
	int r;
	stringstream ss;

	getline(cin, input);
	ss.str(input);
	ss >> r;
	return r;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <utility>
#include <iomanip>
using namespace std;
                          // int =       2,147,483,647 -> 10^9
typedef long long LL;     // 9,223,372,036,854,775,807 -> 10^21
typedef long double LD;   // 1.18973 x 10^4932
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int,int> pint;

// StrToNum<int>(str)
template <typename T>
T StrToNum (const string& str) {
  istringstream ss(str);
  T result;
  return ss >> result ? result : 0;
}

// Split(&res, str, del)
void Split(vector<string>* res, const string& str, const string& del) {
  string temp = str;
  int i = temp.find(del);
  while(i != string::npos) {
    if(!temp.substr(0, i).empty()) {
      res->push_back(temp.substr(0, i));
    }
    temp.erase(0, i + del.length());
    i = temp.find(del);
  }
  if(!temp.empty()) {
    res->push_back(temp);
  }
}

int MOD = 1e9+7;
int MAX_NUMBERS = 2000;
// -------------------

vector<LL> catalan(MAX_NUMBERS+1, 0);

void generate_catalan_numbers() {
  catalan[0] = catalan[1] = 1;
  for (int i = 2; i <= MAX_NUMBERS; i++) {
    for (int j = 1; j <= i - 1; j++) {
      catalan[i] = (catalan[i] + ((catalan[j]) * catalan[i - j]) % MOD) % MOD;
    }
    catalan[i] = catalan[i] % MOD;
  }
}

int main() {
  generate_catalan_numbers();
  int T, W, L;
  string input;

  cin >> T;
  for (int val = 1; val <= T; val++) {
    cin >> input;
    vstr parse;
    Split(&parse, input, "-");
    W = StrToNum<int>(parse[0]);
    L = StrToNum<int>(parse[1]);

    if (W == 1) {
      cout << "Case #" << val << ": " << 1 << " " << 1 << endl;
      continue;
    }


    vector<vint> grid(W+1, vint(L+1, 0));

    for (int i = 0; i < L+1; i++)
      grid[0][i] = 1;

    for (int i = 0; i < W-L; i++)
        grid[i][0] = 1;

    int tmp;
    for (int i = W-1, tmp = L; tmp >= 0; tmp--) {
      grid[i][tmp] = 1;
      i--;
    }

    for (int i = 1; i <= W + L - 2; i++) {
      for (int j = 1; j <= i; j++) {
        int index = i - j + 1;
        if( index <= W && j <= L && grid[index][j] == 0) {
          grid[index][j] = (grid[index-1][j] + grid[index][j-1]) % MOD;
        } else if ( index <= W && j <= L && grid[index][j] == 1) {
          grid[index][j] = grid[index-1][j];
        }
      }
    }

    // for (int i = 0; i < W+1; i++) {
    //   for (int j = 0; j < L+1; j++) {
    //     cout << grid[i][j] << " ";
    //   }
    //   cout << endl;
    // }

    cout << "Case #" << val << ": " << grid[W-2][L] << " " << catalan[L+1] << endl;
  }

  return 0;
}




























































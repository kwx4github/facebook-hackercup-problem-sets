program Winning;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, sysutils
  { you can add units after this };

var
  mScore, tScore: Integer;

procedure ReadData;
var
  S: AnsiString;

begin
  ReadLn(S);
  mScore:= StrToInt(Copy(S, 1, Pos('-', S) - 1));
  tScore:= StrToInt(Copy(S, Pos('-', S) + 1, Length(S)));

end;

const Max = 2000;
const Modulo =  1000000007;
var
  Free, Full: array[0..Max, 0..Max] of Int64;

procedure Preprocess;
var
  m, t: Integer;
  res: Int64;
  i: Integer;
begin
  FillChar(Free, SizeOf(Free), 0);

  for i := 0 to Max do
    Free[i, 0] := 1;

  for m := 2 to Max do
    for t := 0 to m - 1 do
    begin
      res := 0;
      res += Free[m, t - 1];
      res += Free[m - 1, t];

      Free[m, t] := (res mod Modulo);
    end;
                                     {
  for m := 0 to Max do
  begin
    for t := 0 to Max do
      Write(Free[m, t], ' ');
    WriteLn;
  end;                              }

  FillChar(Full, SizeOf(Full), 0);
  for i := 0 to Max do
    Full[0, i] := 1;

  for t := 1 to Max do
    for m := 1 to t do
    begin
      res := 0;
      if (t > 0) and (m <= t - 1) then
        res += Full[m, t - 1];
      if (m > 0) and (m <= t + 1) then
        res += Full[m - 1, t];

      Full[m, t] := (res mod Modulo);
    end;
  {
  WriteLn;
  WriteLn;

  for m := 0 to Max do
  begin
    for t := 0 to Max do
      Write(Full[m, t], ' ');
    WriteLn;
  end;
   }
end;

function Solve: Integer;
var
  i, j: Integer;
  SumFull: Int64;
begin
  Write(Free[mScore, tScore], ' ');

  SumFull:= 0;
  for i := tScore to mScore do
    SumFull += full[i, tScore];
  WriteLn(SumFull);
end;

var
  TCount: Integer;
  i: Integer;

begin
  Preprocess;
  ReadLn(TCount);

  for i := 1 to TCount do
  begin
    ReadData;
    Write('Case #', i, ': ');
    Solve;
  end;

end.


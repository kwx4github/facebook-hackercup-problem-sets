#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>
#include <climits>
#include <bitset>
#include <cassert>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define UNIQUE(v) (v).erase(unique(ALL(v)), (v).end())
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef pair<ll, ll> P;

int A, B;

const int N = 2015;

const ll mod = 1e9 + 7;

ll dp1[N][N];
ll rec1(int a, int b){
	if (b > B || a > A) return 0;
	if (b == B) return 1;
	if (a == A) return 1;
	ll &res = dp1[a][b];
	if (res + 1) return res;

	res = 0;
	if (a > b + 1) res += rec1(a, b + 1);
	res += rec1(a + 1, b);
	res %= mod;
	return res;
}

ll dp2[N][N];
ll rec2(int a, int b){
	if (b > B || a > A) return 0;
	if (b == B) return 1;
	if (a == A) return 1;
	ll &res = dp2[a][b];
	if (res + 1) return res;

	res = 0;

	if (a + 1 <= b) res += rec2(a + 1, b);
	res += rec2(a, b + 1);
	res %= mod;
	return res;
}


int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout.setf(ios::fixed);
	cout.precision(12);

	int T;
	cin >> T;
	for (int tcnum = 1; tcnum <= T; ++tcnum){
		char c;
		cin >> A >> c >> B;
		MEMSET(dp1, -1);
		MEMSET(dp2, -1);

		cout << "Case #" << tcnum << ": " << rec1(1, 0) << ' ' << rec2(0, 1) << '\n';
	}
}
// g++ v4.8.2 
// Flags: -O2

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <cassert>
#include <cstdio>

using namespace std;

#define forall(i,n) for(int i=0; i<(int)(n); i++)

template<class T, class T1, class T2> inline bool Within(T x, T1 xMin, T2 xMax)
    {return (x >= xMin && x <= xMax);}
template<class T, class T1> inline bool Within(T x, T1 xMax)
    {return (x >= 0 && x < xMax);}

typedef vector<int> IntVec;
typedef vector<IntVec> IntVV;

const int mod = 1000000007;

IntVV Ways(int n, bool bStrict) {
    IntVV vv(n+1);
    vv[0].resize(1, 1);
    for (int i=1; i<=n; i++) {
	IntVec& v = vv[i];
	v.resize(i+1);
	v[0] = 1;
	for (int j=1; j<i; j++) {
	    int sum = v[j-1] + vv[i-1][j];
	    if (sum > mod)
		sum -= mod;
	    v[j] = sum;
	}
	v[i] = (bStrict ? 0 : v[i-1]);
    }
    return vv;
}

int scoreMax = 2000;

int main() {
    IntVV ways1 = Ways(scoreMax, true), ways2 = Ways(scoreMax, false);
    int nTasks;
    cin >> nTasks;
    for (int iTask=1; iTask<=nTasks; iTask++) {
	string scores;
	cin >> scores;
	int x, y;
	sscanf(scores.c_str(), "%d-%d", &x, &y);
	assert(x > y && y >= 0);
	cout << "Case #" << iTask << ": "
	    << ways1.at(x).at(y) << ' '
	    << ways2.at(y).at(y) << '\n';
    }
}

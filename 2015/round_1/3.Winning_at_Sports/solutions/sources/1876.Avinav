package round1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class Sports1 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int m = 0, n = 0, T = 0;
		File file = new File("winning_at_sports.txt");
		Long[][] vertexSet = null;
		long stressLess, stressFull;
		try {
			Scanner in = new Scanner(file);
			PrintStream pStream = new PrintStream("sports_output.txt");
			T = in.nextInt();
			for (int t = 0; t < T; t++) {
				String line = in.next();
				String[] str = line.split("-");
				m = Integer.parseInt(str[0]);
				n = Integer.parseInt(str[1]);
				
				vertexSet = new Long[m+1][n+1];
				initialize(vertexSet);
				vertexSet[0][0] = 1L;
				traverseGraph(vertexSet, m, n);
				stressLess = vertexSet[m][n];
				
				vertexSet = new Long[m+1][n+1];
				initialize_stressfull(vertexSet);
				stressFull = vertexSet[n][n];
				vertexSet[0][0] = 1L;
				traverseGraph_stressFull(vertexSet, m, n);
				stressFull = vertexSet[n][n];
				
				pStream.println("Case #" + (t+1) + ": " + stressLess + " " + stressFull);
//				printTree(vertexSet, m, n);
			}
			in.close();
			pStream.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void initialize(Long[][] vertexSet) {
		for (int i = 0; i < vertexSet.length; i++) {
			for (int j = 0; j < vertexSet[0].length && j < i; j++) {
				vertexSet[i][j] = 0L;
			}
		}
	}
	public static void initialize_stressfull(Long[][] vertexSet) {
		int k = vertexSet[0].length;
		for (int i = 0; i < k; i++) {
			for (int j = i; j < k; j++) {
				vertexSet[i][j] = 0L;
			}
		}
	}
	
	public static void traverseGraph(Long[][] vertexSet, int m, int n) {
		
		int i = 1, j = 0;
		vertexSet[1][0] += vertexSet[0][0];
		while (i <= m + n){
			while (j <= n && j < i - j) {
				if (vertexSet[i-j][j] != null) {
					if(i-j+1 <= m && vertexSet[i-j+1][j] != null){
						vertexSet[i-j+1][j] += vertexSet[i-j][j];
						vertexSet[i-j+1][j] %= 1000000007;
					}
					if(j+1 <= n && vertexSet[i-j][j+1] != null){
						vertexSet[i-j][j+1] += vertexSet[i-j][j];
						vertexSet[i-j][j+1] %= 1000000007;
					}
				}
				j++;
			}
			i++; j = i - m;
			if ( j < 0) j = 0;
		}
	}
	public static void traverseGraph_stressFull(Long[][] vertexSet, int m, int n) {
		int i = 1, j = 0;
		if (n > 0) {
		vertexSet[0][1] += vertexSet[0][0];
		}
		while (i <= n + n){
			while (j <= n && i-j <= n && j <= i - j) {
				if (vertexSet[j][i-j] != null) {
					if(j+1 <= n && vertexSet[j+1][i-j] != null) {
						vertexSet[j+1][i-j] += vertexSet[j][i-j];
						vertexSet[j+1][i-j] %= 1000000007;
					}
					if(i-j+1 <= n && vertexSet[j][i-j+1] != null) {
						vertexSet[j][i-j+1] += vertexSet[j][i-j];
						vertexSet[j][i-j+1] %= 1000000007;
					}
				}
				j++;
			}
			i++; j = i - n ;
			if ( j < 0) j = 0;
		}
	}
	
	public static void printTree (Long[][] vertexSet, int m, int n) {
		for (int i = 0; i <= m; i++) {
			for (int j = 0; j <= n; j++) {
				if(vertexSet[i][j] != null) {
					System.out.println(i + "-" + j + " : " + vertexSet[i][j]);
					if (i+1 <= m && vertexSet[i+1][j] != null) System.out.println("Win: " + (i+1) + "-" +(j));
					if (j+1 <= n && vertexSet[i][j+1] != null) System.out.println("Loose: " +(i)+"-"+(j+1));
				}
			}
		}
	}

}

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int,int> pii;
typedef vector <int> vi;

#define rep(i, n) for(int i = 0; i < (n); ++i)

#define eb emplace_back
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define sz(a) ((int)a.size())
#define mset(a, v) memset(a, v, sizeof(a))

#define dbn cerr << "\n"
#define dbg(x) cerr << #x << " : " << x << " "
#define dbs(x) cerr << x << " "

const int N = 2020;
const int mod = (int)1e9 + 7;

int f1[N][N], f2[N][N];

int goStressFree(int a, int b) {
    if(a == 0 and b == 0) return 1;
    int & ret = f1[a][b];
    if(~ret) return ret;

    ret = 0;

    if(a - 1 > b or b == 0) {
        ret += goStressFree(a - 1, b);
        if(ret >= mod) ret -= mod;
    }
    if(b > 0) {
        ret += goStressFree(a, b - 1);
        if(ret >= mod) ret -= mod;
    }
    return ret;
}

int _goStressFull(int a, int b) {
    if(a == 0 and b == 0) return 1;
    int & ret = f2[a][b];
    if(~ret) return ret;
    ret = 0;
    if(a > 0) {
        ret += _goStressFull(a - 1, b);
        if(ret >= mod) ret -= mod;
    }
    if(b - 1 >= a) {
        ret += _goStressFull(a, b - 1);
        if(ret >= mod) ret -= mod;
    }
    return ret;
}

int goStressFull(int a, int b) {
    if(b == 0) return 1;
    return _goStressFull(b - 1, b);
}

inline void solve() {
    int a, b;
    char c;
    cin >> a >> c >> b;
    dbg(a), dbg(b), dbn;
    cout << goStressFree(a, b) << " " << goStressFull(b - 1, b) << "\n";
}

int main() {
    #ifdef LOCAL
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    mset(f1, -1);
    mset(f2, -1);
    
    int numTest;
    cin >> numTest;
    for(int test = 1; test <= numTest; ++test) {
        cout << "Case #" << test << ": ";
        solve(); 
        cerr << "Case #" << test << " DONE !\n";
    }
    return 0;
}
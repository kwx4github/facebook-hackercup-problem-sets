#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <tuple>
#include <vector>
using namespace std;

const int kMod = 1000000007;

inline void Add(int& r, int add) {
  r += add;
  if (r >= kMod) {
    r -= kMod;
  }
}

static int good[2001][2001];
static int bad[2001][2001];

int Good(int a, int b) {
  int& r = good[a][b];
  if (r != -1) {
    return r;
  }

  r = 0;
  if (a == 1 && b == 0) {
    r = 1;
  } else {
    if (a > b + 1) {
      Add(r, Good(a - 1, b));
    }
    if (b > 0) {
      Add(r, Good(a, b - 1));
    }
  }

  return r;
}

int Bad(int a, int b) {
  int& r = bad[a][b];
  if (r != -1) {
    return r;
  }

  r = 0;
  if (a == 0 && b == 1) {
    r = 1;
  } else {
    if (a > 0) {
      Add(r, Bad(a - 1, b));
    }
    if (a < b) {
      Add(r, Bad(a, b - 1));
    }
  }

  return r;
}

int main() {
//  freopen("../Console/1.txt", "rb", stdin);
  freopen("../Console/winning_at_sports.txt", "rb", stdin);
  freopen("../Console/winning_at_sports.out", "wb", stdout);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int T;
  cin >> T;

  for (int tc = 0; tc < T; ++tc) {
    memset(good, -1, sizeof(good));
    memset(bad, -1, sizeof(bad));

    string line;
    cin >> line;

    int a, b;
    sscanf(line.c_str(), "%d-%d", &a, &b);

    cout << "Case #" << tc + 1 << ": ";
    cout << Good(a, b) << ' ' << Bad(b, b);
    cout << '\n';
  }

  return 0;
}

#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <stdio.h>
#include <iomanip>
using namespace std;

#define REP(i,N) for (int i = 0; i < (N); ++i)

typedef unsigned int ui;
typedef long long ll;

typedef vector<int> vi;
typedef vector<ll> vll;

const ll MOD = 1000000007LL;

template<class T> void printImpl(const vector<T> & coll) { copy(coll.begin(), coll.end(), ostream_iterator<T>(cout, " ")); cout << endl; }
template<class T, int N> void printImpl(T (&coll)[N]) { copy(coll, coll + N, ostream_iterator<T>(cout, " ")); cout << endl; }
template<class Key, class Value> void printImpl(const map<Key, Value> & data) { typename map<Key, Value>::const_iterator it; for (it = data.begin(); it != data.end(); ++it) { cout << it->first << ":" << it->second << endl; } }
template <class T> void printImpl(const T & data) { cout << data << endl; }

#define DEBUGPRINT
#ifdef DEBUGPRINT
#define print(x) cout << #x" = "; printImpl(x);
#else
#define print(x) ;
#endif

int main()
{
    vector<vll> f(2001, vll(2001));
    vector<vll> g(2001, vll(2001));

    for (int a = 1; a <= 2000; ++a)
    {
        f[a][0] = 1;
        g[0][a] = 1;
    }

    for (int b = 1; b <= 2000; ++b)
    {
        for (int a = b + 1; a <= 2000; ++a)
        {
            f[a][b] = f[a][b-1];
            if (a-1 > b)
            {
                f[a][b] = (f[a][b] + f[a-1][b]) % MOD;
            }
        }
    }

    for (int b = 1; b <= 2000; ++b)
    {
        for (int a = 1; a <= b; ++a)
        {
            g[a][b] = g[a-1][b];
            if (a <= b - 1)
            {
                g[a][b] = (g[a][b] + g[a][b-1]) % MOD;
            }
        }
    }

    int caseCount;
    cin >> caseCount;

    for (int csIx = 1; csIx <= caseCount; ++csIx)
    {
        int a, b;
        char c;
        cin >> a >> c >> b;
        if (b != 0)
            cout << "Case #" << csIx << ": " << f[a][b] << " " << g[b][b] << endl;
        else
            cout << "Case #" << csIx << ": " << f[a][b] << " " << 1 << endl;
    }

    
    return 0;
}
#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker,"/STACK:64000000")
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <cassert>
#include <time.h>
#include <bitset>

using namespace std;

#define mp make_pair
#define pb push_back
#define _(a,b) memset( (a), b, sizeof( a ) )
#define all(a) a.begin(), a.end()
#define sz(a) (int)a.size()
#ifdef WIN32
#define dbg(...) {fprintf(stderr, __VA_ARGS__); fflush(stderr);}
#define dbgx(x) {cerr << #x << " = " << x << endl;}
#define dbgv(v) {cerr << #v << " = {"; for (typeof(v.begin()) it = v.begin(); it != v.end(); it ++) cerr << *it << ", "; cerr << "}"; cerr << endl;}
#else
#define dbg(...) { }
#define dbgx(x) { }
#define dbgv(v) { }
#endif

typedef unsigned long long ull;
typedef long long lint;
typedef pair < int , int > pii;
typedef long double ld;

const int INF = 1000 * 1000 * 1000;
const lint LINF = 1000000000000000000LL;
const double eps = 1e-9;

void prepare()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

const int nmax = 2005, MOD = INF + 7;

int n, m, dp[nmax][nmax];

void read()
{
	scanf("%d-%d",&n,&m);
}

int getmod(int x)
{
	if (x >= MOD)
		x -= MOD;
	return x;
}

void relax(int i, int j, int val)
{
	dp[i][j] = getmod(dp[i][j] + val);
}

int calc1()
{
	_(dp, 0);
	dp[1][0] = 1;
	for (int total = 1; total <= n + m; total ++)
	{
		for (int i = 0; i <= n; i ++)
		{
			int j = total - i;
			if (dp[i][j] > 0)
			{
				if (i < n)
				{
					relax(i + 1, j, dp[i][j]);
				}
				if (j + 1 < i)
				{
					relax(i, j + 1, dp[i][j]);
				}
			}
		}
	}
	return dp[n][m];
}

int calc2()
{
	_(dp, 0);
	dp[0][0] = 1;
	for (int total = 0; total <= n + m; total ++)
	{
		for (int i = 0; i <= n; i ++)
		{
			int j = total - i;
			if (dp[i][j] > 0)
			{
				if (j == m || i + 1 <= j)
				{
					relax(i + 1, j, dp[i][j]);
				}
				if (j < m)
				{
					relax(i, j + 1, dp[i][j]);
				}
			}
		}
	}
	return dp[n][m];
}

bool solve()
{
	int ans1 = calc1();
	int ans2 = calc2();
	printf("%d %d\n", ans1, ans2);
	return false;
}

int main()
{
	prepare();
	int t;
	scanf("%d",&t);
	for (int i = 0; i < t; i ++)
	{
		dbg("Test %d\n", i);
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}
	return 0;
}

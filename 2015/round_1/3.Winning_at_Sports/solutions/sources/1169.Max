package roundone2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class WinningatSports {
	static int maxSize = 2000;
	static long[][] stressFree = new long[maxSize + 1][maxSize + 1];
	static long[][] stressful = new long[maxSize + 1][maxSize + 1];
	static long mod = 1000000007;
	public static void main(String[] args) throws NumberFormatException, IOException {
		FileWriter writer = new FileWriter(
				"C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\output.txt");
		String filename = "C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\input.txt";
		
		long startTime = System.currentTimeMillis();
		generateTables();
		try {
			BufferedReader br = new BufferedReader(new FileReader(filename));
			int numCases = Integer.parseInt(br.readLine());
			for (int caseNum = 1; caseNum <= numCases; caseNum++) {
				System.out.println("Processing Case: " + caseNum);
				String line = br.readLine();
				int winningScore = Integer.parseInt(line.substring(0, line.indexOf('-')));
				int losingScore = Integer.parseInt(line.substring(line.indexOf('-') + 1));
				printAnswer("" + stressFree[winningScore][losingScore] + " " + stressful[losingScore + 1][losingScore], caseNum, writer);
			}
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		writer.close();
		System.out.println(System.currentTimeMillis() - startTime);
	}

	public static void generateTables(){	
		stressFree[1][0] = 1;
		stressful[0][0] = 1;
		for(int winningScore = 0; winningScore <= maxSize; winningScore++){
			for(int losingScore = 0; losingScore < maxSize; losingScore++){
				if(winningScore > losingScore){
					if(winningScore > losingScore + 1){
						stressFree[winningScore][losingScore + 1] += stressFree[winningScore][losingScore];
						stressFree[winningScore][losingScore + 1] = stressFree[winningScore][losingScore + 1] % mod;
					}
					if(winningScore < maxSize){
						stressFree[winningScore + 1][losingScore] += stressFree[winningScore][losingScore];
						stressFree[winningScore + 1][losingScore] = stressFree[winningScore + 1][losingScore] % mod;
					}
				}
				if(winningScore <= losingScore){
					stressful[winningScore][losingScore + 1] += stressful[winningScore][losingScore];
					stressful[winningScore][losingScore + 1] = stressful[winningScore][losingScore + 1] % mod;
					stressful[winningScore + 1][losingScore] += stressful[winningScore][losingScore];
					stressful[winningScore + 1][losingScore] = stressful[winningScore + 1][losingScore] % mod;
				}
			}
		}

	}
	public static void printAnswer(String answer, int caseNumber,
			FileWriter writer) throws IOException {
		writer.write("Case #" + caseNumber + ": " + answer + "\n");
	}

}

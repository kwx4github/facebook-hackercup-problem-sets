#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009
#define mod7 1000000007
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1;
/*********default*********/
#define N 2001
#define mod mod7
int a , b , cs , dpf[ N ][ N ] , tdps[ N ][ N ] , dps[ N ];
void build(){
    dpf[ 1 ][ 0 ] = 1;
    for( int i = 1 ; i < N ; i ++ )
        for( int j = 0 ; j < i ; j ++ ){
            if( i == 1 && j == 0 ) continue;
            if( i - 1 == j ) dpf[ i ][ j ] = dpf[ i ][ j - 1 ];
            else{
                dpf[ i ][ j ] = dpf[ i - 1 ][ j ];
                if( j > 0 ) dpf[ i ][ j ] = ( dpf[ i ][ j ] + dpf[ i ][ j - 1 ] ) % mod;
            }
        }
    tdps[ 0 ][ 1 ] = 1;
    dps[ 0 ] = 1;
    for( int j = 1 ; j < N ; j ++ )
        for( int i = 0 ; i <= j ; i ++ ){
            if( i == 0 && j == 1 ) continue;
            if( i == j ){
                tdps[ i ][ j ] = tdps[ i - 1 ][ j ];
                dps[ j ] = tdps[ i ][ j ]; 
            }else{
                tdps[ i ][ j ] = tdps[ i ][ j - 1 ];
                if( i > 0 ) tdps[ i ][ j ] = ( tdps[ i ][ j ] + tdps[ i - 1 ][ j ] ) % mod;
            }
        }
}
void init(){
    a = getint(); b = getint();
}
void solve(){
    printf( "Case #%d: %d %d\n" , ++ cs , dpf[ a ][ b ] , dps[ b ] );
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1000000007;
int t, m, o;
vector< vector<long long> > sfree;
vector< vector<long long> > sful;

void p(vector< vector<long long> > &v)
{
    for (int i = 0; i < m+1; ++i) {
        for (int j = 0; j < o+1; ++j) {
            cout << v[i][j] << " ";
        }
        cout << endl;
    }
}

int doit()
{
    cin >> m >> o;
    o *= -1;
    sfree.resize(m+1, vector<long long>());
    sful.resize(m+1, vector<long long>());
    for (int i = 0; i <= m; ++i) {
        if (i == 0) {
            sfree[i].resize(o+1, 0);
            sfree[0][0] = 1;
            sful[i].resize(o+1, 1);
        } else {
            sfree[i].resize(o+1, 1);
            sful[i].resize(o+1, 0);
        }
        if (i > 0) {
            if (o == 0) sful[i][o] = 1;
            for (int j = 1; j <= o; ++j) {
                if (i > j) {
                    sfree[i][j] = sfree[i][j-1];
                    if (i-1 > j) sfree[i][j] = (sfree[i][j] + sfree[i-1][j]) % MOD;
                    if (j != o) sful[i][j] = 0;
                    else sful[i][j] = sful[i-1][j];
                } else if (i == j) {
                    sfree[i][j] = 0;
                    sful[i][j] = sful[i-1][j];
                } else {
                    sfree[i][j] = 0;
                    sful[i][j] = sful[i-1][j];
                    if (j-1 >= i) sful[i][j] = (sful[i][j] + sful[i][j-1]) % MOD;
                }
            }
        }
    }
    cout << sfree[m][o] << " " << sful[m][o];
    sfree.clear();
    sful.clear();
}

int main() {
    cin >> t;
    for (int i = 0; i < t; ++i) {
        cout << "Case #" << i+1 << ": ";
        doit();
        cout << endl;
    }
}
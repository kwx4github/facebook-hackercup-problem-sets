//
//  main.cpp
//  Sports
//
//  Created by Sourabh Goel on 1/18/15.
//  Copyright (c) 2015 Adobe Systems. All rights reserved.
//

#include <iostream>
#include <math.h>

#define _DEBUGW 0
#define N   2001
#define MODVAL  1000000007

typedef std::string STRING;

int **DPFree, **DPStress;

int getStressedValIterative(int a, int b)
{
    if(a <= b)              //should never happen
        return 0;
    
    if(a == 0 || b == 0)
        return DPStress[a][b];
    
    if(DPStress[a][b] != -1)
        return DPStress[a][b];
    
    for(int i = 1; i <= a; i++)
    {
        for(int j = i; j <= b; j++)              //it will always be in the lower triangle
        {
            if(DPStress[i][j] == -1)
            {
                DPStress[i][j] = DPStress[i-1][j];
                if(i <= j-1)
                    DPStress[i][j] = (DPStress[i][j] % MODVAL + DPStress[i][j-1] % MODVAL) % MODVAL;
            }
        }
    }
    
    return DPStress[b][b];
}

int getStreeFreeValIterative(int a, int b)
{
    if(a <= b)              //should never happen
        return 0;
    
    if(a == 0 || b == 0)
        return DPFree[a][b];
    
    if(DPFree[a][b] != -1)
        return DPFree[a][b];
    
    for(int i = 1; i <= a; i++)
    {
        for(int j = 1; j < i && j <= b; j++)              //it will always be in the lower triangle
        {
            if(DPFree[i][j] == -1)
            {
                DPFree[i][j] = DPFree[i][j-1];
                if(i-1 > j)
                    DPFree[i][j] = (DPFree[i][j] % MODVAL + DPFree[i-1][j] % MODVAL) % MODVAL;
            }
        }
    }
    
    return DPFree[a][b];
}

int main(int argc, const char * argv[])
{
    int T = 0;
    int numCase = 0;
    
#if _DEBUGW
    T=1;
#else
    scanf("%d", &T);
#endif
    
    DPFree = new int*[N];
    for(int i = 0; i < N; i++)
    {
        DPFree[i] = new int[N];
    }
    DPStress = new int*[N];
    for(int i = 0; i < N; i++)
    {
        DPStress[i] = new int[N];
    }
    
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < N; j++)
        {
            DPFree[i][j] = -1;
            DPStress[i][j] = -1;
        }
    }
    
    DPFree[0][0] = 0;
    DPStress[0][0] = 0;
    
    for(int i = 1; i <  N; i++)
    {
        DPFree[0][i] = 0;
        DPFree[i][0] = 1;
        DPStress[0][i] = 1;
        DPStress[i][0] = 0;
    }
    
    while(T-- > 0)
    {
        numCase++;
        STRING str;
        
#if _DEBUGW
//        str = "2-1";
//        str = "3-1";
//        str = "3-2";
//        str = "10-5";
        str = "1000-500";
#else
        std::cin >> str;
#endif
        
        STRING myScore, oppScore;
        STRING::size_type index = str.find("-");
        myScore = str.substr(0, index);
        oppScore = str.substr(index+1);
        
        int mScore, oScore;
        mScore = atoi(myScore.c_str());
        oScore = atoi(oppScore.c_str());
        
        int stressFree = 0, stressedVal = 0;
        
        stressFree = getStreeFreeValIterative(mScore, oScore);
        stressedVal = getStressedValIterative(mScore, oScore);
        
        printf("Case #%d: %d %d\n", numCase, stressFree, stressedVal);
    }
    
    for(int i = 0; i < N; i++)
    {
        delete [] DPFree[i];
    }
    delete [] DPFree;
    for(int i = 0; i < N; i++)
    {
        delete [] DPStress[i];
    }
    delete [] DPStress;
    
    return 0;
}


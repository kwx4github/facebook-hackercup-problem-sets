using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace HackerRankHacks
{
    class FacebookRoundOneThird
    {
        static long mod = 1000000007;
        static long[,] stressfreecache;
        static long Stressfree(int myteam, int opp , int myfinal , int oppfinal)
        {
            if (myteam == myfinal || opp == oppfinal)
                return 1;
            if (stressfreecache[myteam, opp] > -1)
                return stressfreecache[myteam, opp];
            //who can win this round 
            long total = 0;
            total = (total + Stressfree(myteam + 1, opp, myfinal, oppfinal)) % mod;
            if (opp + 1 < myteam)
            {
                total = (total + Stressfree(myteam, opp + 1, myfinal, oppfinal)) % mod;
            }
            stressfreecache[myteam, opp] = total;
            return total;
        }

        static long[,] stresscache;
        static long Stress(int myteam, int opp, int myfinal, int oppfinal)
        {
            if (opp == oppfinal || myteam == myfinal)
                return 1;
            if (stresscache[myteam, opp] > -1)
                return stresscache[myteam, opp];
            //who can win this round 
            long total = 0;
            total = (total + Stress(myteam, opp + 1, myfinal, oppfinal)) % mod;
            if (myteam + 1 <= opp)
            {
                total = (total + Stress(myteam + 1, opp , myfinal, oppfinal)) % mod;
            }
            stresscache[myteam, opp] = total;
            return total;
        }

        static long BottomUpApproachStressFul(int myfinal, int oppfinal)
        {
            long[,] dp = new long[myfinal + 1, oppfinal + 1];
            for (int i = 0; i <= oppfinal; i++)
            {
                dp[0, i] = 1;
            }
            for (int i = 1; i <= myfinal; i++)
            {
                dp[i, 0] = 1;
            }

            for (int i = 1; i <= myfinal; i++)
            {
                for (int j = 1; j <= oppfinal; j++)
                {
                    //possible path
                    //if i wins
                    //if(i-1 <= j)
                        dp[i,j] =  (dp[i,j] + dp[i-1,j]) % mod;
                    if (j - 1 >= i)
                    {
                        dp[i, j] = (dp[i, j] + dp[i, j-1]) % mod;
                    }
                }
            }
            return dp[myfinal, oppfinal];
        }

        static long BottomUpApprachStreesFree(int myfinal, int oppfinal)
        {
            long[,] dp = new long[myfinal + 1, oppfinal + 1];
            for (int i = 0; i <= oppfinal; i++)
            {
                dp[0, i] = 0;
            }
            for (int i = 1; i <= myfinal; i++)
            {
                dp[i, 0] = 1;
            }

            for (int i = 1; i <= myfinal; i++)
            {
                for (int j = 1; j < Math.Min(i, oppfinal + 1); j++)
                {
                    //possible path to come here
                    //if i would have won
                    dp[i, j] = (dp[i, j - 1] % mod + dp[i - 1, j] % mod) % mod;
                }
            }
            return dp[myfinal, oppfinal];
        }
        static string inputFileName = "winning_at_sports.txt";
        static string outputFileName = "winning_at_sports_output.txt";
        static void Main()
        {
            string[] txt = File.ReadAllLines(inputFileName);
            int t = int.Parse(txt[0]);
            int lineNumber = 1;
            StringBuilder sb = new StringBuilder();
            int fileLineNumber = 1;
            while (t-- > 0)
            {
                sb.AppendFormat("Case #{0}: ", lineNumber++);
                string[] str = txt[fileLineNumber++].Trim().Split('-');
                int myteam = int.Parse(str[0]);
                int opp = int.Parse(str[1]);
                stresscache = new long[myteam + 1, opp + 1];
                stressfreecache = new long[myteam + 1, opp + 1];
                for (int i = 0; i <= myteam; i++)
                {
                    for (int j = 0; j <= opp; j++)
                    {
                        stresscache[i, j] = -1;
                        stressfreecache[i, j] = -1;
                    }
                }
                long ansOne = BottomUpApprachStreesFree(myteam, opp);//Stressfree(0, 0, myteam, opp);
                long anstwo = BottomUpApproachStressFul(myteam, opp);//Stress(0, 0, myteam, opp);
                //long ansOneBottomUp = BottomUpApprachStreesFree(myteam, opp);
                //long ansTwoBottomUp = BottomUpApproachStressFul(myteam, opp);
                
                sb.Append(ansOne + " " + anstwo);
                sb.AppendLine();
                //Console.ReadLine();
            }
            File.WriteAllText(outputFileName, sb.ToString());
            //Console.ReadLine();
        }
    }
}

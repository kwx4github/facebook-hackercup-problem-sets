# include <stdio.h>
# include <limits.h>
#include <cstdlib>
#include <iostream>
#include <list>
#include <vector>
 

using namespace std;
#include <math.h> 
#include <string>
#ifndef ONLINE_JUDGE
    #define getcx getchar
#else
    #define getcx getchar_unlocked
#endif
#define MOD 1000000007

#include <fstream>
 
 
inline int inp ()
{
   int n=0;
   int ch=getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
     if(ch=='-')
     {
        sign=-1;
     }
     ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
   return n; 
}


inline long long inpLong()
{
   long long n = 0;
   int ch = getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
       if(ch=='-')
       {
           sign=-1;
       }
       ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
   {
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   }
   n=n*sign;
   return n;
}


void calStreeFree();

void calStreeFull();

void sieve(long long number);

long long stress_free[2001][2001];

long long stress_full[2001][2001];

long long stress[2001];

int main()
{
	//ifstream fin ("homework_example_input.txt");
	
	ifstream fin ("winning_at_sports.txt");
	
	ofstream fout ("output_sports.txt");

	
	if (fin.is_open())
	{
		int T;
		
		string input;
		
		fin>>T;
	

    	for (int i=0; i<2001; i++)
    	{
    		for (int j=0; j<2001; j++)
    		{
    			stress_free[i][j] = 0;
    			stress_full[i][j] = 0;
    		}
    		stress[i] = 0;
    	}
    	
	    for (int i = 0; i<T; i++)
        {
        	fin>>input;
        	
        	int position = input.find('-') ;
			
			string M = input.substr(0, position);
			
			string C = input.substr(position+1);
			
			std::string test = "45";
		   // int myint = stoi(test);
		    //cout << atoi(test.c_str()) << endl;
		    
		    int win = atoi(M.c_str());
		    int lose = atoi(C.c_str());
		    
		    calStreeFree();
		    
		    calStreeFull();
		    
		    //cout<<stress_free[win][lose]<<" "<<stress_full[lose][lose] <<endl; 
			
			//cout<<atoi(M.c_str())<<" "<<atoi(C.c_str())<<endl;
			
			fout<<"Case #"<<(i+1)<<":"<<" "<<stress_free[win][lose]<<" "<<stress_full[lose][lose]<< endl;     
			
			//fout << "Case #" << t+1 << ": " << stress_free[win][lose]<< " " << matrix[oscore][oscore] << endl;
        }
    }
    
    else cout << "Unable to open file"; 
  
    fin.close();
    fout.close();
    
    cin.get();
	cin.ignore();
	return 0; 	
}


void calStreeFull()
{
//	for (int i=1; i<2001; i++)
//    {
//    	stress_full[i][0] = 1;
//    }
//    for (int i=2; i<2001; i++)
//    {
//    	stress_full[i][1] = 1;
//    }
//    for (int i=3; i<2001; i++)
//    {
//    	stress_full[i][2] = 2;
//    }
//    for (int i=4; i<2001; i++)
//    {
//    	stress_full[i][3] = 5;
//    }
//    stress[4] = 14;
//    for (int j=4; j<2000; j++)
//	{
//		long long ans1 = (j-1)*(j+2);
//		long long ans2 = ans1/2;
//		//long long ans3 = ans2 - 1;
//		long long ans4 = ans2%MOD + (2*stress_full[j][j-1])%MOD;
//			
//		for (int i=(j+1); i<2001; i++)
//		{
//			stress_full[i][j] = ans4%MOD;
//		}
//	}
//	
	for(int i=0; i<2001; i++) 
	{
		for(int j=i ;j<2001; j++) 
		{
			if (i==0) 
			{
				stress_full[i][j] = 1;
			}
			else if (i==j) 
			{
				stress_full[i][j] = stress_full[i-1][j];
			}
			else {
				stress_full[i][j] = (stress_full[i-1][j]+stress_full[i][j-1])%MOD;
			}
		}
	}
    
}

void calStreeFree()
{
	for (int i=1; i<2001; i++)
    {
    	stress_free[i][0] = 1;
    }
    
    for (int i=2; i<2001; i++)
	{
		for (int j=1; j<i; j++)
		{
			stress_free[i][j] = (stress_free[i-1][j] + stress_free[i][j-1])%MOD;
		}
	}
}


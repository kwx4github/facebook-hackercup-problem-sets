#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

const int MOD = 1e9 + 7;
int dp[2020][2020];
int dq[2020][2020];

bool check_stress_free(int i, int j) {
    if (i == 0 && j == 0)
        return true;
    return i > j;
}

bool check_stressful(int i, int j, int b) {
    if (i == 0 && j == 0)
        return true;
    return i <= j || j == b;
}

void solve() {
    int a, b;
    char tmp;

    cin >> a >> tmp >> b;

    // stress-free
    for (int i = 0; i <= a; i++) {
        for (int j = 0; j <= b; j++) {
            if (i == 0 && j == 0)
                dp[0][0] = 1;
            else {
                dp[i][j] = 0;
                if (i-1 >= 0 && check_stress_free(i-1, j))
                    dp[i][j] += dp[i-1][j];
                if (j-1 >= 0 && check_stress_free(i, j-1))
                    dp[i][j] += dp[i][j-1];
                dp[i][j] %= MOD;
            }
        }
    }

    // stressfull
    for (int i = 0; i <= a; i++) {
        for (int j = 0; j <= b; j++) {
            if (i == 0 && j == 0)
                dq[0][0] = 1;
            else {
                dq[i][j] = 0;
                if (i-1 >= 0 && check_stressful(i-1, j, b))
                    dq[i][j] += dq[i-1][j];
                if (j-1 >= 0 && check_stressful(i, j-1, b))
                    dq[i][j] += dq[i][j-1];
                dq[i][j] %= MOD;
            }
        }
    }


    cout << dp[a][b] << " " << dq[a][b] << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;
    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

#!/usr/bin/env python
import sys
from itertools import combinations


def read_integer():
    return int(sys.stdin.readline())


def num_combinations(n, r):
    """
    Calculates n! / r! / (n-r)!

    >>> num_combinations(52, 5)
    2598960

    """
    num = n
    for i in range(1, r):
        num *= n - i
        num /= i + 1
    return num


def solve():
    score = sys.stdin.readline().split("-")
    p, q = int(score[0]), int(score[1])
    assert p > q

    # In combinatorics, Bertrand's ballot problem is the question: "In an
    # election where candidate A receives p votes and candidate B receives q
    # votes with p > q, what is the probability that A will be strictly ahead
    # of B throughout the count?" The answer is (p - q) / (p + q)
    stressfree = (num_combinations(p + q - 1, p - 1) -
                  num_combinations(p + q - 1, p))

    # Note that the number of non-tie sequences with p+1 votes for A is equal
    # to the number of tie sequences with p votes for A.
    stressful = (num_combinations(q + q, q) -
                 num_combinations(q + q, q + 1))

    # Since these numbers may be very large, output them modulo 1,000,000,007.
    mod = 1000000007
    return stressfree % mod, stressful % mod




def main():
    T = read_integer()
    for case in range(1, T+1):
        stressfree, stressful = solve()
        print "Case #%d: %d %d" % (case, stressfree, stressful)


if __name__ == "__main__":
    main()

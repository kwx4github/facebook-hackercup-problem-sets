#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>
#include <functional>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;


ifstream ifs;
ofstream ofs;
string buf;

long long moduloInv(long long n){
    long long mult = n;
    long long exponent = 1000000005;
    long long result = 1;
    while(exponent > 0){
        if(exponent % 2 == 0){
            exponent /= 2;
            mult = (mult * mult) % 1000000007;
        }
        else{
            result = (result * mult) % 1000000007;
            exponent /= 2;
            mult = (mult * mult) % 1000000007;
        }
    }
    return result;
}

long long moduloFactorial(long long n){
    long long result = 1;
    for(long long i = 1; i <= n; i++){
        result = (result * i) % 1000000007;
    }
    return result;
}

long long moduloCombination(long long m, long long n){
    long long result = moduloFactorial(m);
    result = (result * moduloInv(moduloFactorial(n))) % 1000000007;
    result = (result * moduloInv(moduloFactorial(m - n))) % 1000000007;
    return result;
}

int main(int argc, char **argv){
    ifs.open("winning_at_sports.txt");
    ofs.open("P3_output.txt");

    
	getline(ifs, buf);
	int T = atoi(buf.c_str());

	rep(i, T){
        ofs << "Case #" << i + 1 << ": ";

        getline(ifs, buf, '-');
        int yourScore = atoi(buf.c_str());
        getline(ifs, buf);
        int opponentScore = atoi(buf.c_str());

        if(yourScore <= opponentScore){
            ofs << 0 << " " << 0 << endl;
            continue;
        }
        
        long long numOfStressFree = (moduloCombination(yourScore - 1 + opponentScore, opponentScore)
                                - moduloCombination(yourScore + opponentScore - 1, yourScore) + 1000000007) % 1000000007;
        
        
        
        long long numOfStressful = (moduloCombination(2 * opponentScore, opponentScore)
                                - moduloCombination(2 * opponentScore, opponentScore - 1) + 1000000007) % 1000000007;

        if(yourScore == 1 && opponentScore == 0){
            numOfStressFree = 1;
            numOfStressful = 1;
        }
        
        ofs << numOfStressFree << " " << numOfStressful << endl;
	}
	

    ifs.close();
    ofs.close();
    return 0;
}

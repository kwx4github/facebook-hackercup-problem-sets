#include <bits/stdc++.h>
using namespace std;
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define FORI(i,n) REP(i,1,n)
#define FOR(i,n) REP(i,0,int(n)-1)
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define vi vector<int>
#define ll long long
#define SZ(x) int((x).size())
#define DBG(v) cerr << #v << " = " << (v) << endl;
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define SORT(X) sort(X.begin(),X.end())
#define fi first
#define se second

char maze[4][102][102];

char rotate(char a){
	if(a == '^') return '>';
	if(a == '>') return 'v';
	if(a == 'v') return '<';
	if(a == '<') return '^';
	if(a == '.') return '.';
	if(a == '#') return '#';
	assert(0);
}

void lasers(int a,int n,int m){
	FORI(i,n) FORI(j,m) {
		if(maze[a][i][j] == '^'){
			maze[a][i][j] = '#';
			int mx = i-1;
			int my = j;
			while(maze[a][mx][my] == '.' || maze[a][mx][my] == '*'){
				maze[a][mx--][my] = '*';
			}
		}
		if(maze[a][i][j] == '>'){
			maze[a][i][j] = '#';
			int mx = i;
			int my = j+1;
			while(maze[a][mx][my] == '.' || maze[a][mx][my] == '*'){
				maze[a][mx][my++] = '*';
			}
		}
		if(maze[a][i][j] == 'v'){
			maze[a][i][j] = '#';
			int mx = i+1;
			int my = j;
			while(maze[a][mx][my] == '.' || maze[a][mx][my] == '*'){
				maze[a][mx++][my] = '*';
			}
		}
		if(maze[a][i][j] == '<'){
			maze[a][i][j] = '#';
			int mx = i;
			int my = j-1;
			while(maze[a][mx][my] == '.' || maze[a][mx][my] == '*'){
				maze[a][mx][my--] = '*';
			}
		}
	}
	FORI(i,n) FORI(j,m) if(maze[a][i][j] == '*') maze[a][i][j] = '#';
}

int dist[4][111][111];

priority_queue<tuple<int,int,int>> Q;

int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};

void test(){
	int n,m;
	scanf("%d%d",&n,&m);
	FOR(q,4){
	FOR(i,n+2) maze[q][i][0] = '#';
	FOR(i,n+2) maze[q][i][m+1] = '#';
	FOR(i,m+2) maze[q][0][i] = '#';
	FOR(i,m+2) maze[q][n+1][i] = '#';
	}
	int sx=0,sy=0;
	int gx=0,gy=0;
	
	FOR(q,4) FORI(i,n) FORI(j,m) dist[q][i][j] = 100000000;
	
	FORI(i,n) FORI(j,m){
		scanf(" %c",&maze[0][i][j]);
		if(maze[0][i][j] == 'S'){
			maze[0][i][j]='.';
			sx = i;
			sy = j;
		}
		if(maze[0][i][j] == 'G'){
			maze[0][i][j]='.';
			gx = i;
			gy = j;
		}
	}
	
	dist[0][sx][sy] = 0;
	
	FORI(q,3) FORI(i,n) FORI(j,m) maze[q][i][j] = rotate(maze[q-1][i][j]);
	FOR(q,4) lasers(q,n,m);
	
	Q.emplace(0,sx,sy);
	
	while(!Q.empty()){
		int x,y,k;
		tie(k,x,y) = Q.top();
		k = -k;
		Q.pop();
		if(dist[k%4][x][y] < k) continue;
		FOR(i,4) {
			if(maze[(k+1)%4][x+dx[i]][y+dy[i]] == '#') continue;
			if(dist[(k+1)%4][x+dx[i]][y+dy[i]] > k+1){
				dist[(k+1)%4][x+dx[i]][y+dy[i]] = k+1;
				Q.emplace(-k-1,x+dx[i],y+dy[i]);
			}
		}
	}
	
	int ans = 100000000;
	
	FOR(i,4) ans = min(ans,dist[i][gx][gy]);
	
	if(ans  == 100000000) printf("impossible\n");
	else printf("%d\n", ans);
	
}

int main () {
	int t;
	scanf("%d",&t);
	FORI(i,t){
		printf("Case #%d: ",i);
		test();
	}
}

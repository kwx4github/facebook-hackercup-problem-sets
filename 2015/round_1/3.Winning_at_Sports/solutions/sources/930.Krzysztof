
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) (int) (c).size()
#define FOREACH(i,c) FOR(i,0,SIZE(c)-1)
#define FORDEACH(i,c) FORD(i,SIZE(c)-1,0)
#define MIN(x,y) ( ((x) < (y))? (x) : (y) )
#define MAX(x,y) ( ((x) > (y))? (x) : (y) )
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define INF 1000000001

#define MOD 1000000007
#define M 2002

using namespace std;

typedef pair < int , int > PII;
typedef long long int LLI;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;

LLI sfull[M][M],
    sfree[M][M];

int toint(string &s)
{
    int ans = 0;

    FOREACH(i,s)
    {
        ans *= 10;
        ans += (s[i] - '0');
    }

    return ans;
}

/*************************************************************************/

int main()
{
    ios_base::sync_with_stdio(0);

    sfree[1][0] = sfree[0][0] = sfull[0][0] = 1;

    FOR(i,0,M-1) FOR(j,0,M-1)
    {
        if (i > j)
        {
            if (j)
                sfree[i][j] += sfree[i][j-1];

            if (i > j+1)
                sfree[i][j] += sfree[i-1][j];

            sfull[i][j] = sfull[i-1][j];
        }
        else
        {
            if (i)
                sfull[i][j] += sfull[i-1][j];

            if (i < j)
                sfull[i][j] += sfull[i][j-1];
        }

        sfree[i][j] %= MOD;
        sfull[i][j] %= MOD;
    }

    int t;
    cin >> t;

    FOR(test,1,t)
    {
        string s;
        cin >> s;

        int it = 0;
        while (s[it] != '-') it++;

        string a = s.substr(0,it),
               b = s.substr(it + 1);

        int ia = toint(a), ib = toint(b);

        cout << "Case #" << test << ": " << sfree[ia][ib] << ' ' << sfull[ia][ib] << '\n';
    }

    return 0;
}

/*************************************************************************/

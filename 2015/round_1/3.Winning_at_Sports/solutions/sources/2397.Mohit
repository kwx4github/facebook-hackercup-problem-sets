/*mohitmangnani*/
#include<bits/stdc++.h>

#define ll long long int
#define pb push_back
#define mp make_pair
#define s(x) scanf("%lld", &x)
#define SET(x, a) memset(x, a, sizeof(x));
#define trace(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define mod (1e9 + 7)

using namespace std;

ll power(ll x, ll n) {
	if (n == 0) {
		return 1;
	}
	ll temp = power(x,n/2);

	if (n & 1) {
		return ((((temp * temp) % (ll)mod) * x) % (ll)mod);
	} else {
		return ((temp * temp) %(ll)mod);
	}
}

ll factorial(ll n) {
	ll ans = 1;

	for (int i = 2; i <= n; i++) {
		ans = (ans * i) % (ll)mod;
	}

	return ans;
}

ll fermat(ll n) {
	return power(n,(ll)mod - 2);
}

ll ways[2001][2001];

ll stressful(ll a, ll b, ll s, ll e) {
	if ((s == a) && (e == b)) {
		return (ways[s][e] = 1);
	} else if (e == b) {
		return (ways[s][e] = 1);
	} else if (s == a) {
		return (ways[s][e] = 1);
	} else if (ways[s][e] == -1) {
		ll cnt1 = 0,cnt2 = 0;

		if (((s + 1) <= a) && ((s + 1) <= e)) {
			cnt1 = stressful(a,b,s+1,e);
		}
		if ((e + 1) <= b) {
			cnt2 = stressful(a,b,s,e + 1);
		}
		return (ways[s][e] = (cnt1 + cnt2) % (ll)mod);
	} else {
		return (ways[s][e]);
	}
}
int main()
{
	ll test;
	s(test);

	for (int t =1; t <= test; t++) {
		ll a,b;
		char c;
		cin >> a >> c >> b;
		ll stressfree,sum,diff,numera,deno,x,y,inv,pro,inv1;
		sum = a + b; diff = a - b;
		numera = factorial(sum);
		deno = (factorial(a) * factorial(b)) % (ll)mod;
		inv = fermat(deno);
		pro = (numera * inv) % (ll)mod;
		inv = fermat(sum);
		inv1 = (diff * inv) % (ll)mod;
		stressfree = (inv1 * pro);
		stressfree %= (ll)mod;
		SET(ways, -1);
		ll ans;
		if (b == 0) {
			ans = 1;
		} else {
			ans = stressful(a,b,0,1);
		}

		cout << "Case #" << t << ": " << stressfree << " " << ans << endl;
	}

	return 0;
}

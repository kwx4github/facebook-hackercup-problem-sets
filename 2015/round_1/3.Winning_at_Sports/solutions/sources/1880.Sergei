require 'benchmark'

#Output two space-separated integers, the number of ways you can achieve a stress-free or stressful win, respectively. Since these numbers may be very large, output them modulo 1,000,000,007. 

MODULO = 1_000_000_007
MULT = 10_000

def stressful(a, b)
  #In a stressful victory, you never have more points than your opponent until after their score is equal to their final score. 
  return 1 if b >= @scoreB or a >= @scoreA

  return @s[a*MULT+b] if @s[a*MULT+b]

  res = 0
  
    res += stressful(a+1, b) % MODULO if a+1 <= b or b == @scoreB 
    res += stressful(a, b+1) % MODULO 
    res %= MODULO

  @s[a*MULT+b] = res
  return res
end

def stressfree(a, b)
  #In a stress-free victory, you score the first point and from then on you always have more points than your opponent.
  return 1 if b >= @scoreB or a >= @scoreA
  return @f[a*MULT+b] if @f[a*MULT+b]

  res = 0
  
    res += stressfree(a+1, b) % MODULO
    res += stressfree(a, b+1) % MODULO if b+1 < a or a == @scoreA 
    res %= MODULO

  @f[a*MULT+b] = res
end

def howmanyways(a, b)

end

def solve(str)
    # divide and conquer approach?
    # "I" must win the last point in stressful victory

    @scoreA,@scoreB = @input.readline.strip.split(/-/).map(&:to_i)

    #caches
    @s = {} #Array.new(20000000, nil)
    @f = {} #Array.new(20000000, nil)

    $stderr.puts "#{@scoreA}---#{@scoreB}"

    stful = stressful(0, 1)   #stress, opponents score
    stfree = stressfree(1, 0) #free, score first

    #$stderr.puts(@s)
    #$stderr.puts(@f)

    return "#{stfree} #{stful}"
end

def precalc
  # @scoreA = 1002
  # @scoreB = 1001
  #   @s = {} #Array.new(20000000, nil)
  #   @f = {} #Array.new(20000000, nil)
  # stressful(0, 1)
  # @ss = @s.dup
  # stressfree(1, 0)
  # @ff = @f.dup

  # @s.each_pair do |k,v|
  #   $stderr.puts("#{k} : #{v}") if v == 70047606 or v == 319838403 or v == 1001
  # end

  # @fact = Array.new(2001, 1)
  # @fib = [0,1,1]
  # 1.upto(2000) do |i|
  #   @fact[i] = i*@fact[i-1]
  # end

  # 3.upto(2000) do |i|
  #   @fib.push(@fib[i-1]+@fib[i-2])
  # end
end

time = Benchmark.measure do
  @input=File.open(ARGV[0] || "input", 'r')
  total = @input.readline.to_i
  precalc()
  (1..total).each do |i|
    t = Benchmark.realtime do
      res = solve("#{i}")
      out = 'Case #' + "#{i}: #{res}"
      puts out
      $stderr.puts "----->: #{out}"
    end
    $stderr.puts "#{(t*1000).ceil} ms"
  end
  @input.close
end

$stderr.puts "*TIME: #{time}"
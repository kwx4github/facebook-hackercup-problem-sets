import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.util.InputMismatchException;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("winning.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("winningatsports.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		WinningAtSports solver = new WinningAtSports();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class WinningAtSports {

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int mod = 1000000007;
        String s = in.readString();
        String[] ss = s.split("-");
        int a = Integer.parseInt(ss[0]);
        int b = Integer.parseInt(ss[1]);

        out.printf("Case #%d: ", testNumber);
        // Stress-free
        {
            int[][] dp = new int[a + 1][b + 1];
            dp[0][0] = 1;
            for (int i = 1; i <= a; ++i) {
                for (int j = 0; j <= b; ++j) {
                    if (j > 0 && j <= i) {
                        dp[i][j] = (dp[i][j] + dp[i][j - 1]) % mod;
                    }
                    if (i - 1 > j || (j == 0 && i == 1)) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j]) % mod;
                    }
                }
            }
            out.printf("%d ", dp[a][b]);
        }
        // Stress-full
        {
            int[][] dp = new int[a + 1][b + 1];
            for (int i = 0; i <= a; ++i) {
                for (int j = 0; j <= b; ++j) {
                    if (i == 0 && j == 0) {
                        dp[i][j] = 1;
                    } else if (j == b || (j >= i)) {
                        if (j - 1 >= i) {
                            dp[i][j] = (dp[i][j] + dp[i][j - 1]) % mod;
                        }
                        if (i > 0) {
                            dp[i][j] = (dp[i][j] + dp[i - 1][j]) % mod;
                        }
                    }
                }
            }
            out.printf("%d\n", dp[a][b]);
        }
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        // InputMismatchException -> UnknownError
        if (numChars == -1)
            throw new UnknownError();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new UnknownError();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next() {
        return readString();
    }

}


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;

import javax.swing.border.Border;

public class a {

	public static long mod = (long) Math.pow(10, 9) + 7;
	public static int k = 0;

	private static class node {
		long num;
		int k;
		int index;

		node(long m, int k, int index) {
			num = m;
			this.k = k;
			this.index = index;
		}

	}

	public static class point implements Comparable<point> {
		long x;
		long y;
		long b;

		point(long x, long y, long b) {
			this.x = x;
			this.y = y;
			this.b = b;
		}

		@Override
		public int compareTo(point o) {
			if (k == 0)
				return (int) (o.x - x);
			else
				return (int) (y - o.y);

		}
	}

	public static int ch(long y) {
		int r = Long.bitCount(y);
		return r;
	}

	public static long gcd(long x, long y) {
		if (y == 0)
			return x;

		return gcd(y, x % y);
	}

	public static boolean ch[] = new boolean[10000005];
	public static ArrayList<Integer> prime = new ArrayList();

	// public static Queue<Integer> pp;

	public static void sieve(int k) {
		ch[0] = ch[1] = true;

		for (int i = 2; i <= k; i++) {
			if (!ch[i]) {
				prime.add(i);
				// pp.add(i);
				for (long j = (long) i * (long) i; j <= k; j += i) {
					ch[(int) j] = true;
				}
			}
		}

	}

	public static long pw(int x, int power, int mod) {
		if (power == 1)
			return x % mod;
		else if (power % 2 == 0)
			return pw((x % mod * x % mod) % mod, power / 2, mod);
		else
			return (pw(x, power - 1, mod) % mod * x % mod) % mod;

	}

	public static long dp[][];
	public static int A;
	public static int B;

	public static long solve(int a, int b) {
		if (a == 0 || b == 0)
			return 1;

		if (dp[a][b] != -1)
			return dp[a][b] % mod;
		long one = 0;
		long two = 0;

		if (a > b + 1) {
			one = solve(a - 1, b)%mod;
		}
		if (a > b - 1) {
			two = solve(a, b - 1)%mod;
		}

		return dp[a][b] = (one % mod + two % mod) % mod;

	}

	public static long solve2(int a, int b) {
		if (a == A || b == B) {
			return 1%mod;
		}

		if (dp[a][b] != -1)
			return dp[a][b] % mod;
		long one = 0;
		long two = 0;

		if (b + 1 > a)
			one = solve2(a, b + 1)%mod;
		if (a + 1 <= b)
			two = solve2(a + 1, b)%mod;

		return dp[a][b] = (one % mod + two % mod) % mod;

	}

	public static void main(String[] args) throws IOException {
		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 BufferedReader in = new BufferedReader(new
		 FileReader("winning_at_sports.txt"));
		StringBuilder qq = new StringBuilder();
		//PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		 PrintWriter out = new PrintWriter(new FileWriter("out.txt"));
		sieve(10000000);

		int t = Integer.parseInt(in.readLine());
		for (int i = 1; i <= t; i++) {
			out.print("Case #" + i + ": ");
			String y[] = in.readLine().split("-");
			A = Integer.parseInt(y[0]);
			B = Integer.parseInt(y[1]);
			dp = new long[A + 2][B + 2];
			for (int j = 0; j <= A; j++) {
				for (int j2 = 0; j2 <= B; j2++) {
					dp[j][j2] = -1;
				}
			}
			out.print(solve(A, B) % mod + " ");

			for (int j = 0; j <= A; j++) {
				for (int j2 = 0; j2 <= B; j2++) {
					dp[j][j2] = -1;
				}
			}
			out.println(solve2(0, 0) % mod);
		}
		out.close();

	}
}

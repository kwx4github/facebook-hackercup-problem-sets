#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>

using namespace std;

#define MOD 1000000007;

int main(){
	int T;
	cin >> T;
	const int offset = 4000;
	for(int t=0; t<T; t++){
		int x,y;
		scanf("%d-%d", &x, &y);
		
		vector<vector<long long>> dp(2, vector<long long>(offset*2, 0));
		dp[1][1+offset] = 1;
		int sum = x+y;
		for(int i=1; i<sum; ++i){
			int pos = i%2;
			int next = (i+1)%2;
			
			fill(dp[next].begin(), dp[next].end(), 0);
			
			for(int diff = 1; diff<=x; diff++){
				if( diff+1>0 ){
					dp[next][diff+1 +offset] += dp[pos][diff +offset];
					dp[next][diff+1 +offset] %= MOD;
				}
				if( diff-1>0 ){
					dp[next][diff-1 +offset] += dp[pos][diff +offset];
					dp[next][diff-1 +offset] %= MOD;
				}
			}
		}

		long long ans_left = dp[sum%2][x-y+offset] % MOD;

		
		fill(dp[0].begin(), dp[0].end(), 0);
		fill(dp[1].begin(), dp[1].end(), 0);
		
		dp[1][-1+offset] = 1;
		for(int i=1; i<sum; ++i){
			int pos = i%2;
			int next = (i+1)%2;
			
			fill(dp[next].begin(), dp[next].end(), 0);
			
			for(int diff = -y; diff<=x; diff++){
				int rem = (diff - i + 2*y)/2;
				if( rem == 0 ){
					
					dp[next][diff+1 +offset] += dp[pos][diff +offset];
					dp[next][diff+1 +offset] %= MOD;
					
					dp[next][diff-1 +offset] += dp[pos][diff +offset];
					dp[next][diff-1 +offset] %= MOD;
					
				}else{
					//rem > 0
					if(diff-1 <= 0){
						dp[next][diff-1 +offset] += dp[pos][diff +offset];
						dp[next][diff-1 +offset] %= MOD;
					}
					if(diff+1 <= 0){
						dp[next][diff+1 +offset] += dp[pos][diff +offset];
						dp[next][diff+1 +offset] %= MOD;
					}
					
				}
					
			}
		}
		
		long long ans_right = dp[sum%2][x-y+offset] % MOD;
		
		cout << "Case #" << t+1 << ": " << ans_left << " " << ans_right << endl;
	}
	return 0;
}
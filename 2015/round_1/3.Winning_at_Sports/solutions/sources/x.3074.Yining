#include <set>
#include <map>
#include <queue>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <cctype>
#include <algorithm>

#define eps 1e-10
#define pi acos(-1.0)
#define inf 107374182
#define inf64 1152921504606846976
#define lc l,m,tr<<1
#define rc m + 1,r,tr<<1|1
#define zero(a) fabs(a)<eps
#define iabs(x)  ((x) > 0 ? (x) : -(x))
#define clear1(A, X, SIZE) memset(A, X, sizeof(A[0]) * (min(SIZE,sizeof(A))))
#define clearall(A, X) memset(A, X, sizeof(A))
#define memcopy1(A , X, SIZE) memcpy(A , X ,sizeof(X[0])*(SIZE))
#define memcopyall(A, X) memcpy(A , X ,sizeof(X))
#define max( x, y )  ( ((x) > (y)) ? (x) : (y) )
#define min( x, y )  ( ((x) < (y)) ? (x) : (y) )
using namespace std;

int map1[2005][2005];
int map2[2005][2005];
const int mod = 1000000007;
int main()
{
    //freopen("data.in","r",stdin);
    //freopen("data.txt","w",stdout);
    for(int i=1;i<=2000;i++)
    {
        map1[i][0]=1;
        map2[0][i]=1;
    }
    for(int i=1;i<=2000;i++)
    {
        for(int j=1;j<=2000;j++)
        {
            if(i!=j)map1[i][j]=map1[i][j-1];
            map1[i][j]+=map1[i-1][j];
            map2[i][j]=map2[i-1][j];
            if(i<j)map2[i][j]+=map2[i][j-1];
            map1[i][j]%=mod;
            map2[i][j]%=mod;
        }
    }
    int t,case1=1;
    while(scanf("%d",&t)!=EOF)
    {
        while(t--)
        {
            int a,b;
            scanf("%d-%d",&a,&b);
            printf("Case #%d: %d %d\n",case1++,map1[a][b],map2[a][b]);
        }
    }
    return 0;
}

#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() { start = clock(); }
  ~TimeTracker() { end = clock(); fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC); }
};

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define mt make_tuple
#define loop(i, begin, end) for(__typeof(end) i=(begin)-((begin)>(end)); i!=(end)-((begin)>(end)); i+=1-2*((begin)>(end)))
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define db(args...) { vector<string> _v = split(#args, ','); debug_fn(_v.begin(), args); }
#define dbp(p) cerr << #p << " = " << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " \n"[__I==(N-1)];
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " \n"[__J==(M-1)]; }
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl;
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl;

vector<string> split(const string& s, char c) 
{
  vector<string> v; stringstream ss(s); string x;
  while (getline(ss, x, c)) v.push_back(x);
  return v;
}

void debug_fn(vector<string>::iterator it) {}
template<typename T, typename... Args>
void debug_fn(vector<string>::iterator it, T a, Args... args) 
{
  cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
  debug_fn(++it, args...);
}

# define getcx getchar_unlocked

void inp() {}
template <typename T, typename... Args>
void inp(T& n, Args&... args)//fast input function
{
  int ch=getcx(), sign=1; n=0;
  while( ch < '0' || ch > '9' ) { if(ch=='-')sign=-1; ch=getcx(); }
  while( ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign; inp(args...);
}

void oup() {}
template <typename T, typename... Args>
void oup(T x, Args... args)
{ 
  if(x<0){ putchar('-'); x=-x; } int len=0,data[25];
  while(x) { data[len++]=x%10; x/=10; } if(!len) data[len++]=0;
  while(len--) putchar(data[len]+48); putchar('\n'); oup(args...);
}

lli stressfree[2010][2010];
lli stressfull[2010][2010];

lli sfree(lli a, lli b)
{ 
  if(stressfree[a][b] != -1) return stressfree[a][b];
  if(a == 1 && b == 0) return stressfree[a][b] = 1;
  if(a == b+1) return stressfree[a][b] = sfree(a, b-1);
  return stressfree[a][b] = (sfree(a, b-1) + sfree(a-1, b));
}


lli sfull(lli a, lli b)
{
  if(stressfull[a][b] != -1) return stressfull[a][b];
  if(a == 0 && b == 1) return stressfull[a][b] = 1;
  if(a >= b || b == (a+1)) return stressfull[a][b] = sfull(a-1, b);
  return stressfull[a][b] = (sfull(a, b-1) + sfull(a-1, b));
}

#define MOD 1000000007

int main()
{
  // make_it_fast
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  int t, tc; inp(t);
  lli a, b, i, j;
  memset(stressfree, 0, sizeof stressfree);
  memset(stressfull, 0, sizeof stressfull);
  
  rep(i, 2010)
    rep(j, 2010)
    {
      if(i > j)
      {
        if(i == 1 && j == 0) {
          stressfree[i][j] = 1;
        }
        if(i+1 < 2010) { stressfree[i+1][j] += stressfree[i][j]; stressfree[i+1][j] %= MOD; }
        if(i > j+1) { stressfree[i][j+1] += stressfree[i][j]; stressfree[i][j+1] %= MOD; }
      }
    }

  rep(i, 2010)
    rep(j, 2010)
    {
      if(j == 0 && i != 0) 
      {
        stressfull[i][j] = 1;
        continue;
      } else if(j == 1 && i == 0) {
        stressfull[i][j] = 1;
      }
      if(i+1 < 2010) { stressfull[i+1][j] += stressfull[i][j]; stressfull[i+1][j] %= MOD; }
      if(i <= j) { stressfull[i][j+1] += stressfull[i][j]; stressfull[i][j+1] %= MOD; }
    }

  for(tc = 1; tc <= t; tc++)
  {
    printf("Case #%d: ", tc);
    inp(a); 
    // char c = getchar(); 
    inp(b); 
    // db(a,b);
    printf("%lld %lld\n", stressfree[a][b], stressfull[a][b]);
  }
  return 0;
}
//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int t;

int a, b;
int n;

int f[4005][2005];
int g[4005][2005];

int res;

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    scanf("%d", &t);
    for (int i = 1; i <= t; ++i) {
        scanf("%d-%d", &a, &b);
        n = a + b;
        memset(f, 0, sizeof f);
        memset(g, 0, sizeof g);
        f[0][0] = 1;
        g[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= a; ++j) {
                if (j > 0 && i - j <= b && i - j < j && (i - j < j - 1 || (i == 1 && j - 1 == 0))) {
                    f[i][j] = (f[i][j] + f[i - 1][j - 1]) % mod;
                }
                if (i - j - 1 < j)
                    f[i][j] = (f[i][j] + f[i - 1][j]) % mod;
            }
        }
        for (int i = 1; i <= b + b; ++i) {
            for (int j = 0; j <= a; ++j) {
                if (j > 0 && i - j <= b && i - j >= j) {
                    g[i][j] = (g[i][j] + g[i - 1][j - 1]) % mod;
                }
                g[i][j] = (g[i][j] + g[i - 1][j]) % mod;
            }
        }
        printf("Case #%d: %d %d\n", i, f[n][a], g[b + b][b]);
    }
    return 0;
}

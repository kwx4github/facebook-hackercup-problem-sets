#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime> 
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define vi vector<int>
#define all(v) (v).begin(), (v).end()
#define sz(v) (int)(v).size()
#define forit(it,v) for (__typeof(v.begin()) it = v.begin(); it != v.end(); ++it)
#define f0(a) memset(a, 0, sizeof(a))
#define ll long long
#define deb(x) cerr <<__LINE__ <<":"<< #x << "=" << x << endl
const int mod = (int)1e9 + 7;
int A, B;
int dp[2010][2010];
void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}
int stree_free() {
	memset(dp, 0, sizeof(dp));
	dp[1][0] = 1;
	for (int a = 0; a <= A; ++a)
		for (int b = 0; b < a; ++b) {
			if (a + 1 > b) add(dp[a + 1][b], dp[a][b]);
			if (a > b + 1) add(dp[a][b + 1], dp[a][b]);
		}
	return dp[A][B];
}
int streefull() {
	memset(dp, 0, sizeof(dp));
	dp[0][0] = 1;
	for (int a = 0; a <= A; ++a)
		for (int b = 0; b <= B; ++b) {
			if (a + 1 <= b || b == B) 
				add(dp[a + 1][b], dp[a][b]);
			if (a <= b + 1 || a == A) 
				add(dp[a][b + 1], dp[a][b]);
		}
	return dp[A][B];
}
void Solve() {
	scanf("\n%d-%d", &A, &B);
	printf("%d ", stree_free());
	printf("%d\n", streefull());
}
int main() {
	int tests;
	scanf("%d", &tests);
	for (int test = 1; test <= tests; ++test) {
		printf("Case #%d: ", test);
		Solve();
	}
	return 0;
}


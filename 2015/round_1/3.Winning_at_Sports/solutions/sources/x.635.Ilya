#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 2000 + 13;
int n, m;

inline bool read()
{
	if (scanf ("%d-%d", &n, &m) != 2)
		return false;

	return true;
}

const int MOD = 1000 * 1000 * 1000 + 7;
int d[N][N];

inline int norm (int val)
{
	if (val >= MOD)
		val -= MOD;
		
	return val;
}

inline int calc1 ()
{
	forn (i, n + 1)
		forn (j, m + 1)
			d[i][j] = 0;
			
	d[1][0] = 1;
	
	forn (i, n + 1)
		forn (j, m + 1)
		{
			int dv = d[i][j];
			
			if (dv == 0)
				continue;
				
			d[i + 1][j] = norm(d[i + 1][j] + dv);
			
			if (j + 1 != i)
				d[i][j + 1] = norm(d[i][j + 1] + dv);
		}
		
	return d[n][m];
}

inline int calc2 ()
{
	forn (i, n + 1)
		forn (j, m + 1)
			d[i][j] = 0;
			
	d[0][1] = 1;
	
	forn (i, n)
		forn (j, m + 1)
		{
			int dv = d[i][j];
			
			if (dv == 0)
				continue;

			if (j == m)
			{
				d[i + 1][j] = norm(d[i + 1][j] + dv);
				continue;
			}

			if (i + 1 <= j)
				d[i + 1][j] = norm(d[i + 1][j] + dv);

			d[i][j + 1] = norm(d[i][j + 1] + dv);	
		}
		
	return d[n][m];
}

inline void solve()
{
	printf ("%d %d\n", calc1(), calc2());
}

int main()
{
#ifdef SU2_PROJ
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);
	
	forn (test, testCnt)
	{
		assert(read());
		printf ("Case #%d: ", test + 1);
		solve();
	}
	
#ifdef SU2_PROJ
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

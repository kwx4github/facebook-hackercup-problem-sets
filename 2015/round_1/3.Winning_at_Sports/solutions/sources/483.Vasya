#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>
#include <map>

using namespace std;

int mod = 1e9+7;

int mp1[2222][2222], mp2[2222][2222];

int f1(int n, int m) {
    if (n < 0 || m < 0) return 0;
    if (n == 0 && m == 0) return 1;
    if (n <= m) return 0;
    if (mp1[n][m] != -1)
        return mp1[n][m];
    return mp1[n][m] = (f1(n-1, m) + f1(n, m-1))%mod;
}
int M;
int f2(int n, int m) {
    if (n < 0 || m < 0) return 0;
    if (n == 0 && m == 0) return 1;
    if (n > m && m != M) return 0;
    if (mp2[n][m] != -1)
        return mp2[n][m];
    return mp2[n][m] = (f2(n-1, m) + f2(n, m-1))%mod;
}

int main() {
    ios::sync_with_stdio(0);
    freopen("input.txt","r",stdin);freopen("output.txt", "w", stdout);
    
    int t;
    cin >> t;
    for(int T = 1; T <= t; ++T) {
        string s;
        cin >> s;
        int n = 0, m = 0, i = 0;
        while (s[i] != '-') {
            n = 10 * n + (s[i]-'0');
            i++;
        }
        ++i;
        while (i < s.size()) {
            m = 10 * m + (s[i]-'0');
            ++i;
        }
        M = m;
        
        cout << "Case #" << T << ": ";
        for(int i = 0; i <= 2000; ++i)
            for(int j = 0; j <= 2000; ++j)
                mp1[i][j] = mp2[i][j] = -1;
        cout << f1(n, m) << " " << f2(n, m) << "\n";
    }
    
    return 0;
}
//#define __test__aTest__
#ifndef __test__aTest__

#include <vector>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <assert.h>
#include <stdexcept>
#include <string>


using namespace std;

#define ll long long
#define ull size_t

int N;

const ll MOD = 1000000007LL;

ll sfree[4005][2005];
ll sful[4005][2005];

int self, opp;

void process(int index) {
    printf("Case #%d: ", index);
    //scanf("%d", &N);
    memset(sfree, 0, sizeof(sfree));
    memset(sful, 0, sizeof(sful));
    string s;
    cin >> s;
    size_t pos = s.find('-');
    self = atoi(s.substr(0, pos).c_str());
    opp = atoi(s.substr(pos + 1).c_str());
    sfree[1][1] = 1;
    for (int total = 2; total <= self + opp; ++total) {
        for (int i = 1; i <= total; ++i) {
            int j = total - i;
            if (i > j) {
                if (i <= total - 1) {
                    sfree[total][i] = (sfree[total][i] + sfree[total - 1][i]) % MOD;
                }
                sfree[total][i] = (sfree[total][i] + sfree[total - 1][i - 1]) % MOD;
            }
        }
    }
    
    sful[0][0] = 1;
    for (int total = 1; total <= self + opp; ++total) {
        for (int i = 0; i <= total; ++i) {
            int j = total - i;
            if (j < opp) {
                // win.
                if (i > 0 && i <= j) {
                    sful[total][i] = (sful[total][i] + sful[total - 1][i - 1]) % MOD;
                }
                // lose
                sful[total][i] = (sful[total][i] + sful[total - 1][i]) % MOD;
            } else {
                // win.
                if (i > 0) {
                    sful[total][i] = (sful[total][i] + sful[total - 1][i - 1]) % MOD;
                }
                // lose
                sful[total][i] = (sful[total][i] + sful[total - 1][i]) % MOD;
            }
        }
    }
    
    cout<< sfree[self + opp][self] << " " << sful[self + opp][self] <<endl;
    //printf("%.9f\n", 0.0);
    fflush(stdout);
}

int main() {
    
    freopen("/Users/zishirs/Documents/workspace/test/test/test.txt", "r", stdin);
    freopen("/Users/zishirs/Documents/workspace/test/test/output.txt", "w", stdout);
    
    int T;
    scanf("%d", &T);
    for (int index = 1; index <= T; ++index) {
        process(index);
    }
    
    
    /*
    int n;
    vector<int> v;
    while (cin >> n) {
        v.push_back(n);
    }
    vector<int> v1(v.begin(), v.begin() + v.size()/2), v2(v.begin() + v.size()/2, v.end());
    */
    
    //srand((unsigned int)time(NULL));

    return 0;
}

#endif
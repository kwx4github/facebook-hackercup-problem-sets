#include<cstdio>
#include<vector>
#include<algorithm>
#include<set>
#include<cstring>
#include<assert.h>
using namespace std;
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define FORD(i,a,b) for(int i = a; i >= b; --i)
#define RI(i,n) FOR(i,1,n)
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
bool debug;
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 2005;
const int mod = 1e9 + 7;

char sl[99999];
int dp[nax][nax];

int main(int argc, char *argv[])
{
	debug = argc > 1;
	int z;
	scanf("%d", &z);
	RI(tes, z) {
		printf("Case #%d: ", tes);
		scanf("%s", sl);
		int d = strlen(sl);
		int a = 0, b = 0;
		int i = 0;
		for(i = 0; sl[i] != '-'; ++i)
			a = 10 * a + (sl[i] - '0');
		for(i = i + 1; i != d; ++i)
			b = 10 * b + (sl[i] - '0');
		assert(a > b);
		dp[0][0] = 1;
		FOR(i, 0, a) FOR(j, 0, b) if(dp[i][j]) {
			if(i > j + 1) dp[i][j+1] = (dp[i][j+1] + dp[i][j]) % mod;
			dp[i+1][j] = (dp[i][j] + dp[i+1][j]) % mod;
		}
		printf("%d ", dp[a][b]);
		FOR(i, 0, a+1) FOR(j, 0, b+1) dp[i][j] = 0;
		
		
		dp[0][0] = 1;
		FOR(i, 0, a) FOR(j, 0, b) if(dp[i][j]) {
			dp[i][j+1] = (dp[i][j+1] + dp[i][j]) % mod;
			if(i + 1 <= j || j == b) dp[i+1][j] = (dp[i][j] + dp[i+1][j]) % mod;
		}
		printf("%d\n", dp[a][b]);
		FOR(i, 0, a+1) FOR(j, 0, b+1) dp[i][j] = 0;
	}
	
	return 0;
}

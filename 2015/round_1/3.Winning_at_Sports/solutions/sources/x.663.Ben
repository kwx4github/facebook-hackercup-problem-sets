#include<iostream>
#include<cstdio>
using namespace std;
const int BUF = 2005;
const int MOD = 1000000007;


int add(int a, int b) {
    return (a + b) % MOD;
}


int A, B;

void read() {
    scanf("%d-%d", &A, &B);
}


pair<int, int> rec(bool isStressFree, bool isStressful, int a, int b,
                   pair<int, int> dp[2][2][BUF][BUF]) {
    
    pair<int, int> &ret = dp[isStressFree][isStressful][a][b];
    
    if (a == A && b == B) {
        if (b == 0)
            isStressful = false;
        return ret = make_pair(isStressFree, isStressful);
    }
    
    if (ret.first != -1) {
        return ret;
    }

    ret = make_pair(0, 0);
    
    // A win
    if (a + 1 <= A) {
        pair<int, int> t;
        if (a + 1 > b && b != B)
            t = rec(isStressFree, false, a + 1, b, dp);
        else
            t = rec(isStressFree, isStressful, a + 1, b, dp);
        ret = make_pair(add(ret.first, t.first),
                        add(ret.second, t.second));
    }
    
    // B win
    if (b + 1 <= B) {
        pair<int, int> t;
        if (b + 1 >= a)
            t = rec(false, isStressful, a, b + 1, dp);
        else
            t = rec(isStressFree, isStressful, a, b + 1, dp);
        ret = make_pair(add(ret.first, t.first),
                        add(ret.second, t.second));
    }

    return ret;
}


void work(int cases) {
    static pair<int, int> dp[2][2][BUF][BUF];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            for (int k = 0; k < BUF; ++k)
                for (int l = 0; l < BUF; ++l) {
                    dp[i][j][k][l].first = -1;
                    dp[i][j][k][l].second = -1;
                }
    pair<int, int> t = rec(1, 1, 0, 0, dp);
    cout << "Case #" << cases << ": " << t.first << ' ' << t.second << endl;
}


int main() {
    int cases;
    cin >> cases;
    for (int i = 0; i < cases; ++i) {
        read();
        work(i + 1);
    }
    return 0;
}

#include<bits/stdc++.h>

using namespace std;

const int kMod = 1000000007;
const int kMaxSc = 2048;

int dp[kMaxSc][kMaxSc];


int f(int ScoreA,int ScoreB,bool mode,int &A,int &B){
    if(ScoreA == A && ScoreB == B)return 1;
	
	if(dp[ScoreA][ScoreB] != -1)return dp[ScoreA][ScoreB];
	
	int ans = 0;
	
	if(ScoreA == A || ScoreB == B){
		if(ScoreA == A)ans = (1LL*ans + f(ScoreA,ScoreB+1,mode,A,B))%kMod;
		if(ScoreB == B)ans = (1LL*ans + f(ScoreA+1,ScoreB,mode,A,B))%kMod;
	}
	else{
		if(mode == 0){ // stress-free
				ans = (1LL*ans + f(ScoreA+1,ScoreB,mode,A,B))%kMod;
			if(ScoreB + 1 < ScoreA){
				ans = (1LL*ans + f(ScoreA,ScoreB+1,mode,A,B))%kMod;
			}
		}
		else{ // stressful
			if(ScoreA + 1 <= ScoreB){
				ans = (1LL*ans + f(ScoreA+1,ScoreB,mode,A,B))%kMod;
			}
			ans = (1LL*ans + f(ScoreA,ScoreB+1,mode,A,B))%kMod;
		}
	}
	return dp[ScoreA][ScoreB] = ans;
	
}

int getWays(int &A,int &B,int mode){
	memset(dp,-1,sizeof(dp));
	return f(0,0,mode,A,B);
}


int main(){
	int T,A,B,testCase = 0;
	scanf("%d",&T);
	while ( T-- ){
	    scanf("%d-%d\n",&A,&B);
		printf("Case #%d: %d %d\n",++testCase,getWays(A,B,0),getWays(A,B,1));
	}
}
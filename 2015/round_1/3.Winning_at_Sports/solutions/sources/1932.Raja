#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <string.h>
#include <climits>
#define repx(i,x,n) for(int i=x;i<n;i++)
#define rep(i,n) repx(i,0,n)
#define pb push_back
#define full(v)  v.begin(),v.end()
#define np next_permutation
#define VI vector<int>
#define VS vector<string>
#define VC vector<char>
#define VD vector<double>
#define VF vector<float>
#define SI set<int>
#define SC set<char>
#define SS set<string>
#define MII map<int,int>
#define MSI map<string,int>
#define MIS map<int,string>
#define MIC map<int,char>
#define MCI map<char,int>
#define LL long long
#define MAX 10000001
#define MOD 1000000007

using namespace std;
int dp[2003][2003];
int a,b;
int solve1(int myg , int opg)
{
	if(opg == b)
		return 1;
	if(myg >a || opg>b)
		return 0;
	if(myg>opg)
		return 0;
	if(dp[myg][opg] != -1)
		return dp[myg][opg];
	int ret =0;
	ret = solve1(myg+1,opg)+solve1(myg,opg+1);
	ret = ret % MOD;
	return dp[myg][opg] = ret;
}
int solve2(int myg , int opg)
{
	if(myg == a && opg ==b)
		return 1;
	if(myg >a || opg>b)
		return 0;
	if(myg<=opg)
		return 0;
	if(dp[myg][opg] != -1)
		return dp[myg][opg];
	int ret =0;
	ret = solve2(myg+1,opg)+solve2(myg,opg+1);
	ret = ret % MOD;
	return dp[myg][opg] = ret;
}


int main()
{
	ios_base::sync_with_stdio(false);
	int test;
	cin>>test;
	repx(testcase,1,test+1)
	{
		string s;
		cin>>s;
		a=0;b=0;
		int kkk;
		for(kkk=0;s[kkk]!='-';kkk++)
		{
			a = a*10 + (s[kkk]-'0');
		}
		for(++kkk;kkk<s.size();kkk++)
		{
			b = b*10 + (s[kkk]-'0');
		}
		rep(i,a+1)
		rep(j,b+1)
		 dp[i][j]=-1;
		int ret1 = solve1(0,0);
		rep(i,a+1)
		rep(j,b+1)
		 dp[i][j]=-1;
		int ret2 = solve2(1,0);
		cout<<"Case #"<<testcase<<": "<<ret2<<" "<<ret1<<"\n";
	}
	return 0;
}
//Abinash Ghosh(Om)
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <climits>
#include <iostream>
#include <iomanip>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <sstream>
#include <algorithm>
using  namespace  std;

#define PI acos(-1.0)
#define MAX 10000007
#define EPS 1e-9
#define mem(a,b) memset(a,b,sizeof(a))
#define gcd(a,b) __gcd(a,b)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define Sort(x) sort(x.begin(),x.end())
#define FOR(i, b, e) for(int i = b; i <= e; i++)
#define pr(x) cout<<x<<"\n"
#define pr2(x,y) cout<<x<<" "<<y<<"\n"
#define pr3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n";
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

typedef  long long ll;
typedef  pair <int, int> pii;
typedef  pair <double , double> pdd;
typedef  pair <ll , ll > pll;
typedef  vector <int> vi;
typedef  vector <pii> vpii;
typedef  vector <ll > vl;


//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};
//int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};
//int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
// scanf("%d",&n);
ll dp[4005][2005];
int N,a,b;
ll solve(int n,int s)
{
    //pr2(n,s);
    if(n==N+1||s==a+1)
    {
        if(s==a||s==a+1)return 1;
        return 0;
    }
    if(dp[n][s]!=-1)return dp[n][s];
    ll ans=0;
    if((N-s)>b)
    ans=solve(n+1,s+1)%1000000007;
    if(s>(n-s))ans=(ans+solve(n+1,s)%1000000007)%1000000007;
    return dp[n][s]=ans;
}
ll solve2(int n,int s)
{
    if(n==N+1||N-s==b+1)
    {
        if(N-s==b||N-s==b+1)return 1;
        return 0;
    }
    //pr2(n,s);
    if(dp[n][s]!=-1)return dp[n][s];
    ll ans=0;
    if(s+1<=(n-s-1)||(n-1-s)>=b)ans=solve2(n+1,s+1)%1000000007;
    if(n-s<=b)ans=(ans+solve2(n+1,s)%1000000007)%1000000007;
        return dp[n][s]=ans;
}
int main()
{
    READ("inC.txt");
    WRITE("outC.txt");
    int T;
    scanf("%d",&T);
    FOR(t,1,T)
    {

        scanf("%d-%d",&a,&b);
        if(a==1&&b==0){printf("Case #%d: 1 0\n",t);continue;}
        N=a+b;
        mem(dp,-1);
        ll ans=solve(3,2)%1000000007;
        mem(dp,-1);
        ll ans2=solve2(2,0)%1000000007;
        if(b==0)ans2=0;
        printf("Case #%d: %lld %lld\n",t,ans,ans2);
    }
    return 0;
}



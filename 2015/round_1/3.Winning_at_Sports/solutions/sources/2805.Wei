#include <fstream>
#include <vector>
#include <algorithm>
#include <set>
#include <map> 
#include <queue>
#include <string>

using namespace std;

long long dp[2001][2001];

#define MOD 1000000007

long long countWays(int s1, int f1, int s2, int f2)
{
	long long &res = dp[s1][s2];
	if (dp[s1][s2] != -1) return dp[s1][s2];
	if (s1 == f1 && s2 == f2) return 1;
	long long total = 0;
	if (s1 > s2 + 1 && s2 < f2)
		total += countWays(s1, f1, s2 + 1, f2);
	total %= MOD;
	if (s1 < f1)
		total += countWays(s1 + 1, f1, s2, f2);

	total %= MOD;

	res = total;
	return res;
}

long long countWays2(int s1, int f1, int s2, int f2)
{
	long long &res = dp[s1][s2];
	if (dp[s1][s2] != -1) return dp[s1][s2];
	if (s1 == f1 && s2 == f2) return 1;
	long long total = 0;
	if (s2 < f2)
		total += countWays2(s1, f1, s2 + 1, f2);
	total %= MOD;
	if (s2 == f2 || (s2 < f2 && s1 < s2) )
		total += countWays2(s1 + 1, f1, s2, f2);

	total %= MOD;

	res = total;
	return res;
}

int main()
{
	int T;
	fstream fin;
	fin.open("winning_at_sports.txt", fstream::in);

	fstream fout;
	fout.open("output.txt", fstream::out);

	fin >> T;
	for (int i = 0; i < T; i++)
	{
		int s1, s2;
		char c;
		fin >> s1 >> c >> s2;
	
		long long count, count2 = 0;
		memset(dp, -1, sizeof(dp));
		count = countWays(0, s1, 0, s2);

		memset(dp, -1, sizeof(dp));
		count2 = countWays2(0, s1, 0, s2);


		fout << "Case #" << i + 1 << ": ";
		fout << count << " " << count2 << endl;

	}
	return 0;
}
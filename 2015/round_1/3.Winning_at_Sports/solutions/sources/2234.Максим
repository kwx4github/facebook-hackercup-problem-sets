#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <vector>
#include <algorithm>
#include <set>
#include <cstdio>
#include <cstdint>
#include <cstring>
#include <iostream>
#include <string>
#include <map>
#include <cassert>
#include <cstdlib> 
using namespace std;

const int MN = 8005;
const int MOD = 1000 * 1000 * 1000 + 7;

int dp1[MN][MN];
int dp2[MN][MN];

void precalc()
{
	dp1[1][0] = 1;
	for (int i = 1; i <= MN - 2; ++i)
	{
		for (int j = 0; j < i; ++j)
		{
			dp1[i + 1][j] += dp1[i][j];
			dp1[i + 1][j] %= MOD;
			if (j + 1 < i)
			{
				dp1[i][j + 1] += dp1[i][j];
				dp1[i][j + 1] %= MOD;
			}
		}
	}
	dp2[0][0] = 1;
	dp2[1][0] = 1;
	for (int i = 1; i <= MN - 2; ++i)
	{
		for (int j = 0; j <= i; ++j)
		{
			dp2[i + 1][j] = (dp2[i + 1][j] + dp2[i][j]) % MOD;
			if (j < i)
				dp2[i][j + 1] = (dp2[i][j + 1] + dp2[i][j]) % MOD;
		}
	}
}

void clear()
{
}


void solve()
{
	string s;
	cin >> s;
	int pos = s.find('-');
	int w = stoi(s.substr(0, pos));
	int l = stoi(s.substr(pos + 1));
	cerr << w << " " << l << endl;
	cout << dp1[w][l] << " " << dp2[l][l];
}

int main(const int argc, const char** argv) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	precalc();
	int t;
	cin >> t;
	for (int i = 0; i < t; ++i)
	{
		cout << "Case #" << i + 1 << ": ";
		solve();
		cout << endl;
		clear();
	}
	return 0;
}
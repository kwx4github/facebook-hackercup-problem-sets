#include <iostream>
#include <string>
#include <map>
#include <utility>

typedef std::pair< short, short > state;

int main () {
	int count;
	std::cin >> count;

	for (int testcase=1; testcase <= count; testcase++ ) {
		long stressfree = 0;
		long stressful = 0;

		std::string score;
		std::cin >> score;

		short home = std::stoi( score.substr( 0, score.find( "-" ) ), nullptr );
		short opponent = std::stoi( score.substr( score.find( "-" ) + 1, std::string::npos ), nullptr );

		// stressfree strategy
		std::map< state, int > resolve;
		resolve.insert( { { 1, 0 }, 1 } );
		while ( ! resolve.empty() ) {
			std::pair< state, int > full = *resolve.begin();
			resolve.erase( resolve.begin() );
			state analyse = full.first;

			if ( analyse.first == home && analyse.second == opponent ) {
				stressfree += full.second;
				if ( stressfree >= 1000000007 ) stressfree = stressfree % 1000000007;
			} else {
				// hint: we don't want duplicate entries in queue -> rather increment full.second in existing item
				if ( analyse.first < home ) {
					auto search = resolve.find( { analyse.first + 1, analyse.second } );
					if ( search != resolve.end() ) {
						search->second += full.second;
						if ( search->second >= 1000000007 ) search->second = search->second % 1000000007;
					} else 
						resolve.insert( { { analyse.first + 1, analyse.second }, full.second } );
				}
				if ( analyse.second < opponent && analyse.first > analyse.second + 1 ) {
					auto search = resolve.find( { analyse.first, analyse.second + 1 } );
					if ( search != resolve.end() ) {
						search->second += full.second;
						if ( search->second >= 1000000007 ) search->second = search->second % 1000000007;
					} else
						resolve.insert( { { analyse.first, analyse.second + 1 }, full.second } );
				}
			}
		}

		// stressful strategy
		resolve.insert( { { 0, 0 }, 1 } );
		while ( ! resolve.empty() ) {
			std::pair< state, int > full = *resolve.begin();
			resolve.erase( resolve.begin() );
			state analyse = full.first;

			if ( analyse.first == home && analyse.second == opponent ) {
				stressful += full.second;
				if ( stressful >= 1000000007 ) stressful = stressful % 1000000007;
			} else {
				if ( analyse.second < opponent ) {
					auto search = resolve.find( { analyse.first, analyse.second + 1 } );
					if ( search != resolve.end() ) {
						search->second += full.second;
						if ( search->second >= 1000000007 ) search->second = search->second % 1000000007;
					} else 
						resolve.insert( { { analyse.first, analyse.second + 1 }, full.second } );
				}
				if ( analyse.first < home && ( analyse.first < analyse.second || analyse.second == opponent ) ) {
					auto search = resolve.find( { analyse.first + 1, analyse.second } );
					if ( search != resolve.end() ) {
						search->second += full.second;
						if ( search->second >= 1000000007 ) search->second = search->second % 1000000007;
					} else
						resolve.insert( { { analyse.first + 1, analyse.second }, full.second } );
				}
			}
		}

		std::cout << "Case #" << testcase << ": " << stressfree << " " << stressful << std::endl;
	}

	return 0;
}

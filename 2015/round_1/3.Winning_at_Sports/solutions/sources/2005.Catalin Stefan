#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long int64;

const int Nmax = 2005;
const int mod = 1000000007;

int64 mat[Nmax][Nmax];

int64 CalculateStressFree(int n, int m) {
	if (mat[n][m] != -1)
		return mat[n][m];

	int64 result = 0;
	if (n - 1 > m)
		result += CalculateStressFree(n - 1, m);
	if (m > 0)
		result += CalculateStressFree(n, m - 1);

	result %= mod;
	mat[n][m] = result;
	return result;
}

int64 CalculateStressful(int n, int m) {
	if (mat[n][m] != -1)
		return mat[n][m];

	int64 result = 0;

	if (n > 0)
		result += CalculateStressful(n - 1, m);
	if (n < m)
		result += CalculateStressful(n, m - 1);

	result %= mod;
	mat[n][m] = result;
	return result;

}

void InitMatrix() {
	for (int i = 0; i <= Nmax; ++i)
		for (int j = 0; j <= Nmax; ++j)
			mat[i][j] = -1;
	mat[1][0] = 1;
	mat[0][1] = 1;
}


int main() {
	freopen("winning_at_sports.txt", "r", stdin);
	freopen("winning_at_sports_out.txt", "w", stdout);
	int t, n, m;

	scanf("%d", &t);
	for (int i = 1; i <= t; ++i) {
		scanf("%d-%d", &n, &m);

		printf("Case #%d: ", i);
		InitMatrix();
		printf("%d ", CalculateStressFree(n, m));
		InitMatrix();
		printf("%d\n", CalculateStressful(n, m));
	}

	return 0;
}
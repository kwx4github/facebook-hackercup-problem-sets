import java.io.*;
import java.util.*;
import java.util.List;

public class Main {
    private static StringTokenizer st;
    private static BufferedReader br;
    public static long MOD = 1000000007;
    public static int max = 2010;

    public static void print(Object x) {
        System.out.println(x + "");
    }
    public static void printArr(long[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static void printArr(int[] x) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < x.length; i++) {
            s.append(x[i] + " ");
        }
        print(s);
    }
    public static String join(Collection<?> x, String space) {
        if (x.size() == 0) return "";
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (Object elt : x) {
            if (first) first = false;
            else sb.append(space);
            sb.append(elt);
        }
        return sb.toString();
    }

    public static String nextToken() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String line = br.readLine();
            st = new StringTokenizer(line.trim());
        }
        return st.nextToken();
    }
    public static int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }
    public static long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }
    public static List<Integer> nextInts(int N) throws IOException {
        List<Integer> ret = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            ret.add(nextInt());
        }
        return ret;
    }

    public static long[][] stressfree() {
        long[][] ways = new long[max][max];
        ways[1][0] = 1;
        for (int i = 1; i < max; i++) {
            for (int j = 0; j < i; j++) {
                if (i == 1 && j == 0) continue;
                if (i <= j) continue;
                long cur = ways[i-1][j];
                if (j > 0) cur += ways[i][j-1];
                ways[i][j] = cur % MOD;
            }
        }
        return ways;
    }

    public static long stressful(int mFinal, int oFinal) {
        long[][] ways = new long[max][max];
        ways[0][0] = 1;
        for (int i = 0; i <= mFinal; i++) {
            for (int j = 0; j <= oFinal; j++) {
                if (i == 0 && j == 0) continue;
                if (j != oFinal && i > j) continue;
                long cur = 0;
                if (i > 0) cur += ways[i-1][j];
                if (j > 0) cur += ways[i][j-1];
                ways[i][j] = cur % MOD;
            }
        }
        return ways[mFinal][oFinal];
    }

    public static void main(String[] args) throws IOException {
        //br = new BufferedReader(new InputStreamReader(System.in));
        br = new BufferedReader(new InputStreamReader(new FileInputStream("winning_at_sports.txt")));

        long[][] stressfree = stressfree();
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            String[] score = nextToken().split("\\-");
            int mFinal = Integer.parseInt(score[0]);
            int oFinal = Integer.parseInt(score[1]);
            System.out.printf("Case #%d: %d %d%n", t,
                    stressfree[mFinal][oFinal], stressful(mFinal, oFinal));
        }
    }
}

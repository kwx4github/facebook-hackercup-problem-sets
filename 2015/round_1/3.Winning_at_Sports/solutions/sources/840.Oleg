#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

int MOD = 1000000007;
int goalA, goalB;
int mem[2001][2001];

int getStressFree(int curA, int curB) {
	int& res = mem[curA][curB];
	if (res != -1) return res;
	res = 0;
	if (curA == goalA && curB == goalB) {
		return res = 1;
	}
	if (curA > curB + 1 && curB < goalB) {
		res += getStressFree(curA, curB + 1);
		res %= MOD;
	}
	if (curA < goalA) {
		res += getStressFree(curA + 1, curB);
		res %= MOD;
	}
	return res;
}


int getStressFul(int curA, int curB) {
	int& res = mem[curA][curB];
	if (res != -1) return res;
	res = 0;
	if (curA == goalA && curB == goalB) {
		return res = 1;
	}
	if (curB < goalB) {
		res += getStressFul(curA, curB + 1);
		res %= MOD;
	}
	if (curA < goalA && (curA + 1 <= curB || curB == goalB)) {
		res += getStressFul(curA + 1, curB);
		res %= MOD;
	}
	return res;
}


void read() {
	scanf("%d-%d", &goalA, &goalB);
}

void solve() {

	memset(mem, -1, sizeof(mem));
	int streesFree = getStressFree(0, 0);
	memset(mem, -1, sizeof(mem));
	int stressFul = getStressFul(0, 0);
	printf("%d %d\n", streesFree, stressFul);
}

int main(int argc, char* argv[]) {
#ifdef LAPTOP
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout); 
#endif

	int T;
	scanf("%d", &T);

	for (int t = 1; t <= T; t++) {
		read();
		printf("Case #%d: ", t);
		solve();
	}

	return 0;
}


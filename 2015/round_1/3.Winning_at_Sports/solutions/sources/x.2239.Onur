#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import re

input = sys.stdin.read()
tokens = input.split("\n")
tokenI = 0


prog = re.compile("([0-9]+)-([0-9]+)")





def f_dyn(s1, s2):
    tab = [[0 for y in range(s2+1)] for x in range(s1+1)] 

    for u1 in range(0, s1+1):
        tab[u1][0] = 1

    for u2 in range(1, s2+1):
        for u1 in range(1, s1+1):
            if u1 > u2:
                tab[u1][u2] = tab[u1-1][u2] + tab[u1][u2-1]

    return tab[s1][s2] % 1000000007


def f_dyn_stressful(s1, s2):
    tab = [[0 for y in range(s2+1)] for x in range(s1+1)] 

    for u2 in range(0, s2+1):
        tab[0][u2] = 1

    for u2 in range(1, s2+1):
        for u1 in range(1, s1+1):
            if u1 < u2:
                tab[u1][u2] = tab[u1-1][u2] + tab[u1][u2-1]

    # tab = nombre de facons d'arriver Ã  s2 en ayant toujours eu u1 < u2

    # print tab

    b_sum = 0
    for u1 in range(0, s2):
        b_sum += tab[u1][s2]

    return b_sum % 1000000007




def solve():

    global tokens
    global tokenI

    result = tokens[tokenI]
    tokenI+=1

    # print result

    m = prog.match(result)

    f1 = int(m.group(1))
    f2 = int(m.group(2))

    print "%d %d" % (f_dyn(f1, f2), f_dyn_stressful(f1, f2))
    # print f(f1, f2)


def mainLoop():
    global tokens
    global tokenI

    T = int(tokens[tokenI])
    tokenI+=1

    # print T

    for i in range(T):
        print "Case #%d:" % (i+1) , 
        solve()

# print tokens

mainLoop()


#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define esp 1e-8
#define lson   l, m, rt<<1
#define rson   m+1, r, rt<<1|1
#define sz(x) ((int)((x).size()))
#define pf(x) ((x)*(x))
#define pb push_back
#define pi acos(-1.0)
#define in freopen("solve_in.txt", "r", stdin);
#define out freopen("solve_out.txt", "w", stdout);
#define bug(x) cerr << "Line : " << (x) <<  " >>>>>>\n";
#define TL cerr << "Time elapsed: " << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms" << endl;
#define inf 0x0f0f0f0f

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef map<LL, int> MPS;
typedef pair<int, int> PII;
typedef MPS::iterator IT;

const int M = (int)1e9 + 7;
const int maxn = 4000 + 20;
int dp[maxn][maxn];
int main() {
//    in
//    out
    int T;
    for(int t = scanf("%d", &T); t <= T; t++) {
        int A, B;
        scanf("%d-%d", &A, &B);
        printf("Case #%d: ", t);
        if(B == 0) {
            puts("1 1");
        } else {
            int ans1, ans2 = 0;
            memset(dp, 0, sizeof dp);
            dp[0][0] = 1;
            for(int i = 1; i <= A+B; i++)
                for(int j = 1; j <= min(A, i); j++) {
                    if(i-j >= j) continue;
                    if(i == 1 || i-1-j < j)
                        dp[i][j] = (dp[i][j] + dp[i-1][j])%M;
                    if(i == 1 || i-j < j-1)
                        dp[i][j] = (dp[i][j] + dp[i-1][j-1])%M;
                }
            ans1 = dp[A+B][A];
            memset(dp, 0, sizeof dp);
            dp[0][0] = 1;
            for(int i = 1; i <= A+B; i++)
                for(int j = 1; j <= min(B, i); j++) {
                    if(i-j > j) continue;
                    if(i == 1 || i-1-j <= j)
                        dp[i][j] = (dp[i][j] + dp[i-1][j])%M;
                    if(i == 1 || i-j <= j-1)
                        dp[i][j] = (dp[i][j] + dp[i-1][j-1])%M;
                }
            for(int i = B; i <= A+B; i++) {
                if(i-B >= B)
                    continue;
                ans2 = (ans2+dp[i-1][B-1])%M;
            }
            printf("%d %d\n", ans1, ans2);
        }
    }
    return 0;
}

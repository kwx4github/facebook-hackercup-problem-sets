
#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <list>
#include <stack>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <cmath>
using namespace std;

// void DFS_easy(int cur_a, int cur_b, int a, int b, long &cnt){
//     if(cur_a == a && cur_b == b){
//         cnt++;
//         if(cnt == 1000000007)
//             cnt=0;
//         return;
//     }
//     if(cur_a>a || cur_b > b||(cur_a>0 && cur_a<=cur_b))// 剪枝
//         return;
//   //  if(cur_a<=cur_b|| cur_b==b)
//     DFS_easy(cur_a+1, cur_b,a,b,cnt);
//     DFS_easy(cur_a, cur_b+1, a, b,cnt);
// }
// void DFS_hard(int cur_a, int cur_b, int a, int b, long &cnt){
//     if(cur_a == a && cur_b == b){
//         cnt++;
//         if(cnt == 1000000007)
//             cnt=0;
//         return;
//     }
//     if(cur_a>a || cur_b > b||(cur_b<b && cur_a>cur_b))// 剪枝
//         return;
//     DFS_hard(cur_a+1, cur_b,a,b,cnt);
//     DFS_hard(cur_a, cur_b+1, a, b, cnt);
// }


// void getWays(int a, int b, long &easy, long &hard){
//     DFS_easy(0,0,a,b,easy);
//     DFS_hard(0,0,a,b,hard);

// }


long DP_easy(int a, int b){
    long **dp = new long*[a+1];
    for(int i=0;i<=a;i++){
        dp[i] = new long[b+1];
        for(int j=0;j<=b;j++)
            dp[i][j]=0;
    }
    //fill_n(&dp[0][0], (a+1)*(b+1), 0);
    dp[1][0] = 1;
  //  cout<<"1111"<<endl;
    for(int i=1;i<=a;i++){
        for(int j=0;j<=min(i,b);j++){
            if(j>=1 && i>j)// 一直领先
                dp[i][j]=(dp[i][j] + dp[i][j-1])%1000000007;
            if(i>=1 && i>j)
                dp[i][j]=(dp[i][j] +dp[i-1][j])%1000000007;
           // cout<<"i:"<<i<<", j:"<<j<<" | "<<dp[i][j]<<endl;
        }
    }
    return dp[a][b];
}

long DP_hard(int a, int b){
    // 开二维大数组，防止栈空间耗尽，多么痛的领悟！
    long **dp = new long*[a+1];
    for(int i=0;i<=a;i++){
        dp[i] = new long[b+1];
        for(int j=0;j<=b;j++)
            dp[i][j]=0;
    }
  //  fill_n(&dp[0][0], (a+1)*(b+1), 0);
    dp[0][1] = 1;
    for(int j=1;j<=b;j++){
        for(int i=0;i<=a;i++){
            if(j>=1 && ((j<b && i<=j)|| j==b))// 一直不领先
                dp[i][j]=(dp[i][j] +dp[i][j-1])%1000000007;
            if(i>=1 && ((j<b && i<=j)|| j==b))
                dp[i][j]=(dp[i][j] +dp[i-1][j])%1000000007;
        }
    }
    return dp[a][b];
}
void getWays2(int a, int b, long &easy, long &hard){
    easy = DP_easy(a,b);
    hard = DP_hard(a,b);
}

int main(int argc, char** argv) {
    int n;
    freopen("winning_at_sports_example_input.txt","r",stdin);//redirects standard input
    freopen("winning_at_sports_example.out", "w", stdout);
    scanf("%d",&n);
   // cout<<n<<endl;
    for(int i=0;i<n;i++){
        int a,b;
        scanf("%d-%d",&a, &b);
     //   cout<<a<<" "<<b<<endl;
        long easy=0, hard=0;
        getWays2(a, b, easy, hard);
        cout<<"Case #"<<i+1<<": "<<easy<<" "<<hard<<endl;
    }
    return 0;
}
#pragma comment(linker, "/STACK:128777216")

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <sstream>

#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>

#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <string.h>

#include <memory.h>
#include <cassert>
#include <time.h>

using namespace std;

#define forn(i,n) for (int i = 0; i < (int)(n); i++)
#define fornd(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)(a); i <= (int)(b); i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)

#define _(a, val) memset (a, val, sizeof (a))
#define sz(a) (int)((a).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef long long lint;
typedef unsigned long long ull;
typedef long double ld;

const lint LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

#ifdef MY_DEBUG
#define dbgx( x ) { cerr << #x << " = " << x << endl; }
#define dbg( ... ) { fprintf(stderr, __VA_ARGS__); fflush(stderr); }
#else
#define dbgx( x ) {  } 
#define dbg( ... ) {  } 
#endif

void prepare (string s)
{
#ifdef MY_DEBUG
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
#else
	if (s.length() != 0)
	{
		freopen ((s + ".in").c_str(), "r", stdin);
		freopen ((s + ".out").c_str(), "w", stdout);
	}
#endif
}

const int MOD = INF + 7;
const int NMAX = 2055;

int a, b;
int dp[NMAX][NMAX];

void read()
{
	scanf("%d-%d", &a, &b);
}

void upd(int i, int j, int val)
{
	dp[i][j] += val;
	if (dp[i][j] >= MOD)
		dp[i][j] -= MOD;
}

void upd_first_dp(int i, int j)
{
	if (i + 1 <= a)
		upd(i + 1, j, dp[i][j]);
	if (j + 1 <= b && i > j + 1)
		upd(i, j + 1, dp[i][j]);
}

int firstDP()
{
	_(dp, 0);
	dp[1][0] = 1;
	for(int i = 0; i <= a; i ++)
	{
		for(int j = 0; j <= b; j++)
		{
			if (dp[i][j] > 0)
				upd_first_dp(i, j);
		}
	}

	return dp[a][b];
}

void upd_second_dp(int i, int j)
{
	if (i + 1 <= j)
		upd(i + 1, j, dp[i][j]);
	if (j + 1 <= b)
		upd(i, j + 1, dp[i][j]);
}

int secondDP()
{
	_(dp, 0);
	dp[0][0] = 1;
	for(int j = 0; j < b; j++)
	{
		for(int i = 0; i <= a; i++)
		{
			if (dp[i][j] > 0)
				upd_second_dp(i, j);
		}
	}

	int ans = 0;
	forn(i, b + 1)
	{
		ans += dp[i][b];
		if (ans >= MOD)
			ans -= MOD;
	}

	return ans;
}

pair<int, int> solve()
{
	return mp(firstDP(), secondDP());
	//printf("%d", firstDP());
	//printf(" %d\n", secondDP());
}

int brute_free(int c1, int c2)
{
	if (c1 <= c2 || c1 > a || c2 > b)
		return 0;
	if (c1 == a && c2 == b)
		return 1;
	return brute_free(c1 + 1, c2) + brute_free(c1, c2 + 1);
}

int brute_ful(int c1, int c2)
{
	if (c1 > c2 || c1 > a || c2 > b)
		return 0;
	if (c2 == b)
		return 1;
	return brute_ful(c1 + 1, c2) + brute_ful(c1, c2 + 1);
}

int main()
{
	prepare("");

	/*for(int i = 0; i <= 20; i++)
	{
		for(int j = 0; j < i; j++)
		{
			a = i;
			b = j;
			pair<int, int> t = solve();
			if (t.first != brute_free(1, 0) || t.second != brute_ful(0, 0))
				dbgx("FAIL");
		}
	}*/

	int t;
	scanf("%d\n", &t);
	forn(i, t)
	{
		read();
		pair<int, int> ans = solve();
		printf("Case #%d: %d %d\n", i + 1, ans.first, ans.second);
	}

	return 0;
}

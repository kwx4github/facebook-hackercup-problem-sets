// DONT READ IT - ITS SO UGLY....

#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <stack>

#ifdef DEBUG_MODE
#define print(x) cout << #x << " = " << x << endl
#define debug(x) x
#else
#define print(x)
#define debug(x)
#endif

#define PII pair < int16, int16 >
#define A first
#define B second
#define MOD 1000000007

typedef short int int16;
typedef unsigned short int uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;

using namespace std;


struct Node
{
    int64 value;
    vector <Node*> nexts;
    pair <int16, int16> score;
    
    Node(pair <int16, int16> score_)
    {
        value = 0;
        score = score_;
    }
};

PII operator + (PII a, PII b)
{
    return(PII(a.A + b.A, a.B + b.B));
}

class Application
{
public:
    inline void Run();
private:
    // Methods
    inline void LoadData();
    inline void Solve();
    int StressFree();
    void CreateStressFullTree(Node& score_0);
    void CreateStressFreeTree(Node& score_0);
    int StressFull();
    uint64 CountTree(Node* node);
    void DestroyTree();
    // Fields
    int a_score, b_score;
    map <pair <int16, int16>, Node*> score_to_node;
    
};

int main()
{
    ios_base::sync_with_stdio(false);
    Application app;
    app.Run();
}

inline void Application::LoadData()
{
    char temp;
    cin >> a_score >> temp >> b_score;
}

int Application::StressFree()
{
    Node score_0 (PII(0, 0));
    score_to_node.insert(pair <PII, Node*> ( PII(0, 0), &score_0));
    
    CreateStressFreeTree(score_0);
    int result = (int)CountTree(&score_0);
    DestroyTree();
    
    return result;
}

int Application::StressFull()
{
    Node score_0(PII(0, 0));
    
    score_to_node.insert(pair <PII, Node*> ( PII(0, 0), &score_0));
    
    CreateStressFullTree(score_0);
    int result = (int)CountTree(&score_0);
    DestroyTree();
    
    return result;
}

void Application::CreateStressFullTree(Node& score_0)
{
    stack <Node*> S;
    S.push(&score_0);
    
    int l = 0;
    while(!S.empty())
    {
        Node* v = S.top();
        S.pop();
        
                
        if(v-> score.A < v-> score. B)
        {
            Node* son;
            auto it = score_to_node.find(v-> score + PII(1, 0));
            bool new_score = false;
            
            if(it == score_to_node.end())
            {
                son = new Node(v-> score + PII(1, 0));
                score_to_node.insert(pair <PII, Node*> (v-> score + PII(1, 0), son));
                new_score = true;
            }
            else
            {
                son = it-> second;
            }
            
            v-> nexts.push_back(son);
            if(new_score)
            {
                S.push(son);
             //   cerr << "Wrzucam " << son-> score.A << " " << son-> score.B << endl;
                ++l;
            }
            //++i;
        }
        
        if(v-> score.B < b_score)
        {
            Node* son;
            auto it = score_to_node.find(v-> score + PII(0, 1));
            
            bool new_score = false;
            
            if(it == score_to_node.end())
            {
                son = new Node(v-> score + PII(0, 1));
                score_to_node.insert(pair <PII, Node*> (v-> score + PII(0, 1), son));
                new_score = true;
            }
            else
            {
                son = it-> second;
            }
            
            v-> nexts.push_back(son);  
            if(new_score)
            {
                S.push(son);
              //  cerr << "Wrzucam " << son-> score.A << " " << son-> score.B << endl;
                ++l;
            }
        }
    }
    
   // cout<< "L: " << l << endl;
}

void Application::CreateStressFreeTree(Node& score_0)
{
    stack <Node*> S;
    S.push(&score_0);
    
    int l = 0;
    while(!S.empty())
    {
        Node* v = S.top();
        S.pop();
        
                
        if((v-> score.A > v-> score. B + 1) && v-> score. B < b_score)
        {
            Node* son;
            auto it = score_to_node.find(v-> score + PII(0, 1));
            bool new_score = false;
            
            if(it == score_to_node.end())
            {
                son = new Node(v-> score + PII(0, 1));
                score_to_node.insert(pair <PII, Node*> (v-> score + PII(0, 1), son));
                new_score = true;
            }
            else
            {
                son = it-> second;
            }
            
            v-> nexts.push_back(son);
            if(new_score)
            {
                S.push(son);
             //   cerr << "Wrzucam " << son-> score.A << " " << son-> score.B << endl;
                ++l;
            }
            //++i;
        }
        
        if(v-> score.A < a_score)
        {
            Node* son;
            auto it = score_to_node.find(v-> score + PII(1, 0));
            
            bool new_score = false;
            
            if(it == score_to_node.end())
            {
                son = new Node(v-> score + PII(1, 0));
                score_to_node.insert(pair <PII, Node*> (v-> score + PII(1, 0), son));
                new_score = true;
            }
            else
            {
                son = it-> second;
            }
            
            v-> nexts.push_back(son);  
            if(new_score)
            {
                S.push(son);
              //  cerr << "Wrzucam " << son-> score.A << " " << son-> score.B << endl;
                ++l;
            }
        }
    }
}

uint64 Application::CountTree(Node* node)
{
    uint64 result = 0;
    
    if(node-> nexts.empty())
        return 1;
    
    if(node->value != 0)
        return node-> value;
    
    for(auto it = node-> nexts.begin(); it != node-> nexts.end(); ++it)
    {
        node->value = (node->value + CountTree(*it)) % MOD;
    }
    
    return node-> value;
}

void Application::DestroyTree()
{

    
    score_to_node.clear();
}

inline void Application::Solve()
{
    cout << StressFree() << ' ' << StressFull() << endl;
}

inline void Application::Run()
{
    int test_number;
    cin >> test_number;
    
    for(int i = 0; i < test_number; ++i)
    {
        cout << "Case #" << i + 1 << ": ";
        LoadData();
        Solve();
    }

}

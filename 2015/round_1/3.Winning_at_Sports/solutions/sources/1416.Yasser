package round1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.BitSet;

public class C {

    final String INPUT_FILE = "input.txt";
    final String OUTPUT_FILE = "output.txt";

    final long MOD = 1000000007;
    final int STRESS_FREE = 0, STRESS_FULL = 1;

    int A, B;
    long[][][] memo;

    public long goStress(int x, int y, int STATE) {

	if (x == A && y == B)
	    return 1;
	if (x > A || y > B)
	    return 0;
	if (STATE == STRESS_FREE && y >= x)
	    return 0;
	if (STATE == STRESS_FULL && x > y && y < B)
	    return 0;

	if (memo[STATE][x][y] != -1)
	    return memo[STATE][x][y];
	long ret = (goStress(x + 1, y, STATE) + goStress(x, y + 1, STATE))
		% MOD;
	return memo[STATE][x][y] = ret;
    }

    public String solve(int A, int B) {
	this.A = A;
	this.B = B;
	memo = new long[2][A + 2][B + 2];
	for (int i = 0; i < memo.length; i++)
	    for (int j = 0; j < memo[i].length; j++)
		Arrays.fill(memo[i][j], -1);
	return goStress(1, 0, STRESS_FREE) + " " + goStress(0, 0, STRESS_FULL);
    }

    public void solver() throws Exception {
	BufferedReader in = new BufferedReader(new FileReader(INPUT_FILE));
	PrintWriter out = new PrintWriter(new File(OUTPUT_FILE));
	int t = Integer.parseInt(in.readLine());

	for (int tt = 1; tt <= t; tt++) {
	    String[] line = in.readLine().split("-");
	    int x = Integer.parseInt(line[0]);
	    int y = Integer.parseInt(line[1]);
	    out.println("Case #" + tt + ": " + (solve(x, y)));
	}
	in.close();
	out.close();
    }

    public static void main(String[] args) throws Exception {
	new C().solver();
    }

}

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>

typedef long long           I64;
typedef unsigned long long  UI64;

using namespace std;

#define NN 2000
#define MOD 1000000007

int gDP0[NN+1][NN+1];
int gDP1[NN+1][NN+1];

void makeStressFreeTable()
{
    memset(gDP0, 0, sizeof(gDP0));

    for (int i = 0; i <= NN; i++)
        gDP0[0][i] = 1;

    for (int i = 0; i <= NN; i++)
        gDP0[i][0] = 0;

    for (int i = 1; i <= NN; i++)
    {
        for (int j = i + 1; j <= NN; j++)
        {
            gDP0[i][j] = (gDP0[i-1][j] + gDP0[i][j-1]) % MOD;
        }
    }
}

void makeStressfulTable()
{
    memset(gDP1, 0, sizeof(gDP1));

    for (int i = 0; i <= NN; i++)
        gDP1[i][0] = 1;

    for (int i = 0; i <= NN; i++)
        gDP1[0][i] = 0;

    for (int i = 1; i <= NN; i++)
    {
        for (int j = 1; j <= i; j++)
        {
            gDP1[i][j] = (gDP1[i-1][j] + gDP1[i][j-1]) % MOD;
        }
    }
}

void process(FILE* pfIn, FILE* pfOut)
{
    int i, count;

    makeStressFreeTable();
    makeStressfulTable();

    fscanf(pfIn, "%d", &count);
    for (i = 1; i <= count; i++)
    {
        int A, B;

        fscanf(pfIn, "%d-%d", &A, &B);
        fprintf(pfOut, "Case #%d: %d %d\n", i, B == 0 ? 1 : gDP0[B][A], B == 0 ? 1 : gDP1[B][B-1]);
    }
}

//-----------------------------------------------------------------------------

void process(const char* pcszInFile, const char* pcszOutFile)
{
    FILE* pfIn = fopen(pcszInFile, "rt");
    if (pfIn == NULL)
    {
        printf("file not found! \"%s\"\n", pcszInFile);
        exit(-2);
    }

    FILE* pfOut = fopen(pcszOutFile, "wt");
    if (pfOut == NULL)
    {
        printf("can't create file! \"%s\"\n", pcszOutFile);
        exit(-3);
    }

    process(pfIn, pfOut);

    fclose(pfIn);
    fclose(pfOut);
}

void main(int argc, char* argv[])
{
    if (argc != 3)
    {
        printf("Usage : %s <input_file> <output_file>\n", argv[0]);
        exit(-1);
    }

    process(argv[1], argv[2]);
}

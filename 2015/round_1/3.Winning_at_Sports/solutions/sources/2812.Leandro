#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <climits>

#define MOD 1000000007

using namespace std;

typedef unsigned int uint;

uint stress_free(int w, int l) {
  vector<vector<uint>> dp(w + 1, vector<uint>(l + 1, 0));

  for(int i = 0; i <= w; i++) {
    for(int j = 0; j <= l; j++) {
      if(i == 0 || j == 0) {
        dp[i][j] = 1;
      } else {
        if(i - 1 > j) {
          dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD;
        } else {
          dp[i][j] = dp[i][j - 1];
        }
      }
    }
  }

  return dp[w][l];
}

uint stressful(int w, int l) {
  vector<vector<uint>> dp(w + 1, vector<uint>(l + 1, 0));

  for(int i = 0; i <= w; i++) {
    for(int j = 0; j <= l; j++) {
      if(i == 0 || j == 0) {
        dp[i][j] = 1;
      } else {
        if(i > j && j < l) {
          // invalid - do nothing
        } else {
          if(i < j) {
            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD;
          } else {
            dp[i][j] = dp[i - 1][j];
          }
        }
      }
    }
  }

  return dp[w][l];

}

pair<uint, uint> solve(int w, int l) {
  return make_pair(stress_free(w, l),
                   stressful(w, l));
}

int main() {
  int T;
  cin >> T;

  for(int t = 1; t <= T; t++) {
    int w, l;
    char c;

    cin >> w >> c >> l;
    auto sol = solve(w, l);
    cout << "Case #" << t << ": " << sol.first << " " << sol.second << endl;
  }

  return 0;
}

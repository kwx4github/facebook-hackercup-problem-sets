#include <cstdio>
#include <iostream>
#include <fstream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define rep(i,n) for(int i=0;i<n;i++)
#define MOD 1000000007

using namespace std;

int T;
int N;
int S1, S2;

const int NMAX = 2001;
int dp[NMAX][NMAX];
int dp2[NMAX][NMAX];

int stressfree(int A, int B) {
	if (dp[A][B]!=-1) return dp[A][B];
	if (A>0 && A<=B) return 0;
	if (A>S1 || B>S2) return 0;
	if (A==S1 && B==S2) return 1;
	long long ret = 0;
	ret = (stressfree(A+1,B) + stressfree(A,B+1))%MOD;
	return dp[A][B] = (int)ret;
}

int stressfull(int A, int B) {
	if (dp2[A][B]!=-1) return dp2[A][B];
	if (A>B && B<S2) return 0;
	if (A>S1 || B>S2) return 0;
	if (A==S1 && B==S2) return 1;
	long long ret = 0;
	ret = (stressfull(A+1,B) + stressfull(A,B+1))%MOD;
	return dp2[A][B] = (int)ret;
}

int main()
{
    fstream fin("winning_at_sports.txt",ifstream::in);
    fstream fout("winning_at_sports.out",ofstream::out);
    fin >> T;
	char sstr[1000];
    for(int jj=1;jj<=T;jj++)
    {
        int ret = 0;
		
		string score;
		fin >> score;
		int ind = 0;
		while (ind<score.size() && score[ind]!='-') ind++;
		S1 = S2 = 0;
		rep(i,ind) S1 = S1*10 + (int)(score[i]-'0');
		for(int i=ind+1;i<score.size();++i) S2 = S2*10 + (int)(score[i]-'0');

		if (S1<=S2) {
			cout << "Case #" << jj << ": " << 0 << " " << 0 << "\n";
			fout << "Case #" << jj << ": " << 0 << " " << 0 << "\n";
			continue;
		}

		rep(i,NMAX)
			rep(j,NMAX) dp[i][j] = dp2[i][j] = -1;

        cout << "Case #" << jj << ": " << stressfree(0,0) << " " << stressfull(0,0) << "\n";
		fout << "Case #" << jj << ": " << stressfree(0,0) << " " << stressfull(0,0) << "\n";
    }
    fin.close();
    fout.close();
    cout << "running time=" << clock()/(double)CLOCKS_PER_SEC << "\n";
    system("PAUSE");
    return 0;
}

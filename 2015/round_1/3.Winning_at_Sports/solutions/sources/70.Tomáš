#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <queue>
#include <cstring>
#include <string>

#define vi vector<int>
#define vpii vector< pair<int,int> >
#define pii pair<int,int>
#define mp(x,y) make_pair(x,y)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define sqr(x) ((x)*(x))
#define FOR(i,n) for (ll i = 0; i < ll(n); i++)
#define FOR1(i,n) for (ll i = 1; i < ll(n); i++)
#define READ(v,n) { FOR(i,n){int x;cin>>x;v.pb(x);} }
#define FREAD(v,n) { FOR(i,n){int x;in>>x;v.pb(x);} }
#define WRITE(v) "";FOR(i,sz(v))cout<<v[i]<<" ";cout
#define FWRITE(v) "";FOR(i,sz(v))out<<v[i]<<" ";out
#define gmin(a,b) { if (b < a) a = b; }
#define gmax(a,b) { if (b > a) a = b; }
#define pb push_back
#define ppb pop_back
typedef long long ll;
typedef unsigned long long ull;
using namespace std;

ll dp[2010][2010];



int main(void){
  //preprocess
  memset(&dp, 0, sizeof(dp));
  FOR(i,2001) dp[i][0] = 1;
  FOR(i,2001) dp[0][i] = 1;
  
  for(int i=1;i<=2000;i++){
    for(int j=1;j<=2000;j++){
      if(i>j){ //stressfree
        dp[i][j] += dp[i][j-1];
        if(i-1 != j) dp[i][j] += dp[i-1][j]; 
      }else{
        dp[i][j] += dp[i-1][j];
        if(j != i) dp[i][j] += dp[i][j-1];
      }
      dp[i][j] = dp[i][j] % 1000000007ll;
    }
  }
  
  int T;
  cin>>T;
  FOR1(t,T+1){
    //read
    int a=0, b=0;
    string s;
    cin>>s;
    bool hypen=false;
    FOR(i, s.length()){
      if(s[i]=='-'){
        hypen = true;
        continue;
      }
      if(!hypen){
        a=a*10+s[i]-'0';
      }else{
        b=b*10+s[i]-'0';
      }
    }
    //write
    cout<<"Case #"<<t<<": "<< dp[a][b] <<" "<<dp[b][b] <<endl;    
  }
    
  return 0;
}

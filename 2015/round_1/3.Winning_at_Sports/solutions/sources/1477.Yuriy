#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <set>
#include <queue>
#include <memory.h>
#include <map>

using namespace std;

const int MAXN = 2010;
const long long M = 1e9 + 7;

int T, a, b;
long long dp[2][MAXN][MAXN];

void clear() {
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < MAXN; ++j)
            for (int k = 0; k < MAXN; ++k)
                dp[i][j][k] = 0;
}

long long mod(long long x) {
    return x >= M ? x - M : x;
}

int main() {
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    scanf("%d", &T);
    for (int t = 1; t <= T; ++t) {
        clear();
        scanf("%d-%d", &a, &b);
        
        dp[0][0][0] = 1;
        for (int i = 0; i <= a; ++i)
            for (int j = 0; j <= b; ++j) {
                if (i + 1 <= a && i + 1 > j)
                    dp[0][i + 1][j] = mod(dp[0][i + 1][j] + dp[0][i][j]);
                if (j + 1 <= b && i > j + 1)
                    dp[0][i][j + 1] = mod(dp[0][i][j + 1] + dp[0][i][j]);
            }
        
        dp[1][0][0] = 1;
        for (int i = 0; i <= a; ++i)
            for (int j = 0; j <= b; ++j) {
                if (i + 1 <= a && (i + 1 <= j || j == b))
                    dp[1][i + 1][j] = mod(dp[1][i + 1][j] + dp[1][i][j]);
                if (j + 1 <= b && i <= j + 1)
                    dp[1][i][j + 1] = mod(dp[1][i][j + 1] + dp[1][i][j]);
            }
        printf("Case #%d: %lld %lld\n", t, dp[0][a][b], dp[1][a][b]);
    }
    return 0;
}
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <queue>
#include <tuple>
#include <algorithm>
#include <cstdint>
#include <cstdio>
using namespace std;

#pragma region mint

// modulo integer
// M: modulo number
// * M < 2^31
// * M must be prime if you use division
template <int64_t M>
class mint {
public:
	mint():v(0) {}
	mint(int n): v(n % M) {}

	int64_t get() const { return v; }

	mint &operator+=(const mint &r) {
		v = (v + r.v) % M;
		return *this;
	}
	mint &operator-=(const mint &r) {
		v = (v - r.v + M) % M;
		return *this;
	}
	mint &operator*=(const mint &r) {
		v = (v * r.v) % M;
		return *this;
	}
	mint &operator/=(const mint &r) {
		return (*this) *= r.inv();
	}

	mint pow(int r) const {
		mint k = *this, ret = 1;
		while (r > 0) {
			if (r % 2 != 0) ret *= k;
			r /= 2;
			k *= k;
		}
		return ret;
	}

	mint inv() const {
		return pow(M - 2);
	}

private:
	int64_t v;
};

template <int64_t M>
inline mint<M> operator+(mint<M> l, const mint<M> &r) {
	return l += r;
}

template <int64_t M>
inline mint<M> operator-(mint<M> l, const mint<M> &r) {
	return l -= r;
}

template <int64_t M>
inline mint<M> operator*(mint<M> l, const mint<M> &r) {
	return l *= r;
}

template <int64_t M>
inline mint<M> operator/(mint<M> l, const mint<M> &r) {
	return l /= r;
}

template <int64_t M>
inline ostream &operator<<(ostream &os, const mint<M> &r) {
	return os << r.get();
}

#pragma endregion

typedef mint<1000000007UL> MINT;

MINT stress_free(int my, int opp, int x, int y,
				map<pair<int,int>, MINT> &tbl) {
	if (my == x && opp == y)
		return 1;
	if (my <= opp)
		return 0;

	auto key = make_pair(my, opp);
	if (tbl.count(key)) return tbl[key];
	MINT &ret = tbl[key];

	ret = 0;
	if (my < x)
		ret += stress_free(my + 1, opp, x, y, tbl);
	if (opp < y)
		ret += stress_free(my, opp + 1, x, y, tbl);
	return ret;
}

MINT stressful(int my, int opp, int x, int y,
			   map<pair<int, int>, MINT> &tbl) {
	if (my == x && opp == y)
		return 1;
	if (my > opp && opp != y)
		return 0;

	auto key = make_pair(my, opp);
	if (tbl.count(key)) return tbl[key];
	MINT &ret = tbl[key];

	ret = 0;
	if (my < x)
		ret += stressful(my + 1, opp, x, y, tbl);
	if (opp < y)
		ret += stressful(my, opp + 1, x, y, tbl);
	return ret;
}

int main() {
	int cases; cin >> cases;
	for (int cn = 1; cn <= cases; cn++) {
		int x, y;
		char c;
		cin >> x >> c >> y;

		map<pair<int, int>, MINT> tbl1, tbl2;
		MINT sfree = stress_free(1, 0, x, y, tbl1);
		MINT sful = stressful(0, 0, x, y, tbl2);

		cout << "Case #" << cn << ": " << sfree << " " << sful << endl;
	}

	return 0;
}

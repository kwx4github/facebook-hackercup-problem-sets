#include<stdio.h>
#include<cstring>
#include<string>
#include<iostream>
#include<cstdlib>
using namespace std;
typedef long long int ll;
ll ways[2002][2002];
ll catalan[2002][2002];
int MOD=1000000007;
#define scant() int tc;scanf("%d",&tc);
void precompute()
{
	memset(catalan,0,sizeof(catalan));
	for(int i=0;i<2002;i++)
		catalan[0][i]=1;
	for(int i=1;i<2002;i++)
	{
		for(int j=i;j<2002;j++)
		{
			if(j==i)
				catalan[i][j]=(catalan[i][j]+catalan[i-1][j])%MOD;
			else
				catalan[i][j]=(catalan[i][j]+(catalan[i-1][j]+catalan[i][j-1])%MOD)%MOD;
		}
	}
}
int main()
{
	precompute();
	scant();
	string s;
	int first,second;
	for(int m=0;m<tc;m++)
	{
		cin>>s;
		char * cstr = new char [s.length()+1];
		strcpy (cstr, s.c_str());
		char * p = std::strtok (cstr,"-");
		first = atoi(p);
		p = std::strtok(NULL," ");
		second = atoi(p);
		p = strtok(NULL," ");
		memset(ways,0,sizeof(ways));
		for(int j=0;j<=second;j++)
		{
			ways[0][j]=1;
		}
		for(int j=0;j<=first;j++)
		{
			if(first-j>second)
				ways[j][0]=1;
		}
		for(int i=1;i<=first-1;i++)
		{
			for(int j=1;j<=second;j++)
			{
				if(first-i-(second-j)== 1)
					ways[i][j]=(ways[i][j]+ways[i-1][j])%MOD;
				else
					ways[i][j]=(ways[i][j]+(ways[i-1][j]+ways[i][j-1])%MOD)%MOD;
			}
		}
		printf("Case #%d: %lld %lld\n",m+1,ways[first-1][second],catalan[second][second]);
	}
}
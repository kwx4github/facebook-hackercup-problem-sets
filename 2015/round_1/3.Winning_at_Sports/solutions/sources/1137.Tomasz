#include <iostream>
#include <queue>
using namespace std;

#define modulo 1000000007
#define limit 2000
typedef unsigned long int uli;

struct scoreType {
    uli m, o, multi;
    scoreType (uli a, uli b, uli c)
	{m = a; o = b; multi = c; }
};

uli modSum (uli a, uli b) {
    return (a % modulo + b % modulo) % modulo;
}

void fillLeft (uli ** tab) {
    uli i;
    queue <scoreType *> q;
    scoreType * s, * b;

    q . push (new scoreType (1, 0, 1));

    while (! q . empty ()) {
	s = q . front ();
	q . pop ();

	tab [s -> m] [s -> o] = modSum (tab [s -> m] [s -> o], s -> multi);

	if (s -> m == limit) {
	    for (i = s -> o + 1; i < limit; i ++)
		tab [s -> m] [i] = modSum (tab [s -> m] [i], s -> multi);
	}
	else {
	    if (! q . empty()) {
		b = q . back ();
		if (b -> m == s -> m + 1 && b -> o == s -> o) {
		    b -> multi = modSum (b -> multi, s -> multi);
		}
		else q . push (new scoreType (s -> m + 1, s -> o, s -> multi));
	    }
	    else q . push (new scoreType (s -> m + 1, s -> o, s -> multi));

	    if (s -> m - s -> o > 1)
		q . push (new scoreType (s -> m, s -> o + 1, s -> multi));
	}
	delete s;
    }
}

void fillRight (uli ** tab) {
    uli i;
    queue <scoreType *> q;
    scoreType * s, * b;

    q . push (new scoreType (0, 0, 1));

    while (! q . empty ()) {
	s = q . front ();
	q . pop ();
	
	if (s -> o < limit) {
	    if (s -> m < s -> o) {
		if (! q . empty()) {
		    b = q . back ();
		    if (b -> m == s -> m + 1 && b -> o == s -> o) {
			b -> multi = modSum (b -> multi, s -> multi);
		    }
		    else q . push (new scoreType (s -> m + 1, s -> o, s -> multi));
		}
		else q . push (new scoreType (s -> m + 1, s -> o, s -> multi));
	    }
	    else {
		for (i = s -> m + 1; i <= limit; i ++)
		    tab [i] [s -> o] = modSum (tab [i] [s -> o], s -> multi);
	    }
	    q . push (new scoreType (s -> m, s -> o + 1, s -> multi));
	}
	delete s;
    }
}

int main() {
    int T;
    uli i, j, a, b, ** tabL, ** tabR;
    char c;

    tabL = new uli * [limit + 1];
    tabR = new uli * [limit + 1];
    for (i = 1; i <= limit; i ++) {
	tabL [i] = new uli [i];
	tabR [i] = new uli [i];
	for (j = 0; j < i; j ++) tabL [i] [j] = tabR [i] [j] = 0;
    }

    fillLeft (tabL);
    fillRight (tabR);
    
    cin >> T;
    for (i = 0; i < T; i ++) {
	cin >> a >> c >> b;
	cout << "Case #" << i + 1 << ": " << tabL [a] [b] << " " << tabR [a] [b] << endl;
    }
    
    for (i = 1; i <= limit; i ++) {
	delete [] tabL [i];
	delete [] tabR [i];
    }
    delete [] tabL;
    delete [] tabR;

    return 0;
}

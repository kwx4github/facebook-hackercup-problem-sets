#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<stdlib.h>
#include<time.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

int ___INT(){ int ret; scanf("%d",&ret); return ret; }
#define INT ___INT()

typedef long long LL;
typedef pair<int,int> pii;

const int mod = 1000000007;
int dp1[4004][4004];
int dp2[4004][4004];
int x,y;

// stress free
int F1(int total, int my) {
	if (total == x+y){
		return int(my == x);		
	}
	int& ret=dp1[total][my];
	if (ret>-1)return ret;
	ret=0;
	// i score
	if (my + 1 > total-my) {
		ret = (ret + F1(total+1, my+1)) % mod;
	}

	// evil scores
	if (my > total-my+1) {
		ret = (ret + F1(total+1, my)) % mod;
	}

	return ret;
}

// stressful
int F2(int total, int my) {
	if (total == x+y) {
		return int(my == x);
	}
	int& ret=dp2[total][my];
	if(ret>-1)return ret;
	ret=0;
	
	// i score	
	if (my+1 > total-my) {
		if (total-my == y)
			ret = (ret + F2(total+1, my+1)) % mod;
	}
	else {
		ret = (ret + F2(total+1, my+1)) % mod;
	}

	// evil scores
	ret = (ret + F2(total+1, my)) % mod;
	return ret;
}

int main() {
	int T=INT;
	REP(t,1,T) {
		scanf("%d-%d",&x,&y);
		CLR(dp1,-1);CLR(dp2,-1);
		printf("Case #%d: %d %d\n", t, F1(0,0), F2(0,0));
	}
	return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string.h>
using namespace std;
#define REP(i,n) for(int i=0,n_=(n);i<n_;i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define FOR(i,a,b) for (int i=a,b_=b;i<=(b_);i++)
#define ALL(a) a.begin(),a.end()
#define SZ(a) (int)(a).size()
#define SORT(a) sort(ALL(a))
#define INF 1073741823
#define DEB(x) cout<<#x<<":"<<x<<"\n"
#define PB(b) push_back(b)
#define MOD 1000000007
//          1000000007
pair<long long, long long> DP[2001][2001];
bool hDP[2001][2001];

long long summ(long long a,long long b)
{
  return ((a%MOD)+(b%MOD))%MOD;
}
pair<long long,long long> sum(pair<long long,long long > a,pair<long long,long long > b) {
  return make_pair(summ(a.first,b.first), summ(a.second,b.second));
}
pair<long long,long long > go (int a, int b) {
  //DEB(a);
  //DEB(b);
  if (a<0 || b<0) return make_pair(0LL,0LL);

  if (a==0 && b==0) return DP[a][b]=make_pair(1LL,1LL); 
  if (hDP[a][b])
      return DP[a][b];
  if (b==0){
     hDP[a][b]=true;
     return DP[a][b]=make_pair(1LL,0LL);
  }

  if (a<b){
    hDP[a][b]=true;
     return DP[a][b]=make_pair(0LL, sum(go(a-1,b),go(a,b-1)).second);
  }
  if (a==b) {
    hDP[a][b]=true;
    return DP[a][b]=make_pair(0LL, go(a-1,b).second);
  }
  //DEB(a<<" "<<b); 
  if (hDP[a][b])
      return DP[a][b];
  long long stress = go(a-1,b).second;
  //if (a-1>b) stress = summ(stress, go(a,b-1).second);
  long long nostress = go(a,b-1).first;
  if (a-1>b) nostress = summ(go(a-1,b).first , nostress);
  DP[a][b]= make_pair(nostress,stress);
  hDP[a][b]=true;
  return DP[a][b]; 
}
int main ()
{
  //printf ("1\n2\n");
  //REP(i,500000) printf ("a");
  //printf ("\n");
  //REP(i,500001) printf ("a");
  //return 0;
  int cas;
  memset(hDP,0,sizeof (hDP));
  scanf ("%d",&cas);
  REP(www,cas)
  {
    int a,b;
    scanf ("%d-%d",&a,&b);
    printf("Case #%d: %lld %lld\n",www+1,go(a,b).first, go(b+1,b).second);
  }
  return 0;
}

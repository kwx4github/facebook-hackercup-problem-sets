/*This is by Technical Bangla from University of Dhaka*/
#include <bits/stdc++.h>
using namespace std;

#define pi acos(-1.0)
#define e 2.7182818284590451
#define eps 1e-19
#define in_d(x) scanf("%d",&x)
#define nl printf("\n")
#define MAX 2001
#define Mod 1000000007
#define MOD(a,m) ((a)%(m)+(m))%(m)
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
typedef long long int ll;
typedef unsigned long long int llu;

double sqr(double x) {return x*x;}
double distsqr(double x,double y,double a,double b) {return sqr((x-a))+sqr((y-b));}
double cosine_angle(double a,double b,double c) {return (double)(sqr(a)+sqr(b)-sqr(c))/((double)2.0*a*b);}

template <class T> T Max(T a, T b) {return a>b?a:b;}
template <class T> T Min(T a, T b) {return a<b?a:b;}
template <class T> T GCD(T a, T b) {if(!b) return a;return GCD(b,a%b);}
template <class T> void SWAP(T &a, T &b) {T temp=a;a=b;b=temp;return ;}

bool pr[MAX];
int prime[MAX/10],plen;
void PrimeGen()
{
    int i,j,k,l=sqrt(MAX)+1;pr[0]=pr[1]=1;for(i=4;i<MAX;i+=2) pr[i]=1;
    for(i=3;i<l;i+=2)
    {
        if(!pr[i]) for(j=i*i,k=i<<1;j<MAX;j+=k) pr[j]=1;
    }
    for(i=j=0;i<MAX;i++) if(!pr[i]) prime[j++]=i;plen=j;
}
int ExtendedEuclid(int a,int b,int c) {if(!a) return 0;return (b*ExtendedEuclid(b%a,a,-c)+c)/a;}
int ModInverse(int a,int m) {return MOD(ExtendedEuclid(a,m,1),m);}

int sfree[MAX][MAX],sful[MAX][MAX];

void Processing()
{
    int i,j;
    for(i=0,sfree[0][0]=sful[0][0]=1;i<MAX;i++)
    {
        for(j=0;j<i;j++)
        {
            if(j)
            {
                sfree[i][j]=(sfree[i-1][j]%Mod+sfree[i][j-1]%Mod)%Mod;
                sful[j][i]=(sful[j-1][i]%Mod+sful[j][i-1]%Mod)%Mod;
            }
            else sfree[i][j]=sful[j][i]=1%Mod;
        }
        sful[j][i]=(sful[j-1][i]%Mod+sful[j][i-1]%Mod)%Mod;
    }
}

int main()
{
    filein;
    fileout;
    int i,t,caseno=0,m,n;
    Processing();
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d-%d",&m,&n);
        printf("Case #%d: %d %d\n",++caseno,sfree[m][n],sful[n][n]);
    }
    return 0;
}

#include <iostream>
#include <utility>
#include <cassert>

using namespace std;

const long long mod = 1000000007;
const int bovengrens = 5000;

long long inverse(long long a) {
	long long b = mod;
	long long x = 0;
	long long y = 1;
	while (b != 0) {
		y -= (a / b) * x;
		swap(x, y);
		
		a %= b;
		swap(a, b);
	}
	return ((y % mod) + 2 * mod) % mod;

}

long long factorial[bovengrens];
long long choose(long long n, long long k) {
	return (inverse((factorial[k] * factorial[n - k]) % mod) * factorial[n]) % mod;
}

long long stressfree(long long A, long long B) {
	long long fraction = ((A - B) * inverse(A + B)) % mod;
	return (fraction * choose(A + B, A)) % mod;
}

long long stressful(long long A, long long B) {
	return (inverse(B + 1) * choose(2 * B, B)) % mod;
}

int main() {
	int T;
	cin >> T;
	assert(T >= 1 && T <= 100);
	factorial[0] = 1;
	for (long long i = 1; i < bovengrens; i++) {
		factorial[i] = (factorial[i - 1] * i) % mod;
	}
	for (int i = 0; i < T; i++) {
		int A, B;
		char c;
		cin >> A >> c >> B;
		assert(A >= 0 && A <= 2000);
		assert(c == '-');
		assert(B >= 0 && B <= 2000);
		assert(A > B);
		cout << "Case #" << (i + 1) << ": " << stressfree(A, B) << " " << stressful(A, B) << endl;
	}
	return 0;
}

#include <iostream>
#include <string>
#include <sstream>
#include <map>
#include <tuple>
#include <future>

using namespace std;

long long solve1(map<tuple<int, int>, long long>& c, int p1, int p2, int a, int b) {
	if (p1 == a && p2 == b) return 1;
	if (p1 > a || p2 > b || p1 <= p2) return 0;
	auto& r = c[make_tuple(p1, p2)];
	if (r != 0) return r;
	long long ret = (solve1(c, p1 + 1, p2, a, b) + solve1(c, p1, p2 + 1, a, b)) % 1000000007;
	return r = ret;
}

long long solve2(map<tuple<int, int>, long long>& c, int p1, int p2, int a, int b) {
	if (b == 0) return 1;
	if (p1 == a && p2 == b) return 1;
	if (p1 > a || p2 > b || p1 > p2) return 0;
	auto& r = c[make_tuple(p1, p2)];
	if (r != 0) return r;
	long long ret = (solve2(c, p1 + 1, p2, a, b) + solve2(c, p1, p2 + 1, a, b)) % 1000000007;
	return r = ret;
}

int main() {
	int T;
	cin >> T;
	vector<future<tuple<int, int>>> futures;
	for (int q = 1; q <= T; ++q) {
		string s;
		cin >> s;
		futures.push_back(async([s]()->tuple<int, int> {
			string _s(s);
			for (auto& c : _s) if (c == '-') c = ' ';
			stringstream ss(_s);
			int a, b;
			ss >> a >> b;
			map<tuple<int, int>, long long> c1, c2;
			return make_tuple(solve1(c1, 1, 0, a, b), solve2(c2, 0, 1, b - 1, b));
		}));
		//cout << "Case # " << q << ": " << solve1(c1, 1, 0, a, b) << " " << solve2(c2, 0, 1, b-1, b) << endl;
	}
	for (int q = 1; q <= T; ++q) {
		auto& t = futures[q - 1].get();
		cout << "Case # " << q << ": " << get<0>(t) << " " << get<1>(t) << endl;
	}
	return 0;
}
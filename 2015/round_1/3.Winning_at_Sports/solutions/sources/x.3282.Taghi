package Round1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Scanner;

public class Question3 {
	
	public static void main(String[] args) throws FileNotFoundException {
		FileInputStream stream = new FileInputStream(new File("C:\\Users\\tagi1_000\\Downloads\\winning_at_sports.txt"));
		Scanner scanner = new Scanner(stream);
		
		PrintWriter outFile = new PrintWriter("C:\\Users\\tagi1_000\\Downloads\\solutionsActualSports.txt");
		
		
		int numberOfCases = scanner.nextInt();
		for (int i=0;i<numberOfCases;i++)
		{
			String[] scores = scanner.next().split("-");
			int score1 = Integer.parseInt(scores[0]);
			int score2 = Integer.parseInt(scores[1]);
			// Bertrand's ballot problem ;)
			BigInteger stressFree = computeStressFree(score1, score2, true, false);
//			BigInteger stressFree = new BigInteger("1");
//			BigInteger stressFull = computeStressFull(score2, score2,stressFree);
			BigInteger stressFull = new BigInteger("0");
//			System.out.println(computeStressFree(3,1,false,false));
//			System.out.println(computeStressFree(1,0, false, false));
			for (int k=1;k<=score2;k++)
				stressFull = stressFull.add(computeStressFree(score2, score2-k, false, true));
			stressFull = stressFull.mod(new BigInteger("1000000007"));
//			long stressFull = 0;
			System.out.println("Case #" + (i+1) + ": " + stressFree + " " + stressFull);
			outFile.println("Case #" + (i+1) + ": " + stressFree + " " + stressFull);
		}
		outFile.close();
		scanner.close();
	}
	
	public static BigInteger computeStressFree(int score1, int score2, boolean mod, boolean full)
	{
		if (full && score1 == 1 && score2 == 0)
			return new BigInteger("1");
		
		BigInteger result = new BigInteger("1");
//		System.out.println(score1 + " " + score2);
		// Computation : (p+q-1 p-1) - (p+q-1 p)
		BigInteger numerator = new BigInteger("1");
		BigInteger denominator11 = new BigInteger("1");
		BigInteger denominator12 = new BigInteger("1");

		BigInteger denominator21 = new BigInteger("1");
		BigInteger denominator22 = new BigInteger("1");
		for (int i=1;i<=score1+score2-1;i++)
		{
			numerator = numerator.multiply(new BigInteger(String.valueOf(i)));
		}
		
		for (int i=1;i<=score1-1;i++)
		{
			denominator11 = denominator11.multiply(new BigInteger(String.valueOf(i)));
		}
		
		for (int i=1;i<=score1+score2-1-(score1 - 1);i++)
		{
			denominator12 = denominator12.multiply(new BigInteger(String.valueOf(i)));
		}
		
		for (int i=1;i<=score1;i++)
		{
			denominator21 = denominator21.multiply(new BigInteger(String.valueOf(i)));
		}
		
		for (int i=1;i<=score1+score2-1-(score1);i++)
		{
			denominator22 = denominator22.multiply(new BigInteger(String.valueOf(i)));
		}
		
//		System.out.println(numerator + " " + denominator11 + " " + denominator12 + " " + denominator21 + " " + denominator22);
		
		BigInteger denominator1 = denominator11.multiply(denominator12);
		BigInteger denominator2 = denominator21.multiply(denominator22);
		BigInteger first = numerator.divide(denominator1);
		BigInteger second = numerator.divide(denominator2);
		result = first.subtract(second);
		if (mod)
			result = result.mod(new BigInteger("1000000007"));
		
//		result = numerator/(denominator11 * denominator12) - numerator / (denominator21 * denominator22);
		return result;
	}
	
//	public static BigInteger computeStressFull(int score1, int score2, BigInteger stressFree)
//	{
//		BigInteger result = new BigInteger("1");
////		System.out.println(score1 + " " + score2);
//		// Computation : (p+q-1 p-1) - (p+q-1 p)
//		
//		// Idea for stress full is that, score2 dominates till score2-1.
//		BigInteger numerator = new BigInteger("1");
//		BigInteger denominator11 = new BigInteger("1");
//		BigInteger denominator12 = new BigInteger("1");
//
//		BigInteger denominator21 = new BigInteger("1");
//		BigInteger denominator22 = new BigInteger("1");
//		for (int i=1;i<=score1+score2-1;i++)
//		{
//			numerator = numerator.multiply(new BigInteger(String.valueOf(i)));
//		}
//		
//		for (int i=1;i<=score1-1;i++)
//		{
//			denominator11 = denominator11.multiply(new BigInteger(String.valueOf(i)));
//		}
//		
//		for (int i=1;i<=score1+score2-1-(score1 - 1);i++)
//		{
//			denominator12 = denominator12.multiply(new BigInteger(String.valueOf(i)));
//		}
//		
//		for (int i=1;i<=score1;i++)
//		{
//			denominator21 = denominator21.multiply(new BigInteger(String.valueOf(i)));
//		}
//		
//		for (int i=1;i<=score1+score2-1-(score1);i++)
//		{
//			denominator22 = denominator22.multiply(new BigInteger(String.valueOf(i)));
//		}
//		
////		System.out.println(numerator + " " + denominator11 + " " + denominator12 + " " + denominator21 + " " + denominator22);
//		
//		BigInteger denominator1 = denominator11.multiply(denominator12);
//		BigInteger denominator2 = denominator21.multiply(denominator22);
//		BigInteger first = numerator.divide(denominator1);
//		BigInteger second = numerator.divide(denominator2);
//		result = first.subtract(second);
//		
//		result = result.mod(new BigInteger("1000000007"));
//		return result;
//	}

}

// FBHC-R1-C.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
const int mod = 1000000007;
using namespace std;

using ll = long long;

#define lengthof(x) (sizeof(x) / sizeof(*(x)))

ll stressful[2001][2001];
ll stressfree[2001][2001];
bool stressfulVisited[2001][2001];
bool stressfreeVisited[2001][2001];
int _tmain(int argc, _TCHAR* argv[])
{
	int cases;
	cin >> cases;

	for (int cas = 1; cas <= cases; ++cas)
	{
		for (int i = 0; i < 2001; ++i)
		{
			for (int j = 0; j < 2001; ++j)
			{
				stressfree[i][j] = 0;
				stressful[i][j] = 0;
				stressfulVisited[i][j] = false;
				stressfreeVisited[i][j] = false;
			}
		}
		string str = "";
		int strLen = 0;
		int ours = 0, theirs = 0;
		cin >> str;
		strLen = (str.length());
		bool isTheirs = false;
		for (int i = 0; i < (int)strLen; ++i)
		{
			if (str[i] == '-')
			{
				isTheirs = true;
			}
			else
			{
				int digit = str[i] - '0';
				if (isTheirs)
				{
					theirs = theirs * 10 + digit;
				}
				else
				{
					ours = ours * 10 + digit;
				}
			}
		}

		deque<pair<int, int>> stressfulq;
		stressfulq.push_back(make_pair(ours, theirs));
		stressful[ours][theirs] = 1;
		stressfulVisited[ours][theirs] = true;
		while (!stressfulq.empty())
		{
			pair<int, int> p = stressfulq.front();
			stressfulq.pop_front();
			int currentOurs = p.first;
			int currentTheirs = p.second;
			//cerr << currentOurs << " " << currentTheirs << endl;
			if (currentOurs > 0)
			{
				if (!stressfulVisited[currentOurs - 1][currentTheirs])
				{
					stressfulVisited[currentOurs - 1][currentTheirs] = true;
					stressfulq.push_back(make_pair(currentOurs - 1, currentTheirs));
				}

				stressful[currentOurs - 1][currentTheirs] += stressful[currentOurs][currentTheirs];
				stressful[currentOurs - 1][currentTheirs] %= mod;
			}

			if (currentTheirs - currentOurs >= 1)
			{
				if (!stressfulVisited[currentOurs][currentTheirs - 1])
				{
					stressfulVisited[currentOurs][currentTheirs - 1] = true;
					stressfulq.push_back(make_pair(currentOurs, currentTheirs - 1));
				}

				stressful[currentOurs][currentTheirs - 1] += stressful[currentOurs][currentTheirs];
				stressful[currentOurs][currentTheirs - 1] %= mod;
			}
		}

		deque<pair<int, int>> stressfreeq;
		stressfreeq.push_back(make_pair(0, 0));
		stressfree[0][0] = 1;
		stressfreeVisited[0][0] = true;
		while (!stressfreeq.empty())
		{
			pair<int, int> p = stressfreeq.front();
			stressfreeq.pop_front();
			int currentOurs = p.first;
			int currentTheirs = p.second;

			if (ours > currentOurs)
			{
				if (!stressfreeVisited[currentOurs + 1][currentTheirs])
				{
					stressfreeVisited[currentOurs + 1][currentTheirs] = true;
					stressfreeq.push_back(make_pair(currentOurs + 1, currentTheirs));
				}

				stressfree[currentOurs + 1][currentTheirs] += stressfree[currentOurs][currentTheirs];
				stressfree[currentOurs + 1][currentTheirs] %= mod;
			}

			if (currentOurs - currentTheirs > 1 && theirs > currentTheirs)
			{
				if (!stressfreeVisited[currentOurs][currentTheirs + 1])
				{
					stressfreeVisited[currentOurs][currentTheirs + 1] = true;
					stressfreeq.push_back(make_pair(currentOurs, currentTheirs + 1));
				}

				stressfree[currentOurs][currentTheirs + 1] += stressfree[currentOurs][currentTheirs];
				stressfree[currentOurs][currentTheirs + 1] %= mod;
			}
		}
		cout << "Case#" << cas << " : " << stressfree[ours][theirs] << " " << stressful[0][0] << endl;
	}
	return 0;
}


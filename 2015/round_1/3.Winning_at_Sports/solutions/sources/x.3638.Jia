#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
int cache1[2001][2001], cache2[2001][2001];
//recursive version
int calcStressFree(int scoreAMax, int scoreBMax, int mod)
{
    ll res = 0;
    if(cache1[scoreAMax][scoreBMax] != -1){
        return cache1[scoreAMax][scoreBMax];
    }
    //scoreAMax scoreBMax comes from scoreAMax - 1 or scoreBMax - 1
    if(scoreAMax > scoreBMax){
        if(scoreAMax == 1){
            res = 1; //scoreBMax == 0
        }else{
            if((scoreAMax > 0) && (scoreAMax - 1 > scoreBMax)){
                res += calcStressFree(scoreAMax - 1, scoreBMax, mod);
                res %= mod;
            }
            if(scoreBMax > 0){ //scoreAMax must > scoreBMax - 1
                res += calcStressFree(scoreAMax, scoreBMax - 1, mod);
                res %= mod;
            }
        }
    }
    cache1[scoreAMax][scoreBMax] = res;
    return res;
}

int calcStressfull(int scoreA, int scoreB, int mod, int scoreBMax)
{
    ll res = 0;
    if(cache2[scoreA][scoreB] != -1){
        return cache2[scoreA][scoreB];
    }
    if((scoreA == 0) and (scoreB == 1)){ //the only non-zero one with index 0
        res = 1;//even if scoreB == scoreBMax
    }else{
        if(scoreB == scoreBMax){
            if(scoreA > 0){
                res += calcStressfull(scoreA - 1, scoreB, mod, scoreBMax);
                res %= mod;
            }
            if(scoreB > 0){
                res += calcStressfull(scoreA, scoreB - 1, mod, scoreBMax);
                res %= mod;
            }
        }else{
            if(scoreA <= scoreB){
                if(scoreA > 0){
                    res += calcStressfull(scoreA - 1, scoreB, mod, scoreBMax);
                    res %= mod;
                }
                if(scoreB > 0){
                    res += calcStressfull(scoreA, scoreB - 1, mod, scoreBMax);
                    res %= mod;
                }
            }
        }
    }
    cache2[scoreA][scoreB] = res;
    return res; 
}
 
int main(int argc, char **argv)
{
    //vector<vector<ll> > cache1(2000 + 1, vector<ll>(2000 + 1, 0));
    //vector<vector<ll> > cache2(2000 + 1, vector<ll>(2000 + 1, 0));
    int T; //[1, 100]
    scanf("%d", &T);
    int mod = 1000000007; 

    for(int ca = 1; ca <= T; ca ++){
        int scoreAMax, scoreBMax; //[0, 2000]
        if(scanf("%d-%d", &scoreAMax, &scoreBMax) != 2){
            abort();
        }
        //reset
        memset(cache1, -1, sizeof(cache1));
        memset(cache2, -1, sizeof(cache2));
        int cntStressFree = calcStressFree(scoreAMax, scoreBMax, mod);
        int cntStressfull = calcStressfull(scoreAMax, scoreBMax, mod, scoreBMax);
        printf("Case #%d: %d %d\n", ca, cntStressFree, cntStressfull);
    }
    return 0;
}

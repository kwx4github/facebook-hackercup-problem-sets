#include <bits/stdc++.h>

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define all(v) (v).begin(),(v).end()

#define VI vector<int>
#define PII pair<int,int>
#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lint long long int

#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debug2(x,y) {cerr <<#x <<" = " <<x << ", "<<#y<<" = "<< y <<endl; } 
#define debug3(x,y,z) {cerr <<#x <<" = " <<x << ", "<<#y<<" = "<< y << ", " << #z << " = " << z <<endl; } 
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
#define debugt(t,n) {{cerr <<#t <<" = "; FOR(it,0,(n)) cerr <<t[it] <<", "; cerr <<endl; }}

#define make( x) int (x); scanf("%d",&(x));
#define make2( x, y) int (x), (y); scanf("%d%d",&(x),&(y));
#define make3(x, y, z) int (x), (y), (z); scanf("%d%d%d",&(x),&(y),&(z));
#define make4(x, y, z, t) int (x), (y), (z), (t); scanf("%d%d%d%d",&(x),&(y),&(z),&(t));
#define makev(v,n) VI (v); FOR(i,0,(n)) { make(a); (v).pb(a);} 
#define IOS ios_base::sync_with_stdio(0)
#define HEAP priority_queue

#define read( x) scanf("%d",&(x));
#define read2( x, y) scanf("%d%d",&(x),&(y));
#define read3(x, y, z) scanf("%d%d%d",&(x),&(y),&(z));
#define read4(x, y, z, t) scanf("%d%d%d%d",&(x),&(y),&(z),&(t));
#define readv(v,n) FOR(i,0,(n)) { make(a); (v).pb(a);}

using namespace std;
#define max_n 4004

int mod = 1e9+7;
int bin[4005][4005];
char s[500];

void init(){
	FOR(i,0,max_n) bin[i][i] = bin[i][0] = 1;
	FOR(i,2,max_n){
		FOR(j,1,i) bin[i][j] = (bin[i-1][j-1]+bin[i-1][j]) %mod;
	}
}


void solve(){
	scanf("%s",s);
	int i = 0; 
	while(s[i]!='-') i++;
	s[i] = ' ';
	int p,q;
	sscanf(s,"%d%d",&p,&q);
	if(q==0) printf("1 1\n");
	else{
		int ans1 = (bin[p+q-1][p-1]-bin[p+q-1][p])%mod;
		int ans2 = (bin[2*q][q]-bin[2*q][q+1])%mod;
		printf("%d %d\n",(ans1+mod)%mod,(ans2+mod)%mod);
	}
}

int main(){
	init();
	make(tt);
	FOR(i,1,tt+1){
		printf("Case #%d: ",i);
		solve();
	}
}



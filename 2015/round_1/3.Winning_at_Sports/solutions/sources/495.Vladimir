import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;

public class C {

    private static final String FILE_IN = C.class.getSimpleName() + ".in";
    private static final String FILE_OUT = C.class.getSimpleName() + ".out";

    private final void solveTest(final int testId, final Scanner in, final PrintWriter out) throws Exception {

        String s = in.next();
        String[] parts = s.split("-");
        int a = Integer.parseInt(parts[0]);
        int b = Integer.parseInt(parts[1]);

        int resultFree = free[a][b];
        int resultFull = full[b][b];

        out.printf("Case #%d: %d %d%n", testId, resultFree, resultFull);
    }

    final int MAXN = 2001;
    final int MOD = (int) 1e9 + 7;

    final int[][] free = new int[MAXN][MAXN];
    final int[][] full = new int[MAXN][MAXN];

    private final void preProcess() throws Exception {
        free[1][0] = 1;
        for (int i = 1; i < MAXN; ++i) {
            for (int j = 0; j < i; ++j) {
                if (free[i][j] == 0) {
                    continue;
                }
                if (i + 1 < MAXN) {
                    free[i + 1][j] += free[i][j];
                    free[i + 1][j] %= MOD;
                }
                if (j + 1 < i) {
                    free[i][j + 1] += free[i][j];
                    free[i][j + 1] %= MOD;
                }
            }
        }

        full[0][0] = 1;
        for (int i = 0; i < MAXN; ++i) {
            for (int j = i; j < MAXN; ++j) {
                if (full[i][j] == 0) {
                    continue;
                }
                if (i + 1 <= j) {
                    full[i + 1][j] += full[i][j];
                    full[i + 1][j] %= MOD;
                }
                if (j + 1 < MAXN) {
                    full[i][j + 1] += full[i][j];
                    full[i][j + 1] %= MOD;
                }
            }
        }
    }

    private final void solve(final Scanner in, final PrintWriter out) throws Exception {
        preProcess();
        for (int testId = 1, testCount = in.nextInt(); testId <= testCount; ++testId) {
            solveTest(testId, in, out);
        }
    }

    public static void main(String[] _args) {
        final String[] args = _args;
        Thread th = new Thread(null, new Runnable() {
            @Override
            public void run() {
                runMain(args);
            }
        }, "test", 16 << 20);
        th.setPriority(Thread.MAX_PRIORITY);
        th.start();
        try {
            th.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static final void runMain(String[] args) {
        try {
            final Scanner in = new Scanner(new File(FILE_IN));
            final PrintWriter out = new PrintWriter(new File(FILE_OUT));
            new C().solve(in, out);
            out.close();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

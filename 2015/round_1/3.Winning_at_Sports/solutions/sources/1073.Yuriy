#include "stdafx.h"

#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <algorithm>
#include <set>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <memory>
#include <array>
#include <thread>
#include <future>

struct hash
{
    size_t operator()(const std::pair<int, int>& p) const { return p.first ^ p.second; }
};
std::unordered_map<std::pair<int, int>, int, hash> count_free;
std::unordered_map<std::pair<int, int>, int, hash> count_ful;

void add_mod(int& l, int r)
{
    l = (l + r) % 1000000007;
}

int calc_stressfree(int me, int him)
{
    if (me <= him)
    {
        return 0;
    }
    if (him <= 0)
    {
        return 1;
    }
    if (him == 1)
    {
        return me - 1;
    }

    int& map_count = count_free[{me, him}];
    if (map_count != 0)
    {
        return map_count;
    }

    int count = 0;
    if (me > him - 1)
    {
        add_mod(count, calc_stressfree(me - 1, him));
    }
    if (him == 1)
    {
        add_mod(count, 1);
    }
    else if (him == 2)
    {
        add_mod(count, me - 1);
    }
    else
    {
        add_mod(count, calc_stressfree(me, him - 1));
    }

    map_count = count;

    return count;
}

int calc_stressful_impl(int me, int him)
{
    if (me > him)
    {
        return 0;
    }
    if (me == 0)
    {
        return 1;
    }

    int& map_count = count_ful[{me, him}];
    if (map_count != 0)
    {
        return map_count;
    }

    int count = 0;
    add_mod(count, calc_stressful_impl(me - 1, him));
    add_mod(count, calc_stressful_impl(me, him - 1));

    map_count = count;

    return count;
}

int calc_stressful(int me, int him)
{
    return calc_stressful_impl(him, him);
}

int main()
{
    std::istringstream ins(R"(5
2000-1999
2000-1998
)");
    std::istream& in = 
        //ins
        std::cin
        ;

    std::string line;
    std::getline(in, line);
    int count = std::stoi(line);
    for (int i = 0; i != count; ++i)
    {
        std::getline(in, line);
        std::istringstream is(line);
        int me, him;
        char c;
        is >> me >> c >> him;

        auto stressfree = std::async([me, him] { return calc_stressfree(me, him); });
        auto stressful = std::async([me, him] { return calc_stressful(me, him); });

        std::cout << "Case #" << i + 1 << ": " << stressfree.get() << ' ' << stressful.get() << std::endl;
    }
}

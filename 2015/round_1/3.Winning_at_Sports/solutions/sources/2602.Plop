#!/usr/bin/python
import os
import sys

def pm(ans, sz):
        smat = [[str(ans[i][j]) for j in range(0,sz)] for i in range(0,sz)]
        lens = [max(map(len,col)) for col in zip(*smat)]
        fmt = '\t'.join('{{:{}}}'.format(x) for x in lens)
        table = [fmt.format(*row) for row in smat]
        print '\n'.join(table)
 


def main():

    MOD = 1000000007
    NMAX = 2001

    if len(sys.argv) > 1:
        filename = sys.argv[1]
        if os.path.isfile(filename):
            sys.stdin = open(filename)
            sys.stdout = open(filename.split('.')[0]+'.out','w')

    # pre-process sfree
    sfree = []
    sfree = [[0 for j in range(0,NMAX)] for i in range(0,NMAX)]
    # init values
    for i in range(1,NMAX):
        sfree[i][0] = 1

    # calculate recursion
    for j in range(1,NMAX):
        for i in range(j+1,NMAX):
            sfree[i][j] += sfree[i][j-1] % MOD
            if i-1 > j:
                sfree[i][j] += sfree[i-1][j] % MOD
            sfree[i][j] %= MOD

    # pre-process sfull
    sfull = []
    sfull = [[0 for j in range(0,NMAX)] for i in range(0,NMAX)]
    # init values
    for i in range(1,NMAX):
        sfull[i][0], sfull[0][i] = 1,1
    # calculate recursion
    for i in range(1,NMAX):
        for j in range(1,NMAX):
            if i>=j: 
                sfull[i][j] = (sfull[i][j] + sfull[i-1][j]) % MOD
            else:
                sfull[i][j] = (sfull[i][j] + (sfull[i-1][j]+sfull[i][j-1]) % MOD) % MOD

    for _t in range(1,int(raw_input())+1):
        you,opp = map(int,raw_input().split('-'))
        print("Case #%d: %d %d" % (_t,sfree[you][opp],sfull[you][opp]))
           
if __name__ == '__main__':
    main()


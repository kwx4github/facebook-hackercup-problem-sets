#include <algorithm>
#include <cstring>
#include <iostream>
#include <vector>

using namespace std;

const int MOD = 1000000007;

int stressfree[2001][2001], stressful[2001][2001];

int getfree(int, int);
int getful(int, int);

int getfree(int A, int B) {
	if(stressfree[A][B] != -1) return stressfree[A][B];
	if(A == 1) return stressfree[A][B] = 1;
	stressfree[A][B] = 0;
	if(A - 1 > B) stressfree[A][B] = getfree(A - 1, B);
	if(B > 0) stressfree[A][B] = (stressfree[A][B] + getfree(A, B - 1)) % MOD;
	return stressfree[A][B];
}
int getful(int A, int B) {
	if(stressful[A][B] != -1) return stressful[A][B];
	if(A + B == 1) return stressful[A][B] = 1;
	if(A >= B) return stressful[A][B] = getful(A - 1, B);
	stressful[A][B] = getful(A, B - 1);
	if(A > 0) stressful[A][B] = (stressful[A][B] + getful(A - 1, B)) % MOD;
	return stressful[A][B];
}

void solve(int t) {
	memset(stressful, -1, sizeof(stressful));
	int A, B;
	size_t ptr;
	string S;
	cin >> S;
	A = stoi(S, &ptr);
	++ptr;
	B = stoi(S.substr(ptr));
	cout << "Case #" << t << ": " << getfree(A, B) << ' ' << getful(A, B) << '\n';
}

int main() {
	ios_base::sync_with_stdio(false);
	memset(stressfree, -1, sizeof(stressfree));
	
	int T;
	cin >> T;
	for(int t = 1; t <= T; ++t) solve(t);
}

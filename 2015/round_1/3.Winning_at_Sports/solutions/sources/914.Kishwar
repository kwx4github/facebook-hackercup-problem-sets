#include<iostream>
#include<vector>
#include<stack>
#include<string>
#include<queue>
#include<map>
#include<algorithm>
#include<sstream>
using namespace std;
#include<stdio.h>
#include<time.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#define MAX 100
#define INF 1<<23

#define I1(a) scanf("%d",&a)
#define I2(a,b) scanf("%d %d",&a,&b)
#define I3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rep(i,s,e) for(i=s;i<e;i++)
#define repr(i,s,e) for(i=s;i>e;i--)


#define in(a) freopen(a,"r",stdin)
#define out(a) freopen(a,"w",stdout)
#define ll long long
ll BigMod(ll B,ll P,ll M){  ll R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R%M;}
#define ull unsigned long long

int N,M;
int DP[3000][3000];
int stress_free(int mine,int opposition){
    if(mine==N)return 1;
    if(opposition==M)return 1;
    if(DP[mine][opposition]!=-1)return DP[mine][opposition];
    int res=0;
    if(opposition+1<mine)res=(res%1000000007+stress_free(mine,opposition+1)%1000000007)%1000000007;
    res=(res%1000000007+stress_free(mine+1,opposition)%1000000007)%1000000007;
    return DP[mine][opposition]=res%1000000007;
}

int DP2[3000][3000];
int stressed(int mine,int opposition){
    if(mine==N)return 1;
    if(opposition==M)return 1;
    if(DP2[mine][opposition]!=-1)return DP2[mine][opposition];
    int res=0;
    if(mine+1<=opposition)res=(res%1000000007+stressed(mine+1,opposition)%1000000007)%1000000007;
    res=(res%1000000007+stressed(mine,opposition+1)%1000000007)%1000000007;
    return DP2[mine][opposition]=res%1000000007;
}
int main()
{
    in("in.txt");
    out("out.txt");

    int T,caseno=1;
    scanf("%d",&T);
    while(T--){
        printf("Case #%d: ",caseno++);
        scanf("%d-%d",&N,&M);
        memset(DP,-1,sizeof(DP));
        memset(DP2,-1,sizeof(DP2));
        printf("%d %d\n",stress_free(0,0),stressed(0,0));
    }
    return 0;
}

#include <algorithm>
#include <array>
#include <complex>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

typedef long long lli;

const int N = 4000;
const lli M = 1000000007;

lli dp[N + 1][N + 1];

void init() {
  memset(dp, 0, sizeof(dp));
  dp[0][0] = 1;
  for(int i = 0; i < N; ++i) {
    for(int j = 0; j < N; ++j) {
      dp[i + 1][j + 1] = (dp[i + 1][j + 1] + dp[i][j]) % M;
      if(j > 0) {
        dp[i + 1][j - 1] = (dp[i + 1][j - 1] + dp[i][j]) % M;
      }
    }
  }
}

pair<lli, lli> solve(lli a, lli b) {
  if(a <= b) return make_pair(0, 0);
  if(b == 0 && a > 1) return make_pair(1, 0);
  return make_pair(dp[a + b - 1][a - b - 1], dp[2 * b][0]);
}

int main() {
  init();
  int T;
  cin >> T;
  for(int t = 1; t <= T; ++t) {
    string s;
    cin >> s;
    lli a, b;
    for(int i = 0, size = s.size(); i < size; ++i) {
      if(s[i] == '-') {
        a = atoll(s.substr(0, i).c_str());
        b = stoll(s.substr(i + 1).c_str());
      }
    }
    const auto ans = solve(a, b);
    cout << "Case #" << t << ": " << ans.first << " " << ans.second << endl;
  }
  return 0;
}

#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>

using namespace std;

long long MOD = 1000000007;

long long DP[2500][2500];

long long N,M;

long long stressfree() {
    memset(DP,0,sizeof(DP));
    long long i,j,k,n,m,x,y;
    n = N + M;
    DP[1][0] = 1;
    for (i = 1;i < n;i++) {
        for (j = 0;j <= i && j <= N;j++) {
            k = i - j;
            if (k >= j) continue;
            if (k > M) continue;
            DP[j + 1][k] += DP[j][k];
            DP[j][k + 1] += DP[j][k];
            DP[j + 1][k] = DP[j + 1][k] % MOD;
            DP[j][k + 1] = DP[j][k + 1] % MOD;
        }
    }
    return DP[N][M];
}

long long stress() {
    memset(DP,0,sizeof(DP));
    long long i,j,k,n,m,x,y;
    n = 2 * M - 1;
    DP[0][1] = 1;
    for (i = 1;i < n;i++) {
        for (j = 0;j <= i && j <= N;j++) {
            k = i - j;
            if (k == M) continue;
            if (k < j) continue;
            DP[j + 1][k] += DP[j][k];
            DP[j][k + 1] += DP[j][k];
            DP[j + 1][k] = DP[j + 1][k] % MOD;
            DP[j][k + 1] = DP[j][k + 1] % MOD;
        }
    }
    long long res = 0;
    for (i = 0;i < M;i++) {
        res += DP[i][M];
        res = res % MOD;
    }
    return res;
}

int main() {
    clock_t st,ed;
    st = clock();
    ifstream filein;
    ofstream fileout;
    filein.open("winning_at_sports.txt",ios::in);
    //filein.open("A",ios::in);
    fileout.open("output",ios::out);
    int T;
    filein >> T;
    for (int z1 = 1;z1 <= T;z1++) {
        fileout << "Case #" << z1 << ": ";
        char c;
        filein >> N >> c >> M;
        long long A = stressfree();
        long long B = stress();
        fileout << A << ' ' << B << endl;
        cout << z1 << ' ' << A << ' ' << B << endl;
    }
    fileout.close();
    ed = clock();
    cout << double(ed -st) / double(CLOCKS_PER_SEC) << endl;
}
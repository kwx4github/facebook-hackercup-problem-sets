#pragma comment(linker, "/STACK:1267777216")
#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<cmath>
#include<iomanip>
#include<ctime>
#include<cctype>
#include<fstream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<cstdio>
#include<cstdlib>
#include<utility>
#include<algorithm>
#include<functional>
#include<cassert>
//#include<unordered_map>
#define ll long long
#define ull unsigned long long
#define Inf (1000*1000*1000 + 7)
#define InfL (ll)((ll)1000*1000*1000*1000*1000*1000 + 7)
#define pii pair < ll , ll >
#define mp make_pair
#define all(x) x.begin() , x.end()
#define sbstr(s, i, j) s.substr(i, j - i + 1)
#define in(n) ll (n); cin >> n
#define sqr(x) ((x)*(x))
#define PI 3.14159265358979
#define EPS 1e-6
#define all(x) x.begin() , x.end()
#define so(x) sort(all(x))
#define re(x) reverse(all(x))
using namespace std;
namespace
{
	ll binpow ( ll a , int n = Inf - 2 )
	{
		ll res = 1;
		while ( n )
		{
			if ( n & 1 ) 
			{
				res *= a;
				res %= Inf;
			}
			a *= a;
			a %= Inf;
			n >>= 1;
		}
		return res % Inf;

	}
	int C (int n, int k) {
		ll res = 1;
		for (int i=1; i<=k; ++i)
			res = ( ( ( ( res * ( n - k + i ) ) % Inf ) * binpow ( i ) ) ) % Inf;
		return ( res ) % Inf;
	}
	void run()
	{
		vector < ll > vec1 ( 2000 + 10 );
		vec1 [ 1 ] = 1;
		for ( int i = 2 ; i < vec1.size() ; i++ )
			vec1 [ i ] = ( ( vec1 [ i - 1 ] * 2 * ( ( 2 * i + 1 ) % Inf ) % Inf ) * binpow ( i + 2 ) ) % Inf;
		//cout << C ( 13 , 8 ) + vec [ 4 ] - C ( 10 , 5 )  << endl ;
		vector< vector<ull> > vec(2005, vector<ull>(2005, 0));
		vec[0][1] = 1;
		for (int i = 0; i < 2001; ++i){
			vec[i][i + 2] += vec[i][i+1];
			vec[i][i + 2] %= Inf;
			for (int j = i + 2; j < 2001; ++j){
				vec[i][j + 1] += vec[i][j];
				vec[i + 1][j]+=vec[i][j];
				vec[i][j + 1] %= Inf;
				vec[i + 1][j] %= Inf;
			}
		}
		int n;
		cin >> n;
		int i = 1;
		while ( n-- )
		{
			int a , b;
			char ch;
			cin >> a >> ch >> b;
			cout << "Case #" << i++ << ": " << vec [ b ] [ a ] << ' ' << vec1 [ b ] << endl;
		}
	}
}
int main()
{
	ios_base::sync_with_stdio( 0 );
#ifdef Levon
  //  freopen ( "in.txt" , "r" , stdin );
    freopen ( "out.txt" , "w" , stdout );
#endif
	cout << fixed << setprecision(13);
    run(); return 0;
}
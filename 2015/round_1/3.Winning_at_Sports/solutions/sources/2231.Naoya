#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <string>
#include <vector>
#include <deque>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<string> vs;
typedef vector<long long> vll;
#define sz(a)  int((a).size())
#define pb  push_back
#define all(c)  (c).begin(),(c).end()
#define mset(arr,val)  memset(arr,val,sizeof(arr))
#define tr(c,i)  for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define rep(var,n)  for(int var=0;var<(n);var++)
#define forr(var,from,to) for(int var=(from);var<=(to);var++)
#define found(s,e)  ((s).find(e)!=(s).end())
#define remove_(c,val) (c).erase(remove((c).begin(),(c).end(),(val)),(c).end())
#define lastc(str) (*((str).end()-1))

vector<string> split(string str, int delim=' ')
{
  vector<string> result;

  const char *s = str.c_str();
  if (delim == ' ') {
    for (const char *p=s; *p; p++) {
      if (*p == delim) s++;
      else break;
    }
    if (!*s) return result;

    for (const char *p=s; *p; p++) {
      if (*p == delim) {
        if (s < p) {
          string a(s,p-s);
          result.push_back(a);
        }
        s = p + 1;
      }
    }
    if (*s) result.push_back(s);
  } else {
    for (const char *p=s; *p; p++) {
      if (*p == delim) {
        string a(s,p-s);
        result.push_back(a);
        s = p + 1;
        if (*s == '\0') result.push_back("");
      }
    }
    if (*s) result.push_back(s);
  }

  return result;
}

vector<int> map_atoi(vector<string> nums)
{
	vector<int> vals(nums.size());
	for (int i=nums.size()-1; i>=0; i--) vals[i] = atoi(nums[i].c_str());
	return vals;
}

#define MOD 1000000007LL

long long stress_free(int me, int opp)
{
	vector<vector<ll> > dp(2, vector<ll>(2001, 0));
	dp[0][0] = dp[1][0] = 1;
	for (int t=2; t<=me; ++t) {
		int i1=t%2, i0=(t-1)%2;
		// printf("%d -> %d\n", i0, i1);
		rep(i,2001) dp[i1][i] = 0LL;
		for (int s=0; s<=t-2; ++s) {
			if (s > opp) break;
			for (int f=0; f<=s; ++f) {
				dp[i1][s] += dp[i0][f];
			}
			dp[i1][s] %= MOD;
		}
	}

	ll ans = 0LL;
	for(int i=0; i<=opp; ++i) {
		ll u = dp[me%2][i];
		ans += u;
	}
	return ans % MOD;
}
ll stressful(int me, int opp){
	vector<vector<ll> > dp(2, vector<ll>(2001, 0));
	dp[0][0] = dp[1][0] = 1;
	for (int t=2; t<=opp; ++t) {
		int i1=t%2, i0=(t-1)%2;
		rep(i,2001) dp[i1][i] = 0LL;
		for (int s=0; s<=t-1; ++s) {
			for (int f=0; f<=s; ++f) {
				dp[i1][s] += dp[i0][f];
			}
			dp[i1][s] %= MOD;
		}
	}

	ll ans = 0LL;
	for(int i=0; i<=me; ++i) {
		ll u = dp[opp%2][i];
		ans += u;
	}
	return ans % MOD;
}

int main(){
  int T; cin >> T;
  for(int t=1; t<=T; ++t) {
    string s; cin >> s;
    vector<int> ab = map_atoi(split(s, '-'));
    int a=ab[0], b=ab[1];
//    cout << a << ", " << b << endl;
    printf("Case #%d: %lld %lld\n", t, stress_free(a,b), stressful(a,b));
  }
  return 0;
}

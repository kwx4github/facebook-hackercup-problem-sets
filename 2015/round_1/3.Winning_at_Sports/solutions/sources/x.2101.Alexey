#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max(), N = 2001, MOD = 1e9 + 7;
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

li d[N][N][2];

void solve ()
{
	d[1][0][0] = 1;
	d[0][1][1] = 1;
	for (li i = 0; i < N; ++ i)
	{
		for (li j = 0; j < N; ++ j)
		{
			if (i > j)
			{
				if (j) d[i][j][0] += d[i][j - 1][0];
				if (i - 1 > j) d[i][j][0] += d[i - 1][j][0];
				if (d[i][j][0] >= MOD) d[i][j][0] -= MOD;
			}
			else
			{
				if (j - 1 >= i) d[i][j][1] += d[i][j - 1][1];
				if (i) d[i][j][1] += d[i - 1][j][1];
				if (d[i][j][1] >= MOD) d[i][j][1] -= MOD;
			}
		}
	}

	li tests;
    scanf("%ld", &tests);

    for (li test = 1; test <= tests; ++ test)
    {
        li a, b;
        scanf("%ld-%ld", &a, &b);
        printf("Case #%ld: %ld %ld\n", test, d[a][b][0], d[b][b][1]);
    }
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

int a, b;

inline bool read()
{
	return scanf("%d-%d", &a, &b) == 2;
}

const int N = 2000 + 3;
const int mod = 1000 * 1000 * 1000 + 7;

int z1[N][N];
int z2[N][N];

inline void solve()
{
	printf(" %d %d\n", z1[a][b], z2[b][b]);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;

	z1[1][0] = 1;
	z2[0][0] = 1;

	forn(i, N)
		forn(j, N)
			forn(k, 2)
			{
				int ni = i + k;
				int nj = j + (1 - k);
				if (ni >= N || nj >= N) continue;
				if (ni > nj) z1[ni][nj] = (z1[ni][nj] + z1[i][j]) % mod;
				if (ni <= nj) z2[ni][nj] = (z2[ni][nj] + z2[i][j]) % mod;
			}

	int tc;
	cin >> tc;
	forn(t, tc)
	{
		assert(read());
		printf("Case #%d:", t + 1);
		solve();
	}

    return 0;
}

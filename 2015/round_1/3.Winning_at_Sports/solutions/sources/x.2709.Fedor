#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
#include <map>
using namespace std;

#define fname "winning_at_sports"
#define REP(n) for (int i = 0; i < (int)n; ++i)
#define FOR(i,n) for (int i = 0; i < (int)n; ++i)
#define DB(a) #a " == " << (a) << ";	"
typedef long long int lli;

const int NMAX = (int)2e3+5, mod = (int)1e9+7;
int sfree[NMAX][NMAX], sful[NMAX][NMAX];

int A, B, ans1, ans2;

int fetch_stressful(int i, int j){
	if (max(i,j) > 2000 || min(i,j) < 0)
		return 0;
	else if (j == B && i <= A)
		return sful[i][j];
	else if (j < B && i <= j)
		return sful[i][j];
	return 0;
}

int fetch_stressfree(int i, int j){
	if (max(i,j) > 2000 || min(i,j) < 0)
		return 0;
	else if (j <= B && i > j)
		return sfree[i][j];
	return 0;
}


void solve(){
	scanf("%d-%d", &A, &B);
	sfree[0][0] = 0; sfree[0][1] = 0;
	sfree[1][0] = 1; 
	 sful[0][0] = 0;  sful[0][1] = 1;
	 sful[1][0] = 0;
	REP(A+1) FOR(j,B+1) if (i+j > 1) sfree[i][j] = (fetch_stressfree(i-1,j) + fetch_stressfree(i,j-1))%mod;
	ans1 = sfree[A][B];
	REP(A+1) FOR(j,B+1) if (i+j > 1)  sful[i][j] = ( fetch_stressful(i-1,j) +  fetch_stressful(i,j-1))%mod; 
	ans2 =  sful[A][B];
	
	//~ if (max(A,B) <= 7)
		//~ REP(A+1){
			//~ FOR(j,B+1) cerr << sful[i][j] << "	";
			//~ cerr << endl;
		//~ }
}


int main(){
	freopen(fname".txt", "r", stdin);
	#ifndef DBG
		freopen(fname".out", "w", stdout);
	#endif
	

	int T;
	cin >> T;
	REP(T){
		#ifndef DBG
			cerr << "Case #" << i+1 << ".\n";
		#endif
		solve();
		printf("Case #%d: %d %d\n", i+1, ans1, ans2);
	}
	
}

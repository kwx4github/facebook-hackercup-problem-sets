
#include<bits/stdc++.h>
#define lol long long int
#define ulol unsigned long long int 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
using namespace std;
#define Mod 1000000007
//taken from https://comeoncodeon.wordpress.com/category/algorithm/
/* This function calculates (a^b)%MOD */
long long pow(int a, int b, int MOD)
{
	long long x=1,y=a;
	while(b > 0)
	{
		if(b%2 == 1)
		{
			x=(x*y);
			if(x>MOD) x%=MOD;
		}
		y = (y*y);
		if(y>MOD) y%=MOD;
		b /= 2;
	}
	return x;
}

/*  Modular Multiplicative Inverse
    Using Euler's Theorem
    a^(phi(m)) = 1 (mod m)
    a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n, int MOD)
{
	return pow(n,MOD-2,MOD);
}

long long C(int n, int r, int MOD)
{
	vector<long long> f(n + 1,1);
	for (int i=2; i<=n;i++)
		f[i]= (f[i-1]*i) % MOD;
	return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}

int main(){
	int t;
	char s[1000];
	scanf("%d",&t);
	for(int x=1;x<=t;x++){
		scanf("%s",s);
		int a=0,b=0,n,i=0;
		n=strlen(s);
		while(1){
			if(s[i]=='-'){i++;break;}
			else a = a*10 + (s[i]-'0');
			i++;
		}
		while(1){
			if(i>=n)break;
			else 
				b = b*10 + (s[i]-'0');
			i++;
		}
		lol ncrmod,ans1,ans2,i1,i2;
		ncrmod = C(a+b,b,Mod);
		ans1=ncrmod;
		ans1=(ncrmod*(a-b))%Mod;
		i1=InverseEuler(a+b,Mod);
		ans1 =  (ans1*i1)%Mod;
		a=b;
		ncrmod = C(a+b,b,Mod);
		ans2=ncrmod;
		ans2 = (ncrmod *(a-b+1))%Mod;
		i2 = InverseEuler(a+1,Mod);
		ans2 = (i2*ans2)%Mod;
		
		printf("Case #%d: %lld %lld\n",x,ans1,ans2);

	}



	return 0;
}


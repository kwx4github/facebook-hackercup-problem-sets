#include <stdio.h>
#include <vector>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <cmath>
#include <sys/time.h>
#include <inttypes.h>

using namespace std;

vector<unsigned long> get_primes(unsigned long max){
    vector<unsigned long> primes;
    char *sieve;
    sieve = new char[max/8+1];
    // Fill sieve with 1
    memset(sieve, 0xFF, (max/8+1) * sizeof(char));
    for(unsigned long x = 2; x <= max; x++)
        if(sieve[x/8] & (0x01 << (x % 8))){
            primes.push_back(x);
            // Is prime. Mark multiplicates.
            for(unsigned long j = 2*x; j <= max; j += x)
                sieve[j/8] &= ~(0x01 << (j % 8));
        }
    delete[] sieve;
    return primes;
}

vector<int> get_nums(vector<unsigned long> primes) {
	vector<int> nums(10000001);

	// The number of primes is static.
	for (int i = 0; i < 9592; i++) {
        	for (int j = 1; j <= ceil(10000001 / primes[i]); j++) {
                	nums[primes[i] * j] = nums[primes[i] * j] + 1;
                }
        }

	return nums;
}

int distinct_k_count(vector<int>& nums, int low, int high, int k) {
	int count = 0;

	for (int i = low; i <= high; i++) {
		if (nums[i] == k) { count++; }
	}

	return count;
}

main() {
freopen("in.in", "r", stdin);
	freopen("out.out", "w", stdout);
vector<unsigned long> primes = get_primes(10000000);

	vector<int> nums = get_nums(primes);
	//cout << "K table generation: " << end - start << endl;

	int test, low, high, k;

	cin >> test;
	int q=1;

	for (int i = 0; i < test; i++) {
		cin >> low >> high >> k;

		//int j = distinct_k_count(nums, low, high, k);
		cout << "Case #"<<q++<<": "<<distinct_k_count(nums, low, high, k) << endl;
	}


	return 0;
}

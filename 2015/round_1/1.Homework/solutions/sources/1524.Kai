#include <iostream>
using namespace std;
const int MAXN = 10000010;

bool isPrime[MAXN];
int primacity[MAXN];
int primacitySum[10][MAXN];

void init() {
	memset(isPrime, 0, sizeof(isPrime));
	for (int i = 2; i < MAXN; i++) {
		isPrime[i] = true;
	}

	int maxPrimacity = 0;
	memset(primacity, 0, sizeof(primacity));
	for (int i = 2; i < MAXN; i++) {
		if (isPrime[i]) {
			primacity[i]++;
			for (int j = i + i; j < MAXN; j += i) {
				isPrime[j] = false;
				primacity[j]++;
			}
		}

		maxPrimacity = max(maxPrimacity, primacity[i]);
	}

	if (maxPrimacity >= 10) throw "Error";
	memset(primacitySum, 0, sizeof(primacitySum));
	for (int i = 0; i < 10; i++) {
		for (int j = 1; j < MAXN; j++) {
			primacitySum[i][j] = primacitySum[i][j - 1] + (primacity[j] == i);
		}
	}
}

int run() {
	int A, B, K;
	cin >> A >> B >> K;
	if (K >= 10) return 0;
	return primacitySum[K][B] - primacitySum[K][A - 1];
}

int main() {
	init();
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		cout << "Case #" << i + 1 << ": " << run() << endl;
	}
}
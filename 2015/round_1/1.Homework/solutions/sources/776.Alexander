import java.io.BufferedReader;
import java.util.Comparator;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.util.StringTokenizer;
import java.math.BigInteger;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author AlexFetisov
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("homework.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("output.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		solver.solve(1, in, out);
		out.close();
	}
}

class Homework {

    final static int MAXN = 10000000;

    static int[] primacy = new int[MAXN + 1];
    static int[] primes = IntegerUtils.generatePrimes(MAXN + 1);

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        for (int i = 2; i <= MAXN; ++i) {
            primacy[i] = getPrimacy(i);
        }
        int tests = in.nextInt();
        for (int test = 1; test <= tests; ++test) {
            int left = in.nextInt();
            int right = in.nextInt();
            int k = in.nextInt();
            int res = 0;
            for (int i = left; i <= right; ++i) {
                if (primacy[i] == k) {
                    ++res;
                }
            }
            out.println("Case #" + test + ": " + res);
        }
    }

    private int getPrimacy(int x) {
        int primacy = 0;
        for (int prime : primes) {
            if (prime * prime > x) {
                break;
            }
            if (x % prime == 0) {
                ++primacy;
            }
            while (x % prime == 0) {
                x /= prime;
            }
        }
        if (x != 1) {
            ++primacy;
        }
        return primacy;
    }
}

class IntegerUtils {
    public static int[] generatePrimes(int upLimit) {
        int[] isPrime = generateBitPrime(upLimit);
        ArrayList<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < upLimit; ++i) {
            if ((isPrime[i >> 5] >>> (i & 31) & 1) == 1) {
                result.add(i);
            }
        }
        int[] resultArray = new int[result.size()];
        for (int i = 0; i < result.size(); ++i) {
            resultArray[i] = result.get(i);
        }
        return resultArray;
    }

    private static int[] generateBitPrime(int upLimit) {
        int[] isPrime = new int[(upLimit + 31) >> 5];
        if (upLimit < 2) {
            return isPrime;
        }
        Arrays.fill(isPrime, -1);
        isPrime[0] &= -4;
        for (int i = 2; i * i < upLimit; ++i) {
            if ((isPrime[i >> 5] >>> (i & 31) & 1) == 1) {
                for (int j = i * i; j < upLimit; j += i) {
                    isPrime[j >> 5] &= (-1 - (1 << (j & 31)));
                }
            }
        }
        return isPrime;
    }

}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer stt;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            return null;
        }
    }

    public String nextString() {
        while (stt == null || !stt.hasMoreTokens()) {
            stt = new StringTokenizer(nextLine());
        }
        return stt.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(nextString());
    }

}


#include <cstdio>
#include <iostream>
#include <fstream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;

int T;
int A,B,K;
const int NUM = 10000001;
bool erat[NUM];
vector<int> primes;
//vector<int> primacities;

int primacity(int N) {
	if (erat[N]) return 1;
	int ret = 0;
	rep(i,primes.size()) {
		if (primes[i]>N) break;
		if (N%primes[i]==0) ret++;
	}
	return ret;
}

const int NUM2 = 2000001;

int primacity2(int N) {
	if (erat[N]) return 1;
//	if (N<NUM2 && primacities[N]!=-1) return primacities[N];
	//int ret = 0;
	if (N<2) return 0;
	rep(i,primes.size()) {
		if (primes[i]>N) break;
		//if (N%primes[i]==0) ret++;
		if (N%primes[i]==0) {
			int tnum = N;
			while (tnum%primes[i]==0) tnum /= primes[i];
			if (N>=NUM2) return 1 + primacity2(tnum);
			else return 1 + primacity2(tnum);
		}
	}
	return 0;
	//return ret;
}

int main()
{
	primes.resize(0);
//	primacities.resize(0);
	rep(i,NUM) erat[i] = 1;
	erat[0] = erat[1] = 0;
	for(int i=2;i<NUM;++i)
		if (erat[i]) {
			primes.push_back(i);
			int tnum = i + i;
			while (tnum<NUM) {
				erat[tnum] = 0;
				tnum += i;
			}
		}

	//std::cout << primes.size() << "\n";

	int tmp;

//	primacities.resize(NUM2);
//	primacities[0] = primacities[1] = 0;
//	for(int i=2;i<NUM2;++i) {
		//tmp = primacity(i);
//		primacities[i] = -1;//primacity(i);
		//if (i%10000==0) cout << i << "\n";
//	}

	clock_t tbeg = clock();
	
	fstream fin("homework.txt",ifstream::in);
    fstream fout("homework.out",ofstream::out);
    fin >> T;
	char sstr[1000];
    for(int jj=1;jj<=T;jj++)
    {
        fin >> A >> B >> K;
		int ret = 0;
		for(int i=A;i<=B;++i)
			if (primacity2(i)==K) ret++;
		//if (N==0) Nmin = Nmax = N;
        cout << "Case #" << jj << ": " << ret << "\n";
		fout << "Case #" << jj << ": " << ret << "\n";
    }
    fin.close();
    fout.close();
    cout << "running time=" << clock()/(double)CLOCKS_PER_SEC << " s\n";
	//cout << "running time2=" << (clock()-tbeg)/(double)CLOCKS_PER_SEC << " s\n";
    system("PAUSE");
    return 0;
}

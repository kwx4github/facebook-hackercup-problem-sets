#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <memory.h>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long llong;

const int N = 10500000;
int mnp[N];

const int K = 40;
vector<int> pos[K];

int main()
{
    memset(mnp, -1, sizeof(mnp));
    for (int i = 2; i < N; i++)
    {
        if (mnp[i] == -1)
        {
            mnp[i] = i;
            for (int j = (int)min((llong)N, (llong)i * i); j < N; j += i)
                if (mnp[j] == -1)
                    mnp[j] = i;
        }
    }
    for (int i = 2; i < N; i++)
    {
        int w = 0;
        for (int x = i; x != 1; )
        {
            int p = mnp[x];
            w++;
            while (x % p == 0)
                x /= p;
        }
        pos[w].push_back(i);
    }
    int T;
    scanf("%d", &T);
    for (int i = 0; i < T; i++)
    {
        int a, b, k;
        scanf("%d %d %d", &a, &b, &k);
        int ans = 0;
        if (k >= K)
            ans = 0;
        else
            ans = upper_bound(pos[k].begin(), pos[k].end(), b) - lower_bound(pos[k].begin(), pos[k].end(), a);
        printf("Case #%d: %d\n", i + 1, ans);
    }
}

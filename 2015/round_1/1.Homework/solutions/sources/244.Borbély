using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

namespace Homework
{
	class Program
	{
		static void Main(string[] args)
		{
			Initialize();
			using (var reader = new StreamReader(args[0]))
			using (var writer = new StreamWriter(args.Length > 1 ? args[1] : args[0].Replace(".in", ".out")) { NewLine = "\n" })
			{
				var t = reader.Next<int>();
				for (int i = 1; i <= t; i++)
				{
					var a = reader.Next<int>();
					var b = reader.Next<int>();
					var k = reader.Next<int>();
					var res = Solve(a, b, k);

					writer.WriteLine("Case #{0}: {1}", i, res);
				}
			}
		}

		private static readonly int[] primacities = new int[10000001];
		private static void Initialize()
		{
			var i = 2;
			while (i <= 10000000)
			{
				var j = i;
				while (j <= 10000000)
				{
					primacities[j]++;
					j += i;
				}
				while (i <= 10000000 && primacities[i] != 0) i++;
			}
		}

		private static int Solve(int a, int b, int k)
		{
			var res = 0;
			for (var i = a; i <= b; i++)
			{
				if (primacities[i] == k) res++;
			}

			return res;
		}
	}

	public static class StreamReaderExtensions
	{
		private static List<string> currLine;

		public static T Next<T>(this StreamReader reader)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			var res = (T)Convert.ChangeType(currLine[0], typeof(T), CultureInfo.InvariantCulture);
			currLine.RemoveAt(0);
			return res;
		}

		public static T[] Next<T>(this StreamReader reader, int count)
		{
			if (currLine == null || !currLine.Any()) currLine = reader.ReadLine().Split(' ').ToList();
			if (count == 0) count = currLine.Count;
			var res = currLine.Take(count).Select(i => (T)Convert.ChangeType(i, typeof(T), CultureInfo.InvariantCulture)).ToArray();
			currLine.RemoveRange(0, count);
			return res;
		}
	}

}

#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

const int SIZE = 10000050;

class FastSieve {
public:
    static const int MOD = 1000000007;
    typedef long long LL;
    vector<int> pl,lo,eu,rv;
    // 线性筛出[0,SIZE)范围内的质数
    // lo[]为最小质因子(或其本身)，eu[]为欧拉函数值，rv[]为关于MOD的逆元
    FastSieve(){
        lo=eu=rv=vector<int>(SIZE);
        lo[1]=eu[1]=rv[1]=1;
        for(int x=2;x<SIZE;x++){
            rv[x]=rv[MOD%x]*LL(MOD-MOD/x)%MOD;
            if(!lo[x]) pl.push_back(lo[x]=x),eu[x]=x-1;
            for(size_t i=0;i<pl.size() && x*pl[i]<SIZE;i++){
                lo[x*pl[i]]=pl[i];
                eu[x*pl[i]]=eu[x]*(pl[i]-(x%pl[i]!=0));
                if(x%pl[i]==0) break;
            }
        }
    }
    // 对n做质因数分解
    vector<LL> factorize(LL n){
        vector<LL> u;
        int i,t=sqrt(n+1);
        for(i=0;pl[i]<=t;i++) if(n%pl[i]==0){
            do{
                n/=pl[i];
                u.push_back(pl[i]);
            }while(n%pl[i]==0);
            t=sqrt(n+1);
        }
        if(n>1) u.push_back(n);
        return u;
    }
    // 判断n是否为质数
    bool prime(LL n){
        if(n<SIZE) return n>=2 && lo[n]==n;
        int i,t=sqrt(n+1);
        for(i=0;pl[i]<=t;i++) if(n%pl[i]==0) return false;
        return true;
    }
};

int cnt[SIZE];

int main(){
    FastSieve fs;
    for(int i=1;i<SIZE;i++){
        int x=i;
        while(x!=1){
            int t=fs.lo[x];
            if(t!=fs.lo[x/=t]) cnt[i]++;
        }
    }
    int cs;
    scanf("%d",&cs);
    for(int no=1;no<=cs;no++){
        int a,b,k,ans=0;
        scanf("%d%d%d",&a,&b,&k);
        for(int i=a;i<=b;i++) if(cnt[i]==k) ans++;
        printf("Case #%d: %d\n",no,ans);
    }
}

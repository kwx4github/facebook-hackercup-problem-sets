# include <string.h>
# include <stdio.h>


/// build prime table
const int maxn = 10000005;
bool isPrime[maxn];
int pt[maxn], n = 0;
void BuilPrimeTable()
{
    memset(isPrime, true, sizeof(isPrime));
    for (int i = 2; i < maxn; ++i) {
        if (isPrime[i]) {
            pt[n++] = i;
            if(i<40000) for(int j = i*i; j < maxn; j+=i) isPrime[j] = false;
        }
    }
  //  for (int i = 0; pt[i] < 100; ++i) printf("%d ", pt[i]);
}

/// build ans table
int ansTable[maxn];
void BuildAns()
{
    memset(ansTable, 0, sizeof(ansTable));
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j*pt[i] < maxn; ++j) ++ansTable[j*pt[i]];
    }
}

/// build query table
const int maxk = 11;
int query[maxn][maxk];
void BuildAnsTable(void)
{
    BuildAns();
    memset(query, 0, sizeof(query));
    for (int i = 1; i < maxn; ++i) {
        memcpy( query[i], query[i-1], sizeof(query[i]) );
        ++ query[i][ ansTable[i] ];
    }
}


# define testin freopen("homework.txt", "r", stdin)
# define testout freopen("out.txt", "w", stdout)

int main()
{
    testin;
    testout;

    BuilPrimeTable();
    BuildAnsTable();

    int T;
    scanf("%d", &T);

    int a, b, k;
    for (int ica = 1; ica <= T; ++ica) {
        scanf("%d%d%d", &a, &b, &k);
        int ans = 0;
        if (k < maxk) ans = query[b][k]-query[a-1][k];
        printf("Case #%d: %d\n", ica, ans);
    }

    return 0;
}



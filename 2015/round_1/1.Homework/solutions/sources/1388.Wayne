#include <iostream>
#include <cassert>
//#include <string>
#include <cstdio>
#include <deque>
#include <climits>
#include <cmath>

using namespace std;

int primes[500];
int nprimes = 1;
int prim[10000000];

void calculate_primes(){  
  primes[0] = 2;
  for(int n = 3; n < 3200; n+=2){
    for(int i = 0; i <= nprimes; i++){
      if(i == nprimes){
        primes[nprimes]=n;
        nprimes++;
      }
      if(n % primes[i]==0)
        break;
    }
  }
}

void calc_prim(int a, int b){

  for(int n = a; n <= b; n++){
    bool hasfactor[500] = {0};
    int current = n;
    int primacity = 0;
    bool hasdivided = 0;
    do {
      hasdivided = 0;
      for(int i = 0; primes[i]*primes[i] <= current && i < nprimes; i++){
        if(current%primes[i]==0){
          current /= primes[i]; 
          hasdivided = 1; 
          if(!hasfactor[i]){
            primacity++;
            hasfactor[i] = 1;
          }
          break;
        }
      }
    } while(hasdivided );
    if(current != 1){
      //current must be prime
      if(current>primes[nprimes-1]){
        primacity++;
        current = 1;
      }
      else{
        for(int i = 0; primes[i] <= current && i < nprimes; i++){
        if(current == primes[i]){
          current /= primes[i]; 
          if(!hasfactor[i]){
            primacity++;
            hasfactor[i] = 1;
          }
          break;
          }
        }
      }
    }
      
    prim[n] = primacity;
  }
}

int find2(int a, int b, int k){
  if(k>nprimes)
    return 0;
 
  int nprimacity = 0;
  for(int n = a; n <= b; n++){
    if(prim[n] == k){
      nprimacity++;
    }
      
  }
  return nprimacity;
}

int find(int a, int b, int k){
  if(k>nprimes)
    return 0;
 
  int nprimacity = 0;
  for(int n = a; n <= b; n++){
    bool hasfactor[500] = {0};
    int current = n;
    int primacity = 0;
    bool hasdivided = 0;
    do {
      hasdivided = 0;
      for(int i = 0; primes[i]*primes[i] <= current && i < nprimes; i++){
        if(current%primes[i]==0){
          current /= primes[i]; 
          hasdivided = 1; 
          if(!hasfactor[i]){
            primacity++;
            hasfactor[i] = 1;
          }
          break;
        }
      }
    } while(hasdivided );
    if(current != 1){
      //current must be prime
      if(current>primes[nprimes-1]){
        primacity++;
        current = 1;
      }
      else{
        for(int i = 0; primes[i] <= current && i < nprimes; i++){
        if(current == primes[i]){
          current /= primes[i]; 
          if(!hasfactor[i]){
            primacity++;
            hasfactor[i] = 1;
          }
          break;
          }
        }
      }
    }
      
    if(primacity == k){
      nprimacity++;
    }
      
  }
  return nprimacity;
}

int main(){
  calculate_primes();
  calc_prim(2, 10000000);
  int t, a, b, k;
  cin >> t;
  for(int test = 1; test <= t; test++){
    cin >> a; cin >> b; cin >> k;
    cout << "Case #" << test << ": " << find2(a,b,k) << endl;
  }
     
  
}

#include <math.h>
#include <stdio.h>
#include <vector>
#include <algorithm>

/* Used to generate prime_factors.txt

int NumberOfPrimeFactors(int a) {
	int prime_factors = 0;
	if (!(a & 1)) ++prime_factors;
	while (!(a & 1)) a >>= 1;

	int a_sqrt = sqrt(a);
	for (int i = 3; i <= a_sqrt; i += 2) {
		if (!(a % i)) ++prime_factors;
		while (!(a % i)) a /= i;
	}

	if (a > 1) ++prime_factors;
	return prime_factors;
}

int main() {
	for (int i = 2; i <= 10000000; ++i)
		printf("%d\n", NumberOfPrimeFactors(i));
	return 0;
}

*/

const int kMaxK = 10;

int main() {
	int prime_factors;
	std::vector<std::vector<int>> k_factors(kMaxK);
	FILE* prime_factors_f = fopen("prime_factors.txt", "r");
	for (int i = 2; i <= 10000000; ++i) {
		fscanf(prime_factors_f, "%d", &prime_factors);
		k_factors[prime_factors].push_back(i);
	}

	int t, a, b, k;
	scanf("%d", &t);
	for (int i = 1; i <= t; ++i) {
		scanf("%d%d%d", &a, &b, &k);
		if (kMaxK <= k) {
			printf("Case #%d: 0\n", i);
			continue;
		}

		auto A = std::lower_bound(k_factors[k].begin(),
								  k_factors[k].end(), a);
		auto B = std::upper_bound(k_factors[k].begin(),
								  k_factors[k].end(), b);
		printf("Case #%d: %d\n", i, B - A);
	}
	return 0;
}
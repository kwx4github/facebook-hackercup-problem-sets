#include <stdio.h>
#include <stdlib.h>

#define MAXB 10000000

int primes[MAXB][25];
int prime_n;

int init_primes() {
	primes[0][0]=1;primes[0][1]=2;
	for (int j = 2; j<25; j++) {
		long pp=2;
		pp*=primes[0][j-1];
		if (pp > MAXB) pp=1e8;
		primes[0][j]=pp;
	}
	int n = 1;
	for (int i=3; i< MAXB;i++) {
		int is_prime = 1;
		for (int j=0;j<n;j++) {
			if (primes[j][1]*primes[j][1] > i) break;
			if (i%primes[j][1] == 0) {
				is_prime = 0;
				break;
			}
		}
		if (is_prime) {
			primes[n][0] = 1;
			primes[n][1] = i;
			for (int j = 2; j<25; j++) {
				long pp=i;
				pp*=primes[n][j-1];
				if (pp > MAXB) pp=MAXB+1;
				primes[n][j]=pp;
			}
			n++;
		}
	}
	return n;
}

int too_big(long prod, int prime_i, int B, int rk) {
    if (prod > B) return 1;
	for (int i = 0; i< rk; i++) {
		prod *= primes[prime_i][1];
		if (prod > B) return 1;
		if (prime_i+1 < prime_n) prime_i++;
	}
	return 0;
}

int used[MAXB];
int work(int A, int B, int K) {
	if (K>=20) return 0;
	int cnt = 0;
	for (int i = 0; i< prime_n; i++) used[i] = -1;
	int pos = 0;
	long prod = 1;
	int pn = 0;
	while (pos >= 0) {
		if (K-pn > prime_n-pos) used[pos] = -1; //too few primes left
		else {
			int found = 0;
			if (used[pos] == -1) {
				int ok0 = 1- too_big(prod, pos+1, B, K-pn);
				if (ok0 == 0) used[pos] = 0;
				else found = 1;
			}
			if (found == 0) {
				if (too_big(prod*primes[pos][used[pos]+1], pos+1, B, K-pn-1)) used[pos] = -1; //too big
				else found = 1;
			}
			if (found) {
				used[pos]++;
				prod = prod*primes[pos][used[pos]];
				if (used[pos] > 0) pn++;
			}
		}
		if (used[pos] >=0) {
			if (pn == K) {
				if (prod >= A) {
					//printf("[%ld %d]\n", prod, primes[pos][1]);
					cnt ++;
				}
				//restore state at current pos
				prod = prod / primes[pos][used[pos]];
				pn --;
			}else { 
				pos ++; used[pos] = -1; //advance to next pos
			}
		}else {
			pos --; // go back
			if (pos < 0) return cnt;
			//restore state
			prod = prod / primes[pos][used[pos]];
			if (used[pos]) pn --;
		}
	}
	return 0;
}

int main(int argc, char * argv[]) {
	int T, A, B, K;
	prime_n = init_primes();
	/*
	printf("got %d primes [", prime_n);
	for (int i= 0; i < 10; i++) printf("%d,",primes[i][1]);
	printf("...]\n");
	*/
	scanf("%d", &T);
	for (int i = 0; i < T; i++) {
		scanf("%d %d %d", &A, &B, &K);
		printf("Case #%d: %d\n", i+1, work(A, B, K));
	}
	return 0;
}
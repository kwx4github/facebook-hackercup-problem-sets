import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

class Homework {

    static final List<Integer> primes = generatePrimes((int) Math.sqrt(Math
            .pow(10, 7)));

    /**
     * Generate all primes up to n
     */
    public static List<Integer> generatePrimes(int n) {
        List<Integer> primesList = new LinkedList<Integer>();
        List<Integer> primes = new ArrayList<Integer>();

        for (int i = 2; i <= n; i++) {
            primesList.add(i);
        }

        while (primesList.size() > 0) {
            int prime = primesList.get(0);
            for (int j = 1; j < primesList.size();) {
                if (primesList.get(j) % prime == 0) {
                    primesList.remove(j);
                } else {
                    j++;
                }
            }
            primes.add(prime);
            primesList.remove(0);
        }

        return primes;
    }

    public static int getPrimacity(int n) {
        int primacity = 0;
        for (Integer p : primes) {
            if (n % p == 0) {
                primacity++;
            }
        }
        return primacity;
    }

    public static String solve(int a, int b, int k) {
        int numPrimacity = 0;
        for (int i = a; i <= b; i++) {
            if (getPrimacity(i) == k) {
                numPrimacity++;
            }
        }
        return Integer.toString(numPrimacity);
    }

    public static void main(String[] args) throws Exception {
        File inputFile = new File(args[0]);
        Scanner s = new Scanner(inputFile);
        int numProblems = s.nextInt();
        for (int i = 0; i < numProblems; i++) {
            int a = s.nextInt();
            int b = s.nextInt();
            int k = s.nextInt();

            System.out.printf("Case #%d: %s\n", i + 1, solve(a, b, k));
        }
        s.close();
    }
}

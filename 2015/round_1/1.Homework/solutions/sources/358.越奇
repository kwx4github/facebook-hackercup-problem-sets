/*
ID: Sfiction
COMP: 2015HackerCup
ROUND: 1
PROB: A
*/
#include <cstdio>
#include <cstring>
#include <ctime>

const int MAXP=1E7;

int lenp,prime[665000];
int limit[1000][10];

void findprime(){
	static bool flag[MAXP+1];
	int tot;
	lenp=0;
	memset(flag,0,sizeof(flag));
	for (int j,i=2;i<=MAXP;++i){
		if (!flag[i])
			prime[lenp++]=i;
		for (j=0;j<lenp && MAXP/i>=prime[j];++j){
			flag[i*prime[j]]=true;
			if (i%prime[j]==0)
				break;
		}
	}
}

int ans;
int A,B,K;

void DFS(int depth,int from,int num){
	if (depth==0){
		if (num>=A)
			++ans;
		return;
	}
	int tot,i;
//	printf("%d\n",limit[from][depth]);
	for (i=from;i<1000 && B/num>=limit[i][depth];++i){
		for (tot=num;B/tot>=limit[i][depth];)
			DFS(depth-1,i+1,tot*=prime[i]);
	}
	if (i<1000)
		return;
	for (;i<lenp && B/num>=prime[i];++i)
		for (tot=num;B/tot>=prime[i];)
			DFS(depth-1,i+1,tot*=prime[i]);
}

int main(){
	findprime();
	for (int j,i=0;i<1000;++i){
		limit[i][1]=prime[i];
		for (j=2;MAXP/limit[i][j-1]>=prime[i+j-1];++j)
			limit[i][j]=limit[i][j-1]*prime[i+j-1];
		for (;j<=8;++j)
			limit[i][j]=MAXP+1;
	}
	int cas;
	scanf("%d",&cas);
	for (int casi=1;casi<=cas;++casi){
		scanf("%d%d%d",&A,&B,&K);
		ans=0;
		if (K<=8 && limit[0][K]<=B)
			DFS(K,0,1);
		printf("Case #%d: %d\n",casi,ans);
	}
	return 0;
}

#include <cstdio>
#include <vector>
#include <set>

#define MAXP 3162

std::vector<int> primes;
std::set<int> primes_set;

int primacities[10000001] = {0};
void compute_prime()
{
    bool sieve[MAXP+1] = {0};

    for (int i=2; i<=MAXP; i++) {
        if (sieve[i]) {
            continue;
        }

        for (int j=2*i; j<=MAXP; j+=i) {
            sieve[j] = true;
        }
    }

    for (int i=2; i<=MAXP; i++) {
        if (!sieve[i]) {
            primes.push_back(i);
            primes_set.insert(i);
        }
    }

    for (int i=MAXP+1; i<10000000; i++) {
        bool prime_check = true;
        for (int j=0; j<primes.size(); j++) {
            if ((i % primes[j]) == 0) {
                prime_check = false;
                break;
            }
        }
        if (prime_check) {
            primes_set.insert(i);
        }
    }
}

inline bool is_prime(int n)
{
    return !(primes_set.find(n) == primes_set.end()); 
}

int main (int argc, char** argv)
{
    int T;
    scanf("%d", &T);
   
    compute_prime();

    for (int i=2; i<=10000000; i++) {
        int primacity = 0;
        for (int j=0; j<primes.size(); j++) {
            if ((i % primes[j]) == 0) {
                int f = i/primes[j];
                if (f > MAXP && is_prime(f)) {
                    primacity += 2;
                }else{
                    primacity++;
                }
            }
        }
        primacities[i] = primacity;
    }

    for (int i=0; i<T; i++) {
        int A,B,K;
        scanf("%d %d %d", &A, &B, &K);
    
        int count = 0;
        
        for (int j=A; j<=B; j++) {
            if (primacities[j] == K) {
                count++;
            }
        }
       
        printf("Case #%d: %d\n", i+1, count);
    }

    return 0;
}

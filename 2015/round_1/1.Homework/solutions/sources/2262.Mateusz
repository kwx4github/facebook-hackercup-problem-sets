#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <utility>
#include <cmath>
#include <queue>
#include <stack>
#include <cassert>
#include <cstring>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#define VAR(i,v) __typeof(v) i = (v)
#define SIZE(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define REP(i,b) for(int i=0; i<(b); ++i)
#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)
#define FORD(i,a,b) for(int i=(a); i>=(b); --i)
#define FOREACH(i,c) for(VAR(i,(c).begin()); i != (c).end(); ++i)
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define NL printf("\n")

using namespace std;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef long long LL;

const int INF = 2147483640;
const int MAXN = 10000006;
int f[MAXN];
int g[MAXN][25];
int s[MAXN][25];

int fac(int x) {
	int k = 2;
	int sq = (int)ceil(sqrt(x));

	unordered_set<int> R;

	while(x > 1 && k <= sq) {
		bool ins = 0;
		while(x%k==0) {
			ins = 1;
			x /= k;
		}
		if(ins) R.insert(k);
		++k;
	}

	if(x>1) {
		R.insert(x);
	}

	return SIZE(R);
}

int main() {
	map<int,int> W;
	FOR(i,2,MAXN-2) {
		f[i] = fac(i);
		W[f[i]]++;
		g[i][f[i]]++;
	}

	FOR(i,1,MAXN-2) REP(j,25) s[i][j] = s[i-1][j] + g[i][j];

	int t;
	scanf("%d", &t);
	REP(i,t) {
		int a, b, k;
		int ret = 0;
		scanf("%d %d %d", &a, &b, &k);
		if(k >= 25) ret = 0;
		else ret = s[b][k] - s[a-1][k];
		printf("Case #%d: %d\n", i+1, ret);
	}

	return 0;
}

import java.util.*;
import java.io.*;

public class A {
	FastScanner in;
	PrintWriter out;

	int[] countPrimes;
	int maxN = 10 * 1000 * 1000 + 100; 
			
	public void precalc() throws IOException {	
		System.out.println("started"); long st = System.currentTimeMillis();
		countPrimes = new int[maxN + 1];
		for (int i = 2; i <= maxN; ++i) {
			int countDivisors = 0;
			int p = i;
			for (int j = 2; j * j <= p; ++j) {
				if (p % j == 0)
					countDivisors++;
				while (p % j == 0)
					p /= j;
			}
			if (p != 1)
				countDivisors++;
			countPrimes[i] = countDivisors;
		}
		System.out.println("precalc finished " + (System.currentTimeMillis() - st));
	}
	
	public void solve() throws IOException {
		int a = in.nextInt(), b = in.nextInt(), k = in.nextInt();
		int ans = 0;
		for (int i = a; i <= b; ++i)
			if (countPrimes[i] == k)
				ans++;
		out.println(ans);
	}

	public void run() {
		try {
			in = new FastScanner(new File("a.in"));
			out = new PrintWriter(new File("a.out"));

			precalc();
			
			int tests = in.nextInt();
			for (int test = 0; test < tests; ++test) {
				out.print("Case #" + (test + 1) + ": ");
				solve();
			}

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		FastScanner(File f) {
			try {
				br = new BufferedReader(new FileReader(f));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}
	}

	public static void main(String[] arg) {
		new A().run();
	}
}
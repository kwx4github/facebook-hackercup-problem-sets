import java.io.OutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.util.HashSet;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Primacity solver = new Primacity();
		solver.solve(1, in, out);
		out.close();
	}
}

class Primacity {
    private int getPrimacity(int x) {
        HashSet<Integer> set = new HashSet<Integer>();
        int tx = x;
        for(int i = 2;i*i<=tx;i++) {
            while(x%i==0) {
                set.add(i);
                x/=i;
            }
        }
        if(x!=1)
            set.add(x);
        return set.size();
    }
    public void solve(int testNumber, InputReader in, PrintWriter out) {

        short count[][] = new short[27][10000007];
        for(int i = 2;i<=10000000;i++) {
            count[getPrimacity(i)][i]++;

        }

        int tcase = in.nextInt();
        for(int i =0;i<tcase;i++) {
            int A = in.nextInt();
            int B = in.nextInt();
            int K = in.nextInt();
            if(K>26) {
                out.println("Case #"+Integer.toString(i+1)+": "+0);
                continue;
            }
            int count1 = 0;
            for(int j = A;j <= B;j++) {
                count1 += count[K][j];
            }
            out.println("Case #"+Integer.toString(i+1)+": "+ count1);
        }
    }
}

class InputReader {

    private InputStream stream;
    int curCharIndex = 0;
    int charsInBuf = 0;
     byte buf[] = new byte[16*1024];

    public InputReader(InputStream stream) {
        this.stream = stream;
    }


    public int readChar() {

        if (curCharIndex >= charsInBuf) {
            curCharIndex = 0;
            try {
                charsInBuf = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (charsInBuf <= 0)
                return -1;
        }
        return buf[curCharIndex++];
    }


    public int nextInt() {

        int c;
        do {
            c = readChar();
        }while(isWhitespace(c));

        int sign = 1;
        if (c == '-') {
            c = readChar();
            sign = -1;

        }
        int res = 0;
        do {
            res *= 10;
            res += c - '0';
            c = readChar();
        } while (!isWhitespace(c) && c!=-1);
        return sign * res;
    }


    /*
    * For the purpose of compatibilty with Chelper Chrome extension
     */


    private boolean isWhitespace(int c) {
        return  c==' ' || c=='\n'|| c=='\r' || c=='\t';
    }
}


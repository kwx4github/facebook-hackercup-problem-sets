#include <string>
#include <cstring>
#include <iostream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cassert>
using namespace std;

/*PREWRITTEN CODE BEGINS HERE*/
#define PB push_back
#define SIZE(x) (int)((x).size())

#define REP(i,n) for(int i=0,_n=(n); i<_n; ++i)
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; ++i)
#define RESET(a,c) memset(a,(c),sizeof(a))


typedef vector<int> VI;
//zwraca wszystkie liczby pierwsze <= n, czas dzialania O(n)
VI MKPRIMES(int n) {
	if( n < 2 ) return VI();
	vector<bool> isprime(n + 1, true);
	
	for(int i = 4; i <= n; i += 2) isprime[i] = false;

	for(int i = 3; i * i <= n; i += 2) if(isprime[i]) 
		for(int j = i * i; j <= n; j += i) isprime[j] = false;
	
	VI ret;
	for(int i = 2; i <= n; ++i)	
		if(isprime[i]) ret.PB(i);
	return ret;
}
/*PREWRITTEN CODE ENDS HERE*/
inline int RI() { int xx; scanf("%d",&xx); return xx; }
typedef long double LD;
const int INF = 1010000000;
const double EPS = 1e-9;
/*SOLUTION BEGINS HERE*/

const int MAX = 20 * 1000 * 1000;
VI primes;
int divs[MAX];

void solve(void)
{
  int a, b, k;
  scanf("%d %d %d", &a, &b, &k);
  int ret = 0;
  FOR(i, a, b) {
    if (divs[i] == k) ++ret;
  }
  
  printf("%d\n", ret);
}

void preproc() {
  primes = MKPRIMES(MAX);
  RESET(divs, 0);
  REP(i, SIZE(primes)) {
    for (int j = primes[i]; j < MAX; j += primes[i]) {
      ++divs[j];
    }
  }
}

int main(void)
{
	int T, C = 1;
  preproc();
	scanf("%d", &T);
	while(T--) { printf("Case #%d: ",C++); solve(); }
	return (0);
}

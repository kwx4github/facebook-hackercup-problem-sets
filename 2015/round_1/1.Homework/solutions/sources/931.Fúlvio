#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

bool prime[10000010];
int cnt[10000010];
vector<int> primalidade[100];

void crivo(){
	memset(cnt,0,sizeof cnt);
	for(int i = 0;i<10000010;i++)
		prime[i] = true;
	prime[0] = prime[1] = false;
	for(int i = 2;i<10000010;i++){
		if(prime[i]){
			for(int j = i;j<10000010;j+=i){
				cnt[j]++;
				if(j!=i)prime[j] = false;
			}
		}
		primalidade[cnt[i]].push_back(i);
	}
}

int main(){

	crivo();

	int c  = 1;
	int t;
	cin>>t;
	while(t--){
		ll a,b,k;
		cin>>a>>b>>k;
		cout<<"Case #"<<c++<<": ";
		if(k>=100)
			cout<<0<<endl;
		else{
			vector<int>::iterator low,up;
	  		low= lower_bound (primalidade[k].begin(), primalidade[k].end(), a); 
	  		up= upper_bound (primalidade[k].begin(), primalidade[k].end(), b); 
			cout<<(up-primalidade[k].begin()) - (low-primalidade[k].begin())<<endl;
		}
	}

    return 0;
}
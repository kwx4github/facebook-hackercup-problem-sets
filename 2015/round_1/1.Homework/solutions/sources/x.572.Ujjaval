// directives 
	#include <stdio.h>
	#include <vector>
	#include <map>
	#include <set>
	#include <deque>
	#include <queue>
	#include <algorithm>
	#include <iostream>
	#include <cmath>
	#include <cstring>
	#include <typeinfo>
	#include <sstream>
// 
using namespace std;
// macros 
	#define FOR(i,a,b)      for(int i(a);i<b;++i)
	#define REP(i,n)        FOR(i,0,n)
	#define FORD(i,a,b)      for(int i(a-1);i>=b;--i)
	#define CL(a,x)         memset(a,x,sizeof(a))
	#define FL(a,x)			fill_n(a,sizeof(a)/sizeof(a[0]),x)
	#define asort(a,n)		sort(a,a+n)
	#define vsort(v,n)		sort(v.begin(), v.begin()+n)
	#define sz(x)			x.size()
	#define all(x)			x.begin(), x.end()
	#define SSTR( x )		dynamic_cast< std::ostringstream & >( ( std::ostringstream() << std::dec << x ) ).str()
	#define TI(x)		int x = rint()
	#define TII(x,y)		int x = rint(),y = rint()
	#define TIII(x,y,z)		int x = rint(),y = rint(),z = rint()
// 

typedef long long LL;
typedef vector<int> vi;
int rint() { int x; if(scanf("%d",&x)!=1) return -1; return x; }
LL rLL() { LL x; if(scanf("%I64d",&x)!=1) return -1; return x; }
string rstring() { static char buf[100000]; if(scanf("%s",buf)!=1) return ""; return buf; }

const int LIM = 10000000;

int fac[LIM + 2];
bool vis[LIM + 2];
int maxfac;
vector<vi> buck;
void gen() {
	maxfac = 0;
	REP(i,LIM+1) vis[i]=1, fac[i] = 0;
	for(int i=2; i<= LIM; i++)
	{
		if (vis[i]) {
			for(int j=1; i*j <= LIM; j++) {
				fac[i*j]++;
				vis[i*j]=0;
				maxfac = max (maxfac, fac[i*j]);
			}
		}
	}
	buck.resize(maxfac+1);
	for(int i=2; i<=LIM; i++) buck[fac[i]].push_back(i);
}

int test(int a, int b, int k) {
	if (k > maxfac) return 0;
//	REP(i,sz(buck[k])) cout << buck[k][i] << " "; cout << endl;
	int x = lower_bound(all(buck[k]), a) - buck[k].begin();
	int y = lower_bound(all(buck[k]), b) - buck[k].begin();
	if (buck[k][y] > b) y--;
//	for(int i=x; i<=y; i++) cout << buck[k][i] << " "; cout << endl;
	if (x > y) return 0;
	return y - x + 1;
}

int main()
{
	gen();
	TI(T);
	REP(t,T) {
		TIII(a,b,k);
		printf("Case #%d: %d\n", t+1, test(a,b,k));
	}
	return 0;
}

#include <bits/stdc++.h>

typedef long long ll;
const int N = 10000010;
int marker[N], primacity[N];
std::vector<ll> primes;
std::map<int, std::vector<int>> map;

void solve() {
    int a, b, c;
    assert(scanf("%d %d %d", &a, &b, &c));

    int answer = 0;
    if (map.count(c) != 0) {
        std::vector<int>& s = map[c];

        auto left = lower_bound(s.begin(), s.end(), a),
             right = lower_bound(s.begin(), s.end(), b);
        
        if (left != s.end() && *left <= b) {
            if (right == s.end() || *right > b)
                right--;
            
            answer = right-left+1;
        }
    }

    printf("%d\n", answer);
}

void precalc() {
    int p = 2;
    while (p < N) {
        if (!marker[p]) {
            primes.push_back(p);
            for (int j = p; j<N; j += p)
                marker[j] = true;
        }

        p++;
    }

    for (int i = 2; i < N; i++) {
        int calc = 0;
        int tmp_i = i;
        for (int j = 0; j < (int) primes.size() && primes[j]*primes[j] <= tmp_i; j++) {
            bool flag = false;
            while (tmp_i % primes[j] == 0) {
                flag = true;
                tmp_i /= primes[j];
            }

            calc += flag;
        }

        if (tmp_i > 1)
            calc++;

        primacity[i] = calc;
        if (map.count(calc) == 0)
            map[calc] = std::vector<int>();
        map[calc].push_back(i);
    }
}

int main() {

    precalc();
    std::cerr << std::fixed << std::setprecision(6) << std::clock() / CLOCKS_PER_SEC << "\n";

    int t;
    assert(scanf("%d", &t));

    for (int i = 0; i < t; i++) {
        printf("Case #%d: ", i+1);
        solve();
    }
}

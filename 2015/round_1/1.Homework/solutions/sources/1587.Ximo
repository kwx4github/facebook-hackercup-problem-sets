// compile: g++ -Wall -std=c++11 -O3 homework.cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <vector>
using namespace std;

typedef long long int LL;
typedef pair<int,int> PII;

const int MAX = 10000010;

int main(int argc, char*argv[]) {
    ios_base::sync_with_stdio(false);

    // eratostenes-like sieve
    vector<int> primacity(MAX+1);
    int maxP = 0; // maximum primacity found
    for (int i = 2; i < MAX; ++i) {
        maxP = max(maxP, primacity[i]);
        if (primacity[i])
            continue;
        for (int j = i; j < MAX; j+=i)
            primacity[j]++;
    }

    // summed table for each primacity up to maxP (8)
    vector<vector<int>> acum(maxP, vector<int>(MAX+1, 0));
    for (int i = 0; i < maxP; ++i) {
        acum[i][0] = 0;
        for (int j = 1; j <= MAX; ++j) {
            acum[i][j] = acum[i][j-1];
            if (primacity[j] == i+1)
                acum[i][j]++;
        }
    }

    // answer the queries just looking into the summed table
    LL T, A, B, K;
    cin >> T;
    for (int t = 1; t <= T; ++t) {
        cin >> A >> B >> K;
        int cnt=0;
        if (K <= maxP)
            cnt = acum[K-1][B] - acum[K-1][A-1];
        printf("Case #%d: %d\n", t, cnt);
    }

    return EXIT_SUCCESS;
}

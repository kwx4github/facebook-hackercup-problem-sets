#include <vector>
#include <iostream>
#include <cmath>
#include <cstring>
using namespace std;

const int MAX_N = 10000010;
int minFactor[MAX_N];
int numFactor[MAX_N];

void era(){

	minFactor[0] = minFactor[1] = -1;

	for(int i=2; i<=MAX_N ; i++)
		minFactor[i] = i;

	int sqrtn = int(sqrt(MAX_N));

	for (int i= 2; i<= sqrtn; i++){
		if (minFactor[i] == i ){
			for (int j= i*i; j<= MAX_N ; j += i)
				if ( minFactor[j] == j )
					minFactor[j] = i;
		}
	}

}

int factor(int n){

	if( numFactor[n]!= -1)
		return numFactor[n];

	if ( minFactor[n] == n )
		return numFactor[n] = 1;

	int original_n= n;

	int dup = 1;
	int factor_save= minFactor[n];
	n /= minFactor[n];
	
	while ( n> 1){
		int temp = minFactor[n];
		n /= temp;
		if( factor_save!= temp){
			dup ++;
			factor_save = temp;
		}	
	}			
	return numFactor[original_n] = dup;
}

int main(){

	int cases;
	cin >> cases;

	era();
	memset( numFactor, -1 , sizeof(numFactor));
	numFactor[1] = 1;
	for(int i =1; i<= cases; i++){
		int cmp, lo, hi;
		 cin>> lo; cin>>hi; cin >> cmp;

		int count =0;
		for (int ind = lo ; ind<= hi; ind++)
			if (factor(ind) == cmp)
				count++;
		cout << "Case #" << i << ": " << count << endl;

	}
}

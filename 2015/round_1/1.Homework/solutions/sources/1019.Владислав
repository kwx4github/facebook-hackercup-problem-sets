#include <fstream>
#include <vector>

using namespace std;

const int N = 10000000;
int lowestPrime[N + 1];
vector<int> primes;

void precountSieve();
int countAppropriateNumbers(int, int, int);

int main()
{
    ifstream fin("in.txt");
    ofstream fout("out.txt");

    precountSieve();
    int t;
    fin >> t;
    for (int i = 0; i < t; i++)
    {
        int a, b, k;
        fin >> a >> b >> k;

        if (k >= 9)
            fout << "Case #" << (i + 1) << ": " << 0 << endl;
        else
            fout << "Case #" << (i + 1) << ": " << countAppropriateNumbers(a, b, k) << endl;
    }
    return 0;
}

void precountSieve()
{
    for (int i = 2; i <= N; i++) {
        if (lowestPrime[i] == 0) {
            lowestPrime[i] = i;
            primes.push_back(i);
        }
        for (int j = 0; j < (int)primes.size() && primes[j] <= lowestPrime[i] && i * primes[j] <= N; j++)
            lowestPrime[i * primes[j]] = primes[j];
    }
}

int countPrimeDivisors(int n)
{
    int cnt = 0, p = -1;
    while (lowestPrime[n] != n)
    {
        if (lowestPrime[n] != p)
        {
            cnt ++;
            p = lowestPrime[n];
        }
        n /= lowestPrime[n];
    }
    if (p != lowestPrime[n])
        cnt ++;

    return cnt;
}

int countAppropriateNumbers(int a, int b, int k)
{
    int cnt = 0;
    for (int i = a; i <= b; i++)
        if (countPrimeDivisors(i) == k)
            cnt ++;

    return cnt;
}






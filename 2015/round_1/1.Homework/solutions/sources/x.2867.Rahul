#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <array>
#include <set>
#include <iomanip>

using namespace std;


const int MAX = 10000000;
vector<int> UniquePrimeFactors(MAX + 1, 0);


void GenerateUniquePrimeFactors()
{
    for (int i = 2; (i * i) <= MAX; ++i)
    {
        if (UniquePrimeFactors[i] != 0)
        {
            continue;
        }

        for (int j = 2; (i * j) <= MAX; ++j)
        {
            ++UniquePrimeFactors[i * j];
        }
    }

    for (int i = 2; i <= MAX; ++i)
    {
        if (UniquePrimeFactors[i] == 0)
        {
            UniquePrimeFactors[i] = 1;
        }
    }
}


int main()
{
    GenerateUniquePrimeFactors();

    int maxUnique = *max_element(UniquePrimeFactors.cbegin(), UniquePrimeFactors.cend());

    vector<vector<int>> countCache(maxUnique + 1, vector<int>(MAX + 1, 0));

    for (int i = 2; i <= MAX; ++i)
    {
        for (int k = 1; k <= maxUnique; ++k)
        {
            if (UniquePrimeFactors[i] == k)
            {
                countCache[k][i] = 1;
            }

            countCache[k][i] += countCache[k][i - 1];
        }
    }

    int T;
    cin >> T;

    for (int c = 1; c <= T; ++c)
    {
        int A, B, K;
        cin >> A >> B >> K;

        if (A > B)
        {
            swap(A, B);
        }

        int result;
        if (K > maxUnique)
        {
            result = 0;
        }
        else
        {
            result = countCache[K][B] - countCache[K][A - 1];
        }

        cout << "Case #" << c << ": " << result << endl;
    }

    return 0;
}

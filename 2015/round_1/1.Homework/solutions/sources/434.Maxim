#ifdef MG
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X &a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X &a) { return a * a; }
template<typename X, typename Y> inline ostream& operator<< (ostream& out, const pair <X, Y>& p) { return out << '(' << p.x << ", " << p.y << ')'; }
template<typename X> inline ostream& operator<< (ostream& out, const vector<X>& p) { forn(i, sz(p)) { if (i != 0) out << ' '; out << p[i]; } return out; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = acosl(ld(-1));

int lf, rg, k;

inline bool read()
{
	return scanf("%d%d%d", &lf, &rg, &k) == 3;
}

const int N = 10 * 1000 * 1000 + 13;

int szp, p[N];
int mind[N];

inline void prepareDivisors()
{
	szp = 0;
	
	mind[1] = 1;
	
	fore(i, 2, N - 1)
	{
		if (mind[i] == 0)
			mind[i] = i, p[szp++] = i;
			
		for (int j = 0; j < szp && p[j] <= mind[i] && i * 1ll * p[j] < N; j++)
			mind[i * p[j]] = p[j];
	}
}

int cnt[N];

const int M = 20;
int s[M][N];

inline void prepare()
{
	prepareDivisors();
	
	cnt[1] = 0;
	fore(i, 2, N - 1)
	{
		int x = i, p = mind[i];
		assert(x % p == 0);
		while (x % p == 0) x /= p;
		
		cnt[i] = cnt[x] + 1;
		assert(cnt[i] < M);
		s[cnt[i]][i]++;		
	}
	
	forn(i, M)
		forl(j, N - 1)
			s[i][j] += s[i][j - 1];
}

inline int sum(int s[N], int lf, int rg)
{
	if (lf > rg) return 0;
	return s[rg] - (lf == 0 ? 0 : s[lf - 1]);
}

inline void solve(int test)
{
	printf("Case #%d: ", test + 1);
	
	if (k >= M)
		puts("0");
	else
		printf("%d\n", sum(s[k], lf, rg));
}

int main()
{
#ifdef MG
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#endif
	
	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	prepare();
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		assert(read());
		solve(test);
	}
	
#ifdef MG
	cerr << "=== TIME: " << clock() << " ===" << endl;
#endif

	return 0;
}

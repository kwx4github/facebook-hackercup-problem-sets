using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace FB1
{
	class ProgramR1F1
	{
		static int[,] numbers;
		static int[] primes;
		static int[] produs;
		static int primeCount;

		static void Main(string[] args)
		{
			GetPrimes();

			StreamReader sr = new StreamReader("input.txt");
			string input = sr.ReadLine();
			string output = string.Empty;

			int nrCount = int.Parse(input);

			for (int count = 1; count <= nrCount; count++)
			{
				string[] inputList = sr.ReadLine().Split(' ');
				int A = int.Parse(inputList[0]), B = int.Parse(inputList[1]), K = int.Parse(inputList[2]);
				int result = Case(A, B, K);

				output += string.Format("Case #{0}: {1}\r\n", count, result);
				Console.WriteLine("Case #{0}: {1}", count, result);
			}

			sr.Close();

			output = output.TrimEnd();
			StreamWriter sw = new StreamWriter("output.txt");
			sw.Write(output);
			sw.Close();

			Console.WriteLine("\r\nEND");
			Console.ReadLine();
		}

		static int Case(int A, int B, int K)
		{
			if (K > produs.Length)
				return 0;
			int p = 1;
			for (int i = 0; i < K; i++)
			{
				p *= primes[i]; 
			}
			if (B < p)
				return 0;

			int count = 0;
			int res = 0;
			for (int nr = A; nr <= B; nr++)
			{
				count = 0;

				if (nr >= p)
				{
					bool isPrime = true;
					for (int l = 0; l < primeCount; l++)
					{
						if (nr % primes[l] == 0)
						{
							isPrime = false;
							count++;
							if (count > K)
								break;
						}
						if (isPrime && primes[l] > Math.Sqrt(nr))
						{
							isPrime = true;
							count = 1;
							break;
						}
					}
				}

				if (count == K)
					res++;
			}
				
			return res;
		}

		static void GetPrimes()
		{
			int MAX = 3163;
			int k;
			numbers = new int[MAX, 2];
			for (int i = 0; i < MAX; i++)
			{
				numbers[i, 0] = i;
				numbers[i, 1] = 1;
			}
			numbers[0, 1] = 0;
			numbers[1, 1] = 0;
			primeCount = 1;
			for (int i = 2; i < MAX / 2 + 1; i++)
			{
				if (numbers[i, 1] == 1)
				{
					k = 2 * i;
					while (k < MAX)
					{
						numbers[k, 1] = 0;
						k += i;
					}
				}
			}

			primeCount = 0;
			for (int i = 0; i < MAX; i++)
			{
				if (numbers[i, 1] == 1)
				{
					primeCount++;
				}
			}

			primes = new int[primeCount];
			primeCount = 0;
			for (int i = 0; i < MAX; i++)
			{
				if (numbers[i, 1] == 1)
				{
					primes[primeCount] = i;
					primeCount++;
				}
			}

			k = 0;
			int p = 1;
			while (p < 10000000)
			{
				p *= primes[k];
				k++;
			}

			produs = new int[k];
			k = 0;
			p = 1;
			while (p < 10000000)
			{
				p *= primes[k];
				produs[k] = p;
				k++;
			}
		}
	}
}

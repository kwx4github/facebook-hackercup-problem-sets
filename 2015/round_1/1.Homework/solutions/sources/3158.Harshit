#include<bits/stdc++.h>
using namespace std;
#define SI(x)      scanf("%d", &(x))
#define SII(x,y)   scanf("%d%d",&(x), &(y))
#define SS(x) 	   scanf("%s", &(x))
#define SF(x) 	   scanf("%f", &(x))
#define SFF(x,y)   scanf("%f%f",&(x),&(y))
#define REP(i,n)   for(int i=0; i<(n); i++)
#define FOR(i,a,b) for(int i=(a); i<=(b); i++)
#define SZ(x) ((int)(x).size())
#define MP make_pair
#define PB push_back
#define MINS(x,y,z) min((x), min((y), (z)))
#define MAXS(x,y,z) max((x), max((y), (z)))
#define MOD 1e9+7
#define INF  INT_MAX
#define NINF INT_MIN
#define F first  
#define S second 
#define MAX 1e7+2

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef pair<int,int> PII;
typedef pair<ll, ll> PLL;

bool isPrime[10000000+5];
map<int, int> primacity;
vector<int> primes;

void seive() {
      isPrime[0] = isPrime[1] = false;
      for(int i=2;i<sqrt(MAX)+2;i++) {
	    if( isPrime[i] ) {
		  primes.push_back(i);
		  for(int j=i*2;j<sqrt(MAX)+2;j+=i) {
			isPrime[j] = false;
		  }
	    }
      }
}

void findAllPrimacity() {
      int a = 2, b = MAX;
      for(int i=a;i<b;i++) {
	    if( isPrime[i] && (i < sqrt(MAX) - 5) ) { primacity[i] = 1; continue; }
	    int tmp = i;
	    int ct=0;
	    for(int j=0;j < primes.size() && primes[j] <= tmp;j++) {
		  if( tmp%primes[j] == 0 ) {
			ct++;
			while( tmp>1 && tmp%primes[j] == 0 ) tmp/=primes[j];
		  }
	    }
	    if( tmp > 1 ) ct ++;
	    primacity[i] = ct;
      }
}

int findPrimacity(int a, int b, int k) {
      int ret=0;
      for(int i=a;i<=b;i++) {
	    if( primacity[i] == k ) {
		  //printf("%d ", i);
		  ret++;
	    }
      }
      return ret;
}

int main() {
      memset(isPrime, true, sizeof(isPrime));
      //printf("Running seive ...\n");
      seive();
      //printf("Completed seive ...\n");
      primacity.clear();
      //printf("Running find all primacity ....\n");
      findAllPrimacity();
      //printf("Completed find all primacity ....\n");
      int t;
      SI(t);
      int A, B, K;
      for(int i=1;i<=t;i++) {
	    SI(A); SI(B); SI(K);
	    printf("Case #%d: %d\n", i, findPrimacity(A, B, K));
      }
      return 0;
}


#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <set>
#include <string>
#include <map>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <list>
#include <deque>
#include <algorithm>

using namespace std;

static const int MAX = 10000010;
static const int BLOCK = 3162;
static const int N_BLOCKS = ( MAX - 1 ) / BLOCK + 1;
static int Primarity[ 1 + MAX ];
static bool Prime[ 1 + MAX ];
static int Count[ N_BLOCKS ][ 24 ];

class Solution
{
    int Result;
    int A, B, K;
public:
    static void Init()
    {
        int i, j;
        memset( Primarity, 0, sizeof( Primarity ) );
        memset( Prime, 1, sizeof( Prime ) );
        for( i = 2; i <= MAX; ++i )
        {
            if( !Prime[ i ] )
                continue;
            for( j = i; j <= MAX; j += i ) 
            {
                ++Primarity[ j ];
                Prime[ j ] = false;
            }
        }

        for( i = 0; i * BLOCK <= MAX; ++i )
            Calc( i * BLOCK + 1, ( i + 1 ) * BLOCK, Count[ i ] );
    }

    static void Calc( int a, int b, int count[] )
    {
        int i;
        for( i = a; i <= b && i <= MAX; ++i )
        {
            ++count[ Primarity[ i ] ];
        }
    }

    void Work()
	{
        int i;
        if( K < 24 )
        {
            int count[ 24 ] = { 0 };
            if( B - A < 2 * BLOCK )
            {
                for( i = A; i <= B; ++i )
                    ++count[ Primarity[ i ] ];
            }
            else
            {
                for( i = A; i % BLOCK != 1; ++i )
                    ++count[ Primarity[ i ] ];
                for( i /= BLOCK; ( i + 1 ) * BLOCK <= B; ++i )
                    count[ K ] += Count[ i ][ K ];
                for( i = i * BLOCK + 1; i <= B; ++i )
                    ++count[ Primarity[ i ] ];
            }
            Result = count[ K ];
        }
        else
            Result = 0;
	}
	
	void Read()
	{
        scanf( "%d%d%d", &A, &B, &K );
	}

	void Write( int t )
	{
		printf( "Case #%d: %d\n", t, Result );
	}
};

vector< Solution > solution;

int main()
{
	int i, t;
    Solution::Init();
	scanf( "%d", &t );
	solution.resize( t );
	for( i = 0; i < t; ++i )
		solution[ i ].Read();
#pragma omp parallel for schedule(dynamic, 1)
	for( i = 0; i < t; ++i )
		solution[ i ].Work();
	for( i = 0; i < t; ++i )
		solution[ i ].Write( i + 1 );
	return 0;
}

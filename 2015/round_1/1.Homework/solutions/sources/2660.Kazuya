#include<map>
#include<set>
#include<list>
#include<cmath>
#include<queue>
#include<stack>
#include<cstdio>
#include<string>
#include<vector>
#include<complex>
#include<cstdlib>
#include<cstring>
#include<climits>
#include<numeric>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<functional>

#define MP make_pair
#define PB push_back
#define ALL(x) (x).begin(),(x).end()
#define REP(i,n) for(int i=0;i<(n);i++)
#define REP1(i,n) for(int i=1;i<(n);i++)
#define REP2(i,d,n) for(int i=(d);i<(n);i++)
#define RREP(i,n) for(int i=(n);i>=0;i--)
#define CLR(a)      memset((a),0,sizeof(a))
#define MCLR(a)     memset((a),-1,sizeof(a))
#define RANGE(x,y,maxX,maxY) (0 <= (x) && 0 <= (y) && (x) < (maxX) && (y) < (maxY))

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI > VVI;
typedef vector<string> VS;
typedef vector<LL> VLL;
typedef pair<int, int> PII;

const int INF = 0x3f3f3f3f;
const LL INFL = 0x3f3f3f3f3f3f3f3fLL;
const double EPS = 1e-9;

const int DX[] = { 1, 0, -1, 0 }, DY[] = { 0, -1, 0, 1 };


class PrimeFactor
{
public:
	int n;
	vector<int> factor;
	PrimeFactor(int n)
		: n(n), factor(n + 1, -1)
	{
		for (int i = 2; i <= n; ++i)
		{
			if (factor[i] == -1)
			{
				for (int j = i; j <= n; j += i)
					factor[j] = i;
			}
		}
	}

	map<int, int> prime_factor_with_num(int x)
	{
		map<int, int> pf;
		for (int i = x; i > 1;)
		{
			int f = factor[i];
			++pf[f];
			i /= f;
		}
		return pf;
	}

	vector<int> prime_factor(int x)
	{
		vector<int> p;
		for (int i = x; i > 1;)
		{
			int f = factor[i];
			p.push_back(f);
			i /= f;
		}
		sort(p.begin(), p.end());
		p.erase(unique(p.begin(), p.end()), p.end());
		return p;
	}

	int prime_count(int x)
	{
		set<int> p;
		for (int i = x; i > 1;)
		{
			int f = factor[i];
			p.insert(f);
			i /= f;
		}
		if (p.count(x) == 1){
			p.erase(x);
		}
		int res = p.size();
		if (res == 0){
			res++;
		}

		return res;
	}
};

int main(){
	PrimeFactor pf(10000001);
	int maxnum = 0;
	vector<vector<int> > memo;
	REP(i, 8){
		memo.PB(VI());
	}
	REP2(i, 2, 10000001){
		memo[pf.prime_count(i) - 1].PB(i);
	}

	int t;
	cin >> t;
	REP(i, t){
		int a, b, k;
		cin >> a >> b >> k;
		if (8 < k){
			cout << "Case #" << (i + 1) << ": 0" << endl;
		}
		else{
			k--;
			int res = upper_bound(memo[k].begin(), memo[k].end(), b) - lower_bound(memo[k].begin(), memo[k].end(), a);
			cout << "Case #" << (i + 1) << ": " << res << endl;
		}

		
	}

}
package Round2_2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;


public class Homework {
		private static final int N=10000001;
public static void main(String args[]) throws NumberFormatException,IOException {
		
		Stdin in = new Stdin();
		PrintWriter out = new PrintWriter("out.txt");
		int t=in.readInt();
		int a,b,k,cur;
		// 2*3*5*7*11*13*17*19*23>N
		int []primacity=new int[N];
		int [][]count=new int[N][9];
		boolean prime[]=new boolean[N];
		ArrayList<Integer>p=new ArrayList<Integer>();
		Arrays.fill(prime, true);
		p.add(2);
		for(int i=2;i<prime.length;i+=2)
			primacity[i]=1;
		for(int i=3;i<prime.length;i+=2){
			if(prime[i]){
				p.add(i);
				primacity[i]++;
				for(int j=i+i;j<prime.length;j+=i){
					prime[j]=false;
					primacity[j]++;
				}
			}
		}
		int pi[]=new int[9];
		for(int i=2;i<prime.length;i++){
			for(int j=0;j<count[i].length;j++)
				count[i][j]=count[i-1][j];
			count[i][primacity[i]]++;
				pi[primacity[i]]++;
		}		
		for(int i=1;i<=t;i++){
			a=in.readInt();
			b=in.readInt();
			k=in.readInt();
			if(k>=count[0].length)
				print(out,0,i);
			else
				print(out,count[b][k]-count[a-1][k],i);
		}
		out.flush();
		out.close();

	}
	private static void print(PrintWriter out,Object t,int cases){
		out.println("Case #"+cases+": "+t);
	}

	private static class Stdin {
		BufferedReader br;

		StringTokenizer st = new StringTokenizer("");

		private Stdin() throws FileNotFoundException {
			br = new BufferedReader(new FileReader("in.txt"));

		}

		private String readNext() throws IOException {

			while (!st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		private int readInt() throws IOException, NumberFormatException {

			return Integer.parseInt(readNext());

		}

		private long readLong() throws IOException, NumberFormatException {

			return Long.parseLong(readNext());

		}
		private double readDouble() throws IOException, NumberFormatException {

			return Double.parseDouble(readNext());

		}
	}
}

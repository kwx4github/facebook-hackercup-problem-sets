program HomeWork;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, fgl
  { you can add units after this };

{1..10^4}
type
  TIntList = specialize TFPGList<Integer>;

const
  Max = 100000;
var
  IsPrime: array [0..Max] of Boolean;

function GeneratePrimes: TIntList;
var
  i, j: Integer;
begin
  FillChar(IsPrime, SizeOf(IsPrime), 1);
  IsPrime[1] := False;

  for i := 2 to Max do
    if IsPrime[i] then
      for j := 2 to (Max div i) do
        IsPrime[i * j] := False;

  Result := TIntList.Create;
  for i := 2 to Max do
    if IsPrime[i] then
      Result.Add(i);
end;

const
  Max2 = 10000000;

function PreProcess: TIntList;
var
  Primes: TIntList;
  i, p, j: Integer;

begin
  Primes := GeneratePrimes;
  Result := TIntList.Create;
  Result.Count:= Max2 + 1;

  for i := 0 to Primes.Count  - 1 do
  begin
    p := Primes[i];
    for j := 1 to (Max2 div p) do
      Result.Items[j * p] := Result.Items[j * p] + 1;
  end;
  Primes.Free;
end;

function Solve(a, b, k: Integer; Info: TIntList): Integer;
var
  i: Integer;
begin
  Result := 0;
  for i := a to b do
    if Info[i] = k then
    begin
      Inc(Result);
    end;
end;

var
  TCount: Integer;
  a, b, k: Integer;
  i: Integer;

  Info: TIntList;

begin
  Info := PreProcess;

  ReadLn(TCount);
  for i := 1 to TCount  do
  begin
    ReadLn(a, b, k);
    Write('Case #', i, ': ');
    WriteLn(Solve(a, b, k, Info));

  end;

end.


#include <vector>
	#include <list>
	#include <map>
	#include <set>
	#include <queue>
	#include <deque>
	#include <stack>
	#include <bitset>
	#include <algorithm>
	#include <functional>
	#include <numeric>
	#include <utility>
	#include <sstream>
	#include <iostream>
	#include <iomanip>
	#include <cstdio>
	#include <cmath>
	#include <cstdlib>
	#include <ctime>
	#include <limits.h>
	#include <string.h>
	 
	#define repx(i,x,n) for(int i=x;i<n;i++)
	#define rep(i,n) repx(i,0,n)
	#define pb push_back
	#define full(v)  v.begin(),v.end()
	#define np next_permutation
	#define VI vector<int>
	#define VS vector<string>
	#define VC vector<char>
	#define VD vector<double>
	#define VF vector<float>
	#define SI set<int>
	#define SC set<char>
	#define SS set<string>
	#define MII map<int,int>
	#define MSI map<string,int>
	#define MIS map<int,string>
	#define MIC map<int,char>
	#define MCI map<char,int>
	#define LL long long
	#define MAX 10000001
	using namespace std;
	int primeCnt[MAX];
	bool isPrime[MAX];
	map <int , VI > kprime;
	void sieve()
	{
		for(int i=2;i*i<=MAX;i++)
		{
			if(primeCnt[i]==0)
			{
				for(int j=i;j<MAX;j+=i)
				{
					primeCnt[j]++;
				}
			}
		}
	}
	int main()
	{
		memset(primeCnt , 0 , sizeof(primeCnt));
		memset(isPrime , 0 , sizeof(isPrime));
		sieve();
		repx(i,2,MAX)
		{
			int tmp = primeCnt[i];
			if(tmp == 0)
				tmp++;
			kprime[tmp].pb(i);
		}
		int test;
		cin>>test;
		repx(testcase , 1, test+1)
		{
			int low , hi , k;
			cin>>low>>hi>>k;
			cout<<"Case #"<<testcase<<": ";
			vector <int> :: iterator firstval , lastval;
			firstval = lower_bound(full(kprime[k]) , low);
			lastval = upper_bound(full(kprime[k]), hi);
			cout<<(LL)(lastval-firstval)<<"\n";
		}
		return 0;
	}
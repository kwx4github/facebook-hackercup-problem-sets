#include <iostream>
#include <iomanip>
#include <cstdio>
#include <set>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <utility>
#include <iterator>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <string>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cctype>
#include <fstream>
#include <climits>
#include <numeric>
#include <bitset>
#include <complex>
#include <functional>
#include <list>
using namespace std;
typedef long long int LL;
typedef unsigned long long int uLL;
inline int _Int() { char INPUT[15]; scanf("%s",INPUT); return atoi(INPUT); }
inline LL _LL() { char INPUT[70]; scanf("%s",INPUT); return atoll(INPUT); }
LL bigMod(LL A,LL P,int M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=(R*A)%M; A=(A*A)%M; } return R; } /** (A^P) % M **/
LL bigMul(LL A,LL B,LL M) { LL R=0; for(A%=M; B; B>>=1) { if(B&1) R=(R+A)%M; A=(A+A)%M; } return R; } /** (A*B) % M **/
LL _bigMod(LL A,LL P,LL M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=bigMul(R,A,M); A=bigMul(A,A,M); } return R; } /** advance bigMod **/
template<class T>T GCD(T x, T y) { while(x) x^=y^=x^=y%=x; return y; } /** GCD(a,b) **/
#define pb  push_back
#define pob pop_back
#define pi  acos(-1)
/*************************************************************************************************************************
**                                            Syed Zafrul Lipu (ShockProof)                                              *
**                                            CSE, University of Asia Pacific                                            *
**************************************************************************************************************************/

const int M=10000001;

struct Sieve{
    int I[M], sz= 0;
    int v[664599];
    void go() {
        int sqrtM=3162;
        for(int i=2; i<sqrtM; i++) {
            if( !I[i] ){
                v[sz++]=i;
                for(int j=i+i; j<M; j+=i) I[j]=1;
            }
        }
        for(int i=sqrtM+1; i<M; i+=2)
            if(!I[i]) v[sz++]=i;
    }
} P;

int N[M];
void  store()
{
    for(int i=0; i<P.sz; i++) {
         int x=P.v[i], y=P.v[i];
         while(x<M) {
            N[x]++;
            x+=y;
         }
    }
}


void Main()
{
    P.go();
    store();
    int Case=0, test=_Int();
    while( test-- )
    {
        int a=_Int();
        int b=_Int();
        int k=_Int(), ans=0;
        if(a>b) swap(a,b);
        for(int i=a; i<=b; i++) {
            if(N[i]==k) ans++;
        }
        printf("Case #%d: %d\n",++Case, ans);
    }
}

int main()
{
///#ifndef ONLINE_JUDGE
    freopen(  "homework.txt", "r",  stdin);
    freopen( "homework_out.txt", "w", stdout);
///#endif
    Main();
    return 0;
}

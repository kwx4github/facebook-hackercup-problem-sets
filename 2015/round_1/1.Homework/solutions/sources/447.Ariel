import static java.lang.Math.*;
import static java.util.Arrays.*;

import java.util.*;

public class homework {

	static int [] P = primacity(10000010);

	static int [] primacity(int N) {
		start();
		int [] res = new int [N+1];
		for (int p : primes(N))
			for (int s : req(N/p))
				++res[s*p];
		return res;
	}

	public Object solve() {
		int A = sc.nextInt();
		int B = sc.nextInt();
		int K = sc.nextInt();

		int res = 0;
		for (int i : req(A, B))
			if (P[i] == K)
				++res;
		return res;
	}

	///////////////////////////////////////////////////////////////////////////
	private static final double eps = 1e-9;
	private static <T> T [] e (@SuppressWarnings("unchecked") T ... A) { return newArray(A, 0); }
	private static long floor(double x) { return round(Math.floor(x + eps)); }
	private static <T> T [] newArray(T [] A, int N) {
		T [] res = copyOf(A, N);
		fill(res, null);
		return res;
	}
	private static int [] pri(Integer [] A) { int [] res = new int [A.length]; for (int i = 0; i < A.length; ++i) res[i] = A[i]; return res; }
	private static int [] primes(int N) {
		boolean [] C = new boolean [N+1];
		int Q = (int)floor(sqrt(N));
		for (int p = 3; p <= Q; p += 2)
			if (!C[p]) {
				int R = N/p;
				for (int j = p; j <= R; ++j)
					C[j*p] = true;
			}
		List<Integer> res = new ArrayList<Integer>();
		if (N >= 2)
			res.add(2);
		for (int p = 3; p <= N; p += 2)
			if (!C[p])
				res.add(p);
		return pri(res.toArray(e(0)));
	}
	private static int [] rep(int S, int T) { if (T <= S) return new int [0]; int [] res = new int [T-S]; for (int i = S; i < T; ++i) res[i-S] = i; return res; }
	private static int [] req(int N) { return req(0, N); }
	private static int [] req(int S, int T) { return rep(S, T+1); }
	////////////////////////////////////////////////////////////////////////////////////
	private static IOUtils.MyScanner sc = new IOUtils.MyScanner();
	private static void start() { IOUtils.start(); }
	private static class IOUtils {
		public static class MyScanner {
			public int nextInt() { return sc.nextInt(); }
			private final java.util.Scanner sc;
			private MyScanner() {
				sc = new java.util.Scanner(System.in);
				sc.hasNext();
				start();
			}
		}
		private static String build(Object o, Object... a) { return buildDelim(" ", o, a); }
		private static String buildDelim(String delim, Object o, Object... a) {
			StringBuilder b = new StringBuilder();
			append(b, o, delim);
			for (Object p : a)
				append(b, p, delim);
			return b.substring(delim.length());
		}
		//////////////////////////////////////////////////////////////////////////////////
		private static void start() { if (t == 0) t = millis(); }
		private static void append(StringBuilder b, Object o, String delim) {
			if (o.getClass().isArray()) {
				int len = java.lang.reflect.Array.getLength(o);
				for (int i = 0; i < len; ++i)
					append(b, java.lang.reflect.Array.get(o, i), delim);
			} else if (o instanceof Iterable<?>)
				for (Object p : (Iterable<?>) o)
					append(b, p, delim);
			else {
				if (o instanceof Double)
					o = new java.text.DecimalFormat("#.#########").format(o);
				b.append(delim).append(o);
			}
		}
		private static void print(Object o) {
			err(o, '(', time(), ')');
			if (PRINT)
				System.out.println(o);
		}
		private static void err(Object ...o) { System.err.println(build(o)); }
		private static long t;
		private static long millis() { return System.currentTimeMillis(); }
		private static String time() { return "Time: " + (millis() - t) / 1000.0; }
		private static final boolean PRINT = System.getProperties().containsKey("PRINT");
		private static void run(int N) {
			for (int n = 1; n <= N; ++n)
				print("Case #" + n + ": " + build(new homework().solve()));
			err("------------------");
			err(time());
		}
	}
	public static void main(String[] args) {
		int N = sc.nextInt();
		IOUtils.run(N);
	}
}

#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000100000;
const int MAX = 10000007;
const int MAX2 = 10007;
const int BASE = 1000000000;
const int MOD = 1000000007;

int p[MAX];
int d[MAX];

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt", "r", stdin);
        freopen("out.txt" , "w" , stdout);
    #endif

    p[1] = 1;
    for(int i = 2; i * i < MAX; ++i)
    {
        if (!p[i])
        {
            for(int j = i * i ; j < MAX; j += i)
            {
                if (!p[j])
                {
                    p[j] = i;
                }
            }
        }
    }

    FOR(i,0,MAX)
    {
        if (!p[i])
        {
            p[i] = i;
        }
    }

    d[1] = 0;
    FOR(i,2,MAX)
    {
        int j = i;
        while (j % p[i] == 0)
        {
            j /= p[i];
        }
        d[i] = d[j] + 1;
    }

    int t;
    cin >> t;
    FOR(tt,0,t)
    {
        printf("Case #%d: " , tt + 1);
        int a , b , k;
        cin >> a >> b >> k;
        int res = 0;
        FOR(i,a,b + 1)
        {
            if (d[i] == k)
            {
                ++res;
            }
        }
        cout << res << endl;
    }


    return 0;
}

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
#define GCD(a,b) __gcd(a, b)
#define mp make_pair
#define DEBUG(x) cout << x << "\n"
#define ALL(x) x.begin(), x.end()
#define INF (1 << 30)
#define pb push_back

const ll MAX = 10000000;
int T, A, B, K, sp[MAX + 2], ans[9][MAX + 2];
bool check[10000012];
void sieve_of_erathostenes() {
	for (int i = 2; i <= MAX; i += 2) sp[i] = 2;
	for (ll i = 3; i <= MAX; i += 2) {
		if (!check[i]) {
			sp[i] = i;
			for (ll q = 1; (i * q) <= MAX; q += 2) {
				if (!check[i * q]) {
					check[i * q] = true;
					sp[i * q] = i;
				}
			}
		}
	}


}

void factorize_all() {
	for (int i = 2; i <= MAX; ++i) {
		int num = i;
		int no_primes = 0;
		while (num > 1) {
			int sm = sp[num];
			++no_primes;
			while (num % sm == 0) {
				num /= sm;
			}
		}
		if (no_primes > 8) cout << i << "***" << endl;
		ans[no_primes][i] = 1;
	}
}
void sum_all() {
	for (int k = 1; k <= 8; ++k) {
		for (int num = 2; num <= MAX; ++num) {
			ans[k][num] += ans[k][num - 1];
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	sieve_of_erathostenes();
	factorize_all();
	sum_all();
	cin >> T;
	for (int tc = 1; tc <= T; ++tc) {
		cin >> A >> B >> K;
		cout << "Case #" << tc << ": ";
		if (K >= 9) {
			cout << 0 << '\n';
			continue;
		}
		int res = ans[K][B] - ans[K][A - 1];
		cout << res << '\n';
	}
	

}
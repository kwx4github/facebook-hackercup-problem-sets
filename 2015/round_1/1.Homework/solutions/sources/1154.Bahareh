# include <iostream>
# include <math.h>

using namespace std;

#define N 10000000
#define SQN 3200

int Primes [SQN + 10];
bool isPrime [SQN + 10];
int PrimeCount [N + 5];

int Sieve()
{
    int i, j;
    int count = 0;

    for(i = 0; i < SQN; i++ )
        isPrime[i] = 1;

    for(i = 2; i*i < SQN; i++)
        if (isPrime[i])
            for(j = i * i; j < SQN; j += i)
                isPrime[j] = 0;

    for(i = 2; i < SQN; i++ )
        if (isPrime[i])
        {
            Primes[count] = i;
            count++;
        }
        
    return count;
}

int Primacity(int n, int count)
{
    int i, cnt = 0;
    
    for(i = 0; i < count && Primes[i] * Primes[i] <= n; i++)
    {
        if (n % Primes[i] == 0)
            cnt++;
        while(n % Primes[i] == 0)
            n /= Primes[i];
    }
    if (n > 1)
        cnt++;
    
    return cnt;
}


int main()
{
    int T, A, B, K, t, n, primeCount;
    int count;
    
    primeCount = Sieve();
    
    for (n = 1; n <= N; n++)
    {
        PrimeCount [n] = Primacity(n, primeCount);
    }
    cin >> T;
    for (t = 1; t <= T; t++)
    {
        count = 0;
        cin >> A >> B >> K;
        //cout << "A-B-K " << A << B << K << endl;
        if (K > 8)
        {
            cout << "Case #" << t << ": 0" << endl; 
        }
        else
        {
            for (n = A; n <= B; n++)
            {
                if (PrimeCount[n] == K)
                    count++;
            }
            
            cout << "Case #" << t << ": " << count << endl;
        }
    }
    return 0;
}
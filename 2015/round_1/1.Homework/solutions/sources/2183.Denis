object Solution {

  def getPrimality(i : Long) : Long = {
    var num = i
    var count = 0L
    var div = 2L
    while (div * div <= num) {
      if (num % div == 0) {
        count += 1
        while (num % div == 0) {
          num /= div
        }
      }
      div += 1
    }
    if (num > 1) count + 1 else count
  }

  def getPrimalities(n : Long, check : (Long) => Long) : Seq[Long] = {
    for (i <- 2L to n) yield check(i)
  }

  def isPrime(n : Long) : Boolean = {
    if ((2L until n).count(n % _ == 0) > 0) false else true
  }

  def getPrimalityBrute(n : Long) : Int = {
    (2L to n).count(x => isPrime(x) && n % x == 0)
  }

  def main(args: Array[String]) {
    val primalities = getPrimalities(10000000L, getPrimality)
    val T = scala.io.StdIn.readInt
    for (t <- 1 to T) {
      val Array(a, b, k) = io.StdIn.readLine().split(" ").map(_.toInt)
      println("Case #" + t + ": " + primalities.slice(a - 2, b - 1).count(_ == k))
    }
  }

}
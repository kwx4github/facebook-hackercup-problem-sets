#include<iostream>
#include<vector>
#include<stack>
#include<string>
#include<queue>
#include<map>
#include<algorithm>
#include<sstream>
using namespace std;
#include<stdio.h>
#include<time.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#define MAX 100
#define INF 1<<23

#define I1(a) scanf("%d",&a)
#define I2(a,b) scanf("%d %d",&a,&b)
#define I3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rep(i,s,e) for(i=s;i<e;i++)
#define repr(i,s,e) for(i=s;i>e;i--)


#define in(a) freopen(a,"r",stdin)
#define out(a) freopen(a,"w",stdout)
#define ll long long
ll BigMod(ll B,ll P,ll M){  ll R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R%M;}
#define ull unsigned long long

bool primes[10000010];
int primacity[10000010];
int DP[10000010][10];

void count_primacity(){
    memset(primes,1,sizeof(primes));
    memset(primacity,0,sizeof(primacity));
    for(int i=2;i<=10000000;i++){
        if(primes[i]==0)continue;
        int j=1;
        while(i*j<=10000000){
            primes[i*j]=0;
            primacity[i*j]++;
            j++;
        }
    }
    memset(DP,0,sizeof(DP));
    int mx=0;
    for(int i=2;i<=10000000;i++){
            DP[i][primacity[i]]++;
            DP[i][1]+=DP[i-1][1];
            DP[i][2]+=DP[i-1][2];
            DP[i][3]+=DP[i-1][3];
            DP[i][4]+=DP[i-1][4];
            DP[i][5]+=DP[i-1][5];
            DP[i][6]+=DP[i-1][6];
            DP[i][7]+=DP[i-1][7];
            DP[i][8]+=DP[i-1][8];
    }
}
int main()
{
    in("in.txt");
    out("out.txt");
    count_primacity();
    int T,caseno=1;
    scanf("%d",&T);
    while(T--){
        printf("Case #%d: ",caseno++);
        int x,y,k;
        scanf("%d %d %d",&x,&y,&k);
        if(x>y)swap(x,y);
        if(x<2)x=2;

        if(k>8){
            printf("0\n");
        }else{
            int kotogula=DP[y][k]-DP[x-1][k];
            printf("%d\n",kotogula);
        }

    }
    return 0;
}

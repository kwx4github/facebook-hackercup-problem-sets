#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const int MAX_B = 10000000;
int primality[MAX_B];

int main() {
    vector<int> primes;

    primes.push_back(2);

    for (int i = 3; i < MAX_B; i += 2) {
        bool is_prime = true;
        double sqrt_i = sqrt(i);
        for (int j = 0; j < primes.size(); j++) {
            if (i % primes[j] == 0) {
                is_prime = false;
                break;
            }
            if (sqrt_i < primes[j]) {
                break;
            }
        }
        if (is_prime) {
            primes.push_back(i);
        }
    }

    memset(primality, MAX_B * sizeof(int), 0);

    for (int i = 0; i < primes.size(); i++) {
        int p = primes[i];

        for (int j = p; j < MAX_B; j += p) {
            primality[j]++;
        }
    }

    int T;

    cin >> T;

    for (int t = 0; t < T; t++) {
        int A, B, K;
        cin >> A >> B >> K;

        int ans = 0;
        for (int i = A; i <= B; i++) {
            if (primality[i] == K) {
                ans++;
            }
        }

        cout << "Case #" << (t + 1) << ": " << ans << endl;
    }

    return 0;
};

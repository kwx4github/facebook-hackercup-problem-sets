#define _CRT_SECURE_NO_WARNINGS
//#define _USE_MATH_DEFINES

#include <iostream>
#include <cmath>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <math.h>
#include <vector>
#include <fstream>
#include <stack>
#include <ctime>
#include <map>
#include <list>
#include <cstdio>
#include <functional>
#include <bitset>
#include <set>
#include <limits.h>

using namespace std;

#define READ(s) freopen(s, "r", stdin)
#define WRITE(s) freopen(s, "w", stdout)
#define scani(s) scanf("%d", &s)

#define epsilon 1e-5
#define D_MAX 1e200

typedef pair<int, int> pii;
typedef pair<int, bool> pib;
typedef vector<int> vi;
typedef long long ll;

int process(int num, int div)
{
	while (num % div == 0)
	{
		num /= div;
	}

	return num;
}

int arr[10000010];
bitset<10000100> temp_primes;

int main()
{
	READ("input.txt");
	WRITE("output.txt");

	int n = 10000000;

	temp_primes.set();
	temp_primes[0] = 0;
	temp_primes[1] = 0;

	for (int i = 2; i <= (int)sqrt(float(n)) + 2; i++)
	{
		if (temp_primes[i])
		{
			for (int j = i * i; j <= n; j += i)
			{
				temp_primes[j] = 0;
			}
		}
	}

	vector<int> primes;
	for (int i = 0; i <= n; i++)
	{
		if (temp_primes[i])
			primes.push_back(i);
	}

	int current, count;
	arr[0] = arr[1] = 0;
	arr[2] = 1;

	for (int i = 3; i <= 10000000; i++)
	{
		current = i;
		count = 0;

		if (temp_primes[i] == 1)
		{
			count = 1;
		}
		else
		{
			for (int j = 0; j < primes.size(); j++)
			{
				if (primes[j] * primes[j] > i)
					break;

				if (current % primes[j] == 0)
				{
					count++;
					current = process(current, primes[j]);
					count += arr[current];
					break;
				}
			}
		}
		arr[i] = count;
	}

	int t;
	cin >> t;
	int a, b, p;

	for (int z = 1; z <= t; z++)
	{
		count = 0;
		cin >> a >> b >> p;

		for(int i = a; i <= b; i++)
		{
			if(arr[i] == p)
				count++;
		}

		printf("Case #%d: ", z);
		cout << count;
		if (z != t)
			cout << endl;
	}
	return 0;
}

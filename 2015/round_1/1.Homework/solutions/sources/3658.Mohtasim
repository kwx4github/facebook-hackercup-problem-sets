#include<bits/stdc++.h>
using namespace std;

#define LL long long int
#define uLL unsigned long long int

#define S(a) scanf("%d",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define S3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define SLL(a) scanf("%lld",&a)
#define SLL2(a,b) scanf("%lld%lld",&a,&b)
#define SLL3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define SC(a) scanf("%c",&a)
#define P(a) printf("%d",a)
#define PS(a) printf("%s",a)
#define PLL(a) printf("%lld",a)
#define PCASE(kk) printf("Case %d: ",kk++)
#define PCASENL(kk) printf("Case %d:\n",kk++)
#define NL puts("")

#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define pi (2.0*acos(0.0))
#define pii pair<int,int>

template<typename T>inline T POW(T B,T P)
{
    if(P==0) return 1;
    if(P&1) return B*POW(B,P-1);
    else return SQR(POW(B,P/2));
}

template <typename T>inline T BigMod (T b,T p,T m)
{
    if (p == 0) return 1;
    if (p%2 == 0)
    {
        T s = BigMod(b,p/2,m);
        return ((s%m)*(s%m))%m;
    }
    return ((b%m)*(BigMod(b,p-1,m)%m))%m;
}

template <typename T>inline T ModInv (T b,T m)
{
    return BigMod(b,m-2,m);
}

template<typename T>inline T ABS(T a)
{
    if(a<0)return -a;
    else return a;
}

template<typename T>inline T gcd(T a,T b)
{
    if(a<0)return gcd(-a,b);
    if(b<0)return gcd(a,-b);
    return (b==0)?a:gcd(b,a%b);
}

template<typename T>inline T lcm(T a,T b)
{
    if(a<0)return lcm(-a,b);
    if(b<0)return lcm(a,-b);
    return a*(b/gcd(a,b));
}

//knight and king move....

//int Dx[]={-2,-1,1,2,1,2,-2,-1};
//int Dy[]={-1,-2,2,1,-2,-1,1,2};
//int dx[]={-1,1,0,0};
//int dy[]={0,0,-1,1};
//int dx[]= {-1,-1,0,0,1,1};
//int dy[]= {-1,0,-1,1,0,1};

//////////////////////////////////////////////////

#define mx 10000010

int primes[1000010];
int sieve[mx] ;
void genPrimes()
{
    int l=0;
    primes[l++]=2;
    long long i,j ;
    for(j=2; j<mx; j+=2)sieve[j] = 1 ;

    for(i=3; i<mx; i+=2)
    {
        if(sieve[i]==0)
        {
            primes[l++]=((int)i);
            for(j=i; j<mx; j+=i)sieve[j]++ ;
        }
    }
    return ;
}


LL kk,cs[9][mx];

int main()
{
    freopen("homework.in", "r", stdin);
	freopen("homework.out", "w", stdout);

    genPrimes();
    //cout<<primes.size();
//    cout<<cs[1][10000000]<<endl;

    for(LL i=2; i<=10000000; i++)
    {
        kk=sieve[i];
        if(kk==1)
        {
            cs[1][i]=cs[1][i-1]+1;
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==2)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1]+1;
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==3)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1]+1;
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==4)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1]+1;
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==5)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1]+1;
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==6)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1]+1;
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==7)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1]+1;
            cs[8][i]=cs[8][i-1];
        }
        else if(kk==8)
        {
            cs[1][i]=cs[1][i-1];
            cs[2][i]=cs[2][i-1];
            cs[3][i]=cs[3][i-1];
            cs[4][i]=cs[4][i-1];
            cs[5][i]=cs[5][i-1];
            cs[6][i]=cs[6][i-1];
            cs[7][i]=cs[7][i-1];
            cs[8][i]=cs[8][i-1]+1;
        }
    }
//    cout<<cs[1][10000000]<<endl;

    int t,tc=1;
    S(t);
    while(t--)
    {
        LL a,b,k;
        SLL3(a,b,k);
        LL res=0;
        if(k>8)res=0;
        else{
            res=cs[k][b]-cs[k][a-1];
        }
        printf("Case #%d: ",tc++);
        PLL(res),NL;
    }
    return 0;
}


import java.io.FileInputStream;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "homework.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("homework.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Homework {
    ArrayList<Long> primes;
    int count[] = new int[10000001];
    boolean isPrime[];
    int dp[][] = new int[8][10000001];
    public Homework() {
        this.primes = getPrimes(10000000);
        //System.out.println(primes.size());
        for (int i = 2;i < count.length;i++) {
            int t = i;
            int count = 0;
            for (int j = 0; primes.get(j) * primes.get(j) <= t;j++) {
                if (t % primes.get(j) == 0) {
                    count++;
                }
                while (t % primes.get(j) == 0) {
                    t /= primes.get(j);
                }
            }
            if (isPrime[t] && t >= 2) count++;
            this.count[i] = count;
        }

        for (int i = 2;i < count.length;i++) {
            for (int j = 0; j < 8;j++) {
                if (count[i] - 1 == j) {
                    dp[j][i] = dp[j][i - 1] + 1;
                } else dp[j][i] = dp[j][i - 1];
            }
        }
    }
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        out.print("Case #" + (testNumber) + ": ");
        int a = in.nextInt();
        int b = in.nextInt();
        int k = in.nextInt();
        if (k > 8) {
            out.println(0);
        } else {
            out.println(dp[k - 1][b] - dp[k - 1][a - 1]);
        }

    }

    public ArrayList<Long> getPrimes(int n) {
        isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, true);
        for (int i = 2; i * i < isPrime.length; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j < isPrime.length; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        ArrayList<Long> al = new ArrayList<Long>(n + 1);
        for (int i = 2;i < isPrime.length;i++) if (isPrime[i]) al.add((long)i);
       // System.out.println(al);
        return al;
    }

}

class InputReader {
	private BufferedReader br;
	private StringTokenizer st;
	public InputReader(InputStream in) {
		br=new BufferedReader(new InputStreamReader(in));
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException ignored) {

		}
	}

	public boolean readLine() {
		try {
			st=new StringTokenizer(br.readLine());
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	public int nextInt(){
		if(!st.hasMoreTokens()) readLine();
		return Integer.parseInt(st.nextToken());
	}

	public String next(){
		if(!st.hasMoreTokens()) readLine();
		return st.nextToken();
	}

}


#include <iostream>
#include <stdio.h>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <string.h>
#include <cmath>
#include <memory.h>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 10000001;
vector<vector<int> > v;
vector<int> p;
bool notPrime[N] = { 1, 1 };
void gen(){
	for (int i = 2; i*i < N;++i)
	if (!notPrime[i])
	for (int j = i*i; j < N; j += i)
		notPrime[j];
	for (int i = 2; i < N;++i)
	if (!notPrime[i])
		p.push_back(i);
	for (int i = 1; i < N; ++i){
		int n = i, k = 0;
		for (int j = 0; j < p.size() && p[j] * p[j] <= n; ++j){
			if (n%p[j] == 0)
				++k;
			while (n%p[j] == 0)
				n /= p[j];
		}
		if (n != 1)
			++k;
		v.resize(max((int)v.size(), k + 1));
		v[k].push_back(i);
	}
}
int main()
{
	freopen("A.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int t, a, b, k;
	gen();
	scanf("%d", &t);
	for (int T = 1; T <= t; ++T){
		printf("Case #%d: ", T);
		scanf("%d%d%d", &a, &b, &k);
		if (k >= v.size())
			printf("0\n");
		else
			printf("%d\n", upper_bound(v[k].begin(), v[k].end(), b) - lower_bound(v[k].begin(), v[k].end(), a));
	}
	return 0;
}
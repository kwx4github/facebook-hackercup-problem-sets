#include <iostream>
#include <vector>

#define MAXAB 10000000

using namespace std;

vector<unsigned int> primes;
int primacities[MAXAB + 1];

void runEratosthenesSieve() 
{
	int upperBound = MAXAB;
	int upperBoundSquareRoot = (int)sqrt((double)upperBound);
	bool *isComposite = new bool[upperBound + 1];
	memset(isComposite, 0, sizeof(bool) * (upperBound + 1));
	for (int m = 2; m <= upperBoundSquareRoot; m++) 
	{
		if (!isComposite[m]) 
		{
			primes.push_back(m);
			for (int k = m * m; k <= upperBound; k += m)
			{
				isComposite[k] = true;
			}
		}
	}
	for (int m = upperBoundSquareRoot; m <= upperBound; m++)
		if (!isComposite[m])
			primes.push_back(m);
	delete[] isComposite;
}

void calculatePrimactites()
{
	for (auto it = primes.begin(); it != primes.end(); it++)
	{
		unsigned int cp = *it;
		for (int k = cp; k <= MAXAB; k += cp)
		{
			primacities[k]++;
		}
	}
}

int main(int argc, char** argv)
{
	runEratosthenesSieve();
	calculatePrimactites();
	int T;
	cin >> T;
	for (int t = 1; t <= T; t++)
	{
		int A, B, K;
		cin >> A >> B >> K;
		int result = 0;

		for (int i = A; i <= B; i++)
		{
			if (primacities[i] == K)
				result++;
		}
	
		cout << "Case #" << t << ": " << result << endl;
	}
	return 0;
}
// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

int main(){
    iostream_init();
    const int MAX = 10000010;
    vector<int> prim(MAX, 0);
    for(int i = 2; i < MAX; i++) {
        if(prim[i] == 0) {
            for(int j = i; j < MAX; j += i) {
                prim[j] ++;
            }
        }
    }
    const int P = 9;
    vector<vector<int>> cnt(MAX+1, vector<int>(P));
    // cnt[i+1] := [0, i]
    for(int i = 2; i < MAX; i++) {
        for(int j = 0; j < P; j++) {
            cnt[i+1][j] = cnt[i][j] + (prim[i] == j ? 1 : 0);
        }
    }
    int T;
    cin >> T;
    for(int casenum = 1; casenum <= T; casenum++) {
        cout << "Case #" << casenum << ": ";

        int A, B, K;
        cin >> A >> B >> K;
        if(K < P) {
            int res = cnt[B+1][K] - cnt[A][K];
            cout << res << endl;
        } else {
            cout << 0 << endl;
        }
    }
    return 0;
}

/* vim:set foldmethod=marker: */


#include <iostream>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> sieve(int n){

	vector<int> num(n+2,0);

	vector<int> prime;
	//cout << n << endl;
	for(int i=2; i<=n; i++){
		if(num[i] == 0){
			prime.push_back(i);

			for(int j = 2*i;j<=n;j+=i){
				num[j] = 1;
			}
		}
	}

	return prime;
}


int main(){
	
	int val = 10000000;

	vector<int> prime = sieve(sqrt(val));


	//cout << prime.size();
	/*for(vector<int>::iterator it = prime.begin(); it != prime.end(); it++){
		cout << *it << endl;;
	}*/	

	int psize = prime.size();

	map< int, vector<int> > db;

	for(int i = 2; i<= 10000000; i++){
		int cnt = 0;
		int num =i;

		for(int j=0;j< psize; j++){

			if(num % prime[j] == 0)
				cnt++;

			while(num != 1 && num%prime[j] == 0){
				num = num/prime[j];
			}

			if(num == 1)
				break;
		}
		if(num != 1){
			cnt++;
		}

		if(db.find(cnt) == db.end()){
			std::vector<int> v;
			v.push_back(i);
			db[cnt] = v;
		}
		else{
			db[cnt].push_back(i);
		}
		//cout << i << endl;*/
	}

	/*for(std::map<int, vector<int> >::iterator it = db.begin(); it != db.end(); it++){
		cout << it->first << ":" << it->second.size() << endl ;
	}*/
	int t;
	cin >> t;

	int tt = 0;
	while(t--){
		tt++;
		cout << "Case #" << tt << ": " ;

		int a,b,k;

		cin >> a >> b >> k;
		

		if( db.find(k) == db.end()){
			cout << 0 << endl;
		}
		else{
			cout << upper_bound(db[k].begin(), db[k].end(), b) - lower_bound(db[k].begin(), db[k].end(), a) << endl;
		}


	}
}


/*
 * Great code.. ha?
 * .
 * .
 * .
 * .
 * Wrong answer :-(
 */

#include<bits/stdc++.h>
//using namespace std;

const int MAXIMUM_VALUE = 100000001;
bool is_not_prime[MAXIMUM_VALUE];
int *prime_factor_counts = NULL;

size_t count_matching_numbers(size_t start, size_t end, size_t desired_factor_count)
{
	size_t count = 0;
	for ( size_t i = start; i <= end; i++ )
	{
		if ( prime_factor_counts[i] == desired_factor_count )
		{
			++count;
		}
	}

	return count;
}

void sieve_of_erastothenes(const size_t maximum_value)
{
	prime_factor_counts =(int*) calloc(maximum_value+1, sizeof(int));

	if ( NULL == prime_factor_counts )
	{
		std::cerr << "Failed to allocate array." << std::endl;
		exit(EXIT_FAILURE);
	}

	prime_factor_counts[1] = 1;
	for ( size_t i = 2; i*i <= maximum_value; ++i )
	{
		if ( ! prime_factor_counts[i] )
		{
			for ( size_t j = i; j <= maximum_value; j += i )
			{
				++prime_factor_counts[j];
			}
		}
	}
}

std::string process_input(int input_remaining_count, int iteration_count, size_t maximum_value)
{
	if ( 0 >= input_remaining_count )
	{
		sieve_of_erastothenes(maximum_value);
		return "";
	}

	size_t start, end, desired_factor_count;
	std::cin >> start >> end >> desired_factor_count;

	if ( maximum_value < end )
	{
		maximum_value = end;
	}

	std::string output = process_input(input_remaining_count - 1, iteration_count + 1, maximum_value);

	size_t count = count_matching_numbers(start, end, desired_factor_count);

	std::ostringstream out;
	out << "Case #" << iteration_count << ": " << count << '\n' << output;

	return out.str();
}

int main()
{
	freopen("homework.txt","r",stdin);
	//freopen("out.txt","r",stdout);
	int input_row_count;
	std::cin >> input_row_count;
	std::cout << process_input(input_row_count, 1, 2);
}

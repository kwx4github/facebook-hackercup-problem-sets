using System;
using System.Diagnostics;
using System.IO;

namespace FacebookHackercup2015
{
    public class Homework
    {
        public static void Main(string[] args)
        {
            RunCases(args[0]);
            //RunTests();
        }

        private static void RunCases(string fileName)
        {
            int max = 10000000;
            StreamReader sr = new StreamReader(fileName);
            int testCases = int.Parse(sr.ReadLine());

            // precalculation
            int[] primacies = PrecalculatePrimicies(max);

            for (int i = 0; i < testCases; i++)
            {
                RunCase(sr, i + 1, primacies);
            }
        }

        private static void RunCase(StreamReader sr, int i, int[] primacies)
        {
            string line = sr.ReadLine();
            string[] parts = line.Split(' ');
            int a = int.Parse(parts[0]);
            int b = int.Parse(parts[1]);
            int k = int.Parse(parts[2]);
            int s = PrimiciesCountEqualTo(a, b, k, primacies);
            Console.WriteLine("Case #{0}: {1}", i, s);
        }

        private static void RunTests()
        {
            int n = 10000000;

            Stopwatch sw = new Stopwatch();
            sw.Start();
            int[] primacies = PrecalculatePrimicies(n);
            Console.WriteLine("{0} {1} {2} = {3}", 5, 15, 2, PrimiciesCountEqualTo(5, 15, 2, primacies));
            Console.WriteLine("{0} {1} {2} = {3}", 2, 10, 1, PrimiciesCountEqualTo(2, 10, 1, primacies));
            Console.WriteLine("{0} {1} {2} = {3}", 24, 42, 3, PrimiciesCountEqualTo(24, 42, 3, primacies));
            Console.WriteLine("{0} {1} {2} = {3}", 1000000, 1000000, 1, PrimiciesCountEqualTo(1000000, 1000000, 1, primacies));
            Console.WriteLine("{0} {1} {2} = {3}", 1000000, 1000000, 2, PrimiciesCountEqualTo(1000000, 1000000, 2, primacies));
            Console.WriteLine("{0} {1} {2} = {3}", 2, 10000000, 2, PrimiciesCountEqualTo(2, 1000000, 2, primacies));

            Console.WriteLine("Finished calculation of primacies in {0}", sw.Elapsed);
        }

        private static int[] PrecalculatePrimicies(int n)
        {
            // calculate primes
            bool[] primes = GeneratePrimes(n);

            // calculate primacies
            int[] primacies = new int[n + 1];
            for (int i = 2; i <= n; i++)
            {
                if (primes[i])
                {
                    primacies[i]++;
                    for (long j = 2; j <= n; j++)
                    {
                        long s = i * j;
                        if (s < n + 1)
                        {
                            primacies[s]++;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }

            return primacies;
        }

        private static bool[] GeneratePrimes(int n)
        {
            bool[] primes = new bool[n + 1];
            for (int i = 2; i < primes.Length; i++)
            {
                primes[i] = true;
            }
            for (int i = 2; i <= n; i++)
            {
                if (primes[i])
                {
                    for (int j = 2; j <= n; j++)
                    {
                        int b = i*j;
                        if (b < n + 1)
                        {
                            primes[b] = false;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }

            return primes;
        }

        private static int PrimiciesCountEqualTo(int a, int b, int k, int[] primacies)
        {
            int s = 0;
            for (int i = a; i <= b; i++)
            {
                if (primacies[i] == k)
                {
                    s++;
                }
            }

            return s;
        }
    }
}

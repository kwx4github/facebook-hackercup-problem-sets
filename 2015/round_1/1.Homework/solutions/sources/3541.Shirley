//	Problem X

const bool debug=true;

#include <iostream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdlib>
#include <cstdarg>
#include <utility>
#include <cassert>
#include <ctime>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <deque>
#include <queue>
#include <stack>

#define TIMES(n) for (int i=0; i<(n); ++i)
#define FOR(i,s,t) for (int (i)=(s); (i)<=(t); ++(i))
#define RESET(a) memset((a), 0, sizeof((a)))
#define P(x, ...) printf((x), ##__VA_ARGS__)
#define D(x, ...) if (debug) printf((x), ##__VA_ARGS__)
#define MP(x, y) make_pair((x), (y))

const int INF = 0x7F7F7F7F; // or (unsigned)(-1)>>1
int caseI = 0, caseD = -1;
bool prime1[20000000];

using namespace std;

//void P(char *f, ...) {va_list v; va_start(v, f); vprintf(f, v); va_end(v);}
//void D(char *f, ...) {if (!debug) return; va_list v; va_start(v, f); vprintf(f, v); va_end(v);}


/*

Sample Input:



Sample Output:


*/

const long long maxN = 10000005, maxM = 1005;


typedef pair<int, int> ii;
typedef vector<vector<ii> > graph;
vector<long long> prime;

class Qs {
	long long n, m, target;
	//int e[maxN][maxN];
	//int e_n[maxN];
	long long count[maxN];
public:
	Qs() {
		
	}

	bool input() {

		scanf("%lld%lld%lld", &n, &m, &target);
		return true;
	}

	void solve() {
		for(long long i = n; i <= m; i++){
			count[i] = 0;
		}
		for(long long j = 0; j < prime.size() && prime[j] <= m; j++){
			// for(long long i = n; i <= m; i++){
				int cc = 1;
				bool ok = false;
				long long check = cc * prime[j];
				while(1){
					if(check < n){
					}else if(check > m){
						break;
					}else{
						count[check]++;
					}
					check += prime[j];
				}
				
			// }
		}

		int countSUM = 0;
		for(long long i = n; i <= m; i++){
			// printf("%lld >> %lld\n", i, count[i]);
			if(count[i] == target)
				countSUM++;
		}
		printf("Case #%d: %d\n", caseI, countSUM);
	}
};
 
void eratosthenes()
{
    long long sqrt_20000000 = sqrt(20000000);
    prime1[0] = prime1[1] = true;
    for (long long i=2; i<=sqrt_20000000; i++)
        if (!prime1[i])
            for (long long k=(20000000-1)/i, j=i*k; k>=i; k--, j-=i)
                if (!prime1[k]){
                    prime1[j] = true;
                    // printf(">>%d\n", prime1[j]);
                }
    
    for (long long i=2; i<20000000; i++)
        if (!prime1[i])
            prime.push_back(i);
  //   for(long long j = 0; j < prime.size(); j++)
		// printf(">>>>%lld\n", prime[j]);
}

void pre_process() {
	eratosthenes();
	//freopen("A.in", "r", stdin);
	//freopen("A.out", "w", stdout);
	scanf("%d%*c", &caseD);
}

int main() {
	Qs *p = new Qs;
	pre_process();
	while ((++caseI|1) && caseD-- && p->input()) {
		p->solve();
		delete p;
		p = new Qs;
	}
	delete p;
	return 0;
}

#include<fstream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
void main(){
	ifstream input2("precomp.txt");
	ifstream input("homework.txt");
	ofstream output("output.txt");
	vector<int> e;
	int temp, cases;
	while (input2 >> temp)
		e.push_back(temp);
	input >> cases;
	for (int i = 0; i != cases; ++i){
		int ans = 0, a, b, c;
		input >> a >> b >> c;
		if (c <= 8){
			for (int j = a - 2; j <= b - 2; ++j){
				if (e[j] == c)
					++ans;
			}
		}
		output << "Case #" + to_string(i + 1) + ": " << ans << endl;
	}
}
//below is the code used to generate the primacity of each number from 2 to 10000000 which is stored in a file called precomp
/*#include<fstream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
bool ptest(int n){
	vector<int> x{ 2, 3, 5, 7, 11 };
	bool isprime;
	if (n <= 11){
		bool ex = false;
		for (auto i : x){
			if (i == n)
				ex = true;
		}
		isprime = ex;
	}
	else{
		bool rx = true;
		int t = sqrt(n) + 1;
		for (int j = 2; j <= t; ++j){
			if (n%j == 0){
				rx = false;
				break;
			}
		}
		isprime = rx;
	}
	return isprime;
}
int process(int a, vector<int> d){
	int count = 0;
	int t = a, ind = 0;
	while (t != 1){
		if (t%d[ind] == 0){
			++count;
			while (t%d[ind] == 0)
				t /= d[ind];
		}
		int q = sqrt(t) + 1;
		if (t > 50 && d[ind] > q){
			++count;
			break;
		}
		++ind;
	}
	return count;
}
void main(){
	ofstream output("precomp.txt");
	vector<int> d;
	int j = sqrt(1e7) + 100;
	for (int i = 1; i <= j; ++i){
		if (ptest(i))
			d.push_back(i);
	}
	for (int k = 2; k <= 10000000; ++k){
		precomp << process(k, d) << " ";
		if (k % 150 == 0)
			precomp<< endl;
	}
}*/

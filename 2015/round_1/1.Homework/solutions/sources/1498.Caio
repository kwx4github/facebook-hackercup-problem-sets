#include <bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define sz size

#define MAXN 10001000


using namespace std;
typedef long long L;
typedef double D;
typedef vector<L> vi;
typedef vector<vi> vvi;
typedef pair<L,L> ii;


bitset<MAXN> isP;
int cnt[MAXN];

vi primes;

void build_sieve(){
  memset(cnt, 0, sizeof cnt);
  isP.set();
  primes.clear();
  for(int i = 2; i < MAXN; i++) if(isP.test(i)) {
    for(int j = i + i; j < MAXN; j += i)
      isP.reset(j), cnt[j]++;
    primes.pb(i);
    cnt[i] = 1;
  }

  // cout << primes.sz() << '\n';
  // int res = 1, pid = 0;
  // while(res < MAXN){
  //   cout << primes[pid] << ' ';
  //   res *= primes[pid++];
  // }
  // cout << endl;
  // res /= primes[--pid];
  // cout << res << '(' << pid << ")\n";
}
int acc[10][MAXN];
void build_acc(){
  for(int i = 0; i < 10; i++) acc[i][1] = 0;
  
  for(int i = 2; i < MAXN; i++){
    for(int j = 0; j < 10; j++)acc[j][i] = acc[j][i-1];
    acc[cnt[i]][i]++;
  }  
}
  
void solve(){
  L a,b,k;

  cin >> a >> b >> k;
  L ans = 0;
  if(k < 10)
    ans = acc[k][b] - acc[k][a-1];
    
  cout << ans << '\n';
}

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  build_sieve();
  build_acc();
  int T;
  cin >> T;
  for(int i = 1; i <= T; i++){
    cout << "Case #" << i << ": ";
    solve();
  }
}

#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 100100 * 100;

int lp[maxn];
bool used[maxn];
vi p;
int dp[maxn];
vi g[50];

int calc(int x) {
    int ans = 0;
    while(x != 1) {
        int p = lp[x];
        while(x % p == 0) x /= p;
        ans++;
    }
    return ans;
}

void process() {
    for(int i = 1; i < maxn; i++) lp[i] = i;
    for(int i = 2; i < maxn; i++) {
        if(used[i]) continue;
        for(int j = i; j < maxn; j += i) {
            lp[j] = min(lp[j], i);
            used[j] = 1;
        }
    }
}

int main(){

    process();
    
    for(int i = 1; i < maxn; i++) {
        g[calc(i)].pb(i);
    }
    
    int t, a, b, k;
    
    scanf("%d", &t);
    
    for(int i = 1; i <= t; i++) {
        scanf("%d%d%d", &a, &b, &k);
        printf("Case #%d: ", i);
        if(k >= 50) printf("0\n");
        else printf("%d\n", int(upper_bound(all(g[k]), b) - lower_bound(all(g[k]), a)));
    }
    
    return 0;
}

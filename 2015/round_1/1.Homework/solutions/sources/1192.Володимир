#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <stdexcept>
#include <functional>
#include <math.h>
#include <utility>

#pragma comment(linker, "/STACK:133217728")

using namespace std;
int N = 1e+7;
int ok[10000100];

vector <int> p;

void getPrimes() {
	for(int i=2; i<=N; i++)
		if(!ok[i]) {
			p.push_back(i);
			if(i > 10000) continue;

			for(int j=i*i; j<=N; j += i)
				ok[j] = i;
		}
}

int cnt[10000100][10];
void preCalc() {
	for(int i=2; i<=10000000; i++) {
		int k = i;
		int count = 0;

		while(k > 1 && ok[k]) {
			count++;
			int pp = ok[k];
			while(!(k % pp)) k /= pp;
		}
		if(k > 1 && !ok[k]) count++;

		for(int j=1; j<10; j++)
			cnt[i][j] = cnt[i-1][j];
		cnt[i][count]++;
	}
}

int brute(int A, int B, int K) {
	int res = 0;
	for(int i=A; i<=B; i++) {
		int k = i;
		int count = 0;
		for(int j=0; j<p.size() && k > 1 && p[j]*p[j] <= k; j++) 
			if(!(k % p[j])) {
				count++;
				while(!(k % p[j]))
					k /= p[j];
			}
			if(k > 1) count++;
			if(count == K) res++;
	}
	return res;
}

int Res(int A, int B, int K) {
	if(K >= 9) return 0; 
	else 
	{
		return cnt[B][K] - cnt[A-1][K];
	}
}
void check() {
	for(int i=1000; i<=8000; i++) {
		for(int k=2; k<=4; k++) 
			if(brute(1, i, k) != Res(1, i, k))
				cout << "WA" << endl;
	}
	 
	cout << "checked" << endl;
}
int main() {  
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
	getPrimes();
	preCalc();

	//check();
	int T;
	cin >> T;
	for(int t=1; t<=T; t++) {
		int A, B, K;
		cin >> A >> B >> K;
		cout << "Case #" << t << ": ";
		if(K >= 9) cout << 0 << endl; else {
			cout << cnt[B][K] - cnt[A-1][K] << endl;
		}
	}
    return 0;
}
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <iterator>
#define REP(i,a,n) for(int i = (a); i < (int)(n); ++i)
#define foreach(itr,c) for(decltype((c).begin()) itr=(c).begin(); itr != (c).end(); itr++)
#define mp(a,b) make_pair(a,b)

using namespace std;

//typedef __int64 ll;
//typedef unsigned __int64 ull;
typedef long long ll;
typedef unsigned long long ull;


template<typename T>
inline T ABS(T a) { return a > 0 ? a : -a; }
template<typename T>
inline T MIN(T a, T b) { return a < b ? a : b; }
template<typename T>
inline T MAX(T a, T b) { return a > b ? a : b; }
template<typename T>
inline T CHKMIN(T &a, T b) { if(a > b) a = b; return a; }
template<typename T>
inline T CHKMAX(T &a, T b) { if(a < b) a = b; return a; }
template<typename T>
inline void SWAP(T &a, T &b) { static T c; c = a; a = b; b = c; }

void Prime(int N, int *a, int *p, int &num) {
    int i, j;
    memset(a, 0, N * sizeof(a[0]));
    num = 0;
    for(i = 2; i < N; ++i) {
        if(!a[i]) a[i] = p[num++] = i;
        for(j = 0; j < num && i * p[j] < N; ++j) {
            a[i * p[j]] = p[j];
            if(!(i % p[j])) break;
        }
    }
}
const int N = 10000010;
int a[N], p[N], num, s[N];

int main() {	
  freopen("homework.txt", "r", stdin);
	freopen("homework.out", "w", stdout);
  int t;
  Prime(N, a, p, num);
  s[1] = 0;
  REP(i, 2, N) {
    int j = i / a[i];
    if(a[j] == a[i]) s[i] = s[j];
    else s[i] = s[j] + 1;
    //printf("%d %d\n", i, s[i]);
  }
  scanf("%d", &t);
  REP(tt, 1, t + 1) {
    int a, b, k;
    scanf("%d %d %d", &a, &b, &k);
    int ans = 0;
    REP(i, a, b + 1) {
      //printf("%d %d\n", i, s[i]);
      if(s[i] == k) ++ans;
      
    }
    printf("Case #%d: %d\n", tt, ans);
  }
  return 0;
}

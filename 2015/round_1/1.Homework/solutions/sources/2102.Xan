

#if 1

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cassert>
#include <fstream>
using namespace std;
typedef int64_t int64;

typedef pair<int,int> pii;
typedef pair<double,double> pdd;
#define mp make_pair
#define X first
#define Y second  

#define pb push_back

static void solve();

#define M 10000000
static int small[M+1];

int main() {
	for (int i = 2; i <= M; i++) {
		if (small[i] == 0) {
			for (int j = i; j <= M; j += i)
				if (small[j] == 0)
					small[j] = i;
		}
	}
	freopen("A1.in.txt","r",stdin);
	freopen("A1.out.txt","w",stdout);
	int test_case;
	cin >> test_case;
	for (int t = 1; t <= test_case; ++t) {
		cout << "Case #" << t << ": ";
		solve();
		cout << '\n';
	}
	return 0;
}


static int primorial[]{1, 2, 2*3, 2*3*5, 2*3*5*7, 2*3*5*7*11, 2*3*5*7*11*13,
					2*3*5*7*11*13*17, 2*3*5*7*11*13*17*19, 2*3*5*7*11*13*17*19*23};

static bool primacity(int x, int k) {
	if (k >= sizeof(primorial)/sizeof(int) || x < primorial[k])
		return false;
	int s = small[x];//smallestPrime(m, x);
	k--;
	x/= s;
	while (x % s == 0) {
		x /= s;
	}
	if (x > 1) {
		if (k == 0)
			return false;
		return primacity(x, k);
	}
	return (k == 0);

}

static void solve() {
	int A, B, K;
	cin >> A >> B >> K;
	
	
	int count = 0;
	for (int x = A; x <= B; ++x) {
		if (primacity(x, K))
			count++;
	}
	cout << count;
}

#endif


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Runtime.Remoting.Messaging;

namespace Problem1
{
    internal class Program
    {
        public static void RunTestCases(string[] rawTestCases,
            int numTestCases,
            Action<String> outputAction,
            Action<String> debugAction)
        {
            int currentLine = 0;

            var primeCounts = FastGenPrimesCounts(11000000);

            //primes.ForEach(x=>debugAction(x.ToString()));

            for (int i = 0; i < numTestCases; i++)
            {
                int[] settings = rawTestCases.GetSettings(currentLine++);

                int A = settings[0];
                int B = settings[1];
                int K = settings[2];

                int result = 0; 
                for (int j = A; j <= B; j++)
                {
                    if (primeCounts[j] == K) result++;
                }
                outputAction("Case #" +(i+1) +": "+ result);
            }
        }


        public static List<int> GenPrimes(int limit)
        {
            int i = 1;
            int total = 0;
            List<int> primes = new List<int>();
            do
            {
                i++;
                bool flag = false;
                foreach (var prime in primes)
                {
                    if (i % prime == 0)
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag) continue;
                total += i;
                primes.Add(i);
            } while (i <= limit);
            return primes;
        }

        public static List<int> FastGenPrimes(int limit)
        {
            
            BitArray flags = new BitArray(limit,true);
            for (int i = 2; i <= limit; i++)
            {
                if (flags[i])
                {
                    for (int j = i*2; j < limit; j+=i)
                    {
                        flags[j] = false;
                    }
                }
            }
            List<int> primes = new List<int>();
            for (int i = 2; i < limit; i++)
            {
                if (flags[i]) primes.Add(i);
            }
            return primes;
        }

        public static int[] FastGenPrimesCounts(int limit)
        {

            int[] counts = new int[limit];
            for (int i = 2; i < limit; i++)
            {
                if (counts[i]==0)
                {
                    for (int j = i; j < limit; j += i)
                    {
                        counts[j] +=1;
                    }
                }
            }
            return counts;
        }


        private static void Main(string[] args)
        {
            string filename = args.Length == 0 ? "" : args[0];
            if (filename == "")
            {
                var filenames = Directory.GetFiles(Environment.CurrentDirectory).Where(x => x.EndsWith(".in")).ToArray();
                Console.WriteLine("Test file?");
                int n = 0;
                foreach (var f in filenames)
                {
                    Console.WriteLine(n++ + ":" + f);
                }
                var i = int.Parse(Console.ReadLine());
                filename = filenames[i];
            }
            if (filename == "")
            {
                filename = Directory.GetFiles(Environment.CurrentDirectory).First(x => x.EndsWith(".in"));
            }

            string[] testFile = File.ReadAllLines(filename);
            int NumberOfTestCases = int.Parse(testFile.First().Trim());

            List<string> output = new List<string>();
            RunTestCases(testFile.Skip(1).ToArray(),
                NumberOfTestCases,
                output.Add,
                Console.WriteLine);
            File.WriteAllLines("output.out", output);
            Console.WriteLine("Finished " + filename);
            Console.WriteLine("-- press any key --");
            Console.ReadKey();
        }
    }

    internal static class Helpers
    {
        public static int[] GetSettings(this string[] rawFile, int line)
        {
            return rawFile[line].Split(' ')
                .Select(x => int.Parse(x.Trim())).ToArray();
        }

        public static long[] GetLongSettings(this string[] rawFile, int line)
        {
            return rawFile[line].Split(' ')
                .Select(x => long.Parse(x.Trim())).ToArray();
        }
    }
}

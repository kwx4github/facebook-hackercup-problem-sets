#include <iostream>
#include <algorithm>
#include <vector>
#include <climits>
#include <cmath>
#include <unordered_map>
#include <unordered_set>
#include <sstream>
#include <string.h>
#include <stack>
#include <queue>
#include <ctype.h>

using namespace std;

struct ListNode {
  int val;
  ListNode *next;
  ListNode (int x): val(x), next(NULL) {}
};

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x): val(x), left(NULL), right(NULL) {}
};

int main() {
  int N = pow(10, 7) + 1;
  int largestK = pow(10, 9) + 1;
  vector<int> factor (N, 1);
  factor[0] = 0;
  factor[1] = 0;
  int k ;
  for (int i = 2; i * i <= N; i++) {
    // not a prime
    if (factor[i] != 1)
      continue;

    // is a prime
    k = i * i;
    while(k <= N) {
      factor[k] = 0;
      k += i;
    }
  }

  // compute each number's primacy
  vector<int> record (N, 0);

  for (int i = 2; i <= N; i++) {
    if (factor[i] != 1)
      continue;
    k = i;
    while (k <= N) {
      record[k]++;
      k += i;
    }
  }

  // number of cases
  int T, A, B, K;
  cin >> T;
  for (int count = 1; count <= T; count++) {
    int total = 0;
    cin >> A >> B >> K;
    for (int i = A; i <= B; i++) {
      if (record[i] == K)
        total++;
    }
    cout << "Case #" << count << ": " << total << endl;
  }
  return 0;
}

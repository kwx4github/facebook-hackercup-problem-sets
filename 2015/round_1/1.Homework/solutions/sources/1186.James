import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

public class Homework{
	private static String OUTFILE = "hwout.txt";
	private static String INFILE = "hwin.txt";
	private static BufferedReader br;
	private static BufferedWriter wr;
	private static int[] primes;
	private static ArrayList<Integer> primesList;
	private static int[] primacities;
	private static int MAX = 10000000;
	public static void main(String args[]){
		try{
			br = new BufferedReader(new FileReader(INFILE));
			wr = new BufferedWriter(new FileWriter(OUTFILE));
		} catch (IOException e){
			System.out.println("IO Error");
		}
		int t = Integer.parseInt(next());
		String ans;
		int a, b, k;
		generatePrimes();
		for (int i = 0; i < t; i++){
			ans = "Case #"+(i+1)+": ";
			a = Integer.parseInt(next());
			b = Integer.parseInt(next());
			k = Integer.parseInt(next());
			int count = 0;
			for (int j = a; j <= b; j++){
				if (primacity(j) == k){
					count += 1;
				}
			}
			ans = ans + count;
			System.out.println(ans);
			write(ans);
		}
		try{
			wr.close();
		} catch (IOException e){
			System.out.println("Error Closing");
		}
	}

	private static StringTokenizer st;

	private static String next(){
		while (st == null || !st.hasMoreElements()){
			String str;
			try{
				str = br.readLine();
			} catch (IOException e){
				return null;
			}
			st = new StringTokenizer(str);
		}
		return st.nextToken();
	}

	private static void write(String str){
		try{
			wr.write(str, 0, str.length());
			wr.newLine();
		} catch (IOException e){
			System.out.println("Problem writing");
		}
	}

	private static void generatePrimes(){
		primes = new int[MAX+1];
		primacities = new int[MAX+1];
		primesList = new ArrayList<Integer>();
		primes[0] = -1;
		primes[1] = -1;
		primacities[0] = 0;
		primacities[1] = 0;
		for (int i = 2; i < MAX; i++){
			if (primes[i] == -1){
				continue;
			}
			primesList.add(i);
			for (int j = 1; j <= MAX/i;j++){
				if (j == 1){
					primes[i*j] = 0;
					primacities[i*j] = 1;
				} else {
					primes[i*j] = -1;
					primacities[i*j] += 1;
				}
			}
		}
	}

	private static int primacity(int n){
		return primacities[n];
	}
}
#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> Pii;
typedef pair<ll, ll> Pll;

#define FOR(i,n) for(int i = 0; i < (n); i++)
#define sz(c) ((int)(c).size())
#define ten(x) ((int)1e##x)
#define tenll(x) ((ll)1e##x)
template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }
template<class T> void chmax(T& a, T b) { a = max(a, b); }
template<class T> void chmin(T& a, T b) { a = min(a, b); }

bool prime[ten(7) + 1];
int h[ten(7) + 1];
vector<int> g[100];

//ëfêîóÒãì
void init_prime()
{
	memset(prime, 1, sizeof(prime));
	prime[0] = prime[1] = false;
	for (int i = 2; i < sizeof(prime); i++) if (prime[i])
		for (int j = i * 2; j < sizeof(prime); j += i) prime[j] = false;
	for (int i = 2; i < sizeof(prime); i++) if (prime[i])
		for (int j = i; j < sizeof(prime); j += i) h[j]++;
	for (int i = 2; i < sizeof(prime); i++) g[h[i]].push_back(i);

}

int core(int a,int b,int k){
	if (k >= 100) return 0;
	auto it1 = lower_bound(g[k].begin(), g[k].end(), a);
	auto it2 = upper_bound(g[k].begin(), g[k].end(), b);
	return it2 - it1;
}

void solve(){
	int a, b, k; cin >> a >> b >> k;
	int ans = core(a, b, k);
	cout << ans << endl;
}

int main(){
	init_prime();
	int t; cin >> t;
	FOR(i,t){
		printf("Case #%d: ", i + 1);
		solve();
	}
}
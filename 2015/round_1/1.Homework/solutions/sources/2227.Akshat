#include<bits/stdc++.h>
#define limit 10000001
using namespace std;


bool haiKyaPrime[limit];
int primacity[limit];
int answer[limit][10];
vector<int> primes;

void sieve() {
    primes.reserve(limit);
    memset(haiKyaPrime, true, sizeof(bool) * limit);
    haiKyaPrime[0] = 0;
    haiKyaPrime[1] = 1;
    for(int i = 2; i * i < limit; i++) {
        if(haiKyaPrime[i]) {
            for(int j = i * i; j < limit; j = j + i) {
                haiKyaPrime[j] = false;
            }
        }
    }

    for(int i = 2; i < limit; i++) {
        if(haiKyaPrime[i]) {
            primes.push_back(i);
        }
    }
}

void calcPrimacity() {
    for(int i = 2; i < limit; i++) {
        if(haiKyaPrime[i]) {
            primacity[i] = 1;
            continue;
        }
        for(int j = 0; j < primes.size(); j++) {
            if(i % primes[j] == 0) {
                if(((i / primes[j] ) % primes[j]) == 0)
                    primacity[i] = primacity[i / primes[j]];
                else
                    primacity[i] = primacity[i / primes[j]] + 1;
                break;
            }
        }
    }
}

void calcCummulativePrimacity() {
    for(int i = 2; i < limit; i++) {
        for(int j = 1; j < 10; j++) {
            if(primacity[i] == j)
                answer[i][j] = answer[i-1][j] + 1;
            else
                answer[i][j] = answer[i-1][j];
        }
    }
}

int main() {

    sieve();
    calcPrimacity();
    calcCummulativePrimacity();

    int t, a, b, k;
    scanf("%d", &t);

    for(int i = 1; i <= t; i++) {
        scanf("%d%d%d", &a, &b, &k);
        printf("Case #%d: %d\n", i, answer[b][k] - answer[a-1][k]);
    }

    return 0;
}

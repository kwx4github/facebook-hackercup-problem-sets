#include <bits/stdc++.h>
typedef long long LL;

using namespace std;

bitset<10000002> bs;
int T;
LL A,B,K;
vector<LL> primes;
LL primacity[10000001];
void sieve(LL upperbound){
  int _sieve_size=upperbound+1;
  bs.set();
  bs[0]=bs[1]=0;
  for(LL i=2;i<=_sieve_size;i++){
    if(bs[i]){
      for(LL j=i*i;j<=_sieve_size;j+=i){
         bs[j]=0;
      }
       primes.push_back(i);
    }
  }
}
LL prime_factors(LL n){
  LL sum=0;
  LL PF_idx=0;
  LL PF=primes[PF_idx];
  while(PF*PF<=n){
    LL counter=0;
    while(n%PF==0){
      n/=PF;
      counter++;
    }
    if(counter>=1){
      //factors.push_back(make_pair(PF,counter));
      sum++;
    }
    PF_idx++;
    PF=primes[PF_idx];
  }
  if(n!=1){
    //factors.push_back(make_pair(n,1));
    sum++;
  }
  return sum;
}

void init(){
  sieve(10000001);
  for(LL i=2;i<=10000000;i++){
    primacity[i]=prime_factors(i);
  }
}
int main(){
  init();
  cin>>T;
  //T=100;
  LL rv;
  for(int i=0;i<T;i++){
    cin>>A>>B>>K;
    //A=2;B=10000000;K=2;
    rv=0;
    for(LL j=A;j<=B;j++){
      if(primacity[j]==K){
	rv++;
      }
    }
    cout<<"Case #"<<i+1<<": "<<rv<<endl;
  }

  return 0;
}

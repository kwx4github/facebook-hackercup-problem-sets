#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

// Define some boolean types
static const char T = 1;
static const char F = 0;
typedef char boolean;

int main(int argc, char *argv[]) {
	FILE *fp;
	int T, largest = 0;
	unsigned int i, j, h, a, b, k, numPrimes, primacity, cur;
	fp = fopen(argv[1], "r");
	fscanf(fp, "%d", &T);
	
	// Find largest value of B
	for(i = 0; i < T; i++) {
		fscanf(fp, "%d %d %d", &a, &b, &k);
		if(b > largest) {
			largest = b;
		}
	}
	
	// ---------------------
	// Sieve of Eratosthenes
	// Define boolean array
	unsigned int sizeA = (unsigned int)sqrt((largest+1))+1;
	boolean A[sizeA];
	memset(A, T, sizeA);
	// Count the number of primes found so far
	numPrimes = 0;	
	for(i = 2; i < (unsigned int)sqrt(largest+1) + 1; i++) {
		if(A[i]) {
			numPrimes++;
			for(j = i*i; j < sizeA; j += i) {
				A[j] = F;
			}
		}
	}
	// List all primes below B
	unsigned int primes[numPrimes];
	for(i = 2, j = 0; i < largest+1; i++) {
		if(A[i]) {
			primes[j] = i;
			j++;
		}
	}
	
	// Now, find all primacities
	rewind(fp);
	fscanf(fp, "%d", &T);
	for(i = 0; i < T; i++) {
		fscanf(fp, "%d %d %d", &a, &b, &k);
		primacity = 0;
		for(j = a; j <= b; j++) {
			cur = 0;
			for(h = 0; h < numPrimes; h++) {
				if(cur > k || primes[h] > j) {
					break;
				}
				if(j % primes[h] == 0) {
					cur++;
				}
			}
			if(cur == k) {
				primacity++;
			}
		}
		printf("Case #%d: %d\n", (i+1), primacity);
	}
		
	
	return 0;
}

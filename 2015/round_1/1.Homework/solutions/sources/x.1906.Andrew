#include <iostream>
#include <list>
#include <cmath>
using namespace std;

void generate_primes(list<int>& primes, int max)
{
    primes.push_back(2);
    for (int test = 3; test <= max; test+=2) {
        int tm = (int)sqrt(test);
        bool isprime = true;
        for (list<int>::const_iterator pc = primes.begin(); pc != primes.end(); pc++) {
            int i = *pc;
            if (i > tm) {
                break;
            }
            if ((test % i) == 0) {
                isprime = false;
                break;
            }
        }
        if (isprime) {
            primes.push_back(test);
        }
    }
}

int main(void)
{
    list<int> primes;
    generate_primes(primes, (int)sqrt(10000000));
    int tc;
    cin >> tc;
    for (int c = 1; c <= tc; c++) {
        int min, max, primacity;
        cin >> min >> max >> primacity;
        int nummatching = 0;
        for (int p = min; p <= max; p++) {
            int n = p;
            int numfactors = 0;

            int maxfactor = (int)sqrt(n);

            int ck = 1;
            for (list<int>::iterator pc = primes.begin();
                pc != primes.end(); pc++) {
                ck = *pc;
                if (ck > maxfactor) {
                    break;
                }
                if ((n % ck) == 0) {
                    do {
                        n /= ck;
                    } while ((n % ck) == 0);
                    numfactors++;
                    if (numfactors > primacity) {
                        break;
                    }
                    maxfactor = (int)sqrt(n);
                }
            }

            if (ck > maxfactor && n > 1) {
                numfactors++;
            }
            if (numfactors == primacity) {
                nummatching++;
            }
        }
        cout << "Case #" << c << ": " << nummatching << endl;
    }
}

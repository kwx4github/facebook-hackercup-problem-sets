#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std ;

const int N = 1e7 ;
int p[N] ;
int flag[N + 10] = {0} ;
int cnt = 0 ;
int num[N + 10] ;
vector <int> v[30] ;

int Cal( int n ) {
    int ret = 0 ;
    for ( int i = 0; i < cnt; ++i ) {
        if ( (long long) p[i] * p[i] > n )  break ;
        if ( n % p[i] == 0 ) {
            ret++ ;
            while ( n % p[i] == 0 ) n /= p[i] ;
        }
    }
    return ret + ( n == 1 ? 0 : 1 ) ;
}


void init() {
    for ( int i = 2; i <= N; ++i ) {
        if ( flag[i] )  continue ;
        p[cnt++] = i ;
        for ( int j = i + i; j < N; j +=i )
            flag[j] = 1 ;
    }

    for ( int i = 2; i <= N; ++i ) {
        int k = Cal(i) ;
        v[k].push_back(i) ;
    }

}

int main() {
    freopen( "input.txt", "r", stdin ) ;
    freopen( "output.txt", "w", stdout ) ;
    init() ;
    int T, cas = 1 ;
    cin >> T ;
    while ( T-- ) {
        int A, B,  k ;
        cin >> A >> B >> k ;
        cout << "Case #" << cas++ << ": " ;
        if ( k > 30 ) {
            cout << 0 << endl ;
            continue ;
        }
        int ans = upper_bound( v[k].begin(), v[k].end(), B ) - lower_bound( v[k].begin(), v[k].end(), A ) ;
        cout << ans << endl ;
    }
    return 0 ;
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;


public class Solution1 {
	private static final int LIMIT = 10000000;
	private final int[] primes;
	private final int[] primicity;
	
	public Solution1() {
		primes = createPrimes(LIMIT);
		primicity = createPrimicity();
	}
	
	public static void main(String[] args){
		System.out.println("Problem1.Solution.main started");
		Solution1 solution = new Solution1();
		Group[] list = solution.readFile(args[0]);
		solution.writeFile(args[1], list);
	}
	
	private Group[] readFile(String fileName) {
		Group[] result = null;
		FileReader fr = null;
		BufferedReader br = null;
		try {
			fr = new FileReader(fileName); 
			br = new BufferedReader(fr);
			String s = br.readLine();
			int n = Integer.parseInt(s);
			result = new Group[n];
			for (int i = 0; i < n; i++) {
				String[] line = br.readLine().split(" ");
				result[i] = new Group(Integer.parseInt(line[0]), Integer.parseInt(line[1]), Integer.parseInt(line[2]));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
				}
			}
		}
		
		return result;
	}
	
	private void writeFile(String fileName, Group[] list) {
		int[] result = process(list);
		
		File fout = new File(fileName);
		FileOutputStream fos;
		BufferedWriter bw = null;
		try {
			fos = new FileOutputStream(fout);
			bw = new BufferedWriter(new OutputStreamWriter(fos));
			for (int i = 0; i < result.length; i++) {
				bw.write("Case #" + (i + 1) +  ": " + result[i]);
				bw.newLine();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (Exception e) {
				}
			}
		}
	}
		
	private int[] createPrimes(int limit) {
		boolean[] masks = new boolean[limit + 1];
		for (int i = 2; i < Math.sqrt(limit); i++) {
			if (!masks[i]) {
				for (int j = i * i; j < masks.length; j += i) {
					masks[j] = true;
				}
			}
		}

		int count = 0;
		for (int i = 2; i < masks.length; i++) {
			if (!masks[i]) {
				count++;
			}
		}
		
		int[] result = new int[count];
		int index = 0;
		for (int i = 2; i < masks.length; i++) {
			if (!masks[i]) {
				result[index++] = i;
			}
		}
		
		return result;
	}
	
	private int[] createPrimicity() {
		int[] primicity = new int[LIMIT + 1];
		for (int prime : primes) {
			for (int j = prime; j < primicity.length; j += prime) {
				primicity[j]++;
			}
		}
		
		return primicity;
	}
	
	private int[] process(Group[] groups) {
		int[] result = new int[groups.length];
		for (int i = 0; i < groups.length; i++) {
			Group g = groups[i];
			int count = 0;
			for (int j = g.A; j <= g.B; j++) {
				if (primicity[j] == g.K) {
					count++;
				}
			}
			
			result[i] = count;
		}
		
		return result;
	}
	
	private class Group {
		public int A;
		public int B;
		public int K;
		
		public Group(int a, int b, int k) {
			this.A = a;
			this.B = b;
			this.K = k;
		}
	}
} 
package round1;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class Homework {
    private static final String AUTOCOMPLETE_OUT = "homework_out.txt";
    private static final String AUTOCOMPLETE_IN = "homework.txt";
    private static final int LIMIT = 10000003;
    private static final boolean[] sieve = new boolean[LIMIT];
    private static final int[] primacities = new int[LIMIT + 1];

    public static void main(String[] args) {
        Arrays.fill(primacities, 0);
        generateSieve();
        Object[] lines = getFileContent();
        if (lines == null) {
            return;
        }
        String result = "";
        int cases = Integer.parseInt((String) lines[0]);
        for (int i = 0; i < cases; i++) {
            String line = lines[i + 1].toString();
            String[] numbers = line.split("\\s+");
            int a = Integer.parseInt(numbers[0]);
            int b = Integer.parseInt(numbers[1]);
            int k = Integer.parseInt(numbers[2]);
            int primacity = solve(a, b, k);
            if (i < cases - 1) {
                result += String.format("Case #%d: %d\n", i + 1, primacity);
            } else {
                result += String.format("Case #%d: %d", i + 1, primacity);
            }
        }
        printToFile(result);
    }

    private static void generateSieve() {
        for (int i = 2; i < LIMIT; i++) {
            sieve[i] = true;
        }
        for (int i = 2; i * i < LIMIT; i++) {
            if (sieve[i]) {
                primacities[i]++;
                for (int j = 2; i * j < LIMIT; j++) {
                    sieve[i * j] = false;
                    if (sieve[i]) {
                        primacities[i * j]++;
                    }
                }
            }
        }
    }

    private static int solve(int a, int b, int k) {
        int result = 0;
        for (int i = a; i <= b; i++) {
            if (primacities[i] == k) {
                result++;
            }
        }
        return result;
    }

    private static Object[] getFileContent() {
        Object[] lines = null;
        try {
            lines = Files.lines(Paths.get(AUTOCOMPLETE_IN)).toArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lines;
    }

    private static void printToFile(String result) {
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(AUTOCOMPLETE_OUT);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        writer.print(result);
        writer.close();
    }
}

#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<int> K(1e7 + 1);
vector<vector<int>> divs(20);

void pre_compute() {
  for (int i = 2; i <= 1e7; ++i) {
    if (K[i] == 0) {
      for (int j = i; j <= 1e7; j += i) {
        ++K[j];
      }
    }

    divs[K[i]].push_back(i);
  }
}

int testcase() {
  int A, B, K;
  cin >> A >> B >> K;

  if (K >= 20) {
    return 0;
  }

  return upper_bound(std::begin(divs[K]), std::end(divs[K]), B) -
         lower_bound(std::begin(divs[K]), std::end(divs[K]), A);
}



int main(int argc, char const *argv[]) {
  ios_base::sync_with_stdio(false);
  pre_compute();
  int T;
  cin >> T;
  for (int t = 0; t < T; ++t) {
    cout << "Case #" << t+1 << ": " << testcase() << endl;
  }

  return 0;
}

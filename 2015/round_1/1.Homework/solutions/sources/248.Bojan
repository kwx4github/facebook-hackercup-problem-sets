import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class Homework {

	public static void main(String[] args) throws Exception {
		Homework object = new Homework();
		String className = object.getClass().getSimpleName();

		FileReader fileReader = new FileReader(new File(className.toLowerCase()
				+ ".in"));
		Scanner scanner = new Scanner(new BufferedReader(fileReader));

		FileWriter wr = new FileWriter(className.toLowerCase() + ".out");

		int testCases = scanner.nextInt();

		for (int tc = 1; tc <= testCases; tc++) {

			int A = scanner.nextInt();
			int B = scanner.nextInt();
			int K = scanner.nextInt();

			int result = object.count(A, B, K);
			wr.write("Case #" + tc + ": " + result + "\r\n");
		}

		scanner.close();
		wr.close();
	}

	List<Integer> primes = null;
	HashMap<Integer, Integer> primacity = null;

	int count(int A, int B, int K) {

		if (primes == null || primacity == null) {
			primes = generatePrimes(2, 4001);
			primacity = calculatePrimacity(2, 10000000);
		}

		int result = 0;

		for (int c = A; c <= B; c++)
			if (primacity.get(c) == K)
				result++;

		return result;

	}

	private boolean isPrime(int N) {

		if (N == 1)
			return false;

		if (N <= 3)
			return true;

		if (N % 2 == 0)
			return false;

		for (int z = 3; z * z <= N; z += 2)
			if (N % z == 0)
				return false;

		return true;
	}

	private List<Integer> generatePrimes(int from, int to) {
		List<Integer> output = new ArrayList<Integer>();

		for (int k = from; k <= to; k++)
			if (isPrime(k))
				output.add(k);

		return output;

	}

	private HashMap<Integer, Integer> calculatePrimacity(int from, int to) {
		HashMap<Integer, Integer> output = new HashMap<Integer, Integer>();

		for (int k = from; k <= to; k++) {
			int temp = k;
			int counter = 0;

			for (int prime : primes)
				if (temp % prime == 0) {
					counter++;

					while (temp % prime == 0)
						temp /= prime;
					
					if (temp == 1 || prime >= temp)
						break;
				}

			if (temp > 1)
				if (isPrime(temp)) {
					counter++;
					temp /= temp;
				}

			if (temp != 1)
				return null;

			output.put(k, counter);
		}

		return output;
	}

}

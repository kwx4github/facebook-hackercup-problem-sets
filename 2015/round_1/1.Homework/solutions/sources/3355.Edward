import math

def sieve(length): #returns a boolean array where isPrime[n] says if n is prime
    isPrime = [True] * (length + 1)
    isPrime[0] = False
    isPrime[1] = False
    for i in range(2, length / 2 + 1):
        if(isPrime[i]):
            for j in range(2, length / i + 1):
                isPrime[i * j] = False
    return isPrime

def distinctPrime(n):
    '''
    adds the number of prime divisors to divisors
    '''
    if(isPrime[n]):
        primeDivisor[n] = 1
        return 0
    i = 2
    while(i <= math.sqrt(n)):
        if(isPrime[i]):
            if(n % i == 0):
                if((n / i) % i == 0):
                    primeDivisor[n] = primeDivisor[n / i]
                    return 0
                else:
                    primeDivisor[n] = primeDivisor[n / i] + 1
                    return 0

            else:
                i += 1
        else:
            i += 1

def function(A,B,K):
    if(K > 8): return 0
    count = 0
    for i in range(A, B+1):
        if(primeDivisor[i] == K): count += 1
    return count


fh = open("inputQ1.txt", "r")
T = int(fh.readline())
A = [0] * (T+1)
B = [0] * (T+1)
K = [0] * (T+1)
length = 0
for i in range(1, T+1):
    A[i], B[i], K[i] = map(int, fh.readline().split())
    if(B[i] > length): length = B[i]

fh2 = open("outputQ1.txt", "w")
isPrime = sieve(length)
primeDivisor = [0] * (length + 1)
for i in range(2, length + 1):
    distinctPrime(i)
for i in range(1, T+1):
    fh2.write('Case #%d: %d\n' % (i, function(A[i],B[i],K[i])))
fh2.close()

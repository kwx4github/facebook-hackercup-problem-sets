#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

const int maxp = (int)1e7 + 1;
int minprime[maxp];

const int maxcnt = maxp / 10;
int primes[maxcnt];
int cntPrimes;

void precalc() {
  for (int i = 0; i < maxp; ++i)
    minprime[i] = -1;

  cntPrimes = 0;
  for (int i = 2; i < maxp; ++i) {
    if (minprime[i] == -1)
      primes[cntPrimes++] = i, minprime[i] = cntPrimes - 1;
    for (int j = 0; j <= minprime[i]; ++j) {
      int x = i * primes[j];
      if (x >= maxp)
        break;
      minprime[x] = j;
    }
  }
  assert(cntPrimes <= maxcnt);
}

bool solve() {
  int l, r, k;
  if (scanf("%d%d%d", &l, &r, &k) < 3)
    return 0;

  int ans = 0;
  for (int x = l; x <= r; ++x) {
    int cnt = 0;
    int last = -1;
    for (int value = x; value != 1;) {
      int cur = primes[minprime[value]];
      value /= cur;
      if (last != cur)
        ++cnt;
      last = cur;
    }
    if (cnt == k)
      ++ans;
  }

  printf("%d\n", ans);
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif

  precalc();

  int t;
  while (scanf("%d", &t) == 1) {
    for (int i = 0; i < t; ++i) {
      printf("Case #%d: ", i + 1);
      assert(solve());
    }
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}

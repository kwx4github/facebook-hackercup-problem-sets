package hackerCup;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

public class homework
{

  public static List<Integer> primes = new ArrayList<Integer>();
  public static int[] ks;

  static int maximum=10000000;
  public static void main(String[] args)
  {
      runEratosthenesSieve(maximum);

      Scanner sc=new Scanner(System.in);
      int numCases=sc.nextInt();
      sc.nextLine();

      for(int i = 1; i <= numCases; i++)
      {
    	String testCase=sc.nextLine();
		StringTokenizer str=new StringTokenizer(testCase);
    	int A=Integer.parseInt(str.nextToken());
		int B=Integer.parseInt(str.nextToken());
		int K=Integer.parseInt(str.nextToken());

    	int ctr = 0;

        for(int j = A; j <= B; j++)
        {
          if(ks[j] == K)
          {
            ctr++;
          }

        }
        System.out.println("Case #" + i + ": " + ctr);
      }
      sc.close();
  }

  public static Set<Integer> primeFactors(int number, int k)
  {
    Set<Integer> factors = new HashSet<Integer>();
    for(int i: primes)
    {
      if(i > number)
        break;

      if(number%i == 0)
      {
        factors.add(i);
      }

      if(factors.size() > k)
        break;
    }

    return factors;
  }
	

  public static void runEratosthenesSieve(int upperBound) 
  {
      int upperBoundSquareRoot = (int) Math.sqrt(upperBound);
      boolean[] isComposite = new boolean[upperBound + 1];
      ks = new int[upperBound + 1];
      for (int m = 2; m <= upperBoundSquareRoot; m++) 
      {
            if (!isComposite[m]) 
            {
                  primes.add(m);
                  for (int k = m * m; k <= upperBound; k += m)
                  {
                        isComposite[k] = true;
                  }
            }
            
      }
      for (int m = upperBoundSquareRoot; m <= upperBound; m++)
      {
            if (!isComposite[m])
            {
              primes.add(m);
            }
      }

      for(int j = 2; j <= maximum; j++)
      {
        ks[j] = 0;
      }
      for(int i: primes)
      {
        ks[i] = 1;
        for(int j = i+i; j <= maximum && j > 0; j += i)
        {
          
          ks[j]++;
        }
      }
  }


}

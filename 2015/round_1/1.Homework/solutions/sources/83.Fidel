#include <iostream>
#include <algorithm>
#include <map>
using namespace std;

#define MAXN 131072

#define ABS(x) ( (x)<0 ? -(x) : (x) )
#define SIGN(c) ( (c)=='+' ? 1 : -1 )

int q[MAXN], n[MAXN], c[MAXN], val[MAXN], rmq_val[MAXN];
map<int, int> pos;

int gcd(int a, int b) {
    if (b == 0) return a;
    else return gcd(b, a%b);
}

#define LEFT(n) ( 2*(n) )
#define RIGHT(n) ( 2*(n)+1 )

int oper(int a, int b) {
    return gcd(a, b);
}

void rmq_update(int n,int s,int e,int*rmq,int*m,int p,int v) {
    if (s+1 == e) rmq[n] = m[s] = v;
    else {
        if (p < (s+e)/2) rmq_update(LEFT(n), s, (s+e)/2, rmq, m, p, v);
        else rmq_update(RIGHT(n), (s+e)/2, e, rmq, m, p, v);
        rmq[n] = oper(rmq[LEFT(n)], rmq[RIGHT(n)]);
    }
}

int main() {
    int Q, N, i, j;
    char tmp;

    cin >> Q; N = 0;
    for (i=0; i<Q; i++) {
        cin >> tmp >> q[i];
        if (pos.find(q[i]) == pos.end()) {
            pos[q[i]] = N;
            n[N++] = q[i];
        }
        q[i] *= SIGN(tmp);
    }

    for (i=0; i<Q; i++) {
        j = pos[ABS(q[i])];
        if (q[i] < 0) {
            c[j]--;
            if (c[j] == 0) rmq_update(1, 0, N, rmq_val, val, j, 0);
        } else {
            c[j]++;
            if (c[j] == 1) rmq_update(1, 0, N, rmq_val, val, j, n[j]);
        }
        if (rmq_val[1]) cout << rmq_val[1] << endl;
        else cout << 1 << endl;
    }

    return 0;
}

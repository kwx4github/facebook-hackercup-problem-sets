#include <stdio.h>
#include <algorithm>
#include <assert.h>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <iostream>
#include <queue>
#include <cmath>
#include <ctime>
#include <climits>
#include <iomanip>
#include <sstream>
using namespace std;

typedef long long LL;
#define tr(container, it)for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = (a); i < (int)(b); i++)

int GCD (int a, int b) { if (!a) return b; return GCD(b%a, a);}

#define X 10001000
#define MAXK 32

vector<int> group[MAXK];

int main() {
    clock_t startTime = clock();
    ios_base::sync_with_stdio(false);

    vector<int> cnt (X);
    vector<bool> isp(X, true);
    for (int i = 2; i < X; i++) {
        if (isp[i]) {
            for (int j = i; j < X; j += i) {
                cnt[j] ++;
                isp[j] = false;
            }
        }
    }
    for (int i = 2; i < X; i++) {
        group[cnt[i]].PB(i);
    }
    int t; cin>>t;
    int tno = 1;
    while (t--) {
        cout<<"Case #"<<tno++<<": ";
        int a, b; cin>>a>>b;
        int k; cin>>k;
        if (k >= MAXK) {
            cout<<0;
        } else {
            int ans = upper_bound(group[k].begin(), group[k].end(), b) -
            lower_bound(group[k].begin(), group[k].end(), a);
            cout<<ans;
        }
        cout<<"\n";
    }

    clock_t endTime = clock();
    cerr<<"\nTime:"<< double(endTime - startTime) / CLOCKS_PER_SEC <<" seconds\n" ;
    return 0;
}

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <deque>
#include <cassert>

using namespace std;

#ifdef WIN32
	#define I64 "%I64d"
#else
	#define I64 "%lld"
#endif

typedef long long ll;

#define F first
#define S second
#define mp make_pair
#define pb push_back
#define all(s) s.begin(), s.end()
#define sz(s) (int(s.size()))
#define fname "a"
#define ms(a,x) memset(a, x, sizeof(a))
#define forit(it,s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)
#define MAXV 10000001

int a, b, k;
int lp[MAXV];
int pr[MAXV], npr;
int c[MAXV];
int d[MAXV][9];

inline void solve()
{
	scanf("%d%d%d", &a, &b, &k);
	if (k >= 9)
		puts("0");
	else
		printf("%d\n", d[b][k] - d[a - 1][k]);
}

int main()
{
	#ifdef LOCAL
	freopen(fname".in", "r", stdin);
	freopen(fname".out", "w", stdout);
	#endif

	for (int i = 2; i < MAXV; ++i)
	{
		if (lp[i] == 0)
		{
			lp[i] = i;
			pr[npr++] = i;
		}
		for (int j = 0; j < npr && pr[j] <= lp[i] && i * pr[j] < MAXV; ++j)
			lp[i * pr[j]] = pr[j];
	}

	for (int i = 2; i < MAXV; ++i)
	{
		int t = i;
		while(t % lp[i] == 0)
			t /= lp[i];
		c[i] = c[t] + 1;
		for (int j = 0; j < 9; ++j)
			d[i][j] += d[i - 1][j];
		++d[i][c[i]];
	}
	int tt;
	scanf("%d", &tt);
	for (int t = 0; t < tt; ++t)
	{
		printf("Case #%d: ", t + 1);
		solve();
	}
	return 0;
}

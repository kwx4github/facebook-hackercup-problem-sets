import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;


/**
 * A. Homework
 * @author Albert Choi
 */
public class A {
	static BufferedReader _reader = new BufferedReader(new InputStreamReader(System.in));
	static String _s;
	static StringTokenizer _st;
	static int _l;
	static String nline() throws IOException { _s = _reader.readLine(); ++_l; _st = new StringTokenizer(_s); return _s; }
	static String nword() 	{ return _st.nextToken(); }
	static int nint() 		{ return Integer.parseInt(nword()); }
	static long nlong() 	{ return Long.parseLong(nword()); }
	static double ndouble() { return Double.parseDouble(nword()); }
	static BigInteger nbig(){ return new BigInteger(nword()); }
	static PrintStream sout = System.out, serr = System.err;
	
	public static void main(String[] args) throws IOException {
		genPrime();
		try {
			nline();
			int T = nint();
			for (int t=1; t<=T; t++) {
				String sans = doProblem();
				sout.println("Case #" + t + ": " + sans);
			}
		} catch (Throwable t) {
			System.err.println("At input line " + _l + ": " + _s); throw t;
		}
	}
	
	static String doProblem() throws IOException {
		nline();
		int A = nint(), B = nint(), K=nint();
		int c = 0;
		if (K > max) return "0";
		for (int i=A; i<=B; i++) {
			if (as[i] == K) c++;
		}
		return c+"";
	}

	static boolean isPrime(int i) {
		for (int j=2; j<=Math.sqrt(i); j++) {
			if (i % j == 0) return false;
		}
		return true;
	}
	
	static List<Integer> primes = new ArrayList<>();
	static int[] as = new int[(int) Math.pow(10, 7) + 1];
	static int max = 1;

	static void genPrime() {
		primes.addAll(Arrays.asList(2,3,5,7,11,13,17));
		int root = (int) Math.sqrt(10000000) + 1;
		
		for (int i=19; i<=root; i+=2) {
			boolean p = true;
			for (int j=2; p && j<=Math.sqrt(i); j++) {
				if (i % j == 0) p = false;
			}
			if (p) {
				primes.add(i);
				//sout.print(i + ", ");
			}
		}
		sout.println("done primes " + primes.size());
		for (int i=1; i<as.length; i++) {
			if (isPrime(i)) as[i] = 1;
			else {
				int a = 0;
				for (int p : primes) {
					if (i % p == 0) {
						a++;
					}
					if (p >= i) break;
				}
				as[i] = a;
				if (a > max) max = a;
			}
		}
		sout.println("done primacity " + as.length);
	}
	
}

#include <bits/stdc++.h>
using namespace std;

#define N 10000001
#define PB push_back

int c[N];
bool isP[N];
vector<int> v[10];

inline int gI(int k, int x){
    int l = 0, r = (int)(v[k].size() - 1), mid, ret = -1;
    while(l <= r){
        mid = l + (r - l) / 2;
        if( v[k][mid] >= x ){
            ret = mid;
            r = mid - 1;
        }
        else{
            l = mid + 1;
        }
    }
    return ret;
}

inline int lI(int k, int y){
    int l = 0, r = (int)(v[k].size() - 1), mid, ret = -1;
    while(l <= r){
        mid = l + (r - l) / 2;
        if( v[k][mid] <= y ){
            ret = mid;
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
    }
    return ret;
}

inline void Pre(){
    int i, j;
    for(i = 2; i < N; i++){
        isP[i] = true;
    }
    for(i = 2; i * i < N; i++){
        if(!isP[i]) continue;
        for(j = i; j < N; j += i){
            isP[j] = false;
            c[j]++;
        }
    }
    int ans = 0;
    for(i = 2; i < N; i++){
        ans = max(ans, c[i]);
    }
    for(i = 2; i < N; i++){
        v[ c[i] ].PB(i);
    }
    return;
}

inline int Solve(){
    int x, y, k;
    cin>>x>>y>>k;
    if( (int)(v[k].size() == 0) or y < x or k > 9) return 0;
    int xi = gI(k, x), yi = lI(k, y);
    if(xi == -1 or yi == -1) return 0;
    return yi - xi + 1;
}

int main(){
    freopen("input.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    Pre();
    int t, tt = 0;
    cin>>t;
    while(t--){
        cout<<"Case #"<<++tt<<": "<<Solve()<<endl;
    }
    return 0;
}

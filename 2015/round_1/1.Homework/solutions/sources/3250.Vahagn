#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <ctime>
#include <stack>
using namespace std;

#define inf 2147483647
#define eps 0.0000000000001
#define pi 3.1415926535897932
#define mod 1000000007
#define LL long long
#define ULL unsigned long long
#define LD long double
#define ULD unsigned long double
#define topcoder TheGridDivOne

const int N = 100005;

//    printf("Case #%d: ",tcase);
//    cout<<fixed<<setprecision(3)<<"\nExecution time="<<clock()/1000.0<<endl;
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);

int n, m, i, j, k, q, s, w, v, ans;
bool is_prime[100 * N];
int p[100 * N], a[100 * N],b[100*N][10];
void calc_prime(),calc();
int find_lim();

int main()
{
	freopen("input.txt", "r", stdin);
    freopen("output.txt","w",stdout);

	n = 1e7;

	calc_prime();

	m = find_lim();

	for (i = 2; i <= n; i++)
	{
		int temp = i;
		j = q = 0;
		while (temp > 1)
		{
			j++;
			if (temp%p[j] == 0)
			{
				q++;
				while (temp%p[j] == 0)
					temp /= p[j];
			}
			if (is_prime[temp] == 0)
			{
				q++;
				break;
			}
		}
		a[i] = q;
	}

	calc();

	int tcase;
	cin >> w;
	for (tcase = 1; tcase <= w; tcase++)
	{
		int x, y;
		cin >> x >> y >> k;
		printf("Case #%d: %d\n", tcase, b[y][k]-b[x-1][k]);
	}
	return 0;
}

void calc_prime()
{
	is_prime[1] = 1;
	for (int i = 2; i*i <= n; i++)
		if (is_prime[i] == 0)
			for (int j = i*i; j <= n; j += i)
				is_prime[j] = 1;

	for (int i = 2; i <= n; i++)
		if (is_prime[i] == 0)
			p[++s] = i;
}

int find_lim()
{
	LL pop = 1;
	for (int i = 1; i <= s; i++)
	{
		pop *= 1ll * p[i];
		if (pop >= 1ll*(1e7))
			return i;
	}
}

void calc()
{
	for (int i = 2; i <= n; i++)
	{
		for (int j = 1; j <= 10; j++)
			b[i][j] = b[i - 1][j];
		b[i][a[i]]++;
	}
}



				
			





	

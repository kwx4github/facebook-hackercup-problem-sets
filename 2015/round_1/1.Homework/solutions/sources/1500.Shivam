#include<bits/stdc++.h>
#define vi vector<int>
#define vii vector<int>::iterator
using namespace std;
#define N 10000000
int lp[N+1],primacity[N+1];
vector<int> pr;
vector<int> pm[15];
int bsearch(int i,int k,int l, int r,bool flg){//flg =1 means largest element less than or equal to key, 0 means smallest element greater equal to the key
    //i is the primacity
    if(l==r)return l;
    else if(r-l==1){
        if(k<pm[i][l])return l;
        else if(k>pm[i][r])return r;
        else{
            if(flg){
                return pm[i][r]==k?r:l;
            }
            else return pm[i][l]==k?l:r;
        }
    }
    int mid=(l+r)/2;
    if(pm[i][mid]==k)return mid;
    else if(pm[i][mid]<k)return bsearch(i,k,mid,r,flg);
    return bsearch(i,k,l,mid,flg);
}

void seive(){
    for (int i=2; i<=N; ++i) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr.push_back (i);
        }
        for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
            lp[i * pr[j]] = pr[j];
    }
}
void preprocess(){
    for(int i=2;i<=N;++i){
        if(lp[i]==i)primacity[i]=1; //prime no
        else{
            if(lp[i]==lp[i/lp[i]])primacity[i]=primacity[i/lp[i]];
            else primacity[i]=primacity[i/lp[i]]+1;
        }
        pm[primacity[i]].push_back(i);
    }
}

int main(){
    seive();
    preprocess();
    int t,a,b,k,l,r,ans;
    cin>>t;
    for(int i=1;i<=t;i++){
        cin>>a>>b>>k;

        if(k<=8){
            l=bsearch(k,a,0,pm[k].size()-1,0);
            r=bsearch(k,b,0,pm[k].size()-1,1);
            //cout<<pm[k][l]<<' '<<pm[k][r]<<endl;
            if(l<=r)ans=r-l+1;
            else ans=0;

        }
        else ans=0;
        cout<<"Case #"<<i<<": "<<ans<<endl;

    }
}

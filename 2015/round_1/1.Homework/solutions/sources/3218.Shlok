#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
#include<sstream>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
#include<sstream>
#define FOR(i, s, e) for(int i=s; i<e; i++)
#define loop(i, n) for(int i=0; i<n; i++)
#define getint(n) scanf("%d", &n)
#define pb(a) push_back(a)
#define ll long long
#define SZ(a) int(a.size())
#define read() freopen("input.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define mem(a, v) memset(a, v, sizeof(a))
#define all(v) v.begin(), v.end()
#define pi acos(-1.0)
#define check printf("t\n")
#define mod abs
#define pf(k) printf("%d\n",k)
#define sf(k) scanf("%d",&k)
#define llpf(k)  printf("%lld\n",k)
#define llsf(k) scanf("%lld",&k)
#define double_sf(k,t) scanf("%d %d",&k,&t)
#define double_pf(k,t) printf("%d %d\n",k,t)
#define N 10001000
#define maxL (20000000>>5)+1
#define GET(x) (mark[x>>5]>>(x&31)&1)
#define SET(x) (mark[x>>5] |= 1<<(x&31))
#define LL long long
int mark[maxL] = {};
using namespace std;
vector <bool> prime(N,true);
vector <ll> primes;
ll prime_frq [3600][2];
vector <int> factor;
int n;
void sieve()
{long long int i,j;
ll root = (ll) floor(sqrt(N) + .5);
    loop(i,N)
    prime[i]=true;
    prime[2]=true;
    for(i=4;i<N;i+=2)
    {
        prime[i]=false;
    }
    primes.pb(2);
    for(i=3;i<root;i+=2)
    {
        if(prime[i])
        {
            for(j=i*i;j<N;j+=i)
            {
                prime[j]=false;
            }
        }
    }
        for(ll i = 3; i < N; i += 2)
        {if(prime[i])
        {primes.push_back(i);

        }
        }

}
long long int prime_factor(ll n)
{ll i;
factor.clear();

ll cnt=0,ans=1;
for(i=0;i<primes.size()&&prime[i]*prime[i]<=n;i++)
 {cnt=0;

   if(n%primes[i]==0)
   {
      factor.pb(primes[i]);

      while(n%primes[i]==0)
    {

      n=n/primes[i];
      cnt++;
   }
   ans*=cnt+1;

   }
   if(n==1)
   break;
 }
 if(n>1)
 ans*=2;
return ans;

}

long long p[2000000], pt = 0;
void fast_sieve() {
    register int i, j, k;
    SET(1);
    int n = 20000000;
    for(i = 2; i <= n; i++) {
        if(!GET(i)) {
            for(k = n/i, j = i*k; k >= i; k--, j -= i)
                SET(j);
            p[pt++] = i;
        }
    }
}
int main()
{

    int n,no,a,b,t,c;
    freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
    vector<int> fac(10000001);
    loop(i,fac.size())
    fac[i]=0;
    sieve();
    //printf("%d",primes.size());
    loop(i,primes.size())
    {

     for(n=primes[i];n<fac.size();n+=primes[i])
     {
         fac[n]++;
     }

    }
    int k,cnt;
    sf(t);
    //cout<<fac[1000000]<<endl;
    //loop(i,100)
   //cout<<fac[i]<<" "<<i<<endl;
    for(c = 1; c <= t; c++)
    {
        cnt=0;
        cin>>a>>b>>no;
        for(k=a;k<=b;k++)
        {
            if(fac[k]==no)
            cnt++;
        }
        printf("Case #%d: ", c);

        printf("%d\n",cnt);
    }
   //loop(i,100)
   //cout<<fac[i]<<" "<<i<<endl;

}

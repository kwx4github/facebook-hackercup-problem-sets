package hackercup.y2015.round1.homework;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

    static String BASE = "/Users/chandangiri/contest/src/main/java/hackercup/y2015/round1/homework/";
    public static void main(String args[]) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File(BASE + "in.txt"));;
        OutputStream outputStream = new FileOutputStream(new File(BASE + "out.txt"));
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        int testCount = in.nextInt();
        for (int i = 1; i <= testCount; i++) {
            out.printf("Case #%d: ", i);
            solver.solve(in, out);
        }
        out.close();
    }


    private static class Solver {

        static int lim = 10000000;
        static int dp[][] = new int[9][lim+1];
        static int primeFactors[] = new int[lim+1];
//        static List<Integer> primes = new ArrayList<>();
        {
            for (int i=2; i<=lim; i++) {
                if (primeFactors[i] == 0) {
//                    primes.add(i);
                    primeFactors[i] = 1;
                    for (int j=2*i; j<=lim; j+=i) {
                        primeFactors[j]++;
                    }
                }
            }

            for (int i=1; i<=8; i++) {
                for (int j=2; j<=lim; j++) {
                    dp[i][j] = dp[i][j-1];
                    if (primeFactors[j] == i) {
                        dp[i][j]++;
                    }
                }
            }
        }

        public void solve(InputReader in, PrintWriter out) {

            int a = in.nextInt();
            int b = in.nextInt();
            int k = in.nextInt();

            int sol = 0;
            if (k <= 8) {
                sol = dp[k][b] - dp[k][a-1];
            }
            out.println(sol);
        }

//        private int brute(final int a, final int b, final int k) {
//            int sol = 0;
//
//            for (int i=a; i<=b; i++) {
//                int ct = 0;
//                for (int p : primes) {
//                    if (p > i) {
//                        break;
//                    }
//                    if (i % p == 0) {
//                        ct++;
//                    }
//                }
//                if (ct == k) {
//                    sol++;
//                }
//            }
//            return sol;
//        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;




class Homework {
	static InputReader in 	= new InputReader(System.in);
	static OutputWriter out	=	new OutputWriter(System.out);
    static int[] pfCount;
	public static void main(String[] args) throws Exception {
		
		int t = in.readInt();
		
		for(int i=1; i <=t; i++){
			int a = in.readInt();
			int b = in.readInt();
			int k = in.readInt();
			Homework.pfCount = new int[b+1];
			factorCount(b);
			int count =0;
			for(int p=a; p <= b; p++)
				if(pfCount[p]==k)
					count++;
			
			out.printLine("Case #"+i+": "+count);
		}
		
		out.flush();
		out.close();

	}
	
	public static void factorCount(int N){
		 for (int i = 0; i <= N; i++) {
		        Homework.pfCount[i] = 0;
		    }
		 
		    for (int i = 2; i <= N; i++) {
		        if (Homework.pfCount[i] == 0) {                // Number is prime
		            for (int j = i; j <= N; j += i) {
		                Homework.pfCount[j]++;
		            }
		        }
		    }

	}

}


class IOUtils {

	public static int[] readIntArray(InputReader in, int size) throws Exception {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

}

class InputReader {

	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public String next() {
		return readString();
	}

	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}

class OutputWriter {
	private final PrintWriter writer;

	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}

	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}

	public void print(Object...objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}

	public void printLine(Object...objects) {
		print(objects);
		writer.println();
	}

	public void close() {
		writer.close();
	}

	public void flush() {
		writer.flush();
	}

	}

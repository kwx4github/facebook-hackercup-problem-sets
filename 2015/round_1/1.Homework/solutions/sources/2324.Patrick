#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <ext/algorithm>
#include <ext/hash_map>
#include <ext/hash_set>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define F(i,a,b)for(int i=a;i<b;++i)
#define rep(i,n)F(i,0,n)
#define all(a)a.begin(),a.end()
template<class T>vector<T>&operator<<(vector<T>& v,T t){v.push_back(t);return v;} 

set<int> sieve[10000001];

void precomp() {
  F(i, 2, 10000001) {
    if (sieve[i].size() == 0) {
      for (int j = i; j < 10000001; j += i) {
        sieve[j].insert(i);
      }
    }
  }
}

int solve(int low, int hi, int k) {
  int cnt = 0;
  F(i, low, hi + 1) {
    if (k == sieve[i].size()) {
      cnt++;
    }
  }
  return cnt;
}

int main() {
  int T;
  cin >> T;
  precomp();
  rep(t, T) {
    int A, B;
    int K;
    cin >> A >> B >> K;
    printf("Case #%d: %d\n", t+1, solve(A, B, K));
  }
}

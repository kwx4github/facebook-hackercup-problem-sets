#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)
#define SZ(v)					(int) v.size()
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int MXSIZE = 10000007;
bool isPrime[MXSIZE];
int primacity[MXSIZE];
void sieve(int N) {
	memset(isPrime, -1, N * sizeof(isPrime[0]));
	isPrime[0] = isPrime[1] = false;
	int sqrtN = (int) sqrt((double) N);
	for (int i = 2; i <= sqrtN; i++)
		if (isPrime[i])
			for (int j = i * i; j < N; j += i)
				isPrime[j] = false;
}

int main() {
	freopen("homework_in.txt", "rt", stdin);
	freopen("homework_out.txt","wt",stdout);

	int a, b, degreeOfPrimacity, t;

	sieve(MXSIZE);

	vector<int> primes;
	for (int i = 0; i <= 1e7; i++)
		if (isPrime[i])
			primes.push_back(i);

	for (int i = 0; i < SZ(primes); i++) {
		long long prime = primes[i];
		for (long long k = 1;; k++) {
			if (prime * k >= MXSIZE)
				break;
			primacity[prime * k]++;
		}
	}

	scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++) {
		scanf("%d %d %d", &a, &b, &degreeOfPrimacity);
		int count = 0;
		for (int i = a; i <= b; i++)
			if (primacity[i] == degreeOfPrimacity)
				count++;
		printf("Case #%d: %d\n", tt, count);
	}

	return 0;
}

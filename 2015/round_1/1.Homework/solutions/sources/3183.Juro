import 'dart:io';

void main() {

  Map<num, List> primacities = {};

  num maxA = 10000001;

  List generatePrimes(num maxP) {
    List primes = [2];

    nextPrime() {
      num ind = primes.last + 1;
      for (;;ind++) {
        bool prime = true;
        for (int i = 0; i < primes.length; i++) {
          if (ind%primes[i] == 0) {
            prime = false;
            break;
          }
        }
        if (prime) return ind;
      }
    }

    while (primes.last < maxP) {
      primes.length % 1000 == 0 ? print("last prime: ${primes.last}") : null;
      primes.add(nextPrime());
    }

    return primes;

  }


  List primacityList = new Iterable.generate(maxA, (n) => n%2 == 0 ? 1 : 0).toList();

  for (int i = 3; i < primacityList.length; i++) {
    if (primacityList[i] == 0) {
      // prime
      num prime = i;
      for (int j = prime; j < primacityList.length; j+=prime)primacityList[j]++;
    }
  }

  for (int i = 2; i < primacityList.length; i++) {
    if (primacities.containsKey(primacityList[i])) primacities[primacityList[i]][i]++;
    else primacities[primacityList[i]] = new Iterable.generate(maxA, (n) => n==i ? 1 : 0).toList();
  }

  primacities.forEach((k, List prims) {
    for(int i = 1; i < prims.length; i++) {
      prims[i]+= prims[i-1];
    }
  });

  File fin = new File("input.txt");
  List input = fin.readAsLinesSync().map((String s) => s.split(" ").map(int.parse).toList()).toList();

  input.removeAt(0);

  num caseN = 0;

  input.forEach((List val) {
    caseN++;
    if (!primacities.containsKey(val[2])) print("Case #${caseN}: 0");
    else print("Case #${caseN}: ${primacities[val[2]][val[1]] - primacities[val[2]][val[0]-1]}");
  });

}

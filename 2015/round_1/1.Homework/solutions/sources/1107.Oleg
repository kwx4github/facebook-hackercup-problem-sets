import java.io.File;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeSet;


public class Round1Problem1 {
	
	static final int SIZE = 10000000;

	static TreeSet<Integer> primes = new TreeSet<Integer>();
	static HashMap<Integer, Integer> primarity = new HashMap<Integer, Integer>();
	
	static boolean isPrime(int n) {
		for (int i = 2; i <= Math.sqrt(n); ++i) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}
	
	static void getPrimes(int t) {
		primes.add(2);
		for (int i = 3; i < t; i += 2) {
			if (isPrime(i)) {
				primes.add(i);
			}
		}
	}
	
	static int countPrimeDividers(int n) {
		int k = 0;
		for (int prime : primes) {
			if (primes.contains(n)) {
				++k;
				break;
			}
			if (prime > Math.sqrt(n)) {
				break;
			}
			if (n % prime == 0) {
				++k;
			}
			while (n % prime == 0) {
				n /= prime;
			}
		}
		return k;
	}
	
	public static void main(String[] args) throws Exception {
		getPrimes(SIZE);
		System.out.println(primes.size());
		for (int i = 2; i <= SIZE; ++i) {
			primarity.put(i, countPrimeDividers(i));
		}
		Scanner s = new Scanner(new File("input.txt"));
		PrintWriter pw = new PrintWriter(new File("output.txt"));
		int t = s.nextInt();
		for (int i = 0; i < t; ++i) {
			int a = s.nextInt(), b = s.nextInt(), k = s.nextInt(), cnt = 0;
			for (int j = a; j <= b; ++j) {
				if (primarity.get(j) == k) {
					++cnt;
				}
			}
			pw.println("Case #" + (i + 1) + ": " + cnt);
		}
		pw.flush();
	}

}
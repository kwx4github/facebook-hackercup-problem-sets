// N.C. 2015
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

public class HC2015_01_01
{
    static bool debugging = false;
    const long MAX = 10000000;
    static List<long> primes;
    static int[] primacity;

    public static void DumpToFile(string text)
    {
        StreamWriter dumpF = File.AppendText("test001.txt");
        dumpF.WriteLine(text);
        dumpF.Close();
    }


    public static void GenerateListOfPrimes(long max)  // Sieve of Erasthotenes
    {
        primes = new List<long>();
        primes.Add(2);
        int maxSquareRoot = (int)(Math.Sqrt(max));
        BitArray discarded = new BitArray((int)(max + 1));

        for (int i = 3; i <= max; i += 2)
            if (!discarded[i])
            {
                primes.Add(i);
                if (i < maxSquareRoot)
                    for (int j = i * i; j <= max; j += 2 * i)
                        discarded[j] = true;
            }
        if (debugging) Console.WriteLine("Sieve finished");
    }


    /* public static void GeneratePrimacity(long max)
    {
        DateTime t = DateTime.Now;
        if (debugging) Console.WriteLine("Primacity started at {0}", t);
        primacity = new int[max];
        for (int i = 2; i < max; i++)
        {
            int dividersFound = 0;
            int currentPrime = 0;
            while (primes[currentPrime] <= i)
            {
                if (i % primes[currentPrime] == 0)
                    dividersFound++;
                currentPrime++;
            }
            primacity[i] = dividersFound;
            if (debugging) if (i % 100000 == 0) Console.Write("{0} ", i);
        }
        if (debugging) Console.WriteLine("Primacity calculated. Taken: {0}",
            DateTime.Now - t);
    } */


    public static void GeneratePrimacity(long max)
    {
        DateTime t = DateTime.Now;
        if (debugging) Console.WriteLine("Primacity started at {0}", t);
        primacity = new int[max+1];
        foreach(int prime in primes)
        {
            if (debugging) Console.Write("{0} ", prime);
            long iterations = max / prime +1;
            for (int i = 1; i < iterations; i++)
                primacity[prime * i]++;
        }
        if (debugging) Console.WriteLine("Primacity calculated. Taken: {0}",
            DateTime.Now - t);
    }

    public static void Process(long n1, long n2, long primacityToCheck, int pass)
    {
        long count = 0;
        for (long i = n1; i <= n2; i++)
        {
            if (primacity[i] == primacityToCheck)
                count++;
        }
        Console.WriteLine("Case #" + pass + ": " + count);
    }



    public static void Main(string[] args)
    {
        if (args.Length > 0)
            Console.SetIn(new StreamReader(args[0]));

       // Console.SetIn(new StreamReader("input01.txt"));

        GenerateListOfPrimes(MAX);
        GeneratePrimacity(MAX);
        int amountOfCases = Convert.ToInt32(Console.ReadLine());

        for (int i = 1; i <= amountOfCases; i++)
        {
            string[] data = Console.ReadLine().Split(' ');
            Process(Convert.ToInt64(data[0]),
                Convert.ToInt64(data[1]),
                Convert.ToInt64(data[2]),
                i);
        }
    }
}

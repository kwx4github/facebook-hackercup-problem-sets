package roundone2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Homework {
	static ArrayList<Integer> primes = new ArrayList<Integer>();
	public static void main(String[] args) throws NumberFormatException, IOException {
		FileWriter writer = new FileWriter(
				"C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\output.txt");
		String filename = "C:\\Users\\mchang\\workspace\\Facebook Hacker Cup\\src\\input.txt";
		
		long startTime = System.currentTimeMillis();
		int[] primacity = generatePrimes(10000000);
		try {
			BufferedReader br = new BufferedReader(new FileReader(filename));
			int numCases = Integer.parseInt(br.readLine());
			for (int caseNum = 1; caseNum <= numCases; caseNum++) {
				System.out.println("Processing Case: " + caseNum);
				String line = br.readLine();
				StringTokenizer st = new StringTokenizer(line);
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				int k = Integer.parseInt(st.nextToken());
				int count = 0;
				for(int num = a; num <= b; num++){
					if(primacity[num] == k) count++;
				}
				printAnswer("" + count, caseNum, writer);
			}
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		writer.close();
		System.out.println(System.currentTimeMillis() - startTime);
	}
	
	public static int primacity(int n){
		int primacity = 0;
		for(int i = 0; i < primes.size(); i++){
			int prime = primes.get(i);
			if(n % prime == 0){
				primacity++;
				while(n % prime == 0){
					n /= prime;
				}
			}
		}
		return primacity;
	}
	public static int[] generatePrimes(int max){
		int[] primacity = new int[max + 1];
		boolean[] isComposite = new boolean[max + 1];
		for(int i = 2; i <= max/2; i++){
			if(!isComposite[i]){
				primacity[i]++;
				primes.add(i);
				for(int multiplier = 2 ; multiplier <= max/i; multiplier++){
					isComposite[i * multiplier] = true;
					primacity[i * multiplier]++;
				}
			}
		}
		for(int i = max/2 + 1; i < max; i++){
			if(!isComposite[i]){
				primes.add(i);
				primacity[i]++;
			}
		} 
		return primacity;
	}
	public static void printAnswer(String answer, int caseNumber,
			FileWriter writer) throws IOException {
		writer.write("Case #" + caseNumber + ": " + answer + "\n");
	}

}

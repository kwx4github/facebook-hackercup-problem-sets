#include <bits/stdc++.h>

using namespace std;

const int lim = 10000000;
const int sqrtlim = 3162;
int isPrime[lim>>5];
int bitmask = (1<<6) - 1;
int nPrimes[lim+10];
int residue[lim+10];

vector<int> primes;

inline int test(int i)
{
    return (isPrime[i>>5])&(1<<(i&bitmask));
}

inline void setbit(int i)
{
    isPrime[i>>5] |= (1<<(i&bitmask));
}

void primesieve()
{
    for(int i = 0; i <= lim; i++)
        residue[i] = i;

    primes.push_back(2);

    for(int i = 3; i <= sqrtlim; i += 2)
    {
        if(test(i))
            continue;
        
        // primes.push_back(i);
        nPrimes[i] = 1;
        residue[i] = 1;
        for(int j = 2*i; j <= lim; j += i)
        {
            setbit(j);
            nPrimes[j]++;
            int temp = residue[j];
            while(temp%i == 0)
                temp /= j;
            residue[j] = temp;
        }
    
    }

    for(int i = sqrtlim + 1; i <= lim; i += 2)
    {
        if(!(test(i)))
            // primes.push_back(i);
            {nPrimes[i] = 1; residue[i] = 1;}
    }
}
int main()
{   
    primesieve();
    int t;
    scanf("%d",&t);
    int a,b,k;

    for(int testcase = 1; testcase <= t; testcase++)
    {
        scanf("%d%d%d",&a,&b,&k);
        
        register int count,count1 = 0;
        if(k <= 8) 
            for(int i = a; i <= b; i++)
            {
                count = nPrimes[i];
                if(!(i&1)) count++;
                if(residue[i] != 1 && residue[i]&1 ) count++;
                // maxcount = maxcount > count ? maxcount : count;
                if(count == k)
                    count1++; 
            }

        printf("Case #%d: %d\n",testcase,count1);
        // printf("max count %d\n",maxcount);

    }
    return 0;
}
#include <bits/stdc++.h>

using namespace std;

vector<pair<int, int> > PrimeFactorizationWithCount(int x) {
  vector<pair<int, int> > res;
  for (int a = 2; a * a <= x; a++) {
    pair<int, int> p = { a, 0 };
    while (x % a == 0) {
      x /= a;
      p.second++;
    }
    if (p.second > 0) {
      res.push_back(p);
    }
  }
  if (x > 1) {
    res.push_back({x, 1});
  }
  return res;
}

struct BinaryIndexedTree {
  vector<int> v;
  BinaryIndexedTree(int n) : v(n, 0) {}
  
  void Add(int i, int x) {
    for (; i < v.size(); i |= i + 1) v[i] += x;
  }
  
  // [0, i)
  int Sum(int i) {
    int res = 0LL;
    for (--i; i >= 0; i = (i & (i + 1)) - 1) {
      res += v[i];
    }
    return res;
  }
  
  // [l, r)
  int Sum(int l, int r) {
    return Sum(r) - Sum(l);
  }
};

const int MAX_N = 10000010;

int A, B, K;
vector<BinaryIndexedTree> C;

void Prepare() {
  for (int k = 0; k < 10; k++) C.push_back(BinaryIndexedTree(MAX_N));
  for (int i = 2; i <= 1e7; i++) {
    auto v = PrimeFactorizationWithCount(i);
    C[v.size()].Add(i, 1);
  }
}

void Input() {
  cin >> A >> B >> K;
}

void Solve() {
  if (K >= 9) {
    cout << 0;
  } else {
    cout << C[K].Sum(A, B + 1);
  }
}

int main() {
  int T;
  cin >> T;
  Prepare();
  for (int test_case = 1; test_case <= T; test_case++) {
    Input();
    printf("Case #%d: ", test_case);
    Solve();
    cout << "\n";
  }

  return 0;
}

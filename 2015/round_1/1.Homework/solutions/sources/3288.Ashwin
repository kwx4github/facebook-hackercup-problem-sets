#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <climits>
#include <set>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>

using namespace std;

#define f(i,value,limit,inc) for(i=value; i<limit; i = i+inc)
#define max2(a,b) a>b?a:b
#define max3(a,b,c) a>b?(a>c?a:c):(b>c?b:c)
#define min2(a,b) a<b?a:b;
#define min3(a,b,c) a<b?(a<c?a:c):(b<c?b:c)

#define MAXK 8 //2*3*5*7*11*13*17*19*23 > 10^7

int *primacity;
long long limit;

int runESieve(long long upperBound) {

	limit = upperBound;
	
	//array to store all the values of primacity
	primacity = new int[upperBound + 1];

	memset(primacity, 0, sizeof(int) * (upperBound + 1));

	//primacity[2] = 1;

	//run sieve
	for (int m = 3; m <= limit; m++) {

		//increment the primacity for even numbers
		if(!(m&1))
			primacity[m]++;

		if (!primacity[m]) {

			//prime number's primacity = 1
			//primacity[m] = 1;

			for (int k = m + m; k <= upperBound; k += m)
				primacity[k]++;

		}
	}

}

int count1(int lb, int ub, int k){

	if(k > MAXK) //out of input bounds
		return 0;

	int i,cnt, limit = 1;

	//find the product of first k primenumbers
	for(i=2,cnt=0;cnt<k;i++){

		if(primacity[i] == 0){//prime
			limit *= i;
			cnt++;
		}

	}

	//cout<<"limit = "<<limit<<endl;

	if(limit > ub)
		return 0;

	if(limit > lb){ //start from the min position
		i = limit;
	}
	else{
		i = lb;
	}
		
	cnt = 0;
	
	for(i;i<=ub;i++){
		if(primacity[i] && primacity[i]==k){ //composite number
			cnt ++;
		}
		else if(primacity[i] == 0 && k==1)
			cnt++;
		else{
		}
	}
	
	return cnt;
}

int main(){

	int t,n;
	int cnt = 1;
	int prod;
	
	int i,ans,upperBound = 0;

	cin>>n;
	int lb[n],ub[n],k[n];
	
	/* Get the user input */
	for(i=0;i<n;i++){
		
		cin>>lb[i]>>ub[i]>>k[i];
		
		if(ub[i] > upperBound)
			upperBound = ub[i];
	}

	//cout<<"\nBefore sieve";

	ans = runESieve(upperBound+1);

	//cout<<"\nAfter sieve";

	i = 0;
	while(n--){

		cout<<"Case #"<<cnt++<<": "<<count1(lb[i],ub[i],k[i]);

		i++;

		if(n!=0)
			cout<<endl;
	}

	return 0;
}

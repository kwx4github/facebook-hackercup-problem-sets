import java.io.*;
import java.util.*;

public class A {

	BufferedReader br;
	PrintWriter out;
	StringTokenizer st;
	boolean eof;

	enum InputType {
		SAMPLE, SUBMIT
	}

	static final InputType INPUT_TYPE = InputType.SUBMIT;
	
	static int N = 10_000_000;
	int[] lowDiv = new int[N + 1];
	int[] p = new int[664579];
	int pCnt = 0;
	
	int[] f = new int[N + 1];
	int maxF = 0;
	int[][] cum;

	void preCalc() {
		Arrays.fill(lowDiv, -1);
		for (int i = 2; i <= N; i++) {

			if (lowDiv[i] == -1) {
				p[pCnt++] = i;
				lowDiv[i] = i;
			}
			for (int j = 0; j < pCnt && p[j] <= lowDiv[i]; j++) {
				int x = i * p[j];
				if (x > N) {
					break;
				}
				lowDiv[x] = p[j];
			}
		}
		if (pCnt != p.length) {
			throw new AssertionError();
		}
		
		f[1] = 0;
		for (int i = 2; i < N; i++) {
			int p = lowDiv[i];
			if (lowDiv[i / p] == lowDiv[i]) {
				f[i] = f[i / p];
			} else {
				f[i] = f[i / p] + 1;
			}
			maxF = Math.max(maxF, f[i]);
		}
		
		cum = new int[maxF + 1][N + 1];
		for (int i = 1; i <= N; i++) {
			for (int j = 0; j <= maxF; j++) {
				cum[j][i] = cum[j][i - 1] + (f[i] == j ? 1 : 0);
			}
		}
	}


	void solve() throws IOException {
		int a = nextInt();
		int b = nextInt();
		int k = nextInt();
		if (k > maxF) {
			out.println(0);
		} else {
			out.println(cum[k][b] - cum[k][a - 1]);
		}
	}

	A() throws IOException {
		switch (INPUT_TYPE) {
		case SAMPLE: {
			br = new BufferedReader(new FileReader("sample.in"));
			out = new PrintWriter("sample.out");
			break;
		}
		case SUBMIT: {
			String taskName = "homework";
			if (taskName.equals("")) {
				throw new AssertionError();
			}
			br = new BufferedReader(new FileReader(taskName + ".txt"));
			out = new PrintWriter(taskName + ".out");
			break;
		}
		}
		preCalc();
		int t = nextInt();
		for (int i = 1; i <= t; i++) {
			System.err.println("Test " + i);
			out.print("Case #" + i + ": ");
			solve();
		}
		out.close();
	}

	public static void main(String[] args) throws IOException {
		new A();
	}

	String nextToken() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				st = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				eof = true;
				return null;
			}
		}
		return st.nextToken();
	}

	String nextString() {
		try {
			return br.readLine();
		} catch (IOException e) {
			eof = true;
			return null;
		}
	}

	int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
#!/usr/bin/pypy3

from bisect import bisect_left, bisect_right
from pickle import dump, load
import os

def solve():
    a, b, k = map(int, input().split())
    l = s[k]
    return bisect_right(l, b) - bisect_left(l, a)

def main():
    T = int(input())
    for t in range(T):
        print ("Case #%d: %s" % (t+1, solve()))

def precalc():
    global s
    if os.path.exists('/tmp/prec'):
        with open('/tmp/prec','rb') as f:
            s = load(f)
            return
    s = {}
    for k in range(2, 10**7+1):
        i = 2
        cnt = 0
        k2 = k
        while i*i <= k2:
            if k2 % i == 0:
                while k2 % i == 0:
                    k2 /= i
                cnt += 1
            i += 1
        if k2 != 1:
            cnt += 1
        if cnt not in s:
            s[cnt] = []
        s[cnt].append(k)
    with open('/tmp/prec','wb') as f:
        dump(s,f)

if __name__ == "__main__":
    precalc()
    main()

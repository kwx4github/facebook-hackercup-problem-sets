#include <bits/stdc++.h>
using namespace std;

const int N = 10000009;
int primacity[N];	// automatically initialized because it's global.
int cum[10][N];		// ...

// Could've been optimized a little. But like that it handles prime numbers as well.
void sieve() {
	memset(primacity, 0, sizeof(primacity));	// But re-initializing won't harm.
	for (int i = 2; i < N; ++i)
		if (!primacity[i])
			for (int j = i; j < N; j += i)
				++primacity[j];
}

int main() {
	freopen("homework.txt","r",stdin);
	freopen("homework.out","w",stdout);
	cin.tie(0); cout.tie(0);
	ios_base::sync_with_stdio(false);

	sieve();
	//cout << *max_element(primacity, primacity + N);	max_element = 8.
	memset(cum, 0, sizeof(cum));	// But re-initializing won't harm.
	for (int k = 1; k < 10; ++k)
		for (int i = 1; i < N; ++i)
			cum[k][i] = cum[k][i - 1] + (primacity[i] == k);

	int A, B, K;
	int T; cin >> T;
	for (int tt = 0; tt < T; ++tt) {
		cout << "Case #" << tt + 1 << ": ";
		cin >> A >> B >> K;
		if (K >= 10)
			cout << "0";
		else
			cout << cum[K][B] - cum[K][A - 1];

		// Do NOT continue. END, instead!
		//END:
		cout << "\n";
	}
	return 0;
}

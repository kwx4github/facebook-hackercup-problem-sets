#include <iostream>

int primes[32000]; // more than enough
int primes_sz;

bool is_prime(int p)
{
    for (int i = 0; primes[i]*primes[i] <= p && i < primes_sz; i++)
    {
        if (p % primes[i] == 0)
            return false;
    }
    return true;
}

void one_more_prime()
{
    int i = primes[primes_sz-1]+1;
    while (!is_prime(i)) i++;

    primes[primes_sz++] = i;
}

int get_ith_prime(int i)
{
    while (i >= primes_sz)
    {
        one_more_prime();
    }
    return primes[i];
}

bool check_primacity(int a, int k)
{
    int p = 0;
    for (int i = 0; p <= k; i++)
    {
        int c = get_ith_prime(i);
        if (c*c > a) // c == a should be tested!
        {
            // if a is a prime, increment p before exiting
            if (a != 1)
                p++;
            break;
        }
        if (a % c == 0)
        {
            p++;
            while (a % c == 0)
                a /= c;
        }
    }
    return p == k;
}

int testcase()
{
    int A, B, K;
    int res = 0;
    std::cin >> A >> B >> K;

    for (int i = A; i <= B; i++)
    {
        if (check_primacity(i, K))
        {
            res++;
        }
    }
    
    return res;
}

int main(int argc, char **argv)
{
    int T;

    primes[0] = 2;
    primes_sz = 1;
    
    std::cin >> T;

    for (int i = 0; i < T; i++)
    {
        int r = testcase();
        std::cout << "Case #" << (i+1) << ": " << r << std::endl;
    }
    
    return 0;
}

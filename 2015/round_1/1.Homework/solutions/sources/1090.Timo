'''Problem 1: Homework
Timo Petmanson
'''

import pyprimes # do not bother computing the primes ourselves
import array
import sys

ULIMIT = 10000009

# first, generate primes up to ULIMIT
primes = []
for p in pyprimes.primes():
    primes.append(p)
    if p > ULIMIT:
        break

# then, create an zero-initialized array where we will store primacities
X = array.array('L')
X.extend(0 for _ in range(ULIMIT))

# now iterate each prime number and add +1 to primacities of numbers
# that are multiples of the prime, in the range of ULIMIT
for p in primes:
    pos = p
    while pos < ULIMIT:
        X[pos] = X[pos] + 1
        pos += p
# great, now we should have computed the array containing primacities up to 10000000

# functions for IO
def read_int():
    return int(sys.stdin.readline())

def read_three():
    a, b, c = sys.stdin.readline().split()
    return (int(a), int(b), int(c))

# iterate over testcases and compute results
# todo: possible optimization. allowed K seems to be far larger than we might see in the data.
# determine the K and print 0 for those cases without traversing the array
T = read_int()
for case in range(1, T+1):
    A, B, K = read_three()
    print ('Case #{0}: {1}'.format(case, X[A:B+1].count(K)))

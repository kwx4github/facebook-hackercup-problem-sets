import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author kaktusito
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		solver.solve(1, in, out);
		out.close();
	}
}

class Homework {

    final static int MAX = (int) 1e7;

    public void solve(int testNumber, InputReader in, PrintWriter out) {

        Sieve sieve = new Sieve(MAX + 3);

        int[] prim = new int[MAX + 3];
        for (int i = 2; i <= MAX; ++i) {
            int p = i;
            for (int j = 0, z = 2; z * z <= p; ++j, z = sieve.getKth(j)) {
                if (p % z == 0) {
                    ++prim[i];
                    while (p % z == 0) p /= z;
                }
            }
            if (sieve.isPrime(p))
                ++prim[i];
        }

        int cases = in.nextInt();
        for (int t = 1; t <= cases; ++t) {
            int a = in.nextInt();
            int b = in.nextInt();
            int k = in.nextInt();
            int x = 0;
            if (k < 25)
                for (int j = a; j <= b; ++j)
                    if (prim[j] == k) ++x;
            out.println(String.format("Case #%d: %d", t, x));
        }
    }

}

class InputReader
{
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }

    public String next() {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}

class Sieve {

    int n;
    boolean[] b;
    public int[] p;
    int[] sum;
    public int sz;

    public Sieve(int n) {
        this.n = n;
        b = new boolean[n + 1];

        b[0] = true;
        b[1] = true;
        for (int i = 2; i * i <= n; ++i) {
            if (!b[i]) {
                for (int j = i + i; j <= n; j += i) {
                    b[j] = true;
                }
            }
        }

        p = new int[n];
        sum = new int[n + 1];
        sz = 0;
        for (int i=2;i<=n;++i) {
            sum[i] = sum[i - 1];
            if (!b[i]) {
                p[sz++] = i;
                ++sum[i];
            }
        }
    }

    public boolean isPrime(int x) {
        return !b[x];
    }

    public int getKth(int k) {
        return p[k];
    }
}


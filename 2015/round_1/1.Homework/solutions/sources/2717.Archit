#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!=13 and s[n]!=0; ++n);s[n]=0

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

// Prime Seive, Prime Factorization

const int lim=10000010;
bool isprime[lim+1];
int pdiv[lim+1];
int pcty[lim+1];
int pref[lim+1][25];
void seive()
{
	fill(isprime+2,isprime+lim+1,true);

	for(int i=2; i<=lim; ++i)
		if(isprime[i])
		{
			pdiv[i]=i;
			for(int j=2*i; j<=lim; j+=i)
			{
				isprime[j]=false;
				pdiv[j]=i;
			}
		}

	for(int i=2; i<=lim; ++i)
	{
		if(isprime[i])
			pcty[i]=1;
		else
		{
			if(pdiv[i]==pdiv[i/pdiv[i]])
				pcty[i]=pcty[i/pdiv[i]];
			else
				pcty[i]=pcty[i/pdiv[i]]+1;
		}
	}

	fill(pref[1],pref[1]+25,0);
	for(int i=2; i<=lim; ++i)
	{
		for(int j=1; j<25; ++j)
			pref[i][j]=pref[i-1][j];
		++pref[i][pcty[i]];
	}
}

int T;
int n;
int a,b,k;

int main()
{
	seive();

	gi(T);
	rep(z,T)
	{
		printf("Case #%d: ",z+1);

		gi(a); gi(b); gi(k);

		if(k>=25) pin(0);
		else pin(pref[b][k]-pref[a-1][k]);
	}
	
	return 0;
}
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <iomanip>

using namespace std;

#define READ(in)    freopen(in,"r",stdin)
#define WRITE(out)  freopen(out,"w",stdout)
#define DBG         printf("hi \n")
#define pi          3.1415926535897
#define all(v)      v.begin(),v.end()
#define FRE(i,a,b)  for(i = a; i <= b; i++)
#define FRL(i,a,b)  for(i = a; i < b; i++)
#define sqr(a)      a*a
#define mem(t, v)   memset ((t) , v, sizeof(t))
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define inf         (1 << 30 - 1)
#define VI          vector < int >
#define pii         pair < int,int >
#define QI          queue< int >
#define pLL         pair <long long, long long>
#define D(x)        cout << #x"=" << x << endl
#define pb          push_back
#define sz          size()
#define mp          make_pair
#define fi          first
#define se          second
#define xx          fi
#define yy          se
#define eps         1e-9
#define MOD         100007
#define MAX         10000000



typedef long long int LL;
typedef double db;
int A[MAX+10];
VI v[1000];
VI primes;
void sieve()
{
    int i,j;
    FRE(i,2,MAX)
    {
        if(A[i]==0)
        {
            for(j=i;j<=MAX;j+=i)
            {
                A[j]++;
            }
            primes.pb(i);
        }
    }
}

int main()
{
    READ("in.txt");
    WRITE("out.txt");

    int i,j,k,t,cnt,flag,cs=1,len,st,a,b,nw;
    sieve();

    len=primes.sz;
    /*FRE(i,0,len)
    {
        D(primes[i]);
        getchar();
    }*/
    FRE(i,2,MAX)
    {
        //D(i);
        //D(A[i]);
        //getchar();
        v[A[i]].pb(i);
    }
    //DBG;
    sf(t);
    FRE(cs,1,t)
    {
        sfff(a,b,k);
        len=v[k].sz;
        st=len;
        cnt=0;
        //D(primes.sz);
        for(i=0;i<len && v[k][i]<=b;i++)
        {
            if(v[k][i]>=a)
            {
                //D(v[k][i]);
                cnt++;
            }
        }
       // D(st);
        //D(i);
        //D(v[k][i]);
        pf("Case #%d: %d\n",cs,cnt);
    }
    return 0;
}


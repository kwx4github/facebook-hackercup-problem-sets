#undef NDEBUG
#ifdef ssu1
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <typeinfo>
#include <limits>

using namespace std;

const int kMaxV = 11000000;

int val[kMaxV], pr[kMaxV];

void Init() {
  memset(pr, -1, sizeof pr);
  for (int i = 2; i < kMaxV; ++i) {
    if (pr[i] == -1) {
      pr[i] = i;
      if (i * 1LL * i < kMaxV) {
        for (int j = i * i; j < kMaxV; j += i)
          pr[j] = i;
      }
    }
  }
  for (int i = 2; i < kMaxV; ++i) {
    val[i] = val[i / pr[i]];
    if ((i / pr[i]) % pr[i] != 0) {
      val[i]++;
    }
  }
}

void SolveTest(int test_number) {
  printf("Case #%d: ", test_number);
  int a, b, k;
  cin >> a >> b >> k;
  int ans = 0;
  for (int i = a; i <= b; ++i)
    ans += (val[i] == k);
  cout << ans << endl;
  fprintf(stderr, "Case %d time: %f\n", test_number, ((double)clock()) / CLOCKS_PER_SEC);
}

int main() {
#ifdef ssu1
  assert(freopen("input.txt", "r", stdin));
#endif

  Init();

  int test_number;
  cin >> test_number;
  for (int i = 1; i <= test_number; ++i) {
    SolveTest(i);
  }

#ifdef ssu1
  cerr << "\nTime = " << ((double)clock()) / CLOCKS_PER_SEC << endl;
#endif    
  return 0;
}


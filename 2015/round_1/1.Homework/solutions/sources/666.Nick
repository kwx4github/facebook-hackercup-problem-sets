#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdlib>
#include <queue>
#include <set>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <bitset>
#include <sstream>
#include <cassert>

using namespace std;

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	const int N = 10000000, M = 8;
	vector<int> prime(N + 1), count(N + 1);
	vector<vector<int> > l(M + 1);
	for (int i = 0; i <= N; ++i)
		prime[i] = i;
	for (int j = 2; j <= N; ++j) {
		if (prime[j] == j) {
			for (long long i = (long long)j * j; i <= N; i += j)
				prime[i] = min(prime[i], j);
		}
	}
	for (int i = 2; i <= N; ++i) {
		int res;
		if (prime[i] == i)
			res = 1;
		else {
			int k = i / prime[i];
			if (prime[k] == prime[i])
				res = count[k];
			else
				res = count[k] + 1;
		}
		count[i] = res;
		l[res].push_back(i);
	}
	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t) {
		int a, b, k;
		cin >> a >> b >> k;
		int ans = 0;
		if (k <= M) {
			vector<int>::iterator it = upper_bound(l[k].begin(), l[k].end(), b);
			ans += it - l[k].begin();
			it = upper_bound(l[k].begin(), l[k].end(), a - 1);
			ans -= it - l[k].begin();
		}
		cout << "Case #" << t << ": " << ans << "\n";
	}
    return 0;
}
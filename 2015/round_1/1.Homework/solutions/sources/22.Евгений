import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.System.exit;
import static java.util.Arrays.copyOf;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class A {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static int primes[] = new int[] {2};
	static int primacity[] = new int[] {0};
	
	static void calc(int cnt) {
		if (primacity.length < cnt) {
			int nlen = primacity.length;
			do {
				nlen <<= 1;
			} while (nlen < cnt);
			int nprim[] = copyOf(primacity, nlen);
			for (int n = primacity.length; n < nlen; n++) {
				int ans = 0;
				int cn = n;
				for (int i = 0;; i++) {
					if (primes.length <= i) {
						int nle = primes.length << 1;
						int npr[] = copyOf(primes, nle);
						for (int j = primes.length; j < nle; j++) {
							p: for (int p = npr[j - 1] + 1;; p++) {
								for (int jj = 0; jj < j && npr[jj] * npr[jj] <= p; jj++) {
									if (p % npr[jj] == 0) {
										continue p;
									}
								}
								npr[j] = p;
								break;
							}
						}
						primes = npr;
					}
					int p = primes[i];
					if (p * p > cn) {
						break;
					}
					if (cn % p == 0) {
						++ans;
						do {
							cn /= p;
						} while (cn % p == 0);
					}
				}
				if (cn > 1) {
					++ans;
				}
				nprim[n] = ans;
			}
			primacity = nprim;
		}
	}
	
	static void solve() throws Exception {
		int a = nextInt();
		int b = nextInt();
		int k = nextInt();
		calc(b + 1);
		int res = 0;
		for (int i = a; i <= b; i++) {
			if (primacity[i] == k) {
				++res;
			}
		}
		printCase();
		out.println(res);
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
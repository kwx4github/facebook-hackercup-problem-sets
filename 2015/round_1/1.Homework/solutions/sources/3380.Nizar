#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define ii pair <int ,int>
#define iii pair <int, ii >
#define vi vector <int>
#define vii vector < ii >
#define viii vector < iii >
#define oo numeric_limits<ll>::max()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define MAXN 100000

using namespace std;

vi primes;
set<int> sprimes;
int n = pow(10,7);
int c=0;
vector<bool> arr (n,false);
map<int,int> omega;

void check(int a)
{
    int i = 2, num;
    while ( (num = i*a) <= n ) {
        arr[ num-1 ] = true;
        ++i;
    }
}

void primegenerator()
{
    for (int i=1; i<n; ++i) {
        if ( arr[i] == false ) {
            primes.pb(i+1);
            sprimes.insert(i+1);
            check(i+1);
        }
    }
}

void combine (ll nb, set<int> prev)
{
    if(nb>n)
        return;
    if(omega.find(nb) != omega.end()) {
        c++;
        return;
    }
    omega[nb] = prev.size();
    for(int i=0; i<primes.size(); ++i) {
        set <int> tmp(all(prev));
        tmp.insert(primes[i]);
        combine(nb*primes[i],tmp);
    }
}

int main()
{
    freopen("input.txt","r+",stdin);
    freopen("output.out","w+",stdout);
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    n++;
    primegenerator();
    for(int i=2;i<=n;++i) {
        int k = i;
        int div = 0;
        for(int j=0; j<primes.size(); ++j) {
            if(sprimes.find(k) != sprimes.end()) {
                div++;
                break;
            }
            if(k == 1)
                break;
            int pj = primes[j];
            if(!(k%pj)) {
                div++;
                while(!(k%pj)) {
                    k /= pj;
                }
            }
        }
        omega[i] = div;
    }
    int T,A,B;
    ll K;
    cin >> T;
    for(int t=1;t<=T;++t) {
        ll res = 0;
        cin >> A >> B >> K;
        for(int i=A;i<=B;++i) {
            if(K>20) {
                res = 0;
                break;
            }
            if(omega[i] == K)
                res++;
        }
        cout << "Case #" << t << ": " << res << endl;
    }
    return 0;
}

package Round1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class Question1 {
	
	public static void main(String[] args) throws FileNotFoundException {
		FileInputStream stream = new FileInputStream(new File("C:\\Users\\tagi1_000\\Downloads\\homework.txt"));
		Scanner scanner = new Scanner(stream);
		
		PrintWriter outFile = new PrintWriter("C:\\Users\\tagi1_000\\Downloads\\solutions_homework.txt");
		
		
		int numberOfCases = scanner.nextInt();	
		for (int i=0;i<numberOfCases;i++)
		{
//	        BigInteger N = new BigInteger("14500");
//	        factor(N);
	        int a = scanner.nextInt();
	        int b = scanner.nextInt();
	        int k = scanner.nextInt();
	        int answer = 0;
	        for (int j=a;j<=b;j++)
	        {
	        	
	        	// Creating the big integer.
//	        	BigInteger toCheck = new BigInteger(String.valueOf(j));
//	        	// Now, doing the factor thing.
//	            HashMap<Integer, Integer> factors = new HashMap<Integer, Integer>();
//	            factor(toCheck, factors);
//	            if (factors.keySet().size() == k)
//	            	answer++;
	        	if (primeFactors(j).keySet().size() == k)
	        		answer++;
	        }
	        System.out.println("Case #" + (i+1) + ": " + answer);
	        outFile.println("Case #" + (i+1) + ": " + answer);
		}
		outFile.close();
		scanner.close();
	}
	
    // Another simple option
    public static HashMap<Integer,Integer> primeFactors(int numbers) {
        int n = numbers;
        HashMap<Integer, Integer> factors = new HashMap<Integer,Integer>();
        for (int i = 2; i <= n / i; i++) {
          while (n % i == 0) {
            factors.put(i,1);
            n /= i;
          }
        }
        if (n > 1) {
          factors.put(n, 1);
        }
        return factors;
      }

}

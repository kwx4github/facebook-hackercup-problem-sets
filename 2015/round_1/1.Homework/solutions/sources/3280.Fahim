/*Fahim.Ahmed*/
#include <bits/stdc++.h>
using namespace std;

/*Memoization*/
int prime[10000001];

/*SOE*/
bool status[10000002];
inline void siv(int N)
{
    int sq=sqrt(N);
    for(int i=4;i<=N;i+=2)
    {
        status[i]=1;
    }
    for(int i=3;i<=sq;i+=2)
    {
        if(status[i]==0)
        {
            for(int j=i*i;j<=N;j+=i) status[j]=1;
        }
    }
    status[1]=1;
}
int main()
{
    siv(10000001);
    for(int kk = 0; kk <=10000000; kk++)
    {
        prime[kk] = -1;
    }
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int T,t;
    scanf("%d", &T);
    for(t = 1; t <= T; t++)
    {
        int a,b,k;
        scanf("%d %d %d", &a, &b, &k);

        int i,j,l,keeper,counter;

        for(i = a,counter = 0; i <=b; i++)
        {
            keeper = 0;
            if(status[i] == 0)
            {
                keeper = 1;
                if(keeper == k)
                {
                    counter++;
                }
            }
            else if(prime[i] != -1)
            {
                keeper = prime[i];
                if(keeper == k)
                {
                    counter++;
                }
            }

            else if(i %2== 0)
            {
                int r = sqrt(i);
                for(j = 2; j <= r; j++)
                {
                    if(i % j == 0)
                    {
                        int div = i / j;
                        if(status[j] == 0)
                        {
                            keeper++;
                        }
                        if(status[div] == 0 && div != j)
                        {
                            keeper++;
                        }
                    }
                }
                prime[i] = keeper;
                if(keeper == k)
                {
                    counter++;
                }
            }
            else
            {
                int r = sqrt(i);
                for(j = 3; j <= r; j+=2)
                {
                    if(i % j == 0)
                    {
                        int div = i / j;
                        if(status[j] == 0)
                        {
                            keeper++;
                        }
                        if(status[div] == 0 && div != j)
                        {
                            keeper++;
                        }
                    }
                }
                prime[i] = keeper;
                if(keeper == k)
                {
                    counter++;
                }
            }
        }
        printf("Case #%d: %d\n",t,counter);
    }
    return 0;
}

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define SIZE(v) ((int)(v).size())

#define BEGIN(v) ((v).begin())
#define END(v) ((v).end())
#define ALL(v) BEGIN(v),END(v)
#define SORT(v) sort(ALL(v))
#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))
#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)

#define CLEAR(v) memset((v),0,sizeof(v));

#define FOR(i,l,r) for(int i=(l);i<(r);i++)
#define FOREACH(i,v) for(__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)

const int MAXN = 10000000 + 1;

int primeFactor[MAXN], cnt[MAXN];

void init() {
  FOR(i, 2, MAXN) {
    if (!primeFactor[i]) {
      cnt[i] = 1;
      for (int j = i; j < MAXN; j += i) {
        primeFactor[j] = i;
      }
    } else {
      int j = i / primeFactor[i];
      while (!(j % primeFactor[i])) j /= primeFactor[i];
      cnt[i] = cnt[j] + 1;
    }
  }
}

int main() {
  init();
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    int A, B, K; scanf("%d%d%d", &A, &B, &K);
    int res = 0;
    FOR(i, A, B + 1) {
      res += cnt[i] == K;
    }
    printf("Case #%d: %d\n", taskIdx, res);
  }
  return 0;
}

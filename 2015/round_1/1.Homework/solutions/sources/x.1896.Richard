import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;

public class Homework {

	private static ArrayList<Integer> prime;

	private static void sieve() {
		boolean[] sieve = new boolean[10_000_000 + 1];
		Arrays.fill(sieve, true);
		sieve[0] = false;
		sieve[1] = false;

		for (int i = 2; i * i <= 10_000_000; i++) {
			if (sieve[i]) {
				prime.add(i);
				for (int j = i; i * j <= 10_000_000; j++)
					sieve[i * j] = false;
			}
		}
	}

	private static void precompute() throws FileNotFoundException {
		PrintWriter out = new PrintWriter("homework_solution.txt");

		HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
		for (int i = 2; i <= 10_000_000; i++) {
			int primacity = 0;

			int n = i;
			for (int p : prime) {
				if (p > n)
					break;
				if (n % p == 0) {
					primacity++;
					while (n % p == 0)
						n /= p;
				}
			}

			ArrayList<Integer> list = map.get(primacity);
			if (list == null)
				list = new ArrayList<>();
			list.add(i);
			map.put(primacity, list);
		}

		for (int i : map.keySet()) {
			out.println(map.get(i).size());
			for (int j : map.get(i))
				out.print(j + " ");
			out.println();
		}

		out.close();
	}

	public static void main(String[] args) throws FileNotFoundException {
		long start = System.currentTimeMillis();

		// prime = new ArrayList<>();
		// sieve();
		// precompute();

		Scanner scan = new Scanner(new File("homework_solution.txt"));
		HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
		for (int i = 0; i <= 8; i++) {
			map.put(i, new ArrayList<Integer>());
			int n = scan.nextInt();
			for (int j = 0; j < n; j++)
				map.get(i).add(scan.nextInt());
		}
		scan.close();

		scan = new Scanner(new File("homework.txt"));
		PrintWriter out = new PrintWriter("homework_out.txt");

		int t = scan.nextInt();
		for (int i = 1; i <= t; i++) {
			int a = scan.nextInt();
			int b = scan.nextInt();
			int k = scan.nextInt();

			if (k > 8) {
				out.println("Case #" + i + ": 0");
				continue;
			}

			int low = Collections.binarySearch(map.get(k), a);
			int high = Collections.binarySearch(map.get(k), b);
			if (low < 0)
				low = Math.abs(low) - 1;
			if (high < 0)
				high = Math.abs(high) - 2;

			out.println("Case #" + i + ": " + (high - low + 1));
		}

		scan.close();
		out.close();

		System.out.println(System.currentTimeMillis() - start);
	}

}

#include<bits/stdc++.h>

using namespace std ;
long long sieve_size;
bitset<10000010>bs;
long long primacity[(int)1e7+1];
vector<int> primes;
bool isprime[(int)1e7];
void sieve(long long upperbound)
{
    memset(primacity,0,sizeof primacity);
    sieve_size = upperbound + 1;
    bs.set();
    bs[0] = bs[1] = 0;
    isprime[0] = isprime[1] = 0;
    for(long long i = 2 ; i<= sieve_size ; i++)
    {

        if(bs[i])
        {

            for(long long j = i*i ; j <= sieve_size ; j+=i)
            {
                bs[j] = 0;
            }
            primes.push_back((int)i);
			isprime[i] = true;
        }

    }

}
set<int> primefactors (int N)
{
    set<int> factors;
    int pf_idx = 0 ,pf = primes[pf_idx];
    while(pf*pf <= N)
    {
        bool flag = false;
        while(N%pf == 0){N/= pf;if(!flag)flag = true , factors.insert(pf);}
        pf = primes[++pf_idx];
    }
    if(N != 1)factors.insert(N);
    return factors;
}
int main()
{
    freopen("homework.txt","r",stdin);
    freopen("out.txt","w",stdout);
    sieve((int)1e7);
    memset(primacity , -1 ,sizeof primacity);
    for(int i = 0 ; i<= (int)1e7 ; i++)
    {
          if(isprime[i])
          {
          	primacity[i] = 1;
          	continue;
          }
          primacity[i] = primefactors(i).size();
    }
    int T;
    cin >> T;
    for(int t = 1; t <= T ; t++)
    {
        long long A , B , K;
        cin >> A >> B >> K;
        int out = 0;
        if(K <= 664579)
        {
        for(int i = A ; i <= B ; i++)
        {

          if( primacity[i] == K)
                out++;
        }
        }
        cout << "Case #" << t << ": " << out << endl;
    }





    return 0;
}

#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
namespace lc {
template <typename T>
std::vector<int> eratosthenes(T &sieve){
	const int n = sieve.size();
	for(int i = 0; i < n; ++i){ sieve[i] = 1; }
	sieve[0] = sieve[1] = 0;
	std::vector<int> primes;
	for(int i = 2; i < n; ++i){
		if(!sieve[i]){ continue; }
		primes.push_back(i);
		for(int j = i + i; j < n; j += i){ sieve[j] = 0; }
	}
	return primes;
}
std::vector<int> eratosthenes(int n){
	std::vector<bool> sieve(n);
	return eratosthenes(sieve);
}
}
using namespace std;
static const int MAX_RANGE = 10000010;
int main(){
	ios_base::sync_with_stdio(false);
	const vector<int> primes = lc::eratosthenes(3500);
	vector<int> table(MAX_RANGE);
	for(int i = 2; i < MAX_RANGE; ++i){
		bool is_prime = true;
		for(int p : primes){
			if(i % p != 0){ continue; }
			int x = i;
			while(x % p == 0){ x /= p; }
			table[i] = table[x] + 1;
			is_prime = false;
			break;
		}
		if(is_prime){ table[i] = 1; }
	}
	int T;
	cin >> T;
	for(int case_num = 1; case_num <= T; ++case_num){
		int a, b, k;
		cin >> a >> b >> k;
		int answer = 0;
		for(int i = a; i <= b; ++i){
			if(table[i] == k){ ++answer; }
		}
		cout << "Case #" << case_num << ": " << answer << endl;
	}
	return 0;
}

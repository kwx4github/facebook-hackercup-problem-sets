package facebook.round1;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Locale;
import java.util.Scanner;


public class Homework {

    static PrintStream out;

    static int[] primacity;

    static PrintStream openOut(String name) {
        try {
            return new PrintStream(new FileOutputStream(name, false));
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }

    public static void main(String[] args) {
        try (PrintStream out = openOut("output.txt")) {
            Locale.setDefault(Locale.US);
            final Scanner scanner = new Scanner(System.in);
            final int T = scanner.nextInt();
            primacity = primacity(10000000);
            for (int i = 0; i < T; i++) {
                int A = scanner.nextInt();
                int B = scanner.nextInt();
                int K = scanner.nextInt();
                out.format("Case #%s: %s", i + 1, solution(A, B, K)).println();
            }
        }
    }

    static int[] primacity(int n) {
        int[] sieve = new int[n];
        for (int i = 0; i < sieve.length; i++) {
            sieve[i] = i + 2;
        }
        int p = 2;
        while (p * p - 2 < sieve.length) {
            for (int i = p * p - 2; i < sieve.length; i += p) {
                sieve[i] = sieve[i] > 0 ? -1 : sieve[i] - 1; // -primacity
            }
            p++;
            while (p - 2 <sieve.length && sieve[p - 2] < 0) {
                p++;
            }
        }
        for (int i = 0; i < sieve.length; i++) {
            if (sieve[i] > 0) {
                int q = sieve[i];
                for (int j = i + q; j < Math.min(q * q - 2, sieve.length); j += q) {
                    if (sieve[j] < 0) {
                        sieve[j]--;
                    }
                }
            }
        }
        return sieve;
    }

    static int solution(int A, int B, int K) {
        int result = 0;
        for (int i = A - 2; i < B - 1; i++) {
            if ((primacity[i] > 0 && K == 1) || (primacity[i] < 0 && primacity[i] == -K)) {
                result++;
            }
        }
        return result;
    }
}

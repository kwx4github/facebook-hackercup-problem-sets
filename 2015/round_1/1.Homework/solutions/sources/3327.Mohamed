#include <stdio.h>
#include <string.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<cmath>
#include<string>
#include<cstdio>
#include<sstream>
#include<map>
#include<list>
#include<queue>
#include<set>
#include<numeric>
#include<functional>
#include <bitset>
using namespace std;


bool primes [10000010] ;
int  calculated [10000010]  ;


void  Sieve (){



	for (int   i  = 2  ;  i <= 10000000 ; i ++  ){
		if (primes[i])  continue  ;
		for (int   j  =  i *  2  ; j <= 10000000 ; j += i  ){
			primes [j] = 1  ;
		}
	}

}

int  primicity  (int  n){


	int cnt = 0  ;


	for (int  i = 2  ;i  <= sqrt (n) ; i ++){
		if (n % i == 0){
			if (n/i !=  i   ){
				if (primes[n/i]  == 0 )  cnt++ ;
				if (primes[i]   == 0)  cnt ++ ;
			}else
				if (primes[i] == 0)  cnt ++ ;
		}
	}

	if (primes[n]  == 0)  cnt ++ ;

	calculated[n]  = cnt ;

	return  cnt ;
}




int main() {

	int t  ;
	scanf("%d" , &t) ;


	memset(primes , 0 , sizeof(primes)) ;
	memset(calculated , -1 , sizeof(calculated) ) ;

	Sieve()  ;
   int  c = 0 ;
	while (t--){

		int   a ,  b , k ;
		scanf("%d%d%d" , &a , &b , &k) ;
		int cnt  = 0 ;
		for (int  i  = a ; i <= b ; i ++ ){
			if (calculated[i]  != -1 ) {
				if (calculated[i] == k  )  cnt ++ ;
			}
			else
				if ( primicity(i) == k)  cnt ++ ;
			cout << cnt << endl;
		}

		printf("Case #%d: %d\n" , ++c ,cnt   );
	}

	//	cout << calculated[1000000] << endl;

	return  0 ;
}

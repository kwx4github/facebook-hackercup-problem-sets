#include<iostream>
#include<math.h>
#include <algorithm>
#include <vector>

using namespace std;

int main()
{

	FILE *fin = freopen("in.txt","r",stdin);
	FILE *fout = freopen("out.txt","w",stdout);

	int number = 10000000;
	//cin >> number;
	const int CAP = number;
	const int primes = 664579;
	bool * prime = (bool*)calloc(CAP,sizeof(bool));
	int * primisity = (int*)calloc(number+1,sizeof(int));
	int * primList =  (int*)calloc(primes,sizeof(int));

	int count = 0;

	for(int i = 2; i <= sqrt(number); i++)
	{
		for(int j = i*i; !prime[i] && j < number; j++)
		{ 
			if(j % i == 0)
			{               
				prime[j] = true;
			}

		}
	}

	vector<int> list;

	for(int i = 2; i <= number; i++)
	{
		if(!prime[i])
		{
			primList [ count++ ] = i;
			primisity [ i ] = 1;


		}
		else
			list.push_back(i);
	}


	int sz = list.size();

	for(int i=0;i<sz;i++)
	{
		//if(primisity[i]==0)
		{
			int num = list[i];

			for(int j=0;j<count;j++)
			{
				if(num % primList[j]==0)
				{
					num /= primList[j];
					
					primisity[ list[i] ] = primisity[num];

					if(num%primList[j]!=0)
						primisity[ list[i] ] += primisity[ primList[j] ];

					break;
				}
			}
		}
	}

	
	int T, A, B, K;

	while(scanf("%d",&T)==1)
	{
		for(int c=1;c<=T;c++)
		{
			scanf("%d %d %d",&A,&B,&K);

			int count =0;

			if(K <= 8)
			for(int i=A;i<=B;i++)
			{
				if(primisity[i]==K)
					count++;
			}

			printf("Case #%d: %d\n", c, count);
		}
	}

	fclose(fin);
	fclose(fout);

	return 0;
}
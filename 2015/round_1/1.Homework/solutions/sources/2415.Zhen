#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;

#define CLR(a,b) memset(a,b,sizeof(a))
typedef long long LL;

int a,b,k;
const int N = 1e7+5;
bool check[N];
int prime[N];
int primicity[N];
int bit[9][N];
int tot;

int lowbit(int i){
    return i & (-i);
}
void add(int x,int cnt){
    for(int i = x ; i < N ; i += lowbit(i)){
        bit[cnt][i] += 1;
    }
}
int sum(int x,int cnt){
    if(x <= 0)return 0;
    int sum = 0;
    for(int i = x ; i > 0 ; i -= lowbit(i)){
        sum += bit[cnt][i];
    }
    return sum;
}
void init()
{
    CLR(check, 0);
    tot = 0;
    primicity[1] = primicity[0] = 0;
    for(int i = 2 ; i < N ; i ++){
        if(!check[i]){
            primicity[i] = 1;
            prime[tot ++] = i;
        }
        for(int j = 0; j < tot ; j++){
            if(i * prime[j] >= N)break;
            check[i * prime[j]] = true;
            if(i % prime[j] == 0){
                primicity[i * prime[j]] = primicity[i];
                break;
            }else{
                primicity[i * prime[j]] = primicity[i] + 1;
            }
        }
    }
    for(int i = 0 ; i < N ; i ++){
        if(primicity[i] > 0)
            add(i, primicity[i]-1);
    }
}
void solve()
{
    int ans = 0;
    if(k <= 8)
        ans = sum(b,k-1) - sum(a-1,k-1);
    printf("%d\n",ans);
}
int main()
{
    freopen("/Users/lizhen/Documents/Project/Cpp/cpp/cpp/input.txt","r",stdin);
    freopen("/Users/lizhen/Documents/Project/Cpp/cpp/cpp/output.txt", "w", stdout);
    int T, cas = 0;
    init();
    scanf("%d",&T);
    while(T--){
        scanf("%d%d%d",&a,&b,&k);
        printf("Case #%d: ",++cas);
        solve();
    }
    return 0;
}
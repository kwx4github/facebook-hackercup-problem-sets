#include <cstdio>
#include <vector>
#include <algorithm>

const int MAXN = 10000007;
int tab[MAXN];

void sieve() {
	for (int i = 2; i < MAXN; ++i) {
		if(!tab[i]) {
			for (int j = i; j < MAXN; j += i) {
				if (!tab[j]) {
					tab[j] = j / i;
				}
			}
		}
	}
}

const int MAXK = 10;
std::vector<int> count[MAXK];

int getCount(int n) {
	//printf("Divs of %d: ", n);
	std::vector<int> divs;
	while (n > 1) {
		divs.push_back(n / tab[n]);
		n = tab[n];
	}
	std::sort(divs.begin(), divs.end());
	divs.resize(static_cast<unsigned int>(std::unique(divs.begin(), divs.end()) 
				- divs.begin()));
	//printf("%d\n", divs.size());
	return divs.size();
}

void makeCount() {
	for (int i = 1; i < MAXN; ++i) {
		count[getCount(i)].push_back(i);
	}
}

int main() {
	tab[1] = 1;
	sieve();
	makeCount();
	//printf("Done init\n");
	int t;
	scanf("%d", &t);
	for (int i = 0; i < t; ++i) {
		int a, b, k;
		scanf("%d %d %d", &a, &b, &k);
		printf("Case #%d: %d\n", i + 1, static_cast<int>( 
				std::upper_bound(count[k].begin(), count[k].end(), b)
				- std::lower_bound(count[k].begin(), count[k].end(), a)));
	}
}

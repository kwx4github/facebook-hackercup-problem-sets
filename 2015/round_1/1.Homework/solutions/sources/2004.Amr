#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <unordered_map>
#include <functional>
#include <tuple>
#include <cstring>
#include <cstring>
using namespace std;

typedef long long ll;

#define MX 10000010
int primality[MX];

//bool prime[MX];
//
//void sieve(int N) {
//  memset(prime, -1, sizeof(prime));
//  prime[0] = prime[1] = false;
//  for (int i = 2; i <= N/i; i++)
//    if (prime[i])
//      for (int j = i * i; j < N; j += i)
//        prime[j] = false;
//}


int main() {
  primality[0] = primality[1] = 0;
  for (int N = 2; N <= 1e7; ++N) {
    int n = N;
    int cnt = 0;
    int i, d = 1;
     for (i = 2; i * i <= n; i += d, d = 2) {
       if (n % i == 0)
         cnt++;
       while (n % i == 0) {
         n /= i;
       }
     }
     if (n != 1)
       cnt++;
     primality[N] = cnt;
//     if (N%1000) cout << N << endl;
  }
  freopen("homework.txt", "rt", stdin);
  freopen("homework.out", "wt", stdout);
  int tt;
  cin >> tt;
  for (int ii = 0; ii < tt; ++ii) {
    cout << "Case #" << ii + 1 << ": ";
    int A, B, K;
    cin >> A >> B >> K;
    int res = 0;
    for (int i = A; i <= B; ++i) {
      if (primality[i] == K)
        res++;
    }
    cout << res << endl;
  }
  return 0;
}

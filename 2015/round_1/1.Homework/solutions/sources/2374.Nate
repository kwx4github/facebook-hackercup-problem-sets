import numpy as np

def primesfrom2to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Input n>=6, Returns a array of primes, 2 <= p < n """
    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

	
max=100000000
#k=6
prime_factors=[0]*max
for i in xrange(2,max):
    if prime_factors[i] == 0:
        for j in xrange(i, max, i):
            prime_factors[j]+=1
f = open('outputhomework.txt', 'w')
f2 = open('homework.txt', 'r')
for j in range(int(f2.readline())):
	l = map(int, f2.readline().split())
	ans = 0
	for i in range(l[0], l[1]+1):
		if prime_factors[i] == l[2]:
			ans+=1
	txt = 'Case #' + str(j+1) + ': ' + str(ans) + '\n'
	f.write(txt)	
#print [(i,f) for i,f in enumerate(nb_factors) if f > k]
f.close()
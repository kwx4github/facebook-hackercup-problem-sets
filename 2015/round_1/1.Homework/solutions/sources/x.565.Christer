#!/usr/bin/python3

from sys import stdin

def main():
	T = int(stdin.readline().strip())
	for nCase in range(1, T+1):
		case = map(int, stdin.readline().split())
		print("Case #{}: {}".format(nCase, solve(case)))
		
def solve(case):
	A, B, K = case
	return sum(primacity[x] == K for x in range(A, B+1))
		
def primes(n):
    sieve = [True] * (n+1)
    p = 2
    while p*p<n:
        for x in range (p*p, n+1, p):
            sieve[x] = False
        for x in range (p+1, n+1):
            if sieve[x]:
                p = x
                break
        else:
            break
    return [x for x in range(2, n+1) if sieve[x]]
		
def genPrimacities():
	res = [0] * (10**7+10) #res[i] should be the primacity of i
	
	for p in primes(10**7+5):
		res[p] += 1 # all primes are divisible by themselves

	# the only number that divides X and is > sqrt(X) is X itself
	# iterate over all multiples of all the primes
	# if a multiple of a prime is X, it means that the prime divides X
	# the sqrt of 10**7 is about 3162, so we don't need to iterate over
	# any more primes than that, round up to 3200 for good measure :p
	# since we have already counted all primes we must start at the second
	# multiple
	for p in primes(3200):
		for mult in range(p+p, 10**7+2, p):
			res[mult] += 1
			
	return res
	
primacity = genPrimacities()

main()

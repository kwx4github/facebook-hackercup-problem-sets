#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

#define MAXN 10000010

int F[MAXN];

int main() {
  memset(F, -1, sizeof(F));
  for (int i = 2; i * i < MAXN; i++) {
    if (F[i] != -1) {
      continue;
    }
    for (int j = i; j < MAXN; j += i) {
      F[j] = i;
    }
  }

  F[1] = 0;
  vector<vector<int> > A(1, vector<int>(1, 1));
  for (int i = 2; i < MAXN; i++) {
    int x = i;
    F[i] = F[i] == -1 ? i : F[i];
    while (x % F[i] == 0) {
      x /= F[i];
    }
    F[i] = F[x] + 1;

    if (F[i] == A.size()) {
      A.resize(F[i] + 1);
    }
    A[F[i]].push_back(i);
  }

  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    int a, b, k;
    cin >> a >> b >> k;
    if (k >= A.size()) {
      k = 0;
    }

    vector<int>& V = A[k];
    cout << "Case #" << t << ": " <<
            upper_bound(V.begin(), V.end(), b) -
            lower_bound(V.begin(), V.end(), a) << '\n';
  }
  return 0;
}

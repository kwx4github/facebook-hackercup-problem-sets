package com.jmc;

import java.io.*;
import java.util.*;

public class Homework {
    static List<String> getLines(String fileName) throws IOException {
        if (new File(fileName).exists()) {
            String line;
            ArrayList<String> lines = new ArrayList<String>();
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            while((line=reader.readLine()) != null) {
                lines.add(line);
            }
            return lines;
        } else {
            return null;
        }
    }

    public static void main(String[] args) throws Exception {
        String filename;
        if (args.length < 1) {
            filename = Homework.class.getSimpleName() + ".txt";
        } else {
            filename = args[0];
        }
        System.out.println("Running with filename: " + filename);

        List<String> lines = getLines(filename);
        if (lines == null) {
            System.out.println("Error: can't find file [" + filename + "]");
            System.exit(0);
        }

        String outfile = filename.replace("txt", "out");
        PrintWriter out = new PrintWriter(new FileOutputStream(outfile));

        int tests = Integer.parseInt(lines.get(0));
        int currLine = 1;
        for (int i = 0; i < tests; i++) {
            String nums[] = lines.get(currLine++).split(" ");
            int startNum = Integer.parseInt(nums[0]);
            int finishNum = Integer.parseInt(nums[1]);
            int primacity = Integer.parseInt(nums[2]);
            int matchCount = getCountHavingPrimacity(startNum, finishNum, primacity);
            out.println("Case #" + (i+1) + ": " + matchCount);
        }
        out.close();
        System.out.println("Output in filename: " + outfile);
    }

    public static List<Integer> primes(int max) {
        int             sqrt = (int)Math.sqrt( max );
        BitSet bitSet = new BitSet( max + 1 );
        int             i, j;
        List<Integer>	primes = new ArrayList<Integer>(6000000);

        i = 2;
        for (j = i * 2; j <= max; j += i) {
            bitSet.set(j);
        }

        for (i = 3; i <= sqrt; i += 2) {
            if (!bitSet.get(i)) {
                int inc = i * 2;
                for (j = i * 3; j <= max; j += inc) {
                    bitSet.set(j);
                }
            }
        }

        for( i=2 ; i <= max ; i++ )
            if( ! bitSet.get(i) )
                primes.add(i);

        return primes;
    }

    static int primacityToMatch;
    static int startNum;
    static int finishNum;
    static int currentMatchedCount;
    static List<Integer> primes = primes(10000000);

    static void counter(int currPrime, long currNum, int primeCount) {
        for (int i = currPrime; i < primes.size(); i++) {
            long newNum = currNum * primes.get(i);
            if (newNum > finishNum) {
                // bail
                return;
            }
            int newPrimeCount = primeCount;
            if (i != currPrime || primeCount == 0) {
                newPrimeCount++;
            }
            if (newNum >= startNum && newPrimeCount == primacityToMatch) {
                currentMatchedCount++;
            }
            counter(i, newNum, newPrimeCount);
        }
    }

    static int getCountHavingPrimacity(int s, int f, int primacity) {
        primacityToMatch = primacity;
        startNum = s;
        finishNum = f;
        currentMatchedCount = 0;

        counter(0, 1, 0);
        return currentMatchedCount;
    }
}

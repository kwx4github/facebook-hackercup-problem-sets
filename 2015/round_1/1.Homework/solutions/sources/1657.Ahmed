import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{

	public static void main(String[] args) throws IOException
	{
		Main main = new Main();
		main.begin();
	}

	// IO
	private BufferedReader in;
	private BufferedWriter out;
	private StringBuilder ans;
	private StringTokenizer tok;
	private int[][] primicity;
	private int nPrimicity;

	private void begin() throws IOException
	{
		// IO streams
		String inputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\homework_example_input.txt";
		String outputFileName = "C:\\Users\\ahmed\\Desktop\\IO files\\out.txt";
		in = new BufferedReader(new FileReader(inputFileName));
		out = new BufferedWriter(new FileWriter(outputFileName));
		ans = new StringBuilder();
		tok = new StringTokenizer("");

		// prepare primes
		preparePrimes();
		
					
			
		// read input
		int nCases = Integer.parseInt(in.readLine());
		for (int cas = 1; cas <= nCases; cas++)
		{
			System.out.println(cas + "/" + nCases);
			// get params
			tok = new StringTokenizer(in.readLine());
			int a = Integer.parseInt(tok.nextToken());
			int b  =Integer.parseInt(tok.nextToken());
			int k = Integer.parseInt(tok.nextToken());

			// calc answer
			int answer = 0;
			if (k < nPrimicity)
				answer = primicity[k][b] - primicity[k][a-1];
			
			// solve
			ans.append("Case #" + cas + ": " + answer + "\n");
		}

		// output
		System.out.print(ans.toString());
		out.write(ans.toString());
		out.close();
	}

	private void preparePrimes()
	{
		// get prime numbers
		int n = 10000000 + 1;
		boolean isPrime[] = new boolean[n];
		Arrays.fill(isPrime, true);
		for (int i = 2; i < n; i++) 
			if (isPrime[i])
				for (int j = 2*i; j < n; j+= i) 
					isPrime[j] = false;
		
		// calculate primicity of each number
		int primes[] = new int[n];
		for (int i = 2; i < n; i++) 
			if (isPrime[i])
			{
				primes[i] = 1;
				for (int j = 2*i; j < n; j+= i) 
					primes[j] ++;
			}
			
		// accumulate sum
		nPrimicity = 9;
		primicity = new int[nPrimicity][n];
		for (int i = 0; i < n; i++) 
			primicity[primes[i]][i]++;
		for (int i = 0; i < nPrimicity; i++) 
			for (int j = 1; j < n; j++) 
				primicity[i][j] += primicity[i][j-1];
	}

	
}

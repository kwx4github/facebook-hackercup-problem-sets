import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskA solver = new TaskA();
		solver.solve(1, in, out);
		out.close();
	}
}

class TaskA {
    static int[] cache;

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int lim = (int) 1e7;
        cache = getPrimes(lim);

        int nTest = in.nextInt();
        int id = 1;
        StringBuilder sb = new StringBuilder();
        while (nTest-- > 0) {
            int from = in.nextInt();
            int to = in.nextInt();
            int maxDivision = in.nextInt();
            int ans = 0;
            if (maxDivision < 9)
                for (int i = from; i <= to; i++) {
                    if (cache[i] == maxDivision)
                        ans++;
                }
            sb.append("Case #" + (id++) + ": " + ans + "\n");
        }
        out.println(sb);
    }

    private int[] getPrimes(int lim) {
        boolean isPrimes[] = new boolean[lim + 1];
        int[] marks = new int[lim + 1];
        Arrays.fill(isPrimes, true);
        isPrimes[0] = isPrimes[1] = false;

        int n = lim + 1;
        for (int i = 2; i * i < n; i++) {
            if (isPrimes[i]) {
                marks[i]++;
                for (int j = i + i; j < n; j += i) {
                    isPrimes[j] = false;
                    marks[j]++;
                }
            }
        }
        return marks;
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }


}


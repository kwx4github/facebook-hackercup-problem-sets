import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class Homework {

    private static final int maxN = 10000000;

    public static List<Integer> generateAllPrimes() throws FileNotFoundException {
        List<Boolean> isPrime = new ArrayList<Boolean>(maxN + 1);

        for (int i = 0; i <= maxN; i++)
            isPrime.add(true);

        isPrime.set(0, false);
        isPrime.set(1, false);

        // use sieve to generate all primes
        int sqrt = 3200;

        for (int i = 2; i <= sqrt; i++) {
            if (isPrime.get(i)) {
                for (int k = i * i; k <= maxN; k += i) {
                    isPrime.set(k, false);
                }
            }
        }

        List<Integer> primes = new ArrayList<Integer>();
        for (int i = 2; i <= maxN; i++) {
            if (isPrime.get(i)) {
                primes.add(i);
            }
        }
        return primes;
    }

    public static List<Integer> generateAllPrimacity() throws FileNotFoundException {
        List<Integer> primes = generateAllPrimes();
        System.out.println("Generated " + primes.size() + " prime numbers");

        List<Integer> primacies = new ArrayList<Integer>(maxN + 1);
        for (int i = 0; i <= maxN; i++)
            primacies.add(0);

        for (int prime : primes) {
            for (int i = 1; i * prime <= maxN; i++) {
                primacies.set(i * prime, primacies.get(i * prime) + 1);
            }
        }

        System.out.println("Generated all primacies");

        return primacies;
    }

    public static int getMatch(int A, int B, int K, List<Integer> primacity) {
        int res = 0;
        for (int i = A; i <= B; i++)
            if (primacity.get(i) == K)
                res++;
        return res;
    }

    public static void main(String[] args) throws Exception {
        List<Integer> primacies = generateAllPrimacity();

        System.out.println("Pre-calculation done");

        List<String> file = Files.readAllLines(Paths.get("input.txt"), StandardCharsets.UTF_8);
        PrintWriter writer = new PrintWriter("output.txt");

        int lineNum = 0;
        int T = Integer.parseInt(file.get(lineNum++));

        for (int cid = 1; cid <= T; cid++) {
            String[] targets = file.get(lineNum++).split(" ");
            int A = Integer.parseInt(targets[0]);
            int B = Integer.parseInt(targets[1]);
            int K = Integer.parseInt(targets[2]);
            writer.println(String.format("Case #%d: %d", cid, getMatch(A, B, K, primacies)));
        }

        writer.close();
    }
}

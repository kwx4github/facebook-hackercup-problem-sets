import os, time, sys, math, random

cur_dir=os.path.dirname( os.path.abspath(__file__) )
output=open( os.path.join( cur_dir, 'output.txt' ), 'w' )

def log( msg ):
    print msg
    output.write( msg + '\n' )

lines=[]
for f in os.listdir( cur_dir ):
    if f.lower().endswith( '.txt' ):
        if not 'output.txt' in f:
            lines=open( os.path.join( cur_dir, f ), 'r' ).readlines()
            print f, len(lines)
            break

# ------------------------------------------------------- 

def is_prime(num):
    for j in range(2,int(math.sqrt(num)+1)):
        if (num % j) == 0:
            return False
    return True

n=10**7 + 1

sieve = [True]*n
for x in xrange(4, n, 2):
    sieve[x] = False
# any multiple of num above sqrt(n) is also a multiple of a
# lower prime, hence has already been eliminated
for num in xrange(3, int(math.sqrt(n)) + 1, 2):
    if sieve[num]:
        for y in xrange(num**2, n, 2*num):
            sieve[y] = False
primes = [x for x in range(2, n) if sieve[x]]
#print len(primes)

def prim(i):
    if sieve[i]: return 1

    cnt=0
    z=2
    while z*z<=i:
        if i%z==0:
            if sieve[z]:
                cnt+=1
            t=i/z
            if t!=z:
                if i%t==0:
                    if sieve[t]:
                        cnt+=1
        z+=1
    return cnt

'''
print( prim(510510) )
sys.exit()
raw_input( '' )

for z in range(200):
    r=random.randint(10000, n)
    print r, prim(r)
'''

pre=[0] * (n+1)
for line in open( os.path.join( cur_dir, 'cup', 'pre.txt' ), 'r' ).readlines():
    x,y= map( int, line.split() )
    pre[x]=y
    if x%100000==0:
        print x,y

raw_input( 'done pre' )

def solve( a,b,k ):
    cnt=0
    for i in range(a,b+1):
        #print i, prim(i)
        #if prim(i)==k:
        if pre[i]==k:
            cnt+=1
    return cnt

#print solve( 2,10**7,2 )
#sys.exit()

# ------------------------ main ------------------------------- 

cases=int( lines[0] )
print 'cases=', cases

for case in range(1, cases+1):
    a,b,k=map( int, lines[case].split() )
    ans=solve( a,b,k )
    log( 'Case #%d: %d' % (case,ans) )

raw_input( 'all done' )

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back

#define debug if(printf("GD "))
#define mod 1000000007

    #define MAX 10000005
    #define set(i) (arr[i>>5]|=(1<<(i&31)))
    #define is_composite(i) (arr[i>>5]&(1<<(i&31)))
 
    vector<int> arr((MAX>>5)+5),primes;
    int primality[10000005];
 
    void sieve_of_erath()
    {
      int cnt=1;      
      int i,j,sq=sqrt(MAX);
      for(i=3;i<=sq;i+=2)
      {
        if(is_composite(i)==0)
        {
          int k=2*i;          
          for(j=(i);j<=MAX;j+=i)
          {            
            set(j);
            primality[j]++;
          }          
        }
      }
            
      /*primes.push_back(2);
      for(i=3;i<=MAX;i+=2)
      {
        if(is_composite(i)==0)
        {
            primes.push_back(i);
            //cout<<i<<" ";
        }
       }*/
      //cout<<endl;
    }

int main()
{
    int t,a,b,k,cases=1;
    memset(primality,0,sizeof(primality));
    for(int i=2;i<10000005;i+=2) primality[i]++;
    scanf("%d",&t);
    sieve_of_erath();
    while(t--)
    {
        scanf("%d %d %d",&a,&b,&k);
        int ans = 0;
        forup(i,a,b)
        {
            /*int cnt = 0;
            for(int j=0;primes[j]<=i;j++)
            {
                if(i%primes[j]==0)
                    cnt++;
            }*/
            if(primality[i]==k)
                ans++;
        }
        cout<<"Case #"<<cases++<<": "<<ans<<endl;
    }
    return 0;
}

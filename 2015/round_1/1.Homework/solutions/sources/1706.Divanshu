/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
ill ABS(ill a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    // freopen("output.txt","w",stdout);
#endif
}

/* Input opener ends */

vector<int> s[101];

#define SQRT 3350
#define LIM 10000005

bool p[LIM];
int cnt[LIM];

void pre() {

    M(p,true);
    p[0] = p[1] = 0;
    for ( int i = 2; i < SQRT; ++i ) {
        if ( p[i] ) {
            for ( int j = i*i; j < LIM; j+=i ) {
                p[j] = 0;
            }
        }
    }

    M(cnt,0);
    for ( int i = 2; i < LIM; ++i ) {
        if ( p[i] ) {
            for ( int j = i; j < LIM; j+=i ) {
                cnt[j]++;
            }
        }
    }

    F(i,2,LIM) {
        s[cnt[i]].pb(i);
    }

}

int main() {
    // input();
    pre();
    
    int t; cin >> t;
    int tst = 1;
    while (t-- ) {

        int l,r,k; cin >> l >> r >> k;

        int ans = 0;
        if ( k > 90 ) ans = 0;
        else {
            ans = upper_bound(s[k].begin(),s[k].end(),r) - s[k].begin();
            ans -= lower_bound(s[k].begin(),s[k].end(),l) - s[k].begin();
        }
        
        cout << "Case #" << tst++ << ": ";
        cout << ans << endl; 

    }

    return 0;
}
package programmingpractice;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

class factors {
	public factors(int i, int j) {
		// TODO Auto-generated constructor stub
		value = i;
		howmany = j;
	}

	int value;
	int howmany;

}

public class Homework {

	public static ArrayList<factors> PrimeNumber = new ArrayList<factors>();
	public static HashMap<Integer, Integer> arrays = new HashMap<Integer, Integer>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int N = 10000000;
		primenumbers();
		for (int i = 2; i <= N; i++) {
			if (!arrays.containsKey(i))
				primeFactors(i);
			else
				PrimeNumber.add(new factors(i, 1));

		}
		System.out.println(PrimeNumber.size());
		System.out.println(PrimeNumber.get(9999998).value + "  "
				+ PrimeNumber.get(9999998).howmany);
	    for(int tom=0;tom<=10;tom++)
	    {
	    	System.out.println(PrimeNumber.get(tom).value + "  "
					+ PrimeNumber.get(tom).howmany);
	    }
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		int cases = 1;
		while (cases <= T) {
			int A = sc.nextInt();
			int B = sc.nextInt();
			long K = sc.nextInt();
			long count = 0;
			for (int j = A - 2; j < B-1; j++) {	
				int x = PrimeNumber.get(j).howmany;
				if (x == K) {
					count++;
				}
			}
			System.out.println("Case #" + cases + ": " + count);
			cases++;
		}
		sc.close();
	}

	public static void primeFactors(int n) {
		// Print the number of 2s that divide n
		HashMap<Integer, Integer> maps = new HashMap<Integer, Integer>();
		int number = n;
		while (n % 2 == 0) {
			if (!maps.containsKey(n)) {
				maps.put(2, 1);
			}
			n = n / 2;
		}

		// n must be odd at this point. So we can skip one element (Note i = i
		// +2)
		for (int i = 3; i <= Math.sqrt(n); i = i + 2) {
			// While i divides n, print i and divide n
			while (n % i == 0) {
				if (!maps.containsKey(n)) {
					maps.put(i, 1);

				}
				n = n / i;
			}

		}

		// This condition is to handle the case whien n is a prime number
		// greater than 2
		if (n > 2)
			if (!maps.containsKey(n))
				maps.put(n, 1);
		factors fct = new factors(number, maps.size());
		PrimeNumber.add(fct);
	}

	public static void primenumbers() {
		int Num = 10000000;
		boolean[] isPrime = new boolean[Num + 1];
		for (int i = 2; i <= Num; i++) {
			isPrime[i] = true;
		}

		// mark non-primes <= N using Sieve of Eratosthenes
		for (int i = 2; i * i <= Num; i++) {

			// if i is prime, then mark multiples of i as nonprime
			// suffices to consider mutiples i, i+1, ..., N/i
			if (isPrime[i]) {
				for (int j = i; i * j <= Num; j++) {
					isPrime[i * j] = false;
				}
			}
		}

		// count primes
		//int primes = 0;
		for (int i = 2; i <= Num; i++) {
			if (isPrime[i])
				arrays.put(i, 1);
		}
	}
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <cmath>
#include <list>
#include <map>
#include <set>
using namespace std;

typedef long long int LL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<LD> VLD;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef vector<PII> VPII;

const int INF = 1000000001;
const LD EPS = 10e-9;

#define FOR(x, b, e) for(int x = b; x <= (e); ++x)
#define FORD(x, b, e) for(int x = b; x >= (e); --x)
#define REP(x, n) for(int x = 0; x < (n); ++x)
#define VAR(v, n) __typeof(n) v = (n)
#define ALL(c) (c).begin(), (c).end()
#define SIZE(x) ((int)(x).size())
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define abs(a) ((a)<0 ? -(a) : (a))
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))

const int MAX_PRIMES_COUNT = 1000000;
const int MAX_PRIME = 10000005;

bool v[MAX_PRIME+1];
int primes[MAX_PRIMES_COUNT], primesCount;

int primacity[MAX_PRIME+1];

void generatePrimes()
{
	for(int i = 0; i <= MAX_PRIME; i++)
	{
		v[i] = 1;
	}	
	v[0] = v[1] = 0;
	
	for(int x = 2; x <= MAX_PRIME; x++)
	{
		if(v[x] && LL(MAX_PRIME) >= LL(x) * LL(x))
		{
			for(int y = x*x; y <= MAX_PRIME; y += x)
			{
				v[y] = 0;
			}
		}
	}
	
	for(int i = 0; i < MAX_PRIME; i++)
	{
		if(v[i])
		{
			primes[primesCount++] = i;
		}
	}
	
	/*for(int i = primesCount-10; i < primesCount; i++) cout << primes[i] << endl;
	cout << primesCount << endl;*/
}

int calculatePrimacity(int x)
{
	if(v[x])
	{
		return 1;
	}
	
	int result = 0;
	
	for(int i = 0; i < primesCount; i++)
	{
		if(x%primes[i] == 0)
		{
			result++;
			while(x%primes[i] == 0)
			{
				x /= primes[i];
			}	
			
			if(v[x])
			{
				return result+1;
			}
			
			if(x <= 1) 
			{
				return result;
			}
		}
	}
	
	return result;
}

void precomputePrimacity()
{
	for(int i = 2; i < MAX_PRIME; i++)
	{
		primacity[i] = calculatePrimacity(i);
	}
	
	/*for(int i = MAX_PRIME-50; i < MAX_PRIME; i++)
	{
		cout << "i: " << i << " => " << primacity[i] << endl;
	}*/
}

int query(int a, int b, int k)
{
	int res = 0;
	for(int i = a; i <= b; i++)
	{
		if(primacity[i] == k)
		{
			res++;
		}
	}
	return res;
}

int t, a, b, k;

int main()
{
	generatePrimes();
	precomputePrimacity();
	
	ios_base::sync_with_stdio(0);
	cin >> t;
	
	for(int i = 1; i <= t; i++)
	{
		cin >> a >> b >> k;
		cout << "Case #" << i << ": " << query(a, b, k) << endl;
	}
	
	/*for(int i = 0; i < 200; i++)
	{
		cout << query(2, 10000000, 1) << endl;
	}
	system("pause");*/
	return 0;
}



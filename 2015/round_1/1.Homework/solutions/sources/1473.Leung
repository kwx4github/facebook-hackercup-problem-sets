#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <fstream>
#include <string>
#include <vector>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s); i>=(e); i--)
#define LL long long
#define eps 1e-6
#define pi acos(-1.0)
#define fail {printf("Impossible\n"); return 0;}
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

struct P{
    double x, y;
    P(){}
    P(double x, double y):x(x) , y(y){}
    P operator+ (const P &a) const {return P(x+a.x, y+a.y);}
    P operator- (const P &a) const {return P(x-a.x, y-a.y);}
    double operator^ (const P &a) const {return x*a.x+y*a.y;}
    void in(){scanf("%lf%lf", &x, &y);}
    void out(){printf("REQUIRED %.7f %.7f\n", x, y);}
    double dist(P a, P b) {return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}
    double sqdist(P a, P b) {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}

};

#define N 300001
#define M 10300001
#define MA 10300000

int delta[M];

void solve(){
    int a, b, k;
    scanf("%d%d%d", &a, &b, &k);
    int cnt = 0;
    FOE(i, a, b) if (delta[i] == k) cnt++;
    printf("%d\n", cnt);
}

int main(){
    freopen("A.in", "r", stdin);
    freopen("A.out", "w", stdout);
    FOE(i, 2, MA) delta[i] = 0;
    FOE(i, 2, MA) if (delta[i] == 0){
        for (int j = i; j <= MA; j += i) delta[j]++;
    }
    int t;
    scanf("%d", &t);
    FOE(i, 1, t){
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

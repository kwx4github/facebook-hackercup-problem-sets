#include <stdio.h>
#include <vector>
using namespace std;
const int MAXN = 1e7 + 10;
bool used[MAXN];
int prime[MAXN];

int Homework(vector<vector<int> > &level)
{
    int A, B, K;
    scanf("%d%d%d", &A, &B, &K);
    if (K >= level.size()) { return 0; }
    int n = level[K - 1].size();
    if ((n == 0) || (level[K - 1][0] > B) || (level[K - 1][n - 1] < A)) { return 0; }
    int l = 0, r = n - 1;
    while (l < r)
    {
        int mid = (l + r) / 2;
        if (level[K - 1][mid] < A) { l = mid + 1; }
        else { r = mid; }
    }

    int left = l;
    l = 0; r = n - 1;
    while (l < r)
    {
        int mid = (l + r) / 2 + 1;
        if (level[K - 1][mid] <= B) { l = mid; }
        else { r = mid - 1; }
    }

    int right = l;
    return right - left + 1;
}

int main()
{
    vector<vector<int> > level;
    for (int i = 0; i < 20; i++)
    {
        vector<int> temp;
        level.push_back(temp);
    }

    for (int i = 2; i < MAXN; i++)
    if (!used[i])
    {
        level[0].push_back(i);
        prime[++prime[0]] = i;
        for (int j = i; j + i < MAXN; j += i) { used[j + i] = true; }
    } else
    {
        int num = 0;
        int p = i;
        for (int j = 1; (j <= prime[0]) && (prime[j] * prime[j] <= p); j++)
        if (p % prime[j] == 0)
        {
            num++;
            while (p % prime[j] == 0) { p /= prime[j]; }
        }
        if (p != 1) { num++; }
        level[num - 1].push_back(i);
    }

    freopen("homework.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    int n;
    scanf("%d", &n);
    for (int test = 1; test <= n; test++)
    {
        printf("Case #%d: %d\n", test, Homework(level));
    }
    return 0;
}

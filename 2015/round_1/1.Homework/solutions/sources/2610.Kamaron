#include <iostream>
#include <fstream>
#include <chrono>
using namespace std;

typedef long long ll;

int main()
{
	ll* counts = new ll[10000005];
	for (ll i = 0l; i < 10000001l; ++i) counts[i] = 0l;

	auto start = std::chrono::system_clock::now();

	ifstream fin("precompute1.txt");

	cout << "Reading in first file..." << endl;

	ll spot, ct;
	while (fin >> spot >> ct)
	{
		counts[spot] = ct;
	}

	fin.close();

	cout << "Reading in second file..." << endl;

	fin.open("precompute2.txt");
	while (fin >> spot >> ct)
	{
		counts[spot] = ct;
	}
	fin.close();

	cout << "Beginning problem..." << endl;
	cin.ignore();

	auto fileEnd = std::chrono::system_clock::now();
	auto afterReadIn = std::chrono::system_clock::now();

	fin.open("input.txt");
	ofstream fout("homework-output.txt");

	int t;
	fin >> t;

	for (int caseNum = 1; caseNum <= t; ++caseNum)
	{
		ll a, b, k;
		fin >> a >> b >> k;
		ll matching = 0;
		for (ll test = a; test <= b; ++test)
		{
			if (counts[test] == k) matching++;
		}
		fout << "Case #" << caseNum << ": " << matching << endl;
		cout << "Case #" << caseNum << ": " << matching << endl;
	}

	fin.close();
	fout.close();

	auto end = std::chrono::system_clock::now();

	cout << "File read in time: " << std::chrono::duration_cast<std::chrono::seconds>(fileEnd - start).count() << " seconds" << endl;
	cout << "After read-in: " << std::chrono::duration_cast<std::chrono::seconds>(end - afterReadIn).count() << " seconds" << endl;

	return 0;
}
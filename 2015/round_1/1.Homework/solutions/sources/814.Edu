//codeforces R146B sieve and numberdivisors
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl

#define SORT(c) sort(ALL(c))
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())

#define oo (1<<30)

typedef long long ll;

const int LIMIT = 10000010;

int sieve[LIMIT + 1]; 
int primes[LIMIT + 1];
int nroDivisors[LIMIT+1];
int A[LIMIT+1][9];
int maxi;

void gensieve() {
    CLR(sieve, 0);
    int primeCount = 1;
    for (int i = 2; i <= LIMIT; i++) {
        if (!sieve[i]) {
            primes[primeCount] = i;
            sieve[i] = primeCount++;
        }
        for (int j = 1; j <= sieve[i] && i * primes[j] <= LIMIT; j++) {
            sieve[i * primes[j]] = j;
        }
    }
}

void nroDiv() {
    nroDivisors[1] = 1;
    for (int i = 2; i <= LIMIT; i++) {
        int j = i;
        int last = -1;
        int res = 1, cnt = 0;
        while (j != 1) {
            int idprime = sieve[j];
            if (idprime != last) {
                cnt++;
            }
            last = idprime;
            j /= primes[sieve[j]];
        } 
        nroDivisors[i] = cnt;
        maxi = max(maxi, cnt);
        REP(j, 9) {
            A[i][j] = A[i-1][j];
        }
        A[i][cnt]++;
    }
}

int main() {
    ios_base::sync_with_stdio(false);

    maxi = 0;
    CLR(A, 0);
    gensieve();
    nroDiv();

    int T, a, b, k;
    cin >> T;
    REPN(tc, 1, T+1) {
        cin >> a >> b >> k;
        int res = 0;
        if (k <= 8) res = A[b][k] - A[a-1][k];
		cout << "Case #" << tc << ": " << res << endl;
    }
    return 0;
}


#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;
#define FOR(it,st,en) for(int it=(st);it<(int)(en);++it)
#define REP(it,en) FOR(it,0,en)
#define ITE(it,c) for(auto it=(c).begin();it!=(c).end();++it)
#define ALLOF(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define X first
#define Y second
typedef long long int LL; 
typedef long double LD;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
const int INF=(int)1e9; 
const double EPS=(LD)1e-7;

const int MAX_PR = 10000001;
bool isprime[MAX_PR];
VI pr;
void eratosthenes_sieve(int LIMIT) {
	memset(isprime, 1, sizeof(isprime));
	isprime[0]=isprime[1]=false;
	for(int i=2;i*i<LIMIT;++i)
		if(isprime[i])
			for(int j=i*i;j<LIMIT;j+=i)
				isprime[j]=false;
	FOR(i,2,LIMIT) if(isprime[i]) pr.push_back(i);
}
int omega[MAX_PR];
void initOmega(){
	memset(omega,0,sizeof(omega));
	for(int p : pr){
		omega[p]=1;
	}
	omega[1]=0;
}
int Omega(int a){
	if(a==1)return 0;
	if(omega[a])return omega[a];
	for(int p: pr){
		if(a%p == 0){
			int b=a;
			while(a%p==0) a/=p;
			return omega[b]=1+Omega(a);
		}
	}
	cout<<"NO "<<a<<endl;
}

int solve(){
	int K,A,B;
	cin>>A>>B>>K;
	int cnt=0;
	FOR(i,A,B+1){
		if(Omega(i)==K)cnt++;
		// cout<<i<<'>'<<Omega(i)<<endl;
	}
	return cnt;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    eratosthenes_sieve(MAX_PR);
    initOmega();
    int T;
    cin>>T;
    REP(i,T){
    	cout<<"Case #"<<i+1<<": "<<solve()<<endl;
    }
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009ll
#define mod7 1000000007ll
#define INF 1023456789
#define FI first
#define SE second
#define PB push_back
#define MP make_pair
#define eps 1e-7
int getint(){
    int _x=0,_tmp=1; char _tc=getchar();
    while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
    if( _tc == '-' ) _tc=getchar() , _tmp = -1;
    while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
    return _x*_tmp;
}
bool equal( D _x ,  D _y ){
    return _x > _y - eps && _x < _y + eps;
}
int __ = 1;
/*********default*********/
#define P 4000
#define N 10000000
int cs;
bool p[ P + 10 ];
vector<int> pset;
vector<int> ans[ 10 ];
void build(){
    for( int i = 2 ; i < P ; i ++ ) if( !p[ i ] ){
        pset.push_back( i );
        for( int j = P / i ; j >= i ; j -- )
            p[ i * j ] = true;
    }
    for( int i = 2 ; i <= N ; i ++ ){
        int tmp = i , cnt = 0 , bdr = (int)sqrt( i );
        for( int j = 0 ; j < (int)pset.size() && pset[ j ] <= bdr ; j ++ )
            if( !( tmp % pset[ j ] ) ){
                cnt ++;
                while( !( tmp % pset[ j ] ) )
                    tmp /= pset[ j ];
                bdr = (int)sqrt( tmp );
            }
        if( tmp > 1 ) cnt ++;
        ans[ cnt ].push_back( i );
    }
}
int a , b , k;
void init(){
    a = getint(); b = getint(); k = getint();
}
void solve(){
    printf( "Case #%d: " , ++ cs );
    if( k >= 9 ) puts( "0" );
    else
        printf( "%d\n" , upper_bound( ans[ k ].begin() , ans[ k ].end() , b ) -
                        lower_bound( ans[ k ].begin() , ans[ k ].end() , a ) );
}
int main(){
    build();
    __ = getint();
    while( __ -- ){
        init();
        solve();
    }
}

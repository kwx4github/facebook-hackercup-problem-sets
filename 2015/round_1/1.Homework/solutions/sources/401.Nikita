#include<cstdio>
#include<algorithm>
#include<iostream>
#include<cstdlib>
#include<cassert>
#include<cstring>
#include<vector>
#include<string>
#include<cmath>
#include<ctime>
#include<set>
#include<map>
 
using namespace std;
 
#define sz(c) (int)(c).size()
 
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
 
#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
 
#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif
 
#define FNAME "test"

int boo, k, ans[10000005], A, B, K, pos1, pos2, T;
vector <int> v[10];

int main()
{
    freopen(FNAME".in", "r", stdin);
    freopen(FNAME".out", "w", stdout); 
    for (int i = 2; i <= 1e7; i++)
    {
    	boo = 0;
    	k = i;
    	for (int j = 2; j * j <= i; j++)
    		if (i % j == 0)
    		{
    		 	boo = 1;
                while (k % j == 0)
                	k /= j;
                break;
    		}
    	
    	if (!boo)
    	    ans[i] = 1;
    	else
    		ans[i] = ans[k] + 1;
    	v[ans[i]].pb(i);
    } 
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		printf("Case #%d: ", t + 1);
		scanf("%d%d%d", &A, &B, &K);
		if (K > 8)
		{
			printf("0\n");
			continue;
		}
		pos1 = lower_bound(v[K].begin(), v[K].end(), A) - v[K].begin();
		pos2 = upper_bound(v[K].begin(), v[K].end(), B) - v[K].begin() - 1;
		printf("%d\n", pos2 - pos1 + 1);
    } 
    return 0;
}
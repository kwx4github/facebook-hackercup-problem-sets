import java.io.*;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Locale;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author karan173
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "homework.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("homework.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastReader in = new FastReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		solver.solve(1, in, out);
		out.close();
	}
}

class Homework
{
    int cnt[];
    MathUtils m;
    public void solve(int testNumber, FastReader in, PrintWriter out)
    {
        m = new MathUtils ();
        int max = (int) (1e7 + 5);
        m.factorSieve (max);
        int t = in.ni ();
        cnt = new int[max];
        for (int i = 1; i <= (int) (1e7); i++)
        {
            cnt[i] = getCnt (i);
        }

        for (int i = 1; i <= t; i++)
        {
            int a = in.ni ();
            int b = in.ni ();
            int k = in.ni ();
            int ans = 0;
            for (int j = a; j <= b; j++)
            {
                if (cnt[j] == k)
                {
                    ans++;
                }
            }
            out.print ("Case #" + i + ": ");
            out.println (ans);
        }
    }

    private int getCnt(int j)
    {
        int cntPrimes = 0;
        while (j != 1)
        {
            int z = MathUtils.getLowestPrime (j);
            while (j % z == 0)
            {
                j /= z;
            }
            cntPrimes++;
        }
        return cntPrimes;
    }
}

class MathUtils
{


    // NCR DP
    // O(n*n) precomputation -> dp, no overflow
    
    
    /*factor sieve -> O(n/2) memory      */

    private static int[] lowestPrime;
    public static void factorSieve(int MAXN)
    {
        // note flags for even are not set
        lowestPrime = new int[(MAXN+1)>>1]; //dont store evens
        //for each odd n -> index = n/2
        Arrays.fill (lowestPrime, Integer.MAX_VALUE);
        int p, i;
        for (p = 3; p * p <= MAXN; p += 2) // dont traverse even
        {
            if (lowestPrime[p>>1] == Integer.MAX_VALUE) // prime
            {
                lowestPrime[p>>1] = p;
                // flags for all before p*p have been set
                //
                for (i = p * p; i <= MAXN; i += p + p)
                {
                    lowestPrime[i >> 1] = Math.min (lowestPrime[i >> 1], p);
                }
            }
        }
        //odd nos above sqr root(n) for which lowest prime is unset are primes
    }

    //1 is returned for 1
    public static int getLowestPrime(int n)
    {
        if (n % 2 == 0)
        {
            return 2;
        }
        else if (lowestPrime[n>>1] == Integer.MAX_VALUE)
        {
            return n;
        }
        else
        {
            return lowestPrime[n>>1];
        }
    }

}

class FastReader
{

    public InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastReader(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
        {
            throw new InputMismatchException ();
        }
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read (buf);
            } catch (IOException e)
            {
                throw new InputMismatchException ();
            }
            if (numChars <= 0)
            {
                return -1;
            }
        }
        return buf[curChar++];
    }

    public int ni()
    {
        int c = read ();
        while (isSpaceChar (c))
            c = read ();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read ();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
            {
                throw new InputMismatchException ();
            }
            res *= 10;
            res += c - '0';
            c = read ();
        } while (!isSpaceChar (c));
        return res * sgn;
    }

    public boolean isSpaceChar(int c)
    {
        if (filter != null)
        {
            return filter.isSpaceChar (c);
        }
        return isWhitespace (c);
    }

    public static boolean isWhitespace(int c)
    {
        return c==' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}


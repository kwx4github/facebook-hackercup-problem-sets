#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<ctime>
#include<climits>
#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<map>
#include<stack>
#include<queue>
#include<deque>
#include<algorithm>
#include<complex>
#include<set>
#include<bitset>
#include<utility>
#include<valarray>
#include<cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector<vector<int> > vvi;
typedef vector<string> vs;
typedef vector<pair<int,int> > vpii;

#define pb push_back
#define mp make_pair
#define PI acos(-1)
#define all(a) (a).begin(),(a).end()
#define len(a) ((int)(a).size())
#define mem(a,n) memset(a,n,sizeof(a))
#define eps 1e-9
#define rep(i,n) for(int i=0;i<(n);i++)
#define repi(i,a,n) for(int i=(a);i<(n);i++)
#define repr(i,a,n) for(int i=(n);i>=(a);i--)

#define MAX 10000000
#define is_it(n) (flag[n>>6]&(1<<((n>>1)&31)))
#define set_it(n) (flag[n>>6]|=(1<<((n>>1)&31)))
int flag[MAX/64];
vi ret;
vector<int> sieve(){unsigned i,j,k;flag[0]|=0;for(i=3;i<sqrt(MAX)+1;i+=2){if(!is_it(i)){for(j=i*i,k=i<<1;j<MAX;j+=k)set_it(j);}}if(MAX>1)ret.pb(2);for(i=3;i<MAX;i+=2){if(!is_it(i)){ret.pb(i);}}return ret;}


map<int,vi >mm;

int cal(int n){
	int cc=0;
	rep(i,len(ret)){
		if(ret[i]*ret[i]>=n)break;
		if(n%ret[i]==0){
			while(n%ret[i]==0)n/=ret[i];
			cc++;
		}
	}
	if(n>1)cc++;
	return cc;
}

int main(void){
	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);

	ios_base::sync_with_stdio(0);
	sieve();
	repi(i,2,10000001)mm[cal(i)].pb(i);

	//~ cout<<1.0*clock()/CLOCKS_PER_SEC<<endl;
	//~ return 0;
	int tst;
	cin>>tst;
	repi(ks,1,tst+1){
		int n,a,b;
		cin>>a>>b>>n;
		if(!mm.count(n)){
			cout<<"Case #"<<ks<<": "<<0<<endl;
		}else{
			vi &t = mm[n];
			if(!len(t)){
				cout<<"Case #"<<ks<<": "<<0<<endl;
			}else{
				int x = int(lower_bound(all(t),a)-t.begin()),y=int(upper_bound(all(t),b)-t.begin());
				cout<<"Case #"<<ks<<": "<<y-x<<endl;
			}
		}
	}
	return 0;
}

#include <algorithm>
#include <fstream>
#include <iostream>
#include <iterator>
#include <sstream>
#include <string>
#include <tuple>
#include <vector>





int main() {
	// Read the input into the text vector
	std::ifstream inputFile("input.txt");
	std::vector<std::string> text;
	std::copy(std::istream_iterator<std::string>(inputFile),
		std::istream_iterator<std::string>(),
		std::back_inserter(text));

	if (text.size() == 0) {
		std::cout << "Input file could not be read";
		return -1;
	}

	// Now we no longer need the first number so discard it
	text.erase(std::begin(text));

	// Open the output file
	std::ofstream output("output.txt");
	if (!output.is_open()) {
		std::cout << "Error opening output file!" << std::endl;
		return -1;
	}

	// Sieve it up
	const int sieveSize = 10000000;
	std::vector<int> factorCount(sieveSize + 1, 0);

	for (int i = 2; i <= sieveSize; i++) {
		if (factorCount[i] == 0) { // Number is prime
			for (int j = i; j <= sieveSize; j += i) {
				factorCount[j]++;
			}
		}
	}

	// Each line has a new case
	for (int i = 0, caseIndex = 1; i < text.size(); caseIndex++) {
		output << "Case #" << caseIndex << ": ";
		
		const int StartBound	= std::stoi(text[i]);
		const int EndBound		= std::stoi(text[i + 1]);
		const int PrimeFactors	= std::stoi(text[i + 2]);

		// For each number we should test
		int amount = 0;
		for (int j = StartBound; j <= EndBound; j++) {
			if (factorCount[j] == PrimeFactors) {
				amount++;
			}
		}

		output << amount << std::endl;

		i += 3;
	}


	// Close the output file
	output.close();
}
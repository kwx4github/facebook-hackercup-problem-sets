
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define SIZE(c) (int) (c).size()
#define FOREACH(i,c) FOR(i,0,SIZE(c)-1)
#define FORDEACH(i,c) FORD(i,SIZE(c)-1,0)
#define MIN(x,y) ( ((x) < (y))? (x) : (y) )
#define MAX(x,y) ( ((x) > (y))? (x) : (y) )
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define INF 1000000001

#define MAXN 10000005
#define MAXK 12

using namespace std;

typedef pair < int , int > PII;
typedef long long int LLI;

typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < PII > VP;
typedef vector < LLI > VL;

typedef vector < VI > VVI;
typedef vector < VL > VVL;
typedef vector < VB > VVB;

int mindiv[MAXN],
    prim[MAXN];

/*************************************************************************/

int main()
{
    ios_base::sync_with_stdio(0);

    FOR(i,2,MAXN-1) mindiv[i] = i;

    FOR(i,2,MAXN-1) if (mindiv[i] == i)
        for (int j = 2*i; j < MAXN; j += i)
            mindiv[j] = MIN(mindiv[j],i);

    FOR(i,2,MAXN-1)
    {
        int d = mindiv[i];

        prim[i] = prim[i/d];

        if ( (i/d)%d != 0 )
            prim[i]++;
    }

    vector < int > T[MAXK];

    FOR(i,2,MAXN-1)
        T[ prim[i] - 1 ].PB(i);

    int t;
    cin >> t;

    FOR(i,1,t)
    {
        int a, b, k, ans = 0;

        cin >> a >> b >> k; k--;

        if (k < MAXK)
            ans = upper_bound(T[k].begin(), T[k].end(), b) -
                  lower_bound(T[k].begin(), T[k].end(), a);

        cout << "Case #" << i << ": " << ans << '\n';
    }

    return 0;
}

/*************************************************************************/

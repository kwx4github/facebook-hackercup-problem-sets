#include <algorithm>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <sstream>
#include <stack>
#include <string>
#include <set>
#include <utility>
#include <vector>

using namespace std;

template <typename T> inline T MIN(T a, T b) { return a < b ? a : b; }
template <typename T> inline T MAX(T a, T b) { return a < b ? b : a; }
template <typename T> inline T ABS(T a)      { return a < 0 ? -a : a;}

typedef long long int64;

const int MAXN = 10000007;

bool notPrime[MAXN];
vector<int> primes;
int64 cnt[MAXN];

int main() {
  memset(notPrime, false, sizeof notPrime);
  notPrime[0] = notPrime[1] = true;
  for (int i = 2; i < MAXN; ++i) {
    if (!notPrime[i]) {
      primes.push_back(i);
      for (int j = i + i; j < MAXN; j += i) {
        notPrime[j] = true;
      }
    }
  }

  for (int i = 2; i < MAXN; ++i) {
    int tmp = i, idx = 0, subCnt = 0;
    while (tmp != 1 && primes[idx] <= tmp) {
      if (!notPrime[tmp]) {
        ++subCnt;
        break;
      }
      if (tmp % primes[idx] == 0) {
        ++subCnt;
        while (tmp % primes[idx] == 0) {
          tmp /= primes[idx];
        }
      }
      ++idx;
    }
    cnt[i] = subCnt;
  }

  int T, A, B, K;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    scanf("%d%d%d", &A, &B, &K);
    int64 ans = 0;
    for (int i = A; i <= B; ++i) {
      if (cnt[i] == K) {
        ++ans;
      }
    }
    printf("Case #%d: %lld\n", t, ans);
  }

  return 0;
}

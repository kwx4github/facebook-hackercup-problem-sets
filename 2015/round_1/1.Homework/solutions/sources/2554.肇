#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>
#include <functional>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;


ifstream ifs;
ofstream ofs;
string buf;

long* primes;
long numOfPrimes;


long solve(long A, long B, long K, long minPrimeIndex){
    if(K + minPrimeIndex > numOfPrimes){
        return 0;
    }
    if(K == 0){
        if(A == 1)
            return 1;
        else
            return 0;
    }
    
    long tmp = 1;
    for(long i = 0; i < K; i++){
        tmp *= primes[minPrimeIndex + i];
    }
    if(tmp > B){
        return 0;
    }
    
    long count = 0;
    for(long i = 0; B > 0 && A <= B; A = (A - 1) / primes[minPrimeIndex] + 1, B /= primes[minPrimeIndex], i++){
        count += solve(A, B, (i == 0)? K : (K - 1), minPrimeIndex + 1);
    }
        
    return count;
}


int main(int argc, char **argv){
    ifs.open("homework.txt");
    ofs.open("P1_output.txt");

    bool* isPrime = new bool[10000001];
    numOfPrimes = 0;
    for(long i = 0; i < 10000001; i++){
        isPrime[i] = true;
    }
    for(long i = 2; i <= 10000000; i++){
        if(isPrime[i]){
            numOfPrimes++;
            for(long j = 2; i * j <= 10000000; j++){
                isPrime[i * j] = false;
            }
        }
    }

    primes = new long[numOfPrimes];
    for(long i = 2, index = 0; i <= 10000000; i++){
        if(isPrime[i]){
            primes[index] = i;
            index++;
        }
    }
    
	getline(ifs, buf);
	int T = atoi(buf.c_str());

	rep(i, T){
        ofs << "Case #" << i + 1 << ": ";

        getline(ifs, buf, ' ');
        long A = atol(buf.c_str());
        getline(ifs, buf, ' ');
        long B = atol(buf.c_str());
        getline(ifs, buf);
        long K = atoi(buf.c_str());
        
        if(K > 8){
            ofs << 0 << endl;
            continue;
        }

        long result = solve(A, B, K, 0);
        ofs << result << endl;
	}
	

    ifs.close();
    ofs.close();
    return 0;
}

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment (linker, "/stack:64000000")

#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <deque>
#include <set>
#include <bitset>
#include <map>
#include <memory.h>
#include <cassert>

using namespace std;

#define fo(a,b,c) for (int a = (b); a < (c); a++)
#define fr(a,b) fo(a, 0, (b))
#define fi(n) fr(i, (n))
#define fj(n) fr(j, (n))
#define fk(n) fr(k, (n))
#define fd(a,b,c) for (int a = (b); a >= (c); a--)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define _(a,b) memset((a), (b), sizeof(a))
#define __(a) memset((a), 0, sizeof(a))
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back

typedef long long lint;
typedef pair<int, int> pii;

const int INF = 1000000000;
const lint LINF = 4000000000000000000LL;
const double eps = 1e-9;

int ni() { int a; scanf( "%d", &a ); return a; }
double nf() { double a; scanf( "%lf", &a ); return a; }
char sbuf[100005]; string ns() { scanf( "%s", sbuf ); return sbuf; }
long long nll() { long long a; scanf( "%lld", &a ); return a; }

void prepare()
{
#ifndef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
#endif
}

void panic(bool expression = false)
{
	if (!expression)
	{
		cerr << "PANIC!" << endl;
		assert(false);
	}
}

const int maxn = 10000005;

bool prime[maxn];
int lst[maxn];
int s[9][maxn];

void pre()
{
	_(prime, 1);
	prime[0] = prime[1] = false;
	fi(maxn)
	{
		if (prime[i])
		{
			for (int j = i + i; j < maxn; j += i)
			{
				prime[j] = false;
				lst[j] = i;
			}
			lst[i] = i;
		}
	}
	int mx = 0;
	fi(maxn)
	{
		int cnt = 0, x = i;
		while (lst[x])
		{
			cnt++;
			int q = lst[x];
			while (x % q == 0)
				x /= q;
		}
		if (i >= 2)
			s[cnt][i] = 1;
		mx = max(mx, cnt);
	}
	cerr << mx << endl;
	fi(9)
	{
		fj(maxn) if (j)
			s[i][j] += s[i][j - 1];
	}
}

void solve(int test_num)
{
	//cerr << test_num << endl;
	printf("Case #%d: ", test_num);
	int a, b, c;
	scanf("%d%d%d", &a, &b, &c);
	if (c > 8)
		printf("0\n");
	else
		printf("%d\n", s[c][b] - s[c][a - 1]);
}

int main()
{
	prepare();
	int number_of_tests;
	scanf("%d\n", &number_of_tests);
	pre();
	fi(number_of_tests)
		solve(i + 1);
	return 0;
}
#include <bits/stdc++.h>
 
using namespace std;
 
#define DEBUG_ON 0
 
#define INF 0x3f3f3f3f
#define FOR(i,a,b) for(int i=a; i<(b); ++i)
#define FOR0(i,b) for(int i=0; i<(b); ++i)
#define TRAV(it,c) for(__typeof((c).begin()) it=(c).begin(); it!=(c).end(); ++it)
#define RTRAV(it,c) for(__typeof((c).rbegin()) it=(c).rbegin(); it!=(c).rend(); ++it)
#define DBG(x) if(DEBUG_ON) cout << #x << " == " << x << endl
#define nsync ios::sync_with_stdio(false)
 
typedef long long ll;
typedef int int_type;
typedef pair<int_type, int_type> pii;
typedef vector<int_type> vi;
typedef vector<vi> vii;

#define MAXN 10000100

bool pr[MAXN];

int divisor[MAXN];

int dp[MAXN];

vii v;

void crivo(int n){
	memset(pr, true, n*sizeof(bool));
	pr[0]=pr[1]=true;
	for(int i = 2; i*i <= n; ++i){
		if( !pr[i] || !(i&1) && i > 2 ) continue;
		int k = i*i;
		divisor[i] = i;
		while(k<=n){
			pr[k] = false;
			divisor[k] = i;
			k+=i;
		}
	}
}

inline int div(int n){
	if(pr[n]) return n;
	return divisor[n];
}

int count_factors(int n){

	set<int> s;	
	while(n>1){
		s.insert(div(n));
		n /= div(n);
	}
	
	return s.size();
}

void fill(){
	v.resize(10);
	crivo(10000010);	
	FOR(i,2,10000001) v[ count_factors(i) ].push_back(i);
}

int a,b,k;

int solve(){
	
	if(k>8) return 0;
	
	auto l = lower_bound(v[k].begin(), v[k].end(), a);
	
	if( l == v[k].end() ) return 0;
	
	int x = (int)(l - v[k].begin());
	
	auto r = upper_bound(v[k].begin(), v[k].end(), b);
	
	int y;
	if( r == v[k].end() ) y = v[k].size() - 1;
	else y = (int)(r - v[k].begin()) - 1;
	
	if(y<0) return 0;
		
	return (y - x + 1);
}

int main(){
	nsync;
	fill();
			
	int tests; cin >> tests;
	FOR(t,1,tests+1){
		cin >> a >> b >> k;
		cout << "Case #" << t << ": " << solve() << "\n";
	}
	
	return 0;
}

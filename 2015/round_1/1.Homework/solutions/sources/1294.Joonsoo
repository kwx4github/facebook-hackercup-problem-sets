#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <cfloat>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iostream>
#include <limits.h>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

#define rep(i,m) for(int i=0;i<(int)(m);++i)
#define sz(c) (int((c).size()))
#define fill(a,b) memset(a,b,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define mp make_pair

const int MAX = 10000000;
bool P[MAX + 5];
void prime_generation_array(int limit) {
	memset(P, 1, sizeof(P));
	P[0] = P[1] = false;
	for (int i = 0; i <= limit; i++)
		if (P[i] != 0) {
			for (int j = i + i; j <= limit; j += i)
				P[j] = false;
		}
}

int primacity[MAX + 5], accum[MAX + 5][10];

void init() {
	prime_generation_array(MAX);
	fill(primacity, 0);
	for (int i = 2; i <= MAX; ++i)
		if (P[i])
			for (int j = i; j <= MAX; j += i)
				primacity[j]++;
	for (int i = 2; i <= MAX; ++i) {
		rep(j, 10) accum[i][j] = accum[i - 1][j];
		accum[i][primacity[i]]++;
	}
}

void solve(int cur_case) {
	int a, b, k; cin >> a >> b >> k;
	int ans = 0;
	if (k <= 8) {
		ans = accum[b][k] - accum[a - 1][k];
	}
	cout << "Case #" << cur_case << ": " << ans << endl;
}

int main(int argc, char *argv[]) {
	ios_base::sync_with_stdio(false); cout.precision(10); cout << fixed;
	freopen("homework.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	clock_t start_time = clock(), check_time;
	init();
	int total_cases; cin >> total_cases;
	for (int cur_case = 1; cur_case <= total_cases; ++cur_case) {
		solve(cur_case);
		check_time = clock(); cerr << "Case #" << cur_case << " elapsed time: " << check_time - start_time << "ms" << endl; start_time = clock();
	}
	return 0;
}

#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

#define all(u) begin(u),end(u)

const long N = 10000010;

vector<int> list_of_primacity[10];

void prepare()
{
    static char primacity[N];
    for (long p = 2; p * p < N; ++p) {
        if (primacity[p] == 0) {
            for (long q = p; q < N; q *= p) {
                for (long r = 1; q * r < N; ++r) {
                    primacity[q * r] = primacity[r] + 1;
                }
            }
        }
    }
    for (int i = 2; i < N; ++i) {
        if (primacity[i] == 0) primacity[i] = 1;
        list_of_primacity[int(primacity[i])].push_back(i);
    }
}

int a, b, k;

void input()
{
    cin >> a >> b >> k;
}

int solve()
{
    if (k >= 10) return 0;
    auto f = [](int n) { return upper_bound(all(list_of_primacity[k]), n); };
    return f(b) - f(a - 1);
}

int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    prepare();

    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i) {
        input();
        cout << "Case #" << i << ": " << solve() << endl;
    }
}

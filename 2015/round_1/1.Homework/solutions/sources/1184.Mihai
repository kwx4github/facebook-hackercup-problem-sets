#include <stdio.h>
#include <string>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <sstream>
#include <assert.h>
#include <queue>
#include <set>

#define OUPUT_FILE "out.txt"

#define MAX 10000001

long long cache[MAX] = { 0 };
using namespace std;


void preProcess()
{
    long long i = 2;
    while ((i * i) <= MAX)
    {
        if (cache[i] == 0)
        {
            long long k = i * i;
            while (k <= MAX)
            {
                if (cache[k] == 0)
                    cache[k] = i;
                k += i;
            }
        }
        i++;
    }
}

long long factorize(long long n)
{
    long long primeFactors = 1;
    set<long long> factors;

    while (cache[n] > 0)
    {
        factors.insert(cache[n]);
        primeFactors++;
        n /= cache[n];
    }
    factors.insert(n);

    return factors.size();
}

long long solve(long long A, long long B, long long K)
{
    long long result = 0;

    for (long long i = A; i <= B; i++)
    {
        long long primeFactors = factorize(i);
        if (primeFactors == K)
            result++;
    }
       

    return result;
}

void parseInputAndSolve(const string& inFileName)
{
    long long T, A, B, K;

    ifstream in(inFileName);
    ofstream out(OUPUT_FILE);

    if (!out.is_open())
        cout << "Error!" << endl;

    preProcess();

    in >> T;
    for (int testCase = 1; testCase <= T; testCase++)
    {
        in >> A >> B >> K;
        
        long long result = solve(A, B, K);
        
        out << "Case #" << testCase << ": " << result << endl;
    }

    out.close();
}

int main(int argc, char* argv[])
{
    if (argc < 2)
        cout << "Please pass your input file... dude!" << endl;

    parseInputAndSolve(string(argv[1]));    

    return 0;
}


#include <stdio.h>
#include <assert.h>
#include <vector>
#include <algorithm>

using std::vector;

int main()
{
	static const unsigned int maxn = 10000000;
	vector<unsigned int> counts(maxn+1,0);
	for(unsigned int i = 2;i <= maxn;++i)
	{
		unsigned int p = i,count = 0;
		for(unsigned int k = 2;k*k <= p;++k)
		{
			unsigned int exp = 0;
			for(;0 == (p%k);p /= k,++exp);
			count += (0 != exp);
		}
		count += (1 != p);
		counts[i] = count;
	}
	assert(1 == counts[7]);
	assert(2 == counts[12]);
	assert(2 == counts[24]);
	assert(1 == counts[27]);
	assert(3 == counts[550]);

	//typedef std::pair<unsigned int,unsigned int> pair_t;
	//vector<pair_t> sorted(maxn+1);
	//for(unsigned int i = 0;i <= maxn;++i)
	//{
	//	sorted[i].first = counts[i];
	//	sorted[i].second = i;
	//}
	//std::sort(sorted.begin(),sorted.end());

	unsigned int nCases = 0;scanf("%d",&nCases);
	for(unsigned int iCases = 1;iCases <= nCases;++iCases)
	{
		unsigned int a = 0,b = 0,k = 0;scanf("%d%d%d",&a,&b,&k);
		//vector<pair_t>::const_iterator itLo = std::lower_bound(sorted.begin(),sorted.end(),pair_t(k,a));
		//assert(itLo->first < k || (itLo->first == k && itLo->second <= a));
		//vector<pair_t>::const_iterator itHi = std::upper_bound(sorted.begin(),sorted.end(),pair_t(k,b));
		//assert(itHi->first > k || (itHi->first == k && itHi->second >= a));
		unsigned int count = 0;
		for(unsigned int i = a;i <= b;++i) count += (counts[i] == k);
		unsigned int ans = count;
		//assert(ans == count);
		printf("Case #%u: %u\n",iCases,ans);
	}
	return 0;
}
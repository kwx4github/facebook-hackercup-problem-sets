import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;


public class MainPrimacity {
	public static byte primeFactorsCount(int n) {
		Set<Integer> factors = new HashSet<Integer>();
		for (int i = 2; i <= n / i; i++) {
			while (n % i == 0) {
				factors.add(i);
				n /= i;
			}
		}
		if (n > 1) {
			factors.add(n);
		}
		return (byte)factors.size();
	}
	
	public static byte[] getNumberPrimesPerNumberInRangeInclusive(int start, int end){
		byte[] numPrimes = new byte[end+1];
		for(int i = end; i>=start; i--){
			numPrimes[i] = primeFactorsCount(i);
		}
		return numPrimes;
	}
	
	public static int countNumbersInRangeWithPrimacy(byte[] counts, int A, int B, int K) {
		int count = 0;
		for(int i = A ; i <= B ; i++){
			count += counts[i] == K ? 1 : 0;
		}
		return count;
	}

	public static void main(String[] args) {
		byte[] counts = getNumberPrimesPerNumberInRangeInclusive(2, 10000000);
		try{
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			String input;
			input=br.readLine();
			for(int i=1 ; (input=br.readLine()) != null; i++){
				int A, B, K = 0;
				String[] nums = input.split(" ");
				A = Integer.parseInt(nums[0]);
				B = Integer.parseInt(nums[1]);
				K = Integer.parseInt(nums[2]);
				int count = countNumbersInRangeWithPrimacy(counts, A, B, K);
				System.out.format("Case #%d: %d\n", i, count);
			}
		} catch(IOException io) {
			io.printStackTrace();
		}
	}
}
#define PRETEST
#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stdlib.h>

using namespace std;

const int INF = 0x7fffffff;
const int BIG = 0x4f4f4f4f;

const int N = 10000000;
const double eps = 1e-8;
bool not_prime[N + 10];
int dp[N + 10];
vector<int> prime_num;

void find_prime() {
  not_prime[1] = true;
  for (int i = 2; i * i <= N; ++i) {
    if (not_prime[i]) {
      continue;
    }
    for (int j = 2; j <= N / i; ++j) {
      not_prime[i * j] = true;
    }
  }
  for (int i = 1; i <= N; ++i) {
    if (!not_prime[i]) {
      prime_num.push_back(i);
    }
  }
}

int main() {
#ifdef PRETEST
  freopen("a.txt", "r", stdin);
  freopen("out.txt", "w+", stdout);
#endif
  find_prime();
  int size = prime_num.size();
  for (int i = 2; i <= N; ++i) {
    int num = i;
    int first = 0;
    while (num > 1) {
      int j;
      if (!not_prime[num]) {
        ++dp[i];
        break;
      }
      for (j = first; j < size; ++j) {
        if (num % prime_num[j] == 0) {
          break;
        }
      }
      first = j + 1;
      if (j < size) {
        ++dp[i];
        while (num % prime_num[j] == 0) {
          num /= prime_num[j];
        }
      }
    }
  }
  int T;
  scanf("%d", &T);
  for (int Case = 1; Case <= T; ++Case) {
    int a, b, k;
    scanf("%d%d%d", &a, &b, &k);
    int ans = 0;
    for (int i = a; i <= b; ++i) {
      ans += (dp[i] == k ? 1 : 0);
    }
    printf("Case #%d: %d\n", Case, ans);
  }
  return 0;
}

#include <bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define each(it,n) for(__typeof((n).begin()) it=(n).begin();it!=(n).end();++it)

using namespace std;

vector<int> primes;

vector<int> getPrime(const int n) {
    const int ub = (n - 1) / 2;
    const int sqrtub = (sqrt(n) - 1) / 2;
    vector<int> res;
    if (n <= 1) return res;
    res.push_back(2);
    
    bool *isPrime = new bool[ub + 1];
    for (int i = 0; i <= ub; i++)isPrime[i] = (i % 3 != 1);
    isPrime[1] = true;
    
    for (int i = 2; i <= sqrtub; i++) {
        if (isPrime[i]) {
            int d = i * 2 + 1;
            for (int j = 2 * i * (i + 1); j <= ub; j += d) {
                isPrime[j] = false;
            }
        }
    }
    for (int i = 1; i <= ub; i++) {
        if (isPrime[i]) {
            res.push_back(i * 2 + 1);
        }
    }
    delete[] isPrime;
    return res;
}

int primacy[10000001];

void solve() {
    int A, B, K;
    cin >> A >> B >> K;

    int ans = 0;
    for (int i = A; i <= B; i++) {
        if (primacy[i] == K) ans++;
    }
    cout << ans << endl;
}

int main() {
    int N;
    cin >> N;
    primes = getPrime(10000000);

    rep(i, primes.size()) {
        for (int j = primes[i]; j <= 10000000; j+= primes[i]) {
            primacy[j]++;
        }
    }

    rep(i, N) {
        cout << "Case #" << i + 1 << ": ";
        solve();
    }
    return 0;
}

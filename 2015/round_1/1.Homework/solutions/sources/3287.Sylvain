import java.io.*;
import java.util.*;

class Main
{
    public static void main(String[] args)
    {
    	Main mywork = new Main();
    	mywork.Begin();
    }
    
    /* 
     * n is the index at first (then it is uploaded to be the index divided by the primes already encountered)
     * k is the number of prime dividing the original number (ie the index)
     * prime is false by default and then put to true if the number is actually prime
     */
    class Triple
    {
    	int n;
    	int k; //current primality
    	boolean prime = false;
    
    	public Triple (int nu)
    	{
    		n = nu;
    		k = 0;
    		prime = true;
    	}
    
    }
    
    void init (Triple primacity[], int bound)
    {
    	for (int i = 0; i < bound; i++)
    	{
    		primacity[i] = new Triple(i);
    	}
    }
    
    /* 
     * Eratostene:
     * if i is a prime then we divide every divisible number by i and increase their k by 1
     * we can stop at sqrt(n) because every number different of 1 will be prime in this case (TODO not sure)
     */
    void compute_p(Triple primacity[], int n)
    {
    	for (int i = 2; i < n; i++)//TODO can put sqrt n ?
    	{
    		if (primacity[i].prime && i <= Math.sqrt (n) + 1)
    		{
    			for (int j = i; j < n; j++)
    			{
    				if (primacity[j].n % i == 0)
    				{
    					primacity[j].k = primacity[j].k + 1;
    					primacity[j].prime = false;
    					while (primacity[j].n % i == 0)
    					{
    						primacity[j].n = primacity[j].n/i;
    					}
    				}
    			}
    		}
    	}
    }
    
    int algo (Triple primality[], int a, int b, int k)
    {
    	int answer = 0;
    	for (int i = a; i <= b; i++)
    	{
    		if ((primality[i].k == k && primality[i].n == 1) || (primality[i].k == k-1 && primality[i].n != 1))
    		{
    			answer++;
    		}
    	}
    	return answer;
    }
    
    void Begin()
    {
    	int t; int a, b, k;
    	int bound = 10000005;
    	String ch;    	
		String mystr[];
		int answer;
		Triple primality[] = new Triple[bound];//This kind of array is not too big; 5 for margin
		init (primality, bound);
		compute_p(primality, bound);
		
		Scanner sc = new Scanner(System.in);
		ch = sc.nextLine();
		ch.trim();
		t = Integer.parseInt(ch); // Number of cases			
		for (int i=1; i <= t; i++)
		{
			try
			{
				ch = sc.nextLine();
				ch.trim();
				mystr = ch.split(" ");
				a = Integer.parseInt(mystr[0]);
				b = Integer.parseInt(mystr[1]);
				k = Integer.parseInt(mystr[2]);
				answer = algo(primality, a, b, k);
				System.out.println("Case #" + i + ": " + answer);
			
			}
			catch (Exception e)
			{
				System.err.print("IOerror"); //TODO to remove
				break;
			}
		}
    }
}

# Facebook HackerCup 2015 Quesion: Homework
# BY: jasonwaiting.dev@gmail.com

import math
import time
import sys

## class def
# case class
class Case:
	# number of cases available
	caseNb = 0

	def __init__(self, start, end, primacity):
		self.start = start
		self.end = end
		self.primacity = primacity
		Case.caseNb += 1


# Reading input
def readCases(fileName):
	cases = []
	nbOfCases = -1
	with open(fileName, "r") as fread:
		for line in fread:
			if nbOfCases == -1:
				nbOfCases = int(line)
			else:
				caseStr = line.split()
				subCase = Case(int(caseStr[0]), int(caseStr[1]), int(caseStr[2]))
				cases.append(subCase)

	print "# of cases: " + str(nbOfCases)
	return cases

# Output
def writeOutput(fileName, results):
	fwrite = open(fileName, "w")
	for idx in range(len(results)):
		fwrite.write("Case #" + str(idx + 1) + ": " + str(results[idx]) + "\n")

	fwrite.close()

# find max from cases
def findMaxValue(cases):
	maxValue = -1
	for c in cases:
		if c.end > maxValue:
			maxValue = c.end

	return maxValue

# Get a list of prime numbers within a range
def sieve(n):
    np1 = n + 1
    s = list(range(np1)) # leave off `list()` in Python 2
    s[1] = 0
    sqrtn = int(round(n**0.5))
    for i in xrange(2, sqrtn + 1): # use `xrange()` in Python 2
        if s[i]:
            # next line:  use `xrange()` in Python 2
            s[i*i: np1: i] = [0] * len(xrange(i*i, np1, i))
    return filter(None, s)

# Get number count
def getNumberCount(max, primes):
	s = list((max + 1) *[0])
	s[1] = 0
	for p in primes:
		initVal = p
		while initVal <= max:
			s[initVal] += 1
			initVal += p

	return s


### MAIN ###
# time start
startTime = time.time()
results = []

cases = readCases(sys.argv[1])
upperLimit = findMaxValue(cases)

primes = sieve(upperLimit)
s = getNumberCount(upperLimit, primes)

for c in cases:
	matchCnt = 0
	caseStart = time.time()

	for i in range(c.start, c.end + 1):
		if s[i] == c.primacity:
			matchCnt += 1

	results.append(matchCnt)
	print "Case [" + str(c.start) + "-" + str(c.end) + "(" + str(c.primacity) + ")] Finished in-"
	print("%s s" % (time.time() - caseStart))
	print "RESULT - " + str(matchCnt) + "\n"

writeOutput("homework.out", results)

print("--- %s seconds ---" % (time.time() - startTime))
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.util.StringTokenizer;
import java.io.FilenameFilter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "homework.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("homework.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastScanner in = new FastScanner(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		solver.solve(1, in, out);
		out.close();
	}
}

class Homework {
	public void solve(int testNumber, FastScanner in, PrintWriter out) {
		final int N = 10000010;
		int[] d = new int[N];
		for (int i = 2; i < N; i++) {
			if (d[i] == 0) {
				for (int j = i; j < N; j += i) {
					d[j] = i;
				}
			}
		}
		int[] primacity = new int[N];
		int maxK = 0;
		for (int i = 2; i < N; i++) {
			int x = i;
			while (x > 1) {
				if (d[x / d[x]] != d[x]) {
					++primacity[i];
				}
				x /= d[x];
			}
			maxK = Math.max(maxK, primacity[i]);
		}
		int[][] s = new int[maxK + 1][N + 1];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < s.length; j++) {
				s[j][i + 1] = s[j][i];
			}
			if (i > 1) {
				++s[primacity[i]][i + 1];
			}
		}

		int numTests = in.nextInt();
		for (int test = 1; test <= numTests; test++) {
			int a = in.nextInt();
			int b = in.nextInt();
			int k = in.nextInt();
			int ans = 0;
			if (k < s.length) {
				ans = s[k][b + 1] - s[k][a];
			}
			out.printf("Case #%d: %d\n", test, ans);
		}
	}
}

class FastScanner {

	private BufferedReader in;
	private StringTokenizer st;

	public FastScanner(InputStream stream) {
		in = new BufferedReader(new InputStreamReader(stream));
	}

	public String next() {
		while (st == null || !st.hasMoreTokens()) {
			try {
				String rl = in.readLine();
				if (rl == null) {
					return null;
				}
				st = new StringTokenizer(rl);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return st.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

}


/*
ID: hanifbo1
PROG: ride
LANG: C++
*/
#include<bits/stdc++.h>

using namespace std;

#define DD          double
#define INF         1000000000000000000000
#define llu            unsigned long long
#define eps         0.000001
#define FastIO      ios_base::sync_with_stdio(0); cin.tie(0)
#define READ(f)     freopen(f,"r",stdin)
#define WRITE(f)    freopen(f,"w",stdout)
#define sc          scanf
#define pf          printf
#define mem(a,val)  memset(a,val,sizeof(a))
#define rep(s,n)    for(long i=s; i<=n;i++)
#define pb          push_back
#define ll          long long
#define pi          (2*acos(0.0))
#define mx          10000000
#define ssc         sscanf
#define FOR(i,n)    for(long i=1;i<=n;i++)
#define FORL(i,n) for(long i=0;i<n;i++)
#define PQ          priority_queue
#define sr(v)       sort(v.begin(),v.end())
#define mod         1000000007
#define sz          size()
#define inp          ({long tt2;sc("%ld",&tt2);tt2;})
#define Case(x)     (pf("Case %ld",x);)
//#define inp2        ({long a,b})



bool prime[mx+5];
vector<long>v;

void sieve()
{
    for(long i=4;i<=mx; i=i+2)
    prime[i]=1;

    for(long i=3; i*i<=mx;i=i+2)
    {
        if(prime[i] == 0)
        {
            for(long j=2*i; j<=mx; j=i+j)
            prime[j]=1;
        }
    }


    v.pb(2);
    for(long i=3;i<=mx;i=i+2)
    {
        if(prime[i]==0)
        v.pb(i);
    }
}

int primcity[mx+2];

void call(){

    for(int i = 0; i<v.sz;i++){

        for(int j = v[i]; j<=mx;j += v[i])
        primcity[j]++;
    }
}


int main()
{

    READ("in.txt");
    WRITE("out.txt");
    sieve();
    //ofstream fout ("ride.out");
    //ifstream fin ("ride.in");
    call();
    int t,ks = 1;

    sc("%d",&t);

    while(t--){

        int a,b,k;

        sc("%d %d %d",&a,&b,&k);
        int ans = 0;
        for(int i = a; i<=b;i++){

            if(primcity[i] == k)
            ans++;
        }

        pf("Case #%d: %d\n",ks++,ans);
    }
    return 0;
}



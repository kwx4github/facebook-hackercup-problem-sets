#include <bits/stdc++.h>

using namespace std;

struct RTC{~RTC(){cerr << "Time: " << clock() * 1.0 / CLOCKS_PER_SEC <<" seconds\n";}} runtimecount;
#define DBG(X) cerr << #X << " = " << X << '\n';
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define all(c) (c).begin(),(c).end()
#define forn(i, n) for (int i = 0; i < (n); i++)
const int MAX = 10000000;
int divi[MAX + 100];
int cnt[10][MAX + 100];
int maxdiv;
void preprocess() {
    memset(divi, 0, sizeof(divi));
    maxdiv = 0;
    for (int i = 2; i <= MAX; i++) {
	if (divi[i] == 0)
	    for (int j = i; j <= MAX; j += i)
		divi[j]++;
	maxdiv = max(maxdiv, divi[i]);
    }
    memset(cnt, 0, sizeof(cnt));
    for (int i = 2; i <= MAX; i++) {
	for (int j = 0; j <= maxdiv; j++)
	    cnt[j][i] = cnt[j][i - 1];
	cnt[divi[i]][i]++;
    }
}
int query(int i, int j, int k) {
    if (k > maxdiv) return 0;
    return cnt[k][j] - cnt[k][i - 1];
}
int main() {
    preprocess();
    int t;
    cin >> t;
    for (int caso = 1; caso <= t; caso++) {
	int a, b, k;
	cin >> a >> b >> k;
	printf("Case #%d: %d\n", caso, query(a, b, k));
    }
    return 0;
}

/* ¹®Á¦
	2015.

*/


#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <functional>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <iostream>

#define ENP 	printf("**Entry Point**\n")
#define A		first
#define B		second
#define MP		make_pair

using namespace std;

typedef long long ll;
typedef vector 	<double> 			vec_d;
typedef vector 	<vec_d>				vvec_d;
typedef vector 	<int>				vec_i;
typedef vector 	<vec_i>				vvec_i;
typedef pair 	<int, int> 			pair_i;
typedef pair 	< pair_i, pair_i > 	pp_i;

const int INF = 0x7fffffff;
const int MINF = 0x80000000;
const int mod = 1000000007;
const int cons = 10000001;

bool isprime[cons];
vector <int> prime;

vector <int> x[cons];

int dat[cons];

void buildprime()
{
	isprime[0] = true;
	isprime[1] = true;

	for (int i = 2; i < cons; i++)
	{
		for (int j = 2; j*i < cons; j++)
		{
			isprime[j*i] = true;
		}
	}

	for (int i = 0; i < cons; i++)
	{
		if (isprime[i] == false)
		{
	//		printf("%d\n", i);
			prime.push_back(i);
		}
	}

}

int bins(int n, int k)
{
	int l = -1;
	int r = x[k].size();

	while (l + 1 < r)
	{
		int mid = l + r >> 1;

		if (x[k][mid] == n)
		{
			return mid;
		}
		else if (x[k][mid] > n)
		{
			r = mid;
		}
		else
		{
			l = mid;
		}
	}

	return r;
}

int bins2(int n, int k)
{
	int l = -1;
	int r = x[k].size();

	while (l + 1 < r)
	{
		int mid = l + r >> 1;

		if (x[k][mid] == n)
		{
			return mid + 1;
		}
		else if (x[k][mid] > n)
		{
			r = mid;
		}
		else
		{
			l = mid;
		}
	}

	return r;
}


int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	buildprime();

//	ENP;
	for (int i = 2; i <= 10000000; i++)
	{
		int tmp = i;

		if (isprime[i] == false)
		{
			dat[i] = 1;
			x[dat[i]].push_back(i);
			continue;
		}

		bool judge = false;

		for (int j = 0; prime[j] <= tmp; j++)
		{
			while (tmp%prime[j] == 0)
			{
				tmp /= prime[j];
				judge = true;
			}

			if (judge)
			{
				dat[i] = 1;
				break;
			}

		}

		if (tmp != 1)
			dat[i] += dat[tmp];


		x[dat[i]].push_back(i);
	}

	int TestNum;
	scanf("%d", &TestNum);
	
	for(int TestCase = 1; TestCase <= TestNum; TestCase++)
	{
		printf("Case #%d: ", TestCase);
		
		int a, b, k;
		scanf("%d%d%d", &a, &b, &k);
		
		int st = bins(a, k);
		int en = bins2(b, k);

		/*for (int i = 0; x[k][i] <= b; i++)
		{
			printf("%d ", x[k][i]);
		}
		puts("");*/

	//	printf("%d %d %d\n", st, en);

		printf("%d\n", en - st);
	}

	return 0;
}
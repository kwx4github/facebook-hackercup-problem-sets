from collections import defaultdict

primacy = None
def getPrimacy():
    global primacy
    if primacy is None:
        primacy = calcPrimacy(10000000)
    return primacy


def calcPrimacy(n):
    counts = [0]*(n+1)
    for prime in calcPrimes(n):
        for i in range(0, n+1, prime):
            counts[i]+=1
    return counts


def calcPrimes(n):
    """ returns a list of prime numbers from 2 to < n """
    if n < 2:  return []
    if n == 2: return [2]
    # do only odd numbers starting at 3
    s = list(range(3, n, 2))
    # n**0.5 may be slightly faster than math.sqrt(n)
    mroot = n ** 0.5
    half = len(s)
    i = 0
    m = 3
    while m <= mroot:
        if s[i]:
            j = (m * m - 3) // 2
            s[j] = 0
            while j < half:
                s[j] = 0
                j += m
        i = i + 1
        m = 2 * i + 3
    # make exception for 2
    return [2] + [x for x in s if x]


class Case:
    @classmethod
    def parse(cls, stream):
        score = next(stream).strip()
        A, B, K = score.split(' ')
        return cls(int(A), int(B), int(K))

    def __init__(self, A, B, K):
        self.A = A
        self.B = B
        self.K = K

    def solve(self):
        A = self.A
        B = self.B
        K = self.K
        if K>9:
            return 0
        result = 0
        for x in getPrimacy()[A:B+1]:
            if x==K:
                result += 1

        return result


def main(fin, fout):
    print("precalculations...", end="", flush=True)
    getPrimacy()
    print("done")

    numCases = int(next(fin).strip())
    for i in range(numCases):
        case = Case.parse(fin)
        answer = case.solve()
        output = "Case #{}: {}".format(i+1, answer)
        print(output)
        print(output, file=fout)


if __name__ == '__main__':
    import sys
    if len(sys.argv) < 3:
        print("Usage: main.py <input> <output>")
        exit()
    fin = open(sys.argv[1], 'r')
    fout = open(sys.argv[2], 'w')
    main(fin, fout)

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <tuple>
#include <vector>
using namespace std;

const int kMaxN = 10000000;

struct Request {
  int A, B, K;
  int idx;
};

int main() {
//  freopen("../Console/1.txt", "rb", stdin);
  freopen("../Console/homework.txt", "rb", stdin);
  freopen("../Console/homework.out", "wb", stdout);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  vector<int> cnt(kMaxN + 1, 0);
  for (int i = 2; i <= kMaxN; ++i) {
    if (cnt[i] == 0) {
      for (int j = i; j <= kMaxN; j += i) {
        ++cnt[j];
      }
    }
  }

  const int max_primacy = *max_element(cnt.begin(), cnt.end());

  int T;
  cin >> T;

  vector<Request> requests(T);
  for (int tc = 0; tc < T; ++tc) {
    cin >> requests[tc].A >> requests[tc].B >> requests[tc].K;
    requests[tc].idx = tc;
  }

  sort(requests.begin(), requests.end(),
       [](const Request& lhs, const Request& rhs) { return lhs.K < rhs.K; });

  vector<int> answers(T, 0);
  for (int i = 0; i < T;) {
    const int primacy = requests[i].K;

    int j = i;
    while (j < T && primacy == requests[j].K) {
      ++j;
    }

    if (primacy > max_primacy) {
      for (; i < j; ++i) {
        answers[requests[i].idx] = 0;
      }
    } else {
      vector<int> sum(kMaxN + 1, 0);
      for (int k = 1; k <= kMaxN; ++k) {
        if (cnt[k] == primacy) {
          sum[k] = sum[k - 1] + 1;
        } else {
          sum[k] = sum[k - 1];
        }
      }

      for (; i < j; ++i) {
        answers[requests[i].idx] = sum[requests[i].B] - sum[requests[i].A - 1];
      }
    }
  }

  for (int tc = 0; tc < T; ++tc) {
    cout << "Case #" << tc + 1 << ": ";
    cout << answers[tc];
    cout << '\n';
  }

  return 0;
}

#include <stdio.h>
#include <math.h>
#include <string.h>

#define MAX 10000000
#define STACK_SIZE 25

int* mark;

void calc(int *stack, int n, long long lastres) {
    mark[lastres] = n;
    long long tmpres;
    for (int i=0; i<n; ++i) {
        tmpres = lastres * stack[i];
        if (tmpres > MAX) {
            return;
        }
        calc(stack, n, tmpres);
    }
}

void combine(int* primes, int* stack, int n, int primeTop, int primeInx, int stackTop, long long lastres) {
    for (int i=primeInx; i<primeTop; ++i) {
        stack[stackTop] = primes[i];
        long long tmpres = lastres * primes[i];
        if (tmpres > MAX) {
            return;
        }
        calc(stack, n, tmpres);
        combine(primes, stack, n + 1, primeTop, i + 1, stackTop + 1, tmpres);
    }
}

int main() {
    int i, j, c, cases, b, e, k;
    mark  = new int[MAX];
    int* primes = new int[7000000], all=0;
    int stack[STACK_SIZE], top;
    for (i=2; i< MAX; ++i)
    {
        int half = (int) sqrt(i) + 1;
        for (j=0; j<all; ++j)
        {
            if (primes[j] > half)
            {
                break;
            }
            if (i % primes[j] == 0) {
                break;
            }
        }
        if (j == all || primes[j] > half)
        {
            primes[all++] = i;
            mark[i] = 1;
        }
    }
    combine(primes, stack, 1, all, 0, 0, 1);
    scanf("%d", &cases);
    for (i=1; i<=cases; ++i) {
        int total = 0, l, t;
        scanf("%d %d %d", &b, &e, &k);
        for (j=b; j<=e; ++j) {
            if (mark[j] == k) {
                ++total;
            }
        }
        printf("Case #%d: %d\n", i, total);
    }
    return 0;
}
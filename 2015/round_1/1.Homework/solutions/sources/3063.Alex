import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class R1A implements Runnable {
    int MAXN = 10000000 + 10;
    boolean[] isP = new boolean[MAXN];
    public void run() {
        Arrays.fill(isP, true);
        isP[0] = isP[1] = false;

        for (int i = 0; i < MAXN; ++i) {
            if (isP[i]) {
                for (int j = i+i; j < MAXN; j += i) {
                    isP[j] = false;
                }
            }
        }

        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 0; i < MAXN; ++i) {
            if (isP[i]) {
                primes.add(i);
            }
        }

        int[] cnt = new int[MAXN];
        for (int num : primes) {
            for (int pos = num; pos < MAXN; pos += num) {
                cnt[pos]++;
            }
        }


        int testNum = nextInt();
        for (int iter = 1; iter <= testNum; ++iter) {
            int a = nextInt();
            int b = nextInt();
            int k = nextInt();
            int ans = 0;
            for (int i = a; i <= b; ++i) {
                if (cnt[i] == k) {
                    ++ans;
                }
            }
            out.println("Case #"+iter+": "+ans);
        }
        out.flush();
    }


    private static BufferedReader br;
    private static StringTokenizer stk;
    private static PrintWriter out;
    public static void main(String[] args) throws FileNotFoundException {
        out = new PrintWriter("Aout.txt");
        br = new BufferedReader(new InputStreamReader(new FileInputStream("A.txt")));
        (new R1A()).run();
    }

    public void loadLine() {
        try {
            stk = new StringTokenizer(br.readLine());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String nextLine() {
        try {
            return br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public int nextInt() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Integer.parseInt(stk.nextToken());
    }
    public long nextLong() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return Long.parseLong(stk.nextToken());
    }
    private String next() {
        while (stk == null || !stk.hasMoreElements()) loadLine();
        return stk.nextToken();
    }

}

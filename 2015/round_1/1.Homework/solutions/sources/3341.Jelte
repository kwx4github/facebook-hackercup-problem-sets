package competition;

import java.io.*;
import java.math.*;
import java.util.*;

public class Homework {
  private static BufferedReader br;
  private static StringTokenizer st;
  private static PrintWriter pw;
  private static final String IN = "c:\\TEMP\\IN.txt";
  private static final String OUT = "c:\\TEMP\\OUT.txt";
  private static final boolean DEBUG = false;
  private static String line;
  
  /////////////////
  // MAIN SCRIPT //
  /////////////////
  
  public static void main(String[] args) throws IOException       {
    createIO();   
    
    List<Integer> primacity = new ArrayList<Integer>();
    for (int i = 2; i <= 10000000; i++){
      primacity.add(primeFactors(i));
    }
    
    final int MAX_NUM_CASE = readInt();
    for(int qq = 1; qq <= MAX_NUM_CASE; qq++)       {
      int a = readInt();
      int b = readInt();
      int k = readInt();
      int answer = 0;
      
      for (int i = a-2; i <= b-2 ; i++){
        if (primacity.get(i) == k){
          answer++;
        }
      }

      println("Case #" + qq + ": " + answer);
    }
    pw.close();
    System.out.println("--> rdy <--");
  }
  
  public static int  primeFactors(int numbers) {
    int n = numbers;
    TreeSet<Integer> factors = new TreeSet<Integer>();
    for (int i = 2; i <= n / i; i++) {
      while (n % i == 0) {
        factors.add(i);
        n /= i;
      }
    }
    if (n > 1) {
      factors.add(n);
    }
    
    return factors.size();
  }

  //////////////////////
  /* HELPER FUNCTIONS */
  //////////////////////
  private static void print(Object s){
    if (DEBUG){ System.out.print(s); } 
    else { pw.print(s); }
  }
  private static void println(Object s){
    if (DEBUG){ System.out.println(s); } 
    else { pw.println(s); }
  }
  private static long readLong() throws IOException       {
    return Long.parseLong(nextToken());
  }
  private static double readDouble() throws IOException   {
    return Double.parseDouble(nextToken());
  }
  private static int readInt() throws IOException {
    return Integer.parseInt(nextToken());
  }
  private static String nextToken() throws IOException    {
    while(st == null || !st.hasMoreTokens())        {
      if(!br.ready()) {
        pw.close();
        System.exit(0);
      }
      line = br.readLine().trim();
      st = new StringTokenizer(line);
    }
    return st.nextToken();
  }
  private static void createIO() throws FileNotFoundException{
    br = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(IN))));
    if (DEBUG){
      pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    } else {
      pw= new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(OUT))));
    }    
  }
}

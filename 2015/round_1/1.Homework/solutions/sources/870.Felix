// g++ -Wl,-stack_size -Wl,100000000 -O2 homework.cc && ./a.out

#include <assert.h>
#include <stdio.h>

#include <vector>
#include <algorithm>

using namespace std;

#define MAXP 10000010
 
char sieve[MAXP];
vector<long long> primes;
 
void initSieve(){
    memset(sieve,1,sizeof(sieve));
    sieve[0] = sieve[1] = false;
    for (int i=2; i<MAXP; i++) if (sieve[i]){
        for (int j=i+i; j<MAXP; j+=i) sieve[j] = false;
        primes.push_back(i);
    }
}

int primacity[MAXP];

void gen(int idx, long long num, int distinct_primes) {
  if (idx >= primes.size()) return;
  if (num * primes[idx] >= MAXP) return;

  gen(idx + 1, num, distinct_primes);
  while (true) {
    num *= primes[idx];
    if (num >= MAXP) break;
    primacity[num] = distinct_primes + 1;
    gen(idx + 1, num, distinct_primes + 1);
  }
}

int main() {
  initSieve();
  gen(0, 1, 0);

  int T, A, B, K;
  scanf("%d", &T);
  for (int TC = 1; TC <= T; TC++) {
    scanf("%d %d %d", &A, &B, &K);
    assert(A >= 2 && A < MAXP);
    assert(B >= 2 && B < MAXP);
    int cnt = 0;
    for (int i = A; i <= B; i++) {
      if (primacity[i] == K) {
        cnt++;
      }
    }
    printf("Case #%d: %d\n", TC, cnt);
  }
}

#include "stdafx.h"

#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <algorithm>
#include <set>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <cmath>

struct hash
{
    size_t operator()(int i) const { return i; }
};

static auto primes = std::vector<int>{ 2, 3, 5, 7, 11, 13, 17, 19, 23 };
static auto primes_hash = std::unordered_set<int, hash>(primes.begin(), primes.end());
static auto primacities = std::unordered_map<int, int, hash>{{1, 0}};

const std::vector<int>& calc_primes(int max)
{
    for (int i = primes.back() + 2; i <= max; i += 2)
    {
        auto ok = true;
        const auto up_bnd = (int)sqrt(i) + 1;
        for (int p : primes)
        {
            if ((i % p) == 0)
            {
                ok = false;
                break;
            }
            if (p > up_bnd)
            {
                break;
            }
        }

        if (ok)
        {
            primes.push_back(i);
            primes_hash.insert(i);
        }
    }

    return primes;
}

int calc_primacity(int i)
{
    if (i == 1)
    {
        return 0;
    }
    const auto it = primacities.find(i);
    if (it != primacities.end())
    {
        return it->second;
    }

    auto& primes = calc_primes(i);

    // check if i is prime
    if (primes_hash.find(i) != primes_hash.end())
    {
        primacities.insert({i, 1});
        return true;
    }

    const auto max = (int)sqrt(i) + 1;

    for (int p : primes)
    {
        if (p > max) break;

        if ((i % p) == 0)
        {
            int j = i / p;
            while ((j % p) == 0)
            {
                j /= p;
            }
            const int j_primacity = calc_primacity(j);

            primacities.insert({i, j_primacity + 1});
            return j_primacity + 1;
        }
    }

    return 0; // ???
}

int calc_count(int min, int max, int primacity)
{
    if (primacity > 9) return 0;

    int count = 0;
    for (int i = max; i >= min; --i)
    {
        if (calc_primacity(i) == primacity)
        {
            ++count;
        }
    }

    return count;
}

int main()
{
    std::istringstream ins(R"(5
5 15 2
2 10 1
24 42 3
1000000 1000000 1
1000000 1000000 2
)");
    std::istream& in = 
        //ins
        std::cin
        ;

    std::string line;
    std::getline(in, line);
    int count = std::stoi(line);
    for (int i = 0; i != count; ++i)
    {
        std::getline(in, line);

        int min, max, primacity;
        std::istringstream is(line);
        is >> min >> max >> primacity;

        int count = calc_count(min, max, primacity);

        std::cout << "Case #" << i + 1 << ": " << count << std::endl;
    }
}

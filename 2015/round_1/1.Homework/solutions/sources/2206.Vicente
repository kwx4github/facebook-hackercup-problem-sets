#include <cmath>
#include <iostream>
#include <vector>

using namespace std;

vector<int> primes;

void sieve(int n)
{
    vector<bool> prime(n+1, true);

    prime[0] = false;
    prime[1] = false;
    int m = sqrt(n);

    for(int i=2; i<=m; ++i)
        if(prime[i])
            for(int j=i*i; j<=n; j+=i)
                prime[j] = false;

    for(int i=0; i<=n; ++i)
        if(prime[i])
            primes.push_back(i);
}

int primacity(int a, int b, int k)
{
    int res = 0;

    sieve(b);

    vector<int> numbers(b-a+1, 0);
    int m = primes.size();
    for(int i=0; i<m; ++i)
    {
        int start = (a / primes[i]) * primes[i];
        if(start < a)
            start += primes[i];

        for(int j=start; j<=b; j+=primes[i])
        {
            numbers[j-a]++;
            if(numbers[j-a] == k)
                res++;
            else if(numbers[j-a] == k+1)
                res--;
        }
    }

    return res;
}

int main()
{
    int t, a, b, k;

    cin >> t;

    for(int i=1; i<=t; ++i)
    {
        cin >> a >> b >> k;

        primes.clear();

        cout << "Case #" << i << ": " << primacity(a, b, k) << endl;
    }

    return 0;
}


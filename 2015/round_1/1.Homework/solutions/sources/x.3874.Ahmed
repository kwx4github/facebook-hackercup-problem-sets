#include <iostream>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <cstring>
using namespace std;
int solve(int cut, int start, int end);
int bin_search1(int cut, int x);
int bin_search2(int cut, int x);

int indx[10], array[10][3000000], v[10000001];
void sieve();
int inf = 1073741824;
int ans, small, big, cut, cases, c = 1;

int main()
{
    freopen("homework.txt", "r", stdin);
freopen("o.txt", "w", stdout);
    sieve();
    scanf("%d", &cases);
    while(cases--)
    {
        ///5 15 2
        scanf("%d %d %d", &small, &big, &cut);
        printf("Case #%d: %d\n", c++, solve(cut, small, big));
    }

    return 0;
}

void sieve()
{
    memset(indx, 0, sizeof(indx));
    memset(v, 0, sizeof(v));
    v[0] = v[1] = 1;
    long long i, j;

    for (i = 2; i * i < 10000001; i++)
    {
        if (!v[i])
        {
            v[i] = 1;
            for (j = i + i; j < 10000001; j += i)
            {
                v[j]++;
            }
        }
    }

    for (i = 2; i < 10000001; i++)
    {
        int& curr = indx[v[i]];
        int cut = v[i];
        array[cut][curr] = i;
        curr++;
        //indx[cut]++;
    }

}

int solve(int cut, int start, int end)
{
    if(cut > 8)
        return 0;

    int big = bin_search2(cut, end);
    int small = bin_search1(cut, start);
    if(big == -1 || small == inf)
        return 0;
    return big - small + 1;
}


int bin_search1(int cut, int x)
{
    int big = indx[cut] - 1, small = 0, mid, ret = inf;

    while(big >= small)
    {
        mid = (big + small) / 2;

        if(array[cut][mid] < x)
            small = mid + 1;
        else
            big = mid - 1, ret = min(ret, mid);
    }

    return ret;
}

int bin_search2(int cut, int x)
{
    int big = indx[cut], small = 0, mid, ret = -1;

    while(big >= small)
    {
        mid = (big + small) / 2;

        if(array[cut][mid] <= x)
            small = mid + 1, ret = max(ret, mid);
        else
            big = mid - 1;
    }

    return ret;
}

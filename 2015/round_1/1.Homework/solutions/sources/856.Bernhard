/////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <string>
#include <sstream>
#include <iostream>
#include <deque>
#include <cctype>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <cstring>

using namespace std;

constexpr int N = 10000003;

#define TESTBIT(b,x) (b[(x)>>3] & (1<<((x)&7)))
#define SETBIT(b,x) (b[(x)>>3] |= (1<<((x)&7)))
#define CLEARBIT(b,x) (b[(x)>>3] &= ~(1<<((x)&7)))

unsigned char sieve[N / 8 + 3];
int factor[N + 3];
int cnt[N + 3];

void sieve_() {
	int j;

	SETBIT(sieve, 1);
	for (int i = 3; (j = i * i) <= N; i += 2) {
		if (TESTBIT(sieve, i))
			continue;
		do {
			SETBIT(sieve, j);
			factor[j] = i;
			j += i + i;
		} while (j <= N);
	}

	cnt[1] = 0;
	cnt[2] = 1;
	for (int i = 3; i <= N; ++i) {
		if (i % 2 == 0) {
			j = i / 2;
			while (j % 2 == 0)
				j /= 2;
			cnt[i] = 1 + cnt[j];
		} else {
			if (!TESTBIT(sieve, i)) {
				// odd prime
				cnt[i] = 1;
			} else {
				assert(i % factor[i] == 0);
				j = i / factor[i];
				while (j % factor[i] == 0)
					j /= factor[i];
				cnt[i] = 1 + cnt[j];
			}
		}
	}
}

int main() {
	int cases;

	sieve_();

	cin >> cases;

	for (int caseno = 1; caseno <= cases; ++caseno) {
		cout << "Case #" << caseno << ": ";
		int A, B, K;
		cin >> A >> B >> K;
		int res = 0;
		for (int i = A; i <= B; ++i) {
			if (cnt[i] == K)
				++res;
		}
		cout << res << endl;
	}
	return 0;
}


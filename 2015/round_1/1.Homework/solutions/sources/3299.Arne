#include <iostream>
#include <vector>
using namespace std;

unsigned long maxValue = 100000000;
vector< unsigned int > sieve( maxValue - 1, 0 );

void printSolution( unsigned int testCase, unsigned long solution )
{
	cout << "Case #" << testCase << ": " << solution << endl;
}	

void solve( unsigned int testCase )
{
	unsigned long A, B, K;
	cin >> A >> B >> K;

	unsigned long nofWithPrimacity = 0;
	for ( int i = A; i <= B; ++i )
	{
		if ( sieve[ i - 2 ] == K )
		{
			++nofWithPrimacity;
		}
	}

	printSolution( testCase, nofWithPrimacity );
}

int main( int argc, char** argv )
{
  	unsigned int T;
	cin >> T;
	
	// == Create a prime sieve
	// Alway decrement index by 2, since 0 and 1 are not considered
	// prime.
	for ( unsigned long p = 2; p <= maxValue; ++p )
	{
		if ( sieve[p - 2] == 0 )
		{
		  	sieve[ p - 2 ] = 1;
			for ( unsigned long notP = p * 2; notP <= maxValue; notP += p )
			{
				sieve[notP - 2] += 1;
			}
		}
	}

	for ( unsigned int i = 1; i <= T; ++i ) solve( i );

	return 0;
}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <queue>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define INF 1000000000
#define FOR(i, a, b) for(int i=int(a); i<int(b); i++)
#define FORC(cont, it) for(typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); it++)
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;

#define maxN 10000001

bool prime[maxN];
int primalities[maxN];
vi primes;

int getPrimality(int n) {
	int ret = 0;
	FOR(i, 0, primes.size()) {
		if (n%primes[i] == 0) {
			ret++;
			while (n%primes[i] == 0) {
				n /= primes[i];
			}
		}
	}
	if (n != 1) ret++;
	return ret;
}

int main() {
	int T, caso=1;
	cin >> T;
	memset(prime, true, sizeof(prime));
	FOR(i, 2, maxN / 2) for (int j = 2; j*i < maxN; j++) prime[j*i] = false;
	FOR(i, 2, maxN) {
		if (prime[i]) primes.push_back(i);
	}
	FOR(i, 1, maxN) FOR(j, 0, primes.size()) {
		if (i*primes[j] >= maxN) break;
		primalities[i*primes[j]]++;
	}
	while (T--) {
		cout << "Case #" << caso++ << ": ";
		int A, B, K, ans=0;
		cin >> A >> B >> K;
		FOR(i, A, B + 1) {
			if(primalities[i]==K) ans++;
		}
		cout << ans;
		cout << endl;
	}
	return 0;
}

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class f2015R1 {

	public static void main(String[] args) throws FileNotFoundException {
		//cookingTheBooks("./input/f2015Q/cooking_the_books");
		//newYearsResolution("./input/f2015Q/new_years_resolution");
		//lazerMaze("./input/f2015Q/laser_maze");
		homework("./input/f2015R1/homework");
	}
	
	public static void homework(String filename) throws FileNotFoundException {
		LinkedHashSet<Integer> primes = getPrimes(10000000);

		int[][] primacity = new int[9][10000001];
		for (int i = 2; i <= 10000000; i++) {
			int pr = 0;
			if (primes.contains(i)) {
				pr++;
			} else {
				for (int j = 2; j*j <= i; j++) {
					if (i % j == 0) {
						int a = i / j;
						if (primes.contains(a)) {
							pr++;
						}
						if (j != a) {
							a = j;
							if (primes.contains(a)) {
								pr++;
							}
						}
					}
				}
			}
			primacity[pr][i] = 1;
		}
		
		MyScanner scan = new MyScanner(new FileInputStream(filename+".txt"));
		StringBuilder output = null;
		String outputfile = filename + ".out";
		PrintStream out = new PrintStream(new FileOutputStream(outputfile));
		System.out.println(Calendar.getInstance().getTime()+" - Started writing to: "+outputfile);
		
		int t = scan.nextInt();
		for (int i = 0; i < t; i++) {
			output = new StringBuilder();
			output.append("Case #" + (i+1) + ": ");
			
			int a = scan.nextInt();
			int b = scan.nextInt();
			int k = scan.nextInt();
			
			if (k > 8) {
				output.append(0);
			} else {
				int sum = 0;
				for (int j = a; j <= b; j++) {
					sum += primacity[k][j];
				}
				output.append(sum);
			}
			out.println(output.toString());

		}
		scan.close();
		out.close();
		System.out.println(Calendar.getInstance().getTime()+" - Finished writing to: "+outputfile);
	}


	public static LinkedHashSet<Integer> getPrimes(long limit) {
		LinkedHashSet<Integer> primes = new LinkedHashSet<Integer>();
		LinkedHashSet<Integer> notPrimes = new LinkedHashSet<Integer>();
		boolean prime = true;
		for (int i = 2; i <= limit; i++) {
			prime = true;
			if (notPrimes.contains(i)) {
				prime = false;
			}
			if (prime) {
				primes.add(i);
				for (int j = 2; j*i <= limit; j++) {
					notPrimes.add(j*i);
				}
			}
		}
		return primes;
	}

	public static int swap(char[] a_, int i, int j) {
		char[] a = a_.clone();
		char t = a[i];
		a[i] = a[j];
		a[j] = t;
		if (a[0] == '0') {
			return Integer.parseInt(new String(a_));
		}
		return Integer.parseInt(new String(a));
	}

	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner(InputStream in) {
			this.br = new BufferedReader(new InputStreamReader(in));
		}

		public void close() {
			try {
				this.br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine(){
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

}

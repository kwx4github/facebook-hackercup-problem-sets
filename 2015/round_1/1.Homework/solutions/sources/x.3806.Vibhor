#include <algorithm>
#include <utility>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <queue>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <limits.h>
#include <cstdlib>
#include <stack>
#define MAX 10000001
using namespace std;

int pr[MAX];
vector<int> factors[8];

void sieve() {
	for(int i = 2; i < MAX; i++) {
		if(pr[i] == 0) {
			for(int j = 2 * i; j < MAX; j+=i) {
				pr[j] += 1;
			}
		}
	}
	for(int i = 2; i < MAX; i++) {
		if(pr[i] == 0) pr[i] = 1;
		if(pr[i] <= 5) {
			factors[pr[i]].push_back(i);
		}
	}
}
int search(int a, int b, int k) {
	int lpos = int(lower_bound(factors[k].begin(), factors[k].end(), a) - factors[k].begin());
	int upos = int(lower_bound(factors[k].begin(), factors[k].end(), b) - factors[k].begin());
	int limit = int(factors[k].end() - factors[k].begin());
	if(lpos == limit) {
		return 0;
	} else {
		while(lpos < factors[k].size() && factors[k][lpos] < a) {
			lpos += 1;
		}
		while(upos >= 0 && factors[k][upos] > b) {
			upos -= 1;
		}
		if(lpos < 0) lpos = 0;
		if(upos == limit) upos -= 1;
		return upos - lpos + 1;
	}
}
int main() {
    ifstream fin ("homework.txt");
    ofstream fout ("output.txt");
	sieve();
	int q=1;
	int t, a, b, k;
	fin>>t;
	while(t--)
    {
        fin>>a>>b>>k;
        fout<<"Case #"<<q++<<": "<<search(a,b,k)<<endl;
    }
}

package test;

import java.io.*;
import java.util.*;


public class Homework {

	public static void main(String[] args) {
		int limit = 10000000;
		int prima[] = new int[limit + 1]; 
		List<Integer> primes = new ArrayList<Integer>();
		primes.add(2);
		prima[2] = 1;
		for (int i = 3; i <= limit; i++) {
			boolean flag = true;
			int j = i;
			for (int p : primes) {
				if (p > Math.sqrt(i)) break;
				if (j % p == 0) {
					while (j % p == 0) j /= p;
					prima[i] = prima[j] + 1;
					flag = false;
					break;
				}
			}
			if (flag) {
				prima[i] = 1;
				primes.add(i);
			}
		}
		List<List<Integer>> mem = new ArrayList<List<Integer>>();
		int limit2 = 8;
		for (int i = 0; i <= limit2; i++) {
			mem.add(new ArrayList<Integer>());
		}
		for (int i = 2; i <= limit; i++) {
			mem.get(prima[i]).add(i);
		}
		for (int i = 0; i <= limit2; i++) {
			System.out.println(mem.get(i).size());
		}
		BufferedReader br = null;
		BufferedWriter bw = null;
		int T = 0;
		
		try {
			br = new BufferedReader(new FileReader("C:\\users\\guzh\\desktop\\homework.txt"));
			File output = new File("C:\\users\\guzh\\desktop\\homework_output.txt");
			output.createNewFile();
			bw = new BufferedWriter(new FileWriter(output));
			
			String line = br.readLine();
			if (line != null) T = Integer.parseInt(line);
			
			int t = 1;
			while (t <= T) {
				String nums[] = null;
				line = br.readLine();
				if (line != null)  nums = line.split(" ");
				int A = Integer.parseInt(nums[0]);
				int B = Integer.parseInt(nums[1]);
				int K = Integer.parseInt(nums[2]);

				int res = 0;
				if (K <= limit2) {
					int n1 = search(mem.get(K), 0, mem.get(K).size() - 1, A);
					int n2 = search(mem.get(K), 0, mem.get(K).size() - 1, B);
					res = n2 - n1 + ((n1 >= 0 && mem.get(K).get(n1) == A) ? 1 : 0);
				}

				bw.write("Case #" + t + ": " + res +"\n");
				
				t++;
			}
			br.close();
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	static int search(List<Integer> a, int l, int r, int t) {
		if (l > r) return -1;
		if (t >= a.get(r)) return r;
		int m = (l + r) / 2;
		if (a.get(m) == t) return m;
		else if (t < a.get(m)) return search(a, l, m -1, t);
		else return search(a, m, r, t);
		
	}
}

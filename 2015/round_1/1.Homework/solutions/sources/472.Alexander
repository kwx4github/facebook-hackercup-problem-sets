
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>
#include <cassert>
#include <unordered_set>
#include <unordered_map>
#include <fstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)


const int MAXN = 10111222;
const int MAXPRIMACITY = 8;
bool notPrime[MAXN];
int primacity[MAXN];
int dp[MAXPRIMACITY+1][MAXN];
int main() {
	memset(notPrime,0,sizeof(notPrime));
	memset(primacity,0,sizeof(primacity));
	FOR(p,2,MAXN){
		if(notPrime[p])continue;
		for(int c = p; c < MAXN; c += p){
			notPrime[c] = true;
			++primacity[c];
		}
	}
	int maxprimacity = 0;
	FOR(i,0,MAXN)maxprimacity = max(maxprimacity, primacity[i]);
	assert(maxprimacity <= MAXPRIMACITY);
	memset(dp,0,sizeof(dp));
	FOR(i,0,MAXN)++dp[primacity[i]][i];
	FOR(i,0,MAXPRIMACITY+1)FOR(j,1,MAXN)dp[i][j] += dp[i][j-1];
	int T, A, B, K;
	cin >> T;
	FOR(t,1,T+1){
		cin >> A >> B >> K;
		assert(2 <= A && A <= B && B < MAXN);
		assert(1 <= K);
		cout << "Case #" << t << ": " << ((K>MAXPRIMACITY)?0:(dp[K][B]-dp[K][A-1])) << endl;
	}
	return 0;
}

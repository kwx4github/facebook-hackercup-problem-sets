#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define LIM 10000000

using namespace std;

typedef long long int llint;

char sieve[LIM+1]; 

vector<int> primes;
vector<llint> K[10];

int binary(int k, llint seek) {
	int tp, bt, ct;

	tp = K[k].size();
	bt = 0;

	while (tp != bt) {
		ct = (tp + bt) / 2;
		if (K[k][ct] == seek) {
			return ct + 1;
		} else if (K[k][ct] > seek) {
			tp = ct;
		} else {
			bt = ct + 1;
		}
	}

	if (K[k][bt] > seek) {
		return bt;
	} else {
		return bt - 1;
	}
}

int main() {
	int T, a, b, k, test = 0;
	llint s = 0LL, tmp;

	for (llint i = 2; i < LIM; ++i) {
		sieve[i] = 1;
	}

	for (llint i = 2; i <= LIM/2; ++i) {
		for (llint j = 2; i*j <= LIM; ++j) {
			sieve[i*j] = 0;
		}
	}

	for (int i = 2; i <= LIM; ++i) {
		if (sieve[i])
			primes.push_back(i);
	}

	//cout << primes.size() << " primes generated\n";

	for (llint i = 2; i <= LIM; ++i) {

		if (sieve[i]) {
			k = sieve[i];
		} else {
			k = 0;
			tmp = i;
			for (auto it: primes) {
				if (it*it > tmp) {
					break;
				}

				if (tmp%it==0) {
					while (tmp%it==0) tmp /= it;
					k++;
				}

				if (tmp != 1 && sieve[tmp]) {
					k += sieve[tmp];
					break;
				}
			}
		}

		sieve[i] = k;
		K[k].push_back(i);
	}

	//cout << "[0, " << LIM << "] cataloged\n";

	scanf("%d", &T);
	while (T--) {
		scanf("%d %d %d", &a, &b, &k);
		if (k >= 9) {
			cout << "Case #" << ++test << ": " << 0 << '\n';
		} else {
			cout << "Case #" << ++test << ": " << binary(k, b) - binary(k, a-1) << '\n';
		}
	}
}
#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }


vector<int> smallestPrimeFactor;
void getSmallestPrimeFactors(int n) {
	n = max(n, 1);
	if((int)smallestPrimeFactor.size() >= n+1) return;
	smallestPrimeFactor.assign(n+1, 0);
	smallestPrimeFactor[1] = 1;
	rer(i, 2, n) if(!smallestPrimeFactor[i]) {
		smallestPrimeFactor[i] = i;
		if((ll)i * i <= n)
		for(int j = i * i; j <= n; j += i)
			if(!smallestPrimeFactor[j]) smallestPrimeFactor[j] = i;
	}
}

int main() {
	int N = 10000000;
	getSmallestPrimeFactors(N);
	vector<int> primacies(N+1, 0);
	rer(i, 1, N) {
		int x = i;
		while(x > 1) {
			++ primacies[i];
			int p = smallestPrimeFactor[x];
			do x /= p; while(x % p == 0);
		}
	}
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int A, B, K;
		scanf("%d%d%d", &A, &B, &K);
		int ans = 0;
		rer(i, A, B)
			ans += primacies[i] == K;
		printf("Case #%d: %d\n", ii+1, ans);
	}
	return 0;
}

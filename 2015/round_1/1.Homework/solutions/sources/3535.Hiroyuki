#include <cstring>
#include <string.h>
#include <fstream>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>

using namespace std;

#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz size()
#define rep(i,s,e) for (int i = int(s); i < int(e); i++)
#define repit(i,c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mem(a,b) memset(a,b,sizeof(a))
#define mp make_pair

typedef stringstream ss;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI = 2 * acos(0);
const double eps = 1e-9;

#define MAX 10000000
int dp[ MAX + 1 ];
vector<int> prime;

void makeprimetable() {

	set<int> tmp;

	for( int i = 2; i <= MAX; i++ ) {
		tmp.insert( i );
	}

	set<int>::iterator it = tmp.begin();
	do {
		dp[ (*it) ] = 1;
		for( int j = 2; (*it) * j <= MAX; j++ ) {
			tmp.erase( (*it) * j );
		}
	} while( ( it = tmp.upper_bound(*it) ) != tmp.end() );

	prime.resize(tmp.size());
	int i = 0;
	repit( itset, tmp ) {
		prime[i] = (*itset);
		i++;
	}

}

void makedp() {

	for( ll j = 0; prime[j] * prime[j] <= MAX; j++ ) {
		for( ll i = prime[j] * prime[j]; i <= MAX; i *= prime[j] ) {
			dp[i] = 1;
		}
	}

	ll tmp;
	for( int n = 2; n <= 8; n++ ) {
		int prime_prod = 1;
		for( int i = 0; i < n - 1; i++ ) {
			prime_prod *= prime[i];
		}
		for( int i = prime_prod; i <= MAX / 2; i++ ) {
			if( dp[i] == n - 1 ) {
				for( int j = 0; j < prime.size(); j++ ) {
					tmp = i * prime[j];
					if( tmp > MAX ) break;
					if( dp[tmp] != 0 ) continue;

					while( tmp <= MAX ) {
						if( dp[tmp] == 0 ) {
							dp[tmp] = n;
							tmp *= prime[j];
						}
					}

				}
			}
		}
	}

}

int solve( int A, int B, int K ) {
	int ans = 0;
	rep(i, A, B + 1) {
		if( dp[i] == K ) ans++;
	}
	/*
	for( int i = A; i <= B; i++ ) {
		int num = i;
		int primacity = 0;

		for( int j = 2; j <= num; j++ ) {
			if( num == 1 ) { break; }
			if( num % j == 0 ) {
				while( num % j == 0 ) {
					num /= j;
				}
				primacity++;
			}
			if( primacity > K ) goto end;
		}
		if( primacity == K ) ans++;
		end : ;
	}
	*/
	return ans;
}

int main(int argc, char *args[]) {

	std::ifstream fin;
	std::ofstream fout;
    if (argc == 1) {
        fin.open("homework.txt");
        fout.open("homework_output.txt");
    } else if  (argc == 2 && strcmp(args[1], "test") == 0) {
    	fin.open("homework_example_input.txt");
    	fout.open("homework_example_output.txt");
    }
    if(fin.fail()) {
    	cerr << "File do not exist.\n";
    	exit(0);
   	}

    memset(dp, 0, sizeof(dp));
    std::cout << "make prime table." << std::endl;
    makeprimetable();

    std::cout << "make dp." << std::endl;
    makedp();

    string line;
    getline( fin, line );
    int N = stoi(line);
    vector<int> results;
    results.resize(N);

    rep(n, 0, N) {
    	getline( fin, line );
    	ss strbuf( line );
    	int A, B, K;
    	strbuf >> A >> B >> K;
    	if( K > 8 ) {
    		results[n] = 0;
    	} else {
    		results[n] = solve( A, B, K );
    	}
    }

    rep(n, 0, N) {
        fout << "Case #" << n+1 << ": ";
        fout << results[n];
        fout << endl;
    }

    fin.close();
    fout.close();
    return 0;
}

#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>

using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;

#define TH 20
VVI adj;
int TAKEN[200010][TH];
int DP[200010][TH];
int dp(int u,int c){
	int m = 1000000000;
	if(DP[u][c] != -1)return DP[u][c];
	for(int cc = 1; cc < TH; ++cc){
		if(cc == c)continue;
		int s = cc;
		for(int i = 0; i < adj[u].size(); ++i){
			int v = adj[u][i];
			s += dp(v,cc);
			if(s > m)break;
		}
		if(s < m)TAKEN[u][c] = cc;
		m = min(m , s);
	}
	return DP[u][c] = m;
}

int maT;
void backtrack(int u,int c){
//	cout << u+1 << ": " << TAKEN[u][c] << endl;
	maT = max(maT , TAKEN[u][c]);
	for(int i = 0; i < adj[u].size(); ++i){
		int v = adj[u][i];
		backtrack(v , TAKEN[u][c]);
	}
	
}

short PRIM[100000010];
int main(){
	freopen("homework.txt","r",stdin);
	freopen("out.txt","w",stdout);
	for(int i = 2; i <= 10000000; ++i){
		if(PRIM[i] == 0){
			for(int j = i; j <= 100000000; j += i)
				PRIM[j]++;
		}
//		cout << i << " " << PRIM[i] << endl;
	}
	int N;
	cin >> N;
	for(int tc = 1 ; tc<=N; ++tc){
		int A, B, K, cnt=0;
		cin >> A >> B >> K;
		for(int i = A; i <= B; ++i)
			if(PRIM[i] == K)
				cnt++;
		cout << "Case #" << tc << ": "<< cnt << endl;
	}
}




/*
5
5 15 2
2 10 1
24 42 3
1000000 1000000 1
1000000 1000000 2


 */



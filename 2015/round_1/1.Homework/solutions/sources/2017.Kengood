#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <complex>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <ctime>

#include<unordered_map>
#include<unordered_set>
using namespace std;


//
#define SIZE 10000000 +1
int isprime[SIZE]={0,2};
int prime[664580] , pcnt = 0;
void genprime()
{
    int i ;
    int t1,t2;
    prime[pcnt++] = 2;

    for(i=4;i<SIZE;i+=2)
        isprime[i] = 2;
	
    for(i=3;i<=3163;i+=2){
        if( !isprime[i]){
            prime[pcnt++] = (i);
            t1 = i*i;
            t2 = i<<1;
            while( t1< SIZE)
            {
                if( !isprime[t1]) isprime[t1] = i;
                t1 +=t2;
            }
        }
    }
    //cout << i << endl;
    for(i = 3165 ;i<SIZE;i+=2)
    {
        if( !isprime[i])
        {
            prime[pcnt++] =(i);
        }
    }
    isprime[1] = 0; //!!!!! for factorize
}

int maxF = 0;
int factor(int x)
{
     int fac=0,temp=x;
	 if (!(temp&1))
	 {
		 fac++;
		 while(!(temp&1))
		 {
			 temp>>=1;
		 }
	 }

     while(isprime[temp]) //
     {
          fac++;
		  int p = isprime[temp];
		  while (temp%p==0)
			temp/=p;
     }
     if(temp!=1)fac++;

	 maxF = max(fac,maxF);
     return fac;
}

int factorCnt[SIZE];
void stupid()
{
	for (int i = 2; i < SIZE; ++i)
		factorCnt[i] = factor(i);

}

int main()
{
	genprime();
	stupid();

	int Case, cases = 0;
	cin >> Case;

	while (Case--)
	{
		int a , b , k;
		cin >> a >> b >> k;
		int ans =0;
		if (k <= maxF)
		{
			for (a; a<=b; ++a)
				if( factorCnt[a] == k )
					++ans;
		}

		printf("Case #%d: %d\n" , ++cases, ans);
	}

	return 0;
}
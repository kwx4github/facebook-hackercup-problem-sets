import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		Primacity solver = new Primacity();
		solver.solve(1, in, out);
		out.close();
	}
}

class Primacity {
    public void solve(int testNumber, InputReader in, OutputWriter out) {
        int ar[]= sieve_of_eratostenes.primefunction((int)Math.sqrt(10000001));
        int n[]=new int [10000001];
        Arrays.fill(n,0);
        for(int i=2;i<10000001;i++){
            int x=i;int k=0;
            for(int j=0;j<ar.length;j++){
                if(ar[j]>x)
                    break;
                if(x%ar[j]==0){
                    n[i]++;
                    while (x%ar[j]==0){
                        x=x/ar[j];
                    }
                }
            }
            if(x!=1){
                n[i]++;
            }
        }
        /**for(int i=0;i<=10;i++){
            System.out.println(n[i]);
        }*/
        int t=in.nextInt(),x=1;
        while (t>0){
            int a=(int)in.nextLong(),b=(int)in.nextLong(),k=(int)in.nextLong();
            int cou=0;
            for(int i=a;i<=b;i++){
                if(n[i]==k)
                    cou++;
            }
            out.printLine("Case #"+x+": "+cou);
            t--;x++;
        }
    }
}

class InputReader {
    BufferedReader in;
    StringTokenizer tokenizer=null;

    public InputReader(InputStream inputStream)
    {
        in=new BufferedReader(new InputStreamReader(inputStream));
    }
    public String next()
    {
        try{
            while (tokenizer==null||!tokenizer.hasMoreTokens())
            {
                tokenizer=new StringTokenizer(in.readLine());
            }
            return tokenizer.nextToken();
        }
        catch (IOException e)
        {
            return null;
        }
    }
    public int nextInt()
    {
        return Integer.parseInt(next());
    }
    public long nextLong()
    {
        return Long.parseLong(next());
    }
}

class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

    public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
}

class sieve_of_eratostenes {
    public static int[] primefunction(int n){
        int z=(int)(Math.ceil(((double)n)/2.0));
        int ar[]=new int [z-1],l=0,k,npc=0,c;
        for(int i=3;i<=n;i+=2){
            ar[l++]=i;}k=0;
        while(ar[k]*ar[k]<=n){
            c=k+ar[k];
            while(c<l){
                if(ar[c]!=0)
                    npc++;
                ar[c]=0;
                c=c+ar[k];
            }
            k++;
            while(ar[k]==0)
                k++;
        }
        int ar1[]=new int [z-npc];
        c=0;k=0;
        ar1[k++]=2;
        while(c<l){
            if(ar[c]!=0)
                ar1[k++]=ar[c];
            c++;
        }
        return ar1;
    }
}


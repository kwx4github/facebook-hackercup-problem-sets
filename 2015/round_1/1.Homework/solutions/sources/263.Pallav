#include<bits/stdc++.h>
using namespace std ;

#define FOR(i,a,b) for(int i= (int)a; i< (int)b; ++i)
#define REP(i,n) FOR(i,0,n)
#define fill(a, x) memset(a, x, sizeof(a))
#define all(c) c.begin(), c.end()

#define LL long long int 
#define PII pair<int,int> 
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define mod 1000000007

#define Lim 10000001
bool Prime2[Lim+1] = { false };
int primacity[Lim+1];
vector<int> Prime;

void sieve()
{
   Prime2[0] = true;
   Prime2[1] = true;
   Prime2[2] = false;
   //Prime.push_back(2);
   int m=sqrt(Lim);
   int r=0;
   for (int i=3; i<=m; i=i+2)
   {
      if (Prime2[i]==false)
      {
         //Prime.push_back(i);
         for (int k=i*i; k<=Lim; k += i+i )
         {
            Prime2[k]=true;
         }
      }
   }
   return;
} 


int main()
{
   sieve();
   Prime.push_back(2);
   for(int i=3;i<=Lim;i+=2)
   {   
      if(Prime2[i]==false)
         Prime.push_back(i);
   }
   primacity[0] = 0;
   primacity[1] = 0;
   primacity[2] = 1;
   primacity[3] = 1;

   int N = Prime.size();
   for(int i=4;i<Lim;i++) {
      int k = i;
      primacity[i] = 0;
      if(Prime2[i]==false && (i%2!=0) ) {
         primacity[i]=1;
         continue;
      }
      for(int j=0;j<N;j++) {
         if(k==1) break;
         if((k%Prime[j]) == 0) {
            while((k%Prime[j])==0) {
               k /= Prime[j];
            }
            primacity[i] = primacity[k] + 1;
            break;
         }
      }
   }

   int T; cin>>T;
   int test=1;

   while(T--) {
      int A,B,K; cin>>A>>B>>K;
      int sol = 0;
      for(int i=A;i<=B;i++) {
         if(primacity[i]==K) sol++;
      }
      cout << "Case #" << test << ": ";
      cout << sol << endl;
      test++;
   }
   return 0;
}


#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

using namespace std;

int LIMIT =  10000100;
vector< int > primes;

void genprimes() {
    int sqrtlimit = ceil(sqrt(LIMIT)+1);
    vector< bool > isprimes (LIMIT, true);
    isprimes[0] = false;
    isprimes[1] = false;
    for (int ii = 2; ii<sqrtlimit; ii++) {
        if (isprimes[ii] == true) {
            primes.push_back(ii);
            for (int jj=ii*2; jj<LIMIT; jj+= ii) {
                isprimes[jj] = false;
            }
        }
    }
}

int main() {

    // gen ans //
    genprimes();
    // gen primacity //
    vector< int > primacity(LIMIT, 0);
    
    for (int ii=2; ii<=LIMIT; ii++) {
        for (int jj=0; jj<primes.size(); jj++) {
            if (primes[jj] > ii) {
                break;
            }
            if (ii % primes[jj] == 0) {
                primacity[ii] += 1;
            }
        }
    }
    
    int T;
    cin >> T;
    for (int tt=0; tt<T; tt++) {
        int A, B, K;
        cin >> A >> B >> K;
        int ans = 0;
        for (int ii=A; ii<=B; ii++) {
            if (primacity[ii] == K) {
                ans += 1;
            }
        }
        cout << "Case #" << tt+1 << ": " << ans << "\n";
    }
    return 0;
}

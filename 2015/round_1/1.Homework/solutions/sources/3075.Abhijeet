import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author abhijeet.pa
 */
class KPRIME {

    private static int maxlimit = 10000001;
    private static boolean[] isPrime = new boolean[maxlimit];
    private static int[] noPrime = new int[maxlimit];
    static Map map[] = new HashMap[9];

    public static void findPrimes() {
        Arrays.fill(isPrime, true);
        Arrays.fill(noPrime, 0);
        isPrime[0] = isPrime[1] = false;
        for (int i = 2; i * i <= maxlimit; i++) {
            if (isPrime[i]) {
                for (int j = 1; i * j < maxlimit; j++) {
                    if(j>=i)
                    {
                        isPrime[i * j] = false;
                    }
                    noPrime[i * j]++;
                }
            }
        }

        
        for(int i = (int) Math.ceil(Math.sqrt((double) maxlimit)); i<maxlimit; i++){
            if(isPrime[i]){
                for (int j = 1; i * j < maxlimit; j++) {
                        noPrime[i * j]++;
                }
            }
        }
    }

    public static void createMaps() {
        for (int i = 2; i < maxlimit; i++) {
            if (map[noPrime[i]] == null) {
                map[noPrime[i]] = new HashMap<Integer, Integer>();
            }
            map[noPrime[i]].put(i, map[noPrime[i]].size() + 1);
        }
    }

    public static void main(String args[]) throws IOException {
        findPrimes();
        createMaps();
        FastScanner s = new FastScanner(System.in);

        int T = s.nextInt();
        for(int tt = 1; tt <=T; tt++) {
            int A = s.nextInt();
            int B = s.nextInt();
            int K = s.nextInt();
            int count = 0;
            int start = 0;
            int end = 0;

            for (int i = A; i <= B; i++) {
                if (map[K].containsKey(i)) {
                    start = (Integer) map[K].get(i);
                    break;
                }
            }

            for (int i = B; i >= A; i--) {
                if (map[K].containsKey(i)) {
                    end = (Integer) map[K].get(i);
                    break;
                }
            }

            if (end == 0) {
                count = 0;
            } else {
                count = end - start + 1;
            }
            System.out.println("Case #"+tt+": "+count);
        }
    }
}

class FastScanner {

    InputStream is;
    byte buff[] = new byte[1024];
    int currentChar = -1;
    int buffChars = 0;

    public FastScanner(InputStream inputStream) {
        is = inputStream;
    }

    public boolean hasNext() throws IOException {
        return buffChars >= 0;
    }

    public int nextChar() throws IOException {
        //if we already have that next char read, just return else input
        if (currentChar == -1 || currentChar >= buffChars) {
            currentChar = 0;
            buffChars = is.read(buff);
        }

        if (buffChars <= 0) {
            return -1;
        }

        return (char) buff[currentChar++];
    }

    public String nextString() throws IOException {
        StringBuilder bldr = new StringBuilder();
        int ch;
        while (isSpace(ch = nextChar()));

        do {
            bldr.append((char) ch);
        } while (!isSpace(ch = nextChar()));

        return bldr.toString();
    }

    public int nextInt() throws IOException {
        //considering ASCII files--> 8 bit chars,     unicode files has 16 bit chars (byte1 then byte2)
        int result = 0;
        int sign = 1;
        int ch;
        while (isSpace(ch = nextChar()));

        if (ch == '-') {
            sign = -1;
            ch = nextChar();
        }

        do {
            if (ch < '0' || ch > '9') {
                throw new NumberFormatException("Found '" + ch + "' while parsing for int.");
            }

            result *= 10;
            result += ch - '0';
        } while (!isSpace(ch = nextChar()));

        return sign * result;
    }

    public long nextLong() throws IOException {
        //considering ASCII files--> 8 bit chars,     unicode files has 16 bit chars (byte1 then byte2)
        long result = 0;
        int sign = 1;
        int ch;
        while (isSpace(ch = nextChar()));

        if (ch == '-') {
            sign = -1;
            ch = nextChar();
        }

        do {
            if (ch < '0' || ch > '9') {
                throw new NumberFormatException("Found '" + ch + "' while parsing for int.");
            }

            result *= 10;
            result += ch - '0';
        } while (!isSpace(ch = nextChar()));

        return sign * result;
    }

    private boolean isSpace(int ch) {
        return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r' || ch == -1;
    }

    public void close() throws IOException {
        is.close();
    }
}

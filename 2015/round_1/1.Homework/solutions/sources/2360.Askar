// Dark Side of Elephant
// Askar

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <algorithm>
#include <utility>
#include <tuple>
#include <complex>
#include <cmath>
#include <sys/types.h>
#include <unistd.h>
#include <cassert>

using namespace std;

#define FOR(i, N) for(auto i=(N)-(N); i<(N); i++)
#define FOR1(i, N) for(auto i=(N)-(N)+1; i<=(N); i++)
#define FOREACH(it, a) for(auto it=(a).begin(); it!=(a).end(); it++)
#define MAXIM(a,b) a=max(a, static_cast<__typeof__(a)>(b))
#define MINIM(a,b) a=min(a, static_cast<__typeof__(a)>(b))
#define beginend(a) (a).begin(), (a).end()
#define pf printf
#define sf scanf
#define mp make_pair
#define mt make_tuple
#define pass
#define sqr(x) ((x)*(x))
typedef long long ll;
typedef pair<long long, long long> pll;
typedef pair<int, int> pii;
const long long INF = 1e9;
const double EPS = 1e-9;

#define dbg if(false)
#ifdef EBUG
    #undef dbg
    #define dbg if(true)
#endif

#define epf(...) fprintf(stderr, __VA_ARGS__)
#define dpf(...) dbg epf(__VA_ARGS__)
#define db(x) dbg cerr << #x << ":\t" << (x) << endl 

const int threshold = 10*1000*1000;
//const int threshold = 100;

int main(){
    // eratosten to 10*1000*1000
    vector<int> primacity(threshold + 1, 0);
    vector<int> primes(1, 2);
    
    int last_checked = 2;

    for(int i = 0; i < primes.size(); i++){
        const int prime = primes[i];
        for(int j = prime; j <= threshold; j += prime){
            primacity[j] += 1;
        }

        for(last_checked += 1; last_checked <= threshold && (primes.size() == i+1 || last_checked <= primes[i+1]); last_checked++){
            if(primacity[last_checked] == 0){
                primes.push_back(last_checked);
            }
        }
    }
    
    int T;
    sf(" %i", &T);
    FOR1(case_number, T){
        int A, B, K;
        sf(" %i %i %i", &A, &B, &K);
        
        int ans = 0;

        for(int i = A; i <= B; i++){
           if(primacity[i] == K) ans++; 
        }
        pf("Case #%i: %i\n", case_number, ans);
    }

}

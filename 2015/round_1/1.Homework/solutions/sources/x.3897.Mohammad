#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <sstream>
#include <string>
#include <set>
#include <stack>
#include <memory.h>
#include<queue>
#include <math.h>
#include <map>
using namespace std;
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORj(J,N) for(int(j)=0;i<int(N);++j)
typedef vector<int> vec;
typedef vector<vector<int> > graph;
#define pyes() printf("YES\n");
#define pno() printf("NO\n");
#define filla(x,y) memset(x,y,sizeof(x));
#define p1(x) printf("%d\n",x);
#define in1(x) scanf("%d",&x);
#define in2(x,y) scanf("%d %d",&x,&y);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define p2(x,y) printf("%d %d\n",x,y);
bool notprime[10000001];
void sieve() {
	for (int i = 2; i < 10000; i++) {
		if (!notprime[i]) {
			for (int j = i * i; j < 10000001; j += i) {
				notprime[j]=1;
			}
		}
	}
}
vec prime;
void fillp(){
	for(int i=3;i<10000001;i+=2){
		if(!notprime[i]){
			prime.push_back(i);
		}
	}
}
vector <vector<int> > pdiv;
void filldiv(){
	for(int i=0;i<(signed)prime.size();i++){
		for(int j=1;prime[i]*j<10000000;j++){
			pdiv[prime[i]*j].push_back(prime[i]);
		}
	}
}
int main() {
    freopen("A.txt","rt",stdin);
    freopen("B.txt","wt",stdout);
	pdiv.resize(10000001);
	prime.push_back(2);
	sieve();
	fillp();
	filldiv();
	int t;
	in1(t);
	for(int i=1;i<=t;i++){
		int a,b,k;
		in3(a,b,k);
		int c=0;
		for(int j=a;j<=b;j++){
			if((signed)pdiv[j].size()==k)
				c++;
		}
		printf("Case #%d: %d\n",i,c);
	}
	return 0;
}

#include <iostream>
#include <algorithm>
#include <cstring>
#include <cassert>
using namespace std;

#define MAXN 10000000

int sieve[MAXN + 1];
int primacity[8][MAXN + 1];

int main()
{
    memset(sieve, 0, sizeof(sieve));
    for (int i = 2; i <= MAXN; i++)
        if (sieve[i] == 0)
        {
            for (int j = i; j <= MAXN / i; j++)
                sieve[i * j] = i;
        }
    memset(primacity, 0, sizeof(primacity));
    for (int i = 2; i <= MAXN; i++)
    {
        int factors[30];
        int cnt = 0;
        
        int s = i;
        while (sieve[s])
        {
            factors[cnt++] = sieve[s];
            s /= sieve[s];
        }
        if (s != 1)
            factors[cnt++] = s;
        
        sort(factors, factors + cnt);
        cnt = unique(factors, factors + cnt) - factors;
        
        assert(cnt <= 8);
        
        for (int j = 0; j < 8; j++)
            primacity[j][i] = primacity[j][i - 1];
        primacity[cnt - 1][i]++;
    }
    
    int case_n;
    cin >> case_n;
    for (int case_i = 1; case_i <= case_n; case_i++)
    {
        int a, b, k;
        cin >> a >> b >> k;
        
        int ans;
        if (k > 8)
            ans = 0;
        else
            ans = primacity[k - 1][b] - primacity[k - 1][a - 1];
            
        cout << "Case #" << case_i << ": " << ans << endl;
    }
    
    return 0;
}
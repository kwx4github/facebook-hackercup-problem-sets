#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <deque>
#include <fstream>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <iomanip>
#include <climits>
#include <bitset>

using namespace std;

typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef long long ll;
typedef unsigned long long ull;

#define INF 1e9
#define EPS 1e-9
#define PI acos(-1.0)
#define MOD 1000000007

int T, A, B, c = 1;
ll _sieve_size, primacity[10000010], K;
bitset<10000010> bs;   // 10^7 should be enough for most cases
vi primes;   // compact list of primes in form of vector<int>

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
	_sieve_size = upperbound + 1;                   // add 1 to include upperbound
	bs.set();                                                 // set all bits to 1
	bs[0] = bs[1] = 0;                                     // except index 0 and 1
	for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
		// cross out multiples of i starting from i * i!
		for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
		primes.push_back((int)i);  // also add this vector containing list of primes
	}
}     

ll numDiffPF(ll N) {
	ll PF_idx = 0, PF = primes[PF_idx], ans = 0;
	while (N != 1 && (PF * PF <= N)) {
		if (N % PF == 0) ans++;                           // count this pf only once
		while (N % PF == 0) N /= PF;
		PF = primes[++PF_idx];
	}
	if (N != 1) ans++;
	return ans;
}

int main() {		
	// open files
	freopen("homework.txt","r",stdin);
    freopen("homework_output.txt","w",stdout);	
		
	
	//clock_t start;
	//double duration;
    //start = std::clock();
	sieve(10000000);
	//duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
	//printf("Time to compute primes:  %llf\n", duration);
	//start = std::clock();
	for(int i = 2; i <= 10000000; i++)
		primacity[i] = numDiffPF(i);
	//duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
	//printf("Time to compute primacity:  %llf\n", duration);
	/*start = std::clock();
	for(int i = 0; i < 100; i++) {
		int xx = 0;
		for(int j = 2; j <= 10000000; j++)
			if(primacity[j] == 4) xx++;
	}
	duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
	printf("Time to test worst case:  %llf\n", duration);*/	

	fscanf(stdin, "%d", &T);
	while(T--) {
		fscanf(stdin, "%d %d %lld", &A, &B, &K);
		ll result = 0;
		for(int i = A; i <= B; i++)
			if(primacity[i] == K) result++;
		fprintf(stdout, "Case #%d: %lld\n", c++, result);
	}
		

	//system ("pause");
	return 0;
}
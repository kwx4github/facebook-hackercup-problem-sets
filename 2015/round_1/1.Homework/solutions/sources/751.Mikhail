#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

template<class T>
bool uin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

const int MAXN = 11000000;

int minp[MAXN];
int pc[MAXN];
int spc[9][MAXN];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    vi p;
    forn(i, MAXN) minp[i] = i;
    for (int i = 2; i < MAXN; ++i) {
        if (i == minp[i]) p.pb(i);
        for (size_t j = 0; j < p.size() && p[j] <= minp[i] && p[j] * i < MAXN; ++j) {
            minp[i * p[j]] = p[j];
        }
    }
    pc[1] = 0;
    for (int i = 2; i < MAXN; ++i) {
        if (minp[i] == minp[i / minp[i]]) pc[i] = pc[i / minp[i]];
        else pc[i] = pc[i / minp[i]] + 1;
    }
    forn(k, 9) for1(i, MAXN) {
        spc[k][i] = spc[k][i - 1];
        if (pc[i] == k) ++spc[k][i];
    }

    int T;
    cin >> T;
    for1(t, T) {
        int a, b, k;
        cin >> a >> b >> k;
        cout << "Case #" << t << ": ";
        if (k > 8) cout << 0;
        else cout << spc[k][b] - spc[k][a - 1];
        cout << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}

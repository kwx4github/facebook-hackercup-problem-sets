//c++ standard libraries
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
//#include <ios_base>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <string>
#include <typeinfo>
#include <utility>
#include <vector>
#include <limits>

//c standard libraries
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h> 
#include <limits.h>
#include <locale.h> 
#include <math.h> 
#include <setjmp.h>
#include <signal.h> 
#include <stdarg.h> 
#include <stddef.h> 
#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
#include <time.h>



std::vector<int> generatePrimes()
{
	std::vector<int> result;
	std::vector<int> isPrime(10000000 + 1, 1);
	int mx = static_cast<int>(sqrt(10000000.0)) + 1;
	for (int i = 2; i <= mx; ++i)
	{
		if (isPrime[i])
		{
			for (int j = i * i; j <= 10000000; j += i)
				isPrime[j] = 0;
		}
	}

	for (int i = 2; i <= 10000000; ++i)
	{
		if (isPrime[i])
			result.push_back(i);
	}

	return result;
}

int getPrimacity(int n, const std::vector<int>& primes)
{
	if (std::binary_search(primes.begin(), primes.end(), n))
		return 1;

	size_t len = primes.size();
	int cnt = 0;
	size_t index = 0;
	int mx = static_cast<int>(sqrt(n * 1.0)) + 1;
	while (n > 1 && primes[index] <= mx)
	{
		if (n % primes[index] == 0)
		{
			++cnt;
			while (n % primes[index] == 0)
				n /= primes[index];
		}
		++index;
	}

	if (n > 1)
		++cnt;

	return cnt;
}


void homework()
{
	std::vector<int> primes = generatePrimes();
	std::vector<int> primacity(10000000 + 1);
	for (int i = 2; i <= 10000000; ++i)
		primacity[i] = getPrimacity(i, primes);

	std::vector<std::vector<int> > memo(10, std::vector<int>(10000000 + 1, 0));
	for (int i = 1; i <= 8; ++i)
		for (int j = 2; j <= 10000000; ++j)
		{
			memo[i][j] = memo[i][j - 1];
			if (primacity[j] == i)
				++memo[i][j];
		}

	int T, A, B, K;
	std::cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		std::cin >> A >> B >> K;
		std::cout << "Case #" << t << ": ";
		if (K > 8)
			std::cout << 0 << "\n";
		else
			std::cout << memo[K][B] - memo[K][A - 1] << "\n";
	}
}


int main()
{
	freopen("homework.txt", "r", stdin);
	freopen("homework_output.txt", "w", stdout);	

	homework();
}

import sys


def main(namein, nameout):
    filein = open(namein, 'r')
    fileout = open(nameout, 'w')
    primacity_dict = gen_primacity(2, 10000001)
    t = int(filein.readline())
    for i in range(t):
        params = filein.readline().split()
        a = int(params[0])
        b = int(params[1])
        k = int(params[2])
        sol = solve(a, b, k, primacity_dict)
        solstring = "Case #{0}: {1}\n".format(i+1, sol)
        fileout.write(solstring)
    fileout.close()

def solve(a, b, k, primacity_dict):
    counter = 0
    for n in range(a, b+1):
        if get_primacity(primacity_dict, n) == k:
            counter = counter + 1
    return counter

def gen_primacity(floor, ceil):
    primacity_dict = dict()
    primacity_dict[1] = (0, 0, None, True)
    while floor <= ceil:
        # check if prime
        if primacity_dict.get(floor) != None:
            floor = floor+1
            continue
        n = floor
        while n <= ceil:
            if primacity_dict.get(n) == None:
                div_square = (n % (floor * floor)) == 0
                primacity_dict[n] = (0, 0 if div_square else 1, n / floor, False)
            n = n + floor
    return primacity_dict

def get_primacity(primacity_dict, num):
    if primacity_dict[num] == None:
        return None
    primacity, add, back_pointer, primacity_valid = primacity_dict[num]
    if primacity_valid:
        return primacity
    pred_primacity = get_primacity(primacity_dict, back_pointer)
    primacity_dict[num] = (pred_primacity+add, add, back_pointer, True)
    return pred_primacity+add

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])

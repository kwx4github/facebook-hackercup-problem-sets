#include <algorithm>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAXVAL = 10000000+5;
int D[MAXVAL+1];
int primacity[MAXVAL+1];
vector<int> primes;
int main() {
    for (int i=2; i<=MAXVAL; ++i) {
        if (D[i] == 0) {
            D[i] = i;
            primes.push_back(i);
        }
        for (int j=0; j<(int)primes.size() && primes[j]<=D[i] && primes[j]<=MAXVAL/i; ++j) {
            D[primes[j]*i] = primes[j];
        }
    }
    int maxpty = 0;
    for (int i=2; i<=MAXVAL; ++i) {
        int x = i;
        int pty = 0;
        while (x > 1) {
            int d = D[x];
            ++pty;
            do {
                x /= d;
            } while (x%d == 0);
        }
        primacity[i] = pty;
        maxpty = max(maxpty, pty);
    }

    vector<vector<int>> ptysum(MAXVAL+1, vector<int>(maxpty, 0));
    for (int i=2; i<=MAXVAL; ++i) {
        ptysum[i] = ptysum[i-1];
        ++ptysum[i][primacity[i]-1];
    }

    int T;
    cin >> T;
    for (int i=1; i<=T; ++i) {
        int A, B, K;
        cin >> A >> B >> K;
        cout << "Case #" << i << ": ";
        if (K > maxpty) {
            cout << 0;
        } else {
            cout << ptysum[B][K-1] - ptysum[A-1][K-1];
        }
        cout << '\n';
    }
}

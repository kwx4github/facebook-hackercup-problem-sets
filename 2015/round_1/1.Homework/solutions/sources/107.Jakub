import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Homework {
    private static int MAX = 10000001;
    private int primacy[] = new int[MAX];
    private boolean complex[] = new boolean[MAX];

    public Homework() {
        for (int p = 2; p < MAX; p++) {
            if (complex[p]) continue;
            primacy[p]= 1;
            for (int v = 2 * p; v < MAX; v += p) {
                complex[v] = true;
                primacy[v]++;
            }
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int A = in.nextInt();
        int B = in.nextInt();
        int K = in.nextInt();
        int cnt = 0;
        for (int i = A; i <= B; i++) {
            if (primacy[i] == K) cnt++;
        }
        out.println("Case #" + testNumber + ": " + cnt);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


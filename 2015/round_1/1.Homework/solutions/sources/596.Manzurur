#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <list>
#include <queue>
using namespace std;

#define rep(i,N) for((i) = 0; (i) < (N); (i)++)
#define rab(i,a,b) for((i) = (a); (i) <= (b); (i)++)
#define Fi(N) rep(i,N)
#define Fj(N) rep(j,N)
#define Fk(N) rep(k,N)
#define sz(v) (v).size()
#define all(v) (v).begin(),(v).end()

#define MAXPRIME 10000000

int primacity[10000001];

vector <int> pmap[10000];

int get_primes(int A, int B, int K) {
	if (K >= 10000) return 0;

	vector<int>::iterator b = lower_bound(all(pmap[K]), A);
	vector<int>::iterator e = upper_bound(all(pmap[K]), B) - 1;

	return e - b + 1;
}

int main() {
	int i,j,N,cs;

	for(i = 2; i <= MAXPRIME; i++) {
		if (primacity[i] == 0) {
			primacity[i] = 1;

			for(j = 2 * i; j <= MAXPRIME; j += i) {
				primacity[j]++;
			}
		}
	}

	for(i = 2; i <= MAXPRIME; i++) {
		pmap[primacity[i]].push_back(i);
	}

	scanf("%d",&N);

	int A,B,K;

	rab(cs,1,N) {
		scanf("%d %d %d",&A,&B,&K);

		printf("Case #%d: %d\n",cs,get_primes(A,B,K));
	}

	return 0;
}

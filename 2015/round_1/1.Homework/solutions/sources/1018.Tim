#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

#define N 10000000

bool not_prime[N+1] = {0};
vector<int> primes;
map<int, vector<int>> primacity_to_num;

int mx = 0;
int divide(const int n) {
  static int table[N+1];
  if (n == 0 || n == 1) {
    return 0;
  }
  if (!not_prime[n]) {
    return 1;
  }
  if (table[n] == 0) {
    int m = n;
    for (auto prime : primes) {
      if (m == 1) {
        break;
      }
      if (m % prime == 0) {
        while (m % prime == 0) {
          m /= prime;
        }
        table[n] = divide(m) + 1;
        break;
      }
    }
  }
  return table[n];
}

void init() {
  for (int i = 2; i <= N; i++) {
    if (!not_prime[i]) {
      for (int j = i+i; j <= N; j += i) {
        not_prime[j] = true;
      }
      primes.push_back(i);
    }
  }
  for (int i = 2; i <= N; i++) {
    primacity_to_num[divide(i)].push_back(i);
  }
  for (auto& it : primacity_to_num) {
    sort(it.second.begin(), it.second.end());
  }
}

int main() {
  init();
  int t;
  cin >> t;
  for (int ca = 1; ca <= t; ca++) {
    int a, b, k;
    cin >> a >> b >> k;
    int ans = 0;
    if (primacity_to_num.count(k) > 0) {
      auto& v = primacity_to_num[k];
      auto begin = lower_bound(v.begin(), v.end(), a);
      auto end = upper_bound(v.begin(), v.end(), b);
      ans = end - begin;
    }
    cout << "Case #" << ca << ": " << ans << "\n";
  }

  return 0;
}

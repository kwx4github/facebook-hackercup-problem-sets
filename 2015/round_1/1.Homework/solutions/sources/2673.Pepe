//============================================================================
// Name        : coinsgame.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <math.h>
using namespace std;

std::vector<int> primes;
std::map<int, int> primacityMap;
std::map<int, std::map<int, int>> primacityTable;

int getTestCases();
int getPrimacity(int i, int j, int n);
void createPrimes();

int main() {
	int tCases, i = 0;
	int from, to, p;

	createPrimes();
	tCases = getTestCases();
	while (i++ < tCases) {
		int result;
		string input;
		getline(cin, input);
		stringstream ss;
		ss.str(input);
		ss >> from;
		ss >> to;
		ss >> p;

		if (primacityTable.count(p) > 0) {
			int fOpen = 0, fClose = 0;
			while (from <= to) {
				if (primacityMap[from] == p) {
					fOpen = primacityTable[p][from] - 1;
					break;
				}
				from++;
			}
			while (to >= from) {
				if (primacityMap[to] == p) {
					fClose = primacityTable[p][to];
					break;
				}
				to--;
			}
			result = fClose - fOpen;
		} else {
			result = 0;
		}
		cout << "Case #" << i << ": " << result << endl;
	}
	return 0;
}

int getPrimacity(int i, int j = 0, int n = 0) {
	if (i == 1 || primes[j] > i) {
		primacityMap[i] = n;
		return n;
	}
	if (primacityMap[i] > 0) {
		return n + primacityMap[i];
	}
	if (i % primes[j] == 0) {
		i = i / primes[j];
		if (i % primes[j] != 0) {
			n++;
			j++;
		}
	} else {
		j++;
	}
	return getPrimacity(i, j, n);
}

int getTestCases() {
	string input;
	int r;
	stringstream ss;

	getline(cin, input);
	ss.str(input);
	ss >> r;
	return r;
}

void createPrimes() {
	primes.push_back(2);
	primacityMap[1] = 0;
	primacityMap[2] = 1;
	primacityTable[0][1] = 0;
	for (int i = 3; i <= 10000000; i++) {
		bool prime = true;
		for (int j = 0; j < primes.size() && primes[j] * primes[j] <= i; j++) {
			if (i % primes[j] == 0) {
				prime = false;
				break;
			}
		}
		if (prime) {
			primes.push_back(i);
			primacityMap[i] = 1;
			primacityTable[1][i] = primacityTable[1].size();
		} else {
			int pri = getPrimacity(i);
			primacityMap[i] = pri;
			primacityTable[pri][i] = primacityTable[pri].size();
		}
	}
}

#if 1
#include <iostream>
#include <vector>
#include <string>
#include <deque>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <locale>

using namespace std;

#define PROBLEM "problem"
typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> pii;
#define X first 
#define Y second 

const int INF = 1000 * 1000 * 1000;
const LL INF64 = 1LL * INF * INF;
const LL mod = INF + 7;

vector<bool> ert;
vector<int>  primes;
vector<int>  primess;

void ertclc(int x) {
	ert.resize(x+1);
	primes.resize(x+1);
	primess.resize(x+1);

	for (int i = 0; i <= x; ++i) {
		ert[i] = true;
		primes[i] = i;
		primess[i] = -1;
	}

	ert[0] = false;
	ert[1] = false;

	for (int i = 2; i*i <= x; ++i) {

		if (ert[i]) {

			for (int j = i*i; j <= x; j += i) {
				ert[j] = false;
				if (primes[j] == j) {
					primes[j] = i;
				}
			}
		}
	}
}

int prime_cnt(int a) {
	if (primess[a] == -1) {
		int ans = 0;
		int bc = 1;

		while (a != 1) {
			if (bc != primes[a]) {
				bc = primes[a];
				ans++;
			}
			a /= primes[a];
		}

		primess[a] = ans;
	}

	return primess[a];
}

void solve()
{
	ertclc(10000*1000);

	int T;
	cin >> T;

	vector<long long> pr[10];
	for (int i = 0; i < 10; ++i) {
		pr[i].resize(10000000);
		int as = 0;
		pr[i][1] = 0;

		for (int j = 2; j <= 10000000; ++j) {
			int c = prime_cnt(j);

			if (c == (i+1)) {
				as++;
			}

			pr[i][j] = as;
		}
	}

	for (int i = 0; i < T; ++i) {
		int a, b, c;
		cin >> a >> b >> c;
		int ans = 0;
		if (c < 10) {
			ans = pr[c-1][b] - pr[c-1][a-1];
		}

		/*
		for (int j = a; j <= b; ++j) {
			if (c == prime_cnt(j)) {
				++ans;
			}
		}
		*/

		cout << "Case #" << i+1 << ": " << ans << endl;
	}
}

int main()
{
	//(PROBLEM".in", "r", stdin); freopen(PROBLEM".out", "w", stdout);
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

	cout.sync_with_stdio(false);
	//cout.precision(10);
	//cout.setf(ios::fixed);
	solve();

	return 0;
}
#endif
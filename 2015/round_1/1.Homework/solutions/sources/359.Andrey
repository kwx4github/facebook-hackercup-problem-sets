#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cassert>
#include <queue>

using namespace std;

const long long INF = 1e9;
const int MAXA = 1e7 + 99;

vector<int> sieve(MAXA);

vector<int> generatePrimes(int upper_bound) {

    vector<int> primes;
    for (int i = 2; i < upper_bound; ++i) {
        if (sieve[i] == 0) {
            primes.push_back(i);
            for (int j = i; j < upper_bound; j += i) {
                ++sieve[j];
            }
        }
    }

    return primes;
}

vector<int> primes;

struct Solver {
    Solver()
    { }

    void readInput() {
        cin >> A >> B;
        cin >> K;
    }

    string solve() {
        int answer = 0;

        for (int i = A; i <= B; ++i) {
            if (sieve[i] == K) {
                ++answer;
            }

            /*
            int k = 0;
            for (auto p : primes) {
                if (p > i) {
                    break;
                }
                if (i % p == 0) {
                    ++k;
                }
            }
            if (k == K) {
                ++answer;
            }

            if (i % 10000 == 0) {
                cerr << i << endl;
            }
            if (sieve[i] != k) {
                cerr << "FAIL!" << endl;
                cerr << i << " " << sieve[i] << " " << k << endl;
            }
            */
        }

        return to_string(answer);
    }

    int A, B, K;
};

struct Test {
    Test()
    { }

    bool answer;
};

int main() {
    //freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("homework.txt", "r", stdin);
    //freopen("laser_maze.out.txt", "w", stdout);
    
    primes = generatePrimes(MAXA);
    //cerr << primes.size() << endl;
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        Solver solver;
        solver.readInput();
        string answer = solver.solve();
        cout << "Case #" << (t + 1) << ": " << answer << endl;
    }

    return 0;
}

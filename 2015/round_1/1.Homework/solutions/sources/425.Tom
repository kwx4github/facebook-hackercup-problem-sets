import bisect
import sys

debug = False
inp = sys.stdin if not debug else open("in")

def readline():
    return inp.readline().rstrip()

def primacity(n):
    i = 2
    count = 0
    while i*i <= n:
        if n % i == 0:
            count += 1
            while n % i == 0:
                n /= i
        i += 1
    if n > 1:
        count += 1
    return count

def brute_solver(a, b, k):
    count = 0
    for i in xrange(a, b + 1):
        if primacity(i) == k:
            count += 1
    return count

def count_in_range(l, a, b):
    return bisect.bisect_right(l, b) - bisect.bisect_left(l, a)

def build():
    n = 10**7
    primacities = [0 for i in xrange(n+1)]
    for i in xrange(2, n+1):
        if primacities[i] == 0:
            j = i
            while j <= n:
                primacities[j] += 1
                j += i
    d = {}
    for i in xrange(2, n+1):
        d.setdefault(primacities[i], []).append(i)
    return d

def solve(a, b, k):
    return count_in_range(cache.get(k, []), a, b)

def main():
    global cache
    cache = build()
    ts = int(readline())
    for t in xrange(ts):
        a, b, k = map(int, readline().split())
        print "Case #%d: %d" % (t+1, solve(a, b, k))

if __name__ == "__main__":
    main()

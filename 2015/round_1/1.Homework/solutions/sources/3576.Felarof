import java.io.*;
import java.util.*;
import java.lang.*;

public class Homework{
    int primacity[];
    boolean debug;

    Homework( boolean debug ){
	this.debug = debug;
	primacity = new int[ 10000001 ];
	primacity[0] = 0;
	primacity[1] = 1;
	primacity[2] = 1;
	primacity[3] = 1;
	init();
    }
    public int result( int a, int b, int k ){
	int count=0;
	//System.out.println( "k: " + k );
	for( int i=a; i<=b; i++ ){
	    //System.out.println( "i: " + i + " " + primacity[i] );
	    if( primacity[i] == k ) ++count;
	}
	return count;
    }
    private void init(){
	for( int i=4; i<=10000000; i++ ){
	    if( primacity[i] == 0 ) fill_primacity( i );
	    if( debug ) System.out.println( "" + i + ": " + primacity[i] );
	}
    }
    private void fill_primacity( int actual_n ){
	//Here starts the algo to find primacity
	int count=0;
	int n = actual_n;
	
	// n is even
	if( n%2 == 0 ){
	    while( n%2 == 0 ){
		if( primacity[n] != 0 ){
		    primacity[actual_n] = primacity[n];
		    return;
		}
		n=n/2;
	    }
	    count++;
	}
	
	// n is prime or odd composite
	for( int i=3; i< (int) Math.sqrt(n) + 1; i=i+2 ){

	    // if n%i==0, i is prime
	    if( n%i == 0 ){
		if( primacity[i] == 0 ) primacity[i] = 1;
		while( n%i == 0 ){
		    if( primacity[n] == 1){
			if( n%i==0 )
			    primacity[actual_n] = count + 1;
			else
			    primacity[actual_n] = count + 2;
			return;
		    }
		    n = n/i;
		}
		count++;
	    }
	}

	if( n > 2 )
	    count++;

	primacity[actual_n] = count;
    }
}

class HomeworkTest{
    static boolean debug = false;
    public static void main( String args[] ) throws IOException {
	BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );
	StringTokenizer st;

	int t, a, b, k;
	t = Integer.parseInt( br.readLine() );

	Homework hw = new Homework( debug );
	if( !debug )
	    for( int i=1; i<=t; i++ ){
		st = new StringTokenizer( br.readLine() );
		a = Integer.parseInt( st.nextToken() );
		b = Integer.parseInt( st.nextToken() );
		k = Integer.parseInt( st.nextToken() );
		System.out.println( "Case #" + i + ": " +  hw.result( a, b, k ) );
	    }
    }
}

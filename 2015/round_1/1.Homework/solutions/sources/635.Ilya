#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <ctime>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <list>
#include <stack>
#include <bitset>
#include <algorithm>
#include <iomanip>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define x first
#define y second

template<typename X> inline X abs(const X& a) { return a < 0 ? -a : a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const ld PI = acosl(ld(-1));

const int N = 10 * 1000 * 1000 + 13;
int l, r, k;

inline bool read()
{
	if (scanf ("%d%d%d", &l, &r, &k) != 3)
		return false;

	return true;
}

int a[9][N];
int sa[9][N];

inline void precalc ()
{
	for (int i = 2; i < N; i++)
	{
		int cnt = 0;
		int n = i;
		for (int j = 2; j * j <= n; j++)
		{
			if (n % j != 0)
				continue;

			cnt++;

			while (n % j == 0)
				n /= j;
		}

		if (n > 1)
			cnt++;

		a[cnt][i] = 1;
	}

	forn (i, 9)
		for (int j = 1; j < N; j++)
			sa[i][j] = sa[i][j - 1] + a[i][j];
}

inline void solve()
{
	if (k > 8)
		puts("0");
	else
		printf ("%d\n", sa[k][r] - sa[k][l - 1]);
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "r", stdin));
	assert(freopen("output.txt", "w", stdout));
#endif

	cout << setprecision(25) << fixed;
	cerr << setprecision(10) << fixed;

	precalc();

	srand(int(time(NULL)));

	int testCnt;
	assert(scanf ("%d", &testCnt) == 1);

	forn (test, testCnt)
	{
		printf ("Case #%d: ", test + 1);
		assert(read());
		solve();
	}

#ifdef SU2_PROJ
	cerr << "TIME: " << clock() << endl;
#endif

	return 0;
}

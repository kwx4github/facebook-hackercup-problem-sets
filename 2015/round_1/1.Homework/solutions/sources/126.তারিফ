#include <bits/stdc++.h>

using namespace std ; 

#define vi vector<int>
#define vvi vector<vi >
vvi res ; 

int num[ 10000007 ] ; 
int cnt[ 10000007 ] ; 

void process() {
	int lim = sqrt( 10000000 ) ;
	
	lim ++ ; 
	
	for( int i = 2 ; i <= lim ; i ++ ) {
		if( num[ i ] == i ) {
			cnt[ i ] = 1 ; 
			
			long long tmp = i ;
			tmp = 2 * tmp ; 
			//tmp = tmp * tmp ; 
			
			for( long long k = tmp ; k <= 10000000 ; k += i ) {
				cnt[ k ] ++ ; 
				
				while( ( num[ k ] % i ) == 0 ) {
					num[ k ] /= i ; 
				}
			}
		}
	}
	
	for( int i = lim + 1 ; i <= 10000000 ; i ++ ) {
		if( num[ i ] != 1 ) {
			cnt[ i ] ++ ; 
		}
	}
	
	int mx = 0 ; 
	
	for( int i = 2 ; i <= 10000000 ; i ++ ) {
		mx = max( mx , cnt[ i ] ) ; 
	}
	
	res = vvi ( mx ) ; 
	
	for( int i = 2 ; i <= 10000000 ; i ++ ) {
		res[ cnt[ i ] - 1 ].push_back( i ) ; 
	}	 
	
	/*
	int num ; 
	for( int i = 0 ; i < res[ 1 ].size() ; i ++ ) {
		cout << res[ 1 ][ i ] << endl ; 
		cin >> num ; 
	}
	*/
}

int solve( int A , int B , int K ) {
	if( res.size() < K ) return 0 ; 
	
	int ind = K - 1 ; 
	
	int up = upper_bound( res[ ind ].begin() , res[ ind ].end() , B ) - res[ ind ].begin() ; 
	int down = lower_bound( res[ ind ].begin() , res[ ind ].end() , A ) - res[ ind ].begin() ; 
	
	return ( up - down ) ; 
}

int main() {
	
	for( int i = 2 ; i <= 10000000 ; i ++ ) {
		num[ i ] = i ; 
	}
	
	process() ; 
	
	int T ; 
	
	cin >> T ; 
	
	int A , B , K ; 
	
	for( int i = 0 ; i < T ; i ++ ) {
		cin >> A >> B >> K ; 
		
		int res = solve( A , B , K ) ; 
		
		cout << "Case #" << i + 1 << ": " << res << "\n" ;  
	}
	return 0 ;
}

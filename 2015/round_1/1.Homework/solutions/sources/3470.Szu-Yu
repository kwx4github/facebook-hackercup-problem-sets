#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz size()
#define For(i, st, en)  for(int i=(st); i<=(int)(en); i++)
#define Forn(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)

template <class _T> inline _T sqr(const _T& x) { return x * x; }
template <class _T> inline string tostr(const _T& a) { ostringstream os(""); os << a; return os.str(); }
template <class _T> inline istream& operator << (istream& is, const _T& a) { is.putback(a); return is; }

typedef long double ld;

// Constants
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-11;

// Types
typedef signed   long long i64;
typedef unsigned long long u64;
typedef set < int > SI;
typedef vector < ld > VD;
typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < string > VS;
typedef map < string, int > MSI;
typedef pair < int, int > PII;

// Prime number.
#define MAX 10000001

bool isprime[MAX];
vector<int> primes;

int nextPrime(int p) {
  while (!isprime[++p]);
  return p;
}

void genPrime() {
  fill_n(isprime, MAX, true);
  for (u64 p = 2; p * p < MAX; p = nextPrime(p))
    for (u64 q = p; q * p < MAX; q = nextPrime(q))
      for (u64 tmp = p * q; tmp < MAX; tmp *= p)
        isprime[tmp] = false;
  for (int i = 2; i < MAX; ++i) {
    if (isprime[i]) primes.push_back(i);
  }
}



int A, B, K;



void numberDfs(int begin, const vector<int> &candidates, u64 product, int& total) {
  if (product > B) return;
  if (A <= product) {
    //cout << product << endl;
    total++;
  }

  for (int i = begin; i < candidates.size(); ++i) {
    numberDfs(i, candidates, product * candidates[i], total);
  }
}

int numberCombination(int begin, const vector<int> &candidates) {
  u64 product = 1;
  for (auto p : candidates) {
    product *= p;
  }

  int total = 0;
  numberDfs(0, candidates, product, total);
  return total;
}

void primeCombination(int begin, int end, vector<int>& candidates, u64 product, int& total)
{
  if (product > B) return;

  // cut.
  int remain_cnt = K - candidates.size();
  u64 tmp_product = product;
  for (int i = 0; i < remain_cnt; ++i) {
    tmp_product *= primes[begin];
    if (tmp_product > B) return;
  }

  if (candidates.size() == K) {
    total += numberCombination(0, candidates);
    return;
  }

  for (int i = begin; i < end; ++i) {
    candidates.push_back(primes[i]);
    primeCombination(i + 1, end, candidates, product * primes[i], total);
    candidates.pop_back();
  }
}

int go() {
  int lastPrimeIndex = distance(primes.begin(), upper_bound(primes.begin(), primes.end(), B));
  vector<int> candidates;
  int total = 0;
  primeCombination(0, lastPrimeIndex, candidates, 1, total);
  return total;
}

// Note: beware of overflow
int main() {
  genPrime();
  //cout << primes.size() << endl;

  int caseN;
  cin >> caseN;

  for (int cc = 1; cc <= caseN; ++cc) {
    cout << "Case #" << cc << ": ";

    cin >> A >> B >> K;
    cout << go();

    cout << endl;
  }

  return 0;
}

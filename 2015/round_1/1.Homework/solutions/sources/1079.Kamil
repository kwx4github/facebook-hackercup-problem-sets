// Author: Kamil Nizinski
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#define debug(fmt,...) fprintf(stderr,fmt, ## __VA_ARGS__)
#define mp make_pair
#define ft first
#define sd second
#define psb push_back
#define ppb pop_back
using namespace std;
typedef long long int ll;
typedef long long unsigned llu;
typedef double dd;
const int MAXN=10000007,M=10000000;
int primacity [MAXN];
vector < int > PRIM[17];
void comp_primacity() {
  int i,j;
  for(i=2;i<=M;i++) if(primacity[i]==0) {
    for(j=i;j<=M;j+=i) primacity[j]++;
  }
  /*int big=0;
  for(i=1;i<=M;i++) big=max(big,primacity[i]);
  debug("%d\n ", big);
  debug("%d\n",primacity[9699690]);*/
}
void segregate() {
  int i;
  for(i=2;i<=M;i++) PRIM[primacity[i]].psb(i);
  //for(i=0;i<=10;i++) debug("%d: %d\n",i,(int)PRIM[i].size());
}
int index_of_first_greater_or_equal_to (int a, int k) {
  if(a>PRIM[k].back()) return (int)PRIM[k].size();
  int p=0,q=(int)PRIM[k].size()-1,s;
  while(p<q) {
    s=(p+q)>>1;
    if(PRIM[k][s]>=a) q=s;
    else p=s+1;
  }
  return q;
}
int index_of_last_less_or_equal_to (int b, int k) {
  if(b<PRIM[k][0]) return -1;
  int p=0,q=(int)PRIM[k].size()-1,s;
  while(p<q) {
    s=(p+q+1)>>1;
    if(PRIM[k][s]<=b) p=s;
    else q=s-1;
  }
  return q;
}
int solve(int a, int b, int k) {
  if(k>8) return 0;
  return index_of_last_less_or_equal_to(b,k)-index_of_first_greater_or_equal_to(a,k)+1;
}
int main()
{
	comp_primacity();
	segregate();
	int t,i,a,b,k;
	scanf("%d",&t);
	for(i=1;i<=t;i++) {
	  scanf("%d%d%d",&a,&b,&k);
	  printf("Case #%d: ",i);
	  printf("%d\n",solve(a,b,k));
	}
	return 0;
}

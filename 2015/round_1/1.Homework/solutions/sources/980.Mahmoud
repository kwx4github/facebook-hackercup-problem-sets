import java.util.List;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.PrintStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		ProbA solver = new ProbA();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class ProbA {

    

    int[][] dp;

    final int MAX_SIZE = 10000000;
	
	int tot = 0;

    public ProbA() {
        int[] primeList;
        int[] primacity;
        primeList = MathUtils.primeList(MAX_SIZE);
        System.err.println("Sieve done");
        primacity = new int[MAX_SIZE + 1];
        int max = 0;
        for(int prime : primeList) {
            int factor = 1;
            while(prime * factor <= MAX_SIZE) {
                primacity[prime * factor]++;
                max = Math.max(primacity[prime*factor], max);
                factor++;
            }
        }
        System.err.println("Primacity done");
        dp = new int[MAX_SIZE + 1][max + 1];
        for(int i = 1; i <= MAX_SIZE; i++) {
            for(int j = 0; j <= max; j++) {
                dp[i][j] = dp[i - 1][j];
                if(primacity[i] == j)
                    dp[i][j]++;
            }
        }
		System.err.println("DP done");
    }

    public void solve(int testNumber, InputReader jin, PrintWriter jout) {
        int a = jin.int32();
        int b = jin.int32();
        int k = jin.int32();
        int count = 0;
        if(k < dp[a].length) {
           count = dp[b][k] - dp[a - 1][k];
        }
        jout.println("Case #" + testNumber + ": " + count);
    }
}

class MathUtils {
    public static boolean[] sieve(int max) {
        boolean[] isPrime = new boolean[max + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = isPrime[1] = false;
        int number = 2;
        while(number * number <= max) {
            if(isPrime[number]) {
                int factor = number;
                while(number * factor <= max) {
                    isPrime[number * factor] = false;
                    factor++;
                }
            }
            number++;
        }
        return isPrime;
    }

    public static int[] primeList(int max) {
        boolean[] isPrime = sieve(max);
        List<Integer> primes = new ArrayList<Integer>();
        for(int i = 0; i <= max; i++) {
            if(isPrime[i]) primes.add(i);
        }
        int[] primeList = new int[primes.size()];
        for(int i = 0; i < primes.size(); i++) {
            primeList[i] = primes.get(i);
        }
        return primeList;
    }
}

class InputReader {
    private static final int bufferMaxLength = 1024;
    private InputStream in;
    private byte[] buffer;
    private int currentBufferSize;
    private int currentBufferTop;
    private static final String tokenizers = " \t\r\f\n";

    public InputReader(InputStream stream) {
        this.in = stream;
        buffer = new byte[bufferMaxLength];
        currentBufferSize = 0;
        currentBufferTop = 0;
    }

    private boolean refill() {
        try {
            this.currentBufferSize = this.in.read(this.buffer);
            this.currentBufferTop = 0;
        } catch(Exception e) {}
        return this.currentBufferSize > 0;
    }


    public Byte readChar() {
        if(currentBufferTop < currentBufferSize) {
            return this.buffer[this.currentBufferTop++];
        } else {
            if(!this.refill()) {
                return null;
            } else {
                return readChar();
            }
        }
    }

    public String token()  {
        StringBuffer tok = new StringBuffer();
        Byte first;
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) != -1));
        if(first == null) return null;
        tok.append((char)first.byteValue());
        while((first = readChar()) != null && (tokenizers.indexOf((char) first.byteValue()) == -1)) {
            tok.append((char)first.byteValue());
        }
        return tok.toString();
    }


    public String next() {
        return token();
    }

    public Integer int32() throws NumberFormatException {
        String tok = token();
        return tok == null? null : Integer.parseInt(tok);
    }

}


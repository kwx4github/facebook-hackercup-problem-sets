var fs = require('fs'),
    sys = require("sys"),
    bigint = require('../../../node_modules/bigint');

fs.readdir('.', function (err, data) {
    if (err) throw err;
    for (var i = 0, len = data.length; i < len; i++) {

        if (data[i].indexOf('input') !== -1) {
            fs.readFile('./'+data[i], {encoding: 'utf-8'}, function (err, data) {
                if (err) throw err;
                start(data.split("\n"));
            });            
        }
    }
});

function start(data) {
    /*var res = '';
    var part = 10;
    for (var i = (part-1)*1000000; i < part*1000000; i++) {//10000000
        
        if (!i) { 
            res += '0';
            continue;
        }
        if (i == 1) { 
            res += '0';
            continue;
        }

        var j = calcPrimarity(i);
        res += j;

        console.log(j + ' ' + (100*i/10000000) + '%');
    }

    console.log(res.length);
    fs.writeFileSync('./primarity' + part + '.txt', res);

    return;
    */

    primALL = '';

    fs.readFile('./prim_all.txt', {encoding: 'utf-8'}, function (err, zzzdata) {
        if (err) throw err;

        primALL = zzzdata + '2';

        var res = '';
        for (var j = 1; j <= 1*data[0]; j++) {

            var tmp1 = data[j].split(' ');

            tmp = 'Case #' + j + ': ' + solve(1*tmp1[0], 1*tmp1[1], 1*tmp1[2]);

            console.log(tmp);

            res += tmp + "\n";
        }
        fs.writeFileSync('./out.txt', res);


    });            

    
}

function solve(A, B, K) {
    var res = 0;
    for (var i = A; i <= B; i++) {
        if (K == calcPrimarity2(i))             res++;
    }

    return res;
}

function calcPrimarity2(num) {
    return primALL.charAt(num);
}


function calcPrimarity(num) {
    if (isPrime(num)) return 1;

    var hash = {};
    while (true) {
        var prime = leastFactor(num);
        hash[prime] = true;
        num = num / prime;
        if (isPrime(num)) {
            hash[num] = true;
            break;
        }
    }
    //console.log(hash);
    return Object.keys(hash).length;
}


isPrime = function(n) {
 if (isNaN(n) || !isFinite(n) || n%1 || n<2) return false; 
 if (n==leastFactor(n)) return true;
 return false;
}

// leastFactor(n)
// returns the smallest prime that divides n
//     NaN if n is NaN or Infinity
//      0  if n=0
//      1  if n=1, n=-1, or n is not an integer

leastFactor = function(n){
 if (isNaN(n) || !isFinite(n)) return NaN;  
 if (n==0) return 0;  
 if (n%1 || n*n<2) return 1;
 if (n%2==0) return 2;  
 if (n%3==0) return 3;  
 if (n%5==0) return 5;  
 var m = Math.sqrt(n);
 for (var i=7;i<=m;i+=30) {
  if (n%i==0)      return i;
  if (n%(i+4)==0)  return i+4;
  if (n%(i+6)==0)  return i+6;
  if (n%(i+10)==0) return i+10;
  if (n%(i+12)==0) return i+12;
  if (n%(i+16)==0) return i+16;
  if (n%(i+22)==0) return i+22;
  if (n%(i+24)==0) return i+24;
 }
 return n;
}




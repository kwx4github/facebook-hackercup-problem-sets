#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <stdio.h>
#include <iomanip>
#include <string>
using namespace std;

int prime_factors[10000001];

void fill_sieve() {
	for (int i = 0; i < 10000001; i++) prime_factors[i] = 0;
	for (int i = 2; i < 10000001; i++) {
		if (prime_factors[i] != 0) continue;
		for (int j = i; j < 10000001; j+=i) {
			prime_factors[j]++;
		}
	}
}

vector<int> v[9];

void fill_vector() {
	for (int i = 0; i < 10000001; i++) {
		v[prime_factors[i]].push_back(i);
	}
}

int ans(int a, int b, int k) {
	vector<int>::iterator it_lower = lower_bound(v[k].begin(), v[k].end(), a);
	vector<int>::iterator it_upper = upper_bound(v[k].begin(), v[k].end(), b);
	return distance(it_lower, it_upper); 
}

int main()
{
	fill_sieve();
	fill_vector();
    int t;
	cin >> t;
	for (int _t = 1; _t <= t; _t++) {
		int a, b, k;
		cin >>a >> b >> k;
		cout  << "Case #" << _t << ": " << ans(a, b, k) << endl;
	}
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;

#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define FORR(i, a) for(int i = 0; i < a; ++i)
#define FORE(i, a, b) for(int i = a; i >= b; --i)
#define all(v) v.begin(), v.end()

/* *** Crivo Linear e Phi de Euler ***
 *
 * Definido um inteiro MAXN, calcula quais números entre 2 e MAXN que são primos
 * em tempo liner O(MAXN)
 *
 * As linhas com comentario "modificado" calculam também o valor da função
 * Phi dos números entre 2 e MAXN
 *
 * O método EulerPhi2 calcula a função Phi de Euler para um N específico
 * usando o crivo linear já descrito
 */
const int MAXN = 10000010;
ll pr[MAXN], lp[MAXN+1];
ll phi[MAXN];
int idx, qnt[MAXN];

void crivoLinear() {
    idx = 0;
    FOR(i, 2, MAXN+1) {
        if(lp[i] == 0) {
            lp[i] = i;
            pr[idx++] = i;
            phi[i] = ll(i-1);//modificado
        }
        else {  //modificado
            ll p = lp[i];   //modificado
            ll aux = i/lp[i];   //modificado
            if(aux%p == 0LL) phi[i] = phi[aux]*p;   //modificado
            else phi[i] = (p-1LL)*phi[aux]; //modificado: phi é multiplicativa
        }
        for(int j = 0; j < idx && pr[j] <= lp[i] && i*pr[j] <= MAXN; ++j)
            lp[i * pr[j]] = pr[j];
    }
}
 
ll EulerPhi2(ll N) {
	ll cnt=0;
    ll ans = N, curr = 1LL;
    while(N != 1LL) {
        if(lp[N] != curr) {
			cnt++;
            ans -= ans/lp[N];
            curr = lp[N];
        }
        N /= lp[N];
    }
	return cnt;
    //return ans;
}

int main(){
	int a, b, k, T;
	crivoLinear();
	for(int i=2; i<10000010; i++){
		qnt[i] = EulerPhi2(i);
	}
	scanf("%d", &T);
	for(int caso=1; caso<=T; caso++){
		scanf("%d %d %d", &a, &b, &k);
		int resp=0;
		for(int i=a; i<=b; i++){
			if(qnt[i]==k){resp++;}
		}	
		printf("Case #%d: %d\n", caso, resp);
	}
	return 0;
}


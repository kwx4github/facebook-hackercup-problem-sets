import java.io.FileInputStream;
import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.File;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Jaydeep Maddipati
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "homework.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("homework.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Homework solver = new Homework();
		solver.solve(1, in, out);
		out.close();
	}
}

class Homework {
    static final int N=(int)1e7+50;
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        boolean p[]=new boolean[N];
        int marked[]=new int[N];
        int cnt[][]=new int[N][11];// gives query in O(1)!!! due to limited value of k.
        Arrays.fill(p,true);
        for(int i=2;i<N;i++){
            if(p[i]){
                marked[i]=1;
                for(int j=2*i;j<N;j+=i){
                    p[j]=false;
                    marked[j]++;
                }
            }
        }
        for(int i=2;i<N;i++){
            for(int j=0;j<11;j++){
                cnt[i][j]=cnt[i-1][j];
            }
            cnt[i][marked[i]]++;
        }
        int t=in.nextInt();
        for(int tt=1;tt<=t;tt++){
            int a=in.nextInt(),b=in.nextInt(),k=in.nextInt();
            out.printf("Case #%d: ", tt);
            if(k>10)out.println("0");
            else out.println(cnt[b][k]-cnt[a-1][k]);
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}


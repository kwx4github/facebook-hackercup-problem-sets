#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

vector<unsigned> primes;
unsigned *primacities;

void gen_primes() {
    primes.push_back(2);
    primes.push_back(3);
    primes.push_back(5);
    primes.push_back(7);
    primes.push_back(11);

    unsigned limit = sqrt(pow(10, 7) + 5);
    for (unsigned i = 13; i <= limit; i+=2) {
        bool is_prime = true;
        for (auto pit = primes.begin(); pit!= primes.end(); pit++) {
            if (i % *pit == 0) {
                is_prime = false;
                break;
            }
        }

        if (is_prime) primes.push_back(i);
    }
}

unsigned primacity(unsigned x) {
    unsigned count = 0;
    for (auto pit = primes.begin(); pit!= primes.end(); pit++) {
        if (x % *pit == 0) count += 1;
        if (*pit > x) break;
    }
    return count;
}

int main() {
    unsigned t, a, b, k, T;

    gen_primes();

    primacities = (unsigned*) malloc(sizeof(unsigned) * 10000005);
    #pragma omp parallel for num_threads(4) schedule(static, 50)
    for (unsigned n = 2; n <= 10000002; n++)
        primacities[n] = primacity(n);

    cin >> T;

    for (t = 1; t <= T; t++) {
        cin >> a >> b >> k;
        unsigned count = 0;
        for (unsigned i = a; i <= b; i++) {
            if (primacities[i] == k) count++;
            //cout << i << " : " << primacity(i) << "\n";
        }
        cout << "Case #" << t << ": " << count << "\n";
    }

    free(primacities);

    return 0;
}

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created by Richard Zhang on 1/17/15.
 */
public class Homework {
    public static void main(String[] args) {
        if (args.length < 1) {
            log("Please provide input file");
            System.exit(0);
        }

        Case[] cases = readCases(args[0]);
        if (cases == null) {
            System.exit(0);
        }

        for (int i = 0; i < cases.length; i++) {
            log("Case #" + (i + 1) + ": " + cases[i].getCount());
        }
    }

    private static Case[] readCases(String path) {
        try {
            FileReader fileReader = new FileReader(path);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String line = bufferedReader.readLine();
            int n = Integer.parseInt(line);
            if (n < 1 || n > 100) {
                log("Invalid number of cases " + n);
                System.exit(0);
            }

            Case[] cases = new Case[n];
            for (int i = 0; i < n; i++) {
                line = bufferedReader.readLine();
                cases[i] = new Case(line, bufferedReader);
            }

            return cases;
        } catch (FileNotFoundException e) {
            log("File not found");
            System.exit(0);
        } catch (IOException e) {
            log("Error in reading file " + path);
            System.exit(0);
        } catch (Exception e) {
            log("error in reading file " + e.getMessage());
        }

        return null;
    }

    private static void log(String line) {
        System.out.println(line);
    }

    private static class Case {
        int A;
        int B;
        int K;

        boolean[] primariesPool;
        int[] foundPrimaries;
        int foundPrimaryCount;

        int[] primacites;

        public Case(String line, BufferedReader reader) throws Exception {
            String[] values = line.split(" ");
            A = Integer.valueOf(values[0]);
            B = Integer.valueOf(values[1]);
            K = Integer.valueOf(values[2]);
        }

        public int getCount() {
            init();
            run();
            return count();
        }

        private void init() {
            primariesPool = new boolean[B+1];
            foundPrimaries = new int[B+1];
            foundPrimaryCount = 0;

            primacites = new int[B+1];
        }

        private void run() {
            for (int i = 0; i <= B; i++) {
                int primary = getPrimary(i);
                if (primary == -1) { break; }

                int n = primary;
                while (n <= B) {
                    primacites[n]++;
                    n = n + primary;
                }
            }
        }

        private int count() {
            int count = 0;
            for (int i = A; i <= B; i++) {
                if (primacites[i] == K) {
                    count++;
                }
            }

            return count;
        }

        private int getPrimary(int idx) {
            if (idx < foundPrimaryCount) {
                return foundPrimaries[idx];
            }

            int primary = -1;
            if (idx == 0) {
                primary = findNextPrimary(1);
            } else {
                primary = findNextPrimary(foundPrimaries[idx-1]);
            }

            if (primary == -1) {
                return -1;
            }

            foundPrimaries[foundPrimaryCount++] = primary;
            return primary;
        }

        private int findNextPrimary(int cur) {
            if (cur >= primariesPool.length) { return -1; }
            for (int i = cur + 1; i < primariesPool.length; i++) {
                if (!primariesPool[i]) {
                    int n = i + i;
                    while (n < primariesPool.length) {
                        primariesPool[n] = true;
                        n = n + i;
                    }

                    return i;
                }
            }

            return -1;
        }

        @Override
        public String toString() {
            return "A: " + A + ", B: " + B + ", K: " + K;
        }
    }
}


#include <iostream>
using namespace std;
#define MAX 10000000+1 /// 10^7 + 1
#define abs(a) (a > 0 ? a : -a)
int tab[MAX], primacity[MAX] = {}, res[9][MAX];

int sieve()
{
    int tmp, lastone=1;
    for(int k=2; k<MAX; k++) tab[k]=k;

	for(int i=2; i*i < MAX; i++)
	{
		if(tab[i] == i)
		{
			for(int j=i; j*i < MAX; j++)
				if(tab[i*j] > i) tab[i*j] = i;
		}
	}

            for(int i=1; i<MAX; i++)
            { res[1][i]=0; res[2][i]=0; res[3][i]=0; res[4][i]=0; res[5][i]=0; res[6][i]=0; res[7][i]=0; res[8][i]=0;}


	for(int i=2; i<MAX; i++)
	{
        tmp = i;
        lastone = 1;
        //primacity[i]=1;

        while(tmp!=1)
        {
            if(tab[tmp]!=lastone)
            {
                primacity[i]++;
                lastone=tab[tmp];
            }

            tmp /= tab[tmp];
        }

        //if(i<100)
        for(int j=1; j<=8; j++)
        {
            if(primacity[i] == j)
            {
                res[j][i] = abs(res[j][i-1]) + 1;
            //cout << "ustawiam pod " << i << " " << j << " " << res[j][i-1] + 1 << endl;

            }
            else
            {
                res[j][i] = res[j][i-1] > 0 ? -res[j][i-1] : res[j][i-1];
                //cout << i << " " << j << " "<< res[j][i] << endl;
            }


                    //cout << i <<" " << j << " " << res[j][i] << endl;

        }



	}

}
int main()
{
    ios_base::sync_with_stdio(0);

	sieve();
    int t, a, b, k;

    cin >> t;

    for(int l=1; l<=t; l++)
    {
        cin >> a >> b >> k;

        cout << "Case #" << l << ": ";

        if(k>8) cout << 0 << endl;
        else
        {
            if(res[k][a] == 0 && res[k][b] == 0) cout << 0 << endl;
            else
            if(res[k][a] == 0 && res[k][b] > 0) cout << abs(res[k][b]) << endl;
            else
            if(res[k][a] < 0 && res[k][b] < 0)
            {
                cout << abs(res[k][b]) - abs(res[k][a]) << endl;
            }
            else
            if(res[k][a] < 0 && res[k][b > 0])
            {
                cout << res[k][b] + res[k][a] << endl;
            }
            else
            if(res[k][a] > 0 && res[k][b] > 0)
            {
                cout << res[k][b] - res[k][a]+1 << endl;
            }
            else
            {
                cout << -res[k][b]-res[k][a] + 1 << endl;
            }
        }
    }


}

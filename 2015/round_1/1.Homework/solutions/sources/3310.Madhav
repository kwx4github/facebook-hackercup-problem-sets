#include <bits/stdc++.h>
#define si(n) scanf( "%d", &n )
#define sl(n) scanf( "%lld", &n )
#define sf(n) scanf( "%lf", & n )
#define sc(c) scanf( "%c", &c )
#define pb(n) push_back(n)
#define mp(a,b) make_pair( a, b )
#define f(i,n) for( int i = 0; i < n; i++ )
#define fv(v) for( int i = 0; i < v.size(); i++ )
#define sv(v) sort( v.begin(), v.end() )
#define sa(a,n) sort( a, a + n )
#define pf(n) push_front( n )
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<double> vd;
typedef vector<vector<double> > vvd;
typedef vector<pair<int,int> > vpi;
typedef pair<long long, long long> pll;
typedef vector<long long> vl;
typedef vector<pll> vpl;
ll gcd( ll a, ll b ){ return ( b == 0 )? a: gcd( b, a % b ); }
int cnt[10000005];
vector<int> primes;

void markMultiples(bool arr[], int a, int n)
{
    int i = 2, num;
    while ( (num = i*a) <= n )
    {
        arr[ num-1 ] = 1; // minus 1 because index starts from 0.
        ++i;
    }
}

bool arr[10000005];
// A function to print all prime numbers smaller than n
void seive()
{
    int n = 10000005;
    // There are no prime numbers smaller than 2
    if (n >= 2)
    {
        // Create an array of size n and initialize all elements as 0

        memset(arr, 0, sizeof(arr));

         //Following property is maintained in the below for loop
           //arr[i] == 0 means i + 1 is prime
           //arr[i] == 1 means i + 1 is not prime
        for (int i=1; i<n; ++i)
        {
            if ( arr[i] == 0 )
            {
                //(i+1) is prime, print it and mark its multiples
                //printf("%d ", i+1);
                primes.pb(i+1);
                markMultiples(arr, i+1, n);
            }
        }
    }
}

void preProcess(){
    for(int i = 0; i <= 10000000; ++i ) cnt[i] = 0;

    f(i,primes.size())
        for(int j = primes[i]; j <= 10000000; j += primes[i] )  cnt[j]++;
}

void solveTC( int tc ){
    int a, b, k, c = 0;
    si(a);  si(b);  si(k);

    for( int i = a; i <= b; i++ )
        if( cnt[i] == k )   c++;

    cout<<"Case #"<<tc<<": "<<c<<endl;
}


int main()
{
    seive();
	preProcess();
	//for( int i = 0; i < 100; ++i )	cout<<"\t"<<primes[i];
	int T;
	si(T);


	f(g,T){
		solveTC( g + 1 );
	}

	return 0;
}


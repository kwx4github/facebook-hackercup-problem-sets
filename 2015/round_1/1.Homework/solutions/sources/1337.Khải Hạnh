#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <math.h>

#define FR(i, a, b)   for(int i = a; i < b; i++)
#define FOR(i, a, b)  for(int i = a; i <= b; i++)
#define LFOR(i, a, b) for(int i = a; i >= b; i--)
#define FRSZ(i, x)    for(int i = 0; i < (int)x.size(); i++)
#define RP(i, n)      for(int i = 0; i < n; i++)
#define repeat        do
#define until(x)      while(!(x))
#define _ve vector
#define _pa pair
#define _tu tuple
#define _mp make_pair
#define _mt make_tuple
#define _pb push_back
#define _fi first
#define _sc second
#define sz(a) ((int)(a).size())

using namespace std;

template <class T> T min3(T a, T b, T c){ return min(a, min(b, c));};
template <class T> T max3(T a, T b, T c){ return max(a, max(b, c));};

typedef long long int64;
typedef unsigned long long qword;
typedef long double ldouble;

int dv[10000001];

int calK(int x)
{
    int res = 0;
    for(int i = 2; i * i <= x; i++)
        if(x % i == 0)
        {
            res++;
            while(x % i == 0)
                x /= i;
        }
    if(x > 1) res++;
    return res;
}

int main()
{
    freopen("d:\\homework.txt", "r", stdin);
    freopen("d:\\Output.txt", "w", stdout);
    for(int i = 1; i <= 10000000; i++)
        dv[i] = calK(i);
    int oo;
    scanf("%d", &oo);
    for(int o = 0; o < oo; o++)
    {
        int a, b, k;
        scanf("%d%d%d", &a, &b, &k);
        if(a > b)
        {
            int temp = a;
            a = b;
            b = temp;
        }
        int res = 0;
        for(int i = a; i <= b; i++)
            if(dv[i] == k)
                res++;
        cout << "Case #" << o + 1<<": " << res << endl;
    }
}

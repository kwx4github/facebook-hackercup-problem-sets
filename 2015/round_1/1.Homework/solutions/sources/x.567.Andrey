#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>

using namespace std;

const int MAX_PRIMACITY = 9;
const int MAX_N = 10000000;
int result[MAX_PRIMACITY][MAX_N + 1];

void solve()
{
	int a, b, k;
	cin >> a >> b >> k;
	if (k >= MAX_PRIMACITY)
		cout << 0 << endl;
	else
		cout << (result[k][b] - result[k][a - 1]) << endl;
}

void calcExtendedEratosphen()
{
	for (int p = 2; p <= MAX_N; ++p)
		if (!result[0][p])
		{
			result[0][p] = p;
			if (p < 4000)
				for (int i = p * p; i <= MAX_N; i += p)
					result[0][i] = p;
		}
}

void calcPrimacity()
{
	for (int i = 2; i <= MAX_N; ++i)
	{
		int prev = i;
		while (prev % result[0][i] == 0)
			prev /= result[0][i];
		result[0][i] = result[0][prev] + 1;
	}
}

void buildIntegralIntervals()
{
	for (int i = 2; i < MAX_N; ++i)
		result[result[0][i]][i] = 1;
	for (int p = 1; p < MAX_PRIMACITY; ++p)
		for (int i = 2; i <= MAX_N; ++i)
			result[p][i] += result[p][i - 1];
}

void precalc()
{
	calcExtendedEratosphen();
	calcPrimacity();
	buildIntegralIntervals();
}

int main()
{
	ios::sync_with_stdio(false);
#ifdef GRANDVIC_DEBUG
	freopen("e:/input.txt", "rt", stdin);
	freopen("e:/output.txt", "wt", stdout);
#endif
	precalc();
	int T; cin >> T;
	for (int t = 1; t <= T; ++t)
	{
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}

package fb2014_round1;

import java.io.*;
import java.util.StringTokenizer;

public class A {
    private static final int MAX = 10000000;
    private static final int MAX_PRIMES = 9;

    private static int[][] cnt = new int[MAX+1][MAX_PRIMES];

    public static void main(String[] args) throws FileNotFoundException {
        Kattio io;

//        io = new Kattio(System.in, System.out);
//        io = new Kattio(new FileInputStream("fb2014_round1/A-sample.in"), System.out);
        io = new Kattio(new FileInputStream("fb2014_round1/homework.txt"), new FileOutputStream("fb2014_round1/homework.out"));
//        io = new Kattio(new FileInputStream("fb2014_round1/A-large-0.in"), new FileOutputStream("fb2014_round1/A-large-0.out"));


        for(int t=2;t<=MAX;t++) {
            int q = t;
            int p = 2, c = 0;
            while (p*p<=q) {
                if (q % p == 0)
                {
                    c++;
                    while (q % p == 0)
                    {
                        q /= p;
                    }
                }
                p++;
            }
            if (q > 1) c++;
//            io.println(t + " " + c);
            for (int i = 0; i < MAX_PRIMES; i++)
            {
                cnt[t][i] = cnt[t-1][i];
            }
            cnt[t][c]++;
//            if (t % 1000000 == 0) io.println(t);
        }
//        io.flush();
        int cases = io.getInt();
        for (int i = 1; i <= cases; i++) {
            io.print("Case #" + i + ": ");
            new A().solve(io);
        }
        io.close();
    }

    private void solve(Kattio io) {
        int a = io.getInt();
        int b = io.getInt();
        int k = io.getInt();
        int ans = 0;
        if (k <  MAX_PRIMES)
        {
            ans = cnt[b][k] - cnt[a - 1][k];
        }
        io.println(ans);
    }

    public static class Kattio extends PrintWriter
    {
        public Kattio(InputStream i) {
            super(new BufferedOutputStream(System.out));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public Kattio(InputStream i, OutputStream o) {
            super(new BufferedOutputStream(o));
            r = new BufferedReader(new InputStreamReader(i));
        }

        public boolean hasMoreTokens() {
            return peekToken() != null;
        }

        public int getInt() {
            return Integer.parseInt(nextToken());
        }

        public double getDouble() {
            return Double.parseDouble(nextToken());
        }

        public long getLong() {
            return Long.parseLong(nextToken());
        }

        public String getWord() {
            return nextToken();
        }


        private BufferedReader r;
        private String line;
        private StringTokenizer st;
        private String token;

        private String peekToken() {
            if (token == null)
                try {
                    while (st == null || !st.hasMoreTokens()) {
                        line = r.readLine();
                        if (line == null) return null;
                        st = new StringTokenizer(line);
                    }
                    token = st.nextToken();
                } catch (IOException e) {
                }
            return token;
        }

        private String nextToken() {
            String ans = peekToken();
            token = null;
            return ans;
        }
    }

}

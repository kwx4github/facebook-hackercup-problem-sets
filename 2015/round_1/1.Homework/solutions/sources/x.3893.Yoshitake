#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <stack>
#include <queue>
#include <cctype>
#include <complex>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <cassert>
#include <iomanip>

using namespace std;

#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
typedef long long ll;
typedef complex<int> P;
typedef pair<int,int> pii;
const double EPS = 1e-10;
const double PI  = acos(-1.0);
template <class F, class T> void convert(const F &f, T &t){	stringstream ss; ss << f; ss >> t;}


struct st{
	int k;
	vector<int> pfact;
};

const int n = 10000010;
bool is_prime[n];
vector<st> nums(n);

void debug(){
	for(int i=0;i<100;i++) if(is_prime[i]) cout<< i << " "; cout<< endl;
	for(int i=0;i<20;i++){
		cout<< i<< ": "<< nums[i].k<< " :: ";
		for(auto j : nums[i].pfact) cout<< " "<< j; cout<< endl;
	}
	return;
}

void init(){
	memset(is_prime, true, sizeof(is_prime));
	is_prime[0] = false;
	is_prime[1] = false;
	for(int i=2;i*i<n;i++){
		if(!is_prime[i]) continue;
		for(int j=i;j<n;j+=i){
			if(j!=i) is_prime[j] = false;
			nums[j].pfact.push_back(i);
		}
	}
	for(int i=2;i<n;i++){
		nums[i].k = nums[i].pfact.size();
	}
	return;
}

bool solve(){
	int a, b, k;
	cin>> a>> b>> k;

	int ans = 0;
	for(int i=a;i<=b;i++) if(nums[i].k == k) ans++;
	cout<< ans<< endl;
	return true;
}

int main(){
	cout.setf(ios::fixed); cout.precision(10);
	init();
	int n;
	cin>> n;
	for(int i=0;i<n;i++){
		cout<< "Case #"<< i+1 << ": ";
		solve();
	}
	return 0;
}

 
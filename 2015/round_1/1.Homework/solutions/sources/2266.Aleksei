from __future__ import print_function

import bisect
import sys
import math

f = sys.stdin

if len(sys.argv) > 1:
    f = open(sys.argv[1], "rt")


#~ debug_FIXED_MAX = True
debug_FIXED_MAX = False

#~ MAX_NUM = 10 * 1000 * 1000
#~ MAX_NUM = 1000 * 1000
MAX_NUM = 2 * 1000 * 1000

# modified sieve
def calc_dict():
    all_nums = range(MAX_NUM+1)
    counts = [0 for x in xrange(MAX_NUM+1)]

    for i in xrange(2, len(all_nums )):
        x = all_nums[i]
        if x == i: # prime
            counts[i] = 1
            for j in xrange(x+x, len(all_nums), x):
                y = all_nums[j]
                if y == j:
                    while y % x == 0:
                        y = y // x
                    all_nums[j] = y
                    counts[j] = 1
        else:
            counts[i] += counts[x]

    # Primacity -> list of numbers
    count2nums = {}
    for x in xrange(2, len(all_nums)):
        count = counts[x]
        count2nums.setdefault(count, []).append(x)

    #~ print(all_nums)
    #~ print(counts)
    #~ for n, nums in count2nums.iteritems():
        #~ print(n, len(nums))

    return count2nums

if debug_FIXED_MAX:
    count2nums = calc_dict()


#~ sys.exit()
# main

T = int(f.readline().strip())

all_cases = []

if not debug_FIXED_MAX:
    MAX_NUM = 0

for case_id in range(1, T+1):
    A, B, K = map(int, f.readline().strip().split())
    all_cases.append((A, B, K))
    if not debug_FIXED_MAX:
        MAX_NUM = max(MAX_NUM, B)

if not debug_FIXED_MAX:
    count2nums = calc_dict()

for case_id in range(1, T+1):
    A, B, K = all_cases[case_id-1]

    r = 0
    if K in count2nums:
        nums = count2nums[K]
        a = bisect.bisect_left(nums, A)
        b = bisect.bisect_right(nums, B)
        r = b - a

    print(str.format('Case #{}: {}', case_id, r))

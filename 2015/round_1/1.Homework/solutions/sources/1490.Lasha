import java.util.*;
import java.io.*;

public class Homework {
	
	static int[] a = new int[10000001];
	static int[] primes = new int[700000];
	static int size = 0;
	static int[][] lists = new int[10][];
	
	static void findPrimes() {
		boolean[] pr = new boolean[10000001];
		for (int i=2; i<=pr.length; i++) {
			for (int j=i; (1L*j*i) < pr.length; j++) {
				pr[i*j] = true;
			}
		}
		int sz = 0;
		for (int i=2; i<pr.length; i++) {
			if (!pr[i]) {
				primes[sz++] = i;
			}
		}
		size = sz;
	}
	
	static void precalc() {
		for (int i=0; i<size; i++) {
			int p = primes[i];
			for (int j=1; j*p < a.length; j++) {
				a[j*p] = p;
			}
		}
	}
	
	static int countFor(int num) {
		if (num == 1) return 0;
		int prime = a[num];
		while (num % prime == 0) {
			num /= prime;
		}
		return 1 + countFor(num);
	}
	
	static void output(PrintWriter pw, int testCaseNum, int answer) {
		pw.println("Case #" + testCaseNum + ": " + answer);
	}
	
	static int countBinSearch(int k, int right) {
		if ( k >= lists.length) return 0;
		return binSearch(k, right, 0, lists[k].length-1);
	}
	
	static int binSearch(int k, int right, int l, int r) {
		if (l == r) {
			if (lists[k][l] <= right) return l+1;
			return 0;
		}
		if (r == l+1) {
			if (lists[k][r] <= right) return r+1;
			if (lists[k][l] <= right) return l+1;
			return 0;
		}
		int mid = (l+r)/2;
		return lists[k][mid] <= right ? binSearch(k, right, mid, r) : binSearch(k, right, l, mid-1);
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(System.out);
		pw = new PrintWriter(new FileWriter("/Users/Lasha/Desktop/output.txt"));
		findPrimes();
		precalc();
		int[] count = new int[10000001];
		int[] sz = new int[10];
		for (int i=1; i<count.length; i++) {
			count[i] = countFor(i);
			sz[count[i]]++;
		}
		int[] curSz = new int[10];
		for (int i=0; i<10; i++) {
			lists[i] = new int[sz[i]];
		}
		for (int i=1; i<count.length; i++) {
			int cnt = count[i];
			lists[cnt][curSz[cnt]++] = i;
		}
		int numTests = Integer.parseInt(rd.readLine());
		for (int test=1; test <= numTests; test++) {
			String[] split = rd.readLine().split(" ");
			int left = Integer.parseInt(split[0]), right = Integer.parseInt(split[1]), k = Integer.parseInt(split[2]);
			// list[k] = (a1, a2, ... , an). #(ai : left <= ai <= right)
			int answer = countBinSearch(k, right) - (left==1 ? 0 : countBinSearch(k, left-1));
			output(pw, test, answer);
		}
		pw.flush();
		pw.close();
		rd.close();
	}
}

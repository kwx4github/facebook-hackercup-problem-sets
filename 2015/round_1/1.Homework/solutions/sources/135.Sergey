#pragma comment(linker, "/STACK:60000000")
#define _CRT_SECURE_NO_WARNINGS

#include <bitset>
#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <sstream>
#include <iomanip>
#include <complex>
#include <queue>
#include <functional>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) int(a.size() - 1)
#define all(a) a.begin(), a.end()
#define seta(a,x) memset (a, x, sizeof (a))
#define I (int)
#define next NEXTHUI
#define prev PREVHUI
#define y1 Y1HUI

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;
const string task = "";

template <class T> T sqr (T x) {return x * x;}

const int NMAX = 1000 * 1000 * 10;

int d[NMAX + 1];
int ans[NMAX + 1];

void precalc() {
	seta(d, 0);
	d[1] = 1;
	for (int i = 2; i <= NMAX; i++) {
		if (d[i] == 0) {
			int j = i;
			while (j <= NMAX) {
				d[j] = i;
				j += i;
			}
		}
	}
	ans[1] = 0;
	for (int i = 2; i <= NMAX; i++) {
		ans[i] = ans[i / d[i]];
		if (d[i / d[i]] != d[i]) {
			ans[i]++;
		}
	}
}

void solve() {
	int a, b, k;
	cin >> a >> b >> k;
	int res = 0;
	for (int i = a; i <= b; i++) {
		if (ans[i] == k) {
			res++;
		}
	}
	cout << res << endl;
}

int main () {
//	freopen ((task + ".in").data(), "r", stdin);
//	freopen ((task + ".out").data(), "w", stdout);
//	freopen ("input.txt", "r", stdin);
//	freopen ("output.txt", "w", stdout);
	precalc();	
	int tt;
	cin >> tt;
	forn(ii, tt) {
		printf("Case #%d: ", ii + 1);
		solve();
	}
	return 0;
}

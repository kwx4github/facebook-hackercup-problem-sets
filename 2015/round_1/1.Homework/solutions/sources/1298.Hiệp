#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define sz(a) ((int)(a).size())
#define ms(a,x) memset(a, x, sizeof(a))
#define ld long double
#define Repd(i, n) for(int i = (n) - 1; i >= 0; --i)

using namespace std;

const int nm = 24;
const int mm = 10000002;

vector<int> a[nm];
int nnt;
vector<int> snt;
bool nt[mm];

int pt(int n) {
	int kq = 0;
	for (int j = 0; j < nnt && snt[j] * snt[j] <= n; ++j) {
		int i = snt[j];
		if (n % i == 0) {
			kq++;
			while (n % i == 0)
				n /= i;
		}
	}
	if (n > 1)
		kq++;
	return kq;
}

void init() {
	nnt = 1;
	snt.pb(2);
	for (int i = 4; i < mm; i += 2)
		nt[i] = 1;
	int i;
	for (i = 3; i * i < mm; i += 2) {
		if (!nt[i]) {
			nnt++;
			snt.pb(i);
			for (int j = i * i; j < mm; j += 2 * i)
				nt[j] = 1;
		}
	}
	for (; i < mm; i += 2)
		if (!nt[i]) {
			nnt++;
			snt.pb(i);
		}
	for (i = 1; i < mm; ++i)
		a[pt(i)].pb(i);
}

int find(int k, int x) {
	int l = 0, r = a[k].size() - 1, mid, kq = a[k].size();
	while (l <= r) {
		mid = (l + r) >> 1;
		if (a[k][mid] >= x) {
			kq = mid;
			r = mid - 1;
		} else
			l = mid + 1;
	}
	return kq;
}

int find2(int k, int x) {
	int l = 0, r = a[k].size() - 1, mid, kq = -1;
	while (l <= r) {
		mid = (l + r) >> 1;
		if (a[k][mid] <= x) {
			kq = mid;
			l = mid + 1;
		} else
			r = mid - 1;
	}
	return kq;
}

void solve(int test) {
	cout << "Case #" << test << ": ";
	int l, r, k;
	cin >> l >> r >> k;
//	int i = lower_bound(a[k].begin(), a[k].end(), l) - a[k].begin();
//	int j = upper_bound(a[k].begin(), a[k].end(), r) - 1 - a[k].begin();
	int i = find(k, l);
	int j = find2(k, r);
//	cout << i << " " << j << " " << j - i + 1 << "\n";
	cout << j - i + 1 << "\n";
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("homework.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	init();
	int t;
	cin >> t;
	for (int i = 1; i <= t; ++i)
		solve(i);
}

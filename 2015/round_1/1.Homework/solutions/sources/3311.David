#include <algorithm>
#include <cassert>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <utility>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

const unsigned LIMIT = 10000000;

std::vector<uint8_t> primacy(LIMIT + 1, 0);

unsigned generate_primacy(unsigned limit)
{
	uint8_t maxcount = 0;

	for (unsigned i = 2; i <= limit; ++i) {
		if (primacy[i] == 0) {
			// Prime value
			for (unsigned m = i; m <= limit; m += i) {
				primacy[m] = primacy[m] + 1;
				maxcount = std::max(primacy[m], maxcount);
			}
		}
	}

	return maxcount;
}

unsigned solve(unsigned long A, unsigned long B, unsigned long K)
{
	if (K > 8)	// if you mult more than 8 primes, number is already over LIMIT
		return 0;

	unsigned retval = 0;

	for (unsigned i = A; i <= B; ++i) {
		if (primacy[i] == K)
			retval++;
	}

	return retval;
}

int main(int argc, char** argv)
{
	auto maxcount = generate_primacy(LIMIT);

	if (argc < 2) {
		std::cerr << "Need an input file" << std::endl;
	}
	else {
		std::fstream input;
		input.open(argv[1], std::fstream::in);

		if (!input.is_open())
			return -1;

		unsigned T;
		input >> T;

		for (unsigned i = 1; i <= T; ++i) {
			unsigned long A, B, K;

			input >> A >> B >> K;

			unsigned retval = solve(A, B, K);

			std::cout << "Case #" << i << ": " << retval << std::endl;
		}
	}
	return 0;
}


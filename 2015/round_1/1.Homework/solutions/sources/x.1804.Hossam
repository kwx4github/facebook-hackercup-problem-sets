#include <bits/stdtr1c++.h>
using namespace std;

typedef long long ll;
#define sz(v) (int)v.size()
#define all(v) v.begin(), v.end()

const int SZ = 1e7 + 10;
int cnt[SZ], prms[SZ];
bool prime[SZ];
int N = SZ, idx = 0;
vector<int> parts[10];
int MX = 1 << 30;
void sieve() {
	memset(cnt, 0, N * sizeof(cnt[0]));
	memset(prime, -1, N * sizeof(prime[0]));
	prime[0] = prime[1] = false;
	int sqrtN = (int) sqrt((double) N);
	for (int i = 2; i <= sqrtN; i++)
		if (prime[i]) for (int j = i; j < N; j += i) {
			if (i != j) prime[j] = false;
			++cnt[j];
		}
	for (int i = 0; i < N; i++) {
		if (prime[i]) prms[idx++] = i;
		if (cnt[i]) parts[cnt[i]].push_back(i);
	}
	for (int i = 0; i < 10; i++)
		parts[i].push_back(MX);
}

void dd() {
	vector<int> v(10000);
	for (int i = 1; i < 10000; i++) {
		for (int j = 0; j < 10000; j++) {
			if (i % prms[j] == 0) v[i]++;
		}
	}
	for (int i = 0; i < 10000; i++)
		cout << v[i] << endl;
}

int main() {
	freopen("1", "r", stdin);
	freopen("2", "w", stdout);
	sieve();
	//dd();
	int tc, t = 0, a, b, k;
	cin >> tc;
	while (tc--) {
		cin >> a >> b >> k;
		int cnt = 0;
		if (k < 10) for (int i = 0; i < sz(parts[k]); i++)
			if (parts[k][i] >= a && parts[k][i] <= b) cnt++;
		cout << "Case #" << ++t << ": " << cnt << "\n";
	}
}

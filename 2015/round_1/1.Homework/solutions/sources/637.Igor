import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashSet;

/**
 * @author Admin
 * 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 = 9699690
 */
public class Fb1_1 {
	static int[] primes = getFirstPrimes(664580);
	//static int[] primes = getFirstPrimes(13);

	static int a = 0, b = 0, k = 0;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader("input1.txt"));
		PrintWriter pw = new PrintWriter(new FileWriter("output1.txt"));

		int nrT = Integer.parseInt(br.readLine());
		for(int t = 1; t <= nrT; t++) {
			String[] vals = br.readLine().split(" ");
			a = Integer.parseInt(vals[0]);
			b = Integer.parseInt(vals[1]);
			k = Integer.parseInt(vals[2]);
			
			if(k > 8 || k >= b) {
				pw.println("Case #" + t + ": 0");
				continue;
			}
			
			res = 0;
			cProd = 1;
			System.out.println("starting " + t + " - " + a + ":" + b + ":" + k);
			go(0, 0);
			
			pw.println("Case #" + t + ": " + res);
			pw.flush();
		}
		
		br.close();
		pw.close();
		System.out.println("done!");
	}
	
	static long cProd = 1;
	static int res = 0;
	static void go(int from, int next) {
		if(from == k) {
			if(cProd >= a && cProd <= b) {
				//System.out.println("good cProd = " + cProd);
				res++;
			}
			return;
		}
		
		long backupProd = cProd;
		for(int i = next; i < primes.length && cProd * primes[i] <= b; i++) {
			while(cProd * primes[i] <= b) {
				cProd *= primes[i];
				go(from + 1, i + 1);
			}
			cProd = backupProd;
		}
	}
	
	/**
	 * Method is tested and works well - up to 300 000 in 1 second, largest prime ~
	 * 4 000 000
	 */
	public static int[] getFirstPrimes(int nrPrimes) {
		int[] res = new int[nrPrimes];
		if (nrPrimes == 0) {
			return res;
		}

		res[0] = 2;
		int cInd = 1;
		for (int i = 3; cInd < nrPrimes; i += 2) {
			boolean isPrime = true;
			for (int j = 0; j < cInd && res[j] * res[j] <= i; j++) {
				if (i % res[j] == 0) {
					isPrime = false;
					break;
				}
			}
			if (isPrime) {
				res[cInd] = i;
				cInd++;
			}
		}

		return res;
	}
}

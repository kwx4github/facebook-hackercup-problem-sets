#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_VALUE = 10000000;

int Primacity[MAX_VALUE + 1];
vector< vector<int> > ValuesByPrimacity;

void Eratosthenes() {
    for (int i = 2; i <= MAX_VALUE; ++i) {
        if (Primacity[i] == 0) {
            for (int j = i; j <= MAX_VALUE; j += i)
                ++Primacity[j];
        }
    }
}

void Preprocess() {
    Eratosthenes();
    for (int i = 2; i <= MAX_VALUE; ++i) {
        if (Primacity[i] >= int(ValuesByPrimacity.size()))
            ValuesByPrimacity.resize(Primacity[i] + 1, vector<int>());
        ValuesByPrimacity[Primacity[i]].push_back(i);
    }
}

int main() {
    ifstream cin("input.txt");
    ofstream cout("output.txt");
    Preprocess();
    int testCount;
    cin >> testCount;
    for (int t = 1; t <= testCount; ++t) {
        int lower, upper, primacity;
        cin >> lower >> upper >> primacity;
        cout << "Case #" << t << ": ";
        if (primacity >= int(ValuesByPrimacity.size())) {
            cout << "0\n";
            continue;
        }
        auto lowerIndex = lower_bound(ValuesByPrimacity[primacity].begin(), ValuesByPrimacity[primacity].end(), lower);
        auto upperIndex = upper_bound(ValuesByPrimacity[primacity].begin(), ValuesByPrimacity[primacity].end(), upper);
        cout << upperIndex - lowerIndex << "\n";
    }
    cin.close();
    cout.close();
    return 0;
}

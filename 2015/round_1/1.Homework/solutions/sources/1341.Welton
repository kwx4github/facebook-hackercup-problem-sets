#include <bits/stdtr1c++.h>

using namespace std;

typedef long long int64; 
typedef unsigned long long uint64;

int64 _sieve_size;
bitset < 10001002 > bs;
vector < int64 >  primes;
int ans[10000002];

void sieve( int64 upperbound ){
	_sieve_size = upperbound + 1;
	bs[0] = bs[1] = 1;
	for( int64 i = 2; i <= _sieve_size; i++ ){
		if( !bs[i] ){
			for( int64 j = i * i; j <= _sieve_size; j += i ) bs[j] = 1;
			primes.push_back((int)i);
		}
	}
}

void solve( ){
	int tam = primes.size();
	for( int i = 0; i < tam; i++ ){
		for( int j = primes[i]; j <= 10000000; j += primes[i]) ans[j]++;
	}
}

int main(){
    ios::sync_with_stdio(false);
    int t, a, b, k, w = 1;
    sieve(10000001);
    solve();
    cin >> t;
    while( t-- ){
    	cin >> a >> b >> k;
    	int resp = 0;
    	for( int i = a; i <= b; i++ ) resp += ((ans[i] == k) ? (1) : (0));
 		cout << "Case #" << w++ << ": " << resp << "\n";
    }
    return 0;
}
#include<iostream>
#include<map>
#include<string>
#include<string.h>
#include<vector>
#include<stdio.h>
#include <cstdio>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <sstream>
#include <cmath>
#include <bitset>
#include <limits.h>
#include <limits>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#define all(v) v.begin(),v.end()
#define R(i) freopen(i,"r",stdin)
#define W(i) freopen(i,"w",stdout)
#define R_W R("i.txt"),W("o.txt");
#define FOR(i,f,t) for(int i=f;i<t;i++)
#define r(e) for(int i=0;i<e;i++)
#define inf numeric_limits<int>::max()
#define minf numeric_limits<int>::min()
#define DFS_WHITE -1
#define DFS_BLACK 1
using namespace std;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
vector< vi > AdjList;
typedef long long ll;
typedef vector<int> vi;
typedef map<int, int> mii;

ll _sieve_size;
bitset<10000010> bs;   // 10^7 should be enough for most cases
vi primes;   // compact list of primes in form of vector<int>

long data[10000010];

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
	memset(data, 0, sizeof data);
	_sieve_size = upperbound + 1;                   // add 1 to include upperbound
	bs.set();                                                 // set all bits to 1
	bs[0] = bs[1] = 0;                                     // except index 0 and 1
	for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
		// cross out multiples of i starting from i * i!
		data[i]++;
		for (ll j = i+i; j <= _sieve_size; j += i) bs[j] = 0, data[j]++;
		primes.push_back((int)i);  // also add this vector containing list of primes
	}
}                                           // call this method in main method

int main(){
	R_W;
	sieve(10000000);

	int t;
	int cases = 1;
	cin >> t;
	while (t--){
		long long int a, b, k;
		cin >> a >> b >> k;
		int c;
		int s = 0;
		for (int i = a; i <= b; i++)
		{
			if (data[i] == k){
				s++;
			}
		}
		printf("Case #%d: %d\n", cases++, s);
	}
	return 0;
}
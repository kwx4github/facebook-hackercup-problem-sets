namespace Homework
{
    using System.IO;
    using System.Linq;

    class Program
    {
        static void Main(string[] args)
        {
            var solver = new Solver();

            using (var reader = new StreamReader("homework.txt"))
            using (var writer = new StreamWriter("homework_output.txt"))
            {
                var T = int.Parse(reader.ReadLine());

                for(int caseNumber = 1; caseNumber <= T; caseNumber++)
                {
                    var inputs = reader.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();
                    writer.WriteLine("Case #{0}: {1}", caseNumber, solver.Solve(inputs[0], inputs[1], inputs[2]));
                }
            }
        }
    }

    public class Solver
    {
        private const int N = 10000001;

        private bool[] prime;
        private int[] biggestPrimeDivisor;
        private int[] primacity;

        public Solver()
        {
            Eratosthenes();
            UpdatePrimacity();
        }

        private void UpdatePrimacity()
        {
            primacity = new int[N];

            primacity[1] = 0;

            for (int i = 2; i < N; i++)
            {
                var prev = i / biggestPrimeDivisor[i];
                primacity[i] = primacity[prev] + (prev % biggestPrimeDivisor[i] == 0 ? 0 : 1);
            }
        }

        private void Eratosthenes()
        {
            prime = new bool[N];
            biggestPrimeDivisor = new int[N];

            for (int i = 2; i < N; i++)
                prime[i] = true;

            for (int i = 2; i < N; i++)
            {
                if (prime[i])
                {
                    biggestPrimeDivisor[i] = i;

                    int limit = (N - 1) / i;

                    for (int p = 2; p <= limit; p++)
                    {
                        prime[p * i] = false;
                        biggestPrimeDivisor[p * i] = i;
                    }
                }
            }
        }

        public int Solve(int a, int b, int k)
        {
            return Enumerable.Range(a, b - a + 1).Count(x => primacity[x] == k);
        }
    }
}

#include<stdio.h>
#include<string.h>
#include<string>
#include<algorithm>
#include<set>
#include<queue>

using namespace std;

#define MAXN 10000010

bool com[MAXN];
int primes, prime[MAXN], phi[MAXN];
int from[MAXN];

void init(){
	memset(from,0,sizeof(from));
	phi[1] = 1;
	int n = 10000000;
	for (int i = 2; i <= n; ++i)
	{
	  if (!com[i])
	  {
		prime[primes++] = i;
		phi[i] = i-1;
	  }
	  for (int j = 0; j < primes && i*prime[j] <= n; ++j)
	  {
		com[i*prime[j]] = true;
		from[i * prime[j]] = prime[j];
		if (i % prime[j])
		  phi[i*prime[j]] = phi[i]*(prime[j]-1);
		else
		  { phi[i*prime[j]] = phi[i]*prime[j]; break; }
	  }
	}
}

set<int> pset;

void primacity2(int x){
	if(x == 1)
		return;
	if(!com[x]){
		pset.insert(x);
		return;
	}
	pset.insert(from[x]);
	int t = from[x];
	while(x % t == 0)
		x /= t;
	primacity2(x);
//	if(myset.size() != ret){
//		printf("error\n");
//		while(1);
//	}
//	return myset.size();
}

int primacity(int x){
	pset.clear();
	primacity2(x);
//	for(set<int>::iterator it = pset.begin();it != pset.end();++it)
//		printf("%d ",*it);
//	printf("\n");
	return pset.size();
}

int ans[10000010];
int pre[10000010][11];

int main(){
	init();
//	printf("%d\n",primacity(9));
//	return 0;
//	printf("%d\n",primes);
	for(int i = 0;i <= 10;++i){
		pre[1][i] = 0;
	}
	for(int i = 2;i <= 10000000;++i){
		ans[i] = primacity(i);
	//	printf("%d\n",ans[i]);
		for(int j = 0;j <= 10;++j){
			if(j == ans[i])
				continue;
			pre[i][j] = pre[i - 1][j];
		}
		pre[i][ans[i]] = pre[i - 1][ans[i]] + 1;
//		printf("%d\n",primacity(i));
	}



//	printf("done!\n");
	int T;
	scanf("%d",&T);
	for(int cas = 1;cas <= T;++cas){
		int n,m,k;
		int ret = 0;
		scanf("%d%d%d",&n,&m,&k);
		if(k > 10){
			ret = 0;
		}else{
			ret = pre[m][k] - pre[n - 1][k];
		}
		printf("Case #%d: %d\n",cas,ret);
	}
	return 0;	
}


#define _CRT_SECURE_NO_DEPRECATE
#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <functional>
#include <hash_map>
#include <iostream>
#include <iomanip>
#include <list>
#include <deque>
#include <queue>
#include <math.h>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
#define debug(x) cerr<<#x<<" = "<<(x)<<endl;
bool test = false;
const double pi=acos(-1.0);
const double eps=1e-11;
int breakpoint = 0;

const char rootdir[] = "C:\\HackerCup\\Homework";
void reopen(char* a) {
  char input[256], output[256];
  sprintf(input, "%s\\%s", rootdir, a);
  sprintf(output, "%s\\%s", rootdir, a);
  char *p = strstr(output, ".in");
  if (p) sprintf(p, ".out"); 
  else sprintf(&output[strlen(output)], ".out");
  debug(input);
  freopen(input, "r", stdin);
  if (!test) {
    debug(output);
    freopen(output,"w",stdout);
  }
}

int T;
int A;
int B;
int K;
const int M = 10000000 + 10;


int main(int argc, char* argv[]) {
  test = false;
  // reopen("homework_example_input.txt");
  reopen("homework.txt");

  bool* isprime = (bool *)malloc(M * sizeof(bool));
  memset(isprime, 1, M * sizeof(bool));

  for (int i = 2; i < M; i++) {
    if (!isprime[i]) continue;
    int j = i + i;
    while (j < M) { isprime[j] = false; j += i; }
  }

  if (test) {
    printf("primes: ");
    for (int i = 2; i < 100; i++) {
      if (isprime[i]) printf("%d ", i);
    }
    printf("\n");
  }

  int pcount = 0;
  for (int i = 2; i < M; i++) { if (isprime[i]) pcount++; }
  if (test) printf("Total %d primes\n", pcount);

  // number of distinct prime factors
  int * dist = (int *)malloc(M * sizeof(int));
  memset(dist, 0, M * sizeof(int));
  for (int i = 2; i < M; i++) {
    if (!isprime[i]) continue;
    int j = i;
    while (j < M) { dist[j]++; j += i; }
  }

  if (test) {
    for (int i = 2; i < 100; i++) {
      printf("%4d %d\n", i, dist[i]);
    }
  }

  scanf("%d\n", &T);
  for(int t=1; t<=T; t++) {
    scanf("%d %d %d\n", &A, &B, &K);
    if (test) printf("%d %d %d\n", A, B, K);
    int count = 0;
    for (int i = A; i<= B; i++) {
      if (dist[i] == K) count++;
      if (test && dist[i] == K && count < 20) printf("%d ", i);
    }
    printf("Case #%d: %d\n", t, count);
  }
   return 0;
}
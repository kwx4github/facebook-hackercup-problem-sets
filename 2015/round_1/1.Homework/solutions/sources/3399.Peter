/*ckpeteryu*/
#include<iostream>
#include<iomanip>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<climits>
#include<cmath>
#include<bitset>
#include<string>
#include<ctime>
#include<functional>
#include<map>
#include<set>
#include<vector>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;
#define FOR(i,s,e) for(int i=(s);i<(int)(e);i++)
#define FOE(i,s,e) for(int i=(s);i<=(int)(e);i++)
#define FOD(i,s,e) for(int i=(s);i>=(int)(e);i--)
#define FORVEC(i,a) for(int i=0;i<(int)((a).size());i++)
#define pb push_back
#define mp make_pair
#define CLR(s,x) memset(s,x,sizeof(s))
#define LL unsigned long long int
#define L unsigned long int

#define MAXN 10000001

int nt,A,B,K,ret;
bool isPrime[MAXN];
vector<int> primes;
int cnt[MAXN];
int sz;

int gcd(int a, int b){
	return b==0?a:gcd(b,a%b);
}

void sieve(){
	isPrime[0]=isPrime[1]=false;	
	fill(isPrime+2,isPrime+MAXN-1,true);
	fill(cnt,cnt+MAXN-1,0);	
	FOR(i,2,MAXN){
		if(isPrime[i]){
			for(int j=i+i;j<MAXN;j+=i){
				isPrime[j]=false;				
			}
			primes.pb(i);
			cnt[i]=1;
		}
	}
}

int solve(int a){
	int num=a;
	FOR(j,0,sz){
		if (primes[j]>=num)break;
		if (num%primes[j]==0){
			num/=primes[j];			
			if (gcd(primes[j],num)==1)
				return cnt[primes[j]]+cnt[num];
			else
				return solve(num);
		}
	}
	return 1;
}

int main(int argc, char **argv){
	//ios_base::sync_with_stdio(false);	
	#ifdef FHC		
		freopen("a1.txt","w",stdout);		
		//freopen("a2.txt","w",stdout);
		//freopen("a3.txt","w",stdout);
		//freopen("a4.txt","w",stdout);
		//freopen("a5.txt","w",stdout);
	#endif		
	
	//clock_t cl;
	//cl=clock();
	
	sieve();
	sz = primes.size();
	FOR(i,2,MAXN){
		if(!isPrime[i]){
			cnt[i]=solve(i);
		}
	}
	
	scanf("%d",&nt);
	FOE(k,1,nt){
		scanf("%d%d%d",&A,&B,&K);
		ret=0;
		FOE(i,A,B){
			if (cnt[i]==K) ret++;
		}
		printf("Case #%d: %d\n",k,ret);
	}
	
	//cl=clock()-cl;
	//cout<<endl<<"Time taken: "<<(((float)cl)/CLOCKS_PER_SEC)<<" second(s)"<<endl;	
	return 0;
}
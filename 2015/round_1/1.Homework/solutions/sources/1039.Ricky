#include <vector>
#include <iostream>
using namespace std;

const int MAX_DISTINCT_FACT = 28;
const int MAX_ROOT = 10000;
const int MAX_NUM = 10000002;

vector<int> generate_primes(int n) {
    vector<int> primes;
    vector<bool> is_prime(n, true);
    is_prime[0] = false;
    is_prime[1] = false;
    primes.push_back(2);
    for (int i = 4; i < n; i += 2) {
        is_prime[i] = false;
    }
    int i;
    for (i = 3; i * i < n; i += 2) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * i; j < n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    for ( ; i < n; i += 2) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}

int calc_primacity(const vector<int> &primes, int n) {
    int res = 0;
    int num_primes = primes.size();
    for (int i = 0; i < num_primes && n != 1; ++i) {
        int p = primes[i];
        if (n % p == 0) {
            ++res;
            while (n % p == 0) {
                n /= p;
            }
        }
    }
    if (n != 1) {
        ++res;
    }
    return res;
}

int main(int argc, char *argv[]) {
    int T;
    int A, B, K;
    vector<int> primes = generate_primes(MAX_ROOT);
    vector<vector<int> > hists(MAX_NUM, vector<int>(MAX_DISTINCT_FACT, 0));
    for (int i = 2; i < MAX_NUM; ++i) {
        for (int j = 0; j < MAX_DISTINCT_FACT; ++j) {
            hists[i][j] = hists[i - 1][j];
        }
        int primacity = calc_primacity(primes, i);
        ++hists[i][primacity];
    }
    cin >> T;
    for (int t = 0; t < T; ++t) {
        cin >> A >> B >> K;
        cout << "Case #" << (t + 1) << ": " << hists[B][K] - hists[A - 1][K] << endl;
    }
    return 0;
}

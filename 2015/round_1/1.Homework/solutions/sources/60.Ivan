import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.BitSet;
import java.util.Scanner;


public class Homework {
	
	static BitSet generateCompositeNumbersSet(int limit) {
		BitSet isComposite = new BitSet(limit+1);
		isComposite.set(0); isComposite.set(1);
		for (int i = 2, limitSqrt = 1 + (int)Math.sqrt(limit); i <= limitSqrt; i = isComposite.nextClearBit(i+1)) {
			for (int j = i*i; j <= limit; j+=i) {
				isComposite.set(j);
			}
		}
		return isComposite;
	}
	
	static int[] generatePrimes(int limit) {
		BitSet isComposite = generateCompositeNumbersSet(limit);
		int[] primes = new int[limit - isComposite.cardinality() + 1];
		for (int i = isComposite.nextClearBit(0), j = 0; i <= limit; i = isComposite.nextClearBit(i+1)) primes[j++] = i;
		return primes;
	}

	public static void main(String[] args) {
		try {
			Scanner in = new Scanner(new BufferedReader(new FileReader(new File("homework.txt")), 256 << 10));
			BufferedWriter out = new BufferedWriter(new FileWriter(new File("output.txt")), 256 << 10);
			int[] primes = generatePrimes(10000000);
			int[] primacity = new int[10000001];
			for (int prime : primes)
				for (int i = prime; i <= 10000000; i += prime)
					primacity[i]++;
			int testsNumber = in.nextInt();
			for (int testId = 1; testId <= testsNumber; testId++) {
				int a = in.nextInt(), b = in.nextInt(), p = in.nextInt();
				int count = 0;
				for (int i = a; i <= b; i++)
					if (primacity[i] == p) count++;
				out.append("Case #" + testId + ": ");
				out.append(count + "\n");
			}
			in.close();
			out.close();
		}
		catch (RuntimeException rte) {
			throw rte;
		}
		catch (Exception e) {
			System.err.println("Error:" + e.getMessage());
		}
	}
}

#!/usr/bin/python

import sys

MAXBOUND = (10**7)+1
PRIME_FACTORS = [None for k in xrange(MAXBOUND)]
PRIME_FACTORS[0] 

def prime_factors(INPUT_VAL):
    n = INPUT_VAL
    if PRIME_FACTORS[INPUT_VAL] is None:
        if n == 1:
            PRIME_FACTORS[INPUT_VAL] = []
            return PRIME_FACTORS[INPUT_VAL]

        i = 2
        factors = []
        while i * i <= n:
            if n % i:
                i += 1
            else:
                n //= i
                factors.append(i)
                #print n, PRIME_FACTORS
                factors.extend(prime_factors(n))
                PRIME_FACTORS[INPUT_VAL] = list(factors)
                return PRIME_FACTORS[INPUT_VAL]
        if n > 1:
            factors.append(n)
        PRIME_FACTORS[INPUT_VAL] = list(factors)
        return PRIME_FACTORS[INPUT_VAL]
    else:
        return PRIME_FACTORS[INPUT_VAL]

def primacity_function(x):
    if x == 0:
        return 0
    elif x == 1:
        return 0
    else:
        return len(set(prime_factors(x)))

def problem(A, B, K, primVec):
    f = filter(lambda e: e == K, primVec[A:B+1])
    return len(f)

def main_problem(problems):
    primacityVector = [primacity_function(x) for x in xrange(0, MAXBOUND)]
    i = 1
    for (A,B,K) in problems:
        result = problem(A, B, K, primacityVector)
        print("Case #{i}: {r}".format(i=i, r=result))
        i += 1

def parse_input(filename):
    with open(filename, 'r') as ifn:
        fc = ifn.read()
    numbers = map(lambda s: int(s.strip()), fc.split())
    T = numbers[0]
    idx = 1
    problems = list()
    for i in xrange(T):
        problems.append((numbers[idx], numbers[idx+1], numbers[idx+2]))
        idx += 3
    assert(idx == len(numbers))

    return problems

if __name__ == '__main__':
    filename = sys.argv[1]

    problems = parse_input(filename)
    main_problem(problems)

    """
    import cProfile
    cProfile.run('main_problem(problems)')
    """


#include <assert.h>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

using namespace std;

typedef unsigned int UINT;
typedef long long unsigned int ULL;
typedef long long int LL;

const int MAXP = 10000;
const int MAXN = 10000001;

UINT primes[MAXP];
ULL primacity[MAXN];

int main()
{
  int num_primes = 0;
  for (UINT i = 2; i*i <= 10001000; i++) {
      bool is_prime = true;
      for (UINT j = 0; primes[j]*primes[j] <= i && j < num_primes; j++) {
          if (i % primes[j] == 0) {
              is_prime = false;
              break;
          }
      }
      if (is_prime) {
          primes[num_primes++] = i;
          assert(num_primes < MAXP);
      }
  }
  memset(primacity, 0, sizeof(primacity));

  int T;
  scanf("%d", &T);
  for (int t = 0; t < T; t++) {
    printf("Case #%d: ", t+1);
    UINT A, B, K;
    scanf("%u %u %u", &A, &B, &K);
    ULL count = 0;
    for (UINT i = A; i <= B; i++) {
        if (!primacity[i]) {
          for (UINT j = 0; primes[j] <= i && j < num_primes; j++) {
              if (i % primes[j] == 0) {
                  primacity[i]++;
              }
          }
        }
        if (primacity[i] == K) {
            count++;
        }
    }
    printf("%llu\n", count);
  }
  return 0;
}

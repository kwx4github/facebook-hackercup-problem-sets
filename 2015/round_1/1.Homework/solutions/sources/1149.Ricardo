#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include <algorithm>
#include <vector>

#define MAX 10000001

using namespace std;

int sieve[MAX];

map< int, vector<int> > prims;

void prepare() {
    
    memset(sieve, 0, sizeof(sieve));
    sieve[0] = sieve[1] = 0;
    for (int i = 2 ; i < MAX ; i++) {
        if (!sieve[i]) {
            sieve[i] = 1;
            for (int j = i << 1 ; j < MAX ; j += i)
                sieve[j]++;
        }
        prims[sieve[i]].push_back(i);
    }
    
}

int bin_search(int k, int first, int last, int item, int mode) {
    
    int index;
    
    if (first > last)
        index = mode ? last : first;
    else {
        int mid = (first + last)/2;
        
        if (prims[k][mid] == item)
            index = mid;
        else {
            if (item < prims[k][mid])
                index = bin_search(k, first, mid-1, item, mode);
            else
                index = bin_search(k, mid+1, last, item, mode);
        }
    }
    return index;
}

int main() {
    
    int t;
    
    prepare();
    
    cin >> t;
    for (int c = 1 ; c <= t ; c++) {
        cout << "Case #" << c << ": ";
        int a, b, k, i, j;
        cin >> a >> b >> k;
        sort(prims[k].begin(), prims[k].end());
//        for (i = 0 ; i < prims[k].size() && prims[k][i] < a ; i++);
//        for (j = prims[k].size()-1 ; j >= 0 && prims[k][j] > b ; j--);
        i = bin_search(k, 0, prims[k].size()-1, a, 0);
        j = bin_search(k, 0, prims[k].size()-1, b, 1);
        cout << (j - i + 1) << endl;
        
    }
    
}

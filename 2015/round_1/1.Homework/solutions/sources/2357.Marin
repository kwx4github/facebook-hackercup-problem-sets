import java.util.*;
import java.io.*;

public class Main {
  
  private static final String NL = System.getProperty("line.separator");
  public static void main(String[] args) throws IOException {
    
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    int N_MAX = (int) Math.pow(10, 7);
    int[] F = new int[N_MAX + 1];
    int SQRT = (int) Math.sqrt(N_MAX);

    for (int k = 2; k <= N_MAX; k++) {
      if (F[k] == 0) {
        if (k <= SQRT) {
          for (int j = 1; j * k <= N_MAX; j++) {
            if (F[k * j] == 0)
              F[k * j] = k;
          }
        } else {
          F[k] = k;
        }
      }
    }
    
    int[][] data = new int[N_MAX + 1][10 + 1];
    
    for (int k = 2; k <= N_MAX; k++) {
      int numFactors = getNumFactors(F, k);
      for (int i = 1; i < 10; i++) {
        data[k][i] = data[k - 1][i];
        if (i == numFactors) {
          data[k][i]++; 
        }
      }
    }
    
    int T = Integer.parseInt(br.readLine());
    StringBuilder sb = new StringBuilder();
    
    for (int t = 0; t < T; t++) {
      String[] abk = br.readLine().split(" ");
      int A = Integer.parseInt(abk[0]);
      int B = Integer.parseInt(abk[1]);
      int K = Integer.parseInt(abk[2]);
      int result;
      if (K > 10) {
        result = 0;
      } else {
        result = data[B][K] - data[A - 1][K];
      }
      sb.append("Case #" + (t + 1) + ": " + result);
      sb.append(NL);
//      int brute = brute(F, A, B, K);
//      sb.append("Case (Brute) #" + (t + 1) + ": " + brute(F, A, B, K));
//      sb.append(NL);
//      sb.append((brute == result) ? "OK" : "FAIL");
//      sb.append(NL);
    }
    System.out.println(sb.toString());
  }
  
  private static int brute(int[] F, int A, int B, int K) {
    int cnt = 0;
    for (int k = A; k <= B; k++) {
      int n = getNumFactors(F, k);
      if (n == K) cnt++;
    }
    return cnt;
  }
  private static int getNumFactors(int[] F, int A) {
    boolean go = true;
    int cnt = 0;
    int curr = A;
    Set<Integer> set = new HashSet<Integer>();
    while (go) {
      int next = F[curr];
      if (!set.contains(next)) {
        set.add(next);
        cnt++;
      }
      if (curr == next) {
        break;
      }
      curr /= next;
    }
    return cnt;
  }
}
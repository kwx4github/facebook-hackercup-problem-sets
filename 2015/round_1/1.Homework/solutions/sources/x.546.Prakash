#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


vector< vector <int> > arr(10);


int primacity[10000500];
bool isPrime[10000500];

void sieve(){
	int i,x=sqrt(10000500),j;
	memset(primacity,0,sizeof(primacity));
	memset(isPrime,true,sizeof(isPrime));
	isPrime[0]=isPrime[1]=false;
	for(i=2;i<=x;i++){
		if(isPrime[i]){
			primacity[i]++;
			for(j=i+i;j<10000500;j+=i){
				primacity[j]++;
				isPrime[j] = false;
			}
		}
	}
	for(;i<10000500;i++)
		if(isPrime[i])
			primacity[i]++;

}

void preCompute(){
	int i,j;
	for(i=0;i<9;i++)
		arr[i].push_back(-1);

	for(i=2;i<=1e7;i++)
		arr[primacity[i]].push_back(i);
}


int findPos(int &num, int &k, int left, int right){
	if(left > right)
		return -1;

	int mid = (left+right)/2;

	if(num == arr[k][mid])
		return mid;

	if(arr[k][mid] < num && mid+1 == arr[k].size())
		return mid;

	if(arr[k][mid] < num && arr[k][mid+1] > num)
		return mid;

	if(arr[k][mid] < num)
		return findPos(num,k,mid+1,right);

	return findPos(num,k,left,mid-1);
}



int main(){
	ios::sync_with_stdio(false);
//	freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);
	int t,a,b,k,c=1,i,j;
	sieve();
	preCompute();

	/*
	for(i=0;i<9;i++){
		cout<<i<<" : ";
		for(j=1;j<20;j++)
			if(j<arr[i].size())
				cout<<arr[i][j]<<" ";
		cout<<endl;
	}*/


	cin>>t;
	while(t--){
		cout<<"Case #"<<c++<<": ";
		cin>>a>>b>>k;
		if(k>8){
			cout<<0<<endl; continue;
		}
		int left = findPos(a,k,0,arr[k].size()-1);
		int right = findPos(b,k,0,arr[k].size()-1);
		//cout<<left<<" "<<right<<endl;
		int ans = right-left;
		if(arr[k][left]==a)
			ans++;
		cout<<ans<<endl;
	}


	return 0;
}
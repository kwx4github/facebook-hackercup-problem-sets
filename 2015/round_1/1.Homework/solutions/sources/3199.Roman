#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
typedef long long ll;

ll MAXN = 10000047;
//ll MAXN = 1000;

vector<bool> is_prime(MAXN, true);
vector<ll> primes;
vector<ll> primacities(MAXN, 0);
vector<vector<ll>> stats;
vector<vector<ll>> prefixes;

int main()
{
    // Generate all primes up to 10^7
    cerr << "Generating primes" << endl;
    is_prime[0] = false;
    is_prime[1] = false;
    for (ll i = 2; i*i < MAXN; i++) {
        if (is_prime[i]) {
            for (ll j = 2; j*i < MAXN; j++) {
                is_prime[j*i] = false;
            }
        }
    }
    for (ll i = 0; i < MAXN; i++) {
        if (is_prime[i]) {
            primes.push_back(i);
            primacities[i] = 1;
        }
    }

    cerr << "Generating primacities " << endl;
    // Generate primacities
    primacities[0] = 0;
    primacities[1] = 0;
    for (ll i = 3; i < MAXN; i++) {
        if (i % 100000 == 0) {
            cerr << "Progress: " << i/100000 << "%" << endl;
        }
        for (ll j = 0; j < primes.size() && primes[j] < i && primes[j] * primes[j] < MAXN; j++) {
            // if divisible by said prime
            if (i % primes[j] == 0) {
                ll remnant = i;
                while (remnant % primes[j] == 0) {
                    remnant /= primes[j];
                }
                primacities[i] = 1 + primacities[remnant];
                break;
            }
        }
    }

    cerr << "Generating prefix sums" << endl;
    // Nothing can have greater primacity than 20 if it is below 10'000'000
    for (ll i = 0; i < 20; i++) {
        stats.push_back(vector<ll>());
        prefixes.push_back(vector<ll>());
        // Count all the stuff with primacities i
        for (ll j = 0; j < MAXN; j++) {
            if (primacities[j] == i) {
                stats[i].push_back(j);
            }
        }
        // Calculate prefix sums (how many numbers with primacity less I less than J are there..
        ll last = 0;
        ll ctr = 0;
        prefixes[i].push_back(0);
        for (ll j : stats[i]) {
            for (ll k = last; k < j; k++) {
                prefixes[i].push_back(ctr);
            }
            last = j;
            ctr++;
        }
        for (ll k = last; k < MAXN; k++) {
            prefixes[i].push_back(ctr);
        }
    }

    cerr << "Ready set go!" << endl;
    // Ok all the precomputations are ready.. now solve the test cases!
    int T; cin >> T;
    for (int I = 1; I <= T; I++) {
        int a, b, k; cin >> a >> b >> k;
        cout << "Case #" << I << ": " << prefixes[k][b+1] - prefixes[k][a] << endl;
    }
    return 0;
}


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.StringTokenizer;

public class _3 {
	static int[] primeFactor;
	static int MAXN = 10000010;

	private static void primeFactor() {
		primeFactor = new int[MAXN];
		primeFactor[0] = primeFactor[1] = -1;
		for (int i = 2; i * i < MAXN; i++)
			if (primeFactor[i] == 0)
				for (int j = i * i; j < MAXN; j += i)
					primeFactor[j] = i;
		for (int i = 2; i < MAXN; i++)
			if (primeFactor[i] == 0)
				primeFactor[i] = i;
	}

	private static int factorize(int n) {
		HashSet<Integer> pfactors = new HashSet<Integer>();
		while (primeFactor[n] != -1) {
			pfactors.add(primeFactor[n]);
			n /= primeFactor[n];
		}
		return pfactors.size();
	}

	public static void main(String[] args) throws IOException {
		primeFactor();
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 2; i <= 10000000; i++)
			map.put(i, factorize(i));

		FileReader in = new FileReader("homework.txt");
		BufferedReader buff = new BufferedReader(in);
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
				"homework.out")));
		
		int T = Integer.parseInt(buff.readLine());
		StringTokenizer st;
		for (int c = 1; c <= T; c++) {
			st = new StringTokenizer(buff.readLine());
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			int K = Integer.parseInt(st.nextToken());

			int ans = 0;

			for (int i = A; i <= B; i++) {
				int sz = map.get(i);
				if (sz == K)
					ans++;
			}

			out.println("Case #" + c + ": " + ans);
		}

		buff.close();
		out.close();

	}
}

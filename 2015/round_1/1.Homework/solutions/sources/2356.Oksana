import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Scanner;

public class Homework {
    public static void main(final String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = 10000001;
        // int n = 100000;

        long[] divs = new long[n];

        Long[] primes = getPrimes(n);

        HashMap<Long, Integer> map = new HashMap<Long, Integer>();
        solve(divs, primes, 1L, 0, map);

        int T = sc.nextInt();
        int step = 0;
        while (++step <= T) {

            int from = sc.nextInt();
            int to = sc.nextInt();
            int k = sc.nextInt();
            int cnt = 0;
            for (int i = from; i <= to; i++) {
                if (divs[i] == k) {
                    cnt++;
                }
            }

            System.out.println(String.format("Case #%s: %s", step, cnt));
        }
    }

    private static void solve(final long[] divs, final Long[] primes, final long curr, final int idx,
            final HashMap<Long, Integer> map) {
        if (curr >= divs.length) {
            return;
        }

        divs[(int) curr] = map.keySet().size();

        for (int i = idx; i < primes.length; i++) {

            long next = curr * primes[i];

            if (next >= divs.length) {
                break;
            }

            Integer val = map.get(primes[i]);
            if (val == null) {
                val = 0;
            }

            val++;
            map.put(primes[i], val);
            solve(divs, primes, next, i, map);

            val--;
            if (val == 0) {
                map.remove(primes[i]);
            } else {
                map.put(primes[i], val);
            }

        }

    }

    private static Long[] getPrimes(final int n) {
        boolean[] prime = new boolean[n + 1];
        LinkedList<Long> res = new LinkedList<Long>();

        Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (long i = 2; i <= n; ++i) {
            if (prime[(int) i]) {
                res.add(i);
                if (i * i <= n) {
                    for (long j = i * i; j <= n; j += i) {
                        prime[(int) j] = false;
                    }
                }
            }
        }

        return res.toArray(new Long[0]);
    }
}

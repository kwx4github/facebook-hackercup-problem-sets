#include <string>
#include <vector>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <sstream>
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <queue>

using namespace std;

ifstream fi("a.txt");
ofstream fo("a.out");

int ntest;

int a, b, k;
int prime_div[10000001];
int f[10][10000001];
int max_num;
vector< bool > seive(10000001, true);

vector<int> create_sieve(int);

int main() {
  fi >> ntest;

  vector<int> prime = create_sieve(10000001);

  for (int x = 1; x < 10000001; x ++) {
    for (int i = 1; i < 10; i ++) {
      f[i][x] = f[i][x - 1];
    }
    if (seive[x]) {
      prime_div[x] = 1;
      f[1][x] ++;
      continue;
    }
    int count = 0;
    int y = x;
    for (int i = 0; i < prime.size(); i ++) {
      if (prime[i] > sqrt(y) + 10) {
       	break;
      }
      if (y % prime[i] == 0) {
	count ++;
	while (y % prime[i] == 0) {
	  y = y / prime[i];
	}
      }
      if (seive[y]) {
	break;
      }
    }
    if (y > 1) {
      count ++;
    }
    prime_div[x] = count;
    
    f[count][x] ++;
  }

  for (int t = 1; t <= ntest; t++) {
    fi >> a >> b >> k;
    int result = 0;
    if (k <= 8) {
      result = f[k][b] - f[k][a - 1];
    }

    fo << "Case #" << t << ": " << result << endl;
  }
  fi.close();
  fo.close();
  return 0;
}

vector< int > create_sieve(int maxRange) {
  vector< int > prime;
  seive[0] = false;
  seive[1] = false;
  for (int i = 2; i <= floor(sqrt(maxRange)) + 1; i ++) 
    if (seive[i]) {
      int k = i;
      seive[i] = true;
      while (i * k <= maxRange) {
        seive[i * k] = false;
        k ++;
      }
    }
 
  for (int i = 2; i <= maxRange; i ++)
    if (seive[i]) {
      prime.push_back(i);
    }
 
  return prime;
}

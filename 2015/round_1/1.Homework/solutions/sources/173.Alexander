#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const int MAXN = 10005000;  

int t;
int n, ans[MAXN + 1], lp[MAXN + 1];
int a, b, k, cur;
vi primes;

int main() {

	for (int i = 2; i <= MAXN; i++) {
		if (lp[i] == 0) {
			lp[i] = i;
			primes.pb(i);
		}
		for (int j = 0; j < (int)primes.size() && primes[j] <= lp[i] && i * primes[j] <= MAXN; j++)
			lp[i * primes[j]] = primes[j];
	}
	
	ans[1] = 0;
	for (int i = 2; i <= MAXN; i++) {
		if (lp[i] == 0)
			ans[i] = 1;
		else {
			int j = i;
			while (j % lp[i] == 0)
				j /= lp[i];
			ans[i] = ans[j] + 1;	
		}
	}
    
	cin >> t;
	forn(tt, t) {
		cin >> a >> b >> k;
		printf("Case #%d: ", tt + 1); 
		
		cur = 0;
		for (int i = a; i <= b; i++)
			cur += ans[i] == k;
		cout << cur << '\n';
	}
	
	return 0;
}
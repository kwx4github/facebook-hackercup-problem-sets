import java.io.*;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Function;

/*
This solution uses Google Guava: https://github.com/google/guava
 */
public class Homework {

    private int[] allOmega = new int[10000001];

    static class Assert {
        static void check(boolean e) {
            if (!e) {
                throw new Error();
            }
        }
    }

    Scanner in;
    PrintWriter out;

    String solveOne(int A, int B, int K) {

        int counter = 0;
        if (K > B) {
            return "0";
        }

        for (int i = A; i <= B; i++) {
            int omega = allOmega[i];
            if (omega == K) {
                counter++;
            }
        }

        return String.valueOf(counter);
    }

    private void calculateOmega() {
        Arrays.fill(allOmega, 0);
        for (int i = 2; i < allOmega.length; i++) {
            if (allOmega[i] == 0) {
                for (int j = i; j < allOmega.length; j += i) {
                    allOmega[j]++;
                }
            }
        }
    }

    void solve() {
        calculateOmega();
        int nTests = in.nextInt();
        in.nextLine();
        for (int iTest = 1; iTest <= nTests; iTest++) {
            int A = in.nextInt();
            int B = in.nextInt();
            int K = in.nextInt();
            out.printf("Case #%d: %s\n", iTest, solveOne(A, B, K));
        }
    }

    void run() throws FileNotFoundException {
        in = new Scanner(new FileInputStream("input.txt"));
        out = new PrintWriter(new FileOutputStream("output.txt"));
        solve();
        out.close();
    }

    public static void main(String args[]) throws FileNotFoundException {
        new Homework().run();
    }
}
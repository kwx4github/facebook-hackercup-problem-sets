#pragma comment(linker, "/STACK:500000000")
#include <algorithm>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

#define y0 y123
#define y1 y1234
#define ll long long
const double PI = acos(-1.0);
const double EPS = 1e-9;
const int INF  = 2e9;

int nextInt() { int n; scanf("%d", &n); return n; }

const int N = (int) (1e7);
const int M = 8;
int minP[N + 1];
int sum[N + 1][M + 1];

int f(int n) {
	vector<int> primes;
	while (n != 1) {
		primes.push_back(minP[n]);
		n /= minP[n];
	}
	sort(primes.begin(), primes.end());
	int res = 1;
	for (int i = 1; i < primes.size(); ++i) {
		if (primes[i] != primes[i - 1]) {
			++res;
		}
	}
	return res;
}

int main() {
	freopen("input.in", "rt", stdin);
	freopen("output.out", "wt", stdout);
	for (int i = 2; i * i <= N; ++i) {
		if (minP[i] == 0) {
			for (int j = i * i; j <= N; j += i) {
				minP[j] = i;
			}
		}
	}
	for (int i = 1; i <= N; ++i) {
		if (minP[i] == 0) {
			minP[i] = i;
		}
	}
	for (int i = 2; i <= N; ++i) {
		for (int j = 1; j <= M; ++j) {
			sum[i][j] = sum[i - 1][j];
		}
		++sum[i][f(i)];
	}
	int t = nextInt();
	for (int tt = 1; tt <= t; ++tt) {
		int l = nextInt();
		int r = nextInt();
		int k = nextInt();
		printf("Case #%d: ", tt);
		if (k > M) {
			printf("0\n");
		} else {
			printf("%d\n", sum[r][k] - sum[l - 1][k]);
		}
	}
	return 0;
}
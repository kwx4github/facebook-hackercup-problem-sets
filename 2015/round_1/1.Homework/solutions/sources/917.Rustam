#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <string.h>
#include <cstdio>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz(x) ((int)((x).size()))
#define rep(i, N) for (int i = 0; i < N; ++i)
#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();++it)
typedef long long lint;
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;

const int MAXN = 1000 * 1000 * 10;
//const int MAXN = 100;
int A[MAXN + 10];
int C1[MAXN + 10];

void sieve() {
	for (lint i = 2; i <= MAXN; ++i) {
		if (A[i]) {
			continue;
		}
		for (lint j = i * i; j <= MAXN; j += i) {
			if (A[j] == 0) {
				A[j] = i;
			}
		}

	}
}

void calc_c1() {
	for (int i = 2; i <= MAXN; ++i) {
		lint t = i;
		C1[i] = 0;
		while (true) {
			lint d = A[t];
			if (d == 0) {
				if (t > 1) ++C1[i];
				break;
			}
			while (t % d == 0) {
				t /= d;
			}
			++C1[i];
		}
	}
}

int calc(lint x) {
	int res = 0;
	if (x % 2 == 0) {
		res = 1;
		while (x % 2 == 0) { 
			x /= 2;
		}
	}

	lint d = 3;
	while (d * d <= x) {
		int c = 0;
		while (x % d == 0) {
			c++;
			x /= d;
		}
		if (c) ++res;
		d += 2;
	}
	if (x > 1) ++res;
	return res;
}


void solve(int tst) {
	int A, B, K;
	cin >> A >> B >> K;
	int ans = 0;	
	for (int i = A; i <= B; ++i) {
		if (C1[i] == K) {
			++ans;
		}
	}	
	printf("Case #%d: %d\n", tst, ans);
}

int main() {
	sieve();
	calc_c1();
	// for (int i = 2; i <= MAXN; ++i) {
	// 	int t = calc(i);
	// 	if (t != C1[i]) {
	// 		printf("%d %d %d\n", i, t, C1[i]);
	// 		return 0;
	// 	}
	// }
	// puts("ok");
	// return 0;
	freopen("input.txt", "r", stdin);
	int tst;
	cin >> tst;
	for (int i = 1; i <= tst; ++i) {
		solve(i);
	}
    return 0;
}

#include <iostream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <climits>
#include <cassert>
using namespace std;
typedef long long ll;
#define FILE_IN "homework.txt"
#define FILE_OUT "output.txt"
          
const int MAXN = 1e7;

vector<vector<int> > v;
int A, B, K, T;
int primacity[MAXN + 1], max_primacity;
bool prime[MAXN];
inline void factorize(int num) {
	int number = num, cnt = 0;
	for (int i = 2; i * i <= num; i++)
		if(num % i == 0) {
			cnt++;
			while(true) {
				if(num % i)	break;
				num /= i;
			}
		}
	if(num != 1) cnt++;
	primacity[number] = cnt;
}
void init() {
	v.resize(10);
	for (int i = 0; i < 10; i++)
		v[i].push_back(-1);
	fill(prime, prime + MAXN + 1, true);
	prime[1] = false;
	for (int i = 2; i <= MAXN; i++)
		if(prime[i] && 1ll * i * i <= MAXN)
			for (int j = i * i; j <= MAXN; j += i)
				prime[j] = false;
				
	for (int i = 2; i <= MAXN; i++) {
		if(prime[i])	primacity[i] = 1;
		else	factorize(i);
		v[primacity[i]].push_back(i);
	}
	for (int i = 0; i < 10; i++)
		v[i].push_back(MAXN + MAXN);
}
 
int solve() {
	if(K > 8)	return 0;
	int l = 0, r = (int)v[K].size() - 1, mid, ansl = -1, ansr = -1;
	while(l <= r) {
		mid = (l + r) >> 1;
		if(v[K][mid] < A)	ansl = mid, l = mid + 1;
		else r = mid - 1;
	}
	l = 0, r = (int)v[K].size() - 1;
	while(l <= r) {
		mid = (l + r) >> 1;
		if(v[K][mid] > B)	ansr = mid, r = mid - 1;
		else l = mid + 1;
	}
	return ansr - ansl - 1;

}
int main()
{
	freopen(FILE_IN, "r", stdin);
	freopen(FILE_OUT, "w", stdout);
	init();               		
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		scanf("%d %d %d", &A, &B, &K);
		printf("Case #%d: %d\n", tc, solve());
	}

	return 0;
}
#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#define db(v) cout << #v << ": " << v << endl
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define taskname "XXXXXXXXXXXXXXXXXXXXXXXX" // CHANGE!!!
typedef long long i64;
const int maxN = 1e7 + 7;

using namespace std;

int tree[12][maxN];

int get(int t, int r)
{
    int sum = 0;
    for (; r >= 0; r = (r & (r + 1)) - 1)
        sum += tree[t][r];
    return sum;
}

int query(int t, int l, int r)
{
    if (t >= 12) return 0;
    if (!l)
        return get(t, r);
    return get(t, r) - get(t, l - 1);
}

void update(int t, int r, int val)
{
    for (; r < maxN; r |= (r + 1))
        tree[t][r] += val;
}

vector<int> primes;
bool notPrime[maxN];

void calcPrimes()
{
    notPrime[0] = notPrime[1] = true;
    fore(i, 2, maxN - 1)
    {
        if (notPrime[i]) continue;
        primes.pb(i);
        for (int j = 2 * i; j < maxN; j += i)
            notPrime[j] = true;
    }
}

void precalcPrimicy()
{
    fore(i, 1, maxN - 1)
    {
        int n = i;
        int k = 0;
        for (auto pr : primes)
        {
            if (pr * 1ll * pr > i) break;
            if (n % pr == 0)
                ++k;
            while (n % pr == 0)
                n /= pr;
        }
        if (!notPrime[n])
            ++k;
        // there is number with primacy - k in i position
        update(k, i, 1);
    }
}

void solve()
{
    int T; cin >> T;
    fore(t, 1, T)
    {
        int a, b, k;
        cin >> a >> b >> k;
        cout << "Case #" << t << ": " << query(k, a, b) << '\n';
    }
}

/* STRESS TESTING!!!!
 *
 *
typedef vector<int> Data;
vector<int> solve(const vector<Data> data)
{
    vector<int> res;
    int T = data.size();
    forn(t, T)
    {
        db(t);
        int a = data[t][0],
            b = data[t][1],
            k = data[t][2];
        db(a); db(b); db(k);
        res.pb(query(k, a, b));
    }
    return res;
}

int getNumberOfPrimes(int n)
{
    int i = n;
    int k = 0;
    for (auto pr : primes)
    {
        if (pr *1ll * pr > i) break;
        if (n % pr == 0)
            ++k;
        while (n % pr == 0)
            n /= pr;
    }
    if (!notPrime[n])
        ++k;
    return k;
}

vector<int> correctSolve(const vector<Data> data)
{
    vector<int> res;
    forn(t, data.size())
    {
        db(t);
        int a = data[t][0],
            b = data[t][1],
            k = data[t][2];
        db(a); db(b); db(k);
        int cnt = 0;
        fore(i, a, b) if (getNumberOfPrimes(i) == k)
            ++cnt;
        res.pb(cnt);
    }
    return res;
}

bool check(const vector<Data> data)
{
    db("start check:");
    vector<int> mine = solve(data);
    vector<int> correct = correctSolve(data);
    db("compare:");
    forn(i, data.size())
    {
        db(mine[i]);
        db(correct[i]);
        if (mine[i] != correct[i])
            return false;
    }
    return true;
}

void test()
{
    vector<Data> data;
    forn(i, 10)
    {
        int a = 1 + rand() % ((int)1e7 - 1);
        int b = 1 + rand() % ((int)1e7 - 1);
        int k = 1 + rand() % 15;
        if (a > b) swap(a, b);
        db(a); db(b); db(k);
        data.pb({a, b, k});
    }
    db("start test:");
    assert(check(data));
}
*/

int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    calcPrimes();
    precalcPrimicy();
    solve();
    //test();

#ifdef HOME
    cerr << "\nTime elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

import java.util.*;
public class Homework {

// 	1 ≤ T ≤ 100 
// 2 ≤ A ≤ B ≤ 10^7 
// 1 ≤ K ≤ 10^9 

    static Scanner sc = new Scanner(System.in);
    static ArrayList<Integer> primes = new ArrayList<Integer>();
    static int[] primacy = new int[10_000_001];
    
    public static void main(String[] str) {

    		// Primes

    	for (int i = 2; i <= 10_000_000; i++)
    		if (isPrime(i)) {
    			primes.add(i);

    			for (int j = i; j <= 10_000_000; j += i)
    				primacy[j]++;
    		}

    	int t = Integer.valueOf(sc.nextLine());

    	// cases

    	for (int i = 1; i <= t; i++) {
    		String[] line = sc.nextLine().split(" +");
    		int a = Integer.valueOf(line[0]);
    		int b = Integer.valueOf(line[1]);
    		int k = Integer.valueOf(line[2]);
    		System.out.println("Case #" + i + ": " + f(a, b, k));
    	}
  

    }

    static int f(int a, int b, int k) {

    	int total = 0;


    	for (int i = a; i <= b; i++)
    		if (primacy[i] == k)
    			total++;

    	return total;
    }

    /* This code has been tested up to aprox 50million to work, however note that it does become unstable. */
    
    public static boolean isPrime(int n) {
        
        if (n <= 1) {
            return false;
        } else if (n <= 3) {
            return true;
        } else if (n % 2 == 0) {
            return false;
        } else {
            return millerRabin(n);
        }
    }
    
    // part of isPrime
    public static long modpow(long x, long c, long m) { 
        
        long result = 1;
        long aktpot = x;
        while (c > 0) {
            if (c % 2 == 1) {
                result = (result * aktpot) % m;
            }
            aktpot = (aktpot * aktpot) % m;
            c /= 2;
        }
        return result;
    }
    
    // part of isPrime
    public static boolean millerRabin(long n) {
        
    	long[] as = {2, 7, 61};
    
        outer:
        for (long a : as) {
            if (a < n) {
                long s = 0;
                long d = n - 1;
                while (d % 2 == 0) {
                    s++;
                    d /= 2;
                }
    
                long x = modpow(a, d, n);
                if (x != 1 && x != n - 1) {
                    for (long r = 1; r < s; r++) {
                        x = (x * x) % n;
                        if (x == 1) {
                            return false;
                        }
                        if (x == n - 1) {
                            continue outer;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

}
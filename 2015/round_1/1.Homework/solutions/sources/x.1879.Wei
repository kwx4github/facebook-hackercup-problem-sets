#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

void Prime_5(const int n, vector<int> &primeTable)
{
    primeTable.clear();
    primeTable.push_back(2);

    // init
    const int size = (n-3)/2 + 1;       // odd num: 2i + 3 (3, 5, 7, 9 ...)
    vector<bool> prime_tool(size, true);       // from 3 to n

    // sieve
    for (int i = 0; i < size; ++i) {
        if (false == prime_tool[i]) continue;
        int dist = 2 * i + 3;       // odd begin with 3
        for (int j = i + dist; j < size; j += dist) {
            prime_tool[j] = false;
        }   
    }

    for (int i = 0; i < size; ++i) {
        if (prime_tool[i]) primeTable.push_back(2 * i + 3);
    }   
}

bool Check(int n, int K, vector<int> &primeTable) {
    bool used = false;
    for (int i = 0; i < primeTable.size() && n >= primeTable[i]; ) {
        if (0 == n % primeTable[i]) {
            n /= primeTable[i];
            used = true;
        } else {
            if (used) --K;
            used = false;
            ++i;
        }
        if (K < 0) return false;
    }
    if (used) --K;
    return 0 == K;
}
int Calc(int64_t A, int64_t B, int64_t K) {
    vector<int> primeTable;
    Prime_5(10000000, primeTable);

    int ret = 0;
    for (int i = A; i <= B; ++i) {
        if (Check(i, K, primeTable)) ++ret;
    }
    return ret;
}

int main(int argc, char *argv[])
{
    int64_t T, A, B, K;
    cin >> T;
    for (int idx = 0; idx < T; ++idx) {
        cin >> A >> B >> K;
        cout << "Case #" << idx + 1 << ": " << Calc(A, B, K) << endl; 
    }

    return 0;
}

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;


public class ProblemA {

	public static void main(String[] args) throws IOException {
		
		ProblemA solver = new ProblemA();
		solver.init();
		solver.solve();
	}
	
	int[] primacy;

	private void init() {
		int N = 10000000;
		int[] leastDivisor = new int[N + 1];
		for (int d = 2; d * d <= N; d++) {
			if (leastDivisor[d] == 0) {
				leastDivisor[d] = d;
				for (int k = d * d; k <= N; k += d) {
					if (leastDivisor[k] == 0) {
						leastDivisor[k] = d;
					}
				}
			}
		}
		primacy = new int[N + 1];
		for (int d = 2; d <= N; d++) {
			if (leastDivisor[d] == 0) leastDivisor[d] = d;
			int k = d/leastDivisor[d];
			primacy[d] = primacy[k];
			if (k % leastDivisor[d] != 0) primacy[d]++;
		}
	}
	
	private void solve() throws IOException {
		 
		Reader in = new Reader(System.in);
		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
		
		int T = in.nextInt();
		
		for(int t = 1; t <= T; t++) {
			
			int A = in.nextInt();
			int B = in.nextInt();
			int K = in.nextInt();
			int r = 0;
			for (int i = A; i <= B; i++) if(primacy[i] == K) r++;
			
			out.println("Case #" + t + ": " + r);
		}
		
		out.flush();
		out.close();
	}
	
	private static class Reader {
		
	    BufferedReader reader;
	    StringTokenizer tokenizer;
	
	    /** call this method to initialize reader for InputStream */
	    Reader(InputStream input) {
	        reader = new BufferedReader(
	                     new InputStreamReader(input) );
	        tokenizer = new StringTokenizer("");
	    }
	
	    /** get next word */
	    public String next() throws IOException {
	        while ( ! tokenizer.hasMoreTokens() ) {
	            //TODO add check for eof if necessary
	            tokenizer = new StringTokenizer(
	                   reader.readLine() );
	        }
	        return tokenizer.nextToken();
	    }
	    
	    public String nextLine() throws IOException {
	    	return reader.readLine();
	    }
	
	    public int nextInt() throws IOException {
	        return Integer.parseInt( next() );
	    }
	    
	    public double nextDouble() throws IOException {
	        return Double.parseDouble( next() );
	    }
	    
	    public long nextLong() throws IOException {
	    	return Long.parseLong(next());
	    }
	}

}

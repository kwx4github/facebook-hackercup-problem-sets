package cz.kacz.fbhack.mmxv.r1;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 * Created by Krisztian on 1/12/2015.
 * https://www.facebook.com/hackercup/problems.php?pid=313229895540583&round=344496159068801
 */
public class ProblemOne {
    static Scanner in;
    static FileWriter out;

    private static final int SIZE = 10000000;//10000000;
    private static byte[] primacity;

    public static void main(String[] args) throws IOException {
        in = new Scanner(new File("homework.txt"));
        out = new FileWriter("out.txt");

        prepareArray();
        int t = in.nextInt();
        for(int i = 1; i <= t; ++i){
            int result = compute(i);
            out.write("Case #" + i + ": " + result  + "\n");
        }

        in.close();
        out.close();
    }

    private static void prepareArray() {
        primacity = new byte[SIZE+1];
        Arrays.fill(primacity, (byte) -1);
        primacity[0] = 0;
        primacity[1] = 0;

        Map<Long,Byte> updates = new HashMap<>();
        for(int i = 2; i < SIZE; ++i) {
//            if(i%100 == 0) System.out.println(i);
            if(primacity[i] == -1) {
                //we have found a prime

                updates.clear();

                //mark its powers
                long j = i;
                while(j < SIZE) {
                    updates.put(j, (byte) 1);

                    for(int k = 2; k < SIZE; k++){
                        if(k*j > SIZE)
                            break;
                        if(primacity[k] != -1) {
                            updates.put(k*j,(byte) (primacity[k] + 1));
                        }
                    }

                    j *= i;
                }
                for(Map.Entry<Long,Byte> e: updates.entrySet()) {
                    int k = (int) e.getKey().longValue();
                    primacity[k] = (byte)Math.max(primacity[k],e.getValue());
                }
            }
        }
//        System.out.println(primacity[2] + " " + primacity[3] + " " + primacity[SIZE]);
    }

    private static int compute(int t) {

        int a = in.nextInt();
        int b = in.nextInt();
        int k = in.nextInt();

        int sum = 0;

        for(int i = a; i <= b; ++i) {
            if(primacity[i] == k) {
                sum++;
            }
        }
        return sum;
    }

    private static int common(String a, String b) {
        int minLength = Math.min(a.length(), b.length());
        int res = 0;
        for (int i = 0; i < minLength; i++) {
            if (a.charAt(i) != b.charAt(i)) {
                return i;
            }
        }
        return minLength;
    }
}

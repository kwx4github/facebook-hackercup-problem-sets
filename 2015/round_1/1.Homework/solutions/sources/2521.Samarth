# include <stdio.h>
# include <limits.h>

#include <list>
#include <vector>
 
#include <iostream>
using namespace std;
#include <math.h> 
#include <string>
#ifndef ONLINE_JUDGE
    #define getcx getchar
#else
    #define getcx getchar_unlocked
#endif
#define MOD 1000000007

#include <fstream>
 
 
inline int inp ()
{
   int n=0;
   int ch=getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
     if(ch=='-')
     {
        sign=-1;
     }
     ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
   return n; 
}


inline long long inpLong()
{
   long long n = 0;
   int ch = getcx();
   int sign = 1;
   while( ch < '0' || ch > '9' )
   {
       if(ch=='-')
       {
           sign=-1;
       }
       ch=getcx();
   }
   while(  ch >= '0' && ch <= '9' )
   {
       n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   }
   n=n*sign;
   return n;
}


void markMultiples(int a, int n);

void sieve(long long number);

long long primality[10000001];

    
int main()
{
	//ifstream fin ("homework_example_input.txt");
	
	ifstream fin ("homework.txt");
	
	ofstream fout ("output_homework_3.txt");

	
	if (fin.is_open())
	{
		int T;
		
		long long A, B, K;
		
		fin>>T;

    	for (int i=1; i<10000001; ++i)
    	{
    		primality[i] = 0;
    	}
		
		sieve(10000001);
		
	    for (int i = 0; i<T; i++)
        {
        	fin>>A>>B>>K;
			
        	long long count_prim = 0;
        	
        	for (long long num = A; num<=B; num++)
        	{        		
        		if (primality[num] == K)
				{
					//cout<<"num "<<num<<" ";
					count_prim++;
				}
			}
			fout<<"Case #"<<(i+1)<<":"<<" "<<count_prim<<endl;     
        }
    }
    
    else cout << "Unable to open file"; 
  
    fin.close();
    fout.close();
    
    cin.get();
	cin.ignore();
	return 0; 	
}

void sieve(long long number)
{
    for (long long i=2; i<number; i++)
    {
        if ( primality[i] == 0 )
        {
            primality[i] = 1;
            markMultiples(i, number);
        }
    }
}

void markMultiples(int a, int number)
{
    long long i = 2;
	long long num = i*a;
    while ( (num = i*a) <= number )
    {
        primality[num]++; 
        i = i + 1;
    }
}


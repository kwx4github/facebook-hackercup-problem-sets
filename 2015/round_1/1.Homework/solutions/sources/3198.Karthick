//package facebookhackercup2015.round1;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

class Homework {
        BufferedReader br; PrintWriter out; StringTokenizer tk; boolean eof, submit;
        public static void main(String args[]) throws IOException { new Homework(); }
        
        String ntk() { while (tk == null || !tk.hasMoreTokens()) { try { tk = new StringTokenizer(br.readLine()); } catch (Exception e) { eof = true; return null; } } return tk.nextToken(); }
        String nln() { try { return br.readLine(); } catch (IOException e) { eof = true; return null; } }
        String ns() { return ntk(); }
        int ni() throws IOException { return Integer.parseInt(ntk()); }
        long nl() throws IOException { return Long.parseLong(ntk()); }
        float nf() throws IOException { return Float.parseFloat(ntk()); }
        double nd() throws IOException { return Double.parseDouble(ntk()); }
        void debug(Object... o) { if(!submit) { System.out.println(Arrays.deepToString(o)); } }
        
        public Homework() throws IOException {
                long start = System.currentTimeMillis();
                submit = !false;
                if(submit == false) br = new BufferedReader(new InputStreamReader(new FileInputStream("D:\\input.txt")));
                else br = new BufferedReader(new InputStreamReader(System.in));
                out = new PrintWriter(System.out);
                
                BL = 1000_000_9;
                SOE(BL);
                buildPrimacity();
                int T = ni(); 
                for(int t=1; t<=T; t++) solve(t);
                
                long end = System.currentTimeMillis();
                debug(end - start, " ms");
                out.close();
        }
        
        boolean isp[];
        int prime[], PC[], BL, A, B, K;
        void solve(int t) throws IOException {
                out.print("Case #" + t + ": ");
                A = ni(); B = ni(); K = ni();
                if(K > 8) {
                        out.println(0);
                        return;
                }
                int count = 0;
                for(int i=A; i<=B; i++) {
                        if(PC[i] == K) {
                                count++;
                        }
                }
                out.println(count);
        }

        private void buildPrimacity() {
                PC = new int[BL+1];
                //Arrays.fill(PC, 1);
                for(int i=2; i<=BL; i++) {
                        if(isp[i]) {
                                int x = i;
                                while(x <= BL) {
                                        PC[x]++;
                                        x += i;
                                }
                        }
                }
        }
        
        boolean isPrime(long number) {
                if(number == 1) {
                        return false;
                }
                //check if number is 2, the odd even prime
                if (Math.abs(number) == 2)
                        return true;
                //check if number is a multiple of 2
                if (number % 2 == 0)
                        return false;
                //if not, then just check the odds
                for (int i = 3; i * i <= number; i += 2) {
                        if (number % i == 0)
                                return false;
                }
                return true;
        }
        
        /*
        *       a[i] == true, then i is a prime number
        */
        void SOE(int n) { //SieveOfEratosthenes
                isp = new boolean[n + 1];
                Arrays.fill(isp, true);
                for(int i=2; i<=Math.sqrt(n); i++) {
                        if(isp[i]) {
                                for(int j= (int) Math.pow(i, 2); j<=n; j+=i) {
                                        isp[j] = false;
                                }
                        }
                }
                
                int pc = 0;
                for(int i=2; i<isp.length; i++) {
                        if(isp[i]) {
                                pc++;
                        }
                }
                
                prime = new int[pc+1];
                int idx = 0;
                for(int i=2; i<isp.length; i++) {
                        if(isp[i]) {
                                prime[idx++] = i;
                        }
                }
        }
}

package fbhc15R1;

import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class A
{
        String line;
        StringTokenizer inputParser;
        BufferedReader is;
        FileInputStream fstream;
        DataInputStream in;
        String FInput="";
        
        void openInput(String file)
        {
            if(file==null)is = new BufferedReader(new InputStreamReader(System.in));//stdin
            else
            {
                    try{
            
                            
                    fstream = new FileInputStream(file);
                    in = new DataInputStream(fstream);
                    is = new BufferedReader(new InputStreamReader(in));
                    }catch(Exception e)
                    {
                            System.err.println(e);
                    }
            }
        }
        
        void readNextLine()
    	{
    		try {
    			line = is.readLine();
    			inputParser = new StringTokenizer(line, " ,\t");
    			//System.err.println("Input: " + line);
    		} catch (IOException e) {
    			System.err.println("Unexpected IO ERROR: " + e);
    		}	
    		catch (NullPointerException e)
    		{
    			line=null;
    			
    		}
    		
    	}
        
        long NextLong()
        {
                String n = inputParser.nextToken();
                
                long val = Long.parseLong(n);
                
                 return val;
        }
        
        int NextInt()
        {
                String n = inputParser.nextToken();
                int val = Integer.parseInt(n);
                
                //System.out.println("I read this number: " + val);
                return val;
        }
        
        double NextDouble()
        {
                String n = inputParser.nextToken();
                double val = Double.parseDouble(n);
                
                //System.out.println("I read this number: " + val);
                return val;
        }
        
        String NextString()
        {
                String n = inputParser.nextToken();
                return n;
        }
        
        void closeInput()
        {
                try {
                        is.close();
                } catch (IOException e) {
                        System.err.println("Unexpected IO ERROR: " + e);
                }
                        
        }
        
        
        public static void main(String [] argv)
        {
                //String filePath="circles.in";
                String filePath=null;
                if(argv.length>0)filePath=argv[0];
                new A(filePath);
                
        }
        
        ArrayList <Integer> primes;
        int [] rres;
        
        public A(String inputFile)
        {
        	Random rgen = new Random();
        	openInput(inputFile);
    		readNextLine();
    		int T=NextInt();
    		
    		primes = new ArrayList<Integer>();
			
			boolean [] p = new boolean[10000001];
			rres = new int[10000001];
			
			for(int i=0; i<10000001; i++)
				p[i]=true;
			
			for(int i=2; i<10000001; i++)
			{
				if(p[i])
				{
					primes.add(i);
					rres[i]=1;
					for(int j=i*2; j<1000001; j+=i)
					{
						rres[j]++;
						p[j]=false;
					}
				}
			}
			
    		for(int t=1; t<=T; t++)
    		{
    			readNextLine();
    			int a = NextInt();
    			int b = NextInt();
    			int k = NextInt();
    			
    			System.out.println("Case #"+t+": "+getRes(a,b,k));
    		}
    		
    		
    		closeInput();		
      
        }

		private int getRes(int a, int b, int k) {
			int ret = 0;
			for(int i=a; i<=b; i++)
				//if(getNum(i)==k)ret++;
				if(rres[i]==k)ret++;
			
			return ret;
		}

		HashMap <Integer, Integer> res = new HashMap<Integer, Integer>();
		
		private int getNum(int i) {
			if(res.containsKey(i))return res.get(i);
			int ret = 0;
			for(int x:primes)
			{
				if(x>i)break;
				if(i%x==0)
				{
					ret++;
					while(i%x==0)
						i/=x;
				}
			}
			return ret;
		}   
}


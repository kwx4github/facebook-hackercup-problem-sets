package hc2015.stage1;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;


public class HC2015Stage1Task1 {
	
	private class FileHelper {
		private BufferedReader br;
		private List<String> feed = new LinkedList<String>();
		private FileWriter fw;
		public FileHelper(String fileName) {
			String fileNameNoExtension = fileName.endsWith(".txt") ? fileName.substring(0, fileName.length() - 4) : fileName;
			try {
				br = new BufferedReader(new FileReader(new File(fileNameNoExtension + ".txt")));
				fw = new FileWriter(new File(fileNameNoExtension + "_solution.txt"));
			} catch (IOException e) {
				System.out.println("Error while opening files.");
				e.printStackTrace();
				System.exit(1);
			}
		}
		
		public void close() {
			try {
				br.close();
				fw.flush();
				fw.close();
			} catch (IOException e) {
				System.out.println("Error while closing files.");
				e.printStackTrace();
				System.exit(1);
			}
		}
		
		private void feed() {
			if (feed.isEmpty()) {
				try {
					for (String s : br.readLine().split(" ")) {
						feed.add(s);
					}
				} catch (IOException e) {
					System.out.println("Error while reading input.");
					e.printStackTrace();
					System.exit(1);
				}
			}
		}
		
		public String readS() {
			feed();
			return feed.remove(0);
		}
		
		public int read() {
			feed();
			return Integer.valueOf(feed.remove(0));
		}
		
		public void write(String msg, Object... args) {
			try {
				String s = msg;
				for (Object arg : args) {
					s = s.replaceFirst("[?]", String.valueOf(arg));
				}
				fw.write(s);
			} catch (IOException e) {
				System.out.println("Error while writing output.");
				e.printStackTrace();
				System.exit(1);
			}
		}
	}
	
	public HC2015Stage1Task1(String fileName) {
		super();
		fh = new FileHelper(fileName);
	}
	
	private FileHelper fh;
	
	public String readS() {
		return fh.readS();
	}
	
	public int read() {
		return fh.read();
	}

	public static void main(String[] args) {
		HC2015Stage1Task1 solver = new HC2015Stage1Task1(FILE_NAME);
		solver.solve();
	}
	
	public void solve() {
		System.out.println("solve start..");
		prepare();
		int cases = read();
		for (int i=1; i<=cases; i++) {
			fh.write("Case #?: ?\n", i, solveOne());
		}
		fh.close();
		System.out.println("solve end.");
	}
	
	public static String swap(String s, int index1, int index2) {
		String s1 = s.substring(index1, index1 + 1);
		String s2 = s.substring(index2, index2 + 1);
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < s.length(); i++) {
			if (i == index1) {
				sb.append(s2);
			} else if (i == index2) {
				sb.append(s1);
			} else {
				sb.append(s.substring(i, i+1));
			}
		}
		return sb.toString();
	}
	
	// --------------------- actual solution -------------------- 
	private static final String FILE_NAME = "homework";
	
	private static final int MAX_AB = 10000000;
	
	private int[] primes = new int[MAX_AB];
	
	public void prepare() {
		for (int i=2; i<primes.length; i++) {
			if (primes[i] == 0) {
				for (int j=i*2; j<primes.length; j+=i) {
					primes[j] = -1;
				}
			}
		}
	};
	
	public int primacity(int a) {
		int n = a;
		int primacity = 0;
		int prime = 2;
		while (n > 1 && prime < 10) {
			if (primes[prime] == 0 && n % prime == 0) {
				primacity++;
				while (n % prime == 0) {
					n = n / prime;
				}
			}
			prime++;
		}
		return primacity;
	}
	
	public String solveOne() {
		int A = read();
		int B = read();
		int K = read();
		if (K > MAX_AB) {
			return "0";
		}
		int count = 0;
		for (int a = A; a <= B; a++) {
			if (primacity(a) == K) {
				count++;
			}
		}
		return String.valueOf(count);
	}
}

using System;
using System.Collections.Generic;
using System.IO;

class Solution
{
    static int[] primacity;
	static List<int> primes;
    static bool[] notPrime;

    static void Main(String[] args)
    {
        Console.SetIn(new StreamReader(@"..\..\in.txt"));
        var sw = new StreamWriter(@"..\..\out.txt");
        Console.SetOut(sw);
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        int n = 10000001;
        preparePrimes(n);

        primacity = new int[n];
        primacity[2] = 1;
        for (int i = 3; i < n; i++)
        {
            primacity[i] = getPrimacity(i);
        }

        int t = int.Parse(Console.ReadLine());
        for (int i = 0; i < t; i++)
        {
            string[] a_b_k = Console.ReadLine().Split(' ');
            int a = int.Parse(a_b_k[0]);
            int b = int.Parse(a_b_k[1]);
            int k = int.Parse(a_b_k[2]);
            
            if (k > 8)
            {
                Console.WriteLine("Case #{0}: {1}", i + 1, 0);
            }
            else
            {
                int count = 0;
                for (int j = a; j <= b; j++)
                {
                    if (primacity[j] == k)
                    {
                        count++;
                    }
                }

                Console.WriteLine("Case #{0}: {1}", i + 1, count);
            }
        }

        sw.Close();
    }

    static void preparePrimes(int max)
    {
        primes = new List<int>();
        notPrime = new bool[max];

        // Sieve of Eratosthenes
        for (long i = 2; i < max; i++)
        {
            if (!notPrime[i])
            {
                primes.Add((int)i);

                for (long j = i * i; j < max; j += i)
                {
                    notPrime[j] = true;
                }
            }
        }
    }

    static int getPrimacity(int n)
    {
        if (!notPrime[n])
        {
            return 1;
        }

        HashSet<int> factors = new HashSet<int>();
        int p = primes[0];
        int next = 1;
        while (p <= Math.Sqrt(n))
        {
            int rem = n % p;
            if (rem == 0)
            {
                factors.Add(p);
                n = n / p;
                p = primes[0];
                next = 1;
				if (!notPrime[n])
                {
                    factors.Add(n);

                    return factors.Count;
                }
            }
            else
            {
                p = primes[next++];
            }
        }
        factors.Add(n);

        return factors.Count;
    }
}
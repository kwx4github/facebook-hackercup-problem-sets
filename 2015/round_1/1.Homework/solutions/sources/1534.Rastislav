#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (__typeof(a) i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

#define MAX 10000000

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

int p[MAX+47];
int prefix[MAX+47][10];

void solve(int t)
{
	int a,b,k;
	cin >> a >> b >> k;
	if (k>8) 
	{
		cout << "Case #" << t << ": " << 0 << "\n"; 
	}
	else
	{
		cout << "Case #" << t << ": " << prefix[b][k] - prefix[a-1][k] << "\n"; 
	}
}

int main()
{
	INIT(p,0);
	FOR(i,1,8) prefix[1][i] = 0;
	FOR(i,2,MAX)
	{
		FOR(j,1,8) prefix[i][j] = prefix[i-1][j];
		if (p[i])
		{
			//not prime
			prefix[i][p[i]]++;
			continue;
		}
		//prime is divisible only by one prime
		prefix[i][1]++;
		for (int j = i+i;j<=MAX;j += i) p[j]++;
	}
	int T;
	cin >> T;
	REP(i,T) solve(i+1);
        return 0;
}

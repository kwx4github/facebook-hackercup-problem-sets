#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <limits>
#include <numeric>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define MP make_pair
#define all(v) (v).begin(), (v).end()
#define PROBLEM_ID "homework"

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<bool> vb;
typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 10000001;

int main() {
  vector<int> min_prime_divisor(MAXN, 1);
  for (int n = 2; n < MAXN; ++n) {
    if (min_prime_divisor[n] == 1) {
      min_prime_divisor[n] = n;
      for (ll j = ll(n) * n; j < MAXN; j += n) {
        min_prime_divisor[j] = n;
      }
    }
  }
  vector<int> primacity(MAXN, 0);
  for (int n = 2; n < MAXN; ++n) {
    int p = min_prime_divisor[n];
    int nn = n;
    while (nn % p == 0) {
      nn /= p;
    }
    primacity[n] = primacity[nn] + 1;
  }
  int max_primacity = *max_element(primacity.begin(), primacity.end());
  //cerr << max_primacity << endl;
  vvi primacity_cnt(max_primacity + 1, vi(MAXN, 0));  
  for (int n = 1; n < MAXN; ++n) {
    for (int pr = 0; pr <= max_primacity; ++pr) {
      if (pr == primacity[n]) {
        primacity_cnt[pr][n] = primacity_cnt[pr][n - 1] + 1;
      } else {
        primacity_cnt[pr][n] = primacity_cnt[pr][n - 1];
      }
    }
  }
  /*for (int n = 1; n <= 50; ++n) {
    cerr << n << ' ' << min_prime_divisor[n] << ' ' << primacity[n] << endl;
  }*/
  freopen(PROBLEM_ID".in", "r", stdin);
  freopen(PROBLEM_ID".out", "w", stdout);
  int tests;
  cin >> tests;
  for (int test_index = 0; test_index < tests; ++test_index) {
    int a, b, k;
    cin >> a >> b >> k;
    if (a > b || a > 10000000 || b > 10000000 || a < 2 || b < 2 || k < 1 || k > 1000000000) {
      cerr << "Wrong input: " << a << ' ' << b << ' ' << k << endl;
    }
    int result;
    if (k > max_primacity) {
      result = 0;
    } else {
      result = primacity_cnt[k][b] - primacity_cnt[k][a - 1];
    }
    cout << "Case #" << test_index + 1 << ": " << result << endl;
    cerr << "Case #" << test_index + 1 << ": " << result << endl;
  }
  return 0;
}

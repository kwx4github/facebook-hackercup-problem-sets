#include <iostream>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <utility>
#include <locale>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <climits>
#include <cfloat>
#include <map>
#include <functional>
using namespace std;
const double PI=acos(-1);

int lf, rt, pri_N, primacity[10000001], accSum[10000001][9];
bool isPrime[10000001] = {0, 0, 1};
vector<int> prime(1, 2); // 664579개, 마지막 소수는 9999991

int main() // 2015 Facebook Hackercup - Homework10
{
    freopen("Homework10.out", "w", stdout);

    for(int i=3; i<10000000; i+=2) isPrime[i] = true;
    for(int i=3; i<3162; i+=2)
        if(isPrime[i])
            for(int j=i*i; j<10000000; j+=i) isPrime[j] = false; // 에라토스테네스의 체

    for(int i=3; i<10000000; i+=2)
        if(isPrime[i]) prime.push_back(i);

    for(int i=2; i<=10000000; i++)
    {
        if(isPrime[i])
        {
            primacity[i] = 1;
            continue;
        }

        int cnt = 0, tmp = i;
        if(tmp%2 == 0)
        {
            cnt++;
            while(tmp%2 == 0) tmp /= 2;
        }

        for(int j=1; j<446; j++)
            if(tmp%prime[j] == 0)
            {
                cnt++;
                while(tmp%prime[j] == 0) tmp /= prime[j];
                if(tmp==1) break;
            }

        primacity[i] = cnt;
    }

    for(int i=2; i<=10000000; i++)
    {
        for(int j=1; j<=8; j++) accSum[i][j] = accSum[i-1][j];
        accSum[i][primacity[i]]++;
    }

    int tc_N;
    scanf("%d", &tc_N);
    for(int tc=0; tc<tc_N; tc++)
    {
        scanf("%d %d %d", &lf, &rt, &pri_N);

        printf("Case #%d: %d\n", tc+1, pri_N<=8 ? accSum[rt][pri_N] - accSum[lf-1][pri_N] : 0);
    }

    fclose(stdout);
    
    return 0;
}
import java.util.*;
import java.io.*;

public class Homework {
    private static List<Integer> primes = new ArrayList<Integer>();
    private static int num = (int)Math.pow(10, 7);
    private int[] primicity = new int[num+1];
    
    public static void main(String args[]) throws IOException{
        Homework homework = new Homework();
        primes = homework.GeneratePrimesNaive(664579);
        homework.GeneratePrimicities();
        
        List<Problem> problems = homework.parseFile("../homework.txt");
        PrintWriter writer = new PrintWriter("homeworkOutput.txt", "UTF-8");
        int testCaseNumber = 1;
        for(Problem p : problems) {
            writer.println("Case #" + testCaseNumber + ": " + homework.solve(p));
            testCaseNumber++;
        }
        writer.close();
    }
    
    private int solve(Problem p){
        int count = 0;
        int target = p.primicity;
        for(int i = p.start; i<= p.end; i++){
            if(primicity[i] == target) count++;
        }
        return count;
    }

    private List<Problem> parseFile(String path) throws IOException{
        List<Problem> list = new ArrayList<Problem>();

        BufferedReader br = new BufferedReader(new FileReader(path));
        String firstLine = br.readLine();
        int count = Integer.parseInt(firstLine);
        while (count>0) {
            String [] nums = br.readLine().split(" ");
            int s = Integer.parseInt(nums[0]);
            int e = Integer.parseInt(nums[1]);
            int c = Integer.parseInt(nums[2]);
            list.add(new Problem(s, e, c));
            count--;
        }
        return list;
    }


    public static List<Integer> GeneratePrimesNaive(int n)
    {
        List<Integer> primes = new ArrayList<Integer>();
        primes.add(2);
        int nextPrime = 3;
        while (primes.size() < n)
        {
            int sqrt = (int) Math.sqrt(nextPrime);
            boolean isPrime = true;
            for (int i = 0; primes.get(i) <= sqrt; i++)
            {
                if (nextPrime % primes.get(i) == 0)
                {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime)
            {
                primes.add(nextPrime);
            }
            nextPrime += 2;
        }
        return primes;
    }
    
    public void GeneratePrimicities(){
        for(int prime : primes){
            int tmp = prime;
            while(tmp < primicity.length && tmp >= 0){
                primicity[tmp] += 1;
                tmp += prime;
            }
        }
    }
    
    class Problem{
        int start;
        int end;
        int primicity;
        
        public Problem(int s, int e, int c){
            this.start = s;
            this.end = e;
            this.primicity = c;
        }
    }
}

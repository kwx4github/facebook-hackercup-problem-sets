import java.io.*;
import java.util.*;

/**
 * Created by homulerdora on 1/19/15.
 */
public class A {
    public static final String INPUT_FILE = "res/in/A.in";
    public static final String OUTPUT_FILE = "res/out/A.out";
    public static final int MAX_PRIME = 10000001;
    public static final int MAX_VALUE = 20;
    public BufferedReader reader;
    public PrintWriter writer;

    public A(){
        try {
            reader = new BufferedReader(new FileReader(new File(INPUT_FILE)));
            writer = new PrintWriter(new BufferedWriter(new FileWriter(new File(OUTPUT_FILE))));
        } catch(IOException ie) {
            ie.printStackTrace();
            System.exit(1);
        }

    }

    public static void main(String[] args){
        try {
            new A().solve();
        } catch(IOException ie){
            ie.printStackTrace();
            System.exit(1);
        }
    }

    public void solve() throws IOException {
        Map<Integer, List<Integer>> solver = prims2Solver(primacity(MAX_PRIME), MAX_VALUE);
        int t = Integer.parseInt(reader.readLine());
        for(int i = 0; i < t; i++){
            String[] strs = reader.readLine().split(" ");
            int a = Integer.parseInt(strs[0]);
            int b = Integer.parseInt(strs[1]);
            int k = Integer.parseInt(strs[2]);
            List<Integer> list = solver.get(k);
            int s = Collections.binarySearch(list, a);
            int f = Collections.binarySearch(list, b);
            if(s < 0){
                s = Math.abs(s)-1;
            }
            if(f < 0){
                f = Math.abs(f)-2;
            }
            writer.println("Case #" + (i+1) + ": " + (f-s+1));
        }
        writer.flush();
    }

    public int[] primacity(int n){
        int[] prims = new int[n];
        for(int i = 2; i < n; i++){
            if(prims[i] > 0) {
                continue;
            }
            for(int j = i; j < n; j += i){
                prims[j]++;
            }
        }
        return prims;
    }

    public Map<Integer, List<Integer>> prims2Solver(int[] prims, int n){
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for(int i = 1; i < MAX_VALUE; i++){
            ArrayList<Integer> list = new ArrayList<>();
            list.add(0);
            map.put(i, list);
        }
        for(int i = 2; i < prims.length; i++){
            List<Integer> list = map.get(prims[i]);
            list.add(i);
            map.put(prims[i], list);
        }
        System.out.println("fin");
        return map;
    }
}

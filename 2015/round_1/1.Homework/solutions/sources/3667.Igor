#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cctype>
#include <utility>
#include <functional>
#include <list>
#include <deque>
#include <stack>
#include <queue>
#include <complex>

using namespace std;

#define INF 0x3f3f3f3f
#define PI M_PI
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;

const double inf = 1. / 0.;

int cmp_double(double a, double b, double eps = 1e-9) {
    return a + eps > b? b + eps > a ? 0 : 1 : -1;
}

#define MAXP 10004
vector<int> p;
int np;
char s[MAXP];

void sieve() {
    memset(s, 0, sizeof(s));
    np = 1;
    p.push_back(2);

    for (int i = 3; i < MAXP; i += 2) {
        if (s[i]) continue;
        p.push_back(i);
        ++np;

        if (i > 10000) continue;
        for (int j = i*i; j < MAXP; j += i) {
            s[j] = 1;
        }
    }
}

// max k < 670000
int prim[10000004];

int primacity(int n) {
    int m = n;
    if (prim[n]) return prim[n];
    int ans = 0;
    for (int i = 0; i < np && p[i] <= n; ++i) {
        if (n % p[i] == 0) {
            ++ans;
            while (n % p[i] == 0) {
                n /= p[i];
            }
        }
        if (prim[n]) {
            return prim[m] = ans + prim[n];
        }
    }
    if (n > 1) ++ans;
    return prim[m] = ans;
}

int memo[10][10000004];

int main () {
    int a, b, k;
    int cases;
    scanf("%d", &cases);

    sieve();

    memset(prim, 0, sizeof(prim));
    for (int i = 0; i < 10; ++i) {
        memo[i][0] = memo[i][1] = 0;
    }

    for (int i = 2; i < 10000002; ++i) {
        int j = primacity(i);
        for (int l = 0; l < 10; ++l) {
            memo[l][i] = memo[l][i-1];
        }
        memo[j][i]++;
    }

    for (int test = 1; test <= cases; ++test) {
        scanf("%d %d %d", &a, &b, &k);
        printf("Case #%d: %d\n", test, memo[k][b] - memo[k][a-1]);
    }

    return 0;
}

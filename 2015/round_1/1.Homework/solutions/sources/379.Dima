#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#include <iostream>
#include <vector>

using namespace std;

class Solution
{
    static const int MAX_B = 10000007;

    static vector<bool> isPrime;
    static vector<int> primes;
    static vector<int> primeDividersCount;
    static bool initialized;

    int calcPrimacity(int x)
    {
        int primacity = 0;
        for (int prime : primes)
        {
            if (prime > x) break;

            if (x % prime == 0)
            {
                primacity++;
                while (x > 1 && x % prime == 0)
                    x /= prime;
                if (x == 1)
                    break;
            }
        }
        return primacity;
    }
    
public:
    Solution()
    {
        if (!initialized)
        {
            initialized = true;
            isPrime[0] = false;
            isPrime[1] = false;
            for (long long i = 2; i < isPrime.size(); i++)
                if (isPrime[i])
                {
                    primes.push_back(i);
                    for (long long j = i * i; j < isPrime.size(); j += i)
                        isPrime[j] = false;
                }

            for (int i = 0; i < primes.size(); i++)
                for (int j = 1; j*primes[i] < primeDividersCount.size(); j++)
                    ++primeDividersCount[j*primes[i]];
        }
    }
    int solve(int A, int B, int K)
    {
        int answer = 0;
        for (int x = A; x <= B; x++)
        {
            if (primeDividersCount[x] == K)
                ++answer;
        }
        return answer;
    }    
    void test()
    {
        for (int x = 2; x <= MAX_B; x++)
        {
            if (x % 12345 == 0)
            {
                cout << "\r" << x;
            }
            if (calcPrimacity(x) != primeDividersCount[x])
            {
                cout << endl << "WA!!!" << endl;
            }
        }
    }
};
vector<bool> Solution::isPrime = vector<bool>(Solution::MAX_B + 1, true);
bool Solution::initialized = false;
vector<int> Solution::primeDividersCount = vector<int>(Solution::MAX_B + 1, 0);
vector<int> Solution::primes;

void test();

int main(int argc, char* argv[])
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    // test();
    // return 0;

    int T;
    cin >> T;
    for (int t = 1; t <= T; t++)
    {
        int a, b, k;
        cin >> a >> b >> k;
        Solution solution;
        cout << "Case #" << t << ": " << solution.solve(a, b, k) << "\n";
    }

	return 0;
}

void test()
{    
    Solution solution;
    solution.test();
}


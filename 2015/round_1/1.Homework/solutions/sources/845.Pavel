#pragma comment(linker, "/STACK:128777216")

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <functional>
#include <numeric>
#include <sstream>
#include <exception>
#include <cassert>

typedef long long i64;
typedef unsigned int u32;
using namespace std;

typedef vector<int> VI;

#define all(a) a.begin(),a.end()

template<class T>
int size(const T &a) {
    return int(a.size());
}

template<class T>
T abs(const T &a) {
    return (a < 0 ? -a : a);
}

template<class T>
T sqr(const T &a) {
    return a * a;
}

const double pi = acos(-1.0);

int mod = int(1e9 + 7.1);

inline int msum(int a, int b) {
    return (a + b < mod ? a + b : a + b - mod);
}

inline int mdiff(int a, int b) {
    return (a < b ? a - b + mod : a - b);
}

inline void madd(int &a, int b) {
    a = msum(a, b);
}

inline void msub(int &a, int b) {
    a = mdiff(a, b);
}

inline i64 mmul(int a, int b) {
    return i64(a) * b % mod;
}

const int max_v = 10000000;

int a[max_v + 1];
int s[max_v + 1][9];

int main() {
#ifdef pperm
    freopen("input.txt", "r", stdin);
    //freopen("input.txt", "w", stdout);
    freopen("output.txt", "w", stdout);
#endif
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    for (int i = 2; i <= max_v; ++i) {
        if (!a[i]) {
            for (int j = i; j <= max_v; j += i) {
                a[j]++;
            }
        }
        memcpy(s[i], s[i - 1], sizeof(s[0]));
        if (a[i] > 8) {
            exit(1);
        }
        ++s[i][a[i]];
    }

    int T = 1;
    cin >> T;
    for (int iTest = 1; iTest <= T; ++iTest) {
        int a, b, k;
        cin >> a >> b >> k;
        a--;
        int res = 0;
        if (k <= 8) {
            res = s[b][k] - s[a][k];
        }
        cout << "Case #" << iTest << ": " << res << endl;
    }

#ifdef pperm
    flush(cout);
    cerr << endl << "Time: " << (clock() / double(CLOCKS_PER_SEC)) << endl;
#endif
    return 0;
}

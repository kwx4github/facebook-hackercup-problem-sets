#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
#define MAX 1000
#define MAXN 10000005
#define gP(n)(prime[n>>6]&(1<<((n>>1)&31)))
#define rP(n)(prime[n>>6]&=~(1<<((n>>1)&31)))

using namespace std;

int cumulativeSum[25][10000005];
unsigned int prime[MAXN / 64];
vector<int> current;
vector<int> primes;

void sieve()
{
    memset(prime, -1, sizeof(prime));
    unsigned int sqrtN = (unsigned int) sqrt((double) MAXN) + 1;

    for (unsigned int i = 3; i < sqrtN; i += 2)
    {
        if (gP( i ))
        {
            unsigned int i2 = i + i;
            for (unsigned int j = i * i; j < MAXN; j += i2)
                rP(j);
        }
    }

    primes.push_back(2);
    long long v = (long long)2;
    while(v <= 10000000)
    {
        current.push_back(v);
        cumulativeSum[0][v]++;
        v *= (long long)2;
    }

    for(int i=3; i<10000001; i++)
    {
        if(i % 2 && gP(i))
        {
            primes.push_back(i);
            v = (long long)i;
            while(v <= 10000000)
            {
                current.push_back(v);
                cumulativeSum[0][v]++;
                v *= (long long)i;
            }
        }
    }
    for(int j=1; j<=10000000; j++) cumulativeSum[0][j] += cumulativeSum[0][j-1];

}

void initialize()
{
    vector<int> next;
    for(int i=1; i<25; i++)
    {
        next.clear();
        for(int j=0; j<current.size(); j++)
        {
            for(int k=0; k<primes.size(); k++)
            {
                long long v = (long long)(current[j]*primes[k]);

                if(v > 10000000) break;

                if(current[j]%primes[k] != 0)
                {
                    while(v <= 10000000)
                    {
                        if(cumulativeSum[i][v] == 0)
                        {
                            next.push_back(v);
                            cumulativeSum[i][v] = 1;
                        }
                        v *= (long long)primes[k];
                    }
                }
            }
        }
        for(int j=1; j<=10000000; j++) cumulativeSum[i][j] += cumulativeSum[i][j-1];
        current = next;
    }
}

int main()
{
    //freopen("homework.txt","r",stdin);
    //freopen("output_homework.txt","w",stdout);
    sieve();
    initialize();

    int t,a,b,k;
    while(scanf("%d",&t) != EOF)
    {
        for(int caso=1; caso<=t; caso++)
        {
            scanf("%d%d%d",&a,&b,&k);
            if(k > 24) printf("Case #%d: %d\n",caso,0);
            else printf("Case #%d: %d\n",caso,cumulativeSum[k-1][b] - cumulativeSum[k-1][a-1]);
        }
    }

    return 0;
}


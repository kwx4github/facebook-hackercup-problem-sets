#include <bits/stdc++.h>
using namespace std;

const int NUMERIC = 10000001;

int sieve[NUMERIC];
vector<int> primes[1<<5];

int findLower(int c, int k) {
	if ((int)primes[k].size() == 0) return 0;
	if (primes[k][0] > c) return 0;
	int lo = 0, hi = (int)primes[k].size()-1, mid = 0;
	int ans = 0;
	while (lo <= hi) {
		mid = (lo + hi)/2;
		if (primes[k][mid] <= c) {
			ans = mid;
			lo = mid+1;
		} else {
			hi = mid-1;
		}
	}
	return ans+1;
}

int f(int A, int B, int K) {
	static bool initialized = false;
	if (!initialized) {
		for (int p = 2; p < NUMERIC; p++) {
			// num of divisors is zero
			if (sieve[p]) continue;
			for (int mark = p+p; mark < NUMERIC; mark+=p)
				sieve[mark]++;
		}
		for (int p = 2; p < NUMERIC; p++) {
			if (sieve[p] == 0 or sieve[p] == 1) 
				primes[1].push_back(p);
			else
				primes[sieve[p]].push_back(p);
		}
		initialized = true;
	}
	if (K >= (1<<5)) return 0;
	return findLower(B, K) - findLower(A-1, K);
}

int main(void) {
	ios::sync_with_stdio(false);
	int test_cases;
	cin >> test_cases;
	for (int kase = 1; kase <= test_cases; kase++) {
		int A, B, K;
		cin >> A >> B >> K;
		cout << "Case #" << kase << ": " << f(A, B, K) << "\n";
	}

	return 0;
}

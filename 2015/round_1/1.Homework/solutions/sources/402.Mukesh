/*
 *
 * @author Mukesh Singh
 *
 */

/* Finding_the_Minimum_Window_in_S_which_Contains_All_Elements_from_T */

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
@SuppressWarnings("unchecked")
public class AB
{	
	int ar[] ;
	int prime(int n)
	{
		int count = 0 ;
		int p = 2 ;
		while(p*p <= n )
		{
			if(n%p==0)
				count ++ ;
			while(n%p==0)
				n /= p ;
			p++;
		}
		if(n > 1)
			count++ ;
		return count ;
	}
	int max ;
	void solve() throws Exception
	{
		ar = new int[10000004];
		max = 0 ;
		for(int i = 2 ; i < 10000003 ; i++)
		{
			ar[i] = prime(i);
			if(max < ar[i])
				max = ar[i] ;
		}
		/*for(int i = 0 ; i < 20 ; i++)
			System.out.print(ar[i]+" ");
		System.out.println();
		System.out.println(max);*/
		int T = in.nextInt();
		for(int t= 1 ; t <= T  ;t++)
		{
			solveT(t);		
		}
	}
	//solve test cases
	void solveT(int tid) throws Exception 
	{
		int a = in.nextInt();
		int b = in.nextInt();
		int k = in.nextInt();
		out.print("Case #"+tid+": ");
		if(k > max)
			out.println(0);
		int count = 0 ;
		for(int i = a ; i <= b ; i++)
		{
			if(ar[i]==k)
				count ++ ;
		}
		out.println(count);
	}
	//@ main function
	public static void main(String[] args) throws Exception 
	{
		new AB();
	}
	
	InputReader in;
	PrintStream out ;
	DecimalFormat df ;
	AB() 
	{
		try 
		{
			File defaultInput = new File("file.in");
			if (defaultInput.exists()) 
				in = new InputReader("file.in");
			else 
				in = new InputReader();
			defaultInput = new File("file.out");
			if (defaultInput.exists()) 
				out = new PrintStream(new FileOutputStream("file.out"));
			else
				out = new PrintStream(System.out);
			df = new DecimalFormat("######0.00");
			solve();
			out.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			System.exit(261);
		}
	}
	
	class InputReader {
		BufferedReader reader;
		StringTokenizer tokenizer;
		
		InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		InputReader(String fileName) throws FileNotFoundException {
			reader = new BufferedReader(new FileReader(new File(fileName)));
		}
		
		String readLine() throws IOException {
			return reader.readLine();
		}
		
		String nextToken() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens())
				tokenizer = new StringTokenizer(readLine());
			return tokenizer.nextToken();
		}
		
		boolean hasMoreTokens() throws IOException {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				String s = readLine();
				if (s == null)
					return false;
				tokenizer = new StringTokenizer(s);
			}
			return true;
		}
		
		int nextInt() throws NumberFormatException, IOException {
			return Integer.parseInt(nextToken());
		}
		
		long nextLong() throws NumberFormatException, IOException {
			return Long.parseLong(nextToken());
		}
		
		double nextDouble() throws NumberFormatException, IOException {
			return Double.parseDouble(nextToken());
		}
	}
}

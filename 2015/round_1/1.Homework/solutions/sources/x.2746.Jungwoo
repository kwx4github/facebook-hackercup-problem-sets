#include <iostream>
#include <cassert>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

#define MAXN 10000001

vector<int> Ks;
vector<bool> is_prime;

void init() {
	Ks.resize(MAXN);
	is_prime.resize(MAXN);
	std::fill(Ks.begin(), Ks.end(), 0);
	std::fill(is_prime.begin(), is_prime.end(), true);
	int sqrtn = sqrt(MAXN);
	for (int i = 2 ; i <= sqrtn ; ++i) {
		if (is_prime[i]) {
			Ks[i] = 1;
			for (int j = 2 ; i * j < MAXN ; j++) {
				is_prime[i*j] = false;
				Ks[i*j]++;
			}			
		}
	}
}

int solve(int a, int b, int k) {
	int ret = 0;
	for (int i = a ; i <= b ; ++i) {
		if (Ks[i] == k) {
			ret++; 
			// cout << i << " ";
		}
	}
	// cout << endl;
	return ret;
}

int main (int argc, char const *argv[])
{
	init();
	int T;
	cin >> T;
	for (int casen = 1 ; casen <= T ; casen++) {
		cout << "Case #" << casen << ": ";
		int A, B, K;
		cin >> A >> B >> K;
		cout << solve(A,B,K) << endl;
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

const int MAX_N = 10000000;

std::vector<std::pair<int, int>> pairs;

void preproc() {
	std::vector<int> div(MAX_N + 1);
	
	std::iota(div.begin(), div.end(), 0);

	for(int i = 2; i * i <= MAX_N; i++) {
		for(int j = i*i; j <= MAX_N; j+=i) {
			if(div[j] == j) div[j] = i;
		}
	}

	std::vector<int> cnt(MAX_N + 1);

	for(int i = 2; i <= MAX_N; i++) {
		int j = i;
		int o = div[i];
		while(j % o == 0) j /= o;
		cnt[i] = cnt[j] + 1;
	}

	for(int c=0; c<=8; c++) {
		for(int i = 1; i <= MAX_N; i++) {
			if(cnt[i] == c)
				pairs.emplace_back(cnt[i], i);
		}
	}

}

int main() {
	std::ios_base::sync_with_stdio(false);
	preproc();

	int t;
	std::cin >> t;

	for(int i=1; i<=t; i++) {
		int a, b, c;
		std::cin >> a >> b >> c;
		std::cout << "Case #" << i << ": ";
		std::cout << (std::upper_bound(pairs.begin(), pairs.end(), std::make_pair(c, b)) - std::lower_bound(pairs.begin(), pairs.end(), std::make_pair(c, a))) << std::endl;
	}
}

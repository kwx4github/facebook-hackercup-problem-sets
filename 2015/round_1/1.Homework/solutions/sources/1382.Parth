#include <bits/stdc++.h>

using namespace std;

#define rf freopen("in.txt", "r", stdin)
#define wf freopen("out.txt", "w", stdout)

bool isNotPrime [4000] = {1, 1, 0};
int listPrimes [600];
int numPrimes = 0;
int primacity [10000001] = {-1, -1, 1};

void Seive ()
{
	for (int i = 0; i < 4000; i++)
		if (!isNotPrime[i])
		{
			listPrimes[numPrimes++] = i;
			for (int j = 2; i * j < 4000; j++)
				isNotPrime[i * j] = 1;
		}
}

int Primacity (int x)
{
	int ans = 0;
	int tmp = sqrt (x);
	for (int i = 0; i < numPrimes && listPrimes[i] <= tmp; i++)
		if (x % listPrimes[i] == 0)
		{
			while (x % listPrimes[i] == 0)
				x /= listPrimes[i];
			// i--;
			ans++;
			tmp = sqrt (x);
		}
	if (x > 1)
		ans++;
	return ans;
}

void BuildPrimacity ()
{
	for (int i = 3; i <= 10000000; i++)
		primacity[i] = Primacity (i);
}

int t;
int a, b, k;
int ans;

int main ()
{
	rf;
	wf;
	Seive ();
	BuildPrimacity ();
	scanf ("%d", &t);
	for (int j = 1; j <= t; j++)
	{
		ans = 0;
		scanf ("%d%d%d", &a, &b, &k);
		for (int i = a; i <= b; i++)
			ans += (primacity[i] == k);
		printf("Case #%d: %d\n", j, ans);
	}
}
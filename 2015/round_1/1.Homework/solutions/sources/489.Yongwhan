#include<iostream>
#include<vector>
using namespace std;

const int mx=1e7+5, mx2=10;
int cumsum[mx2][mx];

int main() {
	vector<bool> prime(mx,true);
	prime[0]=prime[1]=false;
	for (int i=2; i*i<mx; i++) if(prime[i])
		for (int j=i; j*i<mx; j++) prime[i*j]=false;

	vector<int> ps;
	for (int i=0; i*i<mx; i++) if(prime[i]) ps.push_back(i);
	int sz=ps.size();

	vector<int> primacity(mx,0);
	for (int i=0; i<mx; i++) {
		if(!prime[i]) {
			int x=i;
			for (int j=0; j<sz; j++) {
				int d=ps[j];
				if(d*d>x) break;	
				if(x%d==0) {
					primacity[i]++;
					while(1) {
						if(x%d) break;
						x/=d;
					}
					primacity[i]+=primacity[x];
					x=1;
				}
			}
			if(x>1) primacity[i]++;
		} else primacity[i]=1;
	}

	for (int i=0; i<mx2; i++) for (int j=0; j<mx; j++)
		cumsum[i][j]=0;
	for (int i=0; i<mx; i++)
		cumsum[primacity[i]][i]++;
	for (int i=0; i<mx2; i++) for (int j=1; j<mx; j++)
		cumsum[i][j]+=cumsum[i][j-1];

	ios_base::sync_with_stdio(false); cin.tie(NULL);
	int t; cin>>t;
	for (int c=1; c<=t; c++) {
		int a,b,k, ret=0; cin>>a>>b>>k;
		if(k<mx2) ret=cumsum[k][b]-cumsum[k][a-1];
		cout << "Case #" << c << ": " << ret << endl;
	}
	return 0;
}

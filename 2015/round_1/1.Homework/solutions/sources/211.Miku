#include <bits/stdc++.h>
using namespace std;

typedef vector<int> vii;

const int N=1e7+1;
int p[N];
vii P;
int n, T, a, b, k;

inline void subset(int id, int count, int product, int &R) {
  if (count==k && product>=a) {
    R++;
  }
  for ( ; count+1<=k && id<n && (long long)product*P[id]<=b; id++) {
    long long p=(long long)product*P[id];
    while (p<=b) {
      subset(id+1, count+1, p, R);
      p*=P[id];
    }
  }
}

int main(void) {
  for (int i=2; i<N; i++) p[i]=1;
  for (int i=2; i*i<N; i++) if (p[i]) {
    for (int j=i*i; j<N; j+=i) {
      p[j]=0;
    }
  }
  for (int i=0; i<N; i++) if (p[i]) {
    P.push_back(i);
  }
  n=P.size();
  scanf("%d", &T);
  for (int _case=1; _case<=T; _case++) {
    scanf("%d%d%d", &a, &b, &k);
    int R=0;
    subset(0, 0, 1, R);
    printf("Case #%d: %d\n", _case, R);
  }
}

#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <utility>
#include <tuple>
#include <ctime>

using namespace std;

const int MAX_B = 10*1000*1000;
const int MAX_PRIMACITY = 8; // 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 > 10^7
vector<vector<int>> g_primacity(MAX_B + 1, vector<int>(MAX_PRIMACITY, 0));

int primacity(int num) {
  int count = 0;
  for (int x = 2; x*x <= num; x += (x > 2) ? 2 : 1) {
    if (num % x == 0) { count += 1; }
    if (count >= 9) break;
    while (num % x == 0) { num /= x; }
  }
  if (num > 1) { count += 1; }
  return count;
}

void solve_case(int case_id) {
  int a, b, k;
  cin >> a >> b >> k;
  int count = 0;
  if (k <= 8) {
    count = g_primacity[b][k-1] - g_primacity[a-1][k-1];
  }
  cout << "Case #" << case_id << ": " << count << endl;
}

int main() {
  clock_t t0 = clock();
  for (int num = 2; num <= MAX_B; ++num) {
    int p = primacity(num);
    // cout << num << " " << p << endl;  // 
    if (p <= MAX_PRIMACITY)
      g_primacity[num][p-1] = 1;

    for (int i = 0; i < MAX_PRIMACITY; ++i) {
      g_primacity[num][i] += g_primacity[num-1][i];
    }
  }  
  
  int t; cin >> t;
  for (int i = 1; i <= t; ++i) {
    solve_case(i);
  }
  clock_t t1 = clock();
  cerr << double(t1 - t0) / CLOCKS_PER_SEC << endl;
  return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;

const int N = 10000000;
int erat[N+1];
int cnt[N+1];
int s[9][N+1];

int main() {
    for (int i = 0; i <= N; ++i) {
        erat[i] = i;
        cnt[i] = 0;
    }
    for (int i = 2; i*i <= N; ++i) if (erat[i] == i) {
        for (int j = i * i; j <= N; j += i)
            erat[j] = i;
    }
    memset(s, 0, sizeof(s));
    int ma = 0;
    for (int i = 2; i <= N; ++i) {
        int p = erat[i];
        assert(i%p==0);
        int n = i/p;
        while (n % p == 0) {
            n /= p;
        }
        cnt[i] = cnt[n] + 1;
        ma = max(ma, cnt[i]);
        for (int k = 0; k <= 8; ++k) {
            s[k][i] = s[k][i-1];
        }
        s[cnt[i]][i]++;
//        if (i < 100) cerr << i << ' ' << erat[i] << ' ' << cnt[i] << endl;
    }
//    cerr << ma << endl;
    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        printf("Case #%d: ", test);
        int a,b,k;
        cin >> a >> b >> k;
        if (k > 8) {
            cout << 0 << endl;
        } else {
            cout << s[k][b] - s[k][a-1] << endl;
        }
    }
    return 0;
}

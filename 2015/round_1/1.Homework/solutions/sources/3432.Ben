#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <cstring>

const int PRIME_RANGE = 10000001;
bool isPrime[PRIME_RANGE];
int primacity[PRIME_RANGE];

std::unordered_multimap<int, int> primacityMap;

void sieve() {
    memset(isPrime, true, PRIME_RANGE);
    for (int i = 2; i < PRIME_RANGE; i++) {
        if (isPrime[i]) {
            primacity[i] = 1;
            for (int j = 2*i; j < PRIME_RANGE; j += i) {
                isPrime[j] = false;
                primacity[j]++;
            }
        }
    }

    for (int i = 2; i < PRIME_RANGE; i++) {
        primacityMap.insert(std::make_pair(primacity[i], i));
    }
}

int main() {
    int nCases;
    std::cin >> nCases;
    sieve();
    for (int z = 1; z <= nCases; z++) {
        int low, high, target;
        std::cin >> low >> high >> target;
        auto range = primacityMap.equal_range(target);
        int answer = 0;
        for (auto start = range.first; start != range.second; start++) {
            if (low <= start->second && start->second <= high) {
                answer++;
            }
        }

        std::cout << "Case #" << z << ": " << answer << std::endl;
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <sstream>
#include <cstring>
#include <string>
#include <math.h>
#include<map>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <list>
#define MAX 1000100000
using namespace std;
class TheGridDivTwo{
public:
    
    bool vis[2010][2010];
    typedef pair<int, int> ii;
    int dx [4];
    int dy [4];
    int bfs(int k){
        int mx =-1000000000;
        queue<ii>q;
        q.push(ii(1000,1000));
        vis[1000][1000]=true;
        while (!q.empty()) {
            ii front = q.front();
            q.pop();
            int x = front.first;
            int y = front.second;
            mx = max(mx,x);
            if(abs(x-1000)+abs(y-1000)==k)
                continue;
            for (int i =0; i<4; i++) {
                if(!vis[x+dx[i]][y+dy[i]]&&abs(x-1000+dx[i])+abs(y-1000+dy[i])<=k){
                    vis[x+dx[i]][y+dy[i]]=true;
                    q.push(ii(x+dx[i],y+dy[i]));
                }
            }
        }
        return mx;
    }
    int find(vector<int> x, vector<int> y, int k){
        memset(vis, false, sizeof(vis));
        for (int i =0; i<x.size(); i++) {
            vis[x[i]+1000][y[i]+1000]=true;
        }
        dx[0]=1;
        dx[1]=-1;
        dx[2]=0;
        dx[3]=0;
        dy[0]=0;
        dy[1]=0;
        dy[2]=1;
        dy[3]=-1;
        return bfs(k)-1000;
    }
};
vector<vector<int> >nums;
bool flag[10000001];
int primacity[10000001];
int bin_search( int key, int index,bool upper){
    
    int low = 0;
    int high =(int)nums[index].size()-1;
    while (low<=high) {
        int mid = (low+high)/2;
        if (nums[index][mid]==key) {
            return mid;
        }else if(nums[index][mid]>key){
            high = mid-1;
        }else{
            low = mid+1;
        }
    }
    if (!upper) {
        return low;
    }
    return high;
}

int main(){
    memset(primacity, 0, sizeof(primacity));
    memset(flag, true, sizeof(flag));
    flag[0]=false;
    flag[1]= false;
    for(int i =2;i<=3163;i++){
        if(flag[i]){
            primacity[i]=1;
            for(int j =i+i;j<10000001;j+=i){
                flag[j]=false;
                primacity[j]++;
            }
        }
    }
    nums.resize(9);
    int mx =-1;
    for (int i=2; i<10000001; i++) {
        mx = max(mx,primacity[i]);
        if (primacity[i]==0)
            primacity[i]++;
        nums[primacity[i]].push_back(i);
    }
    int t,a,b,k;
    freopen("/Users/Masoud/Desktop/in.txt", "r", stdin);
    freopen("/Users/Masoud/Desktop/out.txt", "w", stdout);
    scanf("%d",&t);
    int ca=1;
    while (t--) {
        scanf("%d %d %d",&a,&b,&k);
        if (k>8) {
            printf("Case #%d: %d\n",ca++,0);
            continue;
        }
        printf("Case #%d: %d\n",ca++,bin_search(b, k,true)-bin_search(a, k,false)+1);
    }
    return 0;
}
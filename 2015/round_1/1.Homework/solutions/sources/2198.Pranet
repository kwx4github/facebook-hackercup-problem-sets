#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod) {ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;
bool* isPrime;
int primacity[10000001];
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      {
        primacity[i]++;
        for(int j=i+i;j<=lim;j+=i)
          {
            primacity[j]++;
            isPrime[j]=false;
          }
      }
}

int ofK[9][10000001];
int main()
{
  generatePrimeSieve(10000000);
  std::ios::sync_with_stdio(false);
  
    for(int j=1;j<=10000000;++j)
      {
        ofK[1][j]=ofK[1][j-1];
        ofK[2][j]=ofK[2][j-1];
        ofK[3][j]=ofK[3][j-1];
        ofK[4][j]=ofK[4][j-1];
        ofK[5][j]=ofK[5][j-1];
        ofK[6][j]=ofK[6][j-1];
        ofK[7][j]=ofK[7][j-1];
        ofK[8][j]=ofK[8][j-1];

        int prim=primacity[j];
        ofK[prim][j]++;  
      }

   int t;
   cin>>t;
   int tt=0;
   while(t--)
   {
    cout<<"Case #"<<++tt<<": ";
    int a,b,k;
    cin>>a>>b>>k;
    
    if(k>=9)
      k=0;
    cout<<ofK[k][b]-ofK[k][a-1]<<"\n";
   }


}
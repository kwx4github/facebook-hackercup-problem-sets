package Java;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Homework {
	public static void main(String args[]) throws NumberFormatException, IOException
	{
		java.io.BufferedReader r = new java.io.BufferedReader (new java.io.InputStreamReader (System.in));
		String s;
		int[] factorCount = sieving();
		int testCases = Integer.parseInt(r.readLine());
		for(int i=0;i<testCases;i++)
		{
			String number = r.readLine();
			System.out.println(primeCalc(i+1,number,factorCount));
		}
	}
	public static String primeCalc(int j,String number,int[] factorCount)
	{
		StringTokenizer st = new StringTokenizer(number," ");
		int firstNumber = Integer.parseInt(st.nextToken());
		int secondNumber = Integer.parseInt(st.nextToken());
		int uniquePrimeFactors = Integer.parseInt(st.nextToken());
		int factorMatch = 0;
		for (int i=firstNumber; i<=secondNumber;i++)
		{
			if(factorCount[i] == uniquePrimeFactors)
			{
				factorMatch++;
			}
		}
		return "Case #"+j+": "+factorMatch;	
	}
	public static int[] sieving()
	{
		int[] factorCount = new int[10000001];
		int N = 10000000;
		for (int i = 0; i <= N; i++) {
	        factorCount[i] = 0;
	    }

	    for (int i = 2; i <= N; i++) {
	        if (factorCount[i] == 0) { // Number is prime
	            for (int j = i; j <= N; j += i) {
	                factorCount[j]++;
	            }
	        }
	    }
		return factorCount;
	}
	/**
     * @return prime factors of a positive integer in Java.
     * @input 40
     * @output 2, 5
     */
    public static int primeFactors(long number) {
        Set<Integer> primefactors = new HashSet<>();
        long copyOfInput = number;

        for (int i = 2; i<= copyOfInput; i++) {
            if (copyOfInput % i == 0) {
                primefactors.add(i); // prime factor
                copyOfInput /= i;
                i--;
            }
        }
        return primefactors.size();
    }
    public static boolean primeFactors1(long number,int factors) {
        Set<Integer> primefactors = new HashSet<>();
        long copyOfInput = number;

        for (int i = 2; i<= number; i++) {
            if (copyOfInput % i == 0) {
                primefactors.add(i);
                if(primefactors.size()>factors)
                	return false;
                // prime factor
                copyOfInput /= i;
                i--;
            }
        }
        if(primefactors.size()==factors)
        	return true;
        return false;
    }

}

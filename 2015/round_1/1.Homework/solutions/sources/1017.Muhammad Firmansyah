import sys, traceback, time

def getPrimacityList(B):
    primacity = [0]*(B+1)
    for n in range(2, len(primacity)):
        if primacity[n] != 0: continue
        primacity[n] += 1
        j = 2*n
        while j < len(primacity):
            primacity[j] += 1
            j += n
    return primacity

def main():
    # ##################### take the input #####################
    # file name parameters
    fin = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\A.in'
    fout = r'\\ppfs6.physics.ox.ac.uk\Particle\kasim\Others\CodeJam\FB2015\round1\A.out'
    
    # read the input file
    f = open(fin, 'r')
    s = f.read()
    f.close()
    lines = s.split('\n')
    
    # #################### parse the input and process the input #######################
    
    # preprocessing
    primacity = getPrimacityList(10000000)
    
    answers = []
    T = eval(lines.pop(0))
    for i in range(T):
        t1 = time.clock()
        print i+1,
        
        A, B, K = [eval(p) for p in lines.pop(0).split()]
        answer = 0
        for i in range(A, B+1):
            if primacity[i] == K: answer += 1
        
        answers.append(str(answer))
        
        t2 = time.clock()
        print "in " + str(round((t2-t1)*1000)/1000.) + "s"
    
    # #################### write the output ####################
    s = []
    for j in range(1, T+1):
        strAns = "Case #" + str(j) + ": " + str(answers[j-1])
        s.append(strAns)
    
    s = "\n".join(s)
    f = open(fout, 'w')
    f.write(s)
    f.close()

try:
    main()
    print "Finish"
    raw_input()
except:
    traceback.print_exc()
    raw_input()

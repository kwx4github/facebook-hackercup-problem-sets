package y2015.round1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.*;

/**
 * Created by aleksandr on 17.01.15.
 */
public class A {
    private static final String inputFileName = "input/2015/round1/a/homework.txt";
    private static final String outputFileName = "output.txt";

    public static void main(String[] args) throws Exception {
        File inputFile = new File(inputFileName);
        Scanner scanner = new Scanner(inputFile);

        File outputFile = new File(outputFileName);
        outputFile.delete();
        outputFile.createNewFile();
        FileWriter fw = new FileWriter(outputFile);
        BufferedWriter bw = new BufferedWriter(fw);

        int numOfTestCases = scanner.nextInt();

        for (int i = 1; i <= numOfTestCases; i++) {

            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int k = scanner.nextInt();

            Problem problem = new Problem(a, b, k);

            String testCase = "Case #" + i + ": " + problem.solve();
            bw.append(testCase + "\n");
            System.out.println(testCase);
            System.out.println(new Date().getTime());
        }

        bw.flush();
        fw.flush();

        bw.close();
        fw.close();
    }

    private static class Problem {
        private int a;
        private int b;
        private int k;

        private static Integer[] primes;
        private static Set<Integer> primesSet;
        private static Map<Integer, Integer> primacityMap = new HashMap<>();

        private Set<Integer> dividers = new HashSet<>();

        public Problem(int a, int b, int k) {
            this.a = a;
            this.b = b;
            this.k = k;

            getAllPrimes();
        }

        public int solve() {
            int res = 0;
            for (int i = a; i <= b; i++) {
                //if (i%10000 == 0) System.out.println(i);
                if (getPrimacity(i) == k) {
                    res++;
                }
            }
            return res;
        }

        private int getPrimacity(int n) {
            if (primacityMap.get(n) == null) {
                dividers.clear();

                if (primesSet.contains(n)) {
                    dividers.add(n);
                }

                for (int i = 2; i<=1000; i++) {
                    if (n%i == 0) {
                        int candidat = n / i;
                        if (primesSet.contains(candidat)) {
                            dividers.add(candidat);
                        }
                    }
                }

                for (Integer prime : primes) {
                    if (prime > 10000) break;

                    if (n%prime == 0) {
                        dividers.add(prime);
                    }
                }

                primacityMap.put(n, dividers.size());
            }
            return primacityMap.get(n);
        }

        public static boolean isPrime(int number){
            for(int i=2; i<(int)Math.sqrt(number)+2; i++){
                if(number%i == 0){
                    return false; //number is divisible so its not prime
                }
            }
            return true; //number is prime now
        }

        public void getAllPrimes() {
            if (primes == null) {
                Set<Integer> p = new HashSet<>();
                p.add(2);
                for (int i = 2; i <= 10000000; i++) {
                    if (isPrime(i)) {
                        p.add(i);
                    }
                }

                primes = new Integer[p.size()];
                primes = p.toArray(primes);
                Arrays.sort(primes);
            }

            primesSet = new HashSet<>(Arrays.asList(primes));
        }
    }
}

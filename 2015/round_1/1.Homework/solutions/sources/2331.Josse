#include <iostream>
#include <cassert>
#include <vector>
#include <cstring>

using namespace std;

const int bovengrens = 10000000;
vector<int> primes;
bool isComposite[bovengrens + 1];

void precalc() {
	memset(isComposite, 0, sizeof isComposite);
	for (long long i = 2; i <= bovengrens; i++) {
		if (isComposite[i]) continue;
		primes.push_back(i);
		for (long long j = i * i; j <= bovengrens; j += i)
			isComposite[j] = true;
	}
}

int calc(long long x, unsigned p, int B, int d) {
	if (d == 0) return 1;
	// some pruning
	long long y = x;
	for (int i = 0; i < d; i++) {
		y *= primes[p + i];
		if (y > B) return 0;
	}
	// actual algorithm
	int ret = 0;
	for (unsigned q = p; q < primes.size(); q++) {
		bool canStop = true;
		for (y = x * primes[q]; y <= B; y *= primes[q]) {
			ret += calc(y, q + 1, B, d - 1);
			canStop = false;
		}
		if (canStop) break; // (more pruning)
	}
	return ret;
}

int solve() {
	int A, B, K;
	cin >> A >> B >> K;
	assert(A >= 2 && A <= bovengrens);
	assert(B >= 2 && B <= bovengrens);
	assert(A <= B);
	assert(K >= 1 && K <= 1000000000);
	return calc(1, 0, B, K) - calc(1, 0, A - 1, K);
}

int main() {
	precalc();
	int T;
	cin >> T;
	assert(T >= 1 && T <= 100);
	for (int i = 0; i < T; i++) {
		cout << "Case #" << (i + 1) << ": " << solve() << endl;
	}
	return 0;
}

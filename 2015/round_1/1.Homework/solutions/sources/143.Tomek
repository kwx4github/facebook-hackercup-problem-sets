// Tomasz Kulczynski
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
#include <cassert>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for (int i=0;i<(n);++i)
#define FOR(i,a,b) for (VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(e,v) for(VAR(e,(v).begin());e!=(v).end();++e)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)(a).size())
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

const int M = 10001013;
const int K = 9;

int w[M][K];
int p[M];

void calc() {
    FOR(n, 2, M-1) if(!p[n]) {
        for(int i = n; i < M; i += n) {
            p[i] = n;
        }
    }
    p[1] = 0;
    int ret = 0;
    FOR(n, 2, M-1) {
        int x = n;
        while(x % p[n] == 0) x /= p[n];
        p[n] = p[x] + 1;
        ret = max(ret, p[n]);
        FOR(i, 1, K-1) w[n][i] = w[n-1][i] + (i == p[n]);
    }
    assert(ret < K);
}

int main() {
    calc();
    int dd;
    scanf("%d", &dd);
    FOR(ii, 1, dd) {
        int a,b,k;
        scanf("%d %d %d",&a,&b,&k);
        int ret = 0;
        if (k < K) ret = w[b][k] - w[a-1][k];
        printf("Case #%d: %d\n", ii, ret);
    }
    return 0;
}

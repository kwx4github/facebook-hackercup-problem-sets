/**
 * Created by Александр on 17.01.2015.
 */
var fs = require('fs'),
    debug = true;

fs.readFile('data-1.in', {encoding: 'utf-8'}, function(err, data) {
    _log('Time Start: ' + new Date());
    if (err) throw  err;
    main(data.split("\r\n"));
    _log('Time End: ' + new Date());
});

function _log(data)
{
    if ( debug ) {
        console.log(data);
    }
}

function main(data) {
    var res = '',
        response = '',
        cases = data.shift();
    for ( var i = 1; i <= cases; i++ ) {
        res = 'Case #' + i + ': ' + solve(data.shift().split(' '));

        _log(res);

        response += res + "\n";
    }
    fs.writeFileSync('out-1.txt', response);
}

function array_merge()
{
    var args = Array.prototype.slice.call(arguments),
        argl = args.length,
        arg,
        retObj = {},
        k = '',
        argil = 0,
        j = 0,
        i = 0,
        ct = 0,
        toStr = Object.prototype.toString,
        retArr = true;

    for (i = 0; i < argl; i++) {
        if (toStr.call(args[i]) !== '[object Array]') {
            retArr = false;
            break;
        }
    }

    if (retArr) {
        retArr = [];
        for (i = 0; i < argl; i++) {
            retArr = retArr.concat(args[i]);
        }
        return retArr;
    }

    for (i = 0, ct = 0; i < argl; i++) {
        arg = args[i];
        if (toStr.call(arg) === '[object Array]') {
            for (j = 0, argil = arg.length; j < argil; j++) {
                retObj[ct++] = arg[j];
            }
        } else {
            for (k in arg) {
                if (arg.hasOwnProperty(k)) {
                    if (parseInt(k, 10) + '' === k) {
                        retObj[ct++] = arg[k];
                    } else {
                        retObj[k] = arg[k];
                    }
                }
            }
        }
    }
    return retObj;
}

var
    N = Math.pow(10, 7) + 1,
    Primes = [];
PrimesNumbers();
function PrimesNumbers()
{
    var primes = [];
    primes[0] = primes[1] = false;
    for ( var l = 2; l <= N; l++ ) {
        primes[l] = true;
    }
    _log('N = ' + N);

    for ( var i = 2; i * i <= N; ++i ) {
        if ( primes[i] == 'undefined' || primes[i]) {
            for ( var j = 2; i * j <= N; ++j ) {
                primes[i * j] = false;
            }
        }
    }

    for ( var k = 2; k <= N; k++ ) {
        if ( primes[k] ) {
            Primes.push(k);
        }
    }
}

function solve(data)
{
    var A   = parseInt(data[0]),
        B   = parseInt(data[1]),
        K   = parseInt(data[2]),
        cnt = 0;
    _log('A = ' + A + '; B = ' + B + '; K = ' + K);
    var divisor = 1;
    for ( var _k = 0; _k < K - 1; _k++ ) {
        divisor *= Primes[_k];
    }
    var _prime = Primes.filter(function (num){ return num <= B / divisor;});
    _log(_prime.length);
    _log('Max: ' + _prime[_prime.length - 1]);
    var divisors = [];
    for ( var i = 0; i <= _prime.length; i++ ) {
        var
            _key = _prime[i];
        //_log(prime);
        while ( _key <= B ) {
            if ( divisors[_key] == undefined ) {
                divisors[_key] = 0;
            }
            divisors[_key] = parseInt(divisors[_key]) + 1;
            _key+= _prime[i];
        }
    }

    return divisors.filter(function (num){ return num == K;}).length;
}
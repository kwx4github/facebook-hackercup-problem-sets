#define REP(i,n) for(int i=0; i<(int)(n); i++)

#include <cassert>
#include <queue>

template<int m>
class Prime{
  std::vector<bool> p;
  std::vector<int> ps;
public:
  Prime(){
    p = std::vector<bool>(m,true);
    assert(m>1);
    p[0]=p[1]=false;
    for(int i=4;i<m;i+=2)
      p[i]=false;
    ps.push_back(2);
    for(int i=3;i<m;i+=2){
      if(p[i]){
        ps.push_back(i);
        for(int j=i+i;j<m;j+=i)
          p[j]=false;
      }
    }
  }

  bool isPrime(int n){
    assert(m>n);
    return p[n];
  }

  int operator [] (int n){
    if(n<ps.size()) return ps[n];
    else return 0;
  }

  int size(){
    return ps.size();
  }
};

#include <set>
#include <cstdio>
inline int getInt(){ int s; scanf("%d", &s); return s; }

using namespace std;

int main(){
  const int t = getInt();
  const int MAX = 10000000 + 10;

  Prime<MAX> p;
  vector<int> cnt(MAX);
  vector<vector<int> > sum(40, vector<int>(MAX));

  REP(i,p.size()){
    const int a = p[i];
    for(int b = a; b < MAX; b += a)
      cnt[b]++;
  }

  REP(j,40){
    REP(i,MAX-1){
      sum[j][i + 1] = (cnt[i + 1] == j ? 1 : 0) + sum[j][i];
    }
  }

  REP(c,t){
    const int a = getInt();
    const int b = getInt();
    const int k = getInt();

    int ans = 0;
    if(k < 40) ans = sum[k][b] - sum[k][a - 1];

    printf("Case #%d: %d\n", c + 1, ans);
  }

  return 0;
}

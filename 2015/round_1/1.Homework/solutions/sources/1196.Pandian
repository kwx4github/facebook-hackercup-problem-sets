#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>

#include<iostream>
#include<vector>
#include<map>
#include<string>
#include<set>
#include<queue>
#include<stack>
#include<algorithm>
using namespace std;

#define fori(a,b) for(i = a; i <= b; i++)
#define forj(a,b) for(j = a; j <= b; j++)
#define fork(a,b) for(k = a; k <= b; k++)
#define scani(a) scanf("%d",&a);
#define scanlli(a) scanf("%lld", &a);
#define scanc(c) scanf("%c",&c);
#define scans(s) scanf("%s", s);
#define mp(a,b) make_pair(a, b)
#define ll(a) (long long int)(a)
#define vi vector<int>
#define vc vector<char>
#define vs vector<string>
#define println printf("\n");
#define sz(v) v.size()
#define len(s) s.length()
#define max(a,b) ((a > b) ? a : b)
#define min(a,b) ((a < b) ? a : b)

int primes[10000002];
int isprime[10000002];
int pcount;
vector<vector<int> > vec(10000002);

void sieve() {
    int i, j;
    pcount = 0;
    memset(isprime, 1, sizeof(isprime));
    isprime[0] = isprime[1] = 0;
    fori(2, 3200) {
        if (isprime[i]) {
            primes[pcount++] = i;
            for(j = i * i; j <= 10000001; j += i)
                isprime[j] = 0;
        }
    }
//    printf("pcount : %d\n", pcount);
    fori(2, 10000000) {
        int num = i, cnt = 0;
        for(j = 0; j < pcount && primes[j] <= sqrt(num); j++) {
            if (num % primes[j] == 0) {
                cnt++;
            }
            while (num % primes[j] == 0) {
                num = num / primes[j];
            }
        }
        if (num > 1) {
            cnt++;
        }
   //     printf("i : %d cnt : %d\n", i, cnt);
        vec[cnt].push_back(i);
    }
}

void ceil_search(int key, int k, int l, int r, int &temp) {
    int mid = (l + r) / 2;
    if (l > r) {
        return;
    }
    if (vec[k][mid] == key) {
        temp = mid;
        return;
    } else if (vec[k][mid] > key) {
        temp = mid;
        ceil_search(key, k, l, mid-1, temp);
        return;
    } else {
        ceil_search(key, k, mid+1, r, temp);
        return;
    }
}

void floor_search(int key, int k, int l, int r, int &temp) {
    int mid = (l + r) / 2;
    if (l > r) {
        return;
    }
    if (vec[k][mid] == key) {
        temp = mid;
        return;
    } else if (vec[k][mid] > key) {
        floor_search(key, k, l, mid-1, temp);
        return;
    } else {
        temp = mid;
        floor_search(key, k, mid+1, r, temp);
        return;
    }
}

int main()
{
    int t, tn, a, b, k, ans, i, j;
    scani(t)
    sieve();
//    fori(1, 3) {
//        printf("i : %d vec : ", i);
//        forj(0, vec[i].size()-1)
//            printf("%d ", vec[i][j]);
//        printf("\n");
//    }
    for (tn = 1; tn <= t; tn++) {
        scani(a)
        scani(b)
        scani(k)
        if (k > 10000000) {
            printf("Case #%d: 0\n", tn);
            continue;
        }
        int x = -1, y = -1;
        ceil_search(a, k, 0, vec[k].size()-1, x);
        floor_search(b, k, 0, vec[k].size()-1, y);
        if (x == -1 || y == -1) {
            ans = 0;
        } else {
            ans = y - x + 1;
        }
//        fori(x, y) {
//            printf("%d ", vec[k][i]);
//        }
 //       printf("\n");
        printf("Case #%d: %d\n", tn, ans);
    }
    return 0;
}
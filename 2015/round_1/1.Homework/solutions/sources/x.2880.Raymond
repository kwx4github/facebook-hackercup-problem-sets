primacity = [-1]*(10**7+1)
#returns increasing list of primes up to 10^7
def sieve():
	n = 10 ** 7
	lst = list(range(n+1))
	#0, 1 not prime
	lst[1] = 0 
	#only need to check up to sqrt(n) + 1
	sqrtn = int(round(n**0.5))
	for i in range(2, sqrtn + 1):
		if lst[i]:
			lst[i*i: n+1: i] = [0] * len(range(i*i, n+1, i))
	return list(filter(None, lst)) # filter out all 0s from lst
primes = sieve()

def calculate_primacity(n):
	#if already calculated for this number, return it
	if primacity[n] != -1:
		return primacity[n]

	prime_factors = 0
#	import math
	#sqrt = math.sqrt(n)
	for i in range(len(primes)):
		#only need to check factors up to half the number
		if primes[i] > n//2:
			break
		#check divisibility
		if n % primes[i] == 0:
			prime_factors += 1
	#if the number itself is prime, add one to it
	if n in primes:
		prime_factors += 1
	#add to dictionary for future lookup
	primacity[n] = prime_factors
	return prime_factors
def bin_search_primes(n):
	start = 0
	end = len(primes) - 1

	while(start <= end):
		mid = (end + start) // 2
		if n < primes[mid]:
			end = mid-1
		elif n > primes[mid]:
			start = mid+1
		else:
			return mid
	#returns closest index if not found
	return mid

def calculate_primacity2(n):
	#print(n)
	#if already calculated, return it
	if primacity[n] != -1:
		return primacity[n]

	prime_factors = 0
	i = 0
	reduced = n
	#if prime return 1
	if primes[i] == n:
		return 1

	#while possibly more factors
	while(primes[i] < reduced):
		#if this prime is a factor, increment count and reduce the number
		if reduced % primes[i] == 0:
			prime_factors += 1
			while reduced % primes[i] != 0:
				reduced /= primes[i]
				#if the reduced primacity has already been calculated, add that and return
				if primacity[reduced] != -1:
					prime_factors += primacity[reduced]
					primacity[n] = prime_factors
					return prime_factors
		i += 1

	if primes[i] == reduced:
		prime_factors += 1

	#add to array for future lookup
	primacity[n] = prime_factors
	return prime_factors


#returns amount of numbers in [A,B] with primacity == K
import time
def doMath(A, B, K):
	begin = time.time()
	total = 0
	for i in range(A, B+1):
		if calculate_primacity2(i) == K:
			total += 1
		if time.time() - begin > 10:
			return total
	return total

f = open("homework.txt", 'r')
T = int(f.readline())
out = open('homework_output.txt', 'w')

for i in range(T):
	A, B, K = map(int, f.readline().split(" "))
	val = doMath(A, B, K)
	print("Case #"+str(i+1)+": "+str(val))
	out.write("Case #"+str(i+1)+": "+str(val)+"\n")
out.close()
	
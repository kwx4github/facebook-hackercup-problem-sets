#include <bitset>
#include <vector>
#include <cstring>
using namespace std;

int _sieve_size;
bitset<10000010> bs;
vector<int> primes;
void sieve(int upperbound) {
	_sieve_size = upperbound+1;
	bs.set();
	bs[0] = bs[1] = 0;
	for(long long i = 2; i <= _sieve_size; i++) 
		if (bs[i]) {
			for(long long j = i*i; j < _sieve_size; j+=i)
				bs[j] = 0;
			primes.push_back(i);
		}
}

int primacity_memo[10000010];
int primacity(int n){
    if (primacity_memo[n])
        return primacity_memo[n];
	int input = n;
    int rv = 0;
    for (int p : primes){
        if (p*p > n) break;
        int count = 0;
        while (n % p == 0){
            count++;
            n /= p;
		}
        if (count) rv+=1;
	}
    if (n != 1) rv+=1;
    primacity_memo[input] = rv;
    return rv;
}

int main(){
	memset(primacity_memo, 0, sizeof(primacity_memo));
	sieve(10000000);
	int n;
	scanf("%d", &n);
	for(int opgave = 1; opgave<=n;opgave++){
		int c = 0;
		int A, B, K;
		scanf("%d %d %d", &A, &B, &K);
		for(int l = A; l <= B; l++){
			if(primacity(l) == K){
				c++;
			}
		}
		printf("Case #%d: %d\n", opgave, c);
	}
	return 0;
}
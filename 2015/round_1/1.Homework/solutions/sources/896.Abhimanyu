import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

public class Homework {

  private InputStream input;
  private PrintStream output;
  private Scanner inputSc;

  private static int MAX_N = 10000000;
  private int primicity[] = new int[MAX_N + 1];

  public Homework(InputStream input, PrintStream output) {
    this.input = input;
    this.output = output;
    init();
  }

  private void init() {
    inputSc = new Scanner(input);
    int[] primes = getPrimes(MAX_N);
    for (int p : primes) {
      int n = p;
      while (n <= MAX_N) {
	primicity[n]++;
	n += p;
      }
    }
  }

  static int lineToInt(String line) {
    return Integer.parseInt(line);
  }

  public void solve() {
    int testCaseCount = inputSc.nextInt();
    for (int testN = 1; testN <= testCaseCount; testN++) {
      solveTestCase(testN);
    }
  }

  private void solveTestCase(int testN) {
    int A = inputSc.nextInt();
    int B = inputSc.nextInt();
    int K = inputSc.nextInt();
    int ans = 0;
    for (int n = A; n <= B; n++) {
      if (primicity[n] == K) {
	ans++;
      }
    }
    output.println("Case #" + testN + ": " + ans);
  }

  public static void main(String[] args) {
    Homework obj = new Homework(System.in, System.out);
    obj.solve();
  }

  static int[] getPrimes(int limit) {
    boolean notPrime[] = new boolean[limit + 1];
    notPrime[0] = notPrime[1] = true;
    int primeCount = (limit + 1) - 2;
    // when (i*i) can overflow
    // i=46340 i*i=2147395600
    // i=46341 => overflow
    // i=46339 i*i= 2147302921
    int magic = 2147395600;
    if (limit >= magic) {
      System.err.println("Prime.Error: limit>=magic " + limit + " " + magic);
      System.err.flush();
    }
    for (int i = 2; (i * i) <= limit; i++) {
      if (!notPrime[i]) {
	// no need to check multiple of i*1, i*2, i*3,
	// because eliminated by multiple of 2, 3, ... i-1
	for (int j = i * i; j <= limit; j += i) {
	  if (!notPrime[j]) {
	    notPrime[j] = true;
	    primeCount--;
	  }
	}
      } else {
	// no need to do any thing because
	// already eliminated by factors
      }
    }
    int primes[] = new int[primeCount];
    int index = 0;
    for (int i = 0; i <= limit; i++) {
      if (!notPrime[i]) {
	primes[index++] = i;
      }
    }
    return primes;
  }
}
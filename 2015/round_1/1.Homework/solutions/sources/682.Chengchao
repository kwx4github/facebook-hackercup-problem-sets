#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

#define MAXN 10000000

int pa[MAXN + 1], prime[MAXN], p_cnt, factor[MAXN + 1];

void get_prime() {
	p_cnt = 0;
	//memset(a, 0, sizeof(a));
	//memset(prime, 0, sizeof(prime));
	pa[0] = pa[1] = 1;
	for (int i = 2; i <= MAXN; ++i) {
		if (!pa[i]) {
			factor[i] = i;
			prime[p_cnt++] = i;
		}
		for (int j = 0; j < p_cnt && i * prime[j] <= MAXN; ++j) {
			factor[i * prime[j]] = prime[j];
			pa[i * prime[j]] = 1;
			if (i % prime[j] == 0)
				break;
		}
	}
}

int primacity[MAXN + 1];
vector<int> vec[100];

void init() {
  get_prime();
  for (int i = 2; i <= MAXN; ++i) {
    primacity[i] = primacity[i / factor[i]]
      + (factor[i] != factor[i / factor[i]]);
    vec[primacity[i]].push_back(i);
  }
  /*
  for (int i = 0; i < 100; ++i) {
    if (vec[i].size() != 0) {
      printf("primacity %d: %llu numbers:\n", i, vec[i].size());
      for (int j = 0; j < (int)vec[i].size() && j < 10; ++j)
        printf("%d ", vec[i][j]);
      puts("");
    }
  }*/
}

int main() {
  init();
  int test; scanf("%d", &test);
  for (int cas = 1; cas <= test; ++cas) {
    int a, b, k; scanf("%d%d%d", &a, &b, &k);
    if (k >= 100) {
      printf("Case #%d: 0\n", cas);
    } else {
      int ans = upper_bound(vec[k].begin(), vec[k].end(), b) -
        lower_bound(vec[k].begin(), vec[k].end(), a);
      printf("Case #%d: %d\n", cas, ans);
    }
  }
  return 0;
}

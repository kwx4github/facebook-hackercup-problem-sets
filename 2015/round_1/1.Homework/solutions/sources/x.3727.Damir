#include <iostream>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iomanip>
#include <math.h>
using namespace std;

typedef long long ll;

const int kMaxRange = 10000000;

void CalcPrimacity(vector<int> &ret) {
  for (int i = 2; i <= kMaxRange; ++i) {
    if (ret[i]) continue;
    for (int j = i; j <= kMaxRange; j += i)
      ret[j]++;
  }
}

void PrefixSum(vector<int> &val, vector<int> &ret) {
  for (int i = 0; i < val.size(); ++i)
    ret[i] = ret[i-1] + val[i];
}

int main() {
  vector<int> primacity(kMaxRange+5, 0);
  vector<int> pfx_primacity(kMaxRange+5);
  CalcPrimacity(primacity);

  vector<int> grouped[40];
  vector<int> pfx_grouped[40];
  for (int i = 0; i < 40; ++i) 
    pfx_grouped[i] = grouped[i] = vector<int>(kMaxRange, 0);
  for (int i = 2; i <= kMaxRange; ++i)
      grouped[primacity[i]][i] = 1;
  for (int i = 0; i < 40; ++i)
      PrefixSum(grouped[i], pfx_grouped[i]);

  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; ++test) {
    int lo,hi,dist_prime; cin >> lo >> hi >> dist_prime;
    if (dist_prime > 40) {
      cout << "Case #" << test << ": " << 0 << endl;
      continue;
    }

    cout << "Case #" << test << ": " << pfx_grouped[dist_prime][hi] - pfx_grouped[dist_prime][lo-1] << endl;
  }
  return 0;
}
//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define clr(a) memset(a,0,sizeof(a))
#define reset(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define pb push_back
#define mp make_pair
#define pri(x) printf("%d\n",x)
#define pi 3.14159265359
#define X first
#define Y second

vector<int> mat[33];

//sieve code start
#define N 10000002
bool prime[N];
vector<int> pr[N];
int sz;

void sieve()
{
    int i,j;
    memset(prime,1,sizeof(prime));
    prime[0]=prime[1]=0;
    pr[2].pb(2);
    for(i=4;i<N;i+=2)
    {
        prime[i]=false;
        pr[i].pb(2);
    }
    for(i=3;i<=N/2;i+=2)
    {
        if(prime[i])
        {
            for(j=2*i;j<N;j+=i)
            {
                pr[j].pb(i);
                prime[j]=false;
            }
            pr[i].pb(i);
        }
    }
    for(;i<N;i+=2)
    {
        if(prime[i])
        {
            pr[i].pb(i);
        }
    }
    for(i=2;i<N;i++)
    {
        mat[pr[i].size()].pb(i);
    }
}
//sieve code ends

int query(int l, int r, int k)
{
    vector<int>::iterator it1,it2;
    it1=lower_bound(mat[k].begin(),mat[k].end(),l);
    it2=upper_bound(mat[k].begin(),mat[k].end(),r);
    return it2-it1;
}

int main()
{
    FRO
    FROut
    sieve();
    int t;
    scanf("%d",&t);
    int ca;
    for(ca=1;ca<=t;ca++)
    {
        int a,b,k;
        scanf("%d %d %d",&a,&b,&k);
        int ans;
        if(k>30)
        {
            ans=0;
        }
        else
        {
            ans=query(a,b,k);
        }
        printf("Case #%d: %d\n",ca,ans);
    }
    return 0;
}

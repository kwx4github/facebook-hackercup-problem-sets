#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 10000001;
int f[N];
vector<int> a[10];
void init(){
    f[0] = f[1] = 0;
    for(int i=2; i<N; i++)  f[i] = 0;
    for(int i=2; i<N; i++){
        if(f[i])   continue;
        for(int k=2; k*i < N; k++)  f[k*i]++;
    }
    for(int i=2; i<N; i++){
        if(0==f[i]) a[1].push_back(i);
        else    a[f[i]].push_back(i);
    }
}
void dfs(vector<int> &t, int low, int high, int a, int b, int &ans){
    if(t[high]<a || b<t[low]) return;
    if(a<=t[low] && t[high]<=b){
        ans += high-low+1;
        return;
    }
    int mid = (low+high)>>1;
    if(a<=t[mid])  dfs(t, low, mid, a, b, ans);
    if(t[mid+1]<=b)    dfs(t, mid+1, high, a, b, ans);
}
int main()
{
//    freopen("in1.txt", "r", stdin);
//    freopen("ou1.txt", "w", stdout);
    init();
    int t, kase=0;
    cin >> t;
    while(t--){
        int A, B, K;
        cin >> A >> B >> K;
        cout << "Case #" << (++kase) << ": ";
        if(K>8){
            cout << 0 << endl;
        }
        int ans = 0;
        dfs(a[K], 0, a[K].size()-1, A, B, ans);
        cout << ans << endl;
    }
    return 0;
}

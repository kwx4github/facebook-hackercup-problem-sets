#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
#define MAXN 10000005
#define MAXT 105
#define MAXP 10
int prime[MAXN], plist[MAXN], p;
vector<int> pgroup[MAXP];

int lb(int k, int x) {
	int len = pgroup[k].size();
	int l = 0, r = len - 1, t;
	while(l + 1 < r) {
		t = (l + r + 1) / 2;
		if(pgroup[k][t] >= x) {
			r = t;
		} else {
			l = t;
		}
	}
	return r;
}

int ub(int k, int x) {
	int len = pgroup[k].size();
	int l = 0, r = len - 1, t;
	while(l + 1 < r) {
		t = (l + r) / 2;
		if(pgroup[k][t] <= x) {
			l = t;
		} else {
			r = t;
		}
	}
	return l;
}

int main() {
	memset(prime, 1, sizeof(prime));
	prime[0] = prime[1] = 0;
	for(int i = 2; i < MAXN; i++) {
		if(prime[i]) for(int j = 2; j * i < MAXN; j++) {
			prime[j * i] = 0;
		}
	}
	p = 0;
	for(int i = 0; i < MAXN; i++) {
		if(prime[i]) {
			plist[p++] = i;
		}
	}
	for(int i = 0; i < MAXP; i++) {
		pgroup[i].push_back(-1);
	}
	for(int i = 2; i <= 10000000; i++) {
		int cnt = 0, k = i;
		if(prime[k]) goto skip;
		for(int j = 0; plist[j] * plist[j] <= k; j++) {
			if(k % plist[j] == 0) {
				while(k % plist[j] == 0){
					k /= plist[j];
				}
				cnt ++;
			}
		}
skip:
		if(prime[k]) cnt++;
		pgroup[cnt].push_back(i);
	}
	for(int i = 0; i < MAXP; i++) {
		pgroup[i].push_back(MAXN);
	}
	// for (int i = 0; i < 10; ++i)
	// {
	// 	printf("%d\n", (int)pgroup[i].size());
	// }
	int T, Case;
	scanf("%d", &T);
	for(int Case = 1; Case <= T; Case++) {
		printf("Case #%d: ", Case);
		int a, b, k, num;
		scanf("%d%d%d", &a, &b, &k);
		num = ub(k, b) - lb(k, a) + 1;
		if(num < 0) num = 0;
		printf("%d\n", num);
	}
	return 0;
}
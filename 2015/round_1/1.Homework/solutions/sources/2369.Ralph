#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <map>
using namespace std;
typedef long long i64;

#define fu(i,m,n) for(int i=m; i<n; i++)
#define fd(i,m,n) for(int i=n-1; i>=m; i--)
#define fr(i,m,n) for(typeof(m) i=m; i!=n; ++i)
#define fa(i,c) fr(i,(c).begin(),(c).end())

//vector<int> nprimes(11000000,0);
vector<int> sieve(11000000,1);

int doit(int A, int B, int K, int p) {
    if(A>B) return 0;
    if(B==0) return 0;
    if(K==0) return (A<=1);
    //cout << A << " " << B << " " << K << " " << p << endl;
    int ret=0;
    for(;;) {
        while(!sieve[p]) p++;
        if(p>B) break;
        //if(K==2 && p*(p+1)>B) break;
        //if(K==3 && p*(p+1)*(p+2)>B) break;
        //if(K==1 && p*p>B) {
            //ret += nprimes[B]-nprimes[max(p,A)-1];
            //break;
        //}
        //ret += doit(A,B,K,p+1);
        int A2=A, B2=B;
        while(B2 && A<=B) {
            A2=(A2+p-1)/p;
            B2=B2/p;
            ret += doit(A2,B2,K-1,p+1);
        }
        p++;
    }
    return ret;
}

int main(void) {

    //cout << "Sieving" << endl;
    sieve[0]=0;
    for(int p=2; p<11000000; p++) if(sieve[p]) {
        for(int q=p+p; q<11000000; q+=p) sieve[q]=0;
    }
    //for(int p=2; p<11000000; p++) nprimes[p] = nprimes[p-1] + sieve[p];
    //cout << "Done" << endl;
    //for(int i=0; i<20; i++) if(sieve[i]) cout << i << " "; cout << endl;

	int TS; cin >> TS;
	for(int ts=1; ts<=TS; ts++) {
        int A,B,K;
        cin >> A >> B >> K;
		cout << "Case #" << ts << ": ";
        cout << doit(A,B,K,2);
		cout << endl;
	}
}

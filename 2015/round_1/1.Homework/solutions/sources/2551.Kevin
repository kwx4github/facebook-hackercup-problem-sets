#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <cstring>
#include <cassert>
using namespace std;

#define MAX 10000000
#define MAXP 8

int primacity[MAX+1];
int cumul[8][MAX+1];

void genPrimacity(){
  memset(primacity, 0, sizeof primacity);
  // Sieve
  for (int i=2; i<=MAX; i++) {
    if (primacity[i] == 0) {
      // i is prime
      for (int j=i; j<=MAX; j+=i) {
        primacity[j]++;
      }
    }
  }

/*
  for (int i=2; i<=MAX; i++) {
    cout << i <<" " << primacity[i] << endl;
  }
*/
}

void readPrimacity() {
  ifstream f("primacity-table.txt");
  for (int i=2; i<=MAX; i++) {
    int j;
    cin >> j;
    f >> primacity[j];
  }
}


int main() {
  genPrimacity();
  memset(cumul, 0, sizeof cumul);

  for (int i=2; i<=MAX; i++) {
    for (int k=0; k<8; k++) {
      cumul[k][i]=cumul[k][i-1];
    }
    assert(primacity[i] >= 1 && primacity[i] <= 8);
    cumul[primacity[i]-1][i]++;
  }

// DEBUG
/*
  cerr << "K=2" << endl;
  for (int i=2; i<=15; i++) {
    cerr << i << " " << cumul[2-1][i] << endl;
  }
  */

  int T;
  cin >> T;
  for (int testcase=1; testcase<=T; testcase++) {
    int A, B, K;
    cin >> A >> B >> K;
    assert(2 <= A && A <= B && B <= MAX);
    int answer = (K > 8) ? 0 : (cumul[K-1][B] - cumul[K-1][A-1]);
    cout << "Case #" << testcase << ": " << answer << endl;
  }

  return 0;
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <vector>
using namespace std;

const int maxn = 10000100;
const int maxp = 1000100;
const int maxs = 100010;
const int maxpm = 10;
const int section = 100;

bool isprime[maxn];
int primes[maxp], primelen;
int factor[maxn], primacity[maxn];
int prefix[maxs][maxpm];

inline void init(){
  //build prime table
  memset(isprime, true, sizeof(isprime));
  primelen = 0;

  for(int i = 2; i * i < maxn; i++)
  if(isprime[i])
    for(int j = maxn / i; j >= i; j--)
    if(isprime[i * j]){ isprime[i * j] = false; factor[i * j] = i; }

  for(int i = 2; i < maxn; i++)
  if(isprime[i]) primes[primelen++] = i;

  for(int i = 0; i < primelen; i++)
    factor[primes[i]] = primes[i];

  //build primacity
  primacity[1] = 0;
  for(int i = 2; i < maxn; i++){
    if(i / factor[i] % factor[i] == 0) primacity[i] = primacity[i / factor[i]];
    else primacity[i] = primacity[i / factor[i]] + 1;
  }

  //build prefix
  memset(prefix, 0, sizeof(prefix));
  for(int i = 2; i < maxn; i++)
    prefix[i / section][primacity[i]]++;

  for(int i = 1; i < maxpm; i++)
  for(int idx = 1; idx < maxs; idx++)
    prefix[idx][i] = prefix[idx][i] + prefix[idx - 1][i];
}

inline int prefix_sum(int idx, int k){
  int sec = idx / section, res = 0;

  if(sec > 0) res += prefix[sec - 1][k];
  for(int i = section * sec; i <= idx; i++)
    if(primacity[i] == k) res++;
  return res;
}

inline int sum(int a, int b, int k){ return prefix_sum(b, k) - prefix_sum(a - 1, k); }

int main(){
  int cas, a, b, k;
  init();
  scanf("%d", &cas);
  for(int cascnt = 1; cascnt <= cas; cascnt++){
    scanf("%d%d%d", &a, &b, &k);
    if(k >= maxpm) printf("Case #%d: 0\n", cascnt);
    else printf("Case #%d: %d\n", cascnt, sum(a, b, k));
  }
  return 0;
}

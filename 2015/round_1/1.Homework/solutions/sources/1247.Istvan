
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
typedef unsigned long long LL;
#define FOR(k,a,b) for(int k(a); k < (b); ++k)
#define FORD(k,a,b) for(int k(b-1); k >= (a); --k)
#define REP(k,a) for(int k=0; k < (a); ++k)
#define ABS(a) ((a)>0?(a):-(a))
#define SQR(a) ((a)*(a))
#define SQRT(a) (sqrt(double(a)))
const LL INF = 1e18;

int main( int argc, char* argv[] ) 
{
#ifdef HOME
	freopen("homework.txt","r",stdin);
	freopen("out.txt","wb",stdout);
#endif
	int T,K,A,B;
	int Z=2e7+1;
	vector<int> w(Z,0);
	vector<bool> p(Z,1);
	FOR(i,2,Z) if(p[i])
	{
		for(int j=i;j<Z;j+=i)
		{
			p[j]=0;
			w[j]++;
		}
	}
	vector<int> t(40);
	FOR(i,2,Z) t[w[i]]++;
	vector<vector<int> > o(40);
	REP(i,40)
		o[i].reserve(t[i]);
	FOR(i,2,Z)
		o[w[i]].push_back(i);
	scanf("%d",&T);
	FOR(tc,1,T+1)
	{
		scanf("%d %d %d",&A,&B,&K);
		int res=0;
		if(K<40)
		{
			const vector<int>& act=o[K];
			vector<int>::const_iterator it1=lower_bound(act.begin(),act.end(),A);
			vector<int>::const_iterator it2=upper_bound(act.begin(),act.end(),B);
			res=distance(it1,it2);

		}
		printf("Case #%d: %d\n",tc,res);
	}
	return 0;
}

#include <bits/stdc++.h>

using namespace  std;

typedef long long ll;

#define clr(a) (a.clear())
#define MP(a,b) make_pair(a,b)
#define sz(x) (int)x.size()
#define mem(a,b) memset(a, b, sizeof(a))
#define Unique(store) store.resize(unique(store.begin(),store.end())-store.begin())
#define pb push_back
#define FAST ios_base::sync_with_stdio(0);cin.tie(0);

#define X first
#define Y second

typedef pair<int , int> pii;
typedef pair<ll , ll> pll;
const ll inf = 1;
const ll mod = 1LL;

#define SZ 10010

bool arr[SZ];
vector <int> prime;

void sieve () {
    int k = 10000;
    for (int i = 3; i < k; i += 2) {
        if (!arr[i]) {
            for (int j = i * i; j < SZ; j += i + i) {
                arr[j] = 1;
            }
        }
    }
    prime.pb(2);
    for (int i = 3; i < SZ; i += 2) {
        if (!arr[i]) {
            prime.pb(i);
        }
    }
    int num = 1;
//    for (int i = 0; i < 9; i++) {
//        num *= prime[i];
//        cout << num << '\n';
//    }
}

int factorize (int n) {
    int cnt = 0;
    for (int i = 0; i < sz(prime) && prime[i]*prime[i] <= n; i++) {
        if (n % prime[i] == 0) {
            while (n % prime[i] == 0) {
                n /= prime[i];
            }
            cnt++;
        }
    }
    if (n != 1) {
        cnt++;
    }
    return cnt;
}

int sum[10][10000000];

int main() {
    #if defined JESI
        freopen("1.txt", "r", stdin);
        freopen("2.txt", "w", stdout);
    #endif

    ios::sync_with_stdio(0);

    sieve();

    for (int i = 1; i <= 1E7; i++) {
        int cnt = factorize(i);
//        cout << "> " << i << ' ' << cnt << '\n';
        for (int j = 1; j < 10; j++) {
            sum[j][i] = sum[j][i-1];
            if (j == cnt) {
                sum[j][i] += 1;
            }
        }
    }

    int t;
    cin >> t;

    for (int cs = 0; cs < t; cs++) {
        int a, b, k;
        cin >> a >> b >> k;
        cout << "Case #" << cs + 1 << ": " << (k > 9 ? 0 : sum[k][b] - sum[k][a-1]) << '\n';
    }


    return 0;
}







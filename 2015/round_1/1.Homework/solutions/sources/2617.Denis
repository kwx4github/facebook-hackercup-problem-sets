#include<iostream>
#include<vector>

using namespace std;

const int MAXN = 10 * 1000 * 1000;
// const int MAXN = 10 * 1000;

int Primacity[MAXN + 10];

void PreCalc()
{
    vector <int> Primes;
    vector<int> P(MAXN + 1, true);
    P[0] = false;
    P[1] = false;
    for (int i = 2; i <= MAXN; ++i)
        if (P[i])
        {
            // cerr << i << endl;
            for(int j = i; j <= MAXN; j += i)
            {
                Primacity[j]++;
                P[j] = false;
            }
        }
}

bool IsPrime(int n)
{
    int d = 2;
    while (d * d <= n && n % d != 0)
        d++;
    return d * d > n;
}

int PrimacitySlow(int n)
{
    int ans = 0;
    if (IsPrime(n))
        return 1;
    int d;
    for (d = 2; d * d < n; ++d)
    {
        if (n % d == 0 && IsPrime(d))
            ans++;
        if (n % d == 0 && IsPrime(n / d))
            ans++;
    }
    if (d * d == n && IsPrime(d))
        ans++;
    return ans;
}

int SolutionSlow(int a, int b, int k)
{
    int ans = 0;
    for (int i = a; i <= b; ++i)
        if (PrimacitySlow(i) == k)
            ans++;
    return ans;
}

int SolutionFast(int a, int b, int k)
{
    int ans = 0;
    for (int i = a; i <= b; ++i)
        if (Primacity[i] == k)
            ans++;
    return ans;
}

int main()
{
    PreCalc();
    int T, t, a, b, k;
    cin >> T;
    for (t = 1; t <= T; ++t)
    {
        cin >> a >> b >> k;
        int ans2 = SolutionFast(a, b, k);
        cout << "Case #" << t << ": " << ans2 << endl;
    }
    return 0;
}

int main1()
{
    PreCalc();
    int l, r, k;
    for (r = 2; r <= MAXN; ++r)
    {
         cout << r << endl;
        for (l = 2; l <= r; ++l)
        {
            for (k = 1; k <= 11; ++k)
            {
                if (SolutionSlow(l, r, k) != SolutionFast(l, r, k))
                        return 0;
            }
        }
    }
}


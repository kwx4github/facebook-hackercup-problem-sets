#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <functional>
#include <bitset>
using namespace std;
#define inf 1000000
#define sc(x) scanf("%d", &x);
typedef long long int ll;
typedef pair<int, int> ii;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;

ll _sieve_size;
bitset<10000010> bs;
vi primes; 
void sieve(ll upperbound) {
	_sieve_size = upperbound + 1;
	bs.set();
	bs[0] = bs[1] = 0;
	for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
		for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
		primes.push_back((int)i);
	} 
}

ll numPF(ll N) {
	ll PF_idx = 0, PF = primes[PF_idx], ans = 0;
	while (N != 1 && (PF * PF <= N)) {
		if(N % PF == 0){
			ans++;
			while (N % PF == 0) { N /= PF; }
		}
		PF = primes[++PF_idx];
	}
	if (N != 1) ans++;
	return ans;
}

int main(){

	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	sieve(10000);
	int T;
	sc(T);
	map<int, vector<ll> > Map;

	for (int i = 2; i <= 10000000; i++)
	{
		ll k = numPF(i);
		Map[k].push_back(i);
	}

	vector<ll> vec;
	for (int t = 0;  t < T;  t++)
	{
		printf("Case #%d: ", t+1);
		int a, b, k;
		sc(a);
		sc(b);
		sc(k);
		if(a > b) swap(a, b);
		vec = Map[k];
		int x = lower_bound(vec.begin(), vec.end(), a) - vec.begin();
		int y = lower_bound(vec.begin(), vec.end(), b) - vec.begin();
		if(y < vec.size() && vec[y] != b) y--;
		printf("%d\n", y-x+1);
	}

	return 0;
}

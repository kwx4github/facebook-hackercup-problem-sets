#include <algorithm>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
using namespace std;
int n = 10000000;
vector<int > primes = {};
vector<int> primacity(n + 1,0);

vector<vector<int>> ofPrimacity(32, vector <int>(0));
int nPrimacity[32] = {0};
// Using Sieve of Eratosthenes Algorithm


void calcPrimacity(){
	for (int p = 2; p <= n; p++){
		if (primacity[p] == 0)
			for (int j = 1; j*p <= n; j++)
				primacity[j*p]++;
		ofPrimacity[primacity[p]].push_back(p);	
	}
}
int nPrimacityTill(int K, int A){
	return lower_bound(ofPrimacity[K].begin(), ofPrimacity[K].end(), A) - ofPrimacity[K].begin();
}
int main()
{
	/*
	freopen("homework_example_output.txt", "w", stdout);
	freopen("homework_example_input.txt", "r", stdin);
	*/
	
	freopen("homework_output.txt", "w", stdout);
	freopen("homework.txt", "r", stdin);
	
	int T, A, B, iT, K;
	cin >> T;
	calcPrimacity();
	
	for (iT = 1; iT <= T; iT++){
		cin >> A >> B >> K;	
		int nPrimacityInRange =(K>=32) ?0:  ( nPrimacityTill(K,B) - nPrimacityTill(K,A) +(primacity[B]==K? 1:0)) ;
		cout << "Case #" << iT << ": " << nPrimacityInRange << "\n";
	}
}
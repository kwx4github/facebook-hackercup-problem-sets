#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

const int NMax = 10000000;

int K;
int A, B;
int primacity[NMax + 10];
int ciur[NMax + 10], nciur;
bool viz[NMax + 10];
int factmax[NMax + 10];
vector <int> sol[12];

void Make_Ciur()
{
    ciur[++nciur] = 2;
    for (int d = 3; d <= NMax; d += 2)
    {
        if (viz[d] == false)
        {
            ciur[++nciur] = d;
            if (1LL * d * d <= NMax)
                for (int i = d * d; i <= NMax; i += d)
                    viz[i] = true;
        }
    }
}

inline int Solve(const int L)
{
    if (K > 10)
        return 0;
    int st = 0, dr = sol[K].size() - 1;
    int ret = -1;
    while (st <= dr)
    {
        int mij = (st+dr) >> 1;
        if (sol[K][mij] <= L)
        {
            ret = mij;
            st = mij + 1;
        }
        else
            dr = mij - 1;
    }
    return ret + 1;
}

int main()
{
    Make_Ciur();
    primacity[1] = 1;
    for (int i = 1; i <= nciur; ++ i)
    {
        int x = ciur[i];
        int put = 1;
        while (1LL * put * x <= 1LL * NMax)
        {
            put = put * x;
            for (int j = 1; j <= NMax && 1LL * put * j <= NMax; ++ j)
                if (primacity[j] != 0 && factmax[j] != x)
                {
                    primacity[put * j] = 1 + primacity[j];
                    factmax[put * j] = x;
                }
        }
    }
    for (int i = 1; i <= NMax; ++ i)
    {
        sol[primacity[i] - 1].push_back(i);
    }
    ifstream f ("input.txt");
    FILE *g = fopen("output.txt", "w");
    int T;
    f >> T;
    for (int i = 1; i <= T; ++ i)
    {
        f >> A >> B >> K;
        fprintf(g, "Case #%d: %d\n", i, Solve(B) - Solve(A-1));
    }
    f.close();
    fclose(g);

//    ofstream cout ("test.txt");
//    for (int i = 2; i <= NMax; ++ i)
//    {
//        int x = i;
//        int nr = 0;
//        for (int d = 1; ciur[d] * ciur[d] <= x; ++ d)
//            if (x % ciur[d] == 0)
//            {
//                ++ nr;
//                while (x % ciur[d] == 0)
//                    x /= ciur[d];
//            }
//        if (x != 1)
//            ++ nr;
//        if (nr != primacity[i] - 1)
//        {
//            cout << i << " " << primacity[i] << "\n";
//        }
//
//    }
//    cout.close();
//    for (vector <int> :: iterator it = sol[1].begin(); it != sol[1].end(); ++ it)
//        cout << *it << " " ;

    return 0;
}

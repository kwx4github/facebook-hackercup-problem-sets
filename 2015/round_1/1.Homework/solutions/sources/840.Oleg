#include <assert.h> 
#include <ctype.h> 
#include <float.h> 
#include <math.h> 
#include <stdio.h> 
#include <string> 
#include <stdlib.h> 
#include <time.h> 
#include <algorithm> 
#include <numeric> 
#include <functional> 
#include <utility> 
#include <vector> 
#include <list> 
#include <set> 
#include <map> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <memory.h>

using namespace std; 

const int MAX_P = 10000002;
int p[MAX_P];
bool isPrime[MAX_P];

int sum[9][MAX_P];

int A, B, K;
void read() {
	scanf("%d %d %d", &A, &B, &K);
}

void solve() {
	if (K > 8) {
		printf("0\n");
		return;
	}
	printf("%d\n", sum[K][B] - sum[K][A - 1]);
}

int main(int argc, char* argv[]) {
#ifdef LAPTOP
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout); 
#endif
	memset(isPrime, true, sizeof(isPrime));
	
	for (int i = 2; i < MAX_P; i++) {
		if (isPrime[i]) {
			p[i] = 0;
			for (int j = i; j < MAX_P; j+= i) {
				p[j]++;
				isPrime[j] = false;
			}
		}
	}

	int maxp = 0;
	for (int i = 2; i < MAX_P; i++) {
		maxp = max(maxp, p[i]);
	}
	assert(maxp == 8);
	for (int i = 1; i <= 8; i++) {
		int cur = 0;
		for (int j = 1; j < MAX_P; j++) {
			if (p[j] == i) {
				cur++;
			}
			sum[i][j] = cur;
		}
	}

	int T;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++) {
		read();
		printf("Case #%d: ", t);
		solve();
	}

	return 0;
}


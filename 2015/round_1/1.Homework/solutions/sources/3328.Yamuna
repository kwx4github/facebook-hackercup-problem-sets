import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestFH3 {

	public static void main(String[] args) {
		int total=10000001;
		int[] array = new int[total];
		long startTime = System.currentTimeMillis();
		boolean[] bool = findPrimes(10000000);

		for (int i = 2; i <= 10000000; i++) {
			if (!bool[i]) {
				array[i] = 1;

			}
		}

		// Map<Integer,TreeSet<Integer>> map=new
		// HashMap<Integer,TreeSet<Integer>>();
		Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
		for (int i = 2; i <= 10000000; i++) {
			computePrimes(i, array, map);
		}
		//System.out.println(array[9699690]);
		//System.out.println(map.keySet());
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					new FileInputStream("input.txt")));
			BufferedWriter write=new BufferedWriter(new OutputStreamWriter(new FileOutputStream("output.txt")));
			String str = null;
			boolean start = true;
			int t = 0;
			int count = 0;

			while ((str = br.readLine()) != null) {
				if (start) {
					t = Integer.parseInt(str);
					start = false;
				} else {
					if (count < t) {

						long st = System.currentTimeMillis();

						String[] values = str.split("\\s+");
						int a = Integer.parseInt(values[0]);
						int b = Integer.parseInt(values[1]);
						int k = Integer.parseInt(values[2]);
						List<Integer> list = map.get(k);
						int c = 0;

						if (list != null && !list.isEmpty()) {
							//System.out.println(list.size());
							/*int value1=Collections.binarySearch( list,a);
							int value2=Collections.binarySearch( list,b);
							if(value1==a&&value2==b){
								c=b-a+1;
							}
							else if((value1>a&&value2==b)||(value2>b&&value1==a)){
								c=b-a;
							}
							else {
								c=b-a-1;
							}*/

							for (Integer i : list) {

								if (i >= a && i <= b) {
									c++;
								}
							}
						}

					/*
						 TreeSet<Integer> set=anotherMap.get(k); int c= set.subSet(a,
						  true, b, true).size();
						  */
						 
					/*	System.out.println("size "
								+ (System.currentTimeMillis() - st));*/
						write.write("Case #" + (count+1) + ":" + " " + c);
						write.newLine();
						write.flush();

						count++;
					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		//System.out.println(System.currentTimeMillis() - startTime);

	}

	private static void computePrimes(int n, int[] array,
			Map<Integer, List<Integer>> map) {

		int orig = n;
		int count = 0;
		while (n % 2 == 0) {
			count = 1;

			n = n / 2;
		}

		// System.out.println(n);
		// n must be odd at this point. So we can skip one element (Note i = i
		// +2)

		for (int i = 3; i <= Math.sqrt(n); i = i + 2) {
			// System.out.println("Here "+n);

			if (array[n] > 0) {
				count = count + array[n];
				n = 0;
				break;
			}
			if (n % i == 0) {
				count++;
			}
			// While i divides n, print i and divide n
			while (n % i == 0) {

				n = n / i;
			}

		}
		if (n > 2) {
			count = count + 1;
		}

		array[orig] = count;
		if (count > 0) {
			if (map.get(count) == null) {
				// map.put(count, new TreeSet<Integer>() );
				map.put(count, new ArrayList<Integer>());
			}
			map.get(count).add(orig);
		}
	}

	private static boolean[] findPrimes(int n) {
		boolean[] arr = new boolean[n + 1];

		if (n >= 2) {
			// Create an array of size n and initialize all elements as 0

			/*
			 * Following property is maintained in the below for loop arr[i] ==
			 * 0 means i + 1 is prime arr[i] == 1 means i + 1 is not prime
			 */
			for (int i = 2; i <= n; ++i) {
				if (!arr[i]) {
					// (i+1) is prime, print it and mark its multiples
					// printf("%d ", i+1);
					markMultiples(arr, i, n);
				}
			}
		}
		return arr;
	}

	private static void markMultiples(boolean arr[], int a, int n) {
		int i = 2, num;
		while ((num = i * a) <= n) {
			arr[num] = true; // minus 1 because index starts from 0.
			++i;
		}
	}

}

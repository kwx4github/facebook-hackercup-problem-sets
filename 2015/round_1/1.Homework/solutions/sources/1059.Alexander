def primesto(n):
    primes = [True for _ in xrange(n+1)]
    primes[0] = False
    primes[1] = False
    curr = 2
    while curr <= n:
        d = curr + curr
        while d <= n:
            primes[d] = False
            d += curr
        curr += 1
        while curr <= n and not primes[curr]:
            curr += 1
    return [i for i in xrange(2, n+1) if primes[i]]

pri = primesto(10 ** 7)


def f(ma, k, i):
    total = 0
    if k == 1:
        for j in xrange(i, len(pri)):
            p = pri[j]
            if p > ma:
                break
            b = p
            while b <= ma:
                total += 1
                b *= p
        return total
    for j in xrange(i, len(pri)):
        p = pri[j]
        min = 1
        for ind in xrange(j, j+k):
            min *= pri[j]
        if min > ma:
            break
        b = p
        while b <= ma:
            total += f(ma / float(b), k-1, j+1)
            b *= p
    return total

t = input()
for case in xrange(1, t+1):
    a,b,k= map(int, raw_input().split())
    k = min(k, 12)
    print "Case #%d: %d" % (case, f(b,k,0) - f(a-1, k,0))

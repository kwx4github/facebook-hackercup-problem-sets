import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 *
 */

/**
 * @author dattran
 *
 */
public class HomeWork {

	/**
	 * @param args
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 */
	public static void main(final String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		Map<Integer, Integer> mapPrim = new HashMap<Integer, Integer>();
		int maxConstraint = (int) Math.pow(10, 7);
		for (int i = 2; i <= maxConstraint; i++) {
			mapPrim.put(i, primarity(i));
		}
		String inputFileName = "/home/dattran/Downloads/homework.txt";
		String outputFileName = "/home/dattran/Downloads/output.txt";
		Scanner in = new Scanner(new FileReader(inputFileName));
		PrintWriter writer = new PrintWriter(outputFileName, "UTF-8");
		int totalTestCase = Integer.valueOf(in.nextLine());
		for (int i = 1; i <= totalTestCase; i++) {
			int arr[] = stringToArray(in.nextLine());
			int countNr = 0;
			for (int j = arr[0]; j <= arr[1]; j++) {
				if (mapPrim.get(j) == arr[2]) {
					countNr++;
				}
			}
			writer.println("Case #" + i + ": " + countNr);
		}
		writer.close();
		in.close();
	}

	private static int primarity(int n) {
		int lastfactor;
		int countPrim = 0;
		if ((n % 2) == 0) {
			countPrim++;
			lastfactor = 2;
			n = n / 2;
			while ((n % 2) == 0) {
				n = n / 2;
			}
		} else {
			lastfactor = 1;
		}
		int factor = 3;
		int maxFactor = (int) Math.sqrt(n);
		while ((n > 1) && (factor <= maxFactor)) {
			if ((n % factor) == 0) {
				n = n / factor;
				if (lastfactor != factor) {
					countPrim++;
				}
				lastfactor = factor;
			}
			while ((n % factor) == 0) {
				n = n / factor;
			}
			maxFactor = (int) Math.sqrt(n);
			factor = factor + 2;
		}
		if (n == 1) {
			return countPrim;
		} else {
			countPrim++;
			return countPrim;
		}
	}

	private static int[] stringToArray(final String line) {
		String[] number = line.split(" ");
		int[] arr = new int[number.length];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = Integer.valueOf(number[i]);
		}
		return arr;
	}

}

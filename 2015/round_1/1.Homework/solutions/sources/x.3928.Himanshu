#include<cstdio>
#include<bitset>
#include<iostream>
#include<cstring>
#include<cmath>
#include<vector>
using namespace std;

typedef long long ll;

int num[10000002],sp[10000002];
vector<int> prime;
long int primacity[10000002];

inline long int Scan_f()
{
    register long int noRead=0;
    //register char p=getchar_unlocked();
    register char p=getc(stdin);
    //for(;p<48 || p>57;p=getchar_unlocked());
    for(;p<48 || p>57;p=getc(stdin));
    //while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getchar_unlocked();}
    while(p>47 && p<58){ noRead = (noRead << 3) + (noRead << 1) + (p - '0');p=getc(stdin);}
    return noRead;
};

inline void sieve()
{
    ll i,j;
    for(i=0;i<10000002;i++)
        num[i] = 1;
    num[0] = num[1] = 0;
    for(i=2;i<10000001;i++)
    {
        if(num[i])
        {
            prime.push_back(i);
            for(j=i*i;j<10000001;j+=i)
                num[j] = 0;
        }
    }
}

inline void init()
{
    ll i,j;
    for(i=2;i<10000002;i+=2)
        sp[i] = 2;
    for(i=3;i<10000001;i+=2)
    {
        if(num[i])
        {
            sp[i] = i;
            for(j=i;j*i<10000002;j+=2)
                sp[j*i] = i;
        }
    }
}

inline void solve()
{
    long int i,ans,tp,minp,cp;
    for(i=2;i<=10000000;i++)
    {
        tp = i;
        ans = 0;
        cp = 0;
        while(tp!=1)
        {
            minp = sp[tp];
            if(minp != cp)
            {
                ans++;
                cp = minp;
            }
            tp = tp/minp;
        }
        primacity[i] = ans;
    }
}
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    long int a,b,k,T,i,sol,tctr=1;
    sieve();
    init();
    solve();
    T = Scan_f();
    while(T > 0)
    {
        a = Scan_f();
        b = Scan_f();
        k = Scan_f();
        sol = 0;
        for(i=a;i<=b;i++)
        {
            if(primacity[i] == k)
                sol++;
        }
        printf("Case #%d: %ld\n",tctr,sol);
        tctr++;
        T--;
    }
    return 0;
}

#include <iomanip>
#include <algorithm>
#include <iterator>     // std::insert_iterator
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <fstream>

using namespace std;


#define SIEVE_MAX 10000009    //max number
#define ISPRIME(n) (n==2 || (n%2==1 && n!=1 && !(__sito[(n)>>4] & (1<<(((n)>>1)&7))))) /* only works for odd values */
unsigned char __sito[(SIEVE_MAX >> 4) + 47];
vector<int> primes;

void GetPrimes(){
	memset(__sito, 0, sizeof(__sito));
	int __odm = int(3 + sqrt(double(SIEVE_MAX)));
	for (int i = 3; i <= __odm; i += 2) if (ISPRIME(i)){
		int j = i*i;
		while (j<SIEVE_MAX){
			__sito[j >> 4] |= (1 << ((j >> 1) & 7));
			j += i << 1;
		}
	}
	primes.push_back(2); for (int i = 3; i<SIEVE_MAX; i += 2) if (ISPRIME(i)) primes.push_back(i);
}

#define MAXN 10000009
int prime_divisors[MAXN];
void PreCompute(){
	for (int i = 0; i < MAXN; i++) prime_divisors[i] = 0;
	
	for (int i = 0; i < primes.size(); i++){
		for (int j = primes[i]; j < MAXN; j += primes[i])
			prime_divisors[j]++;
	}
}

int f(int A, int B, int K){
	int ret = 0;
	for (int i = A; i <= B; i++)
		if (prime_divisors[i] == K) ret++;
	return ret;
}

int main(){
	ios_base::sync_with_stdio(false);
	ifstream in("A.txt");
	ofstream out("result.txt");
	int T;
	GetPrimes();
	PreCompute();
	in >> T;
	for (int test = 1; test <= T; test++){
		cout << "Case #" << test << ": ";
		out << "Case #" << test << ": ";
		int A, B, K;
		in >> A >> B >> K;
		int res = f(A, B, K);
		cout << res << endl;
		out << res << endl;
	}
	return 0;
}

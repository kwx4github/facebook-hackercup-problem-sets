#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int N = 10000001;
bool prime[10000001];
int soln[10000001] = {0};
int t = 0, A = 0, B = 0, K = 0;

void sieve() {
	memset(prime, -1, N * sizeof(prime[0]));
	prime[0] = prime[1] = false;
	int sqrtN = (int) sqrt((double) N);
	for (int i = 2; i <= sqrtN; i++) {
		if (prime[i]) {
			for (int j = i * i; j < N; j += i) {
				prime[j] = false;
			}
		}
	}
}
void preCalc() {
	int primacy = 0;
	for (int num = 2; num <= 10000000; num++) {
		primacy = 0;
		int d = 1;
		for (d = 1; d * d < num; d++) {

			if (num % d == 0) {
				if (prime[d]) {
					primacy++;
				}
				if (prime[num / d]) {
					primacy++;
				}

			}
		}
		if (prime[d] && d * d == num) {
			primacy++;
		}

		//cout << primacy << endl;
		soln[num] = primacy;
	}
}
int main() {

	freopen("test.in", "rt", stdin);
	freopen("test.out", "w", stdout);
	sieve();
	preCalc();
	cin >> t;
	int ret = 0;
	for (int Case = 1; Case <= t; Case++) {
		cin >> A >> B >> K;
		ret = 0;
		for (int i = A; i <= B; i++) {
			if (soln[i] == K)
				ret++;
		}
		cout << "Case #" << Case << ": " << ret << endl;
	}

	return 0;
}
//By : mohamed waleed

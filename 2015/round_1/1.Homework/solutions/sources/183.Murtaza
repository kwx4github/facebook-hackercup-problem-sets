#include <cstdio>
#include <iostream>
#include <vector>
#include <bitset>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

const char InFile[]="pb1.in";
const char OutFile[]="pb1.out";
const int MaxN=10111000;
const int TYPE_START=1337;
const int TYPE_END=6969;
const int MaxT=105;

int T,A,B,K;
int cnt[MaxN];
set<int> posible_K;
map<int, int> K_cnt;

inline void ciur()
{
    for(int i=2;i<MaxN;++i)
    {
        if(cnt[i]==0)
        {
            for(int j=i;j<MaxN;j+=i)
            {
                ++cnt[j];
            }
        }
    }
}

struct query_event
{
    query_event(int time=0, int type=0, int K=0, int ind=0):time(time),type(type),K(K),ind(ind){}
    int time,type,K,ind;
};

struct query_event_CMP
{
    inline bool operator() (const query_event &A, const query_event &B)
    {
        return A.time<B.time;
    }
};

vector<query_event> e;
int sol[MaxT];

int main()
{
    freopen(InFile,"r",stdin);
    freopen(OutFile,"w",stdout);

    ciur();

    scanf("%d",&T);
    for(int index=1;index<=T;++index)
    {
        scanf("%d %d %d",&A,&B,&K);
        e.push_back(query_event(A-1, TYPE_START, K, index));
        e.push_back(query_event(B, TYPE_END, K, index));
        posible_K.insert(K);
    }

    int curr_e=0;
    sort(e.begin(),e.end(),query_event_CMP());

    for(int i=0;i<MaxN;++i)
    {
        if(posible_K.find(cnt[i])!=posible_K.end())
        {
            ++K_cnt[cnt[i]];
        }

        while(curr_e<e.size() && e[curr_e].time==i)
        {
            if(e[curr_e].type==TYPE_START)
            {
                sol[e[curr_e].ind]-=K_cnt[e[curr_e].K];
            }
            else
            {
                sol[e[curr_e].ind]+=K_cnt[e[curr_e].K];
            }
            ++curr_e;
        }
    }

    for(int i=1;i<=T;++i)
    {
        printf("Case %d: %d\n",i,sol[i]);
    }

    return 0;
}


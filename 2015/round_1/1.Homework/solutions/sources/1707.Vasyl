//solution by Wsl_F
#include <bits/stdc++.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <bitset>
#include <numeric>
#include <cassert>
#include <time.h>
#include <ctime>
#include <memory.h>
#include <stdint.h>
#include <complex>
#include <utility>
#include <climits>
#include <cctype>
#include <x86intrin.h>



using namespace std;
#pragma comment(linker, "/STACK:1024000000,1024000000")


typedef long long LL;
typedef unsigned long long uLL;
typedef double dbl;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<LL> vll;
typedef pair<int,int> pii;
typedef pair<LL,LL> pll;

#define mp(x,y)  make_pair((x),(y))
#define pb(x)  push_back(x)
#define sqr(x) ((x)*(x))

const int MaxValue= 1000*1000*10;

int divisorsNumber[MaxValue+10];
int divisor[MaxValue+10];

//int kp;

void generatePrime(int n)
{
    for (int i=0; i<=MaxValue; i++)
        divisor[i]= i;

    for (LL i=2; i<=n; ++i)
        if (divisor[i]==i && i * i <= n)
        {
            for (int j=i*i; j<=n; j+=i)
                divisor[j]= i;
        }
}

int divide(int n)
{
    int ans= 0;
    int dv;
    while (n>1)
    {
       dv= divisor[n]; ans++;
       while (n%dv==0) n/= dv;
    }
    return ans;
}

int answer[MaxValue+10][10];

void init()
{
 generatePrime(MaxValue+5);
 divisorsNumber[1]= 0; divisorsNumber[2]= 1;
 //int MaxDivisors= 1; int maxNumber= 2;
 for (int i= 3; i<=MaxValue; i++)
 {
    divisorsNumber[i]= divide(i);
//    if (divisorsNumber[i]>MaxDivisors) {MaxDivisors= divisorsNumber[i]; maxNumber= i;}
 }

 //cout<<MaxDivisors<<": "<<maxNumber<<endl; //Maxdivisors= 8

 for (int j=0; j<10; j++)
 {
    answer[1][j]= 0;
    answer[2][j]= 0;
 }
 answer[2][1]= 1;

 for (int i= 3; i<=MaxValue; i++)
 {
     for (int j=0; j<10; j++)
        answer[i][j]= answer[i-1][j];
     answer[i][divisorsNumber[i]]++;
 }
}

void solve()
{
 int a,b,k;
 cin>>a>>b>>k;
 if (k>8) { cout<<0<<endl; return; }
 cout<<answer[b][k]-answer[a-1][k]<<endl;
}

int main()
{
 ios_base::sync_with_stdio(0);
 cin.tie(0);
 // LL a[110];
 // memset(a,0,sizeof(a));

 freopen("input.txt","r",stdin);
 freopen("output.txt","w",stdout);
 //cout<<fixed;
 //cout<<setprecision(9);

 srand(__rdtsc());

 init();
 int T;
 cin>>T;
 for (int testCase=1; testCase<=T; testCase++)
 {
     cout<<"Case #"<<testCase<<": ";
     solve();
 }

 return 0;
}



#include <bits/stdc++.h>
using namespace std;

const int sieveSize = 20000000, N = 20000000, M = 10000010;
int lp[sieveSize+1];
vector<int> primes;
vector<int> numbers[10];
int primacity[N];

int process(int num)
{
	int least = lp[num];
	while(num % least == 0)	{
		num /= least;
	}
	return num;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	freopen("ain.txt", "r", stdin);
	freopen("aout.txt", "w", stdout);


	for (int i=2; i<=sieveSize; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			primes.push_back (i);
		}
		for (int j=0; j<(int)primes.size() && primes[j]<=lp[i] && i*primes[j]<=sieveSize; ++j)
			lp[i * primes[j]] = primes[j];
	}
	primacity[0] = 0;
	primacity[1] = 0;
	for(int i=2; i<=M; i++)	{
		primacity[i] = 1 + primacity[process(i)];
		numbers[primacity[i]].push_back(i);
	}
	int t; cin >> t;
	for(int i=1; i<=t; i++)	{
		cout << "Case #" << i << ": ";
		int a, b, k; cin >> a >> b >> k;
		if(k > 8)	{
			cout << 0 << "\n";
			continue;
		}
		int ans = (lower_bound(numbers[k].begin(), numbers[k].end(), b+1) - lower_bound(numbers[k].begin(), numbers[k].end(), a));
		cout << ans << "\n";
	}
}

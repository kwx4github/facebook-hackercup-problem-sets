import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by hussein on 17/01/15.
 */
public class Homework {

    public static void main(String[] args)
    {
        if(args.length < 1)
            return;
        try {
            List<String> lines = Files.readAllLines(Paths.get(args[0]), Charset.defaultCharset());
            PrintWriter writer = new PrintWriter("output.txt");

            cache();

            for(int i =1; i<lines.size(); i++)
            {
                String[] values = lines.get(i).split(" ");

                int a = Integer.parseInt(values[0]);
                int b = Integer.parseInt(values[1]);
                int k = Integer.parseInt(values[2]);

                writer.append("Case #" + i + ": " +solve(a, b, k));

                if(i < lines.size())
                	writer.append("\n");
            }

            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static int[] divisors = new int[9999999];
    public static void cache() {
        for(int i=2; i<10000000; i++)
            divisors[i-2] = primeFactors(i);

    }

    public static int primeFactors(int numbers) {
        int n = numbers;
        Map<Integer, Integer> factors = new HashMap<Integer, Integer>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                factors.put(i, 1);
                n /= i;
            }
        }
        if (n > 1) {
            factors.put(n, 1);
        }
        return factors.size();
    }

    public static int solve(int a, int b, int k)
    {
        int n = 0;
        for(int i = (k < a)? a : k; i <= b; i++)
        {
            if(divisors[i-2] == k)
                n++;
        }

        return n;
    }

}

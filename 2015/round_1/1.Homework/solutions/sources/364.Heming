#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

const int MAXN = 10000000;

int f[MAXN+10];
int max_prime;
vector<vector<int> > num;

void init() {
	memset(f, 0, sizeof(f));
	max_prime = 0;
	for (int i = 2; i <= MAXN; i ++) {
		max_prime = max( max_prime, f[i] ) ;
		if (f[i] != 0) continue;
		f[i] = 1;
		for (int j = i + i; j <= MAXN; j += i) {
			f[j] ++;
		}
	}
	num.resize(max_prime + 1);
	for (int i = 2; i <= MAXN; i ++) {
		int bucket = f[i];
		num[bucket].push_back(i);
	}
}

int solve(int x, int k) {
	int L = 0, R = num[k].size() - 1;
	int best = -1;
	while (L <= R) {
		int M = (L + R) / 2;
		if (num[k][M] <= x) {
			best = M;
			L = M + 1;
		} else {
			R = M - 1;
		}
	}
	return best + 1;
}

int main() {
	freopen("Asub.in", "r", stdin);
	freopen("Asub.out", "w", stdout);
	init();
	int T;
	scanf("%d", &T);
	for (int ti = 1; ti <= T; ti ++) {
		int A, B, K;
		scanf("%d%d%d", &A, &B, &K);
		int ans;
		if (K > max_prime) {
			ans = 0;
		} else {
			ans = solve(B, K) - solve(A-1, K);
		}
		printf("Case #%d: %d\n", ti, ans);
	}	
	return 0;
}
 

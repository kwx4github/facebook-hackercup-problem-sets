package com.company;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
    public static final int MAX = 20000000;
    static BufferedReader in;
    static PrintWriter out = new PrintWriter(System.out, true);
    static StringTokenizer st;


    public static void main(String[] args) throws Exception {
        in = new BufferedReader(new InputStreamReader(new FileInputStream("in.txt")));
        out = new PrintWriter("out.txt");
        int t = nextInt();
        int[] e = new int[MAX];
        for (int i = 2; i < e.length; i++) {
            if(e[i] != 0) {
                continue;
            }
            for(int j = i; j < e.length; j += i) {
                e[j] += 1;
            }
        }
        for (int i = 0; i < t; i++) {
            out.print("Case #" + (i + 1) + ": ");
            int a = nextInt();
            int b = nextInt();
            int k = nextInt();
            int res = 0;
            for(int j = a; j <= b; j++) {
                if (e[j] == k) {
                    res++;
                }
            }
            out.println(res);
            out.flush();
        }
        in.close();
        out.flush();
        out.close();
    }

    public static int nextInt() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Integer.parseInt(st.nextToken());
    }

    public static long nextLong() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine());
        return Long.parseLong(st.nextToken());
    }

    public static double nextDouble() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return Double.parseDouble(st.nextToken());
    }

    public static String nextToken() throws Exception {
        if (st == null || !st.hasMoreTokens()) st = new StringTokenizer(in.readLine(), " ");
        return st.nextToken();
    }
}

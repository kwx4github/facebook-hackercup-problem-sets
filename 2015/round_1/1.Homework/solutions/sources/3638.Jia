#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;
void genPrimes(const int N, vector<int> &primes)
{
    vector<bool> a(N + 1, true);
    for(ll p = 2; p*p <= (ll)N; p++){
        if(a[p]){
            for(int q = p*p; q <= N; q += p){
                a[q] = false;
            }
        }
    }
    primes.clear();
    //ignore 0, 1
    for(int i = 2; i <= N; i++){
        if(a[i]){
            primes.push_back(i);
        }
    }
}
void genPrimacities(const int N, vector<vector<int> > &primacities, 
        const vector<int> &primes)
{
    for(int x = 2; x <= N; x++){
        int primacity = 0; 
        int t = x;
        for(int i = 0; i < primes.size(); i ++){
            if((ll)primes[i]*primes[i] > t){
                break;
            }
            if(t % primes[i] == 0){
                primacity += 1;
                t /= primes[i];
                while(t % primes[i] == 0){
                    t /= primes[i];
                }
            }
        }
        if(t > 1){
            primacity += 1;
        }
        while(primacities.size() < primacity + 1){
            primacities.push_back(vector<int>());
        }
        primacities[primacity].push_back(x);
    }
}
int solve(int A, int B, int K, vector<vector<int> > &primacities)
{
    int n = primacities.size();
    if(K >= n){
        return 0;
    }
    if(primacities[K].size() == 0){
        return 0;
    }
    int indexA = -1, indexB = -1;
    //search the first number >= A
    int l = 0, r = primacities[K].size() - 1;
    while(l <= r){
        int m = (l + r)/2;
        if(primacities[K][m] < A){
            l = m + 1;
        }else if(primacities[K][m] == A){
            indexA = m; //at most one A
            break;
        }else{
            indexA = m;
            r = m - 1; //find smaller
        }
    }
    if(indexA == -1){
        return 0; //too large
    }
    //search the last number <= B
    l = indexA;
    r = primacities[K].size() - 1;
    while(l <= r){
        int m = (l + r)/2;
        if(primacities[K][m] < B){
            indexB = m;
            l = m + 1; //find larger
        }else if(primacities[K][m] == B){
            indexB = m;
            break;
        }else{
            r = m - 1;
        }
    }
    if(indexB == -1){
        return 0;//too small
    }

    return indexB - indexA + 1;
}
int main(int argc, char **argv)
{
    vector<int> primes;
    const int N = 10000000;
    genPrimes(N, primes);
    vector<vector<int> > primacities;
    genPrimacities(N, primacities, primes);
    
    int T;
    cin >> T;
    for(int ca = 1; ca <= T; ca ++){
        int A, B, K;
        cin >> A >> B >> K;
        cout << "Case #" << ca << ": " << solve(A, B, K, primacities) << endl;
    }
    return 0;
}

#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <cassert>
#include <numeric>
#include <sstream>
#include <limits>
using namespace std;

#define REQUIRE(cond, message) \
    do { \
        if (!(cond)) { \
            std::cerr << message << std::endl; \
            assert(false); \
        } \
    } while (false)

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i <= int(n); ++i)
#define forv(i, v) forn(i, (v).size())
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef long double ld;

template<typename T>
inline int popcount(T t) {
    if (std::numeric_limits<T>::digits <=
                            std::numeric_limits<unsigned int>::digits) {
        return __builtin_popcount(t);
    } else {
        return __builtin_popcountll(t);
    }
}

const ld EPS = 1e-8;
const ld PI = acosl(0.0) * 2;
const int NMAX = 10000040;
int primacity[NMAX];
int minPrimeDivisor[NMAX];

bool isPrime(int n)
{
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

void checkPrecalc()
{
    for (int i = 2; i < 10000; ++i) {
        int c = 0;
        for (int j = 2; j <= i; ++j) {
            if (isPrime(j) && i % j == 0) ++c;
        }
        if (c != primacity[i]) {
            cerr << i << " " << c << " " << primacity[i] << endl;
            cerr << minPrimeDivisor[i] << endl;
            cerr << minPrimeDivisor[3] << endl;
            assert(false);
        }
    }
}

void precalc()
{
    for (int p = 2; p < NMAX; ++p) {
        if (minPrimeDivisor[p]) continue;
        for (int i = p + p; i < NMAX; i += p) {
            if (!minPrimeDivisor[i]) {
                minPrimeDivisor[i] = p;
            }
        }
    }
    for (int n = 2; n < NMAX; ++n) {
        if (!minPrimeDivisor[n]) {
            primacity[n] = 1;
            continue;
        }
        int count = 0;
        int p = -1;
        int k = n;
        while (minPrimeDivisor[k]) {
            if (minPrimeDivisor[k] != p) {
                ++count;
            }
            p = minPrimeDivisor[k];
            k /= p;
        }   
        if (p != k) {
            ++count;
        }
        primacity[n] = count;
    }
    checkPrecalc();
}

int solveTest(int a, int b, int k)
{
    int res = 0;
    for (int i = a; i <= b; ++i) {
        if (primacity[i] == k) ++res;
    }
    return res;
}

void solve()
{
    precalc();
    int tc;
    cin >> tc;
    forn(it, tc) {
        int a, b, k;
        cin >> a >> b >> k;
        cerr << "Test " << it + 1 << endl;
        cout << "Case #" << it + 1 << ": " << solveTest(a, b, k) << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

// Useful constants
#define INF                         numeric_limits<int>::max()
#define EPS                         1e-9

// Useful hardware instructions
#define bitcount                    __builtin_popcount
#define gcd                         __gcd
bool isComposite[10000005] = {false};
void runEratosthenesSieve(int upperBound) {
	int upperBoundSquareRoot = (int)sqrt((double)upperBound);

	for (int m = 2; m <= upperBoundSquareRoot; m++) {
		if (!isComposite[m]) {

			for (int k = m * m; k <= upperBound; k += m)
				isComposite[k] = true;
		}
	}
}
int memoize[10000005];
int main(){
	int t;
	int c = 1;
	scanf("%d",&t);
	memset(memoize,-1,sizeof memoize);
	runEratosthenesSieve(10000004);
//	printf("Done.\n");
	while(t--){
		int a,b,k;
		scanf("%d %d %d",&a,&b,&k);
		int answer = 0;
		for(int num=a;num<=b;num++){
			int index = 2;
			int count = 0;
			if(memoize[num]==-1){
				if(!isComposite[num])
					count++;
				else{
					while(index<ceil(sqrt(num))){
						if(!isComposite[index] && num%index==0){
							count++;
						}
						if(num%index==0 && !isComposite[num/index]){
							count++;
						}
						index++;
					}
					if(sqrt(num)-(int)sqrt(num)==0 && !isComposite[(int)sqrt(num)]){
						count++;
					}
				}
				memoize[num] = count;
			}
			else{
			 	count = memoize[num];
			}
			if(count==k)
				answer++;
		}
		printf("Case #%d: %d\n",c++,answer);
	}
	return 0;
}

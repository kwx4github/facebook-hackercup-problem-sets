#include <iostream>
#include <sstream>
#include <numeric>
#include <set>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <math.h>
#include <stdlib.h>
#include <limits.h>
#include <strings.h>
#include <string.h>

using namespace std;

const int MAX_B = 1e7 + 100;

//Sieve of Erasthotenes
void fillTable(bool *primes, int lastNumber, vector<int> &primesList){
	memset(primes, 1, (lastNumber+1) * sizeof(bool));
	primes[0] = primes[1] = false;
	for (int i = 2; i <= lastNumber; i++){
		if (primes[i]){
			primesList.push_back(i);
			int value = i + i;
			while(value <= lastNumber){
				primes[value] = false;
				value += i;
			}
		}
	}
}

void fillPrimacity(long *primacity, int lastNumber, vector<int> &primesList){
	for (int i = 0; i <= lastNumber; i++){
		primacity[i] = 0;
	}
	for (int i = 0; i < primesList.size(); i++){
		int n = primesList[i];
		while(n <= lastNumber){
			primacity[n]++;
			n += primesList[i];
		}
	}
}

int main(){
	bool *isPrime = new bool[MAX_B+1];
	vector<int> primeList;
	fillTable(isPrime, MAX_B, primeList);
	long *primacity = new long[MAX_B+1];
	fillPrimacity(primacity, MAX_B, primeList);
	long maxValidK = 0;
	for (int i = 2; i <= MAX_B; i++){
		maxValidK = max(maxValidK, primacity[i]);
	}
	vector<int> KToValues[maxValidK+1];
	for (int i = 2; i <= MAX_B; i++){
		KToValues[primacity[i]].push_back(i);
	}
	int tests;
	cin >> tests;
	for (int t = 1; t <= tests; t++){
		long A, B, K;
		cin >> A >> B >> K;
		int count = 0;
		if (K <= maxValidK){
			count = upper_bound(KToValues[K].begin(), KToValues[K].end(), B) - lower_bound(KToValues[K].begin(), KToValues[K].end(), A);
		}
		cout << "Case #" << t << ": " << count << endl;
	}
}

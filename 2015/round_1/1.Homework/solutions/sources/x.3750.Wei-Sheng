#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>

using namespace std;

vector< vector<int> > kmap;

bool mark[46340];
int prime[4793];

void filterTable ()
{
    int sq = (int)sqrt(46340);
    mark[1] = false; //not prime
    for (int i=2; i<=sq; i++)
    {
        if (!mark[i])
        {
            for (int j=i*i; j<=46340; j+=i)
            {
                mark[j] = true; //prime
            }
        }
    }
}

void primeTable ()
{
    int n=0;
    for (int i=2; i<=46340; i++)
    {
        if (!mark[i])
        {
            prime[n] = i;
            n++;
        }
    }
    prime[n] = 0x7fffffff;
}

int binarysearch (int n)
{
    int low = 0;
    int high = 4792;

    while (low <= high)
    {
        int mid = (high + low) /2;
        if (prime[mid] <= n && prime[mid+1] >= n)
            return mid+1;
        else if (prime[mid] > n)
            high = mid;
        else if (prime[mid] < n)
            low = mid+1;
    }
    return -1;
}

int verify (int n)
{
    int cnt = 0;
    int pos = binarysearch (n);
    for (int i=0; i<=pos; i++)   
    {   
        if (n%prime[i]==0)
        {
            cnt++;
        }
    }
    return cnt;
}

int exactsearch (int n, int exact)
{
/*
    int low = 0;
    int high = kmap[exact].size()-1;
    while (low <= high)
    {
        int mid = (high + low) /2;
        if (kmap[exact].at(low) > n)
            return low; 
        else if (kmap[exact].at(high) <=n)
            return high;
        else if (kmap[exact].at(mid) == n)
	    return mid;
        else if (kmap[exact].at(mid) < n && kmap[exact].at(mid+1) > n)
            return mid+1;
        else if (kmap[exact].at(mid) > n)
            high = mid;
        else if (kmap[exact].at(mid) < n)
            low = mid+1;
    }
*/
    for (int i=0; i<kmap[exact].size()-1; i++)
    {
        if (kmap[exact].at(i) == n)
    	    return i;
	else if (kmap[exact].at(i) < n && kmap[exact].at(i+1) > n)
	{
	    return i+1;
	}
    }
    return -1;
}

int main()
{
    filterTable();
    primeTable();
    kmap.resize(10);
    for (int i=2; i<10000000; i++)
    {
        kmap[verify(i)].push_back(i);
    }
 
    int input_n;
    int round =1;
    cin >> input_n;
    for (int i=0; i<input_n; i++)
    {
        int num1, num2, exact;
        int ans = 0;
        cin >> num1 >> num2 >> exact;
	ans = exactsearch (num2, exact) - exactsearch (num1, exact);
        cout << "Case #" << round << ": " << ans << endl;
        round++;
    }
}

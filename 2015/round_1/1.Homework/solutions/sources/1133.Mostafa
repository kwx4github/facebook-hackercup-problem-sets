import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Solution {

	boolean isPrime[];
	int count[];
	int start;
	int end;
	int k;
	ArrayList<Integer> primes = new ArrayList<>();

	public Solution(int start, int end, int k) {
		this.start = start;
		this.end = end;
		this.k = k;
		isPrime = new boolean[end + 1];
		count = new int[end + 1];
		for (int i = 0; i < isPrime.length; i++) {
			isPrime[i] = true;
		}
		isPrime[0] = isPrime[1] = false;
	}

	public static void main(String[] args) throws IOException {
		FileInputStream fis = new FileInputStream("homework.txt");
		DataInputStream in = new DataInputStream(fis);
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		FileWriter fw = new FileWriter(new File("output.txt"));
		String line = br.readLine();
		int T = Integer.parseInt(line);
		for (int i = 0; i < T; i++) {
			line = br.readLine();
			String arr[] = line.split(" ");
			int A = Integer.parseInt(arr[0]);
			int B = Integer.parseInt(arr[1]);
			int K = Integer.parseInt(arr[2]);

			fw.write("Case #" + (i + 1) + ": " + new Solution(A, B, K).solve());
			if (i + 1 < T)
				fw.write("\n");
		}
		fw.flush();
	}

	int solve() // Backward thinking
	{
		for (int i = 2; i <= end; ++i) {
			if (isPrime[i]) {
				count[i]++;
				for (int j = i * 2; j <= end; j += i) {
					isPrime[j] = false;
					count[j]++;
				}
			}
		}
		int total = 0;
		for (int i = start; i <= end; i++) {
			if (count[i] == k)
				total++;
		}
		return total;
	}
}

#include <iostream>
#include <cassert>
#include <vector>
#include <cstdio>
#include <cstring>
using namespace std;

const int N = 10001111;
const int M = 10;
int pdiv[N];
vector<int> vec[M];

void prepare() {
    memset(pdiv, 0, sizeof(pdiv));
    for (int i = 2; i < N; i++) {
        if (!pdiv[i]) {
            pdiv[i] = i;
            for (long long j = 1LL * i * i; j < N; j += i) {
                pdiv[j] = i;
            }
        }
    }
    for (int i = 2; i < N; i++) {
        int x = i, num = 0;
        while (x > 1) {
            num++;
            int y = pdiv[x];
            while (x % y == 0) x /= y;
        }
        assert(num > 0 && num <= 8);
        vec[num].push_back(i);
    }
}

int query(int A, int B, int K) {
    if (K > 8) return 0;
    if (vec[K].size() == 0) return 0;
    if (A > vec[K].back() || B < vec[K][0]) return 0;
    int L = vec[K].size(), R = vec[K].size();
    int l = 0, r = vec[K].size() - 1;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (vec[K][mid] >= A) {
            L = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    l = 0, r = vec[K].size() - 1;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (vec[K][mid] > B) {
            R = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    assert(L <= R);
    return R - L;
}

int main() {
    prepare();
    int T, Case = 1;
    cin >> T;
    while (T--) {
        int A, B, K;
        cin >> A >> B >> K;
        cout << "Case #" << Case++ << " :" << query(A, B, K) << endl;
    }
    return 0;
}

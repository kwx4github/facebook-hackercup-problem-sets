import java.io.File;
import java.io.PrintWriter;
import java.util.*;
import java.util.concurrent.TransferQueue;

/**
 * Created by jonthoms on 1/17/15.
 */
public class Solution1 {
    static String inputFile = "input1.txt";
    static String outputFile = "output1.txt";

    public static void main(String[] args) {
        process();
    }

    private static void process(){
        fillPrimes();

        File file = new File(inputFile);
        Scanner scanner = null;
        try {
            scanner = new Scanner(file);
        } catch (Exception e){
            trace(e);
        }
        String line = scanner.nextLine();
        int nProblems = Integer.parseInt(line);
        trace("Number of cases: " + nProblems);

        StringBuilder result = new StringBuilder();

        for(int n = 0; n < nProblems; ++n){
            line = scanner.nextLine();
            int[] lineValues = parseLineInts(line);
            int a = lineValues[0];
            int b = lineValues[1];
            int k = lineValues[2];

            int count = 0;
            for(int i = a; i <= b; ++i){
                if(primacities[i] == k) ++count;
            }

            int problemNumber = n + 1;
            result.append("Case #" + problemNumber + ": " + count + "\n");
        }

        String output = result.toString();
        trace(output);

        saveStringFile(outputFile, output);

        trace("finished");
    }

    private static int[] primes;
    private static HashSet<Integer> primeHash;
    private static int[] primacities;

    private static void fillPrimes(){
        ArrayList<Integer> result = new ArrayList<Integer>();
        int max = (int)Math.pow(10, 7) + 1;
        result.add(2);
        for(int i = 3; i <= max; i += 2){
            boolean isPrime = true;
            int sqrt = (int)Math.sqrt(i);
            for(int prime:result){
                if(i % prime == 0) {
                    isPrime = false;
                    break;
                }
                if(prime > sqrt) break;
            }
            if(isPrime) result.add(i);
        }
        primes = new int[result.size()];
        primeHash = new HashSet<Integer>();
        for(int i = 0; i < primes.length; ++i){
            int prime = result.get(i);
            primes[i] = prime;
            primeHash.add(prime);
        }
        primacities = new int[max+1];
        for(int i = 2; i <= max; ++i){
            primacities[i] = getPrimacity(i);
        }
    }

    private static int getPrimacity(int n){
        // count all the unique primes
        if(primeHash.contains(n)) return 1;
        int count = 0;
        for(int prime:primes){
            if(n % prime == 0) {
                ++count;
                n = n / prime;
                while(n % prime == 0) {
                    n = n / prime;
                }
                if(primeHash.contains(n)){
                    ++count;
                    break;
                }
            }
            if(n == 1) break;
        }
        return count;
    }

    private static int[] parseLineInts(String line){
        if(line.length() == 0) return new int[0];
        String[] parts = line.split(" ");
        int n = parts.length;
        int[] result = new int[n];
        for(int i = 0; i < n; ++i){
            result[i] = Integer.parseInt(parts[i]);
        }
        return result;
    }

    private static void trace(Object... arguments) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < arguments.length; ++i) {
            if (i != 0) builder.append(", ");
            builder.append(arguments[i]);
        }
        builder.append("\n\n");
        System.out.print(builder.toString());
    }

    private static void saveStringFile(String fileName, String output){
        try {
            PrintWriter out = new PrintWriter(fileName);
            out.print(output);
            out.close();
        } catch (Exception e){
            trace(e);
        }
    }
}


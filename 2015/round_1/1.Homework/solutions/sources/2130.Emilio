import Math.NumberTheory.Primes.Factorisation

import Data.List.Split

count k f list = foldr (\n ac -> if f n == k then ac + 1 else ac) 0 list

fs7 = factorSieve 100000000

factorsqty n = length $ sieveFactor fs7 n

howManyKInRange k a b = count k factorsqty [a..b]

solveProblem i = do x <- getLine
		    nums <- return $ map (read :: String -> Integer) $ splitOn " " x
		    r <- return $ howManyKInRange (fromIntegral $ nums !! 2) (nums !! 0) (nums !! 1)
		    putStrLn $ "Case #"++show i++": "++show r

runTimes n f = runTimes' [1..n] f
	where
		runTimes' [] _ = return ()
		runTimes' (n:xs) f = f n >> runTimes' xs f

main = do x <- getLine
	  num <- readIO x :: IO Int
	  runTimes num $ solveProblem

#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() { start = clock(); }
  ~TimeTracker() { end = clock(); fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC); }
};

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define mt make_tuple
#define loop(i, begin, end) for(__typeof(end) i=(begin)-((begin)>(end)); i!=(end)-((begin)>(end)); i+=1-2*((begin)>(end)))
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define db(args...) { vector<string> _v = split(#args, ','); debug_fn(_v.begin(), args); }
#define dbp(p) cerr << #p << " = " << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " \n"[__I==(N-1)];
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " \n"[__J==(M-1)]; }
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl;
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl;

vector<string> split(const string& s, char c) 
{
  vector<string> v; stringstream ss(s); string x;
  while (getline(ss, x, c)) v.push_back(x);
  return v;
}

void debug_fn(vector<string>::iterator it) {}
template<typename T, typename... Args>
void debug_fn(vector<string>::iterator it, T a, Args... args) 
{
  cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
  debug_fn(++it, args...);
}

# define getcx getchar_unlocked

void inp() {}
template <typename T, typename... Args>
void inp(T& n, Args&... args)//fast input function
{
  int ch=getcx(), sign=1; n=0;
  while( ch < '0' || ch > '9' ) { if(ch=='-')sign=-1; ch=getcx(); }
  while( ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign; inp(args...);
}

void oup() {}
template <typename T, typename... Args>
void oup(T x, Args... args)
{ 
  if(x<0){ putchar('-'); x=-x; } int len=0,data[25];
  while(x) { data[len++]=x%10; x/=10; } if(!len) data[len++]=0;
  while(len--) putchar(data[len]+48); putchar('\n'); oup(args...);
}

#define MOD 1000000007

// lli modpow(lli a, lli x)
// {
//   lli ans = 0;
//   lli ap = a;
//   for(int i = 0; (1<<i) <= x; i++)
//   {
//     if(x & (1<<i)) ans += ap;
//     ap *= a;
//   }
//   return ans;
// }

lli modpow(lli a,lli b){
  if(b==1)
    return a%MOD;
  if(b==0)
    return 1%MOD;
  if(b%2==0)
    return modpow((a*a)%b,b/2);
  return (a*modpow((a*a)%b,b/2))%MOD;
}

#define MAXN 10000100

// Sieve of Eratosthenes: generates a list of primes 'x' where x<=n
// RUNTIME : O ( N log N log log N )
vector<lli> gen_primacity(lli n) 
{ 
  lli i,j;
  vector<lli> primes(n+1);
  vector<lli> primacity(n+1);
  for(i=0;i<=n;i++) { primes[i] = 1;  primacity[i] = 0; }
  for(i=2;i<=(lli)sqrt(n);i++) 
      if (primes[i]) 
      { 
        primacity[i] = 1;
        for(j=2;j*i<=n;j++) { primes[i*j] = 0; primacity[i*j] += 1; }
      }
  for(i=2;i<=n;i++) { if(primes[i] == 1)  primacity[i] = 1; }
  return primacity;
}

int main()
{
  // make_it_fast
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  int t, tc;
  lli a, b, k, i;
  vector<lli> primacityOf = gen_primacity(MAXN);
  // dbv(primacityOf)
  vector< vector<lli> > primacity(11);
  rep(i, primacityOf.size())
  { 
    primacity[primacityOf[i]].pb(i);
  }

  // rep(i, primacity.size()) db(i, primacity[i].size());

  inp(t);
  for(tc = 1; tc <= t; tc++)
  {
    printf("Case #%d: ", tc);
    inp(a, b, k);
    if(k < 11) 
    {
      lli s = lower_bound(all(primacity[k]), a) - primacity[k].begin();
      lli e = upper_bound(all(primacity[k]), b) - primacity[k].begin();
      oup(e-s);
    } else oup(0);
  }
  return 0;
}
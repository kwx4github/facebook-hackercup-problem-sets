



import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class Homework {
	
	static final String INPUT = "homework.txt";
	static final String OUTPUT = "homework_output.txt";

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer st = new StringTokenizer("");

	public static String next() {
		try	{
		while (!st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s);
		}
		return st.nextToken();
		}	catch(Exception e)	{
			return	null;
		}
	}

	public static void main(String[] args) throws FileNotFoundException {

		
		br = new BufferedReader( new InputStreamReader(new FileInputStream(INPUT)) );
		out = new PrintWriter( new FileOutputStream(OUTPUT) );
		

		long time = System.currentTimeMillis();
		
		
		int top = 10000000;
		int numFactors = 8;
		
		
		boolean [] isPrime = new boolean [top + 1];
		Arrays.fill(isPrime, true);
		isPrime[0] = isPrime[1] = isPrime[2] = false;
		for (int k = 2; k * k <= top; k++)	if	( isPrime[k] )	{
			for (int x = k + k; x <= top; x += k)
				isPrime[x] = false;
		}
		

		
		int [][] table = new int [top + 1][numFactors];
		for (int k = 2; k <= top; k++)	{
			
			for (int m = 0; m < numFactors; m++)
				table[k][m] = table[k - 1][m];

			if	( isPrime[k] )	{
				table[k][0]++;
			}	else	{
				table[k][ factors(k) - 1 ]++;
			}
		}
		
		
		time = System.currentTimeMillis() - time;
	//	out.println( "time: " + time );
		
		
		int CASES = Integer.parseInt( next() );
		for (int cc = 1; cc <= CASES; cc++)	{
			int a = Integer.parseInt( next() );
			int b = Integer.parseInt( next() );
			int k = Integer.parseInt( next() ) - 1;
			
			int ans = 0;
			if	( k < numFactors )
				ans = table[b][k] - table[a - 1][k];
			
			out.println( "Case #" + cc + ": " + ans );
		}
		

		//
		out.flush();
		out.close();
	}
	static int factors(int N) {
		
		/*
		if	( BigInteger.valueOf(N).isProbablePrime(8) )
			return	1;
		*/
		
		int d, top;
		int ans = 0;
		if	( (N & 1) == 0 )	{
			ans++;

			while ((N & 1) == 0)
				N >>= 1;
		}
		
		d = 3;
		top = (int)Math.sqrt(N) + 1;
		while (d <= top) {
			if (N % d == 0) {
				ans++;
				while (N % d == 0)
					N /= d;
				
				top = (int)Math.sqrt(N) + 1;
			}
			d += 2;
		}
		if (N > 1)
			ans++;
		
		return ans;
	}
	
}


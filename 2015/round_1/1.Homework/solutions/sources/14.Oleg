#include <cassert>
#include <cstdio>
#include <cstring>

const int limit = 10000010;
int d[limit], p[limit], pn = 0;

int main () {
  memset (d, 0, sizeof (d));
  for (int i = 2; i < limit; i++) {
    if (d[i] == 0) {
      p[pn++] = i;
      d[i] = i;
    }
    for (int j = 0; j < pn && p[j] <= d[i]; j++)
      if ((long long)i * p[j] < limit) {
        assert (d[i * p[j]] == 0);
        d[i * p[j]] = p[j];
      } else
        break;
  }

  int tn;
  assert (scanf ("%d", &tn) == 1);
  for (int t = 1; t <= tn; t++) {
    int a, b, k;
    assert (scanf ("%d%d%d", &a, &b, &k) == 3);
    int ans = 0;
    for (int x = a; x <= b; x++) {
      int res = 0, pp = 0;
      for (int y = x; y > 1; ) {
        if (pp != d[y])
          res++, pp = d[y];
        y /= pp;
      }
      if (res == k)
        ans++;
    }
    printf ("Case #%d: %d\n", t, ans);
  }

  return 0;
}


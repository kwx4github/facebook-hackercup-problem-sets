package com.jasonandmary.fhc.fhc2015.round1.question1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

import com.google.common.base.Throwables;

/**
 * Application for Facebook Hacker Cup 2015
 * Name: fhc-2015-round1-question1
 * &copy;2015 Jason W. Thompson
 * @author Jason W. Thompson
 */
public class App
{
    private static final Map<Long, Long> SOLUTIONS = new HashMap<>();

    /**
     * Executes the application.
     * @param args not used.
     * @throws IOException if there is problem reading the input file or writing the PrintStream.
     */
    public static void main(String[] args) throws IOException
    {
        final List<Problem> problems = processInput(App.class.getClassLoader().getResourceAsStream("input.txt"));
        App.printSolutions(problems, System.out);
    }

    /**
     * The problem.
     */
    public static class Problem
    {
        public long startInteger;
        public long endInteger;
        public long targetPrimacity;

        @Override
        public String toString()
        {
            return "Problem [startInteger=" + startInteger + ", endInteger=" + endInteger + ", targetPrimacity=" + targetPrimacity + "]";
        }

    }

    /**
     * Solves the problem
     * @param problem The problem
     * @return The solution.
     */
    public static String solve(Problem problem)
    {
        return "" + LongStream.rangeClosed(problem.startInteger, problem.endInteger)
                              .parallel()
                              .filter(num -> distinctPrimeFactors(num) == problem.targetPrimacity)
                              .count();
    }

    public static long distinctPrimeFactors(long num)
    {
        final Long count = SOLUTIONS.get(num);
        if (count != null)
        {
            return count;
        }
        final Collection<Long> primeFactors = new ArrayList<>();

        long n = num;
        for (long i = 2; i <= n / i; i++)
        {
            while (n % i == 0)
            {
                primeFactors.add(i);
                n /= i;
            }
        }
        if (n > 1)
        {
            primeFactors.add(n);
        }
        final Long newCount = primeFactors.stream().distinct().count();
        SOLUTIONS.put(num, newCount);
        return newCount;
    }

    /**
     * Parses the input into a problem
     * @param reader The reader.
     * @return The parsed object
     */
    private static Problem parseProblem(BufferedReader reader)
    {
        try
        {
            final String str = reader.readLine();
            try (Scanner scanner = new Scanner(str).useDelimiter("\\s"))
            {
                final Problem problem = new Problem();
                problem.startInteger = scanner.nextLong();
                problem.endInteger = scanner.nextLong();
                problem.targetPrimacity = scanner.nextLong();
                return problem;
            }
        }
        catch (final IOException e)
        {
            throw Throwables.propagate(e);
        }
    }

    /**
     * Prints the solution to the input file. This will output in the format of:
     * <br />
     * <pre>
     * Case #n: <i>solution</i>
     * </pre>
     * @param problems All of the problems to solve.
     * @param printStream The {@link PrintStream} that should print the solution.
     * @throws IOException if there is problem reading the input file or writing the PrintStream.
     */
    public static void printSolutions(List<Problem> problems, PrintStream printStream) throws IOException
    {
        for (int i = 0; i < problems.size(); i++)
        {
            printStream.println("Case #" + (i + 1) + ": " + solve(problems.get(i)));
        }
    }

    /**
     * Processes the input stream into a collection of problems.
     * @param input The input stream that contains the problems.
     * @return The solution.
     */
    public static List<Problem> processInput(InputStream input)
    {
        try
        {
            final BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            final int count = Integer.parseInt(reader.readLine());
            return IntStream.range(0, count).mapToObj(i -> parseProblem(reader)).collect(Collectors.toList());
        }
        catch (final Exception e)
        {
            throw Throwables.propagate(e);
        }
    }
}

/**
 * Created by mikey on 18/01/15.
 */

import java.io.File

import scala.annotation.tailrec
import scala.collection.parallel.mutable
import scala.io.Source

object Homework extends App {

  def sieveOfEratosthenes(limit: Int) = {
    val (primes: mutable.ParSet[Int], sqrtLimit) = (mutable.ParSet.empty ++ (2 to limit), math.sqrt(limit).toInt)
    @tailrec
    def prim(candidate: Int): Unit = {
      if (candidate <= sqrtLimit) {
        if (primes contains candidate) primes --= candidate * candidate to limit by candidate
        prim(candidate + 1)
      }
    }
    prim(2)
    primes
  }
  def getPrimeacities(number: Int): Int = {
    val factor = new scala.collection.mutable.HashSet[Int]
    var mutableNumber = number
    primeList.forall(prime => {
      while (mutableNumber % prime == 0) {
        factor += prime
        mutableNumber = mutableNumber / prime
      }
      mutableNumber > 1 && prime < number
    })
    factor.size
  }
  val n = 1000001
  val primeList = sieveOfEratosthenes(n).toList.sorted
  val primeacities = Array.fill[Int](n)(0)
  for (i <- 2 until n) {
    primeacities(i) = getPrimeacities(i)
  }
  val primeacityList = primeacities.toList
  val lines = Source.fromFile(new File("src/main/resources/homework.txt")).getLines.drop(1).toList
  for (caseCount <- 1 to lines.size) {
    val line = lines(caseCount - 1)
    val inputs = line.split(" ").map(_.toInt)
    val result = primeacityList.slice(inputs(0), inputs(1) + 1).count(_ == inputs(2))
    println(s"Case #$caseCount: $result")
  }
}

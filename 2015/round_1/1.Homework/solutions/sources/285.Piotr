def genPrimacities(maxPrime = 10**5):
    P = [0] * (maxPrime+1)
    for i in range(2, maxPrime+1):
        if P[i] == 0:
            P[i] = 1
            for j in range(i+i, maxPrime+1, i):
                P[j] += 1
    return P

def solveK(P, Q, RES, k):
    S = [0] * len(P)
    for i in range(1, len(P)):
        S[i] = S[i-1] + (1 if P[i] == k else 0)
    for A, B, K in Q:
        if K != k: continue
        RES[(A, B, K)] = S[B] - S[A-1]
    #print (Qs)

def solve(Q, RES):
    maxPrime = max(x[1] for x in Q)
    P = genPrimacities(maxPrime)
    #print (P[1000000])
    for k in range(1, 9):
        solveK(P, Q, RES, k)

def main():
    T = int(input())
    I = []
    RES = {}
    Q = []
    for t in range(T):
        A, B, K = list([int(x) for x in input().split()])
        I.append((A, B, K))
        if K > 8:
            RES[(A, B, K)] = 0
        else:
            Q.append((A, B, K))
    if Q: solve(Q, RES)
    for t in range(T):
        ABK = I[t]
        res = RES[ABK]
        print ("Case #%d: %d" % (t+1, res))

if __name__ == '__main__':
    main()

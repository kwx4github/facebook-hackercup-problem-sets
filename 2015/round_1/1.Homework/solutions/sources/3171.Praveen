#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<sstream>
#define sp(z) setprecision(z)
#define sv(z) sort(z.begin(),z.end())
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double 
#define si(z) scanf("%d",&z)
#define sl(z) scanf("%Ld",&z)
#define sd(z) scanf("%Lf",&z)
#define sc(z) scanf("%c",&z)
#define fr(y,q,s) for(int y=q;y<s;y++)
#define f(y,z) for(int y=0;y<z;y++)
#define fe(y,z) for(int y=1;y<=z;y++)
using namespace std;
ll min(ll a,ll b){ return (a<b)?a:b; }
ll max(ll a,ll b){ return (a>b)?a:b; }
ll gcd(ll a,ll b){ return (b==0)?a:gcd(b,a%b); }
ll modpow(ll a, ll n, ll mod){ ll res=1; while(n){ if(n&1)res=(res*a)%mod; a=(a*a)%mod; n>>=1; } return res; }
ll lpow(ll a, ll n){ ll res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
ld dpow(ld a, ll n){ ld res=1; while(n){ if(n&1)res*=a; a*=a; n>>=1; } return res; }
int primes[10000001];
void sieve(){ f(i,10000001) primes[i]=1;primes[1]=0;for(int i=2;i<=32000;i++) { if(primes[i])for(int j=2;(i*j)<=10000000;j++)primes[i*j]=0; }}
int primacity[10000001];

int main()
{
	sieve();
//	cout<<"sieve"<<endl;
	primacity[1]=0;
	primacity[2]=1;
	for(int i=3;i<=10000000;i++)
	{
		int tmp = i;
		int j=2;
		bool flag=false;
		while(tmp>1)
		{
			flag=false;
			if(primes[tmp] || (tmp<(j*j))){primacity[i]++;break;}
			
			while(!(tmp%j))
			{
				flag=true;
				tmp/=j;
			}
			if(flag) primacity[i]++;
			j++;
		}
	}
//	cout<<"primacity"<<endl;
	int t;
	si(t);
	fe(tc,t)
	{
		printf("Case #%d: ",tc);
		int a,b,k;
		si(a);si(b);si(k);
		int answer=0;
		for(int i=a;i<=b;i++)
			if(primacity[i]==k) answer++;
		printf("%d\n",answer);
	}
	return 0;
}

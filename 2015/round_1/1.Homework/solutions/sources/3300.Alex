#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

void sieve (vector<int> &p) {
  int t = p.size();
  for (int i = 2; i < t; i += 2) {
    p[i]++;
  }
  for (int i = 3; i < t; i += 2) {
    if (p[i] == 0) {
      for (int j = 1; j*i < t; j++) {
        p[j*i]++;
      }
    }
  }
}

int main ()
{
  int LIMIT = 10000000;
  vector<int> primes(LIMIT+1, 0);
  sieve(primes);
  vector<vector<int>> primacity(9);
  for(int i = 2; i <= LIMIT; i++) {
    primacity[primes[i]].push_back(i);
  }
  int T;
  cin >> T;
  for(int t = 0; t < T; t++) {
    int A, B, K;
    cin >> A >> B >> K;
    if (K > 8) {
      cout << "Case #" << t+1 << ": 0" << endl;
    }
    else {
      auto start = primacity[K].begin();
      auto end = primacity[K].end();
      int left = lower_bound(start, end, A) - start;
      int right = upper_bound(start, end, B) - start;
      cout << "Case #" << t+1 << ": " << right-left << endl;
    }
  }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;

class Primicity
{
    final static int MAX = 10000000;
    static int[] sieve;
    int A;
    int B;
    int K;

    public Primicity(int A, int B, int K){
        this.A = A;
        this.B = B;
        this.K = K;
    }

    public String getNoPrimesWithPrimicity(){
        int no = 0;
        //System.out.println("A "+ A +" B "+B+" K " +  K);
        for (int i = A; i <= B; i++) {
            //System.out.println("try primicity -> "+ i+ " " + Primicity.sieve[i]);
            if (Primicity.sieve[i] == K) {
                no++;
            }
        }
        return "" + no;
    }

    public static void computeSieve()
    {
        sieve = new int[MAX + 2];
        int i = 2;
        while (i <= MAX) {
            if (sieve[i] == 0) {
                for (int j = i; j <= MAX; j+=i)
                    sieve[j]++;
            }
            i++;
        }

    }
    public static ArrayList<Primicity> readFromFile() {
        try {
            String strLine;
            FileInputStream in = new FileInputStream("input.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            ArrayList<Primicity> testCases = new ArrayList<Primicity>();

            //get no of tests
            strLine = br.readLine();
            String temp[] = strLine.split(" ");
            int testCasesNo = Integer.parseInt(temp[0]);
            //System.out.println("testCasesNo = " + testCasesNo);
            for (int testIdx = 1; testIdx <= testCasesNo; testIdx++) {
                strLine = br.readLine();
                temp = strLine.split(" ");
                int A = Integer.parseInt(temp[0]);
                int B = Integer.parseInt(temp[1]);
                int K = Integer.parseInt(temp[2]);
                
                Primicity testCase = new Primicity(A, B, K);
                testCases.add(testCase);
            }

            Primicity.computeSieve();


            return testCases;
        } catch (IOException e) {
            System.out.println(e);
        }
        return null;
    }

    public static void writeToFile(ArrayList<String> labels) {
        PrintWriter printWriter = null;
        try {
            printWriter = new PrintWriter("output.txt");
            for (int i = 1; i <= labels.size(); i++) {
                printWriter.print("Case #" + i + ": " + labels.get(i - 1) + "\n");
            }
            printWriter.close();
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } finally {
            printWriter.close();
        }
    }
    
}
/**
 *
 * @author Catalina
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        // TODO code application logic here
        ArrayList<Primicity> testCases = Primicity.readFromFile();
        ArrayList<String> results = new ArrayList<String>();
        for (int i = 0; i < testCases.size(); i++) {
            //System.out.println("======================= "+i+" ================================");
            String result = testCases.get(i).getNoPrimesWithPrimicity();
            results.add(result);
        }
        Primicity.writeToFile(results);
    }
    

}

#include <list>
#include <stack>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <assert.h>


using namespace std;

#define pb push_back
#define mp make_pair


typedef unsigned long long ull;
typedef long long int64;

//
//#define mo 1000000007
//

//vector<int> primacity(10000001, 1);
#define MAXK 8
vector<vector<int>> primacity(MAXK+1);

int main()
{
	freopen("..\\p.txt", "r", stdin);
	for (int i=2; i<=10000000; i++) {
		int p=0;
		scanf("%d", &p);
		assert(p>0 && p<=MAXK);
		primacity[p].push_back(i);
	}

	freopen("..\\in.txt", "r", stdin);
	freopen("..\\out.txt", "w", stdout);
	
	int test_case=0;
	scanf("%i", &test_case);

	for (int i=1; i<=test_case; i++)
	{
		printf("Case #%d: ", i);

		int a,b,k;
		scanf("%d %d %d", &a, &b, &k);

		if (k>MAXK) printf("0");
		else {
			vector<int>::iterator low,up;
			low=lower_bound(primacity[k].begin(), primacity[k].end(), a);
			up=upper_bound(primacity[k].begin(), primacity[k].end(), b);

			printf("%d", up-low);
		}

		printf("\n");
	}

	//primacity[0]=primacity[1] = 0;

	//for (int i=2; i<=10000000; i++) {
	//	const int root = sqrt(i*1.0) + 1;
	//	for (int j=2; j<=root; j++) {
	//		if (primacity[j] == 1 && i % j == 0) {
	//			if (i % (j*j) == 0) {
	//				primacity[i]=primacity[i/j];
	//			}
	//			else {
	//				primacity[i]=primacity[i/j] + 1;
	//			}
	//			break;
	//		}
	//	}

	//	printf("%d ", primacity[i]);
	//}



	return 0;
}




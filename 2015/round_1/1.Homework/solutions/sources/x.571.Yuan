import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class Homework {

    static int MAX = 10000000;
    static int[] cnt = new int[MAX + 1];
    static int[][] A = new int[9][MAX];
    static {
        for (int i = 2; i * i <= MAX; i++)
            if (cnt[i] == 0) {
                for (int j = i; j <= MAX; j += i)
                    cnt[j]++;
            }
        for (int i = 2; i <= MAX; i++) {
            A[cnt[i]][0]++;
            A[cnt[i]][A[cnt[i]][0]] = i;
        }
    }

    static int minGE(int[] a, int x) {
        if (a[0] == 0) return -1;
        if (a[a[0]] < x) return -1;
        if (a[1] >= x) return 1;
        int less = 1, eelse = a[0];
        while (less + 1 < eelse) {
            int mid = (less + eelse) / 2;
            if (a[mid] < x) less = mid;
            else eelse = mid;
        }
        return eelse;
    }

    static int maxLE(int[] a, int x) {
        if (a[0] == 0) return -1;
        if (a[1] > x) return -1;
        if (a[a[0]] <= x) return a[0];
        int lessEqualTo = 1, greater = a[0];
        while (lessEqualTo + 1 < greater) {
            int mid = (lessEqualTo + greater) / 2;
            if (a[mid] <= x) lessEqualTo = mid;
            else greater = mid;
        }
        return lessEqualTo;
    }

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cin = new Scanner(new File("homework.txt"));
        PrintStream cout = new PrintStream("homework.out");
        // Scanner cin = new Scanner(new File("A-large-practice.in"));
        // PrintStream cout = new PrintStream("A-large-practice.out");
        // Scanner cin = new Scanner(System.in);
        // PrintStream cout = System.out;

        int _case = 0;
        for (int T = cin.nextInt(); T > 0; T--) {
            _case++;
            int L = cin.nextInt();
            int R = cin.nextInt();
            int K = cin.nextInt();
            int ans = 0;
            if (A[K][0] > 0 && minGE(A[K], L) != -1 && maxLE(A[K], R) != -1) {
                ans = maxLE(A[K], R) - minGE(A[K], L) + 1;
                if (ans < 0) ans = 0;
            }
            cout.print(String.format("Case #%d: %d%n", _case, ans));
        }
        cin.close();
        cout.close();
    }
}

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <climits>
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define REP(i, a, b) for(int i = (a); i <=(b); i++)
#define FORD(i, a, b) for(int i = (a); i > (b); i--)
#define REPD(i, a, b) for(int i = (a); i >=(b); i--)
#define TR(it, a) for(typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define RESET(a, v) memset((a), (v), sizeof((a)))
#define SZ(a) (int((a).size()))
#define ALL(a) (a).begin(), (a).end()
#define PB push_back
#define MP make_pair
#define LL long long
#define LD long double
#define II pair<int, int>
#define X first
#define Y second
#define VI vector<int>

const int lim = 10000007;
const int MAXK = 50;

using namespace std;

int notPrime[lim];
bool was[lim];
VI a[MAXK];

int cnt(int x) {
    stack<int> s;
    while (x > 1) {
        int f = notPrime[x];
        if (!was[f]) {
            was[f] = 1;
            s.push(f);
        }
        x /= f;
    }
    int ret = SZ(s);
    while (!s.empty()) {
        was[s.top()] = 0;
        s.pop();
    }
    return ret;
}

void init() {
    for(int i = 2; i * i < lim; i++)
    if (notPrime[i] == 0)
        for(int j = i * i; j < lim; j += i)
            notPrime[j] = i;
    FOR(i, 2, lim)
    if (notPrime[i] == 0) notPrime[i] = i;
    FOR(i, 2, lim)
        a[cnt(i)].PB(i);
}

int ans(int l, int r, int k) {
    if (k >= MAXK) return 0;
    return upper_bound(ALL(a[k]), r) - lower_bound(ALL(a[k]), l);
}

int main() {
    ios :: sync_with_stdio(0); cin.tie(0);
    freopen("homework.txt", "r", stdin);
    freopen("homework.out", "w", stdout);
    init();
    int nTest, l, r, k;
    cin >> nTest;
    REP(test, 1, nTest) {
        cin >> l >> r >> k;
        cout << "Case #" << test << ": " << ans(l, r, k) << '\n';
    }
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define F(i,n) for(int i=0;i<n;i++)
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end() 
#define trav(i,c) for(auto i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define P_B push_back
#define M_P make_pair
#define fill(l,v) memset(l,v,sizeof(l))
#define debug(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)

template<class T>string ToString(T t){stringstream s;s<<t;return s.str();}
template<class T>void ToOther(T& t,string a){stringstream s(a);s>>t;}

// VALAR MORGHULIS

using namespace std;

int PRIMACITY[10000005];
vector<int> primes;

void sieve()
{
	int MAX = 3200;
	int ARR[MAX];
	fill( ARR , false );
	ARR[0] = ARR[1] = true;
	int LIMIT = 57;
	for( int i=4;i<MAX;i+=2 )
	{
		ARR[i] = true;
	}
	for( int i=3;i<=LIMIT;i+=2 )
	{
		if( !ARR[i] )
		{
			for( int j=i*i,k=(i<<1);j<MAX;j+=k )
			{
				ARR[j] = true;
			}
		}	
	}
	for( int i=0;i<MAX;i++ )
	{
		if( !ARR[i] )
		{
			primes.P_B( i );
		}
	}
}

void preCompute()
{
	sieve();
	PRIMACITY[0] = PRIMACITY[1] = 0;
	for( int i=2;i<10000002;i++ )
	{
		int val = i;
		int primacityCount = 0;
		for( int j=0;j<sz(primes);j++ )
		{
			if( val%primes[j] == 0 )
			{
				primacityCount++;
				while( val%primes[j] == 0 )
				{
					val = val/primes[j];
				}
			}
			if( val == 1 ) 
				break;
		}
		if( val != 1 )
		{
			primacityCount++;
		}
		PRIMACITY[i] = primacityCount;
	}
}

int main()
{
	
	int cases,k=1;
	scanf( "%d",&cases );

	preCompute();

	while( cases-- )
	{
		int A,B,K;
		scanf( "%d%d%d",&A,&B,&K );
		int res = 0;
		for( int i=A;i<=B;i++ )
		{
			if( PRIMACITY[i] == K )
			{
				res++;
			}
		}
		printf("Case #%d: %d\n",k,res);
		k++;
	}

	return 0;
}

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

/**
 * by dt on 1/17/15, 10:02 AM
 */
public class Primacity {
    static int[] primacity = new int[10000001];

    public static void main(String... args) throws FileNotFoundException {
        Scanner sc = new Scanner(new FileInputStream("Primacity.in.fb.txt"));
        precalcPrimacity();
        int count = sc.nextInt();
        PrintStream ps = new PrintStream("Primacity.out.txt");
        for (int i = 1; i <= count; i ++) {
            String res = "Case #" + i + ": " + primacity(sc.nextInt(), sc.nextInt(), sc.nextInt());
            ps.println(res);
        }
        ps.flush();ps.close();
    }

    private static void precalcPrimacity() {
        Set<Integer> primes = new HashSet<Integer>();

        for (int i = 2; i < 10000001; i ++) {
            primes.add(i);
        }

        System.out.println("seeded");

        // sieve
        for (int i = 2; i < 10000001; i ++) {
            for (int mul = 2; i * mul < 10000001; mul ++) {
                primes.remove(i * mul);
            }
            if (i % 10000 == 0) System.out.println("sieved " + i);
        }

        System.out.println("sieved");

//        for (int p : primes) {
//            primacity[p] = 1;
//        }
//
//        for (int i = 2; i < 10000001; i ++) {
//            for (int prime : primes) {
//                if (prime * 2 > i) break;
//                if ((i % prime == 0) && ((i / prime) % prime != 0)) {
//                    primacity[i] = primacity[i / prime] + 1;
//                    break;
//                }
//            }
//        }

        for (int step : primes) {
            for (int i = step; i < 10000001; i += step) {
                primacity[i] ++;
            }
        }

        System.out.println("calced");
    }

    private static int primacity(int a, int b, int k) {
        int result = 0;
        for (int i = a; i <= b; i ++) {
            if (primacity[i] == k) {
                result ++;
            }
        };

        return result;
    }
}

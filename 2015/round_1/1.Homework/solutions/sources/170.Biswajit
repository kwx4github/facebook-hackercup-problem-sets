#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

int primes[10000100];
int kdivs[10][10000100];

const int maxn = 10000001;

void pre()
{
	mset(primes, 0);
	for(int i=2; i<maxn; i++)
		if(primes[i] == 0)
		{
			for(int j=i; j<maxn; j+=i)
				primes[j]++;
		}

	mset(kdivs, 0);
	for(int i=0; i<maxn; i++) kdivs[primes[i]][i] = 1;

	for(int i=0; i<10; i++)
		for(int j=1; j<maxn; j++) kdivs[i][j] += kdivs[i][j-1];
}
int main()
{
	pre();

	int t;
	gi(t);

	for(int tt = 1; tt<=t; tt++)
	{
		int a, b, k;

		gi(a), gi(b), gi(k);

		if(k >= 10) printf("Case #%d: 0\n", tt);
		else printf("Case #%d: %d\n", tt, kdivs[k][b] - kdivs[k][a-1]);
	}
    return 0;
}
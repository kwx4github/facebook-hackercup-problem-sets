

#define DEBUG       //comment when you have to disable all debug macros.
//#define LOCAL     //uncomment for testing from local file
#define NDEBUG    //comment when all assert statements have to be enabled.
//#define GRAPH
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

#define fd(i,a) for(i=1;i<=a;i++)
#define fa(i,a,b) for(i=a;i<=b;i++)
#define fs(i,a,b,c) for(i=a;i<=b;i+=c)
#define tr(c,i) for(typeof(c.begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define all(x) x.begin(), x.end()
#define clr(x,y) memset(x,y,sizeof x)
#define log2(x) (log(x)/log(2))
#define ARRAY_SIZE(arr) (1[&arr]-arr)      
#define INDEX(arr,elem)        (lower_bound(all(arr),elem)-arr.begin())
#define equals(a,b) (a.compareTo(b)==0)    //for strings only
template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

#define pb push_back
#define mp make_pair
#define lld long long int
#define MOD 1000000007
#define gcd __gcd

using namespace std;

#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#else
#define debug(args...)              // Just strip off all debug tokens
#endif

#ifdef GRAPH
#include "drawGraph.cpp"
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }

}dbg;

template<class T>
inline void inputInt(T &n )
{
	n=0;

 	T ch=getchar_unlocked();
	/*int sign=1;
  	while(( ch < '0' || ch > '9') && ch!='-')
      ch=getchar_unlocked();
	if(ch=='-')
	{
		sign=-1;
		ch=getchar_unlocked();
	}
   	while(  ch >= '0' && ch <= '9' )
       n = (n<<3)+(n<<1) + ch-'0', ch=getchar_unlocked();
		 n*=sign;*/
	while( ch < '0' || ch > '9')
      ch=getchar_unlocked();
	while(  ch >= '0' && ch <= '9' )
		n = (n<<3)+(n<<1) + ch-'0', ch=getchar_unlocked();
}



#define SIZE 10000000
lld cop[SIZE+1];
int count1[SIZE+1],count2[SIZE+1],count3[SIZE+1],count4[SIZE+1],count5[SIZE+1],count6[SIZE+1],count7[SIZE+1],count8[SIZE+1];
void init()
{
	lld i,j;
	clr(cop,0);
	clr(count1,0);
	clr(count2,0);
	clr(count3,0);
	clr(count4,0);
	clr(count5,0);
	clr(count6,0);
	clr(count7,0);
	clr(count8,0);
	cop[0]=cop[1]=-1;
	for(i=2;i<=SIZE;i++)
	{
		if(cop[i]==0)
		{
			cop[i]++;
			for(j=2*i;j<=SIZE;j+=i)cop[j]++;
		}
	}
	for(i=2;i<=SIZE;i++){
		count1[i]=count1[i-1]+(cop[i]==1);
		count2[i]=count2[i-1]+(cop[i]==2);
		count3[i]=count3[i-1]+(cop[i]==3);
		count4[i]=count4[i-1]+(cop[i]==4);
		count5[i]=count5[i-1]+(cop[i]==5);
		count6[i]=count6[i-1]+(cop[i]==6);
		count7[i]=count7[i-1]+(cop[i]==7);
		count8[i]=count8[i-1]+(cop[i]==8);
	}
}

lld solve(lld a,lld b, lld k){
	lld ans;
	switch(k){
	case 1:
		ans=count1[b]-count1[a-1];
		break;
	case 2:
		ans=count2[b]-count2[a-1];
		break;
	case 3:
		ans=count3[b]-count3[a-1];
		break;
	case 4:
		ans=count4[b]-count4[a-1];
		break;
	case 5:
		ans=count5[b]-count5[a-1];
		break;
	case 6:
		ans=count6[b]-count6[a-1];
		break;
	case 7:
		ans=count7[b]-count7[a-1];
		break;
	case 8:
		ans=count8[b]-count8[a-1];
		break;
	default:
		ans=0;
	}
	return ans;
}

int main()
{
#ifdef LOCAL
    freopen("input.in","r",stdin);
#endif
	 init();
	 lld t,a,b,k,i;
	 inputInt(t);
	 for(i=1;i<=t;i++){
		 inputInt(a);
		 inputInt(b);
		 inputInt(k);
		 printf("Case #%lld: %lld\n",i,solve(a,b,k));
	 }
}


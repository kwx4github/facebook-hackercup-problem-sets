import static java.lang.Integer.parseInt;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.StringTokenizer;


public class Homework {

	static int MB = 1 << 20;
	static BufferedReader br = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 10*MB);
	static StringTokenizer st;
	
	static void NL() throws Exception {
		st = new StringTokenizer(br.readLine());
	}
	
	static String NT() {
		return st.nextToken();
	}
	
	public static void main(String[] args) throws Exception {
		NL();
		int T = parseInt(NT());
		StringBuilder sb = new StringBuilder();
		for (int ii = 1; ii <= T; ii++) {
			NL();
			int A, B, K;
			A = parseInt(NT());
			B = parseInt(NT());
			K = parseInt(NT());
			sb.append(String.format("Case #%d: ", ii)).append(solve(A, B, K)).append('\n');
		}
		System.out.print(sb);
	}

	static boolean[] isPrime = new boolean[10_000_001];
	static int[] cnts = new int[10_000_001];
	static int[][] sums = new int[9][10_000_001];
	static {
		Arrays.fill(isPrime, true);
		Arrays.fill(cnts, 0);
		isPrime[0] = false;
		isPrime[1] = false;
		++cnts[2];
		for (int i = 4; i < isPrime.length; i += 2) {
			isPrime[i] = false;
			++cnts[i];
		}
		for (int p = 3; p < isPrime.length; p += 2) {
			if (isPrime[p]) {
				++cnts[p];
				for (int i = p << 1; i < isPrime.length; i += p) {
					isPrime[i] = false;
					++cnts[i];
				}
			}
		}
		//
		for (int i = 0; i < sums.length; i++) {
			Arrays.fill(sums[i], 0);			
		}
		for (int i = 2; i < isPrime.length; i++) {
			for (int j = 0; j < sums.length; j++) {
				sums[j][i] = sums[j][i-1];
			}
			++sums[cnts[i]][i];
		}
	}
	
	private static int solve(int a, int b, int k) {
		return sums[k][b] - sums[k][a-1];
	}

}

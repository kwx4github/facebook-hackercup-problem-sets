package FacebookHackerCupRound1;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.Vector;




public class Homework {
	
	final static int MAX=10000000;
	static Vector kPrimacity[] = new Vector[12];
	
	public static void main(String sa[]) throws IOException {
		InputReader input = new InputReader(new FileReader("C:/Users/dell/Downloads/homework.txt"));
		
		//InputReader input = new InputReader(System.in);
		//OutputWriter output = new OutputWriter(System.out);
		OutputWriter output = new OutputWriter(new FileWriter("C:/Users/dell/Downloads/homework_output.txt"));


		int primacity[]=new int[MAX+1];
		for(int i=0;i<=MAX;i++){
			primacity[i]=0;
		}
		primacity[1]=0;
		
		for(int i=2;i*i<=MAX;i++){
			if(primacity[i]==0){
				for(int j=i*2;j<=MAX;j=j+i){
				 
					primacity[j]+=1;
				}
			}
		}
		
		int mostDivisible=0,mostDivisibleVal=0;
		
		for(int i=1;i<=MAX;i++){
			if(mostDivisibleVal<primacity[i])
				mostDivisible=i;
			mostDivisibleVal=Math.max(mostDivisibleVal,primacity[i]);
			
			
		}
		//output.printLine("mostDivisible : "+mostDivisible+" primacity : "+primacity[mostDivisible]);
	
		for(int i=0;i<=11;i++){
			kPrimacity[i] = new Vector<Integer>();
		}
		
		for(int i=1;i<=MAX;i++){
			if(primacity[i]==0 && i!=1)
				kPrimacity[primacity[i]+1].add(i);
			else
			kPrimacity[primacity[i]].add(i);
		}
		
		
		 
		//Algorithm/////////

		int t=input.nextInt();
		int a,b,k;
		for(int test=1;test<=t;test++){
			a=input.nextInt();
			b=input.nextInt();
			k=input.nextInt();
			
			if(k>MAX ){
				output.printLine("Case #"+test+": "+"0");
				continue;
			}
			int t1=leftBSearch(0, kPrimacity[k].size()-1, a, k),t2 = 0;
			if(t1!=-1){
				t2=rightBSearch(t1, kPrimacity[k].size()-1, b, k);
			}
			
			if(t1!=-1&&t2!=-1)
				output.printLine("Case #"+test+": "+(t2-t1+1));
			else
				output.printLine("Case #"+test+": "+"0");
		}
		
		
		
		////////////////////

		output.close();
	}
	
	static int leftBSearch(int low,int high,int key,int row){
		if(low>high)
			return -1;
		int mid;
		while(high-low>1){
			mid=(low+high)/2;
			if((Integer)kPrimacity[row].elementAt(mid) >= key)
				high=mid;
			else
				low=mid;
		}
		
		if((Integer)kPrimacity[row].elementAt(low)>=key)
			return low;
		else
		if((Integer)kPrimacity[row].elementAt(high)>=key)
			return high;
		else
			return -1;
	}
	
	static int rightBSearch(int low,int high,int key,int row){
		if(low>high)
			return -1;
		int mid;
		while(high-low>1){
			mid=(low+high)/2;
			if((Integer)kPrimacity[row].elementAt(mid) > key)
				high=mid;
			else
				low=mid;
		}
		
		if((Integer)kPrimacity[row].elementAt(high)<=key)
			return high;
		else
		if((Integer)kPrimacity[row].elementAt(low)<=key)
			return low;
		else
			return -1;
	}
	
	
}


class InputReader {

	BufferedReader in;
	StringTokenizer token;

	public InputReader(InputStream inputStream) {
		in = new BufferedReader(new InputStreamReader(inputStream));
	}

	public InputReader(FileReader fileReader) {
		// TODO Auto-generated constructor stub
		in = new BufferedReader(fileReader);
	}

	public String next() {
		try {
			while (token == null || !token.hasMoreTokens()) {
				token = new StringTokenizer(in.readLine());
			}

			return token.nextToken();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	// returns integer input
	int nextInt() {
		return Integer.parseInt(next());
	}

	// returns long input
	long nextLong() {
		return Long.parseLong(next());
	}

	// returns double input
	Double nextDouble() {
		return Double.parseDouble(next());
	}

}

class OutputWriter {

	PrintWriter out;

	public OutputWriter(OutputStream outputStream) {
		out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				outputStream)));
	}

	public OutputWriter(FileWriter fileWriter) {
		// TODO Auto-generated constructor stub
		out = new PrintWriter(new BufferedWriter(
				fileWriter));
	}

	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				out.print(' ');
			out.print(objects[i]);
		}
	}

	public void printLine(Object... objects) {
		print(objects);
		out.println();
	}

	public void close() {
		out.close();
	}
}



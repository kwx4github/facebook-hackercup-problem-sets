package hackercup2015.round1

import java.util.Scanner

import scala.collection.mutable
import scala.collection.mutable.{ListBuffer, HashMap}

/**
 * Created by dimitar on 1/17/15.
 */
object Primes {

  val primes = new ListBuffer[Int]
  val cache = new HashMap[Long, Long]
  def main(args: Array[String]) {

    generatePrimes()
    val sc = new Scanner(System.in)
    val t = sc.nextInt()

    (0 until t).foreach { c =>
      val a = sc.nextLong()
      val b = sc.nextLong()
      val k = sc.nextLong()

      var all = 0L
      for(i<- a to b) {
        if (cache.get(i).get == k)
          all += 1

      }
      println("Case #"+(c+1)+": " +all)
    }
  }


  def generatePrimes(): Unit = {
    for (i<- 2 to 10000000) {
      cache.put(i, primeFactors(i))
    }
  }

  def primeFactors(num: Long) : Long = {
    var n  = num
    val factors = new mutable.HashSet[Long]
    while (n%2 == 0) {
      factors.add(2)
      n = n/2;
    }

    while (n%3 == 0) {
      factors.add(3)
      n = n/3;
    }

    var loop = true
    var additional = 0L
    for (i <- 6 to math.sqrt(num).ceil.toInt by +6 if loop) {
      while (n% (i-1) == 0) {
        factors.add(i-1)
        n = n/(i-1)
      }
      while (n% (i+1) == 0) {
        factors.add(i+1)
        n = n/(i+1)
      }
      if (cache.contains(n)) {
        additional = cache.get(n).get
        loop = false
      }
    }

    if (n>2 && loop) {
      factors.add(n)
    }

    factors.size + additional
  }
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.StringTokenizer;


public class homework {
	
	static int t;
	static int a;
	static int b;
	static int k;
	static int[] primacity = new int[10000001];
	static int[] last  = new int[10000001];
	static int[] counts = new int[10000001];
	static int[] primes = new int[1229];
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("work.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("homework.txt")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		init();
		t = Integer.parseInt(st.nextToken());
		for(int i = 0; i < t; i++) {
			st = new StringTokenizer(f.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			k = Integer.parseInt(st.nextToken());
			out.println("Case # " + (i + 1) + ": " + solve(a, b, k));
		}
		out.close();
	}
	
	@SuppressWarnings("resource")
	public static void init() throws IOException {
		BufferedReader primac = new BufferedReader(new FileReader("primacities.txt"));
		for(int i = 2; i < 9800000; i++) {
			primacity[i] = Integer.parseInt(primac.readLine());
		}
		BufferedReader prim = new BufferedReader(new FileReader("primes.txt"));
		for(int i = 0; i < primes.length; i++) {
			primes[i] = Integer.parseInt(prim.readLine());
		}
		for(int i = 9800000; i < 10000001; i++) {
			for(int j = 0; j < primes.length; j++) {
				if(i % primes[j] == 0) primacity[i]++;
			}
		}
		for(int i = 2; i < primacity.length; i++) {
			if(last[primacity[i]] == 0) {
				last[primacity[i]] = i;
				counts[i] = 1;
			}
			else {
				counts[i] = counts[last[primacity[i]]] + 1;
				last[primacity[i]] = i;
			}
		}
	}
		
	public static int solve(int a, int b, int k) {
		if(a > b) return 0;
		int ind = b;
		while(ind >= a) {
			if(primacity[ind] == k) break;
			ind--;
		}
		if(ind < a) return 0;
		int ind2 = a;
		while(ind2 <= b) {
			if(primacity[ind2] == k) break;
			ind2++;
		}
		if(ind2 > b) return 0;
		return counts[ind] - counts[ind2] + 1;
	}
}
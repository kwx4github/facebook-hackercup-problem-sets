package main

import "fmt"

const (
	MinBound = 2
	MaxBound = 10000000
)

func getLPFs(limit int) []int {
	var primes []int = []int{}
	var lpf []int = make([]int, limit+1)
	for i := 2; i < limit; i++ {
		if lpf[i] == 0 {
			primes = append(primes, i)
			lpf[i] = i
		}
		for j := 0; j < len(primes) && primes[j] <= lpf[i] && primes[j]*i <= limit; j++ {
			lpf[i*primes[j]] = primes[j]
		}
	}
	return lpf
}

func getPrimacities(limit int) []int {
	var lpf []int = getLPFs(limit)
	var getPrimacity = func(n int) int {
		var primacity = 0
		for n >= 2 {
			var m int = n
			var p int = lpf[n]
			for ; m%p == 0; m /= p {
			}
			primacity++
			n = m
		}
		return primacity
	}
	var primacities []int = make([]int, limit+1)
	for i, _ := range primacities {
		primacities[i] = getPrimacity(i)
	}
	return primacities
}

func main() {
	var primacities []int = getPrimacities(MaxBound + 1)

	var numTests int
	fmt.Scanf("%d", &numTests)
	for testNum := 1; testNum <= numTests; testNum++ {
		var a, b, k int
		fmt.Scanf("%d%d%d", &a, &b, &k)
		var result int
		for i := a; i <= b; i++ {
			if primacities[i] == k {
				result++
			}
		}
		fmt.Printf("Case #%d: %d\n", testNum, result)
	}
}

#include <iostream>
#include <cstring>
#include <vector>

using namespace std;
const int MAX_PR = 15000000;
bool isprime[MAX_PR];
int count[MAX_PR];

vector<int> eratosthenes_sieve(int LIMIT) {
    memset(isprime, 1, sizeof(isprime));
    isprime[0]=isprime[1]=false;
    for(int i=2;i*i<LIMIT;++i)
        if(isprime[i])
            for(int j=i*i;j<LIMIT;j+=i)
                isprime[j]=false;
    vector<int> pr;
    for (int i = 2; i < LIMIT; i++) if(isprime[i]) pr.push_back(i);
    return pr;
}

void solve(int test_case) {
    int A, B, K;
    cin >> A >> B >> K;
    int ans = 0;
    for (int i = A; i <= B; ++i) {
        if (count[i] == K) ans++; 
    }
    cout << "Case #" << test_case << ": " << ans << endl;
}

int main() {
    vector<int> primes = eratosthenes_sieve(MAX_PR);
    for (int p : primes) {
        for (int j = 1; p * j < MAX_PR; ++j) {
            count[p*j]++;
        }
    }
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i) {
        solve(i+1);
    }
}

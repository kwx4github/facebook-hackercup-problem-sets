/* DIKRA */
/* DELAPAN.3gp */
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <utility>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
using namespace std;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

//type definitions
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vint;

//abbreviations
#define A first
#define B second
#define MP make_pair
#define PB push_back

//macros
#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPD(i,n) for (int i = (n)-1; 0 <= i; --i)
#define FOR(i,a,b) for (int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for (int i = (a); (b) <= i; --i)
#define FORIT(it,c) for (__typeof ((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define ALL(a) (a).begin(),(a).end()
#define SZ(a) ((int)(a).size())
#define RESET(a,x) memset(a,x,sizeof(a))
#define EXIST(a,s) ((s).find(a) != (s).end())
#define MX(a,b) a = max((a),(b));
#define MN(a,b) a = min((a),(b));

inline void OPEN(const string &s) {
	freopen((s + ".in").c_str(), "r", stdin);
	freopen((s + ".out").c_str(), "w", stdout);
}

/* -------------- end of DELAPAN.3gp's template -------------- */

int ntc;
int a, b, n;
int np;
int p[10000];
int sieve[10001];

vector<int> v[20];





int main(){
	OPEN("homework");

	// INIT PRIMES

	np = 0;
	for(int i = 2; i <= 10000; i++){
		if (sieve[i]) continue;
		p[np++] = i;
		if (i <= 10000)
		for(int j = i*i; j <= 10000; j += i) sieve[j] = 1;
	}

	// WORK
	FOR(i, 2, 10000000){
		int x = i;

		int ans = 0;

		REP(j, np){
			if (x % p[j] > 0) continue;
			ans++;
			while (x%p[j] == 0) x /= p[j];
		}

		if (x > 1) ans++;

		v[ans].PB(i);
	}

	// WORK
	scanf("%d", &ntc);
	FOR(itc, 1, ntc){
		scanf("%d %d %d", &a, &b, &n);

		if (n >= 20){
			printf("Case #%d: %d\n", 0);
			continue;
		}

		int le = (int)(lower_bound(v[n].begin(), v[n].end(), a) - v[n].begin());
		int ri = (int)(lower_bound(v[n].begin(), v[n].end(), b) - v[n].begin());


		if (ri < SZ(v[n]) && v[n][ri] == b) ri++;
		printf("Case #%d: %d\n", itc, ri-le);
	}

	

	return 0;
}

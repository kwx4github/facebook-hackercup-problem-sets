import java.io.InputStreamReader;
import java.io.IOException;
import java.util.InputMismatchException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class Task {

    int[] primacy;

    void init() {
        if (primacy != null) {
            return;
        }
        primacy = new int[(int)1e7 + 1];
        for (int i = 2; i < primacy.length; ++i) {
            if (primacy[i] != 0) {
                continue;
            }
            primacy[i] = 1;
            for (int j = 2; j <= (primacy.length - 1) / i; ++j) {
                ++primacy[i * j];
            }
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        init();
        int a = in.nextInt();
        int b = in.nextInt();
        int k = in.nextInt();
        int res = 0;
        for (int i = a; i <= b; ++i) {
            if (primacy[i] == k) {
                ++res;
            }
        }
        out.printf("Case #%d: %d\n", testNumber, res);
    }
}

class InputReader {
    BufferedReader bufReader;
    StringTokenizer stringTokenizer;
    boolean isEof = false;

    public InputReader(InputStream stream) {
        bufReader = new BufferedReader(new InputStreamReader(stream));
    }

    public String next() {
        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {
            try {
                String line = bufReader.readLine();
                if (line == null) {
                    isEof = true;
                    return null;
                }
                stringTokenizer = new StringTokenizer(line);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
        }
        return stringTokenizer.nextToken();
    }

    public int nextInt() {
        String s = next();
        if (s == null) {
            return 0;
        }
        return Integer.parseInt(s);
    }

}


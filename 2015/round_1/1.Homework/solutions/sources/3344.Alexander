#include <algorithm>

#include <deque>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#include <utility>

#include <iostream>

using namespace std;

vector<set<int>> calcPrimacities(int maxN) {
  vector<int> primes(1, 2);

  vector<bool> is_prime(maxN + 1);
  is_prime[2] = true;

  vector<set<int>> res(maxN + 1);
  res[2].insert(2);

  for (int i = 3; i <= maxN; ++i) {
    is_prime[i] = true;
    for (int v : primes) {
      if (i / v < v) {
        break;
      }
      if (i % v == 0) {
        is_prime[i] = false;
      }
    }

    if (is_prime[i]) {
      primes.push_back(i);
    }
  }

  for (int i = 3; i <= maxN; ++i) {
    if (is_prime[i]) {
      res[i].insert(i);
    } else {
      for (int v : primes) {
        if (i / v < v) {
          break;
        }

        if (i % v == 0) {
          res[i] = res[i / v];
          res[i].insert(v);
          break;
        }
      }
    }
  }

  return res;
}

int main(int argc, char* argv[]) {
  int numTests;
  cin >> numTests;

  const int maxN = 10000000;
  auto primacities = calcPrimacities(maxN);
  for (int test = 1; test <= numTests; ++test) {
    int A, B, K;
    cin >> A >> B >> K;
    int ans = 0;
    for (int i = A; i <= B; ++i) {
      ans += (primacities[i].size() == K);
    }

    cout << "Case #" << test << ": " << ans << endl;
  }

  return 0;
}

#include <cstdio>
#include <ctime>
#include <cassert>
#include <vector>
using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

const int MAXN = (int)1e7;

int d[MAXN + 1];
int main() {
    clock_t start = clock();
    vector <int> primes;
    for (int i = 2; i <= MAXN; i++) {
        if (d[i] == 0) {
            d[i] = i;
            primes.push_back(i);
        }
        for (auto p : primes) {
            if (p > d[i] || i * 1LL * p > MAXN) {
                break;
            }
            d[i * p] = p;
        }
    }
    eprintf("Sieve: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    int tests = 0;
    assert(scanf("%d", &tests) == 1);
    for (int test = 1; test <= tests; test++) {
        int A, B, k;
        assert(scanf("%d%d%d", &A, &B, &k) == 3);
        int answer = 0;
        for (int x = A; x <= B; x++) {
            int xx = x;
            int last = -1;
            int cnt = 0;
            while (xx > 1 && cnt <= k) {
                if (d[xx] > last) {
                    cnt++;
                }
                last = d[xx];
                xx /= d[xx];
            }
            if (cnt == k) {
                answer++;
            }
        }
        printf("Case #%d: %d\n", test, answer);
        eprintf("Test %d: %.2f\n", test, (double)(clock() - start) / CLOCKS_PER_SEC);
    }
    eprintf("Total: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    return 0;
}

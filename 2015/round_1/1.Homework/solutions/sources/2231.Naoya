;; Gauche is an R7RS Scheme implementation developed to be a handy script interpreter, which allows programmers and system administrators to write small to large scripts for their daily chores. Quick startup, built-in system interface, native multilingual support are some of my goals.
;; http://practical-scheme.net/gauche/index.html

(use math.prime)

(define (primacity ls)
  (let next ((ls ls) (l 0) (c 0))
    (if (null? ls) c
        (let1 a (car ls)
          (if (= a l) (next (cdr ls) l c)
              (next (cdr ls) a (+ c 1)))))))

(define PATH "primacity.dat")

(define (prepare BMAX)
  (let1 v (make-vector (+ BMAX 1) 0)
    (do ((x 2 (+ x 1)))
        ((> x BMAX) 'done)
      (let* (( f (naive-factorize x) )
             ( p (primacity f) ))
        (format (standard-error-port) "\r~d ~d" x p)
        (vector-set! v x p)
      ))
      (format (standard-error-port) "\n")
      (with-output-to-file PATH
        (lambda () (write v))) ))

(define (load)
  (with-input-from-file PATH (lambda () (read))))

(define (solve a b k)
  (let next ((x a) (c 0))
    (if (> x b) c
        (let1 px (vector-ref v x)
          (next (+ x 1) (+ c (if (= px k) 1 0))) ))))

(when (not (file-exists? PATH))
  (prepare 10000000))

(define v (load))

(let1 T (read)
  (dotimes (t T)
    (let* ((A (read))
           (B (read))
           (K (read))
           (res (solve A B K)))
      (format #t "Case #~d: ~d\n" (+ t 1) res))))


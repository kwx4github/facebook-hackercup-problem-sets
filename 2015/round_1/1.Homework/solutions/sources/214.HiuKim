import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class A {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int MAX = (int) 1e7;
    int[] cnt;
    ArrayList<Integer>[] nums;

    public void solveCase() throws IOException {
        int A = nextInt();
        int B = nextInt();
        int K = nextInt();

        int ans = 0;
        for (int n: nums[K]) {
            if (n >= A && n <= B) ans++;
        }
        out.print(ans);
    }

    public boolean[] getPrimeTable(int max){
        boolean[] isPrime = new boolean[max+1];
        for(int i = 2; i <= max; i++){
            isPrime[i] = true;
        }
        for(int i = 2; i <= max; i++){
            if(isPrime[i]){
                for(int j = i+i; j <= max; j+=i){
                    isPrime[j] = false;
                }
            }
        }
        return isPrime;
    }

    public void build() {
        boolean[] primes = getPrimeTable(MAX);

        cnt = new int[MAX+1];
        for (int i = 2; i <= MAX; i++) {
            if (!primes[i]) continue;
            for (int j = i; j <= MAX; j+=i) {
                cnt[j]++;
            }
        }

        nums = new ArrayList[MAX+1];
        for (int i = 0; i <= MAX; i++) {
            nums[i] = new ArrayList<Integer>();
        }
        for (int i = 2; i <= MAX; i++) {
            nums[cnt[i]].add(i);
        }


//        for (int i = 0; i <= MAX; i++) {
//            if (nums[i].size() > 0) {
//                out.println(i + ": " + nums[i].size());
//            }
//        }
    }

    public void solve() throws IOException {
        build();
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            out.print("Case #" + t + ": ");
            solveCase();
            out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new A().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

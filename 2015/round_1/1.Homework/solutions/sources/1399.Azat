import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;


public class A {

	static StringTokenizer st;
	static BufferedReader br;
	static PrintWriter pw;
	
	public static void main(String[] args) throws IOException{
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int n = (int) 1e7;
		int[]cnt = new int[n+1];
		boolean[]prime = new boolean[n+1];
		Arrays.fill(prime, true);
		prime[1] = false;
		int max = 0;
		long s1 = System.currentTimeMillis();
		for (int i = 1; i <= n; i++) {
			if (prime[i]) {
				cnt[i]++;
				for (int j = 2*i; j <= n; j += i) {
					prime[j] = false;
					cnt[j]++;
					max = Math.max(max, cnt[j]);
				}
			}
		}
		int[]size = new int[10];
		for (int i = 2; i <= n; i++) {
			size[cnt[i]]++;
		}
		int[][]L = new int[10][];
		for (int i = 1; i <= 9; i++) {
			L[i] = new int[size[i]];
		}
		Arrays.fill(size, 0);
		for (int i = 2; i <= n; i++) {
			int s = cnt[i];
			L[s][size[s]++] = i;
		}
		int test = nextInt();
		for (int t = 1; t <= test; t++) {
			pw.print("Case #"+t+": ");
			int a = nextInt();
			int b = nextInt();
			int k = nextInt();
			int ans = 0;
			if (k <= 20) {
				int left = Arrays.binarySearch(L[k], a);
				int right = Arrays.binarySearch(L[k], b);
				if (left < 0)
					left = Math.abs(left)-1;
				if (right < 0)
					right = Math.abs(right)-2;
				if (right >= left)
					ans = right-left+1;
			}
			pw.println(ans);
		}
		pw.close();
	}

	private static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}
	private static long nextLong() throws IOException {
		return Long.parseLong(next());
	}
	private static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	private static String next() throws IOException{
		while (st==null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine());
		return st.nextToken();
	}

}

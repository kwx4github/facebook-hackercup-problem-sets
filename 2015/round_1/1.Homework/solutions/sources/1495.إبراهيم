#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <cstring>

using namespace std;

#define mp make_pair
#define pp push_back
#define Sort(x) sort(x.begin(), x.end())
#define rep(i, x, y) for(int i = x; i < y; ++i)
#define Rep(i, x, y) for(int i = x; i <= y; ++i)
#define dRep(i, x, y) for(int i = x;i >= y; --i)
#define vi vector<int>
#define vvi vector<vector<int> >
#define ll long long
#define all(v) v.begin(),v.end()
#define ii pair<int, int>
#define mem(x, v) memset(x, v, sizeof(x))
#define nl '\n'
#define MOD 1000000007
#define readFile(fileName) freopen(fileName, "r", stdin)
#define writeFile(fileName) freopen(fileName, "w",stdout)

bool prime[10000001];
int countOfPrimes[10000001];
int primesCount[9][10000001];
vi primes;
void seive()
{
	memset(prime, true, sizeof(prime));
	prime[0] = prime[1] = false;
	for(int i = 2; i <= 10000000; i ++)
	{
		if(prime[i])
		{
			countOfPrimes[i] = 1;
			primes.pp(i);
			for(int j = 2 * i; j <= 10000000; j += i)
			{
				countOfPrimes[j]++;
				prime[j] = false;
			}
		}
		
	}
}

//int countPrime(int x)
//{
//	if(prime[x])
//		return 1;
//	int ret;
//	int ind = 0;
//	ret = 0;
//	while(x > 1)
//	{
//		if(!(x % primes[ind]))
//		{
//			ret++;
//			while(!(x % primes[ind]))
//			{
//				x /= primes[ind];
//			}
//		}
//		ind++;
//	}
//
//	return ret;
//}

int main()
{
	seive();
	Rep(i, 1, 8)
	{
		primesCount[i][1] = 0;
		Rep(j, 2, 1e7)
		{
			primesCount[i][j] = primesCount[i][j - 1] + (countOfPrimes[j] == i);		
		}
	}

	int t;
	int res;
	int a, b, k;
	readFile("homework.txt");
	writeFile("homework_output.txt");
	cin >> t;
	Rep(i, 1, t)
	{
		cin >> a >> b >> k;

		
		if(k > 8)
		{
			res = 0;
		}
		else
		{
			res = primesCount[k][b] - primesCount[k][a - 1];
		}

		cout << "Case #" << i << ": " << res << nl;
	}

	return 0;
}
import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Task {
    final int MAX_N = 10_000_000 + 10;

    public void solve(FastScanner in, PrintWriter out) throws IOException {
        boolean[] isPrime = new boolean[MAX_N];
        Arrays.fill(isPrime, true);
        for (int i = 2; i < MAX_N; i++)
            if (isPrime[i])
                for (int j = 2 * i; j < MAX_N; j += i)
                    isPrime[j] = false;
        int[] cnt = new int[MAX_N];
        for (int i = 2; i < MAX_N; i++)
            if (isPrime[i])
                for (int j = i; j < MAX_N; j += i)
                    cnt[j]++;
        int t = in.nextInt();
        for (int i = 0; i < t; i++) {
            int a = in.nextInt();
            int b = in.nextInt();
            int k = in.nextInt();
            int res = 0;
            for (int j = a; j <= b; j++)
                if (cnt[j] == k)
                    res++;
            out.format("Case #%d: %d%n", i + 1, res);
        }
    }

    public static void main(String[] args) throws IOException {
        FastScanner in = new FastScanner(new FileInputStream("input"));
        PrintWriter out = new PrintWriter(new FileOutputStream("output"));
        new Task().solve(in, out);
        in.close();
        out.close();
    }

    static class FastScanner {
        private StringTokenizer tokenizer;
        private BufferedReader reader;

        public FastScanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line;
                try {
                    line = reader.readLine();
                } catch (IOException e) {
                    return null;
                }
                if (line == null)
                    return null;
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                return null;
            }
            return line;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public void close() {
            try {
                reader.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }
}
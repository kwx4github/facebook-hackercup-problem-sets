/**
 * Created by helfper on 17/01/2015.
 */
object Homework {
  def main(args: Array[String]) {
    val t = io.StdIn.readInt

    preprocess()
    1.to(t).foreach(solve)
  }

  def solve(i: Int) {
    val Array(a, b, k) = io.StdIn.readLine.split(" ").map(_.toInt)

    println(s"Case #$i: ${primacity(a, b, k)}")
  }

  def primacity(a: Int, b: Int, k: Int): Int =
    a.to(b).count(n => sieve(n) == k)

  val limit = 10000001
  lazy val sieve = Array.fill(limit)(0)

  def preprocess() {
    Range(2, limit, 2).foreach(k => sieve(k) += 1)
    Stream.from(3, 2).takeWhile(n => n * n < limit).foreach(n =>
      if (sieve(n) == 0) {
        Range(n, limit, n).foreach(k => sieve(k) += 1)
      }
    )
  }
}

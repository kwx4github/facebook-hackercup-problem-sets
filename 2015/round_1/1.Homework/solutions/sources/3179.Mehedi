#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<list>
#include<sstream>
#include<utility>
#include<climits>
#include<fstream>
#include<bitset>

using namespace std;


#define Max 10000005
#define Min -1
#define lli long long int
#define psb push_back
#define pob pop_back
#define forl(i,n) for(i=1;i<=n;i++)
#define all(a) a.begin(),a.end()

typedef pair<int,int> pii;
typedef pair<lli,lli> pli;
typedef vector<int> vi;
typedef vector<lli> vli;

//int kdx[] = { -2, -2, -1, 1, 2,  2,  1, -1 };
//int kdy[] = { -1,  1,  2, 2, 1, -1, -2, -2 };

int a,b,k;
bool check(int N,int pos){return (bool)(N & (1<<pos));}
int Set(int N,int pos){	return N=N | (1<<pos);}
int N=Max;
int status[(Max/32) + 10];
lli X[Max];
vector<int>v;
void sieve()
{
     int i, j, sqrtN;
     sqrtN = int( sqrt( N ) ) + 1;
     for( i = 3; i <= sqrtN; i += 2 )
     {
		 if( check(status[i/32],i%32)==0)
		 {
	 		 for( j = i*i; j <= N; j += 2*i)
			 {
				 status[j/32]=Set(status[j/32],j % 32)   ;
	 		 }
		 }
	 }
	 v.push_back(2);
	 for(i=3;i<=Max;i+=2)
		 if( check(status[i/32],i%32)==0)
	 	 v.push_back(i);

}

int main()
{
//ios::sync_with_stdio(false);
int t,sz,ans;
sieve();
sz = v.size();
for(int i=0;i<sz;i++){
    for(int j=v[i];j<=10000000;j+=v[i]){
        X[j]++;
    }
}
freopen("homework.txt","r",stdin);
freopen("output","w",stdout);
scanf("%d",&t);
for(int i=1;i<=t;i++){
    scanf("%d %d %d",&a,&b,&k);
    ans=0;
    if(k>8){
        printf("Case #%d: %d\n",i,ans);
        continue;
    }
    for(int j=a;j<=b;j++){
        if(X[j]==k)
            ans++;
    }
    printf("Case #%d: %d\n",i,ans);
}

return 0;
}


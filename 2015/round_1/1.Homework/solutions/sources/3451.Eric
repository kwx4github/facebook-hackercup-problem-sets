import java.util.*;
import java.math.*;
public class primacity
{
	public static void main(String[] arg)
	{
		Scanner in = new Scanner(System.in);
		int cases = in.nextInt();
		ArrayList<Integer> primes = new ArrayList<Integer>();
		int[] sieve = new int[(int)1e7+1];
		sieve[0] = -1;
		sieve[1] = -1;
		sieve[2] = 1;
		primes.add(2);
		for(int i = 4; i < sieve.length; i+=2)
			sieve[i] = -1;
		for(int i = 3; i < sieve.length; i+=2)
		{
			if(sieve[i] != 0)
				continue;
			sieve[i] = 1;
			primes.add(i);
			for(int j = i+i; j < sieve.length; j += i)
			{
				sieve[j] = -1;
			}
		}
		long[] cache = new long[(int)1e7+1];
		for(int i = 2; i < cache.length; i++)
		{
			cache[i] = solve(primes, i);
		}
		for(int cc = 1; cc <= cases; cc++)
		{
			int start = in.nextInt();
			int end = in.nextInt();
			long k = in.nextLong();
			long answer = 0;
			for(int i = start; i <= end; i++)
			{
				if(cache[i] == k)
					answer++;
			}
			System.out.printf("Case #%d: ", cc);
			System.out.println(answer);
		}
	}
	public static long solve(ArrayList<Integer> primes, int num)
	{
		long answer = 0;
		int stop = (int)Math.sqrt(num);
		for(int i = 0; i < primes.size() && primes.get(i) <= stop+1; i++)
		{
			if(num % primes.get(i) == 0)
			{
				answer++;
				while(num % primes.get(i) == 0)
					num /= primes.get(i);
				stop = (int)Math.sqrt(num);
			}
		}
		if(num > 1)
			answer++;
		return answer;
	}
}
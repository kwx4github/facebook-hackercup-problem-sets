package fhc2015.r1;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Scanner;

public class A {

	public static void main(String[] args) throws Exception {
		String DIR = "src/fhc2015/r1/";
		String READ_FILE = null;
		String WRITE_FILE = null;

		//      READ_FILE = "a.in";
		//      WRITE_FILE = "a.out";

		if(READ_FILE != null){
			System.setIn(new BufferedInputStream(new FileInputStream(new File(DIR+READ_FILE))));
		}
		if(WRITE_FILE != null){
			System.setOut(new PrintStream(new File(DIR+WRITE_FILE)));
		}
		precalc();
		new A().run();
	}

	boolean DEBUG = false;
	Scanner sc;
	static LinkedList<Integer> primes;
	static int[] cnt;
	static void precalc(){
		primes = new LinkedList<>();
		cnt = new int[1000 * 1000 * 10 + 1];
		for (int i = 2 ; i <= 1000 * 1000 * 10 ; i++) {
			boolean isprime = true;
			for (int p : primes) {
				if (p * p > i) {
					break;
				}
				if (i % p == 0) {
					isprime = false;
					break;
				}
			}
			if (isprime) {
				primes.add(i);
			}
		}
		
		for (int p : primes) {
			for (int i = p ; i < cnt.length ; i += p) {
				cnt[i]++;
			}
		}
		
	}

	void run(){
		sc = new Scanner(System.in);
		int caseCnt = sc.nextInt();
		for (int caseNum = 1; caseNum <= caseCnt; caseNum++) {
			System.out.print("Case #" + caseNum + ": ");
			solve();
			System.out.flush();
		}
	}
	void debug(Object... o){
		if (DEBUG) System.out.println(Arrays.deepToString(o));
	}

	void solve(){
		int a = sc.nextInt();
		int b = sc.nextInt();
		int k = sc.nextInt();
		int total = 0;
		for (int i = a ; i <= b ; i++) {
			if (cnt[i] == k) {
				total++;
			}

		}
		System.out.println(total);
	}

}
/**
 * 5
5 15 2
2 10 1
24 42 3
1000000 1000000 1
1000000 1000000 2
Case #1: 5
Case #2: 7
Case #3: 2
Case #4: 0
Case #5: 1
 */

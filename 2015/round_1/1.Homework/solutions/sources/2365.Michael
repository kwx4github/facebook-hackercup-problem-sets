require 'pp'
require 'prime'

# returns nil if empty line
def input_line
  # if not defined, set to nil and read from stdinput
  @input_filename ||= 'homework.txt'

  if @input_filename
    @lines ||= File.read(@input_filename).each_line.map(&:chomp)
    # read from file line by line
    @lines.shift
  else
    # read from stdin
    $stdin.read
  end
end

def letter?(char)
  char =~ /[a-z]/
end

# $primes = Prime.each(10000000).to_a
$primes = nil
$primacity = nil
$max = 10000000
def populate_cache
  $primes = Prime.each($max).to_a
  $primacity = Array.new($max+1, 0)
  $primes.each do |p|
    multiples_in_range(p, 2, $max).each do |m|
      $primacity[m] += 1
    end
  end
end

def multiples_in_range(factor, lower, upper)
  multiples = []
  current = (lower.to_f / factor).ceil * factor
  while current <= upper
    multiples << current
    current += factor
  end
  multiples
end

def solve_case(a, b, k)
  # pp "b: #{b}"
  # primes_subset = primes_in_range(b)
  # pp "subset size: #{primes_subset.size}"
  # pp "subset"
  # primacity = Hash.new { |h, k| h[k] = 0 }
  # primes_subset.each do |p|
  #   multiples_in_range(p, a, b).each do |m|
  #     primacity[m] += 1
  #   end
  # end

  # pp primacity
  # pp k
  # pp $primacity
  $primacity[a..b].select { |v| v == k }.size
end

# all primes smaller than b
# def primes_in_range(b)
#   idx = $primes.find_index { |x| x >= b }
#   if idx.nil?
#     $primes
#   else
#     idx = (idx == 0) ? idx : idx - 1
#     $primes[0..idx]
#   end
# end

populate_cache
num_cases = input_line.to_i
(1..num_cases).each do |case_num|
  (a, b, k) = input_line.split(' ').map(&:to_i)
  ans = solve_case(a, b, k)
  puts "Case ##{case_num}: #{ans}"
end

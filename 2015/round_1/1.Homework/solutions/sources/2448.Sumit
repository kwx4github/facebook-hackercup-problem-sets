import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class HomeWork {

    static int A, B, k, t, tc;
    static int[] prime;
    static List<List<Integer>> primacity;
    static boolean result;
    public static void main(String[] args) {
        Scanner scan;
        
        prime = new int[10000010];
        
        for (int i=2;i<prime.length;i++) {
            if (prime[i] == 0) {
                for (int j=1; i*j < prime.length;j++) {
                    prime[i*j]++;
                }
            }
        }
       // System.out.println("here");
        primacity = new ArrayList<List<Integer>>();
        
        for (int i=0;i<30;i++) {
            primacity.add(new ArrayList<Integer>());
        }
        
        for (int i=2;i<prime.length;i++) {
            primacity.get(prime[i]).add(i);
        }
        
        //System.out.println("here");
        
        try {
            FileWriter fstream = new FileWriter("out.txt");
              BufferedWriter out = new BufferedWriter(fstream);
            scan = new Scanner(new File("input.txt"));

            tc = Integer.parseInt(scan.nextLine());
            for (int t = 0; t<tc; t++) {
                
                A = scan.nextInt();
                B = scan.nextInt();
                k = scan.nextInt();

                int start, end, total;
                start = findSmaller(A-1, k);
                end = findSmaller(B, k);
                
                if (end == -1) {
                    total = 0;
                } else {
                    total = end - start;
                }
                
                out.write("Case #"+(t+1) + ": " + total +"\n");
                out.flush();
            }
            
            out.close();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    }
    

    
    private static int findSmaller(int n, int k) {
        if ((k>=primacity.size()) || primacity.get(k).isEmpty()) {
            return -1;
        }
        List<Integer> arr = primacity.get(k);
        int result = -1;
        
        int min = 0;
        int max = arr.size() - 1;;
        int mid= 0;
        while (min <= max) {
            mid = (min + max)/2;
            if (arr.get(mid) <= n) {
                result = mid;
                min = mid + 1;
            } else {
                max = mid - 1;
            }
        }
        return result;
    }

   
}

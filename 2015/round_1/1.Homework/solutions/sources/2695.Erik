using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Round1_Homework
{
	class Program
	{
		const int Limit = 10000000;
		private static int[] Primicity = new int[Limit + 1];

		static void Main(string[] args)
		{
			var cases = Read.Int();

			PreCalculate();

			using (var s = new StreamWriter(@"c:\users\krox\Downloads\HackerCup\Homework.out", false))
			{
				for (var t = 0; t < cases; t++)
				{
					var answer = "Case #" + (t + 1) + ": " + Solve() + "\n";
					Console.Write(answer);
					s.Write(answer);
				}
			}

			Console.ReadLine();
		}

		private static void PreCalculate()
		{
			for(int i=2; i <= Limit; i++)
			{
				if (Primicity[i] > 0)
					continue;

				for(int j=i; j <= Limit; j+=i)
				{
					Primicity[j] += 1;
				}
			}
		}

		private static string Solve()
		{
			var A = Read.Int();
			var B = Read.Int();
			var K = Read.Int();

			return Primicity
				.Skip(A)
				.Take(B - A + 1)
				.Where(t => t == K)
				.Count()
				.ToString();
		}
	}

	public static class Read
	{
		private static string[] input = ReadAllText().Split(new[] { ' ', '\r', '\n', '\t' }, StringSplitOptions.RemoveEmptyEntries);

		private static int indexer = 0;

		public static int Int()
		{
			return int.Parse(input[indexer++]);
		}

		public static int[] Ints(int c)
		{
			return Enumerable.Range(0, c).Select(t => Int()).ToArray();
		}

		public static long Long()
		{
			return long.Parse(input[indexer++]);
		}

		public static string String()
		{
			return input[indexer++];
		}

		private static string ReadAllText()
		{
			return File.ReadAllText(@"c:\users\krox\Downloads\HackerCup\Homework.in");
		}
	}
}

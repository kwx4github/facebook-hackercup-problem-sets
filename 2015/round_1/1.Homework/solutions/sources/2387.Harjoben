import java.io.*;
import java.util.*;

public class Homework
{

  public static List<Integer> primes = new ArrayList<Integer>();
  public static int[] ks;

  public static void main(String[] args)
  {
    try
    {
      runEratosthenesSieve(10000000);

      BufferedReader reader = new BufferedReader(new FileReader("homework.txt"));

      int numCases = Integer.parseInt(reader.readLine());

      for(int i = 1; i <= numCases; i++)
      {
        String[] line = reader.readLine().split(" ");
        int A = Integer.parseInt(line[0]);
        int B = Integer.parseInt(line[1]);
        int K = Integer.parseInt(line[2]);
        int ctr = 0;

        for(int j = A; j <= B; j++)
        {
          //Set results = primeFactors(j, K);
          //if(results.size() == K)
            //ctr++;
          //System.out.println("ks of " + j + " is " + ks[j]);
          if(ks[j] == K)
          {
            ctr++;
          }

        }

        System.out.println("Case #" + i + ": " + ctr);
      }
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }

  public static Set primeFactors(int number, int k)
  {
    Set factors = new HashSet<Integer>();
    for(int i: primes)
    {
      if(i > number)
        break;

      //System.out.println("Caclutaing prime factors for " + number + "...");
      if(number%i == 0)
      {
        factors.add(i);

      }

      if(factors.size() > k)
        break;
    }

    return factors;
  }
	

  /*
  public static Set primeFactors(int number) 
	{
    	int n = number;
    	Set factors = new HashSet<Integer>();
    	for (int i = 2; i <= n/i; i++) 
    	{
      		while (n % i == 0) 
      		{
        		factors.add(i);
        		n /= i;
      		}
    	}
    	return factors;
  }*/

  public static void runEratosthenesSieve(int upperBound) 
  {
      int upperBoundSquareRoot = (int) Math.sqrt(upperBound);
      boolean[] isComposite = new boolean[upperBound + 1];
      ks = new int[upperBound + 1];
      for (int m = 2; m <= upperBoundSquareRoot; m++) 
      {
            if (!isComposite[m]) 
            {
                  //System.out.print(m + " ");
                  primes.add(m);
                  //ks[m] = 1;
                  for (int k = m * m; k <= upperBound; k += m)
                  {
                        isComposite[k] = true;
                        //ks[m]++;
                  }
            }
            
      }
      for (int m = upperBoundSquareRoot; m <= upperBound; m++)
      {
            if (!isComposite[m])
            {
                  //System.out.print(m + " ");
              primes.add(m);
              //ks[m] = 1;
            }
            
      }

      for(int j = 2; j <= 10000000; j++)
      {
        ks[j] = 0;
      }
      for(int i: primes)
      {
        ks[i] = 1;
        for(int j = i+i; j <= 10000000 && j > 0; j += i)
        {
          
          ks[j]++;
          //System.out.println("For i = " + i + "ks of " + j + " is " + ks[j]);
        }
      }

      //System.out.println("total primes are " + primes.size());
      //System.out.println("maximum prime is " + primes.get(primes.size() - 1));
  }


}
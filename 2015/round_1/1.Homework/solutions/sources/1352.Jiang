#include <iostream>
#include <sstream>
#include <iomanip>
#include <iosfwd>
#include <algorithm>
#include <iterator>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <limits>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
using namespace std;

#define MP(a,b) make_pair((a),(b))
#define FOR(i,n) for(int i = 0;i <(int)(n); i++)
#define REP(i,n,m) for(int i =(int)(n);i<(int)(m);i++)
#define MF(a,b) memset((a), (b), sizeof((a)))
typedef pair<int,int> ipair;
typedef pair<double,double> dpair;
typedef long long int64;


const int INF = numeric_limits<int>::max();
const int MAX_N = 10000001;
bool isPrime[MAX_N];
vector<int> primes;
int primacity[MAX_N];
int factors[MAX_N];
map<int, vector<int> >kSets;

void init(){
    MF(primacity, 0);
    FOR(i, MAX_N)factors[i]=i;
    
    MF(isPrime, true);
    isPrime[0]=isPrime[1]=false;
    primes.clear();
    
    REP(i, 2, MAX_N)if(isPrime[i]){
        primes.push_back(i);
        primacity[i]=1;
        int t=2*i;
        while (t<MAX_N) {
            isPrime[t]=false;
            while (factors[t]%i==0) {
                factors[t]/=i;
            }
            primacity[t]++;
            t+=i;
        }
    }
    REP(i, 2, MAX_N){
        kSets[primacity[i]].push_back(i);
    }
}


int main(int argc, const char * argv[])
{
#ifndef ONLINE_JUDGE
    freopen("//Users//lebinjiang//Project//input.txt", "r", stdin);
    freopen("//Users//lebinjiang//Project//output.txt", "w", stdout);
#endif
    std::ios::sync_with_stdio(false);
    init();
    int T;
    cin>>T;
    int a,b,k;
    FOR(t, T){
        size_t diff;
        cin>>a>>b>>k;
        auto iter = kSets.find(k);
        if (iter == kSets.end()) {
            diff = 0;
        }else{
            vector<int>& vec = iter->second;
            auto iterA = lower_bound(vec.begin(), vec.end(), a);
            auto iterB = upper_bound(vec.begin(), vec.end(), b);
            
            diff = (iterB-iterA);
        }
        cout<<"Case #"<<t+1<<": "<<diff<<"\n";
    }
    
    return 0;
}


#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

//#pragma comment(linker, "/STACK:167177216")
#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 1e7 + 777;

int a, b, k;

inline bool read()
{
	return (cin >> a >> b >> k);
}

int cnt[N];

inline void precalc()
{
	for(int i = 2; i < N; i++)
	{
		int val = i;
		int root = int(sqrt(val + 1.0));
		int res = 0;
		for(int j = 2; j <= root && val > 1; j++)
		{
			if(val % j == 0)
			{
				res++;
				while(val % j == 0)
					val /= j;
			}
		}

		if(val > 1)
			res++;
		cnt[i] = res;
	}

	return;
}

inline void solve()
{
	int ans = 0;
	for(int i = a; i <= b; i++)
	{
		if(cnt[i] == k)
		{
			ans++;
		}
	}

	cout << ans << endl;
	return;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

	precalc();
	for(int i = 2; i <= 10; i++)
		cerr << i << ' ' << cnt[i] << endl;
	cerr << cnt[550] << endl;

	int T;
	cin >> T;

	forn(tt, T)
	{
		cerr << "Test #" << tt + 1 << " processing" << endl;
		int curT = clock();
		assert(read());
		//gen();
		cout << "Case #" << tt + 1 << ": ";
		solve();
		cerr << "Test #" << tt + 1 << " processed with TIME == " << clock() - curT << " ms" << endl;
	}

    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}
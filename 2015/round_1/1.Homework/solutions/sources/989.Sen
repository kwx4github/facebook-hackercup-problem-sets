#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <algorithm>
#include <functional>
#include <cmath>
#include <cstdint>
#include <vector>
#include <map>
#include <list>
#include <bitset>

using namespace std;

#define N 10000100
int k[N];

int primacity(uint64_t n, vector<int> &v)
{
    int r = 0;
    for (int i = 0; n != 1 && i < v.size(); i++)
    {
        if (v[i] * v[i] > n)
            return r + 1;
        if (n % v[i] == 0)
        {
            do
                n /= v[i];
            while (n % v[i] == 0);
            r++;
        }
    }
    return r;
}

int main(int argc, char const *argv[])
{
    if (argc != 2)
    {
        return 1;
    }
    char name[256];
    strcpy(name, argv[1]);

    ifstream fin(name);
    strcat(name, ".out");
    ofstream fout(name);

    if (!fin.is_open() || !fout.is_open())
    {
        return 1;
    }

    int t, t1 = 0;

    fin >> t;


    // Sieve of Eratosthenes
    bitset<N/2> bs;   // 0 is prime, 1 is composite
 
    for (int i = 1; i < sqrt(N)/2; ++i)    // i < sqrt(N)/2
    {
        if (!bs.test(i))            // if 2 * i + 1 is prime
        {
            // since we only set "prime" * (2i+1)
            // have to iterate from back to front
            // to set numbers like 27 and 225
            for (int j = (N / (2*i+1) - 1) / 2; j >= i; --j)
            {
                if (!bs.test(j))    // if 2 * j + 1 is prime
                {
                    bs.set((2*j + 1)*i + j);
                }
            }
        }
    }
    vector<int> v = {2};    // list of prime
    for (int i = 3; i < N; i += 2)
    {
        if (!bs.test(i/2))
        {
            v.push_back(i);
        }
    }

    for (int i = 2; i < N; i++)
    {
        k[i] = primacity(i, v);
    }

    while (t1++ < t)
    {
        uint64_t a, b, kk, r = 0;
        fin >> a >> b >> kk;
        
        for (int i = a; i <= b; ++i)
        {
            if (k[i] == kk)
                r++;
        }

        fout << "Case #" << t1 << ": " << r << endl;
    }

    return 0;
}
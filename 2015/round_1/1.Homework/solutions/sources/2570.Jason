#include <iostream>
#include <cstring>
#include <vector>

using namespace std;
typedef long long ll;

const int N = 10000001;
bool isprime[N];
vector<int> primes;

void sieve() {
	memset(isprime, true, sizeof isprime);
	isprime[0] = false;
	isprime[1] = false;
	ll p = 2;
	while (p*p < N) {
		for (ll q = p*p; q < N; q += p) {
			isprime[q] = false;
		}
		p++;
		while (p < N && !isprime[p]) p++;
	}
	primes.clear();
	for (int i = 0; i < N; i++) {
		if (isprime[i]) primes.push_back(i);
	}

	//for (int i = 0; i < 10; i++) cerr << primes[i] << endl;
	//cerr << primes.size() << endl;
}

int primacity[N];
void compute() {
	memset(primacity, 0, sizeof primacity);
	for (int i = 0; i < primes.size(); i++) {
		int p = primes[i];
		for (int q = p; q < N; q += p) {
			primacity[q]++;
		}
	}

	//for (int i = 2; i < 100; i++) cerr << primacity[i] << ' '; cerr << endl;
}

int main() {
	sieve();
	compute();

	int nc; cin >> nc; 
	for (int cs = 1; cs <= nc; cs++) {
		int a, b, k; cin >> a >> b >> k;

		int ans = 0;
		for (int i = a; i <= b; i++) {
			if (primacity[i] == k) ans++;
		}
		cout << "Case #" << cs << ": " << ans << endl;
	}
}



function create_primacity_array(size)
    primacity = zeros(Int32, size)
    for i = 2:size
        if primacity[i] == 0
            for j = i:i:size
                primacity[j] += 1
            end
        end
    end
    primacity
end


function numbers_by_primacity(N)
    primacity = create_primacity_array(int(N))
    primacity_numbers = Array(Array{Int32}, int(2*log(N)))
    for i = 1:(size(primacity_numbers)[1])
        primacity_numbers[i] = Array(Int32, 0)
    end
    for i = 2:N
        push!(primacity_numbers[primacity[i]], i)
    end
    primacity_numbers
end



function primacity_k_in_range(primacity_array, A, B, K)
    length_array = size(primacity_array)[1]
    if K > length_array
        0
    else
        numbersK = primacity_array[K]
        last(searchsorted(numbersK, B)) - first(searchsorted(numbersK, A)) + 1
    end
end



function main()
    T = int(readline())
    primacity_numbers = numbers_by_primacity(1e7)
    for i = 1:T
        A, B, K = map(int, split(readline()))
        answer = primacity_k_in_range(primacity_numbers, A, B, K)
        println("Case #", i, ": ", answer)
    end
end


main()

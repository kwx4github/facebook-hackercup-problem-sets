//by david942j
#include <cstdio>
#include <cstring>
#include <set>
#include <map>
#include <ctime>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <cassert>
#include <queue>
#include <stack>
#include <cstdlib>
#define openfile(s) freopen(s".in","r",stdin);freopen(s".out","w",stdout)
#define mpr std::make_pair
#define lg(x) (31-__builtin_clz(x))
#define __count __builtin_popcount
#define X first
#define Y second
#define mst(x) memset(x,0,sizeof(x))
#define mst1(x) memset(x,-1,sizeof(x))
#define ALL(c) (c).begin(),(c).end()
#define FOR(i,n) for(int i=0;i<n;i++)
#define FOR1(i,n) for(int i=1;i<=n;i++)
#define FORit(it,c) for(__typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define pb push_back
#define RID(x) int x;RI(x)
using namespace std;
typedef long long LL;
typedef double LD;
typedef vector<int> VI;
typedef std::pair<int,int> PII;
template<class T>inline void maz(T &a,T b){if(a<b)a=b;}
template<class T>inline void miz(T &a,T b){if(a>b)a=b;}
template<class T>inline T abs(T a){return a>0?a:-a;}
inline int max(int a,int  b){return a>b?a:b;}
void RI() {}
template<typename... T>
void RI( int& head, T&... tail ) {
    scanf("%d",&head);
    RI(tail...);
}
const int N=10000001,INF=1<<26;
const LD EPS=1e-9;
int p[4000000]={2},m=1;
bool a[N];
void makeP() {
    for(int i=3;i<N;i+=2) if(!a[i]){
        p[m++]=i;
        if(i<10000)for(int j=i*i;j<N;j+=i)
            a[j]=true;
    }
}
VI P[100];
int fac(int n) {
    int ans=0;
    for(int i=0;p[i]*p[i]<=n && i<m;i++)
        if(n%p[i]==0){
            ans++;
            while(n%p[i]==0)n/=p[i];
        }
    if(n!=1)ans++;
    return ans;
}
void make() {
    for(int i=2;i<N;i++) {
        P[fac(i)].pb(i);
    }
}
int main() {
    makeP();
    fprintf(stderr,"%d\n",m);
    make();
    int T;scanf("%d",&T);
    int w=1;
    while(T--) {
        int a,b,k;
        scanf("%d%d%d",&a,&b,&k);
        if(k>50)k=60;
        int ans=lower_bound(ALL(P[k]),b+1)-lower_bound(ALL(P[k]),a);
        printf("Case #%d: %d\n",w++,ans);
    }
}
/*
6 10 12 14 15

*/
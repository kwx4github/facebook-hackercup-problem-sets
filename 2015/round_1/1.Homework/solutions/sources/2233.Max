package round1.homework

import java.io.PrintWriter

import scala.annotation.tailrec
import scala.io.Source

object Homework {
  val primes = (2 to 10000).filterNot { p =>
    (2 to math.sqrt(p + 1).toInt).exists(p % _ == 0)
  }

  def main(args: Array[String]) {
    val input = Source.fromFile("src/" + "round1/homework/homework.txt").getLines()
    val output = new PrintWriter("src/round1/homework/output.txt")
    val cache = Vector(0, 0) ++ (for (i <- 2 to 10000000) yield primeDividers(i))
    val t = input.next().toInt
    for (tc <- 1 to t) {
      val Array(a, b, k) = input.next().split("\\s+").map(_.toInt)
      val ans = (a to b).count(i => cache(i) == k)
      output.println(s"Case #$tc: $ans")
    }
    output.close()
  }

  def primeDividers(n: Int): Int = {
    val pr = primes.takeWhile(p => p * p <= n).toList
    primeDividers(n, Set(), pr)
  }

  @tailrec
  def primeDividers(n: Int, r: Set[Int], primes: List[Int]): Int = {
    if (primes.isEmpty) {
      r.size + (if (n > 1) 1 else 0)
    } else if (n % primes.head == 0) {
      primeDividers(n / primes.head, r + primes.head, primes)
    } else {
      primeDividers(n, r, primes.tail)
    }
  }
}

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#include <vector>
#include <utility>
#include <set>
#include <map>
#include <queue>
#include <functional>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

template<typename T>inline string to_str(const T& v) {
    ostringstream os; os << v; return os.str();
}
template<typename T>inline T to_obj(const string& v) {
    istringstream is(v); T r; is>>r; return r;
}
template<class T>inline int cMin(T& a, T b) {return b<a ? a=b,1 : 0;}
template<class T>inline int cMax(T& a, T b) {return a<b ? a=b,1 : 0;}

#define CLR(A,v) memset(A, v, sizeof(A))
#define MP(a,b)  make_pair(a, b)
#define F0(i, n) for(int i=0; i<(n); ++i)
#define F1(i, n) for(int i=1; i<=(n); ++i)

const int NN = 10000000;
const int PPN = 10000;
int P[PPN] = {2, 3}, PN = 2;
char C[NN + 8] = "";

int init(int N) {
    C[1] = 0;
    C[2] = C[3] = 1;
    for (int iv=4; iv<N; ++iv) {
        int val = iv;
        int k = 0, v;
        for(; P[k] * P[k] <= val; ++k) {
            if (val % P[k] == 0) {
                do {
                    val /= P[k];
                }while(val % P[k] == 0);
                break;
            }
        }
        if (val == iv) {
            if (val < PPN) P[PN++] = val;
            C[val] = 1;
        } else {
            C[iv] = C[val] + 1;
        }
    }
}

int main(int argc, char *argv[]) {
    std::fill(C, C+NN, '\0');
    init(NN+1);
    int T;
    scanf("%d", &T);
    F1(iT, T) {
        int a, b, k;
        scanf("%d%d%d", &a, &b, &k);
        int ans = 0;
        for(int i=a; i<=b; ++i) if (C[i] == k) ++ans;
        printf("Case #%d: %d\n", iT, ans);
    }
    return 0;
}

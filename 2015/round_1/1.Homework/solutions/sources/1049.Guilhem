import sys
from math import pow, sqrt

if len(sys.argv) < 2:
  print("Missing input file path")
  exit()

N = 10000000
primes = []
for i in range(2, int(sqrt(N)) + 1):
  isPrime = True
  for j in range(2, int(sqrt(i)) + 1):
    if i % j == 0:
      isPrime = False
      break
  if isPrime:
    primes.append(i)

def computePrimality(n):
  #print("primality({}, {}, {})".format(n, acc, k))

  if n == 1:
    return 0

  for i in primes:
    a = n
    while a % i == 0:
      a /= i
    if a < n:
      return 1 + primality[int(a)]
   
  return 1

primality = [0 for x in range(N + 1)]
for p in primes:
  a = p
  while a < N:
    a *= p
for x in range(2, N + 1):
  primality[x] = computePrimality(x)
  if x % 10000 == 0:
    print(x)

input = open(sys.argv[1], "r")
output = open("output", "w+")

caseNum = 0
index = 1

lines = input.read().split("\n")
input.close()

n = int(lines[0])

for caseNumber in range(1, n+1):
  a, b, k = [int(x) for x in lines[index].split(" ")]
  result = 0
  if pow(2, k) < b:
    for n in range(a, b + 1):
      if primality[n] == k:
        result += 1
    
  output.write("Case #{}: {}\n".format(caseNumber, result))
  
  index += 1
  
output.close()
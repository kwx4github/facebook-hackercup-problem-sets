package fhc;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class ProblemA {

    private static final int N = 10_000_000;
    private static int[] compos = new int[N + 1];

    private static void init() {
        for (int i = 2; i < compos.length; i++) {
            if (compos[i] != 0) {
                continue;
            }
            for (int t = 2; t <= N / i; t++) {
                compos[t * i]++;
            }
        }
    }

    public static void main(String[] args) throws FileNotFoundException {
        InputReader in = new InputReader(new FileInputStream("c:\\Users\\skhomenko\\Downloads\\homework.txt"));
        int T = in.nextInt();
        init();
        for (int t = 1; t <= T; t++) {
            int A = in.nextInt();
            int B = in.nextInt();
            int K = in.nextInt();
            int res = solve(A, B, K);
            System.out.println("Case #" + t + ": " + res);
        }
    }

    private static int solve(int a, int b, int k) {
        int res = solve(b, k) - solve(a - 1, k);
        return res;
    }

    private static int solve(int b, int k) {
        int res = 0;
        for (int i = 2; i <= b; i++) {
            if (compos[i] == k) {
                res++;
            }
        }
        return res++;
    }

    public static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 65535);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}

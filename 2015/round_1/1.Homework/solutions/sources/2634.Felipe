#include <bitset> 
#include <cmath>
#include <cstdio>
#include <map>
#include <vector>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef map<int, int> mii;

ll _sieve_size;
bitset<10000010> bs;   // 10^7 should be enough for most cases
vi primes;   // compact list of primes in form of vector<int>

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
  _sieve_size = upperbound + 1;                   // add 1 to include upperbound
  bs.set();                                                 // set all bits to 1
  bs[0] = bs[1] = 0;                                     // except index 0 and 1
  for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
    // cross out multiples of i starting from i * i!
    for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
    primes.push_back((int)i);  // also add this vector containing list of primes
} }                                           // call this method in main method

ll numDiffPF(ll N) {
  ll PF_idx = 0, PF = primes[PF_idx], ans = 0;
  while (N != 1 && (PF * PF <= N)) {
    if (N % PF == 0) ans++;                           // count this pf only once
    while (N % PF == 0) N /= PF;
    PF = primes[++PF_idx];
  }
  if (N != 1) ans++;
  return ans;
}

long long vet[10001000];

int main() {
	long long a, b, k, t, cases = 0;
	sieve(10000000); 

	for(long long i = 2; i < 10000100; i++){
		vet[i] = numDiffPF(i);
	}

	scanf("%lld", &t);

	while(t--){
		cases++;

		scanf("%lld %lld %lld", &a, &b, &k);

		long long cont = 0;

		for(long long i = a; i <= b; i++){
			if(vet[i] == k)
				cont++;
		}

		printf("Case #%lld: %lld\n", cases, cont);
	}

  	return 0;
}

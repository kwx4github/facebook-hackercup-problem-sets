package hackercup.round1.a

import java.io.BufferedReader
import java.util.StringTokenizer
import java.io.FileReader
import java.io.PrintWriter
import java.util.ArrayDeque
import java.util.Queue

val MAX_N = 10000000
val primacity = IntArray(MAX_N + 1)

fun main(args: Array<String>) {
    for (i in 2..MAX_N) {
        if (primacity[i] == 0) {
            IntProgression(i, MAX_N, i).forEach { j -> primacity[j]++ }
        }
    }
    solveAll(solver = ::solveCase)
} 

fun solveCase(inp: DataReader): String {
    val (a,b) = Pair(inp.nextInt(), inp.nextInt())
    val k = inp.nextInt()
    return (a..b).count { primacity[it] == k }.toString()
}

class DataReader(private val reader: BufferedReader) {
    var st : StringTokenizer? = null
    class object {
        fun createFromFile(name: String) = DataReader(BufferedReader(FileReader(name)))
    }

    fun next() : String? {
        while (st == null || !st!!.hasMoreTokens()) {
            val s = reader.readLine()
            if (s == null)
                return null
            st = StringTokenizer(s)
        }

        return st?.nextToken()
    }

    fun nextToken() : String {
        return next()!!
    }

    fun nextInt() = nextToken().toInt()
    fun nextLong() = nextToken().toLong()
    fun readIntArray(n: Int) : IntArray {
        val result = IntArray(n)
        result.indices.forEach { i -> result[i] = nextInt() }
        return result
    }

    fun nextIntTriple() = Triple(nextInt(), nextInt(), nextInt())
}

fun solveAll(reader: DataReader, writer: PrintWriter, solver: (DataReader) -> String) {
    val testsCount = reader.nextInt()

    for (test in 1..testsCount) {
        writer.println("Case #${test}: ${solver(reader)}")
    }

    writer.close()
}

fun solveAll(input: String = "input.txt", output: String = "output.txt", solver: (DataReader) -> String) {
    solveAll(
            DataReader.createFromFile(input),
            PrintWriter(output),
            solver
    )
}



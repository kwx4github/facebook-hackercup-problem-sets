try:
   import cPickle as pickle
except:
   import pickle


MAX = int(1e7+2)
# test
#MAX = int(10e6+2)

primes = []
primacity = [0 for i in range(MAX)]


def precompute():
    # fills up primacity -- use Sieve
    for p in range(2, MAX):
        if primacity[p] is 0:
            # prime, cross out multiples
            primes.append(p)
            m = p*1
            while m < MAX:
                primacity[m] += 1
                m += p
                
def solve(A, B, K):
    # returns the number of integers in [A,B] with primacity K
    counter = 0
    for i in range(A, B+1):
        if primacity[i] is K:
            counter += 1
    return counter


try:
    f = open('precomputed.pickle')
    primacity = pickle.load(f)
    f.close()
except:
    precompute()
    try:
        f = open('precomputed.pickle', 'w')
        pickle.dump(primacity, f)
        f.close
    except:
        pass
    
T = int(raw_input())
for t in range(1, T+1):
    A, B, K = map(int, raw_input().split())
    print 'Case #{0}: {1}'.format(t, solve(A, B, K) )

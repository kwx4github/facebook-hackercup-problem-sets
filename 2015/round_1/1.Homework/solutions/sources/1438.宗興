#include <bits/stdc++.h>
using namespace std;

#define MAXN 10000005

int A, B, K, ans;
bool p[MAXN];
vector<int> pp;

void get_prime() {
	memset(p, 0, sizeof(p));
	p[0] = p[1] = false;
	for(int i = 2; i < MAXN; i++) {
		if(p[i]) {
			p[i] = false;
			continue;
		}
		pp.push_back(i);
		for(int j = 1; i * j < MAXN; j++) {
			p[i * j] = true;
		}
	}
}

void dfs(long long num, int idx, int k) {
	if (k == 0) {
		if (num >= A && num <= B)  ans++;
		return;
	} else if(k == 1) {
		long long tmp = num;
		for(int i = idx; i < pp.size(); i++) {
			tmp = num;
			tmp *= pp[i];
			if(tmp > B)  break;
			while(tmp < A)  tmp *= pp[i];
			while(tmp <= B) {
				//printf("tmp %lld\n", tmp);
				ans++;
				tmp *= pp[i];
			}
		}
		return;
	}
	if(idx == pp.size())  return;
	bool ok = true;
	long long tmp = num;
	for(int i = 0; i < k; i++) {
		tmp *= pp[idx];
		if(tmp > B) {
			ok = false;
			break;
		}
	}
	if(!ok)  return;
	dfs(num, idx + 1, k);
	for(int i = 0; ; i++) {
		num *= pp[idx];
		if(num > B)  break;
		dfs(num, idx + 1, k - 1);
	}
}

int main() {
	get_prime();	
	int T, ks = 1; scanf("%d", &T); while(T--) {
		printf("Case #%d: ", ks++);
		scanf("%d %d %d", &A, &B, &K);
		ans = 0;
		dfs(1, 0, K);			
		printf("%d\n", ans);
	}
	return 0;
}

#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
#include<map>

using namespace std;

int main(void){
	ios::sync_with_stdio(0);
	vector<int> primes;
	primes.push_back(2);
	for(int i=3; i<=10000000; i += 2){
		bool flag = true;
		for(int j=0; j<primes.size() && primes[j] <= sqrt(i)+1; j++)
			if (i%primes[j] == 0)
				flag = false;
		if (flag)
			primes.push_back(i);
	}

	map<int, vector<int> > m;
	for(int i=2; i<=10000000; i++){
		if (binary_search(primes.begin(), primes.end(), i)){
			m[1].push_back(i);
			continue;
		}
		int primacity = 0;
		for(int j=0; j<primes.size() && primes[j] <= sqrt(i)+1; j++){
			if (i%primes[j] == 0){
				int aux = i/primes[j];
				if (aux != primes[j] && binary_search(primes.begin(), primes.end(), aux))
					primacity =+ 2;
				else
					primacity++;
			}
		}
		m[primacity].push_back(i);
	}

	int t;
	cin >> t;
	for(int i=1; i<=t; i++){
		int a, b, k;
		cin >> a >> b >> k;
		int count = 0;
		if (m.find(k) == m.end()){
			cout << "Case #" << i << ": " << count << "\n";
			continue;
		}
		for(int j=0; j <= m[k].size() && m[k][j] <= b; j++)
			if (m[k][j] >= a)
				count++;
		cout << "Case #" << i << ": " << count << "\n";
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

bool is_prime(long long n) {
  if (n <= 3)
    return n >= 2;
  if ((n % 2 == 0) || (n % 3 == 0))
    return false;
  for (int i = 5; i < sqrt(n)+1; i += 6) {
    if ((n % i == 0) || (n % (i + 2) == 0))
      return false;
  }
  return true;
}

int main() {
  int T; cin>>T;
  for (int t = 1; t <= T; t++) {
    int A; cin>>A;
    int B; cin>>B;
    int K; cin>>K;

    int ans = 0;

    // how many integers in the inclusive range [A,B] have primacity of exactly K?

    vector<int> primes;
    for (int i = 2; i <= B; i++) if (is_prime(i)) primes.push_back(i);

    vector<int> primacity(B-A+1, 0);

    for (auto p : primes) {
      int pa = 0;
      while (pa < A) pa += p;
      while (pa <= B) {
        primacity[pa-A]++;
        pa += p;
      }
    }
    for (auto e : primacity) if (e == K) ans++;

    cout << "Case #" << t << ": " << ans << endl;
  }
  return 0;
}

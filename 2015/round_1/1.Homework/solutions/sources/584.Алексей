#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <stack>
#include <queue>
#include <deque>
#include <complex>

using namespace std;

#define pb push_back
#define mp make_pair
#define sz(s) int((s).size())
#define all(s) (s).begin(), (s).end()
#if ( _WIN32 || __WIN32__ || _WIN64 || __WIN64__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#ifdef LOCAL42
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) 42
#endif
#define y0 yy0
#define y1 yy1
#define next _next
#define prev _prev
#define rank _rank
#define link _link
#define hash _hash
#define fs first
#define sc second

typedef long long ll;
typedef long long llong;
typedef long long int64;
typedef unsigned int uint;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned long long ullong;
typedef unsigned long long lint;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int inf = int(1e9);
const double eps = 1e-4;
const double pi = 4 * atan(double(1));
const int N = int(1e7) + 100;

int p[N], primes[N];

inline void init() {
    int sz = 0;
    for (int i = 2; i < N; ++i) {
        if (p[i] == 0) {
            p[i] = i;
            primes[sz++] = i;
        }
        for (int j = 0; j < sz && primes[j] <= p[i] && 1LL * i * primes[j] < N; ++j) {
            p[i * primes[j]] = primes[j];
        }
    }
}

inline void solve() {
    int a, b, k;
    scanf("%d %d %d", &a, &b, &k);
    int ans = 0;
    for (int i = a; i <= b; ++i) {
        int cur = i, last = -1, res = 0;
        while (cur > 1) {
            if (p[cur] != last) {
                ++res;
                last = p[cur];
            }
            cur /= p[cur];
        }
        if (res == k) {
            ++ans;
        }
    }
    printf("%d\n", ans);
}

int main() {
#ifdef LOCAL42
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    
#endif
    init();
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: ", i + 1);
        solve();
        cerr << "Case " << i << endl;
    }
    return 0;
}

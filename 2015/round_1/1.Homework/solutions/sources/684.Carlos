#include <iostream>
#include <cassert>

#include <vector>
#include <algorithm>

using namespace std;

#define MAXP 10000004
int primacity[MAXP];
void sieve() {
   for (int p = 2; p < MAXP; ++p) {
      if (primacity[p] != 0) continue;
      primacity[p] = 1;
      for (int k = p*2; k < MAXP; k += p)
         primacity[k]++;
   }
}

vector<int> V[10];
int f(int n, int k) {
   return upper_bound( V[k].begin(), V[k].end(), n ) - V[k].begin();
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   sieve();
   
   for (int n = 2; n < MAXP; ++n) {
   // assert( primacity[n] < 10 );
      V[ primacity[n] ].push_back(n);
   }

/*
   for (int j = 0; j < V[2].size() && j < 10; ++j)
      cerr << V[2][j] << ' ';
   cerr << endl;
*/

   int TC;
   cin >> TC;
   for (int tc = 1; tc <= TC; ++tc) {
      int a, b, k;
      cin >> a >> b >> k;
      int res = f(b, k) - f(a-1, k);
      cout << "Case #" << tc << ": " << res << endl;
   }

   return 0;
}

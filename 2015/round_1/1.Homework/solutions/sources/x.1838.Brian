#include <vector>
#include <algorithm>
#include <fstream>
#include <stdlib.h> 
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <sstream>
#include <map>
#include <queue>
#include <set> 
#include <deque> 
#include <bitset> 

using namespace std;

long maxnum=pow(10, 7);
bool* flags = new bool[maxnum+1];
long* primacity = new long[maxnum+1];

void crossoff(bool flags[], int prime, int flagslength){
	for(int i=prime*prime; i<flagslength; i=i+prime){
		flags[i]=false;
	}
}

int getNextPrime(bool flags[], int prime, int flagslength){
	int next=prime+1;
	while(next < flagslength && !flags[next]){
		next++;
	}
	return next;
}

int howmanyways(int j){
	if(flags[j]){
		return 1;
	}
	else{
		int count=0;
		for(int k=2; k<=sqrt(j); k++){
			if(flags[k] && j%k==0){
				while(true){
					j=j/k;
					if(j%k){
						break;
					}
				}
				count++;
			}
			if(flags[j]){
				count=count+1;
				break;
			}
		}
		return count;			
	}
}

int ans(long long a, long long b, long long k){
	if(k >= 8){
		return 0;
	}
	int count=0;
	for(int j=a; j<=b; j++){
		if(primacity[j]==k){
			count++;
		}
	}
	return count;
}

int main()
{
	flags[0]=false;
	flags[1]=false;
	int i, j, numCase;
	for(i=2; i<maxnum+1; i++){
		flags[i]=true;
	}
	int prime=2;
	while(prime <= sqrt(maxnum)){
		crossoff(flags, prime, maxnum+1);
		prime=getNextPrime(flags, prime, maxnum+1);
		if(prime >= maxnum+1){
			break;
		}
	};
	primacity[0]=0;
	primacity[1]=0;
	for(j=2; j<=maxnum; j++){
		primacity[j]=howmanyways(j);
	}
	freopen("homework.txt","r",stdin);
    freopen("homework_output.txt","w",stdout);
	long long a, b, k;
	cin>>numCase;
	for(i=0; i<numCase; i++){
		cin>>a>>b>>k;
		cout << "Case #" << (i+1) << ": "<<ans(a, b, k)<<endl;		
	}
	return 0;
}

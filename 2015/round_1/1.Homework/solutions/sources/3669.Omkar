/* homework.c 
*  Omkar H. Ramachandran
*  omkar13@iisertvm.ac.in
*  Find the primacity of numbers within a given closed interval.
*  Algorithm:
*  1. Use the Sieve of Erasthones to generate the primacity of numbers till 10^7
*     I cant think of a way to make it even faster.
*  2. Once this is done, for each test case, compare results with the generated
*     vector.
*/

#include <stdio.h>
#include <stdlib.h>

long int Size = 10000000;
long int primacity[10000000];

int getsize(FILE *);
void fillzeros(long int []);
void generate_primacity(long int []);
long int solve(FILE *);
void print(long int [],long int,long int);

int main(int argc, char ** argv){
	char *a = argv[1];
	FILE *fp,*fout;
	fout = fopen("homework_output.txt","w");
	if(!(fp = fopen(a,"r"))){
		printf("Invalid input file\n");
		exit(1);
	}
	printf("entering fillzeros\n");
	fillzeros(primacity);
	printf("left fillzeros\n");
	generate_primacity(primacity);
	printf("left primacity");
	int T = getsize(fp),i;
	printf("%d",T);
	for(i=0;i<T;i++){
		long int res = solve(fp);
		long int j;
		printf("Here!\n");
		fprintf(fout,"Case #%d: %ld\n",(i+1),res);
	}
	fclose(fout);
	fclose(fp);
	return 1;
}

int getsize(FILE *fp){
	int size;
	fseek(fp,SEEK_SET,0);
	fscanf(fp,"%d",&size);
	return size;
}

void fillzeros(long int list[]){
	long int i;
	for(i=0;i<Size;i++){
		list[i] = 0;
	}
}

void generate_primacity(long int list[]){
  long int i,j,k;
  for(i=1;i<Size;i++){
    if(list[i]==0){	
      j = i+1;
      for(k=j-1;k<Size;k+=j){
	list[k]+=1;
      }
    }
  }
}

long int solve(FILE *fp){
	long int lower,upper,prim;
	fscanf(fp,"%ld %ld %ld",&lower,&upper,&prim);
	long int flag = 0,i;
	for(i=lower;i<=upper;i++){
		if(primacity[i-1] == prim){
//			printf("%ld\n",i);
			flag++;
		}
	}
//	print(primacity,lower,upper);
//	printf("%ld",flag);
	return flag;
}

void print(long int list[],long int lower,long int upper){
	long int i;
	for(i=lower;i<upper;i++)
		printf("%ld %ld\n",i+1,primacity[i]);
}

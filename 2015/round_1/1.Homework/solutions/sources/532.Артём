#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <deque>
#include <stack>
#include <string>
#include <ctime>
#include <list>
#include <cstdlib>
#include <algorithm>
#include <fstream>
#include <cmath>
#include <queue>
#include <sstream>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define mp make_pair
#define pb push_back

#define _USE_MATH_DEFINES
#define pi M_PI
#define endl '\n'

// using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector <vector<ll> > graph;
// typedef tree <ll,
//     null_type,
//     less <ll>,
//     rb_tree_tag,
//     tree_order_statistics_node_update> oset; // order_of_key, ...
    
const int MAXN = 1000 * 1000 * 10 + 10;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    vector <int> Primacity(MAXN, 0);
    vector <bool> Prime(MAXN, 0);

    for (int i = 2; i < MAXN; i++)
    {
    	bool ok = 1;
    	for (int j = 2; j * j <= i; j++)
    	{
    		if (i % j == 0)
    		{
    			ok = 0;
    			break;
    		}
    	}
    	Prime[i] = ok;
    }

    for (int i = 2; i < MAXN; i++)
    {
    	if (Prime[i])
    	{
    		for (int j = i; j < MAXN; j += i)
    		{
    			Primacity[j]++;
    		}
    	}
    }

    int T;
    cin >> T;
    for (int q = 0; q < T; q++)
    {
    	int a, b, k;
    	cin >> a >> b >> k;
    	int ans = 0;
    	for (int i = a; i <= b; i++)
    		if (Primacity[i] == k)
    			ans++;
    	cout << "Case #" << q + 1 << ": " << ans << endl;
    }

    #ifdef HOME
        cerr << "\ntime = " << clock() / 1000 << " ms\n";
    #endif
    return 0;
}
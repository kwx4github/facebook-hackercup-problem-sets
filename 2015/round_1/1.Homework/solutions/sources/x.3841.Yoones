#include <iostream>
#include <vector>
#include <fstream>
#include <queue>
#include <algorithm>
#include <list>
#include <ctime>
#include <cstdio>
#include <stack>
#include <cstring>
#include <climits>
#include <cmath>
#include <string>
#include <functional>
#include <sstream>
#include <map>
#include <set>

#pragma comment(linker, "/STACK:100000000000000")

using namespace std;
#define     For(i,a,b)        for (int i=a; i<b; i++)
#define     Rep(i,a)          for (int i=0; i<a; i++)
#define     ALL(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     EXIST(a,b)        find(ALL(a),(b))!=(a).end()
#define     Sort(x)           sort(ALL(x))
#define     UNIQUE(v)         Sort(v); (v).resize(unique(ALL(v)) - (v).begin())
#define     MP                make_pair
#define     SF                scanf
#define     PF                printf
#define     MAXN              10000011
#define     MOD               1000000007
#define     Dbug              cout<<"";
#define     EPS               1e-8
#define     timestamp(x)      printf("Time : %.3lf s.\n", clock()*1.0/CLOCKS_PER_SEC)
typedef long long ll;
typedef pair<int,int> pii;
int n, arr[MAXN];
map<int, vector<int> > mp;
int solve(int a, int b, int k)
{
	if(mp.find(k)==mp.end()) return 0;
	int lw=lower_bound(ALL(mp[k]), a)-mp[k].begin();
	int up=upper_bound(ALL(mp[k]), b)-mp[k].begin();
	up--;
	if(lw>up) return 0;
	return up-lw+1;
}
int main(){
	//ios_base::sync_with_stdio(false);
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);
	int cas=1, tc, a, b, k;
	SF("%d", &tc);
	for(int i=2; (i*2)<MAXN; i++) if(arr[i]==0)
	{
		for(int j=i; j<MAXN; j+=i) arr[j]++;
	}
	For(i, 2, MAXN) mp[arr[i]].push_back(i);
	while (tc--)
	{
		SF("%d %d %d", &a, &b, &k);
		int ans=solve(a, b, k);
		PF("Case #%d: %d\n", cas++, ans);
	}
	return 0;
}
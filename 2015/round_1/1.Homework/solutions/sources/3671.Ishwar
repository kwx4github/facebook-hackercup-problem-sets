 
#define LOCAL
#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <numeric>
#include <cstring>
#include <climits>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>

using namespace std; 
 

typedef long long LL;
//typedef long double DB;
typedef double DB;
typedef unsigned int UINT;
typedef unsigned long long ULL;

typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<string> VS;
typedef vector<LL> VL;
typedef vector<DB> VF;
typedef set<int> SI;
typedef set<string> SS;
typedef map<int, int> MII;
typedef map<string, int> MSI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef vector<PII> VII;
typedef vector<VI> VVI;
typedef vector<VII> VVII;


//sorting q sort function 
int ascend (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
int descend (const void * a, const void * b)
{
  return ( *(int*)b - *(int*)a );
} 
 
 
 void swap (char *num,int n)
 {
 char tmp;
 tmp=num[0];
 num[0]=num[n];
 num[n]=tmp;
 }
 //printf and scanf 

int main(){
   
   int *pmlt;
    pmlt  = new int[10000001];
   int prm[500],plen=1;
   prm[0]=2;
   for(int i=3;i<=3163;i++)
   {
   	bool flag=true;
   	for(int j=0;j<plen;j++)
   		if(i%prm[j]==0)
   		{
   			flag=false;
			break;   		
   		}
   	if(flag)
   	{
   		prm[plen++]=i;
   	
   	}	
   
   }
   
   
   for(int i=2;i<10000001;i++)
   {
   	int n=i;
   	for(int j=0;prm[j]<=n &&j<plen;j++)
   	{
   		
   		bool flag=true;
   		while(! (n%prm[j]))
   		{
   			n=n/prm[j];
   			if(flag)
   			{
   				pmlt[i]++; 
   				flag=false;
   			}   			 
   		
   		}
   		
   	
   	
   	}
   	
   	if(n>3162)
   	pmlt[i]++; 
   	
 
   
   }
   
     
   
   int t;
   cin>>t;
   int j=0;
   while(t--)
   {
    int cnt=0,a,b,k;
    cin>>a>>b>>k;
    
    for(int i=a;i<=b;i++)
     if(pmlt[i]==k)
     	cnt++;
     cout<<"Case #"<<++j<<": "<<cnt<<endl;	
    
   }
}









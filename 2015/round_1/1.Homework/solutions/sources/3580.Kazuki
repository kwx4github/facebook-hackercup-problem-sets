#include <vector>
#include <map>
#include <set>
#include <queue>
#include <utility>
#include <iostream>

using namespace std;

struct Input {
	int A;
	int B;
	int K;
};

vector<Input> inputs;
vector<set<int>> numbers;
vector<bool> primes;
vector<int> primacities;

bool check(set<int>& p, int n)
{
	if (primes[n]) {
		p.insert(n);
		return true;
	}

	for (int i : numbers[n]) {
		check(p, i);
	}
	return false;
}

int main()
{
	int T;
	cin >> T;
	int max = 0;
	for (int caseNo = 1; caseNo <= T; ++caseNo) {
		Input input;
		cin >> input.A;
		cin >> input.B;
		cin >> input.K;

		if (input.B > max)
			max = input.B;

		inputs.emplace_back(input);
	}

	numbers.resize(max + 1);
	primacities.resize(max + 1);
	primes = vector<bool>(max + 1, true);
	primes[0] = false;
	primes[1] = false;
	for (int i = 2; i <= max; ++i) {
		for (int j = 2; ; ++j) {
			int n = i * j;
			if (n > max)
				break;
			if (primes[n]) {
				primes[n] = false;
				numbers[n].insert(i);
				numbers[n].insert(j);
			}
		}
	}

	int caseNo = 1;
	for (const auto& input : inputs) {
		int n = 0;
		for (int i = input.A; i <= input.B; ++i) {
			int primacity = primacities[i];
			if (primacity == 0) {
				set<int> p;
				check(p, i);
				primacity = p.size();
				primacities[i] = primacity;
			}
			if (primacity == input.K)
				++n;
		}
		printf("Case #%d: %d\n", caseNo, n);
		++caseNo;
	}
	return 0;
}


#define _CRT_SECURE_NO_DEPRECATE
#define _SECURE_SCL 0

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>
#include <complex>
#include <iomanip>

using namespace std;

#pragma comment(linker, "/STACK:200000000")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define fore(i, a, n) for(int i = (int)(a); i < (int)(n); i++)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define last(a) (int(a.size()) - 1)
#define all(a) a.begin(), a.end()

const double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const double PI = 3.1415926535897932384626433832795;

const int NMAX = 10000100;
int isp[NMAX], p[NMAX], np, l, r, k, lp[NMAX], sum[NMAX];

void read() {
  cin >> l >> r >> k;
}

void gen() {

}

int rec(int ptr, int r, int k) {
  if (k == 0)
    return 1;
  if (ptr < 0)
    return 0;
  if (p[ptr] > r)
    return rec(lp[r], r, k);
  int res = rec(ptr - 1, r, k);
  r /= p[ptr];
  while (r) {
    res += rec(ptr - 1, r, k - 1);
    r /= p[ptr];
  }
  return res;
}

int calc(int r, int k) {
  return rec(np - 1, r, k);
}

void solve() {
  int res = calc(r, k) - calc(l - 1, k);
  cout << res << endl;
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);

  memset(isp, 0, sizeof(isp));
  isp[0] = isp[1] = -1;
  int last = -1;
  forn(i, NMAX) {
    if (isp[i] != -1) {
      last = np;
      isp[i] = np;
      p[np++] = i;
      for (int j = i + i; j < NMAX; j += i)
        isp[j] = -1;
    }
    lp[i] = last;
  }
  cerr << clock() << endl;

  forn(i, NMAX - 1)
    sum[i + 1] = sum[i] + int(isp[i + 1] != -1);
  
  int tests;
  cin >> tests;
  for (int test = 1; test <= tests; test++) {
    cerr << "Solving test " << setw(2) << test << " of " << tests << ". Time = " << setw(5) << clock() << endl;
    cout << "Case #" << test << ": ";
    read();
    //gen();
    solve();
  }
  
  return 0;
}
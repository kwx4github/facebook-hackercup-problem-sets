/*
ID: espr1t
LANG: C++
TASK: Homework
KEYWORDS: Easy, Primes, Sieve
CONTEST: Facebook HackerCup 2015
*/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ctime>

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>

using namespace std;
FILE *in; FILE *out;

const int MAX = 10000100;

int divs[MAX];

void solveTest(int testCase) {
	int a, b, k;
	fscanf(in, "%d %d %d", &a, &b, &k);
	int ans = 0;
	for (int i = a; i <= b; i++)
	    if (divs[i] == k) ans++;
	fprintf(out, "Case #%d: %d\n", testCase, ans);
}

void precalc() {
    memset(divs, 0, sizeof(divs));
    for (int i = 2; i < MAX; i++) if (divs[i] == 0) {
        for (int c = i; c < MAX; c += i)
            divs[c]++;
    }
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("Homework.in", "rt"); out = fopen("Homework.out", "wt");
	
	unsigned sTime = clock();

    precalc();

	int numTests;
	fscanf(in, "%d", &numTests);
	static const int BUFF = 1048576;
	static char buff[BUFF]; fgets(buff, BUFF, in);
	
	for (int testCase = 1; testCase <= numTests; testCase++) {
		unsigned tTime = clock();
		fprintf(stderr, "Currently executing testcase %d...\n", testCase); fflush(stderr);
		solveTest(testCase);
		fprintf(stderr, "  -- execution time: %.3lfs (total time %.3lfs)\n",
            (double)(clock() - tTime) / CLOCKS_PER_SEC, (double)(clock() - sTime) / CLOCKS_PER_SEC);
        fflush(stderr);
	}
	fprintf(stderr, "Finished with all testcases!\n");
	fprintf(stderr, "Total execution time: %.3lfs\n", (double)(clock() - sTime) / CLOCKS_PER_SEC);	
	return 0;
}

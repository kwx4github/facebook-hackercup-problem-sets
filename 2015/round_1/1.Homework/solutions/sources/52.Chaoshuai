#include <cmath>
#include <cstdio>
#include <vector>
#include <climits>
#include <iostream>
#include <algorithm>
using namespace std;

const int MAXN = 11111111;

int c[MAXN];

vector<int> idx[100];

void FactorNum(int n, int c[]) { //素因子个数
  for (int i = 1; i <= n; i++)
    c[i] = 1;
  for (int i = 2; i <= n; i++) {
    if (c[i] != 1) continue;
    // for (long long j = i; j <= n; j *= i) {
      for (int k = i; k <= n; k += i) {
        c[k]++;
      }
    // }
  }
  int ma = 0;
  for (int i = 1; i <= n; ++i) {
    ma = max(ma, c[i] - 1);
  }
  for (int i = 1; i <= n; ++i) {
    idx[c[i] - 1].push_back(i);
  }
  // printf("%d\n", ma);
}

bool isprime(int n) {
  if (n < 2) return false;
  if (n == 2) return true;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

int test(int x) {
  int cnt = 0;
  for (int i = 2; i <= x; ++i) {
    if (isprime(i)) {
      if (x % i == 0) {
        cnt++;
      }
    }
  }
  return cnt;
}

int main() {
  FactorNum(MAXN - 1, c);
  // for (int i = 2; i < 10000; ++i) {
  //   // printf("%d %d %d\n", i, c[i] - 1, test(i));
  //   if (c[i] - 1 != test(i)) {
  //     printf("%d %d %d\n", i, c[i] - 1, test(i));
  //   }
  // }
  int cases;
  scanf("%d", &cases);
  getchar();
  for (int T = 0; T < cases; ++T) {
    int A, B, K;
    scanf("%d %d %d", &A, &B, &K);
    printf("Case #%d: ", T + 1);
    // if (K > 100) {
    //   printf("0\n");
    // } else {
    //   int l = lower_bound(idx[K].begin(), idx[K].end(), A) - idx[K].begin();
    //   int r = upper_bound(idx[K].begin(), idx[K].end(), B) - idx[K].begin();
    //   printf("%d\n", r - l);
    // }
  }
  return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>

using namespace std;

const int MAXN = (int)1e7+10;
int A, B, K;
bool divis[MAXN];

void precompute() {
    memset(divis, false, sizeof(divis));
    for(int i=2;i*i< MAXN;++i)
        for(int j=i*i;j<MAXN;j+=i)
            divis[j] = true;
}

int countPrimes(int x) {
    int res = 0;
    int curPrime = 2;
    while(x > 1) {
        if(x%curPrime == 0) {
            ++res;
            while(x%curPrime == 0)
                x /= curPrime;
        }

        curPrime++;
        while(divis[curPrime])
            curPrime++;
    }
    return res;
}

int main() {
    //precompute();
    ifstream cache("prime_count");
    int x, cnt;
    vector<set<int> > vs(100, set<int>());
    while(cache >> x >> cnt)
        vs[cnt].insert(x);
    cache.close();

    int tc;
    scanf("%d", &tc);
    for(int ii=1;ii<=tc;++ii) {
        scanf("%d %d %d", &A, &B, &K);

        int ans = 0;
        for(int x : vs[K])
            if(A <= x && x <= B)
                ++ans;

        /*
        for(int i=2;i<MAXN;++i)
            cout << i << " " << countPrimes(i) << "\n";
        */

        printf("Case #%d: %d\n", ii, ans);
    }
    return 0;
}

#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<queue>
#include<sstream>
#include<queue>
#include<ctype.h>
#include<cstring>


using namespace std;

#define re return
#define co continue
#define pb push_back
#define br break
#define sz size


#define pf printf
#define sf scanf

class Primacity {

vector<int> SIV;

public:

    Primacity() {
        SIV.resize(10000000+5);
    }
    void genPrimacityLists() {
        fill ( SIV.begin(), SIV.end(), 0);
        SIV[2] = 0;
        int number;
        for ( number=2; number<=10000000; number++) {
            int multiple;
            if ( SIV[number] == 0) {
                for ( multiple=number; multiple<=10000000; multiple += number)
                    SIV[multiple]++;
            }
        }
    }

    int getKPrimacityCount(int A, int B, int K) {
        int counter = 0;
        int num;
        for ( num=A; num<=B; num++)
            if ( SIV[num] == K)
                counter++;
        return counter;
    }

};


int main()
{
    freopen("homework.txt", "r", stdin);
    freopen("home_ans.txt", "w", stdout);

    int T;
    cin>>T;
    Primacity primacity;
    primacity.genPrimacityLists();
    int kase=1;
    while ( T--) {
        int A, B, K;
        cin>>A>>B>>K;
        int kPrimacityCount = primacity.getKPrimacityCount(A, B, K);
        printf("Case #%d: %d\n", kase++, kPrimacityCount);
    }
    return 0;
}

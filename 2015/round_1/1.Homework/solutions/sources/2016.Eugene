#define _CRT_SECURE_NO_WARNINGS

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include "stdio.h"
using namespace std;

const int MAX = 10000001;

int primes[MAX];
bool is_prime[MAX];
int rgans[MAX];

void solve_case(int tc)
{
	int n, m, k;
	cin >> n >> m >> k;
	int ans = 0;

	for (int i = n; i <= m; ++i)
		if (rgans[i] == k)
			ans++;

	cout << "Case #" << tc << ": ";
	cout << ans;
	cout<< endl;
}

void prepare()
{
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i < MAX; ++i) is_prime[i] = true;

	for (int i = 2; i < MAX; ++i)
		for (int j = i; j * (long long)i < MAX; ++j)
			is_prime[i*j] = false;

	int n_prime = 0;
	for (int i = 0; i < MAX; ++i)
		if (is_prime[i])
			primes[n_prime++] = i;

	for (int i = 2; i < MAX; ++i)
	{
		int ans = 0;
		int num = i;
		int i_cur_prime = 0;
		while (num > 1)
		{
			if (i_cur_prime >= n_prime)
				throw 1;

			if (is_prime[num])
			{
				ans++;
				break;
			}

			bool f = false;
			while (num % primes[i_cur_prime] == 0)
				num = num / primes[i_cur_prime], f = true;
			if (f)
				ans++;

			i_cur_prime++;
		}
		rgans[i] = ans;
	}
}


int main()
{

#ifndef __OLIMP__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	prepare();
	for (int tc = 1; tc <= T; tc++)
		solve_case(tc);

	return 0;
}
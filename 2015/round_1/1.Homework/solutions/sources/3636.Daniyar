//g++ -std=c++0x your_file.cpp -o your_program
#include<iostream>
#include<fstream>
#include<string>
#include<algorithm>
#include<math.h>
#include<vector>
#include<cstring>
#include<queue>
#include<cstdio>
#include<cstdlib>
#include<map>
#include<set>
#define fname ""
#define mp make_pair
#define F first
#define pb push_back
#define S second
#define ub upper_bound
#define lb lower_bound
#define inf 2000000000
#define INF 2000000000000000000ll
using namespace std;

vector <int> g[10];

const int maxn = 10000100;

const int N = 10000000;

int lp[maxn], cnt[maxn];

vector <int> pr;

int main()
{
	freopen (fname"homework.txt", "r", stdin);
	freopen (fname".out", "w", stdout);
	for (int i = 2; i <= N; i++)
	{
		if (!lp[i])
		{
			lp[i] = i;
			pr.pb(i);
			cnt[i] = 1;
		}
		for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * 1ll * pr[j] <= N; j++)
		{
			lp[i * pr[j]] = pr[j];
			cnt[i * pr[j]] = cnt[i];
			if (lp[i] != pr[j])
				cnt[i * pr[j]]++;
		}
		g[cnt[i]].pb(i);
	}
	int A, B, k, Q;
	cin >> Q;
	for (int Case = 1; Case <= Q; Case++)
	{
		printf("Case #%d: ", Case);
		scanf("%d%d%d", &A, &B, &k);
		if (k > 8)
			printf("0\n");
		else
		{
			int l = lower_bound(g[k].begin(), g[k].end(), A) - g[k].begin();
			int r = upper_bound(g[k].begin(), g[k].end(), B) - g[k].begin();
			printf("%d\n", r - l);
		}
	}
	return 0;
}

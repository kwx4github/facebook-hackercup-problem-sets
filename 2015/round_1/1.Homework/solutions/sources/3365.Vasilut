

#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cstring>

using namespace std;

#define DIM 10000009
#define DIM2 10200
#define pb push_back

int pr[DIM] , n;
ofstream out("face.out");
vector < int > H[DIM];

void ciur()
{
    for (int i = 2; i < DIM; i++)
			{
				if(pr[i] == 0)
				{
					// i is prime
					for (int j = i; j < DIM; j += i)
					{
						pr[j] += 1;
					}
				}
			}
}


int main()
{

    ifstream in("face.in");
    ciur();
    //preprocesam
    for( int Y = 1 ; Y <=10000000 ; Y++)
        H[pr[Y]].pb(Y);

    int T;

     in >> T;
    int nr = 0;
    for( int X , Y , K ; T ; --T  )
    {
        ++nr;
        in >> X >> Y >> K;

        int poz1 , poz2 ;

        poz1 = lower_bound(H[K].begin(),H[K].end(),X) - H[K].begin();
        poz2 = upper_bound(H[K].begin(),H[K].end(),Y) - H[K].begin();

        out << "Case #" << nr << ":" << " "  << poz2 - poz1 << '\n';

    }

    return 0;
}

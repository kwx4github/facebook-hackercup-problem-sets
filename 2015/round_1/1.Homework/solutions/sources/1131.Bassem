#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
//OVERKILL?????
#define A7A_LIMIT 1000000
using namespace std;
int primes[10000] = {0}; //OVERKILL bardo
int a7a[A7A_LIMIT] = {0};
int primesCount = 0;
bool isPrime(int n){
    if(n <= 1)
        return false;
    if(n == 2)
        return true;
    if(n % 2 == 0)
        return false;
    for(int i = 3; i <= sqrt(n); i+=2)
        if(n % i == 0)
            return false;
    return true;
}
int primeFactorsCount(int n)
{
    int ret = 0;
    int original = n;
    for(int i = 0; i < primesCount; i++){
        if(primes[i] > n)
            break;
        if(n % primes[i] == 0){
            ret++;
            while (n % primes[i] == 0) {
                n /= primes[i];
            }
        }
        if(n < A7A_LIMIT){
            if(a7a[n] != -1){
                return a7a[n] + ret;
            }
        }
    }
    ret += (n > 1);
    if(original < A7A_LIMIT)
        a7a[original] = ret;
    return ret;
}

int main () {
    memset(a7a, -1, sizeof(a7a));
    for(int i = 0; i <= sqrt(pow(10, 7)) + 1; i++)
        if(isPrime(i))
            primes[primesCount++] = i;
    FILE *fIn = fopen("in.txt", "r");
    FILE *fOut = fopen("out.txt", "w");
    int T;
    int caseCounter = 0;
    fscanf(fIn, "%d", &T);
    using namespace std;

    while (T--) {
        caseCounter++;
        int a,b,k;
        int ans = 0;
        fscanf(fIn, "%d%d%d",&a,&b,&k);
        for(int i = a; i <= b; i++)
            if(primeFactorsCount(i) == k)
                ans++;
        fprintf(fOut, "Case %d: %d\n",caseCounter, ans);
//        printf("Case %d: %d\n",caseCounter, ans);
    }
    return 0;
}





#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <ext/numeric>
#include <gmpxx.h>			// -lgmpxx -lgmp
using namespace std ;
using namespace __gnu_cxx ;
typedef mpz_class BIGNUM ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1e9+100 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

template<class T1,class T2> ostream& operator<<(ostream &s, const pair<T1,T2> &x) { s<< "(" << x.FI << "," << x.SE << ")"; return s;}
template<class T>           ostream& operator<<(ostream &s, const vector<T>   &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T>           ostream& operator<<(ostream &s, const set<T>      &t) { FOREACH(it, t) s << *it << " " ; return s ; }
template<class T1,class T2> ostream& operator<<(ostream &s, const map<T1, T2> &t) { FOREACH(it, t) s << *it << " " ; return s ; }

///////////////////////////////////////////

const int MAXN = 10000100 ;
bool isPrime[MAXN+1] ;
int factor[MAXN+1] ;

// sito Eratosthenesa dla liczb z przedzialu [0,..,n]
void sieve(int n) {
	memset(isPrime+2, true, n-1) ;
	for(int i=2 ; i<=n ; i++)
		if(isPrime[i]) {
			factor[i] = i ;
			for(LL j=(LL)i*i ; j<=n ; j+=i) {
				if(isPrime[j]) {
					isPrime[j] = false ;
					factor[j] = i ;
				}
			}
		}
}

int t[MAXN+1] ;

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0) ;
	
	sieve(MAXN) ;
	
	for(int i=2 ; i<=MAXN ; i++) {
		int p=factor[i] ;
		if(factor[i/p]==p) t[i]=t[i/p] ;
		else t[i]=t[i/p]+1 ;
	}
	
	int Tests ;
	cin >> Tests ;
	for(int test=1 ; test<=Tests ; test++) {
		//cerr << "Case #" << test << endl ;
		cout << "Case #" << test << ": " ;
		int A,B,K ;
		cin >> A >> B >> K ;
		int ret=0 ;
		for(int i=A ; i<=B ; i++)
			if(t[i]==K) ret++ ;
		cout << ret << endl ;
	}
}


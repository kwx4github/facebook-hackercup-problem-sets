import scala.collection._

object A extends App {
  
  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)
  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }
  def readLongs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toLong) }
  def readBigs(n: Int) = { val tl = tokenizeLine; Array.fill(n)(BigInt(tl.nextToken)) }

  val LIMIT = 10000003
  val prime = Array.fill(LIMIT)(true)
  prime(0) = false
  prime(1) = false
  
  Stream.from(2).takeWhile(i => i*i < LIMIT).filter(prime(_)).foreach { i =>
    (i*i until LIMIT by i).foreach(prime(_) = false)
  }
  val primes = prime.indices.filter(prime(_))
  
  val primacity = Array.fill(LIMIT)(1)
  primacity(0) = 0
  primacity(1) = 0
  
  for (i <- 2 until LIMIT) {
    if (!prime(i)) {
      var j = 0
      var done = false
      while (!done) {
        val p = primes(j)
        if (i % p == 0) {
          var d = i / p
          while (d % p == 0) d /= p
          primacity(i) = primacity(d) + 1
          done = true
        }
        j += 1
      }
    }
  }

  def solve(test: Int): Unit = {

    val Array(a, b, k) = readInts(3)
    
    val res = (a to b).count(primacity(_) == k)
    
    println(s"Case #$test: $res")
  }

  Console.setIn(new java.io.BufferedInputStream(new java.io.FileInputStream("src/A/A.in")))
  Console.setOut(new java.io.BufferedOutputStream(new java.io.FileOutputStream("src/A/A.out")))
  for (test <- 1 to readInt) {
    solve(test)
    Console.flush
  }
}

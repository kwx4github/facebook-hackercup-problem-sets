#include <algorithm>
#include <assert.h>
#include <climits>
#include <cstring>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <numeric>
#include <limits>
#include <iomanip>
using namespace std;

#define sz(a) ((int)a.size())
#define all(a) a.begin(), a.end()
#define LL long long
#define LD long double
#define vi vector<int>
#define vl vector<LL>
#define vs vector<string>
#define vb vector<bool>
#define ii pair<int, int>
#define vii vector<ii>
#define SET(v, i) (v | (1 << i))
#define TEST(v, i) (v & (1 << i))
#define TOGGLE(v, i) (v ^ (1 << i))

const int INF = 10 * 1000 * 1000 + 100;
map<int, vi> primacity;
vi primes;

void sieve() {
  vb is_prime(INF, true);
  is_prime[0] = is_prime[1] = false;
  for (LL i = 2; i < 4000; ++i) {
    if (is_prime[i]) {
      primes.push_back(i);
      for (LL j = i * i; j < INF; j += i) {
        is_prime[j] = false;
      }
    }
  }
}

int CalculatePrimacity(int v) {
  int ind = 0;
  LL p = primes[ind];
  int k = 0;
  while (p * p <= v) {
    if (v % p == 0) ++k;
    while (v % p == 0) v /= p;
    p = primes[++ind];
  }

  return v > 1 ? k + 1 : k;
}

/*int Count(int a, int b, int k) {
  if (primacity.find(k) == primacity.end())
    return 0;

  vi& pk = primacity[k];
  vi::iterator ait = std::lower_bound(all(pk), a);
  if (ait == pk.end()) return 0;
  int start = ait - pk.begin();
  int end = std::upper_bound(all(pk), b) - pk.begin();
  --end;
  if (end < start) return 0;
  return end - start + 1;
}*/

int Count(int a, int b, int k) {
  if (primacity.find(k) == primacity.end())
    return 0;

  const vi& pk = primacity[k];
  int cnt = 0;
  for (int i = 0; i < sz(pk); ++i) {
    if (pk[i] >= a && pk[i] <= b) ++cnt;
  }

  return cnt;
}


int main() {
  sieve();
  for (int i = 2; i <= 10 * 1000 * 1000; ++i) {
    primacity[CalculatePrimacity(i)].push_back(i);
  }

  int t;
  scanf("%d", &t);
  for (int test = 1; test <= t; ++test) {
    int a, b, k;
    scanf("%d %d %d", &a, &b, &k);
    printf("Case #%d: %d\n", test, Count(a, b, k));
  }
  return 0;
}

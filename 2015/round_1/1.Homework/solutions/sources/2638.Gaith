#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 10000000;

vector<int> primes;
bool mark[MAXN + 5];

void generate_primes()
{
	for (int i = 2; i <= MAXN; i++)
	{
		if (!mark[i])
		{
			primes.push_back(i);
			for (int j = i + i; j <= MAXN; j += i)
				mark[j] = true;
		}
	}
}

int primeFacts[MAXN + 5][2];
int primacity[MAXN + 5][10];

void preprocess()
{
	generate_primes();

	for (int i = 0; i < (int)primes.size(); i++)
	{
		primeFacts[primes[i]][0] = 1;
		primeFacts[primes[i]][1] = i;
	}
	for (int i = 2; i <= MAXN; i++)
	{
		if (1LL * i * primes[primeFacts[i][1]] <= MAXN)
		{
			primeFacts[i * primes[primeFacts[i][1]]][0] = primeFacts[i][0];
			primeFacts[i * primes[primeFacts[i][1]]][1] = primeFacts[i][1];
		}
		for (int j = primeFacts[i][1] + 1; j < (int)primes.size() && 1LL * i * primes[j] <= MAXN; j++)
		{
			primeFacts[i * primes[j]][0] = primeFacts[i][0] + 1;
			primeFacts[i * primes[j]][1] = j;
		}
	}
	for (int i = 2; i <= MAXN; i++)
	{
		for (int j = 1; j <= 8; j++)
		{
			primacity[i][j] = primacity[i - 1][j];
		}
		primacity[i][primeFacts[i][0]]++;
	}
}

void solve()
{
	int A, B, K;
	cin >> A >> B >> K;
	if (K <= 8)
		cout << primacity[B][K] - primacity[A - 1][K] << endl;
	else
		cout << 0 << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	
	preprocess();

	int T;
	cin >> T;
	for (int t = 1; t <= T; t++)
	{
		cout << "Case #" << t << ": ";
		solve();
	}
	return 0;
}
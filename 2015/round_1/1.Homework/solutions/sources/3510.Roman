#include <iostream>
#include <vector>
#include <deque>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

const int MAXN = 110000;

std::vector<std::pair<string, string> > r = 
{
	{ "UUU", "F" }, { "CUU", "L" }, { "AUU", "I" }, { "GUU", "V" },
	{ "UUC", "F" }, { "CUC", "L" }, { "AUC", "I" }, { "GUC", "V" },
	{ "UUA", "L" }, { "CUA", "L" }, { "AUA", "I" }, { "GUA", "V" },
	{ "UUG", "L" }, { "CUG", "L" }, { "AUG", "M" }, { "GUG", "V" },
	{ "UCU", "S" }, { "CCU", "P" }, { "ACU", "T" }, { "GCU", "A" },
	{ "UCC", "S" }, { "CCC", "P" }, { "ACC", "T" }, { "GCC", "A" },
	{ "UCA", "S" }, { "CCA", "P" }, { "ACA", "T" }, { "GCA", "A" },
	{ "UCG", "S" }, { "CCG", "P" }, { "ACG", "T" }, { "GCG", "A" },
	{ "UAU", "Y" }, { "CAU", "H" }, { "AAU", "N" }, { "GAU", "D" },
	{ "UAC", "Y" }, { "CAC", "H" }, { "AAC", "N" }, { "GAC", "D" },
	{ "UAA", "Stop" }, { "CAA", "Q" }, { "AAA", "K" }, { "GAA", "E" },
	{ "UAG", "Stop" }, { "CAG", "Q" }, { "AAG", "K" }, { "GAG", "E" },
	{ "UGU", "C" }, { "CGU", "R" }, { "AGU", "S" }, { "GGU", "G" },
	{ "UGC", "C" }, { "CGC", "R" }, { "AGC", "S" }, { "GGC", "G" },
	{ "UGA", "Stop" }, { "CGA", "R" }, { "AGA", "R" }, { "GGA", "G" },
	{ "UGG", "W" }, { "CGG", "R" }, { "AGG", "R" }, { "GGG", "G" }
};

map<string, string> ReadFastaData(const string& file)
{
	ifstream in(file);

	string tmp;
	string name;

	map<string, string> m;
	while (getline(in, tmp))
	{
		if (tmp[0] == '>')
		{
			name = tmp.substr(1, tmp.size() - 1);
			m[name] = "";
		}
		else
			m[name] += tmp;
	}

	return m;
}

string rev_comp(const string s)
{
	string r = s;
	reverse(r.begin(), r.end());
	for (size_t index = 0; index != r.size(); ++index)
	{
		switch (r[index])
		{
		case 'A':
			r[index] = 'T';
			break;
		case 'T':
			r[index] = 'A';
			break;
		case 'G':
			r[index] = 'C';
			break;
		case 'C':
			r[index] = 'G';
			break;
		}
	}
	return r;
}

bool is_edge(const string& v1, const string& v2)
{
	string s = v1.substr(v1.length() - 3, 3);
	string t = v2.substr(0, 3);
	return (v1.length() > 3) && (v2.length() > 3) && (s == t) && (v1 != v2);
}

long long elder[200], young[200], dying[200];

int main() {
	ios::sync_with_stdio(false);
	cout.precision(10);
	cout << fixed;
#ifdef LOCAL_DEFINE
	freopen("input.txt", "rt", stdin);
#endif

	freopen("output.txt", "wt", stdout);

	int t;

	cin >> t;
	long long maxN = 0;
	vector<long long> a(t), b(t), k(t), r(t, 0);
	for (int i = 0; i != t; ++i)
	{
		cin >> a[i] >> b[i] >> k[i];
		if (b[i] > maxN)
		{
			maxN = b[i];
		}
	}
	vector<long long> count(maxN + 10, 0);
	vector<char> prime(maxN + 10, true);
	prime[0] = prime[1] = false;
	for (int i = 2; i <= maxN + 1; ++i)
	{
		if (prime[i])
		{
			count[i]++;
			if (i * 1ll * 2 <= maxN)
			{
				for (int j = i*2; j <= maxN; j += i)
				{
					prime[j] = false;
					count[j]++;
				}
			}
		}
	}


	for (int i = 2; i <= maxN; ++i)
	{
		for (int j = 0; j < t; ++j)
		{
			if (i >= a[j] && i <= b[j] && count[i] == k[j])
			{
				r[j]++;
			}
		}
	}

	for (int i = 0; i != t; ++i)
	{
		cout << "Case #" << i + 1 << ": " << r[i] << "\n";
	}


#ifdef LOCAL_DEFINE
	cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
	return 0;
}

// TCAATGCATGCGGGTCTATATGCAT
// ATGCATATAGACCCGCATGCATTGA

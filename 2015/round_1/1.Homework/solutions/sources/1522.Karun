#include <iostream>
#include <math.h>
using namespace std;

int pr[10000001];
int f[10000001];
int nump = 0;

int primacity (int x) {
	int p = 0;
	int ctr = 0;
	while (x > 1) {
		int lowest = f[x];
		if (lowest != ctr) {
			ctr = lowest;
			p++;
		}
		//dividing for the next one
		x = x/ctr;
	}
	return p;
}

void init_prm () {
	//going to fill in prime numbers and their lowest factors for div later
	for (int i = 0; i < 10000001; i++) {
		f[i] = 0;
	}
	for (int i = 2; i < 10000001; i++) {
		if (f[i] == 0) { 
			f[i] = i;
			pr[nump] = i;
			nump++;
		}
		
		for (int j = 0; j < nump; j++) {
			int curp = pr[j];
			bool found = false;
			if (f[i] >= curp) {
				if (curp*i < 10000001) {
					f[i*curp] = curp;
					found = true;
				}
			}
			if (!found) break;
		}
	}
}

int main () {
	int t;
	cin >> t;
	init_prm();
	for (int ctr = 0; ctr < t; ctr++) {
		int a, b;
		long k;
		cin >> a >> b >> k;
		int ans = 0;
		for (int i = a; i <= b; i++) {
			if (primacity(i) == k) ans++;
		}
		cout << "Case #" << (ctr+1) << ": " << ans << "\n";
	}
}

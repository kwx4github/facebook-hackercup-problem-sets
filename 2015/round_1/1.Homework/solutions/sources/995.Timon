#include<iostream>
#include<math.h>
#include<vector>
#include<queue>
#include<map>
#include<list>
#include<functional>
#include<algorithm>
#include<set>
#include<stack>
#include<bitset>

using namespace std;

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef long long ll;

ll _sieve_size;
bitset < 10000010 > bs;
vi primes;
int primacity[10000010];

void sieve(ll upperbound){
	_sieve_size = upperbound + 1;
	bs.set();
	bs[0] = bs[1] = 0;
	for (ll i = 2; i <= _sieve_size; i++)
	if (bs[i]){
		for (ll j = i + i; j <= _sieve_size; j += i){
			bs[j] = 0;
			primacity[j]++;
		}
		primes.push_back((int)i);
		primacity[(int)i] = 1;
	}
}

bool isPrime(ll N){
	if (N <= _sieve_size) return bs[N];
	for (int i = 0; i < (int)primes.size(); i++)
	if (N%primes[i] == 0)return false;
	return true;
}

vi primeFactors(ll N){
	vi factors;
	ll PF_idx = 0, PF = primes[PF_idx];
	while (N != 1 && (PF * PF <= N)){
		while (N%PF == 0) { N /= PF; factors.push_back(PF); }
		PF = primes[++PF_idx];
	}
	if (N != 1)factors.push_back(N);
	return factors;
}

int main(){
	int T;
	cin >> T;

	fill_n(primacity, 10000000, 0);
	sieve(10000000);
	
	for (int t = 1; t <= T; t++){

		int A, B, K;
		cin >> A >> B >> K;

		int c = 0;
		for (int p = A; p <= B; p++){
			if (primacity[p] == K)
				c++;
		}

		cout << "Case #" << t << ": " << c << endl;
	}

	return 0;
}
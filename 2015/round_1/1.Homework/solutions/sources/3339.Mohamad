#include <cstdio>
#include <string>
#include <sstream>
#include <map>
#include <iostream>
#include <vector>
#include <utility>
#include <cstring>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <queue>
#include <stack>

using namespace std;

class node 
{
public:
	int a[8];
};


vector <int> v(10000004,0);
vector <node> tree(40000012);

void calc_primacity();
void create_tree(int,int,int);
int  tree_search(int,int,int,int,int,int);

int main(int argc, char ** argv)
{
	//freopen(argv[1],"r",stdin);
	freopen("input.in","r",stdin);
	freopen("output.out","w",stdout);
	
	calc_primacity();
	create_tree(1,2,10000003);
	
	int t;
	int a,b,k;
	int ans;
	cin>>t;
	
	for(int z=0;z<t;z++)
	{
		cin>>a>>b>>k;
		if(k>8) ans =0;
		else ans = tree_search(1,2,10000003,a,b,k);
		cout<<"Case #"<<z+1<<": "<<ans<<endl;
	}
	
    return 0;
}

void calc_primacity()
{
	int maxi = 10000004;
	int it = 2;
	
	while(it < maxi)
	{
		while(v[it] && it<maxi) it++;
		
		if(it>=maxi) break;
		
		for(int i = it; i<maxi; i+=it) v[i]++;
	}
	
}



void create_tree(int ind,int s,int e)
{
	if(s==e)
	{
		for(int i=0;i<8;i++) tree[ind].a[i]=0;
		tree[ind].a[v[s]-1] = 1;
		return;
	}
	int mid = s+(e-s)/2;
	create_tree(ind*2,s,mid);
	create_tree(ind*2+1,mid+1,e);
	
	int x,y;
	x=ind*2;
	y=x+1;
	
	for(int i=0;i<8;i++) tree[ind].a[i]=tree[x].a[i]+tree[y].a[i];
	
}


int tree_search(int ind,int s,int e,int a,int b,int k)
{
	if(s==a && e==b) return tree[ind].a[k-1];
	
	int mid = s+(e-s)/2;
	
	if(b<=mid) return tree_search(ind*2,s,mid,a,b,k);
	if(a>mid) return tree_search(ind*2+1,mid+1,e,a,b,k);
	
	return tree_search(ind*2,s,mid,a,mid,k)+tree_search(ind*2+1,mid+1,e,mid+1,b,k);
	
	
}
import scala.io.Source
/**
 * Created by etsvigun on 18/01/15.
 */
object Homework {

  var pr = 1
  val primacityLessThanK = Array.fill[Byte](10000001)(0)

  def prefillFactors(): Unit = {

    (2 to 10000000) foreach { i =>
      val f = primacityLessThanK(i)
      if(f == 0){
        (i to 10000000 by i) foreach {i => primacityLessThanK(i) = (primacityLessThanK(i) + 1).toByte}
      }
    }
  }

  val PRIMACITY_8_MIN = 9699690

  def countPrimacy(a: Int, b: Int, k: Int): Int = {
    k match {
      case big if big > 8 => 0
      case 8 => if((a to b).contains(PRIMACITY_8_MIN)){ 1 }else{0}
      case _ => {
        pr = k
        (a to b).count{ i => primacityLessThanK(i) == k }
      }
    }
  }

  def main(args: Array[String]) {
    val lines = Source.stdin.getLines()

    def getInt = lines.next().toInt

    def get3Ints = {
      val Array(p, c, f) = lines.next().split(" ").map {
        _.toInt
      }
      (p, c, f)
    }


    prefillFactors()

    val testCount = getInt

    1 to testCount foreach { testNumber =>
      val (a,b,k) = get3Ints
      println(s"Case #$testNumber: ${countPrimacy(a,b,k)}")
    }
  }

}

#include <algorithm>
#include <fstream>
#include <iostream>

std::string test(std::ifstream & inFile) {
	int32_t begin, end, primacityGoal;
	inFile >> begin >> end >> primacityGoal;

	++end;
	std::vector<int32_t> sieve(end, 0);
	for (int32_t val = 2; val < end; ++val) {
		if (sieve[val] == 0) {
			for (int32_t multiple = val; multiple < end; multiple += val) {
				++sieve[multiple];
			}
		}
	}
	const auto count = std::accumulate(std::begin(sieve) + begin, std::end(sieve), 0, [primacityGoal](const int32_t & accum, const int32_t & val){
		return accum + (val == primacityGoal);
	});
	return std::to_string(count);
}

int main() {
	std::ifstream inFile("homework.txt");
	inFile.exceptions(std::ifstream::failbit);

	std::string line;
	std::getline(inFile, line);
	std::size_t testCaseCount{std::stoull(line)};

	for (std::size_t testCase = 1; testCase <= testCaseCount; ++testCase) {
		std::cout << "Case #" << testCase << ": " << test(inFile) << std::endl;
	}
}

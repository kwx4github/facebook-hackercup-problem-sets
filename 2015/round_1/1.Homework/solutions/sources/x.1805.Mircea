#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

#define dbg(x) (cout<<#x<<" = "<<(x)<<'\n')
#ifdef HOME
const string inputFile = "input.txt";
const string outputFile = "output.txt";
#else
const string problemName = "";
const string inputFile = problemName + ".in";
const string outputFile = problemName + ".out";
#endif

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

const int INF = (1LL << 31) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 100000 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

int B[(int)(1e7) + 60];
vector<int> V[55];

void solve() {
    int A, B, K;

    scanf("%d%d%d", &A, &B, &K);

    if(K <= 50) {
        auto it = lower_bound(V[K].begin(), V[K].end(), B);
        while(*it > B)
            it--;

        auto jt = lower_bound(V[K].begin(), V[K].end(), A - 1);
        while(*jt < A)
            jt++;

        printf("%d\n", it - jt + 1);
    } else
        printf("0\n");
}

int main() {
    int test, nr_cases;

#ifndef ONLINE_JUDGE
    freopen(inputFile.c_str(), "r", stdin);
    freopen(outputFile.c_str(), "w", stdout);
#endif

    for(int i = 2; i * i <= 1e7; i++) {
        if(!B[i]) {
            for(int j = i; j <= 1e7; j += i)
                B[j]++;
        }
    }

    for(int i = 2; i <= 1e7; i++)
        V[B[i]].push_back(i);

    scanf("%d", &nr_cases);

    for(int test = 1; test <= nr_cases; test++) {
        printf("Case #%d: ", test);
        solve();
    }

    return 0;
}

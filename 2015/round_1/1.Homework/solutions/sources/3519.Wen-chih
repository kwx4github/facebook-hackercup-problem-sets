import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Homework {
	static int N = 10000000;
	int[] mPrimacity = new int[N + 1];

	List<Integer> primeList;

	public Homework() {
		primeList = getAllPrimes();
	}

	public List<Integer> getAllPrimes() {
		List<Integer> primeList = new ArrayList<Integer>();
		boolean allNums[] = new boolean[N + 1];
		for (int i = 0; i < N + 1; i++) {
			mPrimacity[i] = 0;
		}
		for (int i = 0; i < N; i++) {
			allNums[i] = true;
		}
		allNums[0] = allNums[1] = false;
		for (int i = 2; i < N; i++) {
			if (!allNums[i]) {
				continue;
			}
			mPrimacity[i] = 1;
			primeList.add(i);
			int div = N / i;

			// System.out.println("prime " + i );
			for (int j = 2; j <= div; j++) {
				allNums[i * j] = false;
				mPrimacity[i * j] += 1;
			}
		}
		return primeList;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		try {
			BufferedReader reader = new BufferedReader(new FileReader(
					"input.txt"));
			int number = Integer.parseInt(reader.readLine());
			FileWriter fw = new FileWriter("output.txt");
			BufferedWriter bw = new BufferedWriter(fw);
			Homework homework = new Homework();
			for (int i = 0; i < number; i++) {
				String nextLine[] = reader.readLine().split(" ");
				int from = Integer.parseInt(nextLine[0]);
				int to = Integer.parseInt(nextLine[1]);
				int primacity = Integer.parseInt(nextLine[2]);
				int num = homework.computeResult(from, to, primacity);
				bw.write(String.format("Case #%d: %d\n", i+1, num));
			}
			bw.flush();
			bw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public int computeResult(int from, int to, int primacity) {
		int num = 0;
		for (int i = from; i <= to; i++) {
			if (mPrimacity[i] == primacity) {
			//	System.out.println(i);
				num++;
			}
		}
	//	System.out.println("answer" + num);
		return num;
	}
}

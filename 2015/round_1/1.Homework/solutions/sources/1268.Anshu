#include <iostream>
#include <map>
#include <unordered_map>
#include <cassert>
#include <vector>

typedef unsigned long long ull;

static const ull MAX_VALUE = 10000000;

static std::vector<ull> primes;
static bool isPrime[MAX_VALUE + 1];
static void sieve()
{
    assert(primes.empty());

    memset(isPrime, 1, MAX_VALUE + 1);

    ull last = 2;
    while (true) {
        primes.push_back(last);

        for (ull i = 2 * last; i <= MAX_VALUE; i += last)
            isPrime[i] = false;

        bool found = false;
        for (ull i = last + 1; i <= MAX_VALUE; ++i) {
            if (isPrime[i]) {
                last = i;
                found = true;
                break;
            }
        }

        if (!found)
            return;
    }
}

static ull primacity(ull n)
{
    static std::unordered_map<ull, ull> memory;
    if (memory.find(n) != memory.end())
        return memory[n];

    if (n == 1)
        return 0;

    if (isPrime[n])
        return memory[n] = 1;

    for (auto prime : primes) {
        if (n % prime == 0) {
            int m = n;
            while (m % prime == 0)
                m /= prime;

            return memory[n] = primacity(m) + 1;
        }
    }

    std::cerr << n << std::endl;
    assert(false);
}

ull solve(ull a, ull b, ull k)
{
    ull count = 0;
    for (ull n = a; n <= b; ++n) {
        if (primacity(n) == k)
            ++count;
    }

    return count;
}

int main()
{
    sieve();

    int cases;
    std::cin >> cases;
    for (int c = 1; c <= cases; ++c) {
        ull a, b, k;
        scanf("%llu %llu %llu", &a, &b, &k);
        printf("Case #%d: %llu\n", c, solve(a, b, k));
    }

    return 0;
}


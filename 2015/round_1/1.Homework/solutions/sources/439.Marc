package de.mprengemann.fb.hackercup15.problem4;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static java.nio.charset.StandardCharsets.UTF_8;

public class Problem4 {

    private String pathToFile;

    public Problem4(String pathToFile) {
        this.pathToFile = pathToFile;
    }

    public void solve(String outputFile) {
        PrintWriter out = null;
        try {
            List<String> inputFileLines = Files.readAllLines(Paths.get(pathToFile), UTF_8);
            out = new PrintWriter(outputFile);
            String testCase;
            int testCases = Integer.parseInt(inputFileLines.get(0));
            for (int i = 1; i <= testCases; i++) {
                testCase = inputFileLines.get(i);
                solveTestCase(i, out, testCase);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    private void solveTestCase(int testCaseNumber, PrintWriter out, String input) {
        String[] inputValues = input.split(" ");
        int lowerBound = Integer.parseInt(inputValues[0]);
        int upperBound = Integer.parseInt(inputValues[1]);
        int primeCount = Integer.parseInt(inputValues[2]);

        int foundNumbers = 0;
        for (int i = lowerBound; i <= upperBound; i++) {
            Set<Integer> primeFactors = primeFactors(i);
            if (primeFactors.size() == primeCount) {
                foundNumbers++;
            }
        }
        out.println(String.format("Case #%d: %s", testCaseNumber, foundNumbers));
        System.out.println(String.format("Case #%d: %s", testCaseNumber, foundNumbers));
    }

    private static Set<Integer> primeFactors(int numbers) {
        int n = numbers;
        Set<Integer> factors = new HashSet<Integer>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 1) {
            factors.add(n);
        }
        return factors;
    }
}

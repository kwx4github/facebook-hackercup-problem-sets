#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <sstream>

#define INF 0x3f3f3f3f
#define NINF -0x3f3f3f3f

using namespace std;

typedef pair<int,int> pii;

namespace sieve
{
	const int maxs = 10000000;
	bool nprimes[maxs+1];
	int primacity[maxs+1];
	
	std::vector<int> primes;
	
	void generate (bool save)
	{
		nprimes[0] = nprimes[1] = true;
		for (int i = 2; i <= maxs; i += 1)
		{
			if (!nprimes[i])
			{
				primacity[i] = 1;
				
				if (save)
					primes.push_back(i);
					
				for (int j = 2*i; j <= maxs; j += i)
				{
					nprimes[j] = true;
					primacity[j]++;
				}
			}
		}
	}
}

int main (int argc, char const* argv[])
{
	sieve::generate(true);
	
	int T;
	scanf("%d",&T);
	
	for (int t=1; t <= T; ++t)
	{
		int a,b,k;
		scanf("%d %d %d",&a,&b,&k);
		
		int total = count(sieve::primacity+a,sieve::primacity+b+1,k);
		
		printf("Case #%d: %d\n",t,total);
	}
	return 0;
}

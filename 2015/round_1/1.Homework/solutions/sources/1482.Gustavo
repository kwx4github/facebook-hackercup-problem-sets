#include <iostream>

#define ARR_SIZE (10000001)

using namespace std;

static unsigned int primality[ARR_SIZE];

void sieve() {
  for (int i = 2; i < ARR_SIZE; i++) {
    if (primality[i] == 0) {
      for (int j = i; j < ARR_SIZE; j += i) {
        primality[j]++;
      }
    }
  }
}

unsigned int find(int a, int b, int k) {
  unsigned int count = 0;
  for (int i = a; i <= b; i++) {
    if (primality[i] == k)
      count++;
  }

  return count;
}

int main() {
  // Set array to 0.
  memset(primality, 0, sizeof(primality));

  // Pre-calculate the primality of a number and store it in a hash map.
  sieve();

  // Read input.
  int T;
  cin >> T;

  for (int i = 1; i <= T; i++) {
    int A, B, K;
    cin >> A >> B >> K;

    cout << "Case #" << i << ": " << find(A, B, K) << endl;
  }
}

import bisect

def prebuild(upper_bound):
	ansm = [0] * (upper_bound+1)
	for i in range(2, upper_bound+1):
		if ansm[i] == 0:
			j = i
			while j <= upper_bound:
				ansm[j] += 1
				j += i
	return ansm

def prebuild2(ansm):
	res = [[] for i in range(max(ansm)+1)]
	for idx, val in enumerate(ansm):
		res[val] += [idx]
	return res


ansm = prebuild2(prebuild(10**7))

no = int(raw_input())

for cases in range(1, no+1):
	a, b, k = map(int, raw_input().split())
	if k >= len(ansm):
		print "Case #%d: 0" % (cases,)
	else:
		l, r = bisect.bisect_left(ansm[k], a), bisect.bisect_right(ansm[k], b)

		print "Case #%d: %d" % (cases, r-l)

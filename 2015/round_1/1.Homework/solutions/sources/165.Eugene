#include <iostream>
#include <iomanip>
#include <functional>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <list>
#include <stack>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <utility>
#include <iterator>
#include <bitset>
#include <sstream>
#include <numeric>
#include <complex>
#include <sstream>
#include <unordered_set>
#include <unordered_map>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 2000000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-10
#define MOD 1000000007
#define PRIME 312427
#define MOD2 500000004

using namespace std;

int primacity[10000010];

int getPrimacity(int n) {
	int ans(0);
	for (int i=2; i*i<=n; ++i) {
		if (n%i==0) {
			++ans;
			while (n%i==0) n/=i;
		}
	}
	if (n!=1) ++ans;
	return ans;
}

void init() {
	FOR(i,1,10000005)
		primacity[i]=getPrimacity(i);
}

void solveTest() {
	int a,b,k;
	scanf("%d%d%d",&a,&b,&k);
	int ans(0);
	FOR(i,a,b) ans+=primacity[i]==k;
	printf("%d\n",ans);
}

void prepare() {
}

void solve() {
	init();
	int tst;
	scanf("%d\n",&tst);
	FOR(i,1,tst) {
		printf("Case #%d: ",i);
		prepare();
		solveTest();
	}
}

int main() {
	freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
//	freopen(".in","r",stdin); freopen(".out","w",stdout);

	clock_t tm = clock();
	solve();
	cerr<<setprecision(3)<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
	return 0;
}

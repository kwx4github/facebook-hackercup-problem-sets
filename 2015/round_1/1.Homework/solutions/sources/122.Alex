#include <iostream>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <bitset>
#include <queue>
#include <deque>
#include <list>
#include <algorithm>
#include <iomanip>

using namespace std;

typedef pair<int, int> pt;
typedef long long li;
typedef long double ld;

template<typename X> inline X abs(const X& a) { return a < 0 ? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

#define forn(i,n) for(int i = 0; i < int(n); i++)
#define pb push_back
#define sz(a) int(a.size())
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++) 
#define ft first
#define sc second
#define x first
#define y second

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = ld(1e-9);
const ld PI = acos(-1.0);
const int N = 10 * 1000 * 1000 + 13;

int a, b, k;
int ans[N];

int get(int v)
{
	int ans = 0;
	for(int i = 2; i * i <= v; i++)
	{             
		if(v % i == 0)
			ans++;
		while(v % i == 0)
			v /= i;
	}
	if(v > 1)
		ans++;
	return ans;
}

void prepare()
{
	for(int i = 2; i <= 10000000; i++)    
	{
		if(i % 100000 == 0)
			cerr << i << endl;
		ans[i] = get(i);     
	}
}
 
inline void solve()
{                 
	cin >> a >> b >> k;
	//a = 1;
	//b = 10000000;
	//k = 2;
	//cerr << a << ' ' << b << ' ' << k << endl;
    int anss = 0;
    for(int i = a; i <= b; i++)
    	if(ans[i] == k)
    		anss++;
    cout << anss << endl;

}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    cerr << setprecision(10) << fixed;
    cout << setprecision(15) << fixed;
    
    prepare();	
    srand(time(NULL));
    int tests;
    cin >> tests;
    //tests = 100;
    for(int test = 0; test < tests; test++)
    {
    	cerr << test << endl;
    	printf("Case #%d: ", test + 1);
	    solve();
	}       
  
    return 0;
}
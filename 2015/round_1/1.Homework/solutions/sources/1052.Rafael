import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeSet;

public class Homework
{

	public static void main(String[] args)
	{
		long start = System.nanoTime();
		solve();
		long end = System.nanoTime();
		printTime(start, end);
	}
	
	private static void solve()
	{
		Scanner sc = openFileForReading("homework.txt");
		PrintWriter pw = openFileForWriting("output_homework.txt");
		HashMap<Integer, Integer> memoPrimacity = new HashMap<Integer, Integer>();
		TreeSet<Integer> primes = new TreeSet<Integer>();
		buildDatabase(10000000, primes);
		int cases = sc.nextInt();
		for(int casenum = 1; casenum <= cases; casenum++)
		{
			if(casenum != 1) pw.println();
//			print("Case #" + casenum);
			int A = sc.nextInt();
			int B = sc.nextInt();
			int K = sc.nextInt();
			int count = 0;
			if(K < Math.sqrt(B)) for(int i = A; i <= B; i++)
			{
				int j = i;
				double sqrt = Math.sqrt(i);
				int primacity = 0;
				if(memoPrimacity.containsKey(i)) primacity = memoPrimacity.get(i);
				if(primacity == 0)
				{
					if(!primes.contains(i))
						for(int p : primes)
						{
							if(p > sqrt)
								break;
							if(j%p == 0)
							{
								primacity++;
								do
								{
									j = j / p;
								}while(j%p == 0);
								if(j > sqrt && primes.contains(j))
								{
									primacity++;
									break;
								}
							}
						}
					else
						primacity = 1;
				}
				memoPrimacity.put(i, primacity);
				if(primacity == K)
					count++;
//				if(i%1000000 == 0) print(i); //just a little progress display for the impatient :)
			}
			pw.print("Case #" + casenum + ": " + count);
		}
		sc.close();
		pw.close();
	}
		
	//Builds a database of primes up to and including max
	public static void buildDatabase(int max, Collection<Integer> collection)
	{
		boolean collect = collection != null;
		
		int active = (int)Math.sqrt(max) + 1;
		ListNode<Integer> first = new ListNode<Integer>(5, new ListNode<Integer>(7));
		ListNode<Integer> current = first.getNext();
		int i;
		for(i = 12; i-1 <= active; i += 6)
		{
			int left = i-1, right = i+1;
			ListNode<Integer> temp = first;
			boolean validL = true, validR = true;
			while((temp != null) && (temp.getValue() <= Math.sqrt(right)) && (validL || validR))
			{
				if(left % temp.getValue() == 0)
					validL = false;
				if(right % temp.getValue() == 0)
					validR = false;
				temp = temp.getNext();
			}
			if(validL)
			{
				current.setNext(new ListNode<Integer>(left));
				current = current.getNext();
			}
			if(validR)
			{
				current.setNext(new ListNode<Integer>(right));
				current = current.getNext();
			}
		}
		current = first;
		if(collect) collection.removeAll(collection);
		if(collect) collection.add(2);
		if(collect) collection.add(3);
		for(current = first; current != null; current = current.getNext())
			if(collect) collection.add(current.getValue());
		int j = i;
		for(i = j; i-1 <= max && i > 0; i+=6)
		{
			int left = i-1, right = i+1;
			ListNode<Integer> temp = first;
			boolean validL = true, validR = true;
			while((temp != null) && (temp.getValue() <= Math.sqrt(right)) && (validL || validR))
			{
				if(left % temp.getValue() == 0)
					validL = false;
				if(right % temp.getValue() == 0)
					validR = false;
				temp = temp.getNext();
			}
			if(validL)
				if(collect) collection.add(left);
			if(validR && right <= max)
				if(collect) collection.add(right);
		}
	}

	private static class ListNode<E>
	{
		private ListNode<E> next;
		private E value;
		
		public ListNode(E val)
		{	
			next = null;
			value = val;
		}

		public ListNode(E val, ListNode<E> nex)
		{
			next = nex;
			value = val;
		}
		
		public E getValue()
		{	return value;	}
		
		public ListNode<E> getNext()
		{	return next;	}
		
		public ListNode<E> setNext(ListNode<E> nex)
		{
			ListNode<E> temp = next;
			next = nex;
			return temp;
		}
		
		public String toString()
		{	return value.toString() + (next == null ? "-|" : "->" + next.toString());	}
	}
	
	//Returns a scanner for the file of name fileName
	private static Scanner openFileForReading(String filename)
	{
		Scanner scanner = null;
		try {	scanner = new Scanner(new File(filename));	}
		catch (FileNotFoundException e)
		{
			System.out.println("Could not open " + filename);
			e.printStackTrace();
		}
		return scanner;
	}

	//Returns a writer for a file of name fileName
	private static PrintWriter openFileForWriting(String filename)
	{
		PrintWriter writer = null;
		try {	writer = new PrintWriter(new FileWriter(filename));	}
		catch (IOException e)
		{
			System.out.println("Could not create " + filename);
			e.printStackTrace();
		}
		return writer;
	}

	private static void printTime(long start, long end)
	{
		long time = end - start;
		print("\nTime elapsed: ");
		int seconds = (int)(time/1000000000);
		int minutes = seconds/60;
		seconds%=60;
		int milliseconds = (int)((time/1000000)%1000);
		int microseconds = (int)((time/1000)%1000);
		int nanoseconds = (int)(time%1000);
		if(minutes > 0)			print(minutes + " minutes");
		if(seconds > 0) 		print(seconds + " seconds");
		if(milliseconds > 0)	print(milliseconds + " milliseconds");
		if(microseconds > 0)	print(microseconds + " microseconds");
		if(nanoseconds > 0)		print(nanoseconds + " nanoseconds");
	}
	
	private static void print(Object ob) { System.out.println(ob); }
}
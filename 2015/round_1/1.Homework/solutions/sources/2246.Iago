//
//  main.cpp
//  a
//
//  Created by Iago Almeida Neves on 1/17/15.
//  Copyright (c) 2015 Iago Almeida Neves. All rights reserved.
//

#include <bits/stdc++.h>
using namespace std;
#define INF 0x3f3f3f3f
#define MOD 1000000007
#define _ ios_base::sync_with_stdio(false); cin.tie(NULL);
typedef long long ll;
#define REP(i,n) for (int i = 0; i < n; i++)
#define REPI(i,n) for (int i = 1; i <= n; i++)
#define REPN(i,n) for (int i = n-1; i >= 0; i--)
#define REPF(j,i,n) for (int j = i; j < n; j++)

#define MAXN 10000010

int primacity[MAXN];
int factors[MAXN];
bool primes[MAXN];
int divisors[MAXN]; // serves no purpose in main
//O (NloglogN)
void sieve(int n)
{
  memset(primes, true, sizeof(primes));
  primes[0] = primes[1] = false;
  for(int i = 2; i*i <= n; i++)
  {
    if(!primes[i] || (!(i&1) && i > 2)) {
      continue;
    }
    int k = i*i;
    divisors[i]=i;
    while (k<=n)
    {
      primes[k]=false;
      divisors[k]=i;
      k+=i;
    }
  }
}
inline int div(int n){ if(primes[n]) return n; return divisors[n];}
//returns number of prime factors in O(logN) in factors, unsorted
void factorize(int n)
{
  int org = n;
  if (n<=1)
  {
    factors[0]=n;
    return;
  }
  int k=0;
  while (n>1)
  {
    factors[k++] = div(n);
    n /= div(n);
  }
  sort(factors, factors+k);
  k = unique(factors, factors+k)-factors;
  primacity[org] = k;
}

int main(int argc, const char * argv[]) { _
  sieve(MAXN);
  for (int i = 2; i < MAXN; ++i) {
    factorize(i);
  }
  int nt;
  cin >> nt;
  REPI(t, nt) {
    int a, b, k;
    cin >> a >> b >> k;
    int ans = 0;
    for (int i = a; i <= b; ++i) {
      if (primacity[i] == k) {
        ans++;
      }
    }
    cout << "Case #" << t << ": ";
    cout << ans << "\n";
  }
  return 0;
}

/*
 
2
 2 10000000 1
 2 10000000 2
 
 665134
 2536838
*/
#include <iostream>
#include <algorithm>

using namespace std;

int primes[1000000];
int np;

int primacity[10][10000001];

void genPrimes() {
  primes[0] = 2;
  primes[1] = 3;
  int idx = 2;
  int p = 5;
  while (p < 10000000) {
    bool ok = true;
    for (int i = 1; primes[i] * primes[i] <= p; i++) {
      if (p % primes[i] == 0) {
        ok = false;
        break;
      }
    }
    if (ok) primes[idx++] = p;
    p += 2;
  }
  np = idx;
}

bool isPrime(int n) {
  return binary_search(primes, primes + np, n);
}

void genPrimacity() {
  for (int i = 1; i < 10; i++) primacity[i][1] = 0;
  for (int i = 2; i <= 10000000; i++) {
    int ans = 1;
    if (!isPrime(i)) {
      ans = 0;
      int cur = i;
      for (int idx = 0; primes[idx] * primes[idx] <= cur; idx++) {
        if (cur % primes[idx] == 0) {
          ans++;
          while (cur % primes[idx] == 0) cur /= primes[idx];
        }
      }
      if (cur > 1) ans++;
    }
    for (int j = 1; j < 10; j++) primacity[j][i] = primacity[j][i-1];
    primacity[ans][i]++;
  }
}

int main() {
  genPrimes();
  genPrimacity();
  int T;
  cin >> T;
  for (int tc = 1; tc <= T; tc++) {
    int A, B, K;
    cin >> A >> B >> K;
    cout << "Case #" << tc << ": ";
    if (K <= 9)
      cout << primacity[K][B] - primacity[K][A-1] << endl;
    else
      cout << 0 << endl;
  }
}


#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<string>
#include<sstream>
#include<deque>
#include<math.h>
#include<cstring>
#include <bitset>
#include<algorithm>
#include<stdio.h>
#include<stdlib.h>

#define all(v) v.begin(),v.end()
#define mpair make_pair

using namespace std;
typedef long double ld;
const ld epsilon = 1e-9;
typedef long long ll;

const int SIZE = 1 << 24;
int numPrimes[SIZE];
int num_primacy[SIZE][8];

int main()
{
	freopen("hacker.in", "r", stdin);
	freopen("hacker.out", "w", stdout);

	memset(numPrimes, 0, sizeof(numPrimes));
	memset(num_primacy, 0, sizeof(num_primacy));
	int maxm = 0;
	int maxNum = -1;
	for (int i = 2; i < SIZE; i++)
	{
		if (numPrimes[i] == 0)
		{
			for (int j = i; j < SIZE; j += i)
			{
				numPrimes[j]++;
				/*if (numPrimes[j] > maxm)
				{
					maxm = numPrimes[j];
					maxNum = j;
					if (numPrimes[j] == 8)
						cout << j << endl;
				}*/
			}
		}

	}
	//cout << maxm << " " << maxNum << endl;

	for (int i = 2; i < SIZE; i++)
	{
		memcpy(num_primacy[i], num_primacy[i - 1], sizeof(num_primacy[i]));
		num_primacy[i][numPrimes[i] - 1]++;
	}

	int numtests;
	cin >> numtests;

	for (int o = 0; o < numtests; o++)
	{
		printf("Case #%d: ", o + 1);
		int a, b, k;
		cin >> a >> b >> k;
		if (k <= 8)
			cout << num_primacy[b][k - 1] - num_primacy[a - 1][k - 1] << endl;
		else
			cout << 0 << endl;
	}
	return 0;
}

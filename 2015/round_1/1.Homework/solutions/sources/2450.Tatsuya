#include <algorithm>
#include <array>
#include <complex>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

typedef long long lli;

const int N = 10000000;

int cnt[N + 1];
bool is_prime[N + 1];
vector<int> ans[9];

void init() {
  memset(cnt, 0, sizeof(N + 1));
  for(int i = 0; i <= N; ++i) is_prime[i] = true;
  is_prime[0] = is_prime[1] = false;
  for(int i = 2; i <= N; ++i) {
    if(is_prime[i]) {
      ++cnt[i];
      for(int j = 2 * i; j <= N; j += i) {
        ++cnt[j];
        is_prime[j] = false;
      }
    }
  }
  for(int i = 0; i < 9; ++i) {
    ans[i].reserve(10000);
  }
  for(int i = 0; i <= N; ++i) {
    if(cnt[i] != 0) {
      ans[cnt[i]].push_back(i);
    }
  }
}

int solve(int A, int B, int K) {
  if(K > 8) return 0;
  return upper_bound(ans[K].begin(), ans[K].end(), B) - lower_bound(ans[K].begin(), ans[K].end(), A);
}

int main() {
  init();
  int T;
  cin >> T;
  for(int t = 1; t <= T; ++t) {
    lli A, B, K;
    cin >> A >> B >> K;
    cout << "Case #" << t << ": " << solve(A, B, K) << endl;
  }
  return 0;
}

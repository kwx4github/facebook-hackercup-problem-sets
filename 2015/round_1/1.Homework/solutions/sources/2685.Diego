#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
#define pb push_back
#define MAX 10000005
#define MAXCNT 10

vector<ll> primes;
bitset<MAX> isPrime;
int cntFactors[MAX], cumCntFactors[MAX][10];

void sieve(ll n)
{
	isPrime.set(); 
	isPrime[0] = isPrime[1] = 0;
	
	for(ll i=2; i<=n; ++i)
		if(isPrime[i])
		{
			for(ll j=i*i; j<=n; j+=i) isPrime[j] = 0;
			primes.pb(i);
		}
}

void factorize(int n)
{
	for(int i=2; i<n; ++i)
	{
		cntFactors[i] = 0;

		int j = 0;
		ll a = i, pf = primes[j];
		while(a != 1LL && pf * pf <= a)
		{
			if(a % pf == 0)
			{
				while(a%pf == 0) a /= pf;
				cntFactors[i]++;
			}
			pf = primes[++j];
		}
		if(a != 1LL) cntFactors[i]++;
	}
}

int main()
{
	sieve(MAX-1);
	factorize(MAX-1);
	
	//int maxCnt = 0;
	//for(int i=2; i<MAX; ++i) maxCnt = max(maxCnt, cntFactors[i]);
	//printf("maxCnt= %d\n", maxCnt);

	for(int j=1; j<MAXCNT; ++j)	cumCntFactors[1][j] = 0;
	for(int i=2; i<MAX; ++i)
	{
		for(int j=1; j<MAXCNT; ++j) cumCntFactors[i][j] = cumCntFactors[i-1][j];
		cumCntFactors[i][cntFactors[i]]++;
	}
	
	int t;
	scanf("%d", &t);
	for(int tc=1; tc<=t; ++tc)
	{
		int l, r, k, sol = 0;
		scanf("%d %d %d", &l, &r, &k);
		if(k < MAXCNT) sol = cumCntFactors[r][k] - cumCntFactors[l-1][k];
		printf("Case #%d: %d\n", tc, sol);
	}
		
	return 0;
}

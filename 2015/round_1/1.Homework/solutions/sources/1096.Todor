package round1;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;

public class P1 {

	private final static String INPUT_FILE_NAME = "input.in";
	private final static String OUTPUT_FILE_NAME = "output.out";

	static boolean PRIMES[] = new boolean[10000001];
	static int PRIMACITY[] = new int[10000001];
	static ArrayList<Integer> PRIMES_LIST = new ArrayList<Integer>();
	static {
		Arrays.fill(PRIMES, true);
		PRIMES[0] = PRIMES[1] = false;
		for (int i = 2; i < 10000001; i++) {
			if (PRIMES[i]) {
				PRIMES_LIST.add(i);
				for (int k = i + i; k < 10000001; k += i) {
					PRIMES[k] = false;
				}
			}
		}
		for (int prime : PRIMES_LIST) {
			for (int i = prime; i < 10000001; i += prime) {
				PRIMACITY[i]++;
			}
		}
	}

	private String solveCase() throws Exception {
		int a = readNextUInt();
		int b = readNextUInt();
		int k = readNextUInt();

		int res = 0;
		for (int i = a; i <= b; ++i) {
			if (PRIMACITY[i] == k) {
				res++;
			}
		}
		return String.valueOf(res);
	}

	private void solve() throws Exception {
		int tests = readNextUInt();
		for (int test = 1; test <= tests; test++) {
			write(String.format("Case #%d: %s\n", test, solveCase()));
		}
	}

	private InputStream inputStream;
	private BufferedInputStream bufferedInputStream;

	private OutputStream outputStream;
	private BufferedOutputStream bufferedOutputStream;

	protected P1() throws Exception {
		File outputFile = new File(OUTPUT_FILE_NAME);
		outputFile.createNewFile();
		outputStream = new FileOutputStream(outputFile);
		bufferedOutputStream = new BufferedOutputStream(outputStream);
		inputStream = new FileInputStream(INPUT_FILE_NAME);
		bufferedInputStream = new BufferedInputStream(inputStream);
	}

	public static void main(String[] args) throws Exception {
		P1 solver = new P1();
		solver.solve();
		solver.closeFiles();

	}

	private void closeFiles() {
		Closeable[] streams = new Closeable[4];
		streams[0] = bufferedInputStream;
		streams[1] = inputStream;
		streams[2] = bufferedOutputStream;
		streams[3] = outputStream;
		for (int i = 0; i < 4; ++i) {
			try {
				streams[i].close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int readUInt() throws Exception {
		int c;
		int res = 0;
		boolean hasNum = false;
		while ((c = bufferedInputStream.read()) >= '0' && c <= '9') {
			hasNum = true;
			res *= 10;
			res += c - '0';
		}
		if (!hasNum && c == -1) {
			throw new Exception("EOF");
		}
		return hasNum ? res : -1;
	}

	protected int readNextUInt() throws Exception {
		int r;
		while ((r = readUInt()) == -1) {
		}
		return r;
	}

	protected void write(String str) throws Exception {
		bufferedOutputStream.write(str.getBytes());
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	private String readStr() throws Exception {
		StringBuilder strB = new StringBuilder();
		int c;
		boolean hasChars = false;
		while (((c = bufferedInputStream.read()) >= 'a' && c <= 'z')
				|| (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
			hasChars = true;
			strB.append((char) c);
		}
		if (!hasChars && c == -1) {
			throw new Exception("EOF");
		}
		return hasChars ? strB.toString() : null;
	}

	/**
	 * Reads string containing ([a..z]|[A..Z]|[0..9])*
	 * 
	 * @return
	 * @throws Exception
	 */
	protected String readNextStr() throws Exception {
		String s;
		while ((s = readStr()) == null) {
		}
		return s;
	}

}

//
//  main.cpp
//  Problem 2.1
//
//  Created by Maxim Piskunov on 1/17/15.
//  Copyright (c) 2015 Maxim Piskunov. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <string>

using namespace std;

struct input {
    int A;
    int B;
    int K;
};

struct output {
    int count;
};

vector <int> primicities;

void read(ifstream &in, input &test) {
    in >> test.A >> test.B >> test.K;
}

void write(ofstream &out, output test) {
    out << test.count;
}

output solve (input test) {
    output result;
    result.count = 0;
    
    for (int i = test.A; i <= test.B; i++) {
        if (primicities[i] == test.K) result.count++;
    }
    
    return result;
}

void readAll(vector <input> &tests) {
    ifstream in("../../../../../input.txt");
    
    int T;
    in >> T;
    tests.resize(T);
    for (int i = 0; i < T; i++) {
        read(in, tests[i]);
    }
    
    in.close();
}

void writeAll(vector <output> &results) {
    ofstream out("../../../../../output.txt");
    
    out << "Case #1: ";
    write(out, results[0]);
    for (int i = 1; i < results.size(); i++) {
        out << endl << "Case #" << i+1 << ": ";
        write(out, results[i]);
    }
    
    out.close();
}

void solveAll(vector <input> &tests, vector <output> &results) {
    results.resize(tests.size());
    for (int i = 0; i < tests.size(); i++) results[i] = solve(tests[i]);
}

int primicity (int n) {
    int count = 0;
    for (int i = 2; i <= sqrt(n) + 1; i++) {
        if (n % i == 0) {
            count++;
            n /= i;
        }
        while (n % i == 0) n /= i;
    }
    if (n != 1) count++;
    return count;
}

int main(int argc, const char * argv[]) {
    vector <input> tests;
    vector <output> results;
    
    primicities.resize(10000001);
    for (int i = 2; i <= 10000000; i++) {
        primicities[i] = primicity(i);
        if (i % 100000 == 0) cout << i / 100000 << "%" << endl;
    }
    
    readAll(tests);
    solveAll(tests, results);
    writeAll(results);
    
    return 0;
}
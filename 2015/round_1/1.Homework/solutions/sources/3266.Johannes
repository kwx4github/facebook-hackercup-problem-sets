import sys

def primes_sieve2(limit):
    a = [True] * limit
    a[0] = a[1] = False
    for (i, isprime) in enumerate(a):
        if isprime:
            yield i
            for n in range(i*i, limit, i):
                a[n] = False

PRIMES = list(primes_sieve2(10 ** 7))
PSET = set(PRIMES)

def primacity(n):
    prim = 0
    for p in PRIMES:
        if p > n:
            return prim
        if n in PSET:
            return prim + 1
        if n % p == 0:
            prim += 1
            while n % p == 0:
                n = n / p
    return prim

PRIMACITY = {}
for n in range(10 ** 7 + 1):
    PRIMACITY[n] = primacity(n)


def problem_instances(filename):
    f = open(filename)
    num_instances = int(f.readline())
    for i in range(num_instances):
        yield map(int, f.readline().split())


def solve(instance):
    A, B, K = instance
    return sum(PRIMACITY[n] == K for n in range(A, B+1))


filename = sys.argv[1]
out = open(filename + ".out", "w")
for idx, instance in enumerate(problem_instances(filename), 1):
    out.write("Case #%i: %s\n" % (idx, solve(instance)))
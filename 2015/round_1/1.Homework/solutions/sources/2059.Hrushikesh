#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>


using namespace std;

#define FOR(i , n) for(int i = 0 ; i < n ; i++)
#define FOT(i , a , b) for(int i = a ; i < b ; i++)
int _a;
#define GETINT (scanf("%d" , &_a) , _a)
#define pb push_back
#define mp make_pair
#define s(a) (int(a.size()))
#define PRINT(a) cerr << #a << " = " << a << endl
#define ALL(a) a.begin(), a.end()


typedef long long ll;
typedef pair< ll , ll > PLL;
typedef vector< PLL > vpll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int , int> PII;
typedef vector< PII > vpii;

#define LARGE 10000001

int largest[LARGE];
int primacity[LARGE];

void setup() {
  FOR(i, LARGE) largest[i] = i;
  FOT(p, 2, LARGE) {
    if (largest[p] == p) {
      FOT(m, 2, LARGE) {
        int n = p * m;
        if (n >= LARGE) break;
        largest[n] = p;
      }
    }
  }
  cerr << "largest computed";
  primacity[1] = 0;
  FOT(p, 2, LARGE) {
    int n = p;
    while ((n % largest[p]) == 0) n /= largest[p];
    primacity[p] = 1 + primacity[n];
  }
}

int main() 
{
  setup();
  int t = GETINT;
  for (int test = 1; test <= t; test++) {
    int a, b, k;
    a = GETINT;
    b = GETINT;
    k = GETINT;
    int answer = 0;
    FOT(c, a, b+1) if (primacity[c] == k) answer++;
    printf("Case #%d: %d\n", test, answer);
  }
  return 0;
}

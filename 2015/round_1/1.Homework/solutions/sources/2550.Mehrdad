									/*ba yade oo */
//Mehrdad AP

//#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:2000000000")

#include <iostream>
#include <string>
#include <cstdio>
#include <string.h>
#include <algorithm>
#include <stdio.h>
#include <math.h>
#include <cstring>
#include <sstream>
#include <queue>
#include <vector>
#include <stack>
#include <set>
#include <map>

using namespace std;

#define absol(x) ((x)>(0) ? (x):(-1)*(x))
#define pow2(x) ((x)*(x))
#define EPS 1e-9
#define MAX 500009
#define MOD 1043045007
#define Left(x) (2*x)
#define Right(x) ((2*(x)+1)
#define mP make_pair
#define pB push_back
#define X first 
#define Y second
#define SZ(x) ((int) (x).size())
#define SP system("pause")


//#define inRange(x,y) (x>=0 && x<N && y>=0 && y<M)

typedef long long int LL;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<int,pii> piii;

const double PI = 2.0*acos(0.0);
const int INF = 1000*1000*1000;
const int maxn=10000003;

#define assert(x) { cerr  << #x << ": "<< (x) << endl;}

vi primes;
bool isPrime[2*maxn];
int NP;

void calcPrimes()
{
	memset(isPrime,true,sizeof isPrime);
	isPrime[1]=false;
	for (int i=2;i<maxn;i++){
		if (isPrime[i]){
			primes.pB(i);
			for (LL j=i*1LL*i;j<maxn;j+=i)
				isPrime[j]=false;
		}
	}

}

//vector<LL> candid;

int BT(int num,int pos,int k , LL mul)
{
	if (k==0){
		//candid.pB(mul);
		return 1;
	}

	if (pos==NP) return 0;

	if (primes[pos]*mul>num*1LL) return 0;

	int ans=BT(num,pos+1,k,mul);

	LL res=mul*primes[pos];
	while (res<=num*1LL){
		ans +=BT(num,pos+1,k-1,res);
		res*=primes[pos];
	}

	return ans;
	
	
	
}

int main()
{

	calcPrimes();
	NP=primes.size();
	int tc,TC=0,K;
	int A,B;
	cin >> tc;
	while (tc--){

		cin >> A >> B >> K;

		int ans=0;
		//candid.clear();
		//BT(0,K,1);
		//cout << "candids are: ";
		
		int v2=BT(B,0,K,1);
		// for (int i=0;i<SZ(candid);i++){
		// 	cout << candid[i] << " ";
		// }
		// cout << v2 << endl;
		 int v1=BT(A-1,0,K,1);

		ans=(v2-v1);



		//cout << endl;
		cout << "Case #" << ++TC << ": " << ans << endl;
			

	}


	return 0;
}
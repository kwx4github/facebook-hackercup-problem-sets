// mars.ma
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;
const int MAXNUM = 10000001;  // 10^7 + 1

int main(void)
{
  vector<int> numbers(MAXNUM);
  // Eratosthenes
  auto i = 2;
  while (i*i  < MAXNUM) {
    for (auto c = 2, idx = 2*i; idx < MAXNUM; ++c, idx += i) {
      numbers[idx]++;
    }

    do {
      ++i;
    } while ((i*i < MAXNUM) && numbers[i]);
  }

  map<int, vector<int> > counts;
  for (int i = 2; i < MAXNUM; ++i) {
    if (numbers[i]) {
      counts[numbers[i]].push_back(i);
    } else {
      counts[1].push_back(i);
    }
  }

  int testcase;  cin >> testcase;
  for (int tc = 0; tc < testcase; ++tc) {
    int a, b, k;  cin >> a >> b >> k;
    int result = (counts.end() == counts.find(k) ? 0 : upper_bound(counts[k].begin(), counts[k].end(), b) - lower_bound(counts[k].begin(), counts[k].end(), a));
    cout << "Case #" << tc+1 << ": " << result << endl;
  }

  return 0;
}


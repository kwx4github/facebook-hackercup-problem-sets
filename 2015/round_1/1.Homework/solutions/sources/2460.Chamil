import java.io.*;
import java.util.*;

public class Homework {

    public static int[] primes = new int[10000002];
    public static boolean[] primeNess = new boolean[10000010];
    public static int c;

    public static void main(String [] args) {

        // The name of the file to open.
        String inputFileName = "Homework_input.txt";
        String outputFileName = "Homework_output.txt";


//int[] anArray = { 0};

        //System.out.println(arSearch(anArray, 0, 1, 0));

        genPrimes();

        String[] answers = processFile(inputFileName);


        writeToFile(answers, outputFileName);

    }


    public static void writeToFile(String[] answer, String fileName){
        String line = null;
        try {
            PrintWriter out = new PrintWriter(fileName);

            for (int i = 0; i < answer.length ; i++) {
                line = answer[i];
                if (line != null){
                    out.println(line);
                }
            }

            out.close();

        } catch (FileNotFoundException e){
            System.out.println("FileNotFoundException");
        }

    }

public static int arSearch(int [ ] numbers, int start, int end, int key)
{
       for (int index = start; index <= end; index++)
      {
           if ( numbers[index] == key ) 
                 return index;  //We found it!!!
      }
     // If we get to the end of the loop, a value has not yet
     // been returned.  We did not find the key in this array.
     return -1;
}


    public static String[] processFile(String fileName){

        String[] answers = null;
       try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            int numCases = Integer.parseInt(bufferedReader.readLine());
            answers = new String[numCases];

            int a, b, k;




            for (int i=0;i<numCases;i++) {
            	String nm = bufferedReader.readLine();
            	String[] tempNM = nm.split(" ");

            	a = Integer.parseInt(tempNM[0]);
            	b = Integer.parseInt(tempNM[1]);
                k = Integer.parseInt(tempNM[2]);

				answers[i] = "Case #" + (i + 1) + ": " + processCase(a, b, k);
            }


            bufferedReader.close();            

        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                   
            // Or we could just do this: 
            // ex.printStackTrace();
        }

        return answers;

    }

    public static boolean genPrimes(){
        primes[0] = 2;
        primes[1] = 3;
        c = 1;
        boolean prime = true;

        for(int i=4; i<10000001;i++){
            for(int j=0;j<=c;j++){
                if ((i % primes[j]) == 0 ){
                    prime = false;
                    break;
                }
                if ((Math.sqrt(i) + 1) <= primes[j]){
                    break;
                }
            }
            if (prime) {
                c++;
                primes[c] = i;
                primeNess[i] = true;
                //System.out.println(i);
            } else {
                prime = true;
            }
        }
        return true;

    }

    public static int processCase(int a, int b, int k){
        int cases = 0;
        int minKPrime = minKPrimacy(k);
        //System.out.println("minKPrime = " + minKPrime + " k = " + k);
        for (int i=a;i<=b;i++){
            if (i >= minKPrime){
                if (getPrimacy(i, k) == k){
                    cases++;
                }
            }
        }

        return cases;
    }

    public static int minKPrimacy(int k){
        int min = primes[0];
        for (int i=1;i<k;i++){
            if (min * primes[i] < 10000001){
                min = min * primes[i];
            } else {
                return min * primes[i];
            }
        }
        return min;
    }

    public static int getPrimacy(int num, int k){
        if (primeNess[num]){
            return 1;
        }
        int count = 0;
        int x;
        for (x = 0; x<=c ;x++){
            if ((num % primes[x]) == 0) {
                count++;
                if (count > k){
                    return count;
                }
                while ((num % primes[x]) == 0) {
                    num = num/primes[x];
                }
                if (primeNess[num]){
                    return count + 1;
                }
                
                //System.out.println(num + "  k=" + k + " c=" + count);
            } 

            if (num < primes[x + 1]){
                break;
            } 
        }
        return count;
    }

}
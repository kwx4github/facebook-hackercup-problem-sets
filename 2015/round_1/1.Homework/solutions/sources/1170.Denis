#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <math.h>
#include <fstream>
#include <iostream>
#include <vector>
#include <deque>
#include <map>
#include <list>
#include <cstdlib>
#include <algorithm>
using namespace std;

//2015 Hacker Cup Round 1, Labelmaker
//facebook.com/hackercup/problems.php?round=1437956993099239
//Disable warning messages C4996.
#pragma warning(disable:4996)

#define INPUT_FROM 0
#if INPUT_FROM
#define fromc from
#else
#define fromc cin
#endif

//long long fr(vector<long long>&, long long);

int main(int argc, char **argv)
{
	//ifstream from;
	const long long nmin=1, nmax=10000000, mmax = 8;
	int cases;
	long long i0, i1, j0, j1, r, r0, r1, q;
	long long n, m, nt, mt, res, rt, t, ax, bx;
	long long a, b, i, j, k;
	//char ch;
	//string sres[2]={"NO", "YES"};
	//string s, st, s0, s1, s2, sr;
	//long double dt;

	//if(INPUT_FROM) from.open("test.txt");
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);

	static int v[nmax+1];
	static int vv[nmax+1][mmax];
	//static char vc[nmax];
	//vector<vector<int> > vv(mmax);
	//deque<vector<long long> > dq;
	//typedef map<string, long long>::const_iterator CI;
	//int *pMemory, *pt, *pt0, *pt1;


	//for(int i=0;i<=nmax;++i) v[i]=1;
	for(int i=0;i<=nmax;++i) v[i] = 0;
	//v[0]=v[1]=0;
	i=2;
	while(i<=nmax){
		//while((i<=nmax)&&(v[i]>1)) ++i;
		while((i<=nmax)&&(v[i]>0)) ++i;
		if(i<=nmax){
			long long j = i;
			for(int k=1;j<=nmax;++k){
				long long t = 0;
				while(t+j <= nmax){
					for(int a=1;(a<i)&&(t+j<=nmax);++a){
						t += j;
						//v[t]*=k+1;
						++v[t];// new prime divisor
					}
					t += j;
				}
				j = j*i;
			}
		}
		i++;
	}

	//pMemory = (int *)calloc((nmax+1)*mmax, sizeof(int));

	for(int j=0;j<mmax;++j) vv[1][j] = 0;
	// v[t] - number of prime devisors of t
	for(int i=2;i<=nmax;++i){
		memcpy(vv[i], vv[i-1], mmax*sizeof(int));
		int t = v[i];
		++vv[i][t-1];
	}


	fromc>>cases;
	//ch = fgetc(stdin);
	for(int test=1;test<=cases;++test){
		fromc>>a>>b>>k;

		if(k <= mmax) r = vv[b][k-1] - vv[a-1][k-1];
		else r = 0;

		cout<<"Case #"<<test<<": "<<r<<endl;
		//cout<<"Case #"<<test<<": "<<res<<endl;
	}

	return 0;
}

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

#ifdef DEBUG
#define dbg(arg) (printf arg)
#define LOG cout << "line:" << __LINE__ << ":" << endl;
#else
#define dbg(arg)
#define LOG
#endif

vector<int> sieve_of_eratosthenes(int n) {
  vector<int> primes(n), min_factor(n);
  min_factor.resize(n);
  min_factor[0] = 0;
  min_factor[1] = 1;
  for (int i = 2; i < n; ++i)
    primes[i] = i;
  for (int i = 2; i*i < n; ++i) {
    if (primes[i]) {
	  min_factor[i] = i;
      for (int j = i*i; j < n; j+=i) {
        primes[j] = 0;
		if (min_factor[j] == 0) min_factor[j] = i;
	  }
	}
  }
  return min_factor;
}

vector<int> primacity(const vector<int> &min_factor, int &maxprimacy) {
	vector<int> p(min_factor.size());
	maxprimacy = 0;
	for (int i = 1; i < p.size(); ++i) {
		int n(i);
		while (n > 1) {
			const int fact = min_factor[n] == 0 ? n : min_factor[n];
			++p[i];
			while (n % fact == 0) {
				n /= fact;
			}
		}
		maxprimacy = max(maxprimacy, p[i]);
	}
	return p;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.precision(15);
	vector<int> min_factor(sieve_of_eratosthenes(10000001));
	int maxprimacy(0);
	vector<int> p(primacity(min_factor, maxprimacy));
    ll t;
	cin >> t;
	for (int i = 0; i < t; ++i) {
		int a, b, k;
		cin >> a >> b >> k;
		int count(0);
		if (k <= maxprimacy) {
			for (int j = a; j <= b; ++j) {
				if (p[j] == k) {
					++count;
				}
			}
		}
		cout << "Case #" << i+1 << ": " << count << "\n";
	}
    return 0;
}


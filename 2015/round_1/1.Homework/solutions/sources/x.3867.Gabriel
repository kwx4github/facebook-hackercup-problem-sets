#include <iostream>
#include <list>
#include <cmath>
using namespace std;

list<long int> primes;

bool is_prime(long int number){
    bool prime = true;
    for( list<long int>::iterator it = primes.begin(); it != primes.end() && (*it) <= sqrt(number) && prime; it++ ){
        if( !(number % (*it)) ){
            prime = false;
        }
    }
    return prime;
}

long int generate_prime(long int start){
    long int i = start + 2;
    while( !is_prime(i) )
        i += 2;
    return i;
}

long int find_primacity(long int n, long int goal){
    long int primacity = 0;
    long int prime;
    list<long int>::iterator it;

    for( it = primes.begin(); it != primes.end() && n != 1 && primacity <= goal && (*it) <= sqrt(n); it++ ){
        if( !(n % (*it)) ){
            primacity++;
            while( !(n % (*it)) ){
                n /= (*it);
            }
        }
    }
    if(n == 1 || primacity > goal) return primacity;
    if(is_prime(n)) return primacity + 1;
    it = primes.end();
    it--;
    prime = (*it);
    while(n != 1 && primacity <= goal ){
        prime = generate_prime(prime);
        primes.push_back(prime);
        cout << prime << endl;
        if( !(n % prime) ){
            primacity++;
            while( !(n % prime) ){
                n /= prime;
            }
        }
    }
    return primacity;
}

int main(){
    int number_of_cases;
    long int a,b,primacity;
    long int answer;

    primes.push_back(2);
    primes.push_back(3);
    cin >> number_of_cases;
    for(int i = 1; i <= number_of_cases; i++){
        answer = 0;
        cin >> a >> b >> primacity;
        for(long int j = a; j <= b; j++){
            if( find_primacity(j,primacity) == primacity )
                answer++;
        }
        cout << "Case #" << i <<": " << answer << endl;
    }
    return 0;
}

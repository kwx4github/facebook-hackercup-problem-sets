// pre-written code {{{
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <numeric>
#include <iostream>
#include <cassert>
#include <set>
#define FOR(i,n) for(int _n=n,i=0;i<_n;++i)
#define FR(i,a,b) for(int _b=b,i=a;i<_b;++i)
#define CL(x) memset(x,0,sizeof(x))
#define PN printf("\n");
#define MP make_pair
#define PB push_back
#define SZ size()
#define ALL(x) x.begin(),x.end()
#define FORSZ(i,v) FOR(i,v.size())
#define FORIT(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
using namespace std;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
///////////////////////////////////////////////////////////////////////////////////
// }}}

const int MAXV = 10000005;
int d[MAXV];
int primacity[MAXV];

void solve(){
  int A,B,K;
  scanf("%d %d %d",&A,&B,&K);
  int ret =0;
  for(int i = A; i<=B; i++){
    if(primacity[i]==K) ret++;
  }
  printf("%d\n",ret);
}

int main(){
  CL(d);
  for(int i=2;i<MAXV;i++) if(d[i]==0) {
    for(int j=i+i;j<MAXV;j+=i) d[j] = i;
  }
  for(int i=2;i<MAXV;i++) {
    set<int> dd;
    int x = i; 
    while(x>1) {
      if(d[x]==0) {
        dd.insert(x);
        x=1;
      } else {
        dd.insert(d[x]);
        x/=d[x];
      }
    }
    primacity[i]=dd.size();
  }
/*  
  for(int i=2;i<43;i++) {
    printf("%d %d\n",i,primacity[i]);
  }
*/

  int pvs; scanf("%d",&pvs);
  FR(ppp,1,pvs+1){
     printf("Case #%d: ",ppp);

     solve();
  }
}


// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

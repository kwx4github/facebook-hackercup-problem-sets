import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
	
	static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	static StringTokenizer datos = new StringTokenizer("");
	
	public static String next() throws IOException {
		while (!datos.hasMoreTokens()) {
			String s = in.readLine();
			if (s == null)
				return null;
			datos = new StringTokenizer(s);
		}
		return datos.nextToken();
	}
	
	public static Integer nextInt() throws IOException {
		String s = next();
		return s == null ? null : Integer.parseInt(s);
	}
	public static Long nextLong() throws IOException {
		String s = next();
		return s == null ? null : Long.parseLong(s);
	}
	
	static HashMap<Integer, Integer> primality;
	
	public static void main(String[] args) throws IOException 
	{
		double time = System.nanoTime() / 1000000;
		int t = nextInt();
		primality = new HashMap<Integer, Integer>();
		for(int c=1;c<=t;c++){
			int a = nextInt();
			int b = nextInt();
			int k = nextInt();
			int res = 0;
			for(int i=a;i<=b;i++){
				int p = 0;
				if(primality.containsKey(i)){
					p = primality.get(i);
				}else{
					p = powerFactorsCount(i);
					primality.put(i, p);
				}
				if(p == k) res++;
				
			}
			out.println("Case #"+c+": "+ res);
		}
		out.println((System.nanoTime()/1000000) - time);
		out.flush();
	}
	
	static int powerFactorsCount(int N) {
		ArrayList<Integer> facts = new ArrayList<Integer>();
		int d, top, p;
		int i;
		if ((N & 1) == 0) {
			facts.add(2);
			p = 0;
			while ((N & 1) == 0) {
				N >>= 1;
				p++;
			}
			facts.add(p);
		}
		d = 3;
		top = (int)Math.sqrt(N) + 1;
		while (d <= top) {
			if (N % d == 0) {
				facts.add(d);
				p = 0;
				while (N % d == 0) {
					N /= d;
					p++;
				}
				facts.add(p);
				top = (int)Math.sqrt(N) + 1;
			}
			d += 2;
		}
		if (N > 1) {
			facts.add(N);
			facts.add(1);
		}
		return facts.size()/2;
	}
}
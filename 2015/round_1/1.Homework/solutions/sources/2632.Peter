#include <iostream>
#include <vector>
using namespace std;

// RET: if(era[n]){ n is priemgetal }
// Looptijd: 0.1M: 0.004s; 1M: 0.060s; 10M: 0.712s
const int maxpriem = 10000011; // Grootste gezochte priemgetal of voor priemfactorisatie van N sqrt(maxN)+1 hardcoded
int era[maxpriem];
void eratosthenes(){
	memset(era,1,sizeof(int)*maxpriem);
	era[0] = era[1] = 0;

	int p = 2;
	int j;
	while(true){
		j = p * p;
		if(j > maxpriem)
		{
			break;
		}

		while(j <= maxpriem){
			era[j] = 0;
			j += p;
		}
		do { p++; } while (era[p] == 0);
	};
}
vector<int> primes;

int phiCalc[maxpriem];

int phi(int N){
	int result = 0;
	for(int i = 0; i < primes.size(); i++){
		int p = primes[i];
		if(p*p > N){
			break;
		}

		if(N%p == 0){
			result++;

			while(N % p == 0){
				N /= p;
			}
		}
	}
	if(N > 1){ result++; }

	return result;
}

void JeMoeder(){
	int A,B,K;
	cin >> A >> B >> K;

	int r = 0;
	for(;A<=B;A++){
		if(phiCalc[A] == K){
			r++;
		}
	}
	cout << r;
}

long primacity[maxpriem];

int main(){
	eratosthenes();
	for(int i = 0; i < maxpriem; i++){
		primacity[i] = 0;
		if(era[i]){
			primes.push_back(i);
		}
	}

	for(int i = 0; i < maxpriem; i++){
		phiCalc[i] = phi(i);
	}


	int runs; cin >> runs;
	for(int i = 1; i <= runs; i++){
		cout << "Case #" << i << ": ";
		JeMoeder();
		cout << endl;
	}
}

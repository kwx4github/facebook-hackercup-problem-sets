#include <cstdio>
#include <cmath>
#include <vector>
using namespace std;

bool isprime(int n) {
  int k = sqrt(n);
  for (int i=2; i<=k; i++) {
    if (n % i == 0) {
      return false;
    }
  }
  return true;
}
vector<int> p;
vector<int> numbers[8][500000];
int primality[10000001];
int main() {
  for (int i=2; i<=10000000; i++) {
    if (isprime(i)) {
      p.push_back(i);
    }
  }
  int psize = p.size();
  int count = 0;
  // primality = 1
  for (int i=0; i<psize; i++) {
    long long t = p[i];
    while (t <= 10000000) {
      numbers[0][i].push_back(t);
      primality[t] = 1;
      t *= p[i];
      count++;
    }
  }
  // primality > 2
  for (int r=1; r<8; r++) {
    for (int i=0; i<psize; i++) {
      //if (i%10000 == 0) fprintf(stderr, "%d %d %d\n", r, i, count);
      for (int j=0; j<i; j++) {
        if (1LL * p[i] * p[j] > 10000000) {
          break;
        }
        for (int k=0; k<numbers[r-1][j].size(); k++) {
          long long t = 1LL * numbers[r-1][j][k] * p[i];
          while (t <= 10000000) {
            numbers[r][i].push_back(t);
            primality[t] = r+1;
            t *= p[i];
            count++;
          }
        }
      }
    }
  }
  //fprintf(stderr, "%d\n", count);
  freopen("homework.out", "w", stdout);
  int n, a, b, c;
  scanf("%d", &n);
  for (int i=1; i<=n; i++) {
    scanf("%d %d %d", &a, &b, &c);
    count = 0;
    for (int j=a; j<=b; j++) {
      if (primality[j] == c) {
        count++;
      }
    }
    printf("Case #%d: %d\n", i, count);
  }
  fclose(stdout);
  return 0;
}


#include <iostream>
#include <memory.h>
#include <cmath>
#include <algorithm>
using namespace std;

int pri[10000002];
bool isPrime[10000001];

void eratosthenes() {
	int n = 10000000;
	memset(isPrime, 1, sizeof(isPrime));

	isPrime[0] = isPrime[1] = false;
	int sqrtn = int(sqrt(n));

	for (int i=2; i<=sqrtn; ++i) {
		if (isPrime[i]) {
			for (int j=i*i; j<=n; j+=i)
				isPrime[j] = false;
		}
	}
}

void get() {
	for (int i=2; i<=10000000; ++i)
		if (isPrime[i]) {
			for (int j=i; j<=10000000; j+=i)
				pri[j]++;
		}
}

void go() {
	int A, B, K;
	cin >> A >> B >> K;

	int ans = 0;
	for (int i=A; i<=B; ++i) {
		if (pri[i] == K)
			ans++;
	}

	// cout << factors[550] << endl;
	cout << ans << endl;
}

int main() {
	eratosthenes(); get();
	int T; cin >> T; for (int t=1; t<=T; ++t) {
		cout << "Case #" << t << ": ";
		go();
	}
}
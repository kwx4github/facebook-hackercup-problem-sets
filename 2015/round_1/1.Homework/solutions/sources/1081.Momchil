#include <iostream>
#include <stdio.h>
#include <vector>

#define pb push_back

using namespace std;

typedef long long LL;

const int LIM = 4000;

bool notPrime[LIM + 10];
vector< int > primes;
vector< int > group[16];

void erato() {
	notPrime[0] = true;
	notPrime[1] = true;
	for(LL i = 2; i <= LIM; i ++)
		if(notPrime[i] == false) {
			primes.pb(i);
			for(LL j = i * i; j <= LIM; j += i)
				notPrime[j] = true;
		}
}

int count(int x) {
	int ret = 0;
	for(int i = 0; i < (int)primes.size() && primes[i] * primes[i] <= x; i ++)
		if(x % primes[i] == 0) {
			ret ++;
			while(x % primes[i] == 0)
				x /= primes[i];
		}
	if(x != 1) ret ++;
	return ret;
}

void preprocess() {
	for(int i = 2; i <= 10000000; i ++)
		group[ count(i) ].pb(i);
}

void solve() {
	int a, b, k;
	scanf("%d %d %d", &a, &b, &k);
	
	if(k < 1 || k > 8) { 
		printf("0\n");
		return;
	}
	
	if(group[k][0] > b || group[k].back() < a) {
		printf("0\n");
		return;
	}
	
	int leftBound = 0, rightBound = (int)group[k].size() - 1;
	int le, ri, mid;
	
	le = 0, ri = (int)group[k].size() - 1;
	while(le <= ri) {
		mid = (le + ri) >> 1;
		if(group[k][mid] < a) {
			le = mid + 1;
		}
		else {
			leftBound = mid;
			ri = mid - 1;
		}
	}
	
	if(group[k][leftBound] > b) {
		printf("0\n");
		return;
	}
	
	le = 0, ri = (int)group[k].size() - 1;
	while(le <= ri) {
		mid = (le + ri) >> 1;
		if(group[k][mid] <= b) {
			rightBound = mid;
			le = mid + 1;
		}
		else {
			ri = mid - 1;
		}
	}
	
	if(group[k][rightBound] < a) {
		printf("0\n");
		return;
	}
	
	printf("%d\n", rightBound - leftBound + 1);
}

int main()
{
	erato();
	preprocess();
	
	int T;
	scanf("%d", &T);
	for(int iter = 1; iter <= T; iter ++) {
		printf("Case #%d: ", iter);
		solve();
	}

    return 0;
}

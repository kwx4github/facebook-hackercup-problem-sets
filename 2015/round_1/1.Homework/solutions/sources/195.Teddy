#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())

const int MAX_NUM = 10000000;
bool isPrime[MAX_NUM + 5];
int primacity[MAX_NUM + 5];
// primacity, idx
vector<pair<int, int> > bantu;
void init() {
	isPrime[0] = isPrime[1] = false;
	FOR(i, 2, MAX_NUM) isPrime[i] = true;
	for (int i = 2; i*i <= MAX_NUM; i += (i == 2)? 1: 2) if (isPrime[i]) {
		for (int j = i*i; j <= MAX_NUM; j += i) isPrime[j] = false;
	}
	
	memset(primacity, 0, sizeof primacity);
	FOR(i, 2, MAX_NUM) if (isPrime[i]) {
		for (int j = i; j <= MAX_NUM; j += i) primacity[j]++;
	}
	
	FOR(i, 2, MAX_NUM) bantu.PB(MP(primacity[i], i));
	sort(bantu.begin(), bantu.end());
}

int tc;
void solve() {
	int A, B, K;
	scanf("%d %d %d", &A, &B, &K);
	int st = lower_bound(bantu.begin(), bantu.end(), MP(K, A)) - bantu.begin();
	int en = upper_bound(bantu.begin(), bantu.end(), MP(K, B)) - bantu.begin();
	/*
	for (int i = st; i < en; i++) {
		printf("%d, ", bantu[i].second);
	}
	puts("");*/
	
	int ans = en - st;
	
	printf("Case #%d: %d\n", tc, ans);
}

int main() {
	init();
	int T;
	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

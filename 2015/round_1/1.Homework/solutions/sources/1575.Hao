#include <cstdio>
#include <cstring>
#include <algorithm>

const int MAX_N = 10000000 + 10086;
int prime[MAX_N];
int prime_n;
bool prime_b[MAX_N + 1];

int f[MAX_N + 1];

void make_prime()
{
	std::fill(prime_b, prime_b + MAX_N + 1, true);
	prime_b[0] = false;
	prime_b[1] = false;
	for (int i = 2; (long long)i * i <= MAX_N; ++i)
	{
		if (!prime_b[i]) continue;
		for (int j = i * 2; j <= MAX_N; j += i)
		{
			prime_b[j] = false;
		}
	}
	prime_n = 0;
	for (int i = 2; i <= MAX_N; ++i)
	{
		if (prime_b[i]) prime[prime_n++] = i;
	}
}

void gao()
{
	std::fill(f, f + MAX_N + 1, -1);
	f[1] = 0;
	for (int i = 0; i < prime_n; ++i)
	{
		int p = prime[i];
		for (int j = 1; (long long)j * p <= MAX_N; ++j)
		{
			if (f[j] < 0) continue;
			if (j % p == 0)
			{
				f[j * p] = f[j];
			}
			else
			{
				f[j * p] = f[j] + 1;
			}
		}
	}
}

int main()
{
	make_prime();
	gao();
//	printf("prime_n = %d\n", prime_n);
//	for (int i = 0; i < 10; ++i) printf("%d: %d\n", i, prime[i]);
//	for (int i = 1; i <= 15; ++i)
//	{
//		printf("%d: %d\n", i, f[i]);
//	}
	int t;
	scanf("%d", &t);
	for (int cs = 1; cs <= t; ++cs)
	{
		int a, b, k;
		scanf("%d%d%d", &a, &b, &k);
		int s = 0;
		for (int i = a; i <= b; ++i)
		{
			if (f[i] == k) ++s;
		}
		printf("Case #%d: %d\n", cs, s);
	}
	return 0;
}

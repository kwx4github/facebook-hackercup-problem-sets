#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max(), N = 1e7 + 1;
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

li lp[N], cnt[N];
vector <li> pr;

void factorize ()
{
    for (li i = 2; i < N; ++ i)
    {
        if (!lp[i])
        {
            lp[i] = i;
            pr.push_back(i);
        }

        for (li j = 0, sz = pr.size(); j < sz && pr[j] <= lp[i] && pr[j] * i < N; ++ j)
        {
            lp[i * pr[j]] = pr[j];
        }
    }

    for (li i = 2; i < N; ++ i)
	{
		for (li j = i; j > 1; )
		{
			for (li d = lp[j]; j % d == 0; j /= d);
			cnt[i] ++;
		}
	}
}

void solve ()
{
    factorize();

    li tests;
    scanf("%ld", &tests);

    for (li test = 1; test <= tests; ++ test)
    {
        li a, b, k;
        scanf("%ld %ld %ld", &a, &b, &k);
        li res = 0;
        for (li i = a; i <= b; ++ i)
            res += cnt[i] == k;
        printf("Case #%ld: %ld\n", test, res);
    }
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

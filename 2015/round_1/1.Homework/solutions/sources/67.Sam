package Y2015.Round1.A;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;

public class Main {
	private static final String fileName = "input/Y2015/Round1/homework";
	private static final String inputFileName = fileName + ".in";
	private static final String outputFileName = fileName + ".out";
	
	// Homework
	static final int MAX = 10000003, MAXPRS = 8; // 2 3 5 7 11 13 17 19
	public static void main(String[] args) throws Exception {
		final InputReader in = new InputReader(new FileInputStream(inputFileName));
		final OutputWriter out = new OutputWriter(new FileOutputStream(outputFileName));
		// PRECALC
		initDivisors(MAX);
		int[][]counts = new int[MAXPRS][MAX];
		for(int n = 2;n<MAX;n++){
			for(int i=0;i<MAXPRS;i++){
				counts[i][n] = counts[i][n-1];
			}
			int copy = n;
			int k=-1;
			while(copy > 1){
				k++;
				int d = divisor[copy];
				copy/=d;
				while((copy%d)==0){
					copy/=d;					
				}
			}
			counts[k][n]++;
		}
		// handle testcases
		int T = in.readInt();
		for(int t=1;t<=T;t++){
			int A = in.readInt(),
				B = in.readInt(),
				K = in.readInt()-1;
			int res = 0;
			if(K >= 0 && K < MAXPRS){
				res = counts[K][B]-counts[K][A-1];
			}
			out.printLine("Case #"+t+": "+res);
		}
		out.close();
	}
	
	static int[]divisor;
	static void initDivisors(int n)
    {		
		int max = (int)Math.sqrt(n);
        divisor = new int[n+1];
        for(int i=1;i<=n;i+=2){
        	divisor[i]=i;
        }
        for(int i=2;i<=n;i+=2){
        	divisor[i]=2;
        }
        int p, q;
        for (p=3;p<=max;p+=2)
        {
            if (divisor[p]==p)
            {
            	q=p*p;
            	while(q <= n){
            		if(divisor[q]==q){
            			divisor[q]=p;
            		}
            		q+=(p+p);
            	}
            }
        }
    }
	
	static class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public String readLine() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
	}

	static class OutputWriter {
		private final PrintWriter writer;

		public OutputWriter(OutputStream outputStream) {
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
					outputStream)));
		}

		public OutputWriter(Writer writer) {
			this.writer = new PrintWriter(writer);
		}

		public void print(Object... objects) {
			for (int i = 0; i < objects.length; i++) {
				if (i != 0)
					writer.print(' ');
				writer.print(objects[i]);
			}
		}

		public void printLine(Object... objects) {
			print(objects);
			writer.println();
		}

		public void close() {
			writer.close();
		}
	}
}
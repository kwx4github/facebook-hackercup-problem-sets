import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;

public class P1 {
    static final String PROBLEM_NAME = "p1";
    static final String INPUT_FILENAME = PROBLEM_NAME + ".in";
    static final String OUTPUT_FILENAME = PROBLEM_NAME + ".out";
    static final int MAX_N = 10000000;

    BufferedReader rd;
    PrintWriter wr;
    StringTokenizer tok = null;
    HashMap<Integer, ArrayList<Integer>> mapByK = new HashMap<Integer, ArrayList<Integer>>();

    public static void main(String[] args) {
        try {
            new P1().solve();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    String readToken() throws IOException {
        while (tok == null || !tok.hasMoreTokens()) {
            String line = rd.readLine();
            tok = new StringTokenizer(line);
        }
        return tok.nextToken();
    }

    int readInt() throws IOException {
        return Integer.parseInt(readToken());
    }

    private void solve() throws IOException {
        rd = new BufferedReader(new FileReader(new File(INPUT_FILENAME)));
        wr = new PrintWriter(new File(OUTPUT_FILENAME));
        int t = readInt();
        preprocess();
        for (int ti = 0; ti < t; ++ti) {
            int a = readInt();
            int b = readInt();
            int k = readInt();
            int result = subsolve(a, b, k);
            wr.println(String.format("Case #%d: %d", ti + 1, result));
        }
        rd.close();
        wr.close();
    }

    private int subsolve(int a, int b, int k) {
        if (!mapByK.containsKey(k)) {
            return 0;
        }
        ArrayList<Integer> items = mapByK.get(k);
        int result = 0;
        for (Integer item: items) {
            if ((item >= a) && (item <= b)) {
                result += 1;
            }
        }
        return result;
    }

    private void preprocess() {
        int[] er = new int[MAX_N + 1];
        Arrays.fill(er, 0);
        for (int p = 2; p <= MAX_N; ++p) {
            if (er[p] != 0) {
                continue;
            }
            int j = p;
            while (j <= MAX_N) {
                er[j] += 1;
                j += p;
            }
        }
//        int maxSize = 0;
//        int maxK = 0;
        for (int i = 1; i <= MAX_N; ++i) {
            int k = er[i];
            if (!mapByK.containsKey(k)) {
                mapByK.put(k, new ArrayList<Integer>());
            }
            mapByK.get(k).add(i);
//            int size = mapByK.get(k).size();
//            if (size > maxSize) {
//                maxSize = size;
//                maxK = k;
//            }
        }
//        System.out.println(String.format("maxSize = %d, maxK = %d", maxSize, maxK));
    }
}

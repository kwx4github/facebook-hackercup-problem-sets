#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int SIZE = 10000000 + 1;

vector<bool> isPrime;
vector<int> primality;

vector<vector<int>> primalities(30);

void sieve() {
	isPrime.assign(SIZE, true);
	primality.assign(SIZE, 0);

	for (int i = 2; i < SIZE; ++i) {
		if (isPrime[i]) {
			for (int j = i; j < SIZE; j += i) {
				isPrime[j] = false;
				primality[j]++;
			}
		}
		primalities[primality[i]].push_back(i);
	}
}

int solve() {
	int lo, hi, k;
	cin >> lo >> hi >> k;
	auto upper = upper_bound(primalities[k].begin(), primalities[k].end(), hi);
	auto lower = lower_bound(primalities[k].begin(), primalities[k].end(), lo);
	return upper - lower;
}

int main() {
	sieve();
	int T;
	cin >> T;
	for (int i = 1; i <= T; ++i) {
		cout << "Case #" << i << ": " << solve() << endl;
	}
}

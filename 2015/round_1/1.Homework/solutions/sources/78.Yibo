#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <bitset>
using namespace std ;

#define LBD(A, x) (lower_bound(A.begin(),A.end(), x) - A.begin())
#define UBD(A, x) (upper_bound(A.begin(),A.end(), x) - A.begin())

const int N = 10000009 ;
const int K = 32 ;
const int MAXP = N ;

vector<int> C[K] ;
vector<int> P ;

bitset<MAXP> isC ;

int p[MAXP] , cc[MAXP] ;

void Prepare() {
    for ( int i = 2 ; i < MAXP ; i ++ ) {
        if ( !isC[i] ) P.push_back(i) , p[i] = i , cc[i] = 1 , C[1].push_back(i) ;
        for ( int j = 0 ; j < P.size() && i*P[j] < MAXP ; j ++ ) {
            isC[i*P[j]] = 1 , p[i*P[j]] = P[j] ;
            if ( p[i] == P[j] ) cc[i*P[j]] = cc[i] ;
            else                cc[i*P[j]] = cc[i] + 1 ;
            C[cc[i*P[j]]].push_back(i*P[j]) ;
            if ( i % P[j] == 0 ) break ;
        }
    }
    for ( int i = 0 ; i < K ; i ++ )
        sort(C[i].begin() , C[i].end()) ;
}

int Solve(int l , int r , int k) {
    if ( k >= K ) return 0 ;
    else          return UBD(C[k] , r) - LBD(C[k] , l) ;
}

int main() {
    freopen("A.in" , "r" , stdin) ;
    freopen("A.out", "w" ,stdout) ;
    
    Prepare() ;
    int Test ; cin >> Test ;
    for ( int i = 1 ; i <= Test ; i ++ ) {
        int l , r , k ; cin >> l >> r >> k ;
        cout << "Case #" << i << ": " << Solve(l , r , k) << "\n" ;
    }
}


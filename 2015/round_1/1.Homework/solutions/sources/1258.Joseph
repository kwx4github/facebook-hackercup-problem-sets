
#include <bits/stdc++.h>

#define REP(i, a) for( int i = 0; i < a; i++ )
#define RFOR(i,x,y) for(int i = x; i>= y; i--)
#define FOR(i,x,y) for (int i = x; i < y; i++)
#define ITFOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define VE vector <int>
#define mset(A,x) memset(A, x, sizeof A)
#define PB push_back
#define ones(x) __builtin_popcount(x)
#define cua(x) (x)*(x)
#define debug(x) cout <<#x << " = " << x << endl
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
#define LSOne(S) (S&(-S))

using namespace std;

#define ll long long
#define lli long long int
#define PI acos(-1.0)
#define ii pair<int,int>
#define inf_ll (((1LL<<62)-1)<<1)+1
#define inf_i (1<<30)-1

int maxx=10000002;
static int NP[10000005];

struct pr
{
    int val,num;
    pr(){}
    pr(int a,int b):val(a),num(b){}

    bool operator<(pr aux) const
    {
        if(num!=aux.num)
            return num<aux.num;
        return val<aux.val;
    }
};

static pr arr[10000005];

void pre()
{
    mset(NP,0);
    FOR(i,2,maxx)
    {
        if(NP[i]==0)
        {
          for(int j=i;j<maxx;j+=i)
                NP[j]++;
        }
    }
    FOR(i,2,maxx)
        arr[i]=pr(i,NP[i]);
    sort(arr,arr+maxx);
}

bool cmp1(pr a1,const int rand)
{
    return a1.num<rand;
}

bool cmp2(const int rand,pr a1)
{
    return a1.num>rand;
}

bool cmp3(pr a1,const int rand)
{
    return a1.val<rand;
}

bool cmp4(const int rand,pr a1)
{
    return a1.val>rand;
}


int main(){
/*
   freopen("input.txt", "r", stdin);
   freopen("out.txt", "w", stdout);
*/
    int test,a,b,k;
    scanf("%d",&test);
    pre();
    REP(t,test)
    {
        scanf("%d %d %d",&a,&b,&k);
        int ini=(lower_bound(arr,arr+maxx,k,cmp1)-arr);
        int fin=(upper_bound(arr,arr+maxx,k,cmp2)-arr);
        int r1=lower_bound(arr+ini,arr+fin,a,cmp3)-(arr+ini);
        int r2=upper_bound(arr+ini,arr+fin,b,cmp4)-(arr+ini);
        printf("Case #%d: %d\n",t+1,r2-r1);

    }
/*
    fclose(stdin);
    fclose(stdout);
*/

    return 0;
}




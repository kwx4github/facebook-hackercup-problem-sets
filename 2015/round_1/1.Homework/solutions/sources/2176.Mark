package main

import "fmt"

type Record struct {
	Prime  uint32
	JumpTo *uint32
}

var records [10000001]*Record

func solve(n int) {
	var start, end uint32
	var v uint64
	fmt.Scanf("%d %d %d\n", &start, &end, &v)

	matches := 0
	for i := start; i <= end; i++ {
		primes := make(map[uint32]struct{})

		temp := records[i]
		for {
			primes[temp.Prime] = struct{}{}
			if temp.JumpTo == nil {
				break
			}
			temp = records[*temp.JumpTo]
		}

		if uint64(len(primes)) == v {
			matches++
		}
	}
	fmt.Printf("Case #%d: %d\n", n, matches)
}

func main() {
	c := uint32(0)
	stop := uint32(len(records))
	for n := uint32(2); n < stop; n++ {
		if records[n] != nil {
			continue
		}

		records[n] = &Record{
			Prime: n,
		}

		c = n * 2
		for m := uint32(2); c < stop; m++ {
			if records[c] == nil {
				jumpValue := m
				records[c] = &Record{
					Prime:  n,
					JumpTo: &jumpValue,
				}
			}
			c = n * (m + 1)
		}
	}

	var N int
	fmt.Scanf("%d\n", &N)
	for i := 1; i <= N; i++ {
		solve(i)
	}
}

#include <array>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <functional>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <sstream>
using namespace std;

#define REP(i, n) for(int i = 0; i < (int)(n); ++ i)
#define FOR(i, b, e) for(auto i = b; i < e; ++ i)
#define all(x) (x).begin(), (x).end()

int A, B, K;

#define MAXN 1000 * 10000
bool isprime[MAXN + 1];
int factor[MAXN + 1];
int primacity[MAXN + 1];
vector<int> primes;

void init()
{
	const int n = 1000 * 10000;
	memset(isprime, true, sizeof isprime);
	memset(factor, -1, sizeof factor);
	memset(primacity, 0, sizeof primacity);
	isprime[0] = isprime[1] = false;

	for(int i = 2; i <= n; ++ i) {
		if(! isprime[i]) continue;
		primes.push_back( i );
		factor[i] = -1;

		for(int j = i + i; j <= n; j += i) {
			isprime[j] = false;
			factor[j] = i;
		}
	}

	for(int i = 2; i <= n; ++ i) {
		int x = i;
		int &r = primacity[i];
		r = 0;

		while(x > 1) {
			int p = factor[x];
			if(p == -1) break;
			r ++;
			while(x % p == 0) x /= p;
		}
		if(x > 1) r ++; // prime
//		printf("%d : %d\n", i, r);
	}
}

int go()
{
	int ans = 0;
	for(int i = A; i <= B; ++ i) {
		if(primacity[i] == K)
			ans ++;
	}
	return ans;
}

int main() {
	int T;
	cin >> T;

	init();

	for(int k = 1; k <= T; ++ k) {
		cin >> A >> B >> K;
		printf("Case #%d: %d\n", k, go());
	}

	return 0;
}


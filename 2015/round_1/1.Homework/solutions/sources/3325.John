/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookhackercupfirstround1;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

/**
 *
 * @author John
 */
public class FacebookHackerCupFirstRound1 {

    private static int[] primes = new int[10000000];
    private static int[] primacity = new int [10000001];
    
    private static int primesLength;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException{
        Scanner     inputStream     = null;
        PrintStream outputStream    = null;
        
        primes[0] = 2;
              
        int lowerBound = 0;
        int upperBound = 0;
        int targetPrimacity = 0;
        int counter = 0;
        
        int numberOfProblems = 0;          // Just an initialization value.
        try
        {
            inputStream     = new Scanner       (new File("input.txt"));
            outputStream    = new PrintStream   (new FileOutputStream("output.txt"));
            
            if(inputStream.hasNextInt())
            {
                numberOfProblems = inputStream.nextInt();
                
                if(numberOfProblems > 100)
                {
                    // I have been misinformed!!!
                    numberOfProblems = 100;
                }
            }
            
            inputStream.nextLine();
            
            for(int problemNumber = 1; problemNumber <= numberOfProblems; problemNumber++)
            {
                counter = 0;
                
                lowerBound = inputStream.nextInt();
                upperBound = inputStream.nextInt();
                targetPrimacity = inputStream.nextInt();
                
                populate();

                for (int i = lowerBound; i <= upperBound; i++)
                {
                    if(primacity[i] == targetPrimacity)
                    {
                        counter++;
                    }
                }

                if(problemNumber > 1)
                {
                    System.out.print("\nCase #" + problemNumber + ": " + counter);
                    outputStream.print("\nCase #" + problemNumber + ": " + counter);
                }
                else
                {
                    System.out.print("Case #" + problemNumber + ": " + counter);
                    outputStream.print("Case #" + problemNumber + ": " + counter);
                }
            }
        }
        finally
        {
            if (inputStream != null)
            {
                inputStream.close();
            }
            if (outputStream != null)
            {
                outputStream.close();
            }
        }
    }
    static private void populate()
    {
        int i;
        int j;
        int k;
        int stopPoint;
        
        for (k = 2; k <= 10000000; k++)
        {
            if(primacity[k] == 0)
            {
                primes[primesLength] = k;
                primesLength++;
                
                stopPoint = 10000000 / k;

                for (j = 1; j <= stopPoint; j++)
                {
                    primacity[j * k]++;
                }
            }
            else
            {
                // Do nothing.
            }
        }
    }
}

#include<bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define RFOR(i,a,b) for(int i=(b-1);i>=(a);i--)
#define FOREACH(i, c) for( __typeof( (c).begin() ) i = (c).begin(); i != (c).end(); ++i )
#define REP(i,n) for(int i=0;i<(n);i++)
#define RREP(i,n) for(int i=(n)-1;i>=0;i--)

#define INF INT_MAX/3
#define PB push_back
#define MP make_pair
#define ALL(a) (a).begin(),(a).end()
#define SET(a,c) memset(a,c,sizeof a)
#define CLR(a) memset(a,0,sizeof a)
#define PII pair<int,int>
#define PCC pair<char,char>
#define PIC pair<int,char>
#define PCI pair<char,int>
#define FST first
#define SEC second
#define VS vector<string>
#define VI vector<int>
#define DEBUG(x) cout<<#x<<": "<<x<<endl
#define MIN(a,b) (a>b?b:a)
#define MAX(a,b) (a>b?a:b)
#define PI acos(-1.0)
#define RADIANS(x) (((1.0 * x * PI) / 180.0))
#define DEGREES(x) (((x * 180.0) / (1.0 * pi)))
#define SINE(x) (sin(RADIANS(x)))
#define COSINE(x) (cos(RADIANS(x)))
#define SETBIT(x, i) (x |= (1 << i))
#define TANGENT(x) (tan(RADIANS(x)))
#define ARCSINE(x) (DEGREES((asin(x))))
#define RESETBIT(x, i) (x &= (~(1 << i)))
#define ARCCOSINE(x) (DEGREES((acos(x))))
#define ARCTANGENT(x) (DEGREES((atan(x))))
#define FASTIO ios_base::sync_with_stdio(0);cin.tie();
#define IN scanf
#define OUT printf
#define SI(a) scanf("%d",&a)
#define SL(a) scanf("%lld",&a)
#define SD(a) scanf("%lf",&a)
#define OI(a) printf("%d",a)
#define OL(a) printf("%lld",a)
#define OD(a) printf("%lf",a)
#define LL long long
#define ULL unsigned long long
#define EPS 1e-9
#define MOD 1000000007
#define LIM 4

//TYPE CONVERSION
template<typename T>inline string toString(T a){ostringstream os("");os<<a;return os.str();}
template<typename T>inline LL toLong(T a){LL res;istringstream os(a);os>>res;return res;}
template<typename T>inline int toInt(T a){int res;istringstream os(a);os>>res;return res;}
template<typename T>inline double toDouble(T a){double res;istringstream os(a);os>>res;return res;}
//MATHEMATICS
template<typename T>inline T  SQ(T a){return a*a;}
template<typename T>inline T GCD(T a, T b){if (b == 0)return a;else return GCD(b, a % b);}
template<typename T>inline T LCM(T a, T b){LL res=a*b; res/=GCD(a,b);return res;}
template<typename T>inline ULL BIGMOD(T a, T b, T m){if (b == 0)return 1;else if (b % 2 == 0)return SQ(BIGMOD(a, b / 2, m)) % m;else return (a % m*BIGMOD(a, b - 1, m)) % m;}
template<typename T>inline VS PARSE(T str){VS res;string s;istringstream os(str);while(os>>s)res.PB(s);return res;}
template<typename T>inline ULL  DIST(T A,T B){ULL res=(A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y);return res;}
template<typename T>inline LL  CROSS(T A,T B,T C){return (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y);}
template<typename T>inline double cosAngle(T a,T b,T c){double res=a*a+b*b-c*c;res=res/(2*a*b);res=acos(res);return res;}
template<typename T>inline T POWER(T base,int po){T res=1;if(base==0)return 0;FOR(i,0,po)res*=base;return res;}
//BIT
template<typename T>inline bool IS_ON(T mask,T pos){return mask&(1<<pos);}
template<typename T>inline int OFF(T mask,T pos){return mask^(1<<pos);}
template<typename T>inline int ON(T mask,T pos){return mask|(1<<pos);}
//MOVEMENT INSIDE GRID
template<typename T>inline bool INSIDE_GRID(int R,int C,int ro,int clm){if(R>=0&&C>=0&&R<ro&&C<clm)return 1;return 0;}
template<typename T>inline void PRINT_GRID(T GRID,int ro,int clm){DEBUG(GRID);FOR(i,0,ro){FOR(j,0,clm)cout<<GRID[i][j]<<" ";puts("");}}

//int dx4[]= {0,0,1,-1};
//int dy4[]= {-1,1,0,0};
//int dx8[]={0,0,1,1,1,-1,-1,-1};
//int dy8[]={1,-1,-1,0,1,-1,0,1};
#define MX 10000000
bool mark[MX];
struct prime_info
{
    int prime_val;
    prime_info(){}
    prime_info(int _prime_val)
    {
        prime_val=_prime_val;
    }
}XX;
vector<prime_info>prime;
int NO_OF_PRIME;
int mp[MX];
void seive()
{
    mark[0]=mark[1]=1;
    for(int i=4;i<=MX;i+=2)mark[i]=1;
    int cnt=1;
    for(int i=3;i*i<=MX;i+=2)
    if(!mark[i])
    {
        for(int j=3*i;j<=MX;j+=2*i)mark[j]=1;

    }
    prime.PB(prime_info(2));
    mp[2]=0;
    for(int i=3;i<=MX;i+=2)if(!mark[i])prime.PB(prime_info(i)),mp[i]=cnt++;
 NO_OF_PRIME=prime.size();
}
vector<int>store[10000];

void prime_factor(int N)
{
    int cnt=0;
    int M=N;
    for(int i=0;mark[N]&&N>1&&i<NO_OF_PRIME;i++)
    {
        if(N%prime[i].prime_val==0)cnt++;
       while(N%prime[i].prime_val==0)
       {
        N/=prime[i].prime_val;
       }
    }
    if(!mark[N])
    {
       cnt++;
    }
    if(store[cnt].size()==0)store[cnt].PB(-1);
    store[cnt].PB(M);
}
//
//int upper_bound(int k,int n)
//{
//    int lo=0,hi=store[k].size()-1,res,mid;
//    while(lo<=hi)
//    {
//        mid=(lo+hi)/2;
//        if(store[k][mid]>n)hi=mid-1;
//        else lo=mid+1,res=mid;
//    }
//    FOR(i,0,min((int)store[k].size(),20))cout<<store[k][i]<<" u ";
//    DEBUG(res);
//    return res;
//}
int lower_bound(int k,int n)
{
    int lo=0,hi=store[k].size()-1,res=0,mid;
    while(lo<=hi)
    {
        mid=(lo+hi)/2;
        if(store[k][mid]>n)hi=mid-1;
        else lo=mid+1,res=mid;
    }
//    FOR(i,0,min((int)store[k].size(),20))cout<<store[k][i]<<" l ";
//    DEBUG(res);
    return res;
}
int main()
{
freopen("homework.txt","r",stdin);
freopen("homework_output_final.txt","w",stdout);
    seive();
    FOR(i,1,MX)prime_factor(i);
    //DEBUG(NO_OF_PRIME);
    int ks,a,b,k,res;
    scanf("%d",&ks);
    FOR(cas,1,ks+1)
    {
        scanf("%d%d%d",&a,&b,&k);
        if(k>1000) res=0;
        else res=lower_bound(k,b)-lower_bound(k,a-1);
        printf("Case #%d: %d\n",cas,res);
    }
    return 0;
}
/*

*/

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Collections;

namespace Round1Problem1
{
	class MainClass
	{
		static Dictionary<int, int> precalc = new Dictionary<int, int>();

		static void LoadPrecalc()
		{
			var sr = new StreamReader("precalc.txt");

			while (!sr.EndOfStream) {
				int[] num = sr.ReadLine().Trim().Split(' ').Select(s => Int32.Parse(s)).ToArray();
				precalc.Add(num[0], num[1]);
				
			}

			sr.Close();
		}

		public static void Main(string[] args)
		{
			var sr = new StreamReader("input1.txt");
			var sw = new StreamWriter("output1.txt");
			LoadPrecalc();

			sr.ReadLine(); // T

			int i = 1;
			while (!sr.EndOfStream) {
				int[] num = sr.ReadLine().Trim().Split(new []{ ' ' }).Select(s => Int32.Parse(s)).ToArray();
				if (num.Length < 1)
					continue;
				string ans = Problem1(num[0], num[1], num[2]);
				sw.WriteLine("Case #{0}: {1}", i, ans);
				Console.WriteLine("Case #{0}: {1}", i, ans);
				i++;
			}

			sw.Close();
			sr.Close();
		}

		static string Problem1(int A, int B, int K)
		{
			int count = 0;

			for (int n = A; n <= B; n++) {
				if (precalc[n] == K)
					count++;
			}

			return count.ToString();		
		}


		static int Factorize(int input)
		{
			if (precalc.ContainsKey(input))
				return precalc[input];
			var num = input;
			var factors = new List<long>();
			var maxFactor = 0;

			while (num > 1) {
				var nextFactor = 2;
				if (num % nextFactor > 0) {
					nextFactor = 3;
					do {
						if (num % nextFactor == 0) {
							break;
						}

						nextFactor += 2;
					} while (nextFactor < num);
				}

				num /= nextFactor;
				factors.Add(nextFactor);
				if (nextFactor > maxFactor) {
					maxFactor = nextFactor;
				}

				if (!precalc.ContainsKey(num))
					precalc.Add(num, factors.Distinct().Count());
			}

			if (!precalc.ContainsKey(input))
				precalc.Add(input, factors.Distinct().Count());

			return factors.Distinct().Count();
		}


		public static int ApproximateNthPrime(int nn)
		{
			double n = (double)nn;
			double p;
			if (nn >= 7022) {
				p = n * Math.Log(n) + n * (Math.Log(Math.Log(n)) - 0.9385);
			} else if (nn >= 6) {
				p = n * Math.Log(n) + n * Math.Log(Math.Log(n));
			} else if (nn > 0) {
				p = new int[] { 2, 3, 5, 7, 11 }[nn - 1];
			} else {
				p = 0;
			}
			return (int)p;
		}

		// Find all primes up to and including the limit
		public static BitArray SieveOfEratosthenes(int limit)
		{
			BitArray bits = new BitArray(limit + 1, true);
			bits[0] = false;
			bits[1] = false;
			for (int i = 0; i * i <= limit; i++) {
				if (bits[i]) {
					for (int j = i * i; j <= limit; j += i) {
						bits[j] = false;
					}
				}
			}
			return bits;
		}

		public static List<int> GeneratePrimesSieveOfEratosthenes(int n)
		{
			int limit = ApproximateNthPrime(n);
			BitArray bits = SieveOfEratosthenes(limit);
			List<int> primes = new List<int>();
			for (int i = 0, found = 0; i < limit && found < n; i++) {
				if (bits[i]) {
					primes.Add(i);
					found++;
				}
			}
			return primes;
		}
	}


}

#if defined(__GNUG__) && !defined(__clang__)
#include <bits/stdc++.h>
#endif

#define inf(T) (numeric_limits<T>::min())
#define sup(T) (numeric_limits<T>::max())
#define rep(i,n) for (int i = 0; i < (n); i++)
#define asc(c) begin(c), end(c)
#define desc(c) reverse_iterator<decltype(c)::iterator>(c.end()), reverse_iterator<decltype(c)::iterator>(c.begin())
#define ascend(l,r) l = max(l, r)
#define descend(l,r) l = min(l, r)
#define mp(...) make_pair(__VA_ARGS__)
#define mt(...) make_tuple(__VA_ARGS__)

using namespace std;

using ll = long long;
using ld = long double;

template <class Key>          using uset = unordered_set<Key>;
template <class Key, class T> using umap = unordered_map<Key, T>;

int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);

  const int N = 1e7;

  vector<int> primes;
  {
    vector<bool> table(N + 1, true);
    table[0] = table[1] = false;
    for (int i = 2; i <= N; i++) {
      if (!table[i]) continue;
      primes.push_back(i);
      for (int j = i * 2; j <= N; j += i) {
        table[j] = false;
      }
    }
  }

  vector<int> primacity(N + 1);
  for (int prime : primes) {
    for (int i = prime; i <= N; i += prime) {
      primacity[i]++;
    }
  }

  int T;
  cin >> T;
  rep(t,T) {
    int A, B, K;
    cin >> A >> B >> K;

    int n = count(primacity.begin() + A, primacity.begin() + B + 1, K);

    cout << "Case #" << t + 1 << ": " << n << endl;
  }

  return 0;
}

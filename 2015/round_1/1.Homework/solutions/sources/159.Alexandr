#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

class Solver
{
protected:
	virtual void solveTest(int test)
	{
	}
public:
	Solver()
	{

	}
	virtual ~Solver(){}

	void solve()
	{
		int T;
		scanf("%d",&T);
		for(int i=1;i<=T;i++)
		{
			solveTest(i);
		}
	}
};

class In
{
public:
	int nextInt() const
	{
		int t;
		scanf("%d",&t);
		return t;
	}
	string next() const
	{
		string s;
		cin>>s;
		return s;
	}
}in;

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const int dx[4]={-1,0,1,0};
	const int dy[4]={0,1,0,-1};

class Homework:public Solver
{
	const static int MAXV=10000001;
	static int sito[MAXV];
	static int val[MAXV];

	class IsFine
	{
		int k;
	public:
		IsFine(int k):k(k){}
		bool operator()(int i)
		{
			return i==k;
		}
	};

	void solveTest(int test)
	{
		int a,b,k;
		a=in.nextInt();
		b=in.nextInt();
		k=in.nextInt();
		printf("Case #%d: %d\n",test, count_if(val+a,val+b+1,IsFine(k)));
	}

public:
	static void init()
	{
		memset(sito,0,sizeof(sito));
		for(int i=2;i*i<MAXV;i++)
			if(!sito[i])
				for(int j=i*i;j<MAXV;j+=i)
					sito[j]=i;
		for(int i=2;i<MAXV;i++)
			if(!sito[i])
				sito[i]=i;
		memset(val,0,sizeof(val));
		for(int i=2;i<MAXV;i++)
		{
			int t=i;
			while(t>1)
			{
				int k=sito[t];
				while(t%k==0)
					t/=k;
				val[i]++;
			}
		}
	}
};

int Homework::sito[Homework::MAXV];
int Homework::val[Homework::MAXV];

int main()
{
	Homework::init();
	Homework().solve();
}

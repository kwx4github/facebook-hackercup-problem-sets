#include <iostream>
#include <utility>
#include <vector>
#include <unordered_set>

using namespace std;

std::vector< std::pair<int, int> > factor_table(10e7+1);
std::vector<int> table(10e7+1);

void fill_sieve( int n )
{
    for( int i = 1; i <= n; ++i ) {
        if (i & 1)
            factor_table[i] = std::pair<int, int>(i, 1);
        else
            factor_table[i] = std::pair<int, int>(2, i>>1);
    }
    for( int j = 3, j2 = 9; j2 <= n; ) {
        if (factor_table[j].second == 1) {
            int i = j;
            int ij = j2;
            while (ij <= n) {
                factor_table[ij] = std::pair<int, int>(j, i);
                ++i;
                ij += j;
            }
        }
        j2 += (j + 1) << 2;
        j += 2;
    }
}

int factor( int num )
{
    unordered_set<int> factors(30);
    do {
        factors.insert(factor_table[num].first);
        num = factor_table[num].second;
    } while (num != 1);
    return factors.size();
}

void doit() {
  for (int i = 2; i < 10e7+1; ++i) {
    table[i] = factor(i);
  }
}

int main() {
  fill_sieve(10e7);
  doit();
  int T;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int A, B, K;
    cin >> A >> B >> K;
    int res = 0;
    for (int i = A; i <= B; ++i)
      res += (table[i]) == K;
    cout << "Case #" << t << ": " << res << endl;
  }
}

package com.mantastyle.hackercup.round1

import java.io._

import scala.collection.mutable.ArrayBuffer

object Homework extends App {
  def solve(primacities: IndexedSeq[Int], a: Int, b: Int, k: Int): Int = {
    var i = a
    var count = 0
    while (i <= b) {
      if (primacities(i) == k) {
        count += 1
      }
      i += 1
    }
    count
  }

  def computePrimes(limit: Int): Seq[Int] = {
    val sieve = ArrayBuffer.fill(limit + 1)(true)
    val primes = ArrayBuffer[Int]()
    var p = 2
    while (p <= limit) {
      primes += p
      var i = p
      while (i <= limit) {
        sieve(i) = false
        i += p
      }
      while (p <= limit && !sieve(p)) {
        p += 1
      }
    }
    primes
  }

  def computePrimacities(primes: Seq[Int], limit: Int): IndexedSeq[Int] = {
    val primacities = ArrayBuffer.fill(limit + 1)(0)
    for (p <- primes.takeWhile(_ <= limit)) {
      var i = p
      while (i <= limit) {
        primacities(i) += 1
        i += p
      }
    }
    primacities
  }

  val limit = 10000000
  val primacities = computePrimacities(computePrimes(limit), limit)
  val reader = new BufferedReader(new FileReader("input.txt"))
  val writer = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")))
  val numCases = reader.readLine().toInt
  for (i <- 1 to numCases) {
    val Seq(a, b, k) = reader.readLine().split(" ").toSeq.map(_.toInt)
    val result = solve(primacities, a, b, k)
    writer.println(s"Case #$i: $result")
    println(s"Case #$i: $result")
  }
  writer.close()
}

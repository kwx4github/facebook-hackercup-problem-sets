#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define FOREACH(container, it) \
   for(typeof(container.begin()) it=container.begin(); it!=container.end(); it++)
#define EXP(i, s) for (int i = (s); i; i = qn[i])
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

#define MAXP 4000
#define MAXN 10000100

vi prime_list;
bool not_prime[MAXN];
int prime_factor_count[MAXN];
vi K_list[10];

int main(int argc, char **argv){
  int T;
  cin >> T;
  FOR(p, 2, MAXN) {
    if (!not_prime[p]) {
      prime_list.pb(p);
      for (int j = p; j < MAXN; j += p) {
        not_prime[j] = true;
        prime_factor_count[j]++;
      }
    }
  }
  FOR(i, 2, MAXN) {
    K_list[prime_factor_count[i]].pb(i);
  }
  FOR(ca, 1, T+1) {
    int A, B, K;
    cin >> A >> B >> K;
    if (K > 10) {
      printf("Case #%d: 0\n", ca);
      continue;
    }
    int start = lower_bound(ALL(K_list[K]), A) - K_list[K].begin();
    int end = lower_bound(ALL(K_list[K]), B) - K_list[K].begin();
    while (end >= 0 && K_list[K][end] > B) end--;
    printf("Case #%d: %d\n", ca, end - start + 1);
  }
  return 0;
}

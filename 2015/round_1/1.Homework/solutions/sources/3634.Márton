import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

class Main {
	
	private static final int LIMIT = (int) 1e7;
	private static ArrayList<Integer> primes = new ArrayList<>(LIMIT) ;
	private static HashMap<Integer, Integer> numOfPrimes = new HashMap<>(LIMIT*10) ;
	private static HashSet<Integer> primeSet = new HashSet<>(LIMIT) ;
	static {
		numOfPrimes.put(1, 0) ;
		for (int i = 2; i <= LIMIT; ++i) {
			if (i % 1000 == 0)
				System.out.println("Checking " + i);
			boolean found = false ;
			for (int j = 0; j < primes.size(); ++j) {
				long prime = primes.get(j);
				if (prime*prime > i) {
					break ;
				}
				if (i % prime == 0) {
					found = true ;
					break ;
				}
			}
			if (!found) {
				primes.add(i) ;
				primeSet.add(i) ;
				numOfPrimes.put(i, 1) ;
			}
		}
		
		for (int i = 2; i <= LIMIT; ++i) {
			if (i % 1000 == 0)
				System.out.println("Calculating " + i + " / " + numOfPrimes.size());		
			
			
			numOfFactors(i) ;
			//System.out.println(i + " " + numOfPrimes.get(i));
		}		
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new FileReader(
				"input.txt"));
		PrintWriter printWriter = new PrintWriter(new FileOutputStream(
				"output.txt"));

		int inputNum = scanner.nextInt();
		for (int caseNum = 1; caseNum <= inputNum; ++caseNum) {

			int small = scanner.nextInt();
			int large = scanner.nextInt();
			int count = scanner.nextInt();

			int db = 0 ;
			
			for (int i = small; i <= large; ++i) {
				int k = numOfPrimes.get(i) ;
				if (k == count) ++db ;
			}			
			
			printWriter.println("Case #" + caseNum + ": " + db);
		}
		scanner.close();
		printWriter.close();
		
		
		System.out.println("1: " + numOfPrimes.get(1));
		System.out.println("2: " + numOfPrimes.get(2));
		System.out.println("3: " + numOfPrimes.get(3));
		System.out.println("4: " + numOfPrimes.get(4));
		System.out.println("5: " + numOfPrimes.get(5));
		System.out.println("6: " + numOfPrimes.get(6));
		System.out.println("7: " + numOfPrimes.get(7));
		System.out.println("8: " + numOfPrimes.get(8));
		System.out.println("9: " + numOfPrimes.get(9));
		System.out.println("10: " + numOfPrimes.get(10));
		System.out.println("11: " + numOfPrimes.get(11));
		System.out.println("12: " + numOfPrimes.get(12));
		System.out.println("15: " + numOfPrimes.get(15));
		System.out.println("16: " + numOfPrimes.get(16));
		System.out.println("99: " + numOfPrimes.get(99));
		System.out.println("100: " + numOfPrimes.get(100));
		
	}

	private static void numOfFactors(int num) {
		int orignum = num ;
		if (primeSet.contains(num))
			return ;
		for (int j = 0; j < primes.size(); ++j) {
			long prime = primes.get(j) ;
			if (prime*prime > num) {
				break ;
			}
			if (num % prime == 0) {
				do {
					num = (int) (num/prime) ;
				} while (num % prime == 0) ;
				int calc = 0 ;
				calc = numOfPrimes.get(num) ;
				numOfPrimes.put(orignum, calc+1);
				return ;
			}
		}
		numOfPrimes.put(orignum, 0);
	}

}
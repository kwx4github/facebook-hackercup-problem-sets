#include <iostream>
#include <ctime>
#include <fstream>
#include <cmath>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <utility>
#include <cctype>
#include <list>
#include <bitset>

using namespace std;

#define FORALL(i,a,b) for(int i=(a);i<=(b);++i)
#define FOR(i,n) for(int i=0;i<(n);++i)
#define FORB(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long ll;
typedef long double ld;
typedef complex<ld> vec;

typedef pair<int,int> pii;
typedef map<int,int> mii;

#define pb push_back
#define mp make_pair

#define MAXN 11622777
#define MAXM 55
#define MAXK 2000000
#define BIG 10000009

bool comp[MAXN];
int P[MAXK];
int sieve(int n, int* P){  //returns the number of primes found
  int p,q, K = 0;
  comp[1] = true; char even = 1;
  for(p=2;p*p<=n;p+=2){
    if (!comp[p]){
      for(q=p*p;q<=n;q+=p*(2 - even)) comp[q] = true;
    }
    if (p==2)--p,even=0;
  }
  FORALL(i,1,n) if (!comp[i]) P[K++] = i;
  return K;
}


#warning TEST EVERYTHING
#warning SMALL TEST (A=1, B = 10)
#warning LARGE TEST (B=10000000)
#warning TEST ALL K
#warning K <= 50

int val[MAXN];
vector<int> nums[MAXM];
 
int main() {
	memset(val,0,sizeof(val));
	int K = sieve(BIG,P);
	FOR(i,K) {
		for(int v=P[i];v<=BIG;v += P[i]) {
			val[v]++;
		}
	}
	
	for(int n=2; n<=BIG; ++n) {
		nums[val[n]].pb(n);
	}
	
	int TEST,A,B,M;
	scanf("%d",&TEST);
	FOR(test,TEST) {
		printf("Case #%d: ", (test+1));
		scanf("%d%d%d",&A,&B,&M);
		if (M >= MAXM) {
			printf("0\n");
			continue;
		}
		
		int ans = upper_bound(nums[M].begin(), nums[M].end(), B)
				- lower_bound(nums[M].begin(), nums[M].end(), A);
		printf("%d\n",ans);
	}
}













#include <math.h>
#include<cstdio>
#define MAX 10000010
const int S=(int)sqrt((double)MAX);
 
#define rP(n) (sieve[n>>6]|=(1<<((n>>1)&31)))
#define gP(n) sieve[n>>6]&(1<<((n>>1)&31))
 
int primacity[10000009];

void pre_process()
{	unsigned sieve[(MAX>>6)+1]={0};
	int i,j,k,l=0;
	primacity[2]=1;
	for(j=4;j<=MAX;j+=2)
	{       //printf("j: %d\n",j);
		//rP(j);
		primacity[j]++;
        }
	for(i=3;i<=MAX;i+=2) 
		if(!(gP(i)))
		{	//printf("%d ", i);
			primacity[i]=1;
			for(j=i*2;j<=MAX;j+=i) 
			{	//printf("%d %d\n",i,j);
				if ( j % 2 != 0 )
					rP(j);
				primacity[j]++;
			}
		}
	/*
	for ( ; i<=MAX; i+=2 )
		if(!(gP(i)))
                       primacity[i]=1;
	*/
	/*int count=1;
	for ( int i=3; i<=MAX; i+=2 )
		if(!(gP(i)))
			count++;
	printf("primes: %d\n", count);
	return;
	*/
	/*for ( int i=2; i<=100; i++ )
		printf("%d- %d\n", i,primacity[i]);
	*/
}

int main()
{	pre_process();
	int t,a,b,k;
	scanf("%d",&t);
	for ( int i1=1; i1<=t; i1++ )
	{	scanf("%d %d %d",&a,&b,&k);
		if ( k > 664579 )		// max primes in [1,10000000]
		{	printf("Case #%d: 0\n", i1);
			continue;
		}
		int count=0;
		for ( int i=a; i<=b; i++ )
		{	if (  primacity[i] == k )
				count++;
		}
		printf("Case #%d: %d\n", i1,count);
	}
	return 0;
}

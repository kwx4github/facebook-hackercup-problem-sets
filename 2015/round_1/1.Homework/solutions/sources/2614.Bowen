
# coding: utf-8

# In[8]:

import os
import sys
import numpy
from collections import defaultdict


# In[2]:

problem_id = '1'


# In[3]:

sys.setrecursionlimit(10**9)
input_path = '%s.in' % problem_id
output_path = '%s.out' % problem_id

def read_line():
    line = ''
    while len(line) == 0:
        line = input_file.readline().strip()
    return line


def write_line(line):
    print line
    return output_file.write(line + os.linesep)


# In[4]:

def primesfrom2to(n):
    """ Input n>=6, Returns a array of primes, 2 <= p < n """
    sieve = numpy.ones(n/3 + (n%6==2), dtype=numpy.bool)
    for i in xrange(1,int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[       k*k/3     ::2*k] = False
            sieve[k*(k-2*(i&1)+4)/3::2*k] = False
    return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0][1:]+1)|1)]


# In[6]:

max_num = 10**7
prims = primesfrom2to(max_num)
primacity = numpy.zeros(max_num + 1)
for p in prims:
    tmp = p
    while tmp <= max_num:
        primacity[tmp] += 1
        tmp += p


# In[9]:

reverse_k = defaultdict(list)
for num in range(2, max_num + 1):
    reverse_k[primacity[num]].append(num)


# In[10]:

def primacity_count(a, b, k):
    num_list = reverse_k[k]
    
    def find_first_greater_than(start, end):
        if start == end:
            return start
        if start + 1 == end:
            if num_list[start] >= a:
                return start
            else:
                return end
        mid = (start + end) / 2
        if num_list[mid] < a:
            return find_first_greater_than(mid + 1, end)
        elif num_list[mid] == a:
            return mid
        else:
            return find_first_greater_than(start, mid)
        
    def find_last_less_than(start, end):
        if start == end:
            return start
        if start + 1 == end:
            if num_list[end] <= b:
                return end
            else:
                return start
        mid = (start + end) / 2
        if num_list[mid] > b:
            return find_last_less_than(start, mid - 1)
        elif num_list[mid] == b:
            return mid
        else:
            return find_last_less_than(mid, end)
    
    if a > num_list[-1] or b < num_list[0]:
        return 0
    if a < num_list[0]:
        start = 0
    else:
        start = find_first_greater_than(0, len(num_list))
    if b > num_list[-1]:
        end = len(num_list) - 1
    else:
        end = find_last_less_than(0, len(num_list))
    if start > end:
        return 0
    return end - start + 1


# In[11]:

def solve():
    a, b, k = map(int, read_line().split(' '))
    return str(primacity_count(a,b,k))


# In[13]:

input_file = open(input_path, "r")
output_file = open(output_path, "w+")
T = int(read_line())
for case_id in xrange(1, T + 1):
    write_line("Case #%d: %s" % (case_id, solve()))
input_file.close()
output_file.close()


# In[ ]:




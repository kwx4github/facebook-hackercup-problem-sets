// LANG : C++

#include "cstdio"
#include "cstdlib"
#include "cstring"

#include "ctime"
#include "iostream"

#include "set"
#include "map"
#include "list"
#include "deque"
#include "queue"
#include "stack"
#include "string"
#include "vector"
#include "utility"
#include "algorithm"

#define MP make_pair
#define ST first
#define ND second
#define PB push_back
#define S(x) (int)x.size()
#define Z(x) memset(x,0,sizeof(x))
#define D(a) cout << "[ " << #a << " : " << a << " ]"<< endl;
#define B(a) (a).begin()
#define E(a) (a).end()
#define A(a) B(a) , E(a)

#define FOR(i, a, b) for (int i(a);i<= b;++i)
#define REP(i, n) FOR(i,0,(n)-1)
#define FORD(i, a, b) for (int i(a);i>=b;--i)

//int dx[]={ 0, 1, 0,-1, 1, 1,-1,-1 };
//int dy[]={ 1, 0,-1, 0,-1, 1, 1,-1 };
//template<typename T> T test( T &a ){ }

using namespace std;

typedef long long llint;
typedef pair<int, int> PII;
typedef vector<int> VI;

const int INF = -1u/2 ; // 1023456789 
//const int SIZE = 0 ;
const int MOD = 1 ;

vector< int > p ; 

int sol[10][10000003] ; 

void solve(){

	static int t = 1 ; 

	int s , e , k ; scanf("%d%d%d",&s,&e,&k);

	if( k > 9 ) printf("Case #%d: 0\n" , t++ );
	else printf("Case #%d: %d\n", t++ ,sol[k][e]-sol[k][s-1] );
	
}

int main(int argc, char const *argv[]){

	freopen("homework.txt", "r",  stdin);
	freopen("homework_out.txt", "w", stdout);
	memset( sol , 0 , sizeof(sol) ) ; 

	FOR( i , 2 , 10000001 ){
		bool isP = true ; 
		for(int j=0;isP && j<p.size() && p[j]*p[j]<=i ;j++){
			if( i%p[j] == 0 ) isP = false ; 
		}
		if( isP ) p.push_back( i ) ; 
			
	} 


	int maxh = 0 ; 
	//printf("finished P \n");
	FOR( i , 2 , 10000001 ){
		int h = i ; 
		int c = 0 ; 
		for( int j=0;j<p.size() && p[j]*p[j]<=h && h!= 1 ;j++){
			if( h%p[j] == 0 ){
				c++;
				while( h%p[j] == 0 ) h/=p[j] ; 
			}
		}
		if( h != 1 ) c++;

		sol[c][i]++ ; 
		//D( sol[c][i])
		FOR( j , 1 , 9 ) sol[j][i] += sol[j][i-1] ; 

		//printf("%d %d %d \n",i , h ,sol[i]);
		//maxh = max( sol[i] , maxh ) ; 
	}

	//printf("finished C \n");
	//D( maxh ) ; 

	int n ; scanf("%d",&n);
	while( n-- ) solve() ; 
	cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." << endl;
	return 0 ;

}

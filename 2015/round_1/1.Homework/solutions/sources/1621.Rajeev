#include <iostream>
#include <map>
#include <vector>
#include <cstring>
#include <cctype>
#include <cstdio>
#include <climits>
#include <cmath>
#include <sstream>
#include <utility>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstdlib>
#include <set>
#define lld long long int
#define N 10000101
using namespace std;
unsigned int A[N/64];
unsigned int fCount[N];
unsigned int oneDivisor[N];
bool check(int i){
    int j= i/64;
    int k=(i%64)/2;
    return A[j]>>k &1;
}
void Set(int i){
    int j=i/64;
    int k=(i%64)/2;
    A[j]|=1<<k;
}

vector<vector<int> > List(32);
void sieve(){
    vector<int> primes;
    A[0]=1;
    for(int i=3;i<=sqrt(N)+1;i+=2){
        if(!check(i)){
        	oneDivisor[i]=1;
            for(int j=3*i;j<N;j+=2*i){
                Set(j);
                oneDivisor[j]=i;
            }
        }
    }
    fCount[1]=0;
    List[1].push_back(2);
    fCount[2]=1;
    for(int i=3;i<N-2;i+=2){
    	if(!check(i))
    		fCount[i]=1;
    	else{
    		int k=i;
    		
    		while(k%oneDivisor[i]==0)
    			k/=oneDivisor[i];
    		fCount[i]=fCount[k]+1;
    	}
    	int j=i+1;
    	int k=j;

    	while(!(k&1))
    			k>>=1;
    	fCount[j]=fCount[k]+1;
    	List[fCount[i]].push_back(i);
    	List[fCount[i+1]].push_back(i+1);
    }
}

int b_search(vector<int> &v, int start, int end, int key){
	if(start==end){
		if(v[start]<=key)
			return start;
		return start-1;
	}
	int mid=(start+end)/2;
	if(v[mid]<key)
		return b_search(v,mid+1,end,key);
	else
		return b_search(v,start,mid,key);
}

int main(){
	int t,c;
	sieve();
	cin>>t;
	c=t;
	while(t--){
		int a,b,k;
		cin>>a>>b>>k;
		int ans=0,ans2=0;
		if(k<32){
			if(List[k].size()==0)
				ans=0;
			else 
				ans = b_search(List[k],0,List[k].size()-1,b)- b_search(List[k],0,List[k].size()-1,a-1);
            int i=0;
      /*      while(i<List[k].size()&& List[k][i]<a)
                i++;
            while(i<List[k].size()&& List[k][i]<=b){
                ans2++;
                i++;
            } */
		}
		cout<<"Case #"<<c-t<<": "<<ans<<endl;
	}
}
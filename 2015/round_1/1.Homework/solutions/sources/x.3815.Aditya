     //ALL HAIL MEGATRON
     
    using namespace std;
     
    #include<bits/stdc++.h>
     
    #define wl(n) while(n--)
    #define fl(i,a,b) for(i=a; i<b; i++)
    #define rev(i,a,b) for(i=a; i>=b; i--)
    #define scan(n) scanf("%d", &n)
    #define scans(s) scanf("%s", s)
    #define scanc(c) scanf("%c", &c)
    #define scanp(f) scanf("%f", &f)
    #define scanll(l) scanf("%lld", &l)
    #define scanllu(u) scanf("%llu", &u)
    #define print(n) printf("%d\n", n)
    #define prints(s) printf("%s\n", s)
    #define printc(c) printf("%c\n", c)
    #define printp(f) printf("%f\n", f)
    #define printll(l) printf("%lld\n", l)
    #define printllu(u) printf("%llu\n", u)
    #define nline printf("\n")
    #define mclr(strn) strn.clear()
    #define ignr cin.ignore()
    #define MOD 1000000007
    #define ll long long int
    #define u64 unsigned long long int
    #define PB push_back
     
    bool sieve[10005];
    vector<ll> prime;
    vector<int> v[11];
    std::vector<int>::iterator low,up;
     
    void banao()
    {
    sieve[1]=1;
    ll i,j;
    fl(i,2,10005)
    {
    j=2;
    while(i*j<=10005)
    {
    sieve[i*j] = 1;
    j++;
    }
    }
     
    fl(j,2,10005)
    {
    if(sieve[j]==0)
    {
    prime.PB(j);
    //cout<<prime.back()<<" ";
    }
    }
    }
     
     
    void count()
    {
    banao();
    int i,j,count,tmp;
    v[0].PB(1);
     
    fl(j,2,1000005)
    {
    count=0;
    tmp = j;
    for(i=0;prime[i]*prime[i]<=tmp;i++)
    {
    if(tmp%prime[i]==0)
    {
    count++;
    while(tmp%prime[i]==0)
    tmp/=prime[i];
    }
    }
    if(tmp!=1)
    count++;
    //cout<<j<<" ";
    if(count<=10)
    v[count].PB(j);
    }
    }
     
     
    int main()
    {
    int t,i;
    scan(t);
    count();
    fl(i,1,t+1)
    {
    int a,b,n,ans;
    scan(a);scan(b);scan(n);
     
    low = lower_bound(v[n].begin(),v[n].end(),a);
    up = upper_bound(v[n].begin(),v[n].end(),b);
     
    /*for(i=0;i<v[n].size() && v[n][i]<=b;i++)
    cout<<v[n][i]<<" ";
    nline;
    //v[n].pop_back();
    //cout<<v[n].size()<<"*";
    //cout<<v[n].back()<<"*";*/
     
    ans = up-low;
    printf("Case #%d: ",i);
    print(ans);
     
    }
    return 0;
    } 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <limits>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <string>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int INF = numeric_limits<int>::max();

const int xmax = 10000005;
bool comp[xmax];
vector<int> p;
int primacity[xmax];

void prep()
{
	memset(comp, false, sizeof(comp));
	for(int i=2;i<xmax;i++)
		if(!comp[i])
		{
			p.push_back(i);
			for(int j=i*2;j<xmax;j+=i)
				comp[j] = true;
		}
	
	for(int x=2;x<xmax;x++)
	{
		if(!comp[x])
		{
			primacity[x] = 1;
			continue;
		}

		for(int i=0; ; i++)
		{
			assert(i<p.size());
			if(x % p[i] != 0)
				continue;
			int y = x / p[i];
			primacity[x] = primacity[y] + (y % p[i] != 0);
			break;
		}

/*
		int P = 0;
		int t = x;
		for(int i=0; t>1; i++)
		{
			if(t % p[i] == 0)
				P++;
			while(t % p[i] == 0)
				t /= p[i];
		}
		assert(primacity[x] == P);
*/
		//if(x%10000==0) fprintf(stderr, "%d %d\n", x, primacity[x]);
	}
}

int main(int argc,char* argv[])
{
	prep();
	int num_test_cases;
	scanf("%d",&num_test_cases);
	for(int test_case=1; test_case<=num_test_cases; test_case++)
	{
		int a, b, k;
		scanf("%d%d%d", &a, &b, &k);
		int count = 0;
		for(int x=a;x<=b;x++)
			if(primacity[x] == k)
				count++;
		printf("Case #%d: %d\n", test_case, count);
	}
	return 0;
}

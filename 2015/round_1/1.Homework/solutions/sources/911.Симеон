#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string.h>
#include <math.h>
#define LIM 10000002
using namespace std;
typedef int lld;

bool r[LIM];
lld divs[LIM][10];
vector<lld> primes;

void Calculate(lld f1, lld f2, lld indw)
{
    lld ind1, ind2;
    lld tow;
    lld ind=1;

    ind1 = ind2 = 1;

    do
    {
        if (ind1 <= divs[f1][0] && ind2 <= divs[f2][0])
        {
            if (divs[f1][ind1] < divs[f2][ind2])
            {
                tow = divs[f1][ind1++];
            }
            else
            {
                tow = divs[f2][ind2++];
            }
        }
        else if (ind1 <= divs[f1][0])
        {
            tow = divs[f1][ind1++];
        }
        else
        {
            tow = divs[f2][ind2++];
        }

        if (ind==1 || divs[indw][ind-1] != tow)
        {
            divs[indw][ind++] = tow;
        }
    }
    while (ind1 <= divs[f1][0] || ind2 <= divs[f2][0]);

    divs[indw][0] = ind-1;
}

lld GetCount(lld num)
{
    lld lim = sqrt(num);
    lld i;
    lld del1, del2;
    lld cnt=0;

    if (r[num]) return 1;

    for (i=2; i<=lim; i++)
    {
        del1 = i;
        del2 = num/del1;

        if (del1*del2 != num) continue;

        if (r[del1]) cnt++;
        if (del1 != del2 && r[del2]) cnt++;
    }

    return cnt;
}

void Compute()
{
    lld i, j;

    memset(r, 1, sizeof(r));
    r[0] = false;
    r[1] = false;

    for (i=2; i<LIM; i++)
    {
        if (!r[i]) continue;

        primes.push_back(i);
        divs[i][1] = i;
        divs[i][0] = 1;

        for (j=2; i*j<LIM; j++)
        {
            r[i*j] = false;
        }
    }

    for (i=2; i<LIM; i++)
    {
        for (j=2; j<=i && i*j<LIM; j++)
        {
            if (divs[i*j][0] != 0) continue;

            Calculate(i, j, i*j);
        }
    }
}


lld prefix[10][LIM];

lld Get(lld ina, lld from, lld to)
{
    if (ina > 9) return 0;

    return (prefix[ina][to] - prefix[ina][from-1]);
}

int main ()
{
    freopen("homework.txt", "r", stdin);
    freopen("otp.txt", "w", stdout);

    lld i, j;
    lld tests, t;
    lld a, b, k;

    Compute();


    memset(prefix, 0, sizeof(prefix));
    for (i=1; i<=9; i++)
    {
        prefix[i][0] = prefix[i][1] = 0;
        for (j=2; j<LIM; j++)
        {
            prefix[i][j] = prefix[i][j-1];

            if (divs[j][0] == i) prefix[i][j]++;
        }
    }

    scanf("%d", &tests);
    for (t=1; t<=tests; t++)
    {
        scanf("%d %d %d", &a, &b, &k);

        printf("Case #%d: %d\n", t, Get(k, a, b));
    }

}


#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <locale>
#include <memory>
#include <stdexcept>
#include <utility>
#include <string>
#include <fstream>
#include <ios>
#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <istream>
#include <ostream>
#include <sstream>
#include <streambuf>
#include <complex>
#include <numeric>
#include <valarray>
#include <exception>
#include <limits>
#include <new>
#include <typeinfo>
#include <cassert>
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <climits>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdlib>
#include <cstddef>
#include <cstdarg>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cwchar>
#include <cwctype>
using namespace std;
static const double EPS = 1e-8;
static const double PI = 4.0 * atan(1.0);
static const double PI2 = 8.0 * atan(1.0);
typedef long long ll;
typedef unsigned long long ull;

#define ALL(c) (c).begin(), (c).end()
#define CLEAR(v) memset(v,0,sizeof(v))
#define MP(a,b) make_pair((a),(b))
#define REP(i,n) for(int i=0;i<(int)n;++i)
#define ABS(a) ((a)>0?(a):-(a))
template<class T> T MIN(const T& a, const T& b) { return a < b ? a : b; }
template<class T> T MAX(const T& a, const T& b) { return a > b ? a : b; }
template<class T> void MIN_UPDATE(T& a, const T& b) { if (a > b) a = b; }
template<class T> void MAX_UPDATE(T& a, const T& b) { if (a < b) a = b; }

static const int SIZE = 16 * 1024 * 1024;

int main() {
	std::ios::sync_with_stdio(false);

	static bool primes[SIZE];
	memset(primes, true, sizeof(primes));
	for (int i = 2; i < SIZE; ++i) {
		if (!primes[i]) {
			continue;
		}
		for (int j = i + i; j < SIZE; j += i) {
			primes[j] = false;
		}
	}

	static int primacities[SIZE];
	CLEAR(primacities);
	for (int prime = 2; prime < SIZE; ++prime) {
		if (!primes[prime]) {
			continue;
		}
		for (int i = prime; i < SIZE; i += prime) {
			++primacities[i];
		}
	}

	int T;
	cin >> T;
	for (int testCase = 1; testCase <= T; ++testCase) {
		int A, B, K;
		cin >> A >> B >> K;
		int answer = 0;
		for (int i = A; i <= B; ++i) {
			if (primacities[i] == K) {
				++answer;
			}
		}
		printf("Case #%d: %d\n", testCase, answer);
	}
}

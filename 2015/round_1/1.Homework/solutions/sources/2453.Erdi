#!/usr/bin/env python

import sys
import math

#### PRECOMPUTATION
def generatePrimes(limit):
  sieve = [True] * limit
  root = int(math.ceil(math.sqrt(limit)))
  for i in xrange(2, root + 1):
    if sieve[i]:
      low = int(pow(i, 2))
      for j in xrange(low, limit, i):
        sieve[j] = False

  return [i for i in xrange(2, limit) if sieve[i]]

def primacity(n):
  if n in PRIMACITIES:
    return PRIMACITIES[n]

  n2 = n
  for p in PRIMES:
    if n2 % p == 0:
      while n2 % p == 0:
        n2 /= p
      break
  PRIMACITIES[n] = 1 + primacity(n2)
  return PRIMACITIES[n]

def precompute():
  limit = CLASS_LIMIT + 1
  classes = range(0, limit) 
  for i in xrange(limit):
    classes[i] = [0, 0]
  for i in xrange(2, UPPER_LIMIT + 1):
    prim = primacity(i)
    for j in xrange(limit):
      if j == prim:
        classes[j].append( classes[j][i-1] + 1 )
      else:
        classes[j].append( classes[j][i-1] )
  return classes

UPPER_LIMIT = 10000000
PRIMES = generatePrimes(UPPER_LIMIT + 1)
PRIMACITIES = {p: 1 for p in PRIMES}
PRIMACITIES[1] = 0
CLASS_LIMIT = 8 # 2*3*5*7*11*13*17*19 = 9699690 ~= 10^7
CLASSES = precompute()
#### END OF PRECOMPUTATION

def main():
  fi = sys.stdin
  fo = sys.stdout
  caseCount = int(fi.readline().strip())
  for i in range(1, caseCount+1):
    a, b, k = readInput(fi)
    solution = solve(a, b, k)
    displayAndClear(fo, i, solution)

def readInput(f):
  a, b, k = [int(arg) for arg in f.readline().split()]
  return a, b, k

def displayAndClear(f, i, solution):
  f.write('Case #%d: %d\n' % (i, solution))
  f.flush()

def solve(a, b, k):
  if k > CLASS_LIMIT:
    return 0
  else:
    return CLASSES[k][b] - CLASSES[k][a-1]

if __name__ == '__main__':
  main()


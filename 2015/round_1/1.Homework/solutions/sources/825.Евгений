#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <iostream>
#include <utility>
#include <sstream>
#include <cmath>
#include <ctime>
#include <iostream>

#define clr(a) memset(a, 0, sizeof(a))
#define fill(a, b) memset(a, b, sizeof(a))

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> pii;

#ifdef DBG1
    #define dbg(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
    #define dbg(...)
#endif

void init(vector <vector <int> > & ans) {
    const int MAX = int(1e7);
    vector <int> divis(MAX + 1, 0);
    for (int i = 2; i <= MAX; ++i) {
        if (divis[i] == 0) {
            for (int j = i; j <= MAX; j += i) {
                divis[j] = i;
            }
        }
    }
    ans.resize(0);
    ans.resize(50);
    for (int i = 2; i <= MAX; ++i) {
        int cnt = 0, cur = i;
        while (cur != 1) {
            int curD = divis[cur];
            ++cnt;
            while (divis[cur] == curD) {
                cur /= curD;
            }
        }
        assert(cnt < int(ans.size()));
        ans[cnt].push_back(i);
    }
}

void solve(const vector <vector <int> > & ans) {
    int A, B, K;
    scanf("%d%d%d", &A, &B, &K);
    if (int(ans.size()) < K) {
        printf("0\n");
    } else {
        const vector <int> & v = ans[K];
        int L = lower_bound(v.begin(), v.end(), A) - v.begin();
        int R = lower_bound(v.begin(), v.end(), B + 1) - v.begin();
        printf("%d\n", R - L);
    }
}

int main()
{
#ifdef DBG1
    freopen(".in", "r", stdin);
    freopen(".out", "w", stdout);
    freopen(".err", "w", stderr);
#endif

    vector <vector <int> > ans;
    init(ans);

    int tt;
    scanf("%d", &tt);
    for (int ii = 1; ii <= tt; ++ii) {
        printf("Case #%d: ", ii);
        solve(ans);
    }

    return 0;
}

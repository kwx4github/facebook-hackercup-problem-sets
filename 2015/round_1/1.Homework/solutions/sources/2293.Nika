#include <iostream>

using namespace std;

const int N = 10000000;
const int M = 10;

class Primacities {
	int* primacity;
	int* count[M];
public:
	Primacities() {
		primacity = new int[N];

		for (int i = 0; i < N; i++)
			primacity[i] = 0;

		// calculate primacities
		for (int i = 1; i < N; i++) {
			if (0 == primacity[i]) {
				for (int j = 1; (i + 1)*j - 1 < N; j++)
					primacity[(i + 1)*j - 1] += 1;
			}
		}

		// calculate cumulative counts for each primacity
		for (int i = 0; i < M; i++) {
			count[i] = new int[N];
			count[i][0] = 0;

			for (int j = 1; j < N; j++)
				count[i][j] = count[i][j - 1] + (i == primacity[j]);
		}
	}

	~Primacities() {
		delete[] primacity;

		for (int i = 0; i < M; i++)
			delete[] count[i];
	}

	int query(int A, int B, int K) {
		if (K < M) {
			return count[K][B - 1] - count[K][A - 2];
		} else {
			return 0;
		}
	}
};



int main() {
	int T;
	Primacities P;
	int A, B, K;

	cin >> T;

	for (int t = 1; t <= T; t++) {
		cin >> A >> B >> K;
		
		cout << "Case #" << t << ": " << P.query(A, B, K) << endl;
	}

	return 0;
}

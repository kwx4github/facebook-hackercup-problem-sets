#include <iostream>
#include <sstream>
#include <fstream>
#include <set>
#include <math.h>
#include <queue>
#include <map>
#include <vector>
#include <algorithm>
#include <chrono>

// BHEBHEBHEBHEBHBEBHEBHEBHEBHE
// BHEBHEBHEBHEBHBEBHEBHEBHEBHEBHEBHEBHEBHEBHBEBHEBHEBHEBHE

using namespace std;

const int MAXP = 10000000;
vector<int> primes;

void runEratosthenesSieve(int upperBound) {
      int upperBoundSquareRoot = (int)sqrt((double)upperBound);
		int count = 0;
      bool *isComposite = new bool[upperBound + 1];
      memset(isComposite, 0, sizeof(bool) * (upperBound + 1));
      for (int m = 2; m <= upperBoundSquareRoot; m++) {
            if (!isComposite[m]) {
   //               cout << m << " ";
					primes.push_back(m);
                  for (int k = m * m; k <= upperBound; k += m)
                        isComposite[k] = true;
            }
      }
      for (int m = upperBoundSquareRoot; m <= upperBound; m++)
            if (!isComposite[m]) {
//                  cout << m << " ";
					primes.push_back(m);
			}
      delete [] isComposite;
	cout << "there are " << primes.size() << " primes under " << MAXP << endl;
}

void getDivs(int n, vector<int>& v) {
	int j=0;
	int p = primes[j];	
	set<int> currs;
	while(n!=1) {
		p = primes[j];
		while(n%p==0) n/=p;
		j++;
		currs.insert(p);
	}
	for(set<int>::iterator it=currs.begin(); it!=currs.end(); it++) {
		v.push_back(*it);
	}
}

int getPrimacity(int n) {
	int count = 0;
	int j=0;
	int lastp = 1;
	int p;
	while(n!=1) {
		p = primes[j];
		while(n%p==0) {
			n/=p;
			if(p!=lastp) count++;
			lastp = p;
		}
		j++;
	}
	return count;
}

int main(int argc, char** argv) {
	int T;
	cin >> T;

	int A, B;
	long long K;

//	runEratosthenesSieve(MAXP);

	string line;
	ifstream file;

	vector<int> primacities(10000000);
	int j=0;
	file.open("primacities.txt");
	while(getline(file, line)) {
		primacities[j] = atoi(line.c_str());
		j++;
	}
	file.close();

	long long count = 0;
	for(int i=0; i<T; i++) {
		cin >> A;
		cin >> B;
		cin >> K;
		count = 0;

		for(int n=A; n<=B; n++) {
			if(primacities[n-1] == K) count++;
		}

		cout << "Case #" << i+1 << ": " << count << endl;
	}

	return 0;
}

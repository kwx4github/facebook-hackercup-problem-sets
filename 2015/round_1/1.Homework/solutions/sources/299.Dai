import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;


public class FHC2015Round1A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        FHC2015Round1A solver = new FHC2015Round1A();
        solver.init();
        for (int i = 1; i <= numCases; i++) {
            System.out.format("Case #%d: %s%n", i, solver.solve(sc));
        }
    }

    boolean[] isPrime;
    int[] primes;
    int[] firstPrimeFactor;
    int numPrimes;

    public void makePrimesArray(int n) {
        isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, true);
        firstPrimeFactor = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            firstPrimeFactor[i] = i;
        }
        primes = new int[n > 1000 ? n / 4 : n];
        numPrimes = 0;
        isPrime[0] = isPrime[1] = false;
        int sqrtN = (int) Math.ceil(Math.sqrt(n) + 0.5);
        for (int i = 0; i <= n; i++) {
            if (isPrime[i]) {
                primes[numPrimes++] = i;
                if (i <= sqrtN) for (int j = i * i; j <= n; j += i) {
                    if (isPrime[j]) firstPrimeFactor[j] = i;
                    isPrime[j] = false;
                }
            }
        }
    }


    static final int MAX_N = 10_000_001;
    static final int MAX_K = 9;
    ArrayList<Integer>[] primacityNums;

    @SuppressWarnings("unchecked")
    void init() {
        makePrimesArray(MAX_N);
        primacityNums = new ArrayList[MAX_K];
        for (int i = 0; i < MAX_K; i++) {
            primacityNums[i] = new ArrayList<>(100000 / (i + 1) / (i + 1));
        }
        int[] primacity = new int[MAX_N];
        primacity[0] = primacity[1] = 0;
        for (int i = 2; i < MAX_N; i++) {
            int n = i;
            while (n % firstPrimeFactor[i] == 0)
                n /= firstPrimeFactor[i];
            primacity[i] = primacity[n] + 1;
            primacityNums[primacity[i]].add(i);
//            if (i % 1000000 == 0) System.out.println(i);
//            if (i < 20 || primacity[i] > 7) System.out.println(i + ": " + primacity[i]);
        }
    }

    int get(int max, int k) {
        int loc = Collections.binarySearch(primacityNums[k], max);
        // System.out.println(loc);
        if (loc >= 0) return loc + 1;
        int insPoint = -loc - 1; // loc = -insPoint - 1
        return insPoint;
    }

    private String solve(Scanner sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int k = sc.nextInt();
        if (k >= MAX_K) return "0";
        int cnt = get(b, k) - get(a - 1, k);
        return Integer.toString(cnt);
    }

}

#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

const int MAXN = 10000003;

int f[MAXN];
int n;
vector < vector <int> > v;

void solve()
{
    int a, b, k;
    cin >> a >> b >> k;

    k -= 1;
    if (k < 0 || n <= k) {
        cout << "0";
        return;
    }
    cout <<
        upper_bound(v[k].begin(), v[k].end(), b) -
        lower_bound(v[k].begin(), v[k].end(), a);
}

int main(int /* argc */, char** /* argv */)
{
    ios_base::sync_with_stdio(false);
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    #endif
    memset(f, 0, sizeof(f));
    for (int i = 2; i < MAXN; ++i) {
        if (f[i] == 0) {
            for (int j = i; j < MAXN; j += i) {
                f[j] += 1;
            }
        }
    }
    for (int i = 2; i < MAXN; ++i) {
        n = max(n, f[i]);
    }
    v.resize(n);
    for (int i = 2; i < MAXN; ++i) {
        v[f[i] - 1].push_back(i);
    }

    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        cout << "Case #" << test << ": ";
        solve();
        cout << "\n";
    }

    cerr << "Time execute: " << clock() / (double)CLOCKS_PER_SEC <<  " sec" << endl;
    return 0;
}

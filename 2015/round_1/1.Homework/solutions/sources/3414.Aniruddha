import java.util._
import scala.collection.mutable

object Homework {
  val N = 11000000
  val primes = new Array[Int](N)
  val kPrimes = mutable.Map[Int, Array[Int]]()

  def precompute() {
    2 until N foreach { i =>
      if (primes(i) == 0) {
        primes(i) = 1
        var j = i*2
        while (j < N) {
          primes(j) += 1
          j += i
        }
      }
    }

    /*val mx = primes.max
    1 until mx foreach { p =>
      val k = new Array[Int](N)
      2 until N foreach { c =>
        k(c) = k(c-1) + (if (primes(c) == p) 1 else 0)
      }
      kPrimes(p) = k
    }*/
  }
  

  def main(args: Array[String]) {
    precompute()
    val mx = primes.max
    val sc = new Scanner(System.in)
    val tes = sc.nextInt()
    0 until tes foreach { test =>
      val a = sc.nextInt
      val b = sc.nextInt
      val k = sc.nextInt
      val ans = if (k > mx) {
        0
      } else {
        // val p = kPrimes(k)
        // p(b) - p(a-1)
        var count = 0
        a until b+1 foreach { i => 
          // println("%d: %d".format(i, primes(i)))
          if (primes(i) == k) count += 1
        }
        count
      }
      println("Case #%d: %d".format(test+1, ans))
    }
  }
}

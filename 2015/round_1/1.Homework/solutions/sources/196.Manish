#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

const int LIM = 1e7+1;
int etf[10000100];
VI primacity[30];
void precomp()
{
      int i,j;
      
      /*** Generate Euler Totient Function ***/
      for(i=1;i<=LIM;i++)etf[i] = i;
      for(i=2;i<=LIM;i++)
            if(etf[i] == i)
                  for(j=2*i;j<=LIM;j+=i)
                        etf[j] = i;
      /*** Generate Euler Totient Function ***/
      INC(i,2,LIM)
      {
            int c=0,num=i;
            while(num!=1)
            {
                  int fact = etf[num];
                  while((num%fact)==0)
                        num=num/fact;
                  c++;
            }
            primacity[c].PB(i);
      }
}
int main()
{
      precomp();
      int t,a,b,k;
      s(t);
      REP(tt,t)
      {
            printf("Case #%d: ",tt+1);
            s(a);s(b);s(k);
            if(k>=10)
            {
                  printf("0\n");
                  continue;
            }
            int c1 = primacity[k].size() - (lower_bound(primacity[k].begin(),primacity[k].end(),a)-primacity[k].begin()) ;
            int c2 = primacity[k].size() - (lower_bound(primacity[k].begin(),primacity[k].end(),b+1)-primacity[k].begin()) ;
            printf("%d\n",c1-c2);
      }
      return 0;
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <climits>
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <sstream>
#include <initializer_list>

using namespace std;

const int BOUND = 10000007;
int cnt = 0;
int primacity[BOUND] = {0};

vector <vector <int> > group(10, vector <int>());

void preprocess() {
    for (int i = 2; i <= BOUND; i++) {
        if (primacity[i] == 0) {
            cnt++;
            for (int j = i; j <= BOUND; j += i) {
                primacity[j]++;
            }
        }
    }

    for (int i = 2; i <= BOUND; i++) {
        group[primacity[i]].push_back(i);
    }
}

int main(int argc, char *argv[])
{
    int T = 0;

    freopen("A.in", "r", stdin);
    preprocess();
    
    cin >> T;

    for (int cas = 1; cas <= T; cas++) {
        int A = 0, B = 0, K = 0;
        cin >> A >> B >> K;

        int res = 0;
        if (K > 9) {
            res = 0;
        } else {
            auto lb = lower_bound(group[K].begin(), group[K].end(), A);
            auto ub = upper_bound(group[K].begin(), group[K].end(), B);
            res = ub - lb;
        }

        cout << "Case #" << cas << ": " << res << endl;
    }
    return 0;
}

//Abinash Ghosh(Om)
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <climits>
#include <iostream>
#include <iomanip>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <sstream>
#include <algorithm>
using  namespace  std;

#define PI acos(-1.0)
#define MAX 10000007
#define EPS 1e-9
#define mem(a,b) memset(a,b,sizeof(a))
#define gcd(a,b) __gcd(a,b)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define Sort(x) sort(x.begin(),x.end())
#define FOR(i, b, e) for(int i = b; i <= e; i++)
#define pr(x) cout<<x<<"\n"
#define pr2(x,y) cout<<x<<" "<<y<<"\n"
#define pr3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n";
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

typedef  long long ll;
typedef  pair <int, int> pii;
typedef  pair <double , double> pdd;
typedef  pair <ll , ll > pll;
typedef  vector <int> vi;
typedef  vector <pii> vpii;
typedef  vector <ll > vl;


//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};
//int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};
//int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
// scanf("%d",&n);

#define M 1000007
bool marked[M];
void sieve(long long n)
{
    marked[1]=true;
    for (long long i=3;i*i<=n;i+=2)
        if (marked[i]==false)   // i is a prime
            for(long long j=i*i;j<=n;j+=i+i)
                marked[j]=true;
}
bool isPrime(long long n)
{
    if (n == 2) return true;
    if (n % 2 == 0) return false;
    return marked[n] == false;
}
int primecity(int n)
{
    if(isPrime(n))return 1;
    int m=sqrt(n)+2,cnt=0;
    for(long int i=2;i*i<=n;i=(i==2?3:i+2))
    {
        if(isPrime(i))
        {
            if(n%i==0)
            {
                while(n%i==0)
                {
                    n/=i;
                }
                cnt++;
            }
        }
    }
    if(n!=1)cnt++;
    return cnt;
}
int prime[10000007];
int main()
{
   // READ("inA.txt");
   // WRITE("outA.txt");
    mem(prime,0);
    sieve(1000002);
    FOR(i,1,10000002)
    {
        prime[i]=primecity(i);
    }
    int T,a,b,k;
    scanf("%d",&T);
    FOR(t,1,T)
    {
        scanf("%d%d%d",&a,&b,&k);
        int ans=0;
        FOR(i,a,b)
        {
            if(prime[i]==k)ans++;
        }
        printf("Case #%d: %d\n",t,ans);
    }
    return 0;
}



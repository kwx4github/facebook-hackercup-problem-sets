#include <iostream>
#include <vector>

using namespace std;


#define uuint uuint64_t
const uint SIZE = 10000005;
const uint SSIZE = 90000;
const uint PSIZE = 32;

uint T,N,A,B,K;
vector<uint> primes;
uint primacy[SIZE];
uint countArray[PSIZE][SIZE];


uint getPrimeFactor(uint n) {
	for (uint p:primes) {
		if (p*p > n) {
			return 0;
		}
		if (n % p == 0) {
			uint res = p;
			while (res*p <= n && n % (res*p) == 0)
				res *= p;
			return res;
		}
	}
	return 0;
}
void generatePrimes() {
	for (uint i = 2; i < SSIZE; i++) {
		if ( 0 == getPrimeFactor(i) ) {
			primes.push_back(i);
		}	
	}	

}
void initCountArray() {
	for (uint i = 2; i < SIZE; i++) {
		uint p = getPrimeFactor(i);
		if (p == 0) 
			primacy[i] = 1;
		else
			primacy[i] = primacy[i/p] + 1;
		countArray[primacy[i]][i] = 1;	
	}
	for (uint i = 1; i < SIZE; i++) {
		for (int j = 1; j < PSIZE; j++) {
			countArray[j][i] += countArray[j][i-1];
		}
	}


}
int main() {
	generatePrimes();
	initCountArray();
	cin>>T;
	for (uint t = 0; t < T; t++) {
		cin>>A>>B>>K;	
		uint res = 0;
	        if ( K < PSIZE)
			res = countArray[K][B] - countArray[K][A-1];
		cout<<"Case #"<<(t+1)<<": "<<res<<endl;
	}
	return 0;

}

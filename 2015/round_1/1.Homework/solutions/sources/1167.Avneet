#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mp make_pair
#define  pb push_back
#define fast() {cin.sync_with_stdio(false);cin.tie(false);cout.tie(false);}
#define MAX 10000001
#define mod 100000
#define inf 100000000
ll modulo(ll a,ll b,ll c)
{
	long long x=1,y=a;
	while(b > 0)
	{
	  if(b%2 == 1){
      x=(x*y)%c;
	}
	y = (y*y)%c; 
	b /= 2;
	}
  return x%c;
}
ll mulmod(ll a,ll b)
{ 
	long long x = 0,y=a;
	while(b > 0)
	{
		if(b%2 == 1){
		x = (x+y);
	}
	y = (y*2);
	b /= 2;
	}
	return x;
}
typedef long long i64;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;

const int INF = 1000000007;
const int SIZE = 10000020;
int main()
{

	
    vi prime_divisors_cnt(SIZE, 0);
    for (int i = 2; i < SIZE; ++i)
    {
        if (prime_divisors_cnt[i] == 0)
        {
            prime_divisors_cnt[i] = 1;
            for (int j = i + i; j < SIZE; j += i)
            {
                ++prime_divisors_cnt[j];
            }
        }
    }

    vvi k_primes_cnt(12, vi(SIZE, 0));
    for (int i = 2; i < SIZE; ++i)
    {
        for (int k = 0; k < 11; ++k)
        {
            k_primes_cnt[k][i] = k_primes_cnt[k][i - 1];
        }
        if (prime_divisors_cnt[i] <= 11)
        {
            ++k_primes_cnt[prime_divisors_cnt[i] - 1][i];
        }
    }

    int t;
    fast();
    cin >> t;
    
    int cases=0;
    while (t--)
    {
    	cases++;
        int a, b, k;
        cin>>a>>b>>k;
        if(k>10)
        cout<<"Case #"<<cases<<": "<<0<<endl;
		else
        cout<<"Case #"<<cases<<": "<<k_primes_cnt[k - 1][b] - k_primes_cnt[k - 1][a - 1]<<endl;
    }
	return 0;
}

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <utility>
#include <iomanip>
#include <bitset>
#include <fstream>

using namespace std;

typedef long long int64;

const int64 LIM = 10000001;

int primacity[LIM];

void prep() {
  bitset<LIM> isprime;
  vector<int64> primes;

  isprime.set();
  isprime.reset(0);
  isprime.reset(1);
  int64 i;
  for (i = 2; i*i <= LIM; i++) {
    if (isprime.test(i)) {
      primes.push_back(i);

      int64 next = i*i;
      while (next < LIM) {
        isprime.reset(next);
        next += i;
      }
    }
  }
  for (; i < LIM; i++) {
    if (isprime.test(i))
      primes.push_back(i);
  }

  for (int64 n = 2; n < LIM; n++) {
    int64 ans = 0;

    int64 x = n;
    for (const auto &p : primes) {
      if (p*p > x)
        break;

      if (x % p == 0) {
        ans++;
        while (x % p == 0)
          x /= p;
      }
    }
    if (x > 1)
      ans++;
    primacity[n] = ans;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  prep();
  int T;
  cin >> T;

  for (int kase = 1; kase <= T; kase++) {
    int a, b, k;
    cin >> a >> b >> k;

    int ans = 0;
    for (int i = a; i <= b; i++) {
      if (primacity[i] == k)
        ans++;
    }
    cout << "Case #" << kase << ": " << ans << "\n";
  }

  return 0;
}

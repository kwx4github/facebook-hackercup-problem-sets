#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<string.h>
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
#include<iomanip>
using namespace std;

#define READ(a) freopen(a,"r",stdin);
#define WRITE(a) freopen(a,"w",stdout);
#define FOR(i,a,b)  for(int i=(a);i<b;i++)
#define REV(i,a,b)  for(int i=a;i>=b;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define clr(a) a.clear()
#define mp make_pair
#define pb push_back
#define SZ(a) (int)a.size()
#define all(a) (a).begin(),(a).end()
#define reall(a) (a).rbegin(),(a).rend()
#define fs first
#define sc second
#define PI (2*acos(0.0))
#define ERR (1e-7)
#define EQ(a,b) (fabs(a-b)<ERR)
#define onlyCPP ios_base::sync_with_stdio(0);cin.tie(0)
//#define FOREACH(it,x) for(__typeof((x.begin())) it=x.begin();it!=x.end();it++)
////int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1};                      //4 Direction
////int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};  //8 direction
////int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//cout<<fixed<<setprecision(6)<<1.0<<endl;
typedef long long ll;
typedef unsigned long long ull; //scanf("%llu",&N);
typedef vector<int>     VI;
typedef vector<string>  VS;
typedef pair<int,int>   PII;
typedef pair<int,PII >  DPII;
typedef vector<pair<int,int> >VPII;
typedef vector<pair<int,pair<int,int> > > VDPII;

const int INF=(1<<29);
const int MAX=12;

#define MAX_N 10000002
vector<int>prime;
bool flag[MAX_N];

int Sive(int n) {  // n < MAX_N.  Be Careful.
    flag[0]=flag[1]=1;
    prime.push_back(2);
    int i;
    ll r;
    for(i=3; i<=n; i+=2) {
        if(!flag[i]) {
            prime.push_back(i);
            r=i*2;
            if(n/i>=i) for(int j=i*i; j<=n; j+=r) flag[j]=1;
        }
    }
    return (int)prime.size();
}

VI V[MAX];
bool isPrime(int n) {
    if(n<=1) return false;
    if(n==2)return 1;
    if(n<MAX_N) {
        if((n%2) && !flag[n]) return 1;
        else return 0;
    }
    for(int i=1; i<=sqrt(n); i++) {
        if(n%prime[i]==0) return 0;
    }
    return 1;
}

void PrimeFactorization() {
    int mxcnt=0;
    for(int i=2; i<MAX_N; i++) {
        int n=i,cnt=0;
        if(isPrime(n)) {
            cnt=1;
            V[cnt].pb(n);
            continue;
        }
        for(int j=0; prime[j]<=n/prime[j]; j++) {
            if(n%prime[j]==0) {
                cnt++;
                while(n%prime[j]==0) {
                    n/=prime[j];
                }
            }
        }
        if(n>1) cnt++;
        V[cnt].pb(i);
    }
    return;
}

int main() {

    READ("homework.txt");
    WRITE("homework_out.txt");

    int N=10000009;
    Sive(N);
    PrimeFactorization();
    //cout<<"COM"<<endl;

    int a,b,k,t,cas=0;
    cin>>t;
    while(t--) {
        cin>>a>>b>>k;
        if(k>=MAX) {
            cout<<"Case #"<<++cas<<": "<<0<<endl;
            continue;
        }
        bool id=false;
        int ans=0;
        for(int i=0; i<SZ(V[k]); i++) {
            if(V[k][i]>=a) id=true;
            if(V[k][i]>b) break;
            if(id) ans++;
        }
        cout<<"Case #"<<++cas<<": "<<ans<<endl;
    }

    return 0;
}






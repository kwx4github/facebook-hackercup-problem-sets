/*mohitmangnani*/
#include<bits/stdc++.h>

#define ll long long int
#define pb push_back
#define mp make_pair
#define s(x) scanf("%lld", &x)
#define SET(x, a) memset(x, a, sizeof(x));
#define trace(x) cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;

using namespace std;

bool primes[10000001];
void sieve() {
	SET(primes,true);
	primes[0] = false;	
	for (int i = 2; i < sqrt(1e7); i++) {
		if (primes[i]) {
			for (int j = 2; i * j <= 1e7; j++) {
				primes[i * j] = false;
			}
		}
	}
}

vector <int> factors[10000001];
void calfac() {
	for (int i = 2; i <= 10000000; i++) {
		if (factors[i].size() == 0) {
			for (int j = i; j <= 10000000; j+= i) {
				if (primes[i]) {
					factors[j].push_back(i);
				}
			}
		}
	}
}

int main()
{
	sieve();calfac();
	ll test,a,b,k;
	s(test);

	for (int t = 1; t <= test; t++) {
		s(a);s(b);s(k);
		ll count = 0;
		for (int i = a; i <= b; i++) {
			if (factors[i].size() == k) {
				count++;
			}
		}

		printf("Case #%d: %lld\n",t,count);
	}
	return 0;
}

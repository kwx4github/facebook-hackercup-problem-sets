#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
#define EPS 1e-7
typedef long long LL;
LL P[10000001], notP[10000001], Prima[10000001];
long long Pt = 0;
void limpiar(){
    for(int i=0;i<10000001;i++){
        P[i]=0;
        notP[i]=0;
        Prima[i]=0;
    }
}
void generarPrimocidad(int n) {
	notP[1] = 1;
	long long z=0;
	for (int i = 2; i <= n; ++i) {
		if (!notP[i]){
			 P[++Pt] = i;
			 z=i;
			 while(z<=10000000){
                Prima[z]++;
                z+=i;
			 }
		}
		for (int j = 1; j <= Pt && P[j] * i <= n; ++j) {
			notP[P[j] * i] = 1;
			if (i % P[j] == 0) break;
		}
	}
}

int main(){
    limpiar();
	generarPrimocidad(10000000);
	int casos, noCaso=1;
	cin >> casos;
	long long a,b,x;
	long long posible, primacity;
	while(noCaso <=casos){
	    cin >> a >> b >> x;
	    primacity=0;

	    for(;a<=b;a++){
            if(Prima[a]==x){
                primacity++;
            }
	    }
	    cout << "Case #" << noCaso << ": " << primacity << "\n";
        noCaso++;
	}
	return 0;
}

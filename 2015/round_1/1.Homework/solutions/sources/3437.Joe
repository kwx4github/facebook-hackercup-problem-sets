import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;


public class FBRound1Q1 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int cases = sc.nextInt();
		int count = 1;
		while (cases-- > 0) {
			int lower = sc.nextInt();
			int upper = sc.nextInt();
			List<Integer> primes = sieve(upper);
			int k = sc.nextInt();
			Collection<Integer> primacity = calcPrimacity(lower, upper, primes, k);
			System.out.println("Case #" + (count++) + ": " + primacity.size());
		}
		sc.close();
	}
	
	private static List<Integer> sieve(int upperBound) {
		BitSet bits = new BitSet(upperBound+1);
		
		bits.set(0, upperBound+1);
		bits.clear(0);
		bits.clear(1);

		for(int i = 2; i < (int) Math.sqrt(upperBound) + 1; ++i) {
			if (!bits.get(i)) continue;
			for (int j = i*i; j <= upperBound; j += i) {
				bits.clear(j);
			}
		}
		List<Integer> primes = new ArrayList<Integer>();
		for(int i = 0; i <= upperBound; ++i)
			if (bits.get(i))
				primes.add(i);
		return primes;
	}
	
	private static Collection<Integer> calcPrimacity(int lower, int upper, List<Integer> primes, int k) {
		Set<Integer> matches = new HashSet<Integer>();
		
		int[] memo = new int[upper+1];
		for (int prime: primes)
			memo[prime] = 1;
		for (int i = 0; i < (int) Math.sqrt(upper); ++i) {
			int prime = primes.get(i);
			for(int j = prime; j <= upper; ++j) {
				if (j*prime > upper || j*prime < 0) break;
				if (j%prime == 0) memo[j*prime] = memo[j];
				else memo[j*prime] = memo[j] + memo[prime];
			}
		}
		for (int i = lower; i <= upper ; ++i) {
			if (memo[i] == k) {
				matches.add(i);
			}
		}
		return matches;
	}
}
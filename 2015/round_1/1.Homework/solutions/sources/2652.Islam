#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <bits/stl_vector.h>
#include <cstring>



using namespace std;

vector<long long> allPrimes;

long long primacity[10000001ll];

bool generateAllPrimes() {
    allPrimes.push_back(2);
    primacity[2] = 1;
    for (long long i = 3; i <= 10000000ll; i += 2) {
        bool flag = true;
        long long maxPossible = (ceil(sqrt(i)));
        for (auto x : allPrimes) {
            if (i % x == 0 && i != x && x < i) {
                flag = false;
                break;
            }
            if (x > maxPossible)
                break;
        }
        if (flag) {
            allPrimes.push_back(i);
            primacity[i] = 1;
        }
    }
}

void generatePrimacity() {
    for (long long i = 3; i <= 10000000ll; i++) {
        if (primacity[i] == 1)
            continue;
        long long num = i;
        for (auto x : allPrimes) {
            if (x > i || num == 1)
                break;
            if (i % x == 0) {
                primacity[i]++;
                //Fundamental theorem of arithmetic
                while (num % x == 0) {
                    num /= x;
                }
                primacity[i] += primacity[num];
                break;
            }
        }
    }
}

long long findK(long long a, long long b, long long k)
{
    long long toReturn = 0;
    for(; a <= b; a++)
    {
        if(primacity[a] == k)
            toReturn++;
    }
    return toReturn;
}

int main() {
    freopen("large.txt", "r", stdin);
    freopen("a_output.txt", "w", stdout);
    memset(primacity, 0, sizeof (primacity));
    generateAllPrimes();
    generatePrimacity();
    int testCases;
    long long a, b, k;
    cin >> testCases;
    for (int caseCount = 1; caseCount <= testCases; caseCount++) {
        cin >> a >> b >> k;
        cout << "Case #" << caseCount << ": " << findK(a,b,k) << endl;
    }
    return 0;
}
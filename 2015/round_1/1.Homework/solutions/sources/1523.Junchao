#include <stdio.h>
#include <math.h>
#include <assert.h>

#include <string.h>
#include <set>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

#define ll long long
#define clr(x) memset(x,0,sizeof(x))

int cnt;
int p[10000000];
int is[10000005];
int num[10000005];
map< int, vector< int > > ft;

int main()
{
	clr(num);
	clr(is);
	cnt = 0;
	int max_num = 10000001;
	for( int i = 2; i < max_num; ++i )
	{
		if( !is[i] )
		{
			p[cnt++] = i;
			num[i] = 1;
		}
		if( num[i] == 0 )
		{
			printf("i = %d num = %d\n",i,num[i]);
		}
		for( int j = 0; j < cnt && (ll)p[j] * i < max_num; ++j )
		{
			is[p[j] * i] = 1;
			if( i % p[j] == 0 )
			{
				num[p[j]*i] = num[i];
			}
			else
			{
				num[p[j]*i] = num[i] + 1;
			}
		}
		//if( i < 100 ) printf("i = %d num = %d\n",i,num[i]);
	}
	for( int i = 2; i < max_num; ++i )
	{
		ft[num[i]].push_back( i );
	}
	//printf("cnt = %d\n",cnt);

	int T;
	scanf("%d",&T);
	for( int C= 0; C < T; ++C )
	{
		int a,b,k;
		scanf("%d%d%d",&a,&b,&k);

		vector< int > & nima = ft[k];
		printf("Case #%d: ",C+1);
		if( nima.size() == 0 )
		{
			printf("0\n");
		}
		else
		{
			int left = lower_bound( nima.begin(), nima.end(), a ) - nima.begin();
			int right = upper_bound( nima.begin(), nima.end(), b ) - nima.begin();
			//printf("left = %d right = %d\n",left, right);
			printf("%d\n", max( right - left, 0 ) );
		}
	}

}

#define _CRT_SECURE_NO_WARNINGS

#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <sstream>
#include <numeric>
#include <cstring>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;


const int maxn = 10000009;
int pv[ maxn ];
int primacity[ maxn ];

void sieve()
{
   fill( pv, pv + maxn, -1 );
   for( int i = 2; i < maxn; ++i )
      if( pv[ i ] == -1 )
      {
         for( int j = i; j < maxn; j += i )
         {
            pv[ j ] = i;
         }
      }

   for( int i = 2; i < maxn; ++i )
   {
      int x = i;
      while( x > 1 )
      {
         ++primacity[ i ];
         int j = pv[ x ];
         while( x % j == 0 )
            x /= j;
      }
   }
}


struct io
{
   io( int num ) : num( num ) {}
   int num;
};

struct input : public io
{
   input( int num ) : io( num ) {}
   // input fields
   int a, b, k;
};

struct output : public io
{
   output( int num ) : io( num ), cnt( 0 ) {}
   // output fields
   int cnt;
};

istream& operator >> ( istream& in, input& i )
{
   // input code
   in >> i.a >> i.b >> i.k;
   return in;
}

ostream& operator << ( ostream& out, input& i )
{
   // print input code
   out << i.a << ' ' << i.b << ' ' << i.k;
   return out;
}

ostream& operator << ( ostream& out, output& o )
{
   // output code
   out << o.cnt;
   return out;
}

bool operator == ( const output& lhs, const output& rhs )
{
   // compare two outputs
   return lhs.cnt == rhs.cnt;
}

void solve( const input& in, output& out )
{
   for( int i = in.a; i <= in.b; ++i )
      if( primacity[ i ] == in.k )
         ++out.cnt;
}

void bruteforce( const input& in, output& out )
{
}

input generate_input( int num )
{
   // generate random input
   return input( num );
}

void brute_test( const input& in )
{
   output o_solve( in.num );
   output b_solve( in.num );

   solve( in, o_solve );
   bruteforce( in, b_solve );

   if( o_solve == b_solve )
      cout << "correct" << endl;
   else
      cout << "INCORRECT" << endl;
}

void stress_test( int num )
{
   for( int i = 1; i <= num; ++i )
   {
      input in = generate_input( i );
      cout << "Input #" << i << ":" << endl;
      cout << in << endl;
      brute_test( in );
   }
}

#define do_brute 0
#define do_stress 0


int main()
{
   sieve();
   // file io

   freopen( "A.in", "r", stdin );
   freopen( "A.out", "w", stdout );

   if( do_stress )
   {
      int num;
      cin >> num;
      stress_test( num );
   }
   else
   {
      int num;
      cin >> num;
      for( int i = 1; i <= num; ++i )
      {
         input in( i );
         cin >> in;
         if( do_brute )
            brute_test( in );
         else
         {
            output out( i );
            solve( in, out );
            cout << "Case #" << i << ": " << out << endl;
         }
      }
   }
}
#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

bitset<10000010> bs; // 10^7 should be enough for most cases
int num[10000010];
//vector<int> primes; // compact list of primes in form of vector<int>
long long _sieve_size;
void sieve(long long upperbound) { // create list of primes in [0..upperbound]
	_sieve_size = upperbound + 1; // add 1 to include upperbound
	bs.set(); // set all bits to 1
	bs[0] = bs[1] = 0; // except index 0 and 1
	for (long long i = 2; i <= _sieve_size; i++) if (bs[i]) {
		// cross out multiples of i starting from i * i!
		for (long long j = i ; j <= _sieve_size; j += i){ bs[j] = 0; num[j]++;}
		
	}
}
int main(){
	sieve(10000005);
	int tc; cin >> tc;
	for(int t=1 ; t<=tc ; t++){
		int a,b,c;
		cin >> a >> b >> c;
		int ans=0;
		for(int i=a ; i<=b ; i++) if(num[i]==c) ans++;
		cout << "Case #" << t << ": " << ans << endl;
	}
	cin >> tc;
}
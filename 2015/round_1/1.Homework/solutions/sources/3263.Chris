#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

#define MAX_B 10000001

int primacity[MAX_B];
bool is_prime[MAX_B];

void precompute_primacities() {
  for (int i = 0; i < MAX_B; i++) {
     is_prime[i] = true;
     primacity[i] = 0;
  }

  vector<int> primes;
  for (int i = 2; i < MAX_B; i++) {
    if (is_prime[i]) {
      primes.push_back(i);
      primacity[i] = 1;
      int n = i + i;
      while (n < MAX_B) {
        is_prime[n] = false;
        n = n + i;
      }
    }
  }

  for (int i = 2; i < MAX_B; i++) {
    if (primacity[i] == 0) {
      vector<int>::iterator p = primes.begin();
      while (p != primes.end() && *p <= i) {
        if (i % *p == 0) {
          int d = i / *p;
          if (d % *p == 0) {
            primacity[i] = primacity[d];
          } else {
            primacity[i] = primacity[d] + 1;
          }
          break;
        }  
        p++;
      }
    }
  }
}

int solve(int A, int B, int K) {
  int count = 0;
  for (int i = A; i <= B; i++) {
    if (primacity[i] == K) {
      count++;
    }
  }
  return count;
}

int main() {
  precompute_primacities();

  int T;
  cin >> T;
  for (int c = 0; c < T; c++) {
    int A, B, K;
    cin >> A >> B >> K;
    cout << "Case #" << c + 1 << ": " << solve(A, B, K) << endl;
  }

  return 0;
}

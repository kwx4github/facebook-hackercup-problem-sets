#include<stdio.h>
#include<string.h>
#include<string>
#include<algorithm>
#include<set>
#include<queue>

using namespace std;

int n,m;

char a[200][200];
bool move[110][110][5];

int dx[] = {0,-1,0,1};
int dy[] = {-1,0,1,0};

void gen_map(int layer){
	for(int i = 1;i <= n;++i)
		for(int j = 1;j <= m;++j)
			move[i][j][layer] = true;
	for(int i = 1;i <= n;++i)
		for(int j = 1;j <= m;++j){
			if(a[i][j] == '#'){
				move[i][j][layer] = false;
		//		printf("%d %d %d\n",i,j,layer);
			}else if(a[i][j] >= '0' && a[i][j] <= '3'){
				int nowx = i,
					nowy = j;
				while(nowx >= 1 && nowx <= n && nowy >= 1 && nowy <= m){
					move[nowx][nowy][layer] = false;
					nowx += dx[(a[i][j] - '0' + layer) % 4];
					nowy += dy[(a[i][j] - '0' + layer) % 4];
					if(a[nowx][nowy] == '#' || 
							(a[nowx][nowy] >= '0' &&
							 a[nowx][nowy] <= '3'))
						break;
				}
			}
		}
}

struct Tri{
	int x,y,layer;
	Tri(){}
	Tri(int a,int b,int c) : x(a),y(b),layer(c) {}
};

bool visited[200][200][5];
int dist[200][200][5];

int bfs(Tri tri,int gx,int gy){
	memset(visited,false,sizeof(visited));
	queue<Tri> q;
	q.push(tri);
	visited[tri.x][tri.y][tri.layer] = true;
	dist[tri.x][tri.y][tri.layer] = 0;
	while(!q.empty()){
		Tri now = q.front();
		q.pop();
		int nextlayer = (now.layer + 1) % 4;
		for(int i = 0;i < 4;++i){
			int nx = now.x + dx[i],
				ny = now.y + dy[i];
			if(!move[nx][ny][nextlayer])
				continue;
			if(nx < 1 || nx > n || ny < 1 || ny > m)
				continue;
			if(!visited[nx][ny][nextlayer]){
				visited[nx][ny][nextlayer] = true;
				dist[nx][ny][nextlayer] = dist[now.x][now.y][now.layer] + 1;
				if(nx == gx && ny == gy){
					return dist[nx][ny][nextlayer];
				}
				q.push(Tri(nx,ny,nextlayer));
			}
		}
	}
	return -1;
}

int main(){
	int T;
	scanf("%d",&T);
	for(int cas = 1;cas <= T;++cas){
		scanf("%d%d",&n,&m);
		for(int i = 1;i <= n;++i)
			scanf("%s",a[i] + 1);
		for(int i = 1;i <= n;++i)
			for(int j = 1;j <= m;++j){
				if(a[i][j] == '<')
					a[i][j] = '0';
				else if(a[i][j] == '^')
					a[i][j] = '1';
				else if(a[i][j] == '>')
					a[i][j] = '2';
				else if(a[i][j] == 'v')
					a[i][j] = '3';
			}
		for(int i = 0;i < 4;++i)
			gen_map(i);
	/*	for(int i = 0;i < 4;++i){
			printf("layer %d:\n",i);
			for(int j = 1;j <= n;++j,puts(""))
				for(int k = 1;k <= m;++k)
					printf("%d",move[j][k][i]);
		}
		for(int i = 1;i <= n;++i,puts(""))
			for(int j = 1;j <= m;++j)
				printf("%d ",a[i][j]);*/
		int sx,sy,gx,gy;
		for(int i = 1;i <= n;++i)
			for(int j = 1;j <= m;++j){
				if(a[i][j] == 'S'){
					sx = i;
					sy = j;
				}else if(a[i][j] == 'G'){
					gx = i;
					gy = j;
				}
			}
		int ans = bfs(Tri(sx,sy,0),gx,gy);
		printf("Case #%d: ",cas);
		if(ans == -1)
			printf("impossible\n");
		else
			printf("%d\n",ans);
	}
	return 0;	
}


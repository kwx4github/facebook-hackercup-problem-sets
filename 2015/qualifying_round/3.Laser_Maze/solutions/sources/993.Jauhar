#include <bits/stdc++.h>

using namespace std;

struct triplet{ int a,b,c; triplet(){a=b=c=0;} triplet(int _a, int _b, int _c){a=_a;b=_b;c=_c;}};

int t, tc, m, n, f[100][100][4], pi, pj, gi, gj;
queue<triplet> que;
char s[100][101];

void dir(int d, int i, int j, int a){
	//cout<<"dir "<<d<<" "<<i<<" "<<j<<" "<<a<<endl;
	if (d == 0)
		for (int k = i-1; k >= 0 && (s[k][j] == '.' || s[k][j] == 'S' || s[k][j] == 'G'); k--)
			f[k][j][a] = 1;
	else if (d == 2)
		for (int k = i+1; k < m && (s[k][j] == '.' || s[k][j] == 'S' || s[k][j] == 'G'); k++)
			f[k][j][a] = 1;
	else if (d == 1)
		for (int k = j+1; k < n && (s[i][k] == '.' || s[i][k] == 'S' || s[i][k] == 'G'); k++)
			f[i][k][a] = 1;
	else
		for (int k = j-1; k >= 0 && (s[i][k] == '.' || s[i][k] == 'S' || s[i][k] == 'G'); k--)
			f[i][k][a] = 1;
}

int main(void){
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++){
		scanf("%d%d", &m, &n);
		for (int i = 0; i < m; i++)
			scanf("%s", s[i]);
		memset(f, 0, sizeof f);
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++){
				if (s[i][j] == 'S')
					pi = i, pj = j;
				if (s[i][j] == 'G')
					gi = i, gj = j;
				if (s[i][j] == '#' || s[i][j] == '^' || s[i][j] == 'v' || s[i][j] == '<' || s[i][j] == '>')
					f[i][j][0] = f[i][j][1] = f[i][j][2] = f[i][j][3] = 1;
				if (s[i][j] == '^')
					dir(0,i,j,0), dir(1,i,j,1), dir(2,i,j,2), dir(3,i,j,3);
				if (s[i][j] == 'v')
					dir(2,i,j,0), dir(3,i,j,1), dir(0,i,j,2), dir(1,i,j,3);
				if (s[i][j] == '>')
					dir(1,i,j,0), dir(2,i,j,1), dir(3,i,j,2), dir(0,i,j,3);
				if (s[i][j] == '<')
					dir(3,i,j,0), dir(0,i,j,1), dir(1,i,j,2), dir(2,i,j,3);
			}
		/*
		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++)
				printf("(%d %d %d %d) ", f[i][j][0], f[i][j][1], f[i][j][2], f[i][j][3]);
			printf("\n");
		}
		*/
		while (!que.empty())
			que.pop();
		que.push(triplet(pi,pj,0));
		int h = -1;
		while (!que.empty()){
			triplet p = que.front(); que.pop();
			if (p.a == gi && p.b == gj){
				h = p.c;
				break;
			}
			if (f[p.a][p.b][p.c%4] == 2)
				continue;
			f[p.a][p.b][p.c%4] = 2;
			if (p.a + 1 < m && f[p.a+1][p.b][(p.c+1)%4] == 0)
				que.push(triplet(p.a+1, p.b, p.c+1));
			if (p.a - 1 >= 0 && f[p.a-1][p.b][(p.c+1)%4] == 0)
				que.push(triplet(p.a-1, p.b, p.c+1));
			if (p.b + 1 < n && f[p.a][p.b+1][(p.c+1)%4] == 0)
				que.push(triplet(p.a, p.b+1, p.c+1));
			if (p.b - 1 >= 0 && f[p.a][p.b-1][(p.c+1)%4] == 0)
				que.push(triplet(p.a, p.b-1, p.c+1));
		}
		printf("Case #%d: ", tc);
		if (h > -1)
			printf("%d\n", h);
		else
			printf("impossible\n");
	}
	return 0;
}

#include <bits/stdc++.h>

using namespace std;

const int N = 100;
int n, m;
char g[N][N + 1];
bool was[N][N][4];
const string dir = "<^>v";
const char imp[] = "impossible";
int di[] = {0, -1, 0, 1};
int dj[] = {-1, 0, 1, 0};

bool canWalk(int i, int j, int d) {
  if(i < 0 || i >= n || j < 0 || j >= m || was[i][j][d]) return 0;
  for(int q = 0; q < 4; ++q) {
    int ii = i;
    int jj = j;
    while(ii >= 0 && ii < n && jj >= 0 && jj < m) {
      if(g[ii][jj] == '#') break;
      int k = dir.find(g[ii][jj]);
      ii += di[q];
      jj += dj[q];
      if(k == -1) continue;
      if((k + d) % 4 == (q + 2) % 4) return 0;
      else break;
    }
  }
  return 1;
}

struct State {
  int i, j, d;
};

int bfs(int si, int sj) {
  memset(was, 0, sizeof was);
  queue<State> Q;
  Q.push((State){si, sj, 0});
  int lv = 0;
  while(int sz = Q.size()) {
    while(sz--) {
      si = Q.front().i;
      sj = Q.front().j;
      int d = Q.front().d;
      Q.pop();
      d++; if(d == 4) d = 0;
      for(int k = 0; k < 4; ++k) {
        int i = si + di[k];
        int j = sj + dj[k];
        if(!canWalk(i, j, d)) continue;
        if(g[i][j] == 'G') {
          return lv + 1;
        }
        was[i][j][d] = 1;
        Q.push((State){i, j, d});
      }
    }
    lv++;
  }
  return -1;
}

int main() {
  freopen("laser_maze.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);
  int t; scanf("%d", &t);
  for(int tst = 1; tst <= t; ++tst) {
    scanf("%d %d", &n, &m);
    int si, sj;
    for(int i = 0; i < n; ++i) {
      scanf("%s", g[i]);
      for(int j = 0; j < m; ++j) {
        if(g[i][j] == 'S') {
          si = i;
          sj = j;
        }
      }
    }
    printf("Case #%d: ", tst);
    int ans = bfs(si, sj);
    if(ans == -1) puts(imp);
    else printf("%d\n", ans);
  }
  return 0;
}

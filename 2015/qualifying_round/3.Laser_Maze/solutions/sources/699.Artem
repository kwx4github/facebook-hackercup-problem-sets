import java.io.*;
import java.util.*;

public class LazerMaze {

	FastScanner in;
	PrintWriter out;

	int[] dr = new int[] { -1, 0, 1, 0 };
	int[] dc = new int[] { 0, 1, 0, -1 };

	String dirs = "^>v<";

	void solve() {
		int n = in.nextInt(), m = in.nextInt();

		char[][] field = new char[n][m];
		for (int i = 0; i < n; i++) {
			field[i] = in.nextToken().toCharArray();
		}

		int startR = 0, startC = 0;
		int goalR = 0, goalC = 0;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (field[i][j] == 'S') {
					startR = i;
					startC = j;
					field[i][j] = '.';
				}
				if (field[i][j] == 'G') {
					goalR = i;
					goalC = j;
					field[i][j] = '.';
				}
			}
		}

		boolean[][][] bad = new boolean[4][][];

		for (int cycle = 0; cycle < 4; cycle++) {
			bad[cycle] = fillBad(field);
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					int pos = dirs.indexOf(field[i][j]);
					if (pos != -1) {
						field[i][j] = dirs.charAt((pos + 1) % 4);
					}
				}
			}
		}

		int[] q = new int[3 * 4 * n * m];
		int[][][] dist = new int[4][n][m];
		int INF = Integer.MAX_VALUE / 2;
		for (int[][] i : dist) {
			for (int[] j : i) {
				Arrays.fill(j, INF);
			}
		}

		dist[0][startR][startC] = 0;
		int head = 0, tail = 0;
		q[tail++] = 0;
		q[tail++] = startR;
		q[tail++] = startC;
		while (head < tail) {
			int curD = q[head++];
			int curR = q[head++];
			int curC = q[head++];
			if (curR == goalR && curC == goalC) {
				out.println(dist[curD][curR][curC]);
				return;
			}

			for (int d = 0; d < 4; d++) {
				int nr = curR + dr[d], nc = curC + dc[d];
				int nd = (curD+  1) % 4;
				if (0 <= nr && nr < n && 0 <= nc && nc < m
						&& !bad[nd][nr][nc] && dist[nd][nr][nc] == INF) {
					dist[nd][nr][nc] = dist[curD][curR][curC] + 1;
					q[tail++] = nd;
					q[tail++] = nr;
					q[tail++] = nc;
				}
			}
		}

		out.println("impossible");
	}

	private boolean[][] fillBad(char[][] field) {
		int n = field.length, m = field[0].length;

		boolean[][] bad = new boolean[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				int d = dirs.indexOf(field[i][j]);
				if (d != -1) {
					int ci = i, cj = j;
					do {
						bad[ci][cj] = true;
						ci += dr[d];
						cj += dc[d];
					} while (0 <= ci && ci < n && 0 <= cj && cj < m
							&& field[ci][cj] == '.');
				} else if (field[i][j] == '#') {
					bad[i][j] = true;
				}
			}
		}
		return bad;
	}
	void run() {
		try {
			in = new FastScanner("input.txt");
			out = new PrintWriter("output.txt");
			int T = in.nextInt();
			for (int test = 1; test <= T; test++) {
				out.print(String.format("Case #%d: ", test));
				solve();
			}
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public FastScanner(String s) {
			try {
				br = new BufferedReader(new FileReader(s));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		String nextToken() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(nextToken());
		}

		long nextLong() {
			return Long.parseLong(nextToken());
		}

		double nextDouble() {
			return Double.parseDouble(nextToken());
		}
	}

	public static void main(String[] args) {
		new LazerMaze().run();
	}
}

#include <cstdio>
#include <cstring>
#include <cstdlib>
#define MAXN 1005

struct coord
{
	int x, y, stage, steps;
};

int main ()
{
	int T, iT;
	scanf("%d",&T);
	static char s[MAXN][MAXN];
	static char allowed[MAXN][MAXN][4];
	static char b[MAXN][MAXN][4];
	static struct coord q[MAXN*MAXN*4];
	for (iT = 0; iT < T; iT++)
	{
		int N, M;
		scanf("%d %d",&N,&M);
		memset(s, '#', sizeof(s));
		memset(allowed, 1, sizeof(allowed));
		int i, j;
		for (i = 1; i <= N; i++)
		{
			scanf("\n%s",&(s[i][1]));
			s[i][M+1] = '#';
		}
		int sx, sy, ex, ey;
		N += 2; M += 2;
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < M; j++)
			{
				if (s[i][j] == 'S')
				{
					sx = i; sy = j;
					s[i][j] = '.';
				}
				if (s[i][j] == 'G')
				{
					ex = i; ey = j;
					s[i][j] = '.';
				}
			}
		}
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < M; j++)
			{
				if ((s[i][j] == '<') || (s[i][j] == '>') || (s[i][j] == '^') || (s[i][j] == 'v'))
				{
					int x, y, dx, dy, stage;

					dx = 0; dy = -1;
					if (s[i][j] == '<') stage = 0;
					else if (s[i][j] == '^') stage = 1;
					else if (s[i][j] == '>') stage = 2;
					else if (s[i][j] == 'v') stage = 3;
					x = i + dx;
					y = j + dy;
					while (s[x][y] == '.')
					{
						allowed[x][y][stage] = 0;
						x += dx; y += dy;
					}

					dx = -1; dy = 0;
					if (s[i][j] == '<') stage = 3;
					else if (s[i][j] == '^') stage = 0;
					else if (s[i][j] == '>') stage = 1;
					else if (s[i][j] == 'v') stage = 2;
					x = i + dx;
					y = j + dy;
					while (s[x][y] == '.')
					{
						allowed[x][y][stage] = 0;
						x += dx; y += dy;
					}

					dx = 0; dy = 1;
					if (s[i][j] == '<') stage = 2;
					else if (s[i][j] == '^') stage = 3;
					else if (s[i][j] == '>') stage = 0;
					else if (s[i][j] == 'v') stage = 1;
					x = i + dx;
					y = j + dy;
					while (s[x][y] == '.')
					{
						allowed[x][y][stage] = 0;
						x += dx; y += dy;
					}

					dx = 1; dy = 0;
					if (s[i][j] == '<') stage = 1;
					else if (s[i][j] == '^') stage = 2;
					else if (s[i][j] == '>') stage = 3;
					else if (s[i][j] == 'v') stage = 0;
					x = i + dx;
					y = j + dy;
					while (s[x][y] == '.')
					{
						allowed[x][y][stage] = 0;
						x += dx; y += dy;
					}
				}
			}
		}
		memset(b, 0, sizeof(b));
		q[0].x = sx; q[0].y = sy; q[0].stage = 0; q[0].steps = 0;
		b[sx][sy][0] = 1;
		int r = 0; int w = 1;
		char flag = 0;
		int d[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
		while (w > r)
		{
			if ((q[r].x == ex) && (q[r].y == ey))
			{
				flag = 1;
				break;
			}
			for (int id = 0; id < 4; id++)
			{
				int nx = q[r].x + d[id][0];
				int ny = q[r].y + d[id][1];
				int nstage = (q[r].stage + 1) % 4;
				if ((s[nx][ny] == '.') && (allowed[nx][ny][nstage]) && (!b[nx][ny][nstage]))
				{
					b[nx][ny][nstage] = 1;
					q[w].x = nx;
					q[w].y = ny;
					q[w].stage = nstage;
					q[w].steps = q[r].steps + 1;
					w++;
				}
			}
			r++;
		}
		printf("Case #%d: ",iT+1);
		if (flag) printf("%d\n",q[r].steps);
		else printf("impossible\n");
	}
	return 0;
}

#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

using namespace std;

const int di[] = {0, -1, 0, 1};
const int dj[] = {-1, 0, 1, 0};
const char tt[] = {'<', '^', '>', 'v'};
const int MAXN = 105;

int tn;
int n, m;
int si, sj;
int gi, gj;
char c[MAXN][MAXN];
bool bad[MAXN][MAXN][10];
int dp[MAXN][MAXN][10];
bool used[MAXN][MAXN][10];
queue < pair < pair <int, int>, int> > q;

int main() {
	//assert(freopen("input.txt","r",stdin));
	//assert(freopen("output.txt","w",stdout));

	scanf("%d", &tn);

	for (int test = 1; test <= tn; test++) {
		scanf("%d %d\n", &n, &m);
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				scanf("%c", &c[i][j]);
				if (c[i][j] == 'S') {
					si = i; sj = j;
					c[i][j] = '.';
				}
				if (c[i][j] == 'G') {
					gi = i; gj = j;
					c[i][j] = '.';
				}
			}
			scanf("\n");
		}

		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++)
				for (int k = 0; k < 4; k++) {
					bad[i][j][k] = false;
					dp[i][j][k] = -1;
					used[i][j][k] = false;
				}	

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				int cur = -1;
				for (int k = 0; k < 4; k++) {
					if (c[i][j] == tt[k]) {
						cur = k;
						break;						
					} 
				}
				if (cur == -1)
					continue;
				for (int k = 0; k < 4; k++) {
					int ii = i, jj = j;
					while (true) {
						if (ii < 1 || ii > n || jj < 1 || jj > m)
							break;
						if (!(ii == i && jj == j) && c[ii][jj] != '.')
							break;
						bad[ii][jj][k] = true;
						ii = ii + di[cur]; jj = jj + dj[cur];
					}
					cur = (cur + 1) % 4;	
				}
			}
		}	

		dp[si][sj][0] = 0;
		used[si][sj][0] = true;
		while (!q.empty())
			q.pop();
		q.push(make_pair(make_pair(si, sj), 0));

		while (!q.empty()) {
			int i = q.front().first.first;
			int j = q.front().first.second;
			int md = q.front().second;
			q.pop();


        	for (int k = 0; k < 4; k++) {
        		int ci = i + di[k], cj = j + dj[k];
        		int cmd = (md + 1) % 4;
        		if (ci < 1 || ci > n || cj < 1 || cj > m)
        			continue;
				if (used[ci][cj][cmd])
					continue;
        		if (bad[ci][cj][cmd])
        			continue;
        		if (c[ci][cj] != '.')
        			continue;

        		used[ci][cj][cmd] = true;
        		dp[ci][cj][cmd] = dp[i][j][md] + 1;
        		q.push(make_pair(make_pair(ci, cj), cmd));
        	}	
		}

		int mn = -1;
		for (int i = 0; i < 4; i++)
			if (dp[gi][gj][i] != -1)
				if (mn == -1 || dp[gi][gj][i] < mn)
					mn = dp[gi][gj][i];

		if (mn == -1) {
			printf("Case #%d: impossible\n", test);
		}
		else {
			printf("Case #%d: %d\n", test, mn);
		}                                 
	}	

	return 0;
}
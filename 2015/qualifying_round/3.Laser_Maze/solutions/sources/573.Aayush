#include<cstdio>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<map>

using namespace std;

#define ll long long
#define inf 2000000000
#define mod 1000000007
#define vv vector<int>
#define pp pair<int,int>
#define vvp vector<pp>
#define pb push_back
#define st set<int>
#define mst multiset<int>
#define mp map<string,int>
#define pr(cn,x) ((cn).find(x)!=(cn).end()) 
#define tr(cn,it) for(typeof((cn).begin()) it=(cn).begin();it!=(cn).end();it++)

/* State : dp[i][j][k] -> minm distance from the source to (i,j) in multiples of
                          4N + k units, where N>=0 */

char str[101][101];
bool shoot[101][101][4];
int dp[101][101][4];

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};

bool lasers(int i,int j,int a,int b,int r)
{
	if(str[a][b]=='#')
	return true;
	else if(str[a][b]=='v')
	{
		shoot[i][j][(r-4)%4]=true;
		return true;
	}
	else if(str[a][b]=='>')
	{
		shoot[i][j][(r-3)%4]=true;
		return true;
	}
	else if(str[a][b]=='^')
	{
		shoot[i][j][(r-2)%4]=true;
		return true;
	}
	else if(str[a][b]=='<')
	{
		shoot[i][j][(r-1)%4]=true;
		return true;
	}
	return false;
}

void impossible_steps(int n,int m)
{
	int i,j,k;
	memset(shoot,false,sizeof(shoot));
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			if((str[i][j]=='.')||(str[i][j]=='G'))
			{
				for(k=i-1;k>=0;k--)
				{
					if(lasers(i,j,k,j,4))
					break;
				}
				for(k=j+1;k<m;k++)
				{
					if(lasers(i,j,i,k,5))
					break;
				}
				for(k=i+1;k<n;k++)
				{
					if(lasers(i,j,k,j,6))
					break;
				}
				for(k=j-1;k>=0;k--)
				{
					if(lasers(i,j,i,k,7))
					break;
				}
			}
		}
	}
}

void BFS(int n,int m,int a,int b,int r)
{
	int i,j,k,l,f1,f2,f3;
	queue<int> q1,q2,q3;
	q1.push(a); q2.push(b); q3.push(r); dp[a][b][r]=0;
	while(!q1.empty())
	{
		f1=q1.front(); f2=q2.front(); f3=q3.front();
		for(l=0;l<4;l++)
		{
			i=f1+dx[l]; j=f2+dy[l]; k=(f3+1)%4;
			if((i<0)||(i>=n)||(j<0)||(j>=m))
			continue;
			if((str[i][j]=='.')||(str[i][j]=='S')||(str[i][j]=='G'))
			{
				if((!shoot[i][j][k])&&(dp[i][j][k]>(dp[f1][f2][f3]+1)))
				{
					q1.push(i); q2.push(j); q3.push(k);
					dp[i][j][k]=dp[f1][f2][f3]+1;
				}
			}
		}
		q1.pop(); q2.pop(); q3.pop();
	}
}

int main()
{
    int tc,n,m,t,i,j,k,a,b,p,q,ans;
    scanf("%d",&tc);
    for(t=1;t<=tc;t++)
    {
        scanf("%d%d",&n,&m);
        for(i=0;i<n;i++)
        scanf("%s",str[i]);
        impossible_steps(n,m);
        for(i=0;i<n;i++)
        {
        	for(j=0;j<m;j++)
        	{
        		if(str[i][j]=='S')
        		{
        			a=i; b=j;
        		}
        		else if(str[i][j]=='G')
        		{
        			p=i; q=j;
        		}
        		for(k=0;k<4;k++)
        		dp[i][j][k]=inf;
        	}
        }
        BFS(n,m,a,b,0);
        ans=inf;
        for(k=0;k<4;k++)
        {
        	if(dp[p][q][k]<ans)
        	ans=dp[p][q][k];
        }
        if(ans!=inf)
        printf("Case #%d: %d\n",t,ans);
        else
        printf("Case #%d: impossible\n",t);
    }
    return 0;
}

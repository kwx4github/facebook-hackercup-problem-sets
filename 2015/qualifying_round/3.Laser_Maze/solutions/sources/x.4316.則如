#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void fire(char map[][120][120], int turn, int dir, int x, int y, int m, int n)
{
	int i;
	switch(dir){
		case 0:
			for(i = x - 1;i >= 0;i--){
				if(map[turn][i][y] == '.')
					map[turn][i][y] = '#';
				else
					break;
			}
			break;
		case 1:
			for(i = y + 1;i < n;i++){
				if(map[turn][x][i] == '.')
					map[turn][x][i] = '#';
				else
					break;
			}
			break;
		case 2:
			for(i = x + 1;i < m;i++){
				if(map[turn][i][y] == '.')
					map[turn][i][y] = '#';
				else
					break;
			}
			break;
		case 3:
			for(i = y - 1;i >= 0;i--){
				if(map[turn][x][i] == '.')
					map[turn][x][i] = '#';
				else
					break;
			}
			break;
		default:
			break;
	}
}

int turretDir(char c, int turn)
{
	int dir = -1;
	if(c == '^')
		dir = 0;
	else if(c == '>')
		dir = 1;
	else if(c == 'v')
		dir = 2;
	else if(c == '<')
		dir = 3;
	if(dir != -1)
		return (dir + turn) % 4;
	return -1;
}

void make_wall(char map[][120][120], int turn, int m, int n)
{
	int i, j, td;
	for(i = 0;i < m;i++){
		for(j = 0;j < n;j++){
			td = turretDir(map[turn][i][j], turn);
			if(td != -1){
				fire(map, turn, td, i, j, m, n);
			}
		}
	}
}

int dfs(char map[][120][120], int turn, int x, int y, int xe, int ye, int m, int n, int dp[][120][120])
{
	int ans = -1, tmp;
	int turn_now = (turn + 1) % 4;
	//printf("%d %d\n", x, y);
	//map[turn][x][y] = '#';
	if(x == xe && y == ye)
		return 0;
	if(x - 1 >= 0){
		if(map[turn_now][x - 1][y] == '.' && (dp[turn_now][x - 1][y] == -1 || dp[turn_now][x - 1][y] > dp[turn][x][y] + 1)){
			dp[turn_now][x - 1][y] = dp[turn][x][y] + 1;
			map[turn_now][x - 1][y] = '#';
			tmp = dfs(map, turn_now, x - 1, y, xe, ye, m, n, dp) + 1;
			map[turn_now][x - 1][y] = '.';
			if((ans > tmp || ans == -1) && tmp != 0)
				ans = tmp;
		}
	}
	if(x + 1 < m){
		if(map[turn_now][x + 1][y] == '.' && (dp[turn_now][x + 1][y] == -1 || dp[turn_now][x + 1][y] > dp[turn][x][y] + 1)){
			dp[turn_now][x + 1][y] = dp[turn][x][y] + 1;
			map[turn_now][x + 1][y] = '#';
			tmp = dfs(map, turn_now, x + 1, y, xe, ye, m, n, dp) + 1;
			map[turn_now][x + 1][y] = '.';
			if((ans > tmp || ans == -1) && tmp != 0)
				ans = tmp;
		}
	}
	if(y - 1 >= 0){
		if(map[turn_now][x][y - 1] == '.' && (dp[turn_now][x][y - 1] == -1 || dp[turn_now][x][y - 1] > dp[turn][x][y] + 1)){
			dp[turn_now][x][y - 1] = dp[turn][x][y] + 1;
			map[turn_now][x][y - 1] = '#';
			tmp = dfs(map, turn_now, x, y - 1, xe, ye, m, n, dp) + 1;
			map[turn_now][x][y - 1] = '.';
			if((ans > tmp || ans == -1) && tmp != 0)
				ans = tmp;
		}
	}
	if(y + 1 < n){
		if(map[turn_now][x][y + 1] == '.' && (dp[turn_now][x][y + 1] == -1 || dp[turn_now][x][y + 1] > dp[turn][x][y] + 1)){
			dp[turn_now][x][y + 1] = dp[turn][x][y] + 1;
			map[turn_now][x][y + 1] = '#';
			tmp = dfs(map, turn_now, x, y + 1, xe, ye, m, n, dp) + 1;
			map[turn_now][x][y + 1] = '.';
			if((ans > tmp || ans == -1) && tmp != 0)
				ans = tmp;
		}
	}
	//printf("%d\n", ans);
	return ans;
}

int main()
{
	int t, cc = 1, i, j, m, n, ans, x, y, xe, ye;
	int dp[4][120][120];
	char map[4][120][120];
	scanf("%d", &t);
	while(t--){
		scanf("%d%d", &m, &n);
		for(i = 0;i < m;i++){
			scanf("%s", map[0][i]);
			for(j = 0;j < n;j++){
				dp[0][i][j] = dp[1][i][j] = dp[2][i][j] = dp[3][i][j] = -1;
				if(map[0][i][j] == 'S'){
					x = i;
					y = j;
					map[0][i][j] = '.';
					dp[0][i][j] = 0;
				}
				if(map[0][i][j] == 'G'){
					xe = i;
					ye = j;
					map[0][i][j] = '.';
				}
			}
			strcpy(map[1][i], map[0][i]);
			strcpy(map[2][i], map[0][i]);
			strcpy(map[3][i], map[0][i]);
		}
		for(i = 0;i < 4;i++)
			make_wall(map, i, m, n);
		/*for(i = 0;i < 4;i++){
			for(j = 0;j < m;j++)
				printf("%s\n", map[i][j]);
		}*/
		// dfs here
		ans = dfs(map, 0, x, y, xe, ye, m, n, dp);
		if(ans != -1)
			printf("Case #%d: %d\n", cc++, ans);
		else
			printf("Case #%d: impossible\n", cc++);
	}
	return 0;
}

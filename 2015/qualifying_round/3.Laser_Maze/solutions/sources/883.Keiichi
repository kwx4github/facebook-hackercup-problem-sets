/*
  Laser Maze
  https://www.facebook.com/hackercup/problems.php?pid=15235992545a59737&round=742632349177460
 */
#include <bits/stdc++.h>
using namespace std;
#define reps(i,n, m) for(int i=n; i<int(m); ++i)
#define rep(i,n)     reps(i, 0, n)
char mp[110][110];
bool ok[4][110][110];
int n, m;
int dx[4] = {-1, 0, 1, 0};
int dy[4] = { 0, 1, 0,-1};
map<char, int> tur  = { {'^', 0}, {'>', 1}, {'v', 2}, {'<', 3}};

bool str_has (string str, char c) {
  rep (i, str.size()) {
    if (str[i] == c)return true;
  }
  return false;

}
bool valid (int x, int y) {
  return 0<=x && x<n && 0<=y && y<m && str_has("SG.", mp[x][y]);
}

int main () {
  int T;
  pair<int, int> s, g;
  cin >> T;
  rep(times, T) {
    cin >> n >> m;
    rep (i, n) {
      rep (j, m) {
        cin >> mp[i][j];
        if (mp[i][j] == 'S') {
          s = make_pair (i, j);
        } else if (mp[i][j]=='G') {
          g = make_pair (i, j);
        }
        rep (t, 4) {
          ok[t][i][j] = valid(i, j);
        }
      }
    }

    rep (i, n) {
      rep (j, m) {
        if (!str_has("^>v<", mp[i][j])) continue;
        rep (t, 4) {
          int dir = (tur[mp[i][j]]+t)%4;
          int x=i+dx[dir], y=j+dy[dir];
          while (valid(x, y)) {
            ok[t][x][y] = false;
            x += dx[dir];
            y += dy[dir];
          }
        }
      }
    }

    queue<pair<int, pair<int, int>>> que;
    int ans = -1;

    que.push(make_pair(0, s));
    ok[0][s.first][s.second] = false;

    while (!que.empty()) {
      auto p = que.front(); que.pop();
      int turn = p.first;
      auto xy = p.second;
      if (xy == g) {
        ans = turn; break;
      }
      rep (i, 4) {
        int nx = xy.first + dx[i];
        int ny = xy.second+ dy[i];
        if (valid(nx, ny) && ok[(turn+1)%4][nx][ny]) {
          que.push(make_pair(turn+1, make_pair(nx, ny)));
          ok[(turn+1)%4][nx][ny] = false;
        }
      }
    }
    cout << "Case #" << times+1 << ": ";
    if (ans == -1) {
      cout << "impossible" <<endl;
    } else {
      cout << ans <<endl;
    }
  }
}

#include<iostream>
#include<vector>
#include<queue>

using namespace std;
int height, width;
char grid[101][101];

vector < vector < vector<bool> > > visited;
//vector < vector < vector <int> > > bestSteps;
//-2)%4+)2
int best;
struct pp
{
	int x,y,steps;
};
int dfs(int x, int y, int steps)
{
	if (steps==4)
	{
		int aa=0;
	}
	if (grid[x][y]=='#') return -1;
	if (visited[steps%4][x][y]) return -1;
	if (grid[x][y]>=2&&grid[x][y]<=5) return -1;
	
	if (steps>best&&best!=-1) return -1;
	bool works=true;
	if (steps!=0)
	{
	for (int c=x-1; c>=0;c--)
	{
		if (grid[c][y]=='#') break;
		if (grid[c][y]=='.') continue;
		if (grid[c][y]=='S') continue;
		if (grid[c][y]=='G') continue;
		if (((grid[c][y]-2)+steps)%4==2)
		{
			visited[steps%4][c][y]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) return -1;
	for (int c=x+1; c<height;c++)
	{
		if (grid[c][y]=='#') break;
		if (grid[c][y]=='.') continue;
		if (grid[c][y]=='S') continue;
		if (grid[c][y]=='G') continue;
		if (((grid[c][y]-2)+steps)%4==0)
		{
			visited[steps%4][c][y]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) return -1;
	for (int c=y-1; c>=0;c--)
	{
		if (grid[x][c]=='#') break;
		if (grid[x][c]=='.') continue;
		if (grid[x][c]=='S') continue;
		if (grid[x][c]=='G') continue;
		if (((grid[x][c]-2)+steps)%4==1)
		{
			visited[steps%4][x][c]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) return -1;
	for (int c=y+1; c<width;c++)
	{
		if (grid[x][c]=='#') break;
		if (grid[x][c]=='.') continue;
		if (grid[x][c]=='S') continue;
		if (grid[x][c]=='G') continue;
		if (((grid[x][c]-2)+steps)%4==3)
		{
			visited[steps%4][x][c]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) return -1;
	}
	if (grid[x][y]=='G')
	{
	
		if (best==-1||steps<best)
			best=steps;
		return 0;
	}
	
	
	// check if laser kills this path
	
	
	visited[steps%4][x][y]=true;
	int minSteps=-1;
	if (x>0)
	{
		int bb=dfs(x-1,y,steps+1);
		
	}
	if (y>0)
	{
		dfs(x,y-1,steps+1);
	}
	if (y<width-1)
	{
		dfs(x,y+1,steps+1);
	}
	if (x<height-1)
	{
		dfs(x+1,y,steps+1);
	}
	
	//visited[steps%4][x][y]=false;

}
int main()
{
	char inputLine[101];
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int testCases;
	cin >> testCases;
	for (int a=0; a<testCases;a++)
	{
		best=-1;
		cin >> height >> width;
		//bestSteps=vector < vector < vector <bool> > > (4,vector< vector<bool> > (height+1, vector <int> (width+1,-1)));;
		visited=vector < vector < vector <bool> > > (4,vector< vector<bool> > (height+1, vector <bool> (width+1,false)));
		int startX, startY;
		cin.getline(inputLine,2);
		memset(inputLine,0,sizeof(char)*101);
		for (int b=0; b<height; b++)
		{
			
			cin.getline(inputLine,width+1);
			for (int bb=0; bb<width; bb++)
			{
				grid[b][bb]=inputLine[bb];
				switch(grid[b][bb])
				{
				case '^':
					grid[b][bb]=2;

					break;
				case '>':
					grid[b][bb]=3;
					break;
				case 'v':
					grid[b][bb]=4;
					break;
				case '<':
					grid[b][bb]=5;
					break;
				case 'S':
					startX=b;
					startY=bb;
					break;
				}
				
			}
			
		}
		//dfs(startX,startY,0);

		printf("Case #%d: ",a+1);
		queue<pp> toSearch;
		struct pp first={startX,startY,0};
		toSearch.push(first);
		
		while (!toSearch.empty())
		{
			struct pp current=toSearch.front();
			toSearch.pop();
			bool works=true;
			int x,y,steps;
			x=current.x;
			y=current.y;
				steps=current.steps;
				visited[current.steps%4][current.x][current.y]=true;
	if (steps!=0)
	{
	for (int c=x-1; c>=0;c--)
	{
		if (grid[c][y]=='#') break;
		if (grid[c][y]=='.') continue;
		if (grid[c][y]=='S') continue;
		if (grid[c][y]=='G') continue;
		if (((grid[c][y]-2)+steps)%4==2)
		{
			visited[steps%4][c][y]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) continue;
	for (int c=x+1; c<height;c++)
	{
		if (grid[c][y]=='#') break;
		if (grid[c][y]=='.') continue;
		if (grid[c][y]=='S') continue;
		if (grid[c][y]=='G') continue;
		if (((grid[c][y]-2)+steps)%4==0)
		{
			visited[steps%4][c][y]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) continue;
	for (int c=y-1; c>=0;c--)
	{
		if (grid[x][c]=='#') break;
		if (grid[x][c]=='.') continue;
		if (grid[x][c]=='S') continue;
		if (grid[x][c]=='G') continue;
		if (((grid[x][c]-2)+steps)%4==1)
		{
			visited[steps%4][x][c]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) continue;
	for (int c=y+1; c<width;c++)
	{
		if (grid[x][c]=='#') break;
		if (grid[x][c]=='.') continue;
		if (grid[x][c]=='S') continue;
		if (grid[x][c]=='G') continue;
		if (((grid[x][c]-2)+steps)%4==3)
		{
			visited[steps%4][x][c]=true;
			works=false;
			break;
		}
		else break;
	}
	if (!works) continue;
	}
			if (grid[current.x][current.y]=='G')
			{
				best=current.steps;
				break;
			}

			if (x>0)
			{
			if (!(grid[x-1][current.y]=='#'||(grid[x-1][y]>=2&&grid[x-1][y]<=5)))
			{
				if (!(visited[(steps+1)%4][x-1][y]))
				{
					visited[(steps+1)%4][x-1][y]=true;
					struct pp r={x-1,y,steps+1};
					toSearch.push(r);
				}
			}
			}
			if (x<height-1)
			{
			if (!(grid[x+1][current.y]=='#'||(grid[x+1][y]>=2&&grid[x+1][y]<=5)))
			{
				if (!(visited[(steps+1)%4][x+1][y]))
				{
					visited[(steps+1)%4][x+1][y]=true;
					struct pp r={x+1,y,steps+1};
					toSearch.push(r);
				}
			}
			}
			if (y>0)
			{
			if (!(grid[x][current.y-1]=='#'||(grid[x][y-1]>=2&&grid[x][y-1]<=5)))
			{
				if (!(visited[(steps+1)%4][x][y-1]))
				{
					visited[(steps+1)%4][x][y-1]=true;
					struct pp r={x,y-1,steps+1};
					toSearch.push(r);
				}
			}
			}
			if (y<width-1)
			{
			if (!(grid[x][current.y+1]=='#'||(grid[x][y+1]>=2&&grid[x][y+1]<=5)))
			{
				if (!(visited[(steps+1)%4][x][y+1]))
				{
					visited[(steps+1)%4][x][y+1]=true;
					struct pp r={x,y+1,steps+1};
					toSearch.push(r);
				}
			}
			}
			



		}
		if (best==-1) printf("impossible\n");
		else printf("%d\n",best);
		
	}
}
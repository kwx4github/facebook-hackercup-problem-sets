from sys import stdin
from collections import deque

t=int(stdin.readline())
r=dict(zip('<^>vSG#','^>v<..#'))
dt=dict(zip('<^>v', [(0,-1), (-1,0), (0,1), (1,0)]))

def confs(mz):
    cs=[]
    for dr in '<^>v':
        mz=map(lambda row:map(lambda p:r.get(p,p),row),mz)
        cs.append(mz)
    for mz in cs:
        m=len(mz)
        for i in xrange(m):
            n=len(mz[i])
            for j in xrange(n):
                p=mz[i][j]
                if p in dt:
                    v=dt[p]
                    ii,jj=i,j
                    while True:
                        jj+=dt[p][1]
                        ii+=dt[p][0]
                        if ii<0 or jj<0 or ii>=m or jj>=n or mz[ii][jj]!='.':
                            break
                        mz[ii][jj]='#'
    return cs

def SG(mz):
    for (i,row) in enumerate(mz):
        for (j,cell) in enumerate(row):
            if mz[i][j]=='S':
                s=(i,j)
            elif mz[i][j]=='G':
                g=(i,j)
    return (s,g)

def solve(mz):
    s,g=SG(mz)
    cs=confs(mz)

    tried=set()
    q=deque([(s,-1)]) # position, conf
    while q:
        p,c=q.popleft()
        c+=1
        if p==g:
            return c

        i,j=p
        cc=c%4
        mz=cs[cc]
        for d in [(0,-1), (-1,0), (0,1), (1,0)]:
            jj=j+d[1]
            ii=i+d[0]
            p=((ii,jj),c)
            pp=((ii,jj),cc)
            if ii>=0 and jj>=0 and ii<m and jj<n and mz[ii][jj]=='.' and pp not in tried:
                q.append(p)
                tried.add(pp)

    return -1

for _ in xrange(t):
    m,n=map(int,stdin.readline().split())
    mz=[]
    for __ in xrange(m):
        mz.append(list(stdin.readline().strip()))
    ns = solve(mz)
    if ns<0:
        ns='impossible'
    print 'Case #{}: {}'.format(_+1,ns)

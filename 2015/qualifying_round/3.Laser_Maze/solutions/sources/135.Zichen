#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <cstring>
#include <string>
using namespace std;

#define pairii pair<int, int>
#define llong long long
#define pb push_back
#define sortall(x) sort((x).begin(), (x).end())
#define INFI  numeric_limits<int>::max()
#define INFLL numeric_limits<llong>::max()
#define INFD  numeric_limits<double>::max()
#define FOR(i,s,n) for (int (i) = (s); (i) < (n); (i)++)
#define FORZ(i,n) FOR((i),0,(n))

const int MAXN = 105;
int n,m;
vector<string> bd;
const char* LS = "^>v<";
pairii st,tg;
bool vis[MAXN][MAXN][4];

void init() {
  bd.clear();
  FORZ(i,MAXN) FORZ(j,MAXN) FORZ(k,4) vis[i][j][k]=false;
}

int lsIdx(char ls) {
  FORZ(i,4) {
    if (ls == LS[i]) return i;
  }
  return -1;
}

struct State {
  pairii pos;
  int d;
  State(pairii p, int e): pos(p), d(e) {}
};

int bfs() {
  State s(st,0);
  queue<State> q;
  q.push(s);
  vis[st.first][st.second][0] = true;
  bool start = true;
  while (!q.empty()) {
    State u = q.front();
    q.pop();
    pairii pos = u.pos;
    int d = u.d;
    bool valid = true;
    if (!start) {
      FORZ(i,n) FORZ(j,m) {
        int idx = lsIdx(bd[i][j]);
        if (idx >= 0) {
          char ls = LS[(idx+d)%4];
          if (ls=='^') {
            for (int k = i-1; k >= 0; k--) {
              if (bd[k][j] != '.') break;
              if (pairii(k,j)==pos) valid = false;
            }
          } else if (ls == '>') {
            for (int k = j+1; k < m; k++) {
              if (bd[i][k] != '.') break;
              if (pairii(i,k)==pos) valid = false;
            }
          } else if (ls == 'v') {
            for (int k = i+1; k < n; k++) {
              if (bd[k][j] != '.') break;
              if (pairii(k,j)==pos) valid = false;
            }
          } else {
            for (int k = j-1; k >= 0; k--) {
              if (bd[i][k] != '.') break;
              if (pairii(i,k)==pos) valid = false;
            }
          }
        }
      }
    }
    else {
      start = false;
    }
    if (!valid) continue;
    if (pos==tg) return d;
    int i = pos.first, j = pos.second;
    int rnd = (d+1)%4;
    if (i>0 && bd[i-1][j]=='.' && !vis[i-1][j][rnd]) {
      State v(pairii(i-1,j),d+1);
      q.push(v);
      vis[i-1][j][rnd]=true;
    }
    if (j<m-1 && bd[i][j+1]=='.' && !vis[i][j+1][rnd]) {
      State v(pairii(i,j+1),d+1);
      q.push(v);
      vis[i][j+1][rnd]=true;
    }
    if (i<n-1 && bd[i+1][j]=='.' && !vis[i+1][j][rnd]) {
      State v(pairii(i+1,j),d+1);
      q.push(v);
      vis[i+1][j][rnd]=true;
    }
    if (j>0 && bd[i][j-1]=='.' && !vis[i][j-1][rnd]) {
      State v(pairii(i,j-1),d+1);
      q.push(v);
      vis[i][j-1][rnd]=true;
    }
  }
  return -1;
}

void solve() {
  init();
  scanf("%d%d",&n,&m);
  bd.resize(n);
  FORZ(i,n) cin >> bd[i];
  FORZ(i,n) FORZ(j,m) {
    if (bd[i][j]=='S') {
      st = pairii(i,j);
      bd[i][j] = '.';
    }
    if (bd[i][j]=='G') {
      tg = pairii(i,j);
      bd[i][j] = '.';
    }
  }
  int res = bfs();
  if (res==-1) printf("impossible\n");
  else printf("%d\n",res);
}

int main() {
#ifdef DEBUG
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
#endif
  
  int t;
  scanf("%d", &t);
  FOR(i,1,t+1) {
    printf("Case #%d: ", i);
    solve();
  }
  
  return 0;
}

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cassert>

using namespace std;

#define ri(X) scanf("%d", &(X))
#define pi(X) printf("%d", (X))
#define mp(X,Y) make_pair(X,Y)
#define pb(X) push_back(X)
#define lint long long
#define pii pair<int,int>
#define inf 1e9
#define linf 1e18
#define X first
#define Y second
#define all(X) (X).begin(),(X).end()
#define uni(X) X.erase(unique(X.begin(), X.end()), X.end());

int n,m;
const int mn = 109;
string s[mn];
map<char,int> m1;

bool visit[4][mn][mn];

struct st{
  int x, y, k;
  st(int xx, int yy, int kk){
    x = xx; y = yy; k = kk;
  }
  st(){}
};

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

bool reach[4][mn][mn];

bool valid(int x, int y){
  return 0 <= x && x < n && 0 <= y && y < m;
}

bool c2(int x,int y){
  return s[x][y] == '.' || s[x][y] == 'G';
}
bool c3(st sv){
  
  int nx, ny;
  
  if(reach[(sv.k%4)][sv.x][sv.y]) return 1;
    /*for(int j = 0;; j++){
      nx = sv.x+dx[(k+2)%4]*j;
      ny = sv.y+dy[(k+2)%4]*j;
      if(!valid(nx,ny)) break;
      if(s[nx][ny] == '#') break;
      if(m1.count(s[nx][ny]) > 0){
        int dir = m1[s[nx][ny]];
        if((dir+sv.k)%4 == k) return 1;
        break;
      }
    }*/
  
  return 0;
}

int bfs(int xi, int yi){
  queue<st> Q;
  visit[0][xi][yi] = 1;
  Q.push(st(xi,yi,0));
  st su, sv;
  while(!Q.empty()){
    
    su = Q.front();
    //cout << su.x << " " << su.y << endl;
    Q.pop();
    if(s[su.x][su.y] == 'G') return su.k;
    for(int k = 0; k < 4; k++){
      sv = st(su.x+dx[k], su.y+dy[k], su.k+1);
      if(!valid(sv.x, sv.y) || !c2(sv.x, sv.y) || c3(sv)) continue;
      if(visit[sv.k%4][sv.x][sv.y]) continue;
      visit[sv.k%4][sv.x][sv.y] = 1;
      Q.push(sv);
    }
  }
  
  return -1;
}
void init(){
  memset(reach,0,sizeof(reach));
  int nx,ny;
  int dir;
  for(int i = 0; i < n; i++){
    for(int j = 0; j < m; j++){
      if(m1.count(s[i][j])==0) continue;
      
      for(int k = 0; k < 4; k++){
        dir = (m1[s[i][j]]+k)%4;
        for(int w = 1;; w++){
          nx = i+dx[dir]*w;
          ny = j+dy[dir]*w;
          if(!valid(nx,ny)) break;
          //cout << n << " " << m << endl;
          //cout << "->  " << nx << " " << ny << " " << (k)%4 <<endl;
          if(s[nx][ny] != '.' && s[nx][ny] != 'G') break;
          reach[k][nx][ny] = 1;
        }
      }
    }
  }
  
}
int main(){
  m1['^'] = 0;
  m1['>'] = 1;
  m1['v'] = 2;
  m1['<'] = 3;
  int T;
  ri(T);
  for(int t = 0; t < T; t++){
    ri(n); ri(m);
    for(int i = 0; i < n; i++){
      cin >> s[i];
    }
    int xi, yi;
    for(int i = 0; i < n; i++){
      for(int j = 0; j < n; j++){
        if(s[i][j] == 'S'){
          xi = i; yi = j;
          s[i][j] = '.';
        }
      }
    }
    init();
    memset(visit,0,sizeof(visit));
    int res = bfs(xi, yi);
    printf("Case #%d: ", t+1);
    if(res == -1){
      printf("impossible\n");
    }else{
      printf("%d\n", res);
    }
    //return 0;
  }
  
  return 0;
}


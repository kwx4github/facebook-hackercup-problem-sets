#include<iostream>
#include<utility>
#include<vector>
using namespace std;

char plansza[123][123][5];
int n, m, xs, ys, xg, yg, ans;
bool vis[123][123][5];
vector<pair<pair<int, int>, pair<int, int> > > queue;
char kier[4];

void load(){
  cin >> n >> m;
  for(int i = 1; i <= n; ++i)
     for(int j = 1; j <= m; ++j) cin >> plansza[i][j][0];
  for(int l = 1; l <= 4; ++l)
     for(int i = 1; i <= n; ++i)
	for(int j = 1; j <= m; ++j) plansza[i][j][l] = plansza[i][j][l - 1];
}

void build(int l){
  for(int i = 1; i <= n; ++i)
    for(int j = 1; j <= m; ++j){
      if(plansza[i][j][l] == 'v') {plansza[i][j][l] = kier[l % 4];continue;}
      if(plansza[i][j][l] == '<') {plansza[i][j][l] = kier[(l + 1) % 4];continue;}
      if(plansza[i][j][l] == '^') {plansza[i][j][l] = kier[(l + 2) % 4];continue;}
      if(plansza[i][j][l] == '>') {plansza[i][j][l] = kier[(l + 3) % 4];continue;}
    }
  bool flaga;
  
  for(int i = 1; i <= m; ++i){
    flaga = false;
    for(int j = 1; j <= n; ++j){
      if(plansza[j][i][l] == 'v'){
	flaga = true;
	continue;
      }
      if(plansza[j][i][l] == '.' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'G' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'S' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'x' && flaga) continue;
      flaga = false;
    }
    flaga = false;
    for(int j = n; j >= 1; --j){
      if(plansza[j][i][l] == '^'){
	flaga = true;
	continue;
      }
      if(plansza[j][i][l] == '.' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'G' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'S' && flaga){
	plansza[j][i][l] = 'x';
	continue;
      }
      if(plansza[j][i][l] == 'x' && flaga) continue;
      flaga = false;
    }
  }
 
  for(int i = 1; i <= n; ++i){
    flaga = false;
    for(int j = 1; j <= m; ++j){
      if(plansza[i][j][l] == '>'){
	flaga = true;
	continue;
      }
      if(plansza[i][j][l] == '.' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'G' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'S' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'x' && flaga) continue;
      flaga = false;
    }
    flaga = false;
    for(int j = m; j >= 1; --j){
      if(plansza[i][j][l] == '<'){
	flaga = true;
	continue;
      }
      if(plansza[i][j][l] == '.' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'G' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'S' && flaga){
	plansza[i][j][l] = 'x';
	continue;
      }
      if(plansza[i][j][l] == 'x' && flaga) continue;
      flaga = false;
    }
  }
  
  for(int i = 1; i <= n; ++i)
     for(int j = 1; j <= m; ++j){
	if(plansza[i][j][l] == 'x' || plansza[i][j][l] == 'v' || plansza[i][j][l] == '>' || plansza[i][j][l] == '<' || plansza[i][j][l] == '^'){
	  plansza[i][j][l] = '#';
	  
	}
	if(plansza[i][j][l] == '.' || plansza[i][j][l] == 'S' || plansza[i][j][l] == 'G'){
	  plansza[i][j][l] = '.';
	  
	}
     }
     
}

void find(){
  for(int i = 1; i <= n; ++i)
    for(int j = 1; j <= m; ++j){
      if(plansza[i][j][0] == 'G'){
	xg = i;
	yg = j;
      }
      if(plansza[i][j][0] == 'S'){
	xs = i;
	ys = j;
      }
    }
}

bool is_final(pair<int, int> poz){
   return poz == make_pair(xg, yg);
}

bool in_plansza(pair<int, int> poz){
  if(poz.first == 0) return false;
  if(poz.second == 0) return false;
  if(poz.first == n + 1) return false;
  if(poz.second == m + 1) return false;
  return true;
}

pair<int, int> add_p(pair<int, int> a, pair<int, int> b){
  pair<int, int> c = make_pair(a.first + b.first, a.second + b.second);
  return c;
}

void przejdz(pair<pair<int, int>, pair<int, int> > poz){
   int dx[4], dy[4];
   dx[0] = 0; dx[1] = 0; dx[2] = -1; dx[3] = 1;
   dy[0] = 1; dy[1] = -1; dy[2] = 0; dy[3] = 0;
   pair<int, int> npoz;
   for(int i = 0; i < 4; ++i){
      npoz = add_p(poz.first, make_pair(dx[i], dy[i]));
      if(plansza[npoz.first][npoz.second][(poz.second.first % 4) + 1] == '#') continue;
      if(vis[npoz.first][npoz.second][(poz.second.first % 4) + 1]){
	continue;
	
      }
      vis[npoz.first][npoz.second][(poz.second.first % 4) + 1] = true;
      if(in_plansza(npoz)){
	if(is_final(npoz) && ans == 0){
	  ans = poz.second.second + 1;
	}
	queue.push_back(make_pair(npoz, make_pair((poz.second.first % 4)+1, poz.second.second + 1)));
      }
   }
}

void cleartab(){
    ans = 0;
    for(int i = 0; i <= n + 1; ++i)
      for(int j = 0; j <= m + 1; ++j) 
	for(int l = 0; l <= 4; ++l){
	  vis[i][j][l] = false;
	}
}

int main(){
  ios_base::sync_with_stdio(false);
  int t;
  kier[0] = 'v';
  kier[1] = '<';
  kier[2] = '^';
  kier[3] = '>';
  cin >> t;
  for(int i = 1; i <= t; ++i){
    load();
    for(int j = 1; j <= 4; ++j) build(j);
    find();
    queue.push_back(make_pair(make_pair(xs, ys), make_pair(0, 0)));
    int zz = 0; int zzz = 1; 
    while(zz != zzz){
      przejdz(queue[zz]);
      ++zz;
      zzz = queue.size();
      if(ans > 0) break;
    }
    cout << "Case #" << i << ": ";
    if(ans == 0) cout << "impossible\n";
    else cout << ans << endl;
    queue.clear();
    cleartab();
  }/*
  for(int i = 1; i <= 4; ++i){
    for(int j = 1; j <= n; ++j){
      
      for(int k = 1; k <= m; ++k) cout << plansza[j][k][i];
      cout << endl;
    }
    cout << endl;
  }*/
  return 0;
}

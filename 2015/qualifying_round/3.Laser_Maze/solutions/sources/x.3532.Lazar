#include <bits/stdc++.h>

using namespace std;

const int MAXDIM = 111;

struct Cell
{
    int i, j;
    Cell()
    {
    }
    Cell(int _i, int _j)
    {
        i = _i;
        j = _j;
    }
    Cell operator+(const Cell &c)
    {
        return Cell(i + c.i, j + c.j);
    }
    bool operator<(const Cell &c) const
    {
        if (i != c.i)
        {
            return i < c.i;
        }
        return j < c.j;
    }
    bool operator==(const Cell & c)
    {
        return i == c.i && j == c.j;
    }
    bool isInside(int r, int c)
    {
        return i >= 0 && j >= 0 && i < r && j < c;
    }
    bool isValid(int r, int c, int step, int m[][MAXDIM][5])
    {
        if (!isInside(r, c))
        {
            return false;
        }
        if ((m[i][j][step] != 0) || (m[i][j][4] != 0))
        {
            return false;
        }
        return true;
    }
};

Cell d[4];

int get(int i, int j, int k, int r, int c, int m[][MAXDIM][5])
{
    if (!Cell(i, j).isInside(r, c))
    {
        return 0;
    }
    return m[i][j][k];
}

int calcPrev(int n, int step)
{
    //cout << (n - 1 - step + 4) % 4 + 1 << endl;
    return (n - 1 - step + 4) % 4 + 1;
}

int calcNext(int n, int step)
{
    return (n - 1 + step + 4) % 4 + 1;
}

void precalc(int r, int c, int m[][MAXDIM][5])
{
    for (int step = 0; step < 4; step++)
    {
        for (int i = 0; i < r; i++)
        {
            for (int j = 0; j < c; j++)
            {
                if (m[i][j][4] == -1)
                {
                    continue;
                }
                if (get(i - 1, j, step, r, c, m) == 3)
                {
                    m[i][j][step] = 3;
                }
                if (get(i, j - 1, step, r, c, m) == 2)
                {
                    m[i][j][step] = 2;
                }
            }
        }
        for (int i = r - 1; i >= 0; i--)
        {
            for (int j = c - 1; j >= 0; j--)
            {
                if (m[i][j][4] == -1)
                {
                    continue;
                }
                if (get(i + 1, j, step, r, c, m) == 1)
                {
                    m[i][j][step] = 1;
                }
                if (get(i, j + 1, step, r, c, m) == 4)
                {
                    m[i][j][step] = 4;
                }
            }
        }
    }
}

int bfs(Cell st, Cell ed, int r, int c, int m[][MAXDIM][5])
{
    queue<pair<Cell, int>> q;
    map<Cell, int> dist[4];
    dist[0][st] = 0;
    for (q.push(make_pair(st, 0)); !q.empty(); q.pop())
    {
        Cell curr = q.front().first;
        int currstep = q.front().second;
        for (int dlt = 0; dlt < 4; dlt++)
        {
            Cell next = curr + d[dlt];
            int nextstep = (currstep + 1) & 3;
            if (!next.isValid(r, c, nextstep, m))
            {
                continue;
            }
            if (dist[nextstep].find(next) != dist[nextstep].end())
            {
                continue;
            }
            dist[nextstep][next] = dist[currstep][curr] + 1;
            if (next == ed)
            {
                return dist[nextstep][next];
            }
            q.push(make_pair(next, nextstep));
        }
    }
    return -1;
}

int main()
{
    freopen("input.in", "r", stdin);
    freopen("sol.out", "w", stdout);
    d[0] = Cell(0, 1);
    d[1] = Cell(0, -1);
    d[2] = Cell(1, 0);
    d[3] = Cell(-1, 0);
    int tsts;
    cin >> tsts;
    for (int tNo = 1; tNo <= tsts; tNo++)
    {
        int r, c;
        int m[MAXDIM][MAXDIM][5] = {0};
        Cell st, ed;
        cin >> r >> c;
        for (int i = 0; i < r; i++)
        {
            string s;
            cin >> s;
            for (int j = 0; j < c; j++)
            {
                switch (s[j])
                {
                case 'S':
                    st = Cell(i, j);
                    break;
                case 'G':
                    ed = Cell(i, j);
                    break;
                case '#':
                    m[i][j][4] = -1;
                    break;
                case '^':
                    m[i][j][4] = -1;
                    m[i][j][0] = 1;
                    for (int step = 1; step < 4; step++)
                    {
                        m[i][j][step] = calcNext(m[i][j][0], step);
                    }
                    break;
                case '>':
                    m[i][j][4] = -1;
                    m[i][j][0] = 2;
                    for (int step = 1; step < 4; step++)
                    {
                        m[i][j][step] = calcNext(m[i][j][0], step);
                    }
                    break;
                case 'v':
                    m[i][j][4] = -1;
                    m[i][j][0] = 3;
                    for (int step = 1; step < 4; step++)
                    {
                        m[i][j][step] = calcNext(m[i][j][0], step);
                    }
                    break;
                case '<':
                    m[i][j][4] = -1;
                    m[i][j][0] = 4;
                    for (int step = 1; step < 4; step++)
                    {
                        m[i][j][step] = calcNext(m[i][j][0], step);
                    }
                    break;
                }
            }
        }
        precalc(r, c, m);
        /*
        for (int step = 0; step < 5; step++)
        {
            for (int i = 0; i < r; i++)
            {
                for (int j = 0; j < c; j++)
                {
                    cout << m[i][j][step] << " ";
                }
                cout << endl;
            }
            cout << endl;
        }
        cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
        */
        int ret = bfs(st, ed, r, c, m);
        cout << "Case #" << tNo << ": ";
        if (ret == -1)
        {
             cout << "impossible";
        }
        else
        {
            cout << ret;
        }
        cout << endl;
    }
}

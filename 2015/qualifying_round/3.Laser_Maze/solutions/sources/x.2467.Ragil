#include <bits/stdc++.h>
using namespace std;

long wi[] = {-1,0,1,0},wj[]={0,1,0,-1};

struct place {
    long i,j,k;
    place(){};
    place(double _i, double _j, double _k){ i = _i; j = _j; k = _k; }
};

void cari(long code, long &ki, long &kj){
    if(code==0) ki=-1,kj=0;
    if(code==1) ki=0,kj=1;
    if(code==2) ki=1,kj=0;
    if(code==3) ki=0,kj=-1;
}

bool cek(char ch){
    if(ch=='#' || ch=='^' || ch=='>' || ch=='v' || ch=='<') return 1;
    return 0;
}

 char ubah(long code){
    if(code==0) return '^';
    if(code==1) return '>';
    if(code==2) return 'v';
    if(code==3) return '<';
 }

int main(){
    long n,m,t,cs=1;
    scanf("%ld",&t);
    while(t--){
        char ch[105][105];
        bool bol[105][105][5]={};
        place st,fn;
        vector <place> vc;
        queue <place> qu;
        scanf("%ld %ld%*c",&n,&m);
        for(long i=0; i<n; i++){
            for(long j=0; j<m; j++){
                scanf("%c",&ch[i][j]);
                if(ch[i][j]=='S') st = place(i,j,0), ch[i][j] = '.';
                if(ch[i][j]=='G') fn = place(i,j,0), ch[i][j] = '.';
                if(ch[i][j]=='^') vc.push_back(place(i,j,0));
                if(ch[i][j]=='>') vc.push_back(place(i,j,1));
                if(ch[i][j]=='v') vc.push_back(place(i,j,2));
                if(ch[i][j]=='<') vc.push_back(place(i,j,3));
            }
            getchar();
        }
     //   printf("fn = %ld %ld\n",fn.i,fn.j);
        long cnt=0,ans=-1;
        qu.push(st);
        while(!qu.empty()){
            for(long i=0; i<vc.size(); i++){
                long ki,kj,li,lj;
                cari(vc[i].k,ki,kj);
                li = vc[i].i+ki, lj = vc[i].j+kj;
                while(li>=0 && li<n && lj>=0 && lj<m){
                    if(cek(ch[li][lj])) break;
                    ch[li][lj] = '.';
                    li += ki; lj += kj;
                }
                ++vc[i].k %= 4;
                cari(vc[i].k,ki,kj);
                li = vc[i].i+ki, lj = vc[i].j+kj;
                while(li>=0 && li<n && lj>=0 && lj<m){
                    if(cek(ch[li][lj])) break;
                    ch[li][lj] = 'X';
                    li += ki; lj += kj;
                }
                ch[vc[i].i][vc[i].j] = ubah(vc[i].k);
            }
            /*printf("////////////\n");
            for(long i=0; i<n; i++){
                for(long j=0; j<m; j++)
                    printf("%c",ch[i][j]);
                printf("\n");
            } */
            long pv = qu.front().k;
            while(!qu.empty() && pv==qu.front().k){
                place g = qu.front();
                qu.pop();
                if(g.i==fn.i && g.j==fn.j){
                    ans = g.k;
                    break;
                }
              //  printf("// %ld %ld\n",g.i,g.j);
                for(long z=0; z<4; z++){
                    if(g.i+wi[z]>=0 && g.i+wi[z]<n && g.j+wj[z]>=0 && g.j+wj[z]<m){
                        if(ch[g.i+wi[z]][g.j+wj[z]]!='.') continue;
                        if(bol[g.i+wi[z]][g.j+wj[z]][cnt]) continue;
                        bol[g.i+wi[z]][g.j+wj[z]][cnt] = 1;
                        qu.push(place(g.i+wi[z],g.j+wj[z],g.k+1));
                    }
                }
            }
            ++cnt %= 4;
            if(ans!=-1) break;
        }
        printf("Case #%ld: ",cs++);
        if(ans==-1) printf("impossible\n");
        else printf("%ld\n",ans);
    }
    return 0;
}

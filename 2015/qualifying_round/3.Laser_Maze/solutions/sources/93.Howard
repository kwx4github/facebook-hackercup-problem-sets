#include <iostream>
#include <string>
#include <algorithm>
#include <queue>

using namespace std;

const int dr[] = { -1, 0, 1, 0 };
const int dc[] = { 0, 1, 0, -1 };
int dir[256];

struct State
{
  int r, c, t;
};

void solve()
{
  int M, N;
  cin >> M >> N;

  string grid[100];
  for (int i = 0; i < M; i++) {
    cin >> grid[i];
  }
  
  bool blocked[4][100][100] = {false};
  for (int t = 0; t < 4; t++) {
    for (int r = 0; r < M; r++) {
      for (int c = 0; c < N; c++) {
	if (grid[r][c] == '#' || dir[grid[r][c]] >= 0) blocked[t][r][c] = true;
	if (dir[grid[r][c]] < 0) continue;
	int d = (dir[grid[r][c]] + t) % 4;
	int r2 = r + dr[d], c2 = c+dc[d];
	while (0 <= r2 && r2 < M && 0 <= c2 && c2 < N &&
	       grid[r2][c2] != '#' && dir[grid[r2][c2]] < 0) {
	  blocked[t][r2][c2] = true;
	  r2 += dr[d];
	  c2 += dc[d];
	}
      }
    }
  }

  State start;
  start.t = 0;
  for (int r = 0; r < M; r++) {
    for (int c = 0; c < N; c++) {
      if (grid[r][c] == 'S') {
	start.r = r;
	start.c = c;
      }
    }
  }

  // BFS
  bool visited[4][100][100] = {false};
  queue<State> q;
  visited[start.t][start.r][start.c] = true;
  q.push(start);
  while (!q.empty()) {
    State curr = q.front();
    q.pop();
    if (grid[curr.r][curr.c] == 'G') {
      cout << curr.t << endl;
      return;
    }

    for (int d = 0; d < 4; d++) {
      State next = curr;
      next.r += dr[d];
      next.c += dc[d];
      next.t++;
      if (!(0 <= next.r && next.r < M && 0 <= next.c && next.c < N)) continue;
      if (blocked[next.t%4][next.r][next.c] ||
	  visited[next.t%4][next.r][next.c]) continue;
      visited[next.t%4][next.r][next.c] = true;
      q.push(next);
    }
  }
  
  cout << "impossible" << endl;
}

int main()
{
  fill(dir, dir+256, -1);
  dir['^'] = 0;
  dir['>'] = 1;
  dir['v'] = 2;
  dir['<'] = 3;

  int T;
  cin >> T;
  for (int c = 1; c <= T; c++) {
    cout << "Case #" << c << ": ";
    solve();
  }
  return 0;
}

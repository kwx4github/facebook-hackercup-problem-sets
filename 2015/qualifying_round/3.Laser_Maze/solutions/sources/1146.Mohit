#include <bits/stdc++.h>
#define MAX 100000000

using namespace std;

int main(){
	int T;
	cin>>T;
	for(int t=1;t<=T;t++){
		int m, n;
		cin>>m>>n;
		vector<string> inboard;
		inboard.resize(m);
		for(int i=0;i<m;i++){
			cin>>inboard[i];
		}
		int board[m][n], moves[m][n][4];
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				board[i][j] = 0;
			}
		}
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				for(int k=0;k<4;k++)
					moves[i][j][k] = -1;
			}
		}
		int inx[4] = {1, 0, -1, 0};
		int iny[4] = {0, 1, 0, -1};
		int startx = 0, starty = 0, endx=0, endy=0;
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				bool cur = false;
				int laser = -1;
				switch(inboard[i][j]){
					case '#': cur = true; break;
					case '>': cur = true; laser = 0; break;
					case '^': cur = true; laser = 3; break;
					case '<': cur = true; laser = 2; break;
					case 'v': cur = true; laser = 1; break;
					case 'S': startx = i, starty = j;break;
					case 'G': endx = i, endy = j; break;
				}
				if(cur) board[i][j] = 15;
				if(laser!=-1)
				for(int k=0;k<4;k++){
					int inc = (k+laser)%4;
					for(int l=1;i+l*iny[inc]<m&&i+l*iny[inc]>=0&&j+l*inx[inc]<n&&j+l*inx[inc]>=0;l++){
						int x = i+l*iny[inc], y = j+l*inx[inc];
						// cout<<x<<" "<<y<<" "<<inboard[x][y]<<endl;
						if((inboard[x][y]=='#')||(inboard[x][y]=='^')||(inboard[x][y]=='v')||(inboard[x][y]=='>')||(inboard[x][y]=='<')){
							// cout<<"Break kiya hai"<<endl;
							break;
						}
						board[x][y] |= (1<<k);
					}
				}
			}
		}
		queue<pair<int, int> > buf;
		buf.push(make_pair(startx, starty));
		moves[startx][starty][0] = 0;
		while(!buf.empty()){
			pair<int, int> temp = buf.front();
			buf.pop();
			for(int i=0;i<4;i++){
				int x = temp.first + inx[i], y = temp.second + iny[i];
				bool flag = false;
				for(int k=0;k<4;k++){
					if(moves[temp.first][temp.second][k]==-1) continue;
					int move = moves[temp.first][temp.second][k] + 1;
					if(x<m&&x>=0&&y<n&&y>=0){
						if((board[x][y]&(1<<(move%4)))==0&&moves[x][y][move%4]==-1){
							moves[x][y][move%4] = move;
							flag = true;
						}
					}
				}
				if(flag){
					buf.push(make_pair(x, y));
				}
			}
		}
		// for(int i=0;i<m;i++){
		// 	for(int j=0;j<n;j++){
		// 		cout<<board[i][j]<<" ";
		// 	}
		// 	cout<<endl;
		// }
		// for(int i=0;i<m;i++){
		// 	for(int j=0;j<n;j++){
		// 		cout<<i<<" "<<j<<" ";
		// 		for(int k=0;k<4;k++)
		// 			cout<<moves[i][j][k]<<" ";
		// 		cout<<endl;
		// 	}
		// }
		cout<<"Case #"<<t<<": ";
		bool flag = false;
		int out = MAX;
		for(int k=0;k<4;k++)
		if(moves[endx][endy][k]!=-1){
			flag = true;
			out = min(out, moves[endx][endy][k]);
		}
		if(flag){
			cout<<out<<endl;
		}
		else{
			cout<<"impossible"<<endl;
		}
	}
}
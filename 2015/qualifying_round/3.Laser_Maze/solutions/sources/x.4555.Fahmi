#include<bits/stdc++.h>

using namespace std;

#define mp make_pair
#define fi first
#define se second
#define piii pair <int, pair <int , int> >
#define inf 1000000000

int r,c,t;
char st[105][105];
int xx[]={1,0,-1,0};
int yy[]={0,1,0,-1};

bool valid(int x, int y){
	return (x>=0 && y>=0 && x<r && y<c && st[x][y]=='.');
}

int main(){
	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
	bool point[105][105][5];
	map < char, int> dir;
	dir['^']=0;
	dir['>']=3;
	dir['<']=1;
	dir['v']=2;
	scanf("%d",&t);
	int eks=1;
	while(t--){
		pair <int ,int> start,ending;
		printf("Case #%d: ",eks++);
		memset(point,false,sizeof point);
		scanf("%d%d",&r,&c);
		for(int x=0;x<r;x++) scanf("%s",&st[x]);
		for(int x=0;x<r;x++){
			for(int y=0;y<c;y++){
				int tmp;
				if(st[x][y]=='S') start=mp(x,y), st[x][y]='.'; else
				if(st[x][y]=='G') ending=mp(x,y), st[x][y]='.'; else
				if(st[x][y]!='.' && st[x][y]!='#') {
				//	cout<<x<<' '<<y<<endl;
					tmp=x-1;
					while(tmp>=0 && valid(tmp,y)) point[tmp][y][dir[st[x][y]]]=true, tmp--;
					tmp=x+1;
					while(tmp<r && valid(tmp,y)) point[tmp][y][(dir[st[x][y]]+2)%4]=true, tmp++;
					tmp=y-1;
					while(tmp>=0 && valid(x,tmp)) point[x][tmp][(dir[st[x][y]]+3)%4]=true, tmp--;
					tmp=y+1;
					while(tmp<c && valid(x,tmp)) point[x][tmp][(dir[st[x][y]]+1)%4]=true, tmp++;
				}
			}
		}
	///	for(int x=0;x<4;x++) cout<<point[1][2][x]<<endl;
		queue <piii> q;
		int visited[105][105][5];
		for(int x=0;x<r;x++) for(int y=0;y<c;y++) for(int z=0;z<4;z++) visited[x][y][z]=inf;
		visited[start.fi][start.se][0]=0;
		q.push(mp(start.fi,mp(start.se,0)));
		bool found=false;
		while(!q.empty()){
		//	cout<<"fak"<<endl;
			piii tmp=q.front();
		//	cout<<tmp.fi<<' '<<tmp.se.fi<<endl;
			q.pop();
			if(tmp.fi==ending.fi && tmp.se.fi==ending.se){
				found=true;
				printf("%d\n",visited[tmp.fi][tmp.se.fi][tmp.se.se]);
				break;
			}
			for(int x=0;x<4;x++){
				piii np=mp(tmp.fi+xx[x],mp(tmp.se.fi+yy[x],(tmp.se.se+1)%4));
				if(valid(np.fi,np.se.fi) && !point[np.fi][np.se.fi][np.se.se] && visited[np.fi][np.se.fi][np.se.se]==inf){
					visited[np.fi][np.se.fi][np.se.se]=visited[tmp.fi][tmp.se.fi][tmp.se.se]+1;
					q.push(np);
				}
			}
		}
		if(!found) puts("impossible");
	}
}

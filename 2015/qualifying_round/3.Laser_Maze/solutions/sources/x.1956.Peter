/*ckpeteryu*/
#include<iostream>
#include<iomanip>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<climits>
#include<cmath>
#include<bitset>
#include<string>
#include<ctime>
#include<functional>
#include<map>
#include<set>
#include<vector>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;
#define FOR(i,s,e) for(int i=(s);i<(int)(e);i++)
#define FOE(i,s,e) for(int i=(s);i<=(int)(e);i++)
#define FOD(i,s,e) for(int i=(s);i>=(int)(e);i--)
#define FORVEC(i,a) for(int i=0;i<(int)((a).size());i++)
#define pb push_back
#define mp make_pair
#define CLR(s,x) memset(s,x,sizeof(s))
#define LL long long int
#define L long int

int nt,M,N;
char maze[102][103];
char laser[4][102][103];
int vis[102][103];
char dirChar[]="^>v<";
int dy[]={-1,0,1,0};
int dx[]={0,1,0,-1};

struct state{
	int r,c,dist;
	state(){}
	state(int r, int c, int dist):r(r),c(c),dist(dist){}
};

void fire(char dir, int r, int c){
	int x,y,dr,dc;
	FOR(d,0,4){
		if (dir==dirChar[d]){
			FOR(k,0,4){
				dr=dy[(d+k)%4];
				dc=dx[(d+k)%4];
				y=r+dr;
				x=c+dc;				
				while(maze[y][x]=='.' || maze[y][x]=='S' || maze[y][x]=='G'){
					laser[k][y][x]='X';
					y+=dr;
					x+=dc;
				}
			}
		}
	}
}

int main(int argc, char **argv){
	//ios_base::sync_with_stdio(false);	
	#ifdef FHC
		//freopen("c1.txt","w",stdout);
		//freopen("c2.txt","w",stdout);
		freopen("c3.txt","w",stdout);
		//freopen("c4.txt","w",stdout);
		//freopen("c5.txt","w",stdout);
		//freopen("c6.txt","w",stdout);
	#endif		
	
	scanf("%d",&nt);
	FOE(k,1,nt){
		scanf("%d%d",&M,&N);
		FOE(i,1,M) scanf("%s",maze[i]+1);		
		FOE(i,0,M+1) maze[i][0]=maze[i][N+1]='+';		
		FOE(j,0,N+1) maze[0][j]=maze[M+1][j]='+';
		FOR(z,0,4) FOE(i,0,M+1) fill(laser[z][i],laser[z][i]+N+2,'.');		
		FOE(i,0,M+1) fill(vis[i],vis[i]+N+2,0);
				
		queue<state> q;
		FOE(i,1,M){
			FOE(j,1,N){
				switch(maze[i][j]){
					case 'S': q.push(state(i,j,0));break;					
					case '<':case '>':case '^':case 'v': fire(maze[i][j],i,j); break;
					default: break;
				}
			}
		}
		
		int ret=-1;
		while(!q.empty()){
			state cur = q.front();			
			q.pop();
			FOR(d,0,4){
				state next(cur.r+dy[d],cur.c+dx[d],cur.dist+1);
				if (maze[next.r][next.c]=='+' || maze[next.r][next.c]=='#'
					|| maze[next.r][next.c]=='^' || maze[next.r][next.c]=='>' || maze[next.r][next.c]=='v' || maze[next.r][next.c]=='<'
					|| laser[next.dist%4][next.r][next.c]=='X')continue;
				if (maze[next.r][next.c]=='G'){
					ret=next.dist;					
					break;
				}
				if (vis[next.r][next.c]>1000)continue;
				vis[next.r][next.c]++;				
				q.push(next);
			}
			if (ret!=-1)break;
		}
		if (ret!=-1)
			printf("Case #%d: %d\n",k,ret);
		else
			printf("Case #%d: impossible\n",k);
	}

	return 0;
}
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstring>
#include <map>
#include <bitset>
#include <string>
#include <cmath>

using namespace std;

const int INF = 1000000009;
const int MOD = 1000000007;

typedef long long LL;
typedef unsigned long long ULL;
typedef priority_queue <int> PQ;
typedef pair <int, int> II;
typedef priority_queue <II> PQII;
typedef map <int, int> MI;
typedef map <string, int> MSI;
typedef vector <int> VI;
typedef vector <VI> VVI;
typedef vector <LL> VL;
typedef vector <VL> VVL;
typedef vector <string> VS;
typedef vector < II > VII;

#define PB push_back;
#define MP make_pair;
VS v;
int n, m;
int visited[100][100];
int a, b, c, d;

bool puede(int x, int y)
{
    if(v[x][y]!='.' && v[x][y]!='S' && v[x][y]!='G') {
        return false;
    }
    for(int i=x; i>=0; i--) {
        if(v[i][y]!='.' && v[i][y]!='S' && v[i][y]!='G') {
            if(v[i][y]=='v') {
                return false;
            }
        }
    }
    for(int i=x; i<n; i++) {
        if(v[i][y]!='.' && v[i][y]!='S' && v[i][y]!='G') {
            if(v[i][y]=='^') {
                return false;
            }
        }
    }
    for(int i=y; i>=0; i--) {
        if(v[x][i]!='.' && v[x][i]!='S' && v[x][i]!='G') {
            if(v[x][i]=='>') {
                return false;
            }
        }
    }
    for(int i=y; i<m; i++) {
        if(v[x][i]!='.' && v[x][i]!='S' && v[x][i]!='G') {
            if(v[x][i]=='<') {
                return false;
            }
        }
    }
    return true;
}

void actualiza()
{
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(v[i][j]=='<') {
                v[i][j] = '^';
            } else if(v[i][j]=='^') {
                v[i][j] = '>';
            } else if(v[i][j]=='>') {
                v[i][j] = 'v';
            } else if(v[i][j]=='v') {
                v[i][j] = '<';
            }
        }
    }
}

int way(int x, int y)
{
    //cout << x << " " << y << endl;
    visited[x][y]++;
    if(v[x][y]=='G') {
        return 0;
    }
    actualiza();
    //cout << x << " " << y << endl;
    int steps = INF;
    if(x+a < n && x+a >= 0 && puede(x+a, y)) {
        if(visited[x+a][y]<=2) {
            steps = min(steps, 1+way(x+a, y));
        }
    }
    if(y+b < m && y+b >= 0 && puede(x, y+b) ) {
        if(visited[x][y+b]<=2) {
            steps = min(steps, 1+way(x, y+b));
        }
    }
    if(x+c < n && x+c >= 0 && puede( x+c, y) ) {
        if(visited[x+c][y]<=2) {
            steps =  min(steps, 1+way(x+c, y));
        }
    }
    if(y+d < m && y+d >= 0 && puede(x, y+d) ) {
        if(visited[x][y+d]<=2) {
            steps = min(steps, 1+way(x, y+d));
        }
    }
    return steps;
}


int main()
{
    ios_base::sync_with_stdio(false);
    //
    int t;
    cin >> t;
    for(int i=1; i<=t; i++) {
        cin >> n >> m;
        v = VS(n);
        memset(visited, 0, sizeof visited);
        int x, y;
        int x2, y2;
        for(int j=0; j<n; j++) {
            cin >> v[j];
            for(int k=0; k<v[j].size(); k++) {
                if(v[j][k]=='S') {
                    x = j;
                    y = k;
                }
                if(v[j][k]=='G') {
                    x2 = j;
                    y2 = k;
                }
            }
        }
        if(x2 > x)
        {
            a = 1;
            c = -1;
        }else{
            c = 1;
            a = -1;
        }
        if(y2 > y)
        {
            b = 1;
            d = -1;
        }else{
            d = 1;
            b = -1;
        }
        int res = way(x, y);
        cout << "Case #" << i << ": ";
        if(res < INF)
            cout << res << endl;
        else {
            cout << "impossible" << endl;
        }
    }
    return 0;
}

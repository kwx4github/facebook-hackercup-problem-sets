from collections import OrderedDict
def safe(x,y,result):
    # print "safe-fun"
    # print x,y,result
    for q in range(y+1,len(grid[x])):
        if grid[x][q]=='^' :
            if result%4==3:
                return False
            else:
                break
        elif grid[x][q]=='v' :
            if result%4==1:
                return False
            else:
                break
        elif grid[x][q]=='<' :
            if result%4==0:
                return False
            else:
                break
        elif grid[x][q]=='>' :
            if result%4==2:
                return False
            else:
                break
        elif grid[x][q]=='#':
            break
        # 
    for q in range(y-1,-1,-1):
        if grid[x][q]=='^' :
            if result%4==1:
                return False
            else:
                break
        elif grid[x][q]=='v' :
            if result%4==3:
                return False
            else:
                break
        elif grid[x][q]=='<' :
            if result%4==2:
                return False                
            else:
                break
        elif grid[x][q]=='>' :
            if result%4==0:
                return False
            else:
                break
        elif grid[x][q]=='#':
            break
    for q in range(x-1,-1,-1):
        if grid[q][y]=='^' :
            if result%4==2:
                return False
            else:
                break
        elif grid[q][y]=='v' :
            if result%4==0:
                return False
            else:
                break    
        elif grid[q][y]=='<' :
            if result%4==3:
                return False                
            else:
                break
        elif grid[q][y]=='>' :
            if result%4==1:
                return False
            else:
                break
        elif grid[q][y]=='#':
            break
    for q in range(x+1,len(grid)):
        if grid[q][y]=='^' :
            if result%4==0:
                return False
            else:
                break
        elif grid[q][y]=='v' :
            if result%4==2:
                return False
            else:
                break                
        elif grid[q][y]=='<' :
            if result%4==1:
                return False                
            else:
                break
        elif grid[q][y]=='>' :
            if result%4==3:
                return False
            else:
                break
        elif grid[q][y]=='#':
            break
    return True
def poss(x,y,result):
    possible=[]
    if x+1<len(grid) and filter_(x+1,y):
        if x+2<len(grid) and grid[x+2][y]=='.':
            if safe(x+1,y,result+1) and safe(x+2,y,result+2):
                possible.append([x+1,y,result+1])
            elif safe(x+1,y,result+1):
                possible.append([x,y,result+2])
                possible.append([x+1,y,result+1])
                # possible.append([x+1,y,result+2])
        else:
            possible.append([x+1,y,result+1])
    
    if x-1>=0 and filter_(x-1,y):
        if x-2>=0 and grid[x-2][y]=='.':
            if safe(x-1,y,result+1) and safe(x-2,y,result+2):
                possible.append([x-1,y,result+1])
            elif safe(x-1,y,result+1):
                possible.append([x,y,result+2])
                possible.append([x-1,y,result+1])
        else:
            possible.append([x-1,y,result+1])
        # possible.append([x-1,y,result+1])
    if y+1<len(grid[0]) and filter_(x,y+1):
        if y+2<len(grid[0]) and grid[x][y+1]=='.':
            # print "ae"
            if safe(x,y+1,result+1) and safe(x,y+2,result+2):
                possible.append([x,y+1,result+1])
            elif safe(x,y+1,result+1):
                possible.append([x,y,result+2])
                possible.append([x,y+1,result+1])
        else:
            possible.append([x,y+1,result+1])
        # possible.append([x,y+1,result+1])
    # print x,y,result,possible
    # raw_input()
    if y-1>=0 and filter_(x,y-1):
        if y-1>=0 and grid[x][y-2]=='.':
            if safe(x,y-1,result+1) and safe(x,y-1,result+2):
                possible.append([x,y-1,result+1])
            elif safe(x,y-1,result+1):
                possible.append([x,y,result+2])
                possible.append([x,y-1,result+1])
        else:
            possible.append([x,y-1,result+1])
        # possible.append([x,y-1,result+1])
    # print possible
    p=[]
    for i in possible:
        if safe(i[0],i[1],i[2])==True:
            p.append([i[0],i[1],i[2]])
    # print p
    return p
def filter_(x,y):
    if grid[x][y]=='#' or grid[x][y]=='<' or grid[x][y]=='>' or grid[x][y]=='^' or grid[x][y]=='v':
        return False
    return True
def sol(x,y,result):
    visited[i][j]=1
    possible=poss(x,y,result)
    # print possible
    # possible.append([x,y,0])
    while possible!=[]:
        
        possible = map(tuple,possible)
        possible=list(OrderedDict.fromkeys(possible))
        # print possible
        node=possible.pop(0)
        if grid[node[0]][node[1]]=='G':
            print "Found"
            return node[2]
        p=poss(node[0],node[1],node[2])
        # print p
        for adj in p:
            if visited[adj[0]][adj[1]]:
                continue
            else:
                visited[adj[0]][adj[1]]=1
                possible.append(adj)


            


f = open('laser_maze.txt','r')
ans=open('ans','w')
for tt in range(int(f.readline())):
    rem=[]
    # print tt
    a,b = map(int,f.readline().split())
    visited=[[0 for i in range(b)] for j in range(a)]
    grid=[]
    for j in range(a):
        grid.append(list(f.readline().strip()))
    # print grid
    flag=False
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j]=='S':
                A= sol(i,j,0)
                if A==None:
                    ans.write('Case #'+str(tt+1)+': '+"impossible"+"\n")
                else:
                    ans.write('Case #'+str(tt+1)+': '+str(A)+"\n")
                # qq=sol(i,j,0)
                # if qq!=None:
                #     print qq
                # if sol(i,j,0)!=None:
                #     ans.write('Case #'+str(tt+1)+': '+str(solve(i,j,0))+"\n")
                # else:
                #     ans.write('Case #'+str(tt+1)+': '+"impossible"+"\n")
                flag=True
                break
        if flag:
            break
#     # print grid
#     # print "AS"
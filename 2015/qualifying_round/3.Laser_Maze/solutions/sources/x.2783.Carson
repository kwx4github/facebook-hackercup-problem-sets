#include<cstdio>
#include<cstring>
#include<queue>
#define CL(x,y) memset(x,y,sizeof(x))

using namespace std;

const int dx[]={-1,0,1,0},dy[]={0,-1,0,1};
int T,TC,M,N,sx,sy;
bool l[105][105][4],vis[105][105][4];
char m[105][105];

struct state{
	int x,y,t;
	state(){};
	state(int x, int y, int t):x(x),y(y),t(t){};
};
queue<state> q;

void setLaser(int x, int y, int t){
	for (int i=0;i<y;i++) l[i][x][(t+4)%4]=true;
	for (int i=x+1;i<N;i++) l[y][i][(t+1+4)%4]=true;
	for (int i=y+1;i<M;i++) l[i][x][(t+2+4)%4]=true;
	for (int i=0;i<x;i++) l[y][i][(t+3+4)%4]=true;
}

int main(){
	scanf("%d",&T);
	while (T--){
		CL(l,0);
		CL(m,0);
		CL(vis,0);
		q=queue<state>();

		scanf("%d%d",&M,&N);
		for (int i=0;i<M;i++)
			for (int j=0;j<N;j++){
				scanf(" %c",&m[i][j]);
				if (m[i][j]=='S') sx=j,sy=i;
				else if (m[i][j]=='^') setLaser(j,i,0);
				else if (m[i][j]=='>') setLaser(j,i,-1);
				else if (m[i][j]=='v') setLaser(j,i,-2);
				else if (m[i][j]=='<') setLaser(j,i,-3);
			}
		q.push(state(sx,sy,0));
		int steps = 0;
		while (!q.empty() && steps==0){
			state v = q.front();
			q.pop();
//			printf("%d %d %d\n",v.y,v.x,v.t);
			if (vis[v.y][v.x][v.t]) continue;
			vis[v.y][v.x][v.t] = true;

			if (m[v.y][v.x]=='G'){
				steps = v.t;
				break;
			}
			for (int i=0;i<4;i++){
				int tx=v.x+dx[i],ty=v.y+dy[i];
				if (tx<0 || tx>=N || ty<0 || ty>=M) continue;
				if (m[ty][tx]=='#'||m[ty][tx]=='^'||m[ty][tx]=='>'||m[ty][tx]=='v'||m[ty][tx]=='<') continue;
				if (l[ty][tx][(v.t+1)%4] || vis[ty][tx][(v.t+1)%4]) continue;
				q.push(state(tx,ty,v.t+1));
			}
		}
		printf("Case #%d: ",++TC);
		if (steps == 0) puts("impossible") ;
		else printf("%d\n",steps);
	}
}

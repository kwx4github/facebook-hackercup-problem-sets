#include <cstdio>
#include <iostream>
#include <string>
#include <cstring>

using namespace std;

int n, m, sx, sy, tx, ty;
char a[4][100][100];

const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};

char rotate(char c) {
  if (c == '^')
    return '>';
  else if (c == '>')
    return 'v';
  else if (c == 'v')
    return '<';
  else if (c == '<')
    return '^';
  return c;
}

bool isFree(char c) {
  return c == '.' || c == '*';
}

struct state {
  int t;
  int x;
  int y;
};

state q[4 * 100 * 100];
int d[4][100][100];

int bfs(int tt, int sx, int sy) {
  int h = 0;
  int t = 1;
  q[h].t = tt;
  q[h].x = sx;
  q[h].y = sy;
  memset(d, 255, sizeof(d));
  d[tt][sx][sy] = 0;
  while (h < t) {
    state v = q[h];
    h++;
    if (v.x == tx && v.y == ty) {
      return d[v.t][v.x][v.y];
    }
    for (int i = 0; i < 4; i++) {
      int nt = (v.t + 1) % 4;
      int nx = v.x + dx[i];
      int ny = v.y + dy[i];
      if (0 <= nx && nx < n && 0 <= ny && ny < m && a[nt][nx][ny] == '.') {
        if (d[nt][nx][ny] == -1) {
          d[nt][nx][ny] = d[v.t][v.x][v.y] + 1;
          q[t].t = nt;
          q[t].x = nx;
          q[t].y = ny;
          t++;
        }
      }
    }
  }
  return -1;
}

void solve() {
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      scanf(" %c", &a[0][i][j]);
      if (a[0][i][j] == 'S') {
        sx = i;
        sy = j;
        a[0][i][j] = '.';
      }
      if (a[0][i][j] == 'G') {
        tx = i;
        ty = j;
        a[0][i][j] = '.';
      }
      for (int k = 1; k <= 3; k++) {
        a[k][i][j] = rotate(a[k-1][i][j]);
      }
    }
  }
  for (int k = 0; k < 4; k++) {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        int d = -1;
        if (a[k][i][j] == '^')
          d = 0;
        else if (a[k][i][j] == '>')
          d = 1;
        else if (a[k][i][j] == 'v')
          d = 2;
        else if (a[k][i][j] == '<')
          d = 3;
        if (d == -1) {
          continue;
        }
        int x = i + dx[d];
        int y = j + dy[d];
        while (0 <= x && x < n && 0 <= y && y < m && isFree(a[k][x][y])) {
          a[k][x][y] = '*';
          x += dx[d];
          y += dy[d];
        }
      }
    }
  }
  int res = bfs(0, sx, sy);
  if (res == -1) {
    cout << "impossible" << endl;
    return;
  }
  cout << res << endl;
}

int main() {
  int tt;
  cin >> tt;
  for (int i = 0; i < tt; i++) {
    printf("Case #%d: ", i + 1);
    solve();
  }
}


#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <cctype>
#include <fstream>
using namespace std;

#define lowbit(x) ((x)&(-(x)))
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair

int f[110][110][4];
bool in[110][110][4];
char g[110][110];
int n,m;

queue<pair<pair<int,int>,int> > Q;

bool check(int i,int j,int k){
	if (i<0||i>=n||j<0||j>=m) return false;
	if (g[i][j]!='.') return false;
	for (int ti=i-1;ti>=0;ti--){
		if (g[ti][j]=='.') continue;
		if ((k&3)==0) if (g[ti][j]=='v') return false;
		if ((k&3)==1) if (g[ti][j]=='>') return false;
		if ((k&3)==2) if (g[ti][j]=='^') return false;
		if ((k&3)==3) if (g[ti][j]=='<') return false;
		break;
	}
	for (int ti=i+1;ti<n;ti++){
		if (g[ti][j]=='.') continue;
		if ((k&3)==0) if (g[ti][j]=='^') return false;
		if ((k&3)==1) if (g[ti][j]=='<') return false;
		if ((k&3)==2) if (g[ti][j]=='v') return false;
		if ((k&3)==3) if (g[ti][j]=='>') return false;
		break;
	}
	for (int tj=j-1;tj>=0;tj--){
		if (g[i][tj]=='.') continue;
		if ((k&3)==0) if (g[i][tj]=='>') return false;
		if ((k&3)==1) if (g[i][tj]=='^') return false;
		if ((k&3)==2) if (g[i][tj]=='<') return false;
		if ((k&3)==3) if (g[i][tj]=='v') return false;
		break;
	}
	for (int tj=j+1;tj<m;tj++){
		if (g[i][tj]=='.') continue;
		if ((k&3)==0) if (g[i][tj]=='<') return false;
		if ((k&3)==1) if (g[i][tj]=='v') return false;
		if ((k&3)==2) if (g[i][tj]=='>') return false;
		if ((k&3)==3) if (g[i][tj]=='^') return false;
		break;
	}
	return true;
}

void insert(int i,int j,int k){
	if (!check(i,j,k)) return;
	int tk=k&3;
	if (f[i][j][tk]==-1||f[i][j][tk]>k){
		f[i][j][tk]=k;
		if (!in[i][j][tk]){
			in[i][j][tk]=true;
			Q.push(MP(MP(i,j),k));
		}
	}
}

void update(int i,int j,int k){
	in[i][j][k&3]=false;
	insert(i+1,j,k+1);
	insert(i-1,j,k+1);
	insert(i,j+1,k+1);
	insert(i,j-1,k+1);
}

string getresult(){
	scanf("%d%d",&n,&m);
	for (int i=0;i<n;i++) scanf("%s",g[i]);
	int sx,sy,gx,gy;
	for (int i=0;i<n;i++)
		for (int j=0;j<m;j++){
			if (g[i][j]=='S')
				sx=i,sy=j,g[i][j]='.';
			if (g[i][j]=='G')
				gx=i,gy=j,g[i][j]='.';
		}
	memset(f,-1,sizeof(f));
	memset(in,false,sizeof(in));
	for (;Q.size();Q.pop());

	update(sx,sy,0);
	for (;Q.size();Q.pop()){
		update(Q.front().first.first,Q.front().first.second,Q.front().second);
	}

	int ans=-1;
	for (int i=0;i<4;i++)
		if (f[gx][gy][i]!=-1)
			if (ans==-1||ans>f[gx][gy][i])
				ans=f[gx][gy][i];
	if (ans==-1) return "impossible";
	char s[100];
	sprintf(s,"%d",ans);
	return s;
}

int main(int argc,char** argv){
	string a;
	int n;
	cin>>n;
	for (int i=0;i<n;i++){
		cout<<"Case #"<<i+1<<": "<<getresult()<<endl;
	}
	return 0;
}
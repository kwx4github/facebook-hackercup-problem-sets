program LazerMaze;
{$Assertions on}
{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, gvector, Math
  { you can add units after this };

type
  TPoint = record
    r, c: Integer;
  end;
  TLaser = record
    Pos: TPoint;
    Dir: Integer;
  end;

  TLaserVector = specialize TVector<TLaser>;

var
  Rows, Cols: Integer;
  Maze: array [0..100] of String;
const
  Directions : array [0..3] of TPoint = (
    (r: -1; c: 0), (r: 0; c: 1),
    (r: 1; c: 0), (r: 0; c: -1)
  );

function CreateLaser(r, c: Integer; dir: char): TLaser;
begin
  if dir = '^' then
    Result.Dir := 0
  else if dir = '>' then
    Result.Dir := 1
  else if dir = 'v' then
    Result.Dir := 2
  else if dir = '<' then
    Result.Dir := 3
  else assert(False);

  Result.Pos.r := r;
  Result.Pos.c := c;

end;

procedure ReadData;
var
  r: Integer;

begin
  ReadLn(Rows, Cols);

  for r := 1 to Rows do
    ReadLn(Maze[r]);

end;

type
  TState = record
    Pos: TPoint;
    Time: Integer;
  end;
  TStateVector = specialize TVector<TState>;

function CreateState(r, c, Time: Integer): TState;
begin
  Result.Pos.r := r;
  Result.Pos.c := c;
  Result.Time := Time;

end;

var
  IsVisited: array [0..100, 0..100, 0..4] of Boolean;

procedure Solve;
var
  Lasers: TLaserVector;

  function IsFeasible(State: TState): Boolean;
  var
    i, j: Integer;
    Time: Integer;
    Laser: TLaser;
    d: TPoint;
    Pass: Boolean;
    newr, newc: Integer;

  begin
    if (State.Pos.r <= 0) or (Rows < State.Pos.r) then
      Exit(False);
    if (State.Pos.c <= 0) or (Cols < State.Pos.c) then
      Exit(False);

    if Maze[State.Pos.r][State.Pos.c] in ['#', '>', 'v', '<', '^'] then
      Exit(False);
    Time := State.Time mod 4;
    if IsVisited[State.Pos.r, State.Pos.c, Time] then
      Exit(False);

    for i := 0 to Lasers.Size - 1 do
    begin
      Laser := Lasers[i];
      d := Directions[(Laser.Dir + Time) mod 4];

      Pass := True;
      for j := 1 to Max(Rows, Cols) do
      begin
        newr := Laser.Pos.r + j * d.r;
        newc := Laser.Pos.c + j * d.c;
        if (newr <= 0) or (Rows < newr) then
          Break;
        if (newc <= 0) or (Cols < newc) then
          Break;
        if Maze[newr][newc] in ['#', '>', 'v', '<', '^'] then
          Break;
        if (newr = State.Pos.r) and (newc = State.Pos.c) then
        begin
          Pass := False;
          Break;
        end;
      end;
      if not Pass then
        Exit(False);
    end;
    Result := True;
  end;

  function IsGoal(State: TState): Boolean;
  begin
    Result := Maze[State.Pos.r][State.Pos.c] = 'G';
  end;

var
  r, c, i: Integer;
  Queue: TStateVector;
  ToQ: Integer;
  State, NewState: TState;
  sr, sc: Integer;

begin
  Lasers := TLaserVector.Create;
  for r := 1 to Rows do
    for c := 1 to Cols do
      if Maze[r, c] in ['^', '>', '<', 'v'] then
        Lasers.PushBack(CreateLaser(r, c, Maze[r, c]))
      else if Maze[r, c] = 'S' then
      begin
        sr := r;
        sc := c;
      end;

  FillChar(IsVisited, SizeOf(IsVisited), False);
  Queue := TStateVector.Create;
  ToQ:= 0;

  Queue.PushBack(CreateState(sr, sc, 0));
  IsVisited[sr, sc, 0] := True;
  while ToQ < Queue.Size do
  begin
    State := Queue[ToQ];
    Inc(ToQ);

    for i := 0 to 3 do
    begin
      NewState := CreateState(State.Pos.r + Directions[i].r,
      State.Pos.c + Directions[i].c, State.Time + 1);
      if IsFeasible(NewState) then
      begin
        if IsGoal(NewState) then
        begin
          WriteLn(NewState.Time);
          Exit;
        end
        else
        begin
          IsVisited[NewState.Pos.r, NewState.Pos.c,
              NewState.Time mod 4] := True;
          Queue.PushBack(NewState);
        end;

      end;


    end;

  end;

  WriteLn('impossible');
  Queue.Free;
  Lasers.Free;
end;

var
  T: Integer;
  i: Integer;

begin
  ReadLn(T);

  for i := 1 to T do
  begin
    ReadData;
    Write('Case #', i, ': ');
    Solve;
  end;

end.


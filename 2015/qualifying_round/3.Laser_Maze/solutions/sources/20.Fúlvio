#include <bits/stdc++.h>

using namespace std;

//cima ^ 0 ,direita > 1 ,baixo v 2,esquerda < 3
 
int di[] = {0,0,1,-1};
int dj[] = {1,-1,0,0};
 
int main(){
	
	int t;
	cin>>t;
	int c = 1;
	while(t--){
		int n,m;
		cin>>n>>m;
		string M[n];
		for(int i = 0;i<n;i++)
			cin>>M[i];
		
		int ii,ij;
		int fi,fj;
		vector<pair<int,int> > laser;
		
		for(int i = 0;i<n;i++)
			for(int j = 0;j<m;j++){
				if(M[i][j] == '.' || M[i][j] == '#')continue;
				if(M[i][j] == 'S')
				{ii = i;ij = j; M[i][j] = '.';}
				else
				if(M[i][j] == 'G')
				{fi = i;fj = j; M[i][j] = '.';}
				else{
					laser.push_back(make_pair(i,j));
				}
			}
		
		set< pair<int,int> > mirado[laser.size()][4];
		
		for(int k = 0;k<laser.size();k++){
				for(int te = 0;te<4;te++){
					set<pair<int,int > > aux;
					int qual;
					int il = laser[k].first,jl = laser[k].second;
					if(M[il][jl] == '^')qual = 0;
					else if(M[il][jl] == '>')qual = 1;
					else if(M[il][jl] == 'v')qual = 2;
					else qual = 3;
					qual = (te+qual)%4;
					if(qual == 0){
						for(int i = il-1;i>=0 && M[i][jl] == '.';i--)
							aux.insert(make_pair(i,jl));
					}else if(qual == 1){
						for(int j = jl+1;j<m && M[il][j] == '.';j++)
							aux.insert(make_pair(il,j));
					}else if(qual == 2){
						for(int i = il+1;i<n && M[i][jl] == '.';i++)
							aux.insert(make_pair(i,jl));
					}else{
						for(int j = jl-1;j>=0 && M[il][j] == '.';j--)
							aux.insert(make_pair(il,j));
					}
					
					mirado[k][te] = aux;
				}
		}
		
		int bfs[n][m][4];
		memset(bfs,-1,sizeof bfs);
		queue<tuple<int,int,int> > q;
		bfs[ii][ij][0] = 0;
		q.push(tuple<int,int,int>(ii,ij,0));
		int resp = 0x3f3f3f3f;
		while(!q.empty()){
			tuple<int,int,int> ax = q.front();
			q.pop();
			int ati = get<0>(ax),atj= get<1>(ax),att= get<2>(ax);
		//	cout<<ati<<" "<<atj<<" "<<att<<endl;
			if(ati == fi && atj == fj){
				resp = bfs[ati][atj][att];
				break;
			}
			
			int nextTime = (att+1)%4;
			for(int i = 0;i<4;i++){
				int iii = ati+di[i], jjj = atj+dj[i];
				if(iii<0 || iii>=n || jjj<0 || jjj>=m || M[iii][jjj]!='.' || bfs[iii][jjj][nextTime]!=-1)continue;
				bool ok = true;
				pair<int,int> pos = make_pair(iii,jjj);
				for(int j = 0;j<laser.size() && ok;j++){
					if(mirado[j][nextTime].find(pos) != mirado[j][nextTime].end())ok = false;
				}
				
				if(!ok)continue;
				bfs[iii][jjj][nextTime] = bfs[ati][atj][att]+1;
				q.push(tuple<int,int,int>(iii,jjj,nextTime));
			}
		}
		
		cout<<"Case #"<<c++<<": ";
		if(resp <0x3f3f3f3f)
			cout<<resp<<endl;
		else
			cout<<"impossible"<<endl;
	}
	return 0;
}

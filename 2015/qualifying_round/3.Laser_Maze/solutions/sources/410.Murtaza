#include <cstdio>
#include <queue>

using namespace std;

const char InFile[]="Pb3.in";
const char OutFile[]="Pb3.out";
const int MaxN=109;
const int INF=1<<30;
const int DIR=4;
const int DX[]={0,0,1,-1};
const int DY[]={1,-1,0,0};

int T,N,M;
char A[MaxN][MaxN];
char mat[4][MaxN][MaxN];
int best[4][MaxN][MaxN];

inline char rotate(const char &dir)
{
    if(dir=='<')
    {
        return '^';
    }
    if(dir=='^')
    {
        return '>';
    }
    if(dir=='>')
    {
        return 'v';
    }
    if(dir=='v')
    {
        return '<';
    }
    return dir;
}

inline void rotateAll()
{
    for(int i=1;i<=N;++i)
    {
        for(int j=1;j<=M;++j)
        {
            A[i][j]=rotate(A[i][j]);
        }
    }
}

inline bool canPass(const char &v)
{
    return v!='#' && v!='<' && v!='>' && v!='v' && v!='^';
}

inline void goLeft(const int &r, int x, int y)
{
    --y;
    while(canPass(mat[r][x][y]))
    {
        mat[r][x][y]='$';
        --y;
    }
}

inline void goRight(const int &r, int x, int y)
{
    ++y;
    while(canPass(mat[r][x][y]))
    {
        mat[r][x][y]='$';
        ++y;
    }
}

inline void goUp(const int &r, int x, int y)
{
    --x;
    while(canPass(mat[r][x][y]))
    {
        mat[r][x][y]='$';
        --x;
    }
}

inline void goDown(const int &r, int x, int y)
{
    ++x;
    while(canPass(mat[r][x][y]))
    {
        mat[r][x][y]='$';
        ++x;
    }
}

inline void buildMat(const int &r)
{
    for(int i=0;i<=N+1;++i)
    {
        for(int j=0;j<=M+1;++j)
        {
            mat[r][i][j]=A[i][j];
        }
    }

    for(int i=1;i<=N;++i)
    {
        for(int j=1;j<=M;++j)
        {
            if(mat[r][i][j]=='<')
            {
                goLeft(r,i,j);
            }
            if(mat[r][i][j]=='>')
            {
                goRight(r,i,j);
            }
            if(mat[r][i][j]=='^')
            {
                goUp(r,i,j);
            }
            if(mat[r][i][j]=='v')
            {
                goDown(r,i,j);
            }
        }
    }
}

struct Point
{
    Point(int r=0, int x=0, int y=0):r(r),x(x),y(y){}
    int r,x,y;
};

int main()
{
    freopen(InFile,"r",stdin);
    freopen(OutFile,"w",stdout);

    scanf("%d",&T);
    for(int test=1;test<=T;++test)
    {
        scanf("%d %d",&N,&M);
        for(int i=1;i<=N;++i)
        {
            scanf("%s",A[i]+1);
        }

        for(int i=0;i<=N+1;++i)
        {
            A[i][0]=A[i][M+1]='#';
        }
        for(int j=0;j<=M+1;++j)
        {
            A[0][j]=A[N+1][j]='#';
        }

        int start_x=0;
        int start_y=0;
        int end_x=0;
        int end_y=0;
        for(int i=1;i<=N;++i)
        {
            for(int j=1;j<=M;++j)
            {
                if(A[i][j]=='S')
                {
                    start_x=i;
                    start_y=j;
                    A[i][j]='.';
                }
                else if(A[i][j]=='G')
                {
                    end_x=i;
                    end_y=j;
                    A[i][j]='.';
                }
            }
        }

        for(int r=0;r<4;++r)
        {
            rotateAll();
            buildMat(r);
        }

        for(int r=0;r<4;++r)
        {
            for(int i=1;i<=N;++i)
            {
                for(int j=1;j<=M;++j)
                {
                    best[r][i][j]=INF;
                }
            }
        }

        queue<Point> Q;

        for(int dir=0;dir<DIR;++dir)
        {
            int nx=start_x+DX[dir];
            int ny=start_y+DY[dir];
            if(mat[0][nx][ny]=='.')
            {
                best[0][nx][ny]=1;
                Q.push(Point(0,nx,ny));
            }
        }

        while(!Q.empty())
        {
            Point nod=Q.front();
            Q.pop();

            int nr=nod.r+1;
            if(nr==4)
            {
                nr=0;
            }
            for(int dir=0;dir<DIR;++dir)
            {
                int nx=nod.x+DX[dir];
                int ny=nod.y+DY[dir];

                if(mat[nr][nx][ny]=='.')
                {
                    if(best[nr][nx][ny]==INF)
                    {
                        best[nr][nx][ny]=best[nod.r][nod.x][nod.y]+1;
                        Q.push(Point(nr,nx,ny));
                    }
                }
            }
        }

        int sol=-1;
        for(int r=0;r<4;++r)
        {
            if( (sol==-1 || sol>best[r][end_x][end_y]) && best[r][end_x][end_y]!=INF)
            {
                sol=best[r][end_x][end_y];
            }
        }

        printf("Case #%d: ",test);
        if(sol==-1)
        {
            printf("impossible");
        }
        else
        {
            printf("%d",sol);
        }
        if(test<T)
        {
            printf("\n");
        }
    }

    return 0;
}

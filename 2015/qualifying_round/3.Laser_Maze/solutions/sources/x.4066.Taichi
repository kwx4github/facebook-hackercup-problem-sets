#include <bits/stdc++.h>

using namespace std;

typedef long long  ll;

const int MAX_SIZE = 101;
const int dx[] = {1, 0, -1, 0};
const int dy[] = {0, 1, 0, -1};
int M, N;
string maze[MAX_SIZE];
pair<int, int> s, g;

bool isOk(int y, int x, int cnt) {
    cnt = cnt % 4;

    // up
    int ny = y - 1;
    while (0 <= ny) {
        if (maze[ny][x] == '#')
            break;
        else if ((maze[ny][x] == 'v' && cnt == 0) ||
                 (maze[ny][x] == '>' && cnt == 1) ||
                 (maze[ny][x] == '^' && cnt == 2) ||
                 (maze[ny][x] == '<' && cnt == 3))
            return false;
        --ny;
    }

    // down
    ny = y + 1;
    while (ny < M) {
        if (maze[ny][x] == '#')
            break;
        else if ((maze[ny][x] == 'v' && cnt == 2) ||
                 (maze[ny][x] == '>' && cnt == 3) ||
                 (maze[ny][x] == '^' && cnt == 0) ||
                 (maze[ny][x] == '<' && cnt == 1))
            return false;
        ++ny;
    }

    // left
    int nx = x - 1;
    while (0 <= nx) {
        if (maze[y][nx] == '#')
            break;
        else if ((maze[y][nx] == 'v' && cnt == 3) ||
                 (maze[y][nx] == '>' && cnt == 0) ||
                 (maze[y][nx] == '^' && cnt == 1) ||
                 (maze[y][nx] == '<' && cnt == 2))
            return false;
        --nx;
    }

    // right
    nx = x + 1;
    while (nx < N) {
        if (maze[y][nx] == '#')
            break;
        else if ((maze[y][nx] == 'v' && cnt == 1) ||
                 (maze[y][nx] == '>' && cnt == 2) ||
                 (maze[y][nx] == '^' && cnt == 3) ||
                 (maze[y][nx] == '<' && cnt == 0))
            return false;
        ++nx;
    }

    return true;
}

int Solve()
{
    vector<vector<int>> memo(M, vector<int>(N, -1));
    memo[s.first][s.second] = 0;
    queue<pair<int, int>> que;
    que.push(make_pair(s.first, s.second));

    while (!que.empty()) {
        pair<int, int> now = que.front();
        que.pop();

        for (int d = 0; d < 4; ++d) {
            int nx = now.second + dx[d];
            int ny = now.first + dy[d];

            if (nx < 0 || nx >= N || ny < 0 || ny >= M)
                continue;
            if (memo[ny][nx] != -1)
                continue;
            if (isOk(ny, nx, memo[now.first][now.second] + 1)) {
                if (ny == g.first && nx == g.second)
                    return memo[now.first][now.second] + 1;
                memo[ny][nx] = memo[now.first][now.second] + 1;
                que.push(make_pair(ny, nx));
            }
        }
    }

    return memo[g.first][g.second];
}

int main()
{
    cin.tie(0);
    ios::sync_with_stdio(false);

    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        cin >> M >> N;
        for (int j = 0; j < M; ++j)
            cin >> maze[j];

        for (int y = 0; y < M; ++y)
            for (int x = 0; x < N; ++x) {
                if (maze[y][x] == 'S') {
                    s.first = y;
                    s.second = x;
                }
                else if (maze[y][x] == 'G') {
                    g.first = y;
                    g.second = x;
                }
            }

        cout << "Case #" << i << ": ";
        int ans = Solve();
        if (ans == -1)
            cout << "impossible\n";
        else
            cout << ans << "\n";
    }

    return 0;
}

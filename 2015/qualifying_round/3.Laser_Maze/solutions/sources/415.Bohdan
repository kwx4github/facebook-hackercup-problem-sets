import java.io.*;
import java.util.*;

public class cup3 {
    static int[][] dir={{-1,0},{0,1},{1,0},{0,-1},};
    static int bfs(boolean[][][] avail, int[] start, int[] target){
        boolean[][][] visited=new boolean[avail.length][avail[0].length][avail[0][0].length];
        ArrayDeque<int[]> q=new ArrayDeque<>();
        q.add(new int[]{start[0],start[1],0});
        visited[start[0]][start[1]][0]=true;
        while (!q.isEmpty()){
            int[] v=q.poll();
            if (v[0]==target[0] && v[1]==target[1] ) return v[2];
            
            for (int[] d:dir){
                int[] c={v[0]+d[0],v[1]+d[1], (v[2]+1)%4};
                if (!(0<=c[0] && c[0]<avail.length && 0<=c[1] && c[1]<avail[0].length)) continue;
                if (!avail[c[0]][c[1]][c[2]]) continue;
                if (visited[c[0]][c[1]][c[2]]) continue;
                
                visited[c[0]][c[1]][c[2]]=true;
                c[2]=v[2]+1;
                q.add(c);
            }
            
        }
        return -1;
    }
    
    
    public static void main(String[] args) throws IOException{
        InputStream in=System.in;
        PrintStream out=System.out;
        
        in =new FileInputStream("laser_maze.txt");
        out =new PrintStream("out3.txt");        
        
         
        Scanner sc=new Scanner(in);
        int T=sc.nextInt();
        HashMap<Character, Integer> ind=new HashMap<>();
        ind.put('^',0);
        ind.put('>',1);
        ind.put('v',2);
        ind.put('<',3);
        
        for (int t=0;t<T;t++){
            int M=sc.nextInt(),N=sc.nextInt();
            char[][] gr=new char[M][N];
            for (int i=0;i<M;i++){
                String s=sc.next();
                gr[i]=s.toCharArray();                    
            }
            //System.out.println(Arrays.deepToString(gr));
            int[] start=null,target=null;
            boolean[][][] avail=new boolean[M][N][4];
            for (boolean[][] table:avail)
                for (boolean[] row:table)
                    Arrays.fill(row, true);
            for (int i=0;i<M;i++)
                for (int j=0;j<N;j++){
                    if (gr[i][j]=='S') start=new int[]{i,j};
                    if (gr[i][j]=='G') target=new int[]{i,j};
                    if (gr[i][j]=='#') avail[i][j][0]=avail[i][j][1]=avail[i][j][2]=avail[i][j][3]=false;
                    if (ind.containsKey(gr[i][j])){
                        avail[i][j][0]=avail[i][j][1]=avail[i][j][2]=avail[i][j][3]=false;
                        int type=ind.get(gr[i][j]);
                        for (int time=0;time<4;time++){
                            int[] d=dir[(time+type)%4];
                            for (int[] curr=new int[]{i+d[0],j+d[1]}; 
                                    0<=curr[0] && curr[0]<M && 0<=curr[1] && curr[1]<N &&
                                    gr[curr[0]][curr[1]]!='#' && !ind.containsKey(gr[curr[0]][curr[1]]);
                                    curr=new int[]{curr[0]+d[0],curr[1]+d[1]})
                                avail[curr[0]][curr[1]][time]=false;
                        }
                    }                    
                }
            int res=bfs(avail, start, target);
            out.println("Case #"+(t+1)+": "+(res==-1 ? "impossible":res));        
            
            
        }
        
        
        // TODO code application logic here
    }
    
}

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <vector>
#include <list>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <utility>
#include <algorithm>
#include <limits>
#include <iomanip>

#define INF 1000000000
#define Inf 1000000000000000000

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

#define MAXN 110

int m,n;
int nr[4] = {-1,0,1,0};
int nc[4] = {0,1,0,-1};
bool can[MAXN][MAXN][4];
bool vis[MAXN][MAXN][4];
char mat[MAXN][MAXN];

void pre() {
  for(int i = 0; i < m; ++i) {
    for(int j = 0; j < n; ++j) {
      if (mat[i][j] == '.' || mat[i][j] == 'S' || mat[i][j] == 'G') can[i][j][0] = can[i][j][1] = can[i][j][2] = can[i][j][3] = true;
      else can[i][j][0] = can[i][j][1] = can[i][j][2] = can[i][j][3] = false;
    }
  }
  for(int i = 0; i < m; ++i) {
    for(int j = 0; j < n; ++j) {
      if (mat[i][j] == '^') {
        for(int k = i - 1; k >= 0; k--) can[k][j][0] = false;
        for(int k = i + 1; k < m; k++) can[k][j][2] = false;
        for(int k = j - 1; k >= 0; k--) can[i][k][3] = false;
        for(int k = j + 1; k < n; k++) can[i][k][1] = false;
      }
      if (mat[i][j] == '>') {
        for(int k = i - 1; k >= 0; k--) can[k][j][3] = false;
        for(int k = i + 1; k < m; k++) can[k][j][1] = false;
        for(int k = j - 1; k >= 0; k--) can[i][k][2] = false;
        for(int k = j + 1; k < n; k++) can[i][k][0] = false;
      }
      if (mat[i][j] == 'v') {
        for(int k = i - 1; k >= 0; k--) can[k][j][2] = false;
        for(int k = i + 1; k < m; k++) can[k][j][0] = false;
        for(int k = j - 1; k >= 0; k--) can[i][k][1] = false;
        for(int k = j + 1; k < n; k++) can[i][k][3] = false;
      }
      if (mat[i][j] == '<') {
        for(int k = i - 1; k >= 0; k--) can[k][j][1] = false;
        for(int k = i + 1; k < m; k++) can[k][j][3] = false;
        for(int k = j - 1; k >= 0; k--) can[i][k][0] = false;
        for(int k = j + 1; k < n; k++) can[i][k][2] = false;
      }
    }
  }
}

bool canGo(pair<ii,int> p) {
  if (p.first.first >= 0 && p.first.first < m && p.first.second >= 0 && p.first.second < n && can[p.first.first][p.first.second][p.second % 4]) return true;
  return false;
}

int main() {
  //freopen("in","r",stdin);
  //freopen("out55","w",stdout);
  int t, minDist;
  pair<ii,int> ini;
  scanf("%d",&t);
  for(int cas = 1; cas <= t; ++cas) {
    minDist = INF;
    scanf("%d %d",&m,&n);
    for(int i = 0; i < m; ++i) {
      getchar();
      for(int j = 0; j < n; ++j) {
        scanf("%c",&mat[i][j]);
        if (mat[i][j] == 'S') {
          ini.first.first = i;
          ini.first.second = j;
          ini.second = 0;
        }
      }
    }
    memset(vis,0,sizeof(vis));
    pre();
    queue<pair<ii,int> > q;
    q.push(ini);
    vis[ini.first.first][ini.first.second][ini.second] = 1;
    while(!q.empty()) {
      pair<ii,int> atual = q.front();
      q.pop();
      if (mat[atual.first.first][atual.first.second] == 'G') minDist = min(minDist,atual.second);
      for(int i = 0; i < 4; ++i) {
        pair<ii,int> next = make_pair(make_pair(atual.first.first + nr[i],atual.first.second + nc[i]),atual.second + 1);
        if (canGo(next) && !vis[next.first.first][next.first.second][next.second % 4]) {
          vis[next.first.first][next.first.second][next.second % 4] = 1;
          q.push(next);
        }
      }
    }
    if (minDist == INF) printf("Case #%d: impossible\n",cas);
    else printf("Case #%d: %d\n",cas,minDist);
  }


  return 0;
}

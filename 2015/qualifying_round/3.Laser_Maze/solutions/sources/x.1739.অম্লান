/*
prob: LaserMaze
id: amlansaha
lang: C++
date: Jan 9, 2015
algo: BFS
*/
#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long LLU;
typedef vector<int> VI;
typedef vector<long long> VLL;
typedef map<int, int> MAPII;
typedef map<string,int> MAPSI;
typedef pair<int, int> PII;

#define FOR(i,a,b) for(i=a;i<=b;i++)
#define ROF(i,a,b) for(i=a;i>=b;i--)
#define FR(i,n)	for(i=0;i<n;i++)
#define RF(i,n) for(i=n;i>0;i--)
#define CLR(a) memset ( a, 0, sizeof ( a ) )
#define RESET(a) memset ( a, -1, sizeof ( a ) )
#define PB(a)	push_back ( a )
#define Max 103

int X[4] = {-1, 0, 0, 1};
int Y[4] = {0, 1, -1, 0};
char ch[4] = {'^', '>', 'v', '<'};

char nextDir(char c, int rot)
{
	int i;
	FR ( i, 4 )	if ( ch[i] == c )	break;
	if ( i == 4 )	return c;
//	cout << "i: " << i << endl;
	return ch[(i+rot%4)%4];
}

string grid[Max];
int row, col;
struct Node
{
	int r, c, dist;
	Node (int rr=0, int cc=0, int d=0)	{r = rr; c = cc; dist = d;}
	bool isValid()	{
		if ( r < 0 || c < 0 || r >= row || c >= col )	return false;
		if ( grid[r][c] != '.' && grid[r][c] != 'S' && grid[r][c] != 'G' )	return false;
		int i, j, k, l;
		bool flag = true;
		char temp;
		for ( i = c-1; i >= 0; i-- )	{
			if ( grid[r][i] == '#' )	break;
			temp = nextDir(grid[r][i], dist);
			if ( temp == '>' )	return false;
		}
		for ( i = c+1; i < col; i++ )	{
			if (grid[r][i] == '#' )	break;
			temp = nextDir(grid[r][i], dist);
			if ( temp == '<' )	return false;
		}
		for ( i = r-1; i >= 0; i-- )	{
			if ( grid[i][c] == '#' )	break;
			temp = nextDir(grid[i][c], dist);
//			if ( r == 1 && c == 2 )	cout << "dist: " << dist << " ("<<i<<","<<c<<"): "<<grid[i][c] << " temp: "<<temp <<  " newline" << endl;
			if ( temp == 'v' )	return false;
		}
		for ( i = r+1; i < row; i++ )	{
			if ( grid[i][c] == '#'  )	break;
			temp = nextDir(grid[i][c], dist);
			if ( temp == '^' )	return false;
		}
		return true;
	}
};


int bfs()
{
	int i, j, k, l, m, n;
	int ret = 0;
	char cc, temp;
	queue<Node> q;
	bool flag;
	int visited[Max][Max];
	CLR(visited);
	flag = true;
	FR ( i, row )	{
		FR ( j, col )	{
			if ( grid[i][j] == 'S' ) 	{
				FR ( k, 4 )	{
					Node nn(i+X[k],j+Y[k],1);
					if ( nn.isValid() == false )	continue;
					q.push(nn);
				}
			}
		}
	}
	Node nn;
//	cout << "row: " << row << " col: " << col << endl;
	while ( !q.empty() )	{
		nn = q.front();
		q.pop();
		if ( grid[nn.r][nn.c] == 'G' )	return nn.dist;
		if ( visited[nn.r][nn.c] >= 4)	continue;
		visited[nn.r][nn.c]++;
		FR ( k, 4 )	{
			Node nn2(nn.r+X[k], nn.c+Y[k], nn.dist+1);
			if (nn2.isValid() == false)
				continue;
			if ( visited[nn2.r][nn2.c] >= 4)	continue;
			q.push(nn2);
		}
	}
	return -1;
}

int main ()
{
	freopen("LaserMaze.in", "r", stdin);
	freopen("LaserMaze.out", "w", stdout);
    int i, j, k, l, temp, t, n, m, ans, caseno = 0;
    string str;
//    while ( cin >> str >> k )	cout<< nextDir(str[0],k) << endl;
    scanf ( "%d", &t );
    
    while ( t-- )	{
    	scanf ( "%d %d", &row, &col );
//    	cout << "row:  " << row << " col: " << col << endl;
    	FR ( i, row )	cin >> grid[i];
    	ans = bfs();
    	printf ( "Case #%d: ", ++caseno);
    	if ( ans < 0 )	printf ( "impossible\n");
    	else	printf ( "%d\n", ans );
    }
    return 0;
}

//Author : Aditya Shah
//Contest : Facebook HackerCup
//Problem : Laser Maze

#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long
#define mp make_pair
#define F first
#define S second
#define pii pair<int,int>
#define vi vector<int>
#define vs vector<string>
#define vpii vector<pii>
#define all(v) v.begin(), v.end()
#define gt greater<int>()
#define mod 1000000007
#define maxn 100005
#define fr freopen("HC3.in","r",stdin)
#define fw freopen("output.txt","w",stdout)

bool allowed[4][105][105];
int dist[4][105][105];
int test,n,m;
char a[105][105];
char d[4] = {'^','>','v','<'};

pii dir(char c, int t){
	t = t % 4;
	int dx,dy;
	int idx = 0;
	for(int i = 0; i < 4; i++){
		if(c == d[i]){
			idx = i;
			break;
		}
	}
	idx = (idx + t) % 4;
	c = d[idx];
	if(c == '^')
		dx = -1, dy = 0;
	else if(c == '>')
		dx = 0, dy = 1;
	else if(c == 'v')
		dx = 1, dy = 0;
	else
		dx = 0, dy = -1;
	return mp(dx,dy);
}

void gen_zone(){
	for(int i = 0; i < 105; i++){
		for(int j = 0; j < 105; j++){
			for(int k = 0; k < 4; k++){
				dist[k][i][j] = mod;
				allowed[k][i][j] = false;
			}
		}
	}
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			if(a[i][j] == '#'){
				for(int k = 0; k < 4; k++){
					allowed[k][i][j] = true;
				}
				continue;
			}
			if(a[i][j] != '.' && a[i][j] != 'S' && a[i][j] != 'G'){
				for(int k = 0; k < 4; k++){
					allowed[k][i][j] = true;
					pii curr = dir(a[i][j], k);
					int dx = curr.F, dy = curr.S;
					for(int x = i + dx, y = j + dy; x <= n && x >= 1 && y >= 1 && y <= m; x += dx, y += dy){
						if(a[x][y] != '.' && a[x][y] != 'S' && a[x][y] != 'G'){
							break;
						}
						allowed[k][x][y] = true;
					}
				}
			}
		}
	}
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			for(int k = 0; k < 4; k++){
				allowed[k][i][j] ^= 1;
			}
		}
	}
}

int start_x, start_y,end_x,end_y;

void dfs(int x, int y, int depth){
	int id = depth % 4;
	if(dist[id][x][y] > depth){
		dist[id][x][y] = depth;
	}
	else{
		return;
	}
	id = (id + 1) % 4;
	if(allowed[id][x+1][y])
		dfs(x+1, y, depth+1);
	if(allowed[id][x][y+1])
		dfs(x, y+1, depth+1);
	if(allowed[id][x-1][y])
		dfs(x-1, y, depth+1);
	if(allowed[id][x][y-1])
		dfs(x, y-1, depth+1);
}

int main(){
	fr;fw;
	scanf("%d",&test);
	for(int t = 1; t <= test; t++){
		scanf("%d %d",&n,&m);
		for(int i = 1; i <= n; i++){
			for(int j = 1; j <= m; j++){
				cin >> a[i][j];
				if(a[i][j] == 'S')
					start_x = i, start_y = j;
				if(a[i][j] == 'G')
					end_x = i, end_y = j;
			}
		}
		gen_zone();
		dfs(start_x, start_y, 0);

		int ans = mod;
		for(int k = 0; k < 4; k++){
			ans = min(ans, dist[k][end_x][end_y]);
		}
		if(ans != mod)
			printf("Case #%d: %d\n",t,ans);
		else
			printf("Case #%d: impossible\n",t);
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
int t;
int rows,cols;
int mp[105][105];
char temp;
struct node{
	int r,c,stage;
}s,tt,nw;
queue<node> q;
bool seen[105][105][5];
bool check(int row, int col, int stage){
	for(int r=row-1;r>=0;r--){
		if(0<mp[r][col] && mp[r][col]<5){
			int dir=mp[r][col]+stage;
			dir=dir%4;
			if(dir==0)dir=4;
			if(dir==3)return false;
		}
		if(mp[r][col]<10)break;
	}
	for(int r=row+1;r<rows;r++){
		if(0<mp[r][col] && mp[r][col]<5){
			int dir=mp[r][col]+stage;
			dir=dir%4;
			if(dir==0)dir=4;
			if(dir==1)return false;
		}
		if(mp[r][col]<10)break;
	}
	for(int c=col-1;c>=0;c--){
		if(0<mp[row][c] && mp[row][c]<5){
			int dir=mp[row][c]+stage;
			dir=dir%4;
			if(dir==0)dir=4;
			if(dir==2)return false;
		}
		if(mp[row][c]<10)break;
	}
	for(int c=col+1;c<cols;c++){
		if(0<mp[row][c] && mp[row][c]<5){
			int dir=mp[row][c]+stage;
			dir=dir%4;
			if(dir==0)dir=4;
			if(dir==4)return false;
		}
		if(mp[row][c]<10)break;
	}
	return true;
}
int main(){
	freopen("fbin.txt","r",stdin);
	freopen("fbout.txt","w",stdout);
	scanf("%d\n",&t);
	for(int cs=1;cs<=t;cs++){
		for(int r=0;r<105;r++)
			for(int c=0;c<105;c++)
				mp[r][c]=0,seen[r][c][0]=0,seen[r][c][1]=0,seen[r][c][2]=0,seen[r][c][3]=0;
		scanf("%d %d\n",&rows,&cols);
		bool reached=false;
		for(int r=0;r<rows;r++){
			for(int c=0;c<cols;c++){
				scanf("%c",&temp);
				if(temp=='#')mp[r][c]=-1;
				if(temp=='^')mp[r][c]=1;
				if(temp=='>')mp[r][c]=2;
				if(temp=='v')mp[r][c]=3;
				if(temp=='<')mp[r][c]=4;
				if(temp=='G')mp[r][c]=420;
				if(temp=='.')mp[r][c]=100;
				if(temp=='S')mp[r][c]=100,s.r=r,s.c=c;
			}
			scanf("\n");
		}
		while(!q.empty())q.pop();
		s.stage=0;seen[s.r][s.c][0]=1;
		q.push(s);
		while(!q.empty()){
			tt=q.front();q.pop();
			if(mp[tt.r][tt.c]==420){
				reached=true;
				printf("Case #%d: %d",cs,tt.stage);
				break;
			}
			//try go upwards
			nw.r=tt.r-1;nw.c=tt.c;nw.stage=tt.stage+1;
			if(nw.r>=0 && (mp[nw.r][nw.c]==100 || mp[nw.r][nw.c]==420) &&!seen[nw.r][nw.c][nw.stage%4]){
				if(check(nw.r,nw.c,nw.stage)){
					seen[nw.r][nw.c][nw.stage%4]=1;
					q.push(nw);
				}
			}
			//try go downwards
			nw.r=tt.r+1;nw.c=tt.c;nw.stage=tt.stage+1;
			if(nw.r<rows && (mp[nw.r][nw.c]==100 || mp[nw.r][nw.c]==420) &!seen[nw.r][nw.c][nw.stage%4]){
				if(check(nw.r,nw.c,nw.stage)){
					seen[nw.r][nw.c][nw.stage%4]=1;
					q.push(nw);
				}
			}
			//try go left
			nw.r=tt.r;nw.c=tt.c-1;nw.stage=tt.stage+1;
			if(nw.c>=0 && (mp[nw.r][nw.c]==100 || mp[nw.r][nw.c]==420) &&!seen[nw.r][nw.c][nw.stage%4]){
				if(check(nw.r,nw.c,nw.stage)){
					seen[nw.r][nw.c][nw.stage%4]=1;
					q.push(nw);
				}
			}
			//try go right
			nw.r=tt.r;nw.c=tt.c+1;nw.stage=tt.stage+1;
			if(nw.c<cols && (mp[nw.r][nw.c]==100 || mp[nw.r][nw.c]==420) &&!seen[nw.r][nw.c][nw.stage%4]){
				if(check(nw.r,nw.c,nw.stage)){
					seen[nw.r][nw.c][nw.stage%4]=1;
					q.push(nw);
				}
			}
		}
		if(!reached)printf("Case #%d: impossible",cs);
		if(cs<t)printf("\n");
	}
	return 0;
}

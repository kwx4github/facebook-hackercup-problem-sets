#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> ii;
typedef pair<ii, int> iii;

int N, M;
char grid[110][110];
int vis[110][110];
int dir[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
char pos[4] = {'^', '>', 'v', '<'};
map<char, int> m;
deque<iii> q;

void init() {
	m['^'] = 0;
	m['>'] = 1;
	m['v'] = 2;
	m['<'] = 3;
}

bool isSafe(int x, int y, int t) {
	int i, ori;
	for (i=x-1; i>=0; i--) {
		if (grid[i][y] == '#') break;
		if (m.count(grid[i][y]) == 0) continue;
		ori = m[grid[i][y]];
		if ((ori + t) % 4 == 2) return false;
		break;
	}
	for (i=x+1; i<M; i++) {
		if (grid[i][y] == '#') break;
		if (m.count(grid[i][y]) == 0) continue;
		ori = m[grid[i][y]];
		if ((ori + t) % 4 == 0) return false;
		break;
	}
	for (i=y-1; i>=0; i--) {
		if (grid[x][i] == '#') break;
		if (m.count(grid[x][i]) == 0) continue;
		ori = m[grid[x][i]];
		if ((ori + t) % 4 == 1) return false;
		break;
	}
	for (i=y+1; i<N; i++) {
		if (grid[x][i] == '#') break;
		if (m.count(grid[x][i]) == 0) continue;
		ori = m[grid[x][i]];
		if ((ori + t) % 4 == 3) return false;
		break;
	}
	return true;
}

bool check(int i, int j, int t) {
	return (i < 0 || i >= M || j < 0 || j >= N || 
	  grid[i][j] == '#' || m.count(grid[i][j]) != 0 ||
	  (vis[i][j] & (1 << t)) != 0 || !isSafe(i, j, t));
}

int bfs() {
	int x, y, d, nx, ny, nd, i;
	while (!q.empty()) {
		iii cur = q.front(); q.pop_front();
		x = cur.first.first;
		y = cur.first.second;
		d = cur.second;
		// printf("%d %d\n", x, y);
		if (grid[x][y] == 'G') return d;
		nd = d + 1;
		for (i=0; i<4; i++) {
			nx = x + dir[i][0];
			ny = y + dir[i][1];
			if (check(nx, ny, nd % 4)) continue;
			vis[nx][ny] |= (1 << (nd%4));
			q.push_back(iii(ii(nx, ny), nd));
		}
	}
	return -1;
}

int main() {
	init();
	int T, i, j, si, sj, res, tc;
	tc = 1;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d ", &M, &N);
		memset(grid, 0, sizeof grid);
		memset(vis, 0, sizeof vis);
		si = sj = -1;
		for (i=0; i<M; i++) {
			scanf("%s ", grid[i]);
			if (si != -1) continue;
			for (j=0; j<N; j++) {
				if (grid[i][j] == 'S') {
					si = i;
					sj = j;
				}
			}
		}
		// for (i=0; i<M; i++) {
		// 	for (j=0; j<N; j++) {
		// 		printf("%c", grid[i][j]);
		// 	}
		// 	printf("\n");
		// }
		q.clear();
		q.push_back(iii(ii(si, sj), 0));
		res = bfs();
		if (res == -1)
			printf("Case #%d: impossible\n", tc++);
		else
			printf("Case #%d: %d\n", tc++, res);
	}
	return 0;
}
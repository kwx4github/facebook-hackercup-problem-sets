#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N=100;
int n,m,id,laser[N][N][4],vis[N][N][4];
char g[N+9][N+9];
pair<int,int>str,tar;
int dx[]={-1,1,0,0};
int dy[]={0,0,-1,1};
int dr[4][4]={{0,2,3,1},{2,0,1,3},{1,3,0,2},{3,1,2,0}};

void Move(int x,int y,int T){
	for(int a=0;a<4;++a)
		for(int b=1;;++b){
			int tx=x+dx[a]*b;
			int ty=y+dy[a]*b;
			if(tx<0||ty<0||tx>=n||ty>=m||g[tx][ty]!='.')
				break;
			laser[tx][ty][dr[T][a]]=id;
		}
}

void build(){
	++id;
	for(int a=0;a<n;++a)
		for(int b=0;b<m;++b){
			if(g[a][b]=='^')
				Move(a,b,0);
			else if(g[a][b]=='v')
				Move(a,b,1);
			else if(g[a][b]=='<')
				Move(a,b,2);
			else if(g[a][b]=='>')
				Move(a,b,3);
		}

}

int BFS(){
	queue<pair<int,int> >qu;
	qu.push(str);
	int lev=1,siz;
	vis[str.first][str.second][0]=id;
	while(qu.size()){
		siz=qu.size();
		while(siz--){
			const pair<int,int>e=qu.front();
			qu.pop();
			for(int a=0;a<4;++a){
				int tx=e.first +dx[a];
				int ty=e.second+dy[a];
				int mod=lev%4;
				if(tx<0||ty<0||tx>=n||ty>=m||g[tx][ty]!='.'||vis[tx][ty][mod]==id||laser[tx][ty][mod]==id)
					continue;
				if(make_pair(tx,ty)==tar)
					return lev;
				vis[tx][ty][mod]=id;
				qu.push(make_pair(tx,ty));
			}
		}
		++lev;
	}
	return -1;
}

int main(int argc, char **argv) {
//	freopen("a","r",stdin);
//	freopen("p.txt","w",stdout);
	int t,k=1;
	scanf("%d",&t);
	while(t--){
		scanf("%d%d",&n,&m);
		for(int a=0;a<n;++a){
			getchar();
			for(int b=0;b<m;++b){
				g[a][b]=getchar();
				if(g[a][b]=='S')
					str=make_pair(a,b),g[a][b]='.';
				else if(g[a][b]=='G')
					tar=make_pair(a,b),g[a][b]='.';
			}
		}
		build();
		int res=BFS();
		printf("Case #%d: ",k++);
		if(res==-1)
			puts("impossible");
		else
			printf("%d\n",res);
	}
	return 0;
}
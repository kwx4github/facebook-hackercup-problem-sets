#include<bits/stdc++.h>

using namespace std;

int m,n;
char x[102][102];
int y[102][102][4];
vector< pair<pair<int,int>, int> > lasers;
pair<int,int> start;
pair<int,int> end;

int ans = -1;

bool killing[102][102][4];

void generate()
{
	for(int i=0;i<102;i++)
	{
		for(int j=0;j<102;j++)
		{
			for(int k=0;k<4;k++)
			{
				killing[i][j][k] = false;
			}
		}
	}

	for(int k=0;k<4;k++)
	{
		for(int i=0;i<lasers.size();i++)
		{
			int x1 = (lasers[i].second + k)%4;
			int u = lasers[i].first.first;
			int v = lasers[i].first.second;
			int du = 0;
			int dv = 0;
			if(x1==0)
			{
				dv = 1;
			}
			else if(x1==1)
			{
				du = 1;
			}
			else if(x1==2)
			{
				dv = -1;
			}
			else if(x1==3)
			{
				du = -1;
			}

			u += du;
			v += dv;

			while(u >=0 && u<m && v >=0 && v<n && (x[u][v] == '.' || x[u][v] == 'G' || x[u][v] == 'S'))
			{
				killing[u][v][k] = true;
				u = u + du;
				v = v + dv;
			}
		}
/*
		cout << "----------------------------------" << endl;
		cout << "Killing: " << k << endl;
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				cout << killing[i][j][k];
			}
			cout << endl;
		}
		cout << "---------------------------------------" << endl;
		*/
	}
}

bool check(int a, int b, int nom)
{
	return !(killing[a][b][nom%4]);
}

void DFS(int a, int b, int nom)
{
	if(y[a][b][nom%4]==-1 || y[a][b][nom%4] > nom)
	{
		y[a][b][nom%4] = nom;
		if(a>0 && (x[a-1][b] == '.' || x[a-1][b] == 'S' || x[a-1][b] == 'G') && check(a-1,b,nom+1)) { DFS(a-1,b,nom+1); }
		if(b>0 && (x[a][b-1] == '.' || x[a][b-1] == 'S' || x[a][b-1] == 'G') && check(a,b-1,nom+1)) { DFS(a,b-1,nom+1); }
		if(a<m-1 && (x[a+1][b] == '.' || x[a+1][b] == 'S' || x[a+1][b] == 'G') && check(a+1,b,nom+1)) { DFS(a+1,b,nom+1); }
		if(b<n-1 && (x[a][b+1] == '.' || x[a][b+1] == 'S' || x[a][b+1] == 'G') && check(a,b+1,nom+1)) { DFS(a,b+1,nom+1); }
	}
}


int main()
{
	ios_base::sync_with_stdio(0);
	freopen("input3.txt","r",stdin);
	freopen("output3.txt","w",stdout);
	int t;
	cin >> t;
	for(int aaaa=1;aaaa<=t;aaaa++)
	{
		lasers.clear();
		cin >> m >> n;
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				for(int k=0;k<4;k++)
				{
					y[i][j][k] = -1;
				}

				cin >> x[i][j];
				if(x[i][j] == 'S')
				{
					start = make_pair(i,j);
				}
				else if(x[i][j] == 'G')
				{
					end = make_pair(i,j);
				}
				else if(x[i][j] == '<' || x[i][j] == '>' || x[i][j] == '^' || x[i][j] == 'v')
				{
					int t;
					if(x[i][j] == '<')
					{
						t = 2;
					}
					else if(x[i][j] == '>')
					{
						t = 0;
					}
					else if(x[i][j] == '^')
					{
						t = 3;
					}
					else
					{
						t = 1;
					}
					lasers.push_back(make_pair(make_pair(i,j),t));
				}
			}
		}

		generate();
		DFS(start.first,start.second,0);

		int numberOfMoves = INT_MAX;
		for(int i=0;i<4;i++)
		{
			if(y[end.first][end.second][i] != -1 && y[end.first][end.second][i] < numberOfMoves)
			{
				numberOfMoves = y[end.first][end.second][i];
			}
		}

		if(numberOfMoves == INT_MAX)
		{
			cout << "Case #" << aaaa << ": impossible" << endl;
		}
		else
		{
			cout << "Case #" << aaaa << ": " << numberOfMoves << endl;
		}

	}
}
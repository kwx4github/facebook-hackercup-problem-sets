#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <fstream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
int main1()
{
	ifstream cin("cooking_the_books.txt");
	ofstream cout("cooking_the_book.txt");
	int t,cse;
	cin>>t;
	for(cse=1;cse<=t;cse++)
	{
		string s;
		cin>>s;
		int i,j,l=s.length();
		string mins=s;
		string maxs=s;
		for(i=0;i<l;i++)
		{
			for(j=i+1;j<l;j++)
			{
				string ss=s;
				char ch=ss[i];
				ss[i]=ss[j];
				ss[j]=ch;
				if(ss[0]!='0')
				{
					if(ss>maxs)maxs=ss;
					if(ss<mins)mins=ss;
				}
			}
		}
		cout<<"Case #"<<cse<<": "<<mins<<" "<<maxs<<endl;
	}
	return 0;
}
struct Food
{
	int p,c,f;
}food[40];
int main2()
{
	freopen("in2.txt","r",stdin);
	freopen("out2.txt","w",stdout);
	int T,cse,i,Gp,Gc,Gf,n,maxi,j,gp,gc,gf,k,flag;
	scanf("%d",&T);
	for(cse=1;cse<=T;cse++)
	{
		scanf("%d%d%d",&Gp,&Gc,&Gf);
		scanf("%d",&n);
		memset(food,0,sizeof food);
		for(i=0;i<n;i++)scanf("%d%d%d",&food[i].p,&food[i].c,&food[i].f);
		maxi = (1 << n);
		flag = 0;
		for(i=1;i<maxi;i++)
		{
			j = i;
			gp = gc = gf = k = 0;
			while(j)
			{
				if(j & 1)
				{
					gp += food[k].p;
					gc += food[k].c;
					gf += food[k].f;
					if(gp > Gp || gc > Gc || gf > Gf)break;
				}
				j  >>= 1;
				k++;
			}
			if(gp == Gp && gc == Gc && gf == Gf)
			{
				flag = 1;
				break;
			}
		}
		printf("Case #%d: %s\n",cse,flag ? "yes" : "no");
	}
	fclose(stdin);
	fclose(stdout);
	return 0;
}
struct St
{
	int x,y,stp;
}H,tmp;
queue<St>Q;
int m,n,sx,sy,gx,gy;
char Map[233][233];
bool vis[10][233][233];
const int dx[] = {-1, 0,+1, 0};
const int dy[] = { 0,+1, 0,-1};
inline int dir(char x)
{
	switch(x)
	{
	case '^':return 0;
	case '>':return 1;
	case 'v':return 2;
	case '<':return 3;
	default:return -1;
	}
}
bool safe(St st)
{
	if(1 <= st.x && st.x <= m && 1 <= st.y && st.y <= n && Map[st.x][st.y] == '.' && !vis[st.stp % 4][st.x][st.y])
	{
		int i,j,k;
		for(i=1;i<st.x;i++)
		{
			k = dir(Map[i][st.y]);
			if(k == -1)continue;
			if((k + st.stp) % 4 == 2)return false;
		}
		for(j=n;j>st.y;j--)
		{
			k = dir(Map[st.x][j]);
			if(k == -1)continue;
			if((k + st.stp) % 4 == 3)return false;
		}
		for(i=m;i>st.x;i--)
		{
			k = dir(Map[i][st.y]);
			if(k == -1)continue;
			if((k + st.stp) % 4 == 0)return false;
		}
		for(j=1;j<st.y;j++)
		{
			k = dir(Map[st.x][j]);
			if(k == -1)continue;
			if((k + st.stp) % 4 == 1)return false;
		}
		return true;
	}
	else return false;
}
int main()
{
	int i,j,t,cse,k,ans;
	freopen("in3.txt","r",stdin);
	freopen("out3.txt","w",stdout);
	scanf("%d",&t);
	for(cse=1;cse<=t;cse++)
	{
		scanf("%d%d",&m,&n);
		for(i=1;i<=m;i++)
			scanf("%s",Map[i] + 1);
		sx = sy = gx = gy = 0;
		for(i=1;i<=m && (sx == 0 || gx == 0);i++)
			for(j=1;j<=n && (sy == 0 || gy == 0);j++)
				if(Map[i][j] == 'S')
					sx = i,sy = j,Map[i][j] = '.';
				else
				if(Map[i][j] == 'G')
					gx = i,gy = j,Map[i][j] = '.';
		memset(vis,0,sizeof vis);
		while(!Q.empty())Q.pop();
		tmp.x = sx;
		tmp.y = sy;
		tmp.stp = 0;
		Q.push(tmp);
		vis[0][tmp.x][tmp.y] = true;
		ans = -1;
		while(!Q.empty())
		{
			H = Q.front();
			if(H.x == gx && H.y == gy)
			{
				ans = H.stp;
				break;
			}
			Q.pop();
			vis[H.stp % 4][H.x][H.y] = true;
			for(k=0;k<4;k++)
			{
				tmp.x = H.x + dx[k];
				tmp.y = H.y + dy[k];
				tmp.stp = H.stp + 1;
				if(safe(tmp))
				{
					Q.push(tmp);
				}
			}
		}
		printf("Case #%d: ",cse);
		if(ans == -1)
			puts("impossible");
		else
			printf("%d\n",ans);
	}
	fclose(stdin);
	fclose(stdout);
	return 0;
}
#include<ctime>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<string>
#include<vector>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<set>
#include<map>
#include<numeric>
#include<cmath>
#include<locale>
using namespace std;
#define all(x) (x).begin(),(x).end()
#define sz(a) (int((a).size()))
typedef istringstream iss; typedef ostringstream oss; typedef long long lli;
int R,C;
string grid[101];
int dr[] = {0,1,0,-1}; // Right, Down, Left, Up
int dc[] = {1,0,-1,0}; // >, v, <, ^
bool forbidden[4][101][101];

bool valid(int r, int c)
{
    if(r<0 || r>=R || c<0 || c>=C) return false;
    return true;
}

int getDir(char dir)
{
    if(dir=='>') return 0;
    if(dir=='v') return 1;
    if(dir=='<') return 2;
    if(dir=='^') return 3;
    return -1;
}

void markForbidden(int step, int r, int c, int dir)
{
    while(true)
    {
        r+=dr[dir], c+=dc[dir];
        if(!valid(r,c)) break;
        if(grid[r][c]=='#' || getDir(grid[r][c])>=0) break;
        forbidden[step][r][c]=true;
    }
}
const int MAXCOST = 100000;
bool visited[MAXCOST+11][101][101];

struct data
{
    int r,c,cost;
    data(int rr,int cc,int co)
    {
        r=rr; c=cc; cost=co;
    }
};

int bfs(int sr,int sc)
{
    memset(visited,0,sizeof visited);
    queue<data> q;
    q.push(data(sr,sc,0));
    while(!q.empty())
    {
        int r = q.front().r, c=q.front().c, cost=q.front().cost;
        q.pop();
        if(cost && forbidden[cost%4][r][c]) continue;
        if(grid[r][c]=='#' || getDir(grid[r][c])>=0) continue;
        if(grid[r][c]=='G') return cost;
        if(cost>MAXCOST) continue;
        if(visited[cost][r][c]) continue;
        visited[cost][r][c] = true;

        for(int i=0;i<4 && cost<MAXCOST;i++)
        {
            int nr = r + dr[i], nc = c + dc[i];
            if(!valid(nr,nc)) continue;
            if(visited[cost+1][nr][nc]) continue;
            if(forbidden[(cost+1)%4][nr][nc]) continue;
            if(grid[nr][nc]=='#' || getDir(grid[nr][nc])>=0) continue;
            q.push(data(nr,nc,cost+1));
        }
    }
    return -1;
}

int main()
{
    int T;
    cin>>T;
    int cn=0;
    while(T--)
    {
        cin>>R>>C;
        for(int i=0;i<R;i++) cin>>grid[i];

        memset(forbidden, 0 , sizeof forbidden);
        for(int i=0;i<R;i++) for(int j=0;j<C;j++) if(getDir(grid[i][j])!=-1)
        {
            for(int step=0;step<4;step++) markForbidden(step,i,j,(getDir(grid[i][j])+step)%4);
        }
        int sr, sc;
        for(int i=0;i<R;i++) for(int j=0;j<C;j++) if(grid[i][j]=='S')
        {
            sr=i; sc=j;
        }
        int cost = bfs(sr,sc);
        printf("Case #%d: ",++cn);
        if(cost>=0) printf("%d\n",cost);
        else printf("impossible\n");
    }

}

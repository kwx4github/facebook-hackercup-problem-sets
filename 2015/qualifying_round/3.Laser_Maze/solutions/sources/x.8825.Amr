#include <bits/stdc++.h>

using namespace std;

#define ll 		long long
#define mp 		make_pair
#define sz(v) 	(int)v.size()
#define pb    	push_back
#define b_p(n)		__builtin_popcount(n)
#define s second
#define f first

int dir1[] = { 1, 0, 0, -1 };
int dir2[] = { 0, 1, -1, 0 };
char enm[] = { '>', 'v', '<', '^' };
map<char, int> Map;
int vis[109][109];
char maze[109][109];

bool safe(pair<int, int> p, int row, int col, int time) {
	if (p.f < 0 || p.f >= row || p.s < 0 || p.s >= col)
		return false;
	for (int i = 0; i < 4; i++)
		if (maze[p.f][p.s] == enm[i])
			return false;
	if (maze[p.f][p.s] == '#')
		return false;

	if (vis[p.f][p.s] >= 2)
		return false;

	for (int i = p.f + 1; i < row; i++) {
		if (maze[i][p.s] == '.')
			continue;
		if (maze[i][p.s] == '#')
			break;
		char z = enm[(Map[maze[i][p.s]] + time) % 4];
		if (z == '^')
			return false;
	}

	for (int i = p.f - 1; i >= 0; i--) {
		if (maze[i][p.s] == '.')
			continue;
		if (maze[i][p.s] == '#')
			break;
		char z = enm[(Map[maze[i][p.s]] + time) % 4];
		if (z == 'v')
			return false;
	}

	for (int i = p.s - 1; i >= 0; i--) {
		if (maze[p.f][i] == '.')
			continue;
		if (maze[p.f][i] == '#')
			break;
		char z = enm[(Map[maze[p.f][i]] + time) % 4];
		if (z == '>')
			return false;
	}

	for (int i = p.s + 1; i < col; i++) {
		if (maze[p.f][i] == '.')
			continue;
		if (maze[p.f][i] == '#')
			break;
		char z = enm[(Map[maze[p.f][i]] + time) % 4];
		if (z == '<')
			return false;
	}
	return true;

}
int main() {
	freopen("laser_maze.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	for (int i = 0; i < 4; i++)
		Map[enm[i]] = i;
	int nt;
	cin >> nt;
	for (int c = 1; c <= nt; c++) {
		int row, col;
		pair<int, int> tg;
		queue<pair<int, pair<int, int> > > q;
		memset(vis, 0, sizeof(vis));
		memset(maze, 0, sizeof(maze));

		cin >> row >> col;
		for (int i = 0; i < row; i++)
			for (int j = 0; j < col; j++) {
				cin >> maze[i][j];
				if (maze[i][j] == 'S')
					q.push(mp(0, mp(i, j))), maze[i][j] = '.',vis[i][j]=1;
				if (maze[i][j] == 'G')
					tg.f = i, tg.s = j, maze[i][j] = '.';
			}
		cout << "Case #" << c << ": ";
		while (!q.empty()) {
			pair<int, pair<int, int> > point = q.front();
			if (point.s == tg) {
				cout << point.f;
				goto ss;
			}
			q.pop();
			for (int i = 0; i < 4; i++) {
				pair<int, int> p1 = mp(point.s.f + dir1[i],
						point.s.s + dir2[i]);
				if (!safe(p1, row, col, point.f + 1))
					continue;
				vis[p1.f][p1.s]++;
				q.push( mp(point.f + 1, p1));
			}
		}
		cout << "impossible";
		ss: if (c != nt)
			cout << endl;
	}

	return 0;
}

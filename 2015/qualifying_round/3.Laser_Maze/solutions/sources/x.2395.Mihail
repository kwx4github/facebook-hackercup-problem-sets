#include <iostream>
#include <cstdio>
#include <utility>
using namespace std;

#define INF 2000000000

char m[4][100][100];
int v[4][100][100];
int T, N, M;

pair<int, int> start;
pair<int, int> goal;

char directions[] = { '^', '>', 'v', '<' };

inline int isLaser(char x) {
    for (int i = 0; i < 4; i++) {
        if (directions[i] == x) {
            return i;
        }
    }
    return -1;
}

void expand(int dim, int x, int y) {
    if (x - 1 >= 0) {
        if ((m[(dim + 1) % 4][x - 1][y] == '.') && (v[(dim + 1) % 4][x - 1][y] > v[dim][x][y] + 1)) {
            v[(dim + 1) % 4][x - 1][y] = v[dim][x][y] + 1;
            expand((dim + 1) % 4, x - 1, y);
        }
    }
    if (x + 1 < M) {
        if ((m[(dim + 1) % 4][x + 1][y] == '.') && (v[(dim + 1) % 4][x + 1][y] > v[dim][x][y] + 1)) {
            v[(dim + 1) % 4][x + 1][y] = v[dim][x][y] + 1;
            expand((dim + 1) % 4, x + 1, y);
        }
    }
    if (y - 1 >= 0) {
        if ((m[(dim + 1) % 4][x][y - 1] == '.') && (v[(dim + 1) % 4][x][y - 1] > v[dim][x][y] + 1)) {
            v[(dim + 1) % 4][x][y - 1] = v[dim][x][y] + 1;
            expand((dim + 1) % 4, x, y - 1);
        }
    }
    if (y + 1 < N) {
        if ((m[(dim + 1) % 4][x][y + 1] == '.') && (v[(dim + 1) % 4][x][y + 1] > v[dim][x][y] + 1)) {
            v[(dim + 1) % 4][x][y + 1] = v[dim][x][y] + 1;
            expand((dim + 1) % 4, x, y + 1);
        }
    }
    /*if (v[(dim + 1) % 4][x][y] > v[dim][x][y] + 1) {
        v[(dim + 1) % 4][x][y] = v[dim][x][y] + 1;
        expand((dim + 1) % 4, x, y);
    }*/
}

int main() {
    freopen("input.in", "r", stdin);
    freopen("output.out", "w", stdout);
    cin >> T;
    for (int t = 0; t < T; ++t) {
        cin >> M >> N;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                cin >> m[0][i][j];
                if (m[0][i][j] == 'S') {
                    m[0][i][j] = '.';
                    start = make_pair(i, j);
                }
                if (m[0][i][j] == 'G') {
                    m[0][i][j] = '.';
                    goal = make_pair(i, j);
                }

                for (int k = 0; k < 4; k++) {
                    v[k][i][j] = INF;
                }
                for (int k = 1; k < 4; k++) {
                    m[k][i][j] = m[0][i][j];
                }
                int laserDirection = isLaser(m[0][i][j]);
                if (laserDirection >= 0) {
                    for (int k = 1; k < 4; k++) {
                        m[k][i][j] = directions[(laserDirection + k) % 4];
                    }
                }
            }
        }

        for (int k = 0; k < 4; k++) {
            for (int i = 0; i < M; i++) {
                for (int j = 0; j < N; j++) {
                    switch(isLaser(m[k][i][j])) {
                        case 0: {
                            int x = i - 1;
                            while ((x >= 0) && (m[k][x][j] == '.' || m[k][x][j] == 'S' || m[k][x][j] == 'G')) {
                                    m[k][x][j] = 'x';
                                    x--;
                            }
                            break;
                        }
                        case 1: {
                            int x = j + 1;
                            while ((x < N) && (m[k][i][x] == '.' || m[k][i][x] == 'S' || m[k][i][x] == 'G')) {
                                    m[k][i][x] = 'x';
                                    x++;
                            }
                            break;
                        }
                        case 2: {
                            int x = i + 1;
                            while ((x < M) && (m[k][x][j] == '.' || m[k][x][j] == 'S' || m[k][x][j] == 'G')) {
                                    m[k][x][j] = 'x';
                                    x++;
                            }
                            break;
                        }
                        case 3: {
                            int x = j - 1;
                            while ((x >= 0) && (m[k][i][x] == '.' || m[k][i][x] == 'S' || m[k][i][x] == 'G')) {
                                    m[k][i][x] = 'x';
                                    x--;
                            }
                            break;
                        }
                    }
                }
            }
        }

        v[0][start.first][start.second] = 0;

        expand(0, start.first, start.second);

        int mv = INF;

        for (int k = 0; k < 4; k++) {
            if (v[k][goal.first][goal.second] != -1 && mv > v[k][goal.first][goal.second]) {
                mv = v[k][goal.first][goal.second];
            }
        }

        if (mv == INF) {
            cout << "Case #" << (t + 1) << ": " << "impossible" << endl;
        } else {
            cout << "Case #" << (t + 1) << ": " <<  mv << endl;
        }


        /*for (int k = 0; k < 4; k++) {
            for (int i = 0; i < M; i++) {
                cout << m[k][i] << endl;
            }
            cout << endl;
        }*/

        /*for (int k = 0; k < 4; k++) {
            for (int i = 0; i < M; i++) {
                for (int j = 0; j < N; j++) {
                    cout << v[k][i][j] << " ";
                }
                cout << endl;
            }
            cout << endl;
        }*/
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <sstream>
using namespace std;

const int maxl = 100 + 4;
const int dx[] = {1, 0, -1, 0};
const int dy[] = {0, -1, 0, 1};
struct node {
	int x, y;
	int l;
};
int sx, sy, gx, gy;
int h, w;
char a[maxl][maxl];
bool b[4][maxl][maxl];
int dis[maxl][maxl][4];
node q[maxl * maxl * 4];
int ans;

void init() {
	scanf("%d %d\n", &h, &w);
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			scanf("%c", &a[i][j]);
			if (a[i][j] == 'v') {
				a[i][j] = 0;
			} else if (a[i][j] == '<') {
				a[i][j] = 1;
			} else if (a[i][j] == '^') {
				a[i][j] = 2;
			} else if (a[i][j] == '>') {
				a[i][j] = 3;
			} else if (a[i][j] == 'S') {
				sx = i; sy = j;
			} else if (a[i][j] == 'G') {
				gx = i; gy = j;
			}
		}
		scanf("\n");
	}
}

void preprocess() {
	memset(b, 0, sizeof(b));
	for (int d = 0; d < 4; d++) {
		for (int i = 0; i < h; i++) 
			for (int j = 0; j < w; j++) {
				if (a[i][j] == '#')
					b[d][i][j] = true;
				else if (a[i][j] < 4) {
					b[d][i][j] = true;
					int cx = i, cy = j;
					int k = (a[i][j] + d) % 4;
					while (true) {
						cx += dx[k];
						cy += dy[k];
						if (cx < 0 || cx >= h || cy < 0 || cy >= w) break;
						if (a[cx][cy] == '#' || a[cx][cy] < 4) break;
						b[d][cx][cy] = true;
					}
				}
			}
	}
}

void solve() {
	preprocess();
	ans = -1;
	int hd = 0, tl = 1;
	q[1].x = sx; q[1].y = sy; q[1].l = 0;
	while (hd++ < tl) {
		int cx = q[hd].x;
		int cy = q[hd].y;
		int cl = q[hd].l;		
		int st = (cl + 1) % 4;
		for (int k = 0; k < 4; k++) {
			int tx = cx + dx[k];
			int ty = cy + dy[k];
			if (tx < 0 || ty < 0 || tx >= h || ty >= w || b[st][tx][ty]) continue;
			b[st][tx][ty] = true;
			tl++;
			q[tl].x = tx;
			q[tl].y = ty;
			q[tl].l = cl + 1;
			if (tx == gx && ty == gy) {
				ans = cl + 1;
				break;
			}
		}
		if (ans >= 0) break;
	}	
}

int main() {
	int T;
	scanf("%d\n", &T);
	for (int t = 1; t <= T; t++) {
		init();
		solve();
		if (ans < 0)
			printf("Case #%d: impossible\n", t);
		else printf("Case #%d: %d\n", t, ans);
	}
}

#include <bits/stdc++.h>
#define MP make_pair
#define PB push_back
#define int long long
#define st first
#define nd second
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define RE(i, n) FOR(i, 1, n)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#ifdef LOCAL
#define debug(x) {cerr <<#x<<" = " <<x<<"\n"; }
#define debug2(x, y) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<"\n";}
#define debug3(x, y, z) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<"\n";}
#define debug4(x, y, z, t) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<", "<<#t <<" = " <<t<<"\n";}
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<"\n"; }}
#else
#define debug(x)
#define debug2(x, y)
#define debug3(x, y, z)
#define debug4(x,y,z,t)
#define debugv(x)
#define cerr if(0)cout
#endif
#define make(type, x) type x; cin>>x;
#define make2(type, x, y) type x, y; cin>>x>>y;
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z;
#define make4(type, x, y, z, t) type x, y, z, t; cin>>x>>y>>z>>t;
#define next ____next
#define prev ____prev
#define left ____left
#define hash ____hash
using namespace std;
typedef long long ll;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
typedef vector<int> VI;
typedef vector<ll> VLL;
typedef vector<pair<int, int> > VPII;
typedef vector<pair<ll, ll> > VPLL;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.first << ", " << pair.second << ")";}
template<class A, class B, class C> struct Triple { A first; B second; C third; };
template<class T> void ResizeVec(T&, vector<int>) {}
template<class T> void ResizeVec(vector<T>& vec, vector<int> sz) {
  vec.resize(sz[0]); sz.erase(sz.begin()); if (sz.empty()) { return; }
  for (T& v : vec) { ResizeVec(v, sz); }
}

int di[] = {0, 1, 0, -1};
int dj[] = {1, 0, -1, 0};

struct Sol {
  int n, m;
  vector<vector<char>> board;
  bool Valid(int i, int j) {
    return (board[i][j] == '.' || board[i][j] == 'S' || board[i][j] == 'G');
  }
  static const int kInf = 1e6 + 5;
  void Test() {
    cin>>n>>m;
    ResizeVec(board, {n + 2, m + 2});
    int dis[n + 2][m + 2][4];
    int can[n + 2][m + 2][4];
    int g_i, g_j;
    vector<Triple<int, int, int>> que;
    RE (i, n) {
      RE (j, m) {
        REP (tr, 4) {
          can[i][j][tr] = 1;
          dis[i][j][tr] = kInf;
        }
        make(char, c);
        board[i][j] = c;
        if (c == 'S') {
          que.PB({i, j, 0});
          dis[i][j][0] = 0;
        } else if (c == 'G') {
          g_i = i;
          g_j = j;
        }
      }
    }
    RE (i, n) {
      RE (j, m) {
        auto c = board[i][j];
        if (c == '.' || c == 'S' || c == 'G') { continue; }
        REP (tr, 4) {
          can[i][j][tr] = 0;
        }
        if (c == '#') { continue; }
        int st_dir = 0; // c == '>'
        if (c == 'v') { st_dir = 1; }
        if (c == '<') { st_dir = 2; }
        if (c == '^') { st_dir = 3; }
        REP (tr, 4) {
          int act_i = i;
          int act_j = j;
          int act_dir = (st_dir + tr) % 4;
          do {
            can[act_i][act_j][tr] = 0;
            act_i += di[act_dir];
            act_j += dj[act_dir];
          } while (Valid(act_i, act_j));
        }
      }
    }
    for (int ii = 0; ii < SZ(que); ii++) {
      auto v = que[ii];
      REP (dir, 4) {
        int n_i = v.st + di[dir];
        int n_j = v.nd + dj[dir];
        int n_rest = (v.third + 1) % 4;
        if (Valid(n_i, n_j) && can[n_i][n_j][n_rest] && dis[n_i][n_j][n_rest] == kInf) {
          que.PB({n_i, n_j, n_rest});
          if (n_i == g_i && n_j == g_j) {
            cout<<dis[v.st][v.nd][v.third] + 1<<"\n";
            return;
          }
          dis[n_i][n_j][n_rest] = dis[v.st][v.nd][v.third] + 1;
        }
      }
    }
    cout<<"impossible\n";
  }
  
};

#undef int
int main() {
#define int long long

  ios_base::sync_with_stdio(0);
  cout << fixed << setprecision(10);
  double beg_clock = 1.0 * clock() / CLOCKS_PER_SEC;
  
  make(int, t);
  RE (tt, t) {
    cout<<"Case #"<<tt<<": ";
    Sol sol;
    sol.Test();
  }

  return 0;
}

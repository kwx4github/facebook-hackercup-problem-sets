#include <iostream>
#include<set>
#include<queue>
#include<stack>
#include<stdlib.h>
#include<math.h>
#include<stdio.h>
#include<string.h>
#include<fstream>
using namespace std;
#define REP(a, b, c) for(int a = b; a < c; a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
typedef long long LL;
typedef pair<int,int> ii;
typedef pair<ii, int> iii;

const int MAX = 102;

string G[MAX];
int vis[MAX][MAX][4], N, M;
int FREE[MAX][MAX][4];
int dis[MAX][MAX][4];
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

bool valid(int x, int y){
    return x >= 0 and x < N and y >= 0 and y < M;
}

void transform(){
    REP(i, 0, N) REP(j, 0, M){
        if(G[i][j] == '^') G[i][j]= '>';
        else if(G[i][j] == '>') G[i][j]= 'v';
        else if(G[i][j] == 'v') G[i][j]= '<';
        else if(G[i][j] == '<') G[i][j]= '^';
    }
}

int fill(int x, int y, int t, int dir){
    FREE[x][y][t] = 1;
    int X = x + dx[dir], Y = y + dy[dir];
    if(valid(X, Y) and ( G[X][Y] == '.' or G[X][Y] == 'S' or G[X][Y] == 'G') ) fill(X, Y, t, dir);
}

int solve(){
    
    memset(FREE, 0, sizeof FREE);
    memset(vis, 0, sizeof vis);

    REP(t, 0, 4){
        REP(i, 0, N) REP(j, 0, M){
            if(G[i][j] == '^') fill(i, j, t, 0);
            if(G[i][j] == 'v') fill(i, j, t, 1);
            if(G[i][j] == '<') fill(i, j, t, 2);
            if(G[i][j] == '>') fill(i, j, t, 3);
        }
        transform();
    }


    queue<iii> q;
    REP(i, 0, N) REP(j, 0, M) if(G[i][j] == 'S'){
        q.push(iii(ii(i, j), 0));
        dis[i][j][0] = 0;
        vis[i][j][0] = 1;
    }
    

    while( !q.empty() ){

        iii node = q.front(); q.pop();
        int x = node.first.first, y = node.first.second, t = node.second;
        if(G[x][y] == 'G') return dis[x][y][t];

        REP(i, 0, 4){
            int X = x + dx[i], Y = y + dy[i];
            if(valid(X, Y) and G[X][Y] != '#' and not FREE[X][Y][(t + 1) % 4] and  not vis[X][Y][(t + 1) % 4]){
                q.push(iii(ii(X, Y), (t + 1) % 4));
                dis[X][Y][(t + 1) % 4] = dis[x][y][t] + 1;
                vis[X][Y][(t + 1) % 4] = 1;
            }
        }
    }
    return -1;
}


int main(){

ofstream myfile3;
	ifstream in("in.txt");
	myfile3.open("out.txt");
    int test;
    in >> test;
    int c=0;
    while(test --> 0){
    	
    	myfile3<<"Case #"<<c+1<<": ";
    	c++;
        in >> N >> M;
        REP(i, 0, N) in >> G[i];
        int ans = solve();
        if(ans == -1) myfile3<< "impossible" << endl;
        else myfile3<< ans << endl;
    }
    return 0;
}

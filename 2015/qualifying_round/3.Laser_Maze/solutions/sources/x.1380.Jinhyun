#include<stdio.h>
#include<queue>
#include<algorithm>

using namespace std;

int T;
int N, M;
int D[111][111][4];
char A[111][111];

const int INF = 1000000000;

queue<int> QX, QY, QZ;

int DX[4] = {-1, 0, 1, 0};
int DY[4] = {0, 1, 0, -1};

int main(void)
{
	int l0, l1, l2, l3, l4, l5, l6, dir;

	scanf("%d", &T);
	for(l0 = 1; l0 <= T; l0++)
	{
		scanf("%d %d", &N, &M);
		for(l1 = 0; l1 < N; l1++) scanf("%s", A[l1]);

		while(!QX.empty()) QX.pop();
		while(!QY.empty()) QY.pop();
		while(!QZ.empty()) QZ.pop();

		for(l1 = 0; l1 < N; l1++) for(l2 = 0; l2 < M; l2++)
		{
			for(l3 = 0; l3 < 4; l3++) D[l1][l2][l3] = -1;
			if(A[l1][l2] == 'S')
			{
				for(l3 = 0; l3 < 4; l3++) D[l1][l2][l3] = INF;
				D[l1][l2][0] = 0;
				QX.push(l1);
				QY.push(l2);
				QZ.push(0);
			}
			else if(A[l1][l2] == '.' || A[l1][l2] == 'G')
			{
				for(l3 = 0; l3 < 4; l3++) D[l1][l2][l3] = INF;
			}
		}

		for(l1 = 0; l1 < N; l1++) for(l2 = 0; l2 < M; l2++)
		{
			dir = -1;

			if(A[l1][l2] == '^') dir = 0;
			else if(A[l1][l2] == '>') dir = 1;
			else if(A[l1][l2] == 'v') dir = 2;
			else if(A[l1][l2] == '<') dir = 3;

			if(dir == -1) continue;

			for(l5 = 0; l5 < 4; l5++)
			{
				l3 = l1;
				l4 = l2;
				while(1)
				{
					l3 += DX[dir];
					l4 += DY[dir];
					if(l3 < 0 || l4 < 0 || l3 >= N || l4 >= M) break;
					if(A[l3][l4] == '#' || A[l3][l4] == '^' || A[l3][l4] == '>' || A[l3][l4] == 'v' || A[l3][l4] == '<') break;
					D[l3][l4][l5] = -1;
				}
				dir = (dir + 1) & 3;
			}
		}

		for(l1 = 0; l1 < N; l1++) for(l2 = 0; l2 < M; l2++)
		{
			if(A[l1][l2] == 'S')
			{
				for(l3 = 0; l3 < 4; l3++) D[l1][l2][l3] = INF;
				D[l1][l2][0] = 0;
				QX.push(l1);
				QY.push(l2);
				QZ.push(0);
			}
		}

		while(!QX.empty())
		{
			l1 = QX.front();
			l2 = QY.front();
			l3 = QZ.front();
			QX.pop();
			QY.pop();
			QZ.pop();
//			printf("%d %d %d %d\n", l1, l2, l3, D[l1][l2][l3]);

			int curr_time = D[l1][l2][l3];
			l6 = (l3 + 1) & 3;

			for(dir = 0; dir < 4; dir++)
			{
				l4 = l1 + DX[dir];
				l5 = l2 + DY[dir];
				if(D[l4][l5][l6] > curr_time + 1)
				{
					D[l4][l5][l6] = curr_time + 1;
					QX.push(l4);
					QY.push(l5);
					QZ.push(l6);
				}
			}
		}

		int ret = INF;
		for(l1 = 0; l1 < N; l1++) for(l2 = 0; l2 < M; l2++) if(A[l1][l2] == 'G') for(l3 = 0; l3 < 4; l3++)
		{
			if(D[l1][l2][l3] == -1) continue;
			if(D[l1][l2][l3] < ret) ret = D[l1][l2][l3];
		}

		if(ret == INF) printf("Case #%d: impossible\n", l0);
		else printf("Case #%d: %d\n", l0, ret);
	}

	return 0;
}

#include <bits/stdc++.h>
using namespace std;
#define fr(a,b,c) for(int a = b; a < c; a++)
#define rp(a,b) fr(a,0,b)
#define fre(a,b) for(int a = adj[b]; ~a; a = ant[a])
#define sc(a) scanf("%d", &a)
#define sc2(a,b) scanf("%d%d", &a, &b)
#define sc3(a,b,c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define cl(a,b) memset(a,b,sizeof a)
#define pb push_back
#define mp make_pair

#define isLaser(x) (x=='^' || x=='>' || x=='v' || x=='<')

#define st first
#define nd second

typedef long long ll;

char l[] = {'^', '>', 'v', '<'};
int fi[300];

int di[] = {-1, 0, 1, 0};
int dj[] = {0, 1, 0, -1};

char g[110][110];
char h[110][110];
bool attack[4][110][110];

int n, m;

bool can(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < m && (g[i][j] == '.' || g[i][j] == 'G');
}

void gen() {
	rp(i,n) rp(j,m+1) h[i][j] = g[i][j];

	cl(attack, 0);

	rp(k,4) {
		rp(i,n) rp(j,m) if (isLaser(h[i][j])) {
			int nk = fi[h[i][j]];
			int ni = i + di[nk], nj = j + dj[nk];
			while (can(ni,nj)) {
				attack[k][ni][nj] = 1;
				ni += di[nk];
				nj += dj[nk];
			}
		}

		/*rp(i,n) printf("%s\n", h[i]);
		rp(i,n) {
			rp(j,m) printf("%d", attack[k][i][j]);
			puts("");
		}
		puts("");*/
 
		rp(i,n) rp(j,m) if (isLaser(h[i][j])) {
			int nk = fi[h[i][j]];
			h[i][j] = l[(nk+1)&3];
		}
	}
}

int fila[1200000], ini, fim;
int cost[4][110][110];
int bfs(int i, int j) {
	ini = fim = 0;
	fila[fim++] = i;
	fila[fim++] = j;
	fila[fim++] = 0;

	cl(cost,-1);
	cost[0][i][j] = 0;

	while (ini < fim) {
		i = fila[ini++];
		j = fila[ini++];
		int d = fila[ini++];
		int nd = (d+1)&3;

		//printf("%d %d %d\n", i, j, d);

		if (g[i][j] == 'G') {
			return cost[d][i][j];
		}

		rp(k,4) {
			int ni = i + di[k];
			int nj = j + dj[k];

			if (can(ni,nj) && !attack[nd][ni][nj] && cost[nd][ni][nj] == -1) {
				cost[nd][ni][nj] = cost[d][i][j] + 1;
				fila[fim++] = ni;
				fila[fim++] = nj;
				fila[fim++] = nd;
			}
		}
	}
	return -1;
}

int main() {
	fi['^'] = 0;
	fi['>'] = 1;
	fi['v'] = 2;
	fi['<'] = 3;

	int cas = 1;
	int T; sc(T);
	while (T--) {
		sc2(n,m);
		rp(i,n) scs(g[i]);
		int fi, fj;
		rp(i,n) rp(j,m) if (g[i][j] == 'S') {
			g[i][j] = '.';
			fi = i;
			fj = j;
			break;
		}
		gen();
		int ans = bfs(fi,fj);
		printf("Case #%d: ", cas++);
		if (ans == -1) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}
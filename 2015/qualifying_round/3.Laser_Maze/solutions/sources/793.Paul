#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>

using namespace std;

ofstream fout("../../../output.txt");
ifstream fin("../../../input.txt");


bool isok[100][100][4];

int dolis[100000][3];
int minmoves[100][100][4];

int px[4]={-1,0,1,0};
int py[4]={0,1,0,-1};
    
char board[100][100];


int main(void)
{
    int ttt;
    fin >> ttt;
    int ct = 0;
    
    cout.precision(9);
    fout.precision(9);
    
    cout << "HELLO" <<  " " << ttt << endl;
    
    
    
    while(ttt>0)
    {
        ct++;
        ttt--;
        
        string s;
        
        memset(isok,0,sizeof(isok));

        memset(minmoves,0,sizeof(minmoves));
        int m,n;
        
        fin >> m >> n;
        
        int i,j,k;
        
        int sx,sy,ex,ey;
        
        sx=sy=ex=ey=0;
        
        for(i=0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                fin >> board[i][j];
                for(k=0; k<4; k++)
                {
                    isok[i][j][k]=true;
                }
                if(board[i][j]=='S')
                {
                    sx=i;
                    sy=j;
                    board[i][j]='.';
                }
                else if(board[i][j]=='G')
                {
                    ex=i;
                    ey=j;
                    board[i][j]='.';
                }
            }
        }
        
        for(i=0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                if(board[i][j]=='#')
                {
                    for(k=0; k<4; k++)
                    {
                        isok[i][j][k]=false;
                    }
                }
                else if(board[i][j]=='.')
                {
                    //boring
                }
                else
                {
                    int l=-1;
                    if(board[i][j]=='^')
                        l=0;
                    else if(board[i][j]=='>')
                        l=1;
                    else if(board[i][j]=='v')
                        l=2;
                    else if(board[i][j]=='<')
                        l=3;
                    
                    for(k=0; k<4; k++)
                    {
                        isok[i][j][k]=false;
                        
                        int cx=i;
                        int cy=j;
                        int dx = px[(l+k)%4];
                        int dy = py[(l+k)%4];
                        cx+=dx;
                        cy+=dy;
                        
                        while(cx>=0 && cx<m && cy>=0 && cy<n)
                        {
                            if(board[cx][cy]=='.')
                            {
                                isok[cx][cy][k]=false;
                                cx+=dx;
                                cy+=dy;
                                
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        for(k=0; k<4; k++)
        {
            for(i=0; i<m; i++)
            {
                for(j=0;j<n; j++)
                {
                    if(isok[i][j][k])
                        cout << '.';
                    else
                        cout << '#';
                }
                cout << endl;
            }
            cout << endl;
        }
        
        int readfrom,writeto;
        readfrom=0;
        writeto=1;
        minmoves[sx][sy][0]=4;
        dolis[0][0]=sx;
        dolis[0][1]=sy;
        dolis[0][2]=0;
        
        while(readfrom<writeto)
        {
            int cx = dolis[readfrom][0];
            int cy=dolis[readfrom][1];
            int cm = dolis[readfrom][2];
            
            int nm =(cm+1)%4;
            
            for(k=0; k<4; k++)
            {
                int nx = cx+px[k];
                int ny = cy+py[k];
                if(nx<0 || nx>=m || ny<0 || ny>=n || !isok[nx][ny][nm])
                    continue;
                if(minmoves[nx][ny][nm]==0)
                {
                    minmoves[nx][ny][nm]=minmoves[cx][cy][cm]+1;
                    dolis[writeto][0]=nx;
                    dolis[writeto][1]=ny;
                    dolis[writeto][2]=nm;
                    writeto++;
                }
            }
            readfrom++;
        }
        
        int ans = 1000000;
        
        for(k=0; k<4; k++)
        {
            if(minmoves[ex][ey][k]>0 && minmoves[ex][ey][k]<ans)
                ans=minmoves[ex][ey][k];
        }
        
        if(ans<1000000)
            ans-=4;
        
        
        cout << "Case #" << ct << ": ";
        fout << "Case #" << ct << ": ";
        
        if(ans<1000000)
        {
            cout << ans;
            fout << ans;
        }
        else{
            cout << "impossible";
            fout << "impossible";
        }
        
        
        
        
        
        fout << endl;
        cout << endl;
        
    }
    
    
    return 0;
}


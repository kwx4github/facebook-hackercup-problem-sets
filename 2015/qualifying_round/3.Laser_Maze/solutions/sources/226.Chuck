//By Lin
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <bitset>
#include <cmath>
#include <string>
#include <cstdlib>
#include <vector>
#include <queue>

#define X first
#define Y second
#define mp make_pair
#define sqr(x) ((x) * (x))
#define Rep(i, n) for(int i = 0; i<(n); i++)
#define foreach(it, n) for(__typeof(n.begin()) it = n.begin(); it != n.end(); it++)

using namespace std;
typedef long long LL;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;

#define esp 1e-8
#define N 110

int n, m;
char mat[N][N];
bool dp[4][N][N];
int mark[N][N];
int mm[4][2] = {-1, 0, 0, 1, 1, 0, 0, -1};
pii source, target;
vector<piii> lazers;

bool inR(int x, int y) {
	return 0 <= x && x < n && 0 <= y && y < m;
}

int solve() {
	queue<pii> que[2];
	int t = 0, g = 0, h = 1;
	que[0].push(source);
	while (!que[g].empty()) {
		t++;
		Rep(i, n) Rep(j, m) 
			if (mark[i][j] == 1) mark[i][j] = 0;
		Rep(k, lazers.size()) {
			int &dir = lazers[k].X;
			int x = lazers[k].Y.X, y = lazers[k].Y.Y;
			dir = (dir + 1) % 4;
			x += mm[dir][0], y += mm[dir][1];
			while (inR(x, y) && mark[x][y] != 2) {
				mark[x][y] = 1;
				x += mm[dir][0], y += mm[dir][1];
			}
		}
		while (!que[g].empty()) {
			int x = que[g].front().X, y = que[g].front().Y;
			que[g].pop();
			Rep(dir, 4) {
				int p = x + mm[dir][0], q = y + mm[dir][1];
				if (!inR(p, q) || mark[p][q] != 0 || dp[t%4][p][q]) continue;
				if (mp(p, q) == target) return t;
				dp[t%4][p][q] = true;
				que[h].push(mp(p, q));
			}
		}
		swap(g, h);
	}
	return -1;
}
int main() {
	int cas, tt = 0;
	scanf("%d", &cas);
	while (cas --) {
		scanf("%d%d", &n, &m);
		Rep(i, n) scanf("%s", mat[i]);
		lazers.clear();
		memset(mark, 0, sizeof mark);
		memset(dp, 0, sizeof dp);
		Rep(i, n) Rep(j, m) {
			mark[i][j] = 0;
			if (mat[i][j] == 'S') source = mp(i, j);
			else if (mat[i][j] == 'G') target = mp(i, j);
			else if (string("^>v<").find(mat[i][j]) != string::npos) {
				lazers.push_back(mp(string("^>v<").find(mat[i][j]), mp(i, j)));
				mark[i][j] = 2;
			}
			else if (mat[i][j] == '#')
				mark[i][j] = 2;
		}
		int result = solve();
		printf("Case #%d: ", ++tt);
		if (result == -1) puts("impossible");
		else printf("%d\n", result);
	}
	return 0;
}

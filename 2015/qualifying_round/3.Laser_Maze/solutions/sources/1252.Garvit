#include<cstdio>    			//_7
#include<cstring>
#include<string>
#include<queue>
#include<algorithm>
#include<utility>
#define part pair<int,int>
#define pi acos(-1)////cos-1(-1)=180*=pi
#define i64 __int64
#define EPS 1e-9
#define lld long long int
#define MOD 100000007
#define MAX 51
#define mem(ara,value) memset(ara,value,sizeof(ara))
 
using namespace std;
 
int fx[]={-1,1,0,0};
int fy[]={0,0,1,-1};
 
int main()
{
   	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int t,i,j,k,n,m,row,col,x1,x2,y1,y2,x,y,flag,visited[105][105][5],step[105][105];
	char str[105][105];
	scanf("%d",&t);
	for(k=1;k<=t;k++)
    {
        flag=0;
        mem(visited,0);
        mem(step,0);
        int countn=0;
        scanf("%d %d",&row,&col);
        for(i=0;i<row;i++)
        {
            scanf("%s",str[i]);
        }
        for(i=0;i<row;i++)
        {
            for(j=0;j<col;j++)
            {
                if(str[i][j]=='#')
                {
                    visited[i][j][0]=-1;
                    visited[i][j][1]=-1;
                    visited[i][j][2]=-1;
                    visited[i][j][3]=-1;
 
                }
                else if(str[i][j]=='^')
                {
                    //visited[i][j]=-1;
                    visited[i][j][0]=-1;
                    visited[i][j][1]=-1;
                    visited[i][j][2]=-1;
                    visited[i][j][3]=-1;
                    for(n=i-1;n>=0;n--)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][0]=-1;
                        else
                            break;
                    }
                    for(n=j+1;n<col;n++)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][1]=-1;
                        else
                            break;
                    }
                    for(n=i+1;n<row;n++)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][2]=-1;
                        else
                            break;
                    }
                    for(n=j-1;n>=0;n--)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][3]=-1;
                        else
                            break;
                    }
                }
                else if(str[i][j]=='v')
                {
                    //visited[i][j]=-1;
                    visited[i][j][0]=-1;
                    visited[i][j][1]=-1;
                    visited[i][j][2]=-1;
                    visited[i][j][3]=-1;
                    for(n=i-1;n>=0;n--)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][2]=-1;
                        else
                            break;
                    }
                    for(n=j+1;n<col;n++)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][3]=-1;
                        else
                            break;
                    }
                    for(n=i+1;n<row;n++)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][0]=-1;
                        else
                            break;
                    }
                    for(n=j-1;n>=0;n--)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][1]=-1;
                        else
                            break;
                    }
                }
                else if(str[i][j]=='>')
                {
                    //visited[i][j]=-1;
                    visited[i][j][0]=-1;
                    visited[i][j][1]=-1;
                    visited[i][j][2]=-1;
                    visited[i][j][3]=-1;
                    for(n=i-1;n>=0;n--)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][3]=-1;
                        else
                            break;
                    }
                    for(n=j+1;n<col;n++)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][0]=-1;
                        else
                            break;
                    }
                    for(n=i+1;n<row;n++)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][1]=-1;
                        else
                            break;
                    }
                    for(n=j-1;n>=0;n--)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][2]=-1;
                        else
                            break;
                    }
                }
                else if(str[i][j]=='<')
                {
                    //visited[i][j]=-1;
                    visited[i][j][0]=-1;
                    visited[i][j][1]=-1;
                    visited[i][j][2]=-1;
                    visited[i][j][3]=-1;
                    for(n=i-1;n>=0;n--)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][1]=-1;
                        else
                            break;
                    }
                    for(n=j+1;n<col;n++)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][2]=-1;
                        else
                            break;
                    }
                    for(n=i+1;n<row;n++)
                    {
                        if(str[n][j]=='.' || str[n][j]=='S' || str[n][j]=='G')
                            visited[n][j][3]=-1;
                        else
                            break;
                    }
                    for(n=j-1;n>=0;n--)
                    {
                        if(str[i][n]=='.' || str[i][n]=='S' || str[i][n]=='G')
                            visited[i][n][0]=-1;
                        else
                            break;
                    }
                }
                else if(str[i][j]=='S')
                {
                    x1=i;
                    y1=j;
                }
                else if(str[i][j]=='G')
                {
                    x2=i;
                    y2=j;
                }
                else
                    continue;
            }
        }
        queue<part>box;
        box.push(part(x1,y1));
        step[x1][y1]=0;
        part u;
        while(!box.empty())
        {
            u=box.front();
            box.pop();
            for(i=0;i<4;i++)
            {
                x=u.first+fx[i];
                y=u.second+fy[i];
                step[x][y]=step[u.first][u.second]+1;
                if(visited[x][y][step[x][y]%4]!=-1 && ((x>=0 && x<row) && (y>=0 && y<col)) )
                {
                    if(visited[x][y][step[x][y]%4]!=4)
                    {
                        if(x==x2 && y==y2)
                        {
                            flag=1;
                            break;
                        }
                        visited[x][y][step[x][y]%4]++;
                        box.push(part(x,y));
                    }
                }
            }
            if(flag==1)
                break;
           countn++;
        }
        
        if(flag==1)
            printf("Case #%d: %d\n",k,step[x2][y2]);
        else
            printf("Case #%d: impossible\n",k);
    }
    return 0;
}
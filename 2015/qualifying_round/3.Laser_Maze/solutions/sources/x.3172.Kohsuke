#include <stdio.h>
#include <string.h>
#include <queue>
#include <utility>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define mp make_pair

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
const char dc[] = ">v<^";

int w, h;
char f[128][128];
bool vis[128][128][4];

bool blocked(int x, int y) {
    return f[x][y] != '.' && f[x][y] != 'G';
}

bool ok(int cx, int cy, int t) {
    rep (d, 4) {
        int x = cx, y = cy;
        while (!blocked(x, y)) x += dx[d], y += dy[d];
        if (f[x][y] == dc[(d+2+t)%4]) return false;
    }
    return true;
}

int dfs(int sx, int sy) {
    queue<pair<int, pair<int, int> > > q;
    q.push(mp(0, mp(sx, sy)));
    memset(vis, 0, sizeof(vis));
    while (!q.empty()) {
        pair<int, pair<int, int> > v = q.front();
        q.pop();
        const int t = v.first, x = v.second.first, y = v.second.second;
        if (blocked(x, y)) continue;
        if (vis[x][y][t%4]) continue;
        vis[x][y][t%4] = true;
        if (t && !ok(x, y, t)) continue;
        if (f[x][y] == 'G') return t;
        rep (d, 4) q.push(mp(t+1, mp(x+dx[d], y+dy[d])));
    }
    return -1;
}

int solve() {
    scanf("%d%d", &h, &w);
    memset(f, '#', sizeof(f));
    rep (y, h) rep (x, w) scanf(" %c", f[x+1]+y+1);
    w += 2, h += 2;
    rep (y, h) rep (x, w) if (f[x][y] == 'S') {
        f[x][y] = '.';
        return dfs(x, y);
    }
}

int main() {
    int T;
    scanf("%d", &T);
    rep (_q, T) {
        int ans = solve();
        if (ans == -1) printf("Case #%d: impossible\n", _q+1);
        else printf("Case #%d: %d\n", _q+1, ans);
    }
    return 0;
}


#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define bitcount(x) __builtin_popcount(x)
#define pb push_back
#define mp make_pair
#define mt(a,b,c) mp(a,mp(b,c))
#define EPS (double)(1e-9)
#define INF 1000000000
#define MOD 1000000007
#define PI (double)(3.141592653589793)


int b[101][101][4];
struct node
{
    int x;
    int y;
    int val;
    node(int a,int b,int c)
    {
        x=a;
        y=b;
        val=c;
    }
} temp(0,0,0);

char a[105][105];
int n,m;
std::vector<node>s;

void func(int x,int y)
{
    int i,j;
    for(i=x-1; i>=0; i--)
        if(a[i][y]=='#' || a[i][y]=='<' || a[i][y]=='^' || a[i][y]=='>' || a[i][y]=='v')
            break;
    b[x][y][0]=i;
    for(j=y+1; j<n; j++)
        if(a[x][j]=='#' || a[x][j]=='<' || a[x][j]=='^' || a[x][j]=='>' || a[x][j]=='v')
            break;
    b[x][y][1]=j;
    for(j=y-1; j>=0; j--)
        if(a[x][j]=='#' || a[x][j]=='<' || a[x][j]=='^' || a[x][j]=='>' || a[x][j]=='v')
            break;
    b[x][y][3]=j;
    for(i=x+1; i<m; i++)
        if(a[i][y]=='#' || a[i][y]=='<' || a[i][y]=='^' || a[i][y]=='>' || a[i][y]=='v')
            break;
    b[x][y][2]=i;
}

void rotatet()
{
    int i,j,l;
        for(i=0; i<s.size(); i++)
        s[i].val=(s[i].val+1)%4;

}

int valid(int x,int y)
{
    int i,l;

    if( x>=0 && x<m)
    {
        if(y>=0 && y<n)
        {
        if((a[x][y]=='#' || a[x][y]=='^' || a[x][y]=='>' || a[x][y]=='v' || a[x][y]=='<'))
            return 0;
        for(i=0; i<s.size(); i++)
            {
                l=s[i].val;
                switch(l)
                {
                case 0:
                    if(y!=s[i].y)
                    {
                    }
                    else
                    {
                        if(x<=s[i].x && x>b[s[i].x][s[i].y][s[i].val])
                           { return 0;}
                    }
                    break;
                case 1:
                    if(x!=s[i].x) {}
                    else
                    {
                        if(y>=s[i].y && y<b[s[i].x][s[i].y][s[i].val])
                            {return 0;}
                    }
                    break;
                case 2:
                    if(y!=s[i].y) {}
                    else
                    {
                        if(x>=s[i].x && x<b[s[i].x][s[i].y][s[i].val])
                            {return 0;}
                    }
                    break;
                case 3:
                    if(x!=s[i].x) {}
                    else
                    {
                        if(y<=s[i].y && y>b[s[i].x][s[i].y][s[i].val])
                            {return 0;}
                    }
                    break;
                }

            }
            return 1;
        }
    }
    return 0;
}

int turn_x[4]={-1,0,1,0},turn_y[4]= {0,1,0,-1},mark[105][105][5];

struct edge
{
    int first;
    int second;
} start,goal;

int main()
{
  
    int t,flag,i,j,x=0,ans;
   scanf("%d",&t);
    while(t--)
    {
        memset(mark,0,sizeof(mark));
        x++;
        flag=0;
        s.clear();
        std::queue<node>q;
        scanf("%d %d",&m,&n);
        for(i=0; i<m; i++)
            for(j=0;j<n;j++)
                scanf(" %c",&a[i][j]);
        for(i=0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                if(a[i][j]=='<')
                    s.pb(node(i,j,3));
                else if(a[i][j]=='^')
                    s.pb(node(i,j,0));
                else if(a[i][j]=='>')
                    s.pb(node(i,j,1));
                else if(a[i][j]=='v')
                    s.pb(node(i,j,2));
                else if(a[i][j]=='S')
                {
                    start.first=i;
                    start.second=j;
                }
                else if(a[i][j]=='G')
                {
                    goal.first=i;
                    goal.second=j;
                }
            }
        }

        for(i=0; i<s.size(); i++)
            func(s[i].x,s[i].y);


        q.push(node(start.first,start.second,0));
        int cnt;
        while(1)
        { //printf("\n");
            rotatet();
            cnt=q.size();
            if(cnt==0)
                break;
            while(cnt-- && !q.empty())
            {
                temp=q.front();
                q.pop();
                if(mark[temp.x][temp.y][(temp.val)%4]==1)
                    continue;

                mark[temp.x][temp.y][(temp.val)%4]=1;
                if(temp.x==goal.first && temp.y==goal.second)
                {
                    ans=temp.val;
                    flag=1;
                    break;
                }
                for(i=0; i<4; i++)
                {
                    int nx=temp.x+turn_x[i];
                    int ny=temp.y+turn_y[i];
                    if(valid(nx,ny))
                    {
                            q.push(node(nx,ny,temp.val+1));
                    }
                }
            }
            if(flag)
                break;
            }
        if(!flag)
            printf("Case #%d: impossible\n",x);
        else
            printf("Case #%d: %d\n",x,ans);
    }
    return 0;
}

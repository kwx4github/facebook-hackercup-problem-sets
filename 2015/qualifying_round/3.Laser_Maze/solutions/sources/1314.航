#include <cstdio>
#include <iostream>
#include <cstring>
#include <queue>
#include <utility>
#define rep(i,n) for(int i=0;i<n;i++)
#define mp make_pair
using namespace std;

char c[4][105][105];
char q[4][105][105];
int n,m;
void getMap(int sp, int ep)
{
    rep(i,n)
    {
        rep(j,m)
        {
            c[ep][i][j] = c[sp][i][j];
            if(c[sp][i][j] == '<')
                c[ep][i][j] = '^';
            if(c[sp][i][j] == '^')
                c[ep][i][j] = '>';
            if(c[sp][i][j] == '>')
                c[ep][i][j] = 'v';
            if(c[sp][i][j] == 'v')
                c[ep][i][j] = '<';
        }
        c[ep][i][m] = '\0';
    }
}
void getQMap()
{
    //³õÊ¼»¯
    //rep(k,4)rep(i,n)memset(q[k][i],0,sizeof(char) * m);
    //rep(k,4)rep(i,n)rep(j,n)q[k][i][j] = c[k][i][j];

    rep(k,4)
    {
        rep(i,n)
        {
            rep(j,m)
            {
                if(c[k][i][j] == '<')
                {
                    int jj = j - 1;
                    while(jj>=0)
                    {
                        if(c[k][i][jj] == '.' || c[k][i][jj] == '+')
                        {
                            c[k][i][jj] = '+';
                            jj--;
                        }
                        else break;
                    }
                }
                if(c[k][i][j] == '^')
                {
                    int ii = i - 1;
                    while(ii>=0)
                    {
                        if(c[k][ii][j] == '.' || c[k][ii][j] == '+')
                        {
                            c[k][ii][j] = '+';
                            ii--;
                        }
                        else break;
                    }
                }
                if(c[k][i][j] == '>')
                {
                    int jj = j + 1;
                    while(jj<m)
                    {
                        if(c[k][i][jj] == '.' || c[k][i][jj] == '+')
                        {
                            c[k][i][jj] = '+';
                            jj++;
                        }
                        else break;
                    }
                }
                if(c[k][i][j] == 'v')
                {
                    int ii = i + 1;
                    while(ii<n)
                    {
                        if(c[k][ii][j] == '.' || c[k][ii][j] == '+')
                        {
                            c[k][ii][j] = '+';
                            ii++;
                        }
                        else break;
                    }
                }
            }
        }
    }
    rep(k,4)
    {
        rep(i,n)
        {
            rep(j,m)
            {
                if(c[k][i][j] == '+')
                    c[k][i][j] = '#';
            }
        }
    }
}
int stx,sty,enx,eny;
int v[4][105][105];
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
queue <pair<int,pair<int,int> > > que;
int bfs()
{
    while(!que.empty())que.pop();
    memset(v,-1,sizeof(v));

    que.push(mp(1,mp(stx,sty)));
    v[1][stx][sty] = 0;
    while(!que.empty())
    {
        pair<int,pair<int,int> > p = que.front();
        int le = p.first;
        int x = p.second.first;
        int y = p.second.second;
        //cout << le << " " << x << " " << y << " " << v[le][x][y] << endl;
        que.pop();
        for (int i=0;i<4;i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >=0 && nx <n && ny>=0 && ny<m && c[le][nx][ny] == '.' && v[(le+1)%4][nx][ny]==-1)
            {
                if(nx == enx && ny == eny)
                    return v[le][x][y] + 1;
                v[(le+1)%4][nx][ny] = v[le][x][y] + 1;
                que.push(mp((le+1)%4,mp(nx,ny)));
            }
        }
    }
    return -1;
}
int main()
{
    //freopen("in3.txt","r",stdin);
    //freopen("out3.txt","w",stdout);

    int T;
    cin>>T;
    for (int cas = 1; cas <= T; cas++)
    {
        cin>>n>>m;
        for (int i=0; i<n; i++)
            scanf("%s",c[0][i]);
        rep(i,n)rep(j,m)
        {
            if(c[0][i][j] == 'S')
            {
                stx = i;
                sty = j;
                c[0][i][j] = '.';
            }
            if(c[0][i][j] == 'G')
            {
                enx = i;
                eny = j;
                c[0][i][j] = '.';
            }
        }
        getMap(0,1);
        getMap(1,2);
        getMap(2,3);


        getQMap();

/*
        rep(k,4)
        {
            cout << "k = " << k << endl;
            rep(i,n)
            {
                cout << c[k][i] << endl;
            }
            cout << endl;
        }*/
        cout << "Case #" << cas << ": ";
        int ret = bfs();
        if(ret == -1)
            cout << "impossible" << endl;
        else cout << ret << endl;
    }
}
/*
5
5 5
S....
.....
.>v..
.^<..
....G
*/


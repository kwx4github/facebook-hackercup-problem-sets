#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <array>
#include <queue>

using namespace std;

int offsets[256];

int dr[] = {0, 1, 0, -1};
int dc[] = { 1, 0, -1, 0 };

const int INF = 100000000;

typedef tuple<int, int, int> State;

void solve(int tc) {
	offsets['>'] = 0;
	offsets['v'] = 1;
	offsets['<'] = 2;
	offsets['^'] = 3;

	cout << "Case #" << tc << ": ";
	int R, C;
	cin >> R >> C;
	vector<string> M(R);
	pair<int, int> S, G;
	for (int i = 0; i < R; ++i) {
		cin >> M[i];
		for (int j = 0; j < C; ++j) {
			if (M[i][j] == 'S') {
				M[i][j] = '.';
				S = make_pair(i, j);
			}
			if (M[i][j] == 'G') {
				M[i][j] = '.';
				G = make_pair(i, j);
			}
		}
	}
	vector<vector<vector<bool>>> allowed(4, vector<vector<bool>>(R, vector<bool>(C, true)));

	for (int i = 0; i < R; ++i) {
		for (int j = 0; j < C; ++j) {
			if (M[i][j] == '#') {
				for (int k = 0; k < 4; ++k) {
					allowed[k][i][j] = false;
				}
			} else if (M[i][j] != '.') {
				for (int k = 0; k < 4; ++k) {
					int idx = (offsets[M[i][j]] + k) % 4;
					int r = i, c = j;
#define unblocked(r, c) (0 <= r && r < R && 0 <= c && c <= C && M[r][c] == '.')
					do {
						allowed[k][r][c] = false;
						r += dr[idx];
						c += dc[idx];
					} while (unblocked(r, c));
				}
			}
		}
	}
	vector<vector<vector<int>>> dist(4, vector<vector<int>>(R, vector<int>(C, INF)));
	queue<State> s;
	s.push(make_tuple(S.first, S.second, 0));
	while (!s.empty()) {
		int r, c, d;
		tie(r, c, d) = s.front();
		s.pop();
		for (int i = 0; i < 4; ++i) {
			int nr = r + dr[i], nc = c + dc[i], nd = d + 1;;
			if (unblocked(nr, nc) && allowed[nd % 4][nr][nc] && dist[nd % 4][nr][nc] == INF) {
				dist[nd % 4][nr][nc] = nd;
				s.push(make_tuple(nr, nc, nd));
			}
		}
	}
	int ans = INF;
	for (int i = 0; i < 4; ++i) {
		ans = min(ans, dist[i][G.first][G.second]);
	}
	if (ans == INF) {
		cout << "impossible" << endl;
	} else {
		cout << ans << endl;
	}
}

int main() {
	freopen("C:\\Users\\jsannemo\\Downloads\\laser_maze.txt", "r", stdin);
	freopen("C:\\Users\\jsannemo\\Downloads\\laser_maze_output.txt", "w", stdout);
	int T;
	cin >> T;
	for (int tc = 1; tc <= T; ++tc) {
		solve(tc);
	}
}
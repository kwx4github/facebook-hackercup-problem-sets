#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdlib>
#include <cstring>
#include <string>

#define FOR(i, s, e) for (int i=(s);i<(e);i++)
#define FOE(i, s, e) for (int i=(s);i<=(e);i++)
#define FOD(i, s, e) for (int i=(s)-1;i>=(e);i--)
#define CLR(x, a) memset(x, a, sizeof(x))
#define LL long long int
using namespace std;
#define N 105

int b[N][N][4], v[N][N][4], qx[N * N * 4], qy[N * N * 4], qt[N * N * 4];
char s[N][N], t[N][N];
int n, m, sx, sy, ex, ey;
int ok, ret, TC;
int dx[4] = {0, 0, -1, 1}, dy[4] = {-1, 1, 0, 0};

void precompute(){
	FOR(i, 0, n)
	FOR(j, 0, m) {
		char c = s[i][j];
	    if (c == '#' || c == '^' || c == 'v' || c == '<' || c == '>') {
	    	t[i][j] = c;
			FOR(d, 0, 4) b[i][j][d] = 1;
		}

	}
	    
	    
	FOR(d, 0, 4) {
		FOR(i, 0, n)
		FOR(j, 0, m){
			int x = i;
			int y = j;
		    if (t[i][j] == '^') {
				while (x - 1 >= 0 && t[x - 1][y] == 0) b[x - 1][y][d] = 1, x--;
				t[i][j] = '>';
			}
			else if (t[i][j] == '<') {
				while (y - 1 >= 0 && t[x][y - 1] == 0) b[x][y - 1][d] = 1, y--;
				t[i][j] = '^';
			}
			else if (t[i][j] == '>') {
				while (y + 1 < m && t[x][y + 1] == 0) b[x][y + 1][d] = 1, y++;
				t[i][j] = 'v';
			}
			else if (t[i][j] == 'v') {
				while (x + 1 < n && t[x + 1][y] == 0) b[x + 1][y][d] = 1, x++;
				t[i][j] = '<';
			}
		}
	}
}

void solve(int tc){
	CLR(v, -1);
	CLR(b, 0);
	CLR(t, 0);
	ok = 0;
	scanf("%d%d", &n, &m);
	FOR(i, 0, n) {
		scanf("%s", s[i]);
		FOR(j, 0, m)
		    if (s[i][j] == 'S'){
				sx = i;
				sy = j;
			}
			else if (s[i][j] == 'G'){
				ex = i;
				ey = j;
			}
	}
	precompute();
	qx[0] = sx;
	qy[0] = sy;
	qt[0] = 0;
	v[qx[0]][qy[0]][qt[0]] = 0;
	for (int i=0,j=0;i<=j;i++) {
		int x = qx[i];
		int y = qy[i];
		int t = qt[i];
		if (x == ex && y == ey) {
			ok = 1;
			ret = v[x][y][t];
			break;
		}
		FOR(d, 0, 4){
			int tx = x + dx[d], ty = y + dy[d];
			if (tx < 0 || tx == n || ty < 0 || ty == m) continue;
			if (b[tx][ty][(t + 1) % 4]) continue;
			if (v[tx][ty][(t + 1) % 4] != -1) continue;
			qx[++j] = tx;
			qy[j] = ty;
			qt[j] = (t + 1) % 4;
			v[tx][ty][(t + 1) % 4] = v[x][y][t] + 1;
		}
	}
	
	printf("Case #%d: ", tc);
	if (ok) printf("%d\n", ret);
	else printf("impossible\n");
}

int main(){
	scanf("%d", &TC);
	FOR(i, 0, TC) solve(i + 1);
	return 0;
}


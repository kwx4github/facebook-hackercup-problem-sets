#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

const int maxn = 100;
const int INF = 1000000000;

struct pos
{
	int x, y, s;
	pos(){}
	pos(int a, int b, int c){x=a; y=b; s=c;}
};

int n, m;
char T[maxn][maxn];
int B[maxn][maxn][4];
bool safe[maxn][maxn][4];

void read()
{
	cin>>n>>m;
	for(int i=0; i<n; i++) for(int j=0; j<m; j++) cin>>T[i][j];
}

bool empty(char C)
{
	if(C=='.') return true;
	if(C=='S') return true;
	if(C=='G') return true;
	return false;
}

void laser(pos p, int dir)
{
	safe[p.x][p.y][p.s]=false;
	switch(dir)
	{
		case 0:
			for(int i=p.x-1; i>=0 && empty(T[i][p.y]); i--) safe[i][p.y][p.s]=false;
			break;
		case 1:
			for(int i=p.y+1; i<m && empty(T[p.x][i]); i++) safe[p.x][i][p.s]=false;
			break;
		case 2:
			for(int i=p.x+1; i<n && empty(T[i][p.y]); i++) safe[i][p.y][p.s]=false;
			break;
		case 3:
			for(int i=p.y-1; i>=0 && empty(T[p.x][i]); i--) safe[p.x][i][p.s]=false;
			break;
		default: break;
	}
}

pos find(char C)
{
	for(int i=0; i<n; i++) for(int j=0; j<m; j++)
	{
		if(T[i][j]==C) return pos(i,j,0);
	}
}

void init()
{
	for(int i=0; i<n; i++) for(int j=0; j<m; j++) for(int k=0; k<4; k++)
	{
		B[i][j][k]=INF;
		safe[i][j][k]=true;
	}
	for(int i=0; i<n; i++) for(int j=0; j<m; j++)
	{
		switch(T[i][j])
		{
			case '#':
				for(int k=0; k<4; k++) safe[i][j][k]=false;
				break;
			case '^':
				for(int k=0; k<4; k++) laser(pos(i,j,k),(0+k)%4);
				break;
			case '>':
				for(int k=0; k<4; k++) laser(pos(i,j,k),(1+k)%4);
				break;
			case 'v':
				for(int k=0; k<4; k++) laser(pos(i,j,k),(2+k)%4);
				break;
			case '<':
				for(int k=0; k<4; k++) laser(pos(i,j,k),(3+k)%4);
				break;
			default: break;
		}
	}
}

void dfs(pos p)
{
	if(p.x<0 || p.x>=n || p.y<0 || p.y>=m) return;
	if(!safe[p.x][p.y][p.s%4] && p.s!=0) return;
	if(B[p.x][p.y][p.s%4]<=p.s) return;
	B[p.x][p.y][p.s%4]=p.s;
	dfs(pos(p.x+1,p.y,p.s+1));
	dfs(pos(p.x-1,p.y,p.s+1));
	dfs(pos(p.x,p.y+1,p.s+1));
	dfs(pos(p.x,p.y-1,p.s+1));
}

void result(pos end, int nr)
{
	cout<<"Case #"<<nr<<": ";
	end.s=INF;
	for(int i=0; i<4; i++) end.s=min(end.s, B[end.x][end.y][i]);
	if(end.s==INF) cout<<"impossible\n";
	else cout<<end.s<<"\n";
}

int main()
{
	int test; cin>>test;
	for(int t=1; t<=test; t++)
	{
		read();
		init();
		dfs(find('S'));
		result(find('G'),t);
	}
	return 0;
}

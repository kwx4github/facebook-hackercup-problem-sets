#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;

int m, n;
char mp[110][110];

struct Node {
    int x, y, way;
    Node(int _x, int _y, int _way) {
        x = _x;
        y = _y;
        way = _way;
    }
};

queue<Node> q;

int use[110][110][4];
int wayx[10] = {-1, 0, 1, 0};
int wayy[10] = {0, 1, 0, -1};

int ck(char c) {
    if (c == '^') return 0;
    if (c == '>') return 1;
    if (c == 'v') return 2;
    if (c == '<') return 3;
    return -1;
}

bool die(Node s) {
    int x = s.x, y = s.y, way = s.way;
    if (use[x][y][way] == 0) {
        return false;
    }
    for (int i = 0; i < 4; i ++) {
        int tx = x, ty = y;
        while (tx >= 0 && tx < m && ty >= 0 && ty < n) {
            if (mp[tx][ty] == '#') {
                break;
            }
            int id = ck(mp[tx][ty]);
            if (id >= 0) {
                id = (id + way + 2) % 4;
                if (i == id) {
                    return true;
                }
            }
            tx += wayx[i];
            ty += wayy[i];
        }
    }
    return false;
}

int main() {
    freopen("laser_maze.txt", "r", stdin);
    freopen("laser_maze.out", "w", stdout);
    int T;
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas ++) {
        scanf("%d%d", &m, &n);
        for (int i = 0; i < m; i ++) {
            scanf("%s", mp[i]);
        }
        printf("Case #%d: ", cas);
        while (!q.empty()) {
            q.pop();
        }
        memset(use, -1, sizeof(use));
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (mp[i][j] == 'S') {
                    q.push(Node(i, j, 0));
                    use[i][j][0] = 0;
                }
            }
        }
        bool sol = false;
        while (!q.empty()) {
            Node s = q.front();
            q.pop();
            if (die(s)) {
                continue;
            }
            if (mp[s.x][s.y] == 'G') {
                printf("%d\n", use[s.x][s.y][s.way]);
                sol = true;
                break;
            }
            for (int i = 0; i < 4; i ++) {
                int tx = s.x + wayx[i];
                int ty = s.y + wayy[i];
                if (tx >= 0 && tx < m && ty >= 0 && ty < n && (mp[tx][ty] == '.' || mp[tx][ty] == 'G' || mp[tx][ty] == 'S')) {
                    int tway = (s.way + 1) % 4;
                    if (use[tx][ty][tway] == -1) {
                        use[tx][ty][tway] = use[s.x][s.y][s.way] + 1;
                        q.push(Node(tx, ty, tway));
                    }
                }
            }
        }
        if (!sol) {
            puts("impossible");
        }
    }
    return 0;
}
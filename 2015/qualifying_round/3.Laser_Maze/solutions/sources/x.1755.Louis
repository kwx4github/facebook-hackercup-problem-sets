import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 * Created by Louis Lam on 1/9/2015.
 */
public class Main4 {

	public static void main(String[] args) throws Exception {
		Scanner s  = new Scanner(new File("input.txt"));
		FileWriter fw = new FileWriter(new File("output.txt"));
		int t = 0;
		t = s.nextInt();

		for (int i = 1; i <= t; i++) {
			System.out.println("Case #"+ i +"");
			int height = s.nextInt();
			int width = s.nextInt();
			s.nextLine();
			char[][] board = new char[height][width];
			int shortest = 999999999;


			int Sx =0, Sy=0, Gx=0, Gy=0;

			for (int j = 0; j < height; j++) {
				String line = s.nextLine();
				//System.out.println(line);
				for (int k = 0; k < line.length(); k++) {
					board[j][k] = line.charAt(k);

					if ( line.charAt(k) =='S') {
						Sx = j;
						Sy = k;
					}

					if ( line.charAt(k) =='G') {
						Gx = j;
						Gy = k;
					}

				}
			}

			int[][] repeat =  new int[height][width];
			int[][] costs =  new int[height][width];
			shortest = step(board,  Sx, Sy, Gx, Gy, height, width, 1,  -1, -1, repeat, costs);


			if (shortest < 999999999) {
				fw.write("Case #" + i + ": " +shortest+ "\n");
			} else {
				fw.write("Case #" + i + ": impossible\n");
			}
		}

		fw.close();
	}

	public static char[] chars = {'#', '^', 'v', '<','>', '|'};
	public static char[] lchars = {'#', '^', 'v', '<','>'};

	public static boolean movable(char a) {



		for (int i = 0;i<chars.length;i++) {
			if (a == chars[i]) {
				return false;
			}
		}
		return true;
	}

	public static boolean laserable(char a) {



		for (int i = 0;i<lchars.length;i++) {
			if (a == lchars[i]) {
				return false;
			}
		}
		return true;
	}

	public static int step(char[][] board, int Sx, int Sy, int Gx, int Gy, int h, int w, int depth,  int prevSx, int prevSy, int[][] repeat, int[][] costs) {

		if (costs[Sx][Sy] != 0) {
			return costs[Sx][Sy];
		}

		if (board[Sx][Sy] != 'S') {
			System.out.println(Sx + " " + Sy + ": " + board[Sx][Sy]);
			return 999999999;
		}

		if (repeat[Sx][Sy] >= 1) {
			return 999999999;
		} else {
			repeat[Sx][Sy]++;
		}


		int tempCost2;
		int tempCost = 999999999;
		char[][] board2;

		// up
		if (Sx -1 >= 0) {
			board2 = copy(board);
			//System.out.println(Sx - 1 +  " " + board[Sx - 1][Sy]);

			if (board[Sx - 1][Sy] == 'G') {
				return 1;
			}

			if (movable(board[Sx - 1][Sy])) {
				board2[Sx - 1][Sy] = 'S';
				board2[Sx][Sy] = '.';

				board2 = moveBoard(board2, w, h);



				tempCost = step(board2,  Sx -1, Sy, Gx, Gy, h, w, depth +1,  Sx, Sy, repeat, costs);
			}
		}

		// down
		if (Sx + 1 < h) {
			board2 = copy(board);
			//System.out.println(Sx - 1 +  " " + board[Sx - 1][Sy]);

			if (board[Sx + 1][Sy] == 'G') {
				return 1;
			}

			if (movable(board[Sx + 1][Sy])) {
				board2[Sx + 1][Sy] = 'S';
				board2[Sx][Sy] = '.';
				board2 = moveBoard(board2, w, h);

				tempCost2 = step(board2,  Sx +1, Sy, Gx, Gy,h,w, depth+1, Sx, Sy, repeat, costs);

				if (tempCost2 < tempCost) {

					tempCost = tempCost2;
				}
			}
		}

		// left
		if (Sy - 1 >= 0) {
			board2 = copy(board);

			if (board[Sx][Sy - 1] == 'G') {
				return 1;
			}

			if (movable(board[Sx][Sy - 1])) {
				board2[Sx][Sy - 1] = 'S';
				board2[Sx][Sy] = '.';
				board2 = moveBoard(board2, w, h);

				tempCost2 = step(board2,  Sx, Sy - 1, Gx, Gy,h,w, depth+1, Sx, Sy, repeat, costs);

				if (tempCost2 < tempCost) {
					tempCost = tempCost2;
				}
			}
		}

		// right
		if (Sy + 1 < w) {
			board2 = copy(board);

			if (board[Sx][Sy + 1] == 'G') {
				return 1;
			}

			if (movable(board[Sx][Sy + 1])) {
				board2[Sx][Sy + 1] = 'S';
				board2[Sx][Sy] = '.';
				board2 = moveBoard(board2, w, h);

				tempCost2 = step(board2,  Sx, Sy + 1, Gx, Gy,h,w, depth+1, Sx, Sy, repeat, costs);

				if (tempCost2 < tempCost) {
					tempCost = tempCost2;
				}
			}
		}

		//System.out.println((Sx) + "," + Sy + " " + tempCost + 1);
		costs[Sx][Sy] = tempCost + 1;

		return tempCost + 1;
	}

	public static char[][] copy(char[][] array) {

		char [][] myInt = new char[array.length][];
		for(int i = 0; i < array.length; i++)
			myInt[i] = array[i].clone();

		return myInt;
	}

	public static char[][] moveBoard(char[][] myInt, int w, int h) {
		return myInt;
		/*for(int i = 0; i < myInt.length; i++) {
			for(int j = 0; j < myInt[i].length; j++) {
				if (myInt[i][j] == '|') {
					myInt[i][j] = '.';
				}

				if (myInt[i][j] == 'N') {
					myInt[i][j] = 'G';
				}
			}
		}


		for(int i = 0; i < myInt.length; i++) {
			for(int j = 0; j < myInt[i].length; j++) {
				myInt[i][j] = rotate(myInt[i][j]);

				if (myInt[i][j] == '^') {
					for (int k = i - 1; k >=0; k--) {
						if(laserable(myInt[k][j])) {

							if (myInt[k][j] == 'G') {
								myInt[k][j] = 'N';
							} else {
								myInt[k][j] = '|';
							}

						} else {
							break;
						}
					}
				}

				if (myInt[i][j] == '>') {
					for (int k = j + 1; k < w; k++) {
						if(laserable(myInt[i][k])) {

							if (myInt[i][k] == 'G') {
								myInt[i][k] = 'N';
							} else {
								myInt[i][k] = '|';
							}

						} else {
							break;
						}
					}
				}

				if (myInt[i][j] == 'v') {
					for (int k = i + 1; k < h; k++) {
						if(laserable(myInt[k][j])) {

							if (myInt[k][j] == 'G') {
								myInt[k][j] = 'N';
							} else {
								myInt[k][j] = '|';
							}

						} else {
							break;
						}
					}
				}

				if (myInt[i][j] == '<') {
					for (int k = j - 1; k >=0; k--) {
						if(laserable(myInt[i][k])) {

							if (myInt[i][k]== 'G') {
								myInt[i][k] = 'N';
							} else {
								myInt[i][k] = '|';
							}

						} else {
							break;
						}
					}
				}

			}
		}
		return myInt;*/
	}

	public static char rotate(char a) {
		if (a == '^')
			return '>';
		if (a == '>')
			return 'v';
		if (a == 'v')
			return '<';
		if (a == '<')
			return '^';

		return a;
	}
}

#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<vector>
#include<queue>
#include<map>
#include<stdlib.h>
#include<algorithm>
#include<limits.h>
#include<stack>
#include<deque>
#include<set>

using namespace std;

#define i_n(a) scanf("%d",&a)
#define l_n(a) scanf("%I64d",&a)
#define LL long long int
#define pb(a) push_back(a)
#define pp pair<int,int>
#define vv vector<int>
#define vvp vector<pp>
#define i_p(a) printf("%d\n",a)
#define l_p(a) printf("%I64d\n",a)
#define pnt(expr) printf(#expr"\n")
#define reset(a,val) memset(a,val,sizeof(a))
#define m1 1000000000
#define mod 1000000007
#define pr(cn,x) ((cn).find(x)!=(cn).end())
#define tr(cn,it) for(typeof((cn).begin()) it=(cn).begin();it!=(cn).end();it++)
#define read() freopen("B.txt","r",stdin)
#define write() freopen("Bans.txt","w",stdout)
bool cmp(const pair<int, int>& p1, const pair<int, int>& p2)
{
    return p1.first < p2.first;
}
int n,m;
char in[105][105];
int visited[4][105][105],dist[4][105][105];
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};
void bfs(int idx,int idy,int dir)
{
    queue<pair<int,pp> >q;
    q.push(make_pair(0,make_pair(idx,idy)));
    dist[dir][idx][idy]=1;
    while(!q.empty())
    {
        int idx;
        int idy;
        idx=q.front().second.first;
        idy=q.front().second.second;
        dir=q.front().first;
        q.pop();
        for(int i=0;i<4;i++)
        {
            int r;
            int c;
            r=idx+dx[i];
            c=idy+dy[i];

            if(r<0||r>=n||c<0||c>=m||in[r][c]=='<'||in[r][c]=='>'||in[r][c]=='^'||in[r][c]=='v'||in[r][c]=='#')
                continue;
            if(visited[(dir+1)%4][r][c]==1)
                continue;
            dist[(dir+1)%4][r][c]=dist[dir%4][idx][idy]+1;
            visited[(dir+1)%4][r][c]=1;
            q.push(make_pair((dir+1)%4,make_pair(r,c)));
        }
    }
}
int main()
{
//    read();
  //  write();
int t;
i_n(t);
for(int x=1;x<=t;x++)
{
    i_n(n);i_n(m);
    for(int i=0;i<n;i++)
        scanf("%s",in[i]);
    int sx=0;
    int sy=0;
    int gx=0;
    int gy=0;
    vector<pair<int,pp> > v;
    reset(visited,0);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(in[i][j]=='^')
                    v.pb(make_pair(i,make_pair(j,0)));
                if(in[i][j]=='>')
                    v.pb(make_pair(i,make_pair(j,1)));
                if(in[i][j]=='v')
                    v.pb(make_pair(i,make_pair(j,2)));
                if(in[i][j]=='<')
                    v.pb(make_pair(i,make_pair(j,3)));
                if(in[i][j]=='S')
                {
                    sx=i;
                    sy=j;
                }
                if(in[i][j]=='G')
                {
                    gx=i;
                    gy=j;
                }
            }
        }
        for(int k=0;k<4;k++)
        {
            for(int i=0;i<v.size();i++)
            {
                int idx;
                int idy;
                int dir;
                idx=v[i].first;
                idy=v[i].second.first;
                dir=(v[i].second.second+k)%4;
                if(dir==0)
                {
                    for(int j=idx-1;j>=0;j--)
                    {
                        if(in[j][idy]=='<'||in[j][idy]=='>'||in[j][idy]=='^'||in[j][idy]=='v'||in[j][idy]=='#')
                            break;

                        visited[k][j][idy]=1;
                    }
                }
                if(dir==1)
                {
                    for(int j=idy+1;j<m;j++)
                    {
                        if(in[idx][j]=='<'||in[idx][j]=='>'||in[idx][j]=='^'||in[idx][j]=='v'||in[idx][j]=='#')
                            break;
                        visited[k][idx][j]=1;
                    }
                }
                if(dir==2)
                {
                    for(int j=idx+1;j<n;j++)
                    {
                        if(in[j][idy]=='<'||in[j][idy]=='>'||in[j][idy]=='^'||in[j][idy]=='v'||in[j][idy]=='#')
                            break;
                        visited[k][j][idy]=1;
                    }
                }
                if(dir==3)
                {
                    for(int j=idy-1;j>=0;j--)
                    {
                        if(in[idx][j]=='<'||in[idx][j]=='>'||in[idx][j]=='^'||in[idx][j]=='v'||in[idx][j]=='#')
                            break;
                        visited[k][idx][j]=1;
                    }
                }

            }
        }

        for(int i=0;i<4;i++)
        {
            for(int j=0;j<=100;j++)
            {
                for(int k=0;k<=100;k++)
                {
                    dist[i][j][k]=m1;
                }
            }
        }
        bfs(sx,sy,0);
        int ans=m1;
        for(int i=0;i<4;i++)
            ans=min(ans,dist[i][gx][gy]);
        printf("Case #%d: ",x);
        if(ans==m1)
            pnt(impossible);
        else
            i_p(ans-1);
}
  return 0;
}

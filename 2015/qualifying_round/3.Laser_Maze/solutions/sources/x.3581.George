<?php

class mazeSolver
{
    public $number_of_steps = 0;
    public $the_stack = array();
    public $impossible = true;
    public $final_steps = 0;
    public $visited = null;
    public $ignore_visited = false;
    public $breaks = array();
    private $last_previous_added = null;

    public function findNumberOfSteps($maze, $start, $end, $steps, $previous)
    {
//        echo $start . '<br>';
        if ($start == $end) {
            return $steps;
        }

        if ($this->visited == null) {
            $this->visited = array();
            for ($i = 0; $i < count($maze); $i++) {
                $this->visited[$i] = array();
                for ($j = 0; $j < count($maze[0]); $j++) {
                    $this->visited[$i][$j] = false;
                }
            }
        }

        $current_position = explode("|", $start);
        $end_position = explode("|", $end);
        $ci = $current_position[0];
        $cj = $current_position[1];

//        if ($current_position[0] == $previous[0] && $current_position[1] == $previous[1])
//            return INF;

        $ei = $end_position[0];
        $ej = $end_position[1];


//        $good_moves = array();
//        $bad_moves = array();

        $start_c = count($this->the_stack);


        if ($ci < $ei && !$this->visited[$ci + 1][$cj] && ($maze[$ci + 1][$cj] == "." || $maze[$ci + 1][$cj] == "G" || $maze[$ci + 1][$cj] == "S") && !$this->medium_rare(array($ci + 1, $cj), $steps, $maze)) {
//            if (!count($this->the_stack) || (end($this->the_stack)[0] != $ci + 1 || end($this->the_stack)[1] != $cj))
            $this->the_stack[] = array($ci + 1, $cj);
        }
        if ($cj < $ej && !$this->visited[$ci][$cj + 1] && ($maze[$ci][$cj + 1] == "." || $maze[$ci][$cj + 1] == "G" || $maze[$ci][$cj + 1] == "S") && !$this->medium_rare(array($ci, $cj + 1), $steps, $maze)) {
//            if (!count($this->the_stack) || (end($this->the_stack)[0] != $ci || end($this->the_stack)[1] != $cj + 1))
            $this->the_stack[] = array($ci, $cj + 1);
        }
        if ($ci > $ei && !$this->visited[$ci - 1][$cj] && ($maze[$ci - 1][$cj] == "." || $maze[$ci - 1][$cj] == "G" || $maze[$ci - 1][$cj] == "S") && !$this->medium_rare(array($ci - 1, $cj), $steps, $maze)) {
//            if (!count($this->the_stack) || (end($this->the_stack)[0] != $ci - 1 || end($this->the_stack)[1] != $cj))
            $this->the_stack[] = array($ci - 1, $cj);
        }
        if ($cj > $ej && !$this->visited[$ci][$cj - 1] && ($maze[$ci][$cj - 1] == "." || $maze[$ci][$cj - 1] == "G" || $maze[$ci][$cj - 1] == "S") && !$this->medium_rare(array($ci, $cj - 1), $steps, $maze)) {
//            if (!count($this->the_stack) || (end($this->the_stack)[0] != $ci || end($this->the_stack)[1] != $cj - 1))
            $this->the_stack[] = array($ci, $cj - 1);
        }

        if ($ci < count($maze) - 1 && !$this->visited[$ci + 1][$cj] && ($maze[$ci + 1][$cj] == "." || $maze[$ci + 1][$cj] == "G" || $maze[$ci + 1][$cj] == "S")) {
            if ($start_c == count($this->the_stack))
                $this->the_stack[] = array($ci + 1, $cj);
        }
        if ($cj < count($maze[0]) - 1 && !$this->visited[$ci][$cj + 1] && ($maze[$ci][$cj + 1] == "." || $maze[$ci][$cj + 1] == "G" || $maze[$ci][$cj + 1] == "S") && !$this->medium_rare(array($ci, $cj + 1), $steps, $maze)) {
            if ($start_c == count($this->the_stack))
                $this->the_stack[] = array($ci, $cj + 1);
        }
        if ($ci > 0 && !$this->visited[$ci - 1][$cj] && ($maze[$ci - 1][$cj] == "." || $maze[$ci - 1][$cj] == "G" || $maze[$ci - 1][$cj] == "S") && !$this->medium_rare(array($ci - 1, $cj), $steps, $maze)) {
            if ($start_c == count($this->the_stack))
                $this->the_stack[] = array($ci - 1, $cj);
        }
        if ($cj > 0 && !$this->visited[$ci][$cj - 1] && ($maze[$ci][$cj - 1] == "." || $maze[$ci][$cj - 1] == "G" || $maze[$ci][$cj - 1] == "S") && !$this->medium_rare(array($ci, $cj - 1), $steps, $maze)) {
            if ($start_c == count($this->the_stack))
                $this->the_stack[] = array($ci, $cj - 1);
        }

        if ($start_c == count($this->the_stack) && $this->ignore_visited) {
            if ($this->last_previous_added != array($ci, $cj)) {
//                echo "<br>";
//                print_r($previous);
//                print_r($this->last_previous_added);
//                print_r(array($ci, $cj));
//                echo "<br>";
                $this->the_stack[] = $previous;
                $this->last_previous_added = $previous;
            }

        }
//        $this->the_stack = array_unique($this->the_stack, SORT_REGULAR);
//        print_r($this->the_stack);

        //now run the at most two good moves andddddddd fight
        $min_moves = INF;
        while (!empty($this->the_stack)) {
            $move = array_pop($this->the_stack);

            $this->visited[$move[0]][$move[1]] = true;
            return $this->findNumberOfSteps($maze, $move[0] . "|" . $move[1], $end, $steps + 1, array($ci, $cj));
//            if($result<$min_moves)$min_moves = $result;
        }

        //if i don't have good moves let's roll to the least preferred
//        if (!count($good_moves)) {


//            if (!count($bad_moves) && $this->ignore_visited) {
//                $this->visited[$previous[0]][$previous[1]] = true;
//                $result = $this->findNumberOfSteps($maze, $previous[0] . "|" . $previous[1], $end, $steps + 1, array($ci, $cj));
//                if ($result < $min_moves) $min_moves = $result;
//            }

//            foreach ($bad_moves as $move) {
//                $this->visited[$move[0]][$move[1]] = true;
//                $result = $this->findNumberOfSteps($maze, $move[0] . "|" . $move[1], $end, $steps + 1, array($ci, $cj));
//                if ($result < $min_moves) $min_moves = $result;
//            }
//        }

        return $min_moves;
    }

    //previous direction cuts one check, todo
    private function medium_rare($position, $steps, $maze)
    {
        $directions = array("^", ">", "v", "<");
        $steps++;

        if ($steps >= 4) {
            $steps = $steps % 4;
        }

        $i = $position[0];
        $j = $position[1];

//        echo "i :" . $i . ' j:' . $j;
        $result = false;
        //look up
        for ($k = $i - 1; $k >= 0; $k--) {
            //check for wall
            if ($maze[$k][$j] == "#") {
                break;
            } else if ($maze[$k][$j] == "^" || $maze[$k][$j] == ">" || $maze[$k][$j] == "v" || $maze[$k][$j] == "<") {
//                echo $directions[abs($steps - array_search($maze[$k][$j], $directions))];
                $current = $steps + array_search($maze[$k][$j], $directions);
                $current = $current < 4 ? $current : $current % 4;
                if ($directions[$current] == "v") {
//                    echo 'up ' . $k . " " . $j;
//                    echo "up";
                    $result = true;
                }
            }
        }

        //look down
        if (!$result) {
            for ($k = $i + 1; $k < count($maze); $k++) {
                //check for wall
                if ($maze[$k][$j] == "#") {
                    break;
                } else if ($maze[$k][$j] == "^" || $maze[$k][$j] == ">" || $maze[$k][$j] == "v" || $maze[$k][$j] == "<") {
                    $current = $steps + array_search($maze[$k][$j], $directions);
                    $current = $current < 4 ? $current : $current % 4;
                    if ($directions[$current] == "^") {
//                        echo "->>>>" . array_search($maze[$k][$j], $directions) . "<----";
//                        echo "down";
                        $result = true;
                    }
                }
            }
        }
        //look right
        if (!$result) {
            for ($k = $j + 1; $k < count($maze[0]); $k++) {
                //check for wall
                if ($maze[$i][$k] == "#") {
                    break;
                } else if ($maze[$i][$k] == "^" || $maze[$i][$k] == ">" || $maze[$i][$k] == "v" || $maze[$i][$k] == "<") {
                    $current = $steps + array_search($maze[$i][$k], $directions);
                    $current = $current < 4 ? $current : $current % 4;
                    if ($directions[$current] == "<") {
//                        echo "right";
                        $result = true;
                    }
                }
            }
        }

        //look left
        if (!$result) {
            for ($k = $j + 1; $k >= 0; $k--) {
                //check for wall
                if ($maze[$i][$k] == "#") {
                    break;
                } else if ($maze[$i][$k] == "^" || $maze[$i][$k] == ">" || $maze[$i][$k] == "v" || $maze[$i][$k] == "<") {
                    $current = $steps + array_search($maze[$i][$k], $directions);
                    $current = $current < 4 ? $current : $current % 4;
                    if ($directions[$current] == ">") {
//                        echo "left";
                        $result = true;
                    }
                }
            }
        }
        $this->ignore_visited = $this->ignore_visited || $result;
        return $result;
    }
}


$fh = fopen('laser_maze.txt', 'r');
$hm = 0;
$c = 0;
$txt = "";
while ($line = fgets($fh)) {
    if ($hm == 0) {
        $hm = (int)$line;
    } else {
        $c++;
        $dimensions = explode(" ", $line);

        $height = $dimensions[0];
        $width = $dimensions[1];

        $start_pos = "";
        $finish_pos = "";

        $turrets = array();

        $maze = array();
        $maze_graph = array();
        for ($i = 0; $i < $height; $i++) {
            $line = fgets($fh);
            $line_to_add = str_split($line);
            $maze[] = $line_to_add;
            for ($k = 0; $k < count($line_to_add); $k++) {
                if ($line_to_add[$k] == "S") {
                    $start_pos = $i . '|' . $k;
                }
                if ($line_to_add[$k] == "G") {
                    $finish_pos = $i . '|' . $k;
                }
            }
        }
        $solver = new mazeSolver();
//        echo $start_pos . " " . $finish_pos . " ";
        $sol = $solver->findNumberOfSteps($maze, $start_pos, $finish_pos, 0, array(0, 0));
        echo $sol == INF ? "impossible" : $sol;
        echo "<br>";
        $txt .= "Case #" . $c . ": " . ($sol == INF ? "impossible" : $sol) . PHP_EOL;

//        break;
    }
    $output = fopen("maze.txt", "w");

    fwrite($output, $txt);
    fclose($output);
}
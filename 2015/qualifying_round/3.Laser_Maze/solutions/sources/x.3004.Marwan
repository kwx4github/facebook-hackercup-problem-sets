/*
 * C.cpp
 *
 *  Created on: Jan 11, 2015
 *      Author: Marwan
 */

#include <iostream>
#include <vector>
#include <cstdio>
#include <memory.h>
#include <queue>
#include <set>

using namespace std;

// N, E, S, W
int di[] = { -1, 0, 1, 0 };
int dj[] = { 0, 1, 0, -1 };
string laser = "^>v<";
int n, m;
bool haslaser[111][111][4];
vector<string> s;

inline bool valid(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < m && s[i][j] != '#'
			&& laser.find(s[i][j]) == string::npos;
}
int main() {
	freopen("in.in", "rt", stdin);
	freopen("out.txt", "wt", stdout);

	int t;
	cin >> t;
	for (int tt = 1; tt <= t; tt++) {
		cout << "Case #" << tt << ": ";
		cin >> n >> m;
		s = vector<string>(n);
		pair<int, int> c, g;
		for (int i = 0; i < n; i++) {
			cin >> s[i];
			for (int j = 0; j < m; j++) {
				if (s[i][j] == 'S')
					c = make_pair(i, j);
				if (s[i][j] == 'G')
					g = make_pair(i, j);
			}
		}

		memset(haslaser, 0, sizeof haslaser);

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				int idx = laser.find(s[i][j]);
				if (idx != string::npos) {
					for (int k = 1; k < 5; k++) {
						idx = (idx + 1) % 4;
						int ni = i + di[idx], nj = j + dj[idx], cnt = k;
						//cout << "testing " << ni << " " << nj << " " << idx << " " << cnt << endl;
						while (valid(ni, nj)) {
							haslaser[ni][nj][cnt] = 1;
							//cout << "Cell " << ni << " " << nj
								//	<< " has laser at " << cnt << endl;
							ni += di[idx];
							nj += dj[idx];
						}
					}
				}
			}
		}

		set<pair<pair<int, int>, int> > vis;
		queue<pair<int, int> > q;
		vis.insert(make_pair(c, 0));
		q.push(c);

		int steps = 0;
		while (int sz = q.size()) {
			while (sz--) {
				pair<int, int> f = q.front();
				q.pop();

				//cout << "step " << f.first << " " << f.second << " " << steps << endl;
				if (f == g) {
					cout << steps << endl;
					goto solved;
				}

				for (int k = 0; k < 4; k++) {
					int ni = f.first + di[k];
					int nj = f.second + dj[k];
					if (valid(ni, nj)
							&& !haslaser[ni][nj][(steps + 1) % 4]
							&& !vis.count(make_pair(make_pair(ni, nj), (steps+1) % 4))) {
						//cout << "adding " << ni << " " << nj << " " << (steps + 1)%4 << endl;
						//cout << "and " << haslaser[ni][nj][(steps+1)%4] << endl;
						q.push(make_pair(ni, nj));
						vis.insert (make_pair(make_pair(ni, nj), (steps+1) % 4));
					}
				}
			}

			steps++;
		}
		cout << "impossible" << endl;
		solved: ;
	}
}

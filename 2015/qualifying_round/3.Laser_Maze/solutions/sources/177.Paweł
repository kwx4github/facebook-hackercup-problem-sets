#include <string>
#include <cstring>
#include <vector>
#include <cmath> 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(a, v) __typeof(v) a = (v)
#define FOREACH(a, v) for (INIT(a, (v).begin()); a!=(v).end(); ++a)
 
template<class T>
inline int size(const T&t){return t.size();}
 
typedef vector<string> vs;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long LL;

#define INF 1000000000
#define PB push_back
#define MP make_pair
 
//////////////////////////////////////////

int xs, ys;
char lab[110][110];

int dx[4] = {0, 1, 0, -1};
int dy[4] = {-1, 0, 1, 0};

bool isAvail(int x, int y, int z) {
    if (lab[x][y]!='.')
        return false;
    REP(d, 4) {
        int nx = x, ny = y; 
        while (lab[nx][ny]=='.')
            nx += dx[d], ny += dy[d];
        char t = lab[nx][ny];
        if (t=='#')
            continue;
        int k0 = t=='^' ? 0 : t=='>'? 1 : t=='v' ? 2 : 3;
        if ((k0+z+2)%4==d)
            return false;
    }
    return true;
}

int byl[110][110][4];
queue<pair<pii, int> > Q;

void enQ(int x, int y, int d) {
    if (byl[x][y][d%4])
        return;
    byl[x][y][d%4] = 1;
    Q.push(MP(MP(x, y), d));
}

void licz() {
    scanf("%d%d", &ys, &xs);
    xs += 2; 
    ys += 2;
    REP(x, xs)
        REP(y, ys) {
            lab[x][y] = '#';
            REP(z, 4)
                byl[x][y][z] = 0;
        }
    int x0, y0, xc, yc;
    FOR(y, 1, ys-2)
        FOR(x, 1, xs-2) {
            scanf(" %c", &lab[x][y]);
            if (lab[x][y]=='S') {
                x0 = x, y0 = y;
                lab[x][y] = '.';
            }
            if (lab[x][y]=='G') {
                xc = x, yc = y;
                lab[x][y] = '.';
            }
        }
    while (!Q.empty())
        Q.pop();
    enQ(x0, y0, 0);
    while (!Q.empty()) {
        x0 = Q.front().first.first;
        y0 = Q.front().first.second;
        int dist = Q.front().second;
        Q.pop();
        if (x0==xc && y0==yc) {
            printf("%d\n", dist);
            return;
        }
        REP(d, 4) {
            int nx = x0+dx[d];
            int ny = y0+dy[d];
            if (isAvail(nx, ny, (dist+1)%4))
                enQ(nx, ny, dist+1);
        }
    }
    printf("impossible\n");
}

int main() {
    int TT;
    scanf("%d", &TT);
    REP(tt, TT) {
        printf("Case #%d: ", tt+1);
        licz();
    }
}



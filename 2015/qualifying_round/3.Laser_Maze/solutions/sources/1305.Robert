#include "stdafx.h"

#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <queue>
#include <tuple>
#include <limits>

void maze()
{
    static bool reachable[100][100], next[100][100], wall[4][100][100];
    static char map[100][100];
    int M, N, Gm, Gn, T;
    scanf("%d", &T);
    for (int t = 0; t < T; ++t)
    {
        scanf("%d %d\n", &M, &N);
        for (int m = 0; m < M; ++m)
        {
            for (int n = 0; n < N; ++n)
            {
                reachable[m][n] = false;
                scanf("%c", &map[m][n]);
                if (map[m][n] == 'S')
                {
                    reachable[m][n] = true;
                    map[m][n] = '.';
                }
                if (map[m][n] == 'G')
                {
                    Gm = m;
                    Gn = n;
                    map[m][n] = '.';
                }
                for (int r = 0; r < 4; ++r)
                    wall[r][m][n] = (map[m][n] != '.');
            }
            scanf("\n");
        }
        for (int m = 0; m < M; ++m)
            for (int n = 0; n < N; ++n)
            {
                int laser = -1;
                switch (map[m][n])
                {
                case '<': laser = 0; break;
                case '^': laser = 1; break;
                case '>': laser = 2; break;
                case 'v': laser = 3; break;
                }
                if (laser >= 0)
                {
                    for (int r = 0; r < 4; ++r)
                    {
                        switch ((laser + r) % 4)
                        {
                        case 0:
                            for (int i = n - 1; i >= 0 && map[m][i] == '.'; --i)
                                wall[r][m][i] = true;
                            break;
                        case 1:
                            for (int i = m - 1; i >= 0 && map[i][n] == '.'; --i)
                                wall[r][i][n] = true;
                            break;
                        case 2:
                            for (int i = n + 1; i < N && map[m][i] == '.'; ++i)
                                wall[r][m][i] = true;
                            break;
                        case 3:
                            for (int i = m + 1; i < M && map[i][n] == '.'; ++i)
                                wall[r][i][n] = true;
                            break;
                        }
                    }
                }
            }
        int best = -1;
        for (int r = 1; best == -1 && r < 30000; ++r)
        {
            for (int m = 0; m < M; ++m)
                for (int n = 0; n < N; ++n)
                    next[m][n] = false;
            for (int m = 0; m < M; ++m)
                for (int n = 0; n < N; ++n)
                    if (reachable[m][n])
                        for (int d = 0; d < 4; ++d)
                        {
                            int m2 = m, n2 = n;
                            switch (d)
                            {
                            case 0: --n2; break;
                            case 1: --m2; break;
                            case 2: ++n2; break;
                            case 3: ++m2; break;
                            }
                            if (m2 >= 0 && m2 < M && n2 >= 0 && n2 < N && !wall[r % 4][m2][n2])
                            {
                                next[m2][n2] = true;
                                if (m2 == Gm && n2 == Gn)
                                    best = r;
                            }
                        }
            for (int m = 0; m < M; ++m)
                for (int n = 0; n < N; ++n)
                    reachable[m][n] = next[m][n];
        }
        if (best < 0)
            printf("Case #%d: impossible\n", t + 1);
        else
            printf("Case #%d: %d\n", t + 1, best);
    }
}

#ifndef DEV_MODE
int main(int argc, char* argv[])
{
    maze();
    return 0;
}
#endif

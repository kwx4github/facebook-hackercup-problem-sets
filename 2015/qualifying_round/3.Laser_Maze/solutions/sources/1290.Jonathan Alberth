#include <bits/stdc++.h>
using namespace std;

char grid[4][105][105];
int m, n;
string ord=">v<^";
int di[]={ 0, 1, 0,-1};
int dj[]={ 1, 0,-1, 0};

void fill(int i, int j, int dir, int ind){
    if(i<0 || i>=m || j<0 || j>=n) return;
    if(grid[ind][i][j]!='.' && grid[ind][i][j]!='*') return;
    grid[ind][i][j]='*';
    fill(i+di[dir], j+dj[dir], dir, ind);
}
void complete(int ind){
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            int dir = ord.find(grid[ind][i][j]);
            if(dir!=string::npos){
                dir = (dir+ind)%4;
                fill(i+di[dir], j+dj[dir], dir, ind);
            }
        }
    }
}

int bfs(int ii, int ij, int fi, int fj){
    map< tuple<int,int,int>, int > ds;
    ds[make_tuple(ii, ij, 0)]=0;
    queue< tuple<int,int,int> > q;
    q.push(make_tuple(ii, ij, 0));
    while(!q.empty()){
        auto v = q.front(); q.pop();
        int pi = get<0>(v);
        int pj = get<1>(v);
        int ind = get<2>(v);
        if(pi==fi && pj==fj) return ds[v];
        for(int d=0; d<4; d++){
            int ni = pi+di[d];
            int nj = pj+dj[d];
            int nind = (ind+1)%4;
            if(ni<0 || ni>=m || nj<0 || nj>=n) continue;
            if(grid[nind][ni][nj]!='.') continue;
            auto to = make_tuple(ni, nj, nind);
            if(ds.count(to)) continue;
            ds[to] = ds[v]+1;
            q.push(to);
        }
    }
    return -1;
}

int main(){
    freopen("c.in", "r", stdin);
    freopen("c.out", "w", stdout);

    int t;
    cin>>t;

    for(int tc=1; tc<=t; tc++){
        cin>>m>>n;
        int ii, ij, fi, fj;
        for(int i=0; i<m; i++){
            cin>>grid[0][i];
            for(int j=0; j<n; j++){
                if(grid[0][i][j]=='S'){
                    ii = i;
                    ij = j;
                    grid[0][i][j]='.';
                }
                if(grid[0][i][j]=='G'){
                    fi = i;
                    fj = j;
                    grid[0][i][j]='.';
                }
            }
        }
        for(int i=1; i<4; i++)
            memcpy(grid[i], grid[0], sizeof grid[0]);
        for(int i=0; i<4; i++)
            complete(i);

        int ans = bfs(ii, ij, fi, fj);

        cout<<"Case #"<<tc<<": ";
        if(ans==-1) cout<<"impossible"<<endl;
        else cout<<ans<<endl;
    }

    return 0;
}

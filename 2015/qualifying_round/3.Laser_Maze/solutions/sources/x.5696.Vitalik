import java.io.*;
import java.util.*;

public class C {
    public static void main(String[] args) {
        new C().run();
    }

    BufferedReader br;
    StringTokenizer in;
    PrintWriter out;

    public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens())
            in = new StringTokenizer(br.readLine());
        return in.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    public boolean wall(char[][] map, int x, int y) {
        return x < 0 || x >= map.length || y < 0 || y >= map[0].length || map[x][y] == '#';
    }

    public void solve() throws IOException {
        int n = nextInt();
        int m = nextInt();

        String dir = ">v<^";

        int[] dx = new int[]{0, 1, 0, -1};
        int[] dy = new int[]{1, 0, -1, 0};

        char[][] map = new char[n][m];
        boolean[][][] closed = new boolean[n][m][dir.length()];
        for (int i = 0; i < n; i++) {
            map[i] = nextToken().toCharArray();
        }

        int xs = 0, ys = 0;
        int xe = 0, ye = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (map[i][j] == 'S') {
                    xs = i;
                    ys = j;
                }
                if (map[i][j] == 'G') {
                    xe = i;
                    ye = j;
                }

                if (dir.indexOf(map[i][j]) == -1)
                    continue;
                int d = dir.indexOf(map[i][j]);

                for (int t = 0; t < 4; t++) {
                    int x = i;
                    int y = j;
                    while (!wall(map, x, y)) {
                        closed[x][y][t] = true;
                        x += dx[d];
                        y += dy[d];
                    }
                    d = (d + 1) % 4;
                }
            }
        }

        int[][][] p = new int[n][m][4];
        p[xs][ys][0] = 1;
        Queue<Integer> qx = new ArrayDeque<Integer>();
        Queue<Integer> qy = new ArrayDeque<Integer>();
        Queue<Integer> qt = new ArrayDeque<Integer>();

        qx.add(xs);
        qy.add(ys);
        qt.add(0);

        while (qx.size() > 0) {
            int x = qx.poll();
            int y = qy.poll();
            int t = qt.poll();
            for (int i = 0; i < 4; i++) {
                int xx = x + dx[i];
                int yy = y + dy[i];
                int tt = (t + 1) % 4;
                if (!wall(map, xx, yy) && !closed[xx][yy][tt] && p[xx][yy][tt] == 0) {
                    p[xx][yy][tt] = p[x][y][t] + 1;
                    qx.add(xx);
                    qy.add(yy);
                    qt.add(tt);
                }
            }
        }

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < 4; i++)
            min = Math.min(min, p[xe][ye][i] == 0 ? Integer.MAX_VALUE : p[xe][ye][i] - 1);

        if (min == Integer.MAX_VALUE) {
            out.println("impossible");
        } else {
            out.println(min);
        }
    }

    public void run() {
        try {
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");

            int t = nextInt();
            for (int i = 0; i < t; i++) {
                System.err.println("test case " + (i + 1));
                out.print("Case #" + (i + 1) + ": ");
                solve();
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
}

#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<queue>
#include<stack>
typedef long long int uli;
using namespace std;

const int mx = 123;
const int inf = 1e8;
char b[mx][mx];
int dst[mx][mx][4];
int up[mx][mx],dwn[mx][mx],lft[mx][mx],rht[mx][mx];
int n,m,sr,sc,gr,gc;
string dirs="^>v<";

int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};

struct st{
    int r,c,m4,d;
    st(int r, int c, int m4, int d):r(r),c(c),m4(m4),d(d){}
};
void dfs(){
    queue<st>q;
    q.push(st(sr,sc,0,0));
    for(int i=0;i<mx;i++)
        for(int j=0;j<mx;j++)
            for(int k=0;k<4;k++)
                dst[i][j][k]=inf;
    dst[sr][sc][0]=0;
    while(!q.empty()){
        int r = q.front().r;
        int c = q.front().c;
        int ds = q.front().d;
        int m4 = q.front().m4;

        q.pop();
        if(dst[r][c][m4]!=ds) continue;

        int nm4 = (m4+1)%4;
        for(int i=0;i<4;i++){
            int nr = r+dr[i];
            int nc = c+dc[i];
            if(0<=nr && nr<n)
            if(0<=nc && nc<m)
            if(b[nr][nc]=='.' || b[nr][nc]=='G' || b[nr][nc]=='S'){
                bool ok = true;
                int d;
                if(up[nr][nc]!=-1){
                    d = (up[nr][nc]+nm4)%4;
                    if(d==2)ok = false;
                }
                if(rht[nr][nc]!=-1){
                    d = (rht[nr][nc]+nm4)%4;
                    if(d==3)ok = false;
                }
                if(dwn[nr][nc]!=-1){
                    d = (dwn[nr][nc]+nm4)%4;
                    if(d==0)ok = false;
                }
                if(lft[nr][nc]!=-1){
                    d = (lft[nr][nc]+nm4)%4;
                    if(d==1)ok = false;
                }
                if(ok){
                    int nd =1 + ds;
                    if(nd<dst[nr][nc][nm4]){
                        dst[nr][nc][nm4] = nd;
                        q.push(st(nr,nc,nm4,nd));
                    }
                }
            }
        }
    }
 }
 int gidx(char ch){
    for(int k=0;k<4;k++){
        if(ch==dirs[k]){
            return k;
        }
    }
    return -1;
 }
int main(){
    freopen("c.in","r",stdin);
    freopen("c.out","w",stdout);
    int t;
    scanf("%d",&t);
    for(int tt=1;tt<=t;tt++){
        scanf("%d %d",&n,&m);
        for(int i=0;i<n;i++){
            scanf("%s",&b[i]);
            for(int j=0;j<m;j++){
                if(b[i][j]=='S') sr=i,sc=j;
                else if(b[i][j]=='G')gr=i,gc=j;
            }
        }

        for(int i=0;i<m;i++) up[0][i]=gidx(b[0][i]);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                up[i][j]=up[i-1][j];
                if(b[i][j]=='#') up[i][j]=-1;

                for(int k=0;k<4;k++){
                    if(b[i][j]==dirs[k]){
                        up[i][j]=k;
                    }
                }
            }
        }
        for(int i=0;i<m;i++)dwn[n-1][i]=gidx(b[n-1][i]);
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<m;j++){
                dwn[i][j]=dwn[i+1][j];
                if(b[i][j]=='#') dwn[i][j]=-1;
                for(int k=0;k<4;k++){
                    if(b[i][j]==dirs[k]){
                        dwn[i][j]=k;
                    }
                }
            }
        }

        for(int i=0;i<n;i++)lft[i][0]=gidx(b[i][0]);
        for(int i=0;i<n;i++){
            for(int j=1;j<m;j++){
                lft[i][j]=lft[i][j-1];
                if(b[i][j]=='#') lft[i][j]=-1;
                for(int k=0;k<4;k++){
                    if(b[i][j]==dirs[k]){
                        lft[i][j]=k;
                    }
                }
            }
        }

        for(int i=0;i<n;i++)rht[i][m-1]=gidx(b[i][m-1]);
        for(int i=0;i<n;i++){
            for(int j=m-2;j>=0;j--){
                rht[i][j]=rht[i][j+1];
                if(b[i][j]=='#') rht[i][j]=-1;
                for(int k=0;k<4;k++){
                    if(b[i][j]==dirs[k]){
                        rht[i][j]=k;
                    }
                }
            }
        }
        dfs();
        int ans = inf;

        for(int i=0;i<4;i++)ans = min(ans,dst[gr][gc][i]);
        if(ans>=inf) printf("Case #%d: impossible\n",tt);
        else printf("Case #%d: %d\n",tt,ans);
    }
    return 0;
}

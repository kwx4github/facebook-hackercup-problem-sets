/*
    Tanvir Hasan Anick
    University of Asia pacific
*/
/**Header file**/
#include<cstdio>
#include<iomanip>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<string>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<sstream>
#include<stack>
#include<list>
#include<iostream>
#include<assert.h>

/**Define file I/O **/
#define f_input freopen("input.txt","r",stdin)
#define f_output freopen("output.txt","w",stdout)

/**Define memory set function**/
#define mem(x,y) memset(x,y,sizeof(x))
#define CLEAR(x) memset(x,0,sizeof(x))

/**Define function and object**/
#define pb push_back
#define Sort(v) sort(v.begin(),v.end())
#define RSort(v) sort(v.rbegin(),v.rend())
#define CSort(v,C) sort(v.begin(),v.end(),C)
#define all(v) (v).begin(),(v).end()
#define sqr(x) ((x)*(x))
#define find_dist(a,b) sqrt(sqr(a.x-b.x)+sqr(a.y-b.y))

/**Define constant value**/
#define ERR 1e-9
#define pi (2*acos(0))
#define PI 3.141592653589793

/**Define input**/
#define scanint(a) scanf("%d",&a)
#define scanLLD(a) scanf("%lld",&a)
#define scanstr(s) scanf("%s",s)
#define scanline(l) scanf(" %[^\n]",l);

/**Define Bitwise operation**/
#define check(n, pos) (n & (1<<(pos)))
#define biton(n, pos) (n | (1<<(pos)))
#define bitoff(n, pos) (n & ~(1<<(pos)))

/**Define color**/
#define WHITE 0
#define GREY 1
#define BLACK 2

/**Sync off with stdio**/
#define __ cin.sync_with_stdio(false);\
           cin.tie();

using namespace std;

/**Typedef**/
typedef vector<int> vint;
typedef vector< vint > vint2D;
typedef vector<string> vstr;
typedef vector<char>vchar;
typedef vector< vchar >vchar2D;
typedef queue<int> Qi;
typedef queue< Qi > Qii;
typedef map<int,int> Mii;
typedef map<string,int> Msi;
typedef map<int,string> Mis;
typedef stack<int> stk;
typedef pair<int,int> pp;
typedef pair<int, pp > ppp;
typedef long long int LLD;
const int inf=0x7FFFFFFF;

/**Template & structure**/
namespace my{
struct point_int{int x,y;point_int(){}point_int(int a,int b){x=a,y=b;}}; ///Point for x,y (int) coordinate in 2D space
struct point_double{double x,y;point_double(){}point_double(double a,double b){x=a,y=b;}}; ///Point for x,y (double) coordinate in 2D space
struct Node{int v,w;Node() {}bool operator<(const Node &a)const{return w>a.w;}Node(int _v,int _w){v=_v,w=_w;}};///Node for Dijkstra
template<class T>T gcd(T a,T b){return b == 0 ? a : gcd(b, a % b);}
template<typename T>T lcm(T a, T b) {return a / gcd(a,b) * b;}
template<class T>T big_mod(T n,T p,T m){if(p==0)return (T)1;T x=big_mod(n,p/2,m);x=(x*x)%m;if(p&1)x=(x*n)%m;return x;}
template<class T>T multiplication(T n,T p,T m){if(p==0)return (T)0;T x=multiplication(n,p/2,m);x=(x+x)%m;if(p&1)x=(x+n)%m;return x;}
template<class T>T my_pow(T n,T p){if(p==0)return 1;T x=my_pow(n,p/2);x=(x*x);if(p&1)x=(x*n);return x;} ///n to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}/// distance between a & b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}/// extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}/// convert a number to string
template<class T> inline T Mod(T n,T m) {return (n%m+m)%m;} ///For Positive Negative No.
template<class T> T MIN3(T a,T b,T c) {return min(a,min(b,c));} /// minimum of 3 number
template<class T> T MAX3(T a,T b,T c) {return max(a,max(b,c));} ///maximum of 3 number
template <class T> void print_vector(T &v){int sz=v.size();if(sz)cout<<v[0];for(int i = 1; i < sz; i++)cout << ' '<<v[i];cout<<endl;}/// prints all elements in a vector
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
bool isConsonant(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}}
/**Shortcut input function**/
int read_int(){int n;scanf("%d",&n);return n;}
int read_LLD(){LLD n;scanf("%lld",&n);return n;}
inline int buffer_input() { char inp[1000]; scanstr(inp); return atoi(inp); }

/**Direction**/
///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};int row[8] = {1, 1, 0, -1, -1, -1, 0, 1}; ///8 Direction
int col[4] = {1, 0, -1, 0};int row[4] = {0, 1, 0, -1}; ///4 Direction
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};///Knight Direction
///int dx[]={-1,-1,+0,+1,+1,+0};int dy[]={-1,+1,+2,+1,-1,-2}; ///Hexagonal Direction


/******************************Ajaira Jinish Sesh******************************/
struct info
{
    int x,y,direction;
    info(int x=0,int y=0,int direction=0):x(x),y(y),direction(direction){};
    bool operator==(const info &a)const
    {
        return x==a.x and y==a.y;
    }
};
vector<info>Laser,NEWLASER[4];
char Grid[105][105];
int Dist[105][105];
int parent[105][105];
int N,M;
bool isTurrtes(int x,int y)
{
    char c=Grid[x][y];
    if(c=='>'||c=='<'||c=='^'||c=='v')return true;
    return false;
}
bool Move0(info a,info src)
{
    for(int i=a.x+1;i<N;i++)
    {
        if(Grid[i][a.y]=='#')return false;
        if(isTurrtes(i,a.y))return false;
        if(i==src.x and a.y==src.y)return true;
    }
    return false;
}
bool Move1(info a,info src)
{
    for(int i=a.y-1;i>=0;i--)
    {
        if(Grid[a.x][i]=='#')return false;
        if(isTurrtes(a.x,i))return false;
        if(a.x==src.x and i==src.y)return true;
    }
    return false;
}
bool Move2(info a,info src)
{
    for(int i=a.x-1;i>=0;i--)
    {
        if(Grid[i][a.y]=='#')return false;
        if(isTurrtes(i,a.y))return false;
        if(i==src.x and a.y==src.y)return true;
    }
    return false;
}
bool Move3(info a,info src)
{
    for(int i=a.y+1;i<M;i++)
    {
        if(Grid[a.x][i]=='#')return false;
        if(isTurrtes(a.x,i))return false;
        if(a.x==src.x and i==src.y)return true;
    }
    return false;
}
vector<info>GETNEW(const vector<info> &L,int step)
{
    vector<info>ret;
    int sz=L.size();
    for(int i=0;i<sz;i++)
    {
        int x=(L[i].direction+step)%4;
        ret.pb(info(L[i].x,L[i].y,x));
    }
    return ret;
}
bool isInAttact(const vector<info>&L,const info &P)
{
    int sz=L.size();
    for(int i=0;i<sz;i++)
    {
        if(L[i].direction==0)
        {
            if(Move0(L[i],P))return true;
        }
        if(L[i].direction==1)
        {
            if(Move1(L[i],P))return true;
        }
        if(L[i].direction==2)
        {
            if(Move2(L[i],P))return true;
        }
        if(L[i].direction==3)
        {
            if(Move3(L[i],P))return true;
        }
    }
    return false;
}
int bfs(info src)
{
    mem(Dist,-1);
    queue<info>Q;
    Q.push(src);
    Dist[src.x][src.y]=0;
    while(!Q.empty())
    {
        info u=Q.front();
        Q.pop();
        for(int i=0;i<4;i++)
        {
            int x=u.x+row[i];
            int y=u.y+col[i];
            if(x<0||y<0||x>=N||y>=M)continue;
            if(Grid[x][y]!='.'and Grid[x][y]!='G' and Grid[x][y]!='S')continue;
            if(Dist[x][y]!=-1)continue;
            int temp=u.direction+1;
            //cout<<"next temp "<<temp<<endl;
            if(isInAttact(NEWLASER[temp%4],info(x,y,-1)))
            {
                //cout<<"attact"<<endl;
                bool flag=true;
                for(int j=0;j<4;j++)
                {
                    if(i==j)continue;
                    int X=u.x+row[j];
                    int Y=u.y+col[j];
                    //cout<<X<<" -> "<<Y<<endl;
                    if(X<0||Y<0||X>=N||Y>=M)continue;
                    if(Grid[X][Y]!='.'and Grid[X][Y]!='G' and Grid[X][Y]!='S')continue;
                    if(isInAttact(NEWLASER[temp%4],info(X,Y,-1)))
                    {
                        //cout<<"can attact "<<X<<" "<<Y<<endl;
                        continue;
                    }
                    flag=false;
                    //cout<<"Attact goto "<<X<<" "<<Y<<endl;
                    Dist[u.x][u.y]=-1;
                    Q.push(info(X,Y,temp));
                    if(Grid[X][Y]=='G')return temp;
                }
                //cout<<"flag "<<flag<<endl;
                if(flag)return -1;
            }
            else
            {
                Dist[x][y]=temp;
                Q.push(info(x,y,temp));
            }
            if(Grid[x][y]=='G')return temp;
        }
    }
}
int main()
{
    #ifdef _ANICK_
    f_input;
    f_output;
    #endif // _ANICK_
    int test=buffer_input();
    for(int t=1;t<=test;t++)
    {
        Laser.clear();
        NEWLASER[0].clear();
        NEWLASER[1].clear();
        NEWLASER[2].clear();
        NEWLASER[3].clear();
        mem(Dist,-1);
        N=buffer_input();
        M=buffer_input();
        for(int i=0;i<N;i++)scanf("%s",Grid[i]);
        info source;
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<M;j++)
            {
                if(Grid[i][j]=='S')source=info(i,j,0);
                else if(Grid[i][j]=='v')Laser.pb(info(i,j,0));
                else if(Grid[i][j]=='<')Laser.pb(info(i,j,1));
                else if(Grid[i][j]=='^')Laser.pb(info(i,j,2));
                else if(Grid[i][j]=='>')Laser.pb(info(i,j,3));
            }
        }
        NEWLASER[0]=GETNEW(Laser,0);
        NEWLASER[1]=GETNEW(Laser,1);
        NEWLASER[2]=GETNEW(Laser,2);
        NEWLASER[3]=GETNEW(Laser,3);
        int b=bfs(source);
        printf("Case #%d: ",t);
        if(b>=0)printf("%d\n",b);
        else printf("impossible\n");
    }
    return 0;
}

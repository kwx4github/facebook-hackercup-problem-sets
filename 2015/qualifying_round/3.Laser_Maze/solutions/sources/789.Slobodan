#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <vector>
#define ffor(_a,_f,_t) for(int _a=(_f),__t=(_t);_a<__t;_a++)
#define all(_v) (_v).begin() , (_v).end()
#define sz size()
#define pb push_back
#define SET(__set, val) memset(__set, val, sizeof(__set))
#define FOR(__i, __n) ffor (__i, 0, __n)
#define syso system("pause")
#define mp make_pair
typedef long long LL;

using namespace std;
typedef pair<pair<int, int>, int> qType;

int vec[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

int g[100][100];
int n, m;

int cost[100][100][4];
queue<qType> q;

bool valid(int r, int c) {
  return r > -1 && c > -1 && r < n && c < m;
}

bool willSurvive(int r, int c, int t) {
  FOR (dir, 4) {
    int nr = r, nc = c;
    while (valid(nr, nc) && g[nr][nc] < 0) {
      nr += vec[dir][0];
      nc += vec[dir][1];
    }
    if (valid(nr, nc) && g[nr][nc] < 4 && (g[nr][nc] + t) % 4 == dir)
      return false;
  }
  
  return true;
}

int main(){
  freopen("2.out","wt", stdout);
  freopen("2.in","r", stdin);
  int tests;
  cin >> tests;
  FOR (test, tests) {
    while (!q.empty())
      q.pop();
    SET(cost, 255);
    cin >> n >> m;
    int goalr, goalc;
    FOR (i, n) {
      string str;
      cin >> str;
      FOR (j, m)
        if (str[j] == 'S') {
          q.push(make_pair(make_pair(i, j), 0));
          cost[i][j][0] = 0;
          g[i][j] = -17;
        }
        else if (str[j] == 'G') {
          goalr = i;
          goalc = j;
          g[i][j] = -199;
        }
        else if (str[j] == '.')
          g[i][j] = -62394;
        else if (str[j] == '#')
          g[i][j] = 4;
        else if (str[j] == '<')
          g[i][j] = 0;
        else if (str[j] == '^')
          g[i][j] = 1;
        else if (str[j] == '>')
          g[i][j] = 2;
        else if (str[j] == 'v')
          g[i][j] = 3;
    }
    
    int ret = -1;
    while (!q.empty()) {
      qType gel = q.front();
      q.pop();
      int r = gel.first.first, c = gel.first.second, t = gel.second;
      if (r == goalr && c == goalc) {
        ret = cost[r][c][t];
        break;
      }
      FOR (dir, 4) {
        int nr = r + vec[dir][0], nc = c + vec[dir][1], nt = (t + 1) % 4;
        if (valid(nr, nc) && g[nr][nc] < 0 && cost[nr][nc][nt] == -1 && willSurvive(nr, nc, nt)) {
          cost[nr][nc][nt] = cost[r][c][t] + 1;
          q.push(make_pair(make_pair(nr, nc), nt));
        }
      }
    }
    
    if (ret == -1)
      cout << "Case #" << test + 1 << ": " << "impossible" << "\n";
    else
      cout << "Case #" << test + 1 << ": " << ret << "\n";
  }
  return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>
using namespace std;
template<class T> inline void checkmin(T &a, T b) { if (b < a) a = b; }//NOTES:checkmin( 
template<class T> inline void checkmax(T &a, T b) { if (b > a) a = b; }//NOTES:checkmax( 
#define SIZE(x) ((int)(x).size()) 
#define for0(i,n) for(int i=0;i<(n);i++) 
#define for1(i,n) for(int i=1;i<=(n);i++) 
#define for0r(i,n) for(int i=(n)-1;i>=0;i--) 
#define for1r(i,n) for(int i=(n);i>=1;i--) 
typedef long long ll;
typedef pair<int, int> pii;

char d[110][110];
int c[110][110];
int sx, sy;
int ex, ey;

int ux[4] = { 0, 1, 0, -1 };
int uy[4] = { 1, 0, -1, 0 };

int n, m;

void read() {
  scanf("%d %d ", &n, &m);
  for0(i, n) {
    gets(d[i]);
    for0(j, m) {
      c[i][j] = -1;
      switch (d[i][j]) {
      case 'S':
        sx = i;
        sy = j;
        d[i][j] = '.';
        break;
      case 'G':
        ex = i;
        ey = j;
        d[i][j] = '.';
        break;
      case '>':
        c[i][j] = 0;
        break;
      case 'v':
        c[i][j] = 1;
        break;
      case '<':
        c[i][j] = 2;
        break;
      case '^':
        c[i][j] = 3;
        break;
      }
    }
  }
}

int ban[110][110][4];

bool check(int x, int y) {
  return x >= 0 && x < n && y >= 0 && y < m;
}

void init() {
  memset(ban, 0, sizeof(ban));
  for0(k, 4) {
    for0(i, n) for0(j, m) {
      if (~c[i][j]) {
        int cu = (k + c[i][j]) % 4;
        for (int x = i + ux[cu], y = j + uy[cu]; check(x, y) && d[x][y] == '.'; x += ux[cu], y += uy[cu])
          ban[x][y][k] = true;
      }
    }
  }
}

int f[110][110][4];

struct Node {
  int x, y, u;

  int& F() {
    return f[x][y][u];
  }
};

bool check(int x, int y, int u) {
  return check(x, y) && !~f[x][y][u] && d[x][y] == '.' && !ban[x][y][u];
}

void solve() {
  read();
  init();
  memset(f, -1, sizeof(f));
  queue<Node> Q;
  f[sx][sy][0] = 0;
  Q.push({ sx, sy, 0 });
  while (!Q.empty()) {
    Node now = Q.front();
    Q.pop();
    int nu = (now.u + 1) % 4;
    for0(i, 4) {
      int nx = now.x + ux[i];
      int ny = now.y + uy[i];
      if (check(nx, ny, nu)) {
        Node nn = { nx, ny, nu };
        nn.F() = now.F() + 1;
        Q.push(nn);
        if (nx == ex && ny == ey) {
          printf("%d\n", nn.F());
          return;
        }
      }
    }
  }
  puts("impossible");
}

int main() {
  freopen("laser_maze.txt", "r", stdin);
  freopen("laser_maze.out", "w", stdout);
  int T, TC = 0;
  scanf("%d", &T);
  while (++TC <= T) {
    printf("Case #%d: ", TC);
    solve();
  }
  return 0;
}

import Queue

def solveTestCase(id):
	m, n = raw_input().split()
	m = int(m)
	n = int(n)

	maze = []
	for i in xrange(m):
		maze.append([])
		for ch in raw_input():
			maze[i].append(ch)

	dx = [-1, 0, 1, 0]
	dy = [0, 1, 0, -1]

	laserList = []
	for i in xrange(m):
		for j in xrange(n):
			if maze[i][j] == 'S':
				startX, startY = i, j
			if maze[i][j] == 'G':
				goalX, goalY = i, j
			if maze[i][j] == '^':
				laserList.append((i, j, 0))
				maze[i][j] = '#'
			if maze[i][j] == '>':
				laserList.append((i, j, 1))
				maze[i][j] = '#'
			if maze[i][j] == 'v':
				laserList.append((i, j, 2))
				maze[i][j] = '#'
			if maze[i][j] == '<':
				laserList.append((i, j, 3))
				maze[i][j] = '#'

	distance = {}
	q = Queue.Queue()
	q.put((startX, startY, 0))
	distance[(startX, startY, 0)] = 0

	while not q.empty():
		sx, sy, t = q.get()
		if sx == goalX and sy == goalY:
			print "Case %d: %d" % (id, distance[(sx, sy, t)])
			return True

		for (fx, fy) in zip(dx, dy):
			gx, gy = sx + fx, sy + fy
			if gx < 0 or gx >= m or gy < 0 or gy >= n or maze[gx][gy] == '#':
				continue
			isKilled = False
			for lx, ly, d in laserList:
				d = (d + t + 1) % 4
				while True:
					lx += dx[d]
					ly += dy[d]
					if lx < 0 or lx >= m or ly < 0 or ly >= n or maze[lx][ly] == '#':
						break
					if lx == gx and ly == gy:
						isKilled = True
						break
			if not isKilled:
				gt = (t + 1) % 4
				if (gx, gy, gt) not in distance:
					distance[(gx, gy, gt)] = distance[(sx, sy, t)] + 1
					q.put((gx, gy, gt))
	print "Case %d: impossible" % (id)

if __name__ == "__main__":
	T = int(raw_input())
	for t in range(T):
		solveTestCase(t + 1)
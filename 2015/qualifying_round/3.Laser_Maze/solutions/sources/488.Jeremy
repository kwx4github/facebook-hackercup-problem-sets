import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for (int t = 0; t < T; t++) {
			
			int M = sc.nextInt();
			int N = sc.nextInt();
			char[][][] mazes = new char[4][M][N];
			int startRow = -10, startCol = -10;
			int endRow = -10, endCol = -10;
			
			char[] turrets = {'^','>','v','<'};
			
			for (int i = 0; i < M; i++) {
				String s = sc.next();
				for (int j = 0; j < N; j++) {
					
					
					for (int k = 0; k < 4; k++) {
						char c = s.charAt(j);
						for (int l = 0; l < 4; l++) {
							if (c == turrets[l]) {
							    c = turrets[(l+k)% 4];
							    break;
						    }
						}
						if (c == 'S') {
							startRow = i; startCol = j;
							c = '.';
						}
						if (c == 'G') {
							endRow = i; endCol = j;
							c = '.';
						}
						mazes[k][i][j] = c;
					}
				}
			}
			
			int[] deltaY = {0,1,0,-1};
			int[] deltaX = {-1,0,1,0};
			for (int m = 0; m < 4; m++) {
				for (int i = 0; i < M; i++) {
					for (int j = 0; j < N; j++) {
						for (int k = 0; k < 4; k++) {
							if (turrets[k] == mazes[m][i][j]) {
								int x = i + deltaX[k], y = j + deltaY[k];
								while (x >= 0 && x < M && y >= 0 && y < N && 
									   (mazes[m][x][y] == '.' || mazes[m][x][y] == 'f')) {
									mazes[m][x][y] = 'f';
									x = x + deltaX[k];
									y = y + deltaY[k];
								}
							}
						}
					}
				}
			}
			/*
			for (int m = 0; m < 4; m++) {
				System.out.println("Maze " + m);
				for (int i = 0; i < M; i++) {
					for (int j = 0; j < N; j++) {
						System.out.print(mazes[m][i][j]);
					}
					System.out.println();
				}
			}*/
			
			
			Queue<Position> q = new LinkedList<Position>();
			HashSet<Position> v = new HashSet<Position>();
			Position start = new Position(startRow,startCol,0);
			v.add(start);
			q.add(start);
			
			int foundSteps = -1;
			while (q.size() > 0 && foundSteps < 0) {
				Position p = q.remove();
				Position[] nextPs = {new Position(p.x-1,p.y,p.move+1),
						new Position(p.x+1,p.y,p.move+1),
						new Position(p.x,p.y-1,p.move+1),
						new Position(p.x,p.y+1,p.move+1)};
				for (Position nextP: nextPs) {
					if (nextP.x >= 0 && nextP.x < M && nextP.y >= 0 && nextP.y < N &&
						mazes[nextP.move % 4][nextP.x][nextP.y] == '.' && 
						v.contains(nextP) == false) {
						if (nextP.x == endRow && nextP.y == endCol) {
							foundSteps = nextP.move;
							break;
						}
						v.add(nextP);
						q.add(nextP);
					}
				}
			}
			
			System.out.print("Case " + (t+1) + ": ");
			if (foundSteps > 0) 
				System.out.println(foundSteps);
			else
				System.out.println("impossible");
				
		}
	}
}

class Position {
	int x, y, move;
	
	Position(int x, int y, int move) { this.x = x; this.y = y; this.move = move; }
	
	@Override
	public int hashCode() {
		return  x * 101 * 101 + y * 101 + move % 4; 
	}
	
	@Override
	public boolean equals(Object other) {
		if (other == null) return false;
		if (this == other) return true;
		if (this.getClass() != other.getClass()) return false;
		
		Position that = (Position) other;
		return this.x == that.x && this.y == that.y && this.move % 4 == that.move % 4;
	}
}
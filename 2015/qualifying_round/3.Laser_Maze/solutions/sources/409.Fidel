#include <iostream>
#include <cstring>
using namespace std;

#define MAXN 128

struct turret {
	int i, j, d;
} p[MAXN*MAXN];

struct state {
	int i, j, d;
	state(int ii=0, int jj=0, int dd=0) {
		i=ii; j=jj; d=dd;
	}
} s[MAXN*MAXN*4];

int di[4] = { 0, -1, 0, 1};
int dj[4] = {-1,  0, 1, 0};

//void print(char m[MAXN][MAXN], int N, int M, int ii, int jj) {
//	for (int i=1; i<=N; i++) {
//		for (int j=1; j<=M; j++) {
//			if (i == ii && j == jj) cout << 'O';
//			else cout << m[i][j];
//		}
//		cout << endl;
//	}
//}

int d[4][MAXN][MAXN];

int main() {
	int t, T, N, M, i, j, Si, Ei, Sj, Ej, P, ii, jj, dir, S, E, dist, RES;
	char tmpc, m[MAXN][MAXN], n[4][MAXN][MAXN];
	
	cin >> T;
	for (t=1; t<=T; t++) {
		cin >> N >> M; P = 0;
		for (i=1; i<=N; i++) for (j=1; j<=M; j++) {
			cin >> tmpc;
			if (tmpc == 'S') { Si = i; Sj = j; m[i][j] = '.'; }
			else if (tmpc == 'G') { Ei = i; Ej = j; m[i][j] = '.'; }
			else if (tmpc == '<') { p[P].i = i; p[P].j = j; p[P].d = 0; P++; m[i][j] = '#'; }
			else if (tmpc == '^') { p[P].i = i; p[P].j = j; p[P].d = 1; P++; m[i][j] = '#'; }
			else if (tmpc == '>') { p[P].i = i; p[P].j = j; p[P].d = 2; P++; m[i][j] = '#'; }
			else if (tmpc == 'v') { p[P].i = i; p[P].j = j; p[P].d = 3; P++; m[i][j] = '#'; }
			else m[i][j] = tmpc;
		}
		for (i=0; i<=N+1; i++) m[i][0] = m[i][M+1] = '#';
		for (j=0; j<=M+1; j++) m[0][j] = m[N+1][j] = '#';
		
		for (i=0; i<4; i++) {
			memcpy(n[i], m, sizeof(m));
			for (j=0; j<P; j++) {
				dir = (p[j].d+i)%4;
				ii = p[j].i+di[dir]; jj = p[j].j+dj[dir];
				while (m[ii][jj] == '.') {
					n[i][ii][jj] = '#';
					ii += di[dir]; jj += dj[dir];
				}
			}
		}
		
		memset(d, -1, sizeof(d)); d[0][Si][Sj] = 0;
		S = E = 0; s[E++] = state(Si, Sj, 0);
		while (S < E) {
			i = s[S].i; j = s[S].j; dist = s[S++].d;
			for (dir=0; dir<4; dir++) {
				ii = i+di[dir]; jj = j+dj[dir];
				if (n[(dist+1)%4][ii][jj] == '.' && d[(dist+1)%4][ii][jj] == -1) {
					s[E++] = state(ii, jj, dist+1);
					d[(dist+1)%4][ii][jj] = dist+1;
				}
			}
		}
		
		RES = -1;
		for (i=0; i<4; i++) if (d[i][Ei][Ej] != -1 && (RES == -1 || RES > d[i][Ei][Ej])) RES = d[i][Ei][Ej];
		cout << "Case #" << t << ": ";
		if (RES == -1) cout << "impossible" << endl;
		else cout << RES << endl;
	}

	return 0;
}

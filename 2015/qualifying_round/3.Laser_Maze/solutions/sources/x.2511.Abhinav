#include<bits/stdc++.h>
using namespace std;
int n,m;
char grid[100][100];
int turr[100][100][4];
int done[100][100][4];
int starti=-1,startj=-1,endi=-1,endj=-1;
bool isblock(char ch)
{
    if(ch=='^' || ch=='<' || ch=='>' || ch=='v')
        return true;
    if(ch=='#')
        return true;
    return false;
}
void markup(int i,int j,int status)
{
    int k;
    for(k=1;i-k>=0 && isblock(grid[i-k][j])==false ;k++)
        turr[i-k][j][status]=1;
}
void markdown(int i,int j,int status)
{
    int k;
    for(k=1;k+i<m && isblock(grid[i+k][j])==false;k++)
        turr[k+i][j][status]=1;
}
void markleft(int i,int j,int status)
{
    int k;
    for(k=1;j-k>=0 && isblock(grid[i][j-k])==false;k++)
        turr[i][j-k][status]=1;
}
void markright(int i,int j,int status)
{
    int k;
    for(k=1;j+k<n && isblock(grid[i][j+k])==false;k++)
        turr[i][j+k][status]=1;
}
int isposs=0;
void dfs(int ati,int atj,int tillnow)
{
   // cout<<"at "<<ati<<" "<<atj<<" and "<<tillnow%4<<" "<<grid[ati][atj]<<endl;
    //cout<<turr[ati][atj][tillnow%4]<<" "<<done[ati][atj][tillnow%4]<<endl;
    if(ati<0 || ati>=m || atj<0 || atj>=n)
        return;
    if(turr[ati][atj][tillnow%4]==1 && (tillnow!=0))
        return;
    if(isblock(grid[ati][atj]))
        return;
   
   // cout<<"pass"<<endl;
    if(ati==endi && atj==endj)
    {
        if(isposs==0)
            isposs=tillnow;
        else if(isposs>tillnow)
            isposs=tillnow;
        return;
    }
    if(done[ati][atj][tillnow%4]==1)
        return;
    
    done[ati][atj][tillnow%4]=1;
   
    dfs(ati+1,atj,tillnow+1);
    dfs(ati,atj+1,tillnow+1);
    dfs(ati-1,atj,tillnow+1);
    dfs(ati,atj-1,tillnow+1); 
    return;
}
int main()
{
    ios::sync_with_stdio(false);
    int t,T;
    cin>>T;
    for(t=1;t<=T;t++)
    {
        cin>>m>>n;
        int i,j;
        for(i=0;i<m;i++)
        {
            cin>>grid[i];
            for(j=0;j<n;j++)
            {
                for(int k=0;k<4;k++)
                {
                    turr[i][j][k]=0;
                    done[i][j][k]=0;
                }
            }
        }
      
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                int dir=-1;
                if(grid[i][j]=='S')
                {
                    starti=i;
                    startj=j;
                }
                else if(grid[i][j]=='G')
                {
                    endi=i;
                    endj=j;
                }
                else
                if(grid[i][j]=='^')
                {
                    dir=0;
                    markup(i,j,0);
                    markright(i,j,1);
                    markdown(i,j,2);
                    markleft(i,j,3);
                }
                else if(grid[i][j]=='>')
                {
                    dir=1;
                    markright(i,j,0);
                    markdown(i,j,1);
                    markleft(i,j,2);
                    markup(i,j,3);
                }
                else if(grid[i][j]=='v')
                {
                    dir=2;
                    markdown(i,j,0);
                    markleft(i,j,1);
                    markup(i,j,2);
                    markright(i,j,3);
                }
                else if(grid[i][j]=='<')
                {
                    dir=3;
                    markleft(i,j,0);
                    markup(i,j,1);
                    markright(i,j,2);
                    markdown(i,j,3);
                }
                /*if(dir!=-1)
                {
                    markup(i,j,(dir-0)%4);
                    markright(i,j,(dir-1)%4);
                    markdown(i,j,(dir-2)%4);
                    markleft(i,j,(dir-3)%4);
                }*/
                
            }
        }
     //   cout<<"start is "<<starti<<" "<<startj<<endl;
       // cout<<"end is "<<endi<<" "<<endj<<endl;
        isposs=0;
        dfs(starti,startj,0);
        cout<<"Case #"<<t<<": ";
        if(isposs>0)
            cout<<isposs<<endl;
        else
            cout<<"impossible"<<endl;
            
    }
    return 0;
}

#include<bits/stdc++.h>
using namespace std ;

int mat[105][105] , visited[105][105][4] ,  whic[105][105][4] ,  INF = 1000000009 , dis[105][105] , ans ;
int xad[] = { 1 , -1 , 0 , 0 } ;
int yad[] = { 0 ,  0 , 1 , -1 } ;

struct node
{
    int a , b , c ;
};

typedef struct node node ;

int safe ( int x , int y , int ds )
{

    if ( whic[x][y][0] != 0 )
    {
        if ( ( ( ds  + whic[x][y][0] ) % 4 ) == 3 )
            return 0 ;
    }

    if ( whic[x][y][1] != 0 )
    {
        if ( ( ( ds + whic[x][y][1] ) % 4 ) == 0 )
            return 0 ;
    }

    if ( whic[x][y][2] != 0 )
    {
        if ( ( ( ds + whic[x][y][2] ) % 4 ) == 1 )
            return 0 ;
    }

    if ( whic[x][y][3] != 0 )
    {
        if ( ( ( ds + whic[x][y][3] ) % 4 ) == 2 )
            return 0 ;
    }
    return 1 ;

}




int main()
{

int t , row , col , flag = 0  ;
pair < int , int > st , en ;


// INPUT

cin >> t ;

string s ;

for ( int cas = 1 ; cas <= t ; cas++)
{
    cin >> row >> col ;
    for ( int i = 0 ; i < row ; i++)
    {
        cin >> s ;
        for ( int j = 0 ; j < col ; j++)
        {
            if ( s[j] == '.')
                mat[i][j] = 0 ;
                 // EMPTY SPACE
            else if ( s[j] == '#')
                mat[i][j] = 5 ;
                  // WALL
            else if ( s[j] == 'S')
            {
                mat[i][j] = 0 ;
                st.first = i ;
                st.second = j ; // START POINT
            }
            else if ( s[j] == 'G')
            {
                mat[i][j] = 0 ;
                en.first = i ;
                en.second = j ;  // END POINT
            }
            else if ( s[j] == '^')
                mat[i][j] = 1 ;
            else if ( s[j] == '>')
                mat[i][j] = 2 ;
            else if ( s[j] == '<')
                mat[i][j] = 4 ;
            else
                mat[i][j] = 3 ;
        }
    }

// INPUT ENDS


// PREPROCESSING


queue < node > q ;

 for ( int i = 0 ; i <  row ; i++ )
 for ( int j = 0 ; j < col ; j++)
    for ( int k = 0 ; k < 4; k++)
    whic[i][j][k] = 0 ;






     for( int i=0; i< row ; i++)
     {
        for(int j=0; j<col; j++)
        {
            if(mat[i][j] > 0 )
            {

                continue;
            }
            whic[i][j][0] = 0 ;
            //
            for( int k = ( i - 1) ; k > -1; k--)
            {
                if( mat[k][j]==5)
                    break;
                if(mat[k][j] > 0 )
                {
                    whic[i][j][0] = mat[k][j];
                    break;
                }
            }

            whic[i][j][2] = 0 ;

            for( int k=i+1; k< row ; k++){
                if(mat[k][j] ==  5 )  break;
                if(mat[k][j] > 0 ){
                  {

                   whic[i][j][2] = mat[k][j];
                    break;
                  }
                }
            }

            whic[i][j][3] = 0 ;
            //
            for( int k = (j - 1); k>-1; k--){
                if(mat[i][k] == 5 )  break;
                if( mat[i][k] > 0 ){
                   {

                    whic[i][j][3] = mat[i][k] ;
                    break;
                   }
                }
            }

            whic[i][j][1] = 0 ;
            for( int k = j+1 ; k<col ; k++){
                if(mat[i][k]== 5 )  break;
                if(mat[i][k] > 0 ){
                    {whic[i][j][1] = mat[i][k];
                    break;}
                }
            }
        }
    }



dis[st.first][st.second] = 0 ;



// upwards 0

/*
for ( int j = 0 ; j < col ; j++)
{
   if ( ( mat[0][j] == 1 ) || ( mat[0][j] == 2 ) || ( mat[0][j] == 3 ) || ( mat[0][j] == 4 ))
            whic[0][j][0] = mat[0][j] ;
       else
            whic[0][j][0] = 0 ;
}


for ( int r = 1 ; r < row ; r++)
{
    for ( int j = 0 ; j < col ; j++)
    {
        if ( ( mat[r][j] == 1 ) || ( mat[r][j] == 2 ) || ( mat[r][j] == 3 ) || ( mat[r][j] == 4 ))
            whic[r][j][0] = mat[r][j] ;
        else if ( mat[r][j] == 5 )
            whic[r][j][0] = 0 ;
        else
            whic[r][j][0] = whic[r-1][j][0] ;
     }
}





// downwards 2

for ( int j = 0 ; j < col ; j++)
{
    if ( ( mat[row - 1][j] == 1 ) || ( mat[row - 1][j] == 2 ) || ( mat[row-1][j] == 3 ) || ( mat[row-1][j] == 4 ))
            whic[row-1][j][2] = mat[row-1][j] ;
        else
            whic[row-1][j][2] = 0 ;
}

for ( int r = row - 2 ; r > -1 ; r--)
{
    for ( int j = 0 ; j < col ; j++)
    {
        if ( ( mat[r][j] == 1 ) || ( mat[r][j] == 2 ) || ( mat[r][j] == 3 ) || ( mat[r][j] == 4 ))
            whic[r][j][2] = mat[r][j] ;
        else if ( mat[r][j] == 5 )
            whic[r][j][2] = 0 ;
        else
            whic[r][j][2] = whic[r+1][j][2] ;
     }
}


    }


// rightwards 1

for ( int r = 0 ; r < row ; r++)
{
    if ( ( mat[r][col-1] == 1 ) || ( mat[r][col-1] == 2 ) || ( mat[r][col-1] == 3 ) || ( mat[r][col-1] == 4 ))
            whic[r][col-1][1] = mat[r][col-1] ;
    else
            whic[r][col-1][1] = 0 ;
}

for ( int j = col - 2  ; j > -1 ; j--)
{
    for ( int r = 0 ; r < row ; r++)
    {

        if ( ( mat[r][j] == 1 ) || ( mat[r][j] == 2 ) || ( mat[r][j] == 3 ) || ( mat[r][j] == 4 ))
            whic[r][j][1] = mat[r][j] ;
        else if ( mat[r][j] == 5 )
            whic[r][j][1] = 0 ;
        else
            whic[r][j][1] = whic[r][j+1][1] ;

    }
}




//for ( int i = 0 ; i < row ; i++)
//    {for ( int j = 0 ; j < col ; j++)
//{
//    cout << whic[i][j][1] << " " ;
//}
//cout << endl ;
//    }



//leftwards 3

for ( int r = 0 ; r < row ; r++)
{
    if ( ( mat[r][0] == 1 ) || ( mat[r][0] == 2 ) || ( mat[r][0] == 3 ) || ( mat[r][0] == 4 ))
            whic[r][0][3] = mat[r][0] ;
    else
            whic[r][0][3] = 0 ;
}


for ( int j = 1  ; j < col ; j++)
{
    for ( int r = 0 ; r < row ; r++)
    {

        if ( ( mat[r][j] == 1 ) || ( mat[r][j] == 2 ) || ( mat[r][j] == 3 ) || ( mat[r][j] == 4 ))
            whic[r][j][3] = mat[r][j] ;
        else if ( mat[r][j] == 5 )
            whic[r][j][3] = 0 ;
        else
            whic[r][j][3] = whic[r][j-1][3] ;

    }
}

*/

for ( int i = 0 ; i < row ; i++)
{
    for ( int j = 0 ; j < col ; j++ )
        for ( int k = 0 ; k < 4 ; k++)
        visited[i][j][k] = 0 ;
}



// PREPROCESS DONE



// BFS CODE

while ( !q.empty())
    q.pop() ;

flag = 0 ;
node rty ;
rty.a = st.first ;
rty.b = st.second ;
rty.c  = 0 ;

q.push( rty ) ;
visited[st.first][st.second][0] = 1 ;



while ( !q.empty())
{
node fr = q.front() ;
q.pop() ;

int xi = fr.a ;
int yi = fr.b ;
int ds = fr.c ;

if ( ( xi == en.first) && ( yi == en.second) )
{
    flag = 1 ;
    ans = ds ;
    break ;
}

for ( int k = 0 ; k < 4 ; k++)
{

 int newx = xi + xad[k] ;
 int newy = yi + yad[k] ;

 if ( ( newx < row ) && ( newy < col ) && ( newx > -1 ) && ( newy > -1) )
 {
    if ( visited[newx][newy][ ( ds + 1) % 4] == 1 )
        continue ;

     visited[newx][newy][(ds+1)%4] = 1 ;

   if ( mat[newx][newy] == 0 )
   {
       if ( safe( newx , newy , ( ds + 1 ) % 4  ) == 1 )
       {
          //if ( ( newx == en.first ) && ( newy == en.second ) )
            //cout << " ds + 1 " << ds + 1 << endl ;
           node nert ;
           nert.a = newx ;
           nert.b = newy ;
           nert.c = ds + 1 ;
           q.push(nert) ;
       }
   }
   else
    continue ;
 }

}
}

if ( flag == 1 )
    cout << "Case #" << cas << ": " << ans << endl ;
else
    cout << "Case #" << cas << ": impossible" << endl ;
}
return 0 ;
}

#include <iostream>
#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int, int> ii;

bool maps[4][110][110];

string lasers = "<^>v";

int dr[] = {0, -1, 0, 1};
int dc[] = {-1, 0, 1, 0};

int M, N;

ii start, goal;

void printmaps(){
    for(int i = 0; i < 4; i++){
        for(int r = 0; r < M; r++){
            for(int c = 0; c < N; c++){
                cout << (maps[i][r][c] ? '#' : '.');
            }
            cout << endl;
        }
        cout << endl << endl;
    }
}

int bfs()
{
    int V[4][110][110];
    memset(V, 0, sizeof V);

    queue<pair<ii, int> > q;
    q.push(make_pair(start, 0));

    while(!q.empty()){
        pair<ii, int> c = q.front();
        q.pop();
        int d = c.second;
        int row = c.first.first;
        int col = c.first.second;
        if(row == goal.first && col == goal.second){
            return d;
        }
        for(int i = 0; i < 4; i++){
            int nr = row + dr[i];
            int nc = col + dc[i];
            if(nr >= M || nr < 0 || nc >= N || nc < 0) continue;
            if(!maps[(d+1)%4][nr][nc] && !V[(d+1)%4][nr][nc]){
                q.push(make_pair(make_pair(nr, nc), d+1));
                V[(d+1)%4][nr][nc] = true;
            }
        }
    }
    return -1;

}
int main() {

    int T;
    cin >> T;
    int casenum = 1;
    while(T--){

        memset(maps, 0, sizeof maps);
        cin >> M >> N;
        vector<string> b;
        string tmp;
        for(int i = 0; i < M; i++){
            cin >> tmp;
            b.push_back(tmp);
        }

        for(int i = 0; i < N; i++){
            for(int j = 0; j < M; j++){
                if(b[j][i] == 'G'){
                    goal = make_pair(j, i);
                    continue;
                }
                if(b[j][i] == 'S'){
                    start = make_pair(j, i);
                    continue;
                }
                for(int k = 0; k < 4; k++){

                    if(b[j][i] == '#'){
                        maps[k][j][i] = true;
                    }
                    if(b[j][i] == lasers[k]){
                        // fill in map
                        for(int l = 0; l < 4; l++){
                            // try all directions until we hit something in the map
                            int r = j;
                            int c = i;
                            while(true){
                                maps[l][r][c] = true;
                                r += dr[(l+k)%4];
                                c += dc[(l+k)%4];
                                if(r >= M ||
                                    r < 0 ||
                                    c >= N ||
                                    c < 0 ||
                                    b[r][c] == '#' ||
                                    b[r][c] == '<' ||
                                    b[r][c] == '>' ||
                                    b[r][c] == '^' ||
                                    b[r][c] == 'v') break;

                            }
                        }
                    }
                }
            }
        }
        //printmaps();
        int tmpi = bfs();
        if(tmpi == -1)
            cout << "Case #" << casenum++ << ": " <<  "impossible" << endl;
        else
            cout << "Case #" << casenum++ << ": " <<  tmpi << endl;
    }

}

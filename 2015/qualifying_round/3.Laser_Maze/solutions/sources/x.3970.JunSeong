//TAG : 

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<string>
#include<cstring>
#include<cmath>
#include<vector>
#include<stack>
#include<map>
#include<queue>
#include<algorithm>
#include <climits>
using namespace std;

#define rep(i,n)	for(int (i)=0;(i)<(n);(i)++)
#define repd(i,n)	for(int (i)=(n)-1;(i)>=0;(i)--)
#define REP(i,n) for (int (i)=0,_n=(n); (i) < _n; (i)++)
#define FOR(i,a,b) for (int _b=(b), (i)=(a); (i) <= _b; (i)++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define ALL(c) (c).begin(), (c).end()
#define SORT(c) sort(ALL(c))

#define CLEAR(x) memset((x),0,sizeof(x));
#define CLEARA(x) memset(&(x),0,sizeof(x));
#define FILL(x,v) memset((x),(v),sizeof(x));
#define FILLA(x,v) memset(&(x),(v),sizeof(x));

#define REVERSE(c) reverse(ALL(c))
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())
#define X first
#define Y second
#define pb push_back
#define MP make_pair
#define EPS 1e-9

#define PII pair<int,int> 
#define VI vector<int>
#define LL long long

#define PUSH(s,cnt,a,b,c)	((s)[(cnt)][0]=(a),(s)[(cnt)][1]=(b),(s)[(cnt)][2]=(c),++(cnt))
#define POP(s,cnt,a,b,c)	(--(cnt),(a)=(s)[(cnt)][0],(b)=(s)[(cnt)][1],(c)=(s)[(cnt)][2])

int main()
{
	char board[100][101];
	bool visit[100][100][4];
	int S[100*100*4][3];//(y,x,step)
	int TC;

	gets(board[0]);
	TC=atoi(board[0]);
	FOR(T,1,TC)
	{
		int R,C;
		gets(board[0]);
		sscanf(board[0],"%d %d",&R,&C);
		int sx,sy;//start point
		rep(r,R){
			gets(board[r]);
			//conv turret(^>v<) to '0'~'3'
			rep(c,C){
				switch(board[r][c])
				{
				case 'S':
					sy=r,sx=c;
					board[r][c]='.';
					break;
				case '^':
					board[r][c]='0';
					break;
				case '>':
					board[r][c]='1';
					break;
				case 'v':
					board[r][c]='2';
					break;
				case '<':
					board[r][c]='3';
					break;
				}
			}
		}
		//Start travel
		int ans=-1;
		int cnt=0;
		char avoid_tpl[][5]={"0123","3012","2301","1230"};
		CLEAR(visit);

		PUSH(S,cnt,sy,sx,0);
		while(cnt>0){
			int step;
			POP(S,cnt,sy,sx,step);
			//visit mark
			visit[sy][sx][step%4]=true;
			//Alive check
			if(step>0){
				char* avoid=avoid_tpl[step%4];
				//down,left,up,right from me
				FOR(y,sy+1,R-1){
					char ch=board[y][sx];
					if(ch==avoid[0])
						goto Next;
					else if(('0'<=ch && ch<='3') || ch=='#')
						break;
				}
				//left
				FORD(x,sx-1,0){
					char ch=board[sy][x];
					if(ch==avoid[1])
						goto Next;
					else if(('0'<=ch && ch<='3') || ch=='#')
						break;
				}
				//up
				FORD(y,sy-1,0){
					char ch=board[y][sx];
					if(ch==avoid[2])
						goto Next;
					else if(('0'<=ch && ch<='3') || ch=='#')
						break;
				}
				//right
				FOR(x,sx+1,C-1){
					char ch=board[sy][x];
					if(ch==avoid[3])
						goto Next;
					else if(('0'<=ch && ch<='3') || ch=='#')
						break;
				}
			}
			//check is Goal
			if(board[sy][sx]=='G'){ans=step;break;}
			//Move Next
			++step;
#define CHECK(y,x) if(false==visit[y][x][step%4] && (board[y][x]=='.' || board[y][x]=='G'))	\
						PUSH(S,cnt,y,x,step);
			if(sy>0)CHECK(sy-1,sx);
			if(sx>0)CHECK(sy,sx-1);
			if(sy<(R-1))CHECK(sy+1,sx);
			if(sx<(C-1))CHECK(sy,sx+1);
Next://can't alive
			;
		}
		if(ans!=-1)printf("Case #%d: %d\n",T,ans);
		else printf("Case #%d: impossible\n",T);
	}
	
	return 0;
}
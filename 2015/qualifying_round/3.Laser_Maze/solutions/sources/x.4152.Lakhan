#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b); }
#define LCM(a,b)  { return a*b/GCD(a,b);  }
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define FORN(i,n) for(i=n;i>=0;i--)
#define FORN_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;

char valid[4][105][105],matrix[105][105];

int visited[105][105][4];

struct node { int x,y,rem;};

typedef struct node node;

int xx[]={0,-1,0,1};
int yy[]={1,0,-1,0};
int n,w;

char change(char ch){
		//num%=4;
		if(ch=='^')	return '>';
		if(ch=='>') return 'v';
		if(ch=='v') return '<';
		if(ch=='<') return '^';
		return ch;
}



void create_valid(){
		memset(visited,-1,sizeof(visited));
		int i,j,k;
		for(i=0;i<4;i++){
			for(j=0;j<n;j++){
				for(k=0;k<w;k++){
					if(i==0){
//						if(matrix[j][k]=='#')
//							valid[i][j][k]='L';
					//	else
						if(matrix[j][k]=='S'||matrix[j][k]=='G')
							valid[i][j][k]='.';
						else valid[i][j][k]=matrix[j][k];
					}

					else{
						valid[i][j][k]=change(valid[i-1][j][k]);
					}
				}
			}
		}

		//now building
		int m;
		for(i=0;i<4;i++){
			for(j=0;j<n;j++){
				for(k=0;k<w;k++){
					if(valid[i][j][k]=='^'){
						for(m=j-1;m>=0;m--)
							if(valid[i][m][k]=='L'||valid[i][m][k]=='.') valid[i][m][k]='L';
							else break;
					}

					if(valid[i][j][k]=='v'){
						for(m=j+1;j<n;j++)
							if(valid[i][m][k]='L'||valid[i][m][k]=='.') valid[i][m][k]='L';
							else break;
					}

					if(valid[i][j][k]=='<'){
						for(m=k-1;m>=0;m--)
							if(valid[i][j][m]=='L'||valid[i][j][m]=='.') valid[i][j][m]='L';
						else break;
					}

					if(valid[i][j][k]=='>'){
						for(m=k+1;m<w;m++)
							if(valid[i][j][m]=='L'||valid[i][j][m]=='.') valid[i][j][m]='L';
						else break;
					}


				}
			}
		}
/*
		for(i=0;i<4;i++)
			{	cout<<"for rem "<<i<<endl;
				for(j=0;j<n;j++)
				{
					for(k=0;k<w;k++)
						cout<<valid[i][j][k];
					cout<<endl;
				}
				cout<<endl<<endl;
			}
*/

		return;

	}


lld bfs(){

    create_valid();
    int i,j,k,x,y,X,Y,rem;
    int nrem;
    node source,dest;
    for(i=0;i<n;i++)
    {
        for(j=0;j<w;j++)
            {
                if(matrix[i][j]=='S')
                    source=(node){i,j,0};
                if(matrix[i][j]=='G')
                    dest=(node){i,j,0};
            }
    }

    memset(visited,-1,sizeof(visited));

    queue<node>q;

    q.push(source);

    while(!q.empty()){

        node temp=q.front();
        rem=temp.rem;
        x=temp.x;
        y=temp.y;
        q.pop();
        if(valid[rem%4][x][y]=='.'&&dest.x==x&&dest.y==y)
            return rem;

        for(i=0;i<4;i++){
            nrem=(rem+1)%4;
            X= x+xx[i];
            Y= y+yy[i];
            if(X>=0&&X<n&&Y>=0&&y<w){

                if(valid[nrem][X][Y]=='.'&&visited[X][Y][nrem]==-1){
                    visited[X][Y][nrem]=1;
                    node temp2=(node){X,Y,rem+1};
                    q.push(temp2);
                }
            }
        }



    }

    return -1;

}




int main(){

    //freopen("/home/lakhan/Desktop/input.txt","r",stdin);
	int t;
	int ca=1;
	cin>>t;
	while(t--){
		cin>>n>>w;
		int i,j;
		for(i=0;i<n;i++)
			scanf("%s",matrix[i]);
		//cout<<endl;
		/*for(i=0;i<n;i++)
		{
			for(j=0;j<w;j++)
				cout<<matrix[i][j];
			cout<<endl;
		}
*/
		lld ans=bfs();
		if(ans==-1)
			printf("Case #%d: impossible\n",ca++);
		else
			printf("Case #%d: %d\n",ca++,ans);
	}
	return 0;
}


#include <bits/stdc++.h>
 
using namespace std;
 
#define      pii               std::pair<int,int>
#define      vi                std::vector<int>
#define      mp(a,b)           std::make_pair(a,b)
#define      X                 first
#define      Y                 second
#define      pb(x)             push_back(x)

 
typedef long long LL;
LL MOD = 1000000007;
int main()
{	
	int t, n, m;
	scanf("%d",&t);
	char S[200][200], dir[4]={'^','>','v','<'};
	int dist[100][100][4], possible[100][100][4];
	for(int tc=1;tc<=t;tc++)
	{
		scanf("%d%d",&n,&m);
		for(int i=0;i<n;i++)
		{
			scanf("%s",S[i]);
		}
		memset(possible,0,sizeof possible);
		for(int mod=0;mod<4;mod++)
		{
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<m;j++)
				{
					int x = i , y = j;
					if(S[i][j]=='^')
					{
						x--;
						while((S[x][y]=='.' || S[x][y]=='G' || S[x][y]=='S') && x>=0)possible[x--][y][mod]=-1;
					}
					if(S[i][j]=='>')
					{
						y++;
						while((S[x][y]=='.' || S[x][y]=='G' || S[x][y]=='S') && y<m )possible[x][y++][mod]=-1;
					}
					if(S[i][j]=='v')
					{
						x++;
						while((S[x][y]=='.' || S[x][y]=='G' || S[x][y]=='S') && x<n )possible[x++][y][mod]=-1;
					}
					if(S[i][j]=='<')
					{
						y--;
						while((S[x][y]=='.' || S[x][y]=='G' || S[x][y]=='S') && y>=0)possible[x][y--][mod]=-1;
					}
					// printf("%c",S[i][j]);
				}
				// printf("\n");
			}
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<m;j++)
				{
					for(int d=0;d<4;d++)
					{
						if(S[i][j]==dir[d])
						{
							// printf("FUCK %c %c\n",S[i][j],dir[d]);
							S[i][j]=dir[(d+1)%4];
							break;
						}
					}
				}
			}
		}
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				for(int mod=0;mod<4;mod++)
				{
					// printf("%d",!!(possible[i][j][mod]) );
				}
				// printf(" ");
			}
			// printf("\n");
		}
		memset(dist,-1,sizeof dist);
		int ans=MOD;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(S[i][j]=='S')
				{
					queue<pair<pair<int,int>,int> > Q;
					dist[i][j][0]=0;
					Q.push(make_pair(make_pair(i,j),0));
					while(!Q.empty())
					{
						pair<pair<int,int>,int> cur = Q.front();
						i = cur.X.X , j = cur.X.Y;
						int z = cur.Y;
						// printf("%d %d %d\n",i,j,z );
						for(int x=max(0,i-1);x<min(i+2,n);x++)
						{
							for(int y=max(0,j-1);y<min(j+2,m);y++)
							{
								if((x-i) != (y-j) && (x-i) !=(j-y))
								{
									if(S[x][y]=='.' || S[x][y]=='G' || S[x][y]=='S')
									{
										if(dist[x][y][(dist[i][j][z]+1)%4]<0 && possible[x][y][(dist[i][j][z]+1)%4]==0)
										{
											dist[x][y][(dist[i][j][z]+1)%4]=(dist[i][j][z]+1);
											if(S[x][y]=='G')ans=min(ans,dist[i][j][z]+1);
											Q.push(make_pair(make_pair(x,y),(dist[i][j][z]+1)%4));
										}
									}
								}
							}
						}
						Q.pop();
					}
					goto XXX;
				}
			}
		}
		XXX:
		if(ans!=MOD)printf("Case #%d: %d\n",tc,ans);
		else printf("Case #%d: impossible\n",tc);
	}
	return 0;
}
//#include <bits/stdc++.h>

#include <iostream>
#include <algorithm>
#include <vector>
#include <sstream>
#include <fstream>
#include <string>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <numeric>
#include <stack>
#include <functional>
#include <bitset>
#include <iomanip>

#include <ctime>
#include <cassert>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstring>
#include <cstdlib>

#define _ ios_base::sync_with_stdio(0);
#define ms(ar,val) memset(ar,val,sizeof(ar))
#define all(s) (s).begin(),(s).end()
#define rp1(i,s,n) for(int i=s;i<n;++i)
#define rp(i,n) rp1(i,0,n)
#define abs(x) (((x)< 0) ? (-(x)) : (x))
#define pb push_back
#define LL long long
#define Read(x) freopen(x,"r",stdin)
#define Write(x) freopen(x,"w",stdout)
#define st(N,pos) (sts[N]=sts[N] | (1<<pos))
#define check(N,pos) ((bool)(sts[N] & (1<<pos)))
#define i_s(num)  static_cast<ostringstream*>( &(ostringstream() << num) )->str();
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define PQ priority_queue
#define GSORT(x) sort(ALL(x), greater<typeof(*((x).begin()))>())
#define UNIQUE(v) sort(all(v)); (v).resize(unique(all(v)) - (v).begin())
#define F first
#define S second
#define bits(n) __builtin_popcount(n)
#define EPS 1e-11
#define PI (atan(1)*4)
///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month


using namespace std;
int gcd(int a, int b)
{
    while(b) b ^= a ^= b ^= a %= b;
    return a;
}
#define maxn 110
int m,n;
bool pos[maxn][maxn][4];
char maze[maxn][maxn];
bool isleaser(char ch){
    if(ch=='<')return 1;
    if(ch=='>')return 1;
    if(ch=='^')return 1;
    if(ch=='v')return 1;
    return 0;
}
int which_side(char ch){
    if(ch=='<')return 0;
    else if(ch=='^')return 1;
    else if(ch=='>')return 2;
    else if(ch=='v')return 3;
    else return -1;
}
bool isvalid(int x,int y){
    if(x<0 || x>=n)return 0;
    if(y<0 || y>=m)return 0;
    return 1;
}
bool isblock(int x,int y){
    if(isleaser(maze[x][y]))return 1;
    if(maze[x][y]=='#')return 1;
    return 0;
}
void dfs(int x,int y,int x1,int y1,int tm){
    pos[x][y][tm]=1;
    if(!isvalid(x+x1,y+y1))return;
    if(isblock(x+x1,y+y1))return;
    dfs(x+x1,y+y1,x1,y1,tm);
    return ;
}
int X[]={0,-1,0,1};
int Y[]={-1,0,1,0};
int dist[maxn][maxn][4];
#define inf 1000000
queue <int> row,col,W;
int bfs(){

    while(!row.empty()){
        row.pop();
        col.pop();
        W.pop();
    }

    rp(i,n)rp(j,m)rp(k,4)dist[i][j][k]=inf;

    int s_x,s_y;
    rp(i,n)rp(j,m)if(maze[i][j]=='S'){
        s_x=i;
        s_y=j;
    }
    row.push(s_x);
    col.push(s_y);
    W.push(0);
    dist[s_x][s_y][1]=0;

    while(!W.empty()){
        int x = row.front();
        int y = col.front();
        int w = W.front();
        if(maze[x][y]=='G')return w;
        row.pop(),col.pop(),W.pop();

        for(int i=0;i<4;i++){
            int x1=x+X[i];
            int y1=y+Y[i];
            int w1=w+1;
            int tm=w1%4;
            if(isvalid(x1,y1) && !isblock(x1,y1) && !pos[x1][y1][tm]){
                if(w1<dist[x1][y1][tm]){
                    dist[x1][y1][tm]=w1;
                    row.push(x1);
                    col.push(y1);
                    W.push(w1);
                }
            }
        }
    }
    return -1;

}
int main()
{
     #if defined( rifat_pc )
        Write("out.txt");
        Read("laser_maze.txt");
    #endif
    int tst,cnt=1;
    scanf("%d",&tst);
    while(tst--){

        ms(pos,0);

        scanf("%d%d",&n,&m);
        rp(i,n)scanf("%s",maze[i]);

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(isleaser(maze[i][j])){
                    int side= which_side(maze[i][j]);
                    for(int k=0;k<4;k++){
                        dfs(i,j,X[side],Y[side],k);
                        side=(side+1)%4;
                    }
                }
            }
        }
        int ans = bfs();
        if(ans==-1)printf("Case #%d: impossible\n",cnt++);
        else printf("Case #%d: %d\n",cnt++,ans);
    }
    return 0;
}





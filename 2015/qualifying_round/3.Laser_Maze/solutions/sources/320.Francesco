#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 111;
const int INF = 1e9;
const int mx[] = {0,1,0,-1};
const int my[] = {-1,0,1,0};

struct triple{
	int a, b, c;
	triple(int x, int y, int z){a=x; b=y; c=z;}
	triple(){a=b=c=0;}
};


int n, m;
char g[MAXN][MAXN];
bool posso[MAXN][MAXN][4];
int dist[MAXN][MAXN][4];

void regola(int i, int j, int r){
	for(int z=0; z<4; z++) posso[i][j][z] = false;
	int x, y;
	for(int z=0; z<4; z++){
		x=j; y=i;
		do{y+=my[z]; x+=mx[z]; posso[y][x][(8-r+z)%4] = false;}
		while(g[y][x]=='.' || g[y][x]=='G' || g[y][x]=='S');
	}
}

int solve(){
	for(int i=0; i<m; i++) for(int j=0; j<n; j++) for(int r=0; r<4; r++){
		posso[i][j][r] = true;
		dist[i][j][r] = INF;
	}
	
	int sx, sy, gx, gy;
	sx = sy = gx = gy = 0;
	
	for(int i=0; i<m; i++) for(int j=0; j<n; j++){
		if(g[i][j] == 'S'){sy=i; sx=j;}
		if(g[i][j] == 'G'){gy=i; gx=j;}
		if(g[i][j] == '#') for(int r=0; r<4; r++) posso[i][j][r] = false;
		
		if(g[i][j] == '^') regola(i,j,0);
		if(g[i][j] == '>') regola(i,j,1);
		if(g[i][j] == 'v') regola(i,j,2);
		if(g[i][j] == '<') regola(i,j,3);
	}
	
	dist[sy][sx][0] = 0;
	vector<triple> v; v.push_back(triple(sy,sx,0));
	
	int i = 0;
	while(i < (int)v.size()){
		triple t = v[i];
		if(t.a == gy && t.b == gx) return dist[t.a][t.b][t.c];
		
		for(int z=0; z<4; z++){
			int y = t.a + my[z];
			int x = t.b + mx[z];
			int r = (t.c + 1) % 4;
			if(!posso[y][x][r]) continue;
			if(dist[y][x][r] < INF) continue;
			dist[y][x][r] = dist[t.a][t.b][t.c] + 1;
			v.push_back(triple(y,x,r));
		}
		
		i++;
	}
	
	return INF;
}

int main(){
	int t; cin >> t;
	for(int i=1; i<=t; i++){
		cin >> m >> n;
		for(int i=1; i<=m; i++) for(int j=1; j<=n; j++) cin >> g[i][j];
		for(int i=0; i<=m+1; i++) g[i][0]=g[i][n+1]='#';
		for(int i=0; i<=n+1; i++) g[0][i]=g[m+1][i]='#';
		n+=2; m+=2;
		
		int sol = solve();
		cout << "Case #" << i << ": ";
		if(sol < INF) cout << sol << endl;
		else cout << "impossible" << endl;
	}
	return 0;
}

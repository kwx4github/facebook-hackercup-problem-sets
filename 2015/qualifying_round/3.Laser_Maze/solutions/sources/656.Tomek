
// Tomasz Kulczynski
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for (int i=0;i<(n);++i)
#define FOR(i,a,b) for (VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(e,v) for(VAR(e,(v).begin());e!=(v).end();++e)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)(a).size())
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

const int M = 113;

char s[M][M];

int c[M][M][4];

int e[M*M*4], f[M*M*4], g[M*M*4];

int xx[4] = {0, -1, 0, 1}, yy[4] = {-1, 0, 1, 0};

int tur(char x) {
    if (x == '<') return 0;
    if (x == '^') return 1;
    if (x == '>') return 2;
    if (x == 'v') return 3;
    return -1;
}

int tc() {
    int n,m, gi,gj, si,sj;
    scanf("%d %d",&n,&m);
    REP(i, n) scanf("%s", s[i]);
    REP(i, n) REP(j, m) REP(k, 4) c[i][j][k] = 0;
    REP(i, n) REP(j, m) {
        int t = tur(s[i][j]);
        if(s[i][j] == '#') {
            REP(k, 4) c[i][j][k] = -1;
        }
        if (t >= 0) {
            REP(k, 4) {
                int x = i, y = j;
                while(x >= 0 && x < n && y >= 0 && y < m) {
                    c[x][y][(k - t + 4) % 4] = -1;
                    x += xx[k];
                    y += yy[k];
                    if (s[x][y] == '#' || tur(s[x][y]) >= 0) break;
                }
            }
        }
        if (s[i][j] == 'S') si = i, sj = j;
        if (s[i][j] == 'G') gi = i, gj = j;
    }
    c[si][sj][0] = 1, e[0] = si, f[0] = sj, g[0] = 0;
    for(int ee = 1, q = 0; q < ee; q++) {
        int x = e[q], y = f[q], k = g[q];
        for(int i = 0; i < 4; i++) {
            int X = x + xx[i], Y = y + yy[i], K = (k+1)%4;
            if (X >= 0 && X < n && Y >= 0 && Y < m && !c[X][Y][K]) {
                c[e[ee] = X][f[ee] = Y][g[ee] = K] = c[x][y][k] + 1;
                ee++;
            }
        }
    }
    int ret = -1;
    REP(k, 4) if(c[gi][gj][k] > 0) {
        if (ret == -1 || c[gi][gj][k] < ret)
            ret = c[gi][gj][k];
    }
    return ret - 1;
}

int main() {
    int dd;
    scanf("%d", &dd);
    FOR(ii, 1, dd) {
        int ret = tc();
        if (ret < 0) 
            printf("Case #%d: impossible\n", ii);
        else
            printf("Case #%d: %d\n", ii, ret);
    }
    return 0;
}

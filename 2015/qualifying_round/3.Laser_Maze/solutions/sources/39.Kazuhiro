import core.thread;
import std.conv, std.stdio, std.string;
import std.algorithm, std.array, std.bigint, std.container, std.math, std.range, std.regex;

//	Input
class EOFException : Throwable { this() { super("EOF"); } }
string[] tokens;
string readToken() { for (; tokens.empty; ) { tokens = readln.split; if (stdin.eof) throw new EOFException; } auto token = tokens[0]; tokens.popFront; return token; }
int readInt() { return to!int(readToken); }
long readLong() { return to!long(readToken); }
real readReal() { return to!real(readToken); }

//	chmin/chmax
void chmin(T)(ref T t, in T f) { if (t > f) t = f; }
void chmax(T)(ref T t, in T f) { if (t < f) t = f; }

//	Pair
struct Pair(S, T) {
	S x; T y;
	int opCmp(    const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	int opCmp(ref const Pair p) const { return (x < p.x) ? -1 : (x > p.x) ? +1 : (y < p.y) ? -1 : (y > p.y) ? +1 : 0; }
	string toString() const { return "(" ~ to!string(x) ~ ", " ~ to!string(y) ~ ")"; }
}
auto pair(S, T)(inout(S) x, inout(T) y) { return Pair!(S, T)(x, y); }

//	Array
int binarySearch(T)(in T[] as, in bool delegate(T) test) { int low = -1, upp = as.length; for (; low + 1 < upp; ) { int mid = (low + upp) >> 1; (test(as[mid]) ? low : upp) = mid; } return upp; }
int lowerBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <  val); }); }
int upperBound(T)(in T[] as, in T val) { return as.binarySearch((T a) { return (a <= val); }); }
T[] unique(T)(in T[] as) { T[] bs; foreach (a; as) if (bs.empty || bs[$ - 1] != a) bs ~= a; return bs; }



void prepare() {
	
}

class Solver : core.thread.Thread {
	int caseId;
	this(int caseId) {
		this.caseId = caseId;
		super(&main);
	}
	void main() {
		try {
			run;
			stderr.writeln("DONE  Case #", caseId);
		} catch (Throwable e) {
			stderr.writeln("ERROR Case #", caseId, ": ", e.msg);
		} finally {
			stderr.flush;
		}
	}
	
	static immutable LASER = "v>^<";
	static immutable DX = [ +1, 0, -1, 0, ];
	static immutable DY = [ 0, +1, 0, -1, ];
	
	int M, N;
	string[] A;
	int ans;
	
	bool isFloor(int x, int y) {
		return (0 <= x && x < M && 0 <= y && y < N && (A[x][y] == '.' || A[x][y] == 'S' || A[x][y] == 'G'));
	}
	
	void run() {
		auto laser = new bool[][][](M, N, 4);
		foreach (x; 0 .. M) foreach (y; 0 .. N) {
			const typ = LASER.indexOf(A[x][y]);
			if (typ != -1) {
				foreach (s; 0 .. 4) {
					const dir = (typ - s) & 3;
					for (int k = 1; ; ++k) {
						const xx = x + k * DX[dir];
						const yy = y + k * DY[dir];
						if (isFloor(xx, yy)) {
							laser[xx][yy][s] = true;
						} else {
							break;
						}
					}
				}
			}
		}
debug{
foreach(s;0..4){foreach(x;0..M){foreach(y;0..N)write(laser[x][y][s]?'X':'.');writeln;}writeln;}writeln;
}
		auto d = new int[][][](M, N, 4);
		foreach (x; 0 .. M) foreach (y; 0 .. N) {
			d[x][y][] = -1;
		}
		int[] q;
		foreach (x; 0 .. M) foreach (y; 0 .. N) {
			if (A[x][y] == 'S') {
				d[x][y][0] = 0;
				q ~= x;
				q ~= y;
				q ~= 0;
			}
		}
		for (; !q.empty; ) {
			const x = q.front; q.popFront;
			const y = q.front; q.popFront;
			const s = q.front; q.popFront;
			foreach (dir; 0 .. 4) {
				const xx = x + DX[dir];
				const yy = y + DY[dir];
				const ss = (s + 1) & 3;
				if (isFloor(xx, yy) && !laser[xx][yy][ss]) {
					if (d[xx][yy][ss] == -1) {
						d[xx][yy][ss] = d[x][y][s] + 1;
						q ~= xx;
						q ~= yy;
						q ~= ss;
					}
				}
			}
		}
		ans = -1;
		foreach (x; 0 .. M) foreach (y; 0 .. N) {
			if (A[x][y] == 'G') {
				foreach (s; 0 .. 4) {
					if (d[x][y][s] != -1) {
						if (ans == -1 || ans > d[x][y][s]) {
							ans = d[x][y][s];
						}
					}
				}
			}
		}
	}
	
	void input() {
		M = readInt;
		N = readInt;
		A = new string[M];
		foreach (x; 0 .. M) {
			A[x] = readToken;
		}
	}
	
	void output() {
		writeln("Case #", caseId, ": ", (ans == -1) ? "impossible" : ans.to!string);
		stdout.flush;
	}
}

void main(string[] args) {
	bool parallel = false;
	foreach (arg; args) if (arg == "-p") parallel = true;
	prepare;
	auto solvers = new Solver[readInt];
	foreach (caseId, ref solver; solvers) solver = new Solver(caseId + 1);
	if (parallel) {
		foreach (solver; solvers) solver.input, solver.start;
		foreach (solver; solvers) solver.join, solver.output;
	} else {
		foreach (caseId, solver; solvers) {
			solver.input;
			solver.run;
			solver.output;
			stderr.writeln("DONE  Case #", caseId + 1);
			stderr.flush;
		}
	}
}


#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <cassert>

using namespace std;

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

char G[4][110][110];
int D[4][110][110];

int main() {
  int T; cin >> T;
  for (int t = 1; t <= T; t++) {
    int N, M;
    cin >> N >> M;

    queue<int> q;
    int tr = -1;
    int tc = -1;
    memset(D, -1, sizeof(D));
    for (int i = 0; i < N; i++) {
      cin >> G[0][i];
      for (int j = 0; j < M; j++) {
        if (G[0][i][j] == '>') G[0][i][j] = '0';
        if (G[0][i][j] == 'v') G[0][i][j] = '1';
        if (G[0][i][j] == '<') G[0][i][j] = '2';
        if (G[0][i][j] == '^') G[0][i][j] = '3';
        if (G[0][i][j] == 'S') {
          G[0][i][j] = '.';
          D[0][i][j] = 0;
          q.push(i * M + j);
        }
        if (G[0][i][j] == 'G') {
          tr = i;
          tc = j;
          G[0][i][j] = '.';
        }
      }
    }
    assert(tr != -1 && tc != -1);

    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < N; j++) {
        for (int k = 0; k < M; k++) {
          if ('0' <= G[i][j][k] && G[i][j][k] < '4') {
            G[i + 1][j][k] = '0' + (G[i][j][k] - '0' + 1) % 4;
          } else {
            G[i + 1][j][k] = G[i][j][k];
          }
        }
      }
    }

    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < N; j++) {
        for (int k = 0; k < M; k++) {
          if ('0' <= G[i][j][k] && G[i][j][k] < '4') {
            int dir = G[i][j][k] - '0';
            int rr = j + dr[dir];
            int cc = k + dc[dir];
            while (0 <= rr && rr < N && 0 <= cc && cc < M &&
                   (G[i][rr][cc] == '.' || G[i][rr][cc] == '!')) {
              G[i][rr][cc] = '!';
              rr += dr[dir];
              cc += dc[dir];
            }
          }
        }
      }
    }

/*
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < N; j++) {
        cout << G[i][j] << endl;
      }
      cout << endl;
    }
*/

    cout << "Case #" << t << ": ";
    for (;;) {
      if (q.empty()) {
        cout << "impossible\n";
        break;
      }

      int v = q.front();
      q.pop();
      int vt = v / N / M;
      int vr = (v / M) % N;
      int vc = v % M;

      if (vr == tr && vc == tc) {
        cout << D[vt][vr][vc] << '\n';
        break;
      }

      int nt = (vt + 1) % 4;
      for (int i = 0; i < 4; i++) {
        int nr = vr + dr[i];
        int nc = vc + dc[i];
        if (nr < 0 || nr >= N || nc < 0 || nc >= M || G[nt][nr][nc] != '.' ||
            D[nt][nr][nc] != -1) {
          continue;
        }
        D[nt][nr][nc] = D[vt][vr][vc] + 1;
        q.push(nt * N * M + nr * M + nc);
      }
    }
  }
  return 0;
}

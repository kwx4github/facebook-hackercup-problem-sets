#include<iostream>
#include<climits>
#include<queue>
using namespace std;
//----------------------------------------
char input[101][101];
char pos[5][101][101];
int isvisited[101][101];
int ans[5][101][101];

void bfs(int i,int j,int gx,int gy,int n,int m)
{
	queue<pair<pair<int,int>,int> > Q;
	int x=0;
	while(1)
	{
		//cout<<"k";
		//cout<<"k"<<i<<" "<<j<<" "<<x<<endl;
		if(ans[0][gx][gy]!=-1 || ans[1][gx][gy]!=-1 || ans[2][gx][gy]!=-1 || ans[3][gx][gy]!=-1) 
		break;
		int temp=x%4;
		if(i+1<n && ans[temp][i+1][j]==-1 && pos[temp][i+1][j]=='.')
		{
			//cout<<"v";
			Q.push(make_pair(make_pair(i+1,j),temp));
			ans[temp][i+1][j]=ans[(temp+3)%4][i][j]+1;
		}
		
		if(j+1<m && ans[temp][i][j+1]==-1 && pos[temp][i][j+1]=='.')
		{
			//cout<<">";
			Q.push(make_pair(make_pair(i,j+1),temp));
			ans[temp][i][j+1]=ans[(temp+3)%4][i][j]+1;
		}
		
		if(i-1>=0 && ans[temp][i-1][j]==-1 && pos[temp][i-1][j]=='.')
		{
			//cout<<"^";
			Q.push(make_pair(make_pair(i-1,j),temp));
			ans[temp][i-1][j]=ans[(temp+3)%4][i][j]+1;
		}
		
		if(j-1>=0 && ans[temp][i][j-1]==-1 && pos[temp][i][j-1]=='.')
		{
			//cout<<"<";
			Q.push(make_pair(make_pair(i,j-1),temp));
			ans[temp][i][j-1]=ans[(temp+3)%4][i][j]+1;
		}
		if(Q.empty())
		break;
		i=Q.front().first.first;
		j=Q.front().first.second;
		x=Q.front().second+1;
		Q.pop();
	}
}
int main()
{
	//freopen("laser_maze.txt","r",stdin);
	//freopen("kit.txt","w",stdout);
	int t;
	cin>>t;
	for(int T=1;T<=t;T++)
	{
		int n,m;
		cin>>n>>m;
		
		int sx,sy;
		int gx,gy;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				
				cin>>input[i][j];
				if(input[i][j]=='S')
				{
					sx=i;
					sy=j;
				}
				if(input[i][j]=='G')
				{
					gx=i;
					gy=j;
				}
				pos[1][i][j]='.';
				pos[2][i][j]='.';
				pos[3][i][j]='.';
				pos[0][i][j]='.';
				ans[0][i][j]=-1;
				ans[1][i][j]=-1;
				ans[2][i][j]=-1;
				ans[3][i][j]=-1;
			}
		}
		
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(input[i][j]=='<')
				{
					for(int k=i;k>=0 && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G' || k==i);k--)             //^
					pos[0][k][j]='b';
					for(int k=j;k<m && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G' || k==j);k++)           //>
					pos[1][i][k]='b'; 
					for(int k=i;k<n && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G' || k==i);k++)           //v
					pos[2][k][j]='b';
					for(int k=j;k>=0 && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G' || k==j);k--)             //<
					pos[3][i][k]='b';
				}
				
				else if(input[i][j]=='^')
				{
					for(int k=i;k>=0 && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k--)
					pos[3][k][j]='b';
					for(int k=j;k<m && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G' ||k==j);k++)
					pos[0][i][k]='b';
					for(int k=i;k<n && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k++)
					pos[1][k][j]='b';
					for(int k=j;k>=0 && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G'||k==j);k--)
					pos[2][i][k]='b';
				}
				
				else if(input[i][j]=='>')
				{
					for(int k=i;k>=0 && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k--)             //^
					pos[2][k][j]='b';
					for(int k=j;k<m && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G'||k==j);k++)           //>
					pos[3][i][k]='b'; 
					for(int k=i;k<n && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k++)           //v
					pos[0][k][j]='b';
					for(int k=j;k>=0 && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G'||k==j);k--)             //<
					pos[1][i][k]='b';
				}
				
				else if(input[i][j]=='v')
				{
					for(int k=i;k>=0 && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k--)             //^
					pos[1][k][j]='b';
					for(int k=j;k<m && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G'||k==j);k++)           //>
					pos[2][i][k]='b'; 
					for(int k=i;k<n && (input[k][j]=='.' || input[k][j]=='S' || input[k][j]=='G'||k==i);k++)           //v
					pos[3][k][j]='b';
					for(int k=j;k>=0 && (input[i][k]=='.' || input[i][k]=='S' || input[i][k]=='G'||k==j);k--)             //<
					pos[0][i][k]='b';
				}
				
				else if(input[i][j]=='#')
				{
					pos[0][i][j]='b';
					pos[1][i][j]='b';
					pos[2][i][j]='b';
					pos[3][i][j]='b';
				}

			}
		}
		/*
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			cout<<pos[0][i][j];
			cout<<endl;
		}
		
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			cout<<pos[1][i][j];
			cout<<endl;
		}
		
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			cout<<pos[2][i][j];
			cout<<endl;
		}
		
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			cout<<pos[3][i][j];
			cout<<endl;
		}*/
		ans[3][sx][sy]=0;
		int mini=INT_MAX;
		
		bfs(sx,sy,gx,gy,n,m);
		
		for(int i=0;i<4;i++){
		if(ans[i][gx][gy]!=-1 && ans[i][gx][gy]<mini)
		{
			mini=ans[i][gx][gy];
		}}
		cout<<"Case #"<<T<<": ";
		if(mini==INT_MAX)
		cout<<"impossible\n";
		else
		cout<<mini<<endl;
		
	}
}

#pragma comment(linker, "/stack:128000000")

#include <algorithm>
#include <iostream>
#include <cassert>
#include <iomanip>
#include <climits>
#include <utility>
#include <cstring>
#include <complex>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <bitset>
#include <string>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(a, b) make_pair((a), (b))
#define x first
#define y second
#define ft first
#define sc second

using namespace std;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = INT_MAX / 2;
const ld EPS = 1e-9;
const ld PI = 3.1415926535897932384626433832795;

const int N = 100 + 3;

int n, m;
string s[N];
char buf[N];

inline bool read()
{
	if (scanf("%d%d", &n, &m) != 2)
		return false;

	forn(i, n)
		assert(scanf("%s", buf) == 1), s[i] = buf;

    return true;
}

string W = "<^>v";
int dx[] = { 0, -1, 0, 1 };
int dy[] = { -1, 0, 1, 0 };

bool good[N][N][4];

inline int get(char c)
{
	forn(i, sz(W))
		if (W[i] == c)
			return i;

	if (c == 'S')
		return 4;

	if (c == 'G')
		return 5;

	if (c == '.')
		return 6;

	if (c == '#')
		return -1;

	throw;
}

inline void paint(int h)
{
	forn(i, n)
		forn(j, m)
		{
			int w = get(s[i][j]);
			if (0 <= w && w < 4)
			{
				w = (w + h) % 4;
				
				int x = i, y = j;
				while(true)
				{
					x += dx[w], y += dy[w];

					if (correct(x, y, n, m) && get(s[x][y]) >= 4)
						good[x][y][h] = false;
					else
						break;
				}
			}
		}

	/*cerr << h << endl;
	forn(i, n)
	{
		forn(j, m)
			cerr << good[i][j][h];
		cerr << endl;
	}*/
}

int d[N][N][4];

inline int bfs(int sx, int sy)
{
	memset(d, 63, sizeof(d));

	queue<pair<pt, int> > q;
	q.push(mp(mp(sx, sy), 0));

	d[sx][sy][0] = 0;

	while(!q.empty())
	{
		pt p = q.front().ft;
		int h = q.front().sc;
		q.pop();
		
		int x = p.x, y = p.y;
		int dv = d[x][y][h];

		if (s[x][y] == 'G')
			return dv;

		forn(i, 4)
		{
			int nx = x + dx[i], ny = y + dy[i], nh = (h + 1) % 4;

			if (correct(nx, ny, n, m) && get(s[nx][ny]) >= 4 && good[nx][ny][nh] && d[nx][ny][nh] > dv + 1)
			{
				d[nx][ny][nh] = dv + 1;
				q.push(mp(mp(nx, ny), nh));
			}
		}
	}

	return -1;
}

inline void solve(int test)
{
	printf("Case #%d: ", test + 1);

	memset(good, true, sizeof(good));
	forn(i, 4)
		paint(i);

	int sx = -1, sy = -1;
	forn(i, n)
		forn(j, m)
			if (s[i][j] == 'S')
				sx = i, sy = j;

	int ans = bfs(sx, sy);

	if (ans == -1)
		puts("impossible");
	else
		printf("%d\n", ans);
}

int main()
{
#ifdef HP
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif

	int testCnt;
	assert(cin >> testCnt);

	forn(test, testCnt)
	{
    	assert(read());
	    solve(test);
	}

    return 0;
}


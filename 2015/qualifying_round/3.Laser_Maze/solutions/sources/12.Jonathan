#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

typedef long long ll;

vector<ll> dr = {-1, 0, 1, 0};
vector<ll> dc = {0, 1, 0, -1};
vector<char> lasers = {'v', '<', '^', '>'};

ll sign(ll x) {
  if(x > 0) { return 1; }
  if(x < 0) { return -1; }
  return 0;
}

int main() {
  ll T;
  scanf("%lld", &T);
  for(ll cas=1; cas<=T; cas++) {
    ll R, C;
    scanf("%lld %lld", &R, &C);

    int sr = 0;
    int sc = 0;
    int gr = 0;
    int gc = 0;
    vector<vector<char>> G(R, vector<char>(C, ' '));
    for(ll r=0; r<R; r++) {
      char buf[1000];
      scanf("%s", buf);
      for(ll c=0; c<C; c++) {
        G[r][c] = buf[c];
        if(G[r][c] == 'S') {
          sr = r;
          sc = c;
          G[r][c] = '.';
        }
        if(G[r][c] == 'G') {
          gr = r;
          gc = c;
          G[r][c] = '.';
        }
      }
    }

    ll INF = ll(1000)*1000*1000;
    ll win = INF;

    vector<int> S(4*100*100, 0);
    deque<vector<ll>> Q;
    Q.push_back({0, sr, sc});
    while(!Q.empty()) {
      vector<ll> t_r_c = Q.front(); Q.pop_front();
      ll t = t_r_c[0];
      ll r = t_r_c[1];
      ll c = t_r_c[2];
      ll time_d = t%4;

      if(!(r>=0 && r<R && c>=0 && c<C)) { continue; }
      if(G[r][c]!='.') { continue; }

      if(t > 0) {
        bool dead = false;
        for(ll d=0; d<4; d++) {
          ll rr = r;
          ll cc = c;
          while(rr>=0 && cc>=0 && rr<R && cc<C && G[rr][cc]=='.') {
            rr += dr[d];
            cc += dc[d];
          }
          if(rr>=0 && cc>=0 && rr<R && cc<C && G[rr][cc]==lasers[(d+4-time_d)%4]) {
//            printf("t=%lld r=%lld c=%lld rr=%lld cc=%lld G[r][c]=%c\n", t, r, c, rr, cc, G[rr][cc]);
            dead = true;
          }
        }
        if(dead) { continue; }
      }
        
      ll key = time_d*R*C + r*C + c;
      if(S[key]) { continue; }
      S[key] = true;

      if(r==gr && c==gc) {
        win = min(win, t);
      }

      for(ll my_d=0; my_d<4; my_d++) {
        Q.push_back({t+1, r+dr[my_d], c+dc[my_d]});
      }
    }
    if(win == INF) {
      printf("Case #%lld: impossible\n", cas);
    } else {
      printf("Case #%lld: %lld\n", cas, win);
    }
  }
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>
#define SZ(x) ( (int) (x).size() )
#define me(x,a) memset(x,a,sizeof(x))
#define FN(a,n) for(int a=0;a<n;a++)
#define FOR(a,ini,fin) for(int a=(ini);a<(fin);a++)
#define ull unsigned long long
#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d %d",&x,&y)
#define sc3(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define endl "\n"
#define MOD 1000000007
#define MAXN 100005
using namespace std;
int n,m;
int dist[4][102][102];
string s[102];
char stat[4][102][102];
int sx, sy, tx, ty;
string next = "^>v<";
int  dx[]= { 0,0,1,-1 };
int  dy[]= { 1,-1,0,0 };

bool isTurret(char c){
    FN(i,4) if(c == next[i]){
        return 1;
    }
    return 0;
}
int posInNext(char c){
    FN(i,4) if(c == next[i]){
        return i;
    }
    return -1;
}

int bfs(){
    queue<int> q;
    q.push(0);
    q.push(sx);
    q.push(sy);
    me(dist,-1);
    dist[0][sx][sy]=0;
    while( !q.empty()){
        int ns = q.front(); q.pop();
        int nx = q.front(); q.pop();
        int ny = q.front(); q.pop();
        int ss = (ns+1)%4;
        FN(i,4){
            int sx = nx + dx[i];
            int sy = ny + dy[i];
            if( sx>=0 && sx < n && sy >= 0 && sy < m
               && stat[ ss ][ sx ][ sy ] == '.'
               && dist[ ss ][ sx ][ sy ] == -1 ){
                dist[ ss ][ sx ][ sy ] = dist[ ns ][ nx ][ ny ] + 1 ;
                q.push(ss);
                q.push(sx);
                q.push(sy);
            }
        }
    }

    int mini = INT_MAX;
    FN(i,4) if( dist[i][tx][ty] != -1 ) mini = min( mini, dist[i][tx][ty] );
    return  mini;
}
int main(){
    int t;
    cin >> t;
    FN(itc,t){
        cin>> n>> m;
        printf("Case #%d: ",itc+1);
        FN(i,n){
            cin >> s[i];
            FN(j,m){
                if( s[i][j] == 'S' || s[i][j] == 'G' || s[i][j] == '.' ){
                    FN(k,4) stat[k][i][j] = '.';
                }else{
                    FN(k,4) stat[k][i][j] = s[i][j];
                }

                if( s[i][j] == 'S'){
                    sx = i;
                    sy = j;
                }else
                if( s[i][j] == 'G'){
                    tx = i;
                    ty = j;
                }else if( s[i][j] == '.' ){

                }else if( isTurret(s[i][j]) ){
                    FN(ks,4){
                        stat[ (ks+1)%4 ][i][j] = next[ (posInNext(stat[ks][i][j]) +1)%4 ] ;
                    }
                }
            }
        }

        FN(i,n){
            FN(j,m){
                FN(ks,4){
                    if( stat[ks][i][j] == '^' ) {
                        for(int k = i-1 ; k>=0 ; k--){
                            if(  isTurret(s[k][j]) || s[k][j] == '#' ){
                                break;
                            }
                            stat[ks][k][j] = 'd';
                        }
                    }else if(stat[ks][i][j] == 'v'){
                        for(int k = i+1 ; k<n ; k++){
                            if(  isTurret(s[k][j]) || s[k][j] == '#' ){
                                break;
                            }
                            stat[ks][k][j] = 'd';
                        }
                    }
                    else if(stat[ks][i][j] == '<'){
                        for(int k = j-1 ; k>=0 ; k--){
                            if(  isTurret( s[i][k] ) || s[i][k] == '#' ){
                                break;
                            }
                            stat[ks][i][k] = 'd';
                        }
                    }
                    else if(stat[ks][i][j] == '>'){
                        for(int k = j+1 ; k<m ; k++){
                            if(  isTurret(s[i][k]) || s[i][k] == '#' ){
                                break;
                            }
                            stat[ks][i][k] = 'd';
                        }
                    }
                }
            }
        }
/*
        FN( ks, 4) FN(i,n) {
            FN( j, m) putchar(stat[ks][i][j]);
            puts("");
        }
*/
        int res = bfs();
        if( res == INT_MAX ) puts("impossible");
        else {
            printf("%d\n",res);
        }
    }
}

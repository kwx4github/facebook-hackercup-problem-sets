/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my love TANIA SULTANA RIMY

    ALGORITHM :
*/
#include <bits/stdc++.h>
using namespace std;
#define EPS 1e-8
#define pb push_back
#define memo(a,b) memset(a,b,sizeof(a))
typedef long long ll ;
int dx[] = {0,0,1,-1} , dy[] = {1,-1,0,0} ;
struct node
{
    int row , col , mov ;
};
char matrix[100+10][100+10];
bool cnt[4][100+10][100+10];
int N , M , Sr , Sc , Tr , Tc ;
bool valid(int row,int col)
{
    if(row>M||col>N||row<1||col<1) return true ;
    if(matrix[row][col]=='#') return true ;
    if(matrix[row][col]=='>') return true ;
    if(matrix[row][col]=='<') return true ;
    if(matrix[row][col]=='^') return true ;
    if(matrix[row][col]=='v') return true ;
    return false ;
}
void init()
{
    for(int row=1;row<=M;row++)
    {
        for(int col=1;col<=N;col++)
        {
            if(matrix[row][col]=='<')
            {
                for(int i=col+1;i<=N;i++)
                {
                    if(valid(row,i)) break ;
                    cnt[2][row][i]=true;
                }
                for(int i=col-1;i>=1;i--)
                {
                    if(valid(row,i)) break ;
                    cnt[0][row][i]=true;
                }
                for(int i=row+1;i<=N;i++)
                {
                    if(valid(i,col)) break ;
                    cnt[3][i][col]=true;
                }
                for(int i=row-1;i>=1;i--)
                {
                    if(valid(i,col)) break ;
                    cnt[1][i][col]=true;
                }
            }
            if(matrix[row][col]=='^')
            {
                for(int i=col+1;i<=N;i++)
                {
                    if(valid(row,i)) break ;
                    cnt[1][row][i]=true;
                }
                for(int i=col-1;i>=1;i--)
                {
                    if(valid(row,i)) break ;
                    cnt[3][row][i]=true;
                }
                for(int i=row+1;i<=N;i++)
                {
                    if(valid(i,col)) break ;
                    cnt[2][i][col]=true;
                }
                for(int i=row-1;i>=1;i--)
                {
                    if(valid(i,col)) break ;
                    cnt[0][i][col]=true;
                }
            }
            if(matrix[row][col]=='>')
            {
                for(int i=col+1;i<=N;i++)
                {
                    if(valid(row,i)) break ;
                    cnt[0][row][i]=true;
                }
                for(int i=col-1;i>=1;i--)
                {
                    if(valid(row,i)) break ;
                    cnt[2][row][i]=true;
                }
                for(int i=row+1;i<=N;i++)
                {
                    if(valid(i,col)) break ;
                    cnt[1][i][col]=true;
                }
                for(int i=row-1;i>=1;i--)
                {
                    if(valid(i,col)) break ;
                    cnt[3][i][col]=true;
                }
            }
            if(matrix[row][col]=='v')
            {
                for(int i=col+1;i<=N;i++)
                {
                    if(valid(row,i)) break ;
                    cnt[1][row][i]=true;
                }
                for(int i=col-1;i>=1;i--)
                {
                    if(valid(row,i)) break ;
                    cnt[3][row][i]=true;
                }
                for(int i=row+1;i<=N;i++)
                {
                    if(valid(i,col)) break ;
                    cnt[0][i][col]=true;
                }
                for(int i=row-1;i>=1;i--)
                {
                    if(valid(i,col)) break ;
                    cnt[2][i][col]=true;
                }
            }
        }
    }
}
void reset()
{
    memo(cnt,false);
    memo(matrix,NULL);
}
void bfs()
{
    bool visit[4][100+10][100+10];
    memo(visit,false);
    node obj ;
    obj.row = Sr ; obj.col = Sc ; obj.mov = 0 ;
    queue <node> q;
    visit[0][Sr][Sc]=true;
    q.push(obj);
    while(!q.empty())
    {
        node now = q.front(); q.pop() ;
        if(now.row==Tr&&now.col==Tc)
        {
            printf("%d\n",now.mov);
            return ;
        }
        for(int i=0;i<3;i++)
        {
            int nr = now.row+dx[i] , nc = now.col+dy[i] , nmov = now.mov+1;
            if(!valid(nr,nc)&&!visit[nmov%4][nr][nc]&&!cnt[nmov%4][nr][nc])
            {
                obj.row = nr ; obj.col = nc ; obj.mov = nmov ;
                q.push(obj);
                visit[nmov%4][nr][nc]=true;
            }
        }
    }
    puts("impossible");
}
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int test ;
    scanf("%d",&test);
    for(int cas=1;cas<=test;cas++)
    {
        scanf("%d%d",&M,&N);
        reset();
        for(int row=1;row<=M;row++)
        {
            for(int col=1;col<=N;col++)
            {
                cin >> matrix[row][col];
                if(matrix[row][col]=='S') Sr = row , Sc = col ;
                if(matrix[row][col]=='G') Tr = row , Tc = col ;
            }
        }
        printf("Case #%d: ",cas);
        init();
        bfs();
    }
    return 0;
}

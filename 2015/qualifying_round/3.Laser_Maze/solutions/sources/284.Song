#include <iostream>
#include <queue>

using namespace std;

int t;
char s[100][101];
bool a[4][100][100];
int v[4][100][100];
const int large = 1000000;
int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
char op[10] = ">v<^";

int main() {
	cin >> t;
	for (int ca=1; ca<=t; ca++) {
		int n, m;
		cin >> n >> m;
		for (int i=0; i<n; i++) {
			cin >> s[i];
		}
		memset(a, 0, sizeof(a));
		for (int k=0; k<4; k++) {
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					v[k][i][j] = large;
				}
			}			
		}
		pair<int, int> source;
		pair<int, int> target;
		for (int i=0; i<n; i++) {
			for (int j=0; j<m; j++) {
				if (s[i][j] == 'S') {
					source.first = i;
					source.second = j;
					s[i][j] = '.';
				}
				if (s[i][j] == 'G') {
					target.first = i;
					target.second = j;
					s[i][j] = '.';
				}
			}
		}
		for (int k=0; k<4; k++) {
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					if (s[i][j] != '.') {
						a[k][i][j] = true;
					}
				}
			}
		}
		for (int k=0; k<4; k++) {
			for (int i=0; i<n; i++) {
				for (int j=0; j<m; j++) {
					char* needle = strchr(op, s[i][j]);
					if (needle) {
						int pos = (needle - op + k) % 4;
						int dx = dir[pos][0];
						int dy = dir[pos][1];
						int x = i;
						int y = j;
						a[k][i][j] = true;
						while(true) {
							x += dx;
							y += dy;
							if (0 <= x && x < n && 0 <= y && y < m && s[x][y] == '.') {
								a[k][x][y] = true;
							} else {
								break;
							}
						}
					}
				}
			}
		}
		int cnt = 0;
		queue<int> q;
		q.push((source.first << 9) | source.second);
		v[0][source.first][source.second] = 0;
		while (q.size() > 0) {
			int p = q.front();
			q.pop();
			int k = p >> 18;
			int x = (p >> 9) & 511;
			int y = p & 511;
			for (int z=0; z<4; z++) {
				int nk = (k + 1) % 4;
				int nx = x + dir[z][0];
				int ny = y + dir[z][1];
				if (0 <= nx && nx < n && 0 <= ny && ny < m) {
					if (!a[nk][nx][ny] && v[k][x][y] + 1 < v[nk][nx][ny]) {
						int np = (nk << 18) | (nx << 9) | ny;
						q.push(np);
						v[nk][nx][ny] = v[k][x][y] + 1;
					}
				}
			}
		}

		cnt = min(min(v[0][target.first][target.second], v[1][target.first][target.second]),
				min(v[2][target.first][target.second], v[3][target.first][target.second]));
		if (cnt < large) {
			cout << "Case #" << ca << ": " << cnt << endl;
		} else {
			cout << "Case #" << ca << ": " << "impossible" << endl;
		}
	}
	return 0;
}

#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#define PI acos(-1.0)
#define inf 0x3f3f3f3f
#define maxn 200
#define eps 1e-7
using namespace std;

#ifdef __int64
typedef __int64 LL;
#else
typedef long long LL;
#endif

char s[maxn][maxn];
bool kill[5][maxn][maxn];
int t[4][maxn][maxn];

int nextx[] = {-1, 0, 1, 0};
int nexty[] = {0, 1, 0, -1};

struct node{
    int t;
    int x,y;
}G,S;

int main() {
    int T, n, m, cas=1;
    scanf("%d", &T);
    while(T--) {
        scanf("%d%d", &n, &m);
        for(int i=0; i<n; i++) {
            scanf("%s", s[i]);
            for(int j=0; j<m; j++){
                if(s[i][j] == 'S'){
                    S.x = i, S.y = j;
                    s[i][j] = '.';
                }else if(s[i][j] == 'G'){
                    G.x = i, G.y = j;
                    s[i][j] = '.';
                }
            }
        }
        memset(kill,0,sizeof kill);
        for(int i=0; i<4; i++) {
            for(int j=0; j<n; j++) {
                for(int k=0; k<m; k++) {
                    int nowdir ;
                    if(s[j][k] == '^') {
                        nowdir = 0;
                    } else if(s[j][k] == '>') {
                        nowdir = 1;
                    } else if(s[j][k] == 'v') {
                        nowdir = 2;
                    } else if(s[j][k] == '<') {
                        nowdir = 3;
                    } else {
                        continue;
                    }
                    nowdir = (nowdir + i) % 4;
                    int x = j, y = k;
                    while(1){
                        x += nextx[nowdir];
                        y += nexty[nowdir];
                        if(x<0 || x>=n || y<0 || y>=m)break;
                        if(s[x][y] != '.')break;
                        kill[i][x][y] = true;
                    }
                }
            }
        }

        memset(t, inf, sizeof t);
//        for(int i=0; i<4; i++){
//            for(int j=0; j<n; j++){
//                for(int k=0; k<m; k++){
//                    printf("%d",kill[i][j][k]);
//                }
//                puts("");
//            }
//            puts("\n--\n");
//        }

        queue<node>q;
        S.t = 0;
        q.push(S);
        t[0][S.x][S.y] = 0;

        while(!q.empty()){
            node now = q.front(),next;
            q.pop();
            for(int i=0; i<4; i++){
                next.x = now.x + nextx[i];
                next.y = now.y + nexty[i];
                next.t = (now.t+1);
                if(next.x<0 || next.y<0 || next.x>=n || next.y>=m)continue;
                if(s[next.x][next.y] != '.')continue;
                if(kill[next.t%4][next.x][next.y])continue;
                if(t[next.t%4][next.x][next.y] <= next.t)continue;
                t[next.t%4][next.x][next.y] = next.t;
                q.push(next);
            }
        }
        printf("Case #%d: ",cas++);
        int ans = inf;
        for(int i=0; i<4; i++){
            ans = min(ans, t[i][G.x][G.y]);
        }
        if(ans == inf){
            puts("impossible");
        }else{
            printf("%d\n",ans);
        }
    }
    return 0;
}

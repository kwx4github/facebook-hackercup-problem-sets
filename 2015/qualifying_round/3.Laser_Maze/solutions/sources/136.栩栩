#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
const int N = 110;
const int M = 4;
char map[N][N];
bool ban[N][N][4], vis[N][N][4];
int T, n, m, sx, sy;
int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};
int getd(char ch){
	switch(ch){
		case '^': return 3;
		case '>': return 0;
		case 'v': return 1;
		case '<': return 2;
		default: return -1;
	}
}
void check(int x, int y, int d){
	for(int i=0; i<4; i++){
		d = (d+1)%4;
		for(int xx=x+dx[d], yy=y+dy[d]; ;xx+=dx[d], yy+=dy[d]){
			if(xx<0 || xx>=n || yy<0 || yy>=m)	break;
			if(map[xx][yy]!='.' && map[xx][yy]!='G')	break;
			ban[xx][yy][i] = 1;
		}
	}
}
struct Point{
	int x, y, u;
	Point(){}
	Point(int x, int y, int u):x(x),y(y),u(u){}
};
int solve(){
	queue<Point> Q;
	Q.push(Point(sx, sy, 0));
	while(!Q.empty()){
		Point p = Q.front();Q.pop();
		if(map[p.x][p.y]=='G')	return p.u;
		if(vis[p.x][p.y][p.u%4])	continue;
		vis[p.x][p.y][p.u%4]=1;
		for(int i=0; i<4; i++){
			int a = p.x+dx[i];
			int b = p.y+dy[i];
			if(a<0 || a>=n || b<0 || b>=m)	continue;
			if(map[a][b]!='.' && map[a][b]!='G')	continue;
			int u = p.u+1;
			if(ban[a][b][u%4])	continue;
			if(!vis[a][b][u%4])	Q.push(Point(a, b, u));
		}
	}
	return -1;
}
int main(){
	scanf("%d", &T);
	for(int t=1; t<=T; t++){
		scanf("%d %d", &n, &m);
		memset(ban, 0, sizeof(ban));
		memset(vis, 0, sizeof(vis));
		for(int i=0; i<n; i++){
			scanf("%s", map[i]);
		}
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(map[i][j]=='S'){
					map[i][j]='.';
					sx=i;
					sy=j;
				}
				else{
					int d = getd(map[i][j]);
					if(~d)
						check(i, j, d);
				}
			}
		}
		int ans = solve();
		printf("Case #%d: ", t);
		if(~ans)	printf("%d\n", ans);
		else	puts("impossible");
	}
	return 0;
}

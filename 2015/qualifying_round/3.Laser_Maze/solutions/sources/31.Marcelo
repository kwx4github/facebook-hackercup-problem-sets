#include <bits/stdc++.h>
using namespace std;
#define INF 0x3f3f3f3f
#define F first
#define S second
#define REP(i,n) for(int i=0; i<n; i++)
#define R(x) scanf("%d",&x)
typedef long long int64;
typedef pair<int,int> pii;
typedef pair<pii,int> p3i;

char ltp[]="^>v<";
int du[]={-1,0,1,0};
int dv[]={0,1,0,-1};
pii ps,pt;

#define N 110
char t[N][N];
int h,w;

bool valid(pii x) {
	return (x.F>=0 && x.F<h && x.S>=0 && x.S<w && strchr(".SG",t[x.F][x.S]));
}

bool chk(pii x, int nt) {
	REP(i,h)
		REP(j,w) {
			char *fc=strchr(ltp,t[i][j]);
			if (!fc) continue;

			int k=(fc-ltp+nt)%4;
			for (int a=i+du[k], b=j+dv[k]; valid(pii(a,b)); ) {
				if (a==x.F && b==x.S) return false;
				a+=du[k];
				b+=dv[k];
			}
		}
	return true;
}

int bfs() {
	map<p3i,int> sd;
	queue<p3i> q;

	q.push(p3i(ps,0));
	sd[q.front()]=0;

	while (q.size()) {
		pii x=q.front().F;
		int t4=q.front().S;
		int cd=sd[p3i(x,t4)];
		q.pop();

		if (x==pt) return cd;

		REP(i,4) {
			pii nx=pii(x.F+du[i], x.S+dv[i]);
			int nt=(t4+1)%4;
			p3i nq=p3i(nx,nt);
			
			if (valid(nx) && sd.find(nq)==sd.end() && chk(nx,nt)) {
				sd[nq]=cd+1;
				q.push(nq);
			}
		}
	}
	return INF;
}

int main() {
	int nt;

	R(nt);
	REP(ct,nt) {
		R(h); R(w);

		REP(i,h)
			REP(j,w) {
				scanf(" %c",&t[i][j]);
				if (t[i][j]=='S') ps=pii(i,j);
				if (t[i][j]=='G') pt=pii(i,j);
			}

		int res=bfs();

		printf("Case #%d: ",ct+1);
		if (res>=INF) printf("impossible\n");
		else printf("%d\n",res);
	}
				
	return 0;
}


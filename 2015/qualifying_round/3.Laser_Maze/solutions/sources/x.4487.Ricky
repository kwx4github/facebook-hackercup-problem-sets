#include <cstdio>
#include <queue>
using namespace std;

struct P {
	int turn, x, y, cnt;
};

int main() {
	int t;
	
	freopen("in3.txt", "r", stdin);
	freopen("out3.txt", "w", stdout);
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		char map[105][105];
		bool is_fin, is_safe[105][105][10], is_pass[105][105][10];
		int row, col, st, pos;
		queue<P> bfs;
		P temp, temp2;
		
		printf("Case #%d: ", tc);
		scanf("%d %d", &row, &col);
		for (int i = 0; i <= row - 1; i++) {
			for (int j = 0; j <= col - 1; j++) {
				for (int k = 0; k <= 3; k++) {
					is_safe[i][j][k] = true;
					is_pass[i][j][k] = true;
				}
			}
		}
		for (int i = 0; i <= row - 1; i++) {
			scanf("%s", map[i]);
			for (int j = 0; j <= col - 1; j++) {
				if (!((map[i][j] == '.') || (map[i][j] == 'S') || (map[i][j] == 'G'))) {
					for (int k = 0; k <= 3; k++)
						is_safe[i][j][k] = true;
				}
				else if (map[i][j] == 'S') {
					temp.y = i;
					temp.x = j;
					temp.turn = 0;
					temp.cnt = 0;
				}
			}
		}
		for (int i = 0; i <= row - 1; i++) {
			for (int j = 0; j <= col - 1; j++) {
				if ((map[i][j] == '.') || (map[i][j] == 'S') || (map[i][j] == 'G') || (map[i][j] == '#'))
					continue;
				if (map[i][j] == '^')
					st = 0;
				else if (map[i][j] == '>')
					st = 1;
				else if (map[i][j] == 'v')
					st = 2;
				else
					st = 3;
				for (int k = 0; k <= 3; k++) {
					if (st == 0) {
						pos = i - 1;
						while ((pos >= 0) && ((map[pos][j] == '.') || (map[pos][j] == 'S') || (map[pos][j] == 'G'))) {
							is_safe[pos][j][k] = false;
							pos--;
						}
					}
					else if (st == 1) {
						pos = j + 1;
						while ((pos <= col - 1) && ((map[i][pos] == '.') || (map[i][pos] == 'S') || (map[i][pos] == 'G'))) {
							is_safe[i][pos][k] = false;
							pos++;
						}
					}
					else if (st == 2) {
						pos = i + 1;
						while ((pos <= row - 1) && ((map[pos][j] == '.') || (map[pos][j] == 'S') || (map[pos][j] == 'G'))) {
							is_safe[pos][j][k] = false;
							pos++;
						}
					}
					else {
						pos = j - 1;
						while ((pos >= 0) && ((map[i][pos] == '.') || (map[i][pos] == 'S') || (map[i][pos] == 'G'))) {
							is_safe[i][pos][k] = false;
							pos--;
						}
					}
					st = (st + 1) % 4;
				}
			}
		}
		bfs.push(temp);
		is_fin = false;
		while (! bfs.empty()) {
			temp = bfs.front();
			bfs.pop();
			if ((temp.y < 0) || (temp.y >= row) || (temp.x < 0) || (temp.x >= col))
				continue;
			if ((temp.cnt >= 1) && (! is_safe[temp.y][temp.x][temp.turn]))
				continue;
			if (! is_pass[temp.y][temp.x][temp.turn])
				continue;
			if (map[temp.y][temp.x] == 'G') {
				printf("%d\n", temp.cnt);
				is_fin = true;
				break;
			}
			is_pass[temp.y][temp.x][temp.turn] = false;
			// up
			temp2 = temp;
			temp2.y--;
			temp2.turn = (temp2.turn + 1) % 4;
			temp2.cnt++;
			bfs.push(temp2);
			// down
			temp2 = temp;
			temp2.y++;
			temp2.turn = (temp2.turn + 1) % 4;
			temp2.cnt++;
			bfs.push(temp2);
			// right
			temp2 = temp;
			temp2.x++;
			temp2.turn = (temp2.turn + 1) % 4;
			temp2.cnt++;
			bfs.push(temp2);
			// left
			temp2 = temp;
			temp2.x--;
			temp2.turn = (temp2.turn + 1) % 4;
			temp2.cnt++;
			bfs.push(temp2);
		}
		if (! is_fin)
			puts("impossible");
	}
	fclose(stdin);
	fclose(stdout);
	return 0;
}

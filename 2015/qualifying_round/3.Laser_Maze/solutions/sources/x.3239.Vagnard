#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <ctime>
 
using namespace std;
 
#pragma comment(linker, "/STACK:367772160")
 
typedef unsigned long long ull;
 
int t, n, m;
char A[400][400][4];
int dist[400][400][4];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
char turrels[4] = {'^', '>', 'v', '<'};
char pos[256];
int main()
{
 srand(time(0));
 //freopen("input.txt","r",stdin);
 //freopen("output.txt","w",stdout);
 scanf("%d",&t);
 for (int i = 0 ; i < 4 ; i ++ )
	 pos[turrels[i]] = i + 1;
 for (int _ = 1 ; _ <= t ; _ ++ )
 {
	 memset(dist, 0, sizeof(dist));
	 memset(A, 0, sizeof(A));
	 scanf("%d %d",&n,&m);
	 for (int i = 1 ; i <= n ; i ++ )
	 {
		 scanf("\n");
		 for (int j = 1 ; j <= m ; j ++ ) {
			 scanf("%c",&A[i][j][0]);
			for (int k = 0 ; k < 4 ; k ++ )
				 A[i][j][k] = A[i][j][0];
		 };
	 };
	 for (int i = 0 ; i < 4 ; i ++ )
		 for (int j = 1 ; j <= n ; j ++ )
			 for (int k = 1 ; k <= m ; k ++ )
				 if ( pos[A[j][k][i]] > 0 )
					 A[j][k][i] = turrels[(pos[A[j][k][i]] + i - 1) % 4];
	 int stx, sty, finx, finy;
	 for (int i = 0 ; i < 4 ; i ++ )
		 for (int j = 1 ; j <= n ; j ++ )
			 for (int k = 1 ; k <= m ; k ++ )
				 dist[j][k][i] = 2e9;
	 for (int i = 0 ; i < 4 ; i ++ )
		 for (int j = 1 ; j <= n ; j ++ )
			 for (int k = 1 ; k <= m ; k ++ ) {
				 if ( pos[A[j][k][i]] > 0 ) {
					 int z = pos[A[j][k][i]] - 1;
					 for (int t = 1 ; j + t * dx[z] > 0 && j + t * dx[z] <= n && k + t * dy[z] > 0 && k + t * dy[z] <= m &&
						 A[i][j + t * dx[z]][k + t * dy[z]] != '#' && pos[A[i][j + t * dx[z]][k + t * dy[z]]] == 0 ; t ++ )
							dist[j + t * dx[z]][k + t * dy[z]][i] = -1;
					 dist[j][k][i] = -1;
				 };
				 if ( A[j][k][i] == '#' )
					 dist[j][k][i] = -1;
				 if ( A[j][k][i] == 'S' )
					 stx = j, sty = k;
				 if ( A[j][k][i] == 'G' )
					 finx = j, finy = k;
			 };
		dist[stx][sty][0] = 0;
	queue<pair<int,pair<int,int>>> q;
	q.push(make_pair(0,make_pair(stx,sty)));
	while ( !q.empty() )
	{
		int tm = q.front().first, x = q.front().second.first, y = q.front().second.second;
		q.pop();
		for (int i = 0 ; i < 4 ; i ++ )
		{
			int new_x = x + dx[i], new_y = y + dy[i], new_tm = (tm + 1) % 4;
			if ( dist[new_x][new_y][new_tm] > dist[x][y][tm] + 1 ) {
				dist[new_x][new_y][new_tm] = dist[x][y][tm] + 1;
				q.push(make_pair(new_tm, make_pair(new_x, new_y)));
			};
		};
	};
	int answer = 2e9;
	for (int i = 0 ; i < 4 ; i ++ )
		if ( dist[finx][finy][i] != -1 )
			answer = min(answer, dist[finx][finy][i]);
	printf("Case #%d: ",_);
	if ( answer == 2e9 )
		cout << "impossible\n";
	else
		cout << answer << endl;
 };
 return 0;
};   
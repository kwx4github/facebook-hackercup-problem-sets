#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <string>
#include <sstream>
#include <unordered_map>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector <int> vi;

#define pb push_back
#define mp make_pair

template <class T> inline T sqr(const T& x) { return x * x; }
template <class T> inline void updMin(T& a, const T& b) { if (b < a) a = b; }
template <class T> inline void updMax(T& a, const T& b) { if (b > a) a = b; }

const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; 

vector<pii> fires; 
vector<int> dests; 
string s[1000]; 
const int maxv = 100 * 100 * 4 + 10; 
int xs[maxv], ys[maxv], dst[maxv]; 
int dist[101][101][4]; 
int head, tail; 
int x, y; 
int n, m; 

void add(int x, int y, int dd, int d, bool check = true) {
	if (!(x >= 0 && y >= 0 && x < n && y < m)) return;
	if (dist[x][y][dd] != -1) return; 
	if (s[x][y] != '.') return; 
	for (int i = 0; i < fires.size() && check; i++) {
		int xx = fires[i].first; 
		int yy = fires[i].second; 
		int t = (dests[i] + dd) % 4; 
		while (1) {
			xx += dx[t]; 
			yy += dy[t]; 
			if (xx == x && yy == y) return; 
			if (!(xx >= 0 && yy >= 0 && xx < n && yy < m)) break; 
			if (s[xx][yy] != '.') break; 
		}
	}
	xs[tail] = x; 
	ys[tail] = y; 
	dst[tail] = dd;
	dist[x][y][dd] = d; 
	tail++; 
}

int main()
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	
	int t; 
	cin >> t; 
	for (int tt = 1; tt <= t; tt++) {
		cin >> n >> m; 
		fires.clear(); 
		dests.clear(); 
		memset(dist, -1, sizeof(dist)); 
		head = tail = 0; 
		for (int i = 0; i < n; i++) {
			s[i].clear(); 
			cin >> s[i]; 
			for (int j = 0; j < m; j++) {
				if (s[i][j] == 'S') {
					s[i][j] = '.'; 
					add(i, j, 0, 0, false); 
				}
				if (s[i][j] == 'G') x = i, y = j, s[i][j] = '.'; 
				if (s[i][j] == '^') fires.pb(mp(i, j)), dests.pb(0); 
				if (s[i][j] == '>') fires.pb(mp(i, j)), dests.pb(1); 
				if (s[i][j] == 'v') fires.pb(mp(i, j)), dests.pb(2); 
				if (s[i][j] == '<') fires.pb(mp(i, j)), dests.pb(3); 
			}
		}

		int ans = -1; 
		while (head < tail) {
			int xx = xs[head]; 
			int yy = ys[head]; 
			int dd = dst[head]; 
			head++; 
			int d = dist[xx][yy][dd]; 
			if (xx == x && yy == y) {
				ans = d; 
				break; 
			}
			for (int i = 0; i < 4; i++) {
				add(xx + dx[i], yy + dy[i], (dd + 1) % 4, d + 1); 
			}
		}
		cout << "Case #" << tt << ": "; 
		if (ans != -1) {
			cout << ans << "\n"; 
		} else {
			cout << "impossible\n"; 
		}
	}

	return 0;
}



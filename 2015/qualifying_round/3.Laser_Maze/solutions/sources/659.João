#include <bits/stdc++.h>
#define L first
#define C second
using namespace std;

typedef pair<int,int> pii;

struct STATE {
  pii pos;
  int cnt;
  STATE (pii p, int c) : pos(p), cnt(c) { }
};

const int dirs[4][2] = {{-1, 0}, {0, +1}, {+1, 0}, {0, -1}};
int m, n, ans, dp[173][173][4];
char g[173][173];
pii st, fin;
bool laser[173][173][4];
queue <STATE> q;

bool valid(pii px){
  return !(px.L < 0 || px.L >= m || px.C < 0 || px.C >= n || g[px.L][px.C] != '.');
}

int main(){
  int T;
  
  scanf("%d", &T);
  for(int ct = 1; ct <= T; ct ++){

    scanf("%d %d", &m, &n);
    for(int i = 0; i < m; i ++){
      scanf(" %s", g[i]);
      for(int j = 0; j < n; j ++)
        if(g[i][j] == 'S'){
          st = pii(i, j);
          g[i][j] = '.';
        }
        else if(g[i][j] == 'G'){
          fin = pii(i, j);
          g[i][j] = '.';
        }
    }
    
    memset(laser, 0, sizeof laser);
    for(int i = 0; i < m; i ++)
      for(int j = 0; j < n; j ++)
        for(int d = 0; d < 4; d ++){
          int dir;
          if(g[i][j] == '^')
            dir = d;
          else if(g[i][j] == '>')
            dir = (1 + d) % 4;
          else if(g[i][j] == 'v')
            dir = (2 + d) % 4;
          else if(g[i][j] == '<')
            dir = (3 + d) % 4;
          else
            continue;

          int pl = i + dirs[dir][0], pc = j + dirs[dir][1];
          while(valid(pii(pl, pc))){
            laser[pl][pc][d] = true;
            pl += dirs[dir][0];
            pc += dirs[dir][1];
          }
        }

    memset(dp, -1, sizeof dp);
    q.push(STATE(st, 0));
    
    while(!q.empty()){
      STATE act = q.front();
      q.pop();

      if(act.cnt && (dp[act.pos.L][act.pos.C][act.cnt % 4] != -1 || !valid(act.pos) || laser[act.pos.L][act.pos.C][act.cnt % 4]))
        continue;

      dp[act.pos.L][act.pos.C][act.cnt % 4] = act.cnt;

      for(int i = 0; i < 4; i ++)
        q.push(STATE(pii(act.pos.L + dirs[i][0], act.pos.C + dirs[i][1]), act.cnt + 1));
    }
    
    ans = -1;
    for(int i = 0; i < 4; i ++)
      if(dp[fin.L][fin.C][i] != -1){
        if(ans == -1)
          ans = dp[fin.L][fin.C][i];
        else
          ans = min(ans, dp[fin.L][fin.C][i]);
      }

    printf("Case #%d: ", ct);
    if(ans != -1)
      printf("%d\n", ans);
    else
      printf("impossible\n");
  }

  return 0;
}

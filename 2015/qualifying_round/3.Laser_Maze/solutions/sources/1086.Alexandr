#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <map>
#include <algorithm>
#include <queue>
#include <sstream>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

class Solver
{
protected:
	virtual void solveTest(int test)
	{
	}
public:
	Solver()
	{

	}
	virtual ~Solver(){}

	void solve()
	{
		int T;
		scanf("%d",&T);
		for(int i=1;i<=T;i++)
		{
			cerr<<i<<" "<<clock()*1.0/CLOCKS_PER_SEC<<endl;
			solveTest(i);
			cerr<<i<<" "<<clock()*1.0/CLOCKS_PER_SEC<<endl;
		}
	}
};

class In
{
public:
	int nextInt() const
	{
		int t;
		scanf("%d",&t);
		return t;
	}
	string next() const
	{
		string s;
		cin>>s;
		return s;
	}
}in;

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const int dx[4]={-1,0,1,0};
	const int dy[4]={0,1,0,-1};

class LaserMaze:public Solver
{
	static const int MAXN=101;
	static const int INF=100000000;
	int n,m;
	string mp[5][MAXN];
	vector<int> dist[5][MAXN];

	map<char,int> getDir;
	queue<int> q;
protected:
	bool isEmpty(char c)
	{
		return c=='.' || c=='-';
	}
	int queuePeek()
	{
		int res=q.front();
		q.pop();
		return res;
	}
	void queuePush(int v)
	{
		q.push(v);
	}
	void queuePush(int k, int x, int y)
	{
		queuePush(k);
		queuePush(x);
		queuePush(y);
	}
	string printInt(int n)
	{
		ostringstream out;
		out<<n;
		return out.str();
	}
	void solveTest(int test)
	{
		n=in.nextInt();
		m=in.nextInt();
		REP(i,n)
			mp[0][i]=in.next();
		int sx=-1, sy=-1;
		int tx=-1, ty=-1;
		REP(i,n) REP(j,m)
		{
			if(mp[0][i][j]=='S')
			{
				sx=i;
				sy=j;
				mp[0][i][j]='.';
			}
			if(mp[0][i][j]=='G')
			{
				tx=i;
				ty=j;
				mp[0][i][j]='.';
			}
		}
		REP(i,n) REP(j,4)
			mp[j+1][i]=mp[0][i];
		REP(i,5) REP(j,n)
			dist[i][j]=vector<int>(m,INF);

		REP(i,n) REP(j,m) for(int k=1;k<=4;k++)
		{
			if(!isEmpty(mp[k][i][j]) && mp[k][i][j]!='#')
			{
				int ddx=dx[(getDir[mp[k][i][j]]+k)%4];
				int ddy=dy[(getDir[mp[k][i][j]]+k)%4];
				for(int t=1;;t++)
				{
					int nx=i+ddx*t;
					int ny=j+ddy*t;
					if(0<=nx && nx<n && 0<=ny && ny<m)
					{
						if(!isEmpty(mp[k][nx][ny]))
							break;
						mp[k][nx][ny]='-';
					}
					else
						break;
				}
			}
		}

		q.push(0);
		q.push(sx);
		q.push(sy);
		dist[0][sx][sy]=0;
		while(!q.empty())
		{
			int ck=queuePeek();
			int cx=queuePeek();
			int cy=queuePeek();
			for(int i=0;i<4;i++)
			{
				int nk=ck%4+1;
				int nx=cx+dx[i];
				int ny=cy+dy[i];
				if(0<=nx && nx<n && 0<=ny && ny<m && mp[nk][nx][ny]=='.')
				{
					if(dist[nk][nx][ny]==INF)
					{
						dist[nk][nx][ny]=dist[ck][cx][cy]+1;
						queuePush(nk,nx,ny);
					}
				}
			}
		}
		assert(getDir.size()==4);
		string result="impossible";
		int minres=INF;
		REP(i,5)
			minres=min(minres,dist[i][tx][ty]);
		if(minres!=INF)
			result=printInt(minres);
		printf("Case #%d: %s\n",test,result.c_str());
	}
public:
	LaserMaze()
	{
		n=m=-1;
		getDir['<']=3;
		getDir['>']=1;
		getDir['^']=0;
		getDir['v']=2;
	}
};

int main()
{
	LaserMaze().solve();
}

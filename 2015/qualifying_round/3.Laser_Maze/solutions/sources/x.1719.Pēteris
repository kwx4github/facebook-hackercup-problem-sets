#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <tuple>
#include <functional>
#include <cstring>
#include <cassert>

using namespace std;

#define MAXN 111

char rotateLaser(char l, int r) {
    static vector<pair<char, char>> m = {
        {'^', '>'}, {'>', 'v'}, {'v', '<'}, {'<', '^'}
    };

    for (int i = 0; i < r; i++) {
        for (size_t j = 0; j < m.size(); j++) {
            if (m[j].first == l) {
                l = m[j].second;
                break;
            }
        }
    }

    return l;
}

bool isLaser(char l) {
    return l == '^' || l == '>' || l == 'v' || l == '<';
}

struct board {
    int m, n;
    vector<string> b;

    board(int m, int n) : m(m), n(n) {}

    void addLine(string s) {
        b.push_back(s);
        assert((int)s.size() == n);
        assert((int)b.size() <= m);
    }

    void a() {
        assert((int)b.size() == m);
    }

    void buildWall(int r, int c, int rm, int cm) {
        r += rm;
        c += cm;
        while (
            r >= 0
            && r < m
            && c >= 0
            && c < n
            && (
                b[r][c] == '.'
                || b[r][c] == 'S'
                || b[r][c] == 'G'
            )
        ) {
            b[r][c] = '#';
            r += rm;
            c += cm;
        }
    }

    void rotateLasers(int r) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isLaser(b[i][j])) {
                    b[i][j] = rotateLaser(b[i][j], r);
                }
            }
        }
    }

    void shootLasers() {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!isLaser(b[i][j])) {
                    continue;
                }

                if (b[i][j] == '^') {
                    buildWall(i, j, -1, 0);
                } else if (b[i][j] == '>') {
                    buildWall(i, j, 0, 1);
                } else if (b[i][j] == 'v') {
                    buildWall(i, j, 1, 0);
                } else if (b[i][j] == '<') {
                    buildWall(i, j, 0, -1);
                }
            }
        }
    }

    board copy() const {
        board c(m, n);
        for (int i = 0; i < m; i++) {
            c.addLine(b[i]);
        }

        c.a();
        return c;
    }

    void print(string name) {
        cerr << "Board " << name << endl;
        for (auto it : b) {
            cerr << it << "\n";
        }
    }
};

int getMinMoves(const board &start) {
    vector<board> b;
    b.push_back(start.copy());
    b.push_back(start.copy());
    b.push_back(start.copy());
    b.push_back(start.copy());
    for (int i = 0; i < 4; i++) {
        b[i].rotateLasers(i);
        b[i].shootLasers();
    }

    if (true) {
        for (size_t i = 0; i < b.size(); i++) {
            string name = "t = ";
            name += (char)(((char)i)  + ((char)'0'));
            b[i].print(name);
        }
    }

    queue<tuple<int, int, int>> Q;
    bool enq[4][MAXN][MAXN];
    memset(enq, 0, sizeof(enq));

    int sCnt = 0, gCnt = 0;
    for (int i = 0; i < start.m; i++) {
        for (int j = 0; j < start.n; j++) {
            if (start.b[i][j] == 'S') {
                cerr << "Start is at " << i << ", " << j << endl;
                sCnt++;
                Q.push(make_tuple(i, j, 0));
                enq[0][i][j] = true;
            }

            if (start.b[i][j] == 'G') {
                gCnt++;
            }
        }
    }

    assert(sCnt == 1);
    assert(gCnt == 1);

    int dx[] = {-1,  0,  0,  1};
    int dy[] = { 0, -1,  1,  0};
    while (!Q.empty()) {
        int r = get<0>(Q.front());
        int c = get<1>(Q.front());
        int time = get<2>(Q.front());
        Q.pop();
        //cerr << "At (" << r << ", " << c << ") at time " << time << endl;

        if (start.b[r][c] == 'G') {
            return time;
        }

        int nextTime = time + 1;
        board *nextBoard = &b[nextTime % 4];
        for (int i = 0; i < 4; i++) {
            int nr = r + dy[i];
            int nc = c + dx[i];
            if (
                nr < 0 || nr >= nextBoard->m
                || nc < 0 || nc >= nextBoard->n
            ) {
                continue;
            }

            if (
                nextBoard->b[nr][nc] != '.'
                && nextBoard->b[nr][nc] != 'S'
                && nextBoard->b[nr][nc] != 'G'
            ) {
                continue;
            }

            if (enq[nextTime % 4][nr][nc]) {
                continue;
            }

            Q.push(make_tuple(nr, nc, nextTime));
            enq[nextTime % 4][nr][nc] = true;
        }
    }

    return -1;
}

int main() {
    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;
    for (int i = 1; i <= t; i++) {
        cerr << endl << endl << endl;
        cerr << "Test i = " << i << endl;
        int m, n;
        cin >> m >> n;

        board start(m, n);
        cin.ignore(100, '\n');
        for (int j = 0; j < m; j++) {
            string l;
            getline(cin, l);
            start.addLine(l);
        }

        start.a();
        cout << "Case #" << i << ": ";
        int res = getMinMoves(start);
        if (res == -1) {
            cout << "impossible" << endl;
        } else {
            cout << res << endl;
        }
    }
}

#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cctype>
#include <cmath>
#include <ctime>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <list>
using namespace std;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
char s[102][102];
char g[4][102][102];
int b[4][102][102];
struct node {
int x,y,d;
};

int m,n;


void make(char g[102][102],int x,int y,int d) {
vector<pair<int,int> > v;
	for (;;) {
		v.push_back(make_pair(x, y));
		x += dx[d];
		y += dy[d];
		
		if ((x < 0) || (x >= m) || (y < 0) || (y >= n) || (g[x][y] != '.')) {
			break;
		}
	}
	for (int i = 0; i < v.size(); ++i) {
		g[v[i].first][v[i].second] = '#';
	}
	
}

int main() {
int c;
	scanf("%d",&c);
	for (int z = 1; z <= c; ++z) {
		int ex,ey,sx,sy;
		node temp;
		vector<node> v;
		scanf("%d%d",&m,&n);
		for (int i = 0; i < m; ++i) {
			scanf("%s",s[i]);
			for (int j = 0; j < n; ++j) {
				if (s[i][j] == '^') {
					temp.x = i;
					temp.y = j;
					temp.d = 0;
					v.push_back(temp);
				}
				else if (s[i][j] == '>') {
					temp.x = i;
					temp.y = j;
					temp.d = 1;
					v.push_back(temp);
				}
				else if (s[i][j] == 'v') {
					temp.x = i;
					temp.y = j;
					temp.d = 2;
					v.push_back(temp);
				}
				else if (s[i][j] == '<') {
					temp.x = i;
					temp.y = j;
					temp.d = 3;
					v.push_back(temp);
				}
				else if (s[i][j] == 'S') {
					sx = i;
					sy = j;
					s[i][j] = '.';
				}
				else if (s[i][j] == 'G') {
					s[i][j] = '.';
					ex = i;
					ey = j;
				}
				
				
			}
			
		}
		for (int i = 0; i < 4; ++i) {
			memcpy(g[i], s, sizeof(s));
			for (int j = 0; j < v.size(); ++j) {
				make(g[i], v[j].x, v[j].y, (v[j].d + i) & 3);
			}
		}
		queue<node> q;
		memset(b, 0xff,sizeof(b));
		b[0][sx][sy] = 0;
		temp.x = sx;
		temp.y = sy;
		temp.d = 0;
		int answer = -1;
		
		for (q.push(temp); !q.empty(); q.pop()) {
			temp = q.front();
			if ((temp.x == ex) && (temp.y == ey)) {
				answer = b[temp.d][temp.x][temp.y];
				break;
			}
			node next;
			next.d = (temp.d + 1) & 3;
			for (int i = 0; i < 4; ++i) {
				next.x = temp.x + dx[i];
				next.y = temp.y + dy[i];
				
				if ((next.x >= 0) && (next.x < m) && (next.y >= 0) && (next.y < n) && (g[next.d][next.x][next.y] == '.') && (b[next.d][next.x][next.y] < 0)) {
					b[next.d][next.x][next.y] = b[temp.d][temp.x][temp.y] + 1;
					q.push(next);
				}
			}
		}
		printf("Case #%d: ",z);
		if (answer >= 0) {
			printf("%d\n",answer);
		}
		else {
			puts("impossible");
		}
		
	}
	return 0;
}

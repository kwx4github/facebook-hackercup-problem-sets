//LaserMaze.cpp
//I_Have_A_Dream
#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <utility>
#include <sstream>
#include <iomanip>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <cstdio>
#include <bitset>
#include <cmath>
#include <ctime>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>

using namespace std;

#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end();i++)
#define present(c,x)  ( (c).find(x) !=(c).end())
#define cpresent(c,x) (find(all(c),x)!= (c).end() )
#define minei(x)  min_element(x.begin(),x.end())-(x).begin()
#define maxei(x)  max_element(x.begin(),x.end())-(x).begin()

#define uns(v)     sort((v).begin(),(v).end()),v.erase(unique(v.begin(),v.end()),v.end())
#define acusum(x)  accumulate(x.begin(),x.end(),0)
#define acumul(x)  accumulate(x.begin(),x.end(),1, multiplies<int>()); 
#define bits(x)     __builtin_popcount( x )
#define oo INT_MAX
#define inf 1000000000

const double pi=acos(-1.0);
const double eps=1e-11;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
int KILLED[5][101][101];
int n,m;
int si,sj,ei,ej;
char MAZE[101][101];
int vis[101][101];

void preProcessing(){
  for(int k=1;k<=4;k++){
    for(int i=0;i<n;++i){
      for(int j=0;j<m;++j){
        if(MAZE[i][j]=='^') MAZE[i][j]='>';
        else if(MAZE[i][j]=='>') MAZE[i][j]='v';
        else if(MAZE[i][j]=='v') MAZE[i][j]='<';
        else if(MAZE[i][j]=='<') MAZE[i][j]='^';
      }
    }
    for(int i=0;i<n;++i){
      for(int j=0;j<m;++j){
        int jt=0,it=0;
        if(MAZE[i][j]=='>'){
          jt=j+1;
          while(jt<m){
            if(MAZE[i][jt]=='.') KILLED[k][i][jt]=1;
            else{

              break;
            }
            jt++;
          }
        }
        if(MAZE[i][j]=='<'){
          jt=j-1;
          while(jt>=0){
            if(MAZE[i][jt]=='.') KILLED[k][i][jt]=1;
            else{

              break;
            }
            jt--;
          }
        }

        if(MAZE[i][j]=='v'){
          it=i+1;
          while(it<n){
            if(MAZE[it][j]=='.') KILLED[k][it][j]=1;
            else{

              break;
            }
            it++;
          }
        }
        if(MAZE[i][j]=='^'){
          it=i-1;
          while(it>=0){
            if(MAZE[it][j]=='.') KILLED[k][it][j]=1;
            else{

              break;
            }
            it--;
          }
        }
      }
    }

  }
}
int diri[]={-1,0,1,0,-1,1,1,-1};
int dirj[]={0,1,0,-1,1,1,-1,-1};
bool valid(int x,int y){
  return (x>=0&&y>=0&&x<n&&y<m);
}
int BFS(){
  queue<pair<int, pair<int, int> > > Q;
  Q.push(mp(si,mp(sj,0)));

  while(!Q.empty()){
    pair<int, pair<int, int> > tp=Q.front();
    Q.pop();
    int i=tp.first;
    int j=tp.second.first;
    int iter=tp.second.second;
    if(i==ei&&j==ej){
      return iter;
    }
    for(int k=0;k<4;++k){
      int ni=i+diri[k];
      int nj=j+dirj[k];
      if(valid(ni,nj)&&MAZE[ni][nj]=='.'&&vis[ni][nj]<5&&KILLED[(iter)%4+1][ni][nj]==0){
        vis[ni][nj]++;
        Q.push(mp(ni,mp(nj,iter+1)));
      }
    }
  }

  return -1;
}
int main(){
  std::ios_base::sync_with_stdio(0);
  freopen("laser_maze_output.txt","w",stdout);
  freopen("laser_maze.txt","r",stdin);
  int tc;
  cin>>tc;
  for(int T=1;T<=tc;++T){
    cin>>n>>m;
    for(int i=0;i<n;++i){
      for(int j=0;j<m;++j){
        cin>>MAZE[i][j];
        if(MAZE[i][j]=='S'){
          MAZE[i][j]='.';
          si=i,sj=j;
        }
        if(MAZE[i][j]=='G'){
          MAZE[i][j]='.';
          ei=i,ej=j;
        }
      }
    }
    memset(KILLED,0,sizeof KILLED);
    preProcessing();
    memset(vis,0,sizeof vis);
    int res=BFS();
    cout<<"Case #"<<T<<": ";
    if(res!=-1) cout<<res;
    else cout<<"impossible";
    if(T!=tc) cout<<endl;
  }

  return 0;
}

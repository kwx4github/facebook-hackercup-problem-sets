#include<iostream>
#include<string>
using namespace std;
#pragma comment(linker, "/STACK:50000000")
#define rep(a,b,c) for(int a=b;a<c;a++)

int map[101][101][4],mx,my,n,cn;
bool invalid[101][101][4];
int dx[]={-1,+1,0,0};
int dy[]={0,0,-1,+1};
void dfs(int x,int y,int z){
	//cout<<x<<" "<<y<<" "<<z<<endl;
	rep(i,0,4){
		int nx,ny,nz;
		nx=x+dx[i];
		ny=y+dy[i];
		nz=(z+1)%4;
		if(nx>=0 && nx<mx && ny>=0 && ny<my && !invalid[nx][ny][nz])
			if(map[nx][ny][nz]==-1 || map[x][y][z]+1<map[nx][ny][nz]){
				map[nx][ny][nz]=map[x][y][z]+1;
				//cout<<nx<<" "<<ny<<" "<<nz<<endl;
				dfs(nx,ny,nz);
			}
	}
}
string rmap[101];
int sx,sy,gx,gy,tmp;
int main(){
	cin>>n;
	cn=1;
	while(n--){
		cin>>mx>>my;
		memset(map,-1,sizeof map);
		memset(invalid,0,sizeof invalid);
		rep(i,0,mx) cin>>rmap[i];	
		rep(i,0,mx) rep(j,0,my){
			int tt=-1;
			if(rmap[i][j]=='#'){
				rep(k,0,4) invalid[i][j][k]=1;
			}else if(rmap[i][j]=='S'){
				sx=i;sy=j;
			}else if(rmap[i][j]=='G'){
				gx=i;gy=j;
			}else if(rmap[i][j]=='<'){
				tt=0;
			}else if(rmap[i][j]=='>'){
				tt=2;
			}else if(rmap[i][j]=='^'){
				tt=3;
			}else if(rmap[i][j]=='v'){
				tt=1;
			}
			if(tt!=-1){
				rep(k,0,4) invalid[i][j][k]=1;
				tmp=j;
				while(--tmp>=0 && (rmap[i][tmp]=='S' || rmap[i][tmp]=='G' || rmap[i][tmp]=='.')) invalid[i][tmp][tt]=1;
				tt=(tt+1)%4;tmp=i;
				while(--tmp>=0 && (rmap[tmp][j]=='S' || rmap[tmp][j]=='G' || rmap[tmp][j]=='.')) invalid[tmp][j][tt]=1;
				tt=(tt+1)%4;tmp=j;
				while(++tmp<my && (rmap[i][tmp]=='S' || rmap[i][tmp]=='G' || rmap[i][tmp]=='.')) invalid[i][tmp][tt]=1;
				tt=(tt+1)%4;tmp=i;
				while(++tmp<mx && (rmap[tmp][j]=='S' || rmap[tmp][j]=='G' || rmap[tmp][j]=='.')) invalid[tmp][j][tt]=1;
			}
		}
		map[sx][sy][0]=0;
		dfs(sx,sy,0);
		int ans=-1;
		rep(k,0,4) if(ans==-1 || (map[gx][gy][k]!=-1 && map[gx][gy][k]<ans) ) ans=map[gx][gy][k];
		if(ans==-1)
			cout<<"Case #"<<cn<<": "<<"impossible"<<(n?"\n":"");
		else
			cout<<"Case #"<<cn<<": "<<ans<<(n?"\n":"");
		cn++;
	}
	return 0;
}
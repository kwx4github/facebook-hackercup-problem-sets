#include <stdio.h>
#include <memory.h>

int Sx, Sy;
int Gx, Gy;
int T, N, M;
int idx0, idx1[2], stack[2][10010];
int D[5][105][105];
int map[105][105]; 
int count, result;

void set_map(){
	int i, j, u, val;

	for (i = 1; i <= M; i++){
		for (j = 1; j <= N; j++){
			if (map[i][j] < -1){
				val = map[i][j] * -1;
				u = 1;
				while (map[i][j + u] >= 0 && j + u <= N){
					if (map[i][j + u] == 0) map[i][j + u] = 1;
					map[i][j + u] *= val;
					u++;
				}
				if (++val > 7) val = 4;
				u = 1;
				while (map[i + u][j] >= 0 && i + u <= M){
					if (map[i + u][j] == 0) map[i + u][j] = 1;
					map[i + u][j] *= val;
					u++;
				}
				if (++val > 7) val = 4;
				u = -1;
				while (map[i][j + u] >= 0 && j + u > 0){
					if (map[i][j + u] == 0) map[i][j + u] = 1;
					map[i][j + u] *= val;
					u--;
				}
				if (++val > 7) val = 4;
				u = -1;
				while (map[i + u][j] >= 0 && i + u > 0){
					if (map[i + u][j] == 0) map[i + u][j] = 1;
					map[i + u][j] *= val;
					u--;
				}
			}
		}
	}
}

int search_point(int r, int y, int x){
	D[r][y][x] = 1;
	if (x == Gx && y == Gy){
		result = count;
		return 0;
	}
	stack[idx0][idx1[idx0]++] = y * 1000 + x;
	return 1;
}

void search_map(){
	int r, x, y, u1;
	int i, on = 1;

	stack[0][0] = Sy * 1000 + Sx;
	idx0 = 0;
	idx1[0] = 1;
	idx1[1] = 0;
	result = 0;
	count = 1;

	while (on){
		r = count % 4;
		if (r == 0) r = 4;
		
		u1 = idx0;
		idx0 = (idx0 + 1) % 2;
		on = 0;
		for (i = 0; i < idx1[u1]; i++){
			y = stack[u1][i] / 1000;
			x = stack[u1][i] % 1000;

			if (D[r][y][x + 1] == -1 && x + 1 <= N){
				if (map[y][x + 1] > 0 && map[y][x + 1] % (r + 3) != 0){
					on = search_point(r, y, x + 1);
					if (on == 0) break;
				}
			}
			if (D[r][y + 1][x] == -1 && y + 1 <= M){
				if (map[y + 1][x] > 0 && map[y + 1][x] % (r + 3) != 0){
					on = search_point(r, y + 1, x);
					if (on == 0) break;
				}
			}
			if (D[r][y][x - 1] == -1 && x - 1 > 0){
				if (map[y][x - 1] > 0 && map[y][x - 1] % (r + 3) != 0){
					on = search_point(r, y, x - 1);
					if (on == 0) break;
				}
			}
			if (D[r][y - 1][x] == -1 && y - 1 > 0){
				if (map[y - 1][x] > 0 && map[y - 1][x] % (r + 3) != 0){
					on = search_point(r, y - 1, x);
					if (on == 0) break;
				}
			}
		}
		count++;
	}
}

int main(){

	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int i, j, k;
	char temp[105];

	scanf("%d", &T);

	for (k = 1; k <= T; k++){
		scanf("%d %d", &M, &N);
		for (i = 1; i <= M; i++){
			scanf("%s", &temp);
			for (j = 0; j < N; j++){
				if (temp[j] == '#') map[i][j + 1] = -1;
				else if(temp[j] == '^') map[i][j + 1] = -4;
				else if (temp[j] == '>') map[i][j + 1] = -7;
				else if (temp[j] == 'v') map[i][j + 1] = -6;
				else if (temp[j] == '<') map[i][j + 1] = -5;
				else if (temp[j] == 'S'){
					map[i][j + 1] = 1;
					Sy = i; Sx = j + 1;
				}
				else if (temp[j] == 'G'){
					map[i][j + 1] = 1;
					Gy = i; Gx = j + 1;
				}
				else{
					map[i][j + 1] = 1;
				}
			}
		}
		set_map();
		memset(D, -1, sizeof(D));
		search_map();

		if (result > 0) printf("Case #%d: %d\n", k, result);
		else printf("Case #%d: impossible\n", k);
	}

	return 0;
}
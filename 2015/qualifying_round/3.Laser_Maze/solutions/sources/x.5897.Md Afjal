#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<string.h>
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
#include<iomanip>
using namespace std;

#define READ(a) freopen(a,"r",stdin);
#define WRITE(a) freopen(a,"w",stdout);
#define FOR(i,a,b)  for(int i=(a);i<b;i++)
#define REV(i,a,b)  for(int i=a;i>=b;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define clr(a) a.clear()
#define mp make_pair
#define pb push_back
#define SZ(a) (int)a.size()
#define all(a) (a).begin(),(a).end()
#define reall(a) (a).rbegin(),(a).rend()
#define fs first
#define sc second
#define PI (2*acos(0.0))
#define ERR (1e-7)
#define EQ(a,b) (fabs(a-b)<ERR)
#define onlyCPP ios_base::sync_with_stdio(0);cin.tie(0)
//#define FOREACH(it,x) for(__typeof((x.begin())) it=x.begin();it!=x.end();it++)
int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1};                      //4 Direction
////int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};  //8 direction
////int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//cout<<fixed<<setprecision(6)<<1.0<<endl;
typedef long long ll;
typedef unsigned long long ull; //scanf("%llu",&N);
typedef vector<int>     VI;
typedef vector<string>  VS;
typedef pair<int,int>   PII;
typedef pair<int,PII >  DPII;
typedef vector<pair<int,int> >VPII;
typedef vector<pair<int,pair<int,int> > > VDPII;

const int INF=(1<<29);
const int MAX=110;

char grid[MAX][MAX];
int R,C,startX,startY,endX,endY;
int col[MAX][MAX];
struct abc{
    int r,c,mask,mo;
    abc(){;}
    abc(int _r,int _c,int _m,int _mo) {r=_r;c=_c;mask=_m;mo=_mo;}
};

int face(char c) {
    if(c=='>') return 0;
    if(c=='v') return 1;
    if(c=='<') return 2;
    if(c=='^') return 3;
    return -1;
}

void fill_col(int id,int x,int y) {
    int shift;
    if(id==0) shift=0;
    else if(id==1) shift=3;
    else if(id==2) shift=2;
    else if(id==3) shift=1;
    for(int i=y;i<C and col[x][i]!='#';i++) col[x][i]|=(1<<shift);
    shift=(shift+1)%4;
    for(int i=x;i<R and col[i][y]!='#';i++) col[i][y]|=(1<<shift);
    shift=(shift+1)%4;
    for(int i=y;i>=0 and col[x][i]!='#';i--) col[x][i]|=(1<<shift);
    shift=(shift+1)%4;
    for(int i=x;i>=0 and col[i][y]!='#';i--) col[i][y]|=(1<<shift);
}

int dis[MAX][MAX][20];
int ok(int r,int c,int mask,int mo) {
    if(r>=0 and r<R and c>=0 and c<C){
        if(grid[r][c]=='#') return 0;
        int nMo=(mo+1)%4;
        if(dis[r][c][mask|(1<<nMo)]) return 0;
        if(col[r][c]&(1<<nMo)) return 0;
        return 1;
    }
    return 0;
}

int BFS() {
    mem(dis,0);
    queue<abc>Q;
    Q.push(abc(startX,startY,0,0));
    dis[startX][startY][0]=1;

    while(!Q.empty()) {
        abc q=Q.front();Q.pop();
        int pr=q.r;
        int pc=q.c;
        int pMask=q.mask;
        int pMo=q.mo;
        if(pr==endX and pc==endY) {
            int nMo=pMo%4;
            if(!(col[pr][pc]&(1<<nMo))) return pMo;
        }
        for(int i=0;i<4;i++) {
            int r=pr+rrr[i];
            int c=pc+ccc[i];
            if(ok(r,c,pMask,pMo)){
                int nMo=(pMo+1)%4;
                Q.push(abc(r,c,pMask|(1<<nMo),pMo+1));
                dis[r][c][pMask|(1<<nMo)]=1;
            }
        }
    }
    return -1;
}

int solve() {
    mem(col,0);
    for(int i=0;i<R;i++) {
        for(int j=0;j<C;j++) {
            int id=face(grid[i][j]);
            if(id==-1) continue;
            fill_col(id,i,j);
        }
    }
    int res=BFS();
    return res;
}

int main() {

    //freopen("IN.txt","r",stdin);
    //freopen("OUT.txt","w",stdout);
    int t,cas=0;
    scanf("%d",&t);
    while(t--) {
        scanf("%d %d",&R,&C);
        for(int i=0;i<R;i++) {
            for(int j=0;j<C;j++) {
                scanf(" %c",&grid[i][j]);
                if(grid[i][j]=='S') startX=i,startY=j;
                if(grid[i][j]=='G') endX=i,endY=j;
            }
        }
        int res=solve();
        if(res!=-1) cout<<"Case #"<<++cas<<": "<<res<<endl;
        else cout<<"Case #"<<++cas<<": "<<"impossible"<<endl;
    }
    return 0;
}




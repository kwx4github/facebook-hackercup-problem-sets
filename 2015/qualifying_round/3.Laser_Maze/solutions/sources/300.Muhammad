import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.InputStream;
import java.util.*;
import java.math.*;
import java.lang.*;     

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		InputReader in = new InputReader(inputStream);
		Solution solver = new Solution();
		solver.solve(in);
	}
}

class Solution {    
    
    // wrap primitive type then sort 
    static void sort(int[] qq){
        Integer[] qqq=new Integer[qq.length];
        for (int i = 0; i <= qq.length-1; i+=1) qqq[i]=qq[i];
        Arrays.sort(qqq);
        for (int i = 0; i <= qq.length-1; i+=1) qq[i]=qqq[i];
    }
     static void sort(long[] qq){
        Long[] qqq=new Long[qq.length];
        for (int i = 0; i <= qq.length-1; i+=1) qqq[i]=qq[i];
        Arrays.sort(qqq);
        for (int i = 0; i <= qq.length-1; i+=1) qq[i]=qqq[i];
    }
    
    //debugger
    static void vectrace(ArrayList qwe) {for (int i = 0; i <= qwe.size()-1; i+=1) System.out.println("["+i+"] = "+qwe.get(i));}
    static void arrtrace(Object[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void arrtrace(char[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void arrtrace(int[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void arrtrace(long[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void arrtrace(float[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void arrtrace(double[] qwe){for (int i = 0; i <= qwe.length-1; i+=1) System.out.println("["+i+"] = "+qwe[i]);}
    static void tarrtrace(int[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}
    static void tarrtrace(long[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}
    static void tarrtrace(char[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}
    static void tarrtrace(double[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}
    static void tarrtrace(float[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}
    static void tarrtrace(Object[][] qwe) {for (int i = 0; i <= qwe.length-1; i+=1) for (int j = 0; j <= qwe[0].length-1; j+=1) System.out.println("["+i+"]["+j+"] = "+qwe[i][j]);}

    // global vars
    
    //main solution
    static int m;
    static int n;
    static String maze[][];
    static String mz[][][];
    static int[][][] mem;
    static int rowgoal;
    static int colgoal;
    static int rowstart;
    static int colstart;
    static int inf=999999;
    static ArrayList<Integer> rowlaser = new ArrayList<Integer>();
    static ArrayList<Integer> collaser = new ArrayList<Integer>();
    static void pr(String[][] qwe){
        for (int i = 0; i <= qwe.length-1; i+=1) {
            for (int j = 0; j <= qwe[0].length-1; j+=1) {
                System.out.print(qwe[i][j]);
            }
            System.out.println();
        }
    }
    static void pr3(int i){
        // for (int i = 0; i <= 3; i+=1) {
            for (int j = 0; j <= m+1; j+=1) {
                 for (int k = 0; k <= n+1; k+=1) {
                        System.out.print(mz[j][k][i]);
                    }
                    System.out.println();
                }
                System.out.println("");
            // }
    }
    static void pr2(){
        for (int i = 0; i <= 3; i+=1) {
            for (int j = 0; j <= m+1; j+=1) {
                 for (int k = 0; k <= n+1; k+=1) {
                        System.out.print(mz[j][k][i]);
                    }
                    System.out.println();
                }
                System.out.println("");
            }
    }
    static String[][] cop2d(String[][] qwe){
        String[][] q=new String[qwe.length][qwe[0].length];
        for (int i = 0; i <= qwe.length-1; i+=1) {
            for (int j = 0; j <= qwe[0].length-1; j+=1) {
                q[i][j]=qwe[i][j];
            }
        }
        return q;
    }
    static void getlaser(){
        String laser="^v<>";
        for (int i = 0; i <= maze.length-1; i+=1) {
            for (int j = 0; j <= maze[0].length-1; j+=1) {
                if (laser.contains(maze[i][j])) {
                    rowlaser.add(i);
                    collaser.add(j);
                }
            }
        }
    }
 static void tembak(String[][] mc){
        for (int iq = 0; iq <= rowlaser.size()-1; iq+=1) {
            int row=rowlaser.get(iq);
            int col=collaser.get(iq);
            String ngalangin="x#v^<>";
            //vertikal
            if (mc[row][col].equals("^")) { 
                for (int i = row-1; i >= 1; i-=1) {
                    if (ngalangin.contains(mc[i][col])) { //wall
                        break;
                    }
                    mc[i][col]="k";
                }
            }
            if (mc[row][col].equals("v")) {
                for (int i = row+1; i <= m; i+=1) {
                    if (ngalangin.contains(mc[i][col])) {
                        break;
                    }
                    mc[i][col]="k";
                }
            }
            //horizontal
            if (mc[row][col].equals(">")) {
                for (int i = col+1; i <= n; i+=1) {
                    if (ngalangin.contains(mc[row][i])) {
                        break;
                    }
                    mc[row][i]="k";
                }
            }
            if (mc[row][col].equals("<")) {
                for (int i = col-1; i >= 1; i-=1) {
                    if (ngalangin.contains(mc[row][i])) {
                        break;
                    }
                 mc[row][i]="k";
                }
            }
        }
    }
    static String rotlaser(String s){
        String r="";
        if (s.equals("^")) r=">";
        if (s.equals("v")) r="<";
        if (s.equals(">")) r="v";
        if (s.equals("<")) r="^";
        return r;
    }
    static void rotAll(String[][] mc,int times){       
    for (int j = 0; j < times; j+=1) {
        for (int i = 0; i <= rowlaser.size()-1; i+=1) {
            mc[rowlaser.get(i)][collaser.get(i)]=rotlaser(mc[rowlaser.get(i)][collaser.get(i)]);
        }
     } 
    } 
        
    static void sim(int row, int col, int typ,int step){
        String obs="#^v<>xk";
        int nr,nc,ntyp;
        if (row < 1 || col < 1 || row > m || col > n) {
            return;
        }
        if (step != 0 && obs.contains(mz[row][col][typ])) {
            mem[row][col][typ]=inf;
            return;
        }     
        if (mem[row][col][typ] != inf) {
            if (step < mem[row][col][typ]) {
                mem[row][col][typ]=step;
            } else {
                return;
            }
        } else {
            if (step != 0)  {
                mem[row][col][typ]=step;
            }
           
        }
        if (row == rowgoal && col == colgoal) {
            return;
        }      
        if (rowlaser.size() == 0) {
            ntyp=0;
        } else {
            ntyp=(typ+1)%4;    
        }
        nr=row+1;
        nc=col;
        sim(nr,nc,ntyp,step+1);    
        nr=row-1;
        nc=col;
        sim(nr,nc,ntyp,step+1);    
        nr=row;
        nc=col+1;
        sim(nr,nc,ntyp,step+1);    
        nr=row;
        nc=col-1;   
        sim(nr,nc,ntyp,step+1);    
    }
    static void solve(InputReader in) {
        int ntc=in.nextInt();
        for (int itc  = 0; itc  <= ntc-1; itc +=1) {
            System.out.printf("Case #%d: ",itc+1);
            rowlaser.clear();
            collaser.clear();
            m=in.nextInt();
            n=in.nextInt();
            mz=new String[m+2][n+2][4];
            maze=new String[m+2][n+2];
            mem=new int[m+2][n+2][4];
            for (int i = 0; i <= m+1; i+=1) {
                Arrays.fill(maze[i],"x");
            }
            for (int i = 1; i <= m; i+=1) {
                String s=in.next();
                for (int j = 1; j <= s.length(); j+=1) {
                    maze[i][j]=""+s.charAt(j-1);
                }
            }
            for (int i = 1; i <= m; i+=1) {
                for (int j = 1; j <= n; j+=1) {
                    if (maze[i][j].equals("S")) {
                        rowstart=i;
                        colstart=j;
                        maze[i][j]=".";
                        break;
                    }
                }
            }
            for (int i = 1; i <= m; i+=1) {
                for (int j = 1; j <= n; j+=1) {
                    if (maze[i][j].equals("G")) {
                        rowgoal=i;
                        colgoal=j;
                        maze[i][j]=".";
                        break;
                    }
                }
            }
            getlaser();
            String[][] mc=cop2d(maze);
            for (int i = 0; i <= 3; i+=1) {
                if (rowlaser.size() != 0) {
                    mc=cop2d(maze);
                    rotAll(mc,i);
                    tembak(mc);                    
                }
                for (int j = 0; j <= m+1; j+=1) {
                    for (int k = 0; k <= n+1; k+=1) {
                        mz[j][k][i%4]=mc[j][k];     
                    }
                }
            }
            for (int i = 0; i <= 3; i+=1) {
                for (int j = 0; j <= m+1; j+=1) {
                    for (int k = 0; k <= n+1; k+=1) {
                        mem[j][k][i]=inf;
                    }
                }
            }
            int res=inf;
            // simulasi gerak
            sim(rowstart,colstart,0,0);
            for (int i = 0; i <= 3; i+=1) {
                res=Math.min(res,mem[rowgoal][colgoal][i]);
            }
            if (res >= inf) {
                System.out.println("impossible");
            } else {
                System.out.println(res);
            };
        }
    }

}


//input template
class InputReader {
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }

    public String nextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(nextLine());
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }

}
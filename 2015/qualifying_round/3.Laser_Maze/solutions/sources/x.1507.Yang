#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <stdio.h>

using namespace std;

const int kMaxN = 107;
const int kMaxM = 107;

const int kInfinity = 10 * kMaxN * kMaxM;

const char way_sign[4] = {'^', '>', 'v', '<'};
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};

bool blocking_places[4][kMaxN][kMaxM];
char world_map[kMaxN][kMaxM];

int shortest_path[4][kMaxN][kMaxM];

int n, m;

bool IsValid(int i, int j) {
    return i >= 0 && i < n && j >= 0 && j < m;
}

void Solve(int case_id) {
    int si, sj, ei, ej;

    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        cin >> world_map[i];
        for (int k = 0; k < 4; ++k) {
            fill(blocking_places[k][i], blocking_places[k][i] + m, false);
            fill(shortest_path[k][i], shortest_path[k][i] + m, kInfinity);
        }
        for (int j = 0; j < m; ++j) {
            if (world_map[i][j] == 'S') {
                si = i;
                sj = j;
            } else if (world_map[i][j] == 'G') {
                ei = i;
                ej = j;
            }
        }
    }

    for (int k = 0; k < 4; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (world_map[i][j] == '#') {
                    blocking_places[k][i][j] = true;
                    continue;
                }
                int dir = -1;
                for (int t = 0; t < 4; ++t) {
                    if (way_sign[t] == world_map[i][j]) {
                        dir = t;
                        break;
                    }
                }

                if (dir == -1) continue;
                dir = (dir + k) & 3;
                int ci = i, cj = j;
                while (IsValid(ci, cj)) {
                    blocking_places[k][ci][cj] = true;
                    ci += dx[dir];
                    cj += dy[dir];
                }
            }
        }
    }

    shortest_path[0][si][sj] = 0;
    queue<int> q;
    q.push(0 * kMaxN * kMaxM + si * kMaxM + sj);
    while (!q.empty()) {
        int ck = q.front() / (kMaxN * kMaxM);
        int ci = q.front() / kMaxM % kMaxN;
        int cj = q.front() % kMaxM;
        q.pop();
        for (int dir = 0; dir < 4; ++dir) {
            int ni = ci + dx[dir];
            int nj = cj + dy[dir];
            if (!IsValid(ni, nj)) {
                continue;
            }
            if (!blocking_places[(ck + 1) & 3][ni][nj]) {
                if (shortest_path[(ck + 1) & 3][ni][nj] > shortest_path[ck][ci][cj] + 1) {
                    shortest_path[(ck + 1) & 3][ni][nj] = shortest_path[ck][ci][cj] + 1;
                    q.push(((ck + 1) & 3) * kMaxN * kMaxM + ni * kMaxM + nj);
                }
            }
        }
    }

    int answer= kInfinity;
    for (int i = 0; i < 4; ++i) {
        answer = min(answer, shortest_path[i][ei][ej]);
    }

    cout << "Case #" << case_id << ": ";
    if (answer == kInfinity) {
        cout << "impossible" << endl;
    } else {
        cout << answer << endl;
    }
}

int main() {
    int cases;
    cin >> cases;
    for (int case_id = 1; case_id <= cases; ++case_id) {
        Solve(case_id);
    }
    return 0;
}
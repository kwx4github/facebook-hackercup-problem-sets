#include <cstdio>
#include <iostream>
#include <string>
#include <cstring>
using namespace std;

const int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};

int T, cs;
int m, n;
int sx, sy, tx, ty;
char map[110][110];
bool blocked[4][110][110];
int f[4][110][110];
int limit;
int qx[110000], qy[110000], qz[110000];

void test() {
	printf("==blocked==\n");
	for (int k = 0; k < 4; ++k)
	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < n; ++j)
			printf("%d", blocked[k][i][j]);
		printf("\n");
	}
}

int getfx(char c) {
	switch (c) {
		case '<': return 0;
		case '^': return 1;
		case '>': return 2;
		case 'v': return 3;
		default: return -1;
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	
	scanf("%d", &T);
	for (cs = 1; cs <= T; ++cs) {
		scanf("%d%d", &m, &n);
		for (int i = 0; i < m; ++i)
			scanf("%s", map[i]);
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j) {
				if (map[i][j] == 'S') {
					sx = i;
					sy = j;
					map[i][j] = '.';
				}
				if (map[i][j] == 'G') {
					tx = i;
					ty = j;
					map[i][j] = '.';
				}
			}
		for (int k = 0; k < 4; ++k) {
			for (int i = 0; i < m; ++i)
				for (int j = 0; j < n; ++j)
					blocked[k][i][j] = (map[i][j] != '.');
			int fx;
			for (int i = 0; i < m; ++i)
				for (int j = 0; j < n; ++j) {
					fx = getfx(map[i][j]);
					if (fx != -1) {
						fx = (fx + k) % 4;
						int xx = i + dir[fx][0], yy = j + dir[fx][1];
						while (xx >= 0 && xx < m && yy >= 0 && yy < n && map[xx][yy] == '.') {
							blocked[k][xx][yy] = true;
							xx += dir[fx][0]; yy += dir[fx][1];
						}
					}
				}
		}
		memset(f, 0x7F, sizeof(f));
		int vv = f[0][0][0];
		f[0][sx][sy] = 0;
		limit = vv;
		int head = 1, tail = 1;
		qx[1] = 0;
		qy[1] = sx;
		qz[1] = sy;
		while (head <= tail) {
			int fx = qx[head], x = qy[head], y = qz[head];
			//printf("%d %d %d = %d\n", fx, x, y, f[fx][x][y]);
			++head;
			if (f[fx][x][y] >= limit) continue;
			if (x == tx && y == ty) {
				limit = f[fx][x][y];
				continue;
			}
			int nfx = (fx + 1) % 4, nx, ny;
			for (int k = 0; k < 4; ++k) {
				nx = x + dir[k][0];
				ny = y + dir[k][1];
				if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
					//printf("n %d %d %d = %d\n", nfx, nx, ny, f[nfx][nx][ny]);
					if (!blocked[nfx][nx][ny] && f[fx][x][y] + 1 < f[nfx][nx][ny]) {
						f[nfx][nx][ny] = f[fx][x][y] + 1;
						++tail;
						qx[tail] = nfx;
						qy[tail] = nx;
						qz[tail] = ny;
					}
				}
			}
		}
		//test();
		printf("Case #%d: ", cs);
		/*int ans = -1;
		for (int i = 0; i < 4; ++i)
			update(ans, f[i][tx][ty]);*/
		if (limit == vv) printf("impossible\n"); else printf("%d\n", limit);
	}
	
	return 0;
}

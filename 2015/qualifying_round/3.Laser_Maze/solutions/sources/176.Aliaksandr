#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)


int H, W;
char a[124][124];

int fire[4][124][124];
int f[4][124][124];

inline bool laser(char c) {
	return c == '<' || c == '>' || c == '^' || c == 'v';
}

inline bool laser_or_wall(char c) {
	return c == '#' || laser(c);
}

typedef pair<int, PI> IPI;

int solve() {
	GI2(H, W);
	REP(r, H) scanf("%s", &a[r][0] );

	memset(fire, 0, sizeof fire);
	memset(f, 0x11, sizeof f);

	static int DR[] = {0, -1, 0, 1};
	static int DC[] = {-1, 0, 1, 0};

	int sr, sc;
	REP(r, H) REP(c, W) {
		if (a[r][c] == 'S') {
			sr = r; sc = c;
		} else if (laser(a[r][c])) {
			
			int offs;
			switch (a[r][c]) {
				case '<': offs = 0; break;
				case '^': offs = 1; break;
				case '>': offs = 2; break;
				case 'v': offs = 3; break;
			}

			REP(idx, 4) {
				int dr = DR[(offs + idx) % 4];
				int dc = DC[(offs + idx) % 4];

				for (int rr = r + dr, cc = c + dc; rr>=0&&cc>=0&&rr<H&&cc<W&&!laser_or_wall(a[rr][cc]); rr += dr, cc += dc)
					fire[idx][rr][cc] = 1;
			}
		}
	}

	queue<IPI> q;
	f[0][sr][sc] = 0;
	q.push(IPI(0, PI(sr, sc)));

	while (!q.empty()) {
		IPI pos = q.front(); q.pop();
		int m = pos.first;
		int r = pos.second.first, c = pos.second.second;
		
		int v = f[m][r][c];
		if (a[r][c] == 'G')
			return v;

		m = (m+1) % 4;
		++v;
		REP(dir, 4) {
			int rr = r + DR[dir], cc = c + DC[dir];
			if (rr>=0&&cc>=0&&rr<H&&cc<W&&!laser_or_wall(a[rr][cc])) {
				if (!fire[m][rr][cc] && f[m][rr][cc] > v) {
					f[m][rr][cc] = v;
					q.push(IPI(m, PI(rr, cc)));
				}
			}
		}

	}

	return -1;

}

int main() {
freopen("c-in.txt", "rt", stdin);
freopen("c-out.txt", "w", stdout);

	int ntc; GI(ntc);
	FORE(tc, 1, ntc) {
		int res = solve();
		if (res < 0) {
			printf("Case #%d: impossible\n", tc);
			fprintf(stderr, "Case #%d: impossible\n", tc);
		} else {
			printf("Case #%d: %d\n", tc, res);
			fprintf(stderr, "Case #%d: %d\n", tc, res);
		}
	}


}

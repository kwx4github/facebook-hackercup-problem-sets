import java.io.*;
import java.util.*;

class LaserMaze {

    public static int turretRowInc(int dir) {
	
	switch(dir) {
	    
	case 0:
	    return -1;
	case 1:
	    return 0;
	case 2: 
	    return 1;
	case 3:
	    return 0;
	}
	return 0;
    }

    public static int turretColInc(int dir) {
	
	switch(dir) {
	    
	case 0:
	    return 0;
	case 1:
	    return 1;
	case 2: 
	    return 0;
	case 3:
	    return -1;
	}
	return 0;
    }


    public static void computeDanger(boolean dangerous[][][],
				    char [][]table,
				    int M,int N,
				    ArrayList<Integer> rowTurret,
				    ArrayList<Integer> colTurret,
				    ArrayList<Integer> dirTurret) {

	for(int step=0;step<4;++step) {

	    for(int turret=0;turret<rowTurret.size();++turret) {
		int row=rowTurret.get(turret).intValue();
		int col=colTurret.get(turret).intValue();
		int dir=dirTurret.get(turret).intValue();
		
		int rowInc=turretRowInc((dir+step)%4);
		int colInc=turretColInc((dir+step)%4);

		row+=rowInc;
		col+=colInc;

		while(0<=row && row<M && 0<=col && col<N &&
		      table[row][col]!='#' && table[row][col]!='^'
		      && table[row][col]!='>' && table[row][col]!='v'
		      && table[row][col]!='<') {

		    dangerous[step][row][col]=true;
		    row+=rowInc;
		    col+=colInc;
		}
		
	    }

	}

	/*
	System.out.println("The danger matrix is:");
	for(int k=0;k<4;++k) {
	    for(int i=0;i<M;++i)
		for(int j=0;j<N;++j)
		    System.out.println(i+","+j+"->"+dangerous[k][i][j]);
	    System.out.println();
	}
	*/

    }


    public static String findMinPath(char table[][],
				  boolean dangerous[][][],
				  int M,int N,
				  int startRow,int startCol,
				  int goalRow,int goalCol) {

	int minSteps[][][]=new int[4][M][N];
	for(int i=0;i<M;++i)
	    for(int j=0;j<N;++j)
		for(int k=0;k<4;++k)
		    minSteps[k][i][j]=Integer.MAX_VALUE;
	minSteps[0][startRow][startCol]=0;
	int numSteps=0;
	
	// Go up.
	findMinPathRec(table,dangerous,minSteps,M,N,startRow-1,startCol,numSteps+1);
	// Go right.
	findMinPathRec(table,dangerous,minSteps,M,N,startRow,startCol+1,numSteps+1);
	// Go down.
	findMinPathRec(table,dangerous,minSteps,M,N,startRow+1,startCol,numSteps+1);
	// Go left.
	findMinPathRec(table,dangerous,minSteps,M,N,startRow,startCol-1,numSteps+1);

	int res=Integer.MAX_VALUE;
	for(int k=0;k<4;++k)
	    res=Math.min(res,minSteps[k][goalRow][goalCol]);
	return (res==Integer.MAX_VALUE) ? "impossible" :
	    (""+res);
    }

    public static void findMinPathRec(char table[][],
				   boolean dangerous[][][],
				   int minSteps[][][],
				   int M,int N,
				   int row,int col,
				   int numSteps) {

	if(row<0 || row>=M || col<0 || col>=N)
	    return;

	if(dangerous[numSteps%4][row][col])
	    return;


	if(table[row][col]=='#' || table[row][col]=='^'
	   || table[row][col]=='>' || table[row][col]=='v'
	   || table[row][col]=='<')
	    return;

	// Assuming that "waiting" for proper turret state is 
	// not helpful.

	if(numSteps>=minSteps[numSteps%4][row][col])
	    return;

	minSteps[numSteps%4][row][col]=numSteps;
	if(table[row][col]=='G')
	    return;


	// Go up.
	findMinPathRec(table,dangerous,minSteps,M,N,row-1,col,numSteps+1);
	// Go right.
	findMinPathRec(table,dangerous,minSteps,M,N,row,col+1,numSteps+1);
	// Go down.
	findMinPathRec(table,dangerous,minSteps,M,N,row+1,col,numSteps+1);
	// Go left.
	findMinPathRec(table,dangerous,minSteps,M,N,row,col-1,numSteps+1);
					      
    }

    public static void main(String[] args) throws Exception {

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	int numTests=Integer.parseInt(br.readLine());

	for(int i=0;i<numTests;++i) {

	    String splitLine[]=br.readLine().split(" ");
	    int M=Integer.parseInt(splitLine[0]);
	    int N=Integer.parseInt(splitLine[1]);
	    
	    boolean dangerous[][][]=new boolean[4][M][N];
	    char table[][]=new char[M][N];

	    int startRow=-1,startCol=-1;
	    int goalRow=-1,goalCol=-1;
	    
	    ArrayList<Integer> rowTurret= new ArrayList<Integer>();
	    ArrayList<Integer> colTurret= new ArrayList<Integer>();
	    ArrayList<Integer> dirTurret= new ArrayList<Integer>();

	    for(int j=0;j<M;++j) {
		String line=br.readLine();
		for(int k=0;k<N;++k) {
		    table[j][k]=line.charAt(k);

		    if(table[j][k]=='S') {
			startRow=j;
			startCol=k;
		    } else if(table[j][k]=='G') {
			goalRow=j;
			goalCol=k;
		    }
		    else if(table[j][k]=='^' || table[j][k]=='v'
			    ||table[j][k]=='<' || table[j][k]=='>') {
			rowTurret.add(new Integer(j));
			colTurret.add(new Integer(k));
			if(table[j][k]=='^')
			    dirTurret.add(new Integer(0));
			else if(table[j][k]=='v')
			    dirTurret.add(new Integer(2));
			else if(table[j][k]=='>')
			    dirTurret.add(new Integer(1));
			else
			    dirTurret.add(new Integer(3));
		    }
		}
		
	    }

	    computeDanger(dangerous,table,M,N,rowTurret,colTurret,dirTurret);

	    System.out.println("Case #"+(i+1)+": "+
			       findMinPath(table,dangerous,M,N,
				startRow,startCol,
					   goalRow,goalCol));
				
	}
	

    }

}

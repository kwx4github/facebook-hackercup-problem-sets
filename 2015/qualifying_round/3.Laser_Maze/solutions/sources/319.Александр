#include <bits/stdc++.h>

typedef long long int64;
#define sz(A) (int((A).size()))

using namespace std;

struct pos
{
    int turn, x, y;
    
    pos() {}
    pos(int turn, int x, int y): turn(turn), x(x), y(y) {}
};

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    
    ios::sync_with_stdio(0);
    
    int T;
    cin >> T;
    
    for (int tst = 0; tst < T; tst++)
    {
        int n, m;
        cin >> n >> m;
        vector <vector <char> > a(n, vector <char>(m));
        pos s, g;
        
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
            {
                cin >> a[i][j];
                
                if (a[i][j] == 'S')
                    a[i][j] = '.', s = pos(0, i, j);
                if (a[i][j] == 'G')
                    a[i][j] = '.', g = pos(-1, i, j);
            }
        vector <vector <vector <char> > > maps(4, vector <vector <char> >(n, vector <char>(m, '.')));
        vector <vector <vector <int> > > dist(4, vector <vector <int> >(n, vector <int>(m, -1)));
        string turr = "<^>v";
        const int dx[4] = {0, -1, 0, 1};
        const int dy[4] = {-1, 0, 1, 0};
        
        for (int turn = 0; turn < 4; turn++)
            for (int i = 0; i < n; i++)
                for (int j = 0; j < m; j++)
                {
                    if (a[i][j] == '#')
                        maps[turn][i][j] = '#';
                    else if (a[i][j] != '.')
                    {
                        int type = find(turr.begin(), turr.end(), a[i][j]) - turr.begin();
                        type = (type + turn) % 4;
                        int x = i, y = j;
                        
                        do
                        {
                            maps[turn][x][y] = '#';
                            x += dx[type];
                            y += dy[type];
                        }
                        while (x < n && x >= 0 && y < m && y >= 0 && a[x][y] == '.');
                    }
                }
        
        queue <pos> q;
        q.push(s);
        dist[s.turn][s.x][s.y] = 0;
        
        while (!q.empty())
        {
            s = q.front();
            q.pop();
            
            for (int i = 0; i < 4; i++)
            {
                pos ns((s.turn + 1) % 4, s.x + dx[i], s.y + dy[i]);
                
                if (ns.x < n && ns.x >= 0 && ns.y < m && ns.y >= 0 && maps[ns.turn][ns.x][ns.y] == '.' && dist[ns.turn][ns.x][ns.y] == -1)
                {
                    q.push(ns);
                    dist[ns.turn][ns.x][ns.y] = dist[s.turn][s.x][s.y] + 1;
                }
            }
        }
        int res = -1;
        
        for (int i = 0; i < 4; i++)
            if (dist[i][g.x][g.y] != -1 && (res == -1 || res > dist[i][g.x][g.y]))
                res = dist[i][g.x][g.y];
        cout << "Case #" << tst + 1 << ": ";
        
        if (res == -1)
            cout << "impossible\n";
        else
            cout << res << '\n';
    }
    return 0;
}
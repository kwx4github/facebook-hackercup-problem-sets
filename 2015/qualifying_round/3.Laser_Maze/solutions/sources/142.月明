/*************************************************************************
    > File Name: a.cpp
    > Author: flyasdfvcxz
    > Mail: 1099431883@qq.com 
    > Created Time: äº”  1/ 9 10:40:08 2015
 ************************************************************************/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <ctime>
#include <cstdlib>
#define ll long long
using namespace std;
const int N = 200;
const int mod = 1e9 + 7;
const int inf = ~0U >> 1;

const int zx[] = {-1, 0, 1, 0};
const int zy[] = {0, 1, 0, -1};

int n, m;
int lab[N][N];
int v[N][N][4][4];
char g[N][N];
int vis[N * N * 4][4];
struct NODE
{
	int time;
	int mod;
	int rem;
	int x, y;
} st, ed;
vector <NODE> G[N * N * 4];

int check(int x, int y)
{
	if (x < 1 || x > n || y < 0 || y > m - 1) return 0;
	if (g[x][y] == '#') return 0;
	return 1;
}

int ok(int x, int y)
{
	if (x < 1 || x > n || y < 0 || y > m - 1) return 0;
	return 1;
}

void buildGraph()
{
	st.x = st.y = ed.x = ed.y = -1;
	for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (g[i][j] == 'S') st.x = i, st.y = j;
			else if (g[i][j] == 'G') ed.x = i, ed.y = j;

	memset(lab, 0, sizeof(lab));
	int tot = 0;
	for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (g[i][j] == 'S' || g[i][j] == 'G' || g[i][j] == '.') lab[i][j] = ++tot;

	memset(v, 0, sizeof(v));
	for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (lab[i][j])
				for (int k = 0; k < 4; ++k)
				{
					int x = i, y = j;
					while (check(x, y))
					{
						char tmp = g[x][y];
						x += zx[k], y += zy[k];
						if (tmp == 'S' || tmp == 'G' || tmp == '.') continue;
						if (tmp == '^') v[i][j][k][0] = 1;
						else if (tmp == '>') v[i][j][k][1] = 1;
						else if (tmp == 'v') v[i][j][k][2] = 1;
						else v[i][j][k][3] = 1; 
						break;
					}
				}

	/*cout << "lab = " << endl;
	for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (lab[i][j]) cout << " i = " << i << " j = " << j << " lab = " << lab[i][j] << endl;
	for (int k = 0; k < 4; k++)
	{
		for (int t = 0; t < 4; ++t)
		{
			cout << "k = " << k << " t = " << t << endl;
			for (int i = 1; i <= n; ++i)
			{
				for (int j = 0; j < m; ++j)
					cout << v[i][j][k][t] << " ";
				cout << endl;
			}
		}
	}*/

	for (int i = 0; i < N * N * 4; ++i) G[i].clear();
	for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (lab[i][j])
			{
				int x = i, y = j;
				for (int k = 0; k < 4; ++k)
				{
					int nx = x + zx[k], ny = y + zy[k];
					if (!ok(nx, ny)) continue; 
					if (!lab[nx][ny]) continue;
					NODE tmp;
					tmp.x = nx;
					tmp.y = ny;
					tmp.mod = 1;
					int V = (lab[i][j] - 1) * 4;
					if (!v[nx][ny][0][1] && !v[nx][ny][1][2] && !v[nx][ny][2][3] && !v[nx][ny][3][0]) 
					{
						tmp.mod = 1;
						G[V].push_back(tmp);
					}
					if (!v[nx][ny][0][0] && !v[nx][ny][1][1] && !v[nx][ny][2][2] && !v[nx][ny][3][3]) 
					{
						tmp.mod = 2;
						G[V + 1].push_back(tmp);
					}
					if (!v[nx][ny][0][3] && !v[nx][ny][1][0] && !v[nx][ny][2][1] && !v[nx][ny][3][2]) 
					{
						tmp.mod = 3;
						G[V + 2].push_back(tmp);
					}
					if (!v[nx][ny][0][2] && !v[nx][ny][1][3] && !v[nx][ny][2][0] && !v[nx][ny][3][1]) 
					{
						tmp.mod = 0;
						G[V + 3].push_back(tmp);
					}
				}
			}


	/*for (int i = 1; i <= n; ++i)
		for (int j = 0; j < m; ++j)
			if (lab[i][j])
				for (int k = 0; k < 4; ++k)
				{
					int V = (lab[i][j] - 1) * 4 + k;  
					int sz = G[V].size();
					cout << "i = " << i << " j = " << j << " k = " << k << " size = " << sz << endl;
					for (int t = 0; t < sz; ++t)
						cout << "t = " << t << " x = " << G[V][t].x << " y = " << G[V][t].y << endl;
				}*/
}

queue <NODE> q;

int bfs()
{
	if (st.x == -1 || ed.x == -1) return inf;
	while (!q.empty()) q.pop();
	memset(vis, 0, sizeof(vis));
	NODE tmp;
	tmp.x = st.x, tmp.y = st.y, tmp.mod = 0, tmp.time = 0, tmp.rem = 0;
	q.push(tmp);
	vis[(lab[st.x][st.y] - 1) * 4][0] = 1;
	while (!q.empty())
	{
		NODE cur = q.front();
		q.pop();
		//cout << "cur.x = " << cur.x << " cur.y = " << cur.y << " mod = " << cur.mod << " time = " << cur.time << endl;
		if (cur.x == ed.x && cur.y == ed.y) return cur.time;
		int V = (lab[cur.x][cur.y] - 1) * 4 + cur.mod; 
		for (int i = 0; i < G[V].size(); ++i)
		{
			NODE nxt = G[V][i];
			int xx = nxt.x, yy = nxt.y, mod = nxt.mod, rem = (cur.rem + 1) % 4, time = cur.time + 1;
			if (vis[(lab[xx][yy] - 1) * 4 + mod][rem]) continue;
			vis[(lab[xx][yy] - 1) * 4 + mod][rem] = time;
			tmp.x = xx, tmp.y = yy, tmp.mod = nxt.mod, tmp.rem = rem, tmp.time = time;
			q.push(tmp);
		}
	}
	return inf;
}

int main()
{
	int T, cas = 0;
	cin >> T;
	while (T--)
	{
		cin >> n >> m;
		for (int i = 1; i <= n; ++i) cin >> g[i];
		//cout << "n = " << n << " m = " << m << endl;
		//for (int i = 1; i <= n; ++i) cout << g[i] << endl;
		
		buildGraph();

		int ans = bfs();
		if (ans != inf) printf("Case #%d: %d\n", ++cas, ans);
		else printf("Case #%d: impossible\n", ++cas);
	}
    return 0;
}

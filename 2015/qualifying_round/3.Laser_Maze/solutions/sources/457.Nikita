#pragma comment(linker, "/STACK:134217728")

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <stack>
#include <functional>
#include <numeric>
#include <memory.h>

using namespace std;

typedef long long LL;

char a[1 << 7][1 << 7];
int atk[1 << 7][1 << 7][4];

const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};

int n, m;

bool bound(int x, int y)
{
	return x >= 0 && y >= 0 && x < n && y < m;
}

bool pass(int x, int y)
{
	return a[x][y] == '.' || a[x][y] == 'S' || a[x][y] == 'G';
}

int q[1 << 17];
int d[1 << 7][1 << 7][4];
int qh, qt;

int main()
{
#ifndef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int t;
	scanf("%d", &t);
	for(int test = 1; test <= t; ++test)
	{
		scanf("%d%d", &n, &m);
		for(int i = 0; i < n; ++i)
			scanf("%s", a[i]);
		memset(atk, 0, sizeof(atk));
		for(int k = 0; k < 4; ++k)
		{
			for(int i = 0; i < n; ++i)
			{
				for(int j = 0; j < m; ++j)
				{
					if (a[i][j] == '^')
					{
						int xx = i - 1, yy = j;
						while (xx >= 0 && pass(xx, yy))
						{
							atk[xx][yy][k] = 1;
							xx--;
						}
						a[i][j] = '>';
					}
					else if (a[i][j] == 'v')
					{
						int xx = i + 1, yy = j;
						while (xx < n && pass(xx, yy))
						{
							atk[xx][yy][k] = 1;
							xx++;
						}
						a[i][j] = '<';
					}
					else if (a[i][j] == '<')
					{
						int xx = i, yy = j - 1;
						while (yy >= 0 && pass(xx, yy))
						{
							atk[xx][yy][k] = 1;
							yy--;
						}
						a[i][j] = '^';
					}
					else if  (a[i][j] == '>')
					{
						int xx = i, yy = j + 1;
						while (yy < m && pass(xx, yy))
						{
							atk[xx][yy][k] = 1;
							yy++;
						}
						a[i][j] = 'v';
					}
				}
			}
		}
		int sx = 0, sy = 0;
		int gx = 0, gy = 0;
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < m; ++j)
			{
				if (a[i][j] == 'S')
					sx = i, sy = j;
				if (a[i][j] == 'G')
					gx = i, gy = j;
			}
		qh = qt = 0;
		memset(d, -1, sizeof(d));
		d[sx][sy][0] = 0;
		q[qt++] = sx;
		q[qt++] = sy;
		q[qt++] = 0;
		while (qh < qt)
		{
			int x = q[qh++];
			int y = q[qh++];
			int z = q[qh++];
			for(int i = 0; i < 4; ++i)
			{
				int tox = x + dx[i];
				int toy = y + dy[i];
				int toz = (z + 1) & 3;
				if (!bound(tox, toy) || !pass(tox, toy) || atk[tox][toy][toz])
					continue;
				if (d[tox][toy][toz] == -1)
				{
					d[tox][toy][toz] = d[x][y][z] + 1;
					q[qt++] = tox;
					q[qt++] = toy;
					q[qt++] = toz;
				}
			}
		}
		int res = (int)1e9;
		for(int i = 0; i < 4; ++i)
			if (d[gx][gy][i] != -1)
				res = min(res, d[gx][gy][i]);
		if (res == (int)1e9)
			printf("Case #%d: impossible\n", test);
		else
			printf("Case #%d: %d\n", test, res);
	}
	return 0;
}

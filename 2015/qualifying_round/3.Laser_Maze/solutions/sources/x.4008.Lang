#include <iostream>  
#include <stdio.h>  
#include <string.h>  
#include <algorithm>  
#include <queue>  
#include <map>  
#include <vector>  
#include <stack>
#include <set>  
#include <string>  
#include <math.h>  
using namespace std;  


char mp[110][110];

int ans[110][110][4];

bool die[110][110][4];

int dirn[]={-1,0,1,0};
int dirm[]={0,1,0,-1};


struct node{
	int nn,mm;
	int time;
	node(int nn,int mm,int time):nn(nn),mm(mm),time(time){
	}
};

int main(){
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int t;
	cin>>t;
	for(int cas=1;cas<=t;cas++){
		//init
		memset(ans,-1,sizeof(ans));
		memset(die,0,sizeof(die));
		//
		int n,m;
		int sn,sm;
		int gn,gm;
		cin>>n>>m;
		for(int i=1;i<=n;i++){
			scanf("%s",mp[i]+1);
			for(int j=1;j<=m;j++){
				if(mp[i][j]=='^'){
					mp[i][j]=0;
				}
				if(mp[i][j]=='>'){
					mp[i][j]=1;
				}
				if(mp[i][j]=='v'){
					mp[i][j]=2;
				}
				if(mp[i][j]=='<'){
					mp[i][j]=3;
				}
				if(mp[i][j]=='S'){
					sn=i; sm=j;
				}
				if(mp[i][j]=='G'){
					gn=i; gm=j;
				}
			}	
		}
		
		//Ô¤´¦Àí 
		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				int type=mp[i][j];
				if(type<4){
					int k;
					//u
					k=i;
					while(--k>=1){
						if(mp[k][j]<4||mp[k][j]=='#')break;
						die[k][j][(4-type)%4]=1;
					}
					//d
					k=i;
					while(++k<=n){
						if(mp[k][j]<4||mp[k][j]=='#')break;
						die[k][j][(6-type)%4]=1;
					}
					//l
					k=j;
					while(--k>=1){
						if(mp[i][k]<4||mp[i][k]=='#')break;
						die[i][k][(7-type)%4]=1;
					}
					//r
					k=j;
					while(++k<=m){
						if(mp[i][k]<4||mp[i][k]=='#')break;
						die[i][k][(5-type)%4]=1;
					}
				}
			}
		} 
		//
		
		/*for(int k=0;k<4;k++){
			for(int i=1;i<=n;i++){
				for(int j=1;j<=m;j++){
					cout<<die[i][j][k]<<" ";
				}cout<<endl;
			}cout<<endl;
		}*/
		
		
		queue<node> que;
		que.push(node(sn,sm,0));
		ans[sn][sm][0]=0;
		int A=-1;
		while(!que.empty()){
			node cur=que.front(); que.pop();
			int newt=cur.time+1;
			for(int d=0;d<4;d++){
				int newn=cur.nn+dirn[d];
				int newm=cur.mm+dirm[d];
				
				if(newn<1)continue; if(newn>n)continue;
				if(newm<1)continue; if(newm>m)continue;
				if(ans[newn][newm][newt%4]!=-1) continue;
				if(!die[newn][newm][newt%4]){
					que.push(node(newn,newm,newt));
					ans[newn][newm][newt%4]=newt;
				}
				if(ans[gn][gm][newt%4]!=-1){
					A=newt;
					break;
				}
			}
			if(A!=-1)break;
		}
		if(A==-1){
			printf("Case #%d: impossible\n",cas);
		}else{
			printf("Case #%d: %d\n",cas,A);
		}
	}
	return 0;
}



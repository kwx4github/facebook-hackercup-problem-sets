
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;

char b[102][102];

const int INF = 1000000000;
int dist[102][102][4];

int main() {
  int tc;
  scanf("%d", &tc);
  for (int t = 1; t <= tc; t++) {
    int m, n;
    scanf("%d %d", &m, &n);
    for (int i = 0; i < m; i++) {
      scanf("%s", b[i]);
    }

    int si, sj, gi, gj;
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (b[i][j] == 'S') {
          si = i;
          sj = j;
          b[i][j] = '.';
        } else if (b[i][j] == 'G') {
          gi = i;
          gj = j;
          b[i][j] = '.';
        }
      }
    }

    vector<tuple<int, int, int>> g[102][102][4];

    for (int d = 0; d < 4; d++) {
      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (b[i][j] == '^') {
            b[i][j] = '>';
          } else if (b[i][j] == '>') {
            b[i][j] = 'v';
          } else if (b[i][j] == 'v') {
            b[i][j] = '<';
          } else if (b[i][j] == '<') {
            b[i][j] = '^';
          }
        }
      }

      static char c[102][102];
      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          c[i][j] = b[i][j];
        }
      }

      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (c[i][j] == '^') {
            int k = i - 1;
            while (k >= 0 && c[k][j] == '.') {
              c[k][j] = ':';
              k--;
            }
          } else if (c[i][j] == '>') {
            int k = j + 1;
            while (k < n && c[i][k] == '.') {
              c[i][k] = ':';
              k++;
            }
          } else if (c[i][j] == 'v') {
            int k = i + 1;
            while (k < m && c[k][j] == '.') {
              c[k][j] = ':';
              k++;
            }
          } else if (c[i][j] == '<') {
            int k = j - 1;
            while (k >= 0 && c[i][k] == '.') {
              c[i][k] = ':';
              k--;
            }
          }
        }
      }

      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (c[i][j] == '.' || c[i][j] == ':') {
            for (int ni = max(0, i - 1); ni <= min(m - 1, i + 1); ni++) {
              for (int nj = max(0, j - 1); nj <= min(n - 1, j + 1); nj++) {
                if (c[ni][nj] == '.' && abs(i - ni) + abs(j - nj) == 1) {
                  g[i][j][d].push_back({ni, nj, (d + 1) % 4});
                }
              }
            }
          }
        }
      }
    }

    queue<tuple<int, int, int>> q;
    q.push(make_tuple(si, sj, 0));
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        for (int d = 0; d < 4; d++) {
          dist[i][j][d] = INF;
        }
      }
    }
    dist[si][sj][0] = 0;

    while (!q.empty()) {
      const int u = get<0>(q.front());
      const int v = get<1>(q.front());
      const int d = get<2>(q.front());
      q.pop();
      for (auto const& e : g[u][v][d]) {
        const int nu = get<0>(e);
        const int nv = get<1>(e);
        const int nd = get<2>(e);
        if (dist[nu][nv][nd] == INF) {
          dist[nu][nv][nd] = dist[u][v][d] + 1;
          q.push(make_tuple(nu, nv, nd));
        }
      }
    }

    int ans = INF;
    for (int d = 0; d < 4; d++) {
      ans = min(ans, dist[gi][gj][d]);
    }

    printf("Case #%d: ", t);
    if (ans < INF) {
      printf("%d\n", ans);
    } else {
      printf("impossible\n");
    }
  }

  return 0;
}
#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
#define  INF 0X7F7F7F7F
#define  maxN 105

struct node
{
    int x,y;
    char dir;
    int step;
};

class solve
{
private:
    int N,M;
    char maze[maxN][maxN];
    char vis[maxN][maxN][4];
    int minStep;
    node start,goal;
    const int frontDir[4][2] = {{0,-1},{-1,0},{0,1},{1,0}};
public:
    solve()
    {
        minStep = INF;
        memset(maze,0,sizeof(maze));
        processIn();
        if(BFS())
        {
            printf("%d\n",minStep);
        }
        else
        {
            printf("impossible\n");
        }
    }
    int processIn();
    int BFS();
    int judge(node next);
    bool IsInMaze(node next);
};

bool solve::IsInMaze(node next)
{
    if(next.x >= 0&&next.x < M&&next.y >= 0&&next.y < N)
        return 1;
    return 0;
}

int solve::judge(node next)
{
    node newNode;
    if(IsInMaze(next)&&maze[next.x][next.y] == '.'&&!vis[next.x][next.y][next.dir])
    {
        newNode = next;
        newNode.y--;
        while(IsInMaze(newNode)&&maze[newNode.x][newNode.y] != '#')
        {
            if(maze[newNode.x][newNode.y] <= 3)
            {
                if((maze[newNode.x][newNode.y]+next.dir)%4 == 2)
                    return -1;
                break;
            }
            newNode.y--;
        }
        newNode = next;
        newNode.y++;
        while(IsInMaze(newNode)&&maze[newNode.x][newNode.y] != '#')
        {
            if(maze[newNode.x][newNode.y] <= 3)
            {
                if((maze[newNode.x][newNode.y]+next.dir)%4 == 0)
                    return -1;
                break;
            }
            newNode.y++;
        }
        newNode = next;
        newNode.x--;
        while(IsInMaze(newNode)&&maze[newNode.x][newNode.y] != '#')
        {
            if(maze[newNode.x][newNode.y] <= 3)
            {
                if((maze[newNode.x][newNode.y]+next.dir)%4 == 3)
                    return -1;
                break;
            }
            newNode.x--;
        }
        newNode = next;
        newNode.x++;
        while(IsInMaze(newNode)&&maze[newNode.x][newNode.y] != '#')
        {
            if(maze[newNode.x][newNode.y] <= 3)
            {
                if((maze[newNode.x][newNode.y]+next.dir)%4 == 1)
                    return -1;
                break;
            }
            newNode.x++;
        }
        if(next.x == goal.x&&next.y == goal.y)
            return 1;
        return 0;
    }
    return -1;
}

int solve::BFS()
{
    int i;
    int tmpJudge;
    node now,next;
    queue<node> q;
    start.dir = 0;
    start.step = 0;
    q.push(start);
    memset(vis,0,sizeof(vis));
    while(!q.empty())
    {
        now = q.front();
        q.pop();
        for(i = 0;i < 4;i++)
        {
            next.x = now.x+frontDir[i][0];
            next.y = now.y+frontDir[i][1];
            next.dir = (now.dir+1)%4;
            tmpJudge = judge(next);
            if(tmpJudge != -1)
            {
                if(tmpJudge == 1)
                {
                    minStep = now.step+1;
                    return 1;
                }
                else
                {
                    next.step = now.step+1;
                    vis[next.x][next.y][next.dir] = 1;
                    q.push(next);
                }
            }
        }
    }
    return 0;
}

int solve::processIn()
{
    scanf("%d%d",&M,&N);
    int i,j;
    node newNode;
    for(i = 0;i < M;i++)
    {
        getchar();
        for(j = 0;j < N;j++)
        {
            maze[i][j] = getchar();
            newNode.x = i;
            newNode.y = j;
            switch(maze[i][j])
            {
                case 'S':
                    start = newNode;
                    maze[i][j] = '.';break;
                case 'G':
                    goal = newNode;
                    maze[i][j] = '.';break;
                case '<':
                    maze[i][j] = 0;break;
                case '^':
                    maze[i][j] = 1;break;
                case '>':
                    maze[i][j] = 2;break;
                case 'v':
                    maze[i][j] = 3;break;
                default: break;
            }
        }
    }
    return 0;
}

int main()
{
//    freopen("laser_maze_example_input.txt","r",stdin);
    freopen("laser_maze.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    scanf("%d",&T);
    for(int i = 1;i <= T;i++)
    {
        printf("Case #%d: ",i);
        solve Laser_Maze;
    }
    return 0;
}

//wawando's template

#include <iostream>
#include <string>
#include <fstream>
#include <functional>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <list>
#include <set>
#include <utility>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>  //clock_t , clock() , CLOCKS_PER_SEC
#include <cstring>
#include <cctype>
#include <climits> // LLONG_MAX , LLONG_MIN , INT_MAX , INT_MIN

//MACROS
#define pb              push_back
#define mp              make_pair
#define INF             1000000000     //1 billion safer for floyd warshall, avoid overflow
		
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;

struct pos{
	int r,c;
	int move;
};

int dr[] = {-1, 0, 1, 0};
int dc[] = {0, 1, 0, -1};
int TC,caseNo=1;

int main() {
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	//ios::sync_with_stdio(false);
	scanf("%d",&TC);
	while(TC--){

		int M,N,sr,sc,gr,gc,ans;
		char grid[110][110];
		int visited[110][110],grid_int[110][110];
		bool stop = false;
		pos s;
		queue<pos>q;

		scanf("%d %d\n",&M,&N);
		for(int i = 0; i < M; i++)
			gets(grid[i]);

		for(int i = 0; i < M; i++)
			for(int j = 0; j < N; j++){
				if(grid[i][j] == '.')
					grid_int[i][j] = 4;
				else if(grid[i][j] == '#')
					grid_int[i][j] = -1;
				else if(grid[i][j] == 'S'){
					grid_int[i][j] = 4;
					sr = i;
					sc = j;
				}
				else if(grid[i][j] == 'G'){
					grid_int[i][j] = 4;
					gr = i;
					gc = j;
				}
				else if(grid[i][j] == '^')
					grid_int[i][j] = 0;
				else if(grid[i][j] == '>')
					grid_int[i][j] = 1;
				else if(grid[i][j] == 'v')
					grid_int[i][j] = 2;
				else if(grid[i][j] == '<')
					grid_int[i][j] = 3;
			}

		ans = -1;
		s.r = sr;
		s.c = sc;
		s.move = 0;
		q.push(s);
		memset(visited, 0, sizeof(visited));
		visited[sr][sc] = 1;
		while(!q.empty()){
			pos cur = q.front();
			q.pop();
			if(stop)
				break;
			for(int i = 0; i < 4; i++){
				pos next;
				next.r = cur.r + dr[i];
				next.c = cur.c + dc[i];
				next.move = cur.move + 1;
				if((next.r >= 0 && next.c >= 0 && next.r < M && next.c < N) && (grid_int[next.r][next.c] == 4 && visited[next.r][next.c] < 2)){
					bool left,right,up,down;
					int cr,cc;
					//check up
					up = true;
					cr = next.r-1;
					cc = next.c;
					while(cr >= 0 && grid_int[cr][cc] == 4)
						cr--;
					if(cr >= 0){
						if(grid_int[cr][cc] >= 0 && grid_int[cr][cc] <= 3){
							int laser = (grid_int[cr][cc] + next.move) % 4;
							if(laser == 2)
								up = false;
						}
					}

					//check right
					right = true;
					cr = next.r;
					cc = next.c+1;
					while(cc < N && grid_int[cr][cc] == 4)
						cc++;
					if(cc < N){
						if(grid_int[cr][cc] >= 0 && grid_int[cr][cc] <= 3){
							int laser = (grid_int[cr][cc] + next.move) % 4;
							if(laser == 3)
								right = false;
						}
					}

					//check down
					down = true;
					cr = next.r+1;
					cc = next.c;
					while(cr < M && grid_int[cr][cc] == 4)
						cr++;
					if(cr < M){
						if(grid_int[cr][cc] >= 0 && grid_int[cr][cc] <= 3){
							int laser = (grid_int[cr][cc] + next.move) % 4;
							if(laser == 0)
								down = false;
						}
					}

					//check left
					left = true;
					cr = next.r;
					cc = next.c-1;
					while(cc >= 0 && grid_int[cr][cc] == 4)
						cc--;
					if(cc >= 0){
						if(grid_int[cr][cc] >= 0 && grid_int[cr][cc] <= 3){
							int laser = (grid_int[cr][cc] + next.move) % 4;
							if(laser == 1)
								left = false;
						}
					}

					if(up && right && down && left){
						if(next.r == gr && next.c == gc){
							ans = next.move;
							stop = true;
						}
						else{
							q.push(next);
							visited[next.r][next.c]++;
						}
					}
				}
			}

		}

		printf("Case #%d: ", caseNo++);
		if(ans == -1)
			puts("impossible");
		else
			printf("%d\n",ans);

	}
    return 0;
}

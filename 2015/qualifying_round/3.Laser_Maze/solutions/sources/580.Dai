import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.Scanner;


public class FHC2015QualC {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int i = 1; i <= numCases; i++) {
            System.out.format("Case #%d: %s%n", i, new FHC2015QualC().solve(sc));
        }
    }

    static class Point {
        final int x, y, dist;

        public Point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }


    private String solve(Scanner sc) {
        int m = sc.nextInt() + 2;
        int n = sc.nextInt() + 2;
        int[][][] field = new int[4][m][];
        int[][] origField = new int[m][];
        Point s = null;
        Point g = null;
        for (int i = 0; i < m; i++) {
            int[] line;
            if (0 < i && i < m - 1) {
                line = ("#" + sc.next() + "#").chars().toArray();
            }
            else {
                line = new int[n];
                Arrays.fill(line, '#');
            }
            for (int j = 0; j < n; j++) {
                if (line[j] == 'S') {
                    s = new Point(j, i, 0);
                    line[j] = '.';
                }
                else if (line[j] == 'G') {
                    g = new Point(j, i, 0);
                    line[j] = '.';
                }
            }
            origField[i] = line;
            for (int di = 0; di < 4; di++) {
                field[di][i] = line.clone();
            }
        }

        int[] dxy = { 0, 1, 0, -1, 0 };
        int[] arrow2dir = new int[256];
        Arrays.fill(arrow2dir, -1);
        arrow2dir['>'] = 0;
        arrow2dir['v'] = 1;
        arrow2dir['<'] = 2;
        arrow2dir['^'] = 3;

        // fire laser
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int c = origField[i][j];
                if (arrow2dir[c] != -1) {
                    int initD = arrow2dir[c];
                    for (int di = 0; di < 4; di++) {
                        int nx = j;
                        int ny = i;
                        int fd = (di + initD) % 4;
                        do {
                            field[di][ny][nx] = '#';
                            nx += dxy[fd + 1];
                            ny += dxy[fd];
                        } while (origField[ny][nx] == '.');
                    }
                }
            }
        }

        Queue<Point> que = new ArrayDeque<>();
        que.add(s);
        while (!que.isEmpty()) {
            Point p = que.poll();
            if (p.x == g.x && p.y == g.y) return Integer.toString(p.dist);
            int ndir = (p.dist + 1) % 4;
            for (int di = 0; di < 4; di++) {
                int nx = p.x + dxy[di + 1];
                int ny = p.y + dxy[di];
                if (field[ndir][ny][nx] == '#') continue;
                field[ndir][ny][nx] = '#';
                que.add(new Point(nx, ny, p.dist + 1));
            }
        }

        return "impossible";
    }

}

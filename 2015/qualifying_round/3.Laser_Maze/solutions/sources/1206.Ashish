import Queue

class queue_item(object):
    def __init__(self, dist, mat_num, i, j):
        self.dist = dist
        self.mat_num = mat_num
        self.i = i
        self.j = j

def set_up(maze, maze_str, i, j):
    """ set this"""
    for k in range(i-1, -1, -1):
        if maze_str[k][j] == "#": break
        if maze_str[k][j] == "^": break
        if maze_str[k][j] == ">": break
        if maze_str[k][j] == "v": break
        if maze_str[k][j] == "<": break
        maze[k][j] = 0

def set_right(maze, maze_str, i, j):
    """ set this"""
    for k in range(j+1, len(maze[0])):
        if maze_str[i][k] == "#": break
        if maze_str[i][k] == "^": break
        if maze_str[i][k] == ">": break
        if maze_str[i][k] == "v": break
        if maze_str[i][k] == "<": break
        maze[i][k] = 0


def set_down(maze, maze_str, i, j):
    """ set this"""
    for k in range(i+1, len(maze)):
        if maze_str[k][j] == "#": break
        if maze_str[k][j] == "^": break
        if maze_str[k][j] == ">": break
        if maze_str[k][j] == "v": break
        if maze_str[k][j] == "<": break
        maze[k][j] = 0

def set_left(maze, maze_str, i, j):
    """ set this"""
    for k in range(j-1, -1, -1):
        if maze_str[i][k] == "#": break
        if maze_str[i][k] == "^": break
        if maze_str[i][k] == ">": break
        if maze_str[i][k] == "v": break
        if maze_str[i][k] == "<": break
        maze[i][k] = 0





def main():
    file = open("input.txt")
    file_o = open("output.txt", 'w')
    T = int(file.readline())
    for t in range(T):
        M, N = map(int, file.readline().split())
        maze_str = []
        for _ in range(M):
            maze_str.append( str(file.readline().split()[0]))
        maze_one = [[1]*N for _ in range(M)]
        maze_two = [[1]*N for _ in range(M)]
        maze_three = [[1]*N for _ in range(M)]
        maze_four = [[1]*N for _ in range(M)]
        source = (0,0)
        gole = (0,0)
        for i in range(M):
            for j in range(N):
                if maze_str[i][j] == ".": continue

                if maze_str[i][j] == "S":
                    source = (i,j)
                    continue
                if maze_str[i][j] == "G":
                    gole = (i,j)
                    continue

                maze_one[i][j] = 0
                maze_two[i][j] = 0
                maze_three[i][j] = 0
                maze_four[i][j] = 0

                if maze_str[i][j] == "^":
                    set_up(maze_one, maze_str, i, j)
                    set_right(maze_two, maze_str, i, j)
                    set_down(maze_three, maze_str, i, j)
                    set_left(maze_four, maze_str, i, j)
                    continue

                if maze_str[i][j] == "<":
                    set_up(maze_two, maze_str, i, j)
                    set_right(maze_three, maze_str, i, j)
                    set_down(maze_four, maze_str, i, j)
                    set_left(maze_one, maze_str, i, j)
                    continue

                if maze_str[i][j] == "v":
                    set_up(maze_three, maze_str, i, j)
                    set_right(maze_four, maze_str, i, j)
                    set_down(maze_one, maze_str, i, j)
                    set_left(maze_two, maze_str, i, j)
                    continue

                if maze_str[i][j] == ">":
                    set_up(maze_four, maze_str, i, j)
                    set_right(maze_one, maze_str, i, j)
                    set_down(maze_two, maze_str, i, j)
                    set_left(maze_three, maze_str, i, j)
                    continue

        maze_final = [maze_one, maze_two, maze_three, maze_four]
##        print maze_one
##        print maze_two
##        print maze_three
##        print maze_four
##        print maze_final

        q = Queue.Queue()
        source_queue_obj = queue_item(0, 0, source[0], source[1])
        q.put(source_queue_obj)
        maze_final[0][source[0]][source[1]] = 0

        while True:
            if q.empty():
                ans = "impossible"
                break
            this_box = q.get()
            i = this_box.i
            j = this_box.j
            dist = this_box.dist
            if (i,j) == gole:
                ans = str(dist)
                break
            next_mat = (this_box.mat_num + 1)%4
            next_dist = dist + 1
            if i > 0 and maze_final[next_mat][i-1][j] != 0:
                maze_final[next_mat][i-1][j] = 0
                tmp_queue_obj = queue_item(next_dist, next_mat, i-1, j)
                q.put(tmp_queue_obj)
            if j < N-1 and maze_final[next_mat][i][j+1] != 0:
                maze_final[next_mat][i][j+1] = 0
                tmp_queue_obj = queue_item(next_dist, next_mat, i, j+1)
                q.put(tmp_queue_obj)
            if i < M-1 and maze_final[next_mat][i+1][j] != 0:
                maze_final[next_mat][i+1][j] = 0
                tmp_queue_obj = queue_item(next_dist, next_mat, i+1, j)
                q.put(tmp_queue_obj)
            if j > 0 and maze_final[next_mat][i][j-1] != 0:
                maze_final[next_mat][i][j-1] = 0
                tmp_queue_obj = queue_item(next_dist, next_mat, i, j-1)
                q.put(tmp_queue_obj)

        file_o.write( "Case #" + str(t+1) + ": " + ans + "\n")
    file_o.close()

main()
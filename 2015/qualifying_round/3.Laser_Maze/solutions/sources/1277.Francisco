import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Scanner;


public class Ronda1C {
	
	public static final int dCol[] = {-1,0,1,0};
	public static final int dRow[] = {0,-1,0,1};
	//public static final char kill[] = {'>', 'v', '<', '^'};
	
	Scanner sc;
	PrintWriter pw;
	char[][] maze;
	int m;
	int n;
	
	public static final String RUTA = "D:\\HackerCup\\2015\\round1\\C\\";
	
	public Ronda1C(Scanner sc, PrintWriter pw) {
		super();
		this.sc = sc;
		this.pw = pw;
	}
	
	public int turretValue(char x){
		if(x=='>')return 0;
		if(x=='v')return 1;
		if(x=='<')return 2;
		return 3;
	}
	
	public boolean empty(char x){
		return x=='.'||x=='G'||x=='S';
	}
	
	public boolean within(int row, int col){
		return row>=0&&row<m&&col>=0&&col<n;
	}
	
	public boolean safe(int row, int col,int mod){
		if(!within(row, col))return false;
		if(!empty(maze[row][col]))return false;
		for(int dir=0;dir<4;++dir){
			int row2 = row;
			int col2 = col;
			while(within(row2,col2)&&empty(maze[row2][col2])){
				row2+=dRow[dir];
				col2+=dCol[dir];
			}
			if(within(row2, col2)&&maze[row2][col2]!='#'&&(turretValue(maze[row2][col2])+mod)%4==dir){
				return false;
			}
		}
		return true;
	}
	
	public void solve(int caso)throws Exception{
		m = sc.nextInt();
		n = sc.nextInt();
		sc.nextLine();
		maze = new char[m][n];
		for(int i=0;i<m;++i){
			String s = sc.nextLine();
			for(int j=0;j<n;++j){
				maze[i][j]=s.charAt(j);
			}
		}
		int[][][] d = new int[m][n][4];
		int rowS = 0;
		int colS = 0;
		int rowG = 0;
		int colG = 0;
		for(int i=0;i<m;++i){
			for(int j=0;j<n;++j){
				for(int k=0;k<4;++k){
					d[i][j][k] = -1;
				}
				if(maze[i][j]=='S'){
					rowS = i;
					colS = j;
				}
				else if(maze[i][j]=='G'){
					rowG = i;
					colG = j;
				}
			}
		}
		class Nodo{
			int row;
			int col;
			int mod;
			public Nodo(int row, int col, int mod) {
				super();
				this.row = row;
				this.col = col;
				this.mod = mod;
			}
			
			public int getRow() {
				return row;
			}

			public void setRow(int row) {
				this.row = row;
			}

			public int getCol() {
				return col;
			}

			public void setCol(int col) {
				this.col = col;
			}

			public int getMod() {
				return mod;
			}

			public void setMod(int mod) {
				this.mod = mod;
			}
		}
		ArrayDeque<Nodo> Q = new ArrayDeque<Nodo>();
		d[rowS][colS][0] = 0;
		Q.add(new Nodo(rowS, colS, 0));
		while(!Q.isEmpty()){
			Nodo nodo = Q.poll();
			for(int dir=0;dir<4;++dir){
				Nodo nuevo = new Nodo(nodo.getRow()+dRow[dir], nodo.getCol()+dCol[dir], (nodo.getMod()+1)%4);
				if(safe(nuevo.getRow(), nuevo.getCol(), nuevo.getMod())&&d[nuevo.getRow()][nuevo.getCol()][nuevo.getMod()]==-1){
					d[nuevo.getRow()][nuevo.getCol()][nuevo.getMod()] = d[nodo.getRow()][nodo.getCol()][nodo.getMod()] + 1;
					Q.add(nuevo);
				}
			}
		}
		boolean flag = false;
		int res = 1;//solo por inicializar
		for(int mod=0;mod<4;++mod){
			if(d[rowG][colG][mod]!=-1){
				if(!flag){
					res = d[rowG][colG][mod];
				}
				else{
					res = Math.min(res, d[rowG][colG][mod]);
				}
				flag = true;
			}
		}
		pw.println("Case #"+caso+": "+(flag?""+res:"impossible"));
	}
	
	public void iniciar()throws Exception{
		int T = sc.nextInt();
		for(int i=0;i<T;++i){
			solve(i+1);
		}
		sc.close();
		pw.close();
	}
	public static void main(String[] args)throws Exception {
		// TODO Auto-generated method stub 
		new Ronda1C(new Scanner(new File(RUTA+"entradas\\laser_maze.txt")), new PrintWriter(new File(RUTA+"salidas\\out.txt"))).iniciar();
	}

	

}

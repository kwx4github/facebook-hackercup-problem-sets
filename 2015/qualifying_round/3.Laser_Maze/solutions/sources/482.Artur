using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GCJ2015Qual
{
    class Program
    {
        static int[] SplitInt(string arg)
        {
            return arg.Split().Select(s => int.Parse(s)).ToArray();
        }

        static void Main(string[] args)
        {
            int[] dirI = { -1, 0, 1, 0 };
            int[] dirJ = { 0, 1, 0, -1 };

            int T = int.Parse(Console.ReadLine());
            for (int t = 1; t <= T; t++)
            {
                var nm = SplitInt(Console.ReadLine());
                int N = nm[0], M = nm[1];
                string[] maze = new string[N];
                for (int i = 0; i < N; i++)
                {
                    maze[i] = Console.ReadLine();
                }
                Tuple<int, int> s = Tuple.Create(0, 0), g = Tuple.Create(0, 0);
                int?[, ,] mazes = new int?[N, M, 4];
                for (int i = 0; i < N; i++)
                    for (int j = 0; j < M; j++)
                        for (int k = 0; k < 4; k++)
                        {
                         
                            int? dir = null;
                            switch (maze[i][j])
                            {
                                case '.':
                                    break;
                                case '#':
                                    mazes[i, j, k] = -1;
                                    break;
                                case '^':
                                    dir = 0;
                                    break;
                                case '>':
                                    dir = 1;
                                    break;
                                case 'v':
                                    dir = 2;
                                    break;
                                case '<':
                                    dir = 3;
                                    break;
                                case 'S':
                                    s = Tuple.Create(i, j);
                                    break;
                                case 'G':
                                    g = Tuple.Create(i, j);
                                    break;
                            }
                            if (dir.HasValue)
                            {
                                mazes[i, j, k] = -1;
                                dir = (dir + k) % 4;
                                int posI = i + dirI[dir.Value], posJ = j + dirJ[dir.Value];
                                while (posI >= 0 && posI < N && posJ >= 0 && posJ < M && (maze[posI][posJ] == '.' || maze[posI][posJ] == 'S' || maze[posI][posJ] == 'G'))
                                {
                                    mazes[posI, posJ, k] = -1;
                                    posI += dirI[dir.Value];
                                    posJ += dirJ[dir.Value];
                                }
                            }
                        }
                var q = new Queue<Tuple<int, int, int>>();
                q.Enqueue(Tuple.Create(s.Item1, s.Item2, 0));
                bool first  = true;
                while (q.Count > 0)
                {
                    var current = q.Dequeue();
                    int k = (current.Item3 + 1) % 4;
                    int newValue = first ? 1 : mazes[current.Item1, current.Item2, current.Item3].Value+1;
                    first = false;
                    for (int d = 0; d < 4; d++)
                    {
                        int posI = current.Item1 + dirI[d], posJ = current.Item2 + dirJ[d];
                        if (posI >= 0 && posI < N && posJ >= 0 && posJ < M && !mazes[posI, posJ, k].HasValue)
                        {
                            mazes[posI, posJ, k] = newValue;
                            q.Enqueue(Tuple.Create(posI, posJ, k));
                        }
                    }
                }

                int? result = null;
                for (int i = 0; i < 4; i++)
                {
                    if (mazes[g.Item1, g.Item2, i].HasValue && mazes[g.Item1, g.Item2, i] != -1)
                    {
                        result = Math.Min(mazes[g.Item1, g.Item2, i].Value, result ?? int.MaxValue);
                    }
                }

                Console.WriteLine("Case #{0}: {1}", t, result.HasValue ? result.ToString() : "impossible");

            }
        }
    }
}

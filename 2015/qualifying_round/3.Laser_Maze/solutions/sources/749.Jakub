#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

char dirs[] = "^>v<";
int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};

int rows, cols;
char t[105][105];

bool blocked[105][105][4];
int dist[105][105][4];

void alg() {
    CLR(dist, -1);
    CLR(t, 0);
    CLR(blocked, 0);
    cin >> rows >> cols;
    REP (i, rows) {
        cin >> t[i];
    }
    REP (y, rows) {
        REP (x, cols) {
            REP (i, 4) {
                if (t[y][x] == dirs[i]) {
                    REP (j, 4) {
                        int cy = y + dy[(i + j) % 4];
                        int cx = x + dx[(i + j) % 4];
                        while (cy >= 0 && cy < rows && cx >= 0 && cx < cols && (t[cy][cx] == '.' || t[cy][cx] == 'S' || t[cy][cx] == 'G')) {
                            blocked[cy][cx][j] = true;
                            cy += dy[(i + j) % 4];
                            cx += dx[(i + j) % 4];
                        }
                    }
                }
            }
        }
    }
    queue<pair<PII, int>> q;
    REP (y, rows) {
        REP (x, cols) {
            if (t[y][x] == 'S') {
                dist[y][x][0] = 0;
                q.push(MP(MP(y, x), 0));
            }
        }
    }
    while (!q.empty()) {
        int y = q.front().ST.ST;
        int x = q.front().ST.ND;
        int md = q.front().ND;
        q.pop();
        if (t[y][x] == 'G') {
            cout << dist[y][x][md] << endl;
            return;
        }
        REP (d, 4) {
            int cy = y + dy[d];
            int cx = x + dx[d];
            int cmd = (md + 1) % 4;
            if (cy >= 0 && cy < rows && cx >= 0 && cx < cols && (t[cy][cx] == '.' || t[cy][cx] == 'S' || t[cy][cx] == 'G') && !blocked[cy][cx][cmd] && dist[cy][cx][cmd] == -1) {
                dist[cy][cx][cmd] = dist[y][x][md] + 1;
                q.push(MP(MP(cy, cx), cmd));
            }
        }
    }
    cout << "impossible" << endl;
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d+1) {
        cout << "Case #" << i << ": ";
        alg();
    }
}

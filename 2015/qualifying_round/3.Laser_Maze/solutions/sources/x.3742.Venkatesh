import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;

public class LaserMaze {

	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		String[] stary = new String[2];
		int row;
		int col;
		String st = "";

		for (int i = 0; i < t; i++) {
			stary = br.readLine().split("\\s+");
			row = Integer.parseInt(stary[0]);
			col = Integer.parseInt(stary[1]);
			char[][] conf = new char[row][col];

			Index S = new Index(-1, -1);
			Index G = new Index(-1, -1);

			for (int k = 0; k < row; k++) {
				st = br.readLine();
				for (int j = 0; j < col; j++) {

					conf[k][j] = st.charAt(j);

					if (st.charAt(j) == 'S') {
						S = new Index(k, j);
					} else if (st.charAt(j) == 'G') {
						G = new Index(k, j);
					}
				}
			}

			HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
			int result = getMin(S.x, S.y, G, 0, conf,0,hm);
			if (result == Integer.MAX_VALUE)
				System.out.println("Case #" + (i + 1) + ": impossible");
			else
				System.out.println("Case #" + (i + 1) + ": " + result);
		}
	}

	public static int getMin(int x, int y, Index G, int result, char[][] conf, int rIndex, HashMap<Integer,Integer> hm) {

		if(hm.get(hash(x,y,rIndex))!=null)
		{
			return hm.get(hash(x,y,rIndex));
		}
		else{
		if (x < 0 || y < 0 || x >= conf.length || y >= conf[0].length
				|| conf[x][y] == '#' || conf[x][y] == '^' || conf[x][y] == '>'
				|| conf[x][y] == 'v' || conf[x][y] == '<' )//|| result > 8275)
			return Integer.MAX_VALUE;
		if (result != 0) {

			int tempX = x;
			int tempY = y;
			while (tempX >= 0) {
				if (conf[tempX][tempY] == 'v')
					return Integer.MAX_VALUE;
				tempX--;
			}
			tempX = x;
			tempY = y;
			while (tempY >= 0) {
				if (conf[tempX][tempY] == '>')
					return Integer.MAX_VALUE;
				tempY--;
			}
			tempX = x;
			tempY = y;
			while (tempX < conf.length) {
				if (conf[tempX][tempY] == '^')
					return Integer.MAX_VALUE;
				tempX++;
			}
			tempX = x;
			tempY = y;
			while (tempY < conf[0].length) {
				if (conf[tempX][tempY] == '<')
					return Integer.MAX_VALUE;
				tempY++;
			}
		}
		if (x == G.x && y == G.y)
			return result;

		rotate(conf);

		int ans =  Math.min(
				Math.min(getMin(x + 1, y, G, result + 1, conf, rIndex+1,hm),
						getMin(x, y + 1, G, result + 1, conf, rIndex+1,hm)),
				Math.min(getMin(x - 1, y, G, result + 1, conf, rIndex+1,hm),
						getMin(x, y - 1, G, result + 1, conf, rIndex+1,hm)));
		
		hm.put(hash(x,y,rIndex),ans);
		return ans;
		}
	}

	public static void rotate(char[][] conf) {
		for (int i = 0; i < conf.length; i++) {
			for (int j = 0; j < conf[0].length; j++) {
				if (conf[i][j] == '^')
					conf[i][j] = '>';
				else if (conf[i][j] == '>')
					conf[i][j] = 'v';
				else if (conf[i][j] == 'v')
					conf[i][j] = '<';
				else if (conf[i][j] == '<')
					conf[i][j] = '^';
			}
		}
	}
	
	public static int hash(int a, int b, int c)
	{
		int temp = (a+b)*(a+b+1)/2+a;
		return (temp+c)*(temp+c+1)+temp;
	}
}

class Index {
	int x;
	int y;

	public Index(int x, int y) {
		this.x = x;
		this.y = y;
	}

}

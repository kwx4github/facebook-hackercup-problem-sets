#include <iostream>
#include <climits>
#include <algorithm>
using namespace std;

char map[100][100];
int visited[100][100][4];
pair<int, int> S, G;
int minMoves, m, n;
int lasers[] = {'^', '>', 'v', '<'};
int shootLasersEverywhere(int i, int j)
{
    int tmp, indicators[4], indicatorLeft, indicatorRight, indicatorTop, indicatorBottom;
    for(int k=0; k < 4; ++k)
    {
        if(map[i][j] == lasers[k])
        {
            tmp = k;
        }
    }

    for(int k=0; k < 4; ++k)
    {
        indicators[(tmp + k) % 4] = k;
    }

    tmp = i - 1;
    while(tmp >= 0 && map[tmp][j] < 16)
    {
        map[tmp][j] += (1 << indicators[0]);
        --tmp;
    }

    tmp = j + 1;
    while(tmp < n && map[i][tmp] < 16)
    {
        map[i][tmp] += (1 << indicators[1]);
        ++tmp;
    }

    tmp = i + 1;
    while(tmp < m && map[tmp][j] < 16)
    {
        map[tmp][j] += (1 << indicators[2]);
        ++tmp;
    }

    tmp = j - 1;
    while(tmp >= 0 && map[i][tmp] < 16)
    {
        map[i][tmp] += (1 << indicators[3]);
        --tmp;
    }
}

void dfs(int i, int j, int numMoves)
{
    int tmp = numMoves % 4;
    if(((map[i][j] & (1 << tmp)) && !(i == S.first && j == S.second)) || visited[i][j][tmp] <= numMoves)
        return;
    else if(i == G.first && j == G.second && numMoves < minMoves)
    {
        minMoves = numMoves;
        return;
    }
    visited[i][j][tmp] = numMoves;

    if(i > 0 && map[i-1][j] < 16)
    {
        dfs(i-1, j, numMoves + 1);
    }
    if(j > 0 && map[i][j-1] < 16)
    {
        dfs(i, j -1, numMoves + 1);
    }
    if(i + 1 < m && map[i+1][j] < 16)
    {
        dfs(i+1, j, numMoves + 1);
    }
    if(j+1 < n && map[i][j+1] < 16)
    {
        dfs(i, j+1, numMoves + 1);
    }
}

int main()
{
    bool found;
    int t;

    cin >> t;
    for(int k=1; k<= t; ++k)
    {
        cin >> m >> n;
        for(int i=0; i < m; ++i)
        {
            for(int j=0; j < n; ++j)
            {
                for(int r = 0; r < 4; ++r)
                {
                    visited[i][j][r] = INT_MAX;
                }

                cin >> map[i][j];
                if(map[i][j] == 'S')
                {
                    S.first = i;
                    S.second = j;
                    map[i][j] = 0;
                }
                else if(map[i][j] == 'G')
                {
                    G.first = i;
                    G.second = j;
                    map[i][j] = 0;
                }
                else if(map[i][j] == '.')
                {
                    map[i][j] = 0;
                }
            }
        }
        for(int i=0; i < m; ++i)
        {
            for(int j=0; j < n; ++j)
            {
                if(map[i][j] > '#')
                {
                    shootLasersEverywhere(i, j);
                }
            }
        }

        minMoves = INT_MAX;
        dfs(S.first, S.second, 0);

        cout << "Case #" << k << ": ";
        if(minMoves == INT_MAX)
        {
            cout << "impossible" << endl;
        }
        else
        {
            cout << minMoves << endl;
        }
    }
    return 0;
}

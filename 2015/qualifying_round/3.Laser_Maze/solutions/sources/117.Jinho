#include <cstring>
#include <cstdio>
#include <string>
#include <iostream>

using namespace std;

struct map
{
  map()
  {
    memset(data, 0, sizeof(data));
  }
  void turn();

  char data[100][100];
};

struct info
{
  void clear() { memset(v, 0, sizeof(v)); }
  int v[100][100];
};

map table[4];
int n, m;
int sx, sy, ex, ey;
info it[4];
info now, next;

void map::turn()
{
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
    {
      if (data[i][j] == '<') data[i][j] = '^';
      else if (data[i][j] == '^') data[i][j] = '>';
      else if (data[i][j] == '>') data[i][j] = 'v';
      else if (data[i][j] == 'v') data[i][j] = '<';
    }
}

void go(int i, int j, int k, int dx, int dy)
{
  while (true)
  {
    j = j + dx;
    k = k + dy;
    if (j < 0 || k < 0 || j == n || k == m) break;
    if (table[i].data[j][k] == '.' || table[i].data[j][k] == '*')
      table[i].data[j][k] = '*';
    else
      break;
  }
}

int main()
{
  int T;
  cin >> T;
  for (int cn = 1; cn <= T; ++cn)
  {
    cin >> n >> m;

    map mm;
    for (int i = 0; i < n; ++i)
    {
      string s;
      cin >> s;
      for (int j = 0; j < m; ++j)
      {
        if (s[j] == 'S') { sx = i; sy = j; s[j] = '.'; }
        if (s[j] == 'G') { ex = i; ey = j; s[j] = '.'; }
        mm.data[i][j] = s[j];
      }
    }
    for (int i = 0; i < 4; ++i)
    {
      table[i] = mm;
      for (int j = 0; j < n; ++j)
        for (int k = 0; k < m; ++k)
        {
          if (table[i].data[j][k] == '^') go(i, j, k, -1, 0);
          if (table[i].data[j][k] == '<') go(i, j, k, 0, -1);
          if (table[i].data[j][k] == '>') go(i, j, k, 0, 1);
          if (table[i].data[j][k] == 'v') go(i, j, k, 1, 0);
        }
      for (int j = 0; j < n; ++j)
      {
        for (int k = 0; k < m; ++k)
          if (table[i].data[j][k] == '*') table[i].data[j][k] = '#';
      }

      mm.turn();
    }

		now.clear();
    now.v[sx][sy] = 1;
    int depth = 0;
    bool ispos = true;
    int dx[4] = {-1, 0, 0 ,1};
    int dy[4] = {0, -1, 1, 0};
    while (true)
    {
      next.clear();

      depth++;
      int nd = depth % 4;
      for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
        {
          if (now.v[i][j] == 1)
          {
            for (int k = 0; k < 4; ++k)
            {
              int x = i + dx[k], y = j + dy[k];
              if (x < 0 || y < 0 || x == n || y == m) continue;
              if (table[nd].data[x][y] == '.')
              {
                next.v[x][y] = 1;
              }
            }
          }
        }

      now = next;
      // it[nd]랑 next가 같으면 impos
      bool same = true;
      for (int i = 0; i < n; ++i)
      {
        for (int j = 0; j < m; ++j)
        {
//          printf("%d ", next.v[i][j]);
          if (it[nd].v[i][j] != next.v[i][j]) { same = false; }
        }
//        printf("\n");
      }

      if (same)
      {
        ispos = false;
        break;
      }
      it[nd] = next;
      if (now.v[ex][ey] == 1) break;
    }
    if (ispos)
    {
      printf("Case #%d: %d\n", cn, depth);
    }
    else
    {
      printf("Case #%d: impossible\n", cn);
    }
  }
}


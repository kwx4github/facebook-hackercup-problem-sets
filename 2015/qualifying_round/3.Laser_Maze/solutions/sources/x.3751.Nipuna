import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Locale;
import java.util.InputMismatchException;
import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.File;
import java.io.Reader;
import java.io.Writer;
import java.io.FilenameFilter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Nipuna Samarasekara
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "laser.*maze.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lasermaze.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		FastScanner in = new FastScanner(inputStream);
		FastPrinter out = new FastPrinter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {
    // 689^*(
    public void solve(int testNumber, FastScanner in, FastPrinter out) {
    int m=in.nextInt(),n=in.nextInt();
    int[][] grid= new int[m][n];
    int rs=0,re=0,cs=0,ce=0;
        for (int i = 0; i < m; i++) {
          String s=in.next();
            for (int j = 0; j < n; j++) {
              grid[i][j]=1000;
             if (s.charAt(j)=='#')grid[i][j]=-1;
              if (s.charAt(j)=='>')grid[i][j]=0;
              if (s.charAt(j)=='^')grid[i][j]=1;
              if (s.charAt(j)=='<')grid[i][j]=2;
              if (s.charAt(j)=='v')grid[i][j]=3;
              if (s.charAt(j)=='S'){
                  rs=i;
                  cs=j;
              }
              if (s.charAt(j)=='G'){
                  re=i;
                  ce=j;
              }

            }
        }
     boolean[][][] grids= new boolean[4][m][n];
        for (int i = 0; i < 4; i++) {


            for (int j = 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    grids[i][j][k]=true;
                }}}
        for (int i = 0; i < 4; i++) {


            for (int j = 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    if (grid[j][k]<4)grids[i][j][k]=false;
                    if (grid[j][k]==0){
                        for (int rr = k; rr < n; rr++) {
                            if (grid[j][rr]==-1)break;
                            grids[i][j][rr]=false;
                        }

                    }
                    if (grid[j][k]==1){
                        for (int cc = j; cc >=0 ; cc--) {
                            if (grid[cc][k]==-1)break;
                           grids[i][cc][k]=false;
                        }
                    }
                    if (grid[j][k]==2){
                        for (int rr = k; rr >=0; rr--) {
                            if (grid[j][rr]==-1)break;
                            grids[i][j][rr]=false;
                        }
                    }
                    if (grid[j][k]==3){
                        for (int cc = j; cc < m ; cc++) {
                            if (grid[cc][k]==-1)break;
                           grids[i][cc][k]=false;
                        }
                    }
                    if (grid[j][k]>=0&&grid[j][k]<4){
                        grid[j][k]--;
                        grid[j][k]+=4;
                        grid[j][k]%=4;
                    }
                }
            }

        }
        for (int i = 0; i < 4; i++) {

//            deb(grids[i]);
//            System.out.println("-----------------");

        }
      int Tmax=4*m*n+10;
        int t=0;
        int ans=-1;
        int cm=0;
        boolean[][] possible= new boolean[m][n];

        possible[rs][cs]=true;
        while (t<Tmax){
       //     System.out.println(t+"/"+Tmax);
       //     deb(possible);
         if (possible[re][ce]){
             ans=t;
             break;
         }
        boolean[][] possiblet= new boolean[m][n];
        cm++;
        cm%=4;
        t++;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (!grids[cm][i][j])continue;
                    int xx,yy;
                    xx=i+1;
                    yy=j;
                    if (xx>=0&&yy>=0&&xx<m&&yy<n){
                        if (possible[xx][yy])possiblet[i][j]=true;

                    }xx=i-1;
                    yy=j;
                    if (xx>=0&&yy>=0&&xx<m&&yy<n){
                        if (possible[xx][yy])possiblet[i][j]=true;

                    }xx=i;
                    yy=j+1;
                    if (xx>=0&&yy>=0&&xx<m&&yy<n){
                        if (possible[xx][yy])possiblet[i][j]=true;

                    }xx=i;
                    yy=j-1;
                    if (xx>=0&&yy>=0&&xx<m&&yy<n){
                        if (possible[xx][yy])possiblet[i][j]=true;

                    }
                }
            }
          possible=possiblet;

        }
        System.out.println("Case #"+testNumber+": "+ans);
        if (ans>=0)out.println("Case #"+testNumber+": "+ans);
        else       out.println("Case #"+testNumber+": impossible");


    }
}

class FastScanner extends BufferedReader {

    public FastScanner(InputStream is) {
        super(new InputStreamReader(is));
    }

    public int read() {
        try {
            int ret = super.read();
//            if (isEOF && ret < 0) {
//                throw new InputMismatchException();
//            }
//            isEOF = ret == -1;
            return ret;
        } catch (IOException e) {
            throw new InputMismatchException();
        }
    }

    public String next() {
        StringBuilder sb = new StringBuilder();
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        if (c < 0) {
            return null;
        }
        while (c >= 0 && !isWhiteSpace(c)) {
            sb.appendCodePoint(c);
            c = read();
        }
        return sb.toString();
    }

    static boolean isWhiteSpace(int c) {
        return c >= 0 && c <= 32;
    }

    public int nextInt() {
        int c = read();
        while (isWhiteSpace(c)) {
            c = read();
        }
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int ret = 0;
        while (c >= 0 && !isWhiteSpace(c)) {
            if (c < '0' || c > '9') {
                throw new NumberFormatException("digit expected " + (char) c
                        + " found");
            }
            ret = ret * 10 + c - '0';
            c = read();
        }
        return ret * sgn;
    }

    public String readLine() {
        try {
            return super.readLine();
        } catch (IOException e) {
            return null;
        }
    }

}

class FastPrinter extends PrintWriter {

    public FastPrinter(OutputStream out) {
        super(out);
    }


}



//~        Author : Sarvesh Mahajan                             
//               IIIT,Hyderabad                                   
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef ONLINE_JUDGE
//#define DEBUG
#endif

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#define pi(n) printf("%d ",n)
#define si(n) scanf("%d",&n)
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define F first
#define S second
#define sz size
#define pLL(x) cout<<x<<' '
#define fill(x,c) memset(x,c,sizeof(x))
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#ifdef DEBUG
#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#else
#define DB(x)
#define DB2(x,y)
#define DB3(x,y,z)
#endif

set<pair<PII,PII> > danger;
char s[101][101];
char dummy[]={'<','^','>','v'};
int initial[101];
bool v[101][101][4];
int d[101][101][4],ct;
PII start,goal;
int n,m;
bool ok(int i,int j,int x)
{
	//check bounds
	if(i<0 or i>=m)
		return 0;
	if(j<0 or j>=n)
		return 0;

	//check if already visited

	if(v[i][j][x])
		return 0;

	//Check if no wall

	if(s[i][j] != '.' and s[i][j]!='S' and s[i][j]!='G')
		return 0;

	//Check if attack is there

	int p;
	Loop(p,ct-1)
	{
		int q=(initial[p]+x)%4;
		if(danger.find(mp(mp(i,j),mp(p,q))) != danger.end())
			return 0;
//		if(danger[i][j][p][q])
	}
	return 1;
}








int solve()
{
	fill(v,0);fill(d,0);
	queue<pair<PII,int> > q;
	q.push(mp(mp(start.F,start.S),0));
	v[start.F][start.S][0]=1;
	d[start.F][start.S][0]=0;
	while(!q.empty())
	{
		pair<PII,int> pp=q.front();
		q.pop();
		int so_far=pp.S;
		int i=pp.F.F;
		int j=pp.F.S;
		int next=(so_far+1)%4;
		if(pp.F.F == goal.F and pp.F.S == goal.S)
			return d[i][j][so_far];
		if(ok(i-1,j,next))
		{
			q.push(mp(mp(i-1,j),next));
			d[i-1][j][next]=d[i][j][so_far]+1;
			v[i-1][j][next]=1;
		}
		if(ok(i+1,j,next))
		{
			q.push(mp(mp(i+1,j),next));
			d[i+1][j][next]=d[i][j][so_far]+1;
			v[i+1][j][next]=1;
		}

		if(ok(i,j-1,next))
		{
			q.push(mp(mp(i,j-1),next));
			d[i][j-1][next]=d[i][j][so_far]+1;
			v[i][j-1][next]=1;
		}
		if(ok(i,j+1,next))
		{
			q.push(mp(mp(i,j+1),next));
			d[i][j+1][next]=d[i][j][so_far]+1;
			v[i][j+1][next]=1;
		}


	}
	return 1e9;
}
	//bfs




int main()
{
	//ios_base::sync_with_stdio(false);
	int t,l,k,ans,i,j,res=0,fl;
	t=1;
	int T;
	si(T);


	Loop(t,T)
	{
		printf("Case #%d: ",t);
		clr(danger);
		cin>>m>>n;
		map<PII,int> mapp;
		loop(i,m)
			scanf("%s",s[i]);
		 ct=1;
		loop(i,m)
		{
			loop(j,n)
			{
				if(s[i][j] == '^' or s[i][j] == 'v' or s[i][j] == '<' or s[i][j] == '>')
				{
					mapp[mp(i,j)]=ct;
					loop(k,4)
					{
						if(s[i][j] == dummy[k])
					         initial[ct]=k;
					}
					ct++;

				}
			}
		}

		loop(i,m)
		{
			loop(j,n)
			{
				if(s[i][j] == 'G')
				{
					goal.F=i;goal.S=j;
					continue;
				}
				if(s[i][j] == 'S')
				{
					start.F=i;start.S=j;
					continue;
				}
				if(s[i][j] == '.' or s[i][j] == '#')
					continue;

				int ll=mapp[mp(i,j)];

				// up
				for(k=i-1;k>=0;--k)
				{
					if(s[k][j] != '.' and s[k][j]!='G' and s[k][j]!='S')
						break;
					danger.insert(mp(mp(k,j),mp(ll,1)));
				}

				//down 
				for(k=i+1;k<m;++k)
				{

					if(s[k][j] != '.' and s[k][j]!='G' and s[k][j]!='S')
						break;
					danger.insert(mp(mp(k,j),mp(ll,3)));
					//danger[k][j][ll][3]=true;
				}

				//left 
				for(k=j-1;k>=0;--k)
				{
					if(s[i][k] != '.' and s[i][k]!='G' and s[i][k]!='S')
						break;

					danger.insert(mp(mp(i,k),mp(ll,0)));
					//danger[i][k][ll][0]=true;
				}

				//right
				for(k=j+1;k<n;++k)
				{
					if(s[i][k] != '.' and s[i][k]!='G' and s[i][k]!='S')
						break;

					danger.insert(mp(mp(i,k),mp(ll,2)));
					//danger[i][k][ll][2]=true;
				}
			}
		}
	/*	loop(k,4)
		{
		loop(i,m)
		{
			loop(j,n)
				pi(danger[i][j][1][k]);
		
			puts("");
		}
		}*/
		res=(solve());
		if(res == 1e9)
		puts("impossible");
		else
		{
			printf("%d",res);
			puts("");
		}










	}
	return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#define _USE_MATH_DEFINES
#define maxnm 103
using namespace std;
int ntest, test; 
long long res;
int n, m; string s[maxnm]; 
char a[5][maxnm][maxnm];
struct cell{ int s, r, c, v; }; vector <cell> lst[5];
cell que[maxnm*maxnm * 5]; int top; bool d[5][maxnm][maxnm];
bool checkcell(cell x){
	if (a[x.s][x.r][x.c] == 'G') {
		res = x.v; return true;
	}
	if ((a[x.s][x.r][x.c] == '#') || (a[x.s][x.r][x.c] == 'x') ||(d[x.s][x.r][x.c] == true))
		return false;
	d[x.s][x.r][x.c] = true;
	top++; que[top] = x;
	return false;
}
void bfs(){
	top = 0; memset(d, false, sizeof(d)); res = -1;
	cell x, y;  int i,j;
	for (i = 0; i < n; i++) for (j = 0; j < m;j++) if (s[i][j] == 'S'){
		x.r = i + 1; x.c = j + 1;
		x.s = 0; x.v = 0;
		d[0][i][j] = true;
		top++; que[top] = x;
	}
	if (top < 1){
		res = -2; return;
	}
	i = 0;
	while (i < top){
		i++; x = que[i];
		x.s = (x.s + 1) % 4; x.v++;
		y = x; y.r--; if (checkcell(y) == true) return;
		y = x; y.r++; if (checkcell(y) == true) return;
		y = x; y.c--; if (checkcell(y) == true) return;
		y = x; y.c++; if (checkcell(y) == true) return;
	}
	
}
void process(){
	int i, j, k,x;
	for (k = 0; k < 5; k++){
		for (i = 0; i <= n + 1; i++)
		for (j = 0; j <= m + 1; j++) a[k][i][j] = '#';
	}
	string p = "<^>v<^>v";
	for (i = 1; i <= n; i++) for (j = 1; j <= m; j++){
		a[0][i][j] = s[i - 1][j - 1];
		for (k = 1; k <= 4; k++) a[k][i][j] = s[i - 1][j - 1];
		for (x = 0; x < 4; x++) if (a[0][i][j] == p[x]){
			for (k = 0; k < 4; k++) a[k][i][j] = p[x + k];
			break;
		}
	}
	cell c; int u,v;
	for (k = 0; k < 4; k++)
	{
		for (x = 0; x < 4; x++) lst[x].clear();
		for (i = 1; i <= n; i++) for (j = 1; j <= m; j++){
			for (x=0;x<4;x++) if (a[k][i][j] == p[x]){
				c.s = k; c.r = i; c.c = j; c.v = -1;
				lst[x].push_back(c);
				break;
			}
		}
		//fill left;
		for (i = 0; i < lst[0].size(); i++){
			u = lst[0][i].r; v = lst[0][i].c;
			while (a[k][u][v] != '#'){
				a[k][u][v] = 'x';
				u = u; v = v - 1;
			}
		}

		//fill up;
		for (i = 0; i < lst[1].size(); i++){
			u = lst[1][i].r; v = lst[1][i].c;
			while (a[k][u][v] != '#'){
				a[k][u][v] = 'x';
				u = u - 1; v = v;
			}
		}

		//fill right;
		for (i = 0; i < lst[2].size(); i++){
			u = lst[2][i].r; v = lst[2][i].c;
			while (a[k][u][v] != '#'){
				a[k][u][v] = 'x';
				u = u; v = v + 1;
			}
		}

		//fill down;
		for (i = 0; i < lst[3].size(); i++){
			u = lst[3][i].r; v = lst[3][i].c;
			while (a[k][u][v] != '#'){
				a[k][u][v] = 'x';
				u = u + 1; v = v;
			}
		}
	}
	bfs();
}
int main(){
	freopen("laser_maze.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin >> ntest; int i;
	for (test = 1; test <= ntest; test++){
		cin >> n >> m; for (i = 0; i<n; i++) cin >> s[i];
		process();
		if (test > 1) cout << endl;
		cout << "Case #" << test << ": ";
		if (res < 0) cout << "impossible";
		else cout << res;
	}
	fclose(stdin); fclose(stdout);
	return 0;
}
#include <bits/stdc++.h>

using namespace std;

const int MAXN = 100;

char s[MAXN][MAXN];

bool can[MAXN][MAXN][4];
int dist[MAXN][MAXN][4];

int dr[4] = {1,0,0,-1};
int dc[4] = {0,1,-1,0};

int n,m;

void up(int r,int c,int t){
	while(r >= 0 && s[r][c] == '.'){
		can[r][c][t] = 0;
		r--;
	}
}

void down(int r,int c,int t){
	while(r < n && s[r][c] == '.'){
		can[r][c][t] = 0;
		r++;
	}
}

void lft(int r,int c,int t){
	while(c >= 0 && s[r][c] == '.'){
		can[r][c][t] = 0;
		c--;
	}
}

void rgt(int r,int c,int t){
	while(c < m && s[r][c] == '.'){
		can[r][c][t] = 0;
		c++;
	}
}

void f(int r,int c,int t,int ft){
	if(ft == 0){
		up(r-1,c,t);
	} else if(ft == 1){
		rgt(r,c+1,t);
	} else if(ft == 2){
		down(r+1,c,t);
	} else {
		lft(r,c-1,t);
	}
}

typedef tuple<int,int,int> state;

int main(){
#ifndef ONLINE_JUDGE
	freopen("laser_maze.txt","r",stdin);
	freopen("laser_maze_out.txt","w",stdout);
#endif
	int casos,ans;
	state src,dst;
	map<char,int> mp = { {'^',0}, {'>',1} , {'v',2} ,{'<',3} };
	scanf("%d",&casos);
	for(int caso = 1 ; caso <= casos ; caso++){
		scanf("%d%d\n",&n,&m);
		for(int i = 0 ; i < n ; i++){
			scanf("%s",s[i]);
			for(int j = 0 ; j < m ; j++){
				if(s[i][j] == 'S'){
					src = state(i,j,0);
					s[i][j] = '.';
				} else if(s[i][j] == 'G'){
					dst = state(i,j,0);
					s[i][j] = '.';
				}
			}
		}
		memset(can,1,sizeof can);
		for(int i = 0 ; i < n ; i++){
			for(int j = 0 ; j < m ; j++){
				if(s[i][j] == '#'){
					for(int t = 0 ; t < 4 ; t++){
						can[i][j][t] = 0;
					}
				} else if(s[i][j] != '.'){
					for(int t = 0 ; t < 4 ; t++){
						can[i][j][t] = 0;
						f(i,j,t,(t+mp[s[i][j]])%4);
					}
				}
			}
		}
		memset(dist,-1,sizeof dist);
		queue<state> q;
		q.push(src);
		dist[get<0>(src)][get<1>(src)][0] = 0;
		ans = -1;
		while(!q.empty()){
			state aux = q.front();
			q.pop();
			if(get<0>(aux) == get<0>(dst) && get<1>(aux) == get<1>(dst)){
				ans = dist[get<0>(aux)][get<1>(aux)][get<2>(aux)];
				break;
			}
			int r = get<0>(aux), c = get<1>(aux), t = get<2>(aux);
			for(int i = 0 ; i < 4 ; i++){
				int rr = r + dr[i];
				int cc = c + dc[i];
				if(rr >= 0 && cc >= 0 && rr < n && cc < m && can[rr][cc][(t+1)%4] && dist[rr][cc][(t+1)%4] == -1){
					dist[rr][cc][(t+1)%4] = dist[get<0>(aux)][get<1>(aux)][get<2>(aux)]+1;
					q.push(state(rr,cc,(t+1)%4));
				}
			}
		}
		printf("Case #%d: ",caso);
		if(ans == -1){
			printf("impossible\n");
		} else {
			printf("%d\n",ans);
		}
	}
	return 0;
}
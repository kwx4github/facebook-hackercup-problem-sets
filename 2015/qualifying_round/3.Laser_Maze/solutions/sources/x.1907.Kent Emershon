#include <bits/stdc++.h>

using namespace std;

string maze[111];

int X[] = {-1,0,1,0};
int Y[] = {0,1,0,-1};

char cc[] = {'^','>','v','<'};

int T[111][111][5], tiempo[111][111][5], n , m;

void update(int x, int y){

    int apuntador;

    if(maze[x][y] == '^')   apuntador = 0;
    if(maze[x][y] == '>')   apuntador = 1;
    if(maze[x][y] == 'v')   apuntador = 2;
    if(maze[x][y] == '<')   apuntador = 3;

    apuntador++;
    apuntador%=4;

    for(int i = 0 ; i<4 ;i++){
        for(int j = 1 ;  ;j++){
            int sigX = x + X[apuntador]*j ,  sigY = y + Y[apuntador]*j;
            if(sigX>=0 && sigX<n && sigY>=0 && sigY<m ){
                if(maze[sigX][sigY]=='.' || maze[sigX][sigY]=='G' || maze[sigX][sigY] == 'S'){
                    T[sigX][sigY][i] = -1;
                }else break;
            }else   break;
        }
        apuntador++;
        apuntador%=4;
    }
}


int main(){

    freopen("in.c","r",stdin);
    freopen("out.c","w",stdout);


    int TC ,  NC = 1 , iniX, iniY ,  finX, finY;

    cin>>TC;

    while(TC--){
        cin>>n>>m;
        memset(T , 0 , sizeof T);

        for(int i = 0 ; i<n ;i++){
            cin>>maze[i];
        }

        for(int i = 0 ; i<n ;i++){
            for(int j = 0 ; j<m ;j++){
                if(maze[i][j] == 'S'){
                    iniX = i , iniY = j;
                }else if(maze[i][j] == '.');
                else if(maze[i][j] == '#'){
                    T[i][j][0] = -1;
                    T[i][j][1] = -1;
                    T[i][j][2] = -1;
                    T[i][j][3] = -1;
                }else if(maze[i][j] == 'G'){
                    finX = i , finY = j;
                }else {
                    update(i , j);
                }

            }
        }

        queue<pair<int,pair<int,int> > > q1;
        memset(tiempo , -1 , sizeof tiempo);

        tiempo[iniX][iniY][3] = 0;
        q1.push(make_pair(iniX, make_pair(iniY , 3)));

        while(!q1.empty()){
            pair<int,pair<int,int> > nodo = q1.front();
            q1.pop();

            for(int i = 0 ; i<4 ;i++){
                int xx = nodo.first + X[i] , yy = nodo.second.first + Y[i];
                if(xx>=0 && xx<n && yy>=0 && yy<m && T[xx][yy][(nodo.second.second+1)%4]!=-1 && tiempo[xx][yy][(nodo.second.second+1)%4]==-1){
                    tiempo[xx][yy][(nodo.second.second+1)%4] = tiempo[nodo.first][nodo.second.first][nodo.second.second] +1;
                    q1.push(make_pair( xx ,  make_pair(yy, (nodo.second.second+1)%4 ) ));
                }
            }

        }

        int ans = INT_MAX;
        for(int i = 0 ; i<4 ;i++){
            if(tiempo[finX][finY][i]!=-1){
                ans = min(ans, tiempo[finX][finY][i]);
            }
        }

        cout<<"Case #"<<NC++<<": ";
        if(ans == INT_MAX){
            cout<<"impossible"<<endl;
        }else{
            cout<<ans<<endl;
        }

    }


    return 0;
}

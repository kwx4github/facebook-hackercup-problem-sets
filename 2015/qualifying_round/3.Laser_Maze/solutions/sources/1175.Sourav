/*
*Sourav Sen Tonmoy
*University of Dhaka
*/

#include <bits/stdc++.h>

#define rep(i,n) for(i=0; i<n; i++)
#define repl(i,n) for(i=1; i<=n; i++)
#define foreach(i,n) for(__typeof((n).begin())i =(n).begin(); i!=(n).end(); i++)

#define sz(x) (int) x.size()
#define pb(x) push_back(x)
#define all(x) x.begin(),x.end()
#define uu first
#define vv second
#define mem(x, y) memset(x, y, sizeof(x));

#define sdi(x) scanf("%d", &x)
#define sdii(x, y) scanf("%d %d", &x, &y)
#define sdiii(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sdl(x) scanf("%lld", &x)
#define sdll(x, y) scanf("%lld %lld", &x, &y)
#define sdlll(x, y, z) scanf("%lld %lld %lld", &x, &y, &z)
#define sds(x) scanf("%s", x)
#define pfi(x) printf("%d\n", x)
#define pfii(x, y) printf("%d %d\n", x, y)
#define pfiii(x, y, z) printf("%d %d %d\n", x, y, z)
#define pfl(x) printf("%lld\n", x)
#define pfll(x, y) printf("%lld %lld\n", x, y)
#define pflll(x, y, z) printf("%lld %lld %lld\n", x, y, z)

#define OK printf("ok\n")
#define DB(x) cout << #x << " = " << x << endl;

int setBit(int N, int pos) { return N=N | (1<<pos); }
int resetBit(int N, int pos) { return N= N & ~(1<<pos); }
bool checkBit(int N, int pos) { return (bool)(N & (1<<pos)); }

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> pii;

//int kx[] = {+2, +1, -1, -2, -2, -1, +1, +2};
//int ky[] = {+1, +2, +2, +1, -1, -2, -2, -1}; //Knight Direction
int fx[] = {-1, +0, +1, +0, -1, +1, -1, +1};
int fy[] = {+0, +1, +0, -1, +1, +1, -1, -1}; //Four & Eight Direction

int r, c, cost[6][105][105];
char in[105][105], graph[6][105][105];
bool visit[6][105][105];

struct data {
    int Time, x, y;
};

bool isValid(int x, int y) {
    if(x>=0 && x<r && y>=0 && y<c) return true;
    else return false;
}

void printGraph(int par) {
    int i, j, k;

    if(par == -1) {
        rep(k, 4) {
            cout << "----- " << k << " ------\n";
            rep(i, r) {
                puts(graph[k][i]);
            }
        }
        return;
    }

    cout << "----- " << par << " ------\n";
    rep(i, r) {
        puts(graph[par][i]);
    }
}

void cover(int x, int y, int graphNum, int dir) {
    x = x + fx[dir];
    y = y + fy[dir];

    while(isValid(x, y) && !(in[x][y] == '#' || in[x][y] == '^' || in[x][y] == '>' || in[x][y] == 'v' || in[x][y] == '<')) {
        graph[graphNum][x][y] = '#';
        x = x + fx[dir];
        y = y + fy[dir];
    }
}

void createGraph() {
    int i, j, k;
    char ch;

    mem(graph, 0);

    rep(i, r) {
        rep(j, c) {
            if(in[i][j] == 'S' || in[i][j] == 'G' || in[i][j] == '.') ch = '.';
            else ch = '#';
            rep(k, 4) {
                graph[k][i][j] = ch;
            }
        }
    }

    rep(i, r) {
        rep(j, c) {
            if(in[i][j] == '^') {
                rep(k, 4) {
                    cover(i, j, k, k);
//                    printGraph(k);
                }
            }
            else if(in[i][j] == '>') {
                rep(k, 4) {
                    cover(i, j, k, (k+1)%4);
//                    printGraph(k);
                }
            }
            else if(in[i][j] == 'v') {
                rep(k, 4) {
                    cover(i, j, k, (k+2)%4);
//                    printGraph(k);
                }
            }
            else if(in[i][j] == '<') {
                rep(k, 4) {
                    cover(i, j, k, (k+3)%4);
//                    printGraph(k);
                }
            }
        }
    }
}

int bfs(data s, data t) {
    queue <data> q;
    int i, j, k;

    mem(visit, false);
    mem(cost, 63);
    visit[s.Time][s.x][s.y] = true;
    cost[s.Time][s.x][s.y] = 0;
    q.push(s);

    while(!q.empty()) {
        data u = q.front();
        q.pop();

        rep(i, 4) {
            data v = {(u.Time+1)%4, u.x+fx[i], u.y+fy[i]};
            if(isValid(v.x, v.y) && !visit[v.Time][v.x][v.y] && graph[v.Time][v.x][v.y] != '#' &&
               cost[u.Time][u.x][u.y]+1 < cost[v.Time][v.x][v.y]) {
                    visit[v.Time][v.x][v.y] = true;
                    cost[v.Time][v.x][v.y] = cost[u.Time][u.x][u.y] + 1;
                    q.push(v);
            }
        }
    }

    int mn = INT_MAX;
    rep(i, 4) {
        mn = min(mn, cost[i][t.x][t.y]);
    }

    if(mn > 1000000000) return -1;
    return mn;
}

int main() {
//    freopen("c.txt","r",stdin);
//    freopen("cout.txt","w",stdout);

    int test, kase=1, i, j;

    sdi(test);
    while(test--) {
        sdii(r, c);
        rep(i, r) sds(in[i]);

        createGraph();
//        printGraph(-1);

        data s, t;
        rep(i, r) {
            rep(j, c) {
                if(in[i][j] == 'S') {
                    s = data{0, i, j};
                }
                else if(in[i][j] == 'G') {
                    t = data{0, i, j};
                }
            }
        }

        int ret = bfs(s, t);
        printf("Case #%d: ", kase++);
        if(ret == -1) puts("impossible");
        else pfi(ret);
    }

    return 0;
}

#include <cstdio>
#include <queue>
#include <iostream>
#include <string>
#include <cstring>
#include <algorithm>
using namespace std;
const int inf = 1000000000;
int n, m, d[4][105][105], sx, sy, ex, ey, c[4][105][105];
char S[105][105];
char turret[4] = { '>', 'v', '<', '^' };
int px[4] = { 0, 1, 0, -1 };
int py[4] = { 1, 0, -1, 0 };
int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int T, run;
	for (scanf("%d", &T), run = 1; run <= T; run++) {
		scanf("%d%d", &n, &m);
		memset(c, 0, sizeof(c));
		for (int i = 1; i <= n; i++) scanf("%s", S[i] + 1);
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (S[i][j] == 'S') sx = i, sy = j, S[i][j] = '.';
				else if (S[i][j] == 'G') ex = i, ey = j, S[i][j] = '.';
				else if (S[i][j] != '.' && S[i][j] != '#') {
					int L;
					for (L = 0; L < 4; L++) if (S[i][j] == turret[L]) break;
					for (int k = 0; k < 4; k++) {
						int x = i, y = j;
						x += px[L]; y += py[L];
						while (1 <= x && x <= n && 1 <= y && y <= m && S[x][y] == '.') {
							c[k][x][y] = 1;
							x += px[L]; y += py[L];
						}
						L = (L + 1) % 4;
					}
				}
			}
		}
		for (int k = 0; k < 4; k++) for (int i = 0; i <= n; i++) for (int j = 0; j <= m; j++) d[k][i][j] = inf;
		d[0][sx][sy] = 0;
		queue <int> qd, qx, qy;
		qd.push(0); qx.push(sx); qy.push(sy);
		int res = inf;
		while (!qd.empty()) {
			int nd = qd.front(); qd.pop();
			int nx = qx.front(); qx.pop();
			int ny = qy.front(); qy.pop();
			int nk = nd % 4;
			int nxtk = (nk + 1) % 4;
			if (nx == ex && ny == ey) {
				if (res > d[nk][nx][ny]) res = d[nk][nx][ny];
				continue;
			}
			for (int k = 0; k < 4; k++) {
				int nxtx = nx + px[k];
				int nxty = ny + py[k];
				if (1 <= nxtx && nxtx <= n && 1 <= nxty && nxty <= m && S[nxtx][nxty] == '.' && c[nxtk][nxtx][nxty] == 0) {
					if (d[nxtk][nxtx][nxty] > nd + 1) {
						d[nxtk][nxtx][nxty] = nd + 1;
						qd.push(nd + 1); qx.push(nxtx); qy.push(nxty);
					}
				}
			}
		}
		printf("Case #%d: ", run);
		if (res == inf) puts("impossible");
		else printf("%d\n", res);
	}
}
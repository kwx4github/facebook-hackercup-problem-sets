#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <queue>
#include <cassert>

using namespace std;


int main()
{
	ios_base::sync_with_stdio(0);
	//freopen("INPUT.TXT", "r", stdin);
	freopen("OUTPUT.TXT", "w", stdout);
	
	int n, t = 1;

	cin >> n;

	while (t <= n)
	{
		int X, Y;
		cin >> Y >> X;
		vector<string> Map(Y);
		vector<vector<vector<char>>> blocked(4, vector<vector<char>>(Y, vector<char>(X)));
		for (int i = 0; i < Y; i++)
			cin >> Map[i];
		
		int xs = -2, ys = -2;
		int xe = -2, ye = -2;

		for (int x = 0; x < X; x++)
		for (int y = 0; y < Y; y++)
		{
			if (Map[y][x] == 'S') xs = x, ys = y, Map[y][x] = '.';
			if (Map[y][x] == 'G') xe = x, ye = y, Map[y][x] = '.';
		}

		assert(xs != -2 && xe != -2);

		for (int x = 0; x < X; x++)
		for (int y = 0; y < Y; y++)
		{
			if (Map[y][x] == '#') blocked[0][y][x] = true, blocked[1][y][x] = true, blocked[2][y][x] = true, blocked[3][y][x] = true;
			if (Map[y][x] != '.' && Map[y][x] != '#')
			{
				int direction = -1;
				switch (Map[y][x])
				{
				case '^':
					direction = 0;
					break;
				case '>':
					direction = 3;
					break;
				case 'v':
					direction = 2;
					break;
				case '<':
					direction = 1;
				}

				assert(direction != -1);

				int xt = x + 1, yt = y;
				while (xt < X && Map[yt][xt] == '.') blocked[direction][yt][xt++] = true;
				direction = (direction + 1) % 4;
				xt = x; yt = y + 1;
				while (yt < Y && Map[yt][xt] == '.') blocked[direction][yt++][xt] = true;
				direction = (direction + 1) % 4;
				xt = x - 1; yt = y;
				while (xt > 0 && Map[yt][xt] == '.') blocked[direction][yt][xt--] = true;
				direction = (direction + 1) % 4;
				xt = x; yt = y - 1;
				while (yt > 0 && Map[yt][xt] == '.') blocked[direction][yt--][xt] = true;

			}
		}

		set<pair<pair<int, int>, int>> visited; //x, y, phase;
		queue<pair<pair<int, int>, int>> Q;

		Q.push(make_pair(make_pair(ys, xs), 0));
		visited.insert(make_pair(make_pair(ys, xs), 0));

		int best = -1;

		while (Q.size() > 0)
		{
			int yc = Q.front().first.first;
			int xc = Q.front().first.second;
			int turn = Q.front().second;
			Q.pop();

			if (yc == ye && xc == xe)
			{
				best = turn;
				break;
			}

			if (yc > 0 && !blocked[turn % 4][yc - 1][xc])
			{
				if (!visited.count(make_pair(make_pair(yc - 1, xc), turn % 4)))
				{
					visited.insert(make_pair(make_pair(yc - 1, xc), turn % 4));
					Q.push(make_pair(make_pair(yc - 1, xc), turn + 1));
				}
			}

			if (xc > 0 && !blocked[turn % 4][yc][xc - 1])
			{
				if (!visited.count(make_pair(make_pair(yc, xc - 1), turn % 4)))
				{
					visited.insert(make_pair(make_pair(yc, xc - 1), turn % 4));
					Q.push(make_pair(make_pair(yc, xc - 1), turn + 1));
				}
			}

			if (xc < X - 1 && !blocked[turn % 4][yc][xc + 1])
			{
				if (!visited.count(make_pair(make_pair(yc, xc + 1), turn % 4)))
				{
					visited.insert(make_pair(make_pair(yc, xc + 1), turn % 4));
					Q.push(make_pair(make_pair(yc, xc + 1), turn + 1));
				}
			}

			if (yc < Y - 1 && !blocked[turn % 4][yc + 1][xc])
			{
				if (!visited.count(make_pair(make_pair(yc + 1, xc), turn % 4)))
				{
					visited.insert(make_pair(make_pair(yc + 1, xc), turn % 4));
					Q.push(make_pair(make_pair(yc + 1, xc), turn + 1));
				}
			}
		}



		
		cout << "Case #" << t++ << ": " << (best == -1 ? "impossible" : to_string(best)) << "\n";
	}
}


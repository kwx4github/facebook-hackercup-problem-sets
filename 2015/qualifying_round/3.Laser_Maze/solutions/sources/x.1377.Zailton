#include <bits/stdc++.h> 

#define FOR(i, a, b) for(int i = a; i < b; ++i) 
#define FORR(i, n) FOR(i, 0, n) 
#define sz(v) int((v).size()) 
#define pb push_back 
#define all(e) (e).begin(), (e).end()
#define LSOne(S) (S & (-S)) // bit menos significativo

using namespace std;

#define ii pair<int,int>
#define ll long long

const int MAXN = 50000;
const int INF = 1000000000;

int N, M;	
string maze[105];

vector<int> adj[MAXN];

int start;
vector<int> goal;

int vis[MAXN];
int tim[MAXN];
int bfs () {
	queue<int> mq;
	memset (vis, 0, sizeof vis);
	FORR (i, MAXN) tim[i] = INF;
	mq.push (start);
	vis[start] = 1, tim[start] = 0;
	while (!mq.empty()){
		int x = mq.front();
		mq.pop();
		FORR (i, sz(adj[x])) {
			int k = adj[x][i];
			if (vis[k]) continue;
			vis[k] = 1, tim[k] = tim[x] + 1;
			mq.push (k);
		}
	}
	int best = INF;
	FORR (i, sz(goal)) best = min (best, tim[goal[i]]);
	return best;
}

int mhash (int x, int y, int t) {
	return (t*N*M + x*M + y);
}

int change (char c, int t) {
	if (c=='<') return t;
	if (c=='^') return (t+1) % 4;
	if (c=='>') return (t+2) % 4;
	return (t+3) % 4;
}

bool has_laser (int x, int y, int t) {
	//<-
	for (int j = y-1; j >= 0; j--) {
		if (maze[x][j]=='#') break;
		if (maze[x][j]=='.') continue;
		if (change(maze[x][j], t)==2) return true;
	}
	//->
	FOR (j, y+1, M) {
		if (maze[x][j]=='#') break;
		if (maze[x][j]=='.') continue;
		if (change(maze[x][j], t)==0) return true;
	}
	//^
	for (int i = x-1; i >= 0; i--) {
		if (maze[i][y]=='#') break;
		if (maze[i][y]=='.') continue;
		if (change(maze[i][y], t)==3) return true;
	}
	//V
	FOR (i, x+1, N) {
		if (maze[i][y]=='#') break;
		if (maze[i][y]=='.') continue;
		if (change(maze[i][y], t)==1) return true;
	}
	return false;
}

int main (){
	int T;
	cin>>T;
	FORR (c, T) {
		
		FORR (i, MAXN) adj[i].clear();
		goal.clear();

		cin>>N>>M;
		FORR (i, N) cin>>maze[i];
		FORR (i, N){
			FORR (j, M) {
				if (maze[i][j]=='S') start = mhash(i,j,0), maze[i][j]='.';
				if (maze[i][j]=='G') {
					maze[i][j]='.';
					goal.pb (mhash(i, j, 0)); goal.pb (mhash(i, j, 1)); goal.pb (mhash(i, j, 2)); goal.pb (mhash(i, j, 3));
				}
			}
		}
		FORR (t, 4) {
			FORR (i, N){
				FORR (j, M) {
					int nt = (t+1)%4, h = mhash (i, j, t);
					if (h != start && has_laser (i, j, t)) continue;					
					if (i>0 && !has_laser (i-1, j, nt)) adj[h].pb (mhash(i-1, j, nt));
					if (i<N-1 && !has_laser (i+1, j, nt)) adj[h].pb (mhash(i+1, j, nt));
					if (j>0 && !has_laser (i, j-1, nt)) adj[h].pb (mhash(i, j-1, nt));
					if (j<M-1 && !has_laser (i, j+1, nt)) adj[h].pb (mhash(i, j+1, nt));
				}
			}
		}
		int res = bfs ();
		cout << "Case #"<< (c+1) << ": ";
		if (res==INF) {
			cout << "impossible" << endl;
		} else {
			cout << res << endl;
		}
		
	}
		
}

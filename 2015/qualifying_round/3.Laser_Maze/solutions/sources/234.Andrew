from collections import deque

t = int(input())

for case in range(1, t + 1):
	n, m = list(map(int, input().split()))
	
	maze = [input() for i in range(n)]
	
	isShooted = [[[0, 0, 0, 0] for j in range(m)] for i in range(n)]
	
	dirSym = ['v', '<', '^', '>']
	dirs = [(1, 0), (0, -1), (-1, 0), (0, 1)]
	
	def isValid(x, y):
		return (0 <= x and x < n and 
			0 <= y and y < m and
			maze[x][y] in { '.', 'S', 'G' })
		
	for i in range(n):
		for j in range(m):
			if dirSym.count(maze[i][j]):
				d = dirSym.index(maze[i][j])
					
				for t in range(4):
					cd = (d + t) % 4
					
					x, y = i, j
					while True:
						isShooted[x][y][t] = 1
						x += dirs[cd][0]
						y += dirs[cd][1]
						
						if not isValid(x, y):
							break
	
	used = [[[0, 0, 0, 0] for j in range(m)] for i in range(n)]
						
	ans = -1
	q = deque()
	
	for i in range(n):
		for j in range(m):
			if maze[i][j] == 'S':
				q.appendleft((i, j, 0))
				used[i][j][0] = 1
				
	while len(q):
		x, y, d = q.pop()
		
		if maze[x][y] == 'G':
			ans = d
			break
		
		for dx, dy in dirs:
			cx, cy, cd = x + dx, y + dy, (d + 1) % 4
			
			if not isValid(cx, cy):
				continue
				
			if isShooted[cx][cy][cd]:
				continue
				
			if used[cx][cy][cd]:
				continue
				
			q.appendleft((cx, cy, d + 1))
			used[cx][cy][cd] = 1
			
	print("Case #%d: " % case, end='')
	
	if ans == -1:
		print("impossible")
	else:
		print(ans)
	

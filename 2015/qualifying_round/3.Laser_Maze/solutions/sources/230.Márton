#include <iostream>
#include <set>
#include <cmath>

#define mp(x,y) make_pair(x,y)

using namespace std;

int T;

int n,m;

bool ok[100][100][4];

int a[100][100];

int sx,sy;
int gx,gy;

int d[100][100][4];

set<pair<int,pair<int,int> > > sor;

char c;

int main()
{
    cin >> T;
    for(int t=1; t<=T; t++) {
        cin >> n >> m;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                for(int k=0; k<4; k++) d[i][j][k] = -1;
                cin >> c;
                if((c=='S') || (c=='G') || (c=='.')) {
                    for(int k=0; k<4; k++) ok[i][j][k] = 1;
                    a[i][j] = 0;
                    if(c=='S') {
                        sx = i;
                        sy = j;
                    }
                    if(c=='G') {
                        gx = i;
                        gy = j;
                    }
                } else {
                    for(int k=0; k<4; k++) ok[i][j][k] = 0;
                    if(c == '#') a[i][j] = 1;
                    if(c == '>') a[i][j] = 2;
                    if(c == 'v') a[i][j] = 3;
                    if(c == '<') a[i][j] = 4;
                    if(c == '^') a[i][j] = 5;
                }
            }
        }
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(a[i][j] > 1) {
                    for(int k=0; k<4; k++) {
                        if((((a[i][j]-2)+k)%4) == 0) { //right
                            for(int jj = j+1; (jj<m) && (!a[i][jj]); jj++) {
                                ok[i][jj][k] = 0;
                            }
                        } else if((((a[i][j]-2)+k)%4) == 1) { //right
                            for(int ii = i+1; (ii<n) && (!a[ii][j]); ii++) {
                                ok[ii][j][k] = 0;
                            }
                        } else if((((a[i][j]-2)+k)%4) == 2) { //right
                            for(int jj = j-1; (jj>=0) && (!a[i][jj]); jj--) {
                                ok[i][jj][k] = 0;
                            }
                        } else if((((a[i][j]-2)+k)%4) == 3) { //right
                            for(int ii = i-1; (ii>=0) && (!a[ii][j]); ii--) {
                                ok[ii][j][k] = 0;
                            }
                        }
                    }
                }
            }
        }

        sor.clear();
        sor.insert(mp(0,mp(sx,sy)));
        d[sx][sy][0] = 0;
        while(!sor.empty()) {
            int x = sor.begin()->second.first;
            int y = sor.begin()->second.second;
            int dd = sor.begin()->first;
            sor.erase(sor.begin());

            if(((x+1) < n)
              && ((ok[x+1][y][(dd+1)%4]) && (((dd+1) < d[x+1][y][(dd+1)%4]) || (d[x+1][y][(dd+1)%4]<0)))) {
                if(d[x+1][y][(dd+1)%4] >= 0) sor.erase(mp(d[x+1][y][(dd+1)%4],mp(x+1,y)));
                d[x+1][y][(dd+1)%4] = dd+1;
                sor.insert(mp(dd+1,mp(x+1,y)));
            }
            if(((y+1) < m)
              && ((ok[x][y+1][(dd+1)%4]) && (((dd+1) < d[x][y+1][(dd+1)%4]) || (d[x][y+1][(dd+1)%4]<0)))) {
                if(d[x][y+1][(dd+1)%4] >= 0) sor.erase(mp(d[x][y+1][(dd+1)%4],mp(x,y+1)));
                d[x][y+1][(dd+1)%4] = dd+1;
                sor.insert(mp(dd+1,mp(x,y+1)));
            }
            if(((x-1) >= 0)
              && ((ok[x-1][y][(dd+1)%4]) && (((dd+1) < d[x-1][y][(dd+1)%4]) || (d[x-1][y][(dd+1)%4]<0)))) {
                if(d[x-1][y][(dd+1)%4] >= 0) sor.erase(mp(d[x-1][y][(dd+1)%4],mp(x-1,y)));
                d[x-1][y][(dd+1)%4] = dd+1;
                sor.insert(mp(dd+1,mp(x-1,y)));
            }
            if(((y-1) >= 0)
              && ((ok[x][y-1][(dd+1)%4]) && (((dd+1) < d[x][y-1][(dd+1)%4]) || (d[x][y-1][(dd+1)%4]<0)))) {
                if(d[x][y-1][(dd+1)%4] >= 0) sor.erase(mp(d[x][y-1][(dd+1)%4],mp(x,y-1)));
                d[x][y-1][(dd+1)%4] = dd+1;
                sor.insert(mp(dd+1,mp(x,y-1)));
            }
        }

        int mini = -1;
        for(int i=0; i<4; i++) {
            if((d[gx][gy][i] >= 0) && ((d[gx][gy][i] < mini) || (mini < 0))) mini = d[gx][gy][i];
        }
        cout << "Case #" << t << ": ";
        if(mini < 0) {
            cout << "impossible" << endl;
        } else cout << mini << endl;
    }

    return 0;
}

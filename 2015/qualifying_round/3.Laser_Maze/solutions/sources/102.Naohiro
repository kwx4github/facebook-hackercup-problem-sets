using System;
using System.Collections.Generic;
using System.Linq;

class Myon
{
    public Myon() { }
    public static void Main()
    {
        new Myon().run2();
    }

    Scanner cin;
    public void run2()
    {
        cin = new Scanner();
        int T = cin.nextInt();
        for (int i = 0; i < T; i++)
        {
            Console.Write("Case #{0}: ", i + 1);

            run();
        }
    }

    int H, W;

    int[] vy = { -1, 0, 1, 0 };
    int[] vx = { 0, 1, 0, -1 };
    void run()
    {
        H = cin.nextInt();
        W = cin.nextInt();


        int sy = 0, sx = 0;
        int gy = 0, gx = 0;
        string[] board = new string[H];
        int[,] fire = new int[H, W];

        Dictionary<char, int> dic = new Dictionary<char, int>();
        dic['.'] = -1;
        dic['S'] = -1;
        dic['G'] = -1;
        dic['#'] = 10;
        dic['^'] = 0;
        dic['>'] = 1;
        dic['v'] = 2;
        dic['<'] = 3;

        for (int i = 0; i < H; i++)
        {
            board[i] = cin.next();
            for (int j = 0; j < W; j++)
            {
                if (board[i][j] == 'S')
                {
                    sy = i;
                    sx = j;
                }
                else if (board[i][j] == 'G')
                {
                    gy = i;
                    gx = j;
                }
                fire[i, j] = dic[board[i][j]];
            }
        }

        int[,,] check = new int[H, W, 4];

        Queue<int> q = new Queue<int>();
        q.Enqueue(sy * 400 + sx * 4 + 1);
        check[sy, sx, 1] = 1;

        bool first = true;
        while(q.Any())
        {
            int now = q.Dequeue();
            int y = now / 400;
            int x = (now / 4) % 100;
            int k = now % 4;

            bool flag = true;

            if (!first)
            {
                //hit check
                for (int l = 0; l < 4; l++)
                {
                    int ny = y;
                    int nx = x;
                    while (true)
                    {
                        ny += vy[l];
                        nx += vx[l];
                        if (!ok(ny, nx)) break;
                        if (fire[ny, nx] >= 0)
                        {
                            if (fire[ny, nx] == 10) break;
                            if ((fire[ny, nx] + 1 + k) % 4 == l)
                            {
                                flag = false;
                            }
                            break;
                        }
                    }
                }

            }
            else first = false;

            if (!flag) continue;

            if (y == gy && x == gx)
            {
                Console.WriteLine(check[y, x, k] - 1);
                return;
            }

            for (int l = 0; l < 4; l++)
            {
                int ny = y + vy[l];
                int nx = x + vx[l];
                if (!ok(ny, nx)) continue;
                if (fire[ny, nx] >= 0) continue;
                int nk = (k + 1) % 4;
                if (check[ny, nx, nk] != 0) continue;
                check[ny, nx, nk] = check[y, x, k] + 1;
                q.Enqueue(ny * 400 + nx * 4 + nk);
            }
        }
        

        Console.WriteLine("impossible");



    }

    bool ok(int y, int x)
    {
        return y >= 0 && x >= 0 && y < H && x < W;
    }

    //swap
    void swap<T>(ref T a, ref T b)
    {
        T c = a;
        a = b;
        b = c;
    } 










}

class Scanner
{
    string[] s;
    int i;

    char[] cs = new char[] { ' ' };

    public Scanner()
    {
        s = new string[0];
        i = 0;
    }

    public string next()
    {
        if (i < s.Length) return s[i++];
        string st = Console.ReadLine();
        while (st == "") st = Console.ReadLine();
        s = st.Split(cs, StringSplitOptions.RemoveEmptyEntries);
        i = 0;
        return s[i++];
    }

    public int nextInt()
    {
        return int.Parse(next());
    }

    public long nextLong()
    {
        return long.Parse(next());
    }

    public double nextDouble()
    {
        return double.Parse(next());
    }

}

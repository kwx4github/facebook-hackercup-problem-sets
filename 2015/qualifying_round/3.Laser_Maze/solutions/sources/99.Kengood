#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <complex>
/* C++ */
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <ctime>
#include<cassert>

using namespace std;


int row, col;
char graph[128][128];
char vis[128][128][4];

char *dirT= "<^>v";
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};

int sToI(char tur)
{
    for (int i = 0; i < 4; ++i)
        if (tur == dirT[i])
            return i;
    puts("aaaaaaaaaaaaaaaaa");
    return -1;
}

char withInGraph(const pair<int,int>& pos)
{
    return !(pos.first < 0 || pos.first >= row || pos.second < 0 || pos.second >= col);
}

char isMovable(const pair< pair<int,int>, int>& next, const vector< pair<int,int> >& turrets)
{
    const pair<int,int>& pos = next.first;
    if ( !withInGraph(pos) ||
         graph[pos.first][pos.second] != '.' )
        return 0;
    
    for (int i = 0; i < turrets.size(); ++i)
    {
        int nextT = sToI(graph[turrets[i].first][turrets[i].second]) + (next.second&3);
        nextT&=3;
                
       // printf("%c", dirT[nextT]);
       // cout << pos.first << " " << pos.second << endl;
        
        pair<int,int> check = turrets[i];
        check.first += dy[nextT];
        check.second += dx[nextT];
        while (withInGraph(check) && graph[check.first][check.second] == '.')
        {
            //cout << check.first << " " << check.second << endl;
            if (check == pos)
                return 0;
            check.first += dy[nextT];
            check.second += dx[nextT];
            
        }            
    }        
    return 1;
}

int main()
{
    int cases = 0,Case;
    scanf("%d", &Case);
    
    while (Case--)
    {        
        printf("Case #%d: ", ++cases);

        
        scanf("%d %d", &row, &col);
        
        pair<int,int> start,end, tmp;
        vector< pair<int,int> > turrets;
        for (int i = 0; i < row; ++i)
        {
            scanf("%s" , &graph[i]);
            for (int j = 0; j < col; ++j)
            {
                if (graph[i][j] == 'S')
                {
                    start.first = i;
                    start.second = j;
                    graph[i][j] = '.';
                }
                else if (graph[i][j] == 'G')
                {
                    end.first = i;
                    end.second = j;
                    graph[i][j] = '.';
                } 
                else if (graph[i][j] != '#' && graph[i][j] != '.') //<^v>
                {
                    tmp.first = i;
                    tmp.second = j;
                    turrets.push_back(tmp);
                }
                
                for(int k = 0; k < 4; ++k)
                    vis[i][j][k] = 0;
            }
        }
        
        pair< pair<int,int>, int> cur,next;
        cur.first = start;
        cur.second = 0;
        queue< pair< pair<int,int>, int> > q;
        q.push(cur);
        while (!q.empty())
        {
            cur = q.front(); q.pop();
            if (cur.first == end)
            {
                printf("%d\n" , cur.second);
                goto nextCase;
            }
            if ( vis[cur.first.first][cur.first.second][cur.second&3] )
                continue;
            vis[cur.first.first][cur.first.second][cur.second&3] = 1;
            if (graph[cur.first.first][cur.first.second]=='.')
            {
                for(int k = 0; k < 4; ++k)
                {
                    next = cur;
                    next.first.first += dy[k];
                    next.first.second += dx[k];
                    ++next.second;
                    if (isMovable(next,turrets))
                        q.push(next);                    
                }                
            }            
        }                
        puts("impossible");
        
        nextCase:;
    }

    return 0;
}

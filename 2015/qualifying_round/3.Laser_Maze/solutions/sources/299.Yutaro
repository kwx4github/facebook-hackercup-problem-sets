//include
//------------------------------------------
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <climits>
#include <queue>

using namespace std;

//typedef
//------------------------------------------
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long LL;

//container util
//------------------------------------------
#define ALL(a)  (a).begin(),(a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define PB push_back
#define MP make_pair
#define SZ(a) int((a).size())
#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define SORT(c) sort((c).begin(),(c).end())

//repetition
//------------------------------------------
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n)  FOR(i,0,n)

//constant
//--------------------------------------------
const double EPS = 1e-10;
const double PI  = acos(-1.0);

int dx[4] = {-1,0,1,0};
int dy[4] = {0,-1,0,1};
int main(){
  int T; cin >> T;
  FOR(t,1,T+1){
	int H, W; cin >> H >> W;
	vector<string> vs(H, string(W, ' '));
	vector< pair<PII,int> > laser;
	int sx, sy, gx, gy;
	REP(y,H) REP(x,W){
	  cin >> vs[y][x];
	  switch(vs[y][x]){
	  case 'S':
		vs[y][x] = '.';
		sy = y, sx = x;
		break;
	  case 'G':
		vs[y][x] = '.';
		gy = y, gx = x;
		break;
	  case '<':
		vs[y][x] = '#';
		laser.PB(MP(MP(y,x),0));
		break;
	  case '^':
		vs[y][x] = '#';
		laser.PB(MP(MP(y,x),1));
		break;
	  case '>':
		vs[y][x] = '#';
		laser.PB(MP(MP(y,x),2));
		break;
	  case 'v':
		vs[y][x] = '#';
		laser.PB(MP(MP(y,x),3));
		break;
	  }	  
	}

	bool step[2][100][100];
	bool state[4][100][100];
	int crt = 0, nxt = 1;
	fill((bool*)step, (bool*)step+2*100*100, false);
	fill((bool*)state, (bool*)state+4*100*100, false);
	step[crt][sy][sx] = true;
	state[0][sy][sx] = true;

	bool update = true;
	int ans = -1, cnt = 0;
	while(update){
	  update = false;
	  ++cnt;
	  fill((bool*)step[nxt], (bool*)step[nxt]+100*100, false);
	  REP(y,H) REP(x,W){
		if(!step[crt][y][x]) continue;
		REP(i,4){
		  int tx = x + dx[i], ty = y + dy[i];
		  if(0 <= tx && tx < W && 0 <= ty && ty < H && vs[ty][tx] == '.'
			 && !state[cnt%4][ty][tx])
			step[nxt][ty][tx] = true;
		}
	  }
	  REP(i,SZ(laser)){
		int idx = (laser[i].second + cnt) % 4;
		int ty = laser[i].first.first;
		int tx = laser[i].first.second;
		ty += dy[idx];
		tx += dx[idx];
		while(0 <= ty && ty < H && 0 <= tx && tx < W
			  && vs[ty][tx] == '.'){
		  step[nxt][ty][tx] = false;
		  ty += dy[idx];
		  tx += dx[idx];
		}
	  }

	  REP(y,H) REP(x,W){
		if(!state[cnt%4][y][x] && step[nxt][y][x]){
		  state[cnt%4][y][x] = true;
		  update = true;
		}
	  }

	  swap(crt, nxt);
	  if(step[crt][gy][gx]){
		ans = cnt;
		break;
	  }
	}

	if(ans < 0)
	  cout << "Case #" << t << ": " << "impossible" << endl;
	else
	  cout << "Case #" << t << ": " << ans << endl;
  }
  
  return 0;
}

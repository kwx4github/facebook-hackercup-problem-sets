#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <string>
#include <vector>
#include <cstdio>
#include <sstream>
#include <complex>
#include <cstring>
#include <numeric>
#include <iostream>
#include <algorithm>
using namespace std;

typedef long long       li;
typedef vector<li>      vi;
typedef complex<double> pt;
typedef pair<pt, pt>    line;
typedef pair<li, li>    pi;
typedef vector<string>  vs;

#define rep(i,to)       for(li i=0;i<((li)to);i++)
#define foreach(it,set) for(__typeof((set).begin()) it=(set).begin();it!=(set).end();it++)
#define all(v)          v.begin(), v.end()

inline li bit(li n){ return 1LL<<n; }
template <class T> ostream& operator<<(ostream& os, vector<T> x){
    foreach(it, x) os << *it << ' ';
    return os;
}
template <class T> inline void dbg(T x){
    // return;
    cerr << x << endl; 
}

struct state {
    int x, y, t, cost;
};

void solve () {
    int n, m; cin >> n >> m;
    vector<string> field(n);
    rep(i, n) {
        cin >> field[i];
    }
    
    const int dx[4] = {-1, 0, 1, 0};
    const int dy[4] = {0, 1, 0, -1};
    const string turrets = "^>v<#";

    int ext_field[105][105][4] = {};
    rep(i, n + 2) rep(k, 4) {
        ext_field[i][0][k] = 1;
        ext_field[i][m + 1][k] = 1;
    }
    rep(j, m + 2) rep(k, 4) {
        ext_field[0][j][k] = 1;
        ext_field[n + 1][j][k] = 1;
    }
    rep(i, n) rep(j, m) rep(k, 5) {
        if (field[i][j] == turrets[k]) {
            rep(d, 4) {
                ext_field[i+1][j+1][d] = 1;
            }
        }
    }

    int sx, sy, gx, gy;
    
    rep(i, n) rep(j, m) {
        switch (field[i][j]) {
        case '#':
            break;
        case 'S':
            sx = i + 1;
            sy = j + 1;
            break;
        case 'G':
            gx = i + 1;
            gy = j + 1;
            break;
        case '.':
            break;
        default:
            rep(d, 4) {
                if (field[i][j] == turrets[d]) {
                    rep(tm, 4) {
                        const int td = (d + tm) % 4;
                        int px = i + 1 + dx[td], py = j + 1 + dy[td];
                        while (ext_field[px][py][tm] != 1) {
                            ext_field[px][py][tm] = 2;
                            px += dx[td];
                            py += dy[td];
                        }
                    }
                }
            }
            break;
        }
    }

    int min_cost[105][105][4];
    const int inf = 1e9;
    rep(i, 105) rep(j, 105) rep(k, 4) {
        min_cost[i][j][k] = inf;
    }
    queue<state> q;
    q.push((state){sx, sy, 0, 0});
    min_cost[sx][sy][0] = 0;
    while (not q.empty()) {
        state pos = q.front(); q.pop();
        rep(d, 4) {
            state nstate = {pos.x + dx[d], pos.y + dy[d], (pos.t + 1) % 4, pos.cost + 1};
            if (ext_field[nstate.x][nstate.y][nstate.t]) continue;
            if (nstate.cost < min_cost[nstate.x][nstate.y][nstate.t]) {
                min_cost[nstate.x][nstate.y][nstate.t] = nstate.cost;
                q.push(nstate);
            }
        }
    }
    int ans = *min_element(min_cost[gx][gy], min_cost[gx][gy] + 4);
    if (ans == inf) {
        cout << "impossible" << endl;
    } else {
        cout << ans << endl;
    }
    return;
}

int main() {
    int n; cin >> n;
    rep(i, n) {
        cout << "Case #" << i + 1 << ": ";
        solve();
    }
    return 0;
}

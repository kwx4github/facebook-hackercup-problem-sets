#include <bits/stdc++.h>
#define _ printf("\n");
#define sc1(a) scanf("%d", &a)
#define sc2(a,b) scanf("%d %d", &a, &b)
#define sc3(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define sc4(a,b,c,d) scanf("%d %d %d %d", &a, &b, &c, &d)
#define iz(b) if(b==0) { break; }
#define pb(a) push_back(a)
#define inf 0x3f3f3f3f
#define linf 0x3f3f3f3f3f3f3f3f
#define mst(a, b) memset(a, b, sizeof a)
#define fr(i,a,b) for(int i=(a); i < (b); i++)
#define fe(i,a,b) for(int i=(a); i <= (b); i++)
#define mp(a,b) make_pair(a,b)
#define st first
#define pv(a, i) for(int i =0 ; i < (a.size()+0 ); i++ ) {printf("%d ",a[i]); if(i==a.size() - 1 )_  }
#define pvp(a, i) for(int i =0 ; i <(a.size()+0 ); i++ ) {printf("%d %d ~ ",a[i].st, a[i].nd); if(i==a.size() - 1 )_  }
#define nd second
#define EPS 1e-7
#define PI acos(-1)
using namespace std;
typedef vector<int> vi;
typedef long long int ll;
typedef pair<int,int> ii; 
typedef vector<ii> vii;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef set<ii> sii;
typedef set<int> si;
typedef pair<char, int> ci;


char maze[120][120];
int dist[120][120][5];
int des[4][2] = { {1,0},{-1,0},{0,1},{0,-1} };
int ix, iy, fx, fy, n, m;
bool val(int x, int y){ return !(x < 0 || x >= n || y < 0 || y >= m); }
int get(int ch){ 
	if(ch == '<' ) return 0;
	if(ch == '>' ) return 2;
	if(ch == '^' ) return 1;
	if(ch == 'v') return 3;
}
struct tupla {
	int a, b, c, d;
	tupla(){}
	tupla(int _a, int _b, int _c ){ a=_a, b=_b, c=_c;}
	tupla(int _a, int _b, int _c, int _d){ a=_a, b=_b, c=_c; d=_d;}	
	bool operator < (const tupla &t) const{
		return d > t.d;
	}
	
};
vector<tupla> lol;

bool can(int x, int y, int cnt){
	int k;
	fr(i,0, int(lol.size()) ){
		 k = get( lol[i].c );
		 int aux = k;
		 k = (k+cnt)%4;		 
		 if(k%2 == 0 ){
		 	if(k==0) if( x == lol[i].a && y < lol[i].b) return 0;
		 	if(k==2) if( x == lol[i].a && y > lol[i].b) return 0;
		 }
		 else {
		 	if(k==1) if( y == lol[i].b && x < lol[i].a) return 0;
		 	if(k==3) if( y == lol[i].b && x > lol[i].a) return 0;
		 }
	}
	return 1;
}

bool isLazer(int i, int j){
	return maze[i][j]=='v' || maze[i][j]=='^' || maze[i][j]=='<' || maze[i][j]=='>';
}


int bfs(){
	queue<tupla> q;
	tupla t;
	mst(dist, 0);
	q.push(tupla(ix, iy, 0) );	
	int x, y, dx, dy, k, d;
	int res = inf;
	while(!q.empty()){
		t = q.front(); q.pop();
		x = t.a, y = t.b, k = t.c;
		d = dist[x][y][k];
		if(x== fx && y== fy ) {
			res = min(res, d);
		}
		//printf("x: %d y :%d k :%d \n", x, y, k);
		fr(i,0,4){
			dx = x + des[i][0], dy = y + des[i][1];
			if(!val(dx,dy))continue;
			if(maze[dx][dy] == '#' || isLazer(dx,dy) ) continue;
			if(dist[dx][dy][(k+1)%4]) continue;
			if(!can(dx, dy, (k+1)%4 )){
				//printf("not can!\n");
			 	continue;
			 }
			dist[dx][dy][(k+1)%4] = d+1;
			q.push(tupla(dx,dy, (k+1)%4));
		}
	}
	return res;
}

int main (int argc, char const* argv[]) {
	int caso; sc1(caso);
	int res;
	fe(t,1,caso){
		sc2(n,m);
		lol.clear();
		fr(i,0,n){
			scanf("%s", maze[i]);
			fr(j,0,m){
				if(maze[i][j] == 'S' ){
					ix = i; iy = j;
				}
				else if(maze[i][j]=='G'){
					fx = i; fy = j;
				}
				else if( isLazer(i,j) ){
					lol.pb(tupla(i,j,maze[i][j]));
				}
			}
		}
		res = bfs();
		if(res < 0 || res >= inf ) printf("Case #%d: impossible\n",t);
		else printf("Case #%d: %d\n", t, res);
	}
	
	return 0;
}


























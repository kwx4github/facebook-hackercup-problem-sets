#include <iostream>
#include <fstream>
#include <string>
#include <cstdio>
#include <memory.h>
#include <vector>
#include <sstream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <complex>

using namespace std;

#define REP(a,b) for (int a=0; a<(int)(b); ++a)
#define FOR(a,b,c) for (int a=(b); a<(int)(c); ++a)

const int dr[] = { 1, 0, -1, 0 };
const int dc[] = { 0, -1, 0, 1 };

int nr, nc, r, c;
char m[128][128];
int d[128][128][4];

int main() {
	int t;

	cin >> t;
	REP(tc, t) {
		cin >> nr >> nc;
		REP(i, nr) cin >> m[i];

		REP(i, nr) REP(j, nc) REP(k, 4) d[i][j][k] = 1 << 30;

		int startr, startc, endr, endc;
		REP(i, nr) REP(j, nc) {
			if (m[i][j] == 'S') { startr = i; startc = j; }
			else if (m[i][j] == 'G') { endr = i; endc = j; }
			else if (m[i][j] == '#') { REP(k, 4) d[i][j][k] = -1; }
			else if (m[i][j] == '.') { }
			else {
				int dir = -1;
				if (m[i][j] == 'v') dir = 0;
				else if (m[i][j] == '<') dir = 1;
				else if (m[i][j] == '^') dir = 2;
				else if (m[i][j] == '>') dir = 3;
				REP(k, 4) d[i][j][k] = -1;
				REP(k, 4) {
					r = i + dr[dir]; c = j + dc[dir];
					while (r >= 0 && c >= 0 && r < nr && c < nc && (m[r][c] == '.' || m[r][c] == 'S' || m[r][c] == 'G')) { 
						d[r][c][k] = -1; 
						r = r + dr[dir]; c = c + dc[dir];
					}
					dir++;
					if (dir >= 4) dir -= 4;
				}
			}
		}

		d[startr][startc][0] = 0;
		queue <pair<int, pair<int, int> > > q;
		int rr, cc, mmod, mod, cur;
		q.push({ startr, { startc, 0 } });
		while (!q.empty()) {
			pair<int, pair<int, int> > p = q.front(); q.pop();
			r = p.first; c = p.second.first; mod = p.second.second; cur = d[r][c][mod];
			REP(k, 4) {
				rr = r + dr[k]; cc = c + dc[k]; mmod = (mod + 1) % 4;
				if (rr < 0 || rr >= nr || cc < 0 || cc >= nc || d[rr][cc][mmod] <= cur+1) continue;
				d[rr][cc][mmod] = cur + 1;
				q.push({ rr, { cc, mmod } });
			}
		}

		int res = 1 << 30;
		REP(k, 4) if (d[endr][endc][k] >= 0 && d[endr][endc][k] < res) res = d[endr][endc][k];

		cout << "Case #" << tc + 1 << ": ";
		if (res == 1 << 30) cout << "impossible" << endl;
		else cout << res << endl;
	}

	return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <utility>
#define INF 2147483647
using namespace std;
struct MOV{
	int x,y;
	int t;
	int n;
};
MOV mov(int x,int y,int t, int n){
	MOV tmp;
	tmp.x=x;
	tmp.y=y;
	tmp.t=t;
	tmp.n=n;
	return tmp;
}
bool filled(char c){
	return (c=='#'||c=='^'||c=='>'||c=='v'||c=='<');
}
int main(){
	int t;
	cin>>t;
	for(int caso=1;caso<=t;++caso){
		int y,x;
		cin>>y>>x;
		int reach[100][100][4];
		int obs[100][100][4];
		for(int i=0;i<100;++i)
			for(int j=0;j<100;++j){
				reach[i][j][0]=reach[i][j][1]=reach[i][j][2]=reach[i][j][3]=INF;
				obs [i][j][0]=obs [i][j][1]=obs [i][j][2]=obs [i][j][3]=0;
			}
		vector<string> mat(y);
		for(int i=0;i<y;++i)
			cin>>mat[i];
		int sx,sy;
		int gx,gy;
		for(int i=0;i<y;++i)
			for(int j=0;j<x;++j){
				if(mat[i][j]=='.') continue;
				if(mat[i][j]=='#')
					obs[i][j][0]=obs[i][j][1]=obs[i][j][2]=obs[i][j][3]=1;
				int turno=-1;
				if(mat[i][j]=='^') turno=0;
				if(mat[i][j]=='>') turno=3;
				if(mat[i][j]=='v') turno=2;
				if(mat[i][j]=='<') turno=1;
				if(turno>=0){
					obs[i][j][0]=obs[i][j][1]=obs[i][j][2]=obs[i][j][3]=1;
					for(int ly=i-1;ly>=0;--ly){
						if(filled(mat[ly][j])) break;
						obs[ly][j][(turno  )%4]=1;
					}
					for(int lx=j+1;lx<x;++lx){
						if(filled(mat[i][lx])) break;
						obs[i][lx][(turno+1)%4]=1;
					}
					for(int ly=i+1;ly<y;++ly){
						if(filled(mat[ly][j])) break;
						obs[ly][j][(turno+2)%4]=1;
					}
					for(int lx=j-1;lx>=0;--lx){
						if(filled(mat[i][lx])) break;
						obs[i][lx][(turno+3)%4]=1;
					}
				}
				if(mat[i][j]=='S'){
					sy=i;
					sx=j;
				}
				if(mat[i][j]=='G'){
					gy=i;
					gx=j;
				}
			}
		vector<MOV> queue;
		vector<MOV> queue2;
		queue.push_back(mov(sx,sy,0,0));
		reach[sy][sx][0]=0;
		while(queue.size()){
			queue2.clear();
			for(int i=0;i<queue.size();++i){
				int xi=queue[i].x;
				int yi=queue[i].y;
				int nti=(queue[i].t+1)%4;
				int nni=queue[i].n+1;
				if(yi>0  &&!obs[yi-1][xi][nti]&&reach[yi-1][xi][nti]>nni){reach[yi-1][xi][nti]=nni;queue2.push_back(mov(xi,yi-1,nti,nni));}
				if(yi<y-1&&!obs[yi+1][xi][nti]&&reach[yi+1][xi][nti]>nni){reach[yi+1][xi][nti]=nni;queue2.push_back(mov(xi,yi+1,nti,nni));}
				if(xi>0  &&!obs[yi][xi-1][nti]&&reach[yi][xi-1][nti]>nni){reach[yi][xi-1][nti]=nni;queue2.push_back(mov(xi-1,yi,nti,nni));}
				if(xi<x-1&&!obs[yi][xi+1][nti]&&reach[yi][xi+1][nti]>nni){reach[yi][xi+1][nti]=nni;queue2.push_back(mov(xi+1,yi,nti,nni));}
			}
			queue=queue2;
		}
		int min=INF;
		for(int k=0;k<4;++k)
			if(min>reach[gy][gx][k])  min=reach[gy][gx][k];
		cout<<"Case #"<<caso<<": ";
		if(min!=INF)cout<<min<<endl;
		else cout<<"impossible"<<endl;
	}
}
#include <fstream>
#include <queue>
using namespace std;




ifstream fin("hc.in");
ofstream fout("hc.out");

int n, m;
int a[102][102][4];

struct duo
{
	int x, y;
};
struct trio
{
	int x, y, st;
};
struct canon
{
	int i, j;
	char c;
};


duo s, g;
queue<trio> q;
queue<canon> q2;

int nst(int x)
{
	x++;
	return x % 4;
}
void upd(char c, int i, int j)
{
	if (c == '#')
	{
		a[i][j][0] = -5;
		a[i][j][1] = -5;
		a[i][j][2] = -5;
		a[i][j][3] = -5;
	}
	canon aux2;
	if (c == '^')
	{
		a[i][j][0] = -5;
		a[i][j][1] = -5;
		a[i][j][2] = -5;
		a[i][j][3] = -5;
		aux2.i = i;
		aux2.j = j;
		aux2.c = c;
		q2.push(aux2);
			
	}
	if (c == '>')
	{
		a[i][j][0] = -5;
		a[i][j][1] = -5;
		a[i][j][2] = -5;
		a[i][j][3] = -5;
		aux2.i = i;
		aux2.j = j;
		aux2.c = c;
		q2.push(aux2);
		
	}
	if (c == 'v')
	{
		a[i][j][0] = -5;
		a[i][j][1] = -5;
		a[i][j][2] = -5;
		a[i][j][3] = -5;
		aux2.i = i;
		aux2.j = j;
		aux2.c = c;
		q2.push(aux2);
		
	}
	if (c == '<')
	{
		a[i][j][0] = -5;
		a[i][j][1] = -5;
		a[i][j][2] = -5;
		a[i][j][3] = -5;
		aux2.i = i;
		aux2.j = j;
		aux2.c = c;
		q2.push(aux2);
		
	}
	if (c == 'S')
	{
		s.x = i;
		s.y = j;
	}
	if (c == 'G')
	{
		g.x = i;
		g.y = j;
	}
	if (c == '.')
	{
	}
}

void golire()
{
	int i,j;
	char c;
	while (!q2.empty())
	{
		i = q2.front().i;
		j = q2.front().j;
		c = q2.front().c;
		q2.pop();
		if (c == '^')
		{
			for (int h = i - 1; h >= 1; h--)
			{
				if (a[h][j][0] == -5)
					break;
				else
				{
					a[h][j][0] = -6;
				}
			}
			for (int h = j + 1; h <= m; h++)
			{
				if (a[i][h][1] == -5)
					break;
				else
				{
					a[i][h][1] = -6;
				}
			}
			for (int h = i + 1; h <= n; h++)
			{
				if (a[h][j][2] == -5)
					break;
				else
				{
					a[h][j][2] = -6;
				}
			}
			for (int h = j - 1; h >= 1; h--)
			{
				if (a[i][h][3] == -5)
					break;
				else
				{
					a[i][h][3] = -6;
				}
			}
		}
		if (c == '>')
		{
			for (int h = i - 1; h >= 1; h--)
			{
				if (a[h][j][3] == -5)
					break;
				else
				{
					a[h][j][3] = -6;
				}
			}
			for (int h = j + 1; h <= m; h++)
			{
				if (a[i][h][0] == -5)
					break;
				else
				{
					a[i][h][0] = -6;
				}
			}
			for (int h = i + 1; h <= n; h++)
			{
				if (a[h][j][1] == -5)
					break;
				else
				{
					a[h][j][1] = -6;
				}
			}
			for (int h = j - 1; h >= 1; h--)
			{
				if (a[i][h][2] == -5)
					break;
				else
				{
					a[i][h][2] = -6;
				}
			}
		}
		if (c == 'v')
		{
			for (int h = i - 1; h >= 1; h--)
			{
				if (a[h][j][2] == -5)
					break;
				else
				{
					a[h][j][2] = -6;
				}
			}
			for (int h = j + 1; h <= m; h++)
			{
				if (a[i][h][3] == -5)
					break;
				else
				{
					a[i][h][3] = -6;
				}
			}
			for (int h = i + 1; h <= n; h++)
			{
				if (a[h][j][0] == -5)
					break;
				else
				{
					a[h][j][0] = -6;
				}
			}
			for (int h = j - 1; h >= 1; h--)
			{
				if (a[i][h][1] == -5)
					break;
				else
				{
					a[i][h][1] = -6;
				}
			}
		}
		if (c == '<')
		{
			for (int h = i - 1; h >= 1; h--)
			{
				if (a[h][j][1] == -5)
					break;
				else
				{
					a[h][j][1] = -6;
				}
			}
			for (int h = j + 1; h <= m; h++)
			{
				if (a[i][h][2] == -5)
					break;
				else
				{
					a[i][h][2] = -6;
				}
			}
			for (int h = i + 1; h <= n; h++)
			{
				if (a[h][j][3] == -5)
					break;
				else
				{
					a[h][j][3] = -6;
				}
			}
			for (int h = j - 1; h >= 1; h--)
			{
				if (a[i][h][0] == -5)
					break;
				else
				{
					a[i][h][0] = -6;
				}
			}
		}
	}
}


bool bfs(duo s)
{
	while (!q.empty())
		q.pop();
	int st = 0;
	trio aux;
	aux.x = s.x;
	aux.y = s.y;
	aux.st = 0;
	q.push(aux);
	duo p;
	while (!q.empty())
	{
		p.y = q.front().y;
		p.x = q.front().x;
		st = q.front().st;
		q.pop();
		if (p.y + 1 <= m && a[p.x][p.y + 1][nst(st)] == 0)
		{
			a[p.x][p.y + 1][nst(st)] =a[p.x][p.y][st]+1;
			if (a[p.x][p.y][st]==-6)
				a[p.x][p.y + 1][nst(st)] = 1;
			aux.x = p.x;
			aux.y = p.y + 1;
			aux.st = nst(st);
			q.push(aux);
		}
		if (p.y - 1 >= 1 && a[p.x][p.y - 1][nst(st)] == 0)
		{
			a[p.x][p.y - 1][nst(st)] = a[p.x][p.y][st] + 1;
			if (a[p.x][p.y][st]==-6)
				a[p.x][p.y - 1][nst(st)] = 1;
			aux.x = p.x;
			aux.y = p.y - 1;
			aux.st = nst(st);
			q.push(aux);
		}
		if (p.x - 1 >= 1 && a[p.x - 1][p.y][nst(st)] == 0)
		{
			a[p.x - 1][p.y][nst(st)] = a[p.x][p.y][st] + 1;
			if (a[p.x][p.y][st]==-6)
				a[p.x - 1][p.y][nst(st)];
			aux.x = p.x - 1;
			aux.y = p.y;
			aux.st = nst(st);
			q.push(aux);
		}
		if (p.x + 1 <= n && a[p.x + 1][p.y][nst(st)] == 0)
		{
			a[p.x+1][p.y][nst(st)] = a[p.x][p.y][st] + 1;
			if (a[p.x][p.y][st]==-6)
				a[p.x + 1][p.y][nst(st)];
			aux.x = p.x + 1;
			aux.y = p.y;
			aux.st = nst(st);
			q.push(aux);
		}
		if (p.x == g.x&&p.y==g.y)
		{
			return 1;
		}
	}
	return 0;
}

int main()
{
	int t;
	fin >> t;
	
	char c;
	for (int k = 1; k <= t; k++)
	{
		fin >> n >> m;
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1;j<= m; j++)
			{
				a[i][j][0] = 0;
				a[i][j][1] = 0;
				a[i][j][2] = 0;
				a[i][j][3] = 0;
			}
		}
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= m; j++)
			{
				fin >> c;
				upd(c,i,j);		
			}
			
		}
		golire();
		fout << "Case #" << k << ": ";
		if (bfs(s))
		{
			int min = 999999;
			if (a[g.x][g.y][0] < min&&a[g.x][g.y][0]>0)
				min = a[g.x][g.y][0];
			if (a[g.x][g.y][1] < min&&a[g.x][g.y][1]>0)
				min = a[g.x][g.y][1];
			if (a[g.x][g.y][2] < min&&a[g.x][g.y][2]>0)
				min = a[g.x][g.y][2];
			if (a[g.x][g.y][3] < min&&a[g.x][g.y][3]>0)
				min = a[g.x][g.y][3];
			fout << min;
		}
		else
			fout << "impossible";
		fout << '\n';
	}

}
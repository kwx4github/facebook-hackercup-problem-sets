#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <cstring>
#include <math.h>
#include <algorithm>
#include <complex>
#include <ctime>
#include <iomanip>
#include <cassert>
#include <sstream>
#include <iterator>

using namespace std;

#define file "file"
#define mp make_pair
#define pb push_back
#define xx real()
#define yy imag()
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef complex<double> point;

const int MAXN = 2e2 + 5;
const int INF = 1e7;
const int LIM = 4;

char g[MAXN][MAXN];
int used[MAXN][MAXN][LIM];
int dx[4] = {-1,0,0,1};
int dy[4] = {0,-1,1,0};
int n,m;
int dp[MAXN][MAXN][LIM];
char dc[4] = {'<','^','>','v'};

bool isGood(char a){
    return (a == '.' || a == 'S' || a == 'G');
}

bool isAtacked(int x,int y,int t){
    bool fl;
    int id = 0;
    for(int i = 0;i < n;i++){
        for(int j = 0;j < m;j++){
            fl = 0, id = -1;
            for(int k = 0;k < 4;k++){
                if(dc[k] == g[i][j]){
                    id = k;
                    fl = 1;
                    break;
                }
            }
            if(fl){
                id = (id + t) % 4;
                if(id == 0){
                    if(i == x && y < j) return true;
                }
                else if(id == 1){
                    if(y == j && x < i) return true;
                }
                else if(id == 2){
                    if(x == i && y > j) return true;
                }
                else{
                    if(y == j && x > i) return true;
                }
            }
        }
    }
    //cout << "Not attacked " << x << " " << y << " " << t << endl;
    return false;
}

void dfs(int x,int y,int t){
    //cout << x << " " << y << " " << t << endl;
    queue<int> qx,qy,qt;
    qx.push(x); qy.push(y); qt.push(t);
    while(!qx.empty()){
        x = qx.front();qx.pop();
        y = qy.front();qy.pop();
        t = qt.front();qt.pop();
        if(t){
            used[x][y][t % 4] = 1;
        }
        for(int i = 0;i < 4;i++){
            int xn = x + dx[i];
            int yn = y + dy[i];
            if(xn >= 0 && xn < n && yn >= 0 && yn < m && isGood(g[xn][yn])){
                if(!used[xn][yn][(t + 1) % 4]){
                    if(!isAtacked(xn,yn,t + 1)){
                        used[xn][yn][(t + 1) % 4] = 1;
                        dp[xn][yn][(t + 1) % 4] = min(dp[xn][yn][(t + 1) % 4],dp[x][y][t % 4] + 1);
                        qx.push(xn); qy.push(yn); qt.push(t + 1);
                    }
                }
            }
        }
    }
}

void solve(){
    scanf("%d%d",&n,&m);
    char cc;
    scanf("%c",&cc);
    for(int i = 0;i < n;i++){
        scanf("%s",g[i]);
        //cerr << g[i] << endl;
    }
    for(int i = 0;i < n;i++){
        for(int j = 0;j < m;j++){
            for(int k = 0;k < LIM;k++){
                used[i][j][k] = 0;
                dp[i][j][k] = INF;
            }
        }
    }
    int xs,ys,xf,yf;
    for(int i = 0;i < n;i++){
        for(int j = 0;j < m;j++){
            if(g[i][j] == 'S'){
                xs = i,ys = j;
            }
            if(g[i][j] == 'G'){
                xf = i,yf = j;
            }
        }
    }
    dp[xs][ys][0] = 0;
    dfs(xs,ys,0);
    int ans = INF;
    for(int i = 0;i < LIM;i++) ans = min(ans,dp[xf][yf][i]);
    if(ans == INF) printf("impossible\n");
    else printf("%d\n",ans);
}

int main()
{
	#ifndef ONLINE_JUDGE
    assert(freopen("input.txt","r",stdin));
    assert(freopen("output.txt","w",stdout));
    #else
    //assert(freopen(file".in","r",stdin)); assert(freopen(file".out","w",stdout));
    #endif
	int t = 1;
	scanf("%d",&t);
	int c = 1;
	while(t--){
        printf("Case #%d: ",c++);
		solve();
	}
	return 0;
}

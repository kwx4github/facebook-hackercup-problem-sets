"""
Facebook Hacker Cup 2015 Qualification Round Problem C

Author  : chaotic_iak
Language: Python 3.4.2
"""

################################################### SOLUTION

def solve():
    m, n = read()
    grid = []
    for i in range(m): grid.append(list(read(0)))
    positions = [[[0]*n for j in range(m)] for i in range(4)]
    start = (0, -1, -1)
    goal = (-1, -1)
    for i in range(m):
        for j in range(n):
            if grid[i][j] == "S":
                start = (0, i, j)
                grid[i][j] = "."
            if grid[i][j] == "G":
                goal = (i, j)
                grid[i][j] = "."
            if grid[i][j] == "#":
                for k in range(4): positions[k][i][j] = 10
            if grid[i][j] == "^":
                positions[0][i][j] = 11
                positions[1][i][j] = 12
                positions[2][i][j] = 13
                positions[3][i][j] = 14
            if grid[i][j] == ">":
                positions[0][i][j] = 12
                positions[1][i][j] = 13
                positions[2][i][j] = 14
                positions[3][i][j] = 11
            if grid[i][j] == "v":
                positions[0][i][j] = 13
                positions[1][i][j] = 14
                positions[2][i][j] = 11
                positions[3][i][j] = 12
            if grid[i][j] == "<":
                positions[0][i][j] = 14
                positions[1][i][j] = 11
                positions[2][i][j] = 12
                positions[3][i][j] = 13
    for k in range(4):
        for i in range(m):
            for j in range(n):
                if positions[k][i][j] == 11:
                    x = i-1
                    while x >= 0 and positions[k][x][j] < 2:
                        positions[k][x][j] = 1
                        x -= 1
                if positions[k][i][j] == 12:
                    x = j+1
                    while x < n and positions[k][i][x] < 2:
                        positions[k][i][x] = 1
                        x += 1
                if positions[k][i][j] == 13:
                    x = i+1
                    while x < m and positions[k][x][j] < 2:
                        positions[k][x][j] = 1
                        x += 1
                if positions[k][i][j] == 14:
                    x = j-1
                    while x >= 0 and positions[k][i][x] < 2:
                        positions[k][i][x] = 1
                        x -= 1

    queue = [start]
    pos = 0
    while pos < len(queue):
        step, r, c = queue[pos]
        if goal == (r, c):
            write(str(step))
            return
        nx = (step+1) % 4
        if r-1 >= 0 and positions[nx][r-1][c] == 0:
            queue.append((step+1, r-1, c))
            positions[nx][r-1][c] = 2
        if c+1 < n and positions[nx][r][c+1] == 0:
            queue.append((step+1, r, c+1))
            positions[nx][r][c+1] = 2
        if r+1 < m and positions[nx][r+1][c] == 0:
            queue.append((step+1, r+1, c))
            positions[nx][r+1][c] = 2
        if c-1 >= 0 and positions[nx][r][c-1] == 0:
            queue.append((step+1, r, c-1))
            positions[nx][r][c-1] = 2
        pos += 1
    write("impossible")

#################################################### HELPERS

class IOHandlerObject(object):
    source = "c.in"
    target = "c.out"
    sfile = None
    tfile = None

    def __init__(self):
        self.sfile = open(self.source, "r")
        self.sfile.seek(0)
        self.tfile = open(self.target, "w+")

    def readInput(self, mode=2):
        # 0: String
        # 1: List of strings
        # 2: List of integers
        inputs = self.sfile.readline().strip()
        if mode == 0: return inputs
        if mode == 1: return inputs.split()
        if mode == 2: return list(map(int, inputs.split()))

    def writeOutput(self, s="\n"):
        if s is None: s = ""
        if isinstance(s, list): s = " ".join(map(str, s))
        s = str(s)
        self.tfile.write(s)
        print(s, end="")

IOHandler = IOHandlerObject()
read = IOHandler.readInput
write = IOHandler.writeOutput

total_cases, = read()
for case_number in range(1, total_cases+1):
    write("Case #" + str(case_number) + ": ")
    solve()
    write("\n")

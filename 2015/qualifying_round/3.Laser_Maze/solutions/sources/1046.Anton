import java.util.*;
import java.io.*;

public class A {
    FastScanner in;
    PrintWriter out;

    int[] di = {0, -1, 0, 1};
    int[] dj = {-1, 0, 1, 0};
    char[] dirs = {'<', '^', '>', 'v'};

    class State {
        int i, j, time;

        public State(int i, int j, int time) {
            this.i = i;
            this.j = j;
            this.time = time;
        }
    }

    public void solve() throws IOException {
        int n = in.nextInt(), m = in.nextInt();
        char[][] c = new char[n][];
        for (int i = 0; i < n; i++)
            c[i] = in.next().toCharArray();

        int[][][] d = new int[4][n][m];
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < n; j++)
                Arrays.fill(d[i][j], Integer.MAX_VALUE);
        boolean[][][] badPos = new boolean[4][n][m];

        int si = 0, sj = 0, fi = 0, fj = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (c[i][j] == 'S') {
                    c[i][j] = '.';
                    si = i;
                    sj = j;
                }
                if (c[i][j] == 'G') {
                    c[i][j] = '.';
                    fi = i;
                    fj = j;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (c[i][j] != '.') {
                    for (int k = 0; k < 4; k++)
                        badPos[k][i][j] = true;
                    int dir = -1;
                    for (int k = 0; k < 4; k++)
                        if (c[i][j] == dirs[k])
                            dir = k;
                    if (dir != -1) {
                        for (int k = 0; k < 4; k++) {
                            int curDir = (4 - dir + k) % 4;
                            int ci = i, cj = j;
                            while (true) {
                                ci += di[k];
                                cj += dj[k];
                                if (ci >= 0 && ci < n && cj >= 0 && cj < m && c[ci][cj] == '.') {
                                    badPos[curDir][ci][cj] = true;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        ArrayDeque<State> q = new ArrayDeque<>();
        q.add(new State(si, sj, 0));
        d[0][si][sj] = 0;
        while (!q.isEmpty()) {
            State st = q.getFirst();
            q.pop();
            int ntime = (st.time + 1) % 4;
            for (int i = 0; i < 4; i++) {
                int ni = st.i + di[i];
                int nj = st.j + dj[i];
                if (ni >= 0 && ni < n && nj >= 0 && nj < m && !badPos[ntime][ni][nj] && d[ntime][ni][nj] == Integer.MAX_VALUE) {
                    d[ntime][ni][nj] = d[st.time][st.i][st.j] + 1;
                    q.add(new State(ni, nj, ntime));
                }
            }
        }

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < 4; i++) {
            if (!badPos[i][fi][fj])
                ans = Math.min(ans, d[i][fi][fj]);
        }
        if (ans != Integer.MAX_VALUE)
            out.println(ans);
        else
            out.println("impossible");
    }

    public void run() {
        try {
            in = new FastScanner(new File("a.in"));
            out = new PrintWriter(new File("a.out"));

            int t = in.nextInt();
            for (int i = 0; i < t; i++) {
                out.print("Case #" + (i + 1) + ": ");
                solve();
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new A().run();
    }
}
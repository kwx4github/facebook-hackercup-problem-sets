
#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;

typedef struct {
    int x,y;
    int cont;
} POS;
POS ini;
int A[103][103];
int visit[103][103][5];
int fila[103],col[103];
int mov[2][4] = {-1,0,1,0,
                 0,1,0,-1};
int T,N,M,F,C;

bool laserF(int f, int c,int pasos) {//True si se lo mata
    int aux=f;
    while(aux>=0) {
        if(A[aux][c]>0) {
            int tmp = (A[aux][c]+pasos)%4;
            if(tmp==0) tmp=4;
            if(tmp==3) return true;
            else break;
        }
        if(A[aux][c]==-1) break;
        aux--;
    }
    aux=f;
    while(aux<N) {
        if(A[aux][c]>0) {
            int tmp = (A[aux][c]+pasos)%4;
            if(tmp==0) tmp=4;
            if(tmp==1) return true;
            else return false;
        }
        if(A[aux][c]==-1) return false;
        aux++;
    }
    return false;
}
bool laserC(int f, int c,int pasos) {//True si se lo mata
    int aux=c;
    while(aux>=0) {
        if(A[f][aux]>0) {
            int tmp = (A[f][aux]+pasos)%4;
            if(tmp==0) tmp=4;
            if(tmp==2) return true;
            else break;
        }
        if(A[f][aux]==-1) break;
        aux--;
    }
    aux=c;
    while(aux<M) {
        if(A[f][aux]>0) {
            int tmp = (A[f][aux]+pasos)%4;
            if(tmp==0) tmp=4;
            if(tmp==4) return true;
            else return false;
        }
        if(A[f][aux]==-1) return false;
        aux++;
    }
    return false;
}

int busca() {
    queue <POS> Q;
    POS pos;
    int x,y;
    Q.push(ini);
    while(!Q.empty()) {
        pos = Q.front();
        Q.pop();
     //   printf("<%d %d>\n",pos.x,pos.y);
        if(pos.x==F&&pos.y==C) return pos.cont;
        int paso=(pos.cont+1)%4;
        if(paso==0)paso=4;
        for(int i=0;i<4;i++) {
            x=pos.x+mov[0][i];
            y=pos.y+mov[1][i];
          //  printf("2<%d %d>\n",x,y);
            if(x<0||x>=N||y<0||y>=M) continue;
            if(A[x][y]!=0) continue;
            if(visit[x][y][paso]==1) continue;
            if(fila[x]==1) {
                  //  printf("laser1\n");
                if(laserC(x,y,pos.cont+1)==true) {
                    //    printf("laserC\n");
                        continue;
                }
            }
            if(col[y]==1) {
                //printf("laser2\n");
                if(laserF(x,y,pos.cont+1)==true) {
                     //   printf("laserF\n");
                        continue;
                }
            }
            visit[x][y][paso]=1;
            POS tmp = {x,y,pos.cont+1};
            Q.push(tmp);
        }
    }
    return 0;
}

int main() {
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    scanf("%d",&T);
    for(int i=1;i<=T;i++) {
        memset(visit,0,sizeof(visit));
        memset(fila,0,sizeof(fila));
        memset(col,0,sizeof(col));
        scanf("%d%d\n",&N,&M);
        for(int j=0;j<N;j++) {
            for(int k=0;k<M;k++) {
                char n;
                scanf("\n%c",&n);
                switch(n) {
                    case '.':
                        A[j][k]=0;
                        break;
                    case '#':
                        A[j][k]=-1;
                        break;
                    case 'S':
                        A[j][k]=0;
                        ini.x=j;
                        ini.y=k;
                        ini.cont=0;
                        break;
                    case 'G':
                        A[j][k]=0;
                        F=j;
                        C=k;
                        break;
                    case '^':
                        A[j][k]=1;
                        fila[j]=1;
                        col[k]=1;
                        break;
                    case '>':
                        A[j][k]=2;
                        fila[j]=1;
                        col[k]=1;
                        break;
                    case 'v':
                        A[j][k]=3;
                        fila[j]=1;
                        col[k]=1;
                        break;
                    case '<':
                        A[j][k]=4;
                        fila[j]=1;
                        col[k]=1;
                        break;
                    default: break;
                }
            }
        }
        /*for(int j=0;j<N;j++) {
            for(int k=0;k<M;k++){
                printf("%2d ",A[j][k]);
            }
            printf("\n");
        }
        for(int j=0;j<N;j++) printf("%d ",fila[j]);
        printf("\n");
        for(int j=0;j<M;j++) printf("%d ",col[j]);
        printf("\n");
        */
        int res = busca();
        printf("Case #%d: ",i);
        if(res==0) printf("impossible\n");
        else printf("%d\n",res);
    }

return 0;
}

#include <iostream>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <limits.h>
#include <set>
#include <stack>
#include <vector>
#include <map>
#include <queue>
#include <sstream>
//#define mod 1000000007
#define INF 200000000
using namespace std;

int main(){
    freopen ("laser_maze.txt","r",stdin);
    freopen ("out.txt","w",stdout);
    //memset(dp,-1,sizeof dp)
    //ios_base::sync_with_stdio(0);
    int t;
    cin >>t;
    int tc=1;
    while(t--)
    {
        int n,m;
        cin >> n >> m;
        string s[n];
        int las[n][m];
        memset(las,-1,sizeof las);
        for(int i =0;i<n;i++)
        {
            cin>>s[i];
            for(int j=0;j<m;j++)
            {
                if(s[i][j]=='>')
                    las[i][j]=0;
                else if(s[i][j]=='v')
                    las[i][j]=1;
                else if(s[i][j]=='<')
                    las[i][j]=2;
                else if(s[i][j]=='^')
                    las[i][j]=3;
            }
        }

        bool cant[4][110][110];
        bool visited[4][110][110];
        memset(cant,0,sizeof cant);
        memset(visited,0,sizeof visited);

        for(int i =0;i<4;i++)
        {
            for(int j =0;j<n;j++)
            {
                bool x= false;
                for(int k=0;k<m;k++)
                {
                    if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        cant[i][j][k]=true;
                    if(x)
                        cant[i][j][k]=true;
                    if((las[j][k]+i)%4 == 0&&las[j][k]!=-1)
                        x=true;
                    else if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        x=false;
                }
            }

            for(int k =0;k<m;k++)
            {
                bool x= false;
                for(int j=0;j<n;j++)
                {
                    if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        cant[i][j][k]=true;
                    if(x)
                        cant[i][j][k]=true;
                    if((las[j][k]+i)%4 == 1&&las[j][k]!=-1)
                        x=true;
                    else if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        x=false;
                }
            }

            for(int j =0;j<n;j++)
            {
                bool x= false;
                for(int k=m-1;k>=0;k--)
                {
                    if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        cant[i][j][k]=true;
                    if(x)
                        cant[i][j][k]=true;
                    if((las[j][k]+i)%4 == 2&&las[j][k]!=-1)
                        x=true;
                    else if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        x=false;
                }
            }

            for(int k =0;k<m;k++)
            {
                bool x= false;
                for(int j=n-1;j>=0;j--)
                {
                    if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        cant[i][j][k]=true;
                    if(x)
                        cant[i][j][k]=true;
                    if((las[j][k]+i)%4 == 3&&las[j][k]!=-1)
                        x=true;
                    else if(s[j][k]!='S'&&s[j][k]!='G'&&s[j][k]!='.')
                        x=false;
                }
            }
        }
        queue< pair < pair<int ,int>, int > > bfs;
        for(int i =0;i<n;i++)
            for(int j=0;j<m;j++)
                if(s[i][j]=='S')
                {
                    bfs.push(make_pair(make_pair(i,j),0));
                    visited[0][i][j]=true;
                    break;
                }
        int steps=-1;
        while(!bfs.empty())
        {
            pair <pair<int,int>,int > temp = bfs.front();
            bfs.pop();
            int x = temp.first.first;
            int y=  temp.first.second;
            int st = temp.second;
            if(s[temp.first.first][temp.first.second]=='G')
            {
                steps = temp.second;
                break;
            }
            if(x!=n-1&&!visited[(st+1)%4][x+1][y]&&!cant[(st+1)%4][x+1][y])
                bfs.push(make_pair(make_pair(x+1,y),st+1)),visited[(st+1)%4][x+1][y]=true;
            if(x!=0&&!visited[(st+1)%4][x-1][y]&&!cant[(st+1)%4][x-1][y])
                bfs.push(make_pair(make_pair(x-1,y),st+1)),visited[(st+1)%4][x-1][y]=true;
            if(y!=0&&!visited[(st+1)%4][x][y-1]&&!cant[(st+1)%4][x][y-1])
                bfs.push(make_pair(make_pair(x,y-1),st+1)),visited[(st+1)%4][x][y-1]=true;
            if(y!=m-1&&!visited[(st+1)%4][x][y+1]&&!cant[(st+1)%4][x][y+1])
                bfs.push(make_pair(make_pair(x,y+1),st+1)),visited[(st+1)%4][x][y+1]=true;
        }
        cout << "Case #"<<tc++<<": ";
        if(steps == -1)
            cout<<"impossible"<<endl;
        else
            cout<<steps<<endl;
    }
    return 0;
}


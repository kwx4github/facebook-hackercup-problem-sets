import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class LaserMaze {
    static char[] symbols = new char[] {'>', 'v', '<', '^'};
    static HashMap<Character, Direction2D> directionsForSymbols = new HashMap<>();
    static HashMap<Character, Integer> symbolsToIndices = new HashMap<>();

    static void printAnswer(int testNum, String result, PrintWriter pw) {
        pw.println("Case #" + testNum + ": " + result);
    }

    static boolean isHitByLazerAt(int lx, int ly, Direction2D dir, int x, int y) {
        int dx = dir.dx, dy = dir.dy;
        if (lx == x && dx != 0)
            return false;
        if (ly == y && dy != 0)
            return false;
        return (lx == x || (lx - x) * dx < 0) && (ly == y || (ly - y) * dy < 0);
    }

    static boolean isHitBySomeLazer(int x, int y, int rem4, char[][] maze) {
        int n = maze.length, m = maze[0].length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if ((maze[i][j] == '>') || (maze[i][j] == '<') || (maze[i][j] == 'v') || (maze[i][j] == '^')) {
                    int initState = symbolsToIndices.get(maze[i][j]);
                    int finalState = (initState + rem4) % 4;
                    char finalSymbol = symbols[finalState];
                    Direction2D dir = directionsForSymbols.get(finalSymbol);
                    if (isHitByLazerAt(i, j, dir, x, y)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    static String getAnswerForMaze(int n, int m, char[][] maze) {
        boolean[][][] been = new boolean[101][101][4];
        Queue<Integer> qx = new LinkedList<>(), qy = new LinkedList<>(), r = new LinkedList<>();
        int startX = 0, startY = 0, endX = 0, endY = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (maze[i][j] == 'S') {
                    startX = i;
                    startY = j;
                }
                else if (maze[i][j] == 'G') {
                    endX = i;
                    endY = j;
                }
            }
        }
        qx.add(startX);
        qy.add(startY);
        r.add(0);
        been[startX][startY][0] = true;
        int[][][] d = new int[n][m][4];
        while (!qx.isEmpty()) {
            int x = qx.poll(), y = qy.poll(), rem = r.poll();
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    if (dx * dx + dy * dy == 1) {
                        if (!isIn(x + dx, y + dy, n, m)) {
                            continue;
                        }
                        if (!isHitBySomeLazer(x + dx, y + dy, (rem + 1) % 4, maze)
                                && !been[x + dx][y + dy][(rem + 1) % 4]) {
                            been[x + dx][y + dy][(rem + 1) % 4] = true;
                            d[x + dx][y + dy][(rem + 1) % 4] = d[x][y][rem] + 1;
                            qx.add(x + dx);
                            qy.add(y + dy);
                            r.add((rem + 1) % 4);
                        }
                    }
                }
            }
        }
        int minimalNonzero = Integer.MAX_VALUE;
        for (int rem = 0; rem < 4; rem++) {
            if (d[endX][endY][rem] > 0) {
                minimalNonzero = Math.min(minimalNonzero, d[endX][endY][rem]);
            }
        }
        if (minimalNonzero > 0 && minimalNonzero != Integer.MAX_VALUE) {
            return minimalNonzero + "";
        }
        return "impossible";
    }

    static boolean isIn(int a, int b, int n, int m) {
        return a >= 0 && b >= 0 && a < n && b < m;
    }

    static void preCalculate() {
        symbolsToIndices.put('>', 0);
        symbolsToIndices.put('v', 1);
        symbolsToIndices.put('<', 2);
        symbolsToIndices.put('^', 3);
        directionsForSymbols.put('>', new Direction2D(0, 1));
        directionsForSymbols.put('v', new Direction2D(1, 0));
        directionsForSymbols.put('<', new Direction2D(0, -1));
        directionsForSymbols.put('^', new Direction2D(-1, 0));
    }

    public static void main(String[] args) throws IOException {
        preCalculate();
        BufferedReader rd = new BufferedReader(new FileReader("/Users/llakirbaia/Downloads/laser_maze.txt"));
        //BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(new FileWriter("/Users/llakirbaia/Desktop/output.txt"));
        //pw = new PrintWriter(System.out);
        int numTests = Integer.parseInt(rd.readLine());
        for (int i = 0; i < numTests; i++) {
            String line = rd.readLine();
            int n = Integer.parseInt(line.split(" ")[0]), m = Integer.parseInt(line.split(" ")[1]);
            char[][] board = new char[n][m];
            for (int x = 0; x < n; x++) {
                line = rd.readLine();
                for (int y = 0; y < m; y++) {
                    board[x][y] = line.charAt(y);
                }
            }
            printAnswer(i + 1, getAnswerForMaze(n, m, board), pw);
        }
        rd.close();
        pw.flush();
        pw.close();
    }
}

class Direction2D {
    public final int dx, dy;

    public Direction2D(int dx, int dy) {
        this.dx = dx;
        this.dy = dy;
    }
}
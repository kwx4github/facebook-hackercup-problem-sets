#define _CRT_SECURE_NO_DEPRECATE

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <queue>
#include <list>
#include <cctype>
#include <sstream>
#include <cassert>
#include <bitset>
#include <memory.h>

using namespace std;

#pragma comment(linker, "/STACK:33554432")

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define it iterator
#define last(a) a.size() - 1
#define all(a) a.begin(), a.end()

const long double EPS = 1E-9;
const int INF = 1000000000;
const int64 INF64 = (int64) 1E18;
const long double PI = 2 * acos(.0);

const int dx[4] = {-1, 0, +1, 0};
const int dy[4] = {0, +1, 0, -1};

const string DIRS = "^>v<";

string s[110];
int n, m, d[4][110][110];
bool dan[4][110][110];

bool isin(int x, int y) {
  return 0 <= x && x < n && 0 <= y && y < m;
}

void read() {
  cin >> n >> m;
  forn(i, n)
    cin >> s[i];
}

void solve() {
  int sx, sy, gx, gy;
  forn(i, n)
    forn(j, m) {
      if (s[i][j] == 'S') {
        sx = i;
        sy = j;
        s[i][j] = '.';
      }
      if (s[i][j] == 'G') {
        gx = i;
        gy = j;
        s[i][j] = '.';
      }
    }
  memset(dan, 0, sizeof(dan));
  forn(i, n)
    forn(j, m)
      if (DIRS.find(s[i][j]) != string::npos)
        forn(t, 4) {
          int dir = (DIRS.find(s[i][j]) + t) % 4;
          int x = i;
          int y = j;
          do {
            dan[t][x][y] = true;
            x += dx[dir];
            y += dy[dir];
          } while (isin(x, y) && s[x][y] == '.');
        }
  memset(d, -1, sizeof(d));
  d[0][sx][sy] = 0;
  queue<pair<int, pair<int, int> > > q;
  q.push(mp(0, mp(sx, sy)));
  while (!q.empty()) {
    int t = q.front().fs;
    int x = q.front().sc.fs;
    int y = q.front().sc.sc;
    q.pop();

    if (x == gx && y == gy) {
      printf("%d\n", d[t][x][y]);
      return;
    }
    
    forn(dir, 4) {
      int nx = x + dx[dir];
      int ny = y + dy[dir];
      int nt = d[t][x][y] + 1;
      
      if (isin(nx, ny) && s[nx][ny] == '.' && !dan[nt % 4][nx][ny] && d[nt % 4][nx][ny] == -1) {
        d[nt % 4][nx][ny] = nt;
        q.push(mp(nt % 4, mp(nx, ny)));
      }
    }
  }
  
  puts("impossible");
}

int main() {
  freopen("input.txt", "rt", stdin);
  freopen("output.txt", "wt", stdout);

  int tests;
  scanf("%d", &tests);
  for (int test = 1; test <= tests; test++) {
    printf("Case #%d: ", test);
    read();
    //gen();
    solve();
  }

  return 0;
}

#include <algorithm>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <iostream>
#include <fstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

#define FOR(i,n) for (int i=0; i<n; ++i)
#define FORE(i,n) for (int i=0; i<=n; ++i)
#define REP(i,a,b) for (int i=a; i<b; ++i)
#define REPE(i,a,b) for (int i=a; i<=b; ++i)
#define ALL(c) (c).begin(), (c).end()
#define SORT(c) sort(ALL(c))
#define mp make_pair
#define pb push_back

typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef long long int LL;
typedef vector<int> VI;
typedef vector<bool> VB;
typedef vector<VI> VVI;
const double pi = acos(-1.0);
const int inf = (int) 1e9;

const int N = 105;

int n,m;
bool used[4][N][N];
bool can[4][N][N];
int d[4][N][N];
int sti, stj, fi, fj;

void precalc(vector<string> &s) {
	memset(can, true, sizeof(can));
	FOR(i,n) {
		FOR(j,m) {
			int st = -1;
			if (s[i][j] == '<') {
				st = 0;
			}
			if (s[i][j] == '^') {
				st = 1;
			}
			if (s[i][j] == '>') {
				st = 2;
			}
			if (s[i][j] == 'v') {
				st = 3;
			}
			if (s[i][j] == '#' || st != -1) {
				FOR(k,4) {
					can[k][i][j] = false;
				}
			}
			if (st == -1) {
				continue;
			}
			FOR(k,4) {
				int now = (st + k) % 4;
				int i1, j1;
				if (now == 0) {
					j1 = j;
					for(i1 = i - 1; i1 >= 0; --i1) {
						if (s[i1][j1] == '.' || s[i1][j1] == 'S' || s[i1][j1] == 'G') {
							can[k][i1][j1] = false;
						} else {
							break;
						}
					}
				}
				if (now == 1) {
					i1 = i;
					for(j1 = j + 1; j1 < m; ++j1) {
						if (s[i1][j1] == '.' || s[i1][j1] == 'S' || s[i1][j1] == 'G') {
							can[k][i1][j1] = false;
						} else {
							break;
						}
					}
				}
				if (now == 2) {
					j1 = j;
					for(i1 = i + 1; i1 < n; ++i1) {
						if (s[i1][j1] == '.' || s[i1][j1] == 'S' || s[i1][j1] == 'G') {
							can[k][i1][j1] = false;
						} else {
							break;
						}
					}
				}
				if (now == 3) {
					i1 = i;
					for(j1 = j - 1; j1 >= 0; --j1) {
						if (s[i1][j1] == '.' || s[i1][j1] == 'S' || s[i1][j1] == 'G') {
							can[k][i1][j1] = false;
						} else {
							break;
						}
					}
				}
			}
		}
	}
}

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};

bool check(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

int go(vector<string> &s) {
	int res = inf;
	queue<pair<PII, int> > q;
	q.push(mp(mp(sti, stj), 0) );
	memset(used, false, sizeof(used));
	//used[0][sti][stj] = true;
	bool exit = false;
	while(!q.empty() && !exit) {
		pair<PII, int> v = q.front();
		q.pop();
		int i = v.first.first;
		int j = v.first.second;
		int step = v.second + 1;
		int step4 = v.second % 4;
		FOR(k,4) {
			int x = i + dx[k];
			int y = j + dy[k];
			if (check(x, y) && !used[step4][x][y] && can[step4][x][y]) {				
				if (x == fi && y == fj) {
					res = step;
					exit = true;
					break;
				}
				used[step4][x][y] = true;
				q.push(mp(mp(x, y), step));
			}
		}
	}
	return res;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
#else
    //freopen("wtflex.in","r",stdin);
    //freopen("wtflex.out","w",stdout);
#endif
	int t;
	cin >> t;
	FOR(tt,t) {
		if (tt) {
			cout << "\n";
		}
		cin >> n >> m;
		vector<string> s(n);
		FOR(i,n) {
			cin >> s[i];
			FOR(j,m) {
				if (s[i][j] == 'S') {
					sti = i;
					stj = j;
				}
				if (s[i][j] == 'G') {
					fi = i;
					fj = j;
				}
			}
		}
		precalc(s);
		int res = go(s);
		cout << "Case #" << tt + 1 << ": ";
		if (res == inf) {
			cout << "impossible";
		} else {
			cout << res;
		}
	}
	return 0;
}
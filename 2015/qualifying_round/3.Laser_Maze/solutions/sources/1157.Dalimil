#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
#include <map>

using namespace std;

const int mi[4] = {0, 1, 0, -1};
const int mj[4] = {1, 0, -1, 0};

int n,m;
vector<vector<char> > v;

//time 0/1/2/3 
void rowFill(int pi, int pj, int tim, int dir){

	int ni = pi;
	int nj = pj;
	while(true){
		ni = ni+mi[dir];
		nj = nj+mj[dir];
		if(!(ni >= 0 && ni < n && nj >=0 && nj < m)) break;
		if(v[ni][nj] == '#') break;
		if(v[ni][nj] == '>') break;
		if(v[ni][nj] == '^') break;
		if(v[ni][nj] == '<') break;
		if(v[ni][nj] == 'v') break;

		if(v[ni][nj] == '.'){
			v[ni][nj] = 0;
		}
		
		v[ni][nj] = v[ni][nj] | (1<<tim);

	}

}

void laserFill(int pi, int pj, int dir){
	for(int i=0;i<4;i++){
		rowFill(pi, pj, i, (dir+i)%4);
	}
}

int main(){
	FILE *fin, *fout;
	fin = fopen("p3.in", "r");
	fout = fopen("p3.out", "w");
	int T; fscanf(fin, "%d", &T);
	for(int t=1;t<=T;t++){
		fscanf(fin, "%d %d", &n, &m);
		v = vector<vector<char> >(n, vector<char>(m, 0));

		int si, sj, gi, gj;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				char c;
				fscanf(fin, "%c", &c);
				if(c == '\n'){
					j--;
					continue;
				}

				v[i][j] = c;
				if(c == 'S'){
					si = i; sj = j;
					v[i][j] = '.';
				}
				if(c == 'G'){
					gi = i; gj = j;
					v[i][j] = '.';
				}
			}
		}

		//laser fill
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(v[i][j] == 'v'){
					laserFill(i, j, 1);
				}else if(v[i][j] == '^'){
					laserFill(i, j, 3);
				}else if(v[i][j] == '<'){
					laserFill(i, j, 2);
				}else if(v[i][j] == '>'){
					laserFill(i, j, 0);
				}
			}
		}

		/*///debug
		cout <<endl;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(v[i][j] < 20){
					cout << (int)v[i][j]<<";";
				}
				else{ cout << v[i][j] << ";";}
			}cout << endl;
		}cout << endl;
		//end debug */


		//bfs
		map<pair<int, pair<int, int> >, int > vis;
		queue<pair<int, pair<int, int> > > q;
		q.push(make_pair(0, make_pair(si, sj)));
		vis[make_pair(0, make_pair(si, sj))] = true;

		int ans = -1;

		while(!q.empty()){
			int d = q.front().first;
			int ui = q.front().second.first;
			int uj = q.front().second.second;
			q.pop();
			/*debug
			cout << "d:"<<d << " " << ui << "-" << uj << endl;
			//end debug*/

			if(ui == gi && uj == gj){
				//we've reached the goal
				ans = d;
				break;
			}

			for(int i=0;i<4;i++){
				int ni = ui+mi[i];
				int nj = uj+mj[i];
				int nd = d+1;

				if(vis.count(make_pair(nd%4, make_pair(ni, nj) ) ) == 0){ //has never reached this state %4
					if(ni >= 0 && ni < n && nj >=0 && nj < m){
						if(v[ni][nj] == '#') continue;
						if(v[ni][nj] == '>') continue;
						if(v[ni][nj] == '^') continue;
						if(v[ni][nj] == '<') continue;
						if(v[ni][nj] == 'v') continue;


						if(v[ni][nj] != '.'){
							int turret = v[ni][nj];
							if(((1<<(nd%4)) & turret) != 0) continue;
						}

						vis[make_pair(nd%4, make_pair(ni, nj))] = true;
						q.push(make_pair(nd, make_pair(ni, nj)));
					}
				}
			}
		}

		if(ans == -1){
			fprintf(fout, "Case #%d: impossible\n", t);
		}else{
			fprintf(fout, "Case #%d: %d\n", t, ans);
		}

	}

	//
}

/*
. (empty space)
# (wall)
S (starting position)
G (goal)
< > ^ v (laser turrets) 
*/

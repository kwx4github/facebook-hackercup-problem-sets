#include<bits/stdc++.h>

using namespace std;

int n, m;
string grid[110];
int tension[110][110];
int vis[1010][1010];
map< pair<int, int>, int> mp;
const int minvisit = 20;

int BFS(int src, int dest){
    queue<int>Q;
    queue<string>S;
    Q.push(src);
    Q.push(0);
    memset(vis, 0, sizeof(vis));
    mp.clear();
    //string str = "";
    //S.push(str);
    while(!Q.empty()){
        int nowt = Q.front(); Q.pop();
        int dist = Q.front(); Q.pop();
        int col = nowt%1000;
        int row = nowt/1000;
        int now = (row+1)*1000 + col;
        //str = S.front(); S.pop();
        if(row+1<n && grid[row+1][col]=='.' && (mp[make_pair(nowt, now)]<minvisit) && (dist+1)%4 != tension[row+1][col]){
            if(now == dest){
                    //cout << str+"v" << endl;
                    return dist+1;
            }
//            vis[nowt][now]++;
            mp[make_pair(nowt, now)]++;
            //S.push(str+"v");
            Q.push(now);
            Q.push(dist+1);
        }
        now = (row-1)*1000 + col;
        if(row-1>=0 && grid[row-1][col]=='.' && (mp[make_pair(nowt, now)]<minvisit) && (dist+1)%4 != tension[row-1][col]){
            if(now == dest){
                    //cout << str+"^" << endl;
                    return dist+1;
            }
            //vis[nowt][now]++;
            mp[make_pair(nowt, now)]++;
            //S.push(str+"^");
            Q.push(now);
            Q.push(dist+1);
        }
        now = row*1000 + col + 1;
        if(col+1<m && grid[row][col+1]=='.' && (mp[make_pair(nowt, now)]<minvisit) && (dist+1)%4 != tension[row][col+1]){
            if(now == dest){
                    //cout << str+">" << endl;
                    return dist+1;
            }
            //vis[nowt][now]++;
            mp[make_pair(nowt, now)]++;
            //S.push(str+">");
            Q.push(now);
            Q.push(dist+1);
        }
        now = row*1000 + col - 1;
        if(col-1>=0 && grid[row][col-1]=='.' && (mp[make_pair(nowt, now)]<minvisit) && (dist+1)%4 != tension[row][col-1]){
            if(now == dest){
                    //cout << str+"<" << endl;
                    return dist+1;
            }
            //vis[nowt][now]++;
            mp[make_pair(nowt, now)]++;
            //S.push(str+"<");
            Q.push(now);
            Q.push(dist+1);
        }
    }
    return -1;
}

int main(){
    freopen("in3.txt", "r", stdin);
    freopen("laser.txt", "w", stdout);
    int T, t=0, st=0, ed=0;

    cin >> T;
    while(T--){
        cin >> n >> m;
        memset(tension, -1, sizeof(tension));
        for(int i=0; i<n; i++){
            cin >> grid[i];
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='>'){
                    for(int k=j+1; k<m; k++){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 0; else break; } //Right
                    for(int k=j-1; k>=0; k--){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 2; else break; } //Left
                    for(int k=i+1; k<n; k++){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 1; else break; } //Down
                    for(int k=i-1; k>=0; k--){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 3; else break; } //Up
                }else if(grid[i][j]=='v'){
                    for(int k=j+1; k<m; k++){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 3; else break; }
                    for(int k=j-1; k>=0; k--){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 1; else break; }
                    for(int k=i+1; k<n; k++){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 0; else break; }
                    for(int k=i-1; k>=0; k--){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 2; else break; }
                }else if(grid[i][j]=='<'){
                    for(int k=j+1; k<m; k++){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 2; else break; }
                    for(int k=j-1; k>=0; k--){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 0; else break; }
                    for(int k=i+1; k<n; k++){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 3; else break; }
                    for(int k=i-1; k>=0; k--){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 1; else break; }
                }else if(grid[i][j]=='^'){
                    for(int k=j+1; k<m; k++){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 1; else break; }
                    for(int k=j-1; k>=0; k--){ if(grid[i][k]=='.' || grid[i][k]=='S' || grid[i][k]=='G') tension[i][k] = 3; else break; }
                    for(int k=i+1; k<n; k++){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 2; else break; }
                    for(int k=i-1; k>=0; k--){ if(grid[k][j]=='.' || grid[k][j]=='S' || grid[k][j]=='G') tension[k][j] = 0; else break; }
                }
                if(grid[i][j]=='S'){ st = i*1000 + j; grid[i][j] = '.'; }
                if(grid[i][j]=='G'){ ed = i*1000 + j; grid[i][j] = '.'; }
            }
        }

        int dist = BFS(st, ed);
        if(dist == -1) cout << "Case #" << ++t << ": impossible" << endl;
        else cout << "Case #" << ++t << ": " << dist << endl;

    }

    return 0;
}

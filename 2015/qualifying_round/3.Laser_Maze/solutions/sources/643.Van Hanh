#include<bits/stdc++.h>
#define MAX   111
#define FOR(i,a,b) for (int i=(a),_b=(b);i<=_b;i=i+1)
#define REP(i,n) for (int i=0,_n=(n);i<_n;i=i+1)
#define FORE(i,v) for (__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)
#define DIS(s) dis[(s).x][(s).y][(s).t]
using namespace std;
const char imp[]="impossible";
const int dx[]={0,-1,0,1};
const int dy[]={-1,0,1,0};
const char ch[]="<^>v";
class Maze {
private:
    struct Laser {
        int x,y,fstDir;
        Laser() {
            x=y=fstDir=0;
        }
        Laser(int _x,int _y,int d) {
            x=_x;y=_y;fstDir=d;
        }
        int getDir(int t) const {
            return ((fstDir+t)%4);
        }
    };
    struct State {
        int x,y,t;
        State() {
            x=y=t=0;
        }
        State(int _x,int _y,int _t) {
            x=_x;y=_y;t=_t;
        }
    };
    int m,n;
    char a[MAX][MAX];
    bool block[MAX][MAX][4];
    int dis[MAX][MAX][4];
    vector<Laser> laser;
    void init(void) {
        scanf("%d%d",&m,&n);
        FOR(i,1,m) scanf("%s",a[i]+1);
        FOR(i,1,m) FOR(j,1,n) REP(k,4) if (a[i][j]==ch[k]) laser.push_back(Laser(i,j,k));
    }
    bool inside(int x,int y) const {
        if (x<1 || x>m || y<1 || y>n) return (false);
        return (true);
    }
    bool blockCell(int x,int y) const {
        REP(i,4) if (a[x][y]==ch[i]) return (true);
        return (a[x][y]=='#');
    }
    void prepare(void) {
        REP(t,4) FORE(it,laser) {
            int d=it->getDir(t);
            int x=it->x;
            int y=it->y;
            while (inside(x,y) && ((x==it->x && y==it->y) || !blockCell(x,y))) {
                block[x][y][t]=true;
                x+=dx[d];
                y+=dy[d];
            }
        }
    }
    int bfs(void) {
        queue<State> q;
        FOR(i,1,m) FOR(j,1,n) if (a[i][j]=='S') {
            q.push(State(i,j,0));
            dis[i][j][0]=0;
        }
        assert(!q.empty());
        while (!q.empty()) {
            State u=q.front();q.pop();
            if (a[u.x][u.y]=='G') return (DIS(u));
            REP(i,4) {
                int vx=u.x+dx[i];
                int vy=u.y+dy[i];
                if (inside(vx,vy) && !blockCell(vx,vy) && !block[vx][vy][(u.t+1)%4]) {
                    State v(vx,vy,(u.t+1)%4);
                    if (DIS(v)<0) {
                        DIS(v)=DIS(u)+1;
                        q.push(v);
                    }
                }
            }
        }
        return (-1);
    }
public:
    Maze() {
        m=n=0;
        memset(a,0,sizeof a);
        memset(block,false,sizeof block);
        memset(dis,-1,sizeof dis);
        laser.clear();
    }
    int solve(void) {
        init();
        prepare();
        return (bfs());
    }
};
int main(void) {
    int t;
    scanf("%d",&t);
    FOR(i,1,t) {
        Maze maze;
        printf("Case #%d: ",i);
        int res=maze.solve();
        if (res<0) printf("%s\n",imp); else printf("%d\n",res);
    }
    return 0;
}

#f_test = ['test.in', 'test.out']
f_small = ['laser_maze.txt', 'c.txt']

#FILE_NAME = f_test
FILE_NAME = f_small

f = open(FILE_NAME[0], 'r')
o = open(FILE_NAME[1], 'w')

def rotate(B) :
    N = len(B)
    M = len(B[0])
    ans = [B[i][:] for i in range(N)]
    for i in range(N) :
        for j in range(M) :
            if ans[i][j] == "^" : ans[i][j] =">"
            elif ans[i][j] == ">" : ans[i][j] ="v"
            elif ans[i][j] == "v" : ans[i][j] ="<"
            elif ans[i][j] == "<" : ans[i][j] ="^"
    return ans

def LaserWall(B) :
    N = len(B)
    M = len(B[0])
    ans = [B[i][:] for i in range(N)]
    for i in range(N) :
        for j in range(M) :
            if ans[i][j] == "^" : dx,dy=0,-1
            elif ans[i][j] == ">" : dx,dy=1,0
            elif ans[i][j] == "v" : dx,dy=0,1
            elif ans[i][j] == "<" : dx,dy=-1,0
            else : continue
            y,x=i+dy,j+dx
            while y>=0 and x>=0 and y<N and x<M :
                if ans[y][x] in ".SG" : ans[y][x] = "#"
                else : break
                y += dy
                x += dx
    return ans
def solve(sy, sx, gy, gx, board,N,M) :
    if sy == gy and sx == gx : return 0
    visited = [[[False]*4 for j in range(M)] for i in range(N)]
    dy,dx = [-1, 0, 0, 1], [0, -1, 1, 0]
    Q = [[sy,sx,0]]
    D = [0]
    visited[sy][sx][0] = True
    while Q :
        q = Q.pop(0)
        d = D.pop(0)
        if q[0] == gy and q[1] == gx : return d
        B = board[(d+1)%4]
        for i in range(4) :
            y,x,t = q[0]+dy[i], q[1]+dx[i], (d+1)%4
            if y < 0 or x < 0 or y >= N or x >=M : continue
            if B[y][x] not in ".SG" : continue
            if visited[y][x][t] : continue
            visited[y][x][t] = True
            Q.append([y,x,t])
            D.append(d+1)
    return -1
def case_result(case) :
    N,M = map(int, f.readline().split(' '))
    board = [[list(f.readline()) for i in range(N)]]
    for i in board[0] :
        if i[-1] == "\n" : i.pop(-1)
    for i in range(N) :
        for j in range(M) :
            if board[0][i][j] == 'S' : S = [i,j]
            if board[0][i][j] == 'G' : G = [i,j]
    for i in range(3) : board.append(rotate(board[i]))
    for i in range(4) : board[i] = LaserWall(board[i])
    ans = solve(S[0],S[1], G[0],G[1], board,N,M)
    if ans == -1 : return "impossible"
    else : return str(ans)
T = int(f.readline())
for case in range(1, T+1) :
    o.write('Case #'+str(case)+': '+case_result(case)+'\n')

f.close()
o.close()
    

// FBHC_C.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <cstring>
#include <algorithm>
#include <deque>
#include <iostream>
#include <string>
#include <vector>
#include <tuple>

const int dx[4] = { 1, 0, -1, 0 };
const int dy[4] = { 0,-1,  0, 1 };

// 0: free, 1: wall, 2: beam
int field[4][103][103];
bool visited[4][103][103];
using namespace std;

void readBoard(int rows, int cols, int& sx, int& sy, int& gx, int& gy)
{
	fill((int*)field, (int*)(field + (sizeof(field) / sizeof(*(field)))), 0);
	fill((bool*)visited, (bool*)(visited + sizeof(visited) / sizeof(*(visited))), false);

	vector<string> strings;
	string tmp = "";
	for (int i = 0; i < rows; ++i)
	{
		cin >> tmp;
		strings.push_back(tmp);
	}

	for (int i = 0; i < rows + 2; ++i)
	{
		for (int j = 0; j < cols + 2; ++j)
		{
			int fillVal = 0;
			if (i == 0 || j == 0 || i == rows + 1 || j == cols + 1)
			{
				fillVal = 1;
			}
			else
			{
				char c = strings[i-1][j-1];

				if (c == '#')
				{
					fillVal = 1;
				}
				else if (c == 'S')
				{
					fillVal = 0;
					sy = i;
					sx = j;
				}
				else if (c == 'G')
				{
					fillVal = 0;
					gy = i;
					gx = j;
				}
				else if (c == '>')
				{
					fillVal = 3;
				}
				else if (c == '^')
				{
					fillVal = 4;
				}
				else if (c == '<')
				{
					fillVal = 5;
				}
				else if (c == 'v')
				{
					fillVal = 6;
				}
				else if (c == '.')
				{
					fillVal = 0;
				}
				else
				{
					throw;
				}
			}

			for (int k = 0; k < 4; ++k)
			{
				field[k][i][j] = fillVal;
			}
		}
	}
}

void fillWithWall(int turn, int sx, int sy, int dir)
{
	int tx = sx + dx[dir];
	int ty = sy + dy[dir];

	while (field[turn][ty][tx] == 0 || field[turn][ty][tx] == 2)
	{
		field[turn][ty][tx] = 2;
		tx += dx[dir];
		ty += dy[dir];
	}
}

void resolveTurret(int rows, int cols)
{
	for (int i = 1; i <= rows; ++i)
	{
		for (int j = 1; j <= cols; ++j)
		{
			int placed = field[0][i][j];

			if (placed == 3)
			{
				//right:0, down:3, left:2, up:1
				fillWithWall(0, j, i, 0);
				fillWithWall(1, j, i, 3);
				fillWithWall(2, j, i, 2);
				fillWithWall(3, j, i, 1);
			}
			else if (placed == 4)
			{
				//up, right, down, left
				fillWithWall(0, j, i, 1);
				fillWithWall(1, j, i, 0);
				fillWithWall(2, j, i, 3);
				fillWithWall(3, j, i, 2);
			}
			else if (placed == 5)
			{
				//left, up, right, down
				fillWithWall(0, j, i, 2);
				fillWithWall(1, j, i, 1);
				fillWithWall(2, j, i, 0);
				fillWithWall(3, j, i, 3);
			}
			else if (placed == 6)
			{
				//down, left, up, right
				fillWithWall(0, j, i, 3);
				fillWithWall(1, j, i, 2);
				fillWithWall(2, j, i, 1);
				fillWithWall(3, j, i, 0);
			}
		}
	}
}

void printBoard(int rows, int cols)
{
	string str = ".##>^<v";
	for (int k = 0; k < 4; ++k){
		cout << "---------------" << k << "----------------" << endl;
		for (int i = 0; i < rows + 2; ++i)
		{
			for (int j = 0; j < cols + 2; ++j)
			{
				cout << str[field[k][i][j]];
			}

			cout << endl;
		}
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	int cases;

	cin >> cases;

	for (int x = 0; x < cases; ++x)
	{
		int rows, cols, startX, startY, goalX, goalY;
		bool isSolved = false;
		cin >> rows >> cols;

		// read the board
		readBoard(rows, cols, startX, startY, goalX, goalY);
		resolveTurret(rows, cols);
		deque<tuple<int, int, int>> q;

		q.push_back(make_tuple(0, startY, startX));
		visited[0][startY][startX] = true;
		while (!q.empty())
		{
			tuple<int, int, int> top = q.front();
			q.pop_front();
			int currentPhase = get<0>(top);
			int currentY = get<1>(top);
			int currentX = get<2>(top);

			if (currentY == goalY && currentX == goalX)
			{
				isSolved = true;
				printf("Case #%d: %d\n", x + 1, currentPhase);
				break;
			}

			for (int i = 0; i < 4; ++i)
			{
				int nextX = currentX + dx[i];
				int nextY = currentY + dy[i];
				int nextPhase = currentPhase + 1;

				if (!visited[nextPhase%4][nextY][nextX] && field[nextPhase%4][nextY][nextX] == 0)
				{
					visited[nextPhase%4][nextY][nextX] = true;
					q.push_back(make_tuple(nextPhase, nextY, nextX));
				}
			}
		}
		
		if (!isSolved)
		{
			printf("Case #%d: impossible\n", x + 1);
		}
	}

	return 0;
}


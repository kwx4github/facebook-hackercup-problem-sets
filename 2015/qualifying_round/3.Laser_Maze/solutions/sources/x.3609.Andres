#include <iostream>
#include <vector>
using namespace std;
const int inf = 2e9;
int hits[300];
struct node{
	int turn, r, c;
};
int main(){
	hits['>']=0;
	hits['^']=1;
	hits['<']=2;
	hits['v']=3;
	int T;
	cin >> T;
	for(int test = 1; test <= T; ++test){
		cout << "Case #" << test << ": ";
		int visited[100][100][4];
		for(int i = 0; i < 100; ++i)
			for(int j = 0; j < 100; ++j)
				for(int k = 0; k < 4; ++k)
					visited[i][j][k]=0;
		int n,m;
		cin >> n >> m;
		vector<string> grid(n);
		for(int i = 0; i < n; ++i)
			cin >> grid[i];

		int sr,sc,gr,gc;
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < m; ++j)
				if(grid[i][j]=='#')
					for(int k = 0; k < 4; ++k)
						visited[i][j][k]=true;
				else if(grid[i][j]=='S')
					sr=i,sc=j;
				else if(grid[i][j]=='G')
					gr=i,gc=j;
				else if(grid[i][j]!='.'){
					int type = hits[grid[i][j]];
					for(int k = j; k < m; ++k){
						if(grid[i][k]=='#')
							break;
						visited[i][k][type]=1;
					}
					for(int k = i; k < n; ++k){
						if(grid[k][j]=='#')
							break;
						visited[k][j][(type+1)%4]=1;
					}
					for(int k = j; k >= 0; --k){
						if(grid[i][k]=='#')
							break;
						visited[i][k][(type+2)%4]=1;
					}
					for(int k = i; k >= 0; --k){
						if(grid[k][j]=='#')
							break;
						visited[k][j][(type+3)%4]=1;
					}
				}
		for(int i = 0; i < 4; ++i)
			visited[sr][sc][i]=0;
		/*
		for(int i = 0; i < n; ++i){
			for(int j = 0; j < m; ++j){
				cout << "( ";
				for(int k = 0; k < 4; ++k){
					cout << visited[i][j][k] << ' ';
				}
				cout << ") ";
			}
			cout << '\n';
		}
		*/

		visited[0][sr][sc]=true;
		node start = {0,sr,sc};
		vector<node> bfs = {start};
		int dist = -1;
		for(int i = 0; i < bfs.size(); ++i){
			node cur = bfs[i];
			if(cur.r==gr&&cur.c==gc){
				dist = cur.turn;
				break;
			}
			if(cur.r>0&&!visited[cur.r-1][cur.c][(cur.turn+1)%4]){
				node nxt = {cur.turn+1,cur.r-1,cur.c};
				visited[cur.r-1][cur.c][(cur.turn+1)%4]=true;
				bfs.push_back(nxt);
			}
			if(cur.r<n-1&&!visited[cur.r+1][cur.c][(cur.turn+1)%4]){
				node nxt = {cur.turn+1,cur.r+1,cur.c};
				visited[cur.r+1][cur.c][(cur.turn+1)%4]=true;
				bfs.push_back(nxt);
			}
			if(cur.c>0&&!visited[cur.r][cur.c-1][(cur.turn+1)%4]){
				node nxt = {cur.turn+1,cur.r,cur.c-1};
				visited[cur.r][cur.c-1][(cur.turn+1)%4]=true;
				bfs.push_back(nxt);
			}
			if(cur.c<m-1&&!visited[cur.r][cur.c+1][(cur.turn+1)%4]){
				node nxt = {cur.turn+1,cur.r,cur.c+1};
				visited[cur.r][cur.c+1][(cur.turn+1)%4]=true;
				bfs.push_back(nxt);
			}
		}
		if(dist!=-1)
			cout << dist << '\n';
		else
			cout << "impossible\n";
	}
}

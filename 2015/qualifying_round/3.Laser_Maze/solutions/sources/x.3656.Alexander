#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define FILE_NAME ""

using namespace std;

int m, n;

void CreateMazes(vector<vector<vector<char> > >& maze)
{
	for (int i = 0; i < m; ++i)
	for (int j = 0; j < n; ++j)
	{
		if (maze[0][i][j] == '<')
		{
			maze[1][i][j] = '^';
			maze[2][i][j] = '>';
			maze[3][i][j] = 'v';
		}
		else if (maze[0][i][j] == '^')
		{
			maze[1][i][j] = '>';
			maze[2][i][j] = 'v';
			maze[3][i][j] = '<';
		}
		else if (maze[0][i][j] == '>')
		{
			maze[1][i][j] = 'v';
			maze[2][i][j] = '<';
			maze[3][i][j] = '^';
		}
		else if (maze[0][i][j] == 'v')
		{
			maze[1][i][j] = '<';
			maze[2][i][j] = '^';
			maze[3][i][j] = '>';
		}
		else
		{
			maze[1][i][j] = maze[0][i][j];
			maze[2][i][j] = maze[0][i][j];
			maze[3][i][j] = maze[0][i][j];
		}
	}
	for (int k = 0; k < 4; ++k)
	for (int i = 0; i < m; ++i)
	for (int j = 0; j < n; ++j)
	{
		if (maze[k][i][j] == '<')
		{
			int c = j;
			do
			{
				maze[k][i][c] = '#';
				--c;
			} while (c >= 0 && maze[k][i][c] != '#' &&
				maze[k][i][c] != 'v' &&
				maze[k][i][c] != '<' &&
				maze[k][i][c] != '^' &&
				maze[k][i][c] != '>');
		}
		else if (maze[k][i][j] == '^')
		{
			int c = i;
			do
			{
				maze[k][c][j] = '#';
				--c;
			} while (c >= 0 && maze[k][c][j] != '#' &&
				maze[k][c][j] != 'v' &&
				maze[k][c][j] != '<' &&
				maze[k][c][j] != '^' &&
				maze[k][c][j] != '>');
		}
		else if (maze[k][i][j] == '>')
		{
			int c = j;
			do
			{
				maze[k][i][c] = '#';
				++c;
			} while (c < n && maze[k][i][c] != '#' &&
				maze[k][i][c] != 'v' &&
				maze[k][i][c] != '<' &&
				maze[k][i][c] != '^' &&
				maze[k][i][c] != '>');
		}
		else if (maze[k][i][j] == 'v')
		{
			int c = i;
			do
			{
				maze[k][c][j] = '#';
				++c;
			} while (c < m && maze[k][c][j] != '#' &&
				maze[k][c][j] != 'v' &&
				maze[k][c][j] != '<' &&
				maze[k][c][j] != '^' &&
				maze[k][c][j] != '>');
		}
	}
}

struct pos
{
	int k, i, j;
	pos(int kk, int ii, int jj) : k(kk), i(ii), j(jj) {}
};

#define INF 1000000000

int main()
{
	freopen(FILE_NAME ".in", "r", stdin);
	freopen(FILE_NAME ".out", "w", stdout);

	int numTestCaces = 0;
	cin >> numTestCaces;
	for (int Case = 1; Case <= numTestCaces; ++Case)
	{
		cin >> m >> n;
		vector<vector<vector<char> > > maze(4, vector<vector<char> >(m, vector<char>(n)));
		vector<vector<vector<int> > > used(4, vector<vector<int> >(m, vector<int>(n, INF)));
		list<pos> q;
		for (int i = 0; i < m; ++i)
		for (int j = 0; j < n; ++j)
		{
			cin >> maze[0][i][j];
			if (maze[0][i][j] == 'S')
			{
				q.push_back(pos(0, i, j));
				used[0][i][j] = 0;
			}
		}
		CreateMazes(maze);
		int res = INF;
		while (!q.empty())
		{
			pos cp = q.front();
			int cu = used[cp.k][cp.i][cp.j];
			q.pop_front();
			if (maze[cp.k][cp.i][cp.j] == 'G')
			{
				res = used[cp.k][cp.i][cp.j];
				break;
			}
			cp.k = (cp.k + 1) % 4;
			if (cp.i > 0 && maze[cp.k][cp.i - 1][cp.j] != '#' && used[cp.k][cp.i - 1][cp.j] == INF)
			{
				q.push_back(pos(cp.k, cp.i - 1, cp.j));
				used[cp.k][cp.i - 1][cp.j] = cu + 1;
			}
			if (cp.j > 0 && maze[cp.k][cp.i][cp.j - 1] != '#' && used[cp.k][cp.i][cp.j-1] == INF)
			{
				q.push_back(pos(cp.k, cp.i, cp.j-1));
				used[cp.k][cp.i][cp.j-1] = cu + 1;
			}
			if (cp.i < m-1 && maze[cp.k][cp.i + 1][cp.j] != '#' && used[cp.k][cp.i + 1][cp.j] == INF)
			{
				q.push_back(pos(cp.k, cp.i + 1, cp.j));
				used[cp.k][cp.i + 1][cp.j] = cu + 1;
			}
			if (cp.j < n-1 && maze[cp.k][cp.i][cp.j + 1] != '#' && used[cp.k][cp.i][cp.j + 1] == INF)
			{
				q.push_back(pos(cp.k, cp.i, cp.j + 1));
				used[cp.k][cp.i][cp.j + 1] = cu + 1;
			}
		}

		cout << "Case #" << Case << ": ";
		if (res == INF)
			cout << "impossible" << endl;
		else
			cout << res << endl;
	}

	return 0;
}

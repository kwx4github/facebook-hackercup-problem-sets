#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef vector<int> vi;

#define INF 1000000000

char tab[111][111];
int queimado[111][111][7], dx[7]={1, 0, -1, 0}, dy[7]={0, -1, 0, 1}, sx, sy, gx, gy, M, N;
int seen[111][111][7], dist[111][111][7];


bool inside(int x, int y){
	return x>=0 && x<M && y>=0 && y<N;
}

bool block(char c){
	return (c=='#' || c=='<' || c=='>' || c=='^' || c=='v');
}
/*
. (empty space) 
# (wall) 
S (starting position) 
G (goal) 
< > ^ v (laser turrets) 
*/

char laser[7]="<^>v";

struct no{
	int x, y, t;
	no(int x_=0, int y_=0, int t_=0){x=x_; y=y_; t=t_;}
};

int main(){
	int T;
	scanf("%d", &T);
	for(int caso=1; caso<=T; caso++){
		scanf("%d %d\n", &M, &N);
		for(int i=0; i<M; i++){gets(tab[i]);}
		
		memset(queimado, 0, sizeof(queimado));		
		for(int i=0;i<M;i++){
			for(int j=0;j<N;j++){
				if(tab[i][j]=='S'){sx=i; sy=j;}
				if(tab[i][j]=='G'){gx=i; gy=j;}
				
				for(int l=0;l<4;l++){
					if(tab[i][j]==laser[l]){
						for(int k=j-1; k>=0; k--){
							if(block(tab[i][k])){
								break;
							}
							queimado[i][k][(4-l)%4]=1;
						}
						for(int k=i-1; k>=0; k--){
							if(block(tab[k][j])){
								break;
							}
							queimado[k][j][(5-l)%4]=1;
						}
						for(int k=j+1; k<N; k++){
							if(block(tab[i][k])){
								break;
							}
							queimado[i][k][(6-l)%4]=1;
						}
						for(int k=i+1; k<M; k++){
							if(block(tab[k][j])){
								break;
							}
							queimado[k][j][(7-l)%4]=1;
						}
					}
				}
				
			}
		}
		
		/*if(M==5 & N==5){
			for(int i=0;i<4;i++){
				for(int j=0;j<M;j++){
					for(int k=0;k<N;k++){
						printf("%d ", queimado[j][k][i]);
					}
					printf("\n");
				}
				cout << endl; cout << endl;
			}
			
		}*/
		
		for(int i=0;i<M;i++)for(int j=0;j<N;j++)for(int k=0;k<4;k++) dist[i][j][k]=INF;
		dist[sx][sy][0]=0;
		
		memset(seen, 0, sizeof(seen));
		seen[sx][sy][0]=1;
		
		queue<no> q;
		q.push(no(sx, sy, 0));
				
		while(!q.empty()){
			no u = q.front(); q.pop();
			for(int i=0;i<4;i++){
				int nx = u.x + dx[i], ny = u.y + dy[i], nt = (u.t+1)%4;
				if(inside(nx, ny) && !seen[nx][ny][nt] && !queimado[nx][ny][nt] && !block(tab[nx][ny])){
					dist[nx][ny][nt] = dist[u.x][u.y][u.t] + 1;
					seen[nx][ny][nt] = 1;
					q.push(no(nx, ny, nt));
				}
			}	
		}
		/*
		for(int i=0;i<4;i++){
			cout << seen[gx][gy][i]<<"*"<<endl;
		}
		*/
		if(!seen[gx][gy][0] && !seen[gx][gy][1] && !seen[gx][gy][2] && !seen[gx][gy][3]){
			printf("Case #%d: impossible\n", caso);
		}
		else{
			int mindist = INF;
			for(int i=0;i<4;i++){
				if(seen[gx][gy][i]){
					mindist = min(mindist, dist[gx][gy][i]);
				}
			}
			printf("Case #%d: %d\n", caso, mindist);
		}
	}
	return 0;
}


#include <bits/stdc++.h>
 
using namespace std;
int n, m;
const int inf = 1e9+7;
int dx[4] = {-1,0,1,0}, dy[4] = {0,1,0,-1};
int vis[4][111][111], d[4][111][111];
string grid[4][111];
int in(int x, int y) { return x >= 0 && y >= 0 && x < n && y < m; }
int good(char c) { return c == '.' || c == 'X' || c == 'S' || c == 'G'; }
int fill(int x, int y, int dir) {
    for(int i=0;i<4;i++) {
        grid[i][x][y] = '#';
        int nx = x+dx[(dir+i)%4], ny = y+dy[(dir+i)%4];
        while(in(nx,ny) && good(grid[i][nx][ny])) {
            grid[i][nx][ny] = 'X';
            nx += dx[(dir+i)%4];
            ny += dy[(dir+i)%4];
        }
    }
}
void bfs(int x, int y) {
    queue <pair<int,pair<int,int> > > q;
    q.push(make_pair(0,make_pair(x,y)));
    d[0][x][y] = 0;
    vis[0][x][y] = 1;
    while(!q.empty()) {
        x = q.front().second.first;
        y = q.front().second.second;
        int t = q.front().first;
        q.pop();
        for(int i=0;i<4;i++) {
            int nx = x + dx[i], ny = y + dy[i], nt = (t+1)%4;
            if(in(nx,ny) && !vis[nt][nx][ny] && grid[nt][nx][ny] == '.') {
                d[nt][nx][ny] = d[t][x][y] + 1;
                vis[nt][nx][ny] = 1;
                q.push(make_pair(nt,make_pair(nx,ny)));
            }
        }
    }
}
int main() {
    int T;
    cin >> T;
    for(int t=1;t<=T;t++) {
        int gi, gj, si, sj;
        memset(vis,0,sizeof(vis));
        cin >> n >> m;
        for(int i=0;i<4;i++) for(int j=0;j<n;j++) for(int k=0;k<m;k++) d[i][j][k] = inf;
        printf("Case #%d: ", t);
        for(int i=0;i<n;i++) cin >> grid[0][i];
        for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
            if(grid[0][i][j] == 'S') si = i, sj = j, grid[0][i][j] = '.';
            if(grid[0][i][j] == 'G') gi = i, gj = j, grid[0][i][j] = '.';
        }
        for(int i=1;i<4;i++) for(int j=0;j<n;j++) grid[i][j] = grid[0][j];
        for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
            if(grid[0][i][j] == '^') fill(i,j,0);
            else if(grid[0][i][j] == '>') fill(i,j,1);
            else if(grid[0][i][j] == 'v') fill(i,j,2);
            else if(grid[0][i][j] == '<') fill(i,j,3);
        }
        bfs(si,sj);
        int k = inf;
        for(int i=0;i<4;i++) k = min(k,d[i][gi][gj]);
        if(k == inf) cout << "impossible" << endl;
        else cout <<  k << endl;
    }
    return 0;
}
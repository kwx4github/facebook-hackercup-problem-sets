import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class LaserMaze {
	public static void main(String[] args) {
		LaserMaze n = new LaserMaze();
		String path = "/Users/wish/Desktop/laser_maze.txt";
		String output = "/Users/wish/Desktop/laser_output.txt";
		n.solution(path, output);
	}
	public void solution(String path, String output){
		try{
			BufferedReader br = new BufferedReader(new FileReader(new File(path)));
			FileWriter fw = new FileWriter(new File(output));
			String s = br.readLine();
			int caseNumber = Integer.valueOf(s);
			String data = null;
			int i = 1;
			while((data = br.readLine()) != null && i <= caseNumber && !data.equals("")){
				String[] size = data.split(" ");
				int rows = Integer.valueOf(size[0]);
				int cols = Integer.valueOf(size[1]);
				char[][] arrs = new char[rows][cols];
				for(int j = 0; j < rows; j++){
					String temp = br.readLine();
					arrs[j] = temp.toCharArray();
				}
				
				StringBuilder result = new StringBuilder();
				String[] steps = {"false", "0"};
				helper(arrs, steps);
				result.append("Case #" + i++ + ": "+ (steps[0].equals("true") ? steps[1] : "impossible")  + "\n");
				fw.write(result.toString());
			}
			fw.close();
			br.close();
			
		}catch(FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}catch(NumberFormatException e){
			System.out.println("Invalid number");
		}
		
	}
	
	public void helper(char[][] arr, String[] result){
		char[][] arr1 = new char[arr.length][arr[0].length];
		char[][] arr2 = new char[arr.length][arr[0].length];
		char[][] arr3 = new char[arr.length][arr[0].length];
		char[][] arr4 = new char[arr.length][arr[0].length];
		int [][] record = new int[arr.length][arr[0].length];
		for(int i = 0; i < arr.length; i++)
		{
			for(int j = 0; j < arr[0].length; j++)
				record[i][j] = 1;
		}
		
		for(int i = 0; i < arr.length; i++){
			for(int j = 0; j < arr[0].length; j++){
				if (arr[i][j] == 'S')
				{
					arr1[i][j] = '.';
					arr2[i][j] = '.';
					arr3[i][j] = '.';
					arr4[i][j] = '.';
				}
				else
				{
					arr1[i][j] = arr[i][j];
					arr2[i][j] = arr[i][j];
					arr3[i][j] = arr[i][j];
					arr4[i][j] = arr[i][j];
				}
			}
		}
		for(int i = 0; i < arr.length; i++){
			for(int j = 0; j < arr[0].length; j++){
				if(arr[i][j] == '>'){
					for(int k = j; k < arr[0].length; k++){
						arr1[i][k] = '#';
					}
					for(int k = i; k < arr.length; k++){
						arr2[k][j] = '#';
					}
					for(int k = 0; k <= j; k++){
						arr3[i][k] = '#';
					}
					for(int k = 0; k <= i; k++){
						arr4[k][j] = '#';
					}
					
				}else if(arr[i][j] == 'v'){
					for(int k = i; k < arr.length; k++){
						arr1[k][j] = '#';
					}
					for(int k = 0; k <= j; k++){
						arr2[i][k] = '#';
					}
					for(int k = 0; k <= i; k++){
						arr3[k][j] = '#';
					}
					for(int k = j; k < arr[0].length; k++){
						arr4[i][k] = '#';
					}
				}else if(arr[i][j] == '<'){
					for(int k = 0; k <= j; k++){
						arr1[i][k] = '#';
					}
					for(int k = 0; k <= i; k++){
						arr2[k][j] = '#';
					}
					for(int k = j; k < arr[0].length; k++){
						arr3[i][k] = '#';
					}
					for(int k = i; k < arr.length; k++){
						arr4[k][j] = '#';
					}
				}else if(arr[i][j] == '^'){
					for(int k = 0; k <= i; k++){
						arr1[k][j] = '#';
					}
					for(int k = j; k < arr[0].length; k++){
						arr2[i][k] = '#';
					}
					for(int k = i; k < arr.length; k++){
						arr3[k][j] = '#';
					}
					for(int k = 0; k <= j; k++){
						arr4[i][k] = '#';
					}
					
				}		
			}
		}
		int i = 0;
		int j = 0;
		boolean find = false;
		for (j = 0; i < arr.length; i++){
			for (j = 0; j < arr[i].length; j++){
				if (arr[i][j] =='S') {
					find = true;
					break;
				}
			}
			if (find) 
				break;
		}
		if (find)
			findWay(result, arr, record, arr1, arr2, arr3, arr4, 0, i, j);
		else
			throw new RuntimeException("start not found!");
	}
	
	public boolean findWay(String[] result,char[][] arr , int[][] record, char[][] arr1, char[][] arr2, char[][] arr3, char[][] arr4, int steps, int i, int j){
		char[][] current = new char[arr1.length][arr1[0].length];
		int featureNumber;
		if(steps%4 == 0) 
		{
			current = arr1;
			featureNumber = 2;
		}
		else if(steps%4 == 1)
		{
			current = arr2;
			featureNumber = 3;
		}
		else if(steps%4 == 2)
		{
			current = arr3;
			featureNumber = 5;
		}
		else if(steps%4 == 3) 
		{
			current = arr4;
			featureNumber = 7;
		}
		else
		{
			throw new RuntimeException();
		}
		if(i < 0 || i > current.length-1 || j < 0 || j > current[0].length-1)  return false;
		if(record[i][j] % featureNumber == 0)
			return false;
		else
			record[i][j] *= featureNumber;
		if(current[i][j] == '.' || (arr[i][j] == 'S' && steps == 0)) 
			return findWay(result, arr, record, arr1, arr2, arr3, arr4, steps+1, i, j+1) ||
					findWay(result, arr, record, arr1, arr2, arr3, arr4, steps+1, i+1, j) ||
					findWay(result, arr, record, arr1, arr2, arr3, arr4, steps+1, i, j-1) ||
					findWay(result, arr, record, arr1, arr2, arr3, arr4, steps+1, i-1, j);
		else if(current[i][j] == 'G'){
			result[0] = "true";
			result[1] =String.valueOf(steps);
			return true;
		}
		else if (current[i][j] == '#')
			return false;
		else 
			return false;
	}
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
int a[4][105][105];
int dis[4][105][105];
int dire[5][2]={{-1,0},{0,1},{1,0},{0,-1},{0,0}};
char la[10]="^>v<";
int n,m;
struct node{
    int t,x,y,dis;
    node(int t,int x,int y,int dis){
        t=t;x=x;y=y;dis=dis;
    }
    bool operator < (const node& a)const
    {
        return a.dis<dis;
    }
};
priority_queue<node> q;
int inner(int x,int y)
{
    return (x>0&&x<=n&&y>0&&y<=m);
}
void pre(int p,int l,int x,int y)
{
    if (p==4) return ;
    pre(p+1,(l+1)%4,x,y);
    while(inner(x,y))
    {
        a[p][x][y]=1;
        x+=dire[l][0];
        y+=dire[l][1];
    }
}
int main(int argc, char const *argv[])
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T,ca=0;
    char t;
    int gx,gy;
    scanf("%d",&T);
    while(T--)
    {
        node tmp(0,0,0,0);
        memset(a,0,sizeof a);
        scanf("%d%d",&n,&m);
        while (!q.empty()) q.pop();
        memset(dis,0x3f,sizeof dis);
        for (int i=1;i<=n;i++)
            for (int j=1;j<=m;j++)
            {
                while ((t=getchar())=='\n');
                if (t=='#') a[0][i][j]=a[1][i][j]=a[2][i][j]=a[3][i][j]=1;
                for (int k=0;k<4;k++)
                    if (t==la[k])
                        pre(0,k,i,j);
                if (t=='S') {
                    tmp.t=0;
                    tmp.x=i;
                    tmp.y=j;
                    tmp.dis=0;
                    q.push(tmp);
                }
                if (t=='G'){gx=i;gy=j;}
            }
        while (!q.empty()) {
            tmp=q.top();
            q.pop();
            int tt=tmp.t;
            int tx=tmp.x;
            int ty=tmp.y;
            int tdis=tmp.dis;
            if (tdis==0x3f3f3f3f) continue;
            for (int i=0;i<4;i++)
            if (inner(tx+dire[i][0],ty+dire[i][1]))
            if (!a[(tt+1)%4][tx+dire[i][0]][ty+dire[i][1]])
            if ((tdis+1)<dis[(tt+1)%4][tx+dire[i][0]][ty+dire[i][1]]){
                tmp.t=(tt+1)%4;
                tmp.x=tx+dire[i][0];
                tmp.y=ty+dire[i][1];
                tmp.dis=tdis+1;
                q.push(tmp);
                dis[(tt+1)%4][tx+dire[i][0]][ty+dire[i][1]]=tdis+1;
            }
        }
        printf("Case #%d: ", ++ca);
        int ans=0x3f3f3f3f;
        for (int k=0;k<4;k++)
            ans=min(ans,dis[k][gx][gy]);
        if (ans-0x3f3f3f3f) 
            printf("%d\n",ans);
            else puts("impossible");

    }
    return 0;
}

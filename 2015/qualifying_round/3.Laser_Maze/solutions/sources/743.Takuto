#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <cstring>
#include <sstream>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>

#define rep(i,n) for(int i=0;i<(int)(n);++i)
#define iter(a) __typeof(a.begin())
#define FOR(it,a) for(iter(a)it=a.begin();it!=a.end();++it)
#define F first
#define S second
#define SZ(a) (int)((a).size())
#define sz(a) SZ(a)
#define pb(a) push_back(a)
#define mp(a,b) make_pair(a,b)
#define ALL(a) (a).begin(),(a).end()
using namespace std;

typedef long long ll;
typedef pair<int,int> PI;
typedef unsigned long long ull;

#define PR(...) do{cerr << "line : " << __LINE__ << endl; pr(#__VA_ARGS__, __VA_ARGS__);}while(0);
template<class T>
void pr(const string& name, T t){
  cerr << name << ": " << t << endl;
}

template<typename T, typename ... Types>
void pr(const string& names, T t, Types ... rest) {
  auto comma_pos = names.find(',');
  cerr << names.substr(0, comma_pos) << ": " << t << ", ";
  
  auto next_name_pos = names.find_first_not_of(" \t\n", comma_pos + 1);
  pr(string(names, next_name_pos), rest ...);
}

template<class T,class U> ostream& operator<< (ostream& o, const pair<T,U>& v){return o << "(" << v.F << ", " << v.S << ")";}
template<class T> ostream& operator<< (ostream& o, const vector<T>& v){o << "{";rep(i,SZ(v)) o << (i?", ":"") << v[i];return o << "}";}
template<class T> string to_s(const T& v){ostringstream is;is << v;return is.str();}
//                 <  ^  >  V
const int dx[] = { 0,-1, 0, 1};
const int dy[] = {-1, 0, 1, 0};
#define endl '\n'

string in[200];
int raser[4][200][200];
bool vis[4][200][200];

string solve(){
  int n,m;
  cin >> n >> m;
  rep(i, n) cin >> in[i];
  memset(raser,0,sizeof(raser));
  memset(vis, 0, sizeof(vis));
  string dir = "<^>v";  
  auto valid = [&](int x,int y){
    return
    0 <= x && x < n &&
    0 <= y && y < m &&
    in[x][y] != '#' &&
    dir.find(in[x][y]) == string::npos;
  };


  rep(i, n)rep(j, m){
    auto d = dir.find(in[i][j]);
    if(d == string::npos) continue;
    rep(k,4){
      int cx = i+dx[(d+k)&3];
      int cy = j+dy[(d+k)&3];
      while(valid(cx,cy)){
        raser[k][cx][cy] = 1;
        cx += dx[(d+k)&3];
        cy += dy[(d+k)&3];
      }
    }
  }

  queue<pair<int,PI> > q;
  rep(i, n)rep(j, m){
    if(in[i][j] != 'S') continue;
    q.push(mp(0,mp(i,j)));
  }

  while(!q.empty()){
    int cc = q.front().F;
    int cx = q.front().S.F;
    int cy = q.front().S.S;
    q.pop();
    if(vis[cc&3][cx][cy]) continue;
    vis[cc&3][cx][cy] = true;
    if(in[cx][cy] == 'G')
      return to_s(cc);
    
    rep(i,4){
      int nx = cx + dx[i];
      int ny = cy + dy[i];
      if(nx < 0 || nx >= n || ny < 0 || ny >= m ||
         in[nx][ny] == '#' ||
         dir.find(in[nx][ny]) != string::npos ||
         raser[(cc+1)&3][nx][ny]) continue;
      q.push(mp(cc+1,mp(nx,ny)));
    }
  }
  
  return "impossible";
}

int main(int argc, char *argv[])
{
  int t;
  cin >> t;
  rep(i, t){
    cout << "Case #" << i+1 << ": " << solve() << endl;
  }
  return 0;
}

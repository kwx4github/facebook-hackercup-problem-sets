// ================================================================================================
//  pFHC1501C.ac.cpp
//  Written by Luis Garcia, 2015
// ================================================================================================

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <iterator>
#include <numeric>
#include <iostream>

using namespace std;

#if defined _OJ_PROJECT
_BEGIN_PROBLEM(FHC1501C, "FHC1501C")
#endif // _OJ_PROJECT

#define infinite_loop for (;;)

int limits[4][100][100];
char grid[100][101];

int visited[4][100][100], qi[4 * 100 * 100], qj[4 * 100 * 100], qz[4 * 100 * 100];

int main() {
    int laserDirection[128];
    memset(laserDirection, -1, sizeof laserDirection);
    laserDirection['^'] = 0, laserDirection['>'] = 1, laserDirection['v'] = 2, laserDirection['<'] = 3;

    int lj[4] = {0, 1, 0, -1};
    int li[4] = {-1, 0, 1, 0};

    int di[4] = {-1, 0, 0, 1};
    int dj[4] = {0, -1, 1, 0};

    int T, N, M;
    scanf("%d", &T);

    for (int _T = 0; _T < T; ++_T) {
        scanf("%d %d", &N, &M);

        for (int i = 0; i < N; ++i) scanf("%s", grid[i]);

        int si = -1, sj = -1, gi = -1, gj = -1;

        memset(limits, 0, sizeof limits);
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < M; ++j)
                if (grid[i][j] == '#' || laserDirection[grid[i][j]] != -1)
                    limits[0][i][j] = limits[1][i][j] = limits[2][i][j] = limits[3][i][j] = 2;
                else if (grid[i][j] == 'S')
                    si = i, sj = j;
                else if (grid[i][j] == 'G')
                    gi = i, gj = j;

        for (int i = 0; i < N; ++i)
            for (int j = 0; j < M; ++j)
                if (laserDirection[grid[i][j]] != -1)
                    for (int k = 0; k < 4; ++k)
                        for (int _d = (k + laserDirection[grid[i][j]]) % 4, _i = i + li[_d], _j = j + lj[_d]; 0 <= _i && _i < N && 0 <= _j && _j < M && limits[k][_i][_j] != 2; _i += li[_d], _j += lj[_d])
                            limits[k][_i][_j] = 1;

        memset(visited, 0, sizeof visited);
        qi[0] = si, qj[0] = sj, qz[0] = 0;
        visited[qz[0]][qi[0]][qj[0]] = 1;

        for (int k = 0, ks = 1; k < ks; ++k) {
            int i = qi[k], j = qj[k], z = qz[k];
            for (int h = 0; h != 4; ++h) {
                int _i = i + di[h], _j = j + dj[h], _z = (z + 1) % 4;
                if (0 <= _i && _i < N && 0 <= _j && _j < M && limits[_z][_i][_j] == 0 && visited[_z][_i][_j] == 0) {
                    visited[_z][_i][_j] = visited[z][i][j] + 1;
                    qi[ks] = _i, qj[ks] = _j, qz[ks] = _z, ++ks;
                }
            }
        }

        int ans = 0x7fffffff;
        for (int k = 0; k < 4; ++k)
            if (visited[k][gi][gj] != 0 && visited[k][gi][gj] < ans)
                ans = visited[k][gi][gj];

        if (ans == 0x7fffffff)
            printf("Case #%d: impossible\n", _T + 1);
        else
            printf("Case #%d: %d\n", _T + 1, ans - 1);
    }

    return 0;
}

#if defined _OJ_PROJECT
_END_PROBLEM
#endif // _OJ_PROJECT

// ================================================================================================
//  End of file.
// ================================================================================================

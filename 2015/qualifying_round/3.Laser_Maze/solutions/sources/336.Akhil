//
//  main.cpp
//  FHC-LaserMaze
//
//  Created by Akhil Verghese on 1/9/15.
//  Copyright (c) 2015 Akhil Verghese. All rights reserved.
//

#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <map>

using namespace std;

int phases[4] = {1, 2, 4, 8};

vector <vector <int> > mapDeath;
vector <vector <int> > visitedPhase;
vector <string> mapInitial;
int startx, starty;
int xmax, ymax;

int row[4] = {-1, 0, 1, 0};
int col[4] = {0, 1, 0, -1};

struct node {
    int x, y, steps;
};

struct comp {
    bool operator () (node &lhs, node &rhs)  const {
        return (lhs.steps == rhs.steps)? false : lhs.steps > rhs.steps;
    }
};

void addNode (priority_queue<node, vector <node>, comp> &pq, int x, int y, int steps) {
    if (y < 0 || x < 0 || y >= ymax || x >= xmax) return;
    if (!(mapInitial[x][y] =='.' || mapInitial[x][y] == 'S' || mapInitial[x][y] == 'G')) return;
    int phase = phases[steps % 4];
    if ((mapDeath[x][y] & phase) == phase) return;
    node n = node();
    n.x = x;
    n.y = y;
    n.steps = steps;
    pq.push(n);
}

int djikstra ()
{
    vector <vector <int> > visited (xmax, vector <int> (ymax, 0));
    priority_queue<node, vector <node>, comp> pq;
    node n = node();
    n.x = startx;
    n.y = starty;
    n.steps = 0;
    
    pq.push(n);
    while (!pq.empty()) {
        node top = pq.top();
        int phase = phases[top.steps % 4];
        pq.pop();
        if ((visited [top.x][top.y] & phase) == phase) continue;
        visited[top.x][top.y] |= phase;
        if (mapInitial[top.x][top.y] == 'G') return top.steps;
        for (int i = 0; i < 4; i++) {
            addNode(pq, top.x + row[i], top.y + col[i], top.steps + 1);
        }
    }
    return -1;
}

bool canPass (int x, int y) {
    return (mapInitial[x][y] == '.' || mapInitial[x][y] == 'S' || mapInitial[x][y] == 'G');
}

void followLaser (int x, int y, char dir)
{
    int currentPhase;
    if (dir == '^') {
        currentPhase = 0;
    }
    else if (dir == '<') {
        currentPhase = 1;
    }
    else if (dir == 'v' || dir == 'V') {
        currentPhase = 2;
    }
    else {
        currentPhase = 3;
    }
    for (int i = x-1; i >=0; i--) {
        if (canPass(i, y))
            mapDeath[i][y]|=phases[currentPhase];
        else
            break;
    }
    currentPhase = (currentPhase + 1) %4;
    for (int i = y+1; i <ymax; i++) {
        if (canPass(x, i))
            mapDeath[x][i]|=phases[currentPhase];
        else
            break;
        
    }
    currentPhase = (currentPhase + 1) %4;
    for (int i = x+1; i <xmax; i++) {
        if (canPass(i, y))
            mapDeath[i][y]|=phases[currentPhase];
        else
            break;
        
    }
    currentPhase = (currentPhase + 1) %4;
    for (int i = y-1; i >=0; i--) {
        if (canPass(x, i))
            mapDeath[x][i]|=phases[currentPhase];
        else
            break;
        
    }
}

int main(int argc, const char * argv[]) {
    int t, x = 0;
    int ans;
    cin>>t;
    while (t--) {
        x++;
        cin>>xmax>>ymax;
        mapInitial = vector<string>(xmax);
        mapDeath = vector <vector <int> > (xmax, vector <int>(ymax, 0));
        for (int i = 0; i < xmax; i++) {
            cin>>mapInitial[i];
        }
        for (int i = 0; i < xmax; i++) {
            for (int j = 0; j < ymax; j++) {
                if (mapInitial[i][j] == 'S') {
                    startx = i;
                    starty = j;
                }
                else if (mapInitial[i][j] == '#' || mapInitial[i][j] =='.' || mapInitial[i][j] == 'G') {
                    
                }
                else {
                    followLaser(i, j, mapInitial[i][j]);
                }
            }
        }
        ans = djikstra();
        cout<<"Case #"<<x<<": "<<((ans == -1)? "impossible" : to_string(ans))<<endl;
    }
    return 0;
}

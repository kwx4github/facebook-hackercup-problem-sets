#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<queue>

using namespace std;

int dr[] = {-1,0,1,0};
int dc[] = {0,1,0,-1};
int R, C;
char visited[105][105][4];
char board[105][105];
int dist[105][105][4];
char laser[] = "^>v<";

struct cell
{
	int r, c, d;
};

bool ok(int r,int c)
{
	return (r>=0 && r<R && c>=0 && c<C && (board[r][c]=='.' || board[r][c]=='S' || board[r][c]=='G'));
}

void process(int r,int c,int dir)
{
	int i, j;
	for(i=0;i<4;i++)
	{
		int nr = r + dr[(dir+i)%4];
		int nc = c + dc[(dir+i)%4];
		while(ok(nr,nc))
			visited[nr][nc][i] = 1,
			nr += dr[(dir+i)%4],
			nc += dc[(dir+i)%4];
	}
}

int main()
{
	freopen("laser_maze.txt","r",stdin);
	freopen("maze.out","w",stdout);
	int T, cs, i, j, k;
	scanf("%d",&T);
	for(cs = 0; cs < T; cs++)
	{
		scanf("%d%d",&R,&C);
		for(i=0;i<R;i++)
			scanf("%s",board[i]);

		memset(visited,0,sizeof(visited));
		memset(dist,-1,sizeof(dist));

		cell u, v, g;
		for(i=0;i<R;i++)
			for(j=0;j<C;j++)
			{
				for(k=0;k<4;k++)
					if(board[i][j] == laser[k])
						process(i,j,k);
		
				if(board[i][j] == 'S')
					u.r = i, u.c = j;
				if(board[i][j] == 'G')
					g.r = i, g.c = j;
			}
		u.d = 0;

		visited[u.r][u.c][u.d] = 1;
		dist[u.r][u.c][u.d] = 0;
		queue<cell> q;
		q.push(u);
		while(!q.empty())
		{
			v = q.front();
			q.pop();
			
			for(i=0;i<4;i++)
			{
				u.r = v.r + dr[i];
				u.c = v.c + dc[i];
				u.d = (v.d + 1)%4;
				if(!ok(u.r,u.c))
					continue;
				if(visited[u.r][u.c][u.d])
					continue;
				visited[u.r][u.c][u.d] = 1;
				dist[u.r][u.c][u.d] = dist[v.r][v.c][v.d] + 1;
				q.push(u);
			}
		}

		int ans = 1<<29;
		for(i = 0; i < 4; i++)
			if(dist[g.r][g.c][i] != -1 && dist[g.r][g.c][i] < ans)
				ans = dist[g.r][g.c][i];
		if(ans < 1<<29)
			printf("Case #%d: %d\n",cs+1,ans);
		else
			printf("Case #%d: impossible\n",cs+1);
	}
	return 0;
}
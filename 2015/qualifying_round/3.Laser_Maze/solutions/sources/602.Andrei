#include <fstream>
#include <cstring>
#include <algorithm>
#include <queue>

#define pe pair<int, int>
#define fi first
#define se second
#define mp make_pair

using namespace std;

ifstream fin("fis.in");
ofstream fout("fis.out");

const int MAX_N = 110;
const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};

int n, m;

inline bool inborder(int x, int y) {
    return x >= 1 && x <= n && y >= 1 && y <= m;
}

char a[MAX_N][MAX_N];
int d[4][MAX_N][MAX_N];
int p[4][MAX_N][MAX_N];

int solve() {
    fin >> n >> m;
    for(int i = 1; i <= n; i++) {
        fin >> (a[i] + 1);
    }

    memset(d, 0, sizeof(d));
    memset(p, 0, sizeof(p));

    pe S, D;

    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if(a[i][j] == 'S') {
                S = mp(i, j);
                a[i][j] = '.';
            }
            else if(a[i][j] == 'G') {
                D = mp(i, j);
                a[i][j] = '.';
            }
            else if(a[i][j] == '#') {
                p[0][i][j] = p[1][i][j] = p[2][i][j] = p[3][i][j] = -1;
            }
            else if(a[i][j] == '^') {
                p[0][i][j] = 1;
                p[1][i][j] = 2;
                p[2][i][j] = 4;
                p[3][i][j] = 8;
            }
            else if(a[i][j] == '>') {
                p[0][i][j] = 2;
                p[1][i][j] = 4;
                p[2][i][j] = 8;
                p[3][i][j] = 1;
            }
            else if(a[i][j] == 'v') {
                p[0][i][j] = 4;
                p[1][i][j] = 8;
                p[2][i][j] = 1;
                p[3][i][j] = 2;
            }
            else if(a[i][j] == '<') {
                p[0][i][j] = 8;
                p[1][i][j] = 1;
                p[2][i][j] = 2;
                p[3][i][j] = 4;
            }
        }
    }

    for(int x = 0; x < 4; x++) {
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(p[x][i - 1][j] > 0 && a[i][j] == '.' && (p[x][i - 1][j] & 4)) {
                    p[x][i][j] = p[x][i][j] | 4;
                }
                if(p[x][i][j - 1] > 0 && a[i][j] == '.' && (p[x][i][j - 1] & 2)) {
                    p[x][i][j] = p[x][i][j] | 2;
                }
            }
        }

        for(int i = n; i >= 1; i--) {
            for(int j = m; j >= 1; j--) {
                if(p[x][i + 1][j] > 0 && a[i][j] == '.' && (p[x][i + 1][j] & 1)) {
                    p[x][i][j] = p[x][i][j] | 1;
                }
                if(p[x][i][j + 1] > 0 && a[i][j] == '.' && (p[x][i][j + 1] & 8)) {
                    p[x][i][j] = p[x][i][j] | 8;
                }
            }
        }
    }

    queue< pair<int, pe> > Q;
    Q.push(mp(0, S));
    d[0][S.fi][S.se] = 1;

    while(!Q.empty()) {
        int x = Q.front().fi;
        pe nod = Q.front().se;
        if(nod == D) {
            return d[x][D.fi][D.se];
        }
        Q.pop();
        for(int i = 0; i < 4; i++) {
            pe nnod = mp(nod.fi + dx[i], nod.se + dy[i]);
            if(inborder(nnod.fi, nnod.se) && !p[(x + 1) % 4][nnod.fi][nnod.se] && !d[(x + 1) % 4][nnod.fi][nnod.se]) {
                d[(x + 1) % 4][nnod.fi][nnod.se] = d[x][nod.fi][nod.se] + 1;
                Q.push(mp((x + 1) % 4, nnod));
            }
        }
    }
    return 0;
}

int main() {
    int t;
    fin >> t;
    for(int i = 1; i <= t; i++) {
        int a = solve();
        fout << "Case #" << i << ": ";
        if(a == 0) {
            fout << "impossible\n";
        }
        else {
            fout << a - 1 << '\n';
        }
    }
    return 0;
}

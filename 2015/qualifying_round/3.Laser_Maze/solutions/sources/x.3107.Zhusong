#include <iostream>
#include <fstream>
#include <vector>
#include <stack>
#include <queue>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <unordered_map>

using namespace std;

struct node {
    int x;
    int y;
};

int main() {
    ifstream filein;
    ofstream fileout;
    filein.open("laser_maze.txt",ios::in);
    //filein.open("A-small-attempt0.in",ios::in);
    //filein.open("A-large.in",ios::in);
    fileout.open("output",ios::out);
    int T;
    filein >> T;
    for (int z1 = 0;z1 < T;z1++) {
        fileout << "Case #" << z1+1 << ": ";
        int i,j,k,n,m,M,N,sx,sy,gx,gy;
        char c;
        int MM[4][110][110];
        memset(MM,0,sizeof(MM));
        filein >> M >> N;
        char MA[110][110];
        memset(MA,0,sizeof(MA));
        for (i = 1;i <= M;i++) {
            for (j = 1;j <= N;j++) filein >> MA[i][j];
        }
        bool cl = 1;
        for (i = 1;i <= M;i++) {
            for (j = 1;j <= N;j++) {
                c = MA[i][j];
                if (c == 'S') {
                    sx = i;
                    sy = j;
                    MM[0][i][j] = 2;
                    MM[1][i][j] = 0;
                    MM[2][i][j] = 0;
                    MM[3][i][j] = 0;
                }
                else if (c == 'G') {
                    gx = i;
                    gy = j;
                    MM[0][i][j] = -1;
                    MM[1][i][j] = -1;
                    MM[2][i][j] = -1;
                    MM[3][i][j] = -1;
                }
                else if (c == '#') {
                    MM[0][i][j] = 1;
                    MM[1][i][j] = 1;
                    MM[2][i][j] = 1;
                    MM[3][i][j] = 1;
                }
                else if (c == '<') {
                    MM[0][i][j] = 1;
                    MM[1][i][j] = 1;
                    MM[2][i][j] = 1;
                    MM[3][i][j] = 1;
                    cl = 1;
                    for (k = 1;k < j && cl == 1;k++) {
                        MM[0][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < i && cl == 1;k++) {
                        MM[1][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = j + 1;k <= N && cl == 1;k++) {
                        MM[2][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = i + 1;k <= M && cl == 1;k++) {
                        MM[3][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                }
                else if (c == 'v') {
                    MM[0][i][j] = 1;
                    MM[1][i][j] = 1;
                    MM[2][i][j] = 1;
                    MM[3][i][j] = 1;
                    cl = 1;
                    for (k = i + 1;k <= M && cl == 1;k++) {
                        MM[0][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < j && cl == 1;k++) {
                        MM[1][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < i && cl == 1;k++) {
                        MM[2][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = j + 1;k <= N && cl == 1;k++) {
                        MM[3][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                }
                else if (c == '>') {
                    MM[0][i][j] = 1;
                    MM[1][i][j] = 1;
                    MM[2][i][j] = 1;
                    MM[3][i][j] = 1;
                    cl = 1;
                    for (k = j + 1;k <= N && cl == 1;k++) {
                        MM[0][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = i + 1;k <= M && cl == 1;k++) {
                        MM[1][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < j && cl == 1;k++) {
                        MM[2][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < i && cl == 1;k++) {
                        MM[3][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                }
                else if (c == '^') {
                    MM[0][i][j] = 1;
                    MM[1][i][j] = 1;
                    MM[2][i][j] = 1;
                    MM[3][i][j] = 1;
                    cl = 1;
                    for (k = 1;k < i && cl == 1;k++) {
                        MM[0][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = j + 1;k <= N && cl == 1;k++) {
                        MM[1][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = i + 1;k <= M && cl == 1;k++) {
                        MM[2][k][j] = 1;
                        if (MA[k][j] != 'S' && MA[k][j] != '.' && MA[k][j] != 'G') cl = 0;
                    }
                    cl = 1;
                    for (k = 1;k < j && cl == 1;k++) {
                        MM[3][i][k] = 1;
                        if (MA[i][k] != 'S' && MA[i][k] != '.' && MA[i][k] != 'G') cl = 0;
                    }
                }
            }
        }
        stack<node> S,S_new;
        node p,p1;
        int x1,x2,x3,y1,y2,y3;
        if (1 > 0) {
            p.x = sx;
            p.y = sy;
            S.push(p);
            int t = 0,sol = -1,x;
            int ck = 0;
            while (ck == 0) {
                t++;
                x = t % 4;
                if (S.size() == 0) ck = -1;
                while (S.size() > 0) {
                    p = S.top();
                    S.pop();
                    x1 = p.x;
                    y1 = p.y;
                    if (x1 - 1 >= 1) {
                        x2 = x1 - 1;
                        if (MM[x][x2][y1] == -1) {
                            sol = t;
                            ck = 1;
                            MM[x][x2][y1] = 1;
                        }
                        else if (MM[x][x2][y1] == 0) {
                            MM[x][x2][y1] = t + 10;
                            p1.x = x2;
                            p1.y = y1;
                            S_new.push(p1);
                        }
                    }
                    if (x1 + 1 <= M) {
                        x2 = x1 + 1;
                        if (MM[x][x2][y1] == -1) {
                            sol = t;
                            ck = 1;
                            MM[x][x2][y1] = 1;
                        }
                        else if (MM[x][x2][y1] == 0) {
                            MM[x][x2][y1] = t + 10;
                            p1.x = x2;
                            p1.y = y1;
                            S_new.push(p1);
                        }
                    }
                    if (y1 - 1 >= 1) {
                        y2 = y1 - 1;
                        if (MM[x][x1][y2] == -1) {
                            sol = t;
                            ck = 1;
                            MM[x][x1][y2] = 1;
                        }
                        else if (MM[x][x1][y2] == 0) {
                            MM[x][x1][y2] = t + 10;
                            p1.x = x1;
                            p1.y = y2;
                            S_new.push(p1);
                        }
                    }
                    if (y1 + 1 <= N) {
                        y2 = y1 + 1;
                        if (MM[x][x1][y2] == -1) {
                            sol = t;
                            ck = 1;
                            MM[x][x1][y2] = 1;
                        }
                        else if (MM[x][x1][y2] == 0) {
                            MM[x][x1][y2] = t + 10;
                            p1.x = x1;
                            p1.y = y2;
                            S_new.push(p1);
                        }
                    }
                }
                S.swap(S_new);
            }
            if (ck == 1) {
                fileout << sol << endl;
                cout << sol << endl;
            }
            else {
                fileout << "impossible" << endl;
                cout << "impossible" << endl;
            }
        }
    }
    fileout.close();
}
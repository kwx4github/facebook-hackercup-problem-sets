//ALOK SHARMA

#include <bits/stdc++.h>
using namespace std;

#define gx getchar
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define i64 long long
#define MOD 1000000007
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl
#define inf 2000000000
#define lcm(a,b) ((a*b)/(__gcd(a,b)))

typedef pair<i64,i64> PLL;
typedef pair<int,int> PII;
typedef pair< pair<int,int>,int> TRI;

void scan(int &x)
{
    register int c = gx();
    x = 0;
    for(;(c<48 || c>57);c = gx());
    for(;c>47 && c<58;c = gx())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
}
int t,n,m,tt=1,dist[105][105][4],die[105][105],dx[4]={1,-1,0,0},dy[4]={0,0,1,-1};
string s[105];
bool vis[105][105][4];
map<char,int>mm;

int main()
{
	freopen("c.txt","r",stdin);
    freopen("out.txt","w",stdout);
	//ios_base::sync_with_stdio(0);
	cin>>t;
	mm['^']=0,mm['<']=1,mm['v']=2,mm['>']=3;
	
	while(t--){
		memset(vis,0,sizeof vis);
		memset(die,0, sizeof die);
		
		cin>>n>>m;
		for(int i=0;i<n;i++){
			cin>>s[i];
		}
		int x,y,mask;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(s[i][j]=='S'){
					x=i,y=j;
				}
			}
		}
		
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(s[i][j]=='^'||s[i][j]=='<' ||s[i][j]=='v' ||s[i][j]=='>'){
					//up
					for(int k=i-1;k>=0;k--){
						if(s[k][j]=='G' ||s[k][j]=='S' ||s[k][j]=='.'){
							die[k][j]|=(1<<mm[s[i][j]]);
						}
						else break;
					}
					//rigth
					for(int k=j+1;k<m;k++){
						if(s[i][k]=='G' ||s[i][k]=='S' ||s[i][k]=='.'){
							die[i][k]|=(1<<((mm[s[i][j]]+1)%4));
						}
						else
						break;
					}
					//down
					for(int k=i+1;k<n;k++){
						if(s[k][j]=='G' ||s[k][j]=='S' ||s[k][j]=='.'){
							die[k][j]|=(1<<((mm[s[i][j]]+2)%4));
						}
						else break;
					}
					//left
					for(int k=j-1;k>=0;k--){
						if(s[i][k]=='G' ||s[i][k]=='S' ||s[i][k]=='.'){
							die[i][k]|=(1<<((mm[s[i][j]]+3)%4));
						}
						else
						break;
					}
				}
			}
		}
		
		bool flag=0;
		int ans=0;
		queue<TRI>qq;
		qq.push(mp(mp(x,y),0));
		vis[x][y][0]=1;
		dist[x][y][0]=0;
		while(!qq.empty()){
			TRI u=qq.front();
			x=u.ff.ff,y=u.ff.ss,mask=u.ss;
			int d=dist[x][y][mask];
			//cout<<x<<" "<<y<<" "<<mask<<" "<<dist[x][y][mask]<<endl;
			qq.pop();
			if(s[x][y]=='G'){
				flag=1;
				ans=dist[x][y][mask];
				break;
			}
			
			for(int i=0;i<4;i++){
				int p=x+dx[i],q=y+dy[i];
				if(p>=0 && p<n && q>=0 && q<m && (s[p][q]=='S' ||s[p][q]=='G' || s[p][q]=='.')){
					if(vis[p][q][(d+1)%4]==0 && (die[p][q] & 1<<((d+1)%4))==0){
						qq.push(mp(mp(p,q),(d+1)%4));
						vis[p][q][(d+1)%4]=1;
						dist[p][q][(d+1)%4]=dist[x][y][mask]+1;					
					}
				}				
			}
		}
		cout<<"Case #"<<tt<<": ";
		if(flag==0){
			cout<<"impossible"<<endl;
		}
		else{
			cout<<ans<<endl;
		}
		tt++;
	}
}			



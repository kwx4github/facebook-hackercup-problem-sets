#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
#define INF 1000000000
using namespace std;
int n, m;
string input[100];
int dir[100][100];
bool map[4][100][100];
int di[4] = {-1, 0, 1, 0};
int dj[4] = {0, 1, 0, -1};
bool inside(int i, int j) {
    return (i >= 0 && j >= 0 && i < n && j < m);
}
void mov(int &i, int &j, int where) {
    i += di[where];
    j += dj[where];
}
void compute(int k) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            map[k][i][j] = true;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (input[i][j] == '#')
                map[k][i][j] = false;
            if (dir[i][j] != -1) {
                int ni = i;
                int nj = j;
                while (inside(ni, nj) && input[ni][nj] != '#') {
                    map[k][ni][nj] = false;
                    mov(ni, nj, dir[i][j]);
                }
            }
        }
    }
}
void rotate() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (dir[i][j] != -1) {
                dir[i][j] = (dir[i][j] + 1) % 4;
            }
        }
    }
}
int si, sj, gi, gj;
int dist[4][100][100];

void BFS() {
    queue<int> Q[3];
    for (int k = 0; k < 4; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dist[k][i][j] = INF;
            }
        }
    }
    Q[0].push(0);
    Q[1].push(si);
    Q[2].push(sj);
    dist[0][si][sj] = 0;
    while (!Q[0].empty()) {
        int ni = Q[1].front();
        int nj = Q[2].front();
        int nk = Q[0].front();
        Q[0].pop(); Q[1].pop(); Q[2].pop();
        for (int k = 0; k < 4; k++) {
            int nexti = ni;
            int nextj = nj;
            mov(nexti, nextj, k);
            int nextk = (nk + 1) % 4;
            if (inside(ni, nj) && dist[nk][ni][nj] + 1 < dist[nextk][nexti][nextj] && map[nextk][nexti][nextj]) {
                dist[nextk][nexti][nextj] = dist[nk][ni][nj] + 1;
                Q[0].push(nextk); Q[1].push(nexti); Q[2].push(nextj);
            }
        }
    }
}


int main() {
    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    for (int test = 1; test <= t; test++) {
        cin >> n >> m;

        for (int i = 0; i < n; i++) {
            cin >> input[i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dir[i][j] = -1;
                if (input[i][j] == '^') {
                    dir[i][j] = 0;
                }
                if (input[i][j] == '>') {
                    dir[i][j] = 1;
                }
                if (input[i][j] == 'v') {
                    dir[i][j] = 2;
                }
                if (input[i][j] == '<') {
                    dir[i][j] = 3;
                }
                if (input[i][j] == 'S') {
                    si = i;
                    sj = j;
                }
                if (input[i][j] == 'G') {
                    gi = i;
                    gj = j;
                }
            }
        }
        for (int k = 0; k < 4; k++) {
            compute(k);
            rotate();
        }
        BFS();
        int best = INF;
        for (int i = 0; i < 4; i++) {
            best = min(best, dist[i][gi][gj]);
        }
        if (best == INF) {
            cout << "Case #" << test << ": impossible\n";
        } else {
            cout << "Case #" << test << ": " << best << "\n";
        }
    }
    return 0;
}




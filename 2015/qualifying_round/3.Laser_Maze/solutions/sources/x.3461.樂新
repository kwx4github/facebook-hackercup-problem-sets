#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>

using namespace std;

char map[4][1000][1000];
int vis[4][1000][1000];
int t;
int xx,yy;
int sx,sy,gx,gy;
queue<int> qn;
queue<int> qx;
queue<int> qy;

void printv(int n){
	for(int i = 0; i < xx; ++i){
		for(int j = 0; j < yy; ++j){
			printf("%d ",vis[n][i][j]);
		}
	printf("\n");
	}
	printf("\n");
};

int bfs(int x,int y){
	while(!qn.empty()){
		qn.pop();
	}
	while(!qx.empty()){
		qx.pop();
	}
	while(!qy.empty()){
		qy.pop();
	}
	qn.push(0);
	qx.push(x);
	qy.push(y);
	vis[0][x][y] = 0;
	while(!qx.empty()){
		int n = qn.front();
		int x = qx.front();
		int y = qy.front();
		//printf("%d %d %d\n",n,x,y);
		qn.pop();
		qx.pop();
		qy.pop();
		//checking
		if((0 <= x)&&(x < xx)&&(0 <= y)&&(y < yy)){
			if(x != sx && y != sy){
			if(map[n][x][y] != '.'){
				printf("die or wall\n");
				continue;
			}
			}
			if((x == gx)&&(y == gy)){
				return vis[n][x][y];
			}
		}else{
			//printf("out of bound\n");
			continue;
		}
		// explore
		int tn = (n+1)%4;
		int dx[4] = {1,-1,0,0};
		int dy[4] = {0,0,1,-1};
		for(int i = 0; i < 4; ++i){
			int tx = x + dx[i];
			int ty = y + dy[i];
			if(vis[tn][tx][ty] != -1) {
	//			printf("visited\n");
				continue;
			}
			if(map[tn][tx][ty] != '.') {
	//			printf("cannot move\n");
				continue;
			}
			vis[tn][tx][ty] = vis[n][x][y] + 1;
			qn.push(tn);	
			qx.push(tx);	
			qy.push(ty);	
		}
	}
	return -1;
}

void printm(int n){
	for(int i = 0; i < xx; ++i){
		printf("%s\n",map[n][i]);
	}
	printf("\n");
};

void ext(int m,int x,int y,int dx,int dy){
	x += dx;
 	y += dy;
	while((0 <= x)&&(x < xx)&&(0 <= y)&&(y < yy)){
		if(map[m][x][y]!='.'){
			return;
		}else{
			map[m][x][y]='*';	
		}
		x += dx;
 		y += dy;
	}
}
void laser(){
	for(int n = 0 ; n < 4; ++n){
		for(int i = 0; i < xx; ++i){
			for(int j = 0; j < yy; ++j){
				switch(map[n][i][j]){
					case '^':
						ext(n,i,j,-1,0);
					break;
					case '>':
						ext(n,i,j,0,1);
					break;
					case 'v':
						ext(n,i,j,1,0);
					break;
					case '<':
						ext(n,i,j,0,-1);
					break;
				}
			}
		}
	}
}

int main(){
	scanf("%d",&t);
	for(int tt = 1; tt <= t; ++tt){
		memset(map,0,sizeof(map));
		memset(vis,-1,sizeof(vis));
		scanf("%d%d",&xx,&yy);	
		for(int i = 0; i < xx; ++i){
			scanf("%s",map[0][i]);
		}
		//rotate
		for(int n = 1 ; n < 4; ++n){
			for(int i = 0; i < xx; ++i){
				for(int j = 0; j < yy; ++j){
					char c;
					switch(map[n-1][i][j]){
						case '^':
							c = '>';
						break;
						case '>':
							c = 'v';
						break;
						case 'v':
							c = '<';
						break;
						case '<':
							c = '^';
						break;
						default:
							c = map[n-1][i][j];
						break;
					}
					map[n][i][j] = c;
				}
			}
		}
		for(int n = 0; n < 4; ++n){
			for(int i = 0; i < xx; ++i){
				for(int j = 0; j < yy; ++j){
					if(map[n][i][j] == 'S'){
						sx = i;
						sy = j;
						map[n][i][j] = '.';
					}
					if(map[n][i][j] == 'G'){
						gx = i;
						gy = j;
						map[n][i][j] = '.';
					}
				}
			}
		}
		laser();
		int ret[4];
		int ans = -1;
		/*
		memset(vis,0,sizeof(vis));
		ret[0] = dfs(sx+1,sy,1);
		memset(vis,0,sizeof(vis));
		ret[1] = dfs(sx,sy+1,1);
		memset(vis,0,sizeof(vis));
		ret[2] = dfs(sx-1,sy,1);
		memset(vis,0,sizeof(vis));
		ret[3] = dfs(sx,sy-1,1);
		for(int i = 0; i < 4; ++i){
			if(ret[i] > 0){
				if(ans == -1){
					ans = ret[i];
				} else {
					if(ans > ret[i]){
						ans = ret[i];
					}
				}
			}
		}
		*/
		ans = bfs(sx,sy);
		if(ans >0){
			printf("Case #%d: %d\n",tt,ans);
		}else{
			printf("Case #%d: impossible\n",tt);
		}
	}
	return 0;
}

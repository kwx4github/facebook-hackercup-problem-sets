 
#define LOCAL
#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <numeric>
#include <cstring>
#include <climits>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>

using namespace std; 
 

typedef long long LL;
//typedef long double DB;
typedef double DB;
typedef unsigned int UINT;
typedef unsigned long long ULL;

typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<string> VS;
typedef vector<LL> VL;
typedef vector<DB> VF;
typedef set<int> SI;
typedef set<string> SS;
typedef map<int, int> MII;
typedef map<string, int> MSI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef vector<PII> VII;
typedef vector<VI> VVI;
typedef vector<VII> VVII;


//sorting q sort function 
int ascend (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
int descend (const void * a, const void * b)
{
  return ( *(int*)b - *(int*)a );
} 
 
 
 //printf and scanf 
 #define TRUE 1
 #define DEST 2
 #define FALSE 0
 
 int m,n,dx,dy,sx,sy;
 char tg[4][101][101],g[101][101];
 bool visited[4][101][101];
 struct xy{
 	int x;int y;
 };
 
 struct xy q[2][4*100*100];
 bool cq;
 int bfs( int nle,int l ){
 	
 	bool nq=!cq;
 	int nl=0;
 	for(int i=0;i<nle;i++){
 		int x,y;
 		x=q[cq][i].x;
		y=q[cq][i].y;
		
		if(x<0 || x>=n || y<0 || y>=m )
			continue;
			
		char tmp=tg[l%4][y][x];
		
		if(tmp == '#' ||tmp == '^' ||tmp == 'v' ||tmp == '>' ||tmp == '<' )	
			continue;
			
		if(tg[l%4][y][x]=='G')
			return l;
		
		if(!visited[l%4][y][x]){
			
								
			visited[l%4][y][x]=true;
			
			q[nq][nl].x=x+1;
			q[nq][nl].y  =y;
			nl++;
			
			q[nq][nl].x=x-1;
			q[nq][nl].y  =y;
			nl++;
			
			q[nq][nl].x=x;
			q[nq][nl].y  =y+1;
			nl++;
			
			q[nq][nl].x=x;
			q[nq][nl].y  =y-1;
			nl++;
			
			
		}
				
					
 	}
 	cq=!cq;
	if(nl!=0)
	return bfs(nl,l+1);
	else 
	return -1;	
  
 }
 
 
 
 
int main(){
   
   int t,z=0;
   cin>>t;
   while(t--)
   {
   	for(int i=0;i<4;i++)
   		for(int j=0;j<m;j++)
   			for(int k=0;k<n;k++){
   			visited[i][j][k]=false;
   			tg[i][j][k]=0;
   			}
   			
   	cin>>m>>n;
   	
   	for(int i=0;i<m;i++){
   		 cin>> g[i];		
   					
   	}
   	
   	for(int i=0;i<4;i++){
   		for(int j=0;j<m;j++)
   			for(int k=0;k<n;k++)
   				tg[i][j][k]=g[j][k];  		 
   	}
   	 
   	
   	for(int i=0;i<4;i++){
   		for(int j=0;j<m;j++){
   			for(int k=0;k<n;k++){
   				if( g[j][k]=='>' ){
   					tg[i][j][k]='>';
   					for(int l=k+1;l<n;l++){
   						if(g[j][l]=='.' || g[j][l]=='S' || g[j][l]=='G' )
   							tg[i][j][l]='>';
   						else
   							break;	
   							
   					}
   					g[j][k]='v';
   				}
   				
   				else if( g[j][k]=='v' ){
   					tg[i][j][k]='v';
   					for(int l=j+1;l<m;l++){
   						if(g[l][k]=='.' || g[j][l]=='S' || g[j][l]=='G')
   							tg[i][l][k]='v';
   						else
   							break;	
   							
   					}
   					g[j][k]='<';
   				}
   				
   				else if( g[j][k]=='<' ){
   					tg[i][j][k]='<';
   					for(int l=k-1;l>=0;l--){
   						if(g[j][l]=='.' || g[j][l]=='S' || g[j][l]=='G')
   							tg[i][j][l]='<';
   						else
   							break;	
   							
   					}
   					g[j][k]='^';
   				} 
   				
   				else if( g[j][k]=='^' ){
   					tg[i][j][k]='^';
   					for(int l=j-1;l>=0;l--){
   						if(g[l][k]=='.' || g[j][l]=='S' || g[j][l]=='G' )
   							tg[i][l][k]='^';
   						else
   							break;	
   							
   					}
   					g[j][k]='>';
   				} 
   				   				 				
   			}
   			 
   		}
 
   		 
   		 
   	}
   	
   	int l=0,nl=0;
   	for(int i=0;i<m;i++){
   		for(int j=0;j<n;j++){
   		 if(g[i][j]=='S')
   		 {
   		 sx=j;sy=i;
   		 break;
   		 }
   		}
   	}
   	
   	q[cq][nl].x=sx+1;
	q[cq][nl].y=sy;
	nl++;
		
	q[cq][nl].x=sx-1;
	q[cq][nl].y=sy;
	nl++;
		
	q[cq][n].x=sx;
	q[cq][n].y=sy+1;
	nl++;
			
	q[cq][nl].x=sx;
	q[cq][nl].y=sy-1;
	nl++;
   	
   	l=bfs(nl,1);
   	
   	if(l==-1)
   	cout<<"Case #"<<++z<<": impossible"<<endl; 
   	else
   	cout<<"Case #"<<++z<<": "<<l<<endl;  
   	
   	for(int i=0;i<4;i++)
   		for(int j=0;j<=m;j++)
   			for(int k=0;k<=n;k++){
   			visited[i][j][k]=false;
   			tg[i][j][k]=0;
   			}
   	 	cq=false;
   	 	for(int i=0;i<4*100*100;i++)
   	 	{q[0][i].x=0;q[0][i].y=0;q[1][i].x=0;q[1][i].y=0;}	
 	 
   }
}









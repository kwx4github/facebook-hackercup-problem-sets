#include<cstring>
#include<map>
#include<numeric>
#include<sstream>
#include<cmath>
#include<stack>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<iostream>
#include <set>
#include <queue>
#include <string>
#include <cctype>

using namespace std;

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb(x) push_back((x))
#define REP(i,x,y) for(int i = x; i < int(y); i++)
#define FOR(it,A) for(typeof (A.begin()) it = A.begin(); it!= A.end(); it++)
#define CUA(x) (x) * (x)
#define mp(x,y) make_pair((x),(y))
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
#define I (1LL << 40)
#define sz size()
#define oo (1<<30)
#define EPS (1e-9)

typedef pair<int, int> pii;
typedef pair<int,pii > piii;

typedef vector<int> vi;

const int maxN = 101;

bool seen[maxN][maxN][4];
int R, C;
char mapa[maxN][maxN][4];
int hh[maxN][maxN][4];
int sx,sy,gx,gy;

int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

void bfs(int xx,int yy){
	piii s = piii(xx,pii(yy,0));
	queue<piii> q;
	q.push(s);
	hh[xx][yy][0] = 0;
	seen[xx][yy][0] = true;
	while(!q.empty()){
		piii u = q.front();
		q.pop();
		int x = u.fst, y = u.snd.fst, m = u.snd.snd;
		//cout<< "visito: "<<x<<" "<<y<<" "<<m<<endl;

		REP(i,0,4){
			int vx = x+dx[i];
			int vy = y+dy[i];
			if(vx>=R or vx<0 or vy>=C or vy<0) continue;
			int mm = (m+1) %4;
			if(seen[vx][vy][mm]==false and mapa[vx][vy][mm]=='.'){
				hh[vx][vy][mm] = 1 + hh[x][y][m];
				q.push(piii(vx,pii(vy,mm)));
				seen[vx][vy][mm] = true;
			}
		}
	}
}

int main(){
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	int TT;
	cin >> TT;
	int ans = 0;

	REP(caso,0,TT){
		cin >> R >> C;
		string line;
		clr(seen,false);
		clr(hh,-1);
		REP(i,0,R){
			cin >> line;
			REP(j,0,C){
				char cc = line[j];
				if( cc == 'S' ) sx=i, sy=j;
				if( cc == 'G' ) gx=i, gy=j;
				mapa[i][j][0] = (cc=='S' or cc=='G')? '.' : line[j];
				REP(m,1,4) mapa[i][j][m] = mapa[i][j][0];
				switch (line[j]) {
					case '^':	mapa[i][j][1] = '>'; mapa[i][j][2] = 'v'; mapa[i][j][3] = '<'; break;
					case '>':	mapa[i][j][1] = 'v'; mapa[i][j][2] = '<'; mapa[i][j][3] = '^'; break;
					case 'v':	mapa[i][j][1] = '<'; mapa[i][j][2] = '^'; mapa[i][j][3] = '>'; break;
					case '<':	mapa[i][j][1] = '^'; mapa[i][j][2] = '>'; mapa[i][j][3] = 'v'; break;
					default: break;
				}
			}
		}

		REP(m,0,4){
			REP(i,0,R){
				REP(j,0,C){
					switch (mapa[i][j][m]) {
						case '^':
							for(int ii=i-1; ii>=0; ii--)
								if(mapa[ii][j][m]=='.' or mapa[ii][j][m]=='-') mapa[ii][j][m] = '-';
								else break;
							break;
						case '>':
							for(int jj=j+1; jj<C; jj++)
								if(mapa[i][jj][m]=='.' or mapa[i][jj][m]=='-') mapa[i][jj][m] = '-';
								else break;
							break;
						case 'v':
							for(int ii=i+1; ii<R; ii++)
								if(mapa[ii][j][m]=='.' or mapa[ii][j][m]=='-') mapa[ii][j][m] = '-';
								else break;
							break;
						case '<':
							for(int jj=j-1; jj>=0; jj--)
								if(mapa[i][jj][m]=='.' or mapa[i][jj][m]=='-') mapa[i][jj][m] = '-';
								else break;
							break;
						default:
							break;
					}
				}
			}
		}
		/*
		REP(m,0,4){
			REP(i,0,R){
				REP(j,0,C){
					cout << mapa[i][j][m];
				}
				cout<<endl;
			}
			cout<<"************"<<endl;
		}*/

		bfs(sx,sy);
		bool si=false;
		ans = oo;
		REP(i,0,4)
			if(seen[gx][gy][i]==true){
				si=true;
				ans = min(ans, hh[gx][gy][i]);
			}

		if(si) printf("Case #%d: %d\n",caso+1, ans);
		else printf("Case #%d: impossible\n",caso+1);
	}

	return 0;
}














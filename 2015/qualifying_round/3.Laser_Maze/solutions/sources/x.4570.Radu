#include <bits/stdc++.h>
#include <queue>

using namespace std;
ifstream f("laser.in");
ofstream g("laser.out");

int T,N,M,ok;
pair <int,int> start,finish,now;

const int dx[] = {+1,0,-1,0};
const int dy[] = {0,-1,0,+1};

queue <pair< pair<int,int>,int> > q;

int maze[5][105][105];
int init [105][105];
// 0 - freedom
// 1 - wall
// 2,3,4,5 - laser
// start and finish are 0

inline void process_laser(int x,int y,int z,int p)
{
    z += p;
    z %= 4;

    while ( (init[x][y] != 1) && (x <= N) && (x > 0) && (y > 0) && (y <= M) )
    {
        maze[p][x][y] = 1;
        x += dx[z];
        y += dy[z];
    }
}

int main()
{
    f >> T;
        for (int k = 0; k < T; k++)
        {
            g << "Case #"<<k+1 << ": ";
                f >> N >> M;
                char c;
                // read matrix
                for (int i = 1; i <= N ; i++)
                {
                    for (int j = 1; j <= M ; ++j)
                    {
                        f >> c;
                        init[i][j] = 0;
                        if (c == 'S') {start.first = i; start.second = j; }
                        if (c == 'G') {finish.first = i; finish.second = j; }
                        if (c == '#') init[i][j] = 1;
                            else
                            {
                                if (c == '^') init[i][j] = 2;
                                if (c == '>') init[i][j] = 3;
                                if (c == 'v') init[i][j] = 4;
                                if (c == '<') init[i][j] = 5;
                            }
                    }
                }
                // processing lasers
               for (int t = 1; t <= 4 ; t++ )
                for (int i = 1; i <= N ; i++)
                    for (int j = 1; j <= M ; ++j)
                {
                    if (init[i][j] == 1) maze[t][i][j] = 1;
                        else  if (init[i][j] >= 2) process_laser(i,j,init[i][j],t);
                }
            // check maze for exit
            q.push(make_pair(start,0) );
            ok = 0;
             while (!q.empty())
             {
                now.first = q.front().first.first;
                now.second = q.front().first.second;
                int stare = q.front().second;
                int val = maze[stare][now.first][now.second];
                q.pop();
                    stare++;
                    if (stare == 5) stare = 1;

                        for (int t = 0; t < 4; t++)
                        {
                            int xx,yy;
                            xx = now.first + dx[t];
                            yy = now.second + dy[t];
                            if ((xx > 0) && (xx <= N) && (yy > 0) && (yy <= M) )
                            {
                            if (maze[stare][xx][yy] == 0 )
                            {
                                if ( (xx == finish.first) && (yy == finish.second) )
                                {
                                    g  << val + 1 << '\n';
                                    ok = 1;
                                    while (!q.empty()) q.pop();
                                    break;
                                }
                                maze[stare][xx][yy] = val + 1;
                                q.push(make_pair(make_pair(xx,yy),stare ) );
                            }
                            }
                        }
             }


            if (!ok) g << "impossible\n";

            for (int t = 1; t <= 4 ; ++t)
                for (int i  =1;i <= N; ++i )
                    for (int j = 1; j <= M ; j++)
                        maze[t][i][j] = 0;
        }

    return 0;
}

#pragma comment(linker, "/STACK:256000000")
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>

#define pb push_back
#define ll long long
#define pll pair<ll, ll>
#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define _MOD 1000000007LL
#define MOD(x) (((x) + 2LL * (_MOD)) % (_MOD))
#define INF (1e9)
#define LINF (1e16)
#define EPS (1e-8)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
typedef unsigned long long ull;
typedef long double ldd;

using namespace std;

int n, m;
int f[110][110][4];
char c[110][110];
int sx, sy, fx, fy;
int dx[] = { -1,  0,  1,  0, };
int dy[] = {  0,  1,  0, -1, };

bool check(int cx, int cy, int lx, int ly, int st)
{
	lx += dx[st];
	ly += dy[st];
	while (0 <= lx && lx < n && 0 <= ly && ly < m)
	{
		if (c[lx][ly] != '.')
			break;
		if (lx == cx && ly == cy)
			return 0;
		lx += dx[st];
		ly += dy[st];
	}
	return 1;
}

void dyn(int cx, int cy, int st, int cur)
{
	if (cx < 0 || cx >= n || cy < 0 || cy >= m || c[cx][cy] != '.')
		return;

	if (f[cx][cy][st] != -1 && f[cx][cy][st] <= cur)
		return;

	f[cx][cy][st] = cur;

	if (cur != 0)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if ('0' <= c[i][j] && c[i][j] <= '9' && !check(cx, cy, i, j, (c[i][j] - '0' + st) % 4))
				{
					if (cx == fx && cy == fy)
						f[cx][cy][st] = -1;
					return;
				}
			}
		}
	}

	for (int i = 0; i < 4; i++)
		dyn(cx + dx[i], cy + dy[i], (st + 1) % 4, cur + 1);
}

void solve()
{
	memset(f, -1, sizeof f);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> c[i][j];
			if (c[i][j] == 'S')
			{
				sx = i;
				sy = j;
				c[i][j] = '.';
			}
			if (c[i][j] == 'G')
			{
				fx = i;
				fy = j;
				c[i][j] = '.';
			}
			if (c[i][j] == '^')
				c[i][j] = '0';
			if (c[i][j] == '>')
				c[i][j] = '1';
			if (c[i][j] == 'v')
				c[i][j] = '2';
			if (c[i][j] == '<')
				c[i][j] = '3';
		}
	}
	dyn(sx, sy, 0, 0);
	int res = -1;
	for (int i = 0; i < 4; i++)
		if (f[fx][fy][i] != 0 && f[fx][fy][i] != -1 && (res == -1 || f[fx][fy][i] < res))
			res = f[fx][fy][i];

	if (res != -1)
	{
		cout << res;
	}
	else
	{
		cout << "impossible";
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
	freopen ("input.txt","r",stdin);freopen ("output.txt","w",stdout);

	int tt;
	cin >> tt;
	for (int ttt = 0; ttt < tt; ttt++)
	{
		cout << "Case #" << ttt + 1 << ": ";
		solve();
		cout << endl;
	}

	return 0;
}
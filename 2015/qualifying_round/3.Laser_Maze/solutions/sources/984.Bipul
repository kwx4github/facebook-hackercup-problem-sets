import java.util.Scanner;
class Maze{
	byte type=0;
	int path=10000;
}
public class MazeDemo{
	static void tracePath(Maze A[][],int h,int b,int i,int j,Maze goal){
		if(A[i][j]==goal)
			return;
		int n = A[i][j].path+1;
		int h1 = 1 << ((n-1)%4);
		int h2 = 1 << ((n)%4);
		int h3 = 1 << ((n+1)%4);
		if(j+1!=b && A[i][j+1].type!=15 && A[i][j+1].path>n){
			if((A[i][j+1].type & h1)==0){
			A[i][j+1].path=n;
			tracePath(A,h,b,i,j+1,goal);
			}
			else if(A[i][j+1].path>n+2 && (A[i][j+1].type & h3)==0 && (A[i][j].type & h2)==0 &&(( i!=0 &&(A[i-1][j].type & h1)==0) || ( i+1!=h && (A[i+1][j].type & h1)==0) || ( j!=0 && (A[i][j-1].type & h1)==0))){
				A[i][j+1].path=n+2;
				tracePath(A,h,b,i,j+1,goal);
			}
		}
		if(i+1!=h && A[i+1][j].type!=15 && A[i+1][j].path>n){
			if((A[i+1][j].type & h1)==0){
			A[i+1][j].path=n;
			tracePath(A,h,b,i+1,j,goal);
			}
			else if(A[i+1][j].path>n+2 && (A[i+1][j].type & h3)==0 && (A[i][j].type & h2)==0 &&(( i!=0 &&(A[i-1][j].type & h1)==0) || ( j+1!=b && (A[i][j+1].type & h1)==0) || ( j!=0 && (A[i][j-1].type & h1)==0))){
				A[i+1][j].path=n+2;
				tracePath(A,h,b,i+1,j,goal);
			}
		}
		if(j!=0 && A[i][j-1].type!=15 && A[i][j-1].path>n){
			if((A[i][j-1].type & h1)==0){
			A[i][j-1].path=n;
			tracePath(A,h,b,i,j-1,goal);
			}
			else if(A[i][j-1].path>n+2 && (A[i][j-1].type & h3)==0 && (A[i][j].type & h2)==0 &&(( i!=0 &&(A[i-1][j].type & h1)==0) || ( i+1!=h && (A[i+1][j].type & h1)==0) || ( j+1!=b && (A[i][j+1].type & h1)==0))){
				A[i][j-1].path=n+2;
				tracePath(A,h,b,i,j-1,goal);
			}
		}
		if(i!=0 && A[i-1][j].type!=15 && A[i-1][j].path>n){
			if((A[i-1][j].type & h1)==0){
			A[i-1][j].path=n;
			tracePath(A,h,b,i-1,j,goal);
			}
			else if(A[i-1][j].path>n+2 && (A[i-1][j].type & h3)==0 && (A[i][j].type & h2)==0 &&(( i+1!=h &&(A[i+1][j].type & h1)==0) || ( j+1!=b && (A[i][j+1].type & h1)==0) || ( j!=0 && (A[i][j-1].type & h1)==0))){
				A[i-1][j].path=n+2;
				tracePath(A,h,b,i-1,j,goal);
			}
		}
	}
	public static void main(String args[]){
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		char c;
		for(int t=1; t<=T; t++){
			int m = sc.nextInt();
			int n = sc.nextInt();
			Maze start=null,goal=null;
			int starti=0,startj=0;
			Maze A[][] = new Maze[m][n];
			int R[] = new int[m];
			int C[] = new int[n];
			for(int i=0; i<m; i++){
				String s = sc.next();
				for(int j=0; j<n; j++){
					int k;
					A[i][j] = new Maze();
					c = s.charAt(j);
					switch(c){
						case '#':
							A[i][j].type = 15;
							R[i]=0;
							C[j]=0;
							break;
						case 'S':
							A[i][j].type |= (R[i]|C[j]);
							start = A[i][j];
							starti = i;
							startj = j;
							break;
						case 'G':
							A[i][j].type |= (R[i]|C[j]);
							goal = A[i][j];
							break;
						case '.':
							A[i][j].type |= (R[i]|C[j]);
							break;
						case '<':
							A[i][j].type = 15;
							k=j-1;
							while(k>=0 && A[i][k].type!=15)
								A[i][k--].type |= 8;
							k=i-1;
							while(k>=0 && A[k][j].type!=15)
								A[k--][j].type |= 1;
							R[i] = 2;
							C[j] = 4;
							break;
						case '^':
							A[i][j].type = 15;
							k=j-1;
							while(k>=0 && A[i][k].type!=15)
								A[i][k--].type |= 4;
							k=i-1;
							while(k>=0 && A[k][j].type!=15)
								A[k--][j].type |= 8;
							R[i] = 1;
							C[j] = 2;
							break;
						case '>':
							A[i][j].type = 15;
							k=j-1;
							while(k>=0 && A[i][k].type!=15)
								A[i][k--].type |= 2;
							k=i-1;
							while(k>=0 && A[k][j].type!=15)
								A[k--][j].type |= 4;
							R[i] = 8;
							C[j] = 1;
							break;
						case 'v':
							A[i][j].type = 15;
							k=j-1;
							while(k>=0 && A[i][k].type!=15)
								A[i][k--].type |= 1;
							k=i-1;
							while(k>=0 && A[k][j].type!=15)
								A[k--][j].type |= 2;
							R[i] = 4;
							C[j] = 8;
							break;
					}
				}
			}
			//Encoded
			start.path = 0;
			tracePath(A,m,n,starti,startj,goal);
			if(goal.path==10000)
				System.out.println("Case #"+t+": impossible");
			else
				System.out.println("Case #"+t+": "+goal.path);
			
		}
	}
}
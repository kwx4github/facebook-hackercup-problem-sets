#include<bits/stdc++.h>

using namespace std;

#define ll long long int 
#define ss1(a) scanf("%d",&a)
#define ss2(a,b) scanf("%d %d",&a,&b)
#define ss3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define loop(i,a,b) for(int i=a;i<b;i++)
#define loope(i,a,b) for(int i=a;i<=b;i++)
#define loopd(i,a,b) for(int i=a;i>=b;i--)


#define pii pair<int,int>
typedef vector<int> vi; 
typedef vector< vi > vvi;  
#define setzero(a) fill(a,a+sizeof(a),0);
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define mp(a,b) make_pair(a,b)
#define F first
#define S second
#define DEBUG if(0)

ll powr(int s,int p)
{
	if(p==0)
		return 1;	

	if(p%2==1)
	{
		ll q=powr(s,p/2);
		ll a=q;
		q=(a*a);
		q=(q*s);	
		return ( q );
	}

	else
	{
		ll q=powr(s,p/2);
		ll a=q;
		q=(a*a);	
		return (q);
	}
}

/*******************************MAIN CODE STARTS*******************************/
class node{
	public:
	int x,y,id;
	node(int p,int q,int r)
	{
		x=p;
		y=q;
		id=r;
	}
	node(){}
};

#define inf 999999999
char o[4]={'^','>','v','<'};
int ox[4]={-1,0,1,0};
int oy[4]={0,1,0,-1};
int b[4][110][110];
int n,m;
vector < node > h;

queue< node > q; 
node s,g;

void Scan()
{
	h.clear();
	cin>>n>>m;
	string S;
	loop(i,0,n)
	{
		cin>>S;
		loop(j,0,m)
		{
			if(S[j]=='S')
			{
				s.x=i;
				s.y=j;
				s.id=0;
				loop(k,0,4) b[k][i][j]=inf;
			}
			else if(S[j]=='G')
			{
				g.x=i;
				g.y=j;
				g.id=0;
				loop(k,0,4) b[k][i][j]=inf;
			}
			else if(S[j]=='#')
			{
				loop(k,0,4) b[k][i][j]=-1;
			}
			else if(S[j]=='.')
			{
				loop(k,0,4) b[k][i][j]=inf;
			}
			else 
				loop(k,0,4)
					if(S[j]==o[k])
					{
						node tmp(i,j,k);
						h.pb(tmp);
						loop(l,0,4) b[l][i][j]=-1;
					}
		}
	}
	for(int x=0;x<sz(h);x++)
	{
		node tmp=h[x];
		int i=tmp.id;
		for(int j=0;j<4;j++)
		{
			int k=(i+j)%4;
			int p=tmp.x,q=tmp.y;
			p+=ox[k];
			q+=oy[k];
			while(p>=0 && p<n && q>=0 && q<m)
			{
				if(b[j][p][q]==-1) break;
				if(!(p==s.x && q==s.y)) b[j][p][q]=-1;
				p+=ox[k];
				q+=oy[k];
			}
		}
	}		
	/*for(int i=0;i<4;i++)
	{
		for(int j=0;j<n;j++)
		{
			for(int k=0;k<m;k++)
				printf("%d ",b[i][j][k]);
			printf("\n");	
		}
		printf("\n\n");
	}*/
}
void Out(int z)
{
	int res=-1;
	b[0][s.x][s.y]=0;
	while(!q.empty()) q.pop();
	
	q.push(s);
	while(!q.empty())
	{
		node tmp=q.front();
		//cout<<tmp.id<<" "<<tmp.x<<" "<<tmp.y<<" "<<b[tmp.id][tmp.x][tmp.y]<<endl;
		q.pop();
		if(tmp.x==g.x && tmp.y==g.y)
		{
			res=b[tmp.id][tmp.x][tmp.y];
			break;
		}
		if(tmp.x-1>=0 && b[(tmp.id+1)%4][tmp.x-1][tmp.y]==inf)
		{
				b[(tmp.id+1)%4][tmp.x-1][tmp.y]=b[tmp.id][tmp.x][tmp.y]+1;
				node ps(tmp.x-1,tmp.y,(tmp.id+1)%4);
				//printf("%d %d %d*\n",ps.x,ps.y,ps.id);
				q.push(ps);
		}
		if(tmp.x+1<n && b[(tmp.id+1)%4][tmp.x+1][tmp.y]==inf)
		{
				b[(tmp.id+1)%4][tmp.x+1][tmp.y]=b[tmp.id][tmp.x][tmp.y]+1;
				node ps(tmp.x+1,tmp.y,(tmp.id+1)%4);
				//printf("%d %d %d**\n",ps.x,ps.y,ps.id);
				q.push(ps);
		}
		if(tmp.y-1>=0 && b[(tmp.id+1)%4][tmp.x][tmp.y-1]==inf)
		{
				b[(tmp.id+1)%4][tmp.x][tmp.y-1]=b[tmp.id][tmp.x][tmp.y]+1;
				node ps(tmp.x,tmp.y-1,(tmp.id+1)%4);
				//printf("%d %d %d***\n",ps.x,ps.y,ps.id);
				q.push(ps);
		}
		if(tmp.y+1<m && b[(tmp.id+1)%4][tmp.x][tmp.y+1]==inf)
		{
				b[(tmp.id+1)%4][tmp.x][tmp.y+1]=b[tmp.id][tmp.x][tmp.y]+1;
				node ps(tmp.x,tmp.y+1,(tmp.id+1)%4);
				//printf("%d %d %d****\n",ps.x,ps.y,ps.id);
				q.push(ps);
		}
	}
	if(res!=-1) printf("Case #%d: %d\n",z,res);
	else printf("Case #%d: impossible\n",z);
	return;
}
int main()
{
	int t;cin>>t;

	loope(z,1,t)
	{
		Scan();
		Out(z);
	}	
	return 0;
}


// Could Have been solve by simple BFS


#include <bits/stdc++.h>
using namespace std;
#define N 100
typedef pair <int,int> ii;
typedef pair <ii,int> iii;
typedef pair <int,iii> i4;
char s[N + 1][N + 2];
bool safe[N + 1][N + 1][4];
int dst[N + 1][N + 1][4];
set <i4> st;
void PreProcess(int n,int m)
{
    int i,j,k;
    for(i = 1 ; i<=n ; i++)
    for(j = 1 ; j<=m ; j++)
    for(k = 0 ; k<4 ; k++)
    safe[i][j][k] = true;


    for(i = 1 ; i<=n ; i++)
    {
        for(j = 1 ; j<=m ; j++)
        {
            int id = -1;
            switch(s[i][j])
            {
                case '^': id = 0; break;
                case '>': id = 1; break;
                case 'v': id = 2; break;
                case '<': id = 3; break;
            }
            if(id == -1) continue;
            int p = id;
            int time = 0;
            do
            {
                switch(p)
                {
                    case 0:
                    for(k = i-1 ; k>=1 ; k--)
                    {
                        if(s[k][j] == '.' || s[k][j] == 'S' || s[k][j] == 'G') safe[k][j][time] = false;
                        else break;
                    }
                    break;
                    case 1:
                    for(k = j+1 ; k<=m ; k++)
                    {
                        if(s[i][k] == '.' || s[i][k] == 'S' || s[i][k] == 'G') safe[i][k][time] = false;
                        else break;
                    }
                    break;
                    case 2:
                    for(k = i+1 ; k<=n ; k++)
                    {
                        if(s[k][j] == '.' || s[k][j] == 'S' || s[k][j] == 'G') safe[k][j][time] = false;
                        else break;
                    }
                    break;
                    case 3:
                    for(k = j-1 ; k>=1 ; k--)
                    {
                        if(s[i][k] == '.' || s[i][k] == 'S' || s[i][k] == 'G') safe[i][k][time] = false;
                        else break;
                    }
                    break;
                }
                time++;
                p++; if(p == 4) p = 0;
            }while(time<4);
        }
    }
}
int Dijkstar(int n,int m)
{
    ii src,dest;
    int INF = pow(10,5);
    for(int i = 1 ; i<=n ; i++)
    {
        for(int j = 1 ; j<=m ; j++)
        {
            if(s[i][j] == 'S')
            {
                src = ii(i,j);
                s[i][j] = '.';
            }
            if(s[i][j] == 'G')
            {
                dest = ii(i,j);
                s[i][j] = '.';
            }
            for(int k = 0 ; k<4 ; k++)
            {
                dst[i][j][k] = INF;
            }
        }
    }
    dst[src.first][src.second][0] = 0;
    st.clear();
    st.insert( i4(0, iii(ii(src.first, src.second), 0)));
    while(!st.empty())
    {
        i4 temp = *(st.begin());
        st.erase(st.begin());
        int v = temp.first;
        ii u = temp.second.first;
        int r = u.first;
        int c = u.second;
        int t = temp.second.second;
        t++;
        //printf("%d %d %d %d\n",v,r,c,t);
        if(t == 4) t = 0;

        /*if(safe[r][c][t] == true)
        {
            if(dst[r][c][t] == INF)
            {
                dst[r][c][t] = v + 1;
                st.insert(i4(v+1, iii(ii(r,c),t)));
            }
            else
            {
                if(dst[r][c][t] > (v + 1))
                {
                    st.erase(st.find(i4(dst[r][c][t], iii(ii(r,c), t))));
                    dst[r][c][t] = v + 1;
                    st.insert(i4(v+1, iii(ii(r,c),t)));
                }
            }
        }*/
        if(r < n && safe[r+1][c][t] == true && s[r+1][c] == '.')
        {
            if(dst[r+1][c][t] == INF)
            {
                dst[r+1][c][t] = v + 1;
                st.insert(i4(v+1, iii(ii(r+1,c),t)));
            }
            else
            {
                if(dst[r+1][c][t] > (v + 1))
                {
                    st.erase(st.find(i4(dst[r+1][c][t], iii(ii(r+1,c), t))));
                    dst[r+1][c][t] = v + 1;
                    st.insert(i4(v+1, iii(ii(r+1,c),t)));
                }
            }
        }
        if(r > 1 && safe[r-1][c][t] == true && s[r-1][c] == '.')
        {
            if(dst[r-1][c][t] == INF)
            {
                dst[r-1][c][t] = v + 1;
                st.insert(i4(v+1, iii(ii(r-1,c),t)));
            }
            else
            {
                if(dst[r-1][c][t] > (v + 1))
                {
                    st.erase(st.find(i4(dst[r-1][c][t], iii(ii(r-1,c), t))));
                    dst[r-1][c][t] = v + 1;
                    st.insert(i4(v+1, iii(ii(r-1,c),t)));
                }
            }
        }
        if(c > 1 && safe[r][c-1][t] == true && s[r][c-1] == '.')
        {
            //printf("uttam\n");
            if(dst[r][c-1][t] == INF)
            {
                dst[r][c-1][t] = v + 1;
                st.insert(i4(v+1, iii(ii(r,c-1),t)));
            }
            else
            {
                if(dst[r][c-1][t] > (v + 1))
                {
                    st.erase(st.find(i4(dst[r][c-1][t], iii(ii(r,c-1), t))));
                    dst[r][c-1][t] = v + 1;
                    st.insert(i4(v+1, iii(ii(r,c-1),t)));
                }
            }
        }
        if(c < m && safe[r][c+1][t] == true && s[r][c+1] == '.')
        {
            if(dst[r][c+1][t] == INF)
            {
                dst[r][c+1][t] = v + 1;
                st.insert(i4(v+1, iii(ii(r,c+1),t)));
            }
            else
            {
                if(dst[r][c+1][t] > (v + 1))
                {
                    st.erase(st.find(i4(dst[r][c+1][t], iii(ii(r,c+1), t))));
                    dst[r][c+1][t] = v + 1;
                    st.insert(i4(v+1, iii(ii(r,c+1),t)));
                }
            }
        }
    }
    int ans = INF;
    for(int k = 0 ; k<4 ; k++) ans = min(ans,dst[dest.first][dest.second][k]);
    if(ans == INF) return -1;
    else return ans;
}
int main()
{
    FILE *in = stdin;
    FILE *out = stdout;
    char *inpath = "C:\\Users\\dell\\Downloads\\laser_maze.txt";
    char *outpath = "C:\\Users\\dell\\Downloads\\outputC.txt";
    in = fopen(inpath,"r");
    out = fopen(outpath,"w");
    int tc,t;
    fscanf(in,"%d",&tc);
    for(t = 1 ; t<=tc ; t++)
    {
        int n,i,j,m;
        fscanf(in,"%d %d",&n,&m);
        for(i = 1 ; i<=n ; i++) fscanf(in,"%s",s[i]+1);
        PreProcess(n,m);
        int ans = Dijkstar(n,m);
        if(ans == -1) fprintf(out,"Case #%d: impossible\n",t);
        else fprintf(out,"Case #%d: %d\n",t,ans);
    }
    return 0;
}

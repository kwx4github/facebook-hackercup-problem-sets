#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<map>
#include<tuple>
#include<queue>
#include<set>
using namespace std;

typedef tuple<int,int,int,int> tiiii;
bool mp[4][102][102];
char res[100][102];
int N,M;
map<char,int> dirmp;
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
inline bool inrange(int x,int y)
{
	if(0<x&&x<=N && 0<y&&y<=M)
		return true;
	return false;
}
void build(int dir)
{
	#define m mp[dir]
	for(int i=0;i<N;++i)
	{
		for(int j=0;j<M;++j)
		{
			switch(res[i][j])
			{
				case '.':
				case 'S':
				case 'G':
						m[i+1][j+1]=true;
						break;
			}
		}
	}
	for(int i=0;i<N;++i)
	{
		for(int j=0;j<M;++j)
		{
			if( dirmp.find(res[i][j])!=dirmp.end() )
			{
				int trans =( dir + dirmp[res[i][j]] )%4;
				int nx=i+1+dx[trans];
				int ny=j+1+dy[trans];
				while( inrange(nx,ny) && m[nx][ny] )
				{
					m[nx][ny]=false;
					nx+=dx[trans];
					ny+=dy[trans];
				}
			}
		}
	}
	#undef m
}
int main()
{
	dirmp['^']=0;
	dirmp['>']=1;
	dirmp['v']=2;
	dirmp['<']=3;
	int T,c=1;
	cin>>T;
	int gx,gy;
	queue<tiiii> qu;
	typedef pair<int,pair<int,int>> piii;
	set<piii> st;
	
	while(T--)
	{
		cin>>N>>M;
		for(int i=0;i<N;++i)
			cin>>res[i];
		memset(mp,0,sizeof(mp));
		for(int i=0;i<4;++i)
			build(i);
		qu = queue<tiiii>();
		for(int i=0;i<N;++i)
			for(int j=0;j<M;++j)
				if(res[i][j]=='S')
					qu.push(make_tuple (0,0,i+1,j+1));
				else if(res[i][j]=='G')
					gx=i+1,gy=j+1;
		bool flag=false;
		int ans=0;
		st.clear();
		while(!qu.empty() && !flag)
		{
			tiiii t=qu.front();
			qu.pop();
			int step=get<0>(t)+1;
			int k   =get<1>(t); k= (k+1)%4;
			int x   =get<2>(t);
			int y   =get<3>(t);
			piii tmp {k,{x,y}};
			if(st.find(tmp)!=st.end())
				continue;
			st.insert(tmp);

			for(int i=0;i<4;++i)
			{
				int nx=x+dx[i];
				int ny=y+dy[i];

				if(!inrange(nx,ny))continue;
				if(!mp[k][nx][ny]) continue;
				if(nx==gx&&ny==gy)
				{
					flag=true;
					ans=step;
					break;
				}
				qu.push(make_tuple(step,k,nx,ny));
			}
		}
		printf("Case #%d: ",c++);
		if(flag)printf("%d\n",ans);
		else puts("impossible");
	}
}

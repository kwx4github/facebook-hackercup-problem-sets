from collections import deque

dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]

def shift(turret, diff):
	sides = "v<^>"
	pos = {"v": 0, "<": 1, "^": 2, ">": 3}
	if turret not in sides:
		return turret
	else:
		return sides[(pos[turret] + diff) % 4]

def bfs(maze, start_i, start_j, end_i, end_j):
	M, N = len(maze), len(maze[0])
	deja_vu = [[[False] * 4 for _ in range(N)] for _ in range(M)]
	queue = deque([(start_i, start_j, 0)])
	while queue:
		i, j, dist = queue.pop()
		# print(i, j, dist)
		if not deja_vu[i][j][dist % 4]:
			deja_vu[i][j][dist % 4] = True
			if (i, j) == (end_i, end_j):
				return dist
			for di, dj in dirs:
				ni, nj = i + di, j + dj
				if 0 <= ni < M and 0 <= nj < N and maze[ni][nj] in "Steins;Gate.":
					if not deja_vu[ni][nj][(dist + 1) % 4]:
						alive = True
						for oi in range(M):
							if (shift(maze[oi][nj], dist + 1) == 'v' and oi < ni) or (shift(maze[oi][nj], dist + 1) == '^' and oi > ni):
								alive = False
						for oj in range(N):
							if (shift(maze[ni][oj], dist + 1) == '>' and oj < nj) or (shift(maze[ni][oj], dist + 1) == '<' and oj > nj):
								alive = False
						if alive:
							queue.appendleft((ni, nj, dist + 1))
	return 'impossible'

T = int(raw_input())
for t in range(T):
	M, N = map(int, raw_input().split())
	maze = []
	for _ in range(M):
		maze.append(raw_input())
	for i in range(M):
		for j in range(N):
			if maze[i][j] == 'S':
				start_i, start_j = i, j
			elif maze[i][j] == 'G':
				end_i, end_j = i, j
	print('Case #%d: %s' % (t + 1, bfs(maze, start_i, start_j, end_i, end_j)))

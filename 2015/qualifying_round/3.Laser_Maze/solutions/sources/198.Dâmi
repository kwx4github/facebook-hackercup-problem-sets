#include <cstdlib>
#include <iostream>
#include <stdio.h>
#include <cstring>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
#include <map>
#include <stack>
#include <cmath>
#include <set>
#include <ctype.h>
#include <bitset>

#define INF 0x3F3F3F3F
#define rep(i, a, b) for (int i = int(a); i < int(b); i++)
#define TRvii(c, it) for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define tr(it, s)  for ( typeof ( s.begin( ) ) it=s.begin( ); it!=s.end( ); it++ )
#define pb push_back
#define clr(a) memset((a),0,sizeof(a))
#define pi 3.1415926535897932384626433832795028841971
#define debug(x) cout << #x << " = " << x << endl;
#define debug2(x,y) cout << #x << " = " << x << " --- " << #y << " " << y << "\n";
#define all(S) (S).begin(), (S).end()
#define MAXV 1005
#define F first
#define S second
#define EPS 1e-9
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair < int, int >  ii;
typedef vector < int >  vi;
typedef vector < ii >  vii;

//FILE *arq;    // aqui

int l, c, sx, sy;
char m[101][101];
bool tem[4][101][101], vis[4][101][101];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

bool dentro(int x, int y){
    return (x>=0 && y>=0 && x<l && y<c);   
}

void vai(int i, int j, char c, int k){
    
    int x, y;
    
    if(c == '>'){
        x = i;
        y = j+1;   
        while(dentro(x,y) && (m[x][y] == '.' || m[x][y] == 'G' || m[x][y] == 'S')){
            tem[k][x][y] = true;
            y++;
        }
    }
    else if(c == 'v'){
        x = i+1;
        y = j;   
        while(dentro(x,y) && (m[x][y] == '.' || m[x][y] == 'G' || m[x][y] == 'S')){
            tem[k][x][y] = true;
            x++;
        }
    }
    else if(c == '<'){
        x = i;
        y = j-1; 
        while(dentro(x,y) && (m[x][y] == '.' || m[x][y] == 'G' || m[x][y] == 'S')){
            tem[k][x][y] = true;
            y--;
        }  
    }
    else if(c == '^'){
        x = i-1;
        y = j;
        while(dentro(x,y) && (m[x][y] == '.' || m[x][y] == 'G' || m[x][y] == 'S')){
            tem[k][x][y] = true;
            x--;
        }
    }
    
}

int bfs(int a, int b){
    
    int x, y, d, k, nx, ny, nk;
    vis[0][a][b] = true;
    queue<pair<ii, ii> > q;
    q.push(mp(ii(a,b),ii(0,0))); // ( (x,y) (d,k) )
    
    while(!q.empty()){        
        pair<ii,ii> f = q.front();
        q.pop();      
        x = f.F.F; y = f.F.S;
        d = f.S.F; k = f.S.S;  
        rep(i,0,4){
            nx = x+dx[i];
            ny = y+dy[i];
            nk = (k+1)%4;           
            if(dentro(nx,ny) && (m[nx][ny] == '.' || m[nx][ny] == 'S' || m[nx][ny] == 'G')
            && !vis[nk][nx][ny] && !tem[nk][nx][ny]){
                vis[nk][nx][ny] = true;
                q.push(mp(ii(nx,ny),ii(d+1,nk)));
                if(m[nx][ny] == 'G')
                    return d+1;
            }      
        }
    }
    return -1;
}

int main(){
    
   // arq = fopen("laser.txt", "w"); // aqui

    int tc;
    
    scanf("%d",&tc);
    
    rep(t,1,tc+1){
        
        scanf("%d%d",&l,&c);
        
        rep(i,0,4)
        rep(j,0,l)
        rep(k,0,c){
            tem[i][j][k] = false;
            vis[i][j][k] = false;
        }
        
        rep(i,0,l)
        rep(j,0,c){
            scanf(" %c",&m[i][j]);
            if(m[i][j] == 'S'){
                sx = i;
                sy = j;   
            }          
        }
        
        rep(k,0,4)
        rep(i,0,l)
        rep(j,0,c){  
            if(m[i][j] == '>'){
                if(k == 0) vai(i, j, '>', k);
                else if(k == 1) vai(i, j, 'v', k); 
                else if(k == 2) vai(i, j, '<', k);
                else vai(i, j, '^', k);
            }
            else if(m[i][j] == 'v'){
                if(k == 0) vai(i, j, 'v', k);
                else if(k == 1) vai(i, j, '<', k); 
                else if(k == 2) vai(i, j, '^', k);
                else vai(i, j, '>', k);
            }
            else if(m[i][j] == '<'){
                if(k == 0) vai(i, j, '<', k);
                else if(k == 1) vai(i, j, '^', k); 
                else if(k == 2) vai(i, j, '>', k);
                else vai(i, j, 'v', k);
            }
            else if(m[i][j] == '^'){
                if(k == 0) vai(i, j, '^', k);
                else if(k == 1) vai(i, j, '>', k); 
                else if(k == 2) vai(i, j, 'v', k);
                else vai(i, j, '<', k);
            }  
        }
        
        int ans = bfs(sx,sy);
        if(ans == -1){
            printf("Case #%d: impossible\n",t);
         //   fprintf(arq, "Case #%d: impossible\n",t); // aqui
        }
        else{
            printf("Case #%d: %d\n",t,ans);
          //  fprintf(arq, "Case #%d: %d\n",t,ans); // aqui
        }
    }
    
   // fclose(arq); // aqui
    
    return 0;
}

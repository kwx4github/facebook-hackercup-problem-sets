#include <iostream>
#include <stdio.h>
#include <string>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <set>
#include <map>
#include <string.h>
#include <bitset>
#include <queue>
#include <functional>
#include <stack>
#include <sstream>
#include <list>

#define LOOP(i,n) for(int i=0; i<n;i++)
#define TESTCASE int T;cin >>T;for(int Z=0;Z<T;Z++)
#define ARRIN(i,n) for(int il=0;il<n;il++)cin>>i[il]
#define OO (int)1e9
#define CLR(arr,num) memset(arr,num,sizeof(arr))
#define CLR2(arr,num,size) for(int i=0;i<size;i++)arr[i]=num;
#define SUM(arr,n,s) for(int i=0;i<n;i++)s+=arr[i]; 
#define BWGET(code,i) (code & (1 << i))
#define BWSET(code,i,s) ((s)?code|(1<<i):code&(~(1<<i)))
#define EPS 1e-9

using namespace std;

int dx[] = {0,1,0,-1},
	dy[] = {1,0,-1,0};

vector<string> g[5];
map<char, int> ds;

struct state{
	int x,y,t;
	state(){}
	state(int x, int y, int t):x(x),y(y),t(t){}
};

int main(){
	freopen("input.in", "r", stdin);
	freopen("output.out", "w", stdout);
	ds['>'] = 0;
	ds['v'] = 1;
	ds['<'] = 2;
	ds['^'] = 3;
	TESTCASE{
		int n,m; cin >> n >> m;
		for (int i = 0; i < 5; i++)
		{
			g[i].clear();
			g[i].resize(n);
		}
		int sx,sy;
		int ex,ey;
		for (int i = 0; i < n; i++)
		{
			cin >> g[0][i];
			for (int j = 1; j < 5; j++)
			{
				g[j][i] = g[0][i];
			}
		}
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if(g[0][i][j] == 'S'){
					sx=i,sy=j;
					for (int k = 0; k < 5; k++)
					{
						g[k][i][j] = '.';
					}
				}
				if(g[0][i][j] == 'G'){
					ex=i,ey=j;
					for (int k = 0; k < 5; k++)
					{
						g[k][i][j] = '.';
					}
				}
			}
		}
		for (int k = 0; k < 4; k++)
		{
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < m; j++)
				{
					if(!ds.count(g[k][i][j]))continue;
					int d = (ds[g[k][i][j]] + k)%4;
					int x = i, y = j;
					while(true){
						x += dx[d];
						y += dy[d];
						if(x < 0 || y < 0 || x >= n || y >= m || g[4][x][y] != '.'){
							break;
						}
						g[k][x][y] = '#';
					}
				}
			}
		}
		bool vis[101][101][4];
		CLR(vis,0);
		vis[sx][sy][0] = 1;
		queue<state>q;
		q.push(state(sx,sy,0));
		int cl=1,nl=0,l=0;
		bool p = 0;
		while(q.size()){
			cl--;
			state c = q.front();
			if(c.x == ex && c.y == ey){
				p = 1;
				break;
			}
			q.pop();
			for (int i = 0; i < 4; i++)
			{
				state cc = c;
				cc.x += dx[i];
				cc.y += dy[i];
				cc.t++;
				cc.t %= 4;
				if(cc.x < 0 || cc.y < 0 || cc.x >= n || cc.y >= m || g[cc.t][cc.x][cc.y] != '.' || vis[cc.x][cc.y][cc.t])
					continue;
				nl++;
				vis[cc.x][cc.y][cc.t] = 1;
				q.push(cc);
			}
			if(!cl){
				cl=nl;
				nl=0;
				l++;
			}
		}
		cout << "Case #" << Z+1 << ": ";
		if(p){
			cout << l << endl;
		} else {
			cout << "impossible" << endl;
		}
	}
	return 0;
}
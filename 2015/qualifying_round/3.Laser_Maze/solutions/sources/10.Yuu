#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>
#include <climits>
#include <bitset>
#include <cassert>
#include <random>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define UNIQUE(v) (v).erase(unique(ALL(v)), (v).end())
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef pair<int, int> P;
typedef long double ld;

// URDL
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

string tur = "^>v<";

const int N = 110;
int ng[N][N][4];
int dist[N][N][4];

int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout.setf(ios::fixed);
	cout.precision(12);

	int T;
	cin >> T;
	for (int t = 1; t <= T; ++t){
		int h, w;
		cin >> h >> w;
		vector<string> v(h);
		rep(i, h) cin >> v[i];
		MEMSET(ng, 0);
		
		P st, gl;
		rep(y, h) rep(x, w){
			if (v[y][x] == 'S'){
				st = MP(y, x);
				v[y][x] = '.';
			}
			if (v[y][x] == 'G'){
				gl = MP(y, x);
				v[y][x] = '.';
			}
		}

		rep(y, h) rep(x, w){
			if (v[y][x] == '.') continue;
			rep(k, 4) ng[y][x][k] = 1;

			int dir = -1;
			rep(k, 4) if (v[y][x] == tur[k]) dir = k;
			if (dir < 0) continue;
			rep(d, 4){
				int nx = x + dx[dir], ny = y + dy[dir];
				while (0 <= nx && nx < w && 0 <= ny && ny < h){
					if (v[ny][nx] != '.') break;
					ng[ny][nx][d] = 1;
					nx += dx[dir], ny += dy[dir];
				}
				(++dir) %= 4;
			}
		}

		MEMSET(dist, -1);
		queue<tuple<int, int, int>> q;
		q.push(MT(st.first, st.second, 0));
		dist[st.first][st.second][0] = 0;

		int ans = -1;
		while (!q.empty()){
			int x, y, c;
			tie(y, x, c) = q.front();
			q.pop();

			if (MP(y, x) == gl){
				ans = dist[y][x][c];
				break;
			}

			rep(d, 4){
				int nx = x + dx[d], ny = y + dy[d], nc = (c + 1) % 4;
				if (nx < 0 || nx >= w || ny < 0 || ny >= h) continue;
				if (ng[ny][nx][nc] || dist[ny][nx][nc] >= 0) continue;
				dist[ny][nx][nc] = dist[y][x][c] + 1;
				q.push(MT(ny, nx, nc));
			}
		}

		cout << "Case #" << t << ": ";
		if (ans + 1) cout << ans << endl;
		else cout << "impossible" << endl;
	}

	return 0;
}
import java.io.*;
import java.util.*;

public class C {
    FastScanner in;
    PrintWriter out;

    class State {
        int layer, i, j;
        int dist;

        public State(int layer, int i, int j, int dist) {
            this.layer = layer;
            this.i = i;
            this.j = j;
            this.dist = dist;
        }
    }

    public static final int[] di = {-1, 1, 0, 0};
    public static final int[] dj = {0, 0, -1, 1};

    public void solve() throws IOException {
        int t = in.nextInt();
        for (int h = 0; h < t; h++) {
            System.out.println(h);
            out.print("Case #" + (h + 1) + ": ");
            int m = in.nextInt();
            int n = in.nextInt();
            char[][] st = new char[m][];
            for (int i = 0; i < m; i++) {
                st[i] = in.next().toCharArray();
            }
            char[][][] a = new char[4][m][n];
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < m; j++) {
                    Arrays.fill(a[i][j], '=');
                }
            }
            int si = -1;
            int sj = -1;
            int fi = -1;
            int fj = -1;
            for (int layer = 0; layer < 4; layer++) {
                for (int i1 = 0; i1 < m; i1++) {
                    for (int j1 = 0; j1 < n; j1++) {
                        int i = i1;
                        int j = j1;
                        switch (st[i][j]) {
                            case '>':
                                do {
                                    a[layer][i][j] = '#';
                                    j++;
                                } while (j < n && (st[i][j] == '.' || st[i][j] == 'S' || st[i][j] == 'G'));
                                break;
                            case 'v':
                                do {
                                    a[layer][i][j] = '#';
                                    i++;
                                } while (i < m && (st[i][j] == '.' || st[i][j] == 'S' || st[i][j] == 'G'));
                                break;
                            case '<':
                                do {
                                    a[layer][i][j] = '#';
                                    j--;
                                } while (j >= 0 && (st[i][j] == '.' || st[i][j] == 'S' || st[i][j] == 'G'));
                                break;
                            case '^':
                                do {
                                    a[layer][i][j] = '#';
                                    i--;
                                } while (i >= 0 && (st[i][j] == '.' || st[i][j] == 'S' || st[i][j] == 'G'));
                                break;
                            case 'S':
                                si = i;
                                sj = j;
                                if (a[layer][i][j] == '=') {
                                    a[layer][i][j] = '.';
                                }
                                break;
                            default:
                                if (a[layer][i][j] == '=') {
                                    a[layer][i][j] = st[i][j];
                                }
                                break;

                        }
                    }

                }
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        switch (st[i][j]) {
                            case '^':
                                st[i][j] = '>';
                                break;
                            case '>':
                                st[i][j] = 'v';
                                break;
                            case 'v':
                                st[i][j] = '<';
                                break;
                            case '<':
                                st[i][j] = '^';
                                break;
                            default:
                                break;
                        }
                    }
                }
                
            }
            boolean[][][] used = new boolean[4][m][n];
            State start = new State(0, si, sj, 0);
            Queue<State> queue = new ArrayDeque<>();
            queue.add(start);
            used[0][si][sj] = true;
            State f = null;
            while (!queue.isEmpty()) {
                State s = queue.poll();
                if (a[s.layer][s.i][s.j] == 'G') {
                    f = s;
                    break;
                }
                for (int i = 0; i < 4; i++) {
                    int ni = s.i + di[i];
                    int nj = s.j + dj[i];
                    if (ni >= 0 && ni < m && nj >= 0 && nj < n && a[(s.layer+1)%4][ni][nj] != '#' && !used[(s.layer+1)%4][ni][nj]) {
                        queue.add(new State((s.layer + 1)%4, ni, nj, s.dist + 1));
                        used[(s.layer+1)%4][ni][nj] = true;
                    }
                }
            }
            out.println(f==null?"impossible":f.dist);

        }
    }

    public void run() {
        try {
            in = new FastScanner(new File("laser_maze.txt"));
            out = new PrintWriter(new File("laser_maze_ans.txt"));
            Locale.setDefault(Locale.US);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(File f) {
            try {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    public static void main(String[] arg) {
        new C().run();
    }
}
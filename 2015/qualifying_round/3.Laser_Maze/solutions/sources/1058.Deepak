#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<cstring>
#include<algorithm>
#include <climits>
#include <cmath>
#include<cstdlib>
#include<cstdio>
#include <cctype>
#include<iostream>
#include<sstream>
#include<ctime>
#include <functional>
#include <numeric>
using namespace std;


#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)
#define DEBUG if(0)
#define SZ(c) c.size()
#define ALL(x) x.begin(),x.end()
#define ff first
#define ss second
#define MP make_pair
#define PB push_back
#define PII pair<int, int>
#define PSI pair<string, int>
#define VI vector<int>
#define VS vector<string>
#define VVI vector< VI >
#define VPI vector< PII >
#define LL long long
#define ULL unsigned long long
#define SET(p) memset(p, -1, sizeof(p))
#define CLR(p) memset(p, 0, sizeof(p))
#define MEM(p, v) memset(p, v, sizeof(p))
#define CPY(d, s) memcpy(d, s, sizeof(s))
#define FOR(i,a,b) for(int i=(int)(a);i<=(int)(b);++i)
#define FORD(i,a,b) for(int i=(int)(a);i>=(int)(b);--i)
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define REPR(i,n) for(int i=(int)n-1; i>=0; --i)
#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)


template< class T > T _abs(T n) { return (n < 0 ? -n : n); }
template< class T > T _max(T a, T b) { return (!(a < b) ? a : b); }
template< class T > T _min(T a, T b) { return (a < b ? a : b); }
template< class T > T sq(T x) { return x * x; }
template< class T > void setmax(T &a, T b) { if(a < b) a = b; }
template< class T > void setmin(T &a, T b) { if(b < a) a = b; }
template< class T > T GCD(const T a, const T b) { return (b ? GCD<T>(b, a%b) : a); }
template< class T > T LCM(const T a, const T b) { return (a / GCD<T>(a, b) * b); }
template< class T > T mod(const T &a, const T &b) { return (a < b ? a : a % b); }
template< class T > bool inrange(const T &a, const T &b, const T &c) { return a<=b && b<=c; }

const int INF=1000000007;
const int MOD=1000000007;
const LL LINF = 1ll << 60;


const int MAX=102;

bool ltimes[MAX][MAX][4];
int dist[MAX][MAX];
char grid[MAX][MAX];

int dr[]={1, -1, 0, 0};
int dc[]={0, 0, 1, -1};

int main()
{
    READ("in.txt");
    WRITE("out.txt");

    int t, r, c, si, sj, gi, gj, k;
    cin>>t;
    for(int cs=1; cs<=t; cs++)
    {
        cin>>r>>c;
        REP(i, r) REP(j, c)
        {
            cin>>grid[i][j];
            if(grid[i][j]=='S') si=i, sj=j;
            if(grid[i][j]=='G') gi=i, gj=j;
        }

        REP(i, r) REP(j, c)
        dist[i][j]=-1;

        REP(i, r) REP(j, c) REP(k, 4)
        ltimes[i][j][k]=false;

        int ll, lr, lu, ld;
        REP(i, r) REP(j, c) if(grid[i][j]=='^'||grid[i][j]=='v'||grid[i][j]=='>'||grid[i][j]=='<')
        {
            if(grid[i][j]=='^')
            ll=3, lr=1, lu=0, ld=2;
            else if(grid[i][j]=='v')
            ll=1, lr=3, lu=2, ld=0;
            else if(grid[i][j]=='>')
            ll=2, lr=0, lu=3, ld=1;
            else if(grid[i][j]=='<')
            ll=0, lr=2, lu=1, ld=3;

            k=i-1;
            while(k>=0 && (grid[k][j]=='.'||grid[k][j]=='S'||grid[k][j]=='G'))
            ltimes[k--][j][lu]=true;

            k=i+1;
            while(k<r && (grid[k][j]=='.'||grid[k][j]=='S'||grid[k][j]=='G'))
            ltimes[k++][j][ld]=true;

            k=j+1;
            while(k<c && (grid[i][k]=='.'||grid[i][k]=='S'||grid[i][k]=='G'))
            ltimes[i][k++][lr]=true;

            k=j-1;
            while(k>=0 && (grid[i][k]=='.'||grid[i][k]=='S'||grid[i][k]=='G'))
            ltimes[i][k--][ll]=true;

        }
/*
        REP(i, r) REP(j, c)
        {
            cout<<ltimes[i][j][0]<<ltimes[i][j][1]<<ltimes[i][j][2]<<ltimes[i][j][3]<<endl;
        }
*/
        dist[si][sj]=0;
        int ni, nj, tt, res;
        bool flag=false;
        for(tt=1; tt<=(5*r*c) && !flag; tt++)
        {
            for(int i=0; i<r && !flag; i++) for(int j=0; j<c && !flag; j++) if(dist[i][j]==tt-1)
            {
                //cout<<"\n\nTime: "<<tt<<endl;
                //cout<<i<<" "<<j<<"\n\n";
                for(k=0; k<4 && !flag; k++)
                {
                   ni=i+dr[k]; nj=j+dc[k];
                   if(ni>=0 && ni<r && nj>=0 && nj<c)
                   if(grid[ni][nj]=='.'||grid[ni][nj]=='S'||grid[ni][nj]=='G')
                   {
                       //cout<<ni<<" "<<nj<<": "<<ltimes[ni][nj][tt%4]<<endl;
                       if(!ltimes[ni][nj][tt%4])
                       {
                           //cout<<ni<<" "<<nj<<": "<<ltimes[ni][nj][tt%4]<<endl;
                           dist[ni][nj]=tt;
                           if(ni==gi && nj==gj)
                           res=tt, flag=true;

                       }
                   }
                }
            }
/*
          //cout<<"\n\n";
          REP(ii, r)
          {
            REP(jj, c)
            cout<<dist[ii][jj]<<" ";

            cout<<endl;
          }
*/
        }

        if(flag)
        cout<<"Case #"<<cs<<": "<<res<<endl;
        else
        cout<<"Case #"<<cs<<": "<<"impossible"<<endl;

    }
    return 0;
}





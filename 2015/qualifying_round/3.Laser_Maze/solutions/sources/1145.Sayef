//Bismillahir Rahmanir Rahim
//#pragma warning(disable:4786)
//#pragma comment(linker,"/STACK:514850816")
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <climits>
#include <string>
#include <sstream>
#include <queue>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <algorithm>
using namespace std;

#define MAX 103
#define pii pair< int, int >
#define pcii pair< char, pair< int, int > >
#define piii pair< int, pair< int, int > >

char M[5][MAX][MAX];
bool chk[5][MAX][MAX];
int m, n;
vector< pcii > laser;
pii start, nd;
char laserDirection[5] = "<^>v";

inline int posOfLaser(char c){
	for (int i = 0; i < 4; i++){
		if (laserDirection[i] == c)return i;
	}
	return -1;
}

void init(){
	laser.clear();
	memset(M, 0, sizeof(M));
	memset(chk, 0, sizeof(chk));
}
int main(){
	//freopen("G://laser_maze.txt", "r", stdin);
	//freopen("G://out.txt", "w", stdout);

	int t, cas, i, j, k, sz;
	char cur;
	scanf("%d", &t);
	for (cas = 1; cas <= t; cas++){
		init();
		scanf("%d %d", &m, &n);
		for (i = 0; i < m; i++){
			scanf("%s", M[4][i]);
			for (j = 0; j < n; j++){
				if (M[4][i][j] == '<' || M[4][i][j] == '>' || M[4][i][j] == '^' || M[4][i][j] == 'v'){
					laser.push_back(pcii(M[4][i][j], pii(i, j)));
				}
				else if (M[4][i][j] == 'S'){
					start = pii(i, j);
				}
				else if (M[4][i][j] == 'G'){
					nd = pii(i, j);
				}
				else if (M[4][i][j] == '#'){
					M[0][i][j] = M[1][i][j] = M[2][i][j] = M[3][i][j] = '#';
				}
			}
		}
		sz = laser.size();
		for (j = 0; j < 4; j++){
			for (i = 0; i < sz; i++){
				cur = laserDirection[(posOfLaser(laser[i].first) + j) % 4];
				M[j][laser[i].second.first][laser[i].second.second] = '#';
				if (cur == '>'){
					for (k = laser[i].second.second + 1; k < n; k++){
						if (M[4][laser[i].second.first][k] == '#' || posOfLaser(M[4][laser[i].second.first][k]) != -1)break;
						M[j][laser[i].second.first][k] = '#';
					}
					if(k<n)M[j][laser[i].second.first][k] = '#';
				}
				else if (cur == '<'){
					for (k = laser[i].second.second - 1; k >= 0; k--){
						if (M[4][laser[i].second.first][k] == '#' || posOfLaser(M[4][laser[i].second.first][k]) != -1)break;
						M[j][laser[i].second.first][k] = '#';
					}
					if(k>=0)M[j][laser[i].second.first][k] = '#';
				}
				else if (cur == '^'){
					for (k = laser[i].second.first - 1; k >= 0; k--){
						if (M[4][k][laser[i].second.second] == '#' || posOfLaser(M[4][k][laser[i].second.second]) != -1)break;
						M[j][k][laser[i].second.second] = '#';
					}
					if(k>=0)M[j][k][laser[i].second.second] = '#';
				}
				else if (cur == 'v'){
					for (k = laser[i].second.first + 1; k < m; k++){
						if (M[4][k][laser[i].second.second] == '#' || posOfLaser(M[4][k][laser[i].second.second]) != -1)break;
						M[j][k][laser[i].second.second] = '#';
					}
					if(k<m)M[j][k][laser[i].second.second] = '#';
				}
			}
		}

		queue< piii > q;
		q.push(piii(0, start));
		int step = 0;
		bool found = false;
		chk[0][start.first][start.second] = true;
		while (!q.empty()){
			piii qf = q.front();
			q.pop();
			step = qf.first;
			i = qf.second.first;
			j = qf.second.second;
			if (i == nd.first && j == nd.second){
				found = true;
				break;
			}
			//if (M[step % 4][i][j] == '#')break;

			if ((i + 1) < m && !chk[(step + 1) % 4][i + 1][j] && M[(step + 1) % 4][i + 1][j] != '#') {
				q.push(piii(step + 1, pii(i + 1, j)));
				chk[(step + 1) % 4][i + 1][j] = true;
			}
			if ((i - 1) >= 0 && !chk[(step + 1) % 4][i - 1][j] && M[(step + 1) % 4][i - 1][j] != '#') {
				q.push(piii(step + 1, pii(i - 1, j)));
				chk[(step + 1) % 4][i - 1][j] = true;
			}
			if ((j - 1) >= 0 && !chk[(step + 1) % 4][i][j - 1] && M[(step + 1) % 4][i][j - 1] != '#') {
				q.push(piii(step + 1, pii(i, j - 1)));
				chk[(step + 1) % 4][i][j - 1] = true;
			}
			if ((j + 1) < n && !chk[(step + 1) % 4][i][j + 1] && M[(step + 1) % 4][i][j + 1] != '#') {
				q.push(piii(step + 1, pii(i, j + 1)));
				chk[(step + 1) % 4][i][j + 1] = true;
			}
		}
		printf("Case #%d: ", cas);
		if (!found)printf("impossible\n");
		else printf("%d\n", step);
	}
	return 0;
}
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.PriorityQueue;
import java.util.Scanner;


public class LaserMaze {
	static String FILENAME = "laser_maze.txt";

	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException{
		Scanner sc = new Scanner(new FileReader(FILENAME));
		PrintWriter writer = new PrintWriter(FILENAME + "OUT" + ".txt", "UTF-8");
		int t = sc.nextInt();
		for(int c = 1; c <= t; c++){
			int x = sc.nextInt();
			int y = sc.nextInt();
			char[][] map = new char[x][y];
			for(int i = 0; i < x; i++){
				String s = sc.next();
				for(int j = 0; j < y; j++){
					map[i][j] = s.charAt(j);
				}
			}
			writer.print("Case #" + c + ": ");
			writer.println(solve(map, x, y));
		}
		writer.close();
	}

	private static String solve(char[][] map, int x, int y) {
		boolean[][][] illegal = new boolean [x][y][4];
		int goalX = 0;
		int goalY = 0;
		int startX = 0;
		int startY = 0;
		int ans = -1;
		for(int i = 0; i < x; i++){
			for(int j = 0; j <  y; j++){
				if(map[i][j] == '#' || map[i][j] == '<' || map[i][j] == '>' || map[i][j] == '^' || map[i][j] == 'v'){
					illegal[i][j][0] = true;
					illegal[i][j][1] = true;
					illegal[i][j][2] = true;
					illegal[i][j][3] = true;
				}
				if(map[i][j] == '<'){
					fill(i,j, map, illegal, 0);
				}
				if(map[i][j] == '^'){
					fill(i,j, map, illegal, 1);
				}
				if(map[i][j] == '>'){
					fill(i,j, map, illegal, 2);
				}
				if(map[i][j] == 'v'){
					fill(i,j, map, illegal, 3);
				}
				if(map[i][j] == 'G'){
					goalX = i;
					goalY = j;
				}
				if(map[i][j] == 'S'){
					startX = i;
					startY = j;
				}
			}			
		}
		PriorityQueue<Triple> pq = new PriorityQueue<Triple>();
		pq.add(new Triple(startX, startY, 0));
		boolean start = true;
		while(!pq.isEmpty()){
			Triple cur = pq.poll();
			if(start){
				start = false;
			}
			else if(illegal[cur.x][cur.y][cur.t%4]){
				continue;
			}
			if(cur.x == goalX && cur.y == goalY){
				ans = cur.t;
				break;
			}
			if(cur.x > 0){
				pq.add(new Triple(cur.x-1, cur.y, cur.t+1));
			}
			if(cur.x < x-1){
				pq.add(new Triple(cur.x+1, cur.y, cur.t+1));
			}
			if(cur.y > 0){
				pq.add(new Triple(cur.x, cur.y-1, cur.t+1));
			}
			if(cur.y < y-1){
				pq.add(new Triple(cur.x, cur.y+1, cur.t+1));
			}
			illegal[cur.x][cur.y][cur.t%4] = true;
			
		}
		if(ans > 0){
			return Integer.toString(ans);
		}
		return "impossible";
	}
	
	private static void fill(int i, int j, char[][] map, boolean[][][] illegal,
			int k) {
		int m = j;
		m--;
		while(m >= 0 && (map[i][m] == '.' || map[i][m] == 'S' || map[i][m] == 'G')){
			illegal[i][m][(4-k)%4] = true;
			m--;
		}
		m = i;
		m--;
		while(m >= 0 && (map[m][j] == '.' || map[m][j] == 'S' || map[m][j] == 'G')){
			illegal[m][j][(5-k)%4] = true;
			m--;
		}
		m = j;
		m++;
		while(m < map[0].length && (map[i][m] == '.' || map[i][m] == 'S' || map[i][m] == 'G')){
			illegal[i][m][(6-k)%4] = true;
			m++;
		}
		m = i;
		m++;
		while(m < map.length && (map[m][j] == '.' || map[m][j] == 'S' || map[m][j] == 'G')){
			illegal[m][j][(7-k)%4] = true;
			m++;
		}
		
	}
	
	static class Triple implements Comparable<Triple>{
		int x;
		int y;
		int t;
		Triple(int a, int b, int c){
			x = a;
			y = b;
			t = c;
		}
		@Override
		public int compareTo(Triple o) {
			if(this.t== o.t){
				if(this.x == o.x){
					return Integer.compare(this.y, o.y);
				}
				return Integer.compare(this.x, o.x);
			}
			return Integer.compare(this.t, o.t);
		}
	}

}

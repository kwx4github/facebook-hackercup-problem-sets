#include <bits/stdc++.h>

using namespace std;

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

main()
 {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    map<char, int> dir =
    {
        {'^', 2},
        {'>', 1},
        {'v', 0},
        {'<', 3},
    };
    map<char, char> nxt =
    {
        {'^', '>'},
        {'>', 'v'},
        {'v', '<'},
        {'<', '^'},
    };
    for(int i = 1; i <= t; i++)
    {
        cout << "Case #" << i << ": ";
        int n, m;
        cin >> n >> m;
        string x[4][n + 2];
        for(int z = 0; z < 4; z++)
            for(int i = 0; i <= n + 1; i++)
                x[z][i].resize(m + 2);
        x[0][0] = x[0][n + 1] = string(m + 2, '#');
        for(int i = 1; i <= n; i++)
            cin >> x[0][i],
            x[0][i] = '#' + x[0][i] + '#';
        for(int z = 1; z < 4; z++)
            for(int i = 0; i <= n + 1; i++)
                for(int j = 0; j <= m + 1; j++)
                {
                    x[z][i][j] = x[z - 1][i][j];
                    if(nxt[x[z][i][j]])
                        x[z][i][j] = nxt[x[z][i][j]];
                }
        int block[4][n + 2][m + 2];
        memset(block, 0, sizeof(block));
        for(int z = 0; z < 4; z++)
            for(int i = 0; i <= n + 1; i++)
                for(int j = 0; j <= m + 1; j++)
                {
                    char c = x[z][i][j];
                    if(nxt[c] || c == '#') block[z][i][j] = 1;
                    if(nxt[c])
                    {
                        int X = i + dx[dir[c]], Y = j + dy[dir[c]];
                        while(x[z][X][Y] != '#' && !nxt[x[z][X][Y]])
                        {
                            block[z][X][Y] = 1;
                            X += dx[dir[c]];
                            Y += dy[dir[c]];
                        }
                    }
                }

        int dist[4][n + 2][m + 2];
        memset(dist, 63, sizeof(dist));
        int ans = dist[0][0][0], inf = ans;
        int qx[4 * (n + 2) * (m + 2) + 42];
        int qy[4 * (n + 2) * (m + 2) + 42];
        int qz[4 * (n + 2) * (m + 2) + 42];
        int st = 0, fi = 1;
        qz[0] = 0;
        int fx, fy;
        for(int i = 0; i <= n + 1; i++)
            for(int j = 0; j <= m + 1; j++)
                if(x[0][i][j] == 'S')
                    qx[0] = i, qy[0] = j;
                else if(x[0][i][j] == 'G')
                    fx = i, fy = j;
        dist[qz[0]][qx[0]][qy[0]] = 0;
        while(st < fi)
        {
            int x = qx[st];
            int y = qy[st];
            int z = qz[st];
            if(x == fx && y == fy)
                ans = min(ans, dist[z][x][y]);
            st++;
            for(int i = 0; i < 4; i++)
            {
                int Z = (z + 1) % 4;
                int X = x + dx[i];
                int Y = y + dy[i];
                if(!block[Z][X][Y] && dist[z][x][y] + 1 < dist[Z][X][Y])
                {
                    dist[Z][X][Y] = dist[z][x][y] + 1;
                    qx[fi] = X;
                    qy[fi] = Y;
                    qz[fi] = Z;
                    fi++;
                }
            }
        }
        if(ans == inf) cout << "impossible";
        else cout << ans;
        cout << "\n";
    }
 }

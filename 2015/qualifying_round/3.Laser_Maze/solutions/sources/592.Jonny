#include<fstream>
#include<vector>
#include<algorithm>
#include<string>
#include<queue>

using namespace std;

int main(){
	ifstream fin("lm.in");
	ofstream fout("lm.out");
	int t; fin >> t;
	for (int i = 1; i <= t; i++){
		queue<pair<pair<int, int>, int > >Q;
		pair<int, int> current, end;
		int m, n, cur, curturn; fin >> m >> n;
		vector<string> maze(m);
		vector<vector<vector<bool> > > ispossible(m, vector<vector<bool> >(n, vector<bool>(4, true)));
		vector<vector<vector<int> > > bestturn(m, vector<vector<int> >(n, vector<int>(4, -1)));
		for (int k = 0; k < m; k++)
			fin >> maze[k];
		for (int k = 0; k < m; k++){
			for (int j = 0; j < n; j++){
				if (!(maze[k][j] == '.' || maze[k][j] == 'S' || maze[k][j] == 'G'))
					ispossible[k][j][0] = ispossible[k][j][1] = ispossible[k][j][2] = ispossible[k][j][3] = 0;
				if (maze[k][j] == '^'){
					cur = k - 1;
					while (cur >= 0 && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur--][j][0] = false;
					cur = k + 1;
					while (cur < m && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur++][j][2] = false;
					cur = j - 1;
					while (cur >= 0 && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur--][3] = false;
					cur = j + 1;
					while (cur < n && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur++][1] = false;

				}
				if (maze[k][j] == '>'){
					cur = k - 1;
					while (cur >= 0 && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur--][j][3] = false;
					cur = k + 1;
					while (cur < m && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur++][j][1] = false;
					cur = j - 1;
					while (cur >= 0 && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur--][2] = false;
					cur = j + 1;
					while (cur < n && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur++][0] = false;
				}
				if (maze[k][j] == '<'){
					cur = k - 1;
					while (cur >= 0 && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur--][j][1] = false;
					cur = k + 1;
					while (cur < m && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur++][j][3] = false;
					cur = j - 1;
					while (cur >= 0 && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur--][0] = false;
					cur = j + 1;
					while (cur < n && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur++][2] = false;
				}
				if (maze[k][j] == 'v'){
					cur = k - 1;
					while (cur >= 0 && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur--][j][2] = false;
					cur = k + 1;
					while (cur < m && (maze[cur][j] == '.' || maze[cur][j] == 'S' || maze[cur][j] == 'G'))
						ispossible[cur++][j][0] = false;
					cur = j - 1;
					while (cur >= 0 && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur--][1] = false;
					cur = j + 1;
					while (cur < n && (maze[k][cur] == '.' || maze[k][cur] == 'S' || maze[k][cur] == 'G'))
						ispossible[k][cur++][3] = false;
				}
				if (maze[k][j] == 'S'){
					Q.push(make_pair(make_pair(k, j), 0));
					bestturn[k][j][0] = 0;
				}
				if (maze[k][j] == 'G')
					end = make_pair(k, j);
			}
		}
		while (!Q.empty()){
			current = Q.front().first;
			curturn = Q.front().second;
			if (current.first > 0 && ispossible[current.first - 1][current.second][(curturn + 1) % 4] && 
				bestturn[current.first - 1][current.second][(curturn + 1) % 4] == -1){
				Q.push(make_pair(make_pair(current.first - 1, current.second), curturn + 1));
				bestturn[current.first - 1][current.second][(curturn + 1) % 4] = curturn + 1;
			}
			if (current.first + 1 < m && ispossible[current.first + 1][current.second][(curturn + 1) % 4] &&
				bestturn[current.first + 1][current.second][(curturn + 1) % 4] == -1){
				Q.push(make_pair(make_pair(current.first + 1, current.second), curturn + 1));
				bestturn[current.first + 1][current.second][(curturn + 1) % 4] = curturn + 1;
			}
			if (current.second > 0 && ispossible[current.first][current.second - 1][(curturn + 1) % 4] &&
				bestturn[current.first][current.second - 1][(curturn + 1) % 4] == -1){
				Q.push(make_pair(make_pair(current.first, current.second - 1), curturn + 1));
				bestturn[current.first][current.second - 1][(curturn + 1) % 4] = curturn + 1;
			}
			if (current.second + 1 < n && ispossible[current.first][current.second + 1][(curturn + 1) % 4] &&
				bestturn[current.first][current.second + 1][(curturn + 1) % 4] == -1){
				Q.push(make_pair(make_pair(current.first, current.second + 1), curturn + 1));
				bestturn[current.first][current.second + 1][(curturn + 1) % 4] = curturn + 1;
			}
			Q.pop();
		}
		int minturns = 1000000000;
		minturns = (bestturn[end.first][end.second][0] == -1 ? minturns : min(bestturn[end.first][end.second][0], minturns));
		minturns = (bestturn[end.first][end.second][1] == -1 ? minturns : min(bestturn[end.first][end.second][1], minturns));
		minturns = (bestturn[end.first][end.second][2] == -1 ? minturns : min(bestturn[end.first][end.second][2], minturns));
		minturns = (bestturn[end.first][end.second][3] == -1 ? minturns : min(bestturn[end.first][end.second][3], minturns));
		fout << "Case #" << i << ": ";
		if (minturns == 1000000000)
			fout << "impossible";
		else
			fout << minturns;
		fout << endl;
	}
}
	
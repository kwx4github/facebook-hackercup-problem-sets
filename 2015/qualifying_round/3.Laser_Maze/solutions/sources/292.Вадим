import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class LM {

    String lazer=">v<^";

    int getInd(char c){
        return lazer.indexOf(c);
    }

    class Point{
        int x,y,t;

        public Point(int x, int y, int t) {
            this.x = x;
            this.y = y;
            this.t = t;
        }
    }

    void solve() throws IOException {
        int t=nextInt();
        for(int testCase=0;testCase<t;testCase++){
            int n=nextInt();
            int m=nextInt();
            char[][] field=new char[n][];
            for(int i=0;i<n;i++)field[i]=nextToken().toCharArray();
            int[][][] a=new int[n][m][4];
            int[] dy={1,0,-1,0};
            int[] dx={0,1,0,-1};
            int sx=0,sy=0,gx=0,gy=0;
            for(int i=0;i<n;i++)
                for(int j=0;j<m;j++){
                    if(field[i][j]=='S'){
                        sx=i;
                        sy=j;
                    }
                    if(field[i][j]=='G'){
                        gx=i;
                        gy=j;
                    }
                    if(field[i][j]=='#')a[i][j][0]=a[i][j][1]=a[i][j][2]=a[i][j][3]=1;
                    else{
                        if(field[i][j]!='.'&&field[i][j]!='G'&&field[i][j]!='S'){
                            int ind=getInd(field[i][j]);
                            if(ind==-1){
                                out.println(field[i][j]);
                                out.flush();
                            }
                            for(int k=0;k<4;k++){
                                int x=i;
                                int y=j;
                                a[i][j][k]=1;
                                x+=dx[ind];
                                y+=dy[ind];
                                while(x>=0&&x<n&&y>=0&&y<m){
                                    if(field[x][y]!='.'&&field[x][y]!='S'&&field[x][y]!='G')break;
                                    a[x][y][k]=1;
                                    x+=dx[ind];
                                    y+=dy[ind];
                                }
                                ind=(ind+1)%4;
                            }
                        }
                    }
                }
            /*if(a[sx][sy][0]!=0){
                out.printf("Case #%d: impossible\n",testCase);
                continue;
            }*/
            int[][][] d=new int[n][m][4];
            for(int i=0;i<n;i++)
                for(int j=0;j<m;j++)
                    for(int k=0;k<4;k++)d[i][j][k]=-1;
            d[sx][sy][0]=0;
            LinkedList<Point> q=new LinkedList<Point>();
            q.add(new Point(sx,sy,0));
            while(!q.isEmpty()){
                Point cur=q.poll();
                int x=cur.x;
                int y=cur.y;
                int time=cur.t;
                int nt=(time+1)%4;
                for(int i=0;i<4;i++){
                    int nx=x+dx[i];
                    int ny=y+dy[i];
                    if(nx>=0&&nx<n&&ny>=0&&ny<m&&a[nx][ny][nt]==0&&d[nx][ny][nt]==-1){

                            d[nx][ny][nt] = d[x][y][time] + 1;

                        q.add(new Point(nx,ny,nt));
                    }
                }
            }
            int ans=-1;
            for(int i=0;i<4;i++)
                if(d[gx][gy][i]!=-1&&(ans==-1||ans>d[gx][gy][i]))ans=d[gx][gy][i];
            if(ans==-1)
                out.printf("Case #%d: impossible\n",testCase+1);
            else
                out.printf("Case #%d: %d\n",testCase+1,ans);

        }
    }

    public static void main(String[] args) throws IOException {
        new LM().run();
    }

    void run() throws IOException {
        reader = new BufferedReader(new InputStreamReader(System.in));
		reader = new BufferedReader(new FileReader("input.txt"));
        tokenizer = null;
        out = new PrintWriter(new OutputStreamWriter(System.out));
		out = new PrintWriter(new FileWriter("output.txt"));
        solve();
        reader.close();
        out.flush();

    }

    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }
}

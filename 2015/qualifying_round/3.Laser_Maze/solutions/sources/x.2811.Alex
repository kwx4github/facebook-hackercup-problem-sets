#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;

struct state { int o, r, c, d; };

int T, R, C, sr, sc, gr, gc;
char G[4][105][105];
bool V[4][105][105];

int main() {
  freopen("laser_maze.txt", "r", stdin);
  freopen("output.txt", "w", stdout);

  cin >> T;
  for (int t = 1; t <= T; t++) {
    memset(G, '#', sizeof G);
    memset(V,  0 , sizeof V);
    cin >> R >> C;
    for (int r = 1; r <= R; r++) {
      for (int c = 1; c <= C; c++) {
        cin >> G[0][r][c];
        if (G[0][r][c] == 'S') sr = r, sc = c, G[0][r][c] = '.';
        if (G[0][r][c] == 'G') gr = r, gc = c, G[0][r][c] = '.';
      }
    }
    for (int o = 1; o < 4; o++) memcpy(G[o], G[0], sizeof(G[0]));
    //precompute walkable areas for all orientations
    for (int o = 0; o < 4; o++) {
      if (o > 0) { //rotate lazers
        for (int r = 1; r <= R; r++) {
          for (int c = 1; c <= C; c++) {
            switch (G[o - 1][r][c]) {
              case '^': G[o][r][c] = '>'; break;
              case '>': G[o][r][c] = 'v'; break;
              case 'v': G[o][r][c] = '<'; break;
              case '<': G[o][r][c] = '^'; break;
            }
          }
        }
      }
      //fill unreachable locations due to lazers
      for (int r = 1; r <= R; r++) {
        for (int c = 1; c <= C; c++) {
          switch (G[o][r][c]) {
            case '^': for (int rr = r-1; G[o][rr][c] == '.'; rr--) G[o][rr][c] = '#'; break;
            case 'v': for (int rr = r+1; G[o][rr][c] == '.'; rr++) G[o][rr][c] = '#'; break;
            case '<': for (int cc = c-1; G[o][r][cc] == '.'; cc--) G[o][r][cc] = '#'; break;
            case '>': for (int cc = c+1; G[o][r][cc] == '.'; cc++) G[o][r][cc] = '#'; break;
          }
        }
      }
    }
    int ans = -1, o, r, c, d;
    queue<state> q;
    for (q.push((state){0, sr, sc, 0}); !q.empty(); q.pop()) {
      o = q.front().o;
      r = q.front().r;
      c = q.front().c;
      d = q.front().d;
      if (V[o][r][c] || (d > 0 && G[o][r][c] != '.')) continue;
      V[o][r][c] = 1;
      if (r == gr && c == gc) {
        ans = d;
        break;
      }
      o = (o + 1) % 4;
      d++;
      q.push((state){o, r - 1, c, d});
      q.push((state){o, r + 1, c, d});
      q.push((state){o, r, c - 1, d});
      q.push((state){o, r, c + 1, d});
    }
    cout << "Case #" << t << ": ";
    if (ans < 0) cout << "impossible" << endl;
    else cout << ans << endl;
  }

  return 0;
}

#include<iostream>
#include<queue>
#include<map>
#include<fstream>
using namespace std;

int mi[4]={-1,0,1,0};
int mj[4]={0,1,0,-1};

int t,m,n;
string input;
map<char,int>ttype;

struct item{
    int i,j,tt;
};

int main(){
    ifstream fin("laser_maze.txt");
    ofstream fout("laser_maze_out.txt");
    ttype['^']=1;
    ttype['>']=2;
    ttype['v']=3;
    ttype['<']=4;
    fin>>t;
    //cout<<"t:"<<t<<endl;


    for(int ca=1;ca<=t;ca++){
        int maze[4][110][110]={0};
        int targeti=0,targetj=0;

        fin>>m>>n;
        //cout<<"m:"<<m<<"\tn:"<<n<<endl;
        item tmp;
        queue<item>tq;

        queue<int>q;

        for(int i=0;i<m;i++){
            fin>>input;
            for(int j=0;j<n;j++){
                if(input.at(j)=='#'){
                    maze[0][i][j]=maze[1][i][j]=maze[2][i][j]=maze[3][i][j]=1;
                }
                else if(input.at(j)=='<' || input.at(j)=='>' || input.at(j)=='^'  || input.at(j)=='v'){

                    maze[0][i][j]=maze[1][i][j]=maze[2][i][j]=maze[3][i][j]=1;
                    tmp.i=i;
                    tmp.j=j;
                    tmp.tt=ttype[input.at(j)];
                    tq.push(tmp);
                }
                else if(input.at(j)=='S'){
                    q.push(i);
                    q.push(j);
                }
                else if(input.at(j)=='G'){
                    targeti=i;
                    targetj=j;
                }
            }
        }

        while(!tq.empty()){
            tmp=tq.front();
            tq.pop();
            int ci=tmp.i;
            int cj=tmp.j;
            int mt=((tmp.tt-1)+4)%4;

            for(int cnt=0;cnt<4;cnt++){
                int ni=ci+mi[mt];
                int nj=cj+mj[mt];
                //cout<<"ni:"<<ni<<"\tnj:"<<nj<<endl;
                while(!maze[cnt][ni][nj] &&!(ni<0 || nj<0 ||ni>=m || nj>=n)){
                    //cout<<"\tni:"<<ni<<"\tnj:"<<nj<<endl;
                    maze[cnt][ni][nj]=1;
                    ni+=mi[mt];
                    nj+=mj[mt];
                }
                mt+=1;
                mt%=4;

             /*   for(int i=0;i<m;i++){
                    for(int j=0;j<n;j++){
                        cout<<maze[cnt][i][j]<<"\t";
                    }
                    cout<<endl;
                }
                cout<<endl;*/

            }
        }
        int cnt=0,ans=0;
        bool f1=false;
        while(!q.empty() && !f1){
            cnt++;
            for(int entries=0,l=q.size()/2;entries<l && !f1;entries++){
                int ci=q.front();
                q.pop();
                int cj=q.front();
                q.pop();

                for(int i=0;i<4 && !f1;i++){
                    int ni=ci+mi[i];
                    int nj=cj+mj[i];

                    if(ni<0 || nj<0 ||ni>=m || nj>=n){
                        continue;
                    }
                    if(maze[cnt%4][ni][nj]==1){
                        continue;
                    }
                    if(ni==targeti && nj==targetj){
                        f1=true;
                        ans=cnt;
                    }
                    else{
                        maze[cnt%4][ni][nj]=1;
                        q.push(ni);
                        q.push(nj);
                    }
                }
            }
        }
        fout<<"Case #"<<ca<<": ";
        if(f1){
            fout<<ans<<"\n";
        }
        else{
            fout<<"impossible\n";
        }
    }
    return 0;
}

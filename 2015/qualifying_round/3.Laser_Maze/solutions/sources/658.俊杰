#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
char laser[4]={'<','^','>','v'};
int mx[4]={0,-1,0,1};
int my[4]={-1,0,1,0};
struct stat{
	int x;
	int y;
	int t;
	stat(int _x=-1,int _y=-1,int _t=-1):x(_x),y(_y),t(_t){}
	stat move(int i)const{
		return stat(x+mx[i],y+my[i],t+1);
	}		
};
char board[120][120];
bool block[120][120][4];
int dis[120][120][4];
int main(){
	int t,cs;
	int n,m,i,j,k,l,sx,sy,gx,gy,tx,ty;
	scanf("%d",&t);
	for(cs=1;cs<=t;cs++){
		scanf("%d%d",&n,&m);
		memset(block,0,sizeof(block));
		for(i=0;i<n;i++) scanf("%s",board[i]);
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				if(board[i][j]=='#'){
					for(k=0;k<4;k++) block[i][j][k]=true;
				}
				else if(board[i][j]=='S'){
					sx=i;
					sy=j;
				}
				else if(board[i][j]=='G'){
					gx=i;
					gy=j;
				}
				else{
					for(l=0;l<4;l++){
						if(laser[l]==board[i][j]) break;
					}
					if(l==4) continue;
					for(k=0;k<4;k++){
						tx=i+mx[(k+l)%4];
						ty=j+my[(k+l)%4];
						block[i][j][k]=true;
						while(tx>=0&&tx<n&&ty>=0&&ty<m&&board[tx][ty]=='.'||board[tx][ty]=='S'||board[tx][ty]=='G'){
							block[tx][ty][k]=true;
							tx+=mx[(k+l)%4];
							ty+=my[(k+l)%4];
						}
					}
				}
			}
		}
		memset(dis,0x3f,sizeof(dis));
		dis[sx][sy][0]=0;
		queue<stat> q;
		q.push(stat(sx,sy,0));
		while(!q.empty()){
			stat tmp;
			for(i=0;i<4;i++){
				tmp=q.front().move(i);
				if(tmp.x>=0&&tmp.x<n&&tmp.y>=0&&tmp.y<m){
					if(!block[tmp.x][tmp.y][tmp.t%4]&&tmp.t<dis[tmp.x][tmp.y][tmp.t%4]){
						q.push(tmp);
						dis[tmp.x][tmp.y][tmp.t%4]=tmp.t;
					}
				}
			}
			q.pop();
		}
		int ans=0x3f3f3f3f;
		for(i=0;i<4;i++) ans=min(ans,dis[gx][gy][i]);
		if(ans==0x3f3f3f3f) printf("Case #%d: impossible\n",cs);
		else printf("Case #%d: %d\n",cs,ans);
	}
	return 0;
}
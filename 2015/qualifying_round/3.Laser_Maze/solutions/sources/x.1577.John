#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<bitset>
#include<time.h>
#define ll long long
#define inf 0x7FFFFFFF
#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;
char Map[4][111][111];
map<char,int>M;
char dir[4]={'^','>','v','<'};
int dd[4][2]={1,0,-1,0,0,1,0,-1};
bool flag[4][111][111];
struct node
{
    int x,y;
    int step;
}s,e;
vector<node>towers;
void findSE(int n,int m)
{
    s.step=0;
    e.step=0;
    int i,j;
    for (i=0;i<n;i++)
    for (j=0;j<m;j++)
    {
        if (Map[0][i][j]=='S')
        {
            Map[0][i][j]='.';
            s.x=i;
            s.y=j;
        }
        else if (Map[0][i][j]=='G')
        {
            Map[0][i][j]='.';
            e.x=i;
            e.y=j;
        }
    }
}
void getOtherMap(int n,int m)
{
    towers.clear();
    int i,j,k;
    for (i=0;i<n;i++)
    for (j=0;j<m;j++)
    {
        if (M.find(Map[0][i][j])==M.end())
        {
            for (k=1;k<4;k++)
            {
                Map[k][i][j]=Map[0][i][j];
            }
            continue;
        }
        node p;
        p.x=i;
        p.y=j;
        p.step=0;
        towers.push_back(p);
        for (k=1;k<4;k++)
        {
            Map[k][i][j]=dir[(M[Map[0][i][j]]+k)%4];
        }
    }
}
void printOtherMap(int n,int m)
{
    int i,j,k;
    for (k=1;k<4;k++){
    for (i=0;i<n;i++)
    {
        puts(Map[k][i]);
    }cout<<endl<<endl;}
}
bool check(int x,int y,int step,int n,int m)//x,y,flag,step
{
    if (x>=0&&x<n && y>=0&&y<m && Map[step%4][x][y]=='.' && flag[step%4][x][y]==0)
    {
        for (int i=0;i<towers.size();i++)
        {
            int nowx=towers[i].x;
            int nowy=towers[i].y;
            if (Map[step%4][nowx][nowy]=='^')
            {
                if (y==nowy && x<nowx) return false;
            }
            else if (Map[step%4][nowx][nowy]=='>')
            {
                if (x==nowx && y>nowy) return false;
            }
            else if (Map[step%4][nowx][nowy]=='v')
            {
                if (y==nowy && x>nowx) return false;
            }
            else if (Map[step%4][nowx][nowy]=='<')
            {
                if (x==nowx && y<nowy) return false;
            }
        }
        return true;
    }
    return false;
}
int bfs(int n,int m)
{
    memset(flag,0,sizeof(flag));
    flag[0][s.x][s.y]=1;
    queue<node>Q;
    node p,q;
    p=s;
    Q.push(p);
    while (!Q.empty())
    {
        q=Q.front();
        Q.pop();
        for (int i=0;i<4;i++)
        {
            int tx=q.x+dd[i][0];
            int ty=q.y+dd[i][1];
            int step=q.step+1;
            if (check(tx,ty,step,n,m))//x,y,flag,step
            {
                flag[step%4][tx][ty]=1;
                if (tx==e.x && ty==e.y)
                {
                    return step;
                }
                p.x=tx;
                p.y=ty;
                p.step=step;
                Q.push(p);
            }
        }
    }
    return -1;
}
int main()
{
    int i,j,k;
    int n,m,t;
    M.clear();
    for (i=0;i<4;i++)
    {
        M[dir[i]]=i;
    }
    //srand((unsigned)time(NULL));//int data=rand()%10000+1;
    freopen("laser_maze.txt","r",stdin);freopen("output.txt","w",stdout);
    scanf("%d",&t);for(int tcase=1;tcase<=t;tcase++)
    //while(scanf("%d",&n)!=EOF)
    {
        scanf("%d%d",&n,&m);
        for (i=0;i<n;i++)
        {
            scanf("%s",Map[0][i]);
        }
        findSE(n,m);
        getOtherMap(n,m);
        //printOtherMap(n,m);
        int ans=bfs(n,m);
        if (ans==-1)
        {
            printf("Case #%d: impossible\n",tcase);
        }
        else printf("Case #%d: %d\n",tcase,ans);
    }
}
/*
5
2 5
##^##
S...G
2 5
##v##
S...G
1 5
S..G<
1 6
S...G<
5 5
S....
.....
.>v..
.^<..
....G
*/

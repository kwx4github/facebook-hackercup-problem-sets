#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <memory.h>
#include <vector>
#include <queue>
#include <deque>
#include <string>
#include <stack>
#include <ctime>
#include <set>
#include <map>
#include <list>
#include <memory.h>

using namespace std;

queue <pair<int, pair<int, int> > > q;
string s[1000], a[4][1000];
int d[4][1000][1000], t, n, m, xs, ys, xf, yf, c[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
bool used[4][1000][1000];

int main() {
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
   	//freopen("courier.in", "r", stdin); freopen("courier.out", "w", stdout);
	
	cin >> t;
	for (int ii = 0; ii < t; ++ii) {
		cout << "Case #" << ii + 1 << ": "; 
		cin >> n >> m;
		memset(used, 0, sizeof(used));
		memset(d, 0, sizeof(d));
		for (int i = 0; i < n; ++i) {
			cin >> s[i];
			for (int j = 0; j < m; ++j) {
				if (s[i][j] == 'S') {
					xs = i;
					ys = j;
					s[i][j] = '.';
				}
				if (s[i][j] == 'G') {
					xf = i;
					yf = j;
					s[i][j] = '.';
				}
			}
		}
		for (int k = 0; k < 4; ++k) {
			for (int i = 0; i < n; ++i) {
				a[k][i] = s[i];
			}
		}
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (s[i][j] == '^') {
					for (int k = j + 1; k < m && s[i][k] == '.'; ++k) {
						a[0][i][k] = '#';
					}
					for (int k = i + 1; k < n && s[k][j] == '.'; ++k) {
						a[1][k][j] = '#';
					}
					for (int k = j - 1; k >= 0 && s[i][k] == '.'; --k) {
						a[2][i][k] = '#';
					}
					for (int k = i - 1; k >= 0 && s[k][j] == '.'; --k) {
						a[3][k][j] = '#';
					}
				} else if (s[i][j] == '>') {
					for (int k = j + 1; k < m && s[i][k] == '.'; ++k) {
						a[3][i][k] = '#';
					}
					for (int k = i + 1; k < n && s[k][j] == '.'; ++k) {
						a[0][k][j] = '#';
					}
					for (int k = j - 1; k >= 0 && s[i][k] == '.'; --k) {
						a[1][i][k] = '#';
					}
					for (int k = i - 1; k >= 0 && s[k][j] == '.'; --k) {
						a[2][k][j] = '#';
					}
				} else if (s[i][j] == 'v') {
					for (int k = j + 1; k < m && s[i][k] == '.'; ++k) {
						a[2][i][k] = '#';
					}
					for (int k = i + 1; k < n && s[k][j] == '.'; ++k) {
						a[3][k][j] = '#';
					}
					for (int k = j - 1; k >= 0 && s[i][k] == '.'; --k) {
						a[0][i][k] = '#';
					}
					for (int k = i - 1; k >= 0 && s[k][j] == '.'; --k) {
						a[1][k][j] = '#';
					}
				} else if (s[i][j] == '<') {
					for (int k = j + 1; k < m && s[i][k] == '.'; ++k) {
						a[1][i][k] = '#';
					}
					for (int k = i + 1; k < n && s[k][j] == '.'; ++k) {
						a[2][k][j] = '#';
					}
					for (int k = j - 1; k >= 0 && s[i][k] == '.'; --k) {
						a[3][i][k] = '#';
					}
					for (int k = i - 1; k >= 0 && s[k][j] == '.'; --k) {
						a[0][k][j] = '#';
					}
				}
			}
		}
		q.push(make_pair(3, make_pair(xs, ys)));
		while(!q.empty()) {
			int k = q.front().first, x = q.front().second.first, y = q.front().second.second;
			q.pop();
			if (!used[k][x][y]) {
				used[k][x][y] = true;
				for (int i = 0; i < 4; ++i) {
					int x1 = x + c[i][0], y1 = y + c[i][1];
					if (0 <= x1 && x1 < n && 0 <= y1 && y1 < m && a[(k + 1) % 4][x1][y1] == '.') {
						if (d[(k + 1) % 4][x1][y1] == 0) {
							d[(k + 1) % 4][x1][y1] = d[k][x][y] + 1;
						} else {
							d[(k + 1) % 4][x1][y1] = min(d[k][x][y] + 1, d[(k + 1) % 4][x1][y1]);
						}
						q.push(make_pair((k + 1) % 4, make_pair(x1, y1)));
					}
				}
			}
		}
		/*for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < n; ++j) {
				cout << a[i][j] << endl;
			}
			cout << endl;
			for (int j = 0; j < n; ++j) {
				for (int k = 0; k < m; ++k) {
					cout << d[i][j][k] << " ";
				}
				cout << endl;
			}
			cout << endl;
		}*/
		if (!used[0][xf][yf] && !used[1][xf][yf] && !used[2][xf][yf] && !used[3][xf][yf]) {
			cout << "impossible" << endl;
		} else {
			int ans = 1000 * 1000 * 1000;
			for (int i = 0; i < 4; ++i) {
				if (used[i][xf][yf]) {
					ans = min(ans, d[i][xf][yf]);
				}
			}
			cout << ans << endl;
		}
	}
	
	return 0;
}

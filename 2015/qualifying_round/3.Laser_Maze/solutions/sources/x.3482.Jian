#include <assert.h>
#include <cstring>
#include <iostream>
#include <fstream>
#include <climits>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <map>
#include <list>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

bool vis[110][110][4];
string g[110];

struct node {
	int x, y;
	int step;
};

int M, N;

int u[4][2] = {-1, 0, 0, 1, 1, 0, 0, -1};

bool inBound(int x, int y) {
	if (x < M && x >=0 && y < N && y >= 0) return true;
	else return false;
}

bool canStay(int x, int y) {
	if (g[x][y] == '.' || g[x][y] == 'G' || g[x][y] == 'S' ) return true;
	else return false;
}

int getLaserDir(int x, int y, int step) {
	if (g[x][y] == '^') return (0 + step) % 4;
	else if (g[x][y] == '>') return (1 + step) % 4;
	else if (g[x][y] == 'v') return (2 + step) % 4; 
	else return (3 + step) % 4;
}

int isLaser(int x, int y) {
	if (g[x][y] == '<' || g[x][y] == '>' || g[x][y] == '^' || g[x][y] == 'v') return true;
	else return false;
}

bool check(int x, int y, int step) {
	if (inBound(x ,y) && !vis[x][y][step % 4] && canStay(x, y)) return true;
	else return false;
}

bool noLaser(int x, int y, int step) {
	bool ans = true;
	for (int i = 0; i < 4; i++) {
		int tx = x, ty = y;
		while (inBound(tx, ty) && canStay(tx, ty)) {
			tx += u[i][0];
			ty += u[i][1];
		}
		if (isLaser(tx, ty)) {
			int dir = getLaserDir(tx, ty, step);
			if (dir == 0 && i == 2) return false;
			else if (dir == 2 && i == 0) return false;
			else if (dir == 1 && i == 3) return false;
			else if (dir == 3 && i == 1) return false;
		}
	}
	return true;
}

int bfs(int sx, int sy) {
	queue<node> q;
	node start;
	start.x = sx;
	start.y = sy;
	start.step = 0;
	q.push(start);

	memset(vis, false, sizeof(vis));
	vis[sx][sy][0] = true;

	while(q.size() > 0) {
		node t = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int x = t.x + u[i][0];
			int y = t.y + u[i][1];
			int step = t.step + 1;
			if (check(x, y, step) && noLaser(x, y, step)) {
				if (g[x][y] == 'G') return step;
				node nt;
				nt.x = x;
				nt.y = y;
				nt.step = step;
				vis[x][y][step % 4] = true;
				q.push(nt);
			}
		}
	}
	return -1;
}

int main() {
	int t;
	cin >> t;
	for (int i = 1; i <= t; i++ ) {
		cin >> M >> N;
		int sx, sy;
		for (int j = 0; j < M; j++) {
			cin >> g[j];
			for (int k = 0; k < N; k++) {
				if (g[j][k] == 'S') {
					sx = j;
					sy = k;
				}
			}
		}

		int ans = bfs(sx, sy);
		if (ans != -1) {
			printf("Case #%d: %d\n", i, ans);
		} else {
			printf("Case #%d: impossible\n", i);
		}
	}
	return 0;
}
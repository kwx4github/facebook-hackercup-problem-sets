#include<bits/stdc++.h>

using namespace std;

#define Node pair<pair<int,int>,int>


const int kMaxN = 128;

int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};
char Tur[] = {'<','^','>','v'};

int T,N,M;
char A[kMaxN][kMaxN];
int dis[kMaxN][kMaxN][5];

int isTurr(int x,int y){
	for(int i=0;i<4;i++)
		if(A[x][y] == Tur[i])return i;
	return -1;
}

bool check(int x,int y,int nqu){
    
	if(isTurr(x,y) != -1)return false;
	int numbTurr;
	
	for(int i=x;i<N;i++){
	    numbTurr = isTurr(i,y);
		if(A[i][y] == '#')break;
		if(numbTurr != -1){
		    if(i<x && (numbTurr + nqu)%4 == 3)return false;
			if(i>x && (numbTurr + nqu)%4 == 1)return false;
		}
	}
	
	
	for(int i=x;i>=0;i--){
	    numbTurr = isTurr(i,y);
		if(A[i][y] == '#')break;
		if(numbTurr != -1){
		    if(i<x && (numbTurr + nqu)%4 == 3)return false;
			if(i>x && (numbTurr + nqu)%4 == 1)return false;
		}
	}
	
	for(int i=y;i<M;i++){
		numbTurr = isTurr(x,i);
		if(A[i][y] == '#')break;
		if(numbTurr != -1){
		    if(i<y && (numbTurr + nqu)%4 == 2)return false;
			if(i>y && (numbTurr + nqu)%4 == 0)return false;
		}
	}
	
	for(int i=y;i>=0;i--){
		numbTurr = isTurr(x,i);
		if(A[i][y] == '#')break;
		if(numbTurr != -1){
		    if(i<y && (numbTurr + nqu)%4 == 2)return false;
			if(i>y && (numbTurr + nqu)%4 == 0)return false;
		}
	}
	
	return true;
	
	
}

int getMinPath(int xs,int ys,int xg,int yg){
    memset(dis,-1,sizeof(dis));
	queue<Node>Q;
	Q.push(make_pair(make_pair(xs,ys),0));
	dis[xs][ys][0] = 0;
	
	while(!Q.empty()){
	    Node q = Q.front();
		Q.pop();
		int x = q.first.first, y = q.first.second, qu = q.second;
		
		for(int i=0;i<4;++i){
			int u = x + dx[i] , v = y + dy[i] , nqu = (qu + 1)%4;
			if(u>=0&&v>=0&&u<N&&v<M){
				if(A[u][v] != '#' && check(u,v,nqu) && dis[u][v][nqu] == -1){
					dis[u][v][nqu] = dis[x][y][qu] + 1;
					Q.push(make_pair(make_pair(u,v),nqu));
				}
			}
		}
	}
	int ans = INT_MAX;
	for(int i=0;i<4;++i)
		if(dis[xg][yg][i] != -1)
			ans = min(ans,dis[xg][yg][i]);
	if( ans > M*N ) return -1;
	else return ans;
	
}

int main(){
	scanf("%d",&T);
	int xs,ys,xg,yg,testNumb = 0;
	while ( T-- ){
	    scanf("%d%d",&N,&M);
	    for(int i=0;i<N;++i)
			for(int j=0;j<M;j++){
				cin>>A[i][j];
			    if(A[i][j] == 'S')xs = i,ys = j;
				if(A[i][j] == 'G')xg = i,yg = j;
			}
		int ans = getMinPath(xs,ys,xg,yg);
		printf("Case #%d: ",++testNumb);
		if( ans == -1) puts("impossible");
		else printf("%d\n",ans);
	}
}
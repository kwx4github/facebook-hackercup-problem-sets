import java.io.*;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	static PrintWriter pw;
	public static void main(String args[]) throws Exception{
		BufferedReader input = new BufferedReader(new FileReader("../FHC/laser_maze.txt"));
		pw = new PrintWriter(new FileWriter("../FHC/output.txt"));
        int T = Integer.parseInt(input.readLine());
        for(int i = 0 ; i < T ; i++){
        	String[] str = input.readLine().split(" ");
        	int row = Integer.parseInt(str[0]);
        	int col = Integer.parseInt(str[1]);
        	int[][][] turns = new int[row][col][4];
        	for(int j = 0 ; j < row ; j++){
        		for(int k = 0 ; k < col ; k++){
        			for(int m = 0 ; m < 4 ; m++){
        				turns[j][k][m] = Integer.MAX_VALUE;
        			}
        		}
        	}
        	String[] map = new String[row];
        	for(int j = 0 ; j < row ; j++){
        		map[j] = input.readLine();
        	}
        	Queue<Maze> q = new LinkedList<Maze>();
        	int goalx = -1;
        	int goaly = -1;
        	for(int j = 0 ; j < row ; j++){
        		for(int k = 0 ; k < col ; k++){
        			if(map[j].charAt(k) == 'S'){
        				turns[j][k][0] = 0;
        	        	q.add(new Maze(k,j,0));
        			}
        			if(map[j].charAt(k) == 'G'){
        				goalx = k;
        				goaly = j;
        			}
        		}
        	}
        	while(!q.isEmpty()){
        		Maze m = q.poll();
        		if(isOk(m.x + 1, m.y, row, col, (m.turn + 1), map)){
        			if(turns[m.y][m.x + 1][(m.turn + 1) % 4] > (m.turn + 1)){
        				turns[m.y][m.x + 1][(m.turn + 1) % 4] = m.turn + 1;
        				q.add(new Maze(m.x+1, m.y, (m.turn + 1)));
        			}
        		}
        		
        		if(isOk(m.x - 1, m.y, row, col, (m.turn + 1), map)){
        			if(turns[m.y][m.x - 1][(m.turn + 1) % 4] > (m.turn + 1)){
        				turns[m.y][m.x - 1][(m.turn + 1) % 4] = m.turn + 1;
        				q.add(new Maze(m.x-1, m.y, (m.turn + 1)));
        			}
        		}
        		
        		if(isOk(m.x, m.y + 1, row, col, (m.turn + 1), map)){
        			if(turns[m.y + 1][m.x][(m.turn + 1) % 4] > (m.turn + 1)){
        				turns[m.y + 1][m.x][(m.turn + 1) % 4] = m.turn + 1;
        				q.add(new Maze(m.x, (m.y + 1), (m.turn + 1)));
        			}
        		}
        		
        		if(isOk(m.x, m.y - 1, row, col, (m.turn + 1), map)){
        			if(turns[m.y - 1][m.x][(m.turn + 1) % 4] > (m.turn + 1)){
        				turns[m.y - 1][m.x][(m.turn + 1) % 4] = m.turn + 1;
        				q.add(new Maze(m.x, (m.y - 1), (m.turn + 1)));
        			}
        		}
        	}
        	int min = Integer.MAX_VALUE;
        	for(int j = 0 ; j < 4 ; j++){
        		min = Math.min(min,turns[goaly][goalx][j]);
        	}
        	
        	if(min == Integer.MAX_VALUE){
        		pw.println("Case #"+(i+1)+": impossible");
        	}else{
        		pw.println("Case #"+(i+1)+": "+min);
        	}
			pw.flush();
        }
		input.close();
		pw.close();
	}
	
	static boolean isOk(int x,int y,int row,int col,int turn,String[] map){
		if(x < 0 || y < 0 || x >= col || y >= row)return false;
		if(!(map[y].charAt(x) == 'S' || map[y].charAt(x) == 'G' || map[y].charAt(x) == '.'))return false;
		for(int i = 0 ; i < x ; i++){
			switch(turn % 4){
				case 0:
					if(map[y].charAt(i) == '>'){
						boolean issafe = false;
						for(int j = i + 1 ; j < x ; j++){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 1:
					if(map[y].charAt(i) == '^'){
						boolean issafe = false;
						for(int j = i + 1 ; j < x ; j++){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 2:
					if(map[y].charAt(i) == '<'){
						boolean issafe = false;
						for(int j = i + 1 ; j < x ; j++){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 3:
					if(map[y].charAt(i) == 'v'){
						boolean issafe = false;
						for(int j = i + 1 ; j < x ; j++){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
			}
		}
		
		for(int i = col - 1 ; i > x ; i--){
			switch(turn % 4){
				case 0:
					if(map[y].charAt(i) == '<'){
						boolean issafe = false;
						for(int j = i - 1 ; j > x ; j--){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 1:
					if(map[y].charAt(i) == 'v'){
						boolean issafe = false;
						for(int j = i - 1 ; j > x ; j--){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 2:
					if(map[y].charAt(i) == '>'){
						boolean issafe = false;
						for(int j = i - 1 ; j > x ; j--){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 3:
					if(map[y].charAt(i) == '^'){
						boolean issafe = false;
						for(int j = i - 1 ; j > x ; j--){
							if(map[y].charAt(j) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
			}
		}
		
		for(int i = 0 ; i < y ; i++){
			switch(turn % 4){
				case 0:
					if(map[i].charAt(x) == 'v'){
						boolean issafe = false;
						for(int j = i + 1 ; j < y ; j++){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 1:
					if(map[i].charAt(x) == '>'){
						boolean issafe = false;
						for(int j = i + 1 ; j < y ; j++){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 2:
					if(map[i].charAt(x) == '^'){
						boolean issafe = false;
						for(int j = i + 1 ; j < y ; j++){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 3:
					if(map[i].charAt(x) == '<'){
						boolean issafe = false;
						for(int j = i + 1 ; j < y ; j++){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
			}
		}
		
		for(int i = row - 1 ; i > y ; i--){
			switch(turn % 4){
				case 0:
					if(map[i].charAt(x) == '^'){
						boolean issafe = false;
						for(int j = i - 1 ; j > y ; j--){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 1:
					if(map[i].charAt(x) == '<'){
						boolean issafe = false;
						for(int j = i - 1 ; j > y ; j--){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 2:
					if(map[i].charAt(x) == 'v'){
						boolean issafe = false;
						for(int j = i - 1 ; j > y ; j--){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
				case 3:
					if(map[i].charAt(x) == '>'){
						boolean issafe = false;
						for(int j = i - 1 ; j > y ; j--){
							if(map[j].charAt(x) == '#'){
								issafe = true;
								i = j;
								break;
							}
						}
						if(!issafe)return false;
					}
					break;
			}
		}
		return true;
	}
}

class Maze{
	int x;
	int y;
	int turn;
	Maze(int x,int y,int turn){
		this.x = x;
		this.y = y;
		this.turn = turn;
	}
}
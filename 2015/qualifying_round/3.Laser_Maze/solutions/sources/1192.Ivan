#include <iostream> 
#include <cstdio> 
#include <fstream>
#include <functional>
#include <set> 
#include <map> 
#include <vector> 
#include <queue> 
#include <stack> 
#include <cmath> 
#include <algorithm> 
#include <cstring> 
#include <bitset> 
#include <ctime> 
#include <sstream>
#include <stack> 
#include <cassert> 
#include <list> 
#include <deque>
//#include <unordered_set> 
using namespace std;
typedef long long li;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

#define mp make_pair 
#define pb push_back
#define y1 botva
#define all(s) s.begin(), s.end() 
void solve();

#define NAME "changemeplease"
int main() {
#ifdef YA 
	//cerr << NAME << endl;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
	clock_t start = clock();
#else 
	freopen("input.txt", "r", stdin); 
	freopen("output.txt", "w", stdout); 
#endif 
	ios_base::sync_with_stdio(false);
	cout << fixed;
	cout.precision(10);
	int t = 1;
	cin >> t;  
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
#ifdef YA 
	//cout << "\n\n\nTime:" << ((clock() - start) / 1.0 / CLOCKS_PER_SEC);
#endif 
	return 0;
}

//const int dx[4] = { 0, -1, 0, 1};
//const int dy[4] = { -1, 0, 1, 0};

const int dx[4] = {1,0,-1,0};
const int dy[4] = {0,-1, 0,1};

vector < vector < int > > a;

vector < vector <int> > b[4];

void build(int id) {
	b[id] = a;
	for (int i = 0; i < b[id].size(); ++i) {
		for (int j = 0; j < b[id][i].size(); ++j) {
			if (b[id][i][j] >= 0) {
				b[id][i][j] = -2;
			}
		}
	}
	for (int i = 0; i < a.size(); ++i) {
		for (int j = 0; j < a[i].size(); ++j) {
			if (a[i][j] >= 0) {
				int x = ((a[i][j] + id) & 3);

				pair <int, int> tmp(i, j);

				while (true) {
					tmp = mp(tmp.first + dx[x], tmp.second + dy[x]);
					if (tmp.first < 0 || tmp.second < 0 || tmp.first == a.size() || tmp.second == a[i].size()) {
						break;
					}
					if (b[id][tmp.first][tmp.second] == -2) {
						break;
					}
					b[id][tmp.first][tmp.second] = -3;
				}
			}
		}
	}
}


void solve() {
	int n, m;
	cin >> n >> m;
	a.clear();
	a.resize(n, vector <int>(m));

	pair <int, int> st, end;


	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			char c;
			cin >> c;

			a[i][j] = -1;
			if (c == 'S') {
				st = pair <int, int>(i, j);
			}
			if (c == 'G') {
				end = pair <int, int>(i, j);
			}
			
			if (c == '#') {
				a[i][j] = -2;
				continue;
			}

			if (c == '<') {
				a[i][j] = 1;
				continue;
			}
			if (c == '>') {
				a[i][j] = 3;
				continue;
			}
			if (c == '^') {
				a[i][j] = 2;
				continue;
			}
			if (c == 'v') {
				a[i][j] = 0;
				continue;
			}

		}
	}
	for (int i = 0; i < 4; ++i) {
		build(i);
	}

	/*if (b[0][st.first][st.second] != -1) {
		cout << "impossible\n";
		return;
	}*/

	vector <vector <vector <int> > > dp(4, vector <vector <int>> (n, vector <int>(m, -1)));
	dp[0][st.first][st.second] = 0;
	queue < pair <int, pair <int, int> > > q;
	q.push(mp(0, st));

	while (!q.empty()) {
		int curId = q.front().first;
		pair <int, int> curC = q.front().second;
		int curV = dp[curId][curC.first][curC.second] + 1;

		q.pop();
		for (int i = 0; i < 4; ++i) {
			pair <int, int> tmp = mp(curC.first + dx[i], curC.second + dy[i]);
			if (tmp.first >= 0 && tmp.second >= 0 && tmp.first < n && tmp.second < m && b[(curId + 1) & 3][tmp.first][tmp.second] == -1) {
				if (dp[(curId + 1) & 3][tmp.first][tmp.second] == -1 || dp[(curId + 1) & 3][tmp.first][tmp.second] > curV) {
					dp[(curId + 1) & 3][tmp.first][tmp.second] = curV;
					q.push(mp((curId + 1) & 3, tmp));
				}
			}
		}
	}
	
	int ans = -1;
	for (int i = 0; i < 4; ++i) {
		if (dp[i][end.first][end.second] != -1 && (ans == -1 || dp[i][end.first][end.second] < ans)) {
			ans = dp[i][end.first][end.second];
		}
	}

	if (ans == -1) {
		cout << "impossible\n";
	}
	else {
		cout << ans << "\n";
	}
}
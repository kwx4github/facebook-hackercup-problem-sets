#include <iostream>
#include <queue>
#include <cstring>

using namespace std;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;

bool isLaser(char c) {
	return c == '<' || c == '>' || c == '^' || c == 'v';
}

int getdir(char c) {
	if (c == '<') return 0;
	if (c == '^') return 1;
	if (c == '>') return 2;
	return 3;
}
int nrow, ncol; 
int dr[4] = {0, -1, 0, 1};
int dc[4] = {-1, 0, 1, 0};

bool inBound(int r, int c) {
	return r >= 0 && r < nrow && c >= 0 && c < ncol;
}

int main() {
	int ncase; cin >> ncase;
	for (int cs = 1; cs <= ncase; cs++) {
		cin >> nrow >> ncol;
		string maze[4][nrow];
		string mazeorig[nrow];
		for (int i = 0; i < nrow; i++) {
			cin >> mazeorig[i];
		}
		for (int k = 0; k < 4; k++) {
			for (int r = 0; r < nrow; r++) {
				maze[k][r] = mazeorig[r];
			}
			for (int r = 0; r < nrow; r++) {
				for (int c = 0; c < ncol; c++) {
					if (isLaser(mazeorig[r][c])) {
						int d = (getdir(mazeorig[r][c]) + k) % 4;
						int r2 = r + dr[d];
						int c2 = c + dc[d];
						while (inBound(r2, c2) && 
							   mazeorig[r2][c2] != '#' &&
							   !isLaser(mazeorig[r2][c2])) {
							maze[k][r2][c2] = '#';
							r2 += dr[d];
							c2 += dc[d];
						}
					}
				}
			}
		}

		int sr, sc, tr, tc;
		for (int r = 0; r < nrow; r++) {
			for (int c = 0; c < ncol; c++) {
				if (mazeorig[r][c] == 'S') {
					sr = r; sc = c;
				} else if (mazeorig[r][c] == 'G') {
					tr = r; tc = c;
				}
			}
		}

		bool found = false;
		bool visited[4][nrow][ncol];
		memset(visited, 0, sizeof visited);
		queue<piii> q;
		q.push(piii(0, pii(sr, sc)));

		cout << "Case #" << cs << ": ";
		while (!q.empty()) {
			piii curr = q.front();
			q.pop();
			int dist = curr.first;
			int dist4 = dist % 4;
			int cr = curr.second.first;
			int cc = curr.second.second;

			if (visited[dist4][cr][cc]) continue;
			visited[dist4][cr][cc] = true;
			if (cr == tr && cc == tc) {
				found = true;
				cout << dist << endl;
				break;
			}

			for (int d = 0; d < 4; d++) {
				int nr = cr + dr[d];
				int nc = cc + dc[d];
				int ndist = dist+1;
				int ndist4 = ndist % 4;
				if (inBound(nr, nc) && !isLaser(maze[ndist4][nr][nc]) &&
						maze[ndist4][nr][nc] != '#') {
					q.push(piii(ndist, pii(nr, nc)));
				}
			}
		}
		if (!found) {
			cout << "impossible" << endl;
		}
	}
}

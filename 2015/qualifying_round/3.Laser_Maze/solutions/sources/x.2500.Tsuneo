//
//  main.cpp
//  facebookhackercup
//
//  Created by Yoshioka Tsuneo on 2015/01/10.
//  Copyright (c) 2015å¹´ Yoshioka Tsuneo. All rights reserved.
//

#include <fstream>
#include <iostream>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <numeric>
#include <algorithm>
#include <sstream>
#include <queue>
#include <stdexcept>

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <cassert>
#include <unistd.h>
#include <string.h>

#include <stack>

#define MULTI_THREAD

#ifdef MULTI_THREAD
#include <thread>
#endif

#define decltype(X) __typeof(X)
#define REP(i, n) for(int i=0; i<(int)n; i++)
#define FOR(it, c) for(decltype((c).begin()) it = (c).begin(); it!=(c).end(); it++)
#define ALL(c) (c).begin(), (c).end()

#define EPS 0.000001
using namespace std;

typedef long long ll;

#define INF 1e9

class Graph{
    struct edge_t{
        edge_t(int v_, int dist_):v(v_), dist(dist_){;};
        int v;
        int dist;
    };
    struct vertex_t{
        int dist;
        int prev;
        vector<edge_t> edges;
    };
    vector<vertex_t> g;
public:
    Graph(int N): g(N){
        for(int i=0;i<g.size();i++){
            g[i].dist = INF;
            g[i].prev = -1;
        }
    };
    void add_edge(int from, int to, int dist)
    {
        //printf("add_edge(%d, %d, %d)\n", from, to, dist);
        g[from].edges.push_back(edge_t(to,dist));
        // g[to].edges.push_back(edge_t(from, dist));
    };
    int dijkstra(int s /*source*/, int t/*sink*/, vector<int> &route)
    {
        priority_queue< pair<int,int> , vector< pair<int,int> >, greater< pair<int,int> > > que;
        g[s].dist = 0;
        que.push(make_pair(g[s].dist, s));
        vector<bool> visited(g.size(), false);
        while(!que.empty()){
            pair<int, int> head = que.top();
            que.pop();
            int dist = head.first;
            int v = head.second;
            if(visited[v]){
                continue;
            }
            visited[v] = true;
            // if(dist != g[v].dist){
            //	continue;
            //}
            //printf("v=%d, dist=%d\n", v, dist);
            for(int i=0;i<g[v].edges.size();i++){
                edge_t edge = g[v].edges[i];
                // printf("i=%d, edge.v=%d, edge.dist=%d\n", i, edge.v, edge.dist);
                if(dist + edge.dist < g[edge.v].dist){
                    g[edge.v].prev = v;
                    g[edge.v].dist = dist + edge.dist;
                    que.push(make_pair(g[edge.v].dist, edge.v));
                    // printf("pushing dist:%d, v:%d\n", g[edge.v].dist, edge.v);
                }
            }
        }
        for(int v=t;v!=-1;v=g[v].prev){
            route.push_back(v);
        }
        return g[t].dist;
    };
};


#if 0
int dfs(int M, int N, vector<string> &ma, int m, int n, vector< vector<int> > mapstatus, int step)
{
    if(mapstatus[m][n] != -1){
        if(mapstatus[m][n] & (1<<(step%4))){
            return -1;
        }
    }
    
    int dx[] = {0, 1, 0, -1};
    int dy[] = {-1, 0, 1, 0};
    for(int d=0;d<4;d++){
        int m2 = m, n2= n;
        while(true){
            m2 += dy[d];
            n2 += dx[d];
            if(m2>=M || m2<0 || n2>=N || n2<0){
                break;
            }
            if(ma[m2][n2]=='#'){
                break;
            }
            if(is_direction(ma[m2][n2])){
                int d2 = get_direction(ma[m2][n2]);
                if ((d+2)%4 == d2 + step){
                    return -1;
                }
            }
        }
    }
    
    if(ma[m][n]=='G'){
        
    }
    
}
#endif

bool is_direction(char c)
{
    if(c=='^' || c=='>' || c=='<' || c=='v'){
        return true;
    }else{
        return false;
    }
}
int get_direction(char c){
    if(c=='^'){
        return 0;
    }else if(c=='>'){
        return 1;
    }else if(c=='v'){
        return 2;
    }else if(c=='<'){
        return 3;
    }
    printf("wrong direction %c\n", c);
    exit(1);
}
bool is_valid(vector<string> &ma, int M, int N, int m, int n, int step)
{
    int dx[] = {0, 1, 0, -1};
    int dy[] = {-1, 0, 1, 0};
    
    for(int d=0;d<4;d++){
        if(m==1 && n==2 && d==0 && step==2){
            sleep(0);
        }
        if(m==1&&n==0&&step==3){
            sleep(0);
        }
        int m2 = m, n2= n;
        while(true){
            m2 += dy[d];
            n2 += dx[d];
            if(m2>=M || m2<0 || n2>=N || n2<0){
                break;
            }
            if(ma[m2][n2]=='#'){
                break;
            }
            if(is_direction(ma[m2][n2])){
                int d2 = get_direction(ma[m2][n2]);
                if ((d+2)%4 == d2 + step){
                    return false;
                }
            }
        }
    }
    return true;
}

// int testcase_itr(const string &A, const string &B, const string &S)
int testcase_itr2(int M, int N, vector<string> &ma)
{
    vector< vector<int> > mapstatus(M, vector<int>(N,-1));
    vector< vector< vector<int> > > valid(M, vector< vector<int> >(N, vector<int>(4)));
    
    // solution start
    for(int m=0;m<M;m++){
        for(int n=0;n<N;n++){
            for(int step=0;step<4;step++){
                valid[m][n][step] = is_valid(ma, M, N, m, n, step);
                // printf("valid[%d][%d][%d]=%d\n", m, n, step, (int)valid[m][n][step]);
            }
        }
    }
    
    Graph g(M*N*4+2);
    int SOURCE = M*N*4;
    int SINK = M*N*4+1;
    
    for(int m=0;m<M;m++){
        for(int n=0;n<N;n++){
            int c = ma[m][n];
            if(!(c=='.' || c=='S' || c=='G')){
                continue;
            }
            for(int step=0;step<4;step++){
                int dn[] = {0,1,0,-1};
                int dm[] = {-1,0,1,0};
                if(m==1&&n==0&&step==3){
                    sleep(0);
                }
                for(int d=0;d<4;d++){
                    int m2 = m+dm[d];
                    int n2 = n+dn[d];
                    if(m2<0 || m2>=M || n2<0 || n2>=N){
                        continue;
                    }
                    char c2 = ma[m2][n2];
                    if(!(c2=='.' || c2=='S' || c2=='G')){
                        continue;
                    }
                    if(!valid[m2][n2][(step+1)%4]){
                        continue;
                    }
                    g.add_edge((m*N+n)*4+step, (m2*N+n2)*4+((step+1)%4), 1);
                }
            }
        }
    }
    for(int m=0;m<M;m++){
        for(int n=0;n<N;n++){
            if(ma[m][n]=='S'){
                g.add_edge(SOURCE, (m*N+n)*4+0, 0);
            }
        }
    }
    for(int m=0;m<M;m++){
        for(int n=0;n<N;n++){
            if(ma[m][n]=='G'){
                for(int step=0;step<4;step++){
                    g.add_edge((m*N+n)*4+step, SINK, 0);
                }
            }
        }
    }
    vector<int> route;
    int ret = g.dijkstra(SOURCE, SINK, route);
    for(int i=0;i<route.size();i++){
        ;//printf("  route[%d]=%d\n", i, route[i]);
    }
    //printf("ret=%d\n", ret);
    //printf("SOURCE=%d, SINK=%d\n", SOURCE,SINK);
    return ret;
    
    /*
    for(int m=0;m<M;m++){
        for(int n=0;n<N;n++){
            if(ma[m][n]=='S'){
                int ret =dfs(M, N, ma, m, n, mapstatus, 0);
                return ret;
            }
        }
    }
    */
    
    // solution end
    
    // return 12345;
}
string testcase_itr(int M, int N, vector<string> &ma)
{
    int ret = testcase_itr2(M, N, ma);
    if(ret == INF){
        return string("impossible");
    }else{
        stringstream ss;
        ss << ret;
        return ss.str();
    }
}
void testcase(istream &in)
{
    int T;
    in >> T;
    for(int i=0;i<T;i++){
        int M, N;
        in >> M >> N;
        vector<string> ma;
        for(int i=0;i<M;i++){
            string line;
            in >> line;
            ma.push_back(line);
        }
        string ret = testcase_itr(M, N, ma);
        //if(ret==INF){
        //    cout << "Case #" << i+1 << ": " << "impossible" << endl;
        //}else{
            cout << "Case #" << i+1 << ": " << ret << endl;
            
        //}
    }
    // string A, B, S;
    // in >> A >> B >> S;
    // return testcase_itr(A, B, S);
}

#ifdef MULTI_THREAD
class semaphore{
private:
    mutex mtx;
    condition_variable cv;
    int count;
    
public:
    semaphore(int count_ = 0):count(count_){;}
    void notify()
    {
        unique_lock<mutex> lck(mtx);
        ++count;
        cv.notify_one();
    }
    void wait()
    {
        unique_lock<mutex> lck(mtx);
        
        while(count == 0){
            cv.wait(lck);
        }
        count--;
    }
};


semaphore sem(6);
// vector< pair<bool, double> > g_results;
vector< pair<bool, string> > g_results;

//void testcase_for_multithread(int t, double C, double F, double X)
void testcase_for_multithread(int t, int M, int N, vector<string> ma)
{
    // g_results[t].second = testcase_itr(C, F, X);
    g_results[t].second = testcase_itr(M, N, ma);
    g_results[t].first = true;
    // sleep(rand()/(RAND_MAX/3.0));
    sem.notify();
}
void testcase_multi(istream &in);
#endif
int main(int argc, const char * argv[])
{
    // sleep(1000);
    // insert code here...
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.precision(15);
    string fname = "/dev/stdin";
    if(argc>=2){
        fname = argv[1];
        ifstream in(fname, ifstream::in);
        if(!in){
            cout << "File open error:" << fname << endl;
            exit(1);
        }
#ifdef MULTI_THREAD
        testcase_multi(in);
#else
        testcase(in);
#endif
        /*
        int result = testcase(in);
        cout << result << endl;
         */
    }else{
        testcase(cin);
        /*
        int result = testcase(cin);
        cout << result << endl;
         */
        
    }
    return 0;
}

#ifdef MULTI_THREAD
void testcase_multi(istream &in)
{
    int T;
    in >> T;
    
    vector<thread> threads;
    g_results.resize(T);
    int cur_result = 0;
    for(int t=0;t<T;t++){
        sem.wait();
        while(g_results[cur_result].first == true){
            cout << "Case #" << cur_result+1 << ": " << g_results[cur_result].second << endl;
            cur_result++;
        }
        
        //double C, F, X;
        //in >> C >> F >> X;
        //threads.push_back(thread(testcase_for_multithread, t, C, F, X ));
        
        int M, N;
        in >> M >> N;
        vector<string> ma;
        for(int i=0;i<M;i++){
            string line;
            in >> line;
            ma.push_back(line);
        }
        threads.push_back(thread(testcase_for_multithread, t, M, N, ma ));
        
    }
    while(cur_result<T){
        sem.wait();
        while(g_results[cur_result].first == true){
            cout << "Case #" << cur_result+1 << ": " << g_results[cur_result].second << endl;
            cur_result ++;
        }
    }
    for(int t=0;t<T;t++){
        threads[t].join();
    }
    
}
#endif


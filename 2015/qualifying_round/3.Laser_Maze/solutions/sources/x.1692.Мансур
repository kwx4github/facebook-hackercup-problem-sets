#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

string s[111];
bool can[4][111][111];
int d[4][111][111];
int dir[256],dx[] = {1,-1,0,0},dy[] = {0,0,1,-1};

void solve() {
	int n,m; cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> s[i];		
	}
	for (int it = 0; it < 4; it++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				can[it][i][j] = true;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (s[i][j] == '#') {
					can[it][i][j] = true;
				} else if (dir[s[i][j]] != -1) {
					int val = (dir[s[i][j]] + it) % 4;
					int dx,dy;
					if (val == 0) {
						dx = -1;
						dy = 0;
					} else if (val == 1) {
						dx = 0;
						dy = 1;
					} else if (val == 2) {
						dx = 1;
						dy = 0;
					} else {
						dx = 0;
						dy = -1;
					}
					int x = i;
					int y = j;
					while(true) {
						can[it][x][y] = false;
						x += dx;
						y += dy;
						if (x < 0 || x >= n || y < 0 || y >= m) break;
						if (s[x][y] == '#' || dir[s[x][y]] != -1) break;
					}
				}
			}
		}
	}
	memset(d,-1,sizeof(d));
	queue< pair<int, pii> > q;
	int sx,sy,ex,ey;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == 'S') {
				sx = i;
				sy = j;
			} else if (s[i][j] == 'G') {
				ex = i;
				ey = j;
			}				
		}
	}
	d[0][sx][sy] = 0;
	q.push(mp(0,mp(sx,sy)));
	while(!q.empty()) {
		int it = q.front().first;
		int x = q.front().second.first;
		int y = q.front().second.second;
		int val = d[it][x][y];
		if (x == ex && y == ey) {
			cout << val << endl;
			return;
		}
		q.pop();
		it = (it + 1) % 4;
		for (int i = 0; i < 4; i++) {
			int xx = x + dx[i];
			int yy = y + dy[i];
			if (xx < 0 || xx >= n || yy < 0 || yy >= m || !can[it][xx][yy] || d[it][xx][yy] != -1) continue;
			d[it][xx][yy] = val + 1;
			q.push(mp(it,mp(xx,yy)));
		}
	}	
	cout << "impossible" << endl;
}

int main() {
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif

	memset(dir,-1,sizeof(dir));

	dir['^'] = 0;
	dir['>'] = 1;
	dir['v'] = 2;
	dir['<'] = 3;
	
	int T; cin >> T;

	for (int t = 1; t <= T; t++) {
		cout << "Case #" << t << ": ";
		solve();
	}

	return 0;
}

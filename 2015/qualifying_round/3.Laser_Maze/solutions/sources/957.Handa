#include <cstring>

#pragma comment(linker, "/STACK:102400000,102400000")
#include <algorithm>
#include <cstdio>

#define pb push_back

using namespace std;

const int N = 120;
struct node {
	int x, y, t;
	node() {
	}
	node(int _x, int _y, int _t) :
			x(_x), y(_y), t(_t) {
	}
} q[N * N * 4];
int dis[N][N][4];
int dx[] = { 0, 1, 0, -1 }, dy[] = { 1, 0, -1, 0 };
int n, m, sx, sy;
char g[N][N][4];
char str[N][N];
bool in(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}
bool isBlock(char t) {
	return (t == '#') || (t >= 0 && t < 4);
}
bool isLaser(char t) {
	return t < 4;
}
int bfs() {
	int h = 1, tail = 0, i;
	node s;
	memset(dis, -1, sizeof(dis));
	dis[sx][sy][0] = 0;
	q[++tail] = node(sx, sy, 0);
	while (h <= tail) {
		s = q[h++];
		if (g[s.x][s.y][s.t] == 'G')
			return dis[s.x][s.y][s.t];
		for (int d = 0; d < 4; d++) {
			node v(s.x + dx[d], s.y + dy[d], (s.t + 1) & 3);
			if (in(v.x, v.y) && !isBlock(g[v.x][v.y][v.t])
					&& !isLaser(g[v.x][v.y][v.t]) && dis[v.x][v.y][v.t] == -1) {
				dis[v.x][v.y][v.t] = dis[s.x][s.y][s.t] + 1;
				q[++tail] = v;
			}
		}
	}
//	printf("#%d#\n", tail);
	return -1;
}
int main() {
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int cas, cass;
	scanf("%d", &cas);
	for (cass = 1; cass <= cas; cass++) {
		scanf("%d%d", &n, &m);
		for (int i = 1; i <= n; i++)
			scanf("%s", str[i] + 1);
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++) {
				if (str[i][j] == 'S') {
					sx = i;
					sy = j;
					str[i][j] = '.';
				}
				if (str[i][j] == '>')
					str[i][j] = 0;
				else if (str[i][j] == 'v')
					str[i][j] = 1;
				else if (str[i][j] == '<')
					str[i][j] = 2;
				else if (str[i][j] == '^')
					str[i][j] = 3;

			}
		for (int t = 0; t < 4; t++) {
			for (int i = 1; i <= n; i++)
				for (int j = 1; j <= m; j++)
					g[i][j][t] = str[i][j];
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= m; j++) {
					if (str[i][j] >= 0 && str[i][j] < 4) {
						g[i][j][t] = (g[i][j][t] + t) & 3;
						for (int k = 1;; k++) {
							int xx = i + dx[g[i][j][t]] * k;
							int yy = j + dy[g[i][j][t]] * k;
							if (!in(xx, yy) || isBlock(g[xx][yy][t]))
								break;
							g[xx][yy][t] = -1;
						}
					}
				}
			}
		}
//		for (int t = 0; t < 4; t++) {
//			puts("");
//			for (int i = 1; i <= n; i++) {
//				puts("");
//				for (int j = 1; j <= m; j++)
//					printf("%d ", g[i][j][t]);
//			}
//		}
		int ans = bfs();
		printf("Case #%d: ", cass);
		if (ans == -1)
			puts("impossible");
		else
			printf("%d\n", ans);
	}
}

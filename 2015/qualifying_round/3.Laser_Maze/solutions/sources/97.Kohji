#define DEB

#include<bits/stdc++.h>
#include<unistd.h>
#define REP(i,m) for(int i=0;i<(m);++i)
#define REPN(i,m,in) for(int i=(in);i<(m);++i)
#define ALL(t) (t).begin(),(t).end()
#define CLR(a) memset((a),0,sizeof(a))
#define pb push_back
#define mp make_pair
#define fr first
#define sc second

using namespace std;


#ifdef DEB
#define dump(x)  cerr << #x << " = " << (x) << endl
#define prl cerr<<"called:"<< __LINE__<<endl
template<class T> void debug(T a,T b){ for(;a!=b;++a) cerr<<*a<<' ';cerr<<endl;}
#else
#define dump(x) ;
#define prl ;
template<class T> void debug(T a,T b){ ;}
#endif

template<class T> void chmin(T& a,const T& b) { if(a>b) a=b; }
template<class T> void chmax(T& a,const T& b) { if(a<b) a=b; }

typedef long long int lint;
typedef pair<int,int> pi;

namespace std{
	template<class S,class T>
	ostream &operator <<(ostream& out,const pair<S,T>& a){
		out<<'('<<a.fr<<','<<a.sc<<')';
		return out;
	}
}

const int INF=5e8;

int t;
int h,w;
char buf[105][105];

int cost[105][105][4];

bool able[105][105][4];

int dir[300];
int dx[]={1,0,-1,0},dy[]={0,1,0,-1};
int main(){
	cin>>t;
	memset(dir,-1,sizeof(dir));
	dir['>']=0;
	dir['v']=1;
	dir['<']=2;
	dir['^']=3;
	REP(setn,t){
		cin>>h>>w;
		REP(i,h) scanf("%s",buf[i]);
		memset(cost,-1,sizeof(cost));
		
		memset(able,true,sizeof(able));
		int sx,sy,gx,gy;
		REP(i,h) REP(j,w){
			char c=buf[i][j];
			if(c=='S'){
				sx=j;
				sy=i;
			}
			if(c=='G'){
				gx=j;
				gy=i;
			}
			if(buf[i][j]=='#') REP(d,4) able[i][j][d]=false;
			else if(c=='>' || c=='v' || c=='<' || c=='^'){
				int d=dir[c];
				REP(k,4){
					able[i][j][k]=false;
					int d2=(d+k)%4;
					int px=j+dx[d2],py=i+dy[d2];
					while(px>=0 && py>=0 && px<w && py<h && buf[py][px]!='#' &&
							dir[buf[py][px]]==-1){
						able[py][px][k]=false;
						px+=dx[d2];
						py+=dy[d2];
					}
				}
			}
		}
		queue<pair<pi,int> >q;q.push(mp(mp(sy,sx),0));
		cost[sy][sx][0]=0;
		
		int res=INF;
		while(!q.empty()){
			int y=q.front().fr.fr,x=q.front().fr.sc,m=q.front().sc;
			q.pop();
			int m2=(m+1)%4;
			if(y==gy && x==gx){
				chmin(res,cost[y][x][m]);
			}

			REP(d,4){
				int px=x+dx[d],py=y+dy[d];
				if(px>=0 && py>=0 && py<h && px<w && able[py][px][m2] && cost[py][px][m2]==-1){
					cost[py][px][m2]=cost[y][x][m]+1;
					q.push(mp(mp(py,px),m2));
				}
			}
		}
		if(res==INF){
			printf("Case #%d: impossible\n",setn+1);
		}else printf("Case #%d: %d\n",setn+1,res);
	}
	return 0;
}




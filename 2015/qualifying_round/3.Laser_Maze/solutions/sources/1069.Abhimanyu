import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class LaserMaze {

  private InputStream input;
  private PrintStream output;
  private Scanner inputSc;

  public LaserMaze(InputStream input, PrintStream output) {
    this.input = input;
    this.output = output;
    init();
  }

  private void init() {
    inputSc = new Scanner(input);
  }

  static int lineToInt(String line) {
    return Integer.parseInt(line);
  }

  public void solve() {
    int testCaseCount = lineToInt(inputSc.nextLine());
    for (int testN = 1; testN <= testCaseCount; testN++) {
      solveTestCase(testN);
    }
  }

  private void solveTestCase(int testN) {
    Scanner tempSc = new Scanner(inputSc.nextLine());
    int m = tempSc.nextInt();
    int n = tempSc.nextInt();
    tempSc.close();
    String[] maze = new String[m];
    for (int i = 0; i < m; i++) {
      maze[i] = inputSc.nextLine().trim();
    }
    output.println("Case #" + testN + ": "
	+ (new MazeSolver(m, n, maze).solve()));
  }

  public static void main(String[] args) {
    LaserMaze obj = new LaserMaze(System.in, System.out);
    obj.solve();
  }

  private static class MazeSolver {
    final int m;
    final int n;
    final char[][] maze;
    final Position start;
    final Position goal;
    final List<Position> lasers;
    final char LEFT_LASER = '<';
    final char RIGHT_LASER = '>';
    final char UP_LASER = '^';
    final char DOWN_LASER = 'v';
    final char WALL = '#';
    final char EMPTY = '.';

    class MySet {
      Set<Position> set;

      public MySet() {
	set = new HashSet<>();
      }
    }

    final MySet[] history;

    public MazeSolver(int m, int n, String[] maze) {
      this.m = m;
      this.n = n;
      this.maze = new char[m][n];
      lasers = new ArrayList<>();
      Position start = null;
      Position goal = null;
      for (int row = 0; row < m; row++) {
	for (int col = 0; col < n; col++) {
	  char ch = maze[row].charAt(col);
	  this.maze[row][col] = ch;
	  if (ch == EMPTY) {
	  } else if (ch == WALL) {
	  } else if (ch == 'S') {
	    start = new Position(row, col);
	  } else if (ch == 'G') {
	    goal = new Position(row, col);
	  } else {
	    lasers.add(new Position(row, col));
	  }
	}
      }
      this.start = start;
      this.goal = goal;
      this.maze[start.row][start.col] = EMPTY;
      this.maze[goal.row][goal.col] = EMPTY;
      history = new MySet[4];
      for (int i = 0; i < 4; i++) {
	history[i] = new MySet();
      }
    }

    public String solve() {
      Set<Position> set = new HashSet<>();
      set.add(start);
      int step = 0;
      while (true) {
	if (set.contains(goal)) {
	  return "" + step;
	}
	if (set.isEmpty()) {
	  return "impossible";
	}
	Set<Position> newSet = new HashSet<>();
	for (Position point : set) {
	  int row = point.row;
	  int col = point.col;
	  // UP
	  addStep(row - 1, col, newSet);
	  // DOWN
	  addStep(row + 1, col, newSet);
	  // LEFT
	  addStep(row, col - 1, newSet);
	  // RIGHT
	  addStep(row, col + 1, newSet);
	}
	rotate();
	set = kill(newSet);
	step++;
	set = removeHistory(set, step);
	updateHistory(set, step);
      }
    }

    private void updateHistory(Set<Position> set, int step) {
      Set<Position> h = history[step % 4].set;
      for (Position point : set) {
	h.add(point);
      }
    }

    private Set<Position> removeHistory(Set<Position> set, int step) {
      Set<Position> h = history[step % 4].set;
      Set<Position> newSet = new HashSet<>();
      for (Position point : set) {
	if (!h.contains(point)) {
	  newSet.add(point);
	}
      }
      return newSet;
    }

    private void addStep(int row, int col, Set<Position> newSet) {
      if (isValid(row, col) && maze[row][col] == EMPTY) {
	newSet.add(new Position(row, col));
      }
    }

    private Set<Position> kill(Set<Position> set) {
      Set<Position> newSet = new HashSet<>();
      for (Position point : set) {
	if (!isPositionHitbyAnyLaser(point)) {
	  newSet.add(point);
	}
      }
      return newSet;
    }

    private void rotate() {
      for (Position laser : lasers) {
	char ch = maze[laser.row][laser.col];
	if (ch == UP_LASER) {
	  ch = RIGHT_LASER;
	} else if (ch == RIGHT_LASER) {
	  ch = DOWN_LASER;
	} else if (ch == DOWN_LASER) {
	  ch = LEFT_LASER;
	} else if (ch == LEFT_LASER) {
	  ch = UP_LASER;
	} else {
	  throw new RuntimeException("" + ch);
	}
	maze[laser.row][laser.col] = ch;
      }
    }

    private boolean isPositionHitbyLaser(Position point, Position laser) {
      int row = laser.row;
      int col = laser.col;
      int diffRow = 0;
      int diffCol = 0;
      final char ch = maze[row][col];
      if (ch == UP_LASER) {
	diffRow = -1;
      } else if (ch == RIGHT_LASER) {
	diffCol = +1;
      } else if (ch == DOWN_LASER) {
	diffRow = +1;
      } else if (ch == LEFT_LASER) {
	diffCol = -1;
      } else {
	throw new RuntimeException("" + ch);
      }
      row += diffRow;
      col += diffCol;
      while (isValid(row, col) && maze[row][col] == EMPTY) {
	if (point.row == row && point.col == col) {
	  return true;
	}
	row += diffRow;
	col += diffCol;
      }
      return false;
    }

    private boolean isValid(int row, int col) {
      if (row < 0 || row >= m || col < 0 || col >= n) {
	return false;
      }
      return true;
    }

    private boolean isPositionHitbyAnyLaser(Position point) {
      for (Position laser : lasers) {
	if (isPositionHitbyLaser(point, laser)) {
	  return true;
	}
      }
      return false;
    }

    class Position {
      final int row;
      final int col;

      public Position(int row, int col) {
	this.row = row;
	this.col = col;
      }

      @Override
      public int hashCode() {
	return row * n + col;
      }

      @Override
      public boolean equals(Object obj) {
	if (obj == this) {
	  return true;
	}
	if (obj instanceof Position) {
	  Position that = (Position) obj;
	  return (this.row == that.row) && (this.col == that.col);
	}
	return false;
      }

      @Override
      public String toString() {
	return "[" + row + "," + col + "]";
      }
    }
  }
}

#include <cstdio>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <queue>
#define scanf(args...) (scanf(args) ? : 0)
const int MAXN = 105;
const int INF = 1e9;

struct Triple {
    int r, i, j;
};

char T[4][MAXN][MAXN+1];
int dst[4][MAXN][MAXN+1];
int n, m;
std::pair<int, int> direction[] = {
    { -1,  0 },
    {  0,  1 },
    {  1,  0 },
    {  0, -1 } 
};

int rotation(char v) {
    if (v == '^')
        return 0;
    else if (v == '>')
        return 1;
    else if (v == 'v')
        return 2;
    else if (v == '<')
        return 3;
    else
        return -1;
}

bool wall(char v) {
    return v < 4 || v == '#';
}

bool ok(int i, int j) {
    return i >= 0 && i < n && j >= 0 && j < m;
}

int solve() {
    scanf("%d%d", &n, &m);

    for (int k=0; k<4; k++)
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++)
                dst[k][i][j] = INF;

    
    int sr = -1, sc = -1, gr = -1, gc = -1;
    for (int i=0; i<n; i++) {
        scanf("%s", T[0][i]);
        for (int j=0; j<m; j++) {
            if (rotation(T[0][i][j]) != -1)
                T[0][i][j] = rotation(T[0][i][j]);
            else if (T[0][i][j] == 'S')
                sr = i, sc = j;
            else if (T[0][i][j] == 'G')
                gr = i, gc = j;
        }
    }

    assert(sr != -1 && sc != -1 && gr != -1 && gc != -1);

    for (int k=1; k<4; k++)
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++)
                if (T[k-1][i][j] < 4)
                    T[k][i][j] = (T[k-1][i][j]+1)%4;
                else
                    T[k][i][j] = T[k-1][i][j];

    for (int k=0; k<4; k++) {
        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                if (T[k][i][j] < 4) {
                    std::pair<int, int> p = direction[T[k][i][j]];
                    T[k][i][j] = '#';
                    int r = i+p.first, c = j+p.second;
                    while (ok(r, c) && !wall(T[k][r][c])) {
                        T[k][r][c] = '#';
                        r += p.first, c += p.second;
                    }
                }
            }
        }
    }

    std::queue< Triple > q;
    q.push({ 0, sr, sc });
    dst[0][sr][sc] = 0;

    while (!q.empty()) {
        Triple t = q.front();
        q.pop();

        for (std::pair<int, int> d: direction) {
            int nr = t.i+d.first, nc = t.j+d.second;
            int nrotation = (t.r+1) % 4;
            int distance = dst[t.r][t.i][t.j]+1;
            if (ok(nr, nc) && !wall(T[nrotation][nr][nc]))
                if (distance < dst[nrotation][nr][nc]) {
                    dst[nrotation][nr][nc] = distance;
                    q.push({ nrotation, nr, nc });
                }
        }
    }

    int res = INF;
    for (int i=0; i<4; i++)
        res = std::min(res, dst[i][gr][gc]);

    return res;
}

int main() {
    int t;
    scanf("%d", &t);

    for (int test=1; test<=t; test++) {
        int t = solve();
        if (t == INF)
            printf("Case #%d: impossible\n", test);
        else
            printf("Case #%d: %d\n", test, t);
    }

}

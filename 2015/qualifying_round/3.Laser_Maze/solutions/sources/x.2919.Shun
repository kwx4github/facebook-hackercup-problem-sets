#include <bits/stdc++.h>
using namespace std;

typedef ostringstream OSS;
typedef istringstream ISS;

typedef long long LL;
typedef pair<int, int> PII;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<LL> VLL;
typedef vector<VLL> VVLL;
typedef vector<string> VS;
typedef vector<VS> VVS;
typedef vector<bool> VB;
typedef vector<VB> VVB;

typedef vector<PII> VPII;

#define fst first
#define snd second
#define MP make_pair
#define PB push_back
#define ALL(x) (x).begin(),(x).end()
#define RANGE(x,y,maxX,maxY) (0 <= (x) && 0 <= (y) && (x) < (maxX) && (y) < (maxY))
#define DUMP( x ) cerr << #x << " = " << ( x ) << endl

template < typename T > inline T fromString(const string &s) { T res; ISS iss(s); iss >> res; return res; };
template < typename T > inline string toString(const T &a) { OSS oss; oss << a; return oss.str(); };

const int INF = 0x3f3f3f3f;
const LL INFL = 0x3f3f3f3f3f3f3f3fLL;
const int DX[]={1,0,-1,0},DY[]={0,-1,0,1};

const string LAZER(">^<v");

int H, W;
VS ts;
vector<VVI> cs;

void lazer_fill(int y, int x, int v, int t) {
	while (true) {
		cs[y][x][t] = -1;

		x += DX[v];
		y += DY[v];
		
		if (!RANGE(x, y, W, H)) break;
		if ((LAZER + '#').find(ts[y][x]) != string::npos) break;
	}
}

void calc_bad() {
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			if (ts[i][j] == '#') {
				fill(cs[i][j].begin(), cs[i][j].end(), -1);
			} else {
				auto v = LAZER.find(ts[i][j]);
				if (v == string::npos) continue;

				for (int k = 0; k < 4; k++) {
					lazer_fill(i, j, (v + k) % 4, k);
				}
			}
		}
	}
}

int solve() {
	cin >> H >> W;
	cs = vector<VVI>(H, VVI(W, VI(4, INF)));
	ts = VS(H);
	for (auto &line : ts) cin >> line;

	PII s, g;
	for (int y = 0; y < H; y++) {
		size_t pos;
		if ((pos = ts[y].find('S')) != string::npos) {
			s.snd = pos;
			s.fst = y;
		}
		if ((pos = ts[y].find('G')) != string::npos) {
			g.snd = pos;
			g.fst = y;
		}
	}

	calc_bad();

	//

/*
   for (int i = 0; i < 4; i++) {
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				cout << (cs[y][x][i] == -1 ? 'x' : 'o');
			}
			cout << endl;
		}
		cout << endl;
	}
*/

	//

	queue<pair<PII, int>> q;
	q.push(MP(s, 0));
	cs[s.fst][s.snd][0] = 0;

	while (q.size()) {
		auto now = q.front();
		int y = now.fst.fst;
		int x = now.fst.snd;
		int t = now.snd;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + DY[i];
			int nx = x + DX[i];
			int nt = t + 1;
			int nv = nt % 4;

			if (!RANGE(nx, ny, W, H)) continue;

			int &next = cs[ny][nx][nv];
			if (next == INF) {
				next = nt;
				
				q.push(MP(MP(ny, nx), nt));
			}
		}
	}

	int ans = INF;
	for (auto x : cs[g.fst][g.snd]) {
		if (x != -1 && x != INF) {
			ans = min(ans, x);
		}
	}

	return ans != INF ? ans : -1;
}

int main(void) {
	int T;
	cin >> T;

	for (int ti = 1; ti <= T; ti++) {
		int res = solve();

		cout << "Case #" << ti << ": ";
		if (res == -1) {
			cout << "impossible" << endl;
		} else {
			cout << res << endl;
		}
	}

	return 0;
}

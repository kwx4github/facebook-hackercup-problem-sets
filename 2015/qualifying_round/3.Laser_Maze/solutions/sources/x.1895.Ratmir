package c2014_c.c2014_round2;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class z3 {


    public static void main(String[] args) throws Exception {
        FileWriter fw = new FileWriter("/Users/ratmirpanov/Downloads//output.txt");
        BufferedWriter out = new BufferedWriter(fw);
        //String pathname = "C:\\Users\\YC14rp1\\Downloads\\z4.txt";
        String pathname = "/Users/ratmirpanov/Downloads/laser_maze.txt";
        //String pathname = "C:\\Users\\YC14rp1\\Downloads\\A-large.in";
        Scanner scanner = new Scanner(new File(pathname));
        int tn = scanner.nextInt();
        scanner.nextLine();
        for (int ti = 1; ti <= tn; ti++) {
            int m = scanner.nextInt();
            int n = scanner.nextInt();
            int[][] field = new int[m][n];
            int[][][] fields = new int[4][m][n];
            scanner.nextLine();
            Position start = null;
            Position finish = null;
            for (int i = 0; i < m; i++) {
                char[] s = scanner.nextLine().toCharArray();
                field[i] = new int[n];
                fields[0][i] = new int[n];
                fields[1][i] = new int[n];
                fields[2][i] = new int[n];
                fields[3][i] = new int[n];
                for (int j = 0; j < n; j++) {
                    switch (s[j]) {
                        case '.':
                            field[i][j] = 0;// (empty space)
                            break;
                        case '#':
                            field[i][j] = 1;// (wall)
                            break;
                        case 'S':
                            field[i][j] = 2;// (starting position)
                            start = new Position(j,i,0);
                            break;
                        case 'G':
                            field[i][j] = 3;// (goal)
                            finish = new Position(j,i,0);
                            break;
                        case '<':
                            field[i][j] = 4;
                            break;
                        case '^':
                            field[i][j] = 5;
                            break;
                        case '>':
                            field[i][j] = 6;
                            break;
                        case 'v':
                            field[i][j] = 7;
                            break;
                    }
                    fields[0][i][j] = field[i][j];
                    fields[1][i][j] = field[i][j];
                    fields[2][i][j] = field[i][j];
                    fields[3][i][j] = field[i][j];
                }
            }
            for (int k = 0; k < 4; k++) {
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        if (field[i][j] > 3) {
                            int t = (field[i][j] % 4) + k;
                            switch (t) {
                                case 0:
                                    //left
                                    for (int l = j - 1; l >= 0; l--) {
                                        if (field[i][l] == 0 || field[i][l] == 2 || field[i][l] == 3) {
                                            fields[k][i][l] = -1;
                                        } else {
                                            break;
                                        }
                                    }
                                    break;
                                case 1:
                                    //up
                                    for (int l = i - 1; l >= 0; l--) {
                                        if (field[l][j] == 0 || field[l][j] == 2 || field[l][j] == 3) {
                                            fields[k][l][j] = -1;
                                        } else {
                                            break;
                                        }
                                    }
                                    break;
                                case 2:
                                    //right
                                    for (int l = j + 1; l < n; l++) {
                                        if (field[i][l] == 0 || field[i][l] == 2 || field[i][l] == 3) {
                                            fields[k][i][l] = -1;
                                        } else {
                                            break;
                                        }
                                    }
                                    break;
                                case 3:
                                    //down
                                    for (int l = i + 1; l < m; l++) {
                                        if (field[l][j] == 0 || field[l][j] == 2 || field[l][j] == 3) {
                                            fields[k][l][j] = -1;
                                        } else {
                                            break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            /*for (int k=0;k<4;k++) {
                for (int i=0;i<m;i++) {
                    for (int j=0;j<n;j++) {
                        System.out.print(fields[k][i][j]);
                    }
                    System.out.println("\n");
                }
            } */

            Position p = a_star(start, finish, m,n,fields);

            String res = p==null?"impossible":String.valueOf(p.tick);
            String s = "Case #" + ti + ": "+res;
            System.out.println(s);
            out.write(s);
            out.write("\n");
        }
        out.close();
    }

    private static class Position {
        private int x,y;
        private int tick;

        private Position(int x, int y, int tick) {
            this.x = x;
            this.y = y;
            this.tick = tick;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Position position = (Position) o;

            if (tick%4 != position.tick%4) return false;
            if (x != position.x) return false;
            if (y != position.y) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            result = 31 * result + (tick%4);
            return result;
        }

        @Override
        public String toString() {
            return "Position{" +
                    "x=" + x +
                    ", y=" + y +
                    ", tick=" + tick +
                    '}';
        }
    }

    private static Position a_star(Position start,final Position goal,int m, int n,int [][][] fields) {
        // множество уже пройденных вершин
        Set<Position> closed = new HashSet<Position>();
        // множество частных решений
        Queue<Position> q = new PriorityQueue<Position>(10,new Comparator<Position>() {
            @Override
            public int compare(Position o1, Position o2) {
                int d1 = Math.abs(o1.x-goal.x) + Math.abs(o1.y-goal.y);
                int d2 = Math.abs(o2.x-goal.x) + Math.abs(o2.y-goal.y);
                return Integer.compare(d1,d2);
            }
        });
        q.add(start);
        int cnt = 0;
        while (!q.isEmpty()) {
            cnt++;
            if (cnt%100==0) {
                //System.out.println(cnt+" "+closed.size());
            }
            Position p = q.poll();
            //var x := the last node of p
            if (closed.contains(p)) {
                continue;
            }
            if (goal.x == p.x && goal.y ==p.y) {
                //System.out.println(cnt);
                return p;
            }
            closed.add(p);
            // добавляем смежные вершины
            final int n_tick = p.tick + 1;
            if (p.x>0) {
                final int nt = fields[n_tick%4][p.y][p.x - 1];
                if (nt==0 || nt==2 || nt==3) {
                    q.add(new Position(p.x-1,p.y,n_tick));
                }
            }
            if (p.x<n-1) {
                final int nt = fields[n_tick%4][p.y][p.x + 1];
                if (nt==0 || nt==2 || nt==3) {
                    q.add(new Position(p.x+1,p.y,n_tick));
                }
            }
            if (p.y>0) {
                final int nt = fields[n_tick%4][p.y-1][p.x];
                if (nt==0 || nt==2 || nt==3) {
                    q.add(new Position(p.x,p.y-1,n_tick));
                }
            }
            if (p.y<m-1) {
                final int nt = fields[n_tick%4][p.y+1][p.x];
                if (nt==0 || nt==2 || nt==3) {
                    q.add(new Position(p.x,p.y+1,n_tick));
                }
            }
        }
        //System.out.println(cnt);
        return null;
    }

    private static int[][] read2DArray(Scanner scanner, int n, int m) {
        int[][] m1 = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                m1[i][j] = scanner.nextInt();
            }
        }
        return m1;
    }

    // 1 0 1 -> [1,0,1]
    private static List<Integer> readIntList(Scanner scanner, int n) {
        List<Integer> l = new ArrayList<Integer>(n);
        for (int i = 0; i < n; i++) {
            l.add(scanner.nextInt());
        }
        return l;
    }

    // 1 2/ 2 3 -> [[0 1 0],[1 0 1],[0 1 0]]
    private static void readGraphAsMatrix(Scanner scanner, int n, int[][] matrix) {
        for (int i = 0; i < n - 1; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            matrix[x - 1][y - 1] = 1;
            matrix[y - 1][x - 1] = 1;
        }
    }

    // sdf ssf ggg -> [3]
    private static String[] readArray(Scanner scanner, int n) {
        String[] l2 = new String[n];
        for (int i = 0; i < n; i++) {
            l2[i] = scanner.next();
        }
        return l2;
    }

    // 1 2 3 4 5 - > (1,2,3,4,5)
    private static HashSet<String> readSet(Scanner scanner, int n) {
        String[] l1 = new String[n];
        HashSet<String> set1 = new HashSet<String>();
        for (int i = 0; i < n; i++) {
            l1[i] = scanner.next();
            set1.add(l1[i]);
        }
        return set1;
    }

    public static class MinMax {
        private String n;
        private String mx;
        private String mn;

        public MinMax(String n) {
            this.n = n;
        }

        public String getMx() {
            return mx;
        }

        public String getMn() {
            return mn;
        }

        public MinMax invoke() {
            int[] digits = new int[10];
            for (int i = 0; i < n.length(); i++) {
                Integer d = Character.getNumericValue(n.charAt(i));
                if (digits[d] == 0) {
                    digits[d] = i + 1;
                }
            }
            // find max
            int idx2chk = 0;
            int dc = 9;
            boolean c = true;
            mx = n;
            while (c) {
                int x = n.substring(idx2chk).lastIndexOf(Character.forDigit(dc, 10));
                if (dc > Character.getNumericValue(n.charAt(idx2chk)) && x > -1) {
                    char[] chars = n.toCharArray();
                    char ch = chars[idx2chk];
                    chars[idx2chk] = chars[idx2chk + x];
                    chars[idx2chk + x] = ch;
                    mx = String.valueOf(chars);
                    c = false;
                } else {
                    if (dc > 1) {
                        dc--;
                    } else {
                        if (idx2chk < n.length() - 1) {
                            idx2chk++;
                            dc = 9;
                        } else {
                            c = false;
                        }
                    }
                }
            }
            // find min
            idx2chk = 0;
            dc = 1;
            c = true;
            mn = n;
            while (c) {
                int x = n.substring(idx2chk).lastIndexOf(Character.forDigit(dc, 10));
                if (dc < Character.getNumericValue(n.charAt(idx2chk)) && x > -1) {
                    char[] chars = n.toCharArray();
                    char ch = chars[idx2chk];
                    chars[idx2chk] = chars[idx2chk + x];
                    chars[idx2chk + x] = ch;
                    mn = String.valueOf(chars);
                    c = false;
                } else {
                    if (dc < 9) {
                        dc++;
                    } else {
                        if (idx2chk < n.length() - 1) {
                            idx2chk++;
                            dc = 0;
                        } else {
                            c = false;
                        }
                    }
                }
            }
            return this;
        }
    }


}

#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <numeric>
#include <limits>
#include <climits>
#include <cfloat>
#include <functional>
using namespace std;

int dy[] = {-1, 0, 1, 0};
int dx[] = {0, 1, 0, -1};

int solve()
{
    int h, w;
    cin >> h >> w;

    vector<string> maze(h+2, string(w+2, '#'));
    int sy, sx, gy, gx;
    for(int y=1; y<=h; ++y){
        for(int x=1; x<=w; ++x){
            cin >> maze[y][x];
            if(maze[y][x] == 'S'){
                sy = y;
                sx = x;
                maze[y][x] = '.';
            }
            else if(maze[y][x] == 'G'){
                gy = y;
                gx = x;
                maze[y][x] = '.';
            }
        }
    }

    vector<vector<string> > move(4);
    for(int i=0; i<4; ++i)
        move[i] = maze;

    for(int y=1; y<=h; ++y){
        for(int x=1; x<=w; ++x){
            int k = string("^>v<").find(maze[y][x]);
            if(k == string::npos)
                continue;

            for(int i=0; i<4; ++i){
                int y2 = y;
                int x2 = x;
                do{
                    move[i][y2][x2] = '#';
                    y2 += dy[(k+i)%4];
                    x2 += dx[(k+i)%4];
                }while(maze[y2][x2] == '.');
            }
        }
    }

    queue<tuple<int, int, int> > q;
    q.push(make_tuple(0, sy, sx));
    move[0][sy][sx] = '#';
    int ret = 0;
    while(!q.empty()){
        int n = q.size();
        while(--n >= 0){
            int t, y, x;
            tie(t, y, x) = q.front();
            q.pop();
            if(y == gy && x == gx)
                return ret;

            for(int i=0; i<4; ++i){
                int y2 = y + dy[i];
                int x2 = x + dx[i];
                if(move[(t+1)%4][y2][x2] == '.'){
                    q.push(make_tuple((t+1)%4, y2, x2));
                    move[(t+1)%4][y2][x2] = '#';
                }
            }
        }
        ++ ret;
    }

    return -1;
}

int main()
{
    int T;
    cin >> T;
    for(int t=1; t<=T; ++t){
        cout << "Case #" << t << ": ";
        int ret = solve();
        if(ret == -1)
            cout << "impossible" << endl;
        else
            cout << ret << endl;
    }
    return 0;
}
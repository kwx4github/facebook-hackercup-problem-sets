#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<string>
#include<cstring>
#include<cstdio>
#include<ctime>
#include<climits>
#include<complex>
#include<cassert>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) (int)((x).size())
#define all(x) x.begin(),x.end()
#define clr(x) memset((x),0,sizeof(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define rep(i,n) for (i=0;i<n;i++)
#define Rep(i,a,b) for (i=a;i<=b;i++)
#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
using namespace std;
const double eps=1e-8;
const double pi=acos(-1.0);
int dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
char s[111][111];
bool o[111][111][4];
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
int n,m;
int dir[333];
int d[111][111][4];
struct node 
{
	int x,y,t;
	node(){}
	node(int a,int b,int c)
	{
		x=a;
		y=b;
		t=c;
	}
};
int main()
{
	freopen("C:\\competition\\2015\\fbhc\\laser_maze.txt","r",stdin);
	freopen("C:\\competition\\2015\\fbhc\\C.txt","w",stdout);
	int i,j,k,t,cc=0;
	cdp(dir);
	dir['^']=0;
	dir['>']=1;
	dir['v']=2;
	dir['<']=3;
	cin>>t;
	while (t--)
	{
		cin>>n>>m;
		for (i=0;i<n;i++)cin>>s[i];
		clr(o);
		for (i=0;i<n;i++)
		{
			for (j=0;j<m;j++)if (dir[s[i][j]]!=-1)
			{
				for (k=0;k<4;k++)
				{
					int v=(dir[s[i][j]]+k)%4;
					int x=i,y=j;
					//printf("%d %d %d\n",x,y,v);
					while (x>=0&&x<n&&y>=0&&y<m)
					{
						o[x][y][k]=1;
						x+=dx[v];y+=dy[v];
						if (dir[s[x][y]]!=-1||s[x][y]=='#')break;
					}
				}
			}
		}
		int sx,sy;
		for (i=0;i<n;i++)
		{
			for (j=0;j<m;j++)
			{
				if (s[i][j]=='S')
				{
					sx=i;sy=j;
				}
			}
		}
		printf("Case #%d: ",++cc);
		cdp(d);
		d[sx][sy][0]=0;
		queue<node>q;
		q.push(node(sx,sy,0));
		int goal=0;
		while (!q.empty())
		{
			int x=q.front().x;
			int y=q.front().y;
			int t=q.front().t;
			q.pop();
			if (s[x][y]=='G')
			{
				printf("%d\n",t);
				goal=1;
				break;
			}
			for (i=0;i<4;i++)
			{
				int xx=x+dx[i];
				int yy=y+dy[i];
				if (xx>=0&&yy>=0&&xx<n&&yy<m&&s[xx][yy]!='#'&&o[xx][yy][(t+1)%4]==0)
				{
					if (d[xx][yy][(t+1)%4]==-1)
					{
						d[xx][yy][(t+1)%4]=d[x][y][t%4]+1;
						q.push(node(xx,yy,t+1));
					}
				}
			}
		}
		if (goal==0)
		{
			puts("impossible");
			continue;
		}
		
	}
	return 0;
}
		
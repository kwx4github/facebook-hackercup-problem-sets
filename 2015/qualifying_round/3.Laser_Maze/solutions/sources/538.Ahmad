import java.io.*;
import java.util.*;


public class SolutionC {
	boolean[][][] attacked;
	boolean[][][] visited;
	char[][] board;
	int rows, cols;
	public void solve(){
		int t = nextInt();
		for (int k = 0; k < t; k++) {
			rows = nextInt(); cols = nextInt();
			board = new char[rows][cols];
			for (int i = 0; i < rows; i++) {
				board[i] = nextString().toCharArray();
			}
			attacked = new boolean[4][rows][cols];
			visited = new boolean[4][rows][cols];
			int startI = 0, startJ = 0;
			for(int l = 0 ; l < 4 ; l++){
				for(int i = 0 ; i < rows; i++){
					for(int j = 0; j < cols ; j++){
						if(board[i][j] == '>'){
							for(int z = j+1 ; z<cols && (board[i][z] == '.' || board[i][z] == 'G' || board[i][z] == 'S') ; z++)
								attacked[l][i][z] = true;
							board[i][j] = 'v';
						}else if(board[i][j] == '<'){
							for(int z = j-1 ; z>=0 && (board[i][z] == '.' || board[i][z] == 'G' || board[i][z] == 'S') ; z--)
								attacked[l][i][z] = true;
							board[i][j] = '^';
						}else if(board[i][j] == '^'){
							for(int z = i-1 ; z>=0 && (board[z][j] == '.' || board[z][j] == 'G' || board[z][j] == 'S') ; z--)
								attacked[l][z][j] = true;
							board[i][j] = '>';
						}else if(board[i][j] == 'v'){
							for(int z = i+1 ; z<rows && (board[z][j] == '.' || board[z][j] == 'G' || board[z][j] == 'S') ; z++)
								attacked[l][z][j] = true;
							board[i][j] = '<';
						}else if(board[i][j] == 'S'){
							startI = i; startJ = j;
						}
					
					}
				}
			}
			int ans = bfs(startI, startJ);
			out.print("Case #"+(k+1)+": ");
			out.println(ans == -1? "impossible" : ans);
		}
	}
	public int bfs(int startI, int startJ){
		Queue<Tuple> q = new LinkedList<Tuple>();
		q.add(new Tuple(startI - 1, startJ, 1));
		q.add(new Tuple(startI + 1, startJ, 1));
		q.add(new Tuple(startI, startJ - 1, 1));
		q.add(new Tuple(startI, startJ + 1, 1));
		while(!q.isEmpty()){
			Tuple t = q.poll();
			if(t.i < 0 || t.i >= rows || t.j < 0 || t.j >= cols)
				continue;
			if(visited[t.moves % 4][t.i][t.j] || attacked[t.moves % 4][t.i][t.j])
				continue;
			if(board[t.i][t.j] == 'G')
				return t.moves;
			if(board[t.i][t.j] != '.' && board[t.i][t.j] != 'S')
				continue;
			visited[t.moves % 4][t.i][t.j] = true;
			q.add(new Tuple(t.i + 1, t.j, t.moves+1));
			q.add(new Tuple(t.i - 1, t.j, t.moves+1));
			q.add(new Tuple(t.i, t.j + 1, t.moves+1));
			q.add(new Tuple(t.i, t.j - 1, t.moves+1));
		}
		return -1;
	}
	class Tuple{
		int i,j,moves;
		public Tuple(int i, int j, int moves){
			this.i = i; this.j = j; this.moves = moves;
		}
	}
	public void run(){
		try {
			bf = new BufferedReader(new InputStreamReader(new FileInputStream("laser_maze.txt")));
			out = new PrintWriter(new File("out.txt")); 
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		solve();
		out.close();
	}
	public static void main(String args[]){
		new SolutionC().run();
	}
	BufferedReader bf;
	PrintWriter out;
	String line;
	StringTokenizer st;
	public String nextLine(){
		try {
			line = bf.readLine();
			st = new StringTokenizer(line);
		} catch (IOException e) {
			return null;
		}
		return line;
	}
	public String nextString(){
		while (st == null || !st.hasMoreElements()) {
            try {
                line = bf.readLine();
                st = new StringTokenizer(line);
            } catch (IOException e) {
                return null;
            }
        }
        return st.nextToken();
	}
	public int nextInt(){
		return Integer.parseInt(nextString());
	}
	public long nextLong(){
		return Long.parseLong(nextString());
	}
	public double nextDouble(){
		return Double.parseDouble(nextString());
	}
}

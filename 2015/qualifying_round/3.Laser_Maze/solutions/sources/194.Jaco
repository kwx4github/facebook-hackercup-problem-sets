#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <string.h>
#include <map>
#include <list>
#include <algorithm>
#include <sstream>
#include <math.h>
#include <stdlib.h>

using namespace std;

static const int dx[] = {-1,0,1,0};
static const int dy[] = {0,-1,0,1};

int main(int argc, char *argv[])
{
    char brd[128][128];
    int mem[4][128][128];
    char hit[4][128][128];
    int T;
    cin >> T;
    for (int t=1;t<=T;t++)
    {
        int Y,X;
        cin >> Y >> X;
        int sx,sy,tx,ty;
        for (int y=0;y<Y;y++)
        {
            for (int x=0;x<X;x++)
            {
                cin >> brd[x][y];
                if (brd[x][y]=='S')
                {
                    sx = x;
                    sy = y;
                    brd[x][y] = '.';
                }
                if (brd[x][y]=='G')
                {
                    tx = x;
                    ty = y;
                    brd[x][y] = '.';
                }
                for (int i=0;i<4;i++)
                {
                    mem[i][x][y] = 1<<20;
                    hit[i][x][y] = 0;
                }
            }
        }
        for (int y=0;y<Y;y++)
            for (int x=0;x<X;x++)
                if (brd[x][y]=='<' || brd[x][y]=='>' || brd[x][y]=='^' || brd[x][y]=='v')
                {
                    int rot;
                    if (brd[x][y]=='<') rot = 0;
                    if (brd[x][y]=='>') rot = 2;
                    if (brd[x][y]=='^') rot = 1;
                    if (brd[x][y]=='v') rot = 3;
                    for (int d=0;d<4;d++)
                    {
                        int xx = x+dx[(d+rot)&3];
                        int yy = y+dy[(d+rot)&3];
                        while (xx>=0 && xx<X && yy>=0 && yy<Y && brd[xx][yy]=='.')
                        {
                            hit[d][xx][yy] = 1;
                            xx += dx[(d+rot)&3];
                            yy += dy[(d+rot)&3];
                        }
                    }
                }

        list<int> qx;
        list<int> qy;
        list<int> qmv;
        qx.push_back(sx);
        qy.push_back(sy);
        qmv.push_back(0);
        mem[0][sx][sy] = 0;
        while (!qx.empty())
        {
            int x = qx.front(); qx.pop_front();
            int y = qy.front(); qy.pop_front();
            int mv = qmv.front(); qmv.pop_front();
            for (int d=0;d<4;d++)
            {
                int nx = x+dx[d];
                int ny = y+dy[d];
                if (nx>=0 && nx<X && ny>=0 && ny<Y && brd[nx][ny]=='.' && mv+1<mem[(mv+1)&3][nx][ny])
                {
                    if (hit[(mv+1)&3][nx][ny]==1) continue;
                    mem[(mv+1)&3][nx][ny] = mv+1;
                    qx.push_back(nx);
                    qy.push_back(ny);
                    qmv.push_back(mv+1);
                }
            }
        }

        int imin = min(min(min(mem[0][tx][ty], mem[1][tx][ty]), mem[2][tx][ty]), mem[3][tx][ty]);

        if (imin>(1<<19))
            cout << "Case #" << t << ": impossible" << endl;
        else
            cout << "Case #" << t << ": " << imin << endl;
    }

    return 0;
}

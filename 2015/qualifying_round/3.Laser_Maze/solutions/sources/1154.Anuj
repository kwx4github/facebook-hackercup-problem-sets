#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair

char arr[105][105];

int n, m;
int sx, sy, gx, gy;

int lasers[105][105][5];
int visited[105][105][5];

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
vector < pair < pair <int, int>, int > > v;

int isblocked(int x, int y)
{
	int flag = 0;
	
	switch(arr[x][y]) {
		case '#' : flag = 1;
			   break;
		case '<' : flag = 1;
			   break;
		case '^' : flag = 1;
			   break;
		case '>' : flag = 1;
			   break;
		case 'v' : flag = 1;
			   break;
	}
	return flag;
}

void fnc(int x, int y)
{
	int i;
	
	for (i = x-1; i >= 0; i--) {
		if (isblocked(i, y)) break;
	}
	lasers[x][y][0] = i;
	
	for (i = y+1; i < n; i++) {
		if (isblocked(x, i)) break;
	}
	lasers[x][y][1] = i;
	
	for (i = x+1; i < m; i++) {
		if (isblocked(i, y)) break;
	}
	lasers[x][y][2] = i;
	
	for (i = y-1; i >= 0; i--) {
		if (isblocked(x, i)) break;
	}
	lasers[x][y][3] = i;
}

int check(int x, int y)
{
	int i, k;
	if (x >= 0 && x < m) {
		if (y >= 0 && y < n) {
        		if (isblocked(x, y)) return 0;
			for (i = 0; i < v.size(); i++) {
                		k = v[i].second;
                		switch (k) {
					case 0:
						if (y == v[i].first.second) {
							if (x <= v[i].first.first && x > lasers[v[i].first.first][v[i].first.second][v[i].second]) return 0;
                    				}
                    				break;
                			case 1:
                				if (x == v[i].first.first) {
							if (y >= v[i].first.second && y < lasers[v[i].first.first][v[i].first.second][v[i].second]) return 0;
						}
						break;
					case 2:
						if (y == v[i].first.second) {
							if (x >= v[i].first.first && x < lasers[v[i].first.first][v[i].first.second][v[i].second]) return 0;
						}
						break;
					case 3:
						if (x == v[i].first.first) {
							if (y <= v[i].first.second && y > lasers[v[i].first.first][v[i].first.second][v[i].second]) return 0;
						}
						break;
				}
			}
			return 1;
		}
	}
	return 0;
}

int main()
{
	int t, flag, cases = 1, ans;
	int i, j;
	
	scanf("%d", &t);
	while (t--) {
		ans = flag = 0;
        	memset(visited, 0, sizeof(visited));
		v.clear();
		
		scanf("%d %d",&m,&n);
		for (i = 0; i < m; i++) scanf("%s", arr[i]);
		
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				if (arr[i][j] == '^') v.pb(mp(mp(i, j), 0));
				if (arr[i][j] == '>') v.pb(mp(mp(i, j), 1));
				if (arr[i][j] == 'v') v.pb(mp(mp(i, j), 2));
				if (arr[i][j] == '<') v.pb(mp(mp(i, j), 3));
				if (arr[i][j] == 'S') {
					sx = i;
					sy = j;
				}
				if (arr[i][j] == 'G') {
					gx = i;
			    		gy = j;
				}
		    	}
		}
		for (i = 0; i < v.size(); i++) fnc(v[i].first.first, v[i].first.second);

		queue < pair < pair <int, int>, int > > q;
		q.push(mp(mp(sx, sy), 0));
		
		while (1) {
			for (i = 0; i < v.size(); i++) v[i].second = (v[i].second + 1)%4;
			int k = q.size();
		    	if (q.empty()) break;
		    	while (k > 0 && !q.empty()) {
				k--;
				pair < pair <int, int>, int > tmp = q.front();
				q.pop();
				if (visited[tmp.first.first][tmp.first.second][(tmp.second)%4] == 1) continue;

				visited[tmp.first.first][tmp.first.second][(tmp.second)%4] = 1;
				if (tmp.first.first == gx && tmp.first.second == gy) {
					ans = tmp.second;
					flag = 1;
					break;
				}
				for (i = 0; i < 4; i++) {
					int nx, ny;
					nx = tmp.first.first + dx[i];
					ny = tmp.first.second + dy[i];
					if (check(nx,ny)) {
						q.push(mp(mp(nx, ny), tmp.second + 1));
					}
				}
		    	}
		    	if (flag) break;
		}
		printf("Case #%d: ", cases++);
		if (!flag) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}


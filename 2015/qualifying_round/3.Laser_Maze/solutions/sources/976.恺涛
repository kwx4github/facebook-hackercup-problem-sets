/*************************************************************************
	> File Name: cupc.cpp
	> Author: skt
	> Mail: sktsxy@gmail.com
	> Created Time: 2015年01月09日 星期五 14时00分04秒
 ************************************************************************/

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <complex>
#include <cassert>
// #pragma comment(linker,"/STACK:102400000,102400000")
using namespace std;
#define LL long long
#define pb push_back
#define mp make_pair
#define eps 1e-8
#define x first
#define y second
#define MAXN 105
template <typename T> inline T Max(T a, T b) {return a>b?a:b;}
template <typename T> inline T Min(T a, T b) {return a<b?a:b;}
typedef pair<int, int> PII;
typedef vector<int> vi;
const double PI = acos(-1.0);
int T, M, N, Cas = 1, a[4][MAXN][MAXN], dir[5][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}, {0, 0}}, b[MAXN][MAXN], len[4][MAXN][MAXN];
bool vis[4][MAXN][MAXN];
char str[MAXN];

struct Node {
    int x, y, z;

    Node() {}

    Node(int x, int y, int z) : x(x), y(y), z(z) {}
} start, end;

int bfs() {
    queue <Node> Q;
    Q.push(start);
    vis[start.z][start.x][start.y] = true;
    while (!Q.empty()) {
        Node now = Q.front();
        for (int i = 0; i < 4; i ++) {
            Node next = now;
            next.z = (next.z + 1) % 4;
            next.x = (next.x + dir[i][0]);
            next.y = (next.y + dir[i][1]);
            if (!vis[next.z][next.x][next.y] && next.x >= 1 && next.x <= M && next.y >= 1 && next.y <= N) {
                if (a[next.z][next.x][next.y] == -1) {
                    continue;
                }
                Q.push(next);
                len[next.z][next.x][next.y] = len[now.z][now.x][now.y] + 1;
                if (next.x == end.x && next.y == end.y) {
                    return len[next.z][next.x][next.y];
                }
                vis[next.z][next.x][next.y] = true;
            }
        }
        Q.pop();
    }
    return -1;
}

void work() {
    scanf("%d %d", &M, &N);
    memset(b, 0, sizeof(b));
    memset(a, 0, sizeof(a));
    memset(len, 0, sizeof(len));
    for (int i = 1; i <= M; i ++) {
        scanf("%s", str + 1);
        for (int j = 1; j <= N; j ++) {
            if (str[j] == '#') {
                b[i][j] = -1;
            }
            if (str[j] == 'S') {
                start = Node(i, j, 0);
            }
            if (str[j] == 'G') {
                end = Node(i, j, 0);
            }
            if (str[j] == '^') {
                b[i][j] = 1;
            }
            if (str[j] == '>') {
                b[i][j] = 2;
            }
            if (str[j] == 'v') {
                b[i][j] = 3;
            }
            if (str[j] == '<') {
                b[i][j] = 4;
            }
        }
    }
    memset(vis, false, sizeof(vis));
    for (int i = 1; i <= M; i ++) {
        for (int j = 1; j <= N; j ++) {
            if (b[i][j] > 0) {
                for (int k = 0; k < 4; k ++) {
                    int direction = (b[i][j] + k + 3) % 4;
                    Node now = Node(i, j, k);
                    a[k][now.x][now.y] = -1;
                    now.x += dir[direction][0];
                    now.y += dir[direction][1]; 
                    while (now.x >= 1 && now.x <= M && now.y >= 1 && now.y <= N) {
                        if (b[now.x][now.y] == -1 || b[now.x][now.y] > 0) {
                            break;
                        }
                        a[k][now.x][now.y] = -1;
                        now.x += dir[direction][0];
                        now.y += dir[direction][1];
                    }
                }
            } else if (b[i][j] == -1) {
                for (int k = 0; k < 4; k ++) {
                    a[k][i][j] = -1;
                }
            }
        }
    }
    int ans = bfs();
    printf("Case #%d: ", Cas ++);
    if (ans == -1) {
        printf("impossible\n");
    } else {
        printf("%d\n", ans);
    }
}
int main() {
    scanf("%d", &T);
    while (T --) {
        work();
    }
    return 0;
}

#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>

using namespace std;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int inf = 1e9;
const int N = 1234;

char a[N][N];
char b[N][N][4];
int dist[N][N][4];
int st[256];
int qx[N * N];
int qy[N * N];
int qs[N * N];

int main() {
  freopen("in", "r", stdin);
  freopen("out", "w", stdout);
  memset(st, -1, sizeof st);
  st['^'] = 0;
  st['>'] = 1;
  st['v'] = 2;
  st['<'] = 3;
  int tt;
  scanf("%d", &tt);
  for (int cc = 1; cc <= tt; ++cc) {
    printf("Case #%d: ", cc);
    int n, m;
    scanf("%d %d", &n, &m);
    int sx = -1, sy = -1;
    int ex = -1, ey = -1;
    for (int i = 0; i < n; ++i) {
      scanf("%s", a[i]);
      for (int j = 0; j < m; ++j) {
        if (a[i][j] == 'S') {
          sx = i;
          sy = j;
        }
        if (a[i][j] == 'G') {
          ex = i;
          ey = j;
        }
      }
    }
    for (int d = 0; d < 4; ++d) {
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
          b[i][j][d] = a[i][j];
        }
      }
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
          if (st[a[i][j]] != -1) {
            int ni = i + dx[(st[a[i][j]] + d) % 4];
            int nj = j + dy[(st[a[i][j]] + d) % 4];
            while (ni >= 0 && ni < n && nj >= 0 && nj < m) {
              if (a[ni][nj] != '.' && a[ni][nj] != 'S' && a[ni][nj] != 'G') {
                break;
              }
              b[ni][nj][d] = '#';
              ni += dx[(st[a[i][j]] + d) % 4];
              nj += dy[(st[a[i][j]] + d) % 4];
            }
          }
        }
      }
    }
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
        for (int k = 0; k < 4; ++k) {
          dist[i][j][k] = inf;
        }
      }
    }
    qx[0] = sx;
    qy[0] = sy;
    qs[0] = 0;
    dist[sx][sy][0] = 0;
    for (int qh = 0, qt = 1; qh < qt; ++qh) {
      int x = qx[qh];
      int y = qy[qh];
      int s = qs[qh];
      for (int i = 0; i < 4; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        int ns = (s + 1) % 4;
        if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
          if (dist[nx][ny][ns] == inf) {
            if (b[nx][ny][ns] == '.' || b[nx][ny][ns] == 'S' || b[nx][ny][ns] == 'G') {
              dist[nx][ny][ns] = dist[x][y][s] + 1;
              qx[qt] = nx;
              qy[qt] = ny;
              qs[qt] = ns;
              ++qt;
            }
          }
        }
      }
    }
    int ans = inf;
    for (int i = 0; i < 4; ++i) {
      if (dist[ex][ey][i] < ans) {
        ans = dist[ex][ey][i];
      }
    }
    if (ans == inf) {
      puts("impossible");
    } else {
      printf("%d\n", ans);
    }
  }
  return 0;
}
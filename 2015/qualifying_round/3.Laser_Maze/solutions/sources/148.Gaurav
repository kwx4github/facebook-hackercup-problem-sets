#include <bits/stdc++.h>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=(a); i<(b); ++i)
#define fordn(i,a,b) for(int i=(a); i>(b); --i)
#define rep(i,a) for(int i=0; i<(a); ++i)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf(" %s",x)

#define fs first
#define sc second

#define pb push_back
#define mp make_pair

const int inf=int(1e9);
const LL linf=numeric_limits<LL>::max();

const int max_n=105;

int t,m,n,si,sj,gi,gj;
char maze[max_n][max_n];
bool vis[5][max_n][max_n];
int dist[5][max_n][max_n];
string dir="<^>v";
int dy[4]={-1,0,1,0};
int dx[4]={0,-1,0,1};
queue< pair<int,pii> > Q;

bool valid(int r,int c) {
	return (0<=r and r<m and 0<=c and c<n and maze[r][c]!='#' and int(dir.find(maze[r][c]))==-1);
}

int main() {
	gi(t);
	rep(z,t) {
		printf("Case #%d: ", z+1);
		gi(m); gi(n);

		rep(d,4)
			rep(i,m)
				rep(j,n)
					vis[d][i][j]=false;

		rep(i,m) {
			scanf(" ");
			rep(j,n) {
				maze[i][j]=getchar();
				if(maze[i][j]=='#')
					rep(d,4) {
						vis[d][i][j]=true;
						dist[d][i][j]=inf;
					}
				else if(maze[i][j]=='S')
					si=i, sj=j;
				else if(maze[i][j]=='G')
					gi=i, gj=j;
			}
		}
		
		rep(i,m)
			rep(j,n) {
				int pos=(int)dir.find(maze[i][j]);
				if(pos==-1) continue;
				//printf("%d %d %c %d\n", i,j,maze[i][j],pos);
				rep(d,4) {
					int ci=i,cj=j;
					do {
						vis[d][ci][cj]=true;
						dist[d][ci][cj]=inf;
						ci+=dx[(pos+d)%4];
						cj+=dy[(pos+d)%4];
					} while(valid(ci,cj));
				}
			}

		/*rep(d,4) {
			printf("d=%d\n", d);
			rep(i,m) {
				rep(j,n) printf("%d ", vis[d][i][j]);
				printf("\n");
			}
			printf("\n");
		}*/

		while(not Q.empty()) Q.pop();
		Q.push(mp(0,mp(si,sj)));
		dist[0][si][sj]=0;
		vis[0][si][sj]=true;
		int ans=inf;
		while(not Q.empty()) {
			pair<int,pii> P=Q.front(); Q.pop();
			int cd=P.fs,ci=P.sc.fs,cj=P.sc.sc;
			//printf("%d %d %d\n", cd, ci, cj);
			if(ci==gi and cj==gj) {
				ans=dist[cd][ci][cj];
				break;
			}
			int nd=(cd+1)%4;
			rep(i,4) {
				int ni=ci+dx[i],nj=cj+dy[i];
				if(valid(ni,nj) and (not vis[nd][ni][nj])) {
					vis[nd][ni][nj]=true;
					dist[nd][ni][nj]=dist[cd][ci][cj]+1;
					Q.push(mp(nd,mp(ni,nj)));
				}
			}
		}
		if(ans<inf) printf("%d\n", ans);
		else printf("impossible\n");
	}
	return 0;
}

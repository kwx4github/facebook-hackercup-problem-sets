#include <cstdio>
#include <queue>
#include <tuple>
#include <algorithm>
using namespace std;

int main() {
    int cs;
    scanf("%d",&cs);
    for (int no = 1; no <= cs; no++) {
        int n, m;
        int sr = -1, sc = -1;
        int gr = -1, gc = -1;
        char maze[105][105];
        bool shot[105][105][4] = {};
        const int mr[] = {-1, 0, 1, 0};
        const int mc[] = {0, 1, 0, -1};
        scanf("%d%d", &n, &m);
        for (int i = 0; i < n; i++) {
            scanf("%s", maze[i]);
            for (int j = 0; j < m; j++) {
                if (maze[i][j] == 'S') maze[sr = i][sc = j] = '.';
                if (maze[i][j] == 'G') maze[gr = i][gc = j] = '.';
            }
        }
        for (int o = 0; o < 4; o++) {
            for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++) {
                int t = -1;
                if (maze[i][j] == '^') t = (o + 0) % 4;
                if (maze[i][j] == '>') t = (o + 1) % 4;
                if (maze[i][j] == 'v') t = (o + 2) % 4;
                if (maze[i][j] == '<') t = (o + 3) % 4;
                if (t < 0) continue;
                int r = i, c = j;
                while (true) {
                    r += mr[t];
                    c += mc[t];
                    if (r < 0 || r >= n ||
                        c < 0 || c >= m || maze[r][c] != '.') break;
                    shot[r][c][o] = true;
                }
            }
        }
        int dp[105][105][4] = {}, ans = 1;
        queue<tuple<int, int, int>> q;
        q.push(make_tuple(sr, sc, 0));
        dp[sr][sc][0] = 1;
        while (q.size()) {
            int r, c, t;
            tie(r, c, t) = q.front();
            ans = dp[r][c][t];
            if (r == gr && c == gc) break;
            q.pop();
            for (int o = 0; o < 4; o++) {
                int dr = r + mr[o];
                int dc = c + mc[o];
                int dt = (t + 1) % 4;
                if (dr < 0 || dr >= n ||
                    dc < 0 || dc >= m ||
                    shot[dr][dc][dt] || dp[dr][dc][dt]) continue;
                q.push(make_tuple(dr, dc, dt));
                dp[dr][dc][dt] = ans + 1;
            }
        }
        printf("Case #%d: ", no);
        if (q.size()) printf("%d\n", ans - 1); else puts("impossible");
    }
}

#include <iostream>

#define EMPTY '.'
#define WALL '#'
#define GOAL 'G'
#define START 'S'

#define MAX 101

using namespace std;

int encode(int i, int j, int k) {
	return i*MAX*MAX+j*MAX+k;
}

void decode(int code, int& i, int& j, int& k) {
	i = code/(MAX*MAX);
	j = (code/MAX)%MAX;
	k = code%MAX;
}

int main() {
	char maze[MAX][MAX];
	bool legal[4][MAX][MAX];
	const char LAZER_DIRS[] = {'>', '<', '^', 'v'};
	const int DX[] = {1, -1, 0, 0};
	const int DY[] = {0, 0, 1, -1};
	int state[4][MAX][MAX];
	int q[MAX*MAX*4+1];

	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		int si, sj, gi, gj;
		int M, N;
		cin >> M >> N;
		for (int i = 0; i < M; ++i) {
			for (int j = 0; j < N; ++j) {
				cin >> maze[i][j];
				if (maze[i][j] == START) {
					maze[i][j] = EMPTY;
					si = i; sj = j;
				} else if (maze[i][j] == GOAL) {
					maze[i][j] = EMPTY;
					gi = i; gj = j;
				}
			}
		}

		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < M; ++j) {
				for (int k = 0; k < N; ++k) {
					legal[i][j][k] = (maze[j][k] == EMPTY);	
				}
			}
		}

		for (int i = 0; i < M; ++i) {
			for (int j = 0; j < N; ++j) {
				if ((maze[i][j] != EMPTY) && (maze[i][j] != WALL)) {
					// Lazer
					int dx = -100, dy = -100;
					for (int k = 0; k < 4; ++k) {
						if (LAZER_DIRS[k] == maze[i][j]) {
							dx = DX[k];
							dy = DY[k];
							break;
						}
					}

					for (int k = 0; k < 4; ++k) {
						int cur_i = i-dy, cur_j = j+dx;
						while ((cur_i >= 0) && (cur_j >= 0) && (cur_i < M) && (cur_j < N)) {
							if (maze[cur_i][cur_j] != EMPTY) {
								break;
							}
							legal[k][cur_i][cur_j] = false;
							cur_i -= dy;
							cur_j += dx;
						}
						int tmp = dy;
						dy = -dx;
						dx = tmp;						
					}
				}
			}
		}

		// BFS!

		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < M; ++j) {
				for (int k = 0; k < N; ++k) {
					state[i][j][k] = -1;
				}				
			}
		}
		state[0][si][sj] = 0;
		
		int min_dist = -1;

		int sq = 0, eq = 1;
		q[sq] = encode(0, si, sj);
		while (sq < eq) {
			int cur = q[sq++];
			int i, j, k;
			decode(cur, i, j, k);
			if ((j == gi) && (k == gj)) {
				min_dist = state[i][j][k];
				break;
			}
			int dx = 1, dy = 0;
			for (int p = 0; p < 4; ++p) {
				int cur_j = j-dy, cur_k = k+dx;
				int cur_i = (i+1)%4;
				if ((cur_j >= 0) && (cur_j < M) && (cur_k >= 0) && (cur_k < N)) {
					if ((legal[cur_i][cur_j][cur_k]) && (state[cur_i][cur_j][cur_k] == -1)) {
						state[cur_i][cur_j][cur_k] = state[i][j][k] + 1;
						q[eq++] = encode(cur_i, cur_j, cur_k);
					}
				}
				int tmp = dy;
				dy = -dx;
				dx = tmp;
			}
		}

		cout << "Case #" << (t+1) << ": ";
		if (min_dist == -1) {
			cout << "impossible";
		} else {
			cout << min_dist;
		}
		cout << endl;
	}
	return 0;
}
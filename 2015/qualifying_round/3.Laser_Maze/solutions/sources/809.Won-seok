#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

struct triplet {
  int y, x, z;
  triplet() {}
  triplet(int _y, int _x, int _z) { y = _y; x = _x; z = _z; }
};

int maze[4][100][100];

int solve() {
  int n, m;
  cin >> n >> m;
  int sy, sx, fy, fx;

  vector<triplet> T;
  for (int i=0; i<n; i++) {
    string str;
    cin >> str;
    for (int j=0; j<m; j++) {
      char ch = str[j];
      if (ch == 'S') { sy = i; sx = j; ch = '.'; }
      if (ch == 'G') { fy = i; fx = j; ch = '.'; }

      if (ch == '>') { T.push_back(triplet(i, j, 0)); ch = '#'; }
      if (ch == 'v') { T.push_back(triplet(i, j, 1)); ch = '#'; }
      if (ch == '<') { T.push_back(triplet(i, j, 2)); ch = '#'; }
      if (ch == '^') { T.push_back(triplet(i, j, 3)); ch = '#'; }

      maze[0][i][j] = maze[1][i][j] = maze[2][i][j] = maze[3][i][j] = (ch == '#');
    }
  }

  for (int i=0; i<T.size(); i++) {
    int yy = T[i].y;
    int xx = T[i].x;
    int dir = T[i].z;

    for (int j=0; j<4; j++) {
      int new_dir = (dir + j) % 4;
      int yyy = yy, xxx = xx;
      if (new_dir == 0) while (xxx+1<m && maze[j][yyy][xxx+1]!=1) { xxx++; maze[j][yyy][xxx] = -1; }
      if (new_dir == 1) while (yyy+1<n && maze[j][yyy+1][xxx]!=1) { yyy++; maze[j][yyy][xxx] = -1; }
      if (new_dir == 2) while (xxx-1>=0 && maze[j][yyy][xxx-1]!=1) { xxx--; maze[j][yyy][xxx] = -1; }
      if (new_dir == 3) while (yyy-1>=0 && maze[j][yyy-1][xxx]!=1) { yyy--; maze[j][yyy][xxx] = -1; }
    }
  }

  for (int i=0; i<4; i++) {
    for (int j=0; j<n; j++) {
      for (int k=0; k<m; k++) {
        if (maze[i][j][k] == 1) maze[i][j][k] = -1;
      }
    }
  }

  // Now, ordinary search
  queue<triplet> Q;
  Q.push(triplet(sy, sx, 0));
  maze[0][sy][sx] = 1;
  while (Q.size()) {
    triplet now = Q.front();
    int nxt_time = maze[now.z][now.y][now.x] + 1;
    Q.pop();
    if (now.y == fy && now.x == fx) return nxt_time - 2;
    now.z = (now.z + 1) % 4;
    if (now.x+1<m && maze[now.z][now.y][now.x+1] == 0) {
      maze[now.z][now.y][now.x+1] = nxt_time; Q.push(triplet(now.y, now.x+1, now.z));
    }
    if (now.y+1<n && maze[now.z][now.y+1][now.x] == 0) {
      maze[now.z][now.y+1][now.x] = nxt_time; Q.push(triplet(now.y+1, now.x, now.z));
    }
    if (now.x-1>=0 && maze[now.z][now.y][now.x-1] == 0) {
      maze[now.z][now.y][now.x-1] = nxt_time; Q.push(triplet(now.y, now.x-1, now.z));
    }
    if (now.y-1>=0 && maze[now.z][now.y-1][now.x] == 0) {
      maze[now.z][now.y-1][now.x] = nxt_time; Q.push(triplet(now.y-1, now.x, now.z));
    }
  }


  return -1;
}

int main()
{
  int T;
  cin >> T;
  for (int tc=1; tc<=T; tc++) {
    int res = solve();
    printf("Case #%d: ", tc);
    if (res == -1) printf("impossible\n"); else printf("%d\n", res);
  }
}

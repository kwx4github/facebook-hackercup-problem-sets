#include <bits/stdc++.h>
using namespace std;

#define debug(args...) fprintf(stderr,args)

typedef long long lint;
typedef pair<int,int> pii;
typedef pair<lint,lint> pll;
typedef tuple<int,int,int> tiii;

const int INF = 0x3f3f3f3f;
const lint LINF = 0x3f3f3f3f3f3f3f3fll;
const int MAXN = 110;

char grid[4][MAXN][MAXN];
int dist[4][MAXN][MAXN];
int n,m;

int dx[] = {0,1,0,-1};
int dy[] = {1,0,-1,0};

void bfs(int si,int sr,int sc) {
    memset(dist,INF,sizeof(dist));
    dist[si][sr][sc] = 0;
    queue<tiii> q;
    q.push(tiii(si,sr,sc));
    while(!q.empty()) {
        tiii cur = q.front();
        q.pop();
        int i = get<0>(cur), r = get<1>(cur), c = get<2>(cur);
        for(int a=0;a<4;++a) {
            int nr = r + dy[a], nc = c + dx[a];
            int ni = (i+1)%4;
            if(nr >= 0 && nc >= 0 && nr < n && nc < m && grid[ni][nr][nc] != '#') {
                if(dist[ni][nr][nc] == INF) {
                    dist[ni][nr][nc] = dist[i][r][c] + 1;
                    q.push(tiii(ni,nr,nc));
                }
            }
        }
    }
}

int main() {
    int t=1,T;
    for(scanf("%d",&T);t<=T;++t) {
        scanf("%d%d",&n,&m);
        int sr, sc, gr,gc;
        for(int a=0;a<n;++a) {
            for(int b=0;b<m;++b) {
                scanf(" %c",&grid[0][a][b]);
                if(grid[0][a][b] == 'S') {
                    sr = a;
                    sc = b;
                    grid[0][a][b] = '.';
                }
                else if(grid[0][a][b] == 'G') {
                    gr = a;
                    gc = b;
                    grid[0][a][b] = '.';
                }
            }
        }
        for(int a=1;a<4;++a)
            memcpy(grid[a],grid[0],sizeof(grid[0]));
        for(int a=1;a<4;++a) {
            for(int r=0;r<n;++r) {
                for(int c=0;c<m;++c) {
                    if(grid[a-1][r][c] == '^')
                        grid[a][r][c] = '>';
                    if(grid[a-1][r][c] == '>')
                        grid[a][r][c] = 'v';
                    if(grid[a-1][r][c] == 'v')
                        grid[a][r][c] = '<';
                    if(grid[a-1][r][c] == '<')
                        grid[a][r][c] = '^';
                }
            }
        }
        for(int a=0;a<4;++a) {
            for(int r=0;r<n;++r) {
                for(int c=0;c<m;++c) {
                    if(grid[a][r][c] == '^') {
                        grid[a][r][c] = '#';
                        for(int b=r-1;b>=0 && grid[a][b][c] == '.';--b)
                            grid[a][b][c] = '#';
                    }
                    if(grid[a][r][c] == '>') {
                        grid[a][r][c] = '#';
                        for(int b=c+1;b<m && grid[a][r][b] == '.';++b)
                            grid[a][r][b] = '#';
                    }
                    if(grid[a][r][c] == 'v') {
                        grid[a][r][c] = '#';
                        for(int b=r+1;b<n && grid[a][b][c] == '.';++b)
                            grid[a][b][c] = '#';
                    }
                    if(grid[a][r][c] == '<') {
                        grid[a][r][c] = '#';
                        for(int b=c-1;b>=0 && grid[a][r][b] == '.';--b)
                            grid[a][r][b] = '#';
                    }
                }
            }
        }
        bfs(0,sr,sc);
        int best = INF;
        for(int a=0;a<4;++a)
            if(grid[a][gr][gc] != '#')
                best = min(best, dist[a][gr][gc]);
        if(best == INF) printf("Case #%d: impossible\n",t);
        else printf("Case #%d: %d\n",t,best);
    }        
    return 0;
}

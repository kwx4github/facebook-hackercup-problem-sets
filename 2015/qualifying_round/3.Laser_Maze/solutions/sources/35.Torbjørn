from sys import stdin
from collections import deque

TC = int(stdin.readline())

t = 0

while t < TC:
    t += 1

    N, M = (int(x) for x in stdin.readline().split())
    input_lines = [[x for x in stdin.readline().strip()] for i in xrange(N)]
     
    maze = [[[x not in "#<>^v" for x in line] for line in input_lines] for i in xrange(4)]

    directions = {
        "^": [(-1, 0), (0, 1), (1, 0), (0, -1)],
        ">": [(0, 1), (1, 0), (0, -1), (-1, 0)],
        "v": [(1, 0), (0, -1), (-1, 0), (0, 1)],
        "<": [(0, -1), (-1, 0), (0, 1), (1, 0)],
    }

    S = (0, 0, 0, 0)
    G = (0, 0)

    for i in xrange(N):
        for j in xrange(M):
            if input_lines[i][j] == "S":
                S = (i, j, 0, 0)
            if input_lines[i][j] == "G":
                G = (i, j)
            if input_lines[i][j] in directions:
                for d in xrange(4):
                    dx, dy = directions[input_lines[i][j]][d]
                    x, y = (i + dx, j + dy)
                    while x >= 0 and x < N and y >= 0 and y < M and input_lines[x][y] not in "#<>^v":
                        maze[d][x][y] = False
                        x += dx
                        y += dy

    visited = [[[-1 for x in xrange(M)] for y in xrange(N)] for z in xrange(4)]
    visited[0][S[0]][S[1]]= 0

    dx = [0, 0, 1, -1]
    dy = [1, -1, 0, 0]

    q = deque()
    q.append(S)

    result = -1

    while q:
        x, y, d, dist = q.popleft()
        if (x, y) == G:
            result = dist
            break

        d = (d + 1) % 4

        for i in xrange(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if nx >= 0 and nx < N and ny >= 0 and ny < M and maze[d][nx][ny] and visited[d][nx][ny] == -1:
                visited[d][nx][ny] = dist + 1
                q.append((nx, ny, d, dist+1))

    print "Case #%d: %s" % (t, str(result) if result > -1 else "impossible")

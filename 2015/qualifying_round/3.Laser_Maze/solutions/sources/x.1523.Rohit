///ROHIT PATIYAL///

#include <iostream>
#include <cstdio>	//for printf and scanf (faster io)
#include <cmath> 	//for logl2() and pow etc math functions
#include <algorithm>	//for sort and other algorithms
#include <vector> 	//for vectors(resizable arrays)
					
using namespace std;

#define lli long long int
#define ull unsigned long long	//(0 - 18446744073709551615) ie (0 - 10x10^19) 	int - 0 to 4294967295 ie (0 - 10^9)
#define rep(i,b) for(i=0;i<b;i++)
#define repab(i,a,b) for(i=a;i<b;i++)
#define printArray(a,size) for(lli i=0;i<size;i++){cout<<a[i]<<endl;};


char maze[101][101];
int visited[101][101];
lli M, N;

int find(char c, char array[], int size){
	for (int i = 0; i < size; ++i)
	{
		if(c == array[i])
			return i;
	}
	return -1;
}


char getCurrent(char c, int steps){
	steps = steps%4;
	char array[4];
	array[0] = '^';
	array[1] = '>';
	array[2] = 'v';
	array[3] = '<';

	return array[(find(c, array, 4) + steps)%4];
}


bool checklaser(int ci, int cj, int steps){
	int i , j;

	if(steps > 0){//up
		i=ci; j=cj;
		while(i>=0){

			if(maze[i][j] == '#')
				break;
			if((maze[i][j] == '^') || (maze[i][j] == '>') || (maze[i][j] == 'v') || (maze[i][j] == '<')){
				if(getCurrent(maze[i][j], steps) == 'v')
					return false;
			}
			i--;
		}
		//down
		i=ci; j=cj;
		while(i<M){
			if(maze[i][j] == '#')
				break;
			if((maze[i][j] == '^') || (maze[i][j] == '>') || (maze[i][j] == 'v') || (maze[i][j] == '<')){
				if(getCurrent(maze[i][j], steps) == '^')
					return false;
			}
			i++;
		}

		i=ci; j=cj;
		//left
		while(j>=0){
			if(maze[i][j] == '#')
				break;
			if((maze[i][j] == '^') || (maze[i][j] == '>') || (maze[i][j] == 'v') || (maze[i][j] == '<')){
				if(getCurrent(maze[i][j], steps) == '>')
					return false;
			}
			j--;
		}
		//right
		i=ci; j=cj;
		while(j<N){
			if(maze[i][j] == '#')
				break;
			if((maze[i][j] == '^') || (maze[i][j] == '>') || (maze[i][j] == 'v') || (maze[i][j] == '<')){
				if(getCurrent(maze[i][j], steps) == '<')
					return false;
			}
			j++;
		}
	}
	//cout<<"true"<<endl;
	return true;
}




//chk for visited
void findGoal(int i, int j,int steps,int *answersteps, bool *possible){
	//printf("i=%d; j=%d; s=%d; a=%d; p=%d\n",i,j,steps, *answersteps, *possible);
	if(i>=0 && i<M && j >=0 && j < N){	
		//cout<<checklaser(i, j, steps)<<" ----------" <<endl;
		if(visited[i][j] >= 4 || maze[i][j] == '#' || maze[i][j] == '^' || checklaser(i, j, steps) == false){
			//cout<<maze[i][j]<<endl;
			//cout<<"hello"<<endl;
			return;
		}
		else{
			if(*answersteps > steps && maze[i][j] == 'G'){
				*possible = true;
				*answersteps = steps;
			}	
			else{
				visited[i][j]++;

				findGoal(i+1, j, steps+1, answersteps, possible);
				findGoal(i, j+1, steps+1, answersteps, possible);
				findGoal(i-1, j, steps+1, answersteps, possible);
				findGoal(i, j-1, steps+1, answersteps, possible);
			}
		}
	}
}



//max stack size allowed is 10^8
int main(){
	//max stack size allowed is 10^6
	lli t, T, q, Q, a, b, A, B, k, K, n, m,L, R, i, j;

	scanf("%lld", &T);
	rep(t, T){
		cin>>M>>N;
		
		int starti = 0, startj = 0; 
		rep(m,M){
			rep(n,N){

				cin>>maze[m][n];
				//cout<<maze[m][n]<<endl;
				visited[m][n] = 0;
				if(maze[m][n] == 'S'){
					starti = m;startj = n;
					//cout<<starti<< " "<<startj<<endl;
				}
			}
		}
		int steps = 0;
		bool possible = false;
		int answersteps = 999999999;
		findGoal(starti, startj, steps, &answersteps, &possible);
		if(possible == true)
			cout<<"Case #"<<(t+1)<<": "<<answersteps<<endl;
		else
			cout<<"Case #"<<(t+1)<<": impossible"<<endl;
	}
	return 0;
} 

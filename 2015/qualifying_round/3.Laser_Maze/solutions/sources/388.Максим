#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <string>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <set>
#include <utility>
#include <vector>
#include <algorithm>
#include <map>
#include <deque>
#include <iomanip>
#include <queue>
#include <iostream>
#include <ctime>
#include <fstream>
#include <functional>
#include <cstdlib>
#include <iterator>
#include <stack>

#define ll unsigned long long
#define pb push_back
#define mp make_pair
#define D  double
#define pi pair<ll,ll>
#define si set <pi>
#define F first
#define S second
#define forn(i,n) for (int(i)=0;(i)<(n);i++)
#define forr(i,x,y) for (int(i)=(x);(i)<=(y);i++)
#define ford(i,x,y) for (int(i)=(x);(i)>=(y);i--)
#define rev reverse
#define in insert
#define er erase
#define all(n) (n).begin(),(n).end()
#define graf vector<vector<pi> >
#define graf1 vector<vector<ll> >
#define sqr(a) (a)*(a)
#define file freopen("qq.txt","r",stdin);freopen("QQ.txt","w",stdout);

const ll INF=1000000007;
const D cp=2*asin(1.0);
const D eps=1e-9;
const ll mod=1000000007;

using namespace std;

int n, m,t;
string s[105];
int f[105][105][4];

struct ver {
    int x, y, w;

    ver() {}
    ver(int x, int y, int w): x(x), y(y), w(w) {}
};

char c[] = {'v', '<', '^', '>'};

int dx[] = {0, 0, -1, 1};
int dy[] = {1, -1, 0, 0};

bool check(int x, int y, int w, int from) {
    if (x < 0 || x >= n || y < 0 || y >= m || s[x][y] == '#') {
        return true;
    }
    int i;
    for (i = 0; i < 4; ++i) {
        if (c[i] == s[x][y]) {
            break;
        }
    }
    while (w) {
        i = (i + 1) % 4;
        --w;
    }
    if (c[i] == 'v' && !from) return false;
    if (c[i] == '^' && from == 1) return false;
    if (c[i] == '>' && from == 2) return false;
    if (c[i] == '<' && from == 3) return false;
    return true;
}

int main()
{
    //file;
    scanf("%d", &t);
    for (int e = 0; e < t; ++e) {
        scanf("%d %d", &n, &m);
        int sx, sy, fx, fy;
        for (int i = 0; i < n; ++i) {
            cin >> s[i];
            for (int j = 0; j < m; ++j) {
                if (s[i][j] == 'S') {
                    sx = i; sy = j;
                    s[i][j] = '.';
                }
                if (s[i][j] == 'G') {
                    fx = i; fy = j;
                    s[i][j] = '.';
                }
                for (int w = 0; w < 4; ++w) {
                    f[i][j][w] = mod;
                }
            }
        }
        f[sx][sy][0] = 0;
        queue<ver> q;
        q.push(ver(sx, sy, 0));
        while (!q.empty()) {
            ver now = q.front(); q.pop();
            int x, y, timer = (now.w + 1) % 4;
            for (int i = 0; i < 4; ++i) {
                x = now.x + dx[i], y = now.y + dy[i];
                bool safe = true;
                if (x < 0 || x >= n || y < 0 || y >= m || s[x][y] != '.') {
                    continue;
                }
                x = now.x + dx[i], y = now.y + dy[i];
                while (x >= 0 && s[x][y] == '.') {
                    --x;
                }
                safe &= check(x, y, timer, 0);
                if (!safe) continue;
                x = now.x + dx[i], y = now.y + dy[i];
                while (x < n && s[x][y] == '.') {
                    ++x;
                }
                safe &= check(x, y, timer, 1);
                if (!safe) continue;
                x = now.x + dx[i], y = now.y + dy[i];
                while (y >= 0 && s[x][y] == '.') {
                    --y;
                }
                safe &= check(x, y, timer, 2);
                if (!safe) continue;
                x = now.x + dx[i], y = now.y + dy[i];
                while (y < m && s[x][y] == '.') {
                    ++y;
                }
                safe &= check(x, y, timer, 3);
                if (!safe) continue;

                x = now.x + dx[i], y = now.y + dy[i];
                int nw = timer;
                if (f[x][y][nw] > f[now.x][now.y][now.w] + 1) {
                    f[x][y][nw] = f[now.x][now.y][now.w] + 1;
                    q.push(ver(x, y, nw));
                }

            }
        }
        int res = f[fx][fy][0];
        for (int i = 1; i < 4; ++i) {
            res = min(res, f[fx][fy][i]);
        }
        if (res == mod) {
            cout << "Case #" << e + 1 << ": " << "impossible" << "\n";
        } else
        cout << "Case #" << e + 1 << ": " << res << "\n";
    }
    return 0;
}

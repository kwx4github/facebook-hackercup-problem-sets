import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class LaserMaze {

	static int MAX = Integer.MAX_VALUE;
	static final int UP    = 0;
	static final int RIGTH = 1;
	static final int DOWN  = 2;
	static final int LEFT  = 3;
	static int [][] maze;
	static HashMap<Integer, ArrayList<Tuple>> laserC;
	static HashMap<Integer, ArrayList<Tuple>> laserR;
	
	static class Tuple{
		int x,y,z;
		public Tuple(int xx,int yy,int zz){
			x=xx;y=yy;z=zz;
		}
	}
	static boolean valid(int i,int j,int n){
		if(maze[i][j]==-1)return false;
		if(!laserR.containsKey(i) && !laserC.containsKey(j))return true;
		if(laserR.containsKey(i)){
			for(Tuple t: laserR.get(i)){
				if((t.z+n)%4==RIGTH && t.y < j)return false;
				if((t.z+n)%4==LEFT && t.y > j)return false;
			}
		}
		if(laserC.containsKey(j)){
			for(Tuple t: laserC.get(j)){
				if((t.z+n)%4==UP && t.x > i)return false;
				if((t.z+n)%4==DOWN && t.x < i)return false;
			}
		}
		return true;
	}
	static void parseC(Character c,int i,int j){
		if(c=='#'){
			maze[i][j]=-1;
			return;
		}
		if(c=='^')maze[i][j]=UP;
		if(c=='<')maze[i][j]=LEFT;
		if(c=='>')maze[i][j]=RIGTH;
		if(c=='v')maze[i][j]=DOWN;
		Tuple t = new Tuple(i, j, maze[i][j]);
		if(!laserR.containsKey(i))laserR.put(i, new ArrayList<Tuple>());
		if(!laserC.containsKey(j))laserC.put(j, new ArrayList<Tuple>());
		laserR.get(i).add(t);
		laserC.get(j).add(t);
	}
	
	public static void main(String[] args) {
		int N,M,iG=0,jG=0,iS=0,jS=0;
		Queue<Tuple> q = new LinkedList<Tuple>();
		
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		try {
			int test = Integer.parseInt(in.readLine());
			for(int t=1;t<=test;t++){
				laserC = new HashMap<Integer, ArrayList<Tuple>>();
				laserR = new HashMap<Integer, ArrayList<Tuple>>();
				
				String[] input = in.readLine().split(" ");
				N=Integer.parseInt(input[0]);
				M=Integer.parseInt(input[1]);
				maze = new int[N][M];
				
				for (int i = 0; i < N; i++) {
					String inp = in.readLine();
					for(int j=0; j<inp.length(); j++){
						Character c = inp.charAt(j);
						if(c=='.')continue;
						if(c=='S'){
							iS=i;jS=j;
						}else if(c=='G'){
							iG=i;jG=j;
						}else parseC(c,i,j);
					}
				}
				
				int [][] visited= new int[N][M];
				q.add(new Tuple(iS, jS, 0));
				int min=Integer.MAX_VALUE;
				while(!q.isEmpty()){
					Tuple tu = q.poll();
					int i=tu.x,j=tu.y,n=tu.z;
					if(i<0 || i>=N || j<0 || j>=M)continue;
					if(maze[i][j]==-1)continue;//Wall;
					if(!valid(i,j,n) && !(i==iS && j==jS && n==0))continue;
					if(visited[i][j]>=2)continue;
					visited[i][j]++;
					if(i==iG && j==jG){
						if(n<min)min=n;
					}else{
						q.add(new Tuple(i-1,j,n+1));
						q.add(new Tuple(i,j-1,n+1));
						q.add(new Tuple(i+1,j,n+1));
						q.add(new Tuple(i,j+1,n+1));
					}
				}
				System.out.print("Case #"+t+": ");
				if(min==Integer.MAX_VALUE)System.out.println("impossible");
				else System.out.println(min);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

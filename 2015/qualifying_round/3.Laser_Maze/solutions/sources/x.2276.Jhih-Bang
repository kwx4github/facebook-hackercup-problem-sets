#include<cstdio>
#include<queue>
#include<tuple>
#include<cstring>
using namespace std;
const int MAX = 100 + 10;
char arr[MAX][MAX];
bool vis[MAX][MAX][4];
queue<tuple<int,int,int>> q;
int dx[4]={1,-1,0,0};
int dy[4]={0,0,1,-1};
int main(){
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);
	int TN;
	scanf("%d", &TN);
	for(int casen = 1 ; casen <= TN ; casen++){
		memset(arr, 0, sizeof(arr));
		memset(vis, 0, sizeof(vis));
		int n, m;
		scanf("%d %d", &n, &m);
		for(int i = 1 ; i <= n ; i++)
			scanf("%s", arr[i]+1);
		int sx, sy, ex, ey, ans = -1;
		for(int i = 1 ; i <= n ; i++)
			for(int j = 1 ; j <= m ; j++){
				if(arr[i][j] == 'S') sx = i, sy = j;
				else if(arr[i][j] == 'G') ex = i, ey = j;
				else if(arr[i][j] == '#')
					vis[i][j][0] = vis[i][j][1] = vis[i][j][2] = vis[i][j][3] = true;
				else if(arr[i][j] != '.'){
					int tmp;
					if(arr[i][j] == '^') tmp = 1;
					else if(arr[i][j] == '>') tmp = 0;
					else if(arr[i][j] == 'v') tmp = 3;
					else tmp = 2;
					for(int k = j ; k <= m ; k++)
						vis[i][k][tmp] = true;
					tmp = (tmp+1)%4;
					for(int k = i ; k <= n ; k++)
						vis[k][j][tmp] = true;
					tmp = (tmp+1)%4;
					for(int k = j ; k >= 1 ; k--)
						vis[i][k][tmp] = true;
					tmp = (tmp+1)%4;
					for(int k = i ; k >= 1 ; k--)
						vis[k][j][tmp] = true;
				}
			}
		q.push(make_tuple(sx,sy,0));
		vis[sx][sy][0] = true;
		while(!q.empty()){
			tuple<int,int,int> tmp = q.front();
			q.pop();
			if(get<0>(tmp) == ex && get<1>(tmp) == ey){
				ans = get<2>(tmp);
				break;
			}
			int x = get<0>(tmp), y = get<1>(tmp);
			int step = get<2>(tmp);
			for(int i = 0 ; i < 4 ; i++){
				int nx = x + dx[i], ny = y + dy[i], nstep = step+1;
				if(arr[nx][ny] != 0 && !vis[nx][ny][nstep&3]){
					q.push(make_tuple(nx,ny,nstep));
					vis[nx][ny][nstep&3] = true;
				}
			}
		}
		while(!q.empty()) q.pop();
		printf("Case #%d: ", casen);
		if(ans == -1) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}

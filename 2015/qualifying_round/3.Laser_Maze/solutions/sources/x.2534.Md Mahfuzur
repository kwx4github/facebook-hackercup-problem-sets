#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;

char board[105][105];
vector<pii> laser;
bool visited[105][105][5];
int cost[105][105][5];

bool islaser(int i, int j) {
    return (board[i][j] == '<' || board[i][j] == '^' || board[i][j] == '>' || board[i][j] == 'v');
}

void goUp(int i, int j, int mod) {
    if(i < 0) return;
    if(board[i][j] == '#' || islaser(i, j)) return;
    visited[i][j][mod] = true;
    goUp(i-1, j, mod);
}

void goDown(int i, int j, int mod) {
    if(i > 100) return;
    if(board[i][j] == '#' || islaser(i, j)) return;
    visited[i][j][mod] = true;
    goDown(i+1, j, mod);
}

void goLeft(int i, int j, int mod) {
    if(j < 0) return;
    if(board[i][j] == '#' || islaser(i, j)) return;
    visited[i][j][mod] = true;
    goLeft(i, j-1, mod);
}

void goRight(int i, int j, int mod) {
    if(j > 100) return;
    if(board[i][j] == '#' || islaser(i, j)) return;
    visited[i][j][mod] = true;
    goRight(i, j+1, mod);
}

void handle(char lasr, int i, int j) {
    if(lasr == '<') {
        goLeft(i, j-1, 3);
        goUp(i-1, j, 0);
        goRight(i, j+1, 1);
        goDown(i+1, j, 2);
    } else if (lasr == '^') {
        goUp(i-1, j, 3);
        goRight(i, j+1, 0);
        goDown(i+1, j, 1);
        goLeft(i, j-1, 2);
    } else if (lasr == '>') {
        goRight(i, j+1, 3);
        goDown(i+1, j, 0);
        goLeft(i, j-1, 1);
        goUp(i-1, j, 2);
    } else {
        goDown(i+1, j, 3);
        goLeft(i, j-1, 0);
        goUp(i-1, j, 1);
        goRight(i, j+1, 2);
    }
}

struct me {
    int i, j, mod;
    me(){}
    me(int _i, int _j, int _mod):i(_i), j(_j), mod(_mod){}
};

void bfs(int i, int j, int r, int c) {
    queue<me> q;

    me u(i, j, -1);

    if((u.i-1 >= 0) && !visited[u.i-1][u.j][(u.mod+1)%4]) {

        visited[u.i-1][u.j][(u.mod+1)%4] = true;
        cost[u.i-1][u.j][(u.mod+1)%4] = 1;
        q.push(me(u.i-1, u.j, (u.mod+1)%4));

    }

    if((u.i+1 < r) && !visited[u.i+1][u.j][(u.mod+1)%4]) {

        visited[u.i+1][u.j][(u.mod+1)%4] = true;
        cost[u.i+1][u.j][(u.mod+1)%4] = 1;
        q.push(me(u.i+1, u.j, (u.mod+1)%4));

    }

    if((u.j-1 >= 0) && !visited[u.i][u.j-1][(u.mod+1)%4]) {

        visited[u.i][u.j-1][(u.mod+1)%4] = true;
        cost[u.i][u.j-1][(u.mod+1)%4] = 1;
        q.push(me(u.i, u.j-1, (u.mod+1)%4));

    }

    if((u.j+1 < c) && !visited[u.i][u.j+1][(u.mod+1)%4]) {

        visited[u.i][u.j+1][(u.mod+1)%4] = true;
        cost[u.i][u.j+1][(u.mod+1)%4] = 1;
        q.push(me(u.i, u.j+1, (u.mod+1)%4));

    }

    while(!q.empty()) {
        u = q.front();
        q.pop();
        //cout << "Processing " << u.i << " " << u.j << " " << u.mod << " " << cost[u.i][u.j][u.mod] << endl;

        if((u.i-1 >= 0) && !visited[u.i-1][u.j][(u.mod+1)%4]) {

            visited[u.i-1][u.j][(u.mod+1)%4] = true;
            cost[u.i-1][u.j][(u.mod+1)%4] = cost[u.i][u.j][u.mod] + 1;
            q.push(me(u.i-1, u.j, (u.mod+1)%4));

        }

        if((u.i+1 < r) && !visited[u.i+1][u.j][(u.mod+1)%4]) {

            visited[u.i+1][u.j][(u.mod+1)%4] = true;
            cost[u.i+1][u.j][(u.mod+1)%4] = cost[u.i][u.j][u.mod] + 1;
            q.push(me(u.i+1, u.j, (u.mod+1)%4));

        }

        if((u.j-1 >= 0) && !visited[u.i][u.j-1][(u.mod+1)%4]) {

            visited[u.i][u.j-1][(u.mod+1)%4] = true;
            cost[u.i][u.j-1][(u.mod+1)%4] = cost[u.i][u.j][u.mod] + 1;
            q.push(me(u.i, u.j-1, (u.mod+1)%4));

        }

        if((u.j+1 < c) && !visited[u.i][u.j+1][(u.mod+1)%4]) {

            visited[u.i][u.j+1][(u.mod+1)%4] = true;
            cost[u.i][u.j+1][(u.mod+1)%4] = cost[u.i][u.j][u.mod] + 1;
            q.push(me(u.i, u.j+1, (u.mod+1)%4));

        }
    }
}

void reset() {
    memset(visited, false, sizeof visited);
    laser.clear();
    for(int i = 0; i <= 100; i++) {
        for(int j = 0; j <= 100; j++) {
            for(int k = 0; k < 4; k++) {
                cost[i][j][k] = 100000000;
            }
        }
    }
}

int main() {
    freopen("laser_maze.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    int t, n, m;
    char dump;
    pii s, g;
    scanf("%d", &t);

    for(int i = 1; i <= t; i++) {
        reset();
        scanf("%d %d", &n, &m);
        for(int j = 0; j < n; j++) {
            scanf("%c", &dump);
            for(int k = 0; k < m; k++) {
                scanf("%c", &board[j][k]);
                if (board[j][k] == 'S') {
                    s = pii(j, k);
                } else if (board[j][k] == 'G') {
                    g = pii(j, k);
                } else if (board[j][k] == '#') {
                    visited[j][k][0] = true;
                    visited[j][k][1] = true;
                    visited[j][k][2] = true;
                    visited[j][k][3] = true;
                } else if (board[j][k] != '.') {
                    laser.push_back(pii(j, k));
                }
            }
        }

        for(int j = 0; j < laser.size(); j++) {
            handle(board[laser[j].first][laser[j].second], laser[j].first, laser[j].second);
        }

//        for(int j = 0; j < n; j++) {
//            for(int k = 0; k < m; k++) {
//                cout << board[j][k];
//            }
//            cout << endl;
//        }
//
//        for(int l = 0; l < 4; l++) {
//            for(int j = 0; j < n; j++) {
//                for(int k = 0; k < m; k++) {
//                    cout << visited[j][k][l];
//                }
//                cout << endl;
//            }
//            cout << endl;
//        }

        bfs(s.first, s.second, n, m);

//        for(int l = 0; l < 4; l++) {
//            for(int j = 0; j < n; j++) {
//                for(int k = 0; k < m; k++) {
//                    cout << visited[j][k][l];
//                }
//                cout << endl;
//            }
//            cout << endl;
//        }

        int ans = min(min(cost[g.first][g.second][0], cost[g.first][g.second][1]), min(cost[g.first][g.second][2], cost[g.first][g.second][3]));
        if(ans == 100000000)
            printf("Case #%d: impossible\n", i);
        else
            printf("Case #%d: %d\n", i, ans);
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <queue>

using namespace std;

const int HASNT_BEEN = -1;
const int IMPOSSIBLE = -2;
const int PROCESSING = -3;

int LEFT = 0;
int UP = 1;
int RIGHT = 2;
int DOWN = 3;

int possibilities[4][2] = {{1,0}, {-1,0}, {0, 1}, {0, -1}};


struct Last{
	int D;
	int U;
	int R;
	int L;
};

struct Pos{
	int X;
	int Y;
	int TIME;
};

bool isWall(int i, int j, const vector<string>& map){
	return map[i][j]=='#';
}

bool isTurret(int i, int j, const vector<string>& map){
	return map[i][j]=='v' || map[i][j]=='^' || map[i][j]=='>' || map[i][j]=='<';
}

void searchingForLastTurrets(int i, int j, const vector<string>& map, int& last, int& last_turret, int new_one){
	if(isWall(i,j,map))
		last_turret = -1;
	else if(isTurret(i,j,map))
		last_turret = new_one;
	last = last_turret;
}

int setDirection(char c){
	if(c == '>')
		return RIGHT;
	else if(c == '<')
		return LEFT;
	else if(c=='^')
		return UP;
	else 
		return DOWN;
}

bool isGoal(const Pos& pos, const vector<string>& map){
	return map[pos.Y][pos.X] == 'G';
}

bool isPointing(int i, int j, int DIRECTION, int time, const vector<string>& map){
	//cout<<i<<" "<<j<<" "<<DIRECTION<<" "<<time<<" "<<endl;
	if(i == -1 || j == -1)
		return false;
	int dir = setDirection(map[i][j]);
	dir+=time;
	dir%=4;
	return dir==DIRECTION;
}

bool isAvailable(const Pos& pos, const vector<string>& map, const vector<vector<Last> >& last_turrets){
	if(isTurret(pos.Y, pos.X, map) || isWall(pos.Y, pos.X, map))
		return false;
	const Last& last = last_turrets[pos.Y][pos.X];
	if(pos.TIME != 0 && (isPointing(pos.Y, last.L, RIGHT, pos.TIME, map) || isPointing(pos.Y, last.R, LEFT, pos.TIME, map) || isPointing(last.U, pos.X, DOWN, pos.TIME, map) || isPointing(last.D, pos.X, UP, pos.TIME, map)))
		return false;
	else
		return true;
}

bool isInMap(const Pos& pos, const vector<string>& map){
	return pos.X >=0 && pos.Y >=0 && pos.Y < map.size() && pos.X < map[0].size();
}

int main() {
	int T;
	cin>>T;
	for(int t_case = 1; t_case <= T; t_case++){
		cout<<"Case #"<<t_case<<": ";
		int N,M,start_x, start_y;
		cin>>N>>M;
		vector<string> map(N);
		vector<vector<Last> > last_turrets(N, vector<Last>(M));
		for(int i = 0; i < N; i++){
			cin>>map[i];
			for(int j = 0; j < M; j++){
				if(map[i][j] == 'S'){
					start_x = j;
					start_y = i;
					break;
				}
			}
		}
		for(int i = 0; i < N; i++){
			int last_turret = -1;
			for(int j = 0; j < M; j++){
				searchingForLastTurrets(i,j,map,last_turrets[i][j].L,last_turret,j);
			}
			last_turret = -1;
			for(int j = M-1; j >= 0; j--){
				searchingForLastTurrets(i,j,map,last_turrets[i][j].R,last_turret,j);
			}
		}
		for(int j = 0; j < M; j++){
			int last_turret = -1;
			for(int i = 0; i < N; i++){
				searchingForLastTurrets(i,j,map,last_turrets[i][j].U,last_turret,i);
			}
			last_turret = -1;
			for(int i = N-1; i >= 0; i--){
				searchingForLastTurrets(i,j,map,last_turrets[i][j].D,last_turret,i);
			}
		}
		vector<vector<vector<int> > > has_been(N, vector<vector<int> > (M, vector<int> (4, HASNT_BEEN)));
		queue<Pos> q;
		Pos start_pos = {start_x, start_y, 0};
		q.push(start_pos);
		bool found = false;
		while(!q.empty()){
			Pos pos = q.front();
			q.pop();
			if(isAvailable(pos, map, last_turrets)){
			//cout<<pos.Y<<" "<<pos.X<<" "<<pos.TIME<<endl;
				has_been[pos.Y][pos.X][pos.TIME%4] = pos.TIME;
				if(isGoal(pos, map)){
					cout<<pos.TIME<<endl;
					found = true;
					break;
				}
				for(int i = 0; i < 4; i++){
					Pos new_pos = pos;
					++new_pos.TIME;
					new_pos.X+=possibilities[i][0];
					new_pos.Y+=possibilities[i][1];
					if(isInMap(new_pos, map)){
						if(has_been[new_pos.Y][new_pos.X][new_pos.TIME%4] == HASNT_BEEN){
							has_been[new_pos.Y][new_pos.X][new_pos.TIME%4] = PROCESSING;
							q.push(new_pos);
						}
					}
				}
			}
			else {
				has_been[pos.Y][pos.X][pos.TIME%4] = IMPOSSIBLE;
			}
		}
		if(!found)
			cout<<"impossible"<<endl;
	}
    return 0;
}

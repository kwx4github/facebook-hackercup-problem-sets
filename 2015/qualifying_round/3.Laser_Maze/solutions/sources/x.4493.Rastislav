#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#include <tuple>
#include <climits>

#define INF 1023456789
#define SQR(x) ((x)*(x))
#define INIT(x,y) memset((x),(y),sizeof((x)))
#define SIZE(x) ((int)((x).size()))
#define REP(i, n) for (__typeof(n) i=0;i<(n);++i)
#define FOR(i, a, b) for (__typeof(a) i=(a);i<=(b);++i)
#define FORD(i, a, b) for (__typeof(a) i=(a);i>=(b);--i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define DEBUG
#ifdef DEBUG
#define DBG(x) cerr << #x << ": " << (x) << endl;
#else
#define DBG(x)
#endif

using namespace std;
 
typedef long long LL;
typedef pair<int,int> PI;
typedef tuple<int,int,int>trio;

int N,M;
const char d[4] = {'^','>','v','<'};

inline int laserD(char c)
{
	if (c=='.') return -1;
	REP(i,4) if (d[i]==c) return i;
	return -1;
}

inline void changeLaser(int &dir,char c)
{
	if (c=='#') dir = -1;
	int laser = laserD(c);
	if (laser!=-1) dir = laser;
}

struct state
{
	int r,c,s;

	state(int _r=0,int _c=0,int _s=0) : r(_r), c(_c), s(_s) {}
};

inline bool valid(int r,int c)
{
	return r>=0 && c>=0 && r<N && c<M;
}

inline void solve(int t)
{
	char m[147][147];
	scanf("%d%d",&N,&M);
	REP(i,N) scanf("%s",&m[i]);
	bool a[4][147][147];
	INIT(a,false);
	int sx,sy;
	sx = sy = 0;
	REP(i,N)
	{
		int dir = -1;
		//shooting right
		REP(j,M)
		{
			if (m[i][j]=='S')
			{
				sy = i;
				sx = j;
				continue;
			}
			changeLaser(dir,m[i][j]);
			if (dir!=-1) a[(1 - dir + 4) % 4][i][j] = true;
		}

		dir = -1;
		//shooting left
		FORD(j,M-1,0) 
		{
			changeLaser(dir,m[i][j]);
			if (dir!=-1) a[(3 - dir + 4) % 4][i][j] = true;
		}	
	}

	REP(i,M)
	{
		int dir = -1;
		//shooting down
		REP(j,N)
		{
			changeLaser(dir,m[j][i]);
			if (dir!=-1) a[(2 - dir + 4) % 4][j][i] = true;
		}

		dir = -1;
		//shooting up
		FORD(j,N-1,0) 
		{
			changeLaser(dir,m[j][i]);
			if (dir!=-1) a[(4 - dir) % 4][j][i] = true;
		}	
	}
	/*
	REP(i,N)
		REP(j,M) 
		{
			printf("%d %d ",i,j);
			REP(k,4) printf("%d ",a[k][i][j]);
			putchar('\n');
		}
	*/
	
	const int dx[4] = {0,1,0,-1};
	const int dy[4] = {-1,0,1,0};

	int D[4][147][147];
	REP(i,4) REP(j,N) REP(k,M) D[i][j][k] = INT_MAX;
	queue<state>Q;
	Q.push(state(sy,sx,0));
	D[0][sy][sx] = 0;
	m[sy][sx] = '.';
	while (!Q.empty())
	{
		int r = Q.front().r;
		int c = Q.front().c;
		int s = Q.front().s;
		Q.pop();
		REP(i,4) 
		{
			int rp = r + dy[i];
			int cp = c + dx[i];
			if (valid(rp,cp) && D[s][r][c]+1 < D[(s+1)%4][rp][cp] && !a[(s + 1)%4][rp][cp])
			{
				if (m[rp][cp]=='.')
				{
					Q.push(state(rp,cp,(s+1)%4));
					D[(s+1)%4][rp][cp] = D[s][r][c] + 1;
				}
				else if (m[rp][cp]=='G')
				{
					printf("Case #%d: %d\n",t,D[s][r][c] + 1);
					return;
				}
			}	
		}
	}
	printf("Case #%d: impossible\n",t);
}

int main()
{
	int T;
	scanf("%d",&T);
	REP(i,T) solve(i+1);
        return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<iostream>
#include<string>
#include<map>
#include<set>
#include<algorithm>
#include<queue>
#include<vector>
#include<time.h>
using namespace std;
char str[105];
char mp[5][105][105];
int dir[4][2]={0,1,1,0,0,-1,-1,0};
struct Node
{
    int t,x,y;
}S,G;
bool vis[5][105][105];
int mi[5][105][105];
int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze.out","w",stdout);
    int t,ca=0;
    scanf("%d",&t);
    while(t--)
    {
        memset(mp,0,sizeof(mp));
        memset(vis,0,sizeof(vis));
        int n,m;
        scanf("%d%d",&n,&m);
        for(int i=0;i<4;++i)
        {
            for(int j=0;j<=n+1;++j)
                mp[i][j][0]=mp[i][j][m+1]='#';
            for(int j=0;j<=m+1;++j)
                mp[i][0][j]=mp[i][n+1][j]='#';
        }
        for(int i=1;i<=n;++i)
        {
            scanf("%s",str+1);
            for(int j=1;j<=m;++j)
            {
                if(str[j]=='S')
                {
                    mp[0][i][j]=mp[1][i][j]=mp[2][i][j]=mp[3][i][j]='.';
                    S.x=i,S.y=j,S.t=0;
                    continue;
                }
                else if(str[j]=='G')
                {
                    mp[0][i][j]=mp[1][i][j]=mp[2][i][j]=mp[3][i][j]='.';
                    G.x=i,G.y=j,G.t=0;
                    continue;
                }
                else if(str[j]=='#'||str[j]=='.')
                    for(int k=0;k<4;++k)
                        mp[k][i][j]=str[j];
                else
                {
                    switch(str[j])
                    {
                        case'<':
                        mp[0][i][j]='<',mp[1][i][j]='^',mp[2][i][j]='>',mp[3][i][j]='v';break;
                        case'^':
                        mp[0][i][j]='^',mp[1][i][j]='>',mp[2][i][j]='v',mp[3][i][j]='<';break;
                        case'>':
                        mp[0][i][j]='>',mp[1][i][j]='v',mp[2][i][j]='<',mp[3][i][j]='^';break;
                        case'v':
                        mp[0][i][j]='v',mp[1][i][j]='<',mp[2][i][j]='^',mp[3][i][j]='>';break;
                    }
                }
            }
        }
        for(int i=0;i<4;++i)
            for(int j=1;j<=n;++j)
                for(int k=1;k<=m;++k)
                {
                    mi[i][j][k]=2147483647;
                    if(mp[i][j][k]=='<')
                    {
                        mp[i][j][k]='#';
                        for(int l=k-1;l>=0;l--)
                        {
                            if(mp[i][j][l]!='.')
                                break;
                            mp[i][j][l]='#';
                        }
                        mp[i][j][k]='#';
                    }
                    else if(mp[i][j][k]=='^')
                    {
                        mp[i][j][k]='#';
                        for(int l=j-1;l>=0;l--)
                        {
                            if(mp[i][l][k]!='.')
                                break;
                            mp[i][l][k]='#';
                        }
                    }
                    else if(mp[i][j][k]=='>')
                    {
                        mp[i][j][k]='#';
                        for(int l=k+1;l<=m;l++)
                        {
                            if(mp[i][j][l]!='.')
                                break;
                            mp[i][j][l]='#';
                        }
                    }
                    else if(mp[i][j][k]=='v')
                    {
                        mp[i][j][k]='#';
                        for(int l=j+1;l<=n;l++)
                        {
                            if(mp[i][l][k]!='.')
                                break;
                            mp[i][l][k]='#';
                        }
                    }
                }
//        for(int i=0;i<4;++i)
//        {
//            puts("");
//            for(int j=0;j<=n+1;++j)
//            {
//                puts(mp[i][j]);
//            }
//        }
        queue<Node>q;
        q.push(S);
        mi[0][S.x][S.y]=0;
        vis[0][S.x][S.y]=1;
        while(!q.empty())
        {
            Node now=q.front();
            q.pop();
            int c=(now.t+1)%4;
            for(int i=0;i<4;++i)
            {
                Node next;
                next.x=now.x+dir[i][0];
                next.y=now.y+dir[i][1];
                next.t=now.t+1;
                if(mp[c][next.x][next.y]=='#')
                    continue;
                else
                {
                    if(!vis[c][next.x][next.y])
                    {
                        q.push(next);
                        mi[c][next.x][next.y]=min(mi[c][next.x][next.y],next.t);
                        vis[c][next.x][next.y]=1;
                    }
                }
            }
        }
        int ans=2147483647;
        for(int i=0;i<4;++i)
            ans=min(ans,mi[i][G.x][G.y]);
        printf("Case #%d: ",++ca);
        if(ans==2147483647)
        {
            puts("impossible");
        }
        else printf("%d\n",ans);

    }
}

#!/usr/bin/env python

import csv
import sys
import argparse
import numpy

class Bunch:
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

debugflag=False
def debug(key, value=None):
    if (debugflag):
        if (value != None):
            sys.stderr.write("*DBG* {!s}: {!s}\n".format(key, value))
        else:
            sys.stderr.write("*DBG* {!s}\n".format(key))

class problem:
    def __init__(self, i, data):
        self.i=i

        # process data
        self.data=data
        # end process

class solver:
    def __init__(self, debug=False,):
        global debugflag

        debugflag=debug

        # Init
        pass
        # end Init

    def solve(self, p):
        # debug("Problem Data", p.data)
        debug("i", p.i)

        self.M=p.data.M
        self.N=p.data.N
        self.maze=p.data.maze

        # Solve problem
        self.create_mazes()

        t1=numpy.full((self.M,self.N),-1,int)
        t2=numpy.full((self.M,self.N),-1,int)
        t3=numpy.full((self.M,self.N),-1,int)
        t4=numpy.full((self.M,self.N),-1,int)
        t4[self.start]=0

        self.moving_step=0
        min_found=float("inf")
        while self.moving_step < min_found:
            #debug("t1",t1)
            #debug("t2",t2)
            #debug("t3",t3)
            #debug("t4",t4)
            #debug("")
            self.moving_step=float("inf")
            for m in range(self.M):
                for n in range(self.N):
                    t=t1[m,n]
                    if t >= 0:
                        self.step(m,n,t,t2,self.m2)
                    t=t2[m,n]
                    if t >= 0:
                        self.step(m,n,t,t3,self.m3)
                    t=t3[m,n]
                    if t >= 0:
                        self.step(m,n,t,t4,self.m4)
                    t=t4[m,n]
                    if t >= 0:
                        self.step(m,n,t,t1,self.m1)
            min_found=float("inf")
            if (t1[self.goal] != -1) and (t1[self.goal] < min_found):
                min_found=t1[self.goal]
            if (t2[self.goal] != -1) and (t2[self.goal] < min_found):
                min_found=t2[self.goal]
            if (t3[self.goal] != -1) and (t3[self.goal] < min_found):
                min_found=t3[self.goal]
            if (t4[self.goal] != -1) and (t4[self.goal] < min_found):
                min_found=t4[self.goal]

        if (min_found == float("inf")):
            min_found="impossible"
        solution=[min_found]
        # End solve

        return(solution)

    def solve2(self, p):
        # debug("Problem Data", p.data)
        
        # Solve problem Brute Force
        solution=[1]
        # End solve

        return(solution)

    def fill_right(self, m, n, mz):
        for i in range(n+1,self.N):
            if self.mz[m,i]:
                mz[m,i]=False
            else:
                break
        
    def fill_down(self, m, n, mz):
        for i in range(m+1,self.M):
            if self.mz[i,n]:
                mz[i,n]=False
            else:
                break
    def fill_left(self, m, n, mz):
        for i in range(n-1,-1,-1):
            if self.mz[m,i]:
                mz[m,i]=False
            else:
                break
    def fill_up(self, m, n, mz):
        for i in range(m-1,-1,-1):
            if self.mz[i,n]:
                mz[i,n]=False
            else:
                break

    def step(self,m,n,t,t2,m2):
        t1=t+1
        #debug("m,n",(m,n))
        if (n+1 < self.N) and m2[m,n+1]:
            if (t2[m,n+1] == -1) or (t1 < t2[m,n+1]):
                t2[m,n+1]=t1
                self.moving_step=min(self.moving_step,t1)
        if (m+1 < self.M) and m2[m+1,n]:
            if (t2[m+1,n] == -1) or (t1 < t2[m+1,n]):
                t2[m+1,n]=t1
                self.moving_step=min(self.moving_step,t1)
        if (n-1 >= 0) and m2[m,n-1]:
            if (t2[m,n-1] == -1) or (t1 < t2[m,n-1]):
                t2[m,n-1]=t1
                self.moving_step=min(self.moving_step,t1)
        if (m-1 >= 0) and m2[m-1,n]:
            if (t2[m-1,n] == -1) or (t1 < t2[m-1,n]):
                t2[m-1,n]=t1
                self.moving_step=min(self.moving_step,t1)
        
    
    def create_mazes(self):
        self.mz=numpy.full((self.M,self.N),True,bool)
        self.start=None
        self.goal=None

        for m in range(self.M):
            for n in range(self.N):
                c=self.maze[m][n]
                if c == ".":
                    pass
                elif c == "S":
                    assert(not self.start)
                    self.start=(m,n)
                elif c == "G":
                    assert(not self.goal)
                    self.goal=(m,n)
                else:
                    self.mz[m,n]=False
        self.m1=self.mz.copy()
        self.m2=self.mz.copy()
        self.m3=self.mz.copy()
        self.m4=self.mz.copy()
        for m in range(self.M):
            for n in range(self.N):
                c=self.maze[m][n]          
                if c == "#" or c == "." or c == "S" or c == "G":
                    pass
                elif c == "<":
                    self.fill_up(m,n,self.m1)
                    self.fill_right(m,n,self.m2)
                    self.fill_down(m,n,self.m3)
                    self.fill_left(m,n,self.m4)                    
                elif c == "^":
                    self.fill_up(m,n,self.m4)
                    self.fill_right(m,n,self.m1)
                    self.fill_down(m,n,self.m2)
                    self.fill_left(m,n,self.m3)                    
                elif c == ">":
                    self.fill_up(m,n,self.m3)
                    self.fill_right(m,n,self.m4)
                    self.fill_down(m,n,self.m1)
                    self.fill_left(m,n,self.m2)                    
                elif c == "v":
                    self.fill_up(m,n,self.m2)
                    self.fill_right(m,n,self.m3)
                    self.fill_down(m,n,self.m4)
                    self.fill_left(m,n,self.m1)                    
                else:
                    assert(False)

class pparser:
    
    def __init__(self, pfile):
        self.pfile=pfile
        self.reader=csv.reader(pfile, delimiter=" ")
        
        row=next(self.reader)
        self.N=int(row[0])
        self.i=0

    def __next__(self):
        self.i+=1

        if (self.i > self.N):
            raise StopIteration()

        # data=Bunch()
        
        # Parse problem here
        row=next(self.reader)
        M=int(row[0])
        N=int(row[1])
        maze=[]
        for i in range(M):
            row=next(self.reader)
            maze.append(row[0])
            assert(len(row[0]) == N)
            
        data=Bunch(M=M, N=N, maze=maze)
        # End parse

        p=problem(self.i, data)
        return(p)

    def __iter__(self):
        return(self)
        

def solve():
    parser=argparse.ArgumentParser("Solve the problem.")
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("--test", "-t", action="store_true")
    parser.add_argument("file", type=open)
    
    opt=parser.parse_args()

    if (opt.test):
        opt.debug=True

    s=solver(opt.debug)
    pfile=opt.file

    pparse=pparser(pfile)

    outwriter=csv.writer(sys.stdout, delimiter=" ", quoting=csv.QUOTE_NONE, lineterminator="\n")
    for p in pparse:
        solution=s.solve(p)
        
        if (opt.test):
            solution2=s.solve2(p)
            if (solution2 != solution):
                debug("Differing Solution", [solution, solution2])

        outwriter.writerow(["Case", "#{:d}:".format(p.i)]+solution)
    
    pfile.close()


if (__name__ == "__main__"):
    solve()

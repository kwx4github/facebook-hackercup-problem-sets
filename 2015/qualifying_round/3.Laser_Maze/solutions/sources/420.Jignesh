#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back
#define mp(x,y) make_pair(x,y)

#define debug if(printf("JJ "))
#define mod 1000000007 // 1e9 + 7
#define infi 1000000000
#define L 102

char arr[L][L];
bool attack[L][L][4];
int dis[L][L][4];
bool visited[L][L][4];
int n,m,sx,sy,gx,gy;
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};

inline bool isok(int x,int y){
    return x>=0 && y>=0 && x < n && y < m;
}

inline bool isobs(int x,int y){
    return arr[x][y]=='#' || arr[x][y]=='^' || arr[x][y]=='v' || arr[x][y]=='>' || arr[x][y]=='<';
}

int main(){
    int t;
    scanf("%d",&t);
    forup(zz,1,t){
        printf("Case #%d: ",zz);
        scanf("%d %d",&n,&m);
        rep(i,n)scanf("%s",arr[i]);
        rep(i,n) rep(j,m) {
            attack[i][j][0]=attack[i][j][1]=attack[i][j][2]=attack[i][j][3]=0;
            visited[i][j][0]=visited[i][j][1]=visited[i][j][2]=visited[i][j][3]=0;
            dis[i][j][0]=dis[i][j][1]=dis[i][j][2]=dis[i][j][3]=infi;
            if(arr[i][j]=='S') sx=i, sy=j;
            if(arr[i][j]=='G') gx=i, gy=j;
        }
        rep(i,n) rep(j,m){
            if(isobs(i,j)) continue;
            for(int k=j+1;k<m;k++)
            {
                if(!isobs(i,k)) continue;
                if(arr[i][k]=='<') attack[i][j][0]=1;
                if(arr[i][k]=='v') attack[i][j][1]=1;
                if(arr[i][k]=='>') attack[i][j][2]=1;
                if(arr[i][k]=='^') attack[i][j][3]=1;
                break;
            }
            for(int k=j-1;k>=0;k--)
            {
                if(!isobs(i,k)) continue;
                if(arr[i][k]=='>') attack[i][j][0]=1;
                if(arr[i][k]=='^') attack[i][j][1]=1;
                if(arr[i][k]=='<') attack[i][j][2]=1;
                if(arr[i][k]=='v') attack[i][j][3]=1;
                break;
            }           
            for(int k=i+1;k<n;k++)
            {
                if(!isobs(k,j)) continue;
                if(arr[k][j]=='^') attack[i][j][0]=1;
                if(arr[k][j]=='<') attack[i][j][1]=1;
                if(arr[k][j]=='v') attack[i][j][2]=1;
                if(arr[k][j]=='>') attack[i][j][3]=1;
                break;
            }            
            for(int k=i-1;k>=0;k--)
            {
                if(!isobs(k,j)) continue;
                if(arr[k][j]=='v') attack[i][j][0]=1;
                if(arr[k][j]=='>') attack[i][j][1]=1;
                if(arr[k][j]=='^') attack[i][j][2]=1;
                if(arr[k][j]=='<') attack[i][j][3]=1;
                break;
            }                        
        }            
        
        /*
        rep(i,n){
            rep(j,m) cout<<attack[i][j][0]<<attack[i][j][1]<<attack[i][j][2]<<attack[i][j][3]<<" ";
            cout<<endl;
        }
        */

        queue<pair<pii,int> > Q;
        visited[sx][sy][0]=1;
        dis[sx][sy][0]=0;
        Q.push(mp(mp(sx,sy),0));

        while(!Q.empty()){
            int ux = Q.front().first.first, uy = Q.front().first.second, t = Q.front().second;
          //  debug cout<<ux<<" "<<uy<<" "<<t<<endl;
            Q.pop();
            rep(k,4){
                int vx = ux + dx[k], vy = uy + dy[k], t1 = (t+1)%4;

                if(isok(vx,vy) && !isobs(vx,vy) && !attack[vx][vy][t1] && !visited[vx][vy][t1]) {
                       // cout<<"\t"<<vx<<" "<<vy<<" "<<t1<<endl;
                        visited[vx][vy][t1]=1;
                        dis[vx][vy][t1]=dis[ux][uy][t]+1;
                        //cout<<"dis "<<vx<<" "<<vy<<" "<<dis[vx][vy]<<endl;
                        Q.push(mp(mp(vx,vy),t1));
                    }
            }
        }

        int ans = min(min(dis[gx][gy][0],dis[gx][gy][1]),min(dis[gx][gy][2],dis[gx][gy][3]));
        if(ans==infi) puts("impossible");
        else printf("%d\n",ans);
    }    
}

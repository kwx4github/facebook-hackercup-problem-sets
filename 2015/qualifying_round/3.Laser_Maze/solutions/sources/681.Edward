from sys import *
from heapq import *
from time import time
from multiprocessing import Pool
from collections import *
import itertools
from copy import deepcopy
from bisect import *
setrecursionlimit(10000)
from math import *
from time import sleep
import os
import sys
import re
import numpy as np
import heapq

# d = disjkstra(start)
# while d.currnode != target
#     for each move from (d.currnode, d.currdist)
#         d.add_move(move, dist)
#     d.next()
# dist = d.currdist
# path = d.makepath(target)
class dijkstra:
    def __init__(self, start):
        self.prev = dict()
        self.dist = {start: 0}
        self.queue = []
        self.currdist = 0
        self.currnode = start
        self.finished = False

    def add_move(self, move, dist):
        distvia = self.currdist + dist
        if move not in self.dist or distvia < self.dist[move]:
            heapq.heappush(self.queue, (distvia, move))
            self.dist[move] = distvia
            self.prev[move] = self.currnode

    def next(self):
        if len(self.queue) == 0:
            self.finished = True
        else:
            self.currdist, self.currnode = heapq.heappop(self.queue)
            if self.currnode in self.dist and self.currdist > self.dist[self.currnode]: self.next()

def readint():
    return int(fi.readline())

def readints():
    return [int(X) for X in fi.readline().split()]

def readfloats():
    return [float(X) for X in fi.readline().split()]

def readstr():
    return fi.readline().rstrip()

def read_case():
    m, n = readints()
    maze = [readstr() for _ in range(m)]
    return (m, n, maze)

def inrange(m, n, maze, r, c, dr, dc):
    while True:
        r += dr
        c += dc
        if r in (-1,m) or c in (-1,n): return
        if maze[r][c] in ('.', 'S', 'G'): yield (r, c)
        else: return

def solve_case(m, n, maze):
    start = (-1, -1)
    goal = (-1, -1)
    unsafe = [set(), set(), set(), set()]
    next = defaultdict(set)
    for r in range(m):
        for c in range(n):
            if maze[r][c] == 'S': start = (r,c)
            if maze[r][c] == 'G': goal = (r,c)
            if maze[r][c] in ('^','>','v','<'):
                ip = "^<v>".find(maze[r][c])
                unsafe[ip        ] |= set(inrange(m, n, maze, r, c, -1,  0))
                unsafe[(1+ip) % 4] |= set(inrange(m, n, maze, r, c,  0, +1))
                unsafe[(2+ip) % 4] |= set(inrange(m, n, maze, r, c, +1,  0))
                unsafe[(3+ip) % 4] |= set(inrange(m, n, maze, r, c,  0, -1))
            if maze[r][c] in ('.', 'S','G'):
                if r > 0 and maze[r-1][c] in ('.','S','G'): next[(r,c)].add((r-1,c))
                if r < m-1 and maze[r+1][c] in ('.','S','G'): next[(r,c)].add((r+1,c))
                if c > 0 and maze[r][c-1] in ('.','S','G'): next[(r,c)].add((r,c-1))
                if c < n-1 and maze[r][c+1] in ('.','S','G'): next[(r,c)].add((r,c+1))
    d = dijkstra((start, 0))
    while d.currnode[0] != goal:
        nd = (1+d.currdist)%4
        for move in next[d.currnode[0]] - unsafe[nd]:
            d.add_move((move, nd), 1)
        d.next()
        if d.finished: return 'impossible'
    return d.currdist

def print_solution(case):
    val = solve_case(*case[1])
    msg = "Case #{}: {}".format(case[0], val)
    print msg
    return msg

t0 = time()
# Initialisation here
t1 = time()
print "Intialisation took %f seconds" % (t1 - t0)

if __name__ == '__main__':
    fni = "%s-%s-%s.in" % (argv[1], argv[2], argv[3])
    fno = "%s-%s-%s.out" % (argv[1], argv[2], argv[3])

    if not os.path.isfile(fni):
        sys.stdout.write('Waiting for input file {}...'.format(fni))
        while not os.path.isfile(fni):
            sys.stdout.flush()
            sleep(1)
            sys.stdout.write(".")
        sleep(1)
        print ''
    fi = open(fni, 'r')

    numcases = readint()
    cases = [(I, read_case()) for I in range(1,1+numcases)]

    mt = False
    if mt:
        print "Running multi-threaded"
        p = Pool(8)
        output = p.map(print_solution, cases)
    else:
        print "Running single-threaded"
        output = map(print_solution, cases)
    print "Elapsed time %f seconds " % (time() - t1)

    if os.path.isfile(fno):
        print 'Verifying against existing results'
        fo = open(fno, 'r')
        oc = re.split('(Case #[0-9]+:\s*)', fo.read())[1:]
        refout = [(A+B).rstrip() for (A,B) in zip(oc[::2], oc[1::2])]
        diffs = 0
        for C in range(numcases):
           if refout[C] != output[C]:
               print '-'*20
               print 'Input {}\nReference Output {}\nGenerated Output {}'.format(cases[C][1], refout[C], output[C])
               print '-'*20
               diffs += 1
        print '{} diffs found'.format(diffs)
    else:
        fo = open(fno, 'w')
        fo.write('\n'.join(output))
        print '{} cases written'.format(len(output))


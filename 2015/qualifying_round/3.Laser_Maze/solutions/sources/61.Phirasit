#include <iostream>
#include <queue>
#include <map>

#define N 110
#define DI 4
#define INF (-1u/2)
#define A first
#define B second

using namespace std;

typedef pair<int, int> PII;
typedef pair<int, PII> PI3;

map<char, int> direction;

int di[DI][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
char str[N][N];
int err[DI][N][N], dp[DI][N][N];
int n, m;
int t;

bool OutOfBound(int x, int y) {
	return !(0 <= x && x < n && 0 <= y && y < m);
}
int main() {
	freopen("laser_maze.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	direction['^'] = 0;
	direction['>'] = 1;
	direction['v'] = 2;
	direction['<'] = 3;
	cin >> t;
	for(int Case = 1; Case <= t ; Case++) {
		cin >> n >> m;
		for(int i = 0;i < n;i++) {
			cin >> str[i];
		}
		for(int k = 0;k < 4;k++) {
			for(int i = 0;i < n;i++) {
				for(int j = 0;j < m;j++) {
					err[k][i][j] = 0;
					dp[k][i][j] = INF;
				}
			}
		}
		int sx, sy, fx, fy;
		for(int i = 0;i < n;i++) {
			for(int j = 0;j < m;j++) {
				if(str[i][j] == 'S') {
					sx = i;
					sy = j;
				}else if(str[i][j] == 'G') {
					fx = i;
					fy = j;
				}else if(str[i][j] == '#') {
					for(int k = 0;k < 4;k++) {
						err[k][i][j] = 1;
					}
				}else if(str[i][j] != '.') {
					int id = direction[str[i][j]];
					for(int k = 0;k < DI;k++) {
						int n_di = (id + k) % DI;
						for(int tmp = 1;1;tmp++) {
							int ni = i + tmp * di[n_di][0], nj = j + tmp * di[n_di][1];
							if(OutOfBound(ni, nj)) {
								break;
							}
							err[k][ni][nj] = 1;
							if(str[ni][nj] != '.' && str[ni][nj] != 'S' && str[ni][nj] != 'G') {
								break;
							}
						}
						err[k][i][j] = 1;
					}
				}
			}
		}
		priority_queue<PI3> heap;
		heap.push(PI3(0, PII(sx, sy)));
		while(!heap.empty()) {
			PI3 top = heap.top();
			heap.pop();
			int val = -top.A, x = top.B.A, y = top.B.B;
			int k = val % DI;
			if(OutOfBound(x, y)) {
				continue;
			}
			if(val >= dp[k][x][y]) {
				continue;
			}
			if(val != 0 && err[k][x][y]) {
				continue;
			}
			dp[k][x][y] = val;
			for(int i = 0;i < DI;i++) {
				heap.push(PI3(-val-1, PII(x + di[i][0], y + di[i][1])));
			}
		}
		int ans = INF;
		for(int i = 0;i < DI;i++) {
			ans = min(ans, dp[i][fx][fy]);
		}
		cout << "Case #" << Case << ": ";
		if(ans == INF) {
			cout << "impossible";
		}else {
			cout << ans;
		}
		cout << endl;
	}
	return 0;
}

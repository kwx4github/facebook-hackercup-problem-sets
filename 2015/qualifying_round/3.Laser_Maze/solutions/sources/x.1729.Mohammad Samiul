/***********Template Starts Here***********/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <deque>
#include <functional>
#include <string>
#include <iostream>
#include <cctype>
#include <set>
#include <climits>

#define pb push_back
#define nl puts ("")
#define sp printf ( " " )
#define phl printf ( "hello\n" )
#define ff first
#define ss second
#define POPCOUNT __builtin_popcountll
#define RIGHTMOST __builtin_ctzll
#define LEFTMOST(x) (63-__builtin_clzll((x)))
#define MP make_pair
#define FOR(i,x,y) for(int i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(int i = (y) ; i >= (x) ; --i)
#define CLR(x,y) memset(x,y,sizeof(x))
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define NUMDIGIT(x,y) (((int)(log10((x))/log10((y))))+1)
#define SQ(x) ((x)*(x))
#define ABS(x) ((x)<0?-(x):(x))
#define FABS(x) ((x)+eps<0?-(x):(x))
#define ALL(x) (x).begin(),(x).end()
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))
#define SZ(x) ((int)(x).size())

using namespace std;

typedef long long vlong;
typedef unsigned long long uvlong;
typedef pair < int, int > pii;
typedef pair < vlong, vlong > pll;
typedef vector<pii> vii;
typedef vector<int> vi;

const vlong inf = 2147383647;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-9;

#ifdef forthright48
     #define debug(args...) {dbg,args; cerr<<endl;}
#else
    #define debug(args...)  // Just strip off all debug tokens
#endif

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;

//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };
int dir4[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};

inline vlong gcd ( vlong a, vlong b ) {
    a = ABS ( a ); b = ABS ( b );
    while ( b ) { a = a % b; swap ( a, b ); } return a;
}

int ext_gcd (int a,int b,int &x,int &y) {
    if (a == 0) { x = 0; y = 1; return b;}
    int x1, y1; int d = ext_gcd (b%a, a, x1, y1);
    x = y1 - (b / a) * x1; y = x1; return d;
}
inline vlong modInv ( int a, int m ) {
    int x, y;
    ext_gcd( a, m, x, y );
    if ( x < 0 ) x += m; //modInv is never negative
    return x;
}

inline vlong power ( vlong a, vlong p ) {
    vlong res = 1, x = a;
    while ( p ) {
        if ( p & 1 ) res = ( res * x );
        x = ( x * x ); p >>= 1;
    }
    return res;
}

inline vlong bigmod ( vlong a, vlong p, vlong m ) {
    vlong res = 1, x = a % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}


/***********Template Ends Here***********/

char grid[110][110];
int fire[4][110][110], row, col;

int vis[4][110][110];
void bfs ( int sk, int si, int sj ) {
    CLR(vis,-1);

    vis[sk][si][sj] = 0;
    queue<int> q;
    q.push ( sk ); q.push ( si ); q.push ( sj );

    while ( !q.empty() ) {
        sk = q.front(); q.pop(); si = q.front(); q.pop(); sj = q.front(); q.pop();

        FOR(i,0,3) {
            int ti = si + dir4[i][0];
            int tj = sj + dir4[i][1];
            int tk = ( sk + 1 ) % 4;

            if ( ti < 1 || ti > row || tj < 1 || tj > col ) continue;
            if ( grid[ti][tj] == '#' ) continue;
            if ( fire[tk][ti][tj] == 1 ) continue;

            if ( vis[tk][ti][tj] == -1 ) {
                vis[tk][ti][tj] = vis[sk][si][sj] + 1;
                q.push ( tk ); q.push ( ti ); q.push ( tj );
            }
        }
    }
}
int main () {
    #ifdef forthright48
    freopen ( "input.txt", "r", stdin );
    freopen ( "output.txt", "w", stdout );
    #endif // forthright48

    int kase, cnt = 0;
    scanf ( "%d", &kase );

    while ( kase-- ) {
        CLR(fire,0);

        scanf ( "%d %d", &row, &col );

        FOR(i,1,row){
            scanf ("%s", &grid[i][1] );
        }

        int si, sj, ti, tj;
        FOR(i,1,row){
            FOR(j,1,col){
                if ( grid[i][j] == '^' ) grid[i][j] = 0;
                else if ( grid[i][j] == '>' ) grid[i][j] = 1;
                else if ( grid[i][j] == 'v' ) grid[i][j] = 2;
                else if ( grid[i][j] == '<' ) grid[i][j] = 3;
                else if ( grid[i][j] == 'S' ) {
                    si = i;
                    sj = j;
                    grid[i][j] == '.';
                }
                else if ( grid[i][j] == 'G' ) {
                    ti = i;
                    tj = j;
                    grid[i][j] == '.';
                }
            }
        }

        FOR(i,1,row){
            FOR(j,1,col){
                if ( grid[i][j] >= 0 && grid[i][j] <= 3 ) {
                    grid[i][j]++;
                    if ( grid[i][j] == 4 ) grid[i][j] = 0;
                }
            }
        }

        FOR(k,0,3){
            FOR(i,1,row){
                FOR(j,1,col){
                    if ( grid[i][j] >= 0 && grid[i][j] <= 3 ) {
                        int d = grid[i][j] + k; d %= 4;
                        int fi = i;
                        int fj = j;
                        while ( fi >= 1 && fi <= row && fj >= 1 && fj <= col ) {
                            fire[k][fi][fj] = 1;
                            fi = fi + dir4[d][0];
                            fj = fj + dir4[d][1];
                        }
                    }
                }
            }
        }

//        FOR(k,0,3){
//            FOR(i,1,row){
//                FOR(j,1,col){
//                    if ( fire[k][i][j] ) printf ( "*" );
//                    else printf ( "-" );
//                }
//                nl;
//            }
//            nl;
//        }

        bfs ( 3, si, sj );

        int res = inf;
        FOR(i,0,3){
            if ( vis[i][ti][tj] == -1 ) continue;
            res = MIN(res,vis[i][ti][tj] );
        }

        printf( "Case #%d: ", ++cnt );
        if ( res == inf ) printf ( "impossible\n" );
        else printf ( "%d\n", res );
    }

    return 0;
}

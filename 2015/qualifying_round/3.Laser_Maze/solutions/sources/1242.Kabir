#include <stdio.h>
#include <string.h>
#include <queue>
#include <algorithm>
#include <map>
#include <math.h>
using namespace std;
#define S 105
int t, cases, r, c, dp[S][S][5], ok[S][S][5]; 
char F[S][S];
struct str{
    int x, y, m;
}var,tem;
map<char,int>dir;
int abs(int u){
    if(u >= 0)return u;
    else return -u;
}
int bfs(){
    int sx = -1, sy = -1, gx = -1, gy = -1;
    for(int i = 0; i < r; ++i)for(int j = 0; j < c; ++j){
        if(F[i][j] == 'S')sx = i, sy = j;
        if(F[i][j] == 'G')gx = i, gy = j;
    }
    queue<str>Q;
    var.x = sx;var.y = sy; var.m = 0;
    Q.push(var);
    dp[sx][sy][0] = 0; 
    while(!Q.empty()){
        var = Q.front(); Q.pop();
        int x = var.x;
        int y = var.y;
        int m = var.m; 
        if(x == gx && y == gy)return dp[x][y][m];
        for(int i = -1; i <= 1; ++i)for(int j = -1; j <= 1; ++j)if(abs(i) + abs(j) == 1){
            int xx = x + i;
            int yy = y + j;
            int mm = (m + 1) % 4;
            if(xx < 0 || xx >= r || yy < 0 || yy >= c)continue;
            if(F[xx][yy] != '.' && F[xx][yy] != 'G' && F[xx][yy] != 'S')continue;
            if(dp[xx][yy][mm] > -1 && dp[xx][yy][mm] <= dp[x][y][m] + 1)continue;
            int step = dp[x][y][m] + 1;
            if(ok[xx][yy][step % 4])continue;
            dp[xx][yy][mm] = step;
            tem.x = xx; tem.y = yy; tem.m = mm;
            Q.push(tem);
        }
    }
    return -1;
}
int main(){
    freopen("c.in", "r", stdin);
    freopen("c.out", "w", stdout);
    scanf("%d", &t);
    dir['<'] = 0; dir['v'] = 1; dir['>'] = 2; dir['^'] = 3;
    while(t--){
        memset(dp, -1, sizeof dp);
        memset(ok, 0, sizeof ok);
        scanf("%d %d", &r, &c);
        for(int i = 0; i < r; ++i)scanf("%s", F[i]);
        
        for(int i = 0; i < r; ++i)for(int j = 0; j < c; ++j)if(dir.find(F[i][j]) != dir.end()){
            int mod = dir[F[i][j]];
            for(int k = j - 1; k >= 0; --k){
                if(F[i][k] != '.' && F[i][k] != 'S' && F[i][k] != 'G')break;
                ok[i][k][mod] = 1; 
            }
            mod = (mod + 1) % 4;
            for(int k = i - 1; k >= 0; --k){
                if(F[k][j] != '.' && F[k][j] != 'S' && F[k][j] != 'G')break;
                ok[k][j][mod] = 1; 
            }
            mod = (mod + 1) % 4;
            for(int k = j + 1; k < c; ++k){
                if(F[i][k] != '.' && F[i][k] != 'S' && F[i][k] != 'G')break;
                ok[i][k][mod] = 1; 
            }
            mod = (mod + 1) % 4;
            for(int k = i + 1; k < r; ++k){
                if(F[k][j] != '.' && F[k][j] != 'S' && F[k][j] != 'G')break;
                ok[k][j][mod] = 1; 
            }
        } 
        int res = bfs();
        if(res < 0)printf("Case #%d: impossible\n", ++cases);
        else printf("Case #%d: %d\n", ++cases, res);
    }
    
    return 0;
}

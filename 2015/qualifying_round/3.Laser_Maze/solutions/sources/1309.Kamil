// Author: Kamil Nizinski
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
#define debug(fmt,...) fprintf(stderr,fmt, ## __VA_ARGS__)
#define mp make_pair
#define ft first
#define sd second
#define psb push_back
#define ppb pop_back
using namespace std;
typedef long long int ll;
typedef long long unsigned llu;
typedef double dd;
typedef pair < int, int > pii;
const int MAX_N=107,MAX_M=107;
int n,m;
int DI[] = {0,0,-1,1};
int DJ[] = {-1,1,0,0};
char M[MAX_N][MAX_M];
int dp[MAX_N][MAX_M][4];	// -1 unknown yet, -2 can't go there
queue < pair < pii, int > > Q;	// ((i,j),mod)
bool free(char c) {
  return (c=='.'||c=='S'||c=='G');
}
void shoot(int di,int dj,int mod,int i, int j) {
  i+=di;
  j+=dj;
  while(free(M[i][j])) {
    dp[i][j][mod]=-2;
    i+=di;
    j+=dj;
  }
}
void solve() {
  scanf("%d%d",&n,&m);
  int i,j,mod,ndist,k,ni,nj,nmod;
  pii S,G;
  for(i=1;i<=n;i++) scanf("%s",M[i]+1);
  for(j=0;j<=m+1;j++) M[0][j]=M[n+1][j]='#';
  for(i=0;i<=n+1;i++) M[i][0]=M[i][m+1]='#';
  /*debug("\n");
  for(i=0;i<=n+1;i++) {
    for(j=0;j<=m+1;j++) debug("%c",M[i][j]);
    debug("\n");
  }*/
  for(i=0;i<=n+1;i++) for(j=0;j<=m+1;j++) for(mod=0;mod<=3;mod++) dp[i][j][mod]=-2;
  for(i=0;i<=n+1;i++) for(j=0;j<=m+1;j++) if(free(M[i][j])) {
    for(mod=0;mod<=3;mod++) dp[i][j][mod]=-1;
    if(M[i][j]=='S') S=mp(i,j);
    if(M[i][j]=='G') G=mp(i,j);
  }
  /*if(S==G) {
    debug("S=G\n");
    printf("0\n");
    return;
  }
  debug("S: %d %d\nG: %d %d\n",S.ft,S.sd,G.ft,G.sd);*/
  for(i=0;i<=n+1;i++) for(j=0;j<=m+1;j++) {
    switch(M[i][j]) {
      case '<':
	shoot(0,-1,0,i,j);
	shoot(-1,0,1,i,j);
	shoot(0,1,2,i,j);
	shoot(1,0,3,i,j);
	break;
      case '>':
	shoot(0,1,0,i,j);
	shoot(1,0,1,i,j);
	shoot(0,-1,2,i,j);
	shoot(-1,0,3,i,j);
	break;
      case '^':
	shoot(-1,0,0,i,j);
	shoot(0,1,1,i,j);
	shoot(1,0,2,i,j);
	shoot(0,-1,3,i,j);
	break;
      case 'v':
	shoot(1,0,0,i,j);
	shoot(0,-1,1,i,j);
	shoot(-1,0,2,i,j);
	shoot(0,1,3,i,j);
	break;
    }
  }
  
  dp[S.ft][S.sd][0]=0;
  while(!Q.empty()) Q.pop();
  Q.push(mp(S,0));
  while(!Q.empty()) {
    i=Q.front().ft.ft;
    j=Q.front().ft.sd;
    mod=Q.front().sd;
    Q.pop();
    ndist=dp[i][j][mod]+1;
    nmod=(mod+1)%4;
    for(k=0;k<4;k++) {
      ni=i+DI[k];
      nj=j+DJ[k];
      if(dp[ni][nj][nmod]==-1) {
	dp[ni][nj][nmod]=ndist;
	Q.push(mp(mp(ni,nj),nmod));
	if(mp(ni,nj)==G) {
	  printf("%d\n",ndist);
	  return;
	}
      }
      
    }
  }
  printf("impossible\n");
}
int main()
{
	int t,i;
	scanf("%d",&t);
	for(i=1;i<=t;i++) {
	  printf("Case #%d: ",i);
	  solve();
	}
	return 0;
}

START = 'S'
GOAL = 'G'
EMPTY = '.'
WALL = '#'
TURRET1 = '<'
TURRET2 = '^'
TURRET3 = '>'
TURRET4 = 'v'
TURRETS = [TURRET1, TURRET2, TURRET3, TURRET4]

def find(M, a):
    for y in xrange(len(M)):
        for x in xrange(len(M[0])):
            if M[y][x] == a:
                return (x, y)

def inrange(M, (x, y)):
    return 0 <= y < len(M) and 0 <= x < len(M[0])

def goTurrets(M, t):
    M = list(N[:] for N in M)
    for y in xrange(len(M)):
        for x in xrange(len(M[0])):
            a = M[y][x]
            if a in TURRETS:
                b = TURRETS[(TURRETS.index(a) + t) % 4]
                if b == TURRET1:
                    _next = lambda (x, y): (x-1, y)
                elif b == TURRET2:
                    _next = lambda (x, y): (x, y-1)
                elif b == TURRET3:
                    _next = lambda (x, y): (x+1, y)
                elif b == TURRET4:
                    _next = lambda (x, y): (x, y+1)
                else:
                    raise Exception("invalid turret")
                pos = (x, y)
                getField = lambda (x, y): M[y][x]
                M[y][x] = EMPTY
                while inrange(M, pos) and getField(pos) in (EMPTY, START, GOAL):
                    M[pos[1]][pos[0]] = WALL
                    pos = _next(pos)
    return M

def printM(M):
    for y in xrange(len(M)):
        for x in xrange(len(M[0])):
            print M[y][x],
        print

def solve():
    m, n = [int(x) for x in raw_input().split()]
    M = list(list(raw_input()) for _ in xrange(m))

    Mt = list(goTurrets(M, t) for t in xrange(4))

    if 0:
        printM(Mt[0])
        printM(Mt[1])
        printM(Mt[2])
        printM(Mt[3])

    pos = find(M, START)
    goal = find(M, GOAL)
    cur = (pos, 0)
    Q = [cur]
    Qi = 0
    V = {cur}
    while Qi < len(Q):
        pos, depth = Q[Qi]
        Qi += 1
        if pos == goal:
            return depth
        nexts = [lambda (x, y): (x-1, y),
            lambda (x, y): (x, y-1),
            lambda (x, y): (x+1, y),
            lambda (x, y): (x, y+1)]
        nextDepth = depth + 1
        nextT = nextDepth % 4
    #    print pos, "depth", depth, "nextDepth", nextDepth, "nextT", nextT
        for _next in nexts:
            nextPos = _next(pos)
            if inrange(M, nextPos) and (nextPos, nextT) not in V:
                m = Mt[nextT][nextPos[1]][nextPos[0]]
                if m != WALL:
                    V.add((nextPos, nextT))
                    Q.append((nextPos, nextDepth))

def main():
    for i in xrange(int(raw_input())):
        res = solve()
        print "Case #%d: %s" % (i + 1, res if res else "impossible")

if __name__ == '__main__':
    main()

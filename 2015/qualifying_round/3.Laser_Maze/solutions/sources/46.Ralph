#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <map>
#include <tuple>
#include <cassert>
#include <queue>
using namespace std;
typedef long long i64;

#define fu(i,m,n) for(int i=m; i<n; i++)
#define fd(i,m,n) for(int i=n-1; i>=m; i--)
#define fr(i,m,n) for(typeof(m) i=m; i!=n; ++i)
#define fa(i,c) fr(i,(c).begin(),(c).end())

char maze[8][110][110];
char seen[8][110][110];
int R,C;
char transition[256];

void shoot(int i, int r, int c, int dr, int dc) {
  for(;;) {
    r+=dr;
    c+=dc;
    if(maze[i][r][c]=='.' || maze[i][r][c]=='X') maze[i][r][c]='X';
    else break;
  }
}

void rotate(int a, int b) {
  fu(r,0,R) fu(c,0,C) {
    maze[b][r][c] = transition[maze[a][r][c]];
  }
  fu(r,0,R) fu(c,0,C) if(maze[b][r][c]=='^') shoot(b,r,c,-1,0);
  fu(r,0,R) fu(c,0,C) if(maze[b][r][c]=='>') shoot(b,r,c,0,1);
  fu(r,0,R) fu(c,0,C) if(maze[b][r][c]=='v') shoot(b,r,c,1,0);
  fu(r,0,R) fu(c,0,C) if(maze[b][r][c]=='<') shoot(b,r,c,0,-1);
}

int dr[]={1,0,-1,0};
int dc[]={0,1,0,-1};

int main(void) {
        transition['.']='.';
        transition['#']='#';
        transition['<']='^';
        transition['^']='>';
        transition['>']='v';
        transition['v']='<';
        transition['X']='.';
	int TS; cin >> TS;
        int rs,cs,rg,cg;
	for(int ts=1; ts<=TS; ts++) {
                cin >> R >> C;
                memset(maze,'#',sizeof(maze));
                memset(seen,0,sizeof(seen));
                fu(r,0,R) fu(c,0,C) cin >> maze[7][r+1][c+1];
                R+=2, C+=2;
                rs=cs=rg=cg=-1;
                fu(r,0,R) fu(c,0,C) if(maze[7][r][c]=='S') { maze[7][r][c]='.'; rs=r; cs=c; }
                fu(r,0,R) fu(c,0,C) if(maze[7][r][c]=='G') { maze[7][r][c]='.'; rg=r; cg=c; }
                assert(rs!=-1 && rg!=-1);
                rotate(7,0);
                rotate(0,1);
                rotate(1,2);
                rotate(2,3);
                /*fu(i,0,8) {
                  fu(r,0,R) {
                    fu(c,0,C) cout << maze[i][r][c];
                    cout << endl;
                  }
                  cout << endl;
                }*/
                queue<tuple<int,int,int,int>> q;
                q.push(make_tuple(7,rs,cs,0));
                int ret=-1;
                while(!q.empty()) {
                  int i = get<0>(q.front());
                  int r = get<1>(q.front());
                  int c = get<2>(q.front());
                  int dist = get<3>(q.front());
                  q.pop();
                  //cout << i << " " << r << " " << c << " " << dist << endl;
                  if(seen[i][r][c]) continue;
                  seen[i][r][c]=1;
                  if(r==rg && c==cg) { ret=dist; break; }
                  fu(d,0,4) {
                    int i2=(i+1)%4;
                    int r2=r+dr[d];
                    int c2=c+dc[d];
                    //cout << maze[i2][r2][c2] << endl;
                    if(maze[i2][r2][c2]!='.') continue;
                    //cout << maze[i2][r2][c2] << endl;
                    if(seen[i2][r2][c2]) continue;
                    //cout << q.size() << endl;
                    q.push(make_tuple(i2,r2,c2,dist+1));
                    //cout << q.size() << endl;
                  }
                }
		cout << "Case #" << ts << ": ";
                if(ret==-1) cout << "impossible";
                else cout << ret;
		cout << endl;
	}
}

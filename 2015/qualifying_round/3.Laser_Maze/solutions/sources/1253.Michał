import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;


public class LaserMaze {

	private static class Maze {
		public String[] lines;
		public int startX;
		public int startY;
		public int endX;
		public int endY;
		public Floor[] floors = new Floor[4];
		
		public Maze(String[] lines) {
			this.lines = lines;
			for (int i=0; i<4; i++) {
				generateFloor(i);
				rotate();
			}
		}
		
		public void rotate() {
			for (int i=0; i<lines.length; i++) {
				lines[i] = rotateLine(lines[i]);
			}
		}
		
		private String rotateLine(String line) {
			line = line.replace("^", "!");
			line = line.replace("<", "^");
			line = line.replace("v", "<");
			line = line.replace(">", "v");
			line = line.replace("!", ">");
			return line;
		}
		
		private void generateFloor(int index) {
			floors[index] = new Floor(lines.length, lines[0].length());
			for (int y = 0; y < lines.length; y++) {
				for (int x = 0; x < lines[0].length(); x++) {
					String c = lines[y].substring(x, x+1);
					if ("S".equals(c)) {
						this.startX = x;
						this.startY = y;
					} else if ("G".equals(c)) {
						this.endX = x;
						this.endY = y;
					} else if ("^".equals(c)) {
						floors[index].tiles[y][x] = -1;
						for (int j=y-1; j>=0 && !isBlocking(x, j); j--) {
							floors[index].tiles[j][x] = -1;
						}
					} else if ("v".equals(c)) {
						floors[index].tiles[y][x] = -1;
						for (int j=y+1; j<lines.length && !isBlocking(x, j); j++) {
							floors[index].tiles[j][x] = -1;
						}
					} else if ("<".equals(c)) {
						floors[index].tiles[y][x] = -1;
						for (int i=x-1; i>=0 && !isBlocking(i, y); i--) {
							floors[index].tiles[y][i] = -1;
						}
					} else if (">".equals(c)) {
						floors[index].tiles[y][x] = -1;
						for (int i=x+1; i<lines[0].length() && !isBlocking(i, y); i++) {
							floors[index].tiles[y][i] = -1;
						}
					} else if ("#".equals(c)) {
						floors[index].tiles[y][x] = -1;
					}
				}
			}
		}
		
		private boolean isBlocking(int x, int y) {
			String c = this.lines[y].substring(x, x+1);
			return c.matches("[v<^>#]{1}");				
		}
		
		private void printCurrentMaze() {
			System.out.println("<--");
			for (int i = 0; i < lines.length; i++) {
				System.out.println(lines[i]);
			}
			System.out.println("---");
		}
		
		public void printFloor(int index) {
			for (int j=0; j<floors[index].tiles.length; j++) {
				for (int i=0; i<floors[index].tiles[0].length; i++) {
					if(floors[index].tiles[j][i] == 0) {
						System.out.print(".");
					} else {
						System.out.print("#");
					}
				}
				System.out.println();
			}
			System.out.println("-->");
		}
		
		public void printMaze() {
			for (int i=0; i<4; i++) {
				printCurrentMaze();
				printFloor(i);
				rotate();
			}
		}
		
	}
	
	private static class Floor {
		public Floor(int y, int x) {
			tiles = new int[y][x];
		}
		public int[][] tiles;
		
	}
	
	private static class State {
		public State(int x, int y, int step, int floor) {
			super();
			this.x = x;
			this.y = y;
			this.step = step;
			this.floor = floor;
		}
		public int x;
		public int y;
		public int step;
		public int floor;
	}
	
	public static boolean isWin(Maze maze, State state) {
		return maze.endX == state.x && maze.endY == state.y && isValid(maze, state);
	}
	
	public static boolean isValid(Maze maze, State state) {
		return maze.floors[state.floor].tiles[state.y][state.x] == 0;
	}
	
	public static String solve(Maze maze) {
		List<State> queue = new ArrayList<State>();
		State startState = new State(maze.startX, maze.startY, 0, 0);
		queue.add(startState);
		while (!queue.isEmpty()) {
			State state = queue.remove(0);
			State newState;
			if (state.x > 0) {
				newState = new State(state.x - 1, state.y, state.step + 1, (state.floor + 1) % 4);
				if (isWin(maze, newState)) {
					return String.valueOf(newState.step);
				} else if (isValid(maze, newState)) {
					maze.floors[newState.floor].tiles[newState.y][newState.x] = -1;
					queue.add(newState);
				}
			}
			if (state.x + 1 < maze.lines[0].length()) {
				newState = new State(state.x + 1, state.y, state.step + 1, (state.floor + 1) % 4);
				if (isWin(maze, newState)) {
					return String.valueOf(newState.step);
				} else if (isValid(maze, newState)) {
					maze.floors[newState.floor].tiles[newState.y][newState.x] = -1;
					queue.add(newState);
				}
			}
			if (state.y > 0) {
				newState = new State(state.x, state.y - 1, state.step + 1, (state.floor + 1) % 4);
				if (isWin(maze, newState)) {
					return String.valueOf(newState.step);
				} else if (isValid(maze, newState)) {
					maze.floors[newState.floor].tiles[newState.y][newState.x] = -1;
					queue.add(newState);
				}
			}
			if (state.y + 1 < maze.lines.length) {
				newState = new State(state.x, state.y + 1, state.step + 1, (state.floor + 1) % 4);
				if (isWin(maze, newState)) {
					return String.valueOf(newState.step);
				} else if (isValid(maze, newState)) {
					maze.floors[newState.floor].tiles[newState.y][newState.x] = -1;
					queue.add(newState);
				}
			}
		}
		return "impossible";
	}
	
	public static void main(String[] args) throws Exception {
		System.out.println("Starting program..");
		File f = new File("laser_maze.txt");
		FileReader fr = new FileReader(f);
		BufferedReader br = new BufferedReader(fr);
		
		File f2 = new File("laser_maze_output.txt");
		FileWriter fw = new FileWriter(f2);
		
		int tasksCount = Integer.valueOf(br.readLine());
		for (int i = 1; i <= tasksCount; i++) {
			String[] dimensions = br.readLine().split(" ");
			int mazeLinesCount = Integer.valueOf(dimensions[0]);
			String[] mazeLines = new String[mazeLinesCount];
			for (int j=0; j<mazeLinesCount; j++) {
				mazeLines[j] = br.readLine();
			}
			Maze maze = new Maze(mazeLines);
			//maze.printMaze();
			fw.write("Case #" + i + ": " + solve(maze) + "\n");
		}
		
		br.close();
		fw.flush();
		fw.close();
		System.out.println("Finished successfully.");

	}

}

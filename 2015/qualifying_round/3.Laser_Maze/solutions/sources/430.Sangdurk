#include <cstdio>
#include <cstring>

const int lim = 1000000;
char a[105][105], s[4][105][105];
int d[2][105][105];

int dx[] = {-1, 0, 1, 0} ;
int dy[] = {0, 1, 0, -1};
int sx, sy, ex, ey;

void make_table( int n, int m ){

	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			if( a[i][j] == 'S' ) {
				sx = i;
				sy = j;
				a[i][j] = '.';
			}
			if( a[i][j] == 'G' ) {
				ex = i;
				ey = j;
				a[i][j] = '.';
			}
		}
	}
	
	for(int dir = 0; dir < 4; dir ++){

		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if( a[i][j] == '.' ) s[dir][i][j] = '.';
				else s[dir][i][j] = '#';
			}
		}

		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				int cur = -1;
				if( a[i][j] == '^') 
					cur = 0;
				else if( a[i][j] == '>' )
					cur = 1;
				else if( a[i][j] == 'v' )
					cur = 2;
				else if( a[i][j] == '<' )
					cur = 3;

				if( cur != -1 ){
					cur = (cur+dir)%4;					
					int cx = i + dx[cur];
					int cy = j + dy[cur];

					while( 0 <= cx && cx < n && 0 <= cy && cy < m && a[cx][cy] == '.' ){
						s[dir][cx][cy] = '#';
						cx += dx[cur];
						cy += dy[cur];
					}

				}		
					
			}
		}
	}
}

int get( int n, int m ){

	memset( d, 0, sizeof( d ) );

	d[0][sx][sy] = 1;
	bool cur = 0, nxt = 1;
	for(int t=1; t<=lim; t++){
		int dir = t%4;
		bool ok = 0;
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if( d[cur][i][j] ){
					for(int k=0; k<4; k++){
						int cx = i + dx[k];
						int cy = j + dy[k];
						if( 0 <= cx && cx < n  && 0 <= cy && cy < m && s[dir][cx][cy] != '#' ) {
							d[nxt][cx][cy] = 1;
							ok = 1;
						}
					}
				}
				d[cur][i][j] = 0;
			}
		}
		if( !ok ) return -1;
		if( d[nxt][ex][ey] ) return t;
		cur = !cur;
		nxt = !nxt;
	}

	return -1;

}

int main(){
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);

	int T;
	scanf("%d", &T);
	for(int R=1; R<=T; R++){
		int n, m;
		scanf("%d %d", &n, &m);
		for(int i=0; i<n; i++)
			scanf("%s", a[i]);

		make_table( n, m );

		int ans = get( n, m );

		printf("Case #%d: ", R);
		if( ans != -1 ) printf("%d\n", ans);
		else puts("impossible");

		
		

	}

}
def main(in_stream, out_stream):
  t = int(in_stream.readline())
  for tc in range(t):
    m, n = map(lambda x: int(x), in_stream.readline().split())
    maze = []
    for i in range(m):
      maze.append(in_stream.readline())
      if 'S' in maze[-1]:
        q = [(i, maze[-1].find('S'), 0)]
        qi = 0
        check = set()
        check.add((i, maze[-1].find('S'), 0))
    exit = False
    while qi < len(q):
      x, y, t = q[qi]
      qi += 1
      if maze[x][y] == 'G':
        exit = True
        break
      for (dx, dy) in [(-1, 0), (0, 1), (1, 0), (0, -1)]:
        nx = x + dx
        ny = y + dy
        nt = t + 1
        if nx >= 0 and nx < m and ny >= 0 and ny < n and maze[nx][ny] in '.SG' and (nx, ny, nt % 4) not in check:
          hit = False
          for (lt, lx, ly) in [('v', -1, 0), ('<', 0, 1), ('^', 1, 0), ('>', 0, -1)]:
            tx = nx
            ty = ny
            while True:
              tx += lx
              ty += ly
              if tx < 0 or tx >= m or ty < 0 or ty >= n or maze[tx][ty] == '#':
                break
              if maze[tx][ty] in '<^>v':
                if '<^>v'[('<^>v'.find(maze[tx][ty]) + nt) % 4] == lt:
                  hit = True
                break
            if hit:
              break
          if not hit:
            q.append((nx, ny, nt))
            check.add((nx, ny, nt % 4))
    out_stream.write("Case #%d: %s\n" % (tc + 1, "impossible" if not exit else str(t)))


if __name__ == '__main__':
  in_stream, out_stream = open('Downloads/laser_maze.txt', 'r'), open('laser_maze.out.txt', 'w')
  main(in_stream, out_stream)

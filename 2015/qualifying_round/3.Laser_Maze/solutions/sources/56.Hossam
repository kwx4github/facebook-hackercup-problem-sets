#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define sz(v) (int)v.size()
#define all(v) v.begin(), v.end()

int n, m;
vector<string> cells[4];
map<char, char> nxt;
bool vis[4][101][101];

int dx[] = { 0, 0, -1, 1 };
int dy[] = { 1, -1, 0, 0 };

void prepare() {
	nxt['^'] = '>';
	nxt['>'] = 'v';
	nxt['v'] = '<';
	nxt['<'] = '^';
}

void turn(int cur) {
	cells[cur] = cells[cur - 1];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (nxt.count(cells[cur][i][j]))
				cells[cur][i][j] = nxt[cells[cur][i][j]];

}

void fill(int cur) {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (nxt.count(cells[cur][i][j])) {
				int t;
				if (cells[cur][i][j] == '<') {
					t = j;
					while (--t && t >= 0 && (cells[cur][i][t] == '.'
							|| cells[cur][i][t] == '!' || cells[cur][i][t] == 'S' || cells[cur][i][t] == 'G'))
						cells[cur][i][t] = '!';
				}
				if (cells[cur][i][j] == '>') {
					t = j;
					while (++t && t < m && (cells[cur][i][t] == '.'
							|| cells[cur][i][t] == '!' || cells[cur][i][t] == 'S' || cells[cur][i][t] == 'G'))
						cells[cur][i][t] = '!';
				}
				if (cells[cur][i][j] == '^') {
					t = i;
					while (--t && t >= 0 && (cells[cur][t][j] == '.'
							|| cells[cur][t][j] == '!' || cells[cur][t][j] == 'S' || cells[cur][t][j] == 'G'))
						cells[cur][t][j] = '!';
				}
				if (cells[cur][i][j] == 'v') {
					t = i;
					while (++t && t < n && (cells[cur][t][j] == '.'
							|| cells[cur][t][j] == '!' || cells[cur][t][j] == 'S' || cells[cur][t][j] == 'G'))
						cells[cur][t][j] = '!';
				}
			}
}

struct node {
	int r, c, cnt, idx;
	node() {
		r = -1, c = -1, cnt = 0, idx = 0;
	}
	node(int _r, int _c, int _cnt, int _idx) :
			r(_r), c(_c), cnt(_cnt), idx(_idx) {

	}
};

bool valid(int i, int j) {
	return (i >= 0 && i < n && j >= 0 && j < m);
}

node st, ed;

int bfs() {
	if (st.r == -1 || ed.r == -1) return -1;
	queue<node> q;
	q.push(st);
	vis[0][st.r][st.c] = 1;
	while (sz(q)) {
		node cur = q.front();
		q.pop();
		if (cur.r == ed.r && cur.c == ed.c) return cur.cnt;
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.r;
			int ny = dy[i] + cur.c;
			if (valid(nx, ny) && !vis[(cur.idx + 1) % 4][nx][ny] && (cells[(cur.idx + 1) % 4][nx][ny] == '.'
					|| cells[(cur.idx + 1) % 4][nx][ny] == 'G' || cells[(cur.idx + 1) % 4][nx][ny] == 'S')) {
				vis[(cur.idx + 1) % 4][nx][ny] = 1;
				q.push(node(nx, ny, cur.cnt + 1, (cur.idx + 1) % 4));
			}
		}
	}
	return -1;
}

int main() {
	freopen("1", "r", stdin);
	freopen("2", "w", stdout);

	prepare();

	int tc, t = 0;
	cin >> tc;
	while (tc--) {
		memset(vis, 0, sizeof vis);
		cin >> n >> m;
		for (int i = 0; i < 4; i++)
			cells[i].clear();
		cells[0].resize(n);
		for (int i = 0; i < n; i++)
			cin >> cells[0][i];

		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (cells[0][i][j] == 'S')
					st = node(i, j, 0, 0);
				else if (cells[0][i][j] == 'G') ed = node(i, j, 0, 0);

		for (int i = 1; i < 4; i++)
			turn(i);
		for (int i = 0; i < 4; i++)
			fill(i);
		int ans = bfs();
		if (ans == -1)
			cout << "Case #" << ++t << ": " << "impossible" << endl;
		else cout << "Case #" << ++t << ": " << ans << endl;
	}
}

#include <iostream>
#include <cstdio>
#include <queue>
#include <algorithm>
#define MP(a, b) make_pair(a, b)
#define PB(a) push_back(a)

using namespace std;

typedef pair<int, int> pii;
const int LEN = 101;
int n, m;
int xx[] = {-1, 0, 1, 0};
int yy[] = { 0, 1, 0,-1};
char mp[LEN][LEN], Map[4][LEN][LEN];
pii st, ed;

bool J(int a, int b) {
	return a >= 0 && a < n && b >= 0 && b < m;
}

void init() {
	for(int i=0; i<n; i++)
		for(int j=0; j<m; j++) {
			if(mp[i][j] == 'S') {
				mp[i][j] = '.';
				st = MP(i, j);
			}else if(mp[i][j] == 'G') {
				mp[i][j] = '.';
				ed = MP(i, j);
			}
		}
}

void getmp(int st) {
	for(int i=0; i<n; i++) 
		for(int j=0; j<m; j++) {
			Map[st][i][j] = mp[i][j];
		}
	for(int i=0; i<n; i++)
		for(int j=0; j<m; j++) {
			int op;
			if(Map[st][i][j] == '^') op = 0;
			else if(Map[st][i][j] == '>') op = 1;
			else if(Map[st][i][j] == 'v') op = 2;
			else if(Map[st][i][j] == '<') op = 3;
			else continue;
			Map[st][i][j] = '#';
			op += st; op %= 4;
			int tx = i, ty = j;
			while(1) {
				tx += xx[op]; ty += yy[op];
				if(mp[tx][ty] == '#' || mp[tx][ty] == '>'
				|| mp[tx][ty] == '<' || mp[tx][ty] == 'v'
				|| mp[tx][ty] == '^' || !J(tx, ty)) break;
				Map[st][tx][ty] = '#';
			}
		}
}

void debug(int st) {
	for(int i=0; i<n; i++) {
		for(int j=0; j<m; j++) {
			cout << Map[st][i][j];
		}
		cout << endl;
	}
	cout << endl;
}


struct P {
	int x, y, st;
};

P mmp(pii a, int b) {
	P ret; ret.x = a.first;
	ret.y = a.second; ret.st = b;
	return ret;
}

int BFS() {
	queue<P> q;
	int vis[4][LEN][LEN] = {0};
	q.push(mmp(st, 0));
	vis[0][st.first][st.second] = 1;
	while(!q.empty()) {
		P nvex = q.front(); q.pop();
		int nx = nvex.x, ny = nvex.y;
		if(ed == MP(nx, ny)) return nvex.st;
		for(int i=0; i<4; i++) {
			int X = nx + xx[i];
			int Y = ny + yy[i];
			int nst = nvex.st + 1;
			if(J(X, Y) && !vis[nst%4][X][Y] && Map[nst%4][X][Y] != '#') {
				vis[nst%4][X][Y] = 1;
				q.push(mmp(MP(X, Y), nst));
			}
		}
	}
	return -1;
}

int main() {
	freopen("in.txt", "r", stdin);
	freopen("OC.txt", "w", stdout);

	int T, kase = 1;
	scanf("%d", &T);
	while(T--) {
		scanf("%d%d", &n, &m);
		for(int i=0; i<n; i++) scanf("%s", mp[i]);
		init();
		for(int i=0; i<4; i++) {
			getmp(i);
		}
		int ans = BFS();
		printf("Case #%d: ", kase ++);
		if(ans == -1) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>

using namespace std;

#define forn(i,n) for(int i=0;i<(int)(n);i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n);i++)
#define dforn(i,n) for(int i=(n)-1;i>=0;i--)

#define forall(it,c) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define dforall(it,c) for(typeof((c).rbegin()) it = (c).rbegin(); it != (c).rend(); it++)

#define esta(x,c) ((c).find(x) != (c).end())

#define all(c) (c).begin(), (c).end()

#define DBG(x) cerr << #x << " = " << (x) << endl
#define LOG(x) cerr << #x << endl
#define RAYA cerr << "=========================================" << endl


typedef long long tint;
typedef pair<int,int> pint;

const int INF = 1000000000;

const int MAXN = 128;

const int dx[4] = {-1,0,1,0};
const int dy[4] = {0,1,0,-1};

int visited[MAXN][MAXN][4];
bool forbidden[MAXN][MAXN][4];
char maze[MAXN][MAXN];
char turret[MAXN][MAXN];

int main()
{    
    int TT; cin >> TT;
    forn(tt,TT)
    {
        int m,n; cin >> m >> n;
        memset(turret,-1,sizeof(turret));
        int sx = -1,sy = -1, finalX = -1, finalY = -1;
        forn(i,m)
        forn(j,n)
        {
            cin >> maze[i][j];
            if (maze[i][j] == 'S')
            {
                maze[i][j] = 1;
                sx = i;
                sy = j;
            }
            else if (maze[i][j] == 'G')
            {
                maze[i][j] = 1;
                finalX = i;
                finalY = j;
            }
            else if (maze[i][j] == '^')
            {
                maze[i][j] = 0;
                turret[i][j] = 0;
            }
            else if (maze[i][j] == '>')
            {
                maze[i][j] = 0;
                turret[i][j] = 1;
            }
            else if (maze[i][j] == 'v')
            {
                maze[i][j] = 0;
                turret[i][j] = 2;
            }
            else if (maze[i][j] == '<')
            {
                maze[i][j] = 0;
                turret[i][j] = 3;
            }
            else if (maze[i][j] == '.')
            {
                maze[i][j] = 1;
            }
            else if (maze[i][j] == '#')
            {
                maze[i][j] = 0;
            }
            else
            {
                assert(false);
            }
        }
        assert(sx != -1);
        assert(sy != -1);
        assert(finalX != -1);
        assert(finalY != -1);
        memset(forbidden,0,sizeof(forbidden));
        forn(x,m)
        forn(y,n)
        if (turret[x][y] >= 0)
        {
            forn(dir, 4)
            {
                int cx = x + dx[dir];
                int cy = y + dy[dir];
                while (0 <= cx && cx < m && 0 <= cy && cy < n && maze[cx][cy])
                {
                    forbidden[cx][cy][(4 + dir - turret[x][y]) % 4] = true;
                    cx += dx[dir];
                    cy += dy[dir];
                }
            }
        }
        forn(i,m)
        forn(j,n)
        forn(k,4)
            visited[i][j][k] = INF;
        queue<int> q;
        q.push(sx);
        q.push(sy);
        q.push(0);
        visited[sx][sy][0] = 0;
        while (!q.empty())
        {
            const int x = q.front(); q.pop();
            const int y = q.front(); q.pop();
            const int k = q.front(); q.pop();
            const int nextDist = visited[x][y][k] + 1;
            const int nextK = (k+1)%4;
            forn(dir, 4)
            {
                const int nx = x + dx[dir];
                const int ny = y + dy[dir];
                if (0 <= nx && nx < m && 0 <= ny && ny < n && maze[nx][ny] && !forbidden[nx][ny][nextK] && visited[nx][ny][nextK] == INF)
                {
                    visited[nx][ny][nextK] = nextDist;
                    q.push(nx);
                    q.push(ny);
                    q.push(nextK);
                }
            }
        }
        int res = INF;
        forn(dir,4)
            res = min(res, visited[finalX][finalY][dir]);
        cout << "Case #" << tt+1 << ": ";
        if (res == INF)
            cout << "impossible" << endl;
        else
            cout << res << endl;
    }
    return 0;
}


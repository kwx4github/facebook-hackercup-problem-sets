#include "bits/stdc++.h"

using namespace std;
int T, N, M;
char grid[101][101];
int calc[101][101][4];
int vis[101][101][4];

map<char, string> p = { { '>', ">v<^" }, { '<', "<^>v" }, { 'v', "v<^>" }, {
		'^', "^>v<" } };
bool left(int i, int j, int c) {
	while (j >= 0) {
		if (grid[i][j] == '#')
			return 1;

		if (grid[i][j] == 'G')
			goto hell;

		if (grid[i][j] != '.') {
			if (p[grid[i][j]][c] == '>')
				return 0;
			return 1;
		}
		hell: ;
		j--;
	}
	return 1;
}

bool right(int i, int j, int c) {
	while (j < M) {
		if (grid[i][j] == '#')
			return 1;

		if (grid[i][j] == 'G')
			goto hell;

		if (grid[i][j] != '.') {
			if (p[grid[i][j]][c] == '<')
				return 0;
			return 1;
		}
		hell: ;
		j++;
	}
	return 1;
}

bool up(int i, int j, int c) {
	while (i >= 0) {
		if (grid[i][j] == '#')
			return 1;

		if (grid[i][j] == 'G')
			goto hell;

		if (grid[i][j] != '.') {
			if (p[grid[i][j]][c] == 'v')
				return 0;
			return 1;
		}
		hell: ;
		i--;
	}
	return 1;
}

bool down(int i, int j, int c) {
	while (i < N) {
		if (grid[i][j] == '#')
			return 1;

		if (grid[i][j] == 'G')
			goto hell;

		if (grid[i][j] != '.') {
			if (p[grid[i][j]][c] == '^')
				return 0;
			return 1;
		}
		hell: ;
		i++;
	}
	return 1;
}
bool safe(int i, int j, int c) {
	return left(i, j, c) && right(i, j, c) && up(i, j, c) && down(i, j, c);
}

bool valid(int i, int j) {
	return i >= 0 && i < N && j >= 0 && j < M;
}

int mnpath(int i, int j, int c) {
	if (!valid(i, j))
		return 0;

	int &ret = calc[i][j][c];
	if (ret != -1)
		return ret;

	if (grid[i][j] == 'G')
		return 1;
	if (!safe(i, j, c % 4))
		return ret = 0;

	if (grid[i][j] == 'G')
		return 1;

	if (vis[i][j][c])
		return 0;
	vis[i][j][c] = 1;

	int mn = (1 << 30);
	int path1 = mnpath(i, j + 1, (c + 1) % 4);
	int path2 = mnpath(i, j - 1, (c + 1) % 4);
	int path3 = mnpath(i + 1, j, (c + 1) % 4);
	int path4 = mnpath(i - 1, j, (c + 1) % 4);

	if (path1)
		mn = min(mn, path1);
	if (path2)
		mn = min(mn, path2);
	if (path3)
		mn = min(mn, path3);
	if (path4)
		mn = min(mn, path4);

	if (mn != (1 << 30))
		return ret = mn + 1;
	return ret = 0;
}
int main() {
	std::ios::sync_with_stdio(false);
	freopen("laser_maze.txt", "r", stdin); // for reading
	freopen("lazer.out", "w", stdout); //for writing

	cin >> T;

	for (int t = 1; t <= T; t++) {
		cin >> N >> M;

		memset(calc, -1, sizeof(calc));
		memset(vis, 0, sizeof(vis));
		int starti, startj;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++) {
				cin >> grid[i][j];
				if (grid[i][j] != '.' && grid[i][j] != 'S'
						&& grid[i][j] != 'G') {
					calc[i][j][0] = 0;
					calc[i][j][1] = 0;
					calc[i][j][2] = 0;
					calc[i][j][3] = 0;
				}
				if (grid[i][j] == 'S') {
					starti = i;
					startj = j;
					grid[i][j] = '.';
				}
			}

		int path1 = mnpath(starti, startj + 1, 1);
		int path2 = mnpath(starti, startj - 1, 1);
		int path3 = mnpath(starti + 1, startj, 1);
		int path4 = mnpath(starti - 1, startj, 1);
		int mn = (1 << 30);
		if (path1)
			mn = min(mn, path1);
		if (path2)
			mn = min(mn, path2);
		if (path3)
			mn = min(mn, path3);
		if (path4)
			mn = min(mn, path4);

		cout << "Case #" << t << ": ";
		if (mn != (1 << 30))
			cout << mn << endl;
		else
			cout << "impossible" << endl;

	}
	return 0;
}

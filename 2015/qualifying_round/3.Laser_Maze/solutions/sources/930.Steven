#include <cstdio>
#include <queue>


const int MAXN = 111;

char grid[MAXN][MAXN];

int N, M, T;
bool good(int x, int y) {
  if (x < 0 || y < 0 || x >= N || y >= M) return false;
  if (grid[x][y] == '#' || grid[x][y] == '^' || grid[x][y] == 'v' || grid[x][y] == '>' || grid[x][y] == '<') return false;
  return true;
}

int mx[] = {-1, 0, 1, 0};
int my[] = {0, 1, 0, -1};

bool vis[MAXN][MAXN][4];
int XQ[MAXN * MAXN], YQ[MAXN * MAXN], DQ[MAXN * MAXN];

int ql = 0, qr = 0;

void push(int x, int y, int d, bool supper = false) {
  if (!good(x, y)) return;
  bool &b = vis[x][y][d % 4];
  if (b && !supper) return;
  b = true;

  XQ[qr] = x, YQ[qr] = y, DQ[qr] = d;
  ++qr;
}

int bfs(int sx, int sy) {
  push(sx, sy, 0, true);
  while (ql < qr) {
    int x = XQ[ql], y = YQ[ql], d = DQ[ql];
    ++ql;

    if (grid[x][y] == 'G') {
      return d;
    }

    for(int i = 0; i < 4; ++i) {
      push(x + mx[i], y + my[i], d + 1);
    }
  }

  return -1;
}

void go(int x, int y, int dir) {
  for(int i = 0; i < 4; ++i) {
    int d = (i + dir) % 4;
    int cx = x, cy = y;
    do {
      vis[cx][cy][i % 4] = 1;
      cx += mx[d];
      cy += my[d];
    } while (good(cx, cy));
  }
}

int main() {
  scanf("%d", &T);
  for(int t = 1; t <= T; ++t) {
    scanf("%d %d", &N, &M);
    for(int i = 0; i < N; ++i) {
      scanf("%s", grid[i]);
    }
    memset(vis, false, sizeof(vis));
    ql = qr = 0;

    int sx, sy;
    for(int i = 0; i < N; ++i) {
      for(int j = 0; j < M; ++j) {
        char c = grid[i][j];
        if (c == 'S') {
          sx = i;
          sy = j;
        } else if (c == '^') {
          go(i, j, 0);
        } else if (c == '>') {
          go(i, j, 1);
        } else if (c == 'v') {
          go(i, j, 2);
        } else if (c == '<') {
          go(i, j, 3);
        }
      }
    }

    int ans = bfs(sx, sy);
    printf("Case #%d: ", t);
    if (ans == -1) {
      printf("impossible\n");
    } else {
      printf("%d\n", ans);
    }
  }
}


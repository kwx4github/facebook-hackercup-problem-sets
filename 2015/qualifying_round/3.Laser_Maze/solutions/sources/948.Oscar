#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int> ii;
int main(){
	int t, n, m, a, b, si, sj, gi, gj;
	cin>>t;
	char M[110][110][5];
	int L[110][110][5];
	for(int lol=1; lol<=t; lol++){
		cin>>n>>m;
		vector<pair<int,int> > vl;
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				cin>>M[i][j][0];
				M[i][j][1] = M[i][j][0];
				M[i][j][2] = M[i][j][0];
				M[i][j][3] = M[i][j][0];
				if(M[i][j][0]=='<' or  M[i][j][0]=='^' or M[i][j][0]=='>' or M[i][j][0]=='v'){
					vl.push_back(ii(i,j));
				}
				if(M[i][j][0]=='S'){
					si=i;
					sj=j;
				}
				if(M[i][j][0]=='G'){
					gi=i;
					gj=j;
				}
			}
		}
		for(int i=0; i<vl.size(); i++){
			a = vl[i].first; b = vl[i].second;
			if(M[a][b][0]=='<'){
				//first
				for(int j=b-1; j>=0 ; j--){
					if(M[a][j][0]=='#' or M[a][j][0]=='<' or  M[a][j][0]=='^' or M[a][j][0]=='>' or M[a][j][0]=='v')
						break;
					M[a][j][0]='-';
				}
				//second
				M[a][b][1]='^';
				for(int j=a-1; j>=0; j--){
					if(M[j][b][1]=='#' or M[j][b][1]=='<' or  M[j][b][1]=='^' or M[j][b][1]=='>' or M[j][b][1]=='v')
						break;
					M[j][b][1]='-';
				}
				//third
				M[a][b][2]='>';
				for(int j=b+1; j<m; j++){
					if(M[a][j][2]=='#' or M[a][j][2]=='<' or  M[a][j][2]=='^' or M[a][j][2]=='>' or M[a][j][2]=='v')
						break;
					M[a][j][2]='-';
				}
				//fourth
				M[a][b][3]='v';
				for(int j=a+1; j<n; j++){
					if(M[j][b][3]=='#' or M[j][b][3]=='<' or  M[j][b][3]=='^' or M[j][b][3]=='>' or M[j][b][3]=='v')
						break;
					M[j][b][3]='-';
				}
			}
			////
			if(M[a][b][0]=='^'){
				//first
				for(int j=a-1; j>=0; j--){
					if(M[j][b][0]=='#' or M[j][b][0]=='<' or  M[j][b][0]=='^' or M[j][b][0]=='>' or M[j][b][0]=='v')
						break;
					M[j][b][0]='-';
				}
				//second
				M[a][b][1]='>';
				for(int j=b+1; j<m; j++){
					if(M[a][j][1]=='#' or M[a][j][1]=='<' or  M[a][j][1]=='^' or M[a][j][1]=='>' or M[a][j][1]=='v')
						break;
					M[a][j][1]='-';
				}
				//third
				M[a][b][2]='v';
				for(int j=a+1; j<n; j++){
					if(M[j][b][2]=='#' or M[j][b][2]=='<' or  M[j][b][2]=='^' or M[j][b][2]=='>' or M[j][b][2]=='v')
						break;
					M[j][b][2]='-';
				}
				//fourth
				M[a][b][3]='<';
				for(int j=b-1; j>=0 ; j--){
					if(M[a][j][3]=='#' or M[a][j][3]=='<' or  M[a][j][3]=='^' or M[a][j][3]=='>' or M[a][j][3]=='v')
						break;
					M[a][j][3]='-';
				}
			}
			////
			if(M[a][b][0]=='>'){
				//first
				for(int j=b+1; j<m; j++){
					if(M[a][j][0]=='#' or M[a][j][0]=='<' or  M[a][j][0]=='^' or M[a][j][0]=='>' or M[a][j][0]=='v')
						break;
					M[a][j][0]='-';
				}
				//second
				M[a][b][1]='v';
				for(int j=a+1; j<n; j++){
					if(M[j][b][1]=='#' or M[j][b][1]=='<' or  M[j][b][1]=='^' or M[j][b][1]=='>' or M[j][b][1]=='v')
						break;
					M[j][b][1]='-';
				}
				//third
				M[a][b][2]='<';
				for(int j=b-1; j>=0 ; j--){
					if(M[a][j][2]=='#' or M[a][j][2]=='<' or  M[a][j][2]=='^' or M[a][j][2]=='>' or M[a][j][2]=='v')
						break;
					M[a][j][2]='-';
				}
				//fourth
				M[a][b][3]='^';
				for(int j=a-1; j>=0; j--){
					if(M[j][b][3]=='#' or M[j][b][3]=='<' or  M[j][b][3]=='^' or M[j][b][3]=='>' or M[j][b][3]=='v')
						break;
					M[j][b][3]='-';
				}
			}
			////
			if(M[a][b][0]=='v'){
				//first
				for(int j=a+1; j<n; j++){
					if(M[j][b][0]=='#' or M[j][b][0]=='<' or  M[j][b][0]=='^' or M[j][b][0]=='>' or M[j][b][0]=='v')
						break;
					M[j][b][0]='-';
				}
				//second
				M[a][b][1]='<';
				for(int j=b-1; j>=0 ; j--){
					if(M[a][j][1]=='#' or M[a][j][1]=='<' or  M[a][j][1]=='^' or M[a][j][1]=='>' or M[a][j][1]=='v')
						break;
					M[a][j][1]='-';
				}
				//third
				M[a][b][2]='^';
				for(int j=a-1; j>=0; j--){
					if(M[j][b][2]=='#' or M[j][b][2]=='<' or  M[j][b][2]=='^' or M[j][b][2]=='>' or M[j][b][2]=='v')
						break;
					M[j][b][2]='-';
				}
				//fourth
				M[a][b][3]='>';
				for(int j=b+1; j<m; j++){
					if(M[a][j][3]=='#' or M[a][j][3]=='<' or  M[a][j][3]=='^' or M[a][j][3]=='>' or M[a][j][3]=='v')
						break;
					M[a][j][3]='-';
				}
			}
		}
		/*cout<<"Case #"<<lol<<endl;
		for(int i=0; i<4; i++){
			for(int j=0; j<n; j++){
				for(int k=0; k<m; k++){
					cout<<M[j][k][i];
				}cout<<endl;
			}cout<<endl;
		}cout<<endl;*/
		//graph
		memset(L, -1, sizeof L);
	    L[si][sj][0]=0; //distance from source s to s is 0
	    queue <pair<int,pair<int,int> > > q;
	    q.push(make_pair(0,ii(si,sj)) );
	    int X[] = {-1, 0, 1, 0};
	    int Y[] = {0, 1, 0, -1};
	    int l;
	    while(!q.empty()){
	        pair<int,pair<int,int> > u = q.front();
	        q.pop();
	        l = (u.first+1)%4;
	        for(int i=0 ; i<4 ; i++){
	        	int x = X[i]+u.second.first;
	        	int y = Y[i]+u.second.second;
	        	if(x>=0 and x<n and y>=0 and y<m){
	        		if(L[x][y][l]==-1 and (M[x][y][l]=='.' or M[x][y][l]=='S' or M[x][y][l]=='G') ){
	        			L[x][y][l] = L[u.second.first][u.second.second][u.first]+1;
	        			q.push(make_pair(l, ii(x,y) ));
	        		}
	        	}
	        }
	    }
	    int mn=1<<30;
	    //cout<<L[gi][gj][0]<<L[gi][gj][1]<<L[gi][gj][3]<<L[gi][gj][4]<<endl;
	    if(L[gi][gj][0]!=-1)
	    	mn = min(L[gi][gj][0], mn);
	    if(L[gi][gj][1]!=-1)
	    	mn = min(L[gi][gj][1], mn);
	    if(L[gi][gj][2]!=-1)
	    	mn = min(L[gi][gj][2], mn);
	    if(L[gi][gj][3]!=-1)
	    	mn = min(L[gi][gj][3], mn);
	    if(mn==(1<<30)){
	    	cout<<"Case #"<<lol<<": impossible\n";
	    }else{
	    	cout<<"Case #"<<lol<<": "<<mn<<"\n";
	    }
	}
	return 0;
}
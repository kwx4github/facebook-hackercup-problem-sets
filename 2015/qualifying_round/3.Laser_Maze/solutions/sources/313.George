import math
import sys
import fractions
from collections import deque

sys.setrecursionlimit(2 ** 20)

input = open('date.in', 'r')
output = open('date.out', 'w')

di = [ 0, -1, 0, 1 ]
dj = [ -1, 0, 1, 0 ]

INF = 1000000000
WALL = 4
EMPTY = 5
global N, M, A, si, sj, ti, tj

def solve():
    safe = [ [ [ True for k in range(4) ] for j in range(M) ] for i in range(N) ]
    for k in range(4):
        for i in range(N):
            for j in range(M):
                if A[i][j] < 4:
                    nk = (A[i][j] + k) % 4
                    pi = i + di[nk]
                    pj = j + dj[nk]
                    while pi >= 0 and pi < N and pj >= 0 and pj < M and A[pi][pj] == EMPTY:
                        safe[pi][pj][k] = False
                        pi += di[nk]
                        pj += dj[nk]

    v = [ [ [ False for k in range(4) ] for j in range(M) ] for i in range(N) ]
    D = [ [ [ INF for k in range(4) ] for j in range(M) ] for i in range(N) ]
    Q = deque([ (si, sj, 0) ])
    D[si][sj][0] = 0
    v[si][sj][0] = True

    while len(Q) > 0:
        top = Q.popleft()
        pi = top[0]
        pj = top[1]
        k = top[2]
        nk = (k + 1) % 4

        for d in range(4):
            ni = pi + di[d]
            nj = pj + dj[d]
            if ni >= 0 and ni < N and nj >= 0 and nj < M and A[ni][nj] == EMPTY and safe[ni][nj][nk] and not v[ni][nj][nk]:
                v[ni][nj][nk] = True
                D[ni][nj][nk] = D[pi][pj][k] + 1

                if ni == ti and nj == tj:
                    return D[ni][nj][nk]

                Q.append((ni, nj, nk))

    return -1


T = int(input.readline())
for t in range(T):
    line = input.readline().strip().split(' ')
    N = int(line[0])
    M = int(line[1])

    si = -1
    sj = -1
    ti = -1
    tj = -1
    A = [ [ 0 for j in range(M) ] for i in range(N) ]
    for i in range(N):
        line = input.readline().strip()
        for j in range(M):
            if line[j] == '.':
                A[i][j] = EMPTY
            elif line[j] == 'S':
                A[i][j] = EMPTY
                si = i
                sj = j
            elif line[j] == 'G':
                A[i][j] = EMPTY
                ti = i
                tj = j
            elif line[j] == '#':
                A[i][j] = WALL
            else:
                A[i][j] = '<^>v'.index(line[j])

    ans = solve()

    output.write('Case #{}: '.format(t + 1))
    if ans == -1:
        output.write('impossible\n')
    else:
        output.write('{}\n'.format(ans))
    print t

input.close()
output.close()
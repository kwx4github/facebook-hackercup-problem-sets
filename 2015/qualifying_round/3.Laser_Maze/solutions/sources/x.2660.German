#include<stdio.h>
#include<string>
#include<stdlib.h>
#include<string.h>
#include<algorithm>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<iostream>
using namespace std;
int n,m;
int inf=0x3f3f3f3f;
char mapa[101][101];
int matriz[4][101][101];
bool valido[4][101][101];
int indexa[300];
char rindexa[4];
int movx[]={0,-1,0,1};
int movy[]={-1,0,1,0};
int inix,iniy,finx,finy;


class nodo{
	public:
	int x,y,m;
	
	nodo(){}
	
	nodo(int a,int b,int c){
		m=a;
		x=b;
		y=c;
	}

};


int bfs(){
	memset(matriz,inf,sizeof(matriz));
	queue<nodo> cola;
	matriz[0][inix][iniy]=0;
	cola.push(nodo(0,inix,iniy));
	while(!cola.empty()){
		nodo actual=cola.front();
		cola.pop();
		if(actual.x==finx && actual.y==finy){
			return matriz[actual.m][actual.x][actual.y];
		}else{
			
			for(int i=0;i<4;i++){
				int aux=actual.x+movx[i];
				int auy=actual.y+movy[i];
				int aum=(actual.m+1)%4;
				if(aux>=0 && aux<n && auy>=0 && auy<m && mapa[aux][auy]=='.' && valido[aum][aux][auy]){
					if(matriz[actual.m][actual.x][actual.y]+1<matriz[aum][aux][auy]){
						matriz[aum][aux][auy]=matriz[actual.m][actual.x][actual.y]+1;
						cola.push(nodo(aum,aux,auy));
					}
				}
			}
		
		}
	}
	return -1;
	
}






int main(){
	memset(indexa,-1,sizeof(indexa));
	indexa['<']=0;
	indexa['^']=1;
	indexa['>']=2;
	indexa['v']=3;
	int t;
	scanf("%d",&t);
	for(int c=0;c<t;c++){
		scanf("%d %d",&n,&m);
		for(int i=0;i<n;i++){
			scanf("%s",mapa[i]);
		}
		memset(valido,true,sizeof(valido));
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				int dir=indexa[mapa[i][j]];
				if(dir!=-1){
					for(int k=0;k<4;k++){
						
						int ndir=(k+dir)%4;
						int l=1;
						int x=i+(movx[ndir]*l),y=j+movy[ndir]*l;
						while(x>=0 && x<n && y>=0 && y<m){
							valido[k][x][y]=false;
							l++;
							x=i+(movx[ndir]*l);
							y=j+movy[ndir]*l;
						}
					}
				}else if(mapa[i][j]=='S'){
					inix=i;
					iniy=j;
					mapa[i][j]='.';
				}else if(mapa[i][j]=='G'){
					finx=i;
					finy=j;
					mapa[i][j]='.';
				}
			}
		}

		int res=bfs();
		if(res==-1) printf("Case #%d: impossible\n",c+1);
		else printf("Case #%d: %d\n",c+1,res);
		
		
	}

}
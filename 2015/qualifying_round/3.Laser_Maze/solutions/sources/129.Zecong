//Template
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

#define N 110
struct point {
	int x, y, t;
	point() {}
	point(int _x, int _y, int _t) {
		x = _x, y = _y, t = _t;
	}
} s, t;
queue<point> q;
int T, Case = 0, n, m, f[N + 1][N + 1][4];
char map[N + 1][N + 1];
bool alive[N + 1][N + 1][4];

inline bool valid(int x, int y) {
	return x >= 1 && x <= n && y >= 1 && y <= m && map[x][y] == '.';
}

#define UP 0
#define RIGHT 1
#define DOWN 2
#define LEFT 3
const int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

int main(int argc, char *argv[]) {
#ifdef KANARI
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	
	cin >> T;
	while (T--) {
		cin >> n >> m;
		for (int i = 1; i <= n; ++i)
			cin >> (map[i] + 1);
		for (int i = 1; i <= n; ++i)
			for (int j = 1; j <= m; ++j) {
				if (map[i][j] == 'S') {
					s = point(i, j, 0);
					map[i][j] = '.';
				} else if (map[i][j] == 'G') {
					t = point(i, j, 0);
					map[i][j] = '.';
				}
				for (int k = 0; k < 4; ++k) {
					f[i][j][k] = INT_MAX;
					alive[i][j][k] = true;
				}
			}
		
		for (int x = 1; x <= n; ++x)
			for (int y = 1; y <= m; ++y) {
				int d = -1;
				if (map[x][y] == 'v') d = DOWN;
				else if (map[x][y] == '<') d = LEFT;
				else if (map[x][y] == '^') d = UP;
				else if (map[x][y] == '>') d = RIGHT;
				if (d == -1) continue;
				for (int t = 0; t < 4; ++t) {
					for (int k = 1; valid(x + dir[d][0] * k, y + dir[d][1] * k); ++k)
						alive[x + dir[d][0] * k][y + dir[d][1] * k][t] = false;
					d = (d + 1) & 3;
				}
			}
		
		f[s.x][s.y][0] = 0;
		q.push(s);
		while (!q.empty()) {
			point cur = q.front();
			q.pop();
			for (int d = 0; d < 4; ++d) {
				int x = cur.x + dir[d][0], y = cur.y + dir[d][1];
				if (!valid(x, y) || !alive[x][y][(cur.t + 1) & 3])
					continue;
				if (f[x][y][(cur.t + 1) & 3] == INT_MAX) {
					f[x][y][(cur.t + 1) & 3] = f[cur.x][cur.y][cur.t] + 1;
					q.push(point(x, y, (cur.t + 1 & 3)));
				}
			}
		}
		
		int ans = INT_MAX;
		for (int i = 0; i < 4; ++i)
			ans = min(ans, f[t.x][t.y][i]);
		cout << "Case #" << ++Case << ": ";
		if (ans == INT_MAX) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}

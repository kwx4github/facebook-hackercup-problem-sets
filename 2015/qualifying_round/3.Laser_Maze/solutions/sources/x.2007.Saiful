#include<bits/stdc++.h>
#define MAX (1<<30)
using namespace std ;

struct data {
    char ch ;
    int i , j ;
    data(char c , int a , int b ) {
        ch = c ;
        i = a ;
        j = b ;
    }
} ;

int DR[] = { 1 , 0 , -1 , 0 } ;
int DC[] = { 0 , 1 , 0 , -1 } ;

int vis[4][100+1][100+1] ;
int dist[4][100+1][100+1] ;
pair<int,int> st , en ;
int M , N ;
char S[4][101][101];
int ans ;
void dfs( int i , int j ,int cost ) {
    int b = cost ;
    if( i == en.first && j == en.second ){
        ans = min( ans , cost  ) ;
    }
    dist[cost%4][i][j] = cost ;
    vis[cost%4][i][j] ++ ;
    for( int k = 0 ; k < 4 ; k++ ) {
        cost = b ;

        int R = i+DR[k] ;
        int C = j+DC[k] ;

        bool f = 0 ;
        if( R>= 0 && C >= 0 && R < M && C < N )
        if( ( S[(cost+1)%4][R][C] == '.') || (S[(cost+1)%4][R][C] == 'G') || (S[(cost+1)%4][R][C] == 'S') )  {
            if( ((cost+1)<dist[(cost+1)%4][R][C]) && vis[(cost+1)%4][R][C] < 10000  )
                dfs( R , C , cost+1 ) ;
        }
    }

}

int main() {

    freopen("laser_maze.txt","r",stdin);
    freopen("1.txt","w",stdout);
    int cases , caseno =1 ;
    scanf("%d",&cases ) ;

    while( cases -- ) {

        scanf("%d%d",&M,&N) ;

        vector<data> V ;

        for( int i = 0 ; i < M ; i++ ) {
            getchar() ;
            for( int j = 0 ; j < N ; j++ ) {
                scanf("%c",&S[0][i][j] ) ;
                S[1][i][j] = S[0][i][j] ;
                S[2][i][j] = S[0][i][j] ;
                S[3][i][j] = S[0][i][j] ;
                if( S[0][i][j] == '<' || S[0][i][j] == '>' || S[0][i][j] == '^' || S[0][i][j] == 'v' ) {
                    V.push_back( data(S[0][i][j] , i , j) ) ;
                } else if( S[0][i][j] == 'S' ) {
                    st.first = i ;
                    st.second = j ;
                } else if( S[0][i][j] == 'G' ) {
                    en.first = i ;
                    en.second = j ;
                }
            }
        }

//        cout << endl << endl; ;
//        for( int i = 0 ; i < 4 ; i++ ) {
//            cout << i << " . --------- > \n" ;
//            for( int k = 0; k < M ; k++ ) {
//                for( int j = 0 ; j < N ; j++ ) {
//                    cout << S[i][k][j] ;
//                }
//                cout << endl ;
//            }
//            cout << endl << endl ;
//        }

        for( int i = 0 ; i < 4 ; i++ ) {
            for( int j = 0 ; j < V.size() ; j++ ) {
                int r = V[j].i ;
                int c = V[j].j ;
                if( V[j].ch == '<' ) {
                    for( int k = c ; k>= 0 ; k-- ) {
                        if( S[i][r][k] == '#' ) break ;
                        else S[i][r][k] = '#' ;
                    }
                    V[j].ch = '^' ;
                }  else if( V[j].ch == '^' ) {
                    for( int k = r ; k>= 0 ; k-- ) {
                        if( S[i][k][c] == '#' ) break ;
                        else S[i][k][c] = '#' ;
                    }
                    V[j].ch = '>' ;
                } else if( V[j].ch == '>' ) {
                    for( int k = c ; k< N ; k++ ) {
                        if( S[i][r][k] == '#' ) break ;
                        else S[i][r][k] = '#' ;
                    }
                    V[j].ch = 'v' ;
                } else if(  V[j].ch == 'v' ) {
                    for( int k = r ; k< M ; k++ ) {
                        if( S[i][k][c] == '#' ) break ;
                        else S[i][k][c] = '#' ;
                    }
                    V[j].ch = '<' ;
                }
            }
        }

        for( int i = 0 ; i < 4 ; i++ ) {
            for( int j = 0 ; j <= M ; j++ ) {
                for( int k = 0 ; k<= N ; k++ ) {
                    vis[i][j][k] = 0 ;
                    dist[i][j][k] = 1<<30 ;
                }
            }
        }

//        cout << endl << endl ;
//        for( int i = 0 ; i < 4 ; i++ ) {
//            cout << i << ". --------- > \n" ;
//            for( int k = 0; k < M ; k++ ) {
//                for( int j = 0 ; j < N ; j++ ) {
//                    cout << S[i][k][j] ;
//                }
//                cout << endl ;
//            }
//            cout << endl << endl ;
//        }
        ans = (1<<30) ;
        dfs( st.first , st.second , 0 ) ;
        if( ans == (1<<30) )cout << "Case #" << caseno++ << ": impossible\n" ;
        else cout << "Case #" << caseno++ << ": " << ans << "\n" ;




    }


    return 0 ;

}

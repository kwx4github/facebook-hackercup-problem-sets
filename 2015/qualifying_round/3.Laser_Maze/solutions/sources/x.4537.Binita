using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;
struct Food
{
    public int a;
    public int b;
    public int c;
}
class FHackerCup
{
    public static void Main()
    {
        //read a file
        string[] txt = File.ReadAllLines("input.txt");
        int t = int.Parse(txt[0]);
        int counter = 1;
        StringBuilder sb = new StringBuilder();
        int lineNumber = 1;
        while (t-- > 0)
        {
            //long n = long.Parse(txt[lineNumber]);
            sb.AppendFormat("Case #{0}: ", counter);
            int[] matrixSize = txt[lineNumber].Split().Select(x => int.Parse(x)).ToArray();
            var m = matrixSize[0];
            var n = matrixSize[1];
            var visited = new bool[m, n,4];
            lineNumber++;
            var matrix = new char[m, n];
            int startX = -1;
            int startY = -1;
            for (int i = 0; i < m; i++)
            {
                string entry = txt[lineNumber];
                lineNumber++;
                for (int j = 0; j < n; j++)
                {
                    matrix[i, j] = entry[j];
                    if(matrix[i,j] == 'S'){
                        startX = i ;
                        startY = j;
                    }
                }
            }
            var killer = new bool[m,n,4];
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (matrix[i, j] == '.' || matrix[i,j] == 'S' || matrix[i,j] == 'G')
                    {
                        //left movement
                        char leftturtule = ' ';
                        for (int k = j - 1; k >= 0; k--)
                        {
                            if (matrix[i, k] == '#')
                            {
                                break;
                            }
                            if (matrix[i, k] == '^' || matrix[i, k] == 'v' || matrix[i, k] == '>' || matrix[i, k] == '<')
                            {
                                leftturtule = matrix[i, k];
                                break;
                            }
                        }

                        char rightturtule = ' ';
                        for (int k = j + 1; k < n; k++)
                        {
                            if (matrix[i, k] == '#')
                            {
                                break;
                            }
                            if (matrix[i, k] == '^' || matrix[i, k] == 'v' || matrix[i, k] == '>' || matrix[i, k] == '<')
                            {
                                rightturtule = matrix[i, k];
                                break;
                            }
                        }

                        char upperturtule = ' ';
                        for (int k = i - 1; k >= 0; k--)
                        {
                            if (matrix[k, j] == '#')
                            {
                                break;
                            }
                            if (matrix[k,j] == '^' || matrix[k,j] == 'v' || matrix[k,j] == '>' || matrix[k,j] == '<')
                            {
                                upperturtule = matrix[k, j];
                                break;
                            }
                        }

                        char lowerturtule = ' ';
                        for (int k = i + 1; k < m; k++)
                        {
                            if (matrix[k, j] == '#')
                            {
                                break;
                            }
                            if (matrix[k, j] == '^' || matrix[k, j] == 'v' || matrix[k, j] == '>' || matrix[k, j] == '<')
                            {
                                lowerturtule = matrix[k, j];
                                break;
                            }
                        }

                        if (leftturtule == '^')
                        {
                            killer[i, j, 1] = true;
                        }

                        if (rightturtule == 'v')
                        {
                            killer[i, j, 1] = true;
                        }

                        if (upperturtule == '>')
                        {
                            killer[i, j, 1] = true;
                        }

                        if (lowerturtule == '<')
                        {
                            killer[i, j, 1] = true;
                        }

                        /////////////////////////////////////////////////

                        if (leftturtule == '>')
                        {
                            killer[i, j, 0] = true;
                        }

                        if (rightturtule == '<')
                        {
                            killer[i, j, 0] = true;
                        }

                        if (upperturtule == 'v')
                        {
                            killer[i, j, 0] = true;
                        }

                        if (lowerturtule == '^')
                        {
                            killer[i, j, 0] = true;
                        }

                        //////////////////////////////////////////////

                        if (leftturtule == '<')
                        {
                            killer[i, j, 2] = true;
                        }

                        if (rightturtule == '>')
                        {
                            killer[i, j, 2] = true;
                        }

                        if (upperturtule == '^')
                        {
                            killer[i, j, 2] = true;
                        }

                        if (lowerturtule == 'v')
                        {
                            killer[i, j, 2] = true;
                        }

                        ////////////////////////////////////////////////////


                        if (leftturtule == 'v')
                        {
                            killer[i, j, 3] = true;
                        }

                        if (rightturtule == '^')
                        {
                            killer[i, j, 3] = true;
                        }

                        if (upperturtule == '<')
                        {
                            killer[i, j, 3] = true;
                        }

                        if (lowerturtule == '>')
                        {
                            killer[i, j, 3] = true;
                        }
                    }
                }
            }
            
            if (true)
            {
                Queue<int[]> q = new Queue<int[]>();
                q.Enqueue(new int[] { startX, startY , 0 });
                bool[,] parentsafe = new bool[m, n];
                visited[startX, startY,0] = true;
                int[,,] minsteparr = new int[m, n,4];
                
                for(int i = 0 ; i < m ; i++)
                    for(int j = 0 ;  j < n ; j++)
                        for(int k = 0 ; k < 4 ; k++)
                            minsteparr[i,j,k] = int.MaxValue;
                int minSteps = int.MaxValue;
                minsteparr[startX, startY,0] = 0;
                while (q.Count > 0)
                {
                    int[] pos = q.Dequeue();
                    if (matrix[pos[0], pos[1]] == 'G')
                    {
                        minSteps = Math.Min(minSteps, minsteparr[pos[0], pos[1], pos[2]]);
                    }
                    int stepNumber = minsteparr[pos[0],pos[1],pos[2]] + 1;
                    int[] left = new int[] { pos[0], pos[1] - 1 };
                    int[] right = new int[] { pos[0], pos[1] + 1 };
                    int[] up = new int[] { pos[0] - 1, pos[1] };
                    int[] down = new int[] { pos[0] + 1, pos[1] };
                    bool ok = false;
                    if (left[1] >= 0)
                    {
                        if ((matrix[left[0], left[1]] == '.' || matrix[left[0], left[1]] == 'G'))
                        {
                            if (killer[left[0], left[1], stepNumber % 4] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[left[0], left[1]] = true;
                                }
                                minsteparr[left[0], left[1], stepNumber % 4] = Math.Min(minsteparr[left[0], left[1], stepNumber % 4], stepNumber);
                                if (visited[left[0], left[1], stepNumber % 4] == false)
                                {
                                    q.Enqueue(new int[] { left[0], left[1], stepNumber % 4 });
                                    visited[left[0], left[1], stepNumber % 4] = true;
                                }
                            }
                            else if (parentsafe[pos[0], pos[1]] && killer[left[0], left[1], (stepNumber + 2) % 2] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[left[0], left[1]] = true;
                                }
                                minsteparr[left[0], left[1], (stepNumber + 2) % 4] = Math.Min(minsteparr[left[0], left[1], (stepNumber + 2) % 4], stepNumber + 2);
                                if (visited[left[0], left[1], (stepNumber + 2) % 4] == false)
                                {
                                    q.Enqueue(new int[] { left[0], left[1], (stepNumber + 2) % 4 });
                                    visited[left[0], left[1], (stepNumber + 2) % 4] = true;
                                }
                            }
                            
                        }
                    }

                    if (right[1] < n)
                    {
                        if ((matrix[right[0], right[1]] == '.' || matrix[right[0], right[1]] == 'G'))
                        {
                            if (killer[right[0], right[1], stepNumber % 4] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[right[0], right[1]] = true;
                                }
                                minsteparr[right[0], right[1], stepNumber % 4] = Math.Min(minsteparr[right[0], right[1], stepNumber % 4], stepNumber);
                                if (visited[right[0], right[1], stepNumber % 4] == false)
                                {
                                    q.Enqueue(new int[] { right[0], right[1], stepNumber % 4 });
                                    visited[right[0], right[1], stepNumber % 4] = true;
                                }
                            }
                            else if (parentsafe[pos[0], pos[1]] && killer[right[0], right[1], (stepNumber + 2) % 2] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[right[0], right[1]] = true;
                                }
                                minsteparr[right[0], right[1], (stepNumber + 2) % 4] = Math.Min(minsteparr[right[0], right[1], (stepNumber + 2) % 4], stepNumber + 2);
                                if (visited[right[0], right[1], (stepNumber + 2) % 4] == false)
                                {
                                    q.Enqueue(new int[] { right[0], right[1], (stepNumber + 2) % 4 });
                                    visited[right[0], right[1], (stepNumber + 2) % 4] = true;
                                }
                            }

                        }
                    }


                    if (up[0] >= 0)
                    {
                        if ((matrix[up[0], up[1]] == '.' || matrix[up[0], up[1]] == 'G'))
                        {
                            if (killer[up[0], up[1], stepNumber % 4] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[up[0], up[1]] = true;
                                }
                                minsteparr[up[0], up[1], stepNumber % 4] = Math.Min(minsteparr[up[0], up[1], stepNumber % 4], stepNumber);
                                if (visited[up[0], up[1], stepNumber % 4] == false)
                                {
                                    q.Enqueue(new int[] { up[0], up[1], stepNumber % 4 });
                                    visited[up[0], up[1], stepNumber % 4] = true;
                                }
                            }
                            else if (parentsafe[pos[0], pos[1]] && killer[up[0], up[1], (stepNumber + 2) % 2] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[up[0], up[1]] = true;
                                }
                                minsteparr[up[0], up[1], (stepNumber + 2) % 4] = Math.Min(minsteparr[up[0], up[1], (stepNumber + 2) % 4], stepNumber + 2);
                                if (visited[up[0], up[1], (stepNumber + 2) % 2] == false)
                                {
                                    q.Enqueue(new int[] { up[0], up[1], (stepNumber + 2) % 4 });
                                    visited[up[0], up[1], (stepNumber + 2) % 2] = true;
                                }
                            }

                        }
                    }

                    if (down[0] < m)
                    {
                        if ((matrix[down[0], down[1]] == '.' || matrix[down[0], down[1]] == 'G'))
                        {
                            if (killer[down[0], down[1], stepNumber % 4] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[down[0], down[1]] = true;
                                }
                                minsteparr[down[0], down[1], stepNumber % 4] = Math.Min(minsteparr[down[0], down[1], stepNumber % 4], stepNumber);
                                if (visited[down[0], down[1], stepNumber % 4] == false)
                                {
                                    q.Enqueue(new int[] { down[0], down[1], stepNumber % 4 });
                                    visited[down[0], down[1], stepNumber % 4] = true;
                                }
                            }
                            else if (parentsafe[pos[0], pos[1]] && killer[down[0], down[1], (stepNumber + 2) % 2] == false)
                            {
                                
                                if (killer[pos[0], pos[1], (stepNumber + 1) % 4] == false)
                                {
                                    parentsafe[down[0], down[1]] = true;
                                }
                                minsteparr[down[0], down[1], (stepNumber + 2) % 4] = Math.Min(minsteparr[down[0], down[1], (stepNumber + 2) % 4], stepNumber + 2);
                                if (visited[down[0], down[1], (stepNumber + 2) % 2] == false)
                                {
                                    q.Enqueue(new int[] { down[0], down[1], (stepNumber + 2) % 4 });
                                    visited[down[0], down[1], (stepNumber + 2) % 2] = true;
                                }
                            }

                        }
                    }
                }
                sb.Append(minSteps == int.MaxValue ? "impossible" : minSteps.ToString());
            }
            else
            {
                sb.Append("impossible");
            }
            sb.AppendLine();
            counter++;
        }
        File.WriteAllText("output.txt", sb.ToString());

    }
   
}
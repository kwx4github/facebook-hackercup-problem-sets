package mx.com.playus.algorithms.tests;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;

/**
 *  The Maze class represents a maze in a rectangular grid.  There is exactly
 *  one path between any two points.
 **/

public class LaserMaze {

	private static interface KeySymbolVertex {

		public boolean hasEdge(KeySymbolVertex s, BellmanFordSP g);

		public int getWeight(KeySymbolVertex s, BellmanFordSP g);
	}

	private static class SimpleSimbolVertex<Key extends KeySymbolVertex> {

		private Map<Key, Integer> st; // string -> index
		private Key[] keys; // index  -> string
		private EdgeWeightedDigraph g;
		private BellmanFordSP sp;

		public SimpleSimbolVertex(Key[] keys, BellmanFordSP sp) {
			this.sp = sp;
			st = new HashMap<Key, Integer>();
			for (int i = 0; i < keys.length; i++) {
				if (!st.keySet().contains(keys[i]))
					st.put(keys[i], st.size());
			}
			this.keys = keys;

			g = new EdgeWeightedDigraph(st.size());
			for (KeySymbolVertex p : keys) {
				for (KeySymbolVertex c : keys) {
					if (p.hasEdge(c, sp)) {
						DirectedEdge e = new DirectedEdge(st.get(p), st.get(c), p.getWeight(c, sp));
						g.addEdge(e);
					}
				}
			}
		}

		public boolean contains(Key k) {
			return st.get(k) != null;
		}

		public int indexOf(Key k) {
			return st.get(k);
		}

		public Key get(int v) {
			return keys[v];
		}

		public EdgeWeightedDigraph getGraph() {
			return g;
		}
	}
	
	private static class Bag<Item> implements Iterable<Item> {
	    private int N;               // number of elements in bag
	    private Node<Item> first;    // beginning of bag

	    // helper linked list class
	    private static class Node<Item> {
	        private Item item;
	        private Node<Item> next;
	    }

	    /**
	     * Initializes an empty bag.
	     */
	    public Bag() {
	        first = null;
	        N = 0;
	    }

	    /**
	     * Is this bag empty?
	     * @return true if this bag is empty; false otherwise
	     */
	    public boolean isEmpty() {
	        return first == null;
	    }

	    /**
	     * Returns the number of items in this bag.
	     * @return the number of items in this bag
	     */
	    public int size() {
	        return N;
	    }

	    /**
	     * Adds the item to this bag.
	     * @param item the item to add to this bag
	     */
	    public void add(Item item) {
	        Node<Item> oldfirst = first;
	        first = new Node<Item>();
	        first.item = item;
	        first.next = oldfirst;
	        N++;
	    }


	    /**
	     * Returns an iterator that iterates over the items in the bag in arbitrary order.
	     * @return an iterator that iterates over the items in the bag in arbitrary order
	     */
	    public Iterator<Item> iterator()  {
	        return new ListIterator<Item>(first);  
	    }

	    // an iterator, doesn't implement remove() since it's optional
	    private class ListIterator<Item> implements Iterator<Item> {
	        private Node<Item> current;

	        public ListIterator(Node<Item> first) {
	            current = first;
	        }

	        public boolean hasNext()  { return current != null;                     }
	        public void remove()      { throw new UnsupportedOperationException();  }

	        public Item next() {
	            if (!hasNext()) throw new NoSuchElementException();
	            Item item = current.item;
	            current = current.next; 
	            return item;
	        }
	    }


	}

	private static class EdgeWeightedDigraph {

		private final int V;
	    private int E;
	    private Bag<DirectedEdge>[] adj;
	    
	    /**
	     * Initializes an empty edge-weighted digraph with <tt>V</tt> vertices and 0 edges.
	     * param V the number of vertices
	     * @throws java.lang.IllegalArgumentException if <tt>V</tt> < 0
	     */
	    public EdgeWeightedDigraph(int V) {
	        if (V < 0) throw new IllegalArgumentException("Number of vertices in a Digraph must be nonnegative");
	        this.V = V;
	        this.E = 0;
	        adj = (Bag<DirectedEdge>[]) new Bag[V];
	        for (int v = 0; v < V; v++)
	            adj[v] = new Bag<DirectedEdge>();
	    }

	    public EdgeWeightedDigraph(EdgeWeightedDigraph G) {
	        this(G.V());
	        this.E = G.E();
	        for (int v = 0; v < G.V(); v++) {
	            // reverse so that adjacency list is in same order as original
	            List<DirectedEdge> reverse = new ArrayList<DirectedEdge>();
	            for (DirectedEdge e : G.adj[v]) {
	                reverse.add(e);
	            }
	            for (DirectedEdge e : reverse) {
	                adj[v].add(e);
	            }
	        }
	    }

	    public int V() {
	        return V;
	    }

	    public int E() {
	        return E;
	    }

	    // throw an IndexOutOfBoundsException unless 0 <= v < V
	    private void validateVertex(int v) {
	        if (v < 0 || v >= V)
	            throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
	    }
	    
	    public void addEdge(DirectedEdge e) {
	        int v = e.from();
	        int w = e.to();
	        validateVertex(v);
	        validateVertex(w);
	        adj[v].add(e);
	        E++;
	    }

	    public Iterable<DirectedEdge> adj(int v) {
	        validateVertex(v);
	        return adj[v];
	    }

	    public int outdegree(int v) {
	        validateVertex(v);
	        return adj[v].size();
	    }

	    public Iterable<DirectedEdge> edges() {
	        Bag<DirectedEdge> list = new Bag<DirectedEdge>();
	        for (int v = 0; v < V; v++) {
	            for (DirectedEdge e : adj(v)) {
	                list.add(e);
	            }
	        }
	        return list;
	    } 

	    public String toString() {
	        String NEWLINE = System.getProperty("line.separator");
	        StringBuilder s = new StringBuilder();
	        s.append(V + " " + E + NEWLINE);
	        for (int v = 0; v < V; v++) {
	            s.append(v + ": ");
	            for (DirectedEdge e : adj[v]) {
	                s.append(e + "  ");
	            }
	            s.append(NEWLINE);
	        }
	        return s.toString();
	    }
	}

	private static class DirectedEdge {

		private final int v;
	    private final int w;
	    private final double weight;

	    public DirectedEdge(int v, int w, double weight) {
	        if (v < 0) throw new IndexOutOfBoundsException("Vertex names must be nonnegative integers");
	        if (w < 0) throw new IndexOutOfBoundsException("Vertex names must be nonnegative integers");
	        if (Double.isNaN(weight)) throw new IllegalArgumentException("Weight is NaN");
	        this.v = v;
	        this.w = w;
	        this.weight = weight;
	    }

	    public int from() {
	        return v;
	    }

	    public int to() {
	        return w;
	    }

	    public double weight() {
	        return weight;
	    }

	    public String toString() {
	        return v + "->" + w + " " + String.format("%5.2f", weight);
	    }
	}

	private static class BellmanFordSP {

		private double[] distTo; // distTo[v] = distance  of shortest s->v path
		private DirectedEdge[] edgeTo; // edgeTo[v] = last edge on shortest s->v path
		private boolean[] onQueue; // onQueue[v] = is v currently on the queue?
		private Queue<Integer> queue; // queue of vertices to relax
		private int cost; // number of calls to relax()
		private Iterable<DirectedEdge> cycle; // negative cycle (or null if no such cycle)

		public BellmanFordSP(EdgeWeightedDigraph G, int s) {
			distTo = new double[G.V()];
			edgeTo = new DirectedEdge[G.V()];
			onQueue = new boolean[G.V()];
			for (int v = 0; v < G.V(); v++)
				distTo[v] = Double.POSITIVE_INFINITY;
			distTo[s] = 0.0;

			// Bellman-Ford algorithm
			queue = new LinkedList<Integer>();
			queue.add(s);
			onQueue[s] = true;
			while (!queue.isEmpty() && !hasNegativeCycle()) {
				int v = queue.poll();
				onQueue[v] = false;
				relax(G, v);
			}

		}

		// relax vertex v and put other endpoints on queue if changed
		private void relax(EdgeWeightedDigraph G, int v) {
			for (DirectedEdge e : G.adj(v)) {
				int w = e.to();
				if (distTo[w] > distTo[v] + e.weight()) {
					distTo[w] = distTo[v] + e.weight();
					edgeTo[w] = e;
					if (!onQueue[w]) {
						queue.add(w);
						onQueue[w] = true;
					}
				}
				if (cost++ % G.V() == 0)
					findNegativeCycle();
			}
		}

		public boolean hasNegativeCycle() {
			return cycle != null;
		}

		public Iterable<DirectedEdge> negativeCycle() {
			return cycle;
		}

		// by finding a cycle in predecessor graph
		private void findNegativeCycle() {
			int V = edgeTo.length;
			EdgeWeightedDigraph spt = new EdgeWeightedDigraph(V);
			for (int v = 0; v < V; v++)
				if (edgeTo[v] != null)
					spt.addEdge(edgeTo[v]);

			EdgeWeightedDirectedCycle finder = new EdgeWeightedDirectedCycle(spt);
			cycle = finder.cycle();
		}

		public double distTo(int v) {
			if (hasNegativeCycle())
				throw new UnsupportedOperationException("Negative cost cycle exists");
			return distTo[v];
		}

		public boolean hasPathTo(int v) {
			return distTo[v] < Double.POSITIVE_INFINITY;
		}

		public List<DirectedEdge> pathTo(int v) {
			if (hasNegativeCycle())
				throw new UnsupportedOperationException("Negative cost cycle exists");
			if (!hasPathTo(v))
				return null;
			List<DirectedEdge> path = new ArrayList<DirectedEdge>();
			for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
				path.add(e);
			}
			return path;
		}
	}

	private static class EdgeWeightedDirectedCycle {

		private boolean[] marked;             // marked[v] = has vertex v been marked?
	    private DirectedEdge[] edgeTo;        // edgeTo[v] = previous edge on path to v
	    private boolean[] onStack;            // onStack[v] = is vertex on the stack?
	    private List<DirectedEdge> cycle;    // directed cycle (or null if no such cycle)

	    /**
	     * Determines whether the edge-weighted digraph <tt>G</tt> has a directed cycle and,
	     * if so, finds such a cycle.
	     * @param G the edge-weighted digraph
	     */
	    public EdgeWeightedDirectedCycle(EdgeWeightedDigraph G) {
	        marked  = new boolean[G.V()];
	        onStack = new boolean[G.V()];
	        edgeTo  = new DirectedEdge[G.V()];
	        for (int v = 0; v < G.V(); v++)
	            if (!marked[v]) dfs(G, v);

	        // check that digraph has a cycle
	        assert check(G);
	    }

	    // check that algorithm computes either the topological order or finds a directed cycle
	    private void dfs(EdgeWeightedDigraph G, int v) {
	        onStack[v] = true;
	        marked[v] = true;
	        for (DirectedEdge e : G.adj(v)) {
	            int w = e.to();

	            // short circuit if directed cycle found
	            if (cycle != null) return;

	            //found new vertex, so recur
	            else if (!marked[w]) {
	                edgeTo[w] = e;
	                dfs(G, w);
	            }

	            // trace back directed cycle
	            else if (onStack[w]) {
	                cycle = new ArrayList<DirectedEdge>();
	                while (e.from() != w) {
	                    cycle.add(e);
	                    e = edgeTo[e.from()];
	                }
	                cycle.add(e);
	            }
	        }

	        onStack[v] = false;
	    }

	    /**
	     * Does the edge-weighted digraph have a directed cycle?
	     * @return <tt>true</tt> if the edge-weighted digraph has a directed cycle,
	     * <tt>false</tt> otherwise
	     */
	    public boolean hasCycle() {
	        return cycle != null;
	    }

	    /**
	     * Returns a directed cycle if the edge-weighted digraph has a directed cycle,
	     * and <tt>null</tt> otherwise.
	     * @return a directed cycle (as an iterable) if the edge-weighted digraph
	     *    has a directed cycle, and <tt>null</tt> otherwise
	     */
	    public Iterable<DirectedEdge> cycle() {
	        return cycle;
	    }


	    // certify that digraph is either acyclic or has a directed cycle
	    private boolean check(EdgeWeightedDigraph G) {

	        // edge-weighted digraph is cyclic
	        if (hasCycle()) {
	            // verify cycle
	            DirectedEdge first = null, last = null;
	            for (DirectedEdge e : cycle()) {
	                if (first == null) first = e;
	                if (last != null) {
	                    if (last.to() != e.from()) {
	                        System.err.printf("cycle edges %s and %s not incident\n", last, e);
	                        return false;
	                    }
	                }
	                last = e;
	            }

	            if (last.to() != first.from()) {
	                System.err.printf("cycle edges %s and %s not incident\n", last, first);
	                return false;
	            }
	        }


	        return true;
	    }
	}

	private static class StdIn {

		// assume Unicode UTF-8 encoding
		private String charsetName = "UTF-8";

		// the scanner object
		private Scanner scanner = new Scanner(new BufferedInputStream(System.in), charsetName);

		public StdIn() {

		}

		public StdIn(InputStream in) {
			scanner = new Scanner(in, charsetName);
		}

		/**
		 * Is there only whitespace left on standard input?
		 */
		public boolean isEmpty() {
			return !scanner.hasNext();
		}

		/**
		 * Return next string from standard input
		 */
		public String readString() {
			return scanner.next();
		}

		/**
		 * Return next int from standard input
		 */
		public int readInt() {
			return scanner.nextInt();
		}

		/**
		 * Return next double from standard input
		 */
		public double readDouble() {
			return scanner.nextDouble();
		}

		/**
		 * Return next float from standard input
		 */
		public float readFloat() {
			return scanner.nextFloat();
		}

		/**
		 * Return next short from standard input
		 */
		public short readShort() {
			return scanner.nextShort();
		}

		/**
		 * Return next long from standard input
		 */
		public long readLong() {
			return scanner.nextLong();
		}

		/**
		 * Return next byte from standard input
		 */
		public byte readByte() {
			return scanner.nextByte();
		}

		/**
		 * Return next boolean from standard input, allowing "true" or "1" for true,
		 * and "false" or "0" for false
		 */
		public boolean readBoolean() {
			String s = readString();
			if (s.equalsIgnoreCase("true"))
				return true;
			if (s.equalsIgnoreCase("false"))
				return false;
			if (s.equals("1"))
				return true;
			if (s.equals("0"))
				return false;
			throw new java.util.InputMismatchException();
		}

		/**
		 * Does standard input have a next line?
		 */
		public boolean hasNextLine() {
			return scanner.hasNextLine();
		}

		/**
		 * Return rest of line from standard input
		 */
		public String readLine() {
			return scanner.nextLine();
		}

		/**
		 * Return next char from standard input
		 */
		// a complete hack and inefficient - email me if you have a better
		public char readChar() {
			// (?s) for DOTALL mode so . matches a line termination character
			// 1 says look only one character ahead
			// consider precompiling the pattern
			String s = scanner.findWithinHorizon("(?s).", 1);
			return s.charAt(0);
		}

		/**
		 * Return rest of input from standard input
		 */
		public String readAll() {
			if (!scanner.hasNextLine())
				return null;

			// reference: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
			return scanner.useDelimiter("\\A").next();
		}

		/**
		  * Read rest of input as array of ints
		  */
		public int[] readInts() {
			String[] fields = readAll().trim().split("\\s+");
			int[] vals = new int[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Integer.parseInt(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of doubles
		  */
		public double[] readDoubles() {
			String[] fields = readAll().trim().split("\\s+");
			double[] vals = new double[fields.length];
			for (int i = 0; i < fields.length; i++)
				vals[i] = Double.parseDouble(fields[i]);
			return vals;
		}

		/**
		  * Read rest of input as array of strings
		  */
		public String[] readStrings() {
			String[] fields = readAll().trim().split("\\s+");
			return fields;
		}
	}

	private static class MazeVertex implements KeySymbolVertex {

		private final boolean wall;
		private final boolean turret;
		private final Point point;
		private final LaserMaze maze;
		private final int index;
		private final boolean source;
		private Turret originalPosition;
		private Turret currentPosition;

		public MazeVertex(Point point, LaserMaze maze, boolean wall, boolean turret, boolean source, int index) {
			this.point = point;
			this.maze = maze;
			this.wall = wall;
			this.turret = turret;
			this.source = source;
			this.index = index;
		}

		public boolean isWall() {
			return wall;
		}

		public boolean isTurret() {
			return turret;
		}

		public Point getPoint() {
			return point;
		}

		public LaserMaze getMaze() {
			return maze;
		}

		@Override
		public boolean hasEdge(KeySymbolVertex s, BellmanFordSP sp) {
			if (maze.isWall(this.getPoint().x, this.getPoint().y) || maze.isTurret(this.getPoint().x, this.getPoint().y))
				return false;
			MazeVertex sv = (MazeVertex) s;
			if (maze.isWall(sv.getPoint().x, sv.getPoint().y) || maze.isTurret(sv.getPoint().x, sv.getPoint().y))
				return false;
			
			int differencex = Math.abs(this.point.x - sv.point.x);
			int differencey = Math.abs(this.point.y - sv.point.y);
			
			if (differencex > 1 || differencey > 1)
				return false;

			if (sp == null) {
				return true;
			} else {
				if (sv.source)
					return true;
				if (!sp.hasPathTo(sv.getIndex()))
					return false;
				List<DirectedEdge> pathTo = sp.pathTo(sv.getIndex());
				maze.calculateLaserRay(true);
				int size = pathTo.size();
				for (int i = 0; i < size; i++) {
					maze.rotateTurrets();
					maze.calculateLaserRay(false);
				}
				if (sv.point.equals(maze.goal.point) && maze.isLaser(sv.getPoint().x, sv.getPoint().y))
					return false;
				if (maze.isLaser(sv.getPoint().x, sv.getPoint().y)) {
					maze.rotateTurrets();
					maze.calculateLaserRay(false);
					boolean nextLaser = !maze.isLaser(sv.getPoint().x, sv.getPoint().y);
					return nextLaser;
				}
				return true;
			}
		}

		public int getIndex() {
			return index;
		}

		public boolean getSource() {
			return source;
		}

		public Turret getOriginalPosition() {
			return originalPosition;
		}

		public void setOriginalPosition(Turret originalPosition) {
			this.originalPosition = originalPosition;
		}

		public Turret getCurrentPosition() {
			return currentPosition;
		}

		public void setCurrentPosition(Turret currentPosition) {
			this.currentPosition = currentPosition;
		}

		@Override
		public int getWeight(KeySymbolVertex s, BellmanFordSP sp) {
			MazeVertex sv = (MazeVertex) s;
			if (sp == null) {
				return 0;
			} else {
				if (sv.source)
					return 0;
				List<DirectedEdge> pathTo = sp.pathTo(sv.getIndex());
				maze.calculateLaserRay(true);
				int size = pathTo.size();
				for (int i = 0; i < size; i++) {
					maze.rotateTurrets();
					maze.calculateLaserRay(false);
				}
				if (maze.isLaser(sv.getPoint().x, sv.getPoint().y)) {
					maze.rotateTurrets();
					maze.calculateLaserRay(false);
					return 1;
				}
				return 0;
			}
		}

		@Override
		public String toString() {
			return point.toString();
		}

	}

	private static class Point {
		private final int x;
		private final int y;

		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + x;
			result = prime * result + y;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Point other = (Point) obj;
			if (x != other.x)
				return false;
			if (y != other.y)
				return false;
			return true;
		}

		@Override
		public String toString() {
			return MessageFormat.format("x: {0}, y: {1}", String.valueOf(x), String.valueOf(y));
		}
	}

	// Horizontal and vertical dimensions of the maze.
	protected int horiz;
	protected int vert;
	// Horizontal and vertical interior walls; each is true if the wall exists.
	protected boolean[][] hWalls;

	protected Turret[][] turrent;
	protected MazeVertex[][] vertexIndex;
	protected boolean[][] laser;

	private Set<MazeVertex> turretLocations = new HashSet<MazeVertex>();

	private MazeVertex source;
	private MazeVertex goal;

	private MazeVertex[] vertex;

	private enum Turret {
		LEFT, RIGHT, UP, DOWN
	}

	public LaserMaze(int horizontalSize, int verticalSize, StdIn in) {
		horiz = horizontalSize;
		vert = verticalSize;
		if ((horiz < 1) || (vert < 1) || ((horiz == 1) && (vert == 1))) {
			return; // There are no interior walls
		}
		hWalls = new boolean[verticalSize][horizontalSize];
		turrent = new Turret[verticalSize][horizontalSize];
		vertexIndex = new MazeVertex[verticalSize][horizontalSize];
		vertex = new MazeVertex[verticalSize * horizontalSize];

		int count = 0;
		for (int i = 0; i < verticalSize; i++) {
			in.hasNextLine();
			for (int j = 0; j < horizontalSize; j++) {
				char readChar = in.readChar();
				Point point = new Point(j, i);
				MazeVertex mazeVertex = null;
				switch (readChar) {
					case '#' :
						hWalls[i][j] = true;
						mazeVertex = new MazeVertex(point, this, true, false, false, count);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case 'S' :
						mazeVertex = new MazeVertex(point, this, false, false, true, count);
						source = mazeVertex;
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case 'G' :
						mazeVertex = new MazeVertex(point, this, false, false, false, count);
						goal = mazeVertex;
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case '<' :
						turrent[i][j] = Turret.LEFT;
						mazeVertex = new MazeVertex(point, this, false, true, false, count);
						mazeVertex.setOriginalPosition(Turret.LEFT);
						mazeVertex.setCurrentPosition(Turret.LEFT);

						turretLocations.add(mazeVertex);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case '>' :
						turrent[i][j] = Turret.RIGHT;
						mazeVertex = new MazeVertex(point, this, false, true, false, count);
						mazeVertex.setOriginalPosition(Turret.RIGHT);
						mazeVertex.setCurrentPosition(Turret.RIGHT);
						turretLocations.add(mazeVertex);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case '^' :
						turrent[i][j] = Turret.UP;
						mazeVertex = new MazeVertex(point, this, false, true, false, count);
						mazeVertex.setOriginalPosition(Turret.UP);
						mazeVertex.setCurrentPosition(Turret.UP);
						turretLocations.add(mazeVertex);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case 'v' :
						turrent[i][j] = Turret.DOWN;
						mazeVertex = new MazeVertex(point, this, false, true, false, count);
						mazeVertex.setOriginalPosition(Turret.DOWN);
						mazeVertex.setCurrentPosition(Turret.DOWN);
						turretLocations.add(mazeVertex);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					case '.' :
						mazeVertex = new MazeVertex(point, this, false, false, false, count);
						vertexIndex[i][j] = mazeVertex;
						vertex[count] = mazeVertex;
						count++;
						break;
					default :
						j--;
				}
			}
		}
	}

	public void calculateLaserRay(boolean initialposition) {
		this.laser = new boolean[vert][horiz];
		Set<MazeVertex> locations = turretLocations;
		for (MazeVertex next : locations) {
			Turret position = initialposition ? next.getOriginalPosition() : next.getCurrentPosition();
			if (initialposition) {
				next.setCurrentPosition(position);
			}
			switch (position) {
				case UP :
					for (int i = next.point.y; i >= 0; i--) {
						laser[i][next.point.x] = true;
					}
					break;
				case DOWN :
					for (int i = next.point.y; i <= vert - 1; i++) {
						laser[i][next.point.x] = true;
					}
					break;
				case LEFT :
					for (int i = next.point.x; i >= 0; i--) {
						laser[next.point.y][i] = true;
					}
					break;
				case RIGHT :
					for (int i = next.point.x; i <= horiz - 1; i++) {
						laser[next.point.y][i] = true;
					}
					break;
			}
		}
	}

	public void rotateTurrets() {
		for (MazeVertex next : turretLocations) {
			Turret position = next.currentPosition;
			switch (position) {
				case UP :
					next.setCurrentPosition(Turret.RIGHT);
					break;
				case DOWN :
					next.setCurrentPosition(Turret.LEFT);
					break;
				case LEFT :
					next.setCurrentPosition(Turret.UP);
					break;
				case RIGHT :
					next.setCurrentPosition(Turret.DOWN);
					break;
			}
		}
	}

	public boolean isWall(int x, int y) {
		if ((x < 0) || (y < 0) || (x > horiz - 1) || (y > vert - 1)) {
			return true;
		}
		return hWalls[y][x];
	}

	public boolean isLaser(int x, int y) {
		if ((x < 0) || (y < 0) || (x > horiz - 1) || (y > vert - 1)) {
			return true;
		}
		return laser[y][x];
	}

	public boolean isTurret(int x, int y) {
		if ((x < 0) || (y < 0) || (x > horiz - 1) || (y > vert - 1)) {
			return true;
		}
		return turrent[y][x] != null;
	}

	public boolean canContinue(MazeVertex next) {
		if (!isWall(next.point.x, next.point.y) && !isLaser(next.point.x, next.point.y) && !isTurret(next.point.x, next.point.y))
			return true;
		return false;
	}

	public MazeVertex getSource() {
		return this.source;
	}

	public MazeVertex getGoal() {
		return this.goal;
	}

	/**
	 * main() creates a maze of dimensions specified on the command line, prints
	 * the maze, and runs the diagnostic method to see if the maze is good.
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) {
		StdIn in = new StdIn(new FileInputStream()));
		int cases = in.readInt();

		int count = 0;
		while (count < cases) {
			count++;
			int y = in.readInt();
			int x = in.readInt();
			LaserMaze maze = new LaserMaze(x, y, in);
			SimpleSimbolVertex<MazeVertex> ssv = new SimpleSimbolVertex<LaserMaze.MazeVertex>(maze.vertex, null);
			BellmanFordSP sp = new BellmanFordSP(ssv.getGraph(), ssv.indexOf(maze.source));
			if (!sp.hasPathTo(ssv.indexOf(maze.goal))) {
				System.out.println(MessageFormat.format("Case #{0}: impossible", String.valueOf(count)));
				continue;
			}
			
			ssv = new SimpleSimbolVertex<LaserMaze.MazeVertex>(maze.vertex, sp);
			sp = new BellmanFordSP(ssv.getGraph(), ssv.indexOf(maze.source));
			if (!sp.hasPathTo(ssv.indexOf(maze.goal))) {
				System.out.println(MessageFormat.format("Case #{0}: impossible", String.valueOf(count)));
			} else {
				double distTo = sp.distTo(ssv.indexOf(maze.goal));
				int dist = sp.pathTo(ssv.indexOf(maze.goal)).size();
				int extra = Double.valueOf(distTo).intValue();
				dist += extra;
				//sp.pathTo(v)
				System.out.println(MessageFormat.format("Case #{0}: {1}", String.valueOf(count), String.valueOf(dist)));
			}

		}

	}

}

#include <bits/stdc++.h>
using namespace std;

#define MAXN 101
typedef pair<int, int> ii;
typedef pair<ii, int> iii;

int T, M, N, rS, cS, rG, cG;
char tab[MAXN][MAXN];
int dist[MAXN][MAXN][4];
bool hit[MAXN][MAXN][4];
int dr[] = {-1, 0, 0, 1};
int dc[] = {0, -1, 1, 0};

bool Torre(int i, int j) {
	return (tab[i][j] =='^' || tab[i][j]=='>' || tab[i][j]=='v' || tab[i][j]=='<');
}
bool Muro(int i, int j) {
	return tab[i][j]=='#';
}
bool Passa(int i, int j) {
	return !Muro(i, j) && !Torre(i, j);
}

void SegnaUp(int r, int c, int t) {
	while(r-1>=0 && Passa(r-1, c)) { hit[r-1][c][t]=true; --r; }
}
void SegnaDown(int r, int c, int t) {
	while(r+1<N && Passa(r+1, c)) { hit[r+1][c][t]=true; ++r; }
}
void SegnaSx(int r, int c, int t) {
	while(c-1>=0 && Passa(r, c-1)) { hit[r][c-1][t]=true; --c; }
}
void SegnaDx(int r, int c, int t) {
	while(c+1<M && Passa(r, c+1)) { hit[r][c+1][t]=true; ++c; }
}
	
void Segna(int i, int j) {
	if(tab[i][j]=='^') {
		SegnaUp(i, j, 0);
		SegnaDx(i, j, 1);
		SegnaDown(i, j, 2);
		SegnaSx(i, j, 3);
	}
	else if(tab[i][j]=='>') {
		SegnaDx(i, j, 0);
		SegnaDown(i, j, 1);
		SegnaSx(i, j, 2);
		SegnaUp(i, j, 3);
	}
	else if(tab[i][j]=='v') {
		SegnaDown(i, j, 0);
		SegnaSx(i, j, 1);
		SegnaUp(i, j, 2);
		SegnaDx(i, j, 3);
	}
	else {
		SegnaSx(i, j, 0);
		SegnaUp(i, j, 1);
		SegnaDx(i, j, 2);
		SegnaDown(i, j, 3);
	}
}
	
void Bfs() {
	queue< iii >coda;
	coda.push( iii( ii(rS, cS), 0) );
	dist[rS][cS][0]=0;
	while(!coda.empty()) {
		ii ora = coda.front().first;
		int t = coda.front().second;
		coda.pop();
		int nt=(t+1)%4;
		for(int i=0; i < 4; i++) {
			int nr = ora.first+dr[i], nc=ora.second+dc[i];
			if(nr<0 || nr>=N || nc<0 || nc>=M) continue;
			if(hit[nr][nc][nt] || !Passa(nr, nc)) continue;
			if(dist[nr][nc][nt] == -1 || 1+dist[ora.first][ora.second][t] < dist[nr][nc][nt]) {
				dist[nr][nc][nt] = 1+dist[ora.first][ora.second][t];
				coda.push( iii( ii(nr, nc), nt) );
			}
		}
	}
	
}
int main() {
	ios::sync_with_stdio(false);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> T;
	for(int i=1;i<=T; i++) {
		memset(dist, -1, sizeof dist);
		memset(hit, false, sizeof hit);
		cin >> N >> M;
		for(int j=0; j<N; j++)
		  for(int k=0; k<M; k++) {
			  cin >> tab[j][k];
			  if(tab[j][k]=='S') { rS=j; cS=k; }
			  else if(tab[j][k]=='G') { rG=j; cG=k; }
		  }
		
		for(int j=0; j<N; j++)
		  for(int k=0; k<M; k++) if(Torre(j, k)) Segna(j, k);
		
		Bfs();
		int minimo=-1;
		for(int j=0; j < 4; j++) if(dist[rG][cG][j] != -1) minimo = (minimo==-1) ? dist[rG][cG][j] : min(minimo, dist[rG][cG][j]); 
		cout<<"Case #"<<i<<" : ";
		if(minimo==-1) cout<<"impossible\n";
		else cout<<minimo<<endl;
	}
	return 0;
}

#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
#include <string>
#include <queue>
#include <set>
#include <stack>
#define rep(i, a, b) for(int i = a; i < b; i++)
#define red(i, a, b) for(int i = a; i > b; i--)
#define RED true
#define BLACK false
#define pb push_back
#define mk make_pair
#define fi first
#define se second
using namespace std;
typedef pair<int, int> ii;
typedef long long ll;
typedef pair<ii, int> iii;
const int N = 1e2 + 7;
const int M = 5007;
const int inf = 1e9 + 7;
const ll base = 1e18;
const double pi = acos(-1);
const double ep = 1e-9;

int n, m;
string s[N];
int d[N][N][4];
int x[4] = {0, 0, -1, 1};
int y[4] = {-1, 1, 0, 0};
ii start, stop;
deque<iii> q;

int BFS(){
    while (!q.empty()) q.pop_back();
    iii tmp = mk(start, 0);
    q.push_back(tmp);
    d[start.fi][start.se][0] = 1;
    //cout<<start.fi<<" "<<start.second<<endl;

    while (!q.empty()){
        iii tmp = q.front(); q.pop_front();
        int i = tmp.fi.fi;
        int j = tmp.fi.se;
        int state = tmp.se;
        rep(t, 0, 4){
            int u = i + x[t];
            int v = j + y[t];
            int nextState = (state + 1) % 4;
            if (u >= 0 && u < n && v >= 0 && v < m){
                if (d[u][v][nextState] == 0){
                    //cout<<u<<" "<<v<<" "<<nextState<<endl;
                    d[u][v][nextState] = d[i][j][state] + 1;
                    q.push_back(mk(mk(u, v), nextState));
                }
            }
        }
    }
    int u = stop.fi, v = stop.se;
    int res = -1;
    rep(j, 0, 4){
        if (d[u][v][j] > 0){
            if (res == -1) res = d[u][v][j] - 1;
            else res = min(res, d[u][v][j] - 1);
        }
    }
    return res;
}


int isLaser(char c){
    if (c == 'v') return 0;
    if (c == '<') return 1;
    if (c == '^') return 2;
    if (c == '>') return 3;
    return 4;
}

void del(int i, int j, int ini, int dir){
    int tmp = (ini + dir) % 4;
    switch(tmp){
        case 3:{
            j++;
            while (j < m){
                if (s[i][j] == '#' || isLaser(s[i][j]) < 4) break;
                d[i][j][dir] = -1;
                j++;
            }
            break;
        }
        case 2:{
            i--;
            while (i >= 0){
                if (s[i][j] == '#' || isLaser(s[i][j]) < 4) break;
                d[i][j][dir] = -1;
                i--;
            }
            break;
        }
        case 1:{
        j--;
            while (j >= 0){
                if (s[i][j] == '#' || isLaser(s[i][j]) < 4) break;
                d[i][j][dir] = -1;
                j--;
            }
            break;
        }
        case 0:{
        i++;
            while (i < n){
                if (s[i][j] == '#' || isLaser(s[i][j]) < 4) break;
                d[i][j][dir] = -1;
                i++;
            }
            break;
        }

    }
}

int main(){
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int test;
    cin >> test;
    rep(cas, 0, test){
        scanf("%d%d", &n, &m);
        rep(i, 0, n) cin >> s[i];
        //rep(i, 0, n) cout<<s[i]<<endl;
        memset(d, 0, sizeof(d));
        rep(i, 0, n){
            rep(j, 0, m){
                if (s[i][j] == '#') rep(t, 0, 4) d[i][j][t] = -1;
                else if (s[i][j] == 'S')  start = mk(i, j);
                else if (s[i][j] == 'G') stop = mk(i, j);
                else if (s[i][j] != '.'){
                    int k = isLaser(s[i][j]);
                    //cout<<k<<endl;
                    rep(t, 0, 4){
                        d[i][j][t] = -1;
                        del(i, j, k, t);
                    }
                }
            }
        }
        /*rep(i, 0, n){
            rep(j, 0, m)
                cout<<d[i][j][3]<<" ";
            cout<<endl;
        }*/
        int res = BFS();
        cout<<"Case #"<<cas + 1<<": ";
        if (res >= 0) cout<<res;
        else cout<<"impossible";
        if (cas < test - 1) cout<<endl;
        //return 0;

    }


    return 0;
}

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<cmath>
#include<memory.h>
using namespace std;
typedef long long ll;

const int N = 111;


char s[4][N][N];
int d[4][N][N], inf = 1e9;


string tt = "<^>v<";

int n,m;
bool safe(int k, int ax, int ay){
    for(int x = ax, y = ay; x>=0; --x){
        if(s[k][x][y]=='v') return false;
        if(s[k][x][y]!='.') break;
    }
    for(int x = ax, y = ay; x<n; ++x){
        if(s[k][x][y]=='^') return false;
        if(s[k][x][y]!='.') break;
    }
    for(int x = ax, y = ay; y<m; ++y){
        if(s[k][x][y]=='<') return false;
        if(s[k][x][y]!='.') break;
    }
    for(int x = ax, y = ay; y>=0; --y){
        if(s[k][x][y]=='>') return false;
        if(s[k][x][y]!='.') break;
    }
    return true;
}

void solve(int test){
    cin>>n>>m;
    int sx, sy, gx, gy;
    for(int i=0;i<n;++i){
        cin>>s[0][i];
        for(int j=0;j<m;++j){
            if(s[0][i][j]=='G'){
                gx=i;
                gy=j;
                s[0][i][j]='.';
            }
            if(s[0][i][j]=='S'){
                sx=i;
                sy=j;
                s[0][i][j]='.';
            }
            for(int k=1;k<4;++k){
                if(count(tt.begin(), tt.end(), s[k-1][i][j])) s[k][i][j] = *(++find(tt.begin(), tt.end(), s[k-1][i][j]));
                else s[k][i][j] = s[k-1][i][j];
            }
        }
    }
    
    for(int k=0;k<4;++k)
    for(int i=0;i<n;++i)
    for(int j=0;j<m;++j) d[k][i][j]=inf;
    
    d[0][sx][sy] = 0;
    vector<pair<pair<int,int>,int>> q;
    q.push_back({{sx,sy},0});
    for(int l=0;l<q.size();++l){
        int x = q[l].first.first;
        int y = q[l].first.second;
        int k = q[l].second;
        for(int dx=-1;dx<2;++dx)
        for(int dy=-1;dy<2;++dy) if(abs(dx)+abs(dy)==1){
            int tx = x+dx;
            int ty = y+dy;
            if(tx<0 || ty<0 || tx>=n || ty>=m) continue;
            if(s[k][tx][ty]!='.') continue;
            if(!safe((k+1)%4, tx, ty)) continue;
            if(d[(k+1)%4][tx][ty]>d[k][x][y]+1){
                d[(k+1)%4][tx][ty]=d[k][x][y]+1;
                q.push_back({{tx,ty},(k+1)%4});
            }
        }
    }
    cout<<"Case #"<<test<<": ";
    int ans = inf;
    for(int k=0;k<4;++k) ans=min(ans, d[k][gx][gy]);
    if(ans==inf) cout<<"impossible"; else cout<<ans;
    cout<<endl;
}

int main(){
    freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    int n, m;
    
    int t;
    cin>>t;
    for(int i=0;i<t;++i) solve(i+1);
    
    
    return 0;
}


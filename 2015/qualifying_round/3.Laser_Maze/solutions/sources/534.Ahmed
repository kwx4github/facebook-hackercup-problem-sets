#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define endl '\n'
#define pii pair<long long,long long>
#define pll pair<ll,ll>
#define triple pair<ll, pair<ll,ll> >
#define mt(x,y,z) mp(x,mp(y,z))
#define mp make_pair
#define ff first
#define ss second
#define fir first
#define sec second.first
#define thi second.second
#define pi 3.141592653589793
#define eps 1e-6
#define MAX 500000
ll MOD = 1000000007;
using namespace std;

string s[105];
int danger[105][105][5];
int n,m,sx,sy,ex,ey;
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};
int visited[105][105][5];
bool valid(int x,int y)
{
	if(x>=0 && x<n && y>=0 && y<m)return 1;
	return 0;
}

int main()
{
	ios::sync_with_stdio(0);
	freopen("/home/ahmed_ossama/Desktop/laser_maze.txt","r",stdin);
	freopen("/home/ahmed_ossama/Desktop/laser_maze_out.txt","w",stdout);
	int t;
	int id = 0;
	cin>>t;
	while(t--)
	{
		id++;
		cin>>n>>m;
		for(int i=0;i<n;i++)
			cin>>s[i];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(s[i][j]=='S')sx=i,sy=j;
				if(s[i][j]=='G')ex=i,ey=j;
				if(s[i][j]!='G' && s[i][j]!='S' && s[i][j]!='.')continue;
				for(int z=0;z<m;z++)
				{
					if(s[i][z]=='>')
					{
						if(j>z)danger[i][j][0]=id;
						else danger[i][j][2]=id;
					}
					if(s[i][z]=='<')
					{
						if(j>z)danger[i][j][2]=id;
						else danger[i][j][0]=id;
					}
					if(s[i][z]=='^')
					{
						if(j>z)danger[i][j][1]=id;
						else danger[i][j][3]=id;
					}
					if(s[i][z]=='v')
					{
						if(j>z)danger[i][j][3]=id;
						else danger[i][j][1]=id;
					}
				}
				for(int z=0;z<n;z++)
				{
					if(s[z][j]=='>')
					{
						if(i>z)danger[i][j][1]=id;
						else danger[i][j][3]=id;
					}
					if(s[z][j]=='<')
					{
						if(i>z)danger[i][j][3]=id;
						else danger[i][j][1]=id;
					}
					if(s[z][j]=='^')
					{
						if(i>z)danger[i][j][2]=id;
						else danger[i][j][0]=id;
					}
					if(s[z][j]=='v')
					{
						if(i>z)danger[i][j][0]=id;
						else danger[i][j][2]=id;
					}
				}
			}
		}
		queue<int> X,Y,L;
		for(int i=0;i<4;i++)
		{
			if(!valid(sx+dx[i],sy+dy[i]))continue;
			char c = s[sx+dx[i]][sy+dy[i]];
			if(c!='.' && c!='S' && c!='G')continue;
			visited[sx+dx[i]][sy+dy[i]][1]=id;
			X.push(sx+dx[i]);
			Y.push(sy+dy[i]);
			L.push(1);
		}
		int ans = -1;
		while(!X.empty())
		{
			int x = X.front();
			int y = Y.front();
			int layer = L.front();
			X.pop();Y.pop();L.pop();
			if(danger[x][y][layer%4]==id)continue;
			if(ex == x && ey == y){ans = layer;break;}
			for(int i=0;i<4;i++)
			{
				if(!valid(x+dx[i],y+dy[i]))continue;
				char c = s[x+dx[i]][y+dy[i]];
				if(c!='.' && c!='S' && c!='G')continue;
				if(visited[x+dx[i]][y+dy[i]][(layer+1)%4] == id)continue;
				visited[x+dx[i]][y+dy[i]][(layer+1)%4] = id;
				X.push(x+dx[i]);
				Y.push(y+dy[i]);
				L.push(layer+1);
			}
		}
		cout<<"Case #"<<id<<": ";
		if(ans==-1)cout<<"impossible\n";
		else cout<<ans<<endl;

	}







	return 0;
}


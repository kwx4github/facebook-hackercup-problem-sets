#include <iostream>
#include <stdio.h>
#include <list>
using namespace std;

struct pkt{int x; int y; int w;};

int main()
{
    int t;
    scanf("%d",&t);
    for(int it=0;it<t;it++){
        printf("Case #%d: ",it+1);
        bool tab[102][102][5];
        bool odw[102][102][5];
        char pat[102][102];
        bool stat[102][102];

        int x,y; pkt ss,gg;
        scanf("%d %d",&y,&x);

        //Wczytanie tablicy i zerowanie tablic;

        for(int i=0;i<=y+1;i++){
            char a[102];
            if(i!=0&&i!=y+1){scanf("%s",a);}    // Pomijamy liniê 0 oraz n+1
            for(int j=0;j<=x+1;j++){
                if(j!=0&&j!=x+1&&i!=0&&i!=y+1){ // Jestem w polu
                    pat[i][j]=a[j-1];
                    bool h=(pat[i][j]=='.'||pat[i][j]=='G'||pat[i][j]=='S');  // Pole jest wolne  ?
                    stat[i][j]=h;
                    for(int k=1;k<=4;k++){tab[i][j][k]=h;odw[i][j][k]=(!h);} // Kopia dla tab; Zerowanie odw
                }
                else {                          // Jestem poza polem
                    stat[i][j]=false;                                               // Blokowanie granic
                    for(int k=1;k<=4;k++){tab[i][j][k]=false;odw[i][j][k]=true;}}  // Blokowanie granic
        }}
        // Analiza tablicy oznaczanie tablic

        for(int i=1;i<=y;i++){
            for(int j=1;j<=x;j++){
                int u=-1;
                if(pat[i][j]=='^'){u=0;}
                if(pat[i][j]=='<'){u=1;}
                if(pat[i][j]=='V'){u=2;}
                if(pat[i][j]=='>'){u=3;}
                if(pat[i][j]=='S'){ss.y=i;ss.x=j;}
                if(pat[i][j]=='G'){gg.y=i;gg.x=j;}

                if(u>=0){
                    int jj,ii;
                    jj=j;while(stat[i][jj+1]){tab[i][jj+1][(u+0)%4+1]=false; jj++;}// ->
                    ii=i;while(stat[ii+1][j]){tab[ii+1][j][(u+1)%4+1]=false; ii++;}// V
                    jj=j;while(stat[i][jj-1]){tab[i][jj-1][(u+2)%4+1]=false; jj--;}// <-
                    ii=i;while(stat[ii-1][j]){tab[ii-1][j][(u+3)%4+1]=false; ii--;}// ^
                }
            }
        }

        pkt p=ss;p.w=0;
        list<pkt>L;L.push_back(p);  //list<pkt>::iterator it;
        odw[p.y][p.x][4]=true;

        while(p.x!=gg.x||p.y!=gg.y){

            if(!odw[p.y-1][p.x][(p.w)%4+1]&& tab[p.y-1][p.x][(p.w)%4+1]){ pkt temp=p;temp.w++;
                odw[p.y-1][p.x][(p.w)%4+1]=true;       temp.y--;L.push_back(temp);} // ^


            if(!odw[p.y+1][p.x][(p.w)%4+1]&& tab[p.y+1][p.x][(p.w)%4+1]){ pkt temp=p;temp.w++;
                odw[p.y+1][p.x][(p.w)%4+1]=true;       temp.y++;L.push_back(temp);} // V


            if(!odw[p.y][p.x-1][(p.w)%4+1]&& tab[p.y][p.x-1][(p.w)%4+1]){  pkt temp=p;temp.w++;
                odw[p.y][p.x-1][(p.w)%4+1]=true;       temp.x--;L.push_back(temp);} // <-


            if(!odw[p.y][p.x+1][(p.w)%4+1]&& tab[p.y][p.x+1][(p.w)%4+1]){  pkt temp=p;temp.w++;
                odw[p.y][p.x+1][(p.w)%4+1]=true;       temp.x++;L.push_back(temp);} // ->



            if(!L.empty()){L.pop_front();   p=L.front();}
            else{ printf("impossible\n");break;}
            if(p.x==gg.x&&p.y==gg.y){printf("%d\n",p.w);break;}
        }
    }
    return 0;
}

/*

1
5 5
.....
.....
.V.#.
.....
.>...

*/


/*

1
9 9
S........
###.####.
#G#...^#.
#.#^..#..
#.##..#.#
#.......<
#.###...#
#.#...V.#
#.......#




*/

/*


cout<<endl;
        for(int k=1;k<=4;k++){
        for(int i=1;i<=y;i++){
            for(int j=1;j<=x;j++){
                cout<<tab[i][j][k];
            }
            cout<<endl;
        }
        cout<<endl<<endl;
        }


*/

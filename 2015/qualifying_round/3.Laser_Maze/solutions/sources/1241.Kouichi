#include <iostream>
#include <vector>
#include <cstdio>
#include <sstream>
#include <map>
#include <string>
#include <algorithm>
#include <queue>
#include <cmath>

using namespace std;

typedef struct{
	int to;
	int cost;
}edge;
 
 
 
//distance from s
//O(E log V)
void dijkstra(vector<vector<edge> > &G, vector<int> &dist, int s){

	//INF as distance
	const int INF = 10000000;
	
	//first : distance from s, second : its vertex
	priority_queue< pair<int,int> , vector<pair<int,int> >, greater< pair<int,int> > > pq;
	 
	fill(dist.begin(), dist.end(), INF);
	dist[s] = 0;
	pq.push( make_pair(dist[s], s) );
	while(!pq.empty()){
		pair<int,int> q = pq.top();
		pq.pop();
		int from = q.second;
		if(dist[from] < q.first) continue; // it's not minimum distance
		int n=G[from].size();
		for(int i=0; i<n; i++){
			edge e = G[from][i];
			if(dist[e.to] > dist[from] + e.cost){
				dist[e.to] = dist[from] + e.cost;
				pq.push( make_pair(dist[e.to], e.to) );
			}
		}
	}
}
 
void add_edge(vector<vector<edge> > &G, int from, int to, int cost){
	G[from].push_back( (edge){to, cost} );
	//G[to].push_back( (edge){from, cost} );
}


vector<int> x = {0,1,0,-1};
vector<int> y = {-1,0,1,0};

int main(){
	int T;
	cin >> T;
	for(int t=0; t<T; t++){
		int n,m;
		cin >> n >> m;
		
		vector<string> v(n);
		for(int i=0; i<n; i++){
			cin >> v[i];
		}

		int start = -1;
		int goal = -1;
		vector<vector<vector<bool> > > valid(4, vector<vector<bool> >(n,vector<bool>(m, true)));
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(v[i][j] == '.') continue;
				
				if(v[i][j] == 'S'){
					start = i*m + j;
				}else if(v[i][j] == 'G'){
					goal = i*m+j;
					
				}else if(v[i][j] == '#'){
					for(int k=0; k<4; k++){
						valid[k][i][j] = false;
					}
				}else{
					int dir;
					if(v[i][j] == '^') dir = 0;
					else if(v[i][j] == '>') dir = 1;
					else if(v[i][j] == 'v') dir = 2;
					else if(v[i][j] == '<') dir = 3;
					
					for(int k=0; k<4; k++){
						valid[k][i][j] = false;
						int add_x = x[ (k+dir)%4 ];
						int add_y = y[ (k+dir)%4 ];
						int pos_x = j + add_x;
						int pos_y = i + add_y;

						while(1){
							if(pos_x < 0 || pos_x >= m) break;
							if(pos_y < 0 || pos_y >= n) break;
							if(v[pos_y][pos_x] == '.' || v[pos_y][pos_x] == 'S' || v[pos_y][pos_x] == 'G'){
								valid[k][pos_y][pos_x] = false;
								pos_x += add_x;
								pos_y += add_y;
							}else{
								break;
							}
						}
					}
				}
				
			}
		}
/*
		for(int k=0; k<4; k++){
			cout << "t%4 = " << k << endl;
			for(int i=0; i<n; i++){
				for(int j=0; j<m; j++){
					cout << (valid[k][i][j]?".":"#");
				}
				cout << endl;
			}
			cout << endl;
		}
*/
		vector< vector<edge> > G(4*n*m);
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				for(int k=0; k<4; k++){
					int pos = i*m+j + n*m*k;
					//到達可能ならそこから次の時刻の4方向に辺を張る
					if(valid[k][i][j]){
						for(int l=0; l<4; l++){
							int xx = j+x[l];
							int yy = i+y[l];
							if(xx < 0 || xx >= m) continue;
							if(yy < 0 || yy >= n) continue;
							int next = yy*m + xx + n*m*((k+1)%4);
							
							if(valid[(k+1)%4][yy][xx]){
								add_edge(G, pos, next, 1);
							}
						}
					}
				}
			}
		}

		int ans = 10000000;
		vector<int> dist(4*n*m);
		for(int i=0; i<4; i++){
			int xx = start%m + x[i];
			int yy = start/m + y[i];
			if(xx<0 || xx>=m) continue;
			if(yy<0 || yy>=n) continue;

			//初期状態から一歩進んだところからスタート
			//時刻k=1
			int new_start = yy*m + xx + n*m*1;
			
			if(valid[1][yy][xx]){
				dijkstra(G, dist, new_start);
				for(int k=0; k<4; k++){
					ans = min(ans, dist[goal + n*m*k] + 1);
				}
			}
		}
		if(ans<10000000){
			cout << "Case #" << t+1 << ": " << ans << endl;
		}else{
			cout << "Case #" << t+1 << ": " << "impossible" << endl;
		}
		
	}
	return 0;
}
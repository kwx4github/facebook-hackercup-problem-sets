#include<bits/stdc++.h>

#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)

using namespace std;

struct Data { int cur,step; };
const int IINF = INT_MAX;

bool memo[110][110][4];
int dx[] = {0,1,0,-1}; // v, >, ^, <
int dy[] = {1,0,-1,0};
int h,w;
char a[110][110];

bool isValid(int x,int y) { return 0 <= x && x < w && 0 <= y && y < h; }

int getDir(char c) { 
  if( c == 'v' ) return 0;
  if( c == '>' ) return 1;
  if( c == '^' ) return 2;
  return 3;
}

bool check(int x,int y,int step,vector<int> &laser) {
  rep(i,(int)laser.size()){
    int lx = laser[i] % w, ly = laser[i] / w;
    int dir = ( getDir(a[ly][lx]) + step ) % 4;
    bool success = true;
    while( isValid(lx,ly) ){
      lx += dx[dir], ly += dy[dir];
      if( !isValid(lx,ly) ) break;
      if( a[ly][lx] != '.' ) break;
      if( lx == x && ly == y ) { success = false; break; }
    }
    if( !success ) return false;
  }
  return true;
}

void compute(){
  int sp,ep;
  vector<int> laser;
  rep(i,h) rep(j,w) {
    if( a[i][j] == 'S' ) { a[i][j] = '.'; sp = j + i * w; }
    if( a[i][j] == 'G' ) { a[i][j] = '.'; ep = j + i * w; }
    if( a[i][j] != '#' && a[i][j] != '.' ) laser.push_back(j+i*w);
    rep(k,4) memo[i][j][k] = false;
  }
  deque<Data> deq;
  deq.push_back((Data){sp,0});
  while( !deq.empty() ){
    Data data = deq.front(); deq.pop_front();
    int x = data.cur % w, y = data.cur / w;
    if( data.cur == ep ) { printf("%d\n",data.step); return; }
    int phase = data.step % 4;
    rep(i,4){
      int nx = x + dx[i], ny = y + dy[i];
      int nphase = ( phase + 1 ) % 4;
      if( !isValid(nx,ny) ) continue;
      if( !check(nx,ny,nphase,laser) ) continue;
      if( !memo[ny][nx][nphase] ) {
        memo[ny][nx][nphase] = true;
        deq.push_back((Data){nx+ny*w,data.step+1});
      }
    }
  }
  puts("impossible");
}

int main(){
  int T,CNT=1;
  cin >> T;
  while( T-- ){
    printf("Case #%d: ",CNT++);
    cin >> h >> w;
    rep(i,h) rep(j,w) cin >> a[i][j];
    compute();
  }
  return 0;
}

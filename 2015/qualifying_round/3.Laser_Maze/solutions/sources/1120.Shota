#if defined(__clang__)
#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <complex>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
#endif

#define inf(T) (numeric_limits<T>::min())
#define sup(T) (numeric_limits<T>::max())
#define rep(i,n) for (int i = 0; i < (n); i++)
#define asc(c) (c).begin(), (c).end()
#define desc(c) (c).rbegin(), (c).rend()
#define ascend(l,r) l = max(l, r)
#define descend(l,r) l = min(l, r)
#define mp(...) make_pair(__VA_ARGS__)
#define mt(...) make_tuple(__VA_ARGS__)

using namespace std;

using ll = long long;
using ld = long double;

template <class Key>          using uset = unordered_set<Key>;
template <class Key, class T> using umap = unordered_map<Key, T>;

template <class V>
std::map<V, V> bfs(
    V start,
    std::function<std::vector<V>(V)> adjs
) {
  std::queue<std::pair<V, V>> q;
  std::map<V, V> pred;
  q.push(std::make_pair(start, start));
  while (!q.empty()) {
    V t = q.front().first;
    V u = q.front().second;
    q.pop();
    if (pred.count(u)) continue;
    pred[u] = t;
    for (V v : adjs(u)) {
      if (pred.count(v)) continue;
      q.push(std::make_pair(u, v));
    }
  }
  return pred;
}

int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);

  using state_t = tuple<unsigned int, int, int>;

  const int INF = 1e9;
  const vector<int> dx = {1, 0, -1, 0};
  const vector<int> dy = {0, 1, 0, -1};
  const string turrets = "<^>v";

  int T;
  cin >> T;

  rep(i,T) {
    int M, N;
    cin >> M >> N;
    vector<string> maze(M);
    rep(j,M) cin >> maze[j];

    state_t start, goal;
    rep(j,M) rep(k,N) {
      if (maze[j][k] == 'S') {
        maze[j][k] = '.';
        start = mt(0, k, j);
      };
      if (maze[j][k] == 'G') {
        maze[j][k] = '.';
        goal = mt(0, k, j);
      }
    }

    auto pred = bfs<state_t>(
      start,
      [&](state_t v){
        unsigned int time = (get<0>(v) + 1) % 4;
        int& x = get<1>(v);
        int& y = get<2>(v);
        vector<decltype(v)> adjs;
        rep(j,4) {
          if (x + dx[j] < 0 || x + dx[j] >= N) continue;
          if (y + dy[j] < 0 || y + dy[j] >= M) continue;
          if (maze[y + dy[j]][x + dx[j]] != '.') continue;
          rep(k,4) {
            for (int l = 1;; l++) {
              if (x + dx[j] + dx[k] * l < 0 || x + dx[j] + dx[k] * l >= N) break;
              if (y + dy[j] + dy[k] * l < 0 || y + dy[j] + dy[k] * l >= M) break;
              if (maze[y + dy[j] + dy[k] * l][x + dx[j] + dx[k] * l] == turrets[(k - time + INF) % 4]) goto fail;
              if (maze[y + dy[j] + dy[k] * l][x + dx[j] + dx[k] * l] != '.') break;
            }
          }
          adjs.push_back(mt(time, x + dx[j], y + dy[j]));
fail:
          continue;
        }
        return adjs;
      }
    );

    int min_n_steps = INF;
    rep(j,4) {
      int n_steps = 0;
      auto state = mt(j, get<1>(goal), get<2>(goal));
      if (!pred.count(state)) continue;
      do {
        n_steps++;
        state = pred[state];
      } while (state != start);
      descend(min_n_steps, n_steps);
    }

    cout << "Case #" << i + 1 << ": " << (min_n_steps == INF ? "impossible" : to_string(min_n_steps)) << endl;
  }

  return 0;
}

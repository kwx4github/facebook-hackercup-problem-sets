#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <ext/algorithm>
#include <ext/hash_map>
#include <ext/hash_set>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define F(i,a,b)for(int i=a;i<b;++i)
#define rep(i,n)F(i,0,n)
#define all(a)a.begin(),a.end()
#define INF (1 << 25)
template<class T>vector<T>&operator<<(vector<T>& v,T t){v.push_back(t);return v;} 

typedef pair<int, int> pii;

int M, N;
char g[101][101];
struct st {
  int m;
  int n;
  int r;
  int d;
  st(int _m, int _n, int _r, int _d) : m(_m), n(_n), r(_r), d(_d) {}
};
int viz[101][101][4];
int d[101][101][4];
int sm, sn;
int fm, fn;
map<char, char> rotations{
  {'>', 'v'},
  {'v', '<'},
  {'<', '^'},
  {'^', '>'}};
map<char, pii> dx{
  {'>', make_pair(0, 1)},
  {'v', make_pair(1, 0)},
  {'<', make_pair(0, -1)},
  {'^', make_pair(-1, 0)}};

char rotate(char in, int rot) {
  rot %= 4;
  rep(i, rot) {
    in = rotations[in];
  }
  return in;
}


bool c_ok(int m, int n, int r) {
  if (m < 0 || m >= M) return false;
  if (n < 0 || n >= N) return false;
  if (g[m][n] == '#') return false;
  if (dx.find(g[m][n]) != dx.end()) return false;
  return true;
}

int grid_ok(int y, int x, int rot) {
  rot %= 4;
  if (!c_ok(y, x, rot)) return false;
  int m = y; 
  rep(n, N) {
    if (dx.find(g[m][n]) != dx.end()) {
      pii dir = dx[rotate(g[m][n], rot)];
      int mm = m;
      int nn = n;
      do {
        mm += dir.first;
        nn += dir.second;
        if (mm == y && nn == x) {
          return false;
        }
      } while (c_ok(mm,nn, -1));
    }
  }
  int n = x;
  rep(m, M) {
    if (dx.find(g[m][n]) != dx.end()) {
      pii dir = dx[rotate(g[m][n], rot)];
      int mm = m;
      int nn = n;
      do {
        mm += dir.first;
        nn += dir.second;
        if (mm == y && nn == x) {
          return false;
        }
      } while (c_ok(mm,nn, -1));
    }
  }
  return true;
}

int solve(int m, int n, int r) {
  deque<st> q;
  q.push_back(st(m,n,r,0));
  while (!q.empty()) {
    st s = q.front();
    s.r %= 4;
    q.pop_front();
    if (s.m == fm && s.n == fn) return s.d;
    if (viz[s.m][s.n][s.r]) continue;
    viz[s.m][s.n][s.r] = true;
    if (grid_ok(s.m-1, s.n, s.r+1)) {
      q.push_back(st(s.m-1, s.n, s.r+1, s.d+1));
    }
    if (grid_ok(s.m+1, s.n, s.r+1)) {
      q.push_back(st(s.m+1, s.n, s.r+1, s.d+1));
    }
    if (grid_ok(s.m, s.n-1, s.r+1)) {
      q.push_back(st(s.m, s.n-1, s.r+1, s.d+1));
    }
    if (grid_ok(s.m, s.n+1, s.r+1)) {
      q.push_back(st(s.m, s.n+1, s.r+1, s.d+1));
    }
  }
  return INF;
}

int main() {
  int T;
  cin >> T;
  rep(t, T) {
    memset(d, -1, sizeof(d));
    memset(viz, 0, sizeof(viz));
    cin >> M >> N; 
    rep(m, M) rep(n, N) {
      cin >> g[m][n];
      if (g[m][n] == 'S') {
        g[m][n] = '.';
        sm = m;
        sn = n;
      }
      if (g[m][n] == 'G') {
        g[m][n] = '.';
        fm = m;
        fn = n;
      }
    }

    int success = solve(sm, sn, 0);
    /*
    rep(r, 4) {
    rep(m, M) {
      rep(n, N) {
        cout << solve(m, n, r) << " ";
      }
      cout << endl;
    }
    cout << endl;
    }
    */
    cout << "Case #" << t + 1 << ": ";
    if (success >= INF) {
      cout << "impossible";
    } else {
      cout << success;
    }
    cout << endl;
  }
}

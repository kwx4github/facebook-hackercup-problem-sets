#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<cmath>
#include<stack>
#include<queue>
#include<map>
using namespace std;

#define sd(a) scanf("%d",&a)
#define pd(a) printf("%d\n",(a))
#define LL long long
#define F first
#define S second
#define MP make_pair
#define PB push_back


int i,t,m,n,j,k,l,si,sj,gi,gj,ans;
char maze[110][110];
bool go[5][110][110];
int reach[5][110][110];
void clear_up(int i,int j,int mod)
{
	int k;
	for(k=i-1;k>=0&&(maze[k][j]=='.'||maze[k][j]=='S'||maze[k][j]=='G');--k)
		go[mod][k][j]=0;
}
void clear_right(int i,int j,int mod)
{
	int k;
	for(k=j+1;k<n&&(maze[i][k]=='.'||maze[i][k]=='S'||maze[i][k]=='G');++k)
		go[mod][i][k]=0;
}
void clear_down(int i,int j,int mod)
{
	int k;
	for(k=i+1;k<m&&(maze[k][j]=='.'||maze[k][j]=='S'||maze[k][j]=='G');++k)
		go[mod][k][j]=0;
}
void clear_left(int i,int j,int mod)
{
	int k;
	for(k=j-1;k>=0&&(maze[i][k]=='.'||maze[i][k]=='S'||maze[i][k]=='G');--k)
		go[mod][i][k]=0;
}

void bfs(int si,int sj)
{
	pair< pair<int,int> , pair<int,int> > cur;
	int mod,i,j,steps;
	queue< pair< pair<int,int> , pair<int,int> > > q;
	q.push(MP(MP(si,sj),MP(0,0)));
	go[0][si][sj]=1;
	while(!q.empty())
	{
		cur=q.front();
		q.pop();
		i=cur.F.F;
		j=cur.F.S;
		mod=cur.S.F;
		steps=cur.S.S;
		if(go[mod][i][j]&&steps<reach[mod][i][j])
		{
			reach[mod][i][j]=steps;
			if(i>0)
				q.push(MP(MP(i-1,j),MP((mod+1)%4,steps+1)));
			if(j>0)
				q.push(MP(MP(i,j-1),MP((mod+1)%4,steps+1)));
			if(i<(m-1))
				q.push(MP(MP(i+1,j),MP((mod+1)%4,steps+1)));
			if(j<(n-1))
				q.push(MP(MP(i,j+1),MP((mod+1)%4,steps+1)));
		}
	}
}
int main()
{
	sd(t);
	for(k=1;k<=t;++k)
	{
		scanf("%d %d",&m,&n);
		for(i=0;i<m;++i)
		{
			scanf("%s",&maze[i]);
		}
		//for(i=0;i<m;++i)
		//{
		//	printf("%s\n",maze[i]);
		//}
		for(i=0;i<m;++i)
		{
			for(j=0;j<n;++j)
			{
				go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=1;
				if(maze[i][j]=='S')
				{
					si=i;
					sj=j;
				}
				else if(maze[i][j]=='G')
				{
					gi=i;
					gj=j;
				}
			}
		}
		for(i=0;i<m;++i)
		{
			for(j=0;j<n;++j)
			{
				if(maze[i][j]=='#')
					go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=0;
				else if(maze[i][j]=='<')
				{
					go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=0;
					clear_left(i,j,0);
					clear_up(i,j,1);
					clear_right(i,j,2);
					clear_down(i,j,3);
				}
				else if(maze[i][j]=='^')
				{
					go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=0;
					clear_left(i,j,3);
					clear_up(i,j,0);
					clear_right(i,j,1);
					clear_down(i,j,2);
				}
				else if(maze[i][j]=='>')
				{
					go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=0;
					clear_left(i,j,2);
					clear_up(i,j,3);
					clear_right(i,j,0);
					clear_down(i,j,1);
				}
				else if(maze[i][j]=='v')
				{
					go[0][i][j]=go[1][i][j]=go[2][i][j]=go[3][i][j]=0;
					clear_left(i,j,1);
					clear_up(i,j,2);
					clear_right(i,j,3);
					clear_down(i,j,0);
				}
			}
		}
		for(i=0;i<m;++i)
			for(j=0;j<n;++j)
				for(l=0;l<4;++l)
					reach[l][i][j]=1000000000;
		
		bfs(si,sj);
		ans=1000000000;
		for(i=0;i<4;++i)
		{
			if(reach[i][gi][gj]<ans)
				ans=reach[i][gi][gj];
		}
		if(ans==1000000000)
			printf("Case #%d: impossible\n",k);
		else
			printf("Case #%d: %d\n",k,ans);
	}
}

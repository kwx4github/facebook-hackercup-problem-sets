#include <assert.h>
#include <stdio.h>
#include <string.h>

#include <algorithm>
#include <queue>

using namespace std;

const char *L = "^>v<";
char B[101][101];

int dr[] = { -1, 0, 1,  0 };
int dc[] = {  0, 1, 0, -1 };
int memo[101][101][4];
int memo_turret[101][101][4];
int T, R, C;

int killed(int sr, int sc, int er, int ec, int dir) {
  int nr = sr + dr[dir];
  int nc = sc + dc[dir];
  while (nr >= 0 && nc >= 0 && nr < R && nc < C && B[nr][nc] == '.') {
    if (nr == er && nc == ec) return true;
    nr += dr[dir];
    nc += dc[dir];
  }
  return false;
}

int kena_turret(int r, int c, int step) {
  int &ret = memo_turret[r][c][step % 4];
  if (ret != -1) return ret;
  for (int i = 0; i < R; i++)
    for (int j = 0; j < C; j++)
      for (int k = 0; k < 4; k++)
        if (L[k] == B[i][j] && killed(i, j, r, c, (k + step) % 4))
          return ret = true;
  return ret = false;
}

int bfs(int sr, int sc, int er, int ec) {
  memset(memo, -1, sizeof(memo));
  memset(memo_turret, -1, sizeof(memo_turret));
  queue<int> Q;
  Q.push(sr * 1000 + sc);
  memo[sr][sc][0] = 0;
  for (int step = 1; !Q.empty(); step++) {
    int size = Q.size();
    for (int i = 0; i < size; i++) {
      int t = Q.front(); Q.pop();
      int r = t / 1000;
      int c = t % 1000;
      // printf("%d. %d %d\n", step, r, c);
      if (r == er && c == ec) return step - 1;
      for (int j = 0; j < 4; j++) {
        int nr = r + dr[j];
        int nc = c + dc[j];
        if (nr < 0 || nc < 0 || nr >= R || nc >= C || B[nr][nc] != '.') continue;
        if (memo[nr][nc][step % 4] != -1) continue;
        if (kena_turret(nr, nc, step)) continue;
        Q.push(nr * 1000 + nc);
        memo[nr][nc][step % 4] = step;
      }
    }
  }
  return -1;
}

int main() {
  scanf("%d", &T);
  for (int TC = 1; TC <= T; TC++) {
    scanf("%d %d", &R, &C);

    int sr = -1, sc, er = -1, ec;
    for (int i = 0; i < R; i++) {
      scanf("%s", B[i]);
      for (int j = 0; j < C; j++) {
        switch (B[i][j]) {
          case 'S': sr = i; sc = j; B[i][j] = '.'; break;
          case 'G': er = i; ec = j; B[i][j] = '.'; break;
        }
      }
    }
    assert(sr != -1 && er != -1);

    int steps = bfs(sr, sc, er, ec);
    if (steps == -1) {
      printf("Case #%d: impossible\n", TC);
    } else {
      printf("Case #%d: %d\n", TC, steps);
    }
  }
}

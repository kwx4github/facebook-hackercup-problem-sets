/* ¹®Á¦
	2015.

*/


#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <functional>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <iostream>

#define ENP 	printf("**Entry Point**\n")
#define A		first
#define B		second
#define MP		make_pair

using namespace std;

typedef long long ll;
typedef vector 	<double> 			vec_d;
typedef vector 	<vec_d>				vvec_d;
typedef vector 	<int>				vec_i;
typedef vector 	<vec_i>				vvec_i;
typedef pair 	<int, int> 			pair_i;
typedef pair 	< pair_i, pair_i > 	pp_i;

const int INF = 0x7fffffff;
const int MINF = 0x80000000;
const int mod = 1000000007;
const int cons = 100001;

int vis[4][102][102];
char Map[4][102][102];
char laserPic[4] = { '^', '>', 'v', '<' };

vector <pair_i> laser;
pair_i st, en;

int ans;
int n, m;

void printMap(int dir)
{
	puts("");
	printf("dir : %d\n", dir);
	for (int i = 1; i <= n; i++)
	{
		printf("%s\n", Map[dir][i] + 1);
	}
	puts("");
}

void ByLaser(int y, int x, int dir, int nowMap)
{
	int dx[4] = { 0, 1, 0, -1 };
	int dy[4] = { -1, 0, 1, 0 };
	
	while (1)
	{
		y += dy[dir];
		x += dx[dir];

		if (y > n || y < 1)
			break;
		if (x > m || x < 1)
			break;
		if (Map[nowMap][y][x] != '.' && Map[nowMap][y][x] != 'S' && Map[nowMap][y][x] != 'G' && Map[nowMap][y][x] != 'L')
			break;

		Map[nowMap][y][x] = 'L';
	}
}

void UpdateMap()
{
	for (int i = 1; i < 4; i++)
	{
		for (int j = 0; j < laser.size(); j++)
		{
			int y = laser[j].A;
			int x = laser[j].B;
			int dir;

			for (dir = 0; dir < 4; dir++)
			{
				if (Map[i - 1][y][x] == laserPic[dir])
					break;
			}

			Map[i][y][x] = laserPic[(dir + 1) % 4];
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < laser.size(); j++)
		{
			int y = laser[j].A;
			int x = laser[j].B;
			int dir;

			for (dir = 0; dir < 4; dir++)
			{
				if (Map[i][y][x] == laserPic[dir])
					break;
			}

			ByLaser(y, x, dir, i);
		}
	}
}

bool IsPossible(int y, int x, int dir)
{
	for (int i = 0; i < 4; i++)
	{
		if (Map[dir][y][x] == laserPic[i])
			return false;
	}

	if (Map[dir][y][x] == 'L' || Map[dir][y][x] == '#')
		return false;

	return true;
}

void go(int y, int x, int dist)
{
	int dir = dist % 4;

	vis[dir][y][x] = dist;

	if (y == en.A && x == en.B)
	{
		ans = min(ans,dist);
		return;
	}

	if (abs(y - en.A) + abs(x - en.B) + dist >= ans)
		return;

	dir = (dist + 1) % 4;

	if (x > 1 && IsPossible(y, x - 1, dir))
	{
		if (vis[dir][y][x - 1] > dist + 1)
		{
			go(y, x - 1, dist + 1);
		}
	}
	if (x < m && IsPossible(y, x + 1, dir))
	{
		if (vis[dir][y][x + 1] > dist + 1)
		{
			go(y, x + 1, dist + 1);
		}
	}
	if (y > 1 && IsPossible(y - 1, x, dir))
	{
		if (vis[dir][y - 1][x] > dist + 1)
		{
			go(y - 1, x, dist + 1);
		}
	}
	if (y < n && IsPossible(y + 1, x, dir))
	{
		if (vis[dir][y + 1][x] > dist + 1)
		{
			go(y + 1, x, dist + 1);
		}
	}

}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("laser_maze.txt", "r", stdin);
	freopen("output.txt","w", stdout);
#endif

	int TestNum;
	scanf("%d", &TestNum);
	
	for(int TestCase = 1; TestCase <= TestNum; TestCase++)
	{
		printf("Case #%d: ", TestCase);

		laser.clear();
		memset(vis, 0x7f, sizeof(vis));
		memset(Map, 0 , sizeof(Map));
		ans = INF;

		scanf("%d%d", &n, &m);

		// ^ : 1, > : 2, v : 3, < : 4 
		for (int i = 1; i <= n; i++)
		{
			scanf("%s", Map[0][i] + 1);

			for (int j = 1; j <= m; j++)
			{
				if (Map[0][i][j] == '^')
				{
					laser.push_back(MP(i, j));
				}
				if (Map[0][i][j] == '>')
				{
					laser.push_back(MP(i, j));
				}
				if (Map[0][i][j] == 'v')
				{
					laser.push_back(MP(i, j));
				}	
				if (Map[0][i][j] == '<')
				{
					laser.push_back(MP(i, j));
				}
				if (Map[0][i][j] == 'S')
				{
					st = MP(i, j);
				}
				if (Map[0][i][j] == 'G')
				{
					en = MP(i, j);
				}
			}
		}

		memcpy(Map[1], Map[0], sizeof(Map[0]));
		memcpy(Map[2], Map[0], sizeof(Map[0]));
		memcpy(Map[3], Map[0], sizeof(Map[0]));

		UpdateMap();
	//	for (int i = 0; i < 4; i++)printMap(i);

		go(st.A, st.B, 0);

		if (ans != INF)
			printf("%d\n" ,ans);
		else
			printf("impossible\n");

	}

	return 0;
}
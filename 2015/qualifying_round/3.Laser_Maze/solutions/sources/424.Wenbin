#include <iostream>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <string>
#include <ctime>
#include <cmath>
#include <vector>
#include <deque>
#include <string>
#include <cctype>
#include <queue>
using namespace std;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define RFOR(i,a,b) for(int i=(a);i>=(b);--i)

typedef long long LL;

#define MAXN 105

int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
char mat[MAXN][MAXN];
int st[4][MAXN][MAXN];
int mm[4][MAXN][MAXN];
int sx, sy, gx, gy;

class item {
public:
    int x;
    int y;
    int d;
    item(int _x, int _y, int _d) : x(_x), y(_y), d(_d) {}
};

bool isok(char ch) {
    if (ch == '#' || ch == '^' || ch == '>' || ch == 'v' || ch == '<') return false;
    return true;
}

void run() {
    int m, n;
    cin >> m >> n;
    REP(i,m) {
        string s;
        cin >> s;
        REP(j,n) mat[i][j] = s[j];
    }
    memset(st, 0, sizeof(st));
    REP(r,m) {
        REP(c,n) {
            if (mat[r][c] == 'S') {
                sx = r, sy = c;
            } else if (mat[r][c] == 'G') {
                gx = r, gy = c;
            } else if (mat[r][c] == '#') {
                REP(d,4) st[d][r][c] = 1;
            } else if (mat[r][c] == '.') {
                continue;
            } else {
                int idx = 0;
                if (mat[r][c] == '^') idx = 0;
                else if (mat[r][c] == '>') idx = 1;
                else if (mat[r][c] == 'v') idx = 2;
                else idx = 3;
                REP(di,4) {
                    int t = (idx + di) % 4;
                    int x = r, y = c;
                    st[di][x][y] = 1;
                    while (true) {
                        x += dir[t][0], y += dir[t][1];
                        if (x < 0 || x >= m || y < 0 || y >= n) break;
                        if (!isok(mat[x][y])) break;
                        st[di][x][y] = 1;
                    }
                }
            }
        }
    }
    memset(mm, -1, sizeof(mm));
    int cnt = 0;
    mm[0][sx][sy] = 0;
    deque<item> que;
    que.push_back(item(sx, sy, 0));
    while (!que.empty()) {
        int sz = que.size();
        ++cnt;
        int d = (cnt % 4);
        REP(i,sz) {
            int cx = que.front().x;
            int cy = que.front().y;
            int cd = que.front().d;
            que.pop_front();
            REP(di,4) {
                int nx = cx + dir[di][0];
                int ny = cy + dir[di][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                if (st[d][nx][ny] == 1) continue;
                if (mm[d][nx][ny] != -1 && cnt >= mm[d][nx][ny]) continue;
                mm[d][nx][ny] = cnt;
                que.push_back(item(nx, ny, d));
                if (nx == gx && ny == gy) {
                    cout << cnt << endl;
                    return;
                }
            }
        }
    }
    cout << "impossible" << endl;
}

int main() {
    int T;
    cin >> T;
    FOR(t,1,T) {
        cout << "Case #" << t << ": ";
        run();
    }
    return 0;
}


#include <vector>
#include <string>
#include <cstdio>
#include <deque>
#include <cassert>
#include <cstring>
using namespace std;

#define V(x) vector<x >
#define vs V(string)
#define vi V(int)
#define vd V(double)

#define fr(x,y,z) for((x)=(y);(x)<(z);(x)++)
#define fo(x,y) fr(x,0,y)
#define fir(n) fo(i,n)
#define fjr(n) fo(j,n)
#define fkr(n) fo(k,n)
#define fi fir(n)
#define fj fjr(n)

#define pb push_back
#define sz size()
#define cs c_str()


struct st { int y; int x; int t; };
deque<st> q;
int m,n;
int opt[100][100][4];
char f[100][128];

void foo(const int y, const int x, const int t) {
  char rot[5]="v>^<";
  const int d=t%4;
  if(y<0 || y>=m || x<0 || x>=n) return;
  if(opt[y][x][d]>0) {
    assert(opt[y][x][d]<=t);
    return;
  }
  int i=y,j=x;
  if(f[i][j]=='S' || f[i][j]=='G' || f[i][j]=='.') {} else return;
  for(i=y-1,j=x;i>=0;i--) {
    if(f[i][j]=='S' || f[i][j]=='G' || f[i][j]=='.') continue;
    if(f[i][j]==rot[d%4]) return;
    break;
  }
  for(i=y+1,j=x;i<m;i++) {
    if(f[i][j]=='S' || f[i][j]=='G' || f[i][j]=='.') continue;
    if(f[i][j]==rot[(d+2)%4]) return;
    break;
  }
  for(i=y,j=x-1;j>=0;j--) {
    if(f[i][j]=='S' || f[i][j]=='G' || f[i][j]=='.') continue;
    if(f[i][j]==rot[(d+1)%4]) return;
    break;
  }
  for(i=y,j=x+1;j<n;j++) {
    if(f[i][j]=='S' || f[i][j]=='G' || f[i][j]=='.') continue;
    if(f[i][j]==rot[(d+3)%4]) return;
    break;
  }
  opt[y][x][d]=t;
  { q.pb(st()); q.back().y=y; q.back().x=x; q.back().t=t; opt[i][j][d]=t; }
}


int main(void) {
  int nc;
  assert(scanf("%d",&nc)==1);
  for(int cas=1;cas<=nc;cas++) {
    int i,j,k;
    assert(scanf("%d%d",&m,&n)==2);
    fir(m) assert(scanf("%s",f[i])==1),assert(strlen(f[i])==n);
    q.clear();
    fir(m) fj fkr(4) opt[i][j][k]=0;

    fir(m) fj if(f[i][j]=='S') { q.pb(st()); q.back().y=i; q.back().x=j; q.back().t=4; opt[i][j][0]=4; }
    assert(q.sz==1);
    while(q.sz) {
      const int i=q.front().y;
      const int j=q.front().x;
      const int t=q.front().t;
      q.pop_front();
      foo(i-1,j,t+1);
      foo(i+1,j,t+1);
      foo(i,j-1,t+1);
      foo(i,j+1,t+1);
    }
    k=0;
    int ans=0;
    fir(m) fj if(f[i][j]=='G') {
      int d;
      fo(d,4) if(opt[i][j][d] && (ans==0 || opt[i][j][d]<ans)) ans=opt[i][j][d];
    }
    if(!ans)
      printf("Case #%d: impossible\n",cas);
    else 
      printf("Case #%d: %d\n",cas,ans-4);
  }
  return 0;
}


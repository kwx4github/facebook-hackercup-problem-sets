#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>
#include <queue>

using namespace std;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) FOR(i, 0, n)
#define TRACE(x) cout << #x << " = " << x << endl
#define _ << " _ " <<

typedef long long llint;

const int MAXN = 110;
const int inf = 1e9;

int dx[] = {+1, 0, -1, 0};
int dy[] = {0, -1, 0, +1};

char a[MAXN][MAXN];
int d[MAXN][MAXN][4];
bool good[MAXN][MAXN][4];
int n, m;

queue<int> Q;

bool valid(int x, int y) {
  return 0 <= x && x < n && 0 <= y && y < m;
}

int main(void) {
  int TC;
  scanf("%d", &TC);
  for (int tp = 1; tp <= TC; ++tp) {
    scanf("%d %d", &n, &m);
    REP(i, n) scanf("%s", a[i]);
    
    int sx = -1, sy = -1, ex = -1, ey = -1;
    REP(i, n) REP(j, m)
      if (a[i][j] == 'S') {
        sx = i, sy = j;
        a[i][j] = '.';
      } else
        if (a[i][j] == 'G') {
          ex = i, ey = j;
          a[i][j] = '.';
        }
    
    REP(k, 4) {
      REP(i, n) REP(j, m) 
        good[i][j][k] = a[i][j] == '.';
      REP(i, n) REP(j, m) {
        int d = -1;
        if (a[i][j] == 'v') d = 0;
        if (a[i][j] == '<') d = 1;
        if (a[i][j] == '^') d = 2;
        if (a[i][j] == '>') d = 3;
        if (d == -1) continue;

        d = (d + k) % 4;
        int x = i + dx[d], y = j + dy[d];
        while (valid(x, y) && a[x][y] == '.') {
          good[x][y][k] = false;
          x += dx[d], y += dy[d];
        }
      }
    }

    REP(i, n) REP(j, m) REP(k, 4) d[i][j][k] = inf;
    Q.push(sx);
    Q.push(sy);
    Q.push(0);
    d[sx][sy][0] = 0;

    int ans = inf;
    while (!Q.empty()) {
      int x = Q.front(); Q.pop();
      int y = Q.front(); Q.pop();
      int c = Q.front(); Q.pop();

      if (x == ex && y == ey) {
        ans = d[x][y][c];
        break;
      }

      REP(k, 4) {
        int nx = x + dx[k], ny = y + dy[k], nc = (c + 1) % 4;

        if (!valid(nx, ny) || !good[nx][ny][nc]) continue;
        if (d[x][y][c]+1 < d[nx][ny][nc]) {
          d[nx][ny][nc] = d[x][y][c] + 1;
          Q.push(nx);
          Q.push(ny);
          Q.push(nc);
        }
      }
    }

    printf("Case #%d: ", tp);
    if (ans == inf) printf("impossible\n"); else
      printf("%d\n", ans);

    fprintf(stderr, "Case #%d: ", tp);
    if (ans == inf) fprintf(stderr, "impossible\n"); else
      fprintf(stderr, "%d\n", ans);
  }
  return 0;
}

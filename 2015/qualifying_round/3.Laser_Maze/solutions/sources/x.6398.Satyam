#include <bits/stdc++.h>

using namespace std;

#define S(x) scanf("%d",&x);
#define Sc(x) scanf("%c",&x);
#define FOR(i,x) for(int i=0;i<x;i++)
#define MP make_pair
#define pii pair<int,int>

#define MAX 110

queue< pair< pii , pii > > q;
char a[MAX][MAX];
pii arr[4];
bool visited[MAX][MAX][4];

bool isValid(int x,int y,int n,int m) {
    return (x>=0 && x<n && y>=0 && y<m);
}

bool isReachable(int x,int y,int n,int m) {
    if(isValid(x,y,n,m)) {
        return (a[x][y]=='.' || a[x][y] == 'S' || a[x][y] == 'G');
    }
    return false;
}

int main() {

    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_output.txt","w",stdout);

    int t;
    char laser[] = {'^','>','v','<'};
    S(t);
    FOR(t1,t) {
        int n,m,count=0;
        pii p1,p2;
        S(n);S(m);
        FOR(i,n) {
            FOR(j,m) {
                cin>>a[i][j];
                FOR(k,4)
                    visited[i][j][k] = false;
                if(a[i][j] == 'S')
                    p1 = MP(i,j);
            }
        }
 //       cout<<p1.first<<" "<<p1.second<<endl;
        q = queue< pair< pii , pii > >();
        q.push(MP(p1,MP(0,0)));
        visited[p1.first][p1.second][0] = true;

        while(!q.empty()) {
            p1 = q.front().first;
            p2 = q.front().second;
            if(a[p1.first][p1.second] == 'G')
                break;
            q.pop();

            int i,j,count = p2.first+1;
            bool flag = true;

            i = p1.first; j = p1.second;
            arr[0] = MP(i-1,j);
            arr[1] = MP(i,j-1);
            arr[2] = MP(i,j+1);
            arr[3] = MP(i+1,j);

            for(int temp = 0;temp<4;temp++) {
                i = arr[temp].first;
                j = arr[temp].second;
                if(visited[i][j][count])
                    continue;

                flag=true;
                if(isReachable(i,j,n,m)) {
                    for(int k=j-1;k>=0;k--) {
                        if(a[i][k] == '#')
                            break;
                        FOR(l,4) {
                            if(a[i][k] == laser[l]) {
                                if(laser[(l+count) % 4] == '>')
                                    flag = false;
                            break;
                            }
                        }
                    }

                    for(int k=j+1;k<m && flag;k++) {
                        if(a[i][k] == '#')
                            break;
                        FOR(l,4) {
                            if(a[i][k] == laser[l]) {
                                if(laser[(l+count) % 4] == '<')
                                    flag = false;
                            break;
                            }
                        }
                    }

                    for(int k=i-1;k>=0 && flag;k--) {
                        if(a[k][j] == '#')
                            break;
                        FOR(l,4) {
                            if(a[k][j] == laser[l]) {
                                if(laser[(l+count) % 4] == 'v')
                                    flag = false;
                            break;
                            }
                        }
                    }

                    for(int k=i+1;k<n;k++) {
                        if(a[k][j] == '#')
                            break;
                        FOR(l,4) {
                            if(a[k][j] == laser[l]) {
                                if(laser[(l+count) % 4] == '^')
                                    flag = false;
                            break;
                            }
                        }
                    }

                    if(flag) {
                        count%= 4;
                        visited[i][j][count]=true;
 //                       printf("%d %d %d %d\n",i,j,count,p2.second+1);
                        q.push(MP(MP(i,j),MP(count,p2.second+1)));
                    }
                }
            }
        }

        printf("Case #%d: ",t1+1);
        if(q.empty()) {
            cout<<"Impossible"<<endl;
        }
        else {
            cout<<p2.second<<endl;
        }
    }
}

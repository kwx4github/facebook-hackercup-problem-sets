#include<stdio.h>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
#define FOR(i,N) for(int i=0;i<N;i++)
#define FORV(i,V,N) for(int i=V;i<N;i++)
struct Node
{
	int r,c,dist;
	Node(){}
	Node(int _r,int _c,int _dist)
	{
		r=_r;
		c=_c;
		dist=_dist;
	}
};
int laser[5][110][110];
int vis[5][110][110]; 
char grid[110][110];
int R,C;
int dr[]={-1,0,1,0};//clockwise
int dc[]={0,1,0,-1};//clockwise
int getinit(int r,int c)
{
	if(grid[r][c]=='^')return 0;
	if(grid[r][c]=='>')return 1;
	if(grid[r][c]=='v')return 2;
	if(grid[r][c]=='<')return 3;
	return -1;
}
void prelaser()
{
	FOR(i,R)
	{
		FOR(j,C)
		{
			int istate=getinit(i,j);
			if(istate==-1)continue;
			
			FOR(t,4)
			{
				//laser[t][i][j]=(istate+t)%4;
				int r=i+dr[(istate+t)%4],c=j+dc[(istate+t)%4];
				//printf(">>>>>%d,%d\n",r,c);
				while(r<R&&r>-1&&c<C&&c>-1)
				{
					if(grid[r][c]=='#'||getinit(r,c)!=-1)break;
					laser[t][r][c]=5;
					r+=dr[(istate+t)%4],c+=dc[(istate+t)%4];
				}
				
			}
		}
	}
}
int bfs(int sr,int sc)
{
	queue<Node> Q;
	Q.push(Node(sr,sc,0));
	memset(vis,0,sizeof(vis));
	while(!Q.empty())
	{
		Node cur=Q.front();
		Q.pop();
	/*	FOR(i,cur.dist)
		printf(">");
		printf("(%d,%d,%d)\n",cur.r,cur.c,cur.dist);*/
		if(grid[cur.r][cur.c]=='G')return cur.dist;// Goal
		if(vis[cur.dist%4][cur.r][cur.c])continue;// got here before with the same configuration
		vis[cur.dist%4][cur.r][cur.c]=1;
		//move in 4 dir
		FOR(i,4)
		{
			int nr=cur.r+dr[i],nc=cur.c+dc[i];
			if(nr>=R||nc>=C||nr<0||nc<0)continue;// limits
			if(grid[nr][nc]=='#'||getinit(nr,nc)!=-1)continue;
			if(laser[(cur.dist+1)%4][nr][nc])continue;// there will be a laser beam
			if(vis[(cur.dist+1)%4][nr][nc])continue;// already visited
			Q.push(Node(nr,nc,cur.dist+1));
		}
	}
	return -1;
}
int main()
{
	int T;
	scanf("%d",&T);
	FOR(t,T)
	{
		memset(laser,0,sizeof(laser));
		scanf("%d %d",&R,&C);
		int sr,sc;
		FOR(i,R)
		{
			scanf("%s",grid[i]);
			FOR(j,C)
			if(grid[i][j]=='S'){
				sr=i,sc=j;
				break;
			}
		}
		/*FOR(i,R)
		{
			FOR(j,C)
			{
				fprintf(stderr,"%c",grid[i][j]);
			}
			fprintf(stderr,"\n");
		}
		fprintf(stderr,"===============\n");
		*/
		prelaser();
		/*FOR(tt,4){
		FOR(i,R)
		{
			FOR(j,C)
			{
				fprintf(stderr,"%2d",laser[tt][i][j]);
			}
			fprintf(stderr,"\n");
		}fprintf(stderr,"===============\n");}
		fprintf(stderr,"------------===============-------------\n");
		*/
		printf("Case #%d: ",t+1);
		int res=bfs(sr,sc);
		if(res==-1)
		printf("impossible\n");
		else
		printf("%d\n",res);
		
	}
	return 0;
}

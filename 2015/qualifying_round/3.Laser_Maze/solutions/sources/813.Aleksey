const
    MAXN = 101;
    MAXQ = MAXN * MAXN * 4;
    INF = MAXQ + MAXQ;
    dx: array [1 .. 4] of longint = (-1, 0, 1, 0);
    dy: array [1 .. 4] of longint = (0, 1, 0, -1);
var
    s: array [1 .. MAXN] of string;
    a: array [1 .. 4, 1 .. MAXN, 1 .. MAXN] of boolean;
    f: array [1 .. 4, 1 .. MAXN, 1 .. MAXN] of longint;
    q: array [1 .. MAXQ] of record
        x, y, t: longint;
    end;
    qb, qe: longint;
    i, j, k: longint;
    t, test: longint;
    ans, d, n, m: longint;
    x, y, xs, ys, xf, yf: longint;

function inside(const x, y: longint): boolean;
begin
    inside := (1 <= x) and (x <= n) and (1 <= y) and (y <= m);
end;

begin
    assign(input, 'inp');
    reset(input);
    assign(output, 'out');
    rewrite(output);
    readln(t);
    for test := 1 to t do begin
        readln(n, m);
        for i := 1 to n do begin
            readln(s[i]);
        end;
        fillchar(a, sizeof(a), false);
        for i := 1 to n do begin
            for j := 1 to m do begin
                case s[i][j] of
                    'S': begin
                        xs := i;
                        ys := j;
                        s[i][j] := '.';
                    end;
                    'G': begin
                        xf := i;
                        yf := j;
                        s[i][j] := '.';
                    end;
                end;
            end;
        end;
        for i := 1 to n do begin
            for j := 1 to m do begin
                case s[i][j] of
                    '<', '>', '^', 'v': begin
                        case s[i][j] of
                            '<': d := 4;
                            '>': d := 2;
                            '^': d := 1;
                            'v': d := 3;
                        end;
                        for k := 1 to 4 do begin
                            d := d mod 4 + 1;
                            x := i + dx[d];
                            y := j + dy[d];
                            while inside(x, y) and (s[x][y] = '.') do begin
                                a[k][x][y] := true;
                                inc(x, dx[d]);
                                inc(y, dy[d]);
                            end;
                        end;
                    end;
                end;
            end;
        end;
        fillchar(f, sizeof(f), 0);
        qb := 0;
        qe := 1;
        q[qe].x := xs;
        q[qe].y := ys;
        q[qe].t := 4;
        f[4][xs][ys] := 1;
        while (qb < qe) do begin
            inc(qb);
            x := q[qb].x;
            y := q[qb].y;
            t := q[qb].t;
            k := f[t][x][y];
            t := t mod 4 + 1;
            for i := 1 to 4 do begin
                inc(x, dx[i]);
                inc(y, dy[i]);
                if (inside(x, y) and (s[x][y] = '.') and (not a[t][x][y]) and (f[t][x][y] = 0)) then begin
                    f[t][x][y] := k + 1;
                    inc(qe);
                    q[qe].x := x;
                    q[qe].y := y;
                    q[qe].t := t;
                end;
                dec(x, dx[i]);
                dec(y, dy[i]);
            end;
        end;
        ans := INF;
        for k := 1 to 4 do begin
            if (f[k][xf][yf] < ans) and (f[k][xf][yf] <> 0) then begin
                ans := f[k][xf][yf] - 1;
            end;
        end;
        write('Case #', test, ': ');
        if ans = INF then
            writeln('impossible')
        else
            writeln(ans);
    end;
end.


#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i = 0; i <n; i++)

int m,n;
/*
S -> 1
G -> 2
. -> 0
#-> -1
^ -> -2
> -> -3
v -> -4
< -> -5
*/

int arr[100][100], dp[100][100][4];
bool visited[100][100][4], laser[100][100][4];

int x,y;
void dfs(int i, int j, int state){

	if (visited[i][j][state]) return;
	visited[i][j][state] = true;
	if (i == x && j == y){
		dp[i][j][state] = 0;
		return;
	}
	int ans = 100000;
	if (i > 0)   if(arr[i-1][j] >= 0 && !laser[i-1][j][(state+1)%4]) {dfs(i-1,j,(state+1)%4); ans = min(ans,dp[i-1][j][(state+1)%4]);}
	if (j > 0)   if(arr[i][j-1] >= 0 && !laser[i][j-1][(state+1)%4]) {dfs(i,j-1,(state+1)%4); ans = min(ans,dp[i][j-1][(state+1)%4]);}
	if (i < m-1) if(arr[i+1][j] >= 0 && !laser[i+1][j][(state+1)%4]) {dfs(i+1,j,(state+1)%4); ans = min(ans,dp[i+1][j][(state+1)%4]);}
	if (j < n-1) if(arr[i][j+1] >= 0 && !laser[i][j+1][(state+1)%4]) {dfs(i,j+1,(state+1)%4); ans = min(ans,dp[i][j+1][(state+1)%4]);}
	dp[i][j][state] = 1 + ans;
	//cout << "i " << i << " j " << j << " state " << state << " ans " << dp[i][j][state] <<endl; 
	return;
}

int main(){
	int t; cin >> t;
	rep(q, t){
		int a,b;
		cin >> m >> n;
		char c;
		rep(i, m) rep(j, n) {
			rep(k, 4) {
				visited[i][j][k] = false;
				laser[i][j][k] = false;
				dp[i][j][k] = 100000;
			}
			cin >> c;
			if (c == 'S') {arr[i][j] = 1; a = i; b = j;}
			else if (c == 'G') {arr[i][j] = 2; x = i; y = j;}
			else if (c == '.') arr[i][j] = 0;
			else if (c == '#') arr[i][j] = -1;
			else if (c == '^') arr[i][j] = -2;
			else if (c == '>') arr[i][j] = -3;
			else if (c == 'v') arr[i][j] = -4;
			else arr[i][j] = -5;
		}

		rep(i, m) rep(j, n){
			if (arr[i][j] < -1){
				int temp = 6 + arr[i][j];
				int var = i-1;
				while(var >= 0){
					if (arr[var][j] < 0) break;
					laser[var][j][temp%4] = true;
					var--;
				}
				var = j+1;
				while(var < n){
					if (arr[i][var] < 0) break;
					laser[i][var][(temp+1)%4] = true;
					var++;
				}
				var = i+1;
				while(var < m){
					if (arr[var][j] < 0) break;
					laser[var][j][(temp+2)%4] = true;
					var++;
				}
				var = j-1;
				while(var >= 0){
					if (arr[i][var] < 0) break;
					laser[i][var][(temp+3)%4] = true;
					var--;
				}	
			}
		}

		dfs(a,b,0);
		if (dp[a][b][0] >= 100000) cout << "Case #" << q+1 << ": impossible\n";
		else cout << "Case #" << q+1 << ": " << dp[a][b][0] <<"\n";
		//rep(i, m) {rep(j, n) {rep(k, 4) cout << dp[i][j][k]; cout << " ";} cout << endl;}
/*
		parr = new int[n];
		carr = new int[n];
		farr = new int[n];
		rep(i,n) cin >> parr[i] >> carr[i] >> farr[i];
		if (sat(0, p, c, f)) cout << "Case #" << q+1 << ": yes\n";
		else cout << "Case #" << q+1 << ": no\n";
		*/
	}
}
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <limits>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <list>
#include <string>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int INF = 1e9;

struct state
{
	int r, c, t;
};

const int dmax = 105;
char maze[dmax][dmax];
bool open[dmax][dmax];
bool ok[4][dmax][dmax];
int dist[4][dmax][dmax];

const int dr[] = {0, 1, 0, -1};
const int dc[] = {1, 0, -1, 0};

int main(int argc,char* argv[])
{
	int num_test_cases;
	scanf("%d",&num_test_cases);
	for(int test_case=1; test_case<=num_test_cases; test_case++)
	{
		int R, C;
		scanf("%d%d", &R, &C);
		for(int r=1;r<=R;r++)
			scanf(" %s", &maze[r][1]);
		memset(open, false, sizeof(open));
		memset(ok, false, sizeof(ok));
		
		int sr, sc, gr, gc;
		for(int r=1;r<=R;r++)
			for(int c=1;c<=C;c++)
			{
				bool _open = false;
				switch(maze[r][c])
				{
				case 'S':
					sr = r;
					sc = c;
					_open = true;
					break;
				case 'G':
					gr = r;
					gc = c;
					_open = true;
					break;
				case '.':
					_open = true;
					break;
				case '#':
					break;
				}
				
				open[r][c] = _open;
				for(int s=0;s<4;s++)
					ok[s][r][c] = _open;
			}

		for(int r=1;r<=R;r++)
			for(int c=1;c<=C;c++)
			{
				int laser = -1;
				switch(maze[r][c])
				{
				case '>':
					laser = 0;
					break;
				case 'v':
					laser = 1;
					break;
				case '<':
					laser = 2;
					break;
				case '^':
					laser = 3;
					break;
				}
				if(laser == -1)
					continue;
				for(int s=0;s<4;s++)
				{
					int d = (laser + s) % 4;
					int rr=r, cc=c;
					do
					{
						ok[s][rr][cc] = false;
						rr+=dr[d];
						cc+=dc[d];
					} while(open[rr][cc]);
				}
			}
/*
		for(int r=1;r<=R;r++)
		{
			for(int c=1;c<=C;c++)
				printf("%c", open[r][c] ? '.' : '#');
			printf("\n");
		}
		printf("\n");

		for(int s=0;s<4;s++)
		{
			printf("%d\n", s);
			for(int r=1;r<=R;r++)
			{
				for(int c=1;c<=C;c++)
					printf("%c", ok[s][r][c] ? '.' : '#');
				printf("\n");
			}
			printf("\n");
		}
*/			
		for(int s=0;s<4;s++)
			for(int r=1;r<=R;r++)
				for(int c=1;c<=C;c++)
					dist[s][r][c] = INF;
		dist[0][sr][sc] = 0;

		queue<state> q;
		q.push(state{sr, sc, 0});
		int res = -1;
		while(!q.empty() && res == -1)
		{
			state cur = q.front();
			int r = cur.r, c = cur.c, t = cur.t;
			q.pop();

			if(r == gr && c == gc)
				break;
			
			int s = (t+1)%4;
			for(int d=0;d<4;d++)
			{
				int rr = r+dr[d];
				int cc = c+dc[d];
				if(ok[s][rr][cc] && t+1 < dist[s][rr][cc])
				{
					dist[s][rr][cc] = t+1;
					if(rr == gr && cc == gc)
						res = t+1;
					q.push(state{rr, cc, t+1});
				}
			}
		}
		printf("Case #%d: ", test_case);
		if(res == -1)
			printf("impossible\n");
		else
			printf("%d\n", res);
	}
	return 0;
}

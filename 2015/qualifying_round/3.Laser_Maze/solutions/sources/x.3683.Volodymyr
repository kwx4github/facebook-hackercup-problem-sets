#include <iostream>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string.h>
#include <utility>
#include <queue>
#include <stack>
#include <iomanip>
#include <ctype.h>
#include <sstream>
#include <map>
#include <set>
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
 
using namespace std;

typedef long long LL;

#define FOR(i,n) for(int i = 0;i < n;i++)
#define MP make_pair
#define PB push_back
#define ALL(a) (a).begin(),(a).end()
#define PII pair<int, int>
#define CLEAR(a) memset(a, 0, sizeof(a))
#define INF 2000000000
const double EPS = 1E-8;
const LL mod = 1000000007;
 
using namespace std;

int N,M;
char f[105][105];
int dp[105][105][4];
int fx,fy;
char a[4] = {'^', '>', 'v', '<'};
PII d[4] = {MP(1,0), MP(0,1), MP(-1,0), MP(0,-1)};

bool ok(int x, int y) {
  return x >= 0 && x < N && y >= 0 && y < M && (f[x][y] == '.' || f[x][y] == 'S' || f[x][y] == 'G');
}

bool kill(int x, int y, int m) {
  for (int i = x+1; i < N; i++) {
      if (f[i][y] == '#')
        break;

    if (f[i][y] != '.') {
      int id = -1;
      FOR(j, 4) {
        if (f[i][y] == a[j]) {
          id = j;
        }
      }
      if (id == -1)
        continue;

      if ((id + m) % 4 == 0)
        return true;
    }
  }

  for (int i = x-1; i >= 0; i--) {
      if (f[i][y] == '#')
        break;

    if (f[i][y] != '.') {
      int id = -1;
      FOR(j, 4) {
        if (f[i][y] == a[j]) {
          id = j;
        }
      }
      if (id == -1)
        continue;

      if ((id + m) % 4 == 2)
        return true;
    }
  }

  for (int i = y+1; i < M; i++) {
      if (f[x][i] == '#')
        break;

    if (f[x][i] != '.') {
      int id = -1;
      FOR(j, 4) {
        if (f[x][i] == a[j]) {
          id = j;
        }
      }
      if (id == -1)
        continue;

      if ((id + m) % 4 == 3)
        return true;
    }
  }

  for (int i = y-1; i >= 0; i--) {
      if (f[x][i] == '#')
        break;

    if (f[x][i] != '.') {
      int id = -1;
      FOR(j, 4) {
        if (f[x][i] == a[j]) {
          id = j;
        }
      }
      if (id == -1)
        continue;

      if ((id + m) % 4 == 1)
        return true;
    }
  }

  return false;
}

void solve(int t) {
  int x,y;
  cin >> N >> M;
  FOR(i,105)
  FOR(j,105)
  FOR(k,4)
  dp[i][j][k] = INF;
  int sx,sy;

  FOR(i, N) {
    FOR(j, M) {
      cin >> f[i][j];
      if (f[i][j] == 'S') {
        sx=i,sy=j;
      }
      if (f[i][j] == 'G') {
        fx=i,fy=j;
      }
    }
  }

  //dp[sx][sy][0] = 0;
  queue<pair<PII, PII > > q;
  q.push(MP(MP(sx,sy),MP(0,0)));

  bool ii = false;

  while (!q.empty()) {
    pair<PII, PII > p = q.front();
    q.pop();
    x = p.first.first;
    y = p.first.second;
    int v = p.second.first;
    int m = p.second.second;

    if (!ok(x,y))
      continue;

    if (v >= dp[x][y][m])
      continue;
    if (ii)
    if (kill(x,y,m))
      continue;

    if (!ii)
      ii = 1;

    dp[x][y][m] = v;
    FOR(i, 4) {
      q.push(MP(MP(x+d[i].first, y+d[i].second), MP(v+1, (m+1)%4)));
    }
  }

  cout << "Case #" << t << ": ";
  int res = min(min(dp[fx][fy][0], dp[fx][fy][1]), min(dp[fx][fy][2], dp[fx][fy][3]));
  if (res == INF) {
    cout << "impossible" << endl;
  } else {
    cout << res << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  FOR(i, t) {
    solve(i+1);
  }

  return 0;
}
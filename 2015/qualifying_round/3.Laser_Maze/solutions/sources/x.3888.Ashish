#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>
using namespace std;
typedef int ll;
#define F(i,a,b) for(ll i=a;i<=b;i++)
#define mp make_pair
#define pb push_back 
#define X first
#define Y second
const int mod=1000000007;
 
double DIST(double x1,double y1,double x2,double y2){
    return sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) ); }
 
ll gcd(ll a,ll b){
    if(b==0) return a; else return gcd(b,a%b); }
 
ll exp(ll a,ll b){
    if(b==0) return 1; else if(b%2!=0) return a*exp(a,b-1); else { ll ans=exp(a,b/2); return ans*ans; } }

ll exp(ll a,ll b,ll mod)
{ ll ans=1; while(b){ if(b&1)ans=(ans*a)%mod; a=(a*a)%mod; b/=2;} return ans; }
        
void sieve(ll n,ll *prime){
    prime[0]=1; prime[1]=1;
    for(ll i=2;i<=n;i++) if(prime[i]==0)
    for(ll j=2;j*i<=n;j++) prime[i*j]=1; } 
    
struct cmp{
  bool operator()(pair<ll,ll> const& lhs, pair<ll,ll> const& rhs){
    return lhs.X <= rhs.Y;
  }
};
 
ll t;
ll m,n;
        
char tur[4]={'<','^','>','v'};
pair<ll,ll> move[4]={mp(0,-1),mp(-1,0),mp(0,1),mp(1,0)};
ll dist[103][103][4]; //minimum number of moves required to reach the goal if the move is%4
bool danger[103][103][4];
char s[103][103];

pair<ll,ll> start;
pair<ll,ll> end;

bool isValid(ll x,ll y,ll st){
    
    if(x<=m && x>=1 && y<=n && y>=1 && !danger[x][y][st] && !(s[x][y]=='<' || s[x][y]=='^' || s[x][y]=='>' || s[x][y]=='v' || s[x][y]=='#'))
    return true;
    
    return false;
}

ll ste;

bool bfs()
{
    dist[start.X][start.Y][0]=0;
    
    queue<pair<pair<ll,ll>,ll> > q;
    
    q.push(mp(start,0));
    
    bool found=false;
    
    while(!q.empty() && !found){
           
        pair<pair<ll,ll>,ll > u = q.front();
    
        q.pop();

        F(i,0,3){
    
            ll px=u.X.X +move[i].X;
            ll py=u.X.Y +move[i].Y;
            
            if( isValid(px,py,(u.Y+1)%4) && dist[u.X.X][u.X.Y][u.Y]+1<dist[px][py][(u.Y+1)%4]  )
            {
                dist[px][py][(u.Y+1)%4]=dist[u.X.X][u.X.Y][u.Y]+1;
                
                if(px==end.X && py==end.Y)
                {
                    found=true;
                    ste=(u.Y+1)%4;
                    break;
                }
                
                else q.push(mp(mp(px,py),(u.Y+1)%4));
            }
            
        }
        
    }
    
    return found;
    
}

void init(){
    
    memset(dist,123456789,sizeof(dist));    
    memset(danger,false,sizeof(danger));
    
}

int main(){
    
    cin.sync_with_stdio(0);
    
    cin>>t;
    
    F(t1,1,t){
        
        init();
            
        cin>>m>>n;
        
        F(i,1,m)
        cin>>s[i]+1;
        
        F(i1,1,m)
        F(j1,1,n)
    {   
        if(s[i1][j1]=='S') start=mp(i1,j1);
        
        else if(s[i1][j1]=='G') end=mp(i1,j1);
        
        F(k,0,3)
        if(s[i1][j1]==tur[k])
        for(ll p=0;p<4;p++)
        {
            ll px=move[(k+p)%4].X;
            ll py=move[(k+p)%4].Y;
            
            ll i=i1;
            ll j=j1;
            
            while(isValid(i+px,j+py,p)==true)
            {
                danger[i+px][j+py][p]=true; 
                i+=px; j+=py;
                
            }
        }
    }
        
        if(bfs())
        cout<<"Case #"<<t1<<":"<<" "<<dist[end.X][end.Y][ste]<<"\n";
        else cout<<"Case #"<<t1<<":"<<" impossible\n";
    
    }
    return 0;
}    
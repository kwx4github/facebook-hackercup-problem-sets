#include <stdio.h>
#include <vector>

#define pb push_back

using namespace std;

class TypePos{
  public:
    int x, y, z;
    TypePos(){}

    TypePos(int x_, int y_, int z_) {
        x = x_;
        y = y_;
        z = z_;
    }
};

std::vector<TypePos> line;
TypePos start, goal;
char originalmaze[105][105];
char maze[105][105][5];
int dist[105][105][5];
int n, m;

bool iswall (int i, int j) {
    if (originalmaze[i][j] == '#' ||
        originalmaze[i][j] == '<' ||
        originalmaze[i][j] == '^' ||
        originalmaze[i][j] == 'v' ||
        originalmaze[i][j] == '>')
        return true;
    return false;
}

bool iswallZ(int i, int j, int z) {
    if (maze[i][j][z] == '#' ||
        maze[i][j][z] == '<' ||
        maze[i][j][z] == '^' ||
        maze[i][j][z] == 'v' ||
        maze[i][j][z] == '>')
        return true;
    return false;
}

void setUp (int i, int j, int z) {
    i--;
    while (!iswall(i, j)) {
        maze[i][j][z] = '#';
        i--;
    }
}

void setRight (int i, int j, int z) {
    j++;
    while (!iswall(i, j)) {
        maze[i][j][z] = '#';
        j++;
    }
}

void setDown (int i, int j, int z) {
    i++;
    while (!iswall(i, j)) {
        maze[i][j][z] = '#';
        i++;
    }
}

void setLeft (int i, int j, int z) {
    j--;
    while (!iswall(i, j)) {
        maze[i][j][z] = '#';
        j--;
    }
}


void mountmaze(){

    int i, j;

    //MOUNT ALL FROM 0
    for (i = 0; i <= n+1; i++)
        for (j = 0; j <= m+1; j++)
            maze[i][j][1] = maze[i][j][2] = maze[i][j][3] = maze[i][j][4] = originalmaze[i][j];

    for (i = 1; i <= n; i++) {
        for (j = 1; j <= m; j++)
        {
            switch (originalmaze[i][j]) {
                case '^':
                    setUp(i, j, 1);
                    setRight(i, j, 2);
                    setDown(i, j, 3);
                    setLeft(i, j, 4);
                    break;
                case '>':
                    setUp(i, j, 4);
                    setRight(i, j, 1);
                    setDown(i, j, 2);
                    setLeft(i, j, 3);
                    break;
                case 'v':
                    setUp(i, j, 3);
                    setRight(i, j, 4);
                    setDown(i, j, 1);
                    setLeft(i, j, 2);
                    break;
                case '<':
                    setUp(i, j, 2);
                    setRight(i, j, 3);
                    setDown(i, j, 4);
                    setLeft(i, j, 1);
                    break;
            }
        }
    }
    return;
}

int findpath() {

    int ld[] = {-1, 1,  0, 0};
    int rd[] = { 0, 0, -1, 1};
    int xat, yat, zat, nt, at, i;

    for (at = 1; at < line.size(); at++)
    {
        xat = line[at].x;
        yat = line[at].y;
        zat = line[at].z;
        nt = zat+1;
        if (nt == 5) nt = 1;

        for (i = 0; i < 4; i++)
        {
            if (!iswallZ(xat + ld[i], yat + rd[i], nt) &&
                dist[xat + ld[i]][yat + rd[i]][nt] == -1)
            {
                line.pb(TypePos(xat + ld[i], yat + rd[i], nt));
                dist[xat + ld[i]][yat + rd[i]][nt] = dist[xat][yat][zat] + 1;

                if (maze[xat+ld[i]][yat+rd[i]][nt] == 'G')
                    return dist[xat][yat][zat] + 1;
            }
        }
    }
    return -1;
}

void printmaze(){
    int i, j;

    for (i = 0; i <= n+1; i++) {
        for (j = 0; j <= m+1; j++)
            printf("%c", maze[i][j][1]);
        printf("\n");
    } printf("\n");
    for (i = 0; i <= n+1; i++) {
        for (j = 0; j <= m+1; j++)
            printf("%c", maze[i][j][2]);
        printf("\n");
    } printf("\n");
    for (i = 0; i <= n+1; i++) {
        for (j = 0; j <= m+1; j++)
            printf("%c", maze[i][j][3]);
        printf("\n");
    } printf("\n");
    for (i = 0; i <= n+1; i++) {
        for (j = 0; j <= m+1; j++)
            printf("%c", maze[i][j][4]);
        printf("\n");
    } printf("\n");

}

int main()
{
    int t, z;
    int i, j;

    scanf (" %d", &t);

    for (z = 1; z <= t; z++)
    {
        scanf (" %d %d", &n, &m);

        for (i = 0; i <= n+1; i++)
            originalmaze[i][0] = originalmaze[i][m+1] = '#';
        for (i = 0; i <= m+1; i++)
            originalmaze[0][i] = originalmaze[n+1][i] = '#';

        for (i = 1; i <= n; i++)
            for (j = 1; j <= m; j++)
            {
                scanf(" %c", &originalmaze[i][j]);

                if (originalmaze[i][j] == 'S') {
                    start.x = i;
                    start.y = j;
                }
                if (originalmaze[i][j] == 'S') {
                    goal.x = i;
                    goal.y = j;
                }
                dist[i][j][1] = dist[i][j][2] = dist[i][j][3] = dist[i][j][4] = -1;
            }

        mountmaze();
        //printmaze();
        i = start.x;
        j = start.y;

        start.z = 0;
        line.clear();
        line.pb(start);
        dist[i][j][1] = 0;

        if (!iswallZ(i+1, j, 2)) {
            line.pb(TypePos(i+1, j, 2));
            dist[i+1][j][2] = 1;

            if (maze[i+1][j][2] == 'G') {
                printf("Case #%d: 1\n", z);
                continue;
            }
        }
        if (!iswallZ(i-1, j, 2)) {
            line.pb(TypePos(i-1, j, 2));
            dist[i-1][j][2] = 1;

            if (maze[i-1][j][2] == 'G') {
                printf("Case #%d: 1\n", z);
                continue;
            }
        }
        if (!iswallZ(i, j+1, 2)) {
            line.pb(TypePos(i, j+1, 2));
            dist[i][j+1][2] = 1;

            if (maze[i][j+1][2] == 'G') {
                printf("Case #%d: 1\n", z);
                continue;
            }
        }
        if (!iswallZ(i, j-1, 2)) {
            line.pb(TypePos(i, j-1, 2));
            dist[i][j-1][2] = 1;

            if (maze[i][j-1][2] == 'G'){
                printf("Case #%d: 1\n", z);
                continue;
            }
        }

        int r = findpath();
        if (r != -1)
            printf("Case #%d: %d\n", z, r);
        else
            printf("Case #%d: impossible\n", z);
    }

    return 0;
}

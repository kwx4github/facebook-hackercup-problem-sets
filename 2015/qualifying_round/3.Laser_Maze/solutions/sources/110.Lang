#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

#define maxn 205

struct triple{
	int x, y, z;
	triple(){};
	triple(int _x, int _y, int _z){
		x = _x; y = _y; z = _z;
	}
};

string direction = "^>v<";
int dr[4] = {-1, 0, +1, 0};
int dc[4] = {0, +1, 0, -1};

int test;
int n, m;
string s[maxn];
int d[maxn][maxn], a[4][maxn][maxn], f[4][maxn][maxn];
int size;
triple que[maxn * maxn * 4];

bool inside(int r, int c){
	return r >= 0 && r < n && c >= 0 && c < m;
}

void solve(int itest){
	cout << "Case #" << itest << ": ";

	cin >> n >> m;
	int rs = -1, cs = -1, rf = -1, cf = -1;

	ms(d, -1); ms(a, 0);

	Rep(i, n) {
		cin >> s[i];
		Rep(j, m){
			if(s[i][j] == '#'){
				d[i][j] = 4;
			}
			if(s[i][j] == 'S'){
				rs = i;
				cs = j;
			}
			if(s[i][j] == 'G'){
				rf = i;
				cf = j;
			}
			Rep(h, 4) if(s[i][j] == direction[h]) d[i][j] = h;
		}
	}


	Rep(t, 4) Rep(i, n) Rep(j, m) if(d[i][j] > -1){
		a[t][i][j] = 1;
		if(d[i][j] < 4){
			int h = (d[i][j] + t) % 4;
			int r = i, c = j;
			while(true){
				a[t][r][c] = 1;
				r += dr[h];
				c += dc[h];
				if(!inside(r, c) || d[r][c] >= 0) break;
			}
		}
	}

	ms(f, -1);
	f[0][rs][cs] = 0;
	size = 0;
	que[size++] = triple(0, rs, cs);
	Rep(i, size){
		triple T = que[i];
		int id = T.x, r = T.y, c = T.z;
//		cout << id << " " << r << " " << c << endl;
		int t = (id + 1) % 4;
		Rep(h, 4){
			int rr = r + dr[h], cc = c + dc[h];
			if(inside(rr, cc) && !a[t][rr][cc] && f[t][rr][cc] == -1){
				f[t][rr][cc] = f[id][r][c] + 1;
				que[size++] = triple(t, rr, cc);
			}
		}
	}

	int res = inf;
	Rep(h, 4) if(f[h][rf][cf] != -1) res = min(res, f[h][rf][cf]);
	if(res >= inf) cout << "impossible\n";
	else cout << res << "\n";

}

int main(){
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
//    ios_base::sync_with_stdio(false);
//    cin.tie(NULL);

	cin >> test;
	For(itest, 1, test){
		solve(itest);
	}

    return 0;
}

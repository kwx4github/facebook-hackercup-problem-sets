#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;
typedef pair<int, pii> tiii;

char mat[111][111];

int dist[111][111][4], m, n;

bool can(int it, int jt, int rot) {
    for (int i = it; i < m; ++i) {
        if (mat[i][jt] == '#') break;
        if (mat[i][jt] == '>') {
            if (rot % 4 == 3) return false;
            return true;
        } if (mat[i][jt] == '<') {
            if (rot % 4 == 1) return false;
            return true;
        } if (mat[i][jt] == 'v') {
            if (rot % 4 == 2) return false;
            return true;
        } if (mat[i][jt] == '^') {
            if (rot % 4 == 0) return false;
            return true;
        }
    }
    for (int j = jt; j < n; ++j) {
        if (mat[it][j] == '#') break;
        if (mat[it][j] == '>') {
            if (rot % 4 == 2) return false;
            return true;
        } if (mat[it][j] == '<') {
            if (rot % 4 == 0) return false;
            return true;
        } if (mat[it][j] == 'v') {
            if (rot % 4 == 1) return false;
            return true;
        } if (mat[it][j] == '^') {
            if (rot % 4 == 3) return false;
            return true;
        }
    }
    for (int i = it; i > -1; --i) {
        if (mat[i][jt] == '#') break;
        if (mat[i][jt] == '>') {
            if (rot % 4 == 1) return false;
            return true;
        } if (mat[i][jt] == '<') {
            if (rot % 4 == 3) return false;
            return true;
        } if (mat[i][jt] == 'v') {
            if (rot % 4 == 0) return false;
            return true;
        } if (mat[i][jt] == '^') {
            if (rot % 4 == 2) return false;
            return true;
        }
    }
    for (int j = jt; j > -1; --j) {
        if (mat[it][j] == '#') break;
        if (mat[it][j] == '>') {
            if (rot % 4 == 0) return false;
            return true;
        } if (mat[it][j] == '<') {
            if (rot % 4 == 2) return false;
            return true;
        } if (mat[it][j] == 'v') {
            if (rot % 4 == 3) return false;
            return true;
        } if (mat[it][j] == '^') {
            if (rot % 4 == 1) return false;
            return true;
        }
    }
    return true;
}

int main() {
    int t, ib, jb, ie, je;
    scanf("%d", &t);
    for (int _ = 0; _ < t; ++_) {
        memset(dist, -1, sizeof dist);
        scanf("%d %d", &m, &n);
        for (int i = 0; i < m; ++i) {
            scanf("%s", mat[i]);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 'G') {
                    ie = i;
                    je = j;
                } else if (mat[i][j] == 'S') {
                    ib = i;
                    jb = j;
                }
            }
        }
        queue<tiii> q;
        tiii node;
        int ans = -1, it, jt;
        q.push(tiii(0, pii(ib, jb)));
        dist[ib][jb][0] = 0;
        while (!q.empty()) {
            node = q.front();
            it = node.second.first;
            jt = node.second.second;
            q.pop();
            if (it == ie && jt == je) {
                ans = node.first;
                break;
            } else {
                if (it) {
                    if (dist[it - 1][jt][((node.first % 4) + 1) % 4] == -1) {
                        if (mat[it - 1][jt] == '.' || mat[it - 1][jt] == 'S' || mat[it - 1][jt] == 'G') {
                            if (can(it - 1, jt, ((node.first % 4) + 1) % 4)) {
                                dist[it - 1][jt][((node.first % 4) + 1) % 4] = node.first + 1;
                                q.push(tiii(node.first + 1, pii(it - 1, jt)));
                            }
                        }
                    }
                }
                if (jt) {
                    if (dist[it][jt - 1][((node.first % 4) + 1) % 4] == -1) {
                        if (mat[it][jt - 1] == '.' || mat[it][jt - 1] == 'S' || mat[it][jt - 1] == 'G') {
                            if (can(it, jt - 1, ((node.first % 4) + 1) % 4)) {
                                dist[it][jt - 1][((node.first % 4) + 1) % 4] = node.first + 1;
                                q.push(tiii(node.first + 1, pii(it, jt - 1)));
                            }
                        }
                    }
                }
                if (it + 1 < m) {
                    if (dist[it + 1][jt][((node.first % 4) + 1) % 4] == -1) {
                        if (mat[it + 1][jt] == '.' || mat[it + 1][jt] == 'G' || mat[it + 1][jt] == 'S') {
                            if (can(it + 1, jt, ((node.first % 4) + 1) % 4)) {
                                dist[it + 1][jt][((node.first % 4) + 1) % 4] = node.first + 1;
                                q.push(tiii(node.first + 1, pii(it + 1, jt)));
                            }
                        }
                    }
                }
                if (jt + 1 < n) {
                    if (dist[it][jt + 1][((node.first % 4) + 1) % 4] == -1) {
                        if (mat[it][jt + 1] == '.' || mat[it][jt + 1] == 'G' || mat[it][jt + 1] == 'S') {
                            if (can(it, jt + 1, ((node.first % 4) + 1) % 4)) {
                                dist[it][jt + 1][((node.first % 4) + 1) % 4] = node.first + 1;
                                q.push(tiii(node.first + 1, pii(it, jt + 1)));
                            }
                        }
                    }
                }
            }
        }
        if (ans != -1) {
            printf("Case #%d: %d\n", (_ + 1), ans);
        } else {
            printf("Case #%d: impossible\n", (_ + 1));
        }
    }
    return 0;
}
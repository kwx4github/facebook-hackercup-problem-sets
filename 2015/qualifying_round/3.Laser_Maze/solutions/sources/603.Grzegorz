#ifndef GEOM_POINT_H_
#define GEOM_POINT_H_

namespace geom
{
  template<typename T> struct Point
  {
    Point(){} Point(T _x, T _y) : x(_x), y(_y) {} T x,y;
    template<typename U> explicit Point(const Point<U> &p) : x(p.x), y(p.y) {}
    Point & operator+=(const Point &b){ x+=b.x; y+=b.y; return *this; }
    Point & operator-=(const Point &b){ x-=b.x; y-=b.y; return *this; }
    Point & operator*=(T f){ x*=f; y*=f; return *this; }
    Point & operator/=(T f){ x/=f; y/=f; return *this; }
    Point operator+(const Point &b) const { return Point(x+b.x,y+b.y); } 
    Point operator-(const Point &b) const { return Point(x-b.x,y-b.y); }
    Point operator*(T f) const { return Point(x*f,y*f); }
    Point operator/(T f) const { return Point(x/f,y/f); }
    friend Point operator*(T f, const Point &p){ return Point(f*p.x,f*p.y); }
    T operator*(const Point &b) const { return x*b.x+y*b.y; }
    T vec_mult(const Point &b) const { return x*b.y-y*b.x; }
    
    T sqr() const { return x*x+y*y; }
    Point operator-() const { return Point(-x,-y); }

    bool operator==(const Point &b) const { return x==b.x && y==b.y; }
    bool operator!=(const Point &b) const { return x!=b.x || y!=b.y; }
  };
}  // namespace util

#endif  // GEOM_POINT_H_

#include <cstdio>
#include <vector>
#include <cstring>

#define REP(i,n) for(int i=0; i<(n); ++i)

template<typename T> void mini(T &a, T b){ if(a>b) a = b; }

enum { n_max = 110, INF = 1000000000 };

char M[n_max][n_max];
int E[n_max][n_max][4];
int D[n_max][n_max][4];

typedef geom::Point<int> Pt;

Pt d[] = {{1,0},{0,1},{-1,0},{0,-1}};

bool in(Pt a, Pt s)
{ return 0<=a.x && a.x<s.x && 0<=a.y && a.y<s.y; }

bool empty(char c){ return c=='.' || c=='S' || c=='G'; }

struct Elem
{
  Pt p; int t;
};

int main()
{
  int t; scanf("%d",&t);
  REP(_,t)
  {
    int m,n; scanf("%d%d",&m,&n);
    REP(mm,m) scanf(" %s",M[mm]);
    memset(E,0,sizeof E);
    Pt s{n,m},a,b;
    REP(mm,m) REP(nn,n) switch(M[mm][nn])
    {
      case '#': REP(i,4) E[mm][nn][i] = 1; break;
      case 'S': a = Pt{nn,mm}; break;
      case 'G': b = Pt{nn,mm}; break;
      case '.': break;
      default:
      {
        int j;
        switch(M[mm][nn])
        {
          case '>': j = 0; break;
          case 'v': j = 1; break;
          case '<': j = 2; break;
          case '^': j = 3; break;
        }
        REP(i,4)
        {
          Pt p{nn,mm}; E[p.y][p.x][i] = 1;
          //printf("from = %d %d\n",p.x,p.y);
          while(1)
          {
            p += d[(j+i)%4];
            //printf("p = %d %d\n",p.x,p.y);
            if(!in(p,s) || !empty(M[p.y][p.x])) break;
            E[p.y][p.x][i] = 1;
          }
        }
        break;
      }
    }

    //REP(i,4){ REP(y,s.y){ REP(x,s.x) printf("%d",E[y][x][i]); puts(""); } puts(""); }

    memset(D,-1,sizeof D);
    std::vector<Elem> Q; int qf=0; Q.push_back(Elem{a,0});
    while(qf<Q.size())
    {
      auto e = Q[qf++];
      if(qf>1) if(!in(e.p,s) || E[e.p.y][e.p.x][e.t%4]) continue;
      auto &x = D[e.p.y][e.p.x][e.t%4];
      if(x!=-1) continue;
      x = e.t; REP(i,4) Q.push_back(Elem{e.p+d[i],e.t+1});
    }
    int res = INF;
    REP(i,4) if(D[b.y][b.x][i]!=-1) mini(res,D[b.y][b.x][i]);
    if(res!=INF) printf("Case #%d: %d\n",_+1,res);
    else printf("Case #%d: impossible\n",_+1);
  }
  return 0;
}

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
#define N 100
bool vis[N][N][4];
char map[N][N];
int m,n;
struct Laser
{
    int x,y;
    int dir;
};
vector<Laser> laser;
bool X[N][N][N];
bool Y[N][N][N];
int tx,ty;
struct Status
{
    int x,y;
    int dir;
    bool ok()
    {
        if(x<0||x>=n||y<0||y>=m)return false;
        if(map[y][x]!='.')return false;
        for(int i=0;i<laser.size();i++)
        {
            switch((laser[i].dir+dir)%4)
            {
            case 0:
                if(laser[i].x==x&&laser[i].y>y&&Y[x][y][laser[i].y])return false;
                break;
            case 1:
                if(laser[i].y==y&&laser[i].x<x&&X[y][laser[i].x][x])return false;
                break;
            case 2:
                if(laser[i].x==x&&laser[i].y<y&&Y[x][laser[i].y][y])return false;
                break;
            case 3:
                if(laser[i].y==y&&laser[i].x>x&&X[y][x][laser[i].x])return false;
                break;
            }
        }
        return true;
    }
    bool done()
    {
        return x==tx&&y==ty;
    }
    Status up()
    {
        return {x,y-1,dir+1};
    }
    Status down()
    {
        return {x,y+1,dir+1};
    }
    Status left()
    {
        return {x-1,y,dir+1};
    }
    Status right()
    {
        return {x+1,y,dir+1};
    }

};
void qpush(queue<Status> &q,const Status &s)
{
    if(vis[s.x][s.y][s.dir%4])return;
    vis[s.x][s.y][s.dir%4]=true;
    q.push(s);
}

void solve(int x)
{
    laser.clear();
    memset(vis,false,sizeof(vis));
    cin>>m>>n;
    for(int i=0;i<m;i++)cin>>map[i];
    int sx,sy;
    memset(X,true,sizeof(X));
    memset(Y,true,sizeof(Y));
    for(int x=0;x<n;x++)for(int y=0;y<m;y++)
    {
        switch(map[y][x])
        {
        case 'S':
            sx=x;
            sy=y;
            map[y][x]='.';
            break;
        case 'G':
            tx=x;
            ty=y;
            map[y][x]='.';
            break;
        case '^':
            laser.push_back({x,y,0});
            break;
        case '>':
            laser.push_back({x,y,1});
            break;
        case 'v':
            laser.push_back({x,y,2});
            break;
        case '<':
            laser.push_back({x,y,3});
            break;
        }
        if(map[y][x]!='.')
        {
            for(int i=0;i<x;i++)for(int j=x+1;j<n;j++)X[y][i][j]=X[y][i][j]=false;
            for(int i=0;i<y;i++)for(int j=y+1;j<m;j++)Y[x][i][j]=Y[x][i][j]=false;
        }
    }
    cout<<"Case #"<<x<<": ";
    queue<Status> q;
    Status s={sx,sy,0};
    qpush(q,s);
    while(q.size())
    {
        Status s=q.front();q.pop();
        Status t;
        if((t=s.up()).ok())
        {
            if(t.done())
            {
                cout<<t.dir<<endl;
                return;
            }
            qpush(q,t);
        }
        if((t=s.down()).ok())
        {
            if(t.done())
            {
                cout<<t.dir<<endl;
                return;
            }
            qpush(q,t);
        }
        if((t=s.left()).ok())
        {
            if(t.done())
            {
                cout<<t.dir<<endl;
                return;
            }
            qpush(q,t);
        }
        if((t=s.right()).ok())
        {
            if(t.done())
            {
                cout<<t.dir<<endl;
                return;
            }
            qpush(q,t);
        }
    }
    cout<<"impossible"<<endl;
}
int main()
{
    int t;
    cin>>t;
    for(int i=1;i<=t;i++)solve(i);
    return 0;
}
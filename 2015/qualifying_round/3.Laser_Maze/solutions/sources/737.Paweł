#include<cstdio>
#include<queue>
using namespace std;
queue<pair<int,pair<int,int> > >Q;
char input[102][103];
bool av[102][102][4];
int dist[102][102][4];
const int inf=1<<30;
int dx[4]={0,-1,0,1};
int dy[4]={1,0,-1,0};
void bfs(pair<int,int>p,int n,int m)
{
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			for(int k=0;k<4;k++)
				dist[i][j][k]=inf;
	int x=p.first,y=p.second;
	dist[x][y][0]=0;
	Q.push(make_pair(0,p));
	while(!Q.empty())
	{
		x=Q.front().second.first;
		y=Q.front().second.second;
		int k=Q.front().first;
		Q.pop();
		for(int i=0;i<4;i++)
		{
			int xp=x+dx[i];
			int yp=y+dy[i];
			if(xp<n&&xp>=0&&yp<m&&yp>=0&&
			 av[xp][yp][(k+1)%4]&&dist[xp][yp][(k+1)%4]==inf)
			{
				dist[xp][yp][(k+1)%4]=dist[x][y][k]+1;
				Q.push(make_pair((k+1)%4,make_pair(xp,yp)));
			}
		}
	}
}
void test(int cnt)
{
	pair<int,int>p,q;
	int n,m;
	scanf("%d %d",&n,&m);
	for(int i=0;i<n;i++)
		scanf("%s",input[i]);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
		{
			char c=input[i][j];
			if(c=='S')
			{	
				p=make_pair(i,j);
				input[i][j]='.';
			}
			if(c=='G')
			{
				q=make_pair(i,j);
				input[i][j]='.';
			}
			c=input[i][j];
			bool ava=false;
			if(c=='.')
				ava=true;
			for(int k=0;k<4;k++)
				av[i][j][k]=ava;
		}
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
		{
			int akt=4;
			if(input[i][j]=='v')akt=0;
			if(input[i][j]=='<')akt=1;
			if(input[i][j]=='^')akt=2;
			if(input[i][j]=='>')akt=3;
			if(akt==4)continue;
			for(int k=0;k<4;k++)
			{
				if((akt+k)%4==0)
					for(int l=i+1;l<n;l++)
					{
						if(input[l][j]!='.')break;
						av[l][j][k]=false;
					}
				if((akt+k)%4==1)
					for(int l=j-1;l>=0;l--)
					{
						if(input[i][l]!='.')break;
						av[i][l][k]=false;
					}
				if((akt+k)%4==2)
					for(int l=i-1;l>=0;l--)
					{
						if(input[l][j]!='.')break;
						av[l][j][k]=false;
					}
				if((akt+k)%4==3)
					for(int l=j+1;l<m;l++)
					{
						if(input[i][l]!='.')break;
						av[i][l][k]=false;
					}
			}
		}
	bfs(p,n,m);
	int d=dist[q.first][q.second][0];
	for(int i=1;i<4;i++)if(dist[q.first][q.second][i]<d)d=dist[q.first][q.second][i];
		printf("Case #%d: ",cnt);
	if(d==inf)printf("impossible\n");
	else printf("%d\n",d);
}
int main()
{
	int t;
	scanf("%d",&t);
	for(int i=1;i<=t;i++)
	{
		test(i);
	}
}

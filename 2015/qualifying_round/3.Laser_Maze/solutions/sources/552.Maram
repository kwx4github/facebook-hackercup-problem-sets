#include<iostream>
#include<stdio.h>
#include<vector>
#include<memory.h>
#include<queue>
using namespace std;
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int R,C;
int cost[200][200];
char g[200][200];
bool vis[4][200][200];
bool l[4][200][200];
vector < pair < int ,pair<int,int> > >canon;
void calc()
{
	int c,r;
	for(int i=0;i<canon.size();i++)
	{
		for(int k=0;k<4;k++)
		{
			r=canon[i].second.first;
			c=canon[i].second.second;
			c+=dc[(k+canon[i].first)%4];
			r+=dr[(k+canon[i].first)%4];
			while(c>=0 && c<C && r>=0 && r<R && (g[r][c]=='.'))
			{
				l[k][r][c]=true;
				c+=dc[(k+canon[i].first)%4];
				r+=dr[(k+canon[i].first)%4];					
			}
		}
	}
}

int bfs(int sx,int sy,int X,int Y)
{
	calc();
	queue<pair<int,int> >q;
	q.push(make_pair(sx,sy));
	pair<int,int>x;
	while(!q.empty())
	{
		x=q.front();
		q.pop();
		if(x.first==X && x.second==Y)
		{
			return cost[X][Y];
		}
		for(int i=0;i<4;i++)
		{
			int nc=x.second+dc[i];
			int nr=x.first+dr[i];
			if(nc<C && nc >=0 && nr<R && nr>=0 && (g[nr][nc]=='.') && l[(cost[x.first][x.second]+1)%4][nr][nc]==false && vis[(cost[x.first][x.second]+1)%4][nr][nc]==0)
			{
				cost[nr][nc]=cost[x.first][x.second]+1;
				vis[cost[nr][nc]%4][nr][nc]=1;
				q.push(make_pair(nr,nc));
			}
		}
		
		
	}
	return -1;
} 


int main()
{
	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int t;
	int sx,sy,tx,ty;
	cin>>t;
	for(int test=1;test<=t;test++)
	{
		cin>>R>>C;
		
		for(int i=0;i<R;i++)
			for(int j=0;j<C;j++){
				cin>>g[i][j];
				if(g[i][j]=='S')
				{
					sx=i;
					sy=j;
					g[i][j]='.';
				}
				else if(g[i][j]=='G')
				{
					tx=i;
					ty=j;
					g[i][j]='.';
				}
				else if(g[i][j]=='^')
				{
					canon.push_back(make_pair(0,make_pair(i,j)));
				}
				else if(g[i][j]=='>')
				{
					canon.push_back(make_pair(1,make_pair(i,j)));
				}
				else if(g[i][j]=='v')
				{
					canon.push_back(make_pair(2,make_pair(i,j)));
				}
				else if(g[i][j]=='<')
				{
					canon.push_back(make_pair(3,make_pair(i,j)));
				}
			}
			cout<<"Case #"<<test<<": ";
			int ans= bfs(sx,sy,tx,ty);
			if(ans==-1)
				cout<<"impossible"<<endl;
			else
				cout<<ans<<endl;
			memset(vis,0,sizeof(vis));
			memset(l,0,sizeof(l));
			canon.clear();
			memset(cost,0,sizeof(cost));
	}
}

#include <cstdio>
#include <queue>
using namespace std;

const int INF = 1000000000;

struct Situation {
  int lin;
  int col;
  int t;


  Situation() { lin = col = t = -1; }
  Situation(int _l, int _c, int _t) {
    lin = _l;
    col = _c;
    t = _t;
  }

  Situation operator+(const Situation &autre) {
    return Situation(lin + autre.lin, col + autre.col, (t + autre.t) % 4);
  }
};

const Situation dir[5] = {Situation(-1, 0, 1),
			  Situation(0, 1, 1),
			  Situation(1, 0, 1),
			  Situation(0, -1, 1),
			  Situation(0, 0, 1)};

void main2() {
  int nbLin, nbCol;
  scanf("%d %d\n", &nbLin, &nbCol);
  
  Situation S, G;
  char tab[nbLin][nbCol+1];
  for (int i=0; i<nbLin; i++) {
    scanf("%s", tab[i]);
    for (int j=0; j<nbCol; j++) {
      if (tab[i][j] == 'S') { S = Situation(i, j, 0); tab[i][j] = '.'; }
      if (tab[i][j] == 'G') { G = Situation(i, j, 0); tab[i][j] = '.'; }
      if (tab[i][j] == 'v') tab[i][j] = '0';
      if (tab[i][j] == '<') tab[i][j] = '1';
      if (tab[i][j] == '^') tab[i][j] = '2';
      if (tab[i][j] == '>') tab[i][j] = '3';
    }
  }
  
  int dist[nbLin][nbCol][4];
  for (int i=0; i<nbLin; i++)
    for (int j=0; j<nbCol; j++)
      for (int k=0; k<4; k++)
	dist[i][j][k] = INF;
  
  queue<Situation> enCours;
  enCours.push(S);
  dist[S.lin][S.col][S.t] = 0;
  while (!enCours.empty()) {
    Situation act = enCours.front();
    enCours.pop();

    if (dist[act.lin][act.col][act.t] != 0)
    for (int i=0; i<4; i++) {
      Situation next = act;
      while (true) {
	next = next + dir[i];
	if (next.lin < 0) break;
	if (next.col < 0) break;
	if (next.lin >= nbLin) break;
	if (next.col >= nbCol) break;
	if (tab[next.lin][next.col] == '0' + (i + act.t) % 4)
	  dist[act.lin][act.col][act.t] = INF;
	if (tab[next.lin][next.col] != '.') break;
      }
    }
      
    for (int i=0; i<4; i++) {
      Situation next = act + dir[i];
      if (next.lin < 0) continue;
      if (next.col < 0) continue;
      if (next.lin >= nbLin) continue;
      if (next.col >= nbCol) continue;
      if (tab[next.lin][next.col] != '.') continue;
      if (dist[next.lin][next.col][next.t] > dist[act.lin][act.col][act.t] + 1)  {
	enCours.push(next);
	dist[next.lin][next.col][next.t] = dist[act.lin][act.col][act.t] + 1;
      }
    }
  }

  int res = INF;
  for (int i=0; i<4; i++)
    if (dist[G.lin][G.col][i] < res)
      res = dist[G.lin][G.col][i];
  
  if (res != INF)
    printf("%d\n", res);
  else
    printf("impossible\n");
}

int main() {
  int N;
  scanf("%d", &N);
  for (int i=0; i<N; i++) {
    printf("Case #%d: ", i+1);
    main2();
  }
}

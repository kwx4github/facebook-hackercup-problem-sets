import sys
from queue import Queue

file = open(sys.argv[1], "r")
output = open("output", "w+")



caseNum = 0
index = 1
lines = file.read().split("\n")

n = int(lines[0])

turrets = ["v", "<", "^", ">"]
directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
solid = ["#"] + turrets

for caseNumber in range(1, n+1):
  height, width = [int(x) for x in lines[index].split(" ")]
  
  def cell(i, j):
    #print(caseNumber)
    #print(i)
    #print(j)
    #print(index)
    return lines[index+1+i][j]

  access = [[[None for z in range(width)] for y in range(height)] for x in range(4)]
 
  for i in range(height):
    for j in range(width):
      if cell(i, j) == "S":
        start = (0, i, j)
      if cell(i, j) == "G":
        goal = (i, j)

  toExplore = Queue()
  toExplore.put(start)
  access[0][start[1]][start[2]] = 0
  #print(access)
  
  def checkTurret(next, s2):
    for d, vect in enumerate(directions):
      #if debug:
      #  print("\t\t{} {}".format(d, vect))
      pos = [next[1], next[2]]
      pos[0] += vect[0]
      pos[1] += vect[1]
      while not (pos[0] < 0 or pos[1] < 0 or pos[0] >= height or pos[1] >= width):
        #if debug:
        #  print("\t\t{}".format(pos))
        if turrets[(d - s2) % 4] == cell(pos[0], pos[1]):
          return False
        elif cell(pos[0], pos[1]) in solid:
          break
        pos[0] += vect[0]
        pos[1] += vect[1]
    return True
  
  while not toExplore.empty():
    s, i, j = toExplore.get()
    #print("{}, {}, {}".format(s, i, j))
    s2 = (s + 1) % 4
    for next in [(s2, i+1, j), (s2, i-1, j), (s2, i, j+1), (s2, i, j-1)]:
      #print("\t{}, {}, {}".format(next[0], next[1], next[2]))
      if next[1] < 0 or next[2] < 0 or next[1] >= height or next[2] >= width:
        continue
      if cell(next[1], next[2]) in solid:
        continue
      if not checkTurret(next, s2):
        continue
      
      if access[s2][next[1]][next[2]] == None:
        access[s2][next[1]][next[2]] = 1 + access[s][i][j]
        toExplore.put(next)
  
  result = "impossible"
  for i in range(4):
    a = access[i][goal[0]][goal[1]]
    if a != None and (result == "impossible" or a < result):
      result = a
  
  index += 1 + height
  
  output.write("Case #{}: {}\n".format(caseNumber, result))
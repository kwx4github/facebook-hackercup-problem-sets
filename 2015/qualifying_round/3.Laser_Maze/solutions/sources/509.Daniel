#include <stdio.h>
#include <string.h>
#include <queue>

using namespace std;

const int MAXM = 120, MAXN = 120;
const int dx[] = {0, -1, 0, 1};
const int dy[] = {-1, 0, 1, 0};
int m, n;
char map[MAXM][MAXN];
int sx, sy, tx, ty;
struct laster {
	int x, y, dir;
	int l, r, u, d;
	laster() {}
	laster(int x, int y, int d): x(x), y(y), dir(d) {}
}las[MAXM * MAXN];
int cnt;
struct state {
	int x, y, d;
	state(int x, int y, int d): x(x), y(y), d(d) {}
};
bool vis[MAXM][MAXN][4];

bool inrange(int x, int y)
{
	return x >= 0 && x < m && y >= 0 && y < n;
}

void shoot(int &x, int &y, int d)
{
	do x += dx[d], y += dy[d]; while (inrange(x, y) && map[x][y] == '.');
	x -= dx[d], y -= dy[d];
}

void init()
{
	cnt = 0;
	scanf("%d%d", &m, &n);
	for (int i = 0; i < m; ++i) {
		scanf("%s", map[i]);
		for (int j = 0; j < n; ++j) {
			if (map[i][j] == 'S')      map[sx = i][sy = j] = '.';
			else if (map[i][j] == 'G') map[tx = i][ty = j] = '.';
			else if (map[i][j] == '<') las[cnt++] = laster(i, j, 0);
			else if (map[i][j] == '^') las[cnt++] = laster(i, j, 1);
			else if (map[i][j] == '>') las[cnt++] = laster(i, j, 2);
			else if (map[i][j] == 'v') las[cnt++] = laster(i, j, 3);
		}
	}
	for (int i = 0; i < cnt; ++i) {
		las[i].u = las[i].d = las[i].x;
		las[i].l = las[i].r = las[i].y;
		shoot(las[i].x, las[i].l, 0);
		shoot(las[i].u, las[i].y, 1);
		shoot(las[i].x, las[i].r, 2);
		shoot(las[i].d, las[i].y, 3);
	}
}

bool check(const state &s)
{
	for (int i = 0; i < cnt; ++i) {
		int d = (las[i].dir + s.d)&3;
		if ((d&1) == 0 && s.x == las[i].x) {
			if (d == 0 ? (s.y >= las[i].l && s.y <= las[i].y) 
			           : (s.y >= las[i].y && s.y <= las[i].r))
			 	return false;
		} else if ((d&1) == 1 && s.y == las[i].y) {
			if (d == 1 ? (s.x >= las[i].u && s.x <= las[i].x)
			           : (s.x >= las[i].x && s.x <= las[i].d))
			 	return false;
		}
	}
	return true;
}

int bfs()
{
	memset(vis, 0, sizeof(vis));
	queue<state> que;
	que.push(state(sx, sy, 0));
	vis[sx][sy][0] = true;
	while (!que.empty()) {
		state s = que.front();
		que.pop();
		for (int i = 0; i < 4; ++i) {
			state t = state(s.x + dx[i], s.y + dy[i], s.d + 1);
			if (!inrange(t.x, t.y)) continue;
			if (map[t.x][t.y] != '.') continue;
			if (vis[t.x][t.y][t.d&3] || !check(t)) continue;
			if (t.x == tx && t.y == ty) return t.d;
			que.push(t);
			vis[t.x][t.y][t.d&3] = true;
		}
	}
	return -1;
}

int main()
{
	int dat;
	scanf("%d", &dat);
	for (int cas = 1; cas <= dat; ++cas) {
		init();
		int ans = bfs();
		printf("Case #%d: ", cas);
		if (ans < 0) puts("impossible");
		else printf("%d\n", ans);
	}
}

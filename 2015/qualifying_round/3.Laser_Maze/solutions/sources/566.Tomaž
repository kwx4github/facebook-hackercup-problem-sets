#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <math.h>
#include <queue>
#include <list>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <ctime>
using namespace std;

#define ALL(c) (c).begin(),(c).end()
#define IN(x,c) (find(c.begin(),c.end(),x) != (c).end())
#define REP(i,n) for (int i=0;i<(int)(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define INIT(a,v) memset(a,v,sizeof(a))
#define SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
template<class A, class B> A cvt(B x) { stringstream ss; ss<<x; A y; ss>>y; return y; }

typedef pair<int,int> PII;
typedef long long int64;

#define MOD 1000000007

int tests;
string lasers="^>v<";
int dir[4][2] = {{-1,0},{0,1},{1,0},{0,-1}}; // dy,dx
int h,w;
char m[105][105];
char l[105][105];
int si,sj,gi,gj;
int dist[105][105][4];
vector<PII> laser_pos;

int on(int i, int j) {
	return (i>=0 && i<h && j>=0 && j<w);
}

int safe(int y, int x, int t) {
	for (auto ij : laser_pos) {
		int i=ij.first, j=ij.second;
		if (i!=y && j!=x) continue;
		int ld=(l[i][j]+t)%4;
		while (1) {
			i+=dir[ld][0]; j+=dir[ld][1];
			if (!on(i,j) || m[i][j]=='#' || m[i][j]=='l') break;
			if (i==y && j==x) return 0;
		}
	}
	return 1;
}

int main() {
	freopen("laser_maze.txt","r",stdin);
	freopen("laser_maze.out","wb",stdout);
	scanf("%d",&tests);
	FOR (test,1,tests) {
		cerr << test << endl;
		scanf("%d %d",&h,&w);
		laser_pos.clear();
		REP (i,h) {
			scanf("%s",m[i]);
			REP (j,w) {
				l[i][j] = lasers.find(m[i][j]);
				if (l[i][j]!=-1) {
					m[i][j]='l';
					laser_pos.push_back({i,j});
				}
				if (m[i][j]=='S') { si=i; sj=j; }
				if (m[i][j]=='G') { gi=i; gj=j; }
			}
		}
		INIT(dist,-1);
		queue<vector<int> > q;
		q.push({si,sj,0});
		dist[si][sj][0]=0;
		while (!q.empty()) {
			int i=q.front()[0], j=q.front()[1], t=q.front()[2];
			//printf("%d %d %d: %d\n",i,j,t,dist[i][j][t]);
			q.pop();
			REP (d,4) {
				int ii=i+dir[d][0], jj=j+dir[d][1], tt=(t+1)%4;
				if (!on(ii,jj) || m[ii][jj]=='#' || m[ii][jj]=='l') continue;
				if (!safe(ii,jj,tt)) continue;
				if (dist[ii][jj][tt]==-1) {
					dist[ii][jj][tt] = dist[i][j][t]+1;
					q.push({ii,jj,tt});
				}
			}
		}
		int r=1e9;
		REP (mod,4) {
			if (dist[gi][gj][mod]!=-1) {
				r=min(r,dist[gi][gj][mod]);
			}
		}
		printf("Case #%d: ",test);
		if (r<1e9) printf("%d\n",r);
		else printf("impossible\n");
	}
	return 0;
}

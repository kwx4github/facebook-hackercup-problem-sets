#include <iostream>
#include <queue>
#include <cstring>
#include <string>
using namespace std;

char map[110][110];
bool vis[110][110][4];
bool quemada[110][110][4];
int dist[110][110][4];
int n, m;

int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};

void quemar(int x, int y, int t){
	//cout<<"quemar "<<x<<" "<<y<<" "<<t<<endl;
	for(int k=0;k<4;k++){
		int i=x+dx[k];
		int j=y+dy[k];
		while(i>=0 and i<n and j>=0 and j<m and map[i][j]=='.'){
			quemada[i][j][(k-t+4)%4]=true;
			i+=dx[k];
			j+=dy[k];
		}
	}
}

int main(){
	int t;
	cin.tie(0);
	cin.sync_with_stdio(0);
	cin>>t;
	for(int k=1;k<=t;k++){
		cin>>n>>m;
		memset(map,0,sizeof(map));
		memset(vis,0,sizeof(vis));
		memset(quemada,0,sizeof(vis));
		for(int i=0;i<n;i++){
			cin>>map[i];
		}		
		int xi, yi, xf, yf;
		queue<int> q;
		for(int i=0;i<n;i++){
				for(int j=0;j<m;j++){
					switch(map[i][j]){
						case 'S':
							xi=i;
							yi=j;
							map[i][j]='.';
							break;
						case 'G':
							xf=i;
							yf=j;
							map[i][j]='.';
							break;
						case '^':
							quemar(i,j,0);
							break;
						case '>':
							quemar(i,j,1);
							break;
						case 'v':
							quemar(i,j,2);
							break;
						case '<':
							quemar(i,j,3);
							break;
					}
					//cout<<map[i][j];
				}
				//cout<<endl;
		}
/*
		for(int i=0;i<4;i++){
			for(int x=0;x<n;x++){
				for(int y=0;y<m;y++){
					cout<<quemada[x][y][i]<<" ";
				}
				cout<<endl;
			}
			cout<<endl;
		}
*/
		q.push(xi);
		q.push(yi);
		q.push(0);
		vis[xi][yi][0]=true;
		vis[xi][yi][0]=true;
		while(not q.empty()){
			int x=q.front();
			q.pop();
			int y=q.front();
			q.pop();
			int d=q.front();
			q.pop();
			//cout<<x<<" "<<y<<" "<<d<<endl;
			for(int i=0;i<4;i++){
				int a=x+dx[i];
				int b=y+dy[i];
				int c=(d+1)%4;
				if(a>=0 and a<n and b>=0 and b<m and not vis[a][b][c] and map[a][b]=='.' and not quemada[a][b][c]){
					vis[a][b][c]=true;
					dist[a][b][c]=dist[x][y][d]+1;
					q.push(a);
					q.push(b);
					q.push(c);
				}
			}
		}

		int ans=999999999;
		for(int i=0;i<4;i++){
			if(vis[xf][yf][i])
				ans=min(ans, dist[xf][yf][i]);
		}
		cout<<"Case #"<<k<<": "<<(vis[xf][yf][0] or vis[xf][yf][1] or vis[xf][yf][2] or vis[xf][yf][3]?to_string(ans):"impossible")<<endl;
	}

	return 0;
}
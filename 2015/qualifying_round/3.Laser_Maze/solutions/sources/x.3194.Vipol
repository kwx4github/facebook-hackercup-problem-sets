import java.io.*;
import java.util.*;

public class Laser_Maze {

	/**
	 * @param args
	 * @author Vipol Sophonwatthanawichit
	 */
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new File("laser_maze.txt"));
		PrintWriter out = new PrintWriter(new FileWriter("out.txt")); 
		int T = sc.nextInt();
		for(int numcase = 1; numcase <= T; numcase++){
			if(numcase != 1) out.println();
			int m = sc.nextInt();
			int n = sc.nextInt();
			int[][] maze = new int[m][n];						// original maze for debugging
			int[][] maze1 = new int[m][n];
			int[][] maze2 = new int[m][n];
			int[][] maze3 = new int[m][n];
			int[][] maze4 = new int[m][n];
			boolean[][] walkable = new boolean[m][n];			// boolean maze for walkable path
			boolean[][] walkable1 = new boolean[m][n];
			boolean[][] walkable2 = new boolean[m][n];
			boolean[][] walkable3 = new boolean[m][n];
			boolean[][] walkable4 = new boolean[m][n];
			int startx = -1, starty = -1, endx = -1, endy = -1; // Starting & Goal positions
			ArrayDeque<Position> numlaser = new ArrayDeque<Position>();
			for(int i = 0; i < m; i++){
				String temps = sc.next();
				for(int j = 0; j < n; j++){
					maze[i][j] = (int)(temps.charAt(j));
					maze1[i][j] = maze[i][j];
					maze2[i][j] = maze[i][j];
					maze3[i][j] = maze[i][j];
					maze4[i][j] = maze[i][j];
					if(maze[i][j] == 46){ 
						walkable[i][j] = true;
						walkable1[i][j] = true;
						walkable2[i][j] = true;
						walkable3[i][j] = true;
						walkable4[i][j] = true;
					}
					if(maze[i][j] == 83){
						startx = i;
						starty = j;
						walkable[i][j] = true;
						walkable1[i][j] = true;
						walkable2[i][j] = true;
						walkable3[i][j] = true;
						walkable4[i][j] = true;
					}
					if(maze[i][j] == 71){
						endx = i;
						endy = j;
						walkable[i][j] = true;
						walkable1[i][j] = true;
						walkable2[i][j] = true;
						walkable3[i][j] = true;
						walkable4[i][j] = true;
					}	
					if(maze[i][j] == 94){
						maze2[i][j] = 62;
						maze3[i][j] = 118;
						maze4[i][j] = 60;
					}
					if(maze[i][j] == 62){
						maze2[i][j] = 118;
						maze3[i][j] = 60;
						maze4[i][j] = 94;
					}
					if(maze[i][j] == 118){
						maze2[i][j] = 60;
						maze3[i][j] = 94;
						maze4[i][j] = 62;
					}
					if(maze[i][j] == 60){
						maze2[i][j] = 94;
						maze3[i][j] = 62;
						maze4[i][j] = 118;
					}
					if(maze[i][j] == 94 || maze[i][j] == 62 || maze[i][j] == 60 || maze[i][j] == 118)
						numlaser.add(new Position(i,j,0));
				}
			}
			int[] laserx = new int[numlaser.size()];
			int[] lasery = new int[numlaser.size()];
			for(int i = 0; i < numlaser.size(); i++){
				Position cur = numlaser.remove();
				laserx[i] = cur.x;
				lasery[i] = cur.y;
				// maze 1
				if(maze1[laserx[i]][lasery[i]] == 94){
					for(int j = laserx[i]; j >= 0; j--){
						if(j != laserx[i] && walkable1[j][lasery[i]] == false)
							break;
						walkable1[j][lasery[i]] = false;
					}
				}
				else if(maze1[laserx[i]][lasery[i]] == 118){
					for(int j = laserx[i]; j < m; j++){
						if(j != laserx[i] && walkable1[j][lasery[i]] == false)
							break;
						walkable1[j][lasery[i]] = false;
					}
				}
				else if(maze1[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j >= 0; j--){
						if(j != lasery[i] && walkable1[laserx[i]][j] == false)
							break;
						walkable1[laserx[i]][j] = false;
					}
				}
				else if(maze1[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j < n; j++){
						if(j != lasery[i] && walkable1[laserx[i]][j] == false)
							break;
						walkable1[laserx[i]][j] = false;
					}
				}
				// maze 2
				if(maze2[laserx[i]][lasery[i]] == 94){
					for(int j = laserx[i]; j >= 0; j--){
						if(j != laserx[i] && walkable2[j][lasery[i]] == false)
							break;
						walkable2[j][lasery[i]] = false;
					}
				}
				else if(maze2[laserx[i]][lasery[i]] == 118){
					for(int j = laserx[i]; j < m; j++){
						if(j != laserx[i] && walkable2[j][lasery[i]] == false)
							break;
						walkable2[j][lasery[i]] = false;
					}
				}
				else if(maze2[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j >= 0; j--){
						if(j != lasery[i] && walkable2[laserx[i]][j] == false)
							break;
						walkable2[laserx[i]][j] = false;
					}
				}
				else if(maze2[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j < n; j++){
						if(j != lasery[i] && walkable2[laserx[i]][j] == false)
							break;
						walkable2[laserx[i]][j] = false;
					}
				}
				// maze 3
				if(maze3[laserx[i]][lasery[i]] == 94){
					for(int j = laserx[i]; j >= 0; j--){
						if(j != laserx[i] && walkable3[j][lasery[i]] == false)
							break;
						walkable3[j][lasery[i]] = false;
					}
				}
				else if(maze3[laserx[i]][lasery[i]] == 118){
					for(int j = laserx[i]; j < m; j++){
						if(j != laserx[i] && walkable3[j][lasery[i]] == false)
							break;
						walkable3[j][lasery[i]] = false;
					}
				}
				else if(maze3[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j >= 0; j--){
						if(j != lasery[i] && walkable3[laserx[i]][j] == false)
							break;
						walkable3[laserx[i]][j] = false;
					}
				}
				else if(maze3[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j < n; j++){
						if(j != lasery[i] && walkable3[laserx[i]][j] == false)
							break;
						walkable3[laserx[i]][j] = false;
					}
				}
				// maze 4
				if(maze4[laserx[i]][lasery[i]] == 94){
					for(int j = laserx[i]; j >= 0; j--){
						if(j != laserx[i] && walkable4[j][lasery[i]] == false)
							break;
						walkable4[j][lasery[i]] = false;
					}
				}
				else if(maze4[laserx[i]][lasery[i]] == 118){
					for(int j = laserx[i]; j < m; j++){
						if(j != laserx[i] && walkable4[j][lasery[i]] == false)
							break;
						walkable4[j][lasery[i]] = false;
					}
				}
				else if(maze4[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j >= 0; j--){
						if(j != lasery[i] && walkable4[laserx[i]][j] == false)
							break;
						walkable4[laserx[i]][j] = false;
					}
				}
				else if(maze4[laserx[i]][lasery[i]] == 60){
					for(int j = lasery[i]; j < n; j++){
						if(j != lasery[i] && walkable4[laserx[i]][j] == false)
							break;
						walkable4[laserx[i]][j] = false;
					}
				}
			}
			//	# = 35	Wall			^ = 94	 Up			> =	62	Right		S = 83 	Start
			//	. = 46	Space			v = 118	 Down		< =	60  Left		G = 71 	End
			
			boolean[][] vis1 = new boolean[m][n];
			boolean[][] vis2 = new boolean[m][n];
			boolean[][] vis3 = new boolean[m][n];
			boolean[][] vis4 = new boolean[m][n];
			ArrayDeque<Position> q = new ArrayDeque<Position>();
			vis1[startx][starty] = true;
			q.add(new Position(startx, starty, 0));
			int found = 0;
			int steps = 999999;
			int count = 1;
			while(!q.isEmpty()){
				count = count%4;
				Position cur = q.remove();
				if(cur.x == endx && cur.y == endy){
					if(cur.steps < steps)
						steps = cur.steps;
					found = 1;
					count++;
					continue;
				}
				if(count == 0){
					if(walkable1[cur.x][cur.y] == false){
						count++;
						continue;
					}
					if(cur.y + 1 < n && walkable1[cur.x][cur.y + 1] && !vis1[cur.x][cur.y + 1]){
						vis1[cur.x][cur.y + 1] = true;
						q.add(new Position(cur.x, cur.y+1,cur.steps + 1));
					}
					if(cur.x + 1 < m && walkable1[cur.x+1][cur.y] && !vis1[cur.x+1][cur.y]){
						vis1[cur.x+1][cur.y] = true;
						q.add(new Position(cur.x+1, cur.y,cur.steps + 1));
					}
					if(cur.x - 1 >= 0 && walkable1[cur.x-1][cur.y] && !vis1[cur.x-1][cur.y]){
						vis1[cur.x-1][cur.y] = true;
						q.add(new Position(cur.x-1, cur.y,cur.steps + 1));
					}
					if(cur.y - 1 >= 0 && walkable1[cur.x][cur.y - 1] && !vis1[cur.x][cur.y - 1]){
						vis1[cur.x][cur.y - 1] = true;
						q.add(new Position(cur.x, cur.y-1,cur.steps + 1));
					}
				}
				if(count == 1){
					if(walkable2[cur.x][cur.y] == false){
						count++;
						continue;
					}
					if(cur.y + 1 < n && walkable2[cur.x][cur.y + 1] && !vis2[cur.x][cur.y + 1]){
						vis2[cur.x][cur.y + 1] = true;
						q.add(new Position(cur.x, cur.y+1,cur.steps + 1));
					}
					if(cur.x + 1 < m && walkable2[cur.x+1][cur.y] && !vis2[cur.x+1][cur.y]){
						vis2[cur.x+1][cur.y] = true;
						q.add(new Position(cur.x+1, cur.y,cur.steps + 1));
					}
					if(cur.x - 1 >= 0 && walkable2[cur.x-1][cur.y] && !vis2[cur.x-1][cur.y]){
						vis2[cur.x-1][cur.y] = true;
						q.add(new Position(cur.x-1, cur.y,cur.steps + 1));
					}
					if(cur.y - 1 >= 0 && walkable2[cur.x][cur.y - 1] && !vis2[cur.x][cur.y - 1]){
						vis2[cur.x][cur.y - 1] = true;
						q.add(new Position(cur.x, cur.y-1,cur.steps + 1));
					}
				}
				if(count == 2){
					if(walkable3[cur.x][cur.y] == false){
						count++;
						continue;
					}
					if(cur.y + 1 < n && walkable3[cur.x][cur.y + 1] && !vis3[cur.x][cur.y + 1]){
						vis3[cur.x][cur.y + 1] = true;
						q.add(new Position(cur.x, cur.y+1,cur.steps + 1));
					}
					if(cur.x + 1 < m && walkable3[cur.x+1][cur.y] && !vis3[cur.x+1][cur.y]){
						vis3[cur.x+1][cur.y] = true;
						q.add(new Position(cur.x+1, cur.y,cur.steps + 1));
					}
					if(cur.x - 1 >= 0 && walkable3[cur.x-1][cur.y] && !vis3[cur.x-1][cur.y]){
						vis3[cur.x-1][cur.y] = true;
						q.add(new Position(cur.x-1, cur.y,cur.steps + 1));
					}
					if(cur.y - 1 >= 0 && walkable3[cur.x][cur.y - 1] && !vis3[cur.x][cur.y - 1]){
						vis3[cur.x][cur.y - 1] = true;
						q.add(new Position(cur.x, cur.y-1,cur.steps + 1));
					}
				}
				if(count == 3){
					if(walkable4[cur.x][cur.y] == false){
						count++;
						continue;
					}
					if(cur.y + 1 < n && walkable4[cur.x][cur.y + 1] && !vis4[cur.x][cur.y + 1]){
						vis4[cur.x][cur.y + 1] = true;
						q.add(new Position(cur.x, cur.y+1,cur.steps + 1));
					}
					if(cur.x + 1 < m && walkable4[cur.x+1][cur.y] && !vis4[cur.x+1][cur.y]){
						vis4[cur.x+1][cur.y] = true;
						q.add(new Position(cur.x+1, cur.y,cur.steps + 1));
					}
					if(cur.x - 1 >= 0 && walkable4[cur.x-1][cur.y] && !vis4[cur.x-1][cur.y]){
						vis4[cur.x-1][cur.y] = true;
						q.add(new Position(cur.x-1, cur.y,cur.steps + 1));
					}
					if(cur.y - 1 >= 0 && walkable4[cur.x][cur.y - 1] && !vis4[cur.x][cur.y - 1]){
						vis4[cur.x][cur.y - 1] = true;
						q.add(new Position(cur.x, cur.y-1,cur.steps + 1));
					}
				}
				count++;
			}
			if(found == 0)
				out.print("Case #" + numcase + ": impossible");
			else
				out.print("Case #" + numcase + ": " + steps);
		}
		out.close();
	}
	public static class Position{
		int x,y,steps;
		public Position(int x, int y, int steps){
			this.x = x;
			this.y = y;
			this.steps = steps;
		}
	}

}

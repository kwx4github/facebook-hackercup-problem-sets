#include<iostream>
#include<stdio.h>
#include<math.h>
#include<queue>
#include<string.h>
using namespace std;


int n, m;


const int infinity = 1000000007;

int xcor[4] = {-1,0,1,0}, ycor[4] = {0,1,0,-1};
int visited[4][111][111], d[4][111][111];

string matr[4][111];

int in(int x, int y)
{
    return x >= 0 && y >= 0 && x < n && y < m;
}
int strr(char c)
{
    return c == '.' || c == 'X' || c == 'S' || c == 'G';
}
int paint(int x, int y, int dir) {
	for(int i=0;i<4;i++) {
		matr[i][x][y] = '#';
		int x1 = x+xcor[(dir+i)%4], y1 = y+ycor[(dir+i)%4];

		while(in(x1,y1) && strr(matr[i][x1][y1]))
            {
			matr[i][x1][y1] = 'X';
			x1 += xcor[(dir+i)%4];
			y1 += ycor[(dir+i)%4];
		}
	}
}
void breadth(int x, int y)
{
	queue <pair<int,pair<int,int> > > q;
	q.push(make_pair(0,make_pair(x,y)));
	d[0][x][y] = 0;
	visited[0][x][y] = 1;
	while(!q.empty()) {
		x = q.front().second.first;
		y = q.front().second.second;
		int t = q.front().first;
		q.pop();
		for(int i=0;i<4;i++) {
			int x1 = x + xcor[i], y1 = y + ycor[i], n1 = (t+1)%4;
			if(in(x1,y1) && !visited[n1][x1][y1] && matr[n1][x1][y1] == '.') {
				d[n1][x1][y1] = d[t][x][y] + 1;
				visited[n1][x1][y1] = 1;
				q.push(make_pair(n1,make_pair(x1,y1)));
			}
		}
	}
}
int main() {
	int T;
	cin >> T;
	FILE *fp;
	fp=fopen("hacker.txt","w");
	for(int t=1;t<=T;t++) {
		int gi, gj, si, sj;
		memset(visited,0,sizeof(visited));
		cin >> n >> m;
		for(int i=0;i<4;i++) for(int j=0;j<n;j++) for(int k=0;k<m;k++) d[i][j][k] = infinity;
		fprintf(fp,"Case #%d: ", t);
		for(int i=0;i<n;i++) cin >> matr[0][i];
		for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
			if(matr[0][i][j] == 'S') si = i, sj = j, matr[0][i][j] = '.';
			if(matr[0][i][j] == 'G') gi = i, gj = j, matr[0][i][j] = '.';
		}
		for(int i=1;i<4;i++) for(int j=0;j<n;j++) matr[i][j] = matr[0][j];
		for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
			if(matr[0][i][j] == '^') paint(i,j,0);
			else if(matr[0][i][j] == '>') paint(i,j,1);
			else if(matr[0][i][j] == 'v') paint(i,j,2);
			else if(matr[0][i][j] == '<') paint(i,j,3);
		}
		breadth(si,sj);
		int k = infinity;
		for(int i=0;i<4;i++) k = min(k,d[i][gi][gj]);
		if(k == infinity) fprintf(fp,"impossible\n");
		else fprintf(fp,"%d\n",k);
	}
	return 0;
}

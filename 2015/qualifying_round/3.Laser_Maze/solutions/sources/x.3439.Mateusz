#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
const int N = 105;
char board[N][N];
int startx, starty, goalx, goaly;
int t, n, m;
int dist[4][N][N];
bool vis[4][N][N], cantGet[4][N][N];
queue<pair<int, pair<int, int> > > Q;
bool free(char x)
{
	return x == '.' || x == 'S' || x == 'G';
}
inline bool proceed(int d, int x, int y, int D)
{
	if(x >= 1 && x <= n && y >= 1 && y <= m && !cantGet[d][x][y] && !vis[d][x][y])
	{
		vis[d][x][y] = true;
		dist[d][x][y] = D + 1;
		Q.push({d, {x, y}});
	}
}
int BFS()
{
	vis[0][startx][starty] = true;
	while(!Q.empty())Q.pop();
	Q.push({0, {startx, starty}});
	while(!Q.empty())
	{
		int d = Q.front().first;
		int x = Q.front().second.first;
		int y = Q.front().second.second;
		Q.pop();
		int D = dist[d][x][y];
		if(x == goalx && y == goaly) return D;
		int nd = (d + 1) % 4;
		proceed(nd, x - 1, y, D);
		proceed(nd, x + 1, y, D);
		proceed(nd, x, y - 1, D);
		proceed(nd, x, y + 1, D);
	}
	return 0;
}

int main()
{
	scanf("%d", &t);
	for(int p = 1; p <= t; p++)
	{
		printf("Case #%d: ", p);
		scanf("%d %d", &n, &m);
		for(int i = 1; i <= n; i++)
			scanf("%s", &board[i][1]);
		for(int k = 0; k < 4; k++)
		{
			for(int i = 1; i <= n; i++)
			{
				for(int j = 1; j <= m; j++)
				{
					if(board[i][j] == '^')
					{
						for(int l = i - 1; l >= 1 && free(board[l][j]); l--)
							cantGet[k][l][j] = true;
						board[i][j] = '<';
					}
					else if(board[i][j] == '<')
					{
						for(int l = j - 1; l >= 1 && free(board[i][l]); l--)
							cantGet[k][i][l] = true;
						board[i][j] = 'v';
					}	
					else if(board[i][j] == 'v')
					{
						for(int l = i + 1; l <= n && free(board[l][j]); l++)
							cantGet[k][l][j] = true;
						board[i][j] = '>';
					
					}
					else if(board[i][j] == '>')
					{
						for(int l = j + 1; l <= m && free(board[i][l]); l++)
							cantGet[k][i][l] = true;
						board[i][j] = '^';
					}
					else if(board[i][j] == 'S')
					{
						startx = i;
						starty = j;
					}
					else if(board[i][j] == 'G')
					{
						goalx = i;
						goaly = j;
					}
				}
			}
		}
		int res = BFS();
		if(res == 0)
			printf("impossible\n");
		else
			printf("%d\n", res);
		for(int k = 0; k < 4; k++)
			for(int i = 1; i <= n; i++)
				for(int j = 1; j <= m; j++)
					vis[k][i][j] = cantGet[k][i][j] = dist[k][i][j] = false;
	}
	return 0;
}
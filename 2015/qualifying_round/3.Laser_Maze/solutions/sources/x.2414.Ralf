'Ralf Mouthaan
'Facebook Hacker Cup 2014
'Qualifying Q3 - Laser Maze

Option Explicit On
Option Strict On

Module Module1

    'Globals parameters
    'Maze has dimensions m x n x t where t is a time variable
    'start position and end position indices are also saved
    Public Maze(,,) As Integer
    Public m As Integer, n As Integer
    Public starti, startj, endi, endj As Integer

    Sub Main()

        Dim NoMazes As Integer
        Dim MinDist As Integer

        'Prompt user for file, open readers and writers
        Dim dlg As New System.Windows.Forms.OpenFileDialog
        dlg.InitialDirectory = "C:\Users\Ralf\Desktop"
        dlg.Filter = "Text Files|*.txt"
        If dlg.ShowDialog() = vbCancel Then Exit Sub
        If dlg.FileName = "" Then Exit Sub
        Dim strOutputFile As String = "C:\Users\Ralf\Desktop\FHC_Q_Q1_Output.txt"

        Dim reader As New System.IO.StreamReader(dlg.FileName)
        Dim writer As New System.IO.StreamWriter(strOutputFile)
        NoMazes = CInt(reader.ReadLine)

        'Iterate through file, reading in each maze and solving it
        For i = 1 To NoMazes
            Call ReadNextMaze(reader)
            MinDist = GetMinDist()
            If MinDist > 0 Then
                writer.Write("Case #" & CStr(i) & ": " & MinDist & vbLf)
            Else
                writer.Write("Case #" & CStr(i) & ": impossible" & vbLf)
            End If
        Next

        writer.Close()
        reader.Close()

        System.Diagnostics.Process.Start("wordpad.exe", strOutputFile)

    End Sub

    Public Sub ReadNextMaze(ByRef reader As System.IO.StreamReader)

        Dim splitstr() As String
        Dim str As String
        Dim lstTurretDirection As New List(Of String)
        Dim lstTurreti As New List(Of Integer)
        Dim lstTurretj As New List(Of Integer)

        'redim maze based on first parameters
        splitstr = Split(reader.ReadLine, " ")
        m = CInt(splitstr(0)) : n = CInt(splitstr(1))
        ReDim Maze(m - 1, n - 1, 3)

        'Interpret data from file. 
        'Save positions of walls, turrets, non-walls, start and finish positions
        'Walls denoted 1, gaps 0
        For i = 0 To m - 1
            str = reader.ReadLine
            For j = 0 To n - 1

                If str.Substring(j, 1) = "." Or str.Substring(j, 1) = "G" Or str.Substring(j, 1) = "S" Then
                    For k = 0 To 3
                        Maze(i, j, k) = 0
                    Next
                Else
                    For k = 0 To 3
                        Maze(i, j, k) = 1
                    Next
                End If

                If str.Substring(j, 1) = "<" Or str.Substring(j, 1) = ">" Or str.Substring(j, 1) = "^" Or str.Substring(j, 1) = "v" Then
                    lstTurretDirection.Add(str.Substring(j, 1))
                    lstTurreti.Add(i)
                    lstTurretj.Add(j)
                End If

                If str.Substring(j, 1) = "S" Then
                    starti = i : startj = j
                ElseIf str.Substring(j, 1) = "G" Then
                    endi = i : endj = j
                End If

            Next
        Next

        'Add laser beams, denote these 2, accounting for turning of the turrets
        For i = 0 To lstTurretDirection.Count - 1
            If lstTurretDirection.Item(i) = "<" Then
                Call LaserLeft(lstTurreti.Item(i), lstTurretj.Item(i), 0)
                Call LaserUp(lstTurreti.Item(i), lstTurretj.Item(i), 1)
                Call LaserRight(lstTurreti.Item(i), lstTurretj.Item(i), 2)
                Call LaserDown(lstTurreti.Item(i), lstTurretj.Item(i), 3)
            ElseIf lstTurretDirection.Item(i) = "^" Then
                Call LaserUp(lstTurreti.Item(i), lstTurretj.Item(i), 0)
                Call LaserRight(lstTurreti.Item(i), lstTurretj.Item(i), 1)
                Call LaserDown(lstTurreti.Item(i), lstTurretj.Item(i), 2)
                Call LaserLeft(lstTurreti.Item(i), lstTurretj.Item(i), 3)
            ElseIf lstTurretDirection.Item(i) = ">" Then
                Call LaserRight(lstTurreti.Item(i), lstTurretj.Item(i), 0)
                Call LaserDown(lstTurreti.Item(i), lstTurretj.Item(i), 1)
                Call LaserLeft(lstTurreti.Item(i), lstTurretj.Item(i), 2)
                Call LaserUp(lstTurreti.Item(i), lstTurretj.Item(i), 3)
            ElseIf lstTurretDirection.Item(i) = "v" Then
                Call LaserDown(lstTurreti.Item(i), lstTurretj.Item(i), 0)
                Call LaserLeft(lstTurreti.Item(i), lstTurretj.Item(i), 1)
                Call LaserUp(lstTurreti.Item(i), lstTurretj.Item(i), 2)
                Call LaserRight(lstTurreti.Item(i), lstTurretj.Item(i), 3)
            End If
        Next

    End Sub
    Public Sub LaserLeft(ByVal i As Integer, ByVal j As Integer, ByVal k As Integer)

        Do
            Maze(i, j, k) = 2
            j = j - 1
            If j < 0 Then Exit Do
            If Maze(i, j, k) = 1 Then Exit Do
        Loop Until False

    End Sub
    Public Sub LaserRight(ByVal i As Integer, ByVal j As Integer, ByVal k As Integer)

        Do
            Maze(i, j, k) = 2
            j = j + 1
            If j > UBound(Maze, 2) Then Exit Do
            If Maze(i, j, k) = 1 Then Exit Do
        Loop Until False

    End Sub
    Public Sub LaserUp(ByVal i As Integer, ByVal j As Integer, ByVal k As Integer)

        Do
            Maze(i, j, k) = 2
            i = i - 1
            If i < 0 Then Exit Do
            If Maze(i, j, k) = 1 Then Exit Do
        Loop Until False

    End Sub
    Public Sub LaserDown(ByVal i As Integer, ByVal j As Integer, ByVal k As Integer)

        Do
            Maze(i, j, k) = 2
            i = i + 1
            If i > UBound(Maze, 1) Then Exit Do
            If Maze(i, j, k) = 1 Then Exit Do
        Loop Until False

    End Sub

    Public Function GetMinDist() As Integer

        Dim MinDist As Integer
        Dim Dist(m - 1, n - 1, 3) As Integer

        For i = 0 To m - 1
            For j = 0 To n - 1
                For k = 0 To 3
                    Dist(i, j, k) = 999999
                Next
            Next
        Next
        Dist(starti, startj, 0) = 0

        Dim arristep() As Integer = {-1, 1, 0, 0}
        Dim arrjstep() As Integer = {0, 0, -1, 1}
        Dim kstep As Integer
        Dim ChangesMade As Boolean

        Do

            ChangesMade = False

            For k = 0 To 3
                For i = 0 To m - 1
                    For j = 0 To n - 1

                        If k = 3 Then kstep = -3 Else kstep = 1

                        'Iterates through the possible steps
                        For z = 0 To 3

                            If i + arristep(z) >= 0 And i + arristep(z) <= m - 1 And j + arrjstep(z) >= 0 And j + arrjstep(z) <= n - 1 Then
                                If Maze(i + arristep(z), j + arrjstep(z), k + kstep) = 0 Then
                                    If Dist(i + arristep(z), j + arrjstep(z), k + kstep) > Dist(i, j, k) + 1 Then
                                        Dist(i + arristep(z), j + arrjstep(z), k + kstep) = Dist(i, j, k) + 1
                                        ChangesMade = True
                                    End If
                                End If
                            End If

                        Next

                    Next
                Next
            Next

        Loop Until ChangesMade = False

        'Find minimum distance
        MinDist = Integer.MaxValue
        For k = 0 To 3
            If Dist(endi, endj, k) < MinDist Then
                MinDist = Dist(endi, endj, k)
            End If
        Next

        If MinDist = 999999 Then Return -1
        Return MinDist

    End Function

End Module
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class C {
    BufferedReader br;
    PrintWriter out;
    StringTokenizer stok;

    String nextToken() throws IOException {
        while (stok == null || !stok.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null) {
                return null;
            }
            stok = new StringTokenizer(s);
        }
        return stok.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    char nextChar() throws IOException {
        return (char) (br.read());
    }

    String nextLine() throws IOException {
        return br.readLine();
    }


    boolean inField(int i, int j, int n, int m) {
        return(i >= 0 && j >= 0 && i < n && j < m);
    }
    int[] dx = {0, 1, 0, -1};
    int[] dy = {1, 0, -1, 0};


    private void solve() throws IOException {
        int T = nextInt();
        for (int q = 1; q <= T; q++) {
            int n = nextInt();
            int m = nextInt();
            char[][] cc = new char[n][m];
            for (int i = 0; i < n; i++) {
                String s = nextToken();
                cc[i] = s.toCharArray();
            }

            char[][][] c = new char[4][n][m];
            int[][][] d = new int[4][n][m];
            for (int v = 0; v < 4; v++) {
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < m; j++) {
                        d[v][i][j] = Integer.MAX_VALUE / 2;

                        if (cc[i][j] == '#') {
                            c[v][i][j] = '#';
                        }
                        int napr = -1;
                        if (cc[i][j] == '>') {
                            napr = 0;
                            c[v][i][j] = '#';
                        }
                        if (cc[i][j] == 'v') {
                            napr = 1;
                            c[v][i][j] = '#';
                        }
                        if (cc[i][j] == '<') {
                            napr = 2;
                            c[v][i][j] = '#';
                        }
                        if (cc[i][j] == '^') {
                            napr = 3;
                            c[v][i][j] = '#';
                        }
                        if (napr == -1) continue;
                        int qv = (napr + v) % 4;
                        int ti = i + dx[qv], tj = j + dy[qv];
                        while (inField(ti, tj, n, m) && (cc[ti][tj] == '.' || cc[ti][tj] == 'S' ||cc[ti][tj] == 'G')) {
                            c[v][ti][tj] = '#';
                            ti += dx[qv];
                            tj += dy[qv];
                        }
                    }
                }
            }
            int fi = -1;
            int si = -1;
            int fj = -1;
            int sj = -1;

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (cc[i][j] == 'S') {
                        si = i;
                        sj = j;
                    }
                    if (cc[i][j] == 'G') {
                        fi = i;
                        fj = j;
                    }
                }
            }/*
            if (c[0][si][sj] == '#') {
                out.printf("Case #%d: impossible%n", q);
                continue;
            }*/
            d[0][si][sj] = 0;
            Queue<Integer> queue = new ArrayDeque<Integer>();
            queue.add(si);
            queue.add(sj);
            queue.add(0);
            while (!queue.isEmpty()) {
                int i = queue.poll();
                int j = queue.poll();
                int v = queue.poll();
                for (int w = 0; w < 4; w++) {
                    int ti = i + dx[w];
                    int tj = j + dy[w];
                    if (inField(ti, tj, n, m) && c[(v + 1) % 4][ti][tj] != '#' && d[(v + 1) % 4][ti][tj] > d[v][i][j] + 1) {
                        d[(v + 1) % 4][ti][tj] = d[v][i][j] + 1;
                        queue.add(ti);
                        queue.add(tj);
                        queue.add((v + 1) % 4);
                    }
                }
            }

            int ans = Integer.MAX_VALUE;
            for (int v = 0; v < 4; v++) {
                ans = Math.min(ans, d[v][fi][fj]);
            }
            if (ans >= Integer.MAX_VALUE / 2) {
                out.printf("Case #%d: impossible%n", q);
            } else {
                out.printf("Case #%d: %d%n", q, ans);
            }
        }
    }



    void run() throws IOException {
        br = new BufferedReader(new FileReader("input.txt"));
        out = new PrintWriter("output.txt");
        // br = new BufferedReader(new InputStreamReader(System.in));
        // out = new PrintWriter(System.out);
        solve();
        br.close();
        out.close();
    }

    public static void main(String[] args) throws IOException {
        // Locale.setDefault(Locale.US);
        new C().run();
    }
}
#include <algorithm>
#include <numeric>
#include <string>
#include <string.h>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <iostream>
#include <fstream>
#include <cmath>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <sstream>
#include <stdio.h>
#include <stack>

using namespace std;
char mas[100][100][4];
bool used[100][100][4];

void solve(int t) {
    int h,w;
    cin>>h>>w;
    int as,bs,ae,be;
    for (int i=0;i<h;i++) {
        for (int j=0;j<w;j++) {
            cin>>mas[i][j][0];
            if (mas[i][j][0]=='S') {
                as=i;
                bs=j;
                mas[i][j][0]='.';
            } else if (mas[i][j][0]=='G') {
                ae=i;
                be=j;
                mas[i][j][0]='.';
            }
        }
    }    
    for (int t=1;t<4;t++) {
        for (int i=0;i<h;i++) {
            for (int j=0;j<w;j++) {
                if (mas[i][j][t-1]=='>')
                    mas[i][j][t]='v';
                else if (mas[i][j][t-1]=='v')
                    mas[i][j][t]='<';
                else if (mas[i][j][t-1]=='<')
                    mas[i][j][t]='^';
                else if (mas[i][j][t-1]=='^')
                    mas[i][j][t]='>';
                else
                    mas[i][j][t]=mas[i][j][t-1];
            }
        }
    }
    for (int t=0;t<4;t++) {
        for (int i=0;i<h;i++) {
            for (int j=0;j<w;j++) {
                used[i][j][t]=false;
                if (mas[i][j][t]=='>') {
                    for (int k=j+1;k<w;++k) {
                        if (mas[i][k][t]!='.'&&mas[i][k][t]!='1')
                            break;
                        mas[i][k][t]='1';
                    }
                } else if (mas[i][j][t]=='v') {
                    for (int k=i+1;k<h;++k) {
                        if (mas[k][j][t]!='.'&&mas[i][k][t]!='1')
                            break;
                        mas[k][j][t]='1';
                    }
                } else if (mas[i][j][t]=='<') {
                    for (int k=j-1;k>=0;--k) {
                        if (mas[i][k][t]!='.'&&mas[i][k][t]!='1')
                            break;
                        mas[i][k][t]='1';
                    }
                } else if (mas[i][j][t]=='^') {
                    for (int k=i-1;k>=0;--k) {
                        if (mas[k][j][t]!='.'&&mas[i][k][t]!='1')
                            break;
                        mas[k][j][t]='1';
                    }
                }
            }
        }
        for (int i=0;i<h;i++) {
            for (int j=0;j<w;j++) {
                if (mas[i][j][t]!='.')
                    mas[i][j][t]='#';
            }
        }
    }
    queue<pair<pair<int,int>,pair<int,int> > > q;
    q.push(make_pair(make_pair(as,bs),make_pair(0,0)));
    used[as][bs][0]=true;
    while (!q.empty()) {
        pair<pair<int,int>,pair<int,int> > v=q.front();
        q.pop();
        int cx=v.first.first;
        int cy=v.first.second;        
        int curt=v.second.first;        
        int curm=v.second.second;
        if (cx == ae && cy == be) {
            printf("Case #%d: %d\n",t+1,curm);
            return;
        }
        if (cx>0 && !used[cx-1][cy][(curt+1)%4] && mas[cx-1][cy][(curt+1)%4]=='.') {
            q.push(make_pair(make_pair(cx-1,cy),make_pair((curt+1)%4,curm+1)));
            used[cx-1][cy][(curt+1)%4]=true;
        }
        if (cx<h-1 && !used[cx+1][cy][(curt+1)%4] && mas[cx+1][cy][(curt+1)%4]=='.') {
            q.push(make_pair(make_pair(cx+1,cy),make_pair((curt+1)%4,curm+1)));
            used[cx+1][cy][(curt+1)%4]=true;
        }
        if (cy>0 && !used[cx][cy-1][(curt+1)%4] && mas[cx][cy-1][(curt+1)%4]=='.') {
            q.push(make_pair(make_pair(cx,cy-1),make_pair((curt+1)%4,curm+1)));
            used[cx][cy-1][(curt+1)%4]=true;
        }
        if (cy<w-1 && !used[cx][cy+1][(curt+1)%4] && mas[cx][cy+1][(curt+1)%4]=='.') {
            q.push(make_pair(make_pair(cx,cy+1),make_pair((curt+1)%4,curm+1)));
            used[cx][cy+1][(curt+1)%4]=true;
        }
    }
    printf("Case #%d: impossible\n",t+1);   
}

int main() {
    freopen("in.in", "r", stdin);
    freopen("out.out", "w", stdout);
    int t;
    cin>>t;
    for (int i=0;i<t;i++) {
        solve(i);        
    }
    return 0;
}
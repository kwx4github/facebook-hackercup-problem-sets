//
//  main.cpp
//  Coding
//
//  Created by Hao Wu on 1/9/15.
//  Copyright (c) 2015 Hao Wu. All rights reserved.
//

#include <iostream>
#include <fstream>
using namespace std;


int dir[4][2]= {{1,0},{0,-1},{-1,0},{0,1}};

int main() {
    int T;
    int N,M;
    bool map[101][101];
    bool tmap[4][101][101];
    bool v[4][101][101];
    int q[100*100][3];
    int f,r;
    int lasers[100*100][3];
    int startx,starty;
    int endx,endy;
    ifstream ifs;
    ifs.open("input.txt");
    ofstream ofs;
    ofs.open("output.txt");
    int lasercount = 0;
    int count = 1;
    ifs>>T;
    char inc;
    while (T>0){
        T--;
        bool found = false;
        ofs<<"Case #"<<count<<": ";
        count +=1;
        ifs>>N>>M;
        lasercount = 0;
        for (int i=0;i<N;i++) {
            for (int j=0;j<M;j++) {
                ifs>>inc;
                switch (inc) {
                        case '#':
                            map[i][j] = false;
                        break;
                        case '.':
                            map[i][j] = true;
                        break;
                        case 'S':
                            map[i][j] = true;
                            startx = i;
                            starty = j;
                        break;
                        case 'G':
                        map[i][j] = true;
                            endx = i;
                            endy = j;
                        break;
                        case '^':
                        map[i][j] = false;
                            lasers[lasercount][0] = i;
                            lasers[lasercount][1] = j;
                            lasers[lasercount][2] = 2;
                        lasercount++;
                        break;
                        
                        case '>':
                        map[i][j] = false;
                            lasers[lasercount][0] = i;
                            lasers[lasercount][1] = j;
                            lasers[lasercount][2] = 3;
                        lasercount++;
                        break;
                      
                        case '<':
                        map[i][j] = false;
                            lasers[lasercount][0] = i;
                            lasers[lasercount][1] = j;
                            lasers[lasercount][2] = 1;
                        lasercount++;
                        break;
                        
                        case 'v':
                        map[i][j] = false;
                            lasers[lasercount][0] = i;
                            lasers[lasercount][1] = j;
                            lasers[lasercount][2] = 0;
                        lasercount++;
                        break;
                        
                };
                for (int k=0;k<4;k++) tmap[k][i][j] = map[i][j];
            }
        }
        
        cout<<"laser count "<<lasercount<<endl;
        

        for (int k=0;k<4;k++) {
            for (int i=0;i<lasercount; i++) {
                int j = 1;
                cout<<"direction "<<dir[lasers[i][2]][0]<<','<<dir[lasers[i][2]][1]<<endl;
                while (lasers[i][0]+j*dir[(k+lasers[i][2])%4][0]>=0
                       && lasers[i][0]+j*dir[(k+lasers[i][2])%4][0]<N
                       && lasers[i][1]+j*dir[(k+lasers[i][2])%4][1]>=0
                       && lasers[i][1]+j*dir[(k+lasers[i][2])%4][1]<M
                       && map[lasers[i][0]+j*dir[(k+lasers[i][2])%4][0]][lasers[i][1]+j*dir[(k+lasers[i][2])%4][1]]) {
                    tmap[k][lasers[i][0]+j*dir[(k+lasers[i][2])%4][0]][lasers[i][1]+j*dir[(k+lasers[i][2])%4][1]] = false;
                    j++;
                }
                
            }
            
        }
        
        for (int k=0;k<4;k++)
            for (int i=0;i<N;i++)
                for (int j=0;j<M;j++)
                    v[k][i][j] = true;
        
        f = -1;
        r = 0;
        q[0][0] = startx;
        q[0][1] = starty;
        q[0][2] = 0;
        v[0][startx][starty] = false;
        
     
        cout<<"start "<<startx<<','<<starty<<endl;
        cout<<"end "<<endx<<','<<endy<<endl;
        
        for (int k=0; k<4;k++){
            for (int i=0;i<N;i++){
                for (int j=0;j<M;j++){
                    if (tmap[k][i][j])cout<<"1"; else cout<<0;
                    }
                cout<<endl;
                }
            
            cout<<"---------\n";
        
        }
     
        
        while (f<r) {
            f = f + 1;
            cout<<q[f][0]<<" " <<q[f][1]<<endl;
            if (q[f][0]==endx && q[f][1] == endy) {
                found = true;
                ofs<<q[f][2]<<'\n';
                f = r+1;
            } else {
            for (int i=0;i<4;i++) {
                    if (q[f][0] + dir[i][0] >=0 && q[f][0] + dir[i][0] < N
                        && q[f][1] + dir[i][1] >=0 && q[f][1] + dir[i][1] <M
                        && v[(q[f][2]+1)%4][q[f][0] + dir[i][0]][q[f][1] + dir[i][1]]&& tmap[(q[f][2]+1)%4][q[f][0] + dir[i][0]][q[f][1] + dir[i][1]]) {
                        r = r + 1;
                        q[r][0] = q[f][0] + dir[i][0];
                        q[r][1] = q[f][1] + dir[i][1];
                        q[r][2] = q[f][2] + 1;
                        v[(q[f][2]+1)%4][q[r][0]][q[r][1]] = false;
                        cout<<"----"<<q[r][0]<<" "<<q[r][1]<<endl;
                    }
            }
            }
            
            
            
        }
        
        if (!found) {
            ofs<<"impossible\n";
        }
        
        
    }
    
    
    ifs.close();
    ofs.close();
    
    
}

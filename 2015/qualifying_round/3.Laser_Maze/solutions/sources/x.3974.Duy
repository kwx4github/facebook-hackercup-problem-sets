import java.util.Arrays;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskC solver = new TaskC();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class TaskC {
    static int n;
    static int m;
    static char[][] maze;
    static int rF;
    static int cF;
    static int rT;
    static int cT;
    static int[][] points;
    static int INF = Integer.MAX_VALUE;
    static int[][][] lazer;

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        n = in.nextInt();
        m = in.nextInt();
        maze = new char[n][];
        points = new int[n][m];
        lazer = new int[n][m][4];
        for (int i = 0; i < n; i++) {
            maze[i] = in.next().toCharArray();
            Arrays.fill(points[i], INF);
            for (int j = 0; j < m; j++) {
                if (maze[i][j] == 'S') {
                    rF = i;
                    cF = j;
                    points[i][j] = 0;
                }
                if (maze[i][j] == 'G') {
                    rT = i;
                    cT = j;
                }
                if (maze[i][j] == '^' || maze[i][j] == '>' || maze[i][j] == 'v' || maze[i][j] == '<') {
                    update(i, j);
                }

            }
        }


        out.print("Case #" + testNumber + ": ");
        dfs(rF, cF);
        if (points[rT][cT] == INF) {
            out.println("impossible");
        } else {
            out.println(points[rT][cT]);
        }
    }

    private void dfs(int i, int j) {
        if (maze[i][j] == 'G')
            return;
        int val = (points[i][j] + 1) % 4;
        if (i - 1 >= 0 && (maze[i - 1][j] == '.' || maze[i - 1][j] == 'G')) {

            calc(i, j, i - 1, j, val);
        }
        if (i + 1 < n && (maze[i + 1][j] == '.' || maze[i + 1][j] == 'G')) {
            calc(i, j, i + 1, j, val);
        }
        if (j - 1 >= 0 && (maze[i][j - 1] == '.' || maze[i][j - 1] == 'G')) {
            calc(i, j, i, j - 1, val);
        }
        if (j + 1 < m && (maze[i][j + 1] == '.' || maze[i][j + 1] == 'G')) {
            calc(i, j, i, j + 1, val);
        }
    }

    private void calc(int curX, int curY, int nextX, int nextY, int val) {
        if (lazer[nextX][nextY][val] == 1) {
            if ((curY - 1 >= 0 && lazer[curX][curY - 1][val] == 0) || (curY + 1 < m && lazer[curX][curY + 1][val] == 0)
                    || (curX - 1 >= 0 && lazer[curX - 1][curY][val] == 0) || (curX + 1 < n && lazer[curX + 1][curY][val] == 0)) {
                if (points[curX][curY] + 3 < points[nextX][nextY]) {
                    points[nextX][nextY] = points[curX][curY] + 3;
                    dfs(nextX, nextY);
                }
            }
        } else {
            if (points[curX][curY] + 1 < points[nextX][nextY]) {
                points[nextX][nextY] = points[curX][curY] + 1;
                dfs(nextX, nextY);
            }
        }
    }

    private void update(int i, int j) {
        int left, right, up, down;
        if (maze[i][j] == 'v') {
            down = 0;
            left = 1;
            up = 2;
            right = 3;
        } else if (maze[i][j] == '<') {
            down = 3;
            left = 0;
            up = 1;
            right = 2;
        } else if (maze[i][j] == '^') {
            down = 2;
            left = 3;
            up = 0;
            right = 1;
        } else {
            down = 1;
            left = 2;
            up = 3;
            right = 0;
        }
        for (int k = 0; k < n; k++) {
            if (k < i) {
                lazer[k][j][up] = 1;
            }
            if (k > i) {
                lazer[k][j][down] = 1;
            }
        }
        for (int k = 0; k < m; k++) {
            if (k < j) {
                lazer[i][k][left] = 1;
            }
            if (k > j) {
                lazer[i][k][right] = 1;
            }
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }


}


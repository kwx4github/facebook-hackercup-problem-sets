#include <stdio.h>
#include <string.h>
#include <queue>
using namespace std;
#define inside(r, c) ((0<=(r))&&(0<=(c))&&((r)<n)&&((c)<m))

struct State{
    short r, c, t;
    State(int _r, int _c, int _t){
        r = _r;
        c = _c;
        t = _t;
    }
};

int dRow[]={-1, 0, 1, 0};
int dCol[]={0, 1, 0, -1};
char A[101][101];
int M[101][101][4];
int attacked[101][101][4];
int m, n, sr, sc, gr, gc;

int get_dir_index(char c){
    switch(c){
        case '^':
            return 0;
        case '>':
            return 1;
        case 'v':
            return 2;
        case '<':
            return 3;
    }
    return -1;
}

void check_turret(int r, int c){
    int dir = get_dir_index(A[r][c]);
    if(dir < 0){
        return;
    }
    for(int k=0;k<4;++k){
        int tt = ((k + 4) - dir) % 4;
        int pr = r + dRow[k];
        int pc = c + dCol[k];
        while(inside(pr, pc) && (A[pr][pc]=='.')){
            attacked[pr][pc][tt] = 1;
            pr += dRow[k];
            pc += dCol[k];
        }
    }
}

void compute_attacked(void){
    memset(attacked, 0, sizeof(attacked));
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            check_turret(i,j);
        }
    }
}

int get_min(void){
    compute_attacked();
    memset(M, -1, sizeof(M));
    
    queue<State> Q;
    Q.push(State(sr, sc, 0));
    M[sr][sc][0] = 0;
    
    while(!(Q.empty())){
        State current = Q.front();
        Q.pop();
        
        int tt = (current.t + 1) % 4;
        for(int k=0;k<4;++k){
            int rr = current.r + dRow[k];
            int cc = current.c + dCol[k];
            
            if((!inside(rr,cc)) || (A[rr][cc] != '.')){
                continue;
            }
            if(M[rr][cc][tt] != -1){
                continue;
            }
            if(attacked[rr][cc][tt]){
                continue;
            }
            State next(rr, cc, tt);
            M[rr][cc][tt] = M[current.r][current.c][current.t] + 1;
            Q.push(next);
        }
    }
    
    int sol = -1;
    for(int i=0; i<4; ++i)if(M[gr][gc][i]>=0){
        if((M[gr][gc][i] < sol) || (sol<0)){
            sol = M[gr][gc][i];
        }
    }
    return sol;
}

int main(){
    int T;
    scanf("%d", &T);
    for(int t=1;t<=T;++t){
        scanf("%d%d", &n, &m);
        for(int i=0;i<n;++i){
            scanf("%s", A[i]);
            for(int j=0;j<m;++j){
                if(A[i][j]=='S'){
                    sr = i;
                    sc = j;
                    A[i][j] = '.';
                }else if(A[i][j]=='G'){
                    gr = i;
                    gc = j;
                    A[i][j] = '.';
                }
            }
        }
        int sol = get_min();
        if(sol<0){
            printf("Case #%d: impossible\n", t);
        }else{
            printf("Case #%d: %d\n", t, sol);
        }
    }
    return 0;
}
import java.io.IOException;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Random;
import java.io.FileInputStream;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream;
		try {
			inputStream = new FileInputStream("laser_maze.txt");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lasermaze.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {
    boolean in(int r1, int c1, int r, int c) {
        return r1 >= 0 && c1 >= 0 && r1 < r && c1 < c;
    }

    boolean canMove(int r1, int c1, char[][] maze) {
        if (in(r1, c1, maze.length, maze[0].length) == false) return false;
        if (maze[r1][c1] == 'G' || maze[r1][c1] == 'S' || maze[r1][c1] == '.') return true;
        else return false;
    }

    public static int[] dr = {0, -1, 0, 1};
    public static int[] dc = {-1, 0, 1, 0};

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int r = in.readInt();
        int c = in.readInt();
        char[][] maze = new char[r][];

        for (int i = 0; i < r; ++i) {
            maze[i] = in.readString().toCharArray();
        }

        boolean[][][] vis = new boolean[4][r][c];
        int sr = 0;
        int sc = 0;
        int gr = 0;
        int gc = 0;
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                if (maze[i][j] == 'S') {
                    sr = i;
                    sc = j;
                }
                if (maze[i][j] == 'G') {
                    gr = i;
                    gc = j;
                }
            }
        }

        boolean[][][] attack = new boolean[4][r][c];
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                int dir = -1;
                if (maze[i][j] == '<') dir = 0;
                else if (maze[i][j] == '^') dir = 1;
                else if (maze[i][j] == '>') dir = 2;
                else if (maze[i][j] == 'v') dir = 3;

                if (dir == -1) continue;

                for (int ro = 0; ro < 4; ++ro) {
                    int cr = i;
                    int cc = j;
                    for (int k = 0; ; ++k) {
                        cr += dr[dir];
                        cc += dc[dir];
                        if (canMove(cr, cc, maze)) {
                            attack[ro][cr][cc] = true;
                        } else {
                            break;
                        }
                    }
                    dir = (dir + 1) % 4;
                }
            }
        }

        int minDist = -1;
        int[][][] dist = new int[4][r][c];
        ArrayUtils.FillArray(dist, -1);
        int[] qm = new int[4 * 100 * 100 + 100];
        int[] qr = new int[4 * 100 * 100 + 100];
        int[] qc = new int[4 * 100 * 100 + 100];
        int qback = 1;
        int qfront = 0;
        qm[qfront] = 0;
        qr[qfront] = sr;
        qc[qfront] = sc;
        dist[0][sr][sc] = 0;

        while (qfront < qback) {
            int cm = qm[qfront];
            int cr = qr[qfront];
            int cc = qc[qfront];
            qfront++;

            if (cr == gr && cc == gc) {
                minDist = dist[cm][cr][cc];
                break;
            }

            for (int i = 0; i < 4; ++i) {
                int nm = (cm + 1) % 4;
                int nr = cr + dr[i];
                int nc = cc + dc[i];
                if (canMove(nr, nc, maze) && attack[nm][nr][nc] == false) {
                    if (dist[nm][nr][nc] == -1) {
                        dist[nm][nr][nc] = dist[cm][cr][cc] + 1;
                        qm[qback] = nm;
                        qr[qback] = nr;
                        qc[qback] = nc;
                        qback++;
                    }
                }
            }
        }

        if (minDist == -1) {
            out.printf("Case #%d: impossible\n", testNumber);
        } else {
            out.printf("Case #%d: %d\n", testNumber, minDist);
        }
    }
}

class InputReader {
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;

    public InputReader(InputStream stream) {
        this.stream = stream;
    }

    public int read() {
        // InputMismatchException -> UnknownError
        if (numChars == -1)
            throw new UnknownError();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new UnknownError();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        } else if (c == '+') {
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }

    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    public String next() {
        return readString();
    }

}

class ArrayUtils {

    public static void FillArray(int[][][] a, int val) {
        for (int[][] b : a) {
            FillArray(b, val);
        }
    }
    public static void FillArray(int[][] a, int val) {
        for (int[] b : a) {
            FillArray(b, val);
        }
    }
    public static void FillArray(int[] a, int val) {
        Arrays.fill(a, val);
    }

}


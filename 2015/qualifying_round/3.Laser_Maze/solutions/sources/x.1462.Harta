#include <bits/stdc++.h>
using namespace std;

#define MAXN 110
const int oo = (int)1e9;
int t, n, m, dist[MAXN][MAXN][4];
bool invalid[MAXN][MAXN][4];
char s[MAXN][MAXN];

int dx[] = {-1, 0, 1, 0};
int dy[] = { 0, 1, 0,-1};

struct pii {
	int x, y, dist;
	pii() {};
	pii(int _x, int _y, int _d) : x(_x), y(_y), dist(_d) {}
};

bool valid(int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}

bool is_turret(char c) {
	return c == '<' || c == '>' || c == '^' || c == 'v';
}

// ^/u >/r v/d </l 
int get_type(char c) {
	if (c == '^') return 0;
	else if (c == '>') return 1;
	else if (c == 'v') return 2;
	else if (c == '<') return 3;
	return -1;
}

bool can_pass(char c) {
	return !(c == '#' || is_turret(c));
}

int main() {
	scanf("%d", &t);
	int xx = 1;
	while (t--) {
		scanf("%d%d", &n, &m);
		for (int i = 0; i < n; i++) {
			scanf("%s", s[i]);
		}
		memset(invalid, 0, sizeof(invalid));
		vector<int> start, end;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (s[i][j] == 'S') start = {i, j};
				else if (s[i][j] == 'G') end = {i, j};
				else if (is_turret(s[i][j])) {
					for (int k = 0; k < 4; k++) {
						int k_type = (k + get_type(s[i][j])) % 4;
						int nextX = i + dx[k_type];
						int nextY = j + dy[k_type];
						while (valid(nextX, nextY) && can_pass(s[nextX][nextY])) {
							invalid[nextX][nextY][k] = 1; // at time k, (nextX, nextY) is invalid
							nextX += dx[k_type];
							nextY += dy[k_type];
						}
					}
				}
			}
		}
		queue<pii> q;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				for (int k = 0; k < 4; k++) {
					dist[i][j][k] = -1;
				}
			}
		}
		q.push(pii(start[0], start[1], 0));
		dist[start[0]][start[1]][0] = -1;
		while (!q.empty()) {
			pii front = q.front();
			q.pop();
			for (int k = 0; k < 4; k++) {
				int nextX = front.x + dx[k];
				int nextY = front.y + dy[k];
				int new_dist = front.dist + 1;
				if (valid(nextX, nextY) && dist[nextX][nextY][new_dist % 4] == -1 &&
					!invalid[nextX][nextY][new_dist % 4]) {
					dist[nextX][nextY][new_dist % 4] = new_dist;
					q.push(pii(nextX, nextY, new_dist));
				}
			}
		}
		printf("Case #%d: ", xx++);
		int ans = -1;
		for (int i = 0; i < 4; i++) {
			int temp = dist[end[0]][end[1]][i];
			if (temp == -1) continue;
			if (ans == -1 || ans > temp) {
				ans = temp;
			}
		}
		if (ans == -1) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}

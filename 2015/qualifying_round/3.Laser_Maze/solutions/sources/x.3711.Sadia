#include<bits/stdc++.h>
using namespace std;
bool vis[105][105][5];
int dr[]={-1,0,0,1};
int dc[]={0,-1,1,0};
int N,M;
char grid[105][105];
char ghew[]={'^','>','v','<'};
struct S{
    int up,dwn,l,r;
    void show(){
        printf("up:%d dwn:%d l:%d r:%d\n",up,dwn,l,r);
    }
};
S attack[105][105];
struct node{
    int r,c,age;
};
queue<node>Q;
bool lsr(char ch)
{
    return (ch=='>'||ch=='<'||ch=='v'||ch=='^');
}

char ort(char ch,int turn)
{
    int i;
    for(i=0; i<4; i++)
        if(ch==ghew[i])  break;
    i=(i+turn)%4;
    return ghew[i];
}

void build()
{
     int i,j,k;
     for(i=0; i<N; i++)
     {
        for(j=0; j<M; j++)
        {
            if(grid[i][j]=='#'||lsr(grid[i][j]))  continue;

            attack[i][j].up=-1;
            for(k=0; k<i; k++){
                if(grid[k][j]=='#')  break;
                if(lsr(grid[k][j]))
                    attack[i][j].up=k;
                    break;
            }

            attack[i][j].dwn=-1;
            for(k=i+1; k<N; k++){
                if(grid[k][j]=='#')  break;
                if(lsr(grid[k][j])){
                    attack[i][j].dwn=k;
                    break;
                }
            }

            attack[i][j].l=-1;
            for(k=0; k<j; k++){
                if(grid[i][k]=='#')  break;
                if(lsr(grid[i][k])){
                    attack[i][j].l=k;
                    break;
                }
            }

            attack[i][j].r=-1;
            for(k=j+1; k<M; k++){
                if(grid[i][k]=='#')  break;
                if(lsr(grid[i][k])){
                    attack[i][j].r=k;
                    break;
                }
            }
        }
    }
}

bool die(int i,int j,int turn)
{
    if(attack[i][j].up!=-1)
    {
        char ch=grid[attack[i][j].up][j];
        char now=ort(ch,turn);
        if(now=='v')  return true;
    }
    if(attack[i][j].dwn!=-1)
    {
        char ch=grid[attack[i][j].dwn][j];
        char now=ort(ch,turn);
        if(now=='^')  return true;
    }
    if(attack[i][j].l!=-1)
    {
        char ch=grid[i][attack[i][j].l];
        char now=ort(ch,turn);
        if(now=='>')  return true;
    }
    if(attack[i][j].r!=-1)
    {
        char ch=grid[i][attack[i][j].r];
        char now=ort(ch,turn);
        if(now=='<')  return true;
    }
    return false;
}
int BFS()
{
    node u,v,src;
    int i,j,rr,cc,tt;
    for(i=0; i<N; i++)
    {
        for(j=0; j<M; j++)
        {
            if(grid[i][j]=='S'){
                src.r=i;
                src.c=j;
                src.age=0;
                break;
            }
        }
    }

    while(!Q.empty())  Q.pop();
    Q.push(src);
    vis[src.r][src.c][0]=1;

    while(!Q.empty())
    {
       u=Q.front();
       Q.pop();
       tt=u.age+1;
       for(i=0; i<4; i++)
       {
           rr=u.r+dr[i];
           cc=u.c+dc[i];
           if(rr<0||rr>N-1||cc<0||cc>M-1)  continue;
           if(vis[rr][cc][tt%4])  continue;
           vis[rr][cc][tt%4]=1;
           if(!die(rr,cc,tt%4)){
               if(grid[rr][cc]=='G')  return tt;
               v.r=rr,v.c=cc,v.age=tt;
               Q.push(v);
               }
       }
    }

    return -1;
}
int main()
{
    int T,it,i,j,k;
    //freopen("laser_maze.txt","r",stdin);
   // freopen("laser_maze.out","w",stdout);
    scanf("%d",&T);
    for(it=1; it<=T; it++)
    {
        scanf("%d%d",&N,&M);
        for(i=0; i<N; i++)
        {
            scanf("%s",grid[i]);
        }

        build();

        for(i=0; i<N; i++)
        {
            for(j=0; j<M; j++){
                for(k=0; k<4; k++)
                    vis[i][j][k]=0;
            }
        }
        /*for(i=0; i<N; i++)
        {
            for(j=0; j<N; j++)  printf("i:%d j:%d\n",i,j),attack[i][j].show();
        }*/
        int Ans=BFS();
        if(Ans==-1) printf("Case #%d: impossible\n",it);
        else printf("Case #%d: %d\n",it,Ans);
    }
    return 0;
}

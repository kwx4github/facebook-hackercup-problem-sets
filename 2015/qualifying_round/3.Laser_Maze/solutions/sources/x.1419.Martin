#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int T, M, N, Sr, Sc, Gr, Gc;
char maze[5][100][100];
bool visited[5*100*100];

int mxy2i(int m, int r, int c) {
  return (m*10000 + r*100 + c);
}

bool isGoal(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  return (Gr == r && Gc == c);
}

char tile(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  return maze[m][r][c];
}

int left(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  m = (m + 1) % 4;
  c = c - 1;
  if (c < 0) return -1;
  return mxy2i(m, r, c);
}

int right(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  m = (m + 1) % 4;
  c = c + 1;
  if (c >= N) return -1;
  return mxy2i(m, r, c);
}

int up(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  m = (m + 1) % 4;
  r = r - 1;
  if (r < 0) return -1;
  return mxy2i(m, r, c);
}

int down(int pos) {
  int m = pos / 10000;
  int r = pos % 10000 / 100;
  int c = pos % 10000 % 100;
  m = (m + 1) % 4;
  r = r + 1;
  if (r >= M) return -1;
  return mxy2i(m, r, c);
}

int main() {
  cin >> T;
  for (int t = 1; t <= T; t++) {
    // read input
    cin >> M >> N;
    for (int m = 0; m < M; m++) {
      for (int n = 0; n < N; n++) {
        cin >> maze[4][m][n]; // 0th step
        // init
        if (maze[4][m][n] == 'S') { Sr = m; Sc = n; maze[4][m][n] = '.'; }
        if (maze[4][m][n] == 'G') { Gr = m; Gc = n; maze[4][m][n] = '.'; }
        maze[0][m][n] = maze[1][m][n] = maze[2][m][n] = maze[3][m][n] = maze[4][m][n];
      }
    }
    // fill mazes for different steps
    for (int m = 0; m < M; m++) {
      for (int n = 0; n < N; n++) {
        int s;
        switch (maze[4][m][n]) {
          case 'v': s = 0; break;
          case '>': s = 1; break;
          case '^': s = 2; break;
          case '<': s = 3; break;
          default: s = -1; break;
        }
        if (s >= 0) {
          maze[0][m][n] = maze[1][m][n] = maze[2][m][n] = maze[3][m][n] = '#';
          for (int i = m + 1; i <  M && maze[(0+s)%4][i][n] == '.'; i++) maze[(0+s)%4][i][n] = '#';
          for (int i = n - 1; i >= 0 && maze[(1+s)%4][m][i] == '.'; i--) maze[(1+s)%4][m][i] = '#';
          for (int i = m - 1; i >= 0 && maze[(2+s)%4][i][n] == '.'; i--) maze[(2+s)%4][i][n] = '#';
          for (int i = n + 1; i <  N && maze[(3+s)%4][m][i] == '.'; i++) maze[(3+s)%4][m][i] = '#';
        }
      }
    }
    /*
    // debug: print the mazes
    for (int s = 0; s < 5; s++) {
      cout << "Step " << s << "\n";
      for (int m = 0; m < M; m++) {
        for (int n = 0; n < N; n++) {
          cout << maze[s][m][n];
        }
        cout << "\n";
      }
      cout << "\n";
    }
    */
    memset(visited, 0, 5*100*100);
    bool impossible = true;
    int pos, step = 1;
    queue<pair<int,int> > q;  // <pos,step>
    q.push(make_pair(left (mxy2i(0, Sr, Sc)), step));
    q.push(make_pair(right(mxy2i(0, Sr, Sc)), step));
    q.push(make_pair(up   (mxy2i(0, Sr, Sc)), step));
    q.push(make_pair(down (mxy2i(0, Sr, Sc)), step));
    while(!q.empty()) {
      pos = q.front().first;
      step = q.front().second;
      q.pop();
      if (pos < 0) continue;
      if (visited[pos]) continue;
      visited[pos] = true;
      if (tile(pos) == '.') {
        if (isGoal(pos)) {
          impossible = false;
          break;
        }
        step++;
        q.push(make_pair(left (pos), step));
        q.push(make_pair(right(pos), step));
        q.push(make_pair(up   (pos), step));
        q.push(make_pair(down (pos), step));
      }
    }
    if (impossible) {
      cout << "Case #" << t << ": impossible\n";
    } else {
      cout << "Case #" << t << ": " << step << "\n";
    }
  }
  cout << flush;
  return 0;
}
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;

int M, N;
int gi, gj;

int m[100][100][4];
char maze[100][100];

struct Position {
  int i,j,k;
};

int vx[] = {0, 1, 0, -1};
int vy[] = {-1, 0, 1, 0};

void setup_mask(int i, int j, int dir) {
  for(int z = 0; z < 4; z++) {
    int tdir = (dir + z)%4;
    int ti = i+vy[tdir];
    int tj = j+vx[tdir];
    while(ti >= 0 && ti < M && tj >= 0 && tj < N) {
      //char c;
      //cout << maze[ti][tj] << endl;
      //cin >> c;
      if(maze[ti][tj] == '#' || maze[ti][tj] == '<' || maze[ti][tj] == '>' || maze[ti][tj] == '^' || maze[ti][tj] == 'v') {
        //cout << "broke" << endl;
        break;
      }
      //cout << "cont" << endl;
      m[ti][tj][z] = -1;
      ti += vy[tdir];
      tj += vx[tdir];
    }
  }
}

void print_maze() {
  for (int k = 0; k < 4; k++) {
    cout << endl << endl;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < N; j++) {
        cout << m[i][j][k] << " ";
      }
      cout << endl;
    }
  }
}

int main() {
  int T;
  cin >> T;

  for(int tt = 1; tt <= T; tt++) {
  
    cin >> M >> N;
    for (int i = 0; i < 100; i++)
      for (int j = 0; j < 100; j++)
        for (int k = 0; k < 4; k++)
          m[i][j][k] = 999999999;
    memset(maze, 0, sizeof(maze));
    
    for(int i = 0; i < M; i++)
      for(int j = 0; j < N; j++) {
        cin >> maze[i][j];
      }
    
    // create queue
    queue<Position> q;
    Position p;
    
    // setup masks!
    for(int i = 0; i < M; i++)
      for(int j = 0; j < N; j++) {
        if (maze[i][j] == '.') {
          // do nada
        }
        else if (maze[i][j] == 'G') {
          gi = i;
          gj = j;
        }
        else if (maze[i][j] == 'S') {
          p.i = i;
          p.j = j;
          p.k = 0;
          q.push(p);
          m[i][j][0] = 0;
        }
        else if (maze[i][j] == '#') {
          for(int k = 0; k < 4; k++)
            m[i][j][k] = -1;
        }
        else {
          for(int k = 0; k < 4; k++)
            m[i][j][k] = -1;
          if (maze[i][j] == '<')
            setup_mask(i,j,3);
          if (maze[i][j] == '^')
            setup_mask(i,j,0);
          if (maze[i][j] == '>')
            setup_mask(i,j,1);
          if (maze[i][j] == 'v')
            setup_mask(i,j,2);
        }
      }
    
    // write start again cause it couldve been overwritten by a mask
    m[p.i][p.j][0] = 0;
    
    while(!q.empty()) {

      Position temp = q.front();
      q.pop();
      
      int i = temp.i;
      int j = temp.j;
      int k = temp.k;
      
      int tk = (k+1) % 4;
      int time = m[i][j][k] + 1;

      for (int z = 0; z < 4; z++) {
        int ti = i+vy[z];
        int tj = j+vx[z];
        if (ti >= 0 && ti < M && tj >= 0 && tj < N && time < m[ti][tj][tk] ) {
          m[ti][tj][tk] = time;
          p.i = ti; p.j = tj; p.k = tk;
          q.push(p);
        }
      }
    }
    
    int minans = 999999999;
    for (int k = 0; k < 4; k++) {
      if (m[gi][gj][k] != -1)
        minans = min(minans, m[gi][gj][k]);
    }
    
    cout << "Case #" << tt << ": ";
    if (minans != 999999999)
      cout << minans;
    else
      cout << "impossible";
    
    cout << endl;

  }

  return 0;
}

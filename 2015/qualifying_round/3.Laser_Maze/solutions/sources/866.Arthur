#include <stdio.h>
#include <queue>
#include <map>
#include <string.h>
using namespace std;

char maze[112][112];
int laser[4][112][112];
bool been[4][112][112];
char s[4] = {'^', '>', 'v', '<'};
map<char,int> hash;
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
int n, m;

struct trio{
	int a, b, c;
	trio(){}
	trio(int x, int y, int z) { a = x, b = y, c = z; }
};

bool can(int a, int b, int c)
{
	if(b > n || b < 1 || c > m || c < 1)
		return false;
	if(hash[maze[b][c]] >= -1)
		return false;
	if(laser[0][b][c] >= 0 && (laser[0][b][c] + a) % 4 == 2)
		return false;
	if(laser[1][b][c] >= 0 && (laser[1][b][c] + a) % 4 == 3)
		return false;
	if(laser[2][b][c] >= 0 && (laser[2][b][c] + a) % 4 == 0)
		return false;
	if(laser[3][b][c] >= 0 && (laser[3][b][c] + a) % 4 == 1)
		return false;
	return true;
}

int
main(void)
{
	hash['^'] = 0, hash['>'] = 1, hash['v'] = 2, hash['<'] = 3, hash['#'] = -1, hash['.'] = -2, hash['G'] = -2, hash['S'] = -2;
	int T;
	scanf("%d", &T);
	for(int t = 1; t <= T; t++)
	{
		scanf("%d %d", &n, &m);
		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= m; j++)
				scanf(" %c", &maze[i][j]);

		memset(laser[0], 0xff, sizeof(laser[0]));
		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= m; j++)
				if(hash[maze[i][j]] >= 0)
					laser[0][i][j] = hash[maze[i][j]];
				else if(hash[maze[i][j]] == -1)
					laser[0][i][j] = -1;
				else
					laser[0][i][j] = laser[0][i-1][j];


		memset(laser[1], 0xff, sizeof(laser[1]));
		for(int i = 1; i <= n; i++)
			for(int j = m; j >= 1; j--)
				if(hash[maze[i][j]] >= 0)
					laser[1][i][j] = hash[maze[i][j]];
				else if(hash[maze[i][j]] == -1)
					laser[1][i][j] = -1;
				else
					laser[1][i][j] = laser[1][i][j+1];


		memset(laser[2], 0xff, sizeof(laser[2]));
		for(int i = n; i >= 1; i--)
			for(int j = m; j >= 1; j--)
				if(hash[maze[i][j]] >= 0)
					laser[2][i][j] = hash[maze[i][j]];
				else if(hash[maze[i][j]] == -1)
					laser[2][i][j] = -1;
				else
					laser[2][i][j] = laser[2][i+1][j];



		memset(laser[3], 0xff, sizeof(laser[3]));
		for(int i = n; i >= 1; i--)
			for(int j = 1; j <= m; j++)
				if(hash[maze[i][j]] >= 0)
					laser[3][i][j] = hash[maze[i][j]];
				else if(hash[maze[i][j]] == -1)
					laser[3][i][j] = -1;
				else
					laser[3][i][j] = laser[3][i][j - 1];
		
		
		queue< trio > q;
		trio cur;

		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= m; j++)
				if(maze[i][j] == 'S')
					q.push(trio(0, i, j));

		memset(been, 0, sizeof(been));
		int ans = -1;
		while(!q.empty())
		{
			cur = q.front();
			q.pop();
			
		//	printf("%d %d\n", cur.b, cur.c);
			if(maze[cur.b][cur.c] == 'G')
			{
				ans = cur.a;
				break;
			}
			
			for(int i = 0; i < 4; i++)
				if(!been[(cur.a + 1) % 4][cur.b+dx[i] ][cur.c + dy[i]] && can((cur.a + 1) % 4, cur.b+dx[i], cur.c + dy[i]) )
				{
					q.push(trio((cur.a + 1), cur.b+dx[i], cur.c + dy[i]));
					been[(cur.a + 1) % 4][cur.b+dx[i] ][cur.c + dy[i]] = true;
				}
		}
		
		if(ans >= 0)
			printf("Case #%d: %d\n", t, ans);
		else
			printf("Case #%d: impossible\n", t);		

		
	}
}

























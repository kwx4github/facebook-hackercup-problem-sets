#include <stdio.h>
#include <conio.h>
#include <string.h>

#include <vector>
#include <algorithm>
#include <queue>
#include <iostream>
#include <fstream>

using namespace std;

struct Q
{
  int i, j, st;
  Q()
  {
    i = j = st = 0;
  }
  Q(int ci, int cj, int cst)
  {
    i = ci; j = cj; st = cst;
  }
};

Q que[1000000];
int pq, epq;

int ei, ej;
int m, n;
char f[102][102];
char fm[4][102][102];
int nstep[4][102][102];

bool add(Q q, int di, int dj)
{
  int ni = q.i + di;
  int nj = q.j + dj;
  int las = (q.st - 1) & 0x03;
  if (fm[las][ni][nj] != '#') {
    if (ni == ei && nj == ej) return true;
    if (nstep[las][ni][nj] == -1 || nstep[las][ni][nj] > q.st) {
      nstep[las][ni][nj] = q.st;
      que[epq] = Q(ni, nj, q.st);
      epq++;
      }
    }
  return false;
}
int next()
{
  Q q = que[pq];
  pq++;
  q.st++;
  if (add(q,-1,0)) return q.st;
  if (add(q,1,0)) return q.st;
  if (add(q,0,-1)) return q.st;
  if (add(q,0,1)) return q.st;
  return 0;
}

void setf(int nf, char *s) // "^>v<"
{
  for (int i = 0; i < m; i++)
    for (int j = 0; j < n; j++)
      fm[nf][i][j] = f[i][j];
  for (int i = 1; i < m - 1; i++)
    for (int j = 1; j < n - 1; j++) {
      char *p = strchr(s,f[i][j]);
      if (p) {
        int di = 0, dj = 0;
        int np = p - s;
        switch (np) {
          case 0: // ^
            dj = 1;
            break;
          case 1: // >
            di = 1;
            break;
          case 2: // v
            dj = -1;
            break;
          case 3: // <
            di = -1;
            break;
          }
        fm[nf][i][j] = '#';
        int si = i + di;
        int sj = j + dj;
        while (f[si][sj] == '.') {
          fm[nf][si][sj] = '#';
          si += di;
          sj += dj;
          }
        }
      }
/*
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++)
      cout << fm[nf][i][j];
    cout << endl;
    }
  cout << endl;
*/  
}

int main(int argc, char* argv[])
{
  int t;
  ifstream from("input.txt");
  ofstream to("output.txt");
  from >> t;
  for (int nt = 0; nt < t; nt++) {
    from >> m >> n;
    for (int i = 0; i < m + 2; i++) {
      f[i][0] = '#';
      f[i][n+1] = '#';
      }
    for (int j = 0; j < n + 2; j++) {
      f[0][j] = '#';
      f[m+1][j] = '#';
      }
    int si = 0, sj = 0;
    for (int i = 1; i <= m; i++)
      for (int j = 1; j <= n; j++) {
        from >> f[i][j];
        if (f[i][j] == 'S') { si = i; sj = j; f[i][j] = '.'; }
        if (f[i][j] == 'G') { ei = i; ej = j; f[i][j] = '.'; }
        }
    m += 2;
    n += 2;
/*
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++)
        cout << f[i][j];
      cout << endl;
      }
    cout << endl;
*/
    setf(0,"^>v<");
    setf(1,"<^>v");
    setf(2,"v<^>");
    setf(3,">v<^");
//    cout << "Case #" << nt+1 << ": " << si << ' ' << sj << ' ' << ei << ' ' << ej << ' ' << endl;

    memset(nstep,-1,sizeof(nstep));
    nstep[3][si][sj] = 0;

    que[0] = Q(si,sj,0);
    pq = 0; epq = 1;
    int res = 0;
    while (pq < epq) {
      res = next();
      if (res) break;
      }
    to << "Case #" << nt+1 << ": ";
    if (res) to << res << endl;
    else to << "impossible" << endl;
    }
  from.close();
  to.close();
  return 0;
}
//---------------------------------------------------------------------------


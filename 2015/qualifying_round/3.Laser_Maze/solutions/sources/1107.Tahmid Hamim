#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>
#include<algorithm>
#include<map>
#include<string>
#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<cmath>
#include<ctype.h>
#include<deque>
#include<list>
#include<set>
#define inf (1<<30)
#define pi acos(-1.0)
#define LL long long int
#define LU unsigned long long int
#define eps 1e-9
#define mod 100000007
#define mem(a) memset(a,0,sizeof(a))
#define neg(a) memset(a,-1,sizeof(a))
#define pub(a) push_back(a)
#define pob(a) pop_back(a)
#define puf(a) push_front(a)
#define pof(a) pop_front(a)
#define mkp(a,b) make_pair(a,b)

using namespace std;
int n,m,i,j,k,l,a[10][105][105],vis[10][105][105],p[1000009],ans,cn,t,x,y,z,mx,my,mz,sr,sc,dr,dc;
char grid[105][105];
int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("output.txt","w",stdout);
    scanf("%d",&t);
    for(i=1;i<=t;i++)
    {
        mem(a);
        scanf("%d %d",&m,&n);
        for(j=0;j<m;j++)
        {
            scanf("%s",grid[j]);
        }
        for(j=0;j<m;j++)
        {
            for(k=0;k<n;k++)
            {
                if(grid[j][k]=='<')
                {
                    a[0][j][k]=a[1][j][k]=a[2][j][k]=a[3][j][k]=1;
                    for(l=k-1;l>=0;l--)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[0][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j-1;l>=0;l--)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[1][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k+1;l<n;l++)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[2][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j+1;l<m;l++)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[3][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else if(grid[j][k]=='^')
                {
                    a[0][j][k]=a[1][j][k]=a[2][j][k]=a[3][j][k]=1;
                    for(l=j-1;l>=0;l--)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[0][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k+1;l<n;l++)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[1][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j+1;l<m;l++)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[2][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k-1;l>=0;l--)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[3][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else if(grid[j][k]=='>')
                {
                    a[0][j][k]=a[1][j][k]=a[2][j][k]=a[3][j][k]=1;
                    for(l=k+1;l<n;l++)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[0][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j+1;l<m;l++)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[1][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k-1;l>=0;l--)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[2][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j-1;l>=0;l--)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[3][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else if(grid[j][k]=='v')
                {
                    a[0][j][k]=a[1][j][k]=a[2][j][k]=a[3][j][k]=1;
                    for(l=j+1;l<m;l++)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[0][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k-1;l>=0;l--)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[1][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=j-1;l>=0;l--)
                    {
                        if((grid[l][k]=='S')||(grid[l][k]=='G')||(grid[l][k]=='.'))
                        {
                            a[2][l][k]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                    for(l=k+1;l<n;l++)
                    {
                        if((grid[j][l]=='S')||(grid[j][l]=='G')||(grid[j][l]=='.'))
                        {
                            a[3][j][l]=1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else if(grid[j][k]=='#')
                {
                    a[0][j][k]=a[1][j][k]=a[2][j][k]=a[3][j][k]=1;
                }
                else if(grid[j][k]=='S')
                {
                    sr=j;
                    sc=k;
                }
                else if(grid[j][k]=='G')
                {
                    dr=j;
                    dc=k;
                }
            }
        }
        for(j=0;j<10;j++)
        {
            for(k=0;k<105;k++)
            {
                for(l=0;l<105;l++)
                {
                    vis[j][k][l]=inf;
                }
            }
        }
        queue<pair<int,pair<int,int> > >q;
        pair<int,pair<int,int> >pr=make_pair(0,make_pair(sr,sc)),qr;
        q.push(pr);
        vis[0][sr][sc]=0;
        while(q.empty()==0)
        {
            pr=q.front();
            x=pr.first;
            y=pr.second.first;
            z=pr.second.second;
            q.pop();
            if((z-1>=0)&&(a[(x+1)%4][y][z-1]==0)&&(vis[(x+1)%4][y][z-1]==inf))
            {
                vis[(x+1)%4][y][z-1]=vis[x][y][z]+1;
                qr=make_pair((x+1)%4,make_pair(y,z-1));
                q.push(qr);
            }
            if((y-1>=0)&&(a[(x+1)%4][y-1][z]==0)&&(vis[(x+1)%4][y-1][z]==inf))
            {
                vis[(x+1)%4][y-1][z]=vis[x][y][z]+1;
                qr=make_pair((x+1)%4,make_pair(y-1,z));
                q.push(qr);
            }
            if((z+1<n)&&(a[(x+1)%4][y][z+1]==0)&&(vis[(x+1)%4][y][z+1]==inf))
            {
                vis[(x+1)%4][y][z+1]=vis[x][y][z]+1;
                qr=make_pair((x+1)%4,make_pair(y,z+1));
                q.push(qr);
            }
            if((y+1<m)&&(a[(x+1)%4][y+1][z]==0)&&(vis[(x+1)%4][y+1][z]==inf))
            {
                vis[(x+1)%4][y+1][z]=vis[x][y][z]+1;
                qr=make_pair((x+1)%4,make_pair(y+1,z));
                q.push(qr);
            }
        }
        ans=inf;
        for(j=0;j<4;j++)
        {
            ans=min(ans,vis[j][dr][dc]);
        }
        if(ans==inf)
        {
            printf("Case #%d: impossible\n",i);
        }
        else
        {
            printf("Case #%d: %d\n",i,ans);
        }
    }
    return 0;
}

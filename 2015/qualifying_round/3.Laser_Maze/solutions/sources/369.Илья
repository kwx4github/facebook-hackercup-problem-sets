#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
using namespace std;

struct State
{
	int x, y, mod;
	State() : x(0), y(0), mod(0) {}
	State(int _x, int _y, int _mod) : x(_x), y(_y), mod(_mod) {}
};

const int dx[] = {0, 1, 0, -1};
const int dy[] = {1, 0, -1, 0};

const int INF = (int)1e9;
const int N = 150;

int n, m;
vector<int> mx[N];
int dist[N][N][4];

bool in_field(int x, int y)
{
	return x >= 0 && x < n && y >= 0 && y < m;
}

bool is_good(State s)
{
	for (int dir = 0; dir < 4; dir++)
	{
		for (int len = 1; len < N; len++)
		{
			int nx = s.x + dx[dir] * len;
			int ny = s.y + dy[dir] * len;
			if (!in_field(nx, ny))
				break;
			if (mx[nx][ny] == -1)
				break;
			if (mx[nx][ny] == -2)
				continue;
			if ((mx[nx][ny] + s.mod) % 4 == (dir + 2) % 4)
				return false;
			else
				break;
		}
	}
	return true;
}

string solve()
{
	cin >> n >> m;
	
	int sx = -1, sy = -1;
	int fx = -1, fy = -1;

	for (int i = 0; i < n; i++)
	{
		string str;
		cin >> str;
		mx[i].resize(m);

		for (int j = 0; j < m; j++)
		{
			if (str[j] == 'S')
			{
				sx = i;
				sy = j;
			}
			if (str[j] == 'G')
			{
				fx = i;
				fy = j;
			}

			if (str[j] == '>')
				mx[i][j] = 0;
			else if (str[j] == 'v')
				mx[i][j] = 1;
			else if (str[j] == '<')
				mx[i][j] = 2;
			else if (str[j] == '^')
				mx[i][j] = 3;
			else if (str[j] == '#')
				mx[i][j] = -1;
			else
				mx[i][j] = -2;
		}
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			for (int t = 0; t < 4; t++)
				dist[i][j][t] = INF;

	dist[sx][sy][0] = 0;
	queue<State> Q;
	Q.push(State(sx, sy, 0));

	while (!Q.empty())
	{
		State s = Q.front();
		Q.pop();
		int new_dist = dist[s.x][s.y][s.mod] + 1;

		for (int dir = 0; dir < 4; dir++)
		{
			int nx = s.x + dx[dir];
			int ny = s.y + dy[dir];
			if (!in_field(nx, ny) || mx[nx][ny] != -2)
				continue;
			State ns = State(nx, ny, (s.mod + 1) % 4);
			if (is_good(ns) && dist[ns.x][ns.y][ns.mod] > new_dist)
			{
				Q.push(ns);
				dist[ns.x][ns.y][ns.mod] = new_dist;
			}
		}
	}

	int res = INF;
	for (int i = 0; i < 4; i++)
		res = min(dist[fx][fy][i], res);

	if (res == INF)
		return "impossible";
	else
		return to_string(res);
}

int main()
{
	freopen("input2.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
		printf("Case #%d: %s\n", i + 1, solve().c_str());

	return 0;
}

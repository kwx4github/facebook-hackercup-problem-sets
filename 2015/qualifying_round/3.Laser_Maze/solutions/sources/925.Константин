#include <bits/stdc++.h>

using namespace std;

#define sz(x) ((int) (x).size())

typedef long long ll;
typedef long double ld;

const int INF = 1000001000;
const ll INFL = 2000000000000001000;
int solve();


int main()
{
	srand(2317);
	cout.precision(10);
	cout.setf(ios::fixed);
	#ifdef LOCAL
	freopen("c.in", "r", stdin);
	#else
	#endif
	int tn = 1;
	cin >> tn;
	for (int i = 0; i < tn; ++i)
		solve();
	#ifdef LOCAL
	cerr << "Time: " << double(clock()) / CLOCKS_PER_SEC << '\n';
	#endif
}

string a[1001];
bool bad[4][1001][1001];
int dist[4][1001][1001];
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
map <char, int> conv;

int test = 1;

int solve()
{
	memset(bad, 0, sizeof(bad));
	conv['^'] = 0;
	conv['>'] = 1;
	conv['v'] = 2;
	conv['<'] = 3;
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
		cin >> a[i];
	int sx = -1, sy = -1, tx = -1, ty = -1;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (a[i][j] == 'S')
				sx = i, sy = j, a[i][j] = '.';
			if (a[i][j] == 'G')
				tx = i, ty = j, a[i][j] = '.';
		}
	}
	
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (a[i][j] == '.' || a[i][j] == '#')
				continue;
			for (int q = 0; q < 4; ++q)
			{
				int dir = (q + conv[a[i][j]]) % 4;
				int cx = i + dx[dir], cy = j + dy[dir];
				while (true)
				{
					if (cx < 0 || cx >= n || cy < 0 || cy >= m)
						break;
					if (a[cx][cy] != '.')
						break;
					bad[q][cx][cy] = true;
					//~ cerr << "fuck " << q << ' ' << cx << ' ' << cy << '\n';
					cx += dx[dir];
					cy += dy[dir];
				}
			}
		}
	}
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < n; ++j)
			for (int k = 0; k < m; ++k)
				dist[i][j][k] = INF;
	dist[0][sx][sy] = 0;
	queue<tuple<int, int, int>> o;
	o.push(make_tuple(0, sx, sy));
	while (!o.empty())
	{
		int x, y, q;
		tie(q, x, y) = o.front();
		//~ cerr << q << ' ' << x << ' ' << y << '\n';
		o.pop();
		if (x == tx && y == ty)
		{
			cout << "Case #" << test++ << ": " << dist[q][x][y] << '\n';
			return 0;
		}
		for (int dir = 0; dir < 4; ++dir)
		{
			int cx = x + dx[dir];
			int cy = y + dy[dir];
			int cq = (q + 1) % 4;
			if (cx < 0 || cx >= n || cy < 0 || cy >= m)
				continue;
			if (a[cx][cy] != '.')
				continue;
			if (bad[cq][cx][cy])
				continue;
			if (dist[cq][cx][cy] != INF)
				continue;
			dist[cq][cx][cy] = dist[q][x][y] + 1;
			o.push(make_tuple(cq, cx, cy));
		}
	}
	cout << "Case #" << test++ << ": " << "impossible" << '\n';
	return 0;
}

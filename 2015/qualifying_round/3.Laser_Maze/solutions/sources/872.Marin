import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;


public class LazerMaze {

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new FileReader(new File("laser_maze.txt")));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("laser_maze_out.txt")));
		int T = Integer.parseInt(br.readLine());
		for(int caseNum = 1; caseNum<=T; caseNum++){
			String[] line = br.readLine().split(" ");
			int M = Integer.parseInt(line[0]);
			int N = Integer.parseInt(line[1]);
			char[][] maze = new char[M][N];
			for(int i=0; i<M; i++) maze[i] = br.readLine().toCharArray();
			Point start = null;
			Point finish = null;
			LinkedList<Lazer> lazers = new LinkedList<Lazer>();
			for(int i=0; i<M; i++){
				for(int j=0; j<N; j++){
					if(maze[i][j]=='S') start = new Point(i,j);
					if(maze[i][j]=='G') finish = new Point(i,j);
					if(maze[i][j]=='^') lazers.add(new Lazer(i,j,'>'));
					if(maze[i][j]=='>') lazers.add(new Lazer(i,j,'v'));
					if(maze[i][j]=='v') lazers.add(new Lazer(i,j,'<'));
					if(maze[i][j]=='<') lazers.add(new Lazer(i,j,'^'));
				}
			}
			HashSet<Point> level = new HashSet<Point>();
			level.add(start);
			int steps = 0;
			boolean reached = false;
			while(!level.isEmpty() && !reached){
				HashSet<Point> frontier = new HashSet<Point>();
				for(Point p:level){
						if(p.m>0){
							if(charCheck(maze[p.m-1][p.n]))frontier.add(new Point(p.m-1,p.n));
						}
						if(p.m<M-1){
							if(charCheck(maze[p.m+1][p.n]))frontier.add(new Point(p.m+1, p.n));
						}
						if(p.n>0){
							if(charCheck(maze[p.m][p.n-1]))frontier.add(new Point(p.m, p.n-1));
						}
						if(p.n<N-1){
							if(charCheck(maze[p.m][p.n+1]))frontier.add(new Point(p.m, p.n+1));
						}
					}
				HashSet<Point> forbidden = new HashSet<Point>();
				for(Lazer lazer : lazers){
					if(lazer.orientation=='^'){
						for(int i=lazer.m-1; i>=0; i--){
							char c = maze[i][lazer.n];
							if(c=='.' ||c=='S'||c=='G'){
								forbidden.add(new Point(i, lazer.n));
							}else{
								break;
							}
						}
						lazer.orientation = '>';
					}
					else if(lazer.orientation=='v'){
						for(int i=lazer.m+1; i<M; i++){
							char c = maze[i][lazer.n];
							if(c=='.' ||c=='S'||c=='G'){
								forbidden.add(new Point(i, lazer.n));
							} else{
								break;
							}
						}
						lazer.orientation = '<';
					}
					else if(lazer.orientation=='>'){
						for(int i=lazer.n+1; i<N; i++){
							char c = maze[lazer.m][i];
							if(c=='.' ||c=='S'||c=='G'){
								forbidden.add(new Point(lazer.m, i));
							}else{
								break;
							}
						}
						lazer.orientation = 'v';
					}
					else if(lazer.orientation=='<'){
						for(int i=lazer.n-1; i>=0; i--){
							char c = maze[lazer.m][i];
							if(c=='.' ||c=='S'||c=='G'){
								forbidden.add(new Point(lazer.m, i));
							}else{
								break;
							}
						}
						lazer.orientation = '^';
					}
				}
				frontier.removeAll(forbidden);
				level = frontier;
				steps++;
				if(level.contains(finish)){
					reached = true;
					bw.write("Case #"+caseNum+": "+steps+"\n");
				}
			}
			if(!reached) bw.write("Case #"+caseNum+": "+"impossible"+"\n");
		}
		br.close();
		bw.flush();
		bw.close();
	}
	
	public static boolean charCheck(char c){
		return (c=='S' || c=='G' || c=='.');
	}

	static class Lazer{
		int m;
		int n;
		char orientation;
		public Lazer(int m, int n, char orientation){
			this.m = m;
			this.n = n;
			this.orientation = orientation;
		}
		
	}
	
	static class Point{
		
		int m;
		int n;
		
		public Point(int m, int n){
			this.m = m;
			this.n = n;
		}
		
		@Override
		public boolean equals(Object o){
			Point po = (Point) o;
			return m==po.m && n==po.n;
		}
		
		@Override
		public int hashCode() {
			return m*101 + n;
		};
		
		@Override
		public String toString(){
			return "("+m+","+n+")";
		}
		
	}
	
}

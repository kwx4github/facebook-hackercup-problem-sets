#include <bits/stdc++.h>
using namespace std;

#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define it(i,v) __typeof(v.begin()) i;
#define set(a,val) memset(a,val,sizeof(a))
#define rep(i,a,b) for(i = (a); i < (b) ; i++)
#define rev(i,a,b) for(i = (a); i >= (b) ; i--)
#define max(a,b) (a) > (b) ? (a) : (b)
#define min(a,b) (a) < (b) ? (a) : (b)
#define foi(a) printf("%d",a)
#define fod(a) printf("%lf",a)
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef unsigned long long ll;
typedef vector<pair<int,int> > VPI;
bool visited[105][105][4];
char state[105][105][4];
int ans,fx,fy,n,m;
inline int inp()
{
    char c=getchar();
    int n=0;
    while(c<'0'||c>'9') c=getchar();
    while(c>='0'&& c<='9') n=(n<<3)+(n<<1)+c-'0',c=getchar();
    return n;
}
void f(int steps,int i,int j)
{
	if(i==fx && j==fy)
	{
		if(steps<ans)
			ans=steps;
		return;
	}
	else if(steps>ans)
		return;
	else
	{
		int temp=steps%4;
		if(visited[i][j][temp]==true)
			return;
		visited[i][j][temp]=true;
		if(i+1<n && state[i+1][j][(temp+1)%4]=='S')
			f(steps+1,i+1,j);
		if(i-1>=0 && state[i-1][j][(temp+1)%4]=='S')
			f(steps+1,i-1,j);
		if(j+1<m && state[i][j+1][(temp+1)%4]=='S')
			f(steps+1,i,j+1);
		if(j-1>=0 && state[i][j-1][(temp+1)%4]=='S')
			f(steps+1,i,j-1);
		visited[i][j][temp]=false;
		return;
	}
}
bool isSafe(char ch)
{
	if(ch=='v' || ch=='>' || ch=='<' || ch=='^')
		return false;
	return true;
}
int main()
{
	VPI bombs;
	int t,l,sx,sy,temp,temp2,cases=1,val,i,j,depth,k;
	cin>>t;
	while(t--)
	{
		bombs.resize(0);
		ans=1e9+1;
		n=inp();
		m=inp();
		string s[n];
		set(state,'S');
		set(visited,false);
		rep(i,0,n){
			cin>>s[i];
			rep(j,0,m)
			{
				if(s[i][j]=='#')
					state[i][j][0]=state[i][j][1]=state[i][j][2]=state[i][j][3]='U';
				if(!isSafe(s[i][j])){
					state[i][j][0]=state[i][j][1]=state[i][j][2]=state[i][j][3]='U';
					bombs.pb(mp(i,j));
				}
				else if(s[i][j]=='S')
				{
					sx=i;
					sy=j;
				}
				else if(s[i][j]=='G')
				{
					fx=i;
					fy=j;
				}
			}
		}
		rep(i,0,bombs.size())
		{
			int x=bombs[i].first,y=bombs[i].second;
			switch(s[bombs[i].first][y])
			{
				case '^':val=0; break;
				case '>':val=1; break;
				case 'v':val=2; break;
				case '<':val=3; break;
			}
			rep(j,0,4)
			{
				temp=(val+j)%4;
				if(temp==0)
				{
					rev(k,x-1,0){
					  if(!isSafe(s[k][y]) || s[k][y]=='#')
					  	break;
					  state[k][y][j]='U';
					}
				}
				else if(temp==1)
				{
					rep(k,y+1,m){
					  if(!isSafe(s[x][k]) || s[x][k]=='#')
					  	break;
					  state[x][k][j]='U';
					}
				}
				else if(temp==2)
				{
					rep(k,x+1,n){
					  if(!isSafe(s[k][y]) || s[k][y]=='#')
					  	break;
					  state[k][y][j]='U';
					}
				}
				else
				{
					rev(k,y-1,0){
					  if(!isSafe(s[x][k]) || s[x][k]=='#')
					  	break;
					  state[x][k][j]='U';
					}
				}
			}
		}
		queue<pair<pair<int,int>,int> > q;
		q.push(mp(mp(sx,sy),0));
		while(!q.empty())
		{
			pair<pair<int,int>,int >p=q.front();
			i=(p.first).first;
			j=(p.first).second;
			depth=p.second;
			q.pop();
			if(i==fx && j==fy)
			{
				ans=depth;
				break;
			}
			int tmp=depth%4;
			if(i+1<n && state[i+1][j][(tmp+1)%4]=='S' && visited[i+1][j][(tmp+1)%4]==false)
			{
				visited[i+1][j][(tmp+1)%4]=true;
				q.push(mp(mp(i+1,j),depth+1));
			}
			if(i-1>=0 && state[i-1][j][(tmp+1)%4]=='S' && visited[i-1][j][(tmp+1)%4]==false)
			{
				visited[i-1][j][(tmp+1)%4]=true;
				q.push(mp(mp(i-1,j),depth+1));
			}
			if(j+1<m && state[i][j+1][(tmp+1)%4]=='S'&& visited[i][j+1][(tmp+1)%4]==false)
			{
				visited[i][j+1][(tmp+1)%4]=true;
				q.push(mp(mp(i,j+1),depth+1));
			}
			if(j-1>=0 && state[i][j-1][(tmp+1)%4]=='S'&& visited[i][j-1][(tmp+1)%4]==false)
			{
				visited[i][j-1][(tmp+1)%4]=true;
				q.push(mp(mp(i,j-1),depth+1));
			}
		}
		if(ans==1e9+1)
			printf("Case #%d: impossible\n",cases);
		else
			printf("Case #%d: %d\n",cases,ans);
		cases++;
	}
	return 0;
}
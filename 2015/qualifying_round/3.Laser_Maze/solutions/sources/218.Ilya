#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <complex>
#include <cstdio>
#include <vector>
#include <cctype>
#include <string>
#include <ctime>
#include <cmath>
#include <set>
#include <map>

typedef long double LD;
typedef long long LL;

using namespace std;

#define sz(A) (int)(A).size()
#define mp make_pair
#define pb push_back

const int N = 105;

int finish_x, finish_y, dist[N][N][4], qx[N * N * 4], qy[N * N * 4], qst[N * N * 4], l, r, n, m;
char maze[N][N];
bool was[N][N][4];

void add(int x, int y, int st) {
	qx[r] = x;
	qy[r] = y;
	qst[r] = st;
	was[x][y][st] = true;
	r++;
}

bool validx(int x) {
	return (0 <= x && x < m);
}

bool validy(int y) {
	return (0 <= y && y < n);
}

void go(int x, int y, int dx, int dy, int st) {
	bool start = true;
	while (validx(x) && validy(y) && (start || maze[x][y] == '.' || maze[x][y] == 'G' || maze[x][y] == 'S')) {
		was[x][y][st] = true;
		start = false;
		x += dx;
		y += dy;
	}
}

int main() {
	int t;
	cin >> t;

	for (int i = 0; i < t; i++) {
		memset(was, false, sizeof(was));
		memset(dist, 0, sizeof(dist));
		l = 0, r = 0;
		
		cin >> m >> n;
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < n; k++) {
				cin >> maze[j][k];
			}
	    }
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < n; k++) {
				switch (maze[j][k]) {
					case 'S':
						add(j, k, 0);
					break;

					case 'G':
						finish_x = j, finish_y = k;
					break;

					case '#':
						for (int st = 0; st < 4; st++)
							was[j][k][st] = true;
					break;

					case '>':
						go(j, k, 0, 1, 0);
						go(j, k, 1, 0, 1);
						go(j, k, 0,-1, 2);
						go(j, k,-1, 0, 3);
					break;

					case 'v':						
						go(j, k, 1, 0, 0);
						go(j, k, 0,-1, 1);
						go(j, k,-1, 0, 2);
						go(j, k, 0, 1, 3);						
					break;

					case '<':
						go(j, k, 0,-1, 0);
						go(j, k,-1, 0, 1);
						go(j, k, 0, 1, 2);												
						go(j, k, 1, 0, 3);
					break;	

					case '^':
						go(j, k,-1, 0, 0);
						go(j, k, 0, 1, 1);												
						go(j, k, 1, 0, 2);						
						go(j, k, 0,-1, 3);
					break;

					case '.':
					break;
				}
			}
		}

		while (l < r) {
			int x = qx[l], y = qy[l], st = qst[l];
			l++;
			for (int dx = -1; dx <= 1; dx++) {
				for (int dy = -1; dy <= 1; dy++) {
					if (dx * dy == 0 && dx + dy) {
						if (validx(x + dx) && validy(y + dy)) {
							if (!was[x + dx][y + dy][(st + 1) % 4]) {
								dist[x + dx][y + dy][(st + 1) % 4] = dist[x][y][st] + 1;								
								add(x + dx, y + dy, (st + 1) % 4);
							}
						}
					}
				}
			} 	
		}
		int res = int(1e9);
		for (int st = 0; st < 4; st++) {
			if (dist[finish_x][finish_y][st] > 0) {	
				res = min(res, dist[finish_x][finish_y][st]);
			}
		}
		if (res < int(1e9)) {
			printf("Case #%d: %d\n", i + 1, res);
		}
		else {
			printf("Case #%d: impossible\n", i + 1);
		}
	}

	return 0;
}

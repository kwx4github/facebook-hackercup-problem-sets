#include "bits/stdc++.h"
using namespace std;

#define DEBUG 0

int Y, X, nt;
char g[100][101];
int dy[4] = {-1, 0, 1, 0}; //up right down left
int dx[4] = {0, 1, 0, -1};

struct turr {
  int y, x, d;
} t[100 * 100];

bool vis[100][100][4];

bool val(int y, int x, int tm) {
  for(int i = 0; i < nt; i++) {
    int d = (t[i].d + tm) % 4;
    int ny = t[i].y + dy[d];
    int nx = t[i].x + dx[d];
    while(ny >= 0 && ny < Y && nx >= 0 && nx < X && g[ny][nx] == '.') {
      if(ny == y && nx == x)
	return false;
      ny += dy[d];
      nx += dx[d];
    }
  }
  return true;
}

int main() {
  int tc, cn, y, x, sy, sx, gy, gx, tm, ans;
  scanf("%d", &tc);
  for(cn = 1; cn <= tc; cn++) {
    scanf("%d%d", &Y, &X);
    nt = 0;
    for(y = 0; y < Y; y++) {
      scanf("%s", g[y]);
      for(x = 0; x < X; x++)
	if(g[y][x] == 'S')
	  sy = y, sx = x, g[y][x] = '.';
	else if(g[y][x] == 'G')
	  gy = y, gx = x, g[y][x] = '.';
	else if(g[y][x] == '^')
	  t[nt].y = y, t[nt].x = x, t[nt].d = 0, nt++;
	else if(g[y][x] == '>')
	  t[nt].y = y, t[nt].x = x, t[nt].d = 1, nt++;
	else if(g[y][x] == 'v')
	  t[nt].y = y, t[nt].x = x, t[nt].d = 2, nt++;
	else if(g[y][x] == '<')
	  t[nt].y = y, t[nt].x = x, t[nt].d = 3, nt++;
    }
    queue<pair<int, pair<int, int> > > q;
    q.push(make_pair(0, make_pair(sy, sx)));
    memset(vis, 0, sizeof(vis));
    vis[sy][sx][0] = true;
    ans = INT_MAX;
    while(!q.empty() && ans == INT_MAX) {
      tm = q.front().first;
      tm++;
      y = q.front().second.first;
      x = q.front().second.second;
      q.pop();
      if(DEBUG)
	printf("tm = %d, (%d, %d)\n", tm, x, y);
      for(int d = 0; d < 4; d++) {
	int ny = y + dy[d];
	int nx = x + dx[d];
	if(ny >= 0 && ny < Y && nx >= 0 && nx < X && g[ny][nx] == '.' && !vis[ny][nx][tm % 4] && val(ny, nx, tm % 4)) {
	  if(ny == gy && nx == gx) {
	    ans = tm;
	    break;
	  }
	  vis[ny][nx][tm % 4] = true;
	  q.push(make_pair(tm, make_pair(ny, nx)));
	}
      }
    }
    printf("Case #%d: ", cn);
    if(ans == INT_MAX)
      printf("impossible\n");
    else
      printf("%d\n", ans);
  }
  return 0;
}

	  

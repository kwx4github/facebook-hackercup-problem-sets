#define Federico using
#define Javier namespace
#define Pousa std;
#include <iostream>
#include <fstream>
#include <string>
#include <set>
#include <vector>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <cstring>
#include <sstream>

Federico Javier Pousa

int di[4] = {-1,0,1,0};
int dj[4] = {0, 1, 0, -1};

typedef pair<int,int> pii;
typedef pair<pii,int> piii;

int main(){
	int T, M, N, mini, usado[105][105][5];
	string aux;
	cin >> T;
	for(int caso=1; caso<=T; ++caso){
		memset(usado, 0, sizeof usado);
		cin >> M >> N;
		vector<string> maze;
		for(int i=0; i<M; ++i){
			cin >> aux;
			maze.push_back(aux);
		}
		pii S;
		for(int i=0; i<M; ++i){
			for(int j=0; j<N; ++j){
				if(maze[i][j]=='S')S=pii(i,j);
			}
		}
		
		
		mini = -1;
		queue<piii> cola;
		piii actual;
		pii posact;
		cola.push(piii(S,0));
		usado[S.first][S.second][0] = 1;
		bool atacado;
		int mii, mij, ci, cj, mod;
		while(!cola.empty()){
			actual = cola.front();
			cola.pop();
			posact = actual.first;
			if(maze[posact.first][posact.second]=='G'){
				mini = actual.second;
				break;
			}
			for(int k=0; k<4; ++k){
				mii = posact.first+di[k];
				mij = posact.second+dj[k];
				mod = (actual.second+1)%4;
				if(mii<0||mii>=M||mij<0||mij>=N)continue;
				if(maze[mii][mij]!='.'&&maze[mii][mij]!='G'&&maze[mii][mij]!='S')continue;
				if(usado[mii][mij][mod])continue;
				atacado = false;
				
				//UP
				for(ci=mii-1;!atacado&&ci>=0;ci--){
					if(maze[ci][mij]=='v'&&mod==0)atacado=true;
					if(maze[ci][mij]=='>'&&mod==1)atacado=true;
					if(maze[ci][mij]=='^'&&mod==2)atacado=true;
					if(maze[ci][mij]=='<'&&mod==3)atacado=true;
					if(maze[ci][mij]!='.'&&maze[ci][mij]!='G'&&maze[ci][mij]!='S')break;
				}
				
				//RIGTH
				for(cj=mij+1;!atacado&&cj<N;cj++){
					if(maze[mii][cj]=='v'&&mod==1)atacado=true;
					if(maze[mii][cj]=='>'&&mod==2)atacado=true;
					if(maze[mii][cj]=='^'&&mod==3)atacado=true;
					if(maze[mii][cj]=='<'&&mod==0)atacado=true;
					if(maze[mii][cj]!='.'&&maze[mii][cj]!='G'&&maze[mii][cj]!='S')break;
				}
				
				//DOWN
				for(ci=mii+1;!atacado&&ci<M;ci++){
					if(maze[ci][mij]=='v'&&mod==2)atacado=true;
					if(maze[ci][mij]=='>'&&mod==3)atacado=true;
					if(maze[ci][mij]=='^'&&mod==0)atacado=true;
					if(maze[ci][mij]=='<'&&mod==1)atacado=true;
					if(maze[ci][mij]!='.'&&maze[ci][mij]!='G'&&maze[ci][mij]!='S')break;
				}
				
				//LEFT
				for(cj=mij-1;!atacado&&cj>=0;cj--){
					if(maze[mii][cj]=='v'&&mod==3)atacado=true;
					if(maze[mii][cj]=='>'&&mod==0)atacado=true;
					if(maze[mii][cj]=='^'&&mod==1)atacado=true;
					if(maze[mii][cj]=='<'&&mod==2)atacado=true;
					if(maze[mii][cj]!='.'&&maze[mii][cj]!='G'&&maze[mii][cj]!='S')break;
				}
				
				if(atacado)continue;
				cola.push(piii(pii(mii,mij),actual.second+1));
				usado[mii][mij][mod] = 1;
			}
		}
		if(mini==-1)cout << "Case #" << caso << ": " << "impossible" << endl;
		if(mini!=-1)cout << "Case #" << caso << ": " << mini << endl;
	}
	return 0;
}

#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cctype>
#define fi first
#define se second
#define rep(i,n) for(int i = 0; i < n; ++i)
#define rrep(i,n) for(int i = 1; i <= n; ++i)
#define drep(i,n) for(int i = n-1; i >= 0; --i)
#define gep(i,g,j) for(int i = g.head[j]; i != -1; i = g.e[i].next)
#define each(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define rng(a) a.begin(),a.end()
#define maxs(x,y) x = max(x,y)
#define mins(x,y) x = min(x,y)
#define pb push_back
#define sz(x) (int)(x).size()
#define pcnt __builtin_popcount
#define snuke srand((unsigned)clock()+(unsigned)time(NULL))
using namespace std;
typedef long long int ll;
typedef pair<int,int> P;
typedef vector<int> vi;

const int MX = 105, INF = 1000010000;
const ll LINF = 1000000000000000000ll;
const double eps = 1e-10;
const int di[] = {-1,0,1,0,0}, dj[] = {0,1,0,-1,0}; //^>v<

int h, w;
string s[MX];
int d[4][MX][MX];
int e[4][MX][MX];
struct dat {int d, i, j;};

int main(){
  int ts;
  cin >> ts;
  rrep(ti,ts) {
    cin >> h >> w;
    rep(i,h) cin >> s[i];
    int si, sj;
    rep(i,h)rep(j,w) if (s[i][j] == 'S') si = i, sj = j;
    rep(v,4) {
      rep(i,h)rep(j,w) e[v][i][j] = (s[i][j]=='#');
      rep(i,h)rep(j,w) d[v][i][j] = INF;
      rep(i,h)rep(j,w) {
        int k = -1;
        if (s[i][j] == '^') k = 0;
        if (s[i][j] == '>') k = 1;
        if (s[i][j] == 'v') k = 2;
        if (s[i][j] == '<') k = 3;
        if (k == -1) continue;
        k = (k+v)%4;
        int ni = i, nj = j;
        while (1) {
          e[v][ni][nj] = 1;
          ni += di[k]; nj += dj[k];
          if (ni<0||nj<0||ni>=h||nj>=w) break;
          if (s[ni][nj] == '#') break;
          if (s[ni][nj] == '>') break;
          if (s[ni][nj] == '<') break;
          if (s[ni][nj] == '^') break;
          if (s[ni][nj] == 'v') break;
        }
      }
      //printf("v: %d\n",v);
      //rep(i,h){rep(j,w)printf("%d",e[v][i][j]);puts("");}
    }
    queue<dat> q;
    q.push({0,si,sj});
    int ans = -1;
    while(q.size()) {
      dat a = q.front(); q.pop();
      int v = a.d%4, i = a.i, j = a.j;
      if (d[v][i][j] != INF) continue;
      d[v][i][j] = a.d;
      if (s[i][j] == 'G') {
        ans = a.d;
        break;
      }
      rep(k,4) {
        int ni = i+di[k], nj = j+dj[k], nv = (v+1)%4;
        if (ni<0||nj<0||ni>=h||nj>=w) continue;
        if (e[nv][ni][nj]) continue;
        q.push({a.d+1,ni,nj});
      }
    }
    if (ans == -1) printf("Case #%d: impossible\n",ti);
    else printf("Case #%d: %d\n",ti,ans);
  }
  return 0;
}






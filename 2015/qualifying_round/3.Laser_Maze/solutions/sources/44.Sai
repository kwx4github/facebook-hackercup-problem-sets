#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<string.h>
#include<string>
#include<map>
#include<queue>
#define pb push_back
#define sz(x) (int)x.size()

using namespace std;

int dx[] = {-1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};

int laser[101][101][4][4];
int vis[101][101][1001], vis2[101][101][4][4], nex[4];
int main()
{
	map<char, int> f;

	f['^'] = 0, f['<'] = 1, f['>'] = 2, f['v'] = 3;
	 
	nex[0] = 2, nex[1] = 0, nex[2] = 3, nex[3] = 1;

	int t;
	cin>>t;

	for(int tt=1;tt<=t;tt++)
	{
		int m, n;
		cin>>m>>n;

		vector<string> v;

		for(int i=0;i<m;i++)
		{
			string s;
			cin>>s;
			v.pb(s);
		}

		memset(laser, 0, sizeof laser);
		memset(vis, 0, sizeof vis);
		memset(vis2, 0, sizeof vis2);	

		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				if(f.find(v[i][j]) != f.end())
				{
						int dir = f[v[i][j]];
						for(int k=0;k<4;k++)
						{
							int x = i + dx[dir], y = j + dy[dir];
						
							while(x >= 0 and x < m and y >= 0 and y < n and v[x][y] != '#' and f.find(v[x][y]) == f.end() and !laser[x][y][dir][k])
								laser[x][y][dir][k] = 1, x += dx[dir], y += dy[dir];
							
							dir = nex[dir];
						}	
				}

		int stx = -1, sty = -1, enx = -1, eny = -1, res = (int)1e9;

		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
			{
				if(v[i][j] == 'S')stx = i, sty = j;
				if(v[i][j] == 'G')enx = i, eny = j;
			}
	
		queue<int> q;

		q.push(stx);
		q.push(sty);
		q.push(0);
		q.push(0);
	
		vis2[stx][sty][0][0] = 0;
			
		while(!q.empty())
		{
			int x = q.front();q.pop();
			int y = q.front();q.pop();
			int dir = q.front();q.pop();
			int step = q.front();q.pop();

			if(x == enx and y == eny)res = min(res, vis2[x][y][dir][step]);
	
			for(int i=0;i<4;i++)
			{
				int tx = x + dx[i], ty = y + dy[i], nxt = (step + 1)%4, fg = 0;
				if(tx >= 0 and tx < m and ty >= 0 and ty < n and v[tx][ty] != '#' and f.find(v[tx][ty]) == f.end() and !vis2[tx][ty][i][nxt])
				{
					for(int j=0;j<4;j++)
						if(laser[tx][ty][j][nxt]){fg = 1; break;}

					if(!fg)
					{
						vis2[tx][ty][i][nxt] = vis2[x][y][dir][step] + 1;
						q.push(tx);
						q.push(ty);
						q.push(i);
						q.push(nxt);
					}
				}
			}
		}

		if(res == (int)1e9)printf("Case #%d: impossible\n", tt);
		else printf("Case #%d: %d\n", tt, res);


	}
	
	return 0;
}

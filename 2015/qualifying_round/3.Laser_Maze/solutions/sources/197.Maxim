#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000009
#define FAIL ++*(int*)0
#define EPS 1e-8
#define IT 10000
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<double> cd;
#define TASK "test"
//------------------------------------------------------------

struct Point
{
    int x, y, t, d;

    Point(int x, int y)
        : x(x), y(y) {}

    Point(int x, int y, int t, int d)
        : x(x), y(y), t(t), d(d) {}

    Point() {}

    bool operator < (const Point &t) const
    {
        return d > t.d;
    }
};

const int MAXN = 100;
int n, m;
int a[MAXN][MAXN];
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};
Point start, goal;
bool fired[MAXN][MAXN][4];

bool inside(int x, int y)
{
    return x >= 0 && y >= 0 && x < n && y < m;
}

int dijkstra()
{
    vvvi d(n, vvi(m, vi(4, INF)));
    d[start.x][start.y][0] = 0;
    priority_queue<Point> q;
    q.push(Point(start.x, start.y, 0, 0));

    while(!q.empty())
    {
        Point v = q.top();
        q.pop();

        if(v.d != d[v.x][v.y][v.t])
            continue;

        for(int i = 0; i < 4; ++i)
        {
            Point to(v.x + dx[i], v.y + dy[i], (v.t + 1) % 4, v.d + 1);

            if(inside(to.x, to.y) 
                && a[to.x][to.y] == -2 
                && !fired[to.x][to.y][to.t]
                && d[to.x][to.y][to.t] > to.d)
            {
                d[to.x][to.y][to.t] = to.d;
                q.push(to);
            }
        }
    }

    int res = INF;
    for(int i = 0; i < 4; ++i)
        res = min(res, d[goal.x][goal.y][i]);
    return res;
}

void precalc()
{
    for(int x = 0; x < n; ++x)
    {
        for(int y = 0; y < m; ++y)
        {
            if(a[x][y] < 0)
                continue;

            for(int t = 0; t < 4; ++t)
            {
                int id = (a[x][y] + t) % 4;
                int tx = x + dx[id];
                int ty = y + dy[id];

                while(inside(tx, ty) && a[tx][ty] == -2)
                {
                    fired[tx][ty][t] = 1;
                    tx += dx[id];
                    ty += dy[id];
                }
            }
        }
    }
}

int main()
{
#ifdef __APPLE__
    freopen(TASK ".in", "r", stdin);
    freopen(TASK ".out", "w", stdout);
#endif
    int t;
    cin >> t;
    for(int test = 0; test < t; ++test)
    {
        printf("Case #%d: ", test + 1);

        memset(a, 0, sizeof a);
        memset(fired, 0, sizeof fired);

        cin >> n >> m;
        for(int i = 0; i < n; ++i)
        {
            string s;
            cin >> s;
            for(int j = 0; j < m; ++j)
            {
                if(s[j] == '#')
                    a[i][j] = -1;
                if(s[j] == '.' || s[j] == 'S' || s[j] == 'G')
                    a[i][j] = -2;
                if(s[j] == '>')
                    a[i][j] = 0;
                if(s[j] == 'v')
                    a[i][j] = 1;
                if(s[j] == '<')
                    a[i][j] = 2;
                if(s[j] == '^')
                    a[i][j] = 3;
                if(s[j] == 'S')
                    start = Point(i, j);
                if(s[j] == 'G')
                    goal = Point(i, j);
            }
        }

        precalc();

        int res = dijkstra();

        if(res == INF)
            puts("impossible");
        else
            cout << res << endl;
    }
    return 0;
}

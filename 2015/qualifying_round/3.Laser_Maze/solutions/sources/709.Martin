#define _CRT_SECURE_NO_WARNINGS
#include <cmath>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iterator>
#include <ctime>
#include <iomanip>

typedef unsigned int uint32;
typedef signed long long int64;
typedef unsigned long long uint64;

using namespace std;

#define ALL(a) a.begin(), a.end()
#define FOR(a) for (int i = 0; i < a; ++i)
#define D(a) #a << ": " << a << "\n"

char rot(char c)
{
    switch (c)
    {
        case '^': return '>';
        case '>': return 'v';
        case 'v': return '<';
        case '<': return '^';
        default: return c;
    }
}

int n, m;
vector<string> arr[4];
vector<vector<int> > dist[4];
map<char, int> mapping;

int ox[] = { 0, 0, -1, 1};
int oy[] = { -1, 1, 0, 0};

void expand(int a, int b, int c)
{
    auto itr = mapping.find(arr[a][b][c]);
    if (itr == mapping.end()) return;
    int idx = itr->second;

    b += ox[idx];
    c += oy[idx];

    while (b >= 0 && b < n && c >= 0 && c < m && arr[a][b][c] != '#' && rot(arr[a][b][c]) == arr[a][b][c])
    {
        arr[a][b][c] = '$';
        b += ox[idx];
        c += oy[idx];
    }
}

int main()
{
    mapping['^'] = 2;
    mapping['v'] = 3;
    mapping['<'] = 0;
    mapping['>'] = 1;

    int t;
    cin >> t;
    for (int CASE = 1; CASE <= t; ++CASE)
    {
        cin >> n >> m;

        FOR(4) dist[i].clear(), dist[i].resize(n, vector<int>(m, numeric_limits<int>::max()));
        FOR(4) arr[i].clear(), arr[i].resize(n);
        FOR(n) cin >> arr[0][i];
        FOR(3) arr[i+1] = arr[i];
        FOR(3) for (int j = 0; j < n; ++j) for (int k = 0; k < m; ++k) arr[i+1][j][k] = rot(arr[i][j][k]);

        set<pair<int, tuple<int, int, int>> > q;

        for (int j = 0; j < n; ++j) for (int k = 0; k < m; ++k) if (arr[0][j][k] == 'S') dist[0][j][k] = 0, q.insert({ 0, make_tuple(0, j, k) });

        FOR(4) for (int j = 0; j < n; ++j) for (int k = 0; k < m; ++k) expand(i, j, k);

        while (!q.empty())
        {
            auto p = *q.begin();
            q.erase(q.begin());

            int a, b, c;

            tie(a, b, c) = p.second;

            FOR(4)
            {
                int na, nb, nc;
                na = (a + 1) % 4;
                nb = b + ox[i];
                nc = c + oy[i];

                if (nb >= 0 && nb < n && nc >= 0 && nc < m && (arr[na][nb][nc] == '.' || arr[na][nb][nc] == 'S' || arr[na][nb][nc] == 'G'))
                {
                    if (dist[na][nb][nc] > p.first + 1)
                    {
                        dist[na][nb][nc] = p.first + 1;
                        q.insert({ p.first + 1, make_tuple(na, nb, nc) });
                    }
                }
            }
        }

        int res = numeric_limits<int>::max();

        FOR(4) for (int j = 0; j < n; ++j) for (int k = 0; k < m; ++k) if (arr[i][j][k] == 'G') res = min(res, dist[i][j][k]);

        if (res == numeric_limits<int>::max())
            cout << "Case #" << CASE << ": impossible" << endl;
        else
            cout << "Case #" << CASE << ": " << res << endl;
    }

    return 0;
}

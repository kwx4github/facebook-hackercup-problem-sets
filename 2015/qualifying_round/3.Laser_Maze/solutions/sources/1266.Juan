#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

struct Item {
    int i, j, d, s;
    Item(int i, int j, int d, int s) : i(i), j(j), d(d), s(s) {}
};

bool F[200][200][4];
bool V[200][200][4];
char T[200][200];
int n, m;
queue<Item> Q;

void forbfill(int i, int j, int di, int dj, int v) {
    i+=di; j+=dj;
    for(;(T[i][j] == '.' || T[i][j] == 'S' || T[i][j] == 'G') && 
        i>=0 && i<n && j>=0 && j<m;
        i+=di,j+=dj)
            F[i][j][v] = true;
}

void add(int i, int j, int d, int s) {
    if (i<0 || i>=n || j<0 || j>=m) return;
    if (T[i][j] != '.' && T[i][j] != 'G' && T[i][j] != 'S') return;
    if (F[i][j][d] || V[i][j][d]) return;
    Q.push(Item(i, j, d, s));
    V[i][j][d] = true;
}

int main() {
    int test=0, tests; cin >> tests;
    
    while (cin>> n >> m) {
        memset(F, 0, sizeof F);
        memset(V, 0, sizeof V);

        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
                cin >> T[i][j];
        
        int si, sj, gi, gj;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                int start = T[i][j] == '^' ? 0 :
                            T[i][j] == '<' ? 1 :
                            T[i][j] == 'v' ? 2 :
                            T[i][j] == '>' ? 3 : 4;
                            
                if (start != 4) {
                    forbfill(i, j, -1,  0, (start+0)%4);
                    forbfill(i, j,  0,  1, (start+1)%4);
                    forbfill(i, j,  1,  0, (start+2)%4);
                    forbfill(i, j,  0, -1, (start+3)%4);
                }
                if (T[i][j] == 'S')
                    si = i, sj = j;
                if (T[i][j] == 'G')
                    gi = i, gj = j;
            }
        }

/*        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                for(int k=0; k<4; k++)
                    cout << (F[i][j][k] ? (char)('0'+k) : '.');
                cout << " ";
            }
            cout << endl;
        }*/

        Q = queue<Item>();
        Q.push(Item(si, sj, 0, 0));
        V[si][sj][0] = true;

        int found = -1;
        while(found == -1 && !Q.empty()) {
            Item item = Q.front(); Q.pop();
//            cout << " " << item.i << " " << item.j << " " << item.d << " " << item.s << endl;
            if (item.i == gi && item.j == gj)
                found = item.s;
            add(item.i-1, item.j, (item.d+1)%4, item.s+1);
            add(item.i+1, item.j, (item.d+1)%4, item.s+1);
            add(item.i, item.j-1, (item.d+1)%4, item.s+1);
            add(item.i, item.j+1, (item.d+1)%4, item.s+1);
        }
        
        cout << "Case #" << ++test << ": " ;
        if (found != -1)
            cout << found << endl;
        else
            cout << "impossible" << endl;
    }
}

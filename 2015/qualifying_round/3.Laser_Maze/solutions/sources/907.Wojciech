#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int t,m,n;
char tab[102][102][4],zn;
int d[102][102][4];
bool v[102][102][4];
int sx,sy,fx,fy;
struct turret{
	int x;
	int y;
	int d; //0==up, then clockwise
};
turret temp;
vector <turret> g;
struct move{
	int x;
	int y;
	int d;
	int t;
};
queue <move> q;
move qtemp;
int odp;
void bfs()
{
	//int tx,ty,td,tt;
	move x;
	while(!q.empty())
	{
		x=q.front();	
		q.pop();
		d[x.x][x.y][x.t]=x.d;
		if(v[x.x+1][x.y][(x.t+1)%4]==0)
		{
			v[x.x+1][x.y][(x.t+1)%4]=1;
			qtemp=x;
			qtemp.x++;
			qtemp.t=(qtemp.t+1)%4;
			qtemp.d++;
			q.push(qtemp);
		}
	
		if(v[x.x-1][x.y][(x.t+1)%4]==0)
		{
			v[x.x-1][x.y][(x.t+1)%4]=1;
			qtemp=x;
			qtemp.x--;
			qtemp.t=(qtemp.t+1)%4;
			qtemp.d++;
			q.push(qtemp);
		}
		
		if(v[x.x][x.y+1][(x.t+1)%4]==0)
		{
			v[x.x][x.y+1][(x.t+1)%4]=1;
			qtemp=x;
			qtemp.y++;
			qtemp.t=(qtemp.t+1)%4;
			qtemp.d++;
			q.push(qtemp);
		}
	
		if(v[x.x][x.y-1][(x.t+1)%4]==0)
		{
			v[x.x][x.y-1][(x.t+1)%4]=1;
			qtemp=x;
			qtemp.y--;
			qtemp.t=(qtemp.t+1)%4;
			qtemp.d++;
			q.push(qtemp);
		}
		
	}
}

void update(int aa, int bb, int cc)
{
	int px,py;
	int a,b,c;
	a=aa;
	b=bb;
	c=cc;
	if(c==0)
	{
		px=a;
		py=b;
		px--;
		while(tab[px][py][0]=='.' || tab[px][py][0]=='L')
		{
			tab[px][py][0]='L';
			v[px][py][0]=1;
			px--;
		}
		px=a;
		py=b;
		py++;
		while(tab[px][py][1]=='.' || tab[px][py][1]=='L')
		{
			tab[px][py][1]='L';
			v[px][py][1]=1;
			py++;
		}
		px=a;
		py=b;
		px++;
		while(tab[px][py][2]=='.' || tab[px][py][2]=='L')
		{
			tab[px][py][2]='L';
			v[px][py][2]=1;
			px++;
		}
		px=a;
		py=b;
		py--;
		while(tab[px][py][3]=='.' || tab[px][py][3]=='L')
		{
			tab[px][py][3]='L';
			v[px][py][3]=1;
			py--;
		}
	}
	else
	if(c==1)
	{
		px=a;
		py=b;
		px--;
		while(tab[px][py][3]=='.' || tab[px][py][3]=='L')
		{
			tab[px][py][3]='L';
			v[px][py][3]=1;
			px--;
		}
		px=a;
		py=b;
		py++;
		while(tab[px][py][0]=='.' || tab[px][py][0]=='L')
		{
			tab[px][py][0]='L';
			v[px][py][0]=1;
			py++;
		}
		px=a;
		py=b;
		px++;
		while(tab[px][py][1]=='.' || tab[px][py][1]=='L')
		{
			tab[px][py][1]='L';
			v[px][py][1]=1;
			px++;
		}
		px=a;
		py=b;
		py--;
		while(tab[px][py][2]=='.' || tab[px][py][2]=='L')
		{
			tab[px][py][2]='L';
			v[px][py][2]=1;
			py--;
		}
	}
	else
	if(c==2)
	{
		px=a;
		py=b;
		px--;
		while(tab[px][py][2]=='.' || tab[px][py][2]=='L')
		{
			tab[px][py][2]='L';
			v[px][py][2]=1;
			px--;
		}
		px=a;
		py=b;
		py++;
		while(tab[px][py][3]=='.' || tab[px][py][3]=='L')
		{
			tab[px][py][3]='L';
			v[px][py][3]=1;
			py++;
		}
		px=a;
		py=b;
		px++;
		while(tab[px][py][0]=='.' || tab[px][py][0]=='L')
		{
			tab[px][py][0]='L';
			v[px][py][0]=1;
			px++;
		}
		px=a;
		py=b;
		py--;
		while(tab[px][py][1]=='.' || tab[px][py][1]=='L')
		{
			tab[px][py][1]='L';
			v[px][py][1]=1;
			py--;
		}
	}
	else
	if(c==3)
	{
		px=a;
		py=b;
		px--;
		while(tab[px][py][1]=='.' || tab[px][py][1]=='L')
		{
			tab[px][py][1]='L';
			v[px][py][1]=1;
			px--;
		}
		px=a;
		py=b;
		py++;
		while(tab[px][py][2]=='.' || tab[px][py][2]=='L')
		{
			tab[px][py][2]='L';
			v[px][py][2]=1;
			py++;
		}
		px=a;
		py=b;
		px++;
		while(tab[px][py][3]=='.' || tab[px][py][3]=='L')
		{
			tab[px][py][3]='L';
			v[px][py][3]=1;
			px++;
		}
		px=a;
		py=b;
		py--;
		while(tab[px][py][0]=='.' || tab[px][py][0]=='L')
		{
			tab[px][py][0]='L';
			v[px][py][0]=1;
			py--;
		}
	}
	
}

int main()
{
	scanf("%d", &t);
	for(int x=0; x<t; x++)
	{
		scanf("%d %d", &m, &n);
		for(int i=0; i<=m+1; i++)
		{
			for(int p=0; p<4; p++)
			{
				tab[i][0][p]='#';
				tab[i][n+1][p]='#';
				
				v[i][0][p]=1;
				v[i][n+1][p]=1;
			}
		}
		for(int i=0; i<=n+1; i++)
		{
			for(int p=0; p<4; p++)
			{
				tab[0][i][p]='#';
				tab[m+1][i][p]='#';
				v[0][i][p]=1;
				v[m+1][i][p]=1;
				
			}
		}
		g.erase(g.begin(),g.end());
		for(int i=1; i<=m; i++)
		{
			for(int p=1; p<=n; p++)
			{
				scanf(" %c", &zn);
				//g.erase(g.begin(),g.end());
				for(int it=0; it<4; it++)
				d[i][p][it]=0;
				
				if(zn=='#')
				{
					for(int it=0; it<4; it++)
					{
						tab[i][p][it]='#';
						v[i][p][it]=1;
					}
				}
				else if(zn=='.')
				{
					for(int it=0; it<4; it++)
					{
						tab[i][p][it]='.';
						v[i][p][it]=0;
					}
				}
				else if(zn=='S')
				{
					sx=i;
					sy=p;
					
					for(int it=0; it<4; it++)
					{
						tab[i][p][it]='.';
						v[i][p][it]=0;
					}
				}
				else if(zn=='G')
				{
					fx=i;
					fy=p;
					
					for(int it=0; it<4; it++)
					{
						tab[i][p][it]='.';
						v[i][p][it]=0;
					}
					
				}
				else
				{
					temp.x=i;
					temp.y=p;
					for(int it=0; it<4; it++)
					{
						tab[i][p][it]='#';
						v[i][p][it]=1;
					}
					
					if(zn=='^')
					{
						temp.d=0;
					}
					else if(zn=='>')
					{
						temp.d=1;
					}
					else if(zn=='v')
					{
						temp.d=2;
					}
					else if(zn=='<')
					{
						temp.d=3;
					}
					g.push_back(temp);
				}
			}
		}/*
		for(int it=0; it<4; it++)
		{
		
		for(int i=1; i<=m; i++)
		{
			for(int p=1; p<=n; p++)
			{
				printf("%c", tab[i][p][it]);
			}
			printf("\n");
		}
		printf("\n");
		}*/
		for(int i=0; i<g.size(); i++)
		{
			update(g[i].x,g[i].y,g[i].d);
		}
		qtemp.x=sx;
		qtemp.y=sy;
		qtemp.d=0;
		qtemp.t=0;
		v[sx][sy][0]=1;
		q.push(qtemp);
		bfs();
		odp=999999999;
		for(int it=0; it<4; it++)
		{
			if(d[fx][fy][it]!=0)
			odp=min(odp,d[fx][fy][it]);
		}
		if(odp==999999999)
		{
			printf("Case #%d: impossible\n", x+1);
		}
		else 
		{
			printf("Case #%d: %d\n", x+1,odp);
		}
		/*
		for(int it=0; it<4; it++)
		{
		
		for(int i=1; i<=m; i++)
		{
			for(int p=1; p<=n; p++)
			{
				printf("%c", tab[i][p][it]);
			}
			printf("\n");
		}
		printf("\n");
		}*/
	}
}

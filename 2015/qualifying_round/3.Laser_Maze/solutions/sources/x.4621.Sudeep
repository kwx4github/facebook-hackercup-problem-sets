

#define DEBUG       //comment when you have to disable all debug macros.
#define LOCAL     //uncomment for testing from local file
#define NDEBUG    //comment when all assert statements have to be enabled.
//#define GRAPH
#include <iostream>
#include <cstring>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <climits>
#include <ctime>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <sys/time.h>
#include <iomanip>
#include <cstdarg>
#include <utility> //std::pair
#include <cassert>

#define fd(i,a) for(i=1;i<=a;i++)
#define fa(i,a,b) for(i=a;i<=b;i++)
#define fs(i,a,b,c) for(i=a;i<=b;i+=c)
#define tr(c,i) for(typeof(c.begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define all(x) x.begin(), x.end()
#define clr(x,y) memset(x,y,sizeof x)
#define log2(x) (log(x)/log(2))
#define ARRAY_SIZE(arr) (1[&arr]-arr)      
#define INDEX(arr,elem)        (lower_bound(all(arr),elem)-arr.begin())
#define equals(a,b) (a.compareTo(b)==0)    //for strings only
template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

#define pb push_back
#define mp make_pair
#define lld long long int
#define MOD 1000000007
#define gcd __gcd

using namespace std;


#ifdef DEBUG
#define debug(args...)            {dbg,args; cerr<<endl;}
#else
#define debug(args...)              // Just strip off all debug tokens
#endif

#ifdef GRAPH
#include "drawGraph.cpp"
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }

}dbg;

typedef struct n{
	lld x,y;

}node;


node start,goal;
node laser[10001];
lld m,n,lasercount;
char arr[101][101];
bool attack[4][101][101];
lld bfs[101][101][4];  //laser?
lld dx[4]={0,-1,0,1},dy[4]={-1,0,1,0};
map<char,lld> dir;

lld checkattack(lld x, lld y, lld num){
	if(attack[num%4][x][y])return 1;
	else return 0;
}

// void recurse(lld x, lld y, lld num){
// 	lld i,xx,yy,k=(num+1)%4;
// 	for(i=0;i<4;i++){
// 		xx=x+dx[i];
// 		yy=y+dy[i];

// 		if(xx<=0 || xx>m || yy<=0 || yy>n || arr[xx][yy]=='#' || arr[xx][yy]=='<' || arr[xx][yy]=='^' || arr[xx][yy]=='>' || arr[xx][yy]=='v')continue;

// 		if(checkattack(xx,yy,num+1))continue;
// 		if(bfs[xx][yy][k]==-1){
// 			bfs[xx][yy][k]=num+1;
// 			recurse(xx,yy,num+1);
// 		}
// 	}
// }

typedef struct po{
	lld x,y,num;
}pop;

lld solve(){
	lld i,mi=LLONG_MAX,x,y,num,xx,yy;
	clr(bfs,-1);
	bfs[start.x][start.y][0] = 0;
	queue<pop> q;
	q.push((pop){start.x,start.y,0});
	while(!q.empty()){
		x = q.front().x;
		y = q.front().y;
		num = q.front().num;
		q.pop();
		for(i=0;i<4;i++){
			xx=x+dx[i];
			yy=y+dy[i];
			if(xx<=0 || xx>m || yy<=0 || yy>n || arr[xx][yy]=='#' || arr[xx][yy]=='<' || arr[xx][yy]=='^' || arr[xx][yy]=='>' || arr[xx][yy]=='v')continue;
			if(checkattack(xx,yy,num+1))continue;
			if(bfs[xx][yy][(num+1)%4]==-1){
				bfs[xx][yy][(num+1)%4]=num+1;
				q.push((pop){xx,yy,num+1});
			}
		}
	}
	
	
	
	
	
	
	for(i=0;i<4;i++)if(bfs[goal.x][goal.y][i]!=-1){mi=min(mi,bfs[goal.x][goal.y][i]);/*debug(i,":",mi,bfs[goal.x][goal.y][i]);*/}
	return (mi==LLONG_MAX)?-1:mi;
}

void populate(lld x, lld y){
	lld i,k=4-dir[arr[x][y]];
	for(i=1;i<=y-1;i++)attack[k%4][x][i]=true;
	for(i=1;i<=x-1;i++)attack[(1+k)%4][i][y]=true;
	for(i=y+1;i<=n;i++)attack[(k+2)%4][x][i]=true;
	for(i=x+1;i<=m;i++)attack[(k+3)%4][i][y]=true;
}

int main()
{
#ifdef LOCAL
    freopen("input.in","r",stdin);
#endif
	 dir['<'] = 0;dir['^'] = 1;dir['>']=2;dir['v']=3;
	 
	 lld t,i,j,p=0;
	 scanf("%lld",&t);
	 while(t--){
		 p++;
		 lasercount=1;
		 scanf("%lld %lld",&m,&n);
		 clr(attack,false);
		 for(i=1;i<=m;i++)for(j=1;j<=n;j++){
				 scanf(" %c",&arr[i][j]);
				 if(arr[i][j]=='S')start=(node){i,j};
				 if(arr[i][j]=='G')goal=(node){i,j};
				 if(arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='>' || arr[i][j]=='v'){
//					 debug("qqqqqqqqaaaaa",i,j);
					 laser[lasercount++] = (node){i,j};
					 populate(i,j);
				 }
			 }
		 // debug("qqqqqqq");
		 // for(i=0;i<4;i++){
		 // 	 debug(i,":");
		 // 	 for(j=1;j<=m;j++){
		 // 		 for(lld f=1;f<=n;f++)cout<<attack[i][j][f]<<" ";
		 // 		 cout<<endl;
		 // 	 }
		 // }
		 // debug("qqqqqqq");


		 lld k = solve();
		 if(k!=-1)
			 printf("Case #%lld: %lld\n",p,k);
		 else printf("Case #%lld: impossible\n",p);
	 }
}


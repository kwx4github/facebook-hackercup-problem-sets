#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
struct state{
  int d, x, y, s;
};
int main() {
  int t;
  scanf("%d", &t);
  for (int i=1; i<=t; i++) {
    int n, m;
    char maze[4][105][105];
    scanf("%d %d", &n, &m);
    for (int j=0; j<=m+1; j++) {
      maze[0][0][j] = maze[0][n+1][j] = '#';
    }
    for (int j=1; j<=n; j++) {
      scanf("%s", maze[0][j]+1);
      maze[0][j][0] = maze[0][j][m+1] = '#';
    }
    int sx, sy, gx, gy;
    for (int j=1; j<=n; j++) {
      for (int k=1; k<=m; k++) {
        if (maze[0][j][k] == 'S') {
          sx = j;
          sy = k;
          maze[0][j][k] = '.';
        }
        if (maze[0][j][k] == 'G') {
          gx = j;
          gy = k;
          maze[0][j][k] = '.';
        }
      }
    }
    char s[] = "^>v<^>v<";
    for (int dir=1; dir<=3; dir++) {
      memcpy(maze[dir], maze[0], sizeof(maze[0]));
      for (int j=1; j<=n; j++) {
        for (int k=1; k<=m; k++) {
          char* pos = strchr(s, maze[dir][j][k]);
          if (pos) {
            maze[dir][j][k] = *(pos+dir);
          }
        }
      }
    }
    for (int dir=0; dir<=3; dir++) {
      for (int j=1; j<=n; j++) {
        for (int k=1; k<=m; k++) {
          char* pos = strchr(s, maze[dir][j][k]);
          if (pos) {
            int dx, dy;
            switch (maze[dir][j][k]) {
              case '^':
                dx = -1; dy = 0; break;
              case 'v':
                dx = 1; dy = 0; break;
              case '<':
                dx = 0; dy = -1; break;
              case '>':
                dx = 0; dy = 1; break;
            }
            int cx = j+dx, cy = k+dy;
            while (maze[dir][cx][cy] == '.' || maze[dir][cx][cy] == '*') {
              maze[dir][cx][cy] = '*';
              cx += dx;
              cy += dy;
            }
          }
        }
      }
    }
    /**
    for (int dir=0; dir<=3; dir++) {
      printf("Dir %d\n", dir);
      for (int j=0; j<=n+1; j++) {
        for (int k=0; k<=m+1; k++) {
          printf("%c", maze[dir][j][k]);
        }
        printf("\n");
      }
    }
    **/
    bool v[4][105][105];
    memset(v, 0, sizeof(v));
    v[0][sx][sy] = true;
    queue<state> q;
    q.push(state{0, sx, sy, 0});
    while (!q.empty()) {
      state top = q.front();
      if (top.x == gx && top.y == gy) {
        printf("Case #%d: %d\n", i, top.s);
        break;
      }
      int nextd = (top.d + 1) % 4;
      q.pop();
      if (!v[nextd][top.x][top.y + 1] && maze[nextd][top.x][top.y + 1] == '.') {
        v[nextd][top.x][top.y + 1] = true;
        q.push(state{nextd, top.x, top.y + 1, top.s + 1});
      }
      if (!v[nextd][top.x][top.y - 1] && maze[nextd][top.x][top.y - 1] == '.') {
        v[nextd][top.x][top.y - 1] = true;
        q.push(state{nextd, top.x, top.y - 1, top.s + 1});
      }
      if (!v[nextd][top.x + 1][top.y] && maze[nextd][top.x + 1][top.y] == '.') {
        v[nextd][top.x + 1][top.y] = true;
        q.push(state{nextd, top.x + 1, top.y, top.s + 1});
      }
      if (!v[nextd][top.x - 1][top.y] && maze[nextd][top.x - 1][top.y] == '.') {
        v[nextd][top.x - 1][top.y] = true;
        q.push(state{nextd, top.x - 1, top.y, top.s + 1});
      }
    }
    if (q.empty()) {
      printf("Case #%d: impossible\n", i);
    }
  }
  return 0;
}

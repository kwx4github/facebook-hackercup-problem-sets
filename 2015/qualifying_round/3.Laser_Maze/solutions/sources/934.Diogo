#include <stdio.h>
#include <string.h>

struct position{
	int x,y,z;
	position(int a, int b, int c){
		x=a;
		y=b;
		z=c;
	}
	
	position(){
		position(0,0,0);
	}
};

int u, T, N, M;
position start, end, atual, temp;
char c;
int tabela[110][110][5];
int marcado[110][110][5];
int dist[110][110][5];
position fila[100100];
int ini, fim;

int main(){
	scanf(" %d", &T);
	u=0;
	while(u<T){
		u++;
		scanf(" %d %d", &N, &M);
		
		for(int i=0; i<N+2; i++)
			for(int j=0; j<M+2; j++)
				tabela[i][j][0] = 1;
		
		for(int i=1; i<=N; i++){
			for(int j=1; j<=M; j++){
				scanf(" %c", &c);
				if(c=='.') tabela[i][j][0] = 0;
				if(c=='#') tabela[i][j][0] = 1;
				if(c=='^') tabela[i][j][0] = 2;
				if(c=='>') tabela[i][j][0] = 3;
				if(c=='v') tabela[i][j][0] = 4;
				if(c=='<') tabela[i][j][0] = 5;
				if(c=='S'){
					tabela[i][j][0] = 0;
					start = position(i,j,0);
				}
				if(c=='G'){
					tabela[i][j][0] = 0;
					end = position(i,j,0);
				}
			}
		}
		
		N+=2;
		M+=2;
		for(int k=1; k<4; k++){
			for(int i=0; i<N; i++){
				for(int j=0; j<M; j++){
					tabela[i][j][k] = tabela[i][j][k-1];
					
					if(tabela[i][j][k] >= 2) tabela[i][j][k] = ((tabela[i][j][k]-2+1)%4)+2;
				}
			}
		}
		
		for(int k=0; k<4; k++){
			for(int i=0; i<N; i++){
				for(int j=0; j<M; j++){
					
					if(tabela[i][j][k] == 2){
						for(int delta = 1; true; delta++){
							if(tabela[i-delta][j][k] <= 0) tabela[i-delta][j][k] = -1;
							else break;							
						}
					}
					
					if(tabela[i][j][k] == 3){
						for(int delta = 1; true; delta++){
							if(tabela[i][j+delta][k] <= 0) tabela[i][j+delta][k] = -1;
							else break;							
						}
					}
					
					if(tabela[i][j][k] == 4){
						for(int delta = 1; true; delta++){
							if(tabela[i+delta][j][k] <= 0) tabela[i+delta][j][k] = -1;
							else break;							
						}
					}
					
					if(tabela[i][j][k] == 5){
						for(int delta = 1; true; delta++){
							if(tabela[i][j-delta][k] <= 0) tabela[i][j-delta][k] = -1;
							else break;							
						}
					}
				}
			}
		}
		
		for(int k=0; k<4; k++){
			for(int i=0; i<N; i++){
				for(int j=0; j<M; j++){
					if(tabela[i][j][k] != 0) tabela[i][j][k] = 1;
				}
			}
		}
		
		memset(marcado, 0, sizeof(marcado));
		memset(dist, 0, sizeof(dist));
		
		fila[0] = start;
		ini = 0;
		fim = 1;
		marcado[start.x][start.y][start.z] = 1;
		while(ini < fim){
			atual = fila[ini];
			ini++;
			
			temp = atual;
			temp.z = (temp.z+1)%4;
			temp.x++;
			if(tabela[temp.x][temp.y][temp.z]==0 && marcado[temp.x][temp.y][temp.z]==0){
				fila[fim] = temp;
				fim++;
				marcado[temp.x][temp.y][temp.z] = 1;
				dist[temp.x][temp.y][temp.z] = dist[atual.x][atual.y][atual.z]+1;
			}
			
			temp = atual;
			temp.z = (temp.z+1)%4;
			temp.x--;
			if(tabela[temp.x][temp.y][temp.z]==0 && marcado[temp.x][temp.y][temp.z]==0){
				fila[fim] = temp;
				fim++;
				marcado[temp.x][temp.y][temp.z] = 1;
				dist[temp.x][temp.y][temp.z] = dist[atual.x][atual.y][atual.z]+1;
			}
			
			temp = atual;
			temp.z = (temp.z+1)%4;
			temp.y++;
			if(tabela[temp.x][temp.y][temp.z]==0 && marcado[temp.x][temp.y][temp.z]==0){
				fila[fim] = temp;
				fim++;
				marcado[temp.x][temp.y][temp.z] = 1;
				dist[temp.x][temp.y][temp.z] = dist[atual.x][atual.y][atual.z]+1;
			}
			
			temp = atual;
			temp.z = (temp.z+1)%4;
			temp.y--;
			if(tabela[temp.x][temp.y][temp.z]==0 && marcado[temp.x][temp.y][temp.z]==0){
				fila[fim] = temp;
				fim++;
				marcado[temp.x][temp.y][temp.z] = 1;
				dist[temp.x][temp.y][temp.z] = dist[atual.x][atual.y][atual.z]+1;
			}
		}
		
		int resp=2000000000;
		for(int k=0; k<4; k++){
			if(marcado[end.x][end.y][k]==1 && dist[end.x][end.y][k]<resp) resp = dist[end.x][end.y][k];
		}
		
		printf("Case #%d: ", u);
		if(resp==2000000000) printf("impossible\n");
		else printf("%d\n", resp);
	}
	return 0;
}

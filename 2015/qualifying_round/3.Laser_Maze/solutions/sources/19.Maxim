#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <stack>
#include <vector>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define foreach(e, x) for (__typeof(x.begin()) e = x.begin(); e != x.end(); ++e)
typedef long long LL;
typedef pair<int, int> PII;

int d[4][100][100];
bool safe[4][100][100];
char s[100][105];
int t, n, m;
int y, x, yy, xx;

const int INF = 1e9;

struct State {
	int k, y, x;
	State(int k = 0, int y = 0, int x = 0) : k(k), y(y), x(x) {}
};

queue<State> q;

inline int getTur(char c) {
	if (c == '<') return 0;
	if (c == '^') return 1;
	if (c == '>') return 2;
	if (c == 'v') return 3;
	return -1;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d", &t);
	for (int test = 1; test <= t; ++test) {
		printf("Case #%d: ", test);
		scanf("%d%d", &n, &m);
		REP(i, n) scanf("%s", s[i]);
		REP(i, n) REP(j, m) if (s[i][j] == 'S')
			y = i, x = j, s[i][j] = '.';
		else if (s[i][j] == 'G')
			yy = i, xx = j, s[i][j] = '.';
		REP(k, 4) REP(i, n) REP(j, m) safe[k][i][j] = true;
		REP(k, 4) REP(i, n) REP(j, m) if (getTur(s[i][j]) != -1 || s[i][j] == '#')
			safe[k][i][j] = false;
		REP(k, 4) {
			REP(i, n) REP(j, m) {
				int tur = getTur(s[i][j]);
				if (tur == -1) continue;
				tur = (tur + k) % 4;
				if (tur == 0) {
					for (int jj = j - 1; jj >= 0; --jj) {
						if (getTur(s[i][jj]) != -1 || s[i][jj] == '#')
							break;
						safe[k][i][jj] = false;
					}
				} else if (tur == 1) {
					for (int ii = i - 1; ii >= 0; --ii) {
						if (getTur(s[ii][j]) != -1 || s[ii][j] == '#')
							break;
						safe[k][ii][j] = false;
					}
				} else if (tur == 2) {
					for (int jj = j + 1; jj < m; ++jj) {
						if (getTur(s[i][jj]) != -1 || s[i][jj] == '#')
							break;
						safe[k][i][jj] = false;
					}
				} else {
					for (int ii = i + 1; ii < n; ++ii) {
						if (getTur(s[ii][j]) != -1 || s[ii][j] == '#')
							break;
						safe[k][ii][j] = false;
					}
				}
			}
		}
		REP(k, 4) REP(i, n) REP(j, m) d[k][i][j] = INF;
		d[0][y][x] = 0;
		q.push(State(0, y, x));
		while (!q.empty()) {
			State s = q.front();
			q.pop();
			int nk = (s.k + 1) % 4;
			int nd = d[s.k][s.y][s.x] + 1;
			if (s.y > 0 && safe[nk][s.y - 1][s.x] && d[nk][s.y - 1][s.x] == INF) {
				d[nk][s.y - 1][s.x] = nd;
				q.push(State(nk, s.y - 1, s.x));
			}
			if (s.x > 0 && safe[nk][s.y][s.x - 1] && d[nk][s.y][s.x - 1] == INF) {
				d[nk][s.y][s.x - 1] = nd;
				q.push(State(nk, s.y, s.x - 1));
			}
			if (s.y < n - 1 && safe[nk][s.y + 1][s.x] && d[nk][s.y + 1][s.x] == INF) {
				d[nk][s.y + 1][s.x] = nd;
				q.push(State(nk, s.y + 1, s.x));
			}
			if (s.x < m - 1 && safe[nk][s.y][s.x + 1] && d[nk][s.y][s.x + 1] == INF) {
				d[nk][s.y][s.x + 1] = nd;
				q.push(State(nk, s.y, s.x + 1));
			}
		}
		int ans = INF;
		REP(k, 4) ans = min(ans, d[k][yy][xx]);
		if (ans == INF) printf("impossible\n");
		else printf("%d\n", ans);
	}
	return 0;
}

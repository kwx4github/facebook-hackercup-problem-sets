#/bin/bash/python

def move(x,y,i,fremat,tocheck,valumat,G):

    if x<0 or y<0 or x>=m or y>=n or i%4 in fremat[x][y]:
        return False

    if(x,y) == G:
        return True

    #print x, y, i

    if i%4 not in map(lambda l: l%4, valumat[x][y]):
        valumat[x][y].add(i)
        tocheck.add((x,y))

    return False


def adbeams(fremat,blocked,x,y,state):

    for i in range(4):

        if state==0:
            k = y+1
            while k<n:
                if (x,k) in blocked:
                    break
                fremat[x][k].add(i)
                k+=1
        elif state==1:
            k = x+1
            while k<m:
                if (k,y) in blocked:
                    break
                fremat[k][y].add(i)
                k+=1
        elif state==2:
            k = y-1
            while k>=0:
                if (x,k) in blocked:
                    break
                fremat[x][k].add(i)
                k-=1
        elif state==3:
            k = x-1
            while k>=0:
                if (k,y) in blocked:
                    break
                fremat[k][y].add(i)
                k-=1

        state = (state+1)%4;



def solve(strmaze):

    #for r in strmaze:
        #print r

    fremat = []
    valumat = []
    blocked = set()

    for i in range(m):
        fremat.append([])
        valumat.append([])
        for j in range(n):
            fremat[i].append(set())
            valumat[i].append(set())

    for i,r in enumerate(strmaze):
        for j,c in enumerate(r):
            if c=='S':
                srt = (i,j)
            elif c=='G':
                end = (i,j)
            elif c in '#>v<^':
                fremat[i][j].update(range(4))
                blocked.add((i,j))

    for i,r in enumerate(strmaze):
        for j,c in enumerate(r):
            if c=='>':
                adbeams(fremat,blocked,i,j,0)
            elif c=='v':
                adbeams(fremat,blocked,i,j,1)
            elif c=='<':
                adbeams(fremat,blocked,i,j,2)
            elif c=='^':
                adbeams(fremat,blocked,i,j,3)

    #for r in fremat:
        #print r

    tocheck = set([srt])
    
    step = 0
    while tocheck:

        step+=1
        tochecknew = set()
        while tocheck:
            x,y = tocheck.pop()
            won = move(x+1,y,step,fremat,tochecknew,valumat,end)
            if won:
                return step
            won = move(x-1,y,step,fremat,tochecknew,valumat,end)
            if won:
                return step
            won = move(x,y+1,step,fremat,tochecknew,valumat,end)
            if won:
                return step
            won = move(x,y-1,step,fremat,tochecknew,valumat,end)
            if won:
                return step

        tocheck = tochecknew


    return -1

T = int(raw_input())

for i in range(T):
    m, n = map(int,raw_input().split())
    strmaze = []
    for _ in range(m):
        strmaze.append( [c for c in raw_input()])

    #start_time = time.time()
    sol = solve(strmaze)
    #elapsed_time = time.time() - start_time
    #print elapsed_time

    if sol == -1:
        print 'Case #%d: impossible'%(i+1) 
    else:
        print 'Case #%d: %d' %(i+1, sol)


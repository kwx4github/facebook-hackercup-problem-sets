#include <iostream>
using namespace std;

bool visited[100][100][4];
bool safe[100][100][5];
int T, m, n, r, xf, yf, x, y, s, tu;
char c[100][100];

void crossCU(int R, int C, int Step)
{
	for (int i = R - 1; i >= 0 && c[i][C] == '.'; i--)
		safe[i][C][Step] = false;
}
void crossCD(int R, int C, int Step)
{
	for (int i = R + 1; i < m && c[i][C] == '.'; i++)
		safe[i][C][Step] = false;
}

void crossRL(int R, int C, int Step)
{
	for (int i = C - 1; i >= 0 && c[R][i] == '.'; i--)
		safe[R][i][Step] = false;
}
void crossRR(int R, int C, int Step)
{
	for (int i = C + 1; i < n && c[R][i] == '.'; i++)
		safe[R][i][Step] = false;
}

void Go()
{
	if (s < r)
	{
		if (x == xf && y == yf)
		{
			r = s;
		}
		else
		{
			tu = (tu + 1) % 4;
			s++;
			x--;
			if (x >= 0 && safe[x][y][4] && safe[x][y][tu] && (!visited[x][y][tu]))
			{
				visited[x][y][tu] = true;
				Go();
			}
			x++;

			x++;
			if (x < m && safe[x][y][4] && safe[x][y][tu] && (!visited[x][y][tu]))
			{
				visited[x][y][tu] = true;
				Go();
			}
			x--;

			y--;
			if (y >= 0 && safe[x][y][4] && safe[x][y][tu] && (!visited[x][y][tu]))
			{
				visited[x][y][tu] = true;
				Go();
			}
			y++;

			y++;
			if (y < n && safe[x][y][4] && safe[x][y][tu] && (!visited[x][y][tu]))
			{
				visited[x][y][tu] = true;
				Go();
			}
			y--;

			s--;
			if (tu == 0)
				tu = 3;
			else
				tu--;
		}
	}
}

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	cin >> T;
	for (int t = 1; t <= T; t++)
	{
		r = 2000000000;
		s = 0; tu = 0;
		cin >> m >> n;
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> c[i][j];

				safe[i][j][0] = true;
				safe[i][j][1] = true;
				safe[i][j][2] = true;
				safe[i][j][3] = true;
				safe[i][j][4] = false;

				visited[i][j][0] = false;
				visited[i][j][1] = false;
				visited[i][j][2] = false;
				visited[i][j][3] = false;

				if (c[i][j] == 'S')
				{
					x = i; y = j;
					visited[i][j][0] = true;
					safe[i][j][4] = true;
					c[i][j] = '.';
				}
				else if (c[i][j] == '.')
				{
					safe[i][j][4] = true;
				}
				else if (c[i][j] == 'G')
				{
					xf = i;
					yf = j;
					c[i][j] = '.';
					safe[i][j][4] = true;
				}
			}


			for (int i = 0; i < m; i++)
			{
				for (int j = 0; j < n; j++)
				{
					if (c[i][j] == '^')
					{
						crossCU(i, j, 0);
						crossRR(i, j, 1);
						crossCD(i, j, 2);
						crossRL(i, j, 3);
					}
					else if (c[i][j] == '>')
					{
						crossRR(i, j, 0);
						crossCD(i, j, 1);
						crossRL(i, j, 2);
						crossCU(i, j, 3);
					}
					else if (c[i][j] == 'v')
					{
						crossCD(i, j, 0);
						crossRL(i, j, 1);
						crossCU(i, j, 2);
						crossRR(i, j, 3);
					}
					else if (c[i][j] == '<')
					{
						crossRL(i, j, 0);
						crossCU(i, j, 1);
						crossRR(i, j, 2);
						crossCD(i, j, 3);
					}
				}
			}
		}

		Go();

		if (r == 2000000000)
			cout << "Case #" << t << ": impossible\n";
		else
			cout << "Case #" << t << ": " << r << endl;
	}
	return 0;
}
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#define bublic public
#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz size()
#define For(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)

template <class _T> inline _T sqr(const _T& x) { return x * x; }
template <class _T> inline string tostr(const _T& a) { ostringstream os(""); os << a; return os.str(); }

typedef long double ld;

// Constants
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-11;

// Types
typedef long long i64;
typedef __int128 i128;
typedef unsigned long long u64;
typedef set < int > SI;
typedef vector < int > VI;
typedef map < string, int > MSI;
typedef pair < int, int > PII;

const char *w = "^>v<";
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};
const int INF = 0x3f3f3f3f;

int qq;
int n, m;
char a[128][128];
bool bad[128 * 128 * 4];
int d[128 * 128 * 4];
int q[128 * 128 * 4];
int en[4];

int tuda(int x, int y, int z)
{
	return (x * m + y) * 4 + z;
}

void ottuda(int pos, int &x, int &y, int &z)
{
	z = pos & 3;
	y = (pos >> 2) % m;
	x = (pos >> 2) / m;
}

int main()
{
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	cout << setiosflags(ios::fixed) << setprecision(10);

	scanf("%d", &qq);
	forn(ii, qq)
	{
		printf("Case #%d: ", ii+1);
		fprintf(stderr, "Case #%d:\n", ii+1);
		
		scanf("%d%d", &n, &m);
		forn(i, n)
		{
			scanf("%s", a[i]);
		}
		clr(bad);
		memset(d, 0x3f, sizeof(d));
		int qb = 0, qe = 0;

		forn(i, n)
		{
			forn(j, m)
			{
				char *cc;
				if ((cc = strchr(w, a[i][j])))
				{
					int t = cc - w;
					forn(l, 4)
					{
						int x = i;
						int y = j;
						while (x >= 0 && x < n && y >= 0 && y < m && a[x][y] != '#')
						{
							bad[tuda(x, y, l)] = true;
							x += dx[(t + l) & 3];
							y += dy[(t + l) & 3];
						}
					}
				}
				if (a[i][j] == '#')
				{
					forn(l, 4)
					{
						bad[tuda(i, j, l)] = true;
					}
				}
				if (a[i][j] == 'S')
				{
					int v = tuda(i, j, 0);
					d[v] = 0;
					q[qe++] = v;
				}
				if (a[i][j] == 'G')
				{
					forn(l, 4)
					{
						en[l] = tuda(i, j, l);
					}
				}
			}
		}
		sort(en, en + 4);

		int ans = INF;
		while (qb != qe)
		{
			int v = q[qb++];
			int x, y, z;
			ottuda(v, x, y, z);
			if (binary_search(en, en + 4, v))
			{
				ans = d[v];
				break;
			}
			forn(l, 4)
			{
				int xn = x + dx[l];
				int yn = y + dy[l];
				if (xn < 0 || xn >= n || yn < 0 || yn >= m) continue;
				int vn = tuda(xn, yn, (z + 1) & 3);
				if (bad[vn]) continue;
				if (d[vn] > d[v] + 1)
				{
					d[vn] = d[v] + 1;
					q[qe++] = vn;
				}
			}
		}

		if (ans >= INF) puts("impossible");
		else printf("%d\n", ans);

		fflush(stdout);
	}

	return 0;
}

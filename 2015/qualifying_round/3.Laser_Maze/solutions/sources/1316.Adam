#include <cstdio>
#include <queue>

#define MAX	100

typedef struct
{
	int x, y, t;
} point_t;

enum
{
	up,
	right,
	down,
	left
};

int main(void)
{
	int tc;
	int z;

	int h, w;
	char grid[MAX][MAX];
	char mark[MAX][MAX][4];

	int i;
	point_t p, n;
	std::queue<point_t> q;
	int gx, gy;

	for(scanf("%d", &tc), z = 1; z <= tc; z ++)
	{
		while(!q.empty())
			q.pop();

		scanf("%d %d ", &h, &w);
		for(n.y = 0; n.y < h; n.y ++)
		{
			for(n.x = 0; n.x < w; n.x ++)
			{
				grid[n.x][n.y] = getchar();
				switch(grid[n.x][n.y])
				{
					case '#':
						grid[n.x][n.y] = 1;
						break;
					case '.':
						grid[n.x][n.y] = 0;
						break;
					case 'S':
						grid[n.x][n.y] = 0;
						p.x = n.x;
						p.y = n.y;
						break;
					case 'G':
						grid[n.x][n.y] = 0;
						gx = n.x;
						gy = n.y;
						break;
					case '^':
						grid[n.x][n.y] = 2 + up;
						break;
					case '>':
						grid[n.x][n.y] = 2 + right;
						break;
					case 'v':
						grid[n.x][n.y] = 2 + down;
						break;
					case '<':
						grid[n.x][n.y] = 2 + left;
						break;
					default:
						return 1;
				}

				for(i = 4; i --;)
					mark[n.x][n.y][i] = 0;
			}

			scanf(" ");
		}

		mark[p.x][p.y][0] = 1;
		p.t = 0;

		q.push(p);

		while(!q.empty())
		{
			p = q.front();
			q.pop();

			//printf("(%d, %d, %d)\n", p.x, p.y, p.t);

			if(p.t != 0)
			{
				for(n.x = p.x + 1; n.x < w && grid[n.x][p.y] == 0; n.x ++);
				if(n.x < w && grid[n.x][p.y] >= 2 && (grid[n.x][p.y] - 2 + p.t) % 4 == left)
				{
					p.x = -1;
					continue;
				}

				for(n.y = p.y + 1; n.y < h && grid[p.x][n.y] == 0; n.y ++);
				if(n.y < h && grid[p.x][n.y] >= 2 && (grid[p.x][n.y] - 2 + p.t) % 4 == up)
				{
					p.x = -1;
					continue;
				}

				for(n.x = p.x - 1; n.x >= 0 && grid[n.x][p.y] == 0; n.x --);
				if(n.x >= 0 && grid[n.x][p.y] >= 2 && (grid[n.x][p.y] - 2 + p.t) % 4 == right)
				{
					p.x = -1;
					continue;
				}

				for(n.y = p.y - 1; n.y >= 0 && grid[p.x][n.y] == 0; n.y --);
				if(n.y >= 0 && grid[p.x][n.y] >= 2 && (grid[p.x][n.y] - 2 + p.t) % 4 == down)
				{
					p.x = -1;
					continue;
				}
			}

			//puts("Not blown up");

			if(p.x == gx && p.y == gy)
				break;

			n.t = p.t + 1;

			n.y = p.y;

			if(p.x > 0 && grid[p.x - 1][p.y] == 0 && !mark[p.x - 1][p.y][n.t % 4])
			{
				n.x = p.x - 1;
				mark[n.x][n.y][n.t % 4] = 1;
				q.push(n);
			}

			if(p.x < w - 1 && grid[p.x + 1][p.y] == 0 &&!mark[p.x + 1][p.y][n.t % 4])
			{
				n.x = p.x + 1;
				mark[n.x][n.y][n.t % 4] = 1;
				q.push(n);
			}

			n.x = p.x;

			if(p.y > 0 && grid[p.x][p.y - 1] == 0 && !mark[p.x][p.y - 1][n.t % 4])
			{
				n.y = p.y - 1;
				mark[n.x][n.y][n.t % 4] = 1;
				q.push(n);
			}

			if(p.y < h - 1 && grid[p.x][p.y + 1] == 0 &&!mark[p.x][p.y + 1][n.t % 4])
			{
				n.y = p.y + 1;
				mark[n.x][n.y][n.t % 4] = 1;
				q.push(n);
			}
		}

		printf("Case %d: ", z);
		if(p.x == gx && p.y == gy)
			printf("%d\n", p.t);
		else
			puts("impossible");
	}

	return 0;
}

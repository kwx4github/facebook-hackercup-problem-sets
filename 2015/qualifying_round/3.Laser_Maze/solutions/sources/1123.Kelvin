//darkstallion's template

#include<bits/stdc++.h>
#define __INIT__ ios::sync_with_stdio(false);\
	cin.tie(0);
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define popb pop_back
#define del erase
#define sz size
#define ins insert
#define FOR(a,b,c) for(int a = b; a < c; a++)
#define FORS(a,b,c) for(int a = b; a <= c; a++)
#define FORN(a,b) for(int a = 0; a < b; a++)
#define FORD(a,b,c) for (int a = b; a >= c; a--)
#define RES(a,b) memset(a,b,sizeof(a))
#define LL long long
#define PII pair<int,int>
#define PLL pair<long long,long long>
#define PDD pair<double,double>
#define PCC pair<char,char>
#define PSS pair<string,string>
#define PI acos(-1)
#define eps 1e-9
using namespace std;

int main()
{
	int t;
	scanf("%d",&t);
	FORN(i,t)
	{
		int n,m;
		scanf("%d%d",&n,&m);
		string mat[4][n];
		FORN(j,n)
			cin >> mat[0][j];
		FOR(j,1,4)
			FORN(k,n)
			{
				mat[j][k] = mat[j-1][k];
				FORN(l,mat[j][k].sz())
					if (mat[j][k][l] == '^')
						mat[j][k][l] = '>';
					else if (mat[j][k][l] == '>')
						mat[j][k][l] = 'v';
					else if (mat[j][k][l] == 'v')
						mat[j][k][l] = '<';
					else if (mat[j][k][l] == '<')
						mat[j][k][l] = '^';
			}
		bool laser[4][n][m];
		RES(laser,false);
		FORN(j,4)
			FORN(k,n)
				FORN(l,m)
					if (mat[j][k][l] == '^')
					{
						int x = k-1;
						while ((x >= 0) && ((mat[j][x][l] == '.') || (mat[j][x][l] == 'S') || (mat[j][x][l] == 'G')))
						{
							laser[j][x][l] = true;
							x--;
						}
					}
					else if (mat[j][k][l] == '>')
					{
						int x = l+1;
						while ((x < m) && ((mat[j][k][x] == '.') || (mat[j][k][x] == 'S') || (mat[j][k][x] == 'G')))
						{
							laser[j][k][x] = true;
							x++;
						}
					}
					else if (mat[j][k][l] == 'v')
					{
						int x = k+1;
						while ((x < n) && ((mat[j][x][l] == '.') || (mat[j][x][l] == 'S') || (mat[j][x][l] == 'G')))
						{
							laser[j][x][l] = true;
							x++;
						}
					}
					else if (mat[j][k][l] == '<')
					{
						int x = l-1;
						while ((x >= 0) && ((mat[j][k][x] == '.') || (mat[j][k][x] == 'S') || (mat[j][k][x] == 'G')))
						{
							laser[j][k][x] = true;
							x--;
						}
					}
		bool udah[4][n][m];
		RES(udah,false);
		queue<int> qx,qy,qz;
		FORN(j,n)
			FORN(k,m)
				if (mat[0][j][k] == 'S')
				{
					qx.push(j);
					qy.push(k);
					qz.push(0);
				}
		bool found = false;
		while (qx.sz())
		{
			int x = qx.front();
			int y = qy.front();
			int z = qz.front();
			qx.pop();
			qy.pop();
			qz.pop();
			int zz = z%4;
			if (mat[zz][x][y] == 'G')
			{
				found = true;
				printf("Case #%d: %d\n",i+1,z);
				break;
			}
			if (!udah[zz][x][y])
			{
				udah[zz][x][y] = true;
				z++;
				zz = z%4;
				FORS(sumx,-1,1)
					FORS(sumy,-1,1)
						if ((sumx == 0) ^ (sumy == 0))
							if ((x+sumx >= 0) && (x+sumx < n) && (y+sumy >= 0) && (y+sumy < m))
								if (!udah[zz][x+sumx][y+sumy] && !laser[zz][x+sumx][y+sumy] && ((mat[zz][x+sumx][y+sumy] == 'S') || (mat[zz][x+sumx][y+sumy] == 'G') || (mat[zz][x+sumx][y+sumy] == '.')))
								{
									qx.push(x+sumx);
									qy.push(y+sumy);
									qz.push(z);
								}
			}
		}
		if (!found)
			printf("Case #%d: impossible\n",i+1);
	}
}

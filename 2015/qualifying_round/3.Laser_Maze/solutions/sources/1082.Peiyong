#define PRETEST
#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#include <stdlib.h>

using namespace std;

const int INF = 0x7fffffff;
const int BIG = 0x4f4f4f4f;
const int dx[4] = {0, -1, 0, 1};
const int dy[4] = {-1, 0, 1, 0};

struct laser {
  int x, y, dir;
  int l, u, r, d;
  laser() {}
  laser(int _x, int _y, int _dir) {
    x = _x;
    y = _y;
    dir = _dir;
  }
};

struct state {
  int x, y, d;
  state() {}
  state(int _x, int _y, int _d) {
    x = _x;
    y = _y;
    d = _d;
  }
};

int m, n;
char s[110][110];
bool vis[110][110][4];
vector<laser> las;
int sx, sy;
int ex, ey;

bool is_inrange(int x, int y) {
  return x >= 0 && x < m && y >= 0 && y < n;
}

void find_range(int& x, int& y, int d) {
  do {
    x += dx[d];
    y += dy[d];
  } while (is_inrange(x, y) && s[x][y] == '.');
  x -= dx[d];
  y -= dy[d];
}

bool check(int x, int y, int d) {
  int size = las.size();
  for (int i = 0; i < size; ++i) {
    int dd = (las[i].dir + d) & 3;
    if ((dd & 1) == 0 && x == las[i].x) {
      if (dd == 0 ? (y >= las[i].l && y <= las[i].y) : (y >= las[i].y && y <= las[i].r)) {
        return false;
      }
    } else if ((dd & 1) == 1 && y == las[i].y) {
      if (dd == 1 ? (x >= las[i].u && x <= las[i].x) : (x >= las[i].x && x <= las[i].d)) {
        return false;
      }
    }
  }
  return true;
}

int bfs() {
  memset(vis, 0, sizeof(vis));
  queue<state> q;
  q.push(state(sx, sy, 0));
  vis[sx][sy][0] = true;
  while (!q.empty()) {
    state sta = q.front();
    q.pop();
    for (int i = 0; i < 4; ++i) {
      int xx = sta.x + dx[i];
      int yy = sta.y + dy[i];
      int dd = sta.d + 1;
      if (!is_inrange(xx, yy) || s[xx][yy] != '.') {
        continue;
      }
      if (vis[xx][yy][dd & 3] || !check(xx, yy, dd)) {
        continue;
      }
      if (xx == ex && yy == ey) {
        return dd;
      }
      q.push(state(xx, yy, dd));
      vis[xx][yy][dd & 3] = true;
    }
  }
  return -1;
}

int main() {
#ifdef PRETEST
  freopen("c.txt", "r", stdin);
  freopen("out.txt", "w+", stdout);
#endif
  int T;
  scanf("%d", &T);
  for (int counter = 1; counter <= T; ++counter) {
    las.clear();

    scanf("%d%d", &m, &n);
    for (int i = 0; i < m; ++i) {
      scanf("%s", s[i]);
      for (int j = 0; j < n; ++j) {
        if (s[i][j] == 'S') {
          s[i][j] = '.';
          sx = i;
          sy = j;
        } else if (s[i][j] == 'G') {
          s[i][j] = '.';
          ex = i;
          ey = j;
        } else if (s[i][j] == '<') {
          las.push_back(laser(i, j, 0));
        } else if (s[i][j] == '^') {
          las.push_back(laser(i, j, 1));
        } else if (s[i][j] == '>') {
          las.push_back(laser(i, j, 2));
        } else if (s[i][j] == 'v') {
          las.push_back(laser(i, j, 3));
        }
      }
    }
    int size = las.size();
    for (int i = 0; i < size; ++i) {
      las[i].u = las[i].d = las[i].x;
      las[i].l = las[i].r = las[i].y;
      find_range(las[i].x, las[i].l, 0);
      find_range(las[i].u, las[i].y, 1);
      find_range(las[i].x, las[i].r, 2);
      find_range(las[i].d, las[i].y, 3);
    }
    int ans = bfs();
    printf("Case #%d: ", counter);
    if (ans < 0) {
      printf("impossible\n");
    } else {
      printf("%d\n", ans);
    }
  }
  return 0;
}

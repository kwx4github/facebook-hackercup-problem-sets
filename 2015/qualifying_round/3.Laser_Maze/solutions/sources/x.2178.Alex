#include <bits/stdc++.h>
using namespace std;

const int INF = 1000000000;
const int MAXN = 105;
int T, M, N, sx, sy, res, q, x, y;
char A[MAXN][MAXN];
map<char,int> dir;
string S;
bool vis[4][MAXN][MAXN];
queue<tuple<int,int,int>> Q;

bool is_turret(char c){
  return dir.find(c) != dir.end();
}

int main(){
  dir = {{'^', 0}, {'>', 1}, {'v', 2}, {'<', 3}};
  cin >> T;
  for(int t = 1; t <= T; t++){
    cin >> M >> N;
    for(int i = 0; i < M; i++){
      cin >> S;
      for(int j = 0; j < N; j++){
        A[i][j] = S[j];
        if(S[j] == 'S'){
          sx = i;
          sy = j;
        }
      }
    }
    res = INF;
    memset(vis, 0, sizeof(vis));
    Q.emplace(0, sx, sy);
    while(Q.size()){
      tie(q, x, y) = Q.front();
      Q.pop();
      if(vis[q % 4][x][y]) continue;
      if(x < 0 || y < 0 || x == M || y == N) continue;
      if(A[x][y] == '#' || is_turret(A[x][y])) continue;
      bool ok = 1;
      for(int i = 0; x + i < M; i++){
        char c = A[x + i][y];
        if(c == '#') break;
        if(!is_turret(c)) continue;
        ok &= ((dir[c] + q) % 4 != 0);
      }
      for(int i = 0; y - i >= 0; i++){
        char c = A[x][y - i];
        if(c == '#') break;
        if(!is_turret(c)) continue;
        ok &= ((dir[c] + q) % 4 != 1);
      }
      for(int i = 0; x - i >= 0; i++){
        char c = A[x - i][y];
        if(c == '#') break;
        if(!is_turret(c)) continue;
        ok &= ((dir[c] + q) % 4 != 2);
      }
      for(int i = 0; y + i < N; i++){
        char c = A[x][y + i];
        if(c == '#') break;
        if(!is_turret(c)) continue;
        ok &= ((dir[c] + q) % 4 != 3);
      }
      if(!ok && q > 0) continue;
      vis[q % 4][x][y] = 1;
      if(A[x][y] == 'G') res = min(res, q);
      Q.emplace(q + 1, x + 1, y);
      Q.emplace(q + 1, x, y + 1);
      Q.emplace(q + 1, x - 1, y);
      Q.emplace(q + 1, x, y - 1);
    }
    if(res < INF) printf("Case #%d: %d\n", t, res);
    else printf("Case #%d: impossible\n", t);
  }
}

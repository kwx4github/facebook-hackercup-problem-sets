#include<bits/stdc++.h>

using namespace std;

#define mod 1000000007
#define mod1 1000003
#define inf 999999999

int m,n;
vector<string> v;
vector<pair<int,int> > turrets;
bool vis[200][200][4];
bool danger[200][200][4];

typedef struct point
{
	int x,y,steps;
}point;


int dir(int steps,char ini)
{
	char a[]={'^','>','v','<'};
	int i,x;
	for(i=0;i<4;i++){if(ini==a[i]){x=i;break;}}
	return (x+steps)%4;
}

void preprocess()
{
	int i,j,x,y,k,d;
	for(i=0;i<turrets.size();i++)
	{
	
	for(j=0;j<4;j++)
	{
	
	x=turrets[i].first;y=turrets[i].second;
	d=dir(j,v[x][y]);
	if(d==0){ while(x>=0){danger[x][y][j]=true;x--;} }
	if(d==1){ while(y<m){danger[x][y][j]=true;y++;} }
	if(d==2){ while(x<n){danger[x][y][j]=true;x++;} }
	if(d==3){ while(y>=0){danger[x][y][j]=true;y--;} }
	}
	}
	return;
}
	
	
	

int main()
{
	//freopen("input.txt","r",stdin);
	freopen("laser_maze.txt","r",stdin);	
	freopen("output.txt","w",stdout);
	//ios::sync_with_stdio(false);
	int t,i,j,k=0,ans,stx,sty,d;
	point p,p1;
	string s;
	cin>>t;
	while(t--)
	{
		k++;
		v.clear();
		turrets.clear();
		memset(danger,false,sizeof(danger));
		memset(vis,false,sizeof(vis));
		cin>>n>>m;
		for(i=0;i<n;i++){cin>>s;v.push_back(s);}
		for(i=0;i<n;i++)
		{for(j=0;j<m;j++)
		{if(v[i][j]=='<'||v[i][j]=='>'||v[i][j]=='^'||v[i][j]=='v')
		{
		
		turrets.push_back(make_pair(i,j));
		}}}
		preprocess();
		queue<point> q;
		ans=inf;
		
		
		for(i=0;i<n;i++){for(j=0;j<m;j++){if(v[i][j]=='S'){stx=i;sty=j;}}}
		p.x=stx;p.y=sty;p.steps=0;
		q.push(p);
		while(!q.empty())
		{
			p=q.front();
			q.pop();
			if(p.x<0 || p.y<0 || p.x>=n || p.y>=m ||v[p.x][p.y]=='#'|| (v[p.x][p.y]!='.' && !isalpha(v[p.x][p.y]))){continue;}
			if(vis[p.x][p.y][p.steps%4]){continue;}
			vis[p.x][p.y][p.steps%4]=true;
			
			if(danger[p.x][p.y][p.steps%4] && p.steps>0){continue;}
			if(v[p.x][p.y]=='G'){ans=p.steps;break;}
			p.steps++;p1=p;
			p.x++;q.push(p);
			p=p1;p.x--;q.push(p);
			p=p1;p.y++;q.push(p);
			p=p1;p.y--;q.push(p);
			
		}
		if(ans==inf){printf("Case #%d: impossible\n",k);}
		else {printf("Case #%d: %d\n",k,ans);}
		
				
	
	}
		
	return 0;
}

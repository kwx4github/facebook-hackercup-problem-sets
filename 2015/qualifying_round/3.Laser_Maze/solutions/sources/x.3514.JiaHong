#include<iostream>
#include<fstream>
#include<string>
#include <vector>
using namespace std;
ifstream fin;
ofstream fout;
int minstep;
struct step
{
	int x,y,count,dir;
};
int row;
int col;
step Startstep,Goalstep;
int Wall1[101][101],Wall2[101][101],Wall3[101][101],Wall4[101][101];
char Wall[101][101];

void fillwall(int w[][101]  ,int x,int y,int dir)
{
	if (dir==1)
	{
		for (int i=x;i>=1;i--)
			w[i][y]=1;
		return;
	}

	if (dir==2)
	{
		for (int i=y;i<=col;i++)
			w[x][i]=1;
		return;
	}

	if (dir==3)
	{
		for (int i=x;i<=row;i++)
			w[i][y]=1;
		return;
	}

	if (dir==4)
	{
		for (int i=y;i>=1;i--)
			w[x][i]=1;
		return;
	}
}
void readin()
{
	memset(Wall1,0,sizeof(Wall1));
	memset(Wall2,0,sizeof(Wall2));
	memset(Wall3,0,sizeof(Wall3));
	memset(Wall4,0,sizeof(Wall4));
	minstep=-1;
	fin>>row>>col;
	char c;
	for (int i=1;i<=row;i++)
	{
		for (int j=1;j<=col;j++)
		{
			fin>>Wall[i][j];
			if (Wall[i][j]=='S')
			{
				Startstep.x=i;//行是x
				Startstep.y=j;
				Startstep.count=0;
				Startstep.dir=1;
			}
			if (Wall[i][j]=='G')
			{
				Goalstep.x=i;//行是x
				Goalstep.y=j;
			}
		}
	}

	for (int i=1;i<=row;i++)
	{
		for (int j=1;j<=col;j++)
		{
			if (Wall[i][j]=='^')
			{
				fillwall(Wall1,i,j,1);
				fillwall(Wall2,i,j,2);
				fillwall(Wall3,i,j,3);
				fillwall(Wall4,i,j,4);
				continue;
			}
			if (Wall[i][j]=='>')
			{
				fillwall(Wall1,i,j,2);
				fillwall(Wall2,i,j,3);
				fillwall(Wall3,i,j,4);
				fillwall(Wall4,i,j,1);
				continue;
			}

			if (Wall[i][j]=='v')
			{
				fillwall(Wall1,i,j,3);
				fillwall(Wall2,i,j,4);
				fillwall(Wall3,i,j,1);
				fillwall(Wall4,i,j,2);
				continue;
			}

			if (Wall[i][j]=='<')
			{
				fillwall(Wall1,i,j,4);
				fillwall(Wall2,i,j,1);
				fillwall(Wall3,i,j,2);
				fillwall(Wall4,i,j,3);
				continue;
			}
		}
	}

	for (int i=1;i<=row;i++)
	{
		for (int j=1;j<=col;j++)
		{
			if (Wall[i][j]=='#')
			{
				Wall1[i][j]=1;
				Wall2[i][j]=1;
				Wall3[i][j]=1;
				Wall4[i][j]=1;
			}

		}
	}

}
void Mark(int x,int y,int dir)
{
	if (dir==1)
		Wall1[x][y]=1;
	if (dir==2)
		Wall2[x][y]=1;
	if (dir==3)
		Wall3[x][y]=1;
	if (dir==4)
		Wall4[x][y]=1;
}

bool ifMark(int x,int y,int dir)
{
	if (dir==1)
		return Wall1[x][y];
	if (dir==2)
		return Wall2[x][y];
	if (dir==3)
		return Wall3[x][y];
	if (dir==4)
		return Wall4[x][y];
}
step que[500000];
void BFS()
{

	
	int head=0,tail=0;
	que[head]=Startstep;
	Mark(que[head].x,que[head].y,que[head].dir);
	while (head<=tail)
	{


		//up
		int x=que[head].x;
		int y=que[head].y;
		int count=que[head].count;
		int dir=que[head].dir;

		if (x==Goalstep.x&&y==Goalstep.y)
		{
			minstep=count;
			break;
		}
		int nextdir=dir+1;
		if (nextdir==5) nextdir=1;
		if (x-1>=1&&!ifMark(x-1,y,nextdir))
		{
			tail++;
			que[tail].x=x-1;
			que[tail].y=y;
			que[tail].count=count+1;
			que[tail].dir=nextdir;
			Mark(x-1,y,nextdir);
		}

		if (y+1<=col&&!ifMark(x,y+1,nextdir))
		{
			tail++;
			que[tail].x=x;
			que[tail].y=y+1;
			que[tail].count=count+1;
			que[tail].dir=nextdir;
			Mark(x,y+1,nextdir);
		}


		if (x+1<=row&&!ifMark(x+1,y,nextdir))
		{
			tail++;
			que[tail].x=x+1;
			que[tail].y=y;
			que[tail].count=count+1;
			que[tail].dir=nextdir;
			Mark(x+1,y,nextdir);
		}

		if (y-1>=1&&!ifMark(x,y-1,nextdir))
		{
			tail++;
			que[tail].x=x;
			que[tail].y=y-1;
			que[tail].count=count+1;
			que[tail].dir=nextdir;
			Mark(x,y-1,nextdir);
		}
		head++;

	}

}
int main()
{
	int N;
	fin.open("E:\\p3.in");
	fout.open("E:\\p3.out");
	fin>>N;
	for (int i=1;i<=N;i++)
	{
		readin();
		BFS();
		if (minstep!=-1)
			fout<<"Case #"<<i<<": "<<minstep<<endl;
		else
			fout<<"Case #"<<i<<": "<<"impossible"<<endl;
	}
}
#include <iostream>
#include <string>
#include <set>
#include <queue>
using namespace std;

#define For(i, n) for (int i = 0; i < (n); i++)
#define For1(i, n) for (int i = 1; i <= (n); i++)
//#define debug(x) { cerr << #x << " = _" << (x) << "_" << endl; }
void Error(string err) { cout << err; cerr << "_" << err << "_"; exit(0); }
int gcd(int a, int b) { return (b==0)? a: gcd(b, a%b); }
/*-------------------------------------------------------------------------------------*/

const int sz = 111;

int row, col;
char scr[sz][sz];
bool visited[4][sz][sz];
bool laser[4][sz][sz];
struct S{
	int r, c, state;
};

void setLaser (int state, int startr, int startc, int addr, int addc) {
	int r = startr + addr, c = startc + addc;
	if (addc == 0)  {
		for (; r >= 0 && r < row; r += addr) {
			if (scr[r][c] != '.' && scr[r][c] != 'G') return;
			laser[state][r][c] = true;
		}
	}
	else {
		for (; c >= 0 && c < col; c += addc) {
			if (scr[r][c] != '.' && scr[r][c] != 'G') return;
			laser[state][r][c] = true;
		}
	}
}

/*_____________________________________________________________________________________*/
int main() {
	//*
	freopen("cin.txt", "r", stdin);
	freopen("cout.txt", "w", stdout);
	//*/

	int T;
	cin >> T;
	For1 (tc, T) {
		cerr << "--> " << tc << " / " << T << endl;
		cin >> row >> col;
		For (i, row) cin >> scr[i];

		queue <S> q;
		For (k, 4)
			For (i, row)
				For (j, col)
					visited[k][i][j] = laser[k][i][j] = false;

		For (i, row) {
			For (j, col){
				if (scr[i][j] == 'S') {
					scr[i][j] = '.';
					S temp;
					temp.r = i; temp.c = j; temp.state = 0;
					q.push(temp);
				}
				else if (scr[i][j] == '<') {
					int ind = 0;
					setLaser(ind++, i, j, 0, -1);
					setLaser(ind++, i, j, -1, 0);
					setLaser(ind++, i, j, 0, 1);
					setLaser(ind++, i, j, 1, 0);
				}
				else if (scr[i][j] == '^') {
					int ind = 0;
					setLaser(ind++, i, j, -1, 0);
					setLaser(ind++, i, j, 0, 1);
					setLaser(ind++, i, j, 1, 0);
					setLaser(ind++, i, j, 0, -1);
				}
				else if (scr[i][j] == '>') {
					int ind = 0;
					setLaser(ind++, i, j, 0, 1);
					setLaser(ind++, i, j, 1, 0);
					setLaser(ind++, i, j, 0, -1);
					setLaser(ind++, i, j, -1, 0);
				}
				else if (scr[i][j] == 'v') {
					int ind = 0;
					setLaser(ind++, i, j, 1, 0);
					setLaser(ind++, i, j, 0, -1);
					setLaser(ind++, i, j, -1, 0);
					setLaser(ind++, i, j, 0, 1);
				}
			}
		}
		
		/*cout << "---------------------------\n";
		For (k, 4) {
			cout << "state: " << k << endl;
			For (i, row) {
				For (j, col) cout << laser[k][i][j];
				cout << endl;
			}
		}
		cout << "---------------------------\n";
		*/

		int ans = 0;
		while (!q.empty()){
			S temp = q.front(); q.pop();
			int r = temp.r, c = temp.c, state = temp.state;
			if (r < 0 || r >= row || c < 0 || c >= col) continue;
			if (state != 0 && laser[state % 4][r][c]) continue;
			if (scr[r][c] == 'G') {
				ans = state;
				break;
			}
			if (scr[r][c] != '.') continue;

			if (visited[state % 4][r][c]) continue;
			visited[state % 4][r][c] = true;

			temp.state = state + 1;
			temp.r = r-1; temp.c = c; q.push(temp); 
			temp.r = r+1; temp.c = c; q.push(temp);
			temp.r = r; temp.c = c-1; q.push(temp);
			temp.r = r; temp.c = c+1; q.push(temp);
		}

		cout << "Case #" << tc << ": ";
		if (ans == 0) cout << "impossible\n";
		else cout << ans << endl;
	}
	
	return 0;
}	 
/*
5
2 5
##^##
S...G

*/
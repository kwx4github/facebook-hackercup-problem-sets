#pragma comment(linker, ”/STACK:10000000“)

#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long ll;
#define F0(i,n) for (int i = 0; i < n; i++)
#define F1(i,n) for (int i = 1; i <= n; i++)
#define CL(a,x) memset(x, a, sizeof(x));
#define SZ(x) ((int)x.size())
typedef pair<int,int> pii;
const double eps = 1e-10;
const int inf = 1000000009;
const int MOD = 1000000007;
int C[1005][1005]; void comb() { for (int i = 0; i <= 1000; i++) { C[i][0] = C[i][i] = 1; for (int j = 1; j < i; j++) { C[i][j] = (C[i-1][j] + C[i-1][j-1]) % MOD; } } }
ll gcd(ll x, ll y) { return y ? gcd (y,x%y) : x; }

int i, j, k, m, n, l, sx, sy, gx, gy;
ll ans;
char s[1000][1000];
bool dead[4][1000][1000];
const int dx[]={-1,0,1,0};
const int dy[]={0,1,0,-1};

typedef pair< pair<int,int>, int > state;
int d[4][1000][1000];

bool free(int x, int y) {
    return x >= 0 && x < m && y >= 0 && y < n && (s[x][y] == 'S' || s[x][y] == 'G' || s[x][y] == '.');
}

int main() {
    freopen("x.in", "r", stdin);
    freopen("c.txt", "w", stdout);

    int tn; cin >> tn; F1(tt,tn) {
        scanf("%d%d\n", &m, &n);
        F0(i,m) gets(s[i]);

        CL(0,dead);
        F0(i,m) F0(j,n)
        {
            int dir = -1;
            switch (s[i][j])
            {
            case 'S': sx = i; sy = j; break;
            case 'G': gx = i; gy = j; break;
            case '^': dir = 0; break;
            case '>': dir = 1; break;
            case 'v': dir = 2; break;
            case '<': dir = 3; break;
            }
            if (dir != -1)
            {
                F0(k,4) {
                    int x = i, y = j;
                    while (1) {
                        dead[k][x][y] = true;
                        //cout << k << " " << x << " " << y << endl;
                        x += dx[dir];
                        y += dy[dir];
                        if (!free(x,y)) break;
                    }
                    dir = (dir + 1) % 4;
                }
            }
        }
        CL(-1,d);
        d[0][sx][sy] = 0;
        queue<state> Q;
        Q.push({{sx, sy}, 0});
        int ans = -1;
        while (!Q.empty()) {
            int x = Q.front().first.first, y = Q.front().first.second, dir = Q.front().second, dist = d[dir][x][y];
            //cout << "=" << x << " " << y << " " << dir << endl;
            Q.pop();
            if (x == gx && y == gy) {
                ans = dist;
                break;
            }
            F0(k,4) {
                int xx = x + dx[k], yy = y + dy[k], dd = (dir + 1) % 4;
                if (!free(xx,yy) || dead[dd][xx][yy]) continue;
                if (d[dd][xx][yy] != -1) continue;

                d[dd][xx][yy] = dist + 1;
                Q.push({{xx, yy}, dd});
            }
        }

        printf("Case #%d: ", tt);
        if (ans == -1) cout << "Impossible"; else cout << ans;
        printf("\n");
    }

    return 0;
}

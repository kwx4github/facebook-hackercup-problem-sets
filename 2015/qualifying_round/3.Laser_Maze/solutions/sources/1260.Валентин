//#pragma comment(linker, "/STACK:512000000")
#pragma comment(linker, "/STACK:5000000000")
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <cassert>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <functional>
#include <bitset>
#include <stack>
#include <cfloat>
#include <ctime>
#include <queue>
#include <deque>
#include <numeric>
#include <memory.h>

#define PI 3.14159265358979323846
#define ull unsigned long long int
#define ll long long int
#define EPS 1e-9
#define pb push_back
#define EOS(c) (c != EOF && c != '\0' && c != '\n' && c != ' ')
#define oo 1000000005
#define ALL(v) v.begin(), v.end()
#define mp make_pair
#define sqr(a) (a) * (a)
#define traktorista 300
int size;
typedef double dbl;

using namespace std;

#define FILES "sort"
//#define OUT "true"

template<class telem>telem GCD(telem a, telem b)
{
	return b ? GCD(b, a % b) : a;
}

template<class telem>telem LCM(telem a, telem b)
{
	return a / GCD(a, b) * b;
}

template <class telem> istream& operator >> (istream& cin, pair<telem, telem>& in)
{
	cin >> in.first >> in.second;
	return cin;
}

template <class telem> ostream& operator << (ostream& cout, pair<telem, telem> out)
{
	cout << out.first << ' ' << out.second;
	return cout;
}

template <class telem> istream& operator >> (istream& cin, vector<telem>& in)
{
	in.resize(size);

	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

template <class telem> ostream& operator << (ostream& cout, vector<telem> out)
{
	size = out.size();

	for(int i = 0; i < size; i++)
	{
		cout << out[i] << ' ';
	}

	return cout;
}

template <class telem> istream& operator >> (istream& cin, telem* in)
{
	for(int i = 0; i < size; i++)
	{
		cin >> in[i];
	}

	return cin;
}

/*template <class telem> ostream& operator << (ostream& cout, telem* out)
{
for(int i = 0; i < size; i++)
{
cout << out[i] << ' ';
}

return cout;
}*/

struct position
{
	int i, j, k, d;

	position(){};

	position(int i, int j, int k, int d):i(i), j(j), k(k), d(d){};
};

int T;
int n, m;
string maze[150];
int dp[150][150][4];
set<pair<int, int> > bad[4];
map<char, char> nxt;
map<char, int> type;
int di[] = {-1, 0, 1, 0};
int dj[] = {0, 1, 0, -1};
string ans;

bool ok(int i, int j)
{
	return i >= 0 && i < n && j >= 0 && j < m;
}

void go(int i, int j, int k)
{
	int tp = type[maze[i][j]];

	int ni = i, nj = j;

	while(0==0)
	{
		ni += di[tp];
		nj += dj[tp];

		if(!ok(ni, nj))
			break;

		if(maze[ni][nj] != '.')
		{
			break;
		}

		bad[k].insert(make_pair(ni, nj));
	}
}

int main()
{

#ifndef ONLINE_JUDGE
#ifdef OUT
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout); 
#endif

#ifdef FILES
	freopen(FILES".in", "r", stdin);
	freopen(FILES".out", "w", stdout); 
#endif
#endif

	//ios_base::sync_with_stdio(false);
	srand(time(NULL));
	time_t start = clock();

	cin >> T;

	nxt['^'] = '>';
	nxt['>'] = 'v';
	nxt['v'] = '<';
	nxt['<'] = '^';

	type['^'] = 0;
	type['>'] = 1;
	type['v'] = 2;
	type['<'] = 3;

	for(int t = 1; t <= T; t++)
	{		
		pair<int, int> st, en;

		cin >> n >> m;

		for(int i = 0; i < n; i++)
		{
			cin >> maze[i];

			for(int j = 0; j < m; j++)
			{
				if(maze[i][j] == 'S')
				{
					st = make_pair(i, j);
					maze[i][j] = '.';
				}
				if(maze[i][j] == 'G')
				{
					en = make_pair(i, j);
					maze[i][j] = '.';
				}
			}
		}

		for(int i = 0; i < 4; i++)
			bad[i].clear();

		for(int k = 0; k < 4; k++)
		{
			for(int i = 0; i < n; i++)
			{
				for(int j = 0; j < m; j++)
				{
					if(maze[i][j] != '#' && maze[i][j] != '.')
					{
						go(i, j, k);						
						maze[i][j] = nxt[maze[i][j]];
					}
				}
			}
		}

		for(int i = 0; i < n; i++)
		{
			for(int j = 0; j < m; j++)
			{
				for(int k = 0; k < 4; k++)
				{
					dp[i][j][k] = oo;
				}
			}
		}

		dp[st.first][st.second][0] = 0;

		position tmp(st.first, st.second, 0, 0);

		queue<position> q;
		q.push(tmp);

		set<pair<int, int> > gd;

		gd.insert(mp(0, 0));
		gd.insert(mp(0, 1));
		gd.insert(mp(1, 1));
		gd.insert(mp(1, 2));
		gd.insert(mp(1, 3));
		gd.insert(mp(0, 0));
		gd.insert(mp(0, 0));
		gd.insert(mp(0, 0));

		while(!q.empty())
		{
			tmp = q.front();
			q.pop();

			int i = tmp.i;
			int j = tmp.j;
			int k = tmp.k;
			int d = tmp.d;

			if(i == 1 && j == 3)
				int xr = 0;

			int nk = (k + 1) % 4;
			if(d != dp[i][j][k])
				continue;

			for(int z = 0; z < 4; z++)
			{
				int ni = i + di[z];
				int nj = j + dj[z];

				if(!ok(ni, nj))
					continue;

				if(maze[ni][nj] != '.')
					continue;

				if(bad[nk].find(make_pair(ni, nj)) != bad[nk].end())
					continue;

				if(d + 1 < dp[ni][nj][nk])
				{
					dp[ni][nj][nk] = d + 1;
					q.push(position(ni, nj, nk, d + 1));
				}
			}
		}
		
		int d = oo;

		for(int i = 0; i < 4; i++)
		{
			d = min(d, dp[en.first][en.second][i]);
		}

		if(d == oo)
		{
			ans = ": impossible\n";
		}
		else
		{
			ans = ": " + to_string((ll)d) + '\n';
		}

		cout << "Case #" << t << ans;
	}

#ifndef ONLINE_JUDGE
	fprintf(stderr, "\n%0.3lf\n", (clock() - start) * 1.0 / CLOCKS_PER_SEC);
#endif

	return 0;
}
#include<bits/stdc++.h>
using namespace std;
struct tri{int x,y,s;};
int main()
{
    int t,var=1;
    cin>>t;
    while(var<=t)
    {
        tri init,fin;
        int m,n,i,j,k;
        cin>>m>>n;
        char maze[100][100];
          bool rightTime[m][n][4];
        for(i=0;i<m;i++)
            for(j=0;j<n;j++)
            rightTime[i][j][0]= rightTime[i][j][1]= rightTime[i][j][2]= rightTime[i][j][3]=true;
        for(i=0;i<m;i++)
          { for(j=0;j<n;j++)
            {cin>>maze[i][j] ;
            if(maze[i][j]=='S')
                {init.x=i;init.y=j;init.s=0;
                 //cout<<"hi";
                 }
                if(maze[i][j]=='G')
                {
                   fin.x=i;fin.y=j;fin.s=0;
                }
          }
          }
        for(i=0;i<m;i++)
            for(j=0;j<n;j++)
        {
            int c=0;
            switch(maze[i][j])
            {
                case '^': for(c=j-1;c>=0&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c--)
                               rightTime[i][c][3]=false;
                               for(c=i-1;c>=0&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c--)
                               rightTime[c][j][0]=false;
                               for(c=j+1;c<n&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c++)
                               rightTime[i][c][1]=false;
                               for(c=i+1;c<m&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c++)
                               rightTime[c][j][2]=false;
                               break;
                case '>': for(c=j-1;c>=0&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c--)
                               rightTime[i][c][2]=false;
                               for(c=i-1;c>=0&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c--)
                               rightTime[c][j][3]=false;
                               for(c=j+1;c<n&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c++)
                               rightTime[i][c][0]=false;
                               for(c=i+1;c<m&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c++)
                               rightTime[c][j][1]=false;
                               break;
              case 'v': for(c=j-1;c>=0&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c--)
                               rightTime[i][c][1]=false;
                               for(c=i-1;c>=0&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c--)
                               rightTime[c][j][2]=false;
                               for(c=j+1;c<n&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c++)
                               rightTime[i][c][3]=false;
                               for(c=i+1;c<m&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c++)
                               rightTime[c][j][0]=false;
                               break;
             case '<': for(c=j-1;c>=0&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c--)
                               rightTime[i][c][0]=false;
                               for(c=i-1;c>=0&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c--)
                               rightTime[c][j][1]=false;
                               for(c=j+1;c<n&&(maze[i][c]=='.'||maze[i][c]=='S'||maze[i][c]=='G');c++)
                               rightTime[i][c][2]=false;
                               for(c=i+1;c<m&&(maze[c][j]=='.'||maze[c][j]=='S'||maze[c][j]=='G');c++)
                               rightTime[c][j][3]=false;
                               break;
                    default : break;

            }
        }
        for(i=0;i<m;i++)
            for(j=0;j<n;j++)
            {}//cout<<rightTime[i][j][0]<<","<<rightTime[i][j][1]<<","<<rightTime[i][j][2]<<","<<rightTime[i][j][3]<<endl;
        tri u;
        //cout<<init.x<<"   "<<init.y<<"   "<<init.s<<endl;
            bool visit[m][n][4];
            for(i=0;i<m;i++)
            for(j=0;j<n;j++)
                visit[i][j][0]=visit[i][j][1]=visit[i][j][2]=visit[i][j][3]=false;
            int d[m][n][4];
            tri par[m][n][4];
           list<tri> q;
           //cout<<"hello";
           d[init.x][init.y][init.s]=0;
           //cout<<"hello";
           visit[init.x][init.y][init.s]=true;
           par[init.x][init.y][init.s].x=-1;
           par[init.x][init.y][init.s].y=-1;
           par[init.x][init.y][init.s].s=-1;
           q.push_back(init);
           while(!q.empty())
    {
        u=q.front();
        q.pop_front();
        int lx=u.x,ly=u.y,ls=u.s;
        if(lx&&(maze[lx-1][ly]=='.'||maze[lx-1][ly]=='S'||maze[lx-1][ly]=='G')&&(visit[lx-1][ly][(ls+1)%4]==false)&&rightTime[lx-1][ly][(ls+1)%4])
        {
           d[lx-1][ly][(ls+1)%4]=d[lx][ly][ls]+1;
               visit[lx-1][ly][(ls+1)%4]=true;
               par[lx-1][ly][(ls+1)%4]=u;
               tri v;
               v.x=lx-1;
               v.y=ly;
               v.s=(ls+1)%4;
               q.push_back(v);
              //cout<<"v is ("<<v.x<<" "<<v.y<<" "<<v.s<<") its parent is ("<<par[v.x][v.y][v.s].x<<" "<<par[v.x][v.y][v.s].y<<" "<<par[v.x][v.y][v.s].s<<") distance is "<<d[lx-1][ly][(ls+1)%4]<<endl;
              }
      if((m-lx-1)&&(maze[lx+1][ly]=='.'||maze[lx+1][ly]=='S'||maze[lx+1][ly]=='G')&&(visit[lx+1][ly][(ls+1)%4]==false)&&rightTime[lx+1][ly][(ls+1)%4])
        {
           d[lx+1][ly][(ls+1)%4]=d[lx][ly][ls]+1;
               visit[lx+1][ly][(ls+1)%4]=true;
               par[lx+1][ly][(ls+1)%4]=u;
               tri v;
               v.x=lx+1;
               v.y=ly;
               v.s=(ls+1)%4;
               q.push_back(v);
       //cout<<"v is ("<<v.x<<" "<<v.y<<" "<<v.s<<") its parent is ("<<par[v.x][v.y][v.s].x<<" "<<par[v.x][v.y][v.s].y<<" "<<par[v.x][v.y][v.s].s<<") distance is "<<d[lx+1][ly][(ls+1)%4]<<endl;
              ////cout<<"v is "<<v<<" its parent is "<<par[v-1]<<" distance is "<<dis[v-1]<<endl;
        }
        if((n-ly-1)&&(maze[lx][ly+1]=='.'||maze[lx][ly+1]=='S'||maze[lx][ly+1]=='G')&&(visit[lx][ly+1][(ls+1)%4]==false)&&rightTime[lx][ly+1][(ls+1)%4])
        {
           d[lx][ly+1][(ls+1)%4]=d[lx][ly][ls]+1;
               visit[lx][ly+1][(ls+1)%4]=true;
               par[lx][ly+1][(ls+1)%4]=u;
               tri v;
               v.x=lx;
               v.y=ly+1;
               v.s=(ls+1)%4;
               q.push_back(v);
               //cout<<"v is ("<<v.x<<" "<<v.y<<" "<<v.s<<") its parent is ("<<par[v.x][v.y][v.s].x<<" "<<par[v.x][v.y][v.s].y<<" "<<par[v.x][v.y][v.s].s<<") distance is "<<d[lx][ly+1][(ls+1)%4]<<endl;
              ////cout<<"v is "<<v<<" its parent is "<<par[v-1]<<" distance is "<<dis[v-1]<<endl;
        }
        if(ly&&(maze[lx][ly-1]=='.'||maze[lx][ly-1]=='S'||maze[lx][ly-1]=='G')&&(visit[lx][ly-1][(ls+1)%4]==false)&&rightTime[lx][ly-1][(ls+1)%4])
        {
           d[lx][ly-1][(ls+1)%4]=d[lx][ly][ls]+1;
               visit[lx][ly-1][(ls+1)%4]=true;
               par[lx][ly-1][(ls+1)%4]=u;
               tri v;
               v.x=lx;
               v.y=ly-1;
               v.s=(ls+1)%4;
               q.push_back(v);
                 //cout<<"v is ("<<v.x<<" "<<v.y<<" "<<v.s<<") its parent is ("<<par[v.x][v.y][v.s].x<<" "<<par[v.x][v.y][v.s].y<<" "<<par[v.x][v.y][v.s].s<<") distance is "<<d[lx][ly-1][(ls+1)%4]<<endl;
              ////cout<<"v is "<<v<<" its parent is "<<par[v-1]<<" distance is "<<dis[v-1]<<endl;
              }

    }
    long long mini=10000000000000;
    long long t=mini;
    for(i=0;i<4;i++)
    {
        if(visit[fin.x][fin.y][i]&&(d[fin.x][fin.y][i]<mini))
        mini=d[fin.x][fin.y][i];

    }
    cout<<"Case #"<<var<<": ";
    if(mini!=t)
    cout<<mini<<endl;
    else
        cout<<"impossible\n";

var++;
    }
}

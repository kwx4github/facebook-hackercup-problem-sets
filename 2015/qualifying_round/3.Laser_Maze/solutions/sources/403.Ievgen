#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>
#include <bitset>
#include <cmath>
#include <ctime>
#pragma comment(linker, "/STACK:256000000")

using namespace std;

const int maxN = 110;

char a[maxN][maxN];
int gkill[maxN][maxN][4];
int used[maxN][maxN][4];

int get_dir(char c) {
	if (c == '^') {
		return 0;
	}
	if (c == '>') {
		return 1;
	}
	if (c == 'v') {
		return 2;
	}
	if (c == '<') {
		return 3;
	}
	return -1;
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
int n, m;
string mv = "^>v<";

pair<pair<int, int>, int> get(int a, int b, int c) {
	return make_pair(make_pair(a, b) ,c);
}

bool is_in(int x, int y, int dir) {
	return x >= 0 && x < n && y >= 0 && y < m && (a[x][y] == '.' || a[x][y] == 'S' || a[x][y] == 'G') && !gkill[x][y][dir];
}

void get_kill() {
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < n; ++j) {
			for (int k = 0; k < m; ++k) {
				if (get_dir(a[j][k]) != -1) {
					int cdir = get_dir(a[j][k]);
					int ndir = (cdir + i) % 4;
					for (int len = 1; len <= max(n, m); ++len) {
						int nx = j + len * dx[ndir];
						int ny = k + len * dy[ndir];
						if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
							if (get_dir(a[nx][ny]) != -1) {
								break;
							}
							if (a[nx][ny] == '#') {
								break;
							}
							gkill[nx][ny][i] = 1;
						} else {
							break;
						}
					}
				}
			}
		}
	}
}

void solve(int tnum) {
	printf("Case #%d: ", tnum);

	scanf("%d%d", &n, &m);

	int sx = -1, sy = -1;
	int fx = -1, fy = -1;

	for (int i = 0; i < n; ++i) {
		string s;
		cin >> s;
		for (int j = 0; j < m; ++j) {
			a[i][j] = s[j];
			if (s[j] == 'S') {
				sx = i;
				sy = j;
			}
			if (s[j] == 'G') {
				fx = i;
				fy = j;
			}
		}
	}

	memset(gkill, 0, sizeof(gkill));
	get_kill();

	queue<pair<pair<int, int>, int> > q;

	q.push(get(sx, sy, 0));

	memset(used, -1, sizeof(used));
	used[sx][sy][0] = 0;

	int res = 1000000;

	while (!q.empty()) {
		pair<pair<int, int>, int> cur = q.front();
		q.pop();

		int cx = cur.first.first, cy = cur.first.second;
		int d = used[cx][cy][cur.second];
		if (a[cx][cy] == 'G') {
			res = min(res, d);
		}
		int dir = (cur.second + 1) % 4;

		for (int i = 0; i < 4; ++i) {
			int tx = cx + dx[i];
			int ty = cy + dy[i];
			if (is_in(tx, ty, dir) && used[tx][ty][dir] == -1) {
				used[tx][ty][dir] = d + 1;
				q.push(get(tx, ty, dir));
			}
		}
	}

	if (res == 1000000) {
		cout << "impossible" << endl;
	} else {
		cout << res << endl;
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("lasermaze.txt", "w", stdout);

	int t;
	cin >> t;

	for (int i = 0; i < t; ++i) {
		solve(i + 1);
	}

	return 0;
}

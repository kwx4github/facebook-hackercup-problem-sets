import codejam as gcj
import codejam.iterators as itr
import codejam.datastructures as dst

def is_safe(x, y, n):
    if grid[y][x] not in 'SG.':
        return False

    for Tx, Ty, d in turrets:
        d = ('<^>v'.index(d) + n) % 4           # Get current direction
        d = '<^>v'[d]

        if d == '<' and x < Tx and y == Ty:
            if all(c in 'GS.' for c in [grid[y][i] for i in range(x, Tx)]):
                return False
        elif d == '>' and x > Tx and y == Ty:
            if all(c in 'GS.' for c in [grid[y][i] for i in range(Tx + 1, x + 1)]):
                return False
        elif d == '^' and x == Tx and y < Ty:
            if all(c in 'GS.' for c in [grid[j][x] for j in range(y, Ty)]):
                return False
        elif d == 'v' and x == Tx and y > Ty:
            if all(c in 'GS.' for c in [grid[j][x] for j in range(y + 1, Ty + 1)]):
                return False

    return True

T = gcj.read_input('i')
for t in range(T):
    M, N, grid = gcj.read_input('i-> i', 's')
    turrets, min_steps = [], dst.defaultdict(lambda: 10**10)
    
    for y, row in enumerate(grid):
        for x, c in enumerate(row):
            if c == 'S':    Sx, Sy = x, y
            if c == 'G':    Gx, Gy = x, y
            if c in '<^>v': turrets += [(x, y, c)]

    if is_safe(Sx, Sy, 0) or True:
        min_steps[Sx, Sy, 0] = 0
    
    improving = True
    while improving:
        improving = False
        for x, y, n in itr.multirange(N, M, 4):
            if is_safe(x, y, n):
                for i, j in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):
                    if min_steps[x, y, n] > min_steps[i, j, (n - 1) % 4] + 1:
                        improving = True
                        min_steps[x, y, n] = min_steps[i, j, (n - 1) % 4] + 1

    answer = min(min_steps[Gx, Gy, n] for n in range(4))
    print 'Case #%i:' % (t + 1), answer if answer < 10**10 else 'impossible'
#include <string>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <cstdio>
#include <cmath>
#include <iomanip>
#include <deque>
#include <ctime>
#include <cstring>

//#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sd second
#define pb push_back
#define mp make_pair

#define endl '\n'

#define forr(i, n) for(ll (i) = 0LL; (i) < (n); (i)++)
#define mp3(a, b, c) mp(a, mp(b, c))

typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<ll, pll> plll;
typedef vector < vector < double > > vvd;
typedef vector < double > vd;
typedef vector < pair < double, double> > vdd;
typedef vector < vector < long long > > vvl;
typedef vector < long long > vl;
typedef vector < pll > vll;

int INT_MAX_VAL = (int) 1e20;
int INT_MIN_VAL = (int) -1e20;
ll LONG_MAX_VAL = (ll) 1e20;
ll LONG_MIN_VAL = (ll) -1e20;

#define MAXN 105

char field[MAXN][MAXN];
bool used[MAXN][MAXN][4];

int n, m;

void fill_tur(int i, int j, int p)
{
	forr(k, 4) used[i][j][k] = true;
	int z;
	z = i-1;
	while(z >= 0 && field[z][j] == '.') {
		used[z][j][(p + 0)%4] = true;
		z--;
	}

	z = j+1;
	while(z < m && field[i][z] == '.') {
		used[i][z][(p + 1)%4] = true;
		z++;
	}

	z = i+1;
	while(z < n && field[z][j] == '.') {
		used[z][j][(p + 2)%4] = true;
		z++;
	}
	
	z = j-1;
	while(z >= 0 && field[i][z] == '.') {
		used[i][z][(p + 3)%4] = true;
		z--;
	}
}

int main()
{
	ll T; cin >> T;
	forr(t, T) {
		memset(used, 0, sizeof(bool) * MAXN * MAXN * 4);
		cin >> n >> m;
		forr(i, n) {
			cin >> field[i];
//			cout << field[i] << endl;
		}

		

		pll S, G;

		forr(i, n) forr(j, m) {
			switch(field[i][j]) {
				case 'S':
					S = mp(i, j);
					field[i][j] = '.';
					break;
				case 'G':
					G = mp(i, j);
					field[i][j] = '.';
					break;
				default:
					break;
			}
		}


		forr(i, n) forr(j, m) {
			switch(field[i][j]) {
				case '#':
					forr(k, 4) used[i][j][k] = true;
					break;
				case '^':
					fill_tur(i, j, 0);
					break;
				case '>':
					fill_tur(i, j, 3);
					break;
				case 'v':
					fill_tur(i, j, 2);
					break;
				case '<':
					fill_tur(i, j, 1);
					break;
				default:
					break;
			}
		}
/*
		forr(k, 4) {
			forr(i, n) {
				forr(j, m) {
					cout << used[i][j][k];
				}
				cout << endl;
			}
			cout << endl;
		}
*/

		deque<plll> q;
		q.pb(mp(0, S));

		ll res = LONG_MAX_VAL;

		while(!q.empty()) {
			plll g = q.front();
			q.pop_front();

			if(g.sd == G) {
				res = min(res, g.fr);
			}

			ll st = g.fr;
			int i = g.sd.fr;
			int j = g.sd.sd;
			int nxt = (st+1)%4;
			if(i > 0     && !used[i - 1][j][nxt]) {
				used[i - 1][j][nxt] = true;
				q.push_back(mp3(st+1, i-1, j));
			}

			if(j > 0     && !used[i][j - 1][nxt]) {
				used[i][j - 1][nxt] = true;
				q.push_back(mp3(st+1, i, j-1));
			}

			if(i < n - 1 && !used[i + 1][j][nxt]) {
				used[i + 1][j][nxt] = true;
				q.push_back(mp3(st+1, i+1, j));
			}

			if(j < m - 1 && !used[i][j + 1][nxt]) {
				used[i][j + 1][nxt] = true;
				q.push_back(mp3(st+1, i, j+1));
			}
		}

		if(res != LONG_MAX_VAL) {
			cout << "Case #" << t + 1 << ": " << res << endl;
		} else {
			cout << "Case #" << t + 1 << ": " << "impossible" << endl;
		}
	}

	return 0;
}

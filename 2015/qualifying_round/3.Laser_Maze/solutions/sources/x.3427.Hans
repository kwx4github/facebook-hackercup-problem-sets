#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) begin(c), end(c)
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for(auto i = begin(c); i != end(c); i++)
#define mp make_pair
#define pb push_back
#define has(c,i) ((c).find(i) != (c).end())
#define DBG(...) ({ if(1) fprintf(stderr, __VA_ARGS__); })
#define DBGDO(X) ({ if(1) cerr << "DBGDO: " << (#X) << " = " << (X) << endl; })

const int maxRC = 128;

int TC, R, C;
int sr, sc;

string grid[4][maxRC];

bool valid(int r, int c) {
	return r >= 0 && c >= 0 && r < R && c < C;
}

int mr[4] = {-1, 0, 0, 1};
int mc[4] = { 0,-1, 1, 0};

int main() {
	ios::sync_with_stdio(false);

	cin >> TC;
	FOR(tc, 1, TC+1) {
		cin >> R >> C;
		FOR(r,0,R) {
			cin >> grid[0][r];
			FOR(c,0,C) if (grid[0][r][c] == 'S') {
				sr = r;
				sc = c;
				grid[0][r][c] = '.';
			}
		}

		FOR(x,0,4) FOR(r,0,R) {
			if (x) FOR(c,0,C) {
				char t = grid[x][r][c];
				switch (t) {
					case '^': t = '>'; break;
					case '>': t = 'v'; break;
					case 'v': t = '<'; break;
					case '<': t = '^'; break;
				}
				grid[x][r][c] = t;
			}
			if (x != 3)
				grid[x+1][r] = grid[x][r];
		}

		FOR(x,0,4) FOR(r,0,R) FOR(c,0,C) {
			int dr = 0, dc = 0;
			switch (grid[x][r][c]) {
				case '^': dr = -1; break;
				case '>': dc = +1; break;
				case 'v': dr = +1; break;
				case '<': dc = -1; break;
			}
			if (!dr && !dc) continue;
			int rr = r+dr, cc = c+dc;
			while (valid(rr, cc)) {
				char &t = grid[x][rr][cc];
				if (t != '.' && t != 'G') break;
				t = '*';
				rr += dr;
				cc += dc;
			}
		}

		bool found = false;
		int steps = 0;
		queue<pii> todo;
		todo.push({sr, sc});

		for (; !found && !todo.empty(); steps++) {
			queue<pii> nxt;
			int x = steps % 4;
			int y = (x+1) % 4;
			while (!found && !todo.empty()) {
				int r, c;
				tie(r, c) = todo.front(); todo.pop();
				FOR(m,0,4) {
					int nr = r + mr[m], nc = c + mc[m];
					if (!valid(nr, nc)) continue;

					if (grid[y][nr][nc] == 'G') {
						found = true;
						break;
					}

					if (grid[y][nr][nc] == '.') {
						grid[y][nr][nc] = 'x';
						nxt.push({nr, nc});
					}
				}
			}

			todo = nxt;
		}
		
#if 0
		FOR(x,0,4) {
			DBGDO(x);
			FOR(r,0,R) DBG("  %s\n", grid[x][r].c_str());
		}
#endif

		printf("Case #%d: ", tc);
		if (!found) printf("impossible\n");
		else        printf("%d\n", steps);
	}
}

#include <bits/stdc++.h>

using namespace std;

int dx[] = {-1, 0, 0, +1};
int dy[] = {0, -1, +1, 0};

bool valid(int i, int j, int n, int m){
	if(i>=0 && j>=0 && i<n && j<m)
		return true;
	return false;
}

class Graph{
	int V;
	char ***element;
public:
	Graph(int V, int m, int n);
	void addElement(char c, int i, int j, int n);
	int BFS(int src, int dest, int r, int c);
};

Graph::Graph(int V, int m, int n){
	this->V = V;
	element = new char**[4];
	for(int i=0 ; i<4 ; i++){
		element[i] = new char*[m];
		for(int j=0 ; j<m ; j++){
			element[i][j] = new char[n];
		}
	}
}

void Graph::addElement(char c, int i, int j, int n){
	element[n][i][j] = c;
}

int Graph::BFS(int src, int dest, int r, int c){
	int n = 4;
	bool visited[n][r][c];
	int dist[n][r][c];
	for(int i=0 ; i<n ; i++){
		for(int j=0 ; j<r ; j++){
			for(int k=0 ; k<c ; k++){
				visited[i][j][k] = false;
				dist[i][j][k] = -1;
			}
		}
	}

	pair<int, int> s, temp;
	int l=0, d1, d2;
	d1 = dest / c;
	d2 = dest % c;
	s.first = src / c;
	s.second = src % c;
	visited[l][s.first][s.second] = true;
	dist[l][s.first][s.second] = 0;
	list<pair<int, int> > queue;
	queue.push_back(s);

	list<int> level;
	level.push_back(l);

	int x, y;
	while(!queue.empty()){
		s = queue.front();
		queue.pop_front();

		l = level.front();
		level.pop_front();

		for(int i=0 ; i<4 ; i++){
			x = s.first + dx[i];
			y = s.second + dy[i];
			if(valid(x, y, r, c)){
				if(!visited[(l+1)%n][x][y] && element[(l+1)%n][x][y] != '#'){
					visited[(l+1)%n][x][y] = true;
					temp.first = x;
					temp.second = y;
					queue.push_back(temp);
					level.push_back((l+1)%n);
					dist[(l+1)%n][x][y] = dist[l%n][s.first][s.second] + 1;

					if(x==d1 && y==d2)
						return dist[(l+1)%n][x][y];
				}
			}
		}
	}

	return -1;
}

int main(){
	int t, l=1;
	scanf("%d", &t);

	while(t--){
		int m, n;
		scanf("%d %d", &m, &n);

		string s[m], temp[4][m];
		for(int i=0 ; i<m ; i++){
			cin>>s[i];
			for(int k=0 ; k<4 ; k++)
				temp[k][i] = s[i];
		}

		int flag;
		for(int k=0 ; k<4 ; k++){
			for(int i=0 ; i<m ; i++){
				for(int j=0 ; j<n ; j++){
					if(s[i][j] == '#' || s[i][j] == '.')
						continue;
					flag = -1;
					switch(s[i][j]){
						case '>':	flag = k;
								 	break;
						case 'v':	flag = (k+1)%4;
									break;
						case '<':	flag = (k+2)%4;
									break;
						case '^':	flag = (k+3)%4;
									break;
					}
					if(flag == 0){
						temp[k][i][j] = '#';
						for(int a = j+1 ; a<n ; a++){
							if(s[i][a] == '#' || s[i][a] == '>' || s[i][a] == '<' || s[i][a] == '^' || s[i][a] == 'v')
								break; 
							temp[k][i][a] = '#';
						}
					} else if(flag == 1){
						temp[k][i][j] = '#';
						for(int a = i+1 ; a<m ; a++){
							if(s[a][j] == '#' || s[a][j] == '>' || s[a][j] == '<' || s[a][j] == '^' || s[a][j] == 'v')
								break; 
							temp[k][a][j] = '#';
						}
					} else if(flag == 2){
						temp[k][i][j] = '#';
						for(int a = j-1 ; a>=0 ; a--){
							if(s[i][a] == '#' || s[i][a] == '>' || s[i][a] == '<' || s[i][a] == '^' || s[i][a] == 'v')
								break; 
							temp[k][i][a] = '#';
						}
					} else if(flag == 3){
						temp[k][i][j] = '#';
						for(int a = i-1 ; a>=0 ; a--){
							if(s[a][j] == '#' || s[a][j] == '>' || s[a][j] == '<' || s[a][j] == '^' || s[a][j] == 'v')
								break; 
							temp[k][a][j] = '#';
						}
					}
				}
			}
		}

		Graph graph(m*n, m, n);
		int index, x, y, src, dest;
		for(int k=0 ; k<4 ; k++){
			for(int i=0 ; i<m ; i++){
				for(int j=0 ; j<n ; j++){
					index = i * n + j;
					if(s[i][j] == 'S')
						src = index;
					if(s[i][j] == 'G')
						dest = index;
					graph.addElement(temp[k][i][j], i, j, k);
				}
			}
		}

		printf("Case #%d: ", l++);
		int answer = graph.BFS(src, dest, m, n);
		if(answer == -1){
			printf("impossible\n");
		} else {
			printf("%d\n", answer);
		}
	}	

	return 0;
}
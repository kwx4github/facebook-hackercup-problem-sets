#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>

#include <string>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <set>
#include <deque>
#include <utility>
#include <sstream>
#include <queue>
#include <stack>
#include <bitset>

#include <math.h>
#include <iomanip>
#include <algorithm>
#include <limits.h>

#define MP make_pair
#define MT make_tuple
#define PB push_back
#define FI first
#define SE second
#define INPUT "/Users/manuelalejandrovergaradiaz/Documents/Manu/Programation/Programation/Programation/laser_maze.txt"
#define OUTPUT "/Users/manuelalejandrovergaradiaz/Documents/Manu/Programation/Programation/Programation/output"
#define FILE 1

#define MAX 200
#define MAXN 100010
#define INF -1
#define EPS 0.0000001
#define PI acos(-1)
#define sbit(a) a&(-a)
#define gauss(a) a*(a+1)/2
#define Node pair<int, long long>

typedef long long ll;

using namespace std;

const int DX[] = { -1  ,  0  ,  1  ,  0  };
const int DY[] = {  0  ,  1  ,  0  , -1  };

int T, R, C, cases;
pair<int, int> S, E;
char board[MAX][MAX];
bool visited[MAX][MAX][5];

bool can(int x, int y) {
    return x > 0 && x <= R && y > 0 && y <= C && board[x][y] != '#' && board[x][y] != '^' && board[x][y] != '>' && board[x][y] != 'v' && board[x][y] != '<';
}

struct State {
    pair<int, int> F, T[5];
    State() {}
    State(int x, int y) {
        F.FI = x; F.SE = y;
        int k = 0;
        if(board[x][y] == '>') k = 1;
        else if(board[x][y] == 'v') k = 2;
        else if(board[x][y] == '<') k = 3;
        for(int i = 0; i < 4; i++) {
            T[i] = F;
            while(can(T[i].FI+DX[k], T[i].SE+DY[k])) T[i].FI+=DX[k], T[i].SE+=DY[k];
            k = (k+1)%4;
        }
    }
    bool isIn(int x, int y, int m) {
        return min(F.FI, T[m].FI) <= x && x <= max(F.FI, T[m].FI) && min(F.SE, T[m].SE) <= y && y <= max(F.SE, T[m].SE);
    }
};
vector<State> turrent;

bool canMove(int x, int y, int m) {
    bool ret = true;
    for(int i = 0; i < int(turrent.size()); i++)
        ret &= !turrent[i].isIn(x, y, m%4);
    return ret;
}

int bfs() {
    memset(visited, false, sizeof(visited));
    queue< tuple<int, int, int> > Q;
    Q.push(MT(S.FI, S.SE, 0));
    int ans = 99999999;
    while(!Q.empty()) {
        tuple<int, int, int> F = Q.front();
        Q.pop();
        if(E.FI == get<0>(F) && E.SE == get<1>(F)) {
            ans = min(ans, get<2>(F));
            continue;
        }
        if(visited[get<0>(F)][get<1>(F)][(get<2>(F))%4]) continue;
        visited[get<0>(F)][get<1>(F)][(get<2>(F))%4] = true;
        for(int i = 0; i < 4; i++)
            if(can(get<0>(F)+DX[i], get<1>(F)+DY[i]))
                if(canMove(get<0>(F)+DX[i], get<1>(F)+DY[i], get<2>(F)+1))
                    Q.push(MT(get<0>(F)+DX[i], get<1>(F)+DY[i], get<2>(F)+1));
    }
    return (ans == 99999999 ? -1 : ans);
}

int main() {
    
    if(FILE) {
        freopen(INPUT, "r", stdin);
        freopen(OUTPUT, "w", stdout);
    }
    
    cin >> T;
    while(T--) {
        turrent.clear();
        cin >> R >> C;
        for(int i = 1; i <= R; i++) {
            for(int j = 1; j <= C; j++) {
                cin >> board[i][j];
                if(board[i][j] == 'S') S.FI = i, S.SE =j;
                else if(board[i][j] == 'G') E.FI = i, E.SE = j;
                else if(board[i][j] != '#' && board[i][j] != '.') turrent.PB(State(i, j));
            }
        }
        int ans = bfs();
        cout << "Case #" << ++cases << ": ";
        if(ans == -1) cout << "impossible\n";
        else cout << ans << "\n";
    }
    
    return 0;
}
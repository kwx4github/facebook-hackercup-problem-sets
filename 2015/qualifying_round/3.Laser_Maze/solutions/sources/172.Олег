#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <ctime>
#include <string>
using namespace std;

#ifdef LOCAL
	#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
	#define eprintf(...) 42
#endif

const int maxn = 105;
char f[maxn][maxn];
bool empty[4][maxn][maxn];
char l[4] = {'>', 'v', '<', '^'};
int dx[4] = { 0 ,  1 ,  0 , -1 };
int dy[4] = { 1 ,  0 , -1 ,  0 };
int dist[4][maxn][maxn];

int getId(char c)
{
	for (int i = 0; i < 4; i++)
		if (l[i] == c)
			return i;
	return -1;
}

bool inD(int x, int h)
{
	return x >= 0 && x < h;
}

bool inF(int x, int y, int h, int w)
{
	return inD(x, h) && inD(y, w);
}

struct Point
{
	int a, x, y;
	Point() : a(), x(), y() {}
	Point(int _a, int _x, int _y) : a(_a), x(_x), y(_y) {}
	int getD() { return dist[a][x][y]; }
	void setD(int val) { dist[a][x][y] = val; }
};

Point qu[maxn * maxn * 4];

void solve()
{
	int h, w;
	scanf("%d%d", &h, &w);
	for (int i = 0; i < h; i++)
		scanf("%s", f[i] );
	int sx, sy, tx, ty;
	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++)
		{
			if (f[i][j] == 'S')
			{
				sx = i;
				sy = j;
				f[i][j] = '.';
			}
			else if (f[i][j] == 'G')
			{
				tx = i;
				ty = j;
				f[i][j] = '.';
			}
		}
	memset(empty, true, sizeof empty);
	for (int a = 0; a < 4; a++)
	{
		for (int _i = 0; _i < h; _i++)
			for (int _j = 0; _j < w; _j++)
			{
				int i = _i;
				int j = _j;
				if (f[i][j] != '.')
					empty[a][i][j] = false;
				else
					continue;
				int x = getId(f[i][j] );
				if (x == -1)
					continue;
				x += a;
				x %= 4;
				int di = dx[x];
				int dj = dy[x];
				
				i += di;
				j += dj;

				while (inF(i, j, h, w) && f[i][j] == '.')
				{
					empty[a][i][j] = false;
					i += di;
					j += dj;
				}
			}
	}
	
	memset(dist, -1, sizeof dist);
	dist[0][sx][sy] = 0;
	int ql = 0, qr = 0;
	qu[qr++] = Point(0, sx, sy);
	int ans = -1;

	while (ql < qr)
	{
		Point cur = qu[ql++];
		int curd = cur.getD();
		if (cur.x == tx && cur.y == ty)
		{
			ans = curd;
			break;
		}
		for (int d = 0; d < 4; d++)
		{
			int nx = cur.x + dx[d];
			int ny = cur.y + dy[d];
			if (!inF(nx, ny, h, w) || !empty[(curd + 1) % 4][nx][ny] || dist[(curd + 1) % 4][nx][ny] != -1)
				continue;
			Point nxt = Point((curd + 1) % 4, nx, ny);
			nxt.setD(curd + 1);
			qu[qr++] = nxt;
		}
	}
	if (ans == -1)
		printf("impossible");
	else
		printf("%d", ans);
}


int main()
{
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);


	int t;
	scanf("%d", &t);

	for (int i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		solve();
		printf("\n");
	}


	return 0;
}

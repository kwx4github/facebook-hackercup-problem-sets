#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
int m,n;
char tb[133][133];
bool danger[4][133][133],chk[4][133][133];
queue< pair< int,pair<int,int> > > q;
void enqueue(int dist,int x,int y)
{
    if(x<0||x==m||y<0||y==n||danger[dist%4][x][y]||chk[dist%4][x][y])return;
    if(!(tb[x][y]=='S'||tb[x][y]=='G'||tb[x][y]=='.'))return;
    chk[dist%4][x][y]=1;
    q.push(make_pair(dist,make_pair(x,y)));
}
int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int t,ii,jj,i,j,k,l,dx,dy,x,y,dist;
    scanf("%d",&t);
    for(ii=1;ii<=t;ii++)
    {
        scanf("%d %d",&m,&n);
        for(i=0;i<m;i++)
        {
            scanf("%s",tb[i]);
            for(j=0;j<n;j++)
            {
                if(tb[i][j]=='S')
                {
                    x=i;
                    y=j;
                }
            }
        }
        memset(danger,0,sizeof danger);
        memset(chk,0,sizeof chk);
        for(jj=0;jj<4;jj++)
        {
            for(i=0;i<m;i++)
            {
                for(j=0;j<n;j++)
                {
                    dx=dy=0;
                    if(tb[i][j]=='^')dx=-1;
                    else if(tb[i][j]=='>')dy=1;
                    else if(tb[i][j]=='v')dx=1;
                    else if(tb[i][j]=='<')dy=-1;
                    else continue;
                    k=i+dx;
                    l=j+dy;
                    while(0<=k&&k<m&&0<=l&&l<n&&(tb[x][y]=='S'||tb[x][y]=='G'||tb[x][y]=='.'))
                    {
                        danger[jj][k][l]=1;
                        k+=dx;
                        l+=dy;
                    }
                }
            }
            for(i=0;i<m;i++)
            {
                for(j=0;j<n;j++)
                {
                    if(tb[i][j]=='^')tb[i][j]='>';
                    else if(tb[i][j]=='>')tb[i][j]='v';
                    else if(tb[i][j]=='v')tb[i][j]='<';
                    else if(tb[i][j]=='<')tb[i][j]='^';
                }
            }
        }
        danger[0][x][y]=0;
        enqueue(0,x,y);
        while(!q.empty())
        {
            dist=q.front().first;
            x=q.front().second.first;
            y=q.front().second.second;
            if(tb[x][y]=='G')break;
            q.pop();
            enqueue(dist+1,x-1,y);
            enqueue(dist+1,x+1,y);
            enqueue(dist+1,x,y-1);
            enqueue(dist+1,x,y+1);
        }
        printf("Case #%d: ",ii);
        if(!q.empty())
        {
            printf("%d\n",dist);
            while(!q.empty())q.pop();
        }
        else
        {
            printf("impossible\n");
        }
    }
}

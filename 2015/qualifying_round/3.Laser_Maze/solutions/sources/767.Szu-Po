#include <stdio.h>
#include <string.h>
int cas, n, m, stx, sty, edx, edy;
int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}, que[41000][3], pus, pop;
char inp[110][110], fre[4][110][110], vis[4][110][110];
char tur[] = ">v<^";
int inrange(int cr, int cc) {
    return cr >= 0 && cr < n && cc >= 0 && cc < m;
}
int ok(int cr, int cc) {
    return inrange(cr, cc) && (inp[cr][cc] == '.' || inp[cr][cc] == 'S' || inp[cr][cc] == 'G');
}
int main() {
    scanf("%d", &cas);
    for (int iii=0; iii<cas; iii++) {
        scanf("%d%d", &n, &m);
        for (int i=0; i<n; i++) scanf("%s", inp[i]);
        memset(fre, 0, sizeof(fre));
        for (int r=0; r<4; r++) {
            for (int i=0; i<n; i++) {
                for (int j=0; j<m; j++) {
                    if (inp[i][j] == 'S') stx = i, sty = j;
                    if (inp[i][j] == 'G') edx = i, edy = j;
                    if (inp[i][j] == '#') {
                        fre[r][i][j] = 1;
                    } else {
                        for (int t=0; t<4; t++) {
                            if (inp[i][j] == tur[t]) {
                                int dd = (t + r) % 4;
                                int cr = i, cc = j;
                                do {
                                    fre[r][cr][cc] = 1;
                                    cr += dir[dd][0];
                                    cc += dir[dd][1];
                                } while (ok(cr, cc));
                            }
                        }
                    }
                }
            }
        }
        memset(vis, 0, sizeof(vis));
        int ans = -1, stp = 0, ltp = 1;
        que[0][0] = 0;
        que[0][1] = stx;
        que[0][2] = sty;
        pus = 1;
        pop = 0;
        vis[0][stx][sty] = 1;
        while (pop < pus) {
            int r = que[pop][0], i = que[pop][1], j = que[pop][2];
            if (i == edx && j == edy) {
                ans = stp;
                break;
            }
            for (int d=0; d<4; d++) {
                int nr = (r+1)%4, ni = i + dir[d][0], nj = j + dir[d][1];
                if (inrange(ni, nj) && !fre[nr][ni][nj] && !vis[nr][ni][nj]) {
                    vis[nr][ni][nj] = 1;
                    que[pus][0] = nr;
                    que[pus][1] = ni;
                    que[pus][2] = nj;
                    pus++;
                }
            }
            pop ++;
            if (pop == ltp) {
                stp++;
                ltp = pus;
            }
        }
        if (ans == -1) printf("Case #%d: impossible\n", iii+1);
        else printf("Case #%d: %d\n", iii+1, ans);
    }
    return 0;
}
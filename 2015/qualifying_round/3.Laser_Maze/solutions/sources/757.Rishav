/* Author : RISHAV GOYAL */

#include <bits/stdc++.h>

using namespace std;

#define LL long long int
#define UL unsigned long long int

#define imax INT_MAX
#define imin INT_MIN
#define LLmax LLONG_MAX
#define LLmin LLONG_MIN

#define FOR(i,a,b) for(int i= (int)a; i<= (int)b; i++)
#define rep(i,n) for(int i= int(1); i<= (int)n; i++)
#define FORd(i,a,b,d) for(int i=(int)a; i<= (int)b; i+=(int)d)

#define pr() printf("Reached here 1...\n");
#define pr1() printf("Reached here 2...\n");
#define gc getchar_unlocked

#define si(a) scanf("%d",&a);
#define sl(a) scanf("%lld",&a);
#define ss(a) scanf("%s",a);
#define sc(a) scanf("%c",&a);
#define su(a) scanf("%llu",&a);

#define pi(a) printf("%d\n",a);
#define pl(a) printf("%lld\n",a);
#define ps(a) printf("%s\n",a);
#define pu(a) printf("%llu\n",a);

#define arg(a,N) rep(i,N)si(a[i]);

#define CLR(a) memset(a,0,sizeof(a));
#define SET(a) memset(a,-1,sizeof(a));

#define str strlen
#define pb(x) push_back(x)
#define mp make_pair
#define ii pair<int,int>
#define F first
#define S second
#define gcd(a,b) __gcd(a,b)

#define mod int(1e9 +7)
#define MAX int(1e5 + 10)

#define VI vector<int>
#define VL vector<LL>
#define VS vector<string>
#define VC vector<char>


int gcd ( int a, int b ){int c;while(a!= 0){c=a;a=b%a;b=c;}return b;}
LL powmod(LL a,int b,int n){LL rm=1;while (b){if (b % 2) { rm = (rm * a) % n; }a = (a * a) % n;b /= 2;}return rm;}

void sint(int &x)
{
	register int c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void sll(LL &x)
{
	register LL c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

char grid[110][110];
int R,C,dp[110][110][4], Q[2][110 * 110][3], ct[2];
bool Unsafe[110][110][4];

int main()
{
	int T;
	cin >> T;
	rep(tttt,T){
		cout << "Case #"<<tttt<<": ";
	int t = 0;
	SET(dp);
	CLR(ct);
	memset(Unsafe, false, sizeof(Unsafe));

	cin >> R >> C;

	rep(r,R) cin >> grid[r];

	rep(r,R){
		for (int i = 0; i < C; ++i)
		{
			if( grid[r][i] == 'S'){
				Q[t][++ct[t]][0] = r;
				Q[t][ct[t]][1] = i+1;
				Q[t][ct[t]][2] = 0;
				dp[r][i+1][0]= 0;
			}
		}
	}

	for(int state = 0 ; state<4; ++state){
		for(int r=1;r<=R;++r){
			for(int c=1;c<=C;++c){

				if( (grid[r][c-1]=='>'&&!state) || (grid[r][c-1]=='^'&&state==1) || (grid[r][c-1]=='<'&&state==2) || (grid[r][c-1]=='v'&&state==3) ){
					for(int col=c+1;col<=C;++col ){
						if( grid[r][col-1] =='G' || grid[r][col-1]=='S' || grid[r][col-1]=='.' ) Unsafe[r][col][state] = true;
						else break;
					}
				}

				if( (grid[r][c-1]=='^'&&!state) || (grid[r][c-1]=='<'&&state==1) || (grid[r][c-1]=='v'&&state==2) || (grid[r][c-1]=='>'&&state==3) ){
					for(int row=r-1;row>=1;--row ){
						if( grid[row][c-1] =='G' || grid[row][c-1]=='S' || grid[row][c-1]=='.' ) Unsafe[row][c][state] = true;
						else break;
					}
				}
				if( (grid[r][c-1]=='<'&&!state) || (grid[r][c-1]=='v'&&state==1) || (grid[r][c-1]=='>'&&state==2) || (grid[r][c-1]=='^'&&state==3) ){				
					for(int col=c-1;col>=1;--col ){
						if( grid[r][col-1] =='G' || grid[r][col-1]=='S' || grid[r][col-1]=='.' ) Unsafe[r][col][state] = true;
						else break;
					}
				}

				if( (grid[r][c-1]=='v'&&!state) || (grid[r][c-1]=='>'&&state==1) || (grid[r][c-1]=='^'&&state==2) || (grid[r][c-1]=='<'&&state==3) ){					
					for(int row=r+1;row<=R;++row ){
						if( grid[row][c-1] =='G' || grid[row][c-1]=='S' || grid[row][c-1]=='.' ) Unsafe[row][c][state] = true;
						else break;
					}
				}

			}
		}
	}

	

	int step = 0 ;
	bool ans = false;
	t = !t;
	while(1){
		++ step;
		for(int i=1;i<=ct[!t];++i){
			int tr = Q[!t][i][0], tc = Q[!t][i][1], ts = Q[!t][i][2];	
			if( grid[tr][tc-1] =='G' ){
				ans = true;
				cout << dp[tr][tc][Q[!t][i][2]] << endl;
				CLR(ct); break;
			}
			ts = (ts + 1) % 4;
			if(tr<R){
				if( (grid[tr+1][tc-1] =='G' || grid[tr+1][tc-1]=='S' || grid[tr+1][tc-1]=='.') && !Unsafe[tr+1][tc][ts] && dp[tr+1][tc][ts] ==-1){
					dp[tr+1][tc][ts] = step;
					Q[t][++ct[t]][0] = tr+1; Q[t][ct[t]][1] = tc; Q[t][ct[t]][2] = ts;
				}				
			}
			if( tr>1){
				if( (grid[tr-1][tc-1] =='G' || grid[tr-1][tc-1]=='S' || grid[tr-1][tc-1]=='.') && !Unsafe[tr-1][tc][ts] && dp[tr-1][tc][ts]==-1){
					dp[tr-1][tc][ts] = step;
					Q[t][++ct[t]][0] = tr-1; Q[t][ct[t]][1] = tc; Q[t][ct[t]][2] = ts;
				}
			}
			if( tc > 1){
				if( (grid[tr][tc-1-1] =='G' || grid[tr][tc-1-1]=='S' || grid[tr][tc-1-1]=='.') && !Unsafe[tr][tc-1][ts] && dp[tr][tc-1][ts] ==-1){
					dp[tr][tc-1][ts] = step;
					Q[t][++ct[t]][0] = tr; Q[t][ct[t]][1] = tc-1; Q[t][ct[t]][2] = ts;
				}
			}
			if( tc < C){
				if( (grid[tr][tc+1-1] =='G' || grid[tr][tc+1-1]=='S' || grid[tr][tc+1-1]=='.') && !Unsafe[tr][tc+1][ts] && dp[tr][tc+1][ts] ==-1){
					dp[tr][tc+1][ts] = step;
					Q[t][++ct[t]][0] = tr; Q[t][ct[t]][1] = tc+1; Q[t][ct[t]][2] = ts;
				}	
			}
		}
		t = !t;
		if( !ct[!t]) break;
		ct[t] = 0;
	}
	if( !ans) cout << "impossible\n";
}
	return 0;
}




#include<cstdio>
#include<queue>
using namespace std;

struct state {
	int x, y;
	int phase, move;
	state(int a, int b, int c, int d) { x = a; y = b; phase = c; move = d; return; }
};

int n, m;

char M[105][105];
bool V[105][105][5];

queue<state>Q;
pair<int, int>s, g;

char target_right[4] = { 'v', '>', '^', '<' }, target_left[4] = { '^', '<', 'v', '>' };
char target_up[4] = { '>', '^', '<', 'v' }, target_down[4] = { '<', 'v', '>', '^' };

bool check_move (int x, int y, int phase) {
	//printf("pos = [%d, %d], phase = %d\n", x, y, phase);
	if(x >= n || x < 0 || y >= m || y < 0) return false;
	if(V[x][y][phase] == true) return false;
	if(M[x][y] == '#' || M[x][y] == '<' || M[x][y] == '>' || M[x][y] == '^' || M[x][y] == 'v') return false;
	for(int i=x-1;i>=0;i--) {
		if(M[i][y] == target_up[phase]) return false;
		if(M[i][y] != '.' && M[i][y] != 'G' && M[i][y] != 'S') break;
	}
	for(int i=x+1;i<n;i++) {
		if(M[i][y] == target_down[phase]) return false;
		if(M[i][y] != '.' && M[i][y] != 'G' && M[i][y] != 'S') break;
	}
	for(int i=y-1;i>=0;i--) {
		if(M[x][i] == target_left[phase]) return false;
		if(M[x][i] != '.' && M[x][i] != 'G' && M[x][i] != 'S') break;
	}
	for(int i=y+1;i<m;i++) {
		if(M[x][i] == target_right[phase]) return false;
		if(M[x][i] != '.' && M[x][i] != 'G' && M[x][i] != 'S') break;
	}
	return true;
}

bool insert (int x, int y, int phase, int move) {
	if(make_pair(x, y) == g) return true;
	V[x][y][phase] = true;
	Q.push(state(x, y, phase, move));
	return false;
}

int bfs () {
	Q.push(state(s.first, s.second, -1, 0));
	while(!Q.empty()) {
		state s = Q.front();
		//printf("FIELD [%d, %d], phase = %d\n", s.x, s.y, s.phase);
		Q.pop();
		int next_phase = s.phase + 1;
		if(next_phase >= 4) next_phase = 0;
		if(check_move(s.x + 1, s.y, next_phase)) {
			V[s.x + 1][s.y][next_phase] = true;
			if(insert(s.x + 1, s.y, next_phase, s.move + 1) == true) return s.move + 1;
		}
		if(check_move(s.x - 1, s.y, next_phase)) {
			V[s.x - 1][s.y][next_phase] = true;
			if(insert(s.x - 1, s.y, next_phase, s.move + 1) == true) return s.move + 1;
		}
		if(check_move(s.x, s.y + 1, next_phase)) {
			V[s.x][s.y + 1][next_phase] = true;
			if(insert(s.x, s.y + 1, next_phase, s.move + 1) == true) return s.move + 1;
		}
		if(check_move(s.x, s.y - 1, next_phase)) {
			V[s.x][s.y - 1][next_phase] = true;
			if(insert(s.x, s.y - 1, next_phase, s.move + 1) == true) return s.move + 1;
		}
	}
	return -1;
}

int main() {
	int t;
	scanf("%d", &t);
	for(int q=1;q<=t;q++) {
		scanf("%d %d", &n, &m);
		for(int i=0;i<n;i++) scanf("%s", M[i]);
		for(int i=0;i<n;i++) {
			for(int j=0;j<m;j++) {
				if(M[i][j] == 'S') s = make_pair(i, j);
				else if(M[i][j] == 'G') g = make_pair(i, j);
			}
		}
		int ans = bfs();
		if(ans == -1) printf("Case #%d: impossible\n", q);
		else printf("Case #%d: %d\n", q, ans);
		while(!Q.empty()) Q.pop();
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				for(int k=0;k<4;k++) V[i][j][k] = false;
	}
	return 0;
}
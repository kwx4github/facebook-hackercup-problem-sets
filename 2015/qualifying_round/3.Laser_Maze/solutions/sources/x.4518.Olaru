#include <cstdio>
#include <queue>
#include <cstring>
using namespace std;
int T, n, m, xx[] = {-1, 0, 1, 0}, yy[] = {0, 1, 0, -1}, d[101][101][4];
char s[103][103];
struct nod{
	int i, j, t;
	nod(){};
	nod(int _i, int _j, int _t){
		i = _i;
		j = _j;
		t = _t;
	}
};
bool cont(int x, int y, int t){
	if(x > n || x < 1 || y > m || y < 1)
		return false;
	if(s[x][y] == '#' || s[x][y] == 0 || s[x][y] == 1 || s[x][y] == 2 || s[x][y] == 3)
		return false;
	for(int i = y; i <= m; ++i){
		if(s[x][i] == '#')
			break;
		if(s[x][i] >= 0 && s[x][i] <= 3)
			if((t + s[x][i]) % 4 == 3)
				return false;
	}
	for(int i = y; i > 0; --i){
		if(s[x][i] == '#')
			break;
		if(s[x][i] >= 0 && s[x][i] <= 3)
			if((t + s[x][i]) % 4 == 1)
				return false;
	}
	for(int i = x; i <= n; ++i){
		if(s[i][y] == '#')
			break;
		if(s[i][y] >= 0 && s[i][y] <= 3)
			if((t + s[i][y]) % 4 == 0)
				return false;
	}
	for(int i = x; i > 0; --i){
		if(s[i][y] == '#')
			break;
		if(s[i][y] >= 0 && s[i][y] <= 3)
			if((t + s[i][y]) % 4 == 2)
				return false;
	}
	return true;
}
void solve(int k){
	queue<nod> Q;
	memset(d, 0, sizeof(d));
	int xG, yG;
	for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= m; ++j)
			if(s[i][j] == '^')
				s[i][j] = 0;
			else
				if(s[i][j] == '>')
					s[i][j] = 1;
			else
				if(s[i][j] == 'v')
					s[i][j] = 2;
			else
				if(s[i][j] == '<')
					s[i][j] = 3;
			else
				if(s[i][j] == 'S')
					Q.push(nod(i, j, 0));
			else
				if(s[i][j] == 'G'){
					xG = i;
					yG = j;
				}
	while(!Q.empty()){
		nod x = Q.front();
		Q.pop();
		for(int i = 0; i < 4; ++i)
			if(cont(x.i + xx[i], x.j + yy[i], (x.t + 1) % 4)){
				if(x.i + xx[i] == xG && x.j + yy[i] == yG){					
					d[x.i + xx[i]][x.j + yy[i]][(x.t + 1) % 4] = d[x.i][x.j][x.t] + 1;
					printf("Case #%d: %d\n", k, d[x.i + xx[i]][x.j + yy[i]][(x.t + 1) % 4]);
					return;
				}
				else
					if(!d[x.i + xx[i]][x.j + yy[i]][(x.t + 1) % 4]){
						d[x.i + xx[i]][x.j + yy[i]][(x.t + 1) % 4] = d[x.i][x.j][x.t] + 1;
						Q.push(nod(x.i + xx[i], x.j + yy[i], (x.t + 1) % 4));
					}
			}
	}
	printf("Case #%d: impossible\n", k);
}
int main(){
	scanf("%d", &T);
	for(int i = 1; i <= T; ++i){
		scanf("%d %d", &n, &m);
		for(int j = 1; j <= n; ++j)
			scanf("%s", s[j] + 1);
		solve(i);
	}
	return 0;
}

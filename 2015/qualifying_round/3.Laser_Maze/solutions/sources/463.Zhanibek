#include <iostream>
#include <cstdlib>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)

#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair


#define fill0(x) memset(x,0,sizeof(x))
#define m1(x) memset(x,63,sizeof(x))
#define CC(x) //cout << (x) << endl

#define UP '^'
#define RIGHT '>'
#define DOWN 'v'
#define LEFT '<'
#define START 'S'
#define GOAL 'G'

const string dirs = "^>v<";
const int di[] = {-1, 0, 1, 0};
const int dj[] = { 0, 1, 0,-1};

int vst[102][102][4];
int que[102 * 102 * 4][3];
int ql, qr;

bool is_ok(int i, int j, int d, vector<string>& a, vector<pii>& tur, vi& dir) {
  //cout << "is_ok i:" << i << " " << j << endl;
  if (i < 0 || j < 0 || i >= a.size() || j >= a[0].size() || a[i][j] == '#') {
    //cout << "skipping in is_OK:" << i << " " << j << endl;
    return false;
  }
  for (int k = 0; k < tur.size(); k++) {
    int ti = tur[k].first;
    int tj = tur[k].second;
    int td = (dir[k] + d) % 4;
    while (true) {
      if (ti == i && tj == j) {
        return false;
      }
      ti += di[td];
      tj += dj[td];
      if (ti < 0 || ti >= a.size() || tj < 0 || tj >= a[0].size() || a[ti][tj] == '#') break;
    }
  }
  //cout << "is_ok good for i:" << i << " " << j << endl;
  return true;
}

int bfs(vector<string>& a, int si, int sj, int gi, int gj, vector<pii>& tur, vi& dir) {
  int res = -1;
  ql = 0;
  qr = 1;
  que[0][0] = si;
  que[0][1] = sj;
  que[0][2] = 0;
  memset(vst, 255, sizeof(vst));
  vst[si][sj][0] = 0;
  ////cout << "vst:" << vst[0][0][0] << endl;

  while (ql < qr) {
    ////cout << "ql:" << ql << endl;

    int ci = que[ql][0];
    int cj = que[ql][1];
    int cd = que[ql][2];
    //cout << ci << " " << cj << " " << cd << endl;
    ++ql;

    for (int i = 0; i < 4; i++) {
      int ni = ci + di[i];
      int nj = cj + dj[i];
      int nd = (cd + 1) % 4;
      if (ni < 0 || nj < 0 || ni >= a.size() || nj >= a[0].size() || a[ni][nj] == '#') {
        //cout << "skipping ni:" << ni << " nj:" << nj << " nd:" << nd << endl;
        continue;
      }
      //cout << "ni:" << ni << " nj:" << nj << " nd:" << nd << " vst:" << vst[ni][nj][nd] << endl;
      if (vst[ni][nj][nd] == -1 && is_ok(ni, nj, nd, a, tur, dir)) {
        que[qr][0] = ni;
        que[qr][1] = nj;
        que[qr][2] = nd;
        //cout << "adding ni:" << ni << " nj:" << nj << " nd:" << nd << endl;
        vst[ni][nj][nd] = vst[ci][cj][cd] + 1;
        ++qr;
      }
    }
  }
  for (int i = 0; i < 4; i++) {
    if (vst[gi][gj][i] != -1) {
      if (res == -1 || vst[gi][gj][i] < res) {
        res = vst[gi][gj][i];
      }
    }
  }
  return res;
}

int main() {
  int T;
  string s;
  cin >> T;
  for (int nt = 0; nt < T; nt++) {
    int N, M, si, sj, gi, gj;

    fill0(vst);
    ql = 0;
    qr = 0;
    vector<pii> tur;
    vi dir;

    cin >> N >> M;
    vector<string> a;

    for (int i = 0; i < N; i++) {
      cin >> s;
      a.pb(s);

      for (int j = 0; j < M; j++) {
        if (dirs.find(a[i][j]) != -1) {
          tur.pb(mp(i, j));
          dir.pb(dirs.find(a[i][j]));
          a[i][j] = '#';
          //cout << "dir:" << dir[dir.size() - 1] << endl;
        }
        if (a[i][j] == START) {
          a[i][j] = '.';
          si = i;
          sj = j;
        }
        if (a[i][j] == GOAL) {
          a[i][j] = '.';
          gi = i;
          gj = j;
        }
      }
    }

    ////cout << "bfs... to commence..\n";
    int res = bfs(a, si, sj, gi, gj, tur, dir);
    cout << "Case #" << (nt + 1) << ": ";
    if (res == -1) cout << "impossible" << endl; else cout << res << endl;
  }
  return 0;
}

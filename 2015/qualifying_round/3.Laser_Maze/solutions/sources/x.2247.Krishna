#!/usr/bin/env python

import sys
import copy

def update(lazers,lazerconfig,m,n,maze):
   danger = {}
   for p in range( len(lazerconfig) ):
      i, j = lazers[ p ]
      if lazerconfig[ p ] == '^':
         lazerconfig[ p ] = '>'
         k = j + 1
         while k < n and maze[i][k] == '.':
            danger[ (i,k) ] = True
            k += 1
      elif lazerconfig[ p ] == '>':
         lazerconfig[ p ] = 'v'
         k = i + 1
         while k < m and maze[k][j] == '.':
            danger[ (k,j) ] = True
            k += 1
      elif lazerconfig[ p ] == 'v':
         lazerconfig[ p ] = '<'
         k = j - 1
         while k >= 0 and maze[i][k] == '.':
            danger[ (i,k) ] = True
            k -= 1
      elif lazerconfig[ p ] == '<':
         lazerconfig[ p ] = '^'
         k = i - 1
         while k >= 0 and maze[k][j] == '.':
            danger[ (k,j) ] = True
            k -= 1
   return danger, lazerconfig

def foo(s,g,lazers,lazerconfig,m,n,maze):
   que = [ ( s[0], s[1], lazerconfig, 0 ) ]
   visited = {}
   while que:
      i, j, lazerconfig, num = que.pop(0)
      if (i, j) == g:
         return True, num
      if (i,j,str(lazerconfig)) in visited:
         continue
      visited[ (i,j,str(lazerconfig)) ] = True
      nexts = ( (i+1,j), (i-1,j), (i,j+1), (i,j-1) )
      danger, lazerconfig = update(lazers,list(lazerconfig),m,n, maze)
      for next in nexts:
         k, l = next
         if (k >=0 and k < m) and (l>=0 and l<n) and maze[k][l]=='.' and \
                next not in danger and (k,l,str(lazerconfig)) not in visited:
            que.append( (k,l,lazerconfig,num+1) )
   return False, None
   
def main():
   filename = sys.argv[ 1 ]
   with open( filename ) as fp:
      cases = int( fp.readline()[ : -1 ] )
      for case in range( cases ):
         m, n = fp.readline()[ : -1 ].split()
         m, n = int(m), int(n)
         maze = []
         lazers = []
         lazerconfig = []
         for i in range( m ):
            row = list( fp.readline()[ : -1 ] )
            maze.append( row )
            for j in range( len( row ) ):
               if row[ j ] == 'S':
                  s = i, j
                  maze[i][j] = '.'
               elif row[ j ] == 'G':
                  g = i, j
                  maze[i][j] = '.'
               elif row[ j ] in [ '^', '>', 'v', '<' ]:
                  lazers.append( (i,j) )
                  lazerconfig=row[j]
         ans, num = foo( s, g, lazers,lazerconfig, m, n, maze )
         if ans:
            print "Case #%d: %d" % ( case + 1, num )
         else:
            print "Case #%d: impossible" % ( case + 1 )
            


if __name__ == "__main__":
   main()

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <utility>
#include <queue>
#include <cstring>
#define MAXN 105

using namespace std;

int dr[] = {-1,0,1,0};
int dc[] = {0,1,0,-1};

int m,n;
char b[MAXN][MAXN];
int sr,sc,gr,gc;
bool x[MAXN][MAXN][4];
bool v[MAXN][MAXN][4];

bool valid(int r, int c) {
    return r >= 0 && r < m && c >= 0 && c < n && b[r][c] == '.';
}

int solve() {
    queue<pair<pair<int,int>,int> > q;
    q.push(make_pair(make_pair(sr,sc),0));
    while (!q.empty()) {
        int r = q.front().first.first, c = q.front().first.second, d = q.front().second;
        if (r == gr && c == gc) return d;
        q.pop();
        d++;
        for (int i = 0; i < 4; i++) {
            int rr = r+dr[i];
            int cc = c+dc[i];
            if (valid(rr,cc) && !x[rr][cc][d%4] && !v[rr][cc][d%4]) {
                v[rr][cc][d%4] = 1;
                q.push(make_pair(make_pair(rr,cc),d));
            }
        }
    }
    return -1;
}

int main() {
    int T;
    cin >> T;
    for (int TC = 1; TC <= T; TC++) {
        memset(b,0,sizeof(b));
        memset(x,0,sizeof(x));
        memset(v,0,sizeof(v));
        cin >> m >> n;
        for (int i = 0; i < m; i++) {
            cin >> b[i];
            for (int j = 0; j < n; j++) {
                if (b[i][j] == 'S') {
                    sr = i;
                    sc = j;
                    b[i][j] = '.';
                }
                if (b[i][j] == 'G') {
                    gr = i;
                    gc = j;
                    b[i][j] = '.';
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int d = -1;
                if (b[i][j] == '^') d = 0;
                if (b[i][j] == '>') d = 1;
                if (b[i][j] == 'v') d = 2;
                if (b[i][j] == '<') d = 3;
                if (d == -1) continue;
                for (int k = 0; k < 4; k++) {
                    int dd = (d+k) % 4;
                    int r = i + dr[dd], c = j + dc[dd];
                    while (valid(r,c)) {
                        x[r][c][k] = 1;
                        r += dr[dd];
                        c += dc[dd];
                    }
                }
            }
        }
        int ans = solve();
        cout << "Case #" << TC << ": ";
        if (ans == -1) cout << "impossible\n";
        else cout << ans << '\n';
    }
}

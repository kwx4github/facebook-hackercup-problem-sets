#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back

#define debug if(printf("GD "))
#define mod 1000000007

#define inf (1e9)

int dx[] = {0,1,0,-1};
int dy[] = {1,0,-1,0};
char dirs[] = {'v','>','^','<'};
int gx, gy, m, n;

int dist[105][105][4];
bool mark[105][105][4], visited[105][105][4];

bool valid(char c)
{
    if(c=='.' || c=='S' || c=='G')
        return true;
    return false;
}

bool is_valid(int x, int y, int m, int n)
{
    if(x>=0 && x<m && y>=0 && y<n)
        return true;
    return false;
}

int get_index(char c)
{
    if(c=='^') return 0;
    else if(c=='>') return 1;
    else if(c=='v') return 2;
    else return 3;
}

int solve(char graph[][105], int sx, int sy, int cnt, bool is_start=false)
{
    //debug cout<<sx<<" "<<sy<<" "<<cnt<<" "<<mark[sx][sy][cnt%4]<<"\n";
    if(graph[sx][sy]=='#' || graph[sx][sy]=='^' || graph[sx][sy]=='>' || graph[sx][sy]=='<' || graph[sx][sy]=='v')
        return inf;
    if(dist[sx][sy][cnt%4]!=-1)
        return dist[sx][sy][cnt%4];
    if(!is_start && mark[sx][sy][cnt%4])
        return inf;
    if(sx==gx && sy==gy)    
        return cnt;
    
    if(visited[sx][sy][cnt%4] )
        return dist[sx][sy][cnt%4];
    visited[sx][sy][cnt%4] = true;
    dist[sx][sy][cnt%4] = inf;
    
    int ret = inf;
    rep(i,4)
    {
        if(is_valid(sx+dx[i],sy+dy[i],m,n))
        {
            ret = min(ret,solve(graph,sx+dx[i],sy+dy[i],cnt+1));
        }
    }
    dist[sx][sy][cnt%4] = ret;
    return ret;
}

int main()
{
    int t, cases=1;
    scanf("%d",&t);
    char maze[105][105];
    while(t--)
    {
        scanf("%d %d",&m,&n);
        memset(mark,0,sizeof(mark));
        memset(visited,0,sizeof(visited));
        rep(i,m)
            scanf("%s",maze[i]);
        int sx,sy;
        rep(ix,m)
        {
            rep(jy,n)
            {
                if(maze[ix][jy]=='^')
                {
                    int i=ix-1, j=jy;
                    while(i>=0 && valid(maze[i][j]))
                        mark[i--][j][0]=true;
                    i=ix+1;j=jy;
                    while(i<m && valid(maze[i][j]))
                        mark[i++][j][2]=true;
                    i=ix;j=jy-1;
                    while(j>=0 && valid(maze[i][j]))
                        mark[i][j--][3]=true;
                    i=ix;j=jy+1;
                    while(j<n && valid(maze[i][j]))
                        mark[i][j++][1]=true;
                }
                else if(maze[ix][jy]=='>')
                {
                    int i=ix-1, j=jy;
                    while(i>=0 && valid(maze[i][j]))
                        mark[i--][j][3]=true;
                    i=ix+1;j=jy;
                    while(i<m && valid(maze[i][j]))
                        mark[i++][j][1]=true;
                    i=ix;j=jy-1;
                    while(j>=0 && valid(maze[i][j]))
                        mark[i][j--][2]=true;
                    i=ix;j=jy+1;
                    while(j<n && valid(maze[i][j]))
                        mark[i][j++][0]=true;
                }
                else if(maze[ix][jy]=='v')
                {
                    int i=ix-1, j=jy;
                    while(i>=0 && valid(maze[i][j]))
                        mark[i--][j][2]=true;
                    i=ix+1;j=jy;
                    while(i<m && valid(maze[i][j]))
                        mark[i++][j][0]=true;
                    i=ix;j=jy-1;
                    while(j>=0 && valid(maze[i][j]))
                        mark[i][j--][1]=true;
                    i=ix;j=jy+1;
                    while(j<n && valid(maze[i][j]))
                        mark[i][j++][3]=true;
                }
                else if(maze[ix][jy]=='<')
                {
                    int i=ix-1, j=jy;
                    while(i>=0 && valid(maze[i][j]))
                        mark[i--][j][1]=true;
                    i=ix+1;j=jy;
                    while(i<m && valid(maze[i][j]))
                        mark[i++][j][3]=true;
                    i=ix;j=jy-1;
                    while(j>=0 && valid(maze[i][j]))
                        mark[i][j--][0]=true;
                    i=ix;j=jy+1;
                    while(j<n && valid(maze[i][j]))
                        mark[i][j++][2]=true;
                }
                else if(maze[ix][jy]=='S')
                {sx=ix;sy=jy;}
                else if(maze[ix][jy]=='G')
                {gx=ix;gy=jy;}                
            }
        }
        //rep(i,m) rep(j,n) cout<<mark[i][j][2];

        rep(i,m)
            rep(j,n)
                fill(dist[i][j],dist[i][j]+4,-1);
        int ans = solve(maze,sx,sy,0,true);
        cout<<"Case #"<<cases++<<": ";
        if(ans>=inf)
        {cout<<"impossible\n";}
        else
        {cout<<ans<<endl;}
    }
    return 0;
}

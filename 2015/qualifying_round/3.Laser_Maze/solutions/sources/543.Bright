#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <complex>
#define pb push_back
#define mp make_pair
#define esp 1e-6
#define Esp 1e-14
#define lson   l, m, rt<<1
#define rson   m+1, r, rt<<1|1
#define sz(x) ((int)((x).size()))
#define pf(x) ((x)*(x))
#define pb push_back
#define pi acos(-1.0)
#define in freopen("solve_in.txt", "r", stdin);
#define out freopen("solve_out.txt", "w", stdout);

#define bug(x) cerr << "Line : " << (x) <<  " >>>>>>\n";
#define TL cerr << "Time elapsed: " << (double)clock() / CLOCKS_PER_SEC * 1000 << " ms" << endl;
#define inf 0x0f0f0f0f

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef map<LL, int> MPS;
typedef pair<int, int> PII;
typedef MPS::iterator IT;

const int maxn = 100*100*4 + 100;
int n, m;

char maze[110][110];
int vis[110][110][4], vv[110][110][4], d[110][110][4];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

bool check(int x, int y){
    return x >= 0 && x < n && y >= 0 && y < m;
}
bool hasway(int x, int y){
    return maze[x][y] == 'S' || maze[x][y] == 'G' || maze[x][y] == '.';
}
int sx, sy, gx, gy, ans;
struct State{
    int x, y, dir;
    State(){}
    State(int x, int y, int dir):x(x), y(y), dir(dir){}
};

void bfs(int x, int y, int dir){
    queue<State> q;
    q.push(State(x, y, dir));
    memset(vv, 0, sizeof vv);
    memset(d, 0x0f, sizeof d);
    d[x][y][dir] = 1;
    while(q.size()){
        State u = q.front();
        q.pop();
        x = u.x;
        y = u.y;
        dir = u.dir;

        vv[x][y][dir] = 1;
        for(int k = 0; k < 4; k++){
            int nx = x+dx[k];
            int ny = y+dy[k];
            if(!check(nx, ny) || vis[nx][ny][(dir+1)%4] || vv[nx][ny][(dir+1)%4])
                continue;

            d[nx][ny][(dir+1)%4] = d[x][y][dir]+1;
            vv[nx][ny][(dir+1)%4] = 1;
            q.push(State(nx, ny, (dir+1)%4));
        }
    }
}
int main() {
//    in
//    out
    int T;
    for(int t = scanf("%d", &T); t <= T; t++) {
        ans = inf;
        scanf("%d%d", &n, &m);
        memset(vis, 0, sizeof vis);

        for(int i = 0; i < n; i++)
            scanf("%s", maze[i]);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(!hasway(i, j))
                    for(int k = 0; k < 4; k++)
                        vis[i][j][k] = 1;
                if(maze[i][j] == 'S')
                    sx = i, sy = j;
                if(maze[i][j] == 'G')
                    gx = i, gy = j;
                int cur = -1;
                if(maze[i][j] == '^') cur = 0;
                else if(maze[i][j] == '>')cur = 1;
                else if(maze[i][j] == 'v') cur = 2;
                else if(maze[i][j] == '<') cur = 3;
                if(cur == -1) continue;
                for(int k = 0; k < 4; k++) {
                    int x = i, y = j;
                    for(int l = 0; ; l++){
                        x = x+dx[(k+cur)%4];
                        y = y+dy[(k+cur)%4];
                        if(!check(x, y) || !hasway(x, y)) break;
                        vis[x][y][k] = 1;
                    }
                }
            }
        }
        printf("Case #%d: ", t);

        for(int k = 0; k < 4; k++){
            int x = sx+dx[k];
            int y = sy+dy[k];
            if(!check(x, y) || vis[x][y][1]) continue;
            bfs(x, y, 1);
            for(int kk = 0; kk < 4; kk++)
            ans = min(ans, d[gx][gy][kk]);
        }
        if(ans == inf)
            puts("impossible");
        else printf("%d\n", ans);
    }
    return 0;
}

#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,arr) for (__typeof((arr).begin()) it=(arr).begin(); it!=(arr).end(); it++)

// up, right, down, left
int pr[] = {-1,0,1,0};
int pc[] = {0,1,0,-1};

bool is_laser(char c) {
	return c == '^' || c == '>' || c == 'v' || c == '<';
}

int main()
{
	char dir[256];
	dir['^'] = 0;
	dir['>'] = 1;
	dir['v'] = 2;
	dir['<'] = 3;

	int T;
	scanf( "%d", &T );

	FOR(tc,1,T) {
		int  M, N;
		char maze[105][105];
		scanf( "%d %d", &M, &N );
		REP(i,M) scanf( "%s", maze[i] );
		
		int r, c;
		REP(i,M) REP(j,N) if ( maze[i][j] == 'S' ) r = i, c = j;
		
		int dead[105][105] = {0};
		REP(i,M) REP(j,N) if ( is_laser(maze[i][j]) ) {
			REP(k,4) {
				int bit = ((k - dir[maze[i][j]]) % 4 + 4) % 4;
				int tr = i + pr[k], tc = j + pc[k];
				while ( 0 <= tr && tr < M && 0 <= tc && tc < N ) {
					if ( maze[tr][tc] == '#' || is_laser(maze[tr][tc]) ) break;
					dead[tr][tc] |= 1 << bit;
					tr += pr[k];
					tc += pc[k];
				}
			}
		}

		int  ans = -1;
		bool flag[105][105][5] = {false};
		queue <int> q;
		q.push(r), q.push(c), q.push(0);
		while ( !q.empty() ) {
			int xr = q.front(); q.pop();
			int xc = q.front(); q.pop();
			int xs = q.front(); q.pop();
			if ( maze[xr][xc] == 'G' ) {
				ans = xs;
				break;
			}
			REP(k,4) {
				int tr = xr + pr[k];
				int tc = xc + pc[k];
				int ts = xs + 1;
				if ( !(0 <= tr && tr < M) )   continue;
				if ( !(0 <= tc && tc < N) )   continue;
				if ( is_laser(maze[tr][tc]) ) continue;
				if ( maze[tr][tc] == '#' )    continue;
				if ( flag[tr][tc][ts%4] )     continue;
				if ( dead[tr][tc] & (1 << (ts % 4)) ) continue;
				flag[tr][tc][ts%4] = true;
				q.push(tr), q.push(tc), q.push(ts);
			}
		}
		

		if ( ans != -1 ) printf( "Case #%d: %d\n", tc, ans );
		else             printf( "Case #%d: impossible\n", tc );

		if ( ans != -1 ) fprintf( stderr, "Case #%d: %d\n", tc, ans );
		else             fprintf( stderr, "Case #%d: impossible\n", tc );

	}

	return 0;
}

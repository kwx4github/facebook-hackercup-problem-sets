#include <bits/stdc++.h>
#define N 110
using namespace std;
typedef long long int LL;
char mapa[N][N], mapaMod[4][N][N], torre[] = {'>', 'v', '<', '^'};
pair<int, pair<int,int> > v[N * N];
int n, m, pos;
int dist[4][N][N];
int vx[] = {-1, 0, 1, 0};
int vy[] = {0, 1, 0, -1};
void preparar(int mod) {
	for(int i=0 ; i<n ; i++) for(int k=0 ; k<m ; k++) mapaMod[mod][i][k] = mapa[i][k];
	for(int i=0 ; i<pos ; i++)
		mapaMod[mod][v[i].second.first][v[i].second.second] = torre[(v[i].first + mod) % 4];
	for(int i=0 ; i<pos ; i++) {
		switch( mapaMod[mod][v[i].second.first][v[i].second.second] ) {
			case '>':
				for(int k=v[i].second.second + 1 ; k<m ; k++) {
					if( mapaMod[mod][v[i].second.first][k] == '.' ||
						mapaMod[mod][v[i].second.first][k] == 'x' )
						mapaMod[mod][v[i].second.first][k] = 'x';
					else break;
				}
				break;
			case 'v':
				for(int k=v[i].second.first + 1 ; k<n ; k++) {
					if( mapaMod[mod][k][v[i].second.second] == '.' ||
						mapaMod[mod][k][v[i].second.second] == 'x' )
						mapaMod[mod][k][v[i].second.second] = 'x';
					else break;
				}
				break;
			case '<':
				for(int k=v[i].second.second - 1 ; k>=0 ; k--) {
					if( mapaMod[mod][v[i].second.first][k] == '.' ||
						mapaMod[mod][v[i].second.first][k] == 'x' )
						mapaMod[mod][v[i].second.first][k] = 'x';
					else break;
				}
				break;
			case '^':
				for(int k=v[i].second.first - 1 ; k>=0 ; k--) {
					if( mapaMod[mod][k][v[i].second.second] == '.' ||
						mapaMod[mod][k][v[i].second.second] == 'x' )
						mapaMod[mod][k][v[i].second.second] = 'x';
					else break;
				}
				break;
			default: break;
		}
	}
	/*
	cout<<endl<<endl;
	cout<<"mod = "<<mod<<endl;
	for(int i=0 ; i<n ; i++) {
		for(int k=0 ; k<m ; k++)
			cout<<mapaMod[mod][i][k];
		cout<<endl;	
	}
	*/
}
bool isValid(int x, int y) {
	return (x >= 0 && x < n && y >= 0  && y < m);
}
int main() {
	ios::sync_with_stdio(false);
	int T;
	cin>>T;
	for(int caso=1 ; caso<=T ; caso++) {
		cin>>n>>m;
		int xS, yS, xG, yG;
		pos = 0;
		for(int i=0 ; i<n ; i++) {
			cin>>mapa[i];
			for(int k=0 ; k<m ; k++) {
				if( mapa[i][k] == 'S' ) {
					xS = i;
					yS = k;
					mapa[i][k] = '.';
				}
				if( mapa[i][k] == 'G' ) {
					xG = i;
					yG = k;
					mapa[i][k] = '.';
				}
				for(int j=0 ; j<4 ; j++) {
					if( mapa[i][k] == torre[j] ) v[pos++] = make_pair(j, make_pair(i, k));
				}
			}
		}
		for(int i=0 ; i<4 ; i++) preparar(i);
		memset(dist, 63, sizeof(dist));
		int inf = dist[0][0][0], ans = -1;
		queue<pair<int, pair<int,int> > > Q;
		Q.push(make_pair(0, make_pair(xS, yS)));
		dist[0][xS][yS] = 0;
		while( !Q.empty() ) {
			int distancia = Q.front().first;
			int mod = (distancia + 1) % 4;
			int x = Q.front().second.first;
			int y = Q.front().second.second;
			//cout<<distancia<<" "<<x<<" "<<y<<" "<<mod<<" --> ";
			if( x == xG && y == yG ) {
				ans = distancia;
				break;
			}
			Q.pop();
			for(int i=0 ; i<4 ; i++) {
				int nx = x + vx[i];
				int ny = y + vy[i];
				if( isValid(nx, ny) && mapaMod[mod][nx][ny] == '.' && dist[mod][nx][ny] == inf ) {
					dist[mod][nx][ny] = distancia + 1;
					Q.push(make_pair(distancia + 1, make_pair(nx, ny)));
				}
			}
		}
		if( ans == -1 ) cout<<"Case #"<<caso<<": impossible"<<endl;
		else cout<<"Case #"<<caso<<": "<<ans<<endl;
	}
	return 0;
}
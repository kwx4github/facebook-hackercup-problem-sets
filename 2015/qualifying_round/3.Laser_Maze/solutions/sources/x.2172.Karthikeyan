#include<bits/stdc++.h>
using namespace std;
int t, n, m, laser, ans, f;
char B[105][105];
struct data {
    int x;
    int y;
    int d;
} A[10000000], source, dest;
struct data1 {
    int x;
    int y;
    int c;
};
queue < data1 > C;
int visited[105][105];
bool isLaser(int i, int j) {
    if(B[i][j] == '>' || B[i][j] == '<' || B[i][j] == '^' || B[i][j] == 'v') return true;
    return false;
}
bool isValid(int i, int j) {
    if(i < 0 || i >= n || j < 0 || j >= m) return false;
    if(B[i][j] == '#' || isLaser(i, j)) return false;
    return true;
}
bool wallorlaser(int a, int b, int c, int dir) {
    if(dir == 0) {
        for(int i = a; i <= b; i++) {
            if(B[c][i] == '#' || B[c][i] == isLaser(c, i)) return true;
        }
    }
    if(dir == 1) {
        for(int i = a; i <= b; i++) {
            if(B[i][c] == '#' || B[i][c] == isLaser(i, c)) return true;
        }
    }
    if(dir == 2) {
        for(int i = a; i <= b; i++) {
            if(B[c][i] == '#' || B[c][i] == isLaser(c, i)) return true;
        }
    }
    if(dir == 3) {
        for(int i = a; i <= b; i++) {
            if(B[i][c] == '#' || B[i][c] == isLaser(i, c)) return true;
        }
    }
    return false;
}
void bfs() {
    int i, j, c, y;
    while(C.size() != 0) {
        i = C.front().x;
        j = C.front().y;
        c = C.front().c;
        if(visited[i][j] > 4) {
            C.pop();
            continue;
        }
        visited[i][j] ++;
        if(c >= 100000) {
            return;
        }
        int dir;
        y = 0;
        data1 temp;
        for(int u = 0; u < laser; u++) {
            dir = (A[u].d + c) % 4;
            if(dir == 0 && (j < A[u].y && i == A[u].x)) {
                if(!wallorlaser(j + 1, A[u].y - 1, A[u].x, 0)) {
                    y = 1;
                    break;
                }
            }
            if(dir == 1 && (i < A[u].x && j == A[u].y)) {
                if(!wallorlaser(i + 1, A[u].x - 1, A[u].y, 1)) {
                    y = 1;
                    break;
                }
            }
            if(dir == 2 && (j > A[u].y && i == A[u].x)) {
                if(!wallorlaser(A[u].y + 1, j - 1, A[u].x, 2)) {
                    y = 1;
                    break;
                }
            }
            if(dir == 3 && (i > A[u].x && j == A[u].y)) {
                if(!wallorlaser(A[u].x + 1, i - 1, A[u].y, 3)) {
                    y = 1;
                    break;
                }
            }
        }
        if(!y && i == dest.x && j == dest.y) {
            ans = c;
            f = 1;
            return;
        }
        if(!y) {
            if(isValid(i + 1, j)) {
                temp.x = i + 1;
                temp.y = j;
                temp.c = c + 1;
                C.push(temp);
            }
            if(isValid(i, j - 1)) {
                temp.x = i;
                temp.y = j - 1;
                temp.c = c + 1;
                C.push(temp);
            }
            if(isValid(i, j + 1)) {
                temp.x = i;
                temp.y = j + 1;
                temp.c = c + 1;
                C.push(temp);
            }
            if(isValid(i - 1, j)) {
                temp.x = i - 1;
                temp.y = j;
                temp.c = c + 1;
                C.push(temp);
            }
        }
        C.pop();
    }
    f = 2;
    return;
}
int main() {
    int t;
    cin >> t;
    for(int kase = 1; kase <= t; kase++) {
        while(C.size() != 0) C.pop();
        laser = 0;
        f = 0;
        cin >> n >> m;
        for(int i = 0; i < n; i++) {
            cin >> B[i];
            for(int j = 0; j < m; j++) {
                visited[i][j] = 0;
                if(isLaser(i, j)) {
                    A[laser].x = i;
                    A[laser].y = j;
                    if(B[i][j] == '<') A[laser].d = 0;
                    if(B[i][j] == '^') A[laser].d = 1;
                    if(B[i][j] == '>') A[laser].d = 2;
                    if(B[i][j] == 'v') A[laser].d = 3;
                    laser++;
                }
                if(B[i][j] == 'S') source.x = i, source.y = j;
                if(B[i][j] == 'G') dest.x = i, dest.y = j;
            }
        }
        int i, j;
        i = source.x;
        j = source.y;
        visited[i][j] = 1;
        data1 temp;
        if(isValid(i + 1, j)) {
            temp.x = i + 1;
            temp.y = j;
            temp.c = 1;
            C.push(temp);
        }
        if(isValid(i, j - 1)) {
            temp.x = i;
            temp.y = j - 1;
            temp.c = 1;
            C.push(temp);
        }
        if(isValid(i, j + 1)) {
            temp.x = i;
            temp.y = j + 1;
            temp.c = 1;
            C.push(temp);
        }
        if(isValid(i - 1, j)) {
            temp.x = i - 1;
            temp.y = j;
            temp.c = 1;
            C.push(temp);
        }
        bfs();
        if(f == 1) {
            cout << "Case #" << kase << ": " << ans << endl;
        }
        else cout << "Case #" << kase << ": impossible" << endl;

    }

}

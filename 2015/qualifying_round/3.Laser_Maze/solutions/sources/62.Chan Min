#include <cstdio>
#include <memory.h>
#include <queue>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

int n,m;
char dat[100][128];
int v[100][100][4],vcnt;
int dt[100][100][4]; // min time
int killed[100][100][4];

int main()
{
	FILE *fp = fopen("laser_maze.out","wb");
	int T;
	scanf("%d", &T);
	for (int testcase = 1; testcase <= T; testcase++)
	{
		++vcnt;
		scanf("%d%d", &n, &m);
		for (int i = 0; i < n; i++)
			scanf("%s",dat[i]);
		const int dir[4][2] = {0,-1, -1,0, 0,1, 1,0};
		queue<pair<pair<int,int>,int>> q;
		memset(killed,0,sizeof(killed));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (dat[i][j] == 'S') {
					v[i][j][0] = vcnt;
					dt[i][j][0] = 0;
					q.push(make_pair(make_pair(i,j),0));
				}
				int d = -1;
				if (dat[i][j] == '<') d = 0;
				if (dat[i][j] == '^') d = 1;
				if (dat[i][j] == '>') d = 2;
				if (dat[i][j] == 'v') d = 3;
				if (d >= 0) {
					for(int k = 0; k < 4; k++) {
						int r = i, c = j;
						for (;;) {
							r += dir[(k + d) % 4][0]; c += dir[(k + d) % 4][1];
							if (r < 0 || c < 0 || r >= n || c >= m) break;
							char cell = dat[r][c];
							if (cell == '#' || cell == '<' || cell == '>' || cell == '^' || cell == 'v') break;
							killed[r][c][k] = 1;
						}
					}
				}
			}
		}

		int ans = -1;
		while(!q.empty()){
			auto qh = q.front(); q.pop();
			int r = qh.first.first, c = qh.first.second;
			int t = dt[r][c][qh.second];
			if (dat[r][c] == 'G') {ans = t; break;}
			for (int d = 0; d < 4; d++) {
				int nr = r + dir[d][0], nc = c + dir[d][1];
				if (nr < 0 || nr >= n || nc < 0 || nc >= m) continue;
				if (dat[nr][nc] != '.' &&dat[nr][nc] != 'S' && dat[nr][nc] != 'G') continue;
				if (killed[nr][nc][(t+1)&3]) continue;
				if (v[nr][nc][(t+1)&3] == vcnt) continue;
				v[nr][nc][(t+1)&3] = vcnt;
				dt[nr][nc][(t + 1) & 3] = t+1;
				q.push(make_pair(make_pair(nr,nc),(t+1)&3));
			}
		}

		fprintf(fp,"Case #%d: ", testcase);
		if (ans == -1) fprintf(fp, "impossible\n");
		else fprintf(fp, "%d\n", ans);
	}

	fclose(fp);
}
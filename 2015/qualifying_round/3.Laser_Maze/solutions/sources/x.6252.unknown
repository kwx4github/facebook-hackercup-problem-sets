import itertools

dxs = [-1, 0, 1, 0]
dys = [0, -1, 0, 1]
arrows = "<^>V"
infinity = 1e10

with open("in.txt", "r") as fin, open("out.txt", "w") as fout:
	n = int(fin.readline())
	for case in range(n):
		h, w = map(int, fin.readline().split())
		walls = [[[False] * 4 for _ in range(w)] for _ in range(h)]
		start = goal = (0, 0, 0)
		s = [fin.readline() for _ in range(h)]
		#print(s)
		for i in range(h):
			for j in range(w):
				if s[i][j] == "S": start = (i, j, 0)
				if s[i][j] == "G": goal = (i, j, 0)
				if s[i][j] == "#": walls[i][j] = [True] * 4
				if s[i][j] in arrows:
					walls[i][j] = [True] * 4
					dir = arrows.index(s[i][j])
					for t in range(4):
						dx = dxs[(dir + t) % 4]
						dy = dys[(dir + t) % 4]
						for k in itertools.count(1):
							x = j + dx * k
							y = i + dy * k
							if 0 <= x < w and 0 <= y < h and s[y][x] in ".SG":
								walls[y][x][t] = True
							else:
								break
		#print(walls)		
		
		dist = [[[infinity] * 4 for _ in range(w)] for _ in range(h)]
		queue = [start]
		dist[start[0]][start[1]][start[2]] = 0
		while len(queue) > 0:
			y, x, t = queue.pop(0)
			for dir in range(4):
				x1 = x + dxs[dir]
				y1 = y + dys[dir]
				t1 = (t + 1) % 4
				if 0 <= x1 < w and 0 <= y1 < h and not walls[y1][x1][t1] and dist[y1][x1][t1] == infinity:
					queue.append((y1, x1, t1))
					dist[y1][x1][t1] = dist[y][x][t] + 1
		
		ans = min(dist[goal[0]][goal[1]][t] for t in range(4))
		print(case, ans)
		fout.write("Case #" + str(case + 1) + ": " + (str(ans) if ans < infinity else "impossible") + "\n")

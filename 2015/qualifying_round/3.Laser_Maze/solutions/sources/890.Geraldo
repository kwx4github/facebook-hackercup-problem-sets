#include <bits/stdc++.h>
#define ff first
#define ss second
using namespace std;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;

const int N=1e2+10;
int dx[]={-1, 0, 1, 0};
int dy[]={0, 1, 0, -1};
char s[N][N];
int vis[N][N][4], n, m, ex, ey;

int in(int u, int v) { return u>=0 && u<n && v>=0 && v<m; }

int val(char c) {
	if(c=='^') return 0;
	if(c=='>') return 1;
	if(c=='v') return 2;
	return 3;
}

int check(int u, int v, int r) {
	for(int i=0; i<4; i++) {
		int nu=u, nv=v;
		for(; in(nu, nv) && s[nu][nv]=='.'; nu+=dx[i], nv+=dy[i]);
		if(!in(nu, nv) || s[nu][nv]=='#') continue;
		int x=val(s[nu][nv]);
		if((x-i+r+4)%4==2) return 0;
	}
	return 1;
}

int bfs(int u, int v) {
	queue<piii> q;
	vis[u][v][0]=0;
	q.push(piii(u, pii(v, 0)));
	while(!q.empty()) {
		u=q.front().ff;
		v=q.front().ss.ff;
		int r=q.front().ss.ss;
		q.pop();
		int nr=(r+1)%4;
		for(int i=0; i<4; i++) {
			int nu=u+dx[i], nv=v+dy[i];
			if(in(nu, nv) && s[nu][nv]=='.' && vis[nu][nv][nr]==-1 && check(nu, nv, nr)) {
				vis[nu][nv][nr]=vis[u][v][r]+1;
				if(nu==ex && nv==ey) return vis[nu][nv][nr];
				q.push(piii(nu, pii(nv, nr)));
			}
		}
	}
	return -1;
}

int main() {
	int t, T=1, sx, sy;
	scanf("%d", &t);
	while(t--) {
		memset(vis, -1, sizeof(vis));
		scanf("%d %d", &n, &m);
		for(int i=0; i<n; i++) {
			scanf("%s", s[i]);
			for(int j=0; j<m; j++) {
				if(s[i][j]=='S') sx=i, sy=j, s[i][j]='.';
				else if(s[i][j]=='G') ex=i, ey=j, s[i][j]='.';
			}
		}
		int ret=bfs(sx, sy);
		printf("Case #%d: ", T++);
		if(ret==-1) printf("impossible\n");
		else printf("%d\n", ret);
	}
	return 0;
}

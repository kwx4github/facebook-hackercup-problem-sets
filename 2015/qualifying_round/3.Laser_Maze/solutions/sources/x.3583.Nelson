#include <stdio.h>
#include <iostream>
#include <queue>
#include <string.h>

using namespace std;

typedef struct coord{
	int x;
	int y;
} coord;

queue<coord> states;
queue<int> recLev;
vector<coord> lasers;
vector<int> lasers_rot;
int res, x_g, y_g, n, m;
int visited[150][150][4];
int step_x[4] = {1,-1,0,0};
int step_y[4] = {0,0,1,-1};
char maze[150][150];


int draw_line(int x, int y, int turn, int x_next, int y_next){
	int k;
	if(turn == 0){
		for(k = x; k >= 0; k--){
			//printf("TESTE: %d %d\n", k, y);
			if(y == y_next && k == x_next){
				return 1;
			}
			else if(maze[k][y] == '#'){
				return 0;
			}
		}
	}
	else if(turn == 1){
		for(k = y; k < m; k++){
			if(k == y_next && x == x_next){
				return 1;
			}
			else if(maze[x][k] == '#'){
				return 0;
			}
		}
	}
	else if(turn == 2){
		for(k = x; k < n; k++){
			if(y == y_next && k == x_next){
				return 1;
			}
			else if(maze[k][y] == '#'){
				return 0;
			}
		}
	}
	else if(turn == 3){
		for(k = y; k >= 0; k--){
			if(k == y_next && x == x_next){
				return 1;
			}
			else if(maze[x][k] == '#'){
				return 0;
			}
		}
	}
	return 0;
}

int numb_steps = 0;
int BFS(){
	int i, k, turn;
	int x_next, y_next, lev;
	int isInLaserView;
	coord curr_pos;
	coord next_pos;
	
	while(!states.empty()){
		curr_pos = states.front();
		states.pop();
		lev = recLev.front();
		recLev.pop();
		
		// Print Maze
		/*for(k = 0; k < 4; k++){
			for(i = 0; i < n; i++){
				for(j = 0; j < m; j++){
					printf("%d", visited[i][j][k]);
				}
				printf("\n");
			}
			printf("*****");
			printf("\n");
		}
		*/
		//printf("%d, %d\n", curr_pos.x, curr_pos.y);
		for(i = 0; i < 4; i++){
			// Next steps
			x_next = curr_pos.x + step_x[i];
			y_next = curr_pos.y + step_y[i];
			
			// Check bounds
			if(x_next >= 0 && y_next >= 0 && x_next < n && y_next < m){
				// Check if will be hit by the laser
				isInLaserView = 0;
				for(k = 0; k < lasers.size(); k++){
					turn = (lev + 1 + lasers_rot[k])%4;
					isInLaserView = draw_line(lasers[k].x, lasers[k].y, turn, x_next, y_next);
				}
				
								
				//printf("inLaser View: %d\n", isInLaserView);
				//printf("TURN: %d\n", turn);
				//printf("COORD: %d, %d\n", curr_pos.x, curr_pos.y);
				//printf("COORD_NEXT: %d, %d\n", x_next, y_next);
				//printf("***************\n");
				
				// Check if it's the goal
				if(x_next == x_g && y_next == y_g && !isInLaserView){
					numb_steps = lev + 1;
					return 1;
				}
				
	
				//printf("visited: %d\n", visited[x_next][y_next][lev%4]);
				// Queue new steps
				if(!isInLaserView && !visited[x_next][y_next][(lev+1)%4] && maze[x_next][y_next] == '.'){
					// Queue next values
					next_pos.x = x_next;
					next_pos.y = y_next;
					states.push(next_pos);
					recLev.push(lev+1);
					visited[x_next][y_next][(lev+1)%4] = 1;
				}
			}
		}
	}
	return 0;
}


int main(){
	int t, i, k, x_s, y_s, j, o;
	coord pos;
	scanf("%d", &t);
	o = t;
	
	while(t--){
		// Init
		states = queue<coord>();
		lasers.clear();
		lasers_rot.clear();
		recLev = queue<int>();
		
		// Read Inputs
		scanf("%d %d", &n, &m);
		for(i = 0; i < n; i++){
			scanf("%s", maze[i]);
			for(j = 0; j < m; j++){
				for(k = 0; k < 4; k++){
					visited[i][j][k] = 0;
				}
				if(maze[i][j] == 'S'){
					x_s = i;
					y_s = j;
					
					maze[i][j] = '.';
				}
				if(maze[i][j] == 'G'){
					x_g = i;
					y_g = j;
					
					maze[i][j] = '.';
				}
				if(maze[i][j] == '<'){
					pos.x = i;
					pos.y = j;
				
					lasers.push_back(pos);
					lasers_rot.push_back(3);
				}
				if(maze[i][j] == '^'){
					pos.x = i;
					pos.y = j;
				
					lasers.push_back(pos);
					lasers_rot.push_back(0);
				}
				if(maze[i][j] == '>'){
					pos.x = i;
					pos.y = j;
				
					lasers.push_back(pos);
					lasers_rot.push_back(1);
				}
				if(maze[i][j] == 'v'){
					pos.x = i;
					pos.y = j;
				
					lasers.push_back(pos);
					lasers_rot.push_back(2);
				}
			}
		}
		
		// Initialization
		res = 0;
		coord start_pos;
		start_pos.x = x_s;
		start_pos.y = y_s;
		visited[x_s][y_s][0] = 1;
		recLev.push(0);
		states.push(start_pos);
		
		//int isInLaserView = draw_line(1, 0, 1, 1, 3);
		printf("Case #%d: ", o-t);
		
		int res = BFS();
		if(res){
			printf("%d\n", numb_steps);
		}
		else{
			printf("impossible\n");
		}

		// Print Maze
		//for(i = 0; i < n; i++){
		//	printf("%s\n", maze[i]);
		//}
		
	}
	return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <utility> 
#include <stack>
#include <cstring> 
#include <math.h>
#include<cstdio>
#include<deque>
#include<sstream>
using namespace std;
#define mp make_pair 
int t  , n , m  , sx , sy , tt , ex , ey , g  ; 
char v[111][111];
int vis[111][111][5];
vector<pair < int , int > > laser  ; 
int dx[] = {0 ,  0 , 1 ,-1 , 1 , 1 , -1 , -1 } ;
int dy[] = {1 , -1 , 0 , 0 , 1 ,-1 ,  1 , -1 } ; 
map < char , int >  ma ;
void bfs () {
	int res = -1 ;
	queue<pair < pair < int , int >   , int >  >	q ; 
	q.push(mp ( mp(sx , sy ) , 0 ) ) ;
	while ( !q.empty()) {
		int fx = q.front().first.first;
		int fy = q.front().first.second;
		int fn = q.front().second;
		q.pop() ;

		bool ot = 0 ; 
		if ( fn !=  0 )	{
			for ( int i = 0 ; i < laser.size() ; i++) {
				g = 0 ;
				int rz =( ma [ v[laser[i].first][laser[i].second] ] +fn ) %4 ;

				if ( fy == laser[i].second ) {
					if ( rz == 2 && laser[i].first < fx  ) {
						for ( int j = laser[i].first+1  ; j < fx ; j ++ ) {
							if (v[j][fy] != '.' ) {
								g = 1 ; break ; 
							}
						}
						if ( !g ) {
							ot = 1 ; break;
						}
					}
					else if ( rz == 0 && laser[i].first  > fx  )  {
						for ( int j = fx +1  ; j <laser[i].first ; j ++ ) {
							if (v[j][fy] != '.' ) {
								g = 1 ; break ; 
							}
						}
						if ( !g ) {
							ot = 1 ; break;
						}
					}
				}
				else if ( fx == laser[i].first) {
					if (  rz == 1 && laser[i].second> fy) {
						for ( int j = fy+1 ; j < laser[i].second; j++) {
							if ( v[fx][j] != '.'  ) {
								g = 1 ; break;
							}
						}
						if ( !g ){
							ot = 1 ; break;
						}
					}
					else if  ( rz == 3 && laser[i].second <fy  ) {
						for ( int j =  laser[i].second+1 ; j < fy ; j++) {
							if ( v[fx][j] != '.'  ) {
								g = 1 ; break;
							}
						}
						if ( !g ){
							ot = 1 ; break;
						}
					}
				}
			}

		}
		if ( ot ) {
			continue;
		}

		if (ex == fx && ey == fy ) {
			res = fn ;
			break;
		}
		if ( vis[fx][fy][fn%4] ) 
			continue ; 

		vis[fx][fy][fn%4] = 1; 

		for ( int i = 0 ; i < 4 ; i ++) {
			int nx = dx[i] +fx ; 
			int ny = dy[i] +fy;
			int nfn = fn + 1 ; 
			if (  nx >= 0 && ny >= 0 &&  nx < n && ny < m ) {
				if ( v[nx][ny] =='.' )
					q.push(mp(mp( nx , ny ) , nfn) ) ;	
			}
		}
	}

	if ( res == -1 ) 
		printf("Case #%d: impossible\n",tt++) ; 
	else 
		printf("Case #%d: %d\n",tt++ , res) ; 


}	
int  main()
{
	freopen("input.in" , "rt" , stdin);
	freopen ("out.txt","w",stdout);

	tt  =   1 ; 
	ma['^'] = 0 ; 
	ma['<'] = 1 ; 
	ma['v'] = 2 ; 
	ma['>'] = 3 ; 

	scanf("%d",&t) ; 
	while(t-- ) {
		laser.clear();
		memset(vis,0,sizeof(vis));
		scanf("%d%d",&n,&m) ;
		for ( int i = 0 ; i < n ; i++) 
			for ( int j = 0 ; j < m ; j++ ) {
				cin >> v[i][j];

				if ( v[i][j] == '<' || v[i][j] == '>' || v[i][j] == '^' || v[i][j] =='v' ) 
					laser.push_back(mp(i,j));
				if ( v[i][j] == 'S' ) {
					v[i][j]  = '.';
					sx = i ; sy = j ;
				}
				if (v[i][j] == 'G' ) {
					v[i][j]  = '.';
					ex = i ; ey = j ;
				}
			}
			bfs();
	}

	return 0 ;
}
#include <iostream>
#include <complex>
#include <sstream>
#include <string>
#include <algorithm>
#include <deque>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <vector>
#include <set>
#include <limits>
#include <cstdio>
#include <cctype>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
using namespace std;
#define REP(i, j) for(int i = 0; i < (int)(j); ++i)
#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)
#define SORT(v) sort((v).begin(), (v).end())
#define REVERSE(v) reverse((v).begin(), (v).end())
typedef complex<double> P;
const int INF = 1e9 + 7;

int H, W;
int my[] = {-1, 0, 1, 0};
int mx[] = {0, 1, 0, -1};

class C{
  public:
    int cnt, y, x;
    C(){}
    C( int _c, int _y, int _x) { cnt = _c; y = _y; x = _x; }
};

bool subcheck(int y, int x, int py, int px, int p, int t, vector< vector<int> > &v){
  while(y >= 0 && x >= 0 && y < H && x < W && v[y][x] != -2){
    if(v[y][x] <= -1) { y += py; x += px; continue; }
    if((v[y][x] + p) % 4 == t) return false;
    else if((v[y][x] + p) % 4 >= 0) return true;
  }
  return true;
}

bool check(int y, int x, int cnt, vector< vector<int> > &v){
  REP(i, 4) if(!subcheck(y, x, my[i], mx[i], cnt % 4, i, v)) return false;
  return true;
}

int solve(vector< vector<int> > &v, int sy, int sx, int gy, int gx){
  queue<C> open;
  open.push(C(0, sy, sx));
  vector< vector< vector<int> > > closed(H, vector< vector<int> >(W, vector<int>(4, INF)));
  closed[sy][sx][0] = 0;
  while(!open.empty()){
    C n = open.front(); open.pop();
    REP(i, 4){
      int ny = n.y + my[i], nx = n.x + mx[i];
      if(ny >= 0 && nx >= 0 && ny < H && nx < W && v[ny][nx] == -1 && check(ny, nx, n.cnt + 1, v) && closed[ny][nx][(n.cnt + 1) % 4] > n.cnt + 1){
        closed[ny][nx][(n.cnt + 1) % 4] = n.cnt + 1;
        open.push(C(n.cnt + 1, ny, nx));
      }
    }
  }
  int ans = INF;
  REP(i, 4) ans = min(ans, closed[gy][gx][i]);
  return ans;
}

int main() {
  int T; cin >>T;
  REP(t, T){
    cin >>H >>W;
    vector< vector<int> > v(H, vector<int>(W, -1));
    int sy, sx, gy, gx;
    REP(i, H){
      string s; cin >>s;
      REP(j, W){
        if(s[j] == 'S')  { sy = i; sx = j;}
        if(s[j] == 'G') { gy = i; gx = j; }
        if(s[j] == '#') { v[i][j] = -2; }
        if(s[j] == 'v') v[i][j] = 0;
        if(s[j] == '<') v[i][j] = 1;
        if(s[j] == '^') v[i][j] = 2;
        if(s[j] == '>') v[i][j] = 3;
      }
    }
    int ans = solve(v, sy, sx, gy, gx);
    cout <<"Case #" <<t + 1 <<": ";
    if(ans == INF) cout <<"impossible" <<endl;
    else cout <<ans <<endl;
  }
  return 0;
}

// esta3anna 3al sha2a belAllah ..
#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<sstream>
#include<limits.h>
#include<iomanip>
#include<cstring>
#include<bitset>
#include<fstream>
#include<cmath>
#include<cassert>
#include <stdio.h>
#include<ctype.h>
using namespace std;
#define rep(i,n,m) for(int i = (int)(n), _m = (int)(m); i < _m; ++ i)
#define	rrep(i,n,m) for(int i = (int)(n), _m = (int)(m); i >= _m; -- i)
#define foreach(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mems(arr, v) memset(arr, v, sizeof arr)
#define setBit(mask, bit) ((mask) | (1LL << (bit)))
#define resetBit(mask, bit) ((mask) & (~(1LL << (bit))))
#define flipBit(mask, bit) ((mask) ^ (1LL << (bit)))
#define is0(mask, bit)(((mask) & (1LL << (bit))) == 0)
#define is1(mask, bit)(((mask) & (1LL << (bit))) != 0)
#define removeLastBit(mask) ((mask) & ((mask) - 1LL))
#define firstBitOn(mask) ((mask) & ~((mask) - 1LL))
#define grayCode(mask) ((mask) ^ ((mask) << 1LL))
#define repSubMasks(subMask, mask) for(ll subMask = (ll)(mask), _mask = subMask; subMask; subMask = _mask & (subMask - 1))
int countBits(long long mask) {int res = 0; while(mask) mask &= (mask - 1), ++ res; return res;}
string toString(long long n) {stringstream ss; ss << n; return ss.str();}
long long toNumber(string s) {stringstream ss; long long n; ss << s; ss >> n; return n;}
#define INT_MAX  1000000000
#define INT_MIN -1000000000
#define INF 1000000000
#define EPS 1e-9
#define MOD 1000000007
#define debug(x) cout << #x << " : " << x << endl
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
#define Read() freopen("input.txt","r",stdin)
#define Write() freopen("output.txt","w",stdout)
vector<pair<int, int> > turrets;
bool wall[101][101], turret[101][101];
int n, m;
int di[] = {-1, 0, +1, 0};
int dj[] = {0, +1, 0, -1};
int steps[100*101][4];
bool etlaswa3(int y, int x, int rotations) {
	rep(i, 0, turrets.size()) {
		int dir = (rotations + turrets[i].second) % 4;
		int curr_y = turrets[i].first / m, curr_x = turrets[i].first % m;
		while(curr_y >= 0 && curr_y < n && curr_x >= 0 && curr_x < m) {
			if(curr_y == y && curr_x == x) return true;
			if(wall[curr_y][curr_x] || turret[curr_y][curr_x]) break;
			curr_y += di[dir];
			curr_x += dj[dir];
		}
	}
	return false;
}
void BFS(int start, int goal) {
	queue<pair<int, int> > q;
	q.push(mp(start, 0));
	mems(steps, -1);
	steps[start][0] = 0;
	while(!q.empty()) {
		int pos = q.front().first, rotations = q.front().second;
		q.pop();
		if(pos != start && etlaswa3(pos / m, pos % m, rotations)) continue;
		if(pos == goal) {
			cout << steps[pos][rotations] << endl;
			return;
		}
		rep(k, 0, 4) {
			int ni = pos / m + di[k];
			int nj = pos % m + dj[k];
			int npos = ni * m + nj;
			if(!(ni >= 0 && ni < n && nj >= 0 && nj < m)) continue;
			if(wall[ni][nj] || turret[ni][nj]) continue;
			if(steps[npos][(rotations + 1) % 4] != -1) continue;
			steps[npos][(rotations + 1) % 4] = steps[pos][rotations] + 1;
			q.push(mp(npos, (rotations + 1) % 4));
		}
	}
	cout << "impossible" << endl;
}
int main() {
	Read(); Write();
	char ch;
	int cases, start, goal;
	cin >> cases;
	rep(T, 1, cases + 1) {
		cin >> n >> m;
		mems(wall, false); mems(turret, false);
		turrets.clear();
		rep(i, 0, n * m) {
			cin >> ch;
			if(ch == 'S') start = i;
			if(ch == 'G') goal = i;
			if(ch == '#') wall[i / m][i % m] = true;
			if(string("^>v<").find(ch) != -1) turrets.pb(mp(i, string("^>v<").find(ch)));
		}
		cout << "Case #" << T << ": ";
		BFS(start, goal);
	}
}
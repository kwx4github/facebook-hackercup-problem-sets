#include <iostream>
#include <set>
#include <vector>
#include <map>

using namespace std;

const int MAXN = 100 + 5;

int m, n;
int grid[MAXN][MAXN];
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

bool in_grid(int r, int c)
{
	return 0 <= r && r < m && 0 <= c && c < n;
}

bool is_square(int r, int c)
{
	return in_grid(r, c) && (grid[r][c] == -1 || grid[r][c] == -2 || grid[r][c] == 10);
}

int grid_to_int(int r, int c, int t)
{
	return MAXN * MAXN * t + MAXN * r + c;
}

int shortest[MAXN * MAXN * 5];
map<int, vector<int> > neighbors;
set<int> bad_nodes;

void clear_grid()
{
	for (int i = 0; i < MAXN; i++)
		for (int j = 0; j < MAXN; j++)
			grid[i][j] = -1000;
	for (int i = 0; i < MAXN * MAXN * 5; i++)
		shortest[i] = MAXN * MAXN * 10;
	neighbors.clear();
	bad_nodes.clear();
}

void find_shortest(int source)
{
	for (int i = 0; i < neighbors[source].size(); i++)
	{
		int neighbor = neighbors[source][i];
		if (shortest[source] + 1 < shortest[neighbor])
		{
			shortest[neighbor] = shortest[source] + 1;
			find_shortest(neighbor);
		}
	}
}

void solve_case(int t)
{
	clear_grid();
	cin >> m >> n;
	int sx, sy, gx, gy;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
		{
			char c; cin >> c;
			if (c == 'S') { grid[i][j] = -1; sx = i; sy = j; }
			if (c == 'G') { grid[i][j] = -2; gx = i; gy = j; }
			if (c == '^') grid[i][j] = 0;
			if (c == '>') grid[i][j] = 1;
			if (c == 'v') grid[i][j] = 2;
			if (c == '<') grid[i][j] = 3;
			if (c == '.') grid[i][j] = 10;
		}	
	
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
			if (0 <= grid[i][j] && grid[i][j] <= 3)
			{
				int offset = grid[i][j];
				// shoots up: at time (4 - offset) % 4
				// shoots right: at time (5 - offset) % 4
				// shoots down: at time (6 - offset) % 4
				// shoots left: at time (7 - offset) % 4
				for (int ii = i - 1; ii >= 0 && grid[ii][j] != -1000 && !(grid[ii][j] >= 0 && grid[ii][j] <= 3); ii--)
					bad_nodes.insert(grid_to_int(ii, j, (4 - offset) % 4));
				for (int jj = j + 1; jj <= n - 1 && grid[i][jj] != -1000 && !(grid[i][jj] >= 0 && grid[i][jj] <= 3); jj++)
					bad_nodes.insert(grid_to_int(i, jj, (5 - offset) % 4));
				for (int ii = i + 1; ii <= m - 1 && grid[ii][j] != -1000 && !(grid[ii][j] >= 0 && grid[ii][j] <= 3); ii++)
					bad_nodes.insert(grid_to_int(ii, j, (6 - offset) % 4));
				for (int jj = j - 1; jj >= 0 && grid[i][jj] != -1000 && !(grid[i][jj] >= 0 && grid[i][jj] <= 3); jj--)
					bad_nodes.insert(grid_to_int(i, jj, (7 - offset) % 4));
			}

	bad_nodes.erase(grid_to_int(sx, sy, 0));

	// draw edges
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
			if (grid[i][j] == -1 || grid[i][j] == -2 || grid[i][j] == 10)
				for (int k = 0; k < 4; k++)
				{
					int new_x = i + dx[k];
					int new_y = j + dy[k];
					if (is_square(new_x, new_y)) 
						for (int t = 0; t < 4; t++)
						{
							int old_node = grid_to_int(i, j, t);
							int new_node = grid_to_int(new_x, new_y, (t + 1) % 4);
							if (bad_nodes.find(old_node) == bad_nodes.end() && bad_nodes.find(new_node) == bad_nodes.end())
								neighbors[old_node].push_back(new_node);
						}
				}

	// Get from grid_to_int(sx, sy, 0) to grid_to_int(gx, gy, 0), grid_to_int(gx, gy, 1), etc.
	// We will compute the shortest distance from (sx, sy, 0) to every other point.

	shortest[grid_to_int(sx, sy, 0)] = 0;
	find_shortest(grid_to_int(sx, sy, 0));

	int ans = MAXN * MAXN * 10;
	for (int i = 0; i < 4; i++)
		ans = min(ans, shortest[grid_to_int(gx, gy, i)]);
	if (ans == MAXN * MAXN * 10)
		cout << "Case #" << t << ": Impossible\n";
	else
		cout << "Case #" << t << ": " << ans << endl;
}

int main()
{
	int T; cin >> T;
	for (int t = 0; t < T; t++)
		solve_case(t + 1);
	return 0;
}

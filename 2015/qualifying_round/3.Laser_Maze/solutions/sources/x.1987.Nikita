#include <cstdio>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>
using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)

const int INF = (int)1e9;

const string DIRECTIONS = "<^>v";
const int dx[] = {0, -1, 0, 1};
const int dy[] = {-1, 0, 1, 0};

inline int getDirection(char dir) {
    for (int i = 0; i < 4; i++) {
        if (dir == DIRECTIONS[i]) {
            return i;
        }
    }
    eprintf("invalid direction %c\n", dir);
    assert(false);
}


int main() {
    clock_t start = clock();
    int tests;
    assert(scanf("%d", &tests) == 1);
    for (int test = 1; test <= tests; test++) {
        eprintf("test %d\n", test);
        clock_t testStart = clock();
        int n, m;
        assert(scanf("%d%d", &n, &m) == 2);
        int board[n][m];
        int sX = -1, sY = -1;
        int tX = -1, tY = -1;
        for (int i = 0; i < n; i++) {
            char temp[m + 2];
            scanf("%s", temp);
            for (int j = 0; j < m; j++) {
                switch(temp[j]) {
                case '.':
                    board[i][j] = -1;
                    break;
                case '#':
                    board[i][j] = -2;
                    break;
                case 'S':
                    sX = i, sY = j;
                    board[i][j] = -1;
                    break;
                case 'G':
                    tX = i, tY = j;
                    board[i][j] = -1;
                    break;
                case '<':
                case '^':
                case '>':
                case 'v':
                    board[i][j] = getDirection(temp[j]);
                    break;
                default:
                    eprintf("unknown char %c\n", temp[j]);
                    assert(false);
                };
            }
        }
        assert(sX != -1 && sY != -1);
        assert(tX != -1 && tY != -1);
        bool dead[4][n][m];
        for (int state = 0; state < 4; state++) {
            for (int x = 0; x < n; x++) {
                for (int y = 0; y < m; y++) {
                    dead[state][x][y] = false;
                }
            }
            for (int x = 0; x < n; x++) {
                for (int y = 0; y < m; y++) {
                    if (board[x][y] >= 0 && board[x][y] < 4) {
                        int dir = (board[x][y] + state) & 3;
                        int xx = x + dx[dir];
                        int yy = y + dy[dir];
                        for (; ;) {
                            if (xx < 0 || xx >= n || yy < 0 || yy >= m
                                || board[xx][yy] != -1) {
                                break;
                            }
                            dead[state][xx][yy] = true;
                            xx += dx[dir];
                            yy += dy[dir];
                        }
                    }
                }
            }
        }
        int d[4][n][m];
        for (int state = 0; state < 4; state++) {
            for (int x = 0; x < n; x++) {
                for (int y = 0; y < m; y++) {
                    d[state][x][y] = INF;
                }
            }
        }
        queue < pair <int, pair <int, int> > > q;
        d[0][sX][sY] = 0;
        q.push({0, {sX, sY}});
        int answer = INF;
        while (!q.empty()) {
            int state = q.front().first;
            int x = q.front().second.first;
            int y = q.front().second.second;
            q.pop();
            if (x == tX && y == tY) {
                answer = d[state][x][y];
                break;
            }
            for (int dir = 0; dir < 4; dir++) {
                int nx = x + dx[dir];
                int ny = y + dy[dir];
                int nstate = (state + 1) & 3;
                if (nx < 0 || nx >= n || ny < 0 || ny >= m || board[nx][ny] != -1) {
                    continue;
                }
                if (!dead[nstate][nx][ny] && d[nstate][nx][ny] > d[state][x][y] + 1) {
                    d[nstate][nx][ny] = d[state][x][y] + 1;
                    q.push({nstate, {nx, ny}});
                }
            }
        }
        if (answer == INF) {
            printf("Case #%d: Impossible\n", test);
        } else {
            printf("Case #%d: %d\n", test, answer);
        }
        eprintf("Test %d end. %.2f\n", test, (double)(clock() - testStart) / CLOCKS_PER_SEC);
    }
    eprintf("Total: %.2f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
    return 0;
}

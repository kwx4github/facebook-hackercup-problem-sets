#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <cassert>
#include <memory.h>
using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define foreach(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
typedef long long ll;
typedef pair<int, int> pii;
typedef long double ld;

const int di[] = {-1, 0, 1, 0};
const int dj[] = {0, -1, 0, 1};


int n, m;
char s[110][110];
bool canmove[110][110][4];
int qb, qf, q[110*110*4][3];
int path[110][110][4];

bool is_turret(char c) {
	return c == 'v' || c == '^' || c == '<' || c == '>';
}

void inq(int i, int j, int d) {
	int r = d % 4;
	path[i][j][r] = d;
	q[qf][0] = i;
	q[qf][1] = j;
	q[qf][2] = d;
	qf++;
}

void solve() {
	scanf("%d %d", &n, &m);
	forn(i, n) scanf("%s", s[i]);

	forn(w, 4) {
		forn(i, n) forn(j, m) canmove[i][j][w] = s[i][j] != '#';
		forn(i, n) forn(j, m)
			if (is_turret(s[i][j])) {
				int dir = 0;
				if (s[i][j] == '<') dir = 1;
				if (s[i][j] == 'v') dir = 2;
				if (s[i][j] == '>') dir = 3;

				dir = (dir - w + 4) % 4;

				int ci = i, cj = j;
				while (true) {
					canmove[ci][cj][w] = false;
					ci += di[dir];
					cj += dj[dir];
					if (ci < 0 || ci >= n || cj < 0 || cj >= m)
						break;
					if (s[ci][cj] == '#' || is_turret(s[ci][cj]))
						break;
				}
			}
	}

	memset(path, 0xff, sizeof(path));
	int si = -1, sj = -1, gi = -1, gj = -1;
	forn(i, n) forn(j, m) {
		if (s[i][j] == 'S') si = i, sj = j;
		if (s[i][j] == 'G') gi = i, gj = j;
	}
	qb = qf = 0;
	inq(si, sj, 0);

	while (qb < qf) {
		int ci = q[qb][0];
		int cj = q[qb][1];
		int cd = q[qb][2];
		qb++;

		forn(e, 4) {
			int ni = ci + di[e];
			int nj = cj + dj[e];
			int nd = cd + 1;

			if (ni < 0 || ni >= n || nj < 0 || nj >= m)
				continue;

			if (canmove[ni][nj][nd % 4] && path[ni][nj][nd % 4] == -1) {
				inq(ni, nj, nd);
				if (ni == gi && nj == gj) {
					printf("%d\n", nd);
					return;
				}
			}
		}
	}

	printf("impossible\n");
}

int main() {
	int t;
	scanf("%d", &t);
	for (int q = 1; q <= t; q++) {
		printf("Case #%d: ", q);
		solve();
	}
	return 0;
}

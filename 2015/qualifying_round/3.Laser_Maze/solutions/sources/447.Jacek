#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REP(i,n) FOR(i,0,n)
#define REPD(i,n) FORD(i,0,n)
#define VAR(v,w) __typeof(w) v=(w)
#define FORE(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define SIZE(c) ((int)(c).size())
#define MP make_pair
#define FT first
#define SD second
#define CLEAR(a) memset((a), 0, sizeof(a))
#define INT(x) int x; scanf("%d", &x)
#define LLG(x) LL x; scanf("%lld", &x)
#define STR(n,x) char x[n]; scanf("%s", x)
#define LINE(n,x) char x[n]; gets(x)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;
typedef vector<PII> VII;
typedef vector<double> VD;
typedef vector<LD> VLD;
typedef vector<LL> VLL;
typedef vector<bool> VB;

void GEN(int a, int b, int c, int r, int k, int x[]) {
	x[0] = a;
	FOR(i,1,k) x[i] = (LL(x[i - 1]) * b + c) % r;
}

void oneCase();

int main() {
	int ttt;
	scanf("%d\n", &ttt);
	REP(tt, ttt) {
		printf("Case #%d: ", tt + 1);
		oneCase();
		fprintf(stderr, "Case #%d.\n", tt + 1);
		fflush(stderr);
	}
}




const int DX[4] = {1, 0, -1, 0};
const int DY[4] = {0, 1, 0, -1};
const char L[5] = "v>^<";
const int INF = 1000000000;
char maze[110][110];
char space[4][110][110];
int dist[4][110][110];

void oneCase() {
	INT(n);
	INT(m);
	REP(i,n) scanf("%s", maze[i + 1] + 1);
	n += 2;
	m += 2;
	REP(i,n) maze[i][0] = maze[i][m - 1] = '#';
	REP(j,m) maze[0][j] = maze[n - 1][j] = '#';
	int si, sj, gi, gj;
	REP(k,4) {
		REP(i,n) REP(j,m) {
			space[k][i][j] = '.';
			switch (maze[i][j]) {
				case '.':
					break;
				case 'S':
					si = i;
					sj = j;
					break;
				case 'G':
					gi = i;
					gj = j;
					break;
				default:
					space[k][i][j] = '#';
					break;
			}
		}
		REP(i,n) REP(j,m) {
			int d = string(L).find(maze[i][j]);
			if (d == string::npos) continue;
			d = (d - k + 4) & 3;
			for (int x = i + DX[d], y = j + DY[d]; maze[x][y] == '.' || maze[x][y] == 'S' || maze[x][y] == 'G'; x += DX[d], y += DY[d])
				space[k][x][y] = '#';
		}
	}
	REP(k,4) REP(i,n) REP(j,m) dist[k][i][j] = INF;
	dist[0][si][sj] = 0;
	queue<pair<int, PII> > q;
	q.push(MP(0, MP(si, sj)));
	while (!q.empty()) {
		pair<int, PII> p = q.front();
		q.pop();
		int k = p.FT, i = p.SD.FT, j = p.SD.SD;
		REP(d,4) {
			int k1 = (k + 1) & 3, i1 = i + DX[d], j1 = j + DY[d];
			if (space[k1][i1][j1] == '.' && dist[k1][i1][j1] == INF) {
				dist[k1][i1][j1] = dist[k][i][j] + 1;
				q.push(MP(k1, MP(i1, j1)));
			}
		}
	}
	int res = INF;
	REP(k,4) res = min(res, dist[k][gi][gj]);
	if (res == INF) printf("impossible\n");
	else printf("%d\n", res);
}

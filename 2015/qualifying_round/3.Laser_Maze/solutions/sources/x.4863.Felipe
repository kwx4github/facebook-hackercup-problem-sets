#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <cmath>
#include <cstring>
#include <queue>
#define INF 1000000000

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

char matrixAux[5][110][110];
char matrix[110][110];
int n, m;
vector< pair<int, pair< int, int > > > vet;
vector<pair<int, int> > AdjList[100000];

void preencher(int estado, int i, int j, int atual){
	if(estado == 0){
		matrixAux[atual][i][j] = '#';

		for(int k = j - 1; k >= 0; k--){
			if(matrixAux[atual][i][k] == '#' || matrixAux[atual][i][k] == '^' || matrixAux[atual][i][k] == 'v' || matrixAux[atual][i][k] == '<' || matrixAux[atual][i][k] == '>')
				break;
			matrixAux[atual][i][k] = '#';
		}
	} else if(estado == 1){
		matrixAux[atual][i][j] = '#';

		for(int k = i - 1; k >= 0; k--){
			if(matrixAux[atual][k][j] == '#' || matrixAux[atual][k][j] == '^' || matrixAux[atual][k][j] == 'v' || matrixAux[atual][k][j] == '<' || matrixAux[atual][k][j] == '>')
				break;
			matrixAux[atual][k][j] = '#';
		}
	} else if(estado == 2){
		matrixAux[atual][i][j] = '#';

		for(int k = j + 1; k < m; k++){
			if(matrixAux[atual][i][k] == '#' || matrixAux[atual][i][k] == '^' || matrixAux[atual][i][k] == 'v' || matrixAux[atual][i][k] == '<' || matrixAux[atual][i][k] == '>')
				break;
			matrixAux[atual][i][k] = '#';
		}
	} else if(estado == 3){
		matrixAux[atual][i][j] = '#';

		for(int k = i + 1; k < n; k++){
			if(matrixAux[atual][k][j] == '#' || matrixAux[atual][k][j] == '^' || matrixAux[atual][k][j] == 'v' || matrixAux[atual][k][j] == '<' || matrixAux[atual][k][j] == '>')
				break;
			matrixAux[atual][k][j] = '#';
		}
	}
}

int main(){
	int t, cases = 0, startI, startJ, finalI, finalJ;

	scanf("%d", &t);

	while(t--){
		for(int i = 0; i < 50100; i++){
			AdjList[i].clear();
		}
		
		cases++;
		vet.clear();		

		char c;

		scanf("%d %d", &n, &m);

		for(int i = 0; i < n; i++){
			scanf("%c", &c);
			for(int j = 0; j < m; j++){
				scanf("%c", &matrix[i][j]);
				matrixAux[0][i][j] = matrixAux[1][i][j] = matrixAux[2][i][j] = matrixAux[3][i][j] = matrix[i][j];

				if(matrix[i][j] == 'S'){
					startI = i;
					startJ = j;				
				}

				if(matrix[i][j] == 'G'){
					finalI = i;
					finalJ = j;				
				}

				if(matrix[i][j] == '<')
					vet.push_back(make_pair(0, make_pair(i, j)));
				else if(matrix[i][j] == '^')
					vet.push_back(make_pair(1, make_pair(i, j)));
				else if(matrix[i][j] == '>')
					vet.push_back(make_pair(2, make_pair(i, j)));
				else if(matrix[i][j] == 'v')
					vet.push_back(make_pair(3, make_pair(i, j)));
			}
		}

		for(int i = 0; i < 4; i++){
			for(int j = 0; j < vet.size(); j++){
				preencher((vet[j].first + i) % 4, vet[j].second.first, vet[j].second.second, i);
			}
		}

		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				for(int k = 0; k < 4; k++){	
					if(!(i == startI && j == startJ && k == 0))				
					if(matrixAux[k][i][j] == '#')
						continue;

					int a = (i * m + j) * 4 + k;
					int b;
					
					if(i - 1 >= 0 && matrixAux[(k + 1) % 4][i - 1][j] != '#'){			
						b = ((i - 1) * m + j) * 4 + ((k + 1) % 4);
						AdjList[a].push_back(make_pair(b, 1));
					}
					if(j - 1 >= 0 && matrixAux[(k + 1) % 4][i][j - 1] != '#'){
									
						b = (i * m + (j - 1)) * 4 + ((k + 1) % 4);
						AdjList[a].push_back(make_pair(b, 1));
					}
					if(j + 1 < m && matrixAux[(k + 1) % 4][i][j + 1] != '#'){
						b = (i * m + (j + 1)) * 4 + ((k + 1) % 4);
						AdjList[a].push_back(make_pair(b, 1));
					}
					if(i + 1 < n && matrixAux[(k + 1) % 4][i + 1][j] != '#'){
						b = ((i + 1) * m + j) * 4 + ((k + 1) % 4);
						AdjList[a].push_back(make_pair(b, 1));
					}
				}	
			}
		}

		int a = (finalI * m + finalJ) * 4;

		for(int i = 0; i < 4; i++){
			AdjList[a + i].push_back(make_pair(50000, 0));
		}

		a = (startI * m + startJ) * 4;
		
		vi dist(100100, INF); dist[a] = 0;
  		priority_queue< ii, vector<ii>, greater<ii> > pq; pq.push(ii(0, a));
		
		while (!pq.empty()) {
    			ii front = pq.top(); pq.pop();
    			int d = front.first, u = front.second;
    			if (d > dist[u]) continue;
    				for (int j = 0; j < (int)AdjList[u].size(); j++) {
      					ii v = AdjList[u][j];
      					if (dist[u] + v.second < dist[v.first]) {
        					dist[v.first] = dist[u] + v.second;
        					pq.push(ii(dist[v.first], v.first));
  					}
				}
		}

		printf("Case #%d: ", cases);
		
		if(dist[50000] == INF)
			printf("impossible\n");
		else
			printf("%d\n", dist[50000]);		
	}

	return 0;
}

#include <iostream>
#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <string>
using namespace std;

int N, M;
string board[103];
int mark[103][103][4];
int s[2], g[2];
int vis[103][103][4];
int bfs(){
	for(int i=0;i<N;++i){
		for(int j=0;j<M;++j){
			vis[i][j][0] = vis[i][j][1] = vis[i][j][2] = vis[i][j][3] = 0;
		}
	}
	queue<pair<pair<int,int>,pair<int,int> > > q;
	q.push(make_pair(make_pair(s[0],s[1]),make_pair(0,0)));
	vis[s[0]][s[1]][0] = 1;
	while(!q.empty()){
		pair<pair<int,int>,pair<int,int> > cur = q.front();
		q.pop();
		int row = cur.first.first;
		int col = cur.first.second;
		int state = cur.second.first;
		int depth = cur.second.second;
		int next = (state+1)%4;
		//if(mark[row][col][state])return -1;
		if(g[0]==row && g[1] ==col){
			return depth;
		}
		if(row>0&&!vis[row-1][col][next]&&!mark[row-1][col][next]){
			vis[row-1][col][next] = 1;
			q.push(make_pair(make_pair(row-1,col),make_pair(next,depth+1)));
		}
		if(col>0&&!vis[row][col-1][next]&&!mark[row][col-1][next]){
			vis[row][col-1][next] = 1;
			q.push(make_pair(make_pair(row,col-1),make_pair(next,depth+1)));
		}
		if(col+1<M&&!vis[row][col+1][next]&&!mark[row][col+1][next]){
			vis[row][col+1][next] = 1;
			q.push(make_pair(make_pair(row,col+1),make_pair(next,depth+1)));
		}
		if(row+1<N&&!vis[row+1][col][next]&&!mark[row+1][col][next]){
			vis[row+1][col][next] = 1;
			q.push(make_pair(make_pair(row+1,col),make_pair(next,depth+1)));
		}
	}
	return -1;
}

int main(){
	int TC, T=1;
	scanf("%d",&TC);
	while(TC--){
		printf("Case #%d: ",T++);
		scanf(" %d %d",&N,&M);
		for(int i=0;i<N;++i){
			cin >> board[i];
		}
		for(int i=0;i<N;++i){
			for(int j=0;j<M;++j){
				for(int k=0;k<4;++k){
					mark[i][j][k] = 0;
				}
			}
		}
		for(int i=0;i<N;++i){
			for(int j=0;j<M;++j){
				if(board[i][j]=='#'){
					for(int k=0;k<4;++k){
						mark[i][j][k] = 1;
					}
				}
				else if(board[i][j]=='S'){
					s[0] = i;
					s[1] = j;
				}
				else if(board[i][j]=='G'){
					g[0] = i;
					g[1] = j;
				}
				else if(board[i][j]!='.'){
					int m[4];
					if(board[i][j] == '^')m[0]=0;
					else if(board[i][j]=='<')m[0]=1;
					else if(board[i][j]=='v')m[0]=2;
					else if(board[i][j]=='>')m[0]=3;
					for(int k=1;k<4;++k){
						m[k] = (m[k-1]+1)%4;
					}
					for(int k=0;k<4;++k) mark[i][j][k] = 1;
					for(int k=i-1;k>=0;--k){
						if(board[k][j]!='.')if(board[k][j]!='S' && board[k][j]!='G')break;
						mark[k][j][m[0]] = 1;
					}
					for(int k=j+1;k<M;++k){
						if(board[i][k]!='.')if(board[i][k]!='S' && board[i][k]!='G')break;
						mark[i][k][m[1]] = 1;
					}
					for(int k=i+1;k<N;++k){
						if(board[k][j]!='.')if(board[k][j]!='S' && board[k][j]!='G')break;
						mark[k][j][m[2]] = 1;
					}
					for(int k=j-1;k>=0;--k){
						if(board[i][k]!='.')if(board[i][k]!='S' && board[i][k]!='G')break;
						mark[i][k][m[3]] = 1;
					}
				}
			}
		}
		int ans = bfs();
		if(ans == -1)printf("impossible\n");
		else printf("%d\n",ans);
	}
	return 0;
}
#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <queue>
#include <map>
#include <string>
#include <stack>
#include <bitset>
#include <vector>

#define _max(a,b) ((a)>(b)?(a):(b))
#define _min(a,b) ((a)>(b)?(b):(a))

const int maxi = 1 << 30;
const int mini = 1 << 31;
const int inf = 0x3f3f3f3f;
const int maxn = 2000000;

using namespace std;

char mat[110][110];
int n, m, sx, sy, ex, ey, head, tail;
bool vis[110][110][4];
int dir[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};

struct node {
    node() {}
    node(int a, int b, int c, int d) { x = a; y = b; step = c; t = d; }
    int x, y, step, t;
}Node;
struct Queue{
    node v;
}q[50000];

void deal(int x, int y, int d, int f) {
    switch(mat[x][y]) {
        case '#': case '<': case '>': case '^': case 'v': return;
    }
    if(x < 0 || y < 0 || x >= n || y >= m) return;
    vis[x][y][f] = 1;
    deal(x+dir[d][0], y+dir[d][1], d, f);
}
void init() {
    vector<pair<int, int> > VP;
    VP.clear();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            switch(mat[i][j]) {
                case '<': case '>': case '^': case 'v': VP.push_back(make_pair(i, j));
                case '#': vis[i][j][0] = vis[i][j][1] = vis[i][j][2] = vis[i][j][3] = 1; break;
                case 'S': sx = i, sy = j; break;
                case 'G': ex = i, ey = j; break;
            }
        }
    }
    for(int i = 0; i < VP.size(); i++) {
        int flag, x = VP[i].first, y = VP[i].second;
        switch(mat[x][y]) {
            case 'v': flag = 0; break;
            case '<': flag = 1; break;
            case '^': flag = 2; break;
            case '>': flag = 3; break;
        }
        deal(x+dir[flag][0], y+dir[flag][1], flag, 0);
        deal(x+dir[(flag+1)%4][0], y+dir[(flag+1)%4][1], (flag+1)%4, 1);
        deal(x+dir[(flag+2)%4][0], y+dir[(flag+2)%4][1], (flag+2)%4, 2);
        deal(x+dir[(flag+3)%4][0], y+dir[(flag+3)%4][1], (flag+3)%4, 3);
    }
//    for(int i = 0; i < VP.size(); i++) {
//        printf("%d %d\n", VP[i].first, VP[i].second);
//    }
}
int bfs() {
    head = tail = 0;
    Queue t;
    t.v = node(sx, sy, 0, 0);
    q[tail++] = t;
    vis[sx][sy][0] = 1;
    while(head < tail) {
        node a;
        a = q[head].v;
        head++;
        if(a.x == ex && a.y == ey) return a.step;
        vis[a.x][a.y][a.t%4] = 1;
        //if(pn.empty())
        //printf("%d %d %d %d\n", a.x, a.y, a.t, a.step);
        for(int i = 0; i < 4; i++) {
            node b;
            b.x = a.x + dir[i][0];
            b.y = a.y + dir[i][1];
            b.step = a.step + 1;
            b.t = a.t + 1;
            if(b.x < 0 || b.y < 0 || b.x >= n || b.y >= m || vis[b.x][b.y][b.t%4]) continue;
            vis[b.x][b.y][b.t%4] = 1;
            t.v = b;
            q[tail++] = t;
        }
    }
    return -1;
}
int main() {
    #ifdef LOCAL
    //freopen("in.txt", "r", stdin);
//    freopen("laser_maze.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);
    #endif
    int T, cas = 1;
    scanf("%d", &T);
    while(T--) {
        memset(vis, 0, sizeof vis);
        scanf("%d%d", &n, &m);
        for(int i = 0; i < n; i++) {
            scanf("%s", mat[i]);
        }
        init();
        /*  for vis
        for(int k = 0; k < 4; k++) {
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < m; j++) {
                    printf("%d", vis[i][j][k]);
                }
                puts("");
            }
            puts("");
        }
*/
        //printf("%d %d %d %d\n", sx, sy, ex, ey);
        int t = bfs();
        printf("Case #%d: ", cas++);
        if(t < 0) puts("impossible");
        else printf("%d\n", t);
    }
    return 0;
}

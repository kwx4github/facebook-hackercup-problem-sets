# include <string>
# include <fstream>
# include <algorithm>
# include <set>
# include <map>
# include <iostream>
# include <vector>
# include <queue>
using namespace std;

enum direction {
	UP = 0,
	RIGHT = 1,
	DOWN = 2,
	LEFT = 3
};

char a[111][111];
int d[111][111][4];

bool isTurret(int i, int j) {
	return a[i][j] >= 0 && a[i][j] <= 4;
}

int main() {
	ifstream cin("input.txt");
	ofstream cout("output.txt");

	int dx[] = { 1, -1, 0, 0 };
	int dy[] = { 0, 0, -1, 1 };

	int t;
	cin >> t;
	for (int test = 0; test < t; test++) {
		int n, m;
		cin >> n >> m;
		memset(a, 0, sizeof(a));
		memset(d, -1, sizeof(d));

		int startX, startY, finishX, finishY;
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				cin >> a[i][j];
				if (a[i][j] == 'S') {
					a[i][j] = '.';
					startX = i;
					startY = j;
				}
				else if (a[i][j] == 'G') {
					a[i][j] = '.';
					finishX = i;
					finishY = j;
				}
				else if (a[i][j] == '^')
					a[i][j] = UP;
				else if (a[i][j] == '<')
					a[i][j] = LEFT;
				else if (a[i][j] == '>')
					a[i][j] = RIGHT;
				else if (a[i][j] == 'v')
					a[i][j] = DOWN;
			}
		}

		queue<pair<pair<int, int>, int> > q;
		q.push(make_pair(make_pair(startX, startY), 0));
		while (!q.empty()) {
			int x = q.front().first.first;
			int y = q.front().first.second;
			int l = q.front().second;
			q.pop();

			if (d[x][y][l % 4] != -1 && d[x][y][l % 4] <= l)
				continue;
			d[x][y][l % 4] = l;

			for (int we = 0; we < 4; we++) {
				int i = x + dx[we];
				int j = y + dy[we];
				if (i < 0 || j < 0 || i >= n || j >= m)
					continue;

				bool ok = true;

				for (int re = i - 1; re >= 0; re--) {
					if (isTurret(re, j) && (a[re][j] + (l + 1)) % 4 == DOWN)
						ok = false;
					if (isTurret(re, j) || a[re][j] == '#')
						break;
				}

				for (int re = j - 1; re >= 0; re--) {
					if (isTurret(i, re) && (a[i][re] + (l + 1)) % 4 == RIGHT)
						ok = false;
					if (isTurret(i, re) || a[i][re] == '#')
						break;
				}

				for (int re = i + 1; re < n; re++) {
					if (isTurret(re, j) && (a[re][j] + (l + 1)) % 4 == UP)
						ok = false;
					if (isTurret(re, j) || a[re][j] == '#')
						break;
				}

				for (int re = j + 1; re < m; re++) {
					if (isTurret(i, re) && (a[i][re] + (l + 1)) % 4 == LEFT)
						ok = false;
					if (isTurret(i, re) || a[i][re] == '#')
						break;
				}

				if (ok)
					q.push(make_pair(make_pair(i, j), l + 1));
			}
		}

		int ans = -1;
		for (int i = 0; i < 4; i++) {
			if (d[finishX][finishY][i] != -1) {
				if (ans == -1)
					ans = d[finishX][finishY][i];
				else
					ans = min(ans, d[finishX][finishY][i]);
			}
		}

		cout << "Case #" << test + 1 << ": ";
		if (ans == -1)
			cout << "impossible";
		else
			cout << ans;
		cout << endl;
	}

	return 0;
}
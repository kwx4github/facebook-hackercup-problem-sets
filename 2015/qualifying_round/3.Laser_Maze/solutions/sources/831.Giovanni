// This program is written in Amber, a programming language that I personally
// designed and for which I'm currently implementing a compiler.
// You can find the compiler binaries, and all the other support files required to build
// this program on github at the following URL: https://github.com/gianantonio71/amber-build
// The commit that was specifically created to build this program is the one
// named "Facebook Hacker Cup 2015 - Qualification round". More recent ones will probably
// also works, but the language is a work in progress and I'm not able to guarantee
// backward compatibility.
// Just clone that repository and follow the instructions in the file README.md
// Email me at gianantonio71@gmail.com if you encounter any problems


build_bad_times_table(h, w, turrets, walls)
{
  bad_list = [];
  dirs = [(-1, 0), (0, 1), (1, 0), (0, -1)];
  for (i, j, st : turrets)
    for (dt = 0..3)
      t = mod(st + dt, 4);
      di, dj = dirs[t];
      steps = 1;
      loop
        ni = i + steps * di;
        nj = j + steps * dj;
        break if ni < 0 or nj < 0 or ni >= h or nj >= w or walls[ni][nj];
        bad_list = [bad_list | ((ni, nj) => dt)];
        steps = steps + 1;
      ;
    ;
  ;
  bad_map = merge_values(set(bad_list));
  return [[lookup(bad_map, (i, j), {}) : j < w] : i < h];
}


solve(h, w, start, goal, turrets, walls)
{
  dirs = [(-1, 0), (0, 1), (1, 0), (0, -1)];
  bad_times_table = build_bad_times_table(h, w, turrets, walls);

  curr_ps = [start];
  vis_ps = {};

  time = 1;
  loop
    norm_time = mod(time, 4);
    next_ps_list = [];
    for (i, j : curr_ps)
      for (di, dj : dirs)
        ni = i + di;
        nj = j + dj;
        no_go = ni < 0 or nj < 0 or ni >= h or nj >= w or walls[ni][nj] or in(norm_time, bad_times_table[ni][nj]);
        next_ps_list = [next_ps_list | (ni, nj, norm_time)] if not no_go;
      ;
    ;
    next_ps = set(next_ps_list);
    new_ps = next_ps - vis_ps;
    return nil if new_ps == {};
    for (i, j, t : rand_sort(new_ps))
      return just(time) if (i, j) == goal;
    ;
    vis_ps = vis_ps & new_ps;
    curr_ps = rand_sort(new_ps);
    time = time + 1;
  ;
}


solve(m_h, n_w, maze)
{
  start = nil;
  goal = nil;
  turrets = [];
  walls = [[false : j < n_w] : i < m_h];

  for (r @ i : maze)
    for (c @ j : r)
      if (c == ascii_hash)
        wall_row = walls[i];
        wall_row[j] := true;
      elif (c == ascii_circumflex)
        turrets = [turrets | (i, j, 0)];
        wall_row = walls[i];
        wall_row[j] := true;
      elif (c == ascii_greater)
        turrets = [turrets | (i, j, 1)];
        wall_row = walls[i];
        wall_row[j] := true;
      elif (c == ascii_lower_v)
        turrets = [turrets | (i, j, 2)];
        wall_row = walls[i];
        wall_row[j] := true;
      elif (c == ascii_lower)
        turrets = [turrets | (i, j, 3)];
        wall_row = walls[i];
        wall_row[j] := true;
      elif (c == ascii_upper_s)
        start = (i, j);
      elif (c == ascii_upper_g)
        goal = (i, j);
      else
        assert c == ascii_dot;
      ;
    ;
  ;

  res = solve(m_h, n_w, start, goal, turrets, walls);
  return if res == nil then "impossible" else to_str(value(res)) end;
}


Main([String] args)
{
  if (length(args) /= 2)
    Print("Usage: <program name> <input file> <output file>\n");
    return;
  ;

  read_res = FileRead(args[0]);
  if (read_res == nil)
    Print("File not found: " & args[0] & "\n");
    return;
  ;
  input = value(read_res);

  lines = [string(l) : l <- split_lines(input)];

  test_cases = to_int(lines[0]);

  lc = 1;
  for (i_t = 0..test_cases-1)
    // Reading the inputs
    m_h, n_w = [to_int(s) : s <- split(lines[lc])];
    lc = lc + 1;

    maze = subseq(lines, lc, m_h);
    lc = lc + m_h;

    norm_maze = [_obj_(l) : l <- maze];

    // // Solving the test case
    res_str = solve(m_h, n_w, norm_maze);

    // // Writing the results
    out_line = "Case #" & to_str(i_t + 1) & ": " & res_str & "\n";
    FileWrite(args[1], i_t > 0, _obj_(out_line));
    Print(out_line);
  ;
}
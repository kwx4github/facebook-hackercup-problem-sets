#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

#define INF 1000000000

const int N = 100;
bool can[N][N][4];
string board[N];
int dist[N][N][4];
int m, n;
char dir[4] = {'^', '>', 'v', '<'};
int di[4] = {-1, 0, 1, 0};
int dj[4] = {0, 1, 0, -1};

inline bool isvalid(int i, int j) {
  return ((0 <= i && i < m) && (0 <= j && j < n));
}

struct node {
  int x, y, md;
};

void bfs(node s) {
  queue<node> q;
  dist[s.x][s.y][s.md] = 0;
  q.push(s);
  node u, v;
  while(!q.empty()) {
    u = q.front(); q.pop();
    for(int k = 0; k < 4; k++) {
      v.x = u.x + di[k];
      v.y = u.y + dj[k];
      v.md = (u.md + 1) % 4;
      if(!isvalid(v.x, v.y)) continue;
      if(dist[v.x][v.y][v.md] >= INF && can[v.x][v.y][v.md]) {
        dist[v.x][v.y][v.md] = dist[u.x][u.y][u.md] + 1;
        //fprintf(stderr, "%d,%d,%d->%d,%d,%d\n", u.x, u.y, u.md, v.x, v.y, v.md);
        q.push(v);
      }
    }
  }
}

void printdist() {
  cerr << "\n";
  for(int i = 0; i < m; i++, cerr << "\n")
    for(int j = 0; j < n; j++) {
      int d = *min_element(dist[i][j], dist[i][j] + 4);
      if(d >= INF) cerr << "oo ";
      else cerr << d << " ";
    }
}

void printcan() {
  cerr << "\n";
  for(int md = 0; md < 4; md++) {
    cerr << "md = " << md << "\n";
    for(int i = 0; i < m; i++, cerr << "\n")
      for(int j = 0; j < n; j++) cerr << can[i][j][md] << " ";
  }
}

int main() {
  int T;
  cin >> T;
  int sx, sy, gx, gy;
  for(int qq = 1; qq <= T; qq++) {
    cout << "Case #" << qq << ": ";
    memset(can, true, sizeof can);
    cin >> m >> n;
    for(int i = 0; i < m; i++) cin >> board[i];
    for(int i = 0; i < m; i++) {
      for(int j = 0; j < n; j++) {
        switch(board[i][j]) {
          case '.': break;
          case '#': for(int md = 0; md < 4; md++) can[i][j][md] = false; 
                    break;
          case 'S': sx = i; sy = j;
                    board[i][j] = '.';
                    break;
          case 'G': gx = i; gy = j;
                    board[i][j] = '.';
                    break;
        }
        for(int init = 0; init < 4; init++) if(board[i][j] == dir[init]) 
          for(int md = 0; md < 4; md++) {
            can[i][j][md] = false;
            int dr = (init + md) % 4;
            for(int k = 1; isvalid(i + k*di[dr], j + k*dj[dr]) && board[i + k*di[dr]][j + k*dj[dr]] == '.'; k++) can[i + k*di[dr]][j + k*dj[dr]][md] = false;
          }
      }
    }
    for(int i = 0; i < m; i++)
      for(int j = 0; j < n; j++)
        for(int md = 0; md < 4; md++)
          dist[i][j][md] = INF;
    bfs({sx, sy, 0});
    //printdist();
    //printcan();
    int ans = *min_element(dist[gx][gy], dist[gx][gy] + 4);
    if(ans >= INF) cout << "impossible\n";
    else cout << ans << "\n";
  }
}

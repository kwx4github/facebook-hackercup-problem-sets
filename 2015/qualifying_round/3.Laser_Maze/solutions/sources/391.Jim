from collections import deque
T = int(input())
for case_num in range(T):
    grid = []
    lasers = []
    M, N = map(int, input().split())
    sr, sc = 0, 0
    gr, gc = 0, 0
    dirs = list("^>v<")
    deltas = {'^': (-1,0), '>': (0,1), 'v': (1,0), '<': (0,-1)}
    for r in range(M):
        cur_line = input()
        for c,char in enumerate(cur_line):
            if char == 'S':
                sr, sc = r, c
            elif char == 'G':
                gr, gc = r, c
            elif char in dirs:
                lasers.append((dirs.index(char), r, c))
        grid.append(cur_line)
    passable = []
    for _ in range(4):
        cur_grid = [[0 if c == '#' else 1 for c in row] for row in grid]
        for d, r, c in lasers:
            dr, dc = deltas[dirs[d]]
            while True:
                cur_grid[r][c] = 0
                r += dr
                c += dc
                if r < 0 or c < 0 or r >= M or c >= N or grid[r][c] in '#^>v<':
                    break
        passable.append(cur_grid)
        dirs = dirs[1:] + dirs[0:1]

    #for i in range(4):
    #    for row in passable[i]:
    #        print(row)
    #    print()

    to_visit = deque()
    visited = set()
    to_visit.append((1, sr+1, sc))
    to_visit.append((1, sr-1, sc))
    to_visit.append((1, sr, sc+1))
    to_visit.append((1, sr, sc-1))

    answer = -1
    while to_visit:
        t, r, c = to_visit.popleft()
        if r < 0 or c < 0 or r >= M or c >= N or not passable[t%4][r][c]:
            continue
        if (t%4,r,c) in visited:
            continue
        visited.add((t%4,r,c))
        if r == gr and c == gc:
            answer = t
            break
        to_visit.append((t+1, r+1, c))
        to_visit.append((t+1, r-1, c))
        to_visit.append((t+1, r, c+1))
        to_visit.append((t+1, r, c-1))

    print("Case #%d: %s" % (case_num+1, "impossible" if answer == -1 else str(answer)))

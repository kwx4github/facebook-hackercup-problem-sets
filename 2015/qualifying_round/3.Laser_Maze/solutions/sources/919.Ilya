#include <iostream>
#include <set>
#include <queue>

using namespace std;

struct p {
    int x, y, d, t;
    bool operator<(const p& _) const
    {
        if (x < _.x)
            return true;
        if (x > _.x)
            return false;
        if (y < _.y)
            return true;
        if (y > _.y)
            return false;
        if (d < _.d)
            return true;
        if (d > _.d)
            return false;
        return false;
    }
    bool eq(const p& _) const
    {
        return x == _.x && y == _.y;
    }
};

int n, m;
vector<string> a;

int laser_state(int x, int y)
{
    if (a[x][y] == '>')
        return 0;
    if (a[x][y] == '<')
        return 2;
    if (a[x][y] == '^')
        return 3;
    if (a[x][y] == 'v')
        return 1;
    return -1;
}

bool laser(int x, int y)
{
    return laser_state(x, y) != -1;
}

bool block(int x, int y)
{
    return a[x][y] != '.' && a[x][y] != 'S' && a[x][y] != 'G';
}

bool valid(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool death(int xx, int yy, int t)
{
    bool res = false;
    int x = xx;
    int y = yy;
    while (valid(x, y) && !block(x, y)) x++;
    if (valid(x, y) && laser(x, y)) res |= (laser_state(x, y) + t) % 4 == 3;
    x = xx;
    y = yy;
    while (valid(x, y) && !block(x, y)) x--;
    if (valid(x, y) && laser(x, y)) res |= (laser_state(x, y) + t) % 4 == 1;
    x = xx;
    y = yy;
    while (valid(x, y) && !block(x, y)) y++;
    if (valid(x, y) && laser(x, y)) res |= (laser_state(x, y) + t) % 4 == 2;
    x = xx;
    y = yy;
    while (valid(x, y) && !block(x, y)) y--;
    if (valid(x, y) && laser(x, y)) res |= (laser_state(x, y) + t) % 4 == 0;
    return res;
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    
    int t;
    cin >> t;
    for (int tt = 0; tt < t; ++tt)
    {
        cin >> n >> m;
        a = vector<string>(n);
        for (int i = 0; i < n; ++i)
        {
            cin >> a[i];
        }
        int res = 0;
        queue<p> q;
        p goal;
        set<p> used;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                if (a[i][j] == 'S')
                {
                    p cur = p{i,j,0,0};
                    q.push(cur);
                    used.insert(cur);
                }
                if (a[i][j] == 'G')
                {
                    goal = p{i,j,0};
                }
            }
        }
        int dirx[] = {0,0,1,-1};
        int diry[] = {1,-1,0,0};
        while(!q.empty())
        {
            p cur = q.front();
            q.pop();
            if (cur.eq(goal))
            {
                res = cur.t;
                break;
            }
            for (int d = 0; d < 4; ++d)
            {
                int x = cur.x + dirx[d];
                int y = cur.y + diry[d];
                int t = cur.t + 1;
                p next = p{x, y, t%4, t};
                if (!valid(x, y)) continue;
                if (block(x, y)) continue;
                if (used.find(next) != used.end()) continue;
                if (death(x, y, t)) continue;
                q.push(next);
                used.insert(next);
            }
        }
        cout << "Case #" << tt + 1 << ": ";
        if (res > 0)
            cout << res;
        else
            cout << "impossible";
        cout << endl;
    }
}


#include <iostream>
#include <vector>
#include <string>
using namespace std;

vector <string> maze;
int sx,sy;
int t,m,n;
int co;
int g;
int finish;

void set_maze(){
    for(int i=0;i<maze.size();i++){
        for(int j=0;j<maze[i].length();j++){
            if(maze[i][j] == 'S' || maze[i][j] == '.') maze[i][j] = '0';
        }
    }
}

bool can_walk(int x,int y){
    int xx = x,yy = y;
    if(maze[x][y] == '#') return 0;
    if(maze[x][y] >= '4' and maze[x][y] != 'G') return 0;
    while(xx >= 0){
        if(maze[xx][y]=='v') return 0;
        else if(maze[xx][y]=='#' || maze[xx][y] == 'G') break;
        xx--;
    }
    xx = x;
    while(xx < m ){
        if(maze[xx][y] == '^') return 0;
        else if(maze[xx][y]=='#' || maze[xx][y] == 'G') break;
        xx++;
    }
    while(yy >= 0){
        if(maze[x][yy] == '>') return 0;
        else if(maze[x][yy]=='#' || maze[x][yy] == 'G') break;
        yy--;
    }
    yy = y;
    while(yy < n){
        if(maze[x][yy] == '<') return 0;
        else if(maze[x][yy]=='#' || maze[x][yy] == 'G') break;
        yy++;
    }
    return 1;
}

bool check_g(int x,int y){
    int xx = x,yy = y;
    //if(maze[x][y] == '#') return 0;
    //if(maze[x][y] >= '4' and maze[x][y] != 'G') return 0;
    while(xx >= 0){
        if(maze[xx][y]=='v') return 0;
        else if(maze[xx][y]=='#') break;
        xx--;
    }
    xx = x;
    while(xx < m ){
        if(maze[xx][y] == '^') return 0;
        else if(maze[xx][y]=='#') break;
        xx++;
    }
    while(yy >= 0){
        if(maze[x][yy] == '>') return 0;
        else if(maze[x][yy]=='#') break;
        yy--;
    }
    yy = y;
    while(yy < n){
        if(maze[x][yy] == '<') return 0;
        else if(maze[x][yy]=='#') break;
        yy++;
    }
    return 1;
}

void laser(){
    for(int i=0;i<maze.size();i++){
        for(int j=0;j<maze[i].length();j++){
            if(maze[i][j] == '<') maze[i][j] = '^';
            else if(maze[i][j] == '^') maze[i][j] = '>';
            else if(maze[i][j] == '>') maze[i][j] = 'v';
            else if(maze[i][j] == 'v') maze[i][j] = '<';
        }
    }
}

void find_start(){
    for(int i=0;i<maze.size();i++){
        for(int j=0;j<maze[i].length();j++){
            if(maze[i][j] == 'S'){
                sx = i;
                sy = j;
                return;
            }
        }
    }
}

void debug(){
    for(int i=0;i<maze.size();i++){
        for(int j=0;j<maze[i].length();j++){
            cout << maze[i][j];
        }
        cout << endl;
    }
    cout << endl << endl;
}

void walk(int x,int y,int c){
    //cout << "x = " << x << " y =  " << y << endl;
    //debug();
    if(maze[x][y] == 'G'){ 
        co = c;
        g = check_g(x,y);
        finish = 1;
        //cout << "finish c = " << c << endl;
        return;
    }else{
        //debug();
        maze[x][y]++;
        laser();
        if(x+1 < m and can_walk(x+1,y) and finish != 1) walk(x+1,y,c+1);
        if(y+1 < n and can_walk(x,y+1) and finish != 1) walk(x,y+1,c+1);
        if(x-1 >= 0 and can_walk(x-1,y) and finish != 1) walk(x-1,y,c+1);
        if(y-1 >= 0 and can_walk(x,y-1) and finish != 1) walk(x,y-1,c+1);
        if(can_walk(x,y)) walk(x,y,c+1);
    }
}

int main(){
    cin >> t;
    for(int i=0;i<t;i++){
        cin >> m >> n;
        string s;
        maze.clear();
        for(int j=0;j<m;j++){
            cin >> s;
            maze.push_back(s);
        }

        co = 0;
        finish = 0;
        find_start();
        //cout << "sx = " << sx << " sy = " << sy << endl;
        set_maze();
        //debug();
        walk(sx,sy,0);
        //debug();
        cout << "Case #" << i+1 << ": ";
        if(finish and g) cout << co << endl;
        else cout << "impossible" << endl;
    }
    return 0;
}

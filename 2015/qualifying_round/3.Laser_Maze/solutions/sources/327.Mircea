#include <iostream>
#include <fstream>
#include <cstdio>
#include <queue>

using namespace std;

const int NMax = 105;
const int INF = 2000000000;
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
int T, N, M;
char a[NMax][NMax];
char NextLaser[270];
struct state
{
    int timp, x, y;
    state()
    {
        this -> timp = this -> x = this -> y = 0;
    }
    state(const int timp, const int x, const int y)
    {
        this -> timp = timp;
        this -> x = x;
        this -> y = y;
    }
};
state start, finish;
char mataux[NMax][NMax];
char obstacle[4][NMax][NMax];
int d[4][NMax][NMax];


inline bool Interior(const int x, const int y)
{
    return 1 <= x && x <= N && 1 <= y && y <= M;
}

void GetObstacles(const int timp)
{
    for (int i = 1; i <= N; ++ i)
        for (int j = 1; j <= M; ++ j)
        {
            if (obstacle[timp][i][j] == '#')
                continue;
            if (mataux[i][j] == '#')
            {
                obstacle[timp][i][j] = '#';
                continue;
            }
            if (mataux[i][j] == '^' || mataux[i][j] == 'v' || mataux[i][j] == '<' || mataux[i][j] == '>')
            {
                if (mataux[i][j] == '^')
                {
                    obstacle[timp][i][j] = '#';
                    for (int k = i - 1; Interior(k, j) && mataux[k][j] == '.'; -- k)
                        obstacle[timp][k][j] = '#';
                }
                else if (mataux[i][j] == 'v')
                {
                    obstacle[timp][i][j] = '#';
                    for (int k = i + 1; Interior(k, j) && mataux[k][j] == '.'; ++ k)
                        obstacle[timp][k][j] = '#';
                }
                else if (mataux[i][j] == '<')
                {
                    obstacle[timp][i][j] = '#';
                    for (int k = j - 1; Interior(i, k) && mataux[i][k] == '.'; -- k)
                        obstacle[timp][i][k] = '#';
                }
                else
                {
                    obstacle[timp][i][j] = '#';
                    for (int k = j + 1; Interior(i, k) && mataux[i][k] == '.'; ++ k)
                        obstacle[timp][i][k] = '#';
                }
                continue;
            }
            obstacle[timp][i][j] = '.';
        }
}

void GetNextMatAux()
{
    for (int i = 1; i <= N; ++ i)
        for (int j = 1; j <= M; ++ j)
            if (mataux[i][j] == '^' || mataux[i][j] == 'v' || mataux[i][j] == '<' || mataux[i][j] == '>')
                mataux[i][j] = NextLaser[mataux[i][j]];
}

void ReInit(const int timp)
{
    for (int i = 1; i <= N; ++ i)
        for (int j = 1; j <= M; ++ j)
            d[timp][i][j] = INF;
}

inline int NextTime(const int timp)
{
    if (timp == 3) return 0;
    return timp + 1;
}

int Solve()
{
    for (int i = 1; i <= N; ++ i)
        for (int j = 1; j <= M; ++ j)
        {
            if (a[i][j] == 'S')
            {
                start.x = i;
                start.y = j;
                mataux[i][j] = '.';
                continue;
            }
            if (a[i][j] == 'G')
            {
                finish.x = i;
                finish.y = j;
                mataux[i][j] = '.';
                continue;
            }
            mataux[i][j] = a[i][j];
        }

    for (int i = 0; i < 4; ++ i)
    {
        GetObstacles(i);
        ReInit(i);
        GetNextMatAux();
    }

    queue <state> Q;
    d[0][start.x][start.y] = 0;
    Q.push(state(0, start.x, start.y));
    while (!Q.empty())
    {
        state now = Q.front();
        Q.pop();
        for (int k = 0; k < 4; ++ k)
        {
            state nxt = state(NextTime(now.timp), now.x + dx[k], now.y + dy[k]);
            if (Interior(nxt.x, nxt.y) && obstacle[nxt.timp][nxt.x][nxt.y] != '#' && d[now.timp][now.x][now.y] + 1 < d[nxt.timp][nxt.x][nxt.y])
            {
                d[nxt.timp][nxt.x][nxt.y] = d[now.timp][now.x][now.y] + 1;
                Q.push(nxt);
            }
        }
    }
    for (int timp = 0; timp < 4; ++ timp)
        for (int i = 1; i <= N; ++ i)
            for (int j = 1; j <= M; ++ j)
                obstacle[timp][i][j] = 0;
    int ret = INF;
    for (int i = 0; i < 4; ++ i)
        ret = min(ret, d[i][finish.x][finish.y]);
    if (ret != INF)
        return ret;
    return -1;
}

int main()
{
    ifstream f("input.txt");
    FILE *g = fopen("output.txt", "w");

    f >> T;
    NextLaser['^'] = '>';
    NextLaser['>'] = 'v';
    NextLaser['v'] = '<';
    NextLaser['<'] = '^';

    for (int test_now = 1; test_now <= T; ++ test_now)
    {
        f >> N >> M;
        for (int i = 1; i <= N; ++ i)
            f >> (a[i] + 1);
        int aux = Solve();
        if (aux == -1)
            fprintf (g, "Case #%d: impossible\n", test_now);
        else
            fprintf (g, "Case #%d: %d\n", test_now, aux);
    }

    f.close();
    fclose(g);
    return 0;
}

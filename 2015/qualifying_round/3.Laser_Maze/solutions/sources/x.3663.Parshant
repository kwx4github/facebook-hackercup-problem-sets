#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<utility>
#include<climits>
#include<cmath>
using namespace std;
int mod[4][101][101],nod[4][101][101];
string mat[101];
int m,n;
pair<int,int> prs[10001],tmp;
queue<pair<int,int> > Q;
queue<int> Z; 
int valid(int i,int j)
{if((i>=0 && i<m) && (j>=0 && j<n)) return true; else false;}
void above(int id,int i,int j)
{   int k;
	for(k=i-1;k>=0;k--) {if(mat[k][j]=='.' || mat[k][j]=='S' || mat[k][j]=='G') mod[id][k][j]=1; else break;}
}
void below(int id,int i,int j)
{   int k;
 	for(k=i+1;k<m;k++) {if(mat[k][j]=='.'|| mat[k][j]=='S' || mat[k][j]=='G') mod[id][k][j]=1; else break;}
}
void left(int id,int i,int j)
{	int k;
	for(k=j-1;k>=0;k--) {if(mat[i][k]=='.' || mat[i][k]=='S' || mat[i][k]=='G') mod[id][i][k]=1; else break;}
}
void right(int id,int i,int j)
{	int k;
	for(k=j+1;k<n;k++) {if(mat[i][k]=='.' || mat[i][k]=='S' || mat[i][k]=='G') mod[id][i][k]=1; else break;}
}
void bfs()
{   int tmpi,tmpj,tmpmod,stp;
	while(!Q.empty())
	{  
		tmp=Q.front(); tmpi=tmp.first; tmpj=tmp.second;
		Q.pop();
		stp=Z.front()+1;
		tmpmod=stp%4; 
		Z.pop();
		if(valid(tmpi,tmpj-1))
			if(mod[tmpmod][tmpi][tmpj-1]==0){ if(nod[tmpmod][tmpi][tmpj-1]>stp){ Q.push(make_pair(tmpi,tmpj-1)); Z.push(stp); nod[tmpmod][tmpi][tmpj-1]=stp; }}
		if(valid(tmpi,tmpj+1))
		    if(mod[tmpmod][tmpi][tmpj+1]==0){ if(nod[tmpmod][tmpi][tmpj+1]>stp){ Q.push(make_pair(tmpi,tmpj+1)); Z.push(stp); nod[tmpmod][tmpi][tmpj+1]=stp; }}
		if(valid(tmpi-1,tmpj))
		    if(mod[tmpmod][tmpi-1][tmpj]==0){ if(nod[tmpmod][tmpi-1][tmpj]>stp){ Q.push(make_pair(tmpi-1,tmpj)); Z.push(stp); nod[tmpmod][tmpi-1][tmpj]=stp; }}
		if(valid(tmpi+1,tmpj))
		    if(mod[tmpmod][tmpi+1][tmpj]==0){ if(nod[tmpmod][tmpi+1][tmpj]>stp){ Q.push(make_pair(tmpi+1,tmpj)); Z.push(stp); nod[tmpmod][tmpi+1][tmpj]=stp; }}
	}
}
int main()
{
  std:ios_base::sync_with_stdio(false);
  freopen ("laser_maze.txt", "r", stdin);
  freopen ("fbhc3.txt", "w", stdout);
  int t,i,j,c=0,ans,cs=1;
  pair<int,int> src,des;
  cin>>t;
  while(t--)
  {
  	cin>>m>>n;
  	for(i=0;i<m;i++)	cin>>mat[i];
  	for(i=0;i<m;i++)
  	{
  		for(j=0;j<n;j++)
  		{	nod[0][i][j]=INT_MAX-2; nod[1][i][j]=INT_MAX-2;  nod[2][i][j]=INT_MAX-2; nod[3][i][j]=INT_MAX-2;  
  			if(mat[i][j]=='^' || mat[i][j]=='<' || mat[i][j]=='>'|| mat[i][j]=='v')
  			{
  			  prs[c++]=make_pair(i,j);
			  mod[0][i][j]=mod[1][i][j]=mod[2][i][j]=mod[3][i][j]=1; 
  			}
  			else if(mat[i][j]=='#')
  			{mod[0][i][j]=mod[1][i][j]=mod[2][i][j]=mod[3][i][j]=1; }
			else
			{
				mod[0][i][j]=mod[1][i][j]=mod[2][i][j]=mod[3][i][j]=0; 
				if(mat[i][j]=='S') 
				{
				   nod[0][i][j]=0;
				   src=make_pair(i,j);
				}
				if(mat[i][j]=='G') des=make_pair(i,j);
			}
  		}
  	}
  	for(i=0;i<c;i++)
  	{
  		if(mat[prs[i].first][prs[i].second]=='^'){ above(0,prs[i].first,prs[i].second); right(1,prs[i].first,prs[i].second); below(2,prs[i].first,prs[i].second) ;left(3,prs[i].first,prs[i].second);}
  		if(mat[prs[i].first][prs[i].second]=='<'){ left(0,prs[i].first,prs[i].second); above(1,prs[i].first,prs[i].second); right(2,prs[i].first,prs[i].second) ;below(3,prs[i].first,prs[i].second);}
  		if(mat[prs[i].first][prs[i].second]=='>'){ right(0,prs[i].first,prs[i].second); below(1,prs[i].first,prs[i].second); left(2,prs[i].first,prs[i].second) ;above(3,prs[i].first,prs[i].second);}
  		if(mat[prs[i].first][prs[i].second]=='v'){ below(0,prs[i].first,prs[i].second); left(1,prs[i].first,prs[i].second); above(2,prs[i].first,prs[i].second) ;right(3,prs[i].first,prs[i].second);}
  	}
  	Q.push(src);
  	Z.push(0);
  	bfs();
  	i=des.first; j=des.second;
    ans=min(min(min(nod[0][i][j],nod[1][i][j]),nod[2][i][j]),nod[3][i][j]);
    if(ans==INT_MAX-2)
    printf("Case #%d: impossible\n",cs++);
    else
    printf("Case #%d: %d\n",cs++,ans);
  }
  return 0;
}

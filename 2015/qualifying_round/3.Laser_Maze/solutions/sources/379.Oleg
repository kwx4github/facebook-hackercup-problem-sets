#include <iostream>
#include <cstdio>
#include <queue>
using namespace std;

int n, m;
char s[111][111];
int b[111][111];
int w[111][111][4];
int res[111][111][4];
queue<pair<pair<int, int>, int> > q;
const int vx[] = {-1, 0, 1, 0};
const int vy[] = {0, 1, 0, -1};


void walk(int x, int y, int k, int dx, int dy) {
    x += dx, y += dy;
    while (0 <= x && 0 <= y && x < m && y < n && b[x][y] == 0) {
        w[x][y][k] = 1;
        x += dx, y += dy;
    }
}

void solve() {
    cin >> m >> n;
    pair<int, int> start, finish;
    for (int i = 0; i < m; ++i) {
        cin >> s[i];
        for (int j = 0; j < n; ++j) {
            if (s[i][j] == 'S') {
                start = make_pair(i, j);
                b[i][j] = 0;
            } else if (s[i][j] == 'G') {
                finish = make_pair(i, j);
                b[i][j] = 0;
            } else if (s[i][j] == '.') {
                b[i][j] = 0;
            } else {
                b[i][j] = 1;
            }
            for (int k = 0; k < 4; ++k) {
                w[i][j][k] = b[i][j];
            }
        }
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int dir = -1;
            if (s[i][j] == '^') {
                dir = 0;
            } else if (s[i][j] == '>') {
                dir = 1;
            } else if (s[i][j] == 'v') {
                dir  = 2;
            } else if (s[i][j] == '<') {
                dir = 3;
            }
            if (dir == -1) {
                continue;
            }
            for (int k = 0; k < 4; ++k) {
                walk(i, j, k, vx[(k + dir) % 4], vy[(k + dir) % 4]);
            }
        }
    }
    
    const int inf = 1e9;
    while (!q.empty()) {
        q.pop();
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < 4; ++k) {
                res[i][j][k] = inf;
            }
        }
    }
    res[start.first][start.second][0] = 0;
    q.push(make_pair(start, 0));
    while (!q.empty()) {
        pair<pair<int, int>, int> cur = q.front();
        q.pop();
        int x = cur.first.first, y = cur.first.second, t = cur.second;
        if (cur.first == finish) {
            cout << res[x][y][t];
            return;
        }
        for (int k = 0; k < 4; ++k) {
            int nx = x + vx[k], ny = y + vy[k], nt = (t + 1) % 4;
            if (!(0 <= nx && 0 <= ny && nx < m && ny < n)) {
                continue;
            }
            if (w[nx][ny][nt] == 0 && res[nx][ny][nt] == inf) {
                res[nx][ny][nt] = res[x][y][t] + 1;
                q.push(make_pair(make_pair(nx, ny), nt));
            }
        }
    }
    cout << "impossible";
}

int main()
{
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        cout << "Case #" << i + 1 << ": ";
        solve();
        cout << endl;
    }
}

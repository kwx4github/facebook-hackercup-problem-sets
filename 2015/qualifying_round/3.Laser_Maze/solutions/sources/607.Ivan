#include <algorithm>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <queue>

using namespace std;

const int MAXDIM = 100+2;
const int di[] = {-1, 0, 1, 0};
const int dj[] = {0, 1, 0, -1};
const string dirs = "^>v<";
bool death[MAXDIM][MAXDIM][4];
bool done[MAXDIM][MAXDIM][4];
int m, n;

bool valid(int i, int j) {
    return i>=0 && j>=0 && i<m && j<n;
}
int solve() {
    cin >> m >> n;
    vector<string> A(m);
    for (int i=0; i<m; ++i) {
        cin >> A[i];
    }

    int si=-1, sj=-1;
    int ti=-1, tj=-1;
    for (int i=0; i<m; ++i) {
        for (int j=0; j<n; ++j) {
            if (A[i][j] == 'S') {
                si = i;
                sj = j;
                A[i][j] = '.';
            } else if (A[i][j] == 'G') {
                ti = i;
                tj = j;
                A[i][j] = '.';
            }
        }
    }
    assert(si != -1);
    assert(ti != -1);

    memset(death, 0, sizeof death);
    for (int step=0; step<4; ++step) {
        for (int i=0; i<m; ++i) {
            for (int j=0; j<n; ++j) {
                int d = -1;
                {
                    string::size_type tmp = dirs.find(A[i][j]);
                    if (tmp == string::npos) continue;
                    d = int(tmp);
                }
                assert(0<=d && d<4);
                d = (d+step)%4;
                int r = i + di[d];
                int c = j + dj[d];
                while (valid(r, c) && A[r][c]=='.') {
                    death[r][c][step] = 1;
                    r += di[d];
                    c += dj[d];
                }
            }
        }
    }

    memset(done, 0, sizeof done);
    using pii = pair<int, int>;
    queue<pii> Q;
    Q.push(pii(si, sj));
    done[si][sj][0] = 1;
    int steps = 1;
    int layer_sz = 1;
    while (!Q.empty()) {
        if (layer_sz == 0) {
            ++steps;
            layer_sz = Q.size();
        }
        pii tmp = Q.front(); Q.pop();
        --layer_sz;
        int i = tmp.first;
        int j = tmp.second;
        for (int d=0; d<4; ++d) {
            int r = i + di[d];
            int c = j + dj[d];
            if (valid(r, c) && A[r][c]=='.' && !death[r][c][steps&3] && !done[r][c][steps&3]) {
                if (r==ti && c==tj) {
                    return steps;
                }
                done[r][c][steps&3] = 1;
                Q.push(pii(r, c));
            }
        }
    }
    return -1;
}

int main() {
    int T;
    cin >> T;
    for (int i=1; i<=T; ++i) {
        cout << "Case #" << i << ": ";
        int sol = solve();
        if (sol == -1) cout << "impossible";
        else cout << sol;
        cout << '\n';
    }
}

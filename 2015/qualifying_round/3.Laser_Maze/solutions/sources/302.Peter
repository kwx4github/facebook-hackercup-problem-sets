#include <cstdio>
#include <queue>

#define FOR(i,n) for (int i = 0; i < (n); i++)

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, -1, 0, +1 };

#define MAX 123

int T, X, Y;
std::queue<int> Q;
char M[MAX][MAX]; // map
bool V[MAX][MAX][4]; // visited

bool IsSolid(int x, int y) {
	if (x < 0 || x >= X || y < 0 || y >= Y)
		return true;
	char c = M[y][x];
	return (c == '#' || c == '<' || c == '>' || c == '^' || c == 'v');
}

void Fill(int x, int y, int i, int d) {
	V[y][x][i] = true;
	x += dx[d];
	y += dy[d];
	if (!IsSolid(x, y)) Fill(x, y, i, d);
}

void Push(int x, int y, int i, int d) {
	if (!IsSolid(x, y) && !V[y][x][i]) {
		V[y][x][i] = true;
		Q.push(x); Q.push(y); Q.push(i); Q.push(d);
	}
}

int main() {
	scanf("%d", &T);
	FOR(t,T) {
		scanf("%d %d", &Y, &X);
		FOR(y,Y) FOR(x,X) FOR(i,4) V[y][x][i] = false;
		FOR(y,Y) scanf("%s", M[y]);
		FOR(y,Y) FOR(x,X) {
			switch (M[y][x]) {
				case 'S': Q.push(x); Q.push(y); Q.push(0); Q.push(0); break;
				case '<': FOR(d,4) Fill(x, y, d, (d+0)%4); break;
				case '^': FOR(d,4) Fill(x, y, d, (d+1)%4); break;
				case '>': FOR(d,4) Fill(x, y, d, (d+2)%4); break;
				case 'v': FOR(d,4) Fill(x, y, d, (d+3)%4); break;
			}
		}
		int Dist = -1;
		while (!Q.empty()) {
			int x = Q.front(); Q.pop();
			int y = Q.front(); Q.pop();
			int i = Q.front(); Q.pop();
			int d = Q.front(); Q.pop();
			if (M[y][x] == 'G' && Dist == -1) Dist = d;
			FOR(j,4) Push(x + dx[j], y + dy[j], (i+1)%4, d+1);
		}
		if (Dist > -1)
			printf("Case #%d: %d\n", t+1, Dist);
		else
			printf("Case #%d: impossible\n", t+1);
	}
	return 0;
}

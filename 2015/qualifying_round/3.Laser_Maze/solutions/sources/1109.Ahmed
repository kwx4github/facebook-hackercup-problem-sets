#include<bits/stdc++.h>

using namespace std;

#define pb push_back
#define mem(a, b) memset(a, b, sizeof(a))
#define mp make_pair

const int oo = (int)1e9;
const double PI = 2 * acos(0.0);
const double eps = 1e-9;

int n,m;
char maze[4][100][100];
vector<pair<int,int> > laser;

struct node
{
	int x,y,t,steps;
	node() {}
	node(int X, int Y, int T, int S) { x = X; y = Y; t = T; steps = S; }
};

void build_mazes()
{
	for(int i=0;i<(int)laser.size();i++)
	{
		int dx[4],dy[4];
		int x = laser[i].first, y = laser[i].second;
		char c = maze[0][x][y];
		if(c=='^')
		{
			int _dx[] = {-1,0,1,0};
			int _dy[] = {0,1,0,-1};
			memcpy(dx,_dx,sizeof(int)*4);
			memcpy(dy,_dy,sizeof(int)*4);
		} 
		else if(c=='v')
		{
			int _dx[] = {1,0,-1,0};
			int _dy[] = {0,-1,0,1};
			memcpy(dx,_dx,sizeof(int)*4);
			memcpy(dy,_dy,sizeof(int)*4);
		} 
		else if(c=='>')
		{
			int _dx[] = {0,1,0,-1};
			int _dy[] = {1,0,-1,0};
			memcpy(dx,_dx,sizeof(int)*4);
			memcpy(dy,_dy,sizeof(int)*4);
		} 
		else if(c=='<')
		{
			int _dx[] = {0,-1,0,1};
			int _dy[] = {-1,0,1,0};
			memcpy(dx,_dx,sizeof(int)*4);
			memcpy(dy,_dy,sizeof(int)*4);
		} 
		for(int i=0;i<4;i++)
		{
			int cX = x+dx[i], cY = y+dy[i];
			while((cX < n && cX >= 0 && cY < m && cY >= 0) && (maze[i][cX][cY] == '.' || maze[i][cX][cY] == 'G' || maze[i][cX][cY] == 'L'))
			{
				maze[i][cX][cY] = 'L';
				cX = cX+dx[i];
				cY = cY+dy[i];
			}
		}
	}
}

int bfs(int sX, int sY)
{
	bool visited[105][105][5];
	int dx[] = {0,0,1,-1};
	int dy[] = {1,-1,0,0};
	mem(visited,0);
	queue<node> q;
	q.push(node(sX,sY,0,0));
	while(!q.empty())
	{
		node cNode = q.front();
		q.pop();
		if(visited[cNode.x][cNode.y][cNode.t])continue;
		visited[cNode.x][cNode.y][cNode.t] = 1;
		if(maze[cNode.t][cNode.x][cNode.y] != '.' && maze[cNode.t][cNode.x][cNode.y] != 'G' && maze[cNode.t][cNode.x][cNode.y] != 'S') continue;
		if(maze[cNode.t][cNode.x][cNode.y] == 'G') return cNode.steps;
		for(int i=0;i<4;i++)
		{
			int nX = cNode.x + dx[i];
			int nY = cNode.y + dy[i];
			if(nX < n && nX >= 0 && nY < m && nY >= 0)
				q.push(node(nX,nY,(cNode.t+1)%4,cNode.steps+1));
		}
	}
	return -1;
}

int main()
{
	int t,c=1;
	freopen("laser_maze.txt","r",stdin);
	freopen("laser_maze.out","w",stdout);
	cin >> t;
	while(t)
	{
		cin >> n >> m;
		int sX,sY;
		laser.clear();
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				cin >> maze[0][i][j];
				char x = maze[0][i][j];
				for(int k=1;k<4;k++) maze[k][i][j] = x;
				if(x == 'S')
				{
					sX = i;
					sY = j;
				}
				else if(x == '<'  || x == '>' || x == '^' || x == 'v')
					laser.pb(mp(i,j));
			}
		}
		build_mazes();
		cout << "Case #" << c++ << ": ";
		int res = bfs(sX,sY);
		if(res == -1) cout << "impossible" << endl;
		else cout << res << endl;
		--t;
	}
	return 0;
}

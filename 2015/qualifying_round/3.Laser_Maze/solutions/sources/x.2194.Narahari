import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;


public class laser {
	
	static int t;
	static char[][] grid;
	static boolean[][] turret;
	static int[][] dir;
	static boolean[][] wall;
	static int sr;
	static int sc;
	static int gr;
	static int gc;
	static int m;
	static int n;
	static int[][] dir2;
	static int[][] dir3;
	static int[][] dir4;
	static boolean[][][] lose;
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("laser.txt"));
		StringTokenizer st = new StringTokenizer(f.readLine());
		t = Integer.parseInt(st.nextToken());
		for(int i = 0; i < t; i++) {
			st = new StringTokenizer(f.readLine());
			m = Integer.parseInt(st.nextToken());
			n = Integer.parseInt(st.nextToken());
			grid = new char[m][n];
			turret = new boolean[m][n];
			dir = new int[m][n];
			wall = new boolean[m][n];
			for(int j = 0; j < m; j++) {
				st = new StringTokenizer(f.readLine());
				String line = st.nextToken();
				for(int k = 0; k < line.length(); k++) {
					grid[j][k] = line.charAt(k);
					if(grid[j][k] == 'S') {
						sr = j;
						sc = k;
					}
					if(grid[j][k] == 'G') {
						gr = j;
						gc = k;
					}
					if(grid[j][k] == '#') {
						wall[j][k] = true;
					}
					if(grid[j][k] == 'v') {
						turret[j][k] = true;
						dir[j][k] = 0;
					}
					if(grid[j][k] == '<') {
						turret[j][k] = true;
						dir[j][k] = 1;
					}
					if(grid[j][k] == '^') {
						turret[j][k] = true;
						dir[j][k] = 2;
					}
					if(grid[j][k] == '>') {
						turret[j][k] = true;
						dir[j][k] = 3;
					}
				}
			}
			int res = solve();
			if(res != -1) System.out.println("Case #" + (i + 1) + ": " + solve());
			else System.out.println("Case #" + (i + 1) + ": " + "impossible");
		}
	}
	
	public static int solve() {
		dir2 = new int[m][n];
		dir3 = new int[m][n];
		dir4 = new int[m][n];
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				dir2[i][j] = (dir[i][j] + 1) % 4;
				dir3[i][j] = (dir2[i][j] + 1) % 4;
				dir4[i][j] = (dir3[i][j] + 1) % 4;
			}
		}
		lose = new boolean[m][n][4];
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				if(!turret[i][j]) continue;
				if(dir[i][j] == 0) {
					int r = i;
					while(r < m && !wall[r][j]) {
						lose[r][j][0] = true;
						r++;
					}
				}
				if(dir[i][j] == 1) {
					int c = j;
					while(c >= 0 && !wall[i][c]) {
						lose[i][c][0] = true;
						c--;
					}
				}
				if(dir[i][j] == 2) {
					int r = i;
					while(r >= 0 && !wall[r][j]) {
						lose[r][j][0] = true;
						r--;
					}
				}
				if(dir[i][j] == 3) {
					int c = j;
					while(c < n && !wall[i][c]) {
						lose[i][c][0] = true;
						c++;
					}
				}
			}
		}
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				if(!turret[i][j]) continue;
				if(dir2[i][j] == 0) {
					int r = i;
					while(r < m && !wall[r][j]) {
						lose[r][j][1] = true;
						r++;
					}
				}
				if(dir2[i][j] == 1) {
					int c = j;
					while(c >= 0 && !wall[i][c]) {
						lose[i][c][1] = true;
						c--;
					}
				}
				if(dir2[i][j] == 2) {
					int r = i;
					while(r >= 0 && !wall[r][j]) {
						lose[r][j][1] = true;
						r--;
					}
				}
				if(dir2[i][j] == 3) {
					int c = j;
					while(c < n && !wall[i][c]) {
						lose[i][c][1] = true;
						c++;
					}
				}
			}
		}
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				if(!turret[i][j]) continue;
				if(dir3[i][j] == 0) {
					int r = i;
					while(r < m && !wall[r][j]) {
						lose[r][j][2] = true;
						r++;
					}
				}
				if(dir3[i][j] == 1) {
					int c = j;
					while(c >= 0 && !wall[i][c]) {
						lose[i][c][2] = true;
						c--;
					}
				}
				if(dir3[i][j] == 2) {
					int r = i;
					while(r >= 0 && !wall[r][j]) {
						lose[r][j][2] = true;
						r--;
					}
				}
				if(dir3[i][j] == 3) {
					int c = j;
					while(c < n && !wall[i][c]) {
						lose[i][c][2] = true;
						c++;
					}
				}
			}
		}
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				if(!turret[i][j]) continue;
				if(dir4[i][j] == 0) {
					int r = i;
					while(r < m && !wall[r][j]) {
						lose[r][j][3] = true;
						r++;
					}
				}
				if(dir4[i][j] == 1) {
					int c = j;
					while(c >= 0 && !wall[i][c]) {
						lose[i][c][3] = true;
						c--;
					}
				}
				if(dir4[i][j] == 2) {
					int r = i;
					while(r >= 0 && !wall[r][j]) {
						lose[r][j][3] = true;
						r--;
					}
				}
				if(dir4[i][j] == 3) {
					int c = j;
					while(c < n && !wall[i][c]) {
						lose[i][c][3] = true;
						c++;
					}
				}
			}
		}
		boolean[][] seen = new boolean[m][n];
		int[][][] dp = new int[m][n][4];
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				Arrays.fill(dp[i][j], Integer.MAX_VALUE - 4);
			}
		}
		ArrayList<Integer> queue = new ArrayList<Integer>();
		int r = gr;
		int c = gc;
		queue.add(r*n + c);
		while(queue.size() > 0) {
			int val = queue.remove(0);
			r = val / n;
			c = val % n;
			if(r == gr && c == gc) {
				for(int i = 0; i < 4; i++) {
					if(!lose[r][c][i]) dp[r][c][i] = 0;
				}
			}
			seen[r][c] = true;
			if(r + 1 < m) {
				for(int i = 0; i < 4; i++) {
					if(!lose[r + 1][c][(i + 1) % 4] && dp[r + 1][c][(i + 1) % 4] < Integer.MAX_VALUE - 4) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r + 1][c][(i + 1) % 4] + 1);
					}
					if(dp[r + 1][c][(i + 3) % 4] < Integer.MAX_VALUE - 4 && canFlip(r, c, i, r + 1, c)) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r + 1][c][(i + 3) % 4] + 3);
					}
				}
			}
			if(r - 1 >= 0) {
				for(int i = 0; i < 4; i++) {
					if(!lose[r - 1][c][(i + 1) % 4] && dp[r - 1][c][(i + 1) % 4] < Integer.MAX_VALUE - 4) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r - 1][c][(i + 1) % 4] + 1);
					}
					if(dp[r - 1][c][(i + 3) % 4] < Integer.MAX_VALUE - 4 && canFlip(r, c, i, r - 1, c)) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r - 1][c][(i + 3) % 4] + 3);
					}
				}
			}
			if(c + 1 < n) {
				for(int i = 0; i < 4; i++) {
					if(!lose[r][c + 1][(i + 1) % 4] &&dp[r][c + 1][(i + 1) % 4] < Integer.MAX_VALUE - 4) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r][c + 1][(i + 1) % 4] + 1);
					}
					if(dp[r][c + 1][(i + 3) % 4] < Integer.MAX_VALUE - 4 && canFlip(r, c, i, r, c + 1)) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r][c + 1][(i + 3) % 4] + 3);
					}
				}
			}
			if(c - 1 >= 0) {
				for(int i = 0; i < 4; i++) {
					if(!lose[r][c - 1][(i + 1) % 4] && dp[r][c - 1][(i + 1) % 4] < Integer.MAX_VALUE - 4) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r][c - 1][(i + 1) % 4] + 1);
					}
					if(dp[r][c - 1][(i + 3) % 4] < Integer.MAX_VALUE - 4 && canFlip(r, c, i, r, c - 1)) {
						dp[r][c][i] = Math.min(dp[r][c][i], dp[r][c - 1][(i + 3) % 4] + 3);
					}
				}
			}
			if(r - 1 >= 0 && !seen[r - 1][c] && !turret[r - 1][c] && !wall[r - 1][c] && !queue.contains((r - 1)*n + c)) queue.add((r - 1)*n + c);
			if(r + 1 < m && !seen[r + 1][c] && !turret[r + 1][c] && !wall[r + 1][c] && !queue.contains((r + 1)*n + c)) queue.add((r + 1)*n + c);
			if(c - 1 >= 0 && !seen[r][c - 1] && !turret[r][c - 1] && !wall[r][c - 1] && !queue.contains((r)*n + c - 1)) queue.add((r)*n + c - 1);
			if(c + 1 < n && !seen[r][c + 1] && !turret[r][c + 1] && !wall[r][c + 1] && !queue.contains((r)*n + c + 1)) queue.add((r)*n + c + 1);
			if(r == sr && c == sc) break;
		}
		if(dp[sr][sc][0] < Integer.MAX_VALUE - 4) return dp[sr][sc][0];
		else return -1;
	}
	
	public static boolean canFlip(int r, int c, int i, int a, int b) {
		if(r - 1 >= 0 && !turret[r - 1][c] && !wall[r - 1][c] && !lose[r - 1][c][(i + 1) % 4] && !lose[r][c][(i + 2) % 4] && !lose[a][b][(i + 3) % 4]) {
			return true;
		}
		if(r + 1 < m && !turret[r + 1][c] && !wall[r + 1][c] && !lose[r + 1][c][(i + 1) % 4] && !lose[r][c][(i + 2) % 4] && !lose[a][b][(i + 3) % 4]) {
			return true;
		}
		if(c - 1 >= 0 && !turret[r][c - 1] && !wall[r][c - 1] && !lose[r][c - 1][(i + 1) % 4] && !lose[r][c][(i + 2) % 4] && !lose[a][b][(i + 3) % 4]) {
			return true;
		}
		if(c + 1 < n && !turret[r][c + 1] && !wall[r][c + 1] && !lose[r][c + 1][(i + 1) % 4] && !lose[r][c][(i + 2) % 4] && !lose[a][b][(i + 3) % 4]) {
			return true;
		}
		return false;
	}
}
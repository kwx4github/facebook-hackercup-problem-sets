#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 105

int N,M;
char g[MAXN][MAXN];
int dst[4][MAXN][MAXN];
bool dead[4][MAXN][MAXN], block[MAXN][MAXN];
int dir[4][2] = { -1, 0, 0, 1, 1, 0, 0, -1 };
#define valid(x,y) ((x) >= 0 && (x) < N && (y) >= 0 && (y) < M)
int main(){
	int cs;
	cin >> cs;
	REP(csn, 1, cs+1){
		printf("Case #%d: ", csn);
		//cerr << csn << endl;
		cin >> N >> M;
		int sx, sy, ex, ey;
		FILL(dead, 0);
		FILL(block, 0);
		REP(i, 0, N){
			scanf("%s", g[i]);
			REP(j, 0, M){
				REP(t, 0, 4) dst[t][i][j] = INF;
				if (g[i][j] == 'S'){
					sx = i; sy = j;
					g[i][j] = '.';
				} else if (g[i][j] == 'G'){
					ex = i; ey = j;
					g[i][j] = '.';
				}
				if (g[i][j] != '.'){
					block[i][j] = 1;
				}
			}
		}
		REP(i, 0, N){
			REP(j, 0, M){
				if (g[i][j] == '.' || g[i][j] == '#') continue;
				int id;
				if (g[i][j] == '^') id = 0;
				if (g[i][j] == '>') id = 1;
				if (g[i][j] == 'v') id = 2;
				if (g[i][j] == '<') id = 3;
				REP(t, 0, 4){
					int d = (id + t) % 4;
					int x = i + dir[d][0], y = j + dir[d][1];
					while (valid(x, y) && !block[x][y]){
						dead[t][x][y] = 1;
						x += dir[d][0];
						y += dir[d][1];
					}
				}
			}
		}
		queue< pair<PII, int> > q;
		dst[0][sx][sy] = 0;
		q.push(make_pair(PII(sx, sy), 0));
		int ans = INF;
		while (!q.empty()){
			int x = q.front().first.first, y = q.front().first.second, t = q.front().second;
			q.pop();
			if (x == ex && y == ey){
				ans = dst[t][x][y];
				break;
			}
			REP(d, 0, 4){
				int nx = x + dir[d][0], ny = y + dir[d][1], nt = (t+1)%4;
				if (valid(nx, ny) && !block[nx][ny] && !dead[nt][nx][ny] && dst[nt][nx][ny] == INF){
					dst[nt][nx][ny] = dst[t][x][y] + 1;
					q.push(make_pair(PII(nx, ny), nt));
				}
			}
		}
		if (ans == INF) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}
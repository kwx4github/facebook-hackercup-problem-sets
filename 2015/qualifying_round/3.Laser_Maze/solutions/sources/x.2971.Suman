#include<bits/stdc++.h>

using namespace std;
#define in(a,x,y) (a>=x && a<=y)

int blocked[110][110][5];
char grid[10][110];
int sx,sy,ex,ey;
bool vis[110][110][5];
int n,m;


void change(){

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(grid[i][j]=='^') grid[i][j] = '>';
            else if(grid[i][j]=='>') grid[i][j] = 'v';
            else if(grid[i][j]=='v') grid[i][j] = '<';
            else if(grid[i][j]=='<')grid[i][j] = '^';
        }
    }
}

int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};

void risk(int T){

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
//            int x = i , y =  j;

            int d = -1;
            if(grid[i][j]=='#') blocked[i][j][T] = 1;
            if(grid[i][j]=='>') d = 0;
            if(grid[i][j]=='<') d = 1;
            if(grid[i][j]=='^') d = 3;
            if(grid[i][j]=='v') d = 2;


            if(d!=-1){
                blocked[i][j][T] = 1;
                int x = i + dx[d], y = j  + dy[d] ;
                while(in(x,1,n) && in(y,1,m)){

                    if(grid[x][y]=='.') blocked[x][y][T] = 1;
                    else break;

                    x += dx[d];
                    y += dy[d];
                }
            }
        }
    }
}


struct DT{
    int x,y,tm,mod;
};

int bfs(){

    queue<DT>q;
    DT dd;
    dd.x = sx , dd.y = sy , dd.tm = 0 , dd.mod = 0;
    q.push(dd);

    while(!q.empty()){

        DT ob = q.front(); q.pop();
        int md = (ob.mod + 1)%4;

        for(int i=0;i<=3;i++){

            int nx = ob.x + dx[i];
            int ny = ob.y + dy[i];

            if(in(nx,1,n) && in(ny,1,m) && !blocked[nx][ny][md] && !vis[nx][ny][md]){

                if(nx==ex && ey==ny) return (ob.tm+1);

                vis[nx][ny][md] = 1;
                DT tmp;tmp.x = nx , tmp.y = ny,tmp.tm = ob.tm + 1 , tmp.mod = md;
                q.push(tmp);
            }
        }
    }

    return -1;
}

int main()
{
    freopen("laser_maze.txt", "r", stdin);
    freopen("output.txt","w",stdout);
    int ts,kk=1;
    cin>>ts;
    while(ts--){

        memset(vis,0,sizeof vis);
        memset(blocked,0,sizeof blocked);

        cin>>n>>m;
        string str;

        for(int i=1;i<=n;i++){
            cin>>str;
            for(int j=1;j<=m;j++){
                if(str[j-1]=='S'){
                    sx = i ; sy = j;
                    str[j-1] = '.';
                }

                if(str[j-1]=='G'){
                    ex = i ; ey = j;
                    str[j-1] = '.' ;
                }

                grid[i][j] = str[j-1];
            }
        }


        for(int i=0;i<=3;i++){

            risk(i);
            change();
        }
//
        int get = bfs();
        cout<<"Case #"<<kk++<<": ";
        if(get==-1) cout<<"impossible"<<endl;
        else cout<<get<<endl;
    }

    return 0;
}

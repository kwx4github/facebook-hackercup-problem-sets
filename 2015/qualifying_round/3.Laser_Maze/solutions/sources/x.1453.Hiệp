#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define REP(i,a,b) for(int i=a; i>=b; i--)
#define FORAD(i,u) for(int i=0; i < (int)u.size();i++)
#define BUG(x) cout << x << endl
#define BUGA(x, n, a, b) for (int i = a; i <= b; i++) cout << x[i] << ' '; cout << endl;
#define ll long long
#define fi first
#define sd second
#define pb push_back
#define two(i) (1 << i)
#define getbit(x, pos) ((x >> (pos - 1)) & 1)
#define sz(x) (int)x.size()

template <class T> T gcd(T x, T y) {
    if (x > y) swap(x, y); while (x != 0) {T r = y % x; y = x; x = r; } return y;
}
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}

const int inf = (int)(1e9);

struct node {
    int x, y, dir;
} q[40010];

int row[] = {1, -1, 0, 0};
int col[] = {0, 0, -1, 1};

int m, n, ok[111][111][4], d[111][111][4];
string s[111];

void init() {
    FOR(i, 1, m) FOR(j, 1, n) FOR(k, 0, 3) ok[i][j][k] = 1;
    FOR(i, 1, m) FOR(j, 1, n) {
        int direct = 0;
        switch(s[i][j]) {
            case '^': direct = 0; break;
            case '<': direct = 1; break;
            case 'v': direct = 2; break;
            case '>': direct = 3; break;
            default: direct = 4;
        }
        if (direct == 4) continue;
        REP(i2, i - 1, 1) ok[i2][j][direct] = 0;
        FOR(j2, j + 1, n) ok[i][j2][(direct + 1) % 4] = 0;
        FOR(i2, i + 1, m) ok[i2][j][(direct + 2) % 4] = 0;
        REP(j2, j - 1, 1) ok[i][j2][(direct + 3) % 4] = 0;
    }
    FOR(i, 1, m) FOR(j, 1, n) FOR(k, 0, 3) d[i][j][k] = inf;
}

int solve(){
    init();
    node start, cur, next;
    FOR(i, 1, m) FOR(j, 1, n) if (s[i][j] == 'S') {
        start.x = i;
        start.y = j;
        start.dir = 0;
        d[i][j][0] = 0;
    }
    int fr = 1, ri = 0;
    q[++ri] = start;
    while (fr <= ri) {
        cur = q[fr++];
       // cout << cur.x << ' ' << cur.y << ' ' << cur.dir << ' ' << d[cur.x][cur.y][cur.dir] << endl;
        if (s[cur.x][cur.y] == 'G') return d[cur.x][cur.y][cur.dir];
        FOR(i, 0, 3) {
            next.x = cur.x + row[i];
            next.y = cur.y + col[i];
            next.dir = (cur.dir + 1) % 4;
            if ((next.x <= 0 || next.x > m) || (next.y <= 0 || next.y > n)) continue;
            if ((s[next.x][next.y] != 'S') && (s[next.x][next.y] != 'G') && (s[next.x][next.y] != '.')) continue;
            if (ok[next.x][next.y][next.dir] && d[next.x][next.y][next.dir] > d[cur.x][cur.y][cur.dir] + 1) {
                d[next.x][next.y][next.dir] = d[cur.x][cur.y][cur.dir] + 1;
                q[++ri] = next;
            }

        }
    }
    return -1;

}

int main() {
    // freopen("laser_maze.txt","r",stdin);
    // freopen("ans.out","w",stdout);
    int test;
    cin >> test;
    FOR(t, 1, test) {
        cin >> m >> n;
        FOR(i, 1, m) {
            cin >> s[i];
            s[i] = "@" + s[i];
        }
        int res = solve();
        cout << "Case #" << t << ": ";
        if (res == -1) cout << "impossible\n"; else cout << res << endl;
    }
     return 0;
}

#include <stdio.h>
#include <iostream>
#include <string>
#include <cstring>
#include <queue>
#include <set>
#include <vector>
#define NMAX 105
#define DEBUG(u) cerr << u << endl
#define x1 x13434
#define y1 y13458

using namespace std;
typedef pair<int, int> ii;
const int INF = (int)2e9 + 7;

struct node {
    int dist;
    int x, y;
    node(int _dist, int _x, int _y): dist(_dist), x(_x), y(_y) {}
};

int f[5][NMAX][NMAX];
char a[NMAX][NMAX];
bool visited[NMAX][NMAX][4*NMAX];
string s;
bool reach = false;
ii st, fn;
int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};
int n, m, test;

bool inside(int x, int y) {
    return (x >= 0 && x < m && y >=0 && y<n);
}

void init() {
    cin >> m >> n;
    for (int i=0; i<m; i++) {
        cin >> a[i];
        for (int j=0; j<n; j++) {
            if (a[i][j] == 'S') st = ii(i, j);
            if (a[i][j] == 'G') fn = ii(i, j);
        }
    }
}

void build() {
    for (int k=0; k<=4; k++)
        for (int i=0; i<=m; i++)
            for (int j=0; j<=n; j++)
                f[k][i][j] = -1;

    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            if (a[i][j] == '<') {
                f[0][i][j] = 0;
                f[1][i][j] = 1;
                f[2][i][j] = 2;
                f[3][i][j] = 3;
            }
            else if (a[i][j] == '^') {
                f[0][i][j] = 1;
                f[1][i][j] = 2;
                f[2][i][j] = 3;
                f[3][i][j] = 0;
            }
            else if (a[i][j] == '>') {
                f[0][i][j] = 2;
                f[1][i][j] = 3;
                f[2][i][j] = 0;
                f[3][i][j] = 1;
            }
            else if (a[i][j] == 'v') {
                f[0][i][j] = 3;
                f[1][i][j] = 0;
                f[2][i][j] = 1;
                f[3][i][j] = 2;
            }

    for (int k=0; k<4; k++)
        for (int i=0; i<m; i++)
            for (int j=0; j<n; j++)
                if (f[k][i][j] != -1 && f[k][i][j] != 10) {
                    int x = i, y = j;
                    while (true) {
                        x = x + dx[f[k][i][j]];
                        y = y + dy[f[k][i][j]];
                        if (inside(x, y) && a[x][y] != '#' && a[x][y] != '<' && a[x][y] != '^' && a[x][y] != '>' && a[x][y] != 'v')
                            f[k][x][y] = 10;
                        else break;
                    }
                    f[k][i][j] = 1;
                }
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++)
            if (a[i][j] == '#')
                for (int k=0; k<4; k++)
                    f[k][i][j] = 9;
}

void BFS(int x0, int y0) {
    reach = false;
    queue <node> q;
    q.push(node(0, x0, y0));
    memset(visited, false, sizeof visited);
    visited[x0][y0][0] = true;
    int ans = INF;
    while (!q.empty()) {
        node u = q.front();
        q.pop();
        int x = u.x, y = u.y, dist = u.dist;
        bool check = false;
        if (x == fn.first && y == fn.second) {
            ans = min(ans, dist);
            reach = true;
        }
        for (int i=0; i<4; i++) {
            int x1 = x + dx[i];
            int y1 = y + dy[i];
            if (inside(x1, y1) && f[(dist+1) % 4][x1][y1] != 10 && a[x1][y1] != '#' && !visited[x1][y1][dist+1]) {
                visited[x1][y1][dist+1] = true;
                q.push(node(dist + 1, x1, y1));
            }
        }
    }
    if (!reach) cout << "impossible";
    else cout << ans;
    cout << endl;
}

void process() {
    cin >> test;
    for (int t=1; t<=test; t++) {
        init();
        build();
        cout << "Case " << t <<": ";
        BFS(st.first, st.second);
    }
}

int main() {
    freopen("FHC3.inp","r",stdin);
    freopen("FHC3.out","w",stdout);
    process();
}

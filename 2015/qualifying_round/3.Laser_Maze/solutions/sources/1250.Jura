#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <vector>

using namespace std;

#define FOR(prom, a, b) for(int prom = (a); prom < (b); prom++)
#define FORD(prom, a, b) for(int prom = (a); prom > (b); prom--)
#define FORDE(prom, a, b) for(int prom = (a); prom >= (b); prom--)

#define DRI(a) int a; scanf("%d ", &a);
#define DRII(a, b) int a, b; scanf("%d %d ", &a, &b);
#define DRIII(a, b, c) int a, b, c; scanf("%d %d %d ", &a, &b, &c);
#define DRIIII(a, b, c, d) int a, b, c, d; scanf("%d %d %d %d ", &a, &b, &c, &d);
#define RI(a) scanf("%d ", &a);
#define RII(a, b) scanf("%d %d ", &a, &b);
#define RIII(a, b, c) scanf("%d %d %d ", &a, &b, &c);
#define RIIII(a, b, c, d) scanf("%d %d %d %d ", &a, &b, &c, &d);

#define PB push_back
#define MP make_pair

#define ll long long
#define ull unsigned long long

#define MM(co, cim) memset((co), (cim), sizeof((co)))

#define DEB(x) cerr << ">>> " << #x << " : " << x << endl;

struct s {
  int r, c, t;
};

bool av[107][107][5];
bool vis[107][107][5];
string mp[107];

void init(int r, int c, int dir, int & tdir) {
  switch(mp[r][c]) {
  case '.':
  case 'G':
    if(tdir >= 0) {
      av[r][c][(dir+4-tdir)%4] = false;
    }
    break;
  case '#':
    FOR(k,0,4) av[r][c][k] = false;
    tdir = -1;
    break;
  case '<':
    FOR(k,0,4) av[r][c][k] = false;
    tdir = 3;
    break;
  case '>':
    FOR(k,0,4) av[r][c][k] = false;
    tdir = 1;
    break;
  case '^':
    FOR(k,0,4) av[r][c][k] = false;
    tdir = 0;
    break;
  case 'v':
    FOR(k,0,4) av[r][c][k] = false;
    tdir = 2;
    break;
  }
}

int main ()
{
  DRI(T);
  FOR(t,0,T) {
    MM(vis,false);
    DRII(R,C);
    FOR(i,0,R) cin >> mp[i];
    FOR(r,0,R) FOR(c,0,C) FOR(k,0,4) av[r][c][k] = true;
    int dir;
    FOR(r,0,R) {
      dir = -1;
      FOR(c,0,C) init(r,c,1,dir);
      dir = -1;
      FORDE(c,C-1,0) init(r,c,3,dir);
    }
    FOR(c,0,C) {
      dir = -1;
      FOR(r,0,R) init(r,c,2,dir);
      dir = -1;
      FORDE(r,R-1,0) init(r,c,0,dir);
    }
    int br,bc;
    int er,ec;
    FOR(r,0,R) FOR(c,0,C) {
      if(mp[r][c] == 'S') {
        br = r; bc = c;
      }
      if(mp[r][c] == 'G') {
        er = r; ec = c;
      }
    }
    s p;
    p.r = br;
    p.c = bc;
    p.t = 0;
    queue<s> q;
    q.push(p);
    bool ok = false;
    while(!q.empty()) {
      p = q.front();
      q.pop();
      if(p.r < 0 || p.c < 0 || p.r >= R || p.c >= C) continue;
      if(!av[p.r][p.c][p.t%4]) continue;
      if(vis[p.r][p.c][p.t%4]) continue;
      vis[p.r][p.c][p.t%4] = true;
      if(p.r == er && p.c == ec) {ok = true; break;}
      p.t++;
      p.r++;
      q.push(p);
      p.r--;
      p.r--;
      q.push(p);
      p.r++;
      p.c++;
      q.push(p);
      p.c--;
      p.c--;
      q.push(p);
      p.c++;
    }
    if(ok) cout << "Case #" << t+1 << ": " << p.t << endl;
    else cout << "Case #" << t+1 << ": " << "impossible" << endl;
  }
  return 0;
}











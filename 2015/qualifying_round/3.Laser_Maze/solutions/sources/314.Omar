#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <queue>
using namespace std;
int n, m;
char grid[101][101];
bool vis[100][100][4];
int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};
pair<int , int> src , dist;
bool check(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m && (grid[x][y] == 'G' || grid[x][y] == '.');
}
bool isSafe(int x, int y, int len)
{
    string ops = ">v<^";
    for (int i = 0 ; i < 4 ; i ++)
    {
        int xx = x;
        int yy = y;
        while (check(xx, yy))
            xx += dx[i] , yy += dy[i];
        int ind = (int) ops.find(grid[xx][yy]);
        if (ind != -1)
        {
            ind += len;
            ind %= 4;
            if ((i+2) % 4 == ind)
                return 0;
        }
    }
    return 1;
}
int bfs()
{
    queue<pair<int , int> > q;
    q.push(src);
    grid[src.first][src.second] = '.';
    vis[src.first][src.second][0] = 1;
    int len = 0;
    while (!q.empty())
    {
        int s = (int)q.size();
        while (s --)
        {
            pair<int , int> front = q.front();
            q.pop();
            if (front == dist && isSafe(front.first, front.second, len))
                return len;
            for (int i = 0 ; i < 4 ; i ++)
            {
                int x = front.first + dx[i];
                int y = front.second + dy[i];
                if (check(x , y) && !vis[x][y][(len+1)%4] && isSafe(x, y, len+1) )
                {
                    vis[x][y][(len+1)%4] = 1;
                    q.push(make_pair(x , y));
                }
            }
        }
        len ++;
    }
    return -1;
}
int main()
{
    freopen("/Users/omar/workspace/codeforces/codeforces/test.in" , "rt" , stdin);
    freopen("/Users/omar/workspace/codeforces/codeforces/output.in" , "wt" , stdout);
    int t;
    cin >> t;
    for (int cas = 1 ; cas <= t; cas ++)
    {
        memset(vis, 0 , sizeof vis);
        cin >> n >> m;
        for (int j = 0 ; j < n ; j ++) {
            for (int k = 0 ; k < m ; k ++)
            {
                cin >> grid[j][k];
                if (grid[j][k] == 'S')
                    src = make_pair(j, k);
                else if (grid[j][k] == 'G')
                    dist = make_pair(j , k);
            }
        }
        int res = bfs();
        if (res == -1)
            printf("Case #%d: impossible\n" , cas);
        else
            printf("Case #%d: %d\n", cas, res);
    }
    return 0;
}
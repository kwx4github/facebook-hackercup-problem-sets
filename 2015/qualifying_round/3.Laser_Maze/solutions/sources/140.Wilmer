#include<bits/stdc++.h>
#define ri(X) scanf("%d",&X)
#define rii(X,Y) scanf("%d %d",&X,&Y)
#define rf(X) scanf("%lf",&X)
#define rff(X,Y) scanf("%lf %lf",&X,&Y)
#define mp(X,Y) make_pair(X,Y)
#define pii pair<int,int>
#define FOR(i,j) for(int i=0;i<j;i++)
#define FORC(i,j,c) for(int i=0;i<j;i+=c)

using namespace std;

int N,M,T;
const int mn = 110;
char tab[mn][mn];
int vis[mn][mn][4];
bool hit[mn][mn][4];

int sx,sy;
int gx,gy;
int best;
int mx[4]={0,-1,0,1};
int my[4]={-1,0,1,0};
bool check(int x, int y) {
  return x>=0 && x<N && y>=0 && y<M;
}
queue<pair<pii ,int> > q;
void bfs(){
  vis[sx][sy][0]=0;
  q.push(mp(mp(sx,sy),0));
  
  while(!q.empty()){
    pair<pii,int> par = q.front();
    q.pop();
    int x = par.first.first;
    int y = par.first.second;

    int kk = par.second;

    int cost = vis[x][y][kk];
    if(x == gx && y==gy) {
      best = min(best,cost);
      continue;
    }
    FOR(i,4){
      int nx,ny;
      nx = x+mx[i];
      ny = y+my[i];

      if(!check(nx,ny) || tab[nx][ny]!='.' || hit[nx][ny][(kk+1)%4]) continue;
      if(vis[nx][ny][(kk+1)%4]>=0) continue;
      vis[nx][ny][(kk+1)%4]=cost+1;
      q.push(mp(mp(nx,ny),(kk+1)%4));
    }
    
  }
  
}

int main(){
  ri(T);
  FOR(t,T){
    printf("Case #%d: ",t+1);
    best = 0x3f3f3f3f;
    rii(N,M);
    FOR(i,N) scanf("%s",tab[i]);
    memset(vis,-1,sizeof vis);
    memset(hit,0,sizeof hit);
    FOR(i,N) FOR(j,M){
      if(tab[i][j]=='S'){
        sx = i; sy=j;
        tab[i][j]='.';
      }
      if(tab[i][j]=='G'){
        gx = i; gy=j;
        tab[i][j]='.';
      }
    }
    FOR(i,N) FOR(j,M){
      int ini;
      if(tab[i][j]=='.' || tab[i][j]=='#') continue;
      if(tab[i][j]=='<') ini = 0;
      else if(tab[i][j]=='^') ini = 1;
      else if(tab[i][j]=='>') ini = 2;
      else ini = 3;

      FOR(k,4){
        int posx =i+mx[(k+ini)%4]; int posy = j+my[(k+ini)%4];
 //          cout << posx << " " << posy << " " << k << endl;        
        while(check(posx,posy) && tab[posx][posy]=='.'){

           hit[posx][posy][k]=1;
           posx+=mx[(k+ini)%4];;
           posy+=my[(k+ini)%4];
        }
      }
      
    }

    bfs();
    if(best>=0x3f3f3f3f) cout << "impossible" << endl;
    else cout << best << endl;

  }

	return 0;
}

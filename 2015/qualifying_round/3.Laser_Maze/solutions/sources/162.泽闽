#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> T sqr(T x) {return x*x;}
#define pi acos(-1)
#define INF 100000000
#define debug(x) cerr<<#x"="<<(x)<<"\n";
#define foreach(it,v) for (__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)

struct sf {
	int x,y,k,d;
};
int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};
string s=">v<^";
int n,m;
char a[110][110];
int g[4][110][110];
int v[4][110][110];

int main() {
	int tt;
	scanf("%d",&tt);
	for (int te=1;te<=tt;te++) {
		scanf("%d%d",&n,&m);
		for (int i=1;i<=n;i++) scanf("%s",a[i]+1);
		int stx,sty,edx,edy;
		for (int i=1;i<=n;i++)
			for (int j=1;j<=m;j++) {
				if (a[i][j]=='S') stx=i,sty=j;
				if (a[i][j]=='G') edx=i,edy=j;
			}
		memset(g,0,sizeof(g));
		for (int k=0;k<4;k++) {
			for (int i=1;i<=n;i++)
				for (int j=1;j<=m;j++) {
					if (a[i][j]=='.' || a[i][j]=='S' || a[i][j]=='G') continue;
					g[k][i][j]=1;
					if (a[i][j]=='#') continue;
					for (int u=0;u<4;u++) if (s[u]==a[i][j]) {
						int x=i+dx[u],y=j+dy[u];
						while (x>=1 && x<=n && y>=1 && y<=m && (a[x][y]=='.' || a[x][y]=='S' || a[x][y]=='G')) {
							g[k][x][y]=1;
							x+=dx[u];
							y+=dy[u];
						}
					}
				}
			for (int i=1;i<=n;i++)
				for (int j=1;j<=m;j++)
					for (int u=0;u<4;u++) if (a[i][j]==s[u]) {
						a[i][j]=s[(u+1)%4];
						break;
					}
		}
		queue<sf> Q;
		sf st;
		st.x=stx;
		st.y=sty;
		st.k=0;
		st.d=0;
		Q.push(st);
		memset(v,0,sizeof(v));
		v[0][stx][sty]=1;
		int ans=0;
		while (!Q.empty()) {
			sf now=Q.front();
			Q.pop();
			for (int u=0;u<4;u++) {
				sf next;
				next.x=now.x+dx[u];
				next.y=now.y+dy[u];
				next.k=(now.k+1)%4;
				next.d=now.d+1;
				if (next.x>=1 && next.x<=n && next.y>=1 && next.y<=m && !g[next.k][next.x][next.y] && !v[next.k][next.x][next.y]) {
					if (next.x==edx && next.y==edy) {
						ans=next.d;
						goto targ;
					}
					v[next.k][next.x][next.y]=1;
					Q.push(next);
				}
			}
		}
		targ:
		printf("Case #%d: ",te);
		if (ans==0) puts("impossible");
		else printf("%d\n",ans);
	}
}

#include <cstdio>
#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

const int MaxN = 110;
const int MaxP = 4;
const int inf = 1e9;

const int dr[] = {-1, 1, 0, 0};
const int dc[] = {0, 0, 1, -1};

struct state {
  int p, r, c;
  
  state(int _p = 0, int _r = 0, int _c = 0) {
    p = _p;
    r = _r;
    c = _c;
  }
};

int R, C, sr, sc, gr, gc, per, dist[MaxP][MaxN][MaxN], sol, test;
char a[MaxN][MaxN];
bool bio[MaxP][MaxN][MaxN], ok[MaxP][MaxN][MaxN];

queue <state> Q;

void bfs(void) {
  sol = inf;
  while (!Q.empty()) {
    state x = Q.front();
    Q.pop();

    if (x.r == gr && x.c == gc)
      sol = min(sol, dist[x.p][x.r][x.c]);

    for (int i = 0; i < 4; ++i) {
      int nr = x.r + dr[i], nc = x.c + dc[i], np = (x.p + 1) % 4;
      if (nr < 0 || nc < 0) continue;
      if (nr >= R || nc >= C) continue;
      if (!ok[np][nr][nc] || bio[np][nr][nc]) continue;
      bio[np][nr][nc] = true;
      dist[np][nr][nc] = dist[x.p][x.r][x.c] + 1;
      Q.push(state(np, nr, nc));
    }
  }
}

void go(int r, int c, int dir, int first = 1) {
  if (r < 0 || c < 0) return;
  if (r >= R || c >= C) return;
  if (!first && a[r][c] != '.') return;
  ok[per][r][c] = false;
  go(r + dr[dir], c + dc[dir], dir, 0);
}

char rotate(char x, int t) {
  if (t == 0) return x;
  if (x == '^') return rotate('>', t - 1);
  if (x == '>') return rotate('v', t - 1);
  if (x == 'v') return rotate('<', t - 1);
  return rotate('^', t - 1);
}

void clear_all(void) {
  for (; !Q.empty(); Q.pop());
  memset(bio, false, sizeof(bio));
  memset(dist, 0, sizeof(dist));
}

void init(void) {
  scanf("%d %d",&R,&C);
  for (int r = 0; r < R; ++r)
    scanf("%s",a[r]);
 
  for (int r = 0; r < R; ++r)
    for (int c = 0; c < C; ++c)
      if (a[r][c] == 'S') {
	sr = r;
	sc = c;
	a[r][c] = '.';
      }
      else if (a[r][c] == 'G') {
	gr = r;
	gc = c;
	a[r][c] = '.';
      }

  for (per = 0; per < 4; ++per) {
    for (int r = 0; r < R; ++r)
      for (int c = 0; c < C; ++c)
	ok[per][r][c] = (a[r][c] == '.') ? true : false;
    for (int r = 0; r < R; ++r)
      for (int c = 0; c < C; ++c) {
	if (a[r][c] == '#' || a[r][c] == '.') continue;
	char laser = rotate(a[r][c], per);
	if (laser == '^')
	  go(r, c, 0);
	else if (laser == 'v')
	  go(r, c, 1);
	else if (laser == '>')
	  go(r, c, 2);
	else if(laser == '<')
	  go(r, c, 3);
      }
  }
    
}

void solve(void) {
  Q.push(state(0, sr, sc));
  bfs();
  
  printf("Case #%d: ",test);
  if (sol == inf)
    printf("impossible\n");
  else
    printf("%d\n",sol);
}

int main(void) {
  int t;
  scanf("%d",&t);
  for (test = 1; test <= t; ++test) {
    clear_all();
    init();
    solve();
  }
  return 0;
}

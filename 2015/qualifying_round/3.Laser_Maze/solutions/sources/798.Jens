""" imports """
#pylint: disable=W0622
#pylint: disable=E0102
from __future__ import division
import glob, pickle, os, time, sys, argparse
from copy import copy
from numpy import array, sin, cos
import numpy as np
from pylab import *
from pprint import pprint

""" global variables """
DIRECTION_LEFT = 0
DIRECTION_UP = 1
DIRECTION_RIGHT = 2
DIRECTION_DOWN = 3
TURRET_SYMBOL_TO_DIRECTION = {
    '<': DIRECTION_LEFT,
    '^': DIRECTION_UP,
    '>': DIRECTION_RIGHT,
    'v': DIRECTION_DOWN,
}
DIRECTION_TO_VECTOR = {
    DIRECTION_LEFT: array([-1, 0]),
    DIRECTION_UP: array([0, 1]),
    DIRECTION_RIGHT: array([1, 0]),
    DIRECTION_DOWN: array([0, -1]),
}

## mutable global variables ##
global_map = None

""" classes """
class Queue:
    """A sample implementation of a First-In-First-Out
       data structure."""
    def __init__(self):
        self.in_stack = []
        self.out_stack = []
    def push(self, obj):
        self.in_stack.append(obj)
    def pop(self):
        if not self.out_stack:
            while self.in_stack:
                self.out_stack.append(self.in_stack.pop())
        return self.out_stack.pop()
    def contains_elements(self):
        return self.in_stack or self.out_stack

class Map(object):
    W, H = 0, 0 # width, height
    turrets = None # list of Turrets
    start_loc = (0, 0)
    goal_loc = (0, 0)
    inrement_to_non_empty_mx = None # maps turret_direction_increment -> numpy 2D boolean array, index: (x,y) with (0,0) bottom left corner

    def __init__(self, W, H, turrets, start_loc, goal_loc, inrement_to_non_empty_mx):
        assert isinstance(turrets, list)
        assert isinstance(start_loc, tuple)
        assert isinstance(goal_loc, tuple)
        assert isinstance(inrement_to_non_empty_mx, dict)
        self.W, self.H = W, H
        self.turrets = turrets
        self.start_loc = start_loc
        self.goal_loc = goal_loc
        self.inrement_to_non_empty_mx = inrement_to_non_empty_mx

    def is_empty_at(self, loc, turret_direction_increment):
        x, y = loc
        if not (0 <= x < self.W and 0 <= y < self.H):
            return False
        return not self.inrement_to_non_empty_mx[turret_direction_increment][x, y]

    def printMap(self):
        for increment in range(4):
            print "increment = %s" % increment
            for y in reversed(range(self.H)):
                print ''.join('#' if self.inrement_to_non_empty_mx[increment][x, y] else '.' for x in range(self.W))

class Turret(object):
    loc = (0, 0)
    start_direction = 0

    def __init__(self, loc, start_direction):
        assert isinstance(loc, tuple)
        self.loc = loc
        self.start_direction = start_direction

    def shoots_player_if_state(self, player_loc, turret_direction, non_empty_mx, W, H):
        if player_loc[0] != self.loc[0] and player_loc[1] != self.loc[1]:
            return False # optimization
        vector = DIRECTION_TO_VECTOR[turret_direction]
        beam_loc = self.loc
        while True:
            beam_loc += vector
            if not self.mx_is_empty_at(beam_loc, non_empty_mx, W, H):
                return False
            if array_equal(beam_loc, player_loc):
                return True

class State(object):
    player_loc = (0, 0)
    turret_direction_increment = 0

    def __init__(self, player_loc, turret_direction_increment):
        assert isinstance(player_loc, tuple)
        self.player_loc = player_loc
        self.turret_direction_increment = turret_direction_increment

    def __key(self):
        return (self.player_loc, self.turret_direction_increment)

    def __eq__(self, y):
        return self.__key() == y.__key()

    def __hash__(self):
        return hash(self.__key())

    def is_at_goal(self):
        return global_map.goal_loc == self.player_loc

    def is_legal_state(self):
        return global_map.is_empty_at(self.player_loc, self.turret_direction_increment)

    def get_next_legal_states(self):
        possible_moves_vectors = DIRECTION_TO_VECTOR.values()
        legal_states = []
        for vector in possible_moves_vectors:
            new_player_loc = tuple(self.player_loc + vector)
            state = State(new_player_loc, (self.turret_direction_increment + 1) % 4)
            if state.is_legal_state():
                legal_states.append(state)
        return legal_states

""" functions """
def is_valid_location(loc, W, H):
    x, y = loc
    if not (0 <= x < W and 0 <= y < H):
        return False
    return True
def mx_is_empty_at(loc, non_empty_mx, W, H):
    x, y = loc
    if not (0 <= x < W and 0 <= y < H):
        return False
    return not non_empty_mx[x, y]


def solve(parsed_map, start_state):
    global global_map #pylint: disable=W0603
    global_map = parsed_map
    # global_map.printMap()

    unseen_states = Queue(); unseen_states.push(start_state) # FIFO queue #pylint: disable=C0321
    state_to_minim_steps = {start_state: 0}
    while unseen_states.contains_elements():
        state = unseen_states.pop()
        num_steps = state_to_minim_steps[state]
        next_states = state.get_next_legal_states()
        for next_state in next_states:
            if next_state in state_to_minim_steps: # already seen this state
                continue
            if next_state.is_at_goal():
                return num_steps + 1
            state_to_minim_steps[next_state] = num_steps + 1
            unseen_states.push(next_state)
    return "impossible"


def main():
    ### parse input ###
    ## parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", default="default.in", nargs='?')
    parser.add_argument("-t", "--test", action="store_true")
    parser.add_argument("-l", "--lazytest", action="store_true")
    args = parser.parse_args()
    output = ""
    TIC = time.time()

    ## read input lines
    input_lines = open(args.filename).readlines()
    def read_line():
        return input_lines.pop(0).strip()
    def read_ints():
        return [int(x) for x in read_line().split(' ')]
    def read_floats():
        return [float(x) for x in read_line().split(' ')]
    (numquestions,) = read_ints()
    for questionindex in xrange(numquestions):
        ### parse input ###
        H, W = read_ints()
        rows = []
        for h in range(H):
            rows.append(read_line())

        # invert rows so left bottom corner is y = 0
        rows = reversed(rows)

        # parse into objects
        turrets = []
        start_turret_directions = []
        start_loc = None
        goal_loc = None
        non_empty_mx = np.ones((W, H), dtype=bool)
        for y, row in enumerate(rows):
            for x, cell in enumerate(row):
                loc = (x, y)
                assert cell in "#^<>vSG."
                cell_empty = cell in "SG."
                non_empty_mx[loc] = not cell_empty
                if cell == 'S':
                    start_loc = loc
                if cell == 'G':
                    goal_loc = loc
                if cell in "^<>v":
                    turrets.append(Turret(loc, TURRET_SYMBOL_TO_DIRECTION[cell]))

        # get inrement_to_non_empty_mx
        inrement_to_non_empty_mx = {}
        for turret_direction_increment in range(4):
            this_non_empty_mx = np.array(non_empty_mx, copy=True)
            for turret in turrets:
                turret_direction = (turret.start_direction + turret_direction_increment) % 4
                vector = DIRECTION_TO_VECTOR[turret_direction]
                beam_loc = turret.loc
                while True:
                    beam_loc += vector
                    if not is_valid_location(loc, W, H):
                        break
                    if mx_is_empty_at(beam_loc, non_empty_mx, W, H):
                        this_non_empty_mx[tuple(beam_loc)] = True
                    else:
                        break

            inrement_to_non_empty_mx[turret_direction_increment] = this_non_empty_mx

        parsed_map = Map(W, H, turrets, start_loc, goal_loc, inrement_to_non_empty_mx)
        start_state = State(start_loc, turret_direction_increment=0)

        ### calculate answer ###
        answer = solve(parsed_map, start_state)
        assert answer != None

        ### output ###
        #print "Calculating case #{}...".format(questionindex+1)
        answer_str = "Case #{}: {}".format(questionindex+1, answer)
        output += answer_str + '\n'
        print answer_str

    ## write output
    ofile = open('output', 'w').write(output)
    TOC = time.time()
    #print "done in {} s".format(TOC-TIC)


    ### test ###
    if args.test:
        def filter_extension(filename):
            filename_parts = filename.split('.')
            if len(filename_parts) > 1:
                filename_parts = filename_parts[:-1]
            return '.'.join(filename_parts)

        print
        print "== TESTING VALIDITY =="

        try:
            # check if all input was used
            assert not len([l for l in input_lines if l.strip()]), "Not all input was used"

            # filter extension of filename
            filename_without_extension = filter_extension(args.filename)

            # get calculated and correct lines
            calculated_lines = [l.strip() for l in output.split('\n') if l.strip()]
            correct_lines = [l.strip() for l in open("{}.out".format(filename_without_extension)).readlines() if l.strip()]

            # check if number of lines match
            assert len(correct_lines) == len(calculated_lines), "calculated {} lines but expected {}".format(len(calculated_lines), \
                                                                len(correct_lines))

            # apply lazytest: filter away test numer
            unfiltered_calculated_lines = calculated_lines
            unfiltered_correct_lines = correct_lines
            if args.lazytest:
                def filter_test_number(line):
                    if line.startswith("Case #"):
                        parts = line.split('#')
                        parts[1] = parts[1][parts[1].index(':'):]
                        return '#'.join(parts)
                    else:
                        return line
                calculated_lines = [filter_test_number(l) for l in calculated_lines]
                correct_lines = [filter_test_number(l) for l in correct_lines]

            # get lines that don't match
            incorrect_line_numbers = []
            for line_number, (correct_line, calculated_line) in enumerate(zip(correct_lines, calculated_lines)):
                if correct_line != calculated_line:
                    incorrect_line_numbers.append(line_number)
            if len(incorrect_line_numbers):
                error_msg = "\n"
                for line_number in incorrect_line_numbers:
                    error_msg += '    "{}"  should be  "{}"\n'.format(unfiltered_calculated_lines[line_number],
                                                                      unfiltered_correct_lines[line_number])
                raise AssertionError(error_msg)

            print "SUCCESS"

        except AssertionError as ex:
            print "\nFAILED:"
            print str(ex)
        print


if __name__ == '__main__':
    main()

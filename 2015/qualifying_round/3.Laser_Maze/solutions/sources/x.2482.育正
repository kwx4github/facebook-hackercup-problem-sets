import Queue
T = int(raw_input())
for t in xrange(1, T+1):
	M, N = map(int, raw_input().split())
	M, N = M+2, N+2
	raw_data = ["#"*N]
	for i in xrange(M-2):
		row = "#" + raw_input() + "#"
		raw_data += [row]
	raw_data += ["#"*N]
	dirs = [[-1,0], [0,1], [1,0], [0,-1]]
	maze = []
	for i in range(4):
		layer = []
		for j in range(M):
			row = []
			for k in range(N):
				if raw_data[j][k] == '.' :
					row += [0];
				elif raw_data[j][k] == '#' :
					row += [1];
				elif raw_data[j][k] == 'S' :
					row += [0];
				elif raw_data[j][k] == 'G' :
					row += [2];
				elif raw_data[j][k] == '^' :
					row += [-4];
				elif raw_data[j][k] == '>' :
					row += [-1];
				elif raw_data[j][k] == 'v' :
					row += [-2];
				elif raw_data[j][k] == '<' :
					row += [-3];
			layer += [row]
		for j in xrange(M):
			for k in xrange(N):
				if layer[j][k] < 0:
					d = dirs[(-layer[j][k] + i)%4]
					now = [j+d[0], k+d[1]]
					while layer[now[0]][now[1]] == 0 or layer[now[0]][now[1]] == 2:
						layer[now[0]][now[1]] = 1
						now = [now[0]+d[0], now[1]+d[1]]
		maze += [layer]
	
	head = []
	for i in range(M):
		for j in range(N):
			if raw_data[i][j] == 'S':
				head = (i, j, 0)
				maze[0][i][j] = 1
	q = Queue.Queue()
	q.put(head)
	ans = 'impossible'
	while ans == 'impossible' and not q.empty():
		now = q.get()
		time = (now[2]+1)%4
		for i in range(4):
			x = now[0]+dirs[i][0]
			y = now[1]+dirs[i][1]
			if maze[time][x][y] == 2:
				ans = str(now[2]+1)
				break
			if maze[time][x][y] == 0:
				maze[time][x][y] = 1
				q.put([x, y, now[2]+1])
	print "Case #" + str(t) + ": " + ans

import java.util.*;
import java.io.*;

class FacebookHack3
{
    static String numbers = "12";
    
	//####################################################
    public static void main(String[] args) throws Exception
    {
    	Scanner file = new Scanner(System.in);
    	int numIter = file.nextInt();
    	for(int iter = 0; iter < numIter; iter++)
    	{
    	    int rows = file.nextInt();
    	    int cols = file.nextInt();
    	    
    	    char[][] mat = new char[rows][cols];
    	    for(int i = 0; i < rows; i++)
    	    {
    	        mat[i] = file.next().toCharArray();
    	    }
    	    for(int r = 0; r < mat.length; r++)
    	    {
    	        for(int c = 0; c < mat[0].length; c++)
    	        {
    	            //System.out.print(mat[r][c]);
    	        }
    	        //System.out.println(); 
    	    }
    	    
    	    int startRow = 0;
    	    int startCol = 0;
    	    
    	    for(int r = 0; r < mat.length; r++)
    	    {
    	        for(int c = 0; c < mat[0].length; c++)
    	        {
    	            if(mat[r][c] == 'S')
    	            {
    	                mat[r][c] = '.';
    	                startRow = r;
    	                startCol = c;
    	            }
    	        }
    	    }
    	    int steps = recur(mat, startRow, startCol, 0);
    	    System.out.print("Case #" + (iter + 1) + ": ");
    	    if(steps < Integer.MAX_VALUE)
    	        System.out.println(steps);
    	    else
    	        System.out.println("impossible");
    	}
    } //end main
    
    static int recur(char[][] mat, int row, int col, int steps)
    {
        if(row >= mat.length || col >= mat[0].length || row < 0 || col < 0 || (!isSafe(mat, row, col) && steps != 0) || (numbers.indexOf(mat[row][col]) < 0 && mat[row][col] != '.' && mat[row][col] != 'G'))
        {
            return Integer.MAX_VALUE;
        }
        if(mat[row][col] == 'G')
        {
            return steps;
        }
        if(mat[row][col] == '.')
            mat[row][col] = '1';
        if(mat[row][col] == '2')
        {
            return Integer.MAX_VALUE;
        }
        if(numbers.indexOf(mat[row][col]) >= 0)
        {
            mat[row][col] = numbers.charAt(numbers.indexOf(mat[row][col]) + 1);
        }
        for(int r = 0; r < mat.length; r++)
	    {
	        for(int c = 0; c < mat[0].length; c++)
	        {
	            if(mat[r][c] == 'v')
	            {
	                mat[r][c] = '<';
	            }
	            else if(mat[r][c] == '<')
	            {
	                mat[r][c] = '^';
	            }
	            else if(mat[r][c] == '^')
	            {
	                mat[r][c] = '>';
	            }
	            else if(mat[r][c] == '>')
	            {
	                mat[r][c] = 'v';
	            }
	        }
	    }
	    int min = Integer.MAX_VALUE;
	    int i = recur(mat, row + 1, col, steps + 1);
	    if(i < min)
	        min = i;
	    i = recur(mat, row - 1, col, steps + 1);
	    if(i < min)
	        min = i;
	    i = recur(mat, row, col + 1, steps + 1);
	    if(i < min)
	        min = i;
	    i = recur(mat, row, col - 1, steps + 1);
	    if(i < min)
	        min = i;
	        
	    for(int r = 0; r < mat.length; r++)
	    {
	        for(int c = 0; c < mat[0].length; c++)
	        {
	            if(mat[r][c] == 'v')
	            {
	                mat[r][c] = '<';
	            }
	            else if(mat[r][c] == '<')
	            {
	                mat[r][c] = '^';
	            }
	            else if(mat[r][c] == '^')
	            {
	                mat[r][c] = '>';
	            }
	            else if(mat[r][c] == '>')
	            {
	                mat[r][c] = 'v';
	            }
	        }
	    }
	    if(numbers.indexOf(mat[row][col]) > 1)
        {
            mat[row][col] = numbers.charAt(numbers.indexOf(mat[row][col]) - 1);
        }
        return min;
    }
    
    static boolean isSafe(char[][] mat, int row, int col)
    {
        for(int i = 1; i < mat[0].length; i++)
        {
            if(col + i >= mat[0].length || mat[row][col + i] == '#' || mat[row][col + i] == '>' || mat[row][col + i] == '^' || mat[row][col + i] == 'v')
            {
                break;
            }
            else if(mat[row][col + i] == '<')
            {
                return false;
            }
        }
        for(int i = 1; i < mat[0].length; i++)
        {
            if(col - i < 0 || mat[row][col - i] == '#' || mat[row][col - i] == '<' || mat[row][col - i] == '^' || mat[row][col - i] == 'v')
            {
                break;
            }
            else if(mat[row][col - i] == '>')
            {
                return false;
            }
        }
        for(int i = 1; i < mat.length; i++)
        {
            if(row + i >= mat.length || mat[row + i][col] == '#' || mat[row + i][col] == '>' || mat[row + i][col] == '<' || mat[row + i][col] == 'v')
            {
                break;
            }
            else if(mat[row + i][col] == '^')
            {
                return false;
            }
        }
        for(int i = 1; i < mat.length; i++)
        {
            if(row - i < 0 || mat[row - i][col] == '#' || mat[row - i][col] == '>' || mat[row - i][col] == '<' || mat[row - i][col] == '^')
            {
                break;
            }
            else if(mat[row - i][col] == 'v')
            {
                return false;
            }
        }
        
        return true;
    }
    
    
} //end Traverse

#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <list>
#include <cstring>
#include <stack>
#include <bitset>

using namespace std;

#define NMAX 2147483647
#define LMAX 9223372036854775807LL
#define pb push_back
#define pob pop_back
#define mp make_pair
#define st first
#define nd second
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(a);i>(b);--i)
#define REP(i,n) FOR(i,0,n)
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)

int dp[111][111][4];
int R, C;
char S[111][111];
bool forb[111][111][4];
string lTurret = "<^>v";
int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};

int isLasserTurret(char x) {
  REP(i,4) {
    if(x == lTurret[i]) return i + 1;
  }
  return 0;
}

int solve(int startX, int startY) {
  REP(i,R)REP(j,C)REP(k,4) dp[i][j][k] = NMAX;
  queue<pair <pair<int,int>,int> > Q;
  pair <pair<int,int>, int> q;
  q = mp(mp(startX,startY), 0);
  Q.push(q);
  while(!Q.empty()) {
    q = Q.front();
    Q.pop();
    int x = q.st.st;
    int y = q.st.nd;
    int pos = q.nd;
    for(int i = 0; i < 4; i++) {
      int tx = x + dx[i];
      int ty = y + dy[i];
      if(tx < 0 || tx >= R || ty < 0 || ty >= C) continue;
      if(S[tx][ty] == '#' || isLasserTurret(S[tx][ty])) continue;
      if(forb[tx][ty][(pos + 1) % 4]) continue;
      if(dp[tx][ty][(pos + 1) % 4] > pos + 1) {
        if(S[tx][ty] == 'G') return pos + 1;
        dp[tx][ty][(pos + 1) % 4] = pos + 1;
        q = mp(mp(tx,ty), pos + 1);
        Q.push(q);
      }
    }
  }
  return -1;
}

int main()
{
  freopen("input.txt","r",stdin);
  freopen("out.txt","w",stdout);
  int TS;
  scanf("%d",&TS);
  FORE(ts,1,TS) {
    memset(forb,0,sizeof(forb));
    scanf("%d%d",&R,&C);
    REP(i,R) {
      scanf("%s",S[i]);
    }
    REP(i,R)REP(j,C) {
      if(S[i][j] == '#' || isLasserTurret(S[i][j])) {
        REP(k,4) forb[i][j][k] = 1;
      }
      if(isLasserTurret(S[i][j])) {
        int idx = isLasserTurret(S[i][j]) - 1;
        REP(sudut,4) {
          int dNow = (idx + sudut) % 4;
          for(int laser = 1; ; laser++) {
            int tx = i + laser * dx[dNow];
            int ty = j + laser * dy[dNow];
            if(tx < 0 || tx >= R || ty < 0 || ty >= C) break;
            if(S[tx][ty] == '#' || isLasserTurret(S[tx][ty])) break;
            forb[tx][ty][sudut] = 1;
          }
        }
      }
    }


    int ans = -1;
    REP(i,R)REP(j,C){
      if(S[i][j] == 'S') {
        ans = solve(i, j);
        printf("Case #%d: ",ts);
        if(ans == -1) printf("impossible\n");
        else printf("%d\n",ans);
      }
    }

  }
  return 0;
}

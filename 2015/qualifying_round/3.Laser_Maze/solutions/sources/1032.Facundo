/*
        By: facug91
        From: 
        Name: 
        Date: 08/01/2015
*/

#include <bits/stdc++.h>
#define MAX_INT 2147483647
#define MAX_LONG 9223372036854775807ll
#define MAX_DBL 1.7976931348623158e+308
#define EPS 1e-9
const double PI = 2.0*acos(0.0);

#define INF 1000000000
//#define MOD 1000000007ll
//#define MAXN 1000005

using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, pair<int, int> > iii;

int n, m, dis[105][105][4], ans, dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
bool vis[105][105][4];
string mat[105];
ii origin, dest;
map<char, int> laser;

bool check_pos (int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}

bool is_dead (iii &p) {
	int x = p.second.first;
	int y = p.second.second;
	int d = p.first;
	for (int i=0; i<4; i++) {
		int w = x + dx[i];
		int z = y + dy[i];
		while (check_pos(w, z) && mat[w][z] != '#') {
			if (mat[w][z] != '.' && mat[w][z] != 'G') {
				if (((laser[mat[w][z]]+dis[x][y][d])%4) == i) return true;
				else break;
			}
			w += dx[i];
			z += dy[i];
		}
	}
	return false;
}

int bfs () {
	memset(vis, 0, sizeof vis);
	queue<iii> q;
	q.push(iii(0, origin));
	vis[origin.first][origin.second][0] = true;
	dis[origin.first][origin.second][0] = 0;
	iii act;
	bool first = true;
	while (!q.empty()) {
		act = q.front(); q.pop();
		if (!is_dead(act) || first) {
			first = false;
			int x = act.second.first;
			int y = act.second.second;
			int d = act.first;
			if (mat[x][y] == 'G') return dis[x][y][d];
			for (int i=0; i<4; i++) {
				int w = x + dx[i];
				int z = y + dy[i];
				if (check_pos(w, z)) {
					if (((mat[w][z] == '.') || (mat[w][z] == 'G')) && !vis[w][z][(d+1)%4]) {
						vis[w][z][(d+1)%4] = true;
						dis[w][z][(d+1)%4] = dis[x][y][d] + 1;
						q.push(iii((d+1)%4, ii(w, z)));
					}
				}
			}
		}
	}
	return -1;
}

int main () {
	ios_base::sync_with_stdio(0);
	int TC, i, j, k;
	
	laser['v'] = 0;
	laser['<'] = 1;
	laser['^'] = 2;
	laser['>'] = 3;
	
	cin>>TC;
	for (int it=1; it<=TC; it++) {
		cin>>n>>m;
		for (i=0; i<n; i++)
			cin>>mat[i];
		for (i=0; i<n; i++) {
			for (j=0; j<m; j++) {
				if (mat[i][j] == 'S') {
					origin.first = i;
					origin.second = j;
					mat[i][j] = '.';
				} else if (mat[i][j] == 'G') {
					dest.first = i;
					dest.second = j;
				}
			}
		}
		ans = bfs();
		if (ans == -1) cout<<"Case #"<<it<<": impossible"<<endl;
		else cout<<"Case #"<<it<<": "<<ans<<endl;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	return 0;
}

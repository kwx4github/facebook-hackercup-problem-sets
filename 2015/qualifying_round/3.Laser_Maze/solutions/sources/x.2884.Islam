#include <iostream>
#include <string>
#include <queue>
using namespace std;

string arr[105];
int dx[] = {0,-1,0,1};
int dy[] = {-1,0,1,0};
bool vis[105][105][5];
int Sx, Sy, N, M;
class node {
      public:
             int x, y, time, dist;
             node(int a, int b, int c, int d) : x(a), y(b), time(c), dist(d) {}
};

bool inGrid(int x,int y)
{    
     if(x < 0 || y < 0 || x >= N || y >= M)
            return 0;
     return 1;
}

bool valid(node t)
{
     if(!inGrid(t.x, t.y))
            return 0;
     if(arr[t.x][t.y] == '#')
            return 0;
     for(int i = 0 ; i < 4; i++)
     {
             int X = t.x, Y = t.y;
             while(inGrid(X, Y)) {
                               char c = arr[X][Y];
                               if(c == '#')
                                                break;
                               if(c - '0' >= 0 && c - '0' <= 3 && abs(i - ((c - '0' + t.time)%4)) == 2) 
                                    return 0;
                               X += dx[i], Y += dy[i];
             }
     }
     return 1;
}

int bfs()
{
    memset(vis,0,sizeof vis);
    queue<node> Q;
    for(int i = 0; i < 4; ++i)
            Q.push(node(Sx + dx[i], Sy + dy[i], 1, 1));
    while(Q.size())
    {
         node t = Q.front();
         Q.pop();
         if(!valid(t) || vis[t.x][t.y][t.time]) continue;
         if(arr[t.x][t.y] == 'G') return t.dist;
         vis[t.x][t.y][t.time] = 1;
         for(int i = 0; i < 4; i++)
                 Q.push(node(t.x + dx[i], t.y + dy[i], (t.time + 1) % 4, t.dist + 1));
                    
    }
    return -1;
}

int main()
{
    freopen("test.in","r",stdin);
    freopen("test.out","w",stdout);
    int T;
    cin >> T;
    for(int TEST = 1; TEST <= T; ++TEST) {
            cin >> N >> M;
            for(int i = 0 ; i < N; ++i)
                    cin >> arr[i];
            for(int i = 0; i < N; ++i)
                    for(int j = 0 ; j < M; ++j)
                            if(arr[i][j] == '<')
                                      arr[i][j] = '0';
                            else if(arr[i][j] == '^')
                                      arr[i][j] = '1';
                            else if(arr[i][j] == '>')
                                      arr[i][j] = '2';
                            else if(arr[i][j] == 'v')
                                      arr[i][j] = '3';
                            else if(arr[i][j] == 'S')
                                 Sx = i, Sy = j;
            int ans = bfs();
            if(ans == -1)
                   cout << "Case #" << TEST << ": impossible" << endl;
            else
                   cout << "Case #" << TEST << ": " << ans << endl;
    }
}

#include<bits/stdc++.h>
using namespace std;

char maze[103][103];
int isHit[103][103][4];
int vis[103][103][4];
int row, col, visID=1;
int startR, startC;
int movr[4]={1,-1,0,0}, movc[4]={0,0,1,-1};

void blockLeft(int r, int c, int x){
	for(--c;c>=0;--c){
		if(maze[r][c]=='#'||maze[r][c]=='<'||maze[r][c]=='^'
		||maze[r][c]=='>'||maze[r][c]=='v')
			break;
		isHit[r][c][x]=visID;
	}
}

void blockRight(int r, int c, int x){
	for(++c;c<col;++c){
		if(maze[r][c]=='#'||maze[r][c]=='<'||maze[r][c]=='^'
		||maze[r][c]=='>'||maze[r][c]=='v')
			break;
		isHit[r][c][x]=visID;
	}
}

void blockUp(int r, int c, int x){
	for(--r;r>=0;--r){
		if(maze[r][c]=='#'||maze[r][c]=='<'||maze[r][c]=='^'
		||maze[r][c]=='>'||maze[r][c]=='v')
			break;
		isHit[r][c][x]=visID;
	}
}

void blockDown(int r, int c, int x){
	for(++r;r<row;++r){
		if(maze[r][c]=='#'||maze[r][c]=='<'||maze[r][c]=='^'
		||maze[r][c]=='>'||maze[r][c]=='v')
			break;
		isHit[r][c][x]=visID;
	}
}

void check(){
	for(int r=0;r<row;++r){
		for(int c=0;c<col;++c){
			if(maze[r][c]=='S')
				startR=r, startC=c;
			else if(maze[r][c]=='<')
				blockLeft(r,c,0), blockUp(r,c,1),
				blockRight(r,c,2), blockDown(r,c,3);
			else if(maze[r][c]=='^')
				blockUp(r,c,0), blockRight(r,c,1),
				blockDown(r,c,2), blockLeft(r,c,3);
			else if(maze[r][c]=='>')
				blockRight(r,c,0), blockDown(r,c,1),
				blockLeft(r,c,2), blockUp(r,c,3);
			else if(maze[r][c]=='v')
				blockDown(r,c,0), blockLeft(r,c,1),
				blockUp(r,c,2), blockRight(r,c,3);
		}
	}
}

bool isValid(int r, int c, int m){
	if((r<0)||(r>=row)||(c<0)||(c>=col))
			return false;
	if(maze[r][c]=='#'||maze[r][c]=='<'||maze[r][c]=='^'
		||maze[r][c]=='>'||maze[r][c]=='v')
		return false;
	if(isHit[r][c][m]==visID)
		return false;
	return true;
}

struct Cell{
	int r, c, m, cost;
	Cell(const int &_r, const int &_c,
			const int &_m, const int &_cost){
		r=_r, c=_c, m=_m, cost=_cost;
	}

	friend bool operator <(const Cell &cell1, const Cell &cell2){
		return cell1.cost < cell2.cost;
	}
};

int fun(){
	priority_queue<Cell> q;
	q.push(Cell(startR, startC, 0, 0));
	while(!q.empty()){
		Cell cur=q.top(); q.pop();
		if(vis[cur.r][cur.c][cur.m]==visID)
			continue;
		if(maze[cur.r][cur.c]=='G')
			return -1*cur.cost;
		vis[cur.r][cur.c][cur.m]=visID;
		int m=(cur.m+1)%4, cost=cur.cost-1;
		for(int i=0;i<4;++i){
			if(isValid(cur.r+movr[i],cur.c+movc[i],m))
				q.push(Cell(cur.r+movr[i],
						cur.c+movc[i],m,cost));
		}
	}

	return -1;
}

int main()
{
    ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	memset(vis,0,sizeof vis);
	memset(isHit,0,sizeof isHit);

	int t, sol; cin>>t;
	for(int cas=1;cas<=t;++cas){
		cin>>row>>col;
		for(int i=0;i<row;++i)
			cin>>maze[i];
		++visID, check();
		sol=fun();
		if(sol!=-1)
			cout<<"Case #"<<cas<<": "<<sol<<'\n';
		else cout<<"Case #"<<cas<<": impossible\n";
	}

	return 0;
}

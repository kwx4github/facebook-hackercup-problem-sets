#include <iostream>
#include <cstdio>
#include <map>
#include <cstring>
#include <queue>
using namespace std;

#define MAX 111

int n, m;
char G[MAX][MAX];
bool bad[4][MAX][MAX];
int di[] = {-1, 0, 1, 0}, dj[] = {0, 1, 0, -1};
map<char, int> dir;
bool used[4][MAX][MAX];
int si, sj, gi, gj;

int solve()
{
    for(int i = 1; i <= n; i++) for(int j = 1; j <= m; j++)
    {
        if(G[i][j] == 'S')
        {
            si = i;
            sj = j;
            G[i][j] = '.';
        }
        if(G[i][j] == 'G')
        {
            gi = i;
            gj = j;
            G[i][j] = '.';
        }
    }

    memset(bad, 0, sizeof(bad));
    for(int i = 1; i <= n; i++) for(int j = 1; j <= m; j++) if(dir.find(G[i][j]) != dir.end())
    {
        for(int t = 0; t < 4; t++)
        {
            int k = (dir[G[i][j]] + t) % 4;
            int ii = i + di[k], jj = j + dj[k];
            while(G[ii][jj] == '.')
            {
                bad[t][ii][jj] = true;
                ii += di[k];
                jj += dj[k];
            }
        }
    }

    queue< pair< pair<int, int>, int> > Q;
    memset(used, 0, sizeof(used));
    used[0][si][sj] = true;
    Q.push(make_pair(make_pair(si, sj), 0));
    while(!Q.empty())
    {
        int ii = Q.front().first.first, jj = Q.front().first.second, d = Q.front().second;
        Q.pop();
        if(ii == gi and jj == gj) return d;
        for(int k = 0; k < 4; k++)
        {
            int iii = ii + di[k], jjj = jj + dj[k], t = (d + 1) % 4;
            if(G[iii][jjj] == '.' and !bad[t][iii][jjj] and !used[t][iii][jjj])
            {
                used[t][iii][jjj] = true;
                Q.push(make_pair(make_pair(iii, jjj), d + 1));
            }
        }
    }

    return -1;
}

int main()
{
    dir['^'] = 0;
    dir['>'] = 1;
    dir['v'] = 2;
    dir['<'] = 3;
    freopen("C2.in", "r", stdin);
    freopen("C2.out", "w", stdout);
    int test_cnt;
    cin >> test_cnt;
    for(int t = 0; t < test_cnt; t++)
    {
        cin >> n >> m;
        for(int i = 0; i < MAX; i++) for(int j = 0; j < MAX; j++) G[i][j] = '#';
        for(int i = 1; i <= n; i++) for(int j = 1; j <= m; j++) cin >> G[i][j];
        printf("Case #%d: ", t + 1);
        int res = solve();
        if(res == -1) cout << "impossible" << endl;
        else cout << res << endl;
    }
}

#include<vector>
#include<cmath>
#include<map>
#include<cstdlib>
#include<iostream>
#include<sstream>
#include<fstream>
#include<string>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<set>
#include<stack>
#include<bitset>
#include<functional>
#include<ctime>
#include<queue>
#include<deque>
#include<complex>
using namespace std;
#define pb push_back
#define pf push_front
typedef long long lint;
typedef complex<double> P;
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pint;
typedef pair<pint,int> tint;
#define All(s) s.begin(),s.end()
#define rAll(s) s.rbegin(),s.rend()
#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
string ma[114];
bool sumi[114][114][4],burn[114][114][4];
int dx[4]={1,0,-1,0},dy[4]={0,-1,0,1};
string la="v<^>";
vector<pint> now,ne,cl;
int h,w;
bool in(int x,int y){
	return (x>=0 && y>=0 && x<h && y<w);
}
void aedge(int x,int y,int z){
	if(!in(x,y) || sumi[x][y][z] || burn[x][y][z]) return;
	ne.pb(mp(x,y));sumi[x][y][z]=true;
}
int cal(void){
	cin>>h>>w;
	rep(i,h) cin>>ma[i];
	now=ne=cl;
	memset(sumi,false,sizeof(sumi));memset(burn,false,sizeof(burn));
	rep(i,h) rep(j,w){
		if(ma[i][j]=='#'){
			rep(k,4) burn[i][j][k]=true;
		}
		rep(k,4){
			if(la[k]==ma[i][j]){
				rep(l,4){
					burn[i][j][l]=true;
					int x=i,y=j,d=(k+l)%4;
					while(1){
						burn[x][y][l]=true;//cout<<x<<' '<<y<<' '<<l<<endl;
						x+=dx[d];y+=dy[d];//cout<<x<<' '<<y<<' '<<l<<endl;
						if(!in(x,y) || (ma[x][y]!='S' && ma[x][y]!='G' && ma[x][y]!='.')) break;
					}
				}
			}
		}
		if(ma[i][j]=='S') aedge(i,j,0);
	}
	//if(burn[1][0][2]) cout<<'a'<<endl;
	for(int i=0;ne.size()>0;i++){
		now=ne;ne=cl;
		rep(j,now.size()){
			int x=now[j].fi,y=now[j].se;
			//cout<<i<<' '<<x<<' '<<y<<endl;
			if(ma[x][y]=='G') return i;
			rep(k,4) aedge(x+dx[k],y+dy[k],(i+1)%4);
		}
	}
	return -1;
}
int main()
{
	int t;
	cin>>t;
	rep(i,t){
		int ret=cal();
		if(ret<0) cout<<"Case #"<<i+1<<": impossible"<<endl;
		else cout<<"Case #"<<i+1<<": "<<ret<<endl;
	}
}

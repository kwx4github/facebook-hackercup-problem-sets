#include <cstdio>
#include <queue>
#include <map>
using namespace std;

#define MAXN 105

int arrowToDir(char a) {
	if(a == '>') {
		return 0;
	} else if(a == 'v') {
		return 1;
	} else if(a == '<') {
		return 2;
	} else {
		return 3;
	}
}

int main() {
	int T;
	scanf("%d", &T);
	for(int Case = 1; Case <= T; Case++) {
		printf("Case #%d: ", Case);
		char board[MAXN][MAXN];
		int m, n, si, sj, gi, gj, suc = 0;
		int di[4] = {0, 1, 0, -1}, dj[4] = {1, 0, -1, 0};
		scanf("%d%d", &m, &n);
		for(int i = 0; i < m; i++) {
			scanf("%s", board[i]);
			for(int j = 0; j < n; j++) {
				if(board[i][j] == 'S') {
					si = i, sj = j, board[i][j] = '.';
				} else if(board[i][j] == 'G') {
					gi = i, gj = j, board[i][j] = '.';
				}
			}
		}
		queue<pair<pair<int, int>, int> > que;
		map<pair<pair<int, int>, int>, int> dis;
		pair<pair<int, int>, int> p;
		p = make_pair(make_pair(si, sj), 0);
		que.push(p);
		dis[p] = 0;
		while(!que.empty()) {
			p = que.front();
			que.pop();
			int i, j, d, l, suv = 1;
			i = p.first.first;
			j = p.first.second;
			d = p.second;
			l = dis[p];
			//
			//printf("\n(%d,%d) dep:%d, dir:%d", i, j, l, d);
			//
			for(int k = 0; l and k < 4; k++) {
				int ti = i, tj = j;
				while(ti >= 0 and ti < m and tj >= 0 and tj < n and board[ti][tj] == '.') {
					ti += di[k];
					tj += dj[k];
				}

				if(ti < 0 or ti >= m or tj < 0 or tj >= n or board[ti][tj] == '#') {
					//
					//printf("\ndir %d checked.", k);
					//
					continue;
				} else {
					if((arrowToDir(board[ti][tj]) + d + 2) % 4 == k) {
						suv = 0;
						break;
					}
					//
					//printf("\ndir %d checked.", k);
					//
				}
			}
			if(!suv) continue;
			if(i == gi and j == gj) {
				printf("%d\n", l);
				suc = 1;
				break;
			}
			for(int k = 0; k < 4; k++) {
				int ti = i + di[k], tj = j + dj[k];
				//
				//printf("\n    (%d,%d) dep:%d, dir:%d", ti, tj, l + 1, (d + 1) % 4);
				//
				if(ti >= 0 and ti < m and tj >= 0 and tj < n and board[ti][tj] == '.') {
					p = make_pair(make_pair(ti, tj), (d + 1) % 4);
					if(dis.find(p) == dis.end()) {
						que.push(p);
						dis[p] = l + 1;
					}
					//
					//printf(" added");
					//
				}
			}
		}
		if(!suc) printf("impossible\n");
	}
	return 0;
}
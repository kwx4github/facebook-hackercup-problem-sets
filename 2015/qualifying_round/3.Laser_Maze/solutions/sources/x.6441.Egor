#pragma comment (linker, "/STACK:100000000000")
  
#include <iostream>
#include <cstdio>
#include <cmath>
#include <queue>
#include <fstream>
#include <vector>
#include <set>
#include <cassert>
#include <stack>
#include <map>
#include <string>
#include <deque>
#include <algorithm>
  
#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair <int, int>
#define pll pair <ll, ll>
#define fs first
#define sc second
#define INF (1e9 + 7)
#define INFll (1e17 + 7)
#define sort stable_sort
  
using namespace std;
 


int n, m, t;
vector <string> a;
vector <vector <vector <int> > > ok, d;

int main(){
    ifstream cin ("test.in");
    ofstream cout ("test.out");
	cin >> t;
	for (int r = 0; r < t; r++){
		a.clear();
		cin >> n >> m;
		ok.assign(n, vector < vector <int> > (m, vector <int> (4, 1)));
		d.assign(n, vector < vector <int> > (m, vector <int> (4, INF)));
		cout << "Case #" << r + 1 << ": ";
		a.resize(n);
		for (int i = 0; i < n; i++){
			cin >> a[i];
		}
		int x, y, xx, yy;
		for (int i = 0; i < n; i++){
			for (int j = 0; j < m; j++){
				if (a[i][j] == '#'){
					for (int q = 0; q < 4; q++) ok[i][j][q] = 0;
				} else if (a[i][j] == 'S'){
					x = i; y = j;
				} else if (a[i][j] == 'G'){
					xx = i; yy = j;
				} else {
					if (a[i][j] == '^'){
						for (int q = 0; q < 4; q++) ok[i][j][q] = 0;
						for (int q = i - 1; q >= 0; q--){
							if (a[q][j] == '#') break;
							ok[q][j][1] = 0;
						}
						for (int q = i + 1; q < n; q++){
							if (a[q][j] == '#') break;
							ok[q][j][3] = 0;
						}
						for (int q = j + 1; q < m; q++){
							if (a[i][q] == '#') break;
							ok[i][q][2] = 0;
						}
						for (int q = j - 1; q >= 0; q--){
							if (a[i][q] == '#') break;
							ok[i][q][0] = 0;
						}
					} else if (a[i][j] == '<'){
						for (int q = 0; q < 4; q++) ok[i][j][q] = 0;
						for (int q = 0; q < i; q++){
							ok[q][j][2] = 0;
						}
						for (int q = i + 1; q < n; q++){
							ok[q][j][0] = 0;
						}
						for (int q = j + 1; q < m; q++){
							ok[i][q][3] = 0;
						}
						for (int q = 0; q < j; q++){
							ok[i][q][1] = 0;
						}
					} else if (a[i][j] == '>'){
						for (int q = 0; q < 4; q++) ok[i][j][q] = 0;
						for (int q = 0; q < i; q++){
							ok[q][j][0] = 0;
						}
						for (int q = i + 1; q < n; q++){
							ok[q][j][2] = 0;
						}
						for (int q = j + 1; q < m; q++){
							ok[i][q][1] = 0;
						}
						for (int q = 0; q < j; q++){
							ok[i][q][3] = 0;
						}
					} else if (a[i][j] == 'v'){
						for (int q = 0; q < 4; q++) ok[i][j][q] = 0;
						for (int q = 0; q < i; q++){
							ok[q][j][0] = 0;
						}
						for (int q = i + 1; q < n; q++){
							ok[q][j][2] = 0;
						}
						for (int q = j + 1; q < m; q++){
							ok[i][q][1] = 0;
						}
						for (int q = 0; q < j; q++){
							ok[i][q][3] = 0;
						}
					}
				}
			}
		}
		queue <pii> q;
		q.push(pii(x, y));
		d[x][y][1] = 0;
		while (!q.empty()){
			int v = q.front().first, u = q.front().second;
			q.pop();
			for (int i = 0; i < 4; i++){
				if (v - 1 >= 0){
					if (ok[v - 1][u][i]){
						if (d[v - 1][u][(i)] > d[v][u][(i + 3) % 4] + 1){
							q.push(pii(v - 1, u));
							d[v - 1][u][(i)] = d[v][u][(i + 3) % 4] + 1;
						}
					}	
				}
				if (v + 1 < n){
					if (ok[v + 1][u][i]){
						if (d[v + 1][u][(i)] > d[v][u][(i + 3) % 4] + 1){
							q.push(pii(v + 1, u));
							d[v + 1][u][(i)] = d[v][u][(i + 3) % 4] + 1;
						}
					}	
				}
				if (u - 1 >= 0){
					if (ok[v][u - 1][i]){
						if (d[v][u - 1][(i)] > d[v][u][(i + 3) % 4] + 1){
							q.push(pii(v, u - 1));
							d[v][u - 1][(i)] = d[v][u][(i + 3) % 4] + 1;
						}
					}	
				}
				if (u + 1 < m){
					if (ok[v][u + 1][i]){
						if (d[v][u + 1][(i)] > d[v][u][(i + 3) % 4] + 1){
							q.push(pii(v, u + 1));
							d[v][u + 1][(i)] = d[v][u][(i + 3) % 4] + 1;
						}
					}	
				}
			}
		}
		int ans = INF;
		for (int i= 0; i < 4; i++) ans = min(ans, d[xx][yy][i]);
		if (ans == INF) cout << "impossible";
		else cout << ans;
		cout << '\n';
	}

    return 0;
}
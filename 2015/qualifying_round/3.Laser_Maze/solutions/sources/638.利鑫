#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
using namespace std;

const int N = 129;
char maze[N][N];
int laser[N][N], dp[4][N][N];
bool safe[4][N][N];
// ^>v<
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
int GetDirection(char ch) {
  if (ch == '^') {
    return 0;
  } else if (ch == '>') {
    return 1;
  } else if ( ch == 'v') {
    return 2;
  } else if (ch == '<') {
    return 3;
  } else {
    return -1;
  }
}

bool IsValid(int x, int y, int n, int m) {
  return 0 <= x && x < n && 0 <= y && y < m &&
         (maze[x][y] == '.' || maze[x][y] == 'S' || maze[x][y] == 'G');
}

// Get laser and calculate each state is safe or not.
void InitializeMaze(int n, int m) {
  memset(safe, true, sizeof(safe));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m ;j++) {
      int laser_id = laser[i][j];
      if (laser_id == -1) {
        continue;
      }
      for (int k = 0; k < 4; k++) {
        int laser_dir = (laser_id + k) % 4;
        int x = i, y = j;
        do {
          safe[k][x][y] = false;
          x += dx[laser_dir];
          y += dy[laser_dir];
        } while (IsValid(x, y, n, m));
      }
    }
  }
}

int Bfs(int startx, int starty, int endx, int endy, int n, int m) {
  InitializeMaze(n, m);
  memset(dp, -1, sizeof(dp));
  dp[0][startx][starty] = 0;
  queue<pair<int, pair<int, int>>> q;
  q.push(make_pair(0, make_pair(startx, starty)));
  while (!q.empty()) {
    pair<int, pair<int, int>> point = q.front();
    q.pop();
    int dir = point.first;
    int x = point.second.first;
    int y = point.second.second;
    int val = dp[dir][x][y];
    for (int k = 0; k < 4; k++) {
      int ndir = (dir + 1) % 4;
      int nx = x + dx[k];
      int ny = y + dy[k];
      if (IsValid(nx, ny, n, m) && safe[ndir][nx][ny] &&
          dp[ndir][nx][ny] == -1) {
        // printf("%d %d %d\n", ndir, nx, ny);
        dp[ndir][nx][ny] = val + 1;
        q.push(make_pair(ndir, make_pair(nx, ny)));
      }
    }
  }
  // Get result.
  int res = -1;
  for (int i = 0; i < 4; i++) {
    int val = dp[i][endx][endy];
    if (val != -1) {
      if (res == -1) {
        res = val;
      } else {
        res = min(res, val);
      }
    }
  }
  return res;
}

int main() {
  int t, n, m;
  cin >> t;
  for (int cas = 1; cas <= t; cas++) {
    cin >> n >> m;
    for (int i = 0; i < n; i++) cin >> maze[i];
    int startx, starty, endx, endy;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        if (maze[i][j] == 'S') {
          startx = i;
          starty = j;
        } else if(maze[i][j] == 'G') {
          endx = i;
          endy = j;
        }
        laser[i][j] = GetDirection(maze[i][j]);
      }
    }
    int res = Bfs(startx, starty, endx, endy, n, m);
    if (res == -1) {
      cout << "Case #" << cas << ": " << "impossible" << endl;
    } else {
      cout << "Case #" << cas << ": " << res << endl;
    }
  }
  return 0;
}

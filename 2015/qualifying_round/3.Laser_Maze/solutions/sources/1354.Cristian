#include <cstring>
#include <iostream>
#include <deque>
#include <queue>

using namespace std;

/*
   . (empty space)
   # (wall)
   S (starting position)
   G (goal)
   < > ^ v (laser turrets)
   - laser
   x used vertex
*/

// TODO no olvides que por error puedes sobreescribir el punto de partida,
// no importa sobreescribir el punto de llegada, ya que te pueden matar al
// tocarlo

char maze[4][101][101];
int m, n;

void dispIzquierda(int l, int i, int j) {
   j--;
   while (j >= 0) {
      char &c = maze[l][i][j];
      if (c == '.' || c == 'G' || c == '-') {
         c = '-';
      } else if (c == 'S') {
         c = 's';
      } else {
         break;
      }
      j--;
   }
}

void dispArriba(int l, int i, int j) {
   i--;
   while (i >= 0) {
      char &c = maze[l][i][j];
      if (c == '.' || c == 'G' || c == '-') {
         c = '-';
      } else if (c == 'S') {
         c = 's';
      } else {
         break;
      }
      i--;
   }
}

void dispDerecha(int l, int i, int j) {
   j++;
   while (j < n) {
      char &c = maze[l][i][j];
      if (c == '.' || c == 'G' || c == '-') {
         c = '-';
      } else if (c == 'S') {
         c = 's';
      } else {
         break;
      }
      j++;
   }
}

void dispAbajo(int l, int i, int j) {
   i++;
   while (i < m) {
      char &c = maze[l][i][j];
      if (c == '.' || c == 'G' || c == '-') {
         c = '-';
      } else if (c == 'S') {
         c = 's';
      } else {
         break;
      }
      i++;
   }
}

struct Coordenada {int m, n, cuenta;};

int bfs(int init_m, int init_n) {
   Coordenada temp = {init_m, init_n, 0};
   //int l = 0;
   queue<Coordenada> cola;
   maze[0][init_m][init_n] = 'x';
   cola.push(temp);
   while (!cola.empty()) {
      temp = cola.front();
      cola.pop();
      //l = (l+1) % 4;
      int m = temp.m;
      int n = temp.n;
      int cuenta = temp.cuenta+1;
      Coordenada vecinos[] = {{m, n-1, cuenta}, {m, n+1, cuenta}, {m+1, n, cuenta}, {m-1, n, cuenta}};
      for (int i = 0; i < 4; i++) {
         Coordenada &v = vecinos[i];
         if (v.m >= 0 && v.m < ::m && v.n >= 0 && v.n < ::n) {
            char &c = maze[cuenta % 4][v.m][v.n];
            //cout << cuenta % 4 << endl;
            if (c == '.' || c == 'S') {
               c = 'x';
               cola.push(v);
            } else if (c == 'G') {
               return cuenta;
            }
         }
      }
   }
   return -1;
}

int main() {
   int t;
   cin >> t;
   cin.get();
   for (int i = 1; i <= t; i++) {
      cin >> m >> n;
      cin.get();
      for (int j = 0; j < m; j++) {
         cin.getline(maze[0][j], 101);
         strcpy(maze[1][j], maze[0][j]);
         strcpy(maze[2][j], maze[0][j]);
         strcpy(maze[3][j], maze[0][j]);
      }
      int init_m, init_n;
      for (int j = 0; j < m; j++) for (int k = 0; k < n; k++) {
         int pos_turret;
         char c = maze[0][j][k];
         switch (c) {
            case '<':
               pos_turret = 0;
               break;
            case '^':
               pos_turret = 1;
               break;
            case '>':
               pos_turret = 2;
               break;
            case 'v':
               pos_turret = 3;
               break;
            case 'S':
            case 's':
               init_m = j;
               init_n = k;
            default:
               pos_turret = -1;
            break;
         }
         if (pos_turret != -1) {
            int l = pos_turret;
            int plano = 0;
            do {
               switch (l) {
                  case 0: // Izquierda
                     dispIzquierda(plano, j, k);
                     break;
                  case 1: // Arriba
                     dispArriba(plano, j, k);
                     break;
                  case 2: // Derecha
                     dispDerecha(plano, j, k);
                     break;
                  case 3: // Abajo
                     dispAbajo(plano, j, k);
                     break;
               }
              // cout << l << endl;
               l++;
               l %= 4;
               plano++;
            } while (l != pos_turret);
         }
      }
      /*for (int j = 0; j < 4; j++) for (int k = 0; k < m; k++) {
         cout << maze[j][k] << endl;
      }*/
      int res = bfs(init_m, init_n);
      if (res != -1) {
         cout << "Case #" << i << ": " << res << endl;
      } else {
         cout << "Case #" << i << ": impossible" << endl; 
      }
   }
   return 0;
}

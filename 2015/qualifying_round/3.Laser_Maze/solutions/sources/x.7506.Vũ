import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;


public class LaserMaze {
	static int []dx = {0,-1,0,1};
	static int []dy = {-1,0,1,0};
	static PrintWriter writer;
	static int finalstep = 100;
	static class Point{
		int x;
		int y;
		Point(int x, int y){
			this.x = x;
			this.y = y;
		}
	}

	//< > ^ v 
	public static void laserShooting(char [][][] matrixStates, char[][] a, int m, int n,Point start){
		for (int i = 0; i < m; i++){
			for (int j = 0; j<n; j++){
				if (a[i][j] == 'S'){
					start.x = i;
					start.y = j;
				}
				for (int k = 0; k < 4; k++){
					matrixStates[i][j][k] = a[i][j];
				}
			}
		}

		for (int i = 0; i < m; i++){
			for (int j = 0; j<n; j++){
				for (int k = 1; k < 4; k++){
					if (matrixStates[i][j][k-1] == '<'){
						matrixStates[i][j][k] = '^';
					} else if (matrixStates[i][j][k-1] == '^'){
						matrixStates[i][j][k] = '>';
					} else if (matrixStates[i][j][k-1] == '>'){
						matrixStates[i][j][k] = 'v';
					} else if (matrixStates[i][j][k-1] == 'v'){
						matrixStates[i][j][k] = '<';
					}
				}
			}
		}

		for (int i = 0; i < m; i++){
			for (int j = 0; j<n; j++){
				for (int k = 0; k < 4; k++){
					if (matrixStates[i][j][k] == '<'){
						int j1 = j -1 ;
						while (j1 >=0 && ( matrixStates[i][j1][k] == '.' || matrixStates[i][j1][k] == 'G' || matrixStates[i][j1][k] == 'S')){
							matrixStates[i][j1][k] = 'X';
							j1--;
						}
					} else if (matrixStates[i][j][k] == '^'){
						int i1 = i -1 ;
						while (i1 >= 0 && ( matrixStates[i1][j][k] == '.' || matrixStates[i1][j][k] == 'G' || matrixStates[i1][j][k] == 'S')){
							matrixStates[i1][j][k] = 'X';
							i1--;
						}
					} else if (matrixStates[i][j][k] == '>'){
						int j1 = j + 1 ;
						while (j1 < n && (matrixStates[i][j1][k] == '.' || matrixStates[i][j1][k] == 'G' || matrixStates[i][j1][k] == 'S')){
							matrixStates[i][j1][k] = 'X';
							j1++;
						}
					} else if (matrixStates[i][j][k] == 'v'){
						int i1 = i + 1 ;
						while (i1 < m && (matrixStates[i1][j][k] == '.' || matrixStates[i1][j][k] == 'G' || matrixStates[i1][j][k] == 'G')){
							matrixStates[i1][j][k] = 'X';
							i1++;
						}
					}
				}
			}
		}
	}



	public static void findMinPath(int testcase , char[][] a, int m , int n){
		//System.out.println(testcase);
		char [][][] matrixStates = new char [m+1][n+1][4] ; 
		Point start = new Point(0,0);
		int[][] f = new int[m+1][n+1];
		laserShooting(matrixStates,a,m,n,start);
		boolean[][] prevstate = new boolean[m+1][n+1];
		for (int i = 0; i< m; i++){
			for (int j = 0; j <n ; j++){
				prevstate[i][j] = false;
			}
		}
		boolean[][] currentstate = new boolean[m+1][n+1];
		prevstate[start.x][start.y] = true;
		int step = 0;
		boolean ok = false;
		StringBuffer gg = new StringBuffer();
		while (true){
			for (int i = 0; i< m; i++){
				for (int j = 0; j <n ; j++){
					currentstate[i][j] = false;
				}
			}
			for (int i = 0; i< m; i++){
				for (int j = 0; j <n ; j++){
					for (int k = 0 ; k < 4; k++)
						if (prevstate[i][j] == true){
							if (i + dx[k] >= 0 && i + dx[k] < m && j + dy[k] >= 0 && j + dy[k] < n){
								if (matrixStates[i + dx[k]][j + dy[k]][(step+1) % 4] =='G'){
									gg.append("Case #");
									gg.append(Integer.toString(testcase+1));
									gg.append(": ");
									gg.append(Integer.toString(step+1));
									gg.append("\n");
									writer.write(gg.toString());
									//System.out.println(gg);
									return;
								}
								else if (matrixStates[i + dx[k]][j + dy[k]][(step+1) % 4] =='.' || matrixStates[i + dx[k]][j + dy[k]][(step+1) % 4] =='S'){
									ok = true;
									currentstate[i + dx[k]][j + dy[k]] = true;
								}
							}
						}
				}
			}

			if (ok == false){
				gg.append("Case #");
				gg.append(Integer.toString(testcase+1));
				gg.append(": ");
				gg.append("IMPOSSIBLE\n");
				//writer.write(gg.toString());
				//System.out.println(gg);
				writer.write(gg.toString());
				return;
			} else {
				ok = false;
			}

			for (int i = 0; i< m; i++){
				for (int j = 0; j <n ; j++){
					prevstate[i][j] = currentstate[i][j];
				}
			}			
			step++;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("laser_maze.txt"));
		writer = new PrintWriter("outputlaser.txt", "UTF-8");
		try {
			StringBuilder sb = new StringBuilder();
			String x = br.readLine();
			int t = Integer.parseInt(x);
			for (int i = 0; i < t ; i++){
				System.out.println(i);
				String mn = br.readLine();
				String[] mnp = mn.split(" ");
				int m = Integer.parseInt(mnp[0]);
				int n = Integer.parseInt(mnp[1]);
				//System.out.println(m);
				//System.out.println(n);

				char[][] a = new char[m+1][n+1];
				for (int j = 0; j < m ; j++){
					String s = br.readLine();
					for (int k = 0; k < n; k++){
						a[j][k] = s.charAt(k);
					}
				}
				findMinPath(i,a,m,n);
			}
			writer.close();
		} finally {
			br.close();
		}
	}
}

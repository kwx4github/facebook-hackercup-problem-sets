#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;

struct state
{
	int x,y,b;
	state(int x_, int y_, int b_)
	{
		x=x_;
		y=y_;
		b=b_;
	}
};

const int max_n=110;

int n,m,T;
char G[max_n][max_n];
bool visited[max_n][max_n][4];
int d[max_n][max_n][4];

int sx,sy,gx,gy;
char D[4]={'<','^','>','v'};
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};

int dir(char c)
{
	for(int j=0; j<4; j++)
		if(c==D[j])
			return j;
	return -1;
}

bool validlim(int x, int y)
{
	return x>=0 and x<n and y>=0 and y<m;
}

bool valid(int x, int y, int b)
{
	if(!validlim(x,y) or ( G[x][y]!='S' and G[x][y]!='G' and G[x][y]!='.') )
		return 0;

	for(int z=0; z<4; z++)
		for(int nx=x+dx[z],ny=y+dy[z]; validlim(nx,ny); nx+=dx[z],ny+=dy[z])
		{
			if(G[nx][ny]=='#')
				break;
			else if(dir(G[nx][ny])!=-1)
			{
				int nd=(dir(G[nx][ny])+b)%4;
				//cout<<z<<" "<<x<<" "<<y<<" "<<b<<" "<<nd<<endl;
				if(nd==z)
					return 0;
				break;
			}
		}

	return 1;
}

int main()
{
	scanf("%d",&T);
	for(int z=0; z<T; z++)
	{
		scanf("%d%d",&n,&m);
		for(int i=0; i<n; i++)
		{
			scanf("%s",G[i]);
			for(int j=0; j<m; j++)
				if(G[i][j]=='S')
					sx=i,sy=j;
				else if(G[i][j]=='G')
					gx=i,gy=j;
		}

		queue<state> Q;
		memset(visited,0,sizeof(visited));
		visited[sx][sy][0]=1;
		d[sx][sy][0]=0;
		Q.push(state(sx,sy,0));

		int res=0;

		while(Q.size())
		{
			state S=Q.front();
			Q.pop();
			if(G[S.x][S.y]=='G')
			{
				res=d[S.x][S.y][S.b];
				break;
			}

			for(int k=0; k<4; k++)
			{
				int nx=S.x+dx[k],ny=S.y+dy[k],nb=(S.b+1)%4;
				if(valid(nx,ny,nb) and !visited[nx][ny][nb])
				{
					Q.push(state(nx,ny,nb));
					visited[nx][ny][nb]=1;
					d[nx][ny][nb]=d[S.x][S.y][S.b]+1;
				}
			}
		}

		printf("Case #%d: ",z+1);

		if(res==0)
			printf("impossible\n");
		else
			printf("%d\n",res);
	}

	return 0;
}
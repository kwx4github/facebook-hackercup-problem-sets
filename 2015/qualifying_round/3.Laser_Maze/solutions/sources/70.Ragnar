#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <bitset>
#include <stack>
#include <string>
#include <sstream>
#include <math.h>

#define REP(i,n) for(int i = 0; i<(n); i++)
#define ITER(i,v) for(auto i : v)
#define INF 1000000000

using namespace std;

template <class T>
using priority_queue_asc =  priority_queue<T,vector<T>, greater<T> >;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef vector<bool> vb;

int M,N;
char board[110][110];

bool possible[4][110][110];
bool visited[4][110][110];

ii S,G;

bool empty(int r,int c){
	return board[r][c] == '.' || board[r][c] == 'S' || board[r][c] == 'G';
}

void removelaser(int layer, int direction, int r, int c){
	possible[layer][r][c]=false;
	switch(direction){
		case 0:{
					 for(int i=c-1;i>=0 && empty(r,i);i--)
						 possible[layer][r][i] = false;
					 break;
				 }
		case 2:{
					 for(int i=c+1;i<N && empty(r,i);i++)
						 possible[layer][r][i] = false;
					 break;
				 }
		case 1:{
					 for(int i=r-1;i>=0 && empty(i,c);i--)
						 possible[layer][i][c] = false;
					 break;
				 }
		case 3:{
					 for(int i=r+1; i<M && empty(i,c); i++)
						 possible[layer][i][c] = false;
					 break;
				 }
	}
}

void fillboard(){
	fill_n(possible[0][0],4*110*110,true);
	fill_n(visited[0][0],4*110*110,false);
	REP(r,M) REP(c,N){
		int dir=-2;
		switch(board[r][c]){
			case '<': {dir=0;break;}
			case '^': {dir=1;break;}
			case '>': {dir=2;break;}
			case 'v': {dir=3;break;}
			case '#': {
						  dir = -1;
						  REP(i,4)
							  possible[i][r][c] = false;
						  break;
					  }
		}
		if(dir<0) continue;	
		REP(layer,4)
			removelaser(layer,(dir+layer)%4,r,c);
	}
}

int dr[]={0,-1,0,1};
int dc[]={-1,0,1,0};

int main(){
	int TC;
	cin >> TC;
	REP(tc,TC){
		cin >> M >> N;
		S=G={-1,-1};
		//cout << "N,M:"<<N<<M<<endl;
		REP(r,M){
			cin >> board[r];
			REP(c,N){
				if(board[r][c] == 'S') S = {r,c};
				else if(board[r][c] == 'G') G ={r,c};
			}
		}
/*
 * cout <<"start: "<<S.first<<", "<<S.second<<endl;
		cout <<"end: "<<G.first<<", "<<G.second<<endl;
		cout<<"board: \n\n";
		REP(r,M){
			REP(c,N)
				cout << board[r][c];
			cout<<endl;
		}	*/
		fillboard();
/*		cout <<" board filled!"<<endl;
		REP(layer,4){
			REP(r,M){
				REP(c,N)
					cout << possible[layer][r][c];
				cout <<"\n";
			}
			cout <<"\n\n";
		}

		cout<<endl;
*/		// {time,{r,c}}
		queue<pair<int,ii> > q;
		bool done = false;
		int time = -1;
		if(true || possible[0][S.first][S.second]){
			q.push({0,{S.first,S.second}});
			visited[0][S.first][S.second]=true;
		}
		while(!q.empty()){
			if(q.front().second == G){
//				cout << "found solution: "<<q.front().first<<endl;
				done = true;
				time = q.front().first;
				break;
			}
			int t = q.front().first+1;
			int r = q.front().second.first;
			int c = q.front().second.second;
			q.pop();
			REP(d,4){
				int nc = c+dc[d];
				int nr = r+dr[d];
				if(nr<0||nc<0||nr>=M||nc>=N)
					continue;
				if(possible[t%4][nr][nc] && !visited[t%4][nr][nc]){
					q.push({t,{nr,nc}});
//					cout << "push: "<<t<<", "<<nr<<", "<<nc<<endl;
					visited[t%4][nr][nc] = true;
				}
			}
		}

		cout << "Case "<<tc+1<<": ";
		if(done)
			cout << time<<"\n";
		else
			cout <<"impossible\n";
	}
	return 0;
}



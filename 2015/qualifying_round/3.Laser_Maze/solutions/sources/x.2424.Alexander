
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>
#include <cassert>
#include <unordered_set>
#include <unordered_map>
#include <fstream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)


queue<pair<pii, int> > q;
int best[128][128][4];
string maze[128];
int dc[4] = {1, 0, -1,  0};
int dr[4] = {0, 1,  0, -1};
string turn = ">v<^";

int calc(){
	int R, C;
	cin >> R >> C;
	FOR(r,0,R)cin >> maze[r];
	pii ps, pe;
	FOR(r,0,R)FOR(c,0,C){
		if(maze[r][c] == 'S'){
			ps = mp(r,c);
			maze[r][c] = '.';
		} else if(maze[r][c] == 'G') {
			pe = mp(r,c);
			maze[r][c] = '.';
		}
	}
	memset(best,oo,sizeof(best));
	FOR(r,0,R)FOR(c,0,C){
		int d = -1;
		FOR(i,0,4)if(maze[r][c] == turn[i])d = i;
		if(d != -1){
			FOR(t,0,4){
				int cr = r, cc = c;
				while(true){
					cr += dr[(t+d)%4];
					cc += dc[(t+d)%4];
					if(cr < 0 || cc < 0 || cr >= R || cc >= C)break;
					if(maze[cr][cc] != '.')break;
					best[cr][cc][t] = -1;
				}
			}
		}
	}
	best[ps.first][ps.second][0] = 0;
	q.push(mp(ps, 0));
	while(!q.empty()){
		pair<pii, int> next = q.front();
		q.pop();
		pii pos = next.first;
		int dist = next.second;
		if(pos == pe)return dist;
		int ndist = dist + 1;
		int mdist = ndist  % 4;
		FOR(d,0,4){
			int r = pos.first + dr[d];
			int c = pos.second + dc[d];
			if(r < 0 || c < 0 || r >= R || c >= C)continue;
			if(maze[r][c] != '.')continue;
			if(best[r][c][mdist] != oo)continue;
			best[r][c][mdist] = ndist;
			q.push(mp(mp(r,c), ndist));
		}
	}
	return oo;
}
int main() {
	int T;
	cin >> T;
	FOR(t,1,T+1){
		int res = calc();
		cout << "Case #" << t << ": ";
		if(res == oo)cout << "impossible\n";
		else cout << res << endl;
	}
	return 0;
}

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <cmath>
#include <string>
#include <ctime>
using namespace std;
const int inf = 1000000000;
int get_dir(char c) {
    int dir;
    if (c == '>') dir = 0;
    else if (c == '^') dir = 3;
    else if (c == '<') dir = 2;
    else dir = 1;
    return dir;
}
vector < pair < int, pair < int, int > > > Q;
int a[105][105];
int val[105][105][5];
int n, m;
void add(int x, int y, int pos) {
    Q.push_back(make_pair(x, make_pair(y, pos)));
}
bool bad(int x, int y, int pos) {
    for (int i = x - 1; i >= 0; --i) {
        if (a[i][y] == 4) break;
        if (a[i][y] == 5) continue;
        if ((pos + a[i][y]) % 4 == 1) return true;
        break;
    }
    for (int i = y - 1; i >= 0; --i) {
        if (a[x][i] == 4) break;
        if (a[x][i] == 5) continue;
        if ((pos + a[x][i]) % 4 == 0) return true;
        break;
    }
    for (int i = x + 1; i < n; ++i) {
        if (a[i][y] == 4) break;
        if (a[i][y] == 5) continue;
        if ((pos + a[i][y]) % 4 == 3) return true;
        break;
    }
    for (int i = y + 1; i < m; ++i) {
        if (a[x][i] == 4) break;
        if (a[x][i] == 5) continue;
        if ((pos + a[x][i]) % 4 == 2) return true;
        break;
    }
    return false;
}
void good(int x, int y, int pos, int value) {
    if (x < 0 || y < 0 || x >= n || y >= m) return;
    if (a[x][y] != 5) return;
    if (val[x][y][pos] <= value + 1) return;
    if (bad(x, y, pos)) return;
    add(x, y, pos);
    val[x][y][pos] = value + 1;
}
void solve() {
    cin >> n >> m;
    string s;
    int fx, fy, sx, sy;
    for (int i = 0; i < n; ++i) {
        cin >> s;
        for (int j = 0; j < m; ++j) {
            if (s[j] == 'G') {
                fx = i, fy = j;
                a[i][j] = 5;
            }
            else if (s[j] == 'S') {
                sx = i, sy = j;
                a[i][j] = 5;
            }
            else {
                if (s[j] == '#') a[i][j] = 4;
                else {
                    if (s[j] == '.') a[i][j] = 5;
                    else
                    a[i][j] = get_dir(s[j]);
                }
            }
        }
    }
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            for (int pos = 0; pos < 4; ++pos)
                val[i][j][pos] = inf;
    Q.clear();
    add(sx, sy, 0);
    val[sx][sy][0] = 0;
    int it = 0;
    while (it < Q.size()) {
        pair < int , pair < int, int > > tmp = Q[it++];
        for (int dx = -1; dx <= 1; ++dx)
            for (int dy = -1; dy <= 1; ++dy) {
                int v = fabs(dx) + fabs(dy);
                if (v != 1) continue;
                good(tmp.first + dx, tmp.second.first + dy, (tmp.second.second + 1) % 4, val[tmp.first][tmp.second.first][tmp.second.second]);
            }
    }
    int res = inf;
    for (int i = 0; i < 4; ++i) {
        res = min(res, val[fx][fy][i]);
    }
    if (res == inf) cout << "impossible" << endl; else cout << res << endl;
}
int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int T;
    cin >> T;
    for (int i = 1; i <= T; ++i) {
        printf("Case #%d: ", i);
        solve();
    }
    return 0;
}

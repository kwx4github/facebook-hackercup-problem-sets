/*
ID: m.nasir1
LANG: C++11
TASK: 
*/
#include <bits/stdc++.h>

using namespace std;

#define sz(x) ((int)(x).size())
#define deb(x) cout << #x << " : " << x << endl
#define debs(x ,y) cout << #x << " : " << x << " , " << #y << " : " << y << endl
#define debind(x , y) cout << #x << "[" << (y) << "] : " << (x)[(y)] << endl 
#define pB push_back
#define mP make_pair

#define rep(i , n) for(int (i) = 0 ; (i) < (n) ; ++(i))
#define repinc(i , n) for(int (i) = 1 ; (i) <= (n) ; ++(i))
#define per(i , n) for(int (i) = (n) - 1 ; (i) >= 0 ; --(i))
#define perinc(i , n) for(int (i) = (n) ; (i) >= 1 ; --(i))

typedef long long ll ;
typedef pair < int , int > pii ;
typedef vector < int > vi ;
typedef vector < pair < int , int > > vpii ;

#define X first
#define Y second

template <typename T>
ostream & operator <<(ostream & out , const vector < T >& v){
	int ss = sz(v);
	rep(i , ss)
		out << v[i] << " ";
	return out ;
}
template <typename T , typename TT > 
ostream & operator <<(ostream & out , const pair < T , TT >& p){
	out << p.first << " " << p.second ;
	return out ;
}
template<typename T , typename TT >
istream & operator >> (istream & in , pair < T , TT >& s){
   in >> s.first >> s.second ;
   return in ;
}
const int INF = 100000000 ;

char arr[200][200][4] = {0};
char tor[] = {'v' , '<' , '^' , '>'};
int which[300];
pii add[300];

int vis[200][200][4] = {0};

pii operator + (const pii& a,const pii& b){
	return mP(a.X + b.X , a.Y + b.Y);
}

int main(){
	int t ;
	cin >> t;
	memset(which , - 1, sizeof which);
	which['v'] = 0 ;
	which['<'] = 1 ;
	which['^'] = 2 ;
	which['>'] = 3 ;

	add['v'] = mP(1 , 0) ;
	add['<'] = mP(0 , -1) ;
	add['^'] = mP(-1 , 0) ;
	add['>'] = mP(0 , 1) ;

	pii start ;
	pii finish ;
	repinc(test , t){
		int minn = INF;
		int n, m ;
		cin >> n >> m ;
		memset(arr , 0 , sizeof arr);
		memset(vis , 0 , sizeof vis);
		repinc(i , n){
			repinc(j , m){
				cin >> arr[i][j][0];
				if(which[arr[i][j][0]] != -1){
					int now = which[arr[i][j][0]];
					now ++ ;
					rep(k , 3){
						now%= 4; 
						arr[i][j][k+1] = tor[now];
						now ++ ;
					}
				}
				else{
					rep(l , 4){
						char & ch = arr[i][j][l];
						ch = arr[i][j][0];
						if(ch == 'S'){
							start =mP(i , j);
							ch = '.';
						}
						else if(ch == 'G'){
							finish = mP(i , j);
							ch = '.';
						}
					}
				}
			}
		}

		// rep(k , 4){
		// 	repinc(i , n){
		// 		repinc(j , m){
		// 			cout << arr[i][j][k] ;
		// 		}
		// 		cout << endl ;
		// 	}
		// 	cout << endl << endl ;
		// }


		rep(k , 4){
			repinc(i , n){
				repinc(j , m){
					if(which[arr[i][j][k]] != -1){
						char & ch = arr[i][j][k];
						// deb(ch);
						pii change = add[ch];
						pii now = mP(i , j);
						arr[now.X][now.Y][k] = '#' ;
						// deb(now);
						now = now + change;
						// cout << endl ;
						while(arr[now.X][now.Y][k] == '.' || arr[now.X][now.Y][k] == '@'){
							arr[now.X][now.Y][k] = '@';
							// deb(now);
							now = now + change;
						}
					}
				}
			}
		}

		queue < pair < pii , pii> > q ;
		q.push(mP(start , mP(0 , 0)));
		int dx[] = {1 , -1 , 0 , 0};
		int dy[] = {0 , 0  , -1 ,1};
		while(!q.empty()){
			auto top = q.front() ; q.pop() ;
			// deb(top);
			int x  = top.X.X  , y = top.X.Y , kk = top.Y.X , path = top.Y.Y ;
			if(mP(x , y) == finish){
				minn = path;
				break ;
			}
			rep(i , 4){
				int newx = x + dx[i];
				int newy = y + dy[i];
				int newk = (kk +1)%4;
				if(arr[newx][newy][newk] == '.' && !vis[newx][newy][newk]){
					q.push(mP(mP(newx , newy) , mP(newk , path + 1)));
					vis[newx][newy][newk] = 1 ;
				}
			}
		}

		cout <<"Case #"<<test<<": ";
		if(minn < INF)
			cout << minn << endl ;
		else
			cout << "impossible" << endl ;
	}
	return 0 ;
}

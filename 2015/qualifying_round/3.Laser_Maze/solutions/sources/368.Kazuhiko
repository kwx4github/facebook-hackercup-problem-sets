#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>

using namespace std;

int solve(vector<string> field)
{
	int W = (int)field[0].size();
	int H = (int)field.size();
	int sx, sy, gx, gy;

	for (int y=0; y<H; y++)
	for (int x=0; x<W; x++)
	{
		if (field[y][x]=='S')
			sx = x, sy = y,
			field[y][x] = '.';
		if (field[y][x]=='G')
			gx = x, gy = y,
			field[y][x] = '.';
	}

	vector<string> F[4];
	for (int f=0; f<4; f++)
	{
		F[f] = field;

		for (int i=0; i<f; i++)
			for (int y=0; y<H; y++)
			for (int x=0; x<W; x++)
			{
				if (false);
				else if (F[f][y][x]=='<') F[f][y][x] = '^';
				else if (F[f][y][x]=='^') F[f][y][x] = '>';
				else if (F[f][y][x]=='>') F[f][y][x] = 'v';
				else if (F[f][y][x]=='v') F[f][y][x] = '<';
				else if (F[f][y][x]=='x') F[f][y][x] = '.';	
			}

		for (int y=0; y<H; y++)
		for (int x=0; x<W; x++)
		if (F[f][y][x]=='<' || F[f][y][x]=='^' || F[f][y][x]=='>' || F[f][y][x]=='v')
		{
			int tx = x;
			int ty = y;
			while (true)
			{
				if (F[f][y][x]=='<') tx--;
				if (F[f][y][x]=='^') ty--;
				if (F[f][y][x]=='>') tx++;
				if (F[f][y][x]=='v') ty++;
				if (0<=tx && tx<W && 0<=ty && ty<H &&
					(F[f][ty][tx]=='.' || F[f][ty][tx]=='x'))
					F[f][ty][tx] = 'x';
				else
					break;
			}
		}
	}

	const int INF = 99999999;
	vector<vector<int>> D[4];
	for (int i=0; i<4; i++)
		D[i] = vector<vector<int>>(H, vector<int>(W,INF));
	vector<int> L;
	D[0][sy][sx] = 0;
	L.push_back(sy*W+sx);
	int dx[] = {0,0,1,-1};
	int dy[] = {1,-1,0,0};
	for (int l=0; l<(int)L.size(); l++)
	{
		int f = L[l]/(W*H);
		int y = L[l]%(W*H)/W;
		int x = L[l]%W;

		for (int d=0; d<4; d++)
		{
			int tf = (f+1)%4;
			int ty = y+dy[d];
			int tx = x+dx[d];
			if (0<=tx && tx<W && 0<=ty && ty<H &&
				F[tf][ty][tx]=='.' && D[f][y][x]+1 < D[tf][ty][tx])
			{
				D[tf][ty][tx] = D[f][y][x] + 1;
				L.push_back(tf*W*H+ty*W+tx);
			}
		}
	}

	//for (int f=0; f<4; f++)
	//{
	//	for (int y=0; y<H; y++)
	//		cout<<F[f][y]<<endl;
	//	for (int y=0; y<H; y++)
	//	{
	//		for (int x=0; x<W; x++)
	//			cout<<" "<<D[f][y][x];
	//		cout<<endl;
	//	}
	//}

	int ans = INF;
	for (int f=0; f<4; f++)
		ans = min(ans, D[f][gy][gx]);

	return ans<INF ? ans : -1;
}

int main()
{
	int T;
	cin>>T;
	for (int t=1; t<=T; t++)
	{
		int M, N;
		cin>>M>>N;
		vector<string> F(M);
		for (int y=0; y<M; y++)
			cin>>F[y];
		int ans = solve(F);
		cout<<"Case #"<<t<<": ";
		if (ans>=0)
			cout<<ans<<endl;
		else
			cout<<"impossible"<<endl;
	}
}

#include <bits/stdc++.h>

#define ALL(v) v.begin(), v.end()
#define REP(i, a, b) for(int i = a; i < b; i++)
#define REPD(i, a, b) for(int i = a; i > b; i--)
#define REPLL(i, a, b) for(ll i = a; i < b; i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FORLL(i, a, b) for(ll i = a; i <= b; i++)
#define INF 1000000001

#define vit vector<int>::iterator
#define sit set<int>::iterator
#define vi vector<int>
#define vpii vector<pii >

#define ll long long
#define ld long double

#define pb push_back
#define mp make_pair
#define pii pair<int, int>
#define pld pair<ld, ld>
#define st first
#define nd second

#define EPS 1e-9
#define PI acos(-1.0)
#define MAXN 108

using namespace std;

int z, n, m;
char c;
int dp[4][MAXN][MAXN];
int dir[4][MAXN][MAXN];
int mapa[MAXN][MAXN];
map<char, int> dirs;
int dx[] = {0, 1, 0, -1};
int dy[] = {-1, 0, 1, 0};
int sx, sy, ex, ey;

struct three {
    int k,i,j,v;
    three(int _k, int _i, int _j, int _v) : k(_k), i(_i), j(_j), v(_v) {}
    int value() {
        return dp[k][i][j];
    }
};

void go(int k, int i, int j, int dir) {
    while(i >= 0 && i < n && j >= 0 && j < m) {
        if(i != sy || j != sx) dp[k][i][j] = -1;
        i += dy[dir];
        j += dx[dir];
        if(mapa[i][j]) break;
    }
}

int f(int k, int y, int x, bool hero = false) {
    queue<three> q;
    q.push(three(k, y, x, 0));
    while(q.size()) {
        three c = q.front(); q.pop();
        if(c.i < 0 || c.j < 0 || c.i >= n || c.j >= m || mapa[c.i][c.j] || c.value() <= c.v) continue;
        dp[c.k][c.i][c.j] = c.v;
        REP(l, 0, 4) {
            q.push(three((c.k+3)%4, c.i+dy[l], c.j+dx[l], c.v+1));
        }
    }
    return INF;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin >> z;
	dirs['^'] = 0;
	dirs['>'] = 1;
	dirs['v'] = 2;
	dirs['<'] = 3;
	FOR(tc, 1, z) {
        cin >> n >> m;
        memset(mapa, 0, sizeof mapa);
        REP(k, 0, 4) REP(i, 0, n) REP(j, 0, m) dp[k][i][j] = INF;
        memset(dir, 0, sizeof dir);

        REP(i, 0, n) REP(j, 0, m) {
            cin >> c;
            if(c == 'S') {
                sy = i; sx = j;
            }
            else if(c == 'G') {
                ey = i; ex = j;
            }
            else if(c == '#') mapa[i][j] = 1;
            else if(c != '.') {
                mapa[i][j] = 2;
                dir[0][i][j] = dirs[c];
            }
        }
        REP(k, 0, 4) {
            REP(i, 0, n) REP(j, 0, m) if(mapa[i][j] == 2) {
                go(k, i, j, dir[k][i][j]);
                dir[(k+1)%4][i][j] = dir[k][i][j] + 1;
                dir[(k+1)%4][i][j]%=4;
            }
        }
        cout << "Case #" << tc << ": ";
        REP(k, 0, 4) f(k, ey, ex);
        int ret = dp[0][sy][sx];
        if(ret < INF) cout << ret << endl;
        else cout << "impossible" << endl;
	}

    return 0;
}



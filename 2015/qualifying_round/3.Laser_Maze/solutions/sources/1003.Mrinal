#include<bits/stdc++.h>
using namespace std;
int maze[101][101][4], m, n;
pair<int, int> st, e;
bool add(int x, int y)
{
	if (x >= 0 && y >= 0 && x < m && y < n)
		return true;
	else
		return false;
}
int bfs()
{
	int ans = 0, state = 0, visited[101][101][4];
	memset(visited, 0, sizeof(visited));
	queue<pair<int, int>> q;
	q.push(st);
	while (!q.empty())
	{
		int sz = q.size();
			while (sz--)
			{
				pair<int,int> p = q.front();
				q.pop();
				if (!visited[p.first][p.second][state])
				{
					visited[p.first][p.second][state] = 1;
					if (maze[p.first][p.second][state] == 0 || (ans == 0 && maze[p.first][p.second][state] == 2))
					{
						if (p==e) return ans;
						if (add(p.first + 1, p.second))
							q.push({ p.first + 1, p.second });
						if (add(p.first - 1, p.second))
							q.push({ p.first - 1, p.second });
						if (add(p.first, p.second - 1))
							q.push({ p.first , p.second  -1});
						if (add(p.first, p.second + 1))
							q.push({ p.first, p.second + 1});
					}
				}
			}
		++state;
		++ans;
		state %= 4;
	}
	return -1;
}
void allo(char ch,int x,int y)
{
	int type;
	if (ch == '>')
		type = 0;
	else if (ch == 'v')
		type = 1;
	else if (ch == '<')
		type = 2;
	else
		type = 3;
	//right
	for (int i = y + 1; i < n && maze[x][i][0] != 3; ++i)
		maze[x][i][(4-type)%4] = 2;
	//down
	for (int i = x + 1; i < m && maze[i][y][0] != 3; ++i)
		maze[i][y][(5-type)%4] = 2;
	//left
	for (int i = y - 1; i >=0 && maze[x][i][0] != 3; --i)
		maze[x][i][(6-type)%4] = 2;
	//up
	for (int i = x - 1; i >=0 && maze[i][y][0] != 3; --i)
		maze[i][y][(7-type)%4] = 2;
}
int main()
{
	int t;
	cin >> t;
	for (int x = 1; x <= t; ++x)
	{
		cin >> m >> n;
		memset(maze,0,sizeof(maze));
		/*for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				for (int k = 0; k < 4;++k)
					cout << maze[i][j][k] << " ";

			}
			cout << endl;
		}*/
		string s[101];
		for (int i = 0; i < m; ++i)
		{
			cin >> s[i];
			for (int j = 0; j < n; ++j)
			{
				if (s[i][j] == 'S')
				{
					st = { i, j };
					maze[i][j][0] = maze[i][j][1] = maze[i][j][2] = maze[i][j][3] = 0;
				}
				if (s[i][j] == 'G')
				{
					e = { i, j };
					maze[i][j][0] = maze[i][j][1] = maze[i][j][2] = maze[i][j][3] = 0;
				}
				if (s[i][j] == '#')
				{
					maze[i][j][0] = maze[i][j][1] = maze[i][j][2] = maze[i][j][3] = 3;
				}
				if (s[i][j] == '>' || s[i][j] == '<' || s[i][j] == '^' || s[i][j] == 'v')
				{
					//allo(s[i][j], i, j);
					maze[i][j][0] = maze[i][j][1] = maze[i][j][2] = maze[i][j][3] = 3;
				}
			}
		}
		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				if (s[i][j] == '>' || s[i][j] == '<' || s[i][j] == '^' || s[i][j] == 'v')
					allo(s[i][j], i, j);
			}
		}/*
		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				for (int k = 0; k < 4; ++k)
					cout << maze[i][j][k] << " ";

			}
			cout << endl;
		}*/
		int ans = bfs();
		printf("Case #%d: ", x);
		if (ans == -1)
			cout << "impossible\n";
		else
			cout << ans << endl;

	}
	return 0;
}
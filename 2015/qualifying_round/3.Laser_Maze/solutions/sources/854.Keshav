#include <iostream>
#include <vector>
#include <queue>
#include <set>
using namespace std;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef pair<int, int> pi;
#define mp make_pair

int main(){
	int num = 0;
	int t, m, n;
	cin>>t;
	while(t--){
		num++;
		cin>>m>>n;
		vs M(m);
		for(int i = 0; i < m; i++) cin>>M[i];
		vvs state;
		int sx = 0, sy = 0;
		int gx = 0, gy = 0;

		for(int i = 0; i < m; i++)
			for(int j = 0; j < n; j++){
				if(M[i][j] == 'S'){
					sx = i;
					sy = j;
				}
				if(M[i][j] == 'G'){
					gx = i;
					gy = j;
				}
			}

		M[sx][sy] = M[gx][gy] = '.';		
		vs N = M;

		for(int k = 0; k < 4; k++){
			vs S = N;
			for(int i = 0; i < m; i++){
				for(int j = 0; j < n; j++){
					if(N[i][j] == '<'){
						int jj = j-1;
						while(jj >= 0 && N[i][jj] == '.'){
							S[i][jj] = 'x';
							jj--;
						}
						N[i][j] = '^';
					}
					else if(N[i][j] == '>'){
						int jj = j+1;
						while(jj < n && N[i][jj] == '.'){
							S[i][jj] = 'x';
							jj++;
						}
						N[i][j] = 'v';
					}
					else if(N[i][j] == '^'){
						int ii = i-1;
						while(ii >= 0 && N[ii][j] == '.'){
							S[ii][j] = 'x';
							ii--;
						}
						N[i][j] = '>';
					}
					else if(N[i][j] == 'v'){
						int ii = i+1;
						while(ii < m && N[ii][j] == '.'){
							S[ii][j] = 'x';
							ii++;
						}
						N[i][j] = '<';
					}
				}
			}
			state.push_back(S);
			// cout<<"state "<<k<<endl;
			// for(int i = 0; i < m; i++){
			// 	for(int j = 0; j < n; j++)
			// 		cout<<state[k][i][j];
			// 	cout<<endl;
			// }
		}

		int X[4] = {1, -1, 0, 0};
		int Y[4] = {0, 0, 1, -1};
		set<pair<pi, int> > visited;
		queue<pair<pi, pi> > Q;
		Q.push(mp( mp(sx, sy), mp(0, 0) ));
		bool done = false;
		visited.insert(mp( mp(sx, sy), 0));

		while(!Q.empty()){
			pi pos = Q.front().first;
			pi p = Q.front().second;
			Q.pop();
			int px = pos.first, py = pos.second;
			int dir = p.first, dist = p.second;
			// cout<<px<<" "<<py<<" "<<dir<<" "<<dist<<endl;
			if(dist > 0 && state[dir][px][py] != '.') continue;
			if(px == gx && py == gy){ 
				cout<<"Case #"<<num<<": "<<dist<<endl;
				done = true;
				break;
			}
			dist++;
			dir = (dir + 1)%4;
			for(int i = 0; i < 4; i++){
				int x = px + X[i], y = py + Y[i];
				if(x < 0 || x >= m || y < 0 || y >= n) continue;
				if(M[x][y] != '.') continue;
				if(visited.count(mp( mp(x, y), dir ))) continue;
				Q.push(mp( mp(x, y), mp(dir, dist) ));
				visited.insert(mp( mp(x, y), dir));
			}
		}
		if(!done) cout<<"Case #"<<num<<": impossible"<<endl;
	}
}
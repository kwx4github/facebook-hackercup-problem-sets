#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <map>
#include <fstream>
#include <cstring>

using namespace std;

typedef long long ll;

#define MAXN 103
#define MODN 1000000007

char rots[4] = {'<', '^', '>', 'v'};
int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};

int T, M, N;
char nextChar;
int maps[MAXN][MAXN][4];
bool path[MAXN][MAXN][4];
bool vist[MAXN][MAXN][4];
pair<int, int> start, goal;

void fillMaps();

int main()
{
    ios_base::sync_with_stdio(false);
    cin >> T;

    for(int t = 1; t <= T; t++)
    {
        memset(maps, 0, sizeof(maps[0][0][0]) * MAXN * MAXN * 4);
        memset(path, 0, sizeof(path[0][0][0]) * MAXN * MAXN * 4);
        memset(vist, 0, sizeof(vist[0][0][0]) * MAXN * MAXN * 4);

        cin >> M >> N;
        for(int i = 1; i <= M; i++)
        {
            for(int j = 1; j <= N; j++)
            {
                cin >> nextChar;

                bool isPath = true;
                if(nextChar == 'S')
                {
                    start = make_pair(i, j);
                }
                else if(nextChar == 'G')
                {
                    goal = make_pair(i, j);
                }
                else if(nextChar != '.')
                {
                    isPath = false;
                }

                for(int k = 0; k < 4; k++)
                {
                    maps[i][j][k] = isPath ? 1 : 0;
                    path[i][j][k] = isPath;
                }

                for(int k = 0; k < 4; k++)
                {
                    if(nextChar == rots[k])
                    {
                        for(int rot = 0; rot < 4; rot++)
                        {
                            maps[i][j][rot] = 2 + ((k + rot) % 4);
                        }
                        break;
                    }
                }
            }
        }
        fillMaps();

        priority_queue<pair<int, pair<int, int>>> pq;            
        ll ans = -1;    

        pq.push(make_pair(0, start));
        while(!pq.empty())
        {
            pair<int, pair<int, int>> curP = pq.top();
            pq.pop();

            int curX = curP.second.first;
            int curY = curP.second.second;
            int steps = -curP.first;
            if(!vist[curX][curY][steps])
            {
                vist[curX][curY][steps] = true;

                if(curX == goal.first && curY == goal.second)
                {
                    ans = steps;
                    break;
                }

                for(int i = 0; i < 4; i++)
                {
                    int nextX = curX + dir[i][0];
                    int nextY = curY + dir[i][1];
                    if(path[nextX][nextY][(steps + 1) % 4] 
                        && !vist[curX + dir[i][0]][curY + dir[i][1]][steps + 1])
                    {
                        pq.push(make_pair(-(steps + 1), make_pair(nextX, nextY)));
                    }
                }
            }
        }

        if(ans == -1)
        {
            printf("Case #%d: %s\n", t, "impossible");
        }
        else
        {
            printf("Case #%d: %d\n", t, ans);
        }
    }
}

void fillMaps()
{
    for(int num = 0; num < 4; num++)
    {
        for(int i = 1; i <= M; i++)
        {
            for(int j = 1; j <= N; j++)
            {
                if(maps[i][j][num] > 1)
                {
                    int curI = i, curJ = j, k = maps[i][j][num] - 2;
                    do
                    {
                        path[curI][curJ][num] = false;
                        curI += dir[k][0];
                        curJ += dir[k][1];
                    }
                    while(maps[curI][curJ][num] == 1);
                }
            }
        }
    }
}
#include <cstdio>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdlib>

using namespace std;

ifstream fin("3.in");
ofstream fout("3.out");


int map[100][100][4];
bool blocked[100][100][4];
char rawMap[100][100];
int r, c;

void rotate(){
	char s[] = {'^','>','v','<'};
	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++){
			for(int k=0;k<4;k++){
				if(rawMap[i][j] == s[k]){
					rawMap[i][j] = s[(k+1)%4];
					break;
				}
			}
		}
	}
}

void blockLasers(int layer){
	char s[] = {'^','>','v','<'};
	int dir[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++){
			for(int k=0;k<4;k++){
				if(rawMap[i][j] == s[k]){
					int p[2] = {i,j};
					while(true){
						p[0] += dir[k][0];
						p[1] += dir[k][1];
						if(p[0] >= 0 && p[0] < r && p[1] >= 0 && p[1] < c){
							if(rawMap[p[0]][p[1]] == '.' || rawMap[p[0]][p[1]] == 'S' || rawMap[p[0]][p[1]] == 'G'){
								blocked[p[0]][p[1]][layer] = true;
							}
							else{
								break;
							}
						}
						else{
							break;
						}
					}
				}
			}
		}
	}
}

void bfs(vector<vector<int>>& newQue, vector<vector<int>> que, int count){
	int dir[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
	for(int i=0;i<que.size();i++){
		for(int d=0;d<4;d++){
			vector<int> next = que[i];
			next[2] = (next[2] + 1)%4;
			next[0] += dir[d][0];
			next[1] += dir[d][1];
			if(next[0] >= 0 && next[0] < r && next[1] >= 0 && next[1] < c){
				if(!blocked[next[0]][next[1]][next[2]] && map[next[0]][next[1]][next[2]] == -1){
					newQue.push_back(next);
					map[next[0]][next[1]][next[2]] = count;
				}
			}
		}
	}
}

int main(){
	int nt;
	fin >> nt;
	for(int t=1;t<=nt;t++){

		fin >> r >> c;

		for(int i=0;i<r;i++){
			for(int j=0;j<c;j++){
				fin >> rawMap[i][j];
				
				for(int k=0;k<4;k++){
					blocked[i][j][k] = false;
					map[i][j][k] = -1;
				}
			}
		}
		
		int start[2], goal[2];

		for(int i=0;i<r;i++){
			for(int j=0;j<c;j++){

			}
		}

		for(int i=0;i<r;i++){
			for(int j=0;j<c;j++){
				if(rawMap[i][j] == '#' || rawMap[i][j] == '>' || rawMap[i][j] == '^' || rawMap[i][j] == '<' || rawMap[i][j] == 'v'){
					for(int k=0;k<4;k++)
						blocked[i][j][k] = true;
				}
				if(rawMap[i][j] == 'S'){
					start[0] = i;
					start[1] = j;
				}
				if(rawMap[i][j] == 'G'){
					goal[0] = i;
					goal[1] = j;
				}
			}
		}


		for(int i=0;i<4;i++){
			blockLasers(i);
			rotate();
		}

		vector<vector<int>> que;
		vector<int> startVec(3);
		startVec[0] = start[0];
		startVec[1] = start[1];
		startVec[2] = 0;
		que.push_back(startVec);
		vector<vector<int>> newQue;
		int count = 1;

		while(que.size())
		{
			newQue.clear();
			bfs(newQue,que, count);
			que.swap(newQue);
			count++;
		}

		int minv = -1;
		for(int i=0;i<4;i++){
			int v = map[goal[0]][goal[1]][i];
			if(v != -1){
				if(minv == -1)
					minv = v;
				else
					minv = min(v,minv);
			}
		}

		if(minv == -1)
			fout << "Case #" << t << ": " << "impossible" << endl;
		else
			fout << "Case #" << t << ": " << minv << endl;
	}
	return 0;
}
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

bool danger[105][105][5];
bool visited[105][105][5];
string input[105];

int main()
{
    ios_base::sync_with_stdio(0);
    freopen("laser_maze.txt", "r", stdin);
    freopen("financial.out", "w", stdout);
    int t;
    cin >> t;
    int tt = 1;
    while(t--)
    {
        int n, m, xx, yy;
        cin >> n >> m;
        setzero(danger);
        setzero(visited);
        for(int i=0;i<n;i++)
            cin >> input[i];
        queue<pair<pair<int,int> , int> > q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(input[i][j] == 'S')
                    q.push(mp(mp(i, j), 0));
                else if(input[i][j] == 'G')
                    xx = i, yy = j;
                else if(input[i][j] == '>' || input[i][j] == '^' || input[i][j] == '<' || input[i][j] == 'v')
                {
                    int st;
                    if(input[i][j] == '^')
                        st = 0;
                    else if(input[i][j] == '>')
                        st = 1;
                    else if(input[i][j] == 'v')
                        st = 2;
                    else st = 3;
                    for(int k=0;k<4;k++)
                    {
                        int x = i, y = j;
                        if(st == 0)
                        {
                            x--;
                            while(x>=0 && input[x][y] != '#')
                            {
                                danger[x][y][k] = 1;
                                x--;
                            }
                        }
                        else if(st == 1)
                        {
                            y++;
                            while(y<m && input[x][y] != '#')
                            {
                                danger[x][y][k] = 1;
                                y++;
                            }
                        }
                        else if(st == 2)
                        {
                            x++;
                            while(x<n && input[x][y] != '#')
                            {
                                danger[x][y][k] = 1;
                                x++;
                            }
                        }
                        else
                        {
                            y--;
                            while(y>=0&& input[x][y] != '#')
                            {
                                danger[x][y][k] = 1;
                                y--;
                            }
                        }
                        st++;
                        st%=4;
                    }
                }
            }
        }
        //cout << (danger[1][2][2]? 1 : 2);
        int res = -1;
        bool b = 0;
        while(!q.empty())
        {
            int x = q.front().first.first;
            int y = q.front().first.second;
            int c = q.front().second;
            q.pop();
            if(x < 0 || x >= n) continue;
            if(y < 0 || y >= m) continue;
            if(visited[x][y][c%4] || (danger[x][y][c%4] && b) || (input[x][y] != '.' && input[x][y] != 'G' && input[x][y] != 'S')) continue;
            b = 1;
            visited[x][y][c%4] = 1;
            if(x == xx && y == yy)
            {
                res = c;
                break;
            }
            q.push(mp(mp(x+1, y), c+1));
            q.push(mp(mp(x, y-1), c+1));
            q.push(mp(mp(x-1, y), c+1));
            q.push(mp(mp(x, y+1), c+1));
        }
        cout << "Case #" << tt++ << ": ";
        if(res == -1)
            cout << "impossible";
        else cout << res;
        cout << "\n";
    }
    return 0;
}

	#include <vector>
	#include <list>
	#include <map>
	#include <set>
	#include <queue>
	#include <deque>
	#include <stack>
	#include <bitset>
	#include <algorithm>
	#include <functional>
	#include <numeric>
	#include <utility>
	#include <sstream>
	#include <iostream>
	#include <iomanip>
	#include <cstdio>
	#include <cmath>
	#include <cstdlib>
	#include <ctime>
	#include <limits.h>
	#include <string.h>
	 
	#define repx(i,x,n) for(int i=x;i<n;i++)
	#define rep(i,n) repx(i,0,n)
	#define pb push_back
	#define full(v)  v.begin(),v.end()
	#define np next_permutation
	#define VI vector<int>
	#define VS vector<string>
	#define VC vector<char>
	#define VD vector<double>
	#define VF vector<float>
	#define SI set<int>
	#define SC set<char>
	#define SS set<string>
	#define MII map<int,int>
	#define MSI map<string,int>
	#define MIS map<int,string>
	#define MIC map<int,char>
	#define MCI map<char,int>
	#define LL long long
	using namespace std;
	int dx[] = {1,-1,0,0};
	int dy[] = {0,0,1,-1};
	int main()
	{
		int test;
		cin>>test;
		repx(testcase , 1, test+1)
		{
			int m,n;
			cin>>m>>n;
			VS maze;
			rep(i,m)
			{
				string s;
				cin>>s;
				maze.pb(s);
			}
			bool pos[101][101][4];
			memset(pos,1,sizeof(pos));
			map<char , VI> mp;
			//up , right , down , left
			mp['^'].pb(0);mp['^'].pb(1);mp['^'].pb(2);mp['^'].pb(3);
			mp['>'].pb(3);mp['>'].pb(0);mp['>'].pb(1);mp['>'].pb(2);
			mp['v'].pb(2);mp['v'].pb(3);mp['v'].pb(0);mp['v'].pb(1);
			mp['<'].pb(1);mp['<'].pb(2);mp['<'].pb(3);mp['<'].pb(0);
			int sx,sy,gx,gy;
			rep(i,m)
			{
				rep(j,n)
				{
					if(maze[i][j] != '.' && maze[i][j] != '#' && maze[i][j] !='S' && maze[i][j] != 'G')
					{
						
						// go up
						for(int k=i-1;k>=0&&(maze[k][j]=='.' || maze[k][j]=='S' || maze[k][j]=='G');k--)
						{
							pos[k][j][mp[maze[i][j]][0]]=0;
						}
						// go right
						for(int k=j+1;k<n&&(maze[i][k]=='.'|| maze[i][k]=='S' || maze[i][k]=='G');k++)
						{
							pos[i][k][mp[maze[i][j]][1]]=0;
						}
						// go down
						for(int k=i+1;k<m&&(maze[k][j]=='.'|| maze[k][j]=='S' || maze[k][j]=='G');k++)
						{
							// cout<<" bomb at "<<k<<" "<<j<<" "<<mp[maze[i][j]][2]; 
							pos[k][j][mp[maze[i][j]][2]]=0;
						}
						// go left
						
						for(int k=j-1;k>=0&&(maze[i][k]=='.'|| maze[i][k]=='S' || maze[i][k]=='G');k--)
						{
						
							pos[i][k][mp[maze[i][j]][3]]=0;
						}
					}
					else if(maze[i][j]=='S')
					{
						sx=i;sy=j;
					}
					else if(maze[i][j]=='G')
					{
						gx=i;gy=j;
					}
				}
			}

			


			cout<<"Case #"<<testcase<<": ";
			bool vis[101][101][4];
			memset(vis,0,sizeof(vis));
			queue<int>x,y,state,dist;
			x.push(sx);
			y.push(sy);
			state.push(0);
			dist.push(0);
			while(x.size())
			{
				int cx = x.front();
				int cy = y.front();
				int curstate = state.front();
				int curdist = dist.front();
				vis[cx][cy][curstate]=1;
				x.pop();y.pop();state.pop();dist.pop();
				rep(i,4)
				{
					int tx = cx+dx[i];
					int ty = cy+dy[i];
					int nextstate = (curstate+1)%4;
					if(tx<m && ty<n && tx>=0&&ty>=0 && (maze[tx][ty]=='.' || maze[tx][ty]=='S' || maze[tx][ty]=='G') && pos[tx][ty][nextstate]==1 && vis[tx][ty][nextstate]==0)
					{
						if(tx == gx && ty == gy)
						{
							cout<<curdist+1;
							goto lastline;
						}
						x.push(tx);
						y.push(ty);
						state.push(nextstate);
						dist.push(curdist+1);
						vis[tx][ty][nextstate]=1;
					}
				}
			}
			cout<<"impossible";
			lastline : cout<<"\n";
		}
		return 0;
	}
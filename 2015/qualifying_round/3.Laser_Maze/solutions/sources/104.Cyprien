dirs = ((-1, 0), (0, 1), (1, 0), (0, -1))
def get_dir(c):
  if c == '^': return 0
  if c == '>': return 1
  if c == 'v': return 2
  if c == '<': return 3
  return -1

_T = int(raw_input())
for _t in range(_T):
  M, N = map(int, raw_input().split())
  G = []
  for i in range(M):
    G.append(raw_input())

  maze = [[[0]*N for i in range(M)] for k in range(4)]
  for k in range(4):
    for i in range(M):
      for j in range(N):
        if G[i][j] == '#': maze[k][i][j] = 1
        elif G[i][j] == 'G': goal = (i, j)
        elif G[i][j] == 'S': start = (i, j)
        elif G[i][j] == '.': continue
        else:
          d = get_dir(G[i][j])
          d = (d+k)%4
          ti, tj = i, j
          while True:
            maze[k][ti][tj] = 1
            ti, tj = ti + dirs[d][0], tj + dirs[d][1]
            if ti < 0 or ti >= M or tj < 0 or tj >= N: break
            if G[ti][tj] == '#' or get_dir(G[ti][tj]) != -1: break
  seen = [[[False]*N for i in range(M)] for k in range(4)]

  seen[0][start[0]][start[1]] = True
  Q = []
  Q.append((0, start[0], start[1], 0))
  found = False
  while len(Q) > 0:
    k, i, j, d = Q.pop(0)
    if i == goal[0] and j == goal[1]:
      found = True
      break
    tk = (k+1)%4
    for td in dirs:
      ti, tj = i + td[0], j + td[1]
      if ti < 0  or ti >= M or tj < 0 or tj >= N: continue
      if maze[tk][ti][tj]: continue
      if seen[tk][ti][tj]: continue
      seen[tk][ti][tj] = True
      Q.append((tk, ti, tj, d+1))
  print 'Case #{}:'.format(_t+1),
  if found:
    print d
  else:
    print 'impossible'

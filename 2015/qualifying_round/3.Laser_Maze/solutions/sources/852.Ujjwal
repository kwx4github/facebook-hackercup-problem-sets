#include<bits/stdc++.h>

using namespace std;

#define mod 1000000007
#define pinf 2147483647
#define ninf -2147483648
#define ll long long
#define MAX(a,b,c) ((a>b)?(a>c?a:c):(b>c?b:c))
#define MIN(a,b,c) ((a<b)?(a<c?a:c):(b<c?b:c))
#define gcd __gcd
string tostr(long long x) { stringstream ss; ss << x; return ss.str(); }
long long toint(const string &s) { stringstream ss; ss << s; long long x; ss >> x; return x; }

#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define MEM(a,b) memset(a,(b),sizeof(a))

map<char,int> directions;
int m,n,start,goal;

void dir()
{
//0 for ^, 1 for >, 2 for v, 3 for <
directions['^'] = 0;
directions['>'] = 1;
directions['v'] = 2;
directions['<'] = 3;
}

int index(int x,int y)
{
 return x*n + y;
}

int xcoor(int index)
{
 return index/n;
}

int ycoor(int index)
{
 return index%n;
}

struct node
{
 int index;
 int steps;
};
int ans = 100000000;
string inp[200];

queue <node> bfsq;

int visited[10010][4];

void bfs(int start)
{
 node begin;
 begin.index = start;
 begin.steps = 0;
 bfsq.push(begin);
 
 	while(!bfsq.empty())
 	{
 		node temp = bfsq.front();
 		bfsq.pop();
 		int tx,ty;
 		tx = xcoor(temp.index);
 		ty = ycoor(temp.index);
 		//cout<<temp.index<<" "<<temp.steps<<"\n";
 		
 		if(!visited[temp.index][(temp.steps)%4])
		 {	
		 visited[temp.index][(temp.steps)%4] = 1;
		 //cout<<"hey";
		 //cout<<temp.index<<" "<<goal<<"dda\n";
		 	//check if goal is reached
			if(temp.index == goal)
				{
				 ans = min(ans,temp.steps);
				//cout<<ans<<"ea";
				 continue;
				}	
	
			//check in 4 directions
			//left
			if(ty>0)
			 {
			   if(inp[tx][ty-1]!='#' && inp[tx][ty-1]!='^' && inp[tx][ty-1]!='>' && inp[tx][ty-1]!='v' && inp[tx][ty-1]!='<')
			   	{
			   	int xx,yy,fl=0,fr=0,fu=0,fd=0;
			   	//check on left
			   	for(yy = ty-2;yy>=0;yy--)
			   		{
			   		if(inp[tx][yy] == '#')
			   			break;
			   		if(inp[tx][yy]=='^' || inp[tx][yy]=='>' || inp[tx][yy]=='v' || inp[tx][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 1)
			   				 {
			   				 	fl = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check on right
			   	for(yy = ty+1;yy<n;yy++)
			   		{
			   		if(inp[tx][yy] == '#')
			   			break;
			   		if(inp[tx][yy]=='^' || inp[tx][yy]=='>' || inp[tx][yy]=='v' || inp[tx][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 3)
			   				 {
			   				 	fr = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check above
			   	for(xx = tx-1;xx>=0;xx--)
			   		{
			   		if(inp[xx][ty-1] == '#')
			   			break;
			   		if(inp[xx][ty-1]=='^' || inp[xx][ty-1]=='>' || inp[xx][ty-1]=='v' || inp[xx][ty-1]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty-1]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 2)
			   				 {
			   				 	fu = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check below
			   	for(xx = tx+1;xx<m;xx++)
			   		{
			   		if(inp[xx][ty-1] == '#')
			   			break;
			   		if(inp[xx][ty-1]=='^' || inp[xx][ty-1]=='>' || inp[xx][ty-1]=='v' || inp[xx][ty-1]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty-1]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 0)
			   				 {
			   				 	fd = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//left node checked
			   	
			   	if(fl ==0 && fr==0 && fd==0 && fu==0)
			   		{
			   		 node tempnew;
			   		 tempnew.index = index(tx,ty-1);
			   		 tempnew.steps = temp.steps + 1;
			   		 bfsq.push(tempnew);
			   		 //cout<<"pushl";
			   		}
			   	 	
			   	} //if this is a valid node check ends
			 }//left node analysis complete
			 //right
			if(ty<n-1)
			 {
			   if(inp[tx][ty+1]!='#' && inp[tx][ty+1]!='^' && inp[tx][ty+1]!='>' && inp[tx][ty+1]!='v' && inp[tx][ty+1]!='<')
			   	{
			   	int xx,yy,fl=0,fr=0,fu=0,fd=0;
			   	//check on left
			   	for(yy = ty;yy>=0;yy--)
			   		{
			   		if(inp[tx][yy] == '#')
			   			break;
			   		if(inp[tx][yy]=='^' || inp[tx][yy]=='>' || inp[tx][yy]=='v' || inp[tx][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 1)
			   				 {
			   				 	fl = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check on right
			   	for(yy = ty+2;yy<n;yy++)
			   		{
			   		if(inp[tx][yy] == '#')
			   			break;
			   		if(inp[tx][yy]=='^' || inp[tx][yy]=='>' || inp[tx][yy]=='v' || inp[tx][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 3)
			   				 {
			   				 	fr = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check above
			   	for(xx = tx-1;xx>=0;xx--)
			   		{
			   		if(inp[xx][ty+1] == '#')
			   			break;
			   		if(inp[xx][ty+1]=='^' || inp[xx][ty+1]=='>' || inp[xx][ty+1]=='v' || inp[xx][ty+1]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty+1]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 2)
			   				 {
			   				 	fu = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check below
			   	for(xx = tx+1;xx<m;xx++)
			   		{
			   		if(inp[xx][ty+1] == '#')
			   			break;
			   		if(inp[xx][ty+1]=='^' || inp[xx][ty+1]=='>' || inp[xx][ty+1]=='v' || inp[xx][ty+1]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty+1]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 0)
			   				 {
			   				 	fd = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//right node checked
			   	
			   	if(fl ==0 && fr==0 && fd==0 && fu==0)
			   		{
			   		 node tempnew;
			   		 tempnew.index = index(tx,ty+1);
			   		 tempnew.steps = temp.steps + 1;
			   		 bfsq.push(tempnew);
			   		 //cout<<"pushr";
			   		}
			   	 	
			   	} //if this is a valid node check ends
			 }//right node analysis complete
			 
			 //up
			if(tx>0)
			 {
			   if(inp[tx-1][ty]!='#' && inp[tx-1][ty]!='^' && inp[tx-1][ty]!='>' && inp[tx-1][ty]!='v' && inp[tx-1][ty]!='<')
			   	{
			   	int xx,yy,fl=0,fr=0,fu=0,fd=0;
			   	//check on left
			   	for(yy = ty-1;yy>=0;yy--)
			   		{
			   		if(inp[tx-1][yy] == '#')
			   			break;
			   		if(inp[tx-1][yy]=='^' || inp[tx-1][yy]=='>' || inp[tx-1][yy]=='v' || inp[tx-1][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx-1][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 1)
			   				 {
			   				 	fl = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check on right
			   	for(yy = ty+1;yy<n;yy++)
			   		{
			   		if(inp[tx-1][yy] == '#')
			   			break;
			   		if(inp[tx-1][yy]=='^' || inp[tx-1][yy]=='>' || inp[tx-1][yy]=='v' || inp[tx-1][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx-1][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 3)
			   				 {
			   				 	fr = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check above
			   	for(xx = tx-2;xx>=0;xx--)
			   		{
			   		if(inp[xx][ty] == '#')
			   			break;
			   		if(inp[xx][ty]=='^' || inp[xx][ty]=='>' || inp[xx][ty]=='v' || inp[xx][ty]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 2)
			   				 {
			   				 	fu = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check below
			   	for(xx = tx;xx<m;xx++)
			   		{
			   		if(inp[xx][ty] == '#')
			   			break;
			   		if(inp[xx][ty]=='^' || inp[xx][ty]=='>' || inp[xx][ty]=='v' || inp[xx][ty]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 0)
			   				 {
			   				 	fd = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//up node checked
			   	
			   	if(fl ==0 && fr==0 && fd==0 && fu==0)
			   		{
			   		 node tempnew;
			   		 tempnew.index = index(tx-1,ty);
			   		 tempnew.steps = temp.steps + 1;
			   		 bfsq.push(tempnew);
			   		 //cout<<"pushu";
			   		}
			   	 	
			   	} //if this is a valid node check ends
			 }//up node analysis complete
			
			 //down
			if(tx<m-1)
			 {
			   if(inp[tx+1][ty]!='#' && inp[tx+1][ty]!='^' && inp[tx+1][ty]!='>' && inp[tx+1][ty]!='v' && inp[tx+1][ty]!='<')
			   	{
			   	int xx,yy,fl=0,fr=0,fu=0,fd=0;
			   	//check on left
			   	for(yy = ty-1;yy>=0;yy--)
			   		{
			   		if(inp[tx+1][yy] == '#')
			   			break;
			   		if(inp[tx+1][yy]=='^' || inp[tx+1][yy]=='>' || inp[tx+1][yy]=='v' || inp[tx+1][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx+1][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 1)
			   				 {
			   				 	fl = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check on right
			   	for(yy = ty+1;yy<n;yy++)
			   		{
			   		if(inp[tx+1][yy] == '#')
			   			break;
			   		if(inp[tx+1][yy]=='^' || inp[tx+1][yy]=='>' || inp[tx+1][yy]=='v' || inp[tx+1][yy]=='<')
			   			{
			   				int inidire = directions[inp[tx+1][yy]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 3)
			   				 {
			   				 	fr = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check above
			   	for(xx = tx;xx>=0;xx--)
			   		{
			   		if(inp[xx][ty] == '#')
			   			break;
			   		if(inp[xx][ty]=='^' || inp[xx][ty]=='>' || inp[xx][ty]=='v' || inp[xx][ty]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 2)
			   				 {
			   				 	fu = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//check below
			   	for(xx = tx+2;xx<m;xx++)
			   		{
			   		if(inp[xx][ty] == '#')
			   			break;
			   		if(inp[xx][ty]=='^' || inp[xx][ty]=='>' || inp[xx][ty]=='v' || inp[xx][ty]=='<')
			   			{
			   				int inidire = directions[inp[xx][ty]],finaldir;
			   				finaldir = (inidire + temp.steps + 1) % 4;
			   				if(finaldir == 0)
			   				 {
			   				 	fd = 1;
			   				 } 
			   				 break;
			   			}
			   		}
			   	//down node checked
			   	
			   	if(fl ==0 && fr==0 && fd==0 && fu==0)
			   		{
			   		 node tempnew;
			   		 tempnew.index = index(tx+1,ty);
			   		 tempnew.steps = temp.steps + 1;
			   		 bfsq.push(tempnew);
			   		 //cout<<"pushd";
			   		}
			   	 	
			   	} //if this is a valid node check ends
			 }//down node analysis complete
	
 		}//if not visited end
 	}//while end
}//bfs end

int main()
{
freopen("third.txt", "r", stdin);
freopen("thirdo.txt", "w", stdout);

//0 for ^, 1 for >, 2 for v, 3 for <
ios::sync_with_stdio(false);
int i,j,k;
int t;

dir();
cin>>t;
for(j=1;j<=t;j++)
{
 ans = 100000000;
   for(i=0;i<200;i++)
	inp[i].clear();
   for(i=0;i<10010;i++)
   	for(k=0;k<4;k++)
   		visited[i][k] = 0;
   cin>>m>>n;
	
   for(i=0;i<m;i++)
	cin>>inp[i];
	
   for(i=0;i<m;i++)
   	{
   	for(k=0;k<n;k++)
   		{
   		if(inp[i][k] == 'S')
   			start = i*n+k;
   		if(inp[i][k] == 'G')
   			goal = i*n+k;
   		}
   	}
   	
   bfs(start);
   if(ans == 100000000)
   	cout<<"Case #"<<j<<": "<<"impossible\n";
   else	
   	cout<<"Case #"<<j<<": "<<ans<<"\n";

}
return 0;
}

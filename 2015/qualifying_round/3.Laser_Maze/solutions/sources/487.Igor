#pragma comment(linker,"/stack:256000000")
#include <string>
#include <vector>
#include <cstring>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <queue>
#include <set>
#include <map>
#include <cstdlib>
#include <cfloat>
#include <ctime>
#include<cassert>
#include<cstdlib>
#include<fstream>
#include<iomanip>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

bool used[110][110][4];
int dp[110][110][4];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
vector<string>s;

bool isobst(char c){
	return c=='#'||c=='>'||c=='v'||c=='<'||c=='^';
}

void go1(int i,int j,int n,int m,int id){
	++j;
	for(;j<m;j++){
		if(isobst(s[i][j])){
			break;
		}
		used[i][j][id]=1;
	}
}

void go2(int i,int j,int n,int m,int id){
	++i;
	for(;i<n;i++){
		if(isobst(s[i][j])){
			break;
		}
		used[i][j][id]=1;
	}
}

void go3(int i,int j,int n,int m,int id){
	--j;
	for(;j>=0;j--){
		if(isobst(s[i][j])){
			break;
		}
		used[i][j][id]=1;
	}
}

void go4(int i,int j,int n,int m,int id){
	--i;
	for(;i>=0;i--){
		if(isobst(s[i][j])){
			break;
		}
		used[i][j][id]=1;
	}
}

struct State {
	int x,y,z;
	
	State() {}

	State(int x,int y,int z): x(x),y(y),z(z){}
};

int main() {
#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	int T;
	cin>>T;
	for(int tst=1;tst<=T;tst++){
		memset(dp,-1,sizeof(dp));
		memset(used,0,sizeof(used));
		int n,m;
		cin>>n>>m;
		s.resize(n);
		REP(i,n)cin>>s[i];
		int sx=-1,sy=-1,gx=-1,gy=-1;
		REP(i,n)REP(j,m){
			if(s[i][j]=='S'){
				sx=i;
				sy=j;
				s[i][j]='.';
			}else if(s[i][j]=='G'){
				gx=i;
				gy=j;
				s[i][j]='.';
			}
		}
		dp[sx][sy][0]=0;
		REP(i,n){
			REP(j,m){
				if(s[i][j]=='>'){
					go1(i,j,n,m,0);
					go2(i,j,n,m,1);
					go3(i,j,n,m,2);
					go4(i,j,n,m,3);
				}else if(s[i][j]=='v'){
					go2(i,j,n,m,0);
					go3(i,j,n,m,1);
					go4(i,j,n,m,2);
					go1(i,j,n,m,3);
				}else if(s[i][j]=='<'){
					go3(i,j,n,m,0);
					go4(i,j,n,m,1);
					go1(i,j,n,m,2);
					go2(i,j,n,m,3);
				}else if(s[i][j]=='^'){
					go4(i,j,n,m,0);
					go1(i,j,n,m,1);
					go2(i,j,n,m,2);
					go3(i,j,n,m,3);
				}
			}
		}
		queue<State>Q;
		Q.push(State(sx,sy,0));
		int res=-1;
		while(!Q.empty()){
			State cur=Q.front();
			if(cur.x==gx&&cur.y==gy){
				res=dp[cur.x][cur.y][cur.z];
				break;
			}
			Q.pop();
			REP(i,4){
				int nx=cur.x+dx[i];
				int ny=cur.y+dy[i];
				int nz=(cur.z+1)%4;
				if(0<=nx&&nx<n&&0<=ny&&ny<m&&dp[nx][ny][nz]==-1&&!used[nx][ny][nz]&&!isobst(s[nx][ny])){
					Q.push(State(nx,ny,nz));
					dp[nx][ny][nz]=dp[cur.x][cur.y][cur.z]+1;
				}
			}
		}
		printf("Case #%d: ",tst);
		if(res==-1)cout<<"impossible"<<endl;
		else cout<<res<<endl;
	}
	return 0;
}
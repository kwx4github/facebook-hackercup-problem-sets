@tdirections = ['^', '>', 'v', '<']
@stepx = [[-1, 0], [0, 1], [1, 0], [0, -1]]

def create_multimap(mtext)

  

  mm=Array.new(4).map{[]}
  turrets=[]
  sp=nil
  gp=nil
  mtext.size.times{|i|
    row=[]
    mtext[0].size.times{|j|
      case mtext[i][j]
      when '#' then row<< -1
      when '.' then row<< 0
      when 'S'
        row<< 0
        sp=[i, j]
      when 'G'
        row<<0
        gp=[i, j]
      when '^', '>', 'v', '<'
        d=@tdirections.index(mtext[i][j])
        row<< -1
        turrets << [i, j, d]
      end
    }
    mm.each{|m|
      m << row.clone
    }
  }
  
  turrets.each{|t|
    tr=t[0]
    tc=t[1]
    d=t[2]
    4.times{|i|
      fill_laser(mm[i], tr, tc, d)
      d = (d+1) % 4
    }
  }
  
  [mm, sp, gp]
end

def fill_laser(m, tr, tc, d)
  
  step=@stepx[d]
  
  tr+=step[0]
  tc+=step[1]
  while tr>=0 && tr < m.size && tc>=0 && tc < m[0].size && m[tr][tc] != -1
    m[tr][tc] = -1 
    tr+=step[0]
    tc+=step[1]
  end
end

def print_map(m)
  m.each{|row|
    puts row.map{|i| sprintf("%3d", i)}.join('')
  }
end

def solve(mtext)
  mm,sp,gp=create_multimap(mtext)
  
  steps=1
  q=[[sp[0], sp[1], 0]]
  until q.empty?
    nq=[]
    until q.empty?
      r,c,mx = q.pop
      nmx=(mx+1)%4
      m=mm[nmx]
      @stepx.each{|step|
        tr=r+step[0]
        tc=c+step[1]
        if tr>=0 && tr < m.size && tc>=0 && tc < m[0].size && m[tr][tc] == 0
          return steps if [tr, tc] == gp 
          m[tr][tc]=steps
          nq<<[tr, tc, nmx]
        end
      }
    end
    steps+=1
    q=nq
  end
  return nil
end

gets.to_i.times{|t|
  r,c = gets.split.map{|e|e.to_i}
  m=[]
  r.times{m<<gets.strip}
  steps=solve(m)
  steps ||= "impossible"
  puts "Case ##{t+1}: #{steps}"
}

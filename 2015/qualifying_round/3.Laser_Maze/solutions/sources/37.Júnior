#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second

 
#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

//////////////////////
int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};	
//////////////////////

const int N = 101;

int n,m;
char v[N][N];
int xs,ys,xf,yf;
int marc[N][N][4];
vii lasers;
int dist[N][N][4];

void marcar( int x, int y, int dir, int tempo )
{
	if( x<0 || x>=n || y<0 || y>=m || v[x][y]=='#' || v[x][y]=='^' || v[x][y] == '<' || v[x][y] == '>' || v[x][y] == 'v' ) return;
	marc[x][y][tempo] = 1;
	marcar(x+dx[dir],y+dy[dir],dir,tempo);
}

void process()
{
	for(int i=0;i<lasers.size();++i)
	{
		int px = lasers[i].F, py = lasers[i].S;
		int k = (v[px][py]=='^') ? 0 : (v[px][py]=='>') ? 3 : (v[px][py]=='v') ? 2 : 1;	
		marcar(px-1,py,0,(k)%4);
		marcar(px,py+1,1,(k+1)%4);
		marcar(px+1,py,2,(k+2)%4);
		marcar(px,py-1,3,(k+3)%4);
	}
}


int bfs()
{
	queue< pair< int, ii > > q;
	q.push(mp(0,mp(xs,ys)));
	dist[xs][ys][0] = 0; 

	int resp = INF;

	while(!q.empty())
	{
		pair<int,ii> foo = q.front(); q.pop();
		int tmp = foo.F;
		int x = foo.S.F;
		int y = foo.S.S;
		for(int i=0;i<4;++i){
			int xx = x+dx[i];
			int yy = y+dy[i];
			if( xx < 0 || xx >=n || yy < 0 || yy>=m ) continue;
			if( marc[xx][yy][(tmp+1)%4] ) continue;
			if( (v[xx][yy] != '.' && v[xx][yy] != 'G' && v[xx][yy] != 'S' ) ) continue;
			if( dist[xx][yy][(tmp+1)%4] > dist[x][y][tmp]+1 )
			{
				dist[xx][yy][(tmp+1)%4] = dist[x][y][tmp]+1;
				q.push(mp((tmp+1)%4,mp(xx,yy)));
				if( xx == xf && yy == yf ) resp = min( resp, dist[xx][yy][(tmp+1)%4] );
			}

		}
	}
	return resp;
}


int main()
{
	ios::sync_with_stdio(0);
	int t; cin >> t;
	for(int tt=1;tt<=t;++tt)
	{
		lasers.clear();
		memset(marc,0,sizeof marc);
		memset(dist,INF,sizeof dist);
		//memset(v,0,sizeof v);
		
		cin >> n >> m;
		for(int i=0;i<n;++i)
		{
			for(int j=0;j<m;++j)
			{
				cin >> v[i][j];
				if(v[i][j]=='S'){
					xs = i;
					ys = j;
				}
				else if(v[i][j]=='G'){
					xf = i;
					yf = j;
				}
				else if(v[i][j]!='.' && v[i][j]!='#') lasers.pb(mp(i,j));
			}
		}

		cout << "Case #" << tt << ": ";
		process();
		int foo = bfs();
		if( foo == INF ) cout << "impossible";
		else cout << foo;
		cout << endl;
	}
	return 0;
}
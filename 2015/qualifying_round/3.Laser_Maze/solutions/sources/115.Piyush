#include <bits/stdc++.h>
using namespace std;

#define ll long long int

typedef pair<int,int> pii;
#define pb push_back
#define fr(i,n)     for(int i=0;i<n;i++)
#define init(mem,v) memset(mem,v,sizeof(mem))

#define read(n) scanf("%d",&n)
#define read2(n,m) scanf("%d%d",&n,&m)
#define read3(n,m,l) scanf("%d%d%d",&n,&m,&l)

#define DB(x)              cerr<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cerr<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cerr<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#define DB4(a, b, c, d)    cerr<<__LINE__<<" :: "<<#a<< ": "<<a<<" | "<<#b<< ": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl;

#define mx 111
bool unsafe[mx][mx][4];
char maze[mx][mx];
bool vis[mx][mx][4];
int n,m;

void fill(int i,int j,int md,int di,int dj){
	bool first=true;
	while(i>=0 and i<n and j>=0 and j<m and (maze[i][j]=='.' or maze[i][j]=='S' or maze[i][j]=='G' or first)){
		first=false;
		unsafe[i][j][md]=1;
		i+=di;
		j+=dj;
	}
}

int main(){
	int t;
	read(t);
	for(int ii=1;ii<=t;ii++){
		read2(n,m);
		fr(i,n) scanf("%s",maze[i]);

		init(unsafe,0);
		fr(i,n) fr(j,m){
			if(maze[i][j]=='^'){
				fill(i,j,0,-1,0);
				fill(i,j,1,0,1);
				fill(i,j,2,1,0);
				fill(i,j,3,0,-1);
			}
			else if(maze[i][j]=='>'){
				fill(i,j,3,-1,0);
				fill(i,j,0,0,1);
				fill(i,j,1,1,0);
				fill(i,j,2,0,-1);
			}
			else if(maze[i][j]=='v'){
				fill(i,j,2,-1,0);
				fill(i,j,3,0,1);
				fill(i,j,0,1,0);
				fill(i,j,1,0,-1);
			}
			else if(maze[i][j]=='<'){
				fill(i,j,1,-1,0);
				fill(i,j,2,0,1);
				fill(i,j,3,1,0);
				fill(i,j,0,0,-1);
			}
		}

		queue<int> ci,cj,cd;
		fr(i,n) fr(j,m){
			if(maze[i][j]=='S'){
				ci.push(i);
				cj.push(j);
				cd.push(0);
				maze[i][j]='.';
			}
		}

		bool poss=false;
		init(vis,0);
		int dd;
		
		while(ci.size()>0){
			int i=ci.front();
			int j=cj.front();
			int d=cd.front();
			ci.pop();
			cj.pop();
			cd.pop();

			if(i<0 or i>=n or j<0 or j>=m) continue;
			if(vis[i][j][d%4]) continue;
			vis[i][j][d%4]=true;
			//DB3(i,j,d);

			if(maze[i][j]=='G' and !unsafe[i][j][d%4]){
				dd=d;
				poss=true;
				break;
			}
			
			if(maze[i][j]!='.' or (d>0 and unsafe[i][j][d%4])) continue;

			ci.push(i+1);cj.push(j);cd.push(d+1);
			ci.push(i-1);cj.push(j);cd.push(d+1);
			ci.push(i);cj.push(j+1);cd.push(d+1);
			ci.push(i);cj.push(j-1);cd.push(d+1);
		}

		if(poss) printf("Case #%d: %d\n",ii,dd);
		else printf("Case #%d: impossible\n",ii);
	}
}

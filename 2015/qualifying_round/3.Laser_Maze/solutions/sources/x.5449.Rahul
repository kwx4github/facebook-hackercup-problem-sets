import java.io.*;
import java.util.*;

public class HackercupNew{
	int[][] maze;
	int[] current=new int[2];
	int[] goal=new int[2];
	boolean impossible=false;
	int max=0;
	int steps=0;
	int count=0;
	public HackercupNew(int[][] maz,int[] cu,int[] ga){
		maze=maz.clone();
		current=cu.clone();
		goal=ga.clone();
		max=maze.length*maze[0].length;
	}
	public boolean checkLaser(int x,int y){
		boolean safe=true;
		for(int i=y+1;i<maze[0].length;i++){
			if(maze[x][i]==0||maze[x][i]==-1||maze[x][i]==-2){}
			else{
				if(maze[x][i]==1||maze[x][i]==2||maze[x][i]==3||maze[x][i]==5){
					break;
				}
				else{
					safe=false;
					break;
				}
			}
		}
		for(int i=y-1;i>=0;i--){
			if(maze[x][i]==0||maze[x][i]==-1||maze[x][i]==-2){}
			else{
				if(maze[x][i]==1||maze[x][i]==3||maze[x][i]==5||maze[x][i]==4){
					break;
				}
				else{
					safe=false;
					break;
				}
			}
		}
		for(int i=x+1;i<maze.length;i++){
			if(maze[i][y]==0||maze[i][y]==-1||maze[i][y]==-2){}
			else{
				if(maze[i][y]==1||maze[i][y]==2||maze[i][y]==3||maze[i][y]==4){
					break;
				}
				else{
					safe=false;
					break;
				}
			}
		}
		for(int i=x-1;i>=0;i--){
			if(maze[i][y]==0||maze[i][y]==-1||maze[i][y]==-2){}
			else{
				if(maze[i][y]==1||maze[i][y]==2||maze[i][y]==4||maze[i][y]==5){
					break;
				}
				else{
					safe=false;
					break;
				}
			}
		}
		return safe;
	}
	public boolean nextPosition(int x,int y){
		if(x<maze.length&&y<maze[0].length&&x>=0&&y>=0){
			if(maze[x][y]<1&&checkLaser(x,y)){
				return true;
			}
		}
		return false;
	}
	public void walk(int x,int y){
		for(int i=0;i<maze.length;i++){
			for(int j=0;j<maze[0].length;j++){
				if(maze[i][j]>1) maze[i][j]++;
				if(maze[i][j]>5) maze[i][j]=2;
			}
		}
		maze[current[0]][current[1]]=0;
		maze[x][y]=-1;
		current[0]=x;
		current[1]=y;
		steps++;
	}
	public String init() throws Exception{
		while(current[0]!=goal[0]||current[1]!=goal[1]){
			if(current[0]<goal[0]&&nextPosition(current[0]+1,current[1])){
				walk(current[0]+1,current[1]);
			}
			else if(current[1]<goal[1]&&nextPosition(current[0],current[1]+1)){
				walk(current[0],current[1]+1);
			}
			else if(current[1]>goal[1]&&nextPosition(current[0],current[1]-1)){
				walk(current[0],current[1]-1);
			}
			else if(current[0]>goal[0]&&nextPosition(current[0]-1,current[1])){
				walk(current[0]-1,current[1]);
			}
			else if(nextPosition(current[0]+1,current[1])){
				walk(current[0]+1,current[1]);
			}
			else if(nextPosition(current[0],current[1]+1)){
				walk(current[0],current[1]+1);
			}
			else if(nextPosition(current[0],current[1]-1)){
				walk(current[0],current[1]-1);
			}
			else if(nextPosition(current[0]-1,current[1])){
				walk(current[0]-1,current[1]);
			}
			else{
				impossible=true;
			}
			if(count>=max){
				break;
			}
			count++;

		}
		if(current[0]==goal[0]&&current[1]==goal[1]){
			return ""+steps;
		}
		else{
			return "impossible";
		}
	}
	public static void main(String[] args) throws Exception {
		HackercupNew[] obj;
		File file=new File("laser_maze.txt");
		BufferedReader br = new BufferedReader(new FileReader(file));
		FileWriter fstream = new FileWriter("output.txt", true);
		BufferedWriter out = new BufferedWriter(fstream);
		int T=Integer.parseInt(br.readLine());
		obj=new HackercupNew[T];
		for(int sup=0;sup<T;sup++){
		String[] size=br.readLine().split(" ");
		int[][] tmaze=new int[Integer.parseInt(size[0])][Integer.parseInt(size[1])];
		int[] tcurrent=new int[2];
		int[] tgoal=new int[2];
		for(int i=0;i<tmaze.length;i++){
			char[] c=br.readLine().toCharArray();
			for(int j=0;j<c.length;j++){
				switch(c[j]){
					case '.':tmaze[i][j]=0;break;
					case '#':tmaze[i][j]=1;break;
					case 'S':tmaze[i][j]=-1;tcurrent[0]=i;tcurrent[1]=j;break;
					case 'G':tmaze[i][j]=-2;tgoal[0]=i;tgoal[1]=j;break;
					case '^':tmaze[i][j]=2;break;
					case '>':tmaze[i][j]=3;break;
					case 'v':tmaze[i][j]=4;break;
					case '<':tmaze[i][j]=5;break;
				}
			}
		}
		obj[sup]=new HackercupNew(tmaze,tcurrent,tgoal);
		out.write("CASE #"+(sup+1)+": "+obj[sup].init()+"\n");
		}
		out.close();
	}
}
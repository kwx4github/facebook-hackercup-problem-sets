#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;
#define rep(i,n) for (int i = 0; i < (int)(n); i++)
const int N = 105;
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
map <char, int> transD;
int Tc, m, n, sx, sy;
char c[N][N];
int reach[N][N][4];

bool canGo(char c) {
    return c == '.' || c == 'G' || c == 'S';
}

bool isOK(int x, int y, int d) {
    rep (i, m) rep (j, n) {
        if (transD.count(c[i][j])) {
            int curd = (transD[c[i][j]] + d) % 4;
            int curx = i + dx[curd];
            int cury = j + dy[curd];
            while (0 <= curx && curx < m && 0 <= cury && cury < n && canGo(c[curx][cury])) {
                if (curx == x && cury == y) {
                    return 0;
                }
                curx += dx[curd];
                cury += dy[curd];
            }
        }
    }
    return 1;
}

struct Node {
    int x, y, d;
    Node(int x, int y, int d):x(x), y(y), d(d) {}
};

int main() {
    transD['^'] = 0;
    transD['>'] = 1;
    transD['v'] = 2;
    transD['<'] = 3;
    cin >> Tc;
    rep (ri, Tc) {
        printf("Case #%d: ", ri + 1);
        cin >> m >> n;
        rep (i, m) rep (j, n) {
            cin >> c[i][j];
            if (c[i][j] == 'S') {
                c[i][j] = '.';
                sx = i;
                sy = j;
            }
        }
        memset(reach, 0xff, sizeof(reach));
        reach[sx][sy][0] = 0;
        queue <Node> Q;
        Q.push(Node(sx, sy, 0));
        while (!Q.empty()) {
            Node cur = Q.front();
            Q.pop();
            rep (o, 4) {
                int x = cur.x + dx[o];
                int y = cur.y + dy[o];
                if (0 <= x && x < m && 0 <= y && y < n && canGo(c[x][y])) {
                    Node news = Node(x, y, (cur.d + 1) % 4);
                    if (isOK(news.x, news.y, news.d) && reach[news.x][news.y][news.d] == -1) {
                        Q.push(news);
                        reach[news.x][news.y][news.d] = reach[cur.x][cur.y][cur.d] + 1;
                        if (c[news.x][news.y] == 'G') {
                            printf("%d\n", reach[news.x][news.y][news.d]);
                            goto OVER;
                        }
                    }
                }
            }
        }
        puts("impossible");
        OVER:;
    }
}
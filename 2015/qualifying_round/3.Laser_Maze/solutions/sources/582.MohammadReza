// .... .... .....!
// ...... ......!
// .... ....... ..... ..!

#include<bits/stdc++.h>
using namespace std;

#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)
#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)
#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )
#define sz(x) (int((x).size()))
#define pb push_back
#define all(X) (X).begin(),(X).end()
#define X first
#define Y second

template<class P, class Q> inline void smin(P &a, Q b) { if (b < a) a = b; }
template<class P, class Q> inline void smax(P &a, Q b) { if (a < b) a = b; }

typedef long long ll;
typedef pair<int, int> pii;

////////////////////////////////////////////////////////////////////////////////

const int inf = 1<<29;
const int maxn = 100 + 10;

const int dx[] = {0, 1, 0, -1};
const int dy[] = {1, 0, -1, 0};
const string o = ">v<^";

int n, m;
char s[maxn][maxn];
bool block[maxn][maxn][4];

int dis[maxn][maxn][4];
queue<pair<pii, int>> q;

inline bool inside(int x, int y) {
	return 0 <= x && 0 <= y && x < n && y < m;
}

void run() {
	cin >> n >> m;
	rep(i, n) cin >> s[i];
	
	pii st, ed;
	rep(i, n) rep(j, m) {
		rep(k, 4) block[i][j][k] = false;
		if(s[i][j] == 'S') st = {i, j}, s[i][j] = '.';
		if(s[i][j] == 'G') ed = {i, j}, s[i][j] = '.';
		if(s[i][j] == '#' || o.find(s[i][j]) != string::npos) rep(k, 4) block[i][j][k] = true;
	}

	rep(i, n) rep(j, m) if(o.find(s[i][j]) != string::npos)
		rep(k, 4) {
			int d = (o.find(s[i][j]) + k) % 4;
			for(int x = i + dx[d], y = j + dy[d]; inside(x, y) && s[x][y] == '.'; x += dx[d], y += dy[d])
				block[x][y][k] = true;
		}

	memset(dis, -1, sizeof dis);
	dis[st.X][st.Y][0] = 0;
	q.push({st, 0});

	int ans = inf;
	while(!q.empty()) {
		pii cur = q.front().X;
		int t = q.front().Y;
		int cdis = dis[cur.X][cur.Y][t];
		t = (t + 1) % 4;
		
		if(cur == ed) smin(ans, cdis);
		
		rep(d, 4) {
			int nx = cur.X + dx[d], ny = cur.Y + dy[d];
			if(inside(nx, ny) && !block[nx][ny][t] && dis[nx][ny][t] == -1)
				dis[nx][ny][t] = cdis + 1, q.push({{nx, ny}, t});
		}
		q.pop();
	}

	if(ans == inf) cout << "impossible" << endl;
	else cout << ans << endl;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);

	int ttt; cin >> ttt;
	rep(ttc, ttt) {
		cout << "Case #" << ttc+1 << ": ";
		run();
	}

	return 0;
}


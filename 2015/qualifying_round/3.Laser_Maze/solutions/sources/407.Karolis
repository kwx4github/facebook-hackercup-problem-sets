#include <cstdio>
#include <string>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;

typedef pair <int, int> ii;
typedef pair <ii, int> iii;

const int Inf = 1000000000;
const int Maxn = 105;
const int Maxd = 4;
const string dr = "<^>v";
const int dy[Maxd] = {0, 1, 0, -1};
const int dx[Maxd] = {1, 0, -1, 0};

int t;
int m, n;
char B[Maxn][Maxn];
int sr, sc;
int st[Maxn][Maxn];
bool cb[Maxn][Maxn][Maxd];
int dist[Maxn][Maxn][Maxd];

bool Check(int r, int c, int t, int d)
{
	while (0 <= r && r < m && 0 <= c && c < n) {
		if (0 <= st[r][c] && st[r][c] < Maxd)
			return (t + st[r][c]) % Maxd != d;
		if (st[r][c] == Maxd) return true;
		r += dy[d]; c += dx[d];
	}
	return true;
}

int main()
{
	scanf("%d", &t);
	for (int tc = 1; tc <= t; tc++) {
		scanf("%d %d", &m, &n);
		for (int i = 0; i < m; i++)
			scanf("%s", B[i]);
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++) {
				if (B[i][j] == 'S') { sr = i; sc = j; }
				if (B[i][j] == '#') st[i][j] = Maxd;
				else if (dr.find(B[i][j]) != string::npos)
						st[i][j] = dr.find(B[i][j]);
					else st[i][j] = -1;
			}
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				for (int t = 0; t < Maxd; t++) {
					dist[i][j][t] = Inf;
					bool ok = st[i][j] == -1;
					for (int d = 0; d < Maxd && ok; d++)
						ok = Check(i, j, t, d);
					cb[i][j][t] = ok;
				}
		dist[sr][sc][0] = 0;
		queue <iii> Q; Q.push(iii(ii(sr, sc), 0));
		int res = Inf;
		while (!Q.empty()) {
			iii v = Q.front(); int d = dist[v.first.first][v.first.second][v.second]; Q.pop();
			if (B[v.first.first][v.first.second] == 'G') {
				res = d; break;
			}
			for (int i = 0; i < Maxd; i++) {
				iii u = iii(ii(v.first.first + dy[i], v.first.second + dx[i]), (v.second + 1) % Maxd);
				if (0 <= u.first.first && u.first.first < m && 0 <= u.first.second && u.first.second < n &&
					cb[u.first.first][u.first.second][u.second] && d + 1 < dist[u.first.first][u.first.second][u.second]) {
					dist[u.first.first][u.first.second][u.second] = d + 1;
					Q.push(u);
				}
			}
		}
		printf("Case #%d: ", tc);
		if (res < Inf) printf("%d\n", res);
		else printf("impossible\n");
	}
	return 0;
}
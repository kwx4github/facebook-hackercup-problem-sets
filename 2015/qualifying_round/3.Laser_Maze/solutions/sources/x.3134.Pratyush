import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

/**
 * Created by pratyush.verma on 11/01/15.
 */
public class LaserMaze {
    static class Node implements Comparable<Node> {
        int x, y, steps;

        Node(int x, int y, int steps) {
            this.x = x;
            this.y = y;
            this.steps = steps;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof Node) {
                return x == ((Node) obj).x && y == ((Node) obj).y && steps % 4 == ((Node) obj).steps % 4;
            }
            return false;
        }

        @Override
        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            result = 31 * result + (steps % 4);
            return result;
        }

        public int compareTo(Node o) {
            if (o.x == x && o.y == y && o.steps % 4 == steps % 4) {
                return 0;
            }
            return 1;
        }
    }
    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in);
        int test = cin.nextInt();
        int m, n;
        for (int i = 0; i < test; i++) {
            n = cin.nextInt();
            m = cin.nextInt();
            String arr[] = new String[n];
            for (int j = 0; j < n; j++) {
                arr[j] = cin.next();
            }
            int sol = bfs(arr, n, m);
            if (sol == -1) {
                System.out.println("Case #" + (i + 1) + ": " + "impossible");
            } else {
                System.out.println("Case #" + (i + 1) + ": " + sol);
            }
        }
    }

    private static int bfs(String[] arr, int n, int m) {
        Queue<Node> q = new PriorityQueue<Node>();
        int startX = 0, startY = 0, endX = 0, endY = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (arr[i].charAt(j) == 'S') {
                    startX = i;
                    startY = j;
                }
                if (arr[i].charAt(j) == 'G') {
                    endX = i;
                    endY = j;
                }
            }
        }
        Node startNode = new Node(startX, startY, 0);
        HashSet<Node> visited = new HashSet<Node>();
        q.add(startNode);
        visited.add(startNode);
        int dx[] = new int[] {0, 0, -1, 1};
        int dy[] = new int[] {1, -1, 0, 0};

        while (!q.isEmpty()) {
            Node t = q.poll();
            for (int i = 0; i < 4; i++) {
                int xx = t.x + dx[i];
                int yy = t.y + dy[i];
                if (isValidMove(arr, xx, yy, m, n, t.steps + 1)) {
                    if (xx == endX && yy == endY)
                        return t.steps + 1;
                    if (!visited.contains(new Node(xx, yy, t.steps + 1))) {
                        q.add(new Node(xx, yy, t.steps + 1));
                        visited.add(new Node(xx, yy, t.steps + 1));
                    }
                }
            }
        }
        return -1;
    }

    private static boolean isValidMove(String[] arr, int x, int y, int m, int n,  int steps) {
        if (x >= 0 && x < n && y >= 0 && y < m) {
            if (arr[x].charAt(y) == '#' || arr[x].charAt(y) == '^' || arr[x].charAt(y) == '>' || arr[x].charAt(y) == 'v' || arr[x].charAt(y) == '<')
                return false;
            for (int i = x + 1; i < n; i++) {
                if (arr[i].charAt(y) == '#')
                    break;
                if (arr[i].charAt(y) == '^' || arr[i].charAt(y) == '>' || arr[i].charAt(y) == 'v' || arr[i].charAt(y) == '<') {
                    if (steps % 4 == 0 && arr[i].charAt(y) == '^')
                        return false;
                    if (steps % 4 == 1 && arr[i].charAt(y) == '<')
                        return false;
                    if (steps % 4 == 2 && arr[i].charAt(y) == 'v')
                        return false;
                    if (steps % 4 == 3 && arr[i].charAt(y) == '>')
                        return false;
                }
            }
            for (int i = x - 1; i >=0; i--) {
                if (arr[i].charAt(y) == '#')
                    break;
                if (arr[i].charAt(y) == '^' || arr[i].charAt(y) == '>' || arr[i].charAt(y) == 'v' || arr[i].charAt(y) == '<') {
                    if (steps % 4 == 0 && arr[i].charAt(y) == 'v')
                        return false;
                    if (steps % 4 == 1 && arr[i].charAt(y) == '>')
                        return false;
                    if (steps % 4 == 2 && arr[i].charAt(y) == '^')
                        return false;
                    if (steps % 4 == 3 && arr[i].charAt(y) == '<')
                        return false;
                }
            }
            for (int i = y + 1; i < m; i++) {
                if (arr[x].charAt(i) == '#')
                    break;
                if (arr[x].charAt(i) == '^' || arr[x].charAt(i) == '>' || arr[x].charAt(i) == 'v' || arr[x].charAt(i) == '<') {
                    if (steps % 4 == 0 && arr[x].charAt(i) == '<')
                        return false;
                    if (steps % 4 == 1 && arr[x].charAt(i) == 'v')
                        return false;
                    if (steps % 4 == 2 && arr[x].charAt(i) == '>')
                        return false;
                    if (steps % 4 == 3 && arr[x].charAt(i) == '^')
                        return false;
                }
            }
            for (int i = y - 1; i >= 0; i--) {
                if (arr[x].charAt(i) == '#')
                    break;
                if (arr[x].charAt(i) == '^' || arr[x].charAt(i) == '>' || arr[x].charAt(i) == 'v' || arr[x].charAt(i) == '<') {
                    if (steps % 4 == 0 && arr[x].charAt(i) == '>')
                        return false;
                    if (steps % 4 == 1 && arr[x].charAt(i) == '^')
                        return false;
                    if (steps % 4 == 2 && arr[x].charAt(i) == '<')
                        return false;
                    if (steps % 4 == 3 && arr[x].charAt(i) == 'v')
                        return false;
                }
            }
            return true;
        }
        return false;
    }
}

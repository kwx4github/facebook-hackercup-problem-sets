#include <iostream>
#include <fstream>
#include <string>
#include <queue>

using namespace std;

ifstream fin("in");
ofstream fout("out");

int M, N;				//maze dimensions
int Gi, Gj;				//goal position
int basemaze[100][100]; //raw traversability: 1 for yes, 0 for no
int lasers[100][100];	//1 up, 2 right, 3 down, 4 left

int maze[100][100][4];  //laser constraints
int seen[100][100][4];  //memory for DFS

// makes the full maze with laser constraints
void processMaze(){
	for(int k = 0; k < 4; k++){
		for(int i = 0; i < M; i++){
			for(int j = 0; j < N; j++){
				maze[i][j][k] = basemaze[i][j];
			}
		}
	}

	for(int k = 0; k < 4; k++){
		for(int i = 0; i < M; i++){
			for(int j = 0; j < N; j++){
				if(lasers[i][j] == -1){
					continue;
				}

				int las = (lasers[i][j] + k) % 4;
				int di, dj;

				switch(las) {
					case 0: di = -1; dj = 0; break;
					case 1: di = 0; dj = 1; break;
					case 2: di = 1; dj = 0; break;
					case 3: di = 0; dj = -1; break;
				}

				int posi = i+di, posj = j+dj;
				while(basemaze[posi][posj] && posi >= 0 && posi < M && posj >= 0 && posj < N) {
					maze[posi][posj][k] = 0;
					posi += di;
					posj += dj;
				}
			}
		}
	}
}

//perform a DFS from position (i, j) at timestep k
int mazeDFS(int i, int j, int k){
	int steps = 0;
	int mj = 128; int mk = 128 * 128;
	int oldk = 0;
	queue<int> q;

	//initialize seen
	for(int pi = 0; pi < M; pi++){
		for(int pj = 0; pj < N; pj++){
			for(int pk = 0; pk < 4; pk++){
				seen[pi][pj][pk] = 0;
			}
		}
	}

	q.push(i + j*mj + k*mk);
	while(!q.empty()){
		int cur = q.front();
		q.pop();

		// process into a position, and update k
		int curi = cur % mj;
		int curj = (cur / mj) % mj;
		int curk = cur / mk;
		int nextk = (curk + 1) % 4;
		cur += mk * (nextk - curk);

		// don't bother if we already saw it
		if(seen[curi][curj][curk]){
			continue;
		} else {
			seen[curi][curj][curk] = 1;
		}

		// keep track of step number
		if(curk != oldk) {
			steps++;
			oldk = curk;
		}

		// detect success
		if(curi == Gi && curj == Gj){
			return steps;
		}

		// add on neighbors
		if(maze[curi+1][curj][nextk] && curi+1 < M){
			q.push(cur + 1);
		}
		if(maze[curi-1][curj][nextk] && curi-1 >= 0){
			q.push(cur - 1);
		}
		if(maze[curi][curj+1][nextk] && curj+1 < N){
			q.push(cur + mj);
		}
		if(maze[curi][curj-1][nextk] && curj-1 >= 0){
			q.push(cur - mj);
		}
	}
	return -1;
}

int main(){
	int T, Si, Sj;
	fin >> T;

	for (int i = 1; i <= T; i++) {
		fin >> M >> N;

		//reset laser array
		for(int j = 0; j < M; j++){
			for(int k = 0; k < N; k++){
				lasers[j][k] = -1;
			}
		}

		//read input
		string cur;
		for (int j = 0; j < M; j++) {
			fin >> cur;
			for (int k = 0; k < N; k++) {
				char spot = cur.at(k);
				if (spot == 'S') {
					Si = j;
					Sj = k;
					basemaze[j][k] = 1;
				} else if (spot == 'G') {
					Gi = j;
					Gj = k;
					basemaze[j][k] = 1;
				} else if (spot == '.') {
					basemaze[j][k] = 1;
				} else if (spot == '#') {
					basemaze[j][k] = 0;
				} else {
					//process the four laser directions
					basemaze[j][k] = 0;
					int res;
					switch(spot) {
						case '^': res = 0; break;
						case '>': res = 1; break;
						case 'v': res = 2; break;
						case '<': res = 3; break;
					}
					lasers[j][k] = res;
				}
			}
		}

		processMaze();
		int result = mazeDFS(Si, Sj, 0);

		fout << "Case #" << i << ": ";
		if(result > 0){
			fout << result;
		} else {
			fout << "impossible";
		}

		if (i < T) {
			fout << endl;
		}
	}

	fin.close();
	fout.close();
}
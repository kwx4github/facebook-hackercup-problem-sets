#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <stdio.h>

using namespace std; 


struct point
{
    bool vis [4];
    bool fin;
    int x, y, c;    
};

int main ()
{
    freopen ("laser_maze.txt", "r", stdin); 
    freopen ("cout.txt", "w", stdout);
    int tt; 
    cin >> tt; 
    for (int cases = 1; cases <= tt; cases++)
    {
        int m, n; 
        cin >> m >> n;
        char s [m][n];
        point start;
        point maze [m][n];
        for (int x = 0; x < m; x++)
            for (int y = 0; y < n; y++)
            {
                for (int z = 0; z < 4; z++)
                maze[x][y].vis[z] = false;
                maze[x][y].fin = false;    
            }
        for (int x = 0; x < m; x++)
        {
            cin >> s[x];
            for (int y = 0; y < n; y++)
            {
                maze[x][y].x = x;
                maze[x][y].y = y;
                maze[x][y].c = 0;
                if (s[x][y] == 'S')
                   start = maze[x][y];
            }    
        }
        for (int x = 0; x < m; x++)
        {
            for (int y = 0; y < n; y++)
            {
                if (s[x][y] == 'S')
                   maze[x][y].vis[0] = true;
                else if (s[x][y] == 'G')
                   maze[x][y].fin = true; 
                else if (s[x][y] == '.') {}
                else
                {
                    for (int z = 0; z < 4; z++)
                        maze[x][y].vis[z] = true;
                    if (s[x][y] == '#'){}
                    else
                    {
                        int start = 0;
                        if (s[x][y] == '>')
                           start = 3; 
                        else if (s[x][y] == 'v')
                           start = 2; 
                        else if (s[x][y] == '<')
                           start = 1;
                        for (int z = x-1; z >= 0; z--)
                        {
                            if (s[z][y] != '.' && s[z][y] != 'S' && s[z][y] != 'G')
                               break;
                            maze[z][y].vis[start] = true;
                        }
                        for (int z = x+1; z < m; z++)
                        {
                            if (s[z][y] != '.' && s[z][y] != 'S' && s[z][y] != 'G')
                               break;
                            maze[z][y].vis[(start+2)%4] = true;
                        }
                        for (int z = y+1; z < n; z++)
                        {
                            if (s[x][z] != '.' && s[x][z] != 'S' && s[x][z] != 'G')
                               break;
                            maze[x][z].vis[(start+1)%4] = true;
                        }
                        for (int z = y-1; z >= 0; z--)
                        {
                            if (s[x][z] != '.' && s[x][z] != 'S' && s[x][z] != 'G')
                               break;
                            maze[x][z].vis[(start+3)%4] = true;
                        }
                    }    
                }
            }    
        }
        
        int ans = 0;
        start = maze[start.x][start.y];
        //for (int z = 0; z < 4; z++)
//        {
//        for (int x = 0; x < m; x++)
//        {
//            for (int y = 0; y < n; y++)
//            {
//                cout << maze[x][y].vis[z];     
//            }
//            cout << "\n";
//        }
//        cout << "\n";
//        }        
        queue <point> q;
        q.push (start);
        while (!q.empty ())
        {
            point cur = q.front ();
            //cout << cur.x << "," << cur.y << "," << cur.c << " ";   
            q.pop ();
            if (cur.fin)
            {       
               ans = cur.c;
               break;    
            }
            if (cur.x > 0 && !maze[cur.x - 1][cur.y].vis [(cur.c+1)%4])
            {
                  maze[cur.x-1][cur.y].c = cur.c + 1; 
                  maze[cur.x - 1][cur.y].vis [(cur.c+1)%4] = true;    
                  q.push (maze[cur.x-1][cur.y]);
            }
            if (cur.x < m - 1 && !maze[cur.x + 1][cur.y].vis [(cur.c+1)%4])
            {
                  maze[cur.x+1][cur.y].c = cur.c + 1;
                  maze[cur.x+1][cur.y].vis [(cur.c+1)%4] = true;    
                  q.push (maze[cur.x+1][cur.y]);
            }
            if (cur.y > 0 && !maze[cur.x][cur.y-1].vis [(cur.c+1)%4])
            {
                  maze[cur.x][cur.y-1].c = cur.c + 1; 
                  maze[cur.x][cur.y-1].vis [(cur.c+1)%4] = true;    
                  q.push (maze[cur.x][cur.y-1]);
            }
            if (cur.y < n - 1 && !maze[cur.x][cur.y+1].vis [(cur.c+1)%4])
            {
                  maze[cur.x][cur.y+1].c = cur.c + 1;
                  maze[cur.x][cur.y+1].vis [(cur.c+1)%4] = true;    
                  q.push (maze[cur.x][cur.y+1]); 
            }
        }
        if (ans != 0)
        cout << "Case #" << cases << ": " << ans << "\n";
        else
        cout << "Case #" << cases << ": impossible\n";
    }
}

#include <bits/stdc++.h>
using namespace std;

const int N = 111;
const int dx[4] = {1, -1, 0, 0};
const int dy[4] = {0, 0, 1, -1};
typedef long long ll;
char a[N][N];
bool can[N][N][4], vis[N][N][4];
int hs[233], n, m;

struct Node {
	int x, y, step;
	Node() {}
	Node(int x, int y, int step) : x(x), y(y), step(step) {}
	friend bool operator < (const Node &p, const Node &q) {
		return p.step > q.step;
	}
} s, g;

inline bool check(const char &c) {
	return (c == '.' || c == 'S' || c == 'G');
}

inline bool check1(int x, int y, int step) {
	return (x >= 0 && x < n && y >= 0 && y < m && !can[x][y][step % 4] && !vis[x][y][step % 4]);
}

priority_queue<Node> q;

//int dist[N][N][4];
//bool vis[N][N][4];
//
//void spfa(int s)
//{
//	memset(vis, 0, sizeof vis);
//	memset(dist, 0x3f, sizeof dist);
//	dist[s] = 0;
//	queue<int> q;
//	q.push(s), vis[s] = 1;
//	while(!q.empty()) {
//		int u = q.front(); q.pop();
//		for(int i = eh[u]; ~i; i = e[i].next) {
//			int v = e[i].v;
//			if(e[i].w + dist[u] < dist[v]) {
//				dist[v] = e[i].w + dist[u];
//				if(!vis[v]) {
//					vis[v] = 1, q.push(v);
//				}
//			}
//		}
//		vis[u] = 0;
//	}
//}


int bfs() {
	while(!q.empty()) q.pop();
	q.push(s);
	vis[s.x][s.y][0] = 1;
	while(!q.empty()) {
		Node cur = q.top();
		q.pop();
        for(int i = 0; i < 4; ++i) {
			Node now(cur.x + dx[i], cur.y + dy[i], cur.step + 1);
			if(check1(now.x, now.y, now.step)) {
				if(now.x == g.x && now.y == g.y) return now.step;
				q.push(now);
				vis[now.x][now.y][now.step % 4] = 1;
			}
        }
	}
	return -1;
}

int main() {
#ifdef LOCAL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
#endif // LOCAL
	int t, cas = 0;
	hs['^'] = 0, hs['>'] = 1, hs['v'] = 2, hs['<'] = 3;
	scanf("%d", &t);
	while(t-- && scanf("%d%d", &n, &m)) {
		for(int i = 0; i < n; ++i) {
			scanf("%s", a[i]);
		}
		memset(can, 0, sizeof can);
		memset(vis, 0, sizeof vis);
		for(int i = 0; i < n; ++i) {
			for(int j = 0; j < m; ++j) {
				if(a[i][j] == 'S') {
					s = Node(i, j, 0);
				}
				else if(a[i][j] == 'G') {
					g = Node(i, j, 0);
				}
				else if(a[i][j] == '#') {
					for(int k = 0; k < 4; ++k) {
						can[i][j][k] = 1;
					}
				}
				else if(a[i][j] != '.') {
					int dir = hs[a[i][j]];
					for(int d = 0; d < 4; ++d) {
						int cur = (dir + d) % 4;
						can[i][j][d] = 1;
						if(cur == 0) {
							for(int k = i - 1; k >= 0; --k) {
								if(check(a[k][j])) can[k][j][d] = 1;
								else break;
							}
						}
						else if(cur == 1) {
							for(int k = j + 1; k < m; ++k) {
								if(check(a[i][k])) can[i][k][d] = 1;
								else break;
							}
						}
						else if(cur == 2) {
							for(int k = i + 1; k < n; ++k) {
								if(check(a[k][j])) can[k][j][d] = 1;
								else break;
							}
						}
						else {
							for(int k = j - 1; k >= 0; --k) {
								if(check(a[i][k])) can[i][k][d] = 1;
								else break;
							}
						}
					}
				}
			}
		}
//		for(int i = 0; i < n; ++i) {
//			for(int j = 0; j < m; ++j) {
//				for(int k = 0; k < 4; ++k) {
//					if(!can[i][j][k]) {
//						for(int d = 0; d < 4; ++d) {
//							if(check())
//						}
//					}
//				}
//			}
//		}
//		for(int i = 0; i < 4; ++i) {
//			for(int j = 0; j < n; ++j) {
//				for(int k = 0; k < m; ++k) {
//					printf("%d", can[j][k][i]);
//				}
//				puts("");
//			}
//			puts("");
//		}
		int ans = bfs();
//		int ans = 0;
		if(~ans) printf("Case #%d: %d\n", ++cas, ans);
		else printf("Case #%d: impossible\n", ++cas);
	}
	return 0;
}

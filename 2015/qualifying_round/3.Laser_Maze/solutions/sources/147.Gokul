def soln():
	with open ("laser_maze.txt", "r") as myfile:
	    data=myfile.readlines()
	new_data=[]
	for i in xrange(int(data.pop(0))):
		out = tuple(data.pop(0).split())
		maze = []
		for i in xrange(int(out[0])):
			maze.append(list(data.pop(0).strip()))
		new_data.append(maze)
	open('soln.txt', 'w').close()

	with open('soln.txt', 'a') as f:
		for i in xrange(len(new_data)):
			f.write("Case #" + str(i+1) + ": ")
			maze = new_data[i]
			for x in xrange(len(maze)):
				for y in xrange(len(maze[x])):
					if maze[x][y] == "S":
						start = (x,y)
						maze[x][y] ='.'
					if maze[x][y] == "G":
						goal = (x,y)
						maze[x][y] = '.'
			maze_set = gen_mazes(maze)
			maze_set = deploy_lazers(maze_set)
			step = 0
			state = (step, start)
			fringe = []
			visited = []
			fringe.append(state)
			done = False
			while len(fringe) > 0:
				state = fringe.pop(0)
				if not (state[0]%4, state[1]) in visited:
					visited.append((state[0]%4, state[1]))
					moves = get_valid_moves(maze_set[(state[0]+1)%4], state[1])
					for move in moves:
						if move == goal:
							f.write(str(state[0] + 1)+'\n')
							fringe = []
							done = True
							break
						fringe.append((state[0]+1, move))

			if not done:
				f.write('impossible\n')

def gen_mazes(maze):
	out = []
	out.append([x[:] for x in maze])
	for _ in xrange(3):
		for x in xrange(len(maze)):
			for y in xrange(len(maze[x])):
				if maze[x][y] in ['<', '^', '>', 'v']:
					if maze[x][y] == '<':
						maze[x][y] = '^'
					elif maze[x][y] == '^':
						maze[x][y] = '>'
					elif maze[x][y] == '>':
						maze[x][y] = 'v'
					elif maze[x][y] == 'v':
						maze[x][y] = '<'
		out.append([x[:] for x in maze])
	return out

def deploy_lazers(maze_set):
	out = []
	turrets = ['<', '^', '>', 'v']
	wall = ['#', '<', '^', '>', 'v']
	for maze in maze_set:
		for x in xrange(len(maze)):
			for y in xrange(len(maze[x])):
				if maze[x][y] in turrets:
					if maze[x][y] == '<':
						n = y - 1
						while n >= 0 and not maze[x][n] in wall:
							maze[x][n] = '-'
							n -= 1
					elif maze[x][y] == '^':
						n = x - 1
						while n >= 0 and not maze[n][y] in wall:
							maze[n][y] = '-'
							n -= 1
					elif maze[x][y] == '>':
						n = y + 1
						while n < len(maze[x]) and not maze[x][n] in wall:
							maze[x][n] = '-'
							n += 1
					elif maze[x][y] == 'v':
						n = x + 1
						while n < len(maze) and not maze[n][y] in wall:
							maze[n][y] = '-'
							n += 1
		out.append(maze)
	return out


def get_valid_moves(maze, pos):
	x,y = pos
	poss = [(x, y-1), (x+1, y), (x-1, y), (x, y+1)]
	wall = ['#', '<', '^', '>', 'v', '-']
	out = []
	for st in poss:
		i,j = st
		if i < 0 or j < 0 or i >= len(maze) or j >= len(maze[0]) or maze[i][j] in wall:
			pass
		else:
			out.append(st)
	return out





soln()

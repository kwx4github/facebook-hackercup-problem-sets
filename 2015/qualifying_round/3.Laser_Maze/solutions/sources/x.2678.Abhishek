#include<stdio.h>
#include<queue>
using namespace std;
typedef struct array
{
	int move, i, j, dis;
}array;
/*int min2(int a, int b)
{
	if(a==-1)return b;
	else if(b==-1)return a;
	else if(a<b)return a;
	else return b;
}
int min3(int a[3])
{
	if(a[0]==-1)return min2(a[1],a[2]);
	else if(a[1]==-1)return min2(a[0],a[2]);
	else if(a[2]==-1)return min2(a[1],a[2]);
	else return min2(a[0],min2(a[1],a[2]));
}
int min4(int a[5])
{
	if(a[1]==-1)
	{
		int b[3] = {a[2],a[3],a[4]};
		return min3(b);
	}
	else if(a[2]==-1)
	{
		int b[3] = {a[1],a[3],a[4]};
		return min3(b);
	}
	else if(a[3]==-1)
	{
		int b[3] = {a[1],a[2],a[4]};
		return min3(b);
	}
	else if(a[4]==-1)
	{
		int b[3] = {a[1],a[2],a[3]};
		return min3(b);
	}
	else
	{
		int b[3] = {a[2],a[3],a[4]};
		return min2(a[1],min3(b));
	}
}*/
int main()
{
	int t;
	scanf("%d", &t);
	for(int k=1;k<=t;k++)
	{
		int m, n;
		char s[100][100];
		scanf("%d%d", &m, &n);
		for(int i=0;i<m;i++)scanf("%s", s[i]);
		int allowed[100][100][5], ran[5], start[2];
		array goal;
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(s[i][j]=='#'||s[i][j]=='^'||s[i][j]=='>'||s[i][j]=='v'||s[i][j]=='<')continue;
				for(int q=1;q<=4;q++)allowed[i][j][q]=1;
				for(int q=0;q<j;q++)
				{
					if(s[i][q]=='<')
						allowed[i][j][2]=-1;
					else if(s[i][q]=='^')
						allowed[i][j][1]=-1;
					else if(s[i][q]=='>')
						allowed[i][j][4]=-1;
					else if(s[i][q]=='v')
						allowed[i][j][3]=-1;
				}
				for(int q=j+1;q<n;q++)
				{
					if(s[i][q]=='<')
						allowed[i][j][4]=-1;
					else if(s[i][q]=='^')
						allowed[i][j][3]=-1;
					else if(s[i][q]=='>')
						allowed[i][j][2]=-1;
					else if(s[i][q]=='v')
						allowed[i][j][1]=-1;
				}
				for(int q=0;q<i;q++)
				{
					if(s[q][j]=='<')
						allowed[i][j][3]=-1;
					else if(s[q][j]=='^')
						allowed[i][j][2]=-1;
					else if(s[q][j]=='>')
						allowed[i][j][1]=-1;
					else if(s[q][j]=='v')
						allowed[i][j][4]=-1;
				}
				for(int q=i+1;q<m;q++)
				{
					if(s[q][j]=='<')
						allowed[i][j][1]=-1;
					else if(s[q][j]=='^')
						allowed[i][j][4]=-1;
					else if(s[q][j]=='>')
						allowed[i][j][3]=-1;
					else if(s[q][j]=='v')
						allowed[i][j][2]=-1;
				}
				if(s[i][j]=='G')
				{
					for(int q=1;q<=4;q++)
						ran[q]=allowed[i][j][q];
					goal.i=i;
					goal.j=j;
				}
				else if(s[i][j]=='S')
				{
					start[0]=i;
					start[1]=j;
				}
			}
		}
		allowed[start[0]][start[1]][4]=1;
		int dist[100][100][5];
		for(int i=0;i<100;i++)
			for(int j=0;j<100;j++)
				for(int q=1;q<=4;q++)
					dist[i][j][q]=-1;
		queue <array> a;
		for(int q=1;q<=4;q++)
		{
			goal.move=q;
			goal.dis=0;
			if(ran[q]==1)
			{
				dist[goal.i][goal.j][q]=0;
				a.push(goal);
			}
		}
		while(!a.empty())
		{
			array cell=a.front();
			a.pop();
			int dis=cell.dis,i=cell.i,j=cell.j,move=cell.move, ind;
			if(move==1)ind=4;
			else ind=move-1;
			i--;
			if(i>=0 && (s[i][j]=='.' || s[i][j]=='S' || s[i][j]=='G'))
			{
				if(allowed[i][j][ind]==1 && (dist[i][j][ind]==-1 || dist[i][j][ind]>dis+1))
				{
					dist[i][j][ind]=dis+1;
					array ins={ind,i,j,dis+1};
					a.push(ins);
				}
			}
			i++;
			j++;
			if(j<n && (s[i][j]=='.' || s[i][j]=='S' || s[i][j]=='G'))
			{
				if(allowed[i][j][ind]==1 && (dist[i][j][ind]==-1 || dist[i][j][ind]>dis+1))
				{
					dist[i][j][ind]=dis+1;
					array ins={ind,i,j,dis+1};
					a.push(ins);
				}
			}
			j--;
			i++;
			if(i<m && (s[i][j]=='.' || s[i][j]=='S' || s[i][j]=='G'))
			{
				if(allowed[i][j][ind]==1 && (dist[i][j][ind]==-1 || dist[i][j][ind]>dis+1))
				{
					dist[i][j][ind]=dis+1;
					array ins={ind,i,j,dis+1};
					a.push(ins);
				}
			}
			i--;
			j--;
			if(j>=0 && (s[i][j]=='.' || s[i][j]=='S' || s[i][j]=='G'))
			{
				if(allowed[i][j][ind]==1 && (dist[i][j][ind]==-1 || dist[i][j][ind]>dis+1))
				{
					dist[i][j][ind]=dis+1;
					array ins={ind,i,j,dis+1};
					a.push(ins);
				}
			}
			j++;
		}
		int i=start[0], j=start[1];
		printf("Case #%d: ", k);
		if(dist[i][j][4]==-1)printf("impossible\n");
		else printf("%d\n", dist[i][j][4]);
	}
	return 0;
}

#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <numeric>
#include <bitset>
#define REP(i, a, b) for ( int i = int(a); i <= int(b); i++ )
#define PB push_back
#define MP make_pair
#define for_each(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define DFS_WHITE -1
#define DFS_BLACK 1
#define MAXN 1000
#define pi 3.141592653589793
#define ARRAY_SIZE(A) sizeof(A)/sizeof(A[0])
#define INF 1<<30
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
#define MOD 1000000007
	struct node
	{
		pair<int,int>p;
		int cost;
	};

int arr[4] = {0,1,0,-1};
int brr[4] = {1,0,-1,0};
int main()
{
	int t =0;
	cin>>t;
	int r =1;
	while(t--)
	{
		int x,y;
		cin>>x>>y;
		vector< vector<set<int> > >store;
		for(int i =0; i<x ;i++)
		{
			vector<set<int> >vv(y);
			store.PB(vv);
		}
		vector<string>vec;
		for(int i = 0;i<x;i++)
		{
			string z;
			cin>>z;
			vec.PB(z);
		}
		
		int sx =0;
		int sy =0;
		for(int i =0; i<x; i++)
		{
			for(int j =0 ;j <y ;j++)
			{
				if(vec[i][j] =='S')
				{
					sx = i;
					sy =j;
					break;
				}
			}
		}
		
		for(int i =0; i<x; i++)
		{
			for(int j =0 ;j <y ;j++)
			{
				
				if(vec[i][j] == '^')
				{
					for(int k = j+1;k<y;k++) //move right
					{
						store[i][k].insert(0);
					}
					for(int k = i+1;k<x;k++) //move down
					{
						store[k][j].insert(1);
					}
					for(int k = i-1;k>=0;k--) // move up
					{
						store[k][j].insert(3);
					}
					for(int k = j-1;k>=0;k--) //move left
					{
						store[i][k].insert(2);
					}
				}
				if(vec[i][j] == 'v')
				{
					for(int k = j+1;k<y;k++)
					{
						store[i][k].insert(2);
					}
					for(int k = i+1;k<x;k++)
					{
						store[k][j].insert(3);
					}
					for(int k = i-1;k>=0;k--)
					{
						store[k][j].insert(1);
					}
					for(int k = j-1;k>=0;k--)
					{
						store[i][k].insert(0);
					}
				}

				if(vec[i][j] == '<')
				{
					for(int k = j+1;k<y;k++) //move right
					{
						store[i][k].insert(1);
					}
					for(int k = i+1;k<x;k++) //move down
					{
						store[k][j].insert(2);
					}
					for(int k = i-1;k>=0;k--) // move up
					{
						store[k][j].insert(0);
					}
					for(int k = j-1;k>=0;k--) //move left
					{
						store[i][k].insert(3);
					}
				}
				if(vec[i][j] == '>')
				{
					for(int k = j+1;k<y;k++) //move right
					{
						store[i][k].insert(3);
					}
					for(int k = i+1;k<x;k++) //move down
					{
						store[k][j].insert(0);
					}
					for(int k = i-1;k>=0;k--) // move up
					{
						store[k][j].insert(2);
					}
					for(int k = j-1;k>=0;k--) //move left
					{
						store[i][k].insert(1);
					}
				}
			}
		}
		/*for(int i =0;i<x;i++)
			{
				for(int j =0 ;j <y ;j++)
				{
					set<int>s = store[i][j];
					for(set<int>::iterator it = s.begin();it!=s.end();it++)
					{
						cout<<*it<<" ";
					}
					cout<<"      ";
				}
				cout<<endl;
			}*/
		vector< vector<set<int> > >base;
		for(int i =0; i<x ;i++)
		{
			vector<set<int> >vv(y);
			base.PB(vv);
		}
		// BFS step

		queue<struct node>q;
		struct node z;
		z.p.first =sx;
		z.p.second = sy;
		z.cost =0;
		q.push(z);
		int ans = INF;
		base[z.p.first][z.p.second].insert(z.cost);

		while(!q.empty())
		{
			struct node t = q.front();
			
			q.pop();
			for(int i =0;i<4;i++)
			{
				if(t.p.first+arr[i]>=0 && t.p.first+arr[i]<x  && t.p.second+brr[i]>=0 && t.p.second+brr[i]<y && vec[t.p.first+arr[i]][t.p.second+brr[i]] == 'G'
					&& base[t.p.first+arr[i]][t.p.second+brr[i]].find((t.cost)%4)==base[t.p.first+arr[i]][t.p.second+brr[i]].end()
						&&	store[t.p.first+arr[i]][t.p.second+brr[i]].find((t.cost)%4) ==store[t.p.first+arr[i]][t.p.second+brr[i]].end())
				{
					ans =min(ans,t.cost+1);
					//cout<<t.p.first<<" "<<t.p.second<<" "<<t.cost%4<<endl;
					//cout<<"hello"<<endl;
				}
				else if(t.p.first+arr[i]>=0 && t.p.first+arr[i]<x  && t.p.second+brr[i]>=0 && t.p.second+brr[i]<y 
						&& base[t.p.first+arr[i]][t.p.second+brr[i]].find((t.cost)%4)==base[t.p.first+arr[i]][t.p.second+brr[i]].end()
						&&	store[t.p.first+arr[i]][t.p.second+brr[i]].find((t.cost)%4) ==store[t.p.first+arr[i]][t.p.second+brr[i]].end()
						&& (vec[t.p.first+arr[i]][t.p.second+brr[i]] == '.' || vec[t.p.first+arr[i]][t.p.second+brr[i]] == 'S'))
				{
					struct node e;
					base[t.p.first+arr[i]][t.p.second+brr[i]].insert((t.cost)%4);
					e.p.first = t.p.first +arr[i];
					e.p.second =t.p.second+ brr[i];
					e.cost = t.cost+1;
					q.push(e);
				}
			}
		}
		cout<<"Case #"<<r<<": "; 
		r++;
		if(ans ==INF)
			cout<<"impossible"<<endl;
		else
		cout<<ans<<endl;
	}
	return 0;
}
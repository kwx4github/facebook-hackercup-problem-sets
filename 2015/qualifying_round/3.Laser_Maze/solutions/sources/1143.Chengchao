#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int dx[] = { 0, 1, 0,-1};
const int dy[] = { 1, 0,-1, 0};

char maze[110][110];
char m2[4][110][110];
int step[4][110][110];
int id[128];

int n, m;

inline bool laser(char ma[110][110], int x, int y) {
  return 0 <= x && x < n && 0 <= y && y < m
      && ma[x][y] != '#' && id[(int)ma[x][y]] == 0;
}

inline bool valid(char ma[110][110], int x, int y) {
  return 0 <= x && x < n && 0 <= y && y < m
      && ma[x][y] != '#' && id[(int)ma[x][y]] == 0 && ma[x][y] != 'x';
}

void init_m2() {
  for (int i = 0; i < 4; ++i) {
    char (*const ma)[110] = m2[i];
    for (int j = 0; j < n; ++j)
      strcpy(ma[j], maze[j]);
    for (int j = 0; j < n; ++j)
      for (int k = 0; k < m; ++k) {
        int d = id[(int)ma[j][k]];
        if (d != 0) {
          d = (d - 1 + i) % 4;
          for (int x = j + dx[d], y = k + dy[d]; laser(ma, x, y);
              x += dx[d], y += dy[d])
            ma[x][y] = 'x';
        }
      }
  }
}

int bfs(int x, int y) {
  static int qx[4 * 110 * 110], qy[4 * 110 * 110], qt[4 * 110 * 110];
  step[0][x][y] = 0;
  int s = 0, e = 1;
  qx[0] = x; qy[0] = y; qt[0] = 0;
  while (s != e) {
    int nx = qx[s], ny = qy[s], nt = qt[s];
    ++s;
    for (int i = 0; i < 4; ++i) {
      int mx = nx + dx[i], my = ny + dy[i], t = (nt + 1) % 4;
      int ms = step[nt][nx][ny] + 1;
      if (valid(m2[t], mx, my) && step[t][mx][my] == -1) {
        if (m2[t][mx][my] == 'G')
          return ms;
        step[t][mx][my] = ms;
        qx[e] = mx; qy[e] = my; qt[e] = t;
        e++;
      }
    }
  }
  return -1;
}

int main() {
  id['>'] = 1; id['v'] = 2; id['<'] = 3; id['^'] = 4;
  int test; scanf("%d", &test);
  for (int cas = 1; cas <= test; ++cas) {
    scanf("%d%d", &n, &m);
    int x = 0, y = 0;
    for (int i = 0; i < n; ++i) {
      scanf("%s", maze[i]);
      for (int j = 0; j < m; ++j) {
        if (maze[i][j] == 'S')
          x = i, y = j;
        for (int k = 0; k < 4; ++k)
          step[k][i][j] = -1;
      }
    }
    init_m2();
    int ans = bfs(x, y);
    if (ans == -1)
      printf("Case #%d: impossible\n", cas);
    else
      printf("Case #%d: %d\n", cas, ans);
  }
  return 0;
}

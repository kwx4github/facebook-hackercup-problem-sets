#include <iostream>
#include <fstream>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <math.h>
#include <cstdio>
#include <assert.h>

#define mset(x,y) memset(x,y,sizeof(x))
#define INF 1000000000
#define MOD 1000000007
#define pb(X) push_back(X) 
#define ff first
#define ss second
#define All(c) c.begin(), c.end()
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)
#define gi(n) scanf("%d",&n)
#define gli(n) scanf("%lld",&n)
#define gd(n) scanf("%lf",&n)
#define gs(n) scanf("%s",n)
#define mp(x, y) make_pair(x, y)
 
using namespace std;
 
typedef long long int lli;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<double> vd;

char inp[110][110];

int blk[4][110][110];
int dis[4][110][110];

int m, n;

void blockcell(int ang, int i, int j)
{
	blk[0][i][j] = blk[1][i][j] = blk[2][i][j] = blk[3][i][j] = 1;
	for(int a = i-1; a>=0 and inp[a][j] == '.'; a--) blk[(4-ang)%4][a][j] = 1;
	for(int b = j+1; b<n and inp[i][b] == '.'; b++) blk[(5-ang)%4][i][b] = 1;
	for(int a = i+1; a<m and inp[a][j] == '.'; a++) blk[(6-ang)%4][a][j] = 1;
	for(int b = j-1; b>=0 and inp[i][b] == '.'; b--) blk[(7-ang)%4][i][b] = 1;
}

int x[] = {0, 1, 0, -1};
int y[] = {1, 0, -1, 0};

int main()
{
	int t;
	gi(t);

	for(int tt = 1; tt<=t; tt++)
	{
		// cout<<"*****************************************";
		// cout<<"Test "<<tt<<endl;

		gi(m);
		gi(n);

		for(int i=0; i<m; i++) scanf("%s", inp[i]);

		for(int i=0; i<m; i++)
			for(int j=0; j<n; j++)
			{
				switch(inp[i][j])
				{
					case '^': inp[i][j] = 0;
						break;
					case '>': inp[i][j] = 1;
						break;
					case 'v': inp[i][j] = 2;
						break;
					case '<': inp[i][j] = 3;
						break;
					default:
						break;
				}
			}

		pii start, end;

		mset(blk, 0);

		for(int i=0; i<m; i++)
			for(int j=0; j<n; j++)
			{
				switch(inp[i][j])
				{
					case '#': blk[0][i][j] = blk[1][i][j] = blk[2][i][j] = blk[3][i][j] = 1;
						break;

					case 0: blockcell(0, i, j);
						break;

					case 1: blockcell(1, i, j);
						break;

					case 2: blockcell(2, i, j);
						break;

					case 3: blockcell(3, i, j);
						break;

					case 'S': start = pii(i,j);
							inp[i][j] = '.';
						break;

					case 'G': end = pii(i,j);
							inp[i][j] = '.';
						break;
				}
			}

		// for(int i=0; i<4; i++)
		// {
		// 	cout<<i<<":"<<endl;
		// 	for(int a=0; a<m; a++)
		// 	{
		// 		for(int b=0; b<n; b++)
		// 			cout<<blk[i][a][b];
		// 		cout<<endl;
		// 	}
		// 	cout<<endl;
		// }


		for(int i=0; i<m; i++)
			for(int j=0; j<n; j++)
				for(int k=0; k<4; k++)
					dis[k][i][j] = -1;

		dis[0][start.ff][start.ss] = 0;

		queue<pair<pii, int> > que;
		que.push(mp(start, 0));

		while(que.size())
		{
			pair<pii, int> temp = que.front();
			que.pop();
			for(int i=0; i<4; i++)
			{
				int xx = temp.ff.ff + x[i];
				int yy = temp.ff.ss + y[i];
				int ang = temp.ss;

				if(xx >=0 and xx < m and yy >=0 and yy < n and dis[(ang+1)%4][xx][yy] == -1 and blk[(ang+1)%4][xx][yy] == 0)
				{
					dis[(ang+1)%4][xx][yy] = dis[ang][temp.ff.ff][temp.ff.ss] + 1;
					que.push(mp(pii(xx,yy), (ang+1)%4));
				}
			}
		}

		int mi = INF;
		for(int i=0; i<4; i++) if(dis[i][end.ff][end.ss] != -1) mi = min(mi, dis[i][end.ff][end.ss]);

		if(mi != INF) printf("Case #%d: %d\n", tt, mi);
		else printf("Case #%d: impossible\n", tt);
	}
    return 0;
}
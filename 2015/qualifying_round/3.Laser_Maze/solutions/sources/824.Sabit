#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define MAX 105
#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define write() freopen("output.txt", "w", stdout)
#define valid(i, j) ((i) >= 0 && (i) < n && (j) >= 0 && (j) < m)

char str[MAX][MAX];
int t, n, m, ar[MAX][MAX], dis[MAX][MAX][4], Q[50010][3];

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

bool Check(int i, int j, int t){
    int d, k, l;
    for (d = 0; d < 4; d++){
        k = i + dx[d], l = j + dy[d];

        while (valid(k, l)){
            if (str[k][l] == '#') break;

            if (ar[k][l] != -1){
                if (((ar[k][l] + t) & 3) == ((d + 2) & 3)) return false;
                break;
            }
            k += dx[d], l += dy[d];
        }
    }
    return true;
}

int bfs(int i, int j){
    memset(dis, -1, sizeof(dis));
    int t, d, k, l, x, y, head = 0, tail = 0;

    dis[i][j][0] = 0;
    Q[tail][0] = i, Q[tail][1] = j, Q[tail++][2] = 0;

    while (head < tail){
        i = Q[head][0], j = Q[head][1], t = Q[head++][2];
        if (str[i][j] == 'G') return dis[i][j][t];

        for (d = 0; d < 4; d++){
            x = (t + 1) & 3;
            k = i + dx[d], l = j + dy[d];

            if (valid(k, l) && (str[k][l] == '.' || str[k][l] == 'G' || str[k][l] == 'S') && Check(k, l, x) && dis[k][l][x] == -1){
                dis[k][l][x] = dis[i][j][t] + 1;
                Q[tail][0] = k, Q[tail][1] = l, Q[tail++][2] = x;
            }
        }
    }
    return -1;
}


int main(){
    read();
    write();
    int T = 0, i, j, k, a, b;

    scanf("%d", &t);
    while (t--){
        scanf("%d %d", &n, &m);
        memset(ar, -1, sizeof(ar));

        for (i = 0; i < n; i++){
            scanf("%s", str[i]);
            for (j = 0; j < m; j++){
                if (str[i][j] == 'S') a = i, b = j;
                else if (str[i][j] == '^') ar[i][j] = 0;
                else if (str[i][j] == '>') ar[i][j] = 1;
                else if (str[i][j] == 'v') ar[i][j] = 2;
                else if (str[i][j] == '<') ar[i][j] = 3;
            }
        }

        int res = bfs(a, b);
        if (res == -1) printf("Case #%d: impossible\n", ++T);
        else printf("Case #%d: %d\n", ++T, res);
    }
    return 0;
}

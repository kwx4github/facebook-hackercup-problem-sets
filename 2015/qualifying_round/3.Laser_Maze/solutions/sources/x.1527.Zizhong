#include <vector>
#include<cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <string>
#include <map>
#include <deque>
#include <set>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#include <cassert>
#endif
#include <ctime>
#include <queue>
#include <stack>
#include<iomanip>
#include <sstream>
#include <cmath>
#include <list>
using namespace std;

typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, double> PID;
typedef pair<string, string> PSS;
typedef pair<PII, int> PIP;

void convertMaze(vector<string>& maze, int step) {
    string dir = "^>v<";
    vector<int> lazer(128, -1);
    for(int i = 0; i < 4; i ++) lazer[dir[i]] = i;
    for(int i = 0; i < maze.size(); i ++) {
        for(int j = 0; j < maze[i].size(); j ++) {
            if (lazer[maze[i][j]] != -1) {
                maze[i][j] = dir[(lazer[maze[i][j]] + step) % 4];
            }
        }
    }
    for(int i = 0; i < maze.size(); i ++) {
        for(int j = 0; j < maze[i].size(); j ++) {
            // ^
            if (maze[i][j] == '^') {
                for(int k = i - 1; k >= 0; k --) {
                    if (maze[k][j] == '.' || maze[k][j] == '*') {
                        maze[k][j] = '*';
                    } else {
                        break;
                    }
                }
                continue;
            }
            // v
            if (maze[i][j] == 'v') {
                for(int k = i + 1; k < maze.size(); k ++) {
                    if (maze[k][j] == '.' || maze[k][j] == '*') {
                        maze[k][j] = '*';
                    } else {
                        break;
                    }
                }
                continue;
            }
            // <
            if (maze[i][j] == '<') {
                for(int k = j - 1; k >= 0; k --) {
                    if (maze[i][k] == '.' || maze[i][k] == '*') {
                        maze[i][k] = '*';
                    } else {
                        break;
                    }
                }
                continue;
            }
            // ^
            if (maze[i][j] == '^') {
                for(int k = i - 1; k >= 0; k --) {
                    if (maze[k][j] == '.' || maze[k][j] == '*') {
                        maze[k][j] = '*';
                    } else {
                        break;
                    }
                }
                continue;
            }
        }
    }

}
void printMaze(vector<string>& maze) {
    cout << string(12, '=') << endl;
    for(int i = 0; i < maze.size(); i ++) {
        cout << maze[i] << endl;
    }
    cout << string(12, '=') << endl << endl;
}
void solve(int ncase) {
    int n, m;
    cin >> n >> m;
    vector<string> maze(n);
    for(int i = 0; i < n; i ++) {
        cin >> maze[i];
    }

    PII p_start, p_goal;
    for(int i = 0; i < n; i ++) {
        for(int j = 0; j < m; j ++) {
            if (maze[i][j] == 'S') {
                p_start = PII(i, j);
                maze[i][j] = '.';
            }
            if (maze[i][j] == 'G') {
                p_goal = PII(i, j);
                maze[i][j] = '.';
            }
        }
    }
    vector<vector<string>> stepMaze(4);
    for(int i = 0; i < 4; i ++) {
        stepMaze[i] = maze;
        convertMaze(stepMaze[i], i);
        //printMaze(stepMaze[i]);
    }
    cout << "Case #" << ncase << ": ";
    /*if (stepMaze[0][p_start.first][p_start.second] != '.') {
            cout << "impossible" << endl;
            return;
    }*/

    vector<vector<vector<int>>> step(4, vector<vector<int>>(n, vector<int>(m, -1)));
    queue<PIP> q;
    q.push(PIP(p_start, 0));
    step[0][p_start.first][p_start.second] = 0;
    int d[][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    while(q.size()) {
        PIP cur = q.front();
        q.pop();
        int x = cur.first.first;
        int y = cur.first.second;
        int s = cur.second;
        if (cur.first == p_goal) {
            cout << step[s][x][y] << endl;
            return;
        }
        int ns = (s + 1) % 4;
        for(int k = 0; k < 4; k ++) {
            int nx = x + d[k][0];
            int ny = y + d[k][1];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && stepMaze[ns][nx][ny] == '.' &&
                step[ns][nx][ny] == -1) {
                    q.push(PIP(PII(nx, ny), ns));
                    step[ns][nx][ny] = 1 + step[s][x][y];
                }
        }
    }
    cout << "impossible" << endl;
}

int main() {
    ios::sync_with_stdio(false);
    //cout << std::fixed;
    //cout << setprecision(16) << endl;
#ifdef _zzz_
     freopen("laser_maze.txt", "r", stdin);
     freopen("out.txt", "w", stdout);
#endif
    int T = 1;
    cin >> T;
    //scanf("%d", &T);
    int ncase = 0;
    while(T --) {
        solve(++ ncase);
    }
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <fstream>
#include <cstring>

using namespace std;
typedef long long LL;

char a[110][110];
int dp[110][110][4];
int danger[110][110];
int n, m;

int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};

int main() {
	freopen("laser_maze.in","r",stdin);
	freopen("laser_maze.out","w",stdout);
	int tc, nt=1;
	cin>>tc;
	
	while (tc--) {
		cin>>n>>m;
		int p, q, p2, q2;
		for (int i=0;i<n;i++)
			for (int j=0;j<m;j++) {
				cin>>a[i][j];
				if (a[i][j]=='S') {
					p=i;
					q=j;
				} else if (a[i][j]=='G') {
					p2=i;
					q2=j;
				}
			}
		
		memset(danger,0,sizeof(danger));
		for (int i=0;i<n;i++)
			for (int j=0;j<m;j++)
				if (a[i][j]=='.' || a[i][j]=='S' || a[i][j]=='G') {
					for (int k=0;k<4;k++) {
						int u=i, v=j;
						while (true) {
							u+=dx[k];
							v+=dy[k];
							if (u<0 || u>=n || v<0 || v>=m) break;
							if (a[u][v]=='^') danger[i][j]|=1<<((k+2)%4);
							if (a[u][v]=='>') danger[i][j]|=1<<((k+1)%4);
							if (a[u][v]=='v') danger[i][j]|=1<<k;
							if (a[u][v]=='<') danger[i][j]|=1<<((k+3)%4);
							if (a[u][v]=='S' || a[u][v]=='G' || a[u][v]=='.') continue;
							break;
						}
					}
				}
		
		queue<int> x, y, z;
		memset(dp,-1,sizeof(dp));
		dp[p][q][0]=0;
		x.push(p);
		y.push(q);
		z.push(0);
		while (!x.empty()) {
			int u=x.front(), v=y.front(), c=z.front();
			x.pop();y.pop();z.pop();
			if (u==p2 && v==q2) continue;
			for (int k=0;k<4;k++) {
				int i=u+dx[k], j=v+dy[k];
				if (i<0 || i>=n || j<0 || j>=m) continue;
				int step=(c+1)%4;
				if (((1<<step)&danger[i][j])==0 && dp[i][j][step]==-1) {
					x.push(i);
					y.push(j);
					z.push(c+1);
					dp[i][j][step]=c+1;
				}
			}
		}
		
		int ret=-1;
		for (int i=0;i<4;i++)
			if (dp[p2][q2][i]!=-1 && (dp[p2][q2][i]<ret || ret==-1)) ret=dp[p2][q2][i];
		cout<<"Case #"<<nt++<<": ";
		if (ret==-1) cout<<"impossible"<<endl;
		else cout<<ret<<endl;
	}
}

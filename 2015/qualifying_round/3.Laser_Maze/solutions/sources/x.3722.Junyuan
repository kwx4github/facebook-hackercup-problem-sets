#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <ext/rope>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <ratio>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, double> pid;
typedef pair<double, int> pdi;
typedef tuple<int, int, int> S;

const int INF = 0x3f3f3f3f;
const int MAXN = 100;
const int MAXM = 100;
const int MOD = 1000000007;
const ll INFLL = 0x3f3f3f3f3f3f3f3fLL;
const double EPS = 1e-8;
const double PI = acos(-1.0);
const int DR[] = {-1, 0, 1, 0};
const int DC[] = {0, 1, 0, -1};

#define DEBUG(args...) fprintf(stderr, args)
#define all(c) (c).begin(), (c).end()
#define pb push_back

template<typename U, typename V> void add(U& ret, const V& val) { ret = (ll)(ret + val) % MOD; }
template<typename U, typename V> void chkmax(U& ret, const V& val) { if (ret < val) { ret = val; } }
template<typename U, typename V> void chkmin(U& ret, const V& val) { if (val < ret) { ret = val; } }
template<typename T> T gcd(T a, T b) { return a == 0 ? b : gcd(b % a, a); }
template<typename T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

int n, m, res;
char s[100][101];
bool blocked[100][100][4];
int ans[100][100][4];
pii start, goal;

bool inRange(int r, int c) {
  return r >= 0 && r < n && c >= 0 && c < m;
}

bool isLaserTurret(int r, int c) {
  return s[r][c] == '^' || s[r][c] == '>' || s[r][c] == 'v' || s[r][c] == '<';
}

void init() {
}

void input() {
  scanf("%d%d", &n, &m);
  memset(blocked, 0, sizeof(blocked));
  for (int i = 0; i < n; ++i) {
    scanf("%s", s[i]);
    for (int j = 0; j < m; ++j) {
      if (s[i][j] == 'S') {
        start = {i, j}; 
      } else if (s[i][j] == 'G') {
        goal = {i, j};
      } else if (s[i][j] == '#') {
        for (int k = 0; k < 4; ++k) {
          blocked[i][j][k] = true;
        }
      } else if (isLaserTurret(i, j)) {
        int dir = s[i][j] == '^' ? 0 : s[i][j] == '>' ? 1 : s[i][j] == 'v' ? 2 : 3;
        for (int k = 0; k < 4; ++k) {
          blocked[i][j][k] = true;
          for (int r = i + DR[dir], c = j + DC[dir]; inRange(r, c) && s[r][c] != '#' && !isLaserTurret(r, c); r += DR[dir], c += DC[dir]) {
            blocked[r][c][k] = true;
          }
          ++dir;
        }
      }
    }
  }
}

void solve() {
  memset(ans, 0x3f, sizeof(ans));
  queue<S> q;
  ans[start.first][start.second][0] = 0;
  q.push(make_tuple(start.first, start.second, 0));
  while (!q.empty()) {
    int cr = get<0>(q.front());
    int cc = get<1>(q.front());
    int cm = get<2>(q.front());
    q.pop();
    for (int i = 0; i < 4; ++i) {
      int nr = cr + DR[i];
      int nc = cc + DC[i];
      int nm = (cm + 1) % 4;
      if (inRange(nr, nc) && !blocked[nr][nc][nm]) {
        if (ans[nr][nc][nm] == INF) {
          ans[nr][nc][nm] = ans[cr][cc][cm] + 1;
          q.push(make_tuple(nr, nc, nm));
        }
      }
    }
  }
  res = INF;
  for (int i = 0; i < 4; ++i) {
    res = min(res, ans[goal.first][goal.second][i]);
  }
}


int main(int argc, char** argv) {
  ios_base::sync_with_stdio(false);

  int totalCaseNumber = 1;

  init();

  scanf("%d", &totalCaseNumber);
  for (int caseNum = 1; caseNum <= totalCaseNumber; ++caseNum) {
    input();
    solve();
    if (res != INF) {
      printf("Case #%d: %d\n", caseNum, res);
    } else {
      printf("Case #%d: impossible\n", caseNum);
    }
  }

  return 0;
}

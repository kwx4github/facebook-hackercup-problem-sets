t = int(input())

for i in range(t):
    m, n = map(int, input().split())
    maze = [list(input()) for _ in range(m)]

    locations = [[[] if maze[y][x] in '#<^>v' else [0, 1, 2, 3] for x in range(n)] for y in range(m)]

    turrets = '<^>v'

    for y in range(m):
        for x in range(n):
            if maze[y][x] == 'S':
                start = x, y

            if maze[y][x] == 'G':
                goal = x, y

            if maze[y][x] in turrets:
                offset = turrets.index(maze[y][x])

                z = x - 1
                while z >= 0 and locations[y][z]:
                    if (-offset) % 4 in locations[y][z]:
                        locations[y][z].remove((-offset) % 4)
                    z -= 1

                z = y - 1
                while z >= 0 and locations[z][x]:
                    if (1 - offset) % 4 in locations[z][x]:
                        locations[z][x].remove((1 - offset) % 4)
                    z -= 1

                z = x + 1
                while z < n and locations[y][z]:
                    if (2 - offset) % 4 in locations[y][z]:
                        locations[y][z].remove((2 - offset) % 4)
                    z += 1

                z = y + 1
                while z < m and locations[z][x]:
                    if (3 - offset) % 4 in locations[z][x]:
                        locations[z][x].remove((3 - offset) % 4)
                    z += 1


    steps = 0
    found = False
    next_moves = [start]

    while not found and next_moves:
        moves = next_moves[:]
        next_moves = []
        steps += 1

        for x, y in moves:
            if goal == (x, y):
                found = True
                break

            if x > 0 and steps % 4 in locations[y][x - 1]:
                next_moves.append((x - 1, y))
                locations[y][x - 1].remove(steps % 4)

            if y > 0 and steps % 4 in locations[y - 1][x]:
                next_moves.append((x, y - 1))
                locations[y - 1][x].remove(steps % 4)

            if x < n - 1 and steps % 4 in locations[y][x + 1]:
                next_moves.append((x + 1, y))
                locations[y][x + 1].remove(steps % 4)

            if y < m - 1 and steps % 4 in locations[y + 1][x]:
                next_moves.append((x, y + 1))
                locations[y + 1][x].remove(steps % 4)


    result = steps - 1 if found else 'impossible'
    print('Case #{}: {}'.format(i + 1, result))


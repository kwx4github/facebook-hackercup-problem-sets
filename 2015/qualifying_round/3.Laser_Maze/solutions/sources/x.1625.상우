#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
int m;
int n;
char initarr[101][101];
char arr[101][101][4];
int cache[101][101][4];
int startY;
int startX;
int endY;
int endX;
void initMap(){
	for (int i = 0; i < m; i++){
		for (int j = 0; j < n; j++){
			if (initarr[i][j] == 'v'){
				arr[i][j][0] = '#';
				arr[i][j][1] = '#';
				arr[i][j][2] = '#';
				arr[i][j][3] = '#';
				//v
				for (int k = i + 1; k < m; k++)
					arr[k][j][0] = '#';
				//<
				for (int k = j - 1; k >= 0; k--)
					arr[i][k][1] = '#';
				//^
				for (int k = i - 1; k >= 0; k--)
					arr[k][j][2] = '#';
				//>
				for (int k = j + 1; k < n; k++)
					arr[i][k][3] = '#';

			}
			if (initarr[i][j] == '<'){
				arr[i][j][0] = '#';
				arr[i][j][1] = '#';
				arr[i][j][2] = '#';
				arr[i][j][3] = '#';
				//v
				for (int k = i + 1; k < m; k++)
					arr[k][j][3] = '#';
				//<
				for (int k = j - 1; k >= 0; k--)
					arr[i][k][0] = '#';
				//^
				for (int k = i - 1; k >= 0; k--)
					arr[k][j][1] = '#';
				//>
				for (int k = j + 1; k < n; k++)
					arr[i][k][2] = '#';
			}
			if (initarr[i][j] == '^'){
				arr[i][j][0] = '#';
				arr[i][j][1] = '#';
				arr[i][j][2] = '#';
				arr[i][j][3] = '#';
				//v
				for (int k = i + 1; k < m; k++)
					arr[k][j][2] = '#';
				//<
				for (int k = j - 1; k >= 0; k--)
					arr[i][k][3] = '#';
				//^
				for (int k = i - 1; k >= 0; k--)
					arr[k][j][0] = '#';
				//>
				for (int k = j + 1; k < n; k++)
					arr[i][k][1] = '#';
			}
			if (initarr[i][j] == '>'){
				arr[i][j][0] = '#';
				arr[i][j][1] = '#';
				arr[i][j][2] = '#';
				arr[i][j][3] = '#';
				//v
				for (int k = i + 1; k < m; k++)
					arr[k][j][1] = '#';
				//<
				for (int k = j - 1; k >= 0; k--)
					arr[i][k][2] = '#';
				//^
				for (int k = i - 1; k >= 0; k--)
					arr[k][j][3] = '#';
				//>
				for (int k = j + 1; k < n; k++)
					arr[i][k][0] = '#';
			}
		}
	}
}
int findFunc(int y, int x, int type){
	if (y == endY&&x == endX){
		return 0;
	}
	int& ret = cache[y][x][type];
	if (ret != -1){
		return ret;
	}
	ret = 987654321;

	//타입 돌리기
	int ntype = type + 1;
	if (ntype > 3){
		ntype = 0;
	}
	if (y + 1 < m && arr[y + 1][x][ntype] != '#'){
		ret = min(ret, findFunc(y + 1, x, ntype) + 1);
	}
	if (y - 1 >= 0 && arr[y - 1][x][ntype] != '#'){

		ret = min(ret, findFunc(y - 1, x, ntype) + 1);
	}
	if (x + 1 < n && arr[y][x + 1][ntype] != '#'){

		ret = min(ret, findFunc(y, x + 1, ntype) + 1);
	}
	if (x - 1 >= 0 && arr[y][x - 1][ntype] != '#'){

		ret = min(ret, findFunc(y, x - 1, ntype) + 1);
	}
	return ret;
}
int solve(){
	int ret = 987654321;
	initMap();
	ret = min(ret, findFunc(startY, startX, 0));

	return ret;
}
int main(){
	int T;
	cin >> T;
	int c = 1;
	while (T--){
		cin >> m;
		cin >> n;
		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				cin >> initarr[i][j];
				arr[i][j][0] = initarr[i][j];
				arr[i][j][1] = initarr[i][j];
				arr[i][j][2] = initarr[i][j];
				arr[i][j][3] = initarr[i][j];
				if (initarr[i][j] == 'S'){
					startY = i;
					startX = j;
				}
				if (initarr[i][j] == 'G'){
					endY = i;
					endX = j;
				}
			}
		}
		memset(cache, -1, sizeof(cache));
		int result = solve();
		if (result >= 987654321){

			cout << "Case #" << c << ": " << "impossible" << endl;
		}
		else{
			cout << "Case #" << c << ": " << result << endl;
		}
		c++;
	}

	return 0;
}
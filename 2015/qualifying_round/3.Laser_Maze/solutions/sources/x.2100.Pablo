#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <set>
#include <queue>
using namespace std;

bool vis[101][101][5];
int M, N;
vector <string> G;

bool check(int x, int y, int ph)
{
	if (G[x][y] != '.' && G[x][y] != 'S' && G[x][y] != 'G') // can't go through walls
		return false;
	for (int i = y - 1; i >= 0; i--) // left
		if ( G[x][i] == '#' )
			break;
		else if (G[x][i] == '>' && ph == 0 || G[x][i] == '^' && ph == 1
			|| G[x][i] == '<' && ph == 2 || G[x][i] == 'v' && ph == 3)
			return false;
		else if (G[x][i] == 'v' || G[x][i] == '>' || G[x][i] == '<' || G[x][i] == '^')
			break;
	for (int i = y + 1; i < N; i++) // right
		if ( G[x][i] == '#' )
			break;
		else if (G[x][i] == '<' && ph == 0 || G[x][i] == 'v' && ph == 1
			|| G[x][i] == '>' && ph == 2 || G[x][i] == '^' && ph == 3)
			return false;
		else if (G[x][i] == 'v' || G[x][i] == '>' || G[x][i] == '<' || G[x][i] == '^')
			break;
	for (int i = x - 1; i >= 0; i--) // up
		if ( G[i][y] == '#' )
			break;
		else if (G[i][y] == 'v' && ph == 0 || G[i][y] == '>' && ph == 1
			|| G[i][y] == '^' && ph == 2 || G[i][y] == '<' && ph == 3)
			return false;
		else if (G[i][y] == 'v' || G[i][y] == '>' || G[i][y] == '<' || G[i][y] == '^')
			break;
	for (int i = x + 1; i < M; i++) // down
		if ( G[i][y] == '#' )
			break;
		else if (G[i][y] == '^' && ph == 0 || G[i][y] == '<' && ph == 1
			|| G[i][y] == 'v' && ph == 2 || G[i][y] == '>' && ph == 3)
			return false;
		else if (G[i][y] == 'v' || G[i][y] == '>' || G[i][y] == '<' || G[i][y] == '^')
			break;
	return true;
}

int main(void)
{
	int T;
	cin >> T;
	for (int c = 1; c <= T; c++)
	{
		cout << "Case #" << c << ": ";
		cin >> M >> N;
		for (int i = 0; i < M; i++)
			for (int j = 0; j < N; j++)
				for (int k = 0; k < 4; k++)
					vis[i][j][k] = false;
		G = vector <string>(M);
		queue <int> d;
		queue <int> X, Y, PH;
		for (int i = 0; i < M; i++)
		{
			cin >> G[i];
			for (int j = 0; j < N; j++)
				if (G[i][j] == 'S')
					X.push(i), Y.push(j), PH.push(0), d.push(0);
		}
		
		while (d.size() > 0)
		{
			int x = X.front(), y = Y.front();
			int ph = PH.front(), D = d.front();
			X.pop(), Y.pop(),PH.pop(), d.pop();
			if (G[x][y] == 'G')
			{
				cout << D << endl;
				goto done;
			}
			if (x > 0 && !vis[x-1][y][(ph+1)%4] && check(x-1,y,(ph+1)%4))
			{
				d.push(D+1), X.push(x-1), Y.push(y), PH.push((ph+1)%4);
				vis[x-1][y][1] = true;
			}
			if (x + 1 < M && !vis[x+1][y][(ph+1)%4]  && check(x+1,y,(ph+1)%4))
			{
				d.push(D+1), X.push(x+1), Y.push(y), PH.push((ph+1)%4);
				vis[x+1][y][1] = true;
			}
			if (y > 0 && !vis[x][y-1][(ph+1)%4]  && check(x,y-1,(ph+1)%4))
			{
				d.push(D+1), X.push(x), Y.push(y-1), PH.push((ph+1)%4);
				vis[x][y-1][1] = true;
			}
			if (y + 1 < N && !vis[x][y+1][(ph+1)%4]  && check(x,y + 1,(ph+1)%4))
			{
				d.push(D+1), X.push(x), Y.push(y+1), PH.push((ph+1)%4);
				vis[x][y+1][1] = true;
			}
		}
		cout << "impossible" << endl;
		done:;
	}
}

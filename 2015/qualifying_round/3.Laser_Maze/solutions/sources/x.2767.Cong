#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <memory>
#include <set>
#include <vector>
#include <unordered_map>
#include <cstdio>
using namespace std;
#define maxn 105
char mp[maxn][maxn];
int f[maxn][maxn][4];
int n, m;
bool mark[maxn][maxn][4], flag[maxn][maxn], tg[maxn][maxn][4];
int dir[4][2] = {
    {
        0, -1
    }, {
        -1, 0
    }, {
        0, 1
    }, {
        1, 0
    }
};
struct Nodes {
    int x, y, to, step;
}
ps, pg;
queue < Nodes > q;
int res;
int check(int x, int y) {
    if (x >= 0 && x < n && y >= 0 && y < m) return 1;
    return 0;
}
void spfa() {
    memset(tg, false, sizeof(tg));
    memset(f, -1, sizeof(f));
    while (!q.empty()) q.pop();
    int i;
    ps.to = ps.step = 0;
    q.push(ps);
    tg[ps.x][ps.y][ps.to] = true;
    f[ps.x][ps.y][ps.to] = 0;
    while (!q.empty()) {
        Nodes now = q.front();
        //	printf("%d %d %d %d\n",now.x,now.y,now.to,f[now.x][now.y][now.to]);
        q.pop();
        tg[now.x][now.y][now.to] = false;
        for (i = 0; i < 4; i++) {
            Nodes nxt;
            nxt.x = now.x + dir[i][0];
            nxt.y = now.y + dir[i][1];
            nxt.to = (now.to + 1) % 4;
            nxt.step = f[now.x][now.y][now.to] + 1;
            if (!check(nxt.x, nxt.y) || mp[nxt.x][nxt.y] == '#' || mark[nxt.x][nxt.y][nxt.to]) continue;
            if (f[nxt.x][nxt.y][nxt.to] == -1 || nxt.step < f[nxt.x][nxt.y][nxt.to]) {
                f[nxt.x][nxt.y][nxt.to] = nxt.step;
                if (!tg[nxt.x][nxt.y][nxt.to]) {
                    tg[nxt.x][nxt.y][nxt.to] = true;
                    q.push(nxt);
                }
            }
        }
    }
}


void cal(int x, int y, int dr) {
    for (int i = 0; i < 4; i++) {
        int to = (dr + i) % 4;
        int xx = x, yy = y;
        mark[xx][yy][i] = true;
        xx += dir[to][0];
        yy += dir[to][1];
        while (check(xx, yy)) {
            if (flag[xx][yy] || mp[xx][yy] == '#') break;
            mark[xx][yy][i] = true;
            //	printf("%d %d %d\n",xx,yy,i);
            //	if(xx==pg.x&&yy==pg.y)break;
            xx += dir[to][0];
            yy += dir[to][1];
        }
    }
}
int main() {
    int t, cas;
    scanf("%d", & t);
    for (cas = 1; cas <= t; cas++) {
        scanf("%d%d", & n, & m);
        for (int i = 0; i < n; i++) {
            scanf("%s", mp[i]);
        }
        memset(mark, false, sizeof(mark));
        memset(flag, false, sizeof(flag));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mp[i][j] == 'S') {
                    ps.x = i, ps.y = j;
                }
                if (mp[i][j] == 'G') {
                    pg.x = i, pg.y = j;
                }
                if (mp[i][j] == '<') {
                    cal(i, j, 0);
                    flag[i][j] = true;
                }
                if (mp[i][j] == '^') {
                    cal(i, j, 1);
                    flag[i][j] = true;
                }
                if (mp[i][j] == '>') {
                    cal(i, j, 2);
                    flag[i][j] = true;
                }
                if (mp[i][j] == 'v') {
                    cal(i, j, 3);
                    flag[i][j] = true;
                }
            }
        }
        printf("Case #%d: ", cas);

        spfa();
        res = -1;
        for (int i = 0; i < 4; i++) {
            if (f[pg.x][pg.y][i] == -1) continue;
            if (res == -1 || f[pg.x][pg.y][i] < res) {
                res = f[pg.x][pg.y][i];
            }
        }
        if (res == -1) {
            printf("impossible\n");
        } else printf("%d\n", res);
    }
    return 0;
}


#include<bits/stdc++.h>

#define s(a) scanf("%d",&a)
#define ss(a) scanf("%s",a)

#define MP           make_pair
#define PB           push_back
#define REP(i, n)    for(int i = 0; i < n; i++)
#define INC(i, a, b) for(int i = a; i <= b; i++)
#define DEC(i, a, b) for(int i = a; i >= b; i--)
#define CLEAR(a)     memset(a, 0, sizeof a)

using namespace std;

typedef long long          LL;
typedef unsigned long long ULL;
typedef vector<int>        VI;
typedef pair<int, int>     II;
typedef vector<II>         VII;

char inp[105][105];
int m,n;
int type[256];
bool block[105][105][4];
bool vis[105][105][4];
int dist[105][105][4];
struct trip {
      int a,b,c;
      trip(){}
      trip(int a,int b,int c):a(a), b(b), c(c) {}
};
inline bool isfree(int x,int y)
{
      if(inp[x][y]=='.' || inp[x][y]=='S' || inp[x][y]=='G')
            return true;
      return false;
}
void shoot(int type,int xx,int yy,int mul)
{
      if(type==0) DEC(i,yy-1,0)     if(isfree(xx,i))     block[xx][i][mul] = true; else break;
      if(type==1) DEC(i,xx-1,0)     if(isfree(i,yy))     block[i][yy][mul] = true; else break;
      if(type==2) INC(i,yy+1,n-1)   if(isfree(xx,i))     block[xx][i][mul] = true; else break;
      if(type==3) INC(i,xx+1,m-1)   if(isfree(i,yy))     block[i][yy][mul] = true; else break;
}
void fun()
{
      CLEAR(block);
      CLEAR(vis);
      CLEAR(dist);
      type['<'] = 0; type['^'] = 1; type['>'] = 2; type['v'] = 3;
      trip S,G;
      REP(i,m)
      REP(j,n)
      {
            if(inp[i][j]=='S')
                  S = trip(i,j,0);
            else if(inp[i][j]=='G')
                  G = trip(i,j,0);
            else if(inp[i][j]!='.' && inp[i][j]!='#')
            {
                  shoot((type[inp[i][j]]+0)%4,i,j,0);
                  shoot((type[inp[i][j]]+1)%4,i,j,1);
                  shoot((type[inp[i][j]]+2)%4,i,j,2);
                  shoot((type[inp[i][j]]+3)%4,i,j,3);
            }
      }
      int dx[4] = {1,0,-1,0};
      int x,y,xx,yy,val;
      int dy[4] = {0,1,0,-1};
      trip curr;
      queue<trip> q;
      q.push(S);
      vis[S.a][S.b][S.c] = true;
      dist[S.a][S.b][S.c] = 0;
      while(!q.empty())
      {
            curr = q.front();
            x = curr.a;
            y = curr.b;
            val = curr.c;
            if(x== G.a && y== G.b)
            {
                  printf("%d\n",dist[curr.a][curr.b][curr.c]);
                  return;
            }
            q.pop();
            REP(i,4)
            {
                  xx = x+dx[i];
                  yy = y+dy[i];
                  if(xx>=0 && xx<m && yy>=0 && yy<n && isfree(xx,yy) && !block[xx][yy][(val+1)%4] && !vis[xx][yy][(val+1)%4])
                  {
                        q.push(trip(xx,yy,(val+1)%4));
                        dist[xx][yy][(val+1)%4] = dist[x][y][val]+1;
                        vis[xx][yy][(val+1)%4] = true;
                  }
            }
      }
      printf("impossible\n");

      /*REP(i,m)
      {
      REP(j,n)
      {
            int temp = 1e9;
            REP(k,4)
                  if(vis[i][j][k])
                        temp = min(temp,dist[i][j][k]);
            printf("%d ",temp);
      }printf("\n");}*/
}
int main()
{
      int t;
      s(t);
      REP(tt,t)
      {
            s(m);s(n);
            REP(i,m)
                  ss(inp[i]);
            printf("Case #%d: ",tt+1);
            fun();
      }
      return 0;
}

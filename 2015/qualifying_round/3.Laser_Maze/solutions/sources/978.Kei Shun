import java.util.*;

public class C {
public static void main(String [] args) {
	Scanner scanner = new Scanner(System.in);
	int nCase = Integer.parseInt(scanner.next());
	String turret = "<^>v";
	int[] dx = new int[]{0, 0, 1, -1};
	int[] dy = new int[]{1, -1, 0, 0};
	
	for (int nc = 1; nc <= nCase; nc++) {
		int M = Integer.parseInt(scanner.next());
		int N = Integer.parseInt(scanner.next());
		
		int startX = -1;
		int startY = -1;
		int goalX = -1;
		int goalY = -1;
		char[][][] maze = new char[4][M][N];
		// create maze for 4 phase
		for (int i = 0; i < M; i++) {
			String row = scanner.next();
			for (int j = 0; j < N; j++) {
				int dir = -1;
				switch (row.charAt(j)) {
					case '.':
					case '#':
						for (int k = 0; k < 4; k++)
							maze[k][i][j] = row.charAt(j);
						break;
					case 'S':
						startX = i;
						startY = j;
						for (int k = 0; k < 4; k++)
							maze[k][i][j] = '.';
						break;
					case 'G':
						goalX = i;
						goalY = j;
						for (int k = 0; k < 4; k++)
							maze[k][i][j] = '.';
						break;
					case '<':
						dir = 0;
						break;
					case '^':
						dir = 1;
						break;
					case '>':
						dir = 2;
						break;
					case 'v':
						dir = 3;
						break;
				}
				if (dir > -1) {
					for (int k = 0; k < 4; k++) {
						maze[k][i][j] = turret.charAt(dir);
						dir = (dir + 1) % 4;
					}
				}
			}
		}
		
		// create laser trace
		for (int k = 0; k < 4; k++)
		for (int i = 0; i < M; i++)
		for (int j = 0; j < N; j++) {
			boolean isTurret = true;
			int di = 0;
			int dj = 0;
			switch (maze[k][i][j]) {
				case '<':
					dj = -1;
					break;
				case '^':
					di = -1;
					break;
				case '>':
					dj = 1;
					break;
				case 'v':
					di = 1;
					break;
				default:
					isTurret = false;
					break;
			}
			
			if (isTurret) {
				int cx = i + di;
				int cy = j + dj;
				while (0 <= cx && cx < M && 0 <= cy && cy < N && (maze[k][cx][cy] == '.' || maze[k][cx][cy] == 'L')) {
					maze[k][cx][cy] = 'L';
					cx += di;
					cy += dj;
				}
			}
		}
		
		/*
		for (int k = 0; k < 4; k++) {
			System.out.println();
			for (int i = 0; i < M; i++) {
				for (int j = 0; j < N; j++)
					System.out.print(maze[k][i][j]);
				System.out.println();
			}
		}
		*/
		int ans = -1;
		boolean[][][] reached = new boolean[4][M][N];		
		reached[0][startX][startY] = true;
		LinkedList<Cell> queue = new LinkedList<Cell>();
		queue.add(new Cell(0, startX, startY));
		
		while (queue.size() > 0) {
			Cell current = queue.remove();
			//System.out.println("" + current.time + " " + current.x + " " + current.y);
			if (current.x == goalX && current.y == goalY) {
				ans = current.time;
				break;
			} else {
				int newTime = current.time + 1;
				int phase = newTime % 4;
				for (int k = 0; k < 4; k++) {
					int cx = current.x + dx[k];
					int cy = current.y + dy[k];
					if (0 <= cx && cx < M && 0 <= cy && cy < N && maze[phase][cx][cy] == '.' && !reached[phase][cx][cy]) {
						//System.out.println("Making" + newTime + " " + cx + " " + cy);
						reached[phase][cx][cy] = true;
						queue.add(new Cell(newTime, cx, cy));
					}
				}
			}
		}
		
		if (ans > 0)
			System.out.println("Case #" + nc + ": " + ans);
		else
			System.out.println("Case #" + nc + ": impossible");
	}
}
}

class Cell {
	int time;
	int x;
	int y;
	public Cell(int i, int j, int k) {
		time = i;
		x = j;
		y = k;
	}
}
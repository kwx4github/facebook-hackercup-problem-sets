#include<bits/stdc++.h>

#define NMAX 1005
#define MAXIM 1000000000

using namespace std;

queue<tuple<int, int, int> > q;
char a[NMAX][NMAX];
int b[NMAX][NMAX][5];
int viz[NMAX][NMAX][5];

int main()
{
    FILE *fin = fopen("input.txt", "r");
    FILE *fout = fopen("output.txt", "w");

    int t, m, n;
    char x;
    pair<int, int> s;
    pair<int, int> g;

    fscanf(fin, "%d", &t);

    for(int r = 0; r < t; ++r) {
        fscanf(fin, "%d %d\n", &m, &n);
        for(int i = 0; i < m; ++i)
            for(int j = 0; j < n; ++j)
                a[i][j] = '#';

        for(int i = 0; i < m; ++i)
            for(int j = 0; j < n; ++j)
                for(int w = 0; w <= 4; ++w) {
                    b[i][j][w] = 0;
                    viz[i][j][w] = 0;
                }
        //cout<<m<<" "<<n;
        for(int i= 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                fscanf(fin, "%c", &x);
                a[i][j] = x;
                if(x == 'S') {
                    a[i][j] = '.';
                    s = make_pair(i, j);
                }
                if(x == 'G') {
                    a[i][j] = '.';
                    g = make_pair(i, j);
                }
            }
            fscanf(fin, "\n");
        }
        char E, V, S, N;

        for(int i = 0; i < m; ++i) {
            E = '0';
            for(int j = 0; j < n; ++j) {
                if(a[i][j] != '.' && a[i][j] != '#')
                    E = a[i][j];
                if(a[i][j] == '#')
                    E = '0';
                if(a[i][j] == '.' && E != '0') {
                    if(E == '^')
                        b[i][j][2] = -1;
                    if(E == '>')
                        b[i][j][1] = -1;
                    if(E == 'v')
                        b[i][j][4] = -1;
                    if(E == '<')
                        b[i][j][3] = -1;
                }
                if(a[i][j] != '.')
                    for(int p = 1; p <= 4; ++p)
                        b[i][j][p] = -1;
            }
        }
     for(int i = 0; i < m; ++i) {
            V = '0';
            for(int j = n - 1; j >= 0; --j) {
                if(a[i][j] != '.' && a[i][j] != '#')
                    V = a[i][j];
                if(a[i][j] == '#')
                    V = '0';
                if(a[i][j] == '.' && V != '0') {
                    if(V == '^')
                        b[i][j][4] = -1;
                    if(V == '>')
                        b[i][j][3] = -1;
                    if(V == 'v')
                        b[i][j][2] = -1;
                    if(V == '<')
                        b[i][j][1] = -1;
                }
                if(a[i][j] != '.')
                    for(int p = 1; p <= 4; ++p)
                        b[i][j][p] = -1;
            }
     }
      for(int j = 0; j < n; ++j){
            N = '0';
            for(int i = 0; i < m; ++i) {
                if(a[i][j] != '.' && a[i][j] != '#')
                    N = a[i][j];
                if(a[i][j] == '#')
                    N = '0';
                if(a[i][j] == '.' && N != '0') {
                    if(N == '^')
                        b[i][j][3] = -1;
                    if(N == '>')
                        b[i][j][2] = -1;
                    if(N == 'v')
                        b[i][j][1] = -1;
                    if(N == '<')
                        b[i][j][4] = -1;
                }
                if(a[i][j] != '.')
                    for(int p = 1; p <= 4; ++p)
                        b[i][j][p] = -1;
            }
      }

       for(int j = 0; j <n; ++j) {
                S = '0';
            for(int i = m - 1; i >= 0; --i) {
                if(a[i][j] != '.' && a[i][j] != '#')
                    S = a[i][j];
                if(a[i][j] == '#')
                    S = '0';
                if(a[i][j] == '.' && S != '0') {
                    if(S == '^')
                        b[i][j][1] = -1;
                    if(S == '>')
                        b[i][j][4] = -1;
                    if(S == 'v')
                        b[i][j][3] = -1;
                    if(S == '<')
                        b[i][j][2] = -1;
                }
                if(a[i][j] != '.')
                    for(int p = 1; p <= 4; ++p)
                        b[i][j][p] = -1;
            }
    }
        while(!q.empty())
            q.pop();
        q.push(make_tuple(s.first, s.second, 1));
        viz[s.first][s.second][1] = 1;
        while(!q.empty()) {
            int px = get<0>(q.front());
            int py = get<1>(q.front());
            int pmod = get<2>(q.front());
            int nextmom = pmod + 1;
            if(nextmom == 5)
                nextmom -= 4;
            if(py > 0) {
                if(viz[px][py - 1][nextmom] == 0 && b[px][py - 1][nextmom] != -1) {
                    q.push(make_tuple(px, py - 1, nextmom));
                    viz[px][py - 1][nextmom] = viz[px][py][pmod] + 1;
                }
            }
            if(py + 1 < n) {
                if(viz[px][py + 1][nextmom] == 0 && b[px][py + 1][nextmom] != -1) {
                    q.push(make_tuple(px, py + 1, nextmom));
                    viz[px][py + 1][nextmom] = viz[px][py][pmod] + 1;
                }
            }
            if(px > 0) {
                if(viz[px - 1][py][nextmom] == 0 && b[px - 1][py][nextmom] != -1) {
                    q.push(make_tuple(px - 1, py, nextmom));
                    viz[px - 1][py][nextmom] = viz[px][py][pmod] + 1;
                }
            }
            if(px + 1 < m) {
                if(viz[px + 1][py][nextmom] == 0 && b[px + 1][py][nextmom] != -1) {
                    q.push(make_tuple(px + 1, py, nextmom));
                    viz[px + 1][py][nextmom] = viz[px][py][pmod] + 1;
                }
            }
            q.pop();

            }
            int sol = MAXIM;
            for(int w = 1; w <= 4; ++w) {
                if ( viz[g.first][g.second][w] - 1 != -1)
                    sol= min(sol, viz[g.first][g.second][w] - 1);
                //cout << viz[g.first][g.second][w] - 1 << " ";
                    }
            if(sol == MAXIM)
                fprintf(fout, "Case #%d: impossible\n", r + 1);
            else
                fprintf(fout, "Case #%d: %d\n", r + 1, sol);
        }




}

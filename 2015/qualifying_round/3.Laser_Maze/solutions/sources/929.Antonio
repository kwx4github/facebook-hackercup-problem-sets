#include <iostream>
#include<string>
#include<algorithm>
#include<queue>
#include<fstream>
using namespace std;
struct iii{
    int px,py,dist;
};;
struct bbbb{
    bool pos[4];
};
string str;
bbbb mat[105][105], usa[105][105];
char maze[105][105];
int i,j,m,n,cases,ind,iS,jS,iG,jG,res;
bool bol;
void init(){
    int i,j,t;
    for (i=1; i<=m; i++){
        for (j=1; j<=n; j++){
            for (t=0; t<4; t++){
                mat[i][j].pos[t]=usa[i][j].pos[t]=false;
            }
        }
    }
}
void load(){
    int t,x,y;
    int vecx [] = {-1,0,1,0},vecy [] = {0,1,0,-1};
    for (t=0; t<4; t++){
        x=i;
        y=j;
        do{
            x+=vecx[t];
            y+=vecy[t];
            if (maze[x][y]=='.')
                mat[x][y].pos[str[t]-'0']=true;
        }while(maze[x][y]=='.');
    }
}
void bfs(){
    queue <iii> ass;
    iii aux,aux2;
    aux.px=iS; aux.py=jS; aux.dist=0;
    ass.push(aux);
    bol=false;
    usa[iS][jS].pos[0]=true;
    int u,v;
    while (!ass.empty()){
        aux=ass.front();
        ass.pop();
        if (aux.px==iG && aux.py==jG){
            bol=true;
            res=aux.dist;
            break;
        }
        for (u=-1; u<=1; u++){
            for (v=-1; v<=1; v++){
                if (u*v==0 && u!=v &&  maze[aux.px+u][aux.py+v]=='.' &&!mat[aux.px+u][aux.py+v].pos[(aux.dist+1)%4] && !usa[aux.px+u][aux.py+v].pos[(aux.dist+1)%4]){
                    usa[aux.px+u][aux.py+v].pos[(aux.dist+1)%4]=true;
                    aux2.px=aux.px+u; aux2.py=aux.py+v; aux2.dist=aux.dist+1;
                    ass.push(aux2);
                }
            }
        }
    }
}
int main()
{
    ofstream fout("laser_maze.out");
    ifstream fin("laser_maze.in");
    fin>>cases;
    for (ind=1; ind<=cases; ind++){
        fin>>m>>n;
        for (i=0; i<=m+1; i++){
            for (j=0; j<=n+1; j++){
                if (i==0 || i==m+1 || j==0 || j==n+1){
                    maze[i][j]='#';
                }else{
                    fin>>maze[i][j];
                    if (maze[i][j]=='S'){iS=i; jS=j; maze[i][j]='.';}
                    if (maze[i][j]=='G'){iG=i; jG=j; maze[i][j]='.';}
                }
            }
        }
        if (ind>1) init();
        for (i=1; i<=m; i++){
            for (j=1; j<=n; j++){
                switch (maze[i][j]){
                    case '^':
                    str="0123";
                    break;
                    case '>':
                    str="3012";
                    break;
                    case 'v':
                    str="2301";
                    break;
                    case '<':
                    str="1230";
                    break;
                    default:
                    str="";
                }
                if (str!=""){
                    load();
                }
            }
        }
        bfs();
        fout<<"Case #"<<ind<<": ";
        if (bol){
            fout<<res<<endl;
        }else{
            fout<<"impossible"<<endl;
        }
    }
    return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define rep(i, a, b) for(int i = (a); i < int(b); ++i)
#define rrep(i, a, b) for(int i = (a) - 1; i >= int(b); --i)
#define trav(it, v) for(typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it)
#define all(v) (v).begin(), (v).end()

typedef double fl;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;

string field[105];
priority_queue<pair<int, pair<pair<int, int>, int> > > pq;
int dx[4]={0,-1,0,1};
int dy[4]={-1,0,1,0};
int M, N;
bool bad[105][105][4];
int dir[105][105];
int dis[105][105][4];
bool vis[105][105][4];

bool inside(int x, int y){
	if(x < 0 || y < 0 || x >= M || y >= N)
		return 0;
	return 1;
}

void solve(int t){
	while(!pq.empty())
		pq.pop();
	cin >> M >> N;
	rep(i,0,M)
		rep(j,0,N){
			rep(k,0,4){
				bad[i][j][k]=0;
				vis[i][j][k]=0;
				dis[i][j][k]=0;
			}
			dir[i][j]=0;
		}
	rep(i,0,M){
		cin >> field[i];
	}
	rep(i,0,M){
		rep(j,0,N){
			dir[i][j]=-1;
			if(field[i][j] == '<')dir[i][j]=0;
			if(field[i][j] == '^')dir[i][j]=1;
			if(field[i][j] == '>')dir[i][j]=2;
			if(field[i][j] == 'v')dir[i][j]=3;
			for(int k=0; k < 4; ++k)dis[i][j][k]=1000000000;
			if(field[i][j] == 'S'){
				dis[i][j][0]=0;
				pq.push(make_pair(0, make_pair(make_pair(i, j), 0)));
			}
			if(dir[i][j] != -1){
				for(int k=0; k < 4; ++k){
					int x=i, y=j;
					x+=dx[(dir[i][j]+k)%4];
					y+=dy[(dir[i][j]+k)%4];
					while(inside(x,y) && (field[x][y] == '.' || field[x][y] == 'S' || field[x][y] == 'G')){
						bad[x][y][k]=1;
						x+=dx[(dir[i][j]+k)%4];
						y+=dy[(dir[i][j]+k)%4];
					}
				}
			}
		}
	}
	while(!pq.empty()){
		int i=pq.top().second.first.first;
		int j=pq.top().second.first.second;
		int time=pq.top().second.second;
		pq.pop();
		if(field[i][j] == 'G'){
			cout << "Case #" << t << ": ";
			cout << dis[i][j][time];
			cout << endl;
			return;
		}
		if(vis[i][j][time])
			continue;
		vis[i][j][time]=1;
		for(int k=0; k < 4; ++k){
			int x=i+dx[k];
			int y=j+dy[k];
			if(!inside(x,y))
				continue;
			int tp=(time+1)%4;
			if(bad[x][y][tp])
				continue;
			if(field[x][y] != '.' && field[x][y] != 'S' && field[x][y] != 'G')
				continue;
			dis[x][y][tp]=min(dis[x][y][tp],dis[i][j][time]+1);
			pq.push(make_pair(-dis[x][y][tp], make_pair(make_pair(x,y),tp)));

		}
	}
	cout << "Case #" << t << ": impossible";
	cout << endl;
}

int main(){
	int T;
	cin >> T;
	for(int t=1; t <= T; ++t){
		solve(t);
	}
}

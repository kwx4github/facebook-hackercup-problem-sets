//============================================================================
// Name        : ACM.cpp
// Author      : felix
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//#pragma comment(linker,"/STACK:16777216") /*16Mb*/
//#pragma comment(linker,"/STACK:33554432") /*32Mb*/
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <cmath>
#include <list>
#include <iomanip>
#include <set>
#include <map>
#include <sstream>
#include <string.h>
#include <fstream>
#include <bitset>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

#define FOR(i,a,b) for(int (i)=(a);i<(b);++(i))
#define RFOR(i,a,b) for(int (i)=(a)-1;(i)>=(b);--(i))
#define For(i,a,b) for(int (i)=(a);i<(b);++(i))
#define FoR(i,a,b) for(int (i)=(a)-1;(i)>=(b);--(i))
#define MP make_pair
#define I insert
#define mod 1000000007
#define INF 1000000001
#define PB push_back
#define x0 sdfhrthrth
#define x1 fdhttrlhn
#define y0 kihrbdb
#define y1 ugvrrtgtrg
#define EPS 1e-7
#define X first
#define Y second

int t, n, m;
string s[100];
bool g[100][100][4];
int d[100][100][4];
map<char, int> laser;
int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 };
bool in_bounds(int x, int y) {
	return x >= 0 && y >= 0 && x < n && y < m;
}
void build_maps() {
	memset(g,0,sizeof(g));
	FOR(i,0,n)
		FOR(j,0,m)
			if (s[i][j] != '.' && s[i][j] != 'S' && s[i][j] != 'G')
				FOR(k,0,4)
					g[i][j][k] = 1;
	FOR(i,0,n)
		FOR(j,0,m)
		{
			if (laser.count(s[i][j])) {
				FOR(k,0,4)
					for (int map_num = (k - laser[s[i][j]] + 4) % 4, x = i
							+ dx[k], y = j + dy[k];
							in_bounds(x, y) && g[x][y][map_num] == 0; x +=
									dx[k], y += dy[k])
						g[x][y][map_num] = 1;
			}
		}
/*	FOR(k,0,4)
	{
		FOR(i,0,n)
		{
			FOR(j,0,m)
				cout << g[i][j][k];
			cout << "\n";
		}
		cout << "---------------------------\n";
	}*/
}

void bfs(int sx, int sy) {
	memset(d,0,sizeof(d));
	d[sx][sy][0] = 1;
	queue<pair<PII, int> > q;
	q.push( { { sx, sy }, 0 });
	while (q.size()) {
		pair<PII, int> v = q.front();
		q.pop();
		int x = v.X.X, y = v.X.Y, dr = v.Y;
		int tdr = (dr + 1) % 4;
		FOR(k,0,4)
		{
			int tx = x + dx[k], ty = y + dy[k];
			if (in_bounds(tx, ty) && g[tx][ty][tdr] == 0 && !d[tx][ty][tdr]) {
				q.push( { { tx, ty }, tdr });
				d[tx][ty][tdr] = d[x][y][dr] + 1;
			}
		}
	}
}

int main() {
freopen("laser_maze.txt", "r", stdin);freopen("output.txt", "w", stdout);

	laser['>'] = 0;
	laser['v'] = 1;
	laser['<'] = 2;
	laser['^'] = 3;
	cin >> t;
	FOR(ttt,0,t)
	{
		cin >> n >> m;
		FOR(i,0,n)
		{
			cin >> s[i];
		}

		int sx, sy, fx, fy;
		FOR(i,0,n)
			FOR(j,0,m)
			{
				if (s[i][j] == 'S')
					sx = i, sy = j;
				if (s[i][j] == 'G')
					fx = i, fy = j;
			}
		build_maps();
		bfs(sx, sy);
		cout << "Case #" << ttt + 1 << ": ";
		int ok = INF;
		FOR(i,0,4)
			if (d[fx][fy][i] > 0)
				ok = min(ok, d[fx][fy][i]);
		if (ok == INF)
			cout << "impossible";
		else
			cout << ok - 1;
		cout << "\n";
	}
	return 0;
}

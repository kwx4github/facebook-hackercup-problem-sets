package qualif2015;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class LaserMaze {
	
	static class Point {
		int x;
		int y;
		int step;
		
		public Point(int x, int y, int step) {
			this.x = x;
			this.y = y;
			this.step = step;
		}
	}
	
	// Direction: 0 - left, 1 - up, 2 - right, 3 - down
	// Phases: 0 - as is, 1 - 90 clockwise, 2 - 180 clockwise, 3 - 270 clockwise 
	public static int getDirection(char c, int phase) {
		int dir = 0;
		switch (c) {
			case '<' :   
				dir = 0;
				break;			
			case '^':
				dir = 1;
				break;
			case '>':
				dir = 2;
				break;
			case 'v':
				dir = 3;
				break;
		}
		
		return ( (dir + phase) % 4 );		
	}
	
	public static boolean isFreePath(char c) {
		return c=='.' || c=='G' || c=='S';
	}
	
	public static boolean isGoal(char c) {
		return c=='G';
	}
	
	public static boolean[][] getTurretPhase (int phase, int M, int N, char[][]maze) {
		boolean[][] turretPhase = new boolean[M][N];
		
		for (int i=0;i<M;i++) {
			for (int j=0;j<N;j++) {
				if (maze[i][j] == '<' || maze[i][j] == '^' || maze[i][j] == '>' || maze[i][j] == 'v') {
					int dir = getDirection(maze[i][j], phase);
					
					if (dir == 0) { // left
						int x = j-1;
						while (x>=0 && isFreePath(maze[i][x])) turretPhase[i][x--] = true;
					} else if (dir == 1) { // up
						int x = i-1;
						while (x>=0 && isFreePath(maze[x][j])) turretPhase[x--][j] = true;
					} else if (dir == 2) { // right
						int x = j+1;
						while (x<N && isFreePath(maze[i][x])) turretPhase[i][x++] = true;
					} else if (dir == 3) { // down
						int x = i+1;
						while (x<M && isFreePath(maze[x][j])) turretPhase[x++][j] = true;
					}
					
				}
			}
		}
		
		return turretPhase;
	}
	
	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(new File("/Users/yfo/Downloads/C.txt"));
		PrintWriter out = new PrintWriter(new File("/Users/yfo/Downloads/C.out.txt"));

		int T = Integer.parseInt(in.nextLine());
		for (int t = 0; t < T; t++) {
			int M = in.nextInt();
			int N = in.nextInt();
			in.nextLine();
			
			char[][] maze = new char[M][N];
			String line;
			int xs = 0, ys = 0;
			for (int i=0;i<M;i++) {
				line = in.nextLine();
				for (int j=0;j<N;j++) {
					maze[i][j] = line.charAt(j);
					if (maze[i][j] == 'S') {
						xs = i;
						ys = j;
					}
				}
			}

			boolean[][][] isTurretPhase = new boolean[4][][];
			isTurretPhase[0] = getTurretPhase(0, M, N, maze);
			isTurretPhase[1] = getTurretPhase(1, M, N, maze);
			isTurretPhase[2] = getTurretPhase(2, M, N, maze);
			isTurretPhase[3] = getTurretPhase(3, M, N, maze);
					
			boolean[][][] visited = new boolean[M][N][4]; // 3rd index is phase
			
			// BFS
			int step = 0, ind = 0;
			boolean found = false;
			List<Point> queue = new ArrayList<Point>();
			queue.add(new Point(xs, ys, 0));
			visited[xs][ys][0] = true;
			while (true) {
				if (ind>=queue.size()) break;
				Point point = queue.get(ind);
				step = point.step + 1;
				
				// Check left
				if (point.y>0 && isFreePath(maze[point.x][point.y-1]) && 
						!visited[point.x][point.y-1][step%4]  &&
						!isTurretPhase[step%4][point.x][point.y-1]) {
					queue.add(new Point(point.x, point.y-1, step));
					visited[point.x][point.y-1][step%4] = true;
					if (isGoal(maze[point.x][point.y-1])) {
						found = true;
						break;
					}
				}

				// Check right
				if (point.y<N-1 && isFreePath(maze[point.x][point.y+1]) && 
						!visited[point.x][point.y+1][step%4]  &&
						!isTurretPhase[step%4][point.x][point.y+1]) {
					queue.add(new Point(point.x, point.y+1, step));
					visited[point.x][point.y+1][step%4] = true;
					if (isGoal(maze[point.x][point.y+1])) {
						found = true;
						break;
					}
				}

				// Check up
				if (point.x>0 && isFreePath(maze[point.x-1][point.y]) && 
						!visited[point.x-1][point.y][step%4]  &&
						!isTurretPhase[step%4][point.x-1][point.y]) {
					queue.add(new Point(point.x-1, point.y, step));
					visited[point.x-1][point.y][step%4] = true;
					if (isGoal(maze[point.x-1][point.y])) {
						found = true;
						break;
					}
				}

				// Check down
				if (point.x<M-1 && isFreePath(maze[point.x+1][point.y]) && 
						!visited[point.x+1][point.y][step%4]  &&
						!isTurretPhase[step%4][point.x+1][point.y]) {
					queue.add(new Point(point.x+1, point.y, step));
					visited[point.x+1][point.y][step%4] = true;
					if (isGoal(maze[point.x+1][point.y])) {
						found = true;
						break;
					}
				}				
				
				ind++;
			}
			
			if (found) out.println("Case #"+(t+1)+": "+ step);
			else out.println("Case #"+(t+1)+": impossible");
			
		}
		
		in.close();
		out.close();
	}
}

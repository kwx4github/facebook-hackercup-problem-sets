#include <cstdio>
#include <iostream>
#include <queue>
using namespace std;

typedef pair<pair<int, int>, int> state;
#define mp make_pair

int main() {
    freopen("laser_maze.txt", "r", stdin);
    freopen("laser_maze.out", "w", stdout);

    int dr[] = {  0,  0, -1,  1 };
    int dc[] = { -1,  1,  0,  0 };

    int T, M, N, sr, sc, gr, gc;
    cin >> T;
    for (int t = 1; t <= T; t++) {
        char maze[102][102];
        bool safe[102][102][4] = {};
        bool v[102][102][4] = {};
        int moves = 0;
        queue<state> q;

        cin >> M >> N;
        for (int r = 1; r <= M; r++) {
            for (int c = 1; c <= N; c++) {
                cin >> maze[r][c];
                safe[r][c][0] = safe[r][c][1] = safe[r][c][2] = safe[r][c][3] = true;
                if (maze[r][c] == 'S') {
                    sr = r;
                    sc = c;
                    maze[r][c] = '.';
                } else if (maze[r][c] == 'G') {
                    gr = r;
                    gc = c;
                    maze[r][c] = '.';
                }
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int r = 1; r <= M; r++) {
                for (int c = 1; c <= N; c++) {
                    if (maze[r][c] == '^') {
                        for (int lr = r; --lr > 0 && maze[lr][c] == '.';) {
                            safe[lr][c][i] = false;
                        }
                        maze[r][c] = '>';
                    } else if (maze[r][c] == '>') {
                        for (int lc = c; ++lc <= N && maze[r][lc] == '.';) {
                            safe[r][lc][i] = false;
                        }
                        maze[r][c] = 'v';
                    } else if (maze[r][c] == 'v') {
                        for (int lr = r; ++lr <= M && maze[lr][c] == '.';) {
                            safe[lr][c][i] = false;
                        }
                        maze[r][c] = '<';
                    } else if (maze[r][c] == '<') {
                        for (int lc = c; --lc > 0 && maze[r][lc] == '.';) {
                            safe[r][lc][i] = false;
                        }
                        maze[r][c] = '^';
                    }
                }
            }
        }

        q.push(mp(mp(sr, sc), 0));
        while (!q.empty()) {
            state s = q.front();
            q.pop();

            int r = s.first.first, c = s.first.second, t = s.second;
            if (v[r][c][t % 4]) {
                continue;
            }
            v[r][c][t % 4] = true;

            if (r == gr && c == gc) {
                moves = t;
                break;
            }

            for (int i = 0; i < 4; i++) {
                int nr = r + dr[i], nc = c + dc[i], nt = t + 1;
                if (safe[nr][nc][nt % 4] && !v[nr][nc][nt % 4]) {
                    q.push(mp(mp(nr, nc), nt));
                }
            }
        }

        cout << "Case #" << t << ": ";
        if (moves) {
            cout << moves;
        } else {
            cout << "impossible";
        }
        cout << endl;
    }

    fclose(stdin);
    fclose(stdout);
}

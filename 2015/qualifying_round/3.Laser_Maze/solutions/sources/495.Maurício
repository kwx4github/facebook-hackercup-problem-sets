#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

struct state {
    int mod4, i, j;
    state(int mod4, int i, int j) : mod4(mod4), i(i), j(j) { }
};

int main() {
    int t;
    cin >> t;

    for(int z = 1; z <= t; z++) {
        char inp[102][102];
        bool blocked[4][102][102];
        memset(blocked, 0, sizeof blocked);

        int m, n;
        cin >> m >> n;
        for (int i = 0; i < m; i++)
            cin >> inp[i];

        int di[4] = {0, 1, 0, -1};
        int dj[4] = {1, 0, -1, 0};

        int ma[256];
        memset(ma, -1, sizeof ma);
        ma['>'] = 0; ma['v'] = 1; ma['<'] = 2; ma['^'] = 3;

        int si, sj, gi, gj;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                for (int k = 0; k < 4; k++) {
                    if (inp[i][j] == '#' || ma[inp[i][j]] != -1)
                        blocked[k][i][j] = true;

                    if (ma[inp[i][j]] != -1) {
                        int dir = (ma[inp[i][j]]+k) % 4;
                        int ni = i+di[dir], nj = j+dj[dir];

                        while (ni >= 0 && ni < m && nj >= 0 && nj < n) {
                            if (inp[ni][nj] == '#' || ma[inp[ni][nj]] != -1)
                                break;
                            blocked[k][ni][nj] = true;
                            ni += di[dir];
                            nj += dj[dir];
                        }
                    }

                    if (inp[i][j] == 'S') {
                        si = i;
                        sj = j;
                    }
                    if (inp[i][j] == 'G') {
                        gi = i;
                        gj = j;
                    }
                }

        queue<state> q;
        int dist[4][102][102];
        memset(dist, 0x3f, sizeof dist);

        q.push(state(0, si, sj));
        dist[0][si][sj] = 0;

        while (!q.empty()) {
            state t = q.front();
            q.pop();

            for (int k = 0; k < 4; k++) {
                state nt = state((t.mod4 + 1) % 4, t.i + di[k], t.j + dj[k]);

                if (nt.i < 0 || nt.i >= m) continue;
                if (nt.j < 0 || nt.j >= n) continue;
                if (blocked[nt.mod4][nt.i][nt.j]) continue;

                if (dist[nt.mod4][nt.i][nt.j] == 0x3f3f3f3f) {
                    q.push(nt);
                    dist[nt.mod4][nt.i][nt.j] = dist[t.mod4][t.i][t.j] + 1;
                }
            }
        }

        int ans = 0x3f3f3f3f;
        for (int k = 0; k < 4; k++)
            ans = min(ans, dist[k][gi][gj]);

        cout << "Case #" << z << ": ";
        if (ans == 0x3f3f3f3f)
            cout << "impossible" << endl;
        else
            cout << ans << endl;
    }
}

#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <string.h>
#include <algorithm>

using namespace std;

#define D 102
#define INF 1<<30
int r,c;
char maze[D][D];
int dp[D][D][4];
bool visited[D][D][4];
int sx,sy;


bool willDie(int row, int col, int config){
    
    for(int i = row + 1; i < r; i++){
        switch (config) {
            case 0:
                if(maze[i][col] == '^')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 1:
                if(maze[i][col] == '<')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 2:
                if(maze[i][col] == 'v')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 3:
                if(maze[i][col] == '>')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
                
            default:
                break;
        }
    }
    
    for(int i = row - 1; i >= 0; i--){
        switch (config) {
            case 0:
                if(maze[i][col] == 'v')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 1:
                if(maze[i][col] == '>')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 2:
                if(maze[i][col] == '^')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            case 3:
                if(maze[i][col] == '<')
                    return true;
                else if(maze[i][col] != 'G' && maze[i][col] != '.' && maze[i][col] != 'S')//either a laster or a wall
                    return false;
                break;
            default:
                break;
        }
    }
    
    
    for(int i = col + 1; i < c; i++){
        switch (config) {
            case 0:
                if(maze[row][i] == '<')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 1:
                if(maze[row][i] == 'v')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 2:
                if(maze[row][i] == '>')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 3:
                if(maze[row][i] == '^')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
                
            default:
                break;
        }
        
        
    }
    
    for(int i = col - 1; i >= 0; i--){
        switch (config) {
            case 0:
                if(maze[row][i] == '>')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 1:
                if(maze[row][i] == '^')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 2:
                if(maze[row][i] == '<')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                break;
            case 3:
                if(maze[row][i] == 'v')
                    return true;
                else if(maze[row][i] != 'G' && maze[row][i] != '.' && maze[row][i] != 'S')//either a laster or a wall
                    return false;
                
                break;
                
            default:
                break;
        }
        
        
    }
    
    return false;
}
void printMaze(int row, int col, int config){
    printf("\n");
    printf("%d %d %d\n",row, col, config);
    for(int i = 0; i < r; i++){
        for(int j = 0; j <= c; j++){
            if(i == row && j == col)
                printf("S");
            else if(i == sx && j == sy)
                printf(".");
            else if(maze[i][j] != 'G' && maze[i][j] != '.'){
                if(maze[i][j] == '^'){
                    switch (config) {
                        case 1:
                            printf(">");
                            break;
                        case 2:
                            printf("v");
                            break;
                        case 3:
                            printf("<");
                            break;
                        default:
                            printf("^");
                            break;
                    }
                }
                if(maze[i][j] == '>'){
                    switch (config) {
                        case 1:
                            printf("v");
                            break;
                        case 2:
                            printf("<");
                            break;
                        case 3:
                            printf("^");
                            break;
                        default:
                            printf(">");
                            break;
                    }
                }
                if(maze[i][j] == 'v'){
                    switch (config) {
                        case 1:
                            printf("<");
                            break;
                        case 2:
                            printf("^");
                            break;
                        case 3:
                            printf(">");
                            break;
                        default:
                            printf("v");
                            break;
                    }
                }
                
                if(maze[i][j] == '<'){
                    switch (config) {
                        case 1:
                            printf("^");
                            break;
                        case 2:
                            printf(">");
                            break;
                        case 3:
                            printf("v");
                            break;
                        default:
                            printf("<");
                            break;
                    }
                }
            }
            else
                printf("%c", maze[i][j]);
        }
        printf("\n");
    }
        printf("\n");
}
int memo(int row, int col, int config, bool firstStep){
    if(row == r || c == col || row == -1 || col == -1){
//        printf("****\n");
        return INF;// impossible
    }
    if(visited[row][col][config]){
//        printf("solution exists = %d\n",dp[row][col][config]);
//        printMaze(row, col, config);
//        printf("----------\n");
        return dp[row][col][config];
    }
    visited[row][col][config] = true;
//    printMaze(row, col, config);
    
    if(maze[row][col] == '#' || maze[row][col] == '<' || maze[row][col] == '>' || maze[row][col] == '^' || maze[row][col] == 'v' ){
//        printf("####\n");
        return INF;
    }
    if(!firstStep)
    if(willDie(row, col, config)){
//        printf("will die at config = %d\n",config);
        return INF;
    }
    if(maze[row][col] == 'G'){
//        printf("found goal at config = %d\n",config);
        return 0;
    }
    

//    printf("going down\n");
    dp[row][col][config] = min (dp[row][col][config], 1 + memo(row + 1, col, (config + 1) % 4, false));
//    printf("going up\n");
    dp[row][col][config] = min(dp[row][col][config] , 1 + memo(row - 1, col, (config + 1) % 4, false));
//    printf("going right\n");
    dp[row][col][config] = min(dp[row][col][config] , 1 + memo(row, col + 1, (config + 1) % 4, false));
//    printf("going left\n");
    dp[row][col][config] = min(dp[row][col][config] , 1 + memo(row, col - 1, (config + 1) % 4, false));
//    printf("solution = %d\n",dp[row][col][config]);
    return dp[row][col][config];
    
    //return dp[row][col][config] = 1 + min(min(memo(row + 1, col, (config + 1) % 4), memo(row, col + 1, (config + 1) % 4)), min(memo(row - 1, col, (config + 1) % 4), memo(row, col - 1, (config + 1) % 4)));
}
int main () {
    
    FILE *fIn = fopen("laser_maze_example_input.txt", "r");
    FILE *fOut = fopen("laser_maze_example_output.txt", "w");
    
    int T;
    int caseCounter = 0;
    
    fscanf(fIn, "%d", &T);
    while(T--){
        memset(visited, 0, sizeof(visited));
        memset(maze, 0, sizeof(maze));
        caseCounter++;
        fscanf(fIn, "%d%d",&r,&c);
        fscanf(fIn, "%c");
        for(int i = 0; i < D; i++)
            for(int j = 0; j < D; j++)
                for(int k = 0; k < 4; k++)
                    dp[i][j][k] = INF;
                    
        for(int i = 0; i < r; i++)
            for(int j = 0; j <= c; j++){
                
                fscanf(fIn, "%c", &maze[i][j]);
                if(maze[i][j] == 'S'){
                    sx = i;
                    sy = j;
                }
            }
        int ret = memo(sx, sy, 0, true);
        if(ret == INF){
            fprintf(fOut, "Case #%d: Impossible\n",caseCounter);
//            printf("Case #%d: Impossible\n",caseCounter);
        }
        else{
            fprintf(fOut, "Case #%d: %d\n",caseCounter ,ret);
//            printf("Case #%d: %d\n",caseCounter ,ret);
        }
    }
    return 0;
}

#include <cstdio>
#include <iostream>
#include <cstring>
#include <cctype>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <stack>
#include <queue>
#include <deque>
#include <map>

using namespace std;

int T, M, N;
map <char,char> rot;
map <char,pair<int,int> > move;

int main()
{
	rot['^'] = '>';
	rot['>'] = 'v';
	rot['v'] = '<';
	rot['<'] = '^';

	move['^'] = make_pair(-1,0);
	move['v'] = make_pair(1,0);
	move['>'] = make_pair(0,1);
	move['<'] = make_pair(0,-1);
	freopen("laser_maze.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&T);
	for (int i = 0; i < T; ++i)
	{
		int start_x;
		int start_y;
		char field[110][110];
		bool visited[110][110][4];
		int steps[110][110] = {0};
		int total_turrets = 0;
		pair <int, int> turrets[10000];

		scanf("%d %d",&M, &N);getchar();

		for (int j = 0; j < M; ++j)
		{
			for (int k = 0; k < N; ++k)
			{
				scanf("%c",&field[j][k]);
				if(field[j][k] == 'S'){start_x = j; start_y = k;}
				if(field[j][k] == '^' || field[j][k] == '<' || field[j][k] == '>' || field[j][k] == 'v')
				{
					turrets[total_turrets] = make_pair(j, k);
					total_turrets++; 
				}
			}
			getchar();
		}

		memset(visited,false,sizeof(visited));
		queue <pair <int, int> > Q;
		Q.push(make_pair(start_x, start_y));
		visited[start_x][start_y][steps[start_x][start_y]%4] = true;
		int minim = -1;
		
		while(!Q.empty()) 
		{
			char magic_wall[110][110];
			memset(magic_wall,'.',sizeof(magic_wall));
    		pair <int, int> temp = Q.front();
    		Q.pop();
    		int x = temp.first;
    		int y = temp.second;
    		int next = steps[x][y] + 1;
    		for(int j = 0; j < total_turrets; j++)
    		{
    			int rotated_x = turrets[j].first;
    			int rotated_y = turrets[j].second;
    			char rotated = field[rotated_x][rotated_y];
	    		for (int k = 0; k < next % 4; ++k)
	    		{
	    			rotated = rot[rotated];
	    		}
	    		rotated_x += move[rotated].first;
	    		rotated_y += move[rotated].second;
	    		while(rotated_x != -1 && rotated_y != -1 && rotated_x != M && rotated_y != N)
	    		{
	    			magic_wall[rotated_x][rotated_y] = '#';
	    			rotated_x += move[rotated].first;
	    			rotated_y += move[rotated].second;
	    		}
	    	}
	    	  
	    	int dx[] = {-1, 1, 0, 0};
			int dy[] = {0, 0, -1, 1};

    		for(int j = 0; j < 4; j++) 
    		{ 
      			int tx = x + dx[j];
    			int ty = y + dy[j];
      			if(tx == -1 || ty == -1 || tx == M || ty == N || visited[tx][ty][next%4] || magic_wall[tx][ty] != '.' || field[tx][ty] == '#' || field[tx][ty] == '^' || field[tx][ty] == '>' || field[tx][ty] == '<' || field[tx][ty] == 'v') continue;
   				steps[tx][ty] = next;
   				if(field[tx][ty] == 'G' && (minim == -1 || next < minim)) minim = next;
   				visited[tx][ty][next%4] = true;
      			Q.push(make_pair(tx, ty));
    		}
  		}

  		if(minim != -1) printf("Case #%d: %d\n",i+1,minim);
  		else printf("Case #%d: impossible\n",i+1);
	}

	return 0;
}
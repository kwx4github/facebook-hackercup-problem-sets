#include<iostream>
#include<vector>
#include<string>
#include<queue>
#include<utility>
using namespace std;

struct node {
  int r;
  int c;
  int cost;
};

int main () {
  int T;
  cin >> T;
  for (int t = 1; t <= T; ++t) {
    int r, c;
    cin >> r >> c;
    int br, bc;
    int er, ec;
    vector<vector<string> > map;
    {
      vector<string> omap(r);
      for (int i = 0; i < r; ++i) cin >> omap[i];
      for (int i = 0; i < r; ++i)
	for (int j = 0; j < c; ++j)
	  switch (omap[i][j]) {
	  case 'S':
	    br = i;
	    bc = j;
	    omap[i][j] = '.';
	    break;
	  case 'G':
	    er = i;
	    ec = j;
	    omap[i][j] = '.';
	    break;
	  }
      //cout << br << " " << bc << endl;
      //cout << er << " " << ec << endl;
      for (int i = 0; i < 4; ++i) {
	for (vector<string>::iterator it = omap.begin(); it != omap.end(); ++it)
	  for (string::iterator iit = it->begin(); iit != it->end(); ++iit)
	    switch (*iit) {
	    case '<':
	      *iit = '^'; break;
	    case '^':
	      *iit = '>'; break;
	    case '>':
	      *iit = 'v'; break;
	    case 'v':
	      *iit = '<'; break;
	    }
	map.push_back(omap);
	for (int j = 0; j < r; ++j)
	  for (int k = 0; k < c; ++k)
	    switch (omap[j][k]) {
	    case '<':
	      map[i][j][k] = '#';
	      for (int l = k - 1; l >= 0 && omap[j][l] == '.'; --l)
		map[i][j][l] = '#';
	      break;
	    case '^':
	      map[i][j][k] = '#';
	      for (int l = j - 1; l >= 0 && omap[l][k] == '.'; --l)
		map[i][l][k] = '#';
	      break;
	    case '>':
	      map[i][j][k] = '#';
	      for (int l = k + 1; l < c && omap[j][l] == '.'; ++l)
		map[i][j][l] = '#';
	      break;
	    case 'v':
	      map[i][j][k] = '#';
	      for (int l = j + 1; l < r && omap[l][k] == '.'; ++l)
		map[i][l][k] = '#';
	      break;
	    }
      }
      vector<vector<vector<bool> > > visited(r, vector<vector<bool> >(c, vector<bool>(4, false)));
      queue<node> q;
      node start;
      start.r = br;
      start.c = bc;
      start.cost = 0;
      q.push(start);
      int res = -1;
      while (!q.empty()) {
	node top = q.front();
	q.pop();
	if (visited[top.r][top.c][top.cost % 4]) continue;
	visited[top.r][top.c][top.cost % 4] = true;
	//cout << top.r << " " << top.c << " " << top.cost << endl;
	if (top.r == er && top.c == ec) {
	  res = top.cost;
	  break;
	}
	node n = top;
	n.r--;
	n.cost++;
	if (n.r >= 0 && map[top.cost % 4][n.r][n.c] == '.') q.push(n);
	n = top;
	n.r++;
	n.cost++;
	if (n.r < r && map[top.cost % 4][n.r][n.c] == '.') q.push(n);
	n = top;
	n.c--;
	n.cost++;
	if (n.c >= 0 && map[top.cost % 4][n.r][n.c] == '.') q.push(n);
	n = top;
	n.c++;
	n.cost++;
	if (n.c < c && map[top.cost % 4][n.r][n.c] == '.') q.push(n);
      }
      cout << "Case #" << t << ": ";
      if (res == -1) cout << "impossible" << endl;
      else cout << res << endl;
    }
  }
  return 0;
}

#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a), _b = (b); i <= _b; ++i)
#define FORD(i,a,b) for(int i = (a), _b = (b); i >= _b; --i)

const int M = 100 + 10;
const int oo = 1e9;
int ntest, m, n;
string MAP[M],CMAP[M];
string sign = "^>v<";
int f[M][M][4], xs, ys, xf, yf,d[M][M][4];

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};
int fr;
std::vector<int> Q;

int nextcharacter(char c, int x){
	int tmp = 0;
	FOR(i,0,3){
		if( c == sign[i]){
			tmp = i;
		}
	}
	tmp = (tmp + x) % 4;
	return tmp;
}

bool inSign(char c){
	FOR(i,0,3){
		if( c == sign[i]) return true;
	}
	return false;
}

void initmap(){
	// f[M][M][4] =   {
	// 						0: can go;
	//						1: can't go;}

	FOR(k,0,3){
		//cout << "here" <<endl;
		FOR(i,0,m-1) CMAP[i] = MAP[i];
		FOR(i,0,m-1){
			FOR(j,0,n-1){
				f[i][j][k] = 0;
				CMAP[i][j] = MAP[i][j];
				if( inSign(MAP[i][j])){
					CMAP[i][j] = sign[nextcharacter(MAP[i][j],k)];
				}
				if( CMAP[i][j] == 'S' || CMAP[i][j] == 'G'){
					CMAP[i][j] = '.';
				}
			}
		}

		FOR(i,0,m-1){
			FOR(j,0,n-1){
				if(CMAP[i][j] == '#'){
					f[i][j][k] = 1;
				}
				if( inSign(CMAP[i][j])){
					int pos = nextcharacter(CMAP[i][j], 0);
					int u = i;
					int v = j;
					f[u][v][k] = 1;
					while(1){
						int uu = u + dx[pos];
						int vv = v + dy[pos];
						if( uu >= m || vv >= n) break;
						if( uu <0 || vv < 0) break;
						if( CMAP[uu][vv] == '#') break;
						f[uu][vv][k] = 1;
						u = uu;
						v = vv;
					}
				}
			}
		}
	}
}

void initpoint(){
	// find xs, ys;
	// find xf, yf;
	FOR(i,0,m-1) FOR(j,0,n-1){
		FOR(k,0,3){
			d[i][j][k] = oo;
		}
		if( MAP[i][j] == 'S'){
			xs = i;
			ys = j;
		}
		if( MAP[i][j] == 'G'){
			xf = i;
			yf = j;
		}
	}

}

int main(){

	freopen("inp","r",stdin);
	freopen("out","w",stdout);

	cin >> ntest;

	FOR(test,1,ntest){
		scanf("%d %d\n", &m, &n);
		FOR(i,0,m-1) {
			cin >> MAP[i];
			//cout << MAP[i] << endl;
		}

		initpoint();
		initmap();
		fr = 0;
		Q.clear();
		Q.push_back(xs);
		Q.push_back(ys);
		Q.push_back(0);
		d[xs][ys][0] = 0;
		int ok = 0;
		while( fr < Q.size()){
			int u = Q[fr++], v = Q[fr++], t = Q[fr++];
			//cout << u <<" " << v << " " << t << endl;
			if( ok) break;
			FOR(k,0,3){
				int uu = u + dx[k];
				int vv = v + dy[k];
				int tt = (t + 1) % 4;

				if( uu >= 0 && vv >= 0 && uu < m && vv < n){
					if( f[uu][vv][tt] == 0){
						if( d[uu][vv][tt] > d[u][v][t] + 1){
							Q.push_back(uu);
							Q.push_back(vv);
							Q.push_back(tt);
							d[uu][vv][tt] = d[u][v][t] + 1;
							if( uu == xf && vv == yf) {
								ok = 1;
								break;
							}
						}
					}
				}
			}
		}
		int ans = d[xf][yf][0];
		FOR(i,1,3) ans = min(ans, d[xf][yf][i]);
		printf("Case #%d: ",test);
		if( ans == oo) printf("impossible\n"); else printf("%d\n", ans);
	}


	return 0;
}
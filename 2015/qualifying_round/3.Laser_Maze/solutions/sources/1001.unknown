#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

struct elem{
    int x,y;
};

int T,M,N,xi,yi,xf,yf,K,res; bool b[110][110][5],can; char a[110][110]; elem q[110*110*110];

void block(char c, int i, int j){
    int k,x=i,y=j;
    b[i][j][0]=b[i][j][1]=b[i][j][2]=b[i][j][3]=1;
    if (c=='^'){
        for (k=x-1; k>0 && a[k][j]=='.'; k--) b[k][j][0]=1;
        for (k=y+1; k<=N && a[i][k]=='.'; k++) b[i][k][1]=1;
        for (k=x+1; k<=M && a[k][j]=='.'; k++) b[k][j][2]=1;
        for (k=y-1; k>0 && a[i][k]=='.'; k--) b[i][k][3]=1;
    }

    if (c=='>'){
        for (k=y+1; k<=N && a[i][k]=='.'; k++) b[i][k][0]=1;
        for (k=x+1; k<=M && a[k][j]=='.'; k++) b[k][j][1]=1;
        for (k=y-1; k>0 && a[i][k]=='.'; k--) b[i][k][2]=1;
        for (k=x-1; k>0 && a[k][j]=='.'; k--) b[k][j][3]=1;
    }
    if (c=='v'){
        for (k=x+1; k<=M && a[k][j]=='.'; k++) b[k][j][0]=1;
        for (k=y-1; k>0 && a[i][k]=='.'; k--) b[i][k][1]=1;
        for (k=x-1; k>0 && a[k][j]=='.'; k--) b[k][j][2]=1;
        for (k=y+1; k<=N && a[i][k]=='.'; k++) b[i][k][3]=1;
    }
    if (c=='<'){
        for (k=y-1; k>0 && a[i][k]=='.'; k--) b[i][k][0]=1;
        for (k=x-1; k>0 && a[k][j]=='.'; k--) b[k][j][1]=1;
        for (k=y+1; k<=N && a[i][k]=='.'; k++) b[i][k][2]=1;
        for (k=x+1; k<=M && a[k][j]=='.'; k++) b[k][j][3]=1;
    }
}

bool valid(int pas,int x, int y){
    pas%=4;
    if (x<1 || x>M || y<1 || y>N || b[x][y][pas])
        return 0;
    return 1;
}

void push_q(int x, int y, int pas){
    if (!valid(pas,x,y)) return;
    q[++K].x=x;
    q[K].y=y;
}

void bfs(){
    q[1].x=xi+1,q[1].y=yi;
    q[2].x=xi-1,q[2].y=yi;
    q[3].x=xi,q[3].y=yi+1;
    q[4].x=xi,q[4].y=yi-1;
    K=4;

    int i,l=1,pas=1,aux,x,y;
    while (l<=K){
        aux=K;
        for (i=l; i<=aux; i++){
            x=q[i].x,y=q[i].y;
            if (!valid(pas,x,y)) continue;
            b[x][y][pas%4]=1;
            if (x==xf && y==yf){
                res=pas;
                return;
            }

            push_q(x+1,y,pas+1);
            push_q(x-1,y,pas+1);
            push_q(x,y+1,pas+1);
            push_q(x,y-1,pas+1);
        }
        pas+=1;
        l=aux+1;
    }
}

int main(){
    ifstream fin("in.in");
    ofstream fout("out.out");
    fin >> T;

    int k,i,j;
    for (k=1; k<=T; k++){
        fin >> M >> N;
        fout << "Case #" << k <<": ";
        memset(b,0,sizeof(b));
        memset(a,0,sizeof(a));
        for (i=1; i<=M; i++)
            for (j=1; j<=N; j++){
                fin >> a[i][j];
                if (a[i][j]=='#'){
                    b[i][j][0]=b[i][j][1]=b[i][j][2]=b[i][j][3]=1;
                }
                else if (a[i][j]=='S'){
                    xi=i,yi=j;
                    a[i][j]='.';
                }
                else if (a[i][j]=='G'){
                    xf=i,yf=j;
                    a[i][j]='.';
                }
            }
        for (i=1; i<=M; i++)
            for (j=1; j<=N; j++)
                if (a[i][j]!='.' && a[i][j]!='#')
                    block(a[i][j],i,j);
        res=0;
        bfs();
        if (res==0) fout << "impossible\n";
        else fout << res << "\n";
    }
    return 0;
}

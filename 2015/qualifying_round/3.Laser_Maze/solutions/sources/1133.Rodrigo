#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;
typedef pair < ii, int> iii;
int main()
{
    int t;
    cin>>t;
    int cont=1;
    while(t--){
        int n,m;
        cin>>n>>m;
        string mapa[n];
        for(int i=0;i<n;i++)cin>>mapa[i];
        bool M[n][m][4];
        int s1,s2,g1,g2;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                char c=mapa[i][j];
                if(c=='S' or c=='G' or c=='.'){
                    for(int k=0;k<4;k++)M[i][j][k]=1;
                    if(c=='S'){s1=i,s2=j;}
                    if(c=='G'){g1=i,g2=j;}
                }
                else for(int k=0;k<4;k++)M[i][j][k]=0;
            }
        }


        mapa[s1][s2]='.';
        mapa[g1][g2]='.';
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mapa[i][j]=='^'){
                    for(int k=i-1;k>=0;k--){if(mapa[k][j]!='.')break; M[k][j][0]=0;}
                    for(int k=j+1;k<m;k++){if(mapa[i][k]!='.')break; M[i][k][1]=0;}
                    for(int k=i+1;k<n;k++){if(mapa[k][j]!='.')break; M[k][j][2]=0;}
                    for(int k=j-1;k>=0;k--){if(mapa[i][k]!='.')break; M[i][k][3]=0;}                    
                }
                if(mapa[i][j]=='>'){
                    for(int k=i-1;k>=0;k--){if(mapa[k][j]!='.')break; M[k][j][3]=0;}
                    for(int k=j+1;k<m;k++){if(mapa[i][k]!='.')break; M[i][k][0]=0;}
                    for(int k=i+1;k<n;k++){if(mapa[k][j]!='.')break; M[k][j][1]=0;}
                    for(int k=j-1;k>=0;k--){if(mapa[i][k]!='.')break; M[i][k][2]=0;}                        
                }
                if(mapa[i][j]=='v'){
                    for(int k=i-1;k>=0;k--){if(mapa[k][j]!='.')break; M[k][j][2]=0;}
                    for(int k=j+1;k<m;k++){if(mapa[i][k]!='.')break; M[i][k][3]=0;}
                    for(int k=i+1;k<n;k++){if(mapa[k][j]!='.')break; M[k][j][0]=0;}
                    for(int k=j-1;k>=0;k--){if(mapa[i][k]!='.')break; M[i][k][1]=0;}                        
                }
                if(mapa[i][j]=='<'){
                    for(int k=i-1;k>=0;k--){if(mapa[k][j]!='.')break; M[k][j][1]=0;}
                    for(int k=j+1;k<m;k++){if(mapa[i][k]!='.')break; M[i][k][2]=0;}
                    for(int k=i+1;k<n;k++){if(mapa[k][j]!='.')break; M[k][j][3]=0;}
                    for(int k=j-1;k>=0;k--){if(mapa[i][k]!='.')break; M[i][k][0]=0;}                      
                }
            }
        }       



        int V[n][m][4];
        
        memset(V,-1,sizeof(V));
        V[s1][s2][0] = 0;
        queue <iii> Q;
        Q.push( iii ( ii( s1 , s2 ) , 0));

        while(!Q.empty()){
            iii u = Q.front();
            Q.pop();
            int X[4]={-1,0,0,1};
            int Y[4]={0,-1,1,0};
            int niv = u.second;
            int i=(u.first).first;
            int j=(u.first).second;
            for(int k=0;k<4;k++){
                int a=X[k] + i;
                int b=Y[k] + j;
                if(a>=0 and a<n and b>=0 and b<m){
                    if( V[a][b][ (niv+1)%4 ] == -1 and M[a][b][ (niv+1)%4 ]){
                        V[a][b][ (niv+1)%4 ]= V[i][j][niv] +1;
                        Q.push( iii ( ii( a , b ) , (niv+1)%4 ));
                    }
                }
            }
        }
        int MIN = 999999999;
        for(int k=0;k<4;k++)
            if(V[g1][g2][k]!=-1)MIN = min(MIN , V[g1][g2][k]);
        if(MIN!=999999999) printf("Case #%d: %d\n" , cont, MIN);
        else printf("Case #%d: impossible\n" , cont);
        cont++;
    }
    return 0;
}
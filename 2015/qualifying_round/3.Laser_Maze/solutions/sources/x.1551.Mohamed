#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

int di[] = { 0, 0, -1, 1 };
int dj[] = { -1, 1, 0, 0 };

// 0 1 2 3
// < ^ > v

int val[300];
int hor[102][102][2]; // < >
int ver[102][102][2]; // ^ v
char maze[105][105];
int n, m;
int Si, Sj, Gi, Gj;

inline bool isBlock(int i, int j) {
	return !(maze[i][j] == '.' || maze[i][j] == 'S' || maze[i][j] == 'G');
}

void init() {
	MMS(hor, -1);
	MMS(ver, -1);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			if (!isBlock(i, j)) {
				for (int k = j - 1; k >= 0; k--) {
					if (isBlock(i, k)) {
						hor[i][j][0] = val[int(maze[i][k])];
						break;
					}
				}
				for (int k = j + 1; k < m; k++) {
					if (isBlock(i, k)) {
						hor[i][j][1] = val[int(maze[i][k])];
						break;
					}
				}
				for (int k = i - 1; k >= 0; k--) {
					if (isBlock(k, j)) {
						ver[i][j][0] = val[int(maze[k][j])];
						break;
					}
				}
				for (int k = i + 1; k < n; k++) {
					if (isBlock(k, j)) {
						ver[i][j][1] = val[int(maze[k][j])];
						break;
					}
				}
			}
		}
}

int vis[102][102][4];
int VID;
inline bool ok(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < m;
}

inline bool isHit(int i, int j, int steps) {
	if (hor[i][j][0] != -1) {
		if ((hor[i][j][0] + steps) % 4 == val['>'])
			return 1;
	}
	if (hor[i][j][1] != -1) {
		if ((hor[i][j][1] + steps) % 4 == val['<'])
			return 1;
	}
	if (ver[i][j][0] != -1) {
		if ((ver[i][j][0] + steps) % 4 == val['v'])
			return 1;
	}
	if (ver[i][j][1] != -1) {
		if ((ver[i][j][1] + steps) % 4 == val['^'])
			return 1;
	}
	return 0;
}

int BFS() {
	queue<pii> Q;
	Q.push(mp(Si, Sj));
	int steps = 0;
	vis[Si][Sj][0] = VID;
	while (SZ(Q)) {
		int sz = SZ(Q);
		steps++;
		while (sz--) {
			int curi = Q.front().first;
			int curj = Q.front().second;
			Q.pop();
			if (curi == Gi && curj == Gj)
				return steps - 1;
			for (int k = 0; k < 4; k++) {
				int ni = curi + di[k];
				int nj = curj + dj[k];
				if (!ok(ni, nj) || vis[ni][nj][steps % 4] == VID
						|| isHit(ni, nj, steps))
					continue;
				vis[ni][nj][steps % 4] = VID;
				Q.push(mp(ni, nj));
			}
		}
	}
	return -1;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
	freopen("out.txt", "wt", stdout);
#endif
	val['<'] = 0, val['^'] = 1, val['>'] = 2, val['v'] = 3, val['#'] = -1;
	int t, tt = 1;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				cin >> maze[i][j];
				if (maze[i][j] == 'S')
					Si = i, Sj = j;
				else if (maze[i][j] == 'G')
					Gi = i, Gj = j;
			}
		init();
		VID++;
		int res = BFS();
		cout << "Case #" << tt++ << ": ";
		if (res == -1)
			cout << "impossible" << endl;
		else
			cout << res << endl;
	}
	return 0;
}

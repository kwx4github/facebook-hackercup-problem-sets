#include<stdio.h>
#include<algorithm>
using namespace std;
int TC, n, m, T, dir[4][2] = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };
int sx, sy, ex, ey, Q[40100][3], head, tail, D[4][110][110];
char p[110][110], pp[256];
bool w[4][110][110], v[4][110][110];
void Do(int pv, int x, int y, int dd){
	while (1){
		w[pv][x][y] = false;
		x += dir[dd][0], y += dir[dd][1];
		if (p[x][y] == '#' || pp[p[x][y]])break;
	}
}
void Add(int pv, int x, int y){
	++tail;
	Q[tail][0] = pv, Q[tail][1] = x, Q[tail][2] = y;
	v[pv][x][y] = true;
}
void Add2(int pv, int x, int y, int d){
	if (v[pv][x][y])return;
	if (!w[pv][x][y])return;
	D[pv][x][y] = d;
	Add(pv, x, y);
}
void BFS(){
	head = tail = 0;
	Add(0, sx, sy);
	int pv, x, y, d;
	while (head < tail){
		++head;
		pv = Q[head][0], x = Q[head][1], y = Q[head][2];
		d = D[pv][x][y];
		Add2((pv + 1) % 4, x - 1, y, d + 1);
		Add2((pv + 1) % 4, x, y + 1, d + 1);
		Add2((pv + 1) % 4, x + 1, y, d + 1);
		Add2((pv + 1) % 4, x, y - 1, d + 1);
	}
}
int main()
{
	pp['^'] = 1, pp['>'] = 2, pp['v'] = 3, pp['<'] = 4;
	int i, j, k, res;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d", &TC);
	for (T = 1; T <= TC; T++){
		printf("Case #%d: ", T);
		scanf("%d%d", &n, &m);
		for (i = 1; i <= n; i++){
			scanf("%s", p[i] + 1);
			for (j = 1; j <= m; j++){
				if (p[i][j] == 'S'){
					sx = i, sy = j;
					p[i][j] = '.';
				}
				if (p[i][j] == 'G'){
					ex = i, ey = j;
					p[i][j] = '.';
				}
			}
		}
		for (i = 0; i <= n + 1; i++)p[i][0] = p[i][m + 1] = '#';
		for (i = 0; i <= m + 1; i++)p[0][i] = p[n + 1][i] = '#';
		for (i = 0; i < 4; i++){
			for (j = 0; j <= n + 1; j++){
				for (k = 0; k <= m + 1; k++){
					if (p[j][k] == '.')w[i][j][k] = true;
					else w[i][j][k] = false;
				}
			}
			for (j = 1; j <= n; j++){
				for (k = 1; k <= m; k++){
					if (pp[p[j][k]]){
						Do(i, j, k, (pp[p[j][k]] + i - 1) % 4);
					}
				}
			}
		}
		BFS();
		for (i = 0; i < 4; i++)for (j = 0; j <= n + 1; j++)for (k = 0; k <= m + 1; k++)v[i][j][k] = false;
		res = -1;
		for (i = 0; i < 4; i++){
			if (D[i][ex][ey] != 0 && (res == -1 || res > D[i][ex][ey]))res = D[i][ex][ey];
		}
		if (res == -1)printf("impossible\n");
		else printf("%d\n", res);
	}
}
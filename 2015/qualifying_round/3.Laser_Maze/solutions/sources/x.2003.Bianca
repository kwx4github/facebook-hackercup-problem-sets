#include <iostream>
#include <fstream>
#include <queue>
#define x first
#define y second

using namespace std;

void erase(char a[105][105], int mind[4][105][105], int n, int m, int i, int j){
	for(int k = j+1; k < n; ++k)
		mind[0][i][k] = mind[1][i][k] = mind[2][i][k] = mind[3][i][k] = -2;
	for(int k = i+1; k < m; ++k)
		mind[0][k][j] = mind[1][k][j] = mind[2][k][j] = mind[3][k][j] = -2;
}

void complete(char a[105][105], int mind[4][105][105], int n, int m, int i, int j, int no){
	erase(a, mind, n, m, i, j);
	for(int k = i; k >= 0; --k){
		if(mind[no % 4][k][j] == -1)
			break;
		mind[no % 4][k][j] = -1;
	}
	for(int k = j; k < n; ++k)
		mind[(no+1) % 4][i][k] = -1;
	for(int k = i; k < m; ++k)
		mind[(no + 2) % 4][k][j] = -1;
	for(int k = j; k >= 0; --k){
		if(mind[(no+3) % 4][i][k] == -1)
			break;
		mind[(no+3) % 4][i][k] = -1;
	}
}

char a[105][105];
int x, y, mind[4][105][105], m, n;
queue <pair<int, pair<int, int> > > q;

int inside(pair <int, int> xi){
	if(xi.x < 0 || xi.y < 0 || xi.x >= m || xi.y >= n)
		return 0;
	return 1;
}

/*int neighbour(pair <int, int> xi, int k){
	if((inside(make_pair(xi.x, xi.y+1)) && mind[k][xi.x][xi.y+1]) || (inside(make_pair(xi.x, xi.y-1)) && mind[k][xi.x][xi.y-1]) || (inside(make_pair(xi.x+1, xi.y)) && mind[k][xi.x+1][xi.y]) || (inside(make_pair(xi.x-1, xi.y)) && mind[k][xi.x-1][xi.y]))
		return 1;
	return 0;
}*/

int main(){
	int t;
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin >> t;
	for(int test = 1; test <= t; ++test){
		int xi, yi, xj, yj;
		cin >> m >> n;
		for(int i = 0; i < m; ++i)
			for(int j = 0; j < n; ++j){
				mind[0][i][j] = mind[1][i][j] = mind[2][i][j] = mind[3][i][j] = -2;
			}
		for(int i = 0; i < m; ++i)
			for(int j = 0; j < n; ++j){
				cin >> a[i][j];
				if(a[i][j] == 'S'){
					xi = i;
					yi = j;
				}
				if(a[i][j] == 'G'){
					xj = i;
					yj = j;
				}
				if(a[i][j] == '#'){
					erase(a, mind, n, m, i, j);
					mind[0][i][j] = mind[1][i][j] = mind[2][i][j] = mind[3][i][j] = -1;
				}
				if(a[i][j] == '^')
					complete(a, mind, n, m, i, j, 0);

				if(a[i][j] == '>')
					complete(a, mind, n, m, i, j, 3);

				if(a[i][j] == 'v')
					complete(a, mind, n, m, i, j, 2);
					
				if(a[i][j] == '<')
					complete(a, mind, n, m, i, j, 1);
			}

		q.push(make_pair(0, make_pair(xi, yi)));
		mind[0][xi][yi] = 0;
		/*if(neighbour(make_pair(xi, yi), 0)){
			q.push(make_pair(1, make_pair(xi, yi)));
			q.push(make_pair(3, make_pair(xi, yi)));
		}*/
		pair <int, pair<int, int> > node;
		while(!q.empty()){
			node = q.front();
			q.pop();
			if(inside(node.y) && mind[(node.x+1) % 4][node.y.x][node.y.y+1] == -2){
				mind[(node.x+1) % 4][node.y.x][node.y.y+1] = mind[(node.x) % 4][node.y.x][node.y.y] + 1;
				q.push(make_pair(node.x+1, make_pair(node.y.x, node.y.y+1)));
			}
			if(inside(node.y) && mind[(node.x+1) % 4][node.y.x][node.y.y-1] == -2){
				mind[(node.x+1) % 4][node.y.x][node.y.y-1] = mind[(node.x) % 4][node.y.x][node.y.y] + 1;
				q.push(make_pair(node.x+1, make_pair(node.y.x, node.y.y-1)));
			}
			if(inside(node.y) && mind[(node.x+1) % 4][node.y.x+1][node.y.y] == -2){
				mind[(node.x+1) % 4][node.y.x+1][node.y.y] = mind[(node.x) % 4][node.y.x][node.y.y] + 1;
				q.push(make_pair(node.x+1, make_pair(node.y.x+1, node.y.y)));
			}
			if(inside(node.y) && mind[(node.x+1) % 4][node.y.x-1][node.y.y] == -2){
				mind[(node.x+1) % 4][node.y.x-1][node.y.y] = mind[(node.x) % 4][node.y.x][node.y.y] + 1;
				q.push(make_pair(node.x+1, make_pair(node.y.x-1, node.y.y)));
			}
		}
		/*for(int i = 0; i < m; ++i){
			for(int j = 0; j < n; ++j){
				for(int k = 0; k < 4; ++k)
					cout << mind[k][i][j];
				cout << "  ";
			}
			cout << '\n';
		}*/
		int minn = 1 << 31 - 1;
		for(int i = 0; i < 4; ++i)
			if((mind[i][xj][yj] != -2 && mind[i][xj][yj] != -1) && mind[i][xj][yj] < minn)
				minn = mind[i][xj][yj];
		cout << "Case #" << test << ": ";
		if(minn == 1 << 31 - 1)
			cout << "impossible" << '\n';
		else
			cout << minn << '\n';
	}
	return 0;
}
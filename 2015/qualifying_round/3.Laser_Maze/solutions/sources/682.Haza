//#define __test__aTest__
#ifndef __test__aTest__

#include <vector>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <assert.h>
#include <stdexcept>
#include <string>


using namespace std;

#define ll long long
#define ull size_t

int N;

const int dx[] = {-1, 0, 0, 1};
const int dy[] = {0, -1, 1, 0};

set<pair<int, int> > addTurrent(int i0, int j0, int d, const vector<string>& maze) {
    int M = (int)maze.size();
    set<pair<int, int> > s;
    switch (d) {
        case 0:
            for (int j = j0 - 1; j >= 0; j--) {
                if (maze[i0][j] == '.') {
                    s.insert(make_pair(i0, j));
                } else {
                    break;
                }
            }
            break;
        case 1:
            for (int i = i0 - 1; i >= 0; i--) {
                if (maze[i][j0] == '.') {
                    s.insert(make_pair(i, j0));
                } else {
                    break;
                }
            }
            break;
        case 2:
            for (int j = j0 + 1; j < N; j++) {
                if (maze[i0][j] == '.') {
                    s.insert(make_pair(i0, j));
                } else {
                    break;
                }
            }
            break;
        case 3:
            for (int i = i0 + 1; i < M; i++) {
                if (maze[i][j0] == '.') {
                    s.insert(make_pair(i, j0));
                } else {
                    break;
                }
            }
            break;
        default:
            break;
    }
    return s;
}

void process(int index) {
    printf("Case #%d: ", index);
    //scanf("%d", &N);
    int M;
    cin >> M >> N;
    vector<string> maze(M);
    for (int i = 0; i < M; i++) {
        cin >> maze[i];
    }
    pair<int, int> start, goal;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (maze[i][j] == 'S') {
                start = make_pair(i, j);
                maze[i][j] = '.';
            }
            if (maze[i][j] == 'G') {
                goal = make_pair(i, j);
                maze[i][j] = '.';
            }
        }
    }
    string turret_signs = "<^>v";
    map<pair<int, int>, vector<set<pair<int, int> > > > turret_to_wall;
    map<pair<int, int>, vector<set<pair<int, int> > > >::iterator mit;
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (turret_signs.find(maze[i][j]) != string::npos) {
                int d0 = 0;
                for (int k = 0; k < 4; k++) {
                    if (maze[i][j] == turret_signs[k]) {
                        d0 += k;
                    }
                }
                for (int k = 0; k < 4; k++) {
                    turret_to_wall[make_pair(i, j)].push_back(addTurrent(i, j, (d0 + k) % 4, maze));
                }
            }
        }
    }
    set<pair<int, int> > pos;
    set<pair<int, int> >::iterator it, jt;
    pos.insert(start);
    for (int T = 0; T < 1000; T++) {
        set<pair<int, int> > nxt = pos;
        for (int step = 1; step <= 4; step++) {
            set<pair<int, int> > candidate;
            for (it = nxt.begin(); it != nxt.end(); ++it) {
                int i0 = (*it).first, j0 = (*it).second;
                for (int k = 0; k < 4; k++) {
                    int i = i0 + dx[k], j = j0 + dy[k];
                    if (i >= 0 && i < M && j >= 0 && j < N && maze[i][j] == '.') {
                        candidate.insert(make_pair(i, j));
                    }
                }
            }
            for (mit = turret_to_wall.begin(); mit != turret_to_wall.end(); ++mit) {
                const set<pair<int, int> > s = mit->second[step % 4];
                for (jt = s.begin(); jt != s.end(); ++jt) {
                    if (candidate.find(*jt) != nxt.end()) {
                        candidate.erase(*jt);
                    }
                }
            }
            nxt = candidate;
            if (nxt.find(goal) != nxt.end()) {
                cout<< T * 4 + step << endl;
                return;
            }
        }
        for (it = pos.begin(); it != pos.end(); ++it) {
            if (nxt.find(*it) != nxt.end()) {
                nxt.erase(*jt);
            }
        }
        pos = nxt;
        if (pos.empty()) break;
    }
    
    cout<< "impossible" <<endl;
    //printf("%.9f\n", 0.0);
    fflush(stdout);
}

int main() {
    
    freopen("/Users/zishirs/Documents/workspace/test/test/test.txt", "r", stdin);
    freopen("/Users/zishirs/Documents/workspace/test/test/output.txt", "w", stdout);
    
    
    int T;
    scanf("%d", &T);
    for (int index = 1; index <= T; ++index) {
        process(index);
    }
    
    
    /*
    int n;
    vector<int> v;
    while (cin >> n) {
        v.push_back(n);
    }
    vector<int> v1(v.begin(), v.begin() + v.size()/2), v2(v.begin() + v.size()/2, v.end());
    */
    
    //srand((unsigned int)time(NULL));

    return 0;
}

#endif
#include <cstdio>
#include <bits/stdc++.h>

using namespace std;

int tab[105][105];
int n, m;
int px, py, kx, ky;

bool zywy(int x, int y, int o)
{
	for(int i = x - 1; i >= 1; i--)
	{
		if(tab[i][y] == -1)
			continue;
		if(tab[i][y] == -2)
			break;
		if((tab[i][y] + o) % 4 == 1)
			return false;
	}
	for(int i = x + 1; i <= n; i++)
	{
		if(tab[i][y] == -1)
			continue;
		if(tab[i][y] == -2)
			break;
		if((tab[i][y] + o) % 4 == 3)
			return false;
	}
	for(int i = y - 1; i >= 1; i--)
	{
		if(tab[x][i] == -1)
			continue;
		if(tab[x][i] == -2)
			break;
		if((tab[x][i] + o) % 4 == 0)
			return false;
	}
	for(int i = y + 1; i <= m; i++)
	{
		if(tab[x][i] == -1)
			continue;
		if(tab[x][i] == -2)
			break;
		if((tab[x][i] + o) % 4 == 2)
			return false;
	}
	return true;
}

queue< pair<int, int> > kol;
bool zaz[105][105][4];

int bfs()
{
	while(!kol.empty())
		kol.pop();
	kol.emplace(px, py);
	zaz[px][py][0] = true;
	kol.emplace(-1, -1);
	int odl = 0;
	while(!kol.empty())
	{
		auto p = kol.front();
		kol.pop();
		int & x = p.first;
		int & y = p.second;
		if(x == -1 && y == -1)
		{
			if(!kol.empty())
			{
				odl++;
				kol.emplace(-1, -1);
			}
			continue;
		}
		if(!zywy(x, y, odl) && (x != px || y != py))
			continue;
		if(x == kx && y == ky)
			return odl;
		const int xx[4] = {-1, 0, 0, 1};
		const int yy[4] = {0, -1, 1, 0};
		for(int i = 0; i < 4; i++)
		{
			int xxx = x + xx[i];
			int yyy = y + yy[i];
			if(tab[xxx][yyy] == -1)
			{
				if(!zaz[xxx][yyy][odl % 4])
				{
					zaz[xxx][yyy][odl % 4] = true;
					kol.emplace(xxx, yyy);
				}
			}
		}
	}
	return -1;
}

int przyp()
{
	scanf("%d%d", &n, &m);
	for(int i = 0; i <= n + 1; i++)
	{
		for(int j = 0; j <= m + 1; j++)
		{
			tab[i][j] = -2;
			for(int k = 0; k < 4; k++)
				zaz[i][j][k] = false;
		}
	}
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			char c;
			scanf(" %c", &c);
			if(c == 'S')
			{
				px = i;
				py = j;
				c = '.';
			}
			if(c == 'G')
			{
				kx = i;
				ky = j;
				c = '.';
			}
			if(c == '.')
				tab[i][j] = -1;
			if(c == '#')
				tab[i][j] = -2;
			if(c == '>')
				tab[i][j] = 0;
			if(c == '^')
				tab[i][j] = 3;
			if(c == '<')
				tab[i][j] = 2;
			if(c == 'v')
				tab[i][j] = 1;
		}
	}
	return bfs();
}

int main()
{
	int t;
	scanf("%d", &t);
	for(int i = 1; i <= t; i++)
	{
		int ans = przyp();
		if(ans == -1)
			printf("Case #%d: impossible\n", i);
		else
			printf("Case #%d: %d\n", i, ans);
	}
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll;
typedef vector<pll> vpll;typedef vector<string> vs; typedef double D; typedef vector<bool> vb;
typedef pair<ll,pll> pip;
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sd(x) scanf("%d", &x)
#define slld(x) scanf("%I64d", &x)
#define present(c,x) ((c).find(x) != (c).end())
#define debug(X) cerr << "	--> " << #X << " = " << X << endl
#define Fill(a, b) memset(a, b, sizeof(a))
#define INF 2000000000LL
#define mod 1000000007LL
#define N 112
//FILE * sf = fopen("laser_maze_example_input.txt","r");
FILE * pf = fopen("output.txt","w");
int dp[N][N][4];
vpii col[N];
vpii row[N];
vi wallr[N],wallc[N];
int sx = 0,sy = 0;
bool killed(int a,int b,int c)
{
	if(a==sx&&b==sy&&c==0)return false;
	//row
	int j = (lower_bound(row[a].begin(),row[a].end(),mp(b,0))-row[a].begin());
	if(j<row[a].size()&&row[a][j].F==b)return true;
	int laser = INF, wall = INF,turn=-1;
	if(j<row[a].size())
	{
		laser = row[a][j].F;
		turn = (c+row[a][j].S)%4;
	}
	else
	{
		laser = INF;
		turn  = -1;
	}
	int k = (lower_bound(wallr[a].begin(),wallr[a].end(),b)-wallr[a].begin());
	if(k<wallr[a].size())
	{
		wall = wallr[a][k];
	}
	else
	{
		wall = INF;
	}
	if(wall>laser&&turn == 3)				return true;

	if(k>0)									wall = wallr[a][k-1];
	else 									wall = -INF;

	if(j>0)
	{
		laser = row[a][j-1].F;
		turn  = (row[a][j-1].S+c)%4;
	}
	else
	{
		turn = -1;
		laser = -INF;
	}

	if(wall<laser&&turn==1)
	{
		return true;
	}


	//column
	j = (lower_bound(col[b].begin(),col[b].end(),mp(a,0))-col[b].begin());
	if(j<col[b].size()&&col[b][j].F==a)
	{
		return true;
	}
	laser = INF, wall = INF,turn=-1;
	if(j<col[b].size())
	{
		laser = col[b][j].F;
		turn = (c+col[b][j].S)%4;
	}
	else
	{
		laser = INF;
		turn  = -1;
	}
	k = (lower_bound(wallc[b].begin(),wallc[b].end(),a)-wallc[b].begin());
	if(k<wallc[b].size()&&wallc[b].size()>0)
	{
		wall = wallc[b][k];
	}
	else
	{
		wall = INF;
	}
	if(wall>laser&&turn == 0)
	{
		return true;
	}
	if(k>0)									wall = wallc[b][k-1];
	else 									wall = -INF;
	if(j>0)
	{
		laser = col[b][j-1].F;
		turn  = (col[b][j-1].S+c)%4;
	}
	else
	{
		turn = -1;
		laser = -INF;
	}
	if(wall<laser&&turn==2)					return true;
	return false;
}
int rec(int a,int b, int turn,int c,int d)
{
	//cerr<<a<<" "<<b<<" "<<turn<<endl;
	if(dp[a][b][turn]>=0)return dp[a][b][turn];
	if(a==c&&b==d)
	{
		dp[a][b][turn] = 0;
		if(killed(a,b,turn))dp[a][b][turn] = INF;
		return dp[a][b][turn];
	}
	if(killed(a,b,turn))
	{
		dp[a][b][turn] = INF;
		return dp[a][b][turn];
	}
	int t;
	if(turn==3)		t = 0;
	else t = turn + 1;
	int ans = INF;
	dp[a][b][turn] = INF;
	ans = min(ans,rec(a,b+1,t,c,d)+1);
	ans = min(ans,rec(a,b-1,t,c,d)+1);
	ans = min(ans,rec(a+1,b,t,c,d)+1);
	ans = min(ans,rec(a-1,b,t,c,d)+1);
	dp[a][b][turn] = ans;
	return dp[a][b][turn];
}
void solve(int tt)
{
	int n,m,gx=0,gy=0;
	sd(n);sd(m);
	//fscanf(sf,"%d%d",&n,&m);
	for(int i=0;i<N;++i)	for(int j=0;j<N;++j)	for(int k=0;k<4;++k)	dp[i][j][k] = -1;
	for(int i=0;i<N;++i)
	{
		row[i].clear();
		col[i].clear();
		wallr[i].clear();
		wallc[i].clear();
	}
	char x;
	for(int i=1;i<=n;++i)
	{
		for(int j=1;j<=m;++j)
		{
			//scanf("%c",&x);
			cin>>x;
			//fscanf(sf,"%c",&x);
			if(x=='#')
			{
				for(int k=0;k<4;++k)	dp[i][j][k] = INF;
				wallc[j].pb(i);
				wallr[i].pb(j);
			}
			else if(x=='S')
			{
				sx = i;
				sy = j;
			}
			else if(x=='G')
			{
				gx = i;
				gy = j;
			}
			else if(x=='^')
			{
				row[i].pb(mp(j,0));
				col[j].pb(mp(i,0));
				for(int k=0;k<4;++k)	dp[i][j][k] = INF;
			}
			else if(x=='>')
			{
				row[i].pb(mp(j,1));
				col[j].pb(mp(i,1));
				for(int k=0;k<4;++k)	dp[i][j][k] = INF;
			}
			else if(x=='v')
			{
				row[i].pb(mp(j,2));
				col[j].pb(mp(i,2));
				for(int k=0;k<4;++k)	dp[i][j][k] = INF;
			}
			else if(x=='<')
			{
				row[i].pb(mp(j,3));
				col[j].pb(mp(i,3));
				for(int k=0;k<4;++k)	dp[i][j][k] = INF;
			}
		}
	}

	for(int i=0;i<=m+1;++i)
	{
		for(int k=0;k<4;++k)	dp[0][i][k] = INF;
		for(int k=0;k<4;++k)	dp[n+1][i][k] = INF;
	}
	for(int i=0;i<=n+1;++i)
	{
		for(int k=0;k<4;++k)	dp[i][0][k] = INF;
		for(int k=0;k<4;++k)	dp[i][m+1][k] = INF;
	}
	int ans = rec(sx,sy,0,gx,gy);
	if(ans<INF)
	{
		printf("Case #%d: %d\n",tt,ans);
		fprintf(pf,"Case #%d: %d\n",tt,ans);
	}
	else
	{
		printf("Case #%d: impossible\n",tt);
		fprintf(pf,"Case #%d: impossible\n",tt);
	}

}
int main()
{
	int t = 1;
	sd(t);
	//fscanf(sf,"%d",&t);
	for(int tt=1;tt<=t;++tt)			solve(tt);

	//fclose(sf);
	fclose(pf);

	return 0;
}


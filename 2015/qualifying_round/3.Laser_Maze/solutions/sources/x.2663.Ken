#include <stdio.h>
#include <string.h>



void runcase(int t){
	int r,c,i,j,k,nk,reach;
	int ss,gg;
	char tmp;
	char maz[10010][4];
	scanf("%d %d", &r,&c);
	for (i=0; i<r*c; i++){		
		tmp = getchar();
		if (tmp == '\n') 
			tmp = getchar();
		maz[i][0] = tmp;
		if (tmp == 'S') {
			ss = i;
			maz[i][0] = '.';
		}
		if (tmp == 'G') {
			gg = i;
			maz[i][0] = '.';
		}	
		
	}
	for (k=1; k<4; k++){
		for (i=0; i<r*c; i++){
			maz[i][k] = maz[i][k-1];
			if (maz[i][k-1] == '^') maz[i][k] = '>';
			if (maz[i][k-1] == '>') maz[i][k] = 'v';
			if (maz[i][k-1] == 'v') maz[i][k] = '<';
			if (maz[i][k-1] == '<') maz[i][k] = '^';
		}
	}
	
	
	
	for (k=0; k<4; k++){
		for (i=0; i<r*c; i++){
			if (maz[i][k] == '^') {
				maz[i][k] = '.';
				j = i;							
				while (maz[j][k] == '.'){
					maz[j][k] = '#';					
					if (!(j/c!=0)) goto END1;
					j -= c;
				}
			}
			if (maz[i][k] == '>') {
				maz[i][k] = '.';
				j = i;								
				while (maz[j][k] == '.'){
					maz[j][k] = '#';					
					if (!(j%c!=c-1)) goto END1;
					j +=1 ;
				}
			}
			if (maz[i][k] == 'v') {
				maz[i][k] = '.';
				j = i;							
				while (maz[j][k] == '.'){
					maz[j][k] = '#';					
					if (!(j/c!=r-1)) goto END1;
					j += c;
				}
			}
			if (maz[i][k] == '<') {
				maz[i][k] = '.';
				j = i;				
				while (maz[j][k] == '.'){
					maz[j][k] = '#';					
					if (!(j%c!=0)) goto END1;
					j -=1 ;
				}
			}
			END1: tmp = '.';
		}
	}
	
	//PRINT MAZE
	if (1==0)
	for (k=0; k<4; k++){
		printf("\n****Maze Level %d: \n",k);
		for (i=0; i<r*c; i++){
			printf("%c",maz[i][k]);
			if (i%c == c-1)
				printf("\n");
		}
	}
	
	//BEGIN SHORTEST PATH ALGORITHM
	int dist[10000][4];
	for (k=0; k<4; k++)
		for (i=0; i<r*c; i++)
			dist[i][k] = -1;
	dist[ss][0] = 0;
	reach = -1;
	for(i=0;i<r*c;i++)	 
		for(j=0;j<r*c;j++)		
			for(k=0;k<4;k++)
				if (dist[j][k] != -1){
					if(j==gg) {
						reach = k;
						goto REACHED;
					}
					nk = (k+1)%4;
					if((j%c!=0) && (dist[j-1][nk]==-1) && (maz[j-1][nk]=='.'))
						dist[j-1][nk] = dist[j][k]+1;
					if((j%c!=c-1) && (dist[j+1][nk]==-1) && (maz[j+1][nk]=='.'))
						dist[j+1][nk] = dist[j][k]+1;
					if((j/c!=0) && (dist[j-c][nk]==-1) && (maz[j-c][nk]=='.'))
						dist[j-c][nk] = dist[j][k]+1;
					if((j/c!=r-1) && (dist[j+c][nk]==-1) && (maz[j+c][nk]=='.'))
						dist[j+c][nk] = dist[j][k]+1;
				}
	REACHED: printf("Case #%d: ", t);
	if (reach != -1) {
		printf("%d\n",dist[gg][reach]);
	} else {
		printf("impossible\n");
	}	
	
	
	
}
int main(){
	int t,T;
	scanf("%d", &T);
	for(t=1; t<=T; t++)
		runcase(t);
	return 0;
}

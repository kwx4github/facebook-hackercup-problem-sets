#include <bits/stdc++.h>
using namespace std;

const int MAXH = 101;
const int MAXW = 101;
const string D = ">v<^";
const int di[] = {0,1,0,-1};
const int dj[] = {1,0,-1,0};
const int INF = 1<<28;
int H, W;
char G[4][MAXH][MAXW];
int cost[4][MAXH][MAXW];

struct State {
  int d, i, j;
};

int bfs(int si, int sj, int gi, int gj) {
  queue<State> que;
  fill(cost[0][0], cost[4][0], INF);
  que.push((State){0, si, sj});
  cost[0][si][sj] = 0;
  while(que.size()) {
    const State s = que.front();
    que.pop();
    for(int k = 0; k < 4; ++k) {
      int nd = (s.d + 1) % 4;
      int ni = s.i + di[k];
      int nj = s.j + dj[k];
      if(ni < 0 || ni >= H) continue;
      if(nj < 0 || nj >= W) continue;
      if(G[nd][ni][nj] != '.') continue;
      if(cost[nd][ni][nj] != INF) continue;
      que.push((State){nd, ni, nj});
      cost[nd][ni][nj] = cost[s.d][s.i][s.j] + 1;
      if(ni == gi && nj == gj)
        return cost[nd][ni][nj];
    }
  }
  return INF;
}

int main() {
  for(int T, tc = (bool)(cin >> T); tc <= T; ++tc) {
    cout << "Case #" << tc << ": ";
    cin >> H >> W;
    int si, sj, gi, gj;
    for(int i = 0; i < H; ++i) {
      for(int j = 0; j < W; ++j) {
        cin >> G[0][i][j];
        if(G[0][i][j] == 'S') {
          si = i; sj = j; G[0][i][j] = '.';
        }
        if(G[0][i][j] == 'G') {
          gi = i; gj = j; G[0][i][j] = '.';
        }
      }
    }
    for(int d = 1; d < 4; ++d) {
      for(int i = 0; i < H; ++i) {
        for(int j = 0; j < W; ++j) {
          G[d][i][j] = G[0][i][j];
        }
      }
    }
    for(int d = 0; d < 4; ++d) {
      for(int i = 0; i < H; ++i) {
        for(int j = 0; j < W; ++j) {
          int a = D.find(G[d][i][j]);
          if(a == string::npos) continue;
          a = (a + d) % 4;
          for(int k = 1; ; ++k) {
            int ni = i + di[a] * k;
            int nj = j + dj[a] * k;
            if(ni < 0 || ni >= H) break;
            if(nj < 0 || nj >= W) break;
            if(G[d][ni][nj] != '.') break;
            G[d][ni][nj] = '#';
          }
        }
      }
    }
    /*
    for(int d = 0; d < 4; ++d) {
      for(int i = 0; i < H; ++i) {
        for(int j = 0; j < W; ++j) {
          cout << G[d][i][j];
        }
        cout << endl;
      }
      cout << endl;
    }
    */

    int res = bfs(si, sj, gi, gj);
    if(res == INF) cout << "impossible" << endl;
    else cout << res << endl;
  }
  return 0;
}

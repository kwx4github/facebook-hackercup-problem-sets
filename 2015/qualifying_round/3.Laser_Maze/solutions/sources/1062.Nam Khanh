import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Maze {

	private static BufferedReader br;
	private static StringTokenizer st;
	private static PrintWriter pw;

	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
				System.out)));

		final int MAX_NUM_CASE = readInt();
		for (int qq = 1; qq <= MAX_NUM_CASE; qq++) {
			pw.print("Case #" + qq + ": ");

			int M = readInt();
			int N = readInt();

			char[][] grid = new char[M][N];
			int cs = 0, vs = 0;
			int cg = M, vg = N;

			for (int i = 0; i < M; i++) {
				grid[i] = nextToken().toCharArray();
				for (int j = 0; j < N; j++) {
					if (grid[i][j] == 'S') {
						cs = i;
						vs = j;
						grid[i][j] = '.';
					}
					if (grid[i][j] == 'G') {
						cg = i;
						vg = j;
						grid[i][j] = '.';
					}
				}
			}

			int[][][] a = new int[4][M][N];
			for (int k = 0; k < 4; k++) {
				a[k] = buildA(M, N, grid);
				rotate(M, N, grid);
				// for (int i = 0; i < M; i++) {
				// for (int j = 0; j < N; j++) {
				// System.out.print(a[k][i][j] + "");
				// }
				// System.out.println("\n");
				// }

			}
			int[] hk = { 0, 1, 0, -1 };
			int[] ck = { 1, 0, -1, 0 };

			boolean possible = false;
			
			HashMap<Vertex, Integer> weight = new HashMap<Vertex, Integer>();
			LinkedList<Vertex> queue = new LinkedList<Maze.Vertex>();
			Vertex start = new Vertex(cs, vs, 0);
			queue.add(start);
			weight.put(start, 0);
			while (!queue.isEmpty()) {
				Vertex vertex = queue.poll();
				if (vertex.row == cg && vertex.column == vg) {
					pw.println(weight.get(vertex));
					possible = true;
					break;
				}

				int direct = (vertex.direct + 1) % 4;
				for (int k = 0; k < 4; k++) {
					int u = vertex.row + hk[k];
					int v = vertex.column + ck[k];
					if ((u >= 0 && u < M && v >= 0 && v < N)
							&& a[direct][u][v] == 0) {
						Vertex newVertex = new Vertex(u, v, direct);
						if (!weight.containsKey(newVertex)) {
							queue.add(newVertex);
							weight.put(newVertex, weight.get(vertex) + 1);
						}
					}
				}
			}
			if (!possible)
				pw.println("impossible");
		}
		pw.close();
	}

	static void rotate(int m, int n, char[][] grid) {
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == '^')
					grid[i][j] = '>';
				else if (grid[i][j] == '>')
					grid[i][j] = 'v';
				else if (grid[i][j] == 'v')
					grid[i][j] = '<';
				else if (grid[i][j] == '<')
					grid[i][j] = '^';
			}
	}

	static int[][] buildA(int m, int n, char[][] grid) {
		int[][] a = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != '.')
					a[i][j] = 1;
				if (grid[i][j] == '>') {
					int k = j + 1;
					while (k < n) {
						if (grid[i][k] == '.') {
							a[i][k] = 1;
							k = k + 1;
						} else
							break;
					}
				}
				if (grid[i][j] == '<') {
					int k = j - 1;
					while (k >= 0) {
						if (grid[i][k] == '.') {
							a[i][k] = 1;
							k = k - 1;
						} else
							break;
					}
				}
				if (grid[i][j] == '^') {
					int k = i - 1;
					while (k >= 0) {
						if (grid[k][j] == '.') {
							a[k][j] = 1;
							k = k - 1;
						} else
							break;
					}
				}
				if (grid[i][j] == 'v') {
					int k = i + 1;
					while (k < m) {
						if (grid[k][j] == '.') {
							a[k][j] = 1;
							k = k + 1;
						} else
							break;
					}
				}
			}
		}
		return a;
	}

	static class Vertex {
		public int row;
		public int column;
		public int direct;

		public Vertex(int row, int column, int direct) {
			this.row = row;
			this.column = column;
			this.direct = direct;
		}

		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + row;
			result = prime * result + column;
			result = prime * result + direct;
			return result;
		}

		public boolean equals(Object obj) {
			if (this == obj)
				return true;

			if (obj == null)
				return false;

			if (getClass() != obj.getClass())
				return false;

			Vertex other = (Vertex) obj;
			if (row == other.row && column == other.column
					&& direct == other.direct)
				return true;

			return false;
		}
	}

	private static long readLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private static int readInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private static double readDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}

	private static String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			if (!br.ready()) {
				pw.close();
				System.exit(0);
			}
			st = new StringTokenizer(br.readLine().trim());
		}
		return st.nextToken();
	}
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <queue>
using namespace std;

struct NODE
{
    int x, y, step;
    vector<int> next_idx;
};
int node_idx[110][110][4];
vector<NODE> G_conn;
int CAS, n, m;
char maze[110][110];
int G[110][110][4];
int add_x[] = {0,1,0,-1};
int add_y[] = {-1,0,1,0};
char laze[] = {'^', '>', 'v', '<'};
int dist[110][110][4];

int Calc_G()
{
    int mask[4];
    memset(G, 0, sizeof(G));
    for(int i = 0; i < m; i++)
    {
        for(int j = 0;j < n; j++)
        {
            if(maze[i][j] == 'S' || maze[i][j] == 'G' || maze[i][j] == '.')
            {
                memset(mask,0,sizeof(mask));
                for(int dir = 0; dir < 4; dir++)
                {
                    int cur_x = j;
                    int cur_y = i;
                    int find_laze_type = -1;

                    while(cur_x >= 0 && cur_y >= 0 && cur_x < n && cur_y < m)
                    {
                        for(int laze_type_idx = 0; laze_type_idx < 4; laze_type_idx++)
                        {
                            if(maze[cur_y][cur_x] == laze[laze_type_idx])
                            {
                                find_laze_type = laze_type_idx;
                                break;
                            }
                        }
                        cur_x += add_x[dir];
                        cur_y += add_y[dir];
                    }

                    if(find_laze_type != -1)
                    {
                        int step = ((find_laze_type + 2) % 4 - dir + 4) % 4;
                        G[i][j][step] = 1;
                    }
                }
            }
            else
            {
                for(int dir = 0; dir < 4;dir++)
                    G[i][j][dir] = 1;
            }
        }
    }
}

int Add_edge(int idx1, int idx2)
{
    G_conn[idx1].next_idx.push_back(idx2);
}

int Construction()
{
    for(int i = 0; i < m;i++)
    {
        for(int j = 0; j <n;j++)
        {
            for(int step = 0; step < 4; step++)
            {
                for(int dir = 0; dir <4; dir++)
                {
                    int x = j + add_x[dir];
                    int y = i + add_y[dir];
                    if(x >= 0 && y >= 0 && x < n && y < m && G[y][x][(step + 1) % 4] == 0)
                    {
                        //printf("x1:%d y1:%d step1:%d x2:%d y2:%d step2:%d\n", j, i, step, x, y, (step +1)%4);
                        Add_edge(node_idx[i][j][step], node_idx[y][x][(step+1) % 4]);
                    }
                }
            }
        }
    }
}

int Init()
{
    G_conn.clear();
    for(int i = 0;i < m;i++)
    {
        for(int j = 0;j <n;j++)
        {
            for(int step = 0; step <4; step++)
            {
                NODE node;
                node.x = j; node.y = i; node.step = step;
                node.next_idx.clear();
                node_idx[i][j][step] = G_conn.size();
                G_conn.push_back(node);
            }
        }
    }
}

int in_queue[110 * 110 * 4];
int Find_shortest_path(int s_x, int s_y, int t_x, int t_y)
{
    memset(dist, 0xff, sizeof(dist));
    queue<int> q;
    q.push(node_idx[s_y][s_x][0]);
    dist[s_y][s_x][0] = 0;
    memset(in_queue, 0,sizeof(in_queue));
    in_queue[node_idx[s_y][s_x][0]] = 1;
    while(!q.empty())
    {
        int cur_idx = q.front();
        q.pop();
        in_queue[cur_idx] = 0;
        int cur_x = G_conn[cur_idx].x;
        int cur_y = G_conn[cur_idx].y;
        int cur_step = G_conn[cur_idx].step;

        for(int i = 0;i < G_conn[cur_idx].next_idx.size();i++)
        {
            int next_idx = G_conn[cur_idx].next_idx[i];
            int next_x = G_conn[next_idx].x;
            int next_y = G_conn[next_idx].y;
            int next_step = G_conn[next_idx].step;
            if(dist[next_y][next_x][next_step] == -1 || dist[cur_y][cur_x][cur_step] + 1 < dist[next_y][next_x][next_step])
            {
                dist[next_y][next_x][next_step] = dist[cur_y][cur_x][cur_step] + 1;
                if(in_queue[next_idx] == 0)
                {
                    in_queue[next_idx] = 1;
                    q.push(next_idx);
                }
            }
        }
    }

    int ans = -1;
    for(int step = 0; step < 4; step++)
    {
        if(dist[t_y][t_x][step] != -1 && ((dist[t_y][t_x][step] < ans) || (ans == -1)))
        {
            ans = dist[t_y][t_x][step];
        }
    }
    return ans;
}

int main()
{
    int start_x, start_y;
    int target_x, target_y;
    freopen("laser_maze_example_input.txt","r",stdin);
    freopen("laser_maze_example_input_out.txt","w",stdout);
    scanf("%d", &CAS);
    for(int cas = 1; cas <= CAS; cas++)
    {
        scanf("%d %d", &m, &n);
        for(int i = 0; i < m; i++)
        {
            char c;
            scanf("%c",&c);
            for(int j = 0;j < n; j++)
            {
                scanf("%c", &maze[i][j]);
                if(maze[i][j] == 'S')
                {
                    start_x = j;
                    start_y = i;
                }
                if(maze[i][j] == 'G')
                {
                    target_x = j;
                    target_y = i;
                }
            }
        }

        Init();
        Calc_G();
        Construction();
        //cout << target_x <<","<<target_y<<endl;
        int ans = Find_shortest_path(start_x, start_y, target_x, target_y);
        if(ans != -1)
        {
            printf("Case #%d: %d\n", cas, ans);
        }
        else
        {
            printf("Case #%d: impossible\n", cas);
        }
    }
    fclose(stdout);
    fclose(stdin);
}

/*
user  : triveni
date  : 09/01/2015
time  : 06:03:03
*/
#include <bits/stdc++.h>

using namespace std;

#define      pii               std::pair<int,int>
#define      vi                std::vector<int>
#define      mp(a,b)           std::make_pair(a,b)
#define      pb(a)             std::push_back(a)
#define      each(it,s)        for(auto it = s.begin(); it != s.end(); ++it)
#define      rep(i, n)         for(int i = 0; i < (n); ++i)
#define      sortA(v)          sort(v.begin(), v.end())
#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())
#define      X                 first
#define      Y                 second

typedef long long LL;
int INF = 1000000007;

struct pt{
	int dist, x, y, state;
};

int n, m, state;
int dist[101][101][4];
bool vis[101][101][4];
int lasers[101][101];
char maze[101][101];
int dx[] = {+1, 0, -1, 0};
int dy[] = {0, +1, 0, -1};
// (0, >), (1, v), (2, <), (3, ^)

bool isValid(int x, int y){
	if(x < 0 || y < 0 || x >= n || y >= m) return 0;
	if(vis[x][y][state] || maze[x][y] == '#' || lasers[x][y] > -1) return 0;

	for(int i = x; i < n; ++i){
		if(lasers[i][y] > -1 || maze[i][y] == '#'){
			if(lasers[i][y] > -1 && (state+lasers[i][y])%4 == 3) return 0;
			break;
		}
	}
	for(int i=x-1;i>=0;--i){
		if(lasers[i][y] > -1 || maze[i][y] == '#'){
			if(lasers[i][y] > -1 && (state+lasers[i][y])%4 == 1) return 0;
			break;
		}
	}
	for(int i = y; i < m; ++i){
		if(lasers[x][i] > -1 || maze[x][i] == '#'){
			if(lasers[x][i] > -1 and (state + lasers[x][i])%4 == 2) return 0;
			break;
		}
	}
	for(int i = y-1; i >= 0; --i){
		if(lasers[x][i] > -1 || maze[x][i] == '#'){
			if(lasers[x][i] > -1 and (state + lasers[x][i])%4 == 0) return 0;
			break;
		}
	}
	return 1;
}

int main()
{
	int T;
	cin >> T;
	for(int tc = 1; tc <= T; ++tc){
		cin >> n >> m;
		printf("Case #%d: ",tc);
		rep(i, n) cin >> maze[i];
		state = 0;
		// initially lasers is set -1, otherwise state
		rep(i, n) rep(j, m) rep(k, 4) vis[i][j][k] = 0;
		rep(i, n) rep(j, m) rep(k, 4) dist[i][j][k] = INF;
		rep(i, n) rep(j, m){
			lasers[i][j] = -1;
			if(maze[i][j] == '>') lasers[i][j] = 0;
			else if(maze[i][j] == 'v') lasers[i][j] = 1;
			else if(maze[i][j] == '<') lasers[i][j] = 2;
			else if(maze[i][j] == '^') lasers[i][j] = 3;
		}
		pii source, dest;
		rep(i, n) rep(j, m){
			if(maze[i][j] == 'S') source = mp(i, j);
			if(maze[i][j] == 'G') dest = mp(i, j);
		}
		
		// initialize source
		dist[source.X][source.Y][0] = 0;
		vis[source.X][source.Y][0] = 1;

		queue<pt> Q;
		pii p;
		Q.push((pt){0, source.X, source.Y, state});
		while(!Q.empty()){
			pt v = Q.front();
			Q.pop();
			state = (v.state + 1)%4;
			rep(i, 4){
				p = mp(v.x + dx[i], v.y + dy[i]);
				if(isValid(p.X, p.Y)){
					Q.push((pt){v.dist + 1, p.X, p.Y, state});
					vis[p.X][p.Y][state] = 1;
					dist[p.X][p.Y][state] = v.dist + 1;
				}
			}
		}
		int ans = INF;
		rep(i, 4) ans = min(ans, dist[dest.X][dest.Y][i]);
		if(ans == INF) puts("impossible");
		else printf("%d\n",ans);
	}
	return 0;
}

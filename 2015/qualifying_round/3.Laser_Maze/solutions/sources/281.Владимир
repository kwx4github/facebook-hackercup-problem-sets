/*
Vladimir Milenkovic
Facebook Hacker Cup 2015 Qualification Round
Problem C: Laser Maze
*/
#include <bits/stdc++.h>
#define SUBMIT true
using namespace std;
const int MAXN=101;
bool love[4][MAXN][MAXN];
char grid[MAXN][MAXN];
const int dx[4]{0,1,0,-1};
const int dy[4]{1,0,-1,0};
int n,m;
//0-gore
//1-desno
//2-dole
//3-levo
bool valid(int i,int j)
{
    return (i>-1)&&(i<n)&&(j>-1)&&(j<m);
}
void laser(int idx,int pravac,int i,int j)
{
    i+=dx[pravac];
    j+=dy[pravac];
    while(valid(i,j)&&(grid[i][j]=='.'||grid[i][j]=='S'||grid[i][j]=='G')) {love[idx][i][j]=false;i+=dx[pravac];j+=dy[pravac];}
}
bool mark[4][MAXN][MAXN];
int ret=-1;
bool BFS(int x,int y,int goalx,int goaly)
{
    queue<int> bfsqx;
    queue<int> bfsqy;
    queue<int> depth;
    bfsqx.push(x);
    bfsqy.push(y);
    depth.push(0);
    while(!bfsqx.empty())
    {
        int curx=bfsqx.front();
        bfsqx.pop();
        int cury=bfsqy.front();
        bfsqy.pop();
        int curd=depth.front();
        depth.pop();
         if(curx==goalx&&cury==goaly) {ret=curd;return true;}
        for(int dir=0;dir<4;dir++)
        {
            int mat=curd%4;
            if(valid(curx+dx[dir],cury+dy[dir])&&love[(mat+1)%4][curx+dx[dir]][cury+dy[dir]]&&!mark[(mat+1)%4][curx+dx[dir]][cury+dy[dir]])
            {
                mark[(mat+1)%4][curx+dx[dir]][cury+dy[dir]]=true;
                bfsqx.push(curx+dx[dir]);
                bfsqy.push(cury+dy[dir]);
                depth.push(curd+1);
            }
        }
    }
    return false;
}
int main()
{
    if(SUBMIT)
    {
        freopen("in3.txt","r",stdin);
        freopen("out3.txt","w",stdout);
    }
    int t;
    scanf("%d",&t);
    for(int tc=1;tc<=t;tc++)
    {
        memset(love,true,sizeof love);
        memset(mark,false,sizeof mark);
        ret=-1;
        scanf("%d%d",&n,&m);
        int startx;
        int starty;
        int goalx;
        int goaly;
        for(int i=0;i<n;i++)
            scanf("%s",grid[i]);
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
        {
            if(grid[i][j]=='S')
            {
                startx=i;
                starty=j;
                continue;
            }
            if(grid[i][j]=='G')
            {
                goalx=i;
                goaly=j;
                continue;
            }
            if(grid[i][j]=='#')
                {love[0][i][j]=love[1][i][j]=love[2][i][j]=love[3][i][j]=false;continue;}
            if(grid[i][j]=='^')
            {
                love[0][i][j]=love[1][i][j]=love[2][i][j]=love[3][i][j]=false;
                laser(1,0,i,j);
                laser(2,1,i,j);
                laser(3,2,i,j);
                laser(0,3,i,j);
                continue;
            }
            if(grid[i][j]=='>')
            {
                love[0][i][j]=love[1][i][j]=love[2][i][j]=love[3][i][j]=false;
                laser(1,1,i,j);
                laser(2,2,i,j);
                laser(3,3,i,j);
                laser(0,0,i,j);
                continue;
            }
            if(grid[i][j]=='v')
            {
                love[0][i][j]=love[1][i][j]=love[2][i][j]=love[3][i][j]=false;
                laser(1,2,i,j);
                laser(2,3,i,j);
                laser(3,0,i,j);
                laser(0,1,i,j);
                continue;
            }
            if(grid[i][j]=='<')
            {
                love[0][i][j]=love[1][i][j]=love[2][i][j]=love[3][i][j]=false;
                laser(1,3,i,j);
                laser(2,0,i,j);
                laser(3,1,i,j);
                laser(0,2,i,j);
                continue;
            }
        }
            if(BFS(startx,starty,goalx,goaly)) printf("Case #%d: %d\n",tc,ret);
            else printf("Case #%d: impossible\n",tc);
    }
}

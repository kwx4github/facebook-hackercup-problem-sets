#include <algorithm>
#include <array>
#include <complex>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

char dat[100][100];
bool safe[100][100][4];
bool vis[100][100][4];
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};
int sy, sx, gy, gx, H, W;
const int INF = 1 << 28;

int getD(const char c) {
  int res = -1;
  switch(c){
    case '^':
      res = 0;
      break;
    case '>':
      res = 1;
      break;
    case 'v':
      res = 2;
      break;
    case '<':
      res = 3;
      break;
  }
  return res;
}

int bfs() {
  memset(vis, 0, sizeof(vis));
  queue<pair<int, int> > queue;
  queue.push(make_pair(sy * W + sx, 0));
  int res = INF;
  while(!queue.empty()){
    auto u = queue.front();
    queue.pop();
    int y = u.first / W;
    int x = u.first % W;
    int d = u.second % 4;
    if(y == gy && x == gx) {
      res = min(res, u.second);
      continue;
    }
    for(int k = 0; k < 4; ++k) {
      int ny = y + dy[k];
      int nx = x + dx[k];
      int nd = (d + 1) % 4;
      if(ny < 0 || ny >= H) continue;
      if(nx < 0 || nx >= W) continue;
      if(vis[ny][nx][nd] || !safe[ny][nx][nd]) continue;
      vis[ny][nx][nd] = true;
      queue.push(make_pair(ny * W + nx, u.second + 1));
    }
  }
  return res == INF ? -1 : res;
}

int main() {
  int T;
  cin >> T;
  for(int t = 1; t <= T; ++t) {
    cin >> H >> W;
    memset(safe, -1, sizeof(safe));
    for(int i = 0; i < H; ++i) {
      for(int j = 0; j < W; ++j) {
        cin >> dat[i][j];
        if(dat[i][j] == 'S'){
          sy = i;
          sx = j;
          dat[i][j] = '.';
        }else if(dat[i][j] == 'G'){
          gy = i;
          gx = j;
          dat[i][j] = '.';
        }
      }
    }
    for(int i = 0; i < H; ++i) {
      for(int j = 0; j < W; ++j) {
        int d = getD(dat[i][j]);
        if(d == -1) continue;
        for(int k = 0; k < 4; ++k){
          int nd = (d + k) % 4;
          int ny = i + dy[nd];
          int nx = j + dx[nd];
          while(true) {
            if(ny < 0 || ny >= H) break;
            if(nx < 0 || nx >= W) break;
            if(dat[ny][nx] != '.') break;
            safe[ny][nx][k] = false;
            ny += dy[nd];
            nx += dx[nd];
          }
        }
      }
    }
    int res = bfs();
    cout << "Case #" << t << ": ";
    if(res == -1) {
      cout << "impossible" << endl;
    } else {
      cout << res << endl;
    }
  }
  return 0;
}

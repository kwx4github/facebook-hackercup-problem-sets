#include <iostream>
#include <algorithm>
#include <list>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <climits>
#include <cstdio>
#include <set>
#include <map>
#include <queue>
using namespace std;

#define forn(a,n) for(int a = 0; a<(n); ++a)
#define forsn(a,s,n) for(int a = (s); a<(n); ++a)
#define forall(a,all) for(__typeof(all.begin()) a = all.begin(); a != all.end(); ++a)

typedef long long tint;

int T, m, n;
string maze[4][104], read[104];

const int DX[4] = {-1,0,1,0};
const int DY[4] = {0,1,0,-1};
const string rayo = "^>v<";

int dist[4][104][104];

struct caso {
	int x, y, dist;
	caso() {}
	caso(int a, int b, int c) {x = a; y=b; dist=c;};
};

bool operator<(const caso& c0, const caso& c1) {
	return c0.dist > c1.dist;
}

int main(){
	freopen("lazer.in", "r", stdin);
	//freopen("lazer.out", "w", stdout);

	cin >> T;
	forn(t, T) {
		cin >> m >> n;
		forn(i, m) cin >> read[i];
		int xc, yc, xf, yf;
		forn(i, m) forn(j, n) {
			if(read[i][j] == 'S') {
				xc = i; yc = j;
			}
			if(read[i][j] == 'G') {
				xf = i; yf = j;
			}
		}

		//separo en casos
		forn(mn, 4) {
			forn(i, m) maze[mn][i] = read[i];
			forn(i, m) forn(j, n) if(rayo.find(read[i][j]) != -1) {
				int x = i, y = j, k = (rayo.find(read[i][j]) + mn)%4;
				maze[mn][x][y] = '#';
				x += DX[k]; y += DY[k];
				while(min(x,y) >= 0 && x < m && y < n) {
					if(read[x][y] == '#' || rayo.find(read[x][y]) != -1) break;
					maze[mn][x][y] = '#';
					x += DX[k]; y += DY[k];
				}
			}

			/*forn(i, m) {
				cout << maze[mn][i] << endl;
			}
			cout << endl;*/
		}


		memset(dist, -1, sizeof(dist));
		priority_queue<caso> q;
		dist[0][xc][yc] = 0;
		q.push(caso(xc, yc, 0));
		int ret = -1;
		while(!q.empty()) {
			caso c = q.top(); q.pop();

			if(c.x == xf && c.y == yf) {
				ret = c.dist;
				break;
			}

			if(dist[c.dist%4][c.x][c.y] != c.dist) continue;

			forn(k, 4) {
				caso nn = c;
				nn.x += DX[k]; nn.y += DY[k]; nn.dist++;
				if(min(nn.x, nn.y) < 0 || nn.x == m || nn.y == n) continue;
				if(maze[nn.dist%4][nn.x][nn.y] == '#') continue;
				int &d = dist[nn.dist%4][nn.x][nn.y];
				if(d == -1 || d > nn.dist) {
					d = nn.dist;
					q.push(nn);
				}
			}
		}

		printf("Case #%i: ", t+1);
		if(ret == -1) {
			cout << "impossible" << endl;
		} else {
			cout << ret << endl;
		}
	}
	

	return 0;
}

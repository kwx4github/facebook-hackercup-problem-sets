#include <stdio.h>
#include <vector>
using namespace std;

int t;
int N, M;

int Map[100][100];
bool Wall[100][100][4];

int start_x, start_y;
int goal_x, goal_y;

void Fill(int x, int y, int dx, int dy, int h) {
  if (x < 0 || y < 0) return;
  if (x == M || y == N) return;
  if (Wall[y][x][h]) return;
  Wall[y][x][h] = true;
  Fill(x+dx, y+dy, dx, dy, h);
}

int main() {
  scanf("%d\n", &t);
  for (int i = 1 ; i <= t ; i++) {
    scanf("%d %d\n", &N, &M);
    for (int lin = 0 ; lin < N ; lin++) {
      for (int col = 0 ; col < M ; col++) {
        char c;
        scanf("%c", &c);
        switch (c) {
         case 'S':
          start_x = col;
          start_y = lin;
         case 'G':
          if (c == 'G') {
            goal_x = col;
            goal_y = lin;
          }
         case '.':
          Map[lin][col] = 0;
          Wall[lin][col][0] = false;
          Wall[lin][col][1] = false;
          Wall[lin][col][2] = false;
          Wall[lin][col][3] = false;
          break;
         default:
          if (c == 'v') Map[lin][col] = 1;
          if (c == '>') Map[lin][col] = 2;
          if (c == '^') Map[lin][col] = 3;
          if (c == '<') Map[lin][col] = 4;
          Wall[lin][col][0] = true;
          Wall[lin][col][1] = true;
          Wall[lin][col][2] = true;
          Wall[lin][col][3] = true;
          break;
        }
      }
      scanf("\n");
    }
    for (int lin = 0 ; lin < N ; lin++) {
      for (int col = 0 ; col < M ; col++) {
        if (Map[lin][col] == 1) { // 'v'
          Fill(col, lin+1, 0, 1, 0);
          Fill(col-1, lin, -1, 0, 1);
          Fill(col, lin-1, 0, -1, 2);
          Fill(col+1, lin, 1, 0, 3);
        } else if (Map[lin][col] == 2) { // '>'
          Fill(col+1, lin, 1, 0, 0);
          Fill(col, lin+1, 0, +1, 1);
          Fill(col-1, lin, -1, 0, 2);
          Fill(col, lin-1, 0, -1, 3);
        } else if (Map[lin][col] == 3) { // '^'
          Fill(col, lin-1, 0, -1, 0);
          Fill(col+1, lin, 1, 0, 1);
          Fill(col, lin+1, 0, 1, 2);
          Fill(col-1, lin, -1, 0, 3);
        } else if (Map[lin][col] == 4) { // '<'
          Fill(col-1, lin, -1, 0, 0);
          Fill(col, lin-1, 0, +1, 1);
          Fill(col+1, lin, 1, 0, 2);
          Fill(col, lin+1, 0, 1, 3);
        }
      }
    }
    vector<int> C, L, D;
    C.push_back(start_x);
    L.push_back(start_y);
    D.push_back(0);
    Wall[start_x][start_y][0] = false;
    int step = 0;
    while (step < C.size()) {
      int col = C[step];
      int lin = L[step];
      if (col == goal_x && lin == goal_y) break;
      int nh = (D[step]+1)%4;
      int nc[] = { col+1, col, col-1, col };
      int nl[] = { lin, lin+1, lin, lin-1 };
      for (int j = 0 ; j < 4 ; j++) {
        if (nc[j] < 0 || nl[j] < 0) continue;
        if (nc[j] == M || nl[j] == N) continue;
        if (Wall[nl[j]][nc[j]][nh]) continue;
        Wall[nl[j]][nc[j]][nh] = true;
        C.push_back(nc[j]);
        L.push_back(nl[j]);
        D.push_back(D[step]+1);
      }
      step++;
    }
    if (step == C.size()) printf("Case #%d: impossible\n", i);
    else printf("Case #%d: %d\n", i, D[step]);
  }
  return 0;
}

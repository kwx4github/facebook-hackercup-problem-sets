#include <algorithm>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef long long LL;
typedef long double LD;
typedef vector<int> VI;
typedef vector<vector<int> > VII;
#define rep(i, a) for(int i = 0; i < (a); i++)
#define foru(i, s, e) for(int i = (s); i < (e); i++)
#define ford(i, s, e) for(int i = (s); i >= (e); i--)
#define cinNewLine cin.ignore(numeric_limits<streamsize>::max(), '\n');
const double EPS = 1e-9;
const int INF = 2147483647;
const LL LLINF = 9223372036854775807LL;
template <class T> T gcd(T a, T b) { if(b == 0) return a; return gcd(b, a%b); }
template <class T> T lcm(T a, T b) { return (a*b)/gcd(a, b); }

struct State {
	int i, j, t;
	State() {}
	State(int i, int j, int t): i(i), j(j), t(t) {}
};

int main() {
	int T;
	cin >> T;
	foru(t, 1, T+1) {
		cout << "Case #" << t << ": ";
	
		int n, m;
		cin >> n >> m;
		vector<string> s(n);
		rep(i, n) cin >> s[i];
		pair<int, int> start, goal;
		VII map(n, VI(m));
		rep(i, n) {
			rep(j, m) {
				if(s[i][j] == '#') map[i][j] = -1;
				else if(s[i][j] == '>') map[i][j] = 0;
				else if(s[i][j] == 'v') map[i][j] = 1;
				else if(s[i][j] == '<') map[i][j] = 2;
				else if(s[i][j] == '^') map[i][j] = 3;
				else map[i][j] = -2;
				if(s[i][j] == 'S') start = make_pair(i, j);
				else if(s[i][j] == 'G') goal = make_pair(i, j);
			}
		}
		vector<vector<vector<bool> > > ok(n, vector<vector<bool> >(m, vector<bool>(4, true))); 
		rep(k, 4) {
			rep(i, n) {
				// Left to Right
				bool good = true;
				rep(j, m) {
					if(map[i][j] == -2) ok[i][j][k] = good&ok[i][j][k];
					else if(map[i][j] == -1) {
						ok[i][j][k] = false;
						good = true;
					}
					else {
						ok[i][j][k] = false;
						if((map[i][j] + k)%4 == 0) good = false;
					}
				}
				// Right to Left
				good = true;
				ford(j, m-1, 0) {
					if(map[i][j] == -2) ok[i][j][k] = good&ok[i][j][k];
					else if(map[i][j] == -1) {
						ok[i][j][k] = false;
						good = true;
					}
					else {
						ok[i][j][k] = false;
						if((map[i][j] + k)%4 == 2) good = false;
					}
				}
			}
			rep(j, m) {
				// Top to Bottom
				bool good = true;
				rep(i, n) {
					if(map[i][j] == -2) ok[i][j][k] = good&ok[i][j][k];
					else if(map[i][j] == -1) {
						ok[i][j][k] = false;
						good = true;
					}
					else {
						ok[i][j][k] = false;
						if((map[i][j] + k)%4 == 1) good = false;
					}
				}
				// Bottom to Top
				good = true;
				ford(i, n-1, 0) {
					if(map[i][j] == -2) ok[i][j][k] = good&ok[i][j][k];
					else if(map[i][j] == -1) {
						ok[i][j][k] = false;
						good = true;
					}
					else {
						ok[i][j][k] = false;
						if((map[i][j] + k)%4 == 3) good = false;
					}
				}
			}
		}

		queue<State> q;
		vector<vector<vector<bool> > > v(n, vector<vector<bool> >(m, vector<bool>(4, false)));
		q.push(State(start.first, start.second, 0));
		v[start.first][start.second][0] = true;
		bool done = false;
		while(!q.empty()) {
			State cur = q.front();
			q.pop();
			if(cur.i == goal.first && cur.j == goal.second) {
				done = true;
				cout << cur.t << endl;
				break;
			}
			int k = (cur.t+1)%4;
			if(cur.i > 0 && ok[cur.i-1][cur.j][k] && !v[cur.i-1][cur.j][k]) {
				q.push(State(cur.i-1, cur.j, cur.t+1));
				v[cur.i-1][cur.j][k] = true;
			}
			if(cur.i < n-1 && ok[cur.i+1][cur.j][k] && !v[cur.i+1][cur.j][k]) {
				q.push(State(cur.i+1, cur.j, cur.t+1));
				v[cur.i+1][cur.j][k] = true;
			}
			if(cur.j > 0 && ok[cur.i][cur.j-1][k] && !v[cur.i][cur.j-1][k]) {
				q.push(State(cur.i, cur.j-1, cur.t+1));
				v[cur.i][cur.j-1][k] = true;
			}
			if(cur.j < m-1 && ok[cur.i][cur.j+1][k] && !v[cur.i][cur.j+1][k]) {
				q.push(State(cur.i, cur.j+1, cur.t+1));
				v[cur.i][cur.j+1][k] = true;
			}
		}
		if(!done) cout << "impossible" << endl; 
	}
	return 0;
}


#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 105;
int ca;
int n , m ;
char g[N][N];
int t[N][N] , sx , sy , ex , ey;
bool w[4][N][N];
int dx[] = {-1 , 0 , 1 , 0} , dy[] = {0 , 1 , 0 , -1};
int d[4][N][N];
bool in(int x , int y) {
    return x > 0 && y > 0 && x <= n && y <= m;
}

void work() {
    printf("Case #%d: " , ++ ca);

    int i , j , x , y , k;
    scanf("%d%d",&n,&m);
    memset(g , 0 , sizeof(g));
    for (i = 1 ; i <= n ; ++ i)
        scanf("%s" , g[i] + 1);
    memset(t , -1 , sizeof(t));
    for (i = 1 ; i <= n ; ++ i)
        for (j = 1 ; j <= m ; ++ j) {
            if (g[i][j] == '^') t[i][j] = 0;
            if (g[i][j] == '>') t[i][j] = 1;
            if (g[i][j] == 'v') t[i][j] = 2;
            if (g[i][j] == '<') t[i][j] = 3;
            if (g[i][j] == 'S') {
                sx = i , sy = j;
                g[i][j] = '.';
            }
            if (g[i][j] == 'G') {
                ex = i , ey = j;
                g[i][j] = '.';
            }
        }
    memset(w , 0 , sizeof(w));
    for (k = 0 ; k < 4 ; ++ k) {
        for (i = 1 ; i <= n ; ++ i)
            for (j = 1 ; j <= m ; ++ j) {
                if (g[i][j] == '#')
                    w[k][i][j] = 1;
                else if (g[i][j] != '.') {
                    int D = (t[i][j] + k) & 3;
                    x = i , y = j;
                    while (in(x , y) && g[x][y] != '#') {
                        w[k][x][y] = 1;
                        x += dx[D] , y += dy[D];
                    }
                }
            }
    }
    memset(d , -1 , sizeof(d));
    d[0][sx][sy] = 0;
    queue<int> Q;
    Q.push(0) , Q.push(sx) , Q.push(sy);
    int res = 1 << 30;
    while (!Q.empty()) {
        k = Q.front() , Q.pop();
        x = Q.front() , Q.pop();
        y = Q.front() , Q.pop();
        if (ex == x && ey == y)
            res = min(res , d[k][x][y]);
        for (i = 0 ; i < 4 ; ++ i) {
            if (in(x + dx[i] , y + dy[i]) && !w[(k + 1) & 3][x + dx[i]][y + dy[i]]) {
                if (!~d[(k + 1) & 3][x + dx[i]][y + dy[i]]) {
                    d[(k + 1) & 3][x + dx[i]][y + dy[i]] = d[k][x][y] + 1;
                    Q.push((k + 1) & 3);
                    Q.push(x + dx[i]);
                    Q.push(y + dy[i]);
                }
            }
        }
    }
    if (res == 1 << 30)
        puts("impossible");
    else
        printf("%d\n" , res);
}

int main() {
    freopen("~input.txt" , "r" , stdin);
    freopen("~output.txt" , "w" , stdout);
    int _; scanf("%d",&_); while (_ --)
        work();
    return 0;
}

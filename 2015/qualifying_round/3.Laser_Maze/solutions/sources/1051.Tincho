import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	
	public static class Par{
		int m, n;
		
		public Par(int m, int n){
			this.m=m;
			this.n=n;
		}
	}
	
	public static void main(String[] args){
		Scanner sc= new Scanner(System.in);
		int T=sc.nextInt();
		char pos[][];
		boolean walk[][][]; 
		int steps;
		int M, N, l;
		Par start, goal, aux;
		boolean end;
		Queue<Par> q;
		for (int i=1; i<=T; i++){
			q= new LinkedList<Par>();
			M=sc.nextInt();
			N=sc.nextInt();
			start=null;
			goal=null;
			end=false;
			pos= new char[M][N];
			walk= new boolean[M][N][4];
			for (int j=0; j<M; j++){
				pos[j]=sc.next().toCharArray();
				for (int k=0; k<N; k++){
					Arrays.fill(walk[j][k], false);
				}
			}
			for (int j=0; j<M; j++){
				for (int k=0; k<N; k++){
					switch (pos[j][k]){
							case 'S':
								start= new Par(j, k);
								break;
							case 'G':
								goal= new Par(j, k);
								break;
							case '#':
								Arrays.fill(walk[j][k], true);
								break;
							case '<':
								Arrays.fill(walk[j][k], true);
								l=k-1;
								while(l>=0 && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][0]=true;
									l--;
								}
								l=j-1;
								while(l>=0 && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][1]=true;
									l--;
								}
								l=k+1;
								while(l<N && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][2]=true;
									l++;
								}
								l=j+1;
								while(l<M && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][3]=true;
									l++;
								}
								break;
							case '^': 
								Arrays.fill(walk[j][k], true);
								l=k-1;
								while(l>=0 && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][3]=true;
									l--;
								}
								l=j-1;
								while(l>=0 && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][0]=true;
									l--;
								}
								l=k+1;
								while(l<N && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][1]=true;
									l++;
								}
								l=j+1;
								while(l<M && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][2]=true;
									l++;
								}
								break;
							case '>': 
								Arrays.fill(walk[j][k], true);
								l=k-1;
								while(l>=0 && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][2]=true;
									l--;
								}
								l=j-1;
								while(l>=0 && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][3]=true;
									l--;
								}
								l=k+1;
								while(l<N && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][0]=true;
									l++;
								}
								l=j+1;
								while(l<M && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][1]=true;
									l++;
								}
								break;
							case 'v': 
								Arrays.fill(walk[j][k], true);
								l=k-1;
								while(l>=0 && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][1]=true;
									l--;
								}
								l=j-1;
								while(l>=0 && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][2]=true;
									l--;
								}
								l=k+1;
								while(l<N && (pos[j][l]=='.' | pos[j][l]=='S' | pos[j][l]=='G')){
									walk[j][l][3]=true;
									l++;
								}
								l=j+1;
								while(l<M && (pos[l][k]=='.' | pos[l][k]=='S' | pos[l][k]=='G')){
									walk[l][k][0]=true;
									l++;
								}
								break;
					default: break;
					}
				}
			}
			walk[start.m][start.n][0]= false;
			q.add(start);
			steps=0;
			while (!q.isEmpty() && !end){
				l=q.size();
				for (int j=0; j<l; j++){
					aux=q.poll();
					if (walk[aux.m][aux.n][steps%4]==false){
						if (aux.m==goal.m && aux.n==goal.n) end=true;
						else{
							walk[aux.m][aux.n][steps%4]=true;
							if ((aux.m-1)>=0) q.add(new Par(aux.m-1, aux.n));
							if ((aux.n-1)>=0) q.add(new Par(aux.m, aux.n-1));
							if ((aux.m+1)<M) q.add(new Par(aux.m+1, aux.n));
							if ((aux.n+1)<N) q.add(new Par(aux.m, aux.n+1));
						}
					}
				}
				steps++;	
			}
			if (end) System.out.println("Case #"+i+": "+(steps-1));
			else System.out.println("Case #"+i+": impossible");
		}
	}
	
}
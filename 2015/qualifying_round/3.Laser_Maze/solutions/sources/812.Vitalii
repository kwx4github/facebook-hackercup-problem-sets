#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stack>
#include <cassert>
#include <memory.h>
#ifdef NEV_DEBUG
#include <ctime>
#endif
#pragma comment(linker,"/STACK:64000000")
using namespace std;

const double pi = 3.1415926535897932384626433832795;
double eps = 1e-9;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;

#define sz size()
#define mp make_pair
#define pb push_back
#define FOR(i,a,b) for(int i=(a),_b(b); i<_b; ++i)
#define RFOR(i,a,b) for(int i=(a)-1,_b(b); i>=_b; --i)
#define CLR(a,b) memset(a,b,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define sqr(a) ((a)*(a))

char ch[1 << 20];
inline string gs() {scanf("%s", ch);return string(ch);}
inline string gl() {gets(ch);return string(ch);}
inline int gi() {int x;scanf("%d", &x);return x;}

const int MOD = 1000 * 1000 * 1000 + 7;
inline int MUL(int a, int b) {
  return 1ll * a * b % MOD;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main() {
#ifdef NEV_DEBUG
  freopen("in.txt", "r", stdin);
  freopen("out.txt", "w", stdout);
  clock_t beg = clock();
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // < - 0
  // ^ - 1
  // > - 2
  // v - 3
  int dx[] = {0, -1, 0, +1};
  int dy[] = {-1, 0, +1, 0};

  int tn = gi();
  FOR(test, 1, tn + 1) {
    int n = gi();
    int m = gi();
    VS g;
    VS G[4];
    FOR(i, 0, n) g.pb(gs());
    FOR(d, 0, 4) {
      G[d] = g;
      FOR(x, 0, n) FOR(y, 0, m) {
        if (G[d][x][y] == 'S' || G[d][x][y] == 'G') {
          G[d][x][y] = '.';
        } else if (
          G[d][x][y] == '<' ||
          G[d][x][y] == '^' ||
          G[d][x][y] == '>' ||
          G[d][x][y] == 'v') {
          G[d][x][y] = '#';
        }
      }
    }
    int sx = 0;
    int sy = 0;
    int ex = 0;
    int ey = 0;
    FOR(x, 0, n) FOR(y, 0, m) {
      if (g[x][y] == 'S') { sx = x; sy = y; }
      if (g[x][y] == 'G') { ex = x; ey = y; }
      int dd = -1;
      if (g[x][y] == '<') dd = 0;
      if (g[x][y] == '^') dd = 1;
      if (g[x][y] == '>') dd = 2;
      if (g[x][y] == 'v') dd = 3;
      if (dd != -1) {
        FOR(k, 0, 4) {
          int hd = (dd + k) % 4;
          int xx = x + dx[hd];
          int yy = y + dy[hd];
          while (xx >= 0 && yy >= 0 && xx < n && yy < m && G[hd][xx][yy] != '#') {
            G[k][xx][yy] = 'X';
            xx += dx[hd];
            yy += dy[hd];
          }
        }
      }
    }

    map<pair<PII, int>, int> R;
    queue<pair<PII, int>> Q;
    Q.push(mp(mp(sx, sy), 0));
    R[mp(mp(sx, sy), 0)] = 0;
    while (Q.sz) {
      pair<PII, int> p = Q.front();
      Q.pop();
      FOR(d, 0, 4) {
        int x = p.first.first + dx[d];
        int y = p.first.second + dy[d];
        int dd = (p.second + 1) & 3;
        if (x < 0 || y < 0 || x >= n || y >= m) continue;
        if (G[dd][x][y] == '.') {
          pair<PII, int> pp = mp(mp(x, y), dd);
          if (!R.count(pp)) {
            R[pp] = R[p] + 1;
            Q.push(pp);
          }
        }
      }
    }
    int res = 1 << 30;
    FOR(k, 0, 4) if (R.count(mp(mp(ex, ey), k))) res = min(res, R[mp(mp(ex, ey), k)]);

    if (res == 1<<30) printf("Case #%d: impossible\n", test);
    else printf("Case #%d: %d\n", test, res);
  }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef NEV_DEBUG
  fprintf(stderr, "*** Total time: %.3lf ***\n", 1.0 * (clock() - beg) / CLOCKS_PER_SEC);
#endif
  return 0;
}

#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <tuple>
using namespace std;

#define rep(i,b) for(auto i=(0);i<(b);++i)
#define fo(i,a,b) for(auto i=(a);i<=(b);++i)
#define ford(i,a,b) for(auto i=(a);i>=(b);--i)
#define fore(a,b) for(auto a = (b).begin();a!=(b).end();++a)
#define vv vector
#define pb push_back
#define ll long long
#define ld long double
#define ss(a) (int)(a).size()
#define all(x) (x).begin(),(x).end()
#define clr(x,a) memset(x,a,sizeof(x))
#define vi vv<int>
#define vs vv<string>

int cond = (ll)1;
#define db(x) { if (cond > 0) { cond--; rep (xxx, 1) cerr << __LINE__ << " " << #x << " " << x << endl; cerr.flush(); } }

int a, b;
char d[111][111];
int dist[111][111][4];

string block = "<>^v#";

char tur[] = "<^>v";
int da[] = {0, 1, 0, -1};
int db[] = {1, 0, -1, 0};

bool check(int i, int j, int turn) {
    for (int k = 0; k < 5; k++)
        if (block[k] == d[i][j]) return false;
    if (d[i][j] == 0) return false;

    for (int dir = 0; dir < 4; dir++) {
        fo (odl, 1, 1000) {
            int a2 = i + da[dir] * odl;
            int b2 = j + db[dir] * odl;
            for (int k = 0; k < 4; k++) {
                if (tur[k] == d[a2][b2]) {
                    if (k % 4 == (dir + 4 - turn) % 4) {
                        return false;
                    }
                    break;
                }
            }
            if (d[a2][b2] == ' ' || d[a2][b2] == '#' || d[a2][b2] == 0) break;
        }
    }
    return true;
}

#define tup array<int, 3>

tup make_tup(int aa, int bb, int cc) {
    tup res;
    res[0] = aa;
    res[1] = bb;
    res[2] = cc;
    return res;
}

void solve() {
    scanf("%d%d", &a, &b);
    memset(d, 0, sizeof(d));
    memset(dist, -1, sizeof(dist));

    int sa = 0, sb = 0;
    for (int i = 1; i <= a; i++)
        for (int j = 1; j <= b; j++) {
            scanf(" %c", &d[i][j]);
            if (d[i][j] == 'S') {
                sa = i; sb = j;
            }
        }

    deque<tup > q;
    q.push_back(make_tup(sa, sb, 0));
    while (q.size()) {
        tup front = q[0];
        q.pop_front();

        if (front[2] != 0 && !check(front[0], front[1], front[2]))
            continue;

        if (d[front[0]][front[1]] == 'G') {
            printf("%d", front[2]);
            return;
        }

        int &curdist = dist[front[0]][front[1]][front[2] % 4];
        if (curdist != -1)
            continue;
        curdist = front[2];

        for (int dir = 0; dir < 4; dir++) {
            int a2 = front[0] + da[dir];
            int b2 = front[1] + db[dir];
            q.push_back(make_tup(a2, b2, front[2] + 1));
        }
    }
    printf("impossible");
}

int main(int argc, char ** argv) {
    ios::sync_with_stdio(false);

    //  freopen("../1.in","r",stdin);
    //  freopen("../2.in","r",stdin);
    //  freopen("../3.in","r",stdin);
    //  freopen("../A-small.in","r",stdin); freopen("../A-small.out","w",stdout);
    //  freopen("../A-small-attempt0.in","r",stdin);freopen("../A-small-attempt0.out","w",stdout);
    //  freopen("../A-small-attempt1.in","r",stdin);freopen("../A-small-attempt1.out","w",stdout);
    //  freopen("../A-small-attempt2.in","r",stdin);freopen("../A-small-attempt2.out","w",stdout);
    //  freopen("../A-large.in","r",stdin); freopen("../A-large.out","w",stdout);

    cond = argc >= 2 && argv[1][0] == 'q' ? 1 << 30 : 0;
    int t;
    scanf("%d", &t);
    fo (i, 1, t) {
        if (cond)
            cerr << __LINE__ << " " << i << endl;
        printf("Case #%d: ", i);
        solve();
        printf("\n");
        fflush(stdout);
        cerr.flush();
    }
	return 0;
}

#include <fstream>
#include <queue>
#include <cstring>

#define inf 1000010

using namespace std;

ifstream fin ("input.txt");
ofstream fout ("output.txt");

int n,m,test;
int dir1[4] = {0,-1,0,1};
int dir2[4] = {-1,0,1,0};
bool mark[110][110][4],viz[110][110][4];
int d[110][110][4];
string s[110];
queue<int> q1,q2,q3;

void marker (int i, int j, int k)
{
    for (int h = 0; h < 4; ++h, k = (k+1)%4)
    {
        for (int ii = i + dir1[k], jj = j + dir2[k]; ; ii += dir1[k], jj += dir2[k])
        {
            if (ii == n || jj == m || ii == -1 || jj == -1 || (s[ii][jj] != '.' && s[ii][jj] != 'S' && s[ii][jj] != 'G'))
                break;
            mark[ii][jj][h] = 1;
        }
    }

    for (int h = 0; h < 4; ++h)
    {
        mark[i][j][h] = 1;
    }
}

void bfs (int si, int sj, int sh)
{
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        for (int h = 0; h < 4; ++h)
        {
            d[i][j][h] = inf;
        }
    }

    viz[si][sj][sh] = 1;
    d[si][sj][sh] = 0;
    q1.push(si);
    q2.push(sj);
    q3.push (sh);

    while (!q1.empty())
    {
        int i = q1.front();
        int j = q2.front();
        int h = q3.front();
        q1.pop();
        q2.pop();
        q3.pop();

        for (int k = 0; k < 4; ++k)
        {
            int ii = i + dir1[k];
            int jj = j + dir2[k];
            int hh = (h+1)%4;

            if (ii != n && jj != m && ii != -1 && jj != -1 && !mark[ii][jj][hh] && !viz[ii][jj][hh])
            {
                viz[ii][jj][hh] = 1;
                d[ii][jj][hh] = d[i][j][h] + 1;
                q1.push (ii);
                q2.push (jj);
                q3.push (hh);
            }
        }
    }
}

void reset ()
{
    memset (mark,0,sizeof(mark));
    memset (viz,0,sizeof(viz));
}

void solve ()
{
    int si,sj,gi,gj;
    reset ();

    fin>>n>>m;

    for (int i=0; i<n; ++i)
    {
        fin>>s[i];
    }

    for (int i=0; i<n; ++i)
    {
        for (int j=0; j<m; ++j)
        {
            if (s[i][j] == '<')
            {
                marker(i,j,0);
            }
            else if (s[i][j] == '>')
            {
                marker(i,j,2);
            }
            else if (s[i][j] == '^')
            {
                marker(i,j,1);
            }
            else if (s[i][j] == 'v')
            {
                marker(i,j,3);
            }
            else if (s[i][j] == 'S')
            {
                si = i;
                sj = j;
            }
            else if (s[i][j] == 'G')
            {
                gi = i;
                gj = j;
            }
            else if (s[i][j] == '#')
            {
                for (int h = 0; h < 4; ++h)
                 mark[i][j][h] = 1;
            }
        }
    }

    bfs (si,sj,0);

    int minv = inf;

    for (int h = 0; h < 4; ++h)
    {
        minv = min (minv, d[gi][gj][h]);
    }

    if (minv == inf)
     fout<<"impossible";
    else fout<<minv;
}

int main()
{
    fin>>test;

    for (int k=1; k<=test; ++k)
    {
        fout<<"Case #"<<k<<": ";
        solve ();
        fout<<"\n";
    }
}

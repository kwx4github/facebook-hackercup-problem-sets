#include <bits/stdc++.h>

using namespace std;

inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
template<class T> inline T sqr(T x) {return x*x;}

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;

#define all(a)  (a).begin(),(a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define pb push_back
#define mp make_pair
#define each(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define exist(s,e) ((s).find(e)!=(s).end())
#define range(i,a,b) for(int i=(a);i<(b);++i)
#define rep(i,n)  range(i,0,n)
#define clr(a,b) memset((a), (b) ,sizeof(a))
#define dump(x)  cerr << #x << " = " << (x) << endl;
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;

const double eps = 1e-10;
const double pi  = acos(-1.0);
const ll INF =1LL << 62;
const int inf =1 << 29;


int n,m;
string maze[110];

int dist[110][110][4];
bool danger[110][110][4];

int sx,sy;
int gx,gy;


struct state{
	int x,y,cost;
	bool operator<(state arg)const{return cost < arg.cost;}
};

int dijkstra(){
	rep(i,n)rep(j,m)rep(k,4) dist[i][j][k]=inf;
	dist[sx][sy][0]=0;

	state init; init.x=sx,init.y=sy,init.cost=0;
	priority_queue<state> q;
	q.push(init);

	int dx[4]={1,0,-1,0};
	int dy[4]={0,1,0,-1};
	while(!q.empty()){
		state cur=q.top();q.pop();
		if(dist[cur.x][cur.y][cur.cost%4]<cur.cost)
			continue;
		rep(i,4){
			state next=cur;
			next.x+=dx[i];
			next.y+=dy[i];
			next.cost++;
			if(0<=next.x&&next.x<n&&0<=next.y&&next.y<m&&maze[next.x][next.y]=='.'){
				if(!danger[next.x][next.y][next.cost%4]){
					if(next.cost<dist[next.x][next.y][next.cost%4]){
						dist[next.x][next.y][next.cost%4]=next.cost;
						q.push(next);
					}
				}
			}
		}
	}
	int res=inf;
	rep(i,4) res=min(res,dist[gx][gy][i]);
	if(res==inf)
		return -1;
	else
		return res;
}

int main(void){
	int t;
	cin >> t;
	rep(loop,t){
		cin >> n >> m;
		rep(i,n) cin >> maze[i];

		rep(i,n)rep(j,m)rep(k,4) danger[i][j][k]=false;

		rep(i,n)rep(j,m){
			if(maze[i][j]=='S')
				sx=i,sy=j,maze[i][j]='.';
			if(maze[i][j]=='G')
				gx=i,gy=j,maze[i][j]='.';
		}

		int dx[4]={0,1,0,-1};
		int dy[4]={1,0,-1,0};
			
		rep(i,n)rep(j,m){
			int dir;
			switch(maze[i][j]){
				case '>':
					dir=0;
					break;
				case 'v':
					dir=1;
					break;
				case '<':
					dir=2;
					break;
				case '^':
					dir=3;
					break;
				default:
					dir=-1;
					break;	
			}
			if(dir==-1)
				continue;
			rep(k,4){
				int cx=i,cy=j;
				int ndir=(dir+k)%4;
				while(0<=cx&&cx<n&&0<=cy&&cy<m){
					danger[cx][cy][k]=true;
					cx+=dx[ndir],cy+=dy[ndir];
				}
			}
		}
		int res=dijkstra();
		cout << "Case #" << loop+1 << ": ";
		if(res==-1)
			cout << "impossible" << endl;
		else
			cout << res << endl;
	}
	
	return 0;
}
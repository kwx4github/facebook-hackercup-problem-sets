package Round1_2015;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class C {
public static void main(String args[]) throws NumberFormatException,IOException {
		
		Stdin in = new Stdin();
		PrintWriter out = new PrintWriter("out.txt");
		int t=in.readInt();
		int m,n,x,y;
		List<Integer>row;
		List<Integer>col;
		char[][]board;
		int step;
		for(int i=1;i<=t;i++){
			m=in.readInt();
			n=in.readInt();
			board=new char[m][n];
			x=-1;
			y=-1;
			step=0;
			for(int j=0;j<m;j++){
				board[j]=in.readNext().toCharArray();
				if(x==-1){
					for(int k=0;k<board[j].length;k++){
						if(board[j][k]=='G'){
							x=j;
							y=k;
						}
					}
				}
			}
			while(board[x][y]=='G'){
				// move
				row=new ArrayList<Integer>();
				col=new ArrayList<Integer>();
				for(int j=0;j<board.length;j++){
					for(int k=0;k<board[0].length;k++){
						if(board[j][k]=='S'){
							if(j>0&&canMove(j-1,k,board)){
								row.add(j-1);
								col.add(k);
							}
							if(j+1<board.length&&canMove(j+1,k,board)){
								row.add(j+1);
								col.add(k);
							}
							if(k>0&&canMove(j,k-1,board)){
								row.add(j);
								col.add(k-1);
							}
							if(k+1<board[0].length&&canMove(j,k+1,board)){
								row.add(j);
								col.add(k+1);
							}
							board[j][k]='.';
						}
						
					}
				}
				for(int j=0;j<row.size();j++){
					board[row.get(j)][col.get(j)]='S';
				}
				//laser 
				for(int j=0;j<board.length;j++){
					for(int k=0;k<board[0].length;k++){
						if(board[j][k]=='<'){
							board[j][k]='^';
							checkS(board[j][k],j,k,board);
						}else{
							if(board[j][k]=='^'){
								board[j][k]='>';
								checkS(board[j][k],j,k,board);
							}else{
								if(board[j][k]=='>'){
									board[j][k]='v';
									checkS(board[j][k],j,k,board);
								}else{
									if(board[j][k]=='v'){
										board[j][k]='<';
										checkS(board[j][k],j,k,board);
									}
								}
							}
						}
					}
				}
				//print(board,i);
				step++;
				if(step>10*(m+n)){
					break;
				}
			}
			if(board[x][y]=='S')
				print(out,step,i);
			else
				print(out,"impossible",i);
		}
		out.flush();
		out.close();

	}
	private static void checkS(char laster,int i,int j,char[][]board){
		if(laster=='<'){
			for(int k=j-1;k>=0;k--){
				if(canMove(i,k,board)){
					if(board[i][k]=='S')
						board[i][k]='.';
				}else
					break;
			}
		}else{
			if(laster=='^'){
				for(int k=i-1;k>=0;k--){
					if(canMove(k,j,board)){
						if(board[k][j]=='S'){
							board[k][j]='.';
						}
					}else
						break;
				}
			}else{
				if(laster=='>'){
					for(int k=j+1;k<board[0].length;k++){
						if(canMove(i,k,board)){
							if(board[i][k]=='S')
								board[i][k]='.';
						}else
							break;
					}
				}else{
					if(laster=='v'){
						for(int k=i+1;k<board.length;k++){
							if(canMove(k,j,board)){
								if(board[k][j]=='S'){
									board[k][j]='.';
								}
							}else
								break;
						}
					}
				}
			}
		}
	}
	private static boolean canMove(int i,int j,char[][]board){
		return board[i][j]=='.'||board[i][j]=='S'||board[i][j]=='G';
	}
	private static void print(PrintWriter out,Object t,int cases){
		out.println("Case #"+cases+": "+t);
	}
	private static void print(char[][]board,int i){
		System.out.println("case "+i);
		for(char[] line:board){
			System.out.println(new String(line));
		}
	}
	private static class Stdin {
		BufferedReader br;

		StringTokenizer st = new StringTokenizer("");

		private Stdin() throws FileNotFoundException {
			br = new BufferedReader(new FileReader("in.txt"));

		}

		private String readNext() throws IOException {

			while (!st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		private int readInt() throws IOException, NumberFormatException {

			return Integer.parseInt(readNext());

		}

		private long readLong() throws IOException, NumberFormatException {

			return Long.parseLong(readNext());

		}
		private double readDouble() throws IOException, NumberFormatException {

			return Double.parseDouble(readNext());

		}
	}
}

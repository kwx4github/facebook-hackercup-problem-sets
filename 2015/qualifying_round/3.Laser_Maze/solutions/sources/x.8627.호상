#define _CRT_SECURE_NO_WARNINGS

#include <vector>
#include <algorithm>
#include <functional>
#include <iostream>
#include <string>

using namespace std;

#define LEFT 0
#define UPSIDE 1
#define RIGHTSIDE 2
#define DOWN 3

int maze[4][140][140] = { 0, };

pair<int, int> s, g;
vector <pair<int, int>>  vii[5];

void makeMaze()
{
	int tc, tr;
	for (int i = 0; i < 4; i++)
	{
		int cur = (LEFT + i) % 4;
		for (int j = 0; j < vii[cur].size(); j++){
			tc = vii[cur][j].first; tr = vii[cur][j].second;
			while (1){
				tr--;
				if (maze[i][tc][tr] == 0) break;
				else maze[i][tc][tr] = 0;
			}
		}
		cur = (UPSIDE + i) % 4;
		for (int j = 0; j < vii[cur].size(); j++)
		{
			tc = vii[cur][j].first; tr = vii[cur][j].second;
			while (1){
				tc--;
				if (maze[i][tc][tr] == 0) break;
				else maze[i][tc][tr] = 0;
			}
		}

		cur = (RIGHTSIDE + i) % 4;
		for (int j = 0; j < vii[cur].size(); j++){
			tc = vii[cur][j].first; tr = vii[cur][j].second;
			while (1){
				tr++;
				if (maze[i][tc][tr] == 0) break;
				else maze[i][tc][tr] = 0;
			}
		}
		cur = (DOWN + i) % 4;
		for (int j = 0; j < vii[cur].size(); j++){
			tc = vii[cur][j].first; tr = vii[cur][j].second;
			while (1){
				tc++;
				if (maze[i][tc][tr] == 0) break;
				else maze[i][tc][tr] = 0;
			}
		}
	}

}
void printMaze(int n, int m)
{
	for (int k = 0; k < 4; k++){
		for (int i = 0; i <= n + 1; i++)
		{
			for (int j = 0; j <= m + 1; j++)
			{
				if (maze[k][i][j] == 0)
					printf("#  ");
				else printf("%2d ",maze[k][i][j]);
			}
			cout << endl;
		}
		cout << endl;
	}
	cout << endl;
}
void updateMaze(int ct,int tc, int tr, int time)
{
	if (maze[ct][tc][tr] == -1)	{
		maze[ct][tc][tr] = time;
		vii[4].push_back(make_pair(tc, tr));
	}
}
void solve(int sf,int ss)
{
	int cur1 = 0, cur2;
	int time = 0;
	int ct = 0;
	int tc, tr;
	vii[4].clear();
	vii[4].push_back(make_pair(sf, ss));
	cur2 = vii[4].size();
	
	while (1)
	{
		time++;
		ct = time % 4;
		while (1)
		{
			if (cur1 == cur2) break;
			tc = vii[4][cur1].first;	tr = vii[4][cur1].second;
			updateMaze(ct, tc+1, tr, time);
			updateMaze(ct, tc, tr+1, time);
			updateMaze(ct, tc-1, tr, time);
			updateMaze(ct, tc, tr-1, time);
			cur1++;
			if (maze[ct][g.first][g.second] >0) break;
		}
		cur2 = vii[4].size();
		if (cur1 == cur2) break;
		if (maze[ct][g.first][g.second]  >0) break;
	}

}

int main()
{
	//freopen("output.txt", "r", stdin);
	//freopen("output3.txt", "w", stdout);

	int iTestCase = 0;
	int nTestCase = 0;
	cin >> nTestCase;
	for ( iTestCase = 0; iTestCase < nTestCase; iTestCase++)
	{
		int n, m;
		cin >> n >> m;
		memset(maze, 0, sizeof(maze));
		vii[0].clear();vii[1].clear();
		vii[2].clear();vii[3].clear();

		for (int i = 1; i <= n; i++)
		{
			string tstr;
			cin >> tstr;
			for (int j = 1; j <= m; j++)
			{
				maze[0][i][j] = -1;
				if (tstr[j-1] == 'S'){
					s.first = i, s.second = j;
				}
				else if (tstr[j - 1] == 'G'){
					g.first = i, g.second = j;
				}
				else if (tstr[j - 1] == '.'){}
				else{
					maze[0][i][j] = 0;
					if (tstr[j - 1] == '<')	vii[0].push_back(make_pair(i, j));
					else if (tstr[j - 1] == '^')	vii[1].push_back(make_pair(i, j));
					else if (tstr[j - 1] == '>')	vii[2].push_back(make_pair(i, j));
					else if (tstr[j - 1] == 'v')	vii[3].push_back(make_pair(i, j));
				}
				maze[1][i][j] = maze[2][i][j] = maze[3][i][j] = maze[0][i][j];
			}
		}

		makeMaze();
		solve(s.first,s.second);
	//	printMaze(n, m);
		
		int tmax = max(
			max(maze[0][g.first][g.second], maze[1][g.first][g.second]), 
			max(maze[2][g.first][g.second], maze[3][g.first][g.second]));
		
		printf("Case #%d: ", iTestCase + 1);
		if (tmax == 0) cout << "impossible" << endl;
		else cout << tmax << endl;

	}
	return 0;
}
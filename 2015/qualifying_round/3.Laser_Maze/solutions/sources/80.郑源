#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<tuple>
#include<queue>
#define X(s) get<0>(s)
#define Y(s) get<1>(s)
#define T(s) get<2>(s)
#define D(s) get<2>(s)
#define mt make_tuple
using namespace std;
typedef tuple<int,int,int> tp;
const int maxn=105;
const char dir[]="^>v<";
const int dx[]={-1,0,1,0};
const int dy[]={0,1,0,-1};
int T,cas=1,n,m,cnt,ans;
tp laser[maxn*maxn];
char mp[maxn][maxn];
int vis[maxn][maxn][4];
tp s;
queue<tp> q;
bool IN(int x,int y){return x>=0&&x<n&&y>=0&&y<m;}
bool judge(int x,int y,int t)
{
    for (int i=0;i<cnt;i++)
    {
        int lx,ly,d;
        tie(lx,ly,d)=laser[i];
        d=(d+t)%4;
        if (x==lx&&y==ly) return false;
        for (int j=1;;j++)
        {
            int nx=lx+dx[d]*j,ny=ly+dy[d]*j;
            if (!IN(nx,ny)||!(mp[nx][ny]=='S'||mp[nx][ny]=='G'||mp[nx][ny]=='.')) break;
            if (nx==x&&ny==y) return false;
        }
    }
    return true;
}
void BFS()
{
    memset(vis,-1,sizeof(vis));
    vis[X(s)][Y(s)][T(s)%4]=0;
    q.emplace(s);
    ans=19940820;
    while (!q.empty())
    {
        int x,y,t;tie(x,y,t)=q.front();q.pop();
        if (mp[x][y]=='G') ans=min(ans,t);
        for (int i=0;i<4;i++)
        {
            int nx,ny,nt;
            tie(nx,ny,nt)=mt(x+dx[i],y+dy[i],t+1);
            if (!IN(nx,ny)||mp[nx][ny]=='#') continue;
            if (vis[nx][ny][nt%4]!=-1||!judge(nx,ny,nt)) continue;
            vis[nx][ny][nt%4]=nt;
            q.emplace(mt(nx,ny,nt));
        }
    }
}
int main()
{
    //freopen("laser_maze.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    scanf("%d",&T);
    while (T--)
    {
        scanf("%d%d",&n,&m);cnt=0;
        for (int i=0;i<n;i++) scanf("%s",mp[i]);
        for (int i=0;i<n;i++)
            for (int j=0;j<m;j++)
                if (mp[i][j]=='S')
                    s=mt(i,j,0);
                else if (strchr(dir,mp[i][j])!=NULL)
                    laser[cnt++]=mt(i,j,strchr(dir,mp[i][j])-dir);
        BFS();
        printf("Case #%d: ",cas++);
        if (ans==19940820) puts("impossible");
        else printf("%d\n",ans);
    }
    return 0;
}

/*
 * 55.cpp
 *
 *  Created on: 10.01.2015
 *      Author: starwix
 */
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
const int N = 100, D = 4;
int n, m;
int s[N][N], used[N][N];
pii start, goal;

int DIR[D][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};

inline bool isMaze(int i, int j) {
	return i >= 0 && i < m && j >= 0 && j < n;
}

bool good(int x, int y, int z) {
	if (isMaze(x, y) && s[x][y] == -1 && used[x][y] < 100) {
		for(int i = 0; i < D; i++) {
			int tx = x, ty = y;
			while(isMaze(tx, ty) && s[tx][ty] == -1) {
				tx += DIR[i][0], ty += DIR[i][1];
			}
			if (isMaze(tx, ty) && s[tx][ty] > 0 && (s[tx][ty] + z) % 4 == i) {
				return false;
			}
		}
		return true;
	}
	return false;
}

int f() {
	queue<pair<pii, int> > q;
	q.push(make_pair(start, 0));

	while(!q.empty()) {
		pii cur = q.front().first;
		int cnt = q.front().second;
		q.pop();
		if (cur == goal) {
			return cnt;
		}

		for(int i = 0; i < D; i++) {
			int x = cur.first + DIR[i][0], y = cur.second + DIR[i][1];
			if(good(x, y, cnt + 1)) {
				q.push(make_pair(pii(x, y), cnt + 1));
				used[x][y]++;
			}
		}
	}

	return -1;
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int t;
	scanf("%d", &t);
	for(int k = 1; k <= t; k++) {
		memset(used, 0, sizeof(used));

		scanf("%d%d", &m, &n);
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				char c;
				scanf(" %c", &c);
				switch (c) {
					case '#': s[i][j] = -2; break;
					case '^': s[i][j] = 0; break;
					case '>': s[i][j] = 1; break;
					case 'v': s[i][j] = 2; break;
					case '<': s[i][j] = 3; break;
					case 'S': s[i][j] = -1, start = pii(i, j); break;
					case 'G': s[i][j] = -1, goal = pii(i, j); break;
					default: s[i][j] = -1; break;
				}
			}
		}

		int ans = f();
		if (ans < 0) {
			printf("Case #%d: impossible\n", k);
		} else {
			printf("Case #%d: %d\n", k, ans);
		}
	}
}




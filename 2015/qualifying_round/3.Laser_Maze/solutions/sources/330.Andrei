#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <cstdio>

using namespace std;

const int INF = 0x3f3f3f3f;
const int dx[] = {0, 0, -1, 1}, dy[] = {1, -1, 0, 0};

#define x first
#define y second

typedef pair<int, pair<int, int>> iii;

const int N = 100;

char nexti[256];
bool fst[4][N][N];
int dist[4][N][N];

vector<string> maze(N);

bool comp(int k, int i, int j) {
  if (maze[i][j] == '.' || maze[i][j] == 'S' || maze[i][j] == 'G') {
    fst[k][i][j] = 1;

    return true;
  }

  return false;
}

int main() {
  int nr_tests;

  cin >> nr_tests;

  nexti['.'] = '.';
  nexti['S'] = 'S';
  nexti['G'] = 'G';
  nexti['#'] = '#';
  nexti['^'] = '>';
  nexti['>'] = 'v';
  nexti['v'] = '<';
  nexti['<'] = '^';

  for (int t = 1; t <= nr_tests; t++) {
    int n, m;

    cin >> n >> m;

    for (int i = 0; i < n; i++) {
      cin >> maze[i];
    }

    memset(fst, 0, sizeof(fst));

    int sx, sy, px, py;

    for (int k = 0; k < 4; k++) {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
          if (maze[i][j] == '^') {
            fst[k][i][j] = 1;
            for (int p = i - 1; p >= 0 && comp(k, p, j); p--);
          }
          if (maze[i][j] == '<') {
            fst[k][i][j] = 1;
            for (int p = j - 1; p >= 0 && comp(k, i, p); p--);
          }
          if (maze[i][j] == 'v') {
            fst[k][i][j] = 1;
            for (int p = i + 1; p < n && comp(k, p, j); p++);
          }
          if (maze[i][j] == '>') {
            fst[k][i][j] = 1;
            for (int p = j + 1; p < m && comp(k, i, p); p++);
          }
          if (maze[i][j] == '#') {
            fst[k][i][j] = 1;
          }

          if (maze[i][j] == 'S') {
            sx = i, sy = j;
          }
          if (maze[i][j] == 'G') {
            px = i, py = j;
          }
          maze[i][j] = nexti[maze[i][j]];
        }
      }
    }

    string rez = "";
    queue<iii> q;
    memset(dist, 0xff, sizeof(dist));

    q.push(make_pair(0, make_pair(sx, sy)));
    dist[0][sx][sy] = 0;

    while (!q.empty()) {
      iii cur = q.front();
      q.pop();

      int nk = (cur.x + 1) % 4;
      for (int k = 0; k < 4; k++) {
        int xx = cur.y.x + dx[k], yy = cur.y.y + dy[k];

        if (xx >= 0 && xx < n && yy >= 0 && yy < m && dist[nk][xx][yy] == -1 &&
            !fst[nk][xx][yy]) {
          q.push(make_pair(nk, make_pair(xx, yy)));

          dist[nk][xx][yy] = dist[cur.x][cur.y.x][cur.y.y] + 1;
        }
      }
    }

    /*for (int k = 0; k < 4; k++) {
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
          fprintf(stderr, "%d %d %d -- %d\n", k, i, j, dist[k][i][j]);
        }
      }
    }*/

    int mn = INF;

    for (int k = 0; k < 4; k++) {
      if (dist[k][px][py] != -1) {
        mn = min(mn, dist[k][px][py]);
      }
    }

    if (mn == INF) {
      rez = ": impossible";
    } else {
      rez = ": " + to_string(mn);
    }

    cout << "Case #" << t << rez << "\n";
  }

  return 0;
}



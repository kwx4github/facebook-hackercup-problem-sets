#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <sstream>
#include <cstring>
#include <vector>
#include <string>
#include <cmath>
#include <queue>
using namespace std;
#define pb push_back
#define pii pair<int,  int>
#define x first
#define y second
#define mp make_pair
#define L(s) (int)(s).size()
#define ll long long
#define all(s) (s).begin(), (s).end()
#define VI vector<int>
int t, n, m;
char a[111][111];
int kill[111][111][4];
int dp[111][111][4];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
map<char, int> dirs;
queue<pair<pii, int> > q;
int main() {
	freopen("laser_maze.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	dirs['^'] = 0;
	dirs['>'] = 1;
	dirs['v'] = 2;
	dirs['<'] = 3;
	cin >> t;
	for(int tc = 1; tc <= t; ++tc) {
		cin >> n >> m;
		for(int i = 0; i < n; ++i) {
			for(int j = 0; j < m; ++j) {
				cin >> a[i][j];
			}
		}
		memset(kill, 0, sizeof(kill));
		pii st, fn;
		for(int i = 0; i < n; ++i) {
			for(int j = 0; j < m; ++j) {
				if (a[i][j] == 'S') {
					st = mp(i, j);
					a[i][j] = '.';
				}
				if (a[i][j] == 'G') {
					fn = mp(i, j);
					a[i][j] = '.';
				}
				if (dirs.count(a[i][j])) {
					int way = dirs[a[i][j]];
					for(int add = 0; add < 4; ++add) {
						int cx = i, cy = j;
						do {
							cx += dx[(way + add) % 4];
							cy += dy[(way + add) % 4];
							if (cx < 0 || cx >= n || cy < 0 || cy >= m) {
								break;
							}
							if (a[cx][cy] == '#' || dirs.count(a[cx][cy])) {
								break;
							}
							kill[cx][cy][add] = 1;
						} while(1);
					}
				}
			}
		}
		memset(dp, 63, sizeof(dp));
		dp[st.x][st.y][0] = 0;
		q.push(mp(mp(st.x, st.y), 0));
		while(!q.empty()) {
			pii cur = q.front().x;
			int mod = q.front().y;
	//		cerr << cur.x << " " << cur.y << " " << mod << endl;
			q.pop();
			for(int way = 0; way < 4; ++way) {
				pii nxt = mp(cur.x + dx[way], cur.y + dy[way]);
				if (nxt.x < 0 || nxt.x >= n || nxt.y < 0 || nxt.y >= m) continue;
				if (a[nxt.x][nxt.y] != '.') continue;
				if (kill[nxt.x][nxt.y][(mod + 1) % 4]) continue;
				if (dp[nxt.x][nxt.y][(mod + 1) % 4] < 1e9) continue;
				dp[nxt.x][nxt.y][(mod + 1) % 4] = dp[cur.x][cur.y][mod] + 1;
				q.push(mp(nxt, (mod + 1) % 4));
			}
		}
		int ans = *min_element(dp[fn.x][fn.y], dp[fn.x][fn.y] + 4);
		cout << "Case #" << tc << ": ";
		if (ans > 1e9) cout << "impossible\n"; else
			cout << ans << endl;
	//	exit(0);
	}
}

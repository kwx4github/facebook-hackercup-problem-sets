#pragma comment(linker, "/STACK:16777216")
#include <bits/stdc++.h>
using namespace std;

#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define SZ(a) ((int)a.size())
#define ALL(a) a.begin(),a.end()
#define FOREACH(i, c) for( __typeof( (c).begin() ) i = (c).begin(); i != (c).end(); ++i )
#define AREA2(x1,y1,x2,y2,x3,y3) ( x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2) )
#define SQR(x) ((x)*(x))
#define STR string
#define IT iterator
#define ff first
#define ss second
#define MP make_pair
#define EPS 1e-9
#define INF 2e9

typedef long long Long;
typedef pair<long,long> Pll;

#define MAX 107

long IR[] = { 0,1,0,-1 };
long IC[] = { 1,0,-1,0 };

long R,C;
char Grid[MAX+7][MAX+7];
bool isB[4][MAX+7][MAX+7];
bool vi[4][MAX+7][MAX+7];

long Bfs( long str, long stc ){
    queue< pair<Pll,long> > q;
    long i;
    memset( vi, 0, sizeof(vi) );
    vi[0][str][stc] = true;
    q.push( MP( MP( str, stc ), 0 ) );
    while( !q.empty() ){
        pair<Pll,long> nw = q.front();
        q.pop();
        //if( isB[nw.ss%4][nw.ff.ff][nw.ff.ss] ) continue;
        for( i=0;i<4;i++ ){
            long r = nw.ff.ff + IR[i];
            long c = nw.ff.ss + IC[i];
            long m = nw.ss + 1;
            if( r<1 or r>R or c<1 or c>C ) continue;
            if( isB[m%4][r][c] or vi[m%4][r][c] ) continue;
            vi[m%4][r][c] = true;
            if( Grid[r][c]=='G' ) return m;
            q.push( MP( MP( r, c ), m ) );
        }
    }
    return -1;
}

int main( void )
{
    int i,j,t,Icase,k=0;

    //freopen("text1.txt","r",stdin );
    freopen("c.in","r",stdin );
    freopen("c.out","w",stdout );

    cin>>Icase;
    while( Icase-- ){
        cin>>R>>C;
        long str,stc;
        for( i=1;i<=R;i++ ){
            for( j=1;j<=C;j++ ){
                cin>>Grid[i][j];
                if( Grid[i][j]=='S' ) str = i, stc = j;
                if( Grid[i][j]=='>' ) Grid[i][j] = 0;
                if( Grid[i][j]=='v' ) Grid[i][j] = 1;
                if( Grid[i][j]=='<' ) Grid[i][j] = 2;
                if( Grid[i][j]=='^' ) Grid[i][j] = 3;
            }
        }
        memset( isB,0,sizeof(isB) );
        for( t=0;t<4;t++ ){
            for( i=1;i<=R;i++ ){
                for( j=1;j<=C;j++ ){
                    if( Grid[i][j]=='.' or Grid[i][j]=='S' or Grid[i][j]=='G' ) continue;
                    else if( Grid[i][j]=='#' ) isB[t][i][j] = true;
                    else{//printf("here %ld\n",Grid[i][j] );
                        long r,c,cell = ( Grid[i][j]+t )%4;
                        for( c=j;c<=C and cell==0;c++ ) isB[t][i][c] = true;
                        for( r=i;r<=R and cell==1;r++ ) isB[t][r][j] = true;
                        for( c=j;c>=1 and cell==2;c-- ) isB[t][i][c] = true;
                        for( r=i;r>=1 and cell==3;r-- ) isB[t][r][j] = true;
                    }
                }
            }
        }
        long ans = Bfs( str, stc );
        if( ans>=0 ) printf("Case #%ld: %ld\n",++k,ans );
        else printf("Case #%ld: impossible\n",++k );
    }

    return 0;
}

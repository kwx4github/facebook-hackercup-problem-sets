#include<cstdio>
#include<queue>
#define X first
#define Y second
using namespace std;
int n,m,stamp;
char ar[105][105];
int dy[]={-1,0,0,+1};
int dx[]={0,-1,+1,0};
char dir[5][5]={{'<','^','>','v','\0',},
				{'^','>','v','<','\0'},
				{'>','v','<','^','\0'},
				{'v','<','^','>','\0'}};
int check_up(int x,int y,int level)
{
	int flag=0;
	for(int i=x-1;i>=0;i--)
	{
		if(ar[i][y]=='#')
			return 0;
		else if(ar[i][y]=='.' || ar[i][y]=='G' || ar[i][y]=='S')
			continue;
		for(int j=0;j<4;j++)
		{
			if(ar[i][y]==dir[j][0])
			{
				flag=1;
				if(dir[j][level%4]=='v')
				{
					return 1;
				}
			}
		}
		if(flag)
			return 0;
	}
	return 0;
}
int check_down(int x,int y,int level)
{
	int flag=0;
	for(int i=x+1;i<n;i++)
	{
		if(ar[i][y]=='#')
			return 0;
		else if(ar[i][y]=='.' || ar[i][y]=='G' || ar[i][y]=='S')
			continue;
		for(int j=0;j<4;j++)
		{
			if(ar[i][y]==dir[j][0])
			{
				flag=1;
				if(dir[j][level%4]=='^')
				{
					return 1;
				}
			}
		}
		if(flag)
			return 0;
	}
	return 0;
}
int check_left(int x,int y,int level)
{
	int flag=0;
	for(int i=y-1;i>=0;i--)
	{
		if(ar[x][i]=='#')
			return 0;
		else if(ar[x][i]=='.' || ar[x][i]=='G' || ar[x][i]=='S')
			continue;
		for(int j=0;j<4;j++)
		{
			if(ar[x][i]==dir[j][0])
			{
				flag=1;
				if(dir[j][level%4]=='>')
				{
					return 1;
				}
			}
		}
		if(flag)
			return 0;
	}
	return 0;
}
int check_right(int x,int y,int level)
{
	int flag=0;
	for(int i=y+1;i<m;i++)
	{
		if(ar[x][i]=='#')
			return 0;
		else if(ar[x][i]=='.' || ar[x][i]=='G' || ar[x][i]=='S')
			continue;
		for(int j=0;j<4;j++)
		{
			if(ar[x][i]==dir[j][0])
			{
				flag=1;
				if(dir[j][level%4]=='<')
				{
					return 1;
				}
			}
		}
		if(flag)
			return 0;
	}
	return 0;
}
int check(int x,int y,int level)
{
	int z;
	z=check_right(x,y,level);
	z|=check_down(x,y,level);
	z|=check_up(x,y,level);
	z|=check_left(x,y,level);
	return z;
}
		
int bfs(int s_x,int s_y,int f_x,int f_y)
{
	int x,y,x1,y1,level,flag,vis[4][105][105]={};
	pair<int,pair<int,int> > temp;
	queue<pair<int,pair<int,int> > >Q;
	Q.push(make_pair(0,make_pair(s_x,s_y)));
	vis[0][s_x][s_y]++;
	while(!Q.empty())
	{
		temp=Q.front();
		Q.pop();
		x=temp.Y.X;
		y=temp.Y.Y;
		level=temp.X;
		if(x==f_x && y==f_y)
			return level;
		for(int i=0;i<4;i++)
		{
			x1=x+dx[i];
			y1=y+dy[i];
			if(x1>=0 && x1<n && y1>=0 && y1<m)
			{
				if(!check(x1,y1,level+1))
				{					
					if((ar[x1][y1]=='.' || ar[x1][y1]=='S' || ar[x1][y1]=='G') && !vis[(level+1)%4][x1][y1])
					{
						vis[(level+1)%4][x1][y1]=1;
						Q.push(make_pair(level+1,make_pair(x1,y1)));
					}
				}
			}
		}
	}
	return -1;
}
int main()
{
	int t,f_x,f_y,s_x,s_y,x,y=1;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n,&m);
		for(int i=0;i<n;i++)
			scanf("%s",&ar[i]);
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(ar[i][j]=='S')
				{
					s_x=i;
					s_y=j;
				}
				else if(ar[i][j]=='G')
				{
					f_x=i;
					f_y=j;
				}
			}
		}
		x=bfs(s_x,s_y,f_x,f_y);
		if(x==-1)
			printf("Case #%d: impossible\n",y++);
		else
			printf("Case #%d: %d\n",y++,x);
	}
	return 0;
}
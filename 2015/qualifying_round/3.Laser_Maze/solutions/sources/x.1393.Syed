#include <iostream>
#include <iomanip>
#include <cstdio>
#include <set>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <utility>
#include <iterator>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <string>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cctype>
#include <fstream>
#include <climits>
#include <numeric>
#include <bitset>
#include <complex>
#include <functional>
#include <list>
using namespace std;
typedef long long int LL;
typedef unsigned long long int uLL;
inline int _Int() { char INPUT[15]; scanf("%s",INPUT); return atoi(INPUT); }
inline LL _LL() { char INPUT[70]; scanf("%s",INPUT); return atoll(INPUT); }
LL bigMod(LL A,LL P,int M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=(R*A)%M; A=(A*A)%M; } return R; } /** (A^P) % M **/
LL bigMul(LL A,LL B,LL M) { LL R=0; for(A%=M; B; B>>=1) { if(B&1) R=(R+A)%M; A=(A+A)%M; } return R; } /** (A*B) % M **/
LL _bigMod(LL A,LL P,LL M){ LL R=1; for(A%=M; P; P>>=1) { if(P&1) R=bigMul(R,A,M); A=bigMul(A,A,M); } return R; } /** advance bigMod **/
template<class T>T GCD(T x, T y) { while(x) x^=y^=x^=y%=x; return y; } /** GCD(a,b) **/
#define pb  push_back
#define pob pop_back
#define pi  acos(-1)
/*************************************************************************************************************************
**                                            Syed Zafrul Lipu (ShockProof)                                              *
**                                            CSE, University of Asia Pacific                                            *
**************************************************************************************************************************/

bool isTurret(char c) {
    if(c=='>'||c=='<'||c=='^'||c=='v')
        return 1;
    return 0;
}
int n,m;
char s[111][111];
bool danger[111][111][4];
void seeting(int i, int j, int AA, int BB, int CC, int DD)
{
    for(int k=i+1; k<n; k++) {
        if( s[k][j]=='#' || isTurret(s[k][j]) ) break;
        danger[k][j][AA]=1;  /**  vvvvv  **/
    }
    for(int k=j-1; k>=0; k--) {
        if( s[i][k]=='#' || isTurret(s[i][k]) ) break;
        danger[i][k][BB]=1;  /**  <<<<  **/
    }
    for(int k=i-1; k>=0; k++) {
        if( s[k][j]=='#' || isTurret(s[k][j]) ) break;
        danger[k][j][CC]=1;  /**  ^^^^  **/
    }
    for(int k=j+1; k<m; k++) {
        if( s[i][k]=='#' || isTurret(s[i][k]) ) break;
        danger[i][k][DD]=1;  /**  >>>>  **/
    }
}
void setDenger()
{
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(s[i][j]=='>')
                seeting(i,j,1,2,3,0);
            if(s[i][j]=='v')
                seeting(i,j,0,1,2,3);
            if(s[i][j]=='<')
                seeting(i,j,3,0,1,2);
            if(s[i][j]=='^')
                seeting(i,j,2,3,0,1);
        }
    }
}

struct node{
    int x, y;
    node() {}
    node(int XX, int YY) {
        x=XX;
        y=YY;
    }
};

int direction[2][4]= {   {1,0,-1,0}, {0,1,0,-1}    };
int dist[111][111];
int vis[111][111];

int ans;
void bfs(int sI, int sJ)
{
    memset(dist,-1,sizeof(dist) );
    memset(vis,0,sizeof(vis) );
    dist[sI][sJ]=0, ans=-1;

    queue<node>q;
    node u(sI,sJ),v;

    q.push(u);
    while(q.size() ) {
        u=q.front();
        q.pop();
        ///cout << endl <<u.x<<u.y<<" " << dist[u.x][u.y] <<" -> "; ///
        for(int i=0; i<4; i++) {

            v.x=u.x+direction[0][i];
            v.y=u.y+direction[1][i];

            if(s[v.x][v.y]=='#') continue;
            if( vis[v.x][v.y]>10 ) continue;
            if(v.x<0||v.x>=n||v.y<0||v.y>=m) continue;
            if( isTurret(s[v.x][v.y])  ) continue;

            dist[v.x][v.y]=dist[u.x][u.y]+1;
            if( danger[v.x][v.y][ (dist[v.x][v.y]%4) ]==1 ) continue;
            ///cout <<v.x<<" "<<v.y<<" "<< dist[v.x][v.y]%4 <<"   "; ///

            vis[v.x][v.y]++;
            if(s[v.x][v.y]=='G') {
                ans=dist[v.x][v.y];
                return;
            }
            q.push(v);
        }
        ///
    }
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_out.txt","w",stdout);

    int t=_Int(),tc=0;
    while(t--) {

        n=_Int();
        m=_Int();

        for(int i=0; i<n; i++)
            scanf("%s",s[i]);
        memset(danger,0,sizeof(danger));
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
            if(s[i][j]=='S') {
                setDenger();
                bfs(i,j);
                if( ans!=-1 )
                    printf("Case #%d: %d\n",++tc,ans);
                else printf("Case #%d: impossible\n",++tc);
            }
    }

    return 0;
}

#include <vector>
#include <iostream>
using namespace std;
char turrets[4]={'<','^','>','v'};
bool isturret(char a)
{
	return a=='<' || a=='>' || a=='v' || a=='^';
}
char turretstate(char t,int step)
{
	step%=4;
	int loc=0;
	for(;loc<4;loc++)
		if(turrets[loc]==t)
			break;
	return turrets[(loc+step)%4];
}
void printdp(int*** dp,int x,int y)
{
	for(int i=0;i<x;i++)
	{
		for(int j=0;j<y;j++)
		{
			for(int p=0;p<4;p++)
			{
				cout << i << " " << j <<" " << p <<": ";
				cout << dp[i][j][p] << endl;
			}
			cout << endl;
		}
	}
	cout << "----------------"<<endl;
}
void solvemaze(char **maze,int*** dp,int x,int y,int step,int maxx,int maxy)
{
	if(maze[x][y]=='G')
	{
		if(dp[x][y][step%4]!=-2)
		{	
			for(int i=x+1;i<maxx;i++)
			{
				//cout << "x+1" << endl;
				if(maze[i][y]=='#')
					break;
				if(isturret(maze[i][y]) && turretstate(maze[i][y],step)=='^')
				{
					dp[x][y][step%4]=-2;
					break;
				}
			}
			for(int i=x-1;i>-1;i--)
			{
				//cout << "x-1" << endl;
				if(maze[i][y]=='#')
					break;
				if(isturret(maze[i][y]) && turretstate(maze[i][y],step)=='v')
				{
					dp[x][y][step%4]=-2;
					break;
				}
			}
			for(int i=y+1;i<maxy;i++)
			{
			//	cout << "y+1" << endl;
				//cout << "here" << endl;
				if(maze[x][i]=='#')
					break;
				if(isturret(maze[x][i]) && turretstate(maze[x][i],step)=='<')
				{
					dp[x][y][step%4]=-2;
					break;
				}
			}
			for(int i=y-1;i>-1;i--)
			{
		//		cout << "y-1" << endl;
				//cout << "here" << endl;
				if(maze[x][i]=='#')
					break;
				if(isturret(maze[x][i]) && turretstate(maze[x][i],step)=='>')
				{
					dp[x][y][step%4]=-2;
					break;
				}
			}
			if(dp[x][y][step%4]==-1)
				dp[x][y][step%4]=step;
			else if(dp[x][y][step%4]!=-2 && step < dp[x][y][step%4])
				dp[x][y][step%4]=step;
		}
	}
	else
	{
		if(dp[x][y][step%4]!=-2)
		{
			if(step!=0)
			{
				for(int i=x+1;i<maxx;i++)
				{
					//cout << "x+1" << endl;
					if(maze[i][y]=='#')
						break;
					if(isturret(maze[i][y]) && turretstate(maze[i][y],step)=='^')
					{
						dp[x][y][step%4]=-2;
						break;
					}
				}
				for(int i=x-1;i>-1;i--)
				{
					//cout << "x-1" << endl;
					if(maze[i][y]=='#')
						break;
					if(isturret(maze[i][y]) && turretstate(maze[i][y],step)=='v')
					{
						dp[x][y][step%4]=-2;
						break;
					}
				}
				for(int i=y+1;i<maxy;i++)
				{
					//cout << "y+1" << endl;
					if(maze[x][i]=='#')
						break;
					if(isturret(maze[x][i]) && turretstate(maze[x][i],step)=='<')
					{
						dp[x][y][step%4]=-2;
						break;
					}
				}
				for(int i=y-1;i>-1;i--)
				{
				//	cout << "this:"<<"y-1" << endl;
					if(maze[x][i]=='#')
						break;
					if(isturret(maze[x][i]) && turretstate(maze[x][i],step)=='>')
					{
						dp[x][y][step%4]=-2;
						break;
					}
				}
			}
			if(dp[x][y][step%4]==-1)
			{
				dp[x][y][step%4]=step;
				if((y+1)<maxy && (maze[x][y+1]=='.' || maze[x][y+1]=='G'))
					solvemaze(maze,dp,x,y+1,step+1,maxx,maxy);
				if((y-1)>=0 && (maze[x][y-1]=='.'|| maze[x][y-1]=='G'))
					solvemaze(maze,dp,x,y-1,step+1,maxx,maxy);
				if((x-1)>=0 && (maze[x-1][y]=='.'|| maze[x-1][y]=='G'))
					solvemaze(maze,dp,x-1,y,step+1,maxx,maxy);
				if((x+1)<maxx && (maze[x+1][y]=='.'|| maze[x+1][y]=='G'))
					solvemaze(maze,dp,x+1,y,step+1,maxx,maxy);
			}
			else if(dp[x][y][step%4]!=-2 &&step < dp[x][y][step%4])
			{
				dp[x][y][step%4]=step;
				if((y+1)<maxy && (maze[x][y+1]=='.'|| maze[x][y+1]=='G'))
					solvemaze(maze,dp,x,y+1,step+1,maxx,maxy);
				if((y-1)>=0 && (maze[x][y-1]=='.'|| maze[x][y-1]=='G'))
					solvemaze(maze,dp,x,y-1,step+1,maxx,maxy);
				if((x-1)>=0 && (maze[x-1][y]=='.'|| maze[x-1][y]=='G'))
					solvemaze(maze,dp,x-1,y,step+1,maxx,maxy);
				if((x+1)<maxx && (maze[x+1][y]=='.'|| maze[x+1][y]=='G'))
					solvemaze(maze,dp,x+1,y,step+1,maxx,maxy);		
			}
		}
	}
	//printdp(dp,maxx,maxy);
}
int main()
{
	int T;
	cin >> T;
	for(int asd=0;asd<T;asd++)
	{
		int M,N;
		cin >> M >> N;
		char **maze=new char*[M];
		for(int i=0;i<M;i++)
			maze[i]=new char[N];
		int ***dp=new int**[M];
		for(int i=0;i<M;i++)
		{
			dp[i]=new int*[N];
			for(int j=0;j<N;j++)
				dp[i][j]=new int[4];
		}
		for(int i=0;i<M;i++)
			for(int j=0;j<N;j++)
				for(int p=0;p<4;p++)
					dp[i][j][p]=-1;
		int startx,starty,finishx,finishy;
		for(int i=0;i<M;i++)
			for(int j=0;j<N;j++)
			{
				cin >> maze[i][j];
				if(maze[i][j]=='S')
				{
					startx=i;
					starty=j;
					maze[i][j]='.';
				}
				else if(maze[i][j]=='G')
				{
					finishx=i;
					finishy=j;
				}
			}
		solvemaze(maze,dp,startx,starty,0,M,N);
		int min=dp[finishx][finishy][0];
		for(int i=1;i<4;i++)
		{
			if(min==-2 || min==-1)
				min=dp[finishx][finishy][i];
			else
			{
				if(dp[finishx][finishy][i]>=0&&dp[finishx][finishy][i]<min)
					min=dp[finishx][finishy][i];
			}
		}
/*		for(int i=0;i<4;i++)
			cout << dp[finishx][finishy][i] << endl;
	*/
		cout << "Case #"<<asd+1<<": ";	
		if(min==-2 || min==-1)cout <<"impossible"<<endl;
		else cout<<min<<endl;
	}
	return 0;
}

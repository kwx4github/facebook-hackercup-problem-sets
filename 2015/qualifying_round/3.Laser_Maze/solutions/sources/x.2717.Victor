#include <cstdio>
#include <cmath>
#include <algorithm>
#include <queue>
#include <cstring>
#include <functional>

using namespace std;

int seen[105][105][4];
int len[105][105][4];
int laser[105][105][4];
char arr[105][105];
int r,c;

int dx[4]={1,0,-1,0};
int dy[4]={0,-1,0,1};

bool blocking(char c){
	return c =='>' || c == 'v' || c == '<' || c== '^' || c == '#';
}

void pre_laser(){
	memset(laser,0,sizeof(laser));
	for(int pos=0;pos<4;pos++)
	for(int i=0;i<r;i++)
		for(int j=0;j<c;j++){
			int k;
			if(arr[i][j] == '>'){
				k = j + 1;
				while(!blocking(arr[i][k]) && k < c){
					laser[i][k][pos]=1;
					k++;
				}
				arr[i][j] = 'v';
			}else if(arr[i][j] == '^' ){
				k = i - 1;
				while(!blocking(arr[k][j]) && k >= 0){
					laser[k][j][pos]=1;
					k--;
				}
				arr[i][j] = '>';
			}else if(arr[i][j] == '<'){
				k = j - 1;
				while(!blocking(arr[i][k]) && k >= 0){
					laser[i][k][pos]=1;
					k--;
				}
				arr[i][j]='^';
			}else if(arr[i][j] == 'v'){
				k = i + 1;
				while(!blocking(arr[k][j]) && k < r){
					laser[k][j][pos]=1;
					k++;
				}
				arr[i][j]='<';
			}
		}
}

int main(){
	int t;
	scanf("%d",&t);
	for(int tt = 1 ; tt <= t ; tt++){
		printf("Case #%d: ",tt);
		scanf("%d %d", &r, &c);
		pair<int,int> s,g;
		for(int i=0;i<r;i++) {
			scanf("%s",arr[i]);
			for(int j=0;j<c;j++)
				if(arr[i][j]=='S') {
					s.first = i;
					s.second = j;
				}else if(arr[i][j]=='G'){
					g.first=i;
					g.second=j;
				}
		}
		pre_laser();

		queue<pair<pair<int,int>,int> > q;
		pair<pair<int,int>,int> st = make_pair(s,0);
		memset(seen,0,sizeof(seen));
		memset(len,0,sizeof(len));
		seen[st.first.first][st.first.second][st.second]=1;
		len[st.first.first][st.first.second][st.second]=0;
		q.push(st);

		bool found = false;
		int res=0;
		while(!q.empty() && !found){
			st = q.front(); q.pop();
			pair<pair<int,int>,int> nst;
			//printf("%d %d %d\n",st.first.first, st.first.second, st.second);
			for(int i=0;i<4;i++){
				nst.first.first = st.first.first + dy[i];
				nst.first.second = st.first.second + dx[i];
				nst.second = ( st.second + 1 ) % 4;
				if( nst.first.first>=0 && nst.first.first < r &&
					nst.first.second >=0 && nst.first.second < c &&
					!seen[nst.first.first][nst.first.second][nst.second] &&
					!laser[nst.first.first][nst.first.second][nst.second]){
						seen[nst.first.first][nst.first.second][nst.second] = 1;
						len[nst.first.first][nst.first.second][nst.second] = len[st.first.first][st.first.second][st.second] + 1;
						if(nst.first == g){
							found=true;
							res = len[nst.first.first][nst.first.second][nst.second];
							break;
						}
						q.push(nst);
					}
			}
		}
		if(!found) printf("impossible");
		else printf("%d", res);
		printf("\n");
	}
}

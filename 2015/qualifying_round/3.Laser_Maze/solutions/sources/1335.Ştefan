#include <bits/stdc++.h>
using namespace std;
struct point 
        {
         int x,y,ant;
     	};
struct las
       {
       	int x; 
        int y;
        char d;
        char init;
	   };
point start,final;
int t,i,j,n,m,sf(0);
char L[113][113];
las Laser[113*113];
int solutie(1<<20);
int l(0);
int d[5][113][113];
point Q[113*113];
int St[5][113][113];
int used[113][113];

void clockside()
 {
  int i;
  for (i=1;i<=l;++i)
     { 
      if (Laser[i].d=='u') Laser[i].d='r';
                  else 
      if (Laser[i].d=='r') Laser[i].d='d';
                  else 
      if (Laser[i].d=='d') Laser[i].d='l';
                  else 
      if (Laser[i].d=='l') Laser[i].d='u';
	 }
 }
 
void laser_set(int nivel)
 {
  int i;
  for (i=1;i<=l;++i) Laser[i].d=Laser[i].init;
  if (nivel==0)	return;
  if (nivel==1)
        {
        clockside();	
		}
  if (nivel==2)
        {
         clockside();
         clockside();
		}
  if (nivel==3)
        {
         clockside();
         clockside();
         clockside();
		}
 }
 
bool check_laser(int x,int y)
 {
 if (L[x][y]=='^') return 1;
 if (L[x][y]=='>') return 1;
 if (L[x][y]=='v') return 1;
 if (L[x][y]=='<') return 1;
 if (L[x][y]=='#') return 1;
 return 0;
 }

void change_attack()
 {
  int i,j;
  memset(used,0,sizeof used);
  for (i=1;i<=l;++i)
     {
      used[Laser[i].x][Laser[i].y]=1;
      if (Laser[i].d=='u') 
                      {
                       for (j=Laser[i].x-1;j>=1;--j) 
					      {
					      if (check_laser(j,Laser[i].y)) break;
					       used[j][Laser[i].y]=1;	
						  }
					  }
      if (Laser[i].d=='r') 
                    {
                     for (int j=Laser[i].y+1;j<=m;++j) 
					      {
					      if (check_laser(Laser[i].x,j))break;
					       used[Laser[i].x][j]=1;	
						  }	
					}
      if (Laser[i].d=='d')
	                  {
                       for (int j=Laser[i].x+1;j<=n;++j) 
					      {
					      if (check_laser(j,Laser[i].y)) break;
					       used[j][Laser[i].y]=1;	
						  }
					  }
      if (Laser[i].d=='l')  
                     {
                     for (int j=Laser[i].y-1;j>=1;--j) 
					      {
					      if (check_laser(Laser[i].x,j)) break;
					      used[Laser[i].x][j]=1;	
						  }	
					}
	 }	
 }
 
bool valid(int x,int y,int stare)
{
 if (x<1 || x>n || y<1 || y>m) return 0;
 if (St[stare][x][y]==1) return 0;
 if (used[x][y]==1) return 0;
 if (L[x][y]=='.' ) return 1;
 if (L[x][y]=='G') return 1;
 if (L[x][y]=='S') return 1;
 return 0;
}

void check(int x,int y)
 {
  int i;
  if (L[x][y]=='G')	
    for (i=0;i<=3;++i) 
      if (d[i][x][y]!=0) 
	     solutie=min(solutie,d[i][x][y]);
 }
 
void move()
 {
  int starea=0;
  int st=0;
  while(st<=sf)
    {
     int xx=Q[++st].x;
     int yy=Q[  st].y;
     int stareaminus=Q[st].ant;
     starea=stareaminus+1;
     starea%=4;
     laser_set(stareaminus+1);
     change_attack();
     check(xx,yy);
     if (valid(xx+1,yy,starea)) 
             {
              Q[++sf].x=xx+1;
              Q[  sf].y=yy;
              Q[  sf].ant=starea;
               d[starea][xx+1][yy]=d[stareaminus][xx][yy]+1;
              St[starea][xx+1][yy]=1;
			 }
     if (valid(xx-1,yy,starea)) 
             {
              Q[++sf].x=xx-1;
              Q[  sf].y=yy;
              Q[  sf].ant=starea;
              d[starea][xx-1][yy]=d[stareaminus][xx][yy]+1;
              St[starea][xx-1][yy]=1;
			 }
     if (valid(xx,yy-1,starea)) 
             {
              Q[++sf].x=xx;
              Q[  sf].y=yy-1;
              Q[  sf].ant=starea;
               d[starea][xx][yy-1]=d[stareaminus][xx][yy]+1;
              St[starea][xx][yy-1]=1;
			 }
     if (valid(xx,yy+1,starea)) 
             {
              Q[++sf].x=xx;
              Q[  sf].y=yy+1;
              Q[  sf].ant=starea;
               d[starea][xx][yy+1]=d[stareaminus][xx][yy]+1;
              St[starea][xx][yy+1]=1;
			 }
    }
 }

int main(void)
{
 ifstream cin("laser_maze.txt");
 ofstream cout("laser_maze.out");
 cin>>t;
 for (int q=1;q<=t;++q)
    {
     memset(L,0,sizeof L);
     memset(d,0,sizeof d);
     memset(Laser,0,sizeof Laser);
     memset(St,0,sizeof St);
     memset(Q,0,sizeof Q);
     memset(used,0,sizeof used);
     sf=0;
     solutie=1<<20;
     cin>>n>>m;
	 for (i=1;i<=n;++i)	
	   for (j=1;j<=m;++j)
	     {
		 cin>>L[i][j];
		 if (L[i][j]=='S')
		         {
		          start.x=i;
		          start.y=j;
		          Q[++sf].x=i;
		          Q[  sf].y=j;
		          Q[  sf].ant=0;
				 }
		 if (L[i][j]=='^') 
		            {
		             Laser[++l].d='u';
		             Laser[l].x=i;
		             Laser[l].y=j;
		             Laser[l].init='u';
					}
		 if (L[i][j]=='>') 
		            {
		             Laser[++l].d='r';
		             Laser[l].x=i;
		             Laser[l].y=j;
		             Laser[l].init='r';
					}
		 if (L[i][j]=='v') 
		            {
		             Laser[++l].d='d';
		             Laser[l].x=i;
		             Laser[l].y=j;
		              Laser[l].init='d';
					}
		 if (L[i][j]=='<') 
		            {
		             Laser[++l].d='l';
		             Laser[l].x=i;
		             Laser[l].y=j;
		              Laser[l].init='l';
					}
	     } 

	  d[0][start.x][start.y]=0;
	 St[0][start.x][start.y]=1;
	 move();
	 cout<<"Case #"<<q<<": ";
	 if (solutie!=(1<<20)) cout<<solutie<<"\n";
	         else cout<<"impossible\n";
	}
 return 0;
}

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

const int MAX = 105;

struct str {
  int vr, r, s;
  str (int vr, int r, int s) : vr(vr), r(r), s(s) {}
  str () {}
};

char p[MAX][MAX];
char smj[5] = "^>v<";
int bio[4][MAX][MAX];
int nemoze[4][MAX][MAX];
int brred, brstup;
int pr[4] = {-1, 0, 1, 0}, ps[4] = {0, 1, 0, -1};
queue <str> Q;

int Vani(int r, int s)
{
  return r < 0 || r >= brred || s < 0 || s >= brstup;
}

int Blok(int r, int s)
{
  return !(p[r][s] == '.' || p[r][s] == 'S' || p[r][s] == 'G');
}

int Ok(int vr, int r, int s)
{
  return !Vani(r, s) && !Blok(r, s) && !nemoze[vr][r][s] && bio[vr][r][s] == -1;
}

void Laseri()
{
  for (int i=0; i<brred; i++) {
    for (int j=0; j<brstup; j++) {
      int da=-1;
      for (int k=0; k<4; k++)
        if (p[i][j] == smj[k])
          da = k;

      if (da != -1)
        for (int k=0, tsmj=da; k<4; k++, tsmj = (tsmj + 1) % 4)
          for (int tr = i + pr[tsmj], ts = j + ps[tsmj]; !Vani(tr, ts) && !Blok(tr, ts); tr += pr[tsmj], ts += ps[tsmj])
            nemoze[k][tr][ts] = 1;
    }
  }
}

int main()
{
  int t;
  scanf("%d", &t);

  for (int i=1; i<=t; i++) {
    memset(bio, -1, sizeof bio);
    memset(nemoze, 0, sizeof nemoze);

    scanf("%d%d", &brred, &brstup);
    int krajr=-1, krajs=-1;
    for (int j=0; j<brred; j++) {
      scanf("%s", p[j]);
      for (int k=0; k<brstup; k++) {
        if (p[j][k] == 'S') {
          bio[0][j][k] = 0;
          Q.push(str(0, j, k));
        }
        if (p[j][k] == 'G') {
          krajr = j;
          krajs = k;
        }
      }
    }
    
    Laseri();
    for (; !Q.empty(); ) {
      str tmp = Q.front(); Q.pop();
      for (int j=0; j<4; j++) {
        int nr = tmp.r + pr[j], ns = tmp.s + ps[j], nvr = (tmp.vr + 1) % 4;
        if (Ok(nvr, nr, ns)) {
          bio[nvr][nr][ns] = bio[tmp.vr][tmp.r][tmp.s] + 1;
          Q.push(str(nvr, nr, ns));
        }
      }
    }
  
    int rje=-1;
    for (int j=0; j<4; j++) {
      int tmp = bio[j][krajr][krajs];
      if (rje == -1 || (tmp != -1 && tmp < rje))
        rje = tmp;
    }
  
    printf("Case #%d: ", i);
    if (rje == -1)
      printf("impossible\n");
    else
      printf("%d\n", rje);
  }

  return 0;
}

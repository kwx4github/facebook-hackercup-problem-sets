#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 105
using namespace std;

int n, m, sx, sy, ex, ey;
int ux, uy;
char s[N][N], b[N][N][4];
tuple<int, int, int> q[N*N*4];
int v[N][N][4];

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int inside(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}

void solve(){
	CLR(b, 0);
	scanf("%d%d", &n, &m);
	FOR(i,0,n) scanf("%s", s[i]);
	FOR(i,0,n) FOR(j,0,m){
		if (s[i][j] == 'S') sx = i, sy = j;
		else if (s[i][j] == 'G') ex = i, ey = j;
		else if (s[i][j] != '.' && s[i][j] != '#'){
			if (s[i][j] == '^') ux = -1, uy = 0;
			if (s[i][j] == '>') ux = 0, uy = 1;
			if (s[i][j] == 'v') ux = 1, uy = 0;
			if (s[i][j] == '<') ux = 0, uy = -1;
			FOR(k,0,4){
				int x = i, y = j;
				while (1){
					x += ux, y += uy;
					if (!inside(x, y)) break;
					if (s[x][y] == '#' || (s[x][y] != 'S' && s[x][y] != 'G' && s[x][y] != '.')) break;
					b[x][y][k] = 1;
				}
				swap(ux, uy);
				uy = -uy;
			}
		}
	}
	
	CLR(v, -1);
	q[0] = make_tuple(sx, sy, 0);
	v[sx][sy][0] = 0;
	for (int st=0, ed=0; st<=ed; st++){
		int x, y, tm, d;
		tie(x, y, tm) = q[st];
		d = v[x][y][tm];
		if (s[x][y] == 'G'){
			printf("%d\n", v[x][y][tm]);
			return;
		}
//		printf("%d %d %d %d\n", x, y, tm, d);
		tm = (tm + 1) & 3;
		FOR(k,0,4){
			int tx = x + dx[k], ty = y + dy[k];
			if (!inside(tx, ty)) continue;
			if (s[tx][ty] != 'S' && s[tx][ty] != 'G' && s[tx][ty] != '.') continue;
			if (b[tx][ty][tm] || v[tx][ty][tm] >= 0) continue;
			v[tx][ty][tm] = d + 1;
			q[++ed] = make_tuple(tx, ty, tm);			
		}
	}
	puts("impossible");
}

int main(){
	int tc;
	scanf("%d", &tc);
	FOE(i,1,tc) printf("Case #%d: ", i), solve();
	return 0;
}

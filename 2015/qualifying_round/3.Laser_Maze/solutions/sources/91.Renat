#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <set>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<double> vd;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<pii> vii;
typedef vector<string> vs;
int dx[4] = {0, -1, 0, 1};
int dy[4] = {1, 0, -1, 0};

bool wall(char c) {
    return c != 'S' && c != 'G' && c != '.';
}

int getdir(char c) {
    if (c == '>') return 0;
    else if (c == '^') return 1;
    else if (c == '<') return 2;
    else if (c == 'v') return 3;
    else return -1;
}

int main() {
    int T;
    cin >> T;
    for (int test = 1; test <= T; ++test) {
        printf("Case #%d: ", test);
        int n,m;
        cin >> n >> m;
        vs v(n);
        int x0,y0,x1,y1;
        for (int i = 0; i < n; ++i) {
            cin >> v[i];
            for (int j = 0; j < m; ++j) {
                if (v[i][j] == 'S') {
                    x0 = i, y0 = j;
                } else if (v[i][j] == 'G') {
                    x1 = i, y1 = j;
                }
            }
        }
        vector<vvi> safe(4, vvi(n, vi(m)));
        for (int dir = 0; dir < 4; ++dir) {
            for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) {
                if (!wall(v[i][j])) safe[dir][i][j] = 1;
            }
            for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) {
                int d = getdir(v[i][j]);
                if (d == -1) continue;
                d = (d - dir + 4) % 4;
                for (int l = 1; ; ++l) {
                    int i1 = i + l * dx[d];
                    int j1 = j + l * dy[d];
                    if (i1 < 0 || j1 < 0 || i1 >= n || j1 >= m || wall(v[i1][j1]))
                        break;
                    safe[dir][i1][j1] = 0;
                }
            }
        }
        vector<vvi> d(4, vvi(n, vi(m, 1e9)));
        d[0][x0][y0] = 0;
        vvi q(1, vi(3));
        q[0] = {0,x0,y0};
        for (int it = 0; it < q.size(); ++it) {
            int dir = q[it][0], x = q[it][1], y = q[it][2];
            int curd = d[dir][x][y];
            int nd = (dir + 1) % 4;
            for (int go = 0; go < 4; ++go) {
                int nx = x + dx[go];
                int ny = y + dy[go];
                if (nx < 0 || ny < 0 || nx >= n || ny >= m || !safe[nd][nx][ny])
                    continue;
                if (d[nd][nx][ny] > curd + 1) {
                    d[nd][nx][ny] = curd + 1;
                    q.emplace_back({nd, nx, ny});
                }
            }
        }
        int mi = 1e9;
        for (int dir = 0; dir < 4; ++dir) {
            mi = min(mi, d[dir][x1][y1]);
        }
        if (mi < 0.5e8) {
            cout << mi << endl;
        } else cout << "impossible\n";
    }
    return 0;
}

//
//  main.cpp
//  hacker_cup_1
//
//  Created by hijackyan on 1/8/15.
//  Copyright (c) 2015 haker cup. All rights reserved.
//

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

struct weapon
{
    int x,y,d;
    weapon(int i, int j, int dd) : x(i), y(j), d(dd){};
};
char map[200][200];
int to[4][2] = {{0,1}, {0,-1}, {-1, 0}, {1, 0}};


bool attack(int xx, int yy, vector<weapon> w, int step)
{
    for(int i = 0; i < w.size(); i++)
    {
        if((w[i].d + step)%4 == 0)
        {
            if(xx == w[i].x && yy < w[i].y)
            {
                int yyy = yy + 1;
                while(yyy < w[i].y
                      && (map[xx][yyy] == 'S' || map[xx][yyy] == 'G' || map[xx][yyy] == '.'))
                    yyy++;
                if(yyy == w[i].y)
                    return false;
            }
        }
        if((w[i].d + step)%4 == 2)
        {
            if(xx == w[i].x && yy > w[i].y)
            {
                int yyy = w[i].y + 1;
                while(yyy < yy
                      && (map[xx][yyy] == 'S' || map[xx][yyy] == 'G' || map[xx][yyy] == '.'))
                    yyy++;
                if(yyy == yy)
                    return false;
            }
        }
        if((w[i].d + step)%4 == 1)
        {
            if(xx < w[i].x && yy == w[i].y)
            {
                int xxx = xx + 1;
                while(xxx < w[i].x
                      && (map[xxx][yy] == 'S' || map[xxx][yy] == 'G' || map[xxx][yy] == '.'))
                    xxx++;
                if(xxx == w[i].x)
                    return false;
            }
        }
        if((w[i].d + step)%4 == 3)
        {
            if(xx > w[i].x && yy == w[i].y)
            {
                int xxx = w[i].x + 1;
                while(xxx < xx
                      && (map[xxx][yy] == 'S' || map[xxx][yy] == 'G' || map[xxx][yy] == '.'))
                    xxx++;
                if(xxx == xx)
                    return false;
            }
        }
    }
    return true;
}

int bfs()
{
    int r, c;
    int start_x = 0, start_y = 0;
    cin>>r>>c;
    vector<weapon> w;
    for(int i = 0; i < r; i++)
    {
        for(int j = 0; j < c; j++)
        {
            cin>>map[i][j];
            switch (map[i][j])
            {
                case 'S':
                    start_x = i;
                    start_y = j;
                    break;
                case '<':
                    w.push_back(weapon(i,j,0));
                    break;
                case '^':
                    w.push_back(weapon(i,j,1));
                    break;
                case '>':
                    w.push_back(weapon(i,j,2));
                    break;
                case 'v':
                    w.push_back(weapon(i,j,3));
                    break;
            }
        }
    }
    vector<int> v_x;
    vector<int> v_y;
    vector<vector<vector<bool>>> visit(r, vector<vector<bool>>(c, vector<bool>(4, 0)));
    v_x.push_back(start_x);
    v_y.push_back(start_y);
    visit[start_x][start_y][0] = 1;
    int step = 0;
    while(v_x.size())
    {
        vector<int> v_xx;
        vector<int> v_yy;
        while(v_x.size())
        {
            int x = v_x.back();
            int y = v_y.back();
            v_x.pop_back();
            v_y.pop_back();
            if(map[x][y] == 'G') return step;
            for(int i = 0; i < 4; i++)
            {
                int xx = x + to[i][0];
                int yy = y + to[i][1];
                if(xx >= 0 && xx < r
                   && yy >= 0 && yy < c
                   && (map[xx][yy] == 'S' || map[xx][yy] == 'G' || map[xx][yy] == '.')
                   && visit[xx][yy][(step+1)%4] == 0
                   && attack(xx, yy, w, step+1))
                {
                    v_xx.push_back(xx);
                    v_yy.push_back(yy);
                    visit[xx][yy][(step+1)%4] = 1;
                }
            }
            
        }
        step++;
        v_x = v_xx;
        v_y = v_yy;
        
    }
    return -1;
}
int main() {
    int n;
    cin>>n;
    int ca = 1;
    while(n--)
    {
        cout<<"Case #"<<ca++<<": ";
        int step = bfs();
        if(step >= 0) cout<<step<<endl;
        else cout<<"impossible"<<endl;
    }
}

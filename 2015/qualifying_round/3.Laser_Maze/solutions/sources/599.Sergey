import java.util.*;

public class C {
    final int[] DX = {1, 0, -1, 0};
    final int[] DY = {0, -1, 0, 1};
    final char[] DC = {'v', '<', '^', '>'};
    private int[][] map;

    void solve() {
        int m = in.nextInt();
        int n = in.nextInt();
        map = new int[m][n];
        int sx = -1;
        int sy = -1;
        int gx = -1;
        int gy = -1;
        for (int x = 0; x < m; x++) {
            char[] s = in.next().toCharArray();
            for (int y = 0; y < n; y++) {
                if (s[y] == 'S') {
                    sx = x;
                    sy = y;
                    map[x][y] = -1;
                } else if (s[y] == 'G') {
                    gx = x;
                    gy = y;
                    map[x][y] = -1;
                } else if (s[y] == '#') {
                    map[x][y] = -2;
                } else if (s[y] == '.') {
                    map[x][y] = -1;
                } else {
                    for (int j = 0; j < DC.length; j++) {
                        if (DC[j] == s[y]) {
                            map[x][y] = j;
                            break;
                        }
                    }
                }
            }
        }
//        System.err.println(Arrays.deepToString(map));
        State start = new State(sx, sy, 0, 0);
        Queue<State> queue = new ArrayDeque<State>();
        queue.add(start);
        HashSet<State> u = new HashSet<State>();
        u.add(start);
        while (!queue.isEmpty()) {
            State s = queue.poll();
//            System.err.println(s);
            if (s.x == gx && s.y == gy) {
                System.out.println(s.dist);
                return;
            }
            for (int d = 0; d < DX.length; d++) {
                State ns = new State(s.x + DX[d], s.y + DY[d], (s.rotate + 1) % 4, s.dist + 1);
//                System.err.println("ns = " + ns);
                if (ns.isAlive() && !u.contains(ns)) {
                    u.add(ns);
                    queue.add(ns);
                }
            }
        }
        System.out.println("impossible");
    }

    class State {
        int x, y, rotate, dist;


        public State(int x, int y, int rotate, int dist) {
            this.x = x;
            this.y = y;
            this.rotate = rotate;
            this.dist = dist;
        }

        boolean isAlive() {
            if (x < 0 || x >= map.length || y < 0 || y >= map[0].length) {
                return false;
            }
            if (map[x][y] != -1) {
                return false;
            }
            for (int x = 0; x < map.length; x++) {
                for (int y = 0; y < map[x].length; y++) {
                    if (map[x][y] >= 0) {
                        int r = (map[x][y] + rotate) % 4;
                        for (int d = 1; ; d++) {
                            if (x + d * DX[r] < 0 || x + d * DX[r] >= map.length) {
                                break;
                            }
                            if (y + d * DY[r] < 0 ||  y + d * DY[r] >= map[0].length) {
                                break;
                            }
                            if (map[x + d * DX[r]][y + d * DY[r]] != -1) {
                                break;
                            }
                            if (x + d * DX[r] == this.x && y + d * DY[r] == this.y) {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        @Override
        public String toString() {
            return "State{" +
                    "x=" + x +
                    ", y=" + y +
                    ", rotate=" + rotate +
                    ", dist=" + dist +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            State state = (State) o;

            if (rotate != state.rotate) return false;
            if (x != state.x) return false;
            if (y != state.y) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            result = 31 * result + rotate;
            return result;
        }
    }

    private Scanner in;

    void run() {
        in = new Scanner(System.in);
        int t = in.nextInt();
        for (int it = 1; it <= t; it++) {
            System.out.print("Case #" + it + ": ");
            solve();
        }
    }

    public static void main(String[] args) {
        new C().run();
    }
}

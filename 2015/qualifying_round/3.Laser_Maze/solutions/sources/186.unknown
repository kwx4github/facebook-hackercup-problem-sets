#include <bits/stdc++.h>
using namespace std;

const int dr[] = {0,1,0,-1};
const int dc[] = {1,0,-1,0};
const string laser = ">v<^";

char a[200][200];
int n,m;
int dis[200][200][4];

struct node{
	int r,c,d;
	node () {}
	node (int r, int c, int d) : r(r), c(c), d(d) {}
};

bool safe (int r, int c, int d){
	if (a[r][c]=='#')
		return false;
	if (laser.find(a[r][c]) != laser.npos)
		return false;
	for (int i=0; i<4; i++){
		int rr = r, cc = c;
		while (rr>=0 && rr<n && cc>=0 && cc<m){
			if (a[rr][cc] == '#') break;
			if (laser.find(a[rr][cc]) != laser.npos){
				if ((laser.find(a[rr][cc]) + d) % 4 == (i^2))
					return false;
				break;
			}
			rr+= dr[i];
			cc+= dc[i];
		}
	}
	return true;
}

void main2(){
	cin >> n >> m;
	int sr=-1,sc=-1;
	for (int i=0; i<n; i++)
		for (int j=0; j<m; j++){
			cin >> a[i][j];
			if (a[i][j]=='S'){
				assert(sr==-1 && sc==-1);
				sr = i, sc = j;
			}
		}
	queue <node> Q;
	memset(dis, -1, sizeof dis);
	dis[sr][sc][0] = 0;
	Q.push(node(sr,sc,0));
	while (!Q.empty()){
		node front = Q.front(); Q.pop();
		if (a[front.r][front.c] == 'G'){
			cout << dis[front.r][front.c][front.d] << endl;
			return;
		}
		for (int i=0; i<4; i++){
			int r = front.r + dr[i];
			int c = front.c + dc[i];
			if (r<0 || r>=n || c<0 || c>=m) continue;
			if (dis[r][c][(front.d + 1)%4] != -1) continue;
			if (safe(r,c,(front.d+1)%4)){
				dis[r][c][(front.d+1)%4] = dis[front.r][front.c][front.d]+1;
				Q.push(node(r,c,(front.d+1)%4));
			}
		}
	}
	cout << "impossible" << endl;
}

int main(){
	int t; cin >> t;
	for (int o=1; o<=t; o++){
		cout << "Case #" << o << ": ";
		main2();
	}
	return 0;
}

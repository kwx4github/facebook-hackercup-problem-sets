#include <iostream>
#include <algorithm>
#include <map>
#include <utility>
#include <queue>
#include <stack>
#include <set>
#include <string>
#define pii pair<int, int>
#define ppi pair<pii,int>
#define mp(i,j) make_pair(i,j)

using namespace std;

class node{
    public:
    int x,y,t;
    inline bool operator <(const node &a) const
    {
        if(x<a.x) return true;
        else if(x == a.x && y < a.y) return true;
        else if(x == a.x && y == a.y && t < a.t) return true;
        return false;
    }
};

int dir[4][2] = { {0,-1}, {-1,0}, {0,1}, {1,0} };

int bfs(pair<node,int> start,bool mazet[110][110][4],char maze[110][110], int m, int n)
{
    set<node> visited;
    queue<pair<node,int> > Q;
    Q.push(start);
    visited.insert(start.first);
    while(!Q.empty())
    {
        pair<node,int> now = Q.front();
        Q.pop();
        node pos = now.first;
        if(maze[pos.x][pos.y] == 'G' && mazet[pos.x][pos.y][pos.t]!=0) return now.second;
        else
        {
            int time = (now.second + 1);
            for(int i=0;i<4;i++)
            {
                node newpos;
                newpos.x = pos.x+dir[i][0];
                newpos.y = pos.y + dir[i][1];
                newpos.t = (pos.t+1)%4;
                if(pos.x+dir[i][0] >= 0 && pos.x+dir[i][0] < m && pos.y + dir[i][1] >= 0 && pos.y + dir[i][1] < n && mazet[pos.x+dir[i][0]][pos.y + dir[i][1]][(pos.t+1)%4] == 1 && visited.find(newpos) == visited.end())
                {
                    Q.push(mp(newpos,time));
                    visited.insert(newpos);
                }
            }
        }
    }
    return -1;
}

int main()
{
    int t;
    cin>>t;
    char maze[110][110];
    bool mazet[110][110][4];
    pair<node,int> start;
    for(int T=1; T<=t; T++)
    {
        int m,n;
        cin>>m>>n;
        for(int i=0;i<m;i++)
        {
                cin>>maze[i];
                for(int j=0;j<n;j++)
            {
                if(maze[i][j] == 'S' || maze[i][j] == 'G' || maze[i][j] == '.')
                    mazet[i][j][0] = mazet[i][j][1] = mazet[i][j][2] = mazet[i][j][3] = 1;
                else mazet[i][j][0] = mazet[i][j][1] = mazet[i][j][2] = mazet[i][j][3] = 0;
            }
        }
        /*
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
                cout<<maze[i][j];
            cout<<"\n";
        }
        */
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(maze[i][j] == 'S'){
                    node temp;
                    temp.x = i;
                    temp.y = j;
                    temp.t = 0;
                    start = mp(temp,0);
                }
                int strt;
                if(maze[i][j] == '<' || maze[i][j] == '^' || maze[i][j] == '>' || maze[i][j] == 'v')
                {
                    if(maze[i][j] == '<')
                        strt = 0;
                    else if(maze[i][j] == '^')
                        strt = 3;
                    else if(maze[i][j] == '>')
                        strt = 2;
                    else strt = 1;
                    int p=i;
                    int q=j;

                    do
                    {
                        mazet[p][q][strt] = 0;
                        q--;
                    }while(q>=0 && maze[p][q]!='<' && maze[p][q]!='^' && maze[p][q]!='>' && maze[p][q]!='v' && maze[p][q]!='#');
                    p=i;
                    q=j;
                    strt = (strt+1)%4;
                    do
                    {
                        mazet[p][q][strt] = 0;
                        p--;
                    }while(p>=0 && maze[p][q]!='<' && maze[p][q]!='^' && maze[p][q]!='>' && maze[p][q]!='v' && maze[p][q]!='#');
                    p=i;
                    q=j;
                    strt = (strt+1)%4;
                    do
                    {
                        mazet[p][q][strt] = 0;
                        q++;
                    }while(q<n && maze[p][q]!='<' && maze[p][q]!='^' && maze[p][q]!='>' && maze[p][q]!='v' && maze[p][q]!='#');
                    p=i;
                    q=j;
                    strt = (strt+1)%4;
                    do
                    {
                        mazet[p][q][strt] = 0;
                        p++;
                    }while(p<m && maze[p][q]!='<' && maze[p][q]!='^' && maze[p][q]!='>' && maze[p][q]!='v' && maze[p][q]!='#');
                }
                else if(maze[i][j] == '#') mazet[i][j][0] = mazet[i][j][1] = mazet[i][j][2] = mazet[i][j][3] = 0;
            }
        }
        int ans = bfs(start,mazet,maze,m,n);
        if(ans!=-1)
            cout<<"Case #"<<T<<": "<<ans<<"\n";
        else cout<<"Case #"<<T<<": impossible\n";
    }
    return 0;
}

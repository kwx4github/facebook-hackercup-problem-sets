#include <bits/stdc++.h>
#define getcx getchar_unlocked

#ifdef WIN32
    inline char getchar_unlocked(){return getchar();}
    inline void putchar_unlocked(char x){putchar(x);}
#endif // WINDOWS
using namespace std;

typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define all(c) (c).begin(),(c).end()
#define foreach(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define forall(i,a,b) for(int i=a;i<(b);i++)
#define forb(i,a,b) for(int i=a;i>=(b);i--)
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define PI 3.1415926535897932384626
inline void pisz(int n) { printf("%d\n",n); }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define printA(a,L,R) forall(i,L,R) cout << a[i] << (i==R?'\n':' ')
#define printV(a) printA(a,0,a.size()-1)

inline int fi (){//fast input function
    register int c = getcx();
    int x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getcx());
    if(c=='-') {neg=1;c=getcx();}
    for(;c>47 && c<58;c = getcx()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
    return x;
}

inline void fo(int a) {
	char snum[20];
	int i=0;
    int c =a;
	do{
		snum[i++]=a%10+48;
		a=a/10;
	}
	while(a!=0);
	i=i-1;
    if(c<0)
        putchar_unlocked('-');
	while(i>=0)
	putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}

void init(){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
}

/* Useful code */

struct data{
    int i;
    int j;
    int steps;
    int stage;
};

typedef struct data Data;

char maze[101][101];
char visited[101][101];
char mask[4][101][101]; /* mask 1 means laser location */
int M,N; // M : height, N : width
queue <Data> qu;

void clear(){
	memset(maze,0,sizeof(maze));
	memset(visited,0,sizeof(visited));
	memset(mask,0,sizeof(mask));
	while(!qu.empty()) qu.pop();
}

void create_mask(){
    forall(c,0,4){
        forall(i,0,M){
            forall(j,0,N){
                if(maze[i][j]=='#'){
                    mask[c][i][j]=1;
                }
                else if(maze[i][j]=='^'){
                    int p = i;
                    while(p>=0){
                        mask[c][p--][j]=1;
                    }
                    maze[i][j]='>';
                }
                else if(maze[i][j]=='>'){
                    int p = j;
                    while(p<N){
                        mask[c][i][p++]=1;
                    }
                    maze[i][j]='v';
                }
                else if(maze[i][j]=='v'){
                    int p = i;
                    while(p<M){
                        mask[c][p++][j]=1;
                    }
                    maze[i][j]='<';
                }
                else if(maze[i][j]=='<'){
                    int p = j;
                    while(p>=0){
                        mask[c][i][p--]=1;
                    }
                    maze[i][j]='^';
                }
            }
        }
    }
}

void print_mask(){
    cerr<<endl;
    forall(i,0,M){
        forall(j,0,N){
            cerr<<maze[i][j];
        }
        cerr<<endl;
    }

    cerr<<endl;

    forall(c,0,4){
        cerr << "mask "<<c<<":"<<endl;
        forall(i,0,M){
            forall(j,0,N){
                cerr<< mask[c][i][j];
            }
            cerr<<endl;
        }
        cerr<<endl;
    }
}

int bfs(){
    int stage = 0 ;
    int steps = 0 ;
    int i,j;
    int starti,startj;
    bool left, right, top, bottom;

    forall(i,0,M){
        forall(j,0,N){
            if(maze[i][j]=='S'){
                starti=i;
                startj=j;
                break;
            }
        }
    }
    i = starti; j = startj;
    cerr<<"start"<<i<<j<<" ";
    Data temp;
    temp.i=i;
    temp.j=j;
    temp.stage=stage;
    temp.steps=steps;
    qu.push(temp);

    top= (i-1)>=0;
    bottom= (i+1)<M;
    left= (j-1)>=0;
    right= (j+1)<N;

    if(bottom){
        temp.i=i+1;
        temp.j=j;
        temp.stage = (stage+1)%4;
        temp.steps =  steps+1;
        qu.push(temp);
    }
    if(right){
        temp.i=i;
        temp.j=j+1;
        temp.stage = (stage+1)%4;
        temp.steps =  steps+1;
        qu.push(temp);
    }
    if(top){
        temp.i=i-1;
        temp.j=j;
        temp.stage = (stage+1)%4;
        temp.steps =  steps+1;
        qu.push(temp);
    }
    if(left){
        temp.i=i;
        temp.j=j-1;
        temp.stage = (stage+1)%4;
        temp.steps =  steps+1;
        qu.push(temp);
    }

    while(!qu.empty()){
        Data crds;

        crds = qu.front(); qu.pop();
        i=crds.i;
        j=crds.j;
        steps = crds.steps;
        stage = crds.stage;
        top= (i-1)>=0;
        bottom= (i+1)<M;
        left= (j-1)>=0;
        right= (j+1)<N;

        if(mask[stage][i][j]||i<0||j<0||i>=M||j>=N){
            continue;
        }

        if(visited[i][j]&1<<stage){
            continue;
        }

        if(maze[i][j]=='G'){
            return steps;
        }

        if(top){
            temp.i=i-1;
            temp.j=j;
            temp.stage = (stage+1)%4;
            temp.steps =  steps+1;
            qu.push(temp);
        }
        if(bottom){
            temp.i=i+1;
            temp.j=j;
            temp.stage = (stage+1)%4;
            temp.steps =  steps+1;
            qu.push(temp);
        }
        if(left){
            temp.i=i;
            temp.j=j-1;
            temp.stage = (stage+1)%4;
            temp.steps =  steps+1;
            qu.push(temp);
        }
        if(right){
            temp.i=i;
            temp.j=j+1;
            temp.stage = (stage+1)%4;
            temp.steps =  steps+1;
            qu.push(temp);
        }

        visited[i][j]|=1<<stage;
    }
    return -1;
}





int main()
{
    init();

    /* Main code here */

    int t = fi(),ans;
    /* declarations end */

    forall(cx,1,t+1){
        M=fi();
        N=fi();
        clear();
        forall(i,0,M){
            forall(j,0,N){
                maze[i][j]=getcx();
            }
            getcx();
        }
        create_mask();
        //print_mask();
        ans = bfs();
        printf("Case #%d: ",cx);
        if(ans==-1){
            printf("impossible\n");
        }
        else{
            printf("%d\n",ans);
        }
    }

    return 0;
}

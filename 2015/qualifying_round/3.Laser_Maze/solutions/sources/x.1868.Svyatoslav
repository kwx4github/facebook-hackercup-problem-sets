#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
typedef pair<pii, int> piii;

#define mp make_pair

int T;
int m, n;
string s[101];
int start, finish;
int d[101][101][4];
piii q[101*101*4];
int qh, qt;
int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};
string move = "^>v<";
int num[256];

void load() {
    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        cin >> s[i];
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == 'S') {
                start = i * m + j;
                s[i][j] = '.';
            }
            else if (s[i][j] == 'G') {
                finish = i * m + j;
                s[i][j] = '.';
            }
        }
    }
}

bool ok(piii v) {
    if (v.first.first < 0 || v.first.first >= n) return false;
    if (v.first.second < 0 || v.first.second >= m) return false;
    for (int i = 0; i < 4; ++i)
        if (s[v.first.first][v.first.second] == move[i]) return false;
    int curx = v.first.second - 1;
    while (curx > -1 && s[v.first.first][curx] == '.') --curx;
    if (curx != -1 && s[v.first.first][curx] != '#')
        if (move[(num[s[v.first.first][curx]] + v.second) % 4] == '>') return false;
    curx = v.first.second + 1;
    while (curx < m && s[v.first.first][curx] == '.') ++curx;
    if (curx != m && s[v.first.first][curx] != '#')
        if (move[(num[s[v.first.first][curx]] + v.second) % 4] == '<') return false;
    int cury = v.first.first - 1;
    while (cury > -1 && s[cury][v.first.second] == '.') --cury;
    if (cury != -1 && s[cury][v.first.second] != '#')
        if (move[(num[s[cury][v.first.second]] + v.second) % 4] == 'v') return false;
    cury = v.first.first + 1;
    while (cury < n && s[cury][v.first.second] == '.') ++cury;
    if (cury != n && s[cury][v.first.second] != '#')
        if (move[(num[s[cury][v.first.second]] + v.second) % 4] == '^') return false;
    return true;
}

int bfs() {
    memset(d, 0x7f, sizeof d);
    d[start / m][start % m][0] = 0;
    qh = qt = 0;
    q[qt++] = (mp(mp(start / m, start % m), 0));
    while (qh != qt) {
        piii v = q[qh++];
        for (int i = 0; i < 4; ++i) {
            piii to = mp(mp(v.first.first + dx[i], v.first.second + dy[i]), (v.second + 1) % 4);
            if (ok(to)) {
                if (d[to.first.first][to.first.second][to.second] >
                    d[v.first.first][v.first.second][v.second] + 1) {
                        q[qt++] = to;
                        d[to.first.first][to.first.second][to.second] =
                            d[v.first.first][v.first.second][v.second] + 1;
                    }
            }
        }
    }
    int res = 0x7f7f7f7f;
    for (int i = 0; i < 4; ++i)
        res = min(res, d[finish / m][finish % m][i]);
    if (res == 0x7f7f7f7f) res = -1;
    return res;
}

int solve() {
    return bfs();
}

int main() {
    num['^'] = 0; num['>'] = 1; num['v'] = 2; num['<'] = 3;
    cin >> T;
    for (int id = 1, res; id <= T; ++id) {
        load();
        res = solve();
        cout << "Case #" << id << ": ";
        if (res == -1) cout << "impossible\n";
        else cout << res << endl;
    }
	return 0;
}
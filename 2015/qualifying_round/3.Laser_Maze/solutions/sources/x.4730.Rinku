#include <iostream>
#include <stdio.h>
#include<algorithm>
#include<string.h>
char matrix[102][102];
int m,n;
int memo[101][101][4];
#define infi 100000
using namespace std;
char helper[]={'^','>','v','<'};
int getStart(int *a,int *b)
{
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
        if(matrix[i][j]=='S')
        {
            *a=i;
            *b=j;
            return 0;
        }

}
int getGoal(int *a,int *b)
{
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
        if(matrix[i][j]=='G')
        {
            *a=i;
            *b=j;
            return 0;
        }

}
int si,sj;
int gi,gj;

int up(int a,int b,int i,int j)
{
    if(b==j && a<=i)
        return 1;
    return 0;
}
int down(int a,int b,int i,int j)
{
    if(b==j && a>=i)
        return 1;
    return 0;
}
int left(int a,int b,int i,int j)
{
    if(a==i && b<=j)
        return 1;
    return 0;
}
int right(int a,int b,int i,int j)
{

    if(a==i && b>=j)
        return 1;
    return 0;
}
int getStatus(int a,int b,int step)
{
    step=step%4;
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
    {
        char ch;
        ch=matrix[i][j];

            if(ch=='^')
            ch=helper[(step)%4];
            else if(ch=='>')
                ch=helper[(step+1)%4];
            else if(ch=='v')
                ch=helper[(step+2)%4];
            else if(ch=='<')
            ch=helper[(step+3)%4];
            else
                continue;
        switch(ch)
        {
        case('^'):
            if(up(a,b,i,j))
                return 1;
            break;
        case('>'):
            if(right(a,b,i,j))
                return 1;
            break;
        case('v'):
            if(down(a,b,i,j))
                return 1;
            break;
        case('<'):
            if(left(a,b,i,j))
                return 1;
            break;
        default:
            break;
        }

    }
		return 0;
}


int getAns(int i,int j,int steps)
{
    if(i<0 || i>=m)
        return infi;
    if(j<0 || j>=n)
        return infi;
    if(i==gi && j==gj)
	{
		if(getStatus(i,j,steps%4))
			return infi;
		return 1;
	}
    if(matrix[i][j]!='.')
        return infi;
    steps=steps%4;
    if(memo[i][j][steps])
        return memo[i][j][steps];

    if(getStatus(i,j,steps))
        return infi;
    memo[i][j][steps]=infi;
    memo[i][j][steps] = min(getAns(i+1,j,steps+1),min(getAns(i,j+1,steps+1),min(getAns(i-1,j,steps+1),getAns(i,j-1,steps+1))))+1;
    return memo[i][j][steps];


}
void memsetall(int a,int b)
{
	for(int i=0;i<=a;i++)
		for(int j=0;j<=b;j++)
			{
				matrix[i][j]=0;
				for(int k=0;k<4;k++)
					memo[i][j][k]=0;
			}

}
int solve()
{

    cin>>m>>n;
	//cout<<"rr";
	memsetall(m,n);
    char ch;
    //cin>>ch;
	//cin>>ch;
	fflush(stdin);
    for(int i=0;i<m;i++)
        gets(matrix[i]);

    
    getStart(&si,&sj);
    matrix[si][sj]='.';
    getGoal(&gi,&gj);

    int ans=min(getAns(si+1,sj,1),min(getAns(si,sj+1,1),min(getAns(si-1,sj,1),getAns(si,sj-1,1))));
    if(ans>=infi)
        cout<<"impossible"<<endl;
    else
        cout<<ans<<endl;
	return 0;

}
int main()
{

    int t;
    cin>>t;
	
    for(int i=1;i<=t;i++)
    {
		cout<<"Case #"<<i<<": ";
        //cout<<"case :"<<i<<" ";
        solve();

    }
}

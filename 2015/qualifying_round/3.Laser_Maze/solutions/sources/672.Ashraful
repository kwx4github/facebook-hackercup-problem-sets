#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<fstream>
#include<sstream>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<utility>
#include<climits>
#include<iomanip>
#include<ctime>
#include<complex>
#include<set>

using namespace std;
#include <fstream>
#include <sstream>



#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define RFOR(i,a,b) for(int i=(b-1);i>=(a);i--)
#define FOREACH(i, c) for( __typeof( (c).begin() ) i = (c).begin(); i != (c).end(); ++i )
#define REP(i,n) for(int i=0;i<(n);i++)
#define RREP(i,n) for(int i=(n)-1;i>=0;i--)

#define INF INT_MAX/3
#define PB push_back
#define MP make_pair
#define ALL(a) (a).begin(),(a).end()
#define SET(a,c) memset(a,c,sizeof a)
#define CLR(a) memset(a,0,sizeof a)
#define PII pair<int,int>
#define PCC pair<char,char>
#define PIC pair<int,char>
#define PCI pair<char,int>
#define FST first
#define SEC second
#define VS vector<string>
#define VI vector<int>
#define DEBUG(x) cout<<#x<<": "<<x<<endl
#define MIN(a,b) (a>b?b:a)
#define MAX(a,b) (a>b?a:b)
#define PI acos(-1.0)
#define RADIANS(x) (((1.0 * x * PI) / 180.0))
#define DEGREES(x) (((x * 180.0) / (1.0 * pi)))
#define SINE(x) (sin(RADIANS(x)))
#define COSINE(x) (cos(RADIANS(x)))
#define SETBIT(x, i) (x |= (1 << i))
#define TANGENT(x) (tan(RADIANS(x)))
#define ARCSINE(x) (DEGREES((asin(x))))
#define RESETBIT(x, i) (x &= (~(1 << i)))
#define ARCCOSINE(x) (DEGREES((acos(x))))
#define ARCTANGENT(x) (DEGREES((atan(x))))
#define INFILE() freopen("in0.txt","r",stdin)
#define OUTFILE()freopen("out0.txt","w",stdout)
#define FASTIO ios_base::sync_with_stdio(0);cin.tie();
#define IN scanf
#define OUT printf
#define SI(a) scanf("%d",&a)
#define SL(a) scanf("%lld",&a)
#define SD(a) scanf("%lf",&a)
#define OI(a) printf("%d",a)
#define OL(a) printf("%lld",a)
#define OD(a) printf("%lf",a)
#define LL long long
#define ULL unsigned long long
#define EPS 1e-9
#define MOD 1000000007
#define LIM 4
#define FST first
#define xx first
#define SEC second
#define yy second

template<typename T>inline string tostring(T a)
{
    ostringstream os("");
    os << a;
    return os.str();
}
template<typename T>inline VS parse(T str)
{
    VS res;
    string s;
    istringstream os(str);
    while(os>>s)res.PB(s);
    return res;
}
template<typename T>inline LL toLong(T a)
{
    LL res;
    istringstream os(a);
    os>>res;
    return res;
}

long long gcd(long long a, long long b)
{
    return b? gcd(b, a%b): a;
}
#define Mx 105

int row,column;
char grid[Mx][Mx];

char di[]= {'^','>','v','<'};
int dx[]= {-1,0,1,0};
int dy[]= {0,1,0,-1};

int block[Mx][Mx][4];
int vis[Mx][Mx][4];

struct cell
{
    int x,y,cost,Time;
    cell() {}
    cell(int _x, int _y, int _c, int _t)
    {
        x=_x,y=_y,cost=_c,Time=_t;
    }
};
int KS;
bool check(int x, int y)
{
    if(x>=0 && y>=0 && x<row && y<column)return true;
    return false;
}
void go(int x, int y, int dir, int idx)
{
    block[x][y][idx]=KS;
    x+=dx[dir];
    y+=dy[dir];
    while( check(x,y) && (grid[x][y]=='.' || grid[x][y]=='S' || grid[x][y]=='G')  )
    {
        block[x][y][idx]=KS;
        x+=dx[dir];
        y+=dy[dir];

    }
}
void process(int x, int y)
{
    int id=-1;
    for(int i=0; i<4; i++)
    {
        if(grid[x][y]==di[i])id=i;
    }
    if(id==-1)return ;
    for(int j=0; j<4; j++)
    {
        go(x,y,(id+j)%4,j);
    }
}
bool ok;
int BFS(cell strt)
{
    queue<cell>Q;
    int x,y,tim,X,Y;
    Q.push(strt);
    cell node;
    while(!Q.empty())
    {
        node=Q.front();
        Q.pop();
        x=node.x,y=node.y,tim=node.Time;
        vis[x][y][tim]=KS;
        if(grid[x][y]=='G') return node.cost;
        FOR(i,0,4)
        {
            X=x+dx[i];
            Y=y+dy[i];
            if(check(X,Y) && vis[X][Y][(tim+1)%4]!=KS && block[X][Y][(tim+1)%4 ]!=KS && (grid[X][Y]=='.' ||grid[X][Y]=='S'||grid[X][Y]=='G'  ) )
            {
                vis[X][Y][(tim+1)%4]=KS;
                Q.push(cell(X,Y,node.cost+1,(tim+1)%4));
            }
        }
    }
    return 0;
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("fb_c.out","w",stdout);
    int ks,cas;
    int i,j,k,N;
    scanf("%d",&ks);
    cell strt,end;
    FOR(cas,1,ks+1)
    {
        cin>>row>>column;
        FOR(i,0,row)scanf("%s",grid[i]);
        KS=cas;
        FOR(i,0,row)
        {
            FOR(j,0,column)
            {
                process(i,j);
                if(grid[i][j]=='S')strt=cell(i,j,0,0);
            }
        }
        int res=BFS(strt);
        printf("Case #%d: ",cas);
        if(!res)cout<<"impossible\n";
        else cout<<res<<endl;
    }
    return 0;
}

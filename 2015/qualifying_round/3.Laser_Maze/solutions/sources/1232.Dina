#include <iostream>
#include <queue>
using namespace std;
int m,n;
char ar[102][102];
int si,sj,gi,gj;
long long dp[4][102][102];
bool danger[4][102][102];
bool isTur(int i, int j) {
  return ar[i][j] == '^' || ar[i][j] == '>' || ar[i][j] == 'v' || ar[i][j] == '<';
}
struct point {
  long long t;
  int i;
  int j;
  point(long long input_t, int input_i, int input_j)
      : t(input_t), i(input_i), j(input_j) {}
};
void solve() {
  queue<point> Q;
  Q.push(point(0,si,sj));
  while (!Q.empty()) {
    point cur = Q.front();
    Q.pop();
    if (danger[cur.t%4][cur.i][cur.j] && cur.t>0) continue;
    long long& ans = dp[cur.t%4][cur.i][cur.j];
    if (ans == -1) {
      ans = cur.t;
      if (cur.i == gi && cur.j == gj) return;
      if (!danger[(cur.t+1)%4][cur.i+1][cur.j]) {
        Q.push(point(cur.t+1, cur.i+1, cur.j)); }
      if (!danger[(cur.t+1)%4][cur.i-1][cur.j]) {
        Q.push(point(cur.t+1, cur.i-1, cur.j)); }
      if (!danger[(cur.t+1)%4][cur.i][cur.j+1]) {
        Q.push(point(cur.t+1, cur.i, cur.j+1)); }
      if (!danger[(cur.t+1)%4][cur.i][cur.j-1]) {
        Q.push(point(cur.t+1, cur.i, cur.j-1)); }
    }
  }
}
int main() {
  int ntc;
  cin>>ntc; cin.get();
  for(int tc = 1; tc <= ntc; ++tc) {
    cin>>m>>n; cin.get();
    for(int i=0; i<102; ++i) {
     for(int j=0; j<102; ++j) {
      ar[i][j]='#';
     }
    }
    char ch;
    for(int i=1; i<=m; ++i) { // i: 1..m
      for(int j=1; j<=n; ++j) { // j: 1..n
        cin>>ar[i][j];
        if(ar[i][j]=='S') { si = i; sj = j; }
        if(ar[i][j]=='G') { gi = i; gj = j; }
      }
      cin.get();
    }
    memset(dp, -1, sizeof(dp));
    memset(danger, false, sizeof(danger));
    for(int t=0; t<4; ++t) {
      for(int i=0; i<102; ++i) {
        for(int j=0; j<102; ++j) {
          if (ar[i][j]=='#') {
            danger[t][i][j]=true;
          }
          char chr;
          if(ar[i][j]=='^') {
            chr = "^>v<"[t];
          } else if(ar[i][j]=='>') {
            chr = ">v<^"[t];
          } else if(ar[i][j]=='v') {
            chr = "v<^>"[t];
          } else if(ar[i][j]=='<') {
            chr = "<^>v"[t];
          } else {
            continue;
          }
          danger[t][i][j]=true;
          switch(chr) {
            case '^':
              for(int k=i-1; k>=0; --k) {
                if (ar[k][j]=='#' || isTur(k,j)) { break; }
                danger[t][k][j]=true;
              }
              break;
            case '>':
              for(int k=j+1; k<102; ++k) {
                if (ar[i][k]=='#' || isTur(i,k)) { break; }
                danger[t][i][k]=true;
              }
              break;
            case 'v':
              for(int k=i+1; k<102; ++k) {
                if (ar[k][j]=='#' || isTur(k,j)) { break; }
                danger[t][k][j]=true;
              }
              break;
            case '<':
              for(int k=j-1; k>=0; --k) {
                if (ar[i][k]=='#' || isTur(i,k)) { break; }
                danger[t][i][k]=true;
              }
              break;
          }
        }
      }
    }
    solve();
    cout<<"Case #"<<tc<<": ";
    long long ans = 999999999999999;
    if(dp[0][gi][gj]!=-1) { ans = min(ans, dp[0][gi][gj]);
    } else if(dp[1][gi][gj]!=-1) { ans = min(ans, dp[1][gi][gj]);
    } else if(dp[2][gi][gj]!=-1) { ans = min(ans, dp[2][gi][gj]);
    } else if(dp[3][gi][gj]!=-1) { ans = min(ans, dp[3][gi][gj]); }
    if (ans < 999999999999999) { cout<<ans;
    } else { cout<<"impossible"; }
    cout<<endl;
  }
  return 0;
}

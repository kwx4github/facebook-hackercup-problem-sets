#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

typedef long long LL;
#define rep(it,s) for(__typeof((s).begin()) it=(s).begin();it!=(s).end();it++)

int n, m;
string buf[110];
int sx, sy, tx, ty;
bool bad[110][110][4];

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};
char lasers[] = {'^', '>', 'v', '<'};

int q[110*110*4];
int dist[110][110][4];

int dir(char c) {
    for (int i=0; i<4; i++) if (c==lasers[i]) return i;
    return 0;
}

void solve() {

    cin>>n>>m;
    for (int i=0; i<n; i++) cin>>buf[i];

    sx = -1, sy = -1, tx = -1, ty = -1;
    for (int i=0; i<n; i++) for (int j=0; j<m; j++) {
        if (buf[i][j]=='S') {
            sx = i;
            sy = j;
            buf[i][j] = '.';
        }
        if (buf[i][j]=='G') {
            tx = i;
            ty = j;
            buf[i][j] = '.';
        }
    }

    if (tx==-1 || sx==-1) {
        printf("impossible");
        return;
    }

    for (int i=0; i<n; i++) {
        for (int j=0; j<m; j++) {
            for (int k=0; k<4; k++) {
                bad[i][j][k] = 0;
            }
        }
    }

    for (int i=0; i<n; i++) {
        for (int j=0; j<m; j++) {

            if (buf[i][j]=='#') {
                for (int k=0; k<4; k++) bad[i][j][k] = 1;
            }
            if (buf[i][j]!='.' && buf[i][j]!='#') {
                for (int k=0; k<4; k++) bad[i][j][k] = 1;

                int t = dir(buf[i][j]);

                for (int k=0; k<4; k++) {

                    int x = i + dx[(k+t)%4];
                    int y = j + dy[(k+t)%4];

                    while (x<n && x>=0 && y<m && y>=0 && buf[x][y]=='.') {

                        bad[x][y][k] = 1;

                        x = x + dx[(k+t)%4];
                        y = y + dy[(k+t)%4];

                    }

                }

            }
        }
    }


    for (int i=0; i<n; i++) for (int j=0; j<m; j++) for (int k=0; k<4; k++) dist[i][j][k] = -1;

    dist[sx][sy][0] = 0;

    int in = 0, fn = 0;
    q[fn++] = sy*n + sx;

    while (in<fn) {

        int p = q[in++];

        int k = p/(n*m);
        p %= (n*m);
        int y = p/n;
        p %= n;
        int x = p;

        if (dist[x][y][k]==-1) break;

        if (tx==x && ty==y) break;

        for (int t=0; t<4; t++) {

            int xx = x + dx[t];
            int yy = y + dy[t];
            int kk = (k+1)%4;

            if (xx<0 || xx>=n || yy<0 || yy>=m) continue;

            if (bad[xx][yy][kk]) continue;

            if (dist[xx][yy][kk]==-1) {

                dist[xx][yy][kk] = dist[x][y][k] + 1;
                q[fn++] = kk*n*m + yy*n + xx;

            }

        }

    }

    for (int i=0; i<4; i++) if (dist[tx][ty][i]!=-1) {

        printf("%d", dist[tx][ty][i]);

        return;

    }

    printf("impossible");

    return;


}

int main() {

    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    int cases;
    cin>>cases;
    for (int cas=1; cas<=cases; cas++) {

        printf("Case #%d: ", cas);

        solve();

        printf("\n");

    }

    return 0;

}

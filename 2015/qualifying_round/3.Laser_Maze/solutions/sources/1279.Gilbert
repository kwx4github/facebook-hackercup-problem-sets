#include <iostream>
#include <cstdio>
#include <queue>
using namespace std;

int T, M, N;
const int MAXN = 101;
int sx, sy;

char Map[MAXN][MAXN];
bool flag[MAXN][MAXN][4];

struct State
{
	int px, py;
	int state;
	State(int x, int y, int s): px(x), py(y), state(s){}
};

int fx[4] = {-1, 0, 1, 0};
int fy[4] = {0, -1, 0, 1};

bool isvalid(int x, int y)
{
	//cout << "Fasdfa" << endl;
	if(x >= 0 && x < M && y >= 0 && y < N && Map[x][y] >= 4 && Map[x][y] != '#') return true;
	return false;
}

bool isshoot(int x, int y, int s)
{
	//cout << "liguanbin" << endl;
	int x1, y1;
	for (x1 = x-1; x1 >= 0; --x1)
	{
		if (Map[x1][y] < 4)
		{
			if ((Map[x1][y] + s) % 4 == 2)
			{
				return true;
				/* code */
			}
			else
			{
				break;
			}
			/* code */
		}
		if (Map[x1][y] == '#') break;
	}
	for (x1 = x+1; x1 < M; ++x1)
	{
		if (Map[x1][y] < 4)
		{
			if ((Map[x1][y] + s) % 4 == 0)
			{
				return true;
				/* code */
			}
			else break;
			/* code */
		}
		if (Map[x1][y] == '#') break;
	}
	for (y1 = y-1; y1 >= 0; --y1)
	{
		if (Map[x][y1] < 4)
		{
			if ((Map[x][y1] + s) % 4 == 1)
			{
				return true;
				/* code */
			}
			else break;
			/* code */
		}
		if (Map[x][y1] == '#') break;
	}
	for (y1 = y + 1; y1 < N; ++y1)
	{
		if (Map[x][y1] < 4)
		{
			if ((Map[x][y1] + s) % 4 == 3)
			{
				return true;
				/* code */
			}
			else break;
			/* code */
		}
		if (Map[x][y1] == '#') break;
	}
	return false;
}

int bfs()
{
	int ans = -1;
	queue<State> qe;
	State init(sx, sy, 0);
	flag[sx][sy][0] = true;
	qe.push(init);
	while (!qe.empty())
	{
		State curr = qe.front();
		qe.pop();
		if (Map[curr.px][curr.py] == 'G')
		{
			ans = curr.state;
			break;
			/* code */
		}
		for (int i = 0; i < 4; ++i)
		{
			int newx = curr.px + fx[i];
			int newy = curr.py + fy[i];
			if (isvalid(newx, newy) && !isshoot(newx, newy, curr.state+1) && !flag[newx][newy][(curr.state + 1)%4] )
			{
				qe.push(State(newx, newy, curr.state + 1));
				flag[newx][newy][(curr.state+1)%4] = true;
				/* code */
			}
			/* code */
		}
	}
	return ans;
}

int main()
{
	FILE* fin = fopen("laser_maze.txt", "r");
	FILE* fout = fopen("laser_maze_out.txt", "w");
	fscanf(fin, "%d", &T);
	for (int s = 1; s <= T; ++s)
	{
		fscanf(fin, "%d%d", &M, &N);
		for (int i = 0; i < M; ++i)
		{
			fscanf(fin, "%s", &Map[i]);
			for (int j = 0; j < N; ++j)
			{
				//Map[i][j] = getchar();
				//fscanf(fin, "%c", &Map[i][j]);
				switch (Map[i][j])
				{
					case '^': Map[i][j] = 0; break;
					case '>': Map[i][j] = 1; break;
					case 'v': Map[i][j] = 2; break;
					case '<': Map[i][j] = 3; break;
					case 'S': sx = i, sy = j; break;
					default: break;
				}
			}
		}
		//cout << sx << " " << sy << endl;
		memset(flag, false, sizeof(flag));
		int ans = bfs();
		if (ans == -1)
		{
			fprintf(fout, "Case #%d: impossible\n", s);
			/* code */
		}
		else
		{
			fprintf(fout, "Case #%d: %d\n", s, ans);
		}
		/* code */
	}
	return 0;
}
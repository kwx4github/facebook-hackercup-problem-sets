#include <fstream>

using namespace std;

class maze
{
private:
	char elements[100][100];
	int rows;
	int cols;
public:
	maze(int M, int N)
	{
		rows=M;
		cols=N;
	}
	void set(int i, int j, char element)
	{
		if (i>0 && i<rows && j>0 && j<cols)
		{
			if (element!='S')
				elements[i][j]=element;
			else
				elements[i][j]='P';
		}
	}
	int shortest_path()
	{
		// Code to determine shortest path from start to goal
		// I'll finish this problem some other time :)
		return 0;
	}
};

int main()
{
	ifstream fin ("lasermaze.in");
	ofstream fout ("lasermaze.out");

	int T, result;
	int M, N;
	char element;

	fin >> T;

	for (int i=0; i<T; i++)
	{
		fin >> M >> N;
		
		maze maze(M, N);

		for (int j=0; j<M; j++)
		{
			for (int k=0; k<N; k++)
			{
				fin.get(element);
				maze.set(j, k, element);
			}
		}
		fout << "Case #" << i+1 << ": ";
		if (result=maze.shortest_path())
		{
			fout << result << "\n";
		}
		else
		{
			fout << "impossible\n";
		}
	}

	fin.close();
	fout.close();

	return 0;
}
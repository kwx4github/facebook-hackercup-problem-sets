#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

const int DX[] = { 1, 0, -1, 0 };
const int DY[] = { 0, -1, 0, 1 };
const char DZ[] = { 'v', '<', '^', '>' };

char A[128][128];
int B[128][128][4];
int R[128][128][4];

int SolveTest(int test)
{
	int N, M;
	scanf("%d%d", &N, &M);

	int i, j, k;
	FOR(i, 0, N)
		scanf("%s", A[i]);

	int sx, sy, sz, fx, fy, fz = -1;
	FOR(i, 0, N)
		FOR(j, 0, M)
		{
			if (A[i][j] == 'S')
			{
				sx = i;
				sy = j;
				A[i][j] = '.';
			}

			if (A[i][j] == 'G')
			{
				fx = i;
				fy = j;
				A[i][j] = '.';
			}
		}

	CLEAR(B, 0);
	FOR(i, 0, N)
		FOR(j, 0, M)
		{
			FOR(k, 0, 4)
				if (A[i][j] == DZ[k])
					break;

			if (k == 4)
				continue;

			int d = k;
			FOR(k, 0, 4)
			{
				int x = i;
				int y = j;
				int z = (d + k) & 3;
				while (true)
				{
					x += DX[z];
					y += DY[z];
					if (x < 0 || N <= x && y < 0 || M <= y || A[x][y] != '.')
						break;

					B[x][y][k] = 1;
				}
			}
		}

	CLEAR(R, -1);
	queue< pair<PII, int> > Q;
	R[sx][sy][0] = 0;
	Q.push(MP(PII(sx, sy), 0));
	while (!Q.empty())
	{
		sx = Q.front().first.first;
		sy = Q.front().first.second;
		sz = Q.front().second;
		Q.pop();

		if (sx == fx && sy == fy)
		{
			fz = R[sx][sy][sz];
			break;
		}

		FOR(i, 0, 4)
		{
			int x = sx + DX[i];
			int y = sy + DY[i];
			int z = (sz + 1) & 3;
			if (x < 0 || N <= x || y < 0 || M <= y || A[x][y] != '.' || R[x][y][z] != -1 || B[x][y][z] != 0)
				continue;

			R[x][y][z] = R[sx][sy][sz] + 1;
			Q.push(MP(PII(x, y), z));
		}
	}

	if (fz == -1)
		printf("Case #%d: impossible\n", test + 1);
	else
		printf("Case #%d: %d\n", test + 1, fz);

	return 0;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);

	int T, t;
	char buf[1 << 7];
	gets(buf);
	sscanf(buf, "%d", &T);
	FOR(t, 0, T)
	{
		fprintf(stderr, "Solving %d/%d\n", t + 1, T);
		SolveTest(t);
	}

	return 0;
};

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <deque>
#include <memory.h>
#include <list>
using namespace std;
int const N = 110;
int a[N][N][4];
bool v[N][N][4];
int ma[N][N];int t,n,m;
int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

struct node
{
	int x,y;
	int d;
	node(int x, int y, int d):x(x),y(y),d(d){}
	node(){}
};

int check(int x, int y)
{
	if (x < 0 || x >= n || y < 0 || y >= m)
		return 0;
	return 1;
}
void solve()
{
	vector<node> laser;
	list<node> q;
	node st,ed; 
	cin >>n>>m;
	int flag = 0;
	memset(ma,0,sizeof(ma));
	memset(v,0,sizeof(v));
	for (int i = 0; i< n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
		{
			if (s[j] == 'S')
			{
				st.x = i;
				st.y = j;
			}else if (s[j] == 'G')
			{
				ed.x = i;ed.y = j;
			}else if (s[j] == '.')
			{
				
			}
			else
			{
				ma[i][j] = 1;
				switch (s[j]){
				case '^':
					laser.push_back(node(i,j,0));
					break;
				case '>':
					laser.push_back(node(i,j,1));
					break;
				case 'v':
					laser.push_back(node(i,j,2));
					break;
				case '<':
					laser.push_back(node(i,j,3));
				}
			}
		}
	}
	for (int k = 0; k < 4; k++)
	{
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
			{
				a[i][j][k] = ma[i][j];
			}

		for (auto p = laser.begin(); p != laser.end(); p++)
		{
			int x = p->x;
			int y = p->y;
			int r = (p->d + k) % 4;
			do{
				x += dx[r];
				y += dy[r];
				if (!check(x,y)) break;
				if (ma[x][y]) break;
				a[x][y][k] = 1;
			}
			while(1);
		}
	}

	st.d = 0;
	q.push_back(st);
	v[st.x][st.y][st.d] = 1;
	/*
	if (a[st.x][st.y][0])
	{
		cout <<"impossible"<<endl;
		return;
	}
	*/
	while (q.size())
	{
		if (flag) break;
		node r = q.front();
	//	cout << r.x <<" "<<r.y<<endl;
		q.pop_front();
		for (int i = 0; i < 4; i++)
		{
			int x = r.x + dx[i]; int y = r.y + dy[i];
			int k = (r.d +1 ) % 4;
			if (check(x,y) &&!v[x][y][k] &&!a[x][y][k])
			{
				q.push_back(node(x,y,r.d+1));
				v[x][y][k] = 1;
				if (x == ed.x && y == ed.y)
				{
					flag = r.d+1;
					break;
				}
			}
		}
	}
	if (flag) cout << flag << endl;
	else cout <<"impossible"<<endl;
}
int main()
{
	freopen("a3.txt","r",stdin);
	freopen("out3.txt","w",stdout);
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		cout << "Case #" << i+1 << ": ";
		solve();
	}

	return 0;
}
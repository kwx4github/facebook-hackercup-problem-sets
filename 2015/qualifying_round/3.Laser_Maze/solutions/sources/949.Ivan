#include <cstdio>
#include <algorithm>
#include <queue>
#include <utility>
#define x first
#define y second

using namespace std;

int x,y,pocx,pocy,endx,endy;
int p[105][105];
char c[105];
int bio[105][105][6];

queue < pair < pair < int, int > , int > > q;

void farb(int cx,int cy){
    int col=p[cx][cy]-1;
//    printf ("%d %d %d -> %d\n",cx,cy,col,1<<col);
    for (int i=cx-1;!bio[i][cy][4];--i)
        bio[i][cy][(col+0)%4]=-1;
    for (int i=cx+1;!bio[i][cy][4];++i)
        bio[i][cy][(col+2)%4]=-1;
    for (int i=cy-1;!bio[cx][i][4];--i)
        bio[cx][i][(col+3)%4]=-1;
    for (int i=cy+1;!bio[cx][i][4];++i)
        bio[cx][i][(col+1)%4]=-1;
/*    for (int i=cx-1;!bio[i][cy][4];--i)
        p[i][cy]|=(1<<((col+0)%4));
    for (int i=cx+1;!bio[i][cy][4];++i)
        p[i][cy]|=(1<<((col+2)%4));
    for (int i=cy-1;!bio[cx][i][4];--i)
        p[cx][i]|=(1<<((col+3)%4));
    for (int i=cy+1;!bio[cx][i][4];++i)
        p[cx][i]|=(1<<((col+1)%4));/**/
}

int solve(){
    scanf ("%d%d",&x,&y);
    for (int i=0;i<x+2;++i)
        for (int j=0;j<y+2;++j){
            p[i][j]=0;
            for (int k=0;k<5;++k) bio[i][j][k]=-1;
        }
    for (int i=0;i<x;++i){
        scanf ("%s",c);
        for (int j=0;j<y;++j){
            if (c[j]=='.'){ for (int k=0;k<5;++k) bio[i+1][j+1][k]=0; }
            if (c[j]=='<'){ p[i+1][j+1]=2; }
            if (c[j]=='^'){ p[i+1][j+1]=1; }
            if (c[j]=='>'){ p[i+1][j+1]=4; }
            if (c[j]=='v'){ p[i+1][j+1]=3; }
            if (c[j]=='S'){ for (int k=0;k<5;++k) bio[i+1][j+1][k]=0;pocx=i+1;pocy=j+1;}
            if (c[j]=='G'){ for (int k=0;k<5;++k) bio[i+1][j+1][k]=0;endx=i+1;endy=j+1;}
        }
    }
    for (int i=1;i<=x;++i)
        for (int j=1;j<=y;++j)
            if (p[i][j] && bio[i][j][4]) farb(i,j);
/*    printf ("\n\n");
    for (int i=0;i<x+2;++i){
        for (int j=0;j<y+2;++j){
            for (int k=0;k<4;++k)
                printf ("%d ",abs(bio[i][j][k]));
            printf ("- ");
        }
        printf ("\n");
    }/**/
    while(!q.empty()) q.pop();
    q.push(make_pair(make_pair(pocx,pocy),0));
    int cx,cy,tajm;
    while(!q.empty()){
        cx=q.front().x.x;
        cy=q.front().x.y;
        tajm=q.front().y;
        if (cx==endx && cy==endy) return bio[cx][cy][tajm];
        q.pop();
        if (cx>x || cy>y) continue;
//        printf ("%d %d %d -> %d\n",cx,cy,tajm,bio[cx][cy][tajm]);
        if (bio[cx+1][cy][(tajm+1)%4]==0){ bio[cx+1][cy][(tajm+1)%4]=max(1,bio[cx][cy][tajm]+1); q.push(make_pair(make_pair(cx+1,cy),(tajm+1)%4));}
        if (bio[cx-1][cy][(tajm+1)%4]==0){ bio[cx-1][cy][(tajm+1)%4]=max(1,bio[cx][cy][tajm]+1); q.push(make_pair(make_pair(cx-1,cy),(tajm+1)%4));}
        if (bio[cx][cy+1][(tajm+1)%4]==0){ bio[cx][cy+1][(tajm+1)%4]=max(1,bio[cx][cy][tajm]+1); q.push(make_pair(make_pair(cx,cy+1),(tajm+1)%4));}
        if (bio[cx][cy-1][(tajm+1)%4]==0){ bio[cx][cy-1][(tajm+1)%4]=max(1,bio[cx][cy][tajm]+1); q.push(make_pair(make_pair(cx,cy-1),(tajm+1)%4));}
    }
    return -1;
}

int main(){
    int t;
    scanf ("%d",&t);
    for (int i=0;i<t;++i){
        printf ("Case #%d: ",i+1);
        int _sol=solve();
        if (_sol>=0) printf ("%d\n",_sol);
        else printf ("impossible\n");
    }
    return 0;
}

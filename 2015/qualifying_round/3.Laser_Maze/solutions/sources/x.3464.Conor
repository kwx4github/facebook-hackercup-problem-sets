import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;

public class FB0 {

	static BufferedReader br;

	static PrintWriter out;
	final static String FN = "las2.txt";
	final static String OFN = "output.txt";

	public static void main(String[] args) {

		try {

			br = new BufferedReader(new InputStreamReader(new FileInputStream(
					new File(FN))));
			out = new PrintWriter(new FileWriter(OFN));

			int[] dx = { -1, 1, 0, 0 };
			int[] dy = { 0, 0, 1, -1 };
			int n = readInt();
			l: for (int i = 0; i < n; i++) {
				
				System.out.println(i);
				int[] arr = readIntArr();
				int h = arr[0];
				int w = arr[1];
				String[] st = new String[h];

				ArrayList<int[]> las = new ArrayList<int[]>();
				int[] s = new int[2];
				int[] g = new int[2];
				for (int j = 0; j < h; j++) {
					st[j] = readLine();
					for (int k = 0; k < w; k++) {
						char c = st[j].charAt(k);
						if (c == 'S') {
							s[0] = k;
							s[1] = j;
						}
						if (c == 'G') {
							g[0] = k;
							g[1] = j;
						}
						if (c == '^' || c == 'v' || c == '<' || c == '>') {
							int a[] = new int[2];
							a[0] = k;
							a[1] = j;
							las.add(a);
						}
					}
				}

				boolean[][][] vis = new boolean[w][h][4];

				boolean[][][] blk = new boolean[w][h][4];

				for (int[] a : las) {
					int x = a[0];
					int y = a[1];
					for (int k = 0; k < 4; k++)
						blk[x][y][k] = true;
					char c = st[y].charAt(x);
					int pv = 0;
					if (c == '^')
						pv = 1;
					if (c == '<')
						pv = 2;
					if (c == 'v')
						pv = 3;

					for (int k = 0; k < 4; k++) {
						int dir = pv + k;
						dir %= 4;
						if (dir == 0) {
							for (int j = x + 1; j < w; j++) {
								char cv=st[y].charAt(j);
								if (cv != 'S'&&cv!='G'&&cv!='.')
									break;
								else
									blk[j][y][k] = true;
							}
						} else if (dir == 2) {
							for (int j = x; j-- > 0;) {
								char cv=st[y].charAt(j);
								if (cv != 'S'&&cv!='G'&&cv!='.')
									break;
								else
									blk[j][y][k] = true;
							}
						} else if (dir == 1) {
							for (int j = y; j-- > 0;) {
								char cv=st[j].charAt(x);
								if (cv != 'S'&&cv!='G'&&cv!='.')
									break;
								else
									blk[x][j][k] = true;
							}
						} else {
							for (int j = y + 1; j < h; j++) {
								char cv=st[j].charAt(x);
								if (cv != 'S'&&cv!='G'&&cv!='.')
									break;
								else
									blk[x][j][k] = true;
							}
						}
					}
				}
				int[] a = new int[4];
				a[0] = s[0];
				a[1] = s[1];

				vis[a[0]][a[1]][0] = true;
				LinkedList<int[]> q = new LinkedList<int[]>();
				q.add(a);
				while (q.size() > 0) {
					a = q.removeFirst();
					
					//System.out.println(a[0]+" "+a[1]);
					if (a[0] == g[0] && a[1] == g[1]) {
						print(i, "" + a[2]);
						continue l;
					}
					int pv = a[3] + 1;
					pv %= 4;
					for (int j = 0; j < 4; j++) {
						int xv = a[0] + dx[j];
						int yv = a[1] + dy[j];
						
						if (xv == w || xv == -1 || yv == h || yv == -1
								|| (st[yv].charAt(xv) == '#')
								|| vis[xv][yv][pv] || blk[xv][yv][pv]){
							
							//if(xv == w || xv == -1 || yv == h || yv == -1)continue;
							//if(blk[xv][yv][pv])System.out.println(xv+" "+yv+" "+pv);
							continue;
							
						}
						int ar[] = new int[4];
						ar[0] = xv;
						ar[1] = yv;
						ar[2] = a[2] + 1;
						ar[3] = pv;
						vis[xv][yv][pv]=true;
						q.add(ar);
					}

				}
				print(i, "impossible");

			}
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	static void print(int i, String s) {
		out.println("Case #" + (i + 1) + ": " + s);
	}

	static public String readLine() throws IOException {
		return br.readLine();

	}

	static public String readString() throws IOException {
		return br.readLine();

	}

	static public long readlong() throws IOException {
		return Long.parseLong(br.readLine());
	}

	static public int readInt() throws IOException {
		return Integer.parseInt(br.readLine());
	}

	static public int[] readIntArr() throws IOException {
		String[] str = br.readLine().split(" ");
		int arr[] = new int[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Integer.parseInt(str[i]);
		return arr;
	}

	static public double[] readDoubleArr() throws IOException {
		String[] str = br.readLine().split(" ");
		double arr[] = new double[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Double.parseDouble(str[i]);
		return arr;
	}

	static public long[] readLongArr() throws IOException {
		String[] str = br.readLine().split(" ");
		long arr[] = new long[str.length];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Long.parseLong(str[i]);
		return arr;
	}

	static public double readDouble() throws IOException {
		return Double.parseDouble(br.readLine());
	}
}

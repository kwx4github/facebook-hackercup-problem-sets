#include <iostream>
#include <vector>
#include <queue>
#include <tuple>
#include <cstdio>
using namespace std;
typedef pair<int,int> ii;
typedef tuple<int,int,int> iii;

char maze[100][100][4];
int dist[100][100][4];
ii source, goal;

ii dir[4] = {ii(0,1), ii(1,0), ii(0,-1), ii(-1,0)};
char turret[4] = {'>', 'v', '<', '^'};


int bfs(pair<int,int> node, int _time)
{
	//if(node == goal) return;
	queue<iii> q;
	q.push(make_tuple(node.first, node.second, _time));

	while(!q.empty()){

		int x = get<0>(q.front());
		int y = get<1>(q.front());
		_time = get<2>(q.front());

		//printf("x: %d  y: %d  t: %d  d:%d\n", x, y, _time, dist[x][y][_time]);

		q.pop();

		if(ii(x,y) == goal) return dist[x][y][_time] +1;

		for (int i = 0; i < 4; ++i)
		{
			if(dist[x + dir[i].first][y + dir[i].second][_time] == -1) 
			if(maze[x + dir[i].first][y + dir[i].second][_time] != '#' && maze[x + dir[i].first][y + dir[i].second][_time] != '!') {
				if(dist[x + dir[i].first][y + dir[i].second][(_time+1)%4] == -1) {
					q.push(make_tuple(x + dir[i].first, y + dir[i].second, (_time+1)%4)); 
					dist[x + dir[i].first][y + dir[i].second][(_time+1)%4] = dist[x][y][_time] +1;
				}
			}
		}

	}

	return -1;

}



int main()
{
	int T, M, N;
	char temp;
	cin >> T;
	for (int i = 0; i < T; ++i)
	{
		cin >> M >> N;
		for(int j=0; j<M; j++) for(int k=0; k<N; k++)
		{	
			cin >> temp;
			for(int l=0; l<4; l++) { maze[j][k][l] = temp; dist[j][k][l] = -1; }
		}


		for (int l = 0; l < 4; ++l)
		{
			for (int j = 0; j < M; ++j)
			{
				for (int k = 0; k < N; ++k)
				{
					if(maze[j][k][l] == 'S') source = make_pair(j,k);
					if(maze[j][k][l] == 'G') goal = make_pair(j,k);
					for (int m = 0; m < 4; ++m)
					{
						if(maze[j][k][l] == turret[m])
						{
							maze[j][k][l] = '#';
							ii pos = ii(j+ dir[(l+m)%4].first, k+ dir[(l+m)%4].second);
							if(pos.first >= 0 && pos.first < M && pos.second >= 0 && pos.second < N)
							while(maze[pos.first][pos.second][l] != '#'  && maze[pos.first][pos.second][l] != '<' && 
								  maze[pos.first][pos.second][l] != '>' && maze[pos.first][pos.second][l] != '^' && maze[pos.first][pos.second][l] != 'v'){
								maze[pos.first][pos.second][l] = '!';
								pos.first += dir[(l+m)%4].first; pos.second += dir[(l+m)%4].second;
								if(pos.first < 0 || pos.first >= M || pos.second < 0 || pos.second >= N) break;
							}
						}
					}
				}
			}
		}

		/*
		for(int l=0; l<4; l++)
		{
			for(int j=0; j<M; j++)
			{
				for(int k=0; k<N; k++)
				{
					cout << maze[j][k][l];
				}
				cout << endl;
			}
			cout << endl << endl << endl;
		}
		//*/

		dist[source.first][source.second][0] = 0;
		int result = bfs(source, 1);
		
		cout << "Case #" << i+1 << ": ";
		if(result == -1) cout << "IMPOSSIBLE" << endl;
		else cout << result << endl;
		
		//turrets.clear();
	}
	return 0;
}
#include <stdio.h>
#include <string.h>
#include <string>
#include <math.h>
#include <iostream>
#include <vector>
#include <queue>
#include <map>

#define MAX 99999999

using namespace std;

struct are{
    int x, y, c, e;

    are(){ x = y = c = e = 0; }
    are(int p1, int p2, int p3, int p4){ x = p1; y = p2; c = p3; e = p4; }

    bool operator <( const are a) const { return c > a.c; }
};

char mat[110][110];
int c[110][110][4];
int n, m;

bool T(char c){
    if(c == '<' || c == '>' || c == 'v' || c == '^' || c == '#')
        return false;
    return true;
}

int dj(int xi, int yi, int xf, int yf){

    are d;
    int i, j, p;
    priority_queue<are> fila;

    if(xi + 1 < n && T(mat[xi+1][yi])){fila.push( are(xi+1, yi, 1, 1) ); c[xi+1][yi][1] = 1; }
    if(xi - 1 >= 0 && T(mat[xi-1][yi])){fila.push( are(xi-1, yi, 1, 1) ); c[xi-1][yi][1] = 1; }
    if(yi + 1 < m && T(mat[xi][yi+1])){fila.push( are(xi, yi+1, 1, 1) ); c[xi][yi+1][1] = 1; }
    if(yi - 1 >= 0 && T(mat[xi][yi-1])){fila.push( are(xi, yi-1, 1, 1) ); c[xi][yi-1][1] = 1; }

    while( fila.size() > 0 ){
        d = fila.top(); fila.pop();

        if(d.x == xf && d.y == yf)
            return d.c;

        if(d.c > c[d.x][d.y][d.e])
            continue;

        i = d.x; j = d.y;
        p = (d.e + 1)%4;

        if(i+1 < n && c[i+1][j][p] > c[i][j][d.e] + 1) {
                c[i+1][j][p] = c[i][j][d.e] + 1;
                fila.push( are( i+1, j, c[i][j][d.e] + 1, p) ) ;
        }

        if(i-1 >= 0 && c[i-1][j][p] > c[i][j][d.e] + 1) {
                c[i-1][j][p] = c[i][j][d.e] + 1;
                fila.push( are( i-1, j, c[i][j][d.e] + 1, p) ) ;
        }

        if(j+1 < m && c[i][j+1][p] > c[i][j][d.e] + 1) {
                c[i][j+1][p] = c[i][j][d.e] + 1;
                fila.push( are( i, j+1, c[i][j][d.e] + 1, p) ) ;
        }

        if(j-1 >= 0 && c[i][j-1][p] > c[i][j][d.e] + 1) {
                c[i][j-1][p] = c[i][j][d.e] + 1;
                fila.push( are( i, j-1, c[i][j][d.e] + 1, p) ) ;
        }


    }
    return MAX;
}

int main(){
    int t;
    int i, j, k;
    int xi, xf, yi, yf;
    int ins = 1;

    scanf("%d", &t);
    while(t--){
        scanf("%d %d", &n, &m);

        for(i = 0; i < n; i++)
            scanf("%s", mat[i]);

        for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
                for(k = 0; k < 4; k++)
                    c[i][j][k] = MAX;

        for(i = 0; i < n; i++)
            for(j = 0; j < m; j++){
                if(mat[i][j] == 'S'){ xi = i; yi = j; c[i][j][0] = 0; continue; }
                if(mat[i][j] == 'G'){ xf = i; yf = j; continue; }
                if(mat[i][j] == '#'){ c[i][j][0] = c[i][j][1] = c[i][j][2] = c[i][j][3] = 0; continue; }
                if(mat[i][j] == '<'){
                    c[i][j][0] = c[i][j][1] = c[i][j][2] = c[i][j][3] = 0;
                    for(k = 1; i+k < n && T(mat[i+k][j]); k++) c[i+k][j][3] = 0;
                    for(k = 1; i-k >= 0 && T(mat[i-k][j]); k++) c[i-k][j][1] = 0;
                    for(k = 1; j+k < m && T(mat[i][j+k]); k++) c[i][j+k][2] = 0;
                    for(k = 1; j-k >= 0 && T(mat[i][j-k]); k++) c[i][j-k][0] = 0;
                    continue;
                }
                if(mat[i][j] == '>'){
                    c[i][j][0] = c[i][j][1] = c[i][j][2] = c[i][j][3] = 0;
                    for(k = 1; i+k < n && T(mat[i+k][j]); k++) c[i+k][j][1] = 0;
                    for(k = 1; i-k >= 0 && T(mat[i-k][j]); k++) c[i-k][j][3] = 0;
                    for(k = 1; j+k < m && T(mat[i][j+k]); k++) c[i][j+k][0] = 0;
                    for(k = 1; j-k >= 0 && T(mat[i][j-k]); k++) c[i][j-k][2] = 0;
                    continue;
                }
                if(mat[i][j] == '^'){
                    c[i][j][0] = c[i][j][1] = c[i][j][2] = c[i][j][3] = 0;
                    for(k = 1; i+k < n && T(mat[i+k][j]); k++) c[i+k][j][2] = 0;
                    for(k = 1; i-k >= 0 && T(mat[i-k][j]); k++) c[i-k][j][0] = 0;
                    for(k = 1; j+k < m && T(mat[i][j+k]); k++) c[i][j+k][1] = 0;
                    for(k = 1; j-k >= 0 && T(mat[i][j-k]); k++) c[i][j-k][3] = 0;
                    continue;
                }
                if(mat[i][j] == 'v'){
                    c[i][j][0] = c[i][j][1] = c[i][j][2] = c[i][j][3] = 0;
                    for(k = 1; i+k < n && T(mat[i+k][j]); k++) c[i+k][j][0] = 0;
                    for(k = 1; i-k >= 0 && T(mat[i-k][j]); k++) c[i-k][j][2] = 0;
                    for(k = 1; j+k < m && T(mat[i][j+k]); k++) c[i][j+k][3] = 0;
                    for(k = 1; j-k >= 0 && T(mat[i][j-k]); k++) c[i][j-k][1] = 0;
                    continue;
                }
            }

        int ans = dj(xi, yi, xf, yf);

        if(ans == MAX)
            printf("Case #%d: impossible\n", ins++);
        else
            printf("Case #%d: %d\n", ins++, ans);


    }
}

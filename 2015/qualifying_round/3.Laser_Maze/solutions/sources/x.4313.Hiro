// A.cpp : Defines the entry point for the console application.
//

#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <utility>
#include <set>
#include <cctype>
#include <queue>
#include <stack>
#include <fstream>
#include <cstring>

using namespace std;
#define ll long long


ll gcd(ll m, ll n)
{
    ll r;
    if (m < n) {swap(m, n);}
    if (n == 0) {return m;}
    if ((r = m % n)) {return gcd(n, r);}
    return n;
}

ll lcm(ll m, ll n)
{
    return (m * n) / gcd(m, n);
}



int main(){
	ll cases; 
	cin>>cases;
	for(ll cas=0;cas<cases;++cas){
		cout<<"Case #"<<cas+1<<": ";

		int R,C;
		cin>>R>>C;
		vector<string> in(R);
		for(int i = 0; i< R; ++i)
		{
			cin>>in[i];
		}

		int sr, sc;
		map<pair<int,int>, int> laser;
		for(int i = 0; i < in.size(); ++i)
		{
			for(int j =0;j<in[0].length();++j)
			{
				if(in[i][j]=='S'){
					sr = i;
					sc = j;
				}else if(in[i][j]=='^')
				{
					laser[make_pair(i,j)] = 1;
				}else if(in[i][j]=='>')
				{
					laser[make_pair(i,j)] = 2;
				}else if(in[i][j]=='v')
				{
					laser[make_pair(i,j)] = 3;
				}else if(in[i][j]=='<')
				{
					laser[make_pair(i,j)] = 4;
				}
			}
		}

		int fireMap[100][100];
		memset(fireMap,0,sizeof(fireMap));
		const int dr[4]={-1, 0, 1, 0};
		const int dc[4]={0, 1, 0, -1};

		for(map<pair<int,int>, int>::iterator it = laser.begin(); it != laser.end(); ++it)
		{
			for(int i = 0; i < 4; ++i)
			{
				int d = it->second - 1 + i;
				int r = it->first.first + dr[d];
				int c = it->first.second + dc[d];

				
				while(r >= 0 && r <in.size() && c >=0 && c<in[0].length() &&
					(in[r][c] =='.' || in[r][c]=='G'||in[r][c]=='S'))
				{
					fireMap[r][c] |= (1<<i);
					r+=dr[d];
					c+=dc[d];
				}
			}
		}


		int visited[4][100][100];
		memset(visited, -1, sizeof(visited));

		queue<int> qv;
		queue<pair<int,int> > qc;

		qv.push(0);
		qc.push(make_pair(sr, sc));
		visited[0][sr][sc]=0;

		bool done = false;
		while(!qv.empty())
		{
			int v = qv.front();
			qv.pop();
			int r=qc.front().first;
			int c = qc.front().second;
			qc.pop();

			for(int i = 0; i < 4; ++i)
			{
				if(r+dr[i]<0 || c+dc[i]<0 || r+dr[i]>=in.size() || c+dc[i]>=in[0].length())
					continue;

				int nr = r+dr[i];
				int nc = c+dc[i];
				int nv = (v+1)%4;
				int nstep = visited[v][r][c] + 1;

				if(in[nr][nc] == '#' || in[nr][nc] =='^' || in[nr][nc]=='>'||in[nr][nc]=='v'||in[nr][nc]=='<')
					continue;

				if(visited[nv][nr][nc] != -1 && visited[nv][nr][nc] <= nstep)
					continue;

				if( (fireMap[nr][nc]>>nv)&1)
				{
					continue;
				}

				if(in[nr][nc] == 'G')
				{
					cout<<nstep;
					done = true;
					break;
				}
				visited[nv][nr][nc] = nstep;
				qv.push(nv);
				qc.push(make_pair(nr,nc));
			}
			if(done)
				break;
		}

		if(!done)
			cout<<"impossible";
		cout<<endl;
	}
	
	return 0;
}




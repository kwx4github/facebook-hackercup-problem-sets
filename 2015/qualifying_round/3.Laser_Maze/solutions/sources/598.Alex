#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<list>
using namespace std;
int tc,h,w;
char m[105][105];
bool safe[4][105][105],vis[4][105][105];
int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};
bool is_block(int j,int k){
	if(m[j][k]=='#' || m[j][k]=='>' || m[j][k]=='<' || m[j][k]=='^' || m[j][k]=='v') return true;
	else return false;
}
struct state{
	int time;
	int cx,cy;
};
list<state> Q;
int main(){
	freopen("laser_maze.txt","r",stdin);
	freopen("maze.txt","w",stdout);
	scanf("%d",&tc);
	for(int t=1;t<=tc;t++){
		//input
		scanf("%d %d",&h,&w);
		for(int i=0;i<h;i++){
			scanf("\n%s",m[i]);
		}
		//generate safe[][][]
		for(int i=0;i<4;i++)
		for(int j=0;j<h;j++)
		for(int k=0;k<w;k++){
			if(is_block(j,k)) safe[i][j][k]=0;
			else safe[i][j][k]=1;
		}
		for(int i=0;i<4;i++){
			for(int j=0;j<h;j++){
				for(int k=0;k<w;k++){
					int u;
					if(m[j][k]=='^') u=(i+0)%4;
					else if(m[j][k]=='>') u=(i+1)%4;
					else if(m[j][k]=='v') u=(i+2)%4;
					else if(m[j][k]=='<') u=(i+3)%4;
					else continue;
					int cx=j,cy=k;
					while(cx>=0 && cx<h && cy>=0 && cy<w && ((cx==j && cy==k) || !is_block(cx,cy))){
						safe[i][cx][cy]=0;
						cx+=dx[u];
						cy+=dy[u];
					}
				}
			}
		}
		
//		for(int i=0;i<4;i++){
//			printf("TIME 4K+%d: \n",i);
//			for(int j=0;j<h;j++){
//				for(int k=0;k<w;k++){
//					printf("%d",safe[i][j][k]);
//				}
//				printf("\n");
//			}
//		}
		//prep. bfs
		int ans=-1;
		memset(vis,0,sizeof(vis));
		while(!Q.empty()) Q.pop_back();
		for(int i=0;i<h;i++){
			for(int j=0;j<w;j++){
				if(m[i][j]=='S'){
					Q.push_back((state){0,i,j});
					vis[0][i][j]=1;
					goto startnow;
				}
			}
		}
		startnow:
		//bfs
		while(!Q.empty()){
			state cur=Q.front();
			Q.pop_front();
			if(m[cur.cx][cur.cy]=='G'){
				ans=cur.time;
				break;
			}
			for(int k=0;k<4;k++){
				int ax=cur.cx+dx[k];
				int ay=cur.cy+dy[k];
				if(ax<0 || ax>=h || ay<0 || ay>=w) continue;
				if(!safe[(cur.time+1)%4][ax][ay]) continue;
				if(vis[(cur.time+1)%4][ax][ay]) continue;
				vis[(cur.time+1)%4][ax][ay]=1;
				Q.push_back((state){cur.time+1,ax,ay});
			}
		}
		printf("Case #%d: ",t);
		if(ans==-1) printf("impossible\n");
		else printf("%d\n",ans);
	}
	return 0;
}

import sun.awt.image.ImageWatched;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

/**
 * Created by Admin on 1/9/2015.
 */
public class HackerCupLaserMaze {
    public static class Node{
        int i, j, score;
        public Node(int i, int j, int score){
            this.i = i;
            this.j = j;
            this.score = score;
        }
    }
    public static ArrayList<Character> replaceWheel = new ArrayList();
    public static int r, c;
    public static char[][] originalBoard;
    public static char[][][] boards;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        replaceWheel.add('<');
        replaceWheel.add('^');
        replaceWheel.add('>');
        replaceWheel.add('v');
        int tc = sc.nextInt();
        for(int z = 1; z <= tc; z++){
            r = sc.nextInt();
            c = sc.nextInt();
            sc.nextLine();
            originalBoard = new char[r][c];
            for(int i = 0 ; i < r; i++){
                originalBoard[i] = sc.nextLine().toCharArray();
            }
            boards = new char[4][r][c];
            boards[0] = originalBoard;
            int startI = 0;
            int startJ = 0;
            int endI = 0;
            int endJ = 0;
            for(int i = 1; i <= 3; i++){
                for(int j = 0; j < r; j++){
                    for(int k = 0; k < c; k++){
                        if(originalBoard[j][k] == 'S'){
                            startI = j;
                            startJ = k;
                            originalBoard[j][k] = '.';
                        } else if(originalBoard[j][k] == 'G'){
                            endI = j;
                            endJ = k;
                            originalBoard[j][k] = '.';
                        }
                        if(replaceWheel.contains(boards[i-1][j][k])){
                            boards[i][j][k] = replaceWheel.get((replaceWheel.indexOf(boards[i-1][j][k])+1)%4);
                        } else {
                            boards[i][j][k] = originalBoard[j][k];
                        }
                    }
                }
            }
            for(int i = 0; i <= 3; i++){
                boards[i] = fix(boards[i]);
            }
            //primed all the boards, time for bfs
            Node start = new Node(startI, startJ, 0);
            LinkedList<Node> q = new LinkedList<Node>();
            q.add(start);
            boolean[][][] visited = new boolean[4][r][c];
            int[] dx = {-1, 1, 0, 0};
            int[] dy = {0, 0, 1, -1};
            int ans = -1;
            while(q.size() > 0){
                Node cur = q.poll();
                //System.out.printf("%d,%d.%d\n",cur.i,cur.j, cur.score);
                if(cur.i == endI && cur.j == endJ){
                    ans = cur.score;
                    break;
                }
                if(visited[(cur.score)%4][cur.i][cur.j]){
                    continue;
                } else {
                    visited[cur.score%4][cur.i][cur.j]=true;
                }
                for(int i = 0; i < 4; i++){
                    int newX = dx[i]+cur.i;
                    int newY = dy[i]+cur.j;
                    if(isValid(newX, newY, cur.score+1)){
                        q.add(new Node(newX, newY, cur.score+1));
                    }
                }
            }
            String answer;
            if(ans == -1){
                answer = "impossible";
            } else {
                answer = ans+"";
            }
            System.out.printf("Case #%d: %s\n",z,answer);
        }
    }
    public static boolean isValid(int i, int j, int score){
        if(i > -1 && j > -1 && i < r && j < c){
            return boards[score%4][i][j] == '.';
        }
        return false;
    }
    public static char[][] fix(char[][] mat){
        for(int i = 0; i < mat.length; i++){
            for(int j = 0; j < mat[0].length; j++){
                if(mat[i][j] == 'v'){
                    for(int k = i+1; k < mat.length; k++){
                        if(!replaceWheel.contains(mat[k][j])) {
                            mat[k][j] = '#';
                        }
                    }
                } else if(mat[i][j]=='^'){
                    for(int k = i-1; k > -1; k--){
                        if(!replaceWheel.contains(mat[k][j])) {
                            mat[k][j] = '#';
                        }
                    }
                } else if(mat[i][j]=='>'){
                    for(int k = j+1; k < mat[0].length; k++){
                        if(!replaceWheel.contains(mat[i][k])) {
                            mat[i][k] = '#';
                        }
                    }
                } else if(mat[i][j]=='<'){
                    for(int k = j-1; k > -1; k--){
                        if(!replaceWheel.contains(mat[i][k])) {
                            mat[i][k] = '#';
                        }
                    }
                }
            }
        }
        return mat;
    }
}

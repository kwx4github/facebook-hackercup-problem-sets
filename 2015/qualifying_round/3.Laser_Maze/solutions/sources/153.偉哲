#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstring>
#include <cstdlib>

using namespace std;
int T, N, M;
pair<int,int> st, ed;

char mp[200][200];

void input()
{
	char c;
	scanf(" %d %d", &N, &M);

	for (int i = 0; i < N; i++ ){
		for (int j = 0; j < M; j++ ){
			scanf(" %c", &c);
			if (c == 'S'){
				c = '.';
				st = make_pair(i,j);
			}else if (c == 'G'){
				c = '.';
				ed = make_pair(i,j);
			}
			mp[i][j] = c;
		}
	}
}

int adj[5][105][105];

void build()
{
	memset(adj, 0, sizeof(adj));
	for (int a = 0; a < 4; a++ ){
		for (int b = 0; b < N; b++ ){
			for (int c = 0; c < M; c++ ){
				if (mp[b][c] == '#'){
					adj[a][b][c] = 1;
				}else if (mp[b][c] == '^'){
					adj[a][b][c] = 1;
					for (int i = b-1; i >= 0 && mp[i][c] == '.' ; i-- )
						adj[a][i][c] = 1;
					mp[b][c] = '>';
				}else if (mp[b][c] == '>' ){
					adj[a][b][c] = 1;
					for (int i = c+1; i < M && mp[b][i] == '.'; i++ )
						adj[a][b][i] = 1;
					mp[b][c] = 'v';
				}else if (mp[b][c] == 'v' ){
					adj[a][b][c] = 1;
					for (int i = b+1; i < N && mp[i][c] == '.'; i++ )
						adj[a][i][c] = 1;
					mp[b][c] = '<';
				}else if (mp[b][c] == '<' ){
					adj[a][b][c] = 1;
					for (int i = c-1; i >= 0 && mp[b][i] == '.'; i-- )
						adj[a][b][i] = 1;
					mp[b][c] = '^';
				}
			}
		}
	}
}

bool check(int x,int y, int t)
{
	if( x < 0 || x >= N || y < 0 || y >= M )
		return false;
	return adj[t][x][y]==0;
}

void solve()
{
	int dir[4][2] = {{0,-1}, {0,1}, {-1,0}, {1,0}};
	int color[4][105][105];
	queue<pair<pair<int,int>,int> > qu;

	int x,y,w;
	qu.push(make_pair(st, 0));
	memset(color, 0, sizeof(color));
	while(!qu.empty()){
		x = qu.front().first.first;
		y = qu.front().first.second;
		w = qu.front().second;
		qu.pop();

		if( x == ed.first && y == ed.second ){
			printf("%d\n", w);
			return;
		}

		for (int t = 0; t < 4; t++ ){
			int nx = dir[t][0] + x;
			int ny = dir[t][1] + y;
			int nw = w+1;
			if (check(nx,ny,(w+1)%4)){
				if (color[nw%4][nx][ny] == 0) {
					color[nw%4][nx][ny] = 1;
					qu.push(make_pair(make_pair(nx,ny), nw));
				}
			}
		}
	}

	printf("impossible\n");
}

int main()
{
	scanf(" %d",&T);

	for (int x = 1; x <= T; x++ ){
		printf("Case #%d: ", x);
		input();
		build();
		solve();
	}

	return 0;
}
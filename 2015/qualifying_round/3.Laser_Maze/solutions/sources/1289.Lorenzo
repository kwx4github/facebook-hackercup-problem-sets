#include<iostream>
#include<vector>
#include<climits>
#include<algorithm>
#include<set>
#include<queue>
using namespace std;
#define LL long long
#define MOD 100000000000
int M, N;
int possoAndare(char str[100][101], int tempo, int Y, int X)
{
	if(str[Y][X]=='#'||str[Y][X]<4)
		return false;
	//controllo se mi sparano da sopra
	for(int yy=Y-1;yy>=0;yy--)
		if(str[yy][X]<4)
		{
			int doveSparo=(str[yy][X]+tempo)%4;
			if(doveSparo==2)//verso il basso
				return false;
			break;
		}
		else if(str[yy][X]=='#')
			break;
	for(int yy=Y+1;yy<M;yy++)
		if(str[yy][X]<4)
		{
			int doveSparo=(str[yy][X]+tempo)%4;
			if(doveSparo==0)//verso alto
				return false;
			break;
		}else if(str[yy][X]=='#')
			break;
	for(int xx=X-1;xx>=0;xx--)
		if(str[Y][xx]<4)
		{
			int doveSparo=(str[Y][xx]+tempo)%4;
			if(doveSparo==1)//verso destra
				return false;
			break;
		}else if(str[Y][xx]=='#')
			break;
	for(int xx=X+1;xx<N;xx++)
		if(str[Y][xx]<4)
		{
			int doveSparo=(str[Y][xx]+tempo)%4;
			if(doveSparo==3)//verso sinistra
				return false;
			break;
		}else if(str[Y][xx]=='#')
			break;
	return true;
}

int main(void)
{
	int t;
	cin >> t;
	for(int p=1;p<=t;p++)
	{
		cout << "Case #" << p << ": ";
		
		cin >> M >> N;
		char str[100][101];
		for(int i=0;i<M;i++)
			cin >> str[i];
		int dis[M][N][4];
		queue<pair<int, pair<int, int> > > coda;
		int yfin, xfin;
		for(int i=0;i<M;i++)
			for(int k=0;k<N;k++)
			{
				for(int z=0;z<4;z++)
					dis[i][k][z]=INT_MAX;
				if(str[i][k]=='^')
					str[i][k]=0;
				else if(str[i][k]=='>')
					str[i][k]=1;
				else if(str[i][k]=='v')
					str[i][k]=2;
				else if(str[i][k]=='<')
					str[i][k]=3;
				else if(str[i][k]=='S')
					coda.push({0, {i, k}}), str[i][k]='.', dis[i][k][0]=0;
				else if(str[i][k]=='G')
					str[i][k]='.', yfin=i, xfin=k;
			}
		while(!coda.empty())
		{
			int tempo=coda.front().first;tempo++;
			int daY=coda.front().second.first;
			int daX=coda.front().second.second;
			coda.pop();
			//cout << tempo << " " << daY << " " << daX << endl;
			if(daY>0&&dis[daY-1][daX][tempo%4]==INT_MAX&&possoAndare(str, tempo, daY-1, daX))
			{
				dis[daY-1][daX][tempo%4]=tempo;
				coda.push({tempo, {daY-1, daX}});
			}
			if(daY<M-1&&dis[daY+1][daX][tempo%4]==INT_MAX&&possoAndare(str, tempo, daY+1, daX))
			{
				dis[daY+1][daX][tempo%4]=tempo;
				coda.push({tempo, {daY+1, daX}});
			}
			if(daX>0&&dis[daY][daX-1][tempo%4]==INT_MAX&&possoAndare(str, tempo, daY, daX-1))
			{
				dis[daY][daX-1][tempo%4]=tempo;
				coda.push({tempo, {daY, daX-1}});
			}
			if(daX<N-1&&dis[daY][daX+1][tempo%4]==INT_MAX&&possoAndare(str, tempo, daY, daX+1))
			{
				dis[daY][daX+1][tempo%4]=tempo;
				coda.push({tempo, {daY, daX+1}});
			}
		}
		int minDis=*min_element(&dis[yfin][xfin][0], &dis[yfin][xfin][4]);
		if(minDis==INT_MAX)
			cout << "impossible";
		else cout << minDis;
		cout << endl;
	}
}

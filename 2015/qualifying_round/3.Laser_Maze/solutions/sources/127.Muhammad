#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <cassert>
#define makmu using
#define ndasmu namespace
#define gundulmu std

makmu ndasmu gundulmu;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> pii;
typedef pair<double,double> pdd;
typedef pair<string,string> pss;
typedef pair<int,double> pid;
typedef pair<int,LL> pil;
typedef pair<LL,LL> pll;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define SYNC ios_base::sync_with_stdio(false)
#define TIE cin.tie(0)
#define INF 1000000000
#define INFLL 4000000000000000000LL
#define EPS 1e-9
#define MOD 1000000007LL
#define DEBUG puts("DEBUG")

#ifdef _WIN32
#define getchar_unlocked getchar
#endif

#define g getchar_unlocked

int dx8[8]={-1,-1,0,1,1,1,0,-1},dx4[4]={-1,0,1,0};
int dy8[8]={0,-1,-1,-1,0,1,1,1},dy4[4]={0,-1,0,1};

inline void open(string name){
 freopen((name+".in").c_str(),"r",stdin);
 freopen((name+".out").c_str(),"w",stdout);
}

inline void close(){
 fclose(stdin);
 fclose(stdout);
}

inline int io(){
 register char c;
 while(1){
  c=g();
  if(c!='\n' && c!=' ') break;
 }
 int res=0,sign=1;
 if(c=='-') sign=-1;
 else       res=c-'0';
 while(1){
  c=g();
  if(c==' ' || c=='\n' || c==EOF) break;
  res=(res<<3)+(res<<1)+c-'0';
 }
 return res*sign;
}

///////////////////////////////////////////////////
//////            End of Template            /////
/////////////////////////////////////////////////

int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};

struct state{
    int row;
    int col;
    int tim;
    
    state(){}
    
    state(int x,int y,int z){
        row = x;
        col = y;
        tim = z;
    }
};

int dist[105][105][5];
int r,c;
int tc;
char s[105][105];
bool flag[105][105][4];

void BFS(int rs,int cs){
    queue<state> q;
    
    dist[rs][cs][0] = 0;
    q.push(state(rs,cs,0));
    while(!q.empty()){
        state now = q.front();
        //printf("%d %d %d")
        q.pop();
        int ndis = dist[now.row][now.col][now.tim] + 1;
        int ntim = (now.tim + 1) % 4;
        for(int i = 0 ; i < 4 ; i++){
            int nr = now.row + dr[i];
            int nc = now.col + dc[i];
            if(nr >= 0 && nr < r && nc >= 0 && nc < c && !flag[nr][nc][ntim] && dist[nr][nc][ntim] > ndis){
                dist[nr][nc][ntim] = ndis;
                q.push(state(nr,nc,ntim));
            }
        }
    }
}

void Preprocess(int rs,int cs){
    for(int i = 0 ; i < 4 ; i++)
        flag[rs][cs][i] = 1;
        
    int st;
    if(s[rs][cs] == '^') st = 0;
    else if(s[rs][cs] == '>') st = 1;
    else if(s[rs][cs] == 'v') st = 2;
    else if(s[rs][cs] == '<') st = 3;
    else return;
    
    for(int i = 0 ; i < 4 ; i++){
        int op = (st + i) % 4;
        int rr = rs, cc = cs;
        rr += dr[op];
        cc += dc[op];
        
        while(rr >= 0 && rr < r && cc >= 0 && cc < c){
            if(!(s[rr][cc] == 'S' || s[rr][cc] == 'G' || s[rr][cc] == '.')) break;
            flag[rr][cc][i] = 1;
            rr += dr[op];
            cc += dc[op];
        }
    }
}

void Reset(){
    for(int i = 0 ; i < r ; i++)
        for(int j = 0 ; j < c ; j++)
            for(int k = 0 ; k < 4 ; k++){
                dist[i][j][k] = INF;
                flag[i][j][k] = 0;
            }
}

int main(){
  scanf("%d",&tc);
  for(int t = 1 ; t <= tc ; t++){
    scanf("%d %d",&r,&c);
    Reset();
    for(int i = 0 ; i < r ; i++)
        scanf("%s",s[i]);
    for(int i = 0 ; i < r ; i++)
        for(int j = 0 ; j < c ; j++){
            if(s[i][j] == 'S' || s[i][j] == 'G' || s[i][j] == '.') continue;
            else Preprocess(i,j);
        }    
    for(int i = 0 ; i < r ; i++)
        for(int j = 0 ; j < c ; j++)
            if(s[i][j] == 'S') BFS(i,j);
    int ans = INF;
    for(int i = 0 ; i < r; i++)
        for(int j = 0 ; j < c ; j++)
            if(s[i][j] == 'G')
                for(int k = 0 ; k < 4 ; k++)
                    ans = min(ans,dist[i][j][k]);
    printf("Case #%d: ",t);
    if(ans == INF) printf("impossible\n");
    else printf("%d\n",ans);                            
  }
 //puts("ganteng");
 return 0;
}


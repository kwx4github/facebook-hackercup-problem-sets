#include <iostream>
#include <cstring>
#include <climits>
#include <queue>
using namespace std;
int n,m;
char G[110][110],G2[110][110];
bool can[4][110][110];
bool vis[4][110][110];
int dist[4][110][110];
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
struct matarpepe{
    int r,c,state;
    matarpepe(){}
    matarpepe(int _r,int _c,int s){
        r=_r,c=_c,state=s;
    }
};
vector<pair<int,int> >vp;
void prohibido(int check){
    for(auto par:vp){
            //cout<<"estoy entrando"<<endl;
            if(G2[par.first][par.second]=='^'){
                pair<int,int>cpy=par;
                cpy.first--;
                while(cpy.first>0&&G2[cpy.first][cpy.second]!='#'
                &&G2[cpy.first][cpy.second]!='^'&&
                G2[cpy.first][cpy.second]!='>'&&
                G2[cpy.first][cpy.second]!='v'&&
                G2[cpy.first][cpy.second]!='<'){
                    can[check][cpy.first][cpy.second]=false;
                    cpy.first--;
                    if(cpy.first==-1)break;
                }
            }
            if(G2[par.first][par.second]=='>'){
                pair<int,int>cpy=par;
                cpy.second++;
                while(cpy.second<m&&G2[cpy.first][cpy.second]!='#'
                &&G2[cpy.first][cpy.second]!='^'&&
                G2[cpy.first][cpy.second]!='>'&&
                G2[cpy.first][cpy.second]!='v'&&
                G2[cpy.first][cpy.second]!='<'){
                    can[check][cpy.first][cpy.second]=false;
                    cpy.second++;
                    if(cpy.second==m)break;
                }
            }
            if(G2[par.first][par.second]=='v'){
                pair<int,int>cpy=par;
                cpy.first++;
                while(cpy.first<n&&G2[cpy.first][cpy.second]!='#'
                &&G2[cpy.first][cpy.second]!='^'&&
                G2[cpy.first][cpy.second]!='>'&&
                G2[cpy.first][cpy.second]!='v'&&
                G2[cpy.first][cpy.second]!='<'){
                    can[check][cpy.first][cpy.second]=false;
                    cpy.first++;
                    if(cpy.first==n)break;
                }
            }
            if(G2[par.first][par.second]=='<'){
                pair<int,int>cpy=par;
                cpy.second--;
                while(cpy.second>0&&G2[cpy.first][cpy.second]!='#'
                &&G2[cpy.first][cpy.second]!='^'&&
                G2[cpy.first][cpy.second]!='>'&&
                G2[cpy.first][cpy.second]!='v'&&
                G2[cpy.first][cpy.second]!='<'){
                    can[check][cpy.first][cpy.second]=false;
                    cpy.second--;
                    if(cpy.second==-1)break;
                }
            }
        }
}
void rotar(){
    for(auto par:vp){
        if(G2[par.first][par.second]=='^')G2[par.first][par.second]='>';
        else if(G2[par.first][par.second]=='>')G2[par.first][par.second]='v';
        else if(G2[par.first][par.second]=='v')G2[par.first][par.second]='<';
        else if(G2[par.first][par.second]=='<')G2[par.first][par.second]='^';
    }
}
int finr,finc,inir,inic;
void bfs(){
    queue<matarpepe>q;
    q.emplace(inir,inic,0);
    dist[0][inir][inic]=0;
    while(!q.empty()){
        matarpepe act=q.front();q.pop();
        if(vis[act.state][act.r][act.c])continue;
        vis[act.state][act.r][act.c]=true;
        for(int i=0;i<4;i++){
            int cx=act.r+dx[i],cy=act.c+dy[i],ns=(act.state+1)%4;
            if(cx<0||cx>=n||cy<0||cy>=m||vis[ns][cx][cy]||!can[ns][cx][cy]
            ||dist[ns][cx][cy]!=-1||G[cx][cy]=='^'||G[cx][cy]=='>'||G[cx][cy]=='v'||
            G[cx][cy]=='<'||G[cx][cy]=='#')continue;
            dist[ns][cx][cy]=dist[act.state][act.r][act.c]+1;
            q.emplace(cx,cy,ns);
        }
    }
    int mini=INT_MAX;
    for(int i=0;i<4;i++)
        if(dist[i][finr][finc]!=-1)mini=min(mini,dist[i][finr][finc]);
    if(mini==INT_MAX)cout<<"impossible";
    else cout<<mini;
}
int main()
{
    int cases;
    cin>>cases;
    for(int tc=1;tc<=cases;tc++){
        cin>>n>>m;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)cin>>G[i][j];
        }
        vp.clear();
        memset(can,true,sizeof can);
        memset(vis,0,sizeof vis);
        memset(dist,-1,sizeof dist);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){if(G[i][j]=='^'||G[i][j]=='>'||G[i][j]=='v'||G[i][j]=='<')vp.emplace_back(i,j);
                G2[i][j]=G[i][j];
                if(G[i][j]=='S'){inir=i,inic=j;}
                if(G[i][j]=='G'){finr=i,finc=j;}
            }
        }
        //cout<<"llegue aca"<<endl;
        prohibido(0);
        //cout<<"aca igual"<<endl;
        rotar();
        prohibido(1);
        rotar();
        prohibido(2);
        rotar();
        prohibido(3);
        cout<<"Case #"<<tc<<": ";
        bfs();
        cout<<"\n";
    }
    return 0;
}

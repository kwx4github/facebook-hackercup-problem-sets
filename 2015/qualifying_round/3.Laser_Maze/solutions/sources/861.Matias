#include<string>
#include<iostream>
#include<sstream>
#include<algorithm>
#include<map>
#include<vector>
#include<queue>
#include<cstring>

using namespace std;

#define f(i,a,b) for(int i=(a); i<(b); i++)


int n, m;
char maze[101][101];

int movi[4] = {-1,0,1,0};
int movj[4] = {0,1,0,-1};

int visited[101][101][4];


int go(int i, int j, int k, int mod) {
    //cout << i << " " << j << " " << k << " " << mod << endl;

    if(i >= n || i < 0 || j >= m || j < 0 || maze[i][j] == '#') return false;

    int d = -1;
    if(maze[i][j] == '^') d = 0;
    if(maze[i][j] == '>') d = 1;
    if(maze[i][j] == 'v') d = 2;
    if(maze[i][j] == '<') d = 3;
    if (d == -1) return go(i+movi[k], j+movj[k], k, mod);
    
    d = (d+mod)%4;
    if(d == 0 && k == 2) return true;
    if(d == 1 && k == 3) return true;
    if(d == 2 && k == 0) return true;
    if(d == 3 && k == 1) return true;

    return false;
}

int doit() {

    memset(visited, -1, sizeof(visited));
    int si, sj, ei, ej;
    f(i,0,n) f(j,0,m) {
        if(maze[i][j] == 'S') si = i, sj = j;
        if(maze[i][j] == 'G') ei = i, ej = j;
    }
    maze[si][sj] = '.';
    maze[ei][ej] = '.';
    //cout << si <<  " " << sj << " " << ei << " " << ej << endl;

    queue<pair<pair<int,int>,int> > Q;
    Q.push(pair<pair<int,int>, int> (pair<int,int>(si,sj), 0));
    visited[si][sj][0] = 0;

    while(!Q.empty()) {

        int i = Q.front().first.first;
        int j = Q.front().first.second;
        int mod = Q.front().second;
        Q.pop();

        //cout << i << " " << j << " " << mod << endl;

        int killed = go(i, j, 0, mod);
        killed = killed || go(i, j, 1, mod);
        killed = killed || go(i, j, 2, mod);
        killed = killed || go(i, j, 3, mod);
        //cout << "Killed "<< killed << endl;

        if (killed && (!(i == si && j == sj && mod == 0))) continue;

        if (i == ei && j == ej) return visited[i][j][mod];

        f(k, 0, 4) {
            int ni = i + movi[k];
            int nj = j + movj[k];
            int nmod = (mod + 1) % 4;

            if (ni >= n || ni < 0 || nj >= m || nj < 0 || maze[ni][nj] != '.') continue;
            if (visited[ni][nj][nmod] != -1) continue;

            Q.push(pair<pair<int,int>,  int> (pair<int,int>(ni,nj), nmod));
            visited[ni][nj][nmod] = visited[i][j][mod] + 1;
        }
    }
    return -1;
}

int main () {

    int cases,t = 1;
    cin >> cases;
    while(cases --) {

        cin >> n >> m;

        f(i,0,n) f(j,0,m) {
            cin >> maze[i][j];
        }

        int m = doit();
        if (m == -1) 
            cout << "Case #" << t++ << ": impossible"<< endl; 
        else
            cout << "Case #" << t++ << ": " << m << endl; 
    }

    return 0;
}

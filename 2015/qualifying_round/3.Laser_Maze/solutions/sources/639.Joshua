#include <cstdio>
#include <queue>
#include <algorithm>
#include <utility>
using namespace std;

typedef pair<int,int> pii;
typedef pair<pii,int> node;

const int MAX_N = 105;

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int T;

int R, C;
char grid[MAX_N][MAX_N];
bool can[MAX_N][MAX_N][4];
int dist[MAX_N][MAX_N][4];
bool seen[MAX_N][MAX_N][4];

queue<node> q;

int dir(char c) {
    if(c == '>') {
        return 0;
    } else if(c == 'v') {
        return 1;
    } else if(c == '<') {
        return 2;
    } else if(c == '^') {
        return 3;
    } else {
        return 4;
    }
}

int main() {
    scanf("%d",&T);
    for(int z=1;z<=T;z++) {
        for(int i=0;i<MAX_N;i++) {
            for(int j=0;j<MAX_N;j++) {
                for(int k=0;k<4;k++) {
                    can[i][j][k] = true;
                    seen[i][j][k] = false;
                    dist[i][j][k] = MAX_N*MAX_N*4;
                }
            }
        }

        scanf("%d %d",&R,&C);

        for(int i=0;i<R;i++) {
            scanf(" %s ",grid[i]);
        }

        for(int i=0;i<R;i++) {
            for(int j=0;j<C;j++) {
                if(grid[i][j] == '#' || dir(grid[i][j]) != 4) {
                    for(int k=0;k<4;k++) {
                        can[i][j][k] = false;
                    }
                }

                int d = dir(grid[i][j]);
                if(d != 4) {
                    for(int k=0;k<4;k++) {
                        int dk = (d+k)%4;
                        int nr = i+dr[dk];
                        int nc = j+dc[dk];
                        while(nr >= 0 && nc >= 0 && nr < R && nc < C) {
                            if(grid[nr][nc] == '#' || dir(grid[nr][nc]) != 4) {
                                break;
                            }

                            can[nr][nc][k] = false;
                            nr += dr[dk];
                            nc += dc[dk];
                        }
                    }
                }
            }
        }

        int sr, sc;
        int er, ec;
        for(int i=0;i<R;i++) {
            for(int j=0;j<C;j++) {
                if(grid[i][j] == 'S') {
                    sr = i;
                    sc = j;
                }

                if(grid[i][j] == 'G') {
                    er = i;
                    ec = j;
                }
            }
        }

        while(!q.empty()) {
            q.pop();
        }

        seen[sr][sc][0] = true;
        dist[sr][sc][0] = 0;
        q.push(make_pair(make_pair(sr,sc),0));

        int ans = MAX_N*MAX_N*4;
        while(!q.empty()) {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int d = q.front().second;
            q.pop();

            int dd = dist[r][c][d];

            if(r == er && c == ec) {
                ans = dd;
                break;
            }

            for(int i=0;i<4;i++) {
                int nr = r + dr[i];
                int nc = c + dc[i];
                int nk = (d+1)%4;
                if(nr >= 0 && nc >= 0 && nr < R && nc < C && can[nr][nc][nk] && !seen[nr][nc][nk]) {
                    seen[nr][nc][nk] = true;
                    dist[nr][nc][nk] = dd+1;
                    q.push(make_pair(make_pair(nr,nc),nk));
                }
            }
        }

        printf("Case #%d: ",z);
        if(ans < MAX_N*MAX_N*4) {
            printf("%d\n",ans);
        } else {
            printf("impossible\n");
        }
    }

    return 0;
}

#include <iostream>
#include <string>
#include <map>
#include <math.h>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <sstream>
#include <deque>
#include <memory.h>
#include <cassert>
#include <ctime>
#include <cstring>


using namespace std; 

#define ll long long
#pragma comment(linker, "/STACK:64000000")

const int maxn = 200200;
const int inf = 1000000007;
const int mod = 1000000007;
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, -1, 0, 1};
int cd[255];


int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    
    cd['<'] = 1;
    cd['>'] = 3;
    cd['^'] = 2;
    cd['v'] = 0;
    
    int T;
    cin >> T;
    for (int test = 1; test <= T; test++) {
        cout << "Case #" << test << ": ";
        
        int n, m;
        cin >> n >> m;
        vector<string> s(n);
        for (int i = 0; i < n; i++) cin >> s[i];
        
        vector<vector<vector<int> > > d(n, vector<vector<int> >(m, vector<int>(4, inf)));
        vector<vector<vector<int> > > bad(n, vector<vector<int> >(m, vector<int>(4, 0)));
        int sx, sy, gx, gy;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (s[i][j] == 'S') {
                    sx = i;
                    sy = j;
                }
                if (s[i][j] == 'G') {
                    gx = i;
                    gy = j;
                }
                if (s[i][j] == 'S' || s[i][j] == 'G' || s[i][j] == '.' || s[i][j] == '#') continue;
                int k = cd[s[i][j]];
                for (int t = 0; t < 4; t++, k = (k + 1) % 4) {
                    int cx = i + dx[k], cy = j + dy[k];
                    while (0 <= cx && cx < n && 0 <= cy && cy < m && (s[cx][cy] == '.' || s[cx][cy] == 'S' || s[cx][cy] == 'G')) {
                        bad[cx][cy][t] = 1;
                        cx += dx[k];
                        cy += dy[k];
                    }
                }
            }
        }
        queue<pair<pair<int, int>, int> > q;
        q.push(make_pair(make_pair(sx, sy), 0));
        d[sx][sy][0] = 0;
        while (!q.empty()) {
            int x = q.front().first.first, y = q.front().first.second, t = q.front().second;
            q.pop();
            for (int k = 0; k < 4; k++) {
                int cx = x + dx[k], cy = y + dy[k];
                if (0 <= cx && cx < n && 0 <= cy && cy < m && (s[cx][cy] == '.' || s[cx][cy] == 'S' || s[cx][cy] == 'G') && !bad[cx][cy][(t + 1) % 4] && d[cx][cy][(t + 1) % 4] > d[x][y][t] + 1) {
                    d[cx][cy][(t + 1) % 4] = d[x][y][t] + 1;
                    q.push(make_pair(make_pair(cx, cy), (t + 1) % 4));
                }
            }
        }
        int ans = inf;
        for (int k = 0; k < 4; k++) ans = min(ans, d[gx][gy][k]);
        if (ans == inf) cout << "impossible" << endl;
        else cout << ans << endl;
    }
    
    return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
const int MAXN=100+10;
struct Pos
{
    int x,y;
    Pos(int _x,int _y):x(_x),y(_y){}
    Pos();
};
int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
int n,m;
bool vis[MAXN][MAXN][4];
char maze[MAXN][MAXN];
bool valid(Pos p)
{
    return (0<=p.x && p.x<n && 0<=p.y && p.y<m && maze[p.x][p.y]!='#');
}
void update(int x,int y,int t)
{
    for(int i=0;i<4;i++,t=(t+1)%4)
    {
        Pos one={x+dx[t],y+dy[t]};
        while(valid(one))
        {
            vis[one.x][one.y][i]=true;
            one.x+=dx[t];
            one.y+=dy[t];
        }
    }
}
int bfs(Pos s)
{
    queue<Pos> que;
    queue<int> time;
    que.push(s);
    time.push(0);
    while(!que.empty())
    {
        Pos now=que.front();que.pop();
        int t=time.front();time.pop();
        if(maze[now.x][now.y]=='G')
            return t;
        for(int i=0;i<4;i++)
        {
            Pos one={now.x+dx[i],now.y+dy[i]};
            int tt=t+1;
            if(valid(one) && !vis[one.x][one.y][tt%4])
            {
                vis[one.x][one.y][tt%4]=true;
                que.push(one);
                time.push(tt);
            }
        }
    }
    return -1;
}
int main()
{
//    freopen("laser_maze.txt","r",stdin);
//    freopen("laser_maze.txt","w",stdout);
    int t,kcase=0;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&m);
        memset(vis,0,sizeof(vis));
        Pos s={0,0};
        for(int i=0;i<n;i++)
        {
            scanf("%s",maze[i]);
            for(int j=0;j<m;j++)
            {
                char ch=maze[i][j];
                switch(ch)
                {
                    case 'S': s=Pos(i,j);break;
                    case '<': update(i,j,3);break;
                    case '>': update(i,j,1);break;
                    case '^': update(i,j,0);break;
                    case 'v': update(i,j,2);break;
                }
            }
        }
        printf("Case #%d: ",++kcase);
        int ans=bfs(s);
        if(ans==-1)
            printf("impossible\n");
        else
            printf("%d\n",ans);
    }
    return 0;
}

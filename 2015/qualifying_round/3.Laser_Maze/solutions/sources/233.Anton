#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <ctime>
#include <float.h>
#include <unordered_map>

using namespace std;

#define REP(i, from, to) for (int i = (from); i < (to); ++i)
#define FOR(i, n) REP(i, 0, (n))
#define ALL(x) x.begin(), x.end()
#define SIZE(x) (int)x.size()
#define PB push_back
#define MP make_pair

typedef long long i64;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef vector<VS> VVS;
typedef pair<int, int> PII;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;

    FOR (tests, t) {
        int n, m;
        cin >> n >> m;

        PII startPos(-1, -1);
        VS maze(n);
        FOR (i, n) {
            cin >> maze[i];
            int pos = maze[i].find('S');
            if (pos != -1) startPos = MP(i, pos);
        }

        map<pair<PII, int>, int> states;
        queue<pair<PII, int>> q;

        if (startPos.first != -1)
            q.push(MP(startPos, 0));

        int goalTime = -1;

        while (!q.empty() && goalTime == -1) {
            PII const pos = q.front().first;
            int const time = q.front().second + 1;
            q.pop();

            int const DI[] = {-1, 0, 1, 0};
            int const DJ[] = {0, 1, 0, -1};

            FOR (k1, 4) {
                int const ni = pos.first + DI[k1];
                int const nj = pos.second + DJ[k1];

                if (!(ni >= 0 && nj >= 0 && ni < n && nj < m) || string(".SG").find(maze[ni][nj]) == -1) {
                    continue;
                }

                bool moveSafety = true;

                FOR (k, 4) {
                    int i = ni;
                    int j = nj;
                    bool foundLaser = false;
                    bool ok = false;

                    while (true) {
                        i += DI[k];
                        j += DJ[k];

                        if (i < 0 || j < 0 || i >= n || j >= m) break;
                        else if (string(".SG").find(maze[i][j]) == -1) break;
                    }

                    if (i >= 0 && j >= 0 && i < n && j < m) {
                        int const laserPos = string("^>v<").find(maze[i][j]);
                        int const newLaserPos = (laserPos + time) % 4;
                        if (laserPos == -1 || (k + 2) % 4 != newLaserPos) {
                            ok = true;
                        }
                    } else {
                        ok = true;
                    }

                    if (!ok) {
                        moveSafety = false;
                        break;
                    }
                }

                if (moveSafety) {
                    if (maze[ni][nj] == 'G') {
                        goalTime = time;
                        break;
                    }
                }

                int const mod = 256;
                if (moveSafety && states.count(MP(MP(ni, nj), time % mod)) == 0) {
                    states[MP(MP(ni, nj), time % mod)] = time;
                    q.push(MP(MP(ni, nj), time % mod));
                }
            }
        }

        cout << "Case #" << tests + 1 << ": ";
        if (goalTime == -1) cout << "impossible" << endl;
        else cout << goalTime << endl;
    }

    return 0;
}

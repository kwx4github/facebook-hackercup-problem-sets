#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(false);cin.tie(0);
using namespace std;
#define pb push_back
#define pob pop_back
#define pf push_front
#define pof pop_front
#define mp make_pair
#define all(a) a.begin(),a.end()
#define bitcnt(x) __builtin_popcountll(x)
#define MOD 1000000007
#define total 5000005
#define Me 1000000000001
#define NIL 0
#define MAXN 210005
#define EPS 1e-5
#define INF (1<<28)
#define pi 3.141593
typedef unsigned long long int uint64;
typedef long long int int64;
string s[111];
int n,m;
int sx,sy,dx,dy;
bool visit[111][111][4];
bool dang[111][111][4];

void sngl_pont(int x,int y){
	dang[x][y][0]=true;
	dang[x][y][1]=true;
	dang[x][y][2]=true;
	dang[x][y][3]=true;
}
void goinglft(int x,int y,int k){
	int tmpx=x;
	int tmpy=y;
	while(tmpy>=0){
		dang[tmpx][tmpy][k]=true;
		tmpy--;
		if(tmpy<0)
		break;
		if(s[tmpx][tmpy]!='.')
		break;
	}
	
}
void goingrht(int x,int y,int k){
	int tmpx=x;
	int tmpy=y;
	while(tmpy<m){
		dang[tmpx][tmpy][k]=true;
		tmpy++;
		if(tmpy>=m)
		break;
		if(s[tmpx][tmpy]!='.')
		break;
	}
}
void goingdown(int x,int y,int k){
	int tmpx=x;
	int tmpy=y;
		while(tmpx<n){
		dang[tmpx][tmpy][k]=true;
		tmpx++;
		if(tmpx>=n)
		break;
		if(s[tmpx][tmpy]!='.')
		break;
	}	
}
void goingup(int x,int y,int k){
	int tmpx=x;
	int tmpy=y;
	while(tmpx>=0){
		dang[tmpx][tmpy][k]=true;
		tmpx--;
		if(tmpx<0)
		break;
		if(s[tmpx][tmpy]!='.')
		break;
	}
}
void goup(int x,int y){
	int k=0;
    sngl_pont(x,y);
    
	goingup(x,y,k);
	k++;
	goingrht(x,y,k);
	k++;
	goingdown(x,y,k);
	k++;
	goinglft(x,y,k);
}
void golft(int x,int y){
	int k=0;
	sngl_pont(x,y);
	goinglft(x,y,k);
	k++;
	goingup(x,y,k);
	k++;
	goingrht(x,y,k);
	k++;
	goingdown(x,y,k);
}
void gorht(int x,int y){
	int k=0;
	sngl_pont(x,y);
	goingrht(x,y,k);
	k++;
	goingdown(x,y,k);
	k++;
	goinglft(x,y,k);
	k++;
	goingup(x,y,k);
}
void godwn(int x,int y){
	int k=0;
	sngl_pont(x,y);
	goingdown(x,y,k);
	k++;
	goinglft(x,y,k);
	k++;
	goingup(x,y,k);
	k++;
	goingrht(x,y,k);
}
void make_danger(){
	int i,j;
	for(i=0;i<n;i++){
		for(j=0;j<m;j++){
			if(s[i][j]=='^')
			goup(i,j);
			if(s[i][j]=='<')
			golft(i,j);
			if(s[i][j]=='>')
			gorht(i,j);
			if(s[i][j]=='v')
			godwn(i,j);
			if(s[i][j]=='#')
			sngl_pont(i,j);
		}
	}
}
bool chck(int x,int y,int t){
	if((x<0)||(x>=n)||(y<0)||(y>=m))
	return false;
	if(dang[x][y][t%4])
	return false;
	if(visit[x][y][t%4])
	return false;
	visit[x][y][t%4]=true;
	return true;
}
int go(int x,int y,int t){
	priority_queue<pair<int,pair<int,int> > >p;
	pair<int,pair<int,int> >tmp;
	tmp.first=-t;
	tmp.second.first=x;
	tmp.second.second=y;
	p.push(tmp);
	int ret=1e9;
	while(!p.empty()){
		tmp=p.top();
		t=-tmp.first;
		x=tmp.second.first;
		y=tmp.second.second;
		p.pop();
		visit[x][y][t%4]=true;
		if((x==dx)&&(y==dy)){
		ret=min(ret,t);
		continue;}
		if(t>=ret)
		continue;
		if(chck(x+1,y,t+1)){
			tmp.first=-(t+1);
			tmp.second.first=x+1;
			tmp.second.second=y;
			p.push(tmp);
		}
		if(chck(x-1,y,t+1)){
			tmp.first=-(t+1);
			tmp.second.first=x-1;
			tmp.second.second=y;
			p.push(tmp);
		}
		if(chck(x,y+1,t+1)){
			tmp.first=-(t+1);
			tmp.second.first=x;
			tmp.second.second=y+1;
			p.push(tmp);
		}
		if(chck(x,y-1,t+1)){
			tmp.first=-(t+1);
			tmp.second.first=x;
			tmp.second.second=y-1;
			p.push(tmp);
		}
	}
	return ret;
}
int main(){
	int t,i,j;
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	cin>>t;
	for(int cas=1;cas<=t;cas++){
		printf("Case #%d: ",cas);
		cin>>n>>m;
		for(i=0;i<n;i++)
		cin>>s[i];
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				if(s[i][j]=='S'){
					sx=i;
					sy=j;
					s[i][j]='.';
				}
				if(s[i][j]=='G'){
					dx=i;
					dy=j;
					s[i][j]='.';
				}
				for(int k=0;k<4;k++){
					visit[i][j][k]=false;
					dang[i][j][k]=false;
				}
			}
		}
		make_danger();
	/*	for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				cout<<i<<" "<<j<<" "<<dang[i][j][0]<<" "<<dang[i][j][1]<<" "<<dang[i][j][2]<<" "<<dang[i][j][3]<<endl;
			}
		}*/
		int ans=go(sx,sy,0);
		if(ans==1e9)
		printf("impossible\n");
		else
		printf("%d\n",ans);
	}
	fclose(stdout);
	return 0;
}

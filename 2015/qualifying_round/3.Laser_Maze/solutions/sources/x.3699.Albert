#include <functional>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <cassert>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#define db(v) cout << #v << ": " << v << endl
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define taskname "XXXXXXXXXXXXXXXXXXXXXXXX" // CHANGE!!!
typedef long long i64;
const int inf = 1e9;

using namespace std;

const int dx[] = {0, 1, 0, -1};
const int dy[] = {1, 0, -1, 0};
int sx, sy;

string D[5][107];
int dp[4][107][107];
bool used[4][107][107];
map<char,int> mv;
int n, m;

bool isGood(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool isBlocked(int t, int x, int y)
{
    return D[t][x][y] != '.' && D[t][x][y] != 'S' && D[t][x][y] != 'G';
}

int dfs(int t, int x, int y, bool super = false)
{
    if ((!isGood(x, y) || isBlocked(t, x, y)) & !super)
        return inf;
    if (D[t][x][y] == 'G')
        return 0;
    if (dp[t][x][y] != -1)
        return dp[t][x][y];

    int &ret = dp[t][x][y];
    ret = inf;
    forn(step, 4)
    {
        ret = min(ret, 1 + dfs((t + 1) % 4, x + dx[step], y + dy[step]));
    }
    ret = min(ret, 1 + dfs((t + 1) % 4, x, y));
    return ret;
}

void print()
{
    cout << "Print Desc\n";
    forn(t, 4)
    {
        forn(i, n) cout << D[t][i] << '\n';
        cout << '\n';
    }
}

void build()
{
    forn(t, 4) forn(i, n) forn(j, m)
    {
        if (D[4][i][j] == 'S') sx = i, sy = j;
        if (D[4][i][j] == '#' || D[4][i][j] == '.' || D[4][i][j] == 'S' || D[4][i][j] == 'G')
            continue;
        int step = (mv[D[4][i][j]] + t) % 4;
        int x = i, y = j;
        while (true)
        {
            int tx = x + dx[step],
                ty = y + dy[step];
            if (!isGood(tx, ty) || isBlocked(4, tx, ty))
                break;
            D[t][tx][ty] = '<';
            x = tx;
            y = ty;
        }
    }
    //print();
}


int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    mv['>'] = 0;
    mv['v'] = 1;
    mv['<'] = 2;
    mv['^'] = 3;

    int T; cin >> T;
    fore(t, 1, T)
    {
        memset(dp, -1, sizeof(dp));
        cin >> n >> m;
        forn(i, n)
        {
            cin >> D[4][i];
            forn(k, 4)
                D[k][i] = D[4][i];
        }
        build();
        int ans = dfs(0, sx, sy, true);
        if (ans >= inf)
            cout << "Case #" << t << ": impossible\n";
        else
            cout << "Case #" << t << ": " << ans << '\n';
    }

#ifdef HOME
    cerr << "\nTime elapsed: " << clock() / 1000 << " ms" << endl;
#endif
    return 0;
}

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
int in(){int r=0,c;for(c=getchar_unlocked();c<=32;c=getchar_unlocked());if(c=='-') return -in();for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());return r;}
typedef pair<int,int> pii;
typedef pair<int,pii> piii;

int di[]={0,1,0,-1};
int dj[]={1,0,-1,0};

bool entro[110][110][4];
string mat[200];
int order[300];

int N,M;

bool inrange(int pi, int pj){
  if(pi<0) return false;
  if(pj<0) return false;
  if(pi>=N) return false;
  if(pj>=M) return false;
  return true;
}

bool isturret(char c){
  if(c=='<') return true;
  if(c=='>') return true;
  if(c=='v') return true;
  if(c=='^') return true;
  return false;
}

bool isopen(char c){
  if(c=='#') return false;
  if(isturret(c)) return false;
  return true;
}

bool killer(char c, int tm,int dir){
  if(!isturret(c)) return false;
  int o = order[c];
  o = (o+tm)%4;
  
  if(dir == 0 && o == 3) return true;
  if(dir == 1 && o == 0) return true;
  if(dir == 2 && o == 1) return true;
  if(dir == 3 && o == 2) return true;
  
  return false;
}

bool attacked(int pi,int pj, int tm){
  
  int i;
  
  for(i=0;i<4;i++){
    int ci = pi;
    int cj = pj;
    while(inrange(ci,cj) && isopen(mat[ci][cj])){
      ci+=di[i];
      cj+=dj[i];
    }
    if(!inrange(ci,cj)) continue;
    
    //~ cerr <<"a " <<i << ' '<< ci << ' ' << cj << endl;
    
    if(killer(mat[ci][cj],tm,i)) return true;
    
  }
  
  
  return false;
  
  
}

void solve(){
  N = in();
  M = in();
  
  int i,j;
  memset(entro,0,sizeof entro);
  
  for(i=0;i<N;i++) cin>>mat[i];
  int si,sj;
  
  for(i=0;i<N;i++)
    for(j=0;j<M;j++){
      if(mat[i][j] == 'S'){
        si = i;
        sj = j;
      }
      
    }
    
    queue<piii> bfs;
    bfs.push(piii(0,pii(si,sj)));
    
    int ans = -1;
    
    while(!bfs.empty()){
      
      
      int cur = bfs.front().first;
      int ci = bfs.front().second.first;
      int cj = bfs.front().second.second;
      bfs.pop();
      
      //~ cerr << cur <<  ' ' << ci << ' ' << cj << ' ' << mat[ci][cj] << endl;
      if(entro[ci][cj][cur%4]) continue;
      entro[ci][cj][cur%4] = true;
      
      if(mat[ci][cj]=='G'){
        ans = cur;
        break;
      }
      
      
      for(i=0;i<4;i++){
        int ni = ci + di[i];
        int nj = cj + dj[i];
        
        if(!inrange(ni,nj)) continue;
        if(!isopen(mat[ni][nj])) continue;
        
        //~ cerr << ni << ' ' << nj << endl;
        if(attacked(ni,nj,cur+1)) continue;
        
        bfs.push(piii(cur+1,pii(ni,nj)));
        
        
      }
    }
    
    if(ans == -1){
      puts("impossible");
    }else{
      cout << ans << endl;
    }
  
  
}

int main(){
  order['^'] = 0;
  order['>'] = 1;
  order['v'] = 2;
  order['<'] = 3;
  
  for(int i=0,T=in();i<T;i++){
    
      cout << "Case #"<<i+1<<": " ;
      solve();
    }
}

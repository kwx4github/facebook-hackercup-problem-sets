import java.util.List;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Collection;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {
    private int M;
    private int N;
    private char grid[][];
    private Point start;
    private Point goal;
    private Turret turrets[] = new Turret[0];
    private boolean prohibited[][][];
    private boolean visited[][][];

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        init(in);
        Queue<State> queue = new LinkedList<State>();
        queue.add(new State(start, 0, 0));
        int ans = -1;
        while (!queue.isEmpty()) {
            State state = queue.remove();
            if (state.current.equals(goal)) {
                ans = state.step;
                break;
            }
            int x = state.current.x;
            int y = state.current.y;
            int turn = state.turn;
            visited[x][y][turn] = true;
            //try north
            if (y > 0 && !prohibited[x][y - 1][(turn + 1) % 4] && !visited[x][y - 1][(turn + 1) % 4]) {
                queue.add(new State(new Point(y - 1, x), (turn + 1) % 4, state.step + 1));
                visited[x][y-1][(turn + 1) % 4] = true;
            }
            //try south
            if (y < M - 1 && !prohibited[x][y + 1][(turn + 1) % 4] && !visited[x][y + 1][(turn + 1) % 4]) {
                queue.add(new State(new Point(y + 1, x), (turn + 1) % 4, state.step + 1));
                visited[x][y+1][(turn + 1) % 4] = true;
            }
            //try west
            if (x > 0 && !prohibited[x - 1][y][(turn + 1) % 4] && !visited[x - 1][y][(turn + 1) % 4]) {
                queue.add(new State(new Point(y, x - 1), (turn + 1) % 4, state.step + 1));
                visited[x-1][y][(turn + 1) % 4] = true;
            }
            //try east
            if (x < N - 1 && !prohibited[x + 1][y][(turn + 1) % 4] && !visited[x + 1][y][(turn + 1) % 4]) {
                queue.add(new State(new Point(y, x + 1), (turn + 1) % 4, state.step + 1));
                visited[x+1][y][(turn + 1) % 4] = true;
            }
        }
        out.println("Case #" + testNumber + ": " + (ans == -1 ? "impossible" : ans));
    }

    private void init(InputReader in) {
        M = in.nextInt();
        N = in.nextInt();
        grid = new char[M][N];
        List<Turret> turrets_tmp = new LinkedList<>();
        for (int i = 0; i < M; i++) {
            char row[] = in.next().toCharArray();
            for (int j = 0; j < N; j++) {
                grid[i][j] = row[j];
                if (grid[i][j] == '.') continue;
                else if (grid[i][j] == '#') continue;
                else if (grid[i][j] == 'S') start = new Point(i, j);
                else if (grid[i][j] == 'G') goal = new Point(i, j);
                else {
                    turrets_tmp.add(new Turret(new Point(i, j), grid[i][j]));
                }
            }
        }
        turrets = turrets_tmp.toArray(new Turret[0]);

        prohibited = new boolean[N][M][4];
        visited = new boolean[N][M][4];
        initProhibited();
    }

    private void initProhibited() {
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                if (grid[i][j] == '#' || grid[i][j] == '<' || grid[i][j] == '>' || grid[i][j] == 'v' || grid[i][j] == '^') {
                    prohibited[j][i][0] = true;
                    prohibited[j][i][1] = true;
                    prohibited[j][i][2] = true;
                    prohibited[j][i][3] = true;
                }
            }
        }
        for (int i = 0; i < turrets.length; i++) {
            Turret t = turrets[i];
            int x = t.location.x;
            int y = t.location.y;
            int dir = t.direction;
            //north
            while (y > 0 && (grid[y - 1][x] == '.' || grid[y - 1][x] == 'S' || grid[y - 1][x] == 'G')) {
                prohibited[x][y - 1][(4 - dir) % 4] = true;
                y--;
            }

            y = t.location.y;

            //south
            while (y < M - 1 && (grid[y + 1][x] == '.' || grid[y + 1][x] == 'S' || grid[y + 1][x] == 'G')) {
                prohibited[x][y + 1][(6 - dir) % 4] = true;
                y++;
            }

            y = t.location.y;

            //west
            while (x > 0 && (grid[y][x - 1] == '.' || grid[y][x - 1] == 'S' || grid[y][x - 1] == 'G')) {
                prohibited[x - 1][y][(7 - dir) % 4] = true;
                x--;
            }
            x = t.location.x;

            //east
            while (x < N - 1 && (grid[y][x + 1] == '.' || grid[y][x + 1] == 'S' || grid[y][x + 1] == 'G')) {
                prohibited[x + 1][y][(5 - dir) % 4] = true;
                x++;
            }

        }
    }

    private static class State {
        private Point current;
        private int turn; // 0, 1, 2 ,3
        private int step = 0;

        public State(Point current, int turn, int step) {
            this.current = current;
            this.turn = turn;
            this.step = step;
        }

        public String toString() {
            return "State{" +
                    "current=" + current +
                    ", turn=" + turn +
                    ", step=" + step +
                    '}';
        }
    }

    private static class Turret {
        private Point location;
        private int direction;

        public Turret(Point location, char dir) {
            this.location = location;
            if (dir == '^') this.direction = 0;
            else if (dir == '>') this.direction = 1;
            else if (dir == 'v') this.direction = 2;
            else if (dir == '<') this.direction = 3;
        }
    }

    private static class Point {
        private int x;
        private int y;

        public Point(int y, int x) {
            this.y = y;
            this.x = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Point point = (Point) o;

            if (x != point.x) return false;
            if (y != point.y) return false;

            return true;
        }

        public int hashCode() {
            int result = x;
            result = 31 * result + y;
            return result;
        }

        public String toString() {
            return "Point{" +
                    "x=" + x +
                    ", y=" + y +
                    '}';
        }
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }
}


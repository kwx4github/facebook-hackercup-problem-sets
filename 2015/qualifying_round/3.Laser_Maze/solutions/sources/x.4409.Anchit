#include<iostream>
#include<fstream>
#include<vector>
using namespace std;
vector<int> Q;
int color[10005];
int d[10005];
char A[105][105];
int unsafe[10005][10];
int t,i,j,k,l,m,N,M,n,u,x,v,t0;
char dir;
char rclock(char ch)
{
    if(ch == '^')
        return '>';
    if(ch == '>')
        return 'v';
    if(ch == 'v')
        return '<';
    if(ch =='<')
        return '^';
}
int blocked(int i,int j)
{
    return (A[i][j] == '#');
            //| (A[i][j] == '^') | (A[i][j] == '>') | (A[i][j] == 'v') | (A[i][j] == '<'));
}
int nontraversible(int i,int j)
{
    return (A[i][j] == '#'| (A[i][j] == '^') | (A[i][j] == '>') | (A[i][j] == 'v') | (A[i][j] == '<'));
}
int adjacent(int i,int j,int k,int l,int d)
{
     if(i < 0 || i >= M  || j < 0 || j >= N)
        return 0;
    if(k < 0 || k >= M  || l < 0 || l >= N)
        return 0;
    if(A[k][l] == '#' || A[k][l] == '^' || A[k][l] == '>' || A[k][l] == 'v' || A[k][l] == '<' )
        return 0;
    if(unsafe[i * N + j][ (d  % 4) ] == 1 && A[i][j] != 'S')
        return 0;
    if(unsafe[k * N + l][ (d + 1) % 4 ] == 0)
        return 1;
    if( unsafe[k * N + l][ (d + 3) % 4] == 0)
    {
        int v = (i + 1) * N + j;
        if(i + 1 < M && (k != i + 1) && (!nontraversible(i + 1,j)) && !unsafe[i * N + j][d] && !unsafe[v][(d + 1) % 4] && !unsafe[i * N + j][(d + 2 ) % 4])
            return 3;
        v = (i - 1) * N + j;
        if(i - 1 >= 0 && (k != i - 1) && (!nontraversible(i - 1,j))  && !unsafe[i * N + j][d] && !unsafe[v][(d + 1) % 4] && !unsafe[i * N + j][(d + 2 ) % 4])
            return 3;
        v = i * N + j + 1;
        if( j + 1 < N && (l != j + 1) && (!nontraversible(i ,j + 1)) && !unsafe[i * N + j][d] && !unsafe[v][(d + 1) % 4] && !unsafe[i * N + j][(d + 2 ) % 4])
            return 3;
        v = i * N + j - 1;
        if(j - 1 >= 0 && (l != j - 1) && (!nontraversible(i ,j - 1)) && !unsafe[i * N + j][d] && !unsafe[v][(d + 1) % 4] && !unsafe[i * N + j][(d + 2 ) % 4])
            return 3;
    }
    return 0;
}
int laser(int i,int j)
{
    char ch = A[i][j];
    return (ch == 'v') | (ch == '>') | (ch == '<') | (ch == '^');
}
void bfs()
{
    for( i =0; i< M ;i++)
    {
        for(j = 0;  j < N;j++)
        {
            color[ i * N + j ] = 0;
            d[ i * N + j ] = 1000000000;
        }
    }
    for(i = 0;i < M ;i++)
        for(j = 0;j < N;j++)
            if(A[i][j] == 'S')
            {
                 u = i * N + j;
                 break;
            }

    d[u] = 0;
    Q.push_back(u);
    while(!Q.empty())
    {
        u =Q.at(0);
        //cout << u << endl;
        Q.erase(Q.begin(),Q.begin() + 1);
        i = u / N;j = u % N;
        x = adjacent(i,j,i + 1,j,d[u]);
        if(x > 0 )
        {
            if(color[N * (i + 1) + j] == 0)
            {
                color[N * (i + 1) + j] = 1;
                d[ (i + 1) * N + j] = d[u] + x;
                Q.push_back( (i + 1) * N + j);
            }
        }
        x = adjacent(i,j,i - 1,j,d[u]);
        if( x > 0 )
        {
            if(color[N * (i - 1) + j] == 0)
            {
                color[N * (i - 1) + j] = 1;
                d[ (i - 1) * N + j] = d[u] + x;
                Q.push_back( (i - 1) * N + j);
            }
        }
        x = adjacent(i,j,i,j - 1,d[u]);
        if( x > 0 )
        {
            if(color[N * i  + j - 1] == 0)
            {
                color[N * i + j - 1] = 1;
                d[ i * N + j - 1] = d[u] + x;
                Q.push_back( i * N + j - 1);
            }
        }
        (x = adjacent(i,j,i,j + 1,d[u]));
        if( x > 0 )
        {
            if(color[N * i  + j + 1] == 0)
            {
                color[N * i + j + 1] = 1;
                d[ i * N + j + 1] = d[u] + x;
                Q.push_back( i * N + j + 1);
            }
        }
    }
    for(i = 0;i < M ;i++)
        for(j = 0;j < N;j++)
            if(A[i][j] == 'G')
            {
                u = i * N + j;
                 break;
            }
    if(d[u] == 1000000000)
        cout << "Case " << "#" << (t0 - t) << ": " << "impossible" << endl;
    else
         cout << "Case " << "#" << (t0 - t) << ": " << d[u] << endl;
}
int main()
{
    ifstream input("laser_maze.txt");
    input >> t;
    t0 = t;
    while(t--)
    {
        input >> M >> N;
        for(i = 0;i < M;i++)
        {
            for(j = 0;j < N;j++)
            {
                input >> A[i][j];
                for(k = 0;k < 4;k++)
                unsafe[i * N + j][k] = 0;
            }
        }
        for(i = 0;i < M;i++)
        {
            for(j = 0;j < N;j++)
            {
                dir = A[i][j];
                if(laser(i,j))
                {
                    for(m = 0;m <= 3;m++)
                    {
                        switch(dir)
                        {
                        case '^' : k = i - 1;
                                    while(k >= 0 && !blocked(k,j))
                                    {
                                        unsafe[k * N + j][m] = 1;
                                        k--;
                                    }
                                    break;
                        case '>' : k = j + 1;
                                    while(k < N && !blocked(i,k))
                                    {
                                        unsafe[N * i + k][m] = 1;
                                        k++;
                                    }
                                    break;
                        case 'v' : k = i + 1;
                                    while(k < M && !blocked(k,j))
                                    {
                                        unsafe[N * k + j][m] = 1;
                                        k++;
                                    }
                                    break;
                        case '<' : k = j - 1;
                                    while(k >= 0 && !blocked(i,k))
                                    {
                                         unsafe[N * i + k][m] = 1;
                                         k--;
                                    }
                                    break;
                        }
                        dir = rclock(dir);
                    }
                }
            }
        }
        bfs();
    }
    return 0;
}

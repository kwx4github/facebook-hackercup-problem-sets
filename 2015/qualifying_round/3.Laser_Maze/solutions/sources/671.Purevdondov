#include <bits/stdc++.h>
#define iof(in, out) freopen(in, "r", stdin); freopen(out, "w", stdout);
#define f1(i, x) for(int i=0; i<x; i++)
#define setall(i, j, x) maze[i][j][0] = x; maze[i][j][1] = x; maze[i][j][2] = x; maze[i][j][3] = x
#define setstart(i ,j) px=i; py=j
#define WALL 0
#define SAFE 1
#define VSTD 2
#define HELL 3
#define GOAL 4

int T = 0, M, N, px, py;
char map[100][100];
int maze[100][100][4];

struct move{
	int step, x, y;
};

std::queue<move> plan;

bool inmap(int x, int y) {
	return x>-1 && x<M && y>-1 && y<N;
}

void drawfire(int x, int y, int t, int ix, int iy) {
	int i = x + ix, j = y + iy;
	while (inmap(i, j)) {
		if (maze[i][j][t] == WALL)
			return;
		if (maze[i][j][t] == SAFE || maze[i][j][t] == GOAL)
			maze[i][j][t] = HELL;
		i+=ix; j+=iy;
	}
}

void drawshot(int x, int y, int dir) {
	drawfire(x, y, dir, -1, 0);
	drawfire(x, y, (dir+1)%4, 0, 1);
	drawfire(x, y, (dir+2)%4, 1, 0);
	drawfire(x, y, (dir+3)%4, 0, -1);
}

void drawhell() {
	f1(i, M)
		f1(j, N)
			switch(map[i][j]) {
				case '^': drawshot(i, j, 0); break;
				case '<': drawshot(i, j, 1); break;
				case 'v': drawshot(i, j, 2); break;
				case '>': drawshot(i, j, 3); break;
			}
}

void drawmaze() {
	f1(i, M)
		f1(j, N)
			switch(map[i][j]) {
				case '.': setall(i, j, SAFE); break;
				case '#': setall(i, j, WALL); break;
				case 'S': setall(i, j, SAFE); setstart(i, j); break;
				case 'G': setall(i, j, GOAL); break;
				case '<': setall(i, j, WALL); break;
				case '>': setall(i, j, WALL); break;
				case '^': setall(i, j, WALL); break;
				case 'v': setall(i, j, WALL); break;
				default: setall(i, j, WALL); break;
			}
}

void newplan() {
   std::queue<move> empty;
   std::swap(plan, empty);
}

void planmove(move m) {
	move next;
	next.step = m.step + 1;
	next.x = m.x-1; next.y = m.y;
	plan.push(next);
	next.x = m.x; next.y = m.y+1;
	plan.push(next);
	next.x = m.x+1; next.y = m.y;
	plan.push(next);
	next.x = m.x; next.y = m.y-1;
	plan.push(next);
}

int walk(move m) {
	if (!inmap(m.x, m.y))
		return -1;
	int t = m.step%4;
	if (maze[m.x][m.y][t] == GOAL)
		return m.step;
	if (maze[m.x][m.y][t] != SAFE)
		return -1;
	maze[m.x][m.y][t] = VSTD;
	planmove(m);
	return -1;
}

int analyze() {
	newplan();
	move m; m.step = 0; m.x = px; m.y = py;
	planmove(m);
	
	int res;
	while (!plan.empty()) {
		m = plan.front();
		plan.pop();
		res = walk(m);
		if (res > 0)
			return res;
	}
	return -1;
}

int main() {
	iof("laser_maze.txt", "output.txt")
	scanf("%d", &T);
	f1(t, T) {
		scanf("%d %d", &M, &N);
		f1(i, M)
			f1(j, N)
				scanf(" %c", &map[i][j]);
		drawmaze();
		drawhell();
		int res = analyze();
		printf("Case #%d: ", t+1);
		if (res == -1)
			printf("%s\n", "impossible");
		else
			printf("%d\n", res);
	}
	return 0;
}



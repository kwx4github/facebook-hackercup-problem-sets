#include <iostream>
#include <queue>
#include <string>
#include <map>
using namespace std;

struct Node {
	int x, y, s;

	Node(int _x, int _y, int _s) : x(_x), y(_y), s(_s) {}
};

string maze[100];
int actualMaze[4][100][100];
map<char, int> dirMap;

void generateMaze(int M, int N, int rot) {
	for (int i = 0; i < M; ++i) {
		for (int j = 0; j < N; ++j) {
			actualMaze[rot][i][j] = 1;
		}
	}
	for (int i = 0; i < M; ++i) {
		for (int j = 0; j < N; ++j) {
			if (maze[i][j] != '.') {
				actualMaze[rot][i][j] = 0;
				if (maze[i][j] != '#') {
					int dir = dirMap[maze[i][j]];
					dir = (dir + rot) % 4;
					if (dir == 0) {
						for (int k = j - 1; k >= 0; --k) {
							if (maze[i][k] != '.') {
								break;
							}
							actualMaze[rot][i][k] = 0;
						}
					}
					if (dir == 1) {
						for (int k = i - 1; k >= 0; --k) {
							if (maze[k][j] != '.') {
								break;
							}
							actualMaze[rot][k][j] = 0;
						}
					}
					if (dir == 2) {
						for (int k = j + 1; k < N; ++k) {
							if (maze[i][k] != '.') {
								break;
							}
							actualMaze[rot][i][k] = 0;
						}
					}
					if (dir == 3) {
						for (int k = i + 1; k < M; ++k) {
							if (maze[k][j] != '.') {
								break;
							}
							actualMaze[rot][k][j] = 0;
						}
					}
				}
			}
		}
	}
}

int main() {
	int T, M, N;
	int sx, sy;
	int ex, ey;	
	cin >> T;
	dirMap['<'] = 0;
	dirMap['^'] = 1;
	dirMap['>'] = 2;
	dirMap['v'] = 3;
	for (int c = 1; c <= T; ++c) {
		cin >> M >> N;
		for (int i = 0; i < M; ++i) {
			cin >> maze[i];
		}
		for (int i = 0; i < M; ++i) {
			for (int j = 0; j < N; ++j) {
				if (maze[i][j] == 'S') {
					sx = i, sy = j;
					maze[i][j] = '.';
				}
				if (maze[i][j] == 'G') {
					ex = i, ey = j;
					maze[i][j] = '.';
				}
			}
		}
		for (int i = 0; i < 4; ++i) {
			generateMaze(M, N, i);
		}

		bool visited[4][100][100];
		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < M; ++j) {
				for (int k = 0; k < N; ++k) {
					visited[i][j][k] = false;
				}
			}
		}

		queue<Node> q;
		q.push(Node(sx, sy, 0));
		visited[0][sx][sy] = true;
		int res = -1;
		int tr;
		int ax, ay;
		while (!q.empty()) {
			Node n = q.front();
			q.pop();
			tr = (n.s + 1) % 4;
			if (n.x == ex && n.y == ey) {
				res = n.s;
				break;
			}

			for (int d = -1; d <= 1; d += 2) {
				ax = n.x;
				ay = n.y + d;
				if (ay >= 0 && ay < N && actualMaze[tr][ax][ay] == 1 && visited[tr][ax][ay] == false) {
					visited[tr][ax][ay] = true;
					q.push(Node(ax, ay, n.s + 1));
				}
				ax = n.x + d;
				ay = n.y;
				if (ax >= 0 && ax < M && actualMaze[tr][ax][ay] == 1 && visited[tr][ax][ay] == false) {
					visited[tr][ax][ay] = true;
					q.push(Node(ax, ay, n.s + 1));
				}
			}
		}
		cout << "Case #" << c << ": ";
		if (res == -1) {
			cout << "impossible";
		} else {
			cout << res;
		}
		cout << "\n";
	}
	return 0;
}
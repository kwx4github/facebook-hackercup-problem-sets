#include<bits/stdc++.h>
using namespace std;
const int N = 100, M = 100, K = 4, MAXV = 6e4;
vector<int> e[MAXV];
vector<char> burn;
string s[N];
int n, m;


char isGood(int i, int j) {
    if (min(i, j) < 0) {
        return false;
    }
    if (i >= n || j >= m) {
        return false;
    }
    if (s[i][j] == '.') {
        return true;
    }
    if (s[i][j] == 'G') {
        return true;
    }
    return s[i][j] == 'S';
}


int f(int x, int y, int timer) {
    if (timer == 4) {
        timer = 0;
    }
    return x * M * K + y * K + timer;
}


void solve() {
    scanf("%d%d\n", &n, &m);

    for (int i = 0; i < MAXV; i++) {
        e[i].clear();
    }
    burn.assign(MAXV, false);

    for (int i = 0; i < n; i++) {
        getline(cin, s[i]);
    }

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            if (!isGood(i, j)) {
                continue;
            }
            for (int k = 0; k < 4; k++) {
                if (isGood(i - 1, j)) {
                    e[f(i, j, k)].push_back(f(i - 1, j, k + 1));
                }
                if (isGood(i + 1, j)) {
                    e[f(i, j, k)].push_back(f(i + 1, j, k + 1));
                }
                if (isGood(i, j - 1)) {
                    e[f(i, j, k)].push_back(f(i, j - 1, k + 1));
                }
                if (isGood(i, j + 1)) {
                    e[f(i, j, k)].push_back(f(i, j + 1, k + 1));
                }
            }
        }

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            for (int x = i - 1; x >= 0; x--) {
                if (s[x][j] == '#') {
                    break;
                }
                if (s[x][j] == 'v') {
                    burn[f(i, j, 0)] = true;
                } else if (s[x][j] == '>') {
                    burn[f(i, j, 1)] = true;
                } else if (s[x][j] == '^') {
                    burn[f(i, j, 2)] = true;
                } else if (s[x][j] == '<') {
                    burn[f(i, j, 3)] = true;
                }
            }
            for (int x = i + 1; x < n; x++) {
                if (s[x][j] == '#') {
                    break;
                }
                if (s[x][j] == '^') {
                    burn[f(i, j, 0)] = true;
                } else if (s[x][j] == '<') {
                    burn[f(i, j, 1)] = true;
                } else if (s[x][j] == 'v') {
                    burn[f(i, j, 2)] = true;
                } else if (s[x][j] == '>') {
                    burn[f(i, j, 3)] = true;
                }
            }
            for (int y = j - 1; y >= 0; y--) {
                if (s[i][y] == '#') {
                    break;
                }
                if (s[i][y] == '>') {
                    burn[f(i, j, 0)] = true;
                } else if (s[i][y] == '^') {
                    burn[f(i, j, 1)] = true;
                } else if (s[i][y] == '<') {
                    burn[f(i, j, 2)] = true;
                } else if (s[i][y] == 'v') {
                    burn[f(i, j, 3)] = true;
                }
            }
            for (int y = j + 1; y < m; y++) {
                if (s[i][y] == '#') {
                    break;
                }
                if (s[i][y] == '<') {
                    burn[f(i, j, 0)] = true;
                } else if (s[i][y] == 'v') {
                    burn[f(i, j, 1)] = true;
                } else if (s[i][y] == '>') {
                    burn[f(i, j, 2)] = true;
                } else if (s[i][y] == '^') {
                    burn[f(i, j, 3)] = true;
                }
            }
        }

    queue<int> q;
    vector<int> d(MAXV, 1e9);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (s[i][j] == 'S') {
                q.push(f(i, j, 0));
                d[q.front()] = 0;
            }

    for (; !q.empty(); q.pop()) {
        int v = q.front();
        for (int to : e[v]) {
            if (burn[to] || d[to] <= d[v] + 1) {
                continue;
            }
            d[to] = d[v] + 1;
            q.push(to);
        }
    }

    int ans = 1e9;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            for (int k = 0; k < 4; k++)
                if (s[i][j] == 'G') {
                    ans = min(ans, d[f(i, j, k)]);
                }

    if (ans == 1e9) {
        printf("impossible\n");
    } else {
        printf("%d\n", ans);
    }
}


main() {

    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int t;
    scanf("%d", &t);

    for (int i = 1; i <= t; i++) {
        printf("Case #%d: ", i);
        solve();
    }

    return 0;
}

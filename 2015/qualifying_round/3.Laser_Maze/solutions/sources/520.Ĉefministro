//Bismillahir Rahmanir Rahmeem

#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define INF 1e9
#define lld long long int
#define clr(a) memset(a,0,sizeof(a))
#define reset(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define pb push_back
#define mp make_pair
#define print(x) printf("%d\n",x)
#define pi 3.14159265359
#define X first
#define Y second

map<char, pii > next;
map<pii, pii> nextInc;


int n,m;

char mat[105][105];

int sx,sy,gx,gy;


int visited[105][105][5];

bool blocked[105][105][5];

int block(int x, int y)
{
    int i;
    for(i=0;i<4;i++)
    {
        blocked[x][y][i]=true;
    }
}

void fillblock(int x, int y, int incx, int incy,int cost, int dep)
{
    if(dep==4) return;
    int px=x+incx, py=y+incy;
    while(0<=px && px<n && 0<=py && py<m && mat[px][py]!='#' && next.find(mat[px][py])==next.end())
    {
        blocked[px][py][cost]=true;
        px+=incx;
        py+=incy;
    }
    pii ret=nextInc[mp(incx,incy)];
    fillblock(x,y,ret.X,ret.Y,(cost+1)%4,dep+1);
}

int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

int bfs()
{
    queue<int> qx,qy,qc;
    qx.push(sx);
    qy.push(sy);
    qc.push(3);
    reset(visited);
    visited[sx][sy][3]=0;
    while(!qx.empty())
    {
        int x, y, c;
        x=qx.front();
        y=qy.front();
        c=qc.front();
        if(x==gx && y==gy)
        {
            return visited[x][y][c];
        }
        qx.pop(),qy.pop(),qc.pop();
        int i;
        for(i=0;i<4;i++)
        {
            int nx, ny,nc;
            nx=x+dx[i];
            ny=y+dy[i];
            nc=(c+1)%4;
            if(0<=nx && nx<n && 0<=ny && ny<m
               && !blocked[nx][ny][nc] && visited[nx][ny][nc]==-1)
            {
                visited[nx][ny][nc]=visited[x][y][c]+1;
                qx.push(nx);
                qy.push(ny);
                qc.push(nc);
            }
        }
    }
    return -1;
}


int main()
{
    //FRO
    //FROut
    int t,ca;
    scanf("%d",&t);
    int i,j;

    next['^']=mp(-1,0);
    next['>']=mp(0,1);
    next['v']=mp(1,0);
    next['<']=mp(0,-1);

    nextInc[mp(-1,0)]=mp(0,1);
    nextInc[mp(0,1)]=mp(1,0);
    nextInc[mp(1,0)]=mp(0,-1);
    nextInc[mp(0,-1)]=mp(-1,0);
    for(ca=1;ca<=t;ca++)
    {
        scanf("%d %d",&n,&m);
        for(i=0;i<n;i++)
        {
            scanf("%s",mat[i]);
        }
        clr(blocked);
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(mat[i][j]=='G')
                {
                    gx=i,gy=j;
                }
                else if(mat[i][j]=='S')
                {
                    sx=i,sy=j;
                }
                else if(mat[i][j]=='#')
                {
                    block(i,j);
                }
                else if(next.find(mat[i][j])!=next.end())
                {
                    block(i,j);
                    pii ret=next[mat[i][j]];
                    fillblock(i,j,ret.X,ret.Y,3,0);
                }
            }
        }
        printf("Case #%d: ",ca);
        int ans=bfs();
        ans==-1?printf("impossible\n"):printf("%d\n",ans);
    }
    return 0;
}

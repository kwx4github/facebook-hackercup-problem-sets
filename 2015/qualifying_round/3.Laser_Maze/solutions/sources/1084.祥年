#include<iostream>
#include<vector>
#include<cstring>
#include<queue>
#include<stdio.h>
#define SIZE 100
using namespace std;
char board[SIZE+1][SIZE+1];
struct node{
  int x,y;
};
struct node2{
  bool four[4];
};
struct STEP{
  node coord;
  int amount;
};
vector<node> laser;
queue<STEP> steps;
node newNode,fourDir[4]={0,1,0,-1,1,0,-1,0};
STEP newStep;
node2 record[SIZE+1][SIZE+1];
node2 visited[SIZE+1][SIZE+1];
int m,n;

void decreaseY(int startX, int startY, int round)
{
  int j;
  for(j=startY-1;j>=0;j--)
  {
    if(board[startX][j]!='.' && board[startX][j]!='S' && board[startX][j]!='G')
      break;
    record[startX][j].four[round]=true;
  }
}

void increaseX(int startX, int startY, int round)
{
  int i;
  for(i=startX+1;i<m;i++)
  {
    if(board[i][startY]!='.' && board[i][startY]!='S' && board[i][startY]!='G')
      break;
    record[i][startY].four[round]=true;
  }
}

void increaseY(int startX, int startY, int round)
{
  int j;
  for(j=startY+1;j<n;j++)
  {
    if(board[startX][j]!='.' && board[startX][j]!='S' && board[startX][j]!='G')
      break;
    record[startX][j].four[round]=true;
  }
}

void decreaseX(int startX, int startY, int round)
{
  int i;
  for(i=startX-1;i>=0;i--)
  {
    if(board[i][startY]!='.' && board[i][startY]!='S' && board[i][startY]!='G')
      break;
    record[i][startY].four[round]=true;
  }
}
int main()
{
  freopen("laser_maze.txt","r",stdin);
  freopen("pc.txt","w",stdout);
  int cases,t,i,j,k,initX,initY;
  bool check,result;
  cin>>t;
  for(cases=1;cases<=t;cases++)
  {
    cin>>m>>n;
    check=true;
    result=false;
    laser.clear();
    while(!steps.empty())
      steps.pop();
    memset(record,0,sizeof(record));
    memset(visited,0,sizeof(visited));
    
    for(i=0;i<m;i++)
    {
      cin>>board[i];
      for(j=0;j<n;j++)
      {
        if(check && board[i][j]=='S')
        {
          check=false;
          initX=i,initY=j;
        }
        if(board[i][j]=='<' || board[i][j]=='^' || board[i][j]=='>' || board[i][j]=='v')
        {
          newNode.x=i;
          newNode.y=j;
          laser.push_back(newNode);
        }
      }
    }
    for(j=0;j!=laser.size();j++)
    {
      if(board[laser[j].x][laser[j].y] == '<')
      {
        decreaseX(laser[j].x, laser[j].y, 1);
        increaseY(laser[j].x, laser[j].y, 2);
        increaseX(laser[j].x, laser[j].y, 3);
        decreaseY(laser[j].x, laser[j].y, 0);
      }
      else if(board[laser[j].x][laser[j].y] == '^')
      {
        increaseY(laser[j].x, laser[j].y, 1);
        increaseX(laser[j].x, laser[j].y, 2);
        decreaseY(laser[j].x, laser[j].y, 3);
        decreaseX(laser[j].x, laser[j].y, 0);
      }
      else if(board[laser[j].x][laser[j].y] == '>')
      {
        increaseX(laser[j].x, laser[j].y, 1);
        decreaseY(laser[j].x, laser[j].y, 2);
        decreaseX(laser[j].x, laser[j].y, 3);
        increaseY(laser[j].x, laser[j].y, 0);
      }
      else
      {
        decreaseY(laser[j].x, laser[j].y, 1);
        decreaseX(laser[j].x, laser[j].y, 2);
        increaseY(laser[j].x, laser[j].y, 3);
        increaseX(laser[j].x, laser[j].y, 0);
      }
    }
    
    newStep.coord.x=initX, newStep.coord.y=initY;
    newStep.amount=0;
    steps.push(newStep);
    visited[initX][initY].four[0]=true;
    while(!steps.empty())
    {
      if(board[steps.front().coord.x][steps.front().coord.y] == 'G')
      {
        result=true;
        break;
      }
      //cout<<steps.front().coord.x<<" "<<steps.front().coord.y<<endl;
      int amountOfStep=(steps.front().amount+1)%4;
      for(i=0;i<4;i++)
      {
        if(fourDir[i].x+steps.front().coord.x>=0 && fourDir[i].x+steps.front().coord.x<m
          &&fourDir[i].y+steps.front().coord.y>=0 && fourDir[i].y+steps.front().coord.y<n
          &&!visited[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y].four[amountOfStep]
          &&!record[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y].four[amountOfStep]
          &&(board[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y]=='.'
          ||board[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y]=='G'
          ||board[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y]=='S')
        )
        {
          newStep.coord.x=fourDir[i].x+steps.front().coord.x;
          newStep.coord.y=fourDir[i].y+steps.front().coord.y;
          newStep.amount=steps.front().amount+1;
          steps.push(newStep);
          visited[fourDir[i].x+steps.front().coord.x][fourDir[i].y+steps.front().coord.y].four[amountOfStep]=true;
        }
      }
      steps.pop();
    }
    if(result)
      printf("Case #%d: %d\n", cases, steps.front().amount);
    else
      printf("Case #%d: impossible\n", cases);
  }
  return 0;
}
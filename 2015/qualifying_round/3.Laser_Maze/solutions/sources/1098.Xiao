#include <queue>
#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

int T, r, c, m[10][200][200], d[11111][11], ux[] = {-1, 1, 0, 0}, uy[] = {0, 0, -1, 1};
char g[200][200];

char nxt(char c) {
    if (c == '^')
        return '>';
    if (c == '>')
        return 'v';
    if (c == 'v')
        return '<';
    return '^';
}

char rot(char c, int t) {
    if (t == 0) {
        return c;
    } else {
        return rot(nxt(c), t - 1);
    }
}

int main() {

    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);

    scanf("%d", &T);

    for (int t = 1; t <= T; ++t) {
        scanf("%d %d", &r, &c);
        for (int i = 0; i < r; i++) {
            scanf("%s", g[i]);
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < r; j++) {
                for (int k = 0; k < c; k++) {
                    m[i][j][k] = 0;
                }
            }
            for (int j = 0; j < r; j++) {
                for (int k = 0; k < c; k++) {
                    if (g[j][k] == 'S' || g[j][k] == 'G' || g[j][k] == '.' || g[j][k] == '#') {
                        continue;
                    }
                    int dx = 0;
                    int dy = 0;
                    char t = rot(g[j][k], i);
                    if (t == '<') {
                        --dy;
                    } else if (t == '>') {
                        ++dy;
                    } else if (t == 'v') {
                        ++dx;
                    } else {
                        --dx;
                    }
                    for (int ii = j + dx, jj = k + dy; ii >= 0 && jj >= 0 && ii < r && jj < c; ii += dx, jj += dy) {
                        if (g[ii][jj] == 'S' || g[ii][jj] == 'G' || g[ii][jj] == '.') {
                            m[i][ii][jj] = 1;
                        } else {
                            break;
                        }
                    }
                }
            }
        }
        queue < pair <int, int> > q;
        for (int i = 0; i < r * c; i++) {
            for (int j = 0; j < 4; j++) {
                d[i][j] = -1;
            }
        }
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (g[i][j] == 'S') {
                    d[i * c + j][0] = 0;
                    q.push(make_pair(i * c + j, 0));
                }
            }
        }
        while (!q.empty()) {
            pair <int, int> p = q.front();
            q.pop();
            int rx = p.first / c;
            int ry = p.first % c;
            int rz = (p.second + 1) % 4;
            for (int i = 0; i < 4; i++) {
                int nx = rx + ux[i];
                int ny = ry + uy[i];
                if (nx < 0 || ny < 0 || nx >= r || ny >= c) {
                    continue;
                }
                if (m[rz][nx][ny] == 1 || d[nx * c + ny][rz] >= 0) {
                    continue;
                }
                if (g[nx][ny] != 'S' && g[nx][ny] != 'G' && g[nx][ny] != '.') {
                    continue;
                }
                d[nx * c + ny][rz] = d[p.first][p.second] + 1;
                q.push(make_pair(nx * c + ny, rz));
            }
        }
        int ans = 1 << 30;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (g[i][j] != 'G') {
                    continue;
                }
                for (int k = 0; k < 4; k++) {
                    if (d[i * c + j][k] == -1) {
                        continue;
                    }
                    ans = min(ans, d[i * c + j][k]);
                }
            }
        }
        printf("Case #%d: ", t);
        if (ans == 1 << 30)
            printf("impossible\n");
        else
            printf("%d\n", ans);
    }

    return 0;

}

#include<bits/stdc++.h>
#define REP(i,n) for(int (i)=0;i<(int)(n);++(i))
#define PB push_back
#define FT first
#define SD second
#define ZERO(x) memset(x,0,sizeof(x))
#define NEG(x) memset(x,-1,sizeof(x))
#define RI(x) scanf("%d",&(x))
#define RII(x,y) scanf("%d%d",&(x),&(y))
#define RIII(x,y,z) scanf("%d%d%d",&(x),&(y),&(z))
#define OIII(x,y,z) printf("%d %d %d\n",(x),(y),(z))
#define OII(x,y) printf("%d %d\n",(x),(y))
#define OI(x) printf("%d\n",(x))
#define RS(s) scanf("%s",(s))
#define MP(x,y) make_pair((x),(y))
typedef long long LL;
using namespace std;
typedef pair<int,int> PII;
const int MOD = 1e9+7;
const int maxn = 111;
int T;
char G[maxn][maxn];
int dp[maxn][maxn][4];
int aa[maxn][maxn][4];

int n,m;
int sx, sy,gx,gy;
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
struct ll {
	int x,y;
	int dir;
};
vector<ll> laser;

bool ok(int x,int y,int t) {
	//printf("ok %d %d %d\n",x,y,t);
	if(G[x][y] == '#' || G[x][y] == '^'|| G[x][y] == 'v'|| G[x][y] == '<'|| G[x][y] == '>')return 0;
	for(int i = 0;i<laser.size();++i) {
		//printf("checking laser %d\n",i);
		int dir = (laser[i].dir + t) % 4;
		if(dir == 0) {
			if(x==laser[i].x && y>laser[i].y)return 0;
		} else if(dir == 1) {
			if(y==laser[i].y && x>laser[i].x)return 0;
		}  else if(dir == 2) {
			if(x==laser[i].x && y<laser[i].y)return 0;
		}  else if(dir == 3) {
			if(y==laser[i].y && x<laser[i].x)return 0;
		}
	}
	//printf("ok end\n");
	return 1;
}
struct qe{
	int x,y,t;
};
bool vis[maxn][maxn][4];
int go(int x,int y,int t,int now) {
	//OIII(x,y,t);
	queue<qe> q;
	q.push((qe){x,y,t});

	while(!q.empty()) {
		qe qq = q.front();q.pop();
		x = qq.x;
		y = qq.y;
		t = qq.t%4;
		if(vis[x][y][t])continue;
		vis[x][y][t] = 1;
		now = qq.t;
		dp[x][y][t] = now;
		if(x==gx&&y==gy)continue;
		REP(i,4) {
			int nx = x+dx[i],ny = y+dy[i];
			if(nx>=0&&ny>=0&&nx<n&&ny<m&&ok(nx,ny,t) && !vis[nx][ny][t]){
				q.push((qe){nx,ny,now+1});
			}
		}
	}
	return 1;
}

int main(int argc, char const *argv[])
{
	RI(T);
	for(int kase = 1;kase<=T;++kase) {
		//OI(kase);
		RII(n,m);
		REP(i,n)RS(G[i]);
		NEG(dp);
		ZERO(vis);
		laser.clear();
		REP(i,n)REP(j,m){
			if(G[i][j] == 'S'){
				sx = i;
				sy = j;
			} else if(G[i][j] == 'G') {
				gx = i;
				gy = j;
			} else if(G[i][j] == '^') {
				laser.PB((ll){i,j,0});
			} else if(G[i][j] == '>') {
				laser.PB((ll){i,j,1});
			} else if(G[i][j] == '<') {
				laser.PB((ll){i,j,3});
			} else if(G[i][j] == 'v') {
				laser.PB((ll){i,j,2});
			}
		}

		go(sx,sy,0,0);
		//bfs(sx,sy,0,0);
		int ans = 1<<30;
		REP(i,4)if(dp[gx][gy][i] != -1) {
			ans = min(ans,dp[gx][gy][i]);
		}
		if(ans == 1<<30){
			printf("Case #%d: %s\n",kase,"impossible");
		} else {
			printf("Case #%d: %d\n",kase,ans);
		}
	}
	return 0;
}
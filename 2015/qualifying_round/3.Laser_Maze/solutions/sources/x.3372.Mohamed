
//-- New Year's Resolution

#include <iostream>
#include <algorithm>
#include <fstream>
#include <queue>
using namespace std;


class v{
public:
	int i, j, t;
	v(int i1, int j1, int t1){ i = i1; j = j1; t = t1; }
};

char a[200][200];
bool visited[200][200][4];
int dist[200][200][4];
pair<int, int> start, goal;
int t, n, m;

bool dir(char c,int d, int t){
	int ans = 0;
	
	if (c == '>') ans = 0;
	else if (c == 'V') ans = 1;
	else if (c == '<') ans = 2;
	else if (c == '^') ans = 3;
	
	ans = (ans + t) % 4;
	if (ans == d) return true;
	return false;
}
bool check(int i, int j, int k){
	int z = i;
	while (z < n){
		if (a[z][j] == '#') break;
		else if (a[z][j] != '.' && a[z][j] != 'S' && a[z][j] != 'G'){
			if (dir(a[z][j], 3, k)) return false;
			break;
		}
		z++;
	}
	z = i;
	while (z >= 0){
		if (a[z][j] == '#') break;
		else if (a[z][j] != '.' && a[z][j] != 'S' && a[z][j] != 'G'){
			if (dir(a[z][j], 1, k)) return false;
			break;
		}
		z--;
	}
	z = j;
	while (z < m){
		if (a[i][z] == '#') break;
		else if (a[i][z] != '.' && a[i][z] != 'S' && a[i][z] != 'G'){
			if (dir(a[i][z], 2, k)) return false;
			break;
		}
		z++;
	}
	z = j;
	while (z >= 0){
		if (a[i][z] == '#') break;
		else if (a[i][z] != '.' && a[i][z] != 'S' && a[i][z] != 'G'){
			if (dir(a[i][z], 0, k)) return false;
			break;
		}
		z--;
	}
	return true;
}
void bfs(){
	v u(start.first, start.second, 0);
	
	visited[start.first][start.second][0] = 1;
	dist[start.first][start.second][0] = 0;
	
	queue <v> q;
	q.push(u);
	
	while (!q.empty()){
		v curr = q.front();
		q.pop();
		if (curr.i > 0) {
			v u(curr.i - 1, curr.j, (curr.t + 1) % 4);
			if (!visited[u.i][u.j][u.t]){
				visited[u.i][u.j][u.t] = 1;
				if ( ((a[u.i][u.j] == '.' )|| (a[u.i][u.j] == 'G') || (a[u.i][u.j] == 'S')) && check(u.i, u.j, u.t)){
					dist[u.i][u.j][u.t] = dist[curr.i][curr.j][curr.t] + 1;
					q.push(u);
					if (a[u.i][u.j] == 'G') return;
				}
			}
		}
		if (curr.i < n - 1){
			v u(curr.i + 1, curr.j, (curr.t + 1) % 4);
			if (!visited[u.i][u.j][u.t]){
				visited[u.i][u.j][u.t] = 1;
				if ((a[u.i][u.j] == '.' || a[u.i][u.j] == 'G' || a[u.i][u.j] == 'S')&& check(u.i, u.j, u.t)){
					dist[u.i][u.j][u.t] = dist[curr.i][curr.j][curr.t] + 1;
					q.push(u);
					if (a[u.i][u.j] == 'G') return;
				}
			}
		}
		if (curr.j > 0){
			v u(curr.i, curr.j - 1, (curr.t + 1) % 4);
			if (!visited[u.i][u.j][u.t]){
				visited[u.i][u.j][u.t] = 1;
				if ((a[u.i][u.j] == '.' || a[u.i][u.j] == 'G' || a[u.i][u.j] == 'S') && check(u.i, u.j, u.t)){
					dist[u.i][u.j][u.t] = dist[curr.i][curr.j][curr.t] + 1;
					q.push(u);
					if (a[u.i][u.j] == 'G') return;
				}
			}
		}
		if (curr.j < m - 1){
			v u(curr.i, curr.j + 1, (curr.t + 1) % 4);
			if (!visited[u.i][u.j][u.t]){
				visited[u.i][u.j][u.t] = 1;
				if ((a[u.i][u.j] == '.' || a[u.i][u.j] == 'G' || a[u.i][u.j] == 'S') && check(u.i, u.j, u.t)){
					dist[u.i][u.j][u.t] = dist[curr.i][curr.j][curr.t] + 1;
					q.push(u);
					if (a[u.i][u.j] == 'G') return;
				}
			}
		}
	}
}

int main(){
	ifstream fin("input.txt"); ofstream fout("output.txt");
	int cou = 1;
	fin >> t;
	while (t--){
		fin >> n >> m;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) fin >> a[i][j];
		
		
		for (int i = 0; i < n; i++){
			for (int j = 0; j < m; j++){
				if (a[i][j] == 'S') start = make_pair(i, j);
				else if (a[i][j] == 'G') goal = make_pair(i, j);
			}
		}
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				for (int k = 0; k < 4; k++) visited[i][j][k] = 0;
		
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				for (int k = 0; k < 4; k++) dist[i][j][k] = -1;
		bfs();
		fout << "Case #" << cou << ": ";
		int k = -1;
		for (int z = 0; z < 4; z++){
			if (dist[goal.first][goal.second][z] != -1){
				k = z;
			}
		}
		if (k == -1) fout << "impossible" << endl;
		else {
			fout << dist[goal.first][goal.second][k] << endl;
		}
		cou++;
	}


	return 0;
}
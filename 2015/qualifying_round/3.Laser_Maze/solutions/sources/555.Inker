import itertools
import sys
from collections import deque

DEBUG = len(sys.argv) > 1

no = int(raw_input())

DIRECTIONS = ((0,1), (1,0), (0, -1), (-1, 0))
DIRECTION_CHARS = ">v<^"
MOVABLE = "SG."

for cases in range(1, no+1):
	n, m = map(int, raw_input().split())
	mp = [raw_input() for i in range(n)]
	def Movable(x, y):
		return 0 <= x < n and 0 <= y < m and mp[x][y] in MOVABLE
	
	turrets = []

	for x in range(n):
		for y in range(m):
			if mp[x][y] in DIRECTION_CHARS:
				turrets.append((x, y, DIRECTION_CHARS.index(mp[x][y])))
			elif mp[x][y] == "S":
				sx, sy = x, y
			elif mp[x][y] == "G":
				gx, gy = x, y
	
	# build fast turrets look up
	tlookup = [[{} for y in range(m)] for x in range(n)]
	for tx, ty, initDir in turrets:
		for dno, (dx, dy) in enumerate(DIRECTIONS):
			x, y = tx, ty
			while True:
				x += dx
				y += dy
				if not Movable(x, y):
					break
				tlookup[x][y][dno] = initDir

	# prepare BFS
	queue = deque([(sx, sy, 0, 0)])
	visited = set([(x, y, 0)])

	while queue:
		(x, y, phrase, steps) = queue.popleft()
		#print (x, y, phrase, steps)

		# if not die
		if not any((initDir+phrase)%4 == dir for dir, initDir in tlookup[x][y].iteritems()) or (x,y,phrase) == (sx,sy,0):

			# achieve goal
			if x == gx and y == gy:
				print "Case #%d: %s" %(cases, steps)
				break

			# expand next state
			for dx, dy in DIRECTIONS:
				next_state = x+dx, y+dy, (phrase+1)%4, steps+1
				if Movable(*next_state[:2]) and next_state[:3] not in visited:
					visited.add(next_state[:-1])
					queue.append(next_state)
	else:
		print "Case #%d: impossible" %(cases,)


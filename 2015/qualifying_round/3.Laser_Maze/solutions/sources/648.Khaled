#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
using namespace std;
#define PB                      push_back
#define MP                      make_pair
#define ALL(v)                  v.begin(),v.end()
#define CLR(v, d)               memset(v, d, sizeof(v))
#define loop(i,n) 		        for(int i=0;i<(int)n;i++)
#define loop2(i,n,m)            for(int i=n;i<(int)(m);i++)
#define SZ(v)					(int) v.size()
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef stringstream SS;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

const int OO = (int) 1e9;
const double PI = 2 * acos(0);
const double EPS = 1e-9;

int dcmp(double a, double b) {
	return fabs(a - b) <= EPS ? 0 : a > b ? 1 : 2;
}

int DI[] = { -1, 0, 1, 0, 1, -1, -1, 1 };
int DJ[] = { 0, 1, 0, -1, 1, -1, 1, -1 };

int w, h;
char maze[101][101];
vector<set<pair<int, int> > > infectedCells;
bool visted[4][101][101];

void moveClockWise() {
	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++) {
			if (maze[i][j] == '>')
				maze[i][j] = 'v';
			else if (maze[i][j] == 'v')
				maze[i][j] = '<';
			else if (maze[i][j] == '<')
				maze[i][j] = '^';
			else if (maze[i][j] == '^')
				maze[i][j] = '>';
		}
}
void setInfectedCells() {
	set<pair<int, int> > cells;
	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++) {
			if (maze[i][j] == '>') {
				for (int k = j + 1; k < w; k++) {
					if (maze[i][k] != '.')
						break;
					cells.insert(MP(i, k));
				}
			} else if (maze[i][j] == 'v') {
				for (int k = i + 1; k < h; k++) {
					if (maze[k][j] != '.')
						break;
					cells.insert(MP(k, j));
				}
			} else if (maze[i][j] == '<') {
				for (int k = j - 1; k >= 0; k--) {
					if (maze[i][k] != '.')
						break;
					cells.insert(MP(i, k));
				}

			} else if (maze[i][j] == '^') {
				for (int k = i - 1; k >= 0; k--) {
					if (maze[k][j] != '.')
						break;
					cells.insert(MP(k, j));
				}
			}
		}
	infectedCells.push_back(cells);

}
int go(pair<int, int> s, pair<int, int> g) {
	int level = 0;
	queue<pair<int, int> > q;
	CLR(visted, 0);
	visted[level][s.first][s.second] = true;
	q.push(s);
	while (!q.empty()) {
		int sz = SZ(q);
		while (sz--) {
			s = q.front();
			q.pop();
			if (s == g)
				return level;
			int expectedLevel = (level + 1) % 4;
			for (int d = 0; d < 4; d++) {
				int ni = s.first + DI[d];
				int nj = s.second + DJ[d];
				if (ni < 0 || nj < 0 || ni >= h || nj >= w)
					continue;
				if (visted[expectedLevel][ni][nj])
					continue;
				if (maze[ni][nj] != '.')
					continue;
				if (infectedCells[expectedLevel].find(MP(ni, nj))
						!= infectedCells[expectedLevel].end())
					continue;
				visted[expectedLevel][ni][nj] = true;
				q.push(MP(ni, nj));
			}
		}
		level++;
	}
	return -1;
}
int main() {
	freopen("in3.txt", "rt", stdin);
	freopen("out3.txt", "wt", stdout);
	int t;
	cin >> t;
	for (int tt = 1; tt <= t; tt++) {
		printf("Case #%d: ", tt);
		cin >> h >> w;
		pair<int, int> s, g;

		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				cin >> maze[i][j];
				if (maze[i][j] == 'S')
					s = MP(i, j), maze[i][j] = '.';
				if (maze[i][j] == 'G')
					g = MP(i, j), maze[i][j] = '.';
			}
		}

		infectedCells.clear();
		for (int i = 0; i <= 3; i++) {
			setInfectedCells();
			moveClockWise();
		}

		int answer = go(s, g);
		if (answer == -1) {
			cout << "impossible\n";
		} else {
			cout << answer << endl;
		}
	}
	return 0;
}

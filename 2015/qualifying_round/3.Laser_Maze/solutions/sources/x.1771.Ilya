#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <sstream>
#include <cmath>
#include <cassert>
#include <queue>
#include <bitset>
#include <map>
#include <set>

#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef long long int64;
typedef pair<int, int> ii;
typedef vector<int> vi;

const int64 mod = 2184057LL;

vector<string> sa;
vector<vi> a, Dx, Dy;
vector<vector<vi> > d;
int n, m;

bool check(int t, int x, int y) {
  for (int dx = -1; dx <= 1; ++dx)
    for (int dy = -1; dy <= 1; ++dy) {
      if (dx == 0 && dy == 0) continue;
      if (dx != 0 && dy != 0) continue;
      int cx = x + dx, cy = y + dy;
      while (cx >= 0 && cx < n && cy >= 0 && cy < m && a[cx][cy] == 0) {
        cx += dx;
        cy += dy;
      }
      if (cx < 0 || cx >= n || cy < 0 || cy >= m) continue;
      if (a[cx][cy] != -1) continue;
      int odx = Dx[cx][cy];
      int ody = Dy[cx][cy];
      for (int i = 0; i < t; ++i) {
        int t = odx;
        odx = ody;
        ody = -t;
      }
      if (odx == -dx && ody == -dy) return false;
    }
  return true;
}

void solve() {
  cin >> n >> m;
  sa = vector<string>(n);
  a = vector<vi>(n, vi(m, 0));
  Dx = vector<vi>(n, vi(m, 0));
  Dy = vector<vi>(n, vi(m, 0));
  int sx = -1, sy = -1, fx = -1, fy = -1;
  for (int i = 0; i < n; ++i) {
    cin >> sa[i];
    for (int j = 0; j < m; ++j) {
      char c = sa[i][j];
      if (c == '.') a[i][j] = 0;
      else if (c == '#') a[i][j] = 1;
      else if (c == 'S') {
        a[i][j] = 0;
        sx = i, sy = j;
      } else if (c == 'G') {
        a[i][j] = 0;
        fx = i, fy = j;
      } else {
        a[i][j] = -1;
        if (c == '<') Dx[i][j] = 0, Dy[i][j] = -1;
        else if (c == '>') Dx[i][j] = 0, Dy[i][j] = +1;
        else if (c == '^') Dx[i][j] = -1, Dy[i][j] = 0;
        else if (c == 'v') Dx[i][j] = +1, Dy[i][j] = 0;
        else cerr << "Unknown char: " << c << "\n";
      }
    }
  }

  d = vector<vector<vi> >(4, vector<vi>(n, vi(m, 1000 * 1000 * 1000)));
  queue<pair<int, ii> > q;
  d[0][sx][sy] = 0;
  q.push(make_pair(0, ii(sx, sy)));
  while (!q.empty()) {
    int t = q.front().first;
    int x = q.front().second.first;
    int y = q.front().second.second;
    q.pop();
    for (int dx = -1; dx <= 1; ++dx) for (int dy = -1; dy <= 1; ++dy) {
      if (dx == 0 && dy == 0) continue;
      if (dx != 0 && dy != 0) continue;
      int X = x + dx, Y = y + dy;
      if (X < 0 || Y < 0 || X >= n || Y >= m) continue;
      if (d[(t + 1) % 4][X][Y] != 1000 * 1000 * 1000) continue;
      if (!check((t + 1) % 4, X, Y)) continue;
      d[(t + 1) % 4][X][Y] = d[t][x][y] + 1;
      q.push(make_pair((t + 1) % 4, ii(X, Y)));
    }
  }
  int res = min(min(d[0][fx][fy], d[1][fx][fy]), min(d[2][fx][fy], d[3][fx][fy]));
  if (res == 1000 * 1000 * 1000) cout << "impossible\n";
  else cout << res << "\n";
}

int main() {
  int nc;
  cin >> nc;
  for (int it = 0; it < nc; ++it) {
    cout << "Case #" << (it + 1) << ": ";
    solve();
  }
  return 0;
}

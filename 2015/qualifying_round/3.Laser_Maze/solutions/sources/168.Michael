import java.io.*;
import java.util.*;
import java.math.*;

import static java.lang.System.*;
import static java.lang.Math.*;

public class Laser {

    public static int[] dr = {-1, 0, 1, 0};
    public static int[] dc = {0, -1, 0, 1};

    public static void main(String... args) throws Exception {
        Scanner in = new Scanner(new File("laser_maze.txt"));
        PrintWriter output = new PrintWriter("laser_maze_output.txt");
        int loopy = in.nextInt();
        in.nextLine();
        for (int loopvar = 0; loopvar < loopy; loopvar++) {
            int rows = in.nextInt();
            int cols = in.nextInt();
            in.nextLine();
            char[][] read = new char[rows][cols];
            for (int i = 0; i < rows; i++) {
                read[i] = in.nextLine().trim().toCharArray();
            }

            int sr = 0, sc = 0, er = 0, ec = 0;

            int[][][] maze = new int[rows][cols][4];
            for (int r = 0; r < rows; r++) {
                for (int c = 0; c < cols; c++) {
                    char test = read[r][c];
                    if (test == 'S') {
                        sr = r;
                        sc = c;
                    }
                    if (test == 'G') {
                        er = r;
                        ec = c;
                    }
                    if ("^><v#".indexOf(test) != -1) {
                        for (int i = 0; i < 4; i++) {
                            maze[r][c][i] = -1;
                        }
                    }
                }
            }


            for (int r = 0; r < rows; r++) {
                for (int c = 0; c < cols; c++) {
                    int test = "^<v>".indexOf(read[r][c]);
                    if (test != -1) {
                        for (int i = 0; i < 4; i++) {
                            int rn = r + dr[i];
                            int cn = c + dc[i];
                            int offset = (7 + test - i) % 4;
                            while (rn >= 0 && cn >= 0 && rn < rows && cn < cols
                                    && maze[rn][cn][offset] != -1) {
                                maze[rn][cn][offset] = -2;
                                rn += dr[i];
                                cn += dc[i];
                            }

                        }
                    }
                }
            }

            maze[sr][sc][3] = 1; //IF THERE WAS A LASER BLAST HERE AND THEN WE OVERWRITE IT WE HAVE A PROBLEM
            boolean change = true;
            boolean success = false;
            int time = 3;
            int moves = 1;
            out: while (change) {
                change = false;
                int newtime = (time + 1) % 4;
                for (int r = 0; r < rows; r++) {
                    for (int c = 0; c < cols; c++) {
                        if (maze[r][c][time] == 1) {
                            for (int i = 0; i < 4; i++) {
                                int rn = r + dr[i];
                                int cn = c + dc[i];
                                if (rn >= 0 && cn >= 0 && rn < rows && cn < cols
                                        && maze[rn][cn][newtime] == 0) {
                                    maze[rn][cn][newtime] = 1;
                                    change = true;


                                    if (rn == er && cn == ec) {
                                        success = true;
                                        break out;
                                    }
                                }
                            }
                        }

                    }
                }

                time = newtime;
                moves++;
            }

            output.print("Case #" + (loopvar + 1) + ": ");

            if (success)
                output.println(moves);
            else
                output.println("impossible");


        }
        output.close();
    }
}
import java.io.*;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Task {
    final String IMP = "impossible";
    final int[] dx = {0, 1, 0, -1};
    final int[] dy = {1, 0, -1, 0};
    final int INF = 1_000_000_000;
    final int LEFT = 0;
    final int UP = 1;
    final int RIGHT = 2;
    final int DOWN = 3;
    final int EMPTY = 4;
    final int WALL = 5;
    int[][] field;
    int[][][] dist;
    int n;
    int m;

    boolean isInside(int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < m;
    }

    int getId(char c) {
        switch (c) {
            case '<':
                return LEFT;
            case '>':
                return RIGHT;
            case '^':
                return UP;
            case 'v':
                return DOWN;
            case '#':
                return WALL;
            default:
                return EMPTY;
        }
    }

    class Vertex {
        int row;
        int column;
        int mod;

        Vertex(int row, int column, int mod) {
            this.row = row;
            this.column = column;
            this.mod = mod;
        }
    }

    boolean isGood(int x, int y, int mod) {
        if (!isInside(x, y))
            return false;
        boolean ok = true;
        for (int dir = 0; dir < 4; dir++) {
            int nx = x;
            int ny = y;
            for (;;) {
                nx += dx[dir];
                ny += dy[dir];
                if (!isInside(nx, ny) || field[nx][ny] == WALL)
                    break;
                if (field[nx][ny] == EMPTY)
                    continue;
                int cur = (field[nx][ny] + mod) % 4;
                if (cur == dir)
                    ok = false;
                break;
            }
        }
        return ok;
    }

    public void solve(int testNumber, FastScanner in, PrintWriter out) throws IOException {
        out.print("Case #" + testNumber + ": ");
        n = in.nextInt();
        m = in.nextInt();
        int sX = 0;
        int sY = 0;
        int eX = 0;
        int eY = 0;
        field = new int[n][m];
        dist = new int[n][m][4];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                Arrays.fill(dist[i][j], INF);
        for (int i = 0; i < n; i++) {
            String s = in.next();
            for (int j = 0; j < m; j++) {
                field[i][j] = getId(s.charAt(j));
                if (s.charAt(j) == 'S') {
                    sX = i;
                    sY = j;
                } else if (s.charAt(j) == 'G') {
                    eX = i;
                    eY = j;
                }
            }
        }
        dist[sX][sY][0] = 0;
        Queue<Vertex> queue = new ArrayDeque<>();
        queue.add(new Vertex(sX, sY, 0));
        while (!queue.isEmpty()) {
            Vertex v = queue.poll();
            for (int dir = 0; dir < 4; dir++) {
                int nx = v.row + dx[dir];
                int ny = v.column + dy[dir];
                int mod = (v.mod + 1) % 4;
                if (!isGood(nx, ny, mod))
                    continue;
                if (dist[nx][ny][mod] > dist[v.row][v.column][v.mod] + 1) {
                    dist[nx][ny][mod] = dist[v.row][v.column][v.mod] + 1;
                    queue.add(new Vertex(nx, ny, mod));
                }
            }
        }
        int res = INF;
        for (int mod = 0; mod < 4; mod++)
            res = Math.min(res, dist[eX][eY][mod]);
        if (res == INF)
            out.println(IMP);
        else
            out.println(res);
    }


    public static void main(String[] args) throws IOException {
        FastScanner in = new FastScanner(new FileInputStream("input"));
        PrintWriter out = new PrintWriter(new FileOutputStream("output"));
        int t = in.nextInt();
        for (int i = 0; i < t; i++)
            new Task().solve(i + 1, in, out);
        in.close();
        out.close();
    }

    static class FastScanner {
        private StringTokenizer tokenizer;
        private BufferedReader reader;

        public FastScanner(InputStream inputStream) {
            reader = new BufferedReader(new InputStreamReader(inputStream));
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line;
                try {
                    line = reader.readLine();
                } catch (IOException e) {
                    return null;
                }
                if (line == null)
                    return null;
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                return null;
            }
            return line;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public void close() {
            try {
                reader.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }
}
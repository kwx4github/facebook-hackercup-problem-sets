#include <iostream>
#include <algorithm>
#include <string>
#include <utility>
#include <queue>
using namespace std;
#define mk make_pair
#define fi first
#define se second

const int dx[4][2]={0,-1,-1,0,0,1,1,0};

int f[110][110][4], n, m, sx, sy, tx, ty;
string s[110], ss[4][110];
bool inq[110][110][4];

bool update(int &x, int y){
  if (y!=-1)
    if (x==-1 || x>y){
      x=y;
      return 1;
    }
  return 0;
}

int getnext(char c, int step=1){
  char s[5]="<^>v";
  for(int i=0; i<4; i++)
    if (s[i]==c)
      return (i+step)%4;
  return -1;
}

bool valid(int x, int y){
  return x>=0 && x<n && y>=0 && y<m;
}

int main(){
  freopen("c.in","r",stdin);
  freopen("c.out","w",stdout);

  int T;
  cin>>T;
  
  for (int tt=1; tt<=T; tt++){
    cout<<"Case #"<<tt<<": ";

    cin>>n>>m;

    for (int i=0; i<n; i++){
      cin>>s[i];
      for (int j=0; j<m; j++)
        if (s[i][j]=='S')
          sx=i, sy=j, s[i][j]='.';
        else
          if (s[i][j]=='G')
            tx=i, ty=j, s[i][j]='.';
    }

    for (int t=0; t<4; t++){
      for (int i=0; i<n; i++) ss[t][i]=s[i];

      for (int i=0; i<n; i++){
        for (int j=0; j<m; j++){
          int k=getnext(ss[t][i][j], t);
          //cout<<k;
          if (k!=-1){
            int x=i, y=j;
            ss[t][x][y]='.';
            while(valid(x,y)){
              if (ss[t][x][y]=='#' || getnext(ss[t][x][y])!=-1 )
                break;
              ss[t][x][y]='#';
              x=x+dx[k][0];
              y=y+dx[k][1];
            }
          }
        }  
        //        cout<<endl;
      }        
      
      //      cout<<t<<": "<<endl;
      //for (int i=0; i<n; i++)
      //  cout<<ss[t][i]<<endl;
    }
    //    cout<<endl;

    memset(f,0xff,sizeof f);
    memset(inq,0,sizeof inq);

    queue<pair<pair<int,int>,int> > Q;

    Q.push(mk(mk(sx,sy),0));
    f[sx][sy][0]=0;
    inq[sx][sy][0]=1;

    while(!Q.empty()){
      int x=Q.front().fi.fi, y=Q.front().fi.se, t=Q.front().se;
      //cout<<x<<","<<y<<"  "<<t<<endl;
      for (int k=0; k<4; k++){
        int x1=x+dx[k][0], y1=y+dx[k][1], t1=(t+1)%4;
        if (!valid(x1,y1))
          continue;
        if (ss[t1][x1][y1]=='#')
          continue;
        if (update(f[x1][y1][t1], f[x][y][t]+1)){
          //cout<<"  ->"<<x1<<","<<y1<<"  "<<t1<<endl;
          if (!inq[x1][y1][t1])
            inq[x1][y1][t1]=1,
              Q.push(mk(mk(x1,y1),t1));
        }
      }
      inq[x][y][t]=0;
      Q.pop();
    }
    
    int answer=-1;
    for(int t=0; t<4; t++)
      update(answer, f[tx][ty][t]);
    if (answer==-1)
      cout<<"impossible"<<endl;
    else
      cout<<answer<<endl;
  }

  return 0;
}

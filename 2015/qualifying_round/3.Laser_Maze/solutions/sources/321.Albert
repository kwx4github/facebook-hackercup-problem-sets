#include <iostream>
#include <map>
#include <queue>

using namespace std;

#define TURN 4 

int DR[] = {-1, 0, 1, 0};
int DC[] = {0, 1, 0, -1};
map<char, int> LDIR;

bool inside(int r, int c, int R, int C) {
  if (r<0) return false;
  if (c<0) return false;
  if (r>=R) return false;
  if (c>=C) return false;
  return true;
}

bool isLaser(char ch) {
  if (ch=='^' || ch=='>' || ch=='v' || ch=='<') return true;
  return false;
}

int main() {
  LDIR['^']=0;
  LDIR['>']=1;
  LDIR['v']=2;
  LDIR['<']=3;
    
  int T;
  cin >> T;
  
  int SR, SC, GR, GC;
  
  for (int t=0; t<T; t++) {
    //cout << t << "------" << endl;
    int M, N; // height, width
    cin >> M >> N;
    
    char ** maze = new char*[M];
    for (int i=0; i<M; i++) {
      maze[i] = new char[N];
      for (int j=0; j<N; j++) {
        cin >> maze[i][j];
        if (maze[i][j]=='S') {
          SR=i;
          SC=j;
        }
        if (maze[i][j]=='G') {
          GR=i;
          GC=j;
        }
      }
    }
    
    // safe[turn%4][row][col]
    bool *** safe = new bool**[TURN];
    for (int r=0; r<TURN; r++) {
      safe[r] = new bool*[M];
      for (int i=0; i<M; i++) {
        safe[r][i] = new bool[N];
        for (int j=0; j<N; j++) {
          safe[r][i][j] = true;
        }
      }
    }
    
    for (int r=0; r<TURN; r++) {
      for (int i=0; i<M; i++) {
        for (int j=0; j<N; j++) {
          if (maze[i][j]=='#') safe[r][i][j] = false;
          if (isLaser(maze[i][j])) {
            safe[r][i][j] = false;
            int d = (LDIR[maze[i][j]]+r)%TURN;
            int li=i+DR[d];
            int lj=j+DC[d];
            while (inside(li, lj, M, N)) {
              if (maze[li][lj]=='#' || isLaser(maze[li][lj])) break;
              safe[r][li][lj] = false;
              li+=DR[d];
              lj+=DC[d];
            }
          }
        }
      }
    }
    
    
    /*
    for (int r=0; r<TURN; r++) {
      for (int i=0; i<M; i++) {
        for (int j=0; j<N; j++) {
          cout << (safe[r][i][j] ? '.' : '#');
        }
        cout << endl;
      }
      cout << endl;
    }
    */
    
    // dist[turn%4][row][col]
    int *** dist = new int**[TURN];
    for (int r=0; r<TURN; r++) {
      dist[r] = new int*[M];
      for (int i=0; i<M; i++) {
        dist[r][i] = new int[N];
        for (int j=0; j<N; j++) {
          dist[r][i][j] = -1;
        }
      }
    }
    
    queue<pair<int, pair<int, int> > > Q;
    dist[0][SR][SC]=0;
    Q.push(make_pair(0, make_pair(SR,SC)));
    while (!Q.empty()) {
      pair<int, pair<int, int> > pos = Q.front();
      Q.pop();
      int ndist = dist[pos.first][pos.second.first][pos.second.second]+1;
      int nround = (pos.first+1)%TURN;
      for (int r=0; r<TURN; r++) {
        int nr = pos.second.first + DR[r];
        int nc = pos.second.second + DC[r];
        if (inside(nr,nc,M,N) && safe[nround][nr][nc] && (ndist<dist[nround][nr][nc] || dist[nround][nr][nc]==-1)) {
          dist[nround][nr][nc] = ndist;
          Q.push(make_pair(nround, make_pair(nr,nc)));
        }
      }
    }
    
    int mindist = -1;
    for (int r=0; r<TURN; r++) {
      if (mindist==-1 || (dist[r][GR][GC]!=-1 && dist[r][GR][GC]<mindist)) mindist = dist[r][GR][GC];
    }
    cout << "Case #" << t+1 << ": ";
    if (mindist>-1) cout << mindist;
    else cout << "impossible";
    cout << endl;
    
    
    
    
    for (int i=0; i<M; i++) {
      delete[] maze[i];
    }
    delete[] maze;
    
    for (int r=0; r<TURN; r++) {
      for (int i=0; i<M; i++) {
        delete[] safe[r][i];
      }
      delete[] safe[r];
    }
    delete[] safe;
    
    for (int r=0; r<TURN; r++) {
      for (int i=0; i<M; i++) {
        delete[] dist[r][i];
      }
      delete[] dist[r];
    }
    delete[] dist;
    
  }
}
#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int H[100][100];
int A[100][100];
int B[100][100];
int C[100][100];
int D[100][100];
int M[100][100];

void h(int m,int n,int G_x, int G_y) {
	cout<<"gx:"<<G_x<<"gy:"<<G_y<<endl;
	queue< vector <int> > q;
	for (int i=0;i<m;i++) {
		for (int j=0;j<n;j++) {
			H[i][j]=-1;
		}
	}
	H[G_x][G_y]=0;
	vector<int> v(2,0);
	int x,y;
	v[0]=G_x; v[1]=G_y;
	q.push(v);
	while(!q.empty()) {
		v = q.front();
		q.pop();
		x = v[0]; y = v[1];
		if (x+1<m && H[x+1][y]==-1) {
			H[x+1][y] = H[x][y]+1;
			v[0]=x+1;v[1]=y;
			q.push(v);
		}
		if (y+1<n && H[x][y+1]==-1) {
			H[x][y+1] = H[x][y]+1;
			v[0]=x; v[1]=y+1;
			q.push(v);
		}
		if (x-1>-1 && H[x-1][y]==-1) {
			H[x-1][y] = H[x][y]+1;
			v[0]=x-1; v[1]=y;
			q.push(v);
		}
		if (y-1>-1 && H[x][y-1]==-1) {
			H[x][y-1]=H[x][y]+1;
			v[0]=x; v[1]=y-1;
			q.push(v);
		}
	}
}

void gen_ABCD(int m, int n) {
	int x,y;
	for (int i=0;i<m;i++) {
		for (int j=0;j<n;j++) {
			if (M[i][j]==1) {
				M[i][j]=-1;
				A[i][j]=-1; B[i][j]=-1; C[i][j]=-1; D[i][j]=-1;
				x=i; y=j;
				while (x<m){if (A[x+1][y]!=-1) A[++x][y]=-2; else { break;}} 
				x=i;y=j;
				while (y>-1) { if (B[x][y-1]!=-1) B[x][--y]=-2; else { break;}}
				x=i;y=j;
				while (x>-1) {if (C[x-1][y]!=-1) C[--x][y]=-2; else { break;}}
				x=i;y=j;
				while (y<n) {if (D[x][y+1]!=-1) D[x][++y]=-2; else { break;}}
			}
			
			if (M[i][j]==2) {
				M[i][j]=-1;
				A[i][j]=-1; B[i][j]=-1; C[i][j]=-1; D[i][j]=-1;
				x=i;y=j;
				while (x<m){if (D[x+1][y]!=-1) D[++x][y]=-2; else { break;}} 
				x=i;y=j;
				while (y>-1) { if (A[x][y-1]!=-1) A[x][--y]=-2; else { break;}}
				x=i;y=j;
				while (x>-1) {if (B[x-1][y]!=-1) B[--x][y]=-2; else { break;}}
				x=i;y=j;
				while (y<n) {if (C[x][y+1]!=-1) C[x][++y]=-2; else { break;}}
			}
			if (M[i][j]==3) {
				M[i][j]=-1;
				A[i][j]=-1; B[i][j]=-1; C[i][j]=-1; D[i][j]=-1;
				x=i;y=j;
				while (x<m){if (C[x+1][y]!=-1) C[++x][y]=-2; else { break;}} 
				x=i;y=j;
				while (y>-1) { if (D[x][y-1]!=-1) D[x][--y]=-2; else { break;}}
				x=i;y=j;
				while (x>-1) {if (A[x-1][y]!=-1) A[--x][y]=-2; else { break;}}
				x=i;y=j;
				while (y<n) {if (B[x][y+1]!=-1) B[x][++y]=-2; else { break;}}
			}
			if (M[i][j]==4) {
				M[i][j]=-1;
				A[i][j]=-1; B[i][j]=-1; C[i][j]=-1; D[i][j]=-1;
				x=i;y=j;
				while (x<m){if (B[x+1][y]!=-1) B[++x][y]=-2; else { break;}}
				x=i;y=j;
				while (y>-1) { if (C[x][y-1]!=-1) C[x][--y]=-2; else { break;}}
				x=i;y=j;
				while (x>-1) {if (D[x-1][y]!=-1) D[--x][y]=-2; else { break;}}
				x=i;y=j;
				while (y<n) {if (A[x][y+1]!=-1) A[x][++y]=-2; else { break;}}
			}
		}
	}
}

/*void move(int m,int n,int sx,int sy, int gx, int gy) {
	//vector<int> last_at_A(2,-1),last_at_B(2,-1),last_at_C(2,-1),last_at_D(2,-1);
	int steps = 0,f,next_f,g;
	M[sx][sy]=0;
	queue<vector<int> > q;
	vector<int> v(2,0);
	vector<vector<int> > delta(4,vector<int>);
	delta[0].push_back(1); delta[0].push_back(0);
	delta[1].push_back(0); delta[1].push_back(1);
	delta[2].push_back(-1); delta[2].push_back(0);
	delta[3].push_back(0); delta[3].push_back(-1);
	int x,y;
	v[0]=sx; v[1]=sy; //last_at_D = v;
	q.push(v); int found = 0,resign=0;
	while (!found) {
		if (open.empty()) {resign = 1; break;}
		vector<vector<int> > temp;  //remember tp delete temp at the end
		while(!q.empty()) {
			v = q.front(); q.pop(); x=v[0]; y = v[1];
			f = M[x][y]+H[x][y];
			for (int d=0;d<4;d++) {
				if (0<=(x+delta[d][0]) && (x+delta[d][0]<m) && 0<=(y+delta[d][1]) && (y+delta[d][1]<n)){
					switch(steps%4) {
						case 0:
							if (A[x+delta[d][0]][y+delta[d][1]]>=0) {
								v[0]= x+delta[d][0];
								v[1]= y+delta[d][1];
							}
							break;
						case 1:
							if (B[x+delta[d][0]][y+delta[d][1]]>=0) {
								v[0]= x+delta[d][0];
								v[1]= y+delta[d][1];
							}
							break;
						case 2:
							if (C[x+delta[d][0]][y+delta[d][1]]>=0) {
								v[0]= x+delta[d][0];
								v[1]= y+delta[d][1];
							}
							break;
						case 3:
							if (D[x+delta[d][0]][y+delta[d][1]]>=0) {
								v[0]= x+delta[d][0];
								v[1]= y+delta[d][1];
							}
							break;
					}
					int flag = 0;
					for (int i=0;i<temp.size();i++) {	//check size of temp
						if (temp[i]==v) {flag = 1; break;}
					}if (!flag) temp.push_back(v);
				}
			}
			g = steps+1;
			new_f = steps+H[temp[0][0]][temp[0][1]];
			for (int i=1;i<temp.size();i++) {
				if ((g+H[temp[i][0]][temp[i][1]])<new_f) new_f=steps+H[temp[0][0]][temp[0][1]];
			}

			if (new_f<f) {
				for (int i=0;i<temp.size();i++) {
					if ((g+H[temp[i][0]][temp[i][1]])==new_f) {
						if ((g+H[temp[i][0]][temp[i][1]]))
					}
				}
			}
		} 
		
	}
}*/

int main() {
	//while taking input
	//if value = '#' A[i][j] = Bi,j = C[i,j] =D[i][j]=M[i][j] =-1
	//if value = '>' A[i][j] = .. D[i,j]=-1 && M[i,j]=1;
	//if value = '.' A[i,j] = .. M[i,j] = 0
	int T,m,n,gx,gy,sx,sy;
	cin>>T;
	for (int t=0;t<T;t++) {
		cin>>m>>n;
		string s;
		for (int i=0;i<m;i++) {
			cin>>s;
			for (int j=0;j<n;j++) {
				switch(s[j]) {
					case '.':
						A[i][j]=0;
						B[i][j]=0;
						C[i][j]=0;
						D[i][j]=0;
						M[i][j]=0;
						break;
					case 'S':
						sx = i; sy = j;
						A[i][j]=0;
						B[i][j]=0;
						C[i][j]=0;
						D[i][j]=0;
						M[i][j]=0;
						break;
					case 'G':
						gx=i; gy=j;
						A[i][j]=0;
						B[i][j]=0;
						C[i][j]=0;
						D[i][j]=0;
						M[i][j]=0;
						break;
					case '#':
						A[i][j]=-1;
						B[i][j]=-1;
						C[i][j]=-1;
						D[i][j]=-1;
						M[i][j]=-1;
						break;
					case '>':
						A[i][j]=-1;
						B[i][j]=-1;
						C[i][j]=-1;
						D[i][j]=-1;
						M[i][j]=1;
						break;
					case 'V':
						A[i][j]=-1;
						B[i][j]=-1;
						C[i][j]=-1;
						D[i][j]=-1;
						M[i][j]=2;
						break;
					case '<':
						A[i][j]=-1;
						B[i][j]=-1;
						C[i][j]=-1;
						D[i][j]=-1;
						M[i][j]=3;
						break;
					case '^':
						A[i][j]=-1;
						B[i][j]=-1;
						C[i][j]=-1;
						D[i][j]=-1;
						M[i][j]=4;
						break;
				}
			}
		}
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<M[i][j]<<" ";
			}
			cout<<"\n";
		}
		cout<<"HABCDM\n";
		h(m,n,gx,gy);
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<H[i][j]<<" ";
			}
			cout<<"\n";
		}cout<<"\n";
		gen_ABCD(m,n);
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<A[i][j]<<" ";
			}
			cout<<"\n";
		}cout<<"\n";
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<B[i][j]<<" ";
			}
			cout<<"\n";
		}cout<<"\n";
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<C[i][j]<<" ";
			}
			cout<<"\n";
		}cout<<"\n";
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<D[i][j]<<" ";
			}
			cout<<"\n";
		}
		cout<<"\n";
		for (int i=0;i<m;i++) {
			for (int j=0;j<n;j++) {
				cout<<M[i][j]<<" ";
			}
			cout<<"\n";
		}
	}
	return 0;
}
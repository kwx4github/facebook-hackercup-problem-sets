#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <string>
#include <queue>

#define mp make_pair
#define pb push_back

#define mod 1000000007

using namespace std;

char str[105];
bool dp[105][105][5], tmp[105][105], tmpLaser[105][105];
int n, m;

inline void RotateLaser(int location, int direction, int level)
{
    int x = location/1000;
    int y = location%1000;
    /* Up */
    if(direction == 1)
    {
        for(int i=x; i>0; i--) 
        {
            if(i!=x && (tmp[i][y] == true || tmpLaser[i][y] == true)) break;
            dp[i][y][level] = true; 
        }   
    }
    /* Right */
    if(direction == 2)
    {
        for(int i=y; i<=m; i++)
        {
            if(i!=y && (tmp[x][i] == true || tmpLaser[x][i] == true)) break;
            dp[x][i][level] = true;
        }    
    }
    /* Down */
    if(direction == 3)
    {
        for(int i=x; i<=n; i++)
        {
            if(i!=x && (tmp[i][y] == true || tmpLaser[i][y] == true)) break;
            dp[i][y][level] = true;    
        }
    }
    /* Left */
    if(direction == 4)
    {
        for(int i=y; i>0; i--)
        {
            if(i!=y && (tmp[x][i] == true || tmpLaser[x][i] == true)) break;
            dp[x][i][level] = true;
        }
    }    
}

int path[105][105][5];
queue <pair<int,int> > Q;
int laser[105*105], laserX[105*105];

int main()
{
    
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    
    int T; scanf("%d",&T); int lvl = 0;
    while(T--)
    {
        scanf("%d%d",&n,&m);
        
        memset(dp,false,sizeof(dp));
        memset(tmp, false, sizeof(tmp));
        memset(tmpLaser, false, sizeof(tmpLaser));
        memset(path, -1, sizeof(path));
        
        int start = 0;
        int finish = 0;
        int r = 0;
        
        for(int i=1; i<=n; i++)
        {
            scanf("%s",str);
            for(int j=0; j<m; j++)
            {
                if(str[j] == 'S') start = i*1000 + j + 1;
                if(str[j] == '#') tmp[i][j+1] = true;
                if(str[j] == 'G') finish = i*1000 + j + 1;
                if(str[j] == '^'){ tmpLaser[i][j+1] = true; laser[r] = i*1000 + j + 1; laserX[r] = 1; r++; }
                if(str[j] == '>'){ tmpLaser[i][j+1] = true; laser[r] = i*1000 + j + 1; laserX[r] = 2; r++; }
                if(str[j] == 'v'){ tmpLaser[i][j+1] = true; laser[r] = i*1000 + j + 1; laserX[r] = 3; r++; }
                if(str[j] == '<'){ tmpLaser[i][j+1] = true; laser[r] = i*1000 + j + 1; laserX[r] = 4; r++; }
            }
        }
        for(int i=0; i<r; i++)
            RotateLaser(laser[i],laserX[i],0);  
        for(int i=0; i<r; i++)
            RotateLaser(laser[i],((laserX[i]+1)%4 == 0) ? 4: (laserX[i]+1)%4, 1);  
        for(int i=0; i<r; i++)
            RotateLaser(laser[i],((laserX[i]+2)%4 == 0) ? 4: (laserX[i]+2)%4, 2);  
        for(int i=0; i<r; i++)
            RotateLaser(laser[i],((laserX[i]+3)%4 == 0) ? 4: (laserX[i]+3)%4, 3); 
        Q.push(mp(start,0));
        path[start/1000][start%1000][0] = 0;
        int cntAnswer = 0;
        int mn = -1;
        
        while(!Q.empty())
        {
            int tp = Q.front().first;
            int x = tp/1000;
            int y = tp%1000;
            int cnt = Q.front().second;
            if(tp == finish)
            {
                cntAnswer++;
                if(cntAnswer == 1) mn = cnt;
                else mn = min(mn,cnt);        
            }
            Q.pop();
            
            /* Up */
            if(x>1 && tmp[x-1][y] == false && dp[x-1][y][(cnt+1)%4] == false)
            {
                if(path[x-1][y][(cnt+1)%4] == -1)
                {
                   path[x-1][y][(cnt+1)%4] = cnt + 1;
                   Q.push(mp((x-1)*1000 + y, cnt + 1));     
                }            
            }
            /* Right */
            if(y<m && tmp[x][y+1] == false && dp[x][y+1][(cnt+1)%4] == false)
            {
                if(path[x][y+1][(cnt+1)%4] == -1)
                {
                   path[x][y+1][(cnt+1)%4] = cnt + 1;
                   Q.push(mp(x*1000 + y + 1, cnt + 1));     
                }            
            }
            /* Down */
            if(x<n && tmp[x+1][y] == false && dp[x+1][y][(cnt+1)%4] == false)
            {
                if(path[x+1][y][(cnt+1)%4] == -1)
                {
                   path[x+1][y][(cnt+1)%4] = cnt + 1;
                   Q.push(mp((x+1)*1000 + y, cnt + 1));     
                }            
            }
            /* Left */
            if(y>1 && tmp[x][y-1] == false && dp[x][y-1][(cnt+1)%4] == false)
            {
                if(path[x][y-1][(cnt+1)%4] == -1)
                {
                   path[x][y-1][(cnt+1)%4] = cnt + 1;
                   Q.push(mp(x*1000 + y - 1, cnt + 1));     
                }            
            }
        }
        if(mn == -1) printf("Case #%d: impossible\n",++lvl);
        else printf("Case #%d: %d\n",++lvl, mn);
    }
    return 0;    
}

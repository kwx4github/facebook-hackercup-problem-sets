#include<bits/stdc++.h>
using namespace std;

#define mp make_pair
#define fi first
#define se second
#define INF 0x3f3f3f3f
#define MAX 105

struct Node
{
	int i, j, rot;
	Node(){};
	Node(int _i, int _j, int _rot) : i(_i), j(_j), rot(_rot) {}
};

int dist[4][MAX][MAX];
char g[MAX][MAX];
bool canShoot[4][MAX][MAX];
Node laser[MAX*MAX];
int t, n, m;

const int neigh[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
inline bool can(int i, int j) { return (i>=0 && i<n && j>=0 && j<m); }

int main()
{
	scanf("%d", &t);
	for(int tc=1; tc<=t; ++tc)
	{
		int nlaser = 0;
		pair<int, int> s, t;

		scanf("%d %d", &n, &m);
		for(int i=0; i<n; ++i)
		{
			scanf(" %s ", g[i]);
			for(int j=0; j<m; ++j)
			{
				if(g[i][j] == 'S') s = mp(i, j), g[i][j] = '.';
				else if(g[i][j] == 'G') t = mp(i, j), g[i][j] = '.';
				else if(g[i][j] == '<') laser[nlaser++] = Node(i, j, 0);
				else if(g[i][j] == '^') laser[nlaser++] = Node(i, j, 1);
				else if(g[i][j] == '>') laser[nlaser++] = Node(i, j, 2);
				else if(g[i][j] == 'v') laser[nlaser++] = Node(i, j, 3);
			}
		}

		for(int rot=0; rot<4; ++rot)
			for(int i=0; i<n; ++i)
				for(int j=0; j<m; ++j)
					canShoot[rot][i][j] = 0;

		for(int k=0; k<nlaser; ++k)
			for(int rot=0; rot<4; ++rot)
			{
				if((rot + laser[k].rot)%4 == 0)
				{
					for(int j=laser[k].j-1; j>=0 && g[laser[k].i][j] == '.'; --j)
						canShoot[rot][laser[k].i][j] = 1;
				}
				else if((rot + laser[k].rot)%4 == 1)
				{
					for(int i=laser[k].i-1; i>=0 && g[i][laser[k].j] == '.'; --i)
						canShoot[rot][i][laser[k].j] = 1;
				}
				else if((rot + laser[k].rot)%4 == 2)
				{
					for(int j=laser[k].j+1; j<m && g[laser[k].i][j] == '.'; ++j)
						canShoot[rot][laser[k].i][j] = 1;
				}
				else
				{
					for(int i=laser[k].i+1; i<n && g[i][laser[k].j] == '.'; ++i)
						canShoot[rot][i][laser[k].j] = 1;
				}
			}
		
		for(int rot=0; rot<4; ++rot)
			for(int i=0; i<n; ++i)
				for(int j=0; j<m; ++j)
					dist[rot][i][j] = INF;
		
		/*for(int rot=0; rot<4; ++rot)
		{
			printf("rot= %d\n", rot);
			for(int i=0; i<n; ++i, puts(""))
				for(int j=0; j<m; ++j)
					printf("%d", canShoot[rot][i][j]);
		}*/

		printf("Case #%d: ", tc);
		
		bool solved = 0;
		Node snode(s.fi, s.se, 0);
		queue<Node> q; q.push(snode);
		dist[snode.rot][snode.i][snode.j] = 0;
		while(!q.empty())
		{
			Node u = q.front(); q.pop();
			Node v = u; v.rot = (u.rot+1)%4;
			
			if(u.i == t.fi && u.j == t.se)
			{
				printf("%d\n", dist[u.rot][u.i][u.j]);
				solved = 1;
				break;
			}
			
			for(int k=0; k<4; ++k)
			{
				v.i = u.i + neigh[k][0];
				v.j = u.j + neigh[k][1];
				if(can(v.i, v.j) && g[v.i][v.j] == '.' && !canShoot[v.rot][v.i][v.j] && dist[v.rot][v.i][v.j] == INF)
					q.push(v), dist[v.rot][v.i][v.j] = dist[u.rot][u.i][u.j] + 1;
			}
		}
		
		if(!solved) puts("impossible");
	}

	return 0;
}

#include <iostream>
#include <queue>
#include <set>

using namespace std;

struct State {
  int x;
  int y;
  int t;
};

bool operator<(const State &left, const State &right) {
  if (left.x != right.x) {
    return left.x < right.x;
  } else if (left.y != right.y) {
    return left.y < right.y;
  } else {
    return left.t < right.t;
  }
}

int M;
int N;
char maze[4][102][102];
int start_x;
int start_y;
int goal_x;
int goal_y;
set<State> done;

string solve() {
  std::fill((char *)maze, (char *)maze + 4 * 102 * 102, '#');
  done.clear();
  cin >> M >> N;
  for (int y = 0; y < M; y++) {
    for (int x = 0; x < N; x++) {
      char c;
      cin >> c;
      if (c == 'S') {
        start_x = x + 1;
        start_y = y + 1;
        c = '.';
      } else if (c == 'G') {
        goal_x = x + 1;
        goal_y = y + 1;
        c = '.';
      }
      for (int i = 0; i < 4; i++) {
        maze[i][y + 1][x + 1] = c;
      }
    }
  }
  for (int y = 1; y <= M; y++) {
    for (int x = 1; x <= N; x++) {
      char c = maze[0][y][x];
      if (c == '<' || c == '>' || c == '^' || c == 'v') {
        int i = 0;
        if (c == '<') {
        } else if (c == '>') {
          i = 2;
        } else if (c == '^') {
          i = 3;
        } else if (c == 'v') {
          i = 1;
        }
        int x0 = x - 1;
        int y0 = y;
        while (x0 > 0 && maze[i % 4][y0][x0] == '.') {
          maze[i % 4][y0][x0] = '*';
          x0--;
        }
        i++;
        int x1 = x;
        int y1 = y - 1;
        while (y1 > 0 && maze[i % 4][y1][x1] == '.') {
          maze[i % 4][y1][x1] = '*';
          y1--;
        }
        i++;
        int x2 = x + 1;
        int y2 = y;
        while (x2 <= N && maze[i % 4][y2][x2] == '.') {
          maze[i % 4][y2][x2] = '*';
          x2++;
        }
        i++;
        int x3 = x;
        int y3 = y + 1;
        while (y3 <= M && maze[i % 4][y3][x3] == '.') {
          maze[i % 4][y3][x3] = '*';
          y3++;
        }
      }
    }
  }
  queue<State> q;
  q.push(State({start_x, start_y, 0}));
  while (!q.empty()) {
    State s = q.front(); q.pop();
    int t = s.t;
    s.t = t % 4;
    if (done.find(s) != done.end()) {
      continue;
    }
    done.insert(s);
    if (s.x == goal_x && s.y == goal_y) {
      return to_string(t);
    }
    int dx[] = {1, 0, -1, 0};
    int dy[] = {0, 1, 0, -1};
    t = t + 1;
    for (int i = 0; i < 4; i++) {
      int x = s.x + dx[i];
      int y = s.y + dy[i];
      if (maze[t % 4][y][x] == '.') {
        q.push(State({x, y, t}));
      }
    }
  }
  return "imposible";
}

int main() {
  int T;
  cin >> T;
  for (int i = 0; i < T; i++) {
    std::cout << "Case #" << i + 1 << ": " << solve() << std::endl;
  }
  return 0;
}


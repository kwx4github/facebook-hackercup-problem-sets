#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <climits>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <bitset>
#include <utility>
#include <algorithm>

#define forn(i, n) for (int i = 0; i < int(n); i++)

typedef long long   li;
typedef long double ld;

const int N = 1000;
const int INF = 1000000000;
const ld EPS = 1E-10;

using namespace std;

int dx[] = {-1, 0, 1,  0};
int dy[] = { 0, 1, 0, -1};

int f[N][N];
int d[N][N][4];

pair<int,int> s, t;

int main(int argc, char* argv[])
{
    freopen("input.txt", "rt", stdin);

    int testCases;
    cin >> testCases;

    forn(testCase, testCases)
    {
        int n, m;
        cin >> n >> m;

        forn(i, n + 2)
            forn(j, m + 2)
                f[i][j] = -1;

        forn(i, n)
        {
            string line;
            cin >> line;
            forn(j, m)
            {
                if (line[j] == 'S')
                    s = make_pair(i, j);
                if (line[j] == 'G')
                    t = make_pair(i, j);
                if (line[j] == '#')
                    f[i][j] = -2;
                if (line[j] == '^')
                    f[i][j] = 0;
                if (line[j] == '>')
                    f[i][j] = 1;
                if (line[j] == 'v')
                    f[i][j] = 2;
                if (line[j] == '<')
                    f[i][j] = 3;
            }
        }

        forn(i, n)
            forn(j, m)
                forn(k, 4)
                    d[i][j][k] = INF;
        d[s.first][s.second][0] = 0;
        queue<pair<pair<int,int>,int>> q;
        q.push(make_pair(s, 0));

        while (!q.empty())
        {
            pair<pair<int,int>,int> rt = q.front();
            q.pop();

            pair<int,int> r(rt.first);
            int t(rt.second);

            forn(i, 4)
            {
                pair<int,int> nr(
                    r.first + dx[i],
                    r.second + dy[i]                    
                );
                int nt = (t + 1) % 4;

                pair<pair<int,int>,int> nrt(nr, nt);

                if (nr.first >= 0 && nr.first < n && nr.second >= 0 && nr.second < m
                        && f[nr.first][nr.second] == -1
                        && d[nr.first][nr.second][nt] > INF / 2
                )
                {
                    bool ok = true;

                    forn(x, n)
                        forn(y, m)
                        {
                            if (f[x][y] >= 0 && f[x][y] < 4)
                            {
                                int DD = (f[x][y] + nt) % 4;
                                int DX = dx[DD];
                                int DY = dy[DD];

                                pair<int,int> c(x + DX, y + DY);
                                while (
                                    c.first >= 0 && c.first < n && c.second >= 0 && c.second < m
                                    &&
                                    f[c.first][c.second] == -1
                                )
                                {
                                    if (c == nr)
                                        ok = false;
                                    c.first += DX;
                                    c.second += DY;
                                }
                            }
                        }

                    if (ok)
                    {
                        d[nr.first][nr.second][nt] = d[r.first][r.second][t] + 1;
                        q.push(nrt);
                    }
                }
            }
        }

        int mind = INF;
        forn(k, 4)
            mind = min(mind, d[t.first][t.second][k]);

        if (mind > INF / 2)
            cout << "Case #" << testCase + 1 << ": impossible" << endl;
        else
            cout << "Case #" << testCase + 1 << ": " << mind << endl;
    }

    return 0;
}

#include<iostream>
#include<queue>
#include<fstream>
using namespace std;
struct node{
int r, c, d;
void init(int _r,int _c,int _d){
    r=_r,c=_c,d=_d;
}
};
int arr[101][101],t,n,m;
bool check(int i,int j,int d){

for(int k=j-1;k>=1;k--){
    if(arr[i][k]==5)break;
    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==1)return false;
    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=1)break;

}
for(int k=j+1;k<=m;k++){
    if(arr[i][k]==5)break;
    else if(arr[i][k]!=4&&(arr[i][k]+d)%4==3)return false;
    else if(arr[i][k]!=4&&(arr[i][k]+d)%4!=3)break;

}
for(int k=i+1;k<=n;k++){
    if(arr[k][j]==5)break;
    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==0)return false;
    else if(arr[k][j]!=4&&(arr[k][j]+d)%4!=0)break;

}
for(int k=i-1;k>=1;k--){
    if(arr[k][j]==5)break;
    else if(arr[k][j]!=4&&(arr[k][j]+d)%4==2)return false;
    else if(arr[k][j]!=4&&(arr[k][j]+d)%4!=2)break;

}
return true;
}
int main(){
char c;
cin>>t;
for(int p=1;p<=t;p++){
    cin>>n>>m;
    int sr,sc,er,ec;
    bool been[101][101][4];

    int dist[101][101];
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
                for(int k=0;k<4;k++)been[i][j][k]=false;
            cin>>c;
            dist[i][j]=-1;
            if(c=='S'){
                sr=i,sc=j;
                dist[i][j]=0;
                been[i][j][0]=true;
            }
            if(c=='G'){
                er=i,ec=j;
            }
            if(c=='S'||c=='G'||c=='.')arr[i][j]=4;
            else if(c=='#')arr[i][j]=5;
            else if(c=='^')arr[i][j]=0;
            else if(c=='>')arr[i][j]=1;
            else if(c=='v')arr[i][j]=2;
            else if(c=='<')arr[i][j]=3;

        }
    }
    queue< node > q;
    node u,v,s;
    s.init(sr,sc,0);
    q.push(s);
    while(!q.empty()){
        u=q.front();
        q.pop();
        int i=u.r,j=u.c,d=u.d+1;
        bool flag=true;
        if(i>1&&arr[i-1][j]==4&&been[i-1][j][d%4]==false){

                flag=check(i-1,j,d);
                if(flag==true){
                    v.init(i-1,j,d);
                    q.push(v);
                    been[i-1][j][d%4]=true;
                    if(dist[i-1][j]>d||dist[i-1][j]==-1)dist[i-1][j]=d;
                }
        }
        if(i<n&&arr[i+1][j]==4&&been[i+1][j][d%4]==false){

                flag=check(i+1,j,d);
                if(flag==true){
                    v.init(i+1,j,d);
                    q.push(v);
                    been[i+1][j][d%4]=true;
                    if(dist[i+1][j]>d||dist[i+1][j]==-1)dist[i+1][j]=d;
                }
        }
        if(j>1&&arr[i][j-1]==4&&been[i][j-1][d%4]==false){

                flag=check(i,j-1,d);
                if(flag==true){
                    v.init(i,j-1,d);
                    q.push(v);
                    been[i][j-1][d%4]=true;
                    if(dist[i][j-1]>d||dist[i][j-1]==-1)dist[i][j-1]=d;
                }
        }
        if(j<m&&arr[i][j+1]==4&&been[i][j+1][d%4]==false){

                flag=check(i,j+1,d);
                if(flag==true){
                    v.init(i,j+1,d);
                    q.push(v);
                    been[i][j+1][d%4]=true;
                    if(dist[i][j+1]>d||dist[i][j+1]==-1)dist[i][j+1]=d;
                }
        }

    }
      cout<<"Case #"<<p<<": ";
    if(dist[er][ec]==-1)cout<<"impossible"<<endl;
    else cout<<dist[er][ec]<<endl;


}
return 0;

}

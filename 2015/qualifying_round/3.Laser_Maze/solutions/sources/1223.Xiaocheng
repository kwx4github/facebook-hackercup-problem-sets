#include <iostream>
#include <algorithm>
#include <queue>
#include <cstring>
using namespace std;

const int dir[4][2] = {
	{-1, 0},
	{0, 1},
	{1, 0},
	{0, -1}
};

const char* chdir = "^>v<";

char maze[110][110];

bool valid(int x, int y, int t)
{
	if (maze[x][y] != '.' && maze[x][y] != 'S' && maze[x][y]!= 'G')
		return false;
	
	for (int d = 0; d < 4; d++)
	{
		for (int x2 = x + dir[d][0], y2 = y + dir[d][1]; maze[x2][y2] != '#'; x2 += dir[d][0], y2 += dir[d][1])
		{
			if (maze[x2][y2] == chdir[((d ^ 2) - t + 4) & 3])
				return false;
			if (maze[x2][y2] != '.' && maze[x2][y2] != 'S' && maze[x2][y2] != 'G')
				break;
		}
	}

	return true;
}

int dist[110][110][4];

queue<pair<pair<int, int>, int> > que;

int main()
{
	int casen;
	cin >> casen;
	for (int casei = 1; casei <= casen; casei++)
	{
		int h, w;
		cin >> h >> w;
		memset(maze, '#', sizeof(maze));
		memset(dist, 127, sizeof(dist));

		for (int i = 1; i <= h; i++)
			for (int j = 1; j <= w; j++)
			{
				cin >> maze[i][j];
				if (maze[i][j] == 'S')
				{
					dist[i][j][0] = 0;
					que.push(make_pair(make_pair(i, j), 0));
				}
			}
		
		int ans = -1;

		while (que.size() && ans == -1)
		{
			int x = que.front().first.first;
			int y = que.front().first.second;
			int t = que.front().second;
			que.pop();

			for (int d = 0; d < 4; d++)
			{
				int x2 = x + dir[d][0];
				int y2 = y + dir[d][1];
				int t2 = (t + 1) & 3;

				if (valid(x2, y2, t2) && dist[x][y][t] + 1 < dist[x2][y2][t2])
				{
					dist[x2][y2][t2] = dist[x][y][t] + 1;
					que.push(make_pair(make_pair(x2, y2), t2));

					if (maze[x2][y2] == 'G')
					{
						ans = dist[x2][y2][t2];
						break;
					}
				}

			}
		}

		cout << "Case #" << casei << ": ";
		if (ans >= 0)
			cout << ans << endl;
		else
			cout << "impossible" << endl;

		while (que.size())
			que.pop();
	}

	return 0;
}


#include <iostream>
#include <cstring>
#include <utility>
#include <queue>
#include <vector>

using namespace std;

int main(void){
  int t,i,j,k,m,n,p,d,step,sj,sk,s;
  vector<vector<vector<bool> > > laser;
  vector<vector<char> > maze;
  vector<vector<int> > visit;
  queue<pair<int,int> > q;
  pair<int,int> tmp;
  cin>>t;

  for(i=1; i<=t; i++){
    cout << "Case #" << i << ": ";
	cin>>m>>n;
	laser.clear();
	maze.clear();
	visit.clear();
	for (j=0; j<m; j++){
	  vector<char> v(n);
	  vector<int> v1(n,(m+n)*(m+n));
	  vector<vector<bool> > v2;
	  for (k=0; k<n; k++){
	    cin>>v[k];
		vector<bool> v3(4,false);
		v2.push_back(v3);
	  }
	  maze.push_back(v);
	  visit.push_back(v1);
	  laser.push_back(v2);
	}
	for (j=0; j<m; j++){
	  for (k=0; k<n; k++){
	    if (maze[j][k]=='^') d=0;
		else if (maze[j][k]=='>') d=1;
		else if (maze[j][k]=='v') d=2;
		else if (maze[j][k]=='<') d=3;
		else d=4;
		if (d!=4){
		  p = j-1;
		  while(p>=0 && (maze[p][k]=='.' || maze[p][k]=='S' || maze[p][k]=='G')){
		    laser[p][k][(4-d)%4] = true;
			p--;
		  }
		  p = j+1;
		  while(p<m && (maze[p][k]=='.' || maze[p][k]=='S' || maze[p][k]=='G')){
		    laser[p][k][(4-d+2)%4] = true;
			p++;
		  }
		  p = k+1;
		  while(p<n && (maze[j][p]=='.' || maze[j][p]=='S' || maze[j][p]=='G')){
		    laser[j][p][(4-d+1)%4] = true;
			p++;
		  }
		  p = k-1;
		  while(p<n && (maze[j][p]=='.' || maze[j][p]=='S' || maze[j][p]=='G')){
		    laser[j][p][(4-d+3)%4] = true;
			p--;
		  }
		}
		else if (maze[j][k]=='S'){
		  q.push(make_pair(j*n+k,0));
		  visit[j][k] = 0;
		  maze[j][k]='.';
		}
	  }
	}
	step = -1;
	while(!q.empty()){
	  tmp = q.front();
	  q.pop();
	  sj = tmp.first/n;
	  sk = tmp.first%n;
	  s = tmp.second;
	  if (step==-1 || step>s){
	    if (sj-1>=0 && s+1<visit[sj-1][sk] && (maze[sj-1][sk]=='.' || maze[sj-1][sk]=='G')){
		  if (!laser[sj-1][sk][(s+1)%4]){
            visit[sj-1][sk] = s+1;
			if (maze[sj-1][sk]=='G'){
			  step = (step==-1?s+1:min(step,s+1));
			}
			else q.push(make_pair((sj-1)*n+sk,s+1));
          }
		  else if (!laser[sj][sk][(s+2)%4] && 
			((sj+1<m && maze[sj+1][sk]=='.' && !laser[sj+1][sk][(s+1)%4]) || 
			 (sk-1>=0 && maze[sj][sk-1]=='.' && !laser[sj][sk-1][(s+1)%4]) || 
			 (sk+1<m && maze[sj][sk+1]=='.' && !laser[sj][sk+1][(s+1)%4]))){
			visit[sj-1][sk] = min(visit[sj-1][sk],s+1+2);
			if (maze[sj-1][sk]=='G'){
		      step = (step==-1?s+1+2:min(step,s+1+2));
			}
			else q.push(make_pair((sj-1)*n+sk,s+1+2));
		  }
		}
		if (sj+1<m && s+1<visit[sj+1][sk] && (maze[sj+1][sk]=='.' || maze[sj+1][sk]=='G')){
		  if (!laser[sj+1][sk][(s+1)%4]){
            visit[sj+1][sk] = s+1;
			if (maze[sj+1][sk]=='G'){
			  step = (step==-1?s+1:min(step,s+1));
			}
			else q.push(make_pair((sj+1)*n+sk,s+1));
		  }
		  else if (!laser[sj][sk][(s+2)%4] && 
			((sj-1>=0 && maze[sj-1][sk]=='.' && !laser[sj-1][sk][(s+1)%4]) || 
			 (sk-1>=0 && maze[sj][sk-1]=='.' && !laser[sj][sk-1][(s+1)%4]) || 
			 (sk+1<m && maze[sj][sk+1]=='.' && !laser[sj][sk+1][(s+1)%4]))){
			visit[sj+1][sk] = min(visit[sj+1][sk],s+1+2);
			if (maze[sj+1][sk]=='G'){
			  step = (step==-1?s+1+2:min(step,s+1+2));
			}
			else q.push(make_pair((sj+1)*n+sk,s+1+2));
		  }
		}
		if (sk-1>=0 && s+1<visit[sj][sk-1] && (maze[sj][sk-1]=='.' || maze[sj][sk-1]=='G')){
		  if (!laser[sj][sk-1][(s+1)%4]){
		    visit[sj][sk-1] = s+1;
			if (maze[sj][sk-1]=='G'){
			  step = (step==-1?s+1:min(step,s+1));
			}
			else q.push(make_pair(sj*n+sk-1,s+1));
		  }
		  else if (!laser[sj][sk][(s+2)%4] && 
			((sj+1<m && maze[sj+1][sk]=='.' && !laser[sj+1][sk][(s+1)%4]) || 
			 (sj-1>=0 && maze[sj-1][sk]=='.' && !laser[sj-1][sk][(s+1)%4]) || 
			 (sk+1<n && maze[sj][sk+1]=='.' && !laser[sj][sk+1][(s+1)%4]))){
			visit[sj][sk-1] = min(visit[sj][sk-1],s+1+2);
			if (maze[sj][sk-1]=='G'){
			  step = (step==-1?s+1+2:min(step,s+1+2));
			}
			else q.push(make_pair(sj*n+sk-1,s+1+2));
	      }
		}
		if (sk+1<n && s+1<visit[sj][sk+1] && (maze[sj][sk+1]=='.' || maze[sj][sk+1]=='G')){
		  if (!laser[sj][sk+1][(s+1)%4]){
			visit[sj][sk+1] = s+1;
			if (maze[sj][sk+1]=='G'){
			  step = (step==-1?s+1:min(step,s+1));
			}
			else q.push(make_pair(sj*n+sk+1,s+1));
		  }
		  else if (!laser[sj][sk][(s+2)%4] && 
			((sj+1<m && maze[sj+1][sk]=='.' && !laser[sj+1][sk][(s+1)%4]) || 
			 (sj-1>=0 && maze[sj-1][sk]=='.' && !laser[sj-1][sk][(s+1)%4]) || 
			 (sk-1>=0 && maze[sj][sk-1]=='.' && !laser[sj][sk-1][(s+1)%4]))){
			visit[sj][sk+1] = min(visit[sj][sk+1],s+1+2);
			if (maze[sj][sk+1]=='G'){
			  step = (step==-1?s+1+2:min(step,s+1+2));
			}
			else q.push(make_pair(sj*n+sk+1,s+1+2));
		  }
		}
      }
	}
	if (step!=-1) cout << step;
	else cout << "impossible";
	if (i!=t) cout << endl;
  }

  return 0;
}

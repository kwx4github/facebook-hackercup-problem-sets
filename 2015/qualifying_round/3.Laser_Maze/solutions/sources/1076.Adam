#include <cstdio>
#include <queue>
using namespace std;

const int maxN = 100, INF = 1000000000;

int n, m, dist[4][maxN][maxN];
char in[maxN + 5], map[maxN][maxN];

queue <pair <int, int> > Q;

bool isLaser(char a)
{
    return ((a == '<') or (a == '>') or (a == 'v') or (a == '^'));
}

int orientation(char a)
{
    if (a == '^')
        return 0;

    if (a == '>')
        return 1;

    if (a == 'v')
        return 2;

    if (a == '<')
        return 3;
}

bool isAccesibleArea(pair <int, int> v)
{
    return ((v.first >= 0) and (v.first < n) and (v.second >= 0) and (v.second < m) and !isLaser(map[v.first][v.second]) and (map[v.first][v.second] != '#'));
}

pair <int, int> neighbor(int i, int j, int id)
{
    switch (id)
    {
        case 0: return make_pair(i - 1, j);

        case 1: return make_pair(i, j + 1);

        case 2: return make_pair(i + 1, j);

        case 3: return make_pair(i, j - 1);
    }
}

void bfs()
{
    dist[0][Q.front().first][Q.front().second] = 0;

    while (!Q.empty())
    {
        int i = Q.front().first;
        int j = Q.front().second;
        Q.pop();

        for (int k=0; k<4; k++)
        {
            pair <int, int> u = neighbor(i, j, k);

            if (!isAccesibleArea(u))
                continue;

            bool actualised = 0;

            for (int mod=0; mod<4; mod++)
            {
                if (dist[mod][i][j] == -1)
                    continue;

                int nextMod = (mod + 1) % 4;

                if (dist[mod][i][j] + 1 < dist[nextMod][u.first][u.second])
                {
                    dist[nextMod][u.first][u.second] = dist[mod][i][j] + 1;
                    actualised = 1;
                }
            }

            if (actualised)
                Q.push(u);
        }
    }
}

int main()
{
    int t;
    scanf ("%d", &t);

    for (int test=1; test<=t; test++)
    {
        scanf ("%d%d", &n, &m);

        pair <int, int> target;

        for (int i=0; i<n; i++)
        {
            scanf ("%s", in);

            for (int j=0; j<m; j++)
            {
                map[i][j] = in[j];

                for (int k=0; k<4; k++)
                    dist[k][i][j] = INF;

                if (map[i][j] == 'S')
                    Q.push(make_pair(i, j));

                if (map[i][j] == 'G')
                    target = make_pair(i, j);
            }
        }

        for (int i=0; i<n; i++)
        {
            for (int j=0; j<m; j++)
            {
                if (!isLaser(map[i][j]))
                    continue;

                int dirrection = orientation(map[i][j]);

                for (int k=0; k<4; k++)
                {
                    pair <int, int> v = neighbor(i, j, k);

                    while (isAccesibleArea(v))
                    {
                        dist[(4 + k - dirrection) % 4][v.first][v.second] = -1;
                        v = neighbor(v.first, v.second, k);
                    }
                }
            }
        }

        bfs();

        int res = INF;

        for (int i=0; i<4; i++)
        {
            int Dist = dist[i][target.first][target.second];

            if (Dist != -1 and Dist < res)
                res = Dist;
        }

        printf("Case #%d: ", test);

        if (res == INF)
            printf("impossible\n");

        else
            printf("%d\n", res);
    }

    return 0;
}

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;
typedef long long ll;
const double eps = 1e-7;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};

void print(int i, int res){
	cout<<"Case #"<<i<<": ";
	if(res == 1e9)
		cout<<"impossible\n";
	else
		cout<<res<<"\n";
}

int main(){
	freopen("laser_maze.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int test;
	cin>>test;
	for(int t=0; t<test; t++){
		int n, m;
		cin>>n>>m;
		int xs, ys, xf, yf;
		vector<vector<int> > arr(n, vector<int> (m, 0));
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				char ch;
				cin>>ch;
				if(ch == '#')
					arr[i][j] = -1;
				if(ch == 'S'){
					xs = j;
					ys = i;
				}
				if(ch == 'G'){
					xf = j;
					yf = i;
				}
				if(ch == '<')
					arr[i][j] = 1;
				if(ch == '^')
					arr[i][j] = 2;
				if(ch == '>')
					arr[i][j] = 3;
				if(ch == 'v')
					arr[i][j] = 4;
			}
		}
		queue<pair<int, pair<int, pair<int, int> > > > q;
		q.push(make_pair(0, make_pair(0, make_pair(ys, xs))));
		vector<vector<vector<char> > > used(4, vector<vector<char> > (n, vector<char> (m, 0)));
		used[0][ys][xs] = 1;
		int res = 1e9;
		while(!q.empty()){
			int state = q.front().first;
			int dist = q.front().second.first;
			int i = q.front().second.second.first;
			int j = q.front().second.second.second;
			q.pop();
			if(i == yf && j == xf){
				res = dist;
				break;
			}
			for(int k=0; k<4; k++){
				int ii = i + dy[k];
				int jj = j + dx[k];
				if(ii >= 0 && ii < n && jj >= 0 && jj < m){
					int a = (state + 1) % 4;
					if(used[a][ii][jj] || arr[ii][jj] != 0)
						continue;
					vector<vector<int> > buf = arr;
					for(int pp = 0; pp<n; pp++){
						for(int qq = 0; qq<m; qq++){
							if(buf[pp][qq] >= 1 && buf[pp][qq] <= 4){
								int b = buf[pp][qq] - 1;
								b += a;
								b %= 4;
								int bufp = pp;
								int bufq = qq;
								while(1){
									bufp += dy[b];
									bufq += dx[b];
									if(bufp < 0 || bufq < 0 || bufp >= n || bufq >= m)
										break;
									if(buf[bufp][bufq] == 0)
										buf[bufp][bufq] = -2;
									else
										break;
								}
							}
						}
					}
					if(buf[ii][jj] == 0){
						q.push(make_pair(a, make_pair(dist+1, make_pair(ii, jj))));
						used[a][ii][jj] = 1;
					}
				}
			}
		}
		print(t+1, res);
	}
	return 0;
}
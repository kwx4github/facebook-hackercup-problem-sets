import java.io.*;
import java.util.*;
import java.math.*;

public class Lasers implements Runnable {
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer st;
	static Random rnd;

	private void solve() throws IOException {
		int tests = nextInt();
		for (int test = 0; test < tests; test++) {
			out.print("Case #" + (test + 1) + ": ");
			solveOne();
		}
	}

	class State {
		int x, y, k;

		public State(int x, int y, int k) {
			this.x = x;
			this.y = y;
			this.k = k;
		}

	}

	final int[] dx = { -1, 0, 1, 0 };
	final int[] dy = { 0, 1, 0, -1 };
	final int directions = dx.length;
	final int inf = Integer.MAX_VALUE / 2;

	private void solveOne() throws IOException {
		int height = nextInt(), width = nextInt();
		char[][] field = new char[height][];
		for (int i = 0; i < height; i++) {
			field[i] = nextToken().toCharArray();
		}
		int[][][] minDistance = new int[height][width][directions];
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				Arrays.fill(minDistance[i][j], inf);
			}
		}
		int sx = -1, sy = -1, ex = -1, ey = -1;
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if (field[i][j] == 'S') {
					sx = i;
					sy = j;
				} else if (field[i][j] == 'G') {
					ex = i;
					ey = j;
				}
			}
		}
		minDistance[sx][sy][0] = 0;
		Queue<State> q = new ArrayDeque<Lasers.State>();
		q.add(new State(sx, sy, 0));
		while (!q.isEmpty()) {
			State currentState = q.poll();
			int currentDistance = minDistance[currentState.x][currentState.y][currentState.k];
			if (currentDistance == inf) {
				throw new AssertionError();
			}
			for (int i = 0; i < directions; i++) {
				int nx = currentState.x + dx[i], ny = currentState.y + dy[i], nk = (currentState.k + 1)
						% directions;
				if (nx >= 0 && ny >= 0 && nx < height && ny < width
						&& minDistance[nx][ny][nk] == inf
						&& can(height, width, field, nx, ny, nk)) {
					minDistance[nx][ny][nk] = currentDistance + 1;
					q.add(new State(nx, ny, nk));
				}
			}
		}
		int result = inf;
		for (int i = 0; i < directions; i++) {
			result = Math.min(result, minDistance[ex][ey][i]);
		}
		out.println(result == inf ? "impossible" : result);
	}

	private boolean can(int height, int width, char[][] field, int nx, int ny,
			int nk) {
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if (nx != i && ny != j)
					continue;

				int turrelDir = getDir(field[i][j]);
				if (turrelDir != -1) {
					int currentDir = (turrelDir + nk) % directions;
					int cdx = dx[currentDir], cdy = dy[currentDir];

					if (cdx != 0
							&& Integer.signum(cdx) == Integer.signum(nx - i)) {
						return false;
					} else if (cdy != 0
							&& Integer.signum(cdy) == Integer.signum(ny - j)) {
						return false;
					}
				}
			}
		}
		return true;
	}

	private int getDir(char c) {
		return "^>v<".indexOf(c);
	}

	public static void main(String[] args) {
		new Lasers().run();
	}

	public void run() {
		try {
			final String className = this.getClass().getName().toLowerCase();

			try {
				in = new BufferedReader(new FileReader(className + ".in"));
				out = new PrintWriter(new FileWriter(className + ".out"));
				// in = new BufferedReader(new FileReader("input.txt"));
				// out = new PrintWriter(new FileWriter("output.txt"));
			} catch (FileNotFoundException e) {
				in = new BufferedReader(new InputStreamReader(System.in));
				out = new PrintWriter(System.out);
			}

			rnd = new Random();

			solve();

			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private String nextToken() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String line = in.readLine();

			if (line == null)
				return null;

			st = new StringTokenizer(line);
		}

		return st.nextToken();
	}

	private int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	private long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	private double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
}
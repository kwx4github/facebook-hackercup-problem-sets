#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

class Node {
public:
	int x, y, t;
	Node(int x, int y, int t) : x(x), y(y), t(t) {}
};

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int main(){
	int T; cin >> T;
	static int len[4][100][100];
	static int ng[4][100][100];
	for(int t=1;t<=T;t++){
		int N, M; cin >> N >> M;
		vector<string> vs(N);
		for(int i=0;i<N;i++) cin >> vs[i];
		memset(len, -1, sizeof(len));
		memset(ng, 0, sizeof(ng));
		int sx, sy, gx, gy;
		for(int i=0;i<N;i++){
			for(int j=0;j<M;j++){
				if(vs[i][j] == 'S'){
					sx = i, sy = j;
				}
				if(vs[i][j] == 'G'){
					gx = i, gy = j;
				}
				if(vs[i][j] == '#'){
					for(int k=0;k<4;k++) ng[k][i][j] = 1;
				}
				if(vs[i][j] == '^' || vs[i][j] == '>' || vs[i][j] == 'v' || vs[i][j] == '<'){
					int add = (vs[i][j] == '^' ? 0 : vs[i][j] == '>' ? 1 : vs[i][j] == 'v' ? 2 : 3);
					for(int k=0;k<4;k++){
						int px = i, py = j;
						do {
							ng[k][px][py] = 1;
							px += dx[(k+add)%4];
							py += dy[(k+add)%4];
						} while(0 <= px && px < N && 0 <= py && py < M && (vs[px][py] == '.' || isupper(vs[px][py])));
					}
				}
			}
		}
		int res = -1;
		queue<Node> qu; qu.push(Node(sx, sy, 0));
		len[0][sx][sy] = 0;
		while(!qu.empty()){
			Node nd = qu.front(); qu.pop();
			int t = nd.t, x = nd.x, y = nd.y;
			if(gx == x && gy == y){
				res = len[t][x][y];
				break;
			}
			for(int i=0;i<4;i++){
				int nx = x+dx[i], ny = y+dy[i];
				if(nx < 0 || N <= nx || ny < 0 || M <= ny || ng[(t+1)%4][nx][ny] || len[(t+1)%4][nx][ny] != -1) continue;
				len[(t+1)%4][nx][ny] = len[t][x][y]+1;
				qu.push(Node(nx, ny, (t+1)%4));
			}
		}
		if(res == -1){
			printf("Case #%d: impossible\n", t);
		} else {
			printf("Case #%d: %d\n", t, res);
		}
	}
}
#include <iostream>
#include <cstdio>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

typedef pair<int, int> ii;

int M, N, T, SX, SY, FX, FY;
int counter = 2;

vector<vector<vector<char> > > grid;
vector<vector<vector<int> > > dists;

void setLasers() {
    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++) {
            char thisChar = grid[i][j][0];
            if (thisChar == 'S') {
                SX = j;
                SY = i;
            } else if (thisChar == 'G') {
                FX = j;
                FY = i;
            } else if (thisChar == '<') {
                grid[i][j][1] = '<';
                grid[i][j][2] = '^';
                grid[i][j][3] = '>';
                grid[i][j][4] = 'v';
                int counter = 1;
                char toLeft = grid[i][j - counter][0];
                char toRight = grid[i][j + counter][0];
                char toTop = grid[i - counter][j][0];
                char toBottom = grid[i + counter][j][0];
                bool left = true, right = true, top = true, bottom = true;
                while (left || right || top || bottom) {
                    if (toLeft == '#' || toLeft == '<' || toLeft == '>' || toLeft == '^' || toLeft == 'v') {
                        left = false;
                    } else if (left) {
                        grid[i][j - counter][1] = '-';
                    }
                    
                    if (toTop == '#' || toTop == '<' || toTop == '>' || toTop == '^' || toTop == 'v') {
                        top = false;
                    } else if (top) {
                        grid[i - counter][j][2] = '|';
                    }
                    
                    if (toRight == '#' || toRight == '<' || toRight == '>' || toRight == '^' || toRight == 'v') {
                        right = false;
                    } else if (right) {
                        grid[i][j + counter][3] = '-';
                    }
                    
                    if (toBottom == '#' || toBottom == '<' || toBottom == '>' || toBottom == '^' || toBottom == 'v') {
                        bottom = false;
                    } else if (bottom) {
                        grid[i + counter][j][4] = '|';
                    }
                    
                    counter++;
                    
                    if (left) toLeft = grid[i][j - counter][0];
                    if (right) toRight = grid[i][j + counter][0];
                    if (top) toTop = grid[i - counter][j][0];
                    if (bottom) toBottom = grid[i + counter][j][0];
                }
            } else if (thisChar == '>') {
                grid[i][j][1] = '>';
                grid[i][j][2] = 'v';
                grid[i][j][3] = '<';
                grid[i][j][4] = '^';
                int counter = 1;
                char toLeft = grid[i][j - counter][0];
                char toRight = grid[i][j + counter][0];
                char toTop = grid[i - counter][j][0];
                char toBottom = grid[i + counter][j][0];
                bool left = true, right = true, top = true, bottom = true;
                while (left || right || top || bottom) {
                    if (toRight == '#' || toRight == '<' || toRight == '>' || toRight == '^' || toRight == 'v') {
                        right = false;
                    } else if (right) {
                        grid[i][j + counter][1] = '-';
                    }
                    
                    if (toBottom == '#' || toBottom == '<' || toBottom == '>' || toBottom == '^' || toBottom == 'v') {
                        bottom = false;
                    } else if (bottom) {
                        grid[i + counter][j][2] = '|';
                    }
                    
                    if (toLeft == '#' || toLeft == '<' || toLeft == '>' || toLeft == '^' || toLeft == 'v') {
                        left = false;
                    } else if (left) {
                        grid[i][j - counter][3] = '-';
                    }
                    
                    if (toTop == '#' || toTop == '<' || toTop == '>' || toTop == '^' || toTop == 'v') {
                        top = false;
                    } else if (top) {
                        grid[i - counter][j][4] = '|';
                    }
                    
                    counter++;
                    
                    if (left) toLeft = grid[i][j - counter][0];
                    if (right) toRight = grid[i][j + counter][0];
                    if (top) toTop = grid[i - counter][j][0];
                    if (bottom) toBottom = grid[i + counter][j][0];
                }
            } else if (thisChar == '^') {
                grid[i][j][1] = '^';
                grid[i][j][2] = '>';
                grid[i][j][3] = 'v';
                grid[i][j][4] = '<';
                int counter = 1;
                char toLeft = grid[i][j - counter][0];
                char toRight = grid[i][j + counter][0];
                char toTop = grid[i - counter][j][0];
                char toBottom = grid[i + counter][j][0];
                bool left = true, right = true, top = true, bottom = true;
                while (left || right || top || bottom) {
                    if (toTop == '#' || toTop == '<' || toTop == '>' || toTop == '^' || toTop == 'v') {
                        top = false;
                    } else if (top) {
                        grid[i - counter][j][1] = '|';
                    }
                    
                    if (toRight == '#' || toRight == '<' || toRight == '>' || toRight == '^' || toRight == 'v') {
                        right = false;
                    } else if (right) {
                        grid[i][j + counter][2] = '-';
                    }
                    
                    if (toBottom == '#' || toBottom == '<' || toBottom == '>' || toBottom == '^' || toBottom == 'v') {
                        bottom = false;
                    } else if (bottom) {
                        grid[i + counter][j][3] = '|';
                    }
                    
                    if (toLeft == '#' || toLeft == '<' || toLeft == '>' || toLeft == '^' || toLeft == 'v') {
                        left = false;
                    } else if (left) {
                        grid[i][j - counter][4] = '-';
                    }
                    
                    counter++;
                    
                    if (left) toLeft = grid[i][j - counter][0];
                    if (right) toRight = grid[i][j + counter][0];
                    if (top) toTop = grid[i - counter][j][0];
                    if (bottom) toBottom = grid[i + counter][j][0];
                }
            } else if (thisChar == 'v') {
                grid[i][j][1] = 'v';
                grid[i][j][2] = '<';
                grid[i][j][3] = '^';
                grid[i][j][4] = '>';
                int counter = 1;
                char toLeft = grid[i][j - counter][0];
                char toRight = grid[i][j + counter][0];
                char toTop = grid[i - counter][j][0];
                char toBottom = grid[i + counter][j][0];
                bool left = true, right = true, top = true, bottom = true;
                while (left || right || top || bottom) {
                    if (toBottom == '#' || toBottom == '<' || toBottom == '>' || toBottom == '^' || toBottom == 'v') {
                        bottom = false;
                    } else if (bottom) {
                        grid[i + counter][j][1] = '|';
                    }
                    
                    if (toLeft == '#' || toLeft == '<' || toLeft == '>' || toLeft == '^' || toLeft == 'v') {
                        left = false;
                    } else if (left) {
                        grid[i][j - counter][2] = '-';
                    }
                    
                    if (toTop == '#' || toTop == '<' || toTop == '>' || toTop == '^' || toTop == 'v') {
                        top = false;
                    } else if (top) {
                        grid[i - counter][j][3] = '|';
                    }
                    
                    if (toRight == '#' || toRight == '<' || toRight == '>' || toRight == '^' || toRight == 'v') {
                        right = false;
                    } else if (right) {
                        grid[i][j + counter][4] = '-';
                    }
                    
                    counter++;
                    
                    if (left) toLeft = grid[i][j - counter][0];
                    if (right) toRight = grid[i][j + counter][0];
                    if (top) toTop = grid[i - counter][j][0];
                    if (bottom) toBottom = grid[i + counter][j][0];
                }
            }
        }
    }
}

void print(int layer) {
    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++)
            cout << grid[i][j][layer];
        cout << endl;
    }
}

void print(int layer, int x, int y) {
    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++) {
            if (x == j && y == i) cout << "*";
            else cout << grid[i][j][layer];
        }
        cout << endl;
    }
}

void printTimes() {
    ofstream cout("/Users/byunghoon/Desktop/Programs/Programs/out.txt");
    for (int i = 1; i <= M; i++) {
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k <= N; k++) {
                if (dists[i][k][j+1] == -1)
                    cout << "-";
                else cout << dists[i][k][j+1];
            }
            cout << "\t";
        }
        cout << endl;
    }
}

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

void BFS() {
    queue<pair<ii, int> > q;
    dists[SY][SX][2] = 0;
    q.push(make_pair(ii(SX, SY), 2));
    while (!q.empty()) {
        ii thisPosition = q.front().first;
        int thisTime = q.front().second;
        //cout << "From (" << thisPosition.first << ", " << thisPosition.second << ") at time " << thisTime << endl;
        //print(thisTime, thisPosition.first, thisPosition.second);
        //printTimes();
        q.pop();
        if (thisPosition.first == FX && thisPosition.second == FY) {
            // finish
            break;
        }
        
        for (int i = 0; i < 4; i++) {
            // for each adjacent cell
            int newX = thisPosition.first + dx[i];
            int newY = thisPosition.second + dy[i];
            char cellChar = grid[newY][newX][thisTime];
            //cout << "Going to (" << newX << ", " << newY << ") at time " << thisTime % 4 + 1 << ": " << cellChar << endl;
            if (cellChar == '.' || cellChar == 'S' || cellChar == 'G') {
                // if valid after next move (using counter)
                if (dists[newY][newX][thisTime % 4 + 1] == -1) {
                    // if not already visited (use distance == -1)
                    // change new cell's distance to current cell's distance + 1
                    //cout << "dists[" << thisPosition.second << "][" << thisPosition.first << "][" << thisTime << "] = " << dists[thisPosition.second][thisPosition.first][thisTime] << endl;
                    dists[newY][newX][thisTime % 4 + 1] = dists[thisPosition.second][thisPosition.first][thisTime] + 1;
                    q.push(make_pair(ii(newX, newY), thisTime % 4 + 1));
                }
            }
        }
        counter = counter % 4 + 1;
        //cout << endl;
    }
}

int main() {
    ifstream cin("/Users/byunghoon/Desktop/Programs/Programs/in.txt");
    ofstream cout("/Users/byunghoon/Desktop/Programs/Programs/out.txt");
    
    cin >> T;
    
    for (int i = 0; i < T; i++) {
        cin >> M >> N;

        grid.clear();
        dists.clear();
        grid = vector<vector<vector<char> > >(M+2, vector<vector<char> >(N+2, vector<char>(5, '#')));
        dists = vector<vector<vector<int> > >(M+2, vector<vector<int> >(N + 2, vector<int>(5, -1)));
        
        counter = 2;
        
        for (int j = 0; j < M; j++) {
            for (int k = 0; k < N; k++) {
                char c;
                cin >> c;
                grid[j + 1][k + 1][0] = c;
                grid[j + 1][k + 1][1] = c;
                grid[j + 1][k + 1][2] = c;
                grid[j + 1][k + 1][3] = c;
                grid[j + 1][k + 1][4] = c;
            }
        }
        
        setLasers();
        BFS();
        
        int ans = 2000000000;
        //cout << "Finish: (" << FX << ", " << FY << ")" << endl;
        //cout << "min of ";
        for (int i = 0; i < 4; i++) {
            //cout << dists[FY][FX][i+1] << " ";
            if (dists[FY][FX][i+1] != -1)
                ans = min(ans, dists[FY][FX][i+1]);
        }
        //cout << endl;
        cout << "Case #" << i + 1 << ": ";
        if (ans == -1 || ans == 2000000000) cout << "impossible" << endl;
        else cout << ans << endl;
        
        //cout << endl;
    }
    
    return 0;
}
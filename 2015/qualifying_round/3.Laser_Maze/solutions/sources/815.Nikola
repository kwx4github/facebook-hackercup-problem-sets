#include <cstdio>
#include <queue>

using namespace std;

const int N = 110, dx[] = {-1, 0, 0, 1}, dy[] = {0, -1, 1, 0};
int n, m, a, b, qu;
int l[N][N], u[N][N], r[N][N], d[N][N];
char s[N][N];
bool p[N][N][4], f[N][N][4];
queue<pair<int, pair<int, int>>> q;

bool laser(char c) { return c == '^' || c == 'v' || c == '>' || c == '<'; };

bool moze(char c) { return c == '.' || c == 'S' || c == 'G'; };

void cstrt()
{
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
        {
            for (int k = 0; k < 4; k++) p[i][j][k] = f[i][j][k] = false;
            s[i][j] = l[i][j] = u[i][j] = r[i][j] = d[i][j] = 0;
        }
    while (!q.empty()) q.pop();
    for (int i = 1; i <= n; i++) scanf("%s", s[i] + 1);
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++) if (laser(s[i][j])) l[i][j] = u[i][j] = s[i][j]; else
        if (moze(s[i][j])) l[i][j] = l[i][j - 1], u[i][j] = u[i - 1][j];
    for (int i = n; i; i--)
        for (int j = m; j; j--) if (laser(s[i][j])) r[i][j] = d[i][j] = s[i][j]; else
        if (moze(s[i][j])) r[i][j] = r[i][j + 1], d[i][j] = d[i + 1][j];
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
        {
            if (l[i][j] == '>' || u[i][j] == 'v' || r[i][j] == '<' || d[i][j] == '^') p[i][j][0] = true;
            if (l[i][j] == '^' || u[i][j] == '>' || r[i][j] == 'v' || d[i][j] == '<') p[i][j][1] = true;
            if (l[i][j] == '<' || u[i][j] == '^' || r[i][j] == '>' || d[i][j] == 'v') p[i][j][2] = true;
            if (l[i][j] == 'v' || u[i][j] == '<' || r[i][j] == '^' || d[i][j] == '>') p[i][j][3] = true;
        }
}

void uradi(int tp)
{
    scanf("%d %d", &n, &m);
    cstrt();
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++) if (s[i][j] == 'S') a = i, b = j;
    q.push({0, {a, b}});
    while (!q.empty())
    {
        int d = q.front().first, i = q.front().second.first, j = q.front().second.second;
        q.pop();
        if (!moze(s[i][j]) || f[i][j][d % 4] || (s[i][j] != 'S' && p[i][j][d % 4])) continue;
        f[i][j][d % 4] = true;
        if (s[i][j] == 'G') { printf("Case #%d: %d\n", tp, d); return; }
        for (int k = 0; k < 4; k++) q.push({d + 1, {i + dx[k], j + dy[k]}});
    }
    printf("Case #%d: impossible\n", tp);
}

int main()
{
    scanf("%d", &qu);
    for (int i = 1; i <= qu; i++) uradi(i);
    return 0;
}

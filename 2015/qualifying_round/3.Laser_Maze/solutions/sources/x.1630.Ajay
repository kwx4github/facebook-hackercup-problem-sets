import java.io.*;
import java.util.*;

class f3
{
	static PrintWriter pw;
	static String[] map;
	static ArrayList<Integer>[] graph;
	static int M,N;
	static int Sr,Sc,Er,Ec;
	static public void main(String[] args)throws IOException
	{
		BufferedReader br=new BufferedReader(new FileReader("laser_maze.txt"));
		StringTokenizer st;
		pw=new PrintWriter("third.txt");
		
		int T=Integer.parseInt(br.readLine());
		
		for(int cn=0;cn<T;cn++)
		{
			st=new StringTokenizer(br.readLine());
			M=Integer.parseInt(st.nextToken());
			N=Integer.parseInt(st.nextToken());
			map=new String[M];
			for(int i=0;i<M;i++)
			{
				map[i]=br.readLine();
			}
			System.out.print("Case #"+(cn+1)+": ");
			pw.print("Case #"+(cn+1)+": ");
			startEnd();
			makeGraph();
			bfs();
			solve();
		}
		
		pw.flush();
		pw.close();
		br.close();
	}
	
	//{{{ makegraph
	static void makeGraph()
	{
		graph=(ArrayList<Integer>[])new ArrayList[4*M*N];
		for(int i=0;i<4*M*N;i++)
		{
			graph[i]=new ArrayList<Integer>();
		}
		
		for(int i=0;i<M*N;i++)
		{
			int r=i/N;
			int c=i%N;
			if(isSpot(r,c))
			{
				if(isPossibleBackRow(r,c))graph[4*i].add(4*(i-N)+1);
				if(isPossibleNextRow(r,c))graph[4*i].add(4*(i+N)+1);
				if(isPossibleRight(r,c))graph[4*i].add(4*(i+1)+1);
				if(isPossibleLeft(r,c))graph[4*i].add(4*(i-1)+1);
			}
		}
		clockwise();
		for(int i=0;i<M*N;i++)
		{
			int r=i/N;
			int c=i%N;
			
			if(isSpot(r,c))
			{
				if(isPossibleBackRow(r,c))graph[4*i+1].add(4*(i-N)+2);
				if(isPossibleNextRow(r,c))graph[4*i+1].add(4*(i+N)+2);
				if(isPossibleRight(r,c))graph[4*i+1].add(4*(i+1)+2);
				if(isPossibleLeft(r,c))graph[4*i+1].add(4*(i-1)+2);
			}
		}
		clockwise();
		for(int i=0;i<M*N;i++)
		{
			int r=i/N;
			int c=i%N;
			
			if(isSpot(r,c))
			{
				if(isPossibleBackRow(r,c))graph[4*i+2].add(4*(i-N)+3);
				if(isPossibleNextRow(r,c))graph[4*i+2].add(4*(i+N)+3);
				if(isPossibleRight(r,c))graph[4*i+2].add(4*(i+1)+3);
				if(isPossibleLeft(r,c))graph[4*i+2].add(4*(i-1)+3);
			}
		}
		clockwise();
		for(int i=0;i<M*N;i++)
		{
			int r=i/N;
			int c=i%N;
			
			if(isSpot(r,c))
			{
				if(isPossibleBackRow(r,c))graph[4*i+3].add(4*(i-N));
				if(isPossibleNextRow(r,c))graph[4*i+3].add(4*(i+N));
				if(isPossibleRight(r,c))graph[4*i+3].add(4*(i+1));
				if(isPossibleLeft(r,c))graph[4*i+3].add(4*(i-1));
			}
		}
	} //}}}

	//{{{ isPossible
	static boolean isPossibleBackRow(int r,int c)
	{
		if(r==0)return false;
		if(map[r-1].charAt(c)!='.')return false;
		
		if(c!=0)if(inRow(r-1,0,c-1,'^'))return false;
		if(c!=N-1)if(inRow(r-1,c+1,N-1,'v'))return false;
		if(r>1)if(inColumn(c,0,r-2,'>'))return false;
		if(r<M-1)if(inColumn(c,r+1,M-1,'<'))return false;
		
		
		return true;
	}
	
	static boolean isPossibleNextRow(int r,int c)
	{
		if(r==M-1)return false;
		if(map[r+1].charAt(c)!='.')return false;
		
		if(c!=0)if(inRow(r+1,0,c-1,'^'))return false;
		if(c!=N-1)if(inRow(r+1,c+1,N-1,'v'))return false;
		if(r>0)if(inColumn(c,0,r-1,'>'))return false;
		if(r<M-2)if(inColumn(c,r+2,M-1,'<'))return false;
		
		return true;
	}
	
	static boolean isPossibleRight(int r,int c)
	{
		if(c==N-1)return false;
		if(map[r].charAt(c+1)!='.')return false;
		
		if(r!=0)if(inColumn(c+1,0,r-1,'>'))return false;
		if(r!=N-1)if(inColumn(c+1,r+1,M-1,'<'))return false;
		if(c>0)if(inRow(r,0,c-1,'^'))return false;
		if(c<N-2)if(inRow(r,c+2,N-1,'v'))return false;
		
		
		return true;
	}
	
	static boolean isPossibleLeft(int r,int c)
	{
		if(c==0)return false;
		if(map[r].charAt(c-1)!='.')return false;
		
		if(r!=0)if(inColumn(c-1,0,r-1,'>'))return false;
		if(r!=N-1)if(inColumn(c-1,r+1,M-1,'<'))return false;
		if(c>1)if(inRow(r,0,c-2,'^'))return false;
		if(c<N-1)if(inRow(r,c+1,N-1,'v'))return false;
		
		return true;
	} //}}}

	//{{{ inRowColumn
	static boolean inColumn(int c,int x,int y,char k)
	{
		for(int i=x;i<=y;i++)
		{
			if(map[i].charAt(c)==k)return true;
		}
		return false;
	}
	static boolean inRow(int r,int x,int y,char k)
	{
		for(int i=x;i<=y;i++)
		{
			if(map[r].charAt(i)==k)return true;
		}
		return false;
	} //}}}

	//{{{ 
	static boolean isSpot(int r,int c)
	{
		return map[r].charAt(c)=='.';
	}
	
	static void clockwise()
	{
		for(int i=0;i<M;i++)
		{
			char[] temp=map[i].toCharArray();
			for(int j=0;j<N;j++)
			{
				if(temp[j]=='>')temp[j]='v';
				else if(temp[j]=='v')temp[j]='<';
				else if(temp[j]=='<')temp[j]='^';
				else if(temp[j]=='^')temp[j]='>';
			}
			
			map[i]=String.valueOf(temp);
		}
	}
	static void startEnd()
	{
		for(int i=0;i<M;i++)
		{
			char[] temp=map[i].toCharArray();
			for(int j=0;j<N;j++)
			{
				if(temp[j]=='S')
				{
					Sr=i;Sc=j;
					temp[j]='.';
				}
				if(temp[j]=='G')
				{
					Er=i;Ec=j;
					temp[j]='.';
				}
			}
			map[i]=String.valueOf(temp);
		}
	} //}}}

	//{{{ bfs
	static boolean[] isVisited;
	static int[] parent;
	static void bfs()
	{
		int startPoint=4*(Sr*N+Sc);
		Queue<Integer> queue=new LinkedList<Integer>();
		isVisited=new boolean[4*M*N];
		parent=new int[4*M*N];
		parent[startPoint]=Integer.MAX_VALUE;
		queue.add(startPoint);
		isVisited[startPoint]=true;
		
		while(!queue.isEmpty())
		{
			int t=queue.remove();
			
			for(Integer i:graph[t])
			{
				if(!isVisited[i])
				{
					isVisited[i]=true;
					queue.add(i);
					parent[i]=t;
				}
			}
		}
	} //}}}

	//{{{ solve
	static void solve()
	{
		int endPoint=4*(Er*N+Ec);
		int minStep=Integer.MAX_VALUE;;
		boolean way=false;
		
		if(isVisited[endPoint])
		{
			way=true;
			minStep=Math.min(minStep,step(endPoint));
		}
		
		if(isVisited[endPoint+1])
		{
			way=true;
			minStep=Math.min(minStep,step(endPoint+1));
		}
		if(isVisited[endPoint+2])
		{
			way=true;
			minStep=Math.min(minStep,step(endPoint+2));
		}
		if(isVisited[endPoint+3])
		{
			way=true;
			minStep=Math.min(minStep,step(endPoint+3));
		}
		
		if(way)
		{
			System.out.println(minStep);
			pw.println(minStep);
		}
		else
		{
			System.out.println("impossible");
			pw.println("impossible");
		}
	}
	
	static int step(int a)
	{
		int count=0;
		while(parent[a]!=Integer.MAX_VALUE)
		{
			count++;
			a=parent[a];
		}
		return count;
	} //}}}

		
}
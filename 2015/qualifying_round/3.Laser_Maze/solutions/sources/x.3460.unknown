#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;

char grid[4][110][110],visited[4][100][100];
struct player{
    int y,x,pos,cost;
};
int main(){
    int n,t,m,y,x,goalx,goaly,flag,cont =1;
    char c;
    scanf("%d",&t);

    getchar();
    while(t--){
        flag = 0;
        memset(visited,0,sizeof(visited));
       scanf("%d%d",&n,&m);
       for(int i =1;i<=n;i++){
            getchar();
            for(int j=1;j<=m;j++){
                scanf("%c",&grid[0][i][j]);

                if(grid[0][i][j] == 'S'){
                    grid[0][i][j] = '.';
                    y = i;
                    x = j;
                }
                else if(grid[0][i][j] == 'G'){
                    grid[0][i][j] =  '.';
                    goalx = j;
                    goaly = i;
                }
                grid[3][i][j] = grid[2][i][j] =  grid[1][i][j] = grid[0][i][j];
              }
            }
        for(int k = 1 ;k<4;k++)
        for(int i = 1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(grid[k-1][i][j] == '<') {
                        grid[k][i][j] = '^';
                        int aux = i-1;
                        while(aux > 0 && grid[k][aux][j] == '.' ) grid[k][aux--][j]  = 'X';
                }
                else if(grid[k-1][i][j] == '^') {
                        grid[k][i][j] = '>';
                       int aux = j+1;
                        while(aux <= m && grid[k][i][aux] == '.' ) grid[k][i][aux++]  = 'X';

                }
                else if(grid[k-1][i][j] == '>') {
                        grid[k][i][j] = 'v';
                        int aux = i+1;
                        while(aux <= n && grid[k][aux][j] == '.' ) grid[k][aux++][j]  = 'X';
                }
                else if(grid[k-1][i][j] == 'v') {
                        grid[k][i][j] = '<';
                        int aux = j-1;
                        while(aux > 0 && grid[k][i][aux] == '.' ) grid[k][i][aux--]  = 'X';
                }

            }
        }
        for(int i = 1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(grid[0][i][j] == '<') {
                        int aux = j-1;
                        while(aux > 0 && grid[0][i][aux] == '.' ) grid[0][i][aux--]  = 'X';

                }
                else if(grid[0][i][j] == '^') {
                         int aux = i-1;
                        while(aux > 0 && grid[0][aux][j] == '.' ) grid[0][aux--][j]  = 'X';

                }
                else if(grid[0][i][j] == '>') {
                        int aux = j+1;
                        while(aux <= m && grid[0][i][aux] == '.' ) grid[0][i][aux++]  = 'X';
                }
                else if(grid[0][i][j] == 'v') {
                        int aux = i+1;
                        while(aux <= n && grid[0][aux][j] == '.' ) grid[0][aux++][j]  = 'X';
                }

            }
        }
       queue<player> q; q.push(player{y,x,0,0});
       visited[0][y][x]  = 1;
       player aux;
       while(!q.empty()){
           aux = q.front();q.pop();
           aux.pos++;
           if(aux.pos > 3) aux.pos%=4;
          /* printf("%d\n",aux.cost);
            for(int i =1;i<=n;i++){
                for(int j =1;j<=m;j++){ if(i== aux.y && j== aux.x) printf("P");
                 else printf("%c",grid[aux.pos][i][j]);
                 }
                printf("\n");
            }
            system("pause"); */
           if(aux.y == goaly && aux.x == goalx){
            printf("Case #%d: %d\n",cont++,aux.cost);
            flag = 1;
            break;
           }
           /*if(!visited[aux.pos][aux.y][aux.x] && grid[aux.pos][aux.y][aux.x] == '.'){
                q.push(player{aux.y,aux.x,aux.pos,aux.cost+1});
                visited[aux.pos][aux.y][aux.x]=1;
           } */
            if(!visited[aux.pos][aux.y+1][aux.x] && aux.y+1 <= n && grid[aux.pos][aux.y+1][aux.x] == '.'){
                q.push(player{aux.y+1,aux.x,aux.pos,aux.cost+1});
                visited[aux.pos][aux.y+1][aux.x]=1;
            }
            if(!visited[aux.pos][aux.y-1][aux.x] && aux.y-1  > 0 && grid[aux.pos][aux.y-1][aux.x] == '.'){
                q.push(player{aux.y-1,aux.x,aux.pos,aux.cost+1});
                visited[aux.pos][aux.y-1][aux.x]=1;
            }
            if(!visited[aux.pos][aux.y][aux.x+1] && aux.x+1 <= m && grid[aux.pos][aux.y][aux.x+1] == '.'){
                q.push(player{aux.y,aux.x+1,aux.pos,aux.cost+1});
                visited[aux.pos][aux.y+1][aux.x]=1;
            }
            if(!visited[aux.pos][aux.y][aux.x-1] && aux.x-1 > 0 && grid[aux.pos][aux.y][aux.x-1] == '.'){
                q.push(player{aux.y,aux.x-1,aux.pos,aux.cost+1});
                visited[aux.pos][aux.y][aux.x-1]=1;
            }
           }
           if(!flag) printf("Case #%d: impossible\n",cont++);

    }


}



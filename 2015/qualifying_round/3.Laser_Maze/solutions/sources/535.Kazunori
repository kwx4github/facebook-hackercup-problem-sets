#include <bits/stdc++.h>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define ALL(c) (c).begin(), (c).end()
#define valid(y,x,h,w) (0<=y&&y<h&&0<=x&&x<w)
#define tpl(...) make_tuple(__VA_ARGS__)
const int INF = 0x3f3f3f3f;
const double EPS = 1e-8;
const double PI = acos(-1);
typedef long long ll;
typedef pair<int,int> pii;
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
template<typename Ch,typename Tr,typename C,typename=decltype(begin(C()))>basic_ostream<Ch,Tr>& operator<<(basic_ostream<Ch,Tr>&os,
const C& c){os<<'[';for(auto i=begin(c);i!=end(c);++i)os<<(i==begin(c)?"":" ")<<*i;return os<<']';}
template<class S,class T>ostream&operator<<(ostream &o,const pair<S,T>&t){return o<<'('<<t.first<<','<<t.second<<')';}
template<int N,class Tp>void output(ostream&,const Tp&){}
template<int N,class Tp,class,class ...Ts>void output(ostream &o,const Tp&t){if(N)o<<',';o<<get<N>(t);output<N+1,Tp,Ts...>(o,t);}
template<class ...Ts>ostream&operator<<(ostream&o,const tuple<Ts...>&t){o<<'(';output<0,tuple<Ts...>,Ts...>(o,t);return o<<')';}
template<class T>void output(T t,char z=10){if(t<0)t=-t,putchar(45);int c[20];
int k=0;while(t)c[k++]=t%10,t/=10;for(k||(c[k++]=0);k;)putchar(c[--k]^48);putchar(z);}
template<class T>void outputs(T t){output(t);}
template<class S,class ...T>void outputs(S a,T...t){output(a,32);outputs(t...);}
template<class T>void output(T *a,int n){REP(i,n)cout<<a[i]<<(i!=n-1?',':'\n');}
template<class T>void output(T *a,int n,int m){REP(i,n)output(a[i],m);}
template<class T>bool input(T &t){int n=1,c;for(t=0;!isdigit(c=getchar())&&~c&&c-45;);
if(!~c)return 0;for(c-45&&(n=0,t=c^48);isdigit(c=getchar());)t=10*t+c-48;t=n?-t:t;return 1;}
template<class S,class ...T>bool input(S&a,T&...t){input(a);return input(t...);}
template<class T>bool inputs(T *a, int n) { REP(i,n) if(!input(a[i])) return 0; return 1;}

const int H = 1000;
const int W = 1000;

const int dy[] = {1,0,-1,0};
const int dx[] = {0,-1,0,1};

struct P {
  int y,x,k,d;
  bool operator<(const P &rhs)  const {
    return d > rhs.d;
  }
};
struct Field {
  char a[H][W];
  int h,w;
  int dist[H][W][4];
  bool input_hw() {
    return input(h,w);
  }
  void set_hw(int _h, int _w) {
    h = _h; w = _w;
  }
  void input_field() {
    REP(i,h)REP(j,w) cin>>a[i][j];
  }
  void bfs(int y, int x) {
    memset(dist,-1,sizeof(dist));
    queue<P> Q;
    Q.push(P{y,x,0,0});
    dist[y][x][0] = 0;
    while(!Q.empty()) {
      P p = Q.front(); Q.pop();
      int y = p.y;
      int x = p.x;
      int nk = (p.k + 1) % 4;
      REP(i,4) {
        int yy = y + dy[i];
        int xx = x + dx[i];
        if (valid(yy,xx,h,w) && ok(yy,xx,nk)) {
          int d2 = p.d + 1;
          if (dist[yy][xx][nk] == -1) {
            dist[yy][xx][nk] = d2;
            Q.push(P{yy,xx,nk,d2});
          }
        }
      }
    }
  }
  bool ok(int y, int x, int k) {
    if (a[y][x] == '#' || isdigit(a[y][x])) {
      return 0;
    }
    REP(d,4) {
      int yy = y, xx = x;
      while(1) {
        yy += dy[d];
        xx += dx[d];
        if (!valid(yy,xx,h,w)) break;
        if (a[yy][xx] == '#') break;
        if (isdigit(a[yy][xx])) {
          if ((a[yy][xx]-'0' + k) % 4 == d) return 0;
          break;
        }
      }
    }
    return 1;
  }
  int run() {
    int sy=-1,sx=-1,gy=-1,gx=-1;
    string hoge = "^>v<";
    REP(i,h)REP(j,w) {
      if (a[i][j] == 'S') sy=i,sx=j;
      if (a[i][j] == 'G') gy=i,gx=j;
      REP(k,4) if (hoge[k] == a[i][j]) a[i][j] = '0'+k;
    }
    bfs(sy,sx);
    int ans = INF;
    REP(k,4) {
      int d = dist[gy][gx][k];
      if (d != -1) chmin(ans, d);
    }
    if (ans == INF) return -1;
    else return ans;
  }
} field;

int main() {
  int T;
  cin >> T;
  REP(cs,T) {
    field.input_hw();
    field.input_field();
    int ans = field.run();
    printf("Case #%d: ", cs+1);
    if (ans >= 0) cout << ans << endl;
    else cout << "impossible" << endl;
  }
}

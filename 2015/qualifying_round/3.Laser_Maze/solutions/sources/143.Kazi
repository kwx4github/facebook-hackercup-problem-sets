#include<algorithm>
#include<cctype>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<string>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<stack>
#include<vector>
#include<deque>
#include<queue>
#include<bitset>
#include<set>
#define INF 2147483647
#define OK cout<<"OK\n";
using namespace std;

int main(){
    int T,t=0,dist[40000],m,n,i,j,k,sx,sy,gx,gy,x,y,step,top,lo;
    bool grid[100][100][4];
    char input[100][100];
    priority_queue<int>Q;
    cin>>T;
    while(t<T){
        for(i=0;i<=39999;i++)
            dist[i]=INF;
        cin>>m>>n;
        for(i=0;i<m;i++)
            for(j=0;j<n;j++){
                cin>>input[i][j];
                grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=true;
            }
        for(i=0;i<m;i++)
            for(j=0;j<n;j++){
                x=input[i][j];
                if(x=='S'){
                    sx=i;
                    sy=j;
                }
                else if(x=='G'){
                    gx=i;
                    gy=j;
                }
                else if(x=='#')
                    grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=false;
                else if(x=='<'){
                    grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=false;
                    for(k=j-1;k>=0;k--){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][0]=false;
                    }
                    for(k=i-1;k>=0;k--){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][1]=false;
                    }
                    for(k=j+1;k<n;k++){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][2]=false;
                    }
                    for(k=i+1;k<m;k++){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][3]=false;
                    }
                }
                else if(x=='^'){
                    grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=false;
                    for(k=i-1;k>=0;k--){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][0]=false;
                    }
                    for(k=j+1;k<n;k++){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][1]=false;
                    }
                    for(k=i+1;k<m;k++){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][2]=false;
                    }
                    for(k=j-1;k>=0;k--){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][3]=false;
                    }
                }
                else if(x=='>'){
                    grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=false;
                    for(k=j+1;k<n;k++){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][0]=false;
                    }
                    for(k=i+1;k<m;k++){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][1]=false;
                    }
                    for(k=j-1;k>=0;k--){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][2]=false;
                    }
                    for(k=i-1;k>=0;k--){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][3]=false;
                    }
                }
                else if(x=='v'){
                    grid[i][j][0]=grid[i][j][1]=grid[i][j][2]=grid[i][j][3]=false;
                    for(k=i+1;k<m;k++){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][0]=false;
                    }
                    for(k=j-1;k>=0;k--){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][1]=false;
                    }
                    for(k=i-1;k>=0;k--){
                        if(input[k][j]=='#'||input[k][j]=='<'||input[k][j]=='^'||input[k][j]=='>'||input[k][j]=='v')
                            break;
                        grid[k][j][2]=false;
                    }
                    for(k=j+1;k<n;k++){
                        if(input[i][k]=='#'||input[i][k]=='<'||input[i][k]=='^'||input[i][k]=='>'||input[i][k]=='v')
                            break;
                        grid[i][k][3]=false;
                    }
                }
            }
        dist[sx*100+sy]=0;
        while(!Q.empty())
            Q.pop();
        Q.push(sx*100+sy);
        while(!Q.empty()){
            top=Q.top();
            Q.pop();
            y=top%100;
            x=(top/100)%100;
            step=top/10000;
            if(y>0)
                if(grid[x][y-1][(step+1)%4])
                    if(dist[((step+1)%4)*10000+x*100+y-1]>dist[top]+1){
                        dist[((step+1)%4)*10000+x*100+y-1]=dist[top]+1;
                        Q.push(((step+1)%4)*10000+x*100+y-1);
                    }
            if(y<n-1)
                if(grid[x][y+1][(step+1)%4])
                    if(dist[((step+1)%4)*10000+x*100+y+1]>dist[top]+1){
                        dist[((step+1)%4)*10000+x*100+y+1]=dist[top]+1;
                        Q.push(((step+1)%4)*10000+x*100+y+1);
                    }
            if(x>0)
                if(grid[x-1][y][(step+1)%4])
                    if(dist[((step+1)%4)*10000+(x-1)*100+y]>dist[top]+1){
                        dist[((step+1)%4)*10000+(x-1)*100+y]=dist[top]+1;
                        Q.push(((step+1)%4)*10000+(x-1)*100+y);
                    }
            if(x<m-1)
                if(grid[x+1][y][(step+1)%4])
                    if(dist[((step+1)%4)*10000+(x+1)*100+y]>dist[top]+1){
                        dist[((step+1)%4)*10000+(x+1)*100+y]=dist[top]+1;
                        Q.push(((step+1)%4)*10000+(x+1)*100+y);
                    }
        }
        lo=INF;
        lo=min(lo,dist[gx*100+gy]);
        lo=min(lo,dist[10000+gx*100+gy]);
        lo=min(lo,dist[20000+gx*100+gy]);
        lo=min(lo,dist[30000+gx*100+gy]);
        if(lo==INF)
            cout<<"Case #"<<++t<<": impossible"<<endl;
        else
            cout<<"Case #"<<++t<<": "<<lo<<endl;
    }
    return 0;
}

import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.min;
import static java.lang.System.arraycopy;
import static java.lang.System.exit;
import static java.util.Arrays.fill;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class C {
	
	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;
	
	static class Turret {
		final int i, j, dir;

		Turret(int i, int j, int dir) {
			this.i = i;
			this.j = j;
			this.dir = dir;
		}
	}
	
	static final int DI[] = {1, 0, -1, 0};
	static final int DJ[] = {0, 1, 0, -1};
	
	static class Point {
		final int t, i, j;

		Point(int t, int i, int j) {
			this.t = t;
			this.i = i;
			this.j = j;
		}
	}
	
	static void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
		boolean wall[][] = new boolean[n][m];
		List<Turret> turrets = new ArrayList<>();
		int si = -1, sj = -1, ei = -1, ej = -1;
		for (int i = 0; i < n; i++) {
			String l = next();
			for (int j = 0; j < m; j++) {
				switch (l.charAt(j)) {
				case '.':
					break;
				case '#':
					wall[i][j] = true;
					break;
				case 'S':
					si = i;
					sj = j;
					break;
				case 'G':
					ei = i;
					ej = j;
					break;
				case 'v':
					wall[i][j] = true;
					turrets.add(new Turret(i, j, 0));
					break;
				case '>':
					wall[i][j] = true;
					turrets.add(new Turret(i, j, 1));
					break;
				case '^':
					wall[i][j] = true;
					turrets.add(new Turret(i, j, 2));
					break;
				case '<':
					wall[i][j] = true;
					turrets.add(new Turret(i, j, 3));
					break;
				default:
					throw new AssertionError();
				}
			}
		}
		boolean dynwall[][][] = new boolean[4][n][m];
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < n; j++) {
				arraycopy(wall[j], 0, dynwall[i][j], 0, m);
			}
			for (Turret t: turrets) {
				int di = DI[(t.dir + i) & 3];
				int dj = DJ[(t.dir + i) & 3];
				for (int ci = t.i + di, cj = t.j + dj; ci >= 0 && ci < n && cj >= 0 && cj < m && !wall[ci][cj]; ci += di, cj += dj) {
					dynwall[i][ci][cj] = true;
				}
			}
		}
		int dist[][][] = new int[4][n][m];
		for (int a[][]: dist) {
			for (int aa[]: a) {
				fill(aa, Integer.MAX_VALUE);
			}
		}
		Queue<Point> q = new ArrayDeque<>();
		dist[0][si][sj] = 0;
		q.add(new Point(0, si, sj));
		do {
			Point p = q.remove();
			int dis = dist[p.t][p.i][p.j];
			int nt = (p.t + 1) & 3;
			for (int d = 0; d < 4; d++) {
				int ni = p.i + DI[d];
				int nj = p.j + DJ[d];
				if (ni < 0 || ni >= n || nj < 0 || nj >= m || dynwall[nt][ni][nj] || dist[nt][ni][nj] != Integer.MAX_VALUE) {
					continue;
				}
				dist[nt][ni][nj] = dis + 1;
				q.add(new Point(nt, ni, nj));
			}
		} while (!q.isEmpty());
		int ans = Integer.MAX_VALUE;
		for (int t = 0; t < 4; t++) {
			ans = min(ans, dist[t][ei][ej]);
		}
		printCase();
		if (ans == Integer.MAX_VALUE) {
			out.println("impossible");
		} else {
			out.println(ans);
		}
	}
	
	static void printCase() {
		out.print("Case #" + test + ": ");
	}
	
	static void printlnCase() {
		out.println("Case #" + test + ":");
	}
	
	static int nextInt() throws IOException {
		return parseInt(next());
	}

	static long nextLong() throws IOException {
		return parseLong(next());
	}

	static double nextDouble() throws IOException {
		return parseDouble(next());
	}

	static String next() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(new OutputStreamWriter(System.out));
			int tests = nextInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}
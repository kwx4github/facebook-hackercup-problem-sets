#include <bits/stdc++.h>

#define INF 0x7fffffff
using namespace std;

typedef long long ll;

#ifdef DEBUG
#define dbg(arg) (printf arg)
#define LOG cout << "line:" << __LINE__ << ":" << endl;
#else
#define dbg(arg)
#define LOG
#endif

int bfs(const vector<vector<int>> &maze, const pair<int,int> start, const pair<int,int> goal) {
	int dxs[4] = { -1,  0, 1, 0 };
	int dys[4] = {  0, -1, 0, 1 };
	int m(maze.size());
	int n(maze[0].size());
	vector<vector<vector<int>>> d(m, vector<vector<int>>(n, vector<int>(4, INF)));
	queue<tuple<int,int,int>> que;
	que.push(make_tuple(start.first,start.second,0));
	d[start.second][start.first][0] = 0;
	int res(INF);
	while (!que.empty()) {
		auto p = que.front(); que.pop();
		if (get<0>(p) == goal.first && get<1>(p) == goal.second) {
			res = get<2>(p);
			break;
		}
		for (int i = 0; i < 4; ++i) {
			int nx = get<0>(p) + dxs[i];
			int ny = get<1>(p) + dys[i];
			int count = get<2>(p) + 1;
			if (0 <= nx && nx < n && 0 <= ny && ny < m && (maze[ny][nx] & (1 << (count % 4))) == 0 && d[ny][nx][count%4] == INF) {
				que.push(make_tuple(nx,ny,count));
				d[ny][nx][count%4] = count+1;
			}
		}
	}
	return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.precision(15);
	int dxs[4] = { -1,  0, 1, 0 };
	int dys[4] = {  0, -1, 0, 1 };
    size_t t;
	cin >> t;
	for (size_t idx = 0; idx < t; ++idx) {
		int m, n;
		cin >> m >> n;
		vector<vector<int>> maze(m, vector<int>(n, 0));
		vector<tuple<int,int,int>> lts;
		pair<int,int> start, goal;
		char ch;
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				cin >> ch;
				switch (ch) {
					case '.': {
						break;
					}
					case '#': {
						maze[i][j] = 0x1f;
						break;
					}
					case 'S': {
						start = make_pair(j, i);
						break;
					}
					case 'G': {
						goal = make_pair(j, i);
						break;
					}
					case '<': {
						maze[i][j] = 0x1f;
						lts.push_back(make_tuple(j,i,0));
						break;
					}
					case '>': {
						maze[i][j] = 0x1f;
						lts.push_back(make_tuple(j,i,2));
						break;
					}
					case '^': {
						maze[i][j] = 0x1f;
						lts.push_back(make_tuple(j,i,1));
						break;
					}
					case 'v': {
						maze[i][j] = 0x1f;
						lts.push_back(make_tuple(j,i,3));
						break;
					}
					default: {
						break;
					}
				}
			}
		}
		for (const auto &lt : lts) {
			int dir = get<2>(lt);
			for (int i = 0; i < 4; ++i) {
				int dx = dxs[(i+dir)%4];
				int dy = dys[(i+dir)%4];
				int x = get<0>(lt) + dx;
				int y = get<1>(lt) + dy;
				while (x >= 0 && y >= 0 && x < n && y < m && (maze[y][x] & 0xf0) == 0) {
					maze[y][x] |= (1 << i);
					x += dx;
					y += dy;
				}
			}
		}
#if 0
		for (auto vv : maze) {
			for (auto v : vv) {
				cout << v << " ";
			}
			cout << "\n";
		}
#endif
		int res = bfs(maze,start,goal);
		cout << "Case #" << idx+1 << ": ";
		if (res == INF) {
			cout << "impossible\n";
		} else {
			cout << res << "\n";
		}
	}
    return 0;
}


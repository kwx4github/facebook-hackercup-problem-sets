#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <cstdio>
#include <deque>
using namespace std;

int T, step;
int m, n;
int maze[120][120];
int visited[120][120][4];
int sx, sy, ex, ey;
int l;
int tx, ty, checked[4];

const int mx[4] = {0, 1, 0, -1};
const int my[4] = {-1, 0, 1, 0};
string S = "#.^>v<SG";

struct node {
	int x, y, s;
	node(){};
	node(int a, int b, int c): x(a), y(b), s(c){};
};

bool noLaserAtCoorAndStep(int x, int y, int s) {
	l = max(m, n);
	memset(checked, 0, sizeof checked);
	for (int i = 1; i <= l; i++) {
		for (int j = 0; j < 4; j++) {
			if (checked[j]) {
				continue;
			}
			tx = x + mx[j] * i;
			ty = y + my[j] * i;

			if (tx >= 0 && tx < n && ty >= 0 && ty < m) {
				if (maze[ty][tx] == -1) {
					checked[j] = 1;
					continue;
				}
				else if (maze[ty][tx] >= 1 && maze[ty][tx] <= 4) {
					// j    (0: up, 1: right, 2: down, 3: left)
					// maze (1: up, 2: right, 3: down, 4: left)
					if ((maze[ty][tx] - 1 + s + 4) % 4 == (j + 2) % 4) {
						return false;
					}
					else {
						checked[j] = 1;
						continue;
					}
				}
			}
		}
	}
	return true;
}

int bfs() {
	deque<node> dq;
	dq.push_back(node(sx, sy, 0));
	visited[sy][sx][0 % 4] = 1;

	while (!dq.empty()) {
		node t = dq.front();
		dq.pop_front();
		if (t.x == ex && t.y == ey) {
			return t.s;
		}

		for (int i = 0; i < 4; i++) {
			node t2(t.x + mx[i], t.y + my[i], t.s + 1);

			if (t2.x >= 0 && t2.x < n && t2.y >= 0 && t2.y < m &&
				maze[t2.y][t2.x] >= 0 &&
				!visited[t2.y][t2.x][t2.s % 4] &&
				noLaserAtCoorAndStep(t2.x, t2.y, t2.s)) {
				dq.push_back(t2);
				visited[t2.y][t2.x][t2.s % 4] = 1;
			}
		}
	}

	return -1;
}

int main() {
	string s;
	cin >> T;
	for (int C = 1; C <= T; C++) {
		cin >> m >> n;
		memset(visited, 0, sizeof visited);

		getline(cin, s);
		for (int y = 0; y < m; y++) {
			getline(cin, s);
			for (int x = 0; x < n; x++) {
				int idx = S.find(s[x]);
				maze[y][x] = idx - 1;

				if (s[x] == 'S') {
					sx = x, sy = y;
				}
				else if (s[x] == 'G') {
					ex = x, ey = y;
				}
			}
		}

		printf("Case #%d: ", C);
		if ((step = bfs()) != -1) {
			printf("%d\n", step);
		}
		else {
			printf("impossible\n");
		}
	}


	return 0;
}
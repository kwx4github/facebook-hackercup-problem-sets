#include <stdio.h>
#include <algorithm>
#include <utility>
#include <queue>

using namespace std;

char maze[110][110];
int dp[110][110][4];
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};
int code[300];
int n, m;

bool check(int x, int y, int dd)
{
    for (int d = 0; d < 4; d++) {
        for (int i = 1; ; i++) {
            int nx = x + i * dx[d], ny = y + i * dy[d];
            if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
                break;
            }

            if (maze[nx][ny] == '#') {
                break;
            }

            if (maze[nx][ny] >= 0 && maze[nx][ny] <= 3) {
                if ((d + 2) % 4 == (dd + (int)maze[nx][ny]) % 4) {
                    return false;
                }
                break;
            }
        }
    }
    return true;
}

int main()
{
    int T;

    freopen("laser_maze.txt", "r", stdin);
    freopen("ans.txt", "w", stdout);

    scanf("%d", &T);


    fill(code, code + 300, -1);
    code['>'] = 0;
    code['v'] = 1;
    code['<'] = 2;
    code['^'] = 3;

    for (int cn = 1; cn <= T; cn++) {

        scanf("%d%d", &n, &m);

        int sx, sy;

        for (int i = 0; i < n; i++) {
            scanf("%s", maze[i]);
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < 4; k++) {
                    dp[i][j][k] = -1;
                }
                if (maze[i][j] == 'S') {
                    sx = i;
                    sy = j;
                } else if (code[maze[i][j]] != -1) {
                    maze[i][j] = code[maze[i][j]];
                }
            }
        }

        queue<pair<pair<int, int>, int > > Q;

        Q.push(make_pair(make_pair(sx, sy), 0));
        dp[sx][sy][0] = 0;

        int ans = -1;

        while (!Q.empty()) {
            pair<pair<int, int>, int > u = Q.front();
            Q.pop();

            if (maze[u.first.first][u.first.second] == 'G') {
                ans = dp[u.first.first][u.first.second][u.second];
                break;
            }

            int dd = dp[u.first.first][u.first.second][u.second]; 

            for (int d = 0; d < 4; d++) {
                int x = u.first.first + dx[d], y = u.first.second + dy[d];

                if (x >= 0 && x < n && y >= 0 && y < m && (maze[x][y] == '.' || maze[x][y] == 'G' || maze[x][y] == 'S') && dp[x][y][(dd + 1) % 4] == -1) {
                    if (check(x, y, dd + 1)) {
                        dp[x][y][(dd + 1) % 4] = dd + 1;
                        Q.push(make_pair(make_pair(x, y), (dd + 1) % 4));
                    }
                }
            }

            
            
        }

        printf("Case #%d: ", cn);

        if (ans < 0) {
            printf("impossible\n");
        } else {
            printf("%d\n", ans);
        }
        
        
    }
    
    return 0;
}

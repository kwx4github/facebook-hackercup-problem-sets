#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())
#define pb push_back

#define mp make_pair
#define fi first
#define se second

#define INF (1 << 20)

typedef vector< string  > vs;
typedef vector< int > vi;
typedef vector< vi > vvi;

bool isTurret( char c ){
	return c == '^' || c == 'v' || c == '<' || c == '>'; 
}
char move( char c , int k ){
	if( k == 1 ){
		if( c == '^' ) return '>';
		if( c == '>' ) return 'v';
		if( c == 'v' ) return '<';
		if( c == '<' ) return '^';
	}
	if( k == 2 ){
		if( c == '^' ) return 'v';
		if( c == '>' ) return '<';
		if( c == 'v' ) return '^';
		if( c == '<' ) return '>';
	}
	if( c == '^' ) return '<';
	if( c == '>' ) return '^';
	if( c == 'v' ) return '>';
	if( c == '<' ) return 'v';
}
int dx[] = { -1 , 0 , 1 , 0 };
int dy[] = { 0 ,  1 , 0 , -1 };
bool valid( int a , int b ){ return a >= 0 && a < b; }
struct Node{
	int x , y , z;
	Node(){}
	Node( int x , int y , int z ) : x( x ) , y( y ) , z( z ) {}
};
int main(){
	vector< char > mapa( 300 );
	mapa[ '^' ] = 0;
	mapa[ '>' ] = 1;
	mapa[ 'v' ] = 2;
	mapa[ '<' ] = 3;
	ios_base :: sync_with_stdio( 0 );
	int cases;
	cin >> cases;
	REP( tc , cases ){
		int n , m;
		cin >> n >> m ;
		vector< vs > S( 5 , vs( n , string( m , '&' ) ) );

		REP( i , n ) cin >> S[ 0 ][ i ];

		REP( k , 5 ) S[ k ] = S[ 0 ];
		

		
		for( int k = 1 ; k < 4 ; ++k )
			REP( i , n ) REP( j , m ) if( isTurret( S[ k ][ i ][ j ] ) ){
				S[ k ][ i ][ j ] = move( S[ k ][ i ][ j ] , k );
			}else if( S[ k ][ i ][ j ] == 'S' ) S[ k ][ i ][ j ] = '.';
		
		/*
				. (empty space) 
				# (wall) 
				S (starting position) 
				G (goal) 
				< > ^ v (laser turrets) 
		*/

		REP( k , 4 ) REP( i , n ) REP( j , m ){
			if( isTurret( S[ k ][ i ][ j ] ) ){
				
				for( int dir = mapa[ S[ k ][ i ][ j ] ] , len = 1 ;  ; ++len ){
					int x = i + dx[ dir ] * len , y = j + dy[ dir ] * len;
					
					if( valid( x , n ) && valid( y , m ) ){
						char &c = S[ k ][ x ][ y ];
						if( (c == '.' || c == 'G' || c == 'S') ) {
							c = '#';
						}
						else break;
					}else break;
				}
				S[ k ][ i ][ j ] = '#';
			}
		}
		REP( i , n ) REP( j , m ) {
			char &c = S[ 4 ][ i ][ j ];
			if( isTurret( c ) || c == 'G' ) {
				c = '#';
			}
		}
		
		/*			
		REP( k , 5 ){
			REP( i , n ) cout << S[ k ][ i ] << endl;
			cout << endl;
		}
		*/
		
		int sx = -1 , sy , sz;
		REP( i , n )REP( j , m ) if( S[ 4 ][ i ][ j ] == 'S' ) sx = i , sy = j , sz = 4;
		
		S[ sz ][ sx ][ sy ] = '.';
		
		/*	
		REP( k , 5 ){
			REP( i , n ) cout << S[ k ][ i ] << endl;
			cout << endl;
		}
		*/
		queue< Node > Q;
		vector< vvi > dist( 5 , vvi( n , vi( m , INF ) ) );
		Q.push( Node( sx , sy , sz ) );
		dist[ sz ][ sx ][ sy ] = 0;
		int solution = INF;
		while( !Q.empty() ){
			Node p = Q.front();
			Q.pop();
			int x = p.x , y = p.y , z = p.z;
			if( S[ z ][ x ][ y ] == 'G' ) solution = min( solution , dist[ z ][ x ][ y ] );
			REP( k , 4 ){
				int nx = x + dx[ k ] , ny = y + dy[ k ] , nz = (z + 1)%4;
				if( z == 4 ) nz = 1;
				if( valid( nx , n ) && valid( ny , m ) && S[ nz ][ nx ][ ny ] != '#' && dist[ nz ][ nx ][ ny ] >= INF ){
					Q.push( Node( nx , ny , nz ) );
					dist[ nz ][ nx ][ ny ] = dist[ z ][ x ][ y ] + 1;
				}
			}
		}
		if( solution >= INF ){
			printf( "Case #%d: impossible\n" , tc + 1 );
			continue;
		}
		printf( "Case #%d: %d\n" , tc + 1 , solution );
	}
}



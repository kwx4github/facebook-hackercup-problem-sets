#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <limits>
#include <set>
#include <cmath>
#include <cstring>

using namespace std;
#define pb push_back

/*#include <fstream>
ifstream fin("input.txt");
ofstream fout("output.txt");*/
#define MAXN 103
int T,M,N,ip,jp,ia,ja;
char riga[MAXN];
int dist[MAXN][MAXN][4];
vector<tuple<int,int,int> > torri;
int dI[]={1,0,-1,0},dJ[]={0,1,0,-1};


int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    scanf("%d",&T);
    for(int t=1;t<=T;++t)
    {
        scanf("%d%d",&N,&M);
        memset(dist,-1,sizeof dist);
        torri.clear();

        for(int i=0;i<N;++i)
        {
            scanf("%s",riga);
            for(int j=0;j<M;++j)
            {
                if(riga[j]=='#') dist[i][j][0]=dist[i][j][1]=dist[i][j][2]=dist[i][j][3]=-2;
                else if(riga[j]=='S') ip=i,jp=j;
                else if(riga[j]=='G') ia=i,ja=j;
                else if(riga[j]!='.')
                {
                    dist[i][j][0]=dist[i][j][1]=dist[i][j][2]=dist[i][j][3]=-2;
                    if(riga[j]=='^') torri.emplace_back(i,j,0);
                    else if(riga[j]=='>') torri.emplace_back(i,j,1);
                    else if(riga[j]=='v') torri.emplace_back(i,j,2);
                    else if(riga[j]=='<') torri.emplace_back(i,j,3);
                }
            }
        }

        for(int mod=0;mod<4;++mod)
        {
            for(int pos=0;pos<torri.size();++pos)
            {
                int i,j,dir,deltai=0,deltaj=0;
                tie(i,j,dir)=torri[pos];
                dir=(dir+mod)%4;
                if(dir==0) deltai=-1;
                else if(dir==1) deltaj=1;
                else if(dir==2) deltai=1;
                else deltaj=-1;
                i+=deltai,j+=deltaj;
                for(;i>=0 && i<N && j>=0 && j<M;i+=deltai,j+=deltaj)
                {
                    if(dist[i][j][mod]==-2) break;
                    else dist[i][j][mod]=-2;
                }
            }
        }

        queue<tuple<int,int,int>> Q;
        Q.push(make_tuple(ip,jp,0));
        dist[ip][jp][0]=0;
        while(!Q.empty())
        {
            int i,j,mod;
            tie(i,j,mod)=Q.front();
            Q.pop();
            for(int dir=0;dir<4;++dir)
            {
                if(i+dI[dir]<0 || i+dI[dir]>=N || j+dJ[dir]<0 || j+dJ[dir]>=M ) continue;
                if(dist[i+dI[dir]][j+dJ[dir]][(mod+1)%4]==-1)
                {
                    dist[i+dI[dir]][j+dJ[dir]][(mod+1)%4]=dist[i][j][mod]+1;
                    Q.push(make_tuple(i+dI[dir],j+dJ[dir],(mod+1)%4));
                }
            }
        }

        int sol=1000000000;
        for(int i=0;i<4;++i) if(dist[ia][ja][i]!=-1 && dist[ia][ja][i]!=-2) sol=min(sol,dist[ia][ja][i]);
        if(sol==1000000000) printf("Case #%d: impossible\n",t);
        else printf("Case #%d: %d\n",t,sol);

    }
    return 0;
}

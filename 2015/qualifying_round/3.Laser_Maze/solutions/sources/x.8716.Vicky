#include <iostream>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>

#define inf (1 << 30)
#define INF (1<<45LL)
#define pb push_back
#define mp make_pair
using namespace std;

typedef pair<int, int> pi;
typedef long long ll;

int n, m;
int dist[200][200][4];
bool vis[200][200][4];
bool kill[200][200][4];

char gra[200][200];

pi sta, fin;

pi rot[4];


int dirX[] = {1, -1, 0,  0};
int dirY[] = {0,  0, 1, -1};

struct Gun{
	int x, y, dir;
};

vector<Gun> mach;

inline int bfs(){
	
	int state = 0;
	dist[sta.first][sta.second][state] = 0;
	
	queue< pair<pi, int> > Q;
	
	Q.push( mp( mp(sta.first, sta.second), 0 ) );
	
	int ret = inf;
	
	while(!Q.empty()){
		
		pi pos = Q.front().first;
		int curState = Q.front().second;
		Q.pop();
		
		if(pos.first == fin.first && pos.second == fin.second)
		{
			ret = dist[fin.first][fin.second][curState];
			break;
		}
		
		for(int i=0; i < 4; i++){
			
			int nn = pos.first + dirX[i];
			int nm = pos.second + dirY[i];
			
			if(nn > n || nm > m || nn <= 0 || nm <= 0) continue;
			
			int newState = curState + 1;
			newState %= 4;
			if(vis[nn][nm][newState]) continue;
			if(kill[nn][nm][newState]) continue;
			if(gra[nn][nm] == '#') continue;
			if(gra[nn][nm] == '^' || gra[nn][nm] == '>' || gra[nn][nm] == 'v' || gra[nn][nm] == '<') continue;
			
			dist[nn][nm][newState] = dist[pos.first][pos.second][curState] + 1;
			vis[nn][nm][newState] = true;
			Q.push( mp( mp(nn, nm), newState));
		}
	}
	
	
	return ret;
}
int main(){

	int t; cin >> t;
	
	rot[0] = mp(-1, 0);
	rot[1] = mp(0, 1);
	rot[2] = mp(1, 0);
	rot[3] = mp(0, -1);
	
	for(int i=1; i <= t; i++){
		
		memset(dist, inf, sizeof dist);
		memset(vis, false, sizeof vis);
		memset(kill, false, sizeof kill);
		
		cin >> n >> m;
		
		mach.clear();
		sta = mp(-1, -1);
		fin = mp(-1, -1);
		for(int j=1; j <= n; j++){
			for(int k=1; k <= m; k++){
				cin >> gra[j][k];
				
				if(gra[j][k] == 'S') sta = mp(j, k);
				
				if(gra[j][k] == 'G') fin = mp(j, k);
					
				if(gra[j][k] == '^' || gra[j][k] == '<' || gra[j][k] == '>' || gra[j][k] == 'v') {
					int dir;
					if(gra[j][k] == '^') dir = 0;
					if(gra[j][k] == '>') dir = 1;
					if(gra[j][k] == 'v') dir = 2;
					if(gra[j][k] == '<') dir = 3;
					Gun cur; cur.x = j; cur.y = k; cur.dir = dir;
					mach.pb(cur);

				}
			}
		}

		for(int j=0; j < mach.size(); j++){
			
			int x, y, dir = mach[j].dir;
			
			for(int state=0; state < 4; state++, dir++){
				dir %= 4; x = mach[j].x, y = mach[j].y;
				
				while(x <= n && y <= m && x > 0 && y > 0){
					x += rot[dir].first;y += rot[dir].second;
					
					if(gra[x][y] == '^' || gra[x][y] == '>' || gra[x][y] == 'v' || gra[x][y] == '<') break;
					if(gra[x][y] == '#') break;

					kill[x][y][state] = true;

				}
			}
		}
		
		int ans = bfs();
		
		cout << "Case #" << i << ": ";
		if(ans == inf) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}

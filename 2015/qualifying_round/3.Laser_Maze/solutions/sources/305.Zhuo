#include<iostream>
#include<algorithm>
#include<string.h>
#include<vector>
#include<queue>
using namespace std;

bool can[105][105][5];
bool vis[105][105][5];
char m[105][105];
int startx, starty, endx, endy;
int row, col;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

struct cmp
{
	bool operator() (pair<int, pair<int, int> > a, pair<int, pair<int, int> > b)
	{
		return a.first > b.first;
	}
};

int main()
{
	freopen("d:\\3.txt", "r", stdin);
	freopen("d:\\3-out.txt", "w", stdout);
	
	int T;
	cin>>T;
	for(int kase = 1; kase <= T; ++kase)
	{
		memset(can, true, sizeof(can));
		memset(vis, false, sizeof(vis));
		cin>>row>>col;
		for(int i = 0; i < row; ++i)
			for(int j = 0; j < col; ++j)
				cin>>m[i][j];
				
		for(int i = 0; i < row; ++i)
			for(int j = 0; j < col; ++j)
			{
				int start = -1;
				if(m[i][j] == 'S')
				{
					startx = i;
					starty = j;
					continue;
				}
				if(m[i][j] == 'G')
				{
					endx = i;
					endy = j;
					continue;
				}
				
				if(m[i][j] == '^')
				{
					start = 0;
				}
				if(m[i][j] == '>')
				{
					start = 1;
				}
				if(m[i][j] == 'v')
				{
					start = 2;
				}
				if(m[i][j] == '<')
				{
					start = 3;
				}
				
				if(start != -1)
				{
					for(int k = 0; k < 4; ++k)
					{
						int x = i;
						int y = j;
						int d = (start + k) % 4;
						
						while(true)
						{
							x = x + dx[d];
							y = y + dy[d];
							if(x < 0 || x >= row || y < 0 || y >= col)
								break;
							if(m[x][y] != '.' && m[x][y] != 'S' && m[x][y] != 'G')
								break;
							can[x][y][k] = false;
						}
					}
				}
			}
			
		int ans = -1;
		priority_queue<pair<int, pair<int, int> >, vector<pair<int, pair<int, int> > >, cmp> q;
		q.push(make_pair(0, make_pair(startx, starty)));
		while(!q.empty())
		{
			pair<int, pair<int, int> > p = q.top();
			int dist = p.first;
			int curx = p.second.first;
			int cury = p.second.second;
			q.pop();

			if(vis[curx][cury][dist%4])
				continue;
			//cout<<curx<<" "<<cury<<" "<<dist<<endl;
			vis[curx][cury][dist%4] = true;
			if(curx == endx && cury == endy)
			{
				ans = dist;
				break;
			}
						
			for(int i = 0; i < 4; ++i)
			{
				int x = curx + dx[i];
				int y = cury + dy[i];
				if(x < 0 || y < 0 || x >= row || y >= col)
					continue;
				if(!vis[x][y][(dist+1)%4] && can[x][y][(dist+1)%4])
				{
					if(m[x][y] == '#' || m[x][y] == '^' || m[x][y] == '>' || m[x][y] == 'v' || m[x][y] == '<')
						continue;
					q.push(make_pair(dist+1, make_pair(x, y)));
				}
			}
		}
		
		cout<<"Case #"<<kase<<": ";
		if(ans == -1)
			cout<<"impossible"<<endl;
		else
			cout<<ans<<endl;
		//cout<<endl<<endl<<endl;
	}

	return 0;
}

#include <stdio.h>
#include <algorithm>
#include <queue>

using namespace std;

int T;
char board[101][101];
char new_board[101][101];
bool check[101][101][4];
int n,m;
int sx, sy;
int ex, ey;

class status{
public:
	int x, y;
	int step;
};

void make_board(int step) {
	char turret[4]={'^', '>', 'v', '<'};
	int i, j, k;
	for(i=0;i<n;i++) for(j=0;j<m;j++) {
		new_board[i][j] = board[i][j];
		if(board[i][j] == '^') new_board[i][j] = turret[step % 4];
		else if(board[i][j] == '>') new_board[i][j] = turret[(1+step) % 4];
		else if(board[i][j] == 'v') new_board[i][j] = turret[(2+step) % 4];
		else if(board[i][j] == '<') new_board[i][j] = turret[(3+step) % 4];
	}

	for(i=0;i<n;i++) for(j=0;j<m;j++) {
		if(new_board[i][j] == '^')
			for(k=i-1;k>=0;k--) {
				if(new_board[k][j] != 'S' && new_board[k][j] != 'G' && new_board[k][j] != '.') continue;
				new_board[k][j] = '#';
			}
		if(new_board[i][j] == '>')
			for(k=j+1;k<m;k++) {
				if(new_board[i][k] != 'S' && new_board[i][k] != 'G' && new_board[i][k] != '.') continue;
				new_board[i][k] = '#';
			}
		if(new_board[i][j] == 'v')
			for(k=i+1;k<n;k++) {
				if(new_board[k][j] != 'S' && new_board[k][j] != 'G' && new_board[k][j] != '.') continue;
				new_board[k][j] = '#';
			}
		if(new_board[i][j] == '<')
			for(k=j-1;k>=0;k--) {
				if(new_board[i][k] != 'S' && new_board[i][k] != 'G' && new_board[i][k] != '.') continue;
				new_board[i][k] = '#';
			}
	}
}

int solve() {
	int i,j,k, x, y;
	int sw_x[4] = {1,-1, 0, 0};
	int sw_y[4] = {0,0, 1, -1};
	queue<status> sq;

	for(i=0;i<n;i++) for(j=0;j<m;j++) {
		for(k=0;k<4;k++) check[i][j][k] = false;
	}


	for(i=0;i<n;i++) for(j=0;j<m;j++) if(board[i][j]=='S'){
		status s;
		s.x = i; s.y = j; s.step = 0; sq.push(s);

		check[s.x][s.y][0] = true;
	}
	while(!sq.empty()) {
		status now = sq.front();
		sq.pop();

		if(new_board[now.x][now.y] == 'G') return now.step;


		if(now.step > 0) {
			make_board(now.step);
			if(new_board[now.x][now.y] == '#') continue;
		}
		make_board(now.step+1);

/*
		printf("step %d\n", now.step+1);
	for(i=0;i<n;i++) {
		for(j=0;j<m;j++) printf("%c",new_board[i][j]);
		printf("\n");
	}
	printf("\n");
*/


		for(i=0;i<4;i++) {
			x = now.x + sw_x[i];
			y = now.y + sw_y[i];
			if(x < 0 || x >= n || y < 0 || y >= m) continue;

			status s;
			s.x = x; s.y = y; s.step = now.step + 1;
			if(check[s.x][s.y][s.step % 4] == false) {
				sq.push(s);
				check[s.x][s.y][s.step % 4] = true;
			}
		}
	}

	return -1;
}

int main() {
	int testcase, i, j;

	freopen("cc.in","r",stdin);
	freopen("cc.out","w",stdout);

	scanf("%d",&T);

	for(testcase = 1; testcase<=T; testcase++) {
		scanf("%d %d",&n,&m);
		for(i=0;i<n;i++) scanf("%s", board[i]);
		int res = solve();
		if(res > 0)	printf("Case #%d: %d\n", testcase, res);
		else printf("Case #%d: impossible\n", testcase);
	}


}

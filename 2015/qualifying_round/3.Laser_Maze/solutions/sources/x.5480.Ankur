#include<iostream>
#include<vector>
#include<cmath>
#include<utility>
#include<string>
#include<map>
#include<fstream>
#include<set>
#include<algorithm>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string,int> msi;

#define REP(i,a,b)   for(int i=a;i<=b;i++)
#define TRvi(c,it)   for(vi::iterator it=c.begin();it!=c.end();it++)
#define TRvii(c,it) for(vii::iterator it = c.begin();it!=c.end();it++)
#define TRmsi(c,it)  for(msi::iterator it=c.begin();it!=c.end();it++)

    #define INF 20000000
    #define pb push_back
    #define mp make_pair
    #define ff first
    #define ss second
    #define sz size()
    #define ln length()
    #define rep(i,n) for(int i=0;i<n;i++)
    #define fu(i,a,n) for(int i=a;i<=n;i++)
    #define fd(i,n,a) for(int i=n;i>=a;i--)
    #define all(a)  a.begin(),a.end()
    #define ESP (1e-9)

    #define gi(n) scanf("%d",&n)
    #define gl(n) cin >> n
    #define fl(n) in>>n
    #define pi(n) printf("%d",n)
    #define pl(n) cout << n
    #define ps printf(" ")
    #define pn printf("\n")

int M,N;
vector< vii> laser;
vvvi dp(M,vvi(N,vi(4,INF)));
vector<string> maze;
string temp;
int sx,sy,ex,ey;

bool killed(int i, int j, int c)
{
    fu(z,0,3)
    {
        TRvii(laser[z],it)
        {
            int lr=it->first, lc = it->second;
            int k = (z+c)%4;
            if(k==0)
            {
                if(lc==j && i<lr) return true;
            }
            else if(k==1)
            {
                if(i==lr && j>lc) return true;
            }
            else if(k==2)
            {
                if(j==lc && i>lr) return true;
            }
            else if(k==3)
            {
                if(i==lr && j<lc) return true;
            }
        }
    }
    return false;
}
bool outRange(int i, int j)
{
    if(i<0 || i>=M || j<0 || j >=N) return true;
    return false;
}
bool repeat(int i, int j, int c)
{
    if(dp[i][j][c]==2*INF) return true;
    return false;
}
bool obsticle(int i, int j)
{
 if(maze[i][j]=='#'||maze[i][j]=='^'||maze[i][j]=='v'||maze[i][j]=='>'||maze[i][j]=='<'||maze[i][j]=='#')return true;
 return false;
}
int small(int i,int j, int c)
{
    if(outRange(i,j)) return INF;
    if(repeat(i,j,c)) return INF;
    if(dp[i][j][c]==INF)
    {
        dp[i][j][c]=2*INF;
        if(obsticle(i,j)) return dp[i][j][c];
         if( !(i==sx && j==sy && c==0) && killed(i,j,c))return dp[i][j][c];
        int k =(c+1)%4;
        dp[i][j][c]=1+min(min(small(i-1,j,k),small(i+1,j,k)),min(small(i,j-1,k),small(i,j+1,k)));
    }
    return dp[i][j][c];
}
int main()
{
    fstream in("laser_maze.txt");
    fstream out("output.txt");
    int t;in>>t;
    fu(kl,1,t)
    {
        laser.clear();
        dp.clear();
        laser.resize(4);
        in>>M;in>>N;
        maze.clear();
        dp.resize(M,vvi(N,vi(4,INF)));
        fu(i,1,M){in>>temp;maze.pb(temp);}
        fu(i,0,M-1)
        {
            fu(j,0,N-1)
            {

                if(maze[i][j]=='^') laser[0].pb(mp(i,j));
                else if(maze[i][j]=='>') laser[1].pb(mp(i,j));
                else if(maze[i][j]=='v') laser[2].pb(mp(i,j));
                else if(maze[i][j]=='<') laser[3].pb(mp(i,j));
                else if(maze[i][j]=='S'){sx=i;sy=j;}
                else if(maze[i][j]=='G'){ex=i;ey=j;}
            }
        }

        fu(i,0,3)if(!killed(ex,ey,i)){dp[ex][ey][i]=0;}
//        Case #1: 6

        int ans = small(sx,sy,0);
        if(ans>=INF) out<<"Case #"<<kl<<": "<<"impossible\n";
        else out<<"Case #"<<kl<<": "<<ans<<"\n";
    }
    return 0;
}

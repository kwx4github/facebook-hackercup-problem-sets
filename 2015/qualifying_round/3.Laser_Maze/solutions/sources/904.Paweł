#include<cstdio>
#include<queue>
#include<tuple>
#define MAXS 102
using namespace std;

int n,w,h;

char I[MAXS][MAXS];
bool M[4][MAXS][MAXS];
int s, g;

int D[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};


void go(int x, int y, int dx, int dy, int i){
    if(y < 0 || x < 0 || x >= w || y >= h)return;

    if(I[y][x] != '.')return;
    M[i][y][x] = true;
    go(x+dx,y+dy,dx,dy,i);
}

int BFS(int x0, int y0, int x1, int y1){
    queue<tuple<int,int,int> > Q;//x,y,k,dst
    
    Q.push(make_tuple(x0, y0, 0));

    while(!Q.empty()){
        auto s = Q.front();
        if(get<0>(s) == x1 && get<1>(s) == y1)
            return get<2>(s);
        Q.pop();

        for(int d = 0; d < 4; d++){
            int x = get<0>(s)+D[d][0], y = get<1>(s)+D[d][1], dst = get<2>(s)+1;
            if(x >= 0 && y >= 0 && y<h && x<w && M[dst%4][y][x] == false){
                M[dst%4][y][x] = true;
                Q.push(make_tuple(x,y,dst));
            }
        }
    }

    return -1;
}

int main(){
    scanf("%d",&n);

    for(int t=0;t<n;t++){
        scanf("%d%d",&h,&w);

        for(int i=0;i<h;i++)
            scanf("%s",I[i]);

        int x0, y0, x1, y1;
        for(int y=0;y<h;y++)
            for(int x=0;x<w;x++)
                if(I[y][x] == 'S'){x0 = x;y0 = y;I[y][x] = '.';}else
                if(I[y][x] == 'G'){x1 = x;y1 = y;I[y][x] = '.';}

        for(int i=0;i<4;i++){
            for(int y=0;y<h;y++)
                for(int x=0;x<w;x++)
                    M[i][y][x] = false;

            for(int y=0;y<h;y++)
                for(int x=0;x<w;x++){
                    int k = -1;
                    if(I[y][x]=='<')k = 0;else
                    if(I[y][x]=='^')k = 1;else
                    if(I[y][x]=='>')k = 2;else
                    if(I[y][x]=='v')k = 3;else
                    if(I[y][x]=='#')M[i][y][x] = true;

                    if(k!=-1){
                        M[i][y][x] = true;
                        k = (k+i)%4;
                        go(x+D[k][0], y+D[k][1], D[k][0], D[k][1], i);
                    }
                }
        }

        int v = BFS(x0, y0, x1, y1);
        printf("Case #%d: ", t+1);
        if(v == -1)printf("impossible\n");
        else printf("%d\n", v);   
    }

    return 0;
}
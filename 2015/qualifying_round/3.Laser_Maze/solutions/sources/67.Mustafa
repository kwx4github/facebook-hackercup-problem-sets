#include <iostream>
#include <map>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

int direction[4][2] = {
  { -1,  0}, // north
  {  0,  1}, // east
  {  1,  0}, // south
  {  0, -1}, // west
};
#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3

int main()
{
	int T;
	std::cin >> T;

	for (int caseN = 1; caseN <= T; ++caseN)
	{
		int rows, cols;
		cin >> rows >> cols;

		int startRow, startCol;
		int endRow, endCol;

		vector<vector<char> > base(rows+2, vector<char>(cols+2, '#'));

		for (int r = 1; r <= rows; ++r)
		{
			for (int c = 1; c <= cols; ++c)
			{
				cin >> base[r][c];
				if (base[r][c] == 'S')
				{
					startRow = r;
					startCol = c;
					base[r][c] = '.';
				}
				if (base[r][c] == 'G')
				{
					endRow = r;
					endCol = c;
					base[r][c] = '.';
				}
			}
		}

		vector<vector<char> > mazeTime[4] = {base, base, base, base};
		map<char, int> dirMap;
		dirMap['<'] = WEST;
		dirMap['>'] = EAST;
		dirMap['^'] = NORTH;
		dirMap['v'] = SOUTH;

		for (int r = 1; r <= rows; ++r)
		{
			for (int c = 1; c <= cols; ++c)
			{
				if ( base[r][c] != '<' && base[r][c] != '>'
				  && base[r][c] != '^' && base[r][c] != 'v')
					continue;

				int dir = dirMap[base[r][c]];
				for (int time = 0; time < 4; ++time)
				{
					// Fill the current direction
					int curR = r + direction[dir][0];
					int curC = c + direction[dir][1];

					// + is a marker for laser shot
					while (mazeTime[time][curR][curC] == '.' || mazeTime[time][curR][curC] == '+')
					{
						mazeTime[time][curR][curC] = '+';
						curR += direction[dir][0];
						curC += direction[dir][1];
					}

					dir = (dir + 1) % 4;
				}
			}
		}

		// Start bfs

		// pos -> steps taken
		queue<pair<pair<int, int>, int> > que;
		que.push(make_pair(make_pair(startRow, startCol), 0));

		while (que.size())
		{
			int row = que.front().first.first;
			int col = que.front().first.second;
			int time = que.front().second;
			que.pop();

			if (row == endRow && col == endCol)
			{
				std::cout << "Case #" << caseN << ": " << time << std::endl;
				goto next_case;
			}

			// Searh for newx possible moves
			for (int dir = 0; dir < 4; ++dir)
			{
				int nextRow = row + direction[dir][0];
				int nextCol = col + direction[dir][1];
				int nextTime = time + 1;

				if (mazeTime[nextTime%4][nextRow][nextCol] == '.')
				{
					que.push(make_pair(make_pair(nextRow, nextCol), nextTime));
					// Mark next cell as visited, for this time
					mazeTime[nextTime%4][nextRow][nextCol] = '#';

				}
			}
		}

		std::cout << "Case #" << caseN << ": impossible" << std::endl;

		next_case:;
	}

	return 0;
}

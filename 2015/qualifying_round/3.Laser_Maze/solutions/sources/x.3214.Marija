#include <cstdio>
#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

struct tocka{
    int x, y, koraci;
    tocka(){ x = y = koraci = 0; }

    tocka( int _x, int _y, int _k ){
        x = _x; y = _y; koraci = _k;
    }
};


const int maxn = 200;

int T;
int N, M;

const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, -1, 0, 1 };

queue< tocka > Q;
int laseri[ maxn ][ maxn ];
int bio[ maxn ][ maxn ];
char a[ maxn ][ maxn ];

tocka start, kraj;

bool ok( int x, int y ){
    return x >= 0 && y >= 0 && x < N && y < M && a[ x ][ y ] != '#';
}

int kojitip( char c ){
    if( c == '^' ) return 1;
    if( c == '>' ) return 2;
    if( c == 'v' ) return 3;
    if( c == '<' ) return 4;
}

int koji( char c, int koliko ){
    int tip = kojitip( c );

    for( int i = 0; i < koliko; i ++ ){
        tip ++; if( tip == 5 ) tip = 1;
    }

    return tip;
}

bool moze( int x, int y, int koraci ){
    for( int i = x; ok( i, y ); i ++ ){
        if( a[ i ][ y ] != '.' && a[ i ][ y ] != 'S' && a[ i ][ y ] != 'G' )
            if( koji( a[ i ][ y ], koraci ) == 1 ) return false;
    }
    for( int i = x; ok( i, y ); i -- ){
        if( a[ i ][ y ] != '.' && a[ i ][ y ] != 'S' && a[ i ][ y ] != 'G' )
            if( koji( a[ i ][ y ], koraci ) == 3 ) return false;
    }
    for( int i = y; ok( x, i ); i ++ ){
        if( a[ x ][ i ] != '.' && a[ x ][ i ] != 'S' && a[ x ][ i ] != 'G' )
            if( koji( a[ x ][ i ], koraci ) == 4 ) return false;
    }
    for( int i = y; ok( x, i ); i -- ){
        if( a[ x ][ i ] != '.' && a[ x ][ i ] != 'S' && a[ x ][ i ] != 'G' )
            if( koji( a[ x ][ i ], koraci ) == 2 ) return false;
    }

    return true;

}

void rijesi(){
    memset( bio, 0, sizeof bio );
    while( !Q.empty() ) Q.pop();

    bio[ start.x ][ start.y ] = 1;
  //  if( !moze( start.x, start.y, 0 ) ){ printf( "impossible\n" ); return; }

    for( Q.push( start ); !Q.empty(); Q.pop() ){

        tocka trenutna = Q.front();
        if( trenutna.x == kraj.x && trenutna.y == kraj.y ){ printf( "%d\n", trenutna.koraci ); return; }

        for( int i = 0; i < 4; i ++ ){
            tocka tmp = tocka( trenutna.x + dx[ i ], trenutna.y + dy[ i ], trenutna.koraci + 1 );

            if( ok( tmp.x, tmp.y ) && moze( tmp.x, tmp.y, tmp.koraci ) && bio[ tmp.x ][ tmp.y ] < 4  ){
                bio[ tmp.x ][ tmp.y ] ++;
                Q.push( tmp );
            }
        }
    }

    printf( "impossible\n" );
}

void ucitaj(){
    scanf( "%d%d", &N, &M );
    for( int i = 0; i < N; i ++ ){
        for( int j = 0; j < M; j ++ ){
            cin >> a[ i ][ j ];
            if( a[ i ][ j ] == 'S' ) start = tocka( i, j, 0 );
            if( a[ i ][ j ] == 'G' ) kraj = tocka( i, j, 0 );
        }
    }
}


int main( void ){
    int T;
    scanf( "%d", &T );
    for( int i = 0; i < T; i ++ ){
        ucitaj();
        printf( "Case #%d: ", i + 1 );
        rijesi();
    }

return 0;
}

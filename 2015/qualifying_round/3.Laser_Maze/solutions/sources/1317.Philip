#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <tuple>
#include <regex>
#include <array>
#include <valarray>
#define all(v)begin(v),end(v)
#define dump(v)copy(begin(v),end(v),ostream_iterator<decltype(*begin(v))>(cout,"\n"))
#define rg(i,a,b)for(int i=a,i##e=b;i<i##e;++i)
#define fr(i,n)for(int i=0,i##e=n;i<i##e;++i)
#define rf(i,n)for(int i=n-1;i>=0;--i)
#define ei(a,m)for(auto&a:m)if(int a##i=&a-&*begin(m)+1)if(--a##i,1)
#define ec(i,m)for(int i=0,i##e=m.size();i<i##e;++i)
#define sz(v)int(v.size())
#define sr(v)sort(begin(v),end(v))
#define rs(v)sort(begin(v),end(v),greater<decltype(*begin(v))>())
#define rev(v)reverse(begin(v),end(v))
#define eb emplace_back
#define big numeric_limits<int>::max()
#define g(t,i)get<i>(t)
#define cb(v,w)copy(begin(v),end(v),back_inserter(w))
#define uni(v)sort(begin(v),end(v));v.erase(unique(begin(v),end(v)),end(v))
#define vt(...)vector<tuple<__VA_ARGS__>>
#define smx(a,b)a=max(a,b)
#define smn(a,b)a=min(a,b)
#define perm(v)next_permutation(begin(v),end(v))
#define perms(v)for(int c=(sort(begin(v),end(v)),1);c||next_permutation(all(v));c=0)
typedef long long ll;
using namespace std;

int main() {
	ifstream cin("laser_maze.txt");
	ofstream cout("output.txt");
	const string tur = "^>v<";
	const int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
	int T;
	cin >> T;
	fr(cc, T) {
		//cerr << cc + 1 << endl;
		int M, N;
		cin >> M >> N;
		vector<string> m(M);
		fr(i, M) {
			cin >> m[i];
			if (sz(m[i]) != N) throw 42;
		}
		int sx, sy, gx, gy;
		sx = sy = gx = gy = -1;
		ei(a, m) ei(b, a) {
			if (b == 'S') sx = ai, sy = bi, b = '.';
			if (b == 'G') gx = ai, gy = bi, b = '.';
		}
		vector<vector<vector<char>>> safe(4, vector<vector<char>>(M, vector<char>(N)));
		fr(i, 4) fr(j, M) fr(k, N) {
			bool f = m[j][k] == '.';
			fr(d, 4) {
				for (int x = j, y = k; 0 <= x && x < M && 0 <= y && y < N; x += dx[d], y += dy[d]) {
					char c = m[x][y];
					if (c == '#') break;
					if (c == '.') continue;
					if ((tur.find(c) + i + 2) % 4 != d) break;
					f = false;
					break;
				}
			}
			safe[i][j][k] = f;
		}
		/*fr(i, 4) {
			fr(j, M) {
				fr(k, N) {
					cerr << (safe[i][j][k] ? "+" : ".");
				}
				cerr << endl;
			}
			cerr << endl;
		}*/
		vector<vector<vector<int>>> n(4, vector<vector<int>>(M, vector<int>(N, -1)));
		n[0][sx][sy] = 0; // safe[0][sx][sy] ? 0 : -1;
		bool f;
		do {
			f = false;
			fr(i, 4) {
				fr(j, M) fr(k, N) {
					if (safe[i][j][k]) fr(d, 4) {
						int nj = j + dx[d], nk = k + dy[d];
						if (!(0 <= nj && nj < M && 0 <= nk && nk < N)) continue;
						int u = n[(i + 3) % 4][nj][nk];
						if (u < 0) continue;
						if (n[i][j][k] < 0 || n[i][j][k] > u + 1) {
							n[i][j][k] = u + 1;
							f = true;
						}
					}
				}
			}
			/*fr(i, 4) {
				fr(j, M) {
					fr(k, N) {
						if (n[i][j][k] < 0) {
							cerr << '.';
						} else if (n[i][j][k] < 10) {
							cerr << n[i][j][k];
						} else {
							cerr << (char)(n[i][j][k] - 10 + 'A');
						}
					}
					cerr << endl;
				}
				cerr << endl;
			}*/
		} while (f);
		int mn = big;
		fr(i, 4) if (n[i][gx][gy] >= 0) mn = min(mn, n[i][gx][gy]);
		cout << "Case #" << cc + 1 << ": ";
		if (mn == big) {
			cout << "impossible";
		} else {
			cout << mn;
		}
		cout << endl;
	}
	system("pause");
}
T=int(input())
for case_id in range(1,T+1):
    M,N = map(int,input().split()) #h w
    m = [list(input()) for y in range(M)]
    lasers = ['<','^','>','v']
    valid = ['.','S','G']
    dirs = [(-1,0),(0,1),(1,0),(0,-1)]
    def solve():
        def find(ch):
            for y in range(M):
                for x in range(N):
                    if m[y][x] == ch: return (x,y)

        S,G,NewTurn = find('S'),find('G'),(-1,-1)
        V = {S:1} #visited
        L = {} #lasers

        for y in range(M):
            for x in range(N):
                if m[y][x] in lasers:
                    for i in range(0,x):
                        if m[y][i] not in valid: break
                        L.setdefault((i,y),[]).append((4-lasers.index(m[y][x])) % 4)
                    for i in range(x+1,N):
                        if m[y][i] not in valid: break
                        L.setdefault((i,y),[]).append((6-lasers.index(m[y][x])) % 4)
                    for i in range(0,y):
                        if m[i][x] not in valid: break
                        L.setdefault((x,i),[]).append((5-lasers.index(m[y][x])) % 4)
                    for i in range(y+1,M):
                        if m[i][x] not in valid: break
                        L.setdefault((x,i),[]).append((7-lasers.index(m[y][x])) % 4)                    

        def is_laser(p,t):
            return p in L and (t+1) % 4 in L[p]

        def get_dirs(p,t):
            for d in dirs:
                n = (p[0]+d[0],p[1]+d[1])
                if 0<=n[0]<N and 0<=n[1]<M and m[n[1]][n[0]] in valid\
                   and V.get(n,0)<2 and not is_laser(n,t):
                    V[n] = V.get(n,0)+1
                    yield n

        from collections import deque
        q = deque([S, NewTurn])
        turn = 0
        while True:
            c = q.popleft()
            if c == G:
                return str(turn)
            if c == NewTurn:
                if len(q) == 0:
                    return 'impossible'
                turn += 1
                q.append(NewTurn)
                continue
            for d in get_dirs(c,turn):
                q.append(d)    

    res = solve()
    
    print('Case #%d: %s' % (case_id, res))
    import sys
    print('Case #%d: %s' % (case_id, res), file=sys.stderr)

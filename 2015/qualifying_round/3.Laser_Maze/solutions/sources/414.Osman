#include <iostream>
#include <queue>
#include <cstdio>
#include <algorithm>
#include <fstream.h>

#define ii pair<int, int>
#define PB push_back

using namespace std;
int nTest, R, C, sX, sY, fX, fY, cases;
char board[100 + 5][100 + 5];
bool visited[100 + 5][100 + 5][4 + 2];
vector<ii> lasers;
///                 U  R  D  L
const int DX[] = { -1, 0, 1, 0 };
const int DY[] = {  0, 1, 0,-1 };

struct Point {
    int x, y, cost;
    Point(int x, int y, int cost) {
        this -> x = x;
        this -> y = y;
        this -> cost = cost;
    }
    void print() {
        cout << "x-> " << x << " y-> " << y << " cost-> " << cost << endl;
    }
};

bool check(int x, int y) {
    return (x >= 0 && y >= 0 && x < R && y < C && (board[x][y] == '.' || board[x][y] == 'S' || board[x][y] == 'G'));
}

void bfs() {
    queue<Point> q;
    q.push(Point(sX, sY, 0));
    while(!q.empty()) {
        Point p = q.front(); q.pop();
        //p.print();
        if(p.x == fX && p.y == fY) {
            cout <<"Case #" << ++cases << ": " << p.cost << "\n";
            return;
        }
        for(int i = 0; i < 4; i++) {
            int x = p.x + DX[i], y = p.y + DY[i], cost = (p.cost + 1) % 4;
            if(check(x, y))
                if(!visited[x][y][cost]) {
                    q.push(Point(x, y, p.cost + 1));
                    visited[x][y][cost] = true;
                }
        }
    }
    cout <<"Case #" << ++cases << ": impossible\n";
}

void dfs(ii c, int dir, int v) {
    int x = c.first, y = c.second;
    if(!(x >= 0  && y >= 0 && y < C && x < R)) return;
    if(board[x][y] != '.' && board[x][y] != 'G' && board[x][y] != 'S') return;
    visited[x][y][v] = true;
    dfs(ii (x + DX[dir], y + DY[dir]), dir, v);
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> nTest;
    while(nTest--) {
        lasers.clear();
        memset(visited, false, sizeof(visited));
        cin >> R >> C;
        for(int i = 0; i < R; i++) {
            for(int j = 0; j < C; j++) {
                cin >> board[i][j];
                if(board[i][j] == '<' || board[i][j] == '>' || board[i][j] == '^' || board[i][j] == 'v') lasers.PB(ii(i, j));
                if(board[i][j] == '^') board[i][j] = '0';
                if(board[i][j] == '>') board[i][j] = '1';
                if(board[i][j] == 'v') board[i][j] = '2';
                if(board[i][j] == '<') board[i][j] = '3';
                if(board[i][j] == 'S') sX = i, sY = j;
                if(board[i][j] == 'G') fX = i, fY = j;
            }
        }
        for(int i = 0; i < lasers.size(); i++) {
            for(int j = 0; j < 4; j++) {
                int dir = (board[lasers[i].first][lasers[i].second] - '0' + j) % 4;
                int x = lasers[i].first + DX[dir], y = lasers[i].second + DY[dir];
                dfs(ii (x, y), dir, j);
            }
        }
        bfs();
    }
}

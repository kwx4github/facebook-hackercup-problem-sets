import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;


public class laser {
	static int H,W;
	static char[][] grid;
	static final int oo = 987654321;
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	public static void main(String[] args) throws FileNotFoundException {
		Scanner sc = new Scanner(new File("laser.txt"));
		PrintWriter out = new PrintWriter(new File("laserout.txt"));
		int T = sc.nextInt();
		for(int t=1;t<=T;t++){
			H = sc.nextInt();
			W = sc.nextInt();
			grid = new char[H][W];
			for(int a=0;a<H;a++)
				grid[a]=sc.next().toCharArray();
			int sx = 0;
			int sy = 0;
			int ex = 0;
			int ey = 0;
			for(int a=0;a<H;a++){
				for(int b=0;b<W;b++){
					if(grid[a][b]=='S'){
						grid[a][b]='.';
						sx=b;
						sy=a;
					}
					if(grid[a][b]=='G'){
						grid[a][b]='.';
						ex=b;
						ey=a;
					}
				}
			}
			ArrayDeque<State> LL = new ArrayDeque<State>();
			int[][][] moves = new int[H][W][4];
			for(int a=0;a<H;a++){
				for(int b=0;b<W;b++){
					Arrays.fill(moves[a][b],oo);
				}
			}
			boolean[][][] visited = new boolean[H][W][4];
			//if(lives(sy,sx,0)){
				LL.add(new State(sy,sx,0));
				moves[sy][sx][0]=0;
			//}
			stuff: while(!LL.isEmpty()){
				State cur = LL.poll();
//				System.out.println(cur.y+" "+cur.x+" "+cur.d);
				for(int d=0;d<4;d++){
					int nx = cur.x+dx[d];
					int ny = cur.y+dy[d];
					if(ny<0||nx<0||nx>=W||ny>=H)continue;
					if(grid[ny][nx]!='.')continue;
					int nd = (cur.d+1)%4;
					if(!visited[ny][nx][nd]){
						visited[ny][nx][nd]=true;
						if(lives(ny,nx,nd)){
							moves[ny][nx][nd]=moves[cur.y][cur.x][cur.d]+1;
							LL.add(new State(ny,nx,nd));
//							System.out.println("-> "+ny+" "+nx+" "+nd);
							if(ny==ey&&nx==ex)break stuff;
						}
					}
				}
			}
			int answer = 987654321;
			for(int a=0;a<4;a++)
				if(visited[ey][ex][a])
					answer= Math.min(answer,moves[ey][ex][a]);
			if(answer == oo)
				System.out.printf("Case #%d: impossible%n",t);
			else 
				System.out.printf("Case #%d: %d%n",t,answer);
			
			if(answer == oo)
				out.printf("Case #%d: impossible%n",t);
			else 
				out.printf("Case #%d: %d%n",t,answer);
		}
		out.close();
	}
	private static boolean lives(int y, int x, int d) {
		for(int nx = x;nx<W;nx++){
			if(grid[y][nx]!='.'){
				if(trans(grid[y][nx],d)=='<')return false;
				break;
			}
		}
		
		for(int nx = x;nx>=0;nx--){
			if(grid[y][nx]!='.'){
				if(trans(grid[y][nx],d)=='>')return false;
				break;
			}
		}
		
		for(int ny = y;ny<H;ny++){
			if(grid[ny][x]!='.'){
				if(trans(grid[ny][x],d)=='^')return false;
				break;
			}
		}
		
		for(int ny = y;ny>=0;ny--){
			if(grid[ny][x]!='.'){
				if(trans(grid[ny][x],d)=='v')return false;
				break;
			}
		}
		return true;
	}
	private static char trans(char c, int d) {
		if(d==0)return c;
		if(c=='^')return trans('>',d-1);
		if(c=='>')return trans('v',d-1);
		if(c=='v')return trans('<',d-1);
		if(c=='<')return trans('^',d-1);
		return '0';
	}
	static class State{
		int x,y,d;
		State(int yy, int xx, int dd){
			y=yy;
			x=xx;
			d=dd;
		}
	}

}

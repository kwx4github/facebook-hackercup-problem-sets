#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

const int maxn = 105;
const int INF = 1e9;

struct node
{
    int x, y, t;
};
int n, m, sx, sy, ex, ey;
char map[maxn][maxn];
bool vis[maxn][maxn][4];
int dir[maxn][maxn][4];
int d[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
bool ok(int x, int y, int t)
{
    t %= 4;
    if(vis[x][y][t]) return 0;
    if(map[x][y] != 'S' && map[x][y] != 'G' && map[x][y] != '.') return 0;
    if(x < 0 || x >= n || y < 0 || y >= m) return 0;
    for(int i = x - 1; i >= 0; i--)
        if(map[i][y] != 'S' && map[i][y] != 'G' && map[i][y] != '.')
        {
            if(dir[i][y][t] == 2) return 0;
            break;
        }
    for(int i = x + 1; i < n; i++)
        if(map[i][y] != 'S' && map[i][y] != 'G' && map[i][y] != '.')
        {
            if(dir[i][y][t] == 0) return 0;
            break;
        }
    for(int j = y - 1; j >= 0; j--)
        if(map[x][j] != 'S' && map[x][j] != 'G' && map[x][j] != '.')
        {
            if(dir[x][j][t] == 1) return 0;
            break;
        }
    for(int j = y + 1; j < m; j++)
        if(map[x][j] != 'S' && map[x][j] != 'G' && map[x][j] != '.')
        {
            if(dir[x][j][t] == 3) return 0;
            break;
        }
    return 1;
}
int bfs()
{
    queue<node> Q;
    node cur, next;
    memset(vis, 0, sizeof(vis));
    cur.x = sx, cur.y = sy, cur.t = 0;
    vis[sx][sy][0] = 1;
    Q.push(cur);
    while(!Q.empty())
    {
        cur = Q.front();
        Q.pop();
        int x = cur.x, y = cur.y, t = cur.t;
        if(x == ex && y == ey) return t;
        for(int i = 0; i < 4; i++)
        {
            int nx = x + d[i][0], ny = y + d[i][1], nt = t + 1;
            if(!ok(nx, ny, nt)) continue;
            next.x = nx, next.y = ny, next.t = nt;
            vis[nx][ny][nt % 4] = 1;
            Q.push(next);
        }
    }
    return -1;
}
int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
    int t,ca = 0;
    scanf("%d", &t);
    while(t--)
    {
        scanf("%d%d", &n, &m);
        for(int i = 0; i < n; i++)
        {
            scanf("%s", map[i]);
            for(int j = 0; j < m; j++)
            {
                if(map[i][j] == 'S') sx = i, sy = j;
                else if(map[i][j] == 'G') ex = i, ey = j;
                else if(map[i][j] == '^')
                {
                    dir[i][j][0] = 0, dir[i][j][1] = 1, dir[i][j][2] = 2, dir[i][j][3] = 3;
                }
                else if(map[i][j] == '>')
                {
                    dir[i][j][0] = 1, dir[i][j][1] = 2, dir[i][j][2] = 3, dir[i][j][3] = 0;
                }
                else if(map[i][j] == 'v')
                {
                    dir[i][j][0] = 2, dir[i][j][1] = 3, dir[i][j][2] = 0, dir[i][j][3] = 1;
                }
                else if(map[i][j] == '<')
                {
                    dir[i][j][0] = 3, dir[i][j][1] = 2, dir[i][j][2] = 1, dir[i][j][3] = 0;
                }
            }
        }
        printf("Case #%d: ", ++ca);
        int ans = bfs();
        if(ans == -1) printf("impossible\n");
        else printf("%d\n", ans);
    }
    return 0;
}


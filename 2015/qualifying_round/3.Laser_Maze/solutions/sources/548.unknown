#include <bits/stdc++.h>
#define sc scanf
#define pf printf
#define CLR(m,x) memset(m,x,sizeof(m));
#define __nCASE int _,__;for(_=1,scanf("%d",&__);_<=__;_++)
#define DBG(x) cout<<#x<<":"<<x<<endl
#define UCCU ios::sync_with_stdio(0);
#define LOCAL freopen("test.txt","r",stdin)
using namespace std;
typedef long long LL;
typedef pair<int,int> PII;
/*-----------------------------------------------------------------*/
const int maxN = 105;
int dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};
char laz[4]={'^','>','v','<'};
int step[4][maxN][maxN];
bool pass[4][maxN][maxN];
char mp[maxN][maxN];
int Gx,Gy,Sx,Sy;
int n,m;
struct Node{
    int x,y,c;
    Node(int xx,int yy,int cc){
        x=xx,y=yy,c=cc;
    }
};
bool check(int x,int y,int dd){
    return 0<=x && x<n && 0<=y && y<m && pass[dd][x][y] && step[dd][x][y]==-1;
}
bool bfs()
{
    CLR( step, -1);
    queue<Node> que;
    int d=0,xx,yy,x,y,dd;

    que.push(Node(Sx,Sy,0));
    step[d][Sx][Sy] = 0;
    while(!que.empty()){
        x = que.front().x;
        y = que.front().y;
        d = que.front().c;
        que.pop();

        if(x==Gx && y==Gy){
            pf("%d\n", step[d][x][y]);
            return true;
        }

        dd = (d + 1) % 4;
        for(int i=0; i<4; i++){
            xx = x + dir[i][0];
            yy = y + dir[i][1];
            if( check(xx,yy,dd) ){
                step[dd][xx][yy] = step[d][x][y] + 1;
                que.push(Node(xx,yy,dd));
            }
        }
    }
    return false;
}

int isLazer(char c){
    for(int i=0; i<4; i++) if(c==laz[i]) return i+1;
    return 0;
}
bool isPass(int x,int y){
    return 0<=x && x<n && 0<=y && y<m && !isLazer(mp[x][y]) && mp[x][y]!='#';
}
void read()
{
    CLR( pass, 1);
    sc("%d%d", &n, &m);
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            sc(" %c", &mp[i][j]);
            if(mp[i][j]=='#') pass[0][i][j] = pass[1][i][j] = pass[2][i][j] = pass[3][i][j] = 0;
            else if(mp[i][j]=='S') Sx=i, Sy=j;
            else if(mp[i][j]=='G') Gx=i, Gy=j;

        }
    }
    int p, lz;
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(lz = isLazer(mp[i][j]) ) {
                for(int c=0; c<4; c++) {
                    switch((lz-1+c)%4+1) {
                        case 1:{
                            p = i;
                            do{ pass[c][p][j]=0, p--; }while( isPass(p,j) );
                        }break;
                        case 2:{
                            p = j;
                            do{ pass[c][i][p]=0, p++; }while( isPass(i,p) );
                        }break;
                        case 3:{
                            p = i;
                            do{ pass[c][p][j]=0, p++; }while( isPass(p,j) );
                        }break;
                        case 4:{
                            p = j;
                            do{ pass[c][i][p]=0, p--; }while( isPass(i,p) );
                        }break;
                    }
                }
            }
        }
    }
}

int main()
{
    __nCASE{
        read();
        pf("Case #%d: ", _); if(!bfs()) puts("impossible");
    }
}

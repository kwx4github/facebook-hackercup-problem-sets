#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 100 + 3;

int n, m;
char a[N][N];

inline bool read()
{
	assert(scanf("%d%d", &n, &m));
	forn(i, n) assert(scanf("%s", a[i]) == 1);
	return true;
}

int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

struct state
{
	int x, y, t;
	state(int x, int y, int t): x(x), y(y), t(t) { }
};

#define pos(v) (v).x][(v).y][(v).t

int wall[256];
int d[N][N][4];

const int BAD = -3;

inline void solve(int test)
{
	forn(i, 256) wall[i] = BAD;
	char walls[] = { '#', '^', '>', 'v', '<' };
	forn(i, 5) wall[(int) walls[i]] = i - 1;

	printf("Case #%d:", test + 1);

	memset(d, 63, sizeof(d));
	queue<state> q;

	state s(-1, -1, 0);
	pt f(-1, -1);
	forn(i, n) forn(j, m)
		if (a[i][j] == 'S') s.x = i, s.y = j;
		else if (a[i][j] == 'G') f = mp(i, j);

	d[pos(s)] = 0;
	q.push(s);

	int ans = INF;
	while (!q.empty())
	{
		state v = q.front();
		q.pop();
		if (mp(v.x, v.y) == f) ans = min(ans, d[pos(v)]);
		//cerr << v.x << ' ' << v.y << ' ' << v.t << ' ' << d[pos(v)] << endl;

		forn(i, 4)
		{
			state nt(v.x + dx[i], v.y + dy[i], (v.t + 1) % 4);
			if (!correct(nt.x, nt.y, n, m)) continue;
			if (wall[(int) a[nt.x][nt.y]] != BAD) continue;

			bool bad = false;
			forn(j, 4)
				for (int d = 1; ; d++)
				{
					int xx = nt.x + dx[j] * d;
					int yy = nt.y + dy[j] * d;
					if (!correct(xx, yy, n, m)) break;
					int type = wall[(int) a[xx][yy]];
					if (type == BAD) continue;
					if (type == -1) break;
					if ((type + nt.t + 2) % 4 == j) bad = true;
					break;
				}

			if (bad) continue;

			if (d[pos(nt)] > d[pos(v)] + 1)
			{
				d[pos(nt)] = d[pos(v)] + 1;
				q.push(nt);
			}
		}
	}

	if (ans != INF) printf(" %d\n", ans);
	else puts(" impossible");
	cerr << "Case #" << test + 1 << " is calced" << endl;
	//exit(0);
}

int main()
{
#ifdef SU2_PROJ
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
    
    cout << setprecision(10) << fixed;
    cerr << setprecision(5) << fixed;

	int testCount;
	cin >> testCount;
    
	forn(test, testCount)
	{
		assert(read());
		solve(test);
	}
	
    return 0;
}

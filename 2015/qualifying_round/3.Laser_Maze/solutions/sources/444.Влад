#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>
 
using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;
 
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;
 
#define mp make_pair
#define pb push_back
#define X first
#define Y second
 
#define dbg(x) { cerr << #x << " = " << x << endl; }
 
// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;
 
#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
 
template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);
 
#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;
 
#define NAME "kabaleo"

string S = "^>v<";
int sm[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

void genBlock(vector <vector <int> > &used, vector <vector <char> > &s, int SM, int x, int y)
{
	int n = used.size();
	int m = used[0].size();
	used[x][y] = 1;
	for (int i = 1; i < 200; i++)
	{
		int nx = x + i * sm[SM][0];
		int ny = y + i * sm[SM][1];

		if (nx >= 0 && ny >= 0 && nx < n && ny < m && s[nx][ny] != '#' && S.find(s[nx][ny]) == string::npos)
			used[nx][ny] = 1;
		else
			break;
	}
}

vector <vector<int> > getBlock(vector <vector <char> > &s, int SM)
{
	int n = s.size();
	int m = s[0].size();
	vector <vector<int> > used(n, vector <int> (m));

	for (int i = 0; i < n; i++)
		for (int k = 0; k < m; k++)
		{
			if (S.find(s[i][k]) != string::npos)
				genBlock(used, s, (S.find(s[i][k]) + SM) % 4, i, k);
			if (s[i][k] == '#')
				used[i][k] = 1;
		}
	return used;
}

int main()
{
    //freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    freopen("input.txt", "r", stdin);  freopen("output.txt", "w", stdout);
	//START
	int t;
	scanf("%d", &t);
	for (int Q = 0; Q < t; Q++)
	{
		int n, m;
		scanf("%d %d\n", &n, &m);
		vector <vector <char> > s(n, vector <char> (m));
		pii start, finish;
		for (int i = 0; i < n; i++, scanf("\n"))
			for (int k = 0; k < m; k++)
			{
				scanf("%c", &s[i][k]);
				if (s[i][k] == 'S')
					start = mp(i, k);
				if (s[i][k] == 'G')
					finish = mp(i, k);
			}

		vector <vector <vector <int> > > blocks(4);
		for (int i = 0; i < 4; i++)
			blocks[i] = getBlock(s, i);

		vector <vector <vector <int> > > d(n, vector <vector <int> > (m, vector <int> (4, inf)));
		
		d[start.X][start.Y][0] = 0;
		queue<pair<pair<int, int>, int> > q;
		q.push(mp(mp(start.X, start.Y), 0));
		while (!q.empty())
		{
			int x = q.front().X.X;
			int y = q.front().X.Y;
			int step = q.front().Y;
			step++;
			step %= 4;

			q.pop();

			for (int i = 0; i < 4; i++)
			{
				int nx = x + sm[i][0];
				int ny = y + sm[i][1];

				if (nx >= 0 && ny >= 0 && nx < n && ny < m && blocks[step][nx][ny] != 1 && d[nx][ny][step] == inf)
				{
					d[nx][ny][step] = d[x][y][(step + 3) % 4] + 1;
					q.push(mp(mp(nx, ny), step));
				}
			}
		}

		int ans = inf;
		for (int i = 0; i < 4; i++)
			ans = min(ans, d[finish.X][finish.Y][i]);

		printf("Case #%d: ", Q + 1);
		if (ans == inf)
			printf("impossible\n");
		else
			printf("%d\n", ans);

	}
	//END
    return 0;
}
/*******************************************
*******************************************/
 
template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

int T,M,N;

char array [110][110];
bool visited [110][110][4];
char lasers [110][110][4];

struct coord {
	int row;
	int column;
	int steps;
};

void fill () {
	for (int i = 0; i < 110; ++i) {
		for (int j = 0; j < 110; ++j) {
			for (int k = 0; k < 4; ++k)	{
				visited[i][j][k] = false;
				lasers[i][j][k] = '*';
			}
		}
	}
}

void findLasers() {
	int step, idx;
	for (int i = 0; i < 110; ++i) {
		for (int j = 0; j < 110; ++j) {
			if (array[i][j] == '^' || array[i][j] == '>' || array[i][j] == 'v' || array[i][j] == '<')  {
				if (array[i][j] == '^') step = 0;
				else if (array[i][j] == '>') step = 3;
				else if (array[i][j] == 'v') step = 2;
				else if (array[i][j] == '<') step = 1;
				idx = i-1;
				while(array[idx][j] != '#' && array[idx][j] != '^' && array[idx][j] != '>' && array[idx][j] != 'v' && array[idx][j] != '<') lasers[idx--][j][(0+step)%4] = '#';
				idx = j+1;
				while(array[i][idx] != '#' && array[i][idx] != '^' && array[i][idx] != '>' && array[i][idx] != 'v' && array[i][idx] != '<') lasers[i][idx++][(1+step)%4] = '#';
				idx = i+1;
				while(array[idx][j] != '#' && array[idx][j] != '^' && array[idx][j] != '>' && array[idx][j] != 'v' && array[idx][j] != '<') lasers[idx++][j][(2+step)%4] = '#';
				idx = j-1;
				while(array[i][idx] != '#' && array[i][idx] != '^' && array[i][idx] != '>' && array[i][idx] != 'v' && array[i][idx] != '<') lasers[i][idx--][(3+step)%4] = '#';
				array[i][j] = '#';
			}
		}
	}
}

coord find(char c) {
	coord res;
	for (int i = 0; i < M+2; ++i)	{
		for (int j = 0; j < N+2; ++j)	{
			if (array[i][j] == c) {
				res.row = i;
				res.column = j;
				return res;
			}
		}
	}
	return res;
}

int solve () {
	queue<coord> q;
	coord start = find('S');
	coord end = find('G');
	coord cur = start;
	cur.steps = 0;
	q.push(cur);
	// printf("%d %d\n", r, c);	
	while(!q.empty()) {
		cur = q.front();
		q.pop();
		if (cur.row == end.row && cur.column == end.column && lasers[cur.row][cur.column][cur.steps%4] != '#') return cur.steps;
		if (cur.steps != 0 && (visited[cur.row][cur.column][cur.steps%4] || lasers[cur.row][cur.column][cur.steps%4] == '#' || array[cur.row][cur.column] == '#')) continue;
		visited[cur.row][cur.column][cur.steps%4] = true;
		cur.steps++;
		cur.row++;
		q.push(cur);
		cur.row -= 2 ;
		q.push(cur);
		cur.row++; cur.column++;
		q.push(cur);
		cur.column -= 2 ;
		q.push(cur);
	}
	return -1;
}

int main(int argc, char const *argv[]) {
	int res;
	scanf("%d\n",&T);	
	for (int k = 0; k < T; ++k)	{
		scanf("%d %d\n",&M,&N);
		fill();
		for (int i = 0; i < M; ++i)	{
			cin.getline(array[i+1]+1,109);
			array[i+1][0] = '#';
			array[i+1][N+1] = '#';
			// printf("%s\n", array[i+1]);
		}
		for (int i = 0; i < N+2; ++i) array[0][i] = array[M+1][i] = '#';
		findLasers();
		res = solve();
		if (res == -1) printf("Case #%d: impossible\n", k+1);
		else printf("Case #%d: %d\n", k+1, res);
		// printf("%d %d\n", M, N);
		// for (int l = 0; l < 4; ++l)
		// {
			
		// 	for (int i = 0; i < M+2; ++i)	{
		// 		for (int j = 0; j < N+2; ++j)
		// 		{
		// 			printf("%c", lasers[i][j][l]);
		// 		}
		// 		printf("\n");
		// 	}
		// 	printf("xxxxxxxxxxxxxxxxxxxxxx\n");
		// }
		// printf("-----------------------\n");
	}
	return 0;
}
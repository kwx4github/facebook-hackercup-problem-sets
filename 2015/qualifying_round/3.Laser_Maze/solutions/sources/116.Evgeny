#include <iostream>
#include <string>
#include <queue>

using namespace std;

struct Position
{
    int t;
    int i;
    int j;
};

int di[] = {-1, 0, 1, 0};
int dj[] = {0, 1, 0, -1};

bool isBlockingLaser(char c)
{
    return c == '#' || c == '^' || c == '>' || c == 'v' || c == '<';
}

int arrow2d(char c)
{
    if (c == '^') return 0;
    if (c == '>') return 1;
    if (c == 'v') return 2;
    if (c == '<') return 3;

    cout << "arrow2d ERROR" << endl;
    return -1;
}

int main()
{
    int T;
    cin >> T;
    for (int ttt = 1; ttt <= T; ++ttt)
    {
        char maze[100][100];
        int N, M;
        cin >> N >> M;
        int iStart, jStart, iTarget, jTarget;
        for (int i = 0; i < N; ++i)
        {
            string s;
            cin >> s;
            for (int j = 0; j < M; ++j)
            {
                maze[i][j] = s[j];
                if (maze[i][j] == 'S')
                {
                    iStart = i;
                    jStart = j;
                }
                if (maze[i][j] == 'G')
                {
                    iTarget = i;
                    jTarget = j;
                }
            }

        }

        bool vis[4][100][100];
        int dist[4][100][100];
        int map[4][100][100];
        for (int t = 0; t < 4; ++t)
        {
            for (int i = 0; i < N; ++i)
            {
                for (int j = 0; j < M; ++j)
                {
                    vis[t][i][j] = false;
                    dist[t][i][j] = 0;
                    map[t][i][j] = 0;
                }
            }
        }

        for (int i = 0; i < N; ++i)
        {
            for (int j = 0; j < M; ++j)
            {
                if (maze[i][j] == '#')
                {
                    for (int t = 0; t < 4; ++t)
                    {
                        map[t][i][j] = 1;
                    }
                }
                if (maze[i][j] == '<' || maze[i][j] == '^' || maze[i][j] == '>' || maze[i][j] == 'v')
                {
                    for (int t = 0; t < 4; ++t)
                    {
                        map[t][i][j] = 1;
                    }
                    int d0 = arrow2d(maze[i][j]);
                    for (int t = 0; t < 4; ++t)
                    {
                        int d = (d0 + t) % 4;
                        int i2 = i + di[d], j2 = j + dj[d];
                        while (i2 >= 0 && i2 < N && j2 >= 0 && j2 < M && !isBlockingLaser(maze[i2][j2]))
                        {
                            map[t][i2][j2] = 1;
                            i2 += di[d];
                            j2 += dj[d];
                        }
                    }

                }
            }
        }


        queue<Position> q;
        Position start;
        start.t = 0;
        start.i = iStart;
        start.j = jStart;
        q.push(start);
        vis[0][iStart][jStart] = true;
        dist[0][iStart][jStart] = 0;

        int res = -1;
        while (!q.empty())
        {
            Position curr = q.front(); q.pop();

            for (int d = 0; d < 4; ++d)
            {
                int nxt = (curr.t + 1) % 4;
                int nxi = curr.i + di[d];
                int nxj = curr.j + dj[d];
                if (nxi < 0 || nxi >= N || nxj < 0 || nxj >= M) continue;
                if (vis[nxt][nxi][nxj]) continue;
                if (map[nxt][nxi][nxj] == 1) continue;

                Position nx;
                nx.t = nxt;
                nx.i = nxi;
                nx.j = nxj;
                q.push(nx);
                vis[nxt][nxi][nxj] = true;
                dist[nxt][nxi][nxj] = 1 + dist[curr.t][curr.i][curr.j];

                if (nx.i == iTarget && nx.j == jTarget)
                {
                    res = dist[nxt][nxi][nxj];
                    break;
                }
            }
            if (res != -1)
            {
                break;
            }
        }
        cout << "Case #" << ttt << ": ";
        if (res == -1) cout << "impossible" << endl;
        else cout << res << endl;

/*
        for (int t = 0; t < 4; ++t)
        {
            cout << "Level " << t << endl;
            for (int i = 0; i < N; ++i)
            {
                for (int j = 0; j < M; ++j)
                {
                    cout << map[t][i][j];
                }
                cout << endl;
            }
            cout << endl;
        }
*/
    }

    return 0;
}

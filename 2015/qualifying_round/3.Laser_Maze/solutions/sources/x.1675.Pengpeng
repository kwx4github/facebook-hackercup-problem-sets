#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <string>
using namespace std;

#define eps 1e-9
#define PB push_back
#define LL long long
#define INF 0x3f3f3f3f

template<class T> void checkMax(T &a, T b){a = max(a, b);}
template<class T> void checkMin(T &a, T b){a = min(a, b);}

const int MAXN = 105;
char maze[MAXN][MAXN];
int n, m, unsafe[4][MAXN][MAXN], dist[4][MAXN][MAXN];
int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
int in(int x, int y)
{
    return 0 <= x && x < n && 0 <= y && y < m;
}
int main()
{
    freopen("laser_maze.txt", "r", stdin);
    freopen("laser_maze.out", "w", stdout);
    int t, cas = 1;
    scanf("%d", &t);
    while(t--)
    {
        scanf("%d%d", &n, &m);
        for(int i = 0; i < n; i++)
            scanf("%s", &maze[i]);
        memset(unsafe, 0, sizeof(unsafe));
        int sx = -1, sy = -1;
        int tx = -1, ty = -1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                int init = -1;
                if(maze[i][j] == 'S')
                    sx = i, sy = j;
                if(maze[i][j] == 'G')
                    tx = i, ty = j;
                if(maze[i][j] == '>')   init = 0;
                else if(maze[i][j] == 'v')  init = 1;
                else if(maze[i][j] == '<')  init = 2;
                else if(maze[i][j] == '^')  init = 3;
                else continue;
                for(int k = 0; k < 4; k++)
                {
                    int x = i, y = j;
                    while(1)
                    {
                        x += dir[init][0];
                        y += dir[init][1];
                        if(!in(x, y))   break;
                        if(maze[x][y] == '.' || maze[x][y] == 'S' || maze[x][y] == 'G')
                            unsafe[k][x][y] = 1;
                        else
                            break;
                    }
                    init = (init + 1) % 4;
                }
            }
        }
        queue<pair<int, pair<int, int> > > que;
        memset(dist, 0x3f, sizeof(dist));
        que.push(make_pair(0, make_pair(sx, sy)));
        dist[0][sx][sy] = 0;
        while(!que.empty())
        {
            int step = que.front().first;
            int curx = que.front().second.first;
            int cury = que.front().second.second;
            que.pop();
            for(int i = 0; i < 4; i++)
            {
                int nextx = curx + dir[i][0];
                int nexty = cury + dir[i][1];
                int nextd = (step + 1) % 4;
                if(in(nextx, nexty) && !unsafe[nextd][nextx][nexty] && dist[nextd][nextx][nexty] == INF)
                {
                    que.push(make_pair(step + 1, make_pair(nextx, nexty)));
                    dist[nextd][nextx][nexty] = step + 1;
                }
            }
        }
        int ans = INF;
        for(int i = 0; i < 4; i++)
            checkMin(ans, dist[i][tx][ty]);
        printf("Case #%d: ", cas++);
        if(ans == INF)  printf("impossible\n");
        else            printf("%d\n", ans);
    }
    return 0;
}

#include <iostream>
#include <cstdio>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <set>
#include <bitset>
#include <stack>
#include <string>
#include <map>
#include <assert.h>


#define abs(x) ((x)>=0?(x):-(x))
#define i64 long long
#define u32 unsigned int
#define u64 unsigned long long
#define clr(x,y) memset(x,y,sizeof(x))
#define CLR(x) x.clear()
#define ph(x) push(x)
#define pb(x) push_back(x)
#define SZ(x) x.size()
#define PI acos(-1.0)
#define sqr(x) ((x)*(x))
#define MP(x,y) make_pair(x,y)
#define EPS 1e-11



#define pii pair<int,int>
#define FFF freopen("test","r",stdin)
#define all(a) a.begin(),a.end()

using namespace std;


void output(i64 x)
{
    if(x<0) putchar('-'),x=-x;
    if(x==0)
    {
        putchar('0');
        return;
    }
    int a[20],num=0;
    while(x) a[++num]=x%10,x/=10;
    while(num>0) putchar('0'+a[num--]);
}

inline i64 myInt()
{
    char c=getchar();
    while(!isdigit(c)&&c!='-') c=getchar();
    int flag=1;
    if(c=='-') flag=-1,c=getchar();
    i64 x=0;
    while(isdigit(c))
    {
        x=(x*10)+(c-'0');
        c=getchar();
    }
    if(-1==flag) return -x;
    return x;
}

const i64 mod=1000000007;
const int N=111;

int f[N][N][4];
int n,m;

char s[N][N];

int inq[N][N][4];


int dx[]={1,0,-1,0};
int dy[]={0,-1,0,1};

int a[N][N][4];

int get(char c)
{
    if('<'==c) return 1;
    if('>'==c) return 3;
    if('^'==c) return 2;
    return 0;
}

int ok(int x,int y)
{
    return x>=1&&x<=n&&y>=1&&y<=m&&s[x][y]=='.';
}

pair<int,int> cal()
{
    int sx,sy,ex,ey;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if('S'==s[i][j]) sx=i,sy=j,s[i][j]='.';
            if('G'==s[i][j]) ex=i,ey=j,s[i][j]='.';
        }
    }
    clr(f,-1);
    clr(inq,0);
    queue<pair<int,pair<int,int> >  > Q;
    f[sx][sy][0]=0;
    Q.push(MP(0,MP(sx,sy)));
    inq[sx][sy][0]=1;


    clr(a,0);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if('.'==s[i][j]||'#'==s[i][j]) continue;
            int dir=get(s[i][j]);
            for(int k=0;k<4;k++)
            {
                int x=i,y=j;
                while(ok(x+dx[(dir+k)&3],y+dy[(dir+k)&3]))
                {
                    x+=dx[(dir+k)&3];
                    y+=dy[(dir+k)&3];
                    a[x][y][k]=1;


                  //  printf("%d %d %d\n",x,y,k);
                }
            }
        }
    }
  //  if(a[sx][sy][0]) return MP(0,0);

    while(!Q.empty())
    {
        int t=Q.front().first;
        int x=Q.front().second.first;
        int y=Q.front().second.second;
        Q.pop();

        inq[x][y][t]=0;

        for(int i=0;i<4;i++)
        {
            int xx=x+dx[i];
            int yy=y+dy[i];
            if(!ok(xx,yy)) continue;
            if(a[xx][yy][(t+1)&3]) continue;

            if(-1==f[xx][yy][(t+1)&3]||f[x][y][t]+1<f[xx][yy][(t+1)&3])
            {
                f[xx][yy][(t+1)&3]=f[x][y][t]+1;

             //   printf("%d %d %d %d->%d %d %d: %d\n",x,y,t&3,t,xx,yy,(t+1)&3,t+1);

                if(!inq[xx][yy][(t+1)&3])
                {
                    Q.push(MP((t+1)&3,make_pair(xx,yy)));
                    inq[xx][yy][(t+1)&3]=1;
                }
            }
        }
    }
    int ans=-1;
    for(int i=0;i<4;i++)
    {
        if(-1!=f[ex][ey][i])
        {
            if(-1==ans||ans>f[ex][ey][i])
            {
                ans=f[ex][ey][i];
            }
        }
    }
    if(-1==ans) return MP(0,0);
    return MP(1,ans);
}

int main()
{
   // FFF;

    //freopen("out","w",stdout);

    int T=myInt();
    int num=0;
    while(T--)
    {
        n=myInt();
        m=myInt();
        for(int i=1;i<=n;i++)
        {
            scanf("%s",s[i]+1);
        }
        pair<int,int> ans=cal();
        if(ans.first) printf("Case #%d: %d\n",++num,ans.second);
        else printf("Case #%d: impossible\n",++num);
    }
}

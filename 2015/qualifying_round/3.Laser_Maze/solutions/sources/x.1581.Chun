#include <iostream>
#include <vector>
using namespace std;

char s[105][105];
int f[105][105][4];

struct pos
{
	int x, y, t;
};

int main()
{
	int t;
	
	cin >> t;
	for (int tt = 1; tt <= t; ++tt)
	{
		int m, n;
		cin >> m >> n;
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				cin >> s[i][j];
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				for (int k = 0; k < 4; ++k)
					f[i][j][k] = 100000;
		int sx, sy, gx, gy;
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				if (s[i][j] == 'S')
				{
					sx = i;
					sy = j;
				}
				else if (s[i][j] == 'G')
				{
					gx = i;
					gy = j;
				}
				else if (s[i][j] == '#')
				{
					for (int k = 0; k < 4; ++k)
						f[i][j][k] = -1;
				}
				else if (s[i][j] != '.')
				{
					int dx = 0, dy = 0;
					if (s[i][j] == '^')
						dx = -1;
					else if (s[i][j] == '>')
						dy = 1;
					else if (s[i][j] == 'v')
						dx = 1;
					else if (s[i][j] == '<')
						dy = -1;
					for (int k = 0; k < 4; ++k)
					{
						int tx = i, ty = j;
						while ((tx >= 0) && (tx < m) && (ty >= 0) && (ty < n))
						{
							f[tx][ty][k] = -1;
							tx += dx;
							ty += dy;
						}
						int tmp = dx;
						dx = dy;
						dy = -tmp;
					}
				}
		f[sx][sy][0] = 0;
		pos tp;
		tp.x = sx;
		tp.y = sy;
		tp.t = 0;
		vector<pos> ps;
		ps.push_back(tp);
		int ind = 0;
		while (ind < ps.size())
		{
			tp = ps[ind];
			int v = f[tp.x][tp.y][tp.t];
			tp.t = (tp.t + 1) % 4;
//cout << tt << ": " << tp.x << " " << tp.y << " " << tp.t << endl;			
			tp.x--;
			if ((tp.x >= 0) && (tp.x < m) && (v + 1 < f[tp.x][tp.y][tp.t]))
			{
				f[tp.x][tp.y][tp.t] = v + 1;
				ps.push_back(tp);
				if ((tp.x == gx) && (tp.y == gy))
					break;
			}
			tp.x++;
			
			tp.x++;
			if ((tp.x >= 0) && (tp.x < m) && (v + 1 < f[tp.x][tp.y][tp.t]))
			{
				f[tp.x][tp.y][tp.t] = v + 1;
				ps.push_back(tp);
				if ((tp.x == gx) && (tp.y == gy))
					break;
			}
			tp.x--;
			
			tp.y++;
			if ((tp.y >= 0) && (tp.y < n) && (v + 1 < f[tp.x][tp.y][tp.t]))
			{
				f[tp.x][tp.y][tp.t] = v + 1;
				ps.push_back(tp);
				if ((tp.x == gx) && (tp.y == gy))
					break;
			}
			tp.y--;
			
			tp.y--;
			if ((tp.y >= 0) && (tp.y < n) && (v + 1 < f[tp.x][tp.y][tp.t]))
			{
				f[tp.x][tp.y][tp.t] = v + 1;
				ps.push_back(tp);
				if ((tp.x == gx) && (tp.y == gy))
					break;
			}
			tp.y++;
			
			++ind;
		}
		
		cout << "Case #" << tt << ": ";
		if (ind == ps.size())
			cout << "impossible" << endl;
		else
			cout << f[tp.x][tp.y][tp.t] << endl;
	}
}

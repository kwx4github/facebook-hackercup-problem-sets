#include <iostream>
#include <queue>
#include <utility>
#include <cstring>
#include <vector>
using namespace std;

typedef pair<int,int> pii;

string z[100];
bool v[100][100][4];

int dx[4] = {0,-1,0,1};
int dy[4] = {-1,0,1,0};

struct S {
  pii p;
  int d;
  S(pii pp, int dd) : p(pp), d(dd) {}
};

int main() {
  int t; cin >> t;
  for (int T = 1; T <= t; T++) {
    memset(v, 0, sizeof v);
    int m, n; cin >> m >> n;
    pii s, g;
    vector<S> ts;
    for (int i = 0; i < m; i++) {
      cin >> z[i];
      for (int j = 0; j < n; j++) {
        if (z[i][j] == 'S') {
          v[i][j][0] = true;
          s = make_pair(i,j);
        }
        else if (z[i][j] == 'G')
          g = make_pair(i,j);
        else if (z[i][j] != '.' && z[i][j] != '#') {
          int r = -1;
          switch (z[i][j]) {
            case '<': r = 0; break;
            case '^': r = 1; break;
            case '>': r = 2; break;
            case 'v': r = 3; break;
            default: break;
          }
          ts.push_back(S(make_pair(i,j),r));
        }
      }
    }
    cout << "Case #" << T << ": ";
    queue<S> q;
    q.push(S(s,0));
    while (q.size()) {
      S f = q.front();
      q.pop();
      if (f.p == g) {
        cout << f.d;
        goto VELOCIRAPTOR;
      }
      for (int i = 0; i < 4; i++) {
        int x = f.p.first+dx[i], y = f.p.second+dy[i];
        if (0 <= x && x < m && 0 <= y && y < n) {
          char c = z[x][y];
          if (c == 'S' || c == '.' || c == 'G') {
            bool ok = true;
            for (int j = 0; j < ts.size(); j++) {
              int r = (ts[j].d+f.d+1)%4;
              int xx = ts[j].p.first, yy = ts[j].p.second;
              while (true) {
                if (0 > xx || xx >= m || 0 > yy || yy >= n)
                  break;
                if (z[xx][yy] == '#')
                  break;
                if (xx == x && yy == y) {
                  ok = false;
                  break;
                }
                xx += dx[r];
                yy += dy[r];
              }
            }
            if (ok && !v[x][y][(f.d+1)%4]) {
              v[x][y][(f.d+1)%4] = true;
              q.push(S(make_pair(x,y),f.d+1));
            }
          }
        }
      }
    }
    cout << "impossible";
    VELOCIRAPTOR:
    cout << "\n";
  }
  return 0;
}

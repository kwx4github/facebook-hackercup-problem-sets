/// *********************************************** K
/// B *                                           * H
/// I *    Solved By   : JU_Undefined_Coder       * A
/// R *    Team Member : Bir Bahadur Khatri(B'ru) * T
/// U *                                           * R
/// *********************************************** I

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <list>
#define LL long long int
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define MEM(a,val) memset(a,val,sizeof(a))

#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define S1(a) a=in<int>()
#define S2(a,b) a=in<int>(),b=in<int>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define SL1(a) a=in<LL>()
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define all(a) a.begin(),a.end()
#define cnt_bit(a) __builtin_popcountll(a)
#define CHR getchar()
#define D double
#define sz size()
#define PB push_back
#define cp printf("here\n");
#define NL printf("\n")
#include <time.h>
/// Fast Scan
template <typename T> T in()
{
    char ch;
    T n = 0;
    bool ng = false;
    while (1)
    {
        ch = getchar();
        if (ch == '-')
        {
            ng = true;
            ch = getchar();
            break;
        }
        if (ch>='0' && ch<='9')     break;
    }
    while (1)
    {
        n = n*10 + (ch - '0');
        ch = getchar();
        if (ch<'0' || ch>'9')   break;
    }
    return (ng?-n:n);
}
///**********************************************************//
//#define _cin ios_base::sync_with_stdio(0); cin.tie(0);
/// if(st<=l&&ed>=r)

/*
    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;
*/
///*********************************************************//

using namespace std;
///         0123456789
#define MX  102
#define MOD 1000000007
#define INF (1<<28)
#define eps 1e-9

/// ==========================================////

int n,m,dp[MX][MX][(MX*MX)/2],can[MX][MX][5],lim,KS;
int dx[]= {0,0,1,-1};
int dy[]= {1,-1,0,0};

int Sx,Sy,Dx,Dy,vs[MX][MX][(MX*MX)];

char s[102][102];

map<char,int> mp;

int isOk(int i,int j)
{
    if(i<1||i>n||j<1||j>m) return 0;
    if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G') return 1;
    return 0;
}
int cnt;

int solve(int r,int c,int koto)
{
    //cnt++;
    //cout<<r<< " "<<c<< " "<<koto<<endl;
    if(r==Dx&&c==Dy) return 0;
    int &res=dp[r][c][koto];
    if(vs[r][c][koto]==KS) return res;
    vs[r][c][koto]=KS;
    res=INF;
    if(koto<lim)
    {
        F(i,0,4)
        {
            int xx=r+dx[i];
            int yy=c+dy[i];
            if(isOk(xx,yy))
            {
                if(can[xx][yy][(koto%4)]==0)
                {
                    res=min(res,1+solve(xx,yy,koto+1));
                }
            }
        }
    }
    return res;
}

void make_vis(int dir,int r,int c,int val)
{
    if(dir==1)
    {
        for(int i=c-1; i>=1; i--)
        {
            if(s[r][i]=='.'||s[r][i]=='S'||s[r][i]=='G')
            {
                can[r][i][val]=1;
            }
            else break;
        }
    }
    if(dir==2)
    {
        for(int i=r-1; i>=1; i--)
        {
            if(s[i][c]=='.'||s[i][c]=='S'||s[i][c]=='G')
            {
                can[i][c][val]=1;
            }
            else break;
        }
    }
    if(dir==3)
    {
        for(int i=c+1; i<=m; i++)
        {
            if(s[r][i]=='.'||s[r][i]=='S'||s[r][i]=='G')
            {
                can[r][i][val]=1;
            }
            else break;
        }
    }
    if(dir==4)
    {
        for(int i=r+1; i<=n; i++)
        {
            if(s[i][c]=='.'||s[i][c]=='S'||s[i][c]=='G')
            {
                can[i][c][val]=1;
            }
            else break;
        }
    }
    return;
}

int check(int r,int c,int val)
{
    F(i,0,4)
    {
        if(val==5) val=1;
        make_vis(val,r,c,i);
        val++;
    }
}

void init()
{
    MEM(can,0);
}

int main()
{
     freopen("laser_maze.txt","r",stdin);
    freopen("Cout.txt","w",stdout);
    mp['<']=2;
    mp['>']=4;
    mp['^']=3;
    mp['v']=1;
    int t;
    lim=(MX*MX)/2-10;
    cin>>t;
    KS=1;


    F(cs,1,t+1)
    {
        init();
        cin>>n>>m;
        F(i,1,1+n)
        {
            cin>>s[i]+1;
        }
        F(i,1,n+1)
        {
            F(j,1,m+1)
            {
                if(s[i][j]=='.'||s[i][j]=='S'||s[i][j]=='G'||s[i][j]=='#')
                {
                    if(s[i][j]=='S')
                    {
                        Sx=i,Sy=j;
                    }
                    if(s[i][j]=='G')
                    {
                        Dx=i,Dy=j;
                    }
                    continue;
                }
                check(i,j,mp[s[i][j]]);
            }
        }
        printf("Case #%d: ",cs);
        int ans=INF;
        F(i,0,4)
        {
            int xx=Sx+dx[i];
            int yy=Sy+dy[i];
            if(isOk(xx,yy))
            {
                ans=min(ans,1+solve(xx,yy,1));
            }
        }
        KS++;
        if(ans>=INF) printf("impossible\n");
        else printf("%d\n",ans);
        //cout<<cnt<<endl;

    }

    return 0;
}

/*
1
100 100
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
S..................................................................................................G
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
##^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^####^##
*/

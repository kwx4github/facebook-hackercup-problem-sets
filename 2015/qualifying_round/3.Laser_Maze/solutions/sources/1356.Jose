#include <iostream>
#include <fstream>
#include <vector>
#include <queue>

using namespace std;

struct nodo {
       int x , y , dir;  // 0 norte 1 este 2 sur 3 oeste
       int pasos;
};

char map[100][100][4];
bool vis[100][100][4];
nodo tor[10000];
int  mov[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
nodo inicio;
nodo fin;

main ()
{
     ifstream in ("input.txt",  ifstream::in);
     ofstream out("output.txt", ofstream::out);
     int mapas;
     int mx, my;
     char   cas;
     in >> mapas;
     for (int c1 = 1 ; c1 <= mapas ; c1++)
     {
         int ntor = 0;
         in >> my >> mx ;
         for (int c2 = 0 ; c2 < my ; c2++)
         {
             for (int c3 = 0; c3 < mx ; c3++)
             {
                 in >> cas;
                 vis[c2][c3][0] = false; 
                 vis[c2][c3][1] = false;
                 vis[c2][c3][2] = false;
                 vis[c2][c3][3] = false;
                 if(cas == '#')
                 {
                        map[c2][c3][0] = '#'; 
                        map[c2][c3][1] = '#';
                        map[c2][c3][2] = '#';
                        map[c2][c3][3] = '#';
                 }
                 else if(cas == '.')
                 {
                        map[c2][c3][0] = '.'; 
                        map[c2][c3][1] = '.';
                        map[c2][c3][2] = '.';
                        map[c2][c3][3] = '.';
                 }
                 else if(cas == '^')
                 {
                        map[c2][c3][0] = '^'; 
                        map[c2][c3][1] = '^';
                        map[c2][c3][2] = '^';
                        map[c2][c3][3] = '^';
                        tor[ntor].x = c3;
                        tor[ntor].y = c2;
                        tor[ntor].dir = 0;
                        ntor++;
                 }
                 else if(cas == '>')
                 {
                        map[c2][c3][0] = '>'; 
                        map[c2][c3][1] = '>';
                        map[c2][c3][2] = '>';
                        map[c2][c3][3] = '>';  
                        tor[ntor].x = c3;
                        tor[ntor].y = c2;
                        tor[ntor].dir = 1;
                        ntor++;
                 }
                 else if(cas == 'v')
                 {
                        map[c2][c3][0] = 'v'; 
                        map[c2][c3][1] = 'v';
                        map[c2][c3][2] = 'v';
                        map[c2][c3][3] = 'v';
                        tor[ntor].x = c3;
                        tor[ntor].y = c2;
                        tor[ntor].dir = 2;
                        ntor++;
                 }
                 else if(cas == '<')
                 { 
                        map[c2][c3][0] = '<'; 
                        map[c2][c3][1] = '<';
                        map[c2][c3][2] = '<';
                        map[c2][c3][3] = '<';
                        tor[ntor].x = c3;
                        tor[ntor].y = c2;
                        tor[ntor].dir = 3;
                        ntor++;
                 }
                 else if (cas == 'S')
                 { 
                        map[c2][c3][0] = 'I'; 
                        map[c2][c3][1] = 'I';
                        map[c2][c3][2] = 'I';
                        map[c2][c3][3] = 'I';
                        inicio.y = c2;
                        inicio.x = c3;
                        inicio. dir = 0;
                        inicio.pasos = 0;
                 }
                 else if (cas == 'G')
                 { 
                        map[c2][c3][0] = 'F'; 
                        map[c2][c3][1] = 'F';
                        map[c2][c3][2] = 'F';
                        map[c2][c3][3] = 'F';
                        fin.y = c2;
                        fin.x = c3;
                        fin.pasos = -100;
                 }
             }
         }
         for (int c2 = 0; c2 < ntor ; c2++)
         {
             int ax, ay;
             for (int c3 = 0 ; c3 < 4 ; c3++)
             {
                 ax = 0; ay = 0;
                 if ((tor[c2].dir + c3) % 4 == 0)
                 {
                      do
                      {
                        ay--;
                        if (tor[c2].y + ay >= 0 )
                        {
                           if (map[tor[c2].y+ay][tor[c2].x][c3] != '#' && map[tor[c2].y+ay][tor[c2].x][c3] != '^' && map[tor[c2].y+ay][tor[c2].x][c3] != '>' && map[tor[c2].y+ay][tor[c2].x][c3] != 'v' && map[tor[c2].y+ay][tor[c2].x][c3] != '<')
                           map[tor[c2].y+ay][tor[c2].x][c3] = 'N';
                           else break;
                        }
                        else break;
                      } while (true);   // I really hate when I most to do this shit u.u
                 }
                 else if ((tor[c2].dir + c3 ) % 4 == 1 )
                 {
                      do
                      {
                        ax++;
                        if (tor[c2].x + ax < mx )
                        {
                           if (map[tor[c2].y][tor[c2].x+ax][c3] != '#' && map[tor[c2].y][tor[c2].x+ax][c3] != '^' && map[tor[c2].y][tor[c2].x+ax][c3] != '>' && map[tor[c2].y][tor[c2].x+ax][c3] != 'v' && map[tor[c2].y][tor[c2].x+ax][c3] != '<')
                           map[tor[c2].y][tor[c2].x+ax][c3] = 'E';
                           else break;
                        }
                        else break;
                      } while (true);   // I really hate when I most to do this shit u.u 
                 }
                 else if ((tor[c2].dir + c3 ) % 4 == 2)
                 {
                      do
                      {               
                        ay++;
                        if (tor[c2].y + ay < my ) 
                        {
                            if (map[tor[c2].y+ay][tor[c2].x][c3] != '#' && map[tor[c2].y+ay][tor[c2].x][c3] != '^' && map[tor[c2].y+ay][tor[c2].x][c3] != '>' && map[tor[c2].y+ay][tor[c2].x][c3] != 'v' && map[tor[c2].y+ay][tor[c2].x][c3] != '<')
                            map[tor[c2].y+ay][tor[c2].x][c3] = 'S';
                            else break;
                        }
                        else break;
                      } while (true);   // I really hate when I most to do this shit u.u
                 }
                 else if ((tor[c2].dir + c3 ) % 4 == 3)
                 {
                      do
                      {
                        ax--;
                        if (tor[c2].x + ax >= 0 )
                        {
                            if (map[tor[c2].y][tor[c2].x+ax][c3] != '#' && map[tor[c2].y][tor[c2].x+ax][c3] != '^' && map[tor[c2].y][tor[c2].x+ax][c3] != '>' && map[tor[c2].y][tor[c2].x+ax][c3] != 'v' && map[tor[c2].y][tor[c2].x+ax][c3] != '<')
                            map[tor[c2].y][tor[c2].x+ax][c3] = 'O';
                            else break;
                        }
                        else break;
                      } while (true);   // I really hate when I most to do this shit u.u 
                 
                 }
             }
         }
          // bfs xD 
         if ( map[fin.y][fin.x][0] != 'F' && map[fin.y][fin.x][1] != 'F' && map[fin.y][fin.x][2] != 'F' && map[fin.y][fin.x][3] != 'F' )
         out << "Case #" << c1 << ": " << "impossible" << endl;
         else
         {
             queue<nodo> cola;
             nodo actual;
             nodo proximo;
             cola.push(inicio);
             bool encontrado = false;
             while (!cola.empty() && !encontrado)
             {
                   actual = cola.front();
                   cola.pop();
                   for (int c2 = 0; c2 < 4 ; c2++)
                   {
                       proximo.y = actual.y + mov[c2][0];
                       proximo.x = actual.x + mov[c2][1];
                       proximo.pasos = actual.pasos + 1;
                       proximo. dir = actual.dir + 1;
                       if (proximo.y > -1 && proximo.y < my && proximo.x > -1 && proximo.x < mx)
                       {
                          if ( !vis[proximo.y][proximo.x][proximo.dir % 4])
                          {
                              if (map[proximo.y][proximo.x][proximo.dir % 4] == '.' || 
                                  map[proximo.y][proximo.x][proximo.dir % 4] == 'I' ||
                                  map[proximo.y][proximo.x][proximo.dir % 4] == 'F' )
                              {
                                  vis[proximo.y][proximo.x][proximo.dir % 4] = true;
                                  cola.push(proximo);
                                  if (map[proximo.y][proximo.x][proximo.dir % 4] == 'F')
                                  { 
                                    fin.pasos = proximo.pasos;
                                    encontrado = true;
                                    break;
                                  }
                              }
                          }
                       }
                   }
             }
             if (encontrado)
             out << "Case #" << c1 << ": " << fin.pasos << endl;
             else 
             out << "Case #" << c1 << ": " << "impossible" << endl;
         }
     }
     // PLEASE FORGIVE MY FOR MY CODE XD
}

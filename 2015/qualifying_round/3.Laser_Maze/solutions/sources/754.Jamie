import itertools
import copy

def oob(r, c, ROWS, COLS):
    return r < 0 or c < 0 or r >= ROWS or c >= COLS

def shoot_lasers(grid, ROWS, COLS):
    deltas = {
        '^': [-1, 0],
        '>': [0, 1],
        'v': [1, 0],
        '<': [0, -1]
    }

    endgrid = copy.deepcopy(grid)

    for row in xrange(ROWS):
        for col in xrange(COLS):
            if grid[row][col] in deltas:
                dr, dc = deltas[grid[row][col]]
                r = row
                c = col
                while True:
                    r += dr
                    c += dc

                    # Laser off the map
                    if oob(r, c, ROWS, COLS):
                        break

                    # Laser hit a turret or a wall
                    if grid[r][c] in (deltas.keys() + ['#']):
                        break

                    endgrid[r][c] = '*'

    return endgrid

def tick(grid, ROWS, COLS):
    successor = {
        '^': '>',
        '>': 'v',
        'v': '<',
        '<': '^'
    }

    endgrid = copy.deepcopy(grid)

    for row in xrange(ROWS):
        for col in xrange(COLS):
            if grid[row][col] in successor:
                endgrid[row][col] = successor[grid[row][col]]

    return endgrid

def find(char, grid, ROWS, COLS):
    for row in xrange(ROWS):
        for col in xrange(COLS):
            if grid[row][col] == char:
                return (row, col)

T = input()
for case_num in range(1, T + 1):
    ROWS, COLS = map(int, raw_input().split(" "))

    grid = [list(raw_input().strip()) for i in xrange(ROWS)]

    grid_states = [grid]

    for i in xrange(3):
        grid_states.append(tick(grid_states[-1], ROWS, COLS))

    for i in xrange(4):
        grid_states[i] = shoot_lasers(grid_states[i], ROWS, COLS)

    start_pos = find('S', grid, ROWS, COLS)
    end_pos = find('G', grid, ROWS, COLS)

    frontier = [(start_pos[0], start_pos[1], 0)]

    explored = set()

    ans = "impossible"

    while frontier:
        front = frontier.pop(0)

        row = front[0]
        col = front[1]
        steps = front[2]
        state = steps % 4

        # Coordinate is out of bounds - ignore it
        if oob(row, col, ROWS, COLS):
            continue

        # Coordinate is in a wall, turret, we're in an invalid state
        if grid_states[state][row][col] in "^>v<#":
            continue

        # Coordinate is in a laser beam (allowed on first turn as special case)
        if steps > 0 and grid_states[state][row][col] == '*':
            continue

        # Found the exit! we're done
        if (row, col) == end_pos:
            ans = steps
            break

        # Already explored this state, move on
        if (row, col, state) in explored:
            continue

        explored.add((row, col, state))

        frontier.append((row+1, col, steps+1))
        frontier.append((row-1, col, steps+1))
        frontier.append((row, col+1, steps+1))
        frontier.append((row, col-1, steps+1))

    print "Case #%d: %s" % (case_num, ans)

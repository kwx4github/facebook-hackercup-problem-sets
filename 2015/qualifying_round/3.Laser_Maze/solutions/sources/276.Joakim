#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <climits>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
using namespace std;
#define FOR(it,st,en) for(int it=(st);it<(int)(en);++it)
#define REP(it,en) FOR(it,0,en)
#define ITE(it,c) for(auto it=(c).begin();it!=(c).end();++it)
#define ALLOF(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define X first
#define Y second
typedef long long int LL; 
typedef long double LD;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
const int INF=(int)1e9; 
const double EPS=(LD)1e-7;

vector<vector<vector<int> > > Map; //true if wall

//   0
// 1   3
//   2

void solve(){
	int M,N;
	cin>>M>>N;
	Map.assign(4,vector<vector<int> >(M,vector<int>(N,1)));
	vector<vector<PII> > lasers(4,vector<PII>());
	PII start,goal;
	REP(i,M){
		string s;
		cin>>s;
		REP(j,N){
			if(s[j]=='.' || s[j]=='S' || s[j]=='G'){
				REP(k,4)Map[k][i][j]=0;
				if(s[j]=='S')start=MP(i,j);
				if(s[j]=='G')goal=MP(i,j);
			}
			else if(s[j]=='^'){
				lasers[0].PB(MP(i,j));
			}
			else if(s[j]=='<'){
				lasers[1].PB(MP(i,j));
			}
			else if(s[j]=='v'){
				lasers[2].PB(MP(i,j));
			}
			else if(s[j]=='>'){
				lasers[3].PB(MP(i,j));
			}
		}
	}
	REP(i,4){
		for(auto P: lasers[i]){
			//UP
			PII p=P;
			p.X--;
			while(p.X>=0 && Map[i][p.X][p.Y]%2==0){
				Map[i][p.X][p.Y]=2;
				p.X--;
			}
			//Right
			p=P;
			p.Y++;
			while(p.Y<N && Map[(i+1)%4][p.X][p.Y]%2==0){
				Map[(i+1)%4][p.X][p.Y]=2;
				p.Y++;
			}

			//Down
			p=P;
			p.X++;
			while(p.X<M && Map[(i+2)%4][p.X][p.Y]%2==0){
				Map[(i+2)%4][p.X][p.Y]=2;
				p.X++;
			}

			//Left
			p=P;
			p.Y--;
			while(p.Y>=0 && Map[(i+3)%4][p.X][p.Y]%2==0){
				Map[(i+3)%4][p.X][p.Y]=2;
				p.Y--;
			}
		}
	}
	// REP(i,4){
	// 	cout<<"Time "<<i<<endl;
	// 	REP(j,M){
	// 		REP(k,N){
	// 			cout<<Map[i][j][k]<<' ';
	// 		}
	// 		cout<<endl;
	// 	}
	// 	cout<<endl;
	// }


	queue<pair<int,PII> > Q;
	vector<vector<vector<int> > > Dist(4,vector<vector<int> >(M,vector<int>(N,INF)));
	Dist[0][start.X][start.Y]=0;
	Q.push(MP(0,start));
	while(!Q.empty()){
		PII p=Q.front().Y;
		int t=Q.front().X;
		t=(t+1)%4;
		Q.pop();
		// cout<<p.X<<' '<<p.Y<<' '<<t<<endl;
		if(p==goal){
			cout<<Dist[(t+3)%4][p.X][p.Y];
			return;
		}

		if(p.X>0 && !Map[t][p.X-1][p.Y]){
			if(Dist[t][p.X-1][p.Y] > Dist[(t+3)%4][p.X][p.Y]+1){
				Dist[t][p.X-1][p.Y] = Dist[(t+3)%4][p.X][p.Y]+1;
				Q.push(MP(t,MP(p.X-1,p.Y)));
			}
		}
		if(p.Y>0 && !Map[t][p.X][p.Y-1]){
			if(Dist[t][p.X][p.Y-1] > Dist[(t+3)%4][p.X][p.Y]+1){
				Dist[t][p.X][p.Y-1] = Dist[(t+3)%4][p.X][p.Y]+1;
				Q.push(MP(t,MP(p.X,p.Y-1)));
			}
		}
		if(p.X<M-1 && !Map[t][p.X+1][p.Y]){
			if(Dist[t][p.X+1][p.Y] > Dist[(t+3)%4][p.X][p.Y]+1){
				Dist[t][p.X+1][p.Y] = Dist[(t+3)%4][p.X][p.Y]+1;
				Q.push(MP(t,MP(p.X+1,p.Y)));
			}
		}
		if(p.Y<N-1 && !Map[t][p.X][p.Y+1]){
			if(Dist[t][p.X][p.Y+1] > Dist[(t+3)%4][p.X][p.Y]+1){
				Dist[t][p.X][p.Y+1] = Dist[(t+3)%4][p.X][p.Y]+1;
				Q.push(MP(t,MP(p.X,p.Y+1)));
			}
		}
	}
	cout<<"impossible";
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin>>T;
    REP(i,T){
    	cout<<"Case #"<<i+1<<": ";
    	solve();
    	cout<<endl;
    }
	return 0;
}
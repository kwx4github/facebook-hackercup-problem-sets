import java.util.*;
import java.io.*;
public class LaserMaze
{
	public static void main(String[] args) throws Exception
	{
//		Scanner in = new Scanner(System.in);
//		PrintWriter out = new PrintWriter(System.out);
		
		Scanner in = new Scanner(new File("laser_maze.txt"));
		PrintWriter out = new PrintWriter(new FileWriter(new File("LaserMazeOutput.txt")));
		
		int[] dr = {0, 1, 0, -1};
		int[] dc = {1, 0, -1, 0};
		char[] turret = {'>', 'v', '<', '^'};
		
		int t = in.nextInt();
		for(int x = 0; x < t; x++)
		{
			int m = in.nextInt();
			int n = in.nextInt();
			
			char[][] grid = new char[m][n];
			for(int y = 0; y < m; y++)
			{
				grid[y] = in.next().toCharArray();
			}
			
			boolean[][][] maze = new boolean[4][m][n];
			for(int z = 0; z < maze.length; z++)
			{
				for(int a = 0; a < maze[0].length; a++)
				{
					Arrays.fill(maze[z][a], true);
				}
			}
			
			int sr = -1;
			int sc = -1;
			int er = -1;
			int ec = -1;
			for(int b = 0; b < grid.length; b++)
			{
				for(int c = 0; c < grid[0].length; c++)
				{
					if(grid[b][c] == '#')
					{
						for(int d = 0; d < maze.length; d++)
						{
							maze[d][b][c] = false;
						}
					}
					else if(grid[b][c] == 'S')
					{
						sr = b;
						sc = c;
					}
					else if(grid[b][c] == 'G')
					{
						er = b;
						ec = c;
					}
					else if(grid[b][c] != '.')
					{
						int dir = -1;
						for(int e = 0; e < turret.length; e++)
						{
							if(turret[e] == grid[b][c])
							{
								dir = e;
								break;
							}
						}
						
						for(int f = 0; f < maze.length; f++)
						{
							maze[f][b][c] = false;
							
							int row = b;
							int col = c;
							while(true)
							{
								row += dr[dir];
								col += dc[dir];
								
								if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || (grid[row][col] != '.' && grid[row][col] != 'S' && grid[row][col] != 'G'))
								{
									break;
								}
								
								maze[f][row][col] = false;
							}
							
							dir = (dir + 1) % 4;
						}
					}
				}
			}
			
			if(sr == -1 || er == -1)
			{
				out.println("Case #" + (x + 1) + ": impossible");
				continue;
			}
			
			ArrayDeque<Integer> queue = new ArrayDeque<Integer>();
			queue.add(0);
			queue.add(sr);
			queue.add(sc);
			
			int result = -1;
			int moves = 0;
			outer:
			while(queue.size() > 0)
			{
				int size = queue.size();
				for(int g = 0; g < size; g += 3)
				{
					int dir = queue.remove();
					int row = queue.remove();
					int col = queue.remove();
					
					if(row == er && col == ec)
					{
						result = moves;
						break outer;
					}
					
					dir = (dir + 1) % 4;
					for(int h = 0; h < dr.length; h++)
					{
						int nr = row + dr[h];
						int nc = col + dc[h];
						if(nr >= 0 && nr < grid.length && nc >= 0 && nc < grid[0].length && maze[dir][nr][nc])
						{
							maze[dir][nr][nc] = false;
							queue.add(dir);
							queue.add(nr);
							queue.add(nc);
						}
					}
				}
				
				moves++;
			}
			
			out.print("Case #" + (x + 1) + ": ");
			if(result == -1)
			{
				out.println("impossible");
			}
			else
			{
				out.println(result);
			}
		}
		
		out.close();
	}
}

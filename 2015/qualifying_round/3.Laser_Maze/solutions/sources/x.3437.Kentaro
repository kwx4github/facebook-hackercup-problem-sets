#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <iostream>
#include <queue>
#include <stack>
#include <utility>
#include <vector>
using namespace std;

typedef pair<int, int> pr;

struct state{
    int t;
    int x;
    int y;
    state(){}
    ~state(){}
    state(int a, int b, int c): t(a), x(b), y(c) {}
};

const char laser[8] = "v<^>";
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, -1, 0, 1};

int main(){
    int T;
    scanf("%d", &T);
    for(int t = 1; t <= T; t++){
        int M, N;
        char maze[200][200];
        char fire[200][200];
        int sx, sy, gx, gy;
        scanf("%d%d", &M, &N);
        for(int i = 0; i < M; i++){
            fill(fire[i], fire[i] + N, 0);
        }
        for(int i = 0; i < M; i++){
            scanf(" %s", maze[i]);
            for(int j = 0; j < N; j++){
                //laser
                for(int l = 0; l < 4; l++){
                    if(maze[i][j] == laser[l]){
                        for(int k = 0; k < 4; k++){
                            int d = (l + k) % 4;
                            int nx = i + dx[d];
                            int ny = j + dy[d];
                            while(0 <= nx && nx < M && 0 <= ny && ny < N){
                                if(maze[nx][ny] == '#') break;
                                fire[nx][ny] |= (1 << k);
                                nx += dx[d];
                                ny += dy[d];
                            }
                        }
                    }
                }
                //start & goal
                if(maze[i][j] == 'S'){
                    sx = i;
                    sy = j;
                }
                if(maze[i][j] == 'G'){
                    gx = i;
                    gy = j;
                }
            }
        }
        queue<state> que;
        que.push(state(0, sx, sy));
        int ans = -1;
        while(!que.empty()){
            state p = que.front(); que.pop();
            if(p.t > 0 && fire[p.x][p.y] & (1 << (p.t % 4))){
                continue;
            }
            if(p.x == gx && p.y == gy){
                ans = p.t;
                break;
            }
            for(int i = 0; i < 4; i++){
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];
                if(0 <= nx && nx < M &&
                        0 <= ny && ny < N){
                    if(maze[nx][ny] == '#') continue;
                    bool laserf = false;
                    for(int k = 0; k < 4; k++){
                        if(maze[nx][ny] == laser[k]){
                            laserf = true;
                            break;
                        }
                    }
                    if(laserf) continue;
                    que.push(state(p.t + 1, nx, ny));
                    maze[nx][ny] = '#';
                }
            }
        }
        printf("Case #%d: ", t);
        if(ans < 0){
            printf("impossible\n");
        }else{
            printf("%d\n", ans);

        }
    }
    return 0;
}

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long LL;
int Case;
const int N = 109;
char a[N][N];
bool laser[N][N][4];
int vis[N][N][4] , n , m;
struct Step{
    Step(){}
    Step(int a , int b , int c):x(a) , y(b) , step(c){}
    int x , y , step;
    bool operator < (const Step & A) const{
        return step > A.step;
    }
};
priority_queue<Step> q;
bool inmap(int x , int y){
    return 0 <= x && x < n && 0 <= y && y < m;
}
int sx , sy , ex , ey;
const int dx[] = {0 , 1 , 0 , -1};
const int dy[] = {1 , 0 , -1 , 0};
void solve(){
    while(!q.empty()) q.pop();
    scanf("%d%d" , &n , &m);
    for (int i = 0 ; i < n ; ++i) scanf("%s" , a[i]);
    memset(vis , -1 , sizeof(vis));
    memset(laser , 0 , sizeof(laser));
    for (int i = 0 ; i < n ; ++i)
        for (int j = 0 ; j < m ; ++j){
            if (a[i][j] == 'S') sx = i , sy = j;
            else if (a[i][j] == 'G') ex = i , ey = j;
            else if (a[i][j] == '^'){
                int d = 3;
                for (int t = 0 , dir = d; t < 4 ; t++ , dir = (dir + 1) % 4){
                    for (int k = 1 ; ; k++){
                        int x = i + k * dx[dir] , y = j + k * dy[dir];
                        if (!inmap(x , y)) break;
                        if (a[x][y] == '^' || a[x][y] == '#' || a[x][y] == 'v' || a[x][y] == '<' || a[x][y] == '>') break;
                        laser[x][y][t] = 1;
//                        cout << x << ' ' << y << ' ' << t << endl;
                    }
                }
            }
            else if (a[i][j] == '>'){
                int d = 0;
                for (int t = 0 , dir = d; t < 4 ; t++ , dir = (dir + 1) % 4){
                    for (int k = 1 ; ; k++){
                        int x = i + k * dx[dir] , y = j + k * dy[dir];
                        if (!inmap(x , y)) break;
                        if (a[x][y] == '^' || a[x][y] == '#' || a[x][y] == 'v' || a[x][y] == '<' || a[x][y] == '>') break;
                        laser[x][y][t] = 1;
                    }
                }
            }
            else if (a[i][j] == 'v'){
                int d = 1;
                for (int t = 0 , dir = d; t < 4 ; t++ , dir = (dir + 1) % 4){
                    for (int k = 1 ; ; k++){
                        int x = i + k * dx[dir] , y = j + k * dy[dir];
                        if (!inmap(x , y)) break;
                        if (a[x][y] == '^' || a[x][y] == '#' || a[x][y] == 'v' || a[x][y] == '<' || a[x][y] == '>') break;
                        laser[x][y][t] = 1;
                    }
                }
            }
            else if (a[i][j] == '<'){
                int d = 2;
                for (int t = 0 , dir = d; t < 4 ; t++ , dir = (dir + 1) % 4){
                    for (int k = 1 ; ; k++){
                        int x = i + k * dx[dir] , y = j + k * dy[dir];
                        if (!inmap(x , y)) break;
                        if (a[x][y] == '^' || a[x][y] == '#' || a[x][y] == 'v' || a[x][y] == '<' || a[x][y] == '>') break;
                        laser[x][y][t] = 1;
                    }
                }
            }
        }
//    if (laser[sx][sy][0]){
//        printf("Case #%d: impossible\n" , ++Case);
//        return;
//    }
    q.push(Step(sx , sy , 0));
    vis[sx][sy][0] = 0;
    int ans = -1;
    cerr << "PreDone" << endl;
    for( ; !q.empty() ; ){
        Step now = q.top() , go;
//        cerr << now.x << ' ' << now.y << endl;
        q.pop();
        for (int d = 0 ; d < 4 ; ++d){
            go = Step(now.x + dx[d] , now.y + dy[d] , now.step + 1);
            if (ans != -1 && go.step + abs(ex - go.x) + abs(ey - go.y) >= ans) continue;
            if (!inmap(go.x , go.y)) continue;
            int ss = go.step % 4;
            if (laser[go.x][go.y][ss] || a[go.x][go.y] == '#' || a[go.x][go.y] == '^' || a[go.x][go.y] == 'v' || a[go.x][go.y] == '<' || a[go.x][go.y] == '>') continue;
            if (vis[go.x][go.y][ss] != -1 && vis[go.x][go.y][ss] <= go.step) continue;
            vis[go.x][go.y][ss] = go.step;
            if (go.x == ex && go.y == ey){
                if (ans == -1 || ans > go.step) ans = go.step;
            }
            else q.push(go);
        }
    }
    if (ans == -1) printf("Case #%d: impossible\n" , ++Case);
    else printf("Case #%d: %d\n" , ++Case , ans);
    cerr << Case << endl;
}
int main(){
    freopen("laser_maze.txt" , "r" , stdin);
    freopen("55.out" , "w" , stdout);
    Case = 0;
    int _;
    scanf("%d" , &_);
    while(_--) solve();
}


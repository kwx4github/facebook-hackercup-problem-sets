

#include <vector>
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;


#define PB(x) push_back(x)
typedef vector<int> VI;


const int N = 110;
const int S = 4;

bool danger[S][N][N];
bool vis[S][N][N];
char M[S][N][N];
char laser[]="^>v<";
int d[4][2]={ {-1,0}, {0,1}, {1,0}, {0,-1} };

int find(char c)
{
  int i=0;
  while(i<S && laser[i]!=c)++i;
  return i;
}

char next(char c)
{
  char r=c;
  switch(c){
  case '^' : r='>';break;
  case '>' : r='v';break;
  case 'v' : r='<';break;
  case '<' : r='^';break;
  }
  return r;
}

int solve()
{
  memset(M,0,sizeof(M));
  memset(vis,0,sizeof(vis));
  memset(danger,0,sizeof(danger));

  int R,C;
  scanf("%d%d",&R,&C);
  for(int i=0;i<R;++i) scanf("%s",M[0][i]);
  
  for(int t=0; t < S-1; ++t){
    for(int i=0;i<R;++i)for(int j=0;j<C;++j) M[t+1][i][j] = next( M[t][i][j] );
  }

  for(int t=0; t< S;++t){
    for(int r=0;r<R;++r) for(int c=0;c<C;++c){

	if(M[t][r][c]!='.' && M[t][r][c] != 'S' && M[t][r][c]!='G') danger[t][r][c] = true;

	int k = find(M[t][r][c]);
	if(k<S){
	  int tr=r + d[k][0], tc=c + d[k][1];
	  while(tr>=0 && tr<R && tc>=0 && tc<C && (M[t][tr][tc]=='.' || M[t][tr][tc]=='S' || M[t][tr][tc]=='G')){
	    danger[t][tr][tc] = true;
	    tr += d[k][0];
	    tc += d[k][1];
	  }
	}
      }
  }


  int sr,sc;
  for(int i=0;i<R;++i)for(int j=0;j<C;++j) {
      if(M[0][i][j] == 'S') {sr=i;sc=j; break;}
    }

  vis[0][sr][sc]=true;
  VI v;
  v.PB( sr * 1000 + sc);
  int step=0;
  bool suc = false;

  while(v.size()){
    VI tv;
    for(auto x : v){
      int k = x / 1000000;
      int r = (x - k*1000000)/ 1000;
      int c = x % 1000;
      if(M[k][r][c]=='G') return step;

      k = (k+1) % S;
      for(int i=0;i<4;++i){
	int tr = r + d[i][0];
	int tc = c + d[i][1];
	if(tr>=0 && tr < R && tc>=0 && tc< C && !danger[k][tr][tc] && !vis[k][tr][tc]){
	  vis[k][tr][tc] = true;
	  tv.PB( k*1000000 + tr * 1000 + tc );
	}
      }
    }

    ++step;
    swap(v,tv);
  }

  return -1;
}

int main()
{
  int T,cs=0;
  scanf("%d",&T);
  while(++cs <= T){
    int ans = solve();
    printf("Case #%d: ",cs);
    if(ans < 0) puts("impossible");
    else printf("%d\n",ans);
  }

  return 0;
}


#include <ext/numeric>
#include <bits/stdc++.h>
using namespace std;
using namespace __gnu_cxx;

#define SZ(x) ((int)x.size())

int n, m;
string grid[100];
int si, sj, gi, gj;
string dir = "^>v<";
int vis[100][100][4];
int inValid[100][100];
int di[] = {-1, 0, 1,  0};
int dj[] = { 0, 1, 0, -1};

void init() {
	memset(vis, 0, sizeof vis);
	memset(inValid, -1, sizeof inValid);
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (grid[i][j] == 'S') {
				si = i, sj = j;
			} else if (grid[i][j] == 'G') {
				gi = i, gj = j;
			} else if (dir.find(grid[i][j]) != string::npos) {
				for (int d = 0; d < 4; ++d) {
					int u = dir.find(grid[i][j]);
					if (u > d) {
						u = (4 - u) + d;
					} else {
						u = d - u;
					}
					int ti = i + di[d], tj = j + dj[d];
					while (ti >= 0 && ti < n && tj >= 0 && tj < m
							&& grid[ti][tj] != '#' && dir.find(grid[ti][tj]) == string::npos) {
						inValid[ti][tj] = u;
						ti += di[d], tj += dj[d];
					}
				}
			}
		}
	}
}

int bfs() {
	init();
	int si = ::si, sj = ::sj, lvl = 0;
	queue < pair<int,int> > q;
	q.push(make_pair(si, sj)); vis[si][sj][0] = 1;
	while (SZ(q)) {
		int sz = SZ(q);
		while (sz--) {
			si = q.front().first, sj = q.front().second; q.pop();
			if (si == gi && sj == gj) {
				return lvl;
			}
			for (int d = 0; d < 4; ++d) {
				int ti = si + di[d], tj = sj + dj[d];
				if (ti >= 0 && ti < n && tj >= 0 && tj < m
						&& inValid[ti][tj] != ((lvl + 1) % 4) && vis[ti][tj][(lvl + 1)% 4] == false
						&& grid[ti][tj] != '#' && dir.find(grid[ti][tj]) == string::npos) {
					q.push(make_pair(ti, tj));
					vis[ti][tj][(lvl + 1) % 4] = true;
				}
			}
		}
		++lvl;
	}
	return -1;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL), cout.tie(NULL);

	freopen("in.txt", "rt", stdin);
	freopen("out.txt", "wt", stdout);

	int t; cin >> t;
	for (int id = 1; id <= t; ++id) {
		cin >> n >> m;
		for (int i = 0; i < n; ++i) {
			cin >> grid[i];
		}
		int ans = bfs();
		cout << "Case #" << id << ": ";
		(ans == -1) ? cout << "impossible" << '\n' : cout << ans << '\n';
	}

	return 0;
}

#include <stdio.h>

int i,j,M,N;
char board[200][200];
int movement[200][200];
int goalpos[2];
int startpos[2];
int maxiter=2;
int impossible=0;

int checkmove(int i,int j)
{
//		board[i][j]=='G'
//		&&i<=M&&j<=N)

	if (board[i][j]=='#'||
		board[i][j]=='Q'||
		board[i][j]=='^'||
		board[i][j]=='v'||
		board[i][j]=='>'||
		board[i][j]=='<')
			return 0;
	
	return 1;
}

void step()
{
	int i,j;
	impossible=1;
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			if(movement[i][j]==maxiter)
			{
				//impossible=1;
				if(checkmove(i+1,j))
				{
					movement[i+1][j]=maxiter+1;
					impossible=0;
				}
				if(checkmove(i-1,j))
				{	
					movement[i-1][j]=maxiter+1;
					impossible=0;
				}	
				if(checkmove(i,j+1))
				{	
					movement[i][j+1]=maxiter+1;
					impossible=0;
				}
				if(checkmove(i,j-1))
				{
					movement[i][j-1]=maxiter+1;
					impossible=0;
				}
				//if(impossible)
				//	system("pause");
			}
		}
	}
	maxiter++;
}

void animateTurret()
{
	board[goalpos[0]][goalpos[1]]='G';
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			if(board[i][j]=='Q')
			board[i][j]='.';
		}
	}
				
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			
			switch(board[i][j])
			{
				int q;
				case '^':
				board[i][j]='>';
				q=1;
				
				while(i+q<M&&board[i+q][j]=='.'||board[i+q][j]=='G')
				{
					board[i+q][j]='Q';
					q++;
				}
				break;
				case '>':
				board[i][j]='v';
				q=1;
				while(j-q>=0&&board[i][j-q]=='.'||board[i][j-q]=='G')
				{
					board[i][j-q]='Q';
					q++;
				}
				break;
				case 'v':
				board[i][j]='<';
				q=1;
				while(i-q>=0&&board[i-q][j]=='.'||board[i-q][j]=='G')
				{
					board[i-q][j]='Q';
					q++;
				}
				break;
				case '<':
				board[i][j]='^';
				q=1;
				while(j+q<N&&board[i][j+q]=='.'||board[i][j+q]=='G')
				{
					board[i][j+q]='Q';
					q++;
				}
				break;
			}
		}
	}
}

void printBoard()
{
	
	for (i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf("%c",(board[i][j]));
		}
		printf("\n");
	}
	printf("\n");
}

void printMovement()
{
	
	for (i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf("%d",(movement[i][j]));
		}
		printf("\n");
	}
	printf("\n");
}

int main()
{
	int T, Tcopy;
	scanf("%d",&T);
	Tcopy=T;
	while(T--)
	{
		
		
		scanf("%d %d",&M, &N);
		
		for(i=0;i<M;i++)
		{
			for(j=0;j<N;j++)
			{
				board[i][j]='.';
				movement[i][j]=0;
			}
		}
		
		int i,j;
		for (i=0;i<M;i++)
		{
			getchar();
			for(j=0;j<N;j++)
			{
				scanf("%c",&(board[i][j]));
				if(board[i][j]=='G')
				{
					goalpos[0]=i;
					goalpos[1]=j;
				}

			}
		}
		
		for (i=0;i<M;i++)
		{
			for(j=0;j<N;j++)
			{
				if(board[i][j]=='S')
				{
					if(movement[i][j]==0) movement[i][j]=1;
					startpos[0]=i;
					startpos[1]=j;
					
					if(checkmove(i+1,j))
						movement[i+1][j]=2;
					
					if(checkmove(i-1,j))
						movement[i-1][j]=2;
						
					if(checkmove(i,j+1))
						movement[i][j+1]=2;
					
					if(checkmove(i,j-1))
						movement[i][j-1]=2;
					
					board[i][j]='.';
				}
			}
		}
		maxiter=2;
		
		//animateTurret();
		//printBoard();
		//printMovement();
		
		while(movement[goalpos[0]][goalpos[1]]==0)
		{
			animateTurret();
			step();
			//printBoard();
			//printMovement();
			//system("pause");
			if(maxiter>999999)
				impossible=1;
			if(impossible)break;
		}
		
		if(impossible)
		{
			printf("Case #%d: impossible\n",Tcopy-T);
		}else
		{
			printf("Case #%d: %d\n",Tcopy-T,movement[goalpos[0]][goalpos[1]]-1);
		}
		for(i=0;i<M;i++)
		{
			for(j=0;j<N;j++)
			{
				board[i][j]='.';
				movement[i][j]=0;
			}
		}
	}
	return 0;
}
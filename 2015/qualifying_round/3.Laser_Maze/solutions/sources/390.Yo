package hackerCup2015;

import java.util.*;
import java.io.*;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static java.lang.Math.*;

public class C {

	int INF = 1 << 28;
	//long INF = 1L << 62;
	double EPS = 1e-10;
	int h, w;
	int[][] map;
	int sx, sy, gx, gy;
	ArrayList<S> lazers;
	
	final int SPACE = 0, LEFT = 1, UP = 2, RIGHT = 3, DOWN = 4, WALL = 5;

	void run() throws FileNotFoundException {
		Scanner sc = new Scanner(new File("C.in"));
		PrintWriter pw = new PrintWriter(new File("C.out"));

		for (int t = 1, T = sc.nextInt(); t <= T; t++) {
			h = sc.nextInt(); w = sc.nextInt();
			map = new int[h + 2][w + 2];
			lazers = new ArrayList<S>();
			for (int[] a : map) fill(a, WALL);
			for (int i = 1; i <= h; i++) {
				String l = sc.next();
				for (int j = 1; j <= w; j++) {
					switch (l.charAt(j-1)) {
					case 'S':
						sx = j; sy = i;
						map[i][j] = SPACE;
						break;
					case 'G':
						gx = j; gy = i;
						map[i][j] = SPACE;
						break;
					case '.':
						map[i][j] = SPACE;
						break;
					case '<':
						map[i][j] = LEFT;
						lazers.add(new S(j, i, LEFT));
						break;
					case '^':
						map[i][j] = UP;
						lazers.add(new S(j, i, UP));
						break;
					case '>':
						map[i][j] = RIGHT;
						lazers.add(new S(j, i, RIGHT));
						break;
					case 'v':
						map[i][j] = DOWN;
						lazers.add(new S(j, i, DOWN));
						break;
					}
				}
			}
			
			int ans = solve();
			System.out.println("Case #" + t + ": " + (ans >= 0 ? "" + ans : "impossible"));
			pw.println("Case #" + t + ": " + (ans >= 0 ? "" + ans : "impossible"));
		}
		pw.close();
	}
	
	int solve() {
		int[][][] dist = new int[h + 2][w + 2][4];
		for (int[][] a : dist) for (int[] b : a) fill(b, INF);
		dist[sy][sx][0] = 0;
		
		LinkedList<S> q = new LinkedList<S>();
		q.addLast(new S(sx, sy, 0));
		
		for (;!q.isEmpty();) {
			S cur = q.removeFirst();
			if (dist[cur.y][cur.x][cur.t%4] != cur.t) continue;
			if (cur.x == gx && cur.y == gy) return cur.t;
			
			for (int i = 0; i < 4; i++) if (ok(cur.x + dx[i], cur.y + dy[i], cur.t + 1)){
				if (dist[cur.y + dy[i]][cur.x + dx[i]][(cur.t+1)%4] > cur.t + 1) {
					dist[cur.y + dy[i]][cur.x + dx[i]][(cur.t+1)%4] = cur.t + 1;
					q.addLast(new S(cur.x + dx[i], cur.y + dy[i], cur.t + 1));
				}
			}
		}
		
		return -1;
	}
	
	int[] dx = {-1,0,1,0};
	int[] dy = {0,-1,0,1};
	boolean ok(int x, int y, int t) {
		if (map[y][x] > 0) return false;
		for (S lazer : lazers) {
			int d = (lazer.t + t + 3) % 4;
			int cx = lazer.x + dx[d], cy = lazer.y + dy[d];
			while (map[cy][cx] == SPACE) {
				if (cx == x && cy == y) return false;
				cx += dx[d]; cy += dy[d];
			}
		}
		return true;
	}
	
	class S {
		int x, y, t;
		S(int x, int y, int t) {
			this.x = x;
			this.y = y;
			this.t = t;
		}
	}

	void debug(Object... os) {
		System.err.println(Arrays.deepToString(os));
	}

	public static void main(String[] args) {
		try {
			new C().run();
		} catch (FileNotFoundException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}
	}
}



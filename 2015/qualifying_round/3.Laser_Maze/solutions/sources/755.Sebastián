#include <iostream>

using namespace std;

int maze[102][102][4];
int addr[8][2]={{0,-1} , {-1,0} , {0,1} , {1,0},
                {0,-1} , {-1,0} , {0,1} , {1,0}};
int main(int argc, char** argv) {
    int T,M,N;
    int mstart,nstart,mgoal,ngoal;
    char buffer[200];
    cin >> T;
    for (int t=1; t<=T; t++)
    {
        cin >> M >> N;
        for (int m=0; m<=M+1; m++)  // wall around maze
            for (int i=0; i<4; i++)
            {
                maze[m][0][i]=-1;
                maze[m][N+1][i]=-1;
            }
        for (int n=0; n<=N+1; n++)
            for (int i=0; i<4; i++)
            {
                maze[0][n][i]=-1;
                maze[M+1][n][i]=-1;
            }
        for (int m=1; m<=M; m++)
        {
            cin >> buffer;
            for (int n=1; n<=N; n++)
            {
                int pos=0;  // free cell
                switch (buffer[n-1])
                {
                    case '#': pos=-1; break; // wall
                    case 's':
                    case 'S': mstart=m; nstart=n; break;  // start
                    case 'g':
                    case 'G': mgoal=m; ngoal=n; break;  //goal
                    case '<': pos=-2; break;  // lasers...
                    case '^': pos=-3; break;
                    case '>': pos=-4; break;
                    case 'V':
                    case 'v': pos=-5; break;
                }
                for (int i=0; i<4; i++)
                    maze[m][n][i]=pos;
            }
        }
        for (int m=1; m<=M; m++)  // laser blasts
            for (int n=1; n<=N; n++)
                if ((maze[m][n][0]<-1) && (maze[m][n][0]>-10))  // laser turret
                {
                    int pos=-maze[m][n][0]-2;  // initial side turret
                    for (int i=0; i<4; i++)  // turns
                    {
                        int mm=m;
                        int nn=n;
                        while (true)
                        {
                            mm+=addr[pos+i][0];
                            nn+=addr[pos+i][1];
                            if ((maze[mm][nn][0]<0) && (maze[mm][nn][0]>-10))  // laser reach wall
                                break;
                            else
                                maze[mm][nn][i]=-10;
                        }
                    }
                }
        int turn=1;  // Initial step
        int step=1;
        bool vale=true;
        for (int i=0; i<4; i++)
        {
            int m=mstart+addr[i][0];
            int n=nstart+addr[i][1];
            if (maze[m][n][turn]==0)
            {
                maze[m][n][turn]=step;
                vale=true;
            }
        }
        while (vale)
        {
            if (maze[mgoal][ngoal][turn]>0) break; // goal!
            vale=false;
            int newturn=((turn>=3) ? 0 : turn+1);
            for (int m=1; m<=M; m++)
                for (int n=1; n<=N; n++)
                    if (maze[m][n][turn]==step)  // next step
                    {
                        for (int i=0; i<4; i++)
                        {
                            int mm=m+addr[i][0];
                            int nn=n+addr[i][1];
                            if (maze[mm][nn][newturn]==0)
                            {
                                maze[mm][nn][newturn]=step+1;
                                vale=true;
                            }
                        }
                    }
            turn=newturn;
            step++;
        }
        cout << "Case #" << t << ": ";
        if (maze[mgoal][ngoal][turn]>0)
            cout << maze[mgoal][ngoal][turn];
        else
            cout << "impossible";
        cout << endl;
    }
    return 0;
}


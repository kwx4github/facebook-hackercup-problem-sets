/*
 Petar 'PetarV' Velickovic
 Task: Laser Maze
*/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>

#define MAX_N 101

#define DPRINTC(C) printf(#C " = %c\n", (C))
#define DPRINTS(S) printf(#S " = %s\n", (S))
#define DPRINTD(D) printf(#D " = %d\n", (D))
#define DPRINTLLD(LLD) printf(#LLD " = %lld\n", (LLD))
#define DPRINTLF(LF) printf(#LF " = %.5lf\n", (LF))

using namespace std;
typedef long long lld;
typedef unsigned long long llu;

int t, n, m;

int sx, sy, gx, gy;

char line[MAX_N];

char maze[MAX_N][MAX_N];
bool blok[MAX_N][MAX_N];
int mat[MAX_N][MAX_N][4];

void debug()
{
    for (int k=0;k<4;k++)
    {
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<m;j++)
            {
                printf("%c", (mat[i][j][k] != -1) ? '.' : '#');
            }
            printf("\n");
        }
        for (int j=0;j<m;j++) printf("-");
        printf("\n");
    }
}

int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};

bool mark[MAX_N][MAX_N][4];

int bfs()
{
    queue<int> qX, qY, qS, qD;
    for (int k=0;k<4;k++)
    {
        int sx1 = sx + dx[k];
        int sy1 = sy + dy[k];
        if (sx1 < 0 || sx1 > n - 1 || sy1 < 0 || sy1 > m - 1) continue;
        if (mat[sx1][sy1][1] == -1) continue;
        qX.push(sx1);
        qY.push(sy1);
        qS.push(1);
        qD.push(1);
    }
    
    while (!qX.empty())
    {
        int xt = qX.front(); int yt = qY.front();
        int st = qS.front(); int dt = qD.front();
        qX.pop(); qY.pop();
        qS.pop(); qD.pop();
        
        mark[xt][yt][st] = true;
        if (xt == gx && yt == gy) return dt;
        
        for (int k=0;k<4;k++)
        {
            int xt1 = xt + dx[k];
            int yt1 = yt + dy[k];
            int st1 = (st + 1) % 4;
            int dt1 = dt + 1;
            
            if (xt1 < 0 || xt1 > n - 1 || yt1 < 0 || yt1 > m - 1) continue;
            if (mat[xt1][yt1][st1] == -1) continue;
            if (mark[xt1][yt1][st1]) continue;
            
            mark[xt1][yt1][st1] = true;
            
            qX.push(xt1); qY.push(yt1);
            qS.push(st1); qD.push(dt1);
        }
    }
    
    return -1;
}

int main()
{
    freopen("/Users/PetarV/HackerCup/laser_maze.txt","r",stdin);
    freopen("/Users/PetarV/HackerCup/laser-out.txt","w",stdout);
    
    scanf("%d", &t);
    
    for (int f=1;f<=t;f++)
    {
        scanf("%d%d", &n, &m);
        
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<m;j++)
            {
                blok[i][j] = false;
                for (int k=0;k<4;k++)
                {
                    mat[i][j][k] = 0;
                    mark[i][j][k] = false;
                }
            }
        }
        
        for (int i=0;i<n;i++)
        {
            scanf("%s", maze[i]);
            for (int j=0;j<m;j++)
            {
                for (int k=0;k<4;k++)
                {
                    if (maze[i][j] == '#')
                    {
                        mat[i][j][k] = -1;
                        blok[i][j] = true;
                    }
                    else if (maze[i][j] == 'S')
                    {
                        sx = i, sy = j;
                    }
                    else if (maze[i][j] == 'G')
                    {
                        gx = i, gy = j;
                    }
                    else if (maze[i][j] == '<')
                    {
                        mat[i][j][k] = -1;
                        blok[i][j] = true;
                    }
                    else if (maze[i][j] == '^')
                    {
                        mat[i][j][k] = -1;
                        blok[i][j] = true;
                    }
                    else if (maze[i][j] == '>')
                    {
                        mat[i][j][k] = -1;
                        blok[i][j] = true;
                    }
                    else if (maze[i][j] == 'v')
                    {
                        mat[i][j][k] = -1;
                        blok[i][j] = true;
                    }
                }
            }
        }
        
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<m;j++)
            {
                if (maze[i][j] == '<')
                {
                    for (int k=0;k<4;k++)
                    {
                        int ix = i, iy = j;
                        while (true)
                        {
                            ix += dx[k];
                            iy += dy[k];
                            if (ix < 0 || ix > n - 1 || iy < 0 || iy > m - 1) break;
                            if (blok[ix][iy]) break;
                            mat[ix][iy][k] = -1;
                        }
                    }
                }
                else if (maze[i][j] == '^')
                {
                    for (int k=0;k<4;k++)
                    {
                        int ix = i, iy = j;
                        while (true)
                        {
                            ix += dx[(k+1)%4];
                            iy += dy[(k+1)%4];
                            if (ix < 0 || ix > n - 1 || iy < 0 || iy > m - 1) break;
                            if (blok[ix][iy]) break;
                            mat[ix][iy][k] = -1;
                        }
                    }
                }
                else if (maze[i][j] == '>')
                {
                    for (int k=0;k<4;k++)
                    {
                        int ix = i, iy = j;
                        while (true)
                        {
                            ix += dx[(k+2)%4];
                            iy += dy[(k+2)%4];
                            if (ix < 0 || ix > n - 1 || iy < 0 || iy > m - 1) break;
                            if (blok[ix][iy]) break;
                            mat[ix][iy][k] = -1;
                        }
                    }
                }
                else if (maze[i][j] == 'v')
                {
                    for (int k=0;k<4;k++)
                    {
                        int ix = i, iy = j;
                        while (true)
                        {
                            ix += dx[(k+3)%4];
                            iy += dy[(k+3)%4];
                            if (ix < 0 || ix > n - 1 || iy < 0 || iy > m - 1) break;
                            if (blok[ix][iy]) break;
                            mat[ix][iy][k] = -1;
                        }
                    }
                }
            }
        }
        
        //debug();
        
        int ret = bfs();
        
        if (ret == -1) printf("Case #%d: impossible\n", f);
        else printf("Case #%d: %d\n", f, ret);
    }
    
    return 0;
}
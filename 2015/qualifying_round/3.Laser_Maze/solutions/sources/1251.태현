#include <iostream>
using namespace std;

char map[5][102][102];
int D[5][102][102];
int row, column;

void makewallDfs(int turn, int currentR, int currentC, int direction){
	if (currentR <= 0 || currentR > row || currentC <= 0 || currentC > column)
		return;
	char ch = map[4][currentR][currentC];
	if (ch == '#' || ch == '<' || ch == '>' || ch == '^' || ch == 'v')
		return;
	map[turn][currentR][currentC] = 'x';
	if (direction == 0)				makewallDfs(turn, currentR - 1, currentC, direction);
	else if (direction == 3)		makewallDfs(turn, currentR, currentC + 1, direction);
	else if (direction == 6)		makewallDfs(turn, currentR + 1, currentC, direction);
	else if (direction == 9)		makewallDfs(turn, currentR, currentC - 1, direction);
}
void makewall(int currentR, int currentC, char ch){
	int direction;
	if (ch == '<')	direction = 9;
	else if (ch == '>') direction = 3;
	else if (ch == 'v') direction = 6;
	else if (ch == '^') direction = 0;

	for (int i = 0; i < 4; i++){
		int tempDirection = direction + i * 3;
		tempDirection %= 12;
		
		if (tempDirection == 0)				makewallDfs(i, currentR - 1, currentC, tempDirection);
		else if (tempDirection == 3)		makewallDfs(i, currentR, currentC + 1, tempDirection);
		else if (tempDirection == 6)		makewallDfs(i, currentR + 1, currentC, tempDirection);
		else if (tempDirection == 9)		makewallDfs(i, currentR, currentC - 1, tempDirection);
	}
}

bool possible(int turn, int row, int column){
	char ch = map[turn][row][column];
	return ((ch == '.' || ch == 'S' || ch == 'G') && D[turn][row][column] == -1);
}

bool runMaze(int walk){
	int c = walk % 4;
	int next = (c + 1) % 4;
	for (int i = 1; i <= row; i++){
		for (int j = 1; j <= column; j++){

			if (D[c][i][j] == walk){
				if (map[4][i][j] == 'G')
					return true;

				if (possible(next, i + 1, j))	D[next][i + 1][j] = walk + 1;
				if (possible(next, i - 1, j))	D[next][i - 1][j] = walk + 1;
				if (possible(next, i, j + 1))	D[next][i][j + 1] = walk + 1;
				if (possible(next, i, j - 1))	D[next][i][j - 1] = walk + 1;
			}
		}
	}
	return false;
}
void logic(){
	for (int i = 0; i < 5; i++){
		for (int j = 0; j < 102; j++){
			for (int k = 0; k < 102; k++){
				map[i][j][k] = 0;
				D[i][j][k] = -1;
			}
		}
	}

	cin >> row >> column;

	for (int i = 1; i <= row; i++){
		for (int j = 1; j <= column; j++){
			char temp;
			cin >> temp;
			if (temp == 'S')
				D[0][i][j] = 0;
			map[4][i][j] = temp;
			for (int k = 0; k < 4; k++)
				map[k][i][j] = temp;
		}
	}
	for (int i = 1; i <= row; i++){
		for (int j = 1; j <= column; j++){
			char ch = map[0][i][j];
			if (ch == '<' || ch == '>' || ch == '^' || ch == 'v'){
				makewall(i, j, ch);
			}
		}
	}


	for (int walk = 0; walk < 100000; walk++){
		if (runMaze(walk)){
			cout << walk << endl;
			return;
		}
	}
	cout << "impossible" << endl;
}
int main(){
//	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int T;
	cin >> T;
	for (int i = 1; i <= T; i++){
		cout << "Case #" << i << ": ";
		logic();
	}
}
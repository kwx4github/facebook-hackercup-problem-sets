#include<stdio.h>
typedef struct las{
    int x,y,yon,limits[4];
}las;
typedef struct node{
    int x,y,count;
}node;
int used[105][105][5];
node queue[50000];
las laser[20005];
char maze[105][105];
int n,m,a,b,nLaser,head,tail;
int YON[4][2]={{1,0},{-1,0},{0,1},{0,-1}};
void push(int x,int y,int count){
    queue[tail].x=x;
    queue[tail].y=y;
    queue[tail++].count=count;
}
node pop(){
    return queue[head++];
}
int isEmpty(){
    return head>=tail;
}
int possible(int x,int y,int count){
    if(x<0 || x>=n || y<0 || y>=m)return 0;
    if(used[x][y][count%4])return 0;
    if(maze[x][y]!='.')return 0;
    int i,yon;
    for(i=0;i<nLaser;i++){
        yon = (laser[i].yon + (count%4))%4;
        switch(yon){
            case 0:
                if(laser[i].y==y && x>laser[i].limits[0] && x<laser[i].x)return 0;
                break;
            case 2:
                if(laser[i].y==y && x<laser[i].limits[2] && x>laser[i].x)return 0;
                break;
            case 1:
                if(laser[i].x==x && y<laser[i].limits[1] && y>laser[i].y)return 0;
                break;
            case 3:
                if(laser[i].x==x && y>laser[i].limits[3] && y<laser[i].y)return 0;
                break;
        }
    }
    return 1;
}
int solve(){
    node x;
    int i,xx,yy;
    while(!isEmpty()){
        x = pop();
        used[x.x][x.y][x.count%4]=1;
        if(x.x == a && x.y == b)return x.count;
        for(i=0;i<4;i++){
            xx = x.x+YON[i][0];
            yy = x.y+YON[i][1];
            if(possible(xx,yy,x.count+1)){
                push(xx,yy,x.count+1);
            }
        }
    }
    return 0;
}
void findLimits(){
    int i,k;
    for(i=0;i<nLaser;i++){
        for(k=laser[i].x-1;k>=0 && maze[k][laser[i].y]=='.';k--);
        laser[i].limits[0]=k;
        for(k=laser[i].x+1;k<n && maze[k][laser[i].y]=='.';k++);
        laser[i].limits[2]=k;
        for(k=laser[i].y-1;k>=0 && maze[laser[i].x][k]=='.';k--);
        laser[i].limits[3]=k;
        for(k=laser[i].y+1;k<m && maze[laser[i].x][k]=='.';k++);
        laser[i].limits[1]=k;
    }
}
void readInp(){
    int t,count=1,i,j,k,ans,x,y;
    scanf("%d ",&t);
    while(t--){
        scanf("%d %d ",&n,&m);
        for(i=0;i<n;i++){
            scanf("%s ",maze[i]);
            for(j=0;j<m;j++){
                if(maze[i][j]=='S'){
                    x=i;
                    y=j;
                    maze[i][j]='.';
                }else if(maze[i][j]=='G'){
                    a=i;
                    b=j;
                    maze[i][j]='.';
                }else if(maze[i][j]!='.' && maze[i][j]!='#'){
                    laser[nLaser].x = i;
                    laser[nLaser].y = j;
                    if(maze[i][j]=='^')
                        laser[nLaser++].yon = 0;
                    else if(maze[i][j]=='>')
                        laser[nLaser++].yon = 1;
                    else if(maze[i][j]=='v')
                        laser[nLaser++].yon = 2;
                    else if(maze[i][j]=='<')
                        laser[nLaser++].yon = 3;

                }
            }
        }
        push(x,y,0);
        findLimits();
        ans = solve();
        if(ans)
            printf("Case #%d: %d\n",count,ans);
        else
            printf("Case #%d: impossible\n",count);
        nLaser = head = tail = 0;
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                for(k=0;k<4;k++)
                    used[i][j][k]=0;
        count++;
    }
}
int main(){
    readInp();
    return 0;
}

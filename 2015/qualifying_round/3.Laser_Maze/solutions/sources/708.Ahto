#include <iostream>
#include <queue>
using namespace std;

bool nopass(char c) {
	return c == '#' || c == '^' || c == 'v' || c == '<' || c == '>';
}

struct pos {
	int i, j, c;
	pos(int i, int j, int c) : i(i), j(j), c(c) {}
};

int main() {
	int tt;
	cin >> tt;
	for (int t = 1; t <= tt; ++t) {
		int m, n;
		cin >> m >> n;
		char map[m][n];
		int bstate[m][n];
		int rstate[m][n];
		int si, sj, gi, gj;
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				cin >> map[i][j];
				if (map[i][j] == 'S') {
					si = i; sj = j;
				}
				if (map[i][j] == 'G') {
					gi = i; gj = j;
				}
				bstate[i][j] = 0;
				rstate[i][j] = 0;
			}
		}
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				if (nopass(map[i][j])) bstate[i][j] = 0x0f;
				int di = 0, dj = 0;
				if (map[i][j] == '^') di = -1;
				if (map[i][j] == 'v') di = +1;
				if (map[i][j] == '<') dj = -1;
				if (map[i][j] == '>') dj = +1;
				if (di == 0 && dj == 0) continue;
				for (int d = 0; d < 4; ++d) {
					int ti = i, tj = j;
					for (;;) {
						ti += di; tj += dj;
						if (ti < 0 || ti >= m) break;
						if (tj < 0 || tj >= n) break;
						if (nopass(map[ti][tj])) break;
						bstate[ti][tj] |= (1 << d);
					}
					int dt = di; di = dj; dj = -dt;
				}
			}
		}
		int count = 0;
		queue<pos> q;
		q.push(pos(si - 1, sj, 1));
		q.push(pos(si + 1, sj, 1));
		q.push(pos(si, sj - 1, 1));
		q.push(pos(si, sj + 1, 1));
		while (count == 0 && !q.empty()) {
			pos p = q.front(); q.pop();
			if (p.i < 0 || p.i >= m) continue;
			if (p.j < 0 || p.j >= n) continue;
			int km = 1 << (p.c % 4);
			if (bstate[p.i][p.j] & km) continue;
			if (rstate[p.i][p.j] & km) continue;
			rstate[p.i][p.j] |= km;
			if (p.i == gi && p.j == gj) {
				count = p.c;
			}
			q.push(pos(p.i - 1, p.j, p.c + 1));
			q.push(pos(p.i + 1, p.j, p.c + 1));
			q.push(pos(p.i, p.j - 1, p.c + 1));
			q.push(pos(p.i, p.j + 1, p.c + 1));

		}
		if (count == 0) {
			cout << "Case #" << t << ": impossible\n";
		} else {
			cout << "Case #" << t << ": " << count << "\n";
		}
	}
	return 0;
}

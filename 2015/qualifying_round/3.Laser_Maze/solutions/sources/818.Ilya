import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	static BufferedReader reader;
	static PrintWriter writer;
	static StringTokenizer tokenizer;

	static String name = "task";

	static String nextToken() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(reader.readLine());
		}
		return tokenizer.nextToken();
	}

	public static void main(String[] args) throws IOException {
		reader = new BufferedReader(new InputStreamReader(new FileInputStream(name + ".in")));
		writer = new PrintWriter(name + ".out");
		// reader = new BufferedReader(new InputStreamReader(System.in));
		// writer = new PrintWriter(System.out);
		tokenizer = null;
		solve();
		reader.close();
		writer.close();
	}

	static void solve() throws IOException {
		int t = Integer.parseInt(nextToken());
		for (int tst = 0; tst < t; tst++) {
			writer.print("Case #" + (tst + 1) + ": ");
			banana();
		}
	}

	static char[][][] map;
	static int[][][] bfsmap;
	static int[][][] step;

	static char nextC(char c) {
		switch (c) {
		case '>':
			return 'v';
		case 'v':
			return '<';
		case '<':
			return '^';
		case '^':
			return '>';
		default:
			return c;
		}
	}

	static int[] dx = { -1, 0, 1, 0 };
	static int[] dy = { 0, -1, 0, 1 };

	static void banana() throws IOException {
		int n, m;
		int startx = -1, starty = -1;
		int goalx = -1, goaly = -1;
		n = Integer.parseInt(nextToken());
		m = Integer.parseInt(nextToken());
		map = new char[4][n][m];
		bfsmap = new int[4][n][m];
		step = new int[4][n][m];
		for (int i = 0; i < n; i++) {
			String s = nextToken();
			for (int j = 0; j < m; j++) {
				map[0][i][j] = s.charAt(j);
				if (map[0][i][j] == 'S') {
					startx = i;
					starty = j;
				}
				if (map[0][i][j] == 'G') {
					goalx = i;
					goaly = j;
				}
			}
		}

		for (int k = 1; k < 4; k++) {
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					map[k][i][j] = nextC(map[k - 1][i][j]);
				}
			}
		}

		for (int k = 0; k < 4; k++) {
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if (map[k][i][j] != 'S' && map[k][i][j] != 'G' && map[k][i][j] != '.') {
						bfsmap[k][i][j] = 1;
					}
				}
			}
		}

		for (int k = 0; k < 4; k++) {
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if (map[k][i][j] == '>') {
						for (int p = j + 1; p < m && bfsmap[k][i][p] != 1; p++) {
							bfsmap[k][i][p] = 2;
						}
					}
					if (map[k][i][j] == '<') {
						for (int p = j - 1; p >= 0 && bfsmap[k][i][p] != 1; p--) {
							bfsmap[k][i][p] = 2;
						}
					}
					if (map[k][i][j] == 'v') {
						for (int p = i + 1; p < n && bfsmap[k][p][j] != 1; p++) {
							bfsmap[k][p][j] = 2;
						}
					}
					if (map[k][i][j] == '^') {
						for (int p = i - 1; p >= 0 && bfsmap[k][p][j] != 1; p--) {
							bfsmap[k][p][j] = 2;
						}
					}
				}
			}
		}

		LinkedList<Integer> lls = new LinkedList<Integer>();
		LinkedList<Integer> llx = new LinkedList<Integer>();
		LinkedList<Integer> lly = new LinkedList<Integer>();

		llx.add(startx);
		lly.add(starty);
		lls.add(0);
		step[1][startx][starty] = 1;

		while (!lls.isEmpty()) {
			int x = llx.pollFirst();
			int y = lly.pollFirst();
			int s = lls.pollFirst();
			for (int dir = 0; dir < 4; dir++) {
				int nextx = x + dx[dir];
				int nexty = y + dy[dir];
				int nexts = s + 1;
				if (nextx < 0 || nextx >= n || nexty < 0 || nexty >= m)
					continue;
				if (bfsmap[nexts % 4][nextx][nexty] == 0) {
					if (step[nexts % 4][nextx][nexty] == 0) {
						step[nexts % 4][nextx][nexty] = nexts;
						llx.add(nextx);
						lly.add(nexty);
						lls.add(nexts);
					}
				}
			}
		}

		int beststep = 1000000000;
		for (int k = 0; k < 4; k++) {
			if (step[k][goalx][goaly] != 0) {
				if (step[k][goalx][goaly] < beststep)
					beststep = step[k][goalx][goaly];
			}
		}

		writer.println(beststep == 1000000000 ? "impossible" : beststep);
	}
}
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int TAILLE = 100;
const int INFINI = 1000*1000*1000;
const int UNDEFINED = -1;
const int PARCOURS = -2;
int dir[4][2]={{0,1},{1,0},{0,-1},{-1,0}};


int carte[TAILLE][TAILLE];
int dist[TAILLE][TAILLE][4];


int nbLin, nbCol;

void makeLas(){
      vector<int> laserX,laserY;

      for(int lin=0; lin<nbLin; lin++){
         for(int col=0; col<nbCol; col++){
            if(carte[lin][col]>=0 && carte[lin][col]<4)
            {
               laserX.push_back(lin);
               laserY.push_back(col);
            }
         }
      }
   for(int iLas = 0; iLas<laserX.size(); iLas++){
      int nLin = laserX[iLas], nCol = laserY[iLas];
      //printf("%d %d %d\n", nLin ,nCol, carte[nLin][nCol]);
      for(int pas=0; pas<4; pas++){
         int direc = (carte[nLin][nCol]+pas)%4;
         int lin=nLin+dir[direc][0],col=nCol+dir[direc][1];
         //printf("%d %d\n", lin, col);
         for(;lin>=0 && col>=0 && lin<nbLin && col<nbCol && carte[lin][col]==5 && dist[lin][col][pas]!=INFINI; lin+=dir[direc][0], col+=dir[direc][1])
         {
            dist[lin][col][pas]=INFINI;
         }
      }
   }
}

int minDist(int lin, int col, int nbPas){
      if(dist[lin][col][nbPas]==PARCOURS)
         return INFINI;
      if(dist[lin][col][nbPas]!=UNDEFINED)
         return dist[lin][col][nbPas];
      
      dist[lin][col][nbPas]=PARCOURS;
      int mini = INFINI;

      for(int iDirec = 0; iDirec<4; iDirec++){
         int nLin = lin +dir[iDirec][0], nCol = col+dir[iDirec][1];
         if(nLin<nbLin && nLin>=0 && nCol<nbCol && nCol>=0 && carte[nLin][nCol]==5)
            mini = min(mini, minDist(nLin, nCol, (nbPas+1)%4)+1);
      }
      dist[lin][col][nbPas] = mini;
      return mini;
}


int main(){
   int nbTests;
   scanf("%d", &nbTests);
   for(int iTest = 0; iTest<nbTests; iTest++){
      scanf("%d%d", &nbLin, &nbCol);
      int arrL = 0, arrD =0, depL = 0, depD = 0;
      for(int lin=0; lin<nbLin; lin++){
         for(int col=0; col<nbCol; col++){
               char car;
               scanf(" %c", &car);
               switch((int)car){
                  case (int)'.':
                     carte[lin][col] = 5;
                     break;
                  case '#':
                     carte[lin][col]=-1;
                     break;
                  case 'v':
                     carte[lin][col] = 1;
                     break;
                  case '>':
                     carte[lin][col]=0;
                     break;
                  case '<': 
                     carte[lin][col] = 2;
                     break;
                  case 'S':
                     depL = lin;
                     depD = col;
                     carte[lin][col]=5;
                     break;
                  case 'G':
                     arrL = lin;
                     arrD = col;
                     carte[lin][col]=5;
                     break;
                  case '^':
                     carte[lin][col]=3;
                     break;
               }
               for(int i=0; i<4; i++){
                     dist[lin][col][i] = UNDEFINED;
                     
                  
               }               
               
         }

      }
      for(int i=0; i<4; i++)
         dist[arrL][arrD][i] = 0;
      makeLas();
      /*for(int lin=0; lin<nbLin; lin++)
      {
         for(int col=0; col<nbCol; col++){
            printf("%d ", carte[lin][col]);
         }
         printf("\n");
         
      }
      for(int dire = 0; dire < 4; dire++){
            for(int lin = 0; lin<nbLin; lin++){
               for(int col=0; col<nbCol; col++)
                  printf("%d ", dist[lin][col][dire]);
            
               printf("\n");
            }
            printf("\n");
      }*/
     int mini = INFINI;

      for(int iDirec = 0; iDirec<4; iDirec++){
         int nLin = depL +dir[iDirec][0], nCol = depD+dir[iDirec][1];
         if(nLin<nbLin && nLin>=0 && nCol<nbCol && nCol>=0 && carte[nLin][nCol]==5)
            mini = min(mini, minDist(nLin, nCol, 1)+1);
      }
      int mDist = mini;
      if(mDist<INFINI)
         printf("Case #%d: %d\n", iTest+1, mDist);
      else
         printf("Case #%d: impossible\n",iTest+1);
   }

}
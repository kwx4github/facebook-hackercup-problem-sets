#include <bits/stdc++.h>

using namespace std;

#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mp make_pair
#define pb push_back
#define sz size()
#define F first
#define S second
#define FO(i,x) for(int i=0;i<x;i++)

#define READ(s) freopen(s, "r", stdin)
#define WRITE(s) freopen(s, "w", stdout)
//  int dx[]={-2,-2,-1,-1,1,1,2,2}; int dy[]={-1,1,-2,2,-2,2,-1,1}; // Knight Dir
//  int dx[]={-1,-1,-1,0,1,1,1,0}; int dy[]={-1,0,1,1,1,0,-1,-1};  // 8 Dir
  int dx[]={0,1,-1,0}; int dy[]={1,0,0,-1}; // 4 Dir

int n,m;
string arr[4][109];
int lazer[4][109][109];
bool vis[4][109][109];

map <char,char> rot;
void rotate(int state){
	 FO(i,n) arr[state][i]=arr[state-1][i];
	 for(int i=0;i<n;i++)
	   for(int j=0;j<m;j++)
	       arr[state][i][j]= rot[ arr[state-1][i][j] ];
}
bool valid(int i,int j){ 
   if(i<0 ||j<0||i>=n ||j>=m) return 0;
   return 1;
}
void setLazer(int state){
	 for(int i=0;i<n;i++)
	    for(int j=0;j<m;j++) lazer[state][i][j]=0;
	 
	for(int i=0;i<n;i++)
	   for(int j=0;j<m;j++)
	     if(arr[state][i][j]!='.' && arr[state][i][j]!='G' && arr[state][i][j]!='S') lazer[state][i][j]=2;
		 
    for(int i=0;i<n;i++)
	   for(int j=0;j<m;j++){
	   	   int x=0,y=0;
	       if(arr[state][i][j]=='>')  y=1;
	       if(arr[state][i][j]=='v')  x=1;
	       if(arr[state][i][j]=='<')  y=-1;
	       if(arr[state][i][j]=='^')  x=-1;
	       
		   if(x!=0 || y!=0){
		   	   int ii=i+x,jj=j+y;
		   	   while(valid(ii,jj)){
		   	   	    if(lazer[state][ii][jj]==2) break;
		   	   	    lazer[state][ii][jj]=1;
		   	   	    ii+=x,jj+=y;
		   	   }
		   }
	   }
}
struct node{
	   int x,y,state,res;
	   node(){}
	   node(int i,int j,int s,int r){  x=i,y=j,state=s; res=r; }
};
int sol(int i,int j,int s){
	 memset(vis,0,sizeof(vis));
     queue < node > Q;
	 Q.push( node( i,j,s,0) );
	 vis[s][i][j]=1;
	 
	 while(!Q.empty()){
	 	  node cur=Q.front();
	 	  Q.pop();
	 	  
	 	  for(int k=0;k<4;k++){
	 	  	 node n( cur.x+dx[k] , cur.y+dy[k] , (cur.state+1)%4 , cur.res+1 );
	 	  	 if(valid( n.x , n.y )){
	 	  	     if( lazer[n.state][n.x][n.y]==0 && !vis[ n.state ][ n.x ][ n.y ] ){
	 	  	     	   vis[ n.state ][ n.x ][ n.y ]=1;
	 	  	     	   Q.push(n);
	 	  	     	   if(arr[n.state][n.x][n.y]=='G'){
	 	  	     	   	   return n.res;
	 	  	     	   }
	 	  	     }	
	 	  	 }
	 	  }
	 }
	 return -1;
}
int main(){
     READ("laser_maze.txt");
     WRITE("laser_maze_out.txt");
     
	 rot['<']='^'; rot['^']='>'; rot['>']='v'; rot['v']='<';
     rot['#']='#'; rot['.']='.'; rot['S']='S'; rot['G']='G';
     
	 int t;
     cin>>t;
     for(int kase=1;kase<=t;kase++){
     	   cin>>n>>m;
     	   FO(i,n) cin>>arr[0][i];
     	   for(int i=1;i<4;i++) rotate(i);
     	   for(int i=0;i<4;i++) setLazer(i);
     	   
     	   FO(i,n) 
			FO(j,m)
			 if(arr[0][i][j]=='S'){
			 	int res=sol(i,j,0);
			 	if(res==-1)  cout<<"Case #"<<kase<<": impossible"<<endl;	
			 	else cout<<"Case #"<<kase<<": "<<res<<endl;	
			 }
     }
	 return 0;
}

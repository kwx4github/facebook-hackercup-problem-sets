<?php
// set max execution time to 5.5 mins (gives me 30 secs to upload results)
ini_set('max_execution_time', 330);
ini_set('memory_limit', '-1');

$input = file_get_contents(dirname (__FILE__).'/laser_maze_input.txt');

/**
 * Output file
 **/
$fileOutput = dirname (__FILE__).'/output.txt';

$string = '';

/**
 * Number of tests
 **/
$t = 0;

/**
 * Height of maze
 **/
$n = 0;

/**
 * Width of maze
 **/
$m = 0;

$mazes = array();

$i = 0;
$y = 0;
foreach(preg_split("/((\r?\n)|(\r\n?))/", $input) as $line)
{    
	// Check if running additional lines of mazes that don't exist
	if($maze > $t) break;
	// Check if first line of code
	if($i==0)
	{
		$t = $line;
		$maze = 1;
	}
	// Get dimensions of each maze
	else
	{
		if(empty($mazes[$maze]))
		{
			$dimensions = explode(' ',$line);
			$mazes[$maze]['height'] = $dimensions[0];
			$mazes[$maze]['width'] = $dimensions[1];
			$n = $mazes[$maze]['height'];
			$m = $mazes[$maze]['width'];
		}
		else
		{
			// Set the y position
			$y++;
			
			// Build grid
			// Grid height set by $i
			// Grid width set by $j
			//$grid[] = array($i,$j);
			
			$array = str_split(preg_replace('/\s+/', ' ', $line));
			foreach($array as $key => $value)
			{
				// Set the x position
				$x = $key+1;
				if($x>$m) break;
				switch($value)
				{
					case '.':
						$block = 1; // space;
						break;
					case '#':
						$block = 0; // wall;
						break;
					case 'S':
						$block = 1; // space;
						$mazes[$maze]['start'] = array('y'=>$y,'x'=>$x);
						break;
					case 'G':
						$block = 1; // space;
						$mazes[$maze]['goal'] = array('y'=>$y,'x'=>$x);
						break;
					case '^':
						$block = 0; // turret;
						$mazes[$maze]['turrets'][0][] = array('y'=>$y,'x'=>$x);
						break;
					case '>':
						$block = 0; // turret;
						$mazes[$maze]['turrets'][1][] = array('y'=>$y,'x'=>$x);
						break;
					case 'v':
						$block = 0; // turret;
						$mazes[$maze]['turrets'][2][] = array('y'=>$y,'x'=>$x);
						break;
					case '<':
						$block = 0; // turret;
						$mazes[$maze]['turrets'][3][] = array('y'=>$y,'x'=>$x);
						break;
					
				}
				$grid[$y][$x]=$block;
			}
			$n--;
			if($n==0)
			{
				$mazes[$maze]['grid'] = $grid;
				// erase grid for next maze
				$grid = array();
				$y = 0;
				$maze++;
			}
		}
	}
	$i++;	
}

foreach($mazes as $key => $maze)
{
	// Build Maze options foreach of the 4 moves
	$string .= 'Case #'.$key.': ';
	$maze['grids'][0] = $maze['grid'];
	$maze['grids'][1] = $maze['grid'];
	$maze['grids'][2] = $maze['grid'];
	$maze['grids'][3] = $maze['grid'];
	if(!empty($maze['turrets']))
	{
		foreach($maze['turrets'] as $facing => $turrents)
		{
			// Set grid to update
			//switch($facing)
			foreach($turrents as $turrent)
			{
				$maze['grids'][0] = updateGrid(0,$facing,$turrent['x'],$turrent['y'],$maze['grids'][0],$maze['width'],$maze['height']);
				$maze['grids'][1] = updateGrid(1,$facing,$turrent['x'],$turrent['y'],$maze['grids'][1],$maze['width'],$maze['height']);
				$maze['grids'][2] = updateGrid(2,$facing,$turrent['x'],$turrent['y'],$maze['grids'][2],$maze['width'],$maze['height']);
				$maze['grids'][3] = updateGrid(3,$facing,$turrent['x'],$turrent['y'],$maze['grids'][3],$maze['width'],$maze['height']);
			}
		}	
	}
	
	$mazes[$key][0]['grid'] = $maze['grids'][0];
	$mazes[$key][1]['grid'] = $maze['grids'][1];
	$mazes[$key][2]['grid'] = $maze['grids'][2];
	$mazes[$key][3]['grid'] = $maze['grids'][3];
	// Next find all possible moves... this could get heavy
	// Creating infinite loop that I will need to find a way to kill if it gets too big
	$move = 1;
	$moves = array();
	$locations = array();
	// Keep track of patterns
	$locationMapping = array();
	// Record total number of repeat patterns as warnings. If the number is greater than 10 watchout, you've got a loop.
	$warning = 0;
	for ($i = 1; $i>0 ; $i++) 
	{
		// ok lets start;
		
		if($move==4) { $move = 0; }
		if($i==1)
		{
			// get start options
			$locations[0]['x'] = $maze['start']['x'];
			$locations[0]['y'] = $maze['start']['y'];
		}
		// get next moves
		$availableMoves = getAvailableMoves($locations,$mazes[$key][$move]['grid'],$maze['width'],$maze['height'],$locationMapping,$warning);
		if($availableMoves !== false)
		{
			// Backup - If for some reason the route hits 99999 attempts, kill it
			if($i==99999)
			{
				$i=0;
				$string .= 'impossible';
				$string .= ($key<$t) ? "\n" : '';
				break;
			}
			
			$reachedGoal = checkGoal($availableMoves,$maze['goal']);
			if($reachedGoal)
			{
				
				// echo 'reached goal in '.$i.' moves';
				$string .= $i;
				$string .= ($key<$t) ? "\n" : '';
				break;
			}
		}
		else
		{
			//impossible
			$string .= 'impossible';
			$string .= ($key<$t) ? "\n" : '';
			break;
		}
		$movesPrior[$move] = $locations;
		$locations = $availableMoves;
		$move++;
	}
}

/**
 * Function to return array of available moves
 * return false if nothing
 **/
function getAvailableMoves($locations=array(),$grid,$boundaryX,$boundaryY,&$locationMapping,&$warning=0)
{
	$availableMoves = array();
	$otherLocations = array();
	$locationMap = '';
	foreach($locations as $array)
	{
		// Theres no point running simulataneous checks on the same location point.
		// Same number of turns, won't effect faster route.
		$key = $array['y'].'99999'.$array['x'];
		$locationMap .= $array['y'].':'.$array['x'].',';
		
		if(!array_key_exists($key,$otherLocations))
		{
			$otherLocations[$key] = 'stored';
			$right = checkGridToRight($array,$grid,$boundaryX);
			if($right)
			{
				$moves = array(
					'x' => $array['x']+1,
					'y' => $array['y']
				);
				$availableMoves[] = $moves;
			}
			$left = checkGridToLeft($array,$grid);
			if($left)
			{
				$moves = array(
					'x' => $array['x']-1,
					'y' => $array['y']
				);
				$availableMoves[] = $moves;
			}
			$above = checkGridAbove($array,$grid);
			if($above)
			{
				$moves = array(
					'x' => $array['x'],
					'y' => $array['y']-1
				);
				$availableMoves[] = $moves;
			}
			$below = checkGridBelow($array,$grid,$boundaryY);
			if($below)
			{
				$moves = array(
					'x' => $array['x'],
					'y' => $array['y']+1
				);
				$availableMoves[] = $moves;
			}
		}
	}
	if(in_array($locationMap,$locationMapping))
	{
		$locationMapping[] = 'warning';
		$warning++;
	}
	$locationMapping[] = $locationMap;
	if(empty($availableMoves))
	{
		$availableMoves = false;
	}
	else if($warning>27)
	{
		// Pattern shows that the route is in a loop
		$availableMoves = false;
	}
	return $availableMoves;
}

function checkGoal($moves,$goal)
{
	foreach($moves as $key => $array)
	{
		if($array['x']==$goal['x'] && $array['y']==$goal['y'])	
		{
			return true;
		}
	}
	return false;
}

function checkGridToRight($array,$grid,$boundaryX){
	if($array['x']==$boundaryX) return false;
	return $grid[$array['y']][$array['x']+1];
}
function checkGridToLeft($array,$grid){
	if($array['x']==1) return false;
	return $grid[$array['y']][$array['x']-1];
}
function checkGridAbove($array,$grid){
	if($array['y']==1) return false;
	return $grid[$array['y']-1][$array['x']];
}
function checkGridBelow($array,$grid,$boundaryY){
	if($array['y']==$boundaryY) return false;
	return $grid[$array['y']+1][$array['x']];
}

/**
 * update possible moves from turrents
 *
 * $move = move (4 possible angles)
 * $startDirection = turrent direct on move 0
 * $x turrents X position
 * $y turrents Y position
 * $maze params of maze working on
 * @return array;
 **/
function updateGrid($move=0,$startDirection,$x,$y,$grid,$boundaryX,$boundaryY)
{
	$direction = $startDirection + $move;
	$direction = ($direction>3) ? $direction-4 : $direction;
	// which grid is updated depends on the direction it is facing.
	switch($direction)
	{
		case 0:
			// Update any grids above
			if($y==1){ break; }
			$grid = updateGridAbove($x,$y,$grid);
			break;
		case 1:
			// Update any grids to the right
			if($x==$maze['width']){ break; }
			$grid = updateGridToRight($x,$y,$grid,$boundaryX);
			break;
		case 2:
			// Update any grids beneath
			if($y==$maze['height']){ break; }
			$grid = updateGridBelow($x,$y,$grid,$boundaryY);
			break;
		case 3:
			// Update any grids to the left
			if($x==1){ break; }
			$grid = updateGridToLeft($x,$y,$grid);
			break;
	}
	return $grid;
	
}

function updateGridAbove($x,$y,$grid=array())
{
	// Figure out what is above this grid;
	for ($i = $y-1; $i > 0; $i--) 
	{
		if($grid[$i][$x])
		{
			// set to false
			//echo $i.':'.$x;
			$grid[$i][$x] = 0;
		}
		else
		{
			// nothing to update, lasers can't go through walls or turrets
			break;
		}	
	}
	return $grid;
}

function updateGridToRight($x,$y,$grid=array(),$boundaryX)
{
	// Figure out what is to the right of this grid;
	for ($i = $x+1; $i <= $boundaryX; $i++) 
	{
		if($grid[$y][$i])
		{
			// set to false
			//echo $y.':'.$i;
			$grid[$y][$i] = 0;
		}
		else
		{
			// nothing to update, lasers can't go through walls or turrets
			break;
		}	
	}
	return $grid;
}

function updateGridBelow($x,$y,$grid=array(),$boundaryY)
{
	for($i = $y+1; $i <= $boundaryY; $i++)
	{
		if($grid[$i][$x])
		{
			//echo $i.':'.$x;
			$grid[$i][$x] = 0;
		}
		else
		{
			// nothing to update, lasers can't go through walls or turrets
			break;
		}
	}
	return $grid;
}

function updateGridToLeft($x,$y,$grid=array())
{
	for($i = $x-1; $i>0 ; $i--)
	{
		if($grid[$y][$i])
		{
			//echo $y.':'.$i;
			$grid[$y][$i] = 0;
		}
		else
		{
			// nothing to update, lasers can't go through walls or turrets
			break;
		}
	}
	return $grid;
}

file_put_contents ($fileOutput,$string);

echo '<pre>';
echo $string;
/*
foreach($mazes as $key => $maze)
{
	print_r($locationMapping);
	print_r($maze['grid']);
	break;
}

echo $input;
*/
echo '</pre>';
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string.h>
using namespace std;
#define REP(i,n) for(int i=0,n_=(n);i<n_;i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define FOR(i,a,b) for (int i=a,b_=b;i<=(b_);i++)
#define ALL(a) a.begin(),a.end()
#define SZ(a) (int)(a).size()
#define SORT(a) sort(ALL(a))
#define INF 1073741823
#define DEB(x) cout<<#x<<":"<<x<<"\n"
#define PB(b) push_back(b)
#define MOD 1000000007
char M[222][222];
int R[10][222][222];
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};
string Ds="^>v<";
vector<int> Ts[222][222];
void fill(int sx,int sy, int d,int k,int n,int m){
  sx+=dx[d];
  sy+=dy[d];
  while(sx>=0&&sy>=0&&sx<n && sy<m && M[sx][sy]=='.') {
    Ts[sx][sy].PB(k); 
    //DEB(k); 
    sx+=dx[d];
    sy+=dy[d];
  }
}
bool test(int x,int y, int s) {
  REP(i,SZ(Ts[x][y]))
  {
    if ((s-Ts[x][y][i])%4==0) {
      return false;
    }
  }
  return true;
}
void buildMap(int n,int m) {
  REP(i,n)
  {
    REP(j,m)
    {
      if (Ds.find(M[i][j])!=-1) {
        int ix= Ds.find(M[i][j]);
        M[i][j]='#';
        REP(k,4)
        fill(i,j,(ix+k)%4,k,n,m);
      }
    }  
  }
}
void bfs(int sx,int sy, int n,int m) 
{
  queue<int> Qx,Qy,Qs;
  Qx.push(sx);
  Qy.push(sy);
  Qs.push(0);
  R[0][sx][sy]=0;
  while (!Qx.empty())
  {
    int x=Qx.front();
    Qx.pop();
    int y=Qy.front();
    Qy.pop();
    int st=Qs.front();
    Qs.pop();
    REP(i,4)
    {
      int nx = x+dx[i];
      int ny=y+dy[i];
      int s= R[st][x][y]+1;
      int ns=s%4;
      if (nx<0||ny<0||nx>=n||ny>=m) continue;
      if(M[nx][ny]=='#') continue;
      if (test(nx,ny,s) && R[ns][nx][ny]==-1)
      {
        R[ns][nx][ny]=s;
        Qx.push(nx);
        Qy.push(ny);
        Qs.push(ns);
      }
    }
  }
}
int main ()
{
    int cas;
    scanf ("%d",&cas);
    REP(www,cas)
    {
      REP(i,222)REP(j,222) Ts[i][j].clear();
      memset(R,-1,sizeof (R));
        int n,m;
        scanf ("%d%d",&n,&m);
        int ex,ey,sx,sy;
        REP(i,n)
        {
          scanf ("%s",M[i]);
          REP(j,m)
          {
            if (M[i][j]=='S')
            {
              sx=i;
              sy=j;
              M[i][j]='.';
            }
            if(M[i][j]=='G')
            {
              ex=i;
              ey=j;
              M[i][j]='.';
            }
              
          }
        }
        buildMap(n,m);
        bfs(sx,sy,n,m);
        printf ("Case #%d: ",www+1);
        int r=INF;
        REP(i,4) {
          if (R[i][ex][ey]!=-1&&R[i][ex][ey]<r){
            r=R[i][ex][ey];
          }
        }
        if (r==INF) {
           cout<<"impossible\n";
        } else
        {
          cout<<r<<"\n";
        }
    }
    return 0;
}

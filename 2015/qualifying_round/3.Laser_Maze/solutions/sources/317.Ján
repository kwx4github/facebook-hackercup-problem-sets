// pre-written code {{{
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <numeric>
#include <iostream>
#include <cassert>
#include <set>
#define FOR(i,n) for(int _n=n,i=0;i<_n;++i)
#define FR(i,a,b) for(int _b=b,i=a;i<_b;++i)
#define CL(x) memset(x,0,sizeof(x))
#define PN printf("\n");
#define MP make_pair
#define PB push_back
#define SZ size()
#define ALL(x) x.begin(),x.end()
#define FORSZ(i,v) FOR(i,v.size())
#define FORIT(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
using namespace std;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long LL;
///////////////////////////////////////////////////////////////////////////////////
// }}}

int n,m;
int sx,sy,gx,gy;

char a[4][105][105];
int d[4][105][105];

char turn(char x) {  
  string s = "^>v<";
  s += s;
  FORSZ(i,s) if(s[i]==x) return s[i+1];
  return x;
}

bool dnu(int x, int y){
  return (0<=x && x<n && 0<=y && y<m);
}

void fill(int s, int x, int y, int dx, int dy) {
  x+=dx;
  y+=dy;
  if(!dnu(x,y)) return;
  if(a[s][x][y]=='.' || a[s][x][y]=='X') {
    a[s][x][y] = 'X';
    fill(s,x,y,dx,dy);
  }
}

void solve(){
  scanf("%d %d\n",&n,&m);
  FOR(i,n) scanf("%s\n",a[0][i]);
  FOR(i,n) FOR(j,m) if(a[0][i][j]=='S') { sx=i; sy=j; a[0][i][j]='.'; }
  FOR(i,n) FOR(j,m) if(a[0][i][j]=='G') { gx=i; gy=j; a[0][i][j]='.'; }
  FR(s,1,4) {
    FOR(i,n) FOR(j,m) {
      a[s][i][j]=turn(a[s-1][i][j]);
    }
  }
  FOR(s,4) {
    FOR(i,n) FOR(j,m) {
      if(a[s][i][j]=='^') fill(s,i,j,-1,0);
      if(a[s][i][j]=='>') fill(s,i,j,0,+1);
      if(a[s][i][j]=='v') fill(s,i,j,+1,0);
      if(a[s][i][j]=='<') fill(s,i,j,0,-1);      
    }
  }
  /*
  FOR(s,4) {
    FOR(i,n) {
      FOR(j,m) printf("%c",a[s][i][j]);
      printf("\n");
    }
    PN;
  }
  */
  CL(d);
  queue<pair<int,pair<int,int> > > Q;
  Q.push(MP(0,MP(sx,sy)));
  d[0][sx][sy] = 1;
  while(Q.size()) {
    pair<int,pair<int,int> > fr = Q.front();
    Q.pop();
    int s = fr.first;
    int x = fr.second.first;
    int y = fr.second.second;
    int dist = d[s][x][y];
    int ddx[] = {+1,-1,0,0};
    int ddy[] = {0,0,+1,-1};
    FOR(i,4) {
      int xx = x + ddx[i];
      int yy = y + ddy[i];
      int ss = (s+1) % 4;
      if(!dnu(xx,y)) continue;
      if(a[ss][xx][yy]=='.' && d[ss][xx][yy]==0) {
        d[ss][xx][yy]= dist+1;
        Q.push(MP(ss,MP(xx,yy)));
      }      
    }    
  }
  int maxi = 987654321;
  int ret = maxi;
  FOR(s,4) {
    if(d[s][gx][gy]!=0) ret = min(ret,d[s][gx][gy]);
  }
  if(ret==maxi) printf("impossible\n"); else printf("%d\n",ret-1);
}

int main(){
  int pvs; scanf("%d",&pvs);
  FR(ppp,1,pvs+1){
     printf("Case #%d: ",ppp);

     solve();
  }
}


// vim: fdm=marker:commentstring=\ \"\ %s:nowrap:autoread

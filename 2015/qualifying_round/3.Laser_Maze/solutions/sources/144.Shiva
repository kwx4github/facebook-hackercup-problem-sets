#include <bits/stdc++.h>

using namespace std;

#define PB push_back
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define LL int
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)
#define MOD 10000007
#define SQ 1000
#define N 100010

string s[1000];
int vali[200][200][4];
int val[200][200][4];
int vis[200][200][4];
int a[4] = {1, -1, 0, 0};
int b[4] = {0, 0, 1, -1};

int n, m;
int valid(int x, int y, int rot){
    if(x < 0 || x >= n) return 0;
    if(y < 0 || y >= m) return 0;
    if(s[x][y] == '#') return 0;
    if(vali[x][y][rot] == 1){
        return 0;
    }
    return 1;
}

int isit(int x, int y){
    if(s[x][y] == '#' || s[x][y] == '^' || s[x][y] == 'v'|| s[x][y] == '<'|| s[x][y] == '>') return 1;
    return 0;
}

LL solve(){
    int i, j, lx, ly;
    cin>>n>>m;
    memset(vali, 0, sizeof(vali));
    memset(vis, 0, sizeof(vis));
    memset(val, 0, sizeof(val));
    queue<pair< pair<int, int> , int> > q;

    pair< pair<int, int>, int> x;

    for(i = 0; i < n; i++) cin>>s[i];
    for(i = 0; i < n; i++){
        for(j = 0; j < m; j++){
            if(s[i][j] == 'S'){
                q.push(MP(MP(i, j), 0));
                vis[i][j][0] = 1;
            }
        }
    }
    for(i = 0; i < n; i++){
        for(j = 0; j < m; j++){
            if(s[i][j] == '^' || s[i][j] == '<' || s[i][j] == '>' || s[i][j] == 'v'){
                vali[i][j][0] = 1;
                vali[i][j][1] = 1;
                vali[i][j][2] = 1;
                vali[i][j][3] = 1;
            }
            if(s[i][j] == '^'){

                for(lx = i - 1; lx >= 0; lx--){
                    vali[lx][j][0] = 1;
                    if( isit(lx, j) ) break;
                }
                for(lx = i + 1; lx < n; lx++){
                    vali[lx][j][2] = 1;
                    if( isit(lx, j) ) break;
                }
                for(ly = j + 1; ly < m; ly ++){
                    vali[i][ly][1] = 1;
                    if( isit(i, ly) ) break;
                }
                for(ly = j - 1; ly >= 0; ly--){
                    vali[i][ly][3] = 1;
                    if( isit(i, ly) ) break;
                }
            }
            if(s[i][j] == '>'){
                for(lx = i - 1; lx >= 0; lx--){
                    vali[lx][j][3] = 1;
                    if( isit(lx, j) ) break;
                }
                for(lx = i + 1; lx < n; lx++){
                    vali[lx][j][1] = 1;
                    if( isit(lx, j) ) break;
                }
                for(ly = j + 1; ly < m; ly ++){
                    vali[i][ly][0] = 1;
                    if( isit(i, ly) ) break;
                }
                for(ly = j - 1; ly >= 0; ly--){
                    vali[i][ly][2] = 1;
                    if( isit(i, ly) ) break;
                }
            }

            if(s[i][j] == 'v'){
                for(lx = i - 1; lx >= 0; lx--){
                    vali[lx][j][2] = 1;
                    if( isit(lx, j) ) break;
                }
                for(lx = i + 1; lx < n; lx++){
                    vali[lx][j][0] = 1;
                    if( isit(lx, j) ) break;
                }
                for(ly = j + 1; ly < m; ly ++){
                    vali[i][ly][3] = 1;
                    if( isit(i, ly) ) break;
                }
                for(ly = j - 1; ly >= 0; ly--){
                    vali[i][ly][1] = 1;
                    if( isit(i, ly) ) break;
                }
            }

            if(s[i][j] == '<'){
                for(lx = i - 1; lx >= 0; lx--){
                    vali[lx][j][1] = 1;
                    if( isit(lx, j) ) break;
                }
                for(lx = i + 1; lx < n; lx++){
                    vali[lx][j][3] = 1;
                    if( isit(lx, j) ) break;
                }
                for(ly = j + 1; ly < m; ly ++){
                    vali[i][ly][2] = 1;
                    if( isit(i, ly) ) break;
                }
                for(ly = j - 1; ly >= 0; ly--){
                    vali[i][ly][0] = 1;
                    if( isit(i, ly) ) break;
                }
            }
        }
    }
    while(!q.empty()){
        x = q.front();
            for(j = 0; j < 4; j++){
                if(valid(x.F.F + a[j], x.F.S + b[j], (x.S + 1) % 4 ) == 1 && vis[x.F.F + a[j]][x.F.S + b[j]][ (x.S + 1) % 4] == 0){
                    q.push(MP(MP(x.F.F + a[j], x.F.S + b[j]), (x.S + 1) % 4));
                    val[x.F.F + a[j]][x.F.S + b[j]][ (x.S + 1) % 4] = val[x.F.F][x.F.S][ (x.S) % 4] + 1;
                    vis[x.F.F + a[j]][x.F.S + b[j]][ (x.S + 1) % 4] = 1;
                }
            }
        q.pop();
    }
    vector<int> v;
    v.clear();
    for(i = 0; i < n; i++){
        for(j = 0; j < m; j++){
            if(s[i][j] == 'G'){
                if(vis[i][j][0] == 1){
                    v.PB(val[i][j][0]);
                }
                if(vis[i][j][1] == 1){
                    v.PB(val[i][j][1]);
                }
                if(vis[i][j][2] == 1){
                    v.PB(val[i][j][2]);
                }
                if(vis[i][j][3] == 1){
                    v.PB(val[i][j][3]);
                }

            }
        }
    }
    sort(v.begin(), v.end());
    if(v.size() == 0){
        cout<<"impossible"<<endl;
    }
    else{
        cout<<v[0]<<endl;
    }

    return 0;
}

int main(){
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    LL t, o = 1, op = 1;
    cin>>t;
    int i;
    while(t--){
        cout<<"Case #"<<op<<": ";
        solve();
        op++;
    }
    return 0;
}

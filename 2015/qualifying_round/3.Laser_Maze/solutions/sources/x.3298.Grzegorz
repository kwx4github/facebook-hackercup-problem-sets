#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1001001001
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)((x).size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

bool laser(char c)
{
    if(c == 'v' || c == '^' || c == '>' || c == '<')return true;
    return false;
}

int getNum(char c)
{
    if(c == '^')return 0;
    else if(c == '>')return 1;
    else if(c == 'v')return 2;
    else return 3;
}

pii getDirection(int k, char c)
{
    pii res[4];
    res[0] = mp(-1,0); res[1] = mp(0,1); res[2] = mp(1,0); res[3] = mp(0,-1);
    return res[(getNum(c)+k) % 4];
}

bool inside(int i, int j, int m, int n)
{
    if(i>=0 && i<m && j>=0 && j<n)return true;
    return false;
}

int solve(int cas)
{
    int m,n;
    cin>>m>>n;
    //cout<<m<<" "<<n<<endl;
    char grid[5][142][142];
    int Sx,Sy;
    //cout<<"Reading\n";
    for(int i=0; i<m; i++)
    {
        string s;
        cin>>s;
        //cout<<s<<endl;
        for(int j=0; j<n; j++)
        {
            if(s[j] == 'S'){Sx = i; Sy = j;}
            for(int k=0; k<4; k++)
                grid[k][i][j]=s[j];
        }
    }
    //cout<<"Sx "<<Sx<<" Sy "<<Sy<<endl;

    //cout<<"Grid update\n";
    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++)
            if(laser(grid[0][i][j]))
                for(int k=0; k<4; k++)
                {
                    pii direction = getDirection(k, grid[k][i][j]);
                    //cout<<k<<": direction= "<<direction.fi<<" "<<direction.se<<endl;
                    int x = i, y = j;
                    grid[k][x][y]='#';
                    x += direction.fi; y += direction.se;
                    while(grid[k][x][y] == '.' || grid[k][x][y] == 'S' || grid[k][x][y] == 'G')
                    {
                        grid[k][x][y] = '#';
                        x += direction.fi; y += direction.se;
                    }
                }

    //cout<<"Changed grids\n";
    /*for(int k=0; k<4; k++)
    {
        cout<<"grid "<<k<<endl;
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                cout<<grid[k][i][j];
            }
            cout<<endl;
        }
    }*/

    //cout<<"Graph creation\n";
    vector<int> g[40042];
    int ix[4] = {0,0,-1,1}, iy[4] = {-1,1,0,0};
    for(int k=0; k<4; k++)
        for(int i=0; i<m; i++)
            for(int j=0; j<n; j++)
                if(grid[k][i][j] != '#')
                    for(int d=0; d<4; d++)
                        if(inside(i+ix[d],j+iy[d],m,n) && grid[(k+1)%4][i+ix[d]][j+iy[d]] != '#')
                        {
                            //cout<<"add in "<<k<<" "<<i<<" "<<j<<" edge "<<j + i*n + k*m*n<<" -> "<<j+iy[d] + (i+ix[d])*n + ( (k+1)%4 )*m*n<<endl;
                            g[j + i*n + k*m*n].pb(j+iy[d] + (i+ix[d])*n + ( (k+1)%4 )*m*n);
                        }

    for(int d=0; d<4; d++)
        if(inside(Sx+ix[d],Sy+iy[d],m,n) && grid[1][Sx+ix[d]][Sy+iy[d]] != '#')
            g[40011].pb(Sy+iy[d] + (Sx+ix[d])*n + 1*m*n);

    /*cout<<"graph\n";
    for(int i=0; i<40; i++)
    {
        cout<<i<<": ";
        for(int j=0;j<g[i].size();j++)cout<<g[i][j]<<" ";
        cout<<endl;
    }
    cout<<"40011"<<": ";
    for(int j=0;j<g[40011].size();j++)cout<<g[40011][j]<<" ";
    cout<<endl;
    */
    //cout<<"Graph traverse\n";
    queue<int> kol;
    kol.push(40011);
    int dist[40042];
    for(int i=0; i<40042; i++)dist[i]=0;
    dist[40011]=1;
    while(!kol.empty())
    {
        int w = kol.front();
        //cout<<w<<" ";
        kol.pop();
        for(int i=0; i<g[w].size(); i++)
        {
            if(dist[g[w][i]] == 0)
            {
                dist[g[w][i]] = dist[w] + 1;
                kol.push(g[w][i]);
            }
        }
    }

    //cout<<"Answer lookup\n";
    int res = INF;
    for(int i=0; i<4*m*n; i++)
    {
        int k = i/(m*n);
        int x = (i - k*m*n)/n;
        int y = i - k*m*n - x*n;
        if(dist[i]>0 && grid[k][x][y] == 'G')res = min(res,dist[i]);
    }

    cout<<"Case #"<<cas<<": ";
    if(res == INF)cout<<"impossible\n";
    else cout<<res-1<<"\n";
    return 0;
}

int main()
{
    IOS
    int t;
    cin>>t;
    //cout<<"tests "<<t<<endl;
    for(int i=1; i<=t; i++)solve(i);
    return 0;
}

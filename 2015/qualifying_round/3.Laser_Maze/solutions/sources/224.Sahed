/***************************************
    codeforces = topcoder = sahedsohel
    IIT,Jahangirnagar University(42)
****************************************/
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iterator>
#include <utility>
using namespace std;

#define ll long long int
#define ull unsigned long long int
#define inf INT_MAX
#define linf LLONG_MAX
#define sc(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d%d",&a,&b)
#define sc3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define sc4(a,b,c,d) scanf("%d%d%d%d",&a,&b,&c,&d)
#define fl(c,i,n) for(i=c;i<n;i++)
#define f(i,n) for(i=0;i<n;i++)
#define mem(a) memset(a,0,sizeof(a))
#define memn(a) memset(a,-1,sizeof(a))
#define pb push_back
#define pp pop_back()
#define aov(a) a.begin(),a.end()
#define mpr make_pair
#define nl printf("\n")
#define PI 2.0*acos(0.0) //#define PI acos(-1.0)
#define xx first
#define yy second
#define mxv(a) *max_element(aov(a))
#define mnv(a) *min_element(aov(a))
#define LB(a,x) (lower_bound(aov(a),x)-a.begin())
#define UB(a,x) (upper_bound(aov(a),x)-a.begin())
#define to_c_string(a) a.c_str()
#define strtoint(c) atoi(&c[0])
#define pii pair< int , int >
#define pll pair< ll , ll >
#define pcs(a) printf("Case %d: ",a)
#define dbg(x) cout<<#x<<" : "<<x<<endl

template <class T> inline T bigmod(T p,T e,T M){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}   // M is prime}
template <class T> inline T bpow(T p,T e){ll ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p);p = (p * p);}return (T)ret;}

int toInt(string s){int sm;stringstream ss(s);ss>>sm;return sm;}
int toLlint(string s){long long int sm;stringstream ss(s);ss>>sm;return sm;}


///int month[]={-1,31,28,31,30,31,30,31,31,30,31,30,31};  //Not Leap Year
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
///int dx[]={-1,-1,+0,+1,+1,+0};int dy[]={-1,+1,+2,+1,-1,-2}; //Hexagonal Direction
///const double eps=1e-6;

/*****************************************************************/
///////////////////////   GET SET GO    ///////////////////////////
/*****************************************************************/

#define M 100005
#define MD 1000000007LL

struct D{
    int x,y,w;
    D(){}
    D(int a,int b,int c):x(a),y(b),w(c){}

    bool operator< (const D& v) const
    {
        return w>v.w;
    }
};

char mz[4][103][103];
int n,m,sx,sy,ex,ey,dst[4][103][103];


int dijkstra()
{
    priority_queue< D >q;
    dst[0][sx][sy]=0;
    q.push(D(sx,sy,0));

    D u;
    while(!q.empty())
    {
        u=q.top();
        q.pop();

        if(u.x==ex&&u.y==ey)
            return u.w;

        for(int i=0;i<4;i++)
        {
            sx=u.x+dx[i];
            sy=u.y+dy[i];

            if(sx<=-1||sx>=n||sy<=-1||sy>=m)
                continue;
            if(mz[(u.w+1)%4][sx][sy]!='.'&&mz[(u.w+1)%4][sx][sy]!='G'&&mz[(u.w+1)%4][sx][sy]!='S')
                continue;

            if(dst[(u.w+1)%4][sx][sy]>u.w+1)
            {
                dst[(u.w+1)%4][sx][sy]=u.w+1;
                q.push(D(sx,sy,u.w+1));
            }
        }
    }
    return inf;
}

int main()
{
    int cs=1,t,i,j,k,l;
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_output.txt","w",stdout);

    sc(t);
    while(t--)
    {
        sc2(n,m);
        f(i,n)
        {
            f(j,m)
            {
                scanf(" %c",&mz[0][i][j]);
                if(mz[0][i][j]=='S')
                {
                    sx=i;
                    sy=j;
                }
                else if(mz[0][i][j]=='G')
                {
                    ex=i;
                    ey=j;
                }

                if(mz[0][i][j]=='<')
                {
                    mz[1][i][j]='^';
                    mz[2][i][j]='>';
                    mz[3][i][j]='v';
                }
                else if(mz[0][i][j]=='^')
                {
                    mz[1][i][j]='>';
                    mz[2][i][j]='v';
                    mz[3][i][j]='<';
                }
                else if(mz[0][i][j]=='>')
                {
                    mz[1][i][j]='v';
                    mz[2][i][j]='<';
                    mz[3][i][j]='^';
                }
                else if(mz[0][i][j]=='v')
                {
                    mz[1][i][j]='<';
                    mz[2][i][j]='^';
                    mz[3][i][j]='>';
                }
                else
                {
                    mz[1][i][j]=mz[0][i][j];
                    mz[2][i][j]=mz[0][i][j];
                    mz[3][i][j]=mz[0][i][j];
                }
            }
        }


        f(i,n)
        {
            f(j,m)
            {
                f(k,4)
                {
                    dst[k][i][j]=inf;
                    if(mz[k][i][j]=='<')
                    {
                        for(l=j-1;l>-1;l--)
                        {
                            if(mz[k][i][l]=='.'||mz[k][i][l]=='S'||mz[k][i][l]=='G'||mz[k][i][l]=='x')
                                mz[k][i][l]='x';
                            else
                                break;
                        }
                    }
                    else if(mz[k][i][j]=='^')
                    {
                        for(l=i-1;l>-1;l--)
                        {
                            if(mz[k][l][j]=='.'||mz[k][l][j]=='S'||mz[k][l][j]=='G'||mz[k][l][j]=='x')
                                mz[k][l][j]='x';
                            else
                                break;
                        }
                    }
                    else if(mz[k][i][j]=='>')
                    {
                        for(l=j+1;l<m;l++)
                        {
                            if(mz[k][i][l]=='.'||mz[k][i][l]=='S'||mz[k][i][l]=='G'||mz[k][i][l]=='x')
                                mz[k][i][l]='x';
                            else
                                break;
                        }
                    }
                    else if(mz[k][i][j]=='v')
                    {
                        for(l=i+1;l<n;l++)
                        {
                            if(mz[k][l][j]=='.'||mz[k][l][j]=='S'||mz[k][l][j]=='G'||mz[k][l][j]=='x')
                                mz[k][l][j]='x';
                            else
                                break;
                        }
                    }
                }
            }
        }


        i=dijkstra();

        if(i==inf)
            printf("Case #%d: impossible\n",cs++);
        else
            printf("Case #%d: %d\n",cs++,i);
    }
    return 0;
}




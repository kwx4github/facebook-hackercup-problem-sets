#include <stdio.h>
#include <queue>
using namespace std;

char sou[100][100+1], map[4][100][100];
unsigned m, n, sx,sy, gx,gy;
int pas[4][100][100];
queue < pair < int, pair <int, int> > > q;

inline int passable(char c){
  return ((c == '.') || (c == 'S') || (c == 'G'));
}

void genmap(){
  int i, j, k, l;

  for(l=0;l<4;l++)
    for(i=0;i<m;i++)
      for(j=0;j<n;j++)
        map[l][i][j]='.';

  for(l=0;l<4;l++){
    for(i=0;i<m;i++)
      for(j=0;j<n;j++){
        switch(sou[i][j]){
          case '.':
            break;
          case '#':
            map[l][i][j] = '#';
            break;
          case '^':
            sou[i][j]='>';
            map[l][i][j]='#';
            for(k=1;i-k>=0 && passable(sou[i-k][j]);k++)
              map[l][i-k][j]='#';
            break;
          case '>':
            sou[i][j]='v';
            map[l][i][j]='#';
            for(k=1;j+k<n && passable(sou[i][j+k]);k++)
              map[l][i][j+k]='#';
            break;
          case 'v':
            sou[i][j]='<';
            map[l][i][j]='#';
            for(k=1;i+k<m && passable(sou[i+k][j]);k++)
              map[l][i+k][j]='#';
            break;
          case '<':
            sou[i][j]='^';
            map[l][i][j]='#';
            for(k=1;j-k>=0 && passable(sou[i][j-k]);k++){
              map[l][i][j-k]='#';
            }
            break;
          case 'S':
            sx=i; sy=j;
            sou[i][j]='.';
            break;
          case 'G':
            gx=i; gy=j;
            sou[i][j]='.';
            break;
        }
      }
  }
  return;
}

int bfs(){
  unsigned i, j, k;
  for(i=0;i<4;i++)
    for(j=0;j<m;j++)
      for(k=0;k<n;k++)
        pas[i][j][k]=-1;
  while(!q.empty()) q.pop();

  q.push(make_pair(0, make_pair(sx, sy)));
  pas[0][sx][sy]=0;
  while(!q.empty() && !(q.front().second.first == gx && q.front().second.second == gy)){
    int pa = q.front().first, xt = q.front().second.first, yt = q.front().second.second;
    int pp, at, bt;
    q.pop();
    pp = (pa+1)%4;

    if(xt > 0 && passable(map[pp][xt-1][yt]) && pas[pp][xt-1][yt] < 0){
      pas[pp][xt-1][yt] = pas[pa][xt][yt]+1;
      q.push(make_pair(pp,make_pair(xt-1,yt)));
    }
    if(xt+1 < m && passable(map[pp][xt+1][yt]) && pas[pp][xt+1][yt] < 0){
      pas[pp][xt+1][yt] = pas[pa][xt][yt]+1;
      q.push(make_pair(pp,make_pair(xt+1,yt)));
    }
    if(yt > 0 && passable(map[pp][xt][yt-1]) && pas[pp][xt][yt-1] < 0){
      pas[pp][xt][yt-1] = pas[pa][xt][yt]+1;
      q.push(make_pair(pp,make_pair(xt,yt-1)));
    }
    if(yt+1 < n && passable(map[pp][xt][yt+1]) && pas[pp][xt][yt+1] < 0){
      pas[pp][xt][yt+1] = pas[pa][xt][yt]+1;
      q.push(make_pair(pp,make_pair(xt,yt+1)));
    }
  }

  if(q.empty()) return -1;

  int pa = q.front().first, xt = q.front().second.first, yt = q.front().second.second;
  return pas[pa][xt][yt];
}

int main(){
  unsigned t, x, i, j;
  scanf("%u",&t);
  for(x=1;x<=t;x++){
    scanf("%u %u", &m, &n);
    for(i=0;i<m;i++)
      scanf("%s", sou[i]);
    printf("Case #%u: ",x);

    genmap();

    int a=bfs();
    if(a<0) printf("impossible\n");
    else printf("%d\n",a);
  }
  return 0;
}

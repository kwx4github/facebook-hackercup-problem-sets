#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <math.h>
#include <hash_set>
#include <hash_map>
#include <algorithm>
#include <map>
#include <set>
#include <conio.h>
#include <cassert>
#include <stack>
#include <unordered_set>
#define TASK "split"
#define MOD 1000000007
#define INF 1000000000000000
#define EPS 1E-10
#define MAXN 1009
#define MAGIC 1E70
using namespace std;

void printcase(int cs) {
	printf("Case #%d: ", cs);
}

int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
int n,m;
vector<string>field;


bool ok(pair<int,int> cc) {
	return (cc.first >=0 && cc.second >=0 && cc.first < n && cc.second < m) && (field[cc.first][cc.second] == '.' || field[cc.first][cc.second] == 'S' || field[cc.first][cc.second] == 'G');
}

bool sign(char c) {
	return (c=='^' || c=='>' || c == '<' || c=='v');
}

int getN(char c) {
	if(c=='>')return 0;
	if(c=='v')return 1;
	if(c == '<')return 2;
	if(c=='^') return 3;
}

pair<int,int> getDir(int c) {
	if(c==0)return make_pair(0, 1);
	if(c==1)return make_pair(1, 0);
	if(c == 2)return make_pair(0, -1);
	if(c==3) return make_pair(-1, 0);
}


int main(){
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

	int te;
	cin >> te;
	for (int T = 1; T <= te; ++T) {
		cin >>n >>m;
		field.clear();
		field.resize(n);
		vector<vector<vector<int>>>underAttack(n, vector<vector<int>>(m, vector<int>(4)));
		for(int i=0; i<n; ++i){
			cin >> field[i];
		}

		for(int i=0; i<n; ++i){
			for(int j=0; j<m; ++j){
				if(!sign(field[i][j]))continue;
				int rot = getN(field[i][j]);
				for(int p=0; p<4; ++p){
					pair<int,int>crr = make_pair(i,j);
					pair<int,int>de = getDir(rot);
					while(crr.first>=0 && crr.second >=0 && crr.first <n && crr.second <m) {
						underAttack[crr.first][crr.second][p] = 1;
						crr.first += de.first;
						crr.second += de.second;
					}
					rot++;
					rot%=4;
				}
			}
		}

		pair<int,int>from,to;
		for(int i=0; i<n; ++i){
			for(int j=0; j<m;++j){
				if(field[i][j] == 'S') {
					from = make_pair(i,j);
				}
				if(field[i][j] == 'G') {
					to = make_pair(i,j);
				}
			}
		}
				
		vector<vector<vector<int>>>used(n,vector<vector<int>>(m,vector<int>(4))),d(n,vector<vector<int>>(m,vector<int>(4,999999)));
		used[from.first][from.second][0] = 1;
		d[from.first][from.second][0] = 0;
		queue<pair<pair<int,int>,int>>q;
		pair<int,int>cc, tc;
		int cs;
		int ts;
		q.push(make_pair(from, 0));
		while(!q.empty()) {
			cc = q.front().first;
			cs = q.front().second;
			q.pop();
			for(int i=0; i<4; ++i){
				tc.first = cc.first + dx[i];
				tc.second = cc.second + dy[i];
				ts = (cs+1)%4;
				if(ok(tc) && !used[tc.first][tc.second][ts] && !underAttack[tc.first][tc.second][ts]) {
					used[tc.first][tc.second][ts] = 1;
					d[tc.first][tc.second][ts] = d[cc.first][cc.second][cs] + 1;
					q.push(make_pair(tc,ts));
				}
			}
		}
		int best = 99999999;
		for (int i=0; i<4; ++i){
			if(used[to.first][to.second][i]){
				best = min(best, d[to.first][to.second][i]);
			}
		}
		printcase(T);
		if(best >= 999999) {
			puts("impossible");
		}
		else{
			printf("%d\n", best);
		}
	}

	return 0;
}
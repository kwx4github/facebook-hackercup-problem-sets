#include <bits/stdc++.h>

#define rep(i,n) for(i=1;i<=n;i++)
#define Rep(i,n) for(i=0;i<n;i++)
#define For(i,a,b) for(i=a;i<=b;i++)

#define pb(x) push_back(x)
#define sz(x) x.size()

#define mem(ara,val) memset(ara,val,sizeof(ara))
#define eps 1e-9

#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define sl(x) scanf("%lld",&x)
#define sll(x,y) scanf("%lld %lld",&x,&y)
#define slll(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define ss(ch) scanf("%s",ch)
#define pi(x) printf("%d",x)
#define pii(x,y) printf("%d %d",x,y)
#define piii(x,y,z) printf("%d %d %d",x,y,z)
#define pl(x) printf("%lld",x)
#define pll(x,y) printf("%lld %lld",x,y)
#define plll(x,y,z) printf("%lld %lld %lld",x,y,z)
#define ps(ch) printf("%s",ch)
#define Afridi 0
#define NL printf("\n")
#define SP printf(" ")
#define loj(x) printf("Case %d:",x)
#define Loj(x) printf("Case %lld:",x)
#define debug(x) printf("wow  %d !!\n",x)
#define Max 110
#define INF INT_MAX

typedef long long LL;
typedef unsigned long long ULL;

using namespace std;

char g[Max][Max];
bool visit[6][Max][Max];
LL n,m;

LL dx[] = {+1,-1,+0,+0};
LL dy[] = {+0,+0,+1,-1};


/// Graph making
char Next(char x)
{
    if(x == '^')return '>';
    if(x == '>')return 'v';
    if(x == 'v')return '<';
    if(x == '<')return '^';
    else return x;
}

bool lasergo(LL i,LL j)
{
    char x = g[i][j];
    if(x == '.' || x == 'S' || x == 'G')return 1;
    else return 0;
}

void go(LL ind)
{
    LL i,j,k;
    for(i=0; i<n; i++)
    {
        for(j=0; j<m; j++)
        {
            if(g[i][j] == '^')
            {
                for(k=i-1; k>=0; k--)
                {
                    if(lasergo(k,j) == 0)break;
                    visit[ind][k][j] = 1;
                }
            }

            else if(g[i][j] == '>')
            {
                for(k=j+1; k<m; k++)
                {
                    if(lasergo(i,k) == 0)break;
                    visit[ind][i][k] = 1;
                }
            }

            else if(g[i][j] == 'v')
            {
                for(k=i+1; k<n; k++)
                {
                    if(lasergo(k,j) == 0)break;
                    visit[ind][k][j] = 1;
                }
            }

            else if(g[i][j] == '<')
            {
                for(k=j-1; k>=0; k--)
                {
                    if(lasergo(i,k) == 0)break;
                    visit[ind][i][k] = 1;
                }
            }
        }
    }
}

void makegraph()
{
    LL i,j,k;
    mem(visit,0);
    Rep(k,4)
    {
        go(k);
        for(i=0; i<n; i++)
        {
            for(j=0; j<m; j++)g[i][j] = Next(g[i][j]);
        }
    }
    for(i=0; i<n; i++)
    {
        for(j=0; j<m; j++)
        {
            if(lasergo(i,j) == 0)
            {
                for(k=0; k<4; k++)visit[k][i][j] = 1;
            }
        }
    }
}
///Graph making end

/// BFS
struct node
{
    LL x,y,cost;
    void make(LL a,LL b,LL c)
    {
        x = a;
        y = b;
        cost = c;
    }
};
node S,G;

bool poss(LL i,LL j)
{
    if(i>=0 && i<n && j>=0 && j<m)return 1;
    else return 0;
}

LL bfs(node s)
{
    visit[s.cost % 4][s.x][s.y] = 1;
    queue <node> q;
    q.push(s);

    while(!q.empty())
    {
        node my = q.front();
        q.pop();
        if(my.x == G.x && my.y == G.y)return my.cost;
        LL i;
        Rep(i,4)
        {
            LL x = my.x + dx[i];
            LL y = my.y + dy[i];
            LL c = my.cost + 1;

            if(poss(x,y))
            {
               // printf("NOW   %lld %lld     cost %lld\n",x,y,c);
                if(visit[c%4][x][y] == 0)
                {
                  //  printf("duksa %lld %lld     cost %lld\n",x,y,c);
                    visit[c%4][x][y] = 1;
                    node tmp;
                    tmp.make(x,y,c);
                    q.push(tmp);
                }
            }
        }
    }
    return -1;
}
///BFS end

void prework()
{
    LL i,j;
    for(i=0; i<n; i++)
    {
        for(j=0; j<m; j++)
        {
            if(g[i][j] == 'G')
            {
                G.make(i,j,0);
            }
            if(g[i][j] == 'S')
            {
                S.make(i,j,0);
            }
        }
    }
    makegraph();
}

void Show()
{
    LL i,j,k;
    Rep(k,4)
    {
        Rep(i,n)
        {
            Rep(j,m)printf("%d",visit[k][i][j]);
            NL;
        }
        printf("--------------------------\n\n");
    }
}

int main()
{
    //freopen("laser_maze.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    LL t,T,i;
    sl(T);
    rep(t,T)
    {
        sll(n,m);
        Rep(i,n)ss(g[i]);
        prework();
       // Show();
        LL ans = bfs(S);
        printf("Case #%lld: ",t);
        if(ans == -1)puts("impossible");
        else printf("%lld\n",ans);
    }
    return 0;
}

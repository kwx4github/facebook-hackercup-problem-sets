#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <vector>
#include <ctime>
#include <stack>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
 
#define REP(i, n) for(int i = 0; i < n; ++i)
#define RREP(i, n) for(int i = n - 1; i >= 0; --i)
#define FOR(i, x, y) for(int i = x; i <= y; ++i)
#define RFOR(i, x, y) for(int i = x; i >= y; --i)
#define SZ(a) (int)(a).size()
#define ALL(a) (a).begin(),(a).end()
#define SORT(a) sort(ALL(a)) 
#define CLEAR(x) memset(x,0,sizeof x);
#define COPY(FROM, TO) memcpy(TO, FROM, sizeof TO);
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())
#define pb push_back
#define sqr(x) (x)*(x)
#define X first
#define Y second
#define y1 Y1
#define y2 Y2
const long double pi=acos(-1.0);
const long double eps = 1e-9;
const int MAXN = 1000007;
const double INF = 1000000000000000.0;

#define PSS pair<string, string>

struct T
{
	int x, y, dir, sec;
	T() {}
	T(int x, int y, int dir, int sec) : x(x), y(y), dir(dir), sec(sec){}
	bool operator < (T other) const
	{
		if (x != other.x) return x < other.x;
		if (y != other.y) return y < other.y;
		if (dir != other.dir) return dir < other.dir;
		return sec < other.sec;
	}
};

int n, m;
int a[111][111];
bool u[111][111][7];

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

int solve()
{
	CLEAR(a);

	set<T> ss;
	cin >> n >> m;
	int xs, ys, xe, ye;
	REP(i, n)
	{
		string s;
		cin >> s;
		REP(j, m)
		{
			if (s[j] == 'S') xs = i, ys = j;
			if (s[j] == 'G') xe = i, ye = j;
			if (s[j] == '#') a[i][j] = -1;
			if (s[j] == '^') a[i][j] = 1;
			if (s[j] == '>') a[i][j] = 2;
			if (s[j] == 'v') a[i][j] = 3;
			if (s[j] == '<') a[i][j] = 4;
		}
	}

	REP(i, n)
		REP(j, m)
			if (a[i][j] >= 1)
			{
				RFOR(xx, i - 1, 0)
				{
					if (a[xx][j] != 0) break;
					int sec = (5 - a[i][j]) % 4;
					T q(xx, j, 0, sec);
					if (ss.find(q) != ss.end()) break;
					ss.insert(q);
				}
				
				FOR(yy, j + 1, m - 1)
				{
					if (a[i][yy] != 0) break;
					int sec = (6 - a[i][j]) % 4;
					T q(i, yy, 1, sec);
					if (ss.find(q) != ss.end()) break;
					ss.insert(q);
				}
				
				FOR(xx, i + 1, n - 1)
				{
					if (a[xx][j] != 0) break;
					int sec = (7 - a[i][j]) % 4;
					T q(xx, j, 2, sec);
					if (ss.find(q) != ss.end()) break;
					ss.insert(q);
				}
				
				RFOR(yy, j - 1, 0)
				{
					if (a[i][yy] != 0) break;
					int sec = (8 - a[i][j]) % 4;
					T q(i, yy, 3, sec);
					if (ss.find(q) != ss.end()) break;
					ss.insert(q);
				}
			}
	queue<pair<PII, int>> q;
	q.push(make_pair(PII(xs, ys), 0));
	CLEAR(u);
	u[xs][ys][0] = true;
	
	while (q.size())
	{
		int xx = q.front().first.first;
		int yy = q.front().first.second;
		int tm = q.front().second;
		q.pop();
		// cerr << xx << " " << yy << " " << tm << endl;
		if (xx == xe && yy == ye) return tm;
		
		REP(dd, 4)
		{
			int x1 = xx + dx[dd];
			int y1 = yy + dy[dd];			
			int t1 = tm + 1;
			
			if (x1 < 0 || x1 >= n || y1 < 0 || y1 >= m) continue;
			if (a[x1][y1] != 0) continue;
			if (u[x1][y1][t1 % 4]) continue;
			
			bool f = true;
			REP(dir, 4)
				if (ss.find(T(x1, y1, dir, t1 % 4)) != ss.end())
					f = false;
			if (!f) continue;
			
			u[x1][y1][t1 % 4] = true;
			q.push(make_pair(PII(x1, y1), t1));
		}
	}
	return -1;
}

int main()
{
	ios_base::sync_with_stdio(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	int tests;
	cin >> tests;
	FOR(ttt, 1, tests)
	{
		int x = solve();
		cout << "Case #" << ttt << ": ";
		if (x == -1) cout << "impossible\n";
		else cout << x << endl;
	}
}

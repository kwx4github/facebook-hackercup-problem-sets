//
//  main.cpp
//  Problem3
//
//  Created by Maxim Piskunov on 1/9/15.
//  Copyright (c) 2015 Maxim Piskunov. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <queue>

using namespace std;

struct input {
    int M, N;
    vector <vector <char> > maze;
};

struct output {
    int steps;
};

void read(ifstream &in, input &test) {
    in >> test.M >> test.N;
    test.maze.resize(test.M);
    for (int i = 0; i < test.M; i++) {
        string line;
        in >> line;
        test.maze[i].resize(test.N);
        for (int j = 0; j < test.N; j++) {
            test.maze[i][j] = line[j];
        }
    }
}

void write(ofstream &out, output test) {
    if (test.steps == 40000) out << "impossible";
    else out << test.steps;
}

output solve (input test) {
    output result;
    
    vector<vector<vector <bool> > > accessible;
    vector<vector<vector <bool> > > goal;
    vector<vector<vector <int> > > distance;
    accessible.resize(test.M);
    goal.resize(test.M);
    distance.resize(test.M);
    for (int i = 0; i < test.M; i++) {
        accessible[i].resize(test.N);
        goal[i].resize(test.N);
        distance[i].resize(test.N);
        for (int j = 0; j < test.N; j++) {
            accessible[i][j].resize(4);
            goal[i][j].resize(4);
            distance[i][j].resize(4);
            for (int k = 0; k < 4; k++) {
                accessible[i][j][k] = true;
                goal[i][j][k] = false;
                distance[i][j][k] = 40000;
            }
        }
    }
    
    for (int i = 0; i < test.M; i++) {
        for (int j = 0; j < test.N; j++) {
            if (test.maze[i][j] == '#') {
                for (int k = 0; k < 4; k++) {
                    accessible[i][j][k] = false;
                }
            }
            if (test.maze[i][j] == 'G') {
                for (int k = 0; k < 4; k++) {
                    goal[i][j][k] = true;
                }
            }
        }
    }
    
    for (int i = 0; i < test.M; i++) {
        for (int j = 0; j < test.N; j++) {
            if (test.maze[i][j] == '^' || test.maze[i][j] == '>' || test.maze[i][j] == 'v' || test.maze[i][j] == '<') {
                for (int k = 0; k < 4; k++) {
                    int turretPhase = k;
                    switch (test.maze[i][j]) {
                        case '^':
                            turretPhase += 0;
                            break;
                            
                        case '>':
                            turretPhase += 1;
                            break;
                            
                        case 'v':
                            turretPhase += 2;
                            break;
                            
                        case '<':
                            turretPhase += 3;
                            break;
                            
                        default:
                            break;
                    }
                    turretPhase %= 4;
                    
                    accessible[i][j][k] = false;
                    
                    if (turretPhase == 0) {
                        for (int l = i - 1; l >= 0 && (test.maze[l][j] == '.' || test.maze[l][j] == 'S' || test.maze[l][j] == 'G'); l--) {
                            accessible[l][j][k] = false;
                        }
                    } else if (turretPhase == 1) {
                        for (int l = j + 1; l < test.N && (test.maze[i][l] == '.' || test.maze[i][l] == 'S' || test.maze[i][l] == 'G'); l++) {
                            accessible[i][l][k] = false;
                        }
                    } else if (turretPhase == 2) {
                        for (int l = i + 1; l < test.M && (test.maze[l][j] == '.' || test.maze[l][j] == 'S' || test.maze[l][j] == 'G'); l++) {
                            accessible[l][j][k] = false;
                        }
                    } else {
                        for (int l = j - 1; l >= 0 && (test.maze[i][l] == '.' || test.maze[i][l] == 'S' || test.maze[i][l] == 'G'); l--) {
                            accessible[i][l][k] = false;
                        }
                    }
                }
            }
        }
    }
    
    queue<vector <int> > q;
    for (int i = 0; i < test.M; i++) {
        for (int j = 0; j < test.N; j++) {
            if (test.maze[i][j] == 'S') {
                q.push({i, j, 0});
                distance[i][j][0] = 0;
            }
        }
    }
    
    while (!q.empty()) {
        vector <int> start = q.front();
        q.pop();
        
        int nextTime = (start[2] + 1) % 4;
        int nextDistance = distance[start[0]][start[1]][start[2]] + 1;
        
        if (start[0] > 0 && accessible[start[0]-1][start[1]][nextTime] && distance[start[0]-1][start[1]][nextTime] > nextDistance) {
            distance[start[0]-1][start[1]][nextTime] = nextDistance;
            q.push({start[0]-1, start[1], nextTime});
        }
        
        if (start[0] < test.M - 1 && accessible[start[0] + 1][start[1]][nextTime] && distance[start[0] + 1][start[1]][nextTime] > nextDistance) {
            distance[start[0]+1][start[1]][nextTime] = nextDistance;
            q.push({start[0]+1, start[1], nextTime});
        }
        
        if (start[1] > 0 && accessible[start[0]][start[1]-1][nextTime] && distance[start[0]][start[1]-1][nextTime] > nextDistance) {
            distance[start[0]][start[1]-1][nextTime] = nextDistance;
            q.push({start[0], start[1] - 1, nextTime});
        }
        
        if (start[1] < test.N - 1 && accessible[start[0]][start[1] + 1][nextTime] && distance[start[0]][start[1]+1][nextTime] > nextDistance) {
            distance[start[0]][start[1]+1][nextTime] = nextDistance;
            q.push({start[0], start[1] + 1, nextTime});
        }
        
    }
    
    result.steps = 40000;
    for (int i = 0; i < test.M; i++) {
        for (int j = 0; j < test.N; j++) {
            for (int k = 0; k < 4; k++) {
                if (goal[i][j][k]) {
                    if (result.steps > distance[i][j][k]) result.steps = distance[i][j][k];
                }
            }
        }
    }
    
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < test.M; j++) {
            for (int k = 0; k < test.N; k++) {
                if (accessible[j][k][i]) cout << ".";
                else cout << "#";
            }
            cout << endl;
        }
        cout << endl;
    }
    
    return result;
}

void readAll(vector <input> &tests) {
    ifstream in("../../../../../input.txt");
    
    int T;
    in >> T;
    tests.resize(T);
    for (int i = 0; i < T; i++) {
        read(in, tests[i]);
    }
    
    in.close();
}

void writeAll(vector <output> &results) {
    ofstream out("../../../../../output.txt");
    
    out << "Case #1: ";
    write(out, results[0]);
    for (int i = 1; i < results.size(); i++) {
        out << endl << "Case #" << i+1 << ": ";
        write(out, results[i]);
    }
    
    out.close();
}

void solveAll(vector <input> &tests, vector <output> &results) {
    results.resize(tests.size());
    for (int i = 0; i < tests.size(); i++) results[i] = solve(tests[i]);
}

int main(int argc, const char * argv[]) {
    vector <input> tests;
    vector <output> results;
    
    readAll(tests);
    solveAll(tests, results);
    writeAll(results);
    
    return 0;
}
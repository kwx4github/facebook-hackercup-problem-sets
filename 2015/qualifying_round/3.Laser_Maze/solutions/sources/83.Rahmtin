#include<iostream>
#include<map>
#include<cstring>

using namespace std;


const int H = 110;
char a[H][H];
int n, m;
const int INF = 100 * 100 * 4 + 10;
int mark[H][H][4];
map<char, int> direction;
int move[4][2] = {{0,1}, {1,0}, {0,-1}, {-1,0}};
int startx, starty, endx, endy;
int dis[INF];
pair<int, int> Q[INF];
bool turret(int i, int j){
	if(a[i][j] == '^' || a[i][j] == '<' || a[i][j] == '>' || a[i][j] =='v') {
		return true;
	}
	return false;
}

bool valid(int x, int y) {
	if(x < 0 || x >= n || y < 0 || y >=m){
		return false;
	}
	return true;
}

void MarkTheCells() {
	for(int t = 0; t < 4; t++) {
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(a[i][j] == '#'){
					mark[i][j][t] = 1;
				}
				if(turret(i,j) == true) {
					int dir =  (direction[a[i][j]] + t) % 4;
					mark[i][j][t] = true;
					int x = i + move[dir][0];
					int y = j + move[dir][1];
					while(valid(x,y) == 1 && (turret(x,y)==false && a[x][y] !='#') ) {
						mark[x][y][t] = true;
						x += move[dir][0];
						y += move[dir][1];
					}
				}
			}
		}
	}
}

int bfs() {
	int head = 0;
	int tail = 0;
	mark[startx][starty][0] = 1;
	dis[tail] = 0;
	Q[tail++] = make_pair(startx, starty);
	while(head < tail) {
		int x = Q[head].first;
		int y = Q[head].second;
		int t = dis[head] % 4;
		int tt = (t + 1) % 4;
		for(int i = 0; i < 4; i++) {
			int xx = x + move[i][0];
			int yy = y + move[i][1];
			if(valid(xx, yy) == false || mark[xx][yy][tt] == 1) {
				continue;
			}
			if( xx == endx && yy == endy) {
				return dis[head] + 1;
			}
		//	cerr << xx << " " << yy << " " << tt << " " << "   " << dis[head] + 1 << endl;;
			mark[xx][yy][tt] = 1;
			dis[tail] = dis[head] + 1;
			Q[tail++] = make_pair(xx, yy);

		}
		head++;
	}
	return INF;
}

int main() {
	direction['>'] = 0;
	direction['v'] = 1;
	direction['<'] = 2;
	direction['^'] = 3;
	int T;
	cin >> T;
	int t = 0;
	while(T--) {
		t++;
		cout << "Case #" << t << ": ";
		cin >> n >> m;
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				cin >> a[i][j];
				if(a[i][j] == 'S'){
					startx = i;
					starty = j;
				}
				if(a[i][j] == 'G') {
					endx = i;
					endy = j;
				}
			}
		}
		memset(mark, 0, sizeof mark);
		MarkTheCells();
		/*
		for(int t = 0; t < 4; t++) {
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < m; j++) {
				cout << mark[i][j][t] << " ";

				}
				cout<<endl;
				}
				cout <<" __________________________________ " <<endl;
				}
		*/
			/**/
		int dist = bfs();
		if(dist == INF) {
			cout <<"impossible" <<endl;
		} else {
			cout <<dist<<endl;
		}
		/**/	
	}
	return 0;
}

#include <bits/stdc++.h>
using namespace std;
const string LASER = "^>v<";
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

struct Triple
{
  int x, y, k;
  Triple(int x, int y, int k)
  {
    this -> x = x;
    this -> y = y;
    this -> k = k;
  }
};

int m, n, sx, sy, fx, fy, blocked[111][111][4], dist[111][111][4];
string maze[111];

void init()
{
  memset(blocked, 0, sizeof blocked);
  for (int i = 0; i < m; i++)
    for (int j = 0; j < n; j++)
    {
      if (maze[i][j] == 'S')
      {
        sx = i;
        sy = j;
      }
      else if (maze[i][j] == 'G')
      {
        fx = i;
        fy = j;
      }
      else if (maze[i][j] == '#')
      {
        for (int k = 0; k < 4; k++) blocked[i][j][k] = 1;
      }
      else if (maze[i][j] != '.')
      {
        for (int type = 0; type < 4; type++)
          if (LASER[type] == maze[i][j])
          {
            for (int k = 0; k < 4; k++)
            {
              int direction = (type + k) % 4, x = i, y = j;
              while (1)
              {
                x += dx[direction];
                y += dy[direction];
                if (x < 0 || x >= m || y < 0 || y >= n) break;
                if (maze[x][y] == 'S' || maze[x][y] == 'G' || maze[x][y] == '.')
                {
                  blocked[x][y][k] = 1;
                }
                else break;
              }
            }
          }
      }
    }
}

int bfs()
{
  memset(dist, -1, sizeof dist);
  dist[sx][sy][0] = 0;
  queue <Triple> q;
  q.push(Triple(sx, sy, 0));
  while (!q.empty())
  {
    Triple u = q.front();
    q.pop();
    if (u.x == fx && u.y == fy) return dist[u.x][u.y][u.k];
    
    for (int i = 0; i < 4; i++)
    {
      int x = u.x + dx[i], y = u.y + dy[i], k = (u.k + 1) % 4;
      if (x < 0 || x >= m || y < 0 || y >= n) continue;
      if (blocked[x][y][k] || dist[x][y][k] >= 0) continue;
      dist[x][y][k] = dist[u.x][u.y][u.k] + 1;
      q.push(Triple(x, y, k));
    }
  }
  return -1;
}

int main()
{
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);
	
	int test;
	cin >> test;
	for (int idTest = 1; idTest <= test; idTest++)
	{
    cin >> m >> n;
    for (int i = 0; i < m; i++) cin >> maze[i];
    init();
    
    int ans = bfs();
    
		cout << "Case #" << idTest << ": ";
    if (ans < 0) cout << "impossible\n";
    else cout << ans << endl;
	}
}

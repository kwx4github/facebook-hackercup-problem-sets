#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <ctime>
#include <iomanip>
#define LL long long
#define ULL unsigned long long
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define FO(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define FOD(i,a,b) for(int i=a;i>b;i--)
#define FORV(i,a) for(typeof(a.begin()) i = a.begin(); i != a.end(); i++)
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define debug cout << "YES" << endl

using namespace std;

typedef pair<int,int>II;
typedef pair<int,II>PII;
template<class T> T gcd(T a, T b) {T r; while(b!=0) {r=a%b;a=b;b=r;} return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }

const double PI = 2*acos(0.0);
const long double eps = 1e-12;
const int infi = 1e9;
const LL Linfi = (LL) 9e18;
const LL MOD = 1000000007;
#define maxn 200005

struct data{
    int x, y;
    int type;
    data(){}
    data(int _x, int _y, int _type){
        x = _x; y = _y; type = _type;
    }
};

int dx[4] = {0,0,1,-1};
int dy[4] = {1,-1,0,0};

int n, m;
string s[105];
int xet[105][105][4], block[105][105][4], d[105][105][4];
data trace[105][105][4];
data ST, EN;

bool isLaze(int x, int y){
    return (s[x][y] == '^' || s[x][y] == 'v' || s[x][y] == '>' || s[x][y] == '<');
}

bool isInside(int x, int y){
    return (x >= 1 && x <= n && y >= 1 && y <= m);
}

void go(int i, int j, int val, int type){
    if(type == 0){
        /// di xuong
        FOR(u,i+1,n){
            if(isLaze(u, j) || s[u][j] == '#') return;
            block[u][j][val] = 1;
        }
    }
    else if(type == 1){
        /// di sang trai
        FORD(v,j-1,1){
            if(isLaze(i, v) || s[i][v] == '#') return;
            block[i][v][val] = 1;
        }
    }
    else if(type == 2){
        /// di len
        FORD(u,i-1,1){
            if(isLaze(u, j) || s[u][j] == '#') return;
            block[u][j][val] = 1;
        }
    }
    else if(type == 3){
        /// di sang phai
        FOR(v,j+1,m){
            if(isLaze(i, v) || s[i][v] == '#') return;
            block[i][v][val] = 1;
        }
    }
}

void Init(){
    FOR(i,1,n) FOR(j,1,m) if(s[i][j] == 'S'){
        ST = data(i,j,0); break;
    }
    FOR(i,1,n) FOR(j,1,m) if(s[i][j] == 'G'){
        EN = data(i,j,-1); break;
    }

    memset(block, 0, sizeof(block));
    FOR(i,1,n) FOR(j,1,m) {
        if(s[i][j] == 'v'){
            go(i,j,0,0);
            go(i,j,1,1);
            go(i,j,2,2);
            go(i,j,3,3);
        }
        else if(s[i][j] == '^'){
            go(i,j,0,2);
            go(i,j,1,3);
            go(i,j,2,0);
            go(i,j,3,1);
        }
        else if(s[i][j] == '<'){
            go(i,j,0,1);
            go(i,j,1,2);
            go(i,j,2,3);
            go(i,j,3,0);
        }
        else if(s[i][j] == '>'){
            go(i,j,0,3);
            go(i,j,1,0);
            go(i,j,2,1);
            go(i,j,3,2);
        }
    }
}

void in(){
//    FOR(i,1,n) FOR(j,1,m) if(isLaze(i,j))
//        block[i][j][0] = block[i][j][1] = block[i][j][2] = block[i][j][3] = 7;
//    FOR(k,0,3) block[ST.x][ST.y][k] = 8;
//    FOR(k,0,3) block[EN.x][EN.y][k] = 8;
//
//    FOR(i,1,10) {
//        FOR(j,1,15)
//        cout << block[i][j][3] << " "; cout << endl;
//    }
    data tmp = EN;
    vector<data> V;
    while(1){
        //cout << tmp.x << " " << tmp.y << " " << tmp.type << endl;
        V.pb(tmp);
        if(tmp.x == ST.x && tmp.y == ST.y) break;
        tmp = trace[tmp.x][tmp.y][tmp.type];

    }
    reverse(V.begin(), V.end());
    FOR(i,0,V.size()-1) cout << V[i].x << " " << V[i].y << endl;
}

void solve(){
    Init();
    queue<data> Q;
    Q.push(ST);
    memset(d, 0, sizeof(d));
    memset(xet,0,sizeof(xet));
    xet[ST.x][ST.y][ST.type] = 1;

    while(!Q.empty()){
        data t = Q.front(); Q.pop();
        //cout << t.x << " " << t.y << "  " << t.type << " " << d[t.x][t.y][t.type] << endl;
        if(t.x == EN.x && t.y == EN.y){
            EN.type = t.type;
            cout << d[t.x][t.y][t.type] << endl;
            //in();
            return;
        }
        data tmp;
        FOR(k,0,3){
            tmp.x = t.x + dx[k];
            tmp.y = t.y + dy[k];
            tmp.type = (t.type+1) % 4;
            if(isInside(tmp.x, tmp.y))
            if(s[tmp.x][tmp.y] == '.' || s[tmp.x][tmp.y] == 'S' || s[tmp.x][tmp.y] == 'G')
            if(xet[tmp.x][tmp.y][tmp.type] == 0)
            if(block[tmp.x][tmp.y][tmp.type] == 0)
            {
                Q.push(tmp);
                xet[tmp.x][tmp.y][tmp.type] = 1;
                d[tmp.x][tmp.y][tmp.type] = d[t.x][t.y][t.type] + 1;
                trace[tmp.x][tmp.y][tmp.type] = t;
            }
        }
    }
    cout << "impossible" << endl;
}

int main(){
    ios::sync_with_stdio(false);
    #ifndef ONLINE_JUDGE
    freopen("test.in","r",stdin);
    freopen("test.out","w",stdout);
    #endif
    int sotest;
    cin >> sotest;
    FOR(test,1,sotest){
        cin >> n >> m;
        FOR(i,1,n){
            cin >> s[i];
            s[i] = '0' + s[i];
        }
        cout << "Case #" << test << ": ";
        solve();
    }



    return 0;
}

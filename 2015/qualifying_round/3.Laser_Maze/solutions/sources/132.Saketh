#include <iostream>
#include <string.h>
#include <queue>
using namespace std;

const int MAXL = 105;
const int INF = 0x7f7f7f7f;

int T, M, N, si, sj, gi, gj;
char g[MAXL][MAXL];
bool f[4][MAXL][MAXL];
int sp[4][MAXL][MAXL];

string turr = ">v<^";
int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
bool go(int i, int j){
    if(i<0 || i>=M || j<0 || j>=N) return false;
    return g[i][j] == '.';
}

struct state{ int i, j, k, d; };

int main(){
    cin >> T;
    for(int t=1; t<=T; t++){
        cin >> M >> N;
    
        for(int i=0; i<M; i++)
            for(int j=0; j<N; j++){
                cin >> g[i][j];
                if(g[i][j] == 'S'){ si = i; sj = j; g[i][j] = '.'; }
                if(g[i][j] == 'G'){ gi = i; gj = j; g[i][j] = '.'; }
            }
    
        memset(f, 0, sizeof(f)); 
        for(int k=0; k<4; k++){
            for(int i=0; i<M; i++)
                for(int j=0; j<N; j++){
                    if(turr.find(g[i][j]) == string::npos) continue; 
                    int idx = turr.find(g[i][j]);                    
                    int jdx = (idx+k)%4;
                    for(int x = i+dir[jdx][0], y = j+dir[jdx][1]; go(x, y);){
                        f[k][x][y] = true;
                        x += dir[jdx][0];
                        y += dir[jdx][1];
                    }                    
                } 
        }

        memset(sp, 0x7f, sizeof(sp));    
        queue<state> bfs;
        bfs.push({si, sj, 0, 0});

        while(!bfs.empty()){
            state t = bfs.front(); bfs.pop();
            for(int d=0; d<4; d++){
                state u = {t.i + dir[d][0], t.j + dir[d][1], (t.k+1)%4, t.d+1};
                if(!go(u.i, u.j)) continue;
                if(f[u.k][u.i][u.j]) continue;
                if(sp[u.k][u.i][u.j] != INF) continue;
            
                sp[u.k][u.i][u.j] = u.d;
                bfs.push(u);
            }
        }

        int res = INF;
        for(int k=0; k<4; k++) res = min(res, sp[k][gi][gj]);
        cout << "Case #" << t << ": ";
        if(res == INF) cout << "impossible\n";
        else cout << res << "\n";
    }

    cout.flush();
    return 0;
}

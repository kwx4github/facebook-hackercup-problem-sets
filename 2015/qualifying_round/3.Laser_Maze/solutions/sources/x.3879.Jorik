#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#include <utility>
#include <string>

using namespace std;

int movements[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};

int main()
{
    //freopen("lm.in", "r", stdin);
    //freopen("lm.out", "w", stdout);
    int tc;
    scanf("%d", &tc);
    for(int kras=1; kras<=tc; kras++)
    {
        int n, m;
        scanf("%d %d", &n, &m);
        int minimum_steps = 1000000000;
        vector<string> field(n);
        for(int i=0; i<n; i++)
        {
            cin >> field[i];
        }
        int current_row;
        int current_col;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(field[i][j] == 'S')
                {
                    current_row = i;
                    current_col = j;
                    break;
                }
            }
        }
        int target_row;
        int target_col;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(field[i][j] == 'G')
                {
                    target_row = i;
                    target_col = j;
                    break;
                }
            }
        }

        vector< vector< vector<bool> > > safe(4, vector< vector<bool> >(n, vector<bool>(m, true)));
        for(int i=0; i<4; i++)
        {
            for(int j=0; j<n; j++)
            {
                for(int k=0; k<m; k++)
                {
                    if(field[j][k] == 'v')
                    {
                        int turn=0;
                        for(int l=1; 0<=(j+movements[(turn+i)%4][0]*l) && (j+movements[(turn+i)%4][0]*l) < n && 0<=(k+movements[(turn+i)%4][1]*l) && (k+movements[(turn+i)%4][1]*l) < m; l++)
                        {
                            if(field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '#' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == 'v' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '<' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '^' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '>')
                            {
                                break;
                            }
                            safe[i][j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] = false;

                        }
                    }
                    else if(field[j][k] == '<')
                    {
                        int turn=1;
                        for(int l=1; 0<=(j+movements[(turn+i)%4][0]*l) && (j+movements[(turn+i)%4][0]*l) < n && 0<=(k+movements[(turn+i)%4][1]*l) && (k+movements[(turn+i)%4][1]*l) < m; l++)
                        {
                            if(field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '#' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == 'v' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '<' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '^' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '>')
                            {
                                break;
                            }
                            safe[i][j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] = false;

                        }
                    }
                    else if(field[j][k] == '^')
                    {
                        int turn=2;
                        for(int l=1; 0<=(j+movements[(turn+i)%4][0]*l) && (j+movements[(turn+i)%4][0]*l) < n && 0<=(k+movements[(turn+i)%4][1]*l) && (k+movements[(turn+i)%4][1]*l) < m; l++)
                        {
                            if(field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '#' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == 'v' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '<' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '^' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '>')
                            {
                                break;
                            }
                            safe[i][j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] = false;

                        }
                    }
                    else if(field[j][k] == '>')
                    {
                        int turn=3;
                        for(int l=1; 0<=(j+movements[(turn+i)%4][0]*l) && (j+movements[(turn+i)%4][0]*l) < n && 0<=(k+movements[(turn+i)%4][1]*l) && (k+movements[(turn+i)%4][1]*l) < m; l++)
                        {
                            if(field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '#' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == 'v' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '<' || field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '^' ||
                               field[j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] == '>')
                            {
                                break;
                            }
                            safe[i][j+movements[(turn+i)%4][0]*l][k+movements[(turn+i)%4][1]*l] = false;

                        }
                    }
                }
            }
        }

        vector< vector<int> > visited(n, vector<int>(m, 0));
        queue< pair< pair<int, int>, int > > q;
        q.push(make_pair(make_pair(current_row, current_col), 0));
        while(q.empty() == false)
        {
            pair< pair<int, int>, int > pp = q.front();
            q.pop();
            current_row = pp.first.first;
            current_col = pp.first.second;
            int current_steps = pp.second;
            for(int i=0; i<4; i++)
            {
                if(0 <= current_row+movements[i][0] && current_row+movements[i][0] < n &&
                   0 <= current_col+movements[i][1] && current_col+movements[i][1] < m &&
                   (field[current_row+movements[i][0]][current_col+movements[i][1]] == '.' ||
                    field[current_row+movements[i][0]][current_col+movements[i][1]] == 'G' ||
                    field[current_row+movements[i][0]][current_col+movements[i][1]] == 'S') &&
                   visited[current_row+movements[i][0]][current_col+movements[i][1]] <= 100)
                {
                    bool is_safe = safe[(current_steps+1)%4][current_row+movements[i][0]][current_col+movements[i][1]];
                    if(is_safe)
                    {
                        q.push(make_pair(make_pair(current_row+movements[i][0], current_col+movements[i][1]), current_steps+1));
                        visited[current_row+movements[i][0]][current_col+movements[i][1]]++;
                        if(current_row+movements[i][0] == target_row && current_col+movements[i][1] == target_col)
                        {
                            minimum_steps = current_steps+1;
                            break;
                        }
                    }
                }
            }
            if(minimum_steps != 1000000000)
            {
                break;
            }
        }
        if(minimum_steps == 1000000000)
        {
            printf("Case #%d: impossible\n", kras);
        }
        else
        {
            printf("Case #%d: %d\n", kras, minimum_steps);
        }

    }
    return 0;
}

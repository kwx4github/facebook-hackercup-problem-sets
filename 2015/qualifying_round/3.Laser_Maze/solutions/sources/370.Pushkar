#include <bits/stdc++.h>
using namespace std;
#define ll long long
// Useful constants
#define INF (int)2e9
#define INFL (long long)1e18
#define EPS 1e-9
// Useful hardware instructions
#define bitcount __builtin_popcount
#define gcd __gcd
// Useful container manipulation / traversal macros
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb push_back
#define fill(a,v) memset(a, v, sizeof a)// fill originally
#define mp make_pair

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       scanf("%s",n)

#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) typeof(v) r = (v)
#endif
#define tr(container, it) for(aut(it,container.begin()); it != container.end(); it++)


#define llu long long unsigned
#define ld long


int scan_d() {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ld scan_ld() {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
ll scan_ll() {int ip=getchar_unlocked(),flag=1;ll ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scan_llu() {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
//end of fast input
//fast output
//no line break
void print_d(int n) {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void print_ld(ld n) {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void print_ll(ll n) {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void print_llu(llu n) {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}


#define DEBUG 1
#define debug(x) {if (DEBUG)cout <<#x <<" = " <<x <<endl; }
#define debugv(x) {if (DEBUG) {cerr <<#x <<" = "; tr((x),it) cerr <<*it <<", "; cerr <<endl; }}
#define mod 1000000007

#define checkbit(n,b) ( (n >> b) & 1)
#define setbit(n,b) (n | ((1 << b)))
#define unsetbit(n,b) (n & (~(1 << b)))
typedef pair<int, int> pii;

//freopen (fname"in","r",stdin);
//freopen (fname"out","w",stdout);

int isok[4][101][101];
int mat[4][109][109];
string in[109];
int n,m;
int pos;
pii s,g;
void dodown(int i,int j)
{
	isok[pos][i][j]=1;
	for(int itr=i+1;itr<n;itr++)
	{
		if(in[itr][j] == '.' || in[itr][j] == 'S' ||in[itr][j] == 'G' )
		isok[pos][itr][j]=1;
		else break;
	}
}
void doup(int i,int j)
{
	isok[pos][i][j]=1;
	for(int itr=i-1;itr>=0;itr--)
	{
		if(in[itr][j] == '.' || in[itr][j] == 'S' ||in[itr][j] == 'G' )
		isok[pos][itr][j]=1;
		else break;
	}
}
void doleft(int i,int j)
{
	isok[pos][i][j]=1;
	for(int itr=j-1;itr>=0;itr--)
	{
		if(in[i][itr] == '.' || in[i][itr] == 'S' || in[i][itr] == 'G' )
		isok[pos][i][itr]=1;
		else break;
	}
}
void doright(int i,int j)
{
	isok[pos][i][j]=1;
	for(int itr=j+1;itr<m;itr++)
	{
		if(in[i][itr] == '.' || in[i][itr] == 'S' || in[i][itr] == 'G' )
		isok[pos][i][itr]=1;
		else break;
	}
}


int bfs()
{

	queue<pair<int,pii > > q;
	mat[0][s.first][s.second] = 0;
	q.push(mp(0,mp(s.first,s.second)));

	int con,i,j,newcon;
	while(!q.empty())
	{
		con = q.front().first;
		i = q.front().second.first;
		j = q.front().second.second;
		q.pop();

		newcon = (con + 1)%4;

		if(i-1>=0)
		{
			if(mat[newcon][i-1][j] == -1 && isok[newcon][i-1][j] != 1)
			{
				mat[newcon][i-1][j] = mat[con][i][j] + 1;
				q.push(mp(newcon,mp(i-1,j)));
			}
		}
		if(i+1<n)
		{
			if(mat[newcon][i+1][j] == -1 && isok[newcon][i+1][j] != 1)
			{
				mat[newcon][i+1][j] = mat[con][i][j] + 1;
				q.push(mp(newcon,mp(i+1,j)));
			}
		}
		if(j-1>=0)
		{
			if(mat[newcon][i][j-1] == -1 && isok[newcon][i][j-1] != 1)
			{
				mat[newcon][i][j-1] = mat[con][i][j] + 1;
				q.push(mp(newcon,mp(i,j-1)));
			}
		}
		if(j+1<m)
		{
			if(mat[newcon][i][j+1] == -1 && isok[newcon][i][j+1] != 1)
			{
				mat[newcon][i][j+1] = mat[con][i][j] + 1;
				q.push(mp(newcon,mp(i,j+1)));
			}
		}
	}

	int ans=INF;

	for(int pos=0;pos<4;pos++)
	{
		if(mat[pos][g.first][g.second] > -1)
		{
			ans = min(ans,mat[pos][g.first][g.second] );
		}
	}
	return ans;
}

void display()
{

	for(pos=0;pos<4;pos++)
	{
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				cout<<isok[pos][i][j];
			}
			cout<<endl;
		}
		cout<<pos+1<<" : "<<endl;
	}

}

int main()
{
	int t;
	s(t);
	for(int itr=1;itr<=t;itr++)
	{
		printf("Case #%d: ",itr);

		s(n);
		s(m);

		for(int i=0;i<n;i++)
		{
			cin>>in[i];
			for(int j=0;j<m;j++)
			{
				if(in[i][j] == 'S')
				{
					s.first = i;
					s.second = j;
				}
				else if(in[i][j] == 'G')
				{
					g.first=i;
					g.second=j;
				}
			}
		}

		fill(mat,-1);
		fill(isok,0);

		for(pos=0;pos<4;pos++)
		{
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<m;j++)
				{
					if(in[i][j] == 'v')
					{
						if(pos == 0) dodown(i,j);
						else if(pos == 1) doleft(i,j);
						else if(pos == 2) doup(i,j);
						else if(pos == 3) doright(i,j);
					}
					else if(in[i][j] == '<')
					{
						if(pos == 0) doleft(i,j);
						else if(pos == 1) doup(i,j);
						else if(pos == 2) doright(i,j);
						else if(pos == 3) dodown(i,j);
					}
					else if(in[i][j] == '^')
					{
						if(pos == 0) doup(i,j);
						else if(pos == 1) doright(i,j);
						else if(pos == 2) dodown(i,j);
						else if(pos == 3) doleft(i,j);
					}
					else if(in[i][j] == '>')
					{
						if(pos == 0) doright(i,j);
						else if(pos == 1) dodown(i,j);
						else if(pos == 2) doleft(i,j);
						else if(pos == 3) doup(i,j);
					}
					else if(in[i][j] == '#')
					{
						isok[pos][i][j]=1;
					}
				}
			}
		}

		//display();


		int ans = bfs();

		if(ans==INF)
		{
			printf("impossible\n");
		}
		else printf("%d\n",ans);

	}
}

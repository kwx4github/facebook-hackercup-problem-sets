#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <utility>

using namespace std;

template < typename T >
T next() {
    T tmp;
    cin >> tmp;
    return tmp;
}

bool inr(int x, int a, int b) {
    return a <= x && x < b;
}

void solve() {
    int h = next< int >();
    int w = next< int >();
    vector< string > field(h);
    generate(field.begin(), field.end(), next< string >);
    vector< vector< vector < int > > > g(h, vector< vector< int > >(w, vector< int >(4, -1)));
    bool tur[256];
    fill(tur, tur + 256, false);
    tur['<'] = tur['>'] = tur['^'] = tur['v'] = true;
    map< char, int > dir;
    string ds = "<^>v";
    for (int i = 0; i < ds.size(); ++i) {
        dir[ds[i]] = i;
    }
    int d[4][2] = { {0, -1}, {-1, 0}, {0, 1}, {1, 0} };
    pair< int, int > start, fin;

    for (int i = 0; i < h; ++i) {
        for (int j = 0; j < w; ++j) {
            if (field[i][j] == '#') {
                fill(g[i][j].begin(), g[i][j].end(), -2);
            } else if (tur[field[i][j]]) {
                fill(g[i][j].begin(), g[i][j].end(), -2);
                int fs = dir[ field[i][j] ];
                for (int k = 0; k < 4; ++k) {
                    int cdir = (dir[ field[i][j] ] + k) % 4;
                    for (int z = 1;; ++z) {
                        int px = i + d[ cdir ][0] * z;
                        int py = j + d[ cdir ][1] * z;
                        if (inr(px, 0, h) && inr(py, 0, w) && 
                            !(tur[ field[px][py] ] || field[px][py] == '#')) {
                            g[px][py][k] = -2;
                        } else {
                            break;
                        }
                    }
                }
            } else if (field[i][j] == 'S') {
                start = make_pair(i, j);
            } else if (field[i][j] == 'G') {
                fin = make_pair(i, j);
            }
        }
    }
    if (false) {
        for (int k = 0; k < 4; ++k) {
            for (int i = 0; i < h; ++i) {
                for (int j = 0; j < w; ++j) {
                    cout << -g[i][j][k];
                }
                cout << "\n";
            }
            cout << "\n";
        }
    }

    vector< int > qx, qy, qz;
    g[start.first][start.second][0] = 0;
    qx.push_back(start.first);
    qy.push_back(start.second);
    qz.push_back(0);
    for (size_t i = 0; i < qx.size(); ++i) {
        int cx = qx[i];
        int cy = qy[i];
        int cz = qz[i];

        for (int k = 0; k < 4; ++k) {
            int px = cx + d[k][0];
            int py = cy + d[k][1];
            int pz = (cz + 1) % 4;

            if (inr(px, 0, h) && inr(py, 0, w) && g[px][py][pz] == -1) {
                g[px][py][pz] = g[cx][cy][cz] + 1;
                qx.push_back(px); qy.push_back(py); qz.push_back(pz);
            }
        } 
    }
    int res = -1;
    vector< int > & ans = g[fin.first][fin.second];
    for (size_t i = 0; i < ans.size(); ++i) {
        if (ans[i] >= 0) {
            res = res == -1 ? ans[i] : min(ans[i], res);
        }
    }
    if (res == -1) {
        cout << "impossible\n";
    } else {
        cout << res << "\n";
    }


}

int main() {
    int t = next< int >();
    for (int i = 1; i <= t; ++i) {
        cout << "Case #" << i << ": ";
        solve();
    }

    return 0;
}
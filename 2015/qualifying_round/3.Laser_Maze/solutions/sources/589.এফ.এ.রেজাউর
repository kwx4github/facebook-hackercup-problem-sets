/*
AUTHOR : VUAcoder
LANGUAGE : C++
PROBLEM :
*/

#include<iostream>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<sstream>
#include<set>
#include<fstream>
#include<cfloat>
using namespace std;
#define PI (2.*acos(0.))
#define EPS 1e-9
#define ZERO(x)     (fabs(x) < EPS)
#define EQ(a,b)     (ZERO((a)-(b)))
#define LESSER(a,b) (!EQ(a,b) && (a)<(b))
#define GREATER(a,b)(!EQ(a,b) && (a)>(b))
#define GETBIT(x,i) (x&(1<<i))
#define SETBIT(x,i) (x|(1<<i))
#define FORab(i,a,b) for(typeof(b) i=(a);i<=(b);i++)
#define FOR(i,n) FORab(i,0,(n)-1)
#define FOR1(i,n) FORab(i,1,n)
#define FORit(it,a) for( typeof((a).begin()) it=(a).begin();it!=(a).end();it++)
#define all(a) (a).begin(),(a).end()
#define ms(a,b) memset((a),(b),sizeof(a))
#define pb push_back
#define sz(a) (int)a.size()
#define in(a,b,c) ((a) <= (b) && (b) <= (c))
#define px first
#define py second
#define __eXYZ__
#ifdef __eXYZ__
//USE THESE FOR DEBUG
#define RFILE(a)    freopen(a, "r", stdin)
#define WFILE(a)    freopen(a, "w", stdout)
#define _r(arg) {dbg,arg; dbg.start(); }
#define _n(arg...) {_r(#arg " ==> ");dbg,arg; }
#define _(arg...) { _n(arg); dbg.nl(); }
#else
#define RFILE(a)
#define WFILE(a)
#define _n(arg) {}
#define _n(arg...) {}
#define _(arg...) {}
#endif


typedef long long  LL;
typedef vector<int>   vi;
typedef pair<int,int>  pii;

template<class A, class B> ostream &operator<<(ostream& o, pair<A,B>& p) { //pair print
    return o << "("<<p.first<<", "<<p.second<<")";
}

template<class T> ostream& operator<<(ostream& o, const vector<T>& v) { //vector print
    o << "{";FORit(it, v) o << *it << ", "; return o << "}";
}

struct debugger
{
    ostream &out; bool first;
    void start() { first = true; }
    debugger(ostream& out):out(out) {start();}
    void nl() { out << endl; start(); }
    // Taken from rudradevbasak
    template<class T> debugger& operator,(T& v) {
        if(first) first = false; else out << ", ";
        out << v; return *this;
    }
    template<class T> debugger& operator,(pair<T*,int> arr) { //array print
        out << "{";
            FOR(i, arr.second) { out << arr.first[i] << ", "; }
        out << "}";
        return *this;
    }
} dbg(cerr);

/*struct Food{
    int p,c,f;
    bool =operator
}.*/
int vis[4][111][111],n,m;
int bam[4][111][111];
string grid[111];
enum class dir : char {
 RIGHT= '>', DOWN='v', LEFT='<',UP='^'
 };
enum dirC{
    RIGHT, DOWN, LEFT, UP
};
bool check(int x, int y){
    return (!(x>=n || y>=m || x<0 || y<0 || grid[x][y]=='^' || grid[x][y]=='<'||grid[x][y]=='>' ||grid[x][y]=='v' || grid[x][y]=='#'));
}
void makeGrid(int id, int x, int y, int dr, int dc){
    x+=dr; y+=dc;
    while(check(x,y)){
        bam[id][x][y]=1;
        x+=dr; y+=dc;
    }
}
enum Color { RED, GREEN, BLUE};
int main()
{
    RFILE("input.txt");
    WFILE("hcq_op3.txt");
    int t,cn=1;
    cin>>t;
    while(t--){
        ms(vis,0);
        ms(bam,0);
        cin>>n>>m;

        FOR(i,n){
            cin>>grid[i];
        }
        int dr[]={0,1,0,-1};
        int dc[]={1,0,-1,0};
        pii src,dst;
        FOR(i,n){
            FOR(j,m){
                if(grid[i][j]=='S'){
                    src=pii(i,j);
                }
                if(grid[i][j]=='G'){
                    dst=pii(i,j);
                }


                if(grid[i][j]=='>'){
                    FOR(_,4){
                        makeGrid(_, i, j, dr[_], dc[_]);
                    }
                }else if(grid[i][j]=='v'){
                    FOR(_,4){
                        makeGrid(_, i, j, dr[(_+1)%4], dc[(_+1)%4]);
                    }
                }else if(grid[i][j]=='<'){
                    FOR(_,4){
                        makeGrid(_, i, j, dr[(_+2)%4], dc[(_+2)%4]);
                    }
                }else if(grid[i][j]=='^'){
                    FOR(_,4){
                        makeGrid(_, i, j, dr[(_+3)%4], dc[(_+3)%4]);
                    }
                }

            }
        }
       /* FOR(i,4){
            FOR(j,n){FOR(k,m){
                cout<<bam[i][j][k];
            }
            cout<<endl;
            }
            cout<<endl<<endl;
        }*/
        queue<pii>q;
        q.push(src);
        vis[0][src.px][src.py]=1;
        int level=0;
        bool ok=true;
        while(!q.empty()){
            if(!ok){
                break;
            }
            level++;
            int S=sz(q);
            FOR(i,S){
                pii now=q.front();
                q.pop();
                if(now==dst){
                    ok=false;
                    break;
                }
                FOR(_,4){
                    if(check(now.px+dr[_],now.py+dc[_]) &&
                    vis[level%4][now.px+dr[_]][now.py+dc[_]]==0 &&
                    bam[level%4][now.px+dr[_]][now.py+dc[_]]==0){
                        vis[level%4][now.px+dr[_]][now.py+dc[_]]=1;
                        q.push(pii(now.px+dr[_], now.py+dc[_]));
                    }
                }
            }

        }

        if(!ok)cout<<"Case #"<<cn++<<": "<<level-1<<endl;
        else cout<<"Case #"<<cn++<<": impossible"<<endl;
    }
    return 0;
}

#include<iostream>
#include<cassert>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<cstdio>
#include<string>
#include<vector>
#include<cstdlib>
#include<iterator>
#include<ctime>
#include<map>
#include<sstream>
#include<set>
//#include <unordered_set>
#include<cctype>
#include<limits>
#include<climits>
#include<queue>
#include<cmath>
#include <memory.h>

//#pragma comment(linker, "/STACK:36777216")
using namespace std;

#define all(c) (c).begin(), (c).end()

template<typename T> inline string intToString(T x){ostringstream q;q << x;return q.str();}
inline int stringToInt(string str){	istringstream in(str);	int res;	in >> res;	return res;}
template<typename T> inline T myPow(T x, T n, T MOD){T res = 1;while (n>0) {if (n & 1) {res = 1ll*res * x % MOD;}x = 1ll*x * x % MOD;n/=2;}return res;}
template<typename T> inline T gcd(T a, T b){a=abs(a);b=abs(b);while ((a>0) && (b>0)) {if (a>b)a%=b;else b%=a;}return a+b;}
inline int getRand() { long long q = 1ll*rand()*RAND_MAX+rand(); return q % INT_MAX; }
inline int myabs(int x) {
	if (x<0) x = -x;
	return x;
}

typedef long long LLong;
typedef long double LDb;

#define x1 awefawefawef
#define y1 awefaefwefawef
#define x2 aawefwefawefawef
#define y2 awefafewefawef


char a[111][111];
int n,m;
int x1,y1,x2,y2;
int res;
bool used[111][111][5];

struct pos
{
	int x,y,d;
	pos(int x, int y, int z) : x(x), y(y), d(z) {}
};

char getDir(char c, int d)
{
	d = d%4;
	for (int i = 0; i < d; ++i) {
		if (c=='v') c = '<';
		else if (c=='<') c = '^';
		else if (c=='^') c = '>';
		else if (c=='>') c = 'v';
	}
	return c;
}

bool blockChar(char c)
{
	return (c=='#' || c=='v' || c=='^'
		|| c=='<' || c=='>');
}

bool overBound(int x, int y)
{
	return (x<0 || x>=n || y<0 || y>=m);
}
queue<pos> q;
void rec(int x, int y, int d) 
{
	if (overBound(x,y) || blockChar(a[x][y]))
		return;
	if (used[x][y][d%4]) {
		return;
	}
	if (x==x2 && y==y2) {
		res = d;
	}
	for (int i = -1; i <= 1; ++i) {
		for (int j = -1; j <= 1; ++j) {
			if (myabs(i+j)==1) {
				for (int k = 0; ; ++k) {
					if (overBound(x+i*k,y+j*k) || a[x+i*k][y+j*k]=='#')
						break;
					char ch = a[x+i*k][y+j*k];
					if (blockChar(ch)) {
						char newCh = getDir(ch, d);
						if (i==-1 && newCh=='v')
							return;
						if (i==1 && newCh=='^')
							return;
						if (j==-1 && newCh=='>')
							return;
						if (j==1 && newCh=='<')
							return;
						break;
					}
				}
			}
		}
	}
	used[x][y][d%4]=true;
	if (x==x2 && y==y2) {
		res = d;
	}
	q.push(pos(x,y,d));
}

int main()
{
#ifdef m0stik
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#else
	//freopen("input.txt","r",stdin);freopen("billing.out","w",stdout);
#endif
	int tests;
	cin >> tests;
	for (int it = 0; it < tests; ++it) {
		printf("Case #%d: ", it+1);
		memset(used, 0, sizeof used);
		scanf("%d%d\n", &n, &m);
		for (int i = 0; i < n; ++i) {
			scanf("%s\n", a[i]);
			for (int j = 0; j < m; ++j) {
				if (a[i][j] == 'S') {
					x1 = i;
					y1 = j;
				}
				if (a[i][j] == 'G') {
					x2 = i;
					y2 = j;
				}
			}
		}
		res = 0;
		q.push(pos(x1,y1,0));
		while (!q.empty()) {
			if (res!=0) {
				q.pop();
				continue;
			}
			int x = q.front().x;
			int y = q.front().y;
			int d = q.front().d;
			rec(x+1,y,d+1);
			rec(x-1,y,d+1);
			rec(x,y+1,d+1);
			rec(x,y-1,d+1);
			q.pop();
		}
		if (res==0) {
			cout << "impossible" << endl;
		}
		else {
			cout << res << endl;
		}
	}
	return 0;
} 
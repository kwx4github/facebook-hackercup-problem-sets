#include<bits/stdc++.h>

using namespace std;
typedef array<int, 3> T;
#define INF (1<<30)

char rotate(char c, int p){
	if(p == 0)return c;
	c = rotate(c, p - 1);
	switch(c){
		case '^': return '>';
		case '>': return 'v';
		case 'v': return '<';
		case '<': return '^';
	}
	return c;
}

int xs[] = {0, 1, 0, -1};
int ys[] = {1, 0, -1, 0};
int si, sj;
char wall[4][108][108];
char maze[4][108][108];
int dist[4][108][108];
int n, m;
char c;

int solve(){
	memset(wall, 0, sizeof(wall));
	cin >> n >> m;
	for(int i = 0;i < n;i++){
		for(int j = 0;j < m;j++){
			cin >> c;
			if(c == 'S'){
				si = i;
				sj = j;
			}
			for(int k = 0;k < 4;k++){
				maze[k][i][j] = rotate(c, k);
			}
		}
	}
	for(int k = 0;k < 4;k++){
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				int t = 4;
				if(maze[k][i][j] == '^')t = 3;
				if(maze[k][i][j] == '>')t = 0;
				if(maze[k][i][j] == 'v')t = 1;
				if(maze[k][i][j] == '<')t = 2;
				if(t == 4)continue;
				int ti = i + xs[t], tj = j + ys[t];
				while(0 <= ti && ti < n && 0 <= tj && tj < m){
					if(maze[k][ti][tj] != '.' && maze[k][ti][tj] != 'S' && maze[k][ti][tj] != 'G')break;
					wall[k][ti][tj] = '#';
					ti += xs[t];
					tj += ys[t];
				}
			}
		}
	}
	for(int k = 0;k < 4;k++){
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				if(wall[k][i][j] == '#'){
					maze[k][i][j] = '#';
				}
			}
		}
	}
	queue<T> q;
	for(int k = 0;k < 4;k++)
		for(int i = 0;i < n;i++)
			for(int j = 0;j < m;j++)
				dist[k][i][j] = INF;
	dist[0][si][sj] = 0;
	q.push({0,si,sj});
	while(!q.empty()){
		T tmp = q.front();q.pop();
		int k = tmp[0], i = tmp[1], j = tmp[2];
		if(maze[k][i][j] == 'G'){
			return dist[k][i][j];
		}
		for(int s = 0;s < 4;s++){
			int ti = i + xs[s];
			int tj = j + ys[s];
			int tk = (k+1)%4;
			if(ti < 0 || ti >= n || tj < 0 || tj >= m)continue;
			if(dist[tk][ti][tj] != INF)continue;
			if(maze[tk][ti][tj] == 'S' || maze[tk][ti][tj] == '.' || maze[tk][ti][tj] == 'G'){
				dist[tk][ti][tj] = dist[k][i][j] + 1;
				q.push({tk, ti, tj});
			}
		}
	}          
	return -1;
}

int main(){
	int t;
	cin >> t;
	for(int i = 1;i <= t;i++){
		int x = solve();
		if(x == -1)
			cout << "Case #" << i << ": " << "impossible" << endl;
		else
			cout << "Case #" << i << ": " << x << endl;
	}
	return 0;
}
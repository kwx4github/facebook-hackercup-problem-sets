#include <bits/stdc++.h>

#define rep(i,n) for(int i=0; i<n; i++)
#define repa(i,a,b,d) for(int i=a; i<=b; i+=d)
#define repd(i,a,b,d) for(int i=a; i>=b; i-=d)
#define repi(it,stl) for(auto it = (stl).begin(); (it)!=stl.end(); ++(it))
#define sz(a) ((int)(a).size())
#define mem(a,n) memset((a), (n), sizeof(a))
#define all(n) (n).begin(),(n).end()
#define rall(n) (n).rbegin(),(n).rend()
#define mt make_tuple
#define tii tuple<int,int>
#define at(t,idx) std::get<(idx)>((t))
#define vi vector<int>
#define vs vector<string>
#define sstr stringstream
#define indexof(v,x) (find(all((v)),(x))-(v).begin())

typedef long long ll;
using namespace std;

string towers="^>v<";
char g[102][102];
vector<tuple<int,int,int> > lasers;
bool vis[102][102][4];
int di[]= {-1,0,1,0};
int dj[]= {0,1,0,-1};
int h,w;
inline tii next(tii st, int dir)
{
     return mt(at(st,0)+di[dir] , at(st,1) + dj[dir]);
}
inline bool canstand(tii st)
{
     int i = at(st,0), j = at(st,1);
     return i >= 0 && i < h && j >= 0 && j < w && g[i][j] != '#' && indexof(towers,g[i][j])==towers.size();
}
bool isdead(tii st, int added_dir)
{
     rep(i,sz(lasers)) {
          int new_dir = (added_dir + at(lasers[i],2))%4;
          tii laser = mt(at(lasers[i],0),at(lasers[i],1));
          laser = next(laser,new_dir);
          while (canstand(laser)) {
               if (laser == st) return 1;
               laser = next(laser,new_dir);
          }
     }
     return 0;
}
int BFS(tii st, tii goal)
{
     mem(vis,0);
     queue<tii> q;
     q.push(st);
     vis[at(st,0)][at(st,1)][0] = 1;
     int res=0;
     while (q.size()) {
          int siz = q.size();
          while (siz--) {
               st = q.front();
               q.pop();
               if (st == goal) return res;

               rep(d,4) {
                    tii nxt = mt(at(st,0)+di[d], at(st,1)+dj[d]);
                    int added_laser_dir = (res+1)%4;
                    if (!canstand(nxt) || vis[at(nxt,0)][at(nxt,1)][added_laser_dir]) continue;
                    if (isdead(nxt, added_laser_dir)) continue;

                    vis[at(nxt,0)][at(nxt,1)][added_laser_dir] = 1;
                    q.push(nxt);
               }
          }
          ++res;
     }
     return -1;

}
int main()
{
     ios_base::sync_with_stdio(0);
     cin.tie(0);
#ifndef ONLINE_JUDGE
     freopen("main.txt", "rt", stdin);
     freopen("out.txt", "wt", stdout);
#endif

     char mapp[300]= {0};
     rep(i,sz(towers)) mapp[towers[i]] = i;

     int tst;
     scanf("%d",&tst);
     repa(tt,1,tst,1) {
          lasers.clear();
          tii st,goal;
          scanf("%d%d",&h,&w);
          rep(i,h) {
               scanf("%s",g[i]);
               rep(j,w) {
                    if (g[i][j]=='S')
                         st = mt(i,j);
                    else if (g[i][j] == 'G')
                         goal = mt(i,j);
                    else if (g[i][j] != '.' && g[i][j] !='#') {
                         lasers.emplace_back(i,j,mapp[g[i][j]]);
                    }
               }
          }
          int res = BFS(st,goal);
          printf("Case #%d: ",tt);
          if (res == -1) printf("impossible\n");
          else printf("%d\n",res);
     }

     return 0;
}

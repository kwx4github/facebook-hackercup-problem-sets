#include <cstdio>
#include <queue>

using namespace std;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
int dd[256];

class pos{
      public:
      int x, y, z;
      pos(int _x = 0, int _y = 0, int _z = 0) : x(_x), y(_y), z(_z){}
};

int m, n;
char in[105][105];
pos start, end;
int dis[105][105][5];

bool acc[105][105][5];

void runBad(int x, int y, int d, int k){
     while (x >= 0 && y >= 0 && x < m && y < n && in[x][y] == '.'){
           acc[x][y][k] = false;
           x += dx[d];
           y += dy[d];
     }
}

void remBad(int x, int y, int d){
     for (int i = 0; i < 4; ++i)
     runBad(x + dx[(d + i) & 3], y + dy[(d + i) & 3], d, i);
}

int bfs(pos start, pos end){
    static queue < pos > Q;
    while (!Q.empty()) Q.pop();
    dis[start.x][start.y][start.z] = 1;
    Q.push(start);
    while (!Q.empty()){
          pos cr = Q.front(); Q.pop();
          //printf("%d %d %d\n", cr.x, cr.y, cr.z);
          if (cr.x == end.x && cr.y == end.y) return dis[cr.x][cr.y][cr.z] - 1;
          for (int i = 0; i < 4; ++i){
              pos nxt(cr.x + dx[i], cr.y + dy[i], (cr.z + 1) & 3);
              if (nxt.x < 0 || nxt.y < 0 || nxt.x >= m || nxt.y >= n || !acc[nxt.x][nxt.y][nxt.z]) continue;
              if (dis[nxt.x][nxt.y][nxt.z]) continue;
              dis[nxt.x][nxt.y][nxt.z] = dis[cr.x][cr.y][cr.z] + 1;
              Q.push(nxt);
          }
    }
    return -1;
}

int main(){
    dd['^'] = 1;
    dd['>'] = 2;
    dd['v'] = 3;
    dd['<'] = 4;
    int t; scanf("%d", &t);
    for (int tt = 1; tt <= t; ++tt){
        scanf("%d%d", &m, &n);
        for (int i = 0; i < m; ++i) scanf("%s", in[i]);
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        for (int k = 0; k < 4; ++k)
        acc[i][j][k] = true;
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        for (int k = 0; k < 4; ++k)
        dis[i][j][k] = 0;
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        if (in[i][j] != '.' && in[i][j] != 'S' && in[i][j] != 'G')
        for (int k = 0; k < 4; ++k)
        acc[i][j][k] = false;
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        if (in[i][j] == 'S'){start.x = i; start.y = j; in[i][j] = '.';}
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        if (in[i][j] == 'G'){end.x = i; end.y = j; in[i][j] = '.';}
        for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
        if (dd[in[i][j]]) remBad(i, j, dd[in[i][j]] - 1);
        
        /*
        for (int k = 0; k < 4; ++k){
        for (int i = 0; i < m; ++i){
        for (int j = 0; j < n; ++j)
        printf("%d ", (int)acc[i][j][k]); printf("\n");
        } printf("\n");
        }
        */
        
        int r = bfs(start, end);
        printf("Case #%d: ", tt);
        if (r == -1) printf("impossible\n"); else printf("%d\n", r);
    }
    return 0;
}

from collections import deque
d={">":0,"v":1,"<":2,"^":3}
dir=[(0,1),(1,0),(0,-1),(-1,0)]
def solve(maze):
    visited=set()
    s=(0,0)
    dang=[]
    for _ in range(4):
        maz=[]
        for _ in range(len(maze)):
            maz.append([0]*len(maze[0]))
        dang.append(maz)
    for i in range(len(maze)):
        for j in range(len(maze[0])):
            if maze[i][j]=="S":
                s=(i,j)
            if maze[i][j] in [">","v","<","^"]:
                st=d[maze[i][j]]
                c=-1
                for k in range(st,st+4):
                    k%=4
                    c+=1
                    px,py=i,j
                    while True:
                        if px+dir[k][0]>=0 and px+dir[k][0]<len(maze) and py+dir[k][1]>=0 and py+dir[k][1]<len(maze[0]):
                            px,py=px+dir[k][0],py+dir[k][1]
                            if maze[px][py]=="." or maze[px][py]=="S" or maze[px][py]=="G":
                                dang[c][px][py]="X"
                            else:
                                break
                        else:
                            break
    q=deque()
    q.append((s,0))
    while len(q)>0:
        p,s=q.popleft()
        if (p,s%4) in visited:
            continue
        visited.add((p,s%4))
        px,py=p[0],p[1]
        for dirc in dir:
            if px+dirc[0]>=0 and px+dirc[0]<len(maze) and py+dirc[1]>=0 and py+dirc[1]<len(maze[0]):
                if dang[(s+1)%4][px+dirc[0]][py+dirc[1]]!="X":
                    if maze[px+dirc[0]][py+dirc[1]]=="G":
                        return s+1
                    elif maze[px+dirc[0]][py+dirc[1]]=="." or maze[px+dirc[0]][py+dirc[1]]=="S":
                        q.append([(px+dirc[0],py+dirc[1]),s+1])
    return "impossible"
                    
        
fin=open('../in','r') ; fout=open('../out','w')
cases=int(fin.readline().strip())
for case in range(1,cases+1):
    print case
    n,m=[int(x) for x in fin.readline().strip().split(' ')]
    maze=[]
    for i in range(n):
        maze.append(fin.readline().strip())
    fout.write("Case #"+str(case)+": "+str(solve(maze))+"\n")
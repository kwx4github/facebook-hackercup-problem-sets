#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef vector<int> VI;

#define clr(a,b)    (memset(a,b,sizeof(a)))
#define PB push_back
#define MP make_pair
#define rep(i,a)    for(int i=0; i<(int)a.size(); i++)

const int INF = 0x3f3f3f3f;
const double eps = 1E-8;

int T;
int n,m;
char g[4][111][111];
int gg[4][111][111];
map<char, char> mp;
int stx,sty,edx,edy;

struct node{
	int l,x,y,step;
	node(){}
	node(int tl,int tx,int ty,int tstep){
		l = tl;
		x = tx;
		y = ty;
		step = tstep;
	}
};

queue<node> q;
int dx[4] = {0,1,0,-1};
int dy[4] = {-1,0,1,0};

bool valid(int l,int x,int y){
	if(x <= 0 || x > n || y <= 0 || y > m)
		return false;

	if(g[l][x][y] == '#')
		return false;

	if(gg[l][x][y] != -1)
		return false;

	return true;
}

int bfs()
{
	int ans = -1;
	clr(gg, -1);
	g[0][stx][sty] = 0;

	node start = node(0, stx, sty, 0);
	q.push(start);

	while(!q.empty()){
		node h = q.front();
		q.pop();

		// reach
		if(h.x == edx && h.y == edy)
		{
			ans = h.step;
			break;
		}

		int next_l = (h.l + 1) % 4;
		for(int i=0; i<4; i++)
		{
			int xx = h.x + dx[i];
			int yy = h.y + dy[i];
			if(valid(next_l, xx, yy) == true)
			{
				gg[next_l][xx][yy] = h.step + 1;
				node t = node(next_l, xx, yy, h.step + 1);
				q.push(t);
			}
		}
	}

	while(!q.empty())
		q.pop();
	return ans;
}

int main()
{
    freopen("laser_maze.txt","r", stdin);
    freopen("out","w",stdout);
    int cas = 1;
    scanf("%d",&T);
    mp.clear();
    mp['<'] = '^';
    mp['^'] = '>';
    mp['>'] = 'v';
    mp['v'] = '<';

    while(T--)
    {
        scanf("%d%d",&n, &m);
        for(int i=1; i<=n; i++)
            scanf("%s",g[0][i]+1);
        for(int i=1; i<=n; i++)
            for(int j=1; j<=m; j++)
            {
                char ch = g[0][i][j];
                if(ch == 'S')
                {
                    stx = i;
                    sty = j;
                }
                if(ch == 'G')
                {
                    edx = i;
                    edy = j;
                }
                if(mp.find(ch) == mp.end())
                {
                    for(int k=1; k<=3; k++)
                        g[k][i][j] = ch;
                }
                else
                {
                    for(int k=1; k<=3; k++)
                        g[k][i][j] = mp[g[k-1][i][j]];
                }
            }
        for(int k=0; k<4; k++)
        {
            for(int i=1; i<=n; i++)
            {
                for(int j=1; j<=m; j++)
                {
                    char ch = g[k][i][j];
                    if(ch == '<')
                    {
                        g[k][i][j] = '#';
                        for(int p=j-1; p>=1; p--)
                            if(g[k][i][p] == '.' || g[k][i][p] == 'S' || g[k][i][p] == 'G')
                                g[k][i][p] = '#';
                            else
                                break;
                    }
                    if(ch == '>')
                    {
                        g[k][i][j] = '#';
                        for(int p=j+1; p<=m; p++)
                            if(g[k][i][p] == '.' || g[k][i][p] == 'S' || g[k][i][p] == 'G')
                                g[k][i][p] = '#';
                            else
                                break;
                    }
                    if(ch == '^')
                    {
                        g[k][i][j] = '#';
                        for(int p=i-1; p>=1; p--)
                            if(g[k][p][j] == '.' || g[k][p][j] == 'S' || g[k][p][j] == 'G')
                                g[k][p][j] = '#';
                            else
                                break;
                    }
                    if(ch == 'v')
                    {
                        g[k][i][j] = '#';
                        for(int p=i+1; p<=n; p++)
                            if(g[k][p][j] == '.' || g[k][p][j] == 'S' || g[k][p][j] == 'G')
                                g[k][p][j] = '#';
                            else
                                break;
                    }
                }
            }
        }


		int ans = bfs();
		if(ans != -1)
			printf("Case #%d: %d\n",cas++, ans);
		else
			printf("Case #%d: impossible\n",cas++);
    }
    return 0;
}

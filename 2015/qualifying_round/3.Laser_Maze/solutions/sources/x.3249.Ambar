#include <bits/stdc++.h>
using namespace std;

#define display(arr,s,e) for(unsigned long long i=s; i<=e; i++) cout<<arr[i]<<" ";
#define rep(i,s,e) for (i=s; i<=e; i++)
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ri(x) scanf("%d",&x)
#define ri2(x,y) scanf("%d%d",&x,&y)
#define rll(x) scanf("%lld",&x)
#define rll2(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define mset(arr,x) memset(arr,x,sizeof(arr))
#define md 1000000007
#define mp make_pair

struct cell{
	char c;
	int dir[4];
	cell(){dir[0]=dir[1]=dir[2]=dir[3]=0;}
};
inline ll hash(int i, int j, int t){ return i*10000 + j*10 + t%4; }
int main()
{
	ios_base::sync_with_stdio(false);
	ll t,test; cin>>test;
	rep (t,0,test-1){
		cell m[110][110];
		ll M,N,i,j,k,s[2],e[2]; cin>>M>>N;
		rep (i,0,M+1) m[i][0].c = m[i][N+1].c = '#';
		rep (j,0,N+1) m[0][j].c = m[M+1][j].c = '#';
		rep (i,1,M){
			rep (j,1,N){
				cin>>m[i][j].c;
				if (m[i][j].c == 'S') {s[0]=i; s[1]=j; m[i][j].c='.';}
				else if (m[i][j].c == 'G') {e[0]=i; e[1]=j; m[i][j].c='.';}
			}
		}
		rep (i,1,M){
			int active = -1;
			rep (j,1,N){
				if (active >=0 && m[i][j].c == '.') m[i][j].dir[active] = 1;
				else if (m[i][j].c == '>') active = 0;
				else if (m[i][j].c == '^') active = 1;
				else if (m[i][j].c == '<') active = 2;
				else if (m[i][j].c == 'v') active = 3;
				else active = -1;
			}
			active = -1;
			for (j=N;j>=1;j--){
				if (active >=0 && m[i][j].c == '.') m[i][j].dir[active] = 1;
				else if (m[i][j].c == '>') active = 2;
				else if (m[i][j].c == '^') active = 3;
				else if (m[i][j].c == '<') active = 0;
				else if (m[i][j].c == 'v') active = 1;
				else active = -1;
			}
		}
		rep (j,1,N){
			int active = -1;
			rep (i,1,M){
				if (active >=0 && m[i][j].c == '.') m[i][j].dir[active] = 1;
				else if (m[i][j].c == '>') active = 1;
				else if (m[i][j].c == '^') active = 2;
				else if (m[i][j].c == '<') active = 3;
				else if (m[i][j].c == 'v') active = 0;
				else active = -1;
			}
			active = -1;
			for (i=M;i>=1;i--){
				if (active >=0 && m[i][j].c == '.') m[i][j].dir[active] = 1;
				else if (m[i][j].c == '>') active = 3;
				else if (m[i][j].c == '^') active = 0;
				else if (m[i][j].c == '<') active = 1;
				else if (m[i][j].c == 'v') active = 2;
				else active = -1;
			}
		}
//		rep (i,0,M+1){ rep (j,0,N+1) cout<<m[i][j].c; cout<<endl; } cout<<endl;
//		rep (k,0,3) { cout<<k<<":"<<endl; rep (i,0,M+1){ rep (j,0,N+1) cout<<m[i][j].dir[k]; cout<<"\n"; } cout<<endl;}

		queue < ll > q;
		set < ll > vis;
		map <ll, int> h;
		ll s0 = hash(s[0],s[1],0);
		h[s0] = 0;
		q.push(s0); vis.insert(s0);
		ll found = false, res;
		while (!q.empty()){
			ll head = q.front(); q.pop();
			ll hgt = h[head];
//			cout<<head<<endl;
			ll a = head / 10000, b = (head / 10 ) % 1000, c = head % 10;
			if (a == e[0] && b == e[1]){ res = hgt; found = true; break; }
			ll s1 = hash(a+1,b,c+1), s2 = hash(a-1,b,c+1), s3 = hash(a,b+1,c+1), s4 = hash(a,b-1,c+1);
			if (vis.count(s1) == 0 && m[a+1][b].c!='#' && m[a+1][b].dir[(c+1)%4]!=1) { q.push(s1); vis.insert(s1); h[s1] = hgt + 1;}
			if (vis.count(s2) == 0 && m[a-1][b].c!='#' && m[a-1][b].dir[(c+1)%4]!=1) { q.push(s2); vis.insert(s2); h[s2] = hgt + 1;}
			if (vis.count(s3) == 0 && m[a][b+1].c!='#' && m[a][b+1].dir[(c+1)%4]!=1) { q.push(s3); vis.insert(s3); h[s3] = hgt + 1;}
			if (vis.count(s4) == 0 && m[a][b-1].c!='#' && m[a][b-1].dir[(c+1)%4]!=1) { q.push(s4); vis.insert(s4); h[s4] = hgt + 1;}
//			cout<<a<<" "<<b<<" "<<c<<" "<<res<<endl;
		}
		cout<<"Case #"<<t+1<<": ";
		if (found) cout<<res<<endl;
		else cout<<"impossible"<<endl;
	}
	return 0;
}

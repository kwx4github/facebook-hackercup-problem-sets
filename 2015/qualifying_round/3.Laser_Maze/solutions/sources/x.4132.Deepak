#include<bits/stdc++.h>
using namespace std;

int m,n;
char a[101][101];
bool check[4][101][101];
struct node
{
	int state,i,j,steps;
	node(int s,int x_, int y_, int value_) : state(s), i(x_), j(y_), steps(value_) {}
	node() : state(0), i(0), j(0), steps(0) {}
	} start,end,v;
bool visited[4][101][101];

inline void pushToQueue(queue<node> q, node v) {
if (visited[v.state][v.i][v.j]) return;
cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<" "<<q.empty()<<endl;
q.push(v);
cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<" "<<q.empty()<<endl;
visited[v.state][v.i][v.j] = true;
}

int dist()
{
	queue<node> q;
	//pushToQueue(q, start);
	if (visited[start.state][start.i][start.j]==false)
	{//cout<<"visited "<<start.state<<" "<<start.i<<" "<<start.j<<" "<<start.steps<<endl;
	q.push(start);
	visited[start.state][start.i][start.j] = true;}
	//cout<<"start_i: "<<start.i<<" start_j: "<<start.j<<" "<<q.empty()<<endl;
	//cout<<"start_i: "<<end.i<<" start_j: "<<end.j<<" "<<q.empty()<<endl;
	while (q.empty()==false) {
	node top = q.front();
	q.pop();
	//cout<<top.state<<" "<<top.i<<" "<<top.j<<" "<<top.steps<<endl;
	if (top.i == end.i && top.j == end.j)
	return top.steps;
	if(top.i + 1 < m && check[(top.state+1)%4][top.i+1][top.j]==false)
	{
		//pushToQueue(q, node((top.state+1)%4,top.i+1,top.j,top.steps+1));
		v=node((top.state+1)%4,top.i+1,top.j,top.steps+1);
		if (visited[v.state][v.i][v.j]==false)
		{//cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<endl;
		q.push(v);
		visited[v.state][v.i][v.j] = true;}
		}
	if(top.j + 1 < n && check[(top.state+1)%4][top.i][top.j+1]==false)
	{
		//pushToQueue(q, node((top.state+1)%4,top.i,top.j+1,top.steps+1));
		v=node((top.state+1)%4,top.i,top.j+1,top.steps+1);
		if (visited[v.state][v.i][v.j]==false)
		{//cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<endl;
		q.push(v);
		visited[v.state][v.i][v.j] = true;}
		}
	if(top.i - 1 >= 0 && check[(top.state+1)%4][top.i-1][top.j]==false)
	{
		//pushToQueue(q, node((top.state+1)%4,top.i-1,top.j,top.steps+1));
		v=node((top.state+1)%4,top.i-1,top.j,top.steps+1);
		if (visited[v.state][v.i][v.j]==false)
		{//cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<endl;
		q.push(v);
		visited[v.state][v.i][v.j] = true;}
		}
	if(top.j - 1 >= 0 && check[(top.state+1)%4][top.i][top.j-1]==false)
	{
		//pushToQueue(q, node((top.state+1)%4,top.i,top.j-1,top.steps+1));
		v=node((top.state+1)%4,top.i,top.j-1,top.steps+1);
		if (visited[v.state][v.i][v.j]==false)
		{//cout<<"visited "<<v.state<<" "<<v.i<<" "<<v.j<<" "<<v.steps<<endl;
		q.push(v);
		visited[v.state][v.i][v.j] = true;}
		}
	}
return -1;
}

int res(int i,int j,char ch)
{
	switch(ch)
	{
		case('^'):return 0;
		case('>'):return 1;
		case('v'):return 2;
		case('<'):return 3;
		}
	return 0;
	}

void val(int state,int i,int j,int ch)
{
	a[i][j]=true;
	switch(ch)
	{
		case(0):
		{
			for(int p=i-1;p>=0;p--)
			{
				if(a[p][j]=='#' || a[p][j]=='^' || a[p][j]=='>' || a[p][j]=='v' || a[p][j]=='<')
				break;
				else
				check[state][p][j]=true;
				}
			break;
			}
		case(1):
		{
			for(int p=j+1;p<n;p++)
			{
				if(a[i][p]=='#' || a[i][p]=='^' || a[i][p]=='>' || a[i][p]=='v' || a[i][p]=='<')
				break;
				else
				check[state][i][p]=true;
				}
			break;
			}
		case(2):
		{
			for(int p=i+1;p<m;p++)
			{
				if(a[p][j]=='#' || a[p][j]=='^' || a[p][j]=='>' || a[p][j]=='v' || a[p][j]=='<')
				break;
				else
				check[state][p][j]=true;
				}
			break;
			}
		case(3):
		{
			for(int p=j-1;p>=0;p--)
			{
				if(a[i][p]=='#' || a[i][p]=='^' || a[i][p]=='>' || a[i][p]=='v' || a[i][p]=='<')
				break;
				else
				check[state][i][p]=true;
				}
			break;
			}
		}
		return;
	}

int main() {
	int t;
	scanf("%d",&t);
	for(int k=0;k<t;k++)
	{
		memset(check,0,sizeof(check));
		memset(visited,0,sizeof(visited));
		scanf("%d%d",&m,&n);
		for(int i=0;i<m;i++)
		scanf("%s",a[i]);
		for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
		{
			if(a[i][j]=='.')
			continue;
			else if(a[i][j]=='#')
			{for(int p=0;p<4;p++) check[p][i][j]=true;}
			else if(a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v' || a[i][j]=='<')
			{
				for(int p=0,s=res(i,j,a[i][j]);p<4;p++)
				{val(p,i,j,s);s=(s+1)%4;}
			}
			else if(a[i][j]=='S')
			{
				start.i=i;start.j=j;//cout<<"start_i: "<<start.i<<" start_j: "<<start.j<<endl;
				}
			else if(a[i][j]=='G')
			{
				end.i=i;end.j=j;//cout<<"end_i: "<<end.i<<" end_j: "<<end.j<<endl;
				}
			}
		int d=dist();
		if(d!=-1)printf("Case #%d: %d\n",k+1,d);
		else printf("Case #%d: impossible\n",k+1);
		}
	return 0;
}

#include <iostream>
#include <set>
#include <cstdio>
#include <vector>
#include <queue>
#include <string>

using namespace std;

// down, right, left, up
int dx[] = {1, 0, 0, -1};
int dy[] = {0, 1, -1, 0};

struct State {
  pair<int, int> coord;
  int step;
  State() {};
  State(int x, int y, int n) : step(n) {
    coord = make_pair(x, y);
  };
  bool operator<(const State& rhs) const {
    return coord < rhs.coord || (coord == rhs.coord && (step % 4) < (rhs.step % 4));
  };
};

int main() {
  int tc;
  scanf("%d", &tc);
  for(int t = 1; t <= tc; t++) {
    int m, n;
    scanf("%d %d", &m, &n);
    string line;
    getline(cin, line);
    vector<string> board;
    int sx, sy, ex, ey;
    for(int i = 0; i < m; i++) {
      getline(cin, line);
      for(int j = 0; j < n; j++) {
	if(line[j] == 'S') {
	  sx = i;
	  sy = j;
	}
	if(line[j] == 'G') {
	  ex = i;
	  ey = j;
	}
      }
      board.push_back(line);
    }
    State start(sx, sy, 0);
    queue<State> q;
    set<State> s;
    s.insert(start);
    q.push(start);
    int steps = -1;
    while(!q.empty()) {
      State next = q.front();
      q.pop();
      int currentx = next.coord.first;
      int currenty = next.coord.second;
      int currents = next.step;
      if(currents != 0) {
      // check laser
	bool dead = false;
	for(int j = currenty + 1; j < board.front().length(); j++) {
	  char currentc = board[currentx][j];
	  if(currentc == '#')
	    break;
	  if(currentc == '<') {
	    dead = (currents % 4 == 0);
	  }
	  if(currentc == '>') {
	    dead = (currents % 4 == 2);
	  }
	  if(currentc == '^') {
	    dead = (currents % 4 == 3);
	  }
	  if(currentc == 'v') {
	    dead = (currents % 4 == 1);
	  }
	  if(dead)
	    break;
	}
	if(dead)
	  continue;
	for(int j = currenty - 1; j > -1; j--) {
	  char currentc = board[currentx][j];
	  if(currentc == '#')
	    break;
	  if(currentc == '<') {
	    dead = (currents % 4 == 2);
	  }
	  if(currentc == '>') {
	    dead = (currents % 4 == 0);
	  }
	  if(currentc == '^') {
	    dead = (currents % 4 == 1);
	  }
	  if(currentc == 'v') {
	    dead = (currents % 4 == 3);
	}
	  if(dead)
	    break;
	}
	if(dead)
	  continue;
	for(int i = currentx - 1; i > -1; i--) {
	  char currentc = board[i][currenty];
	  if(currentc == '#')
	    break;
	  if(currentc == '<') {
	    dead = (currents % 4 == 3);
	  }
	  if(currentc == '>') {
	    dead = (currents % 4 == 1);
	  }
	  if(currentc == '^') {
	    dead = (currents % 4 == 2);
	  }
	  if(currentc == 'v') {
	    dead = (currents % 4 == 0);
	  }
	  if(dead)
	    break;
	}
	if(dead)
	  continue;
	for(int i = currentx + 1; i < board.size(); i++) {
	  char currentc = board[i][currenty];
	  if(currentc == '#')
	    break;
	  if(currentc == '<') {
	    dead = (currents % 4 == 1);
	  }
	  if(currentc == '>') {
	    dead = (currents % 4 == 3);
	  }
	  if(currentc == '^') {
	    dead = (currents % 4 == 0);
	  }
	  if(currentc == 'v') {
	    dead = (currents % 4 == 2);
	  }
	  if(dead)
	    break;
	}
	if(dead)
	  continue;
      }
      if(board[currentx][currenty] == 'G') {
	steps = next.step;
	break;
      }
      //cout << "survived " << currentx << " , " << currenty << " with steps " << currents << endl;
      for(int i = 0; i < 4; i++) {
	pair<int, int> nextcoord = next.coord;
	int nextx = nextcoord.first + dx[i];
	int nexty = nextcoord.second + dy[i];
	if(nextx > - 1 && nextx < board.size() && nexty > -1 && nexty < board.front().length() && (board[nextx][nexty] == '.' || board[nextx][nexty] == 'S' || board[nextx][nexty] == 'G')) {
	  State nexts(nextx, nexty, next.step + 1);
	  if(s.count(nexts) == 0) {
	    s.insert(nexts);
	    q.push(nexts);
	  }
	}
      }
    }
    if(steps != -1)
      printf("Case #%d: %d\n", t, steps);
    else
      printf("Case #%d: impossible\n", t);
  }
  return 0;
}

#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

typedef long long int64;

static int dir[][2] =
{ -1,0, 0, 1, 1,0 ,0,-1}; 

int char2dir(char c){
    switch(c){
	case '^': return 0;
        case '>': return 1;
	case 'v': return 2;
	case '<': return 3; 
    }
    return -1;
}

int can[4][100+10][100+10]; 
int main (){
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T;
    cin>> T;
    for(int Cas = 1 ; Cas <= T ; ++Cas){
	int n, m;
	cin >> n >> m;
	vector<string> s(n);
//	char ss[10];
//	gets(ss);
	for(int i = 0 ; i < n ; ++i){
		cin >> s[i];
	}
	vector < string > mat[4];
	for(int i = 0 ; i < 4; ++i){
		mat[i] = s;
		for(int j = 0 ; j < n ; ++j){
			for(int k = 0 ; k < m ; ++k){
			       int x  = char2dir( s[j][k] );
			       if( x == -1 ) continue;
		               int d = ( x + i) % 4;
			       int tx = j + dir[d][0], ty = k + dir[d][1];
		               while( tx >=0 && tx < n && ty >=0 && ty < m && mat[i][tx][ty]!='#'
					       &&char2dir(mat[i][tx][ty])==-1 ){
					mat[i][tx][ty]='#';
					tx += dir[d][0], ty += dir[d][1];
			       } 
			}
		}
	}
	int sx = 0, sy=0, tx=0, ty =0 ; 
	for(int i = 0 ; i < n ; ++i)
		for(int j = 0 ; j < m ; ++j){
			if(s[i][j]=='S')
				sx = i, sy = j;
			if(s[i][j]=='G')
				tx = i, ty = j;
		}
	cout <<"Case #"<<Cas<<": ";
	memset(can, 0xff, sizeof(can));
	queue< pair<int,pair<int,int>  > > que; 
	que.push( make_pair(0,make_pair(sx,sy)));
        can[0][sx][sy]=0; 

	while(!que.empty()){
		int d = que.front().first, x = que.front().second.first, y = que.front().second.second; 
		que.pop();
		for(int i = 0 ; i < 4 ; ++i){ 
			int td = (d+1)%4;
			int xx = x + dir[i][0], yy = y + dir[i][1];
			if( xx <0 || xx >=n || yy  < 0 || yy >= m ||
					mat[td][xx][yy] =='#' || char2dir(mat[td][xx][yy])>=0
				|| can[td][xx][yy]>=0)
				continue; 
			can[td][xx][yy]=can[d][x][y]+1;
			que.push( make_pair(td, make_pair(xx,yy))); 
		}
	}
	int ans = 1000000000; 
	for(int i = 0 ; i < 4 ; ++i){
		if(can[i][tx][ty]!=-1)
       			ans = min(ans, can[i][tx][ty]);
	}
	if(ans == 1000000000) puts("impossible");
	else cout << ans <<endl; 
    }
    return 0;
}



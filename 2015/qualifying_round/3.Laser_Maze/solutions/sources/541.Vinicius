#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>
using namespace std;

typedef pair<int,int> ii;

typedef struct state_ {
  int r,c;
  int time;
  int moves;
} state;

int dx[] = {0,0,1,-1};
int dy[] = {-1,1,0,0};

int T,R,C,res;
int laser[128][128];
char m[128][128];
ii start,goal;
bool queued[128][128][4];

void mark_right(int r,int c,int time){
  for(int j=c+1;j<C;j++){
    if(m[r][j]!='.') return;
    laser[r][j] |= (1<<time);
  }
}

void mark_left(int r,int c,int time){
  for(int j=c-1;j>=0;j--){
    if(m[r][j]!='.') return;
    laser[r][j] |= (1<<time);
  }
}

void mark_down(int r,int c,int time){
  for(int i=r+1;i<R;i++){
    if(m[i][c]!='.') return;
    laser[i][c] |= (1<<time);
  }
}

void mark_top(int r,int c,int time){
  for(int i=r-1;i>=0;i--){
    if(m[i][c]!='.') return;
    laser[i][c] |= (1<<time);
  }
}

void pre(){
  for(int i=0;i<R;i++)
    memset(laser[i],0,sizeof(laser[i]));

  for(int i=0;i<R;i++){
    for(int j=0;j<C;j++){
      if(m[i][j]=='>'){
        mark_right(i,j,0);
        mark_down(i,j,1);
        mark_left(i,j,2);
        mark_top(i,j,3);
      }
      if(m[i][j]=='v'){
        mark_down(i,j,0);
        mark_left(i,j,1);
        mark_top(i,j,2);
        mark_right(i,j,3);
      }
      if(m[i][j]=='<'){
        mark_left(i,j,0);
        mark_top(i,j,1);
        mark_right(i,j,2);
        mark_down(i,j,3);
      }
      if(m[i][j]=='^'){
        mark_top(i,j,0);
        mark_right(i,j,1);
        mark_down(i,j,2);
        mark_left(i,j,3);
      }
    }
  }
}

bool can_move(int r,int c,int time){
  return (m[r][c]=='.' and ((laser[r][c])&(1<<time))==0);
}

int bfs(){
  queue<state> q;

  for(int i=0;i<R;i++)
    for(int j=0;j<C;j++)
      memset(queued[i][j],false,sizeof(queued[i][j]));

  state s = {start.first,start.second,0,0};
  queued[s.r][s.c][s.time] = true;
  q.push(s);

  while(!q.empty()){
    s = q.front(); q.pop();
    if(s.r==goal.first and s.c==goal.second)
      return s.moves;

    int nt = (s.time+1)%4;
    for(int i=0;i<4;i++){
      int nr = s.r + dx[i];
      int nc = s.c + dy[i];
      if(nr>=0 and nr<R and nc>=0 and nc<C and can_move(nr,nc,nt)){
        if(!queued[nr][nc][nt]){
          queued[nr][nc][nt] = true;
          state ns = {nr,nc,nt,s.moves+1};
          q.push(ns);
        }
      }
    }
  }
  return -1;
}

int main(){

  int cnt=1;
  scanf("%d",&T);
  while(T--){
    scanf("%d %d",&R,&C);
    for(int i=0;i<R;i++){
      scanf("%s",m[i]);
      for(int j=0;j<C;j++){
        if(m[i][j]=='S'){
          start = ii(i,j);
          m[i][j] = '.';
        }
        if(m[i][j]=='G'){
          goal = ii(i,j);
          m[i][j] = '.';
        }
      }
    }

    pre();
    res = bfs();

    printf("Case #%d: ",cnt++);
    if(res==-1) printf("impossible\n");
    else printf("%d\n",res);
  }

  return 0;
}

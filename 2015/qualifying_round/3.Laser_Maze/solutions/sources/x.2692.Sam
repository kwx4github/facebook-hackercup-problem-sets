import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class LazerMaze {
    //    private static final char[] TURRET_MODES = new char[] { '^', '>', 'V', '<' };

    public static void main(String[] args) throws IOException {
        Scanner scan = new Scanner(System.in);
        File output = new File("lazer_maze_output.txt");
        output.createNewFile();
        PrintWriter writer = new PrintWriter(output);        
        
        int trials = Integer.parseInt(scan.nextLine());

        for (int t = 1; t <= trials; t++) {
            String[] dimensions = scan.nextLine().split(" ");
            int[] d = new int[] { Integer.parseInt(dimensions[0]), Integer.parseInt(dimensions[1]) };
            char[][] board = new char[d[0]][d[1]];
            for (int x = 0; x < d[0]; x++) {
                String input = scan.nextLine();
                board[x] = input.toCharArray();
            }
            List<Turret> turrets = new ArrayList<Turret>();
            Point start = null;
            Point end = null;
            for (int x = 0; x < d[0]; x++) {
                for (int y = 0; y < d[1]; y++) {
                    if (board[x][y] == 'S') {
                        start = new Point(x, y, 0);
                    } else if (board[x][y] == 'G') {
                        end = new Point(x, y, -1);
                    } else if (board[x][y] == '^') {
                        turrets.add(new Turret(x, y, 1));
                    } else if (board[x][y] == '>') {
                        turrets.add(new Turret(x, y, 2));
                    } else if (board[x][y] == 'V') {
                        turrets.add(new Turret(x, y, 3));
                    } else if (board[x][y] == '<') {
                        turrets.add(new Turret(x, y, 4));

                    }
                }
            }
            LinkedList<Point> traversed = new LinkedList<>();
            LinkedList<Point> toTraverse = new LinkedList<>();
            toTraverse.add(start);

            Point targetEnd = null;

            while (!toTraverse.isEmpty()) {
                Point p = toTraverse.poll();
                if (p.equals(end)) {
                    if (targetEnd == null) {
                        targetEnd = p;
                    } else if (targetEnd.step > p.step) {
                        targetEnd = p;
                    }
                    break;
                }
                if (traversed.contains(p)) {
                    continue;
                }
                traversed.add(p);
                List<Point> points = p.generate();
                for (Point possible : points) {
                    if (inArray(d, possible)) {
                        if (testTurrets(turrets, d, board, possible)) {
                            toTraverse.add(possible);
                        } else {
                            //                            System.out.println("Turret shot me at " + possible.x + "," + possible.y);
                            int index = points.indexOf(possible);
                            index -= 2;
                            if (index < 0)
                                index += 4;
                            Point newPossible = points.get(index);
                            possible.x = newPossible.x;
                            possible.y = newPossible.y;
                            if (testTurrets(turrets, d, board, possible)) {
                                toTraverse.add(possible);
                            }
                        }
                    }
                }
            }

            if (targetEnd != null) {
                writer.println("Case #" + t + ": " + targetEnd.step);
            } else {
                writer.println("Case #" + t + ": impossible");
            }
            System.out.println("Completed test case");
        }
        writer.close();
        scan.close();
    }

    public static boolean testTurrets(List<Turret> turrets, int[] d, char[][] map, Point test) {
        for (Turret t : turrets) {
            if (t.canShoot(d, map, test)) {
                return false;
            }
        }
        return true;
    }

    public static boolean inArray(int[] size, Point p) {
        return p.x >= 0 && p.y >= 0 && p.x < size[0] && p.y < size[1];
    }
    
    public static boolean inArray(int[] size, int x, int y) {
        return x >= 0 && y >= 0 && x < size[0] && y < size[1];
    }

    public static class Point {
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + step;
            result = prime * result + x;
            result = prime * result + y;
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Point other = (Point) obj;
            if (x != other.x)
                return false;
            if (y != other.y)
                return false;
            return true;
        }

        public Point(int x, int y, int step) {
            super();
            this.x = x;
            this.y = y;
            this.step = step;
        }

        int x, y, step;

        public List<Point> generate() {
            return Arrays.asList(new Point(x + 1, y, step + 1), new Point(x, y + 1, step + 1), new Point(x - 1, y, step + 1), new Point(x, y - 1, step + 1));
        }
    }

    public static class Turret {
        public Turret(int x, int y, int stage) {
            super();
            this.x = x;
            this.y = y;
            this.stage = stage;
        }

        int x, y;
        int stage;

        public boolean canShoot(int[] d, char[][] map, Point p) {
            int newStage = stage;
            for (int i = 0; i < p.step; i++) {
                newStage++;
                if (newStage > 4) {
                    newStage = 1;
                }
            }
//            System.out.println(p.step + " " + stage + " " + newStage);
            if (newStage == 1) {
                if (p.y == y && x > p.x) {
                    for (int j = x - 1; j > p.x; j--) {
                        if (inArray(d, j, y) && map[j][y] != '.' && map[j][y] != 'G' && map[j][y] != 'S') {
                            return false;
                        }
                    }
                    return true;
                }
            } else if (newStage == 2) {
                if (p.x == x && y < p.y) {
                    for (int k = y + 1; k < p.y; k++) {
                        if (inArray(d, x, k) && map[x][k] != '.' && map[x][k] != 'G' && map[x][k] != 'S') {
                            return false;
                        }
                    }
                    return true;
                }
            } else if (newStage == 3) {
                if (p.y == y && x < p.x) {
                    for (int j = x + 1; j < p.x; j++) {
                        if (inArray(d, j, y) && map[j][y] != '.' && map[j][y] != 'G' && map[j][y] != 'S') {
                            return false;
                        }
                    }
                    return true;
                }
            } else {
                if (p.x == x && y > p.y) {
                    for (int k = y - 1; k > p.y; k--) {
                        if (inArray(d, x, k) && map[x][k] != '.' && map[x][k] != 'G' && map[x][k] != 'S') {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        }
    }
}

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <queue>
#include <functional>
using namespace std;

char maze[200][200];
bool visited[200][200][4];
int row, col;

char RotateLazer(char lazer, int it)
{
	switch (lazer)
	{
	case '^':
		switch (it)
		{
		case 1:
			return '>';
		case 2:
			return 'v';
		case 3:
			return '<';
		default:
			return lazer;
		}
		break;
	case '>':
		switch (it)
		{
		case 1:
			return 'v';
		case 2:
			return '<';
		case 3:
			return '^';
		default:
			return lazer;
		}
		break;
	case 'v':
		switch (it)
		{
		case 1:
			return '<';
		case 2:
			return '^';
		case 3:
			return '>';
		default:
			return lazer;
		}
		break;
	case '<':
		switch (it)
		{
		case 1:
			return '^';
		case 2:
			return '>';
		case 3:
			return 'v';
		default:
			return lazer;
		}
		break;
	}
}

bool FDeath(int x, int y, int d)
{
	for (int i = x; i <= row; i++)
	{
		if (maze[i][y] != '.' && maze[i][y] != 'G' && maze[i][y] != 'S')
		{
			if (maze[i][y] == '#')
				break;
			if (RotateLazer(maze[i][y], d % 4) == '^')
				return true;
		}
	}

	for (int i = x; i > 0; i--)
	{
		if (maze[i][y] != '.' && maze[i][y] != 'G' && maze[i][y] != 'S')
		{
			if (maze[i][y] == '#')
				break;
			if (RotateLazer(maze[i][y], d % 4) == 'v')
				return true;
		}
	}


	for (int i = y; i <= col; i++)
	{
		if (maze[x][i] != '.' && maze[x][i] != 'G' && maze[x][i] != 'S')
		{
			if (maze[x][i] == '#')
				break;
			if (RotateLazer(maze[x][i], d % 4) == '<')
				return true;
		}
	}

	for (int i = y; i > 0; i--)
	{
		if (maze[x][i] != '.' && maze[x][i] != 'G' && maze[x][i] != 'S')
		{
			if (maze[x][i] == '#')
				break;
			if (RotateLazer(maze[x][i], d % 4) == '>')
				return true;
		}
	}

	return false;
}

auto bfs(int x, int y) -> void
{
	int trow[] = { -1, 0, 1, 0 };
	int tcol[] = { 0, 1, 0, -1 };

	queue<tuple<int, int, int>> cola;
	cola.push(make_tuple(x, y, 0));
	visited[x][y][0] = true;

	while (cola.size())
	{
		auto front = cola.front();
		cola.pop();
		int curX = get<0>(front);
		int curY = get<1>(front);
		int curD = get<2>(front);
		if (maze[curX][curY] == 'G')
		{
			printf("%d\n", curD);
			return;
		}

		for (int i = 0; i < 4; i++)
		{
			if ((maze[curX + trow[i]][curY + tcol[i]] == '.' || maze[curX + trow[i]][curY + tcol[i]] == 'G' || maze[curX + trow[i]][curY + tcol[i]] == 'S')
				&& !visited[curX + trow[i]][curY + tcol[i]][(curD+1)%4]
				&& !FDeath(curX + trow[i], curY + tcol[i], curD + 1))
			{
				cola.push(make_tuple(curX + trow[i], curY + tcol[i], curD + 1));
				visited[curX + trow[i]][curY + tcol[i]][(curD + 1) % 4] = true;
			}
		}
	}

	printf("impossible\n");
}

int main()
{
#ifndef __OLIMP__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int T = 0, TC;
	scanf("%d", &TC);
	while (T++ < TC)
	{
		scanf("%d %d", &row, &col);

		memset(maze, 0, sizeof(maze));
		memset(visited, 0, sizeof(visited));

		for (int i = 1; i <= row; i++)
		{
			scanf("%s", &maze[i][1]);
		}

		bool fLocated = false;
		for (int i = 1; i <= row; i++)
		{
			for (int j = 1; j <= col; j++)
			{
				if (maze[i][j] == 'S')
				{
					printf("Case #%d: ", T);
					bfs(i, j);
				}
			}

			if (fLocated)
				break;
		}
	}

	return 0;
}
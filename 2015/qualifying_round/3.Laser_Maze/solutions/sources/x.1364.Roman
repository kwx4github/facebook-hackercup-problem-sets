#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdarg>
#include <cassert>
#include <climits>
#include <cstring>
#include <complex>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef vector<int> vi;


#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define x first
#define y second
#define y1 y1_gdssdfjsdgf
#define y0 y0_fsdjfsdogfs
#define ws ws_fdfsdfsdgfs
#define image(a) {sort(all(a)),a.resize(unique(all(a))-a.begin());}
#define eprintf(...) {fprintf(stderr,__VA_ARGS__),fflush(stderr);}

#define forn(i,n) for( int i = 0 ; i < (n) ; i++ )
#define forit(it,c) for( __typeof((c).begin()) it = (c).begin() ; it != (c).end() ; it++ )
#define problem_name "a"
const int dx[] = {1, 0, -1, 0};
const int dy[] = {0, -1, 0, 1};
const char dc[] = "v<^>";
int n, m;
string a[1000];
bool good(pair<int, int> p) {
  return p.x >= 0 && p.x < n && p.y >= 0 && p.y < m && a[p.x][p.y] == '.';
}
int calcnp(int t, char c) {
  for (int i = 0; i < 4; i++) if (dc[i] == c) {
    return (i + t) % 4;
  }
  assert(false);
}
int sgn(int x) {
  if (x > 0) return 1;
  if (x < 0) return -1;
  return 0;
}
bool shoot(int x1, int y1, int np, int x2, int y2) {
  return sgn(x2 - x1) == dx[np] && sgn(y2 - y1) == dy[np];
}
bool good2(pair<int, pair<int, int> > p) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      if (a[i][j] != '.' && a[i][j] != '#') {
        int np = calcnp(p.x, a[i][j]);
        if (shoot(i, j, np, p.y.x, p.y.y)) {
          return false;
        }
      }
    }
  }
  return true;
}
int main(){
    #ifdef home
    assert(freopen(problem_name".out","wt",stdout));
    assert(freopen(problem_name".in","rt",stdin));
    #endif
    int T;
    cin >> T;
    for (int ti = 1; ti <= T; ti++) {
      printf("Case #%d: ", ti);
      cin >> n >> m;
      for (int i = 0; i < n; i++) {
        cin >> a[i];
      }
      pair<int, int> st = {-1, -1};
      pair<int, int> en = {-1, -1};
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
          if (a[i][j] == 'S') {
            st = {i, j};
          }
          if (a[i][j] == 'G') {
            en = {i, j};
          }
        }
      }
      a[st.x][st.y] = '.';
      a[en.x][en.y] = '.';
      map<pair<int, pair<int, int> >, int> was;
      queue<pair<int, pair<int, int> > > q;
      q.push(mp(0, st));
      was[mp(0, st)] = 1;
      bool ans = false;
      while (!q.empty()) {
        auto v = q.front();
        q.pop();
        if (v.y == en) {
          printf("%d\n", was[v] - 1);
          ans = true;
          break;
        }
        for (int i = 0; i < 4; i++) {
          auto nv = v;
          nv.x = (nv.x + 1) % 4;
          nv.y.x += dx[i];
          nv.y.y += dy[i];
          if (good(nv.y) && was[nv] == 0 && good2(nv)) {
            was[nv] = was[v] + 1;
            q.push(nv);
          }
        }
      }
      if (!ans) {
        printf("impossible\n");
      }
    }
    return 0;
}

package FBHackerCup;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Scanner;

/**
 * TODO: Insert description here. (generated by rglez)
 */
public class LaserMaze {
  private static final int E = -1;
  private static final int W = -2;
  private static final int L = -4;
  private static final int R = -5;
  private static final int U = -6;
  private static final int D = -7;
  
  static int w, h, startRow, startCol, goalRow, goalCol;
  static int[][] maze = new int[100][100];
  static boolean[][][] vis = new boolean[100][100][4];
  static boolean[][][] lasers = new boolean[100][100][4];
  
  static String line;
  static String[] lineSplit;
  
  static Queue<Integer> qRow = new ArrayDeque<Integer>();
  static Queue<Integer> qCol = new ArrayDeque<Integer>();
  static Queue<Integer> qTime = new ArrayDeque<Integer>();
  
  static final int[] dirCol = {0, 1, 0, -1};
  static final int[] dirRow = {-1, 0, 1, 0};
  
  public static void main(String[] args) throws IOException {
    final Scanner sc = new Scanner(new File("/usr/local/google/home/rglez/Desktop/input.txt"));
    
    final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
              new FileOutputStream("/usr/local/google/home/rglez/Desktop/output.txt")));
    
    final int t = Integer.parseInt(sc.nextLine());
    
    for (int c = 1; c <= t; c++) {
      // Read input
      readInput(sc);

      buildLaser();
      
      // Solve problem
      int res = solve();

      // Print
      writer.write("Case #" + c + ": " + (res > 0 ? String.valueOf(res) : "impossible"));
      writer.newLine();
    }
    
    sc.close();
    writer.close();
  }

  private static void buildLaser() {
    int dir;
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        dir = -1;
        if (maze[i][j] == U) {
          dir = 0;
        } else if (maze[i][j] == R) {
          dir = 1;
        } else if (maze[i][j] == D) {
          dir = 2;
        } else if (maze[i][j] == L) {
          dir = 3;
        }
        
        // No laser
        if (dir == -1) {
          continue;
        }
        
        // each direction
        for (int k = 0; k < 4; k++) {
          // Mark all cells in this direction
          for (int r = i + dirRow[dir], c = j + dirCol[dir];
              validCell(r, c);
              r += dirRow[dir], c += dirCol[dir]) {
            lasers[r][c][k] = true;
          }
          
          dir = (dir + 1) % 4;
        }
      }
    }
  }

  private static int solve() {
    qRow.clear();
    qCol.clear();
    qTime.clear();
    
    qRow.add(startRow);
    qCol.add(startCol);
    qTime.add(0);
    
    int time, row, col;
    while(qRow.size() > 0) {
      row = qRow.poll();
      col = qCol.poll();
      time = qTime.poll();
      
      // GOAl
      if (row == goalRow && col == goalCol) {
        return time;
      }
      
      // MOVE
      for (int d = 0; d < 4; d++) {
        if (validMove(row + dirRow[d], col + dirCol[d], time + 1)) {
          qRow.add(row + dirRow[d]);
          qCol.add(col + dirCol[d]);
          qTime.add(time + 1);
        }
      }
    }
    
    return -1;
  }

  private static boolean validCell(int r, int c) {
    // Check outside maze
    if (r < 0 || c < 0 || r >= h || c >= w) {
      return false;
    }
    
    // Check walls
    if (maze[r][c] == W || maze[r][c] == L || maze[r][c] == R 
        || maze[r][c] == U || maze[r][c] == D) {
      return false;
    }
    
    return true;
  }
  private static boolean validMove(int r, int c, int time) {
    // Check the cell
    if (!validCell(r, c)) {
      return false;
    }
    
    // Check if it was already visited
    if (vis[r][c][time%4]) {
      return false;
    }
    
    // Check lasers
    if (lasers[r][c][time%4]) {
      return false;
    }
    
    // If result is true then mark as visited and return true
    vis[r][c][time%4] = true;
    return true;
  }

  /**
   * Read input
   */
  private static void readInput(Scanner sc) {
    lineSplit = sc.nextLine().split(" ");
    h = Integer.parseInt(lineSplit[0]);
    w = Integer.parseInt(lineSplit[1]);
    
    for (int i = 0; i < h; i++) {
      line = sc.nextLine();
      int v;
      for (int j = 0; j < w; j++) {
        for (int d = 0; d < 4; d++) {
          vis[i][j][d] = false;
          lasers[i][j][d] = false;
        }
        
        switch(line.charAt(j)) {
          case '#':
            v = W;
            break;
          case '<':
            v = L;
            break;
          case '>':
            v = R;
            break;
          case '^':
            v = U;
            break;
          case 'v':
            v = D;
            break;
          case 'G':
            v = E;
            goalRow = i;
            goalCol = j;
            break;
          case 'S':
            v = E;
            startRow = i;
            startCol = j;
            break;
          default:
            v = E;
            break;
        }
        maze[i][j] = v;
      }
    }
  }
}
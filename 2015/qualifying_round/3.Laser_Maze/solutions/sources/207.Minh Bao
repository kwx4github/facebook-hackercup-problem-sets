#include <bits/stdc++.h>
using namespace std;

const int ci[] = {-1, 0, 1, 0};
const int cj[] = {0, 1, 0, -1};

int nTest;
int n, m;
char a[111][111];
bool can[111][111][4];
int gone[111][111][4];

pair<int, int> S, G;

bool inside(int i, int j) {
	return i >= 1 && i <= n && j >= 1 && j <= m;
}

struct Position {
	int i, j, k;
	Position(int _i = 0, int _j = 0, int _k = 0): i(_i), j(_j), k(_k) {}
	bool isValid() {
		return inside(i, j) && can[i][j][k] && gone[i][j][k] > 1e9;
	}
};
vector<Position> q;

int main() {
	freopen("laser_maze_input.txt", "r", stdin);
	freopen("laser_maze_output.txt", "w", stdout);

	scanf("%d", &nTest);
	for (int test = 1; test <= nTest; test++) {
		scanf("%d%d", &n, &m);
		
		memset(can, false, sizeof can);
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++) {
				memset(can[i][j], true, sizeof can[i][j]);
				memset(gone[i][j], 63, sizeof gone[i][j]);
			}

		for (int i = 1; i <= n; i++) {
			scanf("%s", a[i] + 1);
			for (int j = 1; j <= m; j++) {
				if (a[i][j] == 'S') {
					a[i][j] = '.';
					S = {i, j};
				} else if (a[i][j] == 'G') {
					a[i][j] = '.';
					G = {i, j};
				} 
			}
		}
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (a[i][j] != '.') {
					memset(can[i][j], false, sizeof can[i][j]);

					if (a[i][j] == '^') {
						int dir = 0;
						for (int k = 0; k < 4; k++)
							for (int x = 1; ; x++) {
								if (!inside(i + x * ci[(dir + k) % 4], j + x * cj[(dir + k) % 4]) || 
									a[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]] != '.')
									break;
								can[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]][k] = false;
							}	
					}
					if (a[i][j] == '>') {
						int dir = 1;
						for (int k = 0; k < 4; k++)
							for (int x = 1; ; x++) {
								if (!inside(i + x * ci[(dir + k) % 4], j + x * cj[(dir + k) % 4]) || 
									a[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]] != '.')
									break;
								can[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]][k] = false;
							}	
					}
					if (a[i][j] == 'v') {
						int dir = 2;
						for (int k = 0; k < 4; k++)
							for (int x = 1; ; x++) {
								if (!inside(i + x * ci[(dir + k) % 4], j + x * cj[(dir + k) % 4]) || 
									a[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]] != '.')
									break;
								can[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]][k] = false;
							}	
					}
					if (a[i][j] == '<') {
						int dir = 3;
						for (int k = 0; k < 4; k++)
							for (int x = 1; ; x++) {
								if (!inside(i + x * ci[(dir + k) % 4], j + x * cj[(dir + k) % 4]) || 
									a[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]] != '.')
									break;
								can[i + x * ci[(dir + k) % 4]][j + x * cj[(dir + k) % 4]][k] = false;
							}	
					}
				}
			}
		}

		q.clear();

		int ans = 1e9 + 10;

		gone[S.first][S.second][0] = 0;
		q.emplace_back(S.first, S.second, 0);
		
		for (int id = 0; id < q.size(); id++) {
			auto c_pos = q[id];
			int c_step = gone[c_pos.i][c_pos.j][c_pos.k];

			if (c_pos.i == G.first && c_pos.j == G.second) {
				ans = c_step;
				break;
			}

			for (int k = 0; k < 4; k++) {
				auto n_pos = Position(c_pos.i + ci[k], c_pos.j + cj[k], (c_pos.k + 1) % 4);
				int n_step = c_step + 1;
				if (n_pos.isValid()) {
					gone[n_pos.i][n_pos.j][n_pos.k] = n_step;
					q.push_back(n_pos);
				}
			}
		}

		printf("Case #%d: ", test);
		if (ans < 1e9) printf("%d\n", ans);
		else printf("impossible\n");
	}

	return 0;
}
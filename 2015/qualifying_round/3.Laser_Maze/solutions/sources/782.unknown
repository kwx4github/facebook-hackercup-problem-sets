#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <tuple>
using namespace std;

int solve(int H, int W, vector<string> maze)
{
	vector<string> m[4];

	pair<int,int> s, g;
	for(int y=0; y<H; ++y)
	for(int x=0; x<W; ++x)
		if(maze[y][x]=='S') {
			s = make_pair(y,x);
			maze[y][x] = '.';
		}
		else if(maze[y][x]=='G') {
			g = make_pair(y,x);
			maze[y][x] = '.';
		}

	map<char,char> rot;
	rot['>'] = 'v';
	rot['v'] = '<';
	rot['<'] = '^';
	rot['^'] = '>';
	for(int i=0; i<4; ++i) {
		m[i] = maze;

		for(int y=0; y<H; ++y)
		for(int x=0; x<W; ++x)
			if(maze[y][x]=='v') {
				for(int yy=y+1; yy<H; ++yy) if(maze[yy][x]=='.')
					m[i][yy][x]='v';
				else break;
			}
			else if(maze[y][x]=='^') {
				for(int yy=y-1; yy>=0; --yy) if(maze[yy][x]=='.')
					m[i][yy][x]='^';
				else break;
			}
			else if(maze[y][x]=='>') {
				for(int xx=x+1; xx<W; ++xx) if(maze[y][xx]=='.')
					m[i][y][xx]='>';
				else break;
			}
			else if(maze[y][x]=='<') {
				for(int xx=x-1; xx>=0; --xx) if(maze[y][xx]=='.')
					m[i][y][xx]='<';
				else break;
			}

		for(int y=0; y<H; ++y)
		for(int x=0; x<W; ++x)
			if(rot.count(maze[y][x]))
				maze[y][x] = rot[maze[y][x]];
	}

	enum{Y,X,T};
	typedef tuple<int,int,int> vert;

	vector<vert> Q(1, vert(s.first, s.second, 0));
	set<vert> V;
	V.insert(Q[0]);
	for(int t=0; !Q.empty(); ++t)
	{
		vector<vert> Q2;
		for(auto v: Q) {
			int y = get<Y>(v);
			int x = get<X>(v);
			if(y==g.first && x==g.second)
				return t;
			int dy[]={-1,+1,0,0};
			int dx[]={0,0,-1,+1};
			for(int d=0; d<4; ++d) {
				int yy=y+dy[d];
				int xx=x+dx[d];
				if(0<=yy&&yy<H&&0<=xx&&xx<W&&m[(t+1)%4][yy][xx]=='.') {
					vert u(yy,xx,(t+1)%4);
					if(!V.count(u))
						V.insert(u), Q2.push_back(u);
				}
			}
		}
		Q.swap(Q2);
	}
	return 0;
}

int main()
{
	int T; cin>>T;
	for(int C=1; C<=T; ++C)
	{
		cout << "Case #" << C << ": ";

		int H, W; cin>>H>>W;

		vector<string> maze(H);
		for(auto& mi: maze)
			cin>>mi;

		int r = solve(H,W,maze);
		if(r)
			cout << r << endl;
		else
			cout << "impossible" << endl;
	}
}

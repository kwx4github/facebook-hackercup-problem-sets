#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <stdio.h>
#include <queue>

using namespace std;

char getNext(char c)
{
	if (c == '<')
		return '^';
	if (c == '^')
		return '>';
	if (c == '>')
		return 'v';
	if (c == 'v')
		return '<';
	return c;
}

void rotateIt(vector <string> &board)
{
	int i, j;
	int n = board.size();
	int m = board[0].length();
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			board[i][j] = getNext(board[i][j]);
		}
	}
}

bool isCell(char c)
{
	return (c == '.' || c == 'S' || c == 'G' || c == 'x');
}

vector <string> makeWalls(vector <string> board)
{
	int i, j, k, n = board.size(), m = board[0].length();
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			if (board[i][j] == '<')
			{
				for (k = j - 1; k >= 0 && isCell(board[i][k]); k--)
				{
					board[i][k] = 'x';
				}
			}
			else if (board[i][j] == '>')
			{
				for (k = j + 1; k < m && isCell(board[i][k]); k--)
				{
					board[i][k] = 'x';
				}
			}
			else if (board[i][j] == '^')
			{
				for (k = i - 1; k >= 0 && isCell(board[k][j]); k--)
				{
					board[k][j] = 'x';
				}
			}
			else if (board[i][j] == 'v')
			{
				for (k = i + 1; k < n && isCell(board[k][j]); k--)
				{
					board[k][j] = 'x';
				}
			}
		}
	}
	return board;
}

bool vis[5][110][110];
vector <string> allBoards[5];

int dx[] = { 1, -1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };

int N, M;

bool inRange(int x, int y, int k)
{
	if (x >= 0 && x < N && y >= 0 && y < M)
	{
		char c = allBoards[k][x][y];
		return (c != 'x' && isCell(c));
	}
	return false;
}

int BFS(int si, int sj)
{
	cerr << "here\n";
	N = allBoards[0].size();
	M = allBoards[0][0].length();
	queue <pair<pair<int, pair<int, int> >,int> > Q;
	vis[0][si][sj] = 1;
	Q.push({ { 0, { si, sj } }, 0 });
	while (!Q.empty())
	{
		auto cur = Q.front();
		Q.pop();
		int k = cur.first.first, x = cur.first.second.first, y = cur.first.second.second, d = cur.second, nx, ny, nk;
		nk = (k + 1) % 4;
		if (allBoards[k][x][y] == 'G')
			return d;
		for (int i = 0; i < 4; i++)
		{
			nx = x + dx[i];
			ny = y + dy[i];
			if (inRange(nx, ny, nk) && !vis[nk][nx][ny])
			{
				vis[nk][nx][ny] = 1;
				Q.push({ { nk, { nx, ny } }, d + 1 });
			}
		}
	}
	return -1;
}

vector <string> board;

int main()
{
	int T, n, m, si, sj, tt = 1;
	cin >> T;
	while (T--)
	{
		for (int i = 0; i < 4; i++)
			allBoards[i].clear();
		
		board.clear();
		cin >> n >> m;
		for (int i = 0; i < n; i++)
		{
			string tmp;
			cin >> tmp;
			board.push_back(tmp);
			for (int j = 0; j < m; j++)
			{
				if (board[i][j] == 'S')
				{
					si = i;
					sj = j;
				}
				for (int k = 0; k < 4; k++)
					vis[k][i][j] = 0;
			}
		}
		for (int i = 0; i < 4; i++)
		{
			allBoards[i] = makeWalls(board);
			rotateIt(board);
		}
		int ans = BFS(si, sj);
		printf("Case #%d: ", tt++);
		if (ans < 0)
			cout << "impossible\n";
		else
			cout << ans << "\n";
		cerr << tt << "\n";
	}
	return 0;
}

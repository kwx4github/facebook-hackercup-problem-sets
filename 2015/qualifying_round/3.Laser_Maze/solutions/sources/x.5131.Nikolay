#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>
#define ll long long int
using namespace std;
int ar[4][110][110];
int ar2[110][110];
int ar3[110][110];
int x[4] = {-1, 0, 1, 0};
int y[4] = {0, 1, 0, -1};
int main()
{
   int t;
   int co = 1;
   scanf("%d", &t);
   while(t--)
   {
       int n, m, x1, y1, x2, y2;
	   scanf("%d %d\n", &m, &n);
	   vector<string> v(m);
	   for(int i = 0; i < m; i++)
	   {
		   getline(cin, v[i]);
	   }
	   for(int i = 0; i < m; i++)
	   {
		   for(int j = 0; j < n; j++)
		   {
			   ar[0][i][j] = ar[1][i][j] = ar[2][i][j] = ar[3][i][j] = ar2[i][j] = ar3[i][j] = 0;
		   }
	   }
	   for(int i = 0; i < m; i++)
	   {
		   for(int j = 0; j < n; j++)
		   {
			   if(v[i][j] == '#')
			   {
				   for(int k = 0; k < 4; k++) ar[k][i][j] = 1;
			   }
			   else if(v[i][j] == '<')
			   {
				   int k = j - 1;
				   while(k >= 0 && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[0][i][k] = 2;
					   k--;
				   }
				   k = i + 1;
				   while(k < m && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[1][k][j] = 2;
					   k++;
				   }
				   k = j + 1;
				   while(k < n && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[2][i][k] = 2;
					   k++;
				   }
				   k = i - 1;
				   while(k >= 0 && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[3][k][j] = 2;
					   k--;
				   }
			   }
			   else if(v[i][j] == 'v')
			   {
				   int k = j - 1;
				   while(k >= 0 && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[3][i][k] = 2;
					   k--;
				   }
				   k = i + 1;
				   while(k < m && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[0][k][j] = 2;
					   k++;
				   }
				   k = j + 1;
				   while(k < n && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[1][i][k] = 2;
					   k++;
				   }
				   k = i - 1;
				   while(k >= 0 && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[2][k][j] = 2;
					   k--;
				   }
			   }
			   else if(v[i][j] == '>')
			   {
				   int k = j - 1;
				   while(k >= 0 && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[2][i][k] = 2;
					   k--;
				   }
				   k = i + 1;
				   while(k < m && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[3][k][j] = 2;
					   k++;
				   }
				   k = j + 1;
				   while(k < n && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[0][i][k] = 2;
					   k++;
				   }
				   k = i - 1;
				   while(k >= 0 && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[1][k][j] = 2;
					   k--;
				   }
			   }
			   else if(v[i][j] == '^')
			   {
				   int k = j - 1;
				   while(k >= 0 && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[1][i][k] = 2;
					   k--;
				   }
				   k = i + 1;
				   while(k < m && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[2][k][j] = 2;
					   k++;
				   }
				   k = j + 1;
				   while(k < n && v[i][k] != '<' && v[i][k] != '>' && v[i][k] != '^' && v[i][k] != 'v' && v[i][k] != '#') 
				   {
					   ar[3][i][k] = 2;
					   k++;
				   }
				   k = i - 1;
				   while(k >= 0 && v[k][j] != '<' && v[k][j] != '>' && v[k][j] != '^' && v[k][j] != 'v' && v[k][j] != '#') 
				   {
					   ar[0][k][j] = 2;
					   k--;
				   }
			   }
			   else if(v[i][j] == 'S')
			   {
				   x1 = j;
				   y1 = i;
			   }
			   else if(v[i][j] == 'G')
			   {
				   x2 = j;
				   y2 = i;
			   }
		   }
	   }
		queue<pair<int, int> > q;
		q.push(pair<int, int>(x1, y1));
		ar3[y1][x1] = 1;
		int res = 1000000000;
		while(!q.empty()) 
		{
			pair<int, int> p = q.front();
			q.pop();
			vector<pair<int, int> > v2;
			bool b = false;
			for(int i = 0; i < 4; i++) 
			{
				int mx = p.first + x[i];
				int my = p.second + y[i];
				if(mx >= 0 && mx < n && my >= 0 && my < m && v[my][mx] != '<' && v[my][mx] != '>' && v[my][mx] != '^' && v[my][mx] != 'v' && v[my][mx] != '#')
				{
					if(ar[(ar2[p.second][p.first] + 1) % 4][my][mx] != 2) 
					{
						if(ar3[my][mx] != 1)
						{
							ar3[my][mx] = 1;
							q.push(pair<int, int>(mx, my));
							ar2[my][mx] = ar2[p.second][p.first] + 1;
							if(my == y2 && mx == x2)
							{
								res = min(res, ar2[my][mx]);
							}
						}
						if(ar[(ar2[p.second][p.first] + 2) % 4][p.second][p.first] != 2) b = true;
					}
					else v2.push_back(pair<int, int>(mx, my));
				}
			}
			if(b)
			{
				for(int i = 0; i < v2.size(); i++)
				{
					ar3[v2[i].second][v2[i].first] = 1;
					q.push(pair<int, int>(v2[i].first, v2[i].second));
					ar2[v2[i].second][v2[i].first] = ar2[p.second][p.first] + 3;
					if(v2[i].second == y2 && v2[i].first == x2)
					{
						res = min(res, ar2[v2[i].second][v2[i].first]);
					}
				}
			}
		}
		if(res != 1000000000) printf("Case #%d: %d\n", co, res);
		else printf("Case #%d: impossible\n", co);
		co++;
   }
   return 0;
}

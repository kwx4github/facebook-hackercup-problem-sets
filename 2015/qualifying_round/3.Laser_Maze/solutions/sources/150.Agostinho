import java.util.Arrays;
import java.util.ArrayDeque;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Agostinho Junior (junior94)
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		OutputWriter out = new OutputWriter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {

	static class Node {
		public final int row;
		public final int col;
		public final int steps;
		public Node(int row, int col, int steps) {
			this.row = row;
			this.col = col;
			this.steps = steps;
		}
	}

	public void solve(int testNumber, InputReader in, OutputWriter out) {
		final int N = in.readInt();
		final int M = in.readInt();
		char[][] maze = new char[N][];
		for (int i = 0; i < N; i++) {
			maze[i] = in.readLine().toCharArray();
		}
		char[] directions = {'<', '^', '>', 'v'};
		int[] dx = {0, -1, 0, 1};
		int[] dy = {-1, 0, 1, 0};
		boolean[][][] safe = new boolean[N][M][dx.length];
		for (boolean[][] b: safe) {
			for (boolean[] a: b) {
				Arrays.fill(a, true);
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				for (int k = 0; k < dx.length; k++) {
					if (maze[i][j] == directions[k]) {
						for (int l = 0; l < dx.length; l++) {
							int x = i;
							int y = j;
							boolean first = true;
							while (0 <= Math.min(x, y) && x < N && y < M) {
								if (first) {
									first = false;
								} else if ("<>^v#".contains(maze[x][y] + "")) {
									break;
								}
								safe[x][y][l] = false;
								x += dx[(k + l) % dx.length];
								y += dy[(k + l) % dx.length];
							}
						}
					}
				}
			}
		}
		out.printf("Case #%d: ", testNumber);
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) if (maze[i][j] == 'S') {
				maze[i][j] = '.';
				int[][][] minSteps = new int[N][M][dx.length];
				for (int[][] a: minSteps) {
					for (int[] b: a) {
						Arrays.fill(b, (int)1e9);
					}
				}
				ArrayDeque<Node> queue = new ArrayDeque<>();
				queue.push(new Node(i, j, 0));
				while (!queue.isEmpty()) {
					Node now = queue.pop();
					for (int d = 0; d < dx.length; d++) {
						int row = now.row + dx[d];
						int col = now.col + dy[d];
						if (0 <= Math.min(row, col) && row < N && col < M) {
							int steps = now.steps + 1;
							int time = steps % dx.length;
							if (safe[row][col][time] && steps < minSteps[row][col][time]) {
								char c = maze[row][col];
								if (c == 'G') {
									out.println(steps);
									return;
								} else if (c == '.') {
									minSteps[row][col][time] = steps;
									queue.add(new Node(row, col, steps));
								}
							}
						}
					}
				}
			}
		}
		out.println("impossible");
	}

}

class InputReader {
    private BufferedReader input;
    private StringTokenizer line = new StringTokenizer("");

	public InputReader(InputStream in) {
        input = new BufferedReader(new InputStreamReader(in));
    }

	public void fill() {
        try {
            if(!line.hasMoreTokens()) line = new StringTokenizer(input.readLine());
        } catch(IOException io) { io.printStackTrace(); System.exit(0);}
    }
    public String next() {
        fill();
        return line.nextToken();
    }

	public int readInt() {
        fill();
        return Integer.parseInt(line.nextToken());
    }

	public String readLine() {
        String s = "";
        try {
            s = input.readLine();
        } catch(IOException io) {io.printStackTrace(); System.exit(0);}
        return s;
    }
}

class OutputWriter {
    private PrintWriter output;

	public OutputWriter(OutputStream out) {
        output = new PrintWriter(out);
    }

	public void printf(String format, Object... o) {
        output.printf(format, o);
    }

	public void println(Object o) {
        output.println(o);
    }

	public void close() {
        output.close();
    }
}


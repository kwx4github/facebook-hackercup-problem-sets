import sys
import heapq

class Turet(object):
    rotation = {"^": ">", ">": "v", "v": "<", "<": "^"}
    def __init__(self, x, y, direction):
        self.x = x
        self.y = y
        self.direction = direction

    def get_rotated(self):
        return Turet(self.x, self.y, self.rotation[self.direction])

    def get_direction(self):
        if self.direction == '^':
            return (-1, 0)
        elif self.direction == '>':
            return (0, 1)
        elif self.direction == 'v':
            return (1, 0)
        else:
            return (0, -1)

    def __str__(self):
        return str(self.x) + " " + str(self.y) + " " + str(self.direction)


class Maze(object):
    def __init__(self, hei, wid, walls, turets, position, goal):
        self.hei = hei
        self.wid = wid
        self.walls = walls
        self.turets = turets
        self.position = position
        self.goal = goal
        self.walls_set = set(self.walls)
        self.turets_set = set((turet.x, turet.y) for turet in self.turets)
        self.full_turets_set = set((turet.x, turet.y, turet.direction) for turet in self.turets)
        self.dead_positions = set()
        for turet in self.turets:
            direction = turet.get_direction()
            new_pos = (turet.x, turet.y)
            while True:
                new_pos = (new_pos[0] + direction[0], new_pos[1] + direction[1])
                if new_pos in self.walls_set or new_pos in self.turets_set or new_pos[0] < 0 or new_pos[0] >= self.hei or new_pos[1] < 0 or new_pos[1] >= self.wid:
                    break
                else:
                    self.dead_positions.add(new_pos)

    def get_actions(self):
        actions = []
        for d in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            new_pos = (self.position[0] + d[0], self.position[1] + d[1])
            if new_pos[0] >= 0 and new_pos[0] < self.hei and new_pos[1] >= 0 and new_pos[1] < self.wid \
                    and not new_pos in self.walls_set and not new_pos in self.turets_set:
                actions.append(d)
        return actions

    def is_goal(self):
        if self.position == self.goal:
            return True
        else:
            return False

    def is_dead(self):

        if self.position in self.dead_positions:
            return True
        else:
            return False


    def get_successor(self, action):
        new_turets = []
        for turet in self.turets:
            new_turets.append(turet.get_rotated())

        return Maze(self.hei, self.wid, self.walls, new_turets, (self.position[0] + action[0], self.position[1] + action[1]), self.goal)

    def __hash__(self):
        s = str(self.position)
        for turet in self.turets:
            s += str(turet)
        return hash(s)

    def __eq__(self, other):
        if not isinstance(other, Maze):
            return False
        if self.position != other.position:
            return False

        for turet in self.full_turets_set:
            if not turet in other.full_turets_set:
                return False

        for turet in other.full_turets_set:
            if not turet in self.full_turets_set:
                return False

        return True

    def manhattan(self):
        return abs(self.position[0] - self.goal[0]) + abs(self.position[1] - self.goal[1])


def solve(maze):
    explored = set()
    stack = []
    stack.append((0, maze))
    ops = 0
    while len(stack):
        (step, node) = stack.pop(0)
        ops += 1
        explored.add(node)
        actions = node.get_actions()

        for action in actions:
            new_node = node.get_successor(action)
            if new_node in explored or new_node.is_dead():
                pass
            elif new_node.is_goal():
                return step + 1
            else:
                stack.append((step + 1, new_node))
    return "impossible"


def solve2(maze):
    explored = set()
    h = []
    heapq.heappush(h, (maze.manhattan(), 0, maze))
    ops = 0
    while len(h):
        (dist, step, node) = heapq.heappop(h)

        if node.is_goal():
            return step

        if node in explored:
            continue
        ops += 1
        explored.add(node)
        actions = node.get_actions()
        for action in actions:
            new_node = node.get_successor(action)
            if new_node in explored or new_node.is_dead():
                pass
            else:
                heapq.heappush(h, (new_node.manhattan() + step + 1, step + 1, new_node))
    return "impossible"


t = int(sys.stdin.readline())

for i in xrange(t):
    hei, wid = (int(x) for x in sys.stdin.readline().rstrip().split())
    walls = []
    turets = []
    start = None
    goal = None
    for x in xrange(hei):
        l = sys.stdin.readline().rstrip()
        for y in xrange(wid):
            if l[y] == 'S':
                start = (x, y)
            elif l[y] == 'G':
                goal = (x, y)
            elif l[y] in ('<', '>', '^', 'v'):
                turets.append(Turet(x, y, l[y]))
            elif l[y] == '#':
                walls.append((x, y))
    maze = Maze(hei, wid, walls, turets, start, goal)
    answer = str(solve2(maze))
    print "Case #{}: {}".format(i+1, answer)

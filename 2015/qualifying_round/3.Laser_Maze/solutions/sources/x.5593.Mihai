#include <fstream>
#include <queue>

#include <cstring>
using namespace std;

const int MAX_N = 102;
const int INF = 0x3f3f3f3f;

int N, M;
int A[MAX_N][MAX_N], B[4][MAX_N][MAX_N], D[4][MAX_N][MAX_N], dx[4], dy[4];
queue < pair < int, pair < int, int > > > Q;

inline int getDir(int d, int t) {
    int ret = (d + t) % 4;

    if(ret == 0)
        ret = 4;

    return ret;
}

int main() {
    ifstream f("data.in");
    ofstream g("data.out");

    dx[0] = -1, dx[1] = 1;
    dy[2] = -1, dy[3] = 1;

    int T;
    f >> T;
    for(int test = 1; test <= T; ++test) {
        f >> N >> M;

        memset(A, 0, sizeof(A));
        memset(B, 0, sizeof(B));
        memset(D, INF, sizeof(D));

        int xs, ys, xg, yg;
        for(int i = 1; i <= N; ++i)
            for(int j = 1; j <= M; ++j) {
                char c;
                f >> c;

                if(c == '#')
                    A[i][j] = 5;
                else if(c == 'S') {
                    xs = i;
                    ys = j;
                }
                else if(c == 'G') {
                    xg = i;
                    yg = j;
                }
                else if(c == '<')
                    A[i][j] = 1;
                else if(c == '^')
                    A[i][j] = 2;
                else if(A[i][j] == '>')
                    A[i][j] = 3;
                else if(A[i][j] == 'v')
                    A[i][j] = 4;
            }

        for(int t = 0; t < 4; ++t) {
            for(int i = 1; i <= N; ++i)
                for(int j = 1; j <= M; ++j) {
                    for(int x = i - 1; x >= 1; --x)
                        if(A[x][j] == 5)
                            break;
                        else if(A[x][j] >= 1 && A[x][j] <= 4) {
                            int d = getDir(A[x][j], t);

                            if(d == 4)
                                B[t][i][j] = 1;
                            break;
                        }
                    for(int x = i + 1; x <= N; ++x)
                        if(A[x][j] == 5)
                            break;
                        else if(A[x][j] >= 1 && A[x][j] <= 4) {
                            int d = getDir(A[x][j], t);

                            if(d == 2)
                                B[t][i][j] = 1;
                            break;
                        }
                    for(int y = j - 1; y >= 1; --y)
                        if(A[i][y] == 5)
                            break;
                        else if(A[i][y] >= 1 && A[i][y] <= 4) {
                            int d = getDir(A[i][y], t);

                            if(d == 3)
                                B[t][i][j] = 1;
                            break;
                        }
                    for(int y = j + 1; y <= M; ++y)
                        if(A[i][y] == 5)
                            break;
                        else if(A[i][y] >= 1 && A[i][y] <= 4) {
                            int d = getDir(A[i][y], t);

                            if(d == 1)
                                B[t][i][j] = 1;
                            break;
                        }
                }
        }

        D[0][xs][ys] = 0;
        Q.push(make_pair(0, make_pair(xs, ys)));

        while(!Q.empty()) {
            int t = Q.front().first, x = Q.front().second.first, y = Q.front().second.second;
            Q.pop();

            for(int i = 0; i < 4; ++i) {
                int x1 = x + dx[i], y1 = y + dy[i], t1 = (t + 1) % 4;

                if(x1 < 1 || x1 > N || y1 < 1 || y1 > M)
                    continue;
                if(A[x1][y1] == 0 && B[t1][x1][y1] == 0 && D[t][x][y] + 1 < D[t1][x1][y1]) {
                    D[t1][x1][y1] = D[t][x][y] + 1;
                    Q.push(make_pair(t1, make_pair(x1, y1)));
                }
            }
        }

        int ans = INF;
        for(int t = 0; t < 4; ++t)
            ans = min(ans, D[t][xg][yg]);

        g << "Case #" << test << ": ";
        if(ans != INF)
            g << ans << "\n";
        else g << "impossible\n";
    }

    return 0;
}


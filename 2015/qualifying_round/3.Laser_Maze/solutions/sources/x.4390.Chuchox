#include <stdio.h>

int main(void){
    int cases, casos, c, n, m, x, y, i, j, k, l;
    int mt[4][100][100], mp[2][100][100];

    scanf("%d\n",&cases);
    for(casos=1;casos<=cases;casos++){
        scanf("%d %d\n",&n,&m);
        //printf("%d %d\n",n,m);
        //primero leemos las matrices a la entrada
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                c = getchar();
                if(c == '.'){
                    mt[1][i][j] = mt[2][i][j] = mt[3][i][j] = mt[0][i][j] = mp[0][i][j] = mp[1][i][j] = -c;
                }else if(c == '#'){
                    mt[1][i][j] = mt[2][i][j] = mt[3][i][j] = mt[0][i][j] = mp[0][i][j] = mp[1][i][j] = -c;
                }else if(c == 'S'){
                    c = '.';
                    mt[1][i][j] = mt[2][i][j] = mt[3][i][j] = mt[0][i][j] = mp[1][i][j] = -c;
                    mp[0][i][j] = 0;
                }else if(c == 'G'){
                    c = '.';
                    mt[1][i][j] = mt[2][i][j] = mt[3][i][j] = mt[0][i][j] = mp[0][i][j] = mp[1][i][j] = -c;
                    x = i;
                    y = j;
                }else if(c == '<'){
                    mp[0][i][j] = mp[1][i][j] = mt[0][i][j] = -'<';
                    mt[1][i][j] = -'^';
                    mt[2][i][j] = -'>';
                    mt[3][i][j] = -'v';
                }else if(c == '>'){
                    mp[0][i][j] = mp[1][i][j] = mt[0][i][j] = -'>';
                    mt[1][i][j] = -'v';
                    mt[2][i][j] = -'<';
                    mt[3][i][j] = -'^';
                }else if(c == '^'){
                    mp[0][i][j] = mp[1][i][j] = mt[0][i][j] = -'^';
                    mt[1][i][j] = -'>';
                    mt[2][i][j] = -'v';
                    mt[3][i][j] = -'<';
                }else if(c == 'v'){
                    mp[0][i][j] = mp[1][i][j] = mt[0][i][j] = -'v';
                    mt[1][i][j] = -'<';
                    mt[2][i][j] = -'^';
                    mt[3][i][j] = -'>';
                }
            }
            c = getchar();
        }
        //Ahora preparamos las cuatro matrices con las marcas de disparos
        for(i=0;i<4;i++){
            for(j=0;j<n;j++){
                for(k=0;k<m;k++){
                    if(mt[i][j][k] == -'^'){
                        l = j;
                        while(mt[i][l-1][k] == -'.'){
                            l--;
                            mt[i][l][k] = -'#';
                        }
                    }else if(mt[i][j][k] == -'>'){
                        l = k;
                        while(mt[i][j][l+1] == -'.'){
                            l++;
                            mt[i][j][l] = -'#';
                        }
                    }else if(mt[i][j][k] == -'v'){
                        l = j;
                        while(mt[i][l+1][k] == -'.'){
                            l++;
                            mt[i][l][k] = -'#';
                        }
                    }else if(mt[i][j][k] == -'<'){
                        l = k;
                        while(mt[i][j][l-1] == -'.'){
                            l--;
                            mt[i][j][l] = -'#';
                        }
                    }
                }
            }
        }
        //Impresión de prueva de las matrices resultantes
        /*for(i=0;i<4;i++){
            for(j=0;j<n;j++){
                for(k=0;k<m;k++){
                    putchar(-mt[i][j][k]);
                }
                putchar('\n');
            }
            putchar('\n');
        }
        printf("0\n");
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                putchar(-mp[0][i][j]);
            }
            putchar('\n');
        }*/
        //Construcción de la solucion
        int encontrado = 0;
        int contador = 0;
        int colocado =1;
        int matriz, turno;
        while((contador < 20000)&&(colocado)){
            contador++;
            colocado = 0;
            matriz = contador % 4;
            turno = contador % 2;
            for(i=0;i<n;i++){
                for(j=0;j<m;j++){
                    if((mp[1-turno][i][j] < 0)&&(mp[1-turno][i][j] != -'.')){
                        mp[turno][i][j] = mp[1-turno][i][j];
                    }else if(mt[matriz][i][j] == -'#'){
                        mp[turno][i][j] = -'.';
                    }else if((i!=0)&&(mp[1-turno][i-1][j]==contador-1)){
                        mp[turno][i][j] = contador;
                        colocado++;
                    }else if((i<n-1)&&(mp[1-turno][i+1][j]==contador-1)){
                        mp[turno][i][j] = contador;
                        colocado++;
                    }else if((j!=0)&&(mp[1-turno][i][j-1]==contador-1)){
                        mp[turno][i][j] = contador;
                        colocado++;
                    }else if((j<m-1)&&(mp[1-turno][i][j+1]==contador-1)){
                        mp[turno][i][j] = contador;
                        colocado++;
                    }else{
                        mp[turno][i][j] = -'.';
                    }
                    if((i==x)&&(j==y)&&(mp[turno][i][j]==contador)){
                        encontrado = 1;
                        colocado = 0;
                        i = n;
                        j = m;
                    }
                }
            }
            //impresion de prueva
            /*printf("%d\n",contador);
            for(i=0;i<n;i++){
                for(j=0;j<m;j++){
                    if(mp[turno][i][j] <0)
                        putchar(-mp[turno][i][j]);
                    else
                        printf("%d",mp[turno][i][j] % 10);
                }
                putchar('\n');
            }
            putchar('\n');*/
        }
        //Impresion del resultado
        if(encontrado){
            printf("Case #%d: %d\n",casos,contador);
        }else{
            printf("Case #%d: impossible\n",casos);
        }
    }
    return(0);
}




















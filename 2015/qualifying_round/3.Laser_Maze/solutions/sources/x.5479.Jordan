#include<cstdio>
#include<iostream>
#include<queue>
#include<vector>

typedef struct {
	int x;
	int y;
} pos;

typedef struct {
	int x;
	int y;
	int z;
	int step;
} posz;

typedef struct {
	int x;
	int y;
	char face;
} turret;

using namespace std;

int main() {
	int T;
	scanf("%d", &T);
	for (int i=1;i<=T;++i) {
		int M, N;
		scanf("%d %d", &M, &N);
		getchar();
		bool maze[4][M][N];
		char realmaze[M][N];
		posz start;
		pos goal;
		vector<turret> turrets;
		for (int j=0;j<M;++j) {
			for (int k=0;k<N;++k) {
				char c;
				scanf("%c", &c);
				realmaze[j][k] = c;
				if (c=='S') {
					start.x = k;
					start.y = j;
					start.z = 0;
					start.step = 0;
					for (int l=0;l<4;++l) {
						maze[l][j][k] = true;
					}
				} else if (c=='G') {
					goal.x = k;
					goal.y = j;
					for (int l=0;l<4;++l) {
						maze[l][j][k] = true;
					}
				} else if (c=='#') {
					for (int l=0;l<4;++l) {
						maze[l][j][k] = false;
					}
				} else {
					for (int l=0;l<4;++l) {
						maze[l][j][k] = true;
					}
				}
				if ((c=='v') || (c=='<') || (c=='>') || (c=='^')) {
					turret t;
					t.x = k;
					t.y = j;
					t.face = c;
					turrets.push_back(t);
				}
			}
			getchar();
		}

		for (int j=0;j<turrets.size();++j) {
			int curmaze = 0;
			int x = turrets[j].x;
			int y = turrets[j].y;
			if (turrets[j].face == 'v') {
				while ((realmaze[y][x]!='#') && (y < M)) {
					maze[curmaze][y][x] = false;
					y++;
				}
			} else if (turrets[j].face == '^') {
				while ((realmaze[y][x]!='#') && (y >= 0)) {
					maze[curmaze][y][x] = false;
					y--;
				}
			} else if (turrets[j].face == '>') {
				while ((realmaze[y][x]!='#') && (x < N)) {
					maze[curmaze][y][x] = false;
					x++;
				}
			} else if (turrets[j].face == '<') {
				while ((realmaze[y][x]!='#') && (x >= 0)) {
					maze[curmaze][y][x] = false;
					x--;
				}
			}
		}

		for (int j=0;j<turrets.size();++j) {
			int curmaze = 1;
			int x = turrets[j].x;
			int y = turrets[j].y;
			if (turrets[j].face == 'v') {
				while ((realmaze[y][x]!='#') && (x >= 0)) {
					maze[curmaze][y][x] = false;
					x--;
				}
			} else if (turrets[j].face == '^') {
				while ((realmaze[y][x]!='#') && (x < N)) {
					maze[curmaze][y][x] = false;
					x++;
				}
			} else if (turrets[j].face == '>') {
				while ((realmaze[y][x]!='#') && (y < M)) {
					maze[curmaze][y][x] = false;
					y++;
				}
			} else if (turrets[j].face == '<') {
				while ((realmaze[y][x]!='#') && (y >= 0)) {
					maze[curmaze][y][x] = false;
					y--;
				}
			}
		}

		for (int j=0;j<turrets.size();++j) {
			int curmaze = 2;
			int x = turrets[j].x;
			int y = turrets[j].y;
			if (turrets[j].face == 'v') {
				while ((realmaze[y][x]!='#') && (y >= 0)) {
					maze[curmaze][y][x] = false;
					y--;
				}
			} else if (turrets[j].face == '^') {
				while ((realmaze[y][x]!='#') && (y < M)) {
					maze[curmaze][y][x] = false;
					y++;
				}
			} else if (turrets[j].face == '>') {
				while ((realmaze[y][x]!='#') && (x >= 0)) {
					maze[curmaze][y][x] = false;
					x--;
				}
			} else if (turrets[j].face == '<') {
				while ((realmaze[y][x]!='#') && (x < N)) {
					maze[curmaze][y][x] = false;
					x++;
				}
			}
		}

		for (int j=0;j<turrets.size();++j) {
			int curmaze = 3;
			int x = turrets[j].x;
			int y = turrets[j].y;
			if (turrets[j].face == 'v') {
				while ((realmaze[y][x]!='#') && (x < N)) {
					maze[curmaze][y][x] = false;
					x++;
				}
			} else if (turrets[j].face == '^') {
				while ((realmaze[y][x]!='#') && (x >= 0)) {
					maze[curmaze][y][x] = false;
					x--;
				}
			} else if (turrets[j].face == '>') {
				while ((realmaze[y][x]!='#') && (y >= 0)) {
					maze[curmaze][y][x] = false;
					y--;
				}
			} else if (turrets[j].face == '<') {
				while ((realmaze[y][x]!='#') && (y < M)) {
					maze[curmaze][y][x] = false;
					y++;
				}
			}
		}
		queue<posz> q;
		posz result;
		q.push(start);
		bool check = false;
		bool visited [4][M][N];
		for (int j=0;j<4;++j) {
			for (int k=0;k<M;++k) {
				for (int l=0;l<N;++l) {
					visited[j][k][l] = false;
				}
			}
		}
		visited[start.z][start.y][start.x] = true;
		while ((!check) && (!q.empty())) {
			posz current = q.front();
			q.pop();
			int x = current.x;
			int y = current.y;
			if ((x==goal.x) && (y==goal.y)) {
				check = true;
				result = current;
			} else {
				int z = current.z;
				int nextStep = current.step + 1;
				int nextZ = (z + 1) % 4;
				if ((!visited[nextZ][y][x+1]) && (x+1<N) && (maze[nextZ][y][x+1])) {
					visited[nextZ][y][x+1] = true;
					posz next;
					next.x = x+1;
					next.y = y;
					next.z = nextZ;
					next.step = nextStep;
					q.push(next);
					if ((next.x==goal.x) && (next.y==goal.y)) {
						check = true;
						result = next;
					}
				}
				if ((!visited[nextZ][y+1][x]) && (y+1<M) && (maze[nextZ][y+1][x])) {
					visited[nextZ][y+1][x] = true;
					posz next;
					next.x = x;
					next.y = y+1;
					next.z = nextZ;
					next.step = nextStep;
					q.push(next);
					if ((next.x==goal.x) && (next.y==goal.y)) {
						check = true;
						result = next;
					}
				}
				if ((!visited[nextZ][y-1][x]) && (y-1>=0) && (maze[nextZ][y-1][x])) {
					visited[nextZ][y-1][x] = true;
					posz next;
					next.x = x;
					next.y = y-1;
					next.z = nextZ;
					next.step = nextStep;
					q.push(next);
					if ((next.x==goal.x) && (next.y==goal.y)) {
						check = true;
						result = next;
					}
				}
				if ((!visited[nextZ][y][x-1]) && (x-1>=0) && (maze[nextZ][y][x-1])) {
					visited[nextZ][y][x-1] = true;
					posz next;
					next.x = x-1;
					next.y = y;
					next.z = nextZ;
					next.step = nextStep;
					q.push(next);
					if ((next.x==goal.x) && (next.y==goal.y)) {
						check = true;
						result = next;
					}
				}
			}
		}

		if (check) {
			printf("Case #%d: %d\n", i, result.step);
		} else {
			printf("Case #%d: impossible\n", i);
		}
	}
	return 0;
}
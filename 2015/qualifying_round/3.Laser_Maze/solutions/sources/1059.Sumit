/*
    xxx_joker/codersumit
*/
#include <bits/stdc++.h>
#define bitcnt(x) __builtin_popcountll(x)
#define sd(a) scanf("%d",&a)
#define sld(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define sc(a) scanf("%c",&a)
#define pd(a) printf("%d",a)
#define ps(a) printf("%s",a)
#define pc(a) printf("%c",a)
#define space printf(" ");
#define nw printf("\n")
#define pb push_back
#define FOR(i,a,b) for(i=a;i<b;i++)
#define FORR(i,a,b) for(i=a;i>=b;i--)
#define all(v) v.begin(),v.end()
#define MAX 100005
#define mod 1000000007

typedef long long ll;
typedef unsigned long long ull;
using namespace std;
struct in{
	int x,y,dist;
};
char arr[105][105];
int r[105][5][105],c[105][5][105];
int visit[105][5][105];
queue<in> q;
int main(){//while(1){
	int k,temp,asd,test,row,col,i,j,move,flag,a,b;
	sd(test);
	FOR(k,1,test+1){
		memset(r,0,sizeof(r));
		memset(c,0,sizeof(c));
		memset(visit,0,sizeof(visit));
		sd(row);sd(col);
		FOR(i,0,row)
			ss(arr[i]);
		FOR(i,0,row){
			FOR(j,0,col){
				if(arr[i][j]=='S'){
					a=i;b=j;
				}
				else if(arr[i][j]=='<'){
					if((j+1)<col && arr[i][j+1]!='#')
						r[i][2][j+1]=1;
					if((j-1)>=0 && arr[i][j-1]!='#')
						r[i][0][j-1]=2;
					if((i-1)>=0 && arr[i-1][j]!='#')
						c[j][1][i-1]=1;
					if((i+1)<row && arr[i+1][j]!='#')
						c[j][3][i+1]=2;
				}
				else if(arr[i][j]=='^'){
					if((j+1)<col && arr[i][j+1]!='#')
						r[i][1][j+1]=1;
					if((j-1)>=0 && arr[i][j-1]!='#')
						r[i][3][j-1]=2;
					if((i+1)<row && arr[i+1][j]!='#')
						c[j][2][i+1]=2;
					if((i-1)>=0 && arr[i-1][j]!='#')
						c[j][0][i-1]=1;
				}
				else if(arr[i][j]=='>'){
					if((j-1)>=0 && arr[i][j-1]!='#')
						r[i][2][j-1]=2;
					if((j+1)<col && arr[i][j+1]!='#')
						r[i][0][j+1]=1;
					if((i+1)<row && arr[i+1][j]!='#')
						c[j][1][i+1]=2;
					if((i-1)>=0 && arr[i-1][j]!='#')
						c[j][3][i-1]=1;
				}
				else if(arr[i][j]=='v'){
					if((j-1)>=0 && arr[i][j-1]!='#')
						r[i][1][j-1]=2;
					if((j+1)<col && arr[i][j+1]!='#')
						r[i][3][j+1]=1;
					if((i-1)>=0 && arr[i-1][j]!='#')
						c[j][2][i-1]=1;
					if((i+1)<row && arr[i+1][j]!='#')
						c[j][0][i+1]=2;
				}
			}
		}
		FOR(i,0,row){
			FOR(move,0,4){
				flag=0;
				FOR(j,0,col){
					if(r[i][move][j]==1)
						flag=1;
					if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='>' || arr[i][j]=='v')
						flag=0;
					if(r[i][move][j]==0)
					r[i][move][j]=flag;		
				}
				flag=0;
				FORR(j,col-1,0){
					if(r[i][move][j]==2)
						flag=2;
					if(arr[i][j]=='#' || arr[i][j]=='<' || arr[i][j]=='^' || arr[i][j]=='>' || arr[i][j]=='v')
						flag=0;
					if(r[i][move][j]==0)
					r[i][move][j]=flag;
				}
			}
		}
		FOR(i,0,col){
			FOR(move,0,4){
				flag=0;
				FOR(j,0,row){
					if(c[i][move][j]==2){
						//cout<<"col = "<<i<<" row= "<<j<<" move= "<<move<<endl;
						flag=2;}
					if(arr[j][i]=='#' || arr[j][i]=='<' || arr[j][i]=='^' || arr[j][i]=='>' || arr[j][i]=='v')
						flag=0;
					//cout<<"flag= "<<flag<<endl;
					if(c[i][move][j]==0)
					c[i][move][j]=flag;		
				}
				flag=0;
				FORR(j,row-1,0){
					if(c[i][move][j]==1)
						flag=1;
					if(arr[j][i]=='#' || arr[j][i]=='<' || arr[j][i]=='^' || arr[j][i]=='>' || arr[j][i]=='v')
						flag=0;
					if(c[i][move][j]==0)
					c[i][move][j]=flag;
				}
			}
		}
//	cout<<"sdssd = "<<c[2][2][1]<<endl;
		flag=0;
		while(!q.empty())
			q.pop();
		q.push((in){a,b,0});
		while(!q.empty()){
			a=q.front().x;
			b=q.front().y;
			asd=q.front().dist;
			q.pop();
			if(arr[a][b]=='G'){
				flag=1;
				break;
			}
			//cout<<"a= "<<a<<" b= "<<b<<endl;//" laser= "<<r[a][temp][b]<<" "<<c[b][temp][a]<<endl;
			asd++;
			temp=asd;
			temp=temp%4;
			if((b+1)<col && (arr[a][b+1]=='.' || arr[a][b+1]=='S' || arr[a][b+1]=='G') && r[a][temp][b+1]==0 && c[b+1][temp][a]==0 && visit[a][temp][b+1]==0){
			//	cout<<"aa= "<<a<<" bb= "<<b+1<<endl;
				visit[a][temp][b+1]=1;
				q.push((in){a,b+1,asd});
			}
			if((b-1)>=0 && (arr[a][b-1]=='.' || arr[a][b-1]=='S' || arr[a][b-1]=='G') && r[a][temp][b-1]==0 && c[b-1][temp][a]==0 && visit[a][temp][b-1]==0){
				//cout<<"aa= "<<a<<" bb= "<<b-1<<endl;	
				visit[a][temp][b-1]=1;
				q.push((in){a,b-1,asd});
			}
			if((a+1)<row && (arr[a+1][b]=='.' || arr[a+1][b]=='S' || arr[a+1][b]=='G') && r[a+1][temp][b]==0 && c[b][temp][a+1]==0 && visit[a+1][temp][b]==0){
				visit[a+1][temp][b]=1;
					//cout<<"aa= "<<a+1<<" bb= "<<b<<endl;
				q.push((in){a+1,b,asd});
			}
			if((a-1)>=0 && (arr[a-1][b]=='.' || arr[a-1][b]=='S' || arr[a-1][b]=='G') && r[a-1][temp][b]==0 && c[b][temp][a-1]==0 && visit[a-1][temp][b]==0){
				visit[a-1][temp][b]=1;
					//cout<<"aa= "<<a-1<<" bb= "<<b<<endl;
				q.push((in){a-1,b,asd});
			}
		}
		printf("Case #%d: ",k);
		if(flag==1){
			printf("%d\n",asd);
		}
		else 
			printf("impossible\n");
	}
    return 0;
}

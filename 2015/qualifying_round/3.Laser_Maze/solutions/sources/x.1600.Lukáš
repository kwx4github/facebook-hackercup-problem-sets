#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
#define MP make_pair
#define PB push_back
#define TR(it,c) for( typeof(c.begin()) it = c.begin(); it != c.end(); ++it )
#define TRR(it,c) for( typeof(c.rbegin()) it = c.rbegin(); it != c.rend(); ++it
#define REP(i,a) for (int i = 0; i < (a); i++)
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for (int i = (a); i >= (b); i--)

#define DRI(a) int a; scanf("%d", &a);
#define DRII(a, b) int a, b; scanf("%d %d", &a, &b);
#define DRIII(a, b, c) int a, b, c; scanf("%d %d %d", &a, &b, &c);
#define RI(a) scanf("%d", &a);
#define RII(a, b) scanf("%d %d", &a, &b);
#define RIII(a, b, c) scanf("%d %d %d", &a, &b, &c);
#define MM(arr, num) memset((arr), (num), sizeof((arr)))
#define DEB(x) cerr << ">>> " << (#x) << " -> " << (x) << endl;
#define DEBA(x,n) cerr << (#x) << " "; deba((x),(n));
void deba(int * a, int n){ cerr << "| "; REP(i,n) cerr << a[i] << " "; cerr << "|" << endl;}


inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }

const int INF = 1<<29;
typedef long long ll;
typedef unsigned long long ull;
/*******************************************************/
char maze[5][105][105];
int sy,sx,gy,gx;
bool visited[5][105][105];

void fill (int y, int x, int time, int dir){
  switch(dir){
    case 0:
      while(maze[time][y][--x] == '.') maze[time][y][x] = '#';  break;
    case 1:
      while(maze[time][--y][x] == '.') maze[time][y][x] = '#';  break;
    case 2:
      while(maze[time][y][++x] == '.') maze[time][y][x] = '#';  break;
    case 3:
      while(maze[time][++y][x] == '.') maze[time][y][x] = '#';  break;
  }
}

int bfs(){
  queue<int> q;
  int t = 0;
  q.push(sy);q.push(sx);q.push(t); visited[0][sy][sx] = true;
  while(!q.empty()){
    sy = q.front(); q.pop();
    sx = q.front(); q.pop();
    t = q.front(); q.pop();
    if(sx==gx && sy==gy)return t;
    t++;
    if(!visited[t%4][sy][sx+1] && maze[t%4][sy][sx+1]=='.' ){ q.push(sy);q.push(sx+1);q.push(t); visited[t%4][sy][sx+1] = 1;}
    if(!visited[t%4][sy][sx-1] && maze[t%4][sy][sx-1]=='.' ){ q.push(sy);q.push(sx-1);q.push(t); visited[t%4][sy][sx-1] = 1;}
    if(!visited[t%4][sy+1][sx] && maze[t%4][sy+1][sx]=='.' ){ q.push(sy+1);q.push(sx);q.push(t); visited[t%4][sy+1][sx] = 1;}
    if(!visited[t%4][sy-1][sx] && maze[t%4][sy-1][sx]=='.' ){ q.push(sy-1);q.push(sx);q.push(t); visited[t%4][sy-1][sx] = 1;}
  }

  return -1;
}

int main() {

  DRI(cs);

  FOR(ii,1,cs){

    DRII(m,n);
    REP(i,m)scanf("%s",maze[4][i+1]+1);
    REP(i,m+2)maze[4][i][0]=maze[4][i][n+1] ='#';
    REP(i,n+2)maze[4][0][i]=maze[4][m+1][i] ='#';
    m+=2;n+=2;


    REP(i,m)REP(j,n){
      if (maze[4][i][j] == 'S') sy = i, sx = j, maze[4][i][j] = '.';
      if (maze[4][i][j] == 'G') gy = i, gx = j, maze[4][i][j] = '.';
    }
    REP(i,m)REP(j,n) REP(k,4) maze[k][i][j] = maze[4][i][j];

    REP(i,m)REP(j,n){
      switch (maze[4][i][j]){
        case '<':
          REP(k,4)fill(i,j, k, (k+0)%4);
          break;
        case '^':
          REP(k,4)fill(i,j, k, (k+1)%4);
          break;
        case '>':
          REP(k,4)fill(i,j, k, (k+2)%4);
          break;
        case 'v':
          REP(k,4)fill(i,j, k, (k+3)%4);
          break;
      }
    }
    //REP(h,4) {REP(i,m){REP(j,n) cout << maze[h][i][j]; cout << endl;} cout << endl << endl;}

    REP(t,4)REP(i,m+2)REP(j,n+2)visited[t][i][j] = false;
    int res = bfs();
    (res < 0) ? printf("Case #%d: impossible\n",ii) : printf("Case #%d: %d\n",ii,res);
  }


  return 0;
}

package QualificationRound;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class LaserMaze {

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br=new BufferedReader(new FileReader(new File("input.txt")));
		PrintWriter pw=new PrintWriter(new File("output.txt"));
		
		
		int T;
		T=Integer.parseInt(br.readLine());
		for(int t=0;t<T;t++)
		{
			int M,N;
			String line=br.readLine();
			String [] parts=line.split(" ");
			M=Integer.parseInt(parts[0]);
			N=Integer.parseInt(parts[1]);
			
			
			String [] maze=new String[M];
			ArrayList<String> lasers=new ArrayList<String> ();
			int starti,startj; 
			starti=startj=0;
			for(int i=0;i<M;i++)
			{
				maze[i]=br.readLine();
				for(int j=0;j<N;j++)
				{
					if (maze[i].charAt(j)=='S')
					{
						starti=i;
						startj=j;
					}
				}
			}
			
			StringBuilder [][] shots=new StringBuilder[4][M];
			for(int i=0;i<4;i++)
			{
				for(int j=0;j<M;j++)
				{
					shots[i][j]=new StringBuilder();
					for(int s=0;s<maze[j].length();s++)
					{
						shots[i][j].append(maze[j].charAt(s));
					}
				}
			}
			
			//> ==0
			//v ==1
			//< ==2
			//^ ==3
			
			for(int pos=0;pos<4;pos++)
			{
				for(int i=0;i<M;i++)
				{
					for(int j=0;j<N;j++)
					{
						if (maze[i].charAt(j)=='.' || maze[i].charAt(j)=='#' || maze[i].charAt(j)=='S' || maze[i].charAt(j)=='G')
							continue;
						
						int tempPos=0;
						if (maze[i].charAt(j)=='>')
							tempPos=0;
						if (maze[i].charAt(j)=='v')
							tempPos=1;
						if (maze[i].charAt(j)=='<')
							tempPos=2;
						if(maze[i].charAt(j)=='^')
							tempPos=3;
						
						int res=(tempPos+pos)%4;
						
						if (res==0)
						{
							for(int k=j+1;k<N;k++)
							{
								if (toStop(maze[i].charAt(k)))
									break;
								shots[pos][i].setCharAt(k, 'p');
							}
						}
						if (res==1)
						{
							for(int k=i+1;k<M;k++)
							{
								if (toStop(maze[k].charAt(j)))
									break;
								shots[pos][k].setCharAt(j, 'p');
							}
						}
						if (res==2)
						{
							for(int k=j-1;k>=0;k--)
							{
								if (toStop(maze[i].charAt(k)))
									break;
								shots[pos][i].setCharAt(k, 'p');
							}
						}
						if (res==3)
						{
							for(int k=i-1;k>=0;k--)
							{
								if (toStop(maze[k].charAt(j)))
									break;
								shots[pos][k].setCharAt(j, 'p');
							}
						}
					}
				}
			}
			
			
			Queue<Node> red=new LinkedList<Node> ();
			
			Node start=new Node(starti,startj,0);
			
			red.add(start);
			
			
			int finish=-1;
			boolean visited[][][]=new boolean[M][N][4];
			while (!red.isEmpty())
			{
				Node top=red.poll();
				
				if ((top.i<0 || top.i>=M || top.j>=N || top.j<0 || toStop(maze[top.i].charAt(top.j)) || shots[top.path%4][top.i].charAt(top.j)=='p')&& top.path!=0)
					continue;
				
				if (visited[top.i][top.j][top.path%4])
					continue;
				
				visited[top.i][top.j][top.path%4]=true;
				
				
				if (maze[top.i].charAt(top.j)=='G')
				{
					finish=top.path;
					break;
				}
				red.add(new Node(top.i+1,top.j,top.path+1));
				red.add(new Node(top.i-1,top.j,top.path+1));
				red.add(new Node(top.i,top.j+1,top.path+1));
				red.add(new Node(top.i,top.j-1,top.path+1));
			}
			
			
			if (finish!=-1)
			{
				pw.println(String.format("Case #%d: %d", t+1,finish));
			}
			else
			{
				pw.println(String.format("Case #%d: impossible", t+1));
			}
			
			
		}
		
		pw.flush();
		pw.close();
		
	}
	
	public static boolean toStop(char k)
	{
		return k=='>' || k=='v' || k=='<' || k=='^' || k=='#';
	}
	
	
	static class Node
	{
		int i;
		int j;
		int path;
		
		public Node(int i,int j, int path)
		{
			this.i=i;
			this.j=j;
			this.path=path;
		}
	}
}

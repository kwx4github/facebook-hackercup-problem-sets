#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#include <cstring>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     (A).begin(), (A).end()
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define DEBUG 1

using namespace std;

char grid[105][105];

int m,n;

typedef struct block
{
	int i,j,t;
}block;

int isvalid(int i,int j)
{
	if(i>=0&&i<m&&j>=0&&j<n)
		return 1;
	return 0;
}

int isempty(int i,int j)
{
	if(!isvalid(i,j))
		return 0;
	if(grid[i][j]=='.'||grid[i][j]=='S'||grid[i][j]=='G')
		return 1;
	return 0;
}

bool danger[105][105][4]={0};
bool vis[105][105][4]={0};

void markdanger(int i,int j)
{
	char ch=grid[i][j];
	int g;
	switch(ch)
	{
		case '^':
			g=0;
			break;
		case '>':
			g=1;
			break;
		case 'v':
			g=2;
			break;
		case '<':
			g=3;
			break;
	}
	int move_x[4]={-1,0,1,0};
	int move_y[4]={0,1,0,-1};

	int total=4,steps=0;

	for(steps=0;steps<total;steps++)
	{
		int cur_x=i,cur_y=j;
		while(1)
		{
			cur_x+=move_x[(g+steps)%4];
			cur_y+=move_y[(g+steps)%4];
			if(!isempty(cur_x,cur_y))
				break;
			else
			{
				danger[cur_x][cur_y][steps]=1;
			}
		}
	}

}

block make_block(int i,int j,int t)
{
	block b;
	b.i=i,b.j=j,b.t=t;
	return b;
}

int main()
{
	int tc,z;
	cin>>tc;
	for(z=1;z<=tc;z++)
	{
		cin>>m>>n;
		int i,j,k,start_i,start_j,end_i,end_j;
		char ch;
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				cin>>grid[i][j];
				if(grid[i][j]=='S')
				{
					start_i=i,start_j=j;
				}
				if(grid[i][j]=='G')
				{
					end_i=i,end_j=j;
				}

			}
		}
		/*
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
				cout<<grid[i][j];
			cout<<endl;
		}*/
		memset(danger,0,sizeof(danger));
		memset(vis,0,sizeof(vis));
		
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				if(grid[i][j]=='^'||grid[i][j]=='>'||grid[i][j]=='v'||grid[i][j]=='<')
					markdanger(i,j);
			}
		}

		int win=0;
		int possible=1;
		if(danger[end_i][end_j][0]==1&&danger[end_i][end_j][1]==1&&danger[end_i][end_j][2]==1&&danger[end_i][end_j][3]==1)
			possible=0;

		queue<block> myq;

		if(possible)
		{
			vis[start_i][start_j][0]=1;
			myq.push(make_block(start_i,start_j,0));
		}
		block temp;
		while(!myq.empty())
		{
			temp=myq.front();
			myq.pop();
			if(grid[temp.i][temp.j]=='G')
			{
				win=1;
				break;
			}
			int move_x[4]={-1,0,1,0};
			int move_y[4]={0,1,0,-1};

			int total=4,steps=0;

			for(steps=0;steps<total;steps++)
			{
				int cur_x=temp.i,cur_y=temp.j,time=temp.t+1;
					cur_x+=move_x[steps];
					cur_y+=move_y[steps];
					if(isempty(cur_x,cur_y)&&!danger[cur_x][cur_y][time%4]&&!vis[cur_x][cur_y][time%4])
					{
						vis[cur_x][cur_y][time%4]=1;
						myq.push(make_block(cur_x,cur_y,time));
					}
			}

		}

		if(win)
			cout<<"Case #"<<z<<": "<<temp.t<<endl;
		else
			cout<<"Case #"<<z<<": impossible"<<endl;

	}
	return 0;
}

#include<iostream>
#include<algorithm>
#include<string.h>
#include<stdio.h>


using namespace std;

int m,n,a[110][110][4],vis[110][110][4];
char s[110][110];
struct node
{
	int i;
	int j;
	int val;
};
struct node queue[100010];
void assign(int i,int j,int dx,int dy,int val)
{
	a[i][j][0]=a[i][j][1]=a[i][j][2]=a[i][j][3]=1;
	i+=dx;
	j+=dy;
	while(i>=0 && i<n && j>=0 && j<m && s[i][j]!='#')
	{
		a[i][j][val]=1;
		i+=dx;
		j+=dy;
	}
}
void init()
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			for(int k=0;k<4;k++)
            {
                a[i][j][k]=0;
                vis[i][j][k]=0;
            }
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(s[i][j]=='^')
			{
				// assign for diff turn
				assign(i,j,-1,0,0);
				assign(i,j,0,1,1);
				assign(i,j,1,0,2);
				assign(i,j,0,-1,3);
			}
			else if(s[i][j]=='>')
			{
				// assign for diff turn
				assign(i,j,-1,0,3);
				assign(i,j,0,1,0);
				assign(i,j,1,0,1);
				assign(i,j,0,-1,2);
			}
			else if(s[i][j]=='v')
			{
				// assign for diff turn
				assign(i,j,-1,0,2);
				assign(i,j,0,1,3);
				assign(i,j,1,0,0);
				assign(i,j,0,-1,1);
			}
			else if(s[i][j]=='<')
			{
				// assign for diff turn
				assign(i,j,-1,0,1);
				assign(i,j,0,1,2);
				assign(i,j,1,0,3);
				assign(i,j,0,-1,0);
			}
		}
	}
}
void bfs(int c)
{
	int top=-1,sx,sy,fx,fy,bottom=0;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(s[i][j]=='S')
			{
				sx=i;
				sy=j;
			}
			if(s[i][j]=='G')
			{
				fx=i;
				fy=j;
			}
		}
	}
	queue[++top].i = sx;
	queue[top].j = sy;
	queue[top].val = 0;
	vis[sx][sy][0]=1;
	int ans=-1;
	struct node temp;
	int dx[]={0,0,1,-1};
	int dy[]={1,-1,0,0};
	while(bottom<=top)
	{
		temp.i=queue[bottom].i;
		temp.j=queue[bottom].j;
		temp.val=queue[bottom].val;
		bottom++;
		if(temp.i==fx && temp.j==fy)
		{
			ans=temp.val;
			break;
		}
		for(int l=0;l<4;l++)
		{
			int nx=temp.i+dx[l];
			int ny=temp.j+dy[l];
			//printf("%d %d %d\n",nx,ny,temp.val+1);
			if(nx<0 || nx>=n || ny<0 || ny>=m || s[nx][ny]=='#' || a[nx][ny][(temp.val+1)%4] || vis[nx][ny][(temp.val+1)%4])	continue;
			//printf("%d %d %d\n",nx,ny,temp.val+1);
			queue[++top].i=nx;
			queue[top].j = ny;
			queue[top].val = temp.val+1;
			vis[nx][ny][(temp.val+1)%4]=1;
		}
	}
	if(ans==-1)
	{
		printf("Case #%d: impossible\n",c);
	}
	else
	{
		printf("Case #%d: %d\n",c,ans);
	}
}
int main()
{
	int t,q=0;
	scanf("%d",&t);
	while(t--)
	{
		q++;
		scanf("%d%d",&n,&m);
		for(int i=0;i<n;i++)
		{
			scanf("%s",&s[i]);
		}
		init();
		bfs(q);
	}
	return 0;
}

/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
struct debugger{template<typename T> debugger& operator,(const T& v){cout<<v<<" ";return *this;}}dbg;
#define db(args...) do {cout << #args << ": "; dbg,args; cout << endl;} while(0)
#define ii pair<int,int>
struct node{
    int x;
    int y;
    int dir;
    int cost;
    node(int x,int y,int dir,int cost)
    {
        this->x=x;
        this->y=y;
        this->dir=dir;
        this->cost=cost;
    }
};
struct compare  
{  
    bool operator()(const node& l, const node& r)  
    {  
        return l.cost > r.cost;
    }  
};  
int dx[]={1,-1,0,0};
int dy[]={0,0,-1,1};
int get_dir(char lazer)
{
    if(lazer=='<')
        return 0;
    else if(lazer=='^')
        return 1;
    else if(lazer=='>')
        return 2;
    else if(lazer=='v')
        return 3;
    assert(0);
}
int get_dir2(int x,int y)
{
    if(x==1&&y==0)
        return 0;
    if(x==-1&&y==0)
        return 2;
    if(x==0&&y==-1)
        return 1;
    if(x==0&&y==1)
        return 3;
    assert(0);

}
bool islazer(char lazer)
{
    if(lazer=='<')
        return true;
    else if(lazer=='^')
        return true;
    else if(lazer=='>')
        return true;
    else if(lazer=='v')
        return true;
    else
        return false;
}
bool isblocked(char v)
{
    return (islazer(v)||v=='#');
}

int main()
{
    freopen("in","r",stdin);
    freopen("out","w",stdout);

    int kase=0;
    int test;s(test);
    for(int kase=1;kase<=test;kase++)
    {
        int n,m;cin>>n>>m;
        vector<string> grid(n);
        for(int i=0;i<n;i++)
            cin>>grid[i];

        bool ok[n][m][4];
        int dist[n][m][4];
        bool visit[n][m][4];
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                for(int k=0;k<4;k++)
                {
                    dist[i][j][k]=INT_MAX;
                        visit[i][j][k]=false;
                        ok[i][j][k]=false;
                }


        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
            {
                if(isblocked(grid[i][j]))
                    continue;
                for(int k=0;k<4;k++)
                {
                    int flag=true;
                    for(int l=0;l<4;l++)
                    {
                        int nx=i,ny=j;
                        while(!isblocked(grid[nx][ny]))
                        {
                            nx+=dx[l];
                            ny+=dy[l];
                            if(nx>=n||nx<0||ny<0||ny>=m)
                                break;
                        }
                        if(nx>=n||nx<0||ny<0||ny>=m){}
                        else
                        {
                            assert(isblocked(grid[nx][ny]));
                            if(islazer(grid[nx][ny]))
                            {
                                int t1=(get_dir(grid[nx][ny])+k)%4;
                                int t2=get_dir2(dx[l],dy[l]);
                                if(t1==t2)
                                    flag=false;
                            }

                        }
                        if(!flag)break;
                    }
                    ok[i][j][k]=flag;
                }
            }
        int startx,starty,endx,endy;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(grid[i][j]=='S')
                    startx=i,starty=j;
                else if(grid[i][j]=='G')
                    endx=i,endy=j;

        dist[startx][starty][0]=0;

        priority_queue<node,vector<node>,compare>  q;
        q.push(node(startx,starty,0,0));
        while(q.size()>0)
        {
            node curr=q.top();q.pop();
            int cx=curr.x;
            int cy=curr.y;
            int dir=curr.dir;
            int cost=curr.cost;
            if(visit[cx][cy][dir]) continue;
            visit[cx][cy][dir]=1;


            for(int i=0;i<4;i++)
            {
                int nx=cx+dx[i];
                int ny=cy+dy[i];
                int ndir=(dir+1)%4;

                if(nx>=n||nx<0||ny<0||ny>=m)
                    continue;
                if(grid[nx][ny]=='#' || islazer(grid[nx][ny]))
                    continue;
                if(visit[nx][ny][ndir] ||  !ok[nx][ny][dir]) continue;

                if(dist[nx][ny][ndir]>cost+1)
                {
                    dist[nx][ny][ndir]=cost+1;
                    q.push(node(nx,ny,ndir,cost+1));
                }


            }
        }
        int ans=INT_MAX;
        for(int i=0;i<4;i++)
            ans=min(ans,dist[endx][endy][i]);
        if(ans==INT_MAX)
            printf("Case #%d: impossible\n",kase);
        else
            printf("Case #%d: %d\n",kase,ans);
    }
    return 0;
}


#include <iostream>
#include <vector>
#include<algorithm>
#include <tuple>
using namespace std;
int dp[105][105][5];
char tab[105][105];
bool laser(char c) {
    return c == '^'||c=='>'||c=='v'||c=='<';
}
bool blocking(char c){
    return laser(c) || c=='#';
}
int decode(char c) {
    if(c == '^') return 0;
    if(c == '>') return 1;
    if(c == 'v') return 2;
    if(c == '<') return 3;
}
void incr(int &I, int &J, int num) {
    if(num % 4 == 0) {
        I--;return;
    }
    if(num % 4 == 1) {
        J++;return;
    }
    if(num % 4 == 2) {
        I++;return;
    }
    if(num % 4 == 3) {
        J--;return;
    }
    
}
        vector<tuple<int, int, int>> q, new_q;
void go(int tt) {
    while(new_q.size()) {
            
            q = new_q;
            new_q.clear();
            for(auto a: q) {
                int x, y, num;
                tie(x, y, num) = a;
//                 cout << x << " " << y << " " << num << "\n";
                if(tab[x][y] == 'G') {
                    cout << "Case #" << tt <<": "<< num << "\n";
                    return;
                }
                for(int k =  0; k < 4; ++k){
                    int X, Y;
                    tie(X, Y, num) = a;
                    incr(X, Y, k);
                    if(dp[X][Y][(num+1)%4]>0) {
                        new_q.emplace_back(X, Y, num+1);
                        dp[X][Y][(num+1)%4] = 0;
                    }
                }
            }
        }
        cout << "Case #" << tt <<": impossible\n";
}
int main() {
    ios_base::sync_with_stdio(0);
    int t;
    cin >> t;
    for(int tt = 1; tt <=t; ++tt) {
        int m, n, si, sj;
        cin >> m >> n;
        for(int i = 0; i <= m+1; ++i) 
            for(int j = 0; j <= n+1; ++j) {
                tab[i][j] = '#';
                for(int x = 0; x < 4; ++x)
                    dp[i][j][x] = 100000000;
            }
        for(int i = 1; i <= m; ++i) 
            for(int j = 1; j <= n; ++j) 
                cin >> tab[i][j];
        
        for(int i = 0; i <= m+1; ++i) 
            for(int j = 0; j <= n+1; ++j) {
                if(blocking(tab[i][j])) {
                    for(int x = 0; x < 4; ++x)
                        dp[i][j][x] = -1;
                }
                if(laser(tab[i][j])) {
                    for(int x = 0; x < 4; ++x) {
                        int J=j, I=i, d = decode(tab[i][j]);
//                         cout << "hopa: "<< x << " " << d << "\n";
                        incr(I, J, d+x);
                        while(!blocking(tab[I][J])) {
                            dp[I][J][x] = -1;
                            incr(I, J, d+x);
                        }
                    }
                }
                if(tab[i][j] == 'S') {
                    si = i;
                    sj = j;
                }
            }
        
        for(int i = 1; i <= m; ++i) 
            for(int j = 1; j <= n; ++j) {
//                 cout << i << " "<< j << ": dp=" <<dp[i][j][0]<<" "<<dp[i][j][1]<<" "<<dp[i][j][2]<<" "<<dp[i][j][3]<<"\n";
            }
//         if(dp[si][sj][0] != -1)
            new_q.emplace_back(si, sj, 0);
        go(tt);
    }


    return 0;
}
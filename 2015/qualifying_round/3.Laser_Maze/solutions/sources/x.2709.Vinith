#include<iostream>
using namespace std;
int m,n;
int sx,sy,gx,gy;
int ans;
char maze[111][111];
bool isSafe[111][111][4];
int visited[111][111][4];
char laser[]={'<','^','>','v'};
bool isLaser(char c){
  return c=='<'||c=='>'||c=='^'||c=='v';
}
bool isPath(char c){
  return c=='.'||c=='S'||c=='G';
}
int getPos(char c){
  for(int i=0;i<4;i++)
    if(laser[i]==c)
      return i;
  return -1;
}
void preProcessSafety(){
  for(int i=0;i<m;i++){
    for(int k=0;k<n;k++){
      if(!isLaser(maze[i][k]))continue;
      char curLaser;
      int curPos=getPos(maze[i][k]);
      for(int pos=0;pos<4;pos++){
        curLaser=laser[curPos];
        if(curLaser=='<'){
          for(int d=k-1;d>=0;d--)
            if(isPath(maze[i][d]))isSafe[i][d][pos]=false;
        } else if(curLaser=='>'){
          for(int d=k+1;d<n;d++)
            if(isPath(maze[i][d]))isSafe[i][d][pos]=false;
        } else if(curLaser=='^'){
          for(int d=i-1;d>=0;d--)
            if(isPath(maze[d][k]))isSafe[d][k][pos]=false;
        } else {
          for(int d=i+1;d<m;d++)
            if(isPath(maze[d][k]))isSafe[d][k][pos]=false;
        }
        curPos=(curPos+1)%4;
      }
    }
  }
}
void solve(int,int,int);
bool isInBounds(int x,int y){
  return x>=0&&x<m&&y>=0&&y<n;
}
void checkAndCall(int tx,int ty,int steps){
  if(isInBounds(tx,ty)&&isPath(maze[tx][ty]))
    solve(tx,ty,steps+1);
}
void solve(int cx,int cy,int steps){
  //cout<<cx<<" "<<cy<<" "<<maze[cx][cy]<<" "<<steps<<"\n";
  if(steps!=0 && (!(isSafe[cx][cy][steps%4])||(visited[cx][cy][steps%4]<=steps)))
    return;
  else if(cx==gx&&cy==gy){
    ans=min(ans,steps);
    return;
  } else {
    visited[cx][cy][steps%4]=steps;
    checkAndCall(cx,cy-1,steps);
    checkAndCall(cx-1,cy,steps);
    checkAndCall(cx,cy+1,steps);
    checkAndCall(cx+1,cy,steps);
  }
}
int main(){
  int t;
  scanf("%d",&t);
  for(int tc=1;tc<=t;tc++){
    scanf("%d %d\n",&m,&n);
    for(int i=0;i<m;i++){
      for(int k=0;k<n;k++){
        scanf("%c",&maze[i][k]);
        if(maze[i][k]=='S'){
          sx=i; sy=k;
        } else if(maze[i][k]=='G'){
          gx=i; gy=k;
        }
        for(int q=0;q<4;q++){
          isSafe[i][k][q]=true;
          visited[i][k][q]=123456789;
        }
      }
      getchar();
    }
    preProcessSafety();
    ans=123456789;
    solve(sx,sy,0);
    printf("Case #%d: ",tc);
    if(ans!=123456789)printf("%d\n",ans);
    else printf("impossible\n");
  }
  return 0;
}

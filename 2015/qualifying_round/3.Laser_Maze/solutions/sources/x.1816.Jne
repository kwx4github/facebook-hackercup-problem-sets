#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;

char g[110][110];
bool o[110][110][4];
bool vst[110][110][4];
int dis[110][110][4];

void seto(int n, int m, int x, int y, int s) {
	for(int j = 0; j < y; j ++)
		o[x][j][s] = false;
	s = (s + 1) % 4;
	for(int i = 0; i < x; i ++)
		o[i][y][s] = false;
	s = (s + 1) % 4;
	for(int j = y; j < m; j ++)
		o[x][j][s] = false;
	s = (s + 1) % 4;
	for(int i = x; i < n; i ++)
		o[i][y][s] = false;
}

struct node
{
	int x, y, z;
};

bool chk(int n, int m, int x, int y, int z) {
	if(x >= n || x < 0 || y >= m || y < 0)
		return false;
	if(!o[x][y][z])
		return false;
	if(g[x][y] == '.' || g[x][y] == 'S' || g[x][y] == 'G')
		return true;
	return false;
}

bool chk_min(int &a, int b) {
	return a > b? a = b, true: false;
}

int spfa(int n, int m) {
	int dx[4] = {0, -1, 0, 1};
	int dy[4] = {-1, 0, 1, 0};
	node s;
	for(int i = 0; i < n; i ++)
		for(int j = 0; j < m; j ++)
			if(g[i][j] == 'S')
				s = (node){i, j, 0};
	queue<node> q;
	memset(vst, false, sizeof vst);
	memset(dis, 127, sizeof dis);
	vst[s.x][s.y][s.z] = true;
	dis[s.x][s.y][s.z] = 0;
	q.push(s);
	while(!q.empty()) {
		node u = q.front();
		q.pop();
		vst[u.x][u.y][u.z] = false;
		for(int i = 0; i < 4; i ++) {
			int x = u.x + dx[i];
			int y = u.y + dy[i];
			int z = (u.z + 1) % 4;
			if(!chk(n, m, x, y, z))
				continue;
			if(chk_min(dis[x][y][z], dis[u.x][u.y][u.z] + 1))
				if(!vst[x][y][z]) {
					vst[x][y][z] = true;
					q.push((node){x, y, z});
					if(g[x][y] == 'G')
						return dis[x][y][z];
				}
		}
	}
	return -1;
}

int main() {
	freopen("laser_maze.txt", "r", stdin);
	freopen("out3.txt", "w", stdout);
	int T, ca = 0;
	scanf("%d", &T);
	while(T --) {
		int n, m;
		scanf("%d%d", &n, &m);
		memset(o, true, sizeof o);
		for(int i = 0; i < n; i ++)
			scanf("%s", g[i]);
		for(int i = 0; i < n; i ++)
			for(int j = 0; j < m; j ++) {
				if(g[i][j] == '<')
					seto(n, m, i, j, 0);
				if(g[i][j] == 'v')
					seto(n, m, i, j, 1);
				if(g[i][j] == '>')
					seto(n, m, i, j, 2);
				if(g[i][j] == '^')
					seto(n, m, i, j, 3);
			}
		int ans = spfa(n, m);
		if(ans == -1) 
			printf("Case #%d: impossible\n", ++ ca);
		else
			printf("Case #%d: %d\n", ++ca, ans);
	}
}
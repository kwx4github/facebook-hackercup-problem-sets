#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

char a[500][500];
int sx, sy, gx, gy;
int n, m;
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};
bool used[200][200][5];
int d[200][200][5];

int gettip(char c) {
    if(c == '#') return -1;
    if(c == '>') return 0;
    if(c == 'v') return 1;
    if(c == '<') return 2;
    return 3;
}

bool check(int x, int y, int st) {
    int xx = x;
    while(xx >= 0 && a[xx][y] == '.') xx--;
    if(xx >= 0) {
        int tip = gettip(a[xx][y]);
        if(tip != -1) {
            tip = (tip + st) % 4;
            if(tip == 1) return false;
        }
    }
    xx = x;
    while(xx < n && a[xx][y] == '.') xx++;
    if(xx < n) {
        int tip = gettip(a[xx][y]);
        if(tip != -1) {
            tip = (tip + st) % 4;
            if(tip == 3) return false;
        }
    }
    int yy = y;
    while(yy >= 0 && a[x][yy] == '.') yy--;
    if(yy >= 0) {
        int tip = gettip(a[x][yy]);
        if(tip != -1) {
            tip = (tip + st) % 4;
            if(tip == 0) return false;
        }
    }
    yy = y;
    while(yy < m && a[x][yy] == '.') yy++;
    if(yy < m) {
        int tip = gettip(a[x][yy]);
        if(tip != -1) {
            tip = (tip + st) % 4;
            if(tip == 2) return false;
        }
    }
    return true;
}

bool ok(int x, int y, int step) {
    return x >= 0 && y >= 0 && x < n && y < m && a[x][y] == '.' && !used[x][y][step] && check(x, y, step);
}

void solve() {
    memset(used, 0, sizeof used);
    memset(d, 0, sizeof d);
    cin >> n >> m;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> a[i][j];
            if(a[i][j] == 'S') {
                sx = i; sy = j;
                a[i][j] = '.';
            }
            if(a[i][j] == 'G') {
                gx = i; gy = j;
                a[i][j] = '.';
            }
        }
    }
    queue <pair <pii, int> > q;
    q.push(mp(mp(sx, sy), 0));
    used[sx][sy][0] = 1;
    d[sx][sy][0] = 0;
    while(!q.empty()) {
        pair <pii, int> temp = q.front(); q.pop();
        int x = temp.f.f;
        int y = temp.f.s;
        int step = temp.s;
        int len = d[x][y][step];
        for(int r = 0; r < 4; r++) {
            int nx = x + dx[r];
            int ny = y + dy[r];
            int nstep = (step + 1) % 4;
            if(ok(nx, ny, nstep)) {
                q.push(mp(mp(nx, ny), nstep));
                d[nx][ny][nstep] = len + 1;
                used[nx][ny][nstep] = 1;
            }
        }
    }
    int mn = inf;
    for(int i = 0; i < 4; i++) {
        if(used[gx][gy][i]) mn = min(mn, d[gx][gy][i]);
    }
    if(mn == inf) cout << "impossible" << endl;
    else printf("%d\n", mn);
}

int main(){
    
    int t;
    
    cin >> t;
    
    for(int i = 1; i <= t; i++) {
        printf("Case #%d: ", i);
        solve();
    }
    
    return 0;
}

package QualificationRound;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.Scanner;

public class C {

	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(new File("C.in.txt"));
		PrintWriter out = new PrintWriter("C.out");
		int tc = in.nextInt();
		int cc = 1;
		// >v<^
		int[] di = { 0, 1, 0, -1 };
		int[] dj = { 1, 0, -1, 0 };
		int[] index = new int[128];
		index['>'] = 0;
		index['v'] = 1;
		index['<'] = 2;
		index['^'] = 3;
		String blocks = "<>v^#";
		while (tc-- > 0) {
			int n = in.nextInt();
			int m = in.nextInt();
			Queue<int[]> q = new ArrayDeque<int[]>();
			int[][] dead = new int[n][m];
			int[][][] dist = new int[n][m][4];
			char[][] map = new char[n][];
			for (int i = 0; i < n; i++)
				map[i] = in.next().toCharArray();
			int[] src = null;
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					if (map[i][j] == 'S') {
						src = new int[] { i, j };
					} else if (map[i][j] == '<' || map[i][j] == '>'
							|| map[i][j] == '^' || map[i][j] == 'v') {
						int p = index[map[i][j]];
						for (int k = 0; k < 4; k++) {
							int ci = i + di[(p + k) % 4];
							int cj = j + dj[(p + k) % 4];
							while (ci >= 0 && cj >= 0 && ci < n && cj < m
									&& !blocks.contains(map[ci][cj] + "")) {
								dead[ci][cj] |= 1 << k;
								ci = ci + di[p];
								cj = cj + dj[p];
							}
						}
					}
			for (int[][] a : dist)
				for (int[] b : a)
					Arrays.fill(b, Integer.MAX_VALUE);
			for (int i = 0; i < 4; i++) {
				int ci = src[0] + di[i];
				int cj = src[1] + dj[i];
				if (ci >= 0 && cj >= 0 && ci < n && cj < m
						&& !blocks.contains(map[ci][cj] + "")) {
					q.add(new int[] { ci, cj, 1 });
					dist[ci][cj][1] = 1;
				}

			}
			int ans = -1;
			while (!q.isEmpty()) {
				int[] node = q.poll();
				int i = node[0];
				int j = node[1];
				int t = node[2];
				if ((dead[i][j] & 1 << t) != 0)
					continue;
				if (map[i][j] == 'G') {
					ans = dist[i][j][t];
					break;
				}
				for (int d = 0; d < 4; d++) {
					int ci = i + di[d];
					int cj = j + dj[d];
					int nt = (t + 1) % 4;
					if (ci >= 0 && cj >= 0 && ci < n && cj < m
							&& !blocks.contains(map[ci][cj] + "")
							&& dist[ci][cj][nt] == Integer.MAX_VALUE) {
						q.add(new int[] { ci, cj, nt });
						dist[ci][cj][nt] = dist[i][j][t] + 1;
					}
				}
			}
			if (ans != -1)
				out.printf("Case #%d: %d\n", cc++, ans);
			else
				out.printf("Case #%d: %s\n", cc++, "impossible");
		}
		out.close();
	}
}

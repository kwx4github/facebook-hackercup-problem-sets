#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
 
#define LL long long
#define vi vector<int>
#define pb push_back
#define sz size
#define all(x) (x).begin(),(x).end()
#define it iterator
#define REP(i,a,b) for(int i=(a);i<(b);i++)
#define REPX(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DEP(i,a,b) for(int i=(a)-1;i>=(b);i--)
#define REX(i,x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end();i++)
#define pii pair<int,int>
#define mp make_pair
#define fi first
#define se second
#define st string
#define ffo find_first_of
#define su substr
#define vs vector<st>
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define ord(c) (c-'0')
#define mems(x) memset(x,0,sizeof(x))
#define memc(x,y) memcpy(x,y,sizeof(y))
#define is_s(i,j) (x[i][j]=='S')
#define is_e(i,j) (x[i][j]=='G')
#define is_w(i,j) (x[i][j]=='#')
#define is_c(i,j) (x[i][j]=='<' || x[i][j]=='>' || x[i][j]=='^' || x[i][j]=='v')
#define is_v(i,j,n,m) (i>=1 && i<=n && j>=1 && j<=m)
#define MAX 110
#define MOD 1000000007
using namespace std;
char x[MAX][MAX]; int g[MAX][MAX][4],y[MAX][MAX][2],v[MAX][MAX][4],d[MAX][MAX][4];
char ch[5]="^>v<";
inline int val(char a,char b)
{
	int i=find(ch,ch+4,a)-ch;
	int j=find(ch,ch+4,b)-ch;
	return (j-i+4)%4;
}
inline int get_val(int a,int b)
{
	if(b<0) return a;
	if(a<0) return 1+b;
	return min(a,1+b);
}
int dfs(int i,int j,int n,int m,int k)
{
	if(v[i][j][k]) return d[i][j][k];
	v[i][j][k]=1;
	if(is_e(i,j)) return d[i][j][k]=0;
	d[i][j][k]=-1;
	if(is_v(i+1,j,n,m) && g[i+1][j][(k+1)%4]) d[i][j][k]=get_val(d[i][j][k],dfs(i+1,j,n,m,(k+1)%4));
	if(is_v(i-1,j,n,m) && g[i-1][j][(k+1)%4]) d[i][j][k]=get_val(d[i][j][k],dfs(i-1,j,n,m,(k+1)%4));
	if(is_v(i,j+1,n,m) && g[i][j+1][(k+1)%4]) d[i][j][k]=get_val(d[i][j][k],dfs(i,j+1,n,m,(k+1)%4));
	if(is_v(i,j-1,n,m) && g[i][j-1][(k+1)%4]) d[i][j][k]=get_val(d[i][j][k],dfs(i,j-1,n,m,(k+1)%4));
	return d[i][j][k];
}
int main()
{
	int tc; scanf("%d",&tc);
	REP(t,0,tc)
	{
		int n,m; scanf("%d %d",&n,&m);
		REP(i,0,m+2) x[0][i]=x[n+1][i]='.';
		REP(i,1,n+1) 
		{
			x[i][0]='.';
			scanf("%s",&x[i][1]);
			x[i][m+1]='.';
		}
	    REP(i,1,n+1) REP(j,1,m+1) if(!is_w(i,j) && !is_c(i,j))
	    {
	    	REP(k,0,4) g[i][j][k]=1;
	    	if(is_c(i-1,j)) y[i][j][0]=i-1;
	    	else if(!is_w(i-1,j)) y[i][j][0]=y[i-1][j][0];
	    	if(is_c(i,j-1)) y[i][j][1]=j-1;
	    	else if(!is_w(i,j-1)) y[i][j][1]=y[i][j-1][1];
	    	if(y[i][j][0])
	    	{
	    		int k=val(x[y[i][j][0]][j],'v');
	    		g[i][j][k]=0; 
	    	}
	    	if(y[i][j][1])
	    	{
	    		int k=val(x[i][y[i][j][1]],'>');
	    		g[i][j][k]=0;
	    	}
	    }
	    mems(y);
	    DEP(i,n+1,1) DEP(j,m+1,1) if(!is_w(i,j) && !is_c(i,j))
	    {
	    	if(is_c(i+1,j)) y[i][j][0]=i+1;
	    	else if(!is_w(i+1,j)) y[i][j][0]=y[i+1][j][0];
	    	if(is_c(i,j+1)) y[i][j][1]=j+1;
	    	else if(!is_w(i,j+1)) y[i][j][1]=y[i][j+1][1];
	    	if(y[i][j][0])
	    	{
	    		int k=val(x[y[i][j][0]][j],'^');
	    		g[i][j][k]=0; 
	    	}
	    	if(y[i][j][1])
	    	{
	    		int k=val(x[i][y[i][j][1]],'<');
	    		g[i][j][k]=0;
	    	}
	    }
	    int res;
	    REP(i,1,n+1) REP(j,1,m+1) if(is_s(i,j)) res=dfs(i,j,n,m,0);
	    printf("Case #%d: ",t+1);
	    if(res==-1) printf("impossible\n");
	    else printf("%d\n",res);
		mems(g); mems(y); mems(v);
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <queue>

const int INF = 99999999;

using namespace std;

inline int de(char c)
{
	if (c == '^')	return 0;
	if (c == '>')	return 1;
	if (c == 'v')	return 2;
	if (c == '<')	return 3;
	return -1;
}

inline char en(int c)
{
	if (c == 0)	return '^';
	if (c == 1)	return '>';
	if (c == 2)	return 'v';
	if (c == 3)	return '<';
	return ' ';
}

int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int N, M;
char g[4][128][128];
int dis[4][128][128];
queue<int> Q;

inline bool in(int x, int y)
{
	return x >= 0 && x < N && y >= 0 && y < M;
}

inline void addQ(int d, int x, int y)
{
	Q.push(d);
	Q.push(x);
	Q.push(y);
}

inline void popQ(int& d, int& x, int& y)
{
	d = Q.front(), Q.pop();
	x = Q.front(), Q.pop();
	y = Q.front(), Q.pop();
}

int main()
{
	freopen("G:\\code\\HackerCup\\laser_maze.txt", "r", stdin);
	freopen("G:\\code\\HackerCup\\laser_maze.out", "w", stdout);

	int T, cases = 1;
	int sx, sy, gx, gy;

	cin >> T;
	while (T--)
	{
		scanf("%d %d", &N, &M);
		for (int i = 0; i < N; ++i)
		{
			scanf("%s", g[0][i]);
			strcpy(g[1][i], g[0][i]);
			strcpy(g[2][i], g[0][i]);
			strcpy(g[3][i], g[0][i]);
		}

		for (int i = 0; i < N; ++i)
		{
			for (int j = 0; j < M; ++j)
			{
				if (g[0][i][j] == 'S')
				{
					sx = i, sy = j;
					for (int k = 0; k < 4; ++k)
						g[k][i][j] = '.';
				}
				if (g[0][i][j] == 'G')
				{
					gx = i, gy = j;
					for (int k = 0; k < 4; ++k)
						g[k][i][j] = '.';
				}
			}
		}

		for (int i = 0; i < 4; ++i)
		{
			int d;
			for (int j = 0; j < N; ++j)
			{
				for (int k = 0; k < M; ++k)	if ((d = de(g[i][j][k])) != -1)
				{
					g[i][j][k] = en((d + i) % 4);
				}
			}

			for (int j = 0; j < N; ++j)
			{
				for (int k = 0; k < M; ++k)	if ((d = de(g[i][j][k])) != -1)
				{
					int x = j + dx[d], y = k + dy[d];
					while (1)
					{
						if (!in(x, y) || g[i][x][y] == '#' || de(g[i][x][y]) != -1)	break;

						g[i][x][y] = '@';
						x += dx[d], y += dy[d];
					}
				}
			}
		}

		for (int i = 0; i < 4; ++i)
		{
			for (int j = 0; j < N; ++j)
			{
				for (int k = 0; k < M; ++k)
					dis[i][j][k] = INF;
			}
		}

		dis[0][sx][sy] = 0;
		addQ(0, sx, sy);

		int d, x, y;
		while (!Q.empty())
		{
			popQ(d, x, y);
			int val = dis[d][x][y] + 1;
			d = (d + 1) % 4;
			for (int i = 0; i < 4; ++i)
			{
				int vx = x + dx[i], vy = y + dy[i];
				if (!in(vx, vy) || g[d][vx][vy] != '.')	continue;
				if (dis[d][vx][vy] > val)
				{
					dis[d][vx][vy] = val;
					addQ(d, vx, vy);
				}
			}
		}

		int ans = INF;
		for (int i = 0; i < 4; ++i)
			ans = min(ans, dis[i][gx][gy]);

		if (ans == INF)
			printf("Case #%d: impossible\n", cases++);
		else
			printf("Case #%d: %d\n", cases++, ans);
	}

	return 0;
}
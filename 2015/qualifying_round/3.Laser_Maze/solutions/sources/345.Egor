#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define forn(i, n) for (int i = 0; i < (n); i++)

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

const int MAXH = 100;
const int MAXW = 100;

const int dx[] = { 1, 0, -1, 0 };
const int dy[] = { 0, 1, 0, -1 };
const char *dc = ">v<^";

const int inf = int(1e9);

void solve() {
  int h, w;
  scanf("%d%d", &h, &w);
  static char f[MAXH][MAXW + 1];
  int sx = -1, sy = -1;
  int ex = -1, ey = -1;
  forn (y, h) {
    scanf("%s", f[y]);
    forn (x, w) {
      if (f[y][x] == 'S') {
        f[y][x] = '.';
        sx = x; sy = y;
      } else if (f[y][x] == 'G') {
        f[y][x] = '.';
        ex = x; ey = y;
      } else if (f[y][x] == '.' || f[y][x] == '#') {
      } else {
        assert(strchr(dc, f[y][x]));
      }
    }
  }

  vvb isok[4];
  forn (d0, 4) {
    isok[d0] = vvb(h, vb(w, true));
    forn (y, h)
    forn (x, w) {
      if (f[y][x] == '.') {
        continue;
      }
      isok[d0][y][x] = false;
      if (f[y][x] == '#') {
        continue;
      }

      int curd = strchr(dc, f[y][x]) - dc;
      assert(0 <= curd && curd < 4);
      curd = (curd + d0) % 4;
      int cx = x + dx[curd], cy = y + dy[curd];
      while (0 <= cx && cx < w && 0 <= cy && cy < h && f[cy][cx] == '.') {
        isok[d0][cy][cx] = false;
        cx += dx[curd];
        cy += dy[curd];
      }
    }
    #if 0
    eprintf("tim=%d\n", d0);
    forn (y, h) {
      forn (x, w)
        eprintf("%c", ".#"[!isok[d0][y][x]]);
      eprintf("\n");
    }
    #endif
  }

  deque<pair<pii, int>> q;
  q.pb(mp(mp(sx, sy), 0));
  vvi d[4];
  forn (i, 4) d[i] = vvi(h, vi(w, inf));
  d[0][sy][sx] = 0;
  while (!q.empty()) {
    int x, y, tim;
    tie(x, y) = q.front().first;
    tim = q.front().second;
    q.pop_front();
//    eprintf("cur=%d %d %d\n", x, y, tim);

    int new_d = d[tim][y][x] + 1;
    forn (dir, 4) {
      int nx = x + dx[dir];
      int ny = y + dy[dir];
      int ntim = (tim + 1) % 4;
      if (nx < 0 || nx >= w) continue;
      if (ny < 0 || ny >= h) continue;
      if (!isok[ntim][ny][nx]) continue;

      int &next_d = d[ntim][ny][nx];
      if (new_d < next_d) {
        next_d = new_d;
        q.pb(mp(mp(nx, ny), ntim));
      }
    }
  }
  int ans = inf;
  forn (i, 4) ans = min(ans, d[i][ey][ex]);
  if (ans == inf) printf("impossible\n");
  else printf("%d\n", ans);
}

int main(int argc, char* argv[]) {
  assert(argc <= 3);
  if (argc == 3) {
    assert(freopen(argv[1], "r", stdin));
    assert(freopen(argv[2], "w", stdout));
  } else {
    string filename = ".in";
    if (argc >= 2) filename = argv[1];

    assert(freopen(filename.c_str(), "r", stdin));

    if (filename.length() >= 3 && string(filename, filename.length() - 3, 3) == ".in") {
      filename = string(filename, 0, filename.length() - 3);
    }
    filename += ".out";
    assert(freopen(filename.c_str(), "w", stdout));
  }

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

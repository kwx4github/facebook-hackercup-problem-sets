import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class LaserMaze1 {

	class Maze {
		public int height;
		public int width;
		public char[][] description;
		public Position startPosition;
		public Position endPosition;
		public ArrayList<Position> lasers;
		public ArrayList<Position> walls;
	}

	class Position {
		public int rowNumber;
		public int columnNumber;
	}

	class Start {

	}

	public static void main(String[] args) {
		String inputFilePath = args[0];
		String outputFilePath = args[1];
		LaserMaze1 laserMaze = new LaserMaze1();
		try {
			InputStream is = new FileInputStream(inputFilePath);
			// Scanner in = new Scanner(System.in);
			Scanner in = new Scanner(is);
			OutputStream os = new FileOutputStream(outputFilePath);
			// OutputStreamWriter os = new OutputStreamWriter(System.out);
			PrintWriter pw = new PrintWriter(os);
			// Retrieve the number of mazes we have to explore
			int t = in.nextInt();
			for (int i = 0; i < t; i++) {
				// For each maze retrieve it's height and width
				int m = in.nextInt();
				int n = in.nextInt();
				Maze maze = laserMaze.new Maze();
				maze.height = m;
				maze.width = n;
				maze.description = new char[m][n];
				maze.lasers = new ArrayList<LaserMaze1.Position>();
				maze.walls = new ArrayList<LaserMaze1.Position>();
				// Fill the maze now
				for (int h = 0; h < m; h++) {
					String mazeRow = in.next();
					// Since it represents columns, convert it into char array
					char[] row = mazeRow.toCharArray();
					for (int w = 0; w < n; w++) {
						maze.description[h][w] = row[w];
						Position pos = laserMaze.new Position();
						pos.rowNumber = h;
						pos.columnNumber = w;
						if (row[w] == 'S') {
							maze.startPosition = pos;
						} else if (row[w] == 'G') {
							maze.endPosition = pos;
						} else if (row[w] == '^' || row[w] == '>'
								|| row[w] == 'v' || row[w] == '<') {
							maze.lasers.add(pos);
						} else if (row[w] == '#') {
							maze.walls.add(pos);
						}
					}
				}
				int row = maze.startPosition.rowNumber;
				int column = maze.startPosition.columnNumber;
				int numberOfSteps = 0;
				while (!(row == maze.endPosition.rowNumber && column == maze.endPosition.columnNumber)) {
					if (numberOfSteps > m * n) {
						break;
					}
					// Check if we have to move forward, backward, upwards or
					// downwards based on the positions of S and G
					if (maze.startPosition.rowNumber == maze.endPosition.rowNumber
							&& maze.startPosition.columnNumber < maze.endPosition.columnNumber) {
						// Go Right
						boolean valid = laserMaze.isValidMove(row, column + 1,
								maze, false, m, n);
						if (!valid) {
							// Try going back one step
							valid = laserMaze.isValidMove(row, column - 1,
									maze, true, m, n);
							if (!valid) {
								valid = laserMaze.isValidMove(row + 1, column,
										maze, true, m, n);
								if (!valid) {
									// Try going up
									valid = laserMaze.isValidMove(row - 1,
											column, maze, true, m, n);
									if (!valid) {
										// No way to go
										numberOfSteps = 0;
										break;
									} else {
										row = row - 1;
										numberOfSteps = numberOfSteps + 1;
										continue;
									}
								} else {
									row = row + 1;
									numberOfSteps = numberOfSteps + 1;
									continue;
								}
							} else {
								column = column - 1;
								numberOfSteps = numberOfSteps + 1;
								continue;
							}
						} else {
							column = column + 1;
							numberOfSteps = numberOfSteps + 1;
							continue;
						}
					} else if (maze.startPosition.rowNumber < maze.endPosition.rowNumber
							&& maze.startPosition.columnNumber == maze.endPosition.columnNumber) {
						// Go Downwards and towards the right
						// Increase the row number and check if that's a valid
						// move
						boolean valid = laserMaze.isValidMove(row, column + 1,
								maze, true, m, n);

						if (!valid) {
							// Try going right
							valid = laserMaze.isValidMove(row + 1, column,
									maze, false, m, n);
							if (!valid) {
								// Try going back one step
								valid = laserMaze.isValidMove(row - 1, column,
										maze, true, m, n);
								if (!valid) {
									// Try going above
									valid = laserMaze.isValidMove(row,
											column - 1, maze, true, m, n);
									if (!valid) {
										// No way to go
										numberOfSteps = 0;
										break;
									} else {
										column = column - 1;
										numberOfSteps = numberOfSteps + 1;
										continue;
									}
								} else {
									row = row - 1;
									numberOfSteps = numberOfSteps + 1;
									continue;
								}
							} else {
								row = row + 1;
								numberOfSteps = numberOfSteps + 1;
								continue;
							}
						} else {
							column = column + 1;
							numberOfSteps = numberOfSteps + 1;
							continue;
						}
					} else if (maze.startPosition.rowNumber < maze.endPosition.rowNumber
							&& maze.startPosition.columnNumber < maze.endPosition.columnNumber) {
						// Go Downwards and towards the right
						// Increase the row number and check if that's a valid
						// move
						boolean valid = laserMaze.isValidMove(row, column + 1,
								maze, true, m, n);
						if (!valid) {
							// Try going right
							valid = laserMaze.isValidMove(row + 1, column,
									maze, false, m, n);
							if (!valid) {
								// Try going back one step
								valid = laserMaze.isValidMove(row - 1, column,
										maze, true, m, n);
								if (!valid) {
									// Try going above
									valid = laserMaze.isValidMove(row,
											column - 1, maze, true, m, n);
									if (!valid) {
										// No way to go
										numberOfSteps = 0;
										break;
									} else {
										column = column - 1;
										numberOfSteps = numberOfSteps + 1;
										continue;
									}
								} else {
									row = row - 1;
									numberOfSteps = numberOfSteps + 1;
									continue;
								}
							} else {
								row = row + 1;
								numberOfSteps = numberOfSteps + 1;
								continue;
							}
						} else {
							column = column + 1;
							numberOfSteps = numberOfSteps + 1;
							continue;
						}
					} else if (maze.startPosition.rowNumber > maze.endPosition.rowNumber
							&& maze.startPosition.columnNumber < maze.endPosition.columnNumber) {
						// Go Upwards and towards the right
						boolean valid = laserMaze.isValidMove(row - 1, column,
								maze, false, m, n);
						if (!valid) {
							// Try going right
							valid = laserMaze.isValidMove(row, column + 1,
									maze, true, m, n);
							if (!valid) {
								// Try going back one step
								valid = laserMaze.isValidMove(row + 1, column,
										maze, true, m, n);
								if (!valid) {
									// Try going down
									valid = laserMaze.isValidMove(row,
											column - 1, maze, true, m, n);
									if (!valid) {
										// No way to go
										numberOfSteps = 0;
										break;
									} else {
										column = column - 1;
										numberOfSteps = numberOfSteps + 1;
										continue;
									}
								} else {
									row = row + 1;
									numberOfSteps = numberOfSteps + 1;
									continue;
								}
							} else {
								column = column + 1;
								numberOfSteps = numberOfSteps + 1;
								continue;
							}
						} else {
							row = row - 1;
							numberOfSteps = numberOfSteps + 1;
							continue;
						}

					}
				}
				// Print the output
				if (numberOfSteps > 0) {
					String outputString = "Case #" + (i + 1) + ": "
							+ numberOfSteps;
					pw.println(outputString);
				} else {
					String outputString = "Case #" + (i + 1) + ": impossible";
					pw.println(outputString);
				}
			}

			in.close();
			pw.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public boolean isValidMove(int row, int column, Maze maze,
			boolean backtracking, int m, int n) {
		try {
			// return false for invalid values
			if (row >= m || column >= n || row < 0 || column < 0) {
				return false;
			}
			// Check if it's a wall
			for (Position wall : maze.walls) {
				if (wall.columnNumber == column && wall.rowNumber == row) {
					return false;
				}
			}
			// Check if you can get killed by laser
			// Update all the lasers before checking
			// Turn only if it's not being backtracked
			if (!backtracking) {
				turnLaserTurret(maze);
			}
			// Check if there is a chance of getting hit by a laser on the given
			// row
			// and column
			// Check if any laser in the same row on the right
			// is facing '<' or any laser in same row on the
			// left is facing '>'
			// If it's down and facing '^' and if it's up and
			// facing 'v'
			// Make sure there lasers are not obstructed by another laser or
			// wall
			// Find all the lasers and walls in the given row
			List<Integer> wallsColumnsInRow = new ArrayList<Integer>();
			List<Integer> lasersColumnsInRow = new ArrayList<Integer>();
			List<Integer> wallsRowsInColumn = new ArrayList<Integer>();
			List<Integer> lasersRowInColumns = new ArrayList<Integer>();
			for (Position wall : maze.walls) {
				if (wall.rowNumber == row) {
					wallsColumnsInRow.add(wall.columnNumber);
				}
				if (wall.columnNumber == column) {
					wallsRowsInColumn.add(wall.rowNumber);
				}
			}
			for (Position laser : maze.lasers) {
				if (laser.rowNumber == row) {
					lasersColumnsInRow.add(laser.columnNumber);
				}
				if (laser.columnNumber == column) {
					lasersRowInColumns.add(laser.rowNumber);
				}

			}
			for (Integer laserColumn : lasersColumnsInRow) {
				if (laserColumn > column
						&& maze.description[row][laserColumn] == '<') {
					// Check if there are no other lasers in the same row or no
					// walls
					boolean obstruction = false;
					for (Integer wallColumn : wallsColumnsInRow) {
						if (wallColumn > column && wallColumn < laserColumn) {
							// Obstructing the laser. Hence break.
							obstruction = true;
							// Go for next laser
							continue;
						}
					}
					for (Integer checklaserColumn : lasersColumnsInRow) {
						if (laserColumn > column
								&& laserColumn < checklaserColumn
								&& maze.description[row][laserColumn] != '<') {
							obstruction = true;
							// next laser
							continue;
						}
					}
					if (!obstruction) {
						return false;
					}
				} else if (laserColumn < column
						&& maze.description[row][laserColumn] == '>') {
					// Check if there are no other lasers in the same row or no
					// walls
					boolean obstruction = false;
					for (Integer wallColumn : wallsColumnsInRow) {
						if (wallColumn < column && wallColumn > laserColumn) {
							// Obstructing the laser. Hence break.
							obstruction = true;
							// Go for next laser
							continue;
						}
					}
					for (Integer checklaserColumn : lasersColumnsInRow) {
						if (laserColumn < column
								&& laserColumn > checklaserColumn
								&& maze.description[row][laserColumn] != '>') {
							obstruction = true;
							// next laser
							continue;
						}
					}
					if (!obstruction) {
						return false;
					}
				}
			}

			// Now check for Columnar lasers
			for (Integer laserRow : lasersRowInColumns) {
				if (laserRow > row && maze.description[laserRow][column] == '^') {
					// Check if there are no other lasers in the same row or no
					// walls
					boolean obstruction = false;
					for (Integer wallrow : wallsRowsInColumn) {
						if (wallrow > row && wallrow < laserRow) {
							// Obstructing the laser. Hence break.
							obstruction = true;
							// Go for next laser
							continue;
						}
					}
					for (Integer checklaserrow : lasersRowInColumns) {
						if (laserRow > row && laserRow < checklaserrow
								&& maze.description[laserRow][column] != '^') {
							obstruction = true;
							// next laser
							continue;
						}
					}
					if (!obstruction) {
						return false;
					}
				} else if (laserRow < row
						&& maze.description[laserRow][column] == 'v') {
					// Check if there are no other lasers in the same row or no
					// walls
					boolean obstruction = false;
					for (Integer wallrow : wallsRowsInColumn) {
						if (wallrow < row && wallrow > laserRow) {
							// Obstructing the laser. Hence break.
							obstruction = true;
							// Go for next laser
							continue;
						}
					}
					for (Integer checklaserrow : lasersRowInColumns) {
						if (laserRow < row && laserRow > checklaserrow
								&& maze.description[laserRow][column] != 'v') {
							obstruction = true;
							// next laser
							continue;
						}
					}
					if (!obstruction) {
						return false;
					}
				}
			}
		} catch (Exception e) {
			// Do Nothing
			return false;
		}
		return true;
	}

	public void turnLaserTurret(Maze maze) {
		for (Position laser : maze.lasers) {
			char laserPos = maze.description[laser.rowNumber][laser.columnNumber];
			switch (laserPos) {
			case '<':
				laserPos = '^';
				break;
			case '>':
				laserPos = 'v';
				break;
			case '^':
				laserPos = '>';
				break;
			case 'v':
				laserPos = '<';
				break;
			}
			maze.description[laser.rowNumber][laser.columnNumber] = laserPos;
		}

	}

}

#include <string>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <map>
#include <cstring>
#include <cassert>
#include <queue>
#include <cstdarg>

#ifdef MY_LOCAL
#endif

using namespace std;

#define static_member_define(CLASS, MEMBER) decltype(CLASS::MEMBER) CLASS::MEMBER;

#define likely(expr) (__builtin_expect(!!(expr), 1))
#define unlikely(expr) (__builtin_expect(!!(expr), 1))

#ifdef NDEBUG
#define assertEq(l, r)
#else
#define assertEq(l, r) myAssertEq(l, r, __PRETTY_FUNCTION__, __FILE__, __LINE__, #l, #r)
#endif

#ifdef MY_LOCAL
#ifndef NDEBUG
#define dump(expr) dump_hg3WeHwE8nS6oBeL(#expr, expr),debugln()
#define dump2(expr1, expr2) dump_hg3WeHwE8nS6oBeL(#expr1, expr1),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr2, expr2),debugln()
#define dump3(expr1, expr2, expr3) dump_hg3WeHwE8nS6oBeL(#expr1, expr1),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr2, expr2),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr3, expr3),debugln()
#define dump4(expr1, expr2, expr3, expr4) dump_hg3WeHwE8nS6oBeL(#expr1, expr1),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr2, expr2),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr3, expr3),fprintf(stderr, ", "),dump_hg3WeHwE8nS6oBeL(#expr4, expr4),debugln()
#else
#define dump(expr)
#define dump2(expr1, expr2)
#define dump3(expr1, expr2, expr3)
#define dump4(expr1, expr2, expr3, expr4)
#endif
#else
#define dump(expr)
#define dump2(expr1, expr2)
#define dump3(expr1, expr2, expr3)
#define dump4(expr1, expr2, expr3, expr4)
#endif

#define arraysizeof(ARRAY) ((int)(sizeof(ARRAY) / sizeof(*(ARRAY))))

#ifdef MY_LOCAL
#ifndef NDEBUG

FILE * g_gvFile = NULL;
bool g_gvEnableFlag = true;
bool g_gvSocketConnect = false;
double g_gvLastLineX;
double g_gvLastLineY;
long g_gvNewTimeOffset = 0;
#else
#endif
#else
#endif

#ifdef MY_LOCAL
#ifndef NDEBUG

FILE * g_bmpFile = NULL;
int g_bmpStride = 0;

#else
#endif
#else
#endif

#ifdef MY_LOCAL
#ifdef SAVE_REC
#define rec(i) rec_(i, #i, __FILE__, __LINE__)

#else
#ifdef PLAY_REC
#define rec(i) rec_(i, #i, __FILE__, __LINE__)
#else
#endif
#endif
#else
#endif

#ifdef MY_LOCAL

struct __DMY__CounterStatics {
	~__DMY__CounterStatics() {
		bool flag = false;
		for(int i=0; i<256; ++i) {
			if(count[i]) {
				flag = true;
			}
		}
		if(flag) {
			fprintf(stderr, "==== BEGIN COUNTER ====\n");
			for(int i=0; i<256; ++i) {
				if(count[i]) {
					if(32<=i && i<=126) {
						fprintf(stderr, "%3d(%c): %lld\n", i, i, count[i]);
					}
					else {
						fprintf(stderr, "%3d   : %lld\n", i, count[i]);
					}
				}
			}
			fprintf(stderr, "===== END COUNTER =====\n");
		}
	}
	long long count[256];
};

__DMY__CounterStatics __dmy__counter_statics;

#else
#endif

static double g_startTime;
const double g_timeupSecBase = 9.8;
double g_timeupSec = g_timeupSecBase;

#define BEGIN_STACK_EXTEND(size) void * stack_extend_memory_ = malloc(size);void * stack_extend_origin_memory_;char * stack_extend_dummy_memory_ = (char*)alloca((1+(int)(((long long)stack_extend_memory_)&127))*16);*stack_extend_dummy_memory_ = 0;asm volatile("mov %%rsp, %%rbx\nmov %%rax, %%rsp":"=b"(stack_extend_origin_memory_):"a"((char*)stack_extend_memory_+(size)-1024));
#define END_STACK_EXTEND asm volatile("mov %%rax, %%rsp"::"a"(stack_extend_origin_memory_));free(stack_extend_memory_);

static unsigned int g_myRandX = 1234567891;
static unsigned int g_myRandY = 362436069;
static unsigned int g_myRandZ = 521288629;
static unsigned int g_myRandW = 88675123;

#ifdef MY_LOCAL
#ifndef NDEBUG
#else
#endif
#else
#endif

int solve(const vector<string> & map) {
	assert(map.size()<=100);
	assert(map[0].size()<=100);
	int goalX = -1, goalY = -1;
	int H = map.size();
	int W = map[0].size();
	priority_queue<tuple<int, int, int, int> > que;
	int dp[100][100][4] = {{{0}}};
	for(int y=0; y<H; ++y) {
		for(int x=0; x<W; ++x) {
			if(map[y][x]=='<') {
				for(int x2=x; 0<=x2; --x2) {
					dp[y][x2][0] = -1;
				}
				for(int y2=y; 0<=y2; --y2) {
					dp[y2][x][1] = -1;
				}
				for(int x2=x; x2<W; ++x2) {
					dp[y][x2][2] = -1;
				}
				for(int y2=y; y2<H; ++y2) {
					dp[y2][x][3] = -1;
				}
			}
			if(map[y][x]=='>') {
				for(int x2=x; x2<W; ++x2) {
					dp[y][x2][0] = -1;
				}
				for(int y2=y; y2<H; ++y2) {
					dp[y2][x][1] = -1;
				}
				for(int x2=x; 0<=x2; --x2) {
					dp[y][x2][2] = -1;
				}
				for(int y2=y; 0<=y2; --y2) {
					dp[y2][x][3] = -1;
				}
			}
			if(map[y][x]=='^') {
				for(int y2=y; 0<=y2; --y2) {
					dp[y2][x][0] = -1;
				}
				for(int x2=x; x2<W; ++x2) {
					dp[y][x2][1] = -1;
				}
				for(int y2=y; y2<H; ++y2) {
					dp[y2][x][2] = -1;
				}
				for(int x2=x; 0<=x2; --x2) {
					dp[y][x2][3] = -1;
				}
			}
			if(map[y][x]=='v') {
				for(int y2=y; y2<H; ++y2) {
					dp[y2][x][0] = -1;
				}
				for(int x2=x; 0<=x2; --x2) {
					dp[y][x2][1] = -1;
				}
				for(int y2=y; 0<=y2; --y2) {
					dp[y2][x][2] = -1;
				}
				for(int x2=x; x2<W; ++x2) {
					dp[y][x2][3] = -1;
				}
			}
			if(map[y][x]=='#') {
				dp[y][x][0] = -1;
				dp[y][x][1] = -1;
				dp[y][x][2] = -1;
				dp[y][x][3] = -1;
			}
			if(map[y][x]=='S') {
				dp[y][x][0] = 1;
				que.push(make_tuple(0, x, y, 0));
			}
			if(map[y][x]=='G') {
				goalX = x;
				goalY = y;
			}
		}
	}
	while(!que.empty()) {
		auto it = que.top();
		que.pop();
		int t = get<0>(it);
		int x = get<1>(it);
		int y = get<2>(it);
		int z = (get<3>(it)+1)&3;
		if(x==goalX && y==goalY) {
			return -t;
		}
		if(0<x && dp[y][x-1][z]==0) {
			dp[y][x-1][z] = 1;
			que.push(make_tuple(t-1, x-1, y, z));
		}
		if(x<W-1 && dp[y][x+1][z]==0) {
			dp[y][x+1][z] = 1;
			que.push(make_tuple(t-1, x+1, y, z));
		}
		if(0<y && dp[y-1][x][z]==0) {
			dp[y-1][x][z] = 1;
			que.push(make_tuple(t-1, x, y-1, z));
		}
		if(y<H-1 && dp[y+1][x][z]==0) {
			dp[y+1][x][z] = 1;
			que.push(make_tuple(t-1, x, y+1, z));
		}
	}
	return -1;
}

#ifdef MY_LOCAL
#define MY_TESTER_URL http:/\/www.topcoder.com/contest/problem/Hoge/Tester.jar
#define MY_TESTER_CMD java -jar Tester.jar -exec "{$AOUT} {$SEED}" -seed {$SEED}

const char * nextCLineOrWord(int mode) {
	static char buf[65536];
	static int bufLen = sizeof(buf);
	static int bufPos = sizeof(buf);
	static bool canReadFlag = true;
	static bool crFlag = false;
	static bool enterFlag = false;
	#ifdef MY_LOCAL
	#ifdef MY_STDIN_LOG
	static FILE * stdin_log_file = NULL;
	#endif
	#endif
	if(canReadFlag && (enterFlag ? bufLen<=bufPos : (int)sizeof(buf)<=bufPos+bufPos)) {
		if(0<bufLen-bufPos) {
			memmove(buf, buf+bufPos, bufLen-bufPos);
			bufLen -= bufPos;
		}
		else {
			bufLen = 0;
		}
		char * result = fgets(buf+bufLen, sizeof(buf)-bufLen, stdin);
		canReadFlag = (result!=NULL);
		if(result!=NULL) {
			int n = strlen(result);
			#ifdef MY_LOCAL
			#ifdef MY_STDIN_LOG
			if(stdin_log_file==NULL) {
				stdin_log_file = fopen(MY_STDIN_LOG, "w");
			}
			fwrite(result, 1, n, stdin_log_file);
			fflush(stdin_log_file);
			#endif
			#endif
			enterFlag = (n!=(int)sizeof(buf)-1-bufLen || (1<=bufLen+n && buf[bufLen+n-1]=='\n'));
			bufLen += n;
		}
		bufPos = 0;
	}
	if(mode==0) {
		int pos = bufPos;
		while(true) {
			char c = buf[pos];
			if(c==32) {
				buf[pos++] = '\0';
				break;
			}
			else if(c==10) {
				if(crFlag) {
					crFlag = false;
					if(bufPos==pos) {
						pos = ++bufPos;
						continue;
					}
				}
				buf[pos++] = '\0';
				break;
			}
			else if(c==13) {
				crFlag = true;
				buf[pos++] = '\0';
				break;
			}
			else if(c==0) {
				break;
			}
			++pos;
		}
		const char * ret = buf + bufPos;
		bufPos = pos;
		return ret;
	}
	else if(mode==1) {
		int pos = bufPos;
		while(true) {
			char c = buf[pos];
			if(c==10) {
				if(crFlag) {
					crFlag = false;
					if(bufPos==pos) {
						pos = ++bufPos;
						continue;
					}
				}
				buf[pos++] = '\0';
				break;
			}
			else if(c==13) {
				crFlag = true;
				buf[pos++] = '\0';
				break;
			}
			else if(c==0) {
				break;
			}
			++pos;
		}
		const char * ret = buf + bufPos;
		bufPos = pos;
		return ret;
	}
	else if(mode==2) {
		return bufLen<=bufPos ? NULL : buf+bufPos;
	}
	assert(false);
	return NULL;
}

const char * nextCLine() {
	return nextCLineOrWord(1);
}

string nextLine() {
	return nextCLine();
}

const char * nextCWord() {
	return nextCLineOrWord(0);
}

int nextInt() {
	return atoi(nextCWord());
}

int main(int argc, const char * const * const argv) {
	int n = nextInt();
	for(int i=0; i<n; ++i) {
		int h = nextInt();
		int w = nextInt();
		vector<string> map;
		for(int y=0; y<h; ++y) {
			map.push_back(nextLine());
		}
		int result = solve(map);
		if(result==-1) {
			printf("Case #%d: impossible\n", i+1);
		}
		else {
			printf("Case #%d: %d\n", i+1, result);
		}
	}

	return 0;
}

#endif

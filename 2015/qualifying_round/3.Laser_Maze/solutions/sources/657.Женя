//#include <iostream>
#include <fstream>
#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <vector>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <ctime>
 
#define MAXN 100000
#define INF 1000000000
#define pi 3.1415926535
#define LL long long
#define U unsigned
#define mp make_pair
#define pb push_back
#define eps 0.000000001
#define pii pair <int,int>
#define X first
#define Y second
#define MOD 1000000007
#define MOD2 1000000009
 
using namespace std;

ifstream cin("input.txt");
ofstream cout("output.txt");

struct cell
{
	int zeroth,first,second,third;
};
cell Can[100][100];
int n,m,startx,starty,goalx,goaly;
char c[100][100];
int dp[100][100][4];
deque <pair <int, pair <int,int> > > turn;
void ReadMaze()
{
	cin >> n >> m;
	for (int i=0; i<n; i++)
	{
		for (int j=0; j<m; j++)
		{
			cin >> c[i][j];
			if (c[i][j]=='S')
			{
				startx=j;
				starty=i;
				c[i][j]='.';
			}
			if (c[i][j]=='G')
			{
				goalx=j;
				goaly=i;
				c[i][j]='.';
			}
		}
	}
}
void clockwise()
{
	for (int i=0; i<n; i++)
	{
		for (int j=0; j<m; j++)
		{
			if (c[i][j]=='<') c[i][j]='^';
			else if (c[i][j]=='^') c[i][j]='>';
			else if (c[i][j]=='>') c[i][j]='v';
			else if (c[i][j]=='v') c[i][j]='<';
		}
	}
}
void access(int num)
{
	int i,j,q;
	vector <vector <bool> > t(n);
	for (i=0; i<n; i++)
		t[i].resize(m,false);
	for (i=0; i<n; i++)
	{
		for (j=0; j<m; j++)
		{
			if (c[i][j]=='<') 
				for (q=j-1; q>=0; q--)
				{
					if (c[i][q]=='.');
					else break;
					t[i][q]=true;
				}
			if (c[i][j]=='^') 
				for (q=i-1; q>=0; q--)
				{
					if (c[q][j]=='.');
					else break;
					t[q][j]=true;
				}
			if (c[i][j]=='>') 
				for (q=j+1; q<m; q++)
				{
					if (c[i][q]=='.');
					else break;
					t[i][q]=true;
				}
			if (c[i][j]=='v') 
				for (q=i+1; q<n; q++)
				{
					if (c[q][j]=='.');
					else break;
					t[q][j]=true;
				}
		}
	}
	for (i=0; i<n; i++)
	{
		for (j=0; j<m; j++)
		{
			if (num==0) Can[i][j].zeroth=t[i][j];
			if (num==1) Can[i][j].first=t[i][j];
			if (num==2) Can[i][j].second=t[i][j];
			if (num==3) Can[i][j].third=t[i][j];
		}
	}
}
void bfs(int x, int y, int mod)
{
	bool check;
	//right
	if (x+1<m)
		if (c[y][x+1]=='.' && dp[y][x+1][(mod+1)%4]==0)
		{
			if ((mod+1)%4==0) check=Can[y][x+1].zeroth;
			if ((mod+1)%4==1) check=Can[y][x+1].first;
			if ((mod+1)%4==2) check=Can[y][x+1].second;
			if ((mod+1)%4==3) check=Can[y][x+1].third;
			if (!check)
			{
				dp[y][x+1][(mod+1)%4]=dp[y][x][mod]+1;
				turn.pb(mp((mod+1)%4,mp(y,x+1)));
			}
		}
	//left
	if (x-1>=0)
		if (c[y][x-1]=='.' && dp[y][x-1][(mod+1)%4]==0)
		{
			if ((mod+1)%4==0) check=Can[y][x-1].zeroth;
			if ((mod+1)%4==1) check=Can[y][x-1].first;
			if ((mod+1)%4==2) check=Can[y][x-1].second;
			if ((mod+1)%4==3) check=Can[y][x-1].third;
			if (!check)
			{
				dp[y][x-1][(mod+1)%4]=dp[y][x][mod]+1;
				turn.pb(mp((mod+1)%4,mp(y,x-1)));
			}
		}
	//down
	if (y+1<n)
		if (c[y+1][x]=='.' && dp[y+1][x][(mod+1)%4]==0)
		{
			if ((mod+1)%4==0) check=Can[y+1][x].zeroth;
			if ((mod+1)%4==1) check=Can[y+1][x].first;
			if ((mod+1)%4==2) check=Can[y+1][x].second;
			if ((mod+1)%4==3) check=Can[y+1][x].third;
			if (!check)
			{
				dp[y+1][x][(mod+1)%4]=dp[y][x][mod]+1;
				turn.pb(mp((mod+1)%4,mp(y+1,x)));
			}
		}
	if (y-1>=0)
		if (c[y-1][x]=='.' && dp[y-1][x][(mod+1)%4]==0)
		{
			if ((mod+1)%4==0) check=Can[y-1][x].zeroth;
			if ((mod+1)%4==1) check=Can[y-1][x].first;
			if ((mod+1)%4==2) check=Can[y-1][x].second;
			if ((mod+1)%4==3) check=Can[y-1][x].third;
			if (!check)
			{
				dp[y-1][x][(mod+1)%4]=dp[y][x][mod]+1;
				turn.pb(mp((mod+1)%4,mp(y-1,x)));
			}
		}
	turn.pop_front();
	if (!turn.empty()) bfs((*turn.begin()).Y.Y,(*turn.begin()).Y.X,(*turn.begin()).X);
}
void set_to_zero()
{
	int i,j,q;
	for (i=0; i<n; i++)
	{
		for (j=0; j<m; j++)
		{
			Can[i][j].zeroth=Can[i][j].first=Can[i][j].second=Can[i][j].third=0;
			for (q=0; q<=4; q++)
			{
				dp[i][j][q]=0;
			}
		}
	}
}
int main()
{
	int q,t,ans;
	cin >> t;
	for (q=0; q<t; q++)
	{
		ReadMaze();	
		access(0);
		clockwise();
		access(1);
		clockwise();
		access(2);
		clockwise();
		access(3);
		clockwise();
		turn.pb(mp(0,mp(starty,startx)));
		bfs(startx,starty,0);
		ans=INF;
		for (int type=0; type<=3; type++)
			if (dp[goaly][goalx][type]!=0) ans=min(ans,dp[goaly][goalx][type]);
		cout << "Case #" << q+1 << ": ";
		if (ans!=INF) cout << ans << "\n";
		else cout << "impossible\n";
		set_to_zero();
	}
	return 0;
}

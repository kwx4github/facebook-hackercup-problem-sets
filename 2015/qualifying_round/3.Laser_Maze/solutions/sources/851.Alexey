#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <iterator>
#include <list>
#include <set>
#include <queue>
#include <numeric>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <valarray>
#include <cassert>

#define all(c) (c).begin(), (c).end()

using namespace std;

typedef long long lli;
typedef long li;

template <class T>
bool Maximize (T &v, T nv) { if (nv > v) return v = nv, 1; return 0; }

template <class T>
bool Minimize (T &v, T nv) { if (nv < v) return v = nv, 1; return 0; }

template <class T>
T Mod (T &v, T mod) { return v = (v % mod + mod) % mod; }

const lli INFLL = numeric_limits<lli>::max();
const li INF = numeric_limits<li>::max(), N = 101;
const li di[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

struct Point
{
	li x, y;
	Point () {}
	Point (li x, li y) : x(x), y(y) {}
};

const char dirs[] = {'>', 'v', '<', '^'};

struct Turret
{
	Point p;
	li d;

	Turret (Point p, char cd) : p(p)
	{
		d = find(dirs, dirs + 4, cd) - dirs;
	}
};

li h, w, d[N][N][4];
char m[N][N];
bool laser[4][N][N];
vector <Turret> ts;

bool inBounds (li x, li y)
{
	return x >= 0 && x < w && y >= 0 && y < h;
}

void color (Point p, li d, bool laser[][N])
{
	for (li x = p.x + di[d][0], y = p.y + di[d][1]; inBounds(x, y) && m[y][x] == '.'; x += di[d][0], y += di[d][1])
		laser[y][x] = 1;
}

void solve ()
{
	li tests;
	scanf("%ld", &tests);
	for (li test = 1; test <= tests; ++ test)
	{
		ts.clear();
		scanf("%ld %ld", &h, &w);
		Point start, finish;
		for (li y = 0; y < h; ++ y)
		{
			getchar();
			for (li x = 0; x < w; ++ x)
			{
				Point p(x, y);
				switch (m[y][x] = getchar())
				{
					case 'S':
						start = p;
						m[y][x] = '.';
						break;
					case 'G':
						finish = p;
						m[y][x] = '.';
						break;
					case '.':
					case '#':
						break;
					default:
						ts.push_back(Turret(p, m[y][x]));
						break;
				}
			}
		}

		fill(&laser[0][0][0], &laser[3][N - 1][N - 1], 0);
		for (li i = 0; i < 4; ++ i)
		{
			for (li j = 0; j < ts.size(); ++ j)
			{
				Turret &t = ts[j];
				color(t.p, (t.d + i) % 4, laser[i]);
			}
		}

		fill(&d[0][0][0], &d[N - 1][N - 1][3], INF);
		queue <pair<Point, li> > q;
		q.push(make_pair(start, 0));
		d[start.y][start.x][0] = 0;

		while (!q.empty())
		{
			Point p = q.front().first;
			li t = q.front().second;
			q.pop();

			li nt = (t + 1) % 4;
			for (li i = 0; i < 4; ++ i)
			{
				li nx = p.x + di[i][0];
				li ny = p.y + di[i][1];
				if (inBounds(nx, ny) && m[ny][nx] == '.' && !laser[nt][ny][nx] && d[ny][nx][nt] == INF)
				{
					d[ny][nx][nt] = d[p.y][p.x][t] + 1;
					q.push(make_pair(Point(nx, ny), nt));
				}
			}
		}

		li res = *min_element(d[finish.y][finish.x], d[finish.y][finish.x] + 4);
		printf("Case #%ld: ", test);
		if (res == INF) printf("impossible\n");
		else printf("%ld\n", res);
	}
}

void init ()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

int main()
{
	init();
	solve();
	return 0;
}

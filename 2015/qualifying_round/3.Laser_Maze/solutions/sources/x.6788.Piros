import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class LaserMaze {

	char[] laser = {'^','>', 'v', '<'};
	char[][] maze = new char[101][101];
	int m,n;
	int sm,sn;
	int em,en;
	final int MAX = 101*101*500;
	int[] queue = new int[MAX];
	int cq, eq;
	int count;
	
	int poz(char ch) {
		for(int i=0;i<laser.length;++i)
			if(laser[i] == ch)
				return i;
		return -1;
	}
	
	boolean possible(int tm,int tn, int c) {
		if(c==0) 
			return true;
		int p = tm-1;
		while(p>=0 && maze[p][tn] == '.')
			--p;
		if(p >= 0 && maze[p][tn] != '#') {
			int poz = (poz(maze[p][tn]) + c) % 4;
			if(laser[poz] == 'v')
				return false;
		}
		p = tm+1;
		while(p<m && maze[p][tn] == '.')
			++p;
		if(p<m && maze[p][tn] != '#') {
			int poz = (poz(maze[p][tn]) + c) % 4;
			if(laser[poz] == '^')
				return false;
		}
		
		p = tn-1;
		while(p>=0 && maze[tm][p] == '.')
			--p;
		if(p >= 0 && maze[tm][p] != '#') {
			int poz = (poz(maze[tm][p]) + c) % 4;
			if(laser[poz] == '>')
				return false;
		}
		
		p = tn+1;
		while(p<n && maze[tm][p] == '.')
			++p;
		if(p < n && maze[tm][p] != '#') {
			int poz = (poz(maze[tm][p]) + c) % 4;
			if(laser[poz] == '<')
				return false;
		}
		
		return true;
	}
	
	void process() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("in.txt"));
		PrintWriter writer = new PrintWriter("out.txt", "UTF-8");
		
	    try {
	        String line = br.readLine();
	        
	        int t = Integer.parseInt(line);
	        
	        for(int i=1;i<=t;++i) {
	        	line = br.readLine();
	        		
	        	StringTokenizer st = new StringTokenizer(line);
	        	m = Integer.parseInt(st.nextToken());
	        	n = Integer.parseInt(st.nextToken());
	        	for(int j=0;j<m;++j) {
	        		line = br.readLine();
	        		for(int k=0;k<n;++k) {
	        			maze[j][k] = line.charAt(k);
	        			if (maze[j][k] == 'S') {
	        				sm = j;
	        				sn = k;
	        				maze[j][k] = '.';
	        			}
	        			if (maze[j][k] == 'G') {
	        				em = j;
	        				en = k;
	        				maze[j][k] = '.';
	        			}	
	        		}
	        	}
	        	
	        	cq = 0;
	        	eq = 0;
	        	queue[eq++] = 0*1000000 + sm*1000 + sn;
	        	boolean cont = true;
	        	boolean cycle = false;
	        	while(cont && cq < eq) {
	        		int a = queue[cq++];
	        		count = a / 1000000;
	        		int r = a % 1000000;
	        		int tm = r / 1000;
	        		int tn = r % 1000;
	        		if(possible(tm,tn, count)) {
	        			if(tm == em && tn == en) {
	        				cont = false;
	        			}
	        			else {
	        				if(eq >= MAX-10)
	        					eq=0;
	        				if(count >= MAX - 1) {
	        					cont = false;
	        					cycle = true;
	        				}
	        				else {
		        				if(tm-1 >= 0 && maze[tm-1][tn] == '.') {
		        					queue[eq++] = (count+1)*1000000 + (tm-1)*1000 + tn;
		        				}
		        				if(tm+1 < m && maze[tm+1][tn] == '.') {
		        					queue[eq++] = (count+1)*1000000 + (tm+1)*1000 + tn;
		        				}
		        				if(tn-1 >= 0 && maze[tm][tn-1] == '.') {
		        					queue[eq++] = (count+1)*1000000 + tm*1000 + tn-1;
		        				}
		        				if(tn+1 < n && maze[tm][tn+1] == '.') {
		        					queue[eq++] = (count+1)*1000000 + tm*1000 + tn+1;
		        				}
	        				}
	        			}
	        		}
	        	}
	        	
	        	if(!cont) {
	        		if(cycle)
	        			writer.print("Case #" + new Integer(i).toString() + ": impossible");
	        		else
	        			writer.print("Case #" + new Integer(i).toString() + ": " + new Integer(count).toString());
	        	}
	        	else
	        		writer.print("Case #" + new Integer(i).toString() + ": impossible");
	        	if(i < t)
	        		writer.println();
	        }
	    } finally {
	        br.close();
	        writer.close();
	    }
	}
	
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		LaserMaze instance = new LaserMaze();
		instance.process();
	}

}

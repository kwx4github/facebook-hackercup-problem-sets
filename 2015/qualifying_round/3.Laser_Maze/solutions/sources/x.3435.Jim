#include <cstdio>
#include <map>
#include <list>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

int T, n, m;
char maze[105][105];
bool valid[105][105][4];
int dx[4] = {0, -1, 0, 1}, dy[4] = {-1, 0, 1, 0};
int Map[309];
int qx[40005], qy[40005], qk[40005];
bool v[105][105][4];
int dis[105][105][4];
int qr, qf;

int main(){
	Map['^'] = 0; Map['<'] = 1; Map['v'] = 2; Map['>'] = 3;
	scanf("%d", &T);
	for (int t = 1; t <= T; t++){
		memset(valid, 0, sizeof(valid));
		scanf("%d%d", &n, &m);
		for (int i = 0; i < n; i++) scanf("%s", maze[i]);
		for (int i = 0; i < n; i++){
			for (int j = 0; j < m; j++){
				for (int k = 0; k < 4; k++){
					if (maze[i][j] == '#') continue;
					if (maze[i][j] == '<' || maze[i][j] == '>' || maze[i][j] == '^' || maze[i][j] == 'v') continue;
					bool nogood = 0;
					for (int l = 0; l < 4; l++){
						for (int ii = 0;; ii++){
							int ny = i + dy[l] * ii, nx = j + dx[l] * ii;
							if (nx < 0 || nx >= m || ny < 0 || ny >= n) break;
							if (maze[ny][nx] == '#') break;
							if (maze[ny][nx] == 'v' || maze[ny][nx] == '^' || maze[ny][nx] == '<' || maze[ny][nx] == '>'){
								if ((l + 2) % 4 == (Map[maze[ny][nx]] + k) % 4) nogood = 1;
							}
						}
					}
					if (!nogood) valid[i][j][k] = 1;
				}
			}
		}
		int sx, sy, tx, ty;
		bool end = 0;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++){
				if (maze[i][j] == 'S'){ sx = j; sy = i;}
				if (maze[i][j] == 'G'){ tx = j; ty = i;}
			}
		qr = qf = 0;
		qx[0] = sx;
		qy[0] = sy;
		qk[0] = 0;
		memset(v, 0, sizeof(v));
		v[sy][sx][0] = 1;
		dis[sy][sx][0] = 0;
		while (qr >= qf){
			int cx = qx[qf], cy = qy[qf], ck = qk[qf];
			qf++;
			for (int i = 0; i < 4; i++){
				int nx = cx + dx[i], ny = cy + dy[i], nk = (ck + 3) % 4;
				if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
				if (maze[ny][nx] == '#') continue;
				if (maze[ny][nx] == '<' || maze[ny][nx] == '>' || maze[ny][nx] == '^' || maze[ny][nx] == 'v') continue;
				if (v[ny][nx][nk]) continue;
				if (!valid[ny][nx][nk]) continue;
				qr++;
				qx[qr] = nx; qy[qr] = ny; qk[qr] = nk;
				dis[ny][nx][nk] = dis[cy][cx][ck] + 1;
				v[ny][nx][nk] = 1;
				if (ny == ty && nx == tx) end = 1;
			}
			if (end) break;
		}
		printf("Case #%d: ", t);
		if (end){
			int value;
			for (int i = 0; i < 4; i++) if (v[ty][tx][i]) value = dis[ty][tx][i];
			printf("%d\n", value);
		}else printf("impossible\n");
	}
	return 0;
}

// {{{ template
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<string> vs;
typedef vector<long long> vll;
typedef vector<pii> vpii;
// }}}

const int INF = '????';

const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, 1, 0, -1};

const int N = 101;

const string direction = "^>v<";

bool attacked[N][N][4];
int dist[N][N][4];

int getDir(char c) {
  return direction.find(c);
}

int main() {
  cin.sync_with_stdio(0); cin.tie(0);
  int T;
  cin >> T;
  for (int t = 1; t <= T; t++) {
    int n, m;
    cin >> n >> m;
    vs grid(n);
    for (int i = 0; i < n; i++) {
      cin >> grid[i];
    }
    auto inRange = [n, m] (int p, int q) -> bool {
      return 0 <= p && p < n && 0 <= q && q < m;
    };
    memset(attacked, false, sizeof(attacked));
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        int dir = getDir(grid[i][j]);
        if (dir != -1) {
          for (int iter = 0; iter < 4; iter++) {
            int ndir = (dir + iter) % 4;
            int pi = i, pj = j;
            while (inRange(pi, pj)) {
              attacked[pi][pj][iter] = true;
              if (grid[pi][pj] == '#') {
                break;
              }
              pi += dr[ndir];
              pj += dc[ndir];
            }
          }
        }
      }
    }
    memset(dist, 0x3f, sizeof(dist));
    queue<tuple<int, int, int>> q;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        if (grid[i][j] == 'S' && !attacked[i][j][0]) {
          q.push({i, j, 0});
          dist[i][j][0] = 0;
        }
      }
    }
    while (!q.empty()) {
      int pr, pc, d4;
      tie(pr, pc, d4) = q.front();
      q.pop();
      int nd4 = (d4 + 1) % 4;
      for (int i = 0; i < 4; i++) {
        int nr = pr + dr[i], nc = pc + dc[i];
        if (inRange(nr, nc) && grid[nr][nc] != '#' && !attacked[nr][nc][nd4]) {
          if (dist[nr][nc][nd4] > dist[pr][pc][d4] + 1) {
            dist[nr][nc][nd4] = dist[pr][pc][d4] + 1;
            q.push({nr, nc, nd4});
          }
        }
      }
    }
    int ans = INF;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        if (grid[i][j] == 'G') {
          for (int k = 0; k < 4; k++) {
            ans = min(ans, dist[i][j][k]);
          }
        }
      }
    }
    if (ans != INF) {
      cout << "Case #" << t << ": " << ans << endl;
    } else {
      cout << "Case #" << t << ": " << "impossible" << endl;
    }
  }
  return 0;
}


#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#define LL long long

using namespace std;

const int N = 110;
char mp[N][N];

struct st{
    int x, y, c, d;
    st () {}
    st (int x, int y, int c, int d) : x (x), y (y), c (c) , d (d){}
};

int n, m;
int vis[N][N][5];
int xx[5] = {-1, 0, 1, 0};
int yy[5] = {0, 1, 0, -1};
char cc[5] = {'v', '<', '^', '>'};
int t[500];

int jug (int x, int y, int c) {
//    cout << "jug" << x << ' ' << y << ' '<< c << endl;
    if (x < 1 || x > n || y < 1 || y > m || mp[x][y] == '#' || t[(int)mp[x][y]] || vis[x][y][c] == 1) return 0;
    for (int i = 0; i < 4; i++) {
        int tx = x, ty = y;
        while (1) {
            tx += xx[i], ty += yy[i];
//            cout << i << ' ' << tx << ' ' << ty << endl;
            if (tx < 1 || tx > n || ty < 1 || ty > m || mp[tx][ty] == '#') break;
            if (t[(int)mp[tx][ty]]) {
                if (mp[tx][ty] == cc[(i + c) % 4]) return 0;
                break;
            }
        }
    }
    return 1;
}

int bfs () {
    queue <st> q;
    memset (vis, 0, sizeof vis);
    int px, py;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (mp[i][j] == 'S') px = i, py = j;
        }
    }
    q.push (st (px, py, 0, 0));
    while (!q.empty ()) {
        st u = q.front ();
        q.pop();
        int x = u.x, y = u.y, c = u.c, d = u.d;
//        cout << x << ' ' << y << ' ' << c << ' ' << d << endl;
        c++, d++;
        if (c == 4) c = 0;
        for (int i = 0; i < 4; i++) {
            int tx = x + xx[i], ty = y + yy[i];
            if (jug (tx, ty, c)) {
                if (mp[tx][ty] == 'G') return d;
                vis[tx][ty][c] = 1;
                q.push (st (tx, ty, c, d));
            }
        }
    }
    return 0;
}

int main () {
//    freopen ("in.txt", "r", stdin);
//    freopen ("out.txt", "w", stdout);
    for (int i = 0; i < 4; i++) t[(int)cc[i]] = 1;
    int T, cas = 1;
    cin >> T;
    while (T--) {
        cin >> n >> m;
        for (int i = 1; i <= n; i++) {
            scanf ("%s", mp[i] + 1);
        }
        printf ("Case #%d: ", cas++);
        int res = bfs();
        if (res) {
            printf ("%d\n", res);
        } else {
            printf ("impossible\n");
        }
    }
}

#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }
inline ostream& operator<< (ostream& out, const pt& p) { return out << '(' << p.x << ", " << p.y << ')'; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;
const int N = 110;

char a[N][N];
pt st, fi;
int n, m;
bool bad[4][N][N];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
char num[] = {'^', '>', 'v', '<'};
int ans[4][N][N];

inline bool read()
{
	cin >> n >> m;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			cin >> a[i][j];
	return true;
}

void make_bad(int x, int y, int step)
{
	//cerr << x << ' ' << y << endl;
	int dir = 0;
	for(int i = 0; i < 4; i++)
		if(num[i] == a[x][y])
			dir = i;
	dir = (dir + step) % 4;
	while(true)
	{
		int nx = x + dx[dir];
		int ny = y + dy[dir];
		if(nx < 0 || nx >= n || ny < 0 || ny >= m)
			break;
		if(a[nx][ny] != '.')
			break;
		bad[step][nx][ny] = 1;
		x = nx;
		y = ny;
	}
}

inline void solve()
{
	memset(bad, 0, sizeof(bad));
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
		{
			if(a[i][j] == 'S')
			{
				st = mp(i, j);
				a[i][j] = '.';
			}
			if(a[i][j] == 'G')
			{
				fi = mp(i, j);
				a[i][j] = '.';
			}
		}
	for(int step = 0; step < 4; step++)
	{
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
			{
				if(a[i][j] == '.' || a[i][j] == '#')
					continue;
				//cerr << i << ' ' << j << endl;
				make_bad(i, j, step);
			}
	}
	queue<pair <pair<int, int>, int> > q;
	for(int i = 0; i < 4; i++)
		for(int j = 0; j < n; j++)
			for(int k = 0; k < m; k++)
				ans[i][j][k] = 1000000000;
				
	ans[0][st.x][st.y] = 0;
	q.push(mp(st, 0));
	while(!q.empty())
	{
		pt pos = q.front().ft;
		if(pos == fi)
			break;
		//cerr << pos.x << ' ' << pos.y << endl;
		int cnt = q.front().sc;
		int ncnt = cnt + 1;
		q.pop();
		for(int i = 0; i < 4; i++)
		{
			pt npos = mp(pos.x + dx[i], pos.y + dy[i]);
			//cerr << npos.x << ' ' << npos.y << endl;
			if(npos.x < 0 || npos.x >= n || npos.y < 0 || npos.y >= m)
				continue;
			if(a[npos.x][npos.y] != '.')
				continue;
			if(bad[ncnt % 4][npos.x][npos.y])
				continue;

			if(ans[ncnt % 4][npos.x][npos.y] > ans[cnt % 4][pos.x][pos.y] + 1)
			{
				ans[ncnt % 4][npos.x][npos.y] = ans[cnt % 4][pos.x][pos.y] + 1;
				q.push(mp(npos, ncnt));
			}
		}
	}
	int anss = 1000000000;
	for(int i = 0; i < 4; i++)
		anss = min(anss, ans[i][fi.x][fi.y]);				
	if(anss == 1000000000)
		puts("impossible");
	else
		printf("%d\n", anss);
}

int main()
{
	freopen("laser_maze.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);

	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	int tests;
	cin >> tests;
	for(int test = 0; test < tests; test++)
	{
		printf("Case #%d: ", test + 1);
		assert(read());
		solve();
	}	
	return 0;
}

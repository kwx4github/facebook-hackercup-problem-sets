#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#ifdef __GXX_EXPERIMENTAL_CXX0X__
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;

#define ALL(x) (x).begin(), (x).end()
#define EACH(itr,c) for(__typeof((c).begin()) itr=(c).begin(); itr!=(c).end(); itr++)  
#define FOR(i,b,e) for (int i=(int)(b); i<(int)(e); i++)
#define MP(x,y) make_pair(x,y)
#define REP(i,n) for(int i=0; i<(int)(n); i++)

const int INF = 1e8;
int r, c;
string bd[100];
int rot[100][100];
int ds[100][100][4];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

bool check(int x, int y, int k) {
    if (bd[x][y] != '.' && bd[x][y] != 'S' && bd[x][y] != 'G') return false;
    if (ds[x][y][k] != INF) return false;
    REP (i, y) if (rot[x][i] != -1 && (rot[x][i] + k) % 4 == 2) return false;
    FOR (i, y+1, c) if (rot[x][i] != -1 && (rot[x][i] + k) % 4 == 0) return false;
    REP (i, x) if (rot[i][y] != -1 && (rot[i][y] + k) % 4 == 3) return false;
    FOR (i, x+1, r) if (rot[i][y] != -1 && (rot[i][y] + k) % 4 == 1) return false;
    return true;
}

void add(queue<pair<pair<int, int>, int> > &Q, int x, int y, int k, int d, bool init=false) {
    if (x < 0 || x >= r) return;
    if (y < 0 || y >= c) return;
    if (init || check(x, y, k)) {
        ds[x][y][k] = d;
        Q.push(MP(MP(x, y), k));
    }
}

void solve() {
    cin >> r >> c;
    REP (i, r) cin >> bd[i];
    REP (i, r) REP (j, c) REP (k, 4) ds[i][j][k] = INF;

    int sx = -1, sy = -1;
    int gx = -1, gy = -1;

    REP (i, r) REP (j, c) {
        if (bd[i][j] == 'S') {
            sx = i;
            sy = j;
        } else if (bd[i][j] == 'G') {
            gx = i;
            gy = j;
        }
    }

    memset(rot, -1, sizeof(rot));
    REP (i, r) REP (j, c) {
        if (bd[i][j] == '<')
            rot[i][j] = 0;
        else if (bd[i][j] == '^')
            rot[i][j] = 1;
        else if (bd[i][j] == '>')
            rot[i][j] = 2;
        else if (bd[i][j] == 'v')
            rot[i][j] = 3;
    }
    
    queue<pair<pair<int, int>, int> > Q;
    add(Q, sx, sy, 0, 0, true);

    while (!Q.empty()) {
        int x = Q.front().first.first;
        int y = Q.front().first.second;
        int k = Q.front().second;
        Q.pop();

        if (x == gx && y == gy)
            break;

        REP (i, 4) {
            int xt = x + dx[i];
            int yt = y + dy[i];
            add(Q, xt, yt, (k+1)%4, ds[x][y][k]+1);
        }
        
    }

    int ret = INF;
    REP (i, 4) ret = min(ret, ds[gx][gy][i]);
    if (ret == INF)
        cout << "impossible" << endl;
    else
        cout << ret << endl;
    
}

int main() {
    ios_base::sync_with_stdio(0);
    int T;
    cin >> T;

    REP (i, T) {
        cerr << "Case #" << i+1 << ": " << endl;
        cout << "Case #" << i+1 << ": ";
        solve();
    }

    return 0;
}

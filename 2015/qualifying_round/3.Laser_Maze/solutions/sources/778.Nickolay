#include <iostream>
#include <cstdio>
#include <ctime>
#include <cassert>
#include <cmath>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <algorithm>
#include <utility>
#include <cstdlib>
#include <cstring>
#include <string>
using namespace std;

#ifdef WIN32
	#define lld "%I64d"
#else
	#define lld "%lld"
#endif

#define mp make_pair
#define pb push_back
typedef long long ll;
typedef long double ld;

const int M = 105;
const int Q = 1e9 + 7;

bool a[M][M][4], w[M][M];
int d[M][M][4];
pair<pair<int, int>, pair<int, int> > tow[M * M];
char s[M];
pair<pair<int, int>, int> que[M * M * 4];
pair<int, int> vect[4];



pair<int, int> ve(char c){
	if (c == '^')
		return mp(-1, 0);
	if (c == '>')
		return mp(0, 1);
	if (c == 'v')
		return mp(1, 0);
	return mp(0, -1);
}

pair<int, int> next_ve(pair<int, int> a1){
	if (a1 == mp(-1, 0))
		return mp(0, 1);
	if (a1 == mp(0, 1))
		return mp(1, 0);
	if (a1 == mp(1, 0))
		return mp(0, -1);
	return mp(-1, 0);
}

bool norm(int i, int j, int n, int m){
	if (i < 0 || j < 0 || i >= n || j >= m)
		return false;
	return true;
}


int main(){
	srand(time(NULL));
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int q, i, t, r, curi, curj, dx, dy, ans, l, m, n, tq, j = 0;
	pair<int, int> st, fi;
	pair<pair<int, int>, int> cur;
	scanf("%d", &q);
	vect[0] = mp(0, -1);
	vect[1] = mp(-1, 0);
	vect[2] = mp(0, 1);
	vect[3] = mp(1, 0);
	for (tq = 0; tq < q; tq++){
		scanf("%d%d", &n, &m);
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++)
				for (t = 0; t < 4; t++)
					a[i][j][t] = true;
	   	for (i = 0; i < n; i++)
	   		for (j = 0; j < m; j++)
	   			w[i][j] = false;
		r = 0;
		for (i = 0; i < n; i++){
			scanf("%s", s);
			for (j = 0; j < m; j++){
				if (s[j] == 'S'){
					st = mp(i, j);
					continue;
				}	
				if (s[j] == 'G'){
					fi = mp(i, j);
					continue;
				}
				if (s[j] == '.')
					continue;
				if (s[j] == '#'){
					w[i][j] = true;
					continue;
				}
				w[i][j] = true;
				tow[r++] = mp(mp(i, j), ve(s[j]));
			}
		}	
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++)
				if (w[i][j]){
					for (t = 0; t < 4; t++)
						a[i][j][t] = false;
				 }
		for (i = 0; i < r; i++){
			for (t = 0; t < 4; t++){
				dx = tow[i].second.first;
				dy = tow[i].second.second;
				curi = tow[i].first.first;
				curj = tow[i].first.second;
				while (1){
					curi += dx;
					curj += dy;
					if (!norm(curi, curj, n, m))
						break;
					if (w[curi][curj])
						break;
					a[curi][curj][t] = false;
				} 	
				tow[i].second = next_ve(tow[i].second);
			}
		}
		l = r = 0;
		que[r++] = mp(st, 0);             
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++)
				for (t = 0; t < 4; t++)
					d[i][j][t] = -1;
		d[st.first][st.second][0] = 0;
		while (l != r){
			cur = que[l++];
			curi = cur.first.first;
			curj = cur.first.second;
			t = cur.second;
			for (int k = 0; k < 4; k++){
				dx = vect[k].first;
				dy = vect[k].second;
				if (norm(curi + dx, curj + dy, n, m) && a[curi + dx][curj + dy][(t + 1) % 4] && d[curi + dx][curj + dy][(t + 1) % 4] == -1){
					d[curi + dx][curj + dy][(t + 1) % 4] = d[curi][curj][t] + 1;
					que[r++] = mp(mp(curi + dx, curj + dy), (t + 1) % 4);
				}
			}
		}
		ans = Q;
		for (r = 0; r < 4; r++)
			if (d[fi.first][fi.second][r] != -1)
				ans = min(ans, d[fi.first][fi.second][r]);
		if (ans == Q)
			printf("Case #%d: impossible\n", tq + 1);
		else
			printf("Case #%d: %d\n", tq + 1, ans);	
	}
	return 0;
}

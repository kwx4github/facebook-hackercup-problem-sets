#include <string>
#include <cstring>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <limits.h>
using namespace std;
int maze[100][100][4];
int sx,sy,gx,gy;
int X = 0, Y = 0;
int shortestPath[100][100][4];
int visited[100][100];


struct lazer
{
    int x;
    int y;
    char c;
};
vector<lazer> l;
void bfs(int x,int y)
{
    if (x < X && y < Y && x >=0 && y >=0 && visited[x][y] == 0)
    {
        //visited[x][y] = 1;
        int updated1=0, updated2=0, updated3=0, updated4=0;
        for (int z=0;z<4;z++)
        {
            if (maze[x][y][z] > 0 && shortestPath[x][y][z] < INT_MAX)
            {
                if (x-1 >= 0 && maze[x-1][y][(z-1+4)%4] > 0)
                {

                    if (shortestPath[x-1][y][(z-1+4)%4] > shortestPath[x][y][z] + 1)
                    {
                        shortestPath[x-1][y][(z-1+4)%4] = shortestPath[x][y][z] + 1;
                        updated1 = 1;
                    }
                }

                if (x+1 < X && maze[x+1][y][(z-1+4)%4] > 0)
                {
                    if (shortestPath[x+1][y][(z-1+4)%4] > shortestPath[x][y][z] + 1)
                    {
                        shortestPath[x+1][y][(z-1+4)%4] = shortestPath[x][y][z] + 1;
                        updated2 = 1;
                    }
                }

                if (y-1 >= 0 && maze[x][y-1][(z-1+4)%4] > 0)
                {
                    if (shortestPath[x][y-1][(z-1+4)%4] > shortestPath[x][y][z] + 1)
                    {
                        shortestPath[x][y-1][(z-1+4)%4] = shortestPath[x][y][z] + 1;
                        updated3 = 1;
                    }
                }

                if (y+1 < Y && maze[x][y+1][(z-1+4)%4] > 0)
                {
                    if (shortestPath[x][y+1][(z-1+4)%4] > shortestPath[x][y][z] + 1)
                    {
                        shortestPath[x][y+1][(z-1+4)%4] = shortestPath[x][y][z] + 1;
                        updated4 = 1;
                    }
                }
            }
        }
        if (updated1 == 1) bfs(x-1,y);
        if (updated2 == 1) bfs(x+1,y);
        if (updated3 == 1) bfs(x,y-1);
        if (updated4 == 1) bfs(x,y+1);
    }
}

void init()
{
    l.clear();
    for (int y=0;y<Y;y++)
    {
        for (int x=0;x<X;x++)
        {
            char temp = getchar();
            if (temp == '\n')
                temp = getchar();
            if (temp == '.' || temp == 'G' || temp == 'S')
            {
                if (temp == 'S') {sx = x;sy = y;}
                if (temp == 'G') {gx = x;gy = y;}
                for (int z=0;z<4;z++) maze[x][y][z] = 1;
            }
            else if (temp == '#')
            {
                for (int z=0;z<4;z++) maze[x][y][z] = -2;
            }
            else
            {
                l.push_back({x,y,temp});
                for (int z=0;z<4;z++) maze[x][y][z] = -2;
            }
        }
    }

    for (int i=0;i<l.size();i++)
    {
        int x = l[i].x;
        int y = l[i].y;
        int temp = l[i].c;

        if (temp == '<')
        {
            for (int k=x-1;k>=0;k--)
            {
                if (maze[k][y][0] == -2) break;
                maze[k][y][0] = -1;
            }
            for (int k=y-1;k>=0;k--)
            {
                if (maze[x][k][1] == -2) break;
                maze[x][k][1] = -1;
            }
            for (int k=x+1;k<X;k++)
            {
                if (maze[k][y][2] == -2) break;
                maze[k][y][2] = -1;
            }
            for (int k=y+1;k<Y;k++)
            {
                if (maze[x][k][3] == -2) break;
                maze[x][k][3] = -1;
            }
        }

        if (temp == '^')
        {
            for (int k=x-1;k>=0;k--)
            {
                if (maze[k][y][3] == -2) break;
                maze[k][y][3] = -1;
            }
            for (int k=y-1;k>=0;k--)
            {
                if (maze[x][k][0] == -2) break;
                maze[x][k][0] = -1;
            }
            for (int k=x+1;k<X;k++)
            {
                if (maze[k][y][1] == -2) break;
                maze[k][y][1] = -1;
            }
            for (int k=y+1;k<Y;k++)
            {
                if (maze[x][k][2] == -2) break;
                maze[x][k][2] = -1;
            }
        }

        if (temp == '>')
        {
            for (int k=x-1;k>=0;k--)
            {
                if (maze[k][y][2] == -2) break;
                maze[k][y][2] = -1;
            }
            for (int k=y-1;k>=0;k--)
            {
                if (maze[x][k][3] == -2) break;
                maze[x][k][3] = -1;
            }
            for (int k=x+1;k<X;k++)
            {
                if (maze[k][y][0] == -2) break;
                maze[k][y][0] = -1;
            }
            for (int k=y+1;k<Y;k++)
            {
                if (maze[x][k][1] == -2) break;
                maze[x][k][1] = -1;
            }
        }

        if (temp == 'v')
        {
            for (int k=x-1;k>=0;k--)
            {
                if (maze[k][y][1] == -2) break;
                maze[k][y][1] = -1;
            }
            for (int k=y-1;k>=0;k--)
            {
                if (maze[x][k][2] == -2) break;
                maze[x][k][2] = -1;
            }
            for (int k=x+1;k<X;k++)
            {
                if (maze[k][y][3] == -2) break;
                maze[k][y][3] = -1;
            }
            for (int k=y+1;k<Y;k++)
            {
                if (maze[x][k][0] == -2) break;
                maze[x][k][0] = -1;
            }
        }


    }
    maze[sx][sy][0] = 1;
}
int main() {
	freopen("C:\\ATestCase\\in.txt","r",stdin);
    freopen("C:\\ATestCase\\out.txt","w",stdout);

	int TestNum;
	cin >> TestNum;

	for (int testCase = 0;testCase < TestNum;testCase++)
	{
	    memset(maze, 0, sizeof(maze));
	    cin >> Y >> X;

        init();
        memset(visited, 0, sizeof(visited));
        for (int y=0;y<Y;y++)
        {
            for (int x=0;x<X;x++)
            {
                for (int z=0;z<4;z++)
                    shortestPath[x][y][z] = INT_MAX;
            }
        }
        for (int z=0;z<4;z++)
        {
            if (maze[gx][gy][z] > 0)
                shortestPath[gx][gy][z] = 0;
        }
        if (maze[sx][sy][0] > 0)
        {
            bfs(gx,gy);
        }

        if (shortestPath[sx][sy][0] < INT_MAX)
            cout << "Case #" << testCase+1 << ": "<< shortestPath[sx][sy][0] <<endl;
        else
            cout << "Case #" << testCase+1 << ": "<< "impossible" <<endl;
	}
	return 0;
}

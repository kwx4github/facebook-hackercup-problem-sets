#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>

#define mp std::make_pair
#define fs first
#define sc second
#define pii std::pair< int,int >

int N, M;
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0 ,0};
char maze[4][100][100];
bool flag[4][100][100];
std::queue< pii > qw[2];

char rotate(char ch){
 if(ch == '^') return '>';
 if(ch == '>') return 'v';
 if(ch == 'v') return '<';
 if(ch == '<') return '^';
 return ch;
}

void shoot(int id,int x,int y){
 if(maze[id][x][y] == '^'){
	 while(--x >= 0){
		 if(maze[id][x][y] != '#' && maze[id][x][y] == rotate(maze[id][x][y])) maze[id][x][y] = '#'; 
		 else break;
	 }
 }
 if(maze[id][x][y] == 'v'){
	 while(++x < N){
		 if(maze[id][x][y] != '#' && maze[id][x][y] == rotate(maze[id][x][y])) maze[id][x][y] = '#'; 
		 else break;
	 }
 }
 if(maze[id][x][y] == '<'){
	 while(--y >= 0){
		 if(maze[id][x][y] != '#' && maze[id][x][y] == rotate(maze[id][x][y])) maze[id][x][y] = '#'; 
		 else break;
	 }
 }
 if(maze[id][x][y] == '>'){
	 while(++y < M){
		 if(maze[id][x][y] != '#' && maze[id][x][y] == rotate(maze[id][x][y])) maze[id][x][y] = '#'; 
		 else break;
	 }
 }
}

int main(){
 int T;
 
 scanf("%d",&T);
 for(int tc = 1; tc <= T; tc++){
	 while(!qw[0].empty()) qw[0].pop();
	 while(!qw[1].empty()) qw[1].pop();
	 pii start, finish;
	 
	 scanf("%d %d",&N,&M);
	 for(int i = 0; i < N; i++){
		for(int j = 0; j < M; j++){
			scanf(" %c",&maze[0][i][j]);
			
			if(maze[0][i][j] == 'S') start = mp(i,j);
			else if(maze[0][i][j] == 'G') finish = mp(i,j);
			
			flag[0][i][j] = false;
			for(int k = 1; k < 4; k++){
				flag[k][i][j] = false;
				maze[k][i][j] = rotate(maze[k-1][i][j]);
			}
		}
	}
	
	for(int it = 0; it < 4; it++){
		int x = start.fs + dx[it], y = start.sc + dy[it];
		if(x >= 0 && y >= 0 && x < N && y < M){
			qw[1].push(mp(x,y));
		}
	}
	
	for(int k = 0; k < 4; k++){
		for(int i = 0; i < N; i++){
			for(int j = 0; j < M; j++){
				if(maze[k][i][j] != rotate(maze[k][i][j])) shoot(k, i, j);
			}
		}
	}
	
	int ans = 0;
	for(int steps = 1; steps; steps++){
		bool success = false;
		int g = steps & 1;
		int ng = g ^ 1;
		int id = steps % 4;
		
		if(qw[g].empty()) break;
		while(!qw[g].empty()){
			pii pos = qw[g].front();
			qw[g].pop();
			
			if(flag[id][pos.fs][pos.sc] || maze[id][pos.fs][pos.sc] == '#' || maze[id][pos.fs][pos.sc] != rotate(maze[id][pos.fs][pos.sc])) continue;
			flag[id][pos.fs][pos.sc] = true;
			success |= (pos == finish);
			
			for(int it = 0; it < 4; it++){
				int x = pos.fs + dx[it], y = pos.sc + dy[it];
				if(x >= 0 && y >= 0 && x < N && y < M){
					qw[ng].push(mp(x,y));
				}
			}
		}
		
		if(success){
			ans = steps;
			break;
		}
	}
	
	printf("Case #%d: ",tc);
	if(ans) printf("%d\n",ans);
	else puts("impossible");
 }
 
 return 0;
}

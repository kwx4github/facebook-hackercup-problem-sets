#include <stdio.h>
#include <queue>
using namespace std;

struct phase{
	phase(int k_, int x_, int y_){
		k = k_; x = x_; y = y_;
	}
	int k, x, y;
};
queue<phase> Q;

const int non = 11000012;
int N, M, R[4][111][111], D[4][111][111]; char map[111][111];
int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int Test; scanf("%d", &Test); for (int Case = 1; Case <= Test;Case++){
		scanf("%d %d", &N, &M);
		for (int i = 0; i < N; i++) scanf("%s", map[i]);

		int sx, sy, ex, ey;
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				if (map[i][j] == 'S') sx = i, sy = j, map[i][j] = '.';
				if (map[i][j] == 'G') ex = i, ey = j, map[i][j] = '.';
			}
		}
		for (int k = 0; k < 4; k++){
			for (int i = 0; i < N; i++){
				for (int j = 0; j < M; j++) R[k][i][j] = 0, D[k][i][j] = non;
			}
			for (int i = 0; i < N; i++){
				for (int j = 0; j < M; j++){
					if (map[i][j] == '#') R[k][i][j] = 1;
					else if (map[i][j] != '.'){
						int x = i, y = j, d;
						if (map[i][j] == '>') d = 0;
						else if (map[i][j] == 'v') d = 1;
						else if (map[i][j] == '<') d = 2;
						else d = 3;
						d = (d + k) % 4;
						while (1){
							R[k][x][y] = 1;
							x += dx[d]; y += dy[d];
							if (x < 0 || x >= N || y < 0 || y >= M) break;
							if (map[x][y] != '.') break;
						}
					}
				}
			}
		}

		Q.push(phase(0, sx, sy)); D[0][sx][sy] = 0;
		while (!Q.empty()){
			int k = Q.front().k, x = Q.front().x, y = Q.front().y; Q.pop();
			int d = D[k][x][y];

			for (int i = 0; i < 4; i++){
				int pk = (k + 1) % 4;
				int px = x + dx[i];
				int py = y + dy[i];
				int pd = d + 1;
				if (px < 0 || px >= N || py < 0 || py >= M) continue;

				if (R[pk][px][py] == 0 && D[pk][px][py] == non){
					Q.push(phase(pk, px, py)); D[pk][px][py] = pd;
				}
			}
		}

		int ans = non;
		for (int k = 0; k<4; k++) if (ans > D[k][ex][ey]) ans = D[k][ex][ey];
		printf("Case #%d: ", Case);
		if (ans == non) puts("impossible");
		else printf("%d\n", ans);
	}
	
	return 0;
}
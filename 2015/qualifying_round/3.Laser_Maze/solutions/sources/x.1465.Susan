# include<iostream>
# include<cstdlib>
# include<cmath>
# include<fstream>
using namespace std;
int M;
int N;
char maze[102][102]={0};
int path[102][102]={-1};
int result;
char nextDirection(char turret){
    if(turret=='^')
        return '>';
    if(turret=='>')
        return 'v';
    if(turret=='v')
        return '<';
    if(turret=='<')
        return '^';
}

int findPath(int acc){
    bool possible=false;
    for(int a=1;a<=M;a++){
        for(int b=1;b<=N;b++){
            if(path[a][b]==acc){
                if(maze[a+1][b]=='.'||maze[a+1][b]=='S'||maze[a+1][b]=='G')
                    path[a+1][b]=acc+1;
                if(maze[a-1][b]=='.'||maze[a-1][b]=='S'||maze[a-1][b]=='G')
                    path[a-1][b]=acc+1;
                if(maze[a][b+1]=='.'||maze[a][b+1]=='S'||maze[a][b+1]=='G')
                    path[a][b+1]=acc+1;
                if(maze[a][b-1]=='.'||maze[a][b-1]=='S'||maze[a][b-1]=='G')
                    path[a][b-1]=acc+1;
            }
        }
    }

    for(int a=1;a<=M;a++){
        for(int b=1;b<=N;b++){
            if(maze[a][b]=='^'||maze[a][b]=='v'||maze[a][b]=='<'||maze[a][b]=='>'){
                maze[a][b]=nextDirection(maze[a][b]);
            }
            if(maze[a][b]=='^'){
                for(int i=a+1;maze[i][b]=='.'||maze[i][b]=='S'||maze[i][b]=='G';i++){
                    if(path[i][b]== acc+1)
                        path[i][b]=acc;
                }
            }
            if(maze[a][b]=='>'){
                for(int i=b+1;maze[a][i]=='.'||maze[a][i]=='S'||maze[a][i]=='G';i++){
                    if(path[a][i]== acc+1)
                        path[a][i]=acc;
                }
            }
            if(maze[a][b]=='v'){
                for(int i=a-1;maze[i][b]=='.'||maze[i][b]=='S'||maze[i][b]=='G';i--){
                    if(path[i][b]== acc+1)
                        path[i][b]=acc;
                }
            }
            if(maze[a][b]=='<'){
                for(int i=b-1;maze[a][i]=='.'||maze[a][i]=='S'||maze[a][i]=='G';i--){
                    if(path[a][i]== acc+1)
                        path[a][i]=acc;
                }
            }
        }
    }

    for(int a=1;a<=M;a++){
        for(int b=1;b<=N;b++){
            if(maze[a][b]=='G' && path[a][b] == acc+1){
                return acc+1;
            }
            if(path[a][b]==acc+1){
                possible=true;
            }
        }
    }

    if(acc>10000){
        return -1;
    }
    result = findPath(acc+1);

    if(possible){
        return result;
    }else{
        return -1;
    }
}
int main(){

    //input
    int T;
    int startx;
    int starty;
    int endx;
    int endy;
    int steps=0;
    ifstream input ("laser_maze.txt");
    ofstream output ("output2.txt");
    //place input here input>>
    input>>T;
    for(int i=1;i<=T;i++){
        input>>M>>N;

        for(int a=1;a<M;a++){
            for(int b=1;b<N;b++){
                input>>maze[a][b];
                if(maze[a][b]=='S'){
                    startx=a;
                    starty=b;
                }
                if(maze[a][b]=='G'){
                    endx=a;
                    endy=b;
                }
            }
        }
        path[startx][starty]=0;
        steps=findPath(0);
        if(steps!=-1){
            output<<"Case #"<<T<<": "<<steps<<endl;
        }else{
            output<<"Case #"<<T<<": impossible"<<endl;
        }
        steps=0;

        for(int a=1;a<M;a++){
            for(int b=1;b<N;b++){
                maze[a][b]=0;
                path[a][b]=-1;
            }
        }
    }


    //output
    //place output here output<<
    output.close();
    input.close();


    system("PAUSE");
    return 0;
}


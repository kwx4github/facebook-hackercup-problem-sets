#include<bits/stdc++.h>
#define two(a) (1<<(a))
#define LINF (1ll<<61)
#define EPS (1e-14)
#define Lshift(a,b) (a<<b)
#define Rshift(a,b) (a>>b)
#define rep(a,b) for(a=0 ; a<b ; a++)
#define xrep(a,b,c) for(a=b ; a<c ; a++)
#define INF (1<<29)
#define swap(a,b) ( (a^=b) , (b^=a) , (a^=b) )
typedef long long ll;
using namespace std;

int maze[4][103][103];
char in[111][111];
int cmap[260];
int dir[4][2] = {-1, 0, 0, 1, 1, 0, 0, -1};

void init() {
    cmap['^'] = 0;
    cmap['>'] = 1;
    cmap['v'] = 2;
    cmap['<'] = 3;
}

struct Site {
    int x, y;
    int t;
    int step;
};

int main() {
    int t, tt, m, n, i, j, k, stx, sty, edx, edy, ans;
    cin >> t;

    init();

    xrep(tt,1,t+1) {
        cin >> n >> m;
        memset(maze, 0, sizeof(maze));
        rep(i,n) { scanf("%s", in[i]); }

        rep(j,4) rep(i,n+2) { maze[j][i][0] = maze[j][i][m+1] = 1; }
        rep(j,4) rep(i,m+2) { maze[j][0][i] = maze[j][n+1][i] = 1; }

        rep(i,n) rep(j,m) {
            if (in[i][j] == 'S') {
                stx = i+1;
                sty = j+1;
            }
            else if (in[i][j] == 'G') {
                edx = i+1;
                edy = j+1;
            }
            else if (in[i][j] == '#' || in[i][j] == '>' || in[i][j] == '<' || in[i][j] == '^' || in[i][j] == 'v') {
                rep(k,4) { maze[k][i+1][j+1] = 1; }
            }
        }
        rep(i,n) rep(j,m) {
            if (in[i][j] == '>' || in[i][j] == '<' || in[i][j] == '^' || in[i][j] == 'v') {
                int temp = cmap[in[i][j]];

                for (k = 0; k < 4; k++, temp++) {
                    int x = i+1, y = j+1;
                    temp %= 4;
                    do {
                        maze[k][x][y] = 1;
                        x += dir[temp][0];
                        y += dir[temp][1];
                    } while (!maze[k][x][y]);
                }
            }
        }

        maze[0][stx][sty] = 2;

        queue<Site> que;
        Site site;
        site.x = stx;
        site.y = sty;
        site.t = 0;
        site.step = 0;

        ans = -1;

        que.push(site);
        while (!que.empty()) {
            site = que.front();
            que.pop();
            int t = (site.t + 1) % 4;

            rep(i,4) {
                int x = site.x + dir[i][0];
                int y = site.y + dir[i][1];
                if (!maze[t][x][y]) {
                    if (x == edx && y == edy) {
                        ans = site.step + 1;
                        break;
                    }
                    maze[t][x][y] = 2;
                    Site temp;
                    temp.t = t;
                    temp.x = x;
                    temp.y = y;
                    temp.step = site.step + 1;
                    que.push(temp);
                }
            }
            if (~ans) { break; }
        }
        if (~ans) { printf("Case #%d: %d\n", tt, ans); }
        else { printf("Case #%d: impossible\n", tt); }
    }
}

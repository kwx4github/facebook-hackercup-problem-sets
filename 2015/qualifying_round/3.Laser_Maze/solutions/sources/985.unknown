#include<bits/stdc++.h>
using namespace std;
#define bit(x,i) (x&(1<<i))  //select the bit of position i of x
#define lowbit(x) ((x)&((x)^((x)-1))) //get the lowest bit of x
#define hBit(msb,n) asm("bsrl %1,%0" : "=r"(msb) : "r"(n)) //get the highest bit of x, maybe the fastest
#define max(a,b) (a<b?b:a)
#define abs(x) (x<0?(-x):x) // big bug here if "-x" is not surrounded by "()"
#define IN(i,l,r) (l<i&&i<r) //the next for are for checking bound
#define LINR(i,l,r) (l<=i&&i<=r)
#define LIN(i,l,r) (l<=i&&i<r)
#define INR(i,l,r) (l<i&&i<r)
#define F(i,L,R) for (int i = L; i < R; i++) //next four are for "for loops"
#define FE(i,L,R) for (int i = L; i <= R; i++)
#define FF(i,L,R) for (int i = L; i > R; i--)
#define FFE(i,L,R) for (int i = L; i >= R; i--)
#define getI(a) scanf("%d", &a) //next three are handy ways to get ints, it's also force you to use '&' sign
#define getII(a,b) scanf("%d%d", &a, &b)
#define getIII(a,b,c) scanf("%d%d%d", &a, &b, &c)
#define wez(n) int (n); scanf("%d",&(n)) //handy if the input is right after the definition of a variable
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m))
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k))
#define TESTS wez(testow)while(testow--) //for multilple cases problems
#define whileZ int T; getI(T); while(T--) // the same as above
#define getS(x) scanf("%s", x) //get a char* string
#define clr(a,x) memset(a,x,sizeof(a)) //set elements of array to some value
#define char2Int(c) (c-'0')
#define lastEle(vec) vec[vec.size()-1] 
#define SZ(x) ((int)((x).size()))
#define REMAX(a,b) (a)=max((a),(b)) // set a to the maximum of a and b
#define REMIN(a,b) (a)=min((a),(b));
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++) // traverse an STL data structure
#define ALL(c) (c).begin(),(c).end() //handy for function like "sort()"
#define PRESENT(c,x) ((c).find(x) != (c).end()) 
#define CPRESENT(c,x) (find(ALL(c),x) != (c).end()) 
#define ll long long //data types used often, but you don't want to type them time by time
#define ull unsigned long long
#define ui unsigned int
#define us unsigned short
#define IOS ios_base::sync_with_stdio(0); //to synchronize the input of cin and scanf
#define INF 1001001001
#define PI 3.1415926535897932384626
//for map, pair
#define mp make_pair
#define fi first
#define se second
// for debug
inline void pisz(int n) {
    printf("%d\n", n);
}
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define printA(a,L,R) FE(i,L,R) cout << a[i] << (i==R?'\n':' ')
#define printV(a) printA(a,0,a.size()-1)
#define MAXN 101
//for vectors
#define pb push_back
typedef int elem_t;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
int m, n;
struct State{
	int i, j, r;
	State() {}
	State(int ii, int jj, int rr) : i(ii), j(jj), r(rr) {}
};
int d[MAXN][MAXN][4];
char g[MAXN][MAXN];
bool vis[MAXN][MAXN][4];
char l[] = {'^', '>', 'v', '<'};
int dx[] = {0, -1, 0, 1};
int dy[] = {1, 0, -1, 0};
char current(char c, int r){
	return l[(find(l, l + 4, c) - l + r) % 4];
}
bool turret(char c){
	return find(l, l + 4, c) != l + 4;
}
bool attacked(int i, int j, int r){
	for(int k = 0; k < 4; ++k){
		int y = i + dy[k];
		int x = j + dx[k];
		while(x >= 0 && x < m && y >= 0 && y < n){
			if(g[y][x] == '#')
				break;
			if(turret(g[y][x])){
				if(current(g[y][x], r) == l[k])
					return true;
				break;
			}
			y += dy[k];
			x += dx[k];
		}
	}
	return false;
}
int bfs(int si, int sj){
	clr(vis, 0);
	queue<State> q;
	q.push(State(si, sj, 0));
	d[si][sj][0] = 0;
	vis[si][sj][0] = true;
	while(!q.empty()){
		State curr = q.front();
		q.pop();
		for(int k = 0; k < 4; ++k){
			int y = curr.i + dy[k];
			int x = curr.j + dx[k];
			int nr = (curr.r + 1) % 4;
			if(y < 0 || y == n || x < 0 || x == m)
				continue;
			if(g[y][x] == '#' || turret(g[y][x]))
				continue;
			if(vis[y][x][nr] || attacked(y, x, nr))
				continue;
			d[y][x][nr] = d[curr.i][curr.j][curr.r] + 1;
			if(g[y][x] == 'G')
				return d[y][x][nr];
			vis[y][x][nr] = true;
			q.push(State(y, x, nr));
		}
	}
	return -1;
}
int main(){
	freopen("laser_maze.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	int t;
	cin >> t;
	F(te, 1, t + 1){
		cin >> n >> m;
		int si, sj;
		F(i, 0, n)
		F(j, 0, m){
			cin >> g[i][j];
			if(g[i][j] == 'S'){
				si = i;
				sj = j;
			}
		}
		int res = bfs(si, sj);
		cout << "Case #" << te << ": ";
		if(res == -1)
			cout << "impossible" << endl;
		else
			cout << res << endl;
	}
}

#include <bits/stdc++.h>
using namespace std;

int n,m, sx,sy, ex, ey;
char s[100][101];
char fatal[4][100][100];
int ans[100][100];

inline int check(int i, int j)
{
	if(i < 0 or j < 0 or i >= n or j >= m) return 0;
	char ch = s[i][j];
	if(ch == '^' or ch == 'v' or ch == '<' or ch == '>' or ch == '#') return 0;
	return 1;
}

struct P
{
	int x,y,m;
	P() {}
	P(int x, int y, int m=0) : x(x), y(y), m(m) {}
};

bool cmp(const P &a, const P &b)
{
	return a.m < b.m;
}

int f()
{
	memset(ans,-1,sizeof(int)*100*100);
	vector<P> pts;
	pts.push_back( P(sx,sy) );
	ans[sx][sy] = 0;
	while(1)
	{
		vector<P> new_pts;
		int flag = 0;
		sort(pts.begin(),pts.end(),cmp);
		for(auto p : pts)
		{
			int x = p.x, y = p.y, m = ans[x][y];
			int flag2 = 0;
			if(check(x-1,y) and ans[x-1][y] < 0 and !fatal[(m+1)%4][x-1][y]) { ans[x-1][y] = m+1; new_pts.push_back( P(x-1,y,m+1) ); flag = 1; if(ex==x-1 and ey==y) return m+1; }
			if(check(x+1,y) and ans[x+1][y] < 0 and !fatal[(m+1)%4][x+1][y]) { ans[x+1][y] = m+1; new_pts.push_back( P(x+1,y,m+1) ); flag = 1; if(ex==x+1 and ey==y) return m+1; }
			if(check(x,y-1) and ans[x][y-1] < 0 and !fatal[(m+1)%4][x][y-1]) { ans[x][y-1] = m+1; new_pts.push_back( P(x,y-1,m+1) ); flag = 1; if(ex==x and ey==y-1) return m+1; }
			if(check(x,y+1) and ans[x][y+1] < 0 and !fatal[(m+1)%4][x][y+1]) { ans[x][y+1] = m+1; new_pts.push_back( P(x,y+1,m+1) ); flag = 1; if(ex==x and ey==y+1) return m+1; }
			
			if( (check(x-1,y) and !fatal[(m+1)%4][x-1][y]) or (check(x+1,y) and !fatal[(m+1)%4][x+1][y]) or (check(x,y+1) and !fatal[(m+1)%4][x][y+1]) or (check(x,y-1) and !fatal[(m+1)%4][x][y-1]) ) flag2 = 1;
			if(m == 0 || flag2 == 0) continue;
			
			if(check(x-1,y) and ans[x-1][y] < 0 and !fatal[(m+3)%4][x-1][y]) { ans[x-1][y] = m+3; new_pts.push_back( P(x-1,y,m+3) ); flag = 1; if(ex==x-1 and ey==y) return m+3; }
			if(check(x+1,y) and ans[x+1][y] < 0 and !fatal[(m+3)%4][x+1][y]) { ans[x+1][y] = m+3; new_pts.push_back( P(x+1,y,m+3) ); flag = 1; if(ex==x+1 and ey==y) return m+3; }
			if(check(x,y-1) and ans[x][y-1] < 0 and !fatal[(m+3)%4][x][y-1]) { ans[x][y-1] = m+3; new_pts.push_back( P(x,y-1,m+3) ); flag = 1; if(ex==x and ey==y-1) return m+3; }
			if(check(x,y+1) and ans[x][y+1] < 0 and !fatal[(m+3)%4][x][y+1]) { ans[x][y+1] = m+3; new_pts.push_back( P(x,y+1,m+3) ); flag = 1; if(ex==x and ey==y+1) return m+3; }
		}
		if(!flag) return -1;
		pts.assign(new_pts.begin(),new_pts.end());
	}
	return -1;
}

inline char next(char t, int m)
{
	m %= 4;
	if(!m) return t;
	if(t == '^' and m == 1) return '>';
	if(t == '^' and m == 2) return 'v';
	if(t == '^' and m == 3) return '<';
	
	if(t == '>' and m == 1) return 'v';
	if(t == '>' and m == 2) return '<';
	if(t == '>' and m == 3) return '^';
	
	if(t == 'v' and m == 1) return '<';
	if(t == 'v' and m == 2) return '^';
	if(t == 'v' and m == 3) return '>';
	
	if(t == '<' and m == 3) return '^';
	if(t == '<' and m == 3) return '>';
	if(t == '<' and m == 3) return 'v';
	return 0;
}

int main()
{
	int t; scanf("%d\n",&t);
	for(int tt=1;tt<=t;tt++)
	{
		printf("Case #%d: ",tt);
		scanf("%d %d\n",&n,&m);
		for(int a=0;a<n;a++) gets(s[a]);
		for(int a=0;a<n;a++)
		for(int b=0;b<m;b++)
			if(s[a][b] == 'S') sx=a,sy=b;
			else if(s[a][b] == 'G') ex=a,ey=b;
		memset(fatal,0,sizeof(char)*100*100*4);
		for(int moves=0;moves<4;moves++)
		for(int a=0;a<n;a++)
			for(int b=0;b<m;b++)
			{
				char ch = s[a][b];
				if( !(ch == '^' or ch == 'v' or ch == '<' or ch == '>')) continue;
				ch = next(ch,moves);
				if(ch == '^')
				{
					for(int i=a-1;check(i,b);i--)
						fatal[moves][i][b] = 1;
				}
				else if(ch == 'v')
				{
					for(int i=a+1;check(i,b);i++)
						fatal[moves][i][b] = 1;
				}
				else if(ch == '>')
				{
					for(int i=b+1;check(a,i);i++)
						fatal[moves][a][i] = 1;
				}
				else if(ch == '<')
				{
					for(int i=b-1;check(a,i);i--)
						fatal[moves][a][i] = 1;
				}
			}
		fatal[0][sx][sy] = 0;
		// check impossible
		if( not((check(sx-1,sy) and !fatal[1][sx-1][sy]) or (check(sx+1,sy) and !fatal[1][sx+1][sy]) or (check(sx,sy-1) and !fatal[1][sx][sy-1]) or (check(sx,sy+1) and !fatal[1][sx][sy+1])))
		{
			printf("impossible\n"); continue;
		}
		int moves = f();
		if(moves < 0) printf("impossible\n");
		else printf("%d\n",moves);
	}
	return 0;
}

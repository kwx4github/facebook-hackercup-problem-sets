#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <stack>
#include <algorithm>
#define MOD 1000000007
#define forn(a, n) for(int a = 0; a<(int) (n); ++a)
#define dforn(a, n) for(int a = (n)-1; a>=0; --a)
#define forall(a, all) for(__typeof(all.begin()) a = all.begin(); a != all.end(); ++a)
#define EPS 0.000000000001
typedef long long tint;
using namespace std;

int dx[4]={1,0,-1,0}, dy[4]={0, 1, 0, -1};
string tab[128];
int laser[128][128];
int visited[128][128][4];
int dist[128][128][4];
int N, M;

bool enRango(int i, int j)
{
	return (i>=0 && i<N && j>=0 && j<M);
}

bool noSolid(int i, int j)
{
	return (tab[i][j]!='.' && tab[i][j]!='S' && tab[i][j]!='G');
}

void barrer(int i, int j, int d, int p)
{
	while(enRango(i, j) && !noSolid(i, j))
	{
		//cout << i << " " << j << " " << d << " " << p << endl;
		laser[i][j]|=p;
		i+=dy[d];
		j+=dx[d];
	}
}

void addLaser(int i, int j, int sd)
{
	laser[i][j]=15;
	forn(d,4)
	{
		barrer(i+dy[(sd+d)%4], j+dx[(sd+d)%4], (sd+d)%4, (1<<d));
	}
}

int main()
{
#ifdef ACMTUYO
	freopen("laser_maze.txt","r",stdin);
	freopen("C.out","w",stdout);
#endif
	
	int T;
	cin >> T;
	forn(tc, T)
	{
		cin >> N >> M;
		forn(i, N) cin >> tab[i];
		int sx, sy, gx, gy;
		memset(laser,0,sizeof(laser));
		memset(visited,0,sizeof(visited));
		memset(dist,0x3f,sizeof(dist));
		queue<pair<pair<int, int>, int>  > states;
		forn(i, N)
			forn(j, M)
			{
				if(tab[i][j]=='S')
				{
					sx=j; sy=i;
					states.push(make_pair(make_pair(sy,sx), 0));
					visited[sy][sx][0]=1;
					dist[sy][sx][0]=0;
				}
				if(tab[i][j]=='G')
				{
					gx=j; gy=i;
				}
				if(tab[i][j]=='#')
				{
					laser[i][j]=15;
				}
				
				if(tab[i][j]=='>') addLaser(i, j, 0);
				if(tab[i][j]=='v') addLaser(i, j, 1);
				if(tab[i][j]=='<') addLaser(i, j, 2);
				if(tab[i][j]=='^') addLaser(i, j, 3);
			}
	
		while(!states.empty())
		{
			int ai=states.front().first.first, aj=states.front().first.second, ad=(states.front().second+1)%4;
			//cout << ai << " " << aj << " " << states.front().second << endl;
			
			forn(d, 4)
			{
				int ni=ai+dy[d], nj=aj+dx[d];
				if(enRango(ni, nj) && !visited[ni][nj][ad] && !(laser[ni][nj]&(1<<ad)))
				{
					states.push(make_pair(make_pair(ni, nj), ad));
					visited[ni][nj][ad]=1;
					dist[ni][nj][ad]=dist[ai][aj][states.front().second]+1;
				}
			}
			states.pop();
		}
		int cocacola=4000000;
		forn(d, 4) if(visited[gy][gx][d]) cocacola=min(cocacola, dist[gy][gx][d]);
		cout << "Case #" << tc+1 << ": ";
		if(cocacola<4000000) cout << cocacola; else cout << "impossible";
		cout << endl;
	}

	

	return 0;
}

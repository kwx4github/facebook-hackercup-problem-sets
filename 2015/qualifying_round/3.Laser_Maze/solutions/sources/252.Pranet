#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
ll pwr(ll a,ll b,ll mod)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans=(ans*a)%mod;
    a=(a*a)%mod;
    b/=2;
  }
  return ans;
}
ll pwr(ll a,ll b)
{
  ll ans=1;
  while(b)
  {
    if(b&1)
      ans*=a;
    a*=a;
    b/=2;
  }
  return ans;
}
ll gcd(ll a,ll b)
{
  while(b)
    {
      ll temp=a;
      a=b;
      b=temp%b;
    }
  return a;
}
ll lcm(ll a,ll b)
{  
  return (a/gcd(a,b))*b;
}
ll modularInverse(ll a,ll m)
{     
      /*reminder: make sure m is prime*/
      assert(false);
      return pwr(a,m-2,m);
}
const int mod=1000000007;
    int n,m;
string s[120];
bool isSafe[101][101][4];
bool issafe(int r,int c,int t)
{
  return isSafe[r][c][t%4];
}
bool isValid(int r,int c)
{
  // t=t%4;
  if(r>=0 && r<n && c>=0 && c<m && (s[r][c]=='.' || s[r][c]=='S' || s[r][c]=='G') )
    return true;
  return false;
}

int sr,sc,er,ec;
void mark(int dr,int dc,int t,int r,int c)
{

  int cr=r;
  int cc=c;

  do
  {
    cr+=dr;
    cc+=dc;
    if( isValid(cr,cc))
      isSafe[cr][cc][t]=false;
    else
      break;
  }
  while(true);
}
int dist[111][121][4];
struct Node
{
  int r,c,t;

  Node()
  {

  }
  Node(int r,int c,int t)
  {
    this->r=r;
    this->c=c;
    this->t=t%4;
  }
};
int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  int tt=0;
  while(t--)
  {
    cout<<"Case #"<<++tt<<": ";
    memset(isSafe,true,sizeof isSafe);
    cin>>n>>m;
    for(int i=0;i<n;++i)
      cin>>s[i];
    // cout<<n<<" "<<m<<endl;
    /* mark for all lasers */
    for(int i=0;i<n;++i)
    {
      for(int j=0;j<m;++j)
      {
        if(s[i][j]=='^')
          {
            mark(-1,0,0,i,j);
            mark(0,1,1,i,j);
            mark(1,0,2,i,j);
            mark(0,-1,3,i,j);
          }
        if(s[i][j]=='>')
          {
            mark(-1,0,3,i,j);
            mark(0,1,0,i,j);
            mark(1,0,1,i,j);
            mark(0,-1,2,i,j);
          }
        if(s[i][j]=='v')
          {
            mark(-1,0,2,i,j);
            mark(0,1,3,i,j);
            mark(1,0,0,i,j);
            mark(0,-1,1,i,j);
          }
        if(s[i][j]=='<')
          {
            mark(-1,0,1,i,j);
            mark(0,1,2,i,j);
            mark(1,0,3,i,j);
            mark(0,-1,0,i,j);
          }
        if(s[i][j]=='S')
        {
          sr=i;
          sc=j;

        }
        if(s[i][j]=='G')
        {
          er=i;
          ec=j;
        }

      }
    }


  
  
  memset(dist,63,sizeof dist);
  
  queue<Node> Q;
  dist[sr][sc][0]=0;

  Q.push(Node(sr,sc,0));

  while(!Q.empty())
  {
    int r=Q.front().r;
    int c=Q.front().c;
    int t=Q.front().t;
    // cout<<r<<" "<<c<<" "<<t<<endl;
    Q.pop();
    int d=dist[r][c][t]%4;

    for(int i=-1;i<=1;++i)
      for(int j=-1;j<=1;++j)
      {
        if(abs(i)+abs(j)==1)
        {
          int D=(d+1)%4;

          if(isValid(r+i,c+j) && issafe(r+i,c+j,d+1) && dist[r+i][c+j][D]>dist[r][c][d]+1)
          {
            dist[r+i][c+j][D]=dist[r][c][d]+1;
            Q.push(Node(r+i,c+j,D));

            if(r+i==er && c+j==ec)
            {
              cout<<dist[r+i][c+j][D]<<"\n";
              goto done;
            }
          }
        }
      }
  }
  cout<<"impossible\n";
  done:;

}



}





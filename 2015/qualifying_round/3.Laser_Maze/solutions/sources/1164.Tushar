#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <cstring>
#include <iostream>
#include <stack>
#include <map>
#include <vector>
#include <utility>
#include <set>

#define MOD (1000000007)
#define MAXINT 1e9
#define EPS (1e-9)
#define mp   make_pair
#define pb   push_back
#define pii  pair<int,int> 
#define se   second
#define fi   first
#define ll long long int

using namespace std;
bool safeornot[103][103][5];
int visit[103][104][5];
vector<pair<int,int> > list;
pair<int,int> startp,endp;
char way[105][105];
char help[4][4]={'^','>','v','<','>','v','<','^','v','<','^','>','<','^','>','v'};
int h,w;

void work(pii p,int s)
{
	int x=p.fi,y=p.se,q;
	//cout<<x<<y<<s<<endl;
	visit[x][y][s%4]=s;
	if(y!=w-1)
	{
		q=visit[x][y+1][(s+1)%4];
		if( (q==-1 || q>(s+1) ) && safeornot[x][y+1][(s+1)%4])
		{
			work(mp(x,y+1),s+1);
		}
	}
	if(y!=0)
	{
		q=visit[x][y-1][(s+1)%4];
		if( (q==-1 || q>(s+1) ) && safeornot[x][y-1][(s+1)%4])
		{
			work(mp(x,y-1),s+1);
		}
	}
	if(x!=h-1)
	{
		q=visit[x+1][y][(s+1)%4];
		if( (q==-1 || q>(s+1) ) && safeornot[x+1][y][(s+1)%4])
		{
			work(mp(x+1,y),s+1);
		}
	}
	if(x!=0)
	{
		q=visit[x-1][y][(s+1)%4];
		if( (q==-1 || q>(s+1) ) && safeornot[x-1][y][(s+1)%4])
		{
			work(mp(x-1,y),s+1);
		}
	}
}

int main()
{
	int test,t,i,j,k,ans,o,p,x,y;
	char d;
	cin>>test;
	for(t=1;t<=test;t++)
	{
		list.clear();
		cout<<"Case #"<<t<<": ";
		cin>>h>>w;
		for(i=0;i<h;i++)
			scanf("%s",way[i]);
		for(i=0;i<h;i++)
		{
			for(j=0;j<w;j++)
			{
				safeornot[i][j][0]=safeornot[i][j][1]=safeornot[i][j][2]=safeornot[i][j][3]=1;
				if(way[i][j]=='S'){
					startp=mp(i,j);
					way[i][j]='.';
					continue;
					}
				else if(way[i][j]=='G'){
					endp=mp(i,j);
					way[i][j]='.';continue;}
				else if(way[i][j]=='.')	continue;
				safeornot[i][j][0]=safeornot[i][j][1]=safeornot[i][j][2]=safeornot[i][j][3]=0;				
				if(way[i][j]=='#')	continue;
				else 	list.pb(mp(i,j));
			}
		}
		//cout<<startp.fi<<startp.se<<" "<<endp.fi<<endp.se<<" "<<(int)list.size()<<endl;
		for(i=0;i<=3;i++)
		{
			for(j=0;j<list.size();j++)
			{
				x=list[j].fi;
				y=list[j].se;
				for(k=0;k<4;k++)
				{
					if(way[x][y]==help[k][0])
					{
						d=help[k][i];
						break;
					}
				}
				if(d=='>')
				{
					o=x;
					for(p=y+1;p<w;p++)
					{
						if(way[o][p]!='.')	break;
						safeornot[o][p][i]=0;
					}
				}
				else if(d=='v')
				{
					p=y;
					for(o=x+1;o<h;o++)
					{
						if(way[o][p]!='.')	break;
						safeornot[o][p][i]=0;
					}
				}
				else if(d=='<')
				{
					o=x;
					for(p=y-1;p>=0;p--)
					{
						if(way[o][p]!='.')	break;
						safeornot[o][p][i]=0;
					}
				}
				else
				{
					p=y;
					for(o=x-1;o>=0;o--)
					{
						if(way[o][p]!='.')	break;
						safeornot[o][p][i]=0;
					}
				}
			}
		}
		/*for(i=0;i<=3;i++)
		{
			for(j=0;j<h;j++)
			{
				for(k=0;k<w;k++)
					cout<<safeornot[j][k][i]<" ";
				cout<<endl;
			}
			cout<<endl;
		}*/
		for(i=0;i<h;i++)
			for(j=0;j<w;j++)
				for(k=0;k<4;k++)
					visit[i][j][k]=-1;
		work(startp,0);
		ans=10000000;
		for(i=0;i<=3;i++)
		{
			if(visit[endp.fi][endp.se][i]==-1)	continue;
			ans=min(ans,visit[endp.fi][endp.se][i]);
		}
		if(ans==10000000)
			cout<<"impossible"<<endl;
		else
			cout<<ans<<endl;
	}
	return 0;
}
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<queue>
#define FI(i,a, b) for(i=a;i<=b;i++)
#define FD(i,a, b) for(i=a;i>=b;i--)

#define CL(x, y) memset(x, y, sizeof(x))
#define INF 100000000
#define MAXN ?
#define MAXE ?
using namespace std;
int vis[4][110][110], i, j, k, N, M, K, lp[4][2], f[154], st[2], en[2], dir[5][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {0, 0}};
char m[4], maze[110][110];
int path[4][110][110];
int isLaser(char x){
	return (x == '<' || x == '^' || x == '>' || x == 'v');
}
int out(int x, int y){
	return x < 0 || y < 0 || x >= N || y >= M;
}
int laserProof(int x, int y){
	char c = maze[x][y];
	return c == '#' || isLaser(c);
}
void kill(int x, int y, int z){
	int dir[2] = {lp[f[maze[x][y]]][0], lp[f[maze[x][y]]][1]};
	do{
		x += dir[0], y += dir[1];
		if(!out(x, y) && !laserProof(x, y))
			path[z][x][y] = 1;
	}while(!out(x, y) && !laserProof(x, y));
}
void precomp(){
	int i, j, k, p, q, r, s;
	FI(k, 0, 3){
		FI(i, 0, N - 1){
			FI(j, 0, M - 1){
				if(isLaser(maze[i][j])){
					kill(i, j, k);
					maze[i][j] = m[f[maze[i][j]]];
				}else if(maze[i][j] == 'S') st[0] = i, st[1] = j;
				else if(maze[i][j] == 'G') en[0] = i, en[1] = j;
			}
		}
	}
//	FI(k, 0, 3) FI(i, 0, N - 1) FI(j, 0, M - 1) printf("%d%c", path[k][i][j], j == M - 1 ? '\n' : ' ');
}
struct node{
	int x, y, z;	
};
queue<node> q;
int bfs(int sx, int sy, int ex, int ey){
//	printf("%d %d %d %d\n", sx, y, ex, ey);
	node t1, t2;
	t1 = (node){sx, sy, 0};
	q.push(t1);
	while(!q.empty()){
		t1 = q.front();
		q.pop();
//		printf("%d %d %d\n", t1.x, t1.y, t1.z);
		if(t1.x == ex && t1.y == ey) return t1.z;
		FI(i, 0, 3){
			t2 = t1;
			t2.x += dir[i][0], t2.y += dir[i][1], t2.z++;
			if(!out(t2.x, t2.y) && maze[t2.x][t2.y] != '#' && !isLaser(maze[t2.x][t2.y]) && !path[t2.z % 4][t2.x][t2.y] &&  !vis[t2.z % 4][t2.x][t2.y]) vis[t2.z % 4][t2.x][t2.y] = 1, q.push(t2);//, printf("a%d %d %c\n", t2.x, t2.y, maze[t2.x][t2.y]);;
		}
	}
	return INF;
}
int solve(){
	scanf("%d%d", &N, &M);
	FI(i, 0, N - 1) scanf("%s", maze[i]);
	precomp();
	return bfs(st[0], st[1], en[0], en[1]);
}
int main(){
	f['<'] = 0, f['^'] = 1, f['>'] = 2, f['v'] = 3;
	m[f['<']] = '^', m[f['^']] = '>', m[f['>']] = 'v', m[f['v']] = '<';
	lp[f['<']][0] = 0, lp[f['<']][1] = -1, lp[f['^']][0] = -1, lp[f['^']][1] = 0, lp[f['>']][0] = 0, lp[f['>']][1] = 1, lp[f['v']][0] = 1, lp[f['v']][1] = 0;
	scanf("%d", &K);
	FI(k, 1, K){
		int ans = solve();
		printf("Case #%d: ", k);
		if(ans == INF) printf("impossible\n");
		else printf("%d\n", ans);
		CL(maze, 0);
		CL(path, 0);
		CL(vis, 0);
		while(!q.empty()) q.pop();
	}
}


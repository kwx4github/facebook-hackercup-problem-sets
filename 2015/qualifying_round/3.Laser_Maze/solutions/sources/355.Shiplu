#include<bits/stdc++.h>
using namespace std;

#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define memo(a,b) memset(a,b,sizeof(a))

#define all(a) a.begin(),a.end()
#define pb push_back
#define mpp(a,b,c) make_pair(make_pair(a,b),c)

#define inf (1<<29)
#define i64 long long
#define pi (2.0*acos(0.0))
#define eps (1e-9)

struct node{
    int x,y,dir;
};
char ds[] = "^>v<";
int mov[4][2] = {1,0,0,-1,-1,0,0,1}, n, m, d[105][105][4];
char s[105][105];
bool isInvalid(node p){
    int i,j,k,l;
    for(i = 0;i<4;i++){
        j = p.x;
        k = p.y;
        while(j>=0 && j<n && k>=0 && k<m){
            if(s[j][k]=='#') break;
            if(s[j][k]!='.'){
                for(l = 0;l<4;l++){
                    if(s[j][k] == ds[l]){
                        break;
                    }
                }
                if(l<4){
                    l = (l+p.dir)%4;
                    if(l == i) return true;
                    break;
                }
            }
            j+=mov[i][0];
            k+=mov[i][1];
        }
    }
    return false;
}
int main() {
    freopen("laser_maze.txt","r",stdin);
    freopen("output3.txt","w",stdout);
    int i, t, cs = 1, j;
    cin>>t;
	while (t--){
        cin>>n>>m;
        for(i = 0;i<n;i++){
            cin>>s[i];
        }
        queue<node> q;
        node p,e, u;
        SET(d);
        for(i = 0;i<n;i++){
            for(j = 0;j<m;j++){
                if(s[i][j] =='S'){
                    p.x = i;
                    p.y = j;
                    p.dir = 0;
                    s[p.x][p.y] = '.';
                }
                else if(s[i][j] =='G'){
                    e.x = i;
                    e.y = j;
                    s[i][j] = '.';
                }
            }
        }
        printf("Case #%d: ",cs++);
        q.push(p);
        d[p.x][p.y][p.dir] = 0;
        while(!q.empty()){
            u = q.front();
            if(u.x == e.x && u.y == e.y) break;
            q.pop();
            for(i = 0;i<4;i++){
                p.x = u.x + mov[i][0];
                p.y = u.y + mov[i][1];
                p.dir = (u.dir + 1)%4;
                if(p.x<0 || p.x>=n || p.y<0 || p.y>=m || s[p.x][p.y]!='.' || d[p.x][p.y][p.dir]!=-1 || isInvalid(p)) continue;
                q.push(p);
                d[p.x][p.y][p.dir] = d[u.x][u.y][u.dir] + 1;
            }
        }
        if(q.empty())
            cout<<"impossible"<<endl;
        else
            cout<<d[u.x][u.y][u.dir]<<endl;
	}
	return 0;
}

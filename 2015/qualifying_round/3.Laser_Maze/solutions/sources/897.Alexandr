import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;

public class MainC {

    private static final int INF = 1 << 30;

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File("in.txt"));
        System.setOut(new PrintStream(new File("out.txt")));
        int T = sc.nextInt(), tt = 0;
        for (;tt < T; tt++) {
            final int n = sc.nextInt(), m = sc.nextInt();
            sc.nextLine();
            final char[][] inmap = new char[n][];
            for (int i=0; i < n; i++) {
                inmap[i] = sc.nextLine().toCharArray();
            }
            Point start = null, end = null;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (inmap[i][j] == 'S') {
                        inmap[i][j] = '.';
                        start = new Point(i, j);
                    } else if (inmap[i][j] == 'G') {
                        inmap[i][j] = '.';
                        end = new Point(i, j);
                    }
                }
            }
            int[][][] map = new int[4][n][m];
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < n; j++) {
                    for (int k = 0; k < m; k++) {
                        map[i][j][k] = INF;
                    }
                }
            }
            Map<Character, char[]> rot = new HashMap<Character, char[]>();
            rot.put('v', new char[]{'v','<','^','>'});
            rot.put('<', new char[]{'<','^','>','v'});
            rot.put('^', new char[]{'^','>','v','<'});
            rot.put('>', new char[]{'>','v','<','^'});
            Map<Character, Action> action = new HashMap<Character, Action>();
            action.put('v', new Action() {
                @Override
                public void go(int[][][] map, int t, int i, int j) {
                    for (int k = 0; i + k < n; k++) {
                        if (k != 0 && inmap[i + k][j] != '.') {
                            break;
                        }
                        map[t][i + k][j] = -1;
                    }
                }
            });
            action.put('<', new Action() {
                @Override
                public void go(int[][][] map, int t, int i, int j) {
                    for (int k = 0; j - k >= 0; k++) {
                        if (k != 0 && inmap[i][j - k] != '.') {
                            break;
                        }
                        map[t][i][j - k] = -1;
                    }
                }
            });
            action.put('^', new Action() {
                @Override
                public void go(int[][][] map, int t, int i, int j) {
                    for (int k = 0; i - k >=0; k++) {
                        if (k != 0 && inmap[i - k][j] != '.') {
                            break;
                        }
                        map[t][i - k][j] = -1;
                    }
                }
            });
            action.put('>', new Action() {
                @Override
                public void go(int[][][] map, int t, int i, int j) {
                    for (int k = 0; k + j < m; k++) {
                        if (k != 0 && inmap[i][k + j] != '.') {
                            break;
                        }
                        map[t][i][k + j] = -1;
                    }
                }
            });
            for (int t = 0; t < 4; t++) {
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < m; j++) {
                        char l = inmap[i][j];
                        switch (l) {
                            case '<':
                            case '^':
                            case '>':
                            case 'v':
                                char newL = rot.get(l)[t];
                                action.get(newL).go(map, t, i, j);
                                break;
                            case '#':
                                map[t][i][j] = -1;
                        }

                    }
                }
            }
            Queue<Point> queue = new LinkedList<Point>();
            queue.add(start);
            Point cur;
            map[0][start.x][start.y] = 0;
            int[] movex = new int[]{1, 0, -1, 0};
            int[] movey = new int[]{0, 1, 0, -1};
            while ((cur = queue.poll()) != null) {
                int curVal = map[cur.t][cur.x][cur.y];
                for (int i = 0; i < 4; i++) {
                    int x = cur.x + movex[i];
                    int y = cur.y + movey[i];
                    for (int j = 0; j < 2; j++) {
                        if (x >= 0 && x < n && y >=0 && y < m) {
                            int t = (cur.t + 1) % 4;
                            int value = map[t][x][y];
                            int newValue = curVal + 1;
                            if (value != -1 && newValue < value) {
                                queue.add(new Point(x, y, t));
                                map[t][x][y] = newValue;
                            }
                        }
                    }
                }
            }
            int best = INF;
            for (int i = 0; i < 4; i++) {
                int v = map[i][end.x][end.y];
                if (v != -1 && v < best) {
                    best = v;
                }
            }
            System.out.println(String.format("Case #%d: %s", tt+1, best == INF ? "impossible" : Integer.valueOf(best)));
        }
    }

    public static class Point {
        int x;
        int y;
        int t;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public Point(int x, int y, int t) {
            this.x = x;
            this.y = y;
            this.t = t;
        }
    };

    private static interface Action {
        public void go(int[][][] map, int t, int i, int j);
    }

}

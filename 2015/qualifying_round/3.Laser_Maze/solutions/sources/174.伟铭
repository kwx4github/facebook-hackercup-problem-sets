#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

const int dx[]={-1, 0, 1, 0};
const int dy[]={ 0, 1, 0,-1};
char s[105][105];
bool mp[105][105][4];
int dis[105*105*4];
int n,m;
int sx,sy,gx,gy;
void init(){
    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)for(int k=0;k<4;++k)mp[i][j][k]=true;
    for(int i=0;i<=n+1;++i)for(int k=0;k<4;++k)mp[i][0][k]=mp[i][m+1][k]=false;
    for(int j=0;j<=m+1;++j)for(int k=0;k<4;++k)mp[0][j][k]=mp[n+1][j][k]=false;
    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j){
        if(s[i][j]=='.')continue;
        else if(s[i][j]=='#')for(int k=0;k<4;++k)mp[i][j][k]=false;
        else if(s[i][j]=='S')sx=i,sy=j;
        else if(s[i][j]=='G')gx=i,gy=j;
        else{
            int d;
            if(s[i][j]=='^')d=0;
            else if(s[i][j]=='>')d=1;
            else if(s[i][j]=='v')d=2;
            else if(s[i][j]=='<')d=3;
            else {
                printf("%d,%d  %c error\n",i,j,s[i][j]);
                //while(1)puts(strcat((char*)2333,"hehe"));
                exit(233);
            }
            for(int k=0;k<4;++k)mp[i][j][k]=false;
            for(int k=0;k<4;++k){
                for(int x=i+dx[d],y=j+dy[d];x&&x<=n&&y&&y<=m;x+=dx[d],y+=dy[d]){
                    if(s[x][y]=='#'||s[x][y]=='^'||s[x][y]=='>'||s[x][y]=='v'||s[x][y]=='<')break;
                    mp[x][y][k]=false;
                }
                (d+=1)%=4;
            }
        }
    }
}
int encode(int x,int y,int k){
    return x*(m+2)*4+y*4+k;
}
void decode(int s,int &x,int &y,int &k){
    x=s/(m+2)/4;
    s%=(m+2)*4;
    y=s/4;
    s%=4;
    k=s;
}
int bfs(){
    int t=0;
    for(int k=0;k<4;++k)if(mp[gx][gy][k])++t;
    if(!t)return -1;
    memset(dis,0x7f,sizeof(dis[0])*(n+3)*(m+3)*4);
    t=encode(sx,sy,0);
    dis[t]=0;
    queue<int> q;
    q.push(t);
    int x,y,k,xx,yy,kk,tt;
    while(!q.empty()){
        t=q.front();q.pop();
        decode(t,x,y,k);
        for(int d=0;d<4;++d){
            xx=x+dx[d];
            yy=y+dy[d];
            kk=(k+1)%4;
            if(!mp[xx][yy][kk])continue;
            tt=encode(xx,yy,kk);
            if(dis[t]+1<dis[tt]){
                dis[tt]=dis[t]+1;
                if(s[xx][yy]=='G')return dis[tt];
                q.push(tt);
            }
        }
    }
    return -1;
}
void pt(){
    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)for(int k=0;k<4;++k){
        printf("(%2d,%2d,%2d) %s\t %d\n",i,j,k,mp[i][j][k]?"true":"false",dis[encode(i,j,k)]);
    }
}
void test(){
    n=3,m=4;
    for(int i=0;i<100;++i){
        int x,y,k;
        decode(i,x,y,k);
        printf("%d\t%d\t%d\n",x,y,k);
    }
    puts("-----");
    for(int i=0;i<=n+1;++i)for(int j=0;j<=m+1;++j)for(int k=0;k<4;++k)printf("%d\t",encode(i,j,k));
    exit(0);
}
int main(){
    //test();
    int T;
    scanf("%d",&T);
    for(int t=1;t<=T;++t){
        scanf("%d%d",&n,&m);
        for(int i=1;i<=n;++i)scanf("%s",s[i]+1);
        init();
        int ans=bfs();
        //pt();
        if(ans>=0)printf("Case #%d: %d\n",t,ans);
        else printf("Case #%d: impossible\n", t);
    }
}
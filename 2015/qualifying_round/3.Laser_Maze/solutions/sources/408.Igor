import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedList;


public class Fb3 {
	public static final String IMP = "impossible";
	
	public static final int[] dx = new int[] {0, -1, 0, 1};
	public static final int[] dy = new int[] {-1, 0, 1, 0};
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader("input3.txt"));
		PrintWriter pw = new PrintWriter(new FileWriter("output3.txt"));
		
		int nrT = Integer.parseInt(br.readLine());
		for(int t = 1; t <= nrT; t++) {
			String[] dimms = br.readLine().split(" ");
			int m = Integer.parseInt(dimms[0]);
			int n = Integer.parseInt(dimms[1]);
			
			map = new String[m];
			for(int i = 0; i < m; i++) {
				map[i] = br.readLine();
				for(int j = 0; j < map[i].length(); j++) {
					char chr = map[i].charAt(j);
					
					if(chr == 'S') {
						initialX = i;
						initialY = j;
					}
					if(chr == 'G') {
						goalX = i;
						goalY = j;
					}
				}
			}
			
			solve();
			pw.println("Case #" + t + ": " + (res == -1 ? IMP : String.valueOf(res)));
		}
		br.close();
		pw.close();
		System.out.println("done!");
	}
	
	static String[] map = null;
	static int[][][] dp = null;
	static int res = -1, initialX = 0, initialY = 0, goalX = 0, goalY = 0;
	
	static void solve() {
		res = -1;
		
		dp = new int[map.length][map[0].length()][4];
		for(int i = 0; i < dp.length; i++) {
	    for(int j = 0; j < dp[0].length; j++) {
	      Arrays.fill(dp[i][j], -1);
      }
    }
		
		dp[initialX][initialY][3] = 0;
		
		boolean[][][] forbidden = new boolean[map.length][map[0].length()][4];
		// establish the forbidden cells and times
		for(int i = 0; i < map.length; i++) {
			for(int j = 0; j < map[i].length(); j++) {
				char chr = map[i].charAt(j);
				if(chr == '#') {
					Arrays.fill(forbidden[i][j], true);
					continue;
				}
				if(chr == '<' || chr == '>' || chr == '^' || chr == 'v') {
					int ind = chr == '<' ? 3 : chr == '>' ? 1 : chr == '^' ? 2 : 0;
					
					Arrays.fill(forbidden[i][j], true);
					int nj = j - 1;
					while(nj >= 0 && passThrough(map[i].charAt(nj))) {
						forbidden[i][nj][ind] = true;
						nj--;
					}
					ind = (ind + 1) % 4;
					int ni = i - 1;
					while(ni >= 0 && passThrough(map[ni].charAt(j))) {
						forbidden[ni][j][ind] = true;
						ni--;
					}
					ind = (ind + 1) % 4;
					nj = j + 1;
					while(nj < map[i].length() && passThrough(map[i].charAt(nj))) {
						forbidden[i][nj][ind] = true;
						nj++;
					}
					ind = (ind + 1) % 4;
					ni = i + 1;
					while(ni < map.length && passThrough(map[ni].charAt(j))) {
						forbidden[ni][j][ind] = true;
						ni++;
					}
				}
			}
		}
		
		LinkedList<Integer> queue = new LinkedList<Integer>();
		queue.add((initialX << 7) | initialY);

		while(queue.size() > 0) {
			int val = queue.removeFirst();
			int i = (val >> 7), j = (val & 127);
			
    	for(int k = 0; k < 4; k++) {
    		if(dp[i][j][k] == -1) {
    			continue;
    		}
    		
    		for(int u = 0; u < dx.length; u++) {
    			if(isIn(i + dx[u], j + dy[u]) && !forbidden[i + dx[u]][j + dy[u]][(k + 1) & 3]) {
    				int newVal = dp[i][j][k] + 1;
    				int prevDp = dp[i + dx[u]][j + dy[u]][(k + 1) & 3];
    				if(prevDp == -1 || prevDp > newVal) {
    					dp[i + dx[u]][j + dy[u]][(k + 1) & 3] = newVal;
    					queue.add(((i + dx[u]) << 7) | (j + dy[u]));
    				}
    			}
    		}
    	}
		}
		
		for(int k = 0; k < 4; k++) {
			if(dp[goalX][goalY][k] != -1) {
				if(res == -1) {
					res = dp[goalX][goalY][k];
				} else {
					res = Math.min(res, dp[goalX][goalY][k]);
				}
			}
		}
	}
	
	static boolean passThrough(char chr) {
		return chr == '.' || chr == 'S' || chr == 'G';
	}
	
	static boolean isIn(int x, int y) {
		return x >= 0 && x < map.length && y >= 0 && y < map[0].length();
	}
}

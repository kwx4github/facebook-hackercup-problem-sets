#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <deque>
#include <complex>
#include <string>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <valarray>
#include <unordered_map>
#include <iterator>
#include <functional>
#include <cassert>
using namespace std;
typedef long long int ll;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define REPS(i,x) for(int i=1;i<=(int)(x);i++)
#define RREP(i,x) for(int i=((int)(x)-1);i>=0;i--)
#define RREPS(i,x) for(int i=((int)(x));i>0;i--)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
#define ALL(container) (container).begin(), (container).end()
#define RALL(container) (container).rbegin(), (container).rend()
#define SZ(container) ((int)container.size())
#define mp(a,b) make_pair(a, b)
#define pb push_back
#define eb emplace_back
#define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() );

template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
}
template<class T> ostream& operator<<(ostream &os, const set<T> &t) {
os<<"{"; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"}"; return os;
}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
template<class S, class T> pair<S,T> operator+(const pair<S,T> &s, const pair<S,T> &t){ return pair<S,T>(s.first+t.first, s.second+t.second);}
template<class S, class T> pair<S,T> operator-(const pair<S,T> &s, const pair<S,T> &t){ return pair<S,T>(s.first-t.first, s.second-t.second);}

const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;


int T, w, h;
char d[200][200];
int las[50000][4];
int cost[50000][4];
int dir[4][2] = {{1, 0},{0, 1},{-1, 0},{0, -1}};
int main(int argc, char *argv[]){
	ios::sync_with_stdio(false);
	while(cin >> T){
		REPS(t, T){
			cin >> h >> w;
			memset(d, '#', sizeof(d));
			memset(las, 0, sizeof(las));
			memset(cost, 63, sizeof(cost));
			REP(i, h) cin >> &d[i+1][1];
			int s, g;
			REPS(i, h)REPS(j, w){
				int pos = i*(w+2)+j;
				if(d[i][j] == 'S') s = pos;
				else if(d[i][j] == 'G') g = pos;
				else continue;
				d[i][j] = '.';
			}
			REPS(i, h)REPS(j, w){
				int pos = i*(w+2)+j;
				if(d[i][j] == 'S') s = pos;
				else if(d[i][j] == 'G') g = pos;
				else if(d[i][j] == '#') continue;
				else if(d[i][j] == '.') continue;
				else {
					int b;
					if(d[i][j] == '>') b = 0;
					if(d[i][j] == '^') b = 1;
					if(d[i][j] == '<') b = 2;
					if(d[i][j] == 'v') b = 3;
					REP(k, 4){
						int x = j, y = i;
						while(d[y=y+dir[k][1]][x=x+dir[k][0]]=='.')
							las[y*(w+2)+x][(k+b)%4] = 1;
					}
				}
			}
			queue<pii> que;
			que.emplace(s, 0);
			cost[s][0] = 0;
			h += 2;w += 2;
			int ans = -1;
			while(!que.empty()){
				int pos = que.front().first;
				int m4 =  que.front().second;
				que.pop();
				if(pos == g){
					ans = cost[pos][m4]; break;
				}
				REP(k, 4){
					int dy = pos/w + dir[k][0];
					int dx = pos%w + dir[k][1];
					if(d[dy][dx] == '#' || las[dy*w+dx][(m4+1)%4] || 
						cost[dy*w+dx][(m4+1)%4] <= cost[pos][m4]+1) continue;
					cost[dy*w+dx][(m4+1)%4] = cost[pos][m4] + 1;
					que.emplace(dy*w+dx, (m4+1)%4);
				}
			}
			if(ans == -1) cout << "Case #" << t << ": impossible" << endl;
			else  cout << "Case #" << t << ": " << ans << endl;
		}
	}
	return 0;
}

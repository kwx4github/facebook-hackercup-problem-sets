#if 1
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <queue>
#include <stack>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <time.h>

#define LL long long
#define LD long double

#define REP(i,n) for (int i = 0; i < (n); i++)
#define REP2(i,n) for (int i = 0; i <= int(n); i++)
#define FOR(i,a,b) for (int i = int(a); i <= int(b); i++)
#define FORB(i,a,b) for (int i = int(a); i >= int(b); i--)

#define mp(u,v) make_pair(u, v)
#define pb push_back

using namespace std;

typedef pair<int, int> pii;
typedef pair<string, string> pss;
typedef vector<int> vi;
typedef vector<vi> vvi;

#define MAXN 110
#define MAXT 3600
#define oo 1000000001
#define MODULE 1000000007

#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;

struct node{
    int x, y, time;
};

const char lz[5] = "^>v<";
const int dx[4] = { -1, 0, 1, 0 };
const int dy[4] = { 0, 1, 0, -1 };

int n, m, res;
char s[MAXN][MAXN];
bool dd[MAXN][MAXN][4];
int cnt[MAXN][MAXN][4];
queue<node> q;

void readin(){
    scanf("%d%d", &m, &n);
    char buf[30];
    gets(buf);
    REP(i, m){
        gets(s[i]);
    }
}

bool pass(char p){
    return p == 'S' || p == 'G' || p == '.';
}

void check(int i, int j, int k, int time){
    switch (k){
    case 0:
        for (int t = i - 1; t >= 0; t--){
            if (!pass(s[t][j])) break;
            dd[t][j][time] = true;
        }
        break;
    case 1:
        for (int t = j + 1; t < n; t++){
            if (!pass(s[i][t])) break;
            dd[i][t][time] = true;
        }
        break;
    case 2:
        for (int t = i + 1; t < m; t++){
            if (!pass(s[t][j])) break;
            dd[t][j][time] = true;
        }
        break;
    default:
        for (int t = j - 1; t >= 0; t--){
            if (!pass(s[i][t])) break;
            dd[i][t][time] = true;
        }
        break;
    }
}

void init(){
    memset(dd, false, sizeof(dd));
    memset(cnt, 0, sizeof(cnt));
    res = -1;
    REP(time, 4){
        REP(i, m){
            REP(j, n){
                if (strchr(lz, s[i][j]) != NULL){
                    int x = strchr(lz, s[i][j]) - lz;
                    x = (x + time) % 4;
                    dd[i][j][time] = true;
                    check(i, j, x, time);
                }
            }
        }
    }
}

void process(){
    node st, fn;
    REP(i, m){
        REP(j, n){
            if (s[i][j] == 'S'){
                st.x = i; st.y = j; st.time = 0;
            }
            if (s[i][j] == 'G'){
                fn.x = i; fn.y = j;
            }
        }
    }
    while (!q.empty()) q.pop();
    q.push(st);
    while (!q.empty()){
        node u = q.front();
        q.pop();
        REP(k, 4){
            node v;
            v.x = u.x + dx[k];
            v.y = u.y + dy[k];
            if (v.x < 0 || v.x >= m || v.y < 0 || v.y >= n) continue;
            v.time = (u.time + 1) % 4;
            if (pass(s[v.x][v.y]) && !dd[v.x][v.y][v.time] && !cnt[v.x][v.y][v.time]){
                cnt[v.x][v.y][v.time] = cnt[u.x][u.y][u.time] + 1;
                if (v.x == fn.x && v.y == fn.y){
                    res = cnt[v.x][v.y][v.time];
                    return;
                }
                q.push(v);
            }
        }
    }
}

void writeout(){
    
}

void make(){
    freopen("in", "wt", stdout);
    int N = 100, M = 100, T = 100;
    cout << T << endl;
    REP(i, T){
        cout << M << " " << N << endl;
        REP(i, M){
            REP(j, N){

                if (i == 0 && j == 0) cout << 'S';
                if (i == M - 1 && j == N - 1) cout << 'G';

                int x = rand() % 30;
                if (x > 1) cout << '.';
                else if (x == 1) cout << '#';
                else{
                    x = rand() % 4;
                    cout << lz[x];
                }

            }
            cout << endl;
        }
    }
    cout << N << endl;
    for (int i = 0; i < N; i++)
        cout << 1000000 - i << " ";
    exit(0);
}


int main(){
    //make();
    freopen("in", "rt", stdin);
    //freopen("in.txt", "rt", stdin);
    freopen("out", "wt", stdout);
    //START
    int test;
    scanf("%d", &test);
    REP(i, test){
        readin();
        init();
        process();
        printf("Case #%d: ", i + 1);
        if (res == -1) printf("impossible\n");
        else printf("%d\n", res);
        //writeout();
    }
    //END
    return 0;
}

#endif
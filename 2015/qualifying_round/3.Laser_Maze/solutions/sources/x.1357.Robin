#include <bits/stdc++.h>/*{{{*/
using namespace std; typedef long long ll; typedef long double ld; void run(); int main(){ios::sync_with_stdio(0); run();}/*}}}*/

string world[102];

bool safe[102][102][4];
uint32_t dist[102][102][4];
struct st{int x,y,z;};

void run(){
  int tsts; cin>>tsts; for (int tst=1; tst<=tsts; ++tst){
    int n,m; cin>>n>>m;

    // read input, offset by 1
    for (int i=1; i<=n; i++){
      cin>>world[i];
      world[i]=string("#")+world[i]+"#";
    }

    // make a border
    world[0]=world[1];
    for (auto &i: world[0]) i='#';
    world[n+1]=world[0];
    n+=2;
    m+=2;

    pair<int,int> start,finish;

    // define safe zones
    memset(safe,0,sizeof safe);
    for (int i=n; i--;)
      for (int j=m; j--;)
        if (world[i][j]!='#'){
          for (int k=4; k--;)
            safe[i][j][k]=true;
          if (world[i][j]=='S') start={i,j};
          if (world[i][j]=='G') finish={i,j};
        }

    for (int i=n; i--;){
      for (int j=m; j--;){
        int dx=0,dy=0;
        switch (world[i][j]){
          case '<': dy=-1; break;
          case '>': dy=+1; break;
          case '^': dx=-1; break;
          case 'v':
          case 'V': dx=+1; break;
        }
        if (dx==0 and dy==0) continue;

        // Try in each direction
        for (int k=0; k<4; k++, swap(dx*=-1,dy)){
          int x=i,y=j;
          // Keep moving until we get to a wall or the same kind of actor
          do{
            safe[x][y][k]=false;
            x+=dx;
            y+=dy;
          } while (world[x][y]!=world[i][j] and world[x][y]!='#');
        }
      }
    }

    // debug - dump world
/*
    for (int i=n; i--;)
      for (int j=m; j--;)
        world[i][j]=(safe[i][j][0]? '.': '#');
    for (int i=n; i--;)
      cout<<world[i]<<endl;
*/

    // bfs
    memset(dist,-1,sizeof dist);
    vector<st> todo;
//    if (safe[start.first][start.second][0]){
      todo.push_back(st{start.first,start.second,0});
      dist[start.first][start.second][0]=0;
//    }
    for (int i=0; i<todo.size(); i++){
      st me=todo[i];
      int dx=0,dy=1;
      for (int q=4; q--; swap(dx,dy*=-1)){
        st to=me; to.x+=dx, to.y+=dy; (++to.z)%=4;
        if (not safe[to.x][to.y][to.z]) continue;
        if (~dist[to.x][to.y][to.z]) continue;
        dist[to.x][to.y][to.z]=dist[me.x][me.y][me.z]+1;
        todo.push_back(to);
      }
    }

    unsigned res=-1u;
    for (int k=4; k--;)
      res=min(res,dist[finish.first][finish.second][k]);

    cout<<"Case #"<<tst<<": ";
    if (~res){
      cout<<res<<endl;
    }else{
      cout<<"impossible"<<endl;
    }
  }
}

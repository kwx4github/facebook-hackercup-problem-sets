#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <fstream>
using namespace std;
#define pb push_back 
#define REP(i,n) for(int i=0;i<(n);i++ )
typedef long long LL;
typedef pair<int, int> pii;

string s[128];
int f[4][128][128];
int r[4][128][128];

int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
char mp[256];
int N, M;

int valid(int x, int y) {
	return x >= 0 && y >= 0 && x < N && y < M && s[x][y] != '#';
}

struct pos{
	int x, y, d;
};

int main(){
	int T; cin>>T;
	memset(mp, -1, sizeof mp);
	mp['>'] = 0;
	mp['v'] = 1;
	mp['<'] = 2;
	mp['^'] = 3;
	REP(cases, T) {
		cin>>N>>M;
		REP(i, N) cin>>s[i];
		memset(f, 0, sizeof f);
		memset(r, -1, sizeof r);
		int sx, sy, ex, ey;
		REP(i, N) {
			REP(j, M) {
				if (s[i][j] == 'S') {
					sx = i; sy = j;
				} else if (s[i][j] == 'G') {
					ex = i; ey = j;
				} else if (s[i][j] == '#') {
					REP(k, 4) {
						f[k][i][j] = 1;
					}
				} else if (s[i][j] == '.') {
					//do nothing
				} else {
					int d = mp[s[i][j]];
					REP(k, 4) {
						int tx = i, ty = j;
						while (1) {
							if (!valid(tx, ty) || mp[s[tx][ty]] != -1){
								break;
							}
							f[k][tx][ty] = 1;
							tx += dir[d][0]; ty += dir[d][1];
						}
						d++; d %= 4;
					}
				}
			}
		}
		queue<pos> Q;
		pos start; start.x = sx; start.y = sy; start.d = 0;
		r[0][sx][sy] = 0;
		Q.push(start);
		while (!Q.empty()) {
			pos p = Q.front(); Q.pop();
			REP(d, 4) {
				int nx = p.x + dir[d][0];
				int ny = p.y + dir[d][1];
				int nd = (p.d + 1) % 4;
				if (r[nd][nx][ny] != -1) {
					continue;
				}
				if (!valid(nx, ny) || f[nd][nx][ny]) {
					continue;
				}
				r[nd][nx][ny] = r[p.d][p.x][p.y] + 1;
				pos p2; p2.x = nx; p2.y = ny; p2.d = nd;
				Q.push(p2);
			}
		}
		int ans = -1;
		REP(i, 4) {
			if (r[i][ex][ey] != -1) {
				if (ans == -1 || ans > r[i][ex][ey]) {
					ans = r[i][ex][ey];
				}
			}
		}
		if (ans == -1) {
			printf("Case #%d: impossible\n", cases + 1);
		} else {
			printf("Case #%d: %d\n", cases + 1, ans);
		}
	}
    return 0;
}
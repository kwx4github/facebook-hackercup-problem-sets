#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

const int MAX_COLS = 200 + 5;

const int dCol[] = {-1, 0, 1, 0};
const int dRow[] = {0, -1, 0, 1};

enum CellType: char {
  FREE,
  WALL,
  LASER
};

struct State {
  int row;
  int col;
  short timeMod;
};

bool checkSafe(const State& s, const vector<vector<CellType>>& board, const vector<vector<int>>& dirs) {
  bool res = true;
  for (int d = 0; d < 4; ++d) {
    int r = s.row;
    int c = s.col;
    while (true) {
      r += dRow[d];
      c += dCol[d];
      if (r < 0 || r >= board.size() || c < 0 || c >= board[0].size()) {
        break;
      }
      if (board[r][c] == CellType::FREE) {
        continue;
      } else {
        if (board[r][c] == CellType::LASER) {
          int shootingDir = (dirs[r][c] + s.timeMod) % 4;
          if (shootingDir == (d + 2) % 4) {
            res = false;
          }
        }
        break;
      }
    }
  }
  return res;
}

int main() {
  int T;
  scanf("%d\n", &T);
  for (int t = 1; t <= T; ++t) {
    int res = INT_MAX;
    int rows;
    int cols;
    scanf("%d %d\n", &rows, &cols);
    std::vector<std::vector<CellType>> board(rows, std::vector<CellType>(cols));
    std::vector<std::vector<int>> dir(rows, std::vector<int>(cols));
    vector<vector<vector<int>>> dist(rows, vector<vector<int>>(cols, vector<int>(4, INT_MAX)));
    int startRow, startCol;
    int endRow, endCol;
    for (int r = 0; r < rows; ++r) {
      char row[MAX_COLS];
      scanf("%s\n", row);
      for (int c = 0; c < cols; ++c) {
        switch (row[c]) {
          case '.':
            board[r][c] = CellType::FREE;
            break;
          case 'S':
            board[r][c] = CellType::FREE;
            startRow = r;
            startCol = c;
            break;
          case 'G':
            board[r][c] = CellType::FREE;
            endRow = r;
            endCol = c;
            break;
          case '#':
            board[r][c] = CellType::WALL;
            break;
          case '<':
            board[r][c] = CellType::LASER;
            dir[r][c] = 0;
            break;
          case '^':
            board[r][c] = CellType::LASER;
            dir[r][c] = 1;
            break;
          case '>':
            board[r][c] = CellType::LASER;
            dir[r][c] = 2;
            break;
          case 'v':
            board[r][c] = CellType::LASER;
            dir[r][c] = 3;
            break;
        }
      }
    }

    std::queue<State> q;
    q.push({startRow, startCol, 0});
    dist[startRow][startCol][0] = 0;
    while (!q.empty()) {
      State cur = q.front();
      q.pop();
      if (cur.row == endRow && cur.col == endCol) {
        res = dist[cur.row][cur.col][cur.timeMod];
        break;
      }
      for (int i = 0; i < 4; ++i) {
        State next{cur.row + dRow[i], cur.col + dCol[i], short((cur.timeMod + 1) % 4)};
        if (next.row < 0 || next.row >= rows || next.col < 0 || next.col >= cols) {
          continue;
        }
        if (board[next.row][next.col] != CellType::FREE) {
          continue;
        }
        if (dist[next.row][next.col][next.timeMod] != INT_MAX) {
          continue;
        }
        bool isSafe = checkSafe(next, board, dir);
        if (isSafe) {
          q.push(next);
          dist[next.row][next.col][next.timeMod] = dist[cur.row][cur.col][cur.timeMod] + 1;
        }
      }
    }
    printf("Case #%d: ", t);
    if (res == INT_MAX) {
      printf("impossible\n");
    } else {
      printf("%d\n", res);
    }
  }
}

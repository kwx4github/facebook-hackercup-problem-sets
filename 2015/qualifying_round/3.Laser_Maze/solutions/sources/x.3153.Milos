#include<iostream>
#include<utility>
#include<vector>
#include<list>
#include<string>
using namespace std;

void fill_right(pair<int,int>& from, vector<vector<int> >& mapOfMaze ){
	int x = from.first;
	int y = from.second+1;
	while (y < mapOfMaze[x].size() && mapOfMaze[x][y] == 0){
		mapOfMaze[x][y] = 1;
		++y;
	}
}
void fill_left(pair<int,int>& from, vector<vector<int> >& mapOfMaze ){
	int x = from.first;
	int y = from.second-1;
	while (y >= 0 && mapOfMaze[x][y] == 0){
		mapOfMaze[x][y] = 1;
		--y;
	}
}
void fill_up(pair<int,int>& from, vector<vector<int> >& mapOfMaze ){
	int x = from.first-1;
	int y = from.second;
	while (x >= 0 && mapOfMaze[x][y] == 0){
		mapOfMaze[x][y] = 1;
		--x;
	}
}
void fill_down(pair<int,int>& from, vector<vector<int> >& mapOfMaze ){
	int x = from.first+1;
	int y = from.second;
	while (x < mapOfMaze.size() && mapOfMaze[x][y] == 0){
		mapOfMaze[x][y] = 1;
		++x;
	}
}

int searchPath(pair<int,int>& start, pair<int,int>& goal, vector<vector<vector<int> > >& mapOfMaze){
	if (start.first == goal.first && start.second == goal.second) return 0;
	int x,y,nextStep;
	list<pair<int,pair<int,int> > > BFSqueue;
	BFSqueue.push_back(make_pair(0,start));
	mapOfMaze[0][start.first][start.second] = 1;
	
	while(BFSqueue.size() > 0){
		//cout << "nextstep" << endl;
		x = BFSqueue.front().second.first;
		y = BFSqueue.front().second.second;
		nextStep = (BFSqueue.front().first+1);
		BFSqueue.pop_front();
		//cout << "reviewing " << x << ": " << y << " in time " <<  nextStep << endl;
		
		if (x == goal.first && y == goal.second) return nextStep-1;
		
		//cout << "addneighbor" << endl;
		
		if (x > 0 && mapOfMaze[nextStep%4][x-1][y] == 0){
			BFSqueue.push_back(make_pair(nextStep, make_pair(x-1,y)));
			mapOfMaze[nextStep%4][x-1][y] = 1;
		}
		if (y > 0 && mapOfMaze[nextStep%4][x][y-1] == 0){
			BFSqueue.push_back(make_pair(nextStep, make_pair(x,y-1)));
			mapOfMaze[nextStep%4][x][y-1] = 1;
		}
		if (x+1 < mapOfMaze[nextStep%4].size() && mapOfMaze[nextStep%4][x+1][y] == 0){
			BFSqueue.push_back(make_pair(nextStep, make_pair(x+1,y)));
			mapOfMaze[nextStep%4][x+1][y] = 1;
		}
		if (y+1 < mapOfMaze[nextStep%4][x].size() && mapOfMaze[nextStep%4][x][y+1] == 0){
			BFSqueue.push_back(make_pair(nextStep, make_pair(x,y+1)));
			mapOfMaze[nextStep%4][x][y+1] = 1;
		}
		//cout << "endstep" << endl;
	}
	return -1;
}

int main(){
	int m,n;
	vector<vector<vector<int> > > mapOfMaze;
	list<pair<int,int> > listOfTurrets;
	mapOfMaze.resize(4);
	pair<int,int> start, goal;
	
	int testcases;
	cin >> testcases;
	
	for (int tc=1; tc<=testcases; ++tc){
		listOfTurrets.clear();
		char c;
		cin >> m >> n;
		
		fill(mapOfMaze.begin(), mapOfMaze.end(), vector<vector<int> >(m,vector<int>(n)));
		for (int i = 0; i<m; ++i){
			for (int j = 0; j<n; ++j){
				cin >> c;
				if (c == '.' || c == 'S' || c == 'G'){
					mapOfMaze[0][i][j]=0;
					mapOfMaze[1][i][j]=0;
					mapOfMaze[2][i][j]=0;
					mapOfMaze[3][i][j]=0;
				} 
				if (c=='S'){
					start = make_pair(i,j);
				}
				if (c=='G'){
					goal = make_pair(i,j);
				}
				switch(c){
					case '#':
						mapOfMaze[0][i][j]=1;
						mapOfMaze[1][i][j]=1;
						mapOfMaze[2][i][j]=1;
						mapOfMaze[3][i][j]=1;
						break;
					case '<':
						mapOfMaze[0][i][j]=2;
						mapOfMaze[1][i][j]=4;
						mapOfMaze[2][i][j]=3;
						mapOfMaze[3][i][j]=5;
						listOfTurrets.push_back(make_pair(i,j));
						break;
					case '>':
						mapOfMaze[0][i][j]=3;
						mapOfMaze[1][i][j]=5;
						mapOfMaze[2][i][j]=2;
						mapOfMaze[3][i][j]=4;
						listOfTurrets.push_back(make_pair(i,j));
						break;
					case '^':
						mapOfMaze[0][i][j]=4;
						mapOfMaze[1][i][j]=3;
						mapOfMaze[2][i][j]=5;
						mapOfMaze[3][i][j]=2;
						listOfTurrets.push_back(make_pair(i,j));
						break;
					case 'v':
						mapOfMaze[0][i][j]=5;
						mapOfMaze[1][i][j]=2;
						mapOfMaze[2][i][j]=4;
						mapOfMaze[3][i][j]=3;
						listOfTurrets.push_back(make_pair(i,j));
						break;
				}
			}
		}
		
		for (list<pair<int,int> >::iterator turretIt = listOfTurrets.begin(); turretIt != listOfTurrets.end(); ++turretIt){
			for (int k=0; k<4; ++k){
				switch (mapOfMaze[k][turretIt->first][turretIt->second]){
					case 2:
						fill_left(*turretIt, mapOfMaze[k]);
						break;
					case 3:
						fill_right(*turretIt, mapOfMaze[k]);
						break;
					case 4:
						fill_up(*turretIt, mapOfMaze[k]);
						break;
					case 5:
						fill_down(*turretIt, mapOfMaze[k]);
						break;
				}
			}
		}
		int planlen=searchPath(start, goal, mapOfMaze);
		cout << "Case #" << tc << ": ";
		if (planlen == -1) cout << "impossible" << endl;
		else cout << planlen << endl;
	}
}

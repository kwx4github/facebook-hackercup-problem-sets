									/*ba yade oo */
//Mehrdad AP

//#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <cstdio>
#include <string.h>
#include <algorithm>
#include <stdio.h>
#include <math.h>
#include <cstring>
#include <sstream>
#include <queue>
#include <vector>
#include <stack>
#include <set>
#include <map>

using namespace std;

#define absol(x) ((x)>(0) ? (x):(-1)*(x))
#define pow2(x) ((x)*(x))
#define EPS 1e-64
#define MAX 500009
#define MOD 1000000007
#define Left(x) (2*x)
#define Right(x) ((2*(x)+1)
#define mP make_pair
#define pB push_back
#define X first 
#define Y second
#define SZ(x) ((int) (x).size())
#define SP system("pause")


//#define inRange(x,y) (x>=0 && x<N && y>=0 && y<M)

typedef long long int LL;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<int,pii> piii;

const double PI = 2.0*acos(0.0);
const int INF = 1000*1000*1000;
const int maxn=120;

#define assert(x) { cerr  << #x << ": "<< (x) << endl;}
#define null NULL
#define inRange(x,y) ( x>=0 && y>=0 && x<N && y<M)

int g[maxn][maxn];
bool state[maxn][maxn][4];

int dx[]={0,+1,0,-1};
int dy[]={+1,0,-1,0};

int dis[maxn][maxn][4];

int main ()
{
	//freopen("input.in","r",stdin);
	//freopen("output.out","w",stdout);
	//ios_base::sync_with_stdio(false);

	int tc,TC=0,sx,sy,N,M,tx,ty;
	cin >> tc;
	char ch;
	while (tc--){

		cin >> N >> M ;
		memset(g,-1,sizeof g);
		memset(state,true,sizeof state);

		for (int i=0;i<N;i++)
			for (int j=0;j<M;j++){
				cin >> ch;
				if (ch=='>') g[i][j]=0;
				else if (ch=='v') g[i][j]=1;
				else if (ch=='<') g[i][j]=2;
				else if (ch=='^') g[i][j]=3;
				else if (ch=='S'){sx=i,sy=j;}
				else if (ch=='G') {tx=i,ty=j;}
				else if (ch=='#') g[i][j]=4;
				if (g[i][j]>=0)
					state[i][j][0]=state[i][j][1]=state[i][j][2]=state[i][j][3]=false;

			}

		
		for (int i=0;i<N;i++)
			for (int j=0;j<M;j++){
				if (g[i][j]>=0 && g[i][j]<4){
					for (int t=0;t<4;t++){
						int k=(g[i][j]+t)%4;

						int x=i+dx[k];
						int y=j+dy[k];
						while ( inRange(x,y) && g[x][y]==-1){
							state[x][y][t]=false;
							x=x+dx[k];
							y=y+dy[k];
						}


					}
				}
			}

		// for (int t=0;t<4;t++){
		// 	for (int i=0;i<N;i++){
		// 		for (int j=0;j<M;j++)
		// 			cout << state[i][j][t];
		// 		cout << endl;
		// 	}

		// 	cout << endl << endl;
		// }

		memset(dis,-1,sizeof dis);
		queue< pair<int,pii> > q;
		dis[sx][sy][0]=0;
		//if (state[sx][sy][0])
		q.push( mP(0,mP(sx,sy)));

		int ans=-1;
		while (!q.empty() && ans==-1){
			int curst=q.front().X;
			int x=q.front().Y.X;
			int y=q.front().Y.Y;
			

			q.pop();
			int st = (curst+1)%4;

			for (int k=0;k<4;k++){
				int xx=x+dx[k];
				int yy=y+dy[k];
				
				if (xx>=0 && yy>=0 && xx<N && yy<M && state[xx][yy][st] && dis[xx][yy][st]==-1){
					//cout << xx<<" "<<yy<<" "<< st << endl;		
					q.push(mP(st,mP(xx,yy)));
					dis[xx][yy][st]=dis[x][y][curst]+1;
					if (xx==tx && yy==ty)
						ans=dis[xx][yy][st];
				}
			}
		}



		cout << "Case #" << ++TC <<": ";
		if (ans==-1)
			cout << "impossible"<<endl;
		else 
			cout << ans << endl;




	}
	


	
	
	
	
	return 0;
}

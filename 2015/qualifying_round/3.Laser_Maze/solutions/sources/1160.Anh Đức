#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <climits>
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define REP(i, a, b) for(int i = (a); i <=(b); i++)
#define FORD(i, a, b) for(int i = (a); i > (b); i--)
#define REPD(i, a, b) for(int i = (a); i >=(b); i--)
#define TR(it, a) for(typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define RESET(a, v) memset((a), (v), sizeof((a)))
#define SZ(a) (int((a).size()))
#define ALL(a) (a).begin(), (a).end()
#define PB push_back
#define MP make_pair
#define LL long long
#define LD long double
#define II pair<int, int>
#define X first
#define Y second
#define VI vector<int>

const int N = 110;
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

using namespace std;

char maze[N][N];
int dir[N][N], d[N][N][4];
bool fire[N][N][4], was[N][N][4];
int nTest, m, n;

II start, goal;

bool inside(int x, int y) {
    return 0 < x && 0 < y && x <= m && y <= n;
}

bool ok(II s, int mod) {
    return maze[s.X][s.Y] != '#' && !fire[s.X][s.Y][mod];
}

int main() {
    ios :: sync_with_stdio(0); cin.tie(0);
    freopen("laser_maze.txt", "r", stdin);
    freopen("laser_maze.out", "w", stdout);
    cin >> nTest;
    REP(test, 1, nTest) {
        cin >> m >> n;
        REP(i, 1, m) REP(j, 1, n) {
            cin >> maze[i][j];
            if (maze[i][j] == 'S') {
                start = MP(i, j);
                maze[i][j] = '.';
            }
            if (maze[i][j] == 'G') {
                goal = MP(i, j);
                maze[i][j] = '.';
            }
        }
        RESET(fire, 0); RESET(was, 0); RESET(d, 0);
        REP(i, 1, m) REP(j, 1, n)
        if (maze[i][j] != '.' && maze[i][j] != '#') {
            dir[i][j] = -1;
            if (maze[i][j] == '^') dir[i][j] = 0;
            if (maze[i][j] == '>') dir[i][j] = 1;
            if (maze[i][j] == 'v') dir[i][j] = 2;
            if (maze[i][j] == '<') dir[i][j] = 3;
            maze[i][j] = '#';
            if (dir[i][j] >= 0) {
                REP(d, 0, 4) {
                    int x = i + dx[d], y = j + dy[d];
                    while (inside(x, y) && maze[x][y] == '.') {
                        fire[x][y][(d - dir[i][j] + 4) % 4] = 1;
                        x += dx[d]; y += dy[d];
                    }
                }
            }
        }
        /*
        REP(i, 1, m) REP(j, 1, n) REP(k, 0, 3)
        if (fire[i][j][k]) cout << i << ' ' << j << ' ' << k << endl; cout << endl;
        */
        int ans = -1;
        queue<pair<II, int> > Q;
        //if (ok(start, 0)) {
            Q.push(MP(start, 0));
            was[start.X][start.Y][0] = 1;
        //}
        while (!Q.empty() && ans == -1) {
            pair<II, int> u = Q.front(); Q.pop();
            FOR(i, 0, 5) {
                int x = u.X.X + dx[i];
                int y = u.X.Y + dy[i];
                int z = (u.Y + 1) % 4;
                if (inside(x, y) && ok(MP(x, y), z) && !was[x][y][z]) {
                    was[x][y][z] = 1;
                    d[x][y][z] = d[u.X.X][u.X.Y][u.Y] + 1;
                    Q.push(MP(MP(x, y), z));
                    if (MP(x, y) == goal) {
                        ans = d[x][y][z];
                        break;
                    }
                }
            }
        }
        cout << "Case #" << test << ": ";
        if (ans == -1) cout << "impossible\n";
        else cout << ans << '\n';
    }
    return 0;
}

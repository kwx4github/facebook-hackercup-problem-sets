var T = readline();
var tc = 1;
dict = {"<":"^", ">":"v", "^":">", "v":"<"};
var di = {"<":0, ">":0, "^":-1, "v":1};
var dj = {"<":-1, ">":1, "^":0, "v":0};

for (; tc <= T; tc += 1) {
	var line = readline().split(" ").map(Number);
	var n = line[0], m = line[1];
	var maps = new Array(4);
	var sx, sy, tx, ty;
	var dx = [0, 0, 1, -1]; 
	var dy = [1, -1, 0, 0];
	for (var i = 0; i < 4; i++) {
		maps[i] = new Array(n);
		for (var j = 0; j < n; j++) {
			maps[i][j] = new Array(m);
		}
	}
	for (var i = 0; i < n; i++) {
		maps[0][i] = readline().split("");
	}
	for (var k = 1; k < 4; k++) {
		for (var i = 0; i < n; i++) {
			for (var j = 0; j < m; j++) {
				maps[k][i][j] = maps[k-1][i][j];
				if (dict[maps[k][i][j]]) {
					maps[k][i][j] = dict[maps[k][i][j]];
				}
			}
		}
	}
	for (var k = 0; k < 4; k++) {
		for (var i = 0; i < n; i++) {
			for (var j = 0; j < m; j++) {
				var s = maps[k][i][j];
				if (s === "S") {
					sx = i, sy = j;
					maps[k][i][j] = ".";
				}
				if (s === "G") {
					tx = i, ty = j;
					maps[k][i][j] = ".";
				}
				//print (s + " " + tx + " " + ty);
				if (dict[s]) {
					for (var ii = i + di[s], jj = j + dj[s]; 0 <= ii && ii < n && 0 <= jj && jj < m;) {
						//print (s + " " + i + " " + j + " " + ii + " " + jj + " " + di[s] + " " + dj[s]);
						if (maps[k][ii][jj] === "." || maps[k][ii][jj] === "," ) {
							maps[k][ii][jj] = ",";
						} else {
							break;
						}
						//quite a long for
						ii += di[s], jj += dj[s]
					}
				}
			}
		}
		for (var i = 0; i < n; i++) {
			for (var j = 0; j < m; j++) {
				if (maps[k][i][j] === "," || dict[maps[k][i][j]]) {
					maps[k][i][j] = "#";
				}
			}
		}

	}
	if (0) {
		//测试地图
		for (var k = 0; k < 4; k++) {
			for (var i = 0; i < n; i++) {
				print(maps[k][i].join(""));
			}
		}
	}
	//处理完初始化地图，你妹。。。

	var qx = [], qy = [], qs = [], qi = 0;
	var answer = "impossible";
	var dp = new Array(n);
	for (var i = 0; i < n; i++) {
		dp[i] = new Array(m);
		for (var j = 0; j < m; j++) {
			dp[i][j] = [-1,-1,-1,-1];
		}
	}
	if (1) {
		dp[sx][sy][0] = 0;
		qx.push(sx);
		qy.push(sy);
		qs.push(0);
		while (1) {
			if (qi >= qx.length) {
				break;
			}
			var cx = qx[qi], cy = qy[qi], cs = qs[qi];
			qi += 1; // queue pop
			for (var i = 0; i < 4; i++) {
				var nx = cx + dx[i], ny = cy + dy[i], ns = (cs + 1) & 3;
				if (0 <= nx && nx < n && 0 <= ny && ny < m) {
					if (maps[ns][nx][ny] !== "#" && dp[nx][ny][ns] === -1) {
						dp[nx][ny][ns] = dp[cx][cy][cs] + 1;
						qx.push(nx);
						qy.push(ny);
						qs.push(ns);
					}
				}
			}
		}

		var maxSteps = 1 << 30;
		for (var i = 0; i < 4; i++) {
			if (dp[tx][ty][i] !== -1 && dp[tx][ty][i] < maxSteps) {
				maxSteps = dp[tx][ty][i];
			}
		}
		if (maxSteps !== (1 << 30)) {
			answer = maxSteps;
		}
	}

	print("Case #" + tc + ": " + answer);
}
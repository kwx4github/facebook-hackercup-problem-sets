#include <bits/stdc++.h>

#define REP(i,n) for(int i=0;i<(int)(n);++i)

using namespace std;

const int INF = 1000000000;
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};


int cost[128][128][4];

int main() {
  int T;
  cin >> T;
  REP(c,T) {
    int H, W;
    cin >> H >> W;
    vector<string> str(H);
    REP(i,H) cin >> str[i];
    int sy = -1, sx = -1, gy = -1, gx = -1;
    REP(i,H) REP(j,W) {
      if (str[i][j] == 'S') { sy = i; sx = j; }
      else if (str[i][j] == 'G') { gy = i; gx = j; }
      else if (str[i][j] == '<') str[i][j] = '0';
      else if (str[i][j] == '^') str[i][j] = '1';
      else if (str[i][j] == '>') str[i][j] = '2';
      else if (str[i][j] == 'v') str[i][j] = '3';
    }
    REP(i,128) REP(j,128) REP(k,4) cost[i][j][k] = INF;
    queue<tuple<int,int,int>> que;
    que.push(make_tuple(sy, sx, 0));
    cost[sy][sx][0] = 0;
    while (!que.empty()) {
      int y, x, c; tie(y, x, c) = que.front(); que.pop();
      if (str[y][x] == '#') continue;
      REP(dir,4) {
        int ny = y + dy[dir], nx = x + dx[dir], nc = (c + 1) % 4;
        if (ny < 0 || ny >= H || nx < 0 || nx >= W) continue;
        if (cost[ny][nx][nc] != INF) continue;
        bool flag = false;
        REP(di,4) {
          for (int i=ny,j=nx;0<=i&&i<H && 0<=j&&j<W && str[i][j]!='#'; i += dy[di], j += dx[di]) {
            if (str[i][j] >= '0' && str[i][j] <= '4' &&
                ((int)(str[i][j] - '0') - di + nc + 80) % 4 == 0) flag = true;
          }
        }
        if (flag) continue;
        cost[ny][nx][nc] = cost[y][x][c] + 1;
        que.push(make_tuple(ny, nx, nc));
      }
    }
    int res = INF;
    REP(dir,4) {
      res = min(res, cost[gy][gx][dir]);
    }
    printf("Case #%d: ", c+1);
    if (res == INF) cout << "impossible" << endl;
    else cout << res << endl;
  }
  return 0;
}

/*	In the name of God	*/
#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <string>
#include <algorithm>
#include <vector>
#include <iostream>
#include <sstream>
#include <bitset>
#include <map>
#include <set>
#include <queue>
#include <stack>

#define rep(i,n) for((i)=0;(i)<(n);(i)++)
typedef long long ll;
using namespace std;
string d = "^>v<#";
int n, m;
char s[201][201], v[201][201];
int xs, ys, xg, yg;
queue<pair<pair<int, int>, int> > q;
int dx[] = { -1, 1, 0, 0 };

void mypush(int x, int y, int r){
	if (x < 0 || x >= n)
		return;
	if (y < 0 || y >= m)
		return;
	if (d.find(s[x][y]) == string::npos)
		q.push(make_pair(make_pair(x, y), r));
}

char current(char c, int r){
	int i = d.find(c);
	if (i < 4)
		i = (i + r) % 4;
	return d[i];
}

void addadj(int x, int y,int r){
	for (size_t i = 0; i < 4; i++)
		mypush(x + dx[i], y + dx[3 - i], r);
}

int bfs(){
	while (!q.empty())
		q.pop();
	memset(v, 0, sizeof v);
	addadj(xs, ys,1);
	int i, j, x, y, r;
	while (!q.empty()){
		auto p = q.front();
		q.pop();
		r = p.second;
		x = p.first.first;
		y = p.first.second;
		v[x][y]++;
		if (v[x][y] > 30)
			continue;
		for (i = x - 1; i >= 0; i--){
			if (d.find(s[i][y]) != string::npos)
				break;
		}
		if (i >= 0 && current(s[i][y], r) == 'v')
			continue;
		for (i = x + 1; i < n; i++){
			if (d.find(s[i][y]) != string::npos)
				break;
		}
		if (i < n && current(s[i][y], r) == '^')
			continue;
		for (i = y - 1; i >= 0; i--){
			if (d.find(s[x][i]) != string::npos)
				break;
		}
		if (i >= 0 && current(s[x][i], r) == '>')
			continue;
		for (i = y + 1; i < m; i++){
			if (d.find(s[x][i]) != string::npos)
				break;
		}
		if (i < m && current(s[x][i], r) == '<')
			continue;
		if (x == xg && y == yg)
			return r;
		addadj(x, y,r+1);
	}
	return -1;
}


int main(){

	freopen("laser_maze.txt", "r", stdin);
	freopen("program.out", "w", stdout);
	int t;
	cin >> t;
	for (int ti = 1; ti <= t; ti++){
		cin >> n >> m;
		for (size_t i = 0; i < n; i++)
		{
			scanf("%s", s[i]);
			for (size_t j = 0; s[i][j]; j++)
			{
				if (s[i][j] == 'S'){
					xs = i;
					ys = j;
				}
				if (s[i][j] == 'G'){
					xg = i;
					yg = j;
				}
			}
		}
		printf("Case #%d: ", ti);
		int r = bfs();
		if (r != -1)
			printf("%d\n", r);
		else
			printf("impossible\n");
	}

	return 0;
}
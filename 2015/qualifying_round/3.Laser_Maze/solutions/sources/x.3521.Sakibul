#include <bits/stdc++.h>

using namespace  std;

#define SZ 110

int x[] = {0, 0, -1, 1};
int y[] = {-1, 1, 0, 0};

int r, c;
int sx, sy;
int gx, gy;

char grid[SZ][SZ];
bool laser[SZ][SZ][4];
bool col[SZ][SZ][4];

queue <int> Q;

int bfs () {
    while (!Q.empty()) {
        Q.pop();
    }
    Q.push(sx);
    Q.push(sy);
    Q.push(0);
    Q.push(0);
    col[sx][sy][0] = 1;

    while (!Q.empty()) {
        int a = Q.front(); Q.pop();
        int b = Q.front(); Q.pop();
        int stt = Q.front(); Q.pop();
        int tym = Q.front(); Q.pop();

        for (int i = 0; i < 4; i++) {
            int p = a + x[i];
            int q = b + y[i];
            int nstt = (stt + 1) % 4;
            if (p < r && q < c && p >= 0 && q >= 0 && (grid[p][q] == '.' || grid[p][q] == 'G' || grid[p][q] == 'S') && !col[p][q][nstt] && !laser[p][q][nstt]) {
                col[p][q][nstt] = 1;
                Q.push(p);
                Q.push(q);
                Q.push(nstt);
                Q.push(tym+1);

                if (p == gx && q == gy) {
                    return tym+1;
                }
            }
        }
    }

    return -1;
}

void doit (int x, int y, int dx, int dy, int stt) {
    x += dx;
    y += dy;
    while (x < r && y < c && x >= 0 && y >= 0) {
        if (grid[x][y] == '#' || grid[x][y] == '>' || grid[x][y] == 'v' || grid[x][y] == '<' || grid[x][y] == '^') {
            break;
        }
        laser[x][y][stt] = 1;
        x += dx;
        y += dy;
    }
    return;
}

int main() {
    #if defined JESI
        freopen("1.txt", "r", stdin);
        freopen("2.txt", "w", stdout);
    #endif

    int t;
    scanf("%d", &t);

    for (int cs = 0; cs < t; cs++) {
        scanf("%d %d", &r, &c);
        for (int i = 0; i < r; i++) {
            scanf("%s", grid[i]);
        }

        memset(laser, 0, sizeof laser);
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == '^') {
                    doit(i, j, -1, 0, 0);
                    doit(i, j, 0, 1, 1);
                    doit(i, j, 1, 0, 2);
                    doit(i, j, 0, -1, 3);
                } else if (grid[i][j] == '>') {
                    doit(i, j, 0, 1, 0);
                    doit(i, j, 1, 0, 1);
                    doit(i, j, 0, -1, 2);
                    doit(i, j, -1, 0, 3);
                } else if (grid[i][j] == 'v') {
                    doit(i, j, 1, 0, 0);
                    doit(i, j, 0, -1, 1);
                    doit(i, j, -1, 0, 2);
                    doit(i, j, 0, 1, 3);
                } else if (grid[i][j] == '<') {
                    doit(i, j, 0, -1, 0);
                    doit(i, j, -1, 0, 1);
                    doit(i, j, 0, 1, 2);
                    doit(i, j, 1, 0, 3);
                } else if (grid[i][j] == 'S') {
                    sx = i;
                    sy = j;
                } else if (grid[i][j] == 'G') {
                    gx = i;
                    gy = j;
                }
            }
        }

        memset(col, 0, sizeof col);

        int k = bfs();

        if (k == -1) {
            printf("Case #%d: impossible\n", cs + 1);
        } else {
            printf("Case #%d: %d\n", cs + 1, k);
        }
    }

    return 0;
}







#include <iostream>
using namespace std;

#define WALL  -1
#define UP    -2
#define DOWN  -3
#define LEFT  -4
#define RIGHT -5

int T, M, N;
int d[5][100][100];

void print()
{
	for (int k=0; k<4; k++)
	{
		for(int y=0; y<M; y++)
		{
			for(int x=0; x<N; x++)
			{
				if (d[k][x][y] > 0)
					cout << d[k][x][y]%10;
				else
					switch(d[k][x][y])
					{
					case WALL:  cout << "#"; break;
					case UP:    cout << "^"; break;
					case DOWN:  cout << "v"; break;
					case LEFT:  cout << "<"; break;
					case RIGHT: cout << ">"; break;
					default:
						cout << ".";
					}
			}
			cout << endl;
		}
		cout << endl;
	}
	cout << "-------------------------------" << endl;
}

void fill(int i, int j, int k, int val)
{
	int x = i;
	int y = j;

	while(x>=0 && x<100 && y>=0 && y<100)
	{
		if (!(x==i && y==j))
			if (d[4][x][y]<0)
				 break;

		d[k][x][y] = val;

		switch(val)
		{
		case UP: y--; break;
		case DOWN: y++; break;
		case LEFT: x--; break;
		case RIGHT: x++; break;
		}
	}
}

int is_move(int x, int y, int k, int step)
{
	if (x>=0 && x<N && y>=0 && y<M)
		if (d[k][x][y] == 0)
		{
			d[k][x][y] = step+1;
			return 1;
		}
	return 0;
}

int do_move(int step, int k)
{
	int move = 0;
	int k2 = (k+1) % 4;

	for (int j=0; j<M; j++)
	{
		for (int i=0; i<N; i++)
		{
			if (d[k][i][j] == step)
			{
				move += is_move(i+1, j, k2, step);
				move += is_move(i-1, j, k2, step);
				move += is_move(i, j+1, k2, step);
				move += is_move(i, j-1, k2, step);
			}
		}
	}

	return move;
}

int main() {
	cin >> T;

	for (int t=1; t<=T; t++)
	{
		int i, j, k;
		cin >> M >> N;

		for (i=0; i<100; i++)
			for (j=0; j<100; j++)
				for (k=0; k<5; k++)
					d[k][i][j] = -1;

		int x1, y1, x2, y2;

		for (j=0; j<M; j++)
		{
			for (i=0; i<N; i++)
			{
				char c;
				cin >> c;

				for(k=0;k<5;k++)
					d[k][i][j] = 0;

				switch(c)
				{
				case '#':
					for(k=0;k<5;k++) d[k][i][j] = WALL;
					break;
				case '<': d[4][i][j] = LEFT; break;
				case '>': d[4][i][j] = RIGHT; break;
				case '^': d[4][i][j] = UP; break;
				case 'v': d[4][i][j] = DOWN; break;
				case 'S': x1 = i; y1 = j; break;
				case 'G': x2 = i; y2 = j; break;
				}
			}
		}

		for (j=0; j<M; j++)
		{
			for (i=0; i<N; i++)
			{
				switch(d[4][i][j])
				{
				case LEFT:
					fill(i, j, 0, UP);
					fill(i, j, 1, RIGHT);
					fill(i, j, 2, DOWN);
					fill(i, j, 3, LEFT);
					break;
				case RIGHT:
					fill(i, j, 0, DOWN);
					fill(i, j, 1, LEFT);
					fill(i, j, 2, UP);
					fill(i, j, 3, RIGHT);
					break;
				case UP:
					fill(i, j, 0, RIGHT);
					fill(i, j, 1, DOWN);
					fill(i, j, 2, LEFT);
					fill(i, j, 3, UP);
					break;
				case DOWN:
					fill(i, j, 0, LEFT);
					fill(i, j, 1, UP);
					fill(i, j, 2, RIGHT);
					fill(i, j, 3, DOWN);
					break;
				}
			}
		}

		// solve
		int step = 0, move = 0;

		move += is_move(x1+1, y1, 0, 0);
		move += is_move(x1-1, y1, 0, 0);
		move += is_move(x1, y1+1, 0, 0);
		move += is_move(x1, y1-1, 0, 0);

		step ++;

		while (move != 0)
		{
			move = do_move(step, (step-1)%4);

			//print();

			step++;
			if (d[(step-1)%4][x2][y2] > 0)
			{
				move = 1;
				break;
			}
		}

		cout << "Case #" << t << ": ";
		if (move == 0)
			cout << "impossible" << endl;
		else
			cout << step << endl;
	}
	return 0;
}


import java.util.Locale;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.File;
import java.util.LinkedList;
import java.io.FilenameFilter;
import java.util.Collection;
import java.util.Map;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.util.Queue;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 * @author Tifuera
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "laser.*maze.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("lasermaze.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		LaserMaze solver = new LaserMaze();
		int testCount = Integer.parseInt(in.next());
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		out.close();
	}
}

class LaserMaze {

    Map<Character, Character> next;

    ArrayList<Integer>[] graph;

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int N = in.nextInt();
        int M = in.nextInt();
        char[][] first = new char[N][M];
        for (int i = 0; i < N; i++) {
            first[i] = in.next().toCharArray();
        }

        int startX = 0;
        int startY = 0;
        int endX = 0;
        int endY = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (first[i][j] == 'S') {
                    startX = i;
                    startY = j;
                } else if (first[i][j] == 'G') {
                    endX = i;
                    endY = j;
                }
            }
        }

        graph = new ArrayList[4 * M * N];
        for (int i = 0; i < 4 * M * N; i++) {
            graph[i] = new ArrayList<>(4);
        }

        next = new HashMap<>();
        next.put('<', '^');
        next.put('^', '>');
        next.put('>', 'v');
        next.put('v', '<');

        char[][] second = rotate(first);
        char[][] third = rotate(second);
        char[][] fourth = rotate(third);

        markBlocked(first);
        markBlocked(second);
        markBlocked(third);
        markBlocked(fourth);

        addEdges(first, second, 0, M * N);
        addEdges(second, third, M * N, 2 * M * N);
        addEdges(third, fourth, 2 * M * N, 3 * M * N);
        addEdges(fourth, first, 3 * M * N, 0);

        if (graph[startX * M + startY].isEmpty()) {
            markAdjacentVertexes(startX, startY, 0, M * N, second);
        }

        int graphVertexesCnt = 4 * M * N;
        int[] d = new int[graphVertexesCnt];
        Arrays.fill(d, Integer.MAX_VALUE);
        d[startX * M + startY] = 0;
        boolean[] used = new boolean[graphVertexesCnt];

        Queue<Integer> queue = new LinkedList<>();
        queue.add(startX * M + startY);
        used[startX * M + startY] = true;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int v : graph[cur]) {
                if (!used[v]) {
                    queue.add(v);
                    d[v] = d[cur] + 1;
                    used[v] = true;
                }
            }
        }
        int result = Integer.MAX_VALUE;
        result = Math.min(result, d[endX * M + endY]);
        result = Math.min(result, d[M * N + endX * M + endY]);
        result = Math.min(result, d[2 * M * N + endX * M + endY]);
        result = Math.min(result, d[3 * M * N + endX * M + endY]);

        if (result == Integer.MAX_VALUE) {
            out.println("Case #" + testNumber + ": impossible");
        } else {
            out.println("Case #" + testNumber + ": " + result);
        }
    }

    void addEdges(char[][] start, char[][] end, int offsetStart, int offsetEnd) {
        int N = start.length;
        int M = start[0].length;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                char ch = start[i][j];
                if (ch == '.' || ch == 'S' || ch == 'G') {
                    markAdjacentVertexes(i, j, offsetStart, offsetEnd, end);
                }
            }
        }
    }

    void markAdjacentVertexes(int x, int y, int offsetStart, int offsetEnd, char[][] target) {
        int N = target.length;
        int M = target[0].length;
        int startV = offsetStart + x * M + y;
        if (x > 0) {
            char ch = target[x - 1][y];
            if (ch == '.' || ch == 'S' || ch == 'G') {
                int endV = offsetEnd + (x - 1) * M + y;
                graph[startV].add(endV);
            }
        }

        if (x + 1 < N) {
            char ch = target[x + 1][y];
            if (ch == '.' || ch == 'S' || ch == 'G') {
                int endV = offsetEnd + (x + 1) * M + y;
                graph[startV].add(endV);
            }
        }

        if (y > 0) {
            char ch = target[x][y - 1];
            if (ch == '.' || ch == 'S' || ch == 'G') {
                int endV = offsetEnd + x * M + (y - 1);
                graph[startV].add(endV);
            }
        }

        if (y + 1 < M) {
            char ch = target[x][y + 1];
            if (ch == '.' || ch == 'S' || ch == 'G') {
                int endV = offsetEnd + x * M + (y + 1);
                graph[startV].add(endV);
            }
        }
    }

    void markBlocked(char[][] input) {
        int N = input.length;
        int M = input[0].length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                char curCh = input[i][j];

                if (curCh == '>') {
                    for (int k = j + 1; k < M; k++) {
                        char tmp = input[i][k];
                        if (tmp == '.' || tmp == 'G' || tmp == 'S') {
                            input[i][k] = 'b';
                        } else if (tmp == '#' || next.containsKey(tmp)) {
                            break;
                        }
                    }
                } else if (curCh == '<') {
                    for (int k = j - 1; k >= 0; k--) {
                        char tmp = input[i][k];
                        if (tmp == '.' || tmp == 'G' || tmp == 'S') {
                            input[i][k] = 'b';
                        } else if (tmp == '#'  || next.containsKey(tmp)) {
                            break;
                        }
                    }
                } else if (curCh == 'v') {
                    for (int k = i + 1; k < N; k++) {
                        char tmp = input[k][j];
                        if (tmp == '.' || tmp == 'G' || tmp == 'S') {
                            input[k][j] = 'b';
                        } else if (tmp == '#'  || next.containsKey(tmp)) {
                            break;
                        }
                    }
                } else if (curCh == '^') {
                    for (int k = i - 1; k >= 0; k--) {
                        char tmp = input[k][j];
                        if (tmp == '.' || tmp == 'G' || tmp == 'S') {
                            input[k][j] = 'b';
                        } else if (tmp == '#'  || next.containsKey(tmp)) {
                            break;
                        }
                    }
                }
            }
        }
    }

    char[][] rotate(char[][] input) {
        int N = input.length;
        int M = input[0].length;
        char[][] result = new char[N][M];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                result[i][j] = input[i][j];

                Character ch = next.get(result[i][j]);
                if (ch != null) {
                    result[i][j] = ch;
                }
            }
        }
        return result;
    }
}

class InputReader {
    private BufferedReader reader;
    private String[] currentArray;
    private int curPointer;

    public InputReader(InputStream inputStream) {
        reader = new BufferedReader(new InputStreamReader(inputStream));
    }


    public String next() {
        try {
            currentArray = null;
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public int nextInt() {
        if ((currentArray == null) || (curPointer >= currentArray.length)) {
            try {
                currentArray = reader.readLine().split(" ");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            curPointer = 0;
        }
        return Integer.parseInt(currentArray[curPointer++]);
    }

}


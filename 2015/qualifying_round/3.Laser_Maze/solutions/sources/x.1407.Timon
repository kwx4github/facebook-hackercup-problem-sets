#include<iostream>
#include<algorithm>
#include<vector>
#include<functional>
#include<queue>
#include<bitset>

using namespace std;

typedef vector<int> vi;
typedef vector<pair<int, int>> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef pair<int, int> ii;

#define INF 200000000

ii moves[4] = { pair<int, int>(1, 0), pair<int, int>(0, 1), pair<int, int>(0, -1), pair<int, int>(-1, 0) };

bool locationValid(vector<vector<char>> board, int m, int n, int x, int y, int t){
	if (x < 0 || y < 0 || x >= m || y >= n)
		return false;

	if (board[x][y] != '.' && board[x][y] != 'G' && board[x][y] != 'S')
		return false;

	for (int i = 0; i < n; i++){
		if (board[x][i] == '<')
			if ((y < i && t == 0) || (y > i && t == 2))
				return false;
		if (board[x][i] == '^')
			if ((y < i && t == 3) || (y > i && t == 1))
				return false;
		if (board[x][i] == '>')
			if ((y < i && t == 2) || (y > i && t == 0))
				return false;
		if (board[x][i] == 'v')
			if ((y < i && t == 1) || (y > i && t == 3))
				return false;
	}

	for (int i = 0; i < m; i++){
		if (board[i][y] == '<')
			if ((x < i && t == 1) || (x > i && t == 3))
				return false;
		if (board[i][y] == '^')
			if ((x < i && t == 0) || (x > i && t == 2))
				return false;
		if (board[i][y] == '>')
			if ((x < i && t == 3) || (x > i && t == 1))
				return false;
		if (board[i][y] == 'v')
			if ((x < i && t == 2) || (x > i && t == 0))
				return false;
	}

	return true;
}

int main(){

	int T;
	cin >> T;

	for (int __t = 1; __t <= T; __t++){
		
		int si, sj;
		int gi, gj;
		int m, n;

		cin >> m >> n;

		vector<vector<char>> board(m);
		for (int i = 0; i < m; i++)
			board[i].reserve(n);

		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				char c;
				cin >> c;
				board[i].push_back(c);
				if (board[i][j] == 'G'){
					gi = i;
					gj = j;
				}
				else if (board[i][j] == 'S'){
					si = i;
					sj = j;
				}
			}
		}

		

		bitset<40000> visited;

		queue<pair<int, ii>> q;
		q.push(pair<int, ii>(0, ii(si, sj)));

		int res = -1;

		while (!q.empty()){
			pair<int, ii> top = q.front(); q.pop();
			int dd = top.first, i = top.second.first, j = top.second.second;
			int st = i + 100 * j + 10000 * (dd % 4);
			
			if (!visited.test(st)){
				visited.set(st, true);

				if (i == gi && j == gj){
					res = dd;
					break;
				}

				for (int p = 0; p < 4; p++){
					int ni = i + moves[p].first,
						nj = j + moves[p].second,
						nd = (dd + 1) % 4;

					if (locationValid(board, m, n, ni, nj, nd))
						q.push(pair<int, ii>(dd + 1, ii(ni, nj)));
				}
			}
		}
		

		std::cout << "Case #" << __t << ": ";
		if (res == -1)
			std::cout << "impossible";
		else
			std::cout << res;
		std::cout << endl;
	}

	return 0;
}
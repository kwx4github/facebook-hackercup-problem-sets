#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#define MAXN 120
#define INF 2147483640
using namespace std;
int way[4][2]={{0,-1},{1,0},{0,1},{-1,0}};
int G[MAXN][MAXN],n,m,sx,sy,ex,ey,ans,cnt;
int vis[50000][4];
int laser[10000][2];

int ok(int a,int b){
	if(a<0||b<0||a>=n||b>=m) return 0;
	if(G[a][b]>=0) return 0;
	return 1;
	}

int test(int nx,int ny,int tm){
	int lx,ly,dir;
	for(int j=0;j<cnt;++j) {
				if(nx!=laser[j][0] && ny!=laser[j][1]) continue;
				dir=G[laser[j][0]][laser[j][1]]+tm;
				lx=laser[j][0];
				ly=laser[j][1];
				dir%=4;
				if(dir==0) {
				 	lx--;
					while(lx>=0){
						//ly--;
						if(G[lx][ly]>=0) {
								break;}
						else if(lx==nx && ly==ny) return 0;
					lx--;}
					
				}
				else if(dir==1) {
					ly++;
					while(ly<m){
						//ly--;
						if(G[lx][ly]>=0) {
								break;
								}
						else if(lx==nx && ly==ny) return 0;
					ly++;}


					}
				else if(dir==2) {
					lx++;
					while(lx<n){
						//ly++;
						if(G[lx][ly]>=0) {
								break;}
						else if(lx==nx && ly==ny) return 0;
					lx++;}

					}
				else {

					ly--;
					while(ly>=0){
						//ly--;
						if(G[lx][ly]>=0) {
								break;}
						else if(lx==nx && ly==ny) return 0;
					ly--;}

					}
			} 

	return 1;
	}

void bfs(){
	memset(vis,0,sizeof(vis));
	int tm,pos,nx,ny,et,cx,cy;
	queue<int> qp;
	queue<int> qt;
	qp.push(sx*m+sy);
	qt.push(0);
		
	while(!qp.empty()){
		pos=qp.front();
		tm=qt.front();
		et=tm%4;
		qp.pop();
		qt.pop();
		if(vis[pos][et]) continue;
		vis[pos][et]=1;
		if(pos==ex*m+ey) {ans=min(ans,tm);}
		cx=pos/m;
		cy=pos%m;
		tm+=1;		

		for(int i=0;i<4;++i){
			nx=cx+way[i][0];
			ny=cy+way[i][1];
			if(!ok(nx,ny)) continue;
			//cout << nx << ' ' << ny << "   ";
			if(test(nx,ny,tm)) {qp.push(nx*m+ny);qt.push(tm);}
		}

		}

}


int main(){
	int t;
	cin >> t;
	char c;
	for(int ti=1;ti<=t;++ti){
		cin >> n >> m;
		ans=INF;
		cnt=0;
		memset(G,-1,sizeof(G));
		getchar();
		for(int i=0;i<n;++i){
			for(int j=0;j<m;++j){
				c=getchar();
				if(c=='^') {G[i][j]=0;laser[cnt][0]=i;laser[cnt++][1]=j;}
				else if(c=='>') {G[i][j]=1;laser[cnt][0]=i;
laser[cnt++][1]=j;}
				else if(c=='v') {G[i][j]=2;laser[cnt][0]=i;
laser[cnt++][1]=j;}
				else if(c=='<') {G[i][j]=3;laser[cnt][0]=i;
laser[cnt++][1]=j;}

				else if(c=='#') G[i][j]=4;
				else if(c=='S') {sx=i;sy=j;}
				else if(c=='G') {ex=i;ey=j;}
				}

			getchar();}

		
			bfs();

			printf("Case #%d: ",ti);
			if(ans<INF) cout << ans << endl;
			else cout << "impossible" << endl;	
			

		}

	return 0;}

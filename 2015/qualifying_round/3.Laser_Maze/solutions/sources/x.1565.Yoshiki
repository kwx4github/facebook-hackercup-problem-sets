#include <cassert>// c
#include <iostream>// io
#include <iomanip>
#include <fstream>
#include <sstream>
#include <vector>// container
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <algorithm>// other
#include <complex>
#include <numeric>
#include <functional>
#include <random>
#include <regex>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;

#define ALL(c) (begin(c)),(end(c))
#define REP(i,n) FOR(i,0,n)
#define REPr(i,n) FORr(i,0,n)
#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)
#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))
#define UNIQUE(v) v.erase(unique(ALL(v)),v.end())
//debug
#define DUMP(x)  cerr << #x << " = " << (x)
#define LINE()    cerr<< " (L" << __LINE__ << ")"

class range {
private:
	struct Iter{
		int v;
		int operator*(){return v;}
		bool operator!=(Iter& itr) {return v < itr.v;}
		void operator++() {++v;}
	};
	Iter i, n;
public:
	range(int n) : i({0}), n({n}) {}
	range(int i, int n) : i({i}), n({n}) {}
	Iter& begin() {return i;}
	Iter& end() {return n;}
};

//input
template<typename T1,typename T2> istream& operator >> (istream& is,pair<T1,T2>& p){is>>p.first>>p.second;return is;}
template<typename T1> istream& operator >> (istream& is,tuple<T1>& t){is >> get<0>(t);return is;}
template<typename T1,typename T2> istream& operator >> (istream& is,tuple<T1,T2>& t){is >> get<0>(t) >> get<1>(t);return is;}
template<typename T1,typename T2,typename T3> istream& operator >> (istream& is,tuple<T1,T2,T3>& t){is >>get<0>(t)>>get<1>(t)>>get<2>(t);return is;}
template<typename T1,typename T2,typename T3,typename T4> istream& operator >> (istream& is,tuple<T1,T2,T3,T4>& t){is >> get<0>(t)>>get<1>(t)>>get<2>(t)>>get<3>(t);return is;}
template<typename T1,typename T2,typename T3,typename T4,typename T5> istream& operator >> (istream& is, const tuple<T1,T2,T3,T4,T5>& t){is >> get<0>(t) >> get<1>(t) >> get<2>(t) >> get<3>(t) >> get<4>(t);return is;}
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6> istream& operator >> (istream& is, const tuple<T1,T2,T3,T4,T5,T6>& t){is >> get<0>(t) >> get<1>(t) >> get<2>(t) >> get<3>(t) >> get<4>(t) >> get<5>(t);return is;}
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6,typename T7> istream& operator >> (istream& is, const tuple<T1,T2,T3,T4,T5,T6,T7>& t){is >> get<0>(t) >> get<1>(t) >> get<2>(t) >> get<3>(t) >> get<4>(t) >> get<5>(t) >> get<6>(t);return is;}
template<typename T> istream& operator >> (istream& is,vector<T>& as){REP(i,as.size())is >>as[i];return is;}

//output
template<typename T> ostream& operator << (ostream& os, const set<T>& ss){for(auto a:ss){if(a!=ss.begin())os<<" "; os<<a;}return os;}
template<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<" "<<p.second;return os;}
template<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;for(auto& p:m){if(!isF)os<<endl;os<<p;isF=false;}return os;}
template<typename T1> ostream& operator << (ostream& os, const tuple<T1>& t){os << get<0>(t);return os;}
template<typename T1,typename T2> ostream& operator << (ostream& os, const tuple<T1,T2>& t){os << get<0>(t)<<" "<<get<1>(t);return os;}
template<typename T1,typename T2,typename T3> ostream& operator << (ostream& os, const tuple<T1,T2,T3>& t){os << get<0>(t)<<" "<<get<1>(t)<<" "<<get<2>(t);return os;}
template<typename T1,typename T2,typename T3,typename T4> ostream& operator << (ostream& os, const tuple<T1,T2,T3,T4>& t){os << get<0>(t)<<" "<<get<1>(t)<<" "<<get<2>(t)<<" "<<get<3>(t);return os;}
template<typename T1,typename T2,typename T3,typename T4,typename T5> ostream& operator << (ostream& os, const tuple<T1,T2,T3,T4,T5>& t){os << get<0>(t)<<" "<<get<1>(t)<<" "<<get<2>(t)<<" "<<get<3>(t)<<" "<<get<4>(t);return os;}
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6> ostream& operator << (ostream& os, const tuple<T1,T2,T3,T4,T5,T6>& t){os << get<0>(t)<<" "<<get<1>(t)<<" "<<get<2>(t)<<" "<<get<3>(t)<<" "<<get<4>(t)<<" "<<get<5>(t);return os;}
template<typename T1,typename T2,typename T3,typename T4,typename T5,typename T6,typename T7> ostream& operator << (ostream& os, const tuple<T1,T2,T3,T4,T5,T6,T7>& t){os << get<0>(t)<<" "<<get<1>(t)<<" "<<get<2>(t)<<" "<<get<3>(t)<<" "<<get<4>(t)<<" "<<get<5>(t)<<" "<<get<6>(t);return os;}
template<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<" "; os<<as[i];}return os;}
template<typename T> ostream& operator << (ostream& os, const vector<vector<T>>& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}

//input
char tmp[1000];
#define nextInt(n) scanf("%d",&n)
#define nextLong(n) scanf("%lld",&n) //I64d
#define nextDouble(n) scanf("%lf",&n) 
#define nextChar(n) scanf("%c",&n)
#define nextString(n) scanf("%s",tmp);n=tmp

// values
template<typename T> T INF(){assert(false);};
template<> int INF<int>(){return 1<<28;};
template<> ll INF<ll>(){return 1LL<<58;};
template<> double INF<double>(){return 1e16;};
template<> long double INF<long double>(){return 1e16;};

template<class T> T EPS(){assert(false);};
template<> int EPS<int>(){return 1;};
template<> ll EPS<ll>(){return 1LL;};
template<> double EPS<double>(){return 1e-8;};
template<> long double EPS<long double>(){return 1e-8;};

template<typename T,typename U> T pmod(T v,U M){return (v%M+M)%M;}

namespace EGraph{
	typedef ll Cost;
	struct Edge{
		int from,to;Cost cost;
		Edge(int from,int to,Cost cost)
		: from(from),to(to),cost(cost) {};
		bool operator<(Edge r) const{ return cost<r.cost;}
		bool operator>(Edge r) const{ return cost>r.cost;}
	};
	typedef vector<vector<Edge> >  Graph;
}
using namespace EGraph;

namespace ShortestPath{
    using namespace EGraph;
    struct Task{
        int prev,pos;Cost cost;
        Task(int prev,int pos,Cost cost)
            :prev(prev),pos(pos),cost(cost){};
        bool operator>(const Task& r) const{ return cost > r.cost;}
    };
    //verified by codoforces 144D http://codeforces.com/contest/144/submission/4976825
    // // 負の辺がない
    // // O(E*logV)
    vector<Cost> dijkstra(const Graph& g,const int s,vector<int>& prev){
        const int V=g.size();
        vector<Cost> d(V,INF<Cost>());d[s]=0;
        fill(ALL(prev), -2);
        
        priority_queue<Task,vector<Task>,greater<Task> > que;que.push(Task(-1,s,0));// [ ,e,,f, ] <=> e.cost < e.cost
        vector<bool> visited(V);
        while(!que.empty()){
            Task task=que.top();que.pop();
            if(visited[task.pos])continue;
            visited[task.pos]=true;
            prev[task.pos]=task.prev;
            EACH(e,g[task.pos])if(d[e->to]>d[e->from]+e->cost){
                d[e->to]=d[e->from]+e->cost;
                que.push(Task(e->from,e->to,d[e->to]));
            }   
        }
        return d;
    }
    vector<Cost> dijkstra(const Graph& g,const int s){
        vector<int> prev(g.size());return dijkstra(g,s,prev);
    }
}
using namespace ShortestPath;

class Main{
	public:

	int H,W;
	int enc(int y,int x,int d){
		return y*W*4 + x*4 + d;
	}

	int Denc(char c){
		if(c=='>')return 0;
		if(c=='v')return 1;
		if(c=='<')return 2;
		if(c=='^')return 3;
		return -1;
	}

	int dy[4]={0,1,0,-1},dx[4]={1,0,-1,0};
	void run(){
		int T;cin >> T;
		REP(t,T){
			cin >> H >> W;
			vector<string> board(H);cin >> board;

			int sy,sx,gy,gx;
			REP(y,H)REP(x,W){
				if(board[y][x]=='S'){
					sy=y;sx=x;
				}
				if(board[y][x]=='G'){
					gy=y;gx=x;
				}				
			}

			Graph g(H*W*4);
			REP(t,4){
				//t + 1
				vector<vector<bool>> laser(H,vector<bool>(W));
				REP(sy,H)REP(sx,W)if(Denc(board[sy][sx])!=-1){
					int d=Denc(board[sy][sx]);
					int y=sy,x=sx;
					//発射!!!
					y+=dy[pmod(d-(t+1),4)];x+=dx[pmod(d-(t+1),4)];
					while(IN(0,y,H) && IN(0,x,W) && board[y][x]!='#' && Denc(board[y][x])== -1){
						laser[y][x]=true;
						y+=dy[pmod(d-(t+1),4)];x+=dx[pmod(d-(t+1),4)];
					}
				}
				REP(y,H)REP(x,W)REP(d,4){
					int ny=y+dy[d],nx=x+dx[d];
					if(!IN(0,ny,H) || !IN(0,nx,W))continue;
					if(board[ny][nx]=='#')continue;
					if(laser[ny][nx] || Denc(board[ny][nx])!=-1)continue;
					g[enc(y,x,t)].push_back(Edge(enc(y,x,t),enc(ny,nx,pmod(t+1,4)),1));
				}
			}

			//start
			vector<Cost> ds=dijkstra(g,enc(sy,sx,0));

			Cost mv=INF<Cost>();REP(d,4)mv=min(mv,ds[enc(gy,gx,d)]);

			cout << make_tuple("Case #"+to_string(t+1)+":",(mv!=INF<Cost>())?to_string(mv):"impossible") <<endl; 
		}
	}
};

int main(){
	cout <<fixed<<setprecision(20);
	cin.tie(0);
	ios::sync_with_stdio(false);
	Main().run();
	return 0;
}
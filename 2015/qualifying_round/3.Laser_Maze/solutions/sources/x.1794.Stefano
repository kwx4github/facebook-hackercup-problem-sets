#include <bits/stdc++.h>
using namespace std;

#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define f(i,x,y) for(int i = x; i<y; i++ )
#define FORV(it,A) for(vector<int>::iterator it = A.begin(); it!= A.end(); it++)
#define FORS(it,A) for(set<int>::iterator it = A.begin(); it!= A.end(); it++)
#define quad(x) (x) * (x)
#define mp make_pair
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;

#define N 128
int pode[N][N][4];
char M[N][N];
int Vy[] = {0, 1, 0, -1};
int Vx[] = {-1, 0, 1, 0};
int n, m;

int C (char c){
	if (c == '^') return 0;
	if (c == '>') return 1;
	if (c == '<') return 3;
	if (c == 'v') return 2;
	return -1;
}

int ok (int x, int y){
	return M[x][y] == '.' || M[x][y] == 'G' || M[x][y] == 'S';
}

int in (int x, int y){
	return min(x,y) >= 0 && x < n && y < m && ok(x,y);
}

void pre (){
	f (i, 0, n) f (j, 0, m) f (k, 0, 4) pode[i][j][k] = 1;
	f (i, 0, n) f (j, 0, m) f (k, 0, m) if (!in(i,j)) pode[i][j][k] = 0;
	f (i, 0, n) f (j, 0, m) if (C(M[i][j]) != -1){
		int dir = C(M[i][j]);
		f (t, 0, 4){
			int x = i+Vx[dir], y= j+Vy[dir];
			while (in(x,y)){
				pode[x][y][t] = 0;
				x += Vx[dir], y += Vy[dir];
			}
			dir = (dir+1)%4;
		}
	}
}

int dist[N][N][4];

void bfs (int x, int y){
	clr (dist, -1);
	dist[x][y][0] = 0;
	queue <int> Q;
	Q.push(x), Q.push(y), Q.push(0);
	while (!Q.empty()){
		x = Q.front(); Q.pop();
		y = Q.front(); Q.pop();
		int t = Q.front(); Q.pop();
		int tt = (t+1)%4;
		f (k, 0, 4){
			int xx = x+Vx[k], yy = y+Vy[k];
			if (!in(xx,yy) || !pode[xx][yy][tt]) continue;
			if (dist[xx][yy][tt] != -1) continue;
			dist[xx][yy][tt] = dist[x][y][t]+1;
			Q.push(xx), Q.push(yy), Q.push(tt);
		}
	}	
}

int main (){
	int t, tt; cin >> t;
	f (tt, 1, t+1){
		cin >> n >> m;
		f (i, 0, n) scanf(" %s", M[i]);
		pre();
		if (0){
		f (k, 0, 4){
			f (i, 0, n){
				f (j, 0, m) printf("%d ", pode[i][j][k]); printf("\n");
			}
			printf("---------------------------\n");
		}}
		int x, y;
		f (i, 0, n) f (j, 0, m) if (M[i][j] == 'S') x = i, y= j;
		bfs (x, y);
		f (i, 0, n) f (j, 0, m) if (M[i][j] == 'G') x = i, y= j;
		int ans = -1;
		f (k, 0, 4) if (dist[x][y][k] != -1){
			if (ans == -1) ans = dist[x][y][k];
			else ans = min(ans,dist[x][y][k]); 

		}
		printf("Case #%d: ", tt);
		if (ans == -1) cout <<"impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}



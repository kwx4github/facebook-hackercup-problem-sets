#include<iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <vector>
#include <cmath>
#include <list>
#include <sstream>
#include <algorithm>

using namespace std;

typedef pair<int,int> PII;
typedef long long LL;
typedef vector<int> VI;
typedef pair<LL,LL> PLL;
typedef vector<pair<int,int> > VPII;
typedef vector<LL> VLL;
typedef vector<vector<int> > VVI;
typedef vector<string> VS;
typedef long double LD;

#define PI 3.14159265358979323
#define EE 2.71828182845
#define EPS 10e-10
#define INF 10000000

inline LL MAX(LL a, LL b){ return a < b ? b : a;}
inline LL MIN(LL a, LL b){ return a < b ? a : b;}

#define FOR(i,n)      for(int i=0;i<(n);i++)
#define FORD(i,n)     for(int i=(n)-1;i>=0;i--)

#define MP make_pair
#define PB push_back

int bol[105][105][4], N, M;
int sx, sy, gx, gy;
char mapa[105][105];
queue<int> Q;
bool safety[105][105][4];

// vrati -1 alebo fazovy posun (0 - 3) ak je to laser
int get_laser(char c) {
  if (c == '^') return 0;
  if (c == '>') return 3;
  if (c == 'v') return 2;
  if (c == '<') return 1;
  return -1;
}

void precompute_safety() {
  FOR(i, N + 2) FOR(j, M + 2) FOR(k, 4) safety[i][j][k] = true;
  FOR(i, N + 2) FOR(j, M + 2) {
    int posun = get_laser(mapa[i][j]);
    if (posun == -1) continue;
    // hore, vpravo, dole, vlavo
    int dx[4] = {-1,0,1,0};
    int dy[4] = {0,1,0,-1};
    FOR(k, 4) {
      int wx = dx[k] + i;
      int wy = dy[k] + j;
      while(mapa[wx][wy] == '.' || mapa[wx][wy] == 'S' || mapa[wx][wy] == 'G') {
        safety[wx][wy][(k + posun) % 4] = false;
        wx += dx[k];
        wy += dy[k];
      }
    }
  }
}


void solve(int test_case) {
  scanf("%d %d ", &N, &M);
  memset(mapa, '#', sizeof(mapa));
  FOR(i, N) {
    FOR(j, M) scanf("%c ", &mapa[i+1][j+1]);
  }
  cout << "Case #" << test_case << ": ";
  FOR(i, N+2) FOR(j, M+2) {
    if (mapa[i][j] == 'S') sx = i, sy = j;
    if (mapa[i][j] == 'G') gx = i, gy = j;
  }
  memset(bol, -1, sizeof(bol));
  precompute_safety();
  while(!Q.empty()) Q.pop();
  Q.push(sx);
  Q.push(sy);
  Q.push(0);
  while(!Q.empty()){
    int px = Q.front();
    Q.pop();
    int py = Q.front();
    Q.pop();
    int steps = Q.front();
    Q.pop();
    if (mapa[px][py] != '.' && mapa[px][py] != 'S' && mapa[px][py] != 'G') continue;
    if (steps > 0 && !safety[px][py][steps % 4]) continue;
    if (px == gx && py == gy) {
      cout << steps << endl;
      return;
    }
    if (bol[px][py][steps % 4] != -1) continue;
    bol[px][py][steps % 4] = steps;
    int dx[4] = {0,0,-1,1};
    int dy[4] = {-1,1,0,0};
    FOR(i, 4) {
      Q.push(px + dx[i]);
      Q.push(py + dy[i]);
      Q.push(steps + 1);
    }
  }
  cout << "impossible" << endl;
}

int main(){
  int TT;
  cin >> TT;
  FOR(tt, TT) solve(tt + 1);
}

#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std ;

const int MAXN = 109 ;
const int INF = 100000000 ;

const char Las[4] = { '^' , '>' , 'v' , '<' } ;
const int Dx[4] = { -1 , 0 , 1 , 0 } ;
const int Dy[4] = { 0 , 1 , 0 , -1 } ;

int N , M , Map[MAXN][MAXN] , tx , ty ;
int A[4][MAXN][MAXN] , sp[4][MAXN][MAXN] ;
string suf ;
int L , R , Quet[MAXN*MAXN*4] , Quei[MAXN*MAXN*4] , Quej[MAXN*MAXN*4] ;

void Init() {
    cin >> N >> M ;
    for ( int t = 0 ; t < 4 ; t ++ )
        for ( int i = 1 ; i <= N ; i ++ )
            for ( int j = 1 ; j <= M ; j ++ )
                sp[t][i][j] = INF ;
    for ( int i = 1 ; i <= N ; i ++ ) {
        cin >> suf ;
        for ( int j = 1 ; j <= M ; j ++ ) {
            Map[i][j] = suf[j-1] ;
            if ( Map[i][j] == 'S' ) sp[0][i][j] = 0 , Quet[1] = 0 , Quei[1] = i , Quej[1] = j ;
            if ( Map[i][j] == 'G' ) tx = i , ty = j ;
        }
    }
    
    for ( int t = 0 ; t < 4 ; t ++ ) {
        for ( int i = 1 ; i <= N ; i ++ )
            for ( int j = 1 ; j <= M ; j ++ )
                A[t][i][j] = true ;
        for ( int i = 1 ; i <= N ; i ++ )
            for ( int j = 1 ; j <= M ; j ++ ) {
                if ( Map[i][j] == '#' ) A[t][i][j] = false ;
                for ( int k = 0 ; k < 4 ; k ++ ) if ( Map[i][j] == Las[(k-t+4)%4] ) {
                    A[t][i][j] = false ;
                    for ( int ii = i+Dx[k] , jj = j+Dy[k] ; 1 <= ii && ii <= N && 1 <= jj && jj <= M ; ii += Dx[k] , jj += Dy[k] ) {
                        if ( Map[ii][jj] != '.' && Map[ii][jj] != 'S' && Map[ii][jj] != 'G' ) break ;
                        else A[t][ii][jj] = false ;
                    }
                }
            }
    }
}

void Solve() {
    L = R = 1 ;
    while ( L <= R ) {
        int t = Quet[L] , i = Quei[L] , j = Quej[L] ;
        L ++ ;
        for ( int k = 0 ; k < 4 ; k ++ ) {
            if ( 1 <= i+Dx[k] && i+Dx[k] <= N && 1 <= j+Dy[k] && j+Dy[k] <= M && A[(t+1)%4][i+Dx[k]][j+Dy[k]] ) {
                if ( sp[(t+1)%4][i+Dx[k]][j+Dy[k]] == INF ) {
                    sp[(t+1)%4][i+Dx[k]][j+Dy[k]] = sp[t][i][j] + 1 ;
                    //cout << "sp[" << (t+1)%4 << "][" << i+Dx[k] << "][" << j+Dy[k] << "]=" << sp[(t+1)%4][i+Dx[k]][j+Dy[k]] << "\n" ;
                    R ++ ;
                    Quet[R] = (t+1)%4 ;
                    Quei[R] = i+Dx[k] ;
                    Quej[R] = j+Dy[k] ;
                }
            }
        }
    }
    int ans = INF ;
    for ( int i = 0 ; i < 4 ; i ++ )
        if ( sp[i][tx][ty] < ans ) ans = sp[i][tx][ty] ;
    if ( ans == INF ) cout << "impossible\n" ;
    else              cout << ans << "\n" ;
}

int main() {
    freopen("C.in" , "r" , stdin) ;
    freopen("C.out", "w" ,stdout) ;
    
    int Test ; cin >> Test ;
    for ( int i = 1 ; i <= Test ; i ++ ) {
        Init() ;
        cout << "Case #" << i << ": " ;
        Solve() ;
    }
}

#include <cstdio>
#include <cstring>
#include <queue>
#include <iostream>
#define wall 64
#define N 1
#define E 2
#define S 4
#define W 8
using namespace std;


char maze[105][105], maze_num[105][105];
int st[2], go[2], dist[105][105], rr[4][2] = {-1,0,0,-1,1,0,0,1}, visited[105][105];

void fill_map(int x, int y, int dir){
	for(int z=x-1; maze[z][y] == '.' || maze[z][y] == 'S' || maze[z][y] == 'G'; z--)
		maze_num[z][y] |= 1<<dir;
	dir = (dir+1)&3;
	for(int z=y+1; maze[x][z] == '.' || maze[x][z] == 'S' || maze[x][z] == 'G'; z++)
		maze_num[x][z] |= 1<<dir;
	dir = (dir+1)&3;
	for(int z=x+1; maze[z][y] == '.' || maze[z][y] == 'S' || maze[z][y] == 'G'; z++)
		maze_num[z][y] |= 1<<dir;
	dir = (dir+1)&3;
	for(int z=y-1; maze[x][z] == '.' || maze[x][z] == 'S' || maze[x][z] == 'G'; z--)
		maze_num[x][z] |= 1<<dir;
}

int main(){
	FILE *f, *g;
	f = fopen("input.txt","r");
	g = fopen("output.txt","w");
	int t;
	fscanf(f,"%d\n",&t);
	for(int k=1;k<=t;k++){

		memset(maze,'#',sizeof(maze));
		memset(maze_num,0,sizeof(maze_num));
		memset(visited,0,sizeof(visited));
		memset(dist,-1,sizeof(dist));
		priority_queue<pair<int,int>> nodes;

		int m, n, m2, n2;
		fscanf(f,"%d%d\n",&m,&n);
		for(int i=1;i<=m;i++)
			for(int j=1;j<=n;j++)
				fscanf(f,"%c\n",&maze[i][j]);

		m2 = m+1; n2 = n+1;
		for(int i=0;i<=m2;i++)
			for(int j=0;j<=n2;j++){
				switch(maze[i][j]){
				case '^':
					maze_num[i][j] = wall;
					fill_map(i,j,3);
					break;
				case '>':
					maze_num[i][j] = wall;
					fill_map(i,j,2);
					break;
				case 'v':
					maze_num[i][j] = wall;
					fill_map(i,j,1);
					break;
				case '<':
					maze_num[i][j] = wall;
					fill_map(i,j,0);
					break;
				case '#':
					maze_num[i][j] = wall;
					break;
				case 'S': st[0] = i, st[1] = j; break;
				case 'G': go[0] = i, go[1] = j; break;
				}
			}
		nodes.push(pair<int,int>(0,(st[0]<<8)|st[1]));
//		printf("Case #%d:\n",k);
		while(nodes.empty() == false && dist[go[0]][go[1]] == -1){
			pair<int,int> cur = nodes.top();
			int coord[2] = {cur.second>>8,cur.second%(1<<8)}, d = cur.first;
			nodes.pop();
			if(visited[coord[0]][coord[1]] > 1) continue;
			visited[coord[0]][coord[1]]++;
//			printf("%6d (%3d,%3d)",d,coord[0],coord[1]);
			dist[coord[0]][coord[1]] = d;
			for(int i=0;i<4;i++)
				if(maze_num[coord[0]+rr[i][0]][coord[1]+rr[i][1]] != wall && !(maze_num[coord[0]+rr[i][0]][coord[1]+rr[i][1]]&(1<<(d&3))) && visited[coord[0]+rr[i][0]][coord[1]+rr[i][1]] <= 1)
					nodes.push(pair<int,int>(d+1,(((coord[0]+rr[i][0])<<8)|(coord[1]+rr[i][1]))));
		}
//		printf("\n");
/*
		for(int i=0;i<=m2;i++){
			for(int j=0;j<=n2;j++)
				fprintf(g,"%c",maze[i][j]);
			fprintf(g,"\n");
		}
		fprintf(g,"\n");
		for(int i=0;i<=m2;i++){
			for(int j=0;j<=n2;j++)
				fprintf(g,"%2d(%6d)",maze_num[i][j],dist[i][j]);
			fprintf(g,"\n");
		}
		fprintf(g,"\n");
		*/

		if(dist[go[0]][go[1]] > -1)
			fprintf(g,"Case #%d: %d\n",k,dist[go[0]][go[1]]);
		else
			fprintf(g,"Case #%d: impossible\n",k);
	}
	fclose(f); fclose(g);
}
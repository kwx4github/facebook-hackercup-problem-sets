#include <cstdio>
#include <queue>

using namespace std;

const int dr[4] = { -1, 0, 1, 0 };
const int dc[4] = { 0, 1, 0, -1 }; 
const char dd[4] = { '^', '>', 'v', '<' };

int R, C;
char a[100][101];

int dist[4][100][100];

struct State {
  int mod;
  int r, c;
  State(int mod, int r, int c) : mod(mod), r(r), c(c) {}
};

bool IsEmpty(int r, int c) {
  if (r < 0 || r >= R) return false;
  if (c < 0 || c >= C) return false;
  return a[r][c] == '.';
}

void Update(queue<State>& Q, int mod, int r, int c, int d) {
  if (!IsEmpty(r, c)) return;
  if (dist[mod][r][c] <= d) return;
  dist[mod][r][c] = d;
  Q.push(State(mod, r, c));
}

int Solve(int sr, int sc, int gr, int gc) {
  memset(dist, 0x3F, sizeof dist);
  for (int r = 0; r < R; ++r) {
    for (int c = 0; c < C; ++c) {
      if (IsEmpty(r, c)) continue;
      int d;
      for (d = 0; d < 4; ++d) {
        if (a[r][c] == dd[d]) break;
      }
      for (int mod = 0; mod < 4; ++mod) {
        dist[mod][r][c] = -1;
        if (d == 4) continue;
        int dir = (d + mod) % 4;
        int rr = r + dr[dir];
        int cc = c + dc[dir];
        while (IsEmpty(rr, cc)) {
          dist[mod][rr][cc] = -1;
          rr += dr[dir];
          cc += dc[dir];
        }
      }
    }
  }
  dist[0][sr][sc] = 0;
  queue<State> Q;
  Q.push(State(0, sr, sc));
  while (!Q.empty()) {
    State S = Q.front(); Q.pop();
    int dst = dist[S.mod][S.r][S.c];
    if (S.r == gr && S.c == gc) return dst;
    for (int d = 0; d < 4; ++d) {
      Update(Q, (S.mod + 1) % 4, S.r + dr[d], S.c + dc[d], dst + 1);
    }
  }
  return -1;
}

int main() {
  int T;
  scanf("%d", &T);
  for (int tt = 1; tt <= T; ++tt) {
    scanf("%d%d", &R, &C);
    int sr = -1, sc = -1;
    int gr = -1, gc = -1;
    for (int r = 0; r < R; ++r) {
      scanf("%s", a[r]);
      for (int c = 0; c < C; ++c) {
        if (a[r][c] == 'S') {
          a[r][c] = '.';
          sr = r;
          sc = c;
        }
        if (a[r][c] == 'G') {
          a[r][c] = '.';
          gr = r;
          gc = c;
        }
      }
    }
    int sol = Solve(sr, sc, gr, gc);
    printf("Case #%d: ", tt);
    if (sol != -1) printf("%d\n", sol);
    else printf("impossible\n");
  }
  return 0;
}

/*
ID: simsek_1
LANG: C++
TASK: combo
*/
#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <map>
#include <set> 
#include <sstream>
#include <fstream>
#include <utility>
#include <string>
#include <vector>
#include <stack>
#include <queue>
using namespace std;
#define REP(i,a) for(int i=0;i<a;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define SIZE(c) (int)c.size()
#define ALL(c) (c).begin(),(c).end() 
typedef pair<int, int> PII;
const int INF = 1000000000;
int T, N, M, sx, sy, ex, ey;
char board[105][105];
PII d[] = {PII(-1, 0), PII(0, 1), PII(1, 0), PII(0, -1)};
bool visited[105][105][5];
int indexOf(char c){
  if (c == '<') return 3;
  if (c == '>') return 1;
  if (c == '^') return 0;
  return 2;
}

bool isLaser(char c) {
  return c == '<' || c == '>' || c == '^' || c == 'v';
}

bool valid(int x, int y) {
  return x >= 0 && y >= 0 && x < N && y < M;
}

int get(char c, int t) {
  return (indexOf(c) + t) % 4;
}

bool safe(int x, int y, int t) {
  for (int k = 0; k < 4; k ++) {
    PII dd = d[k];
    int nx = x, ny = y;
    while (true) {
      nx = nx + dd.first;
      ny = ny + dd.second;
      if (!valid(nx, ny) || board[nx][ny] == '#') {
        break;
      }
      if (isLaser(board[nx][ny])) {
        if (get(board[nx][ny], t) == (k + 2) % 4) {
          return false;
        }
      }
    }
  }
  return true;
}

int solve() {
  memset(visited, false, sizeof visited);
  queue<int> q;
  q.push(sx);
  q.push(sy);
  q.push(0);
  while (!q.empty()) {
    int x = q.front(); q.pop();
    int y = q.front(); q.pop();
    int t = q.front(); q.pop();

    if (!safe(x, y, t) && t != 0) {
      continue;
    }
    if (x == ex && y == ey) {
      return t;
    }
    for (int i = 0; i < 4; i ++) {
      int nx = x + d[i].first;
      int ny = y + d[i].second;
      int nt = t + 1;
      if (valid(nx, ny) && board[nx][ny] == '.' && !visited[nx][ny][nt % 4]) {
        q.push(nx);
        q.push(ny);
        q.push(nt);
        visited[nx][ny][nt % 4] = true;
      }
    }
  }
  return INF;
}
int main() {
  freopen("laser_maze.txt", "r", stdin);
  freopen("laser_maze.out", "w", stdout);
  cin>>T;
  for (int t = 0; t < T; t ++) {
    cin >> N >> M;
    REP(i, N) {
      REP(j, M) {
        board[i][j] = '.';
        char c; cin>>c;
        if (c == 'S') {
          sx = i, sy = j;
        } else if (c == 'G') {
          ex = i, ey = j;
        } else {
          board[i][j] = c;
        }
      }
    }
    int ret = solve();
    if (ret != INF) {
      cout << "Case #" << (t + 1) << ": " << ret << endl;      
    } else {
      cout << "Case #" << (t + 1) << ": impossible" << endl;
    }
  }
	return 0;
}
#include <iostream>
#include <stdio.h>
#include <vector>
#include <map>
#include <list>
#include <string>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <queue>

using namespace std;

#define fore(i, l, r) for(int i = l; i < r; i++)
#define forn(i, n) fore(i, 0, n)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define INF 1000000000

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef long long ll;
typedef vector<pii> vpii;
typedef vector<ll> vll;
typedef vector<vvi> vvvi;
typedef pair<int, pii> pipii;

int valid(int a, int b, int n, int m, vvvi &col, int s){
  if ((a < n && a >= 0) && (b < m && (b >= 0))){
    if (col[s][a][b] == 0) return 1;
    else return 0;
  }
  else return 0;
}

int bfs(vvvi &col, int n, int m, pii src, pii goal){
  vvvi d(4, vvi(n, vi(m, INF)));
  d[0][src.x][src.y] = 0;
  queue<pipii> q; pipii cur;
  pii pos, npos;
  int ns;
  q.push(mp(0, src));
  col[0][src.x][src.y] = 1;
  while (!q.empty()){
    cur = q.front();
    q.pop();
    pos = cur.y;
    ns = (cur.x + 1) % 4;

    npos.x = pos.x + 1, npos.y = pos.y;
    if (valid(npos.x, npos.y, n, m, col, ns)){
      q.push(mp(ns, mp(npos.x, npos.y)));
      col[ns][npos.x][npos.y] = 1;
      d[ns][npos.x][npos.y] = 1 + d[cur.x][pos.x][pos.y];
    }
    
    npos.x = pos.x - 1, npos.y = pos.y;    
    if (valid(npos.x, npos.y, n, m, col, ns)){
      q.push(mp(ns, mp(npos.x, npos.y)));
      col[ns][npos.x][npos.y] = 1;
      d[ns][npos.x][npos.y] = 1 + d[cur.x][pos.x][pos.y];
    }

    npos.x = pos.x, npos.y = pos.y + 1;    
    if (valid(npos.x, npos.y, n, m, col, ns)){
      q.push(mp(ns, mp(npos.x, npos.y)));
      col[ns][npos.x][npos.y] = 1;
      d[ns][npos.x][npos.y] = 1 + d[cur.x][pos.x][pos.y];
    }
    
    npos.x = pos.x, npos.y = pos.y - 1;
    if (valid(npos.x, npos.y, n, m, col, ns)){
      q.push(mp(ns, mp(npos.x, npos.y)));
      col[ns][npos.x][npos.y] = 1;
      d[ns][npos.x][npos.y] = 1 + d[cur.x][pos.x][pos.y];
    }
    
    col[cur.x][pos.x][pos.y] = 2;
  }
  
  int ans = INF;
  forn(i, 4){
    if (d[i][goal.x][goal.y] != -1){
      ans = min(ans, d[i][goal.x][goal.y]);
    }
  }
  return ans;
}

int main(){
  int t;
  scanf("%d", &t);
  forn(cs, t){
    int n, m;
    scanf("%d %d", &n, &m);
    char arr[m + 3];
    vvi inp(n, vi(m));
    forn(i, n){
      scanf("%s", arr);
      forn(j, m){
	inp[i][j] = (int)arr[j];
      }
    }
    
    vpii ch(4);
    ch[0].x = -1, ch[0].y = 0;
    ch[1].x = 0, ch[1].y = 1;
    ch[2].x = 1, ch[2].y = 0;
    ch[3].x = 0, ch[3].y = -1;
    
    pii src, goal;
    
    vvvi col(4, vvi(n, vi(m, 0)));
    forn(i, n){
      forn(j, m){
	if (inp[i][j] == 'S') src = mp(i, j);
	else if (inp[i][j] == 'G') goal = mp(i, j);
	else if (inp[i][j] == '#'){
	  forn(k, 4) col[k][i][j] = -1;
	}
	else if (inp[i][j] == '.');
	else{
	  // block the paths
	  int start = 0;
	  if (inp[i][j] == '^') start = 0;
	  else if (inp[i][j] == '>') start = 1;
	  else if (inp[i][j] == 'v') start = 2;
	  else if (inp[i][j] == '<') start = 3;
	  forn(k, 4){
	    int a = i + ch[start].x, b = j + ch[start].y;
	    while ((a < n && a >= 0) && (b < m && b >= 0)){
	      if (inp[a][b] == '#') break;
	      if (inp[a][b] == '^') break;
	      if (inp[a][b] == '>') break;
	      if (inp[a][b] == '<') break;
	      if (inp[a][b] == 'v') break;
	      col[k][a][b] = -1;
	      a += ch[start].x, b += ch[start].y;
	    }
	    start++;
	    start %= 4;
	  }
	}
      }
    }
    
    printf("Case #%d: ", cs + 1);
    int ans = bfs(col, n, m, src, goal);
    if (ans == INF) printf("impossible\n");
    else printf("%d\n", ans);
  }
}

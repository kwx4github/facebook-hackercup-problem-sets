#include<bits/stdc++.h>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
#define _SZ(n) memset((n),0,sizeof(n))
#define _SMO(n) memset((n),-1,sizeof(n))
#define _MC(n,m) memcpy((n),(m),sizeof(n))
#define _F first
#define _S second
#define _MP make_pair
#define _PB push_back
#define FOR(x,y) for(__typeof(y.begin())x=y.begin();x!=y.end();x++)
#define IOS ios_base::sync_with_stdio(0)

#ifdef ONLINE_JUDGE
#define FILEIO(name) \
	freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);
#else
#define FILEIO(name)
#endif
// Let's Fight!

const int dx[] = { 1, 0,-1, 0};
const int dy[] = { 0, 1, 0,-1};

const int MAXN = 105;
const int INF = 1029384756;

int M, N;
string arr[MAXN];
int si, sj, gi, gj;

bool canwalk[MAXN][MAXN][5];
int dis[MAXN][MAXN][5];

class tii
{
public:
    int i, j, k;
    tii(int _i, int _j, int _k){i=_i, j=_j, k=_k;}
};

int getdir(char c)
{
    if(c == 'v') return 0;
    if(c == '>') return 1;
    if(c == '^') return 2;
    if(c == '<') return 3;
    return 0;
}

bool valid(int i, int j)
{
    if(i < 0 || i >= M || j < 0 || j >= N) return false;
    return true;
}

bool empty(int i, int j)
{
    if(!valid(i, j)) return false;
    return arr[i][j] == '.' || arr[i][j] == 'S' || arr[i][j] == 'G';
}

void make_can()
{
    for(int i=0; i<M; i++)
    {
        for(int j=0; j<N; j++)
        {
            if(arr[i][j] == 'S')
            {
                si = i;
                sj = j;
            }
            if(arr[i][j] == 'G')
            {
                gi = i;
                gj = j;
            }
        }
    }
    for(int i=0; i<M; i++)
        for(int j=0; j<N; j++)
            for(int k=0; k<5; k++)
            {
                canwalk[i][j][k] = empty(i, j);
                dis[i][j][k] = INF;
            }
    for(int k=0; k<4; k++)
    {
        for(int i=0; i<M; i++)
        {
            for(int j=0; j<N; j++)
            {
                char c = arr[i][j];
                if(c == 'v' || c == '>' || c == '^' || c == '<')
                {
                    int ii = i, jj = j;
                    int dir = (getdir(c) + k) % 4;
                    while(1)
                    {
                        ii += dx[dir];
                        jj += dy[dir];
                        if(!empty(ii, jj)) break;
                        canwalk[ii][jj][k] = false;
                    }
                }
            }
        }
    }
}

int main()
{
    IOS;
    int T;
    cin>>T;
    for(int t=1; t<=T; t++)
    {
        cin>>M>>N;
        for(int i=0; i<M; i++)
            cin>>arr[i];
        make_can();

        queue<tii> q;
        dis[si][sj][4] = 0;
        q.push(tii(si, sj, 4));

        while(!q.empty())
        {
            tii tp = q.front();
            q.pop();
            int vi = tp.i, vj = tp.j, k = tp.k;
            int nk = (k + 3) % 4;
            for(int d=0; d<4; d++)
            {
                int ni = vi + dx[d];
                int nj = vj + dy[d];
                if(!valid(ni, nj) || !canwalk[ni][nj][nk])
                    continue;
                if(dis[ni][nj][nk] > dis[vi][vj][k] + 1)
                {
                    dis[ni][nj][nk] = dis[vi][vj][k] + 1;
                    q.push(tii(ni, nj, nk));
                }
            }
        }

        int ans = INF;
        for(int i=0; i<5; i++)
            ans = min(ans, dis[gi][gj][i]);
        cout<<"Case #"<<t<<": ";
        if(ans >= INF)
            cout<<"impossible";
        else
            cout<<ans;
        cout<<endl;
    }
	return 0;
}

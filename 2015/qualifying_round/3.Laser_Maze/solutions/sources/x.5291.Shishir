import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class LaserMaze {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader("res/LaserMaze/laser_maze.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("res/LaserMaze/LaserMazeOutput.txt"));
		int t = Integer.parseInt(br.readLine());
		turretChars.add('^');
		turretChars.add('>');
		turretChars.add('v');
		turretChars.add('<');
		indexMap[0] = 0;
		indexMap[1] = 3;
		indexMap[2] = 2;
		indexMap[3] = 1;
		for(int i = 1; i <= t; i++) {
			String[] temp = br.readLine().split(" ");
			int m = Integer.parseInt(temp[0]);
			int n = Integer.parseInt(temp[1]);
			inputMap = new char[m][];
			minStepCountMap = new StepCount[m][n];
			minSteps = Integer.MAX_VALUE;
			Point startingPoint = null;
			for(int j = 0; j < m; j++) {
				inputMap[j] = br.readLine().toCharArray();
				for(int k = 0; k < inputMap[j].length; k++) {
					char posType = inputMap[j][k];
					if(posType == 'S') {
						startingPoint = new Point(k, j);
					} else if(posType == 'G') {
						goalPoint = new Point(k, j);
					}
					minStepCountMap[j][k] = new StepCount(Integer.MAX_VALUE);
				}
			}
			findMinStepsAtEveryPoint(startingPoint);
			findStepsToLaserAtEveryPoint();
			calculateMinStepsToGoal(goalPoint, 0, false, false, false);
			if(minSteps == Integer.MAX_VALUE) {
				bw.write("Case #" + i + ": impossible");
			} else {
				bw.write("Case #" + i + ": " + minSteps);
			}
			if(i != t) {
				bw.write("\n");
			}
			bw.flush();
		}
		br.close();
		bw.close();
	}
	
	private static void calculateMinStepsToGoal(Point curPoint, int steps, boolean isStepsToLaser0, boolean isStepsToLaser2, boolean isShiftFixed) {
		if(minSteps == minStepCountMap[goalPoint.y][goalPoint.x].minSteps) {
			return;
		}
		if(minSteps < Integer.MAX_VALUE && isStepsToLaser0) {
			return;
		}
		if(minStepCountMap[curPoint.y][curPoint.x].minSteps == 0) {
			if(isStepsToLaser0) {
				if(!isShiftFixed) {
					return;
				} else if(!isStepsToLaser2) {
					steps += 2;
				}
			}
			if(steps < minSteps) {
				minSteps = steps;
			}
			return;
		}
		Point neighbors[] = new Point[4];
		neighbors[0] = new Point(curPoint.x + 1, curPoint.y);
		neighbors[1] = new Point(curPoint.x - 1, curPoint.y);
		neighbors[2] = new Point(curPoint.x, curPoint.y + 1);
		neighbors[3] = new Point(curPoint.x, curPoint.y - 1);
		if(isStepsToLaser0 && (!isShiftFixed)) {
			for(Point neighbor : neighbors) {
				if(isPointWithinMap(neighbor) && Math.abs(minStepCountMap[neighbor.y][neighbor.x].minSteps - minStepCountMap[curPoint.y][curPoint.x].minSteps) == 1) {
					if((minStepCountMap[neighbor.y][neighbor.x].minSteps > minStepCountMap[curPoint.y][curPoint.x].minSteps
							&& (!isStepToLaser(neighbor, 0))) ||
							(minStepCountMap[neighbor.y][neighbor.x].minSteps < minStepCountMap[curPoint.y][curPoint.x].minSteps
									&& (!isStepToLaser(neighbor, 2)))) {
						isShiftFixed = true;
						break;
					}
				}
			}
		}
		if(isStepToLaser(curPoint, 0)) {
			isStepsToLaser0 = true;
		}
		if(isStepToLaser(curPoint, 2)) {
			isStepsToLaser2 = true;
		}
		if(isStepsToLaser0 && isStepsToLaser2) {
			return;
		}
		for(Point neighbor : neighbors) {
			if(isPointWithinMap(neighbor) && minStepCountMap[neighbor.y][neighbor.x].minSteps + 1 == minStepCountMap[curPoint.y][curPoint.x].minSteps) {
				calculateMinStepsToGoal(neighbor, steps + 1, isStepsToLaser0, isStepsToLaser2, isShiftFixed);
			}
		}
	}

	private static boolean isStepToLaser(Point point, int stepsToLaser) {
		for(int i = 0; i < 4; i++) {
			if(minStepCountMap[point.y][point.x].stepsToLaser[i] == stepsToLaser) {
				return true;
			}
		}
		return false;
	}

	private static void findStepsToLaserAtEveryPoint() {
		int index;
		for(int i = 0; i < minStepCountMap.length; i++) {
			for(int j = 0; j < minStepCountMap[0].length; j++) {
				index = turretChars.indexOf(inputMap[i][j]);
				if(index != -1) {
					populateStepsToLaser(i, j, index);
				}
			}
		}
	}
	
	private static void populateStepsToLaser(int i, int j, int index) {
		try{
		int x = j + 1, y = i - 1;
		while(y >= 0 && inputMap[y][j] != '#' && (!turretChars.contains(inputMap[y][j]))) {
			minStepCountMap[y][j].setStepsToLaser(indexMap[(minStepCountMap[y][j].minSteps + index) % 4]);
			y--;
		}
		while(x < inputMap[0].length && inputMap[i][x] != '#' && (!turretChars.contains(inputMap[i][x]))) {
			minStepCountMap[i][x].setStepsToLaser(indexMap[(minStepCountMap[i][x].minSteps + index + 3) % 4]);
			x++;
		}
		y = i + 1;
		x = j - 1;
		while(y < inputMap.length && inputMap[y][j] != '#' && (!turretChars.contains(inputMap[y][j]))) {
			minStepCountMap[y][j].setStepsToLaser(indexMap[(minStepCountMap[y][j].minSteps + index + 2) % 4]);
			y++;
		}
		while(x >= 0 && inputMap[i][x] != '#' && (!turretChars.contains(inputMap[i][x]))) {
			minStepCountMap[i][x].setStepsToLaser(indexMap[(minStepCountMap[i][x].minSteps + index + 1) % 4]);
			x--;
		}
		}catch(Exception e){}
	}

	private static void findMinStepsAtEveryPoint(Point curPos) {
		Queue<Point> queue = new LinkedList<>();
		Point neighbors[] = new Point[4];
		int steps = 0;
		int count1 = 1;
		int count2 = 0;
		queue.add(curPos);
		minStepCountMap[curPos.y][curPos.x].isVisited = true;
		while(!queue.isEmpty()) {
			Point temp = queue.poll();
			minStepCountMap[temp.y][temp.x].minSteps = steps;
			neighbors[0] = new Point(temp.x + 1, temp.y);
			neighbors[1] = new Point(temp.x - 1, temp.y);
			neighbors[2] = new Point(temp.x, temp.y + 1);
			neighbors[3] = new Point(temp.x, temp.y - 1);
			for(Point neighbor : neighbors) {
				if(isPointWithinMap(neighbor) && (!minStepCountMap[neighbor.y][neighbor.x].isVisited)
						&& minStepCountMap[neighbor.y][neighbor.x].minSteps > (minStepCountMap[temp.y][temp.x].minSteps + 1)
						&& inputMap[neighbor.y][neighbor.x] != '#' && (!turretChars.contains(inputMap[neighbor.y][neighbor.x]))) {
					queue.add(neighbor);
					minStepCountMap[neighbor.y][neighbor.x].isVisited = true;
					if(steps % 2 == 0) {
						count2++;
					} else {
						count1++;
					}
				}
			}
			if(steps % 2 == 0) {
				count1--;
				if(count1 == 0) {
					steps++;
				}
			} else {
				count2--;
				if(count2 == 0) {
					steps++;					
				}
			}
		}		
	}
	
	private static boolean isPointWithinMap(Point point) {
		return !(point.x < 0 || point.x >= inputMap[0].length || point.y < 0 || point.y >= inputMap.length);
	}
	
	private static char[][] inputMap;
	private static StepCount[][] minStepCountMap;
	private static int minSteps;
	private static ArrayList<Character> turretChars = new ArrayList<>(4);
	private static int[] indexMap = new int[4];
	private static Point goalPoint; 
	
	private static class StepCount {
		private int minSteps;
		private boolean isVisited;
		private int[] stepsToLaser;
		
		private StepCount(int minSteps) {
			this.minSteps = minSteps;
			stepsToLaser = new int[4];
			for(int i = 0; i < 4; i++) {
				stepsToLaser[i] = -1;
			}
		}
		
		private void setStepsToLaser(int stepToLaser) {
			for(int i = 0; i < 4; i++) {
				if(stepsToLaser[i] == -1) {
					stepsToLaser[i] = stepToLaser;
					break;
				}
			}
		}
	}
	
	private static class Point {
		private int x;
		private int y;
		
		private Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
}

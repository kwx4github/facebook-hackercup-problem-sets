/*
 *
 * Author : fcbruce <fcbruce8964@gmail.com>
 *
 * Time : Fri 09 Jan 2015 03:14:47 PM CST
 *
 */
#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <algorithm>
#include <ctime>
#include <cctype>
#include <cmath>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <set>
#define sqr(x) ((x)*(x))
#define LL long long
#define itn int
#define INF 0x3f3f3f3f
#define PI 3.1415926535897932384626
#define eps 1e-10

#ifdef _WIN32
  #define lld "%I64d"
#else
  #define lld "%lld"
#endif

#define maxm 
#define maxn 101

char G[maxn][maxn];
bool vis[maxn][maxn][4][4];
bool dead[maxn][maxn][4];

int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};

char dir_c[]="^>v<";

int sx,sy,gx,gy,n,m;

using namespace std;

inline int find(char c)
{
  for (int i=0;i<4;i++) if (c==dir_c[i]) return i;
  return -1;
}

bool in_map(int x,int y)
{
  return x>=0 && x<n && y>=0 && y<m && (G[x][y]=='S' || G[x][y]=='G' || G[x][y]=='.');
}

void go(int x,int y,int d,int i)
{
  x+=dx[d];y+=dy[d];
  while (in_map(x,y))
  {
    dead[x][y][i]=true;
    x+=dx[d];y+=dy[d];
  }
}

void init(int x,int y)
{
  if (G[x][y]=='S')
  {
    sx=x;sy=y;
    return ;
  }
  if (G[x][y]=='G')
  {
    gx=x,gy=y;
    return ;
  }
  int d=find(G[x][y]);
  if (d<0) return ;

  for (int i=0;i<4;i++)
    go(x,y,(i+d)%4,i);
}

struct node
{
  int x,y,t;
}q[233333];

int bfs()
{
  int f,r;
  node cur=(node){sx,sy,0};
  q[f=r=0]=cur;

  while (f<=r)
  {
    cur=q[f++];
    if (cur.x==gx && cur.y==gy) return cur.t;
    for (int i=0;i<4;i++)
    {
      int tx=cur.x+dx[i],ty=cur.y+dy[i];
      if (!in_map(tx,ty) || dead[tx][ty][(cur.t+1)%4] || vis[tx][ty][i][(cur.t+1)%4])continue;//our range, be shot or visted
      vis[tx][ty][i][(cur.t+1)%4]=true;
      q[++r]=(node){tx,ty,cur.t+1};
    }
  }

  return -1;
}

int main()
{
#ifdef FCBRUCE
  freopen("/home/fcbruce/code/t","r",stdin);
  freopen("/home/fcbruce/code/out","w",stdout);
#endif // FCBRUCE

  int T_T,__=0;
  scanf("%d",&T_T);

  while (T_T--)
  {
    printf("Case #%d: ",++__);
    memset(dead,0,sizeof dead);
    memset(vis,0,sizeof vis);
    scanf("%d%d",&n,&m);
    for (int i=0;i<n;i++) scanf("%s",G[i]);

    for (int i=0;i<n;i++)
      for (int j=0;j<m;j++)
        init(i,j);

    int res=bfs();
    if (res==-1) puts("impossible");
    else printf("%d\n",res);
  }



  return 0;
}

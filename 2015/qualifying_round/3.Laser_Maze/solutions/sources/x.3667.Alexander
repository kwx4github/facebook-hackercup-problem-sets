
#include <bits/stdc++.h>
#define f(i,x,y) for (int i = x; i < y; i++)
#define fx(i,x,y) for (i = x; i < y; i++)
#define fd(i,x,y) for(int i = x; i>= y; i--)
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define clr(A,x) memset(A, x, sizeof A)
#define pb push_back
#define pii pair<int,int>
#define mp make_pair
#define fst first
#define snd second
#define ones(x) __builtin_popcount(x)
#define eps (1e-9)
#define oo (1<<30)
#define OO (1LL<<60)
#define readint(i) scanf("%d",&i)
#define readchr(i) scanf("%c",&i)
#define readint2(i,j) scanf("%d %d",&i,&j)
#define readint3(i,j,k) scanf("%d %d %d",&i,&j,&k)
#define readstr(i) scanf("%s",i)
#define readstr2(i,j) scanf("%s %s",i,j)
#define printint(i) printf("%d\n",i)
#define printstr(s) printf("%s",s)
#define in(i) cin>>i
#define out(i) cout<<i<<endl
#define in2(i,j) cin>>i>>j
#define out2(i,j) cout<<i<<" "<<j<<endl
#define in3(i,j,k) cin>>i>>j>>k
#define out3(i,j,k) cout<<i<<" "<<j<<" "<<k<<endl
#define line(s) getline(cin,s)
#define N 110
using namespace std;
typedef long long int ll;
typedef vector<int> vint ;
typedef vector<string> vstr ;
typedef vector<ll> vll ;
/*variables*/
string lab[N];
int dis[N][N][4];
int vis[N][N][4];
int t;
int n,m;
struct nod{
	int x,y,v;
	nod(int px,int py,int pv):x(px),y(py),v(pv){}
	bool operator ==(nod e)const{
		return x==e.x && y==e.y && v==e.v; 
	}
};
vector<nod> lasers;
queue<nod> Q;
nod ini=nod(0,0,0);
pii fin;
int X[]={1,0,-1,0};
int Y[]={0,1,0,-1};
/*funciones*/
int islaser(int i,int j){
	if(lab[i][j]=='.') return -1;
	if(lab[i][j]=='#') {f(k,0,4) vis[i][j][k]=1;return -1;}		
	if(lab[i][j]=='S') {ini=nod(i,j,0); return -1;}
	if(lab[i][j]=='G') {fin=pii(i,j); return -1;}
	string l="^<v>";
	f(k,0,l.size())if(lab[i][j]==l[k]){
		f(p,0,4) 	vis[i][j][p]=1;
		fd(q,i-1,0) vis[q][j][k]=1;
		f(q,j+1,m) 	vis[i][q][(k+1)%4]=1;
		f(q,i+1,n) 	vis[q][j][(k+2)%4]=1;
		fd(q,j-1,0) vis[i][q][(k+3)%4]=1;
		return k;
	}
	return -1;
}
bool existe(int i,int j){
	return i>=0 && i<n && j>=0 && j<m;
}
int main(){
	in(t);
	f(cases,0,t){
		in2(n,m);
		f(i,0,n)in(lab[i]);
		//init 
		lasers.clear();
		clr(vis,0);
		f(i,0,n)f(j,0,m)f(k,0,4)dis[i][j][k]=oo;
		while(!Q.empty()) Q.pop();
		//solve
		f(i,0,n)f(j,0,m)if(islaser(i,j)>-1) lasers.pb(nod(i,j,islaser(i,j)));
		Q.push(ini);
		vis[ini.x][ini.y][ini.v]=1;
		dis[ini.x][ini.y][ini.v]=0;
		int ans=-1;
		while(!Q.empty()){
			nod act=Q.front();Q.pop();
			if(act.x==fin.fst && act.y==fin.snd){
				ans=dis[act.x][act.y][act.v];
				break;
			}
			f(i,0,4){
				if(existe(act.x+X[i],act.y+Y[i])){
					if(!vis[act.x+X[i]][act.y+Y[i]][(act.v+1)%4]){
						vis[act.x+X[i]][act.y+Y[i]][(act.v+1)%4]=1;
						dis[act.x+X[i]][act.y+Y[i]][(act.v+1)%4]=dis[act.x][act.y][act.v]+1;
						Q.push(nod(act.x+X[i],act.y+Y[i],(act.v+1)%4));
					}
				}
			}
		}
		printf("Case #%d: ",cases+1);		
		if(ans!=-1) out(ans);
		else out("impossible");
	}
}
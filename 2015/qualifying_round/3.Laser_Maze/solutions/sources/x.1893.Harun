#include <cstdio>
#include <cstring>
#include <queue>
#define FOR(i,a,b) for(i=a; i<=b; i++)
#define FOR2(i,n) FOR(i,0,n-1)
#define TFOR(i,a,b) for(i=a; i>=b; i--)
#define EKLE(x,y,s) { qx.push(x); qy.push(y); qs.push(s); }
#define BAK(x,y,s)  { x = qx.front(); y = qy.front(); s = qs.front(); qx.pop(); qy.pop(); qs.pop(); }
#define f first
#define s second
#define pb push_back
#define all(x) x.begin(),x.end()
#define MAXN 1005
using namespace std;
typedef pair < int , int > pii;
int read()
{
	int a;
	scanf("%d" , &a );
	return a;
}
int M,N;
bool hash[MAXN][MAXN][4];
bool obstacle[MAXN][MAXN][4];
char A[MAXN][MAXN];
int yon[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };
void up(int x,int y,int s)
{
	for(int i = x-1; A[i][y] != '#' && i > 0; i--)
		obstacle[i][y][s] = true;
}
void right(int x,int y,int s)
{
	for(int i = y+1; A[x][i] != '#' && i <= N; i++ )
		obstacle[x][i][s] = true;
}
void down(int x,int y,int s)
{
	for(int i = x+1; A[i][y] != '#' && i <= M; i++)
		obstacle[i][y][s] = true;
}
void left(int x,int y,int s)
{
	for(int i = y-1; A[x][i] != '#' && i > 0; i--)
		obstacle[x][i][s] = true;
}
int solve()
{
	memset( obstacle , 0 , sizeof obstacle );
	memset( hash , 0 , sizeof hash );
	queue < int > qs,qx,qy;
	int i,j,s,x,y;
	M = read(); N = read();
	FOR(i,1,M)
		FOR(j,1,N)
			scanf(" %c" , A[i] + j );
	
	FOR(i,1,M)
		FOR(j,1,N)
			if( A[i][j] == 'S' )
			{
				EKLE(i,j,0);
			}
			else if( A[i][j] == '^' )
			{
				up(i,j,0);
				right(i,j,1);
				down(i,j,2);
				left(i,j,3);
			}
			else if( A[i][j] == '>' )
			{
				right(i,j,0);
				down(i,j,1);
				left(i,j,2);
				up(i,j,3);
			}
			else if( A[i][j] == 'v' )
			{
				down(i,j,0);
				left(i,j,1);
				up(i,j,2);
				right(i,j,3);
			}
			else if( A[i][j] == '<' )
			{
				left(i,j,0);
				up(i,j,1);
				right(i,j,2);
				down(i,j,3);
			}
			
	int xx,yy , res = 1000000000;
	while( !qx.empty() )
	{
		BAK(x,y,s);
		if( A[x][y] == 'G' ) { res = min( res , s ); continue; }
		for(i = 0; i < 4; i++)
		{
			xx = x + yon[i][0];
			yy = y + yon[i][1];
			if( !( 1 <= xx && xx <= M && 1 <= yy && yy <= N && A[xx][yy] != '#' ) ) continue;
			if( obstacle[xx][yy][(s+1)%4] ) continue;
			if( hash[xx][yy][(s+1)%4] == true ) continue;
			hash[xx][yy][(s+1)%4] = true;
			EKLE(xx,yy,s+1);
		}
	}
	return (res == 1000000000) ? -1 : res;
}
int main()
{
	freopen("a.txt","r",stdin);
	freopen("b.txt","w",stdout);
	int T = read() , i, s;
	FOR(i,1,T)
	{
		s = solve();
		printf("Case #%d: " , i );
		if(s == -1) printf("impossible\n");
		else printf("%d\n" , s );
	}
	return 0;
}

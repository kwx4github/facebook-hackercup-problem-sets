#include <bits/stdc++.h>
using namespace std;
#define For(i,a,b) for(int i=a;i<b;i++)
#define mp make_pair
#define pb push_back

int t,m,n,dis[102][102][4],blk[102][102][4],ms,ns,mg,ng,rot,x,y,used[102][102][4],ans;
string grid[102];

struct node
{
    int x;
    int y;
    int t;
};

node cur,nod;

class compar
{
public:
    bool operator()(node& t1,node& t2)
    {
        if(dis[t1.x][t1.y][t1.t]>dis[t2.x][t2.y][t2.t]) return true;
        else return false;
    }
};

int main(){
    ifstream fin ("laser_maze.txt");
    ofstream fout ("output.txt");
    fin>>t;
    priority_queue<node,vector<node>,compar> Q;
    For(ca,1,t+1)
    {
        fin>>m>>n;
        For(i,0,m) fin>>grid[i];
        For(i,0,102) For(j,0,102) For(k,0,4) dis[i][j][k]=1000000;
        memset(blk,0,sizeof(blk));
        For(i,0,m) For(j,0,n)
        {
            if(grid[i][j]=='#') For(k,0,4) blk[i][j][k]=1;
            else if(grid[i][j]=='S')
            {
                ms=i;
                ns=j;
                grid[i][j]='.';
            }
            else if(grid[i][j]=='G')
            {
                mg=i;
                ng=j;
                grid[i][j]='.';
            }
            else if(grid[i][j]!='.')
            {
                if(grid[i][j]=='^') rot=0;
                else if(grid[i][j]=='>') rot=3;
                else if(grid[i][j]=='v') rot=2;
                else rot=1;
                x=i-1;
                y=j;
                while(x>=0)
                {
                    if(grid[x][y]=='.') blk[x][y][rot]=1;
                    else break;
                    x--;
                }
                rot++;
                rot%=4;
                x=i;
                y=j+1;
                while(y<n)
                {
                    if(grid[x][y]=='.') blk[x][y][rot]=1;
                    else break;
                    y++;
                }
                rot++;
                rot%=4;
                x=i+1;
                y=j;
                while(x<m)
                {
                    if(grid[x][y]=='.') blk[x][y][rot]=1;
                    else break;
                    x++;
                }
                rot++;
                rot%=4;
                x=i;
                y=j-1;
                while(y>=0)
                {
                    if(grid[x][y]=='.') blk[x][y][rot]=1;
                    else break;
                    y--;
                }
            }

        }
        cur.x=ms;
        cur.y=ns;
        cur.t=0;
        Q.push(cur);
        memset(used,0,sizeof(used));
        used[ms][ns][0]=1;
        dis[ms][ns][0]=0;
        while(!Q.empty())
        {
            cur=Q.top();
           // cout<<cur.x<<cur.y<<cur.t<<endl;
            Q.pop();
            rot=cur.t+1;
            rot%=4;
            if (cur.x>0) if(blk[cur.x-1][cur.y][rot]==0)
            {
                dis[cur.x-1][cur.y][rot]=min(dis[cur.x-1][cur.y][rot],dis[cur.x][cur.y][cur.t]+1);
                if(used[cur.x-1][cur.y][rot]==0)
                    {used[cur.x-1][cur.y][rot]=1;nod.x=cur.x-1;
                nod.y=cur.y;
                nod.t=rot;Q.push(nod);}
                used[cur.x-1][cur.y][rot]=1;

            }
            if (cur.x<m-1) if(blk[cur.x+1][cur.y][rot]==0)
            {
                dis[cur.x+1][cur.y][rot]=min(dis[cur.x+1][cur.y][rot],dis[cur.x][cur.y][cur.t]+1);
                if(used[cur.x+1][cur.y][rot]==0)
                    {used[cur.x+1][cur.y][rot]=1;nod.x=cur.x+1;
                nod.y=cur.y;
                nod.t=rot;Q.push(nod);}
                used[cur.x+1][cur.y][rot]=1;

            }
            if (cur.y>0) if(blk[cur.x][cur.y-1][rot]==0)
            {
                dis[cur.x][cur.y-1][rot]=min(dis[cur.x][cur.y-1][rot],dis[cur.x][cur.y][cur.t]+1);
                if(used[cur.x][cur.y-1][rot]==0)
                    {used[cur.x][cur.y-1][rot]=1;nod.x=cur.x;
                nod.y=cur.y-1;
                nod.t=rot;Q.push(nod);}
                used[cur.x][cur.y-1][rot]=1;

            }
            if (cur.y<n-1) if(blk[cur.x][cur.y+1][rot]==0)
            {
                dis[cur.x][cur.y+1][rot]=min(dis[cur.x][cur.y+1][rot],dis[cur.x][cur.y][cur.t]+1);
                if(used[cur.x][cur.y+1][rot]==0)
                    {used[cur.x][cur.y+1][rot]=1;nod.x=cur.x;
                nod.y=cur.y+1;
                nod.t=rot;Q.push(nod);}
                used[cur.x][cur.y+1][rot]=1;

            }

        }
        ans=1000000;
        //For(i,0,m) For(j,0,n) For(k,0,4) cout<<dis[i][j][k]<<endl;
        For(i,0,4) ans=min(ans,dis[mg][ng][i]);
        if(ans==1000000) fout<<"Case #"<<ca<<": impossible"<<endl;
        else fout<<"Case #"<<ca<<": "<<ans<<endl;
        //cout<<used[1][1][1]<<endl<<dis[1][4][0];
        //return 0;
    }
    return 0;
}

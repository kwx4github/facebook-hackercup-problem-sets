#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <queue>
#include <memory.h>
#include <stack>
#include <math.h>
using namespace std;
#define N 100
int dr[] = {1,0,-1,0},dc[] = {0,-1,0,1},R,C;  
char data[N][N];
bool vs[N][N][4];
int seq[]={3,0,1,1};
int cc = -1;
class state
{
	public:
	int r,c,cost;
	state(int rr,int cc,int Cost)
	{
		r = rr;
		c = cc;
		cost = Cost;
	}
	state(){}
};
bool allGood(state s)
{
	if(s.cost == 0)
		return true;
	for(int i = 0;i<4;i++)
	{
		int r = s.r;
		int c = s.c;
		while(r >= 0 && r < R && c >= 0 && c < C && data[r][c] != '#')
		{
			if(data[r][c] >= '0' && data[r][c] <= '3')
			{
				int temp = data[r][c] - '0';
				temp+=s.cost;
				temp%=4;
				if(i == temp)
					return false;
				break;
			} 
			r+= dr[i];
			c+= dc[i];
		}
	}
	return true;
}

int bfs(state src)
{
	queue<state> q;
	q.push(src);
	vs[src.r][src.c][0] = true;
	while(!q.empty())
	{
		state out = q.front();
		q.pop();
		if(allGood(out))
		{
			if(data[out.r][out.c] == 'G')
				return out.cost;
			for(int i = 0 ;i<4;i++)
			{
				if(i == seq[cc])
					cc++;
				state neW(out.r + dr[i],out.c + dc[i],out.cost +1); 
				if(neW.r < 0 || neW.r >= R || neW.c < 0 || neW.c >= C || data[neW.r][neW.c] == '#' || vs[neW.r][neW.c][neW.cost%4] || (data[neW.r][neW.c] >= '0' && data[neW.r][neW.c] <= '3'))
					continue;
				vs[neW.r][neW.c][neW.cost%4]  = true;
				q.push(neW);
			}
		}
	}
	return -1;
}
int main()
{
	freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
	int t;
	cin >> t;
	for(int tt = 1;tt<=t;tt++)
	{
		cin >> R >> C;
		memset(vs,0,sizeof vs);
		state s;
		for(int i = 0 ;i<R;i++)
			for(int j = 0;j<C;j++)
			{
				cin >> data[i][j];
				if(data[i][j] == 'S')
					s = state(i,j,0);
				else if(data[i][j] == '^')
					data[i][j] = '0';
				else if(data[i][j] == '>')
					data[i][j] ='1'	;
				else if(data[i][j] == 'v')
					data[i][j] ='2';
				else if(data[i][j] == '<')
					data[i][j] ='3';			
			}
		
		cout << "Case #" << tt << ": ";
		
		int x = bfs(s); 
		if(x != -1)
			cout << x << endl;
		else
			cout << "impossible\n";	
	}
	return 0;
}

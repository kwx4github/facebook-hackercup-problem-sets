#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define rep(i,a,b) for(long long i=a;i<b;i++)
#define repi(i,a,b) for(int i=a;i>b;i--)
using namespace std;

int m, n;

void path(char arr[102][102][4], int p, int x, int y, char d)
{
    if(d=='u')
    {
        repi(i,x,-1)
        {
            if(i!=x && (arr[i][y][p]=='<' || arr[i][y][p]=='^' || arr[i][y][p]=='>' || arr[i][y][p]=='v') || arr[i][y][p]=='#')
                break;
            arr[i][y][p]='#';
        }
    }
    if(d=='d')
    {
        rep(i,x,m)
        {
            if(i!=x && (arr[i][y][p]=='<' || arr[i][y][p]=='^' || arr[i][y][p]=='>' || arr[i][y][p]=='v') || arr[i][y][p]=='#')
                break;
            arr[i][y][p]='#';
        }
    }
    if(d=='l')
    {
        repi(j,y,-1)
        {
            if(j!=y && (arr[x][j][p]=='<' || arr[x][j][p]=='^' || arr[x][j][p]=='>' || arr[x][j][p]=='v') || arr[x][j][p]=='#')
                break;
            arr[x][j][p]='#';
        }
    }
    if(d=='r')
    {
        rep(j,y,n)
        {
            if(j!=y && (arr[x][j][p]=='<' || arr[x][j][p]=='^' || arr[x][j][p]=='>' || arr[x][j][p]=='v') || arr[x][j][p]=='#')
                break;
            arr[x][j][p]='#';
        }
    }
}

void make(char arr[102][102][4], int p)
{
    rep(i,0,m)
    {
        rep(j,0,n)
        {
            switch(arr[i][j][p])
            {
                case '<': {path(arr,p,i,j,'l'); break;}
                case '^': {path(arr,p,i,j,'u'); break;}
                case '>': {path(arr,p,i,j,'r'); break;}
                case 'v': {path(arr,p,i,j,'d'); break;}
                case 'S': {arr[102][102][p]='.'; break;}
                case 'E': {arr[102][102][p]='.'; break;}
            }
        }
    }
}

void rotate_maze(char arr[102][102][4], int p)
{
    rep(i,0,m)
    {
        rep(j,0,n)
        {
            switch(arr[i][j][p])
            {
                case '<': {arr[i][j][p+1]='^'; break;}
                case '^': {arr[i][j][p+1]='>'; break;}
                case '>': {arr[i][j][p+1]='v'; break;}
                case 'v': {arr[i][j][p+1]='<'; break;}
                default: arr[i][j][p+1]=arr[i][j][p];
            }
        }
    }
}

void print(char arr[102][102][4], int p)
{
    rep(i,0,m)
        {
            rep(j,0,n)
            {
                cout<<arr[i][j][p];
            }
            cout<<endl;
        }
}

struct point
{
    int x;
    int y;
    int state;
    point(int a, int b, int c)
    {
        x=a;
        y=b;
        state=c;
    }
};

void bfs(char arr[102][102][4], int visited[102][102][4], int result[102][102][4], int x, int y)
{
    queue<point> q;
    point *p1=new point(x,y,0);
    q.push(*p1);
    visited[x][y][0]=1;
    while(!q.empty())
    {
        point p=q.front();
        q.pop();
        if(p.x>0)
        {
            if(!visited[p.x-1][p.y][(p.state+1)%4] && arr[p.x-1][p.y][(p.state+1)%4]!='#')
            {
                q.push(*(new point(p.x-1,p.y,(p.state+1)%4)));
                result[p.x-1][p.y][(p.state+1)%4]=result[p.x][p.y][p.state]+1;
                visited[p.x-1][p.y][(p.state+1)%4]=1;
            }
        }
        if(p.x<(m-1))
        {
            if(!visited[p.x+1][p.y][(p.state+1)%4] && arr[p.x+1][p.y][(p.state+1)%4]!='#')
            {
                q.push(*(new point(p.x+1,p.y,(p.state+1)%4)));
                result[p.x+1][p.y][(p.state+1)%4]=result[p.x][p.y][p.state]+1;
                visited[p.x+1][p.y][(p.state+1)%4]=1;
            }
        }
        if(p.y<(n-1))
        {
            if(!visited[p.x][p.y+1][(p.state+1)%4] && arr[p.x][p.y+1][(p.state+1)%4]!='#')
            {
                q.push(*(new point(p.x,p.y+1,(p.state+1)%4)));
                result[p.x][p.y+1][(p.state+1)%4]=result[p.x][p.y][p.state]+1;
                visited[p.x][p.y+1][(p.state+1)%4]=1;
            }
        }
        if(p.y>0)
        {
            if(!visited[p.x][p.y-1][(p.state+1)%4] && arr[p.x][p.y-1][(p.state+1)%4]!='#')
            {
                q.push(*(new point(p.x,p.y-1,(p.state+1)%4)));
                result[p.x][p.y-1][(p.state+1)%4]=result[p.x][p.y][p.state]+1;
                visited[p.x][p.y-1][(p.state+1)%4]=1;
            }
        }
    }
}

int main()
{
    int t;
    cin>>t;
    rep(looper,1,t+1)
    {
        cin>>m>>n;
        int startx, starty, goalx, goaly;
        char arr[102][102][4];
        rep(i,0,m)
        {
            rep(j,0,n)
            {
                cin>>arr[i][j][0];
                if(arr[i][j][0]=='S')
                {
                    startx=i;
                    starty=j;
                }
                if(arr[i][j][0]=='G')
                {
                    goalx=i;
                    goaly=j;
                }
            }
        }
        rotate_maze(arr,0);
        rotate_maze(arr,1);
        rotate_maze(arr,2);

        make(arr,0);
        make(arr,1);
        make(arr,2);
        make(arr,3);

        int visited[102][102][4]={0};
        int result[102][102][4]={0};
        bfs(arr,visited,result,startx,starty);
        if(result[goalx][goaly][0]==0 && result[goalx][goaly][1]==0 && result[goalx][goaly][2]==0 && result[goalx][goaly][3]==0)
            cout<<"Case #"<<looper<<": impossible"<<endl;
        else
        {
            int res;
            res=min(result[goalx][goaly][0]==0?INT_MAX:result[goalx][goaly][0],result[goalx][goaly][1]==0?INT_MAX:result[goalx][goaly][1]);
            res=min(res,result[goalx][goaly][2]==0?INT_MAX:result[goalx][goaly][2]);
            res=min(res,result[goalx][goaly][3]==0?INT_MAX:result[goalx][goaly][3]);
            cout<<"Case #"<<looper<<": "<<res<<endl;
        }
    }
}

#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <math.h>
#include <memory.h>


using namespace std;
#define MAX 100

int dirs[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
int mp[MAX][MAX];
int N, M;
pair<int, int> start, goal;
bool matr[MAX][MAX][4];
int dist[MAX][MAX][4];

pair<pair<int, int>, int> tr(int x, int y, int d)
{
	return make_pair(make_pair(x, y), d);
}

int process()
{
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			for (int d = 0; d < 4; d++)
				matr[i][j][d] = true;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
		{
			if (mp[i][j] == 4)
			{
				for (int d = 0; d < 4; d++)
					matr[i][j][d] = false;
			}
			else if (mp[i][j] !=-1)
			{
				for (int d = 0; d < 4; d++)
					matr[i][j][d] = false;
				int D = mp[i][j];
				for (int d = 0; d < 4; d++)
				{
					for (int k = 1;; k++)
					{
						int x = i + dirs[(D+d)%4][0] * k;
						int y = j + dirs[(D+d)%4][1] * k;
						if (x < 0 || x >= N || y < 0 || y >= M || mp[x][y]!= -1)
							break;
						matr[x][y][d] = false;
					}
				}
			}
		}

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			for(int d= 0; d< 4; d++)
				dist[i][j][d] = 1000000000;
	queue<pair<pair<int, int>, int>> q;
	dist[start.first][start.second][0] = 0;
	q.push(tr(start.first, start.second, 0));
	while (!q.empty())
	{
		auto p = q.front();
		q.pop();
		for (int d = 0; d < 4; d++)
		{
			int x = p.first.first + dirs[d][0];
			int y = p.first.second + dirs[d][1];
			int t = (p.second + 1)%4;
			if (x >= 0 && x < N && y >=0 && y < M && matr[x][y][t] && dist[x][y][t] > dist[p.first.first][p.first.second][p.second]+1)
			{
				dist[x][y][t] = dist[p.first.first][p.first.second][p.second]+1;
				q.push(tr(x, y, t));
			}
		}
	}
	int res = dist[goal.first][goal.second][0];
	for (int d = 1; d < 4; d++)
		res = min(res, dist[goal.first][goal.second][d]);
	if (res >= 1000000000)
		res = -1;
	return res;
}

int main()
{
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);


	int T;
	cin >> T;
	for (int t = 0; t < T; t++)
	{
		cin >> N >> M;
		char s[200];
		for (int i = 0; i < N; i++)
		{
			cin >> s;
			for (int j = 0; j < M; j++)
			{
				if (s[j] == '.')
					mp[i][j] = -1;

				if (s[j] == 'v')
					mp[i][j] = 0;

				if (s[j] == '<')
					mp[i][j] = 1;

				if (s[j] == '^')
					mp[i][j] = 2;

				if (s[j] == '>')
					mp[i][j] = 3;

				if (s[j] == '#')
					mp[i][j] = 4;

				if (s[j] == 'S')
				{
					mp[i][j] = -1;
					start.first = i;
					start.second = j;
				}
				
				if (s[j] == 'G')
				{
					mp[i][j] = -1;
					goal.first = i;
					goal.second = j;
				}
			}
		}

		int res = process();
		if (res != -1)
			printf("Case #%d: %d\n", t+1, res);
		else
			printf("Case #%d: impossible\n", t+1);
	}
	return 0;
}
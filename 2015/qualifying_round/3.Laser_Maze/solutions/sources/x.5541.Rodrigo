#include <algorithm>
#include <bitset>
#include <deque>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#define fst first
#define snd second
#define all(x) (x).begin(), (x).end()
#define clr( a , v ) memset( a , v , sizeof(a) )
#define pb push_back
#define mp make_pair
#define sz size()
#define FORN( i , s , n ) for( int i = s ; i < (int)(n) ; i++ )
#define FOR( i , n ) FORN( i , 0 , n )
#define FORIT(i,x) for( typeof x.begin() i = x.begin() ; i != x.end() ; i++ )
#define trace(x)    cerr << #x << ": " << x << endl;
#define trace2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define read ios::sync_with_stdio(false)

using namespace std;

typedef long long int64;
typedef vector <int> vi;
typedef pair <int,int> ii;
typedef vector <string> vs;
typedef vector <ii> vii;


int MCD (int x,int y){
        return (y==0 ? x:MCD(y,x%y));
}
 
int MCM(int x ,int y){
        return (x*y/MCD(x,y));
}

char tab[105][105];
int dX[] = {1,-1,0,0};
int dY[] = {0,0,1,-1};
int iniX,iniY;
int finX,finY;
int M,N;
int pasos,resp,resp1,resp2;
vii laser;

char direccion(char actual , int pasos){
	if(actual=='<'){
		if(pasos==0) return '<';
		if(pasos==1) return '^';
		if(pasos==2) return '>';
		if(pasos==3) return 'v';

	}
	if(actual=='>'){
		if(pasos==0) return '>';
		if(pasos==1) return 'v';
		if(pasos==2) return '<';
		if(pasos==3) return '^';
	}
	if(actual=='^'){
		if(pasos==0) return '^';
		if(pasos==1) return '>';
		if(pasos==2) return 'v';
		if(pasos==3) return '<';		
		
	}
	if(actual=='v'){
		if(pasos==0) return 'v';
		if(pasos==1) return '<';
		if(pasos==2) return '^';
		if(pasos==3) return '>';		
	}	
}


bool puedeMover( int X ,int Y){
	if(X<0 || Y<0 || X>=M || Y>=N) return false;
	if(tab[X][Y]== '.' ||  tab[X][Y]== 'G') return true;
	return false;
}

bool verifica(int X , int Y){
	FOR(i,laser.size()){
		char aux=direccion(tab[laser[i].fst][laser[i].snd], pasos%4 );
		if(aux=='<'){
			if(X==laser[i].fst && Y<=laser[i].snd)	return false;
		}
		if(aux=='>'){
			if(X==laser[i].fst && Y>=laser[i].snd)	return false;
		}
		if(aux=='^'){
			if(Y==laser[i].snd && X<=laser[i].fst)	return false;
		}
		if(aux=='v'){
			if(Y==laser[i].snd && X>=laser[i].fst)	return false;
		}
	}
	return true;
}


bool movidas(int iniX,int iniY,int finX, int finY ){
	if(iniX==finX && iniY==finY) {resp=pasos;return true;}
	bool aux=false;
	FOR(i,4){
		if(puedeMover(iniX+dX[i], iniY+dY[i])){
			tab[iniX+dX[i]][iniY+dY[i]]='X';
			pasos++;
			if(verifica(iniX+dX[i] , iniY+dY[i]) )	{
				aux=aux || movidas(iniX+dX[i],iniY+dY[i],finX,finY);
			}
			pasos--;
			tab[iniX+dX[i]][iniY+dY[i]]='.';	
		}
	}
	return aux;
}




int main() {
	int T;
	cin>>T;
	FOR(i,T){
		
		cin>>M>>N;
		pasos=0;
		FOR(j,M){
			FOR(k,N){
				cin>>tab[j][k];
				if(tab[j][k]=='S') { iniX=j ; iniY=k ; }
				if(tab[j][k]=='G') { finX=j ; finY=k ; }
				if( tab[j][k]=='<' || tab[j][k]== '>' ||  
					tab[j][k]=='^' || tab[j][k]== 'v') laser.pb(mp(j,k));
			}
		}
		bool poder1= movidas(iniX,iniY,finX,finY);
		resp1=resp;
		
		FOR(j,laser.size()){
			char aux=tab[laser[j].fst][laser[j].snd];
				 if(aux=='<')	tab[laser[j].fst][laser[j].snd]='>';
			else if(aux=='>')	tab[laser[j].fst][laser[j].snd]='<';
			else if(aux=='^')	tab[laser[j].fst][laser[j].snd]='v';
			else if(aux=='v')	tab[laser[j].fst][laser[j].snd]='^';
		}
		bool poder2= movidas(iniX,iniY,finX,finY);	
		resp2=resp;
		cout<<"Case #"<<i+1<<": ";
		     if(poder1)	cout<<resp1<<endl;
		else if(poder2) cout<<resp2+2<<endl;
		else 	cout<<"Imposible"<<endl;
		
	}
	return 0;
}
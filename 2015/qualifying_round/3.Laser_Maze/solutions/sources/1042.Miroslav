#include<iostream>
#include<vector>
#include<set>
#include<queue>
#include<algorithm>
#include<map>
#include<string>

using namespace std;
#define REP(i,n) for(int i=0;i<(int)n;++i)
int st[100][100][4];
int dx[4]={0,1,0,-1};
int dy[4]={-1,0,1,0};
string tur("^>v<");
void solve() {
  int m,n;
  cin>>m>>n;
  vector<string> s(m);
  REP(i,m) cin>>s[i];
  int inf=100*100*5+1;
  REP(i,m)REP(j,n) REP(k,4) st[i][j][k]=-1;
  queue<int> q;
  REP(y, m) REP(x,n) {
    if(tur.find(s[y][x])!=string::npos) {
      int disp=tur.find(s[y][x]);
      REP(sm, 4) {
        int nx=x+dx[sm];
        int ny=y+dy[sm];
        st[y][x][sm]=inf;
        while(nx<n && nx>=0 && ny<m && ny>=0) {
          if(s[ny][nx]!='.' && s[ny][nx]!='S' && s[ny][nx]!='G') break;
          st[ny][nx][(sm-disp+4)&3] = inf;
          nx+=dx[sm];
          ny+=dy[sm];
        }    
      }
    }
  }
  REP(i,m) REP(j,n) if (s[i][j]=='S') {
    st[i][j][0]=0;
    q.push(i);q.push(j);q.push(0);
  }
  while(!q.empty()) {
    int y,x,k;
    y=q.front();q.pop();
    x=q.front();q.pop();
    k=q.front();q.pop();
    REP(sm,4) {
      int ny=y+dy[sm];
      int nx=x+dx[sm];
      int nk=(k+1)%4;
      if(ny>=0 && ny<m && nx<n && nx>=0 && s[ny][nx]!='#' && st[ny][nx][nk]==-1) {
        st[ny][nx][nk]=st[y][x][k]+1;
        q.push(ny);
        q.push(nx);
        q.push(nk);
      }
    }


  }

  REP(i,m) REP(j,n) if (s[i][j]=='G') {
    int best=-1;
    REP(k,4) {
      if(st[i][j][k]!=-1 && st[i][j][k]<inf) {
        if(best==-1 || best>st[i][j][k]) best=st[i][j][k];
      }
    }
    if(best==-1) {
      cout<<"impossible"<<endl;
    } else {
      cout<<best<<endl;
    }

  }
}
int main() {
  int t;cin>>t;REP(i,t) {
    cout<<"Case #"<<(i+1)<<": ";
    solve();
  }
}

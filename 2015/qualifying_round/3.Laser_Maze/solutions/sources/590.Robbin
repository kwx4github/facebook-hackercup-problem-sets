#include<queue>
#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int N = 105;

int n, m;

char map[N][N];

bool ban[N][N][4];

const int INF = 1000000000;

int dis[N][N][4];

int getDir(char ch) {
    if (ch == '^') {
        return 0;
    } else if (ch == '>') {
        return 1;
    } else if (ch == 'v') {
        return 2;
    } else {
        return 3;
    }
}

const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d", &n, &m);
        for (int i = 0; i < n; ++i) {
            scanf("%s", map[i]);
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                for (int t = 0; t < 4; ++t) {
                    ban[i][j][t] = false;
                    dis[i][j][t] = INF;
                }
            }
        }
        int sx, sy, ex, ey;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (map[i][j] == 'S') {
                    sx = i, sy = j;
                } else if (map[i][j] == 'G') {
                    ex = i, ey = j;
                } else if (map[i][j] == '<' || map[i][j] == '>' || map[i][j] == '^' || map[i][j] == 'v') {
                    int dir = getDir(map[i][j]);
                    for (int t = 0; t < 4; ++t) {
                        int tx = i, ty = j;
                        ban[tx][ty][t] = true;
                        while (true)  {
                            tx += dx[dir], ty += dy[dir];
                            if (tx < 0 || tx >= n || ty < 0 || ty >= m || (map[tx][ty] != 'S' && map[tx][ty] != 'G' && map[tx][ty] != '.')) {
                                break;
                            }
                            ban[tx][ty][t] = true;
                        }
                        dir = (dir + 1) % 4;
                    }
                } else if (map[i][j] == '#') {
                    for (int t = 0; t < 4; ++t) {
                        ban[i][j][t] = true;
                    }
                }
            }
        }
        queue<pair<pair<int, int>, int> > q;
        q.push(make_pair(make_pair(sx, sy), 0));
        dis[sx][sy][0] = 0;
        while (q.size()) {
            int x = q.front().first.first, y = q.front().first.second, t = q.front().second;
            q.pop();
            for (int d = 0; d < 4; ++d) {
                int tx = x + dx[d], ty = y + dy[d], tt = (t + 1) % 4;
                if (tx < 0 || tx >= n || ty < 0 || ty >= m || ban[tx][ty][tt]) {
                    continue;
                }
                if (dis[tx][ty][tt] > dis[x][y][t] + 1) {
                    dis[tx][ty][tt] = dis[x][y][t] + 1;
                    q.push(make_pair(make_pair(tx, ty), tt));
                }
            }
        }
        int ans = INF;
        for (int i = 0; i < 4; ++i) {
            ans = min(ans, dis[ex][ey][i]);
        }
        static int id = 0;
        printf("Case #%d: ", ++id);
        if (ans == INF) {
            printf("impossible\n");
        } else {
            printf("%d\n", ans);
        }
    }
    return 0;
}

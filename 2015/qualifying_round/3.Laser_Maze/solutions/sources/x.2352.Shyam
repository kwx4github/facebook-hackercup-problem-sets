#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct node{
	
	char type;
	int index;
	bool in_q;
	int min_dist;
	vector<node*> nbours;

	node(char c, int i){
		if(c=='S' || c=='G' || c=='.') type = '.';
		else type = '#';
		index = i;
		in_q = false;
		min_dist = 1000000000;
	}
};

void print_matrix(vector<vector<char> > &v, int m, int n){
	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			cout<<v[i][j]<<" ";
		}
		cout<<endl;
	}
}

void condition(vector<vector<char> > &a, int m, int n){
	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			if(a[i][j]=='^'){
				for(int k=i-1; k>=0; k--){
					if(a[k][j]=='.'||a[k][j]=='S'||a[k][j]=='G') a[k][j] = '#';
					else break;
				}
			}
			if(a[i][j]=='>'){
				for(int k=j+1; j<n; k++){
					if(a[i][k]=='.'||a[i][k]=='S'||a[i][k]=='G') a[i][k] = '#';
					else  break;
				}
			}
			if(a[i][j]=='v'){
				for(int k=i+1; k<m; k++){
					if(a[k][j]=='.'||a[k][j]=='S'||a[k][j]=='G') a[k][j] = '#';
					else break;
				}
			}
			if(a[i][j]=='<'){
				for(int k=j-1; k>=0; k--){
					if(a[i][k]=='.'||a[i][k]=='S'||a[i][k]=='G') a[i][k] = '#';
                                        else  break;
                                }
                        }
		}
	}
}

int main(){

	int t;
	cin>>t;
	char dir[] = {'^','>','v','<'};
	
	for(int p=1; p<=t; p++){
		int m,n;
		cin>>m>>n;
		vector<vector<char> > a(m,vector<char>(n));
		vector<vector<char> > b(m,vector<char>(n));
		vector<vector<char> > c(m,vector<char>(n));
		vector<vector<char> > d(m,vector<char>(n));

		int s1,s2,e1,e2;

		for(int i=0; i<m; i++){
			for(int j=0; j<n; j++){
				char c1;
				cin>>c1;
				if(c1=='.' || c1=='S' || c1=='G' || c1=='#'){
					if(c1=='S'){
						s1 = i;
						s2 = j;
					}
					if(c1=='G'){
						e1 = i;
						e2 = j;
					}
					a[i][j] = c1;
					b[i][j] = c1;
					c[i][j] = c1;
					d[i][j] = c1;
				}
				else{
					int index;
					for(int k=0; k<4; k++){
						if(dir[k]==c1) index = k;
					}
					a[i][j] = dir[index];	
					b[i][j] = dir[(index+1)%4];
					c[i][j] = dir[(index+2)%4];
					d[i][j] = dir[(index+3)%4];
				}
			}
		}
		
		condition(a,m,n);
		condition(b,m,n);	
		condition(c,m,n);	
		condition(d,m,n);

/*
		print_matrix(a,m,n);
		print_matrix(b,m,n);
		print_matrix(c,m,n);
		print_matrix(d,m,n);
*/

		vector<node*> v(4*m*n);
		for(int i=0; i<m*n; i++){
			v[i] = new node(a[i/n][i%n],i);
			v[i+m*n] = new node(b[i/n][i%n],i+m*n);
			v[i+2*m*n] = new node(c[i/n][i%n],i+2*m*n);
			v[i+3*m*n] = new node(d[i/n][i%n],i+3*m*n);
		}

		for(int i=0; i<4*m*n; i++){

			if(v[i]->type == '#' && i != (s1*n+s2)) continue;
			int mode = i/(m*n),x=(i%(m*n))/n, y=(i%(m*n))%n;

			if((x-1)>=0 && v[(i+m*n-n)%(4*m*n)]->type=='.'){
				v[i]->nbours.push_back(v[(i+m*n-n)%(4*m*n)]);
			}
			if((x+1)<m && v[(i+m*n+n)%(4*m*n)]->type=='.'){
                                v[i]->nbours.push_back(v[(i+m*n+n)%(4*m*n)]);
                        }
			if((y-1)>=0 && v[(i+m*n-1)%(4*m*n)]->type=='.'){
                                v[i]->nbours.push_back(v[(i+m*n-1)%(4*m*n)]);
                        }
			if((y+1)<n && v[(i+m*n+1)%(4*m*n)]->type=='.'){
                                v[i]->nbours.push_back(v[(i+m*n+1)%(4*m*n)]);
                        }
		}
		
		queue<node*> q;
		q.push(v[s1*n+s2]);
		v[s1*n+s2]->in_q = true;
		v[s1*n+s2]->min_dist = 0;
		while(!q.empty()){
			node* curr = q.front();
			// cout<<"curr node: "<<curr->type<<" "<<curr->index<<endl;
			if((curr->index-e1*n-e2)%(m*n)==0){
				cout<<"Case #"<<p<<": "<<curr->min_dist<<endl;
				break;
			}
			q.pop();
			for(int i=0; i<curr->nbours.size(); i++){
				if(!curr->nbours[i]->in_q){
					curr->nbours[i]->min_dist = curr->min_dist+1;
					q.push(curr->nbours[i]);
					curr->nbours[i]->in_q = true;
				}
			}
		}
		if(q.empty()){
			cout<<"Case #"<<p<<": impossible"<<endl;
		}
	}
	return 0;
}

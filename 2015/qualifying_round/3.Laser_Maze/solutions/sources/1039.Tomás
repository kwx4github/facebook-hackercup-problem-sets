#include "bits/stdc++.h"

#define maxn 105
using namespace std;

typedef pair < int, int > ii;

int x[] = { -1, 0, 1, 0 };
int y[] = { 0, 1, 0, -1 };
char dir[] = { '^', '>', 'v', '<' };

int v[ maxn ][ maxn ];

char a[ maxn ][ maxn ];
char ma[ 4 ][ maxn ][ maxn ];
ii s, g;
queue < ii > Q;

void generate( int m, int n )
{
  for( int k = 0; k < 4; k++ )
  {
    memcpy( ma[ k ], a, sizeof a );
    
    for( int i = 0; i < m; i++ )
      for( int j = 0; j < n; j++ )
      {
        int mov = -1;
        for( int l = 0; l < 4; l++ )
          if( a[ i ][ j ] == dir[ l ] )
            mov = l;
        
        if( mov == -1 ) continue;
        
        int tx = i, ty = j;
        a[ tx ][ ty ] = '.';
        while( tx < m && tx > -1 && ty < n && ty > -1 )
        {
          if( a[ tx ][ ty ] != '.' )
            break;
          
          ma[ k ][ tx ][ ty ] = '#';
          tx += x[ mov ], ty += y[ mov ];
        }
        
        a[ i ][ j ] = dir[ ( mov + 1 ) % 4 ]; 
      }
    
  }
}

int bfs( int m, int n )
{
  memset( v, -1, sizeof v );
  
  while( ! Q.empty() )  Q.pop();

  Q.push( make_pair( s.first, s.second ) );
  v[ s.first ][ s.second ] = 0;
  
  while( ! Q.empty() )
  {
    auto p = Q.front();
    //printf( "%d %d %d\n", v[ p.first ][ p.second ], p.first, p.second );
    
    for( int i = 0; i < 4; i++ )
    {
      int t = v[ p.first ][ p.second ] + 1;
      int nx = p.first + x[ i ], ny = p.second + y[ i ];
      
      if( nx < 0 || nx > m || ny < 0 || ny > n )
        continue;
      
      if( ma[ t % 4 ][ nx ][ ny ] != '.' )
        continue;
      
      if( nx == g.first && ny == g.second )
        return t;
      
      v[ nx ][ ny ] = t;
      ma[ t % 4 ][ nx ][ ny ] = '#';
      Q.push( make_pair( nx, ny ) );
    }
    
    Q.pop();
  }
  return -1;
}
         
main()
{
  int test;
  cin >> test;
  
  for( int t = 1; t <= test; t++ )
  {
    int n, m;
    scanf( "%d %d\n", &m, &n );
    
    for( int i = 0; i < m; i++ )
    {
      gets( a[ i ] );
      for( int j = 0; j < n; j++ )
      {
        if( a[ i ][ j ] == 'S' )
          s = make_pair( i, j );
        if( a[ i ][ j ] == 'G' )
          g = make_pair( i, j );
        if( a[ i ][ j ] == 'S' || a[ i ][ j ] == 'G' )
          a[ i ][ j ] = '.';
      }
    }
    
    generate( m, n );
    
    int ans = bfs( m-1, n-1 );
    
    string s = "impossible";
    if( ans != -1 )
      s = to_string( ans );
      
    printf( "Case #%d: %s\n", t, s.c_str() );
  }
}

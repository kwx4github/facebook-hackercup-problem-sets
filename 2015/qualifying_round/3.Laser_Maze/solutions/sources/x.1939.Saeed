#include <cstdio>
#include <queue>
using namespace std;

char M[105][105];
int mark[105][105][4];
int turret[105][105];

struct state
{
    int x, y, level;

    state(int X, int Y, int L) { x = X; y = Y; level = L; }
};

void process(queue<state>& q, int x, int y, int level, int m, int n)
{
    int d = level % 4;
    if ( x < m && x >= 0 && y < n && y >= 0 && M[x][y] == '.' )
    {
        if ( (turret[x][y] & (1 << d)) == 0 && !mark[x][y][d] )
        {
            q.push( state(x, y, level) );
            mark[x][y][d] = 1;
        }
    }
}

int solve(int m, int n, int sx, int sy, int gx, int gy)
{
    for( int i=0; i<m; i++ )
        for( int j=0; j<n; j++ )
            for( int k=0; k<4; k++ )
                mark[i][j][k] = 0;
    queue<state> q;
    q.push( state(sx, sy, 0) );
    mark[sx][sy][0] = 1;

    while( !q.empty() )
    {
        state s = q.front();
        q.pop();

        if ( s.x == gx && s.y == gy ) return s.level;

        process(q, s.x + 1, s.y, s.level + 1, m, n); // down
        process(q, s.x - 1, s.y, s.level + 1, m, n); // up
        process(q, s.x, s.y + 1, s.level + 1, m, n); // left
        process(q, s.x, s.y - 1, s.level + 1, m, n); // right
    }
    return -1;
}

int main()
{
    int t, T;
    scanf("%d", &T);
    for( t=1; t<=T; t++ )
    {
        int m, n;
        scanf("%d %d", &m, &n);
        for( int i=0; i<m; i++ )
            scanf("%s", M[i]);

        int sx, sy, gx, gy;
        for( int i=0; i<m; i++ )
            for( int j=0; j<n; j++ )
            {
                turret[i][j] = 0;
                if ( M[i][j] == 'S' ) { sx = i; sy = j; M[i][j] = '.'; }
                else if ( M[i][j] == 'G' ) { gx = i; gy = j; M[i][j] = '.'; }
            }

        for( int i=0; i<m; i++ )
            for( int j=0; j<n; j++ )
            {
                if ( M[i][j] == '.' || M[i][j] == '#' ) continue;
                int d = M[i][j] == '>' ? 0 :
                    M[i][j] == '^' ? 1 :
                    M[i][j] == '<' ? 2 :
                    3;
                for( int y=j+1; y<n; y++ ) if ( M[i][y] == '.' ) turret[i][y] |= (1 << d);
                for( int x=i+1; x<m; x++ ) if ( M[x][j] == '.' ) turret[x][j] |= (1 << ((d + 1) % 4));
                for( int y=j-1; y>=0; y-- ) if ( M[i][y] == '.' ) turret[i][y] |= (1 << ((d + 2) % 4));
                for( int x=i-1; x>=0; x-- ) if ( M[x][j] == '.' ) turret[x][j] |= (1 << ((d + 3) % 4));
            }

        int ans = solve(m, n, sx, sy, gx, gy);
        printf("Case #%d: ", t);
        if ( ans == -1 ) puts("impossible");
        else printf("%d\n", ans);
    }
    return 0;
}


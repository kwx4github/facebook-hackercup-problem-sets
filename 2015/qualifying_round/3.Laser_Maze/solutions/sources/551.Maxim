#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <map>
#include <queue>
#include <algorithm>
#include <cassert>

using namespace std;

void Fill(const vector<string> &r, vector<vector<bool>> &T, int x, int y, int dy, int dx) {
  do {
    x += dx;
    y += dy;
    if (!(x >= 0 && x < r.size() && y >= 0 && y < r[0].size()))
      break;
    if (r[x][y] != '.' && r[x][y] != 'S' && r[x][y] != 'G')
      break;
    T[x][y] = false;
  } while (true);
}

int GP, GC, GF;
int main() {
  cin.sync_with_stdio(false);
  cin.tie(0);

  int T;
  cin >> T;
  for (int TT = 1; TT <= T; TT++) {
    int M, N;
    cin >> M >> N;
    vector<string> r(M);
    for (int i = 0; i < M; i++)
      cin >> r[i];
    vector<vector<vector<bool>>> T(4, vector<vector<bool>>(M, vector<bool>(N, true)));
    vector<vector<vector<int32_t>>> L(4, vector<vector<int32_t>>(M, vector<int32_t>(N, INT32_MAX)));
    pair<int, int> S, G;
    for (size_t i = 0; i < M; i++) {
      for (size_t k = 0; k < N; k++) {
        if (r[i][k] == 'S') {
          S.first = i;
          S.second = k;
          continue;
        }
        if (r[i][k] == 'G') {
          G.first = i;
          G.second = k;
          continue;
        }
        if (r[i][k] == '.')
          continue;
        T[0][i][k] = false;
        T[1][i][k] = false;
        T[2][i][k] = false;
        T[3][i][k] = false;
        if (r[i][k] == '#') {
          continue;
        }
        switch(r[i][k]) {
        case '<':
          Fill(r, T[0], i, k, -1, 0);
          Fill(r, T[1], i, k, 0, -1);
          Fill(r, T[2], i, k, 1, 0);
          Fill(r, T[3], i, k, 0, 1);
          break;
        case '^':
          Fill(r, T[0], i, k, 0, -1);
          Fill(r, T[1], i, k, 1, 0);
          Fill(r, T[2], i, k, 0, 1);
          Fill(r, T[3], i, k, -1, 0);
          break;
        case '>':
          Fill(r, T[0], i, k, 1, 0);
          Fill(r, T[1], i, k, 0, 1);
          Fill(r, T[2], i, k, -1, 0);
          Fill(r, T[3], i, k, 0, -1);
          break;
        case 'v':
          Fill(r, T[0], i, k, 0, 1);
          Fill(r, T[1], i, k, -1, 0);
          Fill(r, T[2], i, k, 0, -1);
          Fill(r, T[3], i, k, 1, 0);
          break;
        default:
          assert(false);
        }
      }
    }
    queue<pair<pair<int, int>, pair<int, int>>> q; // x, y, turn, len
    q.push(make_pair(S, make_pair(0, 0)));
    while (q.size()) {
      auto pp = q.front();
      q.pop();
      int next_turn = (pp.second.first + 1) % 4;
      int len = pp.second.second + 1;
      int i = pp.first.first;
      int k = pp.first.second;
#define CHECK(x, y) \
      if (x >= 0 && y >= 0 && x < r.size() && y < r[0].size() && T[next_turn][x][y]) { \
         if (L[next_turn][x][y] > len) {       \
           L[next_turn][x][y] = len;           \
           q.push(make_pair(make_pair(x, y), make_pair(next_turn, len))); \
         }                                     \
      }
      CHECK(i + 1, k);
      CHECK(i - 1, k);
      CHECK(i, k + 1);
      CHECK(i, k - 1);
    }
    int a = min(L[0][G.first][G.second], L[1][G.first][G.second]);
    int b = min(L[2][G.first][G.second], L[3][G.first][G.second]);
    a = min(a, b);
    if (a == INT32_MAX)
      cout << "Case #" << TT << ": impossible" << endl;
    else
      cout << "Case #" << TT << ": " << a << endl;
  }
  return 0;
}

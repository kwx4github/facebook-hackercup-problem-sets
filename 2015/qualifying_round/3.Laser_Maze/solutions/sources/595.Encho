#include <iostream>
#include <stdio.h>
#include <string.h>
using namespace std;

int t;
int n,m;
int sx,sy,gx,gy;
char grid[111][111];
bool DeadState[111][111][4];

void FillRight(int x,int y,int state)
{
    int i;

    for (i=y;i<=m;i++)
    {
        if (grid[x][i]!='.')
        return;

        DeadState[x][i][state]=true;
    }

    return;
}

void FillDown(int x,int y,int state)
{
    int i;

    for (i=x;i<=n;i++)
    {
        if (grid[i][y]!='.')
        return;

        DeadState[i][y][state]=true;
    }

    return;
}

void FillLeft(int x,int y,int state)
{
    int i;

    for (i=y;i>=1;i--)
    {
        if (grid[x][i]!='.')
        return;

        DeadState[x][i][state]=true;
    }

    return;
}

void FillUp(int x,int y,int state)
{
    int i;

    for (i=x;i>=1;i--)
    {
        if (grid[i][y]!='.')
        return;

        DeadState[i][y][state]=true;
    }

    return;
}

pair< pair<int,int>,pair<int,int> > q[100001];
int qL;
bool TFO[111][111][4];

int ABS(int a)
{
    if (a<0)
    return -a;
    else
    return a;
}

int DISTANCE;

bool Okay(int X,int Y,int s)
{
    if (X<1 || X>n || Y<1 || Y>m)
    return false;
    if (grid[X][Y]!='.')
    return false;
    if (DeadState[X][Y][s])
    return false;
    if (TFO[X][Y][s])
    return false;

    return true;
}

void DoBFS()
{
    int uk=1;
    int X,Y,d,s;
    int i,j;

    memset(TFO,false,sizeof(TFO));

    DISTANCE=-1;

    qL=1;
    q[1]=make_pair(make_pair(sx,sy),make_pair(0,0));

    while(uk<=qL)
    {
        X=q[uk].first.first;
        Y=q[uk].first.second;
        s=q[uk].second.first;
        d=q[uk].second.second;

        if (X==gx && Y==gy)
        {
            DISTANCE=d;
            return;
        }

        for (i=X-1;i<=X+1;i++)
        {
            for (j=Y-1;j<=Y+1;j++)
            {
                if (ABS(i-X)+ABS(j-Y)==1)
                {
                    if (Okay(i,j,(s+1)%4))
                    {
                        TFO[i][j][ (s+1)%4 ]=true;

                        qL++;
                        q[qL]=make_pair(make_pair(i,j),make_pair((s+1)%4,d+1));
                    }
                }
            }
        }

        uk++;
    }

    return;
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("ans.txt","w",stdout);

    int test;
    int i,j;

    scanf("%d",&t);

    for (test=1;test<=t;test++)
    {
        memset(DeadState,false,sizeof(DeadState));

        scanf("%d %d",&n,&m);

        for (i=1;i<=n;i++)
        {
            scanf("%s",grid[i]+1);
        }

        for (i=1;i<=n;i++)
        {
            for (j=1;j<=m;j++)
            {
                if (grid[i][j]=='S')
                {
                    grid[i][j]='.';
                    sx=i;
                    sy=j;
                }

                if (grid[i][j]=='G')
                {
                    grid[i][j]='.';
                    gx=i;
                    gy=j;
                }
            }
        }

        for (i=1;i<=n;i++)
        {
            for (j=1;j<=m;j++)
            {
                if (grid[i][j]=='<')
                {
                    FillLeft(i,j-1,0);
                    FillUp(i-1,j,1);
                    FillRight(i,j+1,2);
                    FillDown(i+1,j,3);
                }

                if (grid[i][j]=='^')
                {
                    FillUp(i-1,j,0);
                    FillRight(i,j+1,1);
                    FillDown(i+1,j,2);
                    FillLeft(i,j-1,3);
                }

                if (grid[i][j]=='>')
                {
                    FillRight(i,j+1,0);
                    FillDown(i+1,j,1);
                    FillLeft(i,j-1,2);
                    FillUp(i-1,j,3);
                }

                if (grid[i][j]=='v')
                {
                    FillDown(i+1,j,0);
                    FillLeft(i,j-1,1);
                    FillUp(i-1,j,2);
                    FillRight(i,j+1,3);
                }
            }
        }

        DoBFS();

        printf("Case #%d: ",test);

        if (DISTANCE==-1)
        printf("impossible\n");
        else
        printf("%d\n",DISTANCE);
    }

    return 0;
}

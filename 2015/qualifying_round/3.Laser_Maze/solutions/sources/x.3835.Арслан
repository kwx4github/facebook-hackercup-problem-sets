#include <iostream>
#include <queue>
#include <tuple>
#include <algorithm>

using namespace std;

const int LIM = 101;

const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int t, n, m, d[LIM][LIM][4], x0, y0, xn, yn;
char g[LIM][LIM];
bool used[LIM][LIM][4], kill[LIM][LIM][4];
queue<tuple<int, int, int>> q;

int main() {
  ios_base::sync_with_stdio(false);
  cin >> t;
  for (int c = 1; c <= t; ++c) {
    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
        cin >> g[i][j];
        if (g[i][j] == 'S') {
          x0 = i;
          y0 = j;
        }
        if (g[i][j] == 'G') {
          xn = i;
          yn = j;
        }
        for (int k = 0; k < 4; ++k) {
          used[i][j][k] = false;
          kill[i][j][k] = false;
        }
      }
    }
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
        if (g[i][j] == '>') {
          for (int k = j; k < m; ++k) {
            kill[i][k][0] = true;
          }
          for (int k = i; k < n; ++k) {
            kill[k][j][1] = true;
          }
          for (int k = j; k >= 0; --k) {
            kill[i][k][2] = true;
          }
          for (int k = i; k >= 0; --k) {
            kill[k][j][3] = true;
          }
        } else if (g[i][j] == '<') {
          for (int k = j; k < m; ++k) {
            kill[i][k][2] = true;
          }
          for (int k = i; k < n; ++k) {
            kill[k][j][3] = true;
          }
          for (int k = j; k >= 0; --k) {
            kill[i][k][0] = true;
          }
          for (int k = i; k >= 0; --k) {
            kill[k][j][1] = true;
          }
        } else if (g[i][j] == '^') {
          for (int k = j; k < m; ++k) {
            kill[i][k][1] = true;
          }
          for (int k = i; k < n; ++k) {
            kill[k][j][2] = true;
          }
          for (int k = j; k >= 0; --k) {
            kill[i][k][3] = true;
          }
          for (int k = i; k >= 0; --k) {
            kill[k][j][0] = true;
          }
        } else if (g[i][j] == 'v') {
          for (int k = j; k < m; ++k) {
            kill[i][k][3] = true;
          }
          for (int k = i; k < n; ++k) {
            kill[k][j][0] = true;
          }
          for (int k = j; k >= 0; --k) {
            kill[i][k][1] = true;
          }
          for (int k = i; k >= 0; --k) {
            kill[k][j][2] = true;
          }
        }
      }
    }
    q.push(make_tuple(x0, y0, 0));
    d[x0][y0][0] = 0;
    used[x0][y0][0] = true;
    while (!q.empty()) {
      int x, y, s;
      tie(x, y, s) = q.front();
      q.pop();
      for (int k = 0; k < 4; ++k) {
        int x1 = x + dx[k], y1 = y + dy[k], s1 = (s + 1) % 4;
        if (x1 < 0 || x1 >= n || y1 < 0 || y1 >= m || used[x1][y1][s1] || kill[x1][y1][s1])
          continue;
        used[x1][y1][s1] = true;
        d[x1][y1][s1] = d[x][y][s] + 1;
        q.push(make_tuple(x1, y1, s1));
      }
    }
    cout << "Case #" << c << ": ";
    int ans = 1e9;
    for (int i = 0; i < 4; ++i) {
      if (used[xn][yn][i])
        ans = min(ans, d[xn][yn][i]);
    }
    if (ans == 1e9) {
      cout << "impossible" << endl;
    } else {
      cout << ans << endl;
    }
  }
  return 0;
}

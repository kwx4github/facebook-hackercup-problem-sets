import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;


public class LaserMaze {
	public static void main(String[] args) {
		try {
			Scanner in = new Scanner(new BufferedReader(new FileReader(new File("laser_maze.txt")), 256 << 10));
			BufferedWriter out = new BufferedWriter(new FileWriter(new File("output.txt")), 256 << 10);

			int testsNumber = in.nextInt();
			for (int testId = 1; testId <= testsNumber; testId++) {
				int m = in.nextInt(), n = in.nextInt();
				char[][] maze = new char[m][];
				for (int i = 0; i < m; i++)
					maze[i] = in.next().toCharArray();
				
				int maxSteps = n*m*Math.max(n, m);
				
				int step = 0;
				main:
				while (step < maxSteps) {
					step++;
					char[][] nextStepMaze = new char[m][n];
					// = clone maze and move turrets
					for (int i = 0; i < m; i++)
						for (int j = 0; j < n; j++) {
							if (maze[i][j] == '#')
								nextStepMaze[i][j] = '#';
							else if (maze[i][j] == '^')
								nextStepMaze[i][j] = '>';
							else if (maze[i][j] == '>')
								nextStepMaze[i][j] = 'v';
							else if (maze[i][j] == 'v')
								nextStepMaze[i][j] = '<';
							else if (maze[i][j] == '<')
								nextStepMaze[i][j] = '^';
							else
								nextStepMaze[i][j] = '.';
						}
					
					// - make steps
					for (int i = 0; i < m; i++)
						for (int j = 0; j < n; j++)
							if (maze[i][j] == 'S') {
								if (i-1 >= 0 && nextStepMaze[i-1][j] == '.') nextStepMaze[i-1][j] = 'S';
								if (i+1 < m && nextStepMaze[i+1][j] == '.') nextStepMaze[i+1][j] = 'S';
								if (j-1 >= 0 && nextStepMaze[i][j-1] == '.') nextStepMaze[i][j-1] = 'S';
								if (j+1 < n && nextStepMaze[i][j+1] == '.') nextStepMaze[i][j+1] = 'S';
							}
					
					// - shoot
					for (int i = 0; i < m; i++)
						for (int j = 0; j < n; j++) {
							if (nextStepMaze[i][j] == '^') {
								for (int q = i-1; q >= 0; q--)
									if (nextStepMaze[q][j] == '.' || nextStepMaze[q][j] == 'S')
										nextStepMaze[q][j] = '.';
									else
										break;
							}
							else if (nextStepMaze[i][j] == '>') {
								for (int q = j+1; q < n; q++)
									if (nextStepMaze[i][q] == '.' || nextStepMaze[i][q] == 'S')
										nextStepMaze[i][q] = '.';
									else
										break;
							}
							else if (nextStepMaze[i][j] == 'v') {
								for (int q = i+1; q < m; q++)
									if (nextStepMaze[q][j] == '.' || nextStepMaze[q][j] == 'S')
										nextStepMaze[q][j] = '.';
									else
										break;
							}
							else if (nextStepMaze[i][j] == '<') {
								for (int q = j-1; q >= 0; q--)
									if (nextStepMaze[i][q] == '.' || nextStepMaze[i][q] == 'S')
										nextStepMaze[i][q] = '.';
									else
										break;			
							}
						}
					
					// - check and copy goals
					for (int i = 0; i < m; i++)
						for (int j = 0; j < n; j++) {
							if (maze[i][j] == 'G') {
								if (nextStepMaze[i][j] == 'S')
									break main;
								nextStepMaze[i][j] = 'G';
							}
						}					
					maze = nextStepMaze;
				}
				
				out.append("Case #" + testId + ": ");
				out.append((step == maxSteps ? "impossible" : step) + "\n");
			}
			in.close();
			out.close();
		}
		catch (RuntimeException rte) {
			throw rte;
		}
		catch (Exception e) {
			System.err.println("Error:" + e.getMessage());
		}
	}

}

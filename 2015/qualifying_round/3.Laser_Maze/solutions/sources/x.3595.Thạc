#include <stdio.h>
#include <stdlib.h>

typedef struct {
	int x;
	int y;
	int direction;
} LASER;

LASER* ls;
int ls_count;
int t;
int m, n;
int sx, sy, gx, gy;
char map[101][101];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

int qx[50000], qy[50000], ql[50000];
int top, bot;

void push(int x, int y, int l) {
	if (l > m * n * 5) return;
	qx[bot] = x;
	qy[bot] = y;
	ql[bot] = l;
	bot = (bot + 1) % 50000;
}

int pop(int *x, int *y, int *l) {
	*x = qx[top];
	*y = qy[top];
	*l = ql[top];
	top = (top + 1) % 50000;
}

void init() {
	top = 0;
	bot = 0;
	push(sx, sy, 0);
}


char can_be_shooted(int x, int y, int i, int l) {
	int dr = (ls[i].direction + l) % 4;
	
	if (ls[i].x == x) {
		if (dx[dr] != 0) return 0;
		if (((y - ls[i].y) / dy[dr]) < 0) return 0;
	} else {
		if (dy[dr] != 0) return 0;
		if (((x - ls[i].x) / dx[dr]) < 0) return 0;
	}

	int cx = ls[i].x + dx[dr];
	int cy = ls[i].y + dy[dr];
	
	while (0 <= cx && cx < m && 0 <= cy && cy < n) {
		if (cx == x && cy == y) return 1;
		if (map[cx][cy] == 1) return 0;
		cx += dx[dr];
		cy += dy[dr];
	}
	return 0;
}


char can_move_to(int x, int y, int l) {
	if (x < 0 || x >= m || y < 0 || y >= n) return 0;
	if (map[x][y] == 1) return 0;
	int i;
	for (i = 0; i < ls_count; i++) {
		if (ls[i].x == x || ls[i].y == y) {
			if(can_be_shooted(x, y, i, l))
				return 0;
		}
	}
	return 1;
}

void solve(int t) {
	if (sx == gx && sy == gy) {
		printf("Case #%d: 0\n", t);
	}

	init();
	int cx, cy, cl;
	while (top != bot) {
		pop(&cx, &cy, &cl);
		int i;
		for (i = 0; i < 4; i++) {
			int nx = cx + dx[i];
			int ny = cy + dy[i];
			int nl = cl + 1;
			
			if (can_move_to(nx, ny, nl)) {
				if (nx == gx && ny == gy) {
					printf("Case #%d: %d\n", t, nl);
					return;
				}	
				push(nx, ny, nl);
			}
		}
	}
	printf("Case #%d: impossible\n", t);
}


int main() {
	scanf("%d", &t);
	int i;

	for (i = 0; i < t; i++) {
		scanf("%d %d\n", &m, &n);
		int x, y;
		for (x = 0; x < m; x++)
			for (y = 0; y < n; y++)
				map[x][y] = 0;

		ls = (LASER*)malloc(sizeof(LASER) * m * n);
		ls_count = 0;
		for (x = 0; x < m; x++) {
			char line[100];
			scanf("%s\n", line);
			
			for (y = 0; y < n; y++) {
				char c = line[y];
				if (c == '#') map[x][y] = 1;
				else if (c == 'S'){
					sx = x;
					sy = y;
				} else if (c == 'G'){
					gx = x;
					gy = y;
				} else if (c != '.')
				{
					map[x][y] = 1;
					ls[ls_count].x = x;
					ls[ls_count].y = y;
					if (c == '^'){
						ls[ls_count].direction = 0;
					} else if (c == '>'){
						ls[ls_count].direction = 1;
					} else if (c == 'v'){
						ls[ls_count].direction = 2;
					} else {
						ls[ls_count].direction = 3;
					}
					ls_count++;
				}
			}
		}

		solve(i+1);
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <utility>
#include <map>
#include <cstdio>
#include <cstdlib>

using namespace std;

typedef pair<int, int> ii;
typedef pair<ii, int> iii;

int dir[4][2] = { { 1, 0 }, { 0, -1 }, { -1, 0 }, { 0, 1 } };
int n, m, tc, res, idx;
int sx, sy, gx, gy, x, y, s, tx, ty, ts;
int dist[110][110][4];
string str;
vector<string> mat;
map<char, int> mp;

bool inGrid(int a, int b) {
	if (a >= 0 && a < n && b >= 0 && b < m)	return true;
	return false;
}

bool check(int a, int b, int c) {
	for (int I = 0; I < 4; ++I) {
		for (int ta = a, tb = b; inGrid(ta, tb); ta += dir[I][0], tb += dir[I][1]) {
			if (mat[ta][tb] != '.')	{
				if (mat[ta][tb] == '#')	break;
				idx = (mp[mat[ta][tb]] + c) % 4;
				if (idx == I)	return false;
				break;
			}
		}
	}
	return true;
}

int main() {
	// freopen("C:\\Users\\Mohammad Reza\\Desktop\\HackerCup2015\\C.in", "r", stdin);
	// freopen("C:\\Users\\Mohammad Reza\\Desktop\\HackerCup2015\\C.out", "w", stdout);
	mp['^'] = 0, mp['>'] = 1, mp['v'] = 2, mp['<'] = 3;
	cin >> tc;
	for (int t = 1; t <= tc; ++t) {
		mat.clear();	res = -1;
		memset(dist, -1, sizeof dist);
		cin >> n >> m;
		for (int I = 0; I < n; ++I) {
			cin >> str;
			mat.push_back(str);
			for (int J = 0; J < m; ++J) {
				if (str[J] == 'S')	sx = I, sy = J, mat[I][J] = '.';
				if (str[J] == 'G')	gx = I, gy = J, mat[I][J] = '.';
			}
		}
		queue<iii> q;
		q.push(iii(ii(sx, sy), 0));	dist[sx][sy][0] = 0;
		while (!q.empty()) {
			x = q.front().first.first, y = q.front().first.second, s = q.front().second;	q.pop();
			if (x == gx && y == gy) {
				res = dist[x][y][s];
				break;
			}
			ts = (s + 1) % 4;
			for (int I = 0; I < 4; ++I) {
				tx = x + dir[I][0], ty = y + dir[I][1];
				if (inGrid(tx, ty) && dist[tx][ty][ts] == -1 && mat[tx][ty] == '.' && check(tx, ty, ts)) {
					dist[tx][ty][ts] = dist[x][y][s] + 1;
					q.push(iii(ii(tx, ty), ts));
				}
			}
		}
		cout << "Case #" << t << ": ";
		if (res != -1)	cout << res << endl;
		else            cout << "impossible" << endl;
	}
	return 0;
}
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <climits>
using namespace std;

int DP[100][100][4];
int marked[100][100][4];

void init() {
	for (int i = 0; i < 100; i++)
	for (int j = 0; j < 100; j++)
	for (int k = 0; k < 4; k++) {
		DP[i][j][k] = -1;
		marked[i][j][k] = -1;
	}
}

bool isSafe(vector<string> &m, int sr, int sc, int t) {

	for (int i = sr; i < m.size(); i++) {
		if (m[i][sc] == '.' || m[i][sc] == 'G' || m[i][sc] == 'S') continue;
		if (m[i][sc] == '#') break;
		if (m[i][sc] == '^' && t == 0) return false;
		if (m[i][sc] == '<' && t == 1) return false;
		if (m[i][sc] == 'v' && t == 2) return false;
		if (m[i][sc] == '>' && t == 3) return false;
		break;
	}
	for (int i = sr; i >= 0; i--) {
		if (m[i][sc] == '.' || m[i][sc] == 'G' || m[i][sc] == 'S') continue;
		if (m[i][sc] == '#') break;
		if (m[i][sc] == 'v' && t == 0) return false;
		if (m[i][sc] == '>' && t == 1) return false;
		if (m[i][sc] == '^' && t == 2) return false;
		if (m[i][sc] == '<' && t == 3) return false;
		break;
	}

	for (int j = sc; j < m[0].size(); j++) {
		if (m[sr][j] == '.' || m[sr][j] == 'G' || m[sr][j] == 'S') continue;
		if (m[sr][j] == '#') break;
		if (m[sr][j] == '<' && t == 0) return false;
		if (m[sr][j] == 'v' && t == 1) return false;
		if (m[sr][j] == '>' && t == 2) return false;
		if (m[sr][j] == '^' && t == 3) return false;
		break;
	}

	for (int j = sc; j >= 0; j--) {
		if (m[sr][j] == '.' || m[sr][j] == 'G' || m[sr][j] == 'S') continue;
		if (m[sr][j] == '#') break;
		if (m[sr][j] == '>' && t == 0) return false;
		if (m[sr][j] == '^' && t == 1) return false;
		if (m[sr][j] == '<' && t == 2) return false;
		if (m[sr][j] == 'v' && t == 3) return false;
		break;
	}

	return true;
}

int h(vector<string> &m, int i, int sr, int sc, int turn) {
	if (DP[sr][sc][turn] != -1) 
		return DP[sr][sc][turn];

	if (marked[sr][sc][turn] == -1) marked[sr][sc][turn] = i;
	else if (i > marked[sr][sc][turn]) {
		return 50000;
	}

	if (m[sr][sc] == 'G') return DP[sr][sc][turn] = 0;

	//right
	int right = 50000;
	if (sc != m[0].size() - 1 && m[sr][sc + 1] != '#' && m[sr][sc + 1] != '<' && m[sr][sc + 1] != '^'&& m[sr][sc + 1] != '>'
		&& m[sr][sc + 1] != 'v'&& isSafe(m, sr, sc + 1, (turn + 1) % 4)) {
		right = h(m, i + 1, sr, sc + 1, (turn + 1) % 4);
	}

	//down
	int down = 50000;
	if (sr != m.size() - 1 && m[sr + 1][sc] != '#' && m[sr + 1][sc] != '<' && m[sr + 1][sc] != '^'&& m[sr + 1][sc] != '>'
		&& m[sr + 1][sc] != 'v' && isSafe(m, sr + 1, sc, (turn + 1) % 4)) {
		down = h(m, i + 1, sr + 1, sc, (turn + 1) % 4);
	}

	//up
	int up = 50000;
	if (sr != 0 && m[sr - 1][sc] != '#' && m[sr - 1][sc] != '<' && m[sr - 1][sc] != '^'&& m[sr - 1][sc] != '>'
		&& m[sr - 1][sc] != 'v' && isSafe(m, sr - 1, sc, (turn + 1) % 4)) {
		up = h(m, i+1, sr - 1, sc, (turn + 1) % 4);
	}

	

	//left
	int left = 50000;
	if (sc != 0 && m[sr][sc - 1] != '#' && m[sr][sc - 1] != '<' && m[sr][sc - 1] != '^' && m[sr][sc - 1] != '>'
		&& m[sr][sc - 1] != 'v' && isSafe(m, sr, sc - 1, (turn + 1) % 4)) {
		left = h(m, i+1, sr, sc - 1, (turn + 1) % 4);
	}

	int ans = min(min(up, down), min(left, right));
	return DP[sr][sc][turn] = ans + 1;
}


int main() {
	ofstream out("LM.txt");
	int T;
	cin >> T;
	for (int idx = 1; idx <= T; idx++) {
		int M, N;
		cin >> M >> N;
		vector<string> m(M);
		for (int i = 0; i < M; i++) cin >> m[i];
		init();
		int sr, sc;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (m[i][j] == 'S'){
					sr = i; sc = j;
				}
			}
		}

		int moves = h(m, 0, sr, sc, 0);
		
		if (moves > 40000)
			out << "Case #" << idx << ": impossible\n";
		else
			out << "Case #" << idx << ": " << moves << endl;
	}
}
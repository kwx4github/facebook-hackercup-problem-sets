import java.util.HashSet;
import java.util.Scanner;
import java.util.StringTokenizer;


public class FHCLazerMaze {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int T = Integer.parseInt(scanner.nextLine());
		for (int K = 1; K <= T; K++) {
			System.out.print("Case #" + K + ": ");
			StringTokenizer st = new StringTokenizer(scanner.nextLine());
			int H = Integer.parseInt(st.nextToken());
			int W = Integer.parseInt(st.nextToken());
			int[][] F = new int[W][H];
			int Sx = 0;
			int Sy = 0;
			for (int y = 0; y < H; y++) {
				char[] C = scanner.nextLine().toCharArray();
				for (int x = 0; x < W; x++) {
					char c = C[x];
					if (c == '^') {
						F[x][y] = 0;
					} else if (c == '>') {
						F[x][y] = 1;
					} else if (c == 'v') {
						F[x][y] = 2;
					} else if (c == '<') {
						F[x][y] = 3;
					} else if (c == '#') {
						F[x][y] = 4;
					} else if (c == '.') {
						F[x][y] = 5;
					} else if (c == 'S') {
						F[x][y] = 6;
						Sx = x;
						Sy = y;
					} else if (c == 'G') {
						F[x][y] = 7;
					}
				}
			}
			class Trial {
				
				int x, y, t;
				
				Trial(int x, int y, int t) {
					this.x = x;
					this.y = y;
					this.t = t;
				}
				
				@Override
				public boolean equals(Object obj) {
					if (obj instanceof Trial) {
						Trial trial = (Trial) obj;
						return x == trial.x && y == trial.y && t == trial.t;
					}
					return false;
				}
				
				@Override
				public int hashCode() {
					return x+y*200+t*40000;
				}
				
			}
			HashSet<Trial> trials = new HashSet<Trial>();
			HashSet<Trial> graveyard = new HashSet<Trial>();
			trials.add(new Trial(Sx, Sy, 0));
			boolean success = false;
			int time = 0;
			P: while (trials.size() > 0) {
				time++;
				HashSet<Trial> newTrials = new HashSet<Trial>();
				for (Trial trial : trials) {
					int t = trial.t+1;
					if (t == 4) {
						t = 0;
					}
					for (int i = 0; i < 4; i++) {
						int x, y;
						if (i == 0) {
							x = trial.x-1;
							y = trial.y;
						} else if (i == 1) {
							x = trial.x+1;
							y = trial.y;
						} else if (i == 2) {
							x = trial.x;
							y = trial.y-1;
						} else {
							x = trial.x;
							y = trial.y+1;
						}
						if (x >= 0 && x < W && y >= 0 && y < H) {
							int f = F[x][y];
							if (f >= 5) {
								Trial newTrial = new Trial(x, y, t);
								if (!(trials.contains(newTrial) || graveyard.contains(newTrial))) {
									boolean safe = true;
									for (int x2 = x-1; x2 >= 0; x2--) {
										int f2 = F[x2][y];
										if (f2 == 4) {
											break;
										} else if (f2 < 4) {
											int d = f2+t;
											if (d >= 4) {
												d -= 4;
											}
											if (d == 1) {
												safe = false;
												break;
											}
										}
									}
									if (safe) {
										for (int x2 = x+1; x2 < W; x2++) {
											int f2 = F[x2][y];
											if (f2 == 4) {
												break;
											} else if (f2 < 4) {
												int d = f2+t;
												if (d >= 4) {
													d -= 4;
												}
												if (d == 3) {
													safe = false;
													break;
												}
											}
										}
										if (safe) {
											for (int y2 = y-1; y2 >= 0; y2--) {
												int f2 = F[x][y2];
												if (f2 == 4) {
													break;
												} else if (f2 < 4) {
													int d = f2+t;
													if (d >= 4) {
														d -= 4;
													}
													if (d == 2) {
														safe = false;
														break;
													}
												}
											}
											if (safe) {
												for (int y2 = y+1; y2 < H; y2++) {
													int f2 = F[x][y2];
													if (f2 == 4) {
														break;
													} else if (f2 < 4) {
														int d = f2+t;
														if (d >= 4) {
															d -= 4;
														}
														if (d == 0) {
															safe = false;
															break;
														}
													}
												}
											}
										}
									}
									if (safe) {
										if (f == 7) {
											success = true;
											break P;
										}
										newTrials.add(newTrial);
									}
								}
							}
						}
					}
				}
				graveyard.addAll(trials);
				trials = newTrials;
			}
			System.out.println(success?time:"impossible");
		}
		scanner.close();
	}
	
}

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <cstdlib>
#include <queue>
#include <set>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <bitset>
#include <sstream>
#include <cassert>

using namespace std;

bool f[100][100][4], used[100][100][4];
int d[100][100][4];
char dir[] = {'<', '^', '>', 'v'};

int main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	int T;
	cin >> T;
	for (int t = 0; t < T; ++t) {
		memset(f, true, 100 * 100 * 4 * sizeof(bool));
		memset(used, false, 100 * 100 * 4 * sizeof(bool));
		memset(d, -1, 100 * 100 * 4 * sizeof(int));
		int n, m;
		cin >> n >> m;
		vector<string> s(n);
		for (int i = 0; i < n; ++i)
			cin >> s[i];
		int x0, y0, x1, y1;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (s[i][j] == 'S')
					x0 = i, y0 = j, s[i][j] = '.';
				else if (s[i][j] == 'G')
					x1 = i, y1 = j, s[i][j] = '.';
				else if (s[i][j] != '.')
					f[i][j][0] = f[i][j][1] = f[i][j][2] = f[i][j][3] = false;
			}
		}
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (s[i][j] != '.' && s[i][j] != '#') {
					int init;
					for (int k = 0; k < 4; ++k) {
						if (s[i][j] == dir[k])
							init = k;
					}
					for (int l = j + 1; l < m && s[i][l] == '.'; ++l)
						f[i][l][(6 - init) % 4] = false;
					for (int l = j - 1; l >= 0 && s[i][l] == '.'; --l)
						f[i][l][(4 -init) % 4] = false;
					for (int l = i + 1; l < n && s[l][j] == '.'; ++l)
						f[l][j][(7 - init) % 4] = false;
					for (int l = i - 1; l >= 0 && s[l][j] == '.'; --l)
						f[l][j][(5 - init) % 4] = false;
				}
			}
		}
		d[x0][y0][0] = 0;
		used[x0][y0][0] = true;
		queue<pair<pair<int, int>, int> > q;
		q.push(make_pair(make_pair(x0, y0), 0));
		while (!q.empty()) {
			pair<pair<int, int>, int> cur = q.front();
			q.pop();
			int x = cur.first.first, y = cur.first.second, c = cur.second;
			c = (c + 1) % 4;
			for (int dx = -1; dx <= 1; ++dx) {
				for (int dy = -1; dy <= 1; ++dy) {
					if (abs(dx) + abs(dy) == 1 && x + dx >= 0 && x + dx < n && y + dy >= 0 && y + dy < m && f[x + dx][y + dy][c] && !used[x + dx][y + dy][c]) {
						d[x + dx][y + dy][c] = d[x][y][(c + 3) % 4] + 1;
						used[x + dx][y + dy][c] = true;
						q.push(make_pair(make_pair(x + dx, y + dy), c));
					}
				}
			}
		}
		if (d[x1][y1][0] == -1 && d[x1][y1][1] == -1 && d[x1][y1][2] == -1 && d[x1][y1][3] == -1)
			cout << "Case #" << t + 1 << ": impossible\n";
		else {
			int ans = 1000000;
			for (int i = 0; i < 4; ++i) {
				if (d[x1][y1][i] != -1)
					ans = min(ans, d[x1][y1][i]);
			}
			cout << "Case #" << t + 1 << ": " << ans << "\n";
		}
	}
    return 0;
}
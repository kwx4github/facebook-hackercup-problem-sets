#include <bits/stdc++.h>

using namespace std;

int sx, sy, ex, ey;
char grid[105][105];
int dist[105][105][4];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, -1, 0, 1};

struct node {
	int x, y, t;
};

int main() {
	int t; cin >> t;
	for (int c = 1; c <= t; c++) {
		int n, m; cin >> n >> m;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				cin >> grid[i][j];
				if (grid[i][j] == 'S') {
					sx = i; sy = j;
					grid[i][j] = '.';
				} else if (grid[i][j] == 'G') {
					ex = i; ey = j;
					grid[i][j] = '.';
				}
			}
		}
		
		const int INF = 0x3f3f3f3f;
		memset(dist, INF, sizeof dist);
		queue<node> q;
		dist[sx][sy][0] = 0;
		q.push({sx, sy, 0});
		while (!q.empty()) {
			node u = q.front(); q.pop();
			for (int d = 0; d < 4; d++) {
				node nu = {u.x + dx[d], u.y + dy[d], (u.t + 1)%4};
				if (nu.x < 0 || nu.y < 0 || nu.x >= n || nu.y >= m) continue;
				if (grid[nu.x][nu.y] != '.') continue;
				if (dist[nu.x][nu.y][nu.t] != INF) continue;
				
				// check if there is a laser shooting at nu.x, nu.y
				bool good = true;
				for (int r = 0; r < 4; r++) {
					for (int del = 0; del <= max(n, m); del++) {
						node v = {nu.x + del*dx[r], nu.y + del*dy[r], nu.t};
						if (v.x < 0 || v.y < 0 || v.x >= n || v.y >= m) break;
						if (grid[v.x][v.y] == '#') break;
						if (grid[v.x][v.y] == '.') continue;
						
						int bdir = 0;
						switch (grid[v.x][v.y]) { 
							case '^':
								bdir = 0;
								break;
							case '<':
								bdir = 1;
								break;
							case 'v':
								bdir = 2;
								break;
							case '>':
								bdir = 3;
								break;
						}
						
						if ((bdir+v.t)%4 == (r+2)%4) {
							good = false;
						}
						break;
					}
					if (!good) break;
				}
				
				if (good) {
					dist[nu.x][nu.y][nu.t] = dist[u.x][u.y][u.t]+1;
					q.push(nu);
				}
			}
		}
		
		int ans = INF;
		for (int i = 0; i < 4; i++) ans = min(ans, dist[ex][ey][i]);
		
		cout << "Case #" << c << ": ";
		if (ans == INF) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}
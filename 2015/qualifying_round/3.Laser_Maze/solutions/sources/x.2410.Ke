#include <stdio.h>
#include <string.h>
#include <queue>
#include <iostream>
using namespace std;
int t, n, m;
char s[120][120];
int d[120][120][4];
int v[120][120][4];
int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};
int sx, sy, gx, gy;
struct N {
	int x, y, k;
	N(int x = 0, int y = 0, int k = 0): x(x), y(y), k(k) {
	}
};
bool in(int x, int y) {
	return 0 <= x && x < n && 0 <= y && y < m;
}
int main() {
	scanf("%d", &t);
	for (int tt = 1; tt <= t; tt++) {
		scanf("%d%d", &n, &m);
		for (int i = 0; i < n; i++) {
			scanf("%s", s[i]);
		}
		memset(d, -1, sizeof d);
		memset(v, 0, sizeof v);
		queue<N>q;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (s[i][j] == 'S') {
					sx = i;
					sy = j;
					s[i][j] = '.';
				} else if (s[i][j] == 'G') {
					gx = i;
					gy = j;
					s[i][j] = '.';
				}
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (s[i][j] == '<' || s[i][j] == '^' || s[i][j] == '>' || s[i][j] == 'v') {
					int dir = 0;
					if (s[i][j] == '<') {
						dir = 0;
					}
					if (s[i][j] == '^') {
						dir = 1;
					}
					if (s[i][j] == '>') {
						dir = 2;
					}
					if (s[i][j] == 'v') {
						dir = 3;
					}
					for (int k = 0; k < 4; k++) {
						int x = i + dx[k + dir], y = j + dy[k + dir];
						while (in(x, y) && s[x][y] == '.') {
							v[x][y][k] = 1;
							x += dx[k + dir];
							y += dy[k + dir];
						}
					}
					for (int k = 0; k < 4; k++) {
						v[i][j][k] = 1;
					}
				} else if (s[i][j] == '#') {
					for (int k = 0; k < 4; k++) {
						v[i][j][k] = 1;
					}
				}
			}
		}
		d[sx][sy][0] = 0;
		q.push(N(sx, sy, 0));
		while(q.size()) {
			N u = q.front();
			q.pop();
			for (int i = 0; i < 4; i++) {
				int nx = u.x + dx[i];
				int ny = u.y + dy[i];
				int nk = (u.k + 1) % 4;
				if (in(nx, ny) && v[nx][ny][nk] == 0 && d[nx][ny][nk] == -1) {
					d[nx][ny][nk] = d[u.x][u.y][u.k] + 1;
					q.push(N(nx, ny, nk));
				}
			}
		}
		int ans = -1;
		for (int i = 0; i < 4; i++) {
			if (d[gx][gy][i] != -1) {
				if (ans == -1) {
					ans = d[gx][gy][i];
				} else {
					ans = min(ans, d[gx][gy][i]);
				}
			}
		}
		if (ans == -1) {
			printf("Case #%d: impossible\n", tt, ans);
		} else {
			printf("Case #%d: %d\n", tt, ans);
		}
	}
	return 0;
}
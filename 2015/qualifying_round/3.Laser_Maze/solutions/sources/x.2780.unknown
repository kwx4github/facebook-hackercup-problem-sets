// Template {{{
#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
using namespace std;
typedef long long LL;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

template<typename T>
ostream& operator << (ostream& os, const vector<T>& v) {
    os << "{";
    for(int i = 0; i < v.size(); i++)
        os << v[i] << (i+1<v.size()?", ":"");
    os << "}";
    return os;
}

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
string laser = ">v<^";
inline bool valid(int x, int w) { return 0 <= x && x < w; }

void iostream_init() {
    ios::sync_with_stdio(false);
    cin.tie(0);
}
//}}}

int main(){
    iostream_init();
    int T;
    cin >> T;
    int casenum = 0;
    while(T--) {
        cout << "Case #" << ++casenum << ": ";

        int H, W;
        cin >> H >> W;
        string grid[111];
        REP(y, H) cin >> grid[y];
        queue<int> qx, qy, qt;
        int dist[111][111][4] = {};
        memset(dist, -1, sizeof(dist));
        int gx, gy = -1;
        REP(y, H) REP(x, W) {
            if(grid[y][x] == 'S') {
                qx.push(x);
                qy.push(y);
                qt.push(0);
                grid[y][x] = '.';
            }
            if(grid[y][x] == 'G') {
                gx = x, gy = y;
                grid[y][x] = '.';
            }
        }
        assert(gy != -1);
        int ans = -1;
        while(!qx.empty()) {
            int x = qx.front(); qx.pop();
            int y = qy.front(); qy.pop();
            int t = qt.front(); qt.pop();
            if(x == gx && y == gy) {
                ans = t;
                break;
            }
            REP(r, 4) {
                int nx = x + dx[r];
                int ny = y + dy[r];
                if(valid(nx, W) && valid(ny, H)) {
                    bool ok = true;
                    if(grid[ny][nx] == '#') {
                        ok = false;
                    }
                    REP(r2, 4) {
                        int cx = nx;
                        int cy = ny;
                        do{
                            cx += dx[r2];
                            cy += dy[r2];
                        } while(valid(cx, W) && valid(cy, H) && grid[cy][cx] == '.');
                        if(valid(cx, W) && valid(cy, H)) {
                            int R = (r2 + 2 + (t+1)) % 4;
                            if(laser[R] == grid[cy][cx]) ok = false;
                        }
                    }
                    if(ok) {
                        int& nd = dist[ny][nx][(t+1)%4];
                        if(nd == -1) {
                            nd = t + 1;
                            qx.push(nx);
                            qy.push(ny);
                            qt.push(t+1);
                        }
                    }
                }
            }
        }
        if(ans == -1) {
            cout << "impossible" << endl;
        } else {
            cout << ans << endl;
        }
    }
    return 0;
}

/* vim:set foldmethod=marker: */


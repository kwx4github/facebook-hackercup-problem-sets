#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <queue> 
#include <deque> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cstring> 
#include <complex> 
using namespace std; 
#define ALL(a) (a).begin(), (a).end() 
#define SZ(a) (int)(a).size() 
#define FOR(i,s,n) for(int i=(s);i<(n);++i) 
#define REP(i,n) FOR(i,0,(n)) 
#define PB(x) push_back((x)) 
#define CLR(a,v) memset((a),(v),sizeof((a))) 
typedef long long ll;

char b[111][111], issafe[4][111][111],used[4][111][111];
int n,m,sx,sy,fx,fy;
int dx[4]={-1,0,1,0}, dy[4]={0,1,0,-1};
 
int main()
{
	freopen("d:\\input.txt","r",stdin);
	freopen("d:\\output.txt","w+",stdout);
    int T;
    scanf("%d",&T);
    REP(t,T)
    {
		printf("Case #%d: ",t+1);
        scanf("%d %d",&n,&m);
		REP(i,n)scanf("%s",b[i]);

		CLR(issafe,1);
		REP(k,4)REP(i,n)REP(j,m)if(b[i][j]!='.')
		{
			if(b[i][j]=='S')sx=i,sy=j;
			else if(b[i][j]=='G')fx=i,fy=j;
			else if(b[i][j]=='#')issafe[k][i][j]=0;
			else
			{
				issafe[k][i][j]=0;
				int d = k,x=i,y=j;
				if(b[i][j]=='^')d+=0;
				else if(b[i][j]=='>')d+=1;
				else if(b[i][j]=='v')d+=2;
				else if(b[i][j]=='<')d+=3;
				if(d>=4)d-=4;
				x+=dx[d],y+=dy[d];
				while(x>=0&&y>=0&&x<n&&y<m)
				{
					if(b[x][y]!='.'&&b[x][y]!='S'&&b[x][y]!='G')break;
					issafe[k][x][y]=0;
					x+=dx[d],y+=dy[d];
				}
			}
		}

		queue<pair<int,int>> q;
		char can = 0;
		REP(k,4)if(issafe[k][fx][fy])can=1;
		if(!can)goto bad;

		CLR(used,0);

		used[0][sx][sy]=1;
		q.push(make_pair((sx<<7)+sy,0));

		while(!q.empty())
		{
			int cm=q.front().second+1,cx=q.front().first>>7,cy=q.front().first&127;
			q.pop();

			int d=cm&3;
			REP(k,4)
			{
				int x=cx+dx[k],y=cy+dy[k];
				if(x>=0&&y>=0&&x<n&&y<m&&issafe[d][x][y]&&!used[d][x][y])
				{
					if(x==fx&&y==fy)
					{
						printf("%d",cm);
						goto next;
					}
					q.push(make_pair((x<<7)+y,cm));
					used[d][x][y]=1;
				}
			}
		}

bad:
		printf("impossible");
next:
		printf("\n");
    }
 
	return 0;
} 
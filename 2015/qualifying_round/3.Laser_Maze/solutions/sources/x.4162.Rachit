#include<iostream>
using namespace std;
#define max 10000

char maze[1000][1000];

bool check(int sx,int sy,int step,int dir)
{
	if(maze[sy][sx] != '#')
	{
		switch(maze[sy][sx])
		{
			case('V') : {
				if(step%4 == dir)
				{
					return true;
				}
				break;
			}
			case('<') : {
				if((1+step)%4 == dir)
				{
					return true;
				}
				break;
			}
			case('>') : {
				if((3+step)%4 == dir)
				{
					return true;
				}
				break;
			}
			case('^') : {
				if((2+step)%4 == dir)
				{
					return true;
				}
				break;
			}
		}
	}
	return false;
}

bool is_laser(int sx,int sy,int m,int n,int step)
{
	if(maze[sy][sx] == 'S')
	{
		return false;
	}
	bool flag = false;
	int i;
	for(i=sx-1;i>=0;i--)
	{
		if((maze[sy][i] == '#') || (maze[sy][i] == 'V') || (maze[sy][i] == '^') || (maze[sy][i] == '<') || (maze[sy][i] == '>'))
		{
			if(check(i,sy,step,3))
			{
				return true;
			}
		}
	}
	for(i=sx+1;i<n;i++)
	{
		if((maze[sy][i] == '#') || (maze[sy][i] == 'V') || (maze[sy][i] == '^') || (maze[sy][i] == '<') || (maze[sy][i] == '>'))
		{
			if(check(i,sy,step,1))
			{
				return true;
			}
		}
	}
	for(i=sy-1;i>=0;i--)
	{
		if((maze[i][sx] == '#') || (maze[i][sx] == 'V') || (maze[i][sx] == '^') || (maze[i][sx] == '<') || (maze[i][sx] == '>'))
		{
			if(check(sx,i,step,0))
			{
				return true;
			}
		}
	}
	for(i=sy+1;i<m;i++)
	{
		if((maze[i][sx] == '#') || (maze[i][sx] == 'V') || (maze[i][sx] == '^') || (maze[i][sx] == '<') || (maze[i][sx] == '>'))
		{
			if(check(sx,i,step,2))
			{
				return true;
			}
		}
	}
	return false;
}

int travel(int sx,int sy,int m,int n,int step,int min)
{
	if(step >= max)
	{
		return -1;
	}
	if(step >= min)
	{
		return max;
	}
	if(sx >= n)
	{
		return max;
	}
	if(sy >= m)
	{
		return max;
	}
	if(sx < 0)
	{
		return max;
	}
	if(sy < 0)
	{
		return max;
	}
	if((maze[sy][sx] == '#') || (maze[sy][sx] == 'V') || (maze[sy][sx] == '^') || (maze[sy][sx] == '<') || (maze[sy][sx] == '>'))
	{
		return max;
	}
	if(is_laser(sx,sy,m,n,step))
	{
		return max;
	}
	if(maze[sy][sx] == 'G')
	{
		return step;
	}
	int right = travel(sx+1,sy,m,n,step+1,min);
	if(right == -1)
	{
		return -1;
	}
	if(right < min)
	{
		min = right;
	}
	int down = travel(sx,sy+1,m,n,step+1,min);
	if(down == -1)
	{
		return -1;
	}
	if(down < min)
	{
		min = down;
	}
    int left = travel(sx-1,sy,m,n,step+1,min);
    if(left == -1)
	{
		return -1;
	}
	if(left < min)
	{
		min = left;
	}
	int up = travel(sx,sy-1,m,n,step+1,min);
	if(up == -1)
	{
		return -1;
	}
	if(up < min)
	{
		min = up;
	}
	return min;
}

int main()
{
	int t;
	cin>>t;
	int m,n;
	int sx,sy,gx,gy;
	for(int k=0;k<t;k++)
	{
		cin>>m>>n;
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				cin>>maze[i][j];
				if(maze[i][j] == 'S')
				{
					sx = j;
					sy = i;
				}
				if(maze[i][j] == 'G')
				{
					gx = j;
					gy = i;
				}
			}
		}
		//cout<<sx<<" "<<sy<<endl;
		int step = travel(sx,sy,m,n,0,max);
		if((step == max) || (step == -1))
		{
			cout<<"Case #"<<k+1<<": impossible"<<endl;
		}
		else
		{
			cout<<"Case #"<<k+1<<": "<<step<<endl;
		}
	}
	return 0;
}

#include<fstream>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<functional>
#include<numeric>
using namespace std;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef long long ll;

namespace
{
	bool g[105][105];
	bool can[105][105][4];
	int t[105][105][4];
	const static int INF = 0x1f1f1f1f;

	int m, n;

	int getDir(char c)
	{
		if (c == '^') return 0;
		if (c == '>') return 1;
		if (c == 'v') return 2;
		if (c == '<') return 3;
		return -1;
	}

	int dx[] = { 1, 0, -1, 0 };
	int dy[] = { 0, 1, 0, -1 };
}

//int mainFHC15_Q_Maze()
int main()
{
	ifstream fin("FHC\\laser_maze.txt");
	ofstream fout("FHC\\laser_maze_out.txt");

	unsigned int numberOfCases;
	fin >> numberOfCases;

	for (unsigned int zz = 1; zz <= numberOfCases; ++zz)
	{
		fin >> m >> n;
		memset(g, 0, sizeof(g));
		memset(can, 0, sizeof(can));
		memset(t, INF, sizeof(t));

		vector<piii> vl;
		int iStart(0), iEnd(0), jStart(0), jEnd(0);
		for (int i = 1; i <= m; ++i)
		{
			string s;
			fin >> s;
			for (int j = 1; j <= n; ++j)
			{
				char c = s[j - 1];
				if (c == 'S')
				{
					iStart = i, jStart = j;
				}
				else if (c == 'G')
				{
					iEnd = i, jEnd = j;
				}
				
				if (c == '.' || c == 'S' || c == 'G')
				{
					g[i][j] = true;
					for (int k = 0; k < 4; ++k)
						can[i][j][k] = true;
				}
			
				int laserDir = getDir(c);
				if (laserDir >= 0)
				{
					vl.push_back({ laserDir, { i, j } });
				}
			}
		}

		for (piii p : vl)
		{
			int laserStartDirection = p.first, ii = p.second.first, jj = p.second.second;
			for (int dir = 0; dir < 4; ++dir)
			{
				int when = (4 + dir - laserStartDirection) % 4;
				int i = ii, j = jj;
				while (true)
				{
					i += dy[dir], j += dx[dir];
					if (!g[i][j]) break;
					can[i][j][when] = false;
				}
			}
		}

		queue<piii> q;
		q.push({ 0, { iStart, jStart } });
		while (!q.empty())
		{
			int iLoc = q.front().second.first, jLoc = q.front().second.second, time = q.front().first;
			for (int dir = 0; dir < 4; ++dir)
			{
				int i = iLoc + dy[dir];
				int j = jLoc + dx[dir];
				int tt = time % 4;

				if (can[i][j][tt] && t[i][j][tt] == INF)
				{
					t[i][j][tt] = time + 1;
					q.push({ time + 1, { i, j } });
				}
			}

			q.pop();
		}

		int ret = INF;
		for (int k = 0; k < 4; ++k)
		{
			ret = min(ret, t[iEnd][jEnd][k]);
		}

		fout << "Case #" << zz << ": ";
		if (ret == INF)
		{
			fout << "impossible";
		}
		else
		{
			fout << ret;
		}
		
		fout << endl;
	}

	return 0;
}
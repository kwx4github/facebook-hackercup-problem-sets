#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <math.h>

#define FR(i, a, b)   for(int i = a; i < b; i++)
#define FOR(i, a, b)  for(int i = a; i <= b; i++)
#define LFOR(i, a, b) for(int i = a; i >= b; i--)
#define FRSZ(i, x)    for(int i = 0; i < (int)x.size(); i++)
#define RP(i, n)      for(int i = 0; i < n; i++)
#define repeat        do
#define until(x)      while(!(x))
#define _ve vector
#define _pa pair
#define _tu tuple
#define _mp make_pair
#define _mt make_tuple
#define _pb push_back
#define _fi first
#define _sc second
#define sz(a) ((int)(a).size())

using namespace std;

template <class T> T min3(T a, T b, T c){ return min(a, min(b, c));};
template <class T> T max3(T a, T b, T c){ return max(a, max(b, c));};

typedef long long int64;
typedef unsigned long long qword;
typedef long double ldouble;

struct gtr{int t, x, y;};

int cx[] = {-1, 0, 1, 0};
int cy[] = {0, 1, 0, -1};

bool isC(char x)
{
    return x == '<' || x ==  '>' || x ==  '^' || x ==  'v';
}

char s[1100][1100];
int n, m;
bool bb[4][110][110], v[4][110][110];
gtr q[1001000];
int d[4][110][110];

void setBlock(int x, int y)
{
    int l;
    if(s[x][y] == '^')
        l = 0;
    else if(s[x][y] == '>')
        l = 1;
    else if(s[x][y] == 'v')
        l = 2;
    else l = 3;

    for(int i = 0; i < 4; i++)
    {
        int h = x, k = y;
        while(true)
        {
            h += cx[l];
            k += cy[l];
            if(h >= 0 && h < m && k >= 0 && k < n && (s[h][k] == '.' || s[h][k] == 'S' || s[h][k] == 'G'))
                bb[i][h][k] = true;
            else break;
        }
        l = (l + 1) % 4;
    }
}

int main()
{
    //freopen("d:\\laser_maze.txt", "r", stdin);
    //freopen("d:\\output.txt", "w", stdout);
    int oo;
    scanf("%d", &oo);
    for(int o = 0; o < oo; o++)
    {
        scanf("%d%d", &m, &n);
        for(int i = 0; i < m; i++)
            scanf("%s", &s[i]);
        memset(bb, false, sizeof(bb));
        memset(v, false, sizeof(v));
        int xx, yy;
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
            {
                if(isC(s[i][j]))
                    setBlock(i, j);
                if(s[i][j] == 'S')
                {
                    xx = i;
                    yy = j;
                }
            }
        int fir = -1;
        int las = -1;

            las++;
            q[las].t = 0;
            q[las].x = xx;
            q[las].y = yy;
            v[0][xx][yy] = true;
            d[0][xx][yy] = 0;
        bool found = false;
        int res;
        while(fir < las)
        {
            fir++;
            int t = q[fir].t;
            int x = q[fir].x;
            int y = q[fir].y;
            int tt = t;
            t = (t + 1) % 4;

            for(int i = 0; i < 4; i++)
            {
                int h = x + cx[i];
                int k = y + cy[i];
                if(h >= 0 && h < m && k >= 0 && k < n && bb[t][h][k] == false && v[t][h][k] == false && (s[h][k] == '.' || s[h][k] == 'S' || s[h][k]=='G'))
                {
                    las++;
                    q[las].t = t;
                    q[las].x = h;
                    q[las].y = k;
                    v[t][h][k] = true;
                    d[t][h][k] = d[tt][x][y] + 1;
                    if(s[h][k] == 'G')
                    {
                        found = true;
                        res = d[t][h][k];
                        break;
                    }
                }
            }
            if(found) break;
        }
        cout << "Case #" << o + 1<< ": ";
        if(!found)
            cout << "impossible" << endl;
        else cout << res << endl;
    }
}

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstring>

#define vi   vector<int>
#define pb   push_back
#define vvi  vector<vector<int> >
#define pii  pair<int,int>
#define ll   long long 
#define vl   vector<ll>
#define vvl  vector<vector<ll> > 
#define mii  map<int,int> 
#define msi  map<string,int> 
#define vpii vector<pair<int,int> >
#define mp   make_pair
#define all(a)  a.begin(), a.end()
using namespace std;
char arr[100][100];
int brr[4][100][100],dist[4][100][100];
int n,m;
struct cod
{
    int x;
    int y;
    int frame;
};
void setbrr(char c,int i,int j)
{
    brr[0][i][j]=1;
    brr[1][i][j]=1;
    brr[2][i][j]=1;
    brr[3][i][j]=1;
    if(c=='>')
    {
        for(int k=j+1;k<m&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k++)
        {
            brr[0][i][k]=1;
        }
         for(int k=i+1;k<n&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k++)
        {
            brr[1][k][j]=1;
        }
        for(int k=j-1;k>=0&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k--)
        {
            brr[2][i][k]=1;
        }
        for(int k=i-1;k>=0&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k--)
        {
            brr[3][k][j]=1;
        }

    }
    else if(c=='<')
    {
         for(int k=j+1;k<m&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k++)
        {
            brr[2][i][k]=1;
        }
         for(int k=i+1;k<n&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k++)
        {
            brr[3][k][j]=1;
        }
        for(int k=j-1;k>=0&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k--)
        {
            brr[0][i][k]=1;
        }
        for(int k=i-1;k>=0&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k--)
        {
            brr[1][k][j]=1;
        }
         
    }
    else if(c=='v')
    {
         for(int k=j+1;k<m&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k++)
        {
            brr[3][i][k]=1;
        }
         for(int k=i+1;k<n&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k++)
        {
            brr[0][k][j]=1;
        }
        for(int k=j-1;k>=0&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k--)
        {
            brr[1][i][k]=1;
        }
        for(int k=i-1;k>=0&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k--)
        {
            brr[2][k][j]=1;
        }
         
    }
    else{
         for(int k=j+1;k<m&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k++)
        {
            brr[1][i][k]=1;
        }
         for(int k=i+1;k<n&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k++)
        {
            brr[2][k][j]=1;
        }
        for(int k=j-1;k>=0&&arr[i][k]!='#'&&arr[i][k]!='>'&&arr[i][k]!='<'&&arr[i][k]!='v'&&arr[i][k]!='^';k--)
        {
            brr[3][i][k]=1;
        }
        for(int k=i-1;k>=0&&arr[k][j]!='#'&&arr[k][j]!='>'&&arr[k][j]!='<'&&arr[k][j]!='v'&&arr[k][j]!='^';k--)
        {
            brr[0][k][j]=1;
        }
         
    }





}
int bfs(cod source,cod dest)
{
    dist[source.frame][source.x][source.y]=0;
    queue<cod> q;
    q.push(source);
    while(q.empty()==false)
    {
        cod top=q.front();
        q.pop();
        int l=(top.frame+1)%4;
        if(top.x+1<n&&brr[l][top.x+1][top.y]==0)
        {
            if(top.x+1==dest.x&&top.y==dest.y)
            {
                return dist[top.frame][top.x][top.y]+1;
            }
            dist[l][top.x+1][top.y]=dist[top.frame][top.x][top.y]+1;
            cod tbp={top.x+1,top.y,l};
            q.push(tbp);

        }
        if(top.x-1>=0&&brr[l][top.x-1][top.y]==0&& dist[l][top.x-1][top.y]==-1)
        {
            if(top.x-1==dest.x&&top.y==dest.y)
            {
                return dist[top.frame][top.x][top.y]+1;
            }
             dist[l][top.x-1][top.y]=dist[top.frame][top.x][top.y]+1;
            cod tbp={top.x-1,top.y,l};
            q.push(tbp);

        }
        if(top.y+1<m&&brr[l][top.x][top.y+1]==0&& dist[l][top.x][top.y+1]==-1)
        {
            if(top.x==dest.x&&top.y+1==dest.y)
            {
                return dist[top.frame][top.x][top.y]+1;
            }
             dist[l][top.x][top.y+1]=dist[top.frame][top.x][top.y]+1;
            cod tbp={top.x,top.y+1,l};
            q.push(tbp);

        }
        if(top.y-1>=0&&brr[l][top.x][top.y-1]==0&& dist[l][top.x][top.y-1]==-1)
        {
            if(top.x==dest.x&&top.y-1==dest.y)
            {
                return dist[top.frame][top.x][top.y]+1;
            }
             dist[l][top.x][top.y-1]=dist[top.frame][top.x][top.y]+1;
            cod tbp={top.x,top.y-1,l};
            q.push(tbp);

        }
    }

return -1;
}
int main()
{
    ios_base::sync_with_stdio(0) ;
    //freopen("i.txt","r",stdin);
    //freopen("o.txt","w",stdout);
    int t;
    cin>>t;
    for (int p = 0; p <t ; ++p)
  
    {
        cout<<"Case #"<<p+1<<": ";
        memset(arr,0,40000);
        memset(brr,0,160000);
        memset(dist,-1,160000);
        
        cin>>n>>m;
        
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                cin>>arr[i][j];
            }
        }
        cod source,dest;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                if(arr[i][j]=='#')
                {
                    brr[0][i][j]=1;
                    brr[1][i][j]=1;
                    brr[2][i][j]=1;
                    brr[3][i][j]=1;
                }
                else if(arr[i][j]=='S')
                {
                    source.x=i;
                    source.y=j;
                    source.frame=0;
                }
                else if(arr[i][j]=='G')
                {
                    dest.x=i;
                    dest.y=j;
                    dest.frame=0;
                }
                else if(arr[i][j]=='.')
                {

                }
                else{
                    setbrr(arr[i][j],i,j);
                }

            }
        }
    
int ty=bfs(source,dest);
if(ty==-1)
{
    cout<<"impossible\n";
}
else{
    cout<<ty<<"\n";
}
    
}

        }
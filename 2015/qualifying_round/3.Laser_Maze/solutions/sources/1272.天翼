#include <cstdio>
#include <cstring>
#include <tuple>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

char map[5][110][110];
int dist[5][110][110];

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

int n, m;
typedef tuple<int, int, int> Lazer;

void shoot(char t_map[110][110], int dir, int nx, int ny)
{
    if(nx<0 || nx>=n || ny<0 || ny>=m || t_map[nx][ny] == '#') return;
    t_map[nx][ny] = '?';
    shoot(t_map, dir, nx+dx[dir], ny+dy[dir]);
    return;
}

int main()
{
    int T;
    scanf("%d", &T);
    for(int cas=1; cas<=T; ++cas)
    {
        scanf("%d %d", &n, &m);
        vector<Lazer> lazer;
        int sx, sy, gx, gy;
        for(int i=0; i<n; ++i)
        {
            scanf("%s", map[0][i]);
            for(int j=0; map[0][i][j]; ++j)
                switch(map[0][i][j])
                {
                    case 'S':
                        sx = i, sy = j;
                        map[0][i][j] = '.';
                        break;
                    case 'G':
                        gx = i, gy = j;
                        map[0][i][j] = '.';
                        break;
                    case '^':
                        lazer.emplace_back(i, j, 0);
                        map[0][i][j] = '#';
                        break;
                    case '>':
                        lazer.emplace_back(i, j, 1);
                        map[0][i][j] = '#';
                        break;
                    case 'v':
                        lazer.emplace_back(i, j, 2);
                        map[0][i][j] = '#';
                        break;
                    case '<':
                        lazer.emplace_back(i, j, 3);
                        map[0][i][j] = '#';
                        break;
                }
            for(int j=1; j<4; ++j)
                strcpy(map[j][i], map[0][i]);
        }
        for(int i=0; i<4; ++i)
            for(int j=0; j<(int)lazer.size(); ++j)
            {
                int x, y, dir;
                tie(x, y, dir) = lazer[j];
                dir = (dir+i)%4;
                shoot(map[i], dir, x+dx[dir], y+dy[dir]);
            }
        for(int i=0; i<4; ++i)
            for(int j=0; j<n; ++j)
                for(int k=0; k<m; ++k)
                    dist[i][j][k] = 71227122;
        queue<Lazer> que;
        que.push(Lazer(0, sx, sy));
        dist[0][sx][sy] = 0;
        while(!que.empty())
        {
            int t, x, y;
            tie(t, x, y) = que.front();
            que.pop();
            if(x==gx&&y==gy) break;
            for(int k=0; k<4; ++k)
            {
                int nt = (t+1)%4, nx = x+dx[k], ny = y+dy[k];
                if(nx>=0 && nx<n && ny>=0 && ny<m && map[nt][nx][ny]=='.' && dist[nt][nx][ny] > dist[t][x][y]+1)
                {
                    dist[nt][nx][ny] = dist[t][x][y]+1;
                    que.push(Lazer(nt, nx, ny));
                }
            }
        }
        int ans = 71227122;
        for(int i=0; i<4; ++i)
            ans = min(ans, dist[i][gx][gy]);
        printf("Case #%d: ", cas);
        if(ans == 71227122) printf("impossible\n");
        else printf("%d\n", ans);
    }
    return 0;
}

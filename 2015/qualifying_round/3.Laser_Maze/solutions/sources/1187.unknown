#include <bits/stdc++.h>
using namespace std;

char arr[105][105];
bool vis[105][105][4];
int mv[2][4] = {{1,0,-1,0},{0,1,0,-1}};

struct _data{
	int r, c, s;
	_data(int r, int c, int s) : r(r),c(c),s(s){}
};

int main(){
	freopen("LaserMaze_in.txt","r",stdin);
	freopen("LaserMaze_out.txt","w",stdout);
	int t;
	scanf("%d",&t);
	for(int tc = 1; tc <= t; tc++ ){
		for(int i = 0; i < 105; i++ ){
			for(int j = 0; j < 105; j++ ){
				for(int k = 0; k < 4; k++ ){
					vis[i][j][k] = false;
				}
				arr[i][j] = '#';
			}
		}
		int m,n,startr,startc,endr,endc;
		scanf("%d%d",&m,&n);
		char in[105];
		for(int i = 1; i <= m; i++ ){
			scanf("%s",in);
			for(int j = 0; j < n; j++ ) arr[i][j+1] = in[j];
		}
		for(int i = 1; i <= m; i++ ) for(int j = 1; j <= n; j++ ){
			if(arr[i][j]=='S'){ startr = i; startc = j; arr[i][j] = '.'; }
			else if(arr[i][j]=='G'){ endr = i; endc = j; arr[i][j] = '.'; }
			else if(arr[i][j]=='^') arr[i][j] = '0';
			else if(arr[i][j]=='>') arr[i][j] = '1';
			else if(arr[i][j]=='v') arr[i][j] = '2';
			else if(arr[i][j]=='<') arr[i][j] = '3';
		}
		int ans = -1;
		queue<_data> q;
		q.push(_data(startr,startc,0));
		vis[startr][startc][0] = true;
		while(!q.empty()){
			int r=q.front().r,c=q.front().c,s=q.front().s;
			q.pop();
//			printf("%d %d %d\n",r,c,s);
			if(r==endr && c==endc){
				ans = s;
				break;
			}
			for(int i = 0; i < 4; i++ ){
				int nr=r+mv[0][i],nc=c+mv[1][i];
				if(!vis[nr][nc][(s+1)%4] && arr[nr][nc]=='.'){
					bool flag = true;
					
					//Check up
					int rr=nr-1,cc=nc;
					while(arr[rr][cc]=='.') rr--;
					if(arr[rr][cc]!='#' && ((arr[rr][cc]-'0'+s+1)%4 == 2)) flag = false;
					
					//Check right
					rr=nr; cc=nc+1;
					while(arr[rr][cc]=='.') cc++;
					if(arr[rr][cc]!='#' && ((arr[rr][cc]-'0'+s+1)%4 == 3)) flag = false;
					
					//Check down
					rr=nr+1; cc=nc;
					while(arr[rr][cc]=='.') rr++;
					if(arr[rr][cc]!='#' && ((arr[rr][cc]-'0'+s+1)%4 == 0)) flag = false;
					
					//Check left
					rr=nr; cc=nc-1;
					while(arr[rr][cc]=='.') cc--;
					if(arr[rr][cc]!='#' && ((arr[rr][cc]-'0'+s+1)%4 == 1)) flag = false;
					if(flag){
						vis[nr][nc][(s+1)%4] = true;
						q.push(_data(nr,nc,s+1));
					}
				}
			}
		}
		printf("Case #%d: ",tc);
		if(ans==-1){
			printf("impossible\n");
		}
		else printf("%d\n",ans);
		
	}
}

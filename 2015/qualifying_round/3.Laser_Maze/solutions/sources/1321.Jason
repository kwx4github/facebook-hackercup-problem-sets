#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define LEN 110

typedef struct TNode{
   int x;
   int y;
   int tick[4];
};

TNode Node[LEN][LEN];
TNode Start, Goal;
char board[LEN][LEN];
int M, N;

void Init(){
   for (int i = 0; i <= M+1; i++){
      for (int j = 0; j <= N+1; j++){
         for (int k = 0; k < 4; k++){
            Node[i][j].tick[k] = 0;
         }
      }
   }
   for (int i = 0; i <= M+1; i++){
      for (int j = 0; j <= N+1; j++){
         switch(board[i][j]){
            case '#':
               Node[i][j].tick[0] = 1;
               Node[i][j].tick[1] = 1;
               Node[i][j].tick[2] = 1;
               Node[i][j].tick[3] = 1;
               break;
            case '<':
               Node[i][j].tick[0] = 1;
               Node[i][j].tick[1] = 1;
               Node[i][j].tick[2] = 1;
               Node[i][j].tick[3] = 1;
               for (int k = j-1; board[i][k] == '.'; k--){
                  Node[i][k].tick[0] = 1;
               }
               for (int k = i-1; board[k][j] == '.'; k--){
                  Node[k][j].tick[1] = 1;
               }
               for (int k = j+1; board[i][k] == '.'; k++){
                  Node[i][k].tick[2] = 1;
               }
               for (int k = i+1; board[k][j] == '.'; k++){
                  Node[k][j].tick[3] = 1;
               }
               break;
            case '^':
               Node[i][j].tick[0] = 1;
               Node[i][j].tick[1] = 1;
               Node[i][j].tick[2] = 1;
               Node[i][j].tick[3] = 1;
               for (int k = i-1; board[k][j] == '.'; k--){
                  Node[k][j].tick[0] = 1;
               }
               for (int k = j+1; board[i][k] == '.'; k++){
                  Node[i][k].tick[1] = 1;
               }
               for (int k = i+1; board[k][j] == '.'; k++){
                  Node[k][j].tick[2] = 1;
               }
               for (int k = j-1; board[i][k] == '.'; k--){
                  Node[i][k].tick[3] = 1;
               }
               break;
            case '>':
               Node[i][j].tick[0] = 1;
               Node[i][j].tick[1] = 1;
               Node[i][j].tick[2] = 1;
               Node[i][j].tick[3] = 1;
               for (int k = j+1; board[i][k] == '.'; k++){
                  Node[i][k].tick[0] = 1;
               }
               for (int k = i+1; board[k][j] == '.'; k++){
                  Node[k][j].tick[1] = 1;
               }
               for (int k = j-1; board[i][k] == '.'; k--){
                  Node[i][k].tick[2] = 1;
               }
               for (int k = i-1; board[k][j] == '.'; k--){
                  Node[k][j].tick[3] = 1;
               }
               break;
            case 'v':
               Node[i][j].tick[0] = 1;
               Node[i][j].tick[1] = 1;
               Node[i][j].tick[2] = 1;
               Node[i][j].tick[3] = 1;
               for (int k = i+1; board[k][j] == '.'; k++){
                  Node[k][j].tick[0] = 1;
               }
               for (int k = j-1; board[i][k] == '.'; k--){
                  Node[i][k].tick[1] = 1;
               }
               for (int k = i-1; board[k][j] == '.'; k--){
                  Node[k][j].tick[2] = 1;
               }
               for (int k = j+1; board[i][k] == '.'; k++){
                  Node[i][k].tick[3] = 1;
               }
               break;
         }
      }
   }
}

int matrix[LEN+2][LEN+2];

void PrintMatrix(){
   for (int i = 0; i <= M+1; i++){
      for (int j = 0; j <= N+1; j++){
         printf("%d",matrix[i][j]);
      }
      printf("\n");
   }
}

int BFS(){
   for (int i = 0; i <= M+1; i++){
      for (int j = 0; j <= N+1; j++){
         if (i == 0 || i == M+1 || j == 0 || j == N+1){
            matrix[i][j] = -1;
         }
         else{
            matrix[i][j] = 0;
         }
      }
   }
   
   matrix[Start.y][Start.x] = 1;
   int counter = 1;
   int Loop = 1;
   
   while(1){
      int flag = 0;
      int fflag = 0;
      //PrintMatrix();
      for (int i = 1; i <= M; i++){
         for (int j = 1; j <= N; j++){
            if (matrix[i][j] == counter){
               if (Node[i][j-1].tick[Loop] == 0){
                  matrix[i][j-1] = counter+1;
                  fflag = 1;
               }
               if (Node[i-1][j].tick[Loop] == 0){
                  matrix[i-1][j] = counter+1;
                  fflag = 1;
               }
               if (Node[i][j+1].tick[Loop] == 0){
                  matrix[i][j+1] = counter+1;
                  fflag = 1;
               }
               if (Node[i+1][j].tick[Loop] == 0){
                  matrix[i+1][j] = counter+1;
                  fflag = 1;
               }
            }
            if (matrix[Goal.y][Goal.x] > 0){
               flag = 1;
               break;
            }
         }
      }
      counter++;
      Loop = (Loop+1)%4;
      
      if (flag == 1) break;
      if (fflag == 0) break;
      if (counter > 99999) break;
   }
   
   if (matrix[Goal.y][Goal.x] == 0) return -1;
   else return counter-1;
}

void PrintTick(){
   for (int k = 0; k < 4; k++){
      for (int i = 1; i <= M; i++){
         for (int j = 1; j <= N; j++){
               printf("%d",Node[i][j].tick[k]);
         }
         printf("\n");
      }
      printf("\n");
   }
}

int main(){
   int T;
   char temp;
   
   //freopen("3.in","r",stdin);
   //freopen("3.out","w",stdout);
   
   scanf("%d",&T);
   
   for (int i = 0; i < T; i++){
      scanf("%d", &M);
      scanf("%d", &N);
      getchar();
      for (int j = 0; j <= M+1; j++){
         for (int k = 0; k <= N+1; k++){
            board[j][k] = '#';
         }
      }
      for (int j = 1; j <= M; j++){
         for (int k = 1; k <= N; k++){
               board[j][k] = getchar();
            if (board[j][k] == 'S'){
               board[j][k] = '.';
               Start.x = k;
               Start.y = j;
            }
            if (board[j][k] == 'G'){
               board[j][k] = '.';
               Goal.x = k;
               Goal.y = j;
            }
         }
         getchar();
      }
      Init();
      
      int result = 0;
      result = BFS();
      printf("Case #%d: ",i+1);
      if (result > -1){
         printf("%d\n",result);
      }
      else{
         printf("impossible\n");
      }
   }
   
   return 0;
}

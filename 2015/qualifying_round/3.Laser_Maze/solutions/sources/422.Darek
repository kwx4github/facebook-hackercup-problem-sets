//Dariusz Bukowski

#include <iostream>
#include <cstdio>
#include <queue>
#include <set>
using namespace std;

const int MAXNM = 110;

typedef pair <int, pair <int, int> > state;

char BADN[4] = { 'v', '>', '^', '<'};
char BADE[4] = { '<', 'v', '>', '^'};
char BADS[4] = { '^', '<', 'v', '>'};
char BADW[4] = { '>', '^', '<', 'v'};

char MAP[MAXNM][MAXNM];
int t, n, m;

bool properState(state S){
	int mod = S.first;
	int x = S.second.first;
	int y = S.second.second;
	for(int x2 = x; x2 >= 0; x2--){
		if(MAP[x2][y] == BADN[mod]){
			return false;
		}
		else if(MAP[x2][y] == '.' || MAP[x2][y] == 'S' || MAP[x2][y] == 'G'){
			continue;
		}
		else break;
	}
	for(int x2 = x; x2 < n; x2++){
		if(MAP[x2][y] == BADS[mod]){
			return false;
		}
		else if(MAP[x2][y] == '.' || MAP[x2][y] == 'S' || MAP[x2][y] == 'G'){
			continue;
		}
		else break;
	}
	for(int y2 = y; y2 >= 0; y2--){
		if(MAP[x][y2] == BADW[mod]){
			return false;
		}
		else if(MAP[x][y2] == '.' || MAP[x][y2] == 'S' || MAP[x][y2] == 'G'){
			continue;
		}
		else break;
	}
	for(int y2 = y; y2 < m; y2++){
		if(MAP[x][y2] == BADE[mod]){
			return false;
		}
		else if(MAP[x][y2] == '.' || MAP[x][y2] == 'S' || MAP[x][y2] == 'G'){
			continue;
		}
		else break;
	}
	return true;
}

bool properField(int x, int y){
	return (x >= 0 && x < n) && (y >= 0 && y < m) && (MAP[x][y] == '.' || MAP[x][y] == 'S' || MAP[x][y] == 'G');
}

int countSteps(){
	int startX, startY;
	set <state> S;
	state currentState;
	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			if(MAP[i][j] == 'S'){
				currentState = make_pair(0, make_pair(i, j));
			}
		}
	}
	queue <pair <state, int> > Q;
	Q.push(make_pair(currentState, 0));
	S.insert(currentState);
	while(!Q.empty()){
		pair <state, int> top = Q.front();
		Q.pop();
		state st = top.first;
		int x = st.second.first;
		int y = st.second.second;
		int steps = top.second;
		if(MAP[x][y] == 'G') {
			return steps;
		}
		int dx[4] = {-1, 1, 0, 0};
		int dy[4] = {0, 0, 1, -1};
		for(int i = 0; i < 4; i++){
			if(properField(x + dx[i], y + dy[i])){
				state stateHere = make_pair((steps + 1) % 4, make_pair(x + dx[i], y + dy[i]));
				if(properState(stateHere)){
					if(S.find(stateHere) == S.end()){
						S.insert(stateHere);
						Q.push(make_pair(stateHere, steps + 1));
					}
				}
			}
		}
	}
	return -1;
}

int main(){
	scanf("%d", &t);
	for(int i = 0; i < t; i++){
		scanf("%d %d", &n, &m);
		for(int j = 0; j < n; j++){
			scanf("%s", MAP[j]);
		}
		int res = countSteps();
		if(res == -1) {
			printf("Case #%d: impossible\n", i + 1);
		}
		else {
			printf("Case #%d: %d\n", i + 1, res);
		}
	}
	return 0;
}
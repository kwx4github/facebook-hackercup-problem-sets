/*Author: Rishul Aggarwal*/

#include<bits/stdc++.h>

#define mod 1000000007
#define ll long long
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define in(type,x) scanf("%" #type,&x)
#define debug(args...) {dbg,args; cerr<<endl;}
#define test int t;\
in(d,t);\
while(t--)

using namespace std;

struct debugger
{template<typename T> debugger& operator,(const T& v)
{cerr<< v <<" ";
return *this;
}
}dbg;

ll gcd(ll a,ll b) {if(b==0) return a; return gcd(b,a%b);}

ll power(ll b,ll exp,ll m) {ll ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }

int n,m;
string a[102];

bool visited[102][102][4];
bool mark[102][102][4];

ll dist[102][102][4];

int sx,sy,gx,gy;

struct state
{
	int x,y,md;
};

void markup(int x,int y,int md)
{
	for(int i=x-1;i>=0;i--)
	{
		if(a[i][y]=='.')
			mark[i][y][md]=1;
		else
			break;
	}
}

void markdown(int x,int y,int md)
{
	for(int i=x+1;i<n;i++)
	{
		if(a[i][y]=='.')
			mark[i][y][md]=1;
		else
			break;
	}
}

void markleft(int x,int y,int md)
{
	for(int i=y-1;i>=0;i--)
	{
		if(a[x][i]=='.')
			mark[x][i][md]=1;
		else
			break;
	}
}

void markright(int x,int y,int md)
{
	for(int i=y+1;i<m;i++)
	{
		if(a[x][i]=='.')
			mark[x][i][md]=1;
		else
			break;
	}
}

void init()
{
	rep(i,0,n-1)
	 rep(j,0,m-1)
	   rep(k,0,3) mark[i][j][k]=visited[i][j][k]=0,dist[i][j][k]=1e18;
	   
	rep(i,0,n-1)
	{
		rep(j,0,m-1)
		{
			if(a[i][j]=='^')
			{
				mark[i][j][0]=mark[i][j][1]=mark[i][j][2]=mark[i][j][3]=1;
				markup(i,j,0);
				markright(i,j,1);
				markdown(i,j,2);
				markleft(i,j,3);
			}
			else if(a[i][j]=='>')
			{
				mark[i][j][0]=mark[i][j][1]=mark[i][j][2]=mark[i][j][3]=1;
				markright(i,j,0);
				markdown(i,j,1);
				markleft(i,j,2);
				markup(i,j,3);
			}
			else if(a[i][j]=='v')
			{
				mark[i][j][0]=mark[i][j][1]=mark[i][j][2]=mark[i][j][3]=1;
				markdown(i,j,0);
				markleft(i,j,1);
				markup(i,j,2);
				markright(i,j,3);
			}
			else if(a[i][j]=='<')
			{
				mark[i][j][0]=mark[i][j][1]=mark[i][j][2]=mark[i][j][3]=1;
				markleft(i,j,0);
				markup(i,j,1);
				markright(i,j,2);
				markdown(i,j,3);
			}
			else if(a[i][j]=='#')
			{
				mark[i][j][0]=mark[i][j][1]=mark[i][j][2]=mark[i][j][3]=1;
			}
		}
	}
}


ll bfs()
{	 
	queue<state>q;
	q.push({sx,sy,0});
	visited[sx][sy][0]=1;
	dist[sx][sy][0]=0;
	
	while(!q.empty())
	{
		state next=q.front();
		q.pop();
		int nx=next.x,ny=next.y,nmd=next.md;
		//debug(nx,ny,nmd);
		int mdr=(nmd+1)%4;
				
		if(ny-1>=0 && !mark[nx][ny-1][mdr] && !visited[nx][ny-1][mdr])
		{
			visited[nx][ny-1][mdr]=1;
		 	dist[nx][ny-1][mdr]=min(dist[nx][ny-1][mdr],dist[nx][ny][nmd]+1);
		 	q.push({nx,ny-1,mdr});
		}
		
		if(ny+1<m && !mark[nx][ny+1][mdr] && !visited[nx][ny+1][mdr])
		{
			visited[nx][ny+1][mdr]=1;
		 	dist[nx][ny+1][mdr]=min(dist[nx][ny+1][mdr],dist[nx][ny][nmd]+1);
		 	q.push({nx,ny+1,mdr});
		}
		
		if(nx-1>=0 && !mark[nx-1][ny][mdr] && !visited[nx-1][ny][mdr])
		{
			visited[nx-1][ny][mdr]=1;
		 	dist[nx-1][ny][mdr]=min(dist[nx-1][ny][mdr],dist[nx][ny][nmd]+1);
		 	q.push({nx-1,ny,mdr});
		}
		
		if(nx+1<n && !mark[nx+1][ny][mdr] && !visited[nx+1][ny][mdr])
		{
			visited[nx+1][ny][mdr]=1;
		 	dist[nx+1][ny][mdr]=min(dist[nx+1][ny][mdr],dist[nx][ny][nmd]+1);
		 	q.push({nx+1,ny,mdr});
		}		
	}
	
	ll ret=1e18;
	ret=min(dist[gx][gy][0],dist[gx][gy][1]);
	ret=min(ret,dist[gx][gy][2]);
	ret=min(ret,dist[gx][gy][3]);
	
	if(ret==1e18) return -1;
	else return ret;
	
}

int main()
{
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);
  int cas=1;
  test
  {
  	cin>>n>>m;
  	rep(i,0,n-1) cin>>a[i];
  	rep(i,0,n-1)
  	{
  		rep(j,0,m-1)
  		{
  			if(a[i][j]=='S') {sx=i,sy=j; a[i][j]='.';}
  			else if(a[i][j]=='G') {gx=i,gy=j; a[i][j]='.';}
  		}
  	}
  	init();
  	
  	/*rep(i,0,n-1)
  	 rep(j,0,m-1)
  	  rep(k,0,3)
  	   debug(i,j,k,mark[i][j][k]);
  	
	debug("--------------------------------------");  */ 
  	
  	ll ans=bfs();
  	if(ans==-1) cout<<"Case #"<<cas<<": impossible\n";
  	else cout<<"Case #"<<cas<<": "<<ans<<"\n";
  	cas++;  
  }

  return 0;
}



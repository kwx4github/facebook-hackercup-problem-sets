#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>
#include <string>
#include <set>
#define bit(i) (1<<i)
#define BIT(i) (1ll<<i)
using namespace std;

const int MAX = 100000008;
int bl[4][105][105],d[4][105][105],in[4][105][105];
int op[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
char s[105][105];

int main(){
	freopen("laser_maze.txt","r",stdin);
	freopen("out.txt","w",stdout);
	
	int T;
	scanf(" %d",&T);
	for(int t=0,M,N;t<T && scanf(" %d %d",&N,&M)==2;t++){
		memset(bl,0,sizeof(bl));
		for(int i=0;i<4;i++)
			for(int j=0;j<=N;j++)
				for(int k=0;k<=M;k++)
					d[i][j][k] = MAX, in[i][j][k] = 0;
		for(int i=0;i<N;i++)
			scanf(" %s",s[i]);
		int stx,sty,edx,edy;
		for(int i=0;i<N;i++){
			for(int j=0;j<M;j++){
				if(s[i][j]=='S')	stx = i, sty = j;
				else if(s[i][j]=='G')	edx = i, edy = j;
				else if(s[i][j]=='.')	continue;
				else{
					int dir,x,y;
					if(s[i][j]=='^')	dir = 0;
					else if(s[i][j]=='>')	dir = 1;
					else if(s[i][j]=='v')	dir = 2;
					else	dir = 3;
					for(int k=0;k<4;k++,dir++){
						bl[k][i][j] = 1;
						x = i+op[dir][0], y = j+op[dir][1];
						while(x>=0 && x<N && y>=0 && y<M){
							if(s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G')
								bl[k][x][y] = 1;
							else	break;
							x += op[dir][0], y += op[dir][1];
						}
					}
				}
			}
		}
		d[0][stx][sty] = 0;
		queue <int> q;
		q.push(0);	q.push(stx);	q.push(sty);
		while(!q.empty()){
			int now = q.front();	q.pop();
			int x = q.front();	q.pop();
			int y = q.front();	q.pop();
			int nnow = (now+1)%4;
			in[now][x][y] = 0;
			for(int i=0;i<4;i++){
				int nx = x+op[i][0], ny = y+op[i][1];
				if(nx>=0 && nx<N && ny>=0 && ny<M && bl[nnow][nx][ny]==0 && d[now][x][y]+1<d[nnow][nx][ny]){
					d[nnow][nx][ny] = d[now][x][y]+1;
					if(in[nnow][nx][ny]==0){
						in[nnow][nx][ny] = 1;
						q.push(nnow);
						q.push(nx);
						q.push(ny);
					}
				}
			}
		}
		int ans = MAX;
		for(int i=0;i<4;i++)	ans = min(ans,d[i][edx][edy]);
		if(ans==MAX)	printf("Case #%d: impossible\n",t+1);
		else	printf("Case #%d: %d\n",t+1,ans);
	}
	
	return 0;
}
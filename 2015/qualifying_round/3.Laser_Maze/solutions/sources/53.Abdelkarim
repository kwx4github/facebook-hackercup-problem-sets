#include<bits/stdc++.h>
using namespace std;

bool CanNotMove[5][105][105];
string mp[105];

char dir[] = { '^', '>', 'v', '<' };
int di[] = { -1, 0, 1, 0 };
int dj[] = { 0, 1, 0, -1 };

int getdirID(char c) {
	for (int i = 0; i < 4; i++) {
		if (dir[i] == c)
			return i;
	}
	return -1;
}

int h, w;
void generateAllValidMaps() {
	memset(CanNotMove, 0, sizeof CanNotMove);
	for (int k = 0; k < 4; k++)
		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++) {
				if (!CanNotMove[k][i][j])
					CanNotMove[k][i][j] = (mp[i][j] != '.' && mp[i][j] != 'S'
							&& mp[i][j] != 'G');
				int dr = getdirID(mp[i][j]);
				if (dr != -1) {
					dr += k;
					dr %= 4;
					//cout<<k<<" "<<dr<<endl;
					int I = i + di[dr];
					int J = j + dj[dr];
					while (I >= 0 && J >= 0 && I < h && J < w) {

						if (mp[I][J] != '.' && mp[I][J] != 'S'
								&& mp[I][J] != 'G')
							break;
						//	cout<<dr <<" " << k <<" " <<I<<" "<<J<<endl;
						CanNotMove[k][I][J] = 1;
						I += di[dr];
						J += dj[dr];
					}
				}
			}

//	for(int i=0;i<h;i++){
//		for(int j=0;j<w;j++){
//			cout<<CanNotMove[2][i][j]<<" \n"[j==w-1];
//		}
//	}

}

int vis[4][100][100], ID = 0;
int BFS(int st, int g) {
	ID++;
	queue<pair<int, int> > Q;
	Q.push(make_pair(st, 0));

	while (Q.size()) {
		int cur = Q.front().first;
		int j = cur % 103;
		int i = cur / 103;
		int len = Q.front().second;
		int mapNumber = (len + 1) % 4;
//		cout<<i<<" "<<j<<" "<<len<<endl;
//		cout<<CanNotMove[len%4][i][j]<<endl;
		if (cur == g)
			return len;
		Q.pop();
		for (int _i = 0; _i < 4; _i++) {
			int I = i + di[_i];
			int J = j + dj[_i];
			if (I < 0 || I >= h || J < 0 || J >= w)
				continue;
			if (CanNotMove[mapNumber][I][J])
				continue;
			if (vis[mapNumber][I][J] == ID)
				continue;
			vis[mapNumber][I][J] = ID;
			Q.push(make_pair(I * 103 + J, len + 1));
		}
	}
	return -1;
}

int main() {
	freopen("in.in","r",stdin);
	freopen("out.out","w",stdout);
	int t;
	cin >> t;
	for (int nt = 1; nt <= t; nt++) {
		cin >> h >> w;
		for (int i = 0; i < h; i++) {
			cin >> mp[i];
		}
		generateAllValidMaps();
		int st, gl;
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				if (mp[i][j] == 'S')
					st = i * 103 + j;
				if (mp[i][j] == 'G')
					gl = i * 103 + j;
			}
		}
		int ans = BFS(st, gl);
		if (ans == -1) {
			printf("Case #%d: impossible\n", nt);
		} else {
			printf("Case #%d: %d\n", nt, ans);
		}
	}
}

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <deque>
#include <list>
#include <algorithm>
#include <numeric>
#include <functional>
#include <cmath>
#include <cstring>
#include <cctype>
#include <climits>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <complex>
using namespace std;
#define REP(i,n) for(int i = 0; i < (int)n; i++)
#define FOR(i,a,b) for(int i = a; i < (int)b; i++)
#define FOREQ(i,a,b) for(int i = a; i <= (int)b; i++)
#define FOREACH(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define ALL(c) (c).begin(), (c).end()
#define SZ(c) (c).size()
template <class T> void pp(T v) { FOREACH(it, v) cout << *it << ' '; cout << endl ; }
template <class T> void pp(T v, int n) { REP(i,n) cout<<v[i]<< ' '; cout << endl; }
template <class T> inline void chmax(T &a, const T b) { a = max(a, b); }
template <class T> inline void chmin(T &a, const T b) { a = min(a, b); }
typedef vector<int> vint;
typedef pair<int, int> pint;
typedef complex<double> P;
#define mp make_pair
typedef long long ll;
typedef long double ld;
typedef unsigned uint;
const int INF = 1<<28;
const double EPS = 1.0e-9;
static const int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};
#undef MOD_CALC
#ifdef MOD_CALC
const ll MOD = 1000 * 1000 * 1000 + 7;
inline void chadd(ll &a, const ll b) { a = (a + b) % MOD;}
inline ll add(const ll a, const ll b){ return (a + b) %  MOD;}
inline void chsub(ll &a, const ll b) { a = (a - b + MOD) % MOD;}
inline ll sub(const ll a, const ll b){ return (a - b + MOD) % MOD; }
inline void chmul(ll &a, const ll b) { a = (a * b) %  MOD;}
inline ll mul(const ll a, const ll b){ return (a * b) %  MOD;}
#endif
const int SIZE = 128;
int a[SIZE][SIZE];
int b[SIZE][SIZE][4];
bool visited[SIZE][SIZE][4];
int solve() {
	const int dh[] = {0, 1, 0, -1};
	const int dw[] = {1, 0, -1, 0};
	int H, W, sh, sw, gh, gw;
	cin>>H>>W;
	REP(h,H) {
		string line; cin>>line;
		REP(w,W) {
			switch (line[w]) {
			case 'S': b[h][w][0] = 0; a[h][w] = -2; sh = h; sw = w; break;
			case 'G': b[h][w][0] = 0; a[h][w] = -2; gh = h; gw = w; break;
			case '.': b[h][w][0] = 0; a[h][w] = -2; break;
			case '>': b[h][w][0] = 1; a[h][w] = 0; break;
			case 'v': b[h][w][0] = 1; a[h][w] = 1; break;
			case '<': b[h][w][0] = 1; a[h][w] = 2; break;
			case '^': b[h][w][0] = 1; a[h][w] = 3; break;
			case '#': b[h][w][0] = 1; a[h][w] = -1; break;
			}
			REP(d,4) b[h][w][d] = b[h][w][0];
		}
	}
	REP(h,H) {
		REP(w,W) {
			if(a[h][w] >= 0 && a[h][w] <= 3) {
				REP(d,4) {
					const int nd = (a[h][w] + d) % 4;
					int nh = h + dh[nd];
					int nw = w + dw[nd];
					//cout << h << w << nh << nw << nd << endl;
					while(nh >= 0 && nh < H && nw >= 0 && nw < W && a[nh][nw] == -2) {
						//cout << nh << nw << nd << endl;
						b[nh][nw][d] = 1;
						nh += dh[nd];
						nw += dw[nd];
					}
				}
			}
		}
	}
#ifdef DEBUG
	REP(d,4) {
		cout << "D=" << d << endl;
		REP(h,H) {
			REP(w,W) {
				cout << (b[h][w][d] ? '#' : '.');
			}
			cout << endl;
		}
	}
#endif
	memset(visited, false, sizeof(visited));
	visited[sh][sw][0] = true;
	vector<pint> q[2];
	q[0].push_back(make_pair(sh, sw));
	for(int t = 0; ; t++) {
		const int from = t % 2, to = 1 - from;
#ifdef DEBUG
		cout << t << "," << q[from].size() << endl;
#endif
		q[to].clear();
		if(q[from].empty()) break;
		REP(i, q[from].size()) {
			const int ch = q[from][i].first;
			const int cw = q[from][i].second;
#ifdef DEBUG
			cout << "P" <<ch << cw << endl;
#endif
			if(ch == gh && cw == gw) return t; // Goal!!!!
			REP(d,4) {
				const int nh = ch + dh[d];
				const int nw = cw + dw[d];
#ifdef DEBUG
				cout << "D=" << d << nh << nw << endl;
#endif
				if(nh >= 0 && nh < H && nw >= 0 && nw < W) {
					const int nt = (t+1) % 4;
#ifdef DEBUG
					cout << nh << nw << nt << b[nh][nw][nt] << visited[nh][nw][nt] << endl;
#endif
					if(b[nh][nw][nt] == false) {
						if(visited[nh][nw][nt] == false) {
							visited[nh][nw][nt] = true;
							q[to].push_back(make_pair(nh, nw));
						}
					}
				}
			}
		}
	}
	return -1;
}

int main(void)
{
	int T; cin >> T;
	for(int case_no = 1; case_no <= T; case_no ++) {
		int ans = solve();
		printf("Case #%d: " , case_no);
		if(ans < 0) {
			printf("impossible");
		} else {
			printf("%d", ans);
		}
		puts("");
		//if(case_no== 2) break;
	}
	return 0;
}

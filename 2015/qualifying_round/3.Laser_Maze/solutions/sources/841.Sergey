#if 1
#include <functional>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <sstream>
#include <numeric>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <list>
 
using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair<int, int> pii;
 
const LD eps = 1e-9;
const LD pi = acos(-1.0);
const LL inf = 1e+9;
 
#define mp make_pair
#define pb push_back
#define X first
#define Y second
 
#define dbg(x) { cerr << #x << " = " << x << endl; }
 
// extended template
#pragma comment(linker, "/STACK:36777216")
typedef vector<int> vi;
typedef vector<vi> vvi;
 
#define forn(i, n) for (int i = 0; i < n; ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
 
template<typename T> istream & operator >> (istream &, vector<T> &);
template<typename T> ostream & operator << (ostream &, const vector<T> &);
 
#define START clock_t _clock = clock();
#define END cerr << endl << "time: " << (clock() - _clock) / LD(CLOCKS_PER_SEC) << endl;
 
#define NAME "improvements"

const int maxn = 110;
bool good[maxn][maxn][4];
int  dist[maxn][maxn][4];

struct state_t
{
    int x, y, t;
    state_t() {}
    state_t(int x, int y, int t) : x(x), y(y), t(t) {}
};

const string ss = "^>v<";

bool laser(char c) { return ss.find(c) != -1; }
char rotate(char c, int t) { return ss[(ss.find(c) + t) % 4]; }

int solve()
{
    int n, m;
    cin >> n >> m;
    vector<string> a(n);
    cin >> a;

    memset(good, true, sizeof(good));
    forn(x, n)
        forn(y, m)
            forn(t, 4)
            {
                if (a[x][y] == '#' || laser(a[x][y]))
                    good[x][y][t] = false;

                for (int yy = y; yy >= 0 && a[x][yy] != '#'; --yy)
                    if (laser(a[x][yy]))
                    {
                        if (rotate(a[x][yy], t) == '>')
                            good[x][y][t] = false;
                        break;
                    }

                for (int yy = y; yy < m && a[x][yy] != '#'; ++yy)
                    if (laser(a[x][yy]))
                    {
                        if (rotate(a[x][yy], t) == '<')
                            good[x][y][t] = false;
                        break;
                    }

                for (int xx = x; xx >= 0 && a[xx][y] != '#'; --xx)
                    if (laser(a[xx][y]))
                    {
                        if (rotate(a[xx][y], t) == 'v')
                            good[x][y][t] = false;
                        break;
                    }

                for (int xx = x; xx < n && a[xx][y] != '#'; ++xx)
                    if (laser(a[xx][y]))
                    {
                        if (rotate(a[xx][y], t) == '^')
                            good[x][y][t] = false;
                        break;
                    }
            }

    int xs = 0, ys = 0;
    int xg = 0, yg = 0;
    forn(x, n)
        forn(y, m)
        {
            if (a[x][y] == 'S')
                xs = x, ys = y;
            if (a[x][y] == 'G')
                xg = x, yg = y;
        }

    //if (!good[xs][ys][0])
    //    return -1;

    memset(dist, -1, sizeof(dist));
    dist[xs][ys][0] = 0;

    queue<state_t> q; q.push(state_t(xs, ys, 0));

    const int dx[4] = {1,  0, -1,  0};
    const int dy[4] = {0, -1,  0,  1};

    while (q.size())
    {
        int x = q.front().x;
        int y = q.front().y;
        int t = q.front().t;
        q.pop();

        forn(i, 4)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            int nt = (t + 1) % 4;
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && good[nx][ny][nt] && dist[nx][ny][nt] == -1)
            {
                dist[nx][ny][nt] = dist[x][y][t] + 1;
                q.push(state_t(nx, ny, nt));
            }
        }
    }
    int res = -1;
    forn(t, 4)
        if (dist[xg][yg][t] != -1)
            if (res == -1 || dist[xg][yg][t] < res)
                res = dist[xg][yg][t];

    return res;
}
 
int main()
{
    // freopen(NAME ".in", "r", stdin); freopen(NAME ".out", "w", stdout);
    freopen("laser_maze.txt", "r", stdin); freopen("output.txt", "w", stdout);
 
    ios_base::sync_with_stdio(false);

    int t; cin >> t;
    forn(i, t) 
    {
        int res = solve();
        cout << "Case #" << i + 1 << ": ";
        if (res == -1)
            cout << "impossible" << endl;
        else
            cout << res << endl;
    }
 
    return 0;
}
/*******************************************
*******************************************/
 
template<typename T> istream & operator >> (istream &is, vector<T> &v)
{
    forn(i, v.size())
        is >> v[i];
    return is;
}
template<typename T> ostream & operator << (ostream &os, const vector<T> &v)
{
    forn(i, v.size())
        os << v[i] << " ";
    return os;
}
#endif
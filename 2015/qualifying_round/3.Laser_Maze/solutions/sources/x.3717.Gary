#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
#include<map>
#include<set>
using namespace std;
#define INF (1<<29)
#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define FOR(i,x,y) for(int i=(x);i<(y);++i)
#define FOE(i,x,y) for(int i=(x);i<=(y);++i)
#define CLR(i) memset(i,0,sizeof(i))
#define ll long long

int T,M,N;
char s[200][200];
bool visit[200][200][10];
int dist[200][200][10];
int tx,ty;

int d[4][2] = {{1,0},{0,-1},{-1,0},{0,1}};
char tur[4] = {'^','>','v','<'};

struct node{
	int x,y,cnt;

	node(){}
	node(int x,int y,int cnt):x(x),y(y),cnt(cnt){}

	bool operator<(const node &d)const{
		return cnt > d.cnt;
	}

	bool isVisited(){
		return visit[x][y][cnt%4];
	}

	void go(){
		visit[x][y][cnt%4] = 1;
		dist[x][y][cnt%4] = cnt;
	}

	void output(){
		printf("%d %d %d\n",x,y,cnt);
	}
};

priority_queue<node> q;

bool check(int x,int y,int dir){
	if ((x < 0) || (x >= M)) return 0;
	if ((y < 0) || (y >= N)) return 0;

	if (visit[x][y][dir]) return 0;
	if (s[x][y] == '#') return 0;
	FOR(i,0,4) if (s[x][y] == tur[i]) return 0;

	FOR(i,0,4){
		int tx = x,ty = y;
		while (1){
			tx += d[i][0]; ty += d[i][1];
			if ((tx < 0) || (tx >= M)) break;
			if ((ty < 0) || (ty >= N)) break;
			if (s[tx][ty] == '#') break;

			if (s[tx][ty] == tur[(i + 4 - dir)%4]) return 0;
		}
	}
	return 1;
}

int main(){
	scanf("%d",&T);
	FOE(t,1,T){
		CLR(visit);
		CLR(dist);
		while (!q.empty()) q.pop();

		scanf("%d%d",&M,&N); gets(s[0]);
		FOR(i,0,M){
			gets(s[i]);
			
			FOR(j,0,N){
				if (s[i][j] == 'S') q.push(node(i,j,0));
				if (s[i][j] == 'G') tx=i,ty=j;
			}
		}

		while (!q.empty()){
			node tmp = q.top(); q.pop();
			if (tmp.isVisited()) continue;
			tmp.go();

			//puts("TRY");
			//tmp.output();

			FOR(i,0,4){
				node tmp2 = tmp;
				tmp2.x += d[i][0]; tmp2.y += d[i][1]; ++tmp2.cnt;
				int dir = tmp2.cnt%4;

				//tmp2.output();
				if (check(tmp2.x,tmp2.y,dir)) q.push(tmp2);
			}
		}

		bool flag = 0;
		int ans = INF;
		FOR(i,0,4){
			if (visit[tx][ty][i]){
				ans = min(ans,dist[tx][ty][i]);
				flag = 1;
			}
		}
		if (flag) printf("Case #%d: %d\n",t,ans);
		else printf("Case #%d: impossible\n",t);
	}

	return 0;
}

#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define FOR(i, A, B) for(int i=(A); i<(B); i++)
#define REP(i, N) for(int i=0; i<(N); i++)
#define SZ(v) ((int)(v).size())
#define ALL(v) (v).begin(), (v).end()
#define SORT(v) sort(ALL(v))
#define MP make_pair
#define PB push_back
#define VI vector<int>
#define VS vector<string>
#define PII pair<int, int>
#define X first
#define Y second
#define LL long long

int aabs(int a) { return (a<0)?-a:a; }
int mmax(int a, int b) { return (a>b)?a:b; }
int mmin(int a, int b) { return (a<b)?a:b; }

int M, N;
string field[101];
int si, sj, gi, gj;
bool badstate[101][101][4];
bool visited[101][101][4];
int dis[101][101];

#define LEFT 0
#define UP 1
#define RIGHT 2
#define DOWN 3

bool isempty(int i, int j) {
	return field[i][j] == '.' or field[i][j] == 'S' or field[i][j] == 'G';
}

void markbad(int i, int j, int dir, int t) {
	
	dir %= 4;
	
	if(dir == LEFT) {
		while(--j >= 0) {
			if(!isempty(i, j)) break;
			badstate[i][j][t] = true;
		}
	} else if (dir == UP) {
		while(--i >= 0) {
			if(!isempty(i, j)) break;
			badstate[i][j][t] = true;
		}
	} else if (dir == RIGHT) {
		while(++j < N) {
			if(!isempty(i, j)) break;
			badstate[i][j][t] = true;
		}
	} else if (dir == DOWN) {
		while(++i < M) {
			if(!isempty(i, j)) break;
			badstate[i][j][t] = true;
		}
	}
}

struct node {
	int i, j, t, d;
};


int main()
{
	int T;
	cin >> T;
	
	REP(caso, T) {
		cin >> M >> N;
		REP(i, M) cin >> field[i];
		
		memset(badstate, false, sizeof(badstate));
		
		REP(i, M) REP(j, N) {
			
			if(field[i][j] == 'S') si = i, sj = j;
			if(field[i][j] == 'G') gi = i, gj = j;
			
			int first = -1;
			if(field[i][j] == '<') first = LEFT;
			if(field[i][j] == '^') first = UP;
			if(field[i][j] == '>') first = RIGHT;
			if(field[i][j] == 'v') first = DOWN;
			
			if(first < 0) continue;
			
			markbad(i, j, first, 0);
			markbad(i, j, first+1, 1);
			markbad(i, j, first+2, 2);
			markbad(i, j, first+3, 3);
		}
		
		
		queue<node> q;
		memset(visited, false, sizeof(visited));
		memset(dis, -1, sizeof(dis));
		
		
		node n;
		n.i = si, n.j = sj, n.t = 0, n.d = 0;
		q.push(n);
		visited[si][sj][0] = true;	
		
		while(!q.empty()) {
			node n = q.front();
			q.pop();
			
			if(n.i == gi and n.j == gj) break;
			
			if(n.i-1 >= 0 and isempty(n.i-1, n.j) and not badstate[n.i-1][n.j][(n.t+1)%4] and not visited[n.i-1][n.j][(n.t+1)%4]) {
				node nn;
				nn.i = n.i-1;
				nn.j = n.j;
				nn.t = (n.t+1)%4;
				nn.d = n.d + 1;
				if(dis[nn.i][nn.j] < 0 or dis[nn.i][nn.j] > nn.d) dis[nn.i][nn.j] = nn.d;
				q.push(nn);
				visited[nn.i][nn.j][nn.t] = true;
			}
			if(n.i+1 < M and isempty(n.i+1, n.j) and not badstate[n.i+1][n.j][(n.t+1)%4] and not visited[n.i+1][n.j][(n.t+1)%4]) {
				node nn;
				nn.i = n.i+1;
				nn.j = n.j;
				nn.t = (n.t+1)%4;
				nn.d = n.d + 1;
				if(dis[nn.i][nn.j] < 0 or dis[nn.i][nn.j] > nn.d) dis[nn.i][nn.j] = nn.d;
				q.push(nn);
				visited[nn.i][nn.j][nn.t] = true;
			}
			if(n.j-1 >= 0 and isempty(n.i, n.j-1) and not badstate[n.i][n.j-1][(n.t+1)%4] and not visited[n.i][n.j-1][(n.t+1)%4]) {
				node nn;
				nn.i = n.i;
				nn.j = n.j-1;
				nn.t = (n.t+1)%4;
				nn.d = n.d + 1;
				if(dis[nn.i][nn.j] < 0 or dis[nn.i][nn.j] > nn.d) dis[nn.i][nn.j] = nn.d;
				q.push(nn);
				visited[nn.i][nn.j][nn.t] = true;
			}
			if(n.j+1 < N and isempty(n.i, n.j+1) and not badstate[n.i][n.j+1][(n.t+1)%4] and not visited[n.i][n.j+1][(n.t+1)%4]) {
				node nn;
				nn.i = n.i;
				nn.j = n.j+1;
				nn.t = (n.t+1)%4;
				nn.d = n.d + 1;
				if(dis[nn.i][nn.j] < 0 or dis[nn.i][nn.j] > nn.d) dis[nn.i][nn.j] = nn.d;
				q.push(nn);
				visited[nn.i][nn.j][nn.t] = true;
			}
		}
		
		cout << "Case #" << caso+1 << ": ";
		if(dis[gi][gj] < 0) cout << "impossible";
		else cout << dis[gi][gj];
		cout << endl;
	}
	
}









// User :: lovelotus ( Prem Kamal )

//#include<bits/stdc++.h>
//#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<cassert>
#include<iostream>
#include<algorithm>
#include<string>
#include<utility>
#include<cctype>
#include<stack>
#include<queue>
#include<vector>
#include<map>
#include<set>
#include<deque>

#define lli long long int
#define ulli unsigned long long int
#define F first
#define S second
#define pii pair<int,int>
#define pip pair<int,pii>
#define pis pair<int,string>
#define pll pair<lli,lli>

using namespace std;

char smz[101][101];
int mz[101][101],vis[101][101];
int tx[]={0,-1,1,0};
int ty[]={-1,0,0,1};
int r,c;

int value( char x)
{
    if(x=='S' || x=='G' || x=='.') return 0;
    return -1;
}

int valid(int i, int j, int val)
{
    if(i<0 || j<0 || i>=r || j>=c) return 0;
    if((1<<val) & mz[i][j]) return 0;
    return 1;
}

int bfs( int i, int j)
{
    queue<pip>q;
    memset(vis,0,sizeof(vis));
    q.push(pip(0,pii(i,j)));
    vis[i][j]=1;
    while(!q.empty())
    {
        pii nxt=q.front().S;
        int val=q.front().F;
        q.pop();
        i=nxt.F;
        j=nxt.S;
        //printf("%d %d -> %d\n",i,j,val);
        int temp = (val+1)%4;
        if(smz[i][j]=='G') return val;
        for(int p=0;p<4;p++)
        {
            int i1=i+tx[p];
            int j1=j+ty[p];
            if(valid(i1,j1,temp))
            {
                if((vis[i1][j1]&(1<<temp))==0)
                {
                    vis[i1][j1]|=(1<<temp);
                    q.push(pip(val+1,pii(i1,j1)));
                }
            }
        }
    }
    return -1;
}

int main()
{
    int t,i,j,k,tst=1;
    freopen("C:\\Users\\lovelotus\\Desktop\\input.txt","r",stdin);
    freopen("C:\\Users\\lovelotus\\Desktop\\output.txt","w",stdout);
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&r,&c);
        for(i=0;i<r;i++) scanf("%s",smz[i]);
        for(i=0;i<r;i++)
        {
            for(j=0;j<c;j++)
            {
                mz[i][j]=value(smz[i][j]);
            }
        }
        for(i=0;i<r;i++)
        {
            for(j=0;j<c;j++)
            {
                if(smz[i][j]=='^')
                {
                    for(k=j+1;k<c;k++)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<1);
                    }
                    for(k=j-1;k>=0;k--)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<3);
                    }
                    for(k=i+1;k<r;k++)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<2);
                    }
                    for(k=i-1;k>=0;k--)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<0);
                    }
                }
                else if(smz[i][j]=='>')
                {
                    for(k=j+1;k<c;k++)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<0);
                    }
                    for(k=j-1;k>=0;k--)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<2);
                    }
                    for(k=i+1;k<r;k++)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<1);
                    }
                    for(k=i-1;k>=0;k--)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<3);
                    }
                }
                else if(smz[i][j]=='v')
                {
                    for(k=j+1;k<c;k++)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<3);
                    }
                    for(k=j-1;k>=0;k--)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<1);
                    }
                    for(k=i+1;k<r;k++)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<0);
                    }
                    for(k=i-1;k>=0;k--)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<2);
                    }
                }
                else if(smz[i][j]=='<')
                {
                    for(k=j+1;k<c;k++)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<2);
                    }
                    for(k=j-1;k>=0;k--)
                    {
                        if(mz[i][k]==-1) break;
                        else mz[i][k]|=(1<<0);
                    }
                    for(k=i+1;k<r;k++)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<3);
                    }
                    for(k=i-1;k>=0;k--)
                    {
                        if(mz[k][j]==-1) break;
                        else mz[k][j]|=(1<<1);
                    }
                }
            }
        }
        /*for(i=0;i<r;i++)
        {
            for(j=0;j<c;j++)
            {
                printf("%d ",mz[i][j]);
            }
            printf("\n");
        }*/
        int f=0;
        for(i=0;i<r;i++)
        {
            for(j=0;j<c;j++)
            {
                if(smz[i][j]=='S')
                {
                    f=1;
                    break;
                }
            }
            if(f) break;
        }
        int ans = bfs(i,j);

        if(ans!=-1) printf("Case #%d: %d\n",tst,ans);
        else printf("Case #%d: impossible\n",tst);
        tst++;
    }
    return 0;
}

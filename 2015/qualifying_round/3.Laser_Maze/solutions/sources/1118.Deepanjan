#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stdio.h>
#include <queue>
#include <limits.h>
#include <math.h>
#include <string.h>
#include<queue>
using namespace std;
bool recurse(vector<int> &a,vector<int> &b,vector<int> &c,int sum1,int sum2,int sum3,int A,int B,int C,int i){
	
	if(sum1==A && sum2==B && sum3==C) return true;
	if(i==a.size())return false;
	else{
		return recurse(a,b,c,sum1,sum2,sum3,A,B,C,i+1) || recurse(a,b,c,sum1+a[i],sum2+b[i],sum3+c[i],A,B,C,i+1);
	}
return false;
}
int main()
{
	ios_base::sync_with_stdio(false);
	int t;
	cin>>t;
	for(int k=1;k<=t;k++){
		cout<<"Case #"<<k<<": ";
		int m,n;
		cin>>m>>n;
		vector<string> a(m),b(m),c(m),d(m);
		int index1,index2,index3,index4;
		for(int i=0;i<m;i++){
			cin>>a[i];
			c[i]=a[i];
			b[i]=a[i];
			d[i]=a[i];
			for(int j=0;j<n;j++){
				if(a[i][j]=='S'){
					index1=i;
					index2=j;				
				}
				else if(a[i][j]=='G'){
					index3=i;
					index4=j;				
				}
				if(a[i][j]=='^'){
					b[i][j]='>';
					c[i][j]='v';
					d[i][j]='<';				
				}
				else if(a[i][j]=='>'){
					b[i][j]='v';
					c[i][j]='<';
					d[i][j]='^';				
				}
				else if(a[i][j]=='v'){
					b[i][j]='<';
					c[i][j]='^';
					d[i][j]='>';				
				}
				else if(a[i][j]=='<'){
					b[i][j]='^';
					c[i][j]='>';
					d[i][j]='v';				
				}
			}		
		}
		vector<vector<int> > a2(m,vector<int>(n));
		vector<vector<int> > b2(m,vector<int>(n));
		vector<vector<int> > c2(m,vector<int>(n));
		vector<vector<int> > d2(m,vector<int>(n));
		for(int i=0;i<m;i++){
			int previous=0;
			for(int j=0;j<n;j++){
				if(a[i][j]=='v' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='#' ){
					previous=j;				
				}
				a2[i][j]=previous;
				//cout<<a2[i][j]<<" ";
			}
			//cout<<endl;
			previous=n-1;
			for(int j=n-1;j>=0;j--){
				if(a[i][j]=='v' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='#' ){
					previous=j;				
				}
				b2[i][j]=previous;
			}
		}
		for(int j=0;j<n;j++){
			int previous=0;
			for(int i=0;i<m;i++){
				if(a[i][j]=='v' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='#'){
					previous=i;				
				}
				c2[i][j]=previous;
				//cout<<c2[i][j];			
			}
			
			previous=m-1;
			for(int i=m-1;i>=0;i--){
				if(a[i][j]=='v' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='#'){
					previous=i;				
				}
				d2[i][j]=previous;
			}
		}
		vector<vector<bool> > a1(m,vector<bool>(n,false));
		vector<vector<bool> > b1(m,vector<bool>(n,false));
		vector<vector<bool> > c1(m,vector<bool>(n,false));
		vector<vector<bool> > d1(m,vector<bool>(n,false)); 
		queue<int> x,y,step;int steps;
		x.push(index1);
		y.push(index2);
		step.push(0);
		
		while(true){
			if(x.empty()){cout<<"impossible\n";break;}
			int x1=x.front(),y1=y.front(),steps=step.front();
			x.pop();y.pop();step.pop();
			if(x1>=m || x1<0 ||y1>=n || y1<0)continue;			
			//cout<<x1<<" "<<y1<<" "<<steps<<" "<<c2[0][2]<<endl;
			if(steps%4==0 && a1[x1][y1]){continue;}
			else if(steps%4==1 && b1[x1][y1]){continue;}
			else if(steps%4==2 && c1[x1][y1]){continue;}
			else if(steps%4==3 && d1[x1][y1]){continue;}
				
			if(steps%4==0 && (a[x1][a2[x1][y1]]=='>' || a[x1][b2[x1][y1]]=='<'|| a[c2[x1][y1]][y1]=='v' || a[d2[x1][y1]][y1]=='^') && steps!=0 ){continue;}
			else if(steps%4==1 && (b[x1][a2[x1][y1]]=='>' || b[x1][b2[x1][y1]]=='<'|| b[c2[x1][y1]][y1]=='v' || b[d2[x1][y1]][y1]=='^') && steps!=0){continue;}
			else if(steps%4==2 && (c[x1][a2[x1][y1]]=='>' || c[x1][b2[x1][y1]]=='<'|| c[c2[x1][y1]][y1]=='v' || c[d2[x1][y1]][y1]=='^') && steps!=0){continue;}
			else if(steps%4==3 && (d[x1][a2[x1][y1]]=='>' || d[x1][b2[x1][y1]]=='<'|| d[c2[x1][y1]][y1]=='v' || d[d2[x1][y1]][y1]=='^') && steps!=0){continue;}
			
			if(a[x1][y1]=='G'){cout<<steps<<endl;break;}
			else if(a[x1][y1]=='#' || a[x1][y1]== '^' || a[x1][y1]== '>' || a[x1][y1]== '<' || a[x1][y1]=='v'){}
			else{
				if(steps%4==0){a1[x1][y1]=true;}
				else if(steps%4==1){b1[x1][y1]=true;}
				else if(steps%4==2){c1[x1][y1]=true;}
				else if(steps%4==3){d1[x1][y1]=true;}				
			 	steps++;
				x.push(x1+1);
				y.push(y1);
				step.push(steps);
				x.push(x1-1);
				y.push(y1);
				step.push(steps);
				y.push(y1+1);
				x.push(x1);
				step.push(steps);
				y.push(y1-1);
				x.push(x1);
				step.push(steps);
				
			}
		}
	}
}


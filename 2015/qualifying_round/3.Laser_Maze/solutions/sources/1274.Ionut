r = open('laser_maze.txt', 'r')
w = open('laser_maze_output.txt', 'w')
T = int(r.readline())
#print T

def gLinie(maze, pos, direct):
    i, j = pos
    di, dj = direct
    M = len(maze)
    N = len(maze[0])
    i += di 
    j += dj
    block = set(['#', '^', '>', 'v', '<'])
    while 0 <= i < M and 0 <= j < N and maze[i][j] not in block: 
        maze[i][j] = 'L'
        i += di
        j += dj

def gMaze(maze, laser):
    ceas = [(-1, 0), (0, 1), (1, 0), (0, -1)]
    direct = {'^':0, '>':1, 'v':2, '<':3}
    maze_alege = []
    for i in range(4):
        new_maze = [row[:] for row in maze]
        for key in laser:
            for pos in laser[key]:
                gLinie(new_maze, pos, ceas[(i + direct[key]) % 4])
        maze_alege += [new_maze[:]]
    return maze_alege

for t in range(T):
    M, N = map(lambda x : int(x), r.readline().split())
    #print M, N
    maze = [['#'] * N for _ in range(M)]
    laser = {'^':[], '>':[], 'v':[], '<':[]}
    for i in range(M):
        row = r.readline().strip()
        for j in range(N):
            maze[i][j] = row[j]
            if row[j] in laser:
                laser[row[j]] += [(i,j)]
            elif row[j] == 'S':
                maze[i][j] = '.'
                start = (i, j)
    maze_alege = gMaze(maze, laser)
    queue = [start]
    step = 0
    win = False
    while queue:
        size = len(queue)
        step += 1
        for k in range(size):
            acest_maze = maze_alege[step % 4]
            i, j = queue.pop(0)
            if 0 < i:
                if acest_maze[i - 1][j] == '.':
                    queue += [(i - 1, j)]
                    acest_maze[i - 1][j] = '#'
                elif acest_maze[i - 1][j] == 'G':
                    win = True
                    break
            if i < (M - 1):
                if acest_maze[i + 1][j] == '.':
                    queue += [(i + 1, j)]
                    acest_maze[i + 1][j] = '#'
                elif acest_maze[i + 1][j] == 'G':
                    win = True
                    break
            if 0 < j:
                if acest_maze[i][j - 1] == '.':
                    queue += [(i, j - 1)]
                    acest_maze[i][j - 1] = '#'
                elif acest_maze[i][j - 1] == 'G':
                    win = True
                    break
            if j < (N - 1):
                if acest_maze[i][j + 1] == '.':
                    queue += [(i, j + 1)]
                    acest_maze[i][j + 1] = '#'
                elif acest_maze[i][j + 1] == 'G':
                    win = True
                    break
        if win:
            break
    #print "Case #" + str(t + 1) + ': ' + (str(step) if win else 'impossible')
    w.write("Case #" + str(t + 1) + ': ' + (str(step) if win else 'impossible') + '\n')
r.close()
w.close()
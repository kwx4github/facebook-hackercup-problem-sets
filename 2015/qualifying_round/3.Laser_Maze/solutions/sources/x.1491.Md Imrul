#!/usr/bin/ruby
gets.to_i.times{|cas|
m, n = gets.split.map(&:to_i)
maze = m.times.map{gets.strip}
source, goal = [], []
m.times{|r|n.times{|c|
    source = [r+1, c+1] if maze[r][c]=='S'
    goal = [r+1, c+1] if maze[r][c]=='G'
    maze[r][c] = '.'  if maze[r][c]=='S' or maze[r][c]=='G'
}}
layer = ["#"*(n+2)] + maze.map{|l| "##{l}#"} + ["#"*(n+2)]
field = [(m+2).times.map{'#'*(n+2)}]
direction = {'^'=>[-1,0], '>'=>[0,1], 'v'=>[1,0], '<'=>[0,-1]}
4.times{
    layer = layer.map{|l|l.tr('#.^>v<', '#.>v<^')}
    expand = layer.map{|l| l.dup}
    (1..m).each{|r|(1..n).each{|c|
        if direction.key?(layer[r][c])
            d = direction[layer[r][c]]
            rr, cc = r, c
            while layer[rr][cc] != '#'
                expand[rr][cc] = layer[r][c]
                rr += d[0]
                cc += d[1]
            end
        end
    }}
    field += [expand]
}
field << (m+2).times.map{'#'*(n+2)}
dist = 6.times.map{(m+2).times.map{[0]*(n+2)}}
moves = [[-1, 0], [0, 1], [1, 0], [0, -1]]
queue = []
curr = [4, source[0], source[1], 0]
for m in moves
    queue << [curr[0] % 4 + 1, curr[1]+m[0], curr[2]+m[1],  curr[3]+1]
end
result = nil
until queue.empty?
    curr = queue.shift
    next unless field[curr[0]][curr[1]][curr[2]] == '.'
    next unless dist[curr[0]][curr[1]][curr[2]] == 0
    dist[curr[0]][curr[1]][curr[2]] = curr[3]
    if curr[1] == goal[0] and curr[2] == goal[1]
        if result == nil or result > curr[3]
            result = curr[3]
        end
    end
    for m in moves
        queue << [curr[0] % 4 + 1, curr[1]+m[0], curr[2]+m[1],  curr[3]+1]
    end
end
puts "Case ##{cas+1}: #{result ? result : 'impossible'}"
}
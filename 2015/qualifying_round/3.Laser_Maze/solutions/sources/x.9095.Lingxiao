#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
using namespace std;

map<char, char> nextM = {{'>', 'v'}, {'v', '<'}, {'<', '^'}, {'^', '>'}};
map<char, pair<int, int>> dirM = {{'>', {0, 1}}, {'v', {1, 0}}, {'<', {0, -1}}, {'^', {-1, 0}}};
char board[111][111];
bool obs[4][111][111];
int dist[4][111][111];

int main() {
  freopen("t.in", "r", stdin);
  freopen("t.out", "w", stdout);
  int TST;
  scanf("%d", &TST);
  for (int tst = 1; tst <= TST; tst++) {
    printf("Case #%d: ", tst);
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++)
      scanf("%s", board[i]);
    pair<int, int> sp, tp;
    for (int t = 0; t < 4; t++) {
      memset(obs[t], 0, sizeof(obs[t]));
      for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
          if (board[i][j] == '#') {
            obs[t][i][j] = true;
          } else if (dirM.count(board[i][j])) {
            int x = i, y = j;
            auto dir = dirM[board[i][j]];
            while (0 <= x && x < n && 0 <= y && y < m) {
              obs[t][x][y] = true;
              x += dir.first; 
              y += dir.second;
              if (0 <= x && x < n && 0 <= y && y < m 
                  && (board[x][y] == '#' || dirM.count(board[x][y])))
                break;
            }
            board[i][j] = nextM[board[i][j]];
          } else if (board[i][j] == 'S') {
            sp = make_pair(i, j);
          } else if (board[i][j] == 'G') {
            tp = make_pair(i, j);
          }
        }
    }
    memset(dist, -1, sizeof(dist));
    vector<pair<pair<int, int>, int>> Q;
    dist[0][sp.first][sp.second] = 0;
    Q.push_back(make_pair(sp, 0));
    for (int i = 0; i < (int)Q.size(); i++) {
      auto u = Q[i];
      for (auto dirpir : dirM) {
        auto v = make_pair(make_pair(u.first.first + dirpir.second.first, u.first.second + dirpir.second.second), u.second + 1);
        if (0 <= v.first.first && v.first.first < n
            && 0 <= v.first.first && v.first.second < m)
          if (!obs[v.second % 4][v.first.first][v.first.second]
              && dist[v.second % 4][v.first.first][v.first.second] == -1) {
            dist[v.second % 4][v.first.first][v.first.second] = v.second;
            Q.push_back(v);
          }
      }

    }
    int ans = -1;
    for (int t = 0; t < 4; t++) {
      int tmp = dist[t][tp.first][tp.second];
      if (tmp != -1)
        ans = ans == -1 ? tmp : min(ans, tmp);
    }
    if (ans == -1) printf("impossible\n");
    else printf("%d\n", ans);
  }
}

// Author: Harhro94 [Harutyunyan Hrayr]
#pragma comment(linker, "/STACK:66777216")
#define _CRT_SECURE_NO_WARNINGS
//#include <unordered_set>
//#include <unordered_map>
#include <functional>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <cassert>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdio>
#include <bitset>
#include <string>
#include <vector>
#include <ctime>
#include <queue>
#include <stack>
#include <cmath>
#include <set>
#include <map>
using namespace std;

#define FOR(i, n) for (int i = 0; i < (n); ++i)
typedef pair<int, int> pii;
typedef long long LL;
typedef long double LD;
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()
#define sz(v) (int)(v).size()

const int dx[4] = { -1, 0, 1, 0 };
const int dy[4] = { 0, 1, 0, -1 };
const int N = 107;
const int INF = 1 << 29;

int n, m, dist[4 * N * N];
char st[N][N];
bool bad[4][N][N];

inline int number(int x, int y, int t) {
   return (m * x + y) * 4 + t;
}

int getDir(char c, int t) {
   if (c == '^') return t;
   if (c == '>') return (t + 1) % 4;
   if (c == 'v') return (t + 2) % 4;
   return (t + 3) % 4;
}

void solve()
{
   int T;
   cin >> T;
   for (int test = 1; test <= T; ++test) {

      cin >> n >> m;
      int sx = -1, sy = -1, gx = -1, gy = -1;
      for (int i = 0; i < n; ++i) {
         cin >> st[i];
         for (int j = 0; j < m; ++j) {
            if (st[i][j] == 'S') {
               sx = i;
               sy = j;
               st[i][j] = '.';
            }
            if (st[i][j] == 'G') {
               gx = i;
               gy = j;
               st[i][j] = '.';
            }
         }
      }
      assert(sx != -1 && sy != -1 && gx != -1 && gy != -1);

      for (int t = 0; t < 4; ++t) {
         for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
               bad[t][i][j] = false;
            }
         }
         for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
               if (st[i][j] == '<' || st[i][j] == '>' || st[i][j] == 'v' || st[i][j] == '^') {
                  int dir = getDir(st[i][j], t);
                  int x = i, y = j;
                  while (true) {
                     x += dx[dir];
                     y += dy[dir];
                     if (x < 0 || y < 0 || x >= n || y >= m) break;
                     if (st[x][y] == '.')  bad[t][x][y] = true;
                     else break;
                  }
               }
            }
         }
      }

      for (int i = 0; i < n * m * 4; ++i) {
         dist[i] = INF;
      }
      dist[number(sx, sy, 0)] = 0;
      set<pii> S;
      S.insert(mp(0, number(sx, sy, 0)));

      while (!S.empty()) {
         int d = S.begin()->first;
         int id = S.begin()->second;
         S.erase(S.begin());
         int t = id % 4;
         id /= 4;
         int x = id / m;
         int y = id % m;
         for (int i = 0; i < 4; ++i) {
            int tx = x + dx[i];
            int ty = y + dy[i];
            if (tx < 0 || ty < 0 || tx >= n || ty >= m) continue;
            if (st[tx][ty] != '.') continue;
            if (bad[(t + 1) % 4][tx][ty]) continue;

            int to = number(tx, ty, (t + 1) % 4);

            if (dist[to] > d + 1) {
               S.erase(mp(dist[to], to));
               dist[to] = d + 1;
               S.insert(mp(dist[to], to));
            }
         }
      }

      int ans = INF;
      for (int t = 0; t < 4; ++t) {
         ans = min(ans, dist[number(gx, gy, t)]);
      }

      cout << "Case #" << test << ": ";
      if (ans == INF) cout << "impossible" << endl;
      else cout << ans << endl;
   }
}

void testGen()
{
   FILE *f = fopen("input.txt", "w");
   fclose(f);
}

int main()
{
#ifdef harhro94
   //testGen();
   freopen("input.txt", "r", stdin);
   freopen("output.txt", "w", stdout);
#else
#define task "game"
   //freopen(task".in", "r", stdin);
   //freopen(task".out", "w", stdout);
#endif

   cerr << fixed;
   cerr.precision(5);

   solve();

#ifdef harhro94
   cerr << fixed << setprecision(3) << "\nExecution time = " << clock() / 1000.0 << "s\n";
#endif
   return 0;
}
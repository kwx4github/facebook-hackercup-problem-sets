#include <bits/stdc++.h>

#define reset(a , b) memset(a , b , sizeof(a))
#define REP(i , A) for(int i = 0 ; i < A.size() ; i++)

using namespace std;

const int INF = 1000000007;
const int N = 111;

int T , n , m;
char a[N][N];

char rotate(char c , int k) {
    int type;
    if (c == '^') type = 0;
    if (c == '>') type = 1;
    if (c == 'v') type = 2;
    if (c == '<') type = 3;
    type = (type + k) % 4;
    if (type == 0) return '^';
    if (type == 1) return '>';
    if (type == 2) return 'v';
    if (type == 3) return '<';
}

bool visit[N][N][N];

bool can_move(int x , int y , int k) {
    if (x < 1 || x > n || y < 1 || y > m) return false;
    if (visit[x][y][k]) return false;
    if (a[x][y] == '#' || a[x][y] == '>' || a[x][y] == '^' || a[x][y] == '<' || a[x][y] == 'v') return false;

    int X , Y;

    X = x;
    for ( ; X <= n ; X++){
        if (a[X][y] == '#') break;
        if (a[X][y] == '>' || a[X][y] == '<' || a[X][y] == '^' || a[X][y] == 'v'){
            char nw = rotate(a[X][y] , k);
            if (nw == '^') return false;
        }
    }
    X = x;
    for ( ; X > 0 ; X--) {
        if (a[X][y] == '#') break;
        if (a[X][y] == '>' || a[X][y] == '<' || a[X][y] == '^' || a[X][y] == 'v'){
            char nw = rotate(a[X][y] , k);
            if (nw == 'v') return false;
        }
    }
    Y = y;
    for ( ; Y <= m ; Y++){
        if (a[x][Y] == '#') break;
        if (a[x][Y] == '>' || a[x][Y] == '<' || a[x][Y] == '^' || a[x][Y] == 'v') {
            char nw = rotate(a[x][Y] , k);
            if (nw == '<') return false;
        }
    }
    Y = y;
    for ( ; Y > 0 ; Y--){
        if (a[x][Y] == '#') break;
        if (a[x][Y] == '>' || a[x][Y] == '<' || a[x][Y] == '^' || a[x][Y] == 'v') {
            char nw = rotate(a[x][Y] , k);
            if (nw == '>') return false;
        }
    }
    return true;
}

struct unit {
    int x , y , d , k;
};

queue<unit> Q;
int sx , sy , fx , fy;

unit make(int x , int y , int k , int d) {
    unit res;
    res.x = x; res.y = y; res.d = d; res.k = k;
    return res;
}

const int dx[] = {0 , 1 , 0 , -1};
const int dy[] = {1 , 0 , -1 , 0};

int main() {
    //freopen("laser_maze.txt" , "r" , stdin);
    //freopen("output.out" , "w" , stdout);

    cin >> T;
    for (int test = 1 ; test <= T ; test++) {
        printf("Case #%d: " , test);

        cin >> n >> m;
        for (int i = 1 ; i <= n ; i++){
            scanf("\n");
            for (int j = 1 ; j <= m ; j++){
                scanf("%c" , &a[i][j]);
                if (a[i][j] == 'S') {
                    sx = i;
                    sy = j;
                }
                if (a[i][j] == 'G') {
                    fx = i;
                    fy = j;
                }
            }
        }
        reset(visit , false);
        while (!Q.empty()) Q.pop();

        Q.push(make(sx , sy , 0 , 0));
        visit[sx][sy][0] = true;

        bool found = false;

        while (!Q.empty()) {
            unit A = Q.front(); Q.pop();

            if (A.x == fx && A.y == fy) {
                cout << A.d << endl;
                found = true;
                break;
            }

            for (int i = 0 ; i < 4 ; i++) {
                int x = A.x + dx[i];
                int y = A.y + dy[i];
                int k = (A.k + 1) % 4;
                int d = A.d + 1;

                if (can_move(x , y , k)) {
                    visit[x][y][k] = true;
                    Q.push(make(x , y , k , d));
                }
            }
        }
        if (!found) cout << "impossible" << endl;
    }
}


#include<algorithm>
#include<bitset>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<vector>

using namespace std;

typedef long long int lld;
typedef pair<int, int> PII;
typedef pair<int, lld> PIL;
typedef pair<lld, int> PLI;
typedef pair<lld, lld> PLL;

const int INF = (1LL << 31) - 1;
const lld LINF = (1LL << 62) - 1;
const int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};
const int MOD = (int)(1e9) + 7;

const int NMAX = 100 + 5;
const int MMAX = 100000 + 5;
const int KMAX = 100000 + 5;
const int PMAX = 100000 + 5;
const int LMAX = 100000 + 5;
const int VMAX = 100000 + 5;

int N, M;
vector<string> V(105);
vector<vector<PII> > A;
bool viz[105][105][5];
bool P[105][105][5];
PII S, G;
deque<pair<PII, int> > D;

inline bool on_board(int x, int y) {
    if(0 <= x && x < N && 0 <= y && y < M)
        return V[x][y] != '#';
    return 0;
}

inline bool is_laser(int x, int y) {
    return V[x][y] == '<' || V[x][y] == '>' || V[x][y] == '^' || V[x][y] == 'v';
}

void solve() {
    int i, j, x, y, nr;
    PII T;

    memset(viz, 0, sizeof(viz));
    memset(P, 0, sizeof(P));
    A.resize(0);
    A.resize(5);
    D.clear();

    cin >> N >> M;

    for(i = 0; i < N; i++) {
        cin >> V[i];

        for(j = 0; j < M; j++) {
            if(V[i][j] == 'S')
                S = make_pair(i, j);
            if(V[i][j] == 'v')
                A[0].push_back(make_pair(i, j));
            if(V[i][j] == '>')
                A[1].push_back(make_pair(i, j));
            if(V[i][j] == '^')
                A[2].push_back(make_pair(i, j));
            if(V[i][j] == '<')
                A[3].push_back(make_pair(i, j));
            if(V[i][j] == 'G')
                G = make_pair(i, j);
        }
    }

    for(i = 0; i < 4; i++)
        for(auto chestie : A[i]) {
            for(j = 0; j < 4; j++) {
                x = chestie.first;
                y = chestie.second;

                while(on_board(x, y)) {
                    P[x][y][(i - j + 4) % 4] = 1;
                    x += dx[j];
                    y += dy[j];
                    if(on_board(x, y) && is_laser(x, y))
                        break;
                }
            }
        }

    viz[S.first][S.second][0] = 1;
    D.push_back(make_pair(S, 0));

    while(!D.empty()) {
        S = D.front().first;
        nr = D.front().second;
        D.pop_front();

        if(P[S.first][S.second][nr % 4] && nr)
            continue;

        if(S == G) {
            cout << nr << '\n';
            return;
        }

        for(i = 0; i < 4; i++) {
            T = make_pair(S.first + dx[i], S.second + dy[i]);

            if(!on_board(T.first, T.second))
                continue;

            if(!viz[T.first][T.second][(nr + 1) % 4]) {
                viz[T.first][T.second][(nr + 1) % 4] = 1;
                D.push_back(make_pair(T, nr + 1));
            }
        }
    }

    cout << "impossible\n";
}

int main() {
    int number_of_tests, test_case;

    cin >> number_of_tests;

    for(test_case = 1; test_case <= number_of_tests; test_case++) {
        cout << "Case #" << test_case << ": ";

        solve();
    }

    return 0;
}

#include "cstdio"
#include "iostream"
#include "algorithm"
#include "cassert"
#include "cstring"
#include "vector"
using namespace std;
#define rep(i,n) for(int i=0; i<n; ++i)
int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
int inq[101][101][5], f[101][101][5];
int l,r,n,m;
char Map[101][101];

struct STATE{
	int x,y,t;
	STATE(){}
	STATE(int _x, int _y, int _t):x(_x), y(_y), t(_t){}
} que[100*100*40];
vector<STATE> laser[4];

bool valid(STATE u){
	return u.x >=0 && u.x < n && u.y >= 0 && u.y < m && (Map[u.x][u.y]=='.' || Map[u.x][u.y]=='G' || Map[u.x][u.y]=='S');
}

bool hit(STATE u, STATE lsr, int dir){
	if(dir == 0){
		if(u.x < lsr.x && u.y == lsr.y){
			for(int x = u.x + 1; x < lsr.x; ++x){
				if(Map[x][u.y]=='.' || Map[x][u.y]=='G' || Map[x][u.y]=='S') continue;
				return 0;
			}
			return 1;
		}
	}
	if(dir == 1){
		if(u.y > lsr.y && u.x == lsr.x){
			for(int y = u.y - 1; y > lsr.y; --y){
				if(Map[u.x][y]=='.' || Map[u.x][y]=='G' || Map[u.x][y]=='S') continue;
				return 0;
			}
			return 1;
		}
	}
	if(dir == 2){
		if(u.x > lsr.x && u.y == lsr.y){
			for(int x = u.x - 1; x > lsr.x; --x){
				if(Map[x][u.y]=='.' || Map[x][u.y]=='G' || Map[x][u.y]=='S') continue;
				return 0;
			}
			return 1;
		}
	}
	if(dir == 3){
		if(u.y < lsr.y && u.x == lsr.x){
			for(int y = u.y + 1; y < lsr.y; ++y){
				if(Map[u.x][y]=='.' || Map[u.x][y]=='G' || Map[u.x][y]=='S') continue;
				return 0;
			}
			return 1;
		}
	}
	return 0;
}

bool safe(STATE u){
	int j = (4 - u.t)&3;
	rep(i,4){
		rep(k, laser[j].size()) if(hit(u, laser[j][k], i)) return 0;
		j = (j+1)&3;
	}
	return 1;
}

int main(int argc, char const *argv[])
{
	int cas;
	scanf("%d", &cas);
	rep(ca,cas){
		scanf("%d%d", &n, &m);
		rep(i,n) scanf("%s", Map[i]);
		rep(i,4) laser[i].clear();
		STATE St, Ed;
		rep(i,n) rep(j,m){
			if(Map[i][j]=='^') laser[0].push_back(STATE(i,j,0));
			if(Map[i][j]=='>') laser[1].push_back(STATE(i,j,0));
			if(Map[i][j]=='v') laser[2].push_back(STATE(i,j,0));
			if(Map[i][j]=='<') laser[3].push_back(STATE(i,j,0));
			if(Map[i][j]=='S') St.x = i, St.y = j;
			if(Map[i][j]=='G') Ed.x = i, Ed.y = j;
		}
		memset(inq, 0, sizeof inq);
		memset(f, -1, sizeof f);
		que[0] = STATE(St.x, St.y, 0);
		f[St.x][St.y][0] = 0;
		l = 0, r = 1;
		while(l<r){
			STATE u = que[l++], v;
			inq[u.x][u.y][u.t] = 0;
			rep(i,4){
				v = STATE(u.x + dx[i], u.y + dy[i], (u.t + 1)&3);
				if(valid(v) && safe(v)){
					if(f[v.x][v.y][v.t] == -1 || f[v.x][v.y][v.t] > f[u.x][u.y][u.t] + 1){
						f[v.x][v.y][v.t] = f[u.x][u.y][u.t] + 1;
						if(!inq[v.x][v.y][v.t]) inq[v.x][v.y][v.t] = 1, que[r++] = v;
					}
				}
			}
		}
		int ans = 100000000;
		rep(t,4) if(f[Ed.x][Ed.y][t] > -1) ans = min(ans, f[Ed.x][Ed.y][t]);
		printf("Case #%d: ", ca+1);
		if(ans < 100000000) printf("%d\n", ans); else printf("impossible\n");
	}
	return 0;
}
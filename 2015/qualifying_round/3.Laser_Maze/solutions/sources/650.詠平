#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<fstream>
#include<utility>
using namespace std;
char g[115][115];
bool use[105][105][4];
typedef pair<int,int> pai;
pai s,t;
int dx[4]={1,0,-1,0},dy[4]={0,-1,0,1};
char direct[4]={'^','>','v','<'};
struct P{
    int x,y,num;
    P(){}
    P(int a,int b,int c):x(a),y(b),num(c){}
};
char turn(char x,int n)
{
    for(int q=0;q<4;++q)
    {
        if(x==direct[q])
            return direct[(q+n)%4];
    }
    return '.';//unuse
}
bool check(int x, int y,int num)
{
    char c;
    num%=4;
    bool over;
    int nx,ny;
    for(int q=0;q<4;++q)
    {
    	nx=x;
    	ny=y;
        over=1;
        while(over)
        {
            nx+=dx[q];
            ny+=dy[q];
            if(g[nx][ny]=='#')
                break;
            else if(g[nx][ny]!='.'&&g[nx][ny]!='G')
            {
                c=turn(g[nx][ny],num);
                switch(c)
                {
                    case '^':
                        if(q==0)
                            return false;
                        else
                            over=0;
                        break;
                    case '<':
                        if(q==3)
                            return false;
                        else
                            over=0;
                        break;
                    case '>':
                        if(q==1)
                            return false;
                        else
                            over=0;
                        break;
                    case 'v':
                        if(q==2)
                            return false;
                        else
                            over=0;
                        break;
                }
            }
        }
    }
    return true;
}
int bfs(int x,int y,int num)
{
    queue<P> que;
    P a;
    que.push(P(x,y,num));
    while(!que.empty())
    {
        a=que.front();
        que.pop();//cout<<que.size()<<endl;//if(a.num>5)return 0;
        int nx,ny;
        for(int q=0;q<4;++q)
        {
            nx=a.x+dx[q];
            ny=a.y+dy[q];
            if(g[nx][ny]=='.'&&check(nx,ny,a.num+1)&& !use[nx][ny][(a.num+1)%4])
            {
            	use[nx][ny][(a.num+1)%4]=1;
            //	if(a.num>1e9)
            //		return -1;
                que.push(P(nx,ny,a.num+1));
            }
            else if(g[nx][ny]=='G'&&check(nx,ny,a.num+1))
            {
                return a.num+1;
            }
        }
    }
    return -1;
}
int main()
{
	fstream file,file2;
	file.open("e.txt",ios::in);
	file2.open("f.txt",ios::out);
    int a,n,m,ans;
    memset(g,'#',sizeof(g));
    file>>a;//scanf("%d",&a);
    for(int k=1;k<=a;++k)
    {
    	memset(use,0,sizeof(use));
    	ans=-1;
        file>>n>>m;//scanf("%d%d",&n,&m);
        for(int q=1;q<=n;++q)
            file>>g[q]+1;//scanf("%s",g[q]+1);
        for(int q=0;q<=m+1;++q)
        	g[n+1][q]=g[0][q]='#';
        for(int q=0;q<=n+1;++q)
        	g[q][m+1]=g[q][0]='#';
        bool t=0;
        for(int q=1;q<=n;++q)
        {
        	if(t)
        		break;
            for(int w=1;w<=m;++w)
            {
                if(g[q][w]=='S')
                {
                    s.first=q;
                    s.second=w;
                    g[q][w]='.';
                    t=1;
                    break;
                }
            }
        }
        //for(int q=0;q<=n+1;++q){
        //for(int w=0;w<=m+1;++w)
        //cout<<g[q][w];
        //cout<<endl;}
        ans=bfs(s.first,s.second,0);
        file2<<"Case #"<<k<<": ";//printf("Case #%d: ",k);
        if(ans==-1)
            file2<<"impossible\n";//printf("impossible\n");
        else
            file2<<ans<<"\n";//printf("%d\n",ans);
        //if(k==1)return 0;
    }
    file.close();
    file2.close();
    return 0;
}


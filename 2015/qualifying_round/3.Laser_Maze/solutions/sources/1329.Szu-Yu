#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <tuple>

using namespace std;

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define sz size()
#define For(i, st, en)  for(int i=(st); i<=(int)(en); i++)
#define Forn(i, st, en) for(int i=(st); i<=(int)(en); i++)
#define Ford(i, st, en) for(int i=(st); i>=(int)(en); i--)
#define forn(i, n) for(int i=0; i<(int)(n); i++)
#define ford(i, n) for(int i=(n)-1; i>=0; i--)
#define fori(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)

template <class _T> inline _T sqr(const _T& x) { return x * x; }
template <class _T> inline string tostr(const _T& a) { ostringstream os(""); os << a; return os.str(); }
template <class _T> inline istream& operator << (istream& is, const _T& a) { is.putback(a); return is; }

typedef long double ld;

// Constants
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-11;

// Types
typedef signed   long long i64;
typedef unsigned long long u64;
typedef set < int > SI;
typedef vector < ld > VD;
typedef vector < int > VI;
typedef vector < bool > VB;
typedef vector < string > VS;
typedef map < string, int > MSI;
typedef pair < int, int > PII;

enum Directioin {
  UP = 0,
  RIGHT,
  DOWN,
  LEFT
};

bool visit[101][101][4];
char board[101][101];
int M, N;
int sr, sc, gr, gc;

int vr[4] = {-1, 0, 1, 0};
int vc[4] = { 0, 1, 0,-1};

bool isValid(int r, int c) {
  if (r < 0 || r >= M || c < 0 || c>= N) return false;
  char type = board[r][c];
  return type == '.' || type == 'S' || type == 'G';
}

void markInvalidVisit(int r, int c, int vr, int vc, int d) {
  do {
    r = r + vr;
    c = c + vc;
    if (!isValid(r, c)) return;
    visit[r][c][d] = true;
  } while (true);
}

void trace(int r, int c, int d) {
  for (int i = 0; i < 4; ++i) {
    markInvalidVisit(r, c, vr[i], vc[i], (4 - d + i) % 4);
  }
}

void initial() {
  for (int r = 0; r < M; ++r)
    for (int c = 0; c < N; ++c)
      for (int d = 0; d < 4; ++d)
        visit[r][c][d] = false;

  for (int r = 0; r < M; ++r)
    for (int c = 0; c < N; ++c) {
      switch (board[r][c]) {
        case 'S':
          sr = r;
          sc = c;
          break;
        case 'G':
          gr = r;
          gc = c;
          break;
        case '^':
          trace(r, c, UP);
          break;
        case '>':
          trace(r, c, RIGHT);
          break;
        case 'v':
          trace(r, c, DOWN);
          break;
        case '<':
          trace(r, c, LEFT);
          break;
      }
    }
}

int run() {
  initial();

  queue<tuple<int,int,int> > q;
  q.push(make_tuple(sr, sc, 0));
  visit[sr][sc][0] = true;

  while (!q.empty()) {
    tuple<int,int,int> current = q.front();
    q.pop();

    int r = get<0>(current);
    int c = get<1>(current);
    int time = get<2>(current);
    for (int d = 0; d < 4; ++d) {
      int nr = r + vr[d];
      int nc = c + vc[d];
      if (isValid(nr, nc) && !visit[nr][nc][(time + 1) % 4]) {
        if (nr == gr && nc == gc) return time + 1;
        q.push(make_tuple(nr, nc, time + 1));
        visit[nr][nc][(time + 1) % 4] = true;
      }
    }
  }

  return -1;
}

int main() {
  int caseN;
  cin >> caseN;

  for (int cc = 1; cc <= caseN; ++cc) {
    cout << "Case #" << cc << ": ";

    cin >> M >> N;
    for (int i = 0; i < M; ++i) {
      scanf("%s", board[i]);
    }

    int steps = run();
    if (steps == -1) {
      cout << "impossible";
    } else {
      cout << steps;
    }

    cout << endl;
  }

  return 0;
}

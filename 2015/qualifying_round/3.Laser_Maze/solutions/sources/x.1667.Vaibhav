#include<stdio.h>
#include<vector>
#include<memory.h>
#include<queue>
using namespace std;
#define pp pair<int,int>
#define ppp pair<pp,int>
int n,m;
bool visited[105][105][5]={0};
char s[105][105];
int idx[]={-1,0,1,0},idy[]={0,1,0,-1};
bool valid(int x,int y,int time)
{
    if(x<0 || x>=n || y<0 || y>=m)
        return false;
        if(s[x][y]=='#' || visited[x][y][time])
            return false;
    return true;
}
void dfs(int x,int y,int pos,int time)
{
    if(x<0 || x>=n || y<0 || y>=m)
        return ;
    if(s[x][y]=='#' || visited[x][y][time])
        return ;
    //printf("x=%d y=%d pos=%d time=%d\n",x,y,pos,time);
    visited[x][y][time]=1;
    dfs(x+idx[pos],y+idy[pos],pos,time);
}
void debug()
{
    int i,j,k;
    for(k=0;k<4;k++)
    {
        printf("k=%d\n",k);
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                printf("%d ",visited[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }
}
int main()
{
    int t,test;
    scanf("%d",&t);
    for(test=1;test<=t;test++)
    {
        int i,j,k,stx,sty;
        memset(visited,0,sizeof(visited));
        scanf("%d%d",&n,&m);
        for(i=0;i<n;i++)
        {
            scanf("%s",s[i]);
            for(j=0;j<m;j++)
            {
                if(s[i][j]=='#')
                {
                    for(k=0;k<4;k++)
                        visited[i][j][k]=true;
                }
                else if(s[i][j]=='S')
                {
                    stx=i;
                    sty=j;
                }
            }
        }
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(s[i][j]=='^')
                {
                    dfs(i,j,0,0);
                    dfs(i,j,1,1);
                    dfs(i,j,2,2);
                    dfs(i,j,3,3);
                }
                else if(s[i][j]=='>')
                {
                    dfs(i,j,1,0);
                    dfs(i,j,2,1);
                    dfs(i,j,3,2);
                    dfs(i,j,0,3);
                }
                else if(s[i][j]=='v')
                {
                    dfs(i,j,2,0);
                    dfs(i,j,3,1);
                    dfs(i,j,0,2);
                    dfs(i,j,1,3);
                }
                else if(s[i][j]=='<')
                {
                    dfs(i,j,3,0);
                    dfs(i,j,0,1);
                    dfs(i,j,1,2);
                    dfs(i,j,2,3);
                }
            }
        }
        //debug();
        queue<ppp > q;
        q.push(ppp(pp(stx,sty),0));
        int ans=-1;
        while(!q.empty())
        {
            ppp temp=q.front();
            q.pop();
            int u=temp.first.first,v=temp.first.second,time=temp.second;
            //printf("u=%d v=%d time=%d\n",u,v,time);
            if(s[u][v]=='G')
            {
                ans=time;
                break;
            }
            for(i=0;i<4;i++)
            {
                int x=u+idx[i],y=v+idy[i],ti=(time+1)%4;
                if(valid(x,y,ti))
                {
                    q.push(ppp(pp(x,y),time+1));
                    visited[x][y][ti]=true;
                }
            }
        }
        if(ans!=-1)
            printf("Case #%d: %d\n",test,ans);
        else
            printf("Case #%d: impossible\n",test);
    }
    return 0;
}

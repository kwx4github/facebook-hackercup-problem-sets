#include <stdio.h>
#include <queue>
#include <string.h>
#define MAX 105
#define INF 1000000000

using namespace std;

int incx[4] = {0, 1, 0, -1};
int incy[4] = {1, 0, -1, 0};
char str[MAX][MAX];
bool hit[MAX][MAX][4], vis[MAX][MAX][4];
int step[MAX][MAX][4];

bool isBetween(int x, int a, int b) {
    return x >= a && x <= b;
}

bool isPassable(char ch) {
    return ch == '.' || ch == 'S' || ch == 'G';
}

int main() {
    freopen("HC15C.in", "r", stdin);
    freopen("HC15C.out", "w", stdout);
    int test, cas, n, m, i, j, srcx, srcy, dstx, dsty, k, dir, dirc, x, y, r, c, p, nr, nc, np, min1;
    scanf("%d", &test);
    for (cas = 1; cas <= test; cas++) {
        scanf("%d%d", &n, &m);
        for (i = 0; i < n; i++) {
            scanf("%s", str[i]);
            for (j = 0; j < m; j++) {
                if (str[i][j] == 'S') {
                    srcx = i;
                    srcy = j;
                }
                else if (str[i][j] == 'G') {
                    dstx = i;
                    dsty = j;
                }
            }
        }
        memset(hit, 0, sizeof(hit));
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (str[i][j] == '>') dir = 0;
                else if (str[i][j] == 'v') dir = 1;
                else if (str[i][j] == '<') dir = 2;
                else if (str[i][j] == '^') dir = 3;
                else continue;
                for (k = 0; k < 4; k++) {
                    dirc = (dir + k) % 4;
                    x = i + incx[dirc];
                    y = j + incy[dirc];
                    while (isBetween(x, 0, n-1) && isBetween(y, 0, m-1) && isPassable(str[x][y])) {
                        hit[x][y][k] = 1;
                        x += incx[dirc];
                        y += incy[dirc];
                    }
                }
            }
        }
        queue<int> q1, q2, q3;
        memset(vis, 0, sizeof(vis));
        q1.push(srcx);
        q2.push(srcy);
        q3.push(0);
        vis[srcx][srcy][0] = 1;
        step[srcx][srcy][0] = 0;
        while (!q1.empty()) {
            r = q1.front();
            c = q2.front();
            p = q3.front();
            q1.pop();
            q2.pop();
            q3.pop();
            for (i = 0; i < 4; i++) {
                nr = r + incx[i];
                nc = c + incy[i];
                np = (p + 1) % 4;
                if (!isBetween(nr, 0, n - 1) || !isBetween(nc, 0, m - 1)
                    || vis[nr][nc][np] || !isPassable(str[nr][nc]) || hit[nr][nc][np]) continue;
                vis[nr][nc][np] = 1;
                step[nr][nc][np] = step[r][c][p] + 1;
                q1.push(nr);
                q2.push(nc);
                q3.push(np);
            }
        }
        min1 = INF;
        for (i = 0; i < 4; i++) {
            if (vis[dstx][dsty][i]) min1 = min(min1, step[dstx][dsty][i]);
        }
        if (min1 < INF) printf("Case #%d: %d\n", cas, min1);
        else printf("Case #%d: impossible\n", cas);
    }
    return 0;
}

#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define ppii pair<int, pair<int, int> >
#define MAX 133
using namespace std;
// 3503
const int many = 123456;
   int m, n;
   string s[MAX];
   vector< ppii >laz;
   vector< pair<int, int> >vec;
   bool used[MAX][MAX], gone[MAX][MAX];
   queue< pair<int, int> >Q[MAX];
    int si, sj, gi, gj;

    bool found;
    int ans, step;
    int x, y, rot;
    int t;
void beam()
{
    if(rot == 1)
    {
        while(x >= 0)
        {
            if(s[x][y] == '#')
                break;
            used[x][y] = true;
            x --;
        }
    }

    else if(rot == 2)
    {
        while(y < n)
        {
            if(s[x][y] == '#')
                break;
            used[x][y] = true;
            y ++;
        }
    }

    else if(rot == 3)
    {
        while(x < m)
        {
            if(s[x][y] == '#')
                break;
            used[x][y] = true;
            x ++;
        }
    }


    else if(rot == 4)
    {
        while(y >= 0)
        {
            if(s[x][y] == '#')
                break;
            used[x][y] = true;
            y --;
        }
    }

}

int main()
{
ios_base::sync_with_stdio(false);
cin.tie();

freopen("laser_maze.txt", "r", stdin);
freopen("a.out", "w", stdout);




    cin>>t;

for(int w = 1 ; w <= t ; w ++)
{


    laz.clear();
    for(int i = 0 ; i < MAX - 1; i ++)
        while(!Q[i].empty())
        Q[i].pop();

    for(int i = 0 ; i < MAX - 1; i ++)
    {
        memset(used, false, sizeof(used));
        memset(gone, false, sizeof(used));
    }

        cin>>m>>n;



    for(int i = 0 ; i < m ; i ++)
        cin>>s[i];


    for(int i = 0 ; i < m ; i ++)
        for(int j = 0 ; j < n ; j ++)
    {
        if(s[i][j] == '^')
            laz.pb(mp(1, mp(i, j)));
        else if(s[i][j] == '>')
            laz.pb(mp(2, mp(i, j)));
        else if(s[i][j] == 'v')
            laz.pb(mp(3, mp(i, j)));
        else if(s[i][j] == '<')
            laz.pb(mp(4, mp(i, j)));
        else if(s[i][j] == 'S')
            si = i, sj = j;
        else if(s[i][j] == 'G')
            gi = i, gj = j;
    }


  //  for(int i = 0 ; i < laz.size() ; i ++)
    //    cout<<laz[i].first<<" "<<laz[i].second.first<<" "<<laz[i].second.second<<endl;

       Q[0].push(mp(si, sj));
       ans = -1;
       step = 0;
       while(1)
       {
           for(int i = 0 ; i < MAX ; i ++)
            memset(used[i], false, sizeof(used[i]));

           if(gone[gi][gj] == true)
           {
               ans = step;
               break;
           }
           if(step >= MAX - 3)
            break;
           step ++;

           for(int i = 0 ; i < laz.size() ; i ++)
           {
               if(laz[i].first == 4)
                laz[i].first = 1;
               else laz[i].first ++;
               rot = laz[i].first;
               x = laz[i].second.first;
               y = laz[i].second.second;
               beam();
           }


     /*      for(int i = 0 ; i < m ; i ++)
           {
               for(int j = 0 ; j < n ; j ++)
                cout<<used[i][j]<<" ";
               cout<<endl;
           }


            cout<<"\n"<<"*****"<<endl;

*/

           while(!Q[step - 1].empty())
           {
            x = Q[step - 1].front().first;
            y = Q[step - 1].front().second;
        Q[step - 1].pop();
            if(!used[x][y + 1] && y + 1 < n)
            {
                gone[x][y + 1] = true;
                used[x][y + 1] = true;
                Q[step].push(mp(x, y + 1));
            }
            if(!used[x][y - 1] && y - 1 >= 0)
            {
                used[x][y - 1] = true;
                gone[x][y - 1] = true;
                Q[step].push(mp(x, y - 1));
            }
            if(!used[x + 1][y] && x + 1 < m)
            {
                used[x + 1][y] = true;
                gone[x + 1][y] = true;
                Q[step].push(mp(x + 1, y));
            }
            if(!used[x - 1][y] && x - 1 >= 0){
                gone[x - 1][y] = true;
                used[x - 1][y] = true;
                Q[step].push(mp(x - 1, y));
            }

           }


       }

        cout<<"Case #"<<w<<": ";
       if(ans == -1)
        cout<<"impossible"<<endl;
       else cout<<ans<<endl;



}

return 0;
}

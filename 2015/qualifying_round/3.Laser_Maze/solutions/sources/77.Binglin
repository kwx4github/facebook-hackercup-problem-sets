import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class C {
    
    private static int[][] offsets = { {-1, 0},
                                {1, 0},
                                {0, -1},
                                {0, 1}};

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        int T = Integer.parseInt(in.nextLine());
        
        for (int id = 0; id < T; ++ id) {
            String MN = in.nextLine();
            int M = Integer.parseInt(MN.split(" ")[0]);
            int N = Integer.parseInt(MN.split(" ")[1]);
            
            char[][] map = new char[M][N];
            
            int startX = -1;
            int startY = -1;
            int endX = -1;
            int endY = -1;
            
            for (int i = 0; i < M; ++ i) {
                String line = in.nextLine();
                for (int j = 0; j < N; ++ j) {
                    map[i][j] = line.charAt(j);
                    if (map[i][j] == 'S') {
                        map[i][j] = '.';
                        startX = i;
                        startY = j;
                    }
                    else if (map[i][j] == 'G') {
                        map[i][j] = '.';
                        endX = i;
                        endY = j;
                    }
                }
            }
            
            boolean[][][] realMap = new boolean[4][M][N];
            for (int k = 0; k < 4; ++ k) {
                for (int i = 0; i < M; ++ i) {
                    for (int j = 0; j < N; ++ j) {
                        realMap[k][i][j] = true;
                    }
                }
            }
            
            for (int k = 0; k < 4; ++ k) {
                for (int i = 0; i < M; ++ i) {
                    for (int j = 0; j < N; ++ j) {
                        if (map[i][j] != '.') {
                            realMap[k][i][j] = false;
                            
                            if (isTurret(map[i][j])) {
                                switch (map[i][j]) {
                                case '<':
                                    int tj = j;
                                    while (-- tj >= 0) {
                                        realMap[k][i][tj] = false;
                                        
                                        if (map[i][tj] != '.') {
                                            break;
                                        }
                                    }
                                    break;
                                case '>':
                                    tj = j;
                                    while (++ tj < N) {
                                        realMap[k][i][tj] = false;
                                        
                                        if (map[i][tj] != '.') {
                                            break;
                                        }
                                    }
                                    break;
                                case '^':
                                    int ti = i;
                                    while (-- ti >= 0) {
                                        realMap[k][ti][j] = false;
                                        
                                        if (map[ti][j] != '.') {
                                            break;
                                        }
                                    }
                                    break;
                                case 'v':
                                    ti = i;
                                    while (++ ti < M) {
                                        realMap[k][ti][j] = false;
                                        
                                        if (map[ti][j] != '.') {
                                            break;
                                        }
                                    }
                                    break;
                                }
                                
                                map[i][j] = turnClockwise(map[i][j]);
                            }
                        }
                    }
                }
            }
            
            int ans = bfs(realMap, startX, startY, endX, endY);
            
            System.out.println(String.format("Case #%d: %s", id + 1, ans == -1 ? "impossible" : String.valueOf(ans)));
        }
        
        in.close();
    }
    
    private static boolean isTurret(char ch) {
        return ch == '<' || ch == '>' || ch == '^' || ch == 'v';
    }

    private static char turnClockwise(char ch) {
        switch (ch) {
        case '<':
            return '^';
        case '>':
            return 'v';
        case '^':
            return '>';
        case 'v':
            return '<';
        default:
            return ch;
        }
    }
    
    private static int bfs(boolean[][][] map, int startX, int startY, int endX, int endY) {
        boolean[][][] visited = new boolean[map.length][map[0].length][map[0][0].length];
        
        Queue<Triple> q = new LinkedList<>();
        Queue<Integer> qq = new LinkedList<>();
        q.offer(new Triple(0, startX, startY));
        qq.offer(0);
        visited [0][startX][startY] = true;
        
        while (!q.isEmpty()) {
            Triple e = q.poll();
            int ee = qq.poll();
            
            if (e.x == endX && e.y == endY) {
                return ee;
            }
            else {
                int z = (e.z + 1) % 4;
                
                for (int i = 0; i < offsets.length; ++ i) {
                    int x = e.x + offsets[i][0];
                    int y = e.y + offsets[i][1];
                    
                    if (0 <= x && x < map[0].length && 0 <= y && y < map[0][0].length && map[z][x][y] && !visited[z][x][y]) {
                        q.offer(new Triple(z, x, y));
                        qq.offer(ee + 1);
                        visited[z][x][y] = true;
                    }
                }
            }
        }
        
        return -1;
    }
    
    private static class Triple{
        public int z;
        public int x;
        public int y;
        
        public Triple(int z, int x, int y) {
            this.z = z;
            this.x = x;
            this.y = y;
        }
    }
}

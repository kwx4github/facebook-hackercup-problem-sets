#include <bits/stdc++.h>
#define INF INT_MAX / 2
#define MOD 1000000007

using namespace std;

typedef pair<int,int> PII;
typedef long long ll;

int dx[] ={0,1,0,-1};
int dy[] ={-1,0,1,0};
class Solve{
public:
	vector<string> maze;
	int wall[103][103];
	int sy,sx,gy,gx;
	int memo[4][103][103];
	int used[103][103];

	int answer(){
		return dfs(0,sy,sx);
	}

	int dfs(int turn,int y,int x){
		//cout << turn << " " << y << " " << x << endl;
		if(turn != 0 && ((wall[y][x] & 1<<turn%4) || used[y][x] >= 4))return INF;
		if(y == gy && x == gx)return 0;
		if(memo[used[y][x]][y][x] != -1)return memo[used[y][x]][y][x];
		int ret = INF;
		for(int i=0;i<4;i++){
			int tmp = used[y][x]++;
			ret = min(ret,dfs(turn+1,y+dy[i],x+dx[i]));
			used[y][x] = tmp;
		}
		return memo[used[y][x]][y][x] = ret+1;
	}
	void test(){
		for(int i=0;i<maze.size();i++){
			for(int j=0;j<maze[i].size();j++){
				printf("%x",wall[i][j]);
			}
			cout << endl;
		}
	}
	void input(){
		memset(wall,0,sizeof(wall));
		memset(memo,-1,sizeof(memo));
		memset(used,0,sizeof(used));
		int r,c;
		cin >> r >> c;
		maze.resize(r+2);
		string kabe;
		for(int i=0;i<c+2;i++){
			kabe += "#";
		}
		for(int i=1;i<=r;i++){
			cin >> maze[i];
			maze[i] = "#"+maze[i]+"#";
		}
		maze[0] = maze[r+1] = kabe;
		for(int i=0;i<maze.size();i++){
			for(int j=0;j<maze[i].size();j++){
				if(maze[i][j] == 'S'){
					maze[i][j] = '.';
					sy = i;sx = j;
				}
				else if(maze[i][j] == 'G'){
					maze[i][j] = '.';
					gy = i;gx = j;
				}
				else if(maze[i][j] != '.')wall[i][j] = (1<<4)-1;
				if(maze[i][j] != '.' && maze[i][j] != '#')Solve::fill(i,j,maze[i][j]);
			}
		}
	}
	void fill(int r,int c,char ch){
		int dir;
		if(ch == '^')dir = 0;
		else if(ch == '>')dir = 1;
		else if(ch == 'v')dir = 2;
		else if(ch == '<')dir = 3;
		int i,j;
		for(int cnt=0;cnt<4;cnt++){
			i = r;j = c;
			do{
				wall[i][j] |= (1<<cnt);
				i += dy[dir];
				j += dx[dir];
			}while(maze[i][j] == '.');
			dir += 1;dir %= 4;
		}
	}

};

int main(void) {
	int T;
	cin >> T;
	for(int i=1;i<=T;i++){
		Solve solve;
		solve.input();
		//solve.test();
		int ans = solve.answer();
		cout << "Case #" << i << ": ";
		if(ans >= INF)cout << "impossible" << endl;
		else cout << ans << endl;
	}
}


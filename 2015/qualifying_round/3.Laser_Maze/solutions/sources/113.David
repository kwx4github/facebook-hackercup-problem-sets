import sys
from collections import deque
import pdb

def getInd(v,h):
	if v==-1:
		return 0
	if v==1:
		return 1
	if h==-1:
		return 2
	return 3

def getTurns(turret,v,h):
	if turret=='^':
		return [2,0,1,3][getInd(v,h)]
	elif turret=='<':
		return [3,1,2,0][getInd(v,h)]
	elif turret=='v':
		return [0,2,3,1][getInd(v,h)]
	else:
		return [1,3,0,2][getInd(v,h)]

for ncase in xrange(input()):
	m,n=map(int,raw_input().split())
	maze=[raw_input() for i in xrange(m)]
	safe=[[[True for i in xrange(4)] for j in xrange(n)] for k in xrange(m)]
	
	for i in xrange(m):
		for j in xrange(n):
			if maze[i][j]=='S':
				s=(i,j)
			elif maze[i][j]=='G':
				g=(i,j)
			if maze[i][j]!='.' and maze[i][j]!='G':
				continue
			for v,h in [(-1,0),(1,0),(0,-1),(0,1)]:
				a,b=i+v,j+h
				while a>=0 and a<m and b>=0 and b<n and (maze[a][b]=='.' or maze[a][b]=='S' or maze[a][b]=='G'):
					a+=v
					b+=h
				if a>=0 and a<m and b>=0 and b<n and maze[a][b]!='#':
					safe[i][j][getTurns(maze[a][b],v,h)]=False
	
	visited={(j,k):[False for i in xrange(4)] for j in xrange(m) for k in xrange(n)}
	q=deque([(s,0)])
	visited[s][0]=True
	flag=False
	while q:
		(i,j),count=q.popleft()
		count+=1
		for v,h in [(-1,0),(1,0),(0,-1),(0,1)]:
			a,b=i+v,j+h
			if a>=0 and a<m and b>=0 and b<n and (maze[a][b]=='.' or maze[a][b]=='G' or maze[a][b]=='S') and not visited[(a,b)][count%4] and safe[a][b][count%4]:
				if maze[a][b]=='G':
					flag=True
					break
				q.append(((a,b),count))
				visited[(a,b)][count%4]=True
		if flag:
			break
	
	sys.stdout.write("Case #")
	sys.stdout.write(str(ncase+1))
	sys.stdout.write(": ")
	if flag:
		sys.stdout.write(str(count))
	else:
		sys.stdout.write("impossible")
	sys.stdout.write("\n")

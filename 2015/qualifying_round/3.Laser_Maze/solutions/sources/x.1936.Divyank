//Facebook Hacker Cup--3
#include<bits/stdc++.h>
#define MAX 105

using namespace std;

int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
int rows,columns,targetX,targetY,sourceX,sourceY;

bool valid(int r,int c){
	
	if(r>=0&&r<rows&&c>=0&&c<columns)
	  return true;
	  
	else return false;
		
}

char str[MAX];
int dp[MAX][MAX][4][2],Grid[MAX][MAX];
int minSteps(int ,int ,int ,int );

int main(void){
	
	int testCases,i,j,k,Case=1;
	
	scanf("%d",&testCases);
	while(testCases--){	
		
		scanf("%d%d",&rows,&columns);
		
		for(i=0;i<=rows;i++)
		  for(j=0;j<=columns;j++)
		    for(k=0;k<4;k++)
			  dp[i][j][k][0]=dp[i][j][k][1]=-1;
		
		for(i=0;i<rows;i++){
			
			scanf("%s",str);
			for(j=0;j<columns;j++){
				
		//		cout<<"\nCurrent character is :- "<<str[j];
				if(str[j]=='#')Grid[i][j]=-1;			
				else if(str[j]=='^')Grid[i][j]=0;
				else if(str[j]=='v')Grid[i][j]=2;
				else if(str[j]=='>')Grid[i][j]=1;
                else if(str[j]=='<')Grid[i][j]=3;
				else if(str[j]=='G'){  Grid[i][j]=10;targetX=i;targetY=j;}
				else if(str[j]=='S'){Grid[i][j]=10;sourceX=i;sourceY=j;}
				else if(str[j]=='.')Grid[i][j]=10;			
					
			}
			
		}
		
//		cout<<"\nSource X and Souce Y are :- "<<sourceX<<" and "<<sourceY;
//		cout<<"\nTarget x and y are :- "<<targetX<<" and "<<targetY;
		
		int ans=minSteps(sourceX,sourceY,0,0);
		printf("Case #%d: ",Case++);
		
		if(ans<=100000)
		 printf("%d\n",ans);
		else printf("impossible\n"); 
		
	}
	
	
	return 0;
	
}

bool laserCheck(int x,int y){
	
	if(Grid[x][y]>=0&&Grid[x][y]<=3)
	   return true;
	   
	else return false;   
	
}

int minSteps(int x,int y,int orientation,int state){
	
//	cout<<"\nCurrently at "<<x<<" and "<<y<<" with orientation of "<<orientation;
	//you dont need to move at all if you are already there
	
	if(dp[x][y][orientation][state]!=-1) return dp[x][y][orientation][state];
	
	int safe=1,i,j,k;
	//check for safety here
	//-->check safety from upward
	
	for(i=x;i>=0;i--){//only 'v' is harmful

		if(Grid[i][y]==-1||(laserCheck(i,y)&&(Grid[i][y]+orientation)%4!=2)) break;//wall has been encountered 
		if(laserCheck(i,y)&&(Grid[i][y]+orientation)%4==2){//number representing 'v'
		  safe=0;break;
	    }
	
	}
	
	//-->check for downward safet
	if(safe)
	for(i=x;i<rows;i++){
		
		if(Grid[i][y]==-1||(laserCheck(i,y)&&(Grid[i][y]+orientation)%4!=0)) break;;
		if(laserCheck(i,y)&&(Grid[i][y]+orientation)%4==0){//number repesenting '^'
			safe=0;break;			
		}
		
	}
	
	//check 
	if(safe)
	for(i=y;i>=0;i--){
		
		if(Grid[x][i]==-1||(laserCheck(x,i)&&(Grid[x][i]+orientation)%4!=1))break;
		if(laserCheck(x,i)&&(Grid[x][i]+orientation)%4==1){//number representing '>'
			safe=0;break;			
		}
		
	}
	
	if(safe)
	for(i=y;i<columns;i++){
		
		if(Grid[x][i]==-1||(laserCheck(x,i)&&(Grid[x][i]+orientation)%4!=3)) break;
		if(laserCheck(x,i)&&(Grid[x][i]+orientation)%4==3){//number representing '<'
			safe=0;break;			
		}	
		
	}
	
	if(x==targetX&&y==targetY){
	
	  if(safe) 
	  return 0;
	  
	  else return 1000000;
	
    }
	//safety check done 
	if(!safe&&state){
	  
//	  cout<<"\nSafety broke";
	  return 1000000;
    
	}
     
//	cout<<"\nI came over here";;	
	dp[x][y][orientation][state]=1000000;
	int arr[4],ans=100000000;
	
	for(i=0;i<4;i++)
	  arr[i]=1000000;
	
    for(i=0;i<4;i++)	
    	if(valid(x+dx[i],y+dy[i])&&Grid[x+dx[i]][y+dy[i]]==10)//move only if free space if there
    	  arr[i]=1+minSteps(x+dx[i],y+dy[i],(orientation+1)%4,1);
	
	for(i=0;i<4;i++)
	  ans=min(ans,arr[i]);
	//sort(arr,arr+4);
	return dp[x][y][orientation][state]=ans;
	
}  

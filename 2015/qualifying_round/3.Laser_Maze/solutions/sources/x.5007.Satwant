#include <iostream>
#include <set>
#include <cstring>
#include <string>
#define mp make_pair
using namespace std;
int n, m, vis[101][101][4];
string maze[101];

int direction(int p, int q, int x, int y){
	int dx = x-p, dy = y-q;
	if(dx == 0 && dy > 0) return 1;
	if(dx == 0 && dy < 0) return 3;
	if(dx > 0 && dy == 0) return 2;
	if(dx < 0 && dy == 0) return 0;
	return -1;
}

bool check(int x, int y, int dis){
	if(x<0 || x>=n || y<0 || y>=m) return 0;
	if(vis[x][y][dis%4]) return 0;
	if(maze[x][y] != '.' && maze[x][y] != 'S' && maze[x][y] != 'G') return 0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(maze[i][j] > '3' || maze[i][j] < '0') continue;
			int dir = maze[i][j]-'0'+dis;
			dir %= 4;
			if(dir == direction(i,j,x,y)) return 0;
		}
	}
	return 1;
}

int dijkstra(){
	pair<int,int> start, end;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(maze[i][j] == 'S') start = mp(i,j);
			else if(maze[i][j] == 'G') end = mp(i,j);
			else if(maze[i][j] == '^') maze[i][j] = '0';
			else if(maze[i][j] == '>') maze[i][j] = '1';
			else if(maze[i][j] == 'v') maze[i][j] = '2';
			else if(maze[i][j] == '<') maze[i][j] = '3';

		}
	}
	memset(vis,0,sizeof vis);
	set<pair<int,pair<int,int> > > s;
	s.insert(mp(0,start));
	while(!s.empty()){
		pair<int, pair<int,int> > temp = *s.begin();
		s.erase(s.begin());
		int dis = temp.first, x = temp.second.first, y = temp.second.second;
		if(vis[x][y][dis%4]) continue;
		vis[x][y][dis%4] = 1;
		// cout << x << " " << y << " " << dis << " " << maze[x][y] << endl;
		if(mp(x,y) == end) return dis;
		if(check(x+1,y,dis+1)) s.insert(mp(dis+1,mp(x+1,y)));
		if(check(x,y+1,dis+1)) s.insert(mp(dis+1,mp(x,y+1)));
		if(check(x-1,y,dis+1)) s.insert(mp(dis+1,mp(x-1,y)));
		if(check(x,y-1,dis+1)) s.insert(mp(dis+1,mp(x,y-1)));
	}
	return -1;
}
int main(){
	int t;
	cin >> t;
	for(int cases=1; cases<=t; cases++){
		cin >> n >> m;
		for(int i=0; i<n; i++) cin >> maze[i];
		int ans = dijkstra();
		cout << "Case #" << cases << ": ";
		if(ans!=-1) cout << ans << '\n';
		else cout << "impossible\n";
	}
}
#define _CRT_SECURE_NO_DEPRECATE
#pragma comment (linker, "/stack:64000000")

#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <deque>
#include <set>
#include <bitset>
#include <map>
#include <memory.h>
#include <cassert>

using namespace std;

#define fo(a,b,c) for (int a = (b); a < (c); a++)
#define fr(a,b) fo(a, 0, (b))
#define fi(n) fr(i, (n))
#define fj(n) fr(j, (n))
#define fk(n) fr(k, (n))
#define fd(a,b,c) for (int a = (b); a >= (c); a--)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define _(a,b) memset((a), (b), sizeof(a))
#define __(a) memset((a), 0, sizeof(a))
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back

typedef long long lint;
typedef pair<int, int> pii;

const int INF = 1000000000;
const lint LINF = 4000000000000000000LL;
const double eps = 1e-9;

int ni() { int a; scanf( "%d", &a ); return a; }
double nf() { double a; scanf( "%lf", &a ); return a; }
char sbuf[100005]; string ns() { scanf( "%s", sbuf ); return sbuf; }
long long nll() { long long a; scanf( "%lld", &a ); return a; }

void prepare()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	freopen("c.in", "r", stdin);
	freopen("c.out", "w", stdout);
#endif
}

void panic(bool expression = false)
{
	if (!expression)
	{
		cerr << "PANIC!" << endl;
		assert(false);
	}
}

const int maxn = 105;

int n, m;
char f[maxn][maxn];
int c[maxn][maxn][4];
int dst[maxn][maxn][4];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void go(int x, int y, int dx, int dy, int k)
{
	while (true)
	{
		x += dx;
		y += dy;
		if (x < 0 || x >= n || y < 0 || y >= m || (f[x][y] != '.' && f[x][y] != 'S' && f[x][y] != 'G'))
			break;
		c[x][y][k] = 1;
	}
}

void solve(int test_num)
{
	//cerr << test_num << endl;
	printf("Case #%d: ", test_num);
	scanf("%d%d", &n, &m);
	fi(n)
		scanf("%s", f[i]);
	_(c, 0);
	int sx, sy;
	int fx, fy;
	fi(n)
	{
		fj(m)
		{
			if (f[i][j] == 'S')
			{
				sx = i;
				sy = j;
			}
			else if (f[i][j] == 'G')
			{
				fx = i;
				fy = j;
			}
			else if (f[i][j] == '<')
			{
				go(i, j, 0, -1, 0);
				go(i, j, -1, 0, 1);
				go(i, j, 0, 1, 2);
				go(i, j, 1, 0, 3);
			}
			else if (f[i][j] == '^')
			{
				go(i, j, -1, 0, 0);
				go(i, j, 0, 1, 1);
				go(i, j, 1, 0, 2);
				go(i, j, 0, -1, 3);
			}
			else if (f[i][j] == '>')
			{
				go(i, j, 0, 1, 0);
				go(i, j, 1, 0, 1);
				go(i, j, 0, -1, 2);
				go(i, j, -1, 0, 3);
			}
			else if (f[i][j] == 'v')
			{
				go(i, j, 1, 0, 0);
				go(i, j, 0, -1, 1);
				go(i, j, -1, 0, 2);
				go(i, j, 0, 1, 3);
			}
		}
	}
	_(dst, -1);
	queue<pair<pii, int> > q;
	q.push(mp(mp(sx, sy), 0));
	dst[sx][sy][0] = 0;
	while (!q.empty())
	{
		pii t = q.front().first;
		int o = q.front().second;
		q.pop();
		int z = (o + 1) % 4;
		int p = dst[t.first][t.second][o];
		fi(4)
		{
			int x = t.first + dx[i];
			int y = t.second + dy[i];
			if (x >= 0 && x < n && y >= 0 && y < m && (f[x][y] == '.' || f[x][y] == 'S' || f[x][y] == 'G') && dst[x][y][z] < 0 && !c[x][y][z])
			{
				dst[x][y][z] = p + 1;
				q.push(mp(mp(x, y), z));
			}
		}
	}
	int res = INF;
	fi(4)
	{
		if (dst[fx][fy][i] >= 0)
			res = min(res, dst[fx][fy][i]);
	}
	if (res == INF)
		printf("impossible\n");
	else
		printf("%d\n", res);
}

int main()
{
	prepare();
	int number_of_tests;
	scanf("%d\n", &number_of_tests);
	fi(number_of_tests)
		solve(i + 1);
	return 0;
}
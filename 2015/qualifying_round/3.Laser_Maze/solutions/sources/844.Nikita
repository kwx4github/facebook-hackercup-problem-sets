#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

char getNext(char c)
{
	if (c == '^')
		return '>';
	if (c == '>')
		return 'v';
	if (c == 'v')
		return '<';
	return '^';
}

struct State
{
	int x, y, m;
	State () {}
	State (int _x, int _y, int _m): x(_x), y(_y), m(_m) {}
};

int main()
{
	
	int T;
	cin >> T;

	for (int test = 0; test < T; ++test)
	{
		cout << "Case #" << test + 1 << ": ";

		int m, n;
		cin >> m >> n;
		vector < vector<char> > a(m, vector<char>(n));
		vector < vector< vector<bool> > > mask(4, vector< vector<bool> >(m, vector<bool>(n, false)));
		
		pair<int, int> s, g;

		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				char c;
				cin >> c;
				a[i][j] = c;

				if (c == 'S')
				{
					s = make_pair(i, j);
				}
				if (c == 'G')
				{
					g = make_pair(i, j);
				}
			}
		}

		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				int c = a[i][j];
				if (c == '>' || c == '<' || c == '^' || c == 'v')
				{
					for (int k = 0; k < 4; ++k)
					{
						int y = i;
						int x = j;
						while (1)
						{
							mask[k][y][x] = true;
							if (c == '>')
								++x;
							else if (c == 'v')
								++y;
							else if (c == '<')
								--x;
							else
								--y;
							if (x < 0 || x >= n || y < 0 || y >= m)
								break;
							if (a[y][x] != '.' && a[y][x] != 'S' && a[y][x] != 'G')
								break;
						}

						c = getNext(c);
						
					}
				}
			}
		}


		/*cout << "\n";
		for (int i = 0; i < 4; ++i)
		{
			for (int j = 0; j < m; ++j)
			{
				for (int k = 0; k < n; ++k)
					cout << mask[i][j][k];
				cout << endl;
			}
			cout << "$$$$$$$$$$$$$$$\n";

		}*/

		vector <State> q;
		vector < vector< vector<int> > > dist(4, vector< vector<int> >(m, vector<int>(n, -1)));
		
		/*if (mask[0][s.first][s.second])
		{
			puts("impossible");
			continue;
		}*/

		q.push_back(State(s.second, s.first, 0));
		dist[0][s.first][s.second] = 0;
		int r = 0;
		int w = 1;
		while (r < w)
		{
			State cur = q[r++];
			const int dx[] = {1, 0, -1, 0};
			const int dy[] = {0, 1, 0, -1};
			for (int i = 0; i < 4; ++i)
			{
				State nxt = cur;	
				nxt.m = (nxt.m + 1) % 4;
				nxt.x += dx[i];
				nxt.y += dy[i];
				if (nxt.x < 0 || nxt.x >= n || nxt.y < 0 || nxt.y >= m)
					continue;
				int c = a[nxt.y][nxt.x];
				if (c != '.' && c != 'S' && c != 'G')
					continue;
				if (mask[nxt.m][nxt.y][nxt.x])
					continue;
				if (dist[nxt.m][nxt.y][nxt.x] != -1)
					continue;

				dist[nxt.m][nxt.y][nxt.x] = dist[cur.m][cur.y][cur.x] + 1;
				//cout << "m = " << nxt.m << " y = " << nxt.y << " x = " << nxt.x << "  dist = " << dist[nxt.m][nxt.y][nxt.x] << endl; 
				q.push_back(nxt);
				++w;
			}
		}

		int best = -1;
		for (int i = 0; i < 4; ++i)
		{
			int d = dist[i][g.first][g.second];
			if (d != -1 && (best == -1 || d < best))
			{
				best = d;
			}
		}

		if (best == -1)
			puts("impossible");
		else
			printf("%d\n", best);

	}



}
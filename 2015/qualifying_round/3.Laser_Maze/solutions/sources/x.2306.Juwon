#include <cstdio>
#include <queue>
#include <algorithm>

using namespace std;

struct pos {
    int x, y;
};

struct node {
    pos p;
    int w;
    int turn;
    bool operator < (const node& rhs) const {
        return w > rhs.w;
    }
};

const int inf = 99999999;
priority_queue<node> q;
int n, m;
char board[105][105];
int dist[105][105][4];
pos S, G;

int dy[] = {0, -1, 0, 1};
int dx[] = {-1, 0, 1, 0};
char sign[] = {'<', '^', '>', 'v'};

int isValidPos(int y, int x) {
    if (!(y >= 0 && y < n && x >= 0 && x < m)) {
        return 0;
    }
    if (board[y][x] != '.' && board[y][x] != 'S' && board[y][x] != 'G') {
        return 0;
    }
    return 1;
}

int isAbleToGo(int y, int x, int turn) {
    if (!isValidPos(y, x)) {
        return 0;
    }

    int ny, nx;
    for (int i = 0; i < 4; ++i) {
        ny = y + dy[i];
        nx = x + dx[i];
        while (isValidPos(ny, nx)) {
            ny += dy[i];
            nx += dx[i];
        }
        if (ny >= 0 && ny < n && nx >= 0 && nx < m && board[ny][nx] == sign[(i + turn + 2) % 4]) {
            return 0;
        }
    }

    return 1;
}

void solve(int cs) {
    printf("Case #%d: ", cs);
    while (!q.empty()) {
        q.pop();
    }
    fill(dist[0][0], dist[n][0], inf);

    node t, t2;
    t.p = S;
    t.w = t.turn = 0;
    dist[S.y][S.x][0] = 0;
    q.push(t);

    while (!q.empty()) {
        t = q.top();
        q.pop();
        if (t.p.y == G.y && t.p.x == G.x) {
            printf("%d\n", t.w);
            return;
        }

        t2.w = t.w + 1;
        t2.turn = (t.turn + 1) % 4;
        for (int i = 0; i < 4; ++i) {
            t2.p.y = t.p.y + dy[i];
            t2.p.x = t.p.x + dx[i];
            if (isAbleToGo(t2.p.y, t2.p.x, t2.turn) && dist[t2.p.y][t2.p.x][t2.turn] > t2.w) {
                dist[t2.p.y][t2.p.x][t2.turn] = t2.w;
                q.push(t2);
            }
        }
    }
    printf("impossible\n");
}

int main() {
    int T;
    scanf("%d", &T);
    for (int cs = 1; cs <= T; ++cs) {
        scanf("%d %d", &n, &m);
        for (int i = 0; i < n; ++i) {
            scanf("%s", board[i]);
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == 'S') {
                    S.y = i;
                    S.x = j;
                } else if (board[i][j] == 'G') {
                    G.y = i;
                    G.x = j;
                }
            }
        }
        solve(cs);
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define dump(...) cout<<"# "<<#__VA_ARGS__<<'='<<(__VA_ARGS__)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}

template<typename Tuple>
void print_tuple(ostream&,const Tuple&){}
template<typename Car,typename... Cdr,typename Tuple>
void print_tuple(ostream& os,const Tuple& t){
	print_tuple<Cdr...>(os,t);
	os<<(sizeof...(Cdr)?",":"")<<get<sizeof...(Cdr)>(t);
}
template<typename... Args>
ostream& operator<<(ostream& os,const tuple<Args...>& t){
	print_tuple<Args...>(os<<'(',t);
	return os<<')';
}

template<typename Ch,typename Tr,typename C>
basic_ostream<Ch,Tr>& operator<<(basic_ostream<Ch,Tr>& os,const C& c){
	os<<'[';
	for(auto i=begin(c);i!=end(c);++i)
		os<<(i==begin(c)?"":" ")<<*i;
	return os<<']';
}

constexpr int INF=1e9;
constexpr int MOD=1e9+7;
constexpr double EPS=1e-9;

void solve()
{
	int h,w; cin>>h>>w;
	vs grid(h);
	rep(i,h) cin>>grid[i];
	
	pii start,goal;
	rep(i,h) rep(j,w){
		if(grid[i][j]=='S') grid[i][j]='.',start=mp(i,j);
		if(grid[i][j]=='G') grid[i][j]='.',goal=mp(i,j);
	}
	
	vector<vvi> dead(4,vvi(h,vi(w)));
	rep(i0,h) rep(j0,w){
		int o=string("^>v<").find(grid[i0][j0]);
		if(o==string::npos) continue;
		rep(k,4){
			int di="\xff\0\x1\0"[(o+k)%4],dj="\0\x1\0\xff"[(o+k)%4];
			for(int i=i0,j=j0;;){
				i+=di,j+=dj;
				if(i<0 || h<=i || j<0 || w<=j || grid[i][j]!='.') break;
				dead[k][i][j]=1;
			}
		}
	}
	
	vector<vvi> dist(4,vvi(h,vi(w,INF)));
	queue<tuple<int,int,int>> q; q.emplace(tuple_cat(start,mt(0)));
	while(q.size()){
		int ci,cj,cc; tie(ci,cj,cc)=q.front(); q.pop();
		rep(k,4){
			int ni=ci+"\xff\x1\0\0"[k],nj=cj+"\0\0\xff\x1"[k];
			if(ni<0 || h<=ni || nj<0 || w<=nj || grid[ni][nj]!='.' || dead[(cc+1)%4][ni][nj]) continue;
			if(dist[(cc+1)%4][ni][nj]==INF){
				dist[(cc+1)%4][ni][nj]=cc+1;
				q.emplace(ni,nj,cc+1);
			}
		}
	}
	int res=INF;
	rep(i,4) res=min(res,dist[i][get<0>(goal)][get<1>(goal)]);
	if(res==INF)
		cout<<"impossible"<<endl;
	else
		cout<<res<<endl;
}

int main()
{
	int tc; cin>>tc;
	rep(i,tc){
		cout<<"Case #"<<i+1<<": ";
		solve();
	}
}

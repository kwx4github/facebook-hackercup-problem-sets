///Gergely David
///Facebook is the best!

#include <bits/stdc++.h>

#define x first
#define y second
#define mp make_pair
#define pb push_back

using namespace std;

typedef unsigned long long ull ;
typedef long long ll ;
typedef pair<int, int> Pair ;

const int NMAX = 110;
const int INF = 0x3f3f3f3f ;

int M, N ;
int T;

ifstream fin("input.in") ;
ofstream fout("output.out") ;

int G[NMAX][NMAX];

int dx[ ] = {-1, 1, 0, 0};
int dy[ ] = {0, 0, -1, 1};



///***********************************************



inline int min(int a, int b)
{
    if(a > b)
        return b ;
    else return a ;

}



///***********************************************



inline int max(int a, int b)
{
    if(a > b)
        return a ;
    else return b ;
}



///***********************************************



inline bool Verif(int R, int C)
{
    return 0 <= R && R < M && 0 <= C && C < N;
}



///***********************************************




inline int Convert(int row, int colum, int tt)
{
    return NMAX * NMAX * tt + NMAX * row + colum;
}



///***********************************************



inline bool Patrat(int R, int C)
{
    return Verif(R, C) &&
           (G[ R ][ C ] == -1 ||
            G[ R ][ C ] == -2 ||
            G[ R ][ C ] == 10);
}
int S[NMAX * NMAX * 5];

map < int, vector<int> > D;
set < int > B;



///***********************************************



inline void Sterge()
{
    for (int i = 0; i < NMAX; i++)
        for (int j = 0; j < NMAX; j++)
            G[ i ][ j ] = -1000;
    for (int i = 0; i < NMAX * NMAX * 5; i++)
        S[ i ] = NMAX * NMAX * 10;

    D.clear();
    B.clear();
}


///***********************************************



void Cauta(int ori)
{
    int si = D[ori].size(); ;

    for (int i = 0; i < si ;  ++ i)
    {
        int k = D[ori][i];
        if (S[ori] + 1 < S[k])
        {
            S[k] = S[ori] + 1;

            Cauta(k);
        }
    }
}


///***********************************************



int main()
{
    int T;

    fin >> T ;

    for (int ii = 1; ii <= T; ++ ii )
    {
        fout << "Case #" << ii << ": " ;

        Sterge();

        fin >> M >> N;

        int nic, pic, dic;
        dic = nic + pic ;

        int Ox, Oy, Gx, Gy;

        for (int i = 0; i < M; i++)
            for (int j = 0; j < N; j++)
            {
                char c;

                fin >> c;
                if (c == 'S')
                {
                    G[i][j] = -1;
                    Ox = i;
                    Oy = j;
                }
                if (c == 'G')
                {
                    G[i][j] = -2;

                    Gx = i;
                    Gy = j;
                }
                if (c == '^') G[i][j] = 0;
                if (c == '>') G[i][j] = 1;
                if (c == 'v') G[i][j] = 2;
                if (c == '<') G[i][j] = 3;
                if (c == '.') G[i][j] = 10;
            }

        for (int i = 0; i < M; i++)
            for (int j = 0; j < N; j++)
                if (0 <= G[i][j] && G[i][j] <= 3)
                {
                    int var = G[i][j];

                    for (int ii = i - 1; ii >= 0 &&
                            G[ii][j] != -1000 && !(G[ii][j] >= 0 && G[ii][j] <= 3); ii--)

                        B.insert(Convert(ii, j, (4 - var) % 4));


                    for (int jj = j + 1; jj <= N - 1 &&
                            G[i][jj] != -1000 && !(G[i][jj] >= 0 && G[i][jj] <= 3); jj++)

                        B.insert(Convert(i, jj, (5 - var) % 4));


                    for (int ii = i + 1; ii <= M - 1 &&
                            G[ii][j] != -1000 && !(G[ii][j] >= 0 && G[ii][j] <= 3); ii++)

                        B.insert(Convert(ii, j, (6 - var) % 4));


                    for (int jj = j - 1; jj >= 0 &&
                            G[i][jj] != -1000 && !(G[i][jj] >= 0 && G[i][jj] <= 3); jj--)

                        B.insert(Convert(i, jj, (7 - var) % 4));


                }

        B.erase(Convert(Ox, Oy, 0));


        for (int i = 0; i < M; i++)
            for (int j = 0; j < N; j++)

                if (G[i][j] == -1 || G[i][j] == -2 || G[i][j] == 10)
                    for (int xiy = 0; xiy < 4; ++ xiy )
                    {
                        int xnou = i + dx[xiy];
                        int ynou = j + dy[xiy];

                        if (Patrat(xnou, ynou))
                            for (int t = 0; t < 4; t++)
                            {
                                int nod_vechi = Convert(i, j, t);
                                int nod_nou = Convert(xnou, ynou, (t + 1) % 4);

                                if (B.find(nod_vechi) == B.end() &&
                                        B.find(nod_nou) == B.end())

                                    D[nod_vechi].push_back(nod_nou);
                            }
                    }



        S[Convert(Ox, Oy, 0)] = 0;

        Cauta(Convert(Ox, Oy, 0));

        int sol = NMAX * NMAX * 10;




        for (int i = 0; i < 4; i++)
            sol = min(sol, S[Convert(Gx, Gy, i)]);

        if (sol == NMAX * NMAX* 10)
            fout << "impossible\n";
        else

            fout << sol << "\n";

    }


    fin.close() ;
    fout.close() ;
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

#define rep(i, from, to) for (int i = from; i < int(to); ++i)
#define trav(it, x) for (auto it = x.begin(); it != x.end(); ++it)
#define all(x) x.begin(), x.end()
typedef long long ll;
typedef pair<int, int> pi;
typedef vector<int> vi;

int turret(char c) {
	if (c == '>') return 1;
	if (c == 'v') return 2;
	if (c == '<') return 3;
	if (c == '^') return 4;
	return 0;
}

bool to_turret(char c, int t, int& dx, int& dy) {
	int s = turret(c);
	if (!s) return false;
	s = (s + t - 1) & 3;
	if (s == 0) dx = 1, dy = 0;
	if (s == 1) dx = 0, dy = 1;
	if (s == 2) dx = -1, dy = 0;
	if (s == 3) dx = 0, dy = -1;
	return true;
}

int solve() {
	int H, W;
	cin >> H >> W;
	vector<string> board(H);
	int startx = -1, starty = -1, goalx = -1, goaly = -1;
	rep(i, 0, H) {
		cin >> board[i];
		rep(j, 0, W) {
			if (board[i][j] == 'S') {
				starty = i, startx = j;
				board[i][j] = '.';
			}
			else if (board[i][j] == 'G') {
				goaly = i, goalx = j;
				board[i][j] = '.';
			}
		}
	}

	vector<vector<bool> > blocked[4], visited[4];
	rep(t, 0, 4) {
		vector<vector<bool> >& bl = blocked[t];
		bl.assign(H, vector<bool>(W, false));
		visited[t].assign(H, vector<bool>(W, false));
		rep(i, 0, H) {
			rep(j, 0, W) {
				char c = board[i][j];
				if (c == '#')
					bl[i][j] = true;
				int dx, dy;
				if (to_turret(c, t, dx, dy)) {
					bl[i][j] = true;
					int y = i+dy, x = j+dx;
					while (0 <= y && 0 <= x && y < H && x < W && board[y][x] == '.')
						bl[y][x] = true, y += dy, x += dx;
				}
			}
		}
	}

	typedef pi T;
	T startp(starty, startx);
	queue<pair<T, int> > q;
	q.push(make_pair(startp, 0));
	while (!q.empty()) {
		pair<T, int> pa = q.front();
		q.pop();
		T pos = pa.first;
		int time = pa.second;
		int t = time&3;
		if (visited[t][pos.first][pos.second])
			continue;
		visited[t][pos.first][pos.second] = true;
		if (pos.first == goaly && pos.second == goalx) {
			return time;
		}
		int DX[4] = {0, 1, 0, -1}, DY[4] = {1, 0, -1, 0};
		rep(d, 0, 4) {
			int dx = DX[d], dy = DY[d];
			int x = pos.second + dx, y = pos.first + dy;
			if (x < 0 || y < 0 || x >= W || y >= H) continue;
			int t2 = (time+1) & 3;
			if (blocked[t2][y][x]) continue;
			q.push(make_pair(T(y, x), time+1));
		}
	}
	return -1;
}

int main() {
	int N;
	cin >> N;
	rep(i, 0, N) {
		int r = solve();
		cout << "Case #" << i+1 << ": ";
		if (r == -1) cout << "impossible";
		else cout << r;
		cout << endl;
	}
}

#include<bits/stdc++.h>

#define xx first
#define yy second
#define LL long long
#define inf 100000000
#define pb push_back
#define vsort(v) sort(v.begin(),v.end())
#define pi acos(-1)
#define clr(a,b) memset(a,b,sizeof a)
#define bclr(a) memset(a,false,sizeof a)
#define pii pair<int,int>
#define MOD 1000000007
#define MP make_pair
#define MX 200000

using namespace std;
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};

int L[][2]={{-1,0},{0,1},{1,0},{0,-1}};
int U[][2]={{0,1},{1,0},{0,-1},{-1,0}};
int R[][2]={{1,0},{0,-1},{-1,0},{0,1}};
int D[][2]={{0,-1},{-1,0},{0,1},{1,0}};

int dis[105][105][5];
bool vis[105][105][5];
bool not_safe[105][105][5];

string s[105];
queue<pair<int,pii> >Q;
vector<pii>lft,rgt,up,down;

int srcX,srcY,goalX,goalY,n,m;

bool valid(int x,int y){
    if(x>=0 && y>=0 && x<n && y<m && (s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G'))
        return true;
    return false;
}

void go_lft(int x,int y,int id){
    while(y>=0 && (s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G'))
        not_safe[x][y][id]=true,y--;
}

void go_up(int x,int y,int id){
    while(x>=0 && (s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G'))
        not_safe[x][y][id]=true,x--;
}

void go_rgt(int x,int y,int id){
    while(y<m && (s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G'))
        not_safe[x][y][id]=true,y++;
}

void go_down(int x,int y,int id){
    while(x<n && (s[x][y]=='.' || s[x][y]=='S' || s[x][y]=='G'))
        not_safe[x][y][id]=true,x++;
}

void determine_safety(){
    for(int i=0;i<(int)lft.size();i++){
        int X=lft[i].xx,Y=lft[i].yy;
        for(int j=0;j<4;j++){
            int x=X+L[j][0],y=Y+L[j][1];
            if(valid(x,y)){
                if(j==0) go_up(x,y,1);
                else if(j==1) go_rgt(x,y,2);
                else if(j==2) go_down(x,y,3);
                else if(j==3) go_lft(x,y,0);
            }
        }
    }
    for(int i=0;i<(int)rgt.size();i++){
        int X=rgt[i].xx,Y=rgt[i].yy;
        for(int j=0;j<4;j++){
            int x=X+R[j][0],y=Y+R[j][1];
            if(valid(x,y)){
                if(j==0) go_down(x,y,1);
                else if(j==1) go_lft(x,y,2);
                else if(j==2) go_up(x,y,3);
                else if(j==3) go_rgt(x,y,0);
            }
        }
    }
    for(int i=0;i<(int)up.size();i++){
        int X=up[i].xx,Y=up[i].yy;
        for(int j=0;j<4;j++){
            int x=X+U[j][0],y=Y+U[j][1];
            if(valid(x,y)){
                if(j==0) go_rgt(x,y,1);
                else if(j==1) go_down(x,y,2);
                else if(j==2) go_lft(x,y,3);
                else if(j==3) go_up(x,y,0);
            }
        }
    }
    for(int i=0;i<(int)down.size();i++){
        int X=down[i].xx,Y=down[i].yy;
        for(int j=0;j<4;j++){
            int x=X+D[j][0],y=Y+D[j][1];
            if(valid(x,y)){
                if(j==0) go_lft(x,y,1);
                else if(j==1) go_up(x,y,2);
                else if(j==2) go_rgt(x,y,3);
                else if(j==3) go_down(x,y,0);
            }
        }
    }
}

int bfs(){
    if(srcX==goalX && srcY==goalY) return 0;
    while(!Q.empty()) Q.pop();
    Q.push(MP(0,MP(srcX,srcY)));
    dis[srcX][srcY][0]=0;
    vis[srcX][srcY][0]=true;
    while(!Q.empty()){
        pair<int,pii>P=Q.front();
        Q.pop();
        int x=P.yy.xx,y=P.yy.yy,dd=P.xx,d=(dis[x][y][dd]+1)%4;
        for(int i=0;i<4;i++){
            int X=x+dx[i],Y=y+dy[i];
            if(valid(X,Y) && not_safe[X][Y][d]==false && vis[X][Y][d]==false){
                Q.push(MP(d,MP(X,Y)));
                vis[X][Y][d]=true;
                dis[X][Y][d]=dis[x][y][dd]+1;
            }
        }
    }
    int ret=10000000;
    for(int i=0;i<4;i++){
        if(!vis[goalX][goalY][i]) continue;
        ret=min(ret,dis[goalX][goalY][i]);
    }
    if(ret==10000000) ret=-1;
    return ret;
}

int main(){
    freopen("in.txt","r",stdin);
    freopen("out.out","w",stdout);
    int test;
    cin>>test;
    for(int kase=1;kase<=test;kase++){
        cin>>n>>m;
        for(int i=0;i<n;i++){
            cin>>s[i];
            for(int j=0;j<m;j++){
                if(s[i][j]=='S') srcX=i,srcY=j;
                else if(s[i][j]=='G') goalX=i,goalY=j;
                else if(s[i][j]=='<') lft.pb(MP(i,j));
                else if(s[i][j]=='^') up.pb(MP(i,j));
                else if(s[i][j]=='>') rgt.pb(MP(i,j));
                else if(s[i][j]=='v') down.pb(MP(i,j));
            }
        }
        determine_safety();
        int get=bfs();
        cout<<"Case #"<<kase<<": ";
        if(get==-1) cout<<"impossible"<<endl;
        else cout<<get<<endl;
        memset(vis,0,sizeof vis);
        memset(not_safe,false,sizeof not_safe);
        memset(dis,0,sizeof dis);
        lft.clear();
        rgt.clear();
        up.clear();
        down.clear();
    }
    return 0;
}

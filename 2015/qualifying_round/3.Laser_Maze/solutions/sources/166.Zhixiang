#include<cstdio>
#include<cstring>
#include<queue>
#include<set>
#define MAXN 101
using namespace std;
char g[MAXN][MAXN];
bool r[MAXN][MAXN][4];
int n, m;
set<pair<pair<int, int>, int> > myset;
int go[4][2] = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
void change() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (g[i][j] == '<') {
				g[i][j] = '^';
			} else if (g[i][j] == '^') {
				g[i][j] = '>';
			} else if (g[i][j] == '>') {
				g[i][j] = 'v';
			} else if (g[i][j] == 'v') {
				g[i][j] = '<';
			}
		}
	}
}
void init() {
	myset.clear();
	memset(r, false, sizeof(r));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (g[i][j] == '.') {
				for (int k = 0; k < 4; k++) {
					r[i][j][k] = true;
				}
			}
		}
	}
	for (int t = 0; t < 4; t++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (g[i][j] == '<') {
					for (int k = j - 1; k >= 0; k--) {
						if (g[i][k] == '.') {
							r[i][k][t] = false;
						} else {
							break;
						}
					}
				} else if (g[i][j] == '^') {
					for (int k = i - 1; k >= 0; k--) {
						if (g[k][j] == '.') {
							r[k][j][t] = false;
						} else {
							break;
						}
					}
				} else if (g[i][j] == '>') {
					for (int k = j + 1; k < m; k++) {
						if (g[i][k] == '.') {
							r[i][k][t] = false;
						} else {
							break;
						}
					}
				} else if (g[i][j] == 'v') {
					for (int k = i + 1; k < n; k++) {
						if (g[k][j] == '.') {
							r[k][j][t] = false;
						} else {
							break;
						}
					}
				}
			}
		}
		change();
	}
}
bool check(pair<pair<int, int>, int> x) {
	pair<int, int> p = x.first;
	if (!(p.first >= 0 && p.first < n && p.second >= 0 && p.second < m)) {
		return false;
	}
	return r[p.first][p.second][x.second % 4] && !myset.count(x);
}
int bfs(pair<int, int> st, pair<int, int> nd) {
	queue<pair<pair<int, int>, int> > q;
	q.push(make_pair(st, 0));
	int cnt = 10000000;
	while (cnt-- && !q.empty()) {
		pair<pair<int, int>, int> head = q.front();
		if (head.first == nd) {
			return head.second;
		}

		q.pop();
		for (int i = 0; i < 4; i++) {
			pair<pair<int, int>, int> tmp = head;
			tmp.first.first += go[i][0];
			tmp.first.second += go[i][1];
			tmp.second++;
//			printf("(%d,%d) %d ", tmp.first.first, tmp.first.second,
//					tmp.second);
			if (check(tmp)) {
//				puts("yes");
				myset.insert(tmp);
				q.push(tmp);
//			} else {
//				puts("no");
			}
		}
	}
	return -1;
}
int main() {
	setbuf(stdout, NULL);
	int T;
	int ca = 1;
	scanf("%d", &T);
	while (T--) {
		scanf("%d%d", &n, &m);
		pair<int, int> st, nd;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				scanf(" %c", &g[i][j]);
				if (g[i][j] == 'S') {
					st = make_pair(i, j);
					g[i][j] = '.';
				} else if (g[i][j] == 'G') {
					nd = make_pair(i, j);
					g[i][j] = '.';
				}
			}
		}
		init();
//		for (int t = 0; t < 4; t++) {
//			for (int i = 0; i < n; i++) {
//				for (int j = 0; j < m; j++) {
//					printf("%d", r[i][j][t]);
//				}
//				puts("");
//			}
//			puts("");
//		}
		int res = bfs(st, nd);
		printf("Case #%d: ", ca++);
		if (res < 0) {
			puts("impossible");
		} else {
			printf("%d\n", res);
		}
	}
	return 0;
}

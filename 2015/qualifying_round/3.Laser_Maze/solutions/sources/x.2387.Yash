/*
***************************************************************************************************************

							Author : Yash Sadhwani

**************************************************************************************************************
*/
#include<stdio.h>
#include<iostream>
#include<vector>
#include<string.h>
#include<algorithm>
#include<deque>
#include<map>
#include<set>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<functional>
using namespace std;
#define ll long long
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define sc(x) scanf("%c",&x)
#define vl vector<ll>
#define vi vector<int>
#define vvl vector< vl >
#define vvi vector< vi >
#define pb push_back
#define mod 1000000007
#define mem(x,y) memset(x,y,sizeof(x))
#define f(i,a,b) for(int i=(a);i<(b);i++)
#define max_int_value 2147483647
#define max_long_value 9223372036854775807


//qsort(ww,cc,sizeof(tp),compare);
/*int compare(const void *a,const void *b){
	ll y=((((tp*)a)->w)-(((tp*)b)->w));
	if(y>0)return 1;
	else if(y==0)return 0;
	else return -1;
}*/

#define MAXN 110
#define ii pair<int,int>
#define iii pair<ii,int>	//location,state

int N,M;
char arr[MAXN][MAXN];
map<iii,int> visited;
map<iii,int> level;
ii START,GOAL;

int dx[]={-1,1,0,0};
int dy[]={0,0,1,-1};

set<int> timers[MAXN][MAXN];


inline void ReadInput(void){
	si(N); si(M);
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++)cin>>arr[i][j];
	}
}

inline void solve(void){
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			if(arr[i][j]=='#')continue;
			if(arr[i][j]=='v' || arr[i][j]=='^' || arr[i][j]=='<' || arr[i][j]=='>')continue;
			if(arr[i][j]=='G')GOAL=ii(i,j);
			else if(arr[i][j]=='S')START=ii(i,j);
			//rows
			int curr=j;
			for(int t=0;t<4;t++)timers[i][j].insert(t);
			while(curr<=M && arr[i][curr]!='#'){
				if(arr[i][curr]=='v'){
					if(timers[i][j].find(1)!=timers[i][j].end())timers[i][j].erase(1);
				}
				else if(arr[i][curr]=='^'){
					if(timers[i][j].find(3)!=timers[i][j].end())timers[i][j].erase(3);
				}
				else if(arr[i][curr]=='<'){
					if(timers[i][j].find(0)!=timers[i][j].end())timers[i][j].erase(0);
				}
				else if(arr[i][curr]=='>'){
					if(timers[i][j].find(2)!=timers[i][j].end())timers[i][j].erase(2);
				}
				curr++;
			}
			curr=j;
			while(curr>=1 && arr[i][curr]!='#'){
				if(arr[i][curr]=='v'){
					if(timers[i][j].find(3)!=timers[i][j].end())timers[i][j].erase(3);
				}
				else if(arr[i][curr]=='^'){
					if(timers[i][j].find(1)!=timers[i][j].end())timers[i][j].erase(1);
				}
				else if(arr[i][curr]=='<'){
					if(timers[i][j].find(2)!=timers[i][j].end())timers[i][j].erase(2);
				}
				else if(arr[i][curr]=='>'){
					if(timers[i][j].find(0)!=timers[i][j].end())timers[i][j].erase(0);
				}
				curr--;
			}
			//columns
			curr=i;
			while(curr>=1 && arr[curr][j]!='#'){
				if(arr[curr][j]=='v'){
                    if(timers[i][j].find(0)!=timers[i][j].end())timers[i][j].erase(0);
				}
				else if(arr[curr][j]=='^'){
					if(timers[i][j].find(2)!=timers[i][j].end())timers[i][j].erase(2);
				}
				else if(arr[curr][j]=='<'){
					if(timers[i][j].find(3)!=timers[i][j].end())timers[i][j].erase(3);
				}
				else if(arr[curr][j]=='>'){
					if(timers[i][j].find(1)!=timers[i][j].end())timers[i][j].erase(1);
				}
				curr--;
			}
			curr=i;
			while(curr<=N && arr[curr][j]!='#'){
				if(arr[curr][j]=='v'){
					if(timers[i][j].find(2)!=timers[i][j].end())timers[i][j].erase(2);
				}
				else if(arr[curr][j]=='^'){
					if(timers[i][j].find(0)!=timers[i][j].end())timers[i][j].erase(0);
				}
				else if(arr[curr][j]=='<'){
					if(timers[i][j].find(1)!=timers[i][j].end())timers[i][j].erase(1);
				}
				else if(arr[curr][j]=='>'){
					if(timers[i][j].find(3)!=timers[i][j].end())timers[i][j].erase(3);
				}
				curr++;
			}
		}
	}
	/*if(timers[START.first][START.second].find(0)==timers[START.first][START.second].end()){
		cout<<"impossible\n";
		return;
	}*/
    queue<iii> pp;
	pp.push(iii(START,0));
	visited[iii(START,0)]=1;
	level[iii(START,0)]=0;
	while(!pp.empty()){
		iii u=pp.front();
		pp.pop();
		ii here=u.first;
		int state=u.second;
		for(int i=0;i<4;i++){
			int a,b;
			a=here.first+dx[i];
			b=here.second+dy[i];
			//if(a<1 || a>N || b<1 || b>M)continue;
			if(timers[a][b].find((state+1)%4)!=timers[a][b].end()){
				ii aa=ii(a,b);
				iii bb=iii(aa,(state+1)%4);
				if(visited[bb]==1)continue;
				pp.push(bb);
				level[bb]=level[u]+1;
				visited[bb]=1;
			}
		}
	}
	int ans=max_int_value;
	for(int i=0;i<4;i++){
		iii bitch=iii(GOAL,i);
		if(timers[GOAL.first][GOAL.second].find(i)!=timers[GOAL.first][GOAL.second].end() ){
			if(level[bitch]!=0){
				ans=min(ans,level[bitch]);
			}
		}
	}
	/*for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			for(int k=0;k<4;k++){
				if(timers[i][j].find(k)!=timers[i][j].end()){
					cout<<k<<",";
				}
			}
			cout<<"  ";
		}
		cout<<endl;
	}*/
	if(ans==max_int_value)ans=-1;
	if(ans==-1)cout<<"impossible\n";
	else cout<<ans<<endl;
}

inline void Refresh(void){
	visited.clear();
	level.clear();
    for(int i=0;i<MAXN;i++){
        for(int j=0;j<MAXN;j++)timers[i][j].clear();
    }
}

int main()
{
    int t; si(t);
	int g=1;
	while(t--){
		ReadInput();
		Refresh();
		cout<<"Case #"<<g<<": ";
		solve();
		g++;
	}
	return 0;
}

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define x first
#define y second
#define in(n) int (n) = nxt()

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef int itn;
typedef pair<int, int> PII;

int nxt() {
    int res;
    scanf("%d", &res);
    return res;
}


int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};


struct State {
    int x, y, t;
};

void solve(int test) {
    cout << "Case #" << test << ": ";
    int n, m;
    cin >> n >> m;
    string s[n];
    for (int i = 0; i < n; ++i) {
        cin >> s[i];
    }
    PII st = mp(-1, -1);
    PII en = mp(-1, -1);
    char used[n][m];
    memset(used, 0, sizeof(used));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (s[i][j] != '.' && s[i][j] != 'S' && s[i][j] != 'G') {
                used[i][j] = 1;
            }
            if (s[i][j] == 'S') {
                st = {i, j};
            }
            if (s[i][j] == 'G') {
                en = {i, j};
            }
        }
    }

    int a[n][m];
    memset(a, 255, sizeof(a));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == '>') {
                a[i][j] = 0;
            }
            if (s[i][j] == 'v') {
                a[i][j] = 1;
            }
            if (s[i][j] == '<') {
                a[i][j] = 2;
            }
            if (s[i][j] == '^') {
                a[i][j] = 3;
            }
        }
    }

    char can[4][n][m];
    memset(can, 0, sizeof(can));
    for (int k = 0; k < 4; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (a[i][j] != -1) {
                    for (int t = 1; t <= 101; ++t) {
                        int x = i + dx[a[i][j]] * t;
                        int y = j + dy[a[i][j]] * t;
                        if (x < 0 || x >= n || y < 0 || y >= m) {
                            break;
                        }
                        if (used[x][y]) {
                            break;
                        }
                        can[k][x][y] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                can[k][i][j] |= used[i][j];
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                can[k][i][j] ^= 1;
            }
        }

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (a[i][j] != -1) {
                    a[i][j] = (a[i][j] + 1) % 4;
                }
            }
        }
    }

    queue<State> q;
    char uu[n][m][4];
    memset(uu, 0, sizeof(uu));
    uu[st.x][st.y][0] = 0;
    int d[n][m][4];
    d[st.x][st.y][0] = 0;
    q.push(State{st.x, st.y, 0});

    while (!q.empty()) {
        State s = q.front();
        PII p = {s.x, s.y};
        q.pop();
        if (p == en) {
            cout << d[s.x][s.y][s.t] << "\n";
            return;
        }

        int t = (s.t + 1) % 4;
        for (int i = 0; i < 4; ++i) {
            int x = p.x + dx[i];
            int y = p.y + dy[i];
            if (x >= 0 && x < n && y >= 0 && y < m) {
                if (can[t][x][y] && !uu[x][y][t]) {
                    uu[x][y][t] = 1;
                    q.push(State{x, y, t});
                    d[x][y][t] = d[s.x][s.y][s.t] + 1;
                }
            }
        }
    }
    cout << "impossible\n";
}


int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin >> t;
    for (int i = 0; i < t; ++i) {
        solve(i + 1);
    }
    return 0;
}

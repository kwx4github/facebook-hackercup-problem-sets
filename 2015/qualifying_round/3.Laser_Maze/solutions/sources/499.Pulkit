#include<bits/stdc++.h>
using namespace std;
 
#define LET(x, a)  __typeof(a) x(a)
#define TR(v, it) for(LET(it, v.begin()); it != v.end(); it++)
#define si(x) scanf("%d",&x)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define MOD 1000000007
#define SET(x,y) memset(x,y,sizeof(x));
#define LL long long int
#define ULL unsigned LL
#define PII pair<int, int>
 
string s[300];
int block[4][105][105];
bool vis[4][105][105];
int main() {
    int i, j, k,n, m, t;
    PII st, en;
    cin >> t;
    int tdx[] = {-1, 0, 1, 0};
    int tdy[] = {0, 1, 0, -1};
    char rev[300];
    rev['^'] = 0;
    rev['>'] = 1;
    rev['v'] = 2;
    rev['<'] = 3;
    int cs = 1;
    while (t--) {
        memset(block, 0, sizeof(block));
        memset(vis, 0, sizeof(vis));
        printf("Case #%d: ", cs++);
        cin >> n >> m;
        for (i = 0; i < n; i++)
            cin >> s[i];
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (s[i][j] == 'S') {
                    s[i][j] = '.';
                    st = MP(i, j);
                } else if (s[i][j] == 'G') {
                    s[i][j] = '.';
                    en = MP(i, j);
                }
            }
        }
        for (i = 0; i < 4; i++) {
            for (j = 0; j < n; j++) {
                for (k = 0; k < m; k++) {
                    if (s[j][k] == '.')
                        continue;
                    block[i][j][k] = 1;
                    if (s[j][k] == '#')
                        continue;
                    int cx = j, cy = k;
                    int dx = tdx[(rev[s[j][k]] + i) % 4], dy = tdy[(rev[s[j][k]] + i) % 4];
                    cx += dx;
                    cy += dy;
                    while (cx >= 0 && cy >= 0 && cx < n && cy < m && s[cx][cy] == '.') {
                        block[i][cx][cy] = 1;
                        cx += dx;
                        cy += dy;
                    }
                }
            }
        }
        queue<pair<PII, PII> > pq; 
        bool reached = false;
        pq.push(MP(MP(0, 0), st));
        vis[0][st.F][st.S] = 1;
        while (!pq.empty() && !reached) {
            int cdis = pq.front().F.F;
            int crot = pq.front().F.S;
            PII cloc = pq.front().S;
            int cx = cloc.first;
            int cy = cloc.second;
            pq.pop();
            int nrot = (crot + 1) % 4;
            for (i = 0; i < 4; i++) {
                int nx = cx + tdx[i];
                int ny = cy + tdy[i];
                if (!(nx >= 0 && ny >= 0 && nx < n && ny < m))
                    continue;
                if (block[nrot][nx][ny])
                    continue;
                if (vis[nrot][nx][ny])
                    continue;
                vis[nrot][nx][ny] = 1;
                if (MP(nx, ny) == en) {
                    printf("%d\n", cdis + 1);
                    reached = 1;
                    break;
                }
                pq.push(MP(MP(cdis + 1, nrot), MP(nx, ny)));
            }
        }
        if (!reached) {
            printf("impossible\n");
        }
    }
    return 0;
}


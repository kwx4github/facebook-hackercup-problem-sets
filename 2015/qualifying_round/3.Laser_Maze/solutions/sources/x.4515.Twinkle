#include <iostream>
#include <cstdio>
#include <queue>
using namespace std;

#define siz 105
#define u 0
#define d 2
#define l 3
#define r 1
#define none -5
#define wl -6

char a[siz][siz];
int b[4][siz][siz],px[4]={1,-1,0,0},py[4]={0,0,1,-1};
struct node
{
       int x,y,ty;
};
queue<struct node> q;

void init(int n, int m)
{
     int i,j,k,t;
     for(i=0;i<n;++i)
     {
         for(j=0;j<m;++j)
         {
             for(k=0;k<4;++k)
             {
                 b[k][i][j]=none;
                 if(a[i][j]=='#')
                 {
                    b[k][i][j]=wl;
                 }
                 else if(a[i][j]=='<')
                 {
                    b[k][i][j]=(l+k)%4;
                 }
                 else if(a[i][j]=='>')
                 {
                    b[k][i][j]=(r+k)%4;
                 }
                 else if(a[i][j]=='v')
                 {
                    b[k][i][j]=(d+k)%4;
                 }
                 else if(a[i][j]=='^')
                 {
                    b[k][i][j]=(u+k)%4;
                 }
             }
         }
     }
     for(k=0;k<4;++k)
     {
        for(i=0;i<n;++i)
        {
           for(j=0;j<m;++j)
           {
               if(b[k][i][j]==u)
               {
                   for(t=i-1;t>=0;--t)
                   {
                      if(b[k][t][j]==wl || b[k][t][j]==u || b[k][t][j]==d || b[k][t][j]==l || b[k][t][j]==r)
                      {
                          break;
                      }
                      else
                      {
                          b[k][t][j]=wl;
                      }
                   }
                   b[k][i][j]=wl;
               }
               else if(b[k][i][j]==d)
               {
                   for(t=i+1;t<n;++t)
                   {
                      if(b[k][t][j]==wl || b[k][t][j]==u || b[k][t][j]==d || b[k][t][j]==l || b[k][t][j]==r)
                      {
                          break;
                      }
                      else
                      {
                          b[k][t][j]=wl;
                      }
                   }
                   b[k][i][j]=wl;
               }
               else if(b[k][i][j]==l)
               {
                   for(t=j-1;t>=0;--t)
                   {
                      if(b[k][i][t]==wl || b[k][i][t]==u || b[k][i][t]==d || b[k][i][t]==l || b[k][i][t]==r)
                      {
                          break;
                      }
                      else
                      {
                          b[k][i][t]=wl;
                      }
                   }
                   b[k][i][j]=wl;
               }
               else if(b[k][i][j]==r)
               {
                   for(t=j+1;t<m;++t)
                   {
                      if(b[k][i][t]==wl || b[k][i][t]==u || b[k][i][t]==d || b[k][i][t]==l || b[k][i][t]==r)
                      {
                          break;
                      }
                      else
                      {
                          b[k][i][t]=wl;
                      }
                   }
                   b[k][i][j]=wl;
               }
           }
        }
     }
}

int moves(int n, int m)
{
    int i,j,k,t,si,sj,gi,gj,t1,i1,j1;
    struct node p,temp;
    init(n,m);
    for(i=0;i<n;++i)
    {
       for(j=0;j<m;++j)
       {
           if(a[i][j]=='S')
           {
              si=i; sj=j;
           }
           else if(a[i][j]=='G')
           {
              gi=i; gj=j;
           }
       }
    }
    p.x=si; p.y=sj; p.ty=0;
    
    if(b[0][si][sj]!=wl) b[0][si][sj]=0;
    
    i=si; j=sj; t=0;
    for(k=0;k<4;++k)
    {
       i1=px[k]+i; j1=py[k]+j; t1=(t+1)%4;           
       if(i1>=0 && i1<n && j1>=0 && j1<m)
       {
          if(b[t1][i1][j1]!=wl && b[t1][i1][j1]==none)
          {
                 b[t1][i1][j1]=1;
                 p.x=i1; p.y=j1; p.ty=t1;
                 q.push(p);
              
          }
       }
    }
    
    while(!q.empty())
    {
        p=q.front();
        q.pop();
        i=p.x; j=p.y; t=p.ty;
        for(k=0;k<4;++k)
        {
            i1=px[k]+i; j1=py[k]+j; t1=(t+1)%4;           
            if(i1>=0 && i1<n && j1>=0 && j1<m)
            {
                if(b[t1][i1][j1]!=wl)
                {
                     if(b[t1][i1][j1]==none)
                     {
                         b[t1][i1][j1]=b[t][i][j]+1;
                         p.x=i1; p.y=j1; p.ty=t1;
                         q.push(p);
                     }
                     else if(b[t1][i1][j1]>b[t][i][j]+1)
                     {
                         b[t1][i1][j1]=b[t][i][j]+1;
                         p.x=i1; p.y=j1; p.ty=t1;
                         q.push(p);
                     }
                }
            }
        }
    }
    k=none;
    for(i=0;i<4;++i)
    {
       if(b[i][gi][gj]>=0)
       {
          if(k==none)
          {
             k=b[i][gi][gj];
          }
          else if(k>b[i][gi][gj])
          {
               k=b[i][gi][gj];
          }
       }
    }
    return k;
}

int main()
{
    int i,j,k,n,m,ca=0,t;
    scanf("%d",&t);
    while(t--)
    {
        ++ca;
        scanf("%d%d",&n,&m);
        for(i=0;i<n;++i)          
        {
            scanf("%s",a[i]);
        }
        j=moves(n,m);
        printf("Case #%d: ",ca);
        if(j>=0)
        {
            printf("%d\n",j);
        }
        else
        {
            printf("impossible\n");
        }
    }
    
    return 0;
}

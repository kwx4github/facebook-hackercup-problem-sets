#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker,"/STACK:64000000")
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <cassert>
#include <time.h>
#include <bitset>

using namespace std;

#define mp make_pair
#define pb push_back
#define _(a,b) memset( (a), b, sizeof( a ) )
#define all(a) a.begin(), a.end()
#define sz(a) (int)a.size()
#ifdef WIN32
#define dbg(...) {fprintf(stderr, __VA_ARGS__); fflush(stderr);}
#define dbgx(x) {cerr << #x << " = " << x << endl;}
#define dbgv(v) {cerr << #v << " = {"; for (typeof(v.begin()) it = v.begin(); it != v.end(); it ++) cerr << *it << ", "; cerr << "}"; cerr << endl;}
#else
#define dbg(...) { }
#define dbgx(x) { }
#define dbgv(v) { }
#endif

typedef unsigned long long ull;
typedef long long lint;
typedef pair < int , int > pii;
typedef long double ld;

const int INF = 1000 * 1000 * 1000;
const lint LINF = 1000000000000000000LL;
const double eps = 1e-9;

void prepare()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
}

const int nmax = 105;
const int dx[] = { -1, 0, +1, 0 };
const int dy[] = { 0, +1, 0, -1 };
const string directions = "^>v<";

int getDirection(char c)
{
	return directions.find(c);
}

int n, m, sx, sy, ex, ey;
char s[nmax][nmax];
bool can[4][nmax][nmax];

void read()
{
	scanf("%d%d",&n,&m);
	for (int i = 0; i < n; i ++)
	{
		scanf("%s",s[i]);
		for (int j = 0; j < m; j ++)
		{
			if (s[i][j] == 'S')
			{
				sx = i;
				sy = j;
			}
			if (s[i][j] == 'G')
			{
				ex = i;
				ey = j;
			}
		}
	}
}

bool laser(int x, int y)
{
	return getDirection(s[x][y]) != -1;
}

bool wall(int x, int y)
{
	return x < 0 || x >= n ||
		   y < 0 || y >= m ||
		   (s[x][y] != '.' && s[x][y] != 'S' && s[x][y] != 'G');
}

void prep()
{
	_(can, 1);
	for (int T = 0; T < 4; T ++)
	{
		for (int i = 0; i < n; i ++)
		{
			for (int j = 0; j < m; j ++)
			{
				if (laser(i, j))
				{
					int dir = (getDirection(s[i][j]) + T) % 4;

					int x = i + dx[dir], y = j + dy[dir];
					while (!wall(x, y))
					{
						can[T][x][y] = 0;
						x += dx[dir];
						y += dy[dir];
					}
				}
			}
		}
	}
}

int d[nmax][nmax][4];
queue < pair < pii , int > > q;

void relax(int x, int y, int dist)
{
	if (d[x][y][dist % 4] == -1)
	{
		d[x][y][dist % 4] = dist;
		q.push( mp( mp( x, y ), dist % 4 ) );
	}
}

void bfs()
{
	_(d, -1);
	relax(sx, sy, 0);
	while (!q.empty())
	{
		int x = q.front().first.first;
		int y = q.front().first.second;
		int fl = q.front().second;
		q.pop();
		int curdist = d[x][y][fl];

		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i], ny = y + dy[i];
			if (!wall(nx,ny) && can[(curdist + 1) % 4][nx][ny])
			{
				relax(nx, ny, curdist + 1);
			}
		}
	}
}

bool solve()
{
	prep();
	bfs();
	int bst = INF;
	for (int i = 0; i < 4; i ++)
	{
		if (d[ex][ey][i] != -1)
		{
			bst = min(bst, d[ex][ey][i]);
		}
	}
	if (bst == INF)
	{
		printf("impossible\n");
	}
	else
	{
		printf("%d\n", bst);
	}
	return false;
}

int main()
{
	prepare();
	int t;
	scanf("%d",&t);
	for (int i = 0; i < t; i ++)
	{
		dbg("Test %d\n", i);
		printf("Case #%d: ", i + 1);
		read();
		solve();
	}
	return 0;
}

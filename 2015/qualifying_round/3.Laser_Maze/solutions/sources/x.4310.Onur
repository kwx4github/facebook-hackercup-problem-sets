#include <iostream>
#include <queue>

using namespace std;


char getRotated(char c){
    if (c == '<')
        return 'v';
    if (c == 'v')
        return '>';
    if (c == '>')
        return '^';
    if (c == '^')
        return '<';
    return c;
}

bool isLaserOrWall(char c){
    if (c == '<' || c == 'v' || c == '^' || c == 'v' || c == '>' || c == '#')
        return true;
    return false;
}

typedef struct ExplorePoint {
    int j;
    int i;
    int s;
    int le;     // laser enabled
    ExplorePoint(int j, int i, int s, int le) : j(j), i(i), s(s), le(le) {}
} ExplorePoint;

void solve(){
    int M; int N;
    cin >> M; cin >> N;

    int infinite = 1000000;
    //printf("M = %d N = %d \n", M, N);

    int start_j = -1;
    int start_i = -1;
    int goal_j = -1;
    int goal_i = -1;

    char t1[M][N][4][2];    // 0 = turret doesnt fire (start state), 1 = turret fires (any other state than start state)
    for (int j=0; j<M; j++){
        string line;
        cin >> line;
        for (int i=0; i<N; i++){
            char c = line[i];
            t1[j][i][0][0] = c;

            if (c == 'S'){
                start_j = j;
                start_i = i;
            } else if (c == 'G'){
                goal_j = j;
                goal_i = i;
            }
            c = getRotated(c);
            t1[j][i][1][0] = c;
            c = getRotated(c);
            t1[j][i][2][0] = c;
            c = getRotated(c);
            t1[j][i][3][0] = c;
        }
    }

    // for (int s=0; s<4; s++){
    //     printf("\nstate = %d \n\t", s);
    //     for (int j=0; j<M; j++){
    //         for (int i=0; i<N; i++){
    //             printf("%c ", t1[j][i][s][0]);
    //         }
    //         printf("\n\t");
    //     }
    // }

    for (int s=0; s<4; s++){
        for (int j=0; j<M; j++){
            for (int i=0; i<N; i++){
                char c = t1[j][i][s][0];
                t1[j][i][s][1] = c;
            }
        }
    }

    for (int s=0; s<4; s++){
        for (int j=0; j<M; j++){
            for (int i=0; i<N; i++){
                char c = t1[j][i][s][0];
                if (c == '>'){
                    for (int ii=i+1; ii<N && !isLaserOrWall(t1[j][ii][s][0]); ii++){
                        t1[j][ii][s][1] = '#';
                    }
                } else if (c == '<'){
                    for (int ii=i-1; ii>=0 && !isLaserOrWall(t1[j][ii][s][0]); ii--){
                        t1[j][ii][s][1] = '#';
                    }
                } else if (c == '^'){
                    for (int jj=j-1; jj>=0 && !isLaserOrWall(t1[jj][i][s][0]); jj--){
                        t1[jj][i][s][1] = '#';
                    }
                } else if (c == 'v'){
                    for (int jj=j+1; jj<M && !isLaserOrWall(t1[jj][i][s][0]); jj++){
                        t1[jj][i][s][1] = '#';
                    }
                }
            }
        }
    }

    // for (int s=0; s<4; s++){
    //     printf("\nstate = %d \n\t", s);
    //     for (int j=0; j<M; j++){
    //         for (int i=0; i<N; i++){
    //             printf("%c ", t1[j][i][s][0]);
    //         }
    //         printf("\n\t");
    //     }
    // }

    // for (int s=0; s<4; s++){
    //     printf("\nstate = %d \n\t", s);
    //     for (int j=0; j<M; j++){
    //         for (int i=0; i<N; i++){
    //             printf("%c ", t1[j][i][s][1]);
    //         }
    //         printf("\n\t");
    //     }
    // }


    queue<ExplorePoint> q;
    q.push(ExplorePoint(start_j, start_i, 0, 0));

    int d[M][N][4][2];
    for (int s=0; s<4; s++){
        for (int j=0; j<M; j++){
            for (int i=0; i<N; i++){
                d[j][i][s][0] = infinite;
                d[j][i][s][1] = infinite;
            }
        }
    }
    d[start_j][start_i][0][0] = 0;

    while (!q.empty()){
        ExplorePoint e = q.front();
        q.pop();

        int next_s = (e.s+1) % 4;
        int cur_d = d[e.j][e.i][e.s][e.le];

        if (e.j > 0){   // up
            if (!isLaserOrWall(t1[e.j-1][e.i][next_s][1]) && cur_d + 1 < d[e.j-1][e.i][next_s][1]){
                d[e.j-1][e.i][next_s][1] = cur_d + 1;
                q.push(ExplorePoint(e.j-1, e.i, next_s, 1));
            }
        }
        if (e.j < M-1){   // bottom
            if (!isLaserOrWall(t1[e.j+1][e.i][next_s][1]) && cur_d + 1 < d[e.j+1][e.i][next_s][1]){
                d[e.j+1][e.i][next_s][1] = cur_d + 1;
                q.push(ExplorePoint(e.j+1, e.i, next_s, 1));
            }
        }
        if (e.i > 0){   // left
            if (!isLaserOrWall(t1[e.j][e.i-1][next_s][1]) && cur_d + 1 < d[e.j][e.i-1][next_s][1]){
                d[e.j][e.i-1][next_s][1] = cur_d + 1;
                q.push(ExplorePoint(e.j, e.i-1, next_s, 1));
            }
        }
        if (e.i < N-1){   // right
            if (!isLaserOrWall(t1[e.j][e.i+1][next_s][1]) && cur_d + 1 < d[e.j][e.i+1][next_s][1]){
                d[e.j][e.i+1][next_s][1] = cur_d + 1;
                q.push(ExplorePoint(e.j, e.i+1, next_s, 1));
            }
        }

    }

    int min_goal = infinite;
    for (int s=0; s<4; s++){
        if (d[goal_j][goal_i][s][1] < min_goal){
            min_goal = d[goal_j][goal_i][s][1];
        }
    }

    if (min_goal == infinite){
        printf("impossible");
    } else {
        printf("%d", min_goal);
    }
    //printf("value = %d \n", min_goal);
}




int main(int argc, char *argv[]){
    int T;
    cin>>T;

    cout << "Number of testcases : " << T << endl;

    for (int i=0; i<T; i++){
        cout << "Case #" << (i+1) << ": "; 
        solve();
        cout << endl;
    }
}



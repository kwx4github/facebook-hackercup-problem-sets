#include <string.h>
#include <stdio.h>
#include <map>
#include <queue>
#include <algorithm>
using namespace std;


//////////// CW:
//////////// N  W  S   E
int rr[] = {-1, 0, 1,  0};
int cc[] = { 0, 1, 0, -1};

int INF = 1000000000;

map<char, int> mp;

int R, C;
char mat[105][105];

int sp[105][105][4];

bool valid(int r, int c) {
  return r>=0 && r<R && c>=0 && c<C;
}

struct State {
  int r,c,m;
};

int main() {
  mp['^'] = 0;
  mp['>'] = 1;
  mp['v'] = 2;
  mp['<'] = 3;

  int T;
  scanf("%d", &T);
  for (int N = 1; N <= T; ++N) {
    // input and src/tgt
    scanf("%d%d",&R, &C);
    int sr,sc, tr,tc;
    for (int r = 0; r < R; ++r) {
      scanf("%s", mat[r]);
      for (int c = 0; c < C; ++c) {
        if (mat[r][c] == 'S') {
          sr = r;
          sc = c;
        } else if (mat[r][c] == 'G') {
          tr = r;
          tc = c;
        }
      }
    }

    // init sp
    for (int r = 0; r < R; ++r) {
      for (int c = 0; c < C; ++c) {
        for (int m = 0; m < 4; ++m) {
          sp[r][c][m] = INF;
        }
      }
    }

    // add block mod4
    for (int r = 0; r < R; ++r) {
      for (int c = 0; c < C; ++c) {
        if (mat[r][c] == '#') {
          for (int m = 0; m < 4; ++m) {
            sp[r][c][m] = -1;
          }
        } else if (mp.find(mat[r][c]) != mp.end()) {
          for (int m = 0; m < 4; ++m) {
            sp[r][c][m] = -1;
          }

          int d = mp[mat[r][c]];
          for (int m = 0; m < 4; ++m) {
            int dir = (d + m) % 4;
            int lr = r + rr[dir];
            int lc = c + cc[dir];
            while (valid(lr, lc) && (mat[lr][lc]=='.' || mat[lr][lc]=='S' || mat[lr][lc]=='G')) {
              sp[lr][lc][m] = -1;
              lr += rr[dir];
              lc += cc[dir];  
            }
          }
        }
      }
    }    

    // bfs!
    int ans = -1;
    sp[sr][sc][0] = 0;
    queue<State> q;
    q.push({sr, sc, 0});

    while (!q.empty()) {
      State x = q.front();
      q.pop();

      if (x.r == tr && x.c == tc) {
        ans = sp[x.r][x.c][x.m];
        break;
      }

      for (int i = 0; i < 4; ++i) {
        State y{x.r + rr[i], x.c + cc[i], (x.m + 1) % 4};
        if (!valid(y.r, y.c) || sp[y.r][y.c][y.m] == -1) continue;
        if (sp[y.r][y.c][y.m] == INF) {
          q.push(y);
          sp[y.r][y.c][y.m] = sp[x.r][x.c][x.m] + 1;
        }
      }
    }

    if (ans == -1) {
      printf("Case #%d: impossible\n", N);
    } else {
      printf("Case #%d: %d\n", N, ans);
    }
  }
  return 0;
}

//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9+7;

const int MAXN = 110;

const int inf = 1e9;

char ar[4][MAXN][MAXN];

bool forb[4][MAXN][MAXN];

int n,m;

void go(int t,int x,int y,int ax,int ay,bool isItFirst=false){
	
	if(x<1 || y<1 || x>n || y>m)	return;
	
	if( !isItFirst && (ar[t][x][y]=='#' || ar[t][x][y]=='>' || ar[t][x][y]=='<' || ar[t][x][y]=='^' || ar[t][x][y]=='v') )	return;
	
	forb[t][x][y]=true;
	
	go(t,x+ax,y+ay,ax,ay);
	
}

struct node{
	int t,x,y;
	node(int _t=0,int _x=0,int _y=0){
		t=_t;
		x=_x;
		y=_y;
	}
};

int yon[4][2]={ {1,0},{-1,0},{0,1},{0,-1} };

int used[4][MAXN][MAXN];

int isInBound(int x,int y){
	return x>0 && x<=n && y>0 && y<=m;
}

void bfs(int t,int x,int y){
	
	//~ dbg(n);
	//~ dbg(m);
	
	queue<node> q;
	
	q.push( node(t,x,y) );
	
	used[t][x][y]=1;
	
	node tmp;
	
	while(!q.empty()){
		
		tmp=q.front();
		q.pop();
		
		//~ printf("%d %d %d -> %d\n",tmp.t,tmp.x,tmp.y,used[tmp.t%4][tmp.x][tmp.y]);
		
		forn(i,0,3)
		{
			//~ printf("%d %d , %d %d\n",yon[i][0],yon[i][1],tmp.x+yon[i][0],tmp.y+yon[i][1]);
			//~ printf("%d\n",tmp.x+yon[i][0]>0 && tmp.x+yon[i][0]<=n && tmp.y+yon[i][1]>0 && tmp.y+yon[i][1]<=m );
			if( isInBound( tmp.x+yon[i][0],tmp.y+yon[i][1] ) && 
				!used[ (tmp.t+1)%4 ][ tmp.x+yon[i][0] ][ tmp.y+yon[i][1] ] &&
				!forb[ (tmp.t+1)%4 ][ tmp.x+yon[i][0] ][ tmp.y+yon[i][1] ]
			)
			{
				//~ printf("%d %d  ->  %d %d\n",tmp.x,tmp.y,tmp.x+yon[i][0],tmp.y+yon[i][1]);
				used[ (tmp.t+1)%4 ][ tmp.x+yon[i][0] ][ tmp.y+yon[i][1] ]=used[tmp.t%4][tmp.x][tmp.y]+1;
				q.push( node(tmp.t+1,tmp.x+yon[i][0],tmp.y+yon[i][1]) );
			}
		}
		
	}
	
}

int main(){
	
	int Task;
	
	scanf(" %d",&Task);
	
	forn(task,1,Task){
		
		scanf(" %d %d",&n,&m);
		
		SET(used,0);
		SET(ar,0);
		SET(forb,0);
		
		forn(i,1,n)
			forn(j,1,m)
				scanf(" %c",&ar[0][i][j]);
		
		forn(t,1,3)
			forn(i,1,n)
				forn(j,1,m)
				{
					ar[t][i][j]=ar[t-1][i][j];
					if(ar[t][i][j]=='^')
						ar[t][i][j]='>';
					else if(ar[t][i][j]=='>')
						ar[t][i][j]='v';
					else if(ar[t][i][j]=='v')
						ar[t][i][j]='<';
					else if(ar[t][i][j]=='<')
						ar[t][i][j]='^';
				}
		
		forn(t,0,3)
			forn(i,1,n)
				forn(j,1,m)
				{
					if(ar[t][i][j]=='^')
						go(t,i,j,-1,0,true);
					else if(ar[t][i][j]=='v')
						go(t,i,j,1,0,true);
					else if(ar[t][i][j]=='>')
						go(t,i,j,0,1,true);
					else if(ar[t][i][j]=='<')
						go(t,i,j,0,-1,true);
					else if(ar[t][i][j]=='#')
						forb[t][i][j]=true;
				}
		//~ 
		//~ forn(t,0,3){
			//~ forn(i,1,n)
			//~ {
				//~ forn(j,1,m)
					//~ printf("%d ",forb[t][i][j]);
				//~ puts("");
			//~ }
			//~ puts("");
		//~ }
		
		//~ puts("asdasdasd");
		
		forn(i,1,n)
			forn(j,1,m)
				if(ar[0][i][j]=='S')
					bfs(0,i,j);
		
		//puts("asdasdasd");
		
		int res=1e9;
		
		forn(i,1,n)
			forn(j,1,m)
				if(ar[0][i][j]=='G')
				{
					forn(t,0,3)
						if(used[t][i][j]!=0)
							res=min(res,used[t][i][j]);
				}
				
		if(res<1e9)
			printf("Case #%d: %d\n",task,res-1);
		else
			printf("Case %d: impossible\n",task);
	}
	
	return 0;
	
}

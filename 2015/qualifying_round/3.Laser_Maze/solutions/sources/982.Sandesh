#include <bits/stdc++.h>
#define make_it_fast ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

typedef long long int lli;
typedef unsigned long long ull;

#define ff first
#define ss second
#define pb push_back
#define mkp make_pair
#define lpu(i,s,e) for(i=s;i<e;i++)
#define lpd(i,s,e) for(i=s;i>e;i--)
#define rep(i,n) for(i=0;i<n;i++)
#define all(v) v.begin(), v.end()
#define dpl fprintf(stderr, "\n");
#define db(x) cerr << x << endl; // DEBUG PRIMITIVE
#define dbp(p) cerr << '(' << p.ff << ',' << p.ss << ") " << endl;
#define dbn(A,N) for(int __I=0; __I<N; __I++) cerr << A[__I] << " "; dpl; // DEBUG 1-D ARRAY
#define dbnm(A,N,M) for(int __I=0; __I<N; __I++) { for(int __J=0; __J<M; __J++) cerr << A[__I][__J] << " "; dpl; } // DEBUG 2-D ARRAY
#define dbvp(v) for(auto __Velem : v) cerr << '(' << __Velem.ff << ',' << __Velem.ss << ") " ; cerr << endl; // DEBUG VECTOR PAIRS
#define dbv(v) for(auto __Velem : v) cerr << __Velem << ' '; cerr << endl; // DEBUG VECTOR PRIMITIVE
#define gi2(_A,_B) inp(_A); inp(_B);
#define gi3(_A,_B,_C) inp(_A); inp(_B); inp(_C);

class TimeTracker {
  clock_t start, end;
public:
  TimeTracker() {
    start = clock();
  }
  ~TimeTracker() {
    end = clock();
    fprintf(stderr, "RunTime : %.3lf s\n", (double)(end - start) / CLOCKS_PER_SEC);
  }
};

# define getcx getchar

template <class T>
void inp(T& n)//fast input function
{
  n=0;
  int ch=getcx();
  int sign=1;
  while( ch < '0' || ch > '9' )
    {if(ch=='-')sign=-1; ch=getcx();}
  while( ch >= '0' && ch <= '9' )
    n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
  n=n*sign;
}

template <class T>
void oup(T x)
{
  if(x<0)
  {
    putchar('-');
    x=-x;
  }
  int len=0,data[25];
  while(x)
  {
    data[len++]=x%10;
    x/=10;
  }
  if(!len)
    data[len++]=0;
  while(len--)
    putchar(data[len]+48);
  putchar('\n');
}

#define INF 9876543210

lli dp[4][110][110];
lli dx[] = { 0, -1, 0, 1 };
lli dy[] = { -1, 0, 1, 0 };
lli b[110][110];
lli bl[4][110][110];
lli m, n;

inline bool isblocked(char c)
{
  return (c == '#' || c == '<' || c == '>' || c == '^' || c == 'v');
}

inline lli get_direction(char c)
{
  if(c == '<') return 0;
  if(c == '^') return 1;
  if(c == '>') return 2;
  return 3;
}

inline bool isvalid(lli i, lli j)
{
  return (0 <= i && i < m && 0 <= j && j < n);
}

void solve(lli i, lli j, lli k)
{
  lli r;
  rep(r, 4)
  {
    if(isvalid(i + dx[r], j + dy[r]) && dp[(k+1)%4][i + dx[r]][j + dy[r]] > (dp[k][i][j] + 1)) 
    {
      if(bl[(k+1)%4][i + dx[r]][j + dy[r]] != 1 && b[i + dx[r]][j + dy[r]] != 1)
      {
        dp[(k+1)%4][i + dx[r]][j + dy[r]] = (dp[k][i][j] + 1);
        solve(i + dx[r], j + dy[r], (k+1)%4);
      }
    }
  }
}

int main()
{
  #ifdef LOCAL
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
    TimeTracker trk;
  #endif

  lli t, k, i, j, s;
  char f[110][110];
  pair<lli, lli> S, G;
  inp(t);
  for(lli tc = 1; tc <= t; tc++)
  {
    printf("Case #%lld: ", tc);
    gi2(m, n);
    rep(i, m) 
    {
      string str;
      cin >> str;
      rep(j, n) 
      {
        f[i][j] = str[j];
        if(f[i][j] == 'S') S.ff = i, S.ss = j;
        if(f[i][j] == 'G') G.ff = i, G.ss = j;
      }
    }

    // // debug
    // dbnm(f, m, n);
    // dpl;

    rep(i, m)
      rep(j, n)
        if(isblocked(f[i][j]))
          b[i][j] = 1;
        else 
          b[i][j] = 0;

    // // debug
    // dbnm(b, m, n);
    // dpl;

    rep(k, 4) rep(i, m) rep(j, n) { dp[k][i][j] = INF; bl[k][i][j] = 0; }

    rep(k, 4)
    {
      rep(i, m)
        rep(j, n)
        {
          if(isblocked(f[i][j]) && f[i][j] != '#')
          {
            lli x = get_direction(f[i][j]);
            x += k; x %= 4;
            s = 1;
            while(b[i+s*dx[x]][j+s*dy[x]] == 0 && isvalid(i+s*dx[x], j+s*dy[x]))
            {
              bl[k][i+s*dx[x]][j+s*dy[x]] = 1;
              s++;
            }
          }
        }

      // debug
      // fprintf(stderr, "State %lld.\n", k);
      // dbnm(bl[k], m, n);
      // dpl;
    }

    dp[0][S.ff][S.ss] = 0;
    solve(S.ff, S.ss, 0);

    lli mn = INF;
    rep(i, 4)
      mn = min(mn, dp[i][G.ff][G.ss]);
    if(mn == INF) printf("impossible\n");
    else printf("%lld\n", mn);
  }
  return 0;
}
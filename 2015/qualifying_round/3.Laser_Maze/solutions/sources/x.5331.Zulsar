def search(graph):
    lazers=[]
    ids=["<", "^", ">", "v"]
    start=None
    goal = None
    step = 0
    for y in range(len(graph)):
        for x in range(len(graph[0])):
            if graph[y][x] == "S":
                start = (y, x)
            elif graph[y][x] == "G":
                goal = (y, x)
            elif graph[y][x] in ids:
                lazers.append((y, x, ids.index(graph[y][x])))
    frontier = [start]
    level = {start:0}
    while frontier:
        nexts = []
        for ver in frontier:
            neighbors = findNeighbors(ver[0], ver[1], lazers, step, graph)
            if goal in neighbors:
                return step+1
            for v in neighbors:
                if v not in nexts:
                    if v not in level:
                        level[v] = 0
                    if level[v]<2:
                        nexts.append(v)
                        level[v]+=1
        step+=1
        frontier = nexts
    return "impossible"

def findNeighbors(start, end, lazers, step, graph):
    width = len(graph[0])
    height=len(graph)
    pos = [".", "S", "G"]
    toRemove = []
    neighbors = [(start+1, end), (start-1, end), (start, end-1), (start, end+1)]
    real = neighbors[:]
    for neigh in neighbors:
        y=neigh[0]
        x=neigh[1]
        if x<0 or y<0 or x>width-1 or y>height-1 or graph[y][x] not in pos:
            real.remove((y,x))

    for lazer in lazers:
        (y,x) = (lazer[0], lazer[1])
        if (lazer[2] == 0 and step%4 == 0) or (lazer[2] == 1 and step%4 == 3) or (lazer[2] == 2 and step%4 == 2) or (lazer[2] == 3 and step%4 == 1):
            for neigh in neighbors:
                if neigh[1] == x and neigh[0] < y and neigh in real:
                    real.remove(neigh)
        if (lazer[2] == 0 and step%4 == 1) or (lazer[2] == 1 and step%4 == 0) or (lazer[2] == 2 and step%4 == 3) or (lazer[2] == 2 and step%4 == 2):
            for neigh in neighbors:
                if neigh[1] > x and neigh[0] == y and neigh in real:
                    real.remove(neigh)
        if (lazer[2] == 0 and step%4 == 2) or (lazer[2] == 1 and step%4 == 1) or (lazer[2] == 2 and step%4 == 0) or (lazer[2] == 3 and step%4 == 3):
            for neigh in neighbors:
                if neigh[1] == x and neigh[0] > y and neigh in real:
                    real.remove(neigh)
        if (lazer[2] == 0 and step%4 == 3) or (lazer[2] == 1 and step%4 == 2) or (lazer[2] == 2 and step%4 == 1) or (lazer[2] == 3 and step%4 == 0):
            for neigh in neighbors:
                if neigh[1] < x and neigh[0] == y and neigh in real:
                    real.remove(neigh)
    return real

text_file = open("laser_maze-2.txt")
lines = text_file.readlines()
tests = [test[:-1] for test in lines]
testNum = int(tests[0])
index = 1
for num in range(testNum):
    dim = tests[index]
    height = int(dim.split(" ")[0])
    width = int(dim.split(" ")[1])
    graph = tests[index+1:index+1+height]
    index = index+1+height
    answer = str(search(graph))
    print "Case #" + str(num+1) + ": " + answer    



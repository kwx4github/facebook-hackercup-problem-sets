#include <cstring>
#include <string.h>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>

using namespace std;

#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz size()
#define rep(i,m) for(int i=0;i<(int)(m);i++)
#define rep2(i,n,m) for(int i=n;i<(int)(m);i++)
#define For(it,c) for(__typeof(c.begin()) it=c.begin();it!=c.end();++it)
#define mem(a,b) memset(a,b,sizeof(a))
#define mp make_pair
#define dot(a,b) ((conj(a)*(b)).X)
#define X real()
#define Y imag()
#define length(V) (hypot((V).X,(V).Y))
#define vect(a,b) ((b)-(a))
#define cross(a,b) ((conj(a)*(b)).imag())
#define normalize(v) ((v)/length(v))
#define rotate(p,about,theta) ((p-about)*exp(point(0,theta))+about)
#define pointEqu(a,b) (comp(a.X,b.X)==0 && comp(a.Y,b.Y)==0)

typedef stringstream ss;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vii;
typedef long long ll;
typedef long double ld;
typedef complex<double> point;
typedef pair<point, point> segment;
typedef pair<double, point> circle;
typedef vector<point> polygon;

const int oo = (int) 1e9;
const double PI = 2 * acos(0);
const double eps = 1e-9;

inline int comp(const double &a, const double &b) {
	if (fabs(a - b) < eps)
		return 0;
	return a > b ? 1 : -1;
}

int di[] = { 1, -1, 0, 0, 1, -1, 1, -1 };
int dj[] = { 0, 0, 1, -1, 1, -1, -1, 1 };
int diK[] = { -2, -2, -1, 1, 2, 2, 1, -1 };
int djK[] = { -1, 1, 2, 2, 1, -1, -2, -2 };

int I, J;

inline bool val(const int &i, const int &j) {
	if (i < 0 || j < 0 || i >= I || j >= J)
		return false;
	return true;
}

struct state
{
int row,col,steps;
};


int f[100][100];
int rows;
int cols;
void solve()
{
cin>>rows;
cin>>cols;
char b[200];
int startrow;
int startcol;

int goalrow;
int goalcol;


set<int> possib[100][100];
for (int i=0;i<rows;i++)
{
scanf("%s",b);
for (int j=0;j<strlen(b);j++)
{
char q=b[j];
int v;
if (q=='S') { v=0;startrow=i;startcol=j;}
if (q=='G') { v=1;goalrow=i;goalcol=j;}
if (q=='#') v=2;
if (q=='.') v=3;
if (q=='^') v=10;
if (q=='>') v=11;
if (q=='v') v=12;
if (q=='<') v=13;
f[i][j]=v;
}

}

list<state> states;
state start;
start.row=startrow;
start.col=startcol;
start.steps=0;
states.push_back(start);
while (states.size()!=0)
{
const state now=states.front();
states.pop_front();
//cout<<now.row<<" "<<now.col<<" "<<now.steps<<"\n";
int m[][2]={{1,0},{0,-1},{-1,0},{0,1}};
for(int i=0;i<4;i++)
{
int newrow=now.row+m[i][0];
int newcol=now.col+m[i][1];

//cout<<"new candidate:"<<newrow<<" "<<newcol<<" "<<now.steps+1<<"\n";

if (newrow>=rows || newrow<0 || newcol>=cols || newcol<0 ) continue;
if (f[newrow][newcol]==2 ||  f[newrow][newcol]>=10 ) continue;
int newsteps=now.steps+1;
//int r=find_object();
bool shot=false;
for (int j=0;j<4;j++)
{
  int object=-1;
  int newrow2=newrow;
  int newcol2=newcol;
  while (true)
  {
  newrow2+=m[j][0];
  newcol2+=m[j][1];
  
  if (newrow2>=rows || newrow2<0 || newcol2>=cols || newcol2<0 ) break;
  if (f[newrow2][newcol2]==2 ||  f[newrow2][newcol2]>=10 ) {object=f[newrow2][newcol2];break; }
  }
  if (object>=10)
  {
    int turetstate=(object-10+newsteps)%4;
    if (turetstate==j) shot=true;
  }
  
  
}
if (shot) continue;
for (std::set<int>::iterator mm=possib[newrow][newcol].begin();mm!=possib[newrow][newcol].end();++mm )
{
if ( ( (*mm)%4) ==newsteps%4)
  shot=true;
}
if (shot) continue;
if (newrow==goalrow && newcol==goalcol) {cout<<newsteps;return;}

state newstate;
newstate.row=newrow;
newstate.col=newcol;
newstate.steps=newsteps;
states.push_back(newstate);
possib[newrow][newcol].insert(newsteps);


}




}

cout<<"impossible";

/*breadth first search
van egy pont, veszem a négy szomszédját.
minden elemnél:
  megnézem, hogy dimenziókon belül van-e
  megnézem, hogy falon v tureten van-e
  megnézem, h az aktuális szakaszban lelövődik-e
  megnézem, hogy van-e már odaérés ugyanannyi mod4-es értékkel
  ha finish poz, akkor érték és kilépek
  ha eddig mindegyik false lett, akkor
    beteszem a queue végére és beteszem a mátrixba.


*/

//cout<<rows<<" "<<cols;

}

int N;
int main(int argc, char *args[]) {
    if (argc == 2 && strcmp(args[1], "small") == 0) {
        freopen("small.in","rt",stdin);
        freopen("small.out","wt",stdout);
    }
    else if (argc == 2 && strcmp(args[1], "large") == 0) {
        freopen("large.in","rt",stdin);
        freopen("large.out","wt",stdout);
    }
    else {
	    //freopen("a.txt", "rt", stdin);
	    freopen(args[1], "rt", stdin);
    }
    
    cin>>N;
    rep2(nn,1,N+1) {
        printf("Case #%d: ", nn);
solve();
        cout<<endl;
    }
	
    return 0;
}

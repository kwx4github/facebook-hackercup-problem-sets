import itertools as it
import networkx as nx
T = '^>v<'
S = [(-1, 0), (0, 1), (1, 0), (0, -1)]
for tc in range(int(input())):
    m, n = map(int, input().split())
    M = [list(input()) for i in range(m)]
    G = nx.DiGraph()
    for j, i in it.product(range(m), range(n)):
        if M[j][i] in '.SG':
            if M[j][i] == 'G':
                for t in range(4):
                    G.add_edge((j, i, t), 'G')
            for dj, di in S:
                jj, ii = j + dj, i + di
                if 0 <= jj < m and 0 <= ii < n and M[jj][ii] in '.SG':
                    # t=0 is different
                    if M[j][i] == 'S':
                        G.add_edge('S', (jj, ii, 1))
                    for t in range(4):
                        G.add_edge((j, i, t), (jj, ii, (t + 1) % 4))
    # treat the laser turrets
    for j, i in it.product(range(m), range(n)):
        if M[j][i] in T:
            for t in range(4):
                dj, di = S[(T.index(M[j][i]) + t) % 4]
                for k in it.count(1):
                    jj, ii = j + k * dj, i + k * di
                    if jj < 0 or jj >= m or ii < 0 or ii >= n or M[jj][ii] == '#' or M[jj][ii] in T:
                        break
                    try:
                        G.remove_node((jj, ii, t))
                    except:
                        pass
    try:
        res = nx.shortest_path_length(G, 'S', 'G') - 1
    except:
        res = 'impossible'
    print('Case #{}: {}'.format(tc + 1, res))
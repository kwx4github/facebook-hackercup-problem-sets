#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#include <string.h>

const int QueueSize = 60000;

int TC, T;
int Rows, Columns;
char Map[4][120][120];
int Queue[70000][3];/*y, x, Steps*/
int DirX[4] = {0, 1, 0, -1};/*U, R, D, L*/
int DirY[4] = {-1, 0, 1, 0};
int i, x, y, c, Sx, Sy, Ex, Ey, Nx, Ny, Dir, Steps, MapNew, QS, QF, Ans;

int Walk(){
	QS = 0;
	while(QS!=QF){
		y = Queue[QS][0];
		x = Queue[QS][1];
		Steps = Queue[QS][2];
		MapNew = (Steps+1)%4;
		
		for (Dir=0; Dir<4; Dir++){
			Ny = y+DirY[Dir];
			Nx = x+DirX[Dir];
			
			if (Ny<0) continue;
			if (Ny>=Rows) continue;
			if (Nx<0) continue;
			if (Nx>=Columns) continue;
			if (Map[MapNew][Ny][Nx]=='#') continue;
			if (Ny==Ey) if (Nx==Ex) return Steps+1;
			
			Queue[QF][0] = Ny;
			Queue[QF][1] = Nx;
			Queue[QF][2] = Steps+1;
			Map[MapNew][Ny][Nx] = '#';
			QF = (QF+1)%QueueSize;
		}
		
		QS = (QS+1)%QueueSize;
	}
	return -1;	
}

int main(){
	scanf("%d", &TC);
	for (T=1; T<=TC; T++){
		printf("Case #%d: ", T);
		scanf("%d%d", &Rows, &Columns);
		
		for (y=0; y<Rows; y++){
			scanf("%s", Map[0][y]);
			for (x=0; x<Columns; x++){
				if (Map[0][y][x]=='S'){
					Sy = y;
					Sx = x;
					Map[0][y][x] = '.';
				}
				if (Map[0][y][x]=='G'){
					Ey = y;
					Ex = x;
					Map[0][y][x] = '.';
				}
			}
			for (i=1; i<4; i++){
				strcpy(Map[i][y], Map[i-1][y]);
				for (x=0; x<Columns; x++){
					if (Map[i][y][x]=='<') Map[i][y][x] = '^';
					else if (Map[i][y][x]=='^') Map[i][y][x] = '>';
					else if (Map[i][y][x]=='>') Map[i][y][x] = 'v';
					else if (Map[i][y][x]=='v') Map[i][y][x] = '<';
				}
			}
		}
		
		/*Set Map: No passing*/
		for (i=0; i<4; i++){
			for (y=0; y<Rows; y++) for (x=0; x<Columns; x++){
				if (Map[i][y][x]=='<'){
					c = x;
					while(c>=0){
						if (Map[i][y][c]=='#') break;
						if (Map[i][y][c]!='.'){
							c--;
							continue;
						}
						Map[i][y][c] = 'c';
						c--;
					}
				}
				else if (Map[i][y][x]=='>'){
					c = x;
					while(c<Columns){
						if (Map[i][y][c]=='#') break;
						if (Map[i][y][c]!='.'){
							c++;
							continue;
						}
						Map[i][y][c] = 'c';
						c++;
					}
				}
				else if (Map[i][y][x]=='^'){
					c = y;
					while(c>=0){
						if (Map[i][c][x]=='#') break;
						if (Map[i][c][x]!='.'){
							c--;
							continue;
						}
						Map[i][c][x] = 'c';
						c--;
					}
				}
				else if (Map[i][y][x]=='v'){
					c = y;
					while(c<Rows){
						if (Map[i][c][x]=='#') break;
						if (Map[i][c][x]!='.'){
							c++;
							continue;
						}
						Map[i][c][x] = 'c';
						c++;
					}
				}
			}
			for (y=0; y<Rows; y++) for (x=0; x<Columns; x++){
				if (Map[i][y][x]!='.') Map[i][y][x] = '#';
			}
			
		}/*End of Set Map: No Passing*/
		
		Queue[0][0] = Sy;
		Queue[0][1] = Sx;
		Queue[0][2] = 0;
		Map[0][Sy][Sx] = '#';
		QF = 1;
		
		/*Start Walking*/
		Ans = Walk();
		if (Ans==-1) puts("impossible");
		else printf("%d\n", Ans);
		
	}
	return 0;
}


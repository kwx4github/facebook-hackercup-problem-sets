#include <cstdio>
#include <cstring>

char mz[5][105][105];

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, -1, 0, 1};

int qx[100000], qy[100000], ql[100000], qh, qt;
char f[4][105][105];


void push (int x, int y, int l) {
  if (!f[l % 4][x][y]) {
    //printf ("%d %d %d\n", x, y, l);
    f[l % 4][x][y] = 1;
    qx[qt] = x;
    qy[qt] = y;
    ql[qt] = l;
    ++qt;
  }
}

int main () {
  int t;
  scanf ("%d", &t);
  for (int i = 1; i <= t; i++) {
    int m, n, bx = 1, by = 1, ex = 1, ey = 1, ans = -1;
    scanf ("%d%d", &m, &n);
    memset (mz, '#', sizeof (mz));
    memset (f, 0, sizeof (f));
    for (int j = 1; j <= m; j++) {
      scanf ("%s", mz[4][j] + 1);
      for (int k = 1; k <= n; k++) {
	switch (mz[4][j][k]) {
	case 'S': bx = j; by = k; mz[4][j][k] = '.'; break;
	case 'G': ex = j; ey = k; mz[4][j][k] = '.'; break;
	}
      }
      mz[4][j][n + 1] = '#';
    }
    for (int l = 0; l <= 3; l++)
      for (int j = 1; j <= m; j++)
	for (int k = 1; k <= n; k++)
	  mz[l][j][k] = mz[4][j][k];
    for (int l = 0; l <= 3; l++)
      for (int j = 1; j <= m; j++)
	for (int k = 1; k <= n; k++) {
	  int z = -1;
	  switch (mz[l][j][k]) {
	  case 'v': z = 0; break;
	  case '<': z = 1; break;
	  case '^': z = 2; break;
	  case '>': z = 3; break;
	  }
	  if (z >= 0) {
	    int sx = dx[(z + l) % 4];
	    int sy = dy[(z + l) % 4];
	    int cx = j, cy = k;
	    do {
	      cx += sx;
	      cy += sy;
	      if (mz[4][cx][cy] != '.') break;
	      mz[l][cx][cy] = '#';
	    } while (1);
	  }
	}
    qh = qt = 0;
    push (bx, by, 0);
    while (qh < qt && ans < 0) {
      int cx = qx[qh], cy = qy[qh], cl = ql[qh];
      ++qh;
      for (int k = 0; k < 4; k++) {
	int nx = cx + dx[k];
	int ny = cy + dy[k];
	//printf ("try %d %d %d: %c\n", nx, ny, cl + 1, mz[(cl + 1) % 4][nx][ny]);
	if (mz[(cl + 1) % 4][nx][ny] == '.') {
	  if (nx == ex && ny == ey) {
	    ans = cl + 1;
	  }
	  push (nx, ny, cl + 1);
	}
      }
    }
    if (ans < 0) printf ("Case #%d: impossible\n", i); else printf ("Case #%d: %d\n", i, ans);
  }
}

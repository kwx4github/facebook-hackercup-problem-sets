#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

int dir[4][2] = {{0, -1},{-1, 0},{0, 1},{1, 0}};
struct LASER
{
    int x, y, d;
    //<^>v 0, 1 , 2, 3
    LASER(int _x, int _y, int _d):x(_x),y(_y),d(_d) {}
};
struct STAGE
{
    int x, y, step;
    STAGE(int _x, int _y, int _step):x(_x),y(_y),step(_step) {}
    bool operator == (const STAGE &t) const {
        return  x==t.x && y==t.y && step == t.step;
    }
};
struct STAGEHASH
{
    std::size_t operator () (const STAGE &t) const
    {
        return  t.x * 100 + t.y + t.step;
    }
};
bool status[105][105][4];
char maze[105][105];
int cnt[105][105];
vector<LASER> Laser;
int laser_num ;
int m, n;

void clear_status(int x, int y, int d, int step)
{
    if (d == 0)
    {
        for (int j = y - 1; j >= 0; --j)
        {
            if (maze[x][j] == '#')
                break;
            status[x][j][step] = true;
        }
    }else if (d == 1)
    {
        for (int i = x - 1; i >= 0; --i)
        {
            if (maze[i][y] == '#')
                break;
            status[i][y][step] = true;
        }
    }else if (d == 2)
    {
        for (int j = y + 1; j < n; ++j)
        {
            if (maze[x][j] == '#')
                break;
            status[x][j][step] = true;
        }
    }else if (d == 3)
    {
        for (int i = x + 1; i < m; ++i)
        {
            if (maze[i][y] == '#')
                break;
            status[i][y][step] = true;
        }
    }
}
void count_status()
{
    for (int i = 0; i < laser_num; ++i)
    {
        if (Laser[i].d == 0)
        {
            clear_status(Laser[i].x, Laser[i].y, 0, 0);
            clear_status(Laser[i].x, Laser[i].y, 1, 1);
            clear_status(Laser[i].x, Laser[i].y, 2, 2);
            clear_status(Laser[i].x, Laser[i].y, 3, 3);
        }else if (Laser[i].d == 1)
        {
            clear_status(Laser[i].x, Laser[i].y, 1, 0);
            clear_status(Laser[i].x, Laser[i].y, 2, 1);
            clear_status(Laser[i].x, Laser[i].y, 3, 2);
            clear_status(Laser[i].x, Laser[i].y, 0, 3);
        }else if (Laser[i].d == 2)
        {
            clear_status(Laser[i].x, Laser[i].y, 2, 0);
            clear_status(Laser[i].x, Laser[i].y, 3, 1);
            clear_status(Laser[i].x, Laser[i].y, 0, 2);
            clear_status(Laser[i].x, Laser[i].y, 1, 3);
        }else if (Laser[i].d == 3)
        {
            clear_status(Laser[i].x, Laser[i].y, 3, 0);
            clear_status(Laser[i].x, Laser[i].y, 0, 1);
            clear_status(Laser[i].x, Laser[i].y, 1, 2);
            clear_status(Laser[i].x, Laser[i].y, 2, 3);
        }
    }
}

int main()
{
    freopen("Laser_Maze.txt", "r", stdin);
    freopen("Laser_Maze_out_3.txt", "w", stdout);
    int T;
    scanf("%d", &T);
    for (int ca = 1; ca <= T; ++ca)
    {
        scanf("%d%d", &m ,&n);
        for (int i = 0; i < m; ++i)
            scanf("%s", maze[i]);
        memset(status, false, sizeof(status));
        Laser.clear();
        int sx, sy;
        int tx, ty;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (maze[i][j] == '<')
                {
                    Laser.push_back(LASER(i, j, 0));
                }else if (maze[i][j] == '^')
                {
                    Laser.push_back(LASER(i, j, 1));
                }else if (maze[i][j] == '>')
                {
                    Laser.push_back(LASER(i, j, 2));
                }else if (maze[i][j] == 'v')
                {
                    Laser.push_back(LASER(i, j, 3));
                }else if (maze[i][j] == 'S')
                {
                    sx = i; sy = j;
                }else if (maze[i][j] == 'G')
                {
                    tx = i; ty = j;
                }
            }
            laser_num = Laser.size();
        }
        count_status();
        memset(cnt, 0, sizeof(cnt));
        unordered_set<STAGE, STAGEHASH> iset;
        queue<STAGE> que;
        que.push(STAGE(sx, sy, 0));
        int ans = -1;
        while(!que.empty())
        {
            STAGE cur = que.front();
            que.pop();
            iset.erase(cur);
            if (cur.x == tx && cur.y == ty)
            {
                ans = cur.step;
                break;
            }
//printf("%d---\n", cur.step);
            if (cur.step > 10000)
                break;
            int nx, ny;
            for (int d = 0; d < 4; ++d)
            {
                nx = cur.x + dir[d][0];
                ny = cur.y + dir[d][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && maze[nx][ny] != '#')
                {
                    STAGE tar = STAGE(nx, ny, cur.step + 1);
                    if (!status[nx][ny][(cur.step + 1) % 4] && iset.find(tar) == iset.end())
                    {
                        que.push(tar);
                        iset.insert(tar);
                        cnt[nx][ny]++;
                    }
                }
            }
        }
        printf("Case #%d: ", ca);
        if (ans == -1)
            printf("impossible\n");
        else
            printf("%d\n", ans);
    }
    fclose(stdin);
    fclose(stdout);
    return 0;
}



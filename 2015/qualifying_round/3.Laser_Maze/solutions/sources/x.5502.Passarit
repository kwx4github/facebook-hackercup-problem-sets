#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int q[1000000][3];
int queue;

int board[5][10001];
int save[5][10001];

int t[10000][2];
int tcount;
int start, goal;
int p;

void clearData() {
    
    int i,j;
    
    for(i=0;i<5;i++) 
        for(j=0;j<10000;j++)
            save[i][j] = 0;
            
    p = 0;
}

void generateTable(int m, int n) {
    int i,j,total,position;
    total = m*n;
    
    for(i=0;i<total;i++) {
        board[0][i] = board[4][i];
        board[1][i] = board[4][i];
        board[2][i] = board[4][i];
        board[3][i] = board[4][i];
    }
    // generate threads
    for(i=0;i<tcount;i++) {
        // symbol ^
        if(t[i][1] == 0) {
            position = t[i][0];
            
            while(true) {
                position -= n;
                
                if(position >= 0 && board[0][position] == 0) {
                    board[0][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += 1;
                if(position/n == t[i][0]/n && board[1][position] == 0) {
                    board[1][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += n;
                
                if(position < total && board[2][position] == 0) {
                    board[2][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= 1;
                if(position/n == t[i][0]/n && board[3][position] == 0) {
                    board[3][ position ] = 1;
                }
                else break;
            }
        }
        
        // symbol >
        if(t[i][1] == 1) {
            position = t[i][0];
            
            while(true) {
                position += 1;
                if(position/n == t[i][0]/n && board[0][position] == 0) {
                    board[0][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += n;
                
                if(position < total && board[1][position] == 0) {
                    board[1][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= 1;
                if(position/n == t[i][0]/n && board[2][position] == 0) {
                    board[2][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= n;
                
                if(position >= 0 && board[3][position] == 0) {
                    board[3][ position ] = 1;
                }
                else break;
            }
        }
        
        // symbol v
        if(t[i][1] == 2) {
            position = t[i][0];
            
            while(true) {
                position += n;
                
                if(position < total && board[0][position] == 0) {
                    board[0][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= 1;
                if(position/n == t[i][0]/n && board[1][position] == 0) {
                    board[1][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= n;
                
                if(position >= 0 && board[2][position] == 0) {
                    board[2][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += 1;
                if(position/n == t[i][0]/n && board[3][position] == 0) {
                    board[3][ position ] = 1;
                }
                else break;
            }
        }
        
        // symbol <
        if(t[i][1] == 3) {
            position = t[i][0];
            
            
            while(true) {
                position -= 1;
                if(position/n == t[i][0]/n && board[0][position] == 0) {
                    board[0][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position -= n;
                
                if(position >= 0 && board[1][position] == 0) {
                    board[1][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += 1;
                if(position/n == t[i][0]/n && board[2][position+1] == 0) {
                    board[2][ position ] = 1;
                }
                else break;
            }
            position = t[i][0];
            while(true) {
                position += n;
                
                if(position < total && board[3][position] == 0) {
                    board[3][ position ] = 1;
                }
                else break;
            }
        }
        
    }
}

int main() {
    
    char str[102];
    int x;
    
    freopen("input3.txt","r",stdin);
    freopen("output3.txt","w",stdout);
    
    scanf("%d",&x);
    
    int m,n,i,j,k,len;
    
    for(i=1;i<=x;i++) {
        scanf("%d%d",&m,&n);
        clearData();
        tcount = 0;
        for(j=0;j<m;j++) {
            
            scanf("%s",str);
            len = strlen(str);
            for(k=0;k<len;k++) {
                if(str[k] == '.') board[4][j*n +k] = 0;
                else if(str[k] == '#') board[4][j*n +k] = 1;
                else if(str[k] == 'S') {
                    board[4][j*n +k] = 0;
                    start = j*n+k;
                }
                else if(str[k] == 'G') {
                    board[4][j*n +k] = 0;
                    goal = j*n+k;
                }
                else if(str[k] == '^') {
                    board[4][j*n +k] = 1;
                    t[tcount][0] = j*n +k;
                    t[tcount++][1] = 0;
                }
                else if(str[k] == '>') {
                    board[4][j*n +k] = 1;
                    t[tcount][0] = j*n +k;
                    t[tcount++][1] = 1;
                }
                else if(str[k] == 'v') {
                    board[4][j*n +k] = 1;
                    t[tcount][0] = j*n +k;
                    t[tcount++][1] = 2;
                }
                else if(str[k] == '<') {
                    board[4][j*n +k] = 1;
                    t[tcount][0] = j*n +k;
                    t[tcount++][1] = 3;
                }
            } // end for k
            
            
        } // end for j
        
        // do something after scan table
        
        generateTable(m,n);
        /*
        for(j=0;j<m;j++) {
            for(k=0;k<n;k++) {
                printf("%d ",board[3][j*n+k]);
                
            }
            printf("\n");
        }
        */
        
        /*
        for(j=0;j<tcount;j++) {
            printf("%d %d\n",t[i][0], t[i][1]);
        }
        for(j=0;j<m;j++) {
            for(k=0;k<n;k++) {
                printf("%d ", board[2][j*n+k]);
            }
            printf("\n");
        }
       
        
        */
        // enqueue
        queue = 1;
        q[0][0] = start;
        q[0][1] = 0;
        q[0][2] = 0;
        
        int position, state, answer;
        
        for(j=0;j<queue;j++) {
            
            position = q[j][0];
            
            state = q[j][1];
            answer = q[j][2];
            
            //printf("deq %d = %d %d %d\n",j,position,state,answer);
          
            if(position == goal) {
                p = answer;
                break;
            }
           
                // walk up
                if(position-n > 0 && board[(state+1)%4][position-n] == 0 && save[(state+1)%4][position-n] == 0) {
                    q[queue][0] = position-n;
                    q[queue][1] = (state+1)%4;   
                    q[queue++][2] = answer + 1;
                    
                    save[(state+1)%4][position-n] = 1;
                    //printf("enq up %d %d %d\n",q[queue-1][0], q[queue-1][1], q[queue-1][2]);
                }
                // walk right
                if((position+1)/n == position/n && board[(state+1)%4][position+1] == 0 && save[(state+1)%4][position+1] == 0) {
                    q[queue][0] = position+1;
                    q[queue][1] = (state+1)%4;   
                    q[queue++][2] = answer + 1;
                    
                    save[(state+1)%4][position+1] = 1;
                    //printf("enq right %d %d %d\n",q[queue-1][0], q[queue-1][1], q[queue-1][2]);
                }
                // walk down
                if(position+n < m*n && board[(state+1)%4][position+n] == 0 && save[(state+1)%4][position+n] == 0) {
                    q[queue][0] = position+n;
                    q[queue][1] = (state+1)%4;   
                    q[queue++][2] = answer + 1;
                    
                    save[(state+1)%4][position+n] = 1;
                    //printf("enq down %d %d %d\n",q[queue-1][0], q[queue-1][1], q[queue-1][2]);
                }
                // walk left
                if((position-1)/n == position/n && position-1 >= 0 && board[(state+1)%4][position-1] == 0 && save[(state+1)%4][position-1] == 0) {
                    q[queue][0] = position-1;
                    q[queue][1] = (state+1)%4;   
                    q[queue++][2] = answer + 1;
                    
                    save[(state+1)%4][position-1] = 1;
                    //printf("enq left %d %d %d\n",q[queue-1][0], q[queue-1][1], q[queue-1][2]);
                }
                //system("pause");
            
            state = (state+1)%4;
            
        }
        
        
        
        
        
        
        
        
        if(p > 0)
            printf("Case #%d: %d\n",i ,p);
        else printf("Case #%d: impossible\n", i);
        
    } // end for i testcase 
    
    return 0;
}

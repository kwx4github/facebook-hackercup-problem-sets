#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <stdio.h>
#include <locale>
#include <codecvt>
#include <sstream>



using namespace std;


vector< vector<char> > gen_maze(vector< vector<char> > maze, int Steps)
{
	vector< vector<char> > ret = maze;

	for (int i = 0; i < maze.size(); i++)
	{
		for (int j = 0; j < maze[0].size(); j++)
		{
			int pat = 0;
			if (maze[i][j] == '<')
				pat = 1;
			if (maze[i][j] == '^')
				pat = 2;
			if (maze[i][j] == '>')
				pat = 3;
			if (maze[i][j] == 'v')
				pat = 4;

			if (pat == 0)
				continue;

			pat += (Steps % 4);
			
			if (pat > 4)
				pat -= 4;

		

			if (pat == 1)
			{
				for (int k = j - 1; k >= 0; k--)
				{
					if (maze[i][k] == '.' || maze[i][k] == 'S' || maze[i][k] == 'G')
						ret[i][k] = '#';
					else
						break;
				}
			}

			if (pat == 1)
			{
				for (int k = i - 1; k >= 0; k--)
				{
					if (maze[k][j] == '.' || maze[k][j] == 'S' || maze[k][j] == 'G')
						ret[k][j] = '#';
					else
						break;
				}
			}

			if (pat == 3)
			{
				for (int k = j + 1; k < maze[i].size() ; k++)
				{
					if (maze[i][k] == '.' || maze[i][k] == 'S' || maze[i][k] == 'G')
						ret[i][k] = '#';
					else
						break;
				}
			}

			if (pat == 4)
			{
				for (int k = i + 1; k < maze.size(); k++)
				{
					if (maze[k][j] == '.' || maze[k][j] == 'S' || maze[k][j] == 'G')
						ret[k][j] = '#';
					else
						break;
				}
			}

		}
	}


	return ret;
}


void main(void)
{
	ifstream fin("laser_maze.txt");

	ofstream fout("laser_maze_out_N.txt", std::ofstream::binary);

	int Nmaze;
	fin >> Nmaze;

	for (int i = 0; i < Nmaze; i++)
	{
		int min_steps = -1;

		int M, N;
		fin >> M >> N;
		vector< vector<char> > maze(M);

		

		vector< vector<int> > cur_pos;

		for (int k = 0; k < M; k++)
		{
			vector<char> tmp(N);
			for (int s = 0; s < N; s++)
			{
				fin >> tmp[s];
				if (tmp[s] == 'S')
				{
					std::vector<int> t(2);
					t[0] = k; t[1] = s;
					cur_pos.push_back(t);
				}
			}
			maze[k] = tmp;
		}


		vector< vector<char> > maze_tmp(M);


		vector<int> steps;
			steps.push_back(0);
			


		for (int it = 0; it < 100000; it++)
		{
			if (it >= cur_pos.size())
				break;

			//std::cout << "it =" << it << endl;

			maze_tmp = gen_maze(maze, steps[it] + 1);

			for (int o1 = -1; o1 < 2; o1++ )
			{
				for (int o2 = -1; o2 < 2; o2++ )
				{
					if (abs(o1) == abs(o2))
						continue;

					int newx = cur_pos[it][0] + o1;
					int newy = cur_pos[it][1] + o2;

					

					if (newx>=maze.size() || newx<0 || newy>=maze[0].size() || newy < 0)
						continue;

					//std::cout << newx << newy << endl;

					if (maze_tmp[newx][newy] == 'G')
						min_steps = steps[it] + 1;

					//check validity
					if (maze_tmp[newx][newy] == '.' || maze_tmp[newx][newy] == 'S')
					{
						vector<int> t(2);
						t[0] = newx;
						t[1] = newy;

						cur_pos.push_back(t);
						steps.push_back(steps[it] + 1);
					}
				}
			}
			if (min_steps > 0)
				break;
		}


		if (min_steps == -1)   {
			cout << "Case #" << i + 1 << ": impossible" << endl;
			fout << "Case #" << i + 1 << ": impossible" << endl;
		} 
		else
		{
			cout << "Case #" << i + 1 << ": " << min_steps << endl;
			fout << "Case #" << i + 1 << ": " << min_steps << endl;
		}
	}
	fout.close();

	return;
}


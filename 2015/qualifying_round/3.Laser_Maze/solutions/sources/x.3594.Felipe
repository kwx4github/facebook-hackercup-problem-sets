import os
import itertools
import numpy as np


lazers_type = {
    "." : True,
    "#" : False, 
    "S" : 1,
    "G" : 100,
    "<" : 180,
    ">" : 0,
    "^" : 90,
    "v" : 270
}

TURRETS = {
    "^" : 1,
    ">" : 2,
    "v" : 3,
    "<" : 4
}

class Problem(object):
    steps = 0

    def __init__(self, M, N, board, pid):
        super(Problem, self).__init__()
        self.M = M
        self.N = N
        self.board = board
        self.current_board = board
        self.pid = pid


class Problems(object):
    T = 0
    problems = []

    def __init__(self, input_file, output_file):
        super(Problems, self).__init__()
        self.input_file = input_file
        self.output_file = output_file
        
    def parse_line(self, line, separator):
        return map(int, line.split(separator))

    def prepare_row(self, line, array, eme, start, end):
        line_ss = list(line)
        for i,c in enumerate(line_ss):
            if c == "." or c == "G" or c == "S":
                array[i] = 1
                if c == "S":
                    start[0], start[1] = eme, i
                if c == "G":
                    end[0], end[1] = eme, i
                    
    def prepare_turrets(self, line, array):
        line_ss = list(line)
        for i,c in enumerate(line_ss):
            if c in TURRETS.keys():
                array[i] = TURRETS[c]

    def open_file(self):
        """open_file"""

        f = open(self.input_file, 'r')
        T = int(f.readline())

        if (T < 1) or (T > 100):
            raise Exception('T parameter out of range')
        else:
            self.T = T
            for test in range(self.T):
                M, N = self.parse_line(f.readline(), " ")
                if (N < 1) or (N > 100):
                    raise Exception('N parameter out of range')
                if (M < 1) or (M > 100):
                    raise Exception('M parameter out of range')
                else:
                    board = np.zeros([M, N],  dtype=bool)
                    turrets = np.zeros([M, N])
                    start = np.array([0, 0])
                    end = np.array([0, 0])
                    for eme in range(M):
                        chars = f.readline()
                        self.prepare_row(chars, board[eme], eme, start, end)
                        self.prepare_turrets(chars, turrets[eme])
                    self.problems += [Problem(M, N, board, test+1)]
                    self.problems[-1].start = start
                    self.problems[-1].end = end
                    self.problems[-1].turrets = turrets
                    # print(np.where(turrets > 0))
        f.close()
    
    def near_moves(self, i, j, array):
        possible_moves = np.zeros(array.shape,  dtype=bool)
        possible_moves[max(i-1, 0):min(i+2, array.shape[0]), j] = True
        possible_moves[i, max(j-1, 0):min(j+2, array.shape[1])] = True
        possible_moves[i,j] = False
        return possible_moves
    
    def fire_turret(self, i, j, array, possible_moves):
        # possible_moves = np.ones(array.shape,  dtype=bool)
        if array[i, j] == 1:
            possible_moves[:i,j] = False
        if array[i, j] == 2:
            possible_moves[i,j:] = False
        if array[i, j] == 3:
            possible_moves[i:,j] = False
        if array[i, j] == 4:
            possible_moves[i,:j] = False
        possible_moves[i,j] = False
        # return possible_moves
    def rotate_turrets(self, current_turrets):
        current_turrets[np.where( current_turrets >= 1 )]+=1
        current_turrets[np.where( current_turrets > 4 )] = 1
    
    def save_file(self):
        """save_file"""
        f = open(self.output_file, 'w')
        for test in self.problems:
            f.write('Case #{0}: {1}\n'.format(test.pid, "impossible" if test.steps > 100 else test.steps))
        f.close()

    def laser_maze(self):
        """run laser_maze"""
        for test in self.problems:
            current_step = test.start
            # current_turrets = test.turrets
            used_points = []
            old_step = test.start
            
            for step in range(102):
                test.steps = step+1
                
                #rotate turrets
                self.rotate_turrets(test.turrets)

                
                possible_moves = self.near_moves(current_step[0], current_step[1], test.board)


                turrets_pos = np.where(test.turrets > 0)
                turrets_firing = np.ones(test.turrets.shape,  dtype=bool)
                for i,point in enumerate(zip(turrets_pos[0], turrets_pos[1])):
                    self.fire_turret(point[0], point[1], test.turrets, turrets_firing)
                    
                current_board = np.logical_and(test.board, turrets_firing)
                possible_moves = np.logical_and(current_board, possible_moves)

  

                moves = np.where(possible_moves)

                if moves[0].size <= 0:
                    test.steps = 105
                    break

                for io in range(len(moves[0])):
                    pointo = [int(moves[0][io]), int(moves[1][io])]
                    if pointo not in used_points:
                        old_step = current_step
                        current_step = pointo
                        used_points.append(current_step)
                    else:
                        old_step = current_step
                        current_step = pointo


                if (current_step == test.end).all():
                    break

        
if __name__ == "__main__":
    lm = Problems("laser_maze.txt", 
                  "laser_maze_output.txt")

    lm.open_file()
    lm.laser_maze()
    lm.save_file()
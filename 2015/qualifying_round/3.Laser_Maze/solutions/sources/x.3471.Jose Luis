#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <string>
#include <iostream>

using namespace std;

#define INF 1000000007
#define MAXN 110
#define MAXM 110

int vis[4][MAXN][MAXM];
int prob[4][MAXN][MAXM];
char mat[4][MAXN][MAXM];
int dist[4][MAXN][MAXM];
int dx[4]={-1, 1, 0, 0};
int dy[4]={0, 0, -1, 1};
int n, m;

struct Info {
    int k, x, y;
    Info(int _k=0, int _x=0, int _y=0) {
        k=_k;
        x=_x;
        y=_y;
    }
};

int isValido(int k, int x, int y) {
    return x>=0 && x<n && y>=0 && y<m && prob[k][x][y]==0;
}

void preprocessamento() {
    int i, j, k, x, y;
    for (k=1; k<=3; k++) {
        for (i=0; i<n; i++) {
            for (j=0; j<m; j++) {
                if (mat[k-1][i][j]=='>') {
                    mat[k][i][j]='v';
                }
                else if (mat[k-1][i][j]=='v') {
                    mat[k][i][j]='<';
                }
                else if (mat[k-1][i][j]=='<') {
                    mat[k][i][j]='^';
                }
                else if (mat[k-1][i][j]=='^') {
                    mat[k][i][j]='>';
                }
                else {
                    mat[k][i][j]=mat[k-1][i][j];
                }
            }
        }
    }
    for (k=0; k<=3; k++) {
        for (i=0; i<n; i++) {
            for (j=0; j<m; j++) {

                prob[k][i][j]=0;
                if (mat[k][i][j]=='#' || mat[k][i][j]=='>' || mat[k][i][j]=='v' || mat[k][i][j]=='<' || mat[k][i][j]=='^') {
                    prob[k][i][j]=1;
                }
                else {
                    for (x=i-1; x>=0; x--) {
                        if (mat[k][x][j]=='>' || mat[k][x][j]=='v' || mat[k][x][j]=='<' || mat[k][x][j]=='^') {
                            if (mat[k][x][j]=='v') {
                                prob[k][i][j]=1;
                            }
                            break;
                        }
                    }
                    for (x=i+1; x<n; x++) {
                        if (mat[k][x][j]=='>' || mat[k][x][j]=='v' || mat[k][x][j]=='<' || mat[k][x][j]=='^') {
                            if (mat[k][x][j]=='^') {
                                prob[k][i][j]=1;
                            }
                            break;
                        }
                    }
                    for (y=j-1; y>=0; y--) {
                        if (mat[k][i][y]=='>' || mat[k][i][y]=='v' || mat[k][i][y]=='<' || mat[k][i][y]=='^') {
                            if (mat[k][i][y]=='>') {
                                prob[k][i][j]=1;
                            }
                            break;
                        }
                    }
                    for (y=j+1; y<m; y++) {
                        if (mat[k][i][y]=='>' || mat[k][i][y]=='v' || mat[k][i][y]=='<' || mat[k][i][y]=='^') {
                            if (mat[k][i][y]=='<') {
                                prob[k][i][j]=1;
                            }
                            break;
                        }
                    }

                }
            }
        }
    }
}

int main() {
//    freopen("laser_maze.txt", "r", stdin);
//    freopen("laser_maze_saida.txt", "w", stdout);
    int t;
    scanf("%d", &t);
    int cont;
    for (cont=1; cont<=t; cont++) {
        scanf("%d %d", &n, &m);
        int i, j;
        for (i=0; i<n; i++) {
            scanf("%s", mat[0][i]);
        }
        preprocessamento();
        int k, x, y;
        queue<Info> fila;
        memset(vis, 0, sizeof(vis));
        for (i=0; i<n; i++) {
            for (j=0; j<m; j++) {
                if (mat[0][i][j]=='S') {
                    x=i;
                    y=j;
                }
            }
        }
        dist[0][x][y]=0;
        vis[0][x][y]=1;
        fila.push(Info(0, x, y));
        while (!fila.empty()) {
            k=fila.front().k;
            x=fila.front().x;
            y=fila.front().y;
            if (mat[k][x][y]=='G') {
                break;
            }
            fila.pop();
            for (i=0; i<4; i++) {
                int novoK, novoX, novoY;
                novoK=(k+1)%4;
                novoX=x+dx[i];
                novoY=y+dy[i];
                if (isValido(novoK, novoX, novoY) && vis[novoK][novoX][novoY]==0) {
                    vis[novoK][novoX][novoY]=1;
                    dist[novoK][novoX][novoY]=dist[k][x][y]+1;
                    fila.push(Info(novoK, novoX, novoY));
                }
            }
        }
        if (fila.empty()) {
            printf("Case %d#: impossible\n", cont);
        }
        else {
            while (!fila.empty()) {
                fila.pop();
            }
            printf("Case %d#: %d\n", cont, dist[k][x][y]);
        }
    }
    return 0;
}


































#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<queue>
#include<map>
#include<bitset>
using namespace std;
#define PII pair<int,int>
#define X first
#define Y second
#define PB push_back
#define CLR(a) memset(a, 0, sizeof(a))
#define FOR(i,a,b) for (int i=(a);i<(b);i++)
#define FOE(i,a,b) for (int i=(a);i<=(b);i++)
#define FIT(i,a) for (__typeof__((a).begin()) i = (a).begin(); i != (a).end(); i++)
#define TRA(i,a,b) for (int i = (a); i != -1; i = (b)[i])
#define INF (1 << 30)
#define EPS (1e-9)
#define REP(i,n) FOR(i,0,n)
#define LL long long
#define N 200
struct node{
	int x, y, z;
	node(){}
	node(int a, int b, int c):x(a), y(b), z(c){}
}q[N * N * 10];
int n, m;
int dy[4] = {0, 1, 0, -1}, dx[4] = {-1, 0, 1, 0};
char s[N][N];
int b[N][N][10];
int vis[N][N][10];
int sx, sy, lo, hi;

int bfs(){
	int ret = -1;
	lo = hi = 0;
	memset(vis, 0, sizeof(vis));
	vis[sx][sy][0] = 1;
	q[hi++] = node(sx, sy, 0);
	while(lo < hi){
		node cur = q[lo++];
		int x = cur.x, y = cur.y, z = cur.z;
		FOR(i,0,4){
			int nx = x + dx[i], ny = y + dy[i];
			if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
			if (b[nx][ny][(z + 1) & 3]) continue;
			if (vis[nx][ny][(z + 1) & 3]) continue;
			if (s[nx][ny] == 'G') return z + 1;
			vis[nx][ny][(z + 1) & 3] = 1;
			q[hi++] = node(nx, ny, z + 1);
		}
	}
	return ret;
}

int main(){
	int T;
	scanf("%d", &T);
	FOE(cc,1,T){
		printf("Case #%d: ", cc);
		memset(b, 0, sizeof(b));
		scanf("%d%d", &n, &m);
		FOR(i,0,n) scanf("%s", s[i]);
		FOR(i,0,n) FOR(j,0,m) {
			int tmp = -1;
			if (s[i][j] == '^') tmp = 0;
			else if (s[i][j] == '<') tmp = 1;
			else if (s[i][j] == 'v') tmp = 2;
			else if (s[i][j] == '>') tmp = 3;
			if (s[i][j] == 'S') sx = i, sy = j;
			if (s[i][j] != '.' && s[i][j] != 'S' && s[i][j] != 'G') FOR(k,0,4) b[i][j][k] = 1;
			if (tmp == -1) continue;
			FOR(k,0,4) FOR(h,1,100){
				int nx = i + dx[k] * h, ny = j + dy[k] * h;
				if (nx < 0 || nx >= n || ny < 0 || ny >= m) break;
				if (s[nx][ny] != '.' && s[nx][ny] != 'S' && s[nx][ny] != 'G') break;
				b[nx][ny][(k + tmp) & 3] = 1;
			}
		}
		int ans = bfs();
		if (ans == -1) puts("impossible");
		else printf("%d\n", ans);
	}
	return 0;
}


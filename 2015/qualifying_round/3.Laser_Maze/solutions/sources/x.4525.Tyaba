#include <algorithm>
#include <iostream>
#include <sstream>
#include <queue>
#include <cstring>
using namespace std;

typedef struct P{
  int x, y, z;
}P;

int inrange(int x, int y, int z)
{
  return (x <= y && y < z);
}

int solve()
{
  int m, n;
  string maze[4][103];
  int d[4][103][103];
  int dx[4] = {0, -1, 0, 1};
  int dy[4] = {1, 0, -1, 0};
  int sx, sy, gx, gy;
  char laser[4] = {'^', '>', 'v', '<'};
  queue<P> que;
  P p;
  
  
  memset(d, -1, sizeof(d));
  cin >> m >> n;
  for(int i = 0; i < m; i++)
    {
      cin >> maze[0][i];
      maze[1][i] = maze[2][i] = maze[3][i] = maze[0][i];
    }
  for(int i = 0; i < m; i++)
    {
      for(int j = 0; j < n; j++)
	{
	  if(maze[0][i][j] == 'S')
	    {
	      sx = j;
	      sy = i;
	      for(int k = 0; k < 4; k++)
		{
		  maze[k][i][j] = '.';
		}
	    }
	  if(maze[0][i][j] == 'G')
	    {
	      gx = j;
	      gy = i;
	      for(int k = 0; k < 4; k++)
		{
		  maze[k][i][j] = '.';
		}
	    }
	  for(int k = 0; k < 4; k++)
	    {
	      if(maze[0][i][j] == laser[k])
		{
		  for(int l = 0; l < 4; l++)
		    {
		      maze[l][i][j] = laser[(k+l)%4];
		    }
		}
	    }
	}
    }
  for(int i = 0; i < 4; i++)
    {
      for(int j = 0; j < m; j++)
	{
	  for(int k = 0; k < n; k++)
	    {
	      if(maze[i][j][k] == 'v')
		{
		  for(int l = 1;; l++)
		    {
		      if(j + l < m && maze[i][j + l][k] == '.')
			{
			  maze[i][j + l][k] = '*';
			}else{
			break;
		      }
		    }
		}
	      if(maze[i][j][k] == '^')
		{
		  for(int l = 1;; l++)
		    {
		      if(j - l >= 0 && maze[i][j - l][k] == '.')
			{
			  maze[i][j - l][k] = '*';
			}else{
			break;
		      }
		    }
		}
	      if(maze[i][j][k] == '>')
		{
		  for(int l = 1;; l++)
		    {
		      if(k + l < n && maze[i][j][k + l] == '.')
			{
			  maze[i][j][k + l] = '*';
			}else{
			break;
		      }
		    }
		}
	      if(maze[i][j][k] == '<')
		{
		  for(int l = 1;; l++)
		    {
		      if(k - l >= 0 && maze[i][j][k - l] == '.')
			{
			  maze[i][j][k - l] = '*';
			}else{
			break;
		      }
		    }
		}
	    }
	}
    }
  d[0][sy][sx] = 0;
  p.x = sx; p.y = sy; p.z = 0;
  que.push(p);
  while(!que.empty())
    {
      p = que.front(); que.pop();
      for(int i = 0; i < 4; i++)
	{
	  P p2;
	  p2.x = p.x + dx[i]; p2.y = p.y + dy[i]; p2.z = (p.z + 1)%4;
	  if(inrange(0, p2.x, n) && inrange(0, p2.y, m) && maze[p2.z][p2.y][p2.x] == '.' && d[p2.z][p2.y][p2.x] == -1)
	    {
	      d[p2.z][p2.y][p2.x] = d[p.z][p.y][p.x] + 1;
	      que.push(p2);
	      if(p2.x == gx && p2.y == gy)
		{
		  cout << d[p2.z][p2.y][p2.x] << endl;
		  return 0;
		}
	    }
	}
    }
  cout << "impossible" << endl;

  return 0;
}

int main()
{
  cout.setf(ios::fixed); cout.precision(10);//小数点以下10桁まで表示
  int t;
  
  cin >> t;

  for(int i = 0; i < t; i++)
    {
      cout << "Case #" << (i + 1) << ": ";
      solve();
    }
  
  return 0;
}

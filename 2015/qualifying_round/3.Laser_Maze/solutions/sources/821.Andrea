#include <stdio.h>
#include <queue>
#include <algorithm>
#include <tuple>
using std::queue;
using std::tuple;
using std::make_tuple;
using std::get;
using std::min;

int N, M;
char C[110][110];
char Maze[4][110][110];
char Visited[4][110][110];
int sx, sy;

int dfs(int x, int y, int step) {
  if (C[x][y] == 'G') return 0;

  Visited[step % 4][x][y] = 1;
  //printf("x=%d, y=%d, step mod 4=%d\n",x,y,step%4);

  int ans = -1;
  int next = (step + 1) % 4;

  if (x < M-1 && Maze[next][x+1][y] != '#' &&
      !Visited[next][x+1][y]) {
    int tmp = dfs(x+1, y, next);
    if (tmp != -1)
      ans = ans == -1 ? 1 + tmp : min(ans, 1 + tmp);
  }

  if (x > 0 && Maze[next][x-1][y] != '#' &&
      !Visited[next][x-1][y]) {
    int tmp = dfs(x-1, y, next);
    if (tmp != -1)
      ans = ans == -1 ? 1 + tmp : min(ans, 1 + tmp);
  }

  if (y < N-1 && Maze[next][x][y+1] != '#' &&
      !Visited[next][x][y+1]) {
    int tmp = dfs(x, y+1, next);
    if (tmp != -1)
      ans = ans == -1 ? 1 + tmp : min(ans, 1 + tmp);
  }

  if (y > 0 && Maze[next][x][y-1] != '#' &&
      !Visited[next][x][y-1]) {
    int tmp = dfs(x, y-1, next);
    if (tmp != -1)
      ans = ans == -1 ? 1 + tmp : min(ans, 1 + tmp);
  }

  Visited[step % 4][x][y] = 0;
  return ans;
}

void fill(int x, int y, int dirx, int diry, int mod) {
  if (dirx == 1) {
    for (++y; y < N; y++) {
      if (C[x][y] != '.'  && C[x][y] != 'G' && C[x][y] != 'S') return;
      Maze[mod][x][y] = '#';
    }
  } else if (dirx == -1) {
    for (--y; y >= 0; y--) {
      if (C[x][y] != '.'  && C[x][y] != 'G' && C[x][y] != 'S') return;
      Maze[mod][x][y] = '#';
    }
  } else if (diry == 1) {
    for (--x; x >= 0; x--) {
      if (C[x][y] != '.'  && C[x][y] != 'G' && C[x][y] != 'S') return;
      Maze[mod][x][y] = '#';
    }
  } else if (diry == -1) {
    for (++x; x < M; x++) {
      if (C[x][y] != '.'  && C[x][y] != 'G' && C[x][y] != 'S') return;
      Maze[mod][x][y] = '#';
    }
  } 
}


void solve(int t) {
  scanf("%d %d", &M, &N);
  //printf("M=%d, N=%d\n",M,N);
  
  int gx, gy;
  char newline;
  for (int i = 0; i < M; i++) {
    scanf("%c", &newline);
    //printf("row %d: ",i);
    for (int j = 0; j < N; j++) {
      scanf("%c", &C[i][j]);
      //printf("%c",C[i][j]);
      for (int z = 0; z < 4; z++)
        Maze[z][i][j] = C[i][j];
      if (C[i][j] == 'S') { sx = i; sy = j; }
      if (C[i][j] == 'G') { gx = i; gy = j; }
    }
    //printf("\n");
  }  
  for (int i = 0; i < M; i++)
    for (int j = 0; j < N; j++) {
      if (C[i][j] == '^') {
        for (int z = 0; z < 4; z++)
          Maze[z][i][j] = '#';
        fill(i,j,0,1,0);
        fill(i,j,1,0,1);
        fill(i,j,0,-1,2);
        fill(i,j,-1,0,3);
      } else if (C[i][j] == '<') {
        for (int z = 0; z < 4; z++)
          Maze[z][i][j] = '#';
        fill(i,j,-1,0,0);
        fill(i,j,0,1,1);
        fill(i,j,1,0,2);
        fill(i,j,0,-1,3);
      } else if (C[i][j] == '>') {
        for (int z = 0; z < 4; z++)
          Maze[z][i][j] = '#';
        fill(i,j,1,0,0);
        fill(i,j,0,-1,1);
        fill(i,j,-1,0,2);
        fill(i,j,0,1,3);
      } else if (C[i][j] == 'v') {
        for (int z = 0; z < 4; z++)
          Maze[z][i][j] = '#';
        fill(i,j,0,-1,0);
        fill(i,j,-1,0,1);
        fill(i,j,0,1,2);
        fill(i,j,1,0,3);
      }
    }
  
  for (int z = 0; z < 4; z++)
    for (int i = 0; i < M; i++)
      for (int j = 0; j < N; j++)
        Visited[z][i][j] = 0;

  // DEBUG the 4-states MAZE
  //if (M < 5) {
  //for (int z = 0; z < 4; z++) {
  //  printf("step mod 4=%d\n",z);
  //  for (int i = 0; i < M; i++) {
  //    for (int j = 0; j < N; j++) {
  //      printf("%c",Maze[z][i][j]);
  //    }
  //    printf("\n");
  //  }    
  //  printf("\n");
  //}
  //}
  ////int ans = dfs(sx, sy, 0);

  // BFS in the 4-states MAZE
  queue<tuple<int, int, int>> Q;
  Q.push(make_tuple(sx, sy, 0));
  Visited[0][sx][sy] = 1;
  while (!Q.empty()) {
    tuple<int, int, int> point = Q.front(); Q.pop();
    int x = get<0>(point);
    int y = get<1>(point);
    int step = get<2>(point);
    //printf("queue's size: %d, step nr: %d\n", Q.size(), step);
    //Visited[step%4][x][y] = 1;
    if (x == gx && y == gy) {
      printf("Case #%d: %d\n", t, step);
      return;
    }
    if (x > 0 && !Visited[(step+1)%4][x-1][y] &&
        Maze[(step+1)%4][x-1][y] != '#') {
      Q.push(make_tuple(x-1,y,step+1));
      Visited[(step+1)%4][x-1][y] = 1;
    }

    if (x < M-1 && !Visited[(step+1)%4][x+1][y] &&
        Maze[(step+1)%4][x+1][y] != '#') {
      Q.push(make_tuple(x+1,y,step+1));
      Visited[(step+1)%4][x+1][y] = 1;
    }
    if (y > 0 && !Visited[(step+1)%4][x][y-1] &&
        Maze[(step+1)%4][x][y-1] != '#') {
      Q.push(make_tuple(x,y-1,step+1));
      Visited[(step+1)%4][x][y-1] = 1;
    }  
    if (y < N-1 && !Visited[(step+1)%4][x][y+1] &&
        Maze[(step+1)%4][x][y+1] != '#') {
      Q.push(make_tuple(x,y+1,step+1));
      Visited[(step+1)%4][x][y+1] = 1;
    }  
  }
  
  printf("Case #%d: impossible\n", t);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int i = 1; i <= T; i++)
    solve(i);
  return 0;
}

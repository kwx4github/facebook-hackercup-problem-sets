/*
 * Kishore Patel
 */

import java.util.*;
import java.io.*;

public class Main implements Runnable {
        
	public void solve() throws IOException {
            int T = nextInt();
            for(int i = 0; i < T; i++){
                printCase(i+1);
                solve1();
            }
	}
      
      int N, M;
      boolean[][][] kill;
      char[][] map;
      int startR, startC;
      int goalR, goalC;

      class State{
          int row, col, time;
          State(int r, int c, int t){
              row = r;
              col = c;
              time = t;
          }
      }
      
      int[] dx = {0, 0, 1, -1}; // right, left, down , up
      int[] dy = {1, -1, 0, 0};
      
      
      
      public void solve1() throws IOException{
          N = nextInt(); M = nextInt();
          map = new char[N][M];
          for(int i = 0; i < N; i++) map[i] = nextToken().toCharArray();
          
          kill = new boolean[N][M][4];
          for(int i = 0; i < N; i++){
              for(int j = 0; j < M; j++){
                  if(map[i][j] == 'S'){
                      startR = i; startC = j;
                  }
                  else if(map[i][j] == 'G'){
                      goalR = i;
                      goalC = j;
                  }
                  else if(map[i][j] == '^'){
                      fillKill(i, j, 0, 3);
                      fillKill(i, j, 1, 0);
                      fillKill(i, j, 2, 2);
                      fillKill(i, j, 3, 1);
                  }
                  else if(map[i][j] == '<'){
                      fillKill(i, j, 0, 1);
                      fillKill(i, j, 1, 3);
                      fillKill(i, j, 2, 0);
                      fillKill(i, j, 3, 2);
                  }
                  else if(map[i][j] == 'v'){
                      fillKill(i, j, 0, 2);
                      fillKill(i, j, 1, 1);
                      fillKill(i, j, 2, 3);
                      fillKill(i, j, 3, 0);
                  }
                  else if(map[i][j] == '>'){
                      fillKill(i, j, 0, 0);
                      fillKill(i, j, 1, 2);
                      fillKill(i, j, 2, 1);
                      fillKill(i, j, 3, 3);
                  }
              }
          }
          
          
          LinkedList<State> q = new LinkedList<State>();
          q.add(new State(startR, startC, 0));
          Map<Long, Integer> count = new HashMap<Long, Integer>();
          
          while(!q.isEmpty()){
              State p = q.poll();
              
              if(p.time > 1000000) break;
              
              if(p.row == goalR && p.col == goalC){
                  out.println(p.time);
                  return;
              }
              //move
              for(int i = 0; i < 4; i++){
                  int nr = p.row + dx[i];
                  int nc = p.col + dy[i];
                  
                  if(nr >= 0 && nc >= 0 && nr < N && nc < M && map[nr][nc] != '#' && map[nr][nc] != '>' && map[nr][nc] != '<' && map[nr][nc] != '^' && map[nr][nc] != 'v'){
                      int nextTime = p.time + 1;
                      if(kill[nr][nc][nextTime % 4]) continue;
                      
                      //just to check repreated states moves
                      long dummy = ((long)p.row * (long)(1e+15)) +  ((long)p.col * (long)(1e+10)) + (nr * 1000) + nc;
                      Integer val = count.get(dummy);
                      if(val == null){
                          val = 0;
                      }
                      val += 1;
                      if(val >= 4) continue;
                      else count.put(dummy, val);
                      
                      q.add(new State(nr, nc, nextTime));
                  }
              }
              
          }
          
          out.println("impossible");
      }
        
     private void fillKill(int r, int c, int time, int dir){
         while(true){
             int nr = r + dx[dir];
             int nc = c + dy[dir];
             if(nr >= 0 && nr < N && nc >= 0 && nc < M){
                 if(map[nr][nc] == '#' || map[nr][nc] == '>' || map[nr][nc] == '<' || map[nr][nc] == '^' || map[nr][nc] == 'v') return;
                 kill[nr][nc][time] = true;
                 r = nr;
                 c = nc;
             }
             else{
                 break;
             }
         }
     }
        
       

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//-----------------------------------------------------------
	public static void main(String[] args) {
		new Main().run();
	}

        public void printCase(int t){
            out.print("Case #"+ t + ": ");
        }

        public void printCaseLn(int t){
            out.println("Case #"+ t + ": ");
        }

        public void debug(Object... arr){
            System.out.println(Arrays.deepToString(arr));
        }

        public void print1Int(int[] a){
                for(int i = 0; i < a.length; i++)
                        System.out.print(a[i] + " ");
                System.out.println();
        }
        
        public void print2Int(int[][] a){
                for(int i = 0; i < a.length; i++){
                        for(int j = 0; j < a[0].length; j++){
                                System.out.print(a[i][j] + " ");
                        }
                        System.out.println();
                }
        }
        
	public void run() {
		try {
			in = new BufferedReader(new FileReader("Main.in"));
                        out = new PrintWriter(new File("Main.out"));
			tok = null;
			solve();
			in.close();
                        out.close();
		} catch (IOException e) {
			System.exit(0);
		}
	}

	public String nextToken() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	public int nextInt() throws IOException {
		return Integer.parseInt(nextToken());
	}

	public long nextLong() throws IOException {
		return Long.parseLong(nextToken());
	}

	public double nextDouble() throws IOException {
		return Double.parseDouble(nextToken());
	}
        PrintWriter out;
	BufferedReader in;
	StringTokenizer tok;
}




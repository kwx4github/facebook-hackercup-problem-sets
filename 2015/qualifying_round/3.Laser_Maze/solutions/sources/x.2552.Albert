#include <cstdio>
#include <algorithm>
#include <queue>
#include <cassert>
using namespace std;
int m, n;
char lasers[] = "<^>v";
pair<int,int> dirs[] = {make_pair(0, -1), make_pair(-1, 0), make_pair(0, 1), make_pair(1, 0)};
bool is_laser(char c) {
    for (int i=0; i<4; i++)
        if (lasers[i] == c) return true;
    return false;
}
bool correct_pos(int x, int y) {
    return 0 <= x && x < m && 0 <= y && y < n;
}
char rotate_laser(char c, int rot) {
    for (int i=0; i<4; i++)
        if (lasers[i] == c) return lasers[(i+rot)%4];
    assert(false);
}
pair<int, int> get_dir(char c) {
    for (int i=0; i<4; i++)
        if (lasers[i] == c) return dirs[i];
    assert(false);
}
int main() {
    int T;
    pair<int, int> start, goal;
    scanf("%d", &T);
    for (int test=1; test<=T; test++) {
        printf("Case #%d: ", test);
        scanf("%d%d", &m,&n);
        char t[m][n+1];
        for (int i=0; i<m; i++) {
            scanf("%s", t[i]);
            for (int j=0; j<n; j++) {
                if (t[i][j] == 'S') start = make_pair(i, j);
                if (t[i][j] == 'G') goal = make_pair(i, j);
            }
        }
        char lab[4][m][n+1];
        bool vis[4][m][n+1];
        for (int rot=0; rot<4; rot++) {
            for (int i=0; i<m; i++) {
                for (int j=0; j<n; j++) {
                    vis[rot][i][j] = false;
                    lab[rot][i][j] = t[i][j];
                }
            }
            for (int i=0; i<m; i++) {
                for (int j=0; j<n; j++) {
                    if (!is_laser(t[i][j])) continue;
                    lab[rot][i][j] = rotate_laser(t[i][j], rot);
                    pair<int, int> dir = get_dir(lab[rot][i][j]);
                    int x = i, y = j;
                    while (t[x][y] != '#' && correct_pos(x, y)) {
                        lab[rot][x][y] = '#';
                        x += dir.first;
                        y += dir.second;
                    }
                }
            }
        }
        int res = -1, steps = 1;
        vector< tuple<int,int,int> > q, nq;
        q.push_back(make_tuple(start.first, start.second, 0));
        vis[0][start.first][start.second] = true;
        while (!q.empty()) {
            nq.clear();
            for (auto e: q) {
                int x, y, rot;
                tie(x, y, rot) = e;
                for (auto dir: dirs) {
                    int nx = x + dir.first;
                    int ny = y + dir.second;
                    int nrot = (rot + 1) % 4;
                    if (correct_pos(nx, ny) && lab[nrot][nx][ny] != '#' && !vis[nrot][nx][ny]) {
                        if (nx == goal.first && ny == goal.second) {
                            res = steps;
                            break;
                        }
                        nq.push_back(tie(nx, ny, nrot));
                        vis[nrot][nx][ny] = true;
                    }
                }
                if (res != -1) break;
            }
            if (res != -1) break;
            q.swap(nq);
            steps++;
        }
        if (res == -1)
            printf("impossible\n");
        else
            printf("%d\n", res);
    }
    return 0;
}

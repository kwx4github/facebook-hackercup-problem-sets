import java.util.*;
import java.io.*;

public class LaserMaze
{
	public static void main(String[] klein)
	{
		final Kattio in = new Kattio(System.in);
		final PrintWriter out = new PrintWriter(System.out);

		final int T = in.getInt();
		loop:for(int t = 1; t<=T; t++)
		{
			final int n = in.getInt(), m = in.getInt();
			final int[][] g = new int[n+2][m+2];
			for(int i = 0; i<m+2; i++) g[0][i] = g[n+1][i] = 31;
			for(int i = 0; i<n+2; i++) g[i][0] = g[i][m+1] = 31;
			for(int i = 0; i<n; i++)
			{
				final char[] v = in.getWord().toCharArray();
				for(int j = 0; j<m; j++)
				{
					g[i+1][j+1] = v[j]=='.' ? 0 : v[j]=='S' ? 128 : v[j]=='G' ? 256 : v[j];
				}
			}
			for(int i = 1; i<=n; i++)
				for(int j = 1; j<=m; j++)
				{
					int dy = 0, dx = 0;
					if(g[i][j]=='>') dx = 1;
					else if(g[i][j]=='<') dx = -1;
					else if(g[i][j]=='^') dy = -1;
					else if(g[i][j]=='v') dy = 1;

					if(dy+dx!=0)
					for(int a = 0, tmp; a<4; a++, tmp = -dy, dy = dx, dx = tmp)
						for(int y = i+dy, x = j+dx; g[y][x]<30 || g[y][x]>127; y+=dy, x+=dx)
							g[y][x] |= 1<<a;
				}
			for(int i = 1; i<=n; i++)
				for(int j = 1; j<=m; j++)
					if(g[i][j]>29 && g[i][j]<128) g[i][j] = 31;

			final int[][][] vis = new int[n+2][m+2][4];
			for(int i = 0; i<=n+1; i++)
				for(int j = 0; j<=m+1; j++)
					for(int k = 0; k<4; k++)
						vis[i][j][k] = (g[i][j]&1<<k)!=0 ? -1 : 1<<20;

			final int[] qu = new int[n*m*4*3];
			for(int i = 1; i<=n; i++)
				for(int j = 1; j<=m; j++)
					if((g[i][j]&128)>0){ qu[0] = i; qu[1] = j; }
			for(int i = 0, back = 3; i<back; )
			{
				final int y = qu[i++], x = qu[i++], z = qu[i++]+1;
				if((g[y][x]&256)>0){ out.println("Case #"+t+": " + (z-1)); continue loop; }

				if(z<vis[y+1][x][z&3]){ vis[y+1][x][z&3] = z; qu[back++] = y+1; qu[back++] = x; qu[back++] = z; }
				if(z<vis[y-1][x][z&3]){ vis[y-1][x][z&3] = z; qu[back++] = y-1; qu[back++] = x; qu[back++] = z; }
				if(z<vis[y][x+1][z&3]){ vis[y][x+1][z&3] = z; qu[back++] = y; qu[back++] = x+1; qu[back++] = z; }
				if(z<vis[y][x-1][z&3]){ vis[y][x-1][z&3] = z; qu[back++] = y; qu[back++] = x-1; qu[back++] = z; }
			}

			out.println("Case #"+t+": impossible"); //System.err.println(System.currentTimeMillis()-tid);
		}

		out.flush();
	}

	private static class Kattio
	{
		public Kattio(final InputStream i)
		{
			r = new BufferedReader(new InputStreamReader(i));
		}

		public boolean hasMoreTokens() {
			return peekToken() != null;
		}

		public int getInt() {
			return Integer.parseInt(nextToken());
		}

		public double getDouble() {
			return Double.parseDouble(nextToken());
		}

		public float getFloat()
		{
			return Float.parseFloat(nextToken());
		}

		public long getLong() {
			return Long.parseLong(nextToken());
		}

		public String getWord() {
			return nextToken();
		}



		private BufferedReader r;
		private String line;
		private StringTokenizer st;
		private String token;

		private String peekToken() {
		if (token == null)
			try {
			while (st == null || !st.hasMoreTokens()) {
				line = r.readLine();
				if (line == null) return null;
				st = new StringTokenizer(line);
			}
			token = st.nextToken();
			} catch (IOException e) { }
		return token;
		}

		private String nextToken() {
		String ans = peekToken();
		token = null;
		return ans;
		}
	}
}

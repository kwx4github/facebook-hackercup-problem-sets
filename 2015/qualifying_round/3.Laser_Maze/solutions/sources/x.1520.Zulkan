#include <bits/stdc++.h>
using namespace std;

char conv[256];
vector<string> mapWaktu[4];

int getInt() {
    int a;
    scanf("%d", &a);
    return a;
}
struct data {
    int wkt, x,y;
    data() {}
    data(int a, int b,int c) {
        wkt =a;
        x= b;
        y= c;
    }
};
void dfs(vector<string> &a,int x, int y, int i, int j) {
    if(i< 0 || j < 0 || i == (int)a.size() || j == (int)a[0].length()) return;
    if(a[i][j] != '.') return;
    a[i][j] = 'x';
    dfs(a, x,y,i+x,j+y);
}
void rbh(vector<string> &a) {
    for(int i =0 ; i < (int) a.size(); i++) {
        for(int j =0 ; j < (int) a[0].length(); j++) {
            a[i][j] = conv[(int)a[i][j]];
        }
    }
}
bool sdh[4][101][101];

data Q[1000*1000];
int main() {

    for(int i =0 ; i < 256; i++) {
        conv[i] = i;
    }

    conv['^'] = '>';
    conv['>'] = 'v';
    conv['v'] = '<';
    conv['<'] = '^';

    int tc = getInt();
    int a = 1;
    while(tc--) {
        memset(sdh,0,sizeof(sdh));
        int n = getInt(), m = getInt();

        vector<string> ori_map;
        for(int i =0 ; i < n; i++) {
            string temp;
            cin >> temp;
            ori_map.push_back(temp);
        }
        vector<string> nonOri;
        pair<int,int> start, goal;
        for(int i =0 ; i < n; i++) {
            string temp = "";
            for(int j =0 ; j < m; j++) {
                char v = ori_map[i][j];
                if(v == 'S') {
                    start = make_pair(i,j);
                }
                if( v== 'G') {
                    goal = make_pair(i,j);
                }
                if(ori_map[i][j]== 'S' || ori_map[i][j] =='G') {
                    v = '.';
                }
                temp+=v;
            }
            nonOri.push_back(temp);
        }

        for(int i =0 ; i < 4; i++) {
            vector<string> hihi = nonOri;

            for(int j =0 ; j < n; j++) {
                for(int k =0; k<m; k++) {
                    char c = hihi[j][k];
                    if(c == '^') {
                        dfs(hihi, -1,0,j-1,k);
                    }
                    if(c == '>') {
                        dfs(hihi, 0,1,j,k+1);
                    }
                    if(c == 'v') {
                        dfs(hihi, 1,0,j+1,k);
                    }
                    if(c == '<') {
                        dfs(hihi, 0,-1,j,k-1);
                    }
                }
            }
            mapWaktu[i] = hihi;

            rbh(nonOri);
        }
        Q[0] = data(0,start.first,start.second);
        int c = 0, sz = 1;
        int ou = 0;

        while(c < sz) {
            data temp = Q[c++];

            int t = temp.wkt, x = temp.x, y = temp.y;

            for(int i = -1; i<=1; i++) {
                for(int j =-1; j<=1; j++) {
                    if( i==0 && j ==0) continue;
                    if( (i == 0|| j ==0) && i+x>=0 && i+x<n && y+j>=0 && y+j<m) {
                        if(mapWaktu[(t+1)%4][x+i][y+j] == '.' && !sdh[(t+1)%4][x+i][y+j]) {
                            sdh[(t+1)%4][x+i][y+j] = true;
                            if(x+i == goal.first && y+j == goal.second && ou == 0) {
                                ou = t+1;
                            }
                            Q[sz++] = data(t+1,x+i,y+j);
                        }
                    }
                }
            }

        }


        cout << "Case #" << a++ << ": ";
        if(ou) {
            cout << ou << '\n';
        } else {
            cout << "impossible\n";
        }







    }


}
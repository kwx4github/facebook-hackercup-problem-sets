#include <functional>
#include <algorithm>
#include <iostream>
#include <climits>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <numeric>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>

using namespace std;

typedef long long        LL;
typedef pair<int, int>   pii;
typedef pair<int, pii>   piii;
typedef vector<int>      vi;
typedef vector<pii>      vii;
typedef vector<piii>     viii;

#ifdef _WIN32
#define getchar_unlocked getchar
#endif
inline void inpint( int &n ) {
  n=0; register int ch = getchar_unlocked(); bool sign = 0;
  while(ch < 48 || ch > 57) { if(ch == '-') sign = 1; ch = getchar_unlocked(); }
  while(ch >= 48 && ch <= 57) { n = (n << 3) + (n << 1) + ch - 48, ch = getchar_unlocked(); }
  if(sign) n = -n;
}

inline int sqr(int x){return x * x;}
inline int cube(int x){return x * x * x;}
inline LL sqrLL(LL x){return x * x;}
inline LL cubeLL(LL x){return x * x * x;}

const LL LLINF      = 9223372036854775807LL;
const LL LLINF17    = 100000000000000000LL;
const int INF       = 2147483647;
const int INF9      = 1000000000;
const int MOD       = 1000000007;
const double eps    = 1e-7;
const double PI     = acos(-1.0);

#define FOR(a,b,c)   for (int (a)=(b); (a)<(c); (a)++)
#define FORN(a,b,c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a,b,c)  for (int (a)=(b); (a)>=(c); (a)--)
#define REP(i,n)     FOR(i,0,n)
#define REPN(i,n)    FORN(i,1,n)
#define REPD(i,n)    FORD(i,n,1)

#define RESET(a,b)   memset(a,b,sizeof(a)) 
#define SYNC         ios_base::sync_with_stdio(0);
#define SIZE(a)      (int)(a.size())
#define MIN(a,b)     (a) = min((a),(b))
#define MAX(a,b)     (a) = max((a),(b))
#define ALL(a)       a.begin(),a.end()
#define RALL(a)      a.rbegin(),a.rend()
#define SIZE(a)      (int)(a.size())
#define LEN(a)       (int)(a.length())

#define fi           first
#define se           second
#define pb           push_back
#define mp           make_pair

int dr[] = {-1, 0, 1, 0}; //up, right, down, left
int dc[] = {0, 1, 0, -1};
int t, n, m, sx, sy, ex, ey;
char arr[105][105];
bool blocked[4][105][105];
bool memo[4][105][105];
int getDir(char ch){
	if(ch == '^') return 0;
	if(ch == '>') return 1;
	if(ch == 'v') return 2;
	return 3;
}
inline bool valid(int x, int y){
	return (x >= 1 && x <= n && y >= 1 && y <= m && (arr[x][y] == '.' || arr[x][y] == 'S' || arr[x][y] == 'G'));
}
inline int bfs(){
	queue<piii> q; piii p;
	q.push(mp(0, mp(sx, sy)));

	memo[0][sx][sy] = 1;
	
	while(!q.empty()){
		p = q.front(); q.pop();

		if(p.se.fi == ex && p.se.se == ey) return p.fi;

		REP(i,4){
			int px = p.se.fi + dr[i], py = p.se.se + dc[i];

			if(valid(px, py) && !blocked[(p.fi+1)%4][px][py] && !memo[(p.fi+1)%4][px][py]){
				q.push(mp(p.fi + 1, mp(px, py)));
				memo[(p.fi+1)%4][px][py] = 1;
			}
		}
	}

	return -1;
}
int main(){
	cin >> t;
	REPN(tc,t){
		cin >> n >> m;
		REPN(i,n){
			REPN(j,m){
				cin >> arr[i][j];
				if(arr[i][j] == 'S') sx = i, sy = j;
				else if(arr[i][j] == 'G') ex = i, ey = j;
			}
		}

		RESET(memo,0);
		RESET(blocked,0);

		REP(k,4){
			REPN(i,n){
				REPN(j,m){
					if(arr[i][j] == '^' || arr[i][j] == '>' || arr[i][j] == 'v' || arr[i][j] == '<'){
						int dir = (getDir(arr[i][j]) + k) % 4;
						int x = i + dr[dir], y = j + dc[dir];
						while(valid(x, y)){
							blocked[k][x][y] = 1;
							x += dr[dir];
							y += dc[dir];
						}
					}
				}
			}
		}

		int ret = bfs();
		printf("Case %d: ",tc);
		if(ret == -1) puts("impossible");
		else printf("%d\n",ret);
	}

	return 0;
}
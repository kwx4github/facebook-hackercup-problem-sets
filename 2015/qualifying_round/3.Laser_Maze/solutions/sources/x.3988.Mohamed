#include <bits/stdc++.h>

using namespace std;


int m, n, lvl;
string arr[101], str = "<v>^";
int vis[101][101][4];
int di[] = {0,  0, 1, -1};
int dj[] = {1, -1, 0,  0};

struct Node {
	int i, j, k, c;
	bool operator<(const Node& n) const {
		return c > n.c;
	}
};

bool valid(int ii, int jj, int k) {
	int idx;
	for(int i = ii - 1; i >= 0; --i) {
		if(arr[i][jj] == '#') break;
		idx = (int)str.find(arr[i][jj]);
		if(idx != -1) {
			if(str[(idx + k) % 4] == 'v')
				return false;
			break;
		}
	}
	for(int i = ii + 1; i < m; ++i) {
		if(arr[i][jj] == '#') break;
		idx = (int)str.find(arr[i][jj]);
		if(idx != -1) {
			if(str[(idx + k) % 4] == '^')
				return false;
			break;
		}
	}

	for(int i = jj - 1; i >= 0; --i) {
		if(arr[ii][i] == '#') break;
		idx = (int)str.find(arr[ii][i]);
		if(idx != -1) {
			if(str[(idx + k) % 4] == '>')
				return false;
			break;
		}
	}
	for(int i = jj + 1; i < n; ++i) {
		if(arr[ii][i] == '#') break;
		idx = (int)str.find(arr[ii][i]);
		if(idx != -1) {
			if(str[(idx + k) % 4] == '<')
				return false;
			break;
		}
	}

	return true;
}

int dijkstra() {
	priority_queue<Node> Q;
	Node nNode, tmp;
	int ii, jj;
	for(int i = 0, j; i < m; ++i) {
		j = (int)arr[i].find('S');
		if(j != -1) {
			ii = i, jj = j;
			tmp.i = i, tmp.j = j, tmp.k = 0, tmp.c = 0;
			Q.push(tmp);
			break;
		}
	}

	while(Q.size()) {
		tmp = Q.top(), Q.pop();
		if(arr[tmp.i][tmp.j] == 'G') return tmp.c;
		if(vis[tmp.i][tmp.j][tmp.k] == lvl) continue;
		vis[tmp.i][tmp.j][tmp.k] = lvl;
		for(int i = 0; i < 4; ++i) {
			nNode.i = tmp.i + di[i];
			nNode.j = tmp.j + dj[i];
			nNode.k = (tmp.k + 1) % 4;
			nNode.c = tmp.c;
			++nNode.c;
			if(nNode.i < 0 || nNode.j < 0 || nNode.i >= m || nNode.j >= n) continue;
			if(arr[nNode.i][nNode.j] == '#') continue;
			if(valid(nNode.i, nNode.j, nNode.k)) Q.push(nNode);
			else nNode.i = ii, nNode.j = jj, Q.push(nNode);
		}
	}

	return -1;
}

int main() {
#ifndef ONlNE_JUDGE
//	freopen("input.in", "rt", stdin);
	freopen("input.txt", "rt", stdin);
#endif
	freopen("output.txt", "wt", stdout);
	memset(vis, 0, sizeof vis);
	int t, res;
	cin >> t;
	for(int i = 1; i <= t; ++i) {
		cin >> m >> n;
		lvl = i;
		for(int j = 0; j < m; ++j)
			cin >> arr[j];
		printf("Case #%d: ", i);
		res = dijkstra();
		if(res == -1) cout << "impossible\n";
		else cout << res << endl;
	}

	return 0;
}

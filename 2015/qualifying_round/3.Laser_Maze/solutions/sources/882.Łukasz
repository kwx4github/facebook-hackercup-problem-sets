#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <cassert>
#include <cstring>
#include <sstream>
#include <ext/numeric>
using namespace std ;
using namespace __gnu_cxx ;
typedef long long LL ;
typedef pair<int,int> PII ;
typedef vector<int> VI ;
const int INF = 1000*1000*1000 ;
const LL INFLL = (LL)INF * (LL)INF ;
#define REP(i,n) for(i=0;i<(n);++i)
#define ALL(c) c.begin(),c.end()
#define VAR(v,i) __typeof(i) v=(i)
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define CLEAR(t) memset(t,0,sizeof(t))
#define PB push_back
#define MP make_pair
#define FI first
#define SE second

const int MAXN=110 ;

int n,m ;
char maze[MAXN][MAXN] ;
bool blocked[4][MAXN][MAXN] ;

const char  dir[4] = { '^', '>', 'v', '<' } ;
const int add_x[4] = { -1, 0, 1, 0 } ;
const int add_y[4] = { 0, 1, 0, -1 } ;

int index(char c) {
	for(int i=0 ; i<4 ; i++)
		if(dir[i]==c) return i ;
	return -1 ;
}
bool inRange(int i, int j) {
	return i>=0 && i<n && j>=0 && j<m ;
}
bool isEmpty(int i, int j) {
	return maze[i][j]=='.' || maze[i][j]=='S' || maze[i][j]=='G' ;
}
PII where(char c) {
	int i, j ;
	REP(i,n)
		REP(j,m)
			if(maze[i][j]==c)
				return MP(i,j) ;
	assert(false) ;
}

int d[4][MAXN][MAXN] ;

void relax(queue<pair<int,PII> > &Q,  int dir, int x, int y,  int val) {
	//cout << "probuje " << dir << " " << x << " " << y << " -> " << val << endl ;
	if(inRange(x,y) && isEmpty(x,y) && d[dir][x][y]==INF && !blocked[dir][x][y]) {
		d[dir][x][y]=val ;
		Q.push(MP(dir,MP(x,y))) ;
	//	cout << dir << " " << x << " " << y << " -> " << val << endl ;
	}
}

void _main() {
	cin >> n >> m ;
	int i, j, k ;
	REP(i,n) cin >> maze[i] ;
	/*REP(i,n) {
		REP(j,m) cout << maze[i][j] ;
		cout << endl ;
	}*/
	CLEAR(blocked) ;
	REP(k,4)
		REP(i,n)
			REP(j,m) d[k][i][j] = INF ;
	
	REP(i,n)
		REP(j,m) {
			if(index(maze[i][j])!=-1) {
				int start=index(maze[i][j]) ;
				for(int move=0 ; move<4 ; move++) {
					int x=i, y=j ;
					do {
						blocked[move][x][y] = true ;
						//cout << "zablokowano " << move << " " << x << " " << y << endl ;
						x += add_x[(start+move)&3] ;
						y += add_y[(start+move)&3] ;
					}
					while(inRange(x,y) && isEmpty(x,y)) ;
				}
			}
		}
	
	PII S = where('S') ;
	PII T = where('G') ;
	queue<pair<int, PII> > Q ;
	d[0][S.FI][S.SE]=0 ;
	Q.push(MP(0,S)) ;
	while(!Q.empty()) {
		pair<int, PII> it = Q.front() ; Q.pop() ;
		int x = it.SE.FI ;
		int y = it.SE.SE ;
		relax(Q, (it.FI+1)&3, x+1, y, d[it.FI][x][y]+1) ;
		relax(Q, (it.FI+1)&3, x-1, y, d[it.FI][x][y]+1) ;
		relax(Q, (it.FI+1)&3, x, y-1, d[it.FI][x][y]+1) ;
		relax(Q, (it.FI+1)&3, x, y+1, d[it.FI][x][y]+1) ;
	}
	int ret=INF ;
	REP(i,4)
		ret = min(ret, d[i][T.FI][T.SE]) ;
	if(ret==INF) cout << "impossible" << endl ;
	else cout << ret << endl ;
}

int main()
{
	ios_base::sync_with_stdio(0) ;
	int __tests ;
	cin >> __tests ;
	for(int test=1 ; test<=__tests ; test++) {
		cout << "Case #" << test << ": " ;
		_main() ;
		//return 0 ;
	}
}



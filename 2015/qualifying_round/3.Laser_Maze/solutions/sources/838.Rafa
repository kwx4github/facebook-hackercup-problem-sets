#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <sstream>

#define INF 0x3f3f3f3f
#define NINF -0x3f3f3f3f

using namespace std;

typedef pair<int,int> pii;

int dirX[4] = { 0, 1, 0, -1 };
int dirY[4] = { 1, 0, -1, 0 };
char pos[5] = ">v<^";

char board[4][105][105];
int dist[4][105][105];

void bfs (int start, int end, int n, int m)
{
	memset(dist,INF,sizeof dist);
	
	queue<int> q;
	
	dist[0][start/m][start%m] = 0;
	
	q.push(start);
	q.push(0);
	
	while (!q.empty())
	{
		int pp = q.front(); q.pop();
		int t = q.front(); q.pop();
		
		int x = pp/m;
		int y = pp%m;
		
		if (pp == end)
		{
			printf("%d\n",dist[t][x][y]);
			return;
		}
			
		for (int i = 0; i < 4; ++i)
		{
			int dx = x + dirX[i];
			int dy = y + dirY[i];
			int dt = (t+1)%4;
			
			if (dx >= 0 && dx < n && dy >= 0 && dy < m && dist[dt][dx][dy] > dist[t][x][y]+1)
			{
				switch(board[dt][dx][dy])
				{
				case '.':
				case 'S':
				case 'G':
				
					dist[dt][dx][dy] = dist[t][x][y] + 1;
					q.push(dx*m+dy);
					q.push(dt);
					break;
				default:
					break;
				}
			}
		}
	}
	
	printf("impossible\n");
}

int main (int argc, char const* argv[])
{
	int T;
	scanf("%d",&T);
	
	for (int t = 1; t <= T; t += 1)
	{
		int n,m;
		scanf("%d %d",&n,&m);
		
		int start = 0;
		int end = 0;
		vector<pair<int,int> > turrets;
		for (int i = 0; i < n; i += 1)
		{
			scanf("%s",board[0][i]);
			
			for (int j = 0; j < m; ++j)
			{
				for (int k = 1; k < 4; k += 1)
				{
					board[k][i][j] = board[0][i][j];
				}
				
				switch(board[0][i][j])
				{
				case '^':
				case '>':
				case '<':
				case 'v':
					turrets.push_back(make_pair(i,j));
					break;
				case 'S':
					start = i*m+j;
					break;
				case 'G':
					end = i*m+j;
					break;
				default:
					break;
				}	
			}
		}
		
		for ( auto &turret : turrets)
		{
			int dir = 0;
			int x = turret.first;
			int y = turret.second;
			
			switch(board[0][x][y])
			{
			case '>':
				dir = 0;
				break;
			case 'v':
				dir = 1;
				break;
			case '<':
				dir = 2;
				break;
			case '^':
				dir = 3;
				break;
			}
		
			for (int i = 0; i < 4; ++i)
			{
				int curDir = (dir+i)%4;
				
				int curX = x+dirX[curDir];
				int curY = y+dirY[curDir];
				board[i][x][y] = pos[curDir];
				
				while (curX >= 0 && curX < n && curY >= 0 && curY < m)
				{
					bool isWall = true;
					switch (board[i][curX][curY])
					{
					case '.':
					case 'S':
					case 'G':
					case 'L':
						isWall = false;
						break;
					}

					if (isWall) break;
					
					board[i][curX][curY] = 'L';
										
					curX += dirX[curDir];
					curY += dirY[curDir];
				}
			}
		}
		
		/*for (int k = 0; k < 4; ++k)
		{
			for (int i = 0; i < n; ++i)
			{
				for (int j = 0; j < m; ++j)
					printf("%c",board[k][i][j]);
				printf("\n");
			}
			printf("\n");
		}*/
		
		printf("Case %d: ",t);
		
		bfs(start,end,n,m);
	}
	
	return 0;
}

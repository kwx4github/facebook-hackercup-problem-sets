#include <fstream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <queue>

using namespace std;

enum Direction {
	NORTH, EAST, SOUTH, WEST
};

struct Tile {
	bool isSolid;
	bool isGoal;
	bool isTurret;
	bool isWall;
	bool visited;
	Direction dir;
	int x, y, mapIndex;
	Tile* parent;
};

int main() {
	ifstream inputFile("input.txt");
	ofstream outputFile("output.txt");

	assert(inputFile);
	assert(outputFile);

	int numTestCases;
	inputFile >> numTestCases;

	for (int i = 0; i < numTestCases; i++) {
		int numCols, numRows;
		inputFile >> numCols >> numRows;

		Tile ***tiles = (Tile***)malloc(sizeof(Tile) * 4 * numCols * numRows);
		assert(tiles);

		int startX, startY;

		for (int i = 0; i < numCols; i++) {
			for (int j = 0; j < numRows; j++) {
				char ch;
				inputFile >> ch;

				Tile *tile = (Tile*)(tiles) + i * numRows + j;
				tile->x = j;
				tile->y = i;
				tile->visited = false;

				switch (ch) {
				case '.':
					tile->isSolid = tile->isGoal = tile->isTurret = tile -> isWall = false;
					break;
				case '#':
					tile->isSolid = tile->isWall = true;
					tile->isGoal = tile->isTurret = false;
					break;
				case 'S':
					startX = j;
					startY = i;
					tile->isSolid = tile->isGoal = tile->isTurret = tile->isWall = false;
					break;
				case 'G':
					tile->isSolid = tile->isTurret = tile->isWall = false;
					tile->isGoal = true;
					break;
				case 'V':
					tile->isSolid = tile->isTurret = true;
					tile->isGoal = tile->isWall = false;
					tile->dir = SOUTH;
					break;
				case '<':
					tile->isSolid = tile->isTurret = true;
					tile->isGoal = tile->isWall = false;
					tile->dir = WEST;
					break;
				case '>':
					tile->isSolid = tile->isTurret = true;
					tile->isGoal = tile->isWall = false;
					tile->dir = EAST;
					break;
				case '^':
					tile->isSolid = tile->isTurret = true;
					tile->isGoal = tile->isWall = false;
					tile->dir = NORTH;
					break;
				}
			}
		}

		for (int i = 1; i < 4; i++) {
			void *dest = (Tile*)(tiles)+numRows * numCols * i;
			memcpy(dest, tiles, numRows * numCols * sizeof(Tile));
		}

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < numCols; j++) {
				for (int k = 0; k < numRows; k++) {
					Tile *tile = (Tile*)(tiles) + numRows * numCols * i + numRows * j + k;
					tile->mapIndex = i;

					if (tile->isTurret) {
						tile->dir = (Direction)((int)((tile->dir) + i) % 4);

						int xOffset = 0, yOffset = 0;
						if (tile->dir == NORTH) yOffset = -1;
						else if (tile->dir == SOUTH) yOffset = 1;
						else if (tile->dir == EAST) xOffset = 1;
						else if (tile->dir == WEST) xOffset = -1;

						int y = j, x = k;

						while (true) {
							x += xOffset;
							y += yOffset;

							if (x < 0 || x >= numRows || y < 0 || y >= numCols) break;
							Tile *laser = (Tile*)(tiles) + numRows * numCols * i + numRows * y + x;

							if (laser->isTurret || laser->isWall) break;
							laser->isSolid = true;
						}
					}
				}
			}
		}

		queue<Tile*> open;
		Tile* start = (Tile*)(tiles)+numRows * startY + startX;
		open.push(start);
		start->visited = true;
		start->parent = NULL;

		Tile* goal = NULL;

		while (!open.empty()) {
			Tile *current = open.front();
			open.pop();

			if (current->isGoal) {
				goal = current;
				break;
			}

			int nextMapIndex = (current->mapIndex + 1) % 4;
			
			for (int i = 0; i < 4; i++) {
				int xOffset = 0, yOffset = 0;
				if (i == 0) xOffset = 1;
				else if (i == 1) xOffset = -1;
				else if (i == 2) yOffset = 1;
				else yOffset = -1;

				int newX = current->x + xOffset;
				int newY = current->y + yOffset;

				if (newX < 0 || newY < 0 || newX >= numRows || newY >= numCols) continue;
				
				Tile *next = ((Tile*)tiles) + numRows * numCols * nextMapIndex + newY * numRows + newX;
				if (!next->isSolid && !next->visited) {
					next->visited = true;
					next->parent = current;
					open.push(next);
				}
			}
		}
	

		if (goal == NULL) {
			outputFile << "Case #" << (i + 1) << ": impossible\n";
		}
		else {
			int numMoves = -1; //The start tile shouldn't count as a move

			Tile *t = goal;

			while (t) {
				++numMoves;
				t = t->parent;
			}

			outputFile << "Case #" << (i + 1) << ": " << numMoves << "\n";
		}	

		//No need to free tiles
	}

	inputFile.close();
	outputFile.close();
}
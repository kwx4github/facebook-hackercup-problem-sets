#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <queue>

using namespace std;
int nbLig, nbCol;
int departX, departY, arriveX, arriveY;
const int dirs[4][2] = { {-1,0}, {0,-1}, {1, 0}, {0, 1} };
int caseRelou[120][120];
char graphe[120][120];

bool notObs(int py, int px)
{
	if(py < 0 || px < 0 || px >= nbCol || py >= nbLig)
		return false;
	if(graphe[py][px]!='.')
		return false;
	return true;
}

struct Noeud
{
	int px, py, dist, temps;
};

int vu[120][120][4];

void doIt()
{
	queue<Noeud> file;
	
	Noeud depart;
	depart.px = departX;
	depart.py = departY;
	depart.temps = 0;
	depart.dist=0;
	
	file.push(depart);
	vu[depart.py][depart.px][0]=1;
	
	while(!file.empty())
	{
		Noeud noeud = file.front();
		file.pop();
		
		if(noeud.px == arriveX && noeud.py==arriveY)
		{
			printf("%d\n", noeud.dist);
			return;
		}
		
		for(int i = 0; i < 4; i++)
		{
			Noeud voisin;
			voisin.px = noeud.px + dirs[i][0];
			voisin.py = noeud.py + dirs[i][1];
			voisin.dist = noeud.dist+1;
			voisin.temps=(noeud.temps+1)%4;
			
			//if(voisin.px==2 && voisin.temps == 2) printf("ouais mec");
			if(!notObs(voisin.py, voisin.px) || (caseRelou[voisin.py][voisin.px] & (1<<voisin.temps)) || vu[voisin.py][voisin.px][voisin.temps])
				continue;
			file.push(voisin);
			vu[voisin.py][voisin.px][voisin.temps]=1;
			//printf("infinite\n");
		}
	}
	
	printf("Impossible\n");
}

int main()
{
	int T;
	scanf("%d", &T);
	
	for(int t = 1; t<= T; t++)
	{
		scanf("%d%d", &nbLig, &nbCol);
		
		for(int i = 0; i < nbLig; i++)
		{
			scanf("%s", graphe[i]);
			
			for(int j = 0; j < nbCol; j++)
			{
				if(graphe[i][j]=='S')
				{
					departX=j,departY=i;
					graphe[i][j]='.';
				}
				if(graphe[i][j]=='G')
				{
					arriveX=j,arriveY=i;
					graphe[i][j]='.';
				}
				caseRelou[i][j]=0;
				
				for(int k = 0; k < 4; k++)
					vu[i][j][k]=0;
			}
		}
		
		for(int i = 0; i < nbLig; i++)
		{
			for(int j = 0; j < nbCol; j++)
			{
				int relou=-1;
				switch(graphe[i][j])
				{
					case '<':
						relou=0;
					break;
					
					case '>':
						relou=2;
					break;
					
					case '^':
						relou=3;
					break;
					
					case 'v':
						relou=1;
					break;
					
					default:;
				}
				if(relou==-1)continue;
				
				for(int k = 0; k < 4; k++)
				{
					//int nb=1;
					int px = j+dirs[k][0];//*nb;
					int py = i+dirs[k][1];//*nb;
					while(notObs(py,px))
					{
						caseRelou[py][px]|=(1<<relou);
						//nb++;
						px+=dirs[k][0];
						py+=dirs[k][1];
					}
					relou=(relou+1)%4;
				}
			}
		}
	
		printf("Case #%d: ", t);
		
		doIt();
	}
	
	return 0;
}

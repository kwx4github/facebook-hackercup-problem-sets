#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>

#include <time.h>
#pragma comment(linker, "/STACK:20000000")

#define fr(i,a,b) for(int i=(int)(a);i<=(int)(b);i++)
#define fd(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)
#define mp make_pair
#define pb push_back
#define ll long long

using namespace std;

int ri(){int x;scanf("%d",&x);return x;}
ll rll(){ll x;scanf("%lld",&x);return x;}

char s[105][105];

int dp[105][105][4];
bool can[105][105][4];

int dx[] = {0,-1,0,1,0,-1,0,1};
int dy[] = {-1,0,1,0,-1,0,1,0};

string rotat = "<^>v<^>v";

void solve()
{
	int test = ri();
	fr(number,1,test)
	{
		int n = ri(),m = ri();
		fr(i,1,n)
			scanf("%s",s[i] + 1);
		memset(can,0,sizeof(can));
		fr(t,0,3)
		{
			fr(i,1,n)
			fr(j,1,m)
			{
				if (s[i][j] == '^' || s[i][j] == '<' || s[i][j] == '>' || s[i][j] == 'v')
				{		
					int pos = 0;
					for(;s[i][j] != rotat[pos];pos++);
					pos += t;
					char c = s[i][j];
					s[i][j] = '.';
					for(int x = i,y = j;x >= 1 && x <= n && y >= 1 && y <= m && s[x][y] != '#'; 
						x += dx[pos],y += dy[pos])
					{
						bool ok = true;
						for(int q = 0;q < 4;q++)
							if (s[x][y] == rotat[q])
								ok = false;
						if (!ok)
							break;
						can[x][y][t] = true;
					}
					s[i][j] = c;
				}
				if (s[i][j] == '#')
					can[i][j][t] = true;
			}
		}

		memset(dp,-1,sizeof(dp));
		queue<pair<pair<int,int>,int> > st;
		pair<int,int> need;
		fr(i,1,n)
			fr(j,1,m)
				if (s[i][j] == 'S')
				{
					dp[i][j][0] = 0;
					st.push(mp(mp(i,j),0));
				}
				else
				if (s[i][j] == 'G')
					need = mp(i,j);
		
		while(!st.empty())
		{
			int x = st.front().first.first;
			int y = st.front().first.second;
			int rot = st.front().second;
			int value = dp[x][y][rot];
			int nxt = (rot + 1) % 4;
			st.pop();
			for(int i = 0;i < 4;i++)
			{
				int xx = x + dx[i],yy = y + dy[i];
				if (xx >= 1 && xx <= n && yy >= 1 && yy <= m && !can[xx][yy][nxt] && dp[xx][yy][nxt] == -1)
				{
					dp[xx][yy][nxt] = value + 1;
					st.push(mp(mp(xx,yy),nxt));
				}
			}
		}

		int res = 2e9;
		fr(t,0,3)
			if (dp[need.first][need.second][t] != -1)
				res = min(res,dp[need.first][need.second][t]);

		cout << "Case #" << number << ": ";
		if (res != 2e9)
			cout << res;
		else
			cout << "impossible";
		cout << endl;
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("C:/Users/CleRIC/Desktop/Универ/acm.timus.ru/input.txt","rt",stdin);
		freopen("C:/Users/CleRIC/Desktop/Универ/acm.timus.ru/output.txt","wt",stdout);
	#else
		//freopen("input.in","rt",stdin);
		//freopen("output.out","wt",stdout);
	#endif

	solve();

	#ifndef ONLINE_JUDGE
		printf("\n\ntime-%.3lf",clock()*1e-3);
	#endif

	return 0;
}
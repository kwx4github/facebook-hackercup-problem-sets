#include <bits/stdc++.h>
using namespace std;

int t;
int n,m;
char c[105][105];
bool blocked[105][105][4];
int dist[105][105][4];
int sx, sy;
int gx, gy;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

int typ(char c) {
  if (c == 'v') return 0;
  if (c == '>') return 1;
  if (c == '^') return 2;
  if (c == '<') return 3;
  return -1;
}

char getc() {
  char c = getchar();
  while (c == ' ' || c == '\t' || c == '\r' || c == '\n')
    c = getchar();
  return c;
}

void clear() {
  memset(blocked, 0, sizeof(blocked));
}
void readInput() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      c[i][j] = getc();
      if (c[i][j] == 'S') {
        c[i][j] = '.';
        sx = i;
        sy = j;
      } else if (c[i][j] == 'G') {
        c[i][j] = '.';
        gx = i;
        gy = j;
      }
    }
  }
}


bool valid(int x, int y) {
  return x >= 0 && y >= 0 && x < n && y < m;
}

void process(int x, int y) {
  if (c[x][y] != '.') {
    for (int i = 0; i < 4; i++) {
      blocked[x][y][i] = true;
    }
  }
  if (typ(c[x][y]) >= 0) {
    for (int i = 0; i < 4; i++) {
      int dir = (typ(c[x][y]) + i) % 4;
      int cur_x = x + dx[dir];
      int cur_y = y + dy[dir];
      while (valid(cur_x, cur_y) && c[cur_x][cur_y] == '.') {
        blocked[cur_x][cur_y][i] = true;
        cur_x += dx[dir];
        cur_y += dy[dir];
      }
    }
  }
}

void bfs(int x, int y) {
  queue<pair<pair<int,int>, int> >q;
  q.push(make_pair(make_pair(x, y), 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      for (int k = 0; k < 4; k++) {
        dist[i][j][k] = 1000000000;
      }
    }
  }
  dist[x][y][0] = 0;
  while (!q.empty()) {
    pair<pair<int,int>, int> now = q.front();
    q.pop();
    int nowx = now.first.first;
    int nowy = now.first.second;
    int type = now.second;
    int nextType = (type + 1) % 4;
    for (int i = 0; i < 4; i++) {
      int nextx = nowx + dx[i];
      int nexty = nowy + dy[i];
      if (valid(nextx, nexty) && !blocked[nextx][nexty][nextType]) {
        if (dist[nextx][nexty][nextType] > dist[nowx][nowy][type] + 1) {
          dist[nextx][nexty][nextType] = dist[nowx][nowy][type] + 1;
          q.push(make_pair(make_pair(nextx, nexty), nextType));
        }
      }
    }
  }
}

int main() {
  scanf("%d",&t);
  int cs = 0;
  while (t--) {
    clear();
    readInput();
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        process(i,j);
      }
    }
    bfs(sx, sy);
    printf("Case #%d: ", ++cs);
    int res = 1000000000;
    for (int i = 0; i < 4; i++) {
      if (dist[gx][gy][i] < res) {
        res = dist[gx][gy][i];
      }
    }
    if (res == 1000000000) {
      printf("Impossible\n");
    } else {
      printf("%d\n", res);
    }
  }
}

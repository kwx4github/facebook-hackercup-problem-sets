#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <map>
#include <queue>
using namespace std;

char mas[105][105];
bool usd[105][105][4];
map <char, char> mp[4];

struct thr 
{ int i, j, s;
thr(){}
thr(int i, int j, int s) :i(i), j(j), s(s) {}
};
queue<thr> q;
int n, m;
int st[4][2] = { 0, 1, 1, 0, 0, -1, -1, 0 };

bool good(char c)
{
	return c == '.' || c == 'S' || c == 'G';
}

bool check(int ii, int jj, int s)
{
	if (ii < 0 || ii >= m || jj < 0 || jj >= n)
		return false;
	if (!good(mas[ii][jj])) return false;
	int p = s % 4;
	for (int i = ii; i >= 0; --i)
	{
		if (mp[p].count(mas[i][jj]) && mp[p][mas[i][jj]] == 'v')
			return false;
		if (!good(mas[i][jj]))
			break;
	}
	for (int i = ii; i < m; ++i)
	{
		if (mp[p].count(mas[i][jj]) && mp[p][mas[i][jj]] == '^')
			return false;
		if (!good(mas[i][jj]))
			break;
	}
	for (int j = jj; j >= 0; --j)
	{
		if (mp[p].count(mas[ii][j]) && mp[p][mas[ii][j]] == '>')
			return false;
		if (!good(mas[ii][j]))
			break;
	}
	for (int j = jj; j < n; ++j)
	{
		if (mp[p].count(mas[ii][j]) && mp[p][mas[ii][j]] == '<')
			return false;
		if (!good(mas[ii][j]))
			break;
	}
	return true;
}

int main()
{
	//freopen("input.txt", "r", stdin);
	freopen("laser_maze.txt", "r", stdin);
	
	freopen("output.txt", "w", stdout);

	mp[0]['<'] = mp[1]['v'] = mp[2]['>'] = mp[3]['^'] = '<';
	mp[1]['<'] = mp[2]['v'] = mp[3]['>'] = mp[0]['^'] = '^';
	mp[2]['<'] = mp[3]['v'] = mp[0]['>'] = mp[1]['^'] = '>';
	mp[3]['<'] = mp[0]['v'] = mp[1]['>'] = mp[2]['^'] = 'v';

	int t;
	cin >> t;
	for (int tt = 0; tt < t; ++tt)
	{
		memset(usd, 0, sizeof(usd));
		int si, sj, ti, tj;
		cin >> m >> n;
		for (int i = 0; i < m; ++i)
		{
			scanf("%s", mas[i]);
			for (int j = 0; j < n; ++j)
			if (mas[i][j] == 'S')
				si = i, sj = j;
			else if (mas[i][j] == 'G')
				ti = i, tj = j;
		}
			
		q.push(thr(si, sj, 0));
		usd[si][sj][0] = 1;

		int dst = -1;
		while (!q.empty())
		{
			thr cur = q.front();
			q.pop();

			if (cur.i == ti && cur.j == tj)
			{
				dst = cur.s;
				while (!q.empty())
					q.pop();
				break;
			}

			for (int i = 0; i < 4; ++i)
			{
				thr nxt(cur.i + st[i][0], cur.j + st[i][1], cur.s + 1);
				if (!usd[nxt.i][nxt.j][nxt.s%4] && check(nxt.i, nxt.j, nxt.s))
				{
					q.push(nxt);
					usd[nxt.i][nxt.j][nxt.s % 4] = 1;
				}
			}
		}
		
		if (dst == -1)
			printf("Case #%d: %s\n", tt + 1, "impossible");
		else
			printf("Case #%d: %d\n", tt + 1, dst);
	}
	return 0;
}
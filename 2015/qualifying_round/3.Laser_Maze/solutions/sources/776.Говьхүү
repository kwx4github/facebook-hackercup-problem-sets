#include <iostream>
#include <cstring>
#include <string>
#include <queue>

using namespace std;

string board[4][105];
int moves[4][105][105];
int movex[4] = {0, -1, 0, 1};
int movey[4] = {-1, 0, 1, 0};
queue <pair <int, int> > Q;
char c[256][4];

char change(char cc, int t) {
  if(cc == '^' || cc == '>' || cc == 'v' || cc == '<') return c[cc][t];
  return cc;
}

bool isSafe(int x, int y, int n, int m) {
  return x >= 0 && x < n && y >= 0 && y < m;
}

int main() {
  c['>'][0] = '>', c['>'][1] = 'v', c['>'][2] = '<', c['>'][3] = '^';
  c['v'][0] = 'v', c['v'][1] = '<', c['v'][2] = '^', c['v'][3] = '>';
  c['<'][0] = '<', c['<'][1] = '^', c['<'][2] = '>', c['<'][3] = 'v';
  c['^'][0] = '^', c['^'][1] = '>', c['^'][2] = 'v', c['^'][3] = '<';
  int test, n, m, x, y, x1, y1, move, lvl;
  cin >> test;
  for(int Case = 1; Case <= test; Case++) {
    cin >> n >> m;
    for(int i = 0; i < n; i++) {
      cin >> board[0][i];
      board[1][i] = board[2][i] = board[3][i] = board[0][i];
      for(int j = 0; j < m; j++) {
	if(board[0][i][j] == 'S') {
	  x = i;
	  y = j;
	  board[0][i][j] = '.';
	}
	if(board[0][i][j] == 'G') {
	  x1 = i;
	  y1 = j;
	  board[0][i][j] = '.';
	}
	for(int l = 0; l < 4; l++)
	  board[l][i][j] = change(board[0][i][j], l);
      }
    }

    for(int l = 0; l < 4; l++)
      for(int i = 0; i < n; i++)
	for(int j = 0; j < m; j++) {
	  if(board[l][i][j] == 'v') {
	    int h = i + 1;
	    while(h < n && (board[l][h][j] == '.' || board[l][h][j] == '@')) board[l][h++][j] = '@';
	  }
	  if(board[l][i][j] == '>') {
	    int h = j + 1;
	    while(h < m && (board[l][i][h] == '.' || board[l][i][h] == '@')) board[l][i][h++] = '@';
	  }
	  if(board[l][i][j] == '^') {
	    int h = i - 1;
	    while(h >= 0 && (board[l][h][j] == '.' || board[l][h][j] == '@')) board[l][h--][j] = '@';
	  }
	  if(board[l][i][j] == '<') {
	    int h = j - 1;
	    while(h >= 0 && (board[l][i][h] == '.' || board[l][i][h] == '@')) board[l][i][h--] = '@';
	  }
	}
    memset(moves, -1, sizeof(moves));
    Q.push(make_pair(x * 100 + y, 0));
    while(!Q.empty()) {
      x = Q.front().first / 100;
      y = Q.front().first % 100;
      move = Q.front().second / 10;
      lvl = Q.front().second % 10;
      Q.pop();
      if(moves[lvl][x][y] == -1) {
	moves[lvl][x][y] = move;
	for(int i = 0; i < 4; i++) {
	  int tx = x + movex[i];
	  int ty = y + movey[i];
	  if(isSafe(tx, ty, n, m) && moves[(lvl + 1) % 4][tx][ty] == -1 && board[(lvl + 1) % 4][tx][ty] == '.')
	    Q.push(make_pair(tx * 100 + ty, (move + 1) * 10 + (lvl + 1) % 4));
	}
      }
    }
    int ans = 1000000000;
    for(int l = 0; l < 4; l++)
      if(moves[l][x1][y1] != -1) ans = min(ans, moves[l][x1][y1]);
    cout << "Case #" << Case << ": ";
    if(ans == 1000000000) cout << "impossible" << endl;
    else cout << ans << endl;
  }
  return 0;
}

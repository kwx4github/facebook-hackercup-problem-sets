// @author vudduu
// dedicated to my wife Susana
#include <iostream>
#include <sstream>
#include <utility>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <cmath>
#include <functional>
#include <algorithm>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <stdio.h>
#include <string.h>
using namespace std;
#define FOR(i,a,b)  for(int i=(a),_##i=(b);i<_##i;++i)
#define F(i,a)      FOR(i,0,a)
#define ALL(x)      x.begin(),x.end()
#define PB          push_back
#define MP          make_pair
#define S           size()
typedef long long   LL;
const int INF = 1<<30;

int N, M, Sx, Sy, Gx, Gy;
vector<pair<int,int> > P;
vector<string> maze;
vector<vector<vector<int> > > bestD(4);
vector<vector<string> > mazes(4);
const int xx[] = {0, -1, 0, 1};
const int yy[] = {-1, 0, 1, 0};

bool goodXY(int x, int y) {
	return x >= 0 && y >= 0 && x < M && y < N;
}

void solve() {
	int res = INF;
	queue<pair<pair<int,int>, int> > q;
	q.push( MP(MP(Sx, Sy),0) );
	while(!q.empty()) {
		int x = q.front().first.first;
		int y = q.front().first.second;
		int d = q.front().second;
		q.pop();
		if(!goodXY(x, y)) continue;
		vector<string> &ma = mazes[d%4];
		if(ma[x][y] == '#') continue;
		if(ma[x][y] == '$' && d) continue;
		if(x == Gx && y == Gy) {
			res = d;
			break;
		}
		vector<vector<int> > &be = bestD[d%4];
		if(be[x][y] > d) {
			be[x][y] = d;
			F(i, 4) q.push( MP(MP(x+xx[i],y+yy[i]), d+1 ) );
		}
	}
	if(res == INF) printf("impossible\n");
	else printf("%d\n", res);
}

void includeLazer(vector<string>& ma, int x, int y, int a, int b) {
	while(goodXY(x, y)) {
		if(ma[x][y] == '#') return;
		ma[x][y] = '$';
		x += a;
		y += b;
	}
}

int main() {
	// freopen("in.in", "r", stdin);
	int T;
	scanf("%d", &T);
	F(cas, T) {
		scanf("%d %d", &M, &N);
		maze.resize(M);
		F(i, M) cin >> maze[i];
		F(mit, 4) {
			mazes[mit] = maze;
			bestD[mit] = vector<vector<int> > (M, vector<int> (N, INF));
		}
		F(i, M) {
			F(j, N) {
				char a = maze[i][j];
				if(a == 'S') {
					Sx = i;
					Sy = j;
				}
				if(a == 'G') {
					Gx = i;
					Gy = j;
				}
				if(a == '<') F(k, 4) includeLazer(mazes[k], i, j, xx[k], yy[k]);
				if(a == '^') F(k, 4) includeLazer(mazes[k], i, j, xx[(k+1)%4], yy[(k+1)%4]);
				if(a == '>') F(k, 4) includeLazer(mazes[k], i, j, xx[(k+2)%4], yy[(k+2)%4]);
				if(a == 'v') F(k, 4) includeLazer(mazes[k], i, j, xx[(k+3)%4], yy[(k+3)%4]);
			}
		}
		printf("Case #%d: ", cas+1);
		solve();
	}
}

#include <iostream>
#include <stdio.h>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <string.h>
#include <cmath>
#include <memory.h>
#include <algorithm>
using namespace std;
typedef long long ll;
struct state{
	int r, c, cost;
	state(){}
	state(int a, int b, int q){
		r = a;
		c = b;
		cost = q;
	}
};
const int dr[4] = { -1, 0, 1, 0 };
const int dc[4] = { 0, 1, 0, -1 };
int F[128];
const int oo = 1 << 29;
char g[100][101];
bool vis[100][100][4];
int R, C;
bool safe(int r, int c, int t){
	for (int i = r + 1; i < R; ++i)
	if (g[i][c] == '#')
		break;
	else if (g[i][c] != '.' && g[i][c] != 'G'){
		if ((F[g[i][c]] + t) % 4 == 0)
			return false;
		break;
	}
	for (int i = r - 1; i >= 0; --i)
	if (g[i][c] == '#')
		break;
	else if (g[i][c] != '.' && g[i][c] != 'G'){
		if ((F[g[i][c]] + t) % 4 == 2)
			return false;
		break;
	}
	for (int j = c + 1; j < C; ++j)
	if (g[r][j] == '#')
		break;
	else if (g[r][j] != '.' && g[r][j] != 'G'){
		if ((F[g[r][j]] + t) % 4 == 3)
			return false;
		break;
	}
	for (int j = c - 1; j >= 0; --j)
	if (g[r][j] == '#')
		break;
	else if (g[r][j] != '.' && g[r][j] != 'G'){
		if ((F[g[r][j]] + t) % 4 == 1)
			return false;
		break;
	}
	return true;
}
int calc(int r, int c){
	memset(vis, 0, sizeof(vis));
	queue<state> q;
	q.push(state(r, c, 0));
	state s, ns;
	while (!q.empty()){
		s = q.front();
		q.pop();
		for (int i = 0; i < 4; ++i){
			ns.r = s.r + dr[i];
			ns.c = s.c + dc[i];
			ns.cost = s.cost + 1;
			if (ns.r<0 || ns.r==R || ns.c<0 || ns.c==C || vis[ns.r][ns.c][ns.cost % 4] || !safe(ns.r, ns.c, ns.cost % 4))
				continue;
			vis[ns.r][ns.c][ns.cost % 4] = true;
			if (g[ns.r][ns.c] == 'G')
				return ns.cost;
			q.push(ns);
		}
	}
	return -1;
}
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	F['^'] = 0; F['>'] = 1; F['v'] = 2; F['<'] = 3;
	int t;
	scanf("%d", &t);
	for (int T = 1; T <= t; ++T){
		printf("Case #%d:", T);
		scanf("%d%d", &R, &C);
		for (int i = 0; i < R; ++i)
			scanf("%s", g[i]);
		for (int i = 0; i < R;++i)
		for (int j = 0; j < C;++j)
		if (g[i][j] == 'S'){
			g[i][j] = '.';
			int res = calc(i, j);
			if (res == -1)
				printf(" impossible\n");
			else
				printf(" %d\n", res);
			i = j = oo;
		}
	}
	return 0;
}
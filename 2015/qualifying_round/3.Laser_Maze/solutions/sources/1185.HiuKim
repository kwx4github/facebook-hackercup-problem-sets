import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;


public class C {
    BufferedReader reader;
    StringTokenizer tokenizer;
    PrintWriter out;

    public void solveCase() throws IOException {
        int N = nextInt();
        int M = nextInt();

        char[][] map = new char[N][];
        for (int i = 0; i < N; i++) {
            map[i] = reader.readLine().toCharArray();
        }
        boolean[][][] reach = new boolean[N][M][4];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == '.' || map[i][j] == 'S' || map[i][j] == 'G') {
                    for (int d = 0; d < 4; d++) {
                        reach[i][j][d] = true;
                    }
                }
            }
        }
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                int d;
                if (map[i][j] == '<') {
                    d = 0;
                } else if (map[i][j] == '^') {
                    d = 3;
                } else if (map[i][j] == '>') {
                    d = 2;
                } else if (map[i][j] == 'v') {
                    d = 1;
                } else {
                    continue;
                }
                doBlock(reach, map, d, '<', i, j);
                doBlock(reach, map, (d+1) % 4, '^', i, j);
                doBlock(reach, map, (d+2) % 4, '>', i, j);
                doBlock(reach, map, (d+3) % 4, 'v', i, j);
            }
        }

//        for (int d = 0; d < 4; d++) {
//            for (int i = 0; i < N; i++) {
//                for (int j = 0; j < M; j++) {
//                    out.print(reach[i][j][d]? 'O': 'X');
//                }
//                out.println();
//            }
//            out.println();
//            out.println();
//        }

        Queue<int[]> queue = new LinkedList<int[]>();
        int[][][] steps = new int[N][M][4];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                Arrays.fill(steps[i][j], -1);
                if (map[i][j] == 'S') {
                    steps[i][j][0] = 0;
                    queue.add(new int[]{i, j, 0});
                }
            }
        }

        int[] dx = new int[] {-1, 1, 0, 0};
        int[] dy = new int[] {0, 0, -1, 1};
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int step = steps[cur[0]][cur[1]][cur[2]];
//            out.println(cur[0] + ", " + cur[1] + ", " + cur[2] + ": " + step);
            if (map[cur[0]][cur[1]] == 'G') {
                out.print(step);
                return;
            }

            for (int dd = 0; dd < 4; dd++) {
                int nx = cur[0] + dx[dd];
                int ny = cur[1] + dy[dd];
                int nd = (cur[2] + 1) % 4;
                if (nx < 0 || nx >= N) continue;
                if (ny < 0 || ny >= M) continue;
                if (!reach[nx][ny][nd]) continue;
                if (steps[nx][ny][nd] != -1) continue;
                steps[nx][ny][nd] = step + 1;
                queue.add(new int[] {nx, ny, nd});
            }
        }
        out.print("impossible");
    }

    public void doBlock(boolean[][][] reach, char[][] map, int d, char l, int i, int j) {
        if (l == '<') {
            for (int k = j-1; k >= 0; k--) {
                reach[i][k][d] = false;
                if (map[i][k] != '.' && map[i][k] != 'S' && map[i][k] != 'G') break;
            }
        } else if (l == '>') {
            for (int k = j+1; k < reach[0].length; k++) {
                reach[i][k][d] = false;
                if (map[i][k] != '.' && map[i][k] != 'S' && map[i][k] != 'G') break;
            }
        } else if (l == '^') {
            for (int k = i-1; k >= 0; k--) {
                reach[k][j][d] = false;
                if (map[k][j] != '.' && map[k][j] != 'S' && map[k][j] != 'G') break;
            }
        } else if (l == 'v') {
            for (int k = i+1; k < reach.length; k++) {
                reach[k][j][d] = false;
                if (map[k][j] != '.' && map[k][j] != 'S' && map[k][j] != 'G') break;
            }
        }
    }

    public void solve() throws IOException {
        int T = nextInt();
        for (int t = 1; t <= T; t++) {
            out.print("Case #" + t + ": ");
            solveCase();
            out.println();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        new C().run();
    }

    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(System.in));
            tokenizer = null;
            out = new PrintWriter(System.out);
            solve();
            reader.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(nextToken());
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

}

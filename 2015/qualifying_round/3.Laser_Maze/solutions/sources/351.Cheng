#include<stdio.h>
#include<algorithm>
using namespace std;
#define N 111
int n,m;
char mp[N][N];
int dmap[514];

int rm[4][N][N];
int dx[4]={-1,+0,+1,+0};
int dy[4]={+0,+1,+0,-1};
int sx,sy;
int ex,ey;
int ok(int x,int y){
	return 0<=x && x<n && 0<=y && y<m;
}

typedef struct{int d,x,y;}ele;
ele q[4*N*N];
int qs,qe;
int dis[4][N][N];
int vis[4][N][N],vt;

void sol(int uuu){
	scanf("%d %d",&n,&m);
	for(int i=0;i<n;i++)scanf("%s",mp[i]);
	/////////////////////////
	for(int d=0;d<4;d++){
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				rm[d][i][j]=0;
			}
		}
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(mp[i][j]=='.'){
					//rm[d][i][j]=0;
				}
				else if(mp[i][j]=='#'){
					rm[d][i][j]=1;
				}
				else if(mp[i][j]=='S'){
					//rm[d][i][j]=0;
					sx=i;sy=j;
				}
				else if(mp[i][j]=='G'){
					//rm[d][i][j]=0;
					ex=i;ey=j;
				}
				else{
					rm[d][i][j]=1;
					int nd=(d+dmap[mp[i][j]])%4;
					for(int k=1;;k++){
						int nx=i+dx[nd]*k;
						int ny=j+dy[nd]*k;
						if( ok(nx,ny)==0 || mp[nx][ny]=='#' || dmap[mp[nx][ny]] )break;
						rm[d][nx][ny]=1;
					}
				}
				//printf("%d ",rm[d][i][j]);
			}//puts("");
		}//puts("");
	}//puts("");
	//////////////////////
	++vt;
	qs=qe=0;
	q[qe++]=(ele){0,sx,sy};
	dis[0][sx][sy]=1;
	vis[0][sx][sy]=vt;
	for(;qs<qe;){
		ele w=q[qs++];
		int nd=( (w.d+1)&3 );
		for(int d=0;d<4;d++){
			int nx=w.x+dx[d];
			int ny=w.y+dy[d];
			if( ok(nx,ny)==0 || rm[nd][nx][ny]!=0 || vis[nd][nx][ny]==vt )continue;
			dis[nd][nx][ny]=dis[w.d][w.x][w.y]+1;
			vis[nd][nx][ny]=vt;
			q[qe++]=(ele){nd,nx,ny};
		}
	}
	int ans=1<<29;
	for(int d=0;d<4;d++){
		if(vis[d][ex][ey]!=vt)continue;
		ans=min(ans,dis[d][ex][ey]);
	}
	printf("Case #%d: ",uuu);
	printf(ans==1<<29?"impossible\n":"%d\n",ans-1);
}
int main(){
	freopen("laser_maze.txt","r",stdin);
	freopen("Cout.txt","w",stdout);
	
	dmap['^']=0;
	dmap['>']=1;
	dmap['v']=2;
	dmap['<']=3;
	int t;
	scanf("%d",&t);
	for(int i=0;i<t;i++){
		sol(i+1);
	}
	return 0;
}

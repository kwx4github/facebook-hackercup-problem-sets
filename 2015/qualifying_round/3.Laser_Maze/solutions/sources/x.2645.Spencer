from collections import defaultdict

class Graph:
    def __init__(self):
        self.nodes = set()
        self.edges = defaultdict(list)
        self.distances = {}

    def add_node(self, value):
        self.nodes.add(value)

    def add_edge(self, from_node, to_node, distance):
        self.edges[from_node].append(to_node)
        self.distances[(from_node, to_node)] = distance

    def remove_edge(self, from_node, to_node):
        self.edges[from_node].remove(to_node)
        del self.distances[(from_node, to_node)]

def dijkstra(graph, initial):
    visited = {initial: 0}
    path = {}

    nodes = set(graph.nodes)

    while nodes:
        min_node = None
        for node in nodes:
            if node in visited:
                if min_node is None:
                    min_node = node
                elif visited[node] < visited[min_node]:
                    min_node = node

        if min_node is None:
            break

        nodes.remove(min_node)
        current_weight = visited[min_node]

        for edge in graph.edges[min_node]:
            weight = current_weight + graph.distances[(min_node, edge)]
            if edge not in visited or weight < visited[edge]:
                visited[edge] = weight
                path[edge] = min_node

    return visited, path

T = input()

for case in range(T):
    M, N = map(int, raw_input().split())

    maze = [None]*M
    for row in range(M):
        maze[row] = list(raw_input())

    g = Graph()
    start = None
    goal = None

    turrets             = "<^>v"
    turret_directions   = [(0,-1), (-1,0), (0,1), (1,0)]

    dead_nodes = set()
    for row in range(M):
        for col in range(N):
            cell = maze[row][col]
            if cell in turrets:
                idx = turrets.index(cell)
                for i in range(4):
                    try:
                        dir = turret_directions[(idx+i)%4]
                        for n in range(1,max(M,N)):
                            r = row + n*dir[0]
                            c = col + n*dir[1]
                            maze[r][c]
                            dead_nodes.add((r, c, i))
                    except:
                        continue

    for row in range(M):
        for col in range(N):
            cell = maze[row][col]
            if cell in ".SG":
                for t in range(4):
                    n = (row, col, t)
                    g.add_node(n)
                    for dir in [(-1,0), (0,-1), (1,0), (0,1)]:
                        try:
                            tmp = (row+dir[0], col+dir[1], (t+1)%4)
                            if maze[row+dir[0]][col+dir[1]] in ".SG" and tmp not in dead_nodes:
                                g.add_node(tmp)
                                g.add_edge(n, tmp, 1)
                        except:
                            continue

            if cell == "S":
                start = (row, col, 0)
            elif cell == "G":
                goal = (row, col)


    visited = dijkstra(g, start)[0]
    results = {result: visited[result] for result in 
               visited if result[:2] == goal}

    if len(results) == 0:
        result = "impossible"
    else:
        result = min(results.values())

    print "Case #{case}: {result}".format(case=case+1, result=result)

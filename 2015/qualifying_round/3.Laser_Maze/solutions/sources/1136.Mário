#include <bits/stdc++.h>

using namespace std;

#define fr(a,b,c) for(int (a) = (b); (a) < (c); ++(a))
#define rp(a,b) fr(a,0,b)
#define fre(a,b) for(int a = adj[b]; ~a; a = ant[a])
#define cl(a,b) memset((a), (b), sizeof(a))
#define sc(a) scanf("%d", &a)
#define sc2(a,b) scanf("%d%d", &a, &b)
#define sc3(a,b,c) scanf("%d%d%d", &a, &b, &c)
#define scs(s) scanf("%s", s)
#define pri(x) printf("%d\n", x)

#define iter(a) __typeof((a).begin())
#define fore(a,b) for(iter(b) a = (b).begin(); a != (b).end(); ++a)

#define st first
#define nd second
#define mp make_pair
#define pb push_back

#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<

const int oo = 0x3f3f3f3f;

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector< vi > vii;

#define N 109

int m, n, bx, by, ex, ey;
char grid[4][N][N];

void raio(int k, int i, int j, int dx, int dy) {
	//db(k _ i _ j _ dx _ dy);
	i += dx; j += dy;
	while (i >= 0 && i < m &&
			j >= 0 && j < n && 
			(grid[k][i][j] == '.' || grid[k][i][j] == '*' ||
			grid[k][i][j] == 'S' || grid[k][i][j] == 'G')) {
			//db(k _ i  _ j);
			grid[k][i][j] = '*';
			i += dx; j += dy;
		}
}

void prep() {
	fr(k, 1, 4) {
		rp(i, m) rp(j, n) {
			char ant = grid[k-1][i][j];
			grid[k][i][j] = 
				ant == '>'? 'v':
				ant == 'v'? '<':
				ant == '<'? '^':
				ant == '^'? '>':
				ant;
		}
	}
	
	rp(k, 4) {
		rp(i, m) rp(j, n) {
			char act = grid[k][i][j];
			if (act == '^') 
				raio(k, i, j, -1, 0);
			else if (act == '>') 
				raio(k, i, j, 0, 1);
			else if (act == 'v') 
				raio(k, i, j, 1, 0);
			else if (act == '<') 
				raio(k, i, j, 0, -1); 
		}
	}
}

struct state{
	int k, x, y;
	state() {}
	state(int k, int x, int y):
		k(k), x(x), y(y) {}
};

int dist[4][N][N];
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

int bfs() {
	cl(dist, 0x3f);
	queue<state> fila;
	dist[0][bx][by] = 0;
	fila.push(state(0, bx, by));
	while (!fila.empty()) {
		state aux = fila.front(); fila.pop();
		if (aux.x == ex && aux.y == ey) 
			return dist[aux.k][aux.x][aux.y];
		rp(dir, 4) {
			int k = (aux.k+1)%4;
			int i = aux.x + dx[dir];
			int j = aux.y + dy[dir];
			if (i >= 0 && i < m &&
				j >= 0 && j < n && 
				dist[k][i][j] == oo &&
				(grid[k][i][j] == '.' || 
				grid[k][i][j] == 'S' || 
				grid[k][i][j] == 'G')) {
					dist[k][i][j] = dist[aux.k][aux.x][aux.y] + 1;
					fila.push(state(k, i, j));
				}
		}
	}
	return oo;
}

int main() {
	int t, cn = 1;
	sc(t); while (t--) {
		sc2(m, n);
		rp(i, m) {
			scs(grid[0][i]);
			rp(j, n) {
				if (grid[0][i][j] == 'S') {
					bx = i; by = j;
				}
				if (grid[0][i][j] == 'G') {
					ex = i; ey = j;
				}
			}
		}
		printf("Case #%d: ", cn++);
		prep();
		/*
		rp(k, 4) {
			rp(i, m) {
				rp(j, n) printf("%c", grid[k][i][j]);
				puts("");
			}
			puts("");
		}
		*/
		int ans = bfs();
		if (ans == oo) puts("impossible");
		else pri(ans);
		//return 0;
	}
	return 0;
}


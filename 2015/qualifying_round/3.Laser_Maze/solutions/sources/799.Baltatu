#include<bits/stdc++.h>
using namespace std;

struct cell
{
    int x,y,z;
};

const int NMAX=105;

int t,n,m,cost[5][NMAX][NMAX];
char s[NMAX],a[NMAX][NMAX],b[NMAX][NMAX];
bool wall[NMAX][NMAX],viz[5][NMAX][NMAX];
vector<cell>v[5][NMAX][NMAX];
vector<cell>::iterator it;
queue<cell>Q;
cell start,stop;
//directii
int dx[]={ -1 , 0 , 1 , 0 };
int dy[]={ 0 , 1 , 0 , -1 };

inline void Rev()
{
    int i,j,l;
    for (i=1;i<=n;i++)
        for (j=1;j<=m;j++)
            {
                b[i][j]=a[i][j];
                wall[i][j]=0;
                if (a[i][j]=='>') a[i][j]='v';
                else if (a[i][j]=='v') a[i][j]='<';
                else if(a[i][j]=='<') a[i][j]='^';
                else if (a[i][j]=='^') a[i][j]='>';
            }
    for (i=1;i<=n;i++)
        for (j=1;j<=m;j++)
            if (a[i][j]!='.')
                {
                    wall[i][j]=1;
                    if (a[i][j]!='#')
                        {
                            if (a[i][j]=='>')
                                for (l=j+1;l<=m && a[i][l]=='.';l++) wall[i][l]=1;
                            if (a[i][j]=='v')
                                for (l=i+1;l<=n && a[l][j]=='.';l++) wall[l][j]=1;
                            if(a[i][j]=='<')
                                for (l=j-1;l>=1 && a[i][l]=='.';l--) wall[i][l]=1;
                            if (a[i][j]=='^')
                                for (l=i-1;l>=1 && a[l][j]=='.';l--) wall[l][j]=1;
                        }
                }
}

inline bool Interior(int x,int y)
{
    if (x>=1 && x<=n && y>=1 && y<=m) return 1;
    return 0;
}

inline void Lee()
{
    cell k;
    k.x=start.x;
    k.y=start.y;
    k.z=1;
    viz[k.z][k.x][k.y]=1;
    Q.push(k);
    while (!Q.empty())
        {
            k=Q.front();
            Q.pop();
            for (it=v[k.z][k.x][k.y].begin();it!=v[k.z][k.x][k.y].end();it++)
                if (!viz[(*it).z][(*it).x][(*it).y])
                    {
                        viz[(*it).z][(*it).x][(*it).y]=1;
                        cost[(*it).z][(*it).x][(*it).y]=cost[k.z][k.x][k.y]+1;
                        Q.push(*it);
                    }
        }
}

int main()
{
    int l,i,j,k,p,mn;
    cell kkt;
    //freopen("date.in","r",stdin);
    //freopen("date.out","w",stdout);
    cin.sync_with_stdio(false);
    cin>>t;
    for (l=1;l<=t;l++)
        {
            cin>>n>>m;
            for (i=1;i<=n;i++)
                {
                    cin>>(s+1);
                    for (j=1;j<=m;j++)
                    {
                        a[i][j]=s[j];
                        if (a[i][j]=='S')
                            {
                                a[i][j]='.';
                                start.x=i;
                                start.y=j;
                            }
                        if (a[i][j]=='G')
                            {
                                a[i][j]='.';
                                stop.x=i;
                                stop.y=j;
                            }
                    }
                }
            for (p=1;p<=4;p++)
                {
                    Rev();
                    for (i=1;i<=n;i++)
                        for (j=1;j<=m;j++)
                            for (k=0;k<4;k++)
                                if (Interior(i+dx[k],j+dy[k])==1 && b[i][j]=='.' && wall[i+dx[k]][j+dy[k]]==0)
                                    {
                                        kkt.x=i+dx[k];
                                        kkt.y=j+dy[k];
                                        kkt.z=p+1;
                                        if (kkt.z>4) kkt.z=1;
                                        v[p][i][j].push_back(kkt);
                                    }
                }
            Lee();
            mn=1<<30;
            for (i=1;i<=4;i++)
                if (viz[i][stop.x][stop.y]==1)
                    mn=min(mn,cost[i][stop.x][stop.y]);
            cout<<"Case #"<<l<<": ";
            if (mn==(1<<30)) cout<<"impossible\n";
            else cout<<mn<<"\n";
            //golire
            for (p=1;p<=4;p++)
                for (i=1;i<=n;i++)
                    for (j=1;j<=m;j++)
                        {
                            v[p][i][j].clear();
                            viz[p][i][j]=cost[p][i][j]=0;
                        }
        }
    return 0;
}

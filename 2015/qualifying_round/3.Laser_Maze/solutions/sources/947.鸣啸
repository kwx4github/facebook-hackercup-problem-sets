#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <cmath>
#include <stack>
#include <map>
#include <ctime>
#include <iomanip>

#pragma comment(linker,"/STACK:1024000000");
#define EPS (1e-6)
#define _LL long long
#define ULL unsigned long long
#define LL __int64
#define INF 0x3f3f3f3f
#define Mod 1000000007
#define mod 1000000007

/** I/O Accelerator Interface .. **/
#define g (c=getchar())
#define d isdigit(g)
#define p x=x*10+c-'0'
#define n x=x*10+'0'-c
#define pp l/=10,p
#define nn l/=10,n
template<class T> inline T& RD(T &x)
{
    char c;
    while(!d);
    x=c-'0';
    while(d)p;
    return x;
}
template<class T> inline T& RDD(T &x)
{
    char c;
    while(g,c!='-'&&!isdigit(c));
    if (c=='-')
    {
        x='0'-g;
        while(d)n;
    }
    else
    {
        x=c-'0';
        while(d)p;
    }
    return x;
}
inline double& RF(double &x)      //scanf("%lf", &x);
{
    char c;
    while(g,c!='-'&&c!='.'&&!isdigit(c));
    if(c=='-')if(g=='.')
        {
            x=0;
            double l=1;
            while(d)nn;
            x*=l;
        }
        else
        {
            x='0'-c;
            while(d)n;
            if(c=='.')
            {
                double l=1;
                while(d)nn;
                x*=l;
            }
        }
    else if(c=='.')
    {
        x=0;
        double l=1;
        while(d)pp;
        x*=l;
    }
    else
    {
        x=c-'0';
        while(d)p;
        if(c=='.')
        {
            double l=1;
            while(d)pp;
            x*=l;
        }
    }
    return x;
}
#undef nn
#undef pp
#undef n
#undef p
#undef d
#undef g
using namespace std;

char Map[4][110][110];

bool mark[4][110][110];

int getID(char c)
{
    if(c == '^')
        return 0;
    if(c == '>')
        return 1;
    if(c == 'v' || c == 'V')
        return 2;
    if(c == '<')
        return 3;
    return 4;
}

char getCH(int id)
{
    if(id == 0)
        return '^';
    if(id == 1)
        return '>';
    if(id == 2)
        return 'v';
    return '<';
}

int jx[] = {-1, 0, 1, 0};
int jy[] = { 0, 1, 0,-1};

void Update(int lay,int x,int y,int dir,int n,int m)
{
    do
    {
        mark[lay][x][y] = true;
        x += jx[dir];
        y += jy[dir];
    }while(1 <= x && x <= n && 1 <= y && y <= m && (Map[lay][x][y] != '#' && getID(Map[lay][x][y]) == 4));
}

void FindSta(int &x,int &y,int n,int m)
{
    int i,j;

    for(i = 1;i <= n; ++i)
        for(j = 1;j <= m; ++j)
            if(Map[0][i][j] == 'S')
            {
                x = i,y = j;
                return ;
            }
}

int vis[4][110][110];

struct N
{
    int lay,x,y;
};

queue<N> q;

void bfs(int sx,int sy,int n,int m)
{
  //  cout<<"n = "<<n<<" m = "<<m<<endl;
    while(q.empty() == false)
        q.pop();

    memset(vis,INF,sizeof(vis));
    N s,f;
    s.lay = 0,s.x = sx,s.y = sy;
    q.push(s);
    vis[s.lay][s.x][s.y] = 0;

    while(q.empty() == false)
    {
        f = q.front();
        q.pop();

       // cout<<"lay = "<<f.lay<<" x = "<<f.x<<" y = "<<f.y<<" val = "<<vis[f.lay][f.x][f.y]<<endl;

        if(Map[f.lay][f.x][f.y] == 'G')
        {
            printf("%d\n",vis[f.lay][f.x][f.y]);
            return  ;
        }

        s.lay = (f.lay+1)%4;
        for(int i = 0;i < 4; ++i)
        {
            s.x = f.x + jx[i];
            s.y = f.y + jy[i];
           // cout<<"  #  lay = "<<s.lay<<" x = "<<s.x<<" y = "<<s.y<<" val = "<<vis[s.lay][s.x][s.y]<<" char = "<<mark[s.lay][s.x][s.y]<<endl;
            if(1 <= s.x && s.x <= n && 1 <= s.y && s.y <= m && mark[s.lay][s.x][s.y] == false && Map[s.lay][s.x][s.y] != '#' && vis[s.lay][s.x][s.y] > vis[f.lay][f.x][f.y] + 1)
            {
               // cout<<"here"<<endl;
                vis[s.lay][s.x][s.y] = vis[f.lay][f.x][f.y] + 1;
                q.push(s);
            }
        }

    }

    printf("impossible\n");
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("laser_maze_output.txt","w",stdout);
    int T,icase;

    scanf("%d",&T);

    int n,m,i,j,k;

    for(icase = 1 ;icase <= T; icase++)
    {
        scanf("%d %d",&n,&m);

        for(i = 1;i <= n; ++i)
            scanf("%s",Map[0][i]+1);

        int tmp;

        for(k = 1;k < 4; ++k)
        {
            for(i = 1;i <= n; ++i)
            {
                for(j = 1;j <= m; ++j)
                {
                    if((tmp = getID(Map[k-1][i][j])) < 4)
                        Map[k][i][j] = getCH((tmp+1)%4);
                    else
                        Map[k][i][j] = Map[k-1][i][j];
                }
            }
        }


        memset(mark,false,sizeof(mark));

        for(k = 0;k < 4; ++k)
        {
            for(i = 1;i <= n; ++i)
            {
                for(j = 1;j <= m ; ++j)
                {
                    if((tmp = getID(Map[k][i][j])) < 4)
                    {
                        Update(k,i,j,tmp,n,m);
                    }
                }
            }
        }

//        for(k = 0;k < 4; ++k)
//        {
//            for(i = 1;i <= n; ++i)
//            {
//                for(j = 1;j <= m ; ++j)
//                {
//                    printf("%c",Map[k][i][j]);
//                }
//                puts("");
//            }
//            printf("k = %d\n\n",k);
//        }
//
//        for(k = 0;k < 4; ++k)
//        {
//            for(i = 1;i <= n; ++i)
//            {
//                for(j = 1;j <= m ; ++j)
//                {
//                    printf("%d",mark[k][i][j]);
//                }
//                puts("");
//            }
//            printf("k = %d\n\n",k);
//        }


        int sx = 0,sy = 0;

        FindSta(sx,sy,n,m);
        printf("Case #%d: ",icase);
        bfs(sx,sy,n,m);
    }

    return 0;
}


















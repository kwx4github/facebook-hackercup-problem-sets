#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
#define SZ(x) ( (int) (x).size() )
#define dbg(x) cerr << #x << " = " << x << endl;
#define mp make_pair
#define pb push_back
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> pii;
// const int INF = 1e9;
const int MAX_N = 111;

int T, N, M;

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
char S[MAX_N][MAX_N];

int dist[MAX_N][MAX_N][4];

char isMoveable(char c){
  return c == 'S' || c == 'G' || c == '.';
}

string laser_types = "^>v<";

char shift(char c, int shift){
  int i = find(laser_types.begin(), laser_types.end(), c) - laser_types.begin();
  if(i < 4)
    return laser_types[(i + shift) % 4];
  return c;
}

int check(int i, int j, int k){
  if(i < 0 || j < 0 || i >= N || j >= M)
    return 0;
  if(!isMoveable(S[i][j]))
    return 0;
  bool bad = false;
  for(int x = i - 1; x >= 0; x--){
    if(!isMoveable(S[x][j])){
      bad |= shift(S[x][j], k) == 'v';
      break;
    }
  }

  for(int x = i + 1; x < N; x++){
    if(!isMoveable(S[x][j])){
      bad |= shift(S[x][j], k)  == '^';
      break;
    }
  }

  for(int y = j + 1; y < M; y++){
    if(!isMoveable(S[i][y])){
      bad |= shift(S[i][y], k) == '<';
      break;
    }
  }

  for(int y = j - 1; y >= 0; y--){
    if(!isMoveable(S[i][y])){
      bad |= shift(S[i][y], k) == '>';
      break;
    }
  }
  
  return !bad;
}

void solve(){
  scanf("%d%d", &N, &M);
  for(int i = 0; i < N; i++)
    scanf("%s", S[i]);
  int sx = 0, sy = 0, tx = 0, ty = 0;
  for(int i = 0; i < N; i++)
    for(int j = 0; j < M; j++){
      if(S[i][j] == 'S'){
	sx = i, sy = j;
      } else if(S[i][j] == 'G'){
	tx = i, ty = j;
      }
    }
  typedef pair<pii, int> piii;
  
  queue<piii> q;
  memset(dist, -1, sizeof dist);
  dist[sx][sy][0] = 0;
  q.push(mp(mp(sx, sy), 0));
  while(!q.empty()){
    piii t = q.front();
    pii pos = t.fi;

    q.pop();
    if(pos.fi == tx && pos.se == ty){
      printf("%d\n", dist[pos.fi][pos.se][t.se]);
      return;
    }
    for(int d = 0; d < 4; d++){
      int nx = pos.fi + dx[d];
      int ny = pos.se + dy[d];
      int ndist = dist[pos.fi][pos.se][t.se] + 1;
      if(check(nx, ny, ndist % 4) && dist[nx][ny][ndist % 4] == -1){
	dist[nx][ny][ndist % 4] = ndist;
	q.push(mp(mp(nx, ny), dist[nx][ny][ndist % 4] % 4));
      }
    }
  }
  puts("impossible");
}

int main(){
  scanf("%d", &T);
  for(int caseno = 1; caseno <= T; caseno++){
    printf("Case #%d: ", caseno);
    solve();
  }
  return 0;
}

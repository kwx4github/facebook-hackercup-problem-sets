//#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
#define FOR(i, a, b) for(int i = a; i <= b; i ++)
#define DOW(i, a, b) for(int i = a; i >= b; i --)
#define RESET(c, val) memset(c, val, sizeof(c))
#define oo 1e9
#define eps 1e-9
#define base 1000000007
#define maxn 100005

struct State {
    int x; int y; int c;
    State(int x_, int y_, int c_) {
        x = x_, y = y_, c = c_;
    }
};

int ki[] = {0, 0, 1, -1};
int kj[] = {1, -1, 0, 0};

int main() {
    ios_base::sync_with_stdio(0);
    freopen("test.inp", "r", stdin);
    freopen("test.out", "w", stdout);
    
    int test, n;
    char a[105][105];
    bool ok[105][105][4];
    int d[1000];
    d['>'] = 0; d['v'] = 1; d['<'] = 2; d['^'] = 3;

    cin >> test;

    FOR(t, 1, test) {
        printf("Case #%d: ", t);
        RESET(ok, true);

        int m, n, sx, sy, tx, ty;
        cin >> m >> n;
        FOR(i, 1, m) FOR(j, 1, n) {
            cin >> a[i][j];
            if (a[i][j] == 'S') sx = i, sy = j, a[i][j] = '.';
            if (a[i][j] == 'G') tx = i, ty = j, a[i][j] = '.';
        }

        FOR(i, 0, m + 1) FOR(j, 0, n + 1) {
            if (i == 0 || i == m + 1 || j == 0 || j == n + 1 || a[i][j] != '.') {
                FOR(z, 0, 3) ok[i][j][z] = false;
            } else {
                int ii, jj;

                ii = i, jj = j;
                while (ii >= 1 && a[ii][jj] == '.') ii--;
                if (ii >= 1 && a[ii][jj] != '#') 
                    ok[i][j][(5 - d[a[ii][jj]]) % 4] = false;

                ii = i, jj = j;
                while (ii <= m && a[ii][jj] == '.') ii++;
                if (ii <= m && a[ii][jj] != '#') 
                    ok[i][j][(7 - d[a[ii][jj]]) % 4] = false;
                
                ii = i, jj = j;
                while (jj >= 1 && a[ii][jj] == '.') jj--;
                if (jj >= 1 && a[ii][jj] != '#') 
                    ok[i][j][(4 - d[a[ii][jj]]) % 4] = false;
                
                ii = i, jj = j;
                while (jj <= n && a[ii][jj] == '.') jj++;
                if (jj <= n && a[ii][jj] != '#') 
                    ok[i][j][(6 - d[a[ii][jj]]) % 4] = false;   
            }
        }

        queue< State > q;
        int f[105][105][4];
        RESET(f, -1);

        //if (ok[sx][sy][0]) {
            f[sx][sy][0] = 0;
            q.push(State(sx, sy, 0));
        //}

        int answer = -1;
        while (!q.empty()) {
            State s = q.front(); q.pop();
            if (s.x == tx & s.y == ty) {
                answer = f[s.x][s.y][s.c];
                break;
            }
            FOR(k, 0, 3) {
                State u = s;
                u.x = s.x + ki[k];
                u.y = s.y + kj[k];
                u.c = (s.c + 1) % 4;

                if (ok[u.x][u.y][u.c] && f[u.x][u.y][u.c] == -1) {
                    f[u.x][u.y][u.c] = f[s.x][s.y][s.c] + 1;
                    q.push(u);
                }
            }
        }

       if (answer == -1) cout << "impossible" << endl;
       else cout << answer << endl;
    }
    return 0;
}
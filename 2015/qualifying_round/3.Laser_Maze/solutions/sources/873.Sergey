import java.util.*;
import java.io.*;

public class maze_sp implements Runnable {
    public static void main(String[] args) {
        new Thread(new maze_sp()).start();
    }

    @Override
    public void run() {
        try {
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
            solve();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.exit(566);
        }
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    boolean eof = false;

    String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return "0";
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(nextToken());
    }
    
    String lasers = "^>v<";
    int[] dx = new int[]{-1, 0, 1, 0};
    int[] dy = new int[]{0, 1, 0, -1};

    void solve() {
	int tests = nextInt();
	for (int test = 1; test <= tests; test++) {
	    int n = nextInt();
	    int m = nextInt();
	    char[][] tab = new char[n][];
	    for (int i = 0; i < n; i++) {
	      tab[i] = nextToken().toCharArray();
	    }
	    boolean[][][] b = new boolean[n][m][4];
	    int sx = -1;
	    int sy = -1;
	    int fx = -1;
	    int fy = -1;
	    for (int i = 0; i < n; i++) {
	      for (int j = 0; j < m; j++) {
	        if (tab[i][j] == '#') {
	          Arrays.fill(b[i][j], true);
	        } else if (tab[i][j] == 'S') {
	          sx = i;
	          sy = j;
	        } else if (tab[i][j] == 'G') {
	          fx = i;
	          fy = j;
	        } else if (tab[i][j] != '.') {
	          Arrays.fill(b[i][j], true);
	          int sd = lasers.indexOf(tab[i][j]);
	          for (int d = 0; d < 4; d++) {
	            int s = (4 + d - sd) % 4;
	            int x = i + dx[d];
	            int y = j + dy[d];
	            while (x >= 0 && x < n && y >= 0 && y < m && (tab[x][y] == '.' || tab[x][y] == 'S' || tab[x][y] == 'G')) {
	              b[x][y][s] = true;
	              x += dx[d];
	              y += dy[d];
	            }
	          }
	        }
	      }
	    }
	    int[][][] d = new int[n][m][4];
	    for (int i = 0; i < n; i++) {
	      for (int j = 0; j < m; j++) {
//	        out.println(i + " " + j + " " + Arrays.toString(b[i][j]));
	        Arrays.fill(d[i][j], Integer.MAX_VALUE / 2);
	      }
	    }
	    d[sx][sy][0] = 0;
	    int[] qx = new int[n * m * 4 + 10];
	    int[] qy = new int[n * m * 4 + 10];
	    int[] qd = new int[n * m * 4 + 10];
	    qx[0] = sx;
	    qy[0] = sy;
	    qd[0] = 0;
	    int qb = 0;
	    int qe = 1;
	    int ans = Integer.MAX_VALUE;
	    while (qb < qe && ans == Integer.MAX_VALUE) {
	      int x = qx[qb];
	      int y = qy[qb];
	      int od = qd[qb];
	      qb++;
	      int dist = d[x][y][od];
	      for (int dir = 0; dir < 4; dir++) {
	        int xx = x + dx[dir];
	        int yy = y + dy[dir];
	        int dd = (od + 1) % 4;
	        if (xx >= 0 && xx < n && yy >= 0 && yy < m && !b[xx][yy][dd]) {
	          if (xx == fx && yy == fy) {
	            ans = dist + 1;
	            break;
	          }
	          if (d[xx][yy][dd] == Integer.MAX_VALUE / 2) {
	            d[xx][yy][dd] = dist + 1;
	            qx[qe] = xx;
	            qy[qe] = yy;
	            qd[qe] = dd;
	            qe++;
	          }
	        }
	      }
	    }
	    out.println("Case #" + test + ": " + (ans < Integer.MAX_VALUE ? ans : "impossible"));
	}
    }
}

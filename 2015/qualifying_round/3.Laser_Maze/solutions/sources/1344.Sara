#include <stdio>

int main(int argc, char** argv) {
    int lab[200][200][4];
    int dir[8][2]={{0,-1},{-1,0},{0,1},{1,0},{0,-1},{-1,0},{0,1},{1,0}};
    int T,M,N,t,m,n,i,mm,nn;
    int mst,nst,mgl,ngl;
    char buffer[256];
    scanf ("%d", &T);
    for (t=1; t<=T; t++)
    {
        scanf ("%d %d", &M, &N);
        for (m=0; m<=M+1; m++)
            for (i=0; i<4; i++)
            {
                lab[m][0][i]=-1;
                lab[m][N+1][i]=-1;
            }
        for (n=0; n<=N+1; n++)
            for (i=0; i<4; i++)
            {
                lab[0][n][i]=-1;
                lab[M+1][n][i]=-1;
            }
        for (m=1; m<=M; m++)
        {
            scanf("%s", buffer);
            for (n=1; n<=N; n++)
            {
                int p=0;
                switch (buffer[n-1])
                {
                    case '#': p=-1; break; // pared
                    case 's':
                    case 'S': mst=m; nst=n; break;  // start
                    case 'g':
                    case 'G': mgl=m; ngl=n; break;  //goal
                    case '<': p=-2; break;  // lasers...
                    case '^': p=-3; break;
                    case '>': p=-4; break;
                    case 'V':
                    case 'v': p=-5; break;
                }
                for (i=0; i<4; i++)
                    lab[m][n][i]=p;
            }
        }
        for (m=1; m<=M; m++)
            for (n=1; n<=N; n++)
                if ((lab[m][n][0]<-1) && (lab[m][n][0]>-100))  // laser turret
                {
                    int pos=-maze[m][n][0]-2;
                    for (i=0; i<4; i++)
                    {
                        mm=m;
                        nn=n;
                        while (true)
                        {
                            mm+=dir[pos+i][0];
                            nn+=dir[pos+i][1];
                            if ((lab[mm][nn][0]<0) && (lab[mm][nn][0]>-100))
                                break;
                            else
                                lab[mm][nn][i]=-100;
                        }
                    }
                }
        int turn=1;  // Initial step
        int step=1;
        bool vale=true;
        for (i=0; i<4; i++)
        {
            m=mst+dir[i][0];
            n=nst+dir[i][1];
            if (lab[m][n][turn]==0)
            {
                lab[m][n][turn]=step;
                vale=true;
            }
        }
        while (vale)
        {
            if (lab[mgl][ngl][turn]>0) break;
            vale=false;
            int newturn=((turn>=3) ? 0 : turn+1);
            for (m=1; m<=M; m++)
                for (n=1; n<=N; n++)
                    if (lab[m][n][turn]==step)  // next step
                    {
                        for (i=0; i<4; i++)
                        {
                            mm=m+dir[i][0];
                            nn=n+dir[i][1];
                            if (lab[mm][nn][newturn]==0)
                            {
                                lab[mm][nn][newturn]=step+1;
                                vale=true;
                            }
                        }
                    }
            turn=newturn;
            step++;
        }
        printf "Case #%d :", t);
        if (lab[mgl][ngl][turn]>0)
            printf ("%d\n", maze[mgl][ngl][turn]);
        else
            printf ("impossible\n");
    }
    return 0;
}


#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*


int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	for (int i = 1; i <= T; i++)
	{
		string N;
		cin>>N;
		string mn = N;
		string mx = N;
		string B;
		for (int j = 0; j < N.size(); j++)
		{
			for (int k = j+1; k < N.size(); k++)
			{
				B = N;
				if (j == 0 && N[k] == '0') continue;
				swap(B[j], B[k]);
				mn = min(mn, B);
				mx = max(mx, B);
			}
		}
		cout<<"Case #"<<i<<": "<<mn<<" "<<mx<<endl;
	}
}


int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	for (int i = 1; i <= T; i++)
	{
		int N;
		int p,c,f;
		cin>>p>>c>>f;
		bool yes = false;
		cin>>N;
		vector<vector<int> > a(N, vector<int> (3));
		for (int j = 0; j < N; j++) cin>>a[j][0]>>a[j][1]>>a[j][2];
		for (int j = 0; j < (1<<N); j++)
		{
			
			int sp = 0;
			int sc = 0;
			int sf = 0;
			for (int k = 0; k < N; k++)
			{
				if ((j&(1<<k)) > 0)
				{
					sp += a[k][0];
					sc += a[k][1];
					sf += a[k][2];
				}
			}
			if (sp == p && sc == c && sf == f)
			{
				yes = true;
				break;
			}
		}
		if (yes)
			cout<<"Case #"<<i<<": yes"<<endl;
		else
			cout<<"Case #"<<i<<": no"<<endl;
	}
}
*/

class st
{
public:
	int x, y;
	int d;
};


int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int T;
	cin>>T;
	for (int z = 1; z <= T; z++)
	{
		int m, n;
		cin>>m>>n;
		vector<string> a(m);
		for (int i = 0; i < m; i++) cin>>a[i];
		vector<vector<vector<bool> > > ok(4, vector<vector<bool> > (m, vector<bool> (n, false)));
		int sx = -1;
		int sy = -1;
		int gx = -1;
		int gy = -1;
		for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) if (a[i][j] == 'S')
		{
			sx = i;
			sy = j;
			a[i][j] = '.';
		}
		else if (a[i][j] == 'G')
		{
			gx = i;
			gy = j;
			a[i][j] = '.';
		}
		string arrows[4];
		arrows[0] = "^>v<";
		arrows[1] = "<^>v";
		arrows[2] = "v<^>";
		arrows[3] = ">v<^";
		for (int b = 0; b < 4; b++)
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (a[i][j] != '.' && a[i][j] != 'S' && a[i][j] != 'G') ok[b][i][j] = true;
				if (a[i][j] == arrows[b][0])
				{
					int k = i-1;
					while (k >= 0 && a[k][j] == '.') {
						ok[b][k][j] = true;
						k--;
					}
				}
				else if (a[i][j] == arrows[b][1])
				{
					int k = j+1;
					while (k < n && a[i][k] == '.') 
					{
						ok[b][i][k] = true;
						k++;
					}
				}
				else if (a[i][j] == arrows[b][2])
				{
					int k = i+1;
					while (k < m && a[k][j] == '.') 
					{
						ok[b][k][j] = true;
						k++;
					}
				}
				else if (a[i][j] == arrows[b][3])
				{
					int k = j-1;
					while (k >= 0 && a[i][k] == '.') 
					{
						ok[b][i][k] = true;
						k--;
					}
				}
			}
		}
		
		queue<st> q;
		st start;
		start.x = sx;
		start.y = sy;
		start.d = 0;
		q.push(start);
		int r = -1;
		while (!q.empty())
		{
			st cur = q.front();
			q.pop();
			if (cur.d != 0 && ok[cur.d%4][cur.x][cur.y]) continue;
			ok[cur.d%4][cur.x][cur.y] =true;
			if (cur.x == gx && cur.y == gy)
			{
				r = cur.d;
				break;
			}
			st s1,s2,s3,s4;
			s1.x = cur.x+1;
			s1.y = cur.y;
			s1.d = cur.d+1;
			s2.x = cur.x;
			s2.y = cur.y+1;
			s2.d = cur.d+1;
			s3.x = cur.x-1;
			s3.y = cur.y;
			s3.d = cur.d+1;
			s4.x = cur.x;
			s4.y = cur.y-1;
			s4.d = cur.d+1;
			if (s1.x < m)
			{
				q.push(s1);
			}
			if (s2.y < n)
			{
				q.push(s2);
			}
			if (s3.x >= 0)
			{
				q.push(s3);
			}
			if (s4.y >= 0)
			{
				q.push(s4);
			}
		}
		if (r == -1)
		{
			cout<<"Case #"<<z<<": impossible"<<endl; 
		}
		else
		{
			cout<<"Case #"<<z<<": "<<r<<endl;
		}
	}
}
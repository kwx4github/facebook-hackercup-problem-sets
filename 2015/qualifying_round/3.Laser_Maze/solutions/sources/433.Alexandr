#include <cstdio>
#include <cstdlib>
#include <iostream>

using namespace std;

#define pii pair<int, int>
#define mp make_pair
#define fs first
#define sc second
#define forn(i, n) for (int i = 0; i< n; ++i)

const int NMAX = 105;
const int inf = 1000000000;
const char ds[4] = {'>', 'v', '<', '^'};
const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

char s[NMAX][NMAX];
int n, m;
pii fn, st;
pair<pii, int> q[NMAX * NMAX * 4];
int d[NMAX][NMAX][4];
int may[NMAX][NMAX][4];

void create_may(int state) {
    forn(i, n)
        forn(j, m) {
            d[i][j][state] = inf;
            may[i][j][state] = 1;
        }

    forn(i, n)
        forn(j, m) {
            if (s[i][j] == '#') may[i][j][state] = 0;
            forn(f, 4)
                if (ds[f] == s[i][j]) {
                    may[i][j][state] = 0;
                    int ff = (f + state) % 4;
                    //cerr << s[i][j] << " " << i << " " << j << " " << ff << endl;
                    int x = i + dx[ff], y = j + dy[ff];
                    while (x >= 0 && x < n && y >= 0 && y < m && s[x][y] == '.') {
                        may[x][y][state] = 0;
                        //cerr << x << " " << y << endl;
                        x += dx[ff], y += dy[ff];
                    }
                }
        }
    //cerr << "===" << endl;
}

void solve(int tst) {
    cin >> n >> m;
    forn(i, n) {
        scanf("%s", s[i]);
        forn(j, m)
            if (s[i][j] == 'S')
                st = mp(i, j), s[i][j] = '.';
            else if (s[i][j] == 'G')
                fn = mp(i, j), s[i][j] = '.';
    }

    forn(i, 4)
        create_may(i);

    int h = 0, t = 0;
    q[t++] = mp(mp(st.fs, st.sc), 0);
    d[st.fs][st.sc][0] = 0;
    while (h < t) {
        int x = q[h].fs.fs, y = q[h].fs.sc, state = q[h].sc;
        h++;
        forn(i, 4) {
            int xx = x + dx[i], yy = y + dy[i], ss = (state + 1) % 4;
            if (xx >= 0 && xx < n && yy >= 0 && yy < m && may[xx][yy][ss] && d[xx][yy][ss] > d[x][y][state] + 1) {
                d[xx][yy][ss] = d[x][y][state] + 1;
                q[t++] = mp(mp(xx, yy), ss);
                cerr << xx << " " << yy << endl;
            }
        }
    }

    int ans = inf;
    forn(i, 4)
        ans = min(ans, d[fn.fs][fn.sc][i]);

    if (ans == inf)
        cout << "Case #" << tst + 1 << ": impossible" << endl;
    else
        cout << "Case #" << tst + 1 << ": " << ans << endl;
}

int main() {
    int tst;
    cin >> tst;
    forn(i, tst)
        solve(i);

    return 0;
}

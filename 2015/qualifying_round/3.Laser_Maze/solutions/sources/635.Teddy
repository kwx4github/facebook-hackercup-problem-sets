#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const double PI = acos(-1);
const double EPS = 1e-7;

#define PB push_back
#define MP make_pair
#define FOR(_i, _from, _to) for (int (_i) = (_from), (_batas) = (_to); (_i) <= (_batas); (_i)++)
#define REP(_i, _n) for (int (_i) = 0, (_batas) = (_n); (_i) < (_batas); (_i)++)
#define SZ(_x) ((int)(_x).size())

const int MAX_R = 100;
const int MAX_C = 100;

struct Pos { int r, c; };

int tc;
int R, C;
char petainp[MAX_R + 5][MAX_C + 5];
bool peta[MAX_R + 5][MAX_C + 5][4];
bool vis[MAX_R + 5][MAX_C + 5][4];

const int nDir = 4;
int dr[] = {0, -1, 0, 1};
int dc[] = {-1, 0, 1, 0};

bool isLaserWall(char c) { return c == '<' || c == '>' || c == '^' || c == 'v'; }
bool isWall(char c) { return c == '#'; }
bool canWalk(char c) { return c == '.'; }
bool inMap(int r, int c) { return r >= 0 && r < R && c >= 0 && c < C; }
int getDirectionDir(char c) {
	switch (c) {
		case '<': return 0;
		case '^': return 1;
		case '>': return 2;
		case 'v': return 3;
	}
	assert(0);
}

void solve() {
	scanf("%d %d", &R, &C);
	REP(i, R) scanf("%s", petainp[i]);
	
	vector<Pos> lasers;
	Pos st, en;
	REP(r, R) REP(c, C) {
		char &curr = petainp[r][c];
		if (curr == 'S') st = (Pos) {r, c}, curr = '.';
		else if (curr == 'G') en = (Pos){r, c}, curr = '.';
		else if (isLaserWall(curr)) lasers.PB((Pos) {r, c});
	}
	
	
	REP(t, 4) {
		REP(r, R) REP(c, C) peta[r][c][t] = canWalk(petainp[r][c]);
		REP(las, SZ(lasers)) {
			Pos pos = lasers[las];
			int initDir = getDirectionDir(petainp[pos.r][pos.c]);
			int dir = (initDir + t) % 4;
			pos.r += dr[dir];
			pos.c += dc[dir];
			while(inMap(pos.r, pos.c) && canWalk(petainp[pos.r][pos.c])) {
				peta[pos.r][pos.c][t] = false;
				pos.r += dr[dir];
				pos.c += dc[dir];
			}
		}
	}
	
	memset(vis, 0, sizeof vis);
	queue<Pos> q;
	q.push(st);
	int ans = -1;
	for (int step = 0; !q.empty(); step++) REP(_, SZ(q)) {
		Pos pos = q.front();
		q.pop();
		if (vis[pos.r][pos.c][step % 4]) continue;
		if (pos.r == en.r && pos.c == en.c) { ans = step; goto hell; }
		vis[pos.r][pos.c][step % 4] = true;
		REP(i, nDir) {
			int toT = (step+1)%4;
			int toR = (pos.r + dr[i]);
			int toC = (pos.c + dc[i]);
			if (inMap(toR, toC) && peta[toR][toC][toT])	q.push((Pos){toR, toC});
		}
	}
	hell:
	
	printf("Case #%d: ", tc);
	if (ans != -1) printf("%d\n", ans);
	else puts("impossible");
}

int main() {
	int T;
	scanf("%d", &T);
	for (tc = 1; tc <= T; tc++) solve();
	return 0;
}

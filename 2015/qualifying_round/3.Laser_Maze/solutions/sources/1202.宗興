#include <bits/stdc++.h>
using namespace std;

#define MAXN 105

int M, N;
char grid[MAXN][MAXN];
int ans[MAXN][MAXN][4];
bool die[MAXN][MAXN][4];

int dx[] = {0, -1, 0, 1};
int dy[] = {1, 0, -1, 0};
queue<pair<pair<int, int>, int> > Q;

void dfs(int x, int y, int tt) {
	while(Q.size())  Q.pop();
	Q.push(make_pair(make_pair(x, y), tt));
	while(Q.size()) {
		pair<pair<int, int>, int> res = Q.front(); Q.pop();
		pair<int, int> loc = res.first;
		x = loc.first; y = loc.second;
		tt = res.second;
		for(int i = 0; i < 4; i++) {
			int xx = x + dx[i], yy = y + dy[i];
			if(xx < 0 || xx >= M || yy < 0 || yy >= N)
				continue;
			if((grid[xx][yy] == '.' || grid[xx][yy] == 'S' || grid[xx][yy] == 'G') && ans[xx][yy][(tt + 1) % 4] == -1 && !die[xx][yy][(tt + 1) % 4]) {
				ans[xx][yy][(tt + 1) % 4] = ans[x][y][tt] + 1;
				Q.push(make_pair(make_pair(xx, yy), (tt + 1) % 4));
			}
		}
	}
}

int main() {
	int T, ks = 1; scanf("%d", &T); while(T--) {
		printf("Case #%d: ", ks++);
		scanf("%d %d", &M, &N);
		for(int i = 0; i < M; i++)
			scanf("%s", grid[i]);
		memset(die, 0, sizeof(die));
		for(int i = 0; i < M; i++) {
			for(int j = 0; j < N; j++) {
				int tmp[4];
				if(grid[i][j] == '<') {
					tmp[0] = 2; tmp[1] = 1; tmp[2] = 0; tmp[3] = 3;
				} else if(grid[i][j] == 'v') {
					tmp[0] = 3; tmp[1] = 2; tmp[2] = 1; tmp[3] = 0;
				} else if(grid[i][j] == '>') {
					tmp[0] = 0; tmp[1] = 3; tmp[2] = 2; tmp[3] = 1;
				} else if(grid[i][j] == '^') {
					tmp[0] = 1; tmp[1] = 0; tmp[2] = 3; tmp[3] = 2;
				} else
					continue;
				for(int k = 0; k < 4; k++) {
					for(int l = 1; ; l++) {
						if(i + dx[tmp[k]] * l < 0 || i + dx[tmp[k]] * l >= M || j + dy[tmp[k]] * l < 0 || j + dy[tmp[k]] * l >= N)
							break;
						if(grid[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l] == '<'
							|| grid[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l] == 'v'
							|| grid[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l] == '>'
							|| grid[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l] == '^'
							|| grid[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l] == '#')
							break;
						die[i + dx[tmp[k]] * l][j + dy[tmp[k]] * l][k] = true;
					}
				}
			}
		}
		/*
		for(int i = 0; i < 4; i++) {
			printf("---------------\n");
			for(int j = 0; j < M; j++) {
				for(int k = 0; k < N; k++) {
					printf("%s", die[j][k][i] ? "1" : "0");
				}
				printf("\n");
			}
			printf("---------------\n");
		}
		*/
		int s_x, s_y, g_x, g_y;
		for(int i = 0; i < M; i++) {
			for(int j = 0; j < N; j++) {
				if(grid[i][j] == 'S') {
					s_x = i; s_y = j;
				} else if(grid[i][j] =='G') {
					g_x = i; g_y = j;
				}
			}
		}
		memset(ans, -1, sizeof(ans));
		/*
		for(int i = 0; i < 4; i++) {
			printf("===============\n");
			for(int j = 0; j < M; j++) {
				for(int k = 0; k < N; k++) {
					printf("%d%c", ans[j][k][i], k == N -1 ? '\n' : ' ');
				}
			}
			printf("===============\n");
		}
		*/
		ans[s_x][s_y][0] = 0;
		dfs(s_x, s_y, 0);
		/*
		for(int i = 0; i < 4; i++) {
			printf("===============\n");
			for(int j = 0; j < M; j++) {
				for(int k = 0; k < N; k++) {
					printf("%d%c", ans[j][k][i], k == N -1 ? '\n' : ' ');
				}
			}
			printf("===============\n");
		}
		*/
		int aans = INT_MAX;
		for(int i = 0; i < 4; i++) {
			if(ans[g_x][g_y][i] != -1)
				aans = min(aans, ans[g_x][g_y][i]);
		}
		if(aans != INT_MAX)
			printf("%d\n", aans);
		else
			printf("impossible\n");
	}
	return 0;
}

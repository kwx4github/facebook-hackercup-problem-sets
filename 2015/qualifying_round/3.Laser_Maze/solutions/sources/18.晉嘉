#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long long ll;
typedef int TYPE;
typedef pair<int,int> PII;
#define mod9 1000000009ll
#define mod7 1000000007ll
#define INF 1023456789
#define FI first
#define SE second
#define MK make_pair
template< class T>
T getint( T& _____ ){
    T _=0,___=1; char tc=getchar();
    while( (tc<'0'||tc>'9')&&tc!='-' ) tc=getchar();
    if( tc == '-' ) tc=getchar() , ___ = -1;
    while(tc>='0'&&tc<='9') _*=10,_+=(tc-'0'),tc=getchar();
    return _*___;
}
int __ = 1;
/******* default *******/
#define N 110
int n , m , ans , cs;
char c[ N ][ N ];
bool blocked[ 4 ][ N ][ N ];
bool vst[ 4 ][ N ][ N ];
int dst[ 4 ][ N ][ N ];
int dn[]={0,1,0,-1};
int dm[]={1,0,-1,0};
int sn , sm , gn , gm;
bool in( int ni , int nj ){
    return ni >= 1 && nj >= 1 && ni <= n && nj <= m;
}
bool not_wall( int ni , int nj ){
    return c[ ni ][ nj ] == '.' || c[ ni ][ nj ] == 'S' || c[ ni ][ nj ] == 'G';
}
void set_laser( int ni , int nj , int dir ){
    for( int k = 0 ; k < 4 ; k ++ ){
        int ndir = ( dir + k ) % 4;
        int si = ni , sj = nj;
        do{
            blocked[ k ][ si ][ sj ] = true;
            si += dn[ ndir ];
            sj += dm[ ndir ];
        }while( in( si , sj ) && not_wall( si , sj ) );
    }
}
void set_maze(){
    memset( blocked , 0 , sizeof( blocked ) );
    for( int i = 1 ; i <= n ; i ++ )
        for( int j = 1 ; j <= m ; j ++ )
            if( c[ i ][ j ] == '#' )
                for( int k = 0 ; k < 4 ; k ++ )
                    blocked[ k ][ i ][ j ] = true;
    for( int i = 1 ; i <= n ; i ++ )
        for( int j = 1 ; j <= m ; j ++ )
            if( c[ i ][ j ] == 'v' ) set_laser( i , j , 1 );
            else if( c[ i ][ j ] == '<' ) set_laser( i , j , 2 );
            else if( c[ i ][ j ] == '^' ) set_laser( i , j , 3 );
            else if( c[ i ][ j ] == '>' ) set_laser( i , j , 0 );
}
void init(){
    n = getint( n ); m = getint( m );
    for( int i = 1 ; i <= n ; i ++ )
        scanf( "%s" , c[ i ] + 1 );
    set_maze();
    for( int i = 1 ; i <= n ; i ++ )
        for( int j = 1 ; j <= m ; j ++ )
            if( c[ i ][ j ] == 'S' ) sn = i , sm = j;
            else if( c[ i ][ j ] == 'G' ) gn = i , gm = j;
    memset( vst , 0 , sizeof( vst ) );
    ans = -1;
}
queue< pair< int , PII > > Q;
void BFS(){
    while( Q.size() ) Q.pop();
    dst[ 0 ][ sn ][ sm ] = 0;
    vst[ 0 ][ sn ][ sm ] = true;
    Q.push( MK( 0 , MK( sn , sm ) ) );
    while( Q.size() ){
        pair< int , PII > tp = Q.front(); Q.pop();
        int nk = tp.FI , nn = tp.SE.FI , nm = tp.SE.SE;
        int nxtk = ( nk + 1 ) % 4;
        for( int i = 0 ; i < 4 ; i ++ ){
            int nxtn = nn + dn[ i ] , nxtm = nm + dm[ i ];
            if( in( nxtn , nxtm ) && !blocked[ nxtk ][ nxtn ][ nxtm ] &&
                                    !vst[ nxtk ][ nxtn ][ nxtm ] ){
                vst[ nxtk ][ nxtn ][ nxtm ] = true;
                dst[ nxtk ][ nxtn ][ nxtm ] = dst[ nk ][ nn ][ nm ] + 1;
                Q.push( MK( nxtk , MK( nxtn , nxtm ) ) );
                if( nxtn == gn && nxtm == gm ){
                    ans = dst[ nxtk ][ nxtn ][ nxtm ];
                    return;
                }
            }
        }
    }
}
void solve(){
    BFS();
    printf( "Case #%d: " , ++ cs );
    if( ans == -1 ) puts( "impossible" );
    else printf( "%d\n" , ans );
}
int main(){
    freopen( "laser_maze.txt" , "r" , stdin );
    freopen( "output_c.txt" , "w" , stdout );

    __ = getint( __ ); while( __ -- ){
        init();
        solve();
    }
}



import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Created by Ozan on 9.1.2015.
 */
public class Solution {
    private Scanner in = new Scanner(System.in);
    private List<Board> listBoard = new ArrayList<Board>();

    class Board {
        List<String> lines = new ArrayList<String>();
        Board left=null,right=null,up=null,down=null,parent=null;

        Board(){}

        Board(Board oldBoard){
            if(oldBoard != null){
                this.lines.clear();
                this.lines.addAll(oldBoard.lines);
                this.left = oldBoard.left;
                this.right = oldBoard.right;
                this.up = oldBoard.up;
                this.down = oldBoard.down;
                this.parent = oldBoard.parent;
            }
        }

        //-1 invalid, 0 valid, 1 win
        int isValid(){
            for(int i=0 ; i<lines.size() ; i++){
                if(lines.get(i).indexOf("S") >=0 ){
                    int posS = lines.get(i).indexOf("S");

                    //left-right check
                    if(posS < lines.get(i).indexOf("<")){
                        return -1;
                    }
                    else if(lines.get(i).indexOf(">") >=0 && posS > lines.get(i).indexOf(">")){
                        return -1;
                    }

                    //up-down check
                    for(int j=0 ; j<lines.size() ; j++){
                        if(j<i){
                            if(lines.get(j).charAt(posS) == 'v'){
                                return -1;
                            }
                        }
                        else if(j>i){
                            if(lines.get(j).charAt(posS) == '^'){
                                return -1;
                            }
                        }
                    }
                }

                if(lines.get(i).indexOf("O") >=0 ){
                    int posO = lines.get(i).indexOf("O");

                    //left-right check
                    if(posO < lines.get(i).indexOf("<")){
                        return -1;
                    }
                    else if(lines.get(i).indexOf(">") >=0 && posO > lines.get(i).indexOf(">")){
                        return -1;
                    }

                    //up-down check
                    for(int j=0 ; j<lines.size() ; j++){
                        if(j<i){
                            if(lines.get(j).charAt(posO) == 'v'){
                                return -1;
                            }
                        }
                        else if(j>i){
                            if(lines.get(j).charAt(posO) == '^'){
                                return -1;
                            }
                        }
                    }
                }

            }

            for(int i=0 ; i<lines.size() ; i++){
                if(lines.get(i).indexOf("O") >=0 ){
                    return 1;
                }
            }

            return 0;
        }

        void printBoard(){
            for(int i=0 ; i<lines.size() ; i++){
                System.out.println(lines.get(i).toString());
            }
        }

        Board moveLasers(){
            for(int i=0 ; i<lines.size() ; i++){
                lines.set(i, lines.get(i).replace('<','a'));
                lines.set(i, lines.get(i).replace('^', 'b'));
                lines.set(i, lines.get(i).replace('>', 'c'));
                lines.set(i, lines.get(i).replace('v', 'd'));

                lines.set(i, lines.get(i).replace('a', '^'));
                lines.set(i, lines.get(i).replace('b', '>'));
                lines.set(i, lines.get(i).replace('c', 'v'));
                lines.set(i, lines.get(i).replace('d', '<'));
            }
            return this;
        }

        Board moveLasersBack(){
            for(int i=0 ; i<lines.size() ; i++){
                lines.set(i, lines.get(i).replace('<','a'));
                lines.set(i, lines.get(i).replace('^', 'b'));
                lines.set(i, lines.get(i).replace('>', 'c'));
                lines.set(i, lines.get(i).replace('v', 'd'));

                lines.set(i, lines.get(i).replace('a', 'v'));
                lines.set(i, lines.get(i).replace('b', '<'));
                lines.set(i, lines.get(i).replace('c', '^'));
                lines.set(i, lines.get(i).replace('d', '>'));
            }
            return this;
        }

        boolean moveRight(){
            for(int i=0 ; i<lines.size() ; i++){
                String temp = lines.get(i);
                lines.set(i, lines.get(i).replace("S.",".S"));
                if(temp.equals(lines.get(i))){
                    lines.set(i, lines.get(i).replace("SG",".O"));
                }

                String result = lines.get(i);
                if(!temp.equals(result)){
                    return true;
                }
            }
            return false;
        }

        boolean moveLeft(){
            for(int i=0 ; i<lines.size() ; i++){
                String temp = lines.get(i);
                lines.set(i, lines.get(i).replace(".S","S."));
                if(temp.equals(lines.get(i))){
                    lines.set(i, lines.get(i).replace("GS","O."));
                }
                String result = lines.get(i);
                if(!temp.equals(result)){
                    return true;
                }
            }
            return false;
        }

        boolean moveDown(){
            for(int i=0 ; i<lines.size()-1 ; i++){
                int posS = lines.get(i).indexOf("S");
                if(posS >= 0){
                    char valueDown = lines.get(i+1).charAt(posS);
                    if(valueDown == '.'){
                        StringBuilder builder = new StringBuilder(lines.get(i+1));
                        builder.replace(posS, posS+1, "S");
                        lines.set(i+1, builder.toString());

                        lines.set(i, lines.get(i).replace("S","."));

                        return true;
                    }
                    else if(valueDown == 'G'){
                        StringBuilder builder = new StringBuilder(lines.get(i+1));
                        builder.replace(posS, posS+1, "O");
                        lines.set(i+1, builder.toString());

                        lines.set(i, lines.get(i).replace("S","."));

                        return true;
                    }
                }
            }
            return false;
        }

        boolean moveUp(){
            for(int i=1 ; i<lines.size() ; i++){
                int posS = lines.get(i).indexOf("S");
                if(posS >= 0){
                    char valueDown = lines.get(i-1).charAt(posS);
                    if(valueDown == '.'){
                        StringBuilder builder = new StringBuilder(lines.get(i-1));
                        builder.replace(posS, posS+1, "S");
                        lines.set(i-1, builder.toString());

                        lines.set(i, lines.get(i).replace("S","."));

                        return true;
                    }
                    else if(valueDown == 'G'){
                        StringBuilder builder = new StringBuilder(lines.get(i-1));
                        builder.replace(posS, posS+1, "O");
                        lines.set(i-1, builder.toString());

                        lines.set(i, lines.get(i).replace("S","."));

                        return true;
                    }
                }
            }
            return false;
        }
    }

    private int checkIfExist(Board obj){
        int index = -1;

        for(int i=0 ; i<listBoard.size() ; i++){
            if(listBoard.get(i).lines.equals(obj.lines)){
                index = i;
                break;
            }
        }
        return index;
    }

    private void startSolution(){
        int T = in.nextInt();

        for(int i=0 ; i<T ; i++){
            int M = in.nextInt();
            int N = in.nextInt();

            listBoard.clear();

            int minSOLUTION = -1;

            Board mainBoard = new Board();
            for(int j=0 ; j<M ; j++){
                mainBoard.lines.add(in.next());
            }
            Board tempBoard = new Board(mainBoard);

            int count = 0;
            while(true){
                Board left = new Board(tempBoard);
                Board right = new Board(tempBoard);
                Board up = new Board(tempBoard);
                Board down = new Board(tempBoard);

                if(left.moveLeft()){
                    left.moveLasers();
                    if(left.isValid() >= 0 && checkIfExist(left) == -1){
                        listBoard.add(left);
                        tempBoard.left = left;
                        tempBoard.left.parent = tempBoard;

                        if(left.isValid() == 1){
                            int parentCount = 0;
                            Board countBoard = new Board(left);

                            do{
                                //countBoard.printBoard();
                                parentCount++;
                                if(countBoard.parent == null){
                                    countBoard = null;
                                }
                                else{
                                    countBoard = new Board(countBoard.parent);
                                }
                            }while (countBoard != null);

                            minSOLUTION = parentCount;
                            break;
                            //System.out.println("SOLUTION: "+ parentCount);
                        }
                    }
                }
                if(right.moveRight()){
                    right.moveLasers();
                    if(right.isValid() >= 0 && checkIfExist(right) == -1){
                        listBoard.add(right);
                        tempBoard.right = right;
                        tempBoard.right.parent = tempBoard;

                        if(right.isValid() == 1){
                            int parentCount = 0;
                            Board countBoard = new Board(right);

                            do{
                                //countBoard.printBoard();
                                parentCount++;
                                if(countBoard.parent == null){
                                    countBoard = null;
                                }
                                else{
                                    countBoard = new Board(countBoard.parent);
                                }
                            }while (countBoard != null);

                            minSOLUTION = parentCount;
                            break;
                            //System.out.println("SOLUTION: "+ parentCount);
                        }
                    }
                }
                if(up.moveUp()){
                    up.moveLasers();
                    if(up.isValid() >= 0 && checkIfExist(up) == -1){
                        listBoard.add(up);
                        tempBoard.up = up;
                        tempBoard.up.parent = tempBoard;

                        if(up.isValid() == 1){
                            int parentCount = 0;
                            Board countBoard = new Board(up);

                            do{
                                //countBoard.printBoard();
                                parentCount++;
                                if(countBoard.parent == null){
                                    countBoard = null;
                                }
                                else{
                                    countBoard = new Board(countBoard.parent);
                                }
                            }while (countBoard != null);

                            minSOLUTION = parentCount;
                            break;
                            //System.out.println("SOLUTION: "+ parentCount);
                        }
                    }
                }
                 if(down.moveDown()){
                     down.moveLasers();
                     if(down.isValid() >= 0 && checkIfExist(down) == -1){
                         listBoard.add(down);
                         tempBoard.down = down;
                         tempBoard.down.parent = tempBoard;

                         if(down.isValid() == 1){
                             int parentCount = 0;
                             Board countBoard = new Board(down);

                             do{
                                 //countBoard.printBoard();
                                 parentCount++;
                                 if(countBoard.parent == null){
                                     countBoard = null;
                                 }
                                 else{
                                     countBoard = new Board(countBoard.parent);
                                 }
                             }while (countBoard != null);

                             minSOLUTION = parentCount;
                             break;
                             //System.out.println("SOLUTION: "+ parentCount);
                         }
                     }
                }

                if(count<listBoard.size()){
                    tempBoard = listBoard.get(count);
                    count++;
                }
                else{
                    break;
                }
            }

            if(minSOLUTION == -1){
                System.out.println("Case #"+(i+1)+": impossible");
            }
            else{
                System.out.println("Case #"+(i+1)+": "+(minSOLUTION-1));
            }

        }
    }


    public static void main(String[] args) {
        Solution solution = new Solution();
        solution.startSolution();
    }
}

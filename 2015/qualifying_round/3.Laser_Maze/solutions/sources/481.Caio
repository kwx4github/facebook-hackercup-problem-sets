#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <string.h>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
#include <map>
#include <vector>
#include <algorithm>
#include <bitset>
#include <list>
#define ll long long
#define ull unsigned long long
#define INF 0x3f3f3f3f
#define INFL 0x3FFFFFFFFFFFFFFFLL
#define NP next_permutation
#define PP prev_permutation
#define mp make_pair
#define abs(x) (((x) < 0) ? - (x) : (x))
#define pi 3.1415926535897932384626433832795
#define rep(k, n) for(int (k) = 0; (k) < (int)(n); (k)++)
#define Rep(k, n) for(int (k) = 1; (k) <= (int)(n); (k)++) 
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define TRvii(c, it) for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[6]={2,1,-1,-2,-1,1};int dy[6]={0,1,1,0,-1,-1}; //Hexagonal Direction
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef pair<ii,int> iii;
typedef vector<ii> vii; 
typedef map<string, int> si;
typedef map<int, string> is;
typedef map<string,string> ss;

char grid[105][105];
int n,m,x,y,x_torre,y_torre;
vector<iii> torres;
typedef pair<int,ii> piii;
bool vis[110][110][5];
int status[110][110][4];

void atualizaTorres()
{
    int tam = sz(torres);
    for(int i = 0; i < tam; i++){
       torres[i].second++;
       torres[i].second %= 4;
    }
}

void func()
{
    int tam = sz(torres);
    for(int i = 0; i < 4; i++){
       for(int j = 0; j < tam; j++)
          status[torres[j].first.first][torres[j].first.second][i] = torres[j].second;
       atualizaTorres();
    }
}

bool possivel(int x, int y)
{
    return x >= 0 and x < n and y >= 0 and y < m and (grid[x][y] == '.' or grid[x][y] == 'G' or grid[x][y] == 'S');
}

bool checa_hor(int x, int y, int yt, int t)
{
     int pos = t%4;
     if(status[x][yt][pos] == '^' or status[x][yt][pos] == 'v')
        return true;
     int value = status[x][yt][pos]==0?-1:1;
     if(status[x][yt][pos]==0)//direita
        if(y < yt)
           return true;
     if(status[x][yt][pos]==2)//esquerda
        if(y > yt)
           return true;
     
     return false;
}

bool checa_vert(int y, int x, int xt, int t)
{
     int pos = t%4;
     if(status[xt][y][pos] == '<' or status[xt][y][pos] == '>')
        return true;
     int value = status[xt][y][pos]==1?-1:1;
     if(status[xt][y][pos]==1)//cima
        if(x < xt)
           return true;
     if(status[xt][y][pos]==3)//baixo
        if(x > xt)
           return true;
     
     return false;
}

bool possivel2(int x, int y, int t)
{
    //Horizontal
    for(int i = y; i < m; i++){
       if(grid[x][i] == '#')
          break;
       if(grid[x][i] == '<' or grid[x][i] == '^' or grid[x][i] == '>' or grid[x][i] == 'v'){
          if(checa_hor(x,y,i,t))
             return false;
             break;
       }
    }
    for(int i = y; i >= 0; i--){
       if(grid[x][i] == '#')
          break;
       if(grid[x][i] == '<' or grid[x][i] == '^' or grid[x][i] == '>' or grid[x][i] == 'v'){
          if(checa_hor(x,y,i,t))
             return false;
          break;
       }
    }
    //Vertical
    for(int i = x; i < n; i++){
       if(grid[i][y] == '#')
          break;
       if(grid[i][y] == '<' or grid[i][y] == '^' or grid[i][y] == '>' or grid[i][y] == 'v'){
          if(checa_vert(y,x,i,t))
             return false;
          break;
       }
    }
    for(int i = x; i >= 0; i--){
       if(grid[i][y] == '#')
          break;
       if(grid[i][y] == '<' or grid[i][y] == '^' or grid[i][y] == '>' or grid[i][y] == 'v'){
          if(checa_vert(y,x,i,t))
             return false;
          break;
       }
    }
             
    return true;
}

int bfs()
{
    int a,b,t,pos;
    piii value;
    priority_queue<int, vector<piii>, greater<piii> > fila;
    fila.push(piii(0, ii(x,y)));
    while(sz(fila)){
       value = fila.top();
       fila.pop();
       if(grid[value.second.first][value.second.second] == 'G')
          return value.first;
       pos = value.first % 4;
       if(vis[value.second.first][value.second.second][status[x_torre][y_torre][pos]])
          continue;
       vis[value.second.first][value.second.second][status[x_torre][y_torre][pos]] = true;
       for(int i = 0; i < 4; i++){
          a = value.second.first + dx[i];
          b = value.second.second + dy[i];
          t = value.first;
          if(possivel(a,b) and possivel2(a,b,t+1))
             fila.push(piii(t+1, ii(a,b)));
       }
    }
    return -1;
}

int main()
{
    int t,caso=1,seta;
    bool prim;
    scanf("%d",&t);
    while(t--){
       torres.clear();
       scanf("%d%d",&n,&m); getchar();
       prim = true;
       x_torre = 0;
       y_torre = 0;
       for(int i = 0; i < n; i++){
          gets(grid[i]);
          for(int j = 0; j < m; j++){
             if(grid[i][j] == 'S'){
                x = i;
                y = j;
             }
             if(grid[i][j] == '<' or grid[i][j] == '>' or grid[i][j] == '^' or grid[i][j] == 'v'){
                seta = 0;
                seta = grid[i][j] == '^'?1:seta;
                seta = grid[i][j] == '>'?2:seta;
                seta = grid[i][j] == 'v'?3:seta;
                if(prim){
                   x_torre = i;
                   y_torre = j;
                   prim = false;
                }
                torres.pb(iii(ii(i,j), seta));
             }          
          }
       }
       /////////////////////////////////////////////////////////////////////////
       for(int i = 0; i < n; i++)
          for(int j = 0; j < m; j++)
             for(int k = 0; k < 4; k++)
                vis[i][j][k] = false;
       /////////////////////////////////////////////////////////////////////////
       func();
       printf("Case #%d: ", caso++);
       int ans = bfs();
       if(ans == -1)
          puts("impossible");
       else
          printf("%d\n", ans);
    }
    return 0;
}

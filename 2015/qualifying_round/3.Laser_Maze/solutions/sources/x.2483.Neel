#include <iostream>
#include <string>
#include <queue>

using namespace std;
struct node{
	int x;
	int y;
	int turn;
};

typedef struct node nd;
char laser[4] = {'<','^','>','v'};


/*
	# - 4
	. - -1
*/
char new_val(int val, int turn){

	int id = 0;

	if( val >= 0 && val <= 3){
		return (val + turn)%4;
	}

	return val;
}

int map_char(char s, int turn){
	int id  = -1;

	for(int i=0;i<4;i++){
		if(laser[i] == s)
			return new_val(i, turn);
	}

	if( s == '#')
		return 4;
	else
		return -1;
}

void change_ground(int gr[][200], int m,int n){

	for(int i=1;i <=m ;i++){
		for(int j = 1; j <= n;j++){
			int dir = gr[i][j];

			int x = i , y= j;
			if(dir == 0){
				gr[x][y] = 4;
				y--;
				while( gr[x][y] < 0){
					gr[x][y] = 4;
					y--;
				}
			}
			if( dir == 1){
				gr[x][y] = 4;
				x--;
				while( gr[x][y] < 0){
					gr[x][y] = 4;
					x--;
				}
			}
			if(dir == 2){
				gr[x][y] = 4;
				y++;
				while( gr[x][y] < 0){
					gr[x][y] = 4;
					y++;
				}
			}
			if(dir == 3){
				gr[x][y] = 4;
				x++;
				while( gr[x][y] < 0){
					gr[x][y] = 4;
					x++;
				}
			}
		}
	}
}

bool is_poss(int x, int y, int g[][200], int col[][200]){
	if(g[x][y] > 0)
		return false;

	if(col[x][y] !=0)
		return false;

	return true;
}

nd new_node(int x,int y, int turn){
	nd nn;
	nn.x = x;
	nn.y = y;
	nn.turn = turn;

	return nn;
}
int main(){

	int t;
	cin >> t;
	for(int tt=1;tt<=t;tt++){
		//cout << "############"<<tt<< endl; 
		char real[200][200];
		int gr[4][200][200];
		int col[4][200][200];

		int sx,sy;
		int dx,dy;
		int m,n;
		cin >> m >> n;
		for(int i = 0;i<=m+1 ; i++){
			for(int j=0;j<=n+1;j++)
				real[i][j] = '#';
		}

		for(int i = 1;i<=m;i++){
			string str;
			cin >> str;

			for(int j =0;j<n;j++){
				real[i][j+1] = str[j];

				if( str[j] == 'S'){
					sx = i;
					sy = j+1;
				}
				else if(str[j] == 'G'){
					dx = i;
					dy = j+1;

				}
			}
		}

		for(int k=0;k<4;k++){

			for(int i=0;i<=m+1;i++){
				for(int j=0;j<= n+1;j++){
					gr[k][i][j] = map_char (real[i][j], k);
					col[k][i][j] = 0;
				}
			}

			change_ground(gr[k], m,n);
			//for(int i=0;i<=m+1;i++){
			//	for(int j=0;j<= n+1;j++){
			//		cout << gr[k][i][j] << '\t';
			//	}
			//	cout << endl;
			//}
			//cout << endl;
		}

		nd start;
		start.x = sx;
		start.y = sy;
		start.turn = 0;
		col[0][sx][sy]  = 1;
		queue<nd> q;
		int chk =-1;

		q.push(start);

		int cnt=-1;
		while( !q.empty()){
			cnt ++;
			nd nn = q.front();
			q.pop();

			if(nn.x == dx && nn.y == dy){
				chk =nn.turn;
				break;
			}

			//if(cnt > 10)
			//	break;

			int nx = nn.x;
			int ny = nn.y;
			int nturn = (nn.turn + 1)%4;
			//cout << nx << " " << ny <<  " " << nn.turn<< ":";

			if( is_poss(nx + 1,ny, gr[nturn], col[nturn])){
				col[nturn][nx + 1][ny] = col[nn.turn][nx][ny] + 1;
				
				q.push( new_node(nx + 1, ny, nturn ) );
				//cout << nx + 1 << " " << ny << ",";
			}

			if( is_poss(nx - 1,ny, gr[nturn], col[nturn])){
				col[nturn][nx - 1][ny] = col[nn.turn][nx][ny] + 1;
				
				q.push( new_node(nx - 1, ny, nturn ) );
				//cout << nx - 1 << " " << ny << ",";
			}

			if( is_poss(nx ,ny + 1, gr[nturn], col[nturn])){
				col[nturn][nx][ny + 1] = col[nn.turn][nx][ny] + 1;
				
				q.push( new_node(nx, ny + 1, nturn ) );
				//cout << nx  << " " << ny + 1<< ",";
			}

			if( is_poss(nx ,ny - 1, gr[nturn], col[nturn])){
				col[nturn][nx][ny - 1] = col[nn.turn][nx][ny] + 1;
				
				q.push( new_node(nx, ny - 1, nturn ) );
				//cout << nx << " " << ny - 1 << ",";
			}
			//cout << endl;
		}

		cout << "Case " << tt << ": ";
		if(chk == -1)
			cout << "impossible\n";
		else
			cout << col[chk][dx][dy] - 1 << endl;

	}
	
}
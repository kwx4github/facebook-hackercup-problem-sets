#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define mp make_pair

int t, m, n;
char peta[111][111];
bool laser[111][111];
bool flag[111][111][4] = {};

void tower()
{
    memset(laser, 0, sizeof(laser));
    for (int i=0; i<m; i++){
        for (int j=0; j<n; j++){
            if (peta[i][j] == '^'){
                peta[i][j] = '>';
                int tmp = j+1;
                while (tmp < n && peta[i][tmp] == '.') {laser[i][tmp] = true; tmp++;}
            }
            else if (peta[i][j] == '>'){
                peta[i][j] = 'v';
                int tmp = i+1;
                while (tmp < m && peta[tmp][j] == '.') {laser[tmp][j] = true; tmp++;}
            }
            else if (peta[i][j] == 'v'){
                peta[i][j] = '<';
                int tmp = j-1;
                while (tmp >= 0 && peta[i][tmp] == '.') {laser[i][tmp] = true; tmp--;}
            }
            else if (peta[i][j] == '<'){
                peta[i][j] = '^';
                int tmp = i-1;
                while (tmp >= 0 && peta[tmp][j] == '.') {laser[tmp][j] = true; tmp--;}
            }
        }
        //for (int j=0; j<n; j++) if (laser[i][j]) cout << "*"; else cout << "."; cout << endl;
    }
    //cout << endl;
}

int main(){
    scanf("%d", &t);
    ofstream ans;
    ans.open("Laser.txt");

    for (int i=1; i<=t; i++){
        scanf("%d %d ", &m, &n);
        for (int i=0; i<m; i++) gets(peta[i]);
        queue <pair<pair<int, int>, int> > bfs;
        pair <int, int> tujuan;
        for (int i=0; i<m; i++){
            for (int j=0; j<n; j++){
                if (peta[i][j] == 'S') {bfs.push(mp(mp(i, j), 0)); peta[i][j] = '.';}
                else if (peta[i][j] == 'G') {tujuan = mp(i, j); peta[i][j] = '.';}
            }
        }
        int ct = 0;
        bool possible = false;
        memset(flag, 0, sizeof(flag));
        memset(laser, 0, sizeof(laser));
        while (!bfs.empty()){
            if (bfs.front().se != ct){
                tower();
                ct = bfs.front().se;
            }
            int x = bfs.front().fi.fi, y = bfs.front().fi.se;
            if (x >= 0 && y >= 0 && x < m && y < n && !laser[x][y] && peta[x][y] == '.' && !flag[x][y][ct%4]){
                flag[x][y][ct%4] = true;
                bfs.push(mp(mp(x-1, y), ct+1));
                bfs.push(mp(mp(x, y-1), ct+1));
                bfs.push(mp(mp(x+1, y), ct+1));
                bfs.push(mp(mp(x, y+1), ct+1));
                if (bfs.front().fi == tujuan) {possible = true; break;}
            }
            bfs.pop();
        }

        ans << "Case #" << i << ": ";
        if (possible) ans << ct << endl; else ans << "impossible\n";
    }

    ans.close();
    return 0;
}

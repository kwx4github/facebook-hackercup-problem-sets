#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int>   PI;
typedef vector<int> VI;
typedef long long LL;

#define FOR(i,a,b) for(register int i=a;i<(b);i++)
#define FORE(i,a,b) FOR(i,a,(b)+1)
#define FORD(i,a,b) for(int i=a;i>=(b);i--)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define mod 1000000007
#define MP make_pair
#define INF mod

struct destruct
{
    int x, y, k;
};
int t, m, n;
string input[101], board[4][101];
map<int, int> vis;
int dx[] = {-1,0,1,0};
int dy[] = {0,-1,0,1};
destruct s, g;

int ash(destruct bourne)
{
    return bourne.k*1000000+bourne.x*1000+bourne.y;
}

bool destruction_possible(destruct bourne)
{
    if(bourne.x<0||bourne.x>=m)return 0;
    if(bourne.y<0||bourne.y>=n)return 0;
    if(vis.count(ash(bourne)))return 0;
    if(board[bourne.k][bourne.x][bourne.y]=='#')return 0;
    return 1;
}

void go_destroy()
{
    queue<destruct> q;
    q.push(s);
    vis[ash(s)] = 0;
    while(!q.empty())
    {
        auto x = q.front();
        q.pop();
        REP(k,4)
        {
            destruct next = {x.x+dx[k],x.y+dy[k],(x.k+1)%4};
            if(destruction_possible(next))
            {
                vis[ash(next)] = vis[ash(x)] + 1;
                q.push(next);
            }
        }
        //cerr<<x.x<<' '<<x.y<<' '<<x.k<<endl;
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("a.in","r",stdin);
    freopen("out.txt","w",stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin >> t;
    REP(T,t)
    {
        cout << "Case #" << T+1 << ": ";
        cin >> m >> n;
        REP(i,m) cin >> input[i];
        REP(i,m) REP(k,4) board[k][i] = string("",n);
        vis.clear();
        REP(i,m) REP(j,n)
        {
            int st=-1;
            switch(input[i][j])
            {
                case '>': st = '0';break;
                case 'v': st = '1';break;
                case '<': st = '2';break;
                case '^': st = '3';break;
                case 'S': s = {i,j,0};break;
                case 'G': g = {i,j,0};break;
            }
            if(st!=-1) REP(k,4) board[k][i][j] = ((st-'0'+k)%4)+'0';
            else REP(k,4) board[k][i][j] = input[i][j];
        }
        REP(k,4) REP(i,m) REP(j,n)
        {
            if(board[k][i][j]=='0')
            {
                board[k][i][j] = '#';
                FOR(r,j+1,n)
                {
                    if(board[k][i][r]=='S' or board[k][i][r]=='.' or board[k][i][r]=='G' ) board[k][i][r] = '#';
                    else break;
                }
            }
            if(board[k][i][j]=='2')
            {
                board[k][i][j] = '#';
                FORD(r,j-1,0)
                {
                    if(board[k][i][r]=='S' or board[k][i][r]=='.' or board[k][i][r]=='G' ) board[k][i][r] = '#';
                    else break;
                }
            }
            if(board[k][i][j]=='1')
            {
                board[k][i][j] = '#';
                FOR(c,i+1,n)
                {
                    if(board[k][c][j]=='S' or board[k][c][j]=='.' or board[k][c][j]=='G' ) board[k][c][j] = '#';
                    else break;
                }
            }
            if(board[k][i][j]=='3')
            {
                board[k][i][j] = '#';
                FORD(c,i-1,0)
                {
                    if(board[k][c][j]=='S' or board[k][c][j]=='.' or board[k][c][j]=='G' ) board[k][c][j] = '#';
                    else break;
                }
            }
        }
        go_destroy();
        int ans = INT_MAX;
        REP(k,4)if(vis[ash({g.x,g.y,k})]>0)ans=min(ans,vis[ash({g.x,g.y,k})]);
        if(ans == INT_MAX) cout<<"impossible"<<endl;
        else cout << ans << endl;
    }
    return 0;
}

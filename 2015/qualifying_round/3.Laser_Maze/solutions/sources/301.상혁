#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<queue>
using namespace std;

char board[111][111];
int dp[111][111][4];
int b[111][111];
bool safe[111][111][4];

struct state{
	int x, y, t;
	state(int _x, int _y, int _t){
		x = _x; y = _y; t = _t;
	}
};

// 0123 -> NESW

int h, w;

const int WALL = -1;
const int N = 0, E = 1, S = 2, W = 3;
const int GOAL = 100;
const int B = 10;
const int INF = 0x7fFFffFF;

void update(int x, int y){
	if (b[x][y] == WALL){
		for (int i = 0; i < 4; i++) safe[x][y][i] = false;
		return;
	}
	if (b[x][y] == GOAL || b[x][y] == B) return;

	for (int i = 0; i < 4; i++){
		int curr = (b[x][y] + i) % 4;
		safe[x][y][curr] = false;
		if (curr == N){
			int tx = x - 1;
			while (1){
				if (b[tx][y] > 5){
					safe[tx][y][i] = false;
					tx--;
				}
				else break;
			}
		}
		else if (curr == S){
			int tx = x + 1;
			while (1){
				if (b[tx][y] > 5){
					safe[tx][y][i] = false;
					tx++;
				}
				else break;
			}
		}
		else if (curr == W){
			int ty = y - 1;
			while (1){
				if (b[x][ty] > 5){
					safe[x][ty][i] = false;
					ty--;
				}
				else break;
			}
		}
		else if (curr == E){
			int ty = y + 1;
			while (1){
				if (b[x][ty] > 5){
					safe[x][ty][i] = false;
					ty++;
				}
				else break;
			}
		}
	}
}

int main(){
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++){
		cin >> h >> w;
		for (int i = 1; i <= h; i++) cin >> &(board[i][1]);

		for (int j = 0; j <= w + 1; j++) b[0][j] = b[h + 1][j] = WALL;
		for (int i = 0; i <= h + 1; i++) b[i][0] = b[i][w + 1] = WALL;

		int x, y;
		for (int i = 1; i <= h; i++){
			for (int j = 1; j <= w; j++){
				switch (board[i][j]){
				case '#': b[i][j] = WALL; break;
				case 'S':
					b[i][j] = B;
					x = i; y = j; break;
				case 'G':
					b[i][j] = GOAL; break;
				case '<':
					b[i][j] = W; break;
				case '>':
					b[i][j] = E; break;
				case '^':
					b[i][j] = N; break;
				case 'v':
					b[i][j] = S; break;
				default: b[i][j] = B; break;
				}
			}
		}

		queue<state> q;
		q.push(state(x, y, 0));

		for (int i = 1; i <= h; i++)for (int j = 1; j <= w; j++)for (int k = 0; k < 4; k++) dp[i][j][k] = INF;
		for (int i = 0; i < 111; i++)for (int j = 0; j < 111; j++)for (int k = 0; k < 4; k++) safe[i][j][k] = true;
		for (int i = 0; i <= h + 1; i++)for (int j = 0; j <= w + 1; j++) update(i, j);

		int ans = 0;

		while (!q.empty()){
			state here = q.front(); q.pop();

			if (b[here.x][here.y] == GOAL){
				ans = here.t;
				break;
			}

			if (here.t < dp[here.x][here.y][here.t % 4]){
				dp[here.x][here.y][here.t % 4] = here.t;

				if (safe[here.x - 1][here.y][(here.t + 1) % 4]) q.push(state(here.x - 1, here.y, here.t + 1));
				if (safe[here.x + 1][here.y][(here.t + 1) % 4]) q.push(state(here.x + 1, here.y, here.t + 1));
				if (safe[here.x][here.y - 1][(here.t + 1) % 4]) q.push(state(here.x, here.y - 1, here.t + 1));
				if (safe[here.x][here.y + 1][(here.t + 1) % 4]) q.push(state(here.x, here.y + 1, here.t + 1));
			}
		}

		cout << "Case #" << tc << ": ";
		if (ans == 0) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}
#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:1000000000")
#include <iostream>
#include <algorithm>
#include <memory.h>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <complex>
#include <string>
#include <bitset>
#include <vector>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef complex < double > cd;

const bool db = false;

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define sd second
#define fs first

#define inf 1000000007
#define nmax 100010
#define mmax 100010
#define eps 1e-9

int t, n, m;
int ds[111][111][4];
bool can[111][111][4];
char r[111][111];
int tp[256];
pair < int, int > st, fi;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int main() {
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("refrain.in", "r", stdin); freopen("refrain.out", "w", stdout);
	scanf("%d", &t);
	memset(tp, -1, sizeof(tp));
	tp['<'] = 0;
	tp['^'] = 1;
	tp['v'] = 2;
	tp['>'] = 3;
	for(int it = 1; it <= t; ++it) {
		scanf("%d%d", &n, &m);
		for(int i = 1; i <= n; ++i)
			for(int j = 1; j <= m; ++j) {
				cin >> r[i][j];
				if(r[i][j] == 'S')
					st = mp(i, j);
				if(r[i][j] == 'G')
					fi = mp(i, j);
			}
		memset(ds, -1, sizeof(ds));
		memset(can, 0, sizeof(can));
		for(int i = 1; i <= n; ++i) {
			for(int j = 1; j <= m; ++j) {
				if(r[i][j] == '#') {
					can[i][j][0] = can[i][j][1] = can[i][j][2] = can[i][j][3] = true;
				}
				if(tp[r[i][j]] == -1)
					continue;
				int id = tp[r[i][j]];
				can[i][j][0] = can[i][j][1] = can[i][j][2] = can[i][j][3] = true;
				for(int k = i - 1; k >= 1; --k) {
					if(r[k][j] != '#') {
						can[k][j][(4 - id + 1) % 4] = true;
						continue;
					}
					break;
				}
				for(int k = j + 1; k <= m; ++k) {
					if(r[i][k] != '#') {
						can[i][k][(4 - id + 2) % 4] = true;
						continue;
					}
					break;
				}
				for(int k = i + 1; k <= n; ++k) {
					if(r[k][j] != '#') {
						can[k][j][(4 - id + 3) % 4] = true;
						continue;
					}
					break;
				}
				for(int k = j - 1; k >= 1; --k) {
					if(r[i][k] != '#') {
						can[i][k][(4 - id + 4) % 4] = true;
						continue;
					}
					break;
				}
			}
		}
		queue < pair < pair < int, int >, int > > Q;
		ds[st.fs][st.sd][0] = 0;
		Q.push(mp(st, 0));
		while(!Q.empty()) {
			int X = Q.front().fs.fs, Y = Q.front().fs.sd, Z = Q.front().sd;
			//cout << X << " " << Y << " " << Z << " " << ds[X][Y][Z] << endl;
			Q.pop();
			for(int k = 0; k < 4; ++k) {
				int nx = X + dx[k], ny = Y + dy[k];
				if(nx < 1 || ny < 1 || nx > n || ny > m)
					continue;
				if(!can[nx][ny][(Z + 1) % 4] && ds[nx][ny][(Z + 1) % 4] == -1) {
					Q.push(mp(mp(nx, ny), (Z + 1) % 4));
					ds[nx][ny][(Z + 1) % 4] = ds[X][Y][Z] + 1;
				}
			}
		}
		int ans = -1;
		for(int i = 0; i < 4; ++i) {
			if(ds[fi.fs][fi.sd][i] != -1) {
				if(ans == -1 || ds[fi.fs][fi.sd][i] < ans) {
					ans = ds[fi.fs][fi.sd][i];
				}
			}
		}
		if(ans == -1)
			printf("Case #%d: impossible\n", it);
		else
			printf("Case #%d: %d\n", it, ans);
	}
	getchar(); getchar();
	return 0;
}

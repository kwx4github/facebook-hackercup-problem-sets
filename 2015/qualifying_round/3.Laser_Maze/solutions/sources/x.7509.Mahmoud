#include <bits/stdc++.h>
#define reset(arr,j) memset(arr,j,sizeof(arr));
#define pb push_back
#define f first
#define s second
#define mp make_pair
#define vec vector<int>
#define LL long long
#define fa(i,n) for(int i=0;i<n;i++)
#define take(vec,n) vector<int> vec; for(int i=0;i<n;i++){int a; cin >> a; vec.pb(a);};
#define print(arr,n) fa(i,n) printf("%d\n",arr[i]);
#define fd(i,n) for(int i=n-1;i>=0;i--)
#define vpair vector < pair <LL ,LL> >
#define matrix vector<vector<LL> >
#define initmatrix(m,a,b,x) fa(i,a){ vector<LL> c; m.pb(c); fa(j,b) m[i].pb(x);};
#define printmatrix(M) fa(i,M.size()){ fa(j,M[i].size()) cout << M[i][j] <<" "; cout << endl;}
#define Board vector<vector<char> >
using namespace std;
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//
int M,N;
char board[101][101];
bool laser[101][101];
vector<pair<int,int> > tur;
pair<int,int> S,G;

void updtur(int steps){
    reset(laser,0);
    fa(i,tur.size()){
        char t = board[tur[i].f][tur[i].s];
        int dir = steps;
        switch(t){
            case '^' : break;
            case '>' : dir = (dir + 1) % 4; break;
            case 'v' : dir = (dir + 2) % 4; break;
            case '<' : dir = (dir + 3) % 4; break;
        }
        laser[tur[i].f][tur[i].s] = 1;
        if(dir == 0){
            for(int j = tur[i].f;j >= 0;j--){
                if(board[j][tur[i].s] == '#')
                    break;
                laser[j][tur[i].s] = 1;
            }
        }
        else if(dir == 1){
            for(int j = tur[i].s; j < N;j++){
                if(board[tur[i].f][j] == '#')
                    break;
                laser[tur[i].f][j] = 1;
            }
        }
        else if(dir == 2){
            for(int j = tur[i].f;j < M;j++){
                if(board[j][tur[i].s] == '#')
                    break;
                laser[j][tur[i].s] = 1;
            }
        }
        else if(dir == 3){
            for(int j = tur[i].s; j >= 0;j--){
                if(board[tur[i].f][j] == '#')
                    break;
                laser[tur[i].f][j] = 1;
            }
        }
    }
}
int bfs(){
    int visited[101][101]={0};
    queue<pair<pair<int,int>,int> > q;
    q.push(mp(S,0));
    //visited[S.f][S.s] = 1;
    while(!q.empty()){
        pair<int,int> cur = q.front().f;
        int stp = q.front().s;
        if(cur == G)
            return stp;
        //cout << cur.f << " " << cur.s << endl;
        q.pop();
        int s = 5;
        updtur(stp+1);
        if(cur.f - 1 >= 0 && !laser[cur.f-1][cur.s] && board[cur.f-1][cur.s] != '#' && visited[cur.f-1][cur.s] < s){
            visited[cur.f-1][cur.s] += 1;
            q.push(mp(mp(cur.f-1,cur.s),stp+1));
        }
        if(cur.f + 1 < M && !laser[cur.f+1][cur.s] && board[cur.f+1][cur.s] != '#' && visited[cur.f+1][cur.s] < s){
            visited[cur.f+1][cur.s] += 1;
            q.push(mp(mp(cur.f+1,cur.s),stp+1));
        }
        if(cur.s - 1 >= 0 && !laser[cur.f][cur.s-1] && board[cur.f][cur.s-1] != '#' && visited[cur.f][cur.s-1] < s){
            visited[cur.f][cur.s-1] += 1;
            q.push(mp(mp(cur.f,cur.s-1),stp+1));
        }
        if(cur.s + 1 < N && !laser[cur.f][cur.s+1] && board[cur.f][cur.s+1] != '#' && visited[cur.f][cur.s+1] < s){
            visited[cur.f][cur.s+1] += 1;
            q.push(mp(mp(cur.f,cur.s+1),stp+1));
        }
    }
    return -1;
}
main(){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int T;
    cin >> T;
    fa(t,T){
        cin >> M >> N;
        tur.clear();
        fa(i,M)
            fa(j,N){
                cin >> board[i][j];
                if(board[i][j] == '<' || board[i][j] == '>' || board[i][j] == '^' || board[i][j] == 'v')
                    tur.pb(mp(i,j));
                if(board[i][j] == 'S')
                    S = mp(i,j);
                if(board[i][j] == 'G')
                    G = mp(i,j);
            }
            int ans = bfs();
            printf("Case #%d: ",t+1);
            if(ans == -1)
                cout << "impossible\n";
            else
                cout << ans << endl;
//        fa(i,M){
//            fa(j,N)
//                printf("%d ",laser[i][j]);
//            cout << endl;
//        }
    }
}

#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
char s[150][150];
bool ok[150][150][4];
int d[150][150][4];
int n,tt,m;
int sx,sy,ex,ey;
int dx[4]={-1,0,1,0};
int dy[4]={0,-1,0,1};
void fill(int x,int y,int k,int t){
	x+=dx[k];y+=dy[k];
	while(x>=1&&x<=n&&y>=1&&y<=m&&s[x][y]=='.'){
		ok[x][y][t]=0;
		x+=dx[k];y+=dy[k];
	}
}
void Set(int x,int y,int k){
	for(int i=0;i<4;i++){
		fill(x,y,(i+k)%4,i);
	}
}
struct N{
	int x,y,k;
	N(int a=0,int b=0,int c=0){
		x=a,y=b,k=c;
	}
}p;
queue<N> q;
int main(){
	freopen("out.txt","w",stdout);
	scanf("%d",&tt);
	for(int t=1;t<=tt;t++){
		printf("Case #%d: ",t);
		scanf("%d%d",&n,&m);
		for(int i=1;i<=n;i++){
			scanf("%s",s[i]+1);
		}
		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				if(s[i][j]=='S'){
					sx=i,sy=j;s[i][j]='.';
				}else if(s[i][j]=='G'){
					ex=i,ey=j;s[i][j]='.';
				}
			}
		}
		memset(ok,1,sizeof ok);
		memset(d,-1,sizeof d);
		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				if(s[i][j]=='#'){
					ok[i][j][0]=ok[i][j][1]=ok[i][j][2]=ok[i][j][3]=0;
				}else if(s[i][j]=='<'){
                    ok[i][j][0]=ok[i][j][1]=ok[i][j][2]=ok[i][j][3]=0;
                    Set(i,j,1);
				}else if(s[i][j]=='>'){
                    ok[i][j][0]=ok[i][j][1]=ok[i][j][2]=ok[i][j][3]=0;
                    Set(i,j,3);
				}else if(s[i][j]=='^'){
                    ok[i][j][0]=ok[i][j][1]=ok[i][j][2]=ok[i][j][3]=0;
                    Set(i,j,0);
				}else if(s[i][j]=='v'){
                    ok[i][j][0]=ok[i][j][1]=ok[i][j][2]=ok[i][j][3]=0;
                    Set(i,j,2);
				}
			}
		}
		q.push(N(sx,sy,0));
		d[sx][sy][0]=0;
		while(!q.empty()){
			p=q.front();q.pop();
			int x=p.x,y=p.y,k=p.k;
			for(int i=0;i<4;i++){
				int xx=x+dx[i];
				int yy=y+dy[i];
				if(xx>=1&&xx<=n&&yy>=1&&yy<=m){
					if(d[xx][yy][(k+1)%4]==-1&&ok[xx][yy][(k+1)%4]){
                        d[xx][yy][(k+1)%4]=d[x][y][k]+1;
                        q.push(N(xx,yy,(k+1)%4));
					}
				}
			}
		}
		bool imp=1;
		int mn=1<<30;
		for(int i=0;i<4;i++){
			if(d[ex][ey][i]==-1) continue;
			imp=0;
			mn=min(mn,d[ex][ey][i]);
		}
		if(imp) puts("impossible");
		else printf("%d\n",mn);
	}
	return 0;
}
#include <bits/stdc++.h>
#define f(i,x,y) for (int i = x; i < y; i++)
#define fd(i,x,y) for(int i = x; i>= y; i--)
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define vint vector<int>
#define ll long long
#define clr(A,x) memset(A, x, sizeof A)
#define pb push_back
#define pii pair<int,int>
#define fst first
#define snd second
#define ones(x) __builtin_popcount(x)
#define cua(x) (x)*(x)
#define eps (1e-9)
#define oo (1<<30)
#define debug(x) cout <<#x << " = " << x << endl
#define adebug(x,n) cout <<#x<<endl; f(i,0,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; f(i,0,m)f(j,0,n)cout<<x[i][j]<<char(j+1==n?10:32)
#define N 1
using namespace std;
template<class T> inline void mini(T &a,T b){if(b<a) a=b;}
template<class T> inline void maxi(T &a,T b){if(b>a) a=b;}

int dx[] = {0,-1,0,1};
int dy[] = {-1,0,1,0};

int tc;
int m,n;
string M[100];

bool valid(int i, int j) {
	return 0<=i && i<m && 0<=j && j<n;
}
bool notpass(int i, int j) {
	char c = M[i][j];
	return c == '<' || c == '>' || c == 'v' || c == '^' || c == '#';
}
int A[100][100][4];
int vis[100][100][4];

struct nodo{
	int x,y,z,dis;
	nodo() {}
	nodo(int x, int y, int z, int dis) :
		x(x), y(y), z(z), dis(dis) {}
};

int caso;

int main(){
	cin >> tc;
	while(tc--) {
		cin >> m >> n;
		f(i,0,m) cin >> M[i];

		clr(A,0);
		int sx, sy, gx, gy;
		f(i,0,m) f(j,0,n) {
			char c = M[i][j];
			if (c == '#') {
				f(k,0,4) A[i][j][k] = 1;
			} else if ( notpass(i,j) ) {
				f(k,0,4) A[i][j][k] = 1;

				int aux = c == 'v'? 3 : c == '<'? 0 : c == '^'? 1 : 2;
				f(_dir,0,4) {
					int dir = (_dir + aux) % 4;
					int I = i, J = j;
					while( 1 ) {
						i += dx[dir];
						j += dy[dir];
						if ( !valid(i,j) || notpass(i,j) ) break;
						A[i][j][_dir] = 1;
					}
					i = I, j = J;
					
				}
			} else if (c == 'S') sx = i, sy = j;
			else if (c == 'G') gx = i, gy = j;
		}

		clr(vis, 0);
		queue<nodo> Q;
		Q.push(nodo (sx, sy, 0, 0) );
		vis[sx][sy][0] = 1;

		bool found = 0;
		int DIS = -1;

		while( !Q.empty() ) {
			nodo q = Q.front();
			if (q.x == gx && q.y == gy) {
				found = 1;
				DIS = q.dis;
				break;
			}

			Q.pop();
			f(k,0,4) {
				int x = q.x + dx[k], y = q.y + dy[k], z = (q.z+1)%4;
				if (!valid(x,y)) continue;
				int dis = q.dis + 1;
				nodo q2(x, y, z, dis);
				if (vis[x][y][z] == 0 && A[x][y][z] == 0) {
					vis[x][y][z] = 1;
					Q.push(q2);
				}
			}
		}

		printf("Case #%d: ", ++caso);
		if (DIS == -1) puts("impossible");
		else printf("%d\n", DIS);


	}
}



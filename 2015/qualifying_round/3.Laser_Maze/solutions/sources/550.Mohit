# include <bits/stdc++.h>
# define ll long long
# define rep(i,n) for(int (i) = 0;(i) < (n);(i)++)
# define REP(i,n) for(int (i) = 1;(i) <= (n);(i)++)
# define sf(i) cin>>(i)
# define wl(i) while((i)--)

using namespace std;


bool mark[40100];
int tot;
int l1,l2,l3,l4;
vector<int> vec[40100];
bool b[101][101][4];

void bfs(int a){
	queue< pair<int,int> >q;
	q.push(make_pair(a,0));
	mark[a]=1;
	while(!q.empty()){
	int	x= q.front().first;
	int	h= q.front().second;
//	printf("%d %d\n",x,h);
		if(x==l1 || x==l2 || x==l3 || x==l4){
			if(tot>h)tot=h;
		}
		q.pop();
		for(int i=0;i<vec[x].size();i++){
			if(mark[vec[x][i]])continue;
			mark[vec[x][i]]=1;
			q.push(make_pair(vec[x][i],h+1));
		}
	}
	return;
}

void init(){
	for(int i=0;i<40100;i++){
		vec[i].clear();
		mark[i]=0;
	}
	for(int i=0;i<101;i++){
		for(int j=0;j<101;j++){
			b[i][j][0]=b[i][j][1]=b[i][j][2]=b[i][j][3]=0;
		}
	}
		l1=l2=l3=l4=-1;
		tot=999999999;
}

/*
void pt(int k,int n,int m){
	rep(i,n){
		rep(j,m){
			printf("%d",b[i][j][k]);
		}
		printf("\n");
	}
	printf("\n");
	return;
}

void ptr(int n,int m){
	pt(0,n,m);pt(1,n,m);pt(2,n,m);pt(3,n,m);
}
*/

int main(){
	freopen("read.txt","r",stdin);
	freopen("write.txt","w",stdout);
	ll t;
	sf(t);
	REP(r,t){
		int n,m;
		printf("Case #%d: ",r);
		sf(n);sf(m);
		init();
		char a[n+1][m+1];
		rep(i,n){
			scanf("%s",a[i]);
		}
		map<char,int>jack1;
		jack1['^']=0; jack1['>']=1; jack1['v']=2; jack1['<']=3;
		rep(k,4){
			rep(i,n){
				ll flag=0;
				rep(j,m){
					if(flag==1)b[i][j][k]=1;
					if(a[i][j]=='#' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v'){ flag=0; b[i][j][k]=1; }
					if(a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v'){
						if((jack1.find(a[i][j])->second+k)%4==1)flag=1;
					}
				}
			}
			rep(i,n){
				ll flag=0;
				for(int j=m-1;j>=0;j--){
					if(flag==1)b[i][j][k]=1;
					if(a[i][j]=='#' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v') { flag=0; b[i][j][k]=1; }
					if(a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v'){
						if((jack1.find(a[i][j])->second+k)%4==3)flag=1;
					}
				}
			}
			rep(j,m){
				ll flag=0;
				rep(i,n){
					if(flag==1)b[i][j][k]=1;
					if(a[i][j]=='#' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v') { flag=0; b[i][j][k]=1; }
					if(a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v'){
						if((jack1.find(a[i][j])->second+k)%4==2)flag=1;
					}
				}
			}
			rep(j,m){
				ll flag=0;
				for(ll i=n-1;i>=0;i--){
					if(flag==1)b[i][j][k]=1;
					if(a[i][j]=='#' || a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v') { flag=0; b[i][j][k]=1; }
					if(a[i][j]=='<' || a[i][j]=='^' || a[i][j]=='>' || a[i][j]=='v'){
						if((jack1.find(a[i][j])->second+k)%4==0)flag=1;
					}
				}
			}
		}
//		ptr(n,m);
		map< pair< pair < int ,int > , int>, int >jack;
		int c=0;
		rep(i,n){
			rep(j,m){
				for(int k=0;k<4;k++){
					jack[make_pair(make_pair(i,j),k)]=c++;
				}
			}
		}

		rep(i,n){
			rep(j,m){
				for(int k=0;k<4;k++){
					if(i<n-1 && b[i+1][j][(k+1)%4]==0){
						vec[jack.find(make_pair(make_pair(i,j),k))->second].push_back(jack.find(make_pair(make_pair(i+1,j),(k+1)%4))->second);
					}
					if(j<m-1 && b[i][j+1][(k+1)%4]==0){
						vec[jack.find(make_pair(make_pair(i,j),k))->second].push_back(jack.find(make_pair(make_pair(i,j+1),(k+1)%4))->second);
					}
					if(i>0 && b[i-1][j][(k+1)%4]==0){
						vec[jack.find(make_pair(make_pair(i,j),k))->second].push_back(jack.find(make_pair(make_pair(i-1,j),(k+1)%4))->second);
					}
					if(j>0 && b[i][j-1][(k+1)%4]==0){
						vec[jack.find(make_pair(make_pair(i,j),k))->second].push_back(jack.find(make_pair(make_pair(i,j-1),(k+1)%4))->second);
					}
				}
			}
		}
		ll v,u,x,y;
		rep(i,n){
			rep(j,m){
				if(a[i][j]=='G'){
					u=i; v=j;
				}
				if(a[i][j]=='S'){
					x=i; y=j;
				}
			}
		}
		l1=jack.find(make_pair(make_pair(u,v),0))->second;
		l2=jack.find(make_pair(make_pair(u,v),1))->second;
		l3=jack.find(make_pair(make_pair(u,v),2))->second;
		l4=jack.find(make_pair(make_pair(u,v),3))->second;
		bfs(jack.find(make_pair(make_pair(x,y),0))->second);
//		printf("%d %d %d %d\n",l1,l2,l3,l4);
		if(tot==999999999)
			printf("impossible\n");
		else
			printf("%d\n",tot);

	}
	return 0;
}
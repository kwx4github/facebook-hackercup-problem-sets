// coding started in Junuary 8, 2015 by Cloud L. Cho in Chula Vista
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include <math.h>
#include <algorithm>

using namespace std;

int ASCIItoInteger (string);
vector<string> SeperatetoTwo (string);

int main() {
    string givenline;
    vector<string> givenlines;
    ifstream myfile ("laser_maze.txt");
    if (myfile.is_open()) 
    {
                          while (getline(myfile,givenline))
                          {
                                givenlines.push_back(givenline);
                          }                                
                          myfile.close();
    }
    else cout << "please, check the file name.";
    
    int T, N;
    T = ASCIItoInteger(givenlines.at(0));
//    cout << "T is " << T << "\n";
//    cout << "The length of the input is " << givenlines.size() << "\n";
    int david, thompson, matt, moffett, marc, kitsko;
    int gpro, gcarbo, gfat;
    string emmanuel, tuttle, bill, targetstring;
    string result;
    int alexheight, alexwidth;
    int ylocation, xlocation;
    int cox, diego;
    
    vector<string> alex, commerce;
    fstream datafile;
    datafile.open("laser_maze_output.txt", ios::out);
    
    thompson = 0;
    int TemporaryT = T;
    for (david=1;david<=TemporaryT;david++) 
    {
        emmanuel = givenlines.at(david+thompson);
        alex = SeperatetoTwo(emmanuel);
        alexheight = ASCIItoInteger(alex.at(0));
        alexwidth = ASCIItoInteger(alex.at(1));
                
        //step two: find starting and goal postion
        int coordination[2][2];
        for (ylocation=0;ylocation<alexheight;ylocation++) 
        {
            tuttle = givenlines.at(david+thompson+1+ylocation);
            xlocation = -1;
            xlocation = tuttle.find('S',0);
            if (xlocation>=0 && ylocation>=0) 
            {
                             coordination[0][0] = xlocation, coordination[0][1] = ylocation;
            }
            xlocation = -1;
            xlocation = tuttle.find('G',0);
            if (xlocation>=0 && ylocation>=0) 
            {
                            coordination[1][0] = xlocation, coordination[1][1] = ylocation;
            }
        }
//        cout << "\n"<< "\n" << "Case#" << david << ": " << "\n" << "\n" << "\n" ;
//        cout << "Starting location is (" << coordination[0][0] << ", " << coordination[0][1] 
//            << ") and the goal location is (" << coordination[1][0] << ", " << coordination[1][1] << ")" << "\n";
        for (matt=0;matt<2;matt++) 
        {
            //cout << coordination[matt][0] << " " << coordination[matt][1] << "\n";
        }
        
        // step three: find minimum distance, it is used latter to go the path.
        // it shoud be positive, so watch out the relative coordination ------------------------------------------
        int distancemin = abs (coordination[1][0]-coordination[0][0]) + abs(coordination[1][1]-coordination[0][1]);
        //cout << distancemin << "\n";
        
        // step four: find laser turret and wall location
//        cout << "The mzze height and width are " << alexheight << " " << alexwidth << "\n";
        char mapmaze[alexheight][alexwidth];
        int mapobstacle[alexheight][alexwidth];
        for (ylocation=0;ylocation<alexheight;ylocation++) 
        {
            tuttle = givenlines.at(david+thompson+1+ylocation);
            
            for (xlocation=0;xlocation<alexwidth;xlocation++) 
            {
                mapmaze[ylocation][xlocation] = tuttle.at(xlocation);
                if (mapmaze[ylocation][xlocation] == '>') mapobstacle[ylocation][xlocation] = 365;
                else if (mapmaze[ylocation][xlocation] == 'v') mapobstacle[ylocation][xlocation] = 95;
                else if (mapmaze[ylocation][xlocation] == '<') mapobstacle[ylocation][xlocation] = 185;
                else if (mapmaze[ylocation][xlocation] == '^') mapobstacle[ylocation][xlocation] = 275;
                else if (mapmaze[ylocation][xlocation] == '#') mapobstacle[ylocation][xlocation] = 0;
                else if (mapmaze[ylocation][xlocation] == '.') mapobstacle[ylocation][xlocation] = 1;
                else if (mapmaze[ylocation][xlocation] == 'S') mapobstacle[ylocation][xlocation] = 2;
                else if (mapmaze[ylocation][xlocation] == 'G') mapobstacle[ylocation][xlocation] = 3;
                //cout << mapmaze[xlocation][ylocation] << " ";
//                cout << mapobstacle[ylocation][xlocation] << " ";
            }
//            cout << "\n";
        }
          
          
        //    
        // step five: laser shooting direction and range (direction becoming wall) ----------------------------------------------
        //
        int xlocationme=0, ylocationme=0;
        int factorsome = 10; // maximum possible step limit
        
        for (marc=1; marc<factorsome*distancemin; marc++) 
        {
            
            for (ylocation=0;ylocation<alexheight;ylocation++) 
            {
                for (xlocation=0;xlocation<alexwidth;xlocation++) 
                {
                    if ( mapobstacle[ylocation][xlocation]>4 ) 
                    {
                         mapobstacle[ylocation][xlocation] += 90;
                         mapobstacle[ylocation][xlocation] = mapobstacle[ylocation][xlocation]%360;
                    }
                    
                }
               
            }
            
            
            //cout << "\n" << "Movement of turrets#" << marc << ": " << "\n";
            //cout << mapobstacle[ylocation][xlocation] << " ";
            //cout << "\n";
             
            int mapchanged[alexheight+1][alexwidth+1]; // to prvent random number outside of the maze -----------
            int beam=0;
            for (ylocation=0;ylocation<alexheight;ylocation++) 
            {
                for (xlocation=0;xlocation<alexwidth;xlocation++) 
                {
                    mapchanged[ylocation][xlocation] = mapobstacle[ylocation][xlocation];
                    //cout << mapchanged[ylocation][xlocation] << " ";
                }
                //cout << "\n";
            }
            
            for (ylocation=0;ylocation<=alexheight;ylocation++) 
            {
                for (xlocation=0;xlocation<=alexwidth;xlocation++) 
                {
                    if (xlocation==alexwidth || ylocation==alexheight)
                       mapchanged[ylocation][xlocation]=0; // to prevent random number out side maze -----------                   
                }
            }
            
            
            
            for (ylocation=0;ylocation<alexheight;ylocation++) 
            {
                for (xlocation=0;xlocation<alexwidth;xlocation++) 
                {
                    
                    // step five case one; 0 degree
                    if ( mapchanged[ylocation][xlocation] == 5 ) 
                    {
                         for (beam=xlocation+1; beam<alexwidth; beam++) 
                         {
                             if ( mapchanged[ylocation][beam] > 0 && mapchanged[ylocation][beam] < 5  ) 
                                  mapchanged[ylocation][beam] = 0;
                             else 
                                  break;
                         }
                    }
                    // step five case two; 90 degree
                    else if ( mapchanged[ylocation][xlocation] == 95 ) 
                    {
                         for (beam=ylocation+1; beam<alexheight; beam++) 
                         {
                             if ( mapchanged[beam][xlocation] > 0 && mapchanged[beam][xlocation] < 5 ) 
                                  mapchanged[beam][xlocation] = 0;
                             else 
                                  break;
                         }
                    }
                    // step five case three; 180 degree
                    else if ( mapchanged[ylocation][xlocation] == 185 ) 
                    {
                         for (beam=xlocation-1; beam>=0; beam--) 
                         {
                             if ( mapchanged[ylocation][beam] > 0 && mapchanged[ylocation][beam] < 5  ) 
                                  mapchanged[ylocation][beam] = 0;
                             else 
                                  break;
                         }
                    }
                    // step five case four; 270 degree
                    else if ( mapchanged[ylocation][xlocation] == 275 ) 
                    {
                         for (beam=ylocation-1; beam>=0; beam--) 
                         {
                             if ( mapchanged[beam][xlocation] > 0 && mapchanged[beam][xlocation] < 5 ) 
                                  mapchanged[beam][xlocation] = 0;
                             else 
                                  break;
                         }
                    }   
                }
                
            }
              
            
//            cout << "\n" << "Obtable changed by the turret movement#" << marc << ": " << "\n";
//            for (ylocation=0;ylocation<alexheight;ylocation++) 
//            {
//                for (xlocation=0;xlocation<alexwidth;xlocation++) 
//                {
//                    cout << mapchanged[ylocation][xlocation] << " ";
//                }
//                cout << "\n";
//            }

            
            // step six: my movement -------------------------------------------
            // 4 respresents me.
            
            
            int xlocationS=coordination[0][0];
            int ylocationS=coordination[0][1];
            int xlocationG=coordination[1][0];
            int ylocationG=coordination[1][1];
            //cout << "Starting location is (" << xlocationS << ", " << ylocationS 
            //<< ") and the goal location is (" << xlocationG << ", " << ylocationG << ")" << "\n";

//(1)       // step six case one (1) + + dirctions ----------------------------
            if (xlocationS<=xlocationG && ylocationS<=ylocationG)
            {            
                //cout << "mzae type number 1" << "\n";
                if (marc==1) // it is the first step getting out from S. We should move to somewhare. 
                {
                     
                      if ( mapchanged[ylocationS][xlocationS+1] == 1 || 
                      mapchanged[ylocationS][xlocationS+1] == 3) 
                      {
                           mapchanged [ylocationS][xlocationS+1] = 4;
                           ylocationme=ylocationS;
                           xlocationme=xlocationS+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
//                              cout << result << " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationS+1][xlocationS] == 1 || 
                      mapchanged[ylocationS+1][xlocationS] == 3)  
                      {
                           mapchanged [ylocationS+1][xlocationS] = 4;
                           ylocationme=ylocationS+1;
                           xlocationme=xlocationS;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
//                             cout << result << " and total step is " << marc <<  "\n";
                              break;
                           }
                      }
                      else 
                      {
                           result = "impossible";
//                           cout << result << "\n";
                           break;
                      }
                }
                else // after moving out from the starting point
                {                 
                      if ( mapchanged[ylocationme][xlocationme+1] == 3 || 
                      mapchanged[ylocationme][xlocationme+1] == 1)  
                      {
                           mapchanged[ylocationme][xlocationme+1] = 4;
                           xlocationme=xlocationme+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
//                              cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                                                               
                      }
                      else if ( mapchanged[ylocationme+1][xlocationme] == 3 || 
                      mapchanged[ylocationme+1][xlocationme] == 1)  
                      {
                           mapchanged[ylocationme+1][xlocationme] = 4;
                           ylocationme=ylocationme+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
//                              cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationme][xlocationme-1] == 1 || 
                      mapchanged[ylocationme][xlocationme-1] == 2) 
                      {
                           mapchanged[ylocationme][xlocationme-1] = 4;
                           xlocationme=xlocationme-1;
                      }
                      else if ( mapchanged[ylocationme-1][xlocationme] == 1 ||
                      mapchanged[ylocationme-1][xlocationme] == 2) 
                      {
                           mapchanged[ylocationme-1][xlocationme] = 4;
                           ylocationme=ylocationme-1;
                      }
                      else 
                      {
                           result = "impossible";
//                           cout << result << "\n";
                           break;
                      }
                }
            }
                
//(1) end ----------------------------------------------------------------------

//(2) + - dirction
          else if (xlocationS<=xlocationG && ylocationS>=ylocationG)
          {            
                //cout << "mzae type number 2" << "\n";
                if (marc==1) // it is the first step getting out from S. We should move to somewhare. 
                {
                     
                      if ( mapchanged[ylocationS][xlocationS+1] == 1 || 
                      mapchanged[ylocationS][xlocationS+1] == 3) 
                      {
                           mapchanged [ylocationS][xlocationS+1] = 4;
                           ylocationme=ylocationS;
                           xlocationme=xlocationS+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationS-1][xlocationS] == 1 || 
                      mapchanged[ylocationS-1][xlocationS] == 3)  
                      {
                           mapchanged [ylocationS-1][xlocationS] = 4;
                           ylocationme=ylocationS-1;
                           xlocationme=xlocationS;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc <<  "\n";
                              break;
                           }
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
                else // after moving out from the starting point
                {                 
                      if ( mapchanged[ylocationme][xlocationme+1] == 3 || 
                      mapchanged[ylocationme][xlocationme+1] == 1)  
                      {
                           mapchanged[ylocationme][xlocationme+1] = 4;
                           xlocationme=xlocationme+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                                                               
                      }
                      else if ( mapchanged[ylocationme-1][xlocationme] == 3 || 
                      mapchanged[ylocationme-1][xlocationme] == 1)  
                      {
                           mapchanged[ylocationme-1][xlocationme] = 4;
                           ylocationme=ylocationme-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationme][xlocationme-1] == 1 || 
                      mapchanged[ylocationme][xlocationme-1] == 2) 
                      {
                           mapchanged[ylocationme][xlocationme-1] = 4;
                           xlocationme=xlocationme-1;
                      }
                      else if ( mapchanged[ylocationme+1][xlocationme] == 1 ||
                      mapchanged[ylocationme+1][xlocationme] == 2) 
                      {
                           mapchanged[ylocationme+1][xlocationme] = 4;
                           ylocationme=ylocationme+1;
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
          }
            
//(2) end ----------------------------------------------------------------------

//(3) - - dirction
          else if (xlocationS>=xlocationG && ylocationS>=ylocationG)
          {            
                //cout << "mzae type number 3" << "\n";
                if (marc==1) // it is the first step getting out from S. We should move to somewhare. 
                {
                     
                      if ( mapchanged[ylocationS][xlocationS-1] == 1 || 
                      mapchanged[ylocationS][xlocationS-1] == 3) 
                      {
                           mapchanged [ylocationS][xlocationS-1] = 4;
                           ylocationme=ylocationS;
                           xlocationme=xlocationS-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationS-1][xlocationS] == 1 || 
                      mapchanged[ylocationS-1][xlocationS] == 3)  
                      {
                           mapchanged [ylocationS-1][xlocationS] = 4;
                           ylocationme=ylocationS-1;
                           xlocationme=xlocationS;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc <<  "\n";
                              break;
                           }
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
                else // after moving out from the starting point
                {                 
                      if ( mapchanged[ylocationme][xlocationme-1] == 3 || 
                      mapchanged[ylocationme][xlocationme-1] == 1)  
                      {
                           mapchanged[ylocationme][xlocationme-1] = 4;
                           xlocationme=xlocationme-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                                                               
                      }
                      else if ( mapchanged[ylocationme-1][xlocationme] == 3 || 
                      mapchanged[ylocationme-1][xlocationme] == 1)  
                      {
                           mapchanged[ylocationme-1][xlocationme] = 4;
                           ylocationme=ylocationme-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationme][xlocationme+1] == 1 || 
                      mapchanged[ylocationme][xlocationme+1] == 2) 
                      {
                           mapchanged[ylocationme][xlocationme+1] = 4;
                           xlocationme=xlocationme+1;
                      }
                      else if ( mapchanged[ylocationme+1][xlocationme] == 1 ||
                      mapchanged[ylocationme+1][xlocationme] == 2) 
                      {
                           mapchanged[ylocationme+1][xlocationme] = 4;
                           ylocationme=ylocationme+1;
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
          }
            
//(3) end ----------------------------------------------------------------------

//(4) - + dirction
          else if (xlocationS>=xlocationG && ylocationS<=ylocationG)
          {            
                //cout << "mzae type number 4" << "\n";
                if (marc==1) // it is the first step getting out from S. We should move to somewhare. 
                {
                     
                      if ( mapchanged[ylocationS][xlocationS-1] == 1 || 
                      mapchanged[ylocationS][xlocationS-1] == 3) 
                      {
                           mapchanged [ylocationS][xlocationS-1] = 4;
                           ylocationme=ylocationS;
                           xlocationme=xlocationS-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationS+1][xlocationS] == 1 || 
                      mapchanged[ylocationS+1][xlocationS] == 3)  
                      {
                           mapchanged [ylocationS+1][xlocationS] = 4;
                           ylocationme=ylocationS+1;
                           xlocationme=xlocationS;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result << " and total step is " << marc <<  "\n";
                              break;
                           }
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
                else // after moving out from the starting point
                {                 
                      if ( mapchanged[ylocationme][xlocationme-1] == 3 || 
                      mapchanged[ylocationme][xlocationme-1] == 1)  
                      {
                           mapchanged[ylocationme][xlocationme-1] = 4;
                           xlocationme=xlocationme-1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                                                               
                      }
                      else if ( mapchanged[ylocationme+1][xlocationme] == 3 || 
                      mapchanged[ylocationme+1][xlocationme] == 1)  
                      {
                           mapchanged[ylocationme+1][xlocationme] = 4;
                           ylocationme=ylocationme+1;
                           if (ylocationme==ylocationG && xlocationme==xlocationG)
                           {
                              result = "possible";
                              //cout << result <<  " and total step is " << marc << "\n";
                              break;
                           }
                      }
                      else if ( mapchanged[ylocationme][xlocationme+1] == 1 || 
                      mapchanged[ylocationme][xlocationme+1] == 2) 
                      {
                           mapchanged[ylocationme][xlocationme+1] = 4;
                           xlocationme=xlocationme+1;
                      }
                      else if ( mapchanged[ylocationme-1][xlocationme] == 1 ||
                      mapchanged[ylocationme-1][xlocationme] == 2) 
                      {
                           mapchanged[ylocationme-1][xlocationme] = 4;
                           ylocationme=ylocationme-1;
                      }
                      else 
                      {
                           result = "impossible";
                           //cout << result << "\n";
                           break;
                      }
                }
          }
            
//(4) end ----------------------------------------------------------------------




            
            //cout << "\n" << "The map of the movement#" << marc << ": " << 
//            "and my location is " << "(" << xlocationme << ", " << ylocationme
//            << ")" << "\n";
            for (ylocation=0;ylocation<alexheight;ylocation++) 
            {
                for (xlocation=0;xlocation<alexwidth;xlocation++) 
                {
                    //cout << mapchanged[ylocation][xlocation] << " ";
                }
                //cout << "\n";
            }
        
        }
        // step six: my movement end -------------------------------------------
        
        
        thompson += alexheight;
        if (result=="possible" )
           datafile << "Case #" << david << ": " << marc << "\n";
        else
           datafile << "Case #" << david << ": " << result << "\n";
    }
     
    
    datafile.close();
    
    //system ("pause");
    return 0;
}

// sub program -----------------------------------------------------------------
int ASCIItoInteger (string temporarystring)
{
    int kip = 0, thorne = temporarystring.length();
    double bella;
    for (int nolan=0;nolan<thorne;nolan++) {
        if (nolan == thorne-1) { 
            kip += (int) temporarystring.at(nolan) - 48;
            }        
        else {
             bella = pow (10.0,thorne-1-nolan);
             kip += ( (int) temporarystring.at(nolan) - 48 ) * bella;
             }
             
        }
    return kip;
}

vector<string> SeperatetoTwo (string griefshare)
{
       string guest, breakfast;
       int spacepositionone, spacepositiontwo;
       breakfast = griefshare;       
       vector<string> december;
       int surviving = griefshare.length();
       spacepositionone = griefshare.find(' ', 0);
       guest = breakfast.erase(spacepositionone,surviving-spacepositionone);
       december.push_back(guest);
       //cout << guest << " " << guest.size() << "\n"; 
       
       breakfast = griefshare;
       guest = breakfast.erase(0,spacepositionone+1);
       december.push_back(guest);
       //cout << guest << " " << guest.size() << "\n";
       
       //cout << december.size();
       return december;
}
       

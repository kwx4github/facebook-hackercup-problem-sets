#include<iostream>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#include<string>
#include<cstdio>
#include<cstring>

using namespace std;

typedef long long ll;

typedef pair<int,int> pii;
#define mp make_pair
#define X first
#define Y second

#define pb push_back
#define forI_(i,V,_) for(__typeof(V.end())i=_;i!=V.end();++i)
#define forI(i,V) forI_(i,V,V.begin())

#define rep(i,l,r) for(int i = l; i <= r; ++i)

string prob="t";

typedef pair<int, pii> pos;

const int dx[] = {0, -1, 0, 1};
const int dy[] = {1, 0, -1, 0};

const int maxn = 110;

int n, m;
pos S, G;

int g[maxn][maxn];
int d[4][maxn][maxn];
int f[4][maxn][maxn];
pos q[4*maxn*maxn];

void Init(){
	rep(i, 1, n)
		rep(j, 1, m){
			char c;
			while(c = getchar(), c < ' ');
			if(c == '.')
				g[i][j] = -1;
			else if(c == '#')
				g[i][j] = -2;
			else if(c == 'S')
				g[i][j] = -1, S = mp(0, mp(i, j));
			else if(c == 'G')
				g[i][j] = -1, G = mp(0, mp(i, j));
			else if(c == '>')
				g[i][j] = 0;
			else if(c == '^')
				g[i][j] = 1;
			else if(c == '<')
				g[i][j] = 2;
			else if(c == 'v')
				g[i][j] = 3;
		}
	rep(i, 0, n + 1)
		g[i][0] = g[i][m + 1] = -2;
	rep(j, 0, m + 1)
		g[0][j] = g[n + 1][j] = -2;
	/*
	rep(i, 0, n + 1){
		rep(j, 0, m + 1)
			printf("%3d",g[i][j]);
		puts("");
	} 
	*/
}

void Pre(){
	memset(d, 0, sizeof(d));
	rep(T, 0, 3){
		int (*D)[maxn] = d[T];
		rep(i, 0, n + 1)
			rep(j, 0, m + 1)
				if(g[i][j] == -2)
					D[i][j] = 1;
		rep(i, 1, n)
			rep(j, 1, m){
				if(g[i][j] < 0)
					continue;
				int x = i, y = j;
				int k = (g[i][j] - T + 4) % 4;
				while(g[x][y] != -2){
					D[x][y] = 1;
					x += dx[k], y += dy[k];
				}
			}
	}
}

pos TakeStep(const pos &A, int k){
	return mp((A.X + 1) % 4, mp(A.Y.X + dx[k], A.Y.Y + dy[k]));
}
bool IsValid(const pos &A){
	return !d[A.X][A.Y.X][A.Y.Y];
}
bool isGoal(const pos &A){
	return A.Y == G.Y;
}
int& F(const pos &A){
	return f[A.X][A.Y.X][A.Y.Y];
}
void Print(const pos &A){
	printf("time = %d, coor = (%d, %d)\n", A.X, A.Y.X, A.Y.Y);
}

int Bfs(){
	memset(f, 0, sizeof(f));
	int l = 1, r = 1;
	q[1] = S;
	F(S) = 1;
	while(l <= r){
		pos U = q[l++];
		//Print(U);
		rep(k, 0, 3){
			pos T = TakeStep(U, k);
			if(IsValid(T)){
				if(isGoal(T))
					return F(U);
				int &f = F(T);
				if(f != 0)
					continue;	
				f = F(U) + 1;
				q[++r] = T;
			}
		}
	}
	return -1;
}				

int main(){
#ifdef ONLINE_JUDGE
	if(prob=="t")
		prob="";
#endif
	if(prob!=""){
    	freopen((prob+".in").c_str(),"r",stdin);
    	freopen((prob+".out").c_str(),"w",stdout);
	}
	int T;
	scanf("%d", &T);
	rep(T_T, 1, T){
		printf("Case #%d: ", T_T);
		scanf("%d%d", &n, &m);
		Init();
		Pre();
		/*
		rep(k, 0, 3){
			rep(i, 0, n + 1){
				rep(j, 0, m + 1)
					printf("%d ", d[k][i][j]);
				puts("");
			}
			puts("");
		}
		return 0;
		*/
		int ans = Bfs();
		if(ans == -1)
			puts("impossible");
		else
			printf("%d\n", ans);
	}
	return 0;
}

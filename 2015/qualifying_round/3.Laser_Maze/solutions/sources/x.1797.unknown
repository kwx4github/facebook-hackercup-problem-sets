#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <bitset>

using namespace std;

#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)
template <typename T> void print_container(ostream& os, const T& c) { const char* _s = " "; if (!c.empty()) { __typeof__(c.begin()) last = --c.end(); foreach (it, c) { os << *it; if (it != last) os << _s; } } }
template <typename T> ostream& operator<<(ostream& os, const vector<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const set<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const multiset<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const deque<T>& c) { print_container(os, c); return os; }
template <typename T, typename U> ostream& operator<<(ostream& os, const map<T, U>& c) { print_container(os, c); return os; }
template <typename T, typename U> ostream& operator<<(ostream& os, const pair<T, U>& p) { os << "(" << p.first << ", " << p.second << ")"; return os; }

template <typename T> void print(T a, int n, const string& split = " ") { for (int i = 0; i < n; i++) { cout << a[i]; if (i + 1 != n) cout << split; } cout << endl; }
template <typename T> void print2d(T a, int w, int h, int width = -1, int br = 0) { for (int i = 0; i < h; ++i) { for (int j = 0; j < w; ++j) { if (width != -1) cout.width(width); cout << a[i][j] << ' '; } cout << endl; } while (br--) cout << endl; }
template <typename T> void input(T& a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }
#define dump(v) (cerr << #v << ": " << v << endl)

#define rep(i, n) for (int i = 0; i < (int)(n); ++i)
#define erep(i, n) for (int i = 0; i <= (int)(n); ++i)
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define clr(a, x) memset(a, x, sizeof(a))
#define sz(a) ((int)(a).size())
#define mp(a, b) make_pair(a, b)
#define ten(n) ((long long)(1e##n))

template <typename T, typename U> void upmin(T& a, const U& b) { a = min<T>(a, b); }
template <typename T, typename U> void upmax(T& a, const U& b) { a = max<T>(a, b); }
template <typename T> void uniq(T& a) { sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); }
template <class T> string to_s(const T& a) { ostringstream os; os << a; return os.str(); }
template <class T> T to_T(const string& s) { istringstream is(s); T res; is >> res; return res; }
void fast_io() { cin.tie(0); ios::sync_with_stdio(false); }
bool in_rect(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }

typedef long long ll;
typedef pair<int, int> pint;

const int dx[] = { 0, 1, 0, -1 };
const int dy[] = { 1, 0, -1, 0 };



int main()
{
    int T;
    cin >> T;
    for (int C = 1; C <= T; ++C)
    {
        int h, w;
        cin >> h >> w;
        char maze[128][128];
        rep(y, h)
            cin >> maze[y];

        bool fire[128][128][4];
        clr(fire, 0);

        int sx, sy, gx, gy;
        rep(y, h) rep(x, w)
        {
            if (maze[y][x] == 'S')
            {
                maze[y][x] = '.';
                sx = x, sy = y;
            }
            else if (maze[y][x] == 'G')
            {
                maze[y][x] = '.';
                gx = x, gy = y;
            }
            else
            {
                const char* ss = "v>^<";
                const char* t = strchr(ss, maze[y][x]);
                if (t)
                {
                    int dir = t - ss;
                    assert(0 <= dir && dir < 4);

                    rep(cyc, 4)
                    {
                        int cx = x, cy = y;
                        int d = (dir - cyc + 4) % 4;
                        while (in_rect(cx, cy, w, h))
                        {
                            fire[cy][cx][cyc] = true;
                            cx += dx[d];
                            cy += dy[d];
                        }
                    }
                }
            }
        }

        const int inf = 1919810;
        int dp[128][128][4];
        rep(y, h) rep(x, w) rep(cyc, 4)
            dp[y][x][cyc] = inf;

        int res = -1;
        queue<tuple<int, int, int>> q;
        dp[sy][sx][0] = 0;
        q.push(make_tuple(sx, sy, 0));
        while (!q.empty())
        {
            int x, y, cyc;
            tie(x, y, cyc) = q.front();
            q.pop();

            if (x == gx && y == gy)
            {
                res = dp[y][x][cyc];
                break;
            }

            const int nc = dp[y][x][cyc] + 1;
            const int ncyc = (cyc + 1) % 4;
            rep(dir, 4)
            {
                int nx = x + dx[dir], ny = y + dy[dir];
                if (in_rect(nx, ny, w, h) && maze[ny][nx] == '.'
                    && !fire[ny][nx][ncyc] && nc < dp[ny][nx][ncyc])
                {
                    dp[ny][nx][ncyc] = nc;
                    q.push(make_tuple(nx, ny, ncyc));
                }
            }
        }

        printf("Case #%d: ", C);
        if (res == -1)
            puts("impossible");
        else
            printf("%d\n", res);
    }
}

#include<cstring>
#include<iostream>
#include<cmath>
#include<algorithm>
#include<queue>
using namespace std;

bool B[4][110][110];
int V[4][110][110];
string S[110];

struct R_{
	int cur;
	int x;
	int y;
};

void solve()
{
	int N,M;
	cin>>N>>M;
	
	
	for(int i=0;i<N;i++)
	{
		cin>>S[i];
	}
	
	int sx,sy,ex,ey;
	memset(B,true,sizeof(B));
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<M;j++)
		{
			if(S[i][j] == '^')
			{
				for(int k=i-1;k>=0 && S[k][j]=='.';k--)
				B[0][k][j] = false;
				
				for(int k=j+1;k<M && S[i][k]=='.';k++)
				B[1][i][k] = false;
				
				for(int k=i+1;k<N && S[k][j]=='.';k++)
				B[2][k][j] = false;
				
				for(int k=j-1;k>=0 && S[i][k]=='.';k--)
				B[3][i][k] = false;
			}
			
			else if(S[i][j] == '>')
			{
				for(int k=i-1;k>=0 && S[k][j]=='.';k--)
				B[3][k][j] = false;
				
				for(int k=j+1;k<M && S[i][k]=='.';k++)
				B[0][i][k] = false;
				
				for(int k=i+1;k<N && S[k][j]=='.';k++)
				B[1][k][j] = false;
				
				for(int k=j-1;k>=0 && S[i][k]=='.';k--)
				B[2][i][k] = false;
			}
			else if(S[i][j] == 'v')
			{
				for(int k=i-1;k>=0 && S[k][j]=='.';k--)
				B[2][k][j] = false;
				
				for(int k=j+1;k<M && S[i][k]=='.';k++)
				B[3][i][k] = false;
				
				for(int k=i+1;k<N && S[k][j]=='.';k++)
				B[0][k][j] = false;
				
				for(int k=j-1;k>=0 && S[i][k]=='.';k--)
				B[1][i][k] = false;
			}
			else if(S[i][j] == '<')
			{
				for(int k=i-1;k>=0 && S[k][j]=='.';k--)
				B[1][k][j] = false;
				
				for(int k=j+1;k<M && S[i][k]=='.';k++)
				B[2][i][k] = false;
				
				for(int k=i+1;k<N && S[k][j]=='.';k++)
				B[3][k][j] = false;
				
				for(int k=j-1;k>=0 && S[i][k]=='.';k--)
				B[0][i][k] = false;
			}
			else if(S[i][j] =='S')
			{
				S[i][j] = '.';
				sx=i,sy=j;
			}
			
			else if(S[i][j]=='G')
			{
				S[i][j] ='.';
				ex=i,ey=j;
			}
		}
	}
	memset(V,-1,sizeof(V));
	
	queue< struct R_ > Q;
	Q.push({0,sx,sy});
	
	V[0][sx][sy] = 0;
	
	while(!Q.empty())
	{
		struct R_ P = Q.front();
		Q.pop();
		
		int cur = P.cur;
		int curx = P.x;
		int cury = P.y;
		int mv = V[cur][curx][cury];
		//cout<<mv<<' '<<curx<<' '<<cury<<endl;
		int nxt = (cur+1)%4;
		int nxx = curx+1;
		int nxy = cury;
		
		if(nxx<N && S[nxx][nxy]=='.')
		{
			if(V[nxt][nxx][nxy]==-1 && B[nxt][nxx][nxy])
			{
				V[nxt][nxx][nxy] = mv+1;
				Q.push({nxt,nxx,nxy});
			}
		}
		
		nxx = curx-1;
		
		if(nxx>=0 && S[nxx][nxy]=='.')
		{
			if(V[nxt][nxx][nxy]==-1 && B[nxt][nxx][nxy])
			{
				V[nxt][nxx][nxy] = mv+1;
				Q.push({nxt,nxx,nxy});
			}
		}
		
		nxx = curx;
		nxy = cury+1;
		
		if(nxy<M && S[nxx][nxy]=='.')
		{
			if(V[nxt][nxx][nxy]==-1 && B[nxt][nxx][nxy])
			{
				V[nxt][nxx][nxy] = mv+1;
				Q.push({nxt,nxx,nxy});
			}
		}
		nxy = cury-1;
		
		if(nxy>=0 && S[nxx][nxy]=='.')
		{
			if(V[nxt][nxx][nxy]==-1 && B[nxt][nxx][nxy])
			{
				V[nxt][nxx][nxy] = mv+1;
				Q.push({nxt,nxx,nxy});
			}
		}
	}
	
	int mn = -1;
	for(int i=0;i<4;i++)
	{
		if(mn==-1)
		mn = V[i][ex][ey];
		else if(V[i][ex][ey] != -1)
		mn = min(V[i][ex][ey],mn);
	}
	
	if(mn==-1)
	cout<<"impossible\n";
	else
	cout<<mn<<endl;
	
}

int main()
{
	int T;
	cin>>T;
	for(int i=1;i<=T;i++)
	{
		cout<<"Case #"<<i<<": ";
		solve();
	}
	return 0;
}

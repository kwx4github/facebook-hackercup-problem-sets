/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */



import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.TreeSet;

/**
 *
 * @author Allegea
 */
public class LaserMaze {

	private static int[] dx = {-1, 0, 1, 0};
	private static int[] dy = {0, 1, 0, -1};
	private static String simbols = "^>v<";
	
	private static char[][][] mazes;
	private static int n, m;
	private static int initX, initY;
	private static boolean[][][] visited;
	
	private static boolean canGo(int i, int j, char[][] initial) {
		return i >= 0 && i < n && j >= 0 && j < m && initial[i][j] != '#';
	}
	
	private static boolean canGoMaze(int i, int j, int pos) {
		return i >= 0 && i < n && j >= 0 && j < m && !visited[i][j][pos] &&
				mazes[pos][i][j] != 'l' && mazes[pos][i][j] != '#';
	}
	
	private static void foundInitial(char[][] initial) {
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) 
				if (initial[i][j] == 'S') {
				initX = i;
				initY = j;
				return;
			}
	}
	
	private static void cacheMazes(char[][] initial) {
		mazes = new char[4][n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				char current = initial[i][j]; 
				if (current == '^' || current == '>' ||
						current == 'v' || current == '<') {
					int pos = simbols.indexOf(current);
					for (int h = 0; h < dx.length; h++) {
						int sum = 0;
						while (canGo(i + dx[pos] * sum, j + dy[pos] * sum, initial)) {
							mazes[h][i + dx[pos] * sum][j + dy[pos] * sum] = 'l';
							sum++;
						}
						pos = (pos + 1) % 4;
					}
					
				} else {
					if (mazes[0][i][j] != 'l') mazes[0][i][j] = current;
					if (mazes[1][i][j] != 'l') mazes[1][i][j] = current;
					if (mazes[2][i][j] != 'l') mazes[2][i][j] = current;
					if (mazes[3][i][j] != 'l') mazes[3][i][j] = current;
				}
			}
	}
	
	private static int findSolution() {
		Queue<Integer> x = new LinkedList<Integer>();
		Queue<Integer> y = new LinkedList<Integer>();
		Queue<Integer> z = new LinkedList<Integer>();
		x.add(initX);
		y.add(initY);
		z.add(0);
		int[][][] path = new int[n][m][4];
		visited = new boolean[n][m][4];
		visited[initX][initY][0] = true;
		while (!x.isEmpty()) {
			int a = x.poll();
			int b = y.poll();
			int c = z.poll();
			if (mazes[c][a][b] == 'G') return path[a][b][c];
			int w = (c + 1) % 4;
			for (int h = 0; h < dx.length; h++) {
				int u = a + dx[h];
				int v = b + dy[h];
				if (canGoMaze(u, v, w)) {
					visited[u][v][w] = true;
					path[u][v][w] = path[a][b][c] + 1;
					x.add(u);
					y.add(v);
					z.add(w);
				}
			}
		}
		return -1;
	}
	
    public static void main(String[] args) throws FileNotFoundException, IOException
    {

    	String fileName = "laser_maze";
        Scanner in = new Scanner(new File(fileName + ".txt"));
        FileWriter archivo = new FileWriter(fileName + ".out");


        PrintWriter out = new PrintWriter(archivo);
        out.flush();

        int cases = in.nextInt();
        for (int c = 1; c <= cases; c++) {
        	n = in.nextInt();
        	m = in.nextInt();
        	char[][] initial = new char[n][m];
        	in.nextLine();
        	for (int i = 0; i < n; i++) 
        		initial[i] = in.nextLine().toCharArray();
        	
        	foundInitial(initial);
        	cacheMazes(initial);
        	int solution = findSolution();
        	String answer = solution == -1 ? "impossible" : solution +"";
        	System.out.println("Case #" + c + ": " + answer);
        	out.println("Case #" + c + ": " + answer);

        }
        in.close();
        out.close();
       
    }


}

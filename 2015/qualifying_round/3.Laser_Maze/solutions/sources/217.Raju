#include<iostream>
#include<cstring>
#include<cstdio>
#include<queue>
#include<algorithm>
#define INF 1<<30
using namespace std;

struct trip
{
    int dis,x,y;
    trip(int a,int b,int c)
    {
        dis=a;x=b;y=c;
    }
};

string ss;
char gr[105][105];
int n,m,sx,sy,gx,gy;
int v[4][105][105],d[4][105][105];
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
char lsr[]="^>v<";

bool hits(int dir,int dis,char cc)
{
    int ps;
    for(int i=0;i<4;i++) if(lsr[i]==cc) ps=i;
    //cout<<dir<<" "<<dis<<" "<<cc<<" "
    if((ps+dis)%4!=dir) return false;
    return true;
}
int bfs()
{
    queue<trip> q;
    memset(v,0,sizeof(v));
    v[0][sx][sy]=1;
    d[0][sx][sy]=0;
    trip ob(0,sx,sy);
    q.push(ob);
    while(!q.empty())
    {
        trip u=q.front();
        q.pop();
        int dis=u.dis,x=u.x,y=u.y;
        if(x==gx && y==gy) return d[dis][x][y];
        //cout<<dis<<" "<<x<<" "<<y<<"\n";
        for(int i=0;i<4;i++)
        {
            if(x+dx[i]<0 || x+dx[i]>=n || y+dy[i]<0 || y+dy[i]>=m) continue;
            int cx=x+dx[i],cy=y+dy[i];
            if(gr[cx][cy]=='#' || gr[cx][cy]=='<' || gr[cx][cy]=='>' || gr[cx][cy]=='v' || gr[cx][cy]=='^') continue;
            bool b=true;
            //cout<<i<< "ok";
            for(int j=cx+1;j<n;j++)
            {
                if(gr[j][cy]=='#') break;
                if(gr[j][cy]!='.' && gr[j][cy]!='S' && gr[j][cy]!='G')
                {
                    if(hits(0,dis+1,gr[j][cy])) b=false;
                    break;
                }
            }
            for(int j=cx-1;j>=0;j--)
            {
                if(gr[j][cy]=='#') break;
                if(gr[j][cy]!='.' && gr[j][cy]!='S' && gr[j][cy]!='G')
                {
                    if(hits(2,dis+1,gr[j][cy])) b=false;
                    break;
                }
            }
            for(int j=cy+1;j<m;j++)
            {
                if(gr[cx][j]=='#') break;
                if(gr[cx][j]!='.' && gr[cx][j]!='S' && gr[cx][j]!='G')
                {
                    if(hits(3,dis+1,gr[cx][j])) b=false;
                    break;
                }
            }
            for(int j=cy-1;j>=0;j--)
            {
                if(gr[cx][j]=='#') break;
                if(gr[cx][j]!='.' && gr[cx][j]!='S' && gr[cx][j]!='G')
                {
                    if(hits(1,dis+1,gr[cx][j])) b=false;
                    break;
                }
            }
            int nd=(dis+1)%4;
            if(b && !v[nd][cx][cy])
            {
                v[nd][cx][cy]=1;
                d[nd][cx][cy]=d[dis][x][y]+1;
                trip nw(nd,cx,cy);
                q.push(nw);
            }
        }
    }
    return -1;
}

int main()
{
    freopen("laser_maze.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int t,cs=1,i,j;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d",&n,&m);
        for(i=0;i<n;i++) scanf("%s",gr[i]);
        printf("Case #%d: ",cs++);
        for(int i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(gr[i][j]=='G') gx=i,gy=j;
                else if(gr[i][j]=='S') sx=i,sy=j;
            }
        }
        int k=bfs();
        if(k!=-1) cout<<k<<"\n";
        else cout<<"impossible\n";
    }
}

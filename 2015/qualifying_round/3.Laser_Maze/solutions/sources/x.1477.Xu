#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <iterator>
#define REP(i,a,n) for(int i = (a); i < (int)(n); ++i)
#define foreach(itr,c) for(decltype((c).begin()) itr=(c).begin(); itr != (c).end(); itr++)
#define mp(a,b) make_pair(a,b)

using namespace std;

//typedef __int64 ll;
//typedef unsigned __int64 ull;
typedef long long ll;
typedef unsigned long long ull;


template<typename T>
inline T ABS(T a) { return a > 0 ? a : -a; }
template<typename T>
inline T MIN(T a, T b) { return a < b ? a : b; }
template<typename T>
inline T MAX(T a, T b) { return a > b ? a : b; }
template<typename T>
inline T CHKMIN(T &a, T b) { if(a > b) a = b; return a; }
template<typename T>
inline T CHKMAX(T &a, T b) { if(a < b) a = b; return a; }
template<typename T>
inline void SWAP(T &a, T &b) { static T c; c = a; a = b; b = c; }

int n, m, S[2], G[2];
char maze[4][200][200];

char nxtdir(char c) {
  switch(c) {
  case '^': return '>';
  case '>': return 'v';
  case 'v': return '<';
  case '<': return '^';
  }
  return c;
}

int dir[4][2] = {-1, 0, 0, 1, 1, 0, 0, -1};

int whichdir(char c) {
  switch(c) {
  case '^': return 0;
  case '>': return 1;
  case 'v': return 2;
  case '<': return 3;
  }
  return -1;
}

void init() {
  REP(k, 0, 4) {
    REP(i, 0, n) {
      REP(j, 0, m) {
        int t = whichdir(maze[k][i][j]);
        if(t == -1) continue;
        int ti = i, tj = j;
        //printf("t %d\n", t);
        do {
          ti += dir[t][0];
          tj += dir[t][1];
          if(maze[k][ti][tj] == '.') maze[k][ti][tj] = maze[k][i][j];
        } while(ti >= 0 && tj >= 0 && ti < n && tj < m);
      }
    }
  }
}

int ans[4][150][150], q[50000][3], beg, end;

int bfs() {
  memset(ans, -1, sizeof(ans));
  ans[0][S[0]][S[1]] = 0;
  beg = end = 0;
  q[end][0] = 0;
  q[end][1] = S[0];
  q[end][2] = S[1];
  ++end;
  while(beg < end) {
    int k = q[beg][0], nk = (k + 1) % 4, i = q[beg][1], j = q[beg][2];
    ++beg;
    //printf("kij %d %d %d\n", k, i, j);
    REP(t, 0, 4) {
      int ni = i + dir[t][0], nj = j + dir[t][1];
      if(ni < 0 || nj < 0 || ni >= n || nj >= m) continue;
      if(maze[nk][ni][nj] != '.') continue;
      if(ans[nk][ni][nj] != -1) continue;
      if(ni == G[0] && nj == G[1]) return ans[k][i][j] + 1;
      ans[nk][ni][nj] = ans[k][i][j] + 1;
      //printf("nkij %d %d %d\n", nk, ni, nj);
      q[end][0] = nk;
      q[end][1] = ni;
      q[end][2] = nj;
      ++end;
    }
  }
  return -1;
}

void printmaze() {
  REP(k, 0, 4) {
    REP(i, 0, n) puts(maze[k][i]);
    puts("");
  }
}

int main() {
  freopen("laser_maze.txt", "r", stdin);
	freopen("laser_maze.out", "w", stdout);
  int t;
  scanf("%d", &t);
  for(int tt = 1; tt <= t; ++tt) {
    scanf("%d %d", &n, &m);
    REP(i, 0, n) scanf("%s", maze[0][i]);
    //puts("lab0");
    REP(k, 1, 4) {
      REP(i, 0, n) REP(j, 0, m) {
        maze[k][i][j] = nxtdir(maze[k - 1][i][j]);
        if(maze[k][i][j] == 'S') {
          S[0] = i; S[1] = j;
          maze[k - 1][i][j] = maze[k][i][j] = '.';
        } else if(maze[k][i][j] == 'G') {
          G[0] = i; G[1] = j;
          maze[k - 1][i][j] = maze[k][i][j] = '.';
        }
      }
    }
    //puts("lab1");
    init();
    //printmaze();
    //puts("lab2");
    int ret = bfs();
    printf("Case #%d: ", tt);
    if(ret == -1) {
      puts("impossible");
    } else {
      printf("%d\n", ret);
    }
  }
  return 0;
}

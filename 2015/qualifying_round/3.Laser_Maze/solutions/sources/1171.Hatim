#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<queue>
#include<list>
#include<cstdio>
#include<cstdlib>
#include<ctime>
#include<cstring>
#include<cmath>
#include<cassert>
 
using namespace std;
 
#define mod 1000000007
#define max(a,b) a>b?a:b
#define min(a,b) a<b?a:b
#define X first
#define Y second
#define pb push_back
#define mp make_pair
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define all(c) c.begin(),c.end()
#define MAXN 100010
 
typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef pair<pair<int,int>,int> ppi;

string S[110];
int a[4][110][110];
int N,M;

int bfs(){
	queue< ppi > Q;	
	int visit[4][110][110]={0};
	for(int i=0;i<N;i++)
	for(int j=0;j<M;j++){
		if(S[i][j]=='S'){
			Q.push(ppi(pii(i,j),0));
			visit[0][i][j]=1;
		}				
	}
	while(!Q.empty()){
		ppi P=Q.front();
		int u,v,d,p;
		u=P.X.X;
		v=P.X.Y;
		d=P.Y;
		p=(d+1)%4;
		if(S[u][v]=='G') return d;
		Q.pop();
		if(u-1>=0 && !visit[p][u-1][v] && a[p][u-1][v]==0){
			visit[p][u-1][v]=1;
			Q.push(ppi(pii(u-1,v),d+1));
		}
		if(v-1>=0 && !visit[p][u][v-1] && a[p][u][v-1]==0){
			visit[p][u][v-1]=1;
			Q.push(ppi(pii(u,v-1),d+1));
		}	
		if(u+1<N && !visit[p][u+1][v] && a[p][u+1][v]==0){
			visit[p][u+1][v]=1;
			Q.push(ppi(pii(u+1,v),d+1));
		}
		if(v+1<M && !visit[p][u][v+1] && a[p][u][v+1]==0){
			visit[p][u][v+1]=1;
			Q.push(ppi(pii(u,v+1),d+1));
		}
	}
	return -1;
}

int main(){
	cin.sync_with_stdio(0);
	cin.tie();
//	freopen("lazer_maze.txt","r",stdin);
	freopen("op.txt","w",stdout);
	int t;
	cin>>t;
	for(int cno=1;cno<=t;cno++){	
		cin>>N>>M;
		for(int i=0;i<N;i++) cin>>S[i];
		for(int p=0;p<4;p++){
			for(int i=0;i<N;i++){
				for(int j=0;j<M;j++){
					if(S[i][j]=='.' || S[i][j]=='S' || S[i][j]=='G') continue;
					a[p][i][j]=1;
					if(S[i][j]=='^'){
						int k=i-1;
						while(k>=0 && (S[k][j]=='.' || S[k][j]=='S' || S[k][j]=='G')) a[p][k--][j]=1;
					}
					else if(S[i][j]=='>'){
						int k=j+1;
						while(k<M && (S[i][k]=='.' || S[i][k]=='S' || S[i][k]=='G')) a[p][i][k++]=1;
					}
					else if(S[i][j]=='v'){
						int k=i+1;
						while(k<N && (S[k][j]=='.' || S[k][j]=='S' || S[k][j]=='G')) a[p][k++][j]=1;
					}
					else if(S[i][j]=='<'){
						int k=j-1;
						while(k>=0 && (S[i][k]=='.' || S[i][k]=='S' || S[i][k]=='G')) a[p][i][k--]=1;
					}
				}
			}
			for(int i=0;i<N;i++)
			for(int j=0;j<M;j++){
				if(S[i][j]=='^') S[i][j]='>';
				else if(S[i][j]=='>') S[i][j]='v';
				else if(S[i][j]=='v') S[i][j]='<';
				else if(S[i][j]=='<') S[i][j]='^';	
			}		
		}
		int ans=bfs();
		cout<<"case #"<<cno<<": ";
		if(ans==-1) cout<<"impossible\n";
		else cout<<ans<<"\n";
		memset(a,0,sizeof(a));	
	}
	return 0;
}

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)

const int maxsize=128;
const int dx[]={-1,0,1,0};
const int dy[]={0,1,0,-1};

int sx,sy;
char a[maxsize][maxsize];
bool b[maxsize][maxsize][4];
int d[maxsize][maxsize][4];
int sizeq;
int q[maxsize*maxsize*4];

inline bool inside(int x,int y)
{
	return x>=0 && x<sx && y>=0 && y<sy;
}
inline bool ok(int x,int y)
{
	if (!inside(x,y)) return false;
	return a[x][y]=='.' || a[x][y]=='G' || a[x][y]=='S';
}
void add(int x,int y,int w)
{
	int p=(w&3);
	if (!b[x][y][p] || d[x][y][p]>=0) return;
	d[x][y][p]=w;
	q[sizeq++]=((x<<16)|(y<<2)|p);
}
int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("laser_maze_example_input.txt","r",stdin);
	freopen("c.in","r",stdin); freopen("c.out","w",stdout);
	int testcase;
	scanf("%d",&testcase);
	for (int case_id=1;case_id<=testcase;case_id++)
	{
		scanf("%d%d",&sx,&sy);
		for (int i=0;i<sx;i++) scanf("%s",a[i]);
		memset(b,true,sizeof(b));
		for (int k=0;k<4;k++) for (int x=0;x<sx;x++) for (int y=0;y<sy;y++)
			if (a[x][y]=='#')
				b[x][y][k]=false;
			else 
			{
				int d=-1;
				if (a[x][y]=='^') d=0;
				if (a[x][y]=='>') d=1;
				if (a[x][y]=='v') d=2;
				if (a[x][y]=='<') d=3;
				if (d>=0)
				{
					b[x][y][k]=false;
					int mx=dx[(d+k)%4],my=dy[(d+k)%4];
					int x2=x+mx,y2=y+my;
					for (;ok(x2,y2);x2+=mx,y2+=my) b[x2][y2][k]=false;
				}
			}
		memset(d,255,sizeof(d));
		sizeq=0;
		for (int x=0;x<sx;x++) for (int y=0;y<sy;y++) if (a[x][y]=='S')
		{
			d[x][y][0]=0;
			q[sizeq++]=((x<<16)|(y<<2));
		}
		int ret=-1;
		for (int cl=0;cl<sizeq;cl++)
		{
			int x=(q[cl]>>16);
			int y=((q[cl]>>2)&(two(14)-1));
			int k=(q[cl]&3);
			if (a[x][y]=='G') { ret=d[x][y][k&3]; break; }
			int w=d[x][y][k&3]+1;
			for (int p=0;p<4;p++)
			{
				int x2=x+dx[p],y2=y+dy[p];
				if (inside(x2,y2)) add(x2,y2,w);
			}
		}
		printf("Case #%d: ",case_id);
		if (ret<0)
			printf("impossible\n");
		else
			printf("%d\n",ret);
	}
	return 0;
}


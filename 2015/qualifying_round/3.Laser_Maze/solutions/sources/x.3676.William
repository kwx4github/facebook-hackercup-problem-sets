#include <stdio.h>
#include <string.h>

char ori_graph[101][101];
char graph[4][101][101];
int qqq[50000][4];
int qtop=0;
int qend=0;
 int depth=0;
 int win=0;
 int m,n;
 
 void enqqq (int x, int y, int k, int d){
	 qend++;
	 graph[d][x][y]='#';
	 qqq[qend][0]=x;
	 qqq[qend][1]=y;
	 qqq[qend][2]=k;
	 qqq[qend][3]=d;
 }
 

 
void find(int x, int y,int k, int d){
	
	
	

	d=(d+1)%4;
	if (x+1<m){
		if (graph[d][x+1][y]=='G'){
			win = 1;
			depth=k;} else {
		if (graph[d][x+1][y]!='#' ){
			enqqq(x+1,y,k+1,d);}}}
	if (y+1<n){
		if (graph[d][x][y+1]=='G'){
			win = 1;
			depth=k;} else {
		if (graph[d][x][y+1]!='#' ){
			enqqq(x,y+1,k+1,d);}}}	
	if (x-1>=0){
		if (graph[d][x-1][y]=='G'){
			win = 1;
			depth=k;} else {
		if (graph[d][x-1][y]!='#' ){
			enqqq(x-1,y,k+1,d);}}}
	if (y-1>=0){
		if (graph[d][x][y-1]=='G'){
			win = 1;
			depth=k;} else {
		if (graph[d][x][y-1]!='#' ){
			enqqq(x,y-1,k+1,d);}}}
}

 void dqqq(){
	 if (win) {return ;}
	 qtop++;
	 find (qqq[qtop][0],qqq[qtop][1],qqq[qtop][2],qqq[qtop][3]);
 }

void shoot(int g, int x, int y, int d){
	int s;
	switch(d){
		case 1:
		graph[g][x][y]='#';
		s=x-1;
		while (s>=0 && s<m){
			if (graph[g][s][y]!='^' && graph[g][s][y]!='>' && graph[g][s][y]!='<' && graph[g][s][y]!='v' && graph[g][s][y]!='#')
			{graph[g][s][y]='#';
			s--; }else {break;}
		}
		break;
		case 2:
		graph[g][x][y]='#';
		s=y+1;
		while (s>=0 && s<n){
			if (graph[g][x][s]!='^' && graph[g][x][s]!='>' && graph[g][x][s]!='<' && graph[g][x][s]!='v' && graph[g][x][s]!='#')
			{graph[g][x][s]='#';
			s++;}else {break;}
		}
		break;
		case 3:
		graph[g][x][y]='#';
		s=x+1;
		while (s>=0 && s<m){
			if (graph[g][s][y]!='^' && graph[g][s][y]!='>' && graph[g][s][y]!='<' && graph[g][s][y]!='v' && graph[g][s][y]!='#')
			{graph[g][s][y]='#';
			s++;}else {break;}
		}
		break;
		case 4:
		graph[g][x][y]='#';
		s=y-1;
		while (s>=0 && s<n){
			if (graph[g][x][s]!='^' && graph[g][x][s]!='>' && graph[g][x][s]!='<' && graph[g][x][s]!='v' && graph[g][x][s]!='#')
			{graph[g][x][s]='#';
			s--;}else {break;}
		}
		break;
	}
}

void render(){
	int i,j;
	for (i=0;i<m;i++){
		for (j=0;j<n;j++){
			if (ori_graph[i][j]=='^'){
				shoot(0,i,j,1);
				shoot(1,i,j,2);
				shoot(2,i,j,3);
				shoot(3,i,j,4);
			}
			if (ori_graph[i][j]=='>'){
				shoot(0,i,j,2);
				shoot(1,i,j,3);
				shoot(2,i,j,4);
				shoot(3,i,j,1);
			}
			if (ori_graph[i][j]=='v'){
				shoot(0,i,j,3);
				shoot(1,i,j,4);
				shoot(2,i,j,1);
				shoot(3,i,j,2);
			}
			if (ori_graph[i][j]=='<'){
				shoot(0,i,j,4);
				shoot(1,i,j,1);
				shoot(2,i,j,2);
				shoot(3,i,j,3);
			}
		}
	}
}

int main(){
 int i,j,t,k,l;
 int startpos[2];
 scanf("%d",&t);
 for (i =0;i<t;i++){
	 win=0;
	 qend=-1;
	 qtop=-1;
	 depth=1;
 scanf("%d %d",&m,&n);
			

 for (j =0;j<m;j++){
	scanf("%s", ori_graph[j]);
	for(l=0;l<n;l++)
		if (ori_graph[j][l]=='S'){
			startpos[0]=j;
			startpos[1]=l;
		}
 }
 memcpy(graph[0], ori_graph, sizeof (ori_graph) );
 memcpy(graph[1], ori_graph, sizeof (ori_graph) );
 memcpy(graph[2], ori_graph, sizeof (ori_graph) );
 memcpy(graph[3], ori_graph, sizeof (ori_graph) );
render();
enqqq(startpos[0],startpos[1],1,0);
while (qtop!=qend){
if (win)
	break;
dqqq();}
/* 
for (j =0;j<m;j++){
	printf("%s\n", graph[0][j]);
	
 }
 for (j =0;j<m;j++){
	printf("%s\n", graph[1][j]);
	
 }
 for (j =0;j<m;j++){
	printf("%s\n", graph[2][j]);
	
 }
 for (j =0;j<m;j++){
	printf("%s\n", graph[3][j]);
	
 } */
if (win){
printf("Case #%d: %d\n",i+1,depth); }else {
	printf("Case #%d: impossible\n",i+1);
}}

}


#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <iostream>
#include <utility>
#include <sstream>
#include <cmath>
#include <ctime>
#include <iostream>

#define clr(a) memset(a, 0, sizeof(a))
#define fill(a, b) memset(a, b, sizeof(a))

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> pii;

#ifdef DBG1
    #define dbg(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
    #define dbg(...)
#endif

const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};
const char dir[4] = {'^', '>', 'v', '<'};

const int N = 120;
char s[N][N];
bool bad[4][N][N];
int dist[4][N][N];

struct State {
    int t, x, y;
    State(int t, int x, int y) : t(t), x(x), y(y) {
    }
};

void solve() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf("%s", s[i]);
    }
    int sx, sy, gx, gy;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == 'S') {
                sx = i, sy = j;
                s[i][j] = '.';
            }
            if (s[i][j] == 'G') {
                gx = i, gy = j;
                s[i][j] = '.';
            }
        }
    }

    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < m; ++k) {
                bad[i][j][k] = (s[j][k] != '.');
            }
        }
    }
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < m; ++k) {
                if (s[j][k] != '.' && s[j][k] != '#') {
                    int p = 0;
                    while (p < 4 && dir[p] != s[j][k]) {
                        ++p;
                    }
                    assert(p < 4);
                    p = (p + i) % 4;

                    int x = j, y = k;
                    while (1) {
                        x += dx[p], y += dy[p];
                        if (0 <= x && x < n && 0 <= y && y < m && s[x][y] == '.') {
                            bad[i][x][y] = true;
                        } else {
                            break;
                        }
                    }
                }
            }
        }
    }
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < m; ++k) {
                dbg("%c", bad[i][j][k] ? '#' : '.');
            }
            dbg("\n");
        }
        dbg("\n");
    }
    fill(dist, 0xFF);
    vector <State> q;
    dist[0][sx][sy] = 0;
    q.push_back(State(0, sx, sy));
    for (int i = 0; i < int(q.size()); ++i) {
        int t = q[i].t;
        int x = q[i].x;
        int y = q[i].y;
        dbg("dist[%d][%d][%d] = %d\n", t, x, y, dist[t][x][y]);
        for (int j = 0; j < 4; ++j) {
            int t1 = (t + 1) % 4;
            int x1 = x + dx[j];
            int y1 = y + dy[j];
            if (!(0 <= x1 && x1 < n && 0 <= y1 && y1 < m)) {
                continue;
            }
            if (dist[t1][x1][y1] == -1 && !bad[t1][x1][y1]) {
                dist[t1][x1][y1] = dist[t][x][y] + 1;
                q.push_back(State(t1, x1, y1));
            }
        }
    }
    int bestT = -1;
    for (int t = 0; t < 4; ++t) {
        if (dist[t][gx][gy] != -1 && (bestT == -1 || dist[bestT][gx][gy] > dist[t][gx][gy])) {
            bestT = t;
        }
    }
    if (bestT == -1) {
        printf("impossible\n");
    } else {
        printf("%d\n", dist[bestT][gx][gy]);
    }
}

int main()
{
#ifdef DBG1
    freopen(".in", "r", stdin);
    freopen(".out", "w", stdout);
    freopen(".err", "w", stderr);
#endif

    int tt;
    scanf("%d", &tt);
    for (int ii = 1; ii <= tt; ++ii) {
        dbg("Case #%d:\n", ii);
        printf("Case #%d: ", ii);
        solve();
    }

    return 0;
}

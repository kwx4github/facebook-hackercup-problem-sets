from __future__ import print_function
import sys

def get_paths(point, maze):
    paths = []
    if point[0] > 0:
        if maze[point[0] - 1][point[1]]["type"] == ".":
            paths.append([point[0] - 1, point[1]])     
    if point[1] < len(maze[0]) - 1:
        if maze[point[0]][point[1] + 1]["type"] == ".":
            paths.append([point[0], point[1] + 1])
    if point[0] < len(maze) - 1:
        if maze[point[0] + 1][point[1]]["type"] == ".":
            paths.append([point[0] + 1, point[1]])
    if point[1] > 0:
        if maze[point[0]][point[1] - 1]["type"] == ".":
            paths.append([point[0], point[1] - 1])
    return paths

def dead_by_laser(maze, point, lasers):
    for laser in lasers:
        if laser[2] == "^":
            if laser[1] == point[1]:
                if laser[0] < point[0]:
                    continue
                is_stopped = False
                for p in range(laser[0] - 1, point[0] - 1, -1):
                    if maze[p][laser[1]]["type"] == "#":
                        is_stopped = True
                        break
                if not is_stopped:
                    return True
        elif laser[2] == ">":
            if laser[0] == point[0]:
                if laser[1] > point[1]:
                    continue
                is_stopped = False
                for p in range(laser[1] + 1, point[1]):
                    if maze[laser[0]][p]["type"] == "#":
                        is_stopped = True
                        break
                if not is_stopped:
                    return True
        elif laser[2] == "v":
            if laser[1] == point[1]:
                if laser[0] > point[0]:
                    continue
                is_stopped = False
                for p in range(laser[0] + 1, point[0]):
                    if maze[p][laser[1]]["type"] == "#":
                        is_stopped = True
                        break
                if not is_stopped:
                    return True
        elif laser[2] == "<":
            if laser[0] == point[0]:
                if laser[1] < point[1]:
                    continue
                is_stopped = False
                for p in range(laser[1] - 1, point[1], -1):
                    if maze[laser[0]][p]["type"] == "#":
                        is_stopped = True
                        break
                if not is_stopped:
                    return True
    return False

def shift_lasers(lasers):
    for laser in lasers:
        if laser[2] == "^":
            laser[2] = ">"
        elif laser[2] == ">":
            laser[2] = "v"
        elif laser[2] == "v":
            laser[2] = "<"
        elif laser[2] == "<":
            laser[2] = "^"
    return lasers

def solve(maze):
    start_point = None
    goal_point = None
    lasers = []

    for row in range(len(maze)):
        for column in range(len(maze[row])):
            if maze[row][column]["type"] == "S":
                maze[row][column]["type"] = "."
                start_point = [row, column]
            elif maze[row][column]["type"] == "G":
                maze[row][column]["type"] = "."
                goal_point = [row, column]
            elif maze[row][column]["type"] in ["^", ">", "v", "<"]:                
                lasers.append([row, column, maze[row][column]["type"]])
                maze[row][column]["type"] = "#"

    queue = [get_paths(start_point, maze)]
    state = 0
    steps = 0
    while queue:
        steps += 1
        state = (state + 1) % 4
        
        paths = queue.pop(0)

        if not paths:
            steps -= 1
            continue
        
        lasers = shift_lasers(lasers)

        new_paths = []
        for path in paths:
            if maze[path[0]][path[1]]["visited"][state]:
                continue
            if dead_by_laser(maze, path, lasers):
                continue
            if path[0] == goal_point[0] and path[1] == goal_point[1]:
                return str(steps)
            maze[path[0]][path[1]]["visited"][state] = True
            new_paths.extend(get_paths(path, maze))
        queue.append(new_paths)

    
    return "impossible"
def main():
    with open(__file__.replace("py", "in"), "r") as input_file:
        output_file = open(__file__.replace("py", "out"), "w")
        case_count = int(next(input_file))
        case_counter = 1
        for case in range(case_count):
            height, width = [int(x) for x in next(input_file).split(" ")]
            maze = [[{
                "visited": [False, False, False, False],
                "type": None
                } for x in range(width)] for y in range(height)]
            for row in range(height):
                chars = list(next(input_file))[:width]
                for column in range(len(chars)):
                    maze[row][column]["type"] = chars[column]
            print("Case #{0}: {1}".format(case_counter, solve(maze)), file=output_file)
            case_counter += 1
    return 0

if __name__ == "__main__":
    status = main()
    sys.exit(status)

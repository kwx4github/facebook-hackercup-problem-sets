#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second

const int N = 101;
const int dir[][2] = {0,-1,-1,0,0,1,1,0};
const char las[] = {'<', '^', '>', 'v'};

int n, m, vis[N][N][4], ded[N][N][4], si, sj, gi, gj;
char mat[N][N];

bool valid(int i, int j)
{
	if (i < 0 || j < 0 || i >= n || j >= m) return 0;
	return mat[i][j] == '.';
}

void process_laser(int i, int j, char x)
{
	int a;
	for (a = 0; las[a] != x; ++a);
	for (int b = 0; b < 4; ++b)
	{
		int d = (a+b)%4;
		int ii = i, jj = j;
		do 
		{
			ded[ii][jj][b] = 1;
			ii += dir[d][0];
			jj += dir[d][1];
		} while (valid(ii, jj));
	}
}

int solve()
{
	queue<pair<int, pair<int, int>>> que;
	vis[si][sj][0] = 0;
	que.push({0,{si,sj}});
	
	while (!que.empty())
	{
		auto p = que.front();
		que.pop();
		int k = p.F;
		int i = p.S.F;
		int j = p.S.S;
		if (i == gi && j == gj) return vis[i][j][k];
		for (int d = 0; d < 4; ++d)
		{
			int ii = i+dir[d][0];
			int jj = j+dir[d][1];
			int kk = (k+1)%4;
			if (!valid(ii, jj) || ded[ii][jj][kk] || vis[ii][jj][kk] != -1) continue;
			vis[ii][jj][kk] = vis[i][j][k]+1;
			que.push({kk,{ii,jj}});
		}
	}
	
	return -1;
}

int main()
{
	ios::sync_with_stdio(0);
	
	int t;
	cin >> t;
	for (int q = 1; q <= t; ++q)
	{
		cout << "Case #" << q << ": ";
		cin >> n >> m;
		memset(ded, 0, sizeof ded);
		memset(vis, -1, sizeof vis);
		vector<tuple<int, int, char>> vet;
		for (int i = 0; i < n; ++i)
		{
			cin >> mat[i];
			for (int j = 0; j < m; ++j)
			{
				if (mat[i][j] == 'S') si = i, sj = j;
				else if (mat[i][j] == 'G') gi = i, gj = j;
				else if (mat[i][j] == '#' || mat[i][j] == '.');
				else vet.push_back(make_tuple(i, j, mat[i][j]));
			}
		}
		mat[gi][gj] = '.';
		mat[si][sj] = '.';
		for (auto p : vet) process_laser(get<0>(p), get<1>(p), get<2>(p));
		int res = solve();
		if (res == -1) cout << "impossible\n";
		else cout << res << "\n";
	}
}


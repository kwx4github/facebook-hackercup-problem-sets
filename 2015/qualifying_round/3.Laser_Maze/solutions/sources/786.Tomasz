
#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef pair<PII, int> PP;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

const int MX = 102;
string B[MX];
int T[MX][MX][4];
const int INF=1e9;

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
string s = "^>v<";

    int n,m;
bool inside(int i,int j) {
    return i >= 0 && i < n && j >= 0 && j < m;
}

void solve(int tc) {
    cout << "Case #" << tc << ": ";
    cin >> n >> m;
    REP(i,n) cin >> B[i];
    PII bg, nd;
    REP(i,n) REP(j,m) {
        char b = B[i][j];
        int val = -1;
        if (b == 'S') {
            bg = MP(i,j);
            val = INF;
        } else if (b == 'G') {
            nd = MP(i,j);
            val = INF;
        } else if (b == '.') {
            val = INF;
        }
        REP(k,4) T[i][j][k] = val;
    }
    REP(i,n) REP(j,m) {
        REP(k0,4) if (B[i][j] == s[k0]) {
            REP(k,4) {
                int ii = i, jj = j;
                while(true) {
                    ii += dx[(k+k0)%4];
                    jj += dy[(k+k0)%4];
                    if (!inside(ii,jj) || T[ii][jj][k] == -1) break;
                    T[ii][jj][k] = -2;
                }
            }
        }
    }
    /*REP(k,4) {
        REP(i,n) {
            REP(j,m) {
                if (T[i][j][k] == INF) cout << '.';
                else if (T[i][j][k] == -1) cout << "#";
                else cout << "+";
            }
            cout << endl;
        }
        cout << endl;
    }*/
    T[bg.X][bg.Y][0] = 0;
    queue<PP> Q;
    Q.push(MP(bg,0));
    while(!Q.empty()) {
        PP f = Q.front();
        Q.pop();
        if (f.X == nd) {
            cout << T[f.X.X][f.X.Y][f.Y] << endl;
            return;
        }
        REP(t,4) {
            PP g = f;
            g.X.X += dx[t];
            g.X.Y += dy[t];
            g.Y = (g.Y+1)%4;
            if (!inside(g.X.X,g.X.Y) || T[g.X.X][g.X.Y][g.Y] != INF) continue;
            T[g.X.X][g.X.Y][g.Y] = T[f.X.X][f.X.Y][f.Y]+1;
            Q.push(g);
        }
    }
    cout << "impossible" << endl;


}

int main(){
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int t;
    cin >> t;
    REP(i,t) solve(i+1);

    return 0;
}


#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <list>
using namespace std;
int n, m, sx, sy, gx, gy;
int a[101][101]={0};
int dx[5] = {0,-1, 0, 1, 0};
int dy[5] = {0, 0, 1, 0,-1};
struct node{
    int x= 0,y= 0,time = 0;
};
long maxx = 0;
vector<node> lazers;
bool b[101][101][4];
bool haveAnswer = false;
int counter[101][101] = {0};
bool check(int x, int y, int time){
    int xx, yy;
    if(x<=0 || y<=0 || x>m || y>n) return false;
    if(a[x][y] != 0) return false;
    /*if(counter[x][y]>16) return false;
    if(counter[x][y]>maxx){
        maxx = counter[x][y];
    }*/
    if(b[x][y][time%4]) return false;
    xx = x;
    while(xx - 1>0){
        xx--;
        if(a[xx][y] != 0) break;
    }
    if(a[xx][y] > 0 && (a[xx][y] + time - 1)% 4 + 1 == 3){
        return false;
    }
    xx = x;
    while(xx + 1 <= m){
        xx++;
        if(a[xx][y] != 0) break;
    }
    if(a[xx][y] > 0 && (a[xx][y] + time - 1)% 4 + 1 == 1){
        return false;
    }
    yy = y;
    while(yy - 1>0){
        yy--;
        if(a[x][yy] != 0) break;
    }
    if(a[x][yy] > 0 && (a[x][yy] + time - 1)% 4 + 1 == 2){
        return false;
    }
    yy = y;
    while(yy + 1 <= n){
        yy++;
        if(a[x][yy] != 0) break;
    }
    if(a[x][yy] > 0 && (a[x][yy] + time - 1)% 4 + 1 == 4){
        return false;
    }
    return true;
}
int find(){
    list<node> q;
    node tmp;
    tmp.x =sx; tmp.y = sy; tmp.time = 0;
    b[tmp.x][tmp.y][tmp.time % 4] = true;
    q.push_back(tmp);
    while(!q.empty()){
        tmp = q.front();
        counter[tmp.x][tmp.y]++;
        if(tmp.x == gx && tmp.y == gy){
            haveAnswer = true;
            return tmp.time;
        }
        for(int k = 1; k <= 4; k++){
            if(check(tmp.x+dx[k], tmp.y+dy[k], tmp.time+1)){
                node nn;
                nn.x = tmp.x+dx[k];
                nn.y = tmp.y+dy[k];
                nn.time = tmp.time+1;
                b[nn.x][nn.y][nn.time % 4] = true;
                q.push_back(nn);
            }
        }
        q.pop_front();
    }
    return -1;
}
int main(int argc, const char * argv[]) {
    ifstream input("input.txt");
    ofstream output("output.txt");
    int t, i, j, ans;
    input>>t;
    for(int tt = 1; tt <= t; tt++){
        input>>m>>n;
        haveAnswer = false;
        for(i = 1; i <= m; i++){
            string st;
            input>>st;
            for(j = 0; j < n; j++){
                if(st[j] == '.'){
                    a[i][j+1] = 0;
                }else if(st[j] == '#'){
                    a[i][j+1] = -1;
                }else if(st[j] == 'S'){
                    a[i][j+1] = 0;
                    sx = i;
                    sy = j+1;
                }else if(st[j] == 'G'){
                    a[i][j+1] = 0;
                    gx = i;
                    gy = j+1;
                }else if(st[j] == '^'){
                    a[i][j+1] = 1;
                }else if(st[j] == '>'){
                    a[i][j+1] = 2;
                }else if(st[j] == 'v'){
                    a[i][j+1] = 3;
                }else if(st[j] == '<'){
                    a[i][j+1] = 4;
                }
            }
        }
        memset(counter, 0, sizeof(counter));
        memset(b,0,sizeof(b));
        ans = find();
        if(ans != -1){
            output<<"Case #"<<tt<<": "<<ans<<"\n";
        }else{
            output<<"Case #"<<tt<<": "<<"impossible\n";
        }
    }
    return 0;
}

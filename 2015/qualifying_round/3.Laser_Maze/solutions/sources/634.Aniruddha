#include <bits/stdc++.h>

using namespace std;

#define LL long long int
#define sd(x) scanf("%d", &x)
#define MP make_pair
#define PB push_back
#define vi vector<int> 
#define pii pair<int,int>
#define F first
#define S second
#define D double
#define LD long double
struct State
{
	int i,j,k;
	State(int _i = 0, int _j = 0, int _k = 0): i(_i), j(_j), k(_k) {}
};
int dx[] = {-1, 0, 1, 0, -1, 0, 1, 0};
int dy[] = {0, 1, 0, -1, 0, 1, 0, -1};
inline void solve()
{
	int m,n;
	sd(m); sd(n);
	vector<string> maze;
	string wall;
	for(int i = 0; i < n+2; i++)
		wall += "#";
	maze.PB(wall);
	for(int i = 0; i < m; i++)
	{
		string str;
		cin >> str;
		maze.PB("#"+str+"#");
	}
	maze.PB(wall);
	// for(int i=0;i<maze.size();i++)
	// {
	// 	cout<<maze[i]<<endl;
	// }
	vector<vector<vector<bool> > >visited(m+2, vector<vector<bool> > (n+2, vector<bool> (4, false)));
	for(int i = 0; i < maze.size(); i++)
	{
		for(int j = 0; j < maze[i].size(); j++)
		{
			// cout<<i<<" "<<j<<" "<<maze[i][j]<<endl;
			int idx = 0;
			if(maze[i][j] == '#')
			{
				visited[i][j][0] = visited[i][j][1] = visited[i][j][2] = visited[i][j][3] = true;
				continue;
			}
			else if(maze[i][j] == '^')
			{
				visited[i][j][0] = visited[i][j][1] = visited[i][j][2] = visited[i][j][3] = true;
				idx = 0;
			}
			else if(maze[i][j] == '>')
			{
				visited[i][j][0] = visited[i][j][1] = visited[i][j][2] = visited[i][j][3] = true;
				idx = 1;
			}
			else if(maze[i][j] == 'v')
			{
				visited[i][j][0] = visited[i][j][1] = visited[i][j][2] = visited[i][j][3] = true;
				idx = 2;
			}
			else if(maze[i][j] == '<')
			{
				visited[i][j][0] = visited[i][j][1] = visited[i][j][2] = visited[i][j][3] = true;
				idx = 3;
			}
			else
				continue;
			// cout<<i<<" "<<j<<" "<<maze[i][j]<<idx<<endl;
			for(int k = 0; k < 4; k++)
			{
				int x = i+dx[idx+k], y = j+dy[idx+k];
				while(maze[x][y] == '.' || maze[x][y] == 'S' || maze[x][y] == 'G')
				{
					// cout<<x<<" "<<y<<" "<<dx[idx+k]<<" "<<dy[idx+k]<<endl;
					visited[x][y][k] = true;
					x += dx[idx+k];
					y += dy[idx+k];
				}
			}
			// cout<<"here"<<endl;
		}
	}
	// for(int i=0;i<maze.size();i++)
	// {
	// 	for(int j=0;j<maze[i].size();j++)
	// 	{
	// 		for(int k=0;k<4;k++)
	// 			cout<<visited[i][j][k];
	// 		cout<<" ";
	// 	}
	// 	cout<<endl;
	// }
	int startX, startY;
	for(int i=0;i<maze.size();i++)
	{
		for(int j=0;j<maze[i].size();j++)
		{
			if(maze[i][j] == 'S')
			{
				startX = i;
				startY = j;
				break;
			}
		}
	}

	queue<State> q;
	q.push(State(startX,startY,0));
	while(q.size())
	{
		State stt = q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int x = stt.i + dx[i];
			int y = stt.j + dy[i];
			int k = stt.k + 1;
			if(visited[x][y][k%4] == false)
			{
				visited[x][y][k%4] = true;
				q.push(State(x,y,k));
				if(maze[x][y] == 'G')
				{
					cout<<k<<endl;
					return;
				}
			}
		}
	}
	cout<<"impossible"<<endl;
}

int main()
{
	int t, i;
	sd(t);
	for(i = 1; i <= t; i++)
	{
		printf("Case #%d: ", i);
		solve();
	}
    return 0;
}
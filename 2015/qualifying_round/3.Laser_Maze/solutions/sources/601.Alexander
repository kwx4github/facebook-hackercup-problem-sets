#include <iostream>
#include <fstream> 
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <bitset>
#include <map>
#include <set>
#include <ctime>
#include <cfloat>

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define forab(i, k, n) for (int i = (int)(k); i < (int)(n); i++)
#define forba(i, n, k) for (int i = (int)(n) - 1; i >= (int)(k); i--)

#define vi vector<int>
#define pii pair<int, int>
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define X first
#define Y second
#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef double ld; 

const ld pi = acos(-1.0);
const ld eps = 1e-8;
const int INF = 1E9;
const ll LINF = 1E18;		
const int MAXN = 111;      
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
const char ct[] = {'^', '>', 'v', '<'};

int t, n, m;
pii st, fn;
int ans, table[MAXN][MAXN];
int cover[MAXN][MAXN][4];
int dist[MAXN][MAXN][4];
vector<pii> turrets[4];             
bool f;
string s;

queue<pair<pii, int> > q;

void bfs() {
	while (!q.empty())
		q.pop();
		
	forn(i, MAXN)
		forn(j, MAXN)
			forn(k, 4)
				dist[i][j][k] = INF;
	dist[st.X][st.Y][0] = 0;
	q.push({st, 0});

	while (!q.empty()) {
		pii cur = q.front().X;
		int f = q.front().Y, f2 = (f + 1) % 4;
		q.pop();
		
		forn(d, 4) {
			pii cur2 = {cur.X + dx[d], cur.Y + dy[d]};
			if (!table[cur2.X][cur2.Y])
				continue;
			if (cover[cur2.X][cur2.Y][f2])
				continue;
			if (dist[cur2.X][cur2.Y][f2] > dist[cur.X][cur.Y][f] + 1) {
			    dist[cur2.X][cur2.Y][f2] = dist[cur.X][cur.Y][f] + 1;
			    q.push({cur2, f2});
			}
		}
	}
}

int main() {
	
	cin >> t;
	forn(tt, t) {
		printf("Case #%d: ", tt + 1);

		cin >> n >> m;
		
		memset(table, 0, sizeof(table));
		memset(cover, 0, sizeof(cover));
		forn(i, 4)
			turrets[i].clear();
		
		forab(i, 1, n + 1) {
			cin >> s;
			s = "#" + s;
			forab(j, 1, m + 1)
				if (s[j] == 'S') {
					table[i][j] = 1;
					st = {i, j};
				} else if (s[j] == 'G') {
					table[i][j] = 1;
					fn = {i, j};
				} else if (s[j] == '.')
					table[i][j] = 1;
				else {
					forn(k, 4)
						if (s[j] == ct[k])
							turrets[k].pb({i, j});	
				}
		}
		
		forn(i, 4)
			forn(j, turrets[i].size()) {
				forn(d, 4) {
					pii cur = turrets[i][j];
					while (true) {
						cur.X += dx[(d + i) % 4];
						cur.Y += dy[(d + i) % 4];
						if (!table[cur.X][cur.Y])
							break;
						cover[cur.X][cur.Y][d] = 1;
					}
				}
			}
			
		bfs();
		ans = INF;
		forn(i, 4)
			ans = min(ans, dist[fn.X][fn.Y][i]);
		
		if (ans < INF)
			cout << ans << '\n';
		else
			cout << "impossible\n";
		/*	
		forn(i, 4)
			cout << turrets[i].size() << ' ';
		cout << '\n';
		*/
	}
	
	return 0;
}
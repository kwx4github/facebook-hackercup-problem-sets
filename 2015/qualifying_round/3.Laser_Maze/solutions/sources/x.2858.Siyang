#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<ll> vll;
typedef vector<string> vs;
typedef pair<int,int> pii;
#define range(i,a,b) for(auto i=(a);i<b;i++)
#define rep(i,n) range(i,0,n)
#define all(c) begin(c),end(c)
#define CLR(i,x) memset(i,x,sizeof(i))
#define clr0(i) CLR(i,0)
#define clr1(i) CLR(i,-1)
#define bit(x,i) ((x>>i)&1)
#define M(x) ((x)%MOD)
#define acc(f,x,y) x=f(x,y)
#define fst first
#define snd second
#define tup make_tuple

#define N 105
#define INF 123456789

string maze[N];
bool bad[N][N][4];
int ans[N][N][4];
// >, v, <, ^
int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
map<char, int> dir;

struct Coord { int x, y, t; };

int work()
{
	int n, m;
	cin >> n >> m;
	rep(i, n) cin >> maze[i];
	clr0(bad);
	int x0 = 0, y0 = 0, x1 = 0, y1 = 0;
	rep(i, n) rep(j, m) switch(maze[i][j])
	{
		case '.': break;
		case 'S': x0 = i, y0 = j; break;
		case 'G': x1 = i, y1 = j; break;
		case '#':
			rep(t, 4) bad[i][j][t] = true;
			break;
		default:
			int d0 = dir[maze[i][j]];
			rep(t, 4)
			{
				int ii = i, jj = j;
				//cout << ii << " " << jj << " " << t << endl;
				while(true)
				{
					bad[ii][jj][t] = true;
					ii += dx[(d0 + t) % 4], jj += dy[(d0 + t) % 4];
					//cout << "--> ";
					//cout << ii << " " << jj << " " << t << endl;
					if(ii < 0 || ii >= n || jj < 0 || jj >= m) break;
					if(maze[ii][jj] == '#' || dir.count(maze[ii][jj])) break;
				}
				//cout << endl;
			}
			break;
	}

	rep(i, n) rep(j, m) rep(t, 4)
		ans[i][j][t] = INF;

	//rep(i, n) rep(j, m) rep(t, 4) if(bad[i][j][t])
	//	cout << i << " " << j << " " << t << endl;

	deque<Coord> q;
	q.push_back({x0, y0, 0});
	ans[x0][y0][0] = 0;
	while(!q.empty())
	{
		Coord v = q.front();
		q.pop_front();
		int x = v.x, y = v.y, t = v.t, tt = (t + 1) % 4;
		//cout << x << " " << y << " " << t << " : " << ans[x][y][t] << " " << bad[x][y][t] << endl;
		rep(d, 4)
		{
			int xx = x + dx[d], yy = y + dy[d];
			if(xx < 0 || xx >= n || yy < 0 || yy >= m) continue;
			if(bad[xx][yy][t + 1] || ans[xx][yy][tt] < INF) continue;
			ans[xx][yy][tt] = ans[x][y][t] + 1;
			q.push_back({xx, yy, tt});
		}
	}

	int best = INF;
	rep(t, 4) acc(min, best, ans[x1][y1][t]);
	return best;
}

int main()
{
	dir['>'] = 0, dir['v'] = 1, dir['<'] = 2, dir['^'] = 3;

	ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	rep(i, t)
	{
		int ans = work();
		cout << "Case #" << i + 1 << ": ";
		if(ans < INF) cout << ans;
		else cout << "impossible";
		cout << endl;
	}
	return 0;
}

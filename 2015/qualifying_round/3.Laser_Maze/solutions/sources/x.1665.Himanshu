/*
Template belongs to : Himanshu Jaju [himanshujaju]
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;

#define inp_s     ios_base::sync_with_stdio(false)
#define DRT()     int test_case;cin>>test_case;while(test_case--)

#define VI        vector<int>
#define VS        vector<string>
#define VLL       vector<LL>
#define PII       pair<int,int>
#define all(c)    c.begin(),c.end()
#define sz(c)     c.size()
#define clr(c)    c.clear()
#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define FOR(i,a,b)      for(int i=(a);i<(b);i++)
#define RFOR(i,a,b)     for(int i=b-1;i>=a;i--)

#define gcd(a,b)  __gcd(a,b)
#define MOD       1000000007

#define GI(x)     scanf("%d",&x)

#define CASE(x)   fout<<"Case #"<<x<<": "

int match(char x,int m,int n)
{
      int ass = 0;
      switch(x)
      {
            case '^': ass = 0; break;
            case '>': ass = 1; break;
            case 'V': ass = 2; break;
            case '<': ass = 3; break;
            default: return 0;
      }
      ass = (ass + m)%4;
      //cout<<x<<" "<<m<<" "<<n<<" "<<ass<<endl;
      return (ass == n);
}

int possible(int a,int b,int m,vector<string> arr)
{
      int row = sz(arr);
      int cols = sz(arr[0]);

      if(a>=0 && a<row && b>=0 && b<cols && (arr[a][b] == '.' || arr[a][b] == 'S' || arr[a][b] == 'G'))
      {
            int x = a - 1;
            while(x>=0)
            {
                  if(arr[x][b] == '#') break;
                  if(arr[x][b] == '.' || arr[x][b] == 'S' || arr[x][b] == 'G') {x--;continue;}
                  if(match(arr[x][b],m,2)) return 0;
                  else break;
                  x--;
            }

            x = a+1;
            while(x<row)
            {
                  if(arr[x][b] == '#') break;
                  if(arr[x][b] == '.' || arr[x][b] == 'S' || arr[x][b] == 'G') {x++;continue;}
                  if(match(arr[x][b],m,0)) return 0;
                  else break;
                  x++;
            }

            x = b-1;
            while(x>=0)
            {
                  if(arr[a][x] == '#') break;
                  if(arr[a][x] == '.' || arr[a][x] == 'S' || arr[a][x] == 'G') {x--;continue;}
                  if(match(arr[a][x],m,1)) return 0;
                  else break;
                  x--;
            }

            x = b+1;
            while(x<cols)
            {
                  if(arr[a][x] == '#') break;
                  if(arr[a][x] == '.' || arr[a][x] == 'S' || arr[a][x] == 'G') {x++;continue;}
                  if(match(arr[a][x],m,3)) return 0;
                  else break;
                  x++;
            }
            return 1;
      }
      else return 0;
}

int main()
{
      inp_s;
      ifstream fin("A.txt");
      ofstream fout("output.txt");
      int p = 0;
      int t;
      fin>>t;
      while(t--)
      {
            ++p;
            int r,c;
            fin>>r>>c;
            vector<string> arr(r);
            FOR(i,0,r) fin>>arr[i];

            int visited[100][100][4] = {0};
            queue< pair<PII,int> > bfs;
            FOR(i,0,r) FOR(j,0,c) if(arr[i][j] == 'S')
            {
                  bfs.push(mp(mp(i,j),0));
                  visited[i][j][0] = 1;
            }
            int ans = -1;
            while(!bfs.empty())
            {
                  pair<PII,int> top = bfs.front();
                  bfs.pop();
                  if(arr[top.first.first][top.first.second] == 'G')
                  {
                        ans = visited[top.first.first][top.first.second][top.second];
                        break;
                  }

                  int x = top.first.first;
                  int y = top.first.second;
                  int m = (top.second + 1)%4;

                  //cout<<x<<" "<<y<<" "<<top.second<<" "<<arr[x][y]<<endl;

                  if(possible(x+1,y,m,arr) && !visited[x+1][y][m])
                  {
                        bfs.push(mp(mp(x+1,y),m));
                        visited[x+1][y][m] = visited[x][y][top.second] + 1;
                  }

                  if(possible(x-1,y,m,arr) && !visited[x-1][y][m])
                  {
                        bfs.push(mp(mp(x-1,y),m));
                        visited[x-1][y][m] = visited[x][y][top.second] + 1;
                  }

                  if(possible(x,y-1,m,arr) && !visited[x][y-1][m])
                  {
                        bfs.push(mp(mp(x,y-1),m));
                        visited[x][y-1][m] = visited[x][y][top.second] + 1;
                  }

                  if(possible(x,y+1,m,arr) && !visited[x][y+1][m])
                  {
                        bfs.push(mp(mp(x,y+1),m));
                        visited[x][y+1][m] = visited[x][y][top.second] + 1;
                  }
            }
            CASE(p);
            if(ans == -1) fout<<"impossible"<<endl;
            else fout<<ans-1<<endl;
      }
      return 0;
}

#include <stdio.h>
#include <utility>
#include <cstring>
#include <queue>

using namespace std;

const int mod = 1000000007;
int gc, gp, gf;
int teste, n, m, t;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, -1, 0, 1};
int mp[200];

char board[200][200];
bool unsafe[200][200][4];
int dist[200][200][4];

int main() {
	mp['v'] = 0;
	mp['<'] = 1;
	mp['^'] = 2;
	mp['>'] = 3;

	for (scanf("%d", &t); t; t--) {
		scanf("%d %d", &n, &m);

		memset(unsafe, 0, sizeof(unsafe));
		memset(dist, -1, sizeof(dist));

		for (int i = 0; i < n; i++) {
			scanf("%s", board[i]);
		}

		int sx, sy, gx, gy;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (board[i][j] == '#') {
					for (int k = 0; k < 4; k++) unsafe[i][j][k] = 1;
				}

				else if (board[i][j] == 'S') {
					sx = i; sy = j;
				}

				else if (board[i][j] == 'G') {
					gx = i; gy = j;
				}

				else if (board[i][j] != '.') {
					int val = mp[board[i][j]];
					for (int inc = 0; inc < 4; inc++) {
						int dir = (val+inc)%4;
						int cx = i;
						int cy = j;

						while (1) {
							unsafe[cx][cy][inc] = 1;

							cx += dx[dir];
							cy += dy[dir];
							if (cx < 0 || cx >= n) break;
							if (cy < 0 || cy >= m) break;
							if (board[cx][cy] == '#' || board[cx][cy] == 'v' || mp[board[cx][cy]]) break;
						}
					}
				}
			}
		}

		queue< pair< pair<int, int>, int> > q;
		q.push( make_pair( make_pair(sx, sy), 0) );
		dist[sx][sy][0] = 0;
		while (!q.empty()) {
			int cx = q.front().first.first;
			int cy = q.front().first.second;
			int inc = q.front().second;
			q.pop();

			for (int d = 0; d < 4; d++) {
				int nx = cx + dx[d];
				int ny = cy + dy[d];
				int ninc = (inc+1)%4;

				if (nx < 0 || nx >= n) continue;
				if (ny < 0 || ny >= m) continue;
				if (unsafe[nx][ny][ninc]) continue;
				if (dist[nx][ny][ninc] == -1) {
					dist[nx][ny][ninc] = dist[cx][cy][inc] + 1;
					q.push(make_pair(make_pair(nx,ny), ninc));
				}
			}
		}

		int best = -1;
		for (int inc = 0; inc < 4; inc++) {
			if (dist[gx][gy][inc] != -1) {
				if (best == -1 || dist[gx][gy][inc] < dist[gx][gy][best]) best = inc;
			}
		}

		printf("Case #%d: ", ++teste);
		if (best == -1) printf("impossible\n");
		else printf("%d\n", dist[gx][gy][best]);
	}
	
}
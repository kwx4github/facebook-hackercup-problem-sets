/*
 *
 * File: stuff.cpp
 * Author: Andy Y.F. Huang (azneye)
 * Created on Aug 23, 2014, 11:50:25 PM
 */

#include <bits/stdc++.h>

using namespace std;

namespace stuff {
typedef long long ll;
const int MOD = 1000000007;

struct Node {
  int d, r, c;
};

void solve(int test_num) {
  const int DR[4] = { -1, 0, 1, 0 };
  const int DC[4] = { 0, 1, 0, -1 };
  int R, C;
  cin >> R >> C;
  string orig[111];
  string g[4][111];
  for (int r = 0; r < R; r++)
    cin >> orig[r];
  int sr, sc, er, ec;
  for (int r = 0; r < R; r++) {
    for (int c = 0; c < C; c++) {
      if (orig[r][c] == 'S')
        sr = r, sc = c;
      if (orig[r][c] == 'G')
        er = r, ec = c;
    }
  }
  orig[sr][sc] = orig[er][ec] = '.';
  for (int d = 0; d < 4; d++) {
    static const string DIRS = "^>v<";
    for (int r = 0; r < R; r++)
      g[d][r] = orig[r];
    for (int r = 0; r < R; r++) {
      for (int c = 0; c < C; c++) {
        if (DIRS.find(orig[r][c]) != string::npos) {
          const int dir = (DIRS.find(orig[r][c]) + d) % 4;
          int nr = r, nc = c;
          g[d][nr][nc] = '.';
          while (0 <= nr && nr < R && 0 <= nc && nc < C && g[d][nr][nc] == '.') {
            g[d][nr][nc] = '#';
            nr += DR[dir];
            nc += DC[dir];
          }
        }
      }
    }
  }
  static int dist[4][111][111];
  memset(dist, 0x3F, sizeof(dist));
  int res = -1;
  queue<Node> q;
  q.push( { 0, sr, sc });
  dist[0][sr][sc] = 0;
  for (; !q.empty(); q.pop()) {
    const int d = q.front().d, r = q.front().r, c = q.front().c;
    if (r == er && c == ec) {
      res = dist[d][r][c];
      break;
    }
    for (int i = 0; i < 4; i++) {
      const int nr = r + DR[i], nc = c + DC[i];
      if (0 <= nr && nr < R && 0 <= nc && nc < C && g[(d + 1) % 4][nr][nc] != '#'
          && dist[d][r][c] + 1 < dist[(d + 1) % 4][nr][nc]) {
        dist[(d + 1) % 4][nr][nc] = dist[d][r][c] + 1;
        q.push( { (d + 1) % 4, nr, nc });
      }
    }
  }
  cout << "Case #" << test_num << ": ";
  if (~res)
    cout << res << endl;
  else
    cout << "impossible\n";
}

void solve() {
#ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
//freopen("azn.txt", "w", stderr);
  double start_t = clock();
#endif
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  cin >> T;
  for (int t = 1; t <= T; t++)
    solve(t);
#ifdef AZN
  cerr << "Took: " << ((clock() - start_t) / CLOCKS_PER_SEC);
#endif
}
}

int main() {
  stuff::solve();
  return 0;
}

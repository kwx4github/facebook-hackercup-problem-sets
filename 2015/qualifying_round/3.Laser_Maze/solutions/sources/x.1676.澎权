#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

#define foreach(it, s) for (__typeof(s.begin()) it = s.begin(); it != s.end(); ++it)

const int N = 128;
const int MOD = 1e9 + 7.5;
const int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
const int INF = 0x3f3f3f3f;

string laser = "^>v<";

int n, m;
vector< vector<bool> > rMap[4];
string Map[N];
int dist[N][N][4];

void init() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) cin >> Map[i];
}

bool inrange(int x, int y) {
    return 0 <= x && x < n && 0 <= y && y < m;
}

vector< vector<bool> > getRotateMap() {
    vector< vector<bool> > vec(n, vector<bool>(m, true));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (Map[i][j] == '#') {
                vec[i][j] = false;
            } else if (laser.find(Map[i][j]) != -1) {
                int d = laser.find(Map[i][j]);
                int x = i, y = j;
                while (inrange(x, y)) {
                    vec[x][y] = false;
                    x += dir[d][0], y += dir[d][1];
                }
            }
        }
    }
    return vec;
}

void roateMap() {
    for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (laser.find(Map[i][j]) != -1) {
        Map[i][j] = laser[(laser.find(Map[i][j]) + 1) % 4];
    }
}

void solve(int ca) {
    for (int i = 0; i < 4; i++) {
        rMap[i] = getRotateMap();
        roateMap();
    }

    int stx, sty, edx, edy;
    for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {
        if (Map[i][j] == 'S') {
            stx = i, sty = j;
        } else if (Map[i][j] == 'G') {
            edx = i, edy = j;
        }
    }

    memset(dist, 0x3f, sizeof(dist));
    dist[stx][sty][0] = 0;
    queue< pair<int,int> > que;
    que.push(make_pair(stx * m + sty, 0));
    while (!que.empty()) {
        int x = que.front().first / m, y = que.front().first % m, d = que.front().second; que.pop();
        for (int i = 0; i < 4; i++) {
            int nx = x + dir[i][0], ny = y + dir[i][1];
            if (inrange(nx, ny) && rMap[(d + 1) % 4][nx][ny]) {
                int &temp = dist[nx][ny][(d + 1) % 4];
                if (temp > dist[x][y][d] + 1) {
                    temp = dist[x][y][d] + 1;
                    que.push(make_pair(nx * m + ny, (d + 1) % 4));
                }
            }
        }
    }

    int ret = INF;
    for (int i = 0; i < 4; i++)  ret = min(ret, dist[edx][edy][i]);
    if (ret == INF) {
        printf("Case #%d: impossible\n", ca);
    } else {
        printf("Case #%d: %d\n", ca, ret);
    }
}

int main(){
    int ca;
    cin >> ca;
    for (int i = 0; i < ca; i++) {
        init();
        solve(i + 1);
    }
    return 0;
}

import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Queue;
import java.util.Scanner;

public class LaserMaze {

    private void processInput() throws IOException {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int testCase = 1; testCase <= T; testCase++) {
            int n = in.nextInt();
            int m = in.nextInt();
            String[] board = new String[n];
            for (int i = 0; i < n; i++) {
                board[i] = in.next();
            }
            
            go(testCase, n, m, board);
        }

        in.close();
    }

    void go(int t, int n, int m, String[] board) {
        int sr = -1;
        int sc = -1;
        int fr = -1;
        int fc = -1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i].charAt(j) == 'S') {
                    sr = i;
                    sc = j;
                } else if (board[i].charAt(j) == 'G') {
                    fr = i;
                    fc = j;
                }
            }
        }
        int res = bfs(n, m, sr, sc, fr, fc, board);
        if (res != -1) {
            System.out.printf(Locale.ENGLISH, "Case #%d: %d\n", t, res);
        } else {
            System.out.printf(Locale.ENGLISH, "Case #%d: impossible\n", t);
        }
    }

    int INF = 1000000000;
    int[] dr = {1, 0, -1, 0};
    int[] dc = {0, -1, 0, 1};
    public int bfs(int n, int m, int sr, int sc, int fr, int fc, String[] board) {
        Queue<Integer> q = new LinkedList<Integer>();
        boolean[][][] visited = new boolean[n][m][4];
        int[][][] d = new int[n][m][4];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                Arrays.fill(d[i][j], INF);
            }
        }

        q.offer(sr);
        q.offer(sc);
        q.offer(0);
        d[sr][sc][0] = 0;
        visited[sr][sc][0] = true;
        while (!q.isEmpty()) {
            int row = q.poll();
            int col = q.poll();
            int t = q.poll();
            if (row == fr && col == fc) {
                return d[row][col][t];
            }
            for (int v = 0; v < dr.length; v++) {
                int nrow = row + dr[v];
                int ncol = col + dc[v];
                int nt = (t + 1) % 4;
                if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m) {
                    char c = board[nrow].charAt(ncol);
                    if ((c == '.' || c == 'S' || c == 'G') && !isShot(n, m, nrow, ncol, nt, board)) {
                        if (!visited[nrow][ncol][nt]) {
                            visited[nrow][ncol][nt] = true;
                            q.offer(nrow);
                            q.offer(ncol);
                            q.offer(nt);
                            d[nrow][ncol][nt] = d[row][col][t] + 1;
                        }
                    }
                }
            }
        }
        return -1;
    }

    String dir = "^>v<#SG.";
    boolean isShot(int n, int m, int row, int col, int t, String[] board) {
        
        for (int v = 0; v < dr.length; v++) {
            int nrow = row;
            int ncol = col;
            while (true) {
                if (nrow < 0 || ncol < 0 || nrow >= n || ncol >= m) {
                    break;
                }
                int cell = dir.indexOf(board[nrow].charAt(ncol));
                if (cell == 4) {
                    break;
                } else if (cell < 4) {
                     int tdir = (cell + t) % 4;
                     if (tdir == v) {
                         return true;
                     } else {
                         return false;
                     }
                }
                nrow += dr[v];
                ncol += dc[v];
            }
        }
        return false;
    }

    public static void main(String[] args) throws Exception {
        LaserMaze a = new LaserMaze();
        a.processInput();
    }
}

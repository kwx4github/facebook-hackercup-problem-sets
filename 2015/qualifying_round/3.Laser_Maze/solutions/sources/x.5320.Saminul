def NoLasers (point):
    
    for l in lasers:
        
        if (l[2]+iteration)%4 == 0:
            if point[0] > l[0] and point[1] == l[1]:
                for y in range(l[0]+1,point[0]):
                    if "S.G".find(grid[y][l[1]]) == -1:
                        break
                else:
                    return False
            
        if (l[2]+iteration)%4 == 1:
            if point[0] == l[0] and point[1] < l[1]:
                for x in range(point[1]+1,l[1]):
                    if "S.G".find(grid[l[0]][x]) == -1:
                        break
                else:
                    return False

        if (l[2]+iteration)%4 == 2:
            if point[0] < l[0] and point[1] == l[1]:
                for y in range(point[0]+1,l[0]):
                    if "S.G".find(grid[y][l[1]]) == -1:
                        break
                else:
                    return False
            
        if (l[2]+iteration)%4 == 3:
            if point[0] == l[0] and point[1] > l[1]:
                for x in range(l[1]+1,point[1]):
                    if "S.G".find(grid[l[0]][x]) == -1:
                        break
                else:
                    return False

    return True

def check (point):
    if "S.G".find(grid[point[0]][point[1]]) > -1:
        if NoLasers(point):
            return True
    return False

f = open("laser_maze.txt")
o = open("laser_maze_output.txt","w")

for t in range(int(f.readline().strip())):

    o.write ("Case #"+str(t+1)+": ")
    
    m,n = map(int,f.readline().strip().split())
    
    grid = []
    lasers = []

    for i in range(m):
        temp = f.readline().strip()
        grid.append(list(temp))

        if temp.find("S") > -1:
            start = [m-1-i,temp.find("S")]
        if temp.find("G") > -1:
            goal = [m-1-i,temp.find("G")]
            
        for j in range(n):
            if "^<v>".find(temp[j]) > -1:
                lasers.append([m-1-i,j,"^<v>".find(temp[j])])

    grid = grid[::-1]

    past = []

    curr = [start[:]]

    iteration = 0

    moves = 0

    while 1:
        
        moves += 1
        iteration += 1
        iteration = iteration%4

        temp = []

        for p in curr:
            
            if p[0] > 0:
                if check([p[0]-1,p[1]]) and [p[0]-1,p[1],iteration] not in past and [p[0]-1,p[1]] not in temp:
                    temp.append([p[0]-1,p[1]])

            if p[0] < m-1:
                if check([p[0]+1,p[1]]) and [p[0]+1,p[1],iteration] not in past and [p[0]+1,p[1]] not in temp:
                    temp.append([p[0]+1,p[1]])

            if p[1] > 0:
                if check([p[0],p[1]-1]) and [p[0],p[1]-1,iteration] not in past and [p[0],p[1]-1] not in temp:
                    temp.append([p[0],p[1]-1])

            if p[1] < n-1:
                if check([p[0],p[1]+1]) and [p[0],p[1]+1,iteration] not in past and [p[0],p[1]+1] not in temp:
                    temp.append([p[0],p[1]+1])

            past += [[p[0],p[1],(iteration-1)%4]]

        if len(temp) == 0 or goal in temp:
            break
        
        curr = temp[:]

    if len(temp) == 0:
        o.write("impossible\n")
    else:
        o.write(str(moves)+"\n")
o.close()
f.close()

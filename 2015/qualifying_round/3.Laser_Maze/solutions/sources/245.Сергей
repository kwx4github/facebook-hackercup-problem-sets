#!/usr/bin/python3
# -*- coding: utf-8 -*-
from collections import deque
from pprint import pprint

def solve():
    n, m = map(int, input().split())
    a = [input().strip() for _ in range(n)]
    s = [(i, j) for i, line in enumerate(a) for j, x in enumerate(line) if x == "S"][0]
    g = [(i, j) for i, line in enumerate(a) for j, x in enumerate(line) if x == "G"][0]
    a[s[0]] = a[s[0]].replace('S', '.')
    a[g[0]] = a[g[0]].replace('G', '.')
    allow = [[[True]*4 for x in line] for line in a]
    ds = {'^': 0, '>': 3, 'v': 2, '<': 1}
    for i, line in enumerate(a):
        for j, x in enumerate(line):
            if x in ds:
                nk = ds[x]
                for dx, dy in ((-1, 0), (0, 1), (1, 0), (0, -1)):
                    nx, ny = i+dx, j+dy
                    while 0 <= nx < n and 0 <= ny < m and a[nx][ny] == '.':
                        allow[nx][ny][nk] = False
                        nx, ny = nx+dx, ny+dy
                    nk = (nk+1)%4
    dists = [[[None]*4 for x in line] for line in a]

    d = deque([s+(0,)])
    dists[s[0]][s[1]][0] = 0
    while d:
        x, y, k = d.popleft()
        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
            nx, ny, nk = x+dx, y+dy, (k+1)%4
            if 0 <= nx < n and 0 <= ny < m and a[nx][ny] == '.' and allow[nx][ny][nk] and dists[nx][ny][nk] is None:
                dists[nx][ny][nk] = dists[x][y][k] + 1
                d.append((nx, ny, nk))
    rs = [x for x in dists[g[0]][g[1]] if x]
    if rs:
        print (min(rs))
    else:
        print ("impossible")

def main():
    T = int(input())
    for t in range(T):
        print("Case #%d:" % (t + 1), end=" ")
        solve()

if __name__ == "__main__":
    main()

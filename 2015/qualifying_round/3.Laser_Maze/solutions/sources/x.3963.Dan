#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

typedef long long ll;
#define maxN 109
#define MAX 10009
#define fi first
#define se second

ll t, m, n;
string s;
ll a[maxN][maxN];
ll d[maxN][maxN];
char dd[] = {0, '^', '>', 'v', '<'};
ll dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
vector<pair<ll,ll> > las;
vector<ll> dir;
pair<ll,ll> st;
ll ok, res;

bool checkblock (ll i, ll j)
{
	if (a[i][j] == '#' || a[i][j] == '^' || a[i][j] == '>' || a[i][j] == 'v' || a[i][j] == '<') return true;
	return false;
}

bool check (ll x, ll y)
{
	ll n1 = las.size(), side, ptrx, ptry, flag;
	for (ll i = 0; i < n1; i++)
	{
		flag = 0;
		if (las[i].fi != x && las[i].se != y) continue;
		if (las[i].fi == x)
		{
			if (las[i].se < y && dir[i] == 2) side = 1;
			else if (las[i].se > y && dir[i] == 4) side = 3;
			else continue;
		}
		else
		{
			if (las[i].fi > x && dir[i] == 1) side = 0;
			if (las[i].fi < x && dir[i] == 3) side = 2;
			else continue;
		}
		ptrx = las[i].fi + dx[side]; ptry = las[i].se + dy[side];
		while (ptrx != x || ptry != y)
		{
			if (checkblock(ptrx, ptry))
			{
				flag = 1;
				break;
			}
			ptrx += dx[side];
			ptry += dy[side];
		}
		if (!flag) return true;
	}
	return false;
}

void update ()
{
	ll n1 = las.size(), x;
	for (ll i = 0; i < n1; i++)
	{
		x = dir[i];
		x++;
		if (x > 4) x = 1;
		dir[i] = x;
		a[las[i].fi][las[i].se] = dd[x];
	}
}

void reset ()
{
	ll n1 = las.size(), x;
	for (ll i = 0; i < n1; i++)
	{
		x = dir[i];
		x--;
		if (x < 1) x = 4;
		dir[i] = x;
		a[las[i].fi][las[i].se] = dd[x];
	}
}

ll getdir (ll x)
{
	if (x <= 1) return x + 2;
	else return x - 2;
}

void solve (ll i, ll j, ll move, ll prev)
{
	if (ok) return;
	
	if (i < 1 || i > n || j < 1 || j > m) return;
	
	if (checkblock(i, j)) return;
	
	if (d[i][j] && move - d[i][j] >= 100)
	{
		ok = 1;
		return;
	}

	if (a[i][j] == 'G')
	{
		res = min(res, move);
		ok = 1;
		return;
	}
	
	ll flag = 0;
	for (ll k = 0; k < 4; k++)
	{
		if (k == getdir(prev) && prev != -1) continue;
		ll tmp;
		if (a[i+dx[k]][j+dy[k]])
		{
			tmp = d[i][j];
			d[i][j] = d[i][j]? min(d[i][j], move): move;
			update();
			if (check(i+dx[k], j+dy[k])) flag = 1;
			else solve(i+dx[k], j+dy[k], move + 1, k);
			reset();
			d[i][j] = tmp;
		}
	}
	if (flag)
	{
		ll tmp, k;
		k = prev;
		if (a[i+dx[k]][j+dy[k]])
		{
			tmp = d[i][j];
			d[i][j] = d[i][j]? min(d[i][j], move): move;
			update();
			solve(i+dx[k], j+dy[k], move + 1, k);
			reset();
			d[i][j] = tmp;
		}
	}
}

int main ()
{
	freopen ("in.txt", "r", stdin);
	freopen ("out.txt", "w", stdout);
	ios_base::sync_with_stdio(0);
	cin >> t;
	for (ll i1 = 1; i1 <= t; i1++)
	{
		las.clear(); dir.clear(); res = MAX;
		cin >> n >> m;
		for (ll i = 1; i <= n; i++)
		{
			cin >> s;
			for (ll j = 1; j <= m; j++)
			{
				a[i][j] = s[j-1];
				if (a[i][j] == 'S')
				{
					st.fi = i;
					st.se = j;
				}
				if (a[i][j] == '^' || a[i][j] == '>' || a[i][j] == 'v' || a[i][j] == '<')
				{
					las.push_back(make_pair(i,j));
					if (a[i][j] == '^') dir.push_back(1);
					if (a[i][j] == '>') dir.push_back(2);
					if (a[i][j] == 'v') dir.push_back(3);
					if (a[i][j] == '<') dir.push_back(4);
				}
			}
		}	
		
		ok = 0;
		solve(st.fi, st.se, 0, -1);
		
		cout << "Case #" << i1 << ": ";
		if (res != MAX) cout << res;
		else cout << "impossible";
		if (i1 != t) cout << '\n';
	}

	return 0;
}


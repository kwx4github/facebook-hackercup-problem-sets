#include <iostream>
#include <vector>
#include <tuple>
#include <queue>

using namespace std;

int main(int argc, char const *argv[]) {
    ios::sync_with_stdio(false);

    int t;
    cin >> t;

    for (int cs = 0; cs < t; ++cs) {
        int n, m;
        cin >> n >> m;
        vector <string> grid(n);
        int sx, sy, gx, gy;
        for (int i = 0; i < n; ++i) {
            cin >> grid[i];
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 'S') {
                    sx = i, sy = j;
                }
                if (grid[i][j] == 'G') {
                    gx = i, gy = j;
                }
            }
        }
        vector <vector <vector <bool>>> valid(4);
        string arrow = ">v<^";
        int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
        auto isEmpty = [&grid, n, m] (int i, int j) {
            return 0 <= i && i < n && 0 <= j && j < m && (grid[i][j] == 'S' || grid[i][j] == 'G' || grid[i][j] == '.');
        };
        for (int k = 0; k < 4; ++k) {
            for (int i = 0; i < n; i++) {
                valid[k].push_back(vector <bool> (n));
                for (int j = 0; j < m; j++) {
                    valid[k][i][j] = isEmpty(i, j);
                }
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    for (int d = 0; d < 4; d++) if (grid[i][j] == arrow[(d - k + 4) % 4]) {
                        for (int x = i + dx[d], y = j + dy[d]; isEmpty(x, y); x += dx[d], y += dy[d]) {
                            valid[k][x][y] = false;
                        }
                    }
                }
            }
        }
        queue <tuple <int, int, int>> Q;
        Q.emplace(0, sx, sy);
        auto isValid = [&valid, n, m] (int k, int i, int j) {
            return 0 <= i && i < n && 0 <= j && j < m && valid[k % 4][i][j];
        };
        int ans = -1;
        while (!Q.empty()) {
            int k, x, y;
            tie(k, x, y) = Q.front();
            Q.pop();
            if (x == gx && y == gy) {
                ans = k;
                break;
            }
            for (int i = 0; i < 4; i++) if (isValid (k + 1, x + dx[i], y + dy[i])) {
                Q.emplace(k + 1, x + dx[i], y + dy[i]);
                valid[(k + 1) % 4][x + dx[i]][y + dy[i]] = false;
            }
        }
        cout << "Case #" << cs + 1 << ": ";
        if (ans == -1 ) {
            cout << "impossible" << endl;
        } else {
            cout << ans << endl;
        }
    }
    return 0;
}











import java.util.*;
import java.math.*;
import java.io.*;
//writer.print("Case #"+(i+1)+": ");
//writer.close();
class c{
		static class Point{
			int a=0;
			int b=0;
			int c=0;
		}
	public static void main(String [] abb){
		try{
			Scanner in = new Scanner(new File("hamza.in"));
			PrintWriter writer = new PrintWriter("out2.in", "UTF-8");
			int t= in.nextInt();
			for(int k=0;k<t;k++){
				int m = in.nextInt();
				int n = in.nextInt();
				char inp[][]= new char[m][n];
				int maze[][][]= new int[m][n][4];
				int maze1[][][]= new int[m][n][4];
				int i1=0;
				int i2=0;
				//int i3=0;
				int j1=0;
				int j2=0;
				for(int i=0;i<m;i++){
					String tem= in.next();
					for(int j=0;j<n;j++){
						inp[i][j]=tem.charAt(j);
					}
				}
				//int j3=0;
				for(int i=0;i<m;i++){
						//String tem= in.next();
						for(int j=0;j<n;j++){
							
							if(inp[i][j]=='#'){
								maze[i][j][0]=1;
								maze[i][j][1]=1;
								maze[i][j][2]=1;
								maze[i][j][3]=1;
							}else if(inp[i][j]=='G'){
								i1=i;
								j1=j;
							}else if(inp[i][j]=='S'){
								i2=i;
								j2=j;
							}else if(inp[i][j]=='<'){
								maze[i][j][0]=1;
								maze[i][j][1]=1;
								maze[i][j][2]=1;
								maze[i][j][3]=1;
								int y=i-1;
								while(y>=0){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=-1;
									}else{
										maze[y][j][1]=1;
										y--;
									}
								}
								y=j+1;;
								while(y<n){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=n+1;
									}else{
										maze[i][y][2]=1;
										y++;
									}
								}
								y=i+1;
								while(y<m){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=m+1;
									}else{
										maze[y][j][3]=1;
										y++;
									}
								}
								y=j-1;
								while(y>=0){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=-1;
									}else{
										maze[i][y][0]=1;
										y--;
									}
								}
								
							}else if(inp[i][j]=='^'){
								maze[i][j][0]=1;
								maze[i][j][1]=1;
								maze[i][j][2]=1;
								maze[i][j][3]=1;
								int y=i-1;;
								while(y>=0){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=-1;
									}else{
										maze[y][j][0]=1;
										y--;
									}
								}
								y=j+1;;
								while(y<n){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=n+1;
									}else{
										maze[i][y][1]=1;
										y++;
									}
								}
								y=i+1;
								while(y<m){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=m+1;
									}else{
										maze[y][j][2]=1;
										y++;
									}
								}
								y=j-1;
								while(y>=0){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=-1;
									}else{
										maze[i][y][3]=1;
										y--;
									}
								}
								
							}else if(inp[i][j]=='>'){
								maze[i][j][0]=1;
								maze[i][j][1]=1;
								maze[i][j][2]=1;
								maze[i][j][3]=1;
								int y=i-1;;
								while(y>=0){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=-1;
									}else{
										maze[y][j][3]=1;
										y--;
									}
								}
								y=j+1;;
								while(y<n){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=n+1;
									}else{
										maze[i][y][0]=1;
										y++;
									}
								}
								y=i+1;
								while(y<m){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=m+1;
									}else{
										maze[y][j][1]=1;
										y++;
									}
								}
								y=j-1;
								while(y>=0){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=-1;
									}else{
										maze[i][y][2]=1;
										y--;
									}
								}
								
							}else if(inp[i][j]=='v'){
										maze[i][j][0]=1;
										maze[i][j][1]=1;
										maze[i][j][2]=1;
										maze[i][j][3]=1;
										int y=i-1;;
										while(y>=0){
											if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
												y=-1;
											}else{
												maze[y][j][2]=1;
												y--;
											}
										}
								y=j+1;;
								while(y<n){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=n+1;
									}else{
										maze[i][y][3]=1;
										y++;
									}
								}
								y=i+1;
								while(y<m){
									if(inp[y][j]!='.'&&inp[y][j]!='G'&&inp[y][j]!='S'){
										y=m+1;
									}else{
										maze[y][j][0]=1;
										y++;
									}
								}
								y=j-1;
								while(y>=0){
									if(inp[i][y]!='.'&&inp[i][y]!='G'&&inp[i][y]!='S'){
										y=-1;
									}else{
										maze[i][y][1]=1;
										y--;
									}
								}
								
							}
							
						}
				}
				
				
				
				//if(){
					
					for(int i=0;i<4;i++){
						System.out.println();
						for(int v=0;v<m;v++){
						System.out.println();
						for(int j=0;j<n;j++){
						System.out.print(maze[v][j][i]+" ");
						}
						}
					}
				//}
				//hamza m n
				maze1[i1][j1][0]=1;
				Point hm = new Point();
				hm.a=i1;
				hm.b=j1;
				hm.c=0;
				
				ArrayList<Point> que = new ArrayList<Point>();
				que.add(hm);
				int f=0;
				int out=0;
				if(i1==i2&&j1==j2){
					f=1;
				}
				while(que.size()>0&&f==0){
					//System.out.println(k);
					Point temp = que.get(0);
					que.remove(0);
					int distance = maze1[temp.a][temp.b][temp.c];
					
					//temp1.c=(temp.c+1)%4;
					if(temp.a+1<m){
					//System.out.println(k);
					if(maze1[temp.a+1][temp.b][(temp.c+1)%4]==0&&maze[temp.a+1][temp.b][(temp.c+1)%4]==0&&f==0){
						Point temp1= new Point();
						maze1[temp.a+1][temp.b][(temp.c+1)%4]=distance+1;
						//System.out.println(distance);
						temp1.a=temp.a+1;
						temp1.b=temp.b;
						temp1.c=(temp.c+1)%4;
						que.add(temp1);
						if(temp1.a==i2&&temp1.b==j2){
							f=1;
							out=distance;
							
						}
						
					}}
					
					if(temp.b+1<n){
					if(maze1[temp.a][temp.b+1][(temp.c+1)%4]==0&&maze[temp.a][temp.b+1][(temp.c+1)%4]==0&&f==0){
						Point temp1= new Point();
						maze1[temp.a][temp.b+1][(temp.c+1)%4]=distance+1;
						temp1.a=temp.a;
						temp1.b=temp.b+1;
						temp1.c=(temp.c+1)%4;
						System.out.println(distance+1+" "+k);
						que.add(temp1);
						if(temp1.a==i2&&temp1.b==j2){
							f=1;
							out=distance;
							//System.out.println(distance);
							
						}
						
					}}
					
					if(temp.b-1>=0){
					if(maze1[temp.a][temp.b-1][(temp.c+1)%4]==0&&maze[temp.a][temp.b-1][(temp.c+1)%4]==0&&f==0){
						Point temp1= new Point();
						maze1[temp.a][temp.b-1][(temp.c+1)%4]=distance+1;
						temp1.a=temp.a;
						temp1.b=temp.b-1;
						temp1.c=(temp.c+1)%4;
						que.add(temp1);
						if(temp1.a==i2&&temp1.b==j2){
							f=1;
							out=distance;
							
						}
						
					}}
					
					if(temp.a-1>=0){
					if(maze1[temp.a-1][temp.b][(temp.c+1)%4]==0&&maze[temp.a-1][temp.b][(temp.c+1)%4]==0&&f==0){
						Point temp1= new Point();
						maze1[temp.a-1][temp.b][(temp.c+1)%4]=distance+1;
						temp1.a=temp.a-1;
						temp1.b=temp.b;
						temp1.c=(temp.c+1)%4;
						que.add(temp1);
						if(temp1.a==i2&&temp1.b==j2){
							f=1;
							out=distance;
							
						}
						
					}}
					
					
					
				}
				if(f==1){
				writer.println("Case #"+(k+1)+": "+out);
				}else{
				writer.println("Case #"+(k+1)+": impossible");
				}
				//writer.println(out);
			}
			writer.close();
		}catch(IOException e){
			
			}
	}
}
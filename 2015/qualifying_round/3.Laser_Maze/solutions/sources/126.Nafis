/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/

#include <bits/stdc++.h>

using namespace std;

#define xx         first
#define yy         second
#define pb         push_back
#define mp         make_pair
#define LL         long long
#define inf        INT_MAX/3
#define mod        1000000007ll
#define PI         acos(-1.0)
#define linf       (1ll<<60)-1
#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     ((A).begin(), (A).end())
#define set0(ar)   memset(ar,0,sizeof ar)
#define vsort(v)   sort(v.begin(),v.end())
#define setinf(ar) memset(ar,126,sizeof ar)

//cout << fixed << setprecision(20) << p << endl;

template <class T> inline T bigmod(T p,T e,T M){
    LL ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

struct node{
    int x,y,c,f;
    node(){}
    node(int _x, int _y, int _c, int _f){
        x = _x; y = _y; c = _c; f = _f;
    }
};
queue < node > pq;
char pp[111][111];
int block[111][111][4], dis[111][111][4], vis[111][111][4];
int nxt[4][2] = { {-1, 0}, {0, 1}, {1, 0}, {0, -1} };
int main() {
    freopen("a.in", "r", stdin);
    freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0); cin.tie(0);
    LL a,b,c,d = 0,e,f = 0,g,h = 0,x,y,z = 0;
    cin >> a;
    FOR(ts, 1, a + 1){
        cin >> b >> c;
        REP(i, b) cin >> pp[i];
        set0(block); setinf(dis); set0(vis);
        REP(i, b){
            REP(j, c){
                x = -1;
                if(pp[i][j] == '^') x = 0;
                else if(pp[i][j] == '>') x = 1;
                else if(pp[i][j] == 'v') x = 2;
                else if(pp[i][j] == '<') x = 3;
                if(x == -1) continue;
                for(int k = x; k < x + 4; k++){
                    y = k % 4;
                    g = i; h = j;
                    for(int l = 0; l <= 200; l++){
                        g += nxt[y][0];
                        h += nxt[y][1];
                        if(g < 0 || g >= b || h < 0 || h >= c) break;
                        if(pp[g][h] != '.' && pp[g][h] != 'S' && pp[g][h] != 'G') break;
                        block[g][h][k-x] = 1;
                    }
                }
            }
        }
        while(!pq.empty()) pq.pop();
        REP(i, b) REP(j, c) if(pp[i][j] == 'S') {
            x = i; y = j;
        }
        pq.push(node(x, y, 0, 0));
        dis[x][y][0] = 0;
        while(!pq.empty()){
            node cc = pq.front();
            pq.pop();
            if(vis[cc.x][cc.y][cc.f]) continue;
            vis[cc.x][cc.y][cc.f] = 1;
            REP(i, 4){
                g = cc.x + nxt[i][0];
                h = cc.y + nxt[i][1];
                f = (cc.f + 1) % 4;
                if(g < 0 || g >= b || h < 0 || h >= c) continue;
                if(block[g][h][f] || dis[g][h][f] <= cc.c + 1) continue;
                if(pp[g][h] != '.' && pp[g][h] != 'S' && pp[g][h] != 'G') continue;
                dis[g][h][f] = cc.c + 1;
                pq.push(node(g, h, dis[g][h][f], f));
            }
        }
        f = 1e9;
        REP(i, b) REP(j, c)if(pp[i][j] == 'G'){
            x = i; y = j;
        }
        REP(i, 4){
            f = min(f, (LL)dis[x][y][i]);
        }
        cout << "Case #" << ts << ": ";
        if(f > 10000000) cout << "impossible" << endl;
        else cout << f << endl;
    }
}

/*Author :rednivrug15 */
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define rep(i,n) for(int i=0; i<n ; i++)
using namespace std;
//#define long double double

#define REP(i,n) for (int i = 1; i <= n; i++)
#define ll long long
#define mod (int)(1e9+7)
const int base = 1000100000;
const int base_digits = 9;

long long power(ll a,ll b)
{
    ll ret=1;
    while(b)
    {
        if(b%2==1)
            ret=(ret*a)%mod;
        a=(a*a)%mod;
        b/=2;
    }
    return ret;
}

int visited[101][101][4];
int dangerous[101][101][4];
char str[101][101];
int n,m;

void blockup(int x,int y,int C)
{
    for(int i=x-1; i>=0; i--)
    {
        //Whenever you find a wall or a turret break your loop
        if(str[i][y]=='#' || str[i][y]=='^' || str[i][y]=='v' || str[i][y]=='>' || str[i][y]=='<')
            break;
        dangerous[i][y][C]++;
    }
}

void blockdown(int x,int y,int C)
{
    for(int i=x+1; i<n; i++)
    {
        //Whenever you find a wall or a turret break your loop
        if(str[i][y]=='#' || str[i][y]=='^' || str[i][y]=='v' || str[i][y]=='>' || str[i][y]=='<')
            break;
        dangerous[i][y][C]++;
    }
}

void blockleft(int x,int y,int C)
{
    for(int i=y-1; i>=0; i--)
    {
        //Whenever you find a wall or a turret break your loop
        if(str[x][i]=='#' || str[x][i]=='^' || str[x][i]=='v' || str[x][i]=='>' || str[x][i]=='<')
            break;
        dangerous[x][i][C]++;
    }
}

void blockright(int x,int y,int C)
{
    for(int i=y+1; i<m; i++)
    {
        //Whenever you find a wall or a turret break your loop
        if(str[x][i]=='#' || str[x][i]=='^' || str[x][i]=='v' || str[x][i]=='>' || str[x][i]=='<')
            break;
        dangerous[x][i][C]++;
    }
}
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};

int feasable(int fromx,int fromy,int x,int y,int Time)
{
    if(x>=n)
        return 0;
    if(y>=m)
        return 0;
    if(x<0)
        return 0;
    if(y<0)
        return 0;
    if(str[x][y]=='#')
        return 0;
    if(str[x][y]=='^')
        return 0;
    if(str[x][y]=='v')
        return 0;
    if(str[x][y]=='>')
        return 0;
    if(str[x][y]=='<')
        return 0;

    if(dangerous[x][y][Time%4]>0)
        return 0;
    int X=fromx-x;
    int Y=fromy-y;

    int valuetobehashed;

    if(X==-1)
        valuetobehashed=0;
    else if(Y==-1)
        valuetobehashed=1;
    else if(Y==1)
        valuetobehashed=2;
    else
        valuetobehashed=3;
    if(visited[x][y][valuetobehashed]==2)
        return 0;

    visited[x][y][valuetobehashed]++;
    return 1;
}


int main()
{
   freopen("inp.txt","r",stdin);
   freopen("op.txt","w",stdout);
   int t;
   cin>>t;

   for(int test=1; test<=t; test++)
   {
        printf("Case #%d: ",test);
        for(int i=0; i<101; i++)
            for(int j=0; j<101; j++)
             for(int k=0; k<4; k++)
                visited[i][j][k]=0;
        for(int i=0; i<101; i++)
            for(int j=0; j<101; j++)
             for(int k=0; k<4; k++)
            dangerous[i][j][k]=0;

        cin>>n>>m;

        for(int i=0; i<n; i++)
            scanf("%s",str[i]);
        //took all strings now time for turnets to show their powers and inform them
        int startx=-1,starty=-1,endx=-1,endy=-1;

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(str[i][j]=='S')
                {
                    startx=i;
                    starty=j;
                }
                if(str[i][j]=='G')
                {
                    endx=i;
                    endy=j;
                }
                if(str[i][j]=='^')
                {
                    blockup(i,j,0);
                    blockright(i,j,1);
                    blockdown(i,j,2);
                    blockleft(i,j,3);
                }
                if(str[i][j]=='v')
                {
                    blockdown(i,j,0);
                    blockleft(i,j,1);
                    blockup(i,j,2);
                    blockright(i,j,3);
                }
                if(str[i][j]=='<')
                {
                    blockleft(i,j,0);
                    blockup(i,j,1);
                    blockright(i,j,2);
                    blockdown(i,j,3);
                }
                if(str[i][j]=='>')
                {
                    blockright(i,j,0);
                    blockdown(i,j,1);
                    blockleft(i,j,2);
                    blockup(i,j,3);
                }
            }
        }
       //printf("We have to go from (%d %d) to (%d %d)\n",startx,starty,endx,endy);
       assert(startx!=-1 && starty!=-1 && endx!=-1 && endy!=-1);

       priority_queue <pair<int, pair < int, int > >, vector<pair<int, pair < int,int > > >, greater< pair<int, pair< int,int > > > > arr;
       arr.push(mp(0,mp(startx,starty)));

       bool flag=0;

       while(arr.empty()==false)
       {
           int currentdistance=arr.top().first;
           int curx,cury;
           curx=arr.top().second.first;
           cury=arr.top().second.second;

           //printf("Visiting (%d %d)\n",curx,cury);

           if(curx==endx && cury==endy)
           {
               printf("%d\n",currentdistance);
               flag=1;
               break;
           }
           arr.pop();
           //Popped the top now try going 4 directions
           //Never use any direction more than 2 times let anything happen
           for(int i=0; i<4; i++)
           {
               if(feasable(curx,cury,curx+dx[i],cury+dy[i],currentdistance+1)==1)
                arr.push(mp(currentdistance+1,mp(curx+dx[i],cury+dy[i])));
           }
       }

       if(flag==0)
        printf("impossible\n");

   }
   return 0;
}

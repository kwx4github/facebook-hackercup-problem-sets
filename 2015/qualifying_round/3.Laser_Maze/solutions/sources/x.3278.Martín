#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <utility>
#include <queue>
using namespace std;

ifstream fin ("C.in");
ofstream fout ("C.out");

struct node {
	int x;
	int y;
	int t;
};

int main() {
	int T, M, N, c, i, j, startx, starty, endx, endy, init, q, t;
	char temp;
	fin >> T;
	for (c = 1; c <= T; c++) {
		fin >> M >> N;
		vector<vector<vector<int> > > maze(M, vector<vector<int> >(N, vector<int>(4, 0)));
		vector<vector<int> > towers(0);
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				fin >> temp;
				if (temp != 'S' && temp != 'G' && temp != '.') {
					maze[i][j][0] = 1;
					maze[i][j][1] = 1;
					maze[i][j][2] = 1;
					maze[i][j][3] = 1;
				}
				if (temp == 'S') {
					startx = i;
					starty = j;
				}
				if (temp == 'G') {
					endx = i;
					endy = j;
				}
				if (temp != 'S' && temp != 'G' && temp != '.' && temp != '#') {
					if (temp == '^') init = 0;
					if (temp == '<') init = 1;
					if (temp == 'v') init = 2;
					if (temp == '>') init = 3;
					vector<int> tower(3);
					tower[0] = i;
					tower[1] = j;
					tower[2] = init;
					towers.push_back(tower);
				}
			}
		}
		for (t = 0; t < towers.size(); t++) {
			i = towers[t][0];
			j = towers[t][1];
			init = towers[t][2];
			for (q = 1; i + q < M; q++) {
				if (maze[i+q][j][0] == 1) break;
				maze[i+q][j][(init+2)%4] = 2;
			}
			for (q = 1; j + q < N; q++) {
				if (maze[i][j+q][0] == 1) break;
				maze[i][j+q][(init+1)%4] = 2;
			}
			for (q = 1; i - q >= 0; q++) {
				if (maze[i-q][j][0] == 1) break;
				maze[i-q][j][init%4] = 2;
			}
			for (q = 1; j - q >= 0; q++) {
				if (maze[i][j-q][0] == 1) break;
				maze[i][j-q][(init+3)%4] = 2;
			}
		}
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				for (q = 0; q < 4; q++) {
					if (maze[i][j][q] == 2) maze[i][j][q] = 1;
				}
			}
		}

		queue<node> S;
		node start, act, next;
		start.x = startx;
		start.y = starty;
		start.t = 0;
		vector<vector<vector<int> > > visited(M, vector<vector<int> >(N, vector<int>(4, 0)));

		bool flag = false;
		S.push(start);
		visited[start.x][start.y][start.t] = 1;
		while(!S.empty()) {
			act = S.front();
			S.pop();
			if (act.x == endx && act.y == endy) {
				flag = true;
				fout << "Case #" << c << ": " << act.t << endl;
				break;
			}

			if (act.x != M-1) {
				if (visited[act.x+1][act.y][(act.t+1)%4] == 0 && maze[act.x+1][act.y][(act.t+1)%4] == 0) {
					next.x = act.x + 1;
					next.y = act.y;
					next.t = act.t + 1;
					visited[next.x][next.y][next.t%4] = 1;
					S.push(next);
				}
			}
			if (act.y != N-1) {
				if (visited[act.x][act.y+1][(act.t+1)%4] == 0 && maze[act.x][act.y+1][(act.t+1)%4] == 0) {
					next.x = act.x;
					next.y = act.y + 1;
					next.t = act.t + 1;
					visited[next.x][next.y][next.t%4] = 1;
					S.push(next);
				}
			}
			if (act.x != 0) {
				if (visited[act.x-1][act.y][(act.t+1)%4] == 0 && maze[act.x-1][act.y][(act.t+1)%4] == 0) {
					next.x = act.x - 1;
					next.y = act.y;
					next.t = act.t + 1;
					visited[next.x][next.y][next.t%4] = 1;
					S.push(next);
				}
			}
			if (act.y != 0) {
				if (visited[act.x][act.y-1][(act.t+1)%4] == 0 && maze[act.x][act.y-1][(act.t+1)%4] == 0) {
					next.t = act.x;
					next.y = act.y - 1;
					next.t = act.t + 1;
					visited[next.x][next.y][next.t%4] = 1;
					S.push(next);
				}
			}
		}
		if (!flag) fout << "Case #" << c << ": impossible" << endl;
	}

	return 0;
}
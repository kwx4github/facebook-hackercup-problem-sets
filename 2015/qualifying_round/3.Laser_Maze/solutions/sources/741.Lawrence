#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second

typedef pair<int, int> pii;

const int MAXN = 105;

int n, m, dr[4] = {0, 1, 0, -1}, dc[4] = {1, 0, -1, 0};
int rs, cs, rt, ct;
char mat[MAXN][MAXN][4];
int dist[MAXN][MAXN][4];

bool in(int r, int c) {
    return r>=0 && r<n && c>=0 && c<m;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int T; cin >> T;
    for (int t=1; t<=T; t++) {
        cin >> n >> m;
        for (int i=0; i<n; i++)
            for (int j=0; j<m; j++) {
                cin >> mat[i][j][0];
                if (mat[i][j][0] == 'S') rs = i, cs = j, mat[i][j][0] = '.';
                else if (mat[i][j][0] == 'G') rt = i, ct = j, mat[i][j][0] = '.';
                for (int k=1; k<4; k++) mat[i][j][k] = mat[i][j][0];
            }

        for (int k=0; k<4; k++)
            for (int i=0; i<n; i++)
                for (int j=0; j<m; j++)
                    if (mat[i][j][k] != '.' && mat[i][j][k] != '#' && mat[i][j][k] != 'X') {
                        char ch = mat[i][j][k];
                        int x = ch == '>' ? 0 : ch == 'v' ? 1 : ch == '<' ? 2 : ch == '^' ? 3 : -1;
                        assert(x != -1);
                        x = (x+k)%4;
                        int r=i+dr[x], c = j+dc[x];
                        while (in(r, c) && (mat[r][c][k] == '.' || mat[r][c][k] == 'X'))
                            mat[r][c][k] = 'X', r += dr[x], c += dc[x];
                    }

        memset(dist, -1, sizeof(dist));
        queue<pii> que;
        que.push(pii(rs, cs));
        int d=0;
        while (!que.empty()) {
            int k = d%4;
            int sze = que.size();
            for (int ii=0; ii<sze; ii++) {
                int r = que.front().fi, c = que.front().se;
                que.pop();
                if (dist[r][c][k] != -1) continue;
                dist[r][c][k] = d;
                for (int r1=-1; r1<=1; r1++)
                    for (int c1=-1; c1<=1; c1++)
                        if ((r1==0) != (c1==0)) {
                            int nr = r+r1, nc = c+c1;
                            if (in(nr, nc) && mat[nr][nc][(k+1)%4] == '.')
                                que.push(pii(nr, nc));
                        }
            }
            d++;
        }

        int mi = 1e9;
        for (int k=0; k<4; k++)
            if (dist[rt][ct][k] != -1)
                mi = min(mi, dist[rt][ct][k]);
        cout << "Case #" << t << ": ";
        if (mi == 1e9) cout << "impossible\n";
        else cout << mi << endl;
    }
}

#include <bits/stdc++.h>

using namespace std;

char g[105][105];

int dx[4]={0,-1,0,1};
int dy[4]={-1,0,1,0};

int n,m,mp[200];

bool unsafe[4][105][105],visited[4][105][105];


struct stype{
    int x,y,d,c;

    stype(int _x,int _y,int _d,int _c)
    {
        x=_x;y=_y;d=_d;c=_c;
    }
};

queue <stype> q;

bool valid(int x,int y)
{
    return (x>=0 && x<n && y>=0 && y<m && (g[x][y]=='.' || g[x][y]=='S' || g[x][y]=='G' ) );
}

int main()
{
    int i,j,k,t,T,d,x,y,dir,c;

    int sx,sy,tx,ty;

    freopen("laser_maze.txt","r",stdin);
    freopen("c-out.txt","w",stdout);

    mp['<']=0;
    mp['^']=1;
    mp['>']=2;
    mp['v']=3;

    scanf("%d",&T);

    for(t=1;t<=T;t++)
    {
        memset(unsafe,0,sizeof(unsafe));
        memset(visited,0,sizeof(visited));

        scanf("%d %d",&n,&m);

        for(i=0;i<n;i++) scanf("%s",g[i]);

        for(d=0;d<4;d++)
        {
            for(x=0;x<n;x++)
            {
                for(y=0;y<m;y++)
                {

                    if(g[x][y]=='S')
                    {
                        sx=x;
                        sy=y;
                        continue;
                    }

                    if(g[x][y]=='G')
                    {
                        tx=x;
                        ty=y;
                        continue;
                    }

                    if (g[x][y]=='.' ||  g[x][y]=='#' ) continue;

                    dir=(d+mp[g[x][y]])%4;

                    for(i=1;;i++)
                    {
                        if(valid(x+i*dx[dir],y+i*dy[dir])==0) break;

                        unsafe[d][x+i*dx[dir]][y+i*dy[dir]]=1;
                    }

                }
            }
        }

        while(!q.empty()) q.pop();

        q.push(stype(sx,sy,0,0));

        int ans=-1;

        int nx,ny,nd,nc;

        while(!q.empty())
        {
            x=q.front().x;
            y=q.front().y;
            d=q.front().d;
            c=q.front().c;

            q.pop();

            for(i=0;i<4;i++)
            {
                nx=x+dx[i];
                ny=y+dy[i];
                nd=(d+1)%4;

                if(valid(nx,ny) && unsafe[nd][nx][ny]==0 && visited[nd][nx][ny]==0)
                {
                    visited[nd][nx][ny]=1;

                    if(nx==tx && ny==ty)
                    {
                        ans=c+1;
                        break;
                    }

                    q.push(stype(nx,ny,nd,c+1));
                }
            }

            if(ans!=-1) break;

        }

        printf("Case #%d: ",t);

        if(ans==-1) printf("impossible\n");
        else printf("%d\n",ans);
    }

    return 0;


}

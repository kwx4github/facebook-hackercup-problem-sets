#include <iostream>

#include <cstring>
#include <queue>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

string lasers = "^>v<";
int dr[] = {-1,0,+1,0};
int dc[] = {0,+1,0,-1};

struct Pos {
   int row, col, k;
   Pos(int _row=0, int _col=0, int _k=0) : row(_row), col(_col), k(_k) {}
};

#define INF 0x3f3f3f3f

int R, C;
char B[104][104];
bool safe[4][104][104];

struct State {
};

int D[4][104][104];
int bfs(Pos src, Pos dst) {
   memset(D, 0x3f, sizeof(D));
   D[src.k][src.row][src.col] = 0;
   queue<Pos> q;
   q.push(src);
   while (!q.empty()) {
      Pos cur = q.front();
      q.pop();
      if (cur.row == dst.row && cur.col == dst.col)
         return D[cur.k][cur.row][cur.col];
      REP(k, 4) {
         Pos nxt( cur.row + dr[k], cur.col + dc[k], (cur.k + 1) % 4 );
         if (B[nxt.row][nxt.col] != '.') continue;
         if (!safe[nxt.k][nxt.row][nxt.col]) continue;
         if (D[nxt.k][nxt.row][nxt.col] > D[cur.k][cur.row][cur.col] + 1) {
            D[nxt.k][nxt.row][nxt.col] = D[cur.k][cur.row][cur.col] + 1;
            q.push(nxt);
         }
      }
   }
   return -1;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int TC;
   cin >> TC;
   for (int tc = 1; tc <= TC; ++tc) {
      cin >> R >> C;
      memset(B, '#', sizeof(B));
      FOR(r, 1, R) {
         cin >> B[r]+1;
         B[r][C+1] = '#';
      }
      
      Pos src, dst;
      FOR(r, 1, R) FOR(c, 1, C) {
         if (B[r][c] == 'S') {
            B[r][c] = '.';
            src = Pos(r, c, 0);
         }
         else if (B[r][c] == 'G') {
            B[r][c] = '.';
            dst = Pos(r, c, 0);
         }
      }

      REP(k, 4) FOR(r, 1, R) FOR(c, 1, C)
         safe[k][r][c] = true;
      FOR(r, 1, R) FOR(c, 1, C) {
         size_t k = lasers.find( B[r][c] );
         if (k == string::npos) continue;
         REP(dk, 4) {
            int kk = (k + dk) % 4;
            for (int nr = r + dr[kk], nc = c + dc[kk];
                 B[nr][nc] == '.';
                 nr += dr[kk], nc += dc[kk]) {
               safe[dk][nr][nc] = false;
            }
         }
      }
      
      int res = bfs(src, dst);
      if (res < 0)
         cout << "Case #" << tc << ": impossible" << endl;
      else
         cout << "Case #" << tc << ": " << res << endl;
   }

   return 0;
}

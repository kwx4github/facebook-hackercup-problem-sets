#include <iostream>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <numeric>
#include <list>
#include <stack>
#include <cmath>
#include <stdlib.h>
#include<unistd.h>
using namespace std;

typedef  long long LL;
const int Mod = 1e9 + 7;
inline int FIX(int a) {return (a % Mod + Mod) % Mod;}
#define MP(x,y) make_pair(x,y)
#define LEN(x) ((int)x.length())
#define take(x,y) (((x)>>(y)) & 1ll)
#define move(n) (1<<(n))
#define what_is(x) cerr << #x << " is " << x << endl;
#define eb emplace_back
// 4 0 1 2 3
int p[32],c[32],f[32];
int dir[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
int can[128][128][4],dis[128][128][4];
int pos[4] = {2,3,0,1};
string Maze[128];
int n,m;
void cal(int px,int py) {
    for(int i = 0;i < 4;i++) {
        //4 direction
        int cur = -1;
        for(int j = 0;;j++) {
            int sx = px + j * dir[i][0];
            int sy = py + j * dir[i][1];
            if(sx < 0 || sx >= n || sy < 0 || sy >= m) break;
            if(Maze[sx][sy] == '#') break;
            if(Maze[sx][sy] == '<') {
                cur = 3;
                break;
            }
            if(Maze[sx][sy] == '>') {
                cur = 1;
                break;
            }
            if(Maze[sx][sy] == '^') {
                cur = 0;
                break;
            }
            if(Maze[sx][sy] == 'v') {
                cur = 2;
                break;
            }
        }
        if(cur != -1) {
            for(int j = 0;j < 4;j++) {
                if((cur + j) % 4 == pos[i]) {
                    can[px][py][j] = 1;
                    //printf("%d %d %d\n",px,py,j);
                }
            }
        }
    }
    return;
}
int main(){
    freopen("laser_maze.txt","r",stdin);
    freopen("a.txt","w",stdout);
    int t,cas = 0;
    cin>>t;
    while(t--) {
        scanf("%d%d",&n,&m);
        memset(dis,-1,sizeof(dis));
        memset(can,0,sizeof(can));
        pair<int,int>S,G;
        for(int i = 0;i < n;i++) {cin>>Maze[i];
            for(int j = 0;j < m;j++) if(Maze[i][j] == 'S') {
                S = {i,j};
            }else if(Maze[i][j] == 'G') {
                G = {i,j};
            }
        }
        for(int i = 0;i < n;i++)
            for(int j = 0;j < m;j++) {
                cal(i,j);
            }
        queue<tuple<int,int,int>>Q;
        dis[S.first][S.second][0] = 0;
        Q.push(make_tuple(S.first,S.second,0));
        while(Q.empty() != true) {
            int px,py,d;tie(px,py,d) = Q.front();Q.pop();
            for(int i = 0;i < 4;i++) {
                int sx = px + dir[i][0],sy = py + dir[i][1];
                int td = (d + 1) % 4;
                if(sx < 0 || sx >= n || sy < 0 || sy >= m) continue;
                if(Maze[sx][sy] == '.' || Maze[sx][sy] == 'S' || Maze[sx][sy] == 'G') {
                    if(can[sx][sy][td] == 0 && dis[sx][sy][td] == -1) {
                        dis[sx][sy][td] = dis[px][py][d] + 1;
                        Q.push(make_tuple(sx,sy,td));
                    }
                }
            }
        }
        int Min = -1;
        for(int i = 0;i < 4;i++) {
            if(dis[G.first][G.second][i] != -1) {
                if(Min == -1 || Min > dis[G.first][G.second][i])
                    Min = dis[G.first][G.second][i];
            }
        }
        if(Min == -1) printf("Case #%d: %s\n",++cas,"impossible");
        else printf("Case #%d: %d\n",++cas,Min);
    }
    return 0;
}
#include<bits/stdc++.h>
using namespace std;
const int MAXN=100;
bool lblk[5][MAXN+10][MAXN+10];
char grid[MAXN+10][MAXN+10];
bool vis [5][MAXN+10][MAXN+10];
int dir(char ch,int inc)
{
   int flag ;
   if (ch=='>')
      flag=0;
   else if(ch=='v')
      flag=1;
   else if (ch=='<')
      flag=2;
   else
      flag=3;
   flag= (flag+inc)%4;
   return flag;
}
void pre(int m,int n)
{
   for (int inc=0;inc<4;inc++){
      for (int r=0;r<m;r++){
         for (int c=0;c<n;c++){
            if( grid[r][c]=='>'|| grid[r][c]=='v'|| grid[r][c]=='<'|| grid[r][c]=='^' ){
               int d=dir(grid[r][c],inc);
               if (d==0){
                  for (int k=c+1;k<n&&( grid[r][k]=='.'||grid[r][k]=='S'||grid[r][k]=='G');k++){
                     lblk[inc][r][k]=true;
                  }
               }
               else if (d==1){
                  for (int k=r+1;k<m &&( grid[k][c]=='.' || grid[k][c]=='S' ||grid[k][c]=='G');k++ ){
                     lblk[inc][k][c]=true;
                  }
               }
               else if (d==2){
                  for (int k=c-1;k>=0 &&( grid[r][k]=='.'||grid[r][k]=='S'||grid[r][k]=='G') ;k--  ){
                     lblk[inc][r][k]=true;
                  }
               }
               else{
                  for (int k=r-1;k>=0&& ( grid[k][c]=='.' || grid[k][c]=='S' ||grid[k][c]=='G');k-- ){
                     lblk[inc][k][c]=true;
                  }
               }
            }
         }
      }
   }
}
void print (int m ,int n )
{
   for (int dir=0;dir<4;dir++){
   for (int i=0;i<m;i++){
      for (int j=0;j<n;j++){
         cout<<lblk[dir][i][j];
      }
      cout<<endl;
   }
   printf("*\n");

   }
   cout <<endl;
   return ;
}
struct state {
   int r;
   int c;
   int dir;
   int cost;
   state(){}
   state (int r, int c, int dir, int cost)
   {
      this->r=r;
      this->c=c;
      this->dir=dir;
      this->cost=cost;
   }
};
queue< state >Q;
int main ()
{
   freopen("laser_maze.txt","r",stdin);
   freopen("laser.out","w",stdout);
   int t,n,m;
   scanf("%d",&t);
   for (int T=1;T<=t;T++){
      scanf ("%d %d", &m,&n);
      for (int i=0;i<m;i++){
         scanf ("%s", grid[i]);
      }
      memset(lblk,0,sizeof lblk);
      pre(m,n);
//      print(m,n);
      pair<int,int> s, g;
      for (int i=0;i<m;i++){
         for (int j=0;j<n;j++){
            if (grid[i][j]=='S'){
               s={i,j};
            }
            else if (grid[i][j]=='G'){
               g={i,j};
            }
         }
      }
 //     printf("%d %d\n%d %d\n", s.first,s.second,g.first,g.second);
      memset(vis,0,sizeof vis);
      while (Q.size()){
         Q.pop();
      }
      Q.push( state( s.first+1,s.second, 1,1  )  );
      Q.push( state( s.first-1,s.second, 1,1  )  );
      Q.push( state( s.first,s.second+1, 1,1  )  );
      Q.push( state( s.first,s.second-1, 1,1  )  );

      int shortest=-1;
      while(Q.size() && shortest==-1){
         state cur =Q.front();
         Q.pop();
         if (cur.r>=m ||cur.r<0 ||cur.c>=n ||cur.c<0)
            continue;
         if ( grid[cur.r][cur.c]!='.' && grid[cur.r][cur.c]!='S' && grid[cur.r][cur.c]!='G')
            continue;
         if ( lblk[cur.dir][cur.r][cur.c] )
            continue;
         if (vis [cur.dir] [cur.r][cur.c])
            continue;
         if (grid[cur.r][cur.c]=='G')
            shortest=cur.cost;

         vis[cur.dir][cur.r][cur.c]=true;
         Q.push(state( cur.r+1,cur.c, (cur.dir+1)%4,cur.cost+1 )  );
         Q.push(state( cur.r-1,cur.c, (cur.dir+1)%4,cur.cost+1 )  );
         Q.push(state( cur.r,cur.c+1, (cur.dir+1)%4,cur.cost+1 )  );
         Q.push(state( cur.r,cur.c-1, (cur.dir+1)%4,cur.cost+1 )  );
      }
      printf("Case #%d: ",T);
      if (shortest==-1)
         printf("impossible\n");
      else
         printf("%d\n",shortest);
//   */
   }
}

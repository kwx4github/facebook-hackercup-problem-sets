#include <iostream>
#include <vector>
#include <fstream>
#include <queue>
#include <algorithm>
#include <list>
#include <ctime>
#include <cstdio>
#include <stack>
#include <cstring>
#include <climits>
#include <cmath>
#include <string>
#include <functional>
#include <sstream>
#include <map>
#include <set>

#pragma comment(linker, "/STACK:100000000000000")

using namespace std;
#define     For(i,a,b)        for (int i=a; i<b; i++)
#define     Rep(i,a)          for (int i=0; i<a; i++)
#define     ALL(v)            (v).begin(),(v).end()
#define     Set(a,x)          memset((a),(x),sizeof(a))
#define     EXIST(a,b)        find(ALL(a),(b))!=(a).end()
#define     Sort(x)           sort(ALL(x))
#define     UNIQUE(v)         Sort(v); (v).resize(unique(ALL(v)) - (v).begin())
#define     MP                make_pair
#define     SF                scanf
#define     PF                printf
#define     MAXN              111
#define     MOD               1000000007
#define     Dbug              cout<<"";
#define     EPS               1e-8
#define     timestamp(x)      printf("Time : %.3lf s.\n", clock()*1.0/CLOCKS_PER_SEC)
typedef long long ll;
typedef pair<int,int> pii;
int n, m, sr, sc, er, ec;
string b[MAXN];
char get_d(char c, int trn)
{
	char dir[]={'<', '^', '>', 'v'};
	int ind=0;
	Rep(i, 4) if(dir[i]==c) ind=i;
	(ind+=trn)%=4;
	return dir[ind];
}

bool safe(int r, int c, int trn)
{
	For(i, c, m)
	{
		if(b[r][i]=='.') continue;
		if(b[r][i]=='#') break;
		char d=get_d(b[r][i], trn);
		if(d=='<') return 0;
	}
	for(int i=c-1; i>=0; i--)
	{
		if(b[r][i]=='.') continue;
		if(b[r][i]=='#') break;
		char d=get_d(b[r][i], trn);
		if(d=='>') return 0;
	}

	For(i, r, n)
	{
		if(b[i][c]=='.') continue;
		if(b[i][c]=='#') break;
		char d=get_d(b[i][c], trn);
		if(d=='^') return 0;
	}
	for(int i=r-1; i>=0; i--)
	{
		if(b[i][c]=='.') continue;
		if(b[i][c]=='#') break;
		char d=get_d(b[i][c], trn);
		if(d=='v') return 0;
	}
	return 1;
}

int cost[MAXN][MAXN][4], inf=1<<29, mr[]={-1, 0, 1, 0}, mc[]={0, 1, 0, -1};

int dijkstra()
{
	Rep(i, n) Rep(j, m) Rep(z, 4) cost[i][j][z]=inf;
	cost[sr][sc][0]=0;
	priority_queue<pair<int, pair<int, pii> > > q;
	q.push(MP(0, MP(0, MP(sr, sc))));
	while (!q.empty())
	{
		int r=q.top().second.second.first, c=q.top().second.second.second, trn=q.top().second.first;
		q.pop();
		Rep(i, 4)
		{
			int nr=r+mr[i], nc=c+mc[i];
			if(nr>=n || nr<0 || nc>=m || nc<0 || b[nr][nc]!='.') continue;
			if(!safe(nr, nc, (trn+1)%4)) continue;
			if(cost[nr][nc][(trn+1)%4] <= (cost[r][c][trn]+1)) continue;
			cost[nr][nc][(trn+1)%4] = (cost[r][c][trn]+1);
			q.push(MP(-cost[nr][nc][(trn+1)%4], MP((trn+1)%4, MP(nr, nc))));
		}
	}
	int mini=0;
	Rep(i, 4) if(cost[er][ec][i]<cost[er][ec][mini]) mini=i;
	return cost[er][ec][mini];
}
int main(){
	//ios_base::sync_with_stdio(false);
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);
	int tc, cas=1;
	cin>>tc;
	while (tc--)
	{
		cin>>n>>m;
		Rep(i, n) 
		{
			cin>>b[i];
			Rep(j, m)
			{
				if(b[i][j]=='S') sr=i, sc=j, b[i][j]='.';
				if(b[i][j]=='G') er=i, ec=j, b[i][j]='.';
			}
		}
		cout<<"Case #"<<cas++<<": ";
		int ans=dijkstra();
		if(ans==inf) cout<<"impossible\n";
		else cout<<ans<<endl;
	}
	return 0;
}
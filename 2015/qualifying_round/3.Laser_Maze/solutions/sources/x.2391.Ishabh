#include<bits/stdc++.h>

#define pb push_back
#define mp make_pair

using namespace std;

bool mom[110][110][4];
int n,m,sx,sy,dx,dy,dp[110][110][4],vis[110][110][4];
int xi[] = {-1,0,1,0};
int yi[] = {0,1,0,-1};
string str[110];

int chan(char ch) {
	if(ch=='^') return 0; else if(ch == '>') return 1; else if(ch == 'v') return 2;
	return 3;
	return (ch=='^')?0:((ch=='>')?1:((ch=='v')?2:3));
}

void dfs(int x,int y,int dir,int id)
{
	if(x<0 || x>=n || y<0 || y>=m) return;
	if(str[x][y] != 'S' && str[x][y] != 'G' && str[x][y] != '.') return;
	mom[x][y][id] = 1;
	dfs(x+xi[dir],y+yi[dir],dir,id);
}

int main()
{
	freopen("laser_maze.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int t;
	cin >> t;
	int te = 1;
	while(t--) {
		cin >> n >> m;
		for(int i=0;i<n;i++) cin >> str[i];

		for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
			if(str[i][j] == 'S') sx = i,sy = j;
			else if(str[i][j] == 'G') dx = i,dy = j;
		}

		for(int i=0;i<n;i++) for(int j=0;j<m;j++) for(int k=0;k<4;k++) mom[i][j][k] = 0;

		for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
			if(str[i][j] == '<' || str[i][j] == '^' || str[i][j] == '>' || str[i][j] == 'v') {
				int dir = chan(str[i][j]);
				for(int k=0;k<4;k++) {
					int nd = (dir+k+1)%4;
					dfs(i+xi[nd],j+yi[nd],nd,k);
				}
			}
		}

		for(int i=0;i<n;i++) for(int j=0;j<m;j++) for(int k=0;k<4;k++) dp[i][j][k] = 1e9;

		int ans = 1e9;

		dp[sx][sy][3] = 0;
		queue<int> q;
		for(int i=0;i<4;i++) {
			if(sx+xi[i]<0 || sx+xi[i]>=n || sy+yi[i]<0 || sy+yi[i]>=m) continue;
			if(str[sx+xi[i]][sy+yi[i]] == '.' || str[sx+xi[i]][sy+yi[i]] == 'S' || str[sx+xi[i]][sy+yi[i]] == 'G') {
				if(!mom[sx+xi[i]][sy+yi[i]][0]) {
					dp[sx+xi[i]][sy+yi[i]][0] = 1;
					q.push(sx+xi[i]);
					q.push(sy+yi[i]);
					q.push(0);
				}
			}
		}

		while(!q.empty()) {
			int x = q.front();
			q.pop();
			int y = q.front();
			q.pop();
			int t = q.front();
			q.pop();
			int nt = (t+1)%4;
			for(int i=0;i<4;i++) {
				if(x+xi[i]>=0 && x+xi[i]<n && y+yi[i]>=0 && y+yi[i]<m && !mom[x+xi[i]][y+yi[i]][nt] && dp[x][y][t]+1 < dp[x+xi[i]][y+yi[i]][nt]) {
					q.push(x+xi[i]);
					q.push(y+yi[i]);
					q.push(nt);
					dp[x+xi[i]][y+yi[i]][nt] = 1+dp[x][y][t];
				}
			}
		}

		for(int i=0;i<4;i++) ans = min(ans,dp[dx][dy][i]);

		cout << "Case #" << te++ << ": ";
		if(ans == 1e9) cout << "impossible";
		else cout << ans;
		cout << endl;
	}
}
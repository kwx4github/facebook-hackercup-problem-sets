#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
using namespace std;

bool ok[4][111][111],vis[4][111][111];
char matrix[111][111];
const int dir[4][2]={{-1,0},{0,1},{1,0},{0,-1}};
int m,n;

struct Queue
{
    int x,y,t;
}qu[4444444];

bool jd(int i,int j)
{
    if (i>=1&&i<=m&&j>=1&&j<=n&&(matrix[i][j]=='.'||matrix[i][j]=='S'||matrix[i][j]=='G')) return 1;
    return 0;
}

int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int T,x1,y1,x2,y2,ans;
    scanf("%d",&T);
    for (int cas=1;cas<=T;cas++)
    {
        memset(vis,0,sizeof(vis));
        scanf("%d%d",&m,&n);
        for (int i=1;i<=m;i++)
        {
            scanf("%s",matrix[i]+1);
            for (int j=1;j<=n;j++)
                for (int k=0;k<4;k++)
                    ok[k][i][j]=1;
        }
        for (int i=1;i<=m;i++)
            for (int j=1;j<=n;j++)
            {
                if (matrix[i][j]=='#')
                    for (int k=0;k<4;k++)
                        ok[k][i][j]=0;
                else if (matrix[i][j]=='S')
                    x1=i,y1=j;
                else if (matrix[i][j]=='G')
                    x2=i,y2=j;
                else if (matrix[i][j]!='.')
                {
                    for (int k=0;k<4;k++)
                        ok[k][i][j]=0;
                    int p;
                    if (matrix[i][j]=='^') p=0;
                    else if (matrix[i][j]=='>') p=1;
                    else if (matrix[i][j]=='v') p=2;
                    else p=3;
                    for (int k=0;k<4;k++,p=(p+1)%4)
                        for (int t=1;jd(i+t*dir[p][0],j+t*dir[p][1]);t++)
                            ok[k][i+t*dir[p][0]][j+t*dir[p][1]]=0;
                }
            }
        ans=-1;
        int head=0,tail=0;
        qu[tail++]=(Queue){x1,y1,0};
        vis[x1][y1][0]=1;
        for (;head<tail;head++)
        {
            int x=qu[head].x,y=qu[head].y,t=qu[head].t;
            if (x==x2&&y==y2)
            {
                ans=t;
                break;
            }
            for (int k=0;k<4;k++)
            {
                int xx=x+dir[k][0],yy=y+dir[k][1],tt=(t+1)%4;
                if (jd(xx,yy)&&ok[tt][xx][yy]&&!vis[tt][xx][yy])
                {
                    vis[tt][xx][yy]=1;
                    qu[tail++]=(Queue){xx,yy,t+1};
                }
            }
        }
        printf("Case #%d: ",cas);
        if (ans==-1) puts("impossible");
        else printf("%d\n",ans);
    }
    return 0;
}

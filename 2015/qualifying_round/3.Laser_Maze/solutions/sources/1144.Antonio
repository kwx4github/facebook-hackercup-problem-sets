/** Libr@ries **/
//#include "bits/stdc++.h"
#include "stdio.h"
#include "string.h"
#include "cmath"
#include "iostream"
#include "algorithm"
#include "map"
#include "set"
#include "vector"
#include "queue"
/** System **/
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

/** System_Win_32 **/
#if ( WIN32 || __WIN32_ )
   #define lld I64d
#endif

/** Utilities **/
#define forit(i,v  )  for(__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define fori( i,a,b)  for (int i = (int)(a); i < (int)(b); i++)
#define forn( i, n )  fori( i, 0, n )
#define zeros( a )    memset(a, 0,sizeof(a))
#define null( a )     memset(a,-1,sizeof(a))
#define all( a )      (a).begin() , (a).end()
#define sqr( a )      ( (a)*(a) )
#define sz( a )       (a).size()
#define pb            push_back
#define mp            make_pair
#define F             first
#define S             second
#define PI            2*acos(0.0)
using namespace std;
typedef long long LL;


/*
https://ideone.com/v3BQia
*/

char grid [ 200 ][ 200 ];
int  dist [ 200 ][ 200 ][ 4 ];
bool block[ 200 ][ 200 ][ 4 ];

char token[] = { '^','>','v','<'  };
int mov[][2] = { {-1,0},{0,1},{1,0},{0,-1} };

inline pair<int, pair<int,int> > makes( int r, int c, int z ){
    return make_pair( z,make_pair(r,c) );
}

int main(int argc, char const *argv[])
{
    int T, R, C;
    int ri,ci, rf, cf;

    cin >> T;
    //cout << T << endl;

    for ( int tc = 1; tc <= T; tc++ )
    {
    	cin >> R >> C;
        // cout << R << "  " <<C << endl;

    	memset( dist, -1, sizeof(dist) );
        memset( block, 0 , sizeof(block) );

        for ( int r = 0; r < R; r++ ){
            cin >> grid[ r ];

            for ( int c = 0; c < C; c++ ){
                if ( grid[r][c] == 'S' ){
                    ri = r;
                    ci = c;
                    grid[ r ][ c ] = '.';
                } else if ( grid[r][c] == 'G' ){
                    rf = r;
                    cf = c;
                    grid[ r ][ c ] = '.';
                }
            }
        }

        for ( int r = 0;  r < R; r++ ){
            for ( int c = 0; c < C; c++ ){
                // cout << grid[ r ][ c ] ;
                for ( int i=0; i < 4; i++ ) if ( grid[r][c] == token[i] ) // los tokens
                {
                    for ( int k = 1; k <= 4; k++ ){
                        int kk = ( i + k )%4;
                        int nr = r + mov[ kk ][ 0 ];
                        int nc = c + mov[ kk ][ 1 ];

                        while ( nr >= 0 && nr < R && nc >= 0 && nc < C && grid[nr][nc] == '.' ){
                            // cout << nr << "  " << nc << endl;
                            block[ nr ][ nc  ][ k%4 ] = true;
                            nr = nr + mov[ kk ][ 0 ];
                            nc = nc + mov[ kk ][ 1 ];
                        }
                        
                    }
                }
            }
            // cout << endl;
        }

        queue< pair<int, pair<int,int> > > Q;
        Q.push( makes(ri,ci,0) );
        dist[ ri ][ ci ][ 0 ] = 0;

        while( !Q.empty() )
        {
            int z = Q.front().first;
            int r = Q.front().second.first;
            int c = Q.front().second.second;
            Q.pop();

            int d = dist[ r ][ c ][ z ];
            int nz = ( d + 1 )%4;

            for ( int k = 0; k < 4; k++ ){
                int nr = r + mov[ k ][ 0 ];
                int nc = c + mov[ k ][ 1 ];

                if ( nr >= 0 && nr < R && nc>=0 && nc < C && grid[ nr ][ nc ] == '.' && !block[ nr ][ nc ][ nz ] )
                    if ( dist[ nr ][ nc ][ nz] == -1 || (d+1) < dist[ nr ][ nc ][ nz]  ){
                        Q.push( makes(nr,nc,nz) );
                        dist[ nr ][ nc ][ nz ] = d + 1;
                    }
            }
        }

        printf("Case #%d: ", tc );
        int ans = 1<<28;

        for ( int k = 0; k < 4; k++ ){
            if ( dist[rf][cf][k] != -1 ){
                ans = min( ans, dist[rf][cf][k] );
            }
        }

        if ( ans >= 1<<27 ){
            printf("impossible\n");
        }else{
            printf("%d\n", ans );
        }
    }
    return 0;
}

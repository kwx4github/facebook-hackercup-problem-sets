using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Takmicenja.Facebook.HackerCup2015.Qualification
{
    class Problem55
    {
        public static void Main(string[] varg)
        {
            int T = int.Parse(Console.ReadLine());
            for (int t=0;t<T;t++)
            {

               var s = SolveSingle();
               Console.WriteLine(String.Format("Case #{0}: {1}",(t+1),s));
            }
        }

        private static string SolveSingle()
        {
            var tok = Console.ReadLine().Split(new char[] { ' ' });
            int M = int.Parse(tok[0]);
            int N = int.Parse(tok[1]);
            int[, ,] mposition = new int[M, N, 4];
            bool[, ,] visited = new bool[M, N, 4];
            char[,] maze = new char[M, N];

            for (int i = 0; i < M; i++)
            {
                string input = Console.ReadLine();
                for (int j = 0; j < N; j++)
                {
                    maze[i, j] = input[j];
                }
            }
            int starti = -1;
            int startj = -1;
            int endi = -1;
            int endj = -1;
            for (int i = 0; i < M; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    if ("#>v^<".Contains(maze[i, j]))
                    {
                        visited[i, j, 0] = true;
                        visited[i, j, 1] = true;
                        visited[i, j, 2] = true;
                        visited[i, j, 3] = true;
                        if (maze[i, j] == '#') continue;
                        int rotation = 0;
                        switch (maze[i, j])
                        {
                            case '>':
                                FillRight(0, i, j, M, N, maze, visited);
                                FillDown(1, i, j, M, N, maze, visited);
                                FillLeft(2, i, j, M, N, maze, visited);
                                FillUp(3, i, j, M, N, maze, visited);
                                break;
                            case 'v':
                                FillRight(3, i, j, M, N, maze, visited);
                                FillDown(0, i, j, M, N, maze, visited);
                                FillLeft(1, i, j, M, N, maze, visited);
                                FillUp(2, i, j, M, N, maze, visited);
                                break;
                            case '<': 
                                   FillRight(2, i, j, M, N, maze, visited);
                                FillDown(3, i, j, M, N, maze, visited);
                                FillLeft(0, i, j, M, N, maze, visited);
                                FillUp(1, i, j, M, N, maze, visited);
                                break;
                            case '^': 
                                   FillRight(1, i, j, M, N, maze, visited);
                                FillDown(2, i, j, M, N, maze, visited);
                                FillLeft(3, i, j, M, N, maze, visited);
                                FillUp(0, i, j, M, N, maze, visited);
                                break;
                        }
                        //FillRight(rotation, i, j, M, N, maze, visited);
                        //rotation = (rotation + 1) % 4;
                        //FillDown(rotation, i, j, M, N, maze, visited);
                        //rotation = (rotation + 1) % 4;
                        //FillLeft(rotation, i, j, M, N, maze, visited);
                        //rotation = (rotation + 1) % 4;
                        //FillUp(rotation, i, j, M, N, maze, visited);
                    }
                    else if (maze[i, j] == 'S')
                    {
                        starti = i;
                        startj = j;
                    }
                    else if (maze[i, j] == 'G')
                    {
                        endi = i;
                        endj = j;
                    }



                }
            }
            Queue<position> queue = new Queue<position>();
            position startp = new position(starti, startj, 0, 0);
            visited[starti, startj, 0] = true;
            queue.Enqueue(startp);
            while (queue.Count > 0)
            {
                var prevpos = queue.Dequeue();
                //Console.WriteLine("Old position i:" + prevpos.i + " j:" + prevpos.j + " counter:"+prevpos.rotation);
                int nextCnt = (prevpos.rotation + 1) % 4;
                int newprice = prevpos.price+1;
                if (prevpos.j < N - 1 && !visited[prevpos.i, prevpos.j + 1, nextCnt])
                {
                    position p = new position(prevpos.i, prevpos.j + 1, nextCnt, newprice);
                    if (p.i == endi && p.j == endj)
                    {
                        return p.price.ToString();
                        //return;
                    }
                    queue.Enqueue(p);
                    visited[p.i, p.j, nextCnt] = true;

                }
                if (prevpos.j > 0 && !visited[prevpos.i, prevpos.j - 1, nextCnt])
                {
                    position p = new position(prevpos.i, prevpos.j - 1, nextCnt, newprice);
                    if (p.i == endi && p.j == endj)
                    {
                        return p.price.ToString();
                        //return;
                    }
                    queue.Enqueue(p);
                    visited[p.i, p.j, nextCnt] = true;
                }
                if (prevpos.i > 0 && !visited[prevpos.i - 1, prevpos.j, nextCnt])
                {
                    position p = new position(prevpos.i - 1, prevpos.j, nextCnt, prevpos.price + 1);
                    if (p.i == endi && p.j == endj)
                    {
                        return p.price.ToString();
                        //return;
                    }
                    queue.Enqueue(p);
                    visited[p.i, p.j, nextCnt] = true;
                }
                if (prevpos.i < M - 1 && !visited[prevpos.i + 1, prevpos.j, nextCnt])
                {
                    position p = new position(prevpos.i + 1, prevpos.j, nextCnt, prevpos.price + 1);
                    if (p.i == endi && p.j == endj)
                    {
                        return p.price.ToString();
                        //return;
                    }
                    queue.Enqueue(p);
                    visited[p.i, p.j, nextCnt] = true;
                }

            }
            return ("impossible");
        }

        private class position
        {
            public int i;
            public int j;
            public int rotation;
            public int price;

            public position(int i, int j, int rotation, int price)
            {
                this.i = i;
                this.j = j;
                this.rotation = rotation % 4;
                this.price = price;
            }
        }
        private static void FillRight(int rotation, int i, int j, int M, int N, char[,] maze, bool[,,] visited)
        {
            int tempj = j+1;
            while (tempj < N && (maze[i, tempj] == '.' || maze[i, tempj] == 'G' || maze[i, tempj] == 'S'))
            {
                visited[i,tempj,rotation] = true;
                tempj++;
            }
        }

        private static void FillLeft(int rotation, int i, int j, int M, int N, char[,] maze, bool[, ,] visited)
        {
            int tempj = j - 1;
            while (tempj >= 0 && (maze[i, tempj] == '.' || maze[i, tempj] == 'G' || maze[i, tempj] == 'S'))
            {
                visited[i, tempj, rotation] = true;
                tempj--;
            }
        }


        private static void FillUp(int rotation, int i, int j, int M, int N, char[,] maze, bool[, ,] visited)
        {
            int tempi = i - 1;
            while (tempi >= 0 && (maze[tempi, j] == '.' || maze[tempi, j] == 'G' || maze[tempi, j] == 'S'))
            {
                visited[tempi, j, rotation] = true;
                tempi--;
            }
        }

        private static void FillDown(int rotation, int i, int j, int M, int N, char[,] maze, bool[, ,] visited)
        {
            int tempi = i +1 ;
            while (tempi < M && (maze[tempi, j] == '.' || maze[tempi, j] == 'G' || maze[tempi, j] == 'S'))
            {
                visited[tempi, j, rotation] = true;
                tempi++;
            }
        }
    }
}

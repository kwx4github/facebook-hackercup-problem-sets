#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define ll long long
using namespace std;
const int INF = 1e9+7;
int n, m;
string maze[4][121];
int memo[4][121][121], visited[4][121][121];
int validcell(char c) { return c == '.' || c == 'V' || c == 'S' || c == 'G'; }
int valid(int x, int y) { return x >= 0 && y >= 0 && x < n && y < m; }
int tempx[4] = {-1, 0, 1, 0}, tempy[4] = {0, 1, 0, -1};

void bfs(int x, int y) {
	queue <pair<int,pair<int,int> > > Que;
	Que.push(make_pair(0,make_pair(x,y)));
	memo[0][x][y] = 0;
	visited[0][x][y] = 1;
	while(!Que.empty()) {
		x = Que.front().second.first;
		y = Que.front().second.second;
		int testcase = Que.front().first;
		Que.pop();
		for(int i=0;i<4;i++) {
			int _X = x + tempx[i], _y = y + tempy[i], next = (testcase+1)%4;
			if(valid(_X,_y) && !visited[next][_X][_y] && maze[next][_X][_y] == '.') {
				memo[next][_X][_y] = memo[testcase][x][y] + 1;
				visited[next][_X][_y] = 1;
				Que.push(make_pair(next,make_pair(_X,_y)));
			}
		}
	}
}

int walk(int x, int y, int laser) {
	for(int i=0;i<4;i++) {
		maze[i][x][y] = '#';
		int _X = x + tempx[(laser+i)%4], _y = y + tempy[(laser+i)%4];
		while(valid(_X,_y) && validcell(maze[i][_X][_y])) {
			maze[i][_X][_y] = 'V';
			_X += tempx[(laser+i)%4];
			_y += tempy[(laser+i)%4];
		}
	}
}
int main() { _
	int T;
	cin >> T;
	int goali, goalf, starti, startf, i, j, k, testcase;
	for(testcase=1;testcase<=T;testcase++) {
		memset(visited,0,sizeof(visited));
		cin >> n >> m;
		for(i=0;i<4;i++) 
			for(j=0;j<n;j++) 
				for(k=0;k<m;k++) 
					memo[i][j][k] = INF;
		cout << "Case #" << testcase << ": ";
		for(i=0;i<n;i++) 
			cin >> maze[0][i];
		for(i=0;i<n;i++) 
			for(j=0;j<m;j++) {
			if(maze[0][i][j] == 'S') starti = i, startf = j, maze[0][i][j] = '.';
			if(maze[0][i][j] == 'G') goali = i, goalf = j, maze[0][i][j] = '.';
		}
		for(i=1;i<4;i++) 
			for(j=0;j<n;j++) 
				maze[i][j] = maze[0][j];
		for(i=0;i<n;i++) 
			for(j=0;j<m;j++) {
				if(maze[0][i][j] == '^') walk(i,j,0);
				else if(maze[0][i][j] == '>') walk(i,j,1);
				else if(maze[0][i][j] == 'v') walk(i,j,2);
				else if(maze[0][i][j] == '<') walk(i,j,3);
		}
		bfs(starti,startf);
		int ans = INF;
		for(i=0;i<4;i++) 
			ans = min(ans,memo[i][goali][goalf]);
		if(ans == INF) 
			cout << "impossible" << endl;
		else 
			cout <<  ans << endl;
	}
	return 0;
}
#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;

int R, C, T;
int sr, sc, r, c, d;
char maze[101][101];
bool visited[101][101][4] = {0};

struct pack{
    int x;
    int y;
    int d;
};

int main(){
    freopen("lazermaze.in", "r", stdin);
    freopen("lazermaze.out", "w", stdout);

    scanf("%d", &T);

    for (int q = 1; q<=T; q++)
    {
        memset(visited, 0, sizeof visited);
        scanf("%d%d", &R, &C);
        for (int i = 0; i<R; i++){
            for (int j = 0; j<C; j++){
                scanf(" %c", &maze[i][j]);
                if (maze[i][j] == 'S'){
                    sr = i;
                    sc = j;
                }
                if (maze[i][j] == '^') maze[i][j] = '0';
                if (maze[i][j] == '>') maze[i][j] = '1';
                if (maze[i][j] == 'v') maze[i][j] = '2';
                if (maze[i][j] == '<') maze[i][j] = '3';
            }
        }

        queue<pack> q1;
        q1.push((pack){sr,sc,0});
        int ans = -1;
        while(!q1.empty()){
            r = q1.front().x;
            c = q1.front().y;
            d = q1.front().d;
            q1.pop();


            // Check if dead!
            bool dead = false;
            for (int i = r; i<R; i++){
                if (maze[i][c] == '#') break;
                if ('0'<=maze[i][c] && maze[i][c] < '4'){
                    if (((maze[i][c]-'0'+d)%4)==0) dead = true;
                    break;
                }
            }
            for (int i = r; i>=0; i--){
                if (maze[i][c] == '#') break;
                if ('0'<=maze[i][c] && maze[i][c] < '4'){
                    if (((maze[i][c]-'0'+d)%4)==2) dead = true;
                    break;
                }
            }
            for (int j = c; j<C; j++){
                if (maze[r][j] == '#') break;
                if ('0'<=maze[r][j] && maze[r][j] < '4'){
                    if (((maze[r][j]-'0'+d)%4)==3) dead = true;
                    break;
                }
            }
            for (int j = c; j>=0; j--){
                if (maze[r][j] == '#') break;
                if ('0'<=maze[r][j] && maze[r][j] < '4'){
                    if (((maze[r][j]-'0'+d)%4)==1) dead = true;
                    break;
                }
            }
            if (d == 0) dead = false;
            if (dead) continue;

            if (maze[r][c] == 'G'){
                ans = d;
                break;
            }

            if (r+1<R && !visited[r+1][c][(d+1)%4] && (maze[r+1][c]=='.' || maze[r+1][c]=='S' || maze[r+1][c] == 'G')){
                visited[r+1][c][(d+1)%4] = true;
                q1.push((pack){r+1, c, d+1});
            }
            if (r-1>=0 && !visited[r-1][c][(d+1)%4] && (maze[r-1][c]=='.' || maze[r-1][c]=='S' || maze[r-1][c] == 'G')){
                visited[r-1][c][(d+1)%4] = true;
                q1.push((pack){r-1, c, d+1});
            }
            if (c+1<C && !visited[r][c+1][(d+1)%4] && (maze[r][c+1]=='.' || maze[r][c+1]=='S' || maze[r][c+1] == 'G')){
                visited[r][c+1][(d+1)%4] = true;
                q1.push((pack){r, c+1, d+1});
            }
            if (c-1>=0 && !visited[r][c-1][(d+1)%4] && (maze[r][c-1]=='.' || maze[r][c-1]=='S' || maze[r][c-1] == 'G')){
                visited[r][c-1][(d+1)%4] = true;
                q1.push((pack){r, c-1, d+1});
            }

        }
        if (ans==-1) printf("Case #%d: impossible\n", q);
        else printf("Case #%d: %d\n", q, ans);

    }

}

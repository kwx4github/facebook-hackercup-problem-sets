#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <queue>
using namespace std;

char mp[120][120];
int n, m;
string DIR = ">v<^";

char getState(int r, int c, int t) {
	if (DIR.find(mp[r][c]) == string::npos)
		return 0;
	return DIR[(DIR.find(mp[r][c]) + t) % 4];
}

bool safe(int r, int c, int t) {
	for (int rr = r - 1; rr >= 0; --rr) {
		if (getState(rr, c, t) == 'v')
			return false;
		if (mp[rr][c] != '.')
			break;
	}

	for (int rr = r + 1; rr < n; ++rr) {
		if (getState(rr, c, t) == '^')
			return false;
		if (mp[rr][c] != '.')
			break;
	}

	for (int cc = c - 1; cc >= 0; --cc) {
		if (getState(r, cc, t) == '>')
			return false;
		if (mp[r][cc] != '.')
			break;
	}

	for (int cc = c + 1; cc < m; ++cc) {
		if (getState(r, cc, t) == '<')
			return false;
		if (mp[r][cc] != '.')
			break;
	}

	return true;
}

int dist[120][120][4];
int dr[] = { -1, 1, 0, 0 }, dc[] = { 0, 0, -1, 1 };

int main() {
	int T;
	cin >> T;
	int nT = 1;
	while (T--) {
		cin >> n >> m;
		for (int r = 0; r < n; ++r) {
			cin >> mp[r];
		}

		int sr, sc, er, ec;
		for (int r = 0; r < n; ++r) {
			for (int c = 0; c < m; ++c) {
				if (mp[r][c] == 'S')
					sr = r, sc = c, mp[r][c] = '.';
				if (mp[r][c] == 'G')
					er = r, ec = c, mp[r][c] = '.';
			}
		}

		memset(dist, -1, sizeof dist);
		queue<int> que;

		dist[sr][sc][0] = 0;
		que.push(sr), que.push(sc), que.push(0);

		while (!que.empty()) {
			int r = que.front();
			que.pop();
			int c = que.front();
			que.pop();
			int t = que.front();
			que.pop();
			int d = dist[r][c][t];

			for (int di = 0; di < 4; ++di) {
				int rr = r + dr[di], cc = c + dc[di];
				if (rr < 0 || rr >= n || cc < 0 || cc >= m)
					continue;
				if (mp[rr][cc] != '.')
					continue;
				if (safe(rr, cc, d + 1) && dist[rr][cc][(d + 1) % 4] == -1) {
					dist[rr][cc][(d + 1) % 4] = d + 1;
					que.push(rr), que.push(cc), que.push((d + 1) % 4);
				}
			}
		}
		int ans = -1;
		for (int md = 0; md < 4; ++md) {
			if (dist[er][ec][md] != -1) {
				if (ans == -1)
					ans = dist[er][ec][md];
				else
					ans = min(ans, dist[er][ec][md]);
			}
		}
		cout << "Case #" << nT++ << ": ";
		if (ans == -1)
			cout << "impossible" << endl;
		else
			cout << ans << endl;
	}
}

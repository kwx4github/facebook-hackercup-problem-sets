#include <cstdio>
#include <queue>
using namespace std;
FILE *f,*g;
int q,T,n,m;
char a[110][110];
int d[110][110][4];
bool ok[110][110][4];
int dx[4] = {-1,0,+1,0};
int dy[4] = {0,+1,0,-1};
int i;

struct cp
{
    int X,Y,Z;
    cp() {}
    cp(int x,int y,int z)
    {
        X = x;
        Y = y;
        Z = z;
    }
};


cp start,finish;

bool verif(cp nr)
{
    if (nr.X<1 || nr.Y<0 || nr.X>n || nr.Y>=m) return false;
    return true;
}

inline int next(int x,int k)
{
    if ( (x+k)%4==0)
        return 4;
    else
        return (x+k)%4;
}


void pre()
{
    int i,j,d,ax;
    bool l[4];


    for (i=1;i<=n;i++)
        for (j=0;j<m;j++)
        {
            if (a[i][j] == 'S' ) start = cp(i,j,0);
            if (a[i][j] == 'G' ) finish = cp(i,j,0);
            if (a[i][j] == '^') a[i][j] = 1;
            if (a[i][j] == '>') a[i][j] = 2;
            if (a[i][j] == 'v') a[i][j] = 3;
            if (a[i][j] == '<') a[i][j] = 4;
        }


    for (i=0;i<4;i++) l[i] = false;

    for (i=1;i<=n;i++)
    {
        for (j=0;j<4;j++) l[j] = false;
        for (j=0;j<m;j++)
            for (d=0;d<4;d++)
            {
                if (a[i][j] == '#')
                {
                    l[d] = false;
                    ok[i][j][d] = false;
                }
                if (a[i][j] == '.' || a[i][j] == 'S' || a[i][j] == 'G')
                    ok[i][j][d] = not l[d];
                if (a[i][j]>=1 && a[i][j]<=4)
                {
                    ax = next(a[i][j],d);
                    if (ax == 2)
                        ok[i][j][d] = true;
                    else
                        ok[i][j][d] = false;
                }
            }
    }


    for (i=1;i<=n;i++)
    {
        for (j=0;j<4;j++) l[j] = false;
        for (j=m-1;j>=0;j--)
            for (d=0;d<4;d++)
            {
                if (a[i][j] == '#')
                {
                    l[d] = false;
                    ok[i][j][d] = false;
                }
                if (a[i][j] == '.' || a[i][j] == 'S' || a[i][j] == 'G')
                    ok[i][j][d] = (ok[i][j][d] && not l[d]);
                if (a[i][j]>=1 && a[i][j]<=4)
                {
                    ax = next(a[i][j],d);
                    if (ax == 4)
                        l[d] = true;
                    else
                        l[d] = false;
                    ok[i][j][d] = false;
                }
            }
    }

    for (j=0;j<m;j++)
    {
        for (i=0;i<4;i++) l[i] = false;
        for (i=1;i<=n;i++)
            for (d=0;d<4;d++)
            {
                if (a[i][j] == '#')
                {
                    l[d] = false;
                    ok[i][j][d] = false;
                }
                if (a[i][j] == '.' || a[i][j] == 'S' || a[i][j] == 'G')
                    ok[i][j][d] = (ok[i][j][d] && not l[d]);
                if (a[i][j]>=1 && a[i][j]<=4)
                {
                    ax = next(a[i][j],d);
                    if (ax == 3)
                        l[d] = true;
                    else
                        l[d] = false;
                    ok[i][j][d] = false;
                }
            }
    }

    for (j=0;j<m;j++)
    {
        for (i=0;i<4;i++) l[i] = false;
        for (i=n;i>=1;i--)
            for (d=0;d<4;d++)
            {
                if (a[i][j] == '#')
                {
                    l[d] = false;
                    ok[i][j][d] = false;
                }
                if (a[i][j] == '.' || a[i][j] == 'S' || a[i][j] == 'G')
                    ok[i][j][d] = (ok[i][j][d] && not l[d]);
                if (a[i][j]>=1 && a[i][j]<=4)
                {
                    ax = next(a[i][j],d);
                    if (ax == 1)
                        l[d] = true;
                    else
                        l[d] = false;
                    ok[i][j][d] = false;
                }
            }
    }

}

void solve()
{
    int i,j,k,w;
    queue <cp> Q;
    cp ax,ax2;


    for (i=1;i<=n;i++)
        for (j=0;j<m;j++)
            for (k=0;k<4;k++)
                if (ok[i][j][k] == false)
                    d[i][j][k] = -1;
                else
                    d[i][j][k] = 0;


    ax = start;
    ax.Z = 0;
    d[ax.X][ax.Y][ax.Z] = 1;

    Q.push(ax);

    while (Q.size()>0)
    {
        ax = Q.front();
        Q.pop();


        for (w=0;w<4;w++)
        {
            ax2.X = ax.X+dx[w];
            ax2.Y = ax.Y+dy[w];
            ax2.Z = (ax.Z+1)%4;

            if (verif(ax2))
                if (d[ax2.X][ax2.Y][ax2.Z] == 0 || d[ax2.X][ax2.Y][ax2.Z]>d[ax.X][ax.Y][ax.Z]+1)
                {
                    d[ax2.X][ax2.Y][ax2.Z] = d[ax.X][ax.Y][ax.Z] + 1;
                    Q.push(ax2);
                }
        }
    }

    int res = 1000000000;

    for (i=0;i<4;i++)
        if (d[finish.X][finish.Y][i] >0 && d[finish.X][finish.Y][i]<res)
            res = d[finish.X][finish.Y][i];
    if (res == 1000000000)
        fprintf(g,"impossible\n");
    else
        fprintf(g,"%d\n",res-1);
}




int main()
{
    f=fopen("input.txt","r");
    g=fopen("output.txt","w");


    fscanf(f,"%d",&T);

    for (q=1;q<=T;q++)
    {

        fscanf(f,"%d%d",&n,&m);

        for (i=1;i<=n;i++)
            fscanf(f,"%s",a[i]);

        fprintf(g,"Case #%d: ",q);



        pre();
        solve();
    }



    return 0;
}

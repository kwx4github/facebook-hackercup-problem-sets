#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <unordered_map>
#include <functional>
#include <tuple>
#include <cstring>
using namespace std;

typedef long long ll;

#define MX 110
string grid[MX];
int laser[MX][MX];

string L = "<^>v";
int dr[] = { 0, -1, 0, 1 };
int dc[] = { -1, 0, 1, 0 };

string blocks = L + "#";
bool vis[MX][MX][4];

int main() {
  freopen("laser_maze.txt", "rt", stdin);
  freopen("laser_maze.out", "wt", stdout);
  int tt;
  cin >> tt;
  for (int ii = 0; ii < tt; ++ii) {
    cout << "Case #" << ii + 1 << ": ";
    int R, C;
    cin >> R >> C;
    int si, sj;
    for (int i = 0; i < R; ++i) {
      cin >> grid[i];
      for (int j = 0; j < grid[i].size(); ++j) {
        if (grid[i][j] == 'S')
          si = i, sj = j;
      }
    }
    memset(laser, 0, sizeof laser);
    // Look for laser turrets.
    for (int i = 0; i < R; ++i) {
      for (int j = 0; j < C; ++j) {
        int ind = L.find(grid[i][j]);
        if (ind == string::npos)
          continue;
        // The direction of the laser is shifted by ind.
        for (int k = 0; k < 4; ++k) {
          // Mark the four directions as attacked at a different time stamp.
          int ni = i, nj = j;
          while (1) {
            ni += dr[(k + ind) % 4];
            nj += dc[(k + ind) % 4];
            if (ni < 0 || ni >= R || nj < 0 || nj >= C
                || blocks.find(grid[ni][nj]) != string::npos) {
              break;
            }
            laser[ni][nj] |= 1 << k;
          }
        }
      }
    }
    memset(vis, 0, sizeof vis);
    queue<pair<int, int> > Q;
    Q.push(make_pair(si, sj));
    vis[si][sj][0] = 1;
    int steps = 0;
    bool found = false;
    while (!Q.empty()) {
      int sz = Q.size();
      steps++;
      while (sz--) {
        int ci = Q.front().first;
        int cj = Q.front().second;
        Q.pop();
        for (int k = 0; k < 4; ++k) {
          int ni = ci, nj = cj;
          ni += dr[k];
          nj += dc[k];
          if (ni < 0 || ni >= R || nj < 0 || nj >= C
              || blocks.find(grid[ni][nj]) != string::npos) {
            continue;
          }
          if (laser[ni][nj] & (1<<(steps%4)))
            continue;
          if (vis[ni][nj][steps%4])
            continue;
          vis[ni][nj][steps%4]  = 1;
          Q.push(make_pair(ni, nj));
          if (grid[ni][nj] == 'G') {
            found = true;
            break;
          }
        }
        if(found) break;
      }
      if(found) break;
    }
    if (found)
      cout << steps << endl;
    else
      cout << "impossible" << endl;
  }
  return 0;
}

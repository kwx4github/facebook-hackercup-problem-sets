#include <bits/stdc++.h>
using namespace std;

const int TAM = 105;

bool seen[TAM][TAM][4];
bool dies[TAM][TAM][4];
int h, w;
string G[TAM];

const string dirs = "^>v<";
const int di[] = { -1, 0, 1, 0 };
const int dj[] = { 0, 1, 0, -1 };

int main ( )
{
	int ntc;
	cin >> ntc;
	for ( int t = 1; t <= ntc; ++t )
	{
		int ans = -1;
		memset ( seen, false, sizeof(seen) );
		memset ( dies, false, sizeof(dies) );
		cin >> h >> w;
		for ( int i = 0; i < h; ++i )
			cin >> G[i];

		queue<int> q;
		for ( int i = 0; i < h; ++i )
			for ( int j = 0; j < w; ++j )
				if ( G[i][j] == 'S' ) {
					q.push(i); q.push(j); q.push(0);
				}
				else if ( dirs.find(G[i][j]) != string::npos ) {
					int d = dirs.find(G[i][j]);
					for ( int k = 0; k < 4; ++k ) {
						int ni = i, nj = j;
						while ( true ) {
							if ( ni < 0 || nj < 0 ) break;
							if ( ni >= h || nj >= w ) break;
							if ( !( ni == i && nj == j )
								&& G[ni][nj] != '.'
								&& G[ni][nj] != 'S'
								&& G[ni][nj] != 'G' )
								break;
							dies[ni][nj][k] = true;
							ni += di[d];
							nj += dj[d];
						}

						d = (d+1)%4;
					}
				} else if ( G[i][j] != '.' && G[i][j] != 'G' ) {
					for ( int k = 0; k < 4; ++k )
						dies[i][j][k] = true;
				}

		while ( !q.empty() ) {
			const int i = q.front(); q.pop();
			const int j = q.front(); q.pop();
			const int k = q.front(); q.pop();

			seen[i][j][k%4] = true;
			if ( G[i][j] == 'G' ) {
				ans = k;
				break;
			}

			for ( int d = 0; d < 4; ++d ) {
				int ni = i + di[d];
				int nj = j + dj[d];
				if ( ni < 0 || nj < 0 ) continue;
				if ( ni >= h || nj >= w ) continue;
				if ( seen[ni][nj][(k+1)%4] ) continue;
				if ( dies[ni][nj][(k+1)%4] ) continue;
				seen[ni][nj][(k+1)%4] = true;
				q.push(ni); q.push(nj); q.push(k+1);
			}
		}


		cout << "Case #" << t << ": ";
		if ( ans == -1 ) cout << "impossible" << endl;
		else cout << ans << endl;
	}
	return 0;
}


 
 ///*

#include<stdio.h>
#include<iostream>
#include<iomanip>
#include<fstream>
#include<string>
#include<vector>
#include<set>
#include<stack>
#include<list>
#include<queue>
#include<deque>
#include<bitset>
#include<map>
#include<algorithm>
#include<cmath>
#include<numeric>

#pragma comment (linker, "/STACK:16777216")
#define INF 1000000001 //1e9 + 1
#define EPS 1e-6
#define PI 3.1415926535897932384626433832795028841971
#define mp make_pair
#define pb push_back
#define pf push_front
#define ppf pop_front
#define ppb pop_back
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; ++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i >= _b; --i)
#define all(c) (c).begin(),(c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,0,(n)-1)
#define VI vector <int>
#define ll long long
#define sqr(x) ((x)*(x))

#define MAX 100100
#define MOD 1000000007
using namespace std;


char A[4][111][111];
bool used[4][111][111];
int d[4][111][111];

int n,m;




inline char rotate(char ch)
{
	if(ch == '^')return '>';
	if(ch == '>')return 'v';
	if(ch == 'v')return '<';
	if(ch == '<')return '^';
	return ch;
}

bool ok(char ch)
{
	return ch == '.' || ch == 'S' || ch == 'G';
}


int main()
{

	freopen("in.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	cin >> t;
	rep(tt,t)
	{
		cin >> n >> m;
		rep(i,n)
			cin >> A[0][i];

		//rep(i,n)
			//cerr << A[0][i] << endl;



		FOR(s,1,3)
			rep(i,n)
				rep(j,m)
					A[s][i][j] = rotate(A[s-1][i][j]);
		pii S, G;
		rep(i,n)
			rep(j,m)
			{
				if(A[0][i][j] == 'S')
					S = mp(i,j);
				if(A[0][i][j] == 'G')
					G = mp(i,j);
			}
		int cur;
		rep(s,4)
			rep(i,n)
				rep(j,m)
		{
			switch(A[s][i][j])
			{
			case '^':			
				cur = i-1;
				while(cur >= 0 && (ok(A[s][cur][j]) || A[s][cur][j] == '+'))
					A[s][cur][j] = '+', --cur;
				break;
			case '>':
				cur = j+1;
				while(cur < m && (ok(A[s][i][cur]) || A[s][i][cur] == '+'))
					A[s][i][cur] = '+',++cur;
				break;
			case 'v':			
				cur = i+1;
				while(cur < n && (ok(A[s][cur][j]) || A[s][cur][j] == '+'))
					A[s][cur][j] = '+', ++cur;
				break;
			case '<':			
				cur = j-1;
				while(cur >= 0 && (ok(A[s][i][cur]) || A[s][i][cur] == '+'))
					A[s][i][cur] = '+', --cur;
				break;
			default:
				break;			
			}	
		}

		/*
		rep(s,4)
		{
			rep(i,n)
				cout << A[s][i] << endl;
			cout << endl << endl;
		}
		//*/
		
		rep(s,4)
			rep(i,n)
				rep(j,m)
		{
					used[s][i][j] = 0;
					d[s][i][j] = INF;
		}

		queue<pair < int, pii> > q;
		used[0][S.x][S.y] = 1;
		d[0][S.x][S.y] = 0;
		q.push(mp(0,S));

		while(!q.empty())
		{
			int s = q.front().x;
			int i = q.front().y.x;
			int j = q.front().y.y;
			q.pop();

			int ts = (s+1) % 4;

			if(i && ok(A[ts][i-1][j]) && !used[ts][i-1][j])
			{
				used[ts][i-1][j] = 1;
				q.push(mp(ts, mp(i-1,j)));
				d[ts][i-1][j] = d[s][i][j] + 1;
			}

			if(i + 1 < n  && ok(A[ts][i+1][j]) && !used[ts][i+1][j])
			{
				used[ts][i+1][j] = 1;
				q.push(mp(ts, mp(i+1,j)));
				d[ts][i+1][j] = d[s][i][j] + 1;
			}

			if(j  && ok(A[ts][i][j-1]) && !used[ts][i][j-1])
			{
				used[ts][i][j-1] = 1;
				q.push(mp(ts, mp(i,j-1)));
				d[ts][i][j-1] = d[s][i][j] + 1;
			}
			if(j+1 < m && ok(A[ts][i][j+1]) && !used[ts][i][j+1])
			{
				used[ts][i][j+1] = 1;
				q.push(mp(ts, mp(i,j+1)));
				d[ts][i][j+1] = d[s][i][j] + 1;
			}

		}
		int ans = INF;
		rep(s,4)
			ans = min(ans, d[s][G.x][G.y]);

		if(ans == INF)
			cout << "Case #" << (tt+1) << ": impossible" << endl;
		else
			cout << "Case #" << (tt+1) << ": " << ans << endl;


	
	}

	return 0;
}
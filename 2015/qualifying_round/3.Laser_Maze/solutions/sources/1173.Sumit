#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <algorithm>
using namespace std;

#define nln        puts("")                         ///printnewline
#define getint(a)  scanf("%d",&a);
#define max3(a,b,c) max(a,max(b,c))                  ///3 ta theke max
#define min3(a,b,c) min(a,min(b,c))                  ///3 ta theke min

#define FOR1(i,n)  for(int i=1;i<=n;i++)
#define FOR0(i,n)  for(int i=0;i<n;i++)                 ///looping
#define FORR(i,n)  for(int i=n-1;i>=0;i--)
#define ALL(p)     p.begin(),p.end()

#define SET(p)     memset(p,-1,sizeof(p))
#define CLR(p)     memset(p,0,sizeof(p))            ///memset
#define MEM(p,v)   memset(p,v,sizeof(p))

#define READ(f)    freopen(f, "r", stdin)           /// file
#define WRITE(f)   freopen(f, "w", stdout)

#define SZ(c)      (int)c.size()
#define PB(x)      push_back(x)                     ///STL defines
#define MP(x,y)    make_pair(x,y)
#define ff         first
#define ss         second

#define LI         long int
#define LLI        long long int
#define f64        long double
#define PI         acos(-1.0)                        ///PI er value

int Set(int N,int pos)
{
    return N=N | (1<<pos);
}
int reset(int N,int pos)
{
    return N= N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}
void CI(int &_x)
{
    scanf("%d",&_x);
}

void CO(int &_x)
{
    cout<<_x;
}

template<typename T> void getarray(T a[],int n)
{
    for(int i=0; i<n; i++) cin>>a[i];
}
template<typename T> void printarray(T a[],int n)
{
    for(int i=0; i<n-1; i++) cout<<a[i]<<" ";
    cout<<a[n-1]<<endl;
}

const double EPS=1e-9;                              ///constatnts
const int INF=0x7f7f7f7f;

int dr8[8]= {1,-1,0,0,1,-1,-1,1};            ///8 direction move
int dc8[8]= {0,0,-1,1,1,1,-1,-1};
int dr4[4]= {0,0,1,-1};                      ///4 direction move
int dc4[4]= {-1,1,0,0};                      ///or adjacent dir.
int kn8r[8]= {1,2,2,1,-1,-2,-2,-1};          ///knight moves
int kn8c[8]= {2,1,-1,-2,-2,-1,1,2};
char grid[105][105];
bool colour[105][105][10];
int row,col;
struct sumit
{
    int x,y,dir;
    sumit() {}
    sumit(int x,int y,int dir): x(x),y(y),dir(dir) {}

};

vector<sumit>V;
bool func()
{
//puts("ENTER");
    for(int i=0; i<V.size(); i++)
    {
        int xx=V[i].x;
        int yy=V[i].y;

        int d=V[i].dir;

//        cout<<"PORN : "<<xx<<" "<<yy<<" "<<d<<"\n";
        for(int j=0; j<4; j++)
        {

            int dd=(d+j)%4;
//        cout<<"FUCKING : "<<j<<" "<<dd<<"\n";
            colour[xx][yy][dd]=1;
            if(dd==0)
            {

//                cout<<d<<" "<<j<<" "<<dd<<"\n";
                for(int k=yy-1; k>=1; k--)
                    if(grid[xx][k]=='.')
                        colour[xx][k][j]=1;
                    else
                        break;

//                for(int m=1; m<=row; m++)
//                {
//
//                    for(int n=1; n<=col; n++)
//                        cout<<colour[m][n][d];
//                    puts("");
//
//                }

            }


            if(dd==1)
            {
                //   colour[xx][yy][d]=1;
//                cout<<d<<" "<<j<<" "<<dd<<"\n";

                for(int k=xx-1; k>=1; k--)
                    if(grid[k][yy]=='.')
                        colour[k][yy][j]=1;
                    else
                        break;

//                for(int m=1; m<=row; m++)
//                {
//
//                    for(int n=1; n<=col; n++)
//                        cout<<colour[m][n][d];
//                    puts("");
//
//                }

            }

            if(dd==2)
            {
//                cout<<d<<" "<<j<<" "<<dd<<"\n";
                for(int k=yy+1; k<=col; k++)
                    if(grid[xx][k]=='.')
                        colour[xx][k][j]=1;
                    else
                        break;

//                for(int m=1; m<=row; m++)
//                {
//
//                    for(int n=1; n<=col; n++)
//                        cout<<colour[m][n][d];
//                    puts("");
//
//                }



            }
            if(dd==3)
            {
//                cout<<d<<" "<<j<<" "<<dd<<"\n";
                for(int k=xx+1; k<=row; k++)
                    if(grid[k][yy]=='.')
                        colour[k][yy][j]=1;
                    else
                        break;
//                for(int m=1; m<=row; m++)
//                {
//
//                    for(int n=1; n<=col; n++)
//                        cout<<colour[m][n][d];
//                    puts("");
//
//                }


            }


        }

    }

}
int bfs(int sx,int sy,int dx,int dy)
{

    memset(colour,0,sizeof colour);
    func();
//    for(int d=0; d<4; d++)
//    {
//        cout<<"FUCKING "<<d<<": \n";
//        for(int i=1; i<=row; i++)
//        {
//
//            for(int j=1; j<=col; j++)
//                cout<<colour[i][j][d];
//            puts("");
//
//        }
//
//
//    }
//    exit(0);

    queue<int>Q;
    Q.push(sx);
    Q.push(sy);
    Q.push(0);

//    Q.push(1);
//    Q.push(4);
//    Q.push(3);

    colour[sx][sy][0]=1;
    while(!Q.empty())
    {


        int x=Q.front();
        Q.pop();
        int y=Q.front();
        Q.pop();
        int d=Q.front();
        Q.pop();
//cout<<x<<" "<<y<<" "<<d<<"\n";
        for(int i=0; i<4; i++)
        {

            int xx=x+dr4[i];
            int yy=y+dc4[i];
            int dd=d+1;

            if(xx<1||xx>row||yy<1||yy>col)
                continue;
            if(grid[xx][yy]=='#'||grid[xx][yy]=='<'||grid[xx][yy]=='^'||grid[xx][yy]=='>'||grid[xx][yy]=='v')
                continue;
            if(colour[xx][yy][dd%4])
                continue;
            colour[xx][yy][dd%4]=1;
            if(xx==dx&&yy==dy)
                return dd;
            Q.push(xx);
            Q.push(yy);
            Q.push(dd);

        }

    }

    return -1;
}
int main()
{
    READ("input.txt");
    WRITE("output.txt");

    int t,kase=1;
    cin>>t;
    while(t--)
    {
        V.clear();
        memset(colour,0,sizeof colour);
        cin>>row>>col;
        int x,y,x1,y1;
        for(int i=1; i<=row; i++)
            for(int j=1; j<=col; j++)
            {
                cin>>grid[i][j];

                if(grid[i][j]=='S')
                    x=i,y=j;

                if(grid[i][j]=='G')
                    x1=i,y1=j;

                if(grid[i][j]=='>')
                    V.PB(sumit(i,j,2));

                if(grid[i][j]=='^')
                    V.PB(sumit(i,j,1));

                if(grid[i][j]=='<')
                    V.PB(sumit(i,j,0));

                if(grid[i][j]=='v')
                    V.PB(sumit(i,j,3));

            }
        grid[x][y]='.';
        grid[x1][y1]='.';
//x=1,y=4,V[0].dir=3;
//puts("OKK");
        int ans=bfs(x,y,x1,y1);
        if(ans==-1)
            cout<<"Case #"<<kase++<<": "<<"impossible"<<"\n";
        else
            cout<<"Case #"<<kase++<<": "<<ans<<"\n";
//        cout<<"Case #"<<kase++<<": "<<rec(3,5,7)<<"\n";
    }


}





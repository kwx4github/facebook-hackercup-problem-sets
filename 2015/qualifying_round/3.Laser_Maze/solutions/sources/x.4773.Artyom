#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <cstdio>
#include <map>

using namespace std;

#if	1

int n, m;
vector< vector<char> > lb;
vector< vector<int> > dn[4];


char turnclc(char ch) {
	for (int k = 0; k < 4; ++k) {
		// Выполняем поворот
		switch (ch)
		{
		case 'v': return '<';
			break;

		case '^': return '>';
			break;

		case '>': return 'v';
			break;

		case '<': return '^';
			break;
		}
	}
}

int ddi[4] = { 0, 0, 1, -1 };
int ddj[4] = { 1, -1, 0, 0 };

int get_dist(int dd, int k, int i, int j) {
	/*
	int ans = dn[k][i][j];
	if (ans == -1) {
	int min = 1e9;

	for (int cc = 0; cc < 4; ++cc) {
	if ((0 <= i + ddi[cc]) && (i + ddi[cc] < n) && (0 <= j + ddj[cc]) && (j + ddj[cc] < m)) {
	int buf = get_dist((4 + k - 1) % 4, i + ddi[cc], j + ddj[cc]);

	if (buf != -3 && ans != -2 && min > buf) {
	min = buf;
	}
	}
	}

	if (min == 1e9) {
	min = -3;
	}

	dn[k][i][j] = min;
	ans = min;
	}

	return ans;
	*/
	if (dd < dn[k][i][j] || dn[k][i][j] == -1 || dd == 0) {

		dn[k][i][j] = dd;

		for (int cc = 0; cc < 4; ++cc) { 
			if ((0 <= (i + ddi[cc])) && ((i + ddi[cc]) < n) && (0 <= (j + ddj[cc])) && ((j + ddj[cc]) < m)) {
		
				get_dist(dd + 1, (k + 1) % 4, i + ddi[cc], j + ddj[cc]);
			}

		}
	}

	return 0;
}


int main() {
	freopen("input.txt" , "r", stdin );
	freopen("output.txt", "w", stdout);

	// ios_base::sync_with_stdio(false);

	int T;
	cin >> T;

	for (int TT = 0; TT < T; ++TT) {
		cin >> n >> m;

		lb.clear();
		lb.resize(n);

		for (int i = 0; i < n; ++i) {
			lb[i].resize(m);
			for (int j = 0; j < m; ++j) {
				char buf = lb[i][j];
				cin >> buf;
				lb[i][j] = buf;
			}
		}

		for (int i = 0; i < 4; ++i) {
			dn[i].clear();
			dn[i].resize(n);

			for (int j = 0; j < n; ++j) {
				dn[i][j].resize(m);

				for (int k = 0; k < m; ++k) {
					dn[i][j][k] = -1;
				}
			}
		}

		// Заполняем карту
		int sdi, sdj;
		int edi, edj;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (lb[i][j] == '#') {
					// Стена
					for (int k = 0; k < 4; ++k) {
						dn[k][i][j] = -2;
					}
				}
				else if (lb[i][j] == 'v' || lb[i][j] == '^' || lb[i][j] == '>' || lb[i][j] == '<') {
					// Лазер
					char ch = lb[i][j];

					for (int k = 0; k < 4; ++k) {
						// Выполняем поворот
						ch = turnclc(ch);

						// Определяем смещение 
						int di = 0, dj = 0;
						switch (ch)
						{
						case 'v': di = 1;
							break;

						case '^': di = -1;
							break;

						case '>': dj = 1;
							break;

						case '<': dj = -1;
							break;
						}

						// Двигаясь по смещению заполняем клетки
						// сам лазер
						dn[k][i][j] = -2;

						int ip = i;
						int jp = j;
						for (int ip = i, jp = j; (0 <= ip) && (ip < n) && (0 <= jp) && (jp < m); ip += di, jp += dj) {
							if (dn[k][ip][jp] != 0) {
								dn[k][ip][jp] = -2;
							}
						}

					}


				}
				else if (lb[i][j] == 'S') {
					sdi = i;
					sdj = j;
				}
				else if (lb[i][j] == 'G') {
					edi = i;
					edj = j;
				}
			}
		}

		// когда заполнили карту -- вызываем функцию прохождения

		/*
		for (int k = 0; k < 4; ++k) {
			for (int i = 0; i < n; ++i) {
				for (int j = 0; j < m; ++j) {
					printf("%03d", dn[k][i][j]);
				}
				printf("\n");
			}
			printf("\n");
		}

		cout << "----------------------------" << endl;
		*/

		get_dist(0, 3, sdi, sdj);

		int anss = 1e9;
		for (int k = 0; k < 4; ++k) {
			if (anss > dn[k][edi][edj] && dn[k][edi][edj] > 0) {
				anss = dn[k][edi][edj];
			}
		}
		
		if (anss == 1e9) {
			cout << "Case #" << (TT + 1) << ": " << "impossible" << endl;
		}
		else {
			cout << "Case #" << (TT + 1) << ": " << anss << endl;
		}

		/*
		for (int k = 0; k < 4; ++k) {
			for (int i = 0; i < n; ++i) {
				for (int j = 0; j < m; ++j) {
					printf("%03d", dn[k][i][j]);
				}
				printf("\n");
			}
			printf("\n");
		}
		printf("\n");
		cout << "----------------------------" << endl;
		*/

	}
}
#endif
// LANG : C++

#include "cstdio"
#include "cstdlib"
#include "cstring"

#include "ctime"
#include "iostream"

#include "set"
#include "map"
#include "list"
#include "deque"
#include "queue"
#include "stack"
#include "string"
#include "vector"
#include "utility"
#include "algorithm"

#define MP make_pair
#define ST first
#define ND second
#define PB push_back
#define S(x) (int)x.size()
#define Z(x) memset(x,0,sizeof(x))
#define D(a) cout << "[ " << #a << " : " << a << " ]"<< endl;
#define B(a) (a).begin()
#define E(a) (a).end()
#define A(a) B(a) , E(a)

#define FOR(i, a, b) for (int i(a);i<= b;++i)
#define REP(i, n) FOR(i,0,(n)-1)
#define FORD(i, a, b) for (int i(a);i>=b;--i)

//int dx[]={ 0, 1, 0,-1, 1, 1,-1,-1 };
//int dy[]={ 1, 0,-1, 0,-1, 1, 1,-1 };
//template<typename T> T test( T &a ){ }

using namespace std;

typedef long long llint;
typedef pair<int, int> PII;
typedef vector<int> VI;

const int INF = -1u/2 ; // 1023456789 
//const int SIZE = 0 ;
const int MOD = 1 ;

char in[102][102] ; 
int dp[2][102][102] ;
int mask[102][102] ;  

void solve(){
	vector<pair<int ,int> > sol;
	static int cc = 1 ; 
	
	int n , m ; scanf("%d%d",&n,&m);
	FOR( i , 1 , n ) scanf("%s",in[i]+1);
	int prev = 1 ; 
	memset( dp , 0 , sizeof(dp) ) ; 
	memset( mask , 0 , sizeof(mask) ) ; 
	int ans = 0 ; int now = 0 ; int abc = 0  ;  
	FOR( i , 1 , n ){
		FOR( j , 1 , m ){
			if( in[i][j] == '>' || in[i][j] == '^' || in[i][j] == '<' || in[i][j] == 'v' ){ 
				sol.push_back( make_pair(i,j) ) ;   
			}
		}
	}
	
	FOR( i , 1 , n ){
		FOR( j , 1 , m ){
			if( in[i][j] == 'S' ){ 
				abc = 1 ; dp[0][i][j] = 1 ; 
			}
		}
	}
	// printf(" \n");
	// FOR( i , 1 , n ){
	// 	FOR( j , 1 , m ){
	// 		printf("%d ", dp[now][i][j]);
	// 	}
	// 	printf("\n");
	// }
	// printf(" \n");
	// system("pause");

	printf("Case #%d: ",cc++);

	while( 1 ){
		ans++ ; 
		now = 1-now ; 
		prev = 1-prev ;
		abc = 0 ; 
		memset( dp[now] , 0 , sizeof( dp[now] ) ) ;
		memset( mask , 0 , sizeof(mask) ) ; 
		for(int i=0;i<sol.size();i++){
			int x = sol[i].first  ; 
			int y = sol[i].second ;
			if( in[x][y] == '^' ) in[x][y] = '>' ;
			else if( in[x][y] == '>' ) in[x][y] = 'v' ;
			else if( in[x][y] == 'v' ) in[x][y] = '<' ;
			else if( in[x][y] == '<' ) in[x][y] = '^' ;

			if( in[x][y] == '>' ){
				y++ ; 
				while( y <= m ){
					if( in[x][y] == '.' || in[x][y] == 'S' || in[x][y] == 'G' ) mask[x][y++] = 1 ; 
					else break ; 
				}
			} else if( in[x][y] == 'v' ){
				x++ ; 
				while( x <= n ){
					if( in[x][y] == '.' || in[x][y] == 'S' || in[x][y] == 'G' ) mask[x++][y] = 1 ; 
					else break ; 
				}
			} else if( in[x][y] == '<' ){
				y-- ; 
				while( y >= 1 ){
					if( in[x][y] == '.' || in[x][y] == 'S' || in[x][y] == 'G' ) mask[x][y--] = 1 ; 
					else break ;
				}
			} else if( in[x][y] == '^' ){
				x-- ; 
				while( x >= 1 ){
					if( in[x][y] == '.' || in[x][y] == 'S' || in[x][y] == 'G' ) mask[x--][y] = 1 ;
					else break ; 
				}
			}

		}
		FOR( i , 1 , n ){
			FOR( j , 1 , m ){
				if( ( in[i][j] == '.' || in[i][j] == 'G' || in[i][j] == 'S' ) && mask[i][j] == 0 ){
					if( dp[prev][i+1][j] == 1 || 
						dp[prev][i-1][j] == 1 || 
						dp[prev][i][j+1] == 1 || 
						dp[prev][i][j-1] == 1 ) {
						dp[now][i][j] = 1 ; 
						abc = 1 ; 
					}
				}
				if( ans > 1000 ){ abc = 0 ; break ; }
				if( dp[now][i][j] == 1 && in[i][j] == 'G' && mask[i][j] == 0 ){ 
					printf("%d\n",ans);
					abc = 2 ; 
					break ; 			
				}
				if( abc == 2 ) break ; 
				if( ans > 1000 ){ abc = 0 ; break ; }
			}
			if( abc == 2 ) break ; 
			if( ans > 1000 ){ abc = 0 ; break ; }
		}

		if( abc == 0 ){ 
			printf("impossible\n") ;
			break ;
		}
		// printf(" \n");
		// FOR( i , 1 , n ){
		// 	FOR( j , 1 , m ){
		// 		printf("%c", in[i][j]);
		// 	}
		// 	printf("\n");
		// }
		// FOR( i , 1 , n ){
		// 	FOR( j , 1 , m ){
		// 		printf("%d", dp[now][i][j]);
		// 	}
		// 	printf("\n");
		// }
		// printf(" \n");
		// system("pause");
		if( abc == 2 ) break ; 
	}
	
	return ; 
}

int main(int argc, char const *argv[]){

	freopen("in3.txt", "r",  stdin);
	freopen("out3.txt", "w", stdout);

	int n ; scanf("%d",&n) ; 
	while( n-- ) solve() ; 
 	
	//cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." << endl;
	return 0 ;

}

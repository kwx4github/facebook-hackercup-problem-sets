#include <bits/stdc++.h>

#define FO(i,a,b) for (int i = (a); i < (b); i++)
#define sz(v) int(v.size())

using namespace std;

typedef pair<int,int> ii;

int dy[] = {-1, 0, 1, 0};
int dx[] = {0, -1, 0, 1};
char dc[] ={'^','<','v','>'};

char g[105][105];
bool iv[105][105][4];
int dist[105][105][4];
int h, w;

bool gg(int ny, int nx) {
    return ny >= 0 && ny < h && nx >= 0 && nx < w && (g[ny][nx] == '.' || g[ny][nx] == 'S' || g[ny][nx] == 'G');
}

int main() {
    reverse(dy,dy+4);
    reverse(dx,dx+4);
    reverse(dc,dc+4);

    int T; scanf("%d", &T);
    FO(Z,1,T+1) {
        scanf("%d%d", &h, &w);
        ii s;
        FO(y,0,h) FO(x,0,w) {
            scanf(" %c", &g[y][x]);
            if (g[y][x] == 'S') {
                s = {y,x};
            }
            switch (g[y][x]) {
                case 'S':
                case '.':
                case 'G':
                    memset(iv[y][x], 0, sizeof(iv[y][x]));
                    break;
                default:
                    memset(iv[y][x], 1, sizeof(iv[y][x]));
                    break;
            }
        }
        FO(y,0,h) FO(x,0,w) {
            int i;
            for (i=0;i<4;i++) if (g[y][x] == dc[i]) {
                break;
            }
            if (i == 4) continue;
            FO(t,0,4) {
                int ny = y+dy[i], nx = x+dx[i];
                while (gg(ny,nx)) {
                    iv[ny][nx][t] = 1;
                    ny += dy[i]; nx += dx[i];
                }
                i++; if (i==4) i=0;
            }
        }
        /*FO(i,0,4) {
            FO(y,0,h) {
                FO(x,0,w) {
                    printf("%d", iv[y][x][i]);
                }
                printf("\n");
            }
            printf("\n");
        }*/
        queue<pair<ii,int> > q;
        memset(dist,-1,sizeof dist);
        int res = -1;
        q.push({s,0});
        dist[s.first][s.second][0]=0;
        while (!q.empty()) {
            ii p = q.front().first;
            int o = q.front().second;
            q.pop();
            if (g[p.first][p.second] == 'G') {
                res = dist[p.first][p.second][o];
                break;
            }
            FO(i,0,4) {
                int ny = p.first+dy[i], nx = p.second+dx[i], no = (o+1)%4;
                if (gg(ny,nx) && !iv[ny][nx][no] && dist[ny][nx][no] == -1) {
                    //printf("%d %d, %d -> %d %d, %d\n", p.first, p.second, o, ny, nx, no);
                    dist[ny][nx][no] = dist[p.first][p.second][o]+1;
                    q.push({{ny,nx},no});
                }
            }
        }
        printf("Case #%d: ", Z);
        if (res == -1) printf("impossible\n");
        else printf("%d\n", res);
    }
}


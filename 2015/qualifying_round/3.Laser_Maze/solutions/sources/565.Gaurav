#include<bits/stdc++.h>
#define UP 0
#define RIGHT 1
#define DOWN 2
#define LEFT 3
using namespace std;
vector<string> grid;
vector<pair<pair<int,int>,int>> graph;
int store[110][110][4];
int visited[110][110][4];
bool isPossible(int X,int Y,int M,int N){
	if(X<0 || X>=M){
		return 0;
	}
	if(Y<0 || Y>=N){
		return 0;
	}
	if(grid[X][Y]=='#' || grid[X][Y]=='^' || grid[X][Y]=='>' || grid[X][Y]=='v' || grid[X][Y]=='<'){
		return 0;	
	}
	for(int i=0;i<graph.size();i++){
		if(graph[i].second==0 && Y==graph[i].first.second && X<=graph[i].first.first && X>store[graph[i].first.first][graph[i].first.second][graph[i].second]){
			return 0;			
		}
		else if(graph[i].second==1 && X==graph[i].first.first && Y>=graph[i].first.second && Y<store[graph[i].first.first][graph[i].first.second][graph[i].second]){
			return 0;			
		}
		else if(graph[i].second==2 && Y==graph[i].first.second && X>=graph[i].first.first && X<store[graph[i].first.first][graph[i].first.second][graph[i].second]){
			return 0;			
		}
		else if(graph[i].second==3 && X==graph[i].first.first && Y<=graph[i].first.second && Y>store[graph[i].first.first][graph[i].first.second][graph[i].second]){
			return 0;			
		}
	}
	return 1;	
}


int main(){
	freopen("in3.txt","r",stdin);
	freopen("out3.txt","w",stdout);
	int t;
	cin>>t;
	for(int test=1;test<=t;test++){
		memset(visited,0,sizeof(visited));
		int M,N;
		cin>>M>>N;
		
		grid.resize(M);
		for(int i=0;i<M;i++){
			cin>>grid[i];
		}
		pair<int,int> S;
		pair<int,int> E;
		for(int i=0;i<M;i++){
			for(int j=0;j<N;j++){
                if(grid[i][j]=='^')
                {
                	graph.push_back(make_pair(make_pair(i,j),UP));
                }
                else if(grid[i][j]=='>'){
                	graph.push_back(make_pair(make_pair(i,j),RIGHT));
                }
                else if(grid[i][j]=='v'){
                	graph.push_back(make_pair(make_pair(i,j),DOWN));
                }
                else if(grid[i][j]=='<'){
                	graph.push_back(make_pair(make_pair(i,j),LEFT));
                }
                else if(grid[i][j]=='S'){
                    S=make_pair(i,j);
                }
                else if(grid[i][j]=='G'){
                    E=make_pair(i,j);
                }
			}
		}
		/*
		cout<<"GRAPH \n";
		for(int i=0;i<graph.size();i++){
		cout<<graph[i].first.first<<" "<<graph[i].first.second<<" "<<graph[i].second<<"\n";
		}
		*/
		for(int ii=0;ii<graph.size();ii++){
			int currentX=graph[ii].first.first;
			int currentY=graph[ii].first.second;
			int i,j;
    		for(i=currentX-1;i>=0;i--)
        		if(grid[i][currentY]=='#' || grid[i][currentY]=='<' || grid[i][currentY]=='^' || grid[i][currentY]=='>' || grid[i][currentY]=='v')
            		break;
    		store[currentX][currentY][0]=i;
    		for(j=currentY+1;j<N;j++)
        		if(grid[currentX][j]=='#' || grid[currentX][j]=='<' || grid[currentX][j]=='^' || grid[currentX][j]=='>' || grid[currentX][j]=='v')
            	break;
    		store[currentX][currentY][1]=j;
    		
    		for(j=currentY-1;j>=0;j--)
        		if(grid[currentX][j]=='#' || grid[currentX][j]=='<' || grid[currentX][j]=='^' || grid[currentX][j]=='>' || grid[currentX][j]=='v')
            		break;
    		store[currentX][currentY][3]=j;
    		
    		for(i=currentX+1;i<M;i++)
        		if(grid[i][currentY]=='#' || grid[i][currentY]=='<' || grid[i][currentY]=='^' || grid[i][currentY]=='>' || grid[i][currentY]=='v')
            		break;
    		store[currentX][currentY][2]=i;
    	}
    	/*
    	for(int i=0;i<M;i++){
 			for(int j=0;j<N;j++){
 				for(int k=0;k<=3;k++){
 					cout<<store[i][j][k]<<" ";
 				}
 				cout<<"\n";
 			}
 			cout<<"\n";
 		}
 		*/
 		
		queue<pair<pair<int,int>,int>> Q;	
		Q.push(make_pair(S,0));
		int moves=0;
		int flag=0;
		int res;
		while(1){
			for(int i=0;i<graph.size();i++){
				graph[i].second=(graph[i].second+1)%4;
			}
        	moves=Q.size();
        	if(moves==0){
        		break;
        	}
        	while(moves-- && !Q.empty())
            {
                pair<pair<int,int>,int> temp=Q.front();
                Q.pop();
                int currentX=temp.first.first;
                int currentY=temp.first.second;
                int currentMoves=temp.second;
                //cout<<"WORKING FOR "<<currentX<<" "<<currentY<<" "<<currentMoves<<"\n";
                if(visited[currentX][currentY][currentMoves%4]!=1){
                	visited[currentX][currentY][currentMoves%4]=1;	
                	if(temp.first==E){
                		//cout<<"REACHED END "<<"\n";
                		res=currentMoves;
                		flag=1;
                		break;
                	}
                	int moveUpX=currentX-1;
                	int moveUpY=currentY;
                	if(isPossible(moveUpX,moveUpY,M,N)){
                		//cout<<"MOVING IN up DIRECTION WITH "<<moveUpX<<" "<<moveUpY<<"\n";
                		Q.push(make_pair(make_pair(moveUpX,moveUpY),currentMoves+1));
                	}
                	int moveRightX=currentX;
                	int moveRightY=currentY+1;
                	if(isPossible(moveRightX,moveRightY,M,N)){
                		//cout<<"MOVING IN RIGHT DIRECTION WITH "<<moveRightX<<" "<<moveRightY<<"\n";
                		Q.push(make_pair(make_pair(moveRightX,moveRightY),currentMoves+1));
                	}
            		int moveDownX=currentX+1;
                	int moveDownY=currentY;
                	if(isPossible(moveDownX,moveDownY,M,N)){
                		//cout<<"MOVING IN down DIRECTION WITH "<<moveDownX<<" "<<moveDownY<<"\n";
                		Q.push(make_pair(make_pair(moveDownX,moveDownY),currentMoves+1));
                	}
                	int moveLeftX=currentX;
                	int moveLeftY=currentY-1;
                	if(isPossible(moveLeftX,moveLeftY,M,N)){
                		//cout<<"MOVING IN left DIRECTION WITH "<<moveLeftX<<" "<<moveLeftY<<"\n";
                		Q.push(make_pair(make_pair(moveLeftX,moveLeftY),currentMoves+1));
                	}	
                }
            }
            if(flag==1){
            	break;
            }       
		}
		if(flag==0){
			cout<<"Case #"<<test<<": "<<"impossible\n";
		}
		else{
			cout<<"Case #"<<test<<": "<<res<<"\n";
		}
		graph.clear();
	}
}

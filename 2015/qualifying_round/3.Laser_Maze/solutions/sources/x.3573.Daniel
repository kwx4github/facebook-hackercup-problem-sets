#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include <stdlib.h>

using namespace std;
int an, lar;
int g_an, g_lar;
set<string> seto;
map<string, int> mapa;
bool gano;
int res;
long long int matar;

void imprimir(vector<string>vec){
    for(int i = 0;i < vec.size(); i ++){
        cout<<vec[i]<<endl;
    }
}

bool voltear(vector<string>& vec2){
    vector<string> vec;
    vec = vec2;
    for(int i = 0; i < lar; i ++){
        for(int j = 0; j < an; j ++){

            if(vec[i][j] == '<'){
                vec[i][j] = '^';
                for(int k = i - 1; k >= 0; k --){
                    if(k < 0)break;
                    if(vec[k][j] == 'S')return false;
                    if(vec[k][j] == '#' || vec[k][j] == '^' ||vec[k][j] == '<' ||vec[k][j] == '>' ||vec[k][j] == 'v' ){
                        break;
                    }
                }
                continue;
            }

            if(vec[i][j] == '>'){

                vec[i][j] = 'v';
                for(int k = i + 1; k < lar; k ++){
                    if(k >= lar)break;
                    if(vec[k][j] == 'S')return false;
                    if(vec[k][j] == '#' || vec[k][j] == '^' ||vec[k][j] == '<' ||vec[k][j] == '>' ||vec[k][j] == 'v' ){
                        break;
                    }
                }
                continue;
            }

            if(vec[i][j] == '^'){
                vec[i][j] = '>';
                for(int k = j + 1; k < an; k ++){
                    if(k >= lar)break;
                    if(vec[i][k] == 'S')return false;
                    if(vec[i][k] == '#' || vec[i][k] == '^' ||vec[i][k] == '<' ||vec[i][k] == '>' ||vec[i][k] == 'v' ){
                        break;
                    }
                }
                continue;
            }

            if(vec[i][j] == 'v'){
                vec[i][j] = '<';
                for(int k = j - 1; k >= 0; k --){
                    if(k < 0)break;
                    if(vec[i][k] == 'S')return false;
                    if(vec[i][k] == '#' || vec[i][k] == '^' ||vec[i][k] == '<' ||vec[i][k] == '>' ||vec[i][k] == 'v' ){
                        break;
                    }
                }
                continue;
            }

        }
    }

    vec2 = vec;


    return true;

}

string setear(vector<string> vec){
    string res;
    for(int i = 0; i < vec.size(); i ++){
        res += vec[i];
    }
    return res;
}


struct Coso{

    vector<string> vec;
    int pos_lar;
    int pos_an;
    int conta;
    int peso;

    bool operator<(const Coso a)const{
        if(peso <= a.peso)return false;
        return true;
    }

};
int maxi;

void recur(vector<string> vec1, int pos_lar1, int pos_an1, int conta1){

    priority_queue<Coso> cola;
    ///Meterle el primer elemento.
     Coso a;
    a.vec = vec1;
    a.pos_lar = pos_lar1;
    a.pos_an = pos_an1;
    a.conta = conta1;
    cola.push(a);
    maxi = 0;
    while(!cola.empty())
    {
        matar ++;
        //if(matar % 100000 == 0)cout<<matar<<endl;
        if(matar >= 100000)break;
        Coso cosito;
        cosito = cola.top();
        cola.pop();

        vector<string> vec = cosito.vec;
        int pos_lar = cosito.pos_lar;
        int pos_an = cosito.pos_an;
        int conta = cosito.conta;


        if(conta > maxi){
            maxi = conta;

           /* cout<<endl<<endl<<conta<<endl;
            imprimir(vec);
            cout<<endl<<endl<<endl;*/
            //cout<<"---------------"<<maxi<<endl;
        }

        if(mapa.find(setear(vec)) != mapa.end()/* && mapa[setear(vec)] >= conta */){
            if(mapa[setear(vec)] < conta)continue;
        }
        mapa[setear(vec)] = conta;

       // cout<<"entro recursion "<<pos_lar<<" "<<pos_an<<"--->"<<conta<<endl;
        //imprimir(vec);
        vector<string> vec_aux;
        if(pos_lar + 1  < lar){
            if(vec[pos_lar + 1][pos_an] == '.'){
                vector<string> vec_aux = vec;
                vec_aux[pos_lar + 1][pos_an] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(voltear(vec_aux)){
                    //recur(vec_aux, pos_lar + 1, pos_an, conta + 1);
                    Coso a;
                    a.vec = vec_aux;
                    a.pos_lar = pos_lar + 1;
                    a.pos_an = pos_an;
                    a.conta = conta + 1;
                    a.peso = abs(g_lar - (pos_lar +1 )) + abs(g_an - (pos_an));
                    cola.push(a);
                }

            }else if(vec[pos_lar + 1][pos_an] == 'G'){
                ///Gano.
                vector<string> vec_aux = vec;
                vec_aux[pos_lar + 1][pos_an] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(!voltear(vec_aux))continue;
                gano = true;
                res = conta;
                break;
            }
        }




        if(pos_lar - 1  >= 0){
            if(vec[pos_lar - 1][pos_an] == '.'){
                vector<string> vec_aux = vec;
                vec_aux[pos_lar - 1][pos_an] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(voltear(vec_aux)){
                    //recur(vec_aux, pos_lar - 1, pos_an, conta + 1);
                    Coso a;
                    a.vec = vec_aux;
                    a.pos_lar = pos_lar - 1;
                    a.pos_an = pos_an;
                    a.conta = conta + 1;
                    a.peso = abs(g_lar - (pos_lar - 1 )) + abs(g_an - (pos_an));
                    cola.push(a);
                }
            }else if(vec[pos_lar - 1][pos_an] == 'G'){
                ///Gano.
                vector<string> vec_aux = vec;
                vec_aux[pos_lar - 1][pos_an] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(!voltear(vec_aux))continue;
                gano = true;
                res = conta;
                break;
            }
        }
       // if(pos_lar== 4 && pos_an==0)cout<<"////////////////////////////aqui///////////////////////////////"<<endl;

        if(pos_an + 1  < an){
            if(vec[pos_lar][pos_an + 1] == '.'){
                vector<string> vec_aux = vec;
                vec_aux[pos_lar][pos_an + 1] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
               // cout<<"puedo mover derecha"<<endl;
                if(voltear(vec_aux)){
                 //   cout<<"me movi derecha"<<endl;
                   // recur(vec_aux, pos_lar, pos_an + 1, conta + 1);
                    Coso a;
                    a.vec = vec_aux;
                    a.pos_lar = pos_lar;
                    a.pos_an = pos_an + 1;
                    a.conta = conta + 1;
                    a.peso = abs(g_lar - (pos_lar )) + abs(g_an - (pos_an + 1));
                    cola.push(a);
                }

            }else if(vec[pos_lar][pos_an + 1] == 'G'){
                ///Gano.
                //cout<<"ganoooooooooo"<<endl;
                vector<string> vec_aux = vec;
                vec_aux[pos_lar][pos_an + 1] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(!voltear(vec_aux))continue;
                gano = true;
                res = conta;
                break;
            }
        }

         if(pos_an - 1  >= 0){
            if(vec[pos_lar][pos_an - 1] == '.'){
                vector<string> vec_aux = vec;
                vec_aux[pos_lar][pos_an - 1] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(voltear(vec_aux)){
                    //recur(vec_aux, pos_lar, pos_an - 1, conta + 1);
                    Coso a;
                    a.vec = vec_aux;
                    a.pos_lar = pos_lar;
                    a.pos_an = pos_an - 1;
                    a.conta = conta + 1;
                    a.peso = abs(g_lar - (pos_lar )) + abs(g_an - (pos_an- 1));
                    cola.push(a);
                }

            }else if(vec[pos_lar][pos_an - 1] == 'G'){
                ///Gano.
                vector<string> vec_aux = vec;
                vec_aux[pos_lar ][pos_an - 1] = 'S';
                vec_aux[pos_lar][pos_an] = '.';
                if(!voltear(vec_aux))continue;
                gano = true;
                res = conta;
                break;
            }
        }
    }//Terminal while.


}




int main(){

    int casos, conta = 1;
    cin>>casos;
    while(casos--){
        matar = 0;
        cin>>lar>>an;
        mapa.clear();
        seto.clear();
        gano = false;
        res = 9999999;
        vector<string> vec;
        string aux_fila;
        for(int i = 0; i < lar; i ++){
                cin>>aux_fila;
                vec.push_back(aux_fila);
        }
        int pos_lar, pos_an;
        for(int i = 0; i < lar; i ++){
            for(int j = 0; j < an; j ++){
                if(vec[i][j] == 'S')
                {
                    pos_lar = i;
                    pos_an = j;
                }
                if(vec[i][j] == 'G')
                {
                    g_lar = i;
                    g_an = j;
                }
            }
        }

       recur(vec,pos_lar, pos_an,0);

       if(gano){
        cout<<"Case #"<<conta++<<": "<<res+1<<endl;
       }else
         cout<<"Case #"<<conta++<<": "<<"impossible"<<endl;

    }

    return 0;
}

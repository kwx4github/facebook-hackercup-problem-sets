#include <bits/stdc++.h>

using namespace std;

struct RTC{~RTC(){cerr << "Time: " << clock() * 1.0 / CLOCKS_PER_SEC <<" seconds\n";}} runtimecount;
#define DBG(X) cerr << #X << " = " << X << '\n';
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define all(c) (c).begin(),(c).end()
#define forn(i, n) for (int i = 0; i < (n); i++)

int n, m;
string mapa[123];
bool v[4][100][100];
int dist[4][100][100];
int inii, inij, fini, finj;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = { 0, 1, 0,-1};
int dir(char e) {
    string cad = "^>v<";
    forn (i, sz(cad))
	if (cad[i] == e)
	    return i;
    return -1;
}
int main() {
    int t;
    cin >> t;
    for (int caso = 1; caso <= t; caso++) {
	 cin >> n >> m;
	 forn (i, n)
	     cin >> mapa[i];
	 
	 forn (i, 4) forn(j, n) forn (k, m) {
	     v[i][j][k] = (mapa[j][k] == '.' || mapa[j][k] == 'S' || mapa[j][k] == 'G');
	     if (mapa[j][k] == 'S')
		 inii = j, inij = k;
	     if (mapa[j][k] == 'G')
		 fini = j, finj = k;
	 }
	 mapa[inii][inij] = '.';
	 mapa[fini][finj] = '.';
	 forn (i, n) forn (j, m) {
	     int d = dir(mapa[i][j]);
	     if (d == -1) continue;
	     forn (k, 4) {
		 int x = i + dx[d], y = j + dy[d];
		 while (x >= 0 && x < n && y >= 0 && y < m && mapa[x][y] == '.') {
		     v[k][x][y] = false;
		     x += dx[d];
		     y += dy[d];
		 }
		 d++;
		 if (d == 4) d = 0;
	     }
	 }
	 memset(dist, -1, sizeof(dist));

	 //(tiempoactual, (i, j)) (donde estoy parado)
	 queue<pair<int, pair<int,int> > > q;
	 q.push(mp(0, mp(inii, inij)));
	 dist[0][inii][inij] = 0;
	 
	 while (!q.empty()) {
	     pair<int, pair<int,int> > e = q.front(); q.pop();
	     int tiempo = e.first;
	     int i = e.second.first;
	     int j = e.second.second;
	     forn (k, 4) {
		 int tt = (tiempo + 1) % 4;
		 int ii = i + dx[k];
		 int jj = j + dy[k];
		 if (ii >= 0 && ii < n && jj >= 0 && jj < m && v[tt][ii][jj] && dist[tt][ii][jj] == -1) {
		     dist[tt][ii][jj] = tiempo + 1;
		     q.push(mp(tiempo + 1, mp(ii, jj)));
		 }
	     }   
	 }
	 int ans = -1;
	 forn (i, 4)
	     if (dist[i][fini][finj] != -1) {
		 if (ans == -1) ans = dist[i][fini][finj];
		 else ans = min(ans, dist[i][fini][finj]);
	     }
	 if (ans == -1)
	     printf("Case #%d: impossible\n", caso);
	 else
	     printf("Case #%d: %d\n", caso, ans);
    }
    return 0;
}

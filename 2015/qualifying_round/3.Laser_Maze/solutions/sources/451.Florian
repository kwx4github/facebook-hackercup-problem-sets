#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

#define all(a) (a).begin(),(a).end()
#define pb push_back
#define sz(a) ((int)(a).size())
#define mp make_pair
#define fi first
#define se second

typedef pair<int,int> pint;
typedef long long ll;
typedef vector<int> vi;


#define MAX_N 105

int m,n;
char maze[MAX_N][MAX_N];
bool vis[MAX_N][MAX_N][4];
pint s,g;
vector<pint> laser;
vector<int> dir;

bool hit1(int x, int a, int b)
{
	for (int i=a; i<=b; i++)
		if (!(maze[i][x]=='.'||maze[i][x]=='S'||maze[i][x]=='G'))
			return false;
	return true;
}

bool hit2(int x, int a, int b)
{
	for (int i=a; i<=b; i++)
		if (!(maze[x][i]=='.'||maze[x][i]=='S'||maze[x][i]=='G'))
			return false;
	return true;
}

int main()
{
	int tc;
	char str[MAX_N];
	scanf("%d",&tc);
	for (int x=1; x<=tc; x++)
	{
		scanf("%d %d",&m,&n);
		laser.clear();
		dir.clear();
		for (int i=0; i<m; i++)
		{
			scanf("%s",str);
			for (int j=0; j<n; j++)
			{
				maze[i][j]=str[j];
				for (int k=0; k<4; k++)
					vis[i][j][k]=false;
				if (str[j]=='S')
					s=mp(i,j);
				else if (str[j]=='G')
					g=mp(i,j);
				else if (str[j]!='.'&&str[j]!='#')
					laser.pb(mp(i,j)),dir.pb(str[j]=='^'?0:str[j]=='>'?1:str[j]=='v'?2:3);
			}
		}
		queue<pair<pint,int> > q;
		q.push(mp(s,0));
		vis[s.fi][s.se][0]=true;
		pint pos;
		int t,rest;
		bool found=false;
		while (!q.empty())
		{
			pos=q.front().fi;
			t=q.front().se;
			q.pop();
			bool dead=false;	
			for (int i=0; !dead&&i<sz(laser); i++)
			{
				int d=(dir[i]+t)%4;
				switch (d)
				{
					case 0:
						if (pos.se!=laser[i].se||pos.fi>laser[i].fi)
							continue;
						if (hit1(pos.se,pos.fi,laser[i].fi-1))
							dead=true;
						break;

					case 1:
						if (pos.fi!=laser[i].fi||pos.se<laser[i].se)
							continue;
						if (hit2(pos.fi,laser[i].se+1,pos.se))
							dead=true;
						break;

					case 2:
						if (pos.se!=laser[i].se||pos.fi<laser[i].fi)
							continue;
						if (hit1(pos.se,laser[i].fi+1,pos.fi))
							dead=true;
						break;

					case 3:
						if (pos.fi!=laser[i].fi||pos.se>laser[i].se)
							continue;
						if (hit2(pos.fi,pos.se,laser[i].se-1))
							dead=true;
						break;
				}				
			}
			if (t>0&&dead)
				continue;
			if (maze[pos.fi][pos.se]=='G')
			{
				rest=t;
				found=true;
				break;
			}
			t++;
			int r=t%4;
			for (int i=-1; i<2; i++)
				for (int j=-1; j<2; j++)
				{
					if ((i&&j)||(i==0&&j==0))
						continue;
					if (pos.fi+i<0||pos.fi+i>=m||pos.se+j<0||pos.se+j>=n)
						continue;
					int ni=pos.fi+i,nj=pos.se+j;
					if (!(maze[ni][nj]=='.'||maze[ni][nj]=='S'||maze[ni][nj]=='G'))
						continue;
					if (vis[ni][nj][r])
						continue;
					vis[ni][nj][r]=true;
					q.push(mp(mp(ni,nj),t));
				}
		}
		if (found)
			printf("Case #%d: %d\n",x,rest);
		else
			printf("Case #%d: impossible\n",x);
	}
	return 0;
}
